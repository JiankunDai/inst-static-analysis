BOLT-INFO: shared object or position-independent executable detected
BOLT-INFO: Target architecture: x86_64
BOLT-INFO: BOLT version: <unknown>
BOLT-INFO: first alloc address is 0x0
BOLT-INFO: creating new program header table at address 0x200000, offset 0x200000
BOLT-INFO: enabling lite mode
BOLT-WARNING: ignoring symbol __bss_start at 0x28030, which lies outside .bss
BOLT-WARNING: split function detected on input : _GLOBAL__sub_I_results.cold
Binary Function "_init" after disassembly {
  Number      : 1
  State       : disassembled
  Address     : 0x1000
  Size        : 0x1b
  MaxSize     : 0x1b
  Offset      : 0x1000
  Section     : .init
  Orc Section : .local.text._init
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB00:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	movq	DATAat0x27ff0(%rip), %rax
    0000000f: 	testq	%rax, %rax
    00000012: 	je	.Ltmp0 # Offset: 18
    00000014: 	callq	*%rax # Offset: 20
.Ltmp0:
    00000016: 	addq	$0x8, %rsp
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_init"

Binary Function "main" after disassembly {
  Number      : 3
  State       : disassembled
  Address     : 0x1410
  Size        : 0xd9
  MaxSize     : 0xe0
  Offset      : 0x1410
  Section     : .text
  Orc Section : .local.text.main
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB02:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	pushq	%rbp
    0000000b: 	pushq	%rbx
    0000000c: 	testl	%edi, %edi
    0000000e: 	jle	.Ltmp1 # Offset: 14
    00000014: 	leal	-0x1(%rdi), %eax
    00000017: 	movl	%edi, %r13d
    0000001a: 	movq	%rsi, %r14
    0000001d: 	movq	%rsi, %rbx
    00000020: 	leaq	0x8(%rsi,%rax,8), %r12
    00000025: 	leaq	DATAat0x24518(%rip), %rbp
    0000002c: 	nopl	(%rax) # Size: 4
.Ltmp2:
    00000030: 	movq	(%rbx), %rdx
    00000033: 	movq	%rbp, %rsi
    00000036: 	movl	$0x1, %edi
    0000003b: 	xorl	%eax, %eax
    0000003d: 	addq	$0x8, %rbx
    00000041: 	callq	__printf_chk@PLT # Offset: 65
    00000046: 	cmpq	%r12, %rbx
    00000049: 	jne	.Ltmp2 # Offset: 73
    0000004b: 	xorl	%eax, %eax
    0000004d: 	leaq	DATAat0x244fe(%rip), %rsi
    00000054: 	movl	$0x1, %edi
    00000059: 	callq	__printf_chk@PLT # Offset: 89
    0000005e: 	cmpl	$0x1, %r13d
    00000062: 	jg	.Ltmp3 # Offset: 98
.Ltmp4:
    00000064: 	callq	_Z11TestOneTypeIiEvv # Offset: 100
    00000069: 	callq	_Z11TestOneTypeIfEvv # Offset: 105
    0000006e: 	movl	iterations(%rip), %edx
    00000074: 	movl	%edx, %eax
    00000076: 	shrl	$0x1f, %eax
    00000079: 	addl	%edx, %eax
    0000007b: 	sarl	%eax
    0000007d: 	movl	%eax, iterations(%rip)
    00000083: 	callq	_Z11TestOneTypeIdEvv # Offset: 131
    00000088: 	popq	%rbx
    00000089: 	xorl	%eax, %eax
    0000008b: 	popq	%rbp
    0000008c: 	popq	%r12
    0000008e: 	popq	%r13
    00000090: 	popq	%r14
    00000092: 	retq # Offset: 146
.Ltmp3:
    00000093: 	movq	0x8(%r14), %rdi
    00000097: 	movl	$0xa, %edx
    0000009c: 	xorl	%esi, %esi
    0000009e: 	callq	strtol@PLT # Offset: 158
    000000a3: 	movl	%eax, iterations(%rip)
    000000a9: 	cmpl	$0x2, %r13d
    000000ad: 	jle	.Ltmp4 # Offset: 173
    000000af: 	movq	0x10(%r14), %rdi
    000000b3: 	xorl	%esi, %esi
    000000b5: 	callq	strtod@PLT # Offset: 181
    000000ba: 	movsd	%xmm0, init_value(%rip)
    000000c2: 	jmp	.Ltmp4 # Offset: 194
.Ltmp1:
    000000c4: 	leaq	DATAat0x244fe(%rip), %rsi
    000000cb: 	movl	$0x1, %edi
    000000d0: 	xorl	%eax, %eax
    000000d2: 	callq	__printf_chk@PLT # Offset: 210
    000000d7: 	jmp	.Ltmp4 # Offset: 215
DWARF CFI Instructions:
    <empty>
End of Function "main"

Binary Function "_start" after disassembly {
  Number      : 5
  State       : disassembled
  Address     : 0x15d0
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x15d0
  Section     : .text
  Orc Section : .local.text._start
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB04:
    00000000: 	endbr64
    00000004: 	xorl	%ebp, %ebp
    00000006: 	movq	%rdx, %r9
    00000009: 	popq	%rsi
    0000000a: 	movq	%rsp, %rdx
    0000000d: 	andq	$-0x10, %rsp
    00000011: 	pushq	%rax
    00000012: 	pushq	%rsp
    00000013: 	xorl	%r8d, %r8d
    00000016: 	xorl	%ecx, %ecx
    00000018: 	leaq	main(%rip), %rdi
    0000001f: 	callq	*DATAat0x27fe0(%rip) # Offset: 31
    00000025: 	hlt
DWARF CFI Instructions:
    <empty>
End of Function "_start"

Binary Function "deregister_tm_clones/1(*2)" after disassembly {
  All names   : deregister_tm_clones/1
                deregister_tm_clones/crtstuff.c/1
  Number      : 6
  State       : disassembled
  Address     : 0x1600
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x1600
  Section     : .text
  Orc Section : .local.text.deregister_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB05:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rax
    0000000e: 	cmpq	%rdi, %rax
    00000011: 	je	.Ltmp5 # Offset: 17
    00000013: 	movq	DATAat0x27fe8(%rip), %rax
    0000001a: 	testq	%rax, %rax
    0000001d: 	je	.Ltmp5 # Offset: 29
    0000001f: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 31
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp5:
    00000028: 	retq # Offset: 40
    00000029: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "deregister_tm_clones/1(*2)"

Binary Function "register_tm_clones/1(*2)" after disassembly {
  All names   : register_tm_clones/1
                register_tm_clones/crtstuff.c/1
  Number      : 7
  State       : disassembled
  Address     : 0x1630
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x1630
  Section     : .text
  Orc Section : .local.text.register_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB06:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rsi
    0000000e: 	subq	%rdi, %rsi
    00000011: 	movq	%rsi, %rax
    00000014: 	shrq	$0x3f, %rsi
    00000018: 	sarq	$0x3, %rax
    0000001c: 	addq	%rax, %rsi
    0000001f: 	sarq	%rsi
    00000022: 	je	.Ltmp6 # Offset: 34
    00000024: 	movq	DATAat0x27ff8(%rip), %rax
    0000002b: 	testq	%rax, %rax
    0000002e: 	je	.Ltmp6 # Offset: 46
    00000030: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 48
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp6:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "register_tm_clones/1(*2)"

Binary Function "__do_global_dtors_aux/1(*2)" after disassembly {
  All names   : __do_global_dtors_aux/1
                __do_global_dtors_aux/crtstuff.c/1
  Number      : 8
  State       : disassembled
  Address     : 0x1670
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x1670
  Section     : .text
  Orc Section : .local.text.__do_global_dtors_aux/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB07:
    00000000: 	endbr64
    00000004: 	cmpb	$0x0, "completed.0/1"(%rip)
    0000000b: 	jne	.Ltmp7 # Offset: 11
    0000000d: 	pushq	%rbp
    0000000e: 	cmpq	$0x0, __cxa_finalize@GOT(%rip)
    00000016: 	movq	%rsp, %rbp
    00000019: 	je	.Ltmp8 # Offset: 25
    0000001b: 	movq	__dso_handle(%rip), %rdi
    00000022: 	callq	__cxa_finalize@PLT # Offset: 34
.Ltmp8:
    00000027: 	callq	"deregister_tm_clones/1" # Offset: 39
    0000002c: 	movb	$0x1, "completed.0/1"(%rip)
    00000033: 	popq	%rbp
    00000034: 	retq # Offset: 52
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp7:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "__do_global_dtors_aux/1(*2)"

Binary Function "frame_dummy/1(*2)" after disassembly {
  All names   : frame_dummy/1
                frame_dummy/crtstuff.c/1
  Number      : 9
  State       : disassembled
  Address     : 0x16b0
  Size        : 0x10
  MaxSize     : 0x10
  Offset      : 0x16b0
  Section     : .text
  Orc Section : .local.text.frame_dummy/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB08:
    00000000: 	endbr64
    00000004: 	jmp	"register_tm_clones/1" # TAILCALL  # Offset: 4
    00000009: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "frame_dummy/1(*2)"

Binary Function "_Z13record_resultdPKc" after disassembly {
  Number      : 10
  State       : disassembled
  Address     : 0x16c0
  Size        : 0xa0
  MaxSize     : 0xa0
  Offset      : 0x16c0
  Section     : .text
  Orc Section : .local.text._Z13record_resultdPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB09:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %rbx
    00000008: 	subq	$0x10, %rsp
    0000000c: 	movq	results(%rip), %rdi
    00000013: 	movl	allocated_results(%rip), %esi
    00000019: 	testq	%rdi, %rdi
    0000001c: 	je	.Ltmp9 # Offset: 28
    0000001e: 	movl	current_test(%rip), %eax
    00000024: 	cmpl	%esi, %eax
    00000026: 	jl	.Ltmp10 # Offset: 38
.Ltmp9:
    00000028: 	addl	$0xa, %esi
    0000002b: 	movsd	%xmm0, 0x8(%rsp)
    00000031: 	movl	%esi, allocated_results(%rip)
    00000037: 	movslq	%esi, %rsi
    0000003a: 	shlq	$0x4, %rsi
    0000003e: 	callq	realloc@PLT # Offset: 62
    00000043: 	movq	%rax, results(%rip)
    0000004a: 	movq	%rax, %rdi
    0000004d: 	testq	%rax, %rax
    00000050: 	je	.Ltmp11 # Offset: 80
    00000052: 	movl	current_test(%rip), %eax
    00000058: 	movsd	0x8(%rsp), %xmm0
.Ltmp10:
    0000005e: 	movslq	%eax, %rdx
    00000061: 	addl	$0x1, %eax
    00000064: 	shlq	$0x4, %rdx
    00000068: 	addq	%rdx, %rdi
    0000006b: 	movsd	%xmm0, (%rdi)
    0000006f: 	movq	%rbx, 0x8(%rdi)
    00000073: 	movl	%eax, current_test(%rip)
    00000079: 	addq	$0x10, %rsp
    0000007d: 	popq	%rbx
    0000007e: 	retq # Offset: 126
.Ltmp11:
    0000007f: 	movl	allocated_results(%rip), %edx
    00000085: 	movl	$0x1, %edi
    0000008a: 	leaq	DATAat0x243d0(%rip), %rsi
    00000091: 	xorl	%eax, %eax
    00000093: 	callq	__printf_chk@PLT # Offset: 147
    00000098: 	orl	$-0x1, %edi
    0000009b: 	callq	exit@PLT # Offset: 155
DWARF CFI Instructions:
    <empty>
End of Function "_Z13record_resultdPKc"

Binary Function "_Z9summarizePKciiii" after disassembly {
  Number      : 11
  State       : disassembled
  Address     : 0x1760
  Size        : 0x325
  MaxSize     : 0x330
  Offset      : 0x1760
  Section     : .text
  Orc Section : .local.text._Z9summarizePKciiii
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB010:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x38, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movl	%r8d, 0x2c(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp12 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	movl	%esi, %r15d
    0000002b: 	movl	%edx, %r13d
    0000002e: 	jle	.Ltmp13 # Offset: 46
    00000034: 	movq	results(%rip), %rcx
    0000003b: 	subl	$0x1, %eax
    0000003e: 	movl	$0xc, %ebx
    00000043: 	shlq	$0x4, %rax
    00000047: 	leaq	0x8(%rcx), %r14
    0000004b: 	leaq	0x18(%rcx,%rax), %rbp
.Ltmp14:
    00000050: 	movq	(%r14), %rdi
    00000053: 	callq	strlen@PLT # Offset: 83
    00000058: 	cmpl	%eax, %ebx
    0000005a: 	cmovll	%eax, %ebx
    0000005d: 	addq	$0x10, %r14
    00000061: 	cmpq	%r14, %rbp
    00000064: 	jne	.Ltmp14 # Offset: 100
    00000066: 	leal	-0xc(%rbx), %edx
.Ltmp27:
    00000069: 	leaq	DATAat0x2451a(%rip), %rbp
    00000070: 	leaq	DATAat0x243f0(%rip), %rsi
    00000077: 	movl	$0x1, %edi
    0000007c: 	xorl	%eax, %eax
    0000007e: 	movq	%rbp, %rcx
    00000081: 	callq	__printf_chk@PLT # Offset: 129
    00000086: 	movl	%ebx, %edx
    00000088: 	movq	%rbp, %rcx
    0000008b: 	movl	$0x1, %edi
    00000090: 	leaq	DATAat0x24430(%rip), %rsi
    00000097: 	xorl	%eax, %eax
    00000099: 	callq	__printf_chk@PLT # Offset: 153
    0000009e: 	movl	current_test(%rip), %edx
    000000a4: 	testl	%edx, %edx
    000000a6: 	jle	.Ltmp15 # Offset: 166
    000000ac: 	pxor	%xmm0, %xmm0
    000000b0: 	pxor	%xmm1, %xmm1
    000000b4: 	xorl	%r14d, %r14d
    000000b7: 	movsd	DATAat0x24968(%rip), %xmm3
    000000bf: 	cvtsi2sd	%r15d, %xmm0
    000000c4: 	leaq	DATAat0x24460(%rip), %rbp
    000000cb: 	cvtsi2sd	%r13d, %xmm1
    000000d0: 	mulsd	%xmm1, %xmm0
    000000d4: 	divsd	DATAat0x24960(%rip), %xmm0
    000000dc: 	movsd	%xmm0, 0x20(%rsp)
    000000e2: 	jmp	.Ltmp16 # Offset: 226
    000000e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp20:
    000000f0: 	comisd	%xmm0, %xmm3
    000000f4: 	ja	.Ltmp17 # Offset: 244
    000000fa: 	movq	DATAat0x24950(%rip), %rdi
    00000101: 	movq	%rdi, %xmm2
.Ltmp21:
    00000106: 	comisd	%xmm0, %xmm3
    0000010a: 	movq	DATAat0x24950(%rip), %rsi
    00000111: 	movq	%rsi, %xmm1
    00000116: 	ja	.Ltmp18 # Offset: 278
    00000118: 	movsd	0x20(%rsp), %xmm1
    0000011e: 	divsd	%xmm0, %xmm1
.Ltmp18:
    00000122: 	movq	0x8(%rax), %r15
    00000126: 	movsd	%xmm0, 0x18(%rsp)
    0000012c: 	addq	$0x1, %r14
    00000130: 	movsd	%xmm1, 0x10(%rsp)
    00000136: 	movq	%r15, %rdi
    00000139: 	movsd	%xmm2, 0x8(%rsp)
    0000013f: 	callq	strlen@PLT # Offset: 319
    00000144: 	movsd	0x8(%rsp), %xmm2
    0000014a: 	movl	%ebx, %ecx
    0000014c: 	movq	%r15, %r9
    0000014f: 	movsd	0x10(%rsp), %xmm1
    00000155: 	subl	%eax, %ecx
    00000157: 	movl	$0x1, %edi
    0000015c: 	movl	%r13d, %edx
    0000015f: 	movsd	0x18(%rsp), %xmm0
    00000165: 	leaq	DATAat0x244ff(%rip), %r8
    0000016c: 	movq	%rbp, %rsi
    0000016f: 	movl	$0x3, %eax
    00000174: 	callq	__printf_chk@PLT # Offset: 372
    00000179: 	movl	current_test(%rip), %eax
    0000017f: 	movq	DATAat0x24968(%rip), %rdi
    00000186: 	cmpl	%r14d, %eax
    00000189: 	movq	%rdi, %xmm3
    0000018e: 	jle	.Ltmp19 # Offset: 398
.Ltmp16:
    00000190: 	movq	results(%rip), %rax
    00000197: 	movq	%r14, %rcx
    0000019a: 	movl	%r14d, %r13d
    0000019d: 	shlq	$0x4, %rcx
    000001a1: 	movsd	(%rax), %xmm1
    000001a5: 	addq	%rcx, %rax
    000001a8: 	movsd	(%rax), %xmm0
    000001ac: 	comisd	%xmm1, %xmm3
    000001b0: 	ja	.Ltmp20 # Offset: 432
    000001b6: 	movapd	%xmm0, %xmm2
    000001ba: 	divsd	%xmm1, %xmm2
    000001be: 	jmp	.Ltmp21 # Offset: 446
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp17:
    000001c8: 	movq	DATAat0x24958(%rip), %rsi
    000001cf: 	movq	DATAat0x24950(%rip), %rdx
    000001d6: 	movq	%rsi, %xmm2
    000001db: 	movq	%rdx, %xmm1
    000001e0: 	jmp	.Ltmp18 # Offset: 480
    000001e5: 	nopl	(%rax) # Size: 3
.Ltmp19:
    000001e8: 	testl	%eax, %eax
    000001ea: 	jle	.Ltmp15 # Offset: 490
    000001f0: 	movq	results(%rip), %rdx
    000001f7: 	leal	-0x1(%rax), %ecx
    000001fa: 	pxor	%xmm1, %xmm1
    000001fe: 	shlq	$0x4, %rcx
    00000202: 	movapd	%xmm1, %xmm0
    00000206: 	leaq	0x10(%rdx), %rax
    0000020a: 	addq	%rax, %rcx
    0000020d: 	jmp	.Ltmp22 # Offset: 525
    0000020f: 	nop # Size: 1
.Ltmp23:
    00000210: 	addq	$0x10, %rax
.Ltmp22:
    00000214: 	addsd	(%rdx), %xmm0
    00000218: 	movq	%rax, %rdx
    0000021b: 	cmpq	%rax, %rcx
    0000021e: 	jne	.Ltmp23 # Offset: 542
.Ltmp28:
    00000220: 	movq	%r12, %rdx
    00000223: 	movl	$0x1, %edi
    00000228: 	movl	$0x1, %eax
    0000022d: 	movsd	%xmm1, 0x8(%rsp)
    00000233: 	leaq	DATAat0x24490(%rip), %rsi
    0000023a: 	callq	__printf_chk@PLT # Offset: 570
    0000023f: 	movl	0x2c(%rsp), %eax
    00000243: 	movl	current_test(%rip), %ebp
    00000249: 	testl	%eax, %eax
    0000024b: 	je	.Ltmp24 # Offset: 587
    0000024d: 	cmpl	$0x1, %ebp
    00000250: 	jg	.Ltmp25 # Offset: 592
.Ltmp24:
    00000252: 	movl	$0x0, current_test(%rip)
.Ltmp12:
    0000025c: 	addq	$0x38, %rsp
    00000260: 	popq	%rbx
    00000261: 	popq	%rbp
    00000262: 	popq	%r12
    00000264: 	popq	%r13
    00000266: 	popq	%r14
    00000268: 	popq	%r15
    0000026a: 	retq # Offset: 618
    0000026b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp25:
    00000270: 	movq	results(%rip), %rbx
    00000277: 	movsd	0x8(%rsp), %xmm1
    0000027d: 	movl	$0x1, %r13d
    00000283: 	movsd	(%rbx), %xmm5
    00000287: 	addq	$0x10, %rbx
    0000028b: 	movsd	%xmm5, 0x10(%rsp)
    00000291: 	nopl	(%rax) # Size: 7
.Ltmp26:
    00000298: 	movsd	(%rbx), %xmm0
    0000029c: 	movsd	%xmm1, 0x8(%rsp)
    000002a2: 	addl	$0x1, %r13d
    000002a6: 	addq	$0x10, %rbx
    000002aa: 	divsd	0x10(%rsp), %xmm0
    000002b0: 	callq	log@PLT # Offset: 688
    000002b5: 	movsd	0x8(%rsp), %xmm1
    000002bb: 	addsd	%xmm0, %xmm1
    000002bf: 	cmpl	%r13d, %ebp
    000002c2: 	jg	.Ltmp26 # Offset: 706
    000002c4: 	subl	$0x1, %ebp
    000002c7: 	pxor	%xmm0, %xmm0
    000002cb: 	cvtsi2sd	%ebp, %xmm0
    000002cf: 	divsd	%xmm0, %xmm1
    000002d3: 	movapd	%xmm1, %xmm0
    000002d7: 	callq	exp@PLT # Offset: 727
    000002dc: 	movq	%r12, %rdx
    000002df: 	movl	$0x1, %edi
    000002e4: 	leaq	DATAat0x244da(%rip), %rsi
    000002eb: 	movl	$0x1, %eax
    000002f0: 	callq	__printf_chk@PLT # Offset: 752
    000002f5: 	movl	$0x0, current_test(%rip)
    000002ff: 	jmp	.Ltmp12 # Offset: 767
    00000304: 	nopl	(%rax) # Size: 4
.Ltmp13:
    00000308: 	xorl	%edx, %edx
    0000030a: 	movl	$0xc, %ebx
    0000030f: 	jmp	.Ltmp27 # Offset: 783
    00000314: 	nopl	(%rax) # Size: 4
.Ltmp15:
    00000318: 	pxor	%xmm1, %xmm1
    0000031c: 	movapd	%xmm1, %xmm0
    00000320: 	jmp	.Ltmp28 # Offset: 800
DWARF CFI Instructions:
    <empty>
End of Function "_Z9summarizePKciiii"

Binary Function "_Z17summarize_simplefP8_IO_FILEPKc" after disassembly {
  Number      : 12
  State       : disassembled
  Address     : 0x1a90
  Size        : 0x1a6
  MaxSize     : 0x1b0
  Offset      : 0x1a90
  Section     : .text
  Orc Section : .local.text._Z17summarize_simplefP8_IO_FILEPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB011:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x18, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movq	%rsi, 0x8(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp29 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	jle	.Ltmp30 # Offset: 40
    0000002e: 	movq	results(%rip), %rdx
    00000035: 	subl	$0x1, %eax
    00000038: 	movl	$0xc, %ebp
    0000003d: 	shlq	$0x4, %rax
    00000041: 	leaq	0x8(%rdx), %r13
    00000045: 	leaq	0x18(%rdx,%rax), %rbx
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp31:
    00000050: 	movq	(%r13), %rdi
    00000054: 	callq	strlen@PLT # Offset: 84
    00000059: 	cmpl	%eax, %ebp
    0000005b: 	cmovll	%eax, %ebp
    0000005e: 	addq	$0x10, %r13
    00000062: 	cmpq	%r13, %rbx
    00000065: 	jne	.Ltmp31 # Offset: 101
    00000067: 	leal	-0xc(%rbp), %ecx
.Ltmp36:
    0000006a: 	leaq	DATAat0x2451a(%rip), %r8
    00000071: 	movl	$0x1, %esi
    00000076: 	xorl	%eax, %eax
    00000078: 	xorl	%ebx, %ebx
    0000007a: 	leaq	DATAat0x244b8(%rip), %rdx
    00000081: 	movq	%r12, %rdi
    00000084: 	leaq	DATAat0x24500(%rip), %r14
    0000008b: 	callq	__fprintf_chk@PLT # Offset: 139
    00000090: 	movl	$0x1, %esi
    00000095: 	movl	%ebp, %ecx
    00000097: 	movq	%r12, %rdi
    0000009a: 	leaq	DATAat0x2451a(%rip), %r8
    000000a1: 	leaq	DATAat0x244ee(%rip), %rdx
    000000a8: 	xorl	%eax, %eax
    000000aa: 	callq	__fprintf_chk@PLT # Offset: 170
    000000af: 	movl	current_test(%rip), %esi
    000000b5: 	testl	%esi, %esi
    000000b7: 	jle	.Ltmp32 # Offset: 183
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp33:
    000000c0: 	movq	%rbx, %rdx
    000000c3: 	shlq	$0x4, %rdx
    000000c7: 	addq	results(%rip), %rdx
    000000ce: 	movq	0x8(%rdx), %r13
    000000d2: 	movq	%rdx, %r15
    000000d5: 	movq	%r13, %rdi
    000000d8: 	callq	strlen@PLT # Offset: 216
    000000dd: 	subq	$0x8, %rsp
    000000e1: 	movsd	(%r15), %xmm0
    000000e6: 	movl	%ebx, %ecx
    000000e8: 	pushq	%r13
    000000ea: 	movl	%ebp, %r8d
    000000ed: 	movq	%r14, %rdx
    000000f0: 	leaq	DATAat0x244ff(%rip), %r9
    000000f7: 	subl	%eax, %r8d
    000000fa: 	movl	$0x1, %esi
    000000ff: 	movq	%r12, %rdi
    00000102: 	movl	$0x1, %eax
    00000107: 	addq	$0x1, %rbx
    0000010b: 	callq	__fprintf_chk@PLT # Offset: 267
    00000110: 	movl	current_test(%rip), %eax
    00000116: 	popq	%rdx
    00000117: 	popq	%rcx
    00000118: 	cmpl	%ebx, %eax
    0000011a: 	jg	.Ltmp33 # Offset: 282
    0000011c: 	testl	%eax, %eax
    0000011e: 	jle	.Ltmp32 # Offset: 286
    00000124: 	movq	results(%rip), %rdx
    0000012b: 	leal	-0x1(%rax), %ecx
    0000012e: 	pxor	%xmm0, %xmm0
    00000132: 	shlq	$0x4, %rcx
    00000136: 	leaq	0x10(%rdx), %rax
    0000013a: 	addq	%rax, %rcx
    0000013d: 	jmp	.Ltmp34 # Offset: 317
    0000013f: 	nop # Size: 1
.Ltmp35:
    00000140: 	addq	$0x10, %rax
.Ltmp34:
    00000144: 	addsd	(%rdx), %xmm0
    00000148: 	movq	%rax, %rdx
    0000014b: 	cmpq	%rax, %rcx
    0000014e: 	jne	.Ltmp35 # Offset: 334
.Ltmp37:
    00000150: 	movq	0x8(%rsp), %rcx
    00000155: 	movl	$0x1, %esi
    0000015a: 	movq	%r12, %rdi
    0000015d: 	movl	$0x1, %eax
    00000162: 	leaq	DATAat0x24490(%rip), %rdx
    00000169: 	callq	__fprintf_chk@PLT # Offset: 361
    0000016e: 	movl	$0x0, current_test(%rip)
.Ltmp29:
    00000178: 	addq	$0x18, %rsp
    0000017c: 	popq	%rbx
    0000017d: 	popq	%rbp
    0000017e: 	popq	%r12
    00000180: 	popq	%r13
    00000182: 	popq	%r14
    00000184: 	popq	%r15
    00000186: 	retq # Offset: 390
    00000187: 	nopw	(%rax,%rax) # Size: 9
.Ltmp30:
    00000190: 	xorl	%ecx, %ecx
    00000192: 	movl	$0xc, %ebp
    00000197: 	jmp	.Ltmp36 # Offset: 407
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp32:
    000001a0: 	pxor	%xmm0, %xmm0
    000001a4: 	jmp	.Ltmp37 # Offset: 420
DWARF CFI Instructions:
    <empty>
End of Function "_Z17summarize_simplefP8_IO_FILEPKc"

Binary Function "_Z11start_timerv" after disassembly {
  Number      : 13
  State       : disassembled
  Address     : 0x1c40
  Size        : 0x19
  MaxSize     : 0x20
  Offset      : 0x1c40
  Section     : .text
  Orc Section : .local.text._Z11start_timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB012:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	movq	%rax, start_time(%rip)
    00000014: 	addq	$0x8, %rsp
    00000018: 	retq # Offset: 24
DWARF CFI Instructions:
    <empty>
End of Function "_Z11start_timerv"

Binary Function "_Z5timerv" after disassembly {
  Number      : 14
  State       : disassembled
  Address     : 0x1c60
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x1c60
  Section     : .text
  Orc Section : .local.text._Z5timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB013:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	pxor	%xmm0, %xmm0
    00000011: 	movq	%rax, end_time(%rip)
    00000018: 	subq	start_time(%rip), %rax
    0000001f: 	cvtsi2sd	%rax, %xmm0
    00000024: 	divsd	DATAat0x24960(%rip), %xmm0
    0000002c: 	addq	$0x8, %rsp
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z5timerv"

Binary Function "_ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 15
  State       : disassembled
  Address     : 0x1ca0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x1ca0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB014:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f38, %edx
    00000017: 	movl	$0x746e6975, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 16
  State       : disassembled
  Address     : 0x1cd0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x1cd0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB015:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3631746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 17
  State       : disassembled
  Address     : 0x1d00
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x1d00
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB016:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3233746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 18
  State       : disassembled
  Address     : 0x1d30
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x1d30
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB017:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3436746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 19
  State       : disassembled
  Address     : 0x1d60
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x1d60
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB018:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x38746e69, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x745f, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 20
  State       : disassembled
  Address     : 0x1d90
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x1d90
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB019:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x38746e69, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x745f, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 21
  State       : disassembled
  Address     : 0x1dc0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x1dc0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB020:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f36, %edx
    00000017: 	movl	$0x31746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 22
  State       : disassembled
  Address     : 0x1df0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x1df0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB021:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f32, %edx
    00000017: 	movl	$0x33746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 23
  State       : disassembled
  Address     : 0x1e20
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x1e20
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB022:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f34, %edx
    00000017: 	movl	$0x36746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 24
  State       : disassembled
  Address     : 0x1e50
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x1e50
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB023:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x14(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x616f6c66, 0x10(%rdi)
    00000019: 	movq	$0x5, 0x8(%rdi)
    00000021: 	movb	$0x0, 0x15(%rdi)
    00000025: 	retq # Offset: 37
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 25
  State       : disassembled
  Address     : 0x1e80
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x1e80
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB024:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x62756f64, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x656c, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 26
  State       : disassembled
  Address     : 0x1eb0
  Size        : 0x36
  MaxSize     : 0x40
  Offset      : 0x1eb0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB025:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x65, 0x1a(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x756f6420676e6f6c, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movl	$0x6c62, %edx
    00000021: 	movq	%rcx, 0x10(%rdi)
    00000025: 	movw	%dx, 0x18(%rdi)
    00000029: 	movq	$0xb, 0x8(%rdi)
    00000031: 	movb	$0x0, 0x1b(%rdi)
    00000035: 	retq # Offset: 53
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 27
  State       : disassembled
  Address     : 0x1ef0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x1ef0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB026:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f38746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 28
  State       : disassembled
  Address     : 0x1f20
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x1f20
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB027:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3631746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 29
  State       : disassembled
  Address     : 0x1f50
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x1f50
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB028:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3233746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 30
  State       : disassembled
  Address     : 0x1f80
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x1f80
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB029:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3436746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 31
  State       : disassembled
  Address     : 0x1fb0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x1fb0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB030:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x745f, %edx
    00000017: 	movl	$0x38746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 32
  State       : disassembled
  Address     : 0x1fe0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x1fe0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB031:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3631746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 33
  State       : disassembled
  Address     : 0x2010
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x2010
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB032:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3233746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 34
  State       : disassembled
  Address     : 0x2040
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x2040
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB033:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3436746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 35
  State       : disassembled
  Address     : 0x2070
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x2070
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB034:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x616f6c66, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x2a74, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 36
  State       : disassembled
  Address     : 0x20a0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x20a0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB035:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x656c, %edx
    00000017: 	movl	$0x62756f64, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 37
  State       : disassembled
  Address     : 0x20d0
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x20d0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB036:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x0, 0x1c(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x756f6420676e6f6c, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movl	$0x2a656c62, 0x18(%rdi)
    00000027: 	movq	$0xc, 0x8(%rdi)
    0000002f: 	retq # Offset: 47
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark6scrandEm" after disassembly {
  Number      : 38
  State       : disassembled
  Address     : 0x2100
  Size        : 0xc
  MaxSize     : 0x10
  Offset      : 0x2100
  Section     : .text
  Orc Section : .local.text._ZN9benchmark6scrandEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB037:
    00000000: 	endbr64
    00000004: 	movq	%rdi, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    0000000b: 	retq # Offset: 11
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark6scrandEm"

Binary Function "_ZN9benchmark7crand64Ev" after disassembly {
  Number      : 39
  State       : disassembled
  Address     : 0x2110
  Size        : 0x42
  MaxSize     : 0x50
  Offset      : 0x2110
  Section     : .text
  Orc Section : .local.text._ZN9benchmark7crand64Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB038:
    00000000: 	endbr64
    00000004: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rdx
    0000000b: 	movabsq	$0x5851f42d4c957f2d, %rax
    00000015: 	imulq	%rax, %rdx
    00000019: 	movabsq	$0x14057b7ef767814f, %rax
    00000023: 	addq	%rax, %rdx
    00000026: 	movq	%rdx, %rax
    00000029: 	movq	%rdx, %rcx
    0000002c: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000033: 	shrq	$0x14, %rax
    00000037: 	shlq	$0x17, %rcx
    0000003b: 	xorq	%rcx, %rax
    0000003e: 	xorq	%rdx, %rax
    00000041: 	retq # Offset: 65
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark7crand64Ev"

Binary Function "_ZN9benchmark7crand32Ev" after disassembly {
  Number      : 40
  State       : disassembled
  Address     : 0x2160
  Size        : 0x41
  MaxSize     : 0x50
  Offset      : 0x2160
  Section     : .text
  Orc Section : .local.text._ZN9benchmark7crand32Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB039:
    00000000: 	endbr64
    00000004: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    0000000b: 	movabsq	$0x5851f42d4c957f2d, %rdx
    00000015: 	imulq	%rdx, %rax
    00000019: 	movabsq	$0x14057b7ef767814f, %rdx
    00000023: 	addq	%rdx, %rax
    00000026: 	movq	%rax, %rdx
    00000029: 	movq	%rax, %rcx
    0000002c: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000033: 	shrq	$0x14, %rdx
    00000037: 	shlq	$0x17, %rcx
    0000003b: 	xorq	%rcx, %rdx
    0000003e: 	xorl	%edx, %eax
    00000040: 	retq # Offset: 64
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark7crand32Ev"

Binary Function "_Z10blocksize1IiEiv" after disassembly {
  Number      : 41
  State       : disassembled
  Address     : 0x21b0
  Size        : 0xa
  MaxSize     : 0x10
  Offset      : 0x21b0
  Section     : .text
  Orc Section : .local.text._Z10blocksize1IiEiv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB040:
    00000000: 	endbr64
    00000004: 	movl	$0x50, %eax
    00000009: 	retq # Offset: 9
DWARF CFI Instructions:
    <empty>
End of Function "_Z10blocksize1IiEiv"

Binary Function "_Z10blocksize1IfEiv" after disassembly {
  Number      : 42
  State       : disassembled
  Address     : 0x21c0
  Size        : 0xa
  MaxSize     : 0x10
  Offset      : 0x21c0
  Section     : .text
  Orc Section : .local.text._Z10blocksize1IfEiv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB041:
    00000000: 	endbr64
    00000004: 	movl	$0x1e, %eax
    00000009: 	retq # Offset: 9
DWARF CFI Instructions:
    <empty>
End of Function "_Z10blocksize1IfEiv"

Binary Function "_Z10blocksize1IdEiv" after disassembly {
  Number      : 43
  State       : disassembled
  Address     : 0x21d0
  Size        : 0xa
  MaxSize     : 0x10
  Offset      : 0x21d0
  Section     : .text
  Orc Section : .local.text._Z10blocksize1IdEiv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB042:
    00000000: 	endbr64
    00000004: 	movl	$0xc, %eax
    00000009: 	retq # Offset: 9
DWARF CFI Instructions:
    <empty>
End of Function "_Z10blocksize1IdEiv"

Binary Function "_Z10blocksize3IiEiv" after disassembly {
  Number      : 44
  State       : disassembled
  Address     : 0x21e0
  Size        : 0xa
  MaxSize     : 0x10
  Offset      : 0x21e0
  Section     : .text
  Orc Section : .local.text._Z10blocksize3IiEiv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB043:
    00000000: 	endbr64
    00000004: 	movl	$0x258, %eax
    00000009: 	retq # Offset: 9
DWARF CFI Instructions:
    <empty>
End of Function "_Z10blocksize3IiEiv"

Binary Function "_Z10blocksize3IfEiv" after disassembly {
  Number      : 45
  State       : disassembled
  Address     : 0x21f0
  Size        : 0xa
  MaxSize     : 0x10
  Offset      : 0x21f0
  Section     : .text
  Orc Section : .local.text._Z10blocksize3IfEiv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB044:
    00000000: 	endbr64
    00000004: 	movl	$0x20, %eax
    00000009: 	retq # Offset: 9
DWARF CFI Instructions:
    <empty>
End of Function "_Z10blocksize3IfEiv"

Binary Function "_Z10blocksize3IdEiv" after disassembly {
  Number      : 46
  State       : disassembled
  Address     : 0x2200
  Size        : 0xa
  MaxSize     : 0x10
  Offset      : 0x2200
  Section     : .text
  Orc Section : .local.text._Z10blocksize3IdEiv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB045:
    00000000: 	endbr64
    00000004: 	movl	$0x258, %eax
    00000009: 	retq # Offset: 9
DWARF CFI Instructions:
    <empty>
End of Function "_Z10blocksize3IdEiv"

Binary Function "_Z11blocksize6AIiEiv" after disassembly {
  Number      : 47
  State       : disassembled
  Address     : 0x2210
  Size        : 0xa
  MaxSize     : 0x10
  Offset      : 0x2210
  Section     : .text
  Orc Section : .local.text._Z11blocksize6AIiEiv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB046:
    00000000: 	endbr64
    00000004: 	movl	$0x8, %eax
    00000009: 	retq # Offset: 9
DWARF CFI Instructions:
    <empty>
End of Function "_Z11blocksize6AIiEiv"

Binary Function "_Z11blocksize6BIiEiv" after disassembly {
  Number      : 48
  State       : disassembled
  Address     : 0x2220
  Size        : 0xa
  MaxSize     : 0x10
  Offset      : 0x2220
  Section     : .text
  Orc Section : .local.text._Z11blocksize6BIiEiv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB047:
    00000000: 	endbr64
    00000004: 	movl	$0x12c, %eax
    00000009: 	retq # Offset: 9
DWARF CFI Instructions:
    <empty>
End of Function "_Z11blocksize6BIiEiv"

Binary Function "_Z11blocksize6AIfEiv" after disassembly {
  Number      : 49
  State       : disassembled
  Address     : 0x2230
  Size        : 0xa
  MaxSize     : 0x10
  Offset      : 0x2230
  Section     : .text
  Orc Section : .local.text._Z11blocksize6AIfEiv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB048:
    00000000: 	endbr64
    00000004: 	movl	$0x1b, %eax
    00000009: 	retq # Offset: 9
DWARF CFI Instructions:
    <empty>
End of Function "_Z11blocksize6AIfEiv"

Binary Function "_Z11blocksize6BIfEiv" after disassembly {
  Number      : 50
  State       : disassembled
  Address     : 0x2240
  Size        : 0xa
  MaxSize     : 0x10
  Offset      : 0x2240
  Section     : .text
  Orc Section : .local.text._Z11blocksize6BIfEiv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB049:
    00000000: 	endbr64
    00000004: 	movl	$0x14, %eax
    00000009: 	retq # Offset: 9
DWARF CFI Instructions:
    <empty>
End of Function "_Z11blocksize6BIfEiv"

Binary Function "_Z11blocksize6AIdEiv" after disassembly {
  Number      : 51
  State       : disassembled
  Address     : 0x2250
  Size        : 0xa
  MaxSize     : 0x10
  Offset      : 0x2250
  Section     : .text
  Orc Section : .local.text._Z11blocksize6AIdEiv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB050:
    00000000: 	endbr64
    00000004: 	movl	$0xe, %eax
    00000009: 	retq # Offset: 9
DWARF CFI Instructions:
    <empty>
End of Function "_Z11blocksize6AIdEiv"

Binary Function "_Z11blocksize6BIdEiv" after disassembly {
  Number      : 52
  State       : disassembled
  Address     : 0x2260
  Size        : 0xa
  MaxSize     : 0x10
  Offset      : 0x2260
  Section     : .text
  Orc Section : .local.text._Z11blocksize6BIdEiv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB051:
    00000000: 	endbr64
    00000004: 	movl	$0x1c, %eax
    00000009: 	retq # Offset: 9
DWARF CFI Instructions:
    <empty>
End of Function "_Z11blocksize6BIdEiv"

Binary Function "_Z11blocksize7AIiEiv" after disassembly {
  Number      : 53
  State       : disassembled
  Address     : 0x2270
  Size        : 0xa
  MaxSize     : 0x10
  Offset      : 0x2270
  Section     : .text
  Orc Section : .local.text._Z11blocksize7AIiEiv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB052:
    00000000: 	endbr64
    00000004: 	movl	$0x12c, %eax
    00000009: 	retq # Offset: 9
DWARF CFI Instructions:
    <empty>
End of Function "_Z11blocksize7AIiEiv"

Binary Function "_Z11blocksize7BIiEiv" after disassembly {
  Number      : 54
  State       : disassembled
  Address     : 0x2280
  Size        : 0xa
  MaxSize     : 0x10
  Offset      : 0x2280
  Section     : .text
  Orc Section : .local.text._Z11blocksize7BIiEiv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB053:
    00000000: 	endbr64
    00000004: 	movl	$0x4c, %eax
    00000009: 	retq # Offset: 9
DWARF CFI Instructions:
    <empty>
End of Function "_Z11blocksize7BIiEiv"

Binary Function "_Z11blocksize7AIfEiv" after disassembly {
  Number      : 55
  State       : disassembled
  Address     : 0x2290
  Size        : 0xa
  MaxSize     : 0x10
  Offset      : 0x2290
  Section     : .text
  Orc Section : .local.text._Z11blocksize7AIfEiv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB054:
    00000000: 	endbr64
    00000004: 	movl	$0x12c, %eax
    00000009: 	retq # Offset: 9
DWARF CFI Instructions:
    <empty>
End of Function "_Z11blocksize7AIfEiv"

Binary Function "_Z11blocksize7BIfEiv" after disassembly {
  Number      : 56
  State       : disassembled
  Address     : 0x22a0
  Size        : 0xa
  MaxSize     : 0x10
  Offset      : 0x22a0
  Section     : .text
  Orc Section : .local.text._Z11blocksize7BIfEiv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB055:
    00000000: 	endbr64
    00000004: 	movl	$0x51, %eax
    00000009: 	retq # Offset: 9
DWARF CFI Instructions:
    <empty>
End of Function "_Z11blocksize7BIfEiv"

Binary Function "_Z11blocksize7AIdEiv" after disassembly {
  Number      : 57
  State       : disassembled
  Address     : 0x22b0
  Size        : 0xa
  MaxSize     : 0x10
  Offset      : 0x22b0
  Section     : .text
  Orc Section : .local.text._Z11blocksize7AIdEiv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB056:
    00000000: 	endbr64
    00000004: 	movl	$0x12c, %eax
    00000009: 	retq # Offset: 9
DWARF CFI Instructions:
    <empty>
End of Function "_Z11blocksize7AIdEiv"

Binary Function "_Z11blocksize7BIdEiv" after disassembly {
  Number      : 58
  State       : disassembled
  Address     : 0x22c0
  Size        : 0xa
  MaxSize     : 0x10
  Offset      : 0x22c0
  Section     : .text
  Orc Section : .local.text._Z11blocksize7BIdEiv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB057:
    00000000: 	endbr64
    00000004: 	movl	$0xf, %eax
    00000009: 	retq # Offset: 9
DWARF CFI Instructions:
    <empty>
End of Function "_Z11blocksize7BIdEiv"

Binary Function "_Z10blocksize4IiEiv" after disassembly {
  Number      : 59
  State       : disassembled
  Address     : 0x22d0
  Size        : 0xa
  MaxSize     : 0x10
  Offset      : 0x22d0
  Section     : .text
  Orc Section : .local.text._Z10blocksize4IiEiv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB058:
    00000000: 	endbr64
    00000004: 	movl	$0x50, %eax
    00000009: 	retq # Offset: 9
DWARF CFI Instructions:
    <empty>
End of Function "_Z10blocksize4IiEiv"

Binary Function "_Z10blocksize4IfEiv" after disassembly {
  Number      : 60
  State       : disassembled
  Address     : 0x22e0
  Size        : 0xa
  MaxSize     : 0x10
  Offset      : 0x22e0
  Section     : .text
  Orc Section : .local.text._Z10blocksize4IfEiv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB059:
    00000000: 	endbr64
    00000004: 	movl	$0x50, %eax
    00000009: 	retq # Offset: 9
DWARF CFI Instructions:
    <empty>
End of Function "_Z10blocksize4IfEiv"

Binary Function "_Z10blocksize4IdEiv" after disassembly {
  Number      : 61
  State       : disassembled
  Address     : 0x22f0
  Size        : 0xa
  MaxSize     : 0x10
  Offset      : 0x22f0
  Section     : .text
  Orc Section : .local.text._Z10blocksize4IdEiv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB060:
    00000000: 	endbr64
    00000004: 	movl	$0x10, %eax
    00000009: 	retq # Offset: 9
DWARF CFI Instructions:
    <empty>
End of Function "_Z10blocksize4IdEiv"

Binary Function "_Z10blocksize5IiEiv" after disassembly {
  Number      : 62
  State       : disassembled
  Address     : 0x2300
  Size        : 0xa
  MaxSize     : 0x10
  Offset      : 0x2300
  Section     : .text
  Orc Section : .local.text._Z10blocksize5IiEiv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB061:
    00000000: 	endbr64
    00000004: 	movl	$0x258, %eax
    00000009: 	retq # Offset: 9
DWARF CFI Instructions:
    <empty>
End of Function "_Z10blocksize5IiEiv"

Binary Function "_Z10blocksize5IfEiv" after disassembly {
  Number      : 63
  State       : disassembled
  Address     : 0x2310
  Size        : 0xa
  MaxSize     : 0x10
  Offset      : 0x2310
  Section     : .text
  Orc Section : .local.text._Z10blocksize5IfEiv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB062:
    00000000: 	endbr64
    00000004: 	movl	$0x258, %eax
    00000009: 	retq # Offset: 9
DWARF CFI Instructions:
    <empty>
End of Function "_Z10blocksize5IfEiv"

Binary Function "_Z10blocksize5IdEiv" after disassembly {
  Number      : 64
  State       : disassembled
  Address     : 0x2320
  Size        : 0xa
  MaxSize     : 0x10
  Offset      : 0x2320
  Section     : .text
  Orc Section : .local.text._Z10blocksize5IdEiv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB063:
    00000000: 	endbr64
    00000004: 	movl	$0x258, %eax
    00000009: 	retq # Offset: 9
DWARF CFI Instructions:
    <empty>
End of Function "_Z10blocksize5IdEiv"

Binary Function "_Z11blocksize8AIiEiv" after disassembly {
  Number      : 65
  State       : disassembled
  Address     : 0x2330
  Size        : 0xa
  MaxSize     : 0x10
  Offset      : 0x2330
  Section     : .text
  Orc Section : .local.text._Z11blocksize8AIiEiv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB064:
    00000000: 	endbr64
    00000004: 	movl	$0xb, %eax
    00000009: 	retq # Offset: 9
DWARF CFI Instructions:
    <empty>
End of Function "_Z11blocksize8AIiEiv"

Binary Function "_Z11blocksize8BIiEiv" after disassembly {
  Number      : 66
  State       : disassembled
  Address     : 0x2340
  Size        : 0xa
  MaxSize     : 0x10
  Offset      : 0x2340
  Section     : .text
  Orc Section : .local.text._Z11blocksize8BIiEiv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB065:
    00000000: 	endbr64
    00000004: 	movl	$0x12c, %eax
    00000009: 	retq # Offset: 9
DWARF CFI Instructions:
    <empty>
End of Function "_Z11blocksize8BIiEiv"

Binary Function "_Z11blocksize8AIfEiv" after disassembly {
  Number      : 67
  State       : disassembled
  Address     : 0x2350
  Size        : 0xa
  MaxSize     : 0x10
  Offset      : 0x2350
  Section     : .text
  Orc Section : .local.text._Z11blocksize8AIfEiv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB066:
    00000000: 	endbr64
    00000004: 	movl	$0x19, %eax
    00000009: 	retq # Offset: 9
DWARF CFI Instructions:
    <empty>
End of Function "_Z11blocksize8AIfEiv"

Binary Function "_Z11blocksize8BIfEiv" after disassembly {
  Number      : 68
  State       : disassembled
  Address     : 0x2360
  Size        : 0xa
  MaxSize     : 0x10
  Offset      : 0x2360
  Section     : .text
  Orc Section : .local.text._Z11blocksize8BIfEiv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB067:
    00000000: 	endbr64
    00000004: 	movl	$0x100, %eax
    00000009: 	retq # Offset: 9
DWARF CFI Instructions:
    <empty>
End of Function "_Z11blocksize8BIfEiv"

Binary Function "_Z11blocksize8AIdEiv" after disassembly {
  Number      : 69
  State       : disassembled
  Address     : 0x2370
  Size        : 0xa
  MaxSize     : 0x10
  Offset      : 0x2370
  Section     : .text
  Orc Section : .local.text._Z11blocksize8AIdEiv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB068:
    00000000: 	endbr64
    00000004: 	movl	$0xc, %eax
    00000009: 	retq # Offset: 9
DWARF CFI Instructions:
    <empty>
End of Function "_Z11blocksize8AIdEiv"

Binary Function "_Z11blocksize8BIdEiv" after disassembly {
  Number      : 70
  State       : disassembled
  Address     : 0x2380
  Size        : 0xa
  MaxSize     : 0x10
  Offset      : 0x2380
  Section     : .text
  Orc Section : .local.text._Z11blocksize8BIdEiv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB069:
    00000000: 	endbr64
    00000004: 	movl	$0x74, %eax
    00000009: 	retq # Offset: 9
DWARF CFI Instructions:
    <empty>
End of Function "_Z11blocksize8BIdEiv"

Binary Function "_Z11blocksize9AIiEiv" after disassembly {
  Number      : 71
  State       : disassembled
  Address     : 0x2390
  Size        : 0xa
  MaxSize     : 0x10
  Offset      : 0x2390
  Section     : .text
  Orc Section : .local.text._Z11blocksize9AIiEiv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB070:
    00000000: 	endbr64
    00000004: 	movl	$0xf8, %eax
    00000009: 	retq # Offset: 9
DWARF CFI Instructions:
    <empty>
End of Function "_Z11blocksize9AIiEiv"

Binary Function "_Z11blocksize9BIiEiv" after disassembly {
  Number      : 72
  State       : disassembled
  Address     : 0x23a0
  Size        : 0xa
  MaxSize     : 0x10
  Offset      : 0x23a0
  Section     : .text
  Orc Section : .local.text._Z11blocksize9BIiEiv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB071:
    00000000: 	endbr64
    00000004: 	movl	$0x50, %eax
    00000009: 	retq # Offset: 9
DWARF CFI Instructions:
    <empty>
End of Function "_Z11blocksize9BIiEiv"

Binary Function "_Z11blocksize9AIfEiv" after disassembly {
  Number      : 73
  State       : disassembled
  Address     : 0x23b0
  Size        : 0xa
  MaxSize     : 0x10
  Offset      : 0x23b0
  Section     : .text
  Orc Section : .local.text._Z11blocksize9AIfEiv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB072:
    00000000: 	endbr64
    00000004: 	movl	$0x12c, %eax
    00000009: 	retq # Offset: 9
DWARF CFI Instructions:
    <empty>
End of Function "_Z11blocksize9AIfEiv"

Binary Function "_Z11blocksize9BIfEiv" after disassembly {
  Number      : 74
  State       : disassembled
  Address     : 0x23c0
  Size        : 0xa
  MaxSize     : 0x10
  Offset      : 0x23c0
  Section     : .text
  Orc Section : .local.text._Z11blocksize9BIfEiv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB073:
    00000000: 	endbr64
    00000004: 	movl	$0x64, %eax
    00000009: 	retq # Offset: 9
DWARF CFI Instructions:
    <empty>
End of Function "_Z11blocksize9BIfEiv"

Binary Function "_Z11blocksize9AIdEiv" after disassembly {
  Number      : 75
  State       : disassembled
  Address     : 0x23d0
  Size        : 0xa
  MaxSize     : 0x10
  Offset      : 0x23d0
  Section     : .text
  Orc Section : .local.text._Z11blocksize9AIdEiv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB074:
    00000000: 	endbr64
    00000004: 	movl	$0x12c, %eax
    00000009: 	retq # Offset: 9
DWARF CFI Instructions:
    <empty>
End of Function "_Z11blocksize9AIdEiv"

Binary Function "_Z11blocksize9BIdEiv" after disassembly {
  Number      : 76
  State       : disassembled
  Address     : 0x23e0
  Size        : 0xa
  MaxSize     : 0x10
  Offset      : 0x23e0
  Section     : .text
  Orc Section : .local.text._Z11blocksize9BIdEiv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB075:
    00000000: 	endbr64
    00000004: 	movl	$0x10, %eax
    00000009: 	retq # Offset: 9
DWARF CFI Instructions:
    <empty>
End of Function "_Z11blocksize9BIdEiv"

Binary Function "_ZN22matvecmul_IJ_unrolled2IiEclEPKiPiS2_ii.constprop.0/1(*2)" after disassembly {
  All names   : _ZN22matvecmul_IJ_unrolled2IiEclEPKiPiS2_ii.constprop.0/1
                _ZN22matvecmul_IJ_unrolled2IiEclEPKiPiS2_ii.constprop.0/matrix_vector_product.cpp/1
  Number      : 77
  State       : disassembled
  Address     : 0x23f0
  Size        : 0x10a
  MaxSize     : 0x110
  Offset      : 0x23f0
  Section     : .text
  Orc Section : .local.text._ZN22matvecmul_IJ_unrolled2IiEclEPKiPiS2_ii.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB076:
    00000000: 	leaq	0x1d4c00(%rdx), %r8
    00000007: 	nopw	(%rax,%rax) # Size: 9
.Ltmp39:
    00000010: 	movd	(%rsi), %xmm4
    00000014: 	xorl	%eax, %eax
    00000016: 	pxor	%xmm3, %xmm3
    0000001a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp38:
    00000020: 	movdqu	(%rdi,%rax), %xmm0
    00000025: 	movdqu	(%rdx,%rax), %xmm2
    0000002a: 	movdqu	(%rdi,%rax), %xmm1
    0000002f: 	movdqu	(%rdx,%rax), %xmm5
    00000034: 	psrlq	$0x20, %xmm2
    00000039: 	psrlq	$0x20, %xmm0
    0000003e: 	movdqu	0x10(%rdx,%rax), %xmm6
    00000044: 	pmuludq	%xmm2, %xmm0
    00000048: 	pmuludq	%xmm5, %xmm1
    0000004c: 	movdqu	0x10(%rdx,%rax), %xmm2
    00000052: 	psrlq	$0x20, %xmm2
    00000057: 	pshufd	$0x8, %xmm0, %xmm0
    0000005c: 	pshufd	$0x8, %xmm1, %xmm1
    00000061: 	punpckldq	%xmm0, %xmm1
    00000065: 	movdqu	0x10(%rdi,%rax), %xmm0
    0000006b: 	paddd	%xmm1, %xmm4
    0000006f: 	movdqu	0x10(%rdi,%rax), %xmm1
    00000075: 	addq	$0x20, %rax
    00000079: 	psrlq	$0x20, %xmm0
    0000007e: 	pmuludq	%xmm6, %xmm1
    00000082: 	pmuludq	%xmm2, %xmm0
    00000086: 	pshufd	$0x8, %xmm1, %xmm1
    0000008b: 	pshufd	$0x8, %xmm0, %xmm0
    00000090: 	punpckldq	%xmm0, %xmm1
    00000094: 	paddd	%xmm1, %xmm3
    00000098: 	cmpq	$0x960, %rax
    0000009e: 	jne	.Ltmp38 # Offset: 158
    000000a0: 	pshufd	$0x55, %xmm4, %xmm0
    000000a5: 	movd	%xmm4, %ecx
    000000a9: 	addq	$0x960, %rdx
    000000b0: 	addq	$0x4, %rsi
    000000b4: 	movd	%xmm0, %eax
    000000b8: 	movdqa	%xmm4, %xmm0
    000000bc: 	punpckhdq	%xmm4, %xmm0
    000000c0: 	addl	%ecx, %eax
    000000c2: 	pshufd	$0xff, %xmm4, %xmm4
    000000c7: 	movd	%xmm0, %ecx
    000000cb: 	pshufd	$0x55, %xmm3, %xmm0
    000000d0: 	addl	%eax, %ecx
    000000d2: 	movd	%xmm4, %eax
    000000d6: 	addl	%ecx, %eax
    000000d8: 	movd	%xmm3, %ecx
    000000dc: 	addl	%ecx, %eax
    000000de: 	movd	%xmm0, %ecx
    000000e2: 	movdqa	%xmm3, %xmm0
    000000e6: 	punpckhdq	%xmm3, %xmm0
    000000ea: 	addl	%ecx, %eax
    000000ec: 	pshufd	$0xff, %xmm3, %xmm3
    000000f1: 	movd	%xmm0, %ecx
    000000f5: 	addl	%eax, %ecx
    000000f7: 	movd	%xmm3, %eax
    000000fb: 	addl	%ecx, %eax
    000000fd: 	movl	%eax, -0x4(%rsi)
    00000100: 	cmpq	%rdx, %r8
    00000103: 	jne	.Ltmp39 # Offset: 259
    00000109: 	retq # Offset: 265
DWARF CFI Instructions:
    <empty>
End of Function "_ZN22matvecmul_IJ_unrolled2IiEclEPKiPiS2_ii.constprop.0/1(*2)"

Binary Function "_ZN22matvecmul_JI_unrolled1IiEclEPKiPiS2_ii.constprop.0/1(*2)" after disassembly {
  All names   : _ZN22matvecmul_JI_unrolled1IiEclEPKiPiS2_ii.constprop.0/1
                _ZN22matvecmul_JI_unrolled1IiEclEPKiPiS2_ii.constprop.0/matrix_vector_product.cpp/1
  Number      : 78
  State       : disassembled
  Address     : 0x2500
  Size        : 0x1e7
  MaxSize     : 0x1f0
  Offset      : 0x2500
  Section     : .text
  Orc Section : .local.text._ZN22matvecmul_JI_unrolled1IiEclEPKiPiS2_ii.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB077:
    00000000: 	pushq	%r15
    00000002: 	leaq	0x1d4c00(%rdx), %rax
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdx, -0x8(%rsp)
    00000016: 	movq	%rax, -0x18(%rsp)
    0000001b: 	movq	%rsi, -0x10(%rsp)
    00000020: 	movl	$0x4, %esi
    00000025: 	nopl	(%rax) # Size: 3
.Ltmp41:
    00000028: 	leaq	0x964(%rsi), %rax
    0000002f: 	movq	-0x8(%rsp), %rdx
    00000034: 	leaq	-0x4(%rsi), %r14
    00000038: 	movq	%rax, -0x48(%rsp)
    0000003d: 	leaq	0x4(%rsi), %r13
    00000041: 	leaq	0x968(%rsi), %rax
    00000048: 	movq	%rax, -0x40(%rsp)
    0000004d: 	leaq	0x12bc(%rsi), %rax
    00000054: 	leaq	0x8(%rsi), %r12
    00000058: 	movq	%rax, -0x20(%rsp)
    0000005d: 	leaq	0x12c0(%rsi), %rax
    00000064: 	leaq	0x95c(%rsi), %rbp
    0000006b: 	movq	%rax, -0x38(%rsp)
    00000070: 	leaq	0x12c4(%rsi), %rax
    00000077: 	leaq	0x960(%rsi), %rbx
    0000007e: 	movq	%rax, -0x30(%rsp)
    00000083: 	leaq	0x12c8(%rsi), %rax
    0000008a: 	leaq	0x1c1c(%rsi), %r11
    00000091: 	movq	%rax, -0x28(%rsp)
    00000096: 	movq	-0x10(%rsp), %rax
    0000009b: 	leaq	0x1c20(%rsi), %r10
    000000a2: 	leaq	0x1c24(%rsi), %r9
    000000a9: 	leaq	0x1c28(%rsi), %r8
.Ltmp40:
    000000b0: 	movl	(%rdx,%r14), %ecx
    000000b4: 	imull	(%rdi), %ecx
    000000b7: 	addl	(%rax), %ecx
    000000b9: 	movl	%ecx, (%rax)
    000000bb: 	movl	(%rdx,%rsi), %r15d
    000000bf: 	imull	0x4(%rdi), %r15d
    000000c4: 	addl	%ecx, %r15d
    000000c7: 	movl	%r15d, (%rax)
    000000ca: 	movl	(%rdx,%r13), %ecx
    000000ce: 	imull	0x8(%rdi), %ecx
    000000d2: 	addl	%r15d, %ecx
    000000d5: 	movl	%ecx, (%rax)
    000000d7: 	movl	(%rdx,%r12), %r15d
    000000db: 	imull	0xc(%rdi), %r15d
    000000e0: 	addl	%ecx, %r15d
    000000e3: 	movl	%r15d, (%rax)
    000000e6: 	movl	(%rdx,%rbp), %ecx
    000000e9: 	imull	(%rdi), %ecx
    000000ec: 	addl	0x4(%rax), %ecx
    000000ef: 	movl	%ecx, 0x4(%rax)
    000000f2: 	movl	(%rdx,%rbx), %r15d
    000000f6: 	imull	0x4(%rdi), %r15d
    000000fb: 	addl	%ecx, %r15d
    000000fe: 	movq	-0x48(%rsp), %rcx
    00000103: 	movl	%r15d, 0x4(%rax)
    00000107: 	movl	(%rdx,%rcx), %ecx
    0000010a: 	imull	0x8(%rdi), %ecx
    0000010e: 	addl	%r15d, %ecx
    00000111: 	movq	-0x40(%rsp), %r15
    00000116: 	movl	%ecx, 0x4(%rax)
    00000119: 	movl	(%rdx,%r15), %r15d
    0000011d: 	imull	0xc(%rdi), %r15d
    00000122: 	addl	%ecx, %r15d
    00000125: 	movq	-0x20(%rsp), %rcx
    0000012a: 	movl	%r15d, 0x4(%rax)
    0000012e: 	movl	(%rdx,%rcx), %ecx
    00000131: 	imull	(%rdi), %ecx
    00000134: 	addl	0x8(%rax), %ecx
    00000137: 	movl	%ecx, 0x8(%rax)
    0000013a: 	movq	-0x38(%rsp), %r15
    0000013f: 	movl	(%rdx,%r15), %r15d
    00000143: 	imull	0x4(%rdi), %r15d
    00000148: 	addl	%ecx, %r15d
    0000014b: 	movq	-0x30(%rsp), %rcx
    00000150: 	movl	%r15d, 0x8(%rax)
    00000154: 	movl	(%rdx,%rcx), %ecx
    00000157: 	imull	0x8(%rdi), %ecx
    0000015b: 	addl	%r15d, %ecx
    0000015e: 	movq	-0x28(%rsp), %r15
    00000163: 	movl	%ecx, 0x8(%rax)
    00000166: 	movl	(%rdx,%r15), %r15d
    0000016a: 	imull	0xc(%rdi), %r15d
    0000016f: 	addl	%ecx, %r15d
    00000172: 	movl	%r15d, 0x8(%rax)
    00000176: 	movl	(%rdx,%r11), %ecx
    0000017a: 	imull	(%rdi), %ecx
    0000017d: 	addl	0xc(%rax), %ecx
    00000180: 	movl	%ecx, 0xc(%rax)
    00000183: 	movl	(%rdx,%r10), %r15d
    00000187: 	imull	0x4(%rdi), %r15d
    0000018c: 	addl	%ecx, %r15d
    0000018f: 	movl	%r15d, 0xc(%rax)
    00000193: 	movl	(%rdx,%r9), %ecx
    00000197: 	imull	0x8(%rdi), %ecx
    0000019b: 	addl	%r15d, %ecx
    0000019e: 	movl	%ecx, 0xc(%rax)
    000001a1: 	movl	(%rdx,%r8), %r15d
    000001a5: 	imull	0xc(%rdi), %r15d
    000001aa: 	addl	%ecx, %r15d
    000001ad: 	addq	$0x2580, %rdx
    000001b4: 	addq	$0x10, %rax
    000001b8: 	movl	%r15d, -0x4(%rax)
    000001bc: 	cmpq	-0x18(%rsp), %rdx
    000001c1: 	jne	.Ltmp40 # Offset: 449
    000001c7: 	addq	$0x10, %rsi
    000001cb: 	addq	$0x10, %rdi
    000001cf: 	cmpq	$0x964, %rsi
    000001d6: 	jne	.Ltmp41 # Offset: 470
    000001dc: 	popq	%rbx
    000001dd: 	popq	%rbp
    000001de: 	popq	%r12
    000001e0: 	popq	%r13
    000001e2: 	popq	%r14
    000001e4: 	popq	%r15
    000001e6: 	retq # Offset: 486
DWARF CFI Instructions:
    <empty>
End of Function "_ZN22matvecmul_JI_unrolled1IiEclEPKiPiS2_ii.constprop.0/1(*2)"

Binary Function "_ZN22matvecmul_JI_unrolled2IiEclEPKiPiS2_ii.constprop.0/1(*2)" after disassembly {
  All names   : _ZN22matvecmul_JI_unrolled2IiEclEPKiPiS2_ii.constprop.0/1
                _ZN22matvecmul_JI_unrolled2IiEclEPKiPiS2_ii.constprop.0/matrix_vector_product.cpp/1
  Number      : 79
  State       : disassembled
  Address     : 0x26f0
  Size        : 0x215
  MaxSize     : 0x220
  Offset      : 0x26f0
  Section     : .text
  Orc Section : .local.text._ZN22matvecmul_JI_unrolled2IiEclEPKiPiS2_ii.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB078:
    00000000: 	pushq	%r15
    00000002: 	leaq	0x1d4c00(%rdx), %rax
    00000009: 	movq	%rdi, %r10
    0000000c: 	movl	$0x960, %r9d
    00000012: 	pushq	%r14
    00000014: 	pushq	%r13
    00000016: 	pushq	%r12
    00000018: 	pushq	%rbp
    00000019: 	pushq	%rbx
    0000001a: 	movq	%rsi, -0x10(%rsp)
    0000001f: 	movq	%rdx, -0x8(%rsp)
    00000024: 	movq	%rax, -0x18(%rsp)
    00000029: 	nopl	(%rax) # Size: 7
.Ltmp43:
    00000030: 	leaq	0x12c0(%r9), %rax
    00000037: 	movq	-0x8(%rsp), %rdx
    0000003c: 	leaq	-0x960(%r9), %r14
    00000043: 	movq	%rax, -0x60(%rsp)
    00000048: 	leaq	-0x95c(%r9), %rax
    0000004f: 	leaq	0x960(%r9), %r13
    00000056: 	movq	%rax, -0x58(%rsp)
    0000005b: 	leaq	0x4(%r9), %rax
    0000005f: 	leaq	-0x954(%r9), %r12
    00000066: 	movq	%rax, -0x50(%rsp)
    0000006b: 	leaq	0x964(%r9), %rax
    00000072: 	leaq	0xc(%r9), %rbp
    00000076: 	movq	%rax, -0x48(%rsp)
    0000007b: 	leaq	0x12c4(%r9), %rax
    00000082: 	leaq	0x96c(%r9), %rbx
    00000089: 	movq	%rax, -0x40(%rsp)
    0000008e: 	leaq	-0x958(%r9), %rax
    00000095: 	leaq	0x12cc(%r9), %r11
    0000009c: 	movq	%rax, -0x38(%rsp)
    000000a1: 	leaq	0x8(%r9), %rax
    000000a5: 	movq	%rax, -0x30(%rsp)
    000000aa: 	leaq	0x968(%r9), %rax
    000000b1: 	movq	%rax, -0x28(%rsp)
    000000b6: 	leaq	0x12c8(%r9), %rax
    000000bd: 	movq	%rax, -0x20(%rsp)
    000000c2: 	movq	-0x10(%rsp), %rax
    000000c7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp42:
    000000d0: 	movl	(%rdx,%r14), %esi
    000000d4: 	imull	(%r10), %esi
    000000d8: 	addl	(%rax), %esi
    000000da: 	movq	-0x60(%rsp), %rdi
    000000df: 	movl	%esi, (%rax)
    000000e1: 	movl	(%rdx,%r9), %ecx
    000000e5: 	imull	(%r10), %ecx
    000000e9: 	addl	0x4(%rax), %ecx
    000000ec: 	movl	%ecx, 0x4(%rax)
    000000ef: 	movl	(%rdx,%r13), %r15d
    000000f3: 	imull	(%r10), %r15d
    000000f7: 	addl	0x8(%rax), %r15d
    000000fb: 	movl	%r15d, 0x8(%rax)
    000000ff: 	movl	(%rdx,%rdi), %r8d
    00000103: 	movq	-0x58(%rsp), %rdi
    00000108: 	imull	(%r10), %r8d
    0000010c: 	addl	0xc(%rax), %r8d
    00000110: 	movl	%r8d, 0xc(%rax)
    00000114: 	movl	(%rdx,%rdi), %edi
    00000117: 	imull	0x4(%r10), %edi
    0000011c: 	addl	%esi, %edi
    0000011e: 	movq	-0x50(%rsp), %rsi
    00000123: 	movl	%edi, (%rax)
    00000125: 	movl	(%rdx,%rsi), %esi
    00000128: 	imull	0x4(%r10), %esi
    0000012d: 	addl	%ecx, %esi
    0000012f: 	movq	-0x48(%rsp), %rcx
    00000134: 	movl	%esi, 0x4(%rax)
    00000137: 	movl	(%rdx,%rcx), %ecx
    0000013a: 	imull	0x4(%r10), %ecx
    0000013f: 	addl	%r15d, %ecx
    00000142: 	movq	-0x40(%rsp), %r15
    00000147: 	movl	%ecx, 0x8(%rax)
    0000014a: 	movl	(%rdx,%r15), %r15d
    0000014e: 	imull	0x4(%r10), %r15d
    00000153: 	addl	%r8d, %r15d
    00000156: 	movl	%r15d, 0xc(%rax)
    0000015a: 	movq	-0x38(%rsp), %r8
    0000015f: 	movl	(%rdx,%r8), %r8d
    00000163: 	imull	0x8(%r10), %r8d
    00000168: 	addl	%edi, %r8d
    0000016b: 	movq	-0x30(%rsp), %rdi
    00000170: 	movl	%r8d, (%rax)
    00000173: 	movl	(%rdx,%rdi), %edi
    00000176: 	imull	0x8(%r10), %edi
    0000017b: 	addl	%esi, %edi
    0000017d: 	movq	-0x28(%rsp), %rsi
    00000182: 	movl	%edi, 0x4(%rax)
    00000185: 	movl	(%rdx,%rsi), %esi
    00000188: 	imull	0x8(%r10), %esi
    0000018d: 	addl	%ecx, %esi
    0000018f: 	movq	-0x20(%rsp), %rcx
    00000194: 	movl	%esi, 0x8(%rax)
    00000197: 	movl	(%rdx,%rcx), %ecx
    0000019a: 	imull	0x8(%r10), %ecx
    0000019f: 	addl	%r15d, %ecx
    000001a2: 	movl	%ecx, 0xc(%rax)
    000001a5: 	movl	(%rdx,%r12), %r15d
    000001a9: 	imull	0xc(%r10), %r15d
    000001ae: 	addl	%r8d, %r15d
    000001b1: 	movl	%r15d, (%rax)
    000001b4: 	movl	(%rdx,%rbp), %r8d
    000001b8: 	imull	0xc(%r10), %r8d
    000001bd: 	addl	%edi, %r8d
    000001c0: 	movl	%r8d, 0x4(%rax)
    000001c4: 	movl	(%rdx,%rbx), %edi
    000001c7: 	imull	0xc(%r10), %edi
    000001cc: 	addl	%esi, %edi
    000001ce: 	movl	%edi, 0x8(%rax)
    000001d1: 	movl	(%rdx,%r11), %esi
    000001d5: 	imull	0xc(%r10), %esi
    000001da: 	addl	%ecx, %esi
    000001dc: 	addq	$0x2580, %rdx
    000001e3: 	addq	$0x10, %rax
    000001e7: 	movl	%esi, -0x4(%rax)
    000001ea: 	cmpq	-0x18(%rsp), %rdx
    000001ef: 	jne	.Ltmp42 # Offset: 495
    000001f5: 	addq	$0x10, %r9
    000001f9: 	addq	$0x10, %r10
    000001fd: 	cmpq	$0x12c0, %r9
    00000204: 	jne	.Ltmp43 # Offset: 516
    0000020a: 	popq	%rbx
    0000020b: 	popq	%rbp
    0000020c: 	popq	%r12
    0000020e: 	popq	%r13
    00000210: 	popq	%r14
    00000212: 	popq	%r15
    00000214: 	retq # Offset: 532
DWARF CFI Instructions:
    <empty>
End of Function "_ZN22matvecmul_JI_unrolled2IiEclEPKiPiS2_ii.constprop.0/1(*2)"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev(*2)" after disassembly {
  All names   : _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
                _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev
  Number      : 80
  State       : disassembled
  Address     : 0x2910
  Size        : 0x1f7
  MaxSize     : 0x200
  Offset      : 0x2910
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB079:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x28, %rsp
    00000015: 	movq	0x20(%rdi), %rcx
    00000019: 	movq	0x30(%rdi), %rax
    0000001d: 	movq	0x38(%rdi), %r13
    00000021: 	movq	0x10(%rdi), %rbp
    00000025: 	movq	%rcx, 0x10(%rsp)
    0000002a: 	movq	0x28(%rdi), %rcx
    0000002e: 	movq	%rax, 0x8(%rsp)
    00000033: 	movq	0x48(%rdi), %rax
    00000037: 	leaq	0x8(%rcx), %r12
    0000003b: 	movq	%rcx, 0x18(%rsp)
    00000040: 	movq	%rax, (%rsp)
    00000044: 	cmpq	%r12, %rax
    00000047: 	jbe	.Ltmp44 # Offset: 71
    00000049: 	nopl	(%rax) # Size: 7
.Ltmp47:
    00000050: 	movq	(%r12), %r15
    00000054: 	leaq	0x200(%r15), %rbx
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp46:
    00000060: 	movq	(%r15), %rdi
    00000063: 	leaq	0x10(%r15), %rdx
    00000067: 	cmpq	%rdx, %rdi
    0000006a: 	je	.Ltmp45 # Offset: 106
    00000070: 	movq	0x10(%r15), %rax
    00000074: 	addq	$0x20, %r15
    00000078: 	leaq	0x1(%rax), %rsi
    0000007c: 	callq	_ZdlPvm@PLT # Offset: 124
    00000081: 	cmpq	%r15, %rbx
    00000084: 	jne	.Ltmp46 # Offset: 132
    00000086: 	addq	$0x8, %r12
    0000008a: 	cmpq	%r12, (%rsp)
    0000008e: 	ja	.Ltmp47 # Offset: 142
.Ltmp44:
    00000090: 	movq	(%rsp), %rcx
    00000094: 	cmpq	%rcx, 0x18(%rsp)
    00000099: 	je	.Ltmp48 # Offset: 153
    0000009f: 	cmpq	0x10(%rsp), %rbp
    000000a4: 	je	.Ltmp49 # Offset: 164
.Ltmp52:
    000000a6: 	movq	(%rbp), %rdi
    000000aa: 	leaq	0x10(%rbp), %rax
    000000ae: 	cmpq	%rax, %rdi
    000000b1: 	je	.Ltmp50 # Offset: 177
.Ltmp51:
    000000b3: 	movq	0x10(%rbp), %rax
    000000b7: 	addq	$0x20, %rbp
    000000bb: 	leaq	0x1(%rax), %rsi
    000000bf: 	callq	_ZdlPvm@PLT # Offset: 191
    000000c4: 	cmpq	%rbp, 0x10(%rsp)
    000000c9: 	je	.Ltmp49 # Offset: 201
    000000cb: 	movq	(%rbp), %rdi
    000000cf: 	leaq	0x10(%rbp), %rax
    000000d3: 	cmpq	%rax, %rdi
    000000d6: 	jne	.Ltmp51 # Offset: 214
.Ltmp50:
    000000d8: 	addq	$0x20, %rbp
    000000dc: 	cmpq	%rbp, 0x10(%rsp)
    000000e1: 	jne	.Ltmp52 # Offset: 225
    000000e3: 	cmpq	%r13, 0x8(%rsp)
    000000e8: 	je	.Ltmp53 # Offset: 232
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp55:
    000000f0: 	movq	(%r13), %rdi
    000000f4: 	leaq	0x10(%r13), %rax
    000000f8: 	cmpq	%rax, %rdi
    000000fb: 	je	.Ltmp54 # Offset: 251
    000000fd: 	movq	0x10(%r13), %rax
    00000101: 	leaq	0x1(%rax), %rsi
    00000105: 	callq	_ZdlPvm@PLT # Offset: 261
.Ltmp54:
    0000010a: 	addq	$0x20, %r13
.Ltmp49:
    0000010e: 	cmpq	%r13, 0x8(%rsp)
    00000113: 	jne	.Ltmp55 # Offset: 275
.Ltmp53:
    00000115: 	movq	(%r14), %rdi
    00000118: 	testq	%rdi, %rdi
    0000011b: 	je	.Ltmp56 # Offset: 283
.Ltmp62:
    00000121: 	movq	0x48(%r14), %rax
    00000125: 	movq	0x28(%r14), %rbx
    00000129: 	leaq	0x8(%rax), %rbp
    0000012d: 	cmpq	%rbx, %rbp
    00000130: 	jbe	.Ltmp57 # Offset: 304
    00000132: 	nopw	(%rax,%rax) # Size: 6
.Ltmp58:
    00000138: 	movq	(%rbx), %rdi
    0000013b: 	movl	$0x200, %esi
    00000140: 	addq	$0x8, %rbx
    00000144: 	callq	_ZdlPvm@PLT # Offset: 324
    00000149: 	cmpq	%rbx, %rbp
    0000014c: 	ja	.Ltmp58 # Offset: 332
    0000014e: 	movq	(%r14), %rdi
.Ltmp57:
    00000151: 	movq	0x8(%r14), %rsi
    00000155: 	addq	$0x28, %rsp
    00000159: 	popq	%rbx
    0000015a: 	popq	%rbp
    0000015b: 	shlq	$0x3, %rsi
    0000015f: 	popq	%r12
    00000161: 	popq	%r13
    00000163: 	popq	%r14
    00000165: 	popq	%r15
    00000167: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 359
    0000016c: 	nopl	(%rax) # Size: 4
.Ltmp45:
    00000170: 	addq	$0x20, %r15
    00000174: 	cmpq	%r15, %rbx
    00000177: 	jne	.Ltmp46 # Offset: 375
    0000017d: 	addq	$0x8, %r12
    00000181: 	cmpq	%r12, (%rsp)
    00000185: 	ja	.Ltmp47 # Offset: 389
    0000018b: 	jmp	.Ltmp44 # Offset: 395
.Ltmp48:
    00000190: 	cmpq	0x8(%rsp), %rbp
    00000195: 	je	.Ltmp53 # Offset: 405
.Ltmp61:
    0000019b: 	movq	(%rbp), %rdi
    0000019f: 	leaq	0x10(%rbp), %rax
    000001a3: 	cmpq	%rax, %rdi
    000001a6: 	je	.Ltmp59 # Offset: 422
.Ltmp60:
    000001a8: 	movq	0x10(%rbp), %rax
    000001ac: 	addq	$0x20, %rbp
    000001b0: 	leaq	0x1(%rax), %rsi
    000001b4: 	callq	_ZdlPvm@PLT # Offset: 436
    000001b9: 	cmpq	%rbp, 0x8(%rsp)
    000001be: 	je	.Ltmp53 # Offset: 446
    000001c4: 	movq	(%rbp), %rdi
    000001c8: 	leaq	0x10(%rbp), %rax
    000001cc: 	cmpq	%rax, %rdi
    000001cf: 	jne	.Ltmp60 # Offset: 463
.Ltmp59:
    000001d1: 	addq	$0x20, %rbp
    000001d5: 	cmpq	%rbp, 0x8(%rsp)
    000001da: 	jne	.Ltmp61 # Offset: 474
    000001dc: 	movq	(%r14), %rdi
    000001df: 	testq	%rdi, %rdi
    000001e2: 	jne	.Ltmp62 # Offset: 482
.Ltmp56:
    000001e8: 	addq	$0x28, %rsp
    000001ec: 	popq	%rbx
    000001ed: 	popq	%rbp
    000001ee: 	popq	%r12
    000001f0: 	popq	%r13
    000001f2: 	popq	%r14
    000001f4: 	popq	%r15
    000001f6: 	retq # Offset: 502
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev(*2)"

Binary Function "_Z16verify_matvecmulIiEvPT_S1_S1_ii.constprop.0/1(*2)" after disassembly {
  All names   : _Z16verify_matvecmulIiEvPT_S1_S1_ii.constprop.0/1
                _Z16verify_matvecmulIiEvPT_S1_S1_ii.constprop.0/matrix_vector_product.cpp/1
  Number      : 81
  State       : disassembled
  Address     : 0x2b10
  Size        : 0x2474
  MaxSize     : 0x2480
  Offset      : 0x2b10
  Section     : .text
  Orc Section : .local.text._Z16verify_matvecmulIiEvPT_S1_S1_ii.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB080:
    00000000: 	pushq	%r15
    00000002: 	movl	$0x190, %ecx
    00000007: 	pushq	%r14
    00000009: 	movq	%rdi, %r14
    0000000c: 	pushq	%r13
    0000000e: 	pushq	%r12
    00000010: 	pushq	%rbp
    00000011: 	pushq	%rbx
    00000012: 	subq	$0xd68, %rsp
    00000019: 	movdqa	DATAat0x24900(%rip), %xmm1
    00000021: 	movdqa	DATAat0x24910(%rip), %xmm3
    00000029: 	movq	%rdx, 0x28(%rsp)
    0000002e: 	leaq	0xd0(%rsp), %rdi
    00000036: 	movdqa	DATAat0x24920(%rip), %xmm2
    0000003e: 	leaq	0x960(%r14), %rdx
    00000045: 	movq	%rsi, 0x58(%rsp)
    0000004a: 	movq	%fs:0x28, %rax
    00000053: 	movq	%rax, 0xd58(%rsp)
    0000005b: 	xorl	%eax, %eax
    0000005d: 	movq	%rdi, 0x80(%rsp)
    00000065: 	rep		stosq	%rax, %es:(%rdi)
    00000068: 	movq	%r14, %rax
.Ltmp63:
    0000006b: 	movdqa	%xmm1, %xmm0
    0000006f: 	addq	$0x10, %rax
    00000073: 	paddq	%xmm3, %xmm1
    00000077: 	movdqa	%xmm0, %xmm4
    0000007b: 	paddq	%xmm2, %xmm4
    0000007f: 	shufps	$0x88, %xmm4, %xmm0
    00000083: 	movups	%xmm0, -0x10(%rax)
    00000087: 	cmpq	%rdx, %rax
    0000008a: 	jne	.Ltmp63 # Offset: 138
    0000008c: 	movq	0x28(%rsp), %rsi
    00000091: 	xorl	%ecx, %ecx
    00000093: 	leaq	0xc80(%rsi), %rdx
.Ltmp65:
    0000009a: 	movd	%ecx, %xmm6
    0000009e: 	movq	%rsi, %rax
    000000a1: 	pshufd	$0x0, %xmm6, %xmm0
    000000a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp64:
    000000b0: 	movups	%xmm0, (%rax)
    000000b3: 	addq	$0x10, %rax
    000000b7: 	cmpq	%rdx, %rax
    000000ba: 	jne	.Ltmp64 # Offset: 186
    000000bc: 	addl	$0x1, %ecx
    000000bf: 	addq	$0xc80, %rsi
    000000c6: 	leaq	0xc80(%rax), %rdx
    000000cd: 	cmpl	$0x258, %ecx
    000000d3: 	jne	.Ltmp65 # Offset: 211
    000000d5: 	movq	0x80(%rsp), %rcx
    000000dd: 	movq	0x28(%rsp), %rdx
    000000e2: 	leaq	0xd50(%rsp), %rsi
.Ltmp67:
    000000ea: 	movl	(%rcx), %edi
    000000ec: 	xorl	%eax, %eax
    000000ee: 	pxor	%xmm3, %xmm3
    000000f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp66:
    000000f8: 	movdqu	(%r14,%rax), %xmm0
    000000fe: 	movdqu	(%rdx,%rax), %xmm2
    00000103: 	movdqu	(%r14,%rax), %xmm1
    00000109: 	movdqu	(%rdx,%rax), %xmm4
    0000010e: 	addq	$0x10, %rax
    00000112: 	psrlq	$0x20, %xmm0
    00000117: 	psrlq	$0x20, %xmm2
    0000011c: 	pmuludq	%xmm4, %xmm1
    00000120: 	pmuludq	%xmm2, %xmm0
    00000124: 	pshufd	$0x8, %xmm1, %xmm1
    00000129: 	pshufd	$0x8, %xmm0, %xmm0
    0000012e: 	punpckldq	%xmm0, %xmm1
    00000132: 	paddd	%xmm1, %xmm3
    00000136: 	cmpq	$0x960, %rax
    0000013c: 	jne	.Ltmp66 # Offset: 316
    0000013e: 	movdqa	%xmm3, %xmm0
    00000142: 	addq	$0x4, %rcx
    00000146: 	addq	$0x960, %rdx
    0000014d: 	psrldq	$0x8, %xmm0
    00000152: 	paddd	%xmm0, %xmm3
    00000156: 	movdqa	%xmm3, %xmm0
    0000015a: 	psrldq	$0x4, %xmm0
    0000015f: 	paddd	%xmm0, %xmm3
    00000163: 	movd	%xmm3, %eax
    00000167: 	addl	%edi, %eax
    00000169: 	movl	%eax, -0x4(%rcx)
    0000016c: 	cmpq	%rsi, %rcx
    0000016f: 	jne	.Ltmp67 # Offset: 367
    00000175: 	movq	0x58(%rsp), %rsi
    0000017a: 	xorl	%r8d, %r8d
    0000017d: 	leaq	0xc88(%rsi), %rax
    00000184: 	movq	$0x0, (%rsi)
    0000018b: 	movq	%rsi, %rcx
    0000018e: 	movq	%rax, 0x88(%rsp)
    00000196: 	leaq	0x8(%rsi), %rax
    0000019a: 	movq	$0x0, 0xc78(%rsi)
    000001a5: 	movq	%rax, 0x90(%rsp)
    000001ad: 	andq	$-0x8, %rax
    000001b1: 	subq	%rax, %rcx
    000001b4: 	movq	%rax, %rdi
    000001b7: 	xorl	%eax, %eax
    000001b9: 	addl	$0xc80, %ecx
    000001bf: 	shrl	$0x3, %ecx
    000001c2: 	rep		stosq	%rax, %es:(%rdi)
    000001c5: 	movq	0x28(%rsp), %rdi
.Ltmp69:
    000001ca: 	movl	(%rsi), %ecx
    000001cc: 	xorl	%eax, %eax
    000001ce: 	nop # Size: 2
.Ltmp68:
    000001d0: 	movl	(%rdi,%rax), %edx
    000001d3: 	imull	(%r14,%rax), %edx
    000001d8: 	addq	$0x4, %rax
    000001dc: 	addl	%edx, %ecx
    000001de: 	movl	%ecx, (%rsi)
    000001e0: 	cmpq	$0x960, %rax
    000001e6: 	jne	.Ltmp68 # Offset: 486
    000001e8: 	addl	$0x258, %r8d
    000001ef: 	addq	$0x4, %rsi
    000001f3: 	addq	$0x960, %rdi
    000001fa: 	cmpl	$0x75300, %r8d
    00000201: 	jne	.Ltmp69 # Offset: 513
    00000203: 	xorl	%eax, %eax
.Ltmp71:
    00000205: 	movq	0x58(%rsp), %rdi
    0000020a: 	movq	0x80(%rsp), %rbx
    00000212: 	movl	(%rdi,%rax,4), %edi
    00000215: 	cmpl	%edi, (%rbx,%rax,4)
    00000218: 	jne	.Ltmp70 # Offset: 536
    0000021e: 	addq	$0x1, %rax
    00000222: 	cmpq	$0x320, %rax
    00000228: 	jne	.Ltmp71 # Offset: 552
.Ltmp195:
    0000022a: 	movq	0x58(%rsp), %r10
    0000022f: 	movq	%r14, %rsi
    00000232: 	movq	$0x0, (%r10)
    00000239: 	movq	0x88(%rsp), %rax
    00000241: 	movq	%r10, %rcx
    00000244: 	leaq	0xc80(%r10), %rbx
    0000024b: 	movq	$0x0, -0x10(%rax)
    00000253: 	movq	0x90(%rsp), %rdi
    0000025b: 	xorl	%eax, %eax
    0000025d: 	andq	$-0x8, %rdi
    00000261: 	subq	%rdi, %rcx
    00000264: 	addl	$0xc80, %ecx
    0000026a: 	shrl	$0x3, %ecx
    0000026d: 	rep		stosq	%rax, %es:(%rdi)
    00000270: 	xorl	%edi, %edi
    00000272: 	movq	0x28(%rsp), %rcx
.Ltmp74:
    00000277: 	leaq	0x1d42a4(%rcx), %rax
    0000027e: 	movq	%rsi, %r9
    00000281: 	addq	$0x4, %rsi
    00000285: 	cmpq	%rax, %r10
    00000288: 	setae	%al
    0000028b: 	cmpq	%rcx, %rbx
    0000028e: 	setbe	%dl
    00000291: 	orb	%dl, %al
    00000293: 	je	.Ltmp72 # Offset: 659
    00000299: 	cmpq	%r9, %rbx
    0000029c: 	setbe	%al
    0000029f: 	cmpq	%rsi, %r10
    000002a2: 	setae	%dl
    000002a5: 	orb	%dl, %al
    000002a7: 	je	.Ltmp72 # Offset: 679
    000002ad: 	movd	(%r9), %xmm6
    000002b2: 	movq	%rcx, %rax
    000002b5: 	movq	%r10, %rdx
    000002b8: 	pshufd	$0x0, %xmm6, %xmm2
    000002bd: 	movdqa	%xmm2, %xmm3
    000002c1: 	psrlq	$0x20, %xmm3
.Ltmp73:
    000002c6: 	movd	0x12c0(%rax), %xmm1
    000002ce: 	movd	(%rax), %xmm0
    000002d2: 	addq	$0x10, %rdx
    000002d6: 	addq	$0x2580, %rax
    000002dc: 	movd	-0x960(%rax), %xmm5
    000002e4: 	movd	-0x1c20(%rax), %xmm6
    000002ec: 	punpckldq	%xmm5, %xmm1
    000002f0: 	punpckldq	%xmm6, %xmm0
    000002f4: 	punpcklqdq	%xmm1, %xmm0
    000002f8: 	movdqa	%xmm0, %xmm1
    000002fc: 	psrlq	$0x20, %xmm0
    00000301: 	pmuludq	%xmm2, %xmm1
    00000305: 	pmuludq	%xmm3, %xmm0
    00000309: 	pshufd	$0x8, %xmm1, %xmm1
    0000030e: 	pshufd	$0x8, %xmm0, %xmm0
    00000313: 	punpckldq	%xmm0, %xmm1
    00000317: 	movdqu	-0x10(%rdx), %xmm0
    0000031c: 	paddd	%xmm1, %xmm0
    00000320: 	movups	%xmm0, -0x10(%rdx)
    00000324: 	cmpq	%rbx, %rdx
    00000327: 	jne	.Ltmp73 # Offset: 807
    00000329: 	addl	$0x1, %edi
    0000032c: 	addq	$0x4, %rcx
    00000330: 	cmpl	$0x258, %edi
    00000336: 	jne	.Ltmp74 # Offset: 822
.Ltmp192:
    0000033c: 	xorl	%eax, %eax
.Ltmp76:
    0000033e: 	movq	0x58(%rsp), %rcx
    00000343: 	movq	0x80(%rsp), %rdi
    0000034b: 	movl	(%rcx,%rax,4), %ecx
    0000034e: 	cmpl	%ecx, (%rdi,%rax,4)
    00000351: 	jne	.Ltmp75 # Offset: 849
    00000357: 	addq	$0x1, %rax
    0000035b: 	cmpq	$0x320, %rax
    00000361: 	jne	.Ltmp76 # Offset: 865
.Ltmp214:
    00000363: 	movq	0x58(%rsp), %rsi
    00000368: 	movq	$0x0, (%rsi)
    0000036f: 	movq	0x88(%rsp), %rax
    00000377: 	movq	%rsi, %rcx
    0000037a: 	movq	$0x0, -0x10(%rax)
    00000382: 	movq	0x90(%rsp), %rdi
    0000038a: 	xorl	%eax, %eax
    0000038c: 	andq	$-0x8, %rdi
    00000390: 	subq	%rdi, %rcx
    00000393: 	addl	$0xc80, %ecx
    00000399: 	shrl	$0x3, %ecx
    0000039c: 	rep		stosq	%rax, %es:(%rdi)
    0000039f: 	movq	%rsi, %rcx
    000003a2: 	movq	0x28(%rsp), %rdx
    000003a7: 	leaq	0x1d4c00(%rdx), %rax
    000003ae: 	movq	%rax, 0xa8(%rsp)
.Ltmp78:
    000003b6: 	movl	(%rcx), %esi
    000003b8: 	xorl	%eax, %eax
    000003ba: 	pxor	%xmm3, %xmm3
    000003be: 	nop # Size: 2
.Ltmp77:
    000003c0: 	movdqu	(%r14,%rax), %xmm0
    000003c6: 	movdqu	(%rdx,%rax), %xmm2
    000003cb: 	movdqu	(%r14,%rax), %xmm1
    000003d1: 	movdqu	(%rdx,%rax), %xmm4
    000003d6: 	addq	$0x10, %rax
    000003da: 	psrlq	$0x20, %xmm0
    000003df: 	psrlq	$0x20, %xmm2
    000003e4: 	pmuludq	%xmm4, %xmm1
    000003e8: 	pmuludq	%xmm2, %xmm0
    000003ec: 	pshufd	$0x8, %xmm1, %xmm1
    000003f1: 	pshufd	$0x8, %xmm0, %xmm0
    000003f6: 	punpckldq	%xmm0, %xmm1
    000003fa: 	paddd	%xmm1, %xmm3
    000003fe: 	cmpq	$0x960, %rax
    00000404: 	jne	.Ltmp77 # Offset: 1028
    00000406: 	movdqa	%xmm3, %xmm0
    0000040a: 	addq	$0x4, %rcx
    0000040e: 	addq	$0x960, %rdx
    00000415: 	psrldq	$0x8, %xmm0
    0000041a: 	paddd	%xmm0, %xmm3
    0000041e: 	movdqa	%xmm3, %xmm0
    00000422: 	psrldq	$0x4, %xmm0
    00000427: 	paddd	%xmm0, %xmm3
    0000042b: 	movd	%xmm3, %eax
    0000042f: 	addl	%esi, %eax
    00000431: 	movl	%eax, -0x4(%rcx)
    00000434: 	cmpq	0xa8(%rsp), %rdx
    0000043c: 	jne	.Ltmp78 # Offset: 1084
    00000442: 	xorl	%eax, %eax
.Ltmp80:
    00000444: 	movq	0x58(%rsp), %rcx
    00000449: 	movq	0x80(%rsp), %rdi
    00000451: 	movl	(%rcx,%rax,4), %ecx
    00000454: 	cmpl	%ecx, (%rdi,%rax,4)
    00000457: 	jne	.Ltmp79 # Offset: 1111
    0000045d: 	addq	$0x1, %rax
    00000461: 	cmpq	$0x320, %rax
    00000467: 	jne	.Ltmp80 # Offset: 1127
.Ltmp213:
    00000469: 	movq	0x58(%rsp), %rsi
    0000046e: 	movq	$0x0, (%rsi)
    00000475: 	movq	0x88(%rsp), %rax
    0000047d: 	movq	%rsi, %rcx
    00000480: 	movq	$0x0, -0x10(%rax)
    00000488: 	movq	0x90(%rsp), %rdi
    00000490: 	xorl	%eax, %eax
    00000492: 	andq	$-0x8, %rdi
    00000496: 	subq	%rdi, %rcx
    00000499: 	addl	$0xc80, %ecx
    0000049f: 	shrl	$0x3, %ecx
    000004a2: 	rep		stosq	%rax, %es:(%rdi)
    000004a5: 	movq	%rsi, %rcx
    000004a8: 	movq	0x28(%rsp), %rdx
.Ltmp82:
    000004ad: 	movl	(%rcx), %esi
    000004af: 	xorl	%eax, %eax
    000004b1: 	pxor	%xmm3, %xmm3
    000004b5: 	nopl	(%rax) # Size: 3
.Ltmp81:
    000004b8: 	movdqu	(%r14,%rax), %xmm0
    000004be: 	movdqu	(%rdx,%rax), %xmm2
    000004c3: 	movdqu	(%r14,%rax), %xmm1
    000004c9: 	movdqu	(%rdx,%rax), %xmm5
    000004ce: 	addq	$0x10, %rax
    000004d2: 	psrlq	$0x20, %xmm0
    000004d7: 	psrlq	$0x20, %xmm2
    000004dc: 	pmuludq	%xmm5, %xmm1
    000004e0: 	pmuludq	%xmm2, %xmm0
    000004e4: 	pshufd	$0x8, %xmm1, %xmm1
    000004e9: 	pshufd	$0x8, %xmm0, %xmm0
    000004ee: 	punpckldq	%xmm0, %xmm1
    000004f2: 	paddd	%xmm1, %xmm3
    000004f6: 	cmpq	$0x960, %rax
    000004fc: 	jne	.Ltmp81 # Offset: 1276
    000004fe: 	movdqa	%xmm3, %xmm0
    00000502: 	addq	$0x4, %rcx
    00000506: 	addq	$0x960, %rdx
    0000050d: 	psrldq	$0x8, %xmm0
    00000512: 	paddd	%xmm0, %xmm3
    00000516: 	movdqa	%xmm3, %xmm0
    0000051a: 	psrldq	$0x4, %xmm0
    0000051f: 	paddd	%xmm0, %xmm3
    00000523: 	movd	%xmm3, %eax
    00000527: 	addl	%esi, %eax
    00000529: 	movl	%eax, -0x4(%rcx)
    0000052c: 	cmpq	0xa8(%rsp), %rdx
    00000534: 	jne	.Ltmp82 # Offset: 1332
    0000053a: 	xorl	%eax, %eax
.Ltmp84:
    0000053c: 	movq	0x58(%rsp), %rcx
    00000541: 	movq	0x80(%rsp), %rdi
    00000549: 	movl	(%rcx,%rax,4), %ecx
    0000054c: 	cmpl	%ecx, (%rdi,%rax,4)
    0000054f: 	jne	.Ltmp83 # Offset: 1359
    00000555: 	addq	$0x1, %rax
    00000559: 	cmpq	$0x320, %rax
    0000055f: 	jne	.Ltmp84 # Offset: 1375
.Ltmp212:
    00000561: 	movq	0x58(%rsp), %r9
    00000566: 	xorl	%esi, %esi
    00000568: 	movq	$0x0, (%r9)
    0000056f: 	movq	0x88(%rsp), %rax
    00000577: 	movq	%r9, %rcx
    0000057a: 	movq	$0x0, -0x10(%rax)
    00000582: 	movq	0x90(%rsp), %rdi
    0000058a: 	xorl	%eax, %eax
    0000058c: 	andq	$-0x8, %rdi
    00000590: 	subq	%rdi, %rcx
    00000593: 	addl	$0xc80, %ecx
    00000599: 	shrl	$0x3, %ecx
    0000059c: 	rep		stosq	%rax, %es:(%rdi)
    0000059f: 	movq	0x28(%rsp), %rcx
.Ltmp88:
    000005a4: 	leaq	0x1d42a4(%rcx), %rdx
    000005ab: 	movl	(%r14,%rsi,4), %eax
    000005af: 	cmpq	%rdx, %r9
    000005b2: 	jae	.Ltmp85 # Offset: 1458
    000005b4: 	cmpq	%rcx, %rbx
    000005b7: 	ja	.Ltmp86 # Offset: 1463
.Ltmp85:
    000005bd: 	movd	%eax, %xmm6
    000005c1: 	movq	%r9, %rdx
    000005c4: 	movq	%rcx, %rax
    000005c7: 	pshufd	$0x0, %xmm6, %xmm2
    000005cc: 	movdqa	%xmm2, %xmm3
    000005d0: 	psrlq	$0x20, %xmm3
.Ltmp87:
    000005d5: 	movd	0x12c0(%rax), %xmm1
    000005dd: 	movd	(%rax), %xmm0
    000005e1: 	addq	$0x10, %rdx
    000005e5: 	addq	$0x2580, %rax
    000005eb: 	movd	-0x960(%rax), %xmm4
    000005f3: 	movd	-0x1c20(%rax), %xmm5
    000005fb: 	punpckldq	%xmm4, %xmm1
    000005ff: 	punpckldq	%xmm5, %xmm0
    00000603: 	punpcklqdq	%xmm1, %xmm0
    00000607: 	movdqa	%xmm0, %xmm1
    0000060b: 	psrlq	$0x20, %xmm0
    00000610: 	pmuludq	%xmm2, %xmm1
    00000614: 	pmuludq	%xmm3, %xmm0
    00000618: 	pshufd	$0x8, %xmm1, %xmm1
    0000061d: 	pshufd	$0x8, %xmm0, %xmm0
    00000622: 	punpckldq	%xmm0, %xmm1
    00000626: 	movdqu	-0x10(%rdx), %xmm0
    0000062b: 	paddd	%xmm1, %xmm0
    0000062f: 	movups	%xmm0, -0x10(%rdx)
    00000633: 	cmpq	%rbx, %rdx
    00000636: 	jne	.Ltmp87 # Offset: 1590
.Ltmp194:
    00000638: 	addq	$0x1, %rsi
    0000063c: 	addq	$0x4, %rcx
    00000640: 	cmpq	$0x258, %rsi
    00000647: 	jne	.Ltmp88 # Offset: 1607
    0000064d: 	xorl	%eax, %eax
.Ltmp90:
    0000064f: 	movq	0x58(%rsp), %rdi
    00000654: 	movq	0x80(%rsp), %rbx
    0000065c: 	movl	(%rdi,%rax,4), %edi
    0000065f: 	cmpl	%edi, (%rbx,%rax,4)
    00000662: 	jne	.Ltmp89 # Offset: 1634
    00000668: 	addq	$0x1, %rax
    0000066c: 	cmpq	$0x320, %rax
    00000672: 	jne	.Ltmp90 # Offset: 1650
.Ltmp211:
    00000674: 	movq	0x58(%rsp), %rsi
    00000679: 	movq	$0x0, (%rsi)
    00000680: 	movq	0x88(%rsp), %rax
    00000688: 	movq	%rsi, %rcx
    0000068b: 	movq	$0x0, -0x10(%rax)
    00000693: 	movq	0x90(%rsp), %rdi
    0000069b: 	xorl	%eax, %eax
    0000069d: 	andq	$-0x8, %rdi
    000006a1: 	subq	%rdi, %rcx
    000006a4: 	addl	$0xc80, %ecx
    000006aa: 	shrl	$0x3, %ecx
    000006ad: 	rep		stosq	%rax, %es:(%rdi)
    000006b0: 	movq	0x28(%rsp), %rdx
.Ltmp92:
    000006b5: 	movd	(%rsi), %xmm3
    000006b9: 	xorl	%eax, %eax
    000006bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp91:
    000006c0: 	movdqu	(%r14,%rax), %xmm0
    000006c6: 	movdqu	(%rdx,%rax), %xmm2
    000006cb: 	movdqu	(%r14,%rax), %xmm1
    000006d1: 	movdqu	(%rdx,%rax), %xmm4
    000006d6: 	addq	$0x10, %rax
    000006da: 	psrlq	$0x20, %xmm0
    000006df: 	psrlq	$0x20, %xmm2
    000006e4: 	pmuludq	%xmm4, %xmm1
    000006e8: 	pmuludq	%xmm2, %xmm0
    000006ec: 	pshufd	$0x8, %xmm1, %xmm1
    000006f1: 	pshufd	$0x8, %xmm0, %xmm0
    000006f6: 	punpckldq	%xmm0, %xmm1
    000006fa: 	paddd	%xmm1, %xmm3
    000006fe: 	cmpq	$0x960, %rax
    00000704: 	jne	.Ltmp91 # Offset: 1796
    00000706: 	pshufd	$0x55, %xmm3, %xmm0
    0000070b: 	movd	%xmm3, %ecx
    0000070f: 	addq	$0x4, %rsi
    00000713: 	addq	$0x960, %rdx
    0000071a: 	movd	%xmm0, %eax
    0000071e: 	movdqa	%xmm3, %xmm0
    00000722: 	punpckhdq	%xmm3, %xmm0
    00000726: 	addl	%ecx, %eax
    00000728: 	pshufd	$0xff, %xmm3, %xmm3
    0000072d: 	movd	%xmm0, %ecx
    00000731: 	addl	%ecx, %eax
    00000733: 	movd	%xmm3, %ecx
    00000737: 	addl	%ecx, %eax
    00000739: 	movl	%eax, -0x4(%rsi)
    0000073c: 	cmpq	0xa8(%rsp), %rdx
    00000744: 	jne	.Ltmp92 # Offset: 1860
    0000074a: 	xorl	%eax, %eax
.Ltmp94:
    0000074c: 	movq	0x58(%rsp), %rdi
    00000751: 	movq	0x80(%rsp), %rbx
    00000759: 	movl	(%rdi,%rax,4), %edi
    0000075c: 	cmpl	%edi, (%rbx,%rax,4)
    0000075f: 	jne	.Ltmp93 # Offset: 1887
    00000765: 	addq	$0x1, %rax
    00000769: 	cmpq	$0x320, %rax
    0000076f: 	jne	.Ltmp94 # Offset: 1903
.Ltmp210:
    00000771: 	movq	0x58(%rsp), %rsi
    00000776: 	movq	$0x0, (%rsi)
    0000077d: 	movq	0x88(%rsp), %rax
    00000785: 	movq	%rsi, %rcx
    00000788: 	movq	$0x0, -0x10(%rax)
    00000790: 	movq	0x90(%rsp), %rdi
    00000798: 	xorl	%eax, %eax
    0000079a: 	andq	$-0x8, %rdi
    0000079e: 	subq	%rdi, %rcx
    000007a1: 	addl	$0xc80, %ecx
    000007a7: 	shrl	$0x3, %ecx
    000007aa: 	rep		stosq	%rax, %es:(%rdi)
    000007ad: 	movq	0x28(%rsp), %rdx
.Ltmp96:
    000007b2: 	movd	(%rsi), %xmm4
    000007b6: 	xorl	%eax, %eax
    000007b8: 	pxor	%xmm3, %xmm3
    000007bc: 	nopl	(%rax) # Size: 4
.Ltmp95:
    000007c0: 	movdqu	(%r14,%rax), %xmm0
    000007c6: 	movdqu	(%rdx,%rax), %xmm2
    000007cb: 	movdqu	(%r14,%rax), %xmm1
    000007d1: 	movdqu	(%rdx,%rax), %xmm5
    000007d6: 	psrlq	$0x20, %xmm2
    000007db: 	psrlq	$0x20, %xmm0
    000007e0: 	movdqu	0x10(%rdx,%rax), %xmm6
    000007e6: 	pmuludq	%xmm2, %xmm0
    000007ea: 	pmuludq	%xmm5, %xmm1
    000007ee: 	movdqu	0x10(%rdx,%rax), %xmm2
    000007f4: 	psrlq	$0x20, %xmm2
    000007f9: 	pshufd	$0x8, %xmm0, %xmm0
    000007fe: 	pshufd	$0x8, %xmm1, %xmm1
    00000803: 	punpckldq	%xmm0, %xmm1
    00000807: 	movdqu	0x10(%r14,%rax), %xmm0
    0000080e: 	paddd	%xmm1, %xmm4
    00000812: 	movdqu	0x10(%r14,%rax), %xmm1
    00000819: 	addq	$0x20, %rax
    0000081d: 	psrlq	$0x20, %xmm0
    00000822: 	pmuludq	%xmm6, %xmm1
    00000826: 	pmuludq	%xmm2, %xmm0
    0000082a: 	pshufd	$0x8, %xmm1, %xmm1
    0000082f: 	pshufd	$0x8, %xmm0, %xmm0
    00000834: 	punpckldq	%xmm0, %xmm1
    00000838: 	paddd	%xmm1, %xmm3
    0000083c: 	cmpq	$0x960, %rax
    00000842: 	jne	.Ltmp95 # Offset: 2114
    00000848: 	pshufd	$0x55, %xmm4, %xmm0
    0000084d: 	movd	%xmm4, %ecx
    00000851: 	addq	$0x4, %rsi
    00000855: 	addq	$0x960, %rdx
    0000085c: 	movd	%xmm0, %eax
    00000860: 	movdqa	%xmm4, %xmm0
    00000864: 	punpckhdq	%xmm4, %xmm0
    00000868: 	addl	%ecx, %eax
    0000086a: 	pshufd	$0xff, %xmm4, %xmm4
    0000086f: 	movd	%xmm0, %ecx
    00000873: 	pshufd	$0x55, %xmm3, %xmm0
    00000878: 	addl	%ecx, %eax
    0000087a: 	movd	%xmm4, %ecx
    0000087e: 	addl	%ecx, %eax
    00000880: 	movd	%xmm3, %ecx
    00000884: 	addl	%ecx, %eax
    00000886: 	movd	%xmm0, %ecx
    0000088a: 	movdqa	%xmm3, %xmm0
    0000088e: 	punpckhdq	%xmm3, %xmm0
    00000892: 	addl	%ecx, %eax
    00000894: 	pshufd	$0xff, %xmm3, %xmm3
    00000899: 	movd	%xmm0, %ecx
    0000089d: 	addl	%ecx, %eax
    0000089f: 	movd	%xmm3, %ecx
    000008a3: 	addl	%ecx, %eax
    000008a5: 	movl	%eax, -0x4(%rsi)
    000008a8: 	cmpq	0xa8(%rsp), %rdx
    000008b0: 	jne	.Ltmp96 # Offset: 2224
    000008b6: 	xorl	%eax, %eax
.Ltmp98:
    000008b8: 	movq	0x58(%rsp), %rdi
    000008bd: 	movq	0x80(%rsp), %rbx
    000008c5: 	movl	(%rdi,%rax,4), %edi
    000008c8: 	cmpl	%edi, (%rbx,%rax,4)
    000008cb: 	jne	.Ltmp97 # Offset: 2251
    000008d1: 	addq	$0x1, %rax
    000008d5: 	cmpq	$0x320, %rax
    000008db: 	jne	.Ltmp98 # Offset: 2267
.Ltmp209:
    000008dd: 	movq	0x58(%rsp), %rsi
    000008e2: 	movq	$0x0, (%rsi)
    000008e9: 	movq	0x88(%rsp), %rax
    000008f1: 	movq	%rsi, %rcx
    000008f4: 	movq	$0x0, -0x10(%rax)
    000008fc: 	movq	0x90(%rsp), %rdi
    00000904: 	xorl	%eax, %eax
    00000906: 	andq	$-0x8, %rdi
    0000090a: 	subq	%rdi, %rcx
    0000090d: 	addl	$0xc80, %ecx
    00000913: 	shrl	$0x3, %ecx
    00000916: 	rep		stosq	%rax, %es:(%rdi)
    00000919: 	movq	0x28(%rsp), %rdx
.Ltmp100:
    0000091e: 	movd	(%rsi), %xmm4
    00000922: 	xorl	%eax, %eax
    00000924: 	pxor	%xmm3, %xmm3
    00000928: 	nopl	(%rax,%rax) # Size: 8
.Ltmp99:
    00000930: 	movdqu	(%r14,%rax), %xmm0
    00000936: 	movdqu	(%rdx,%rax), %xmm2
    0000093b: 	movdqu	(%r14,%rax), %xmm1
    00000941: 	movdqu	(%rdx,%rax), %xmm5
    00000946: 	psrlq	$0x20, %xmm2
    0000094b: 	psrlq	$0x20, %xmm0
    00000950: 	movdqu	0x10(%rdx,%rax), %xmm6
    00000956: 	pmuludq	%xmm2, %xmm0
    0000095a: 	pmuludq	%xmm5, %xmm1
    0000095e: 	movdqu	0x10(%rdx,%rax), %xmm2
    00000964: 	psrlq	$0x20, %xmm2
    00000969: 	pshufd	$0x8, %xmm0, %xmm0
    0000096e: 	pshufd	$0x8, %xmm1, %xmm1
    00000973: 	punpckldq	%xmm0, %xmm1
    00000977: 	movdqu	0x10(%r14,%rax), %xmm0
    0000097e: 	paddd	%xmm1, %xmm4
    00000982: 	movdqu	0x10(%r14,%rax), %xmm1
    00000989: 	addq	$0x20, %rax
    0000098d: 	psrlq	$0x20, %xmm0
    00000992: 	pmuludq	%xmm6, %xmm1
    00000996: 	pmuludq	%xmm2, %xmm0
    0000099a: 	pshufd	$0x8, %xmm1, %xmm1
    0000099f: 	pshufd	$0x8, %xmm0, %xmm0
    000009a4: 	punpckldq	%xmm0, %xmm1
    000009a8: 	paddd	%xmm1, %xmm3
    000009ac: 	cmpq	$0x960, %rax
    000009b2: 	jne	.Ltmp99 # Offset: 2482
    000009b8: 	pshufd	$0x55, %xmm4, %xmm0
    000009bd: 	movd	%xmm4, %ecx
    000009c1: 	addq	$0x4, %rsi
    000009c5: 	addq	$0x960, %rdx
    000009cc: 	movd	%xmm0, %eax
    000009d0: 	movdqa	%xmm4, %xmm0
    000009d4: 	punpckhdq	%xmm4, %xmm0
    000009d8: 	addl	%ecx, %eax
    000009da: 	pshufd	$0xff, %xmm4, %xmm4
    000009df: 	movd	%xmm0, %ecx
    000009e3: 	pshufd	$0x55, %xmm3, %xmm0
    000009e8: 	addl	%ecx, %eax
    000009ea: 	movd	%xmm4, %ecx
    000009ee: 	addl	%ecx, %eax
    000009f0: 	movd	%xmm3, %ecx
    000009f4: 	addl	%ecx, %eax
    000009f6: 	movd	%xmm0, %ecx
    000009fa: 	movdqa	%xmm3, %xmm0
    000009fe: 	punpckhdq	%xmm3, %xmm0
    00000a02: 	addl	%ecx, %eax
    00000a04: 	pshufd	$0xff, %xmm3, %xmm3
    00000a09: 	movd	%xmm0, %ecx
    00000a0d: 	addl	%ecx, %eax
    00000a0f: 	movd	%xmm3, %ecx
    00000a13: 	addl	%ecx, %eax
    00000a15: 	movl	%eax, -0x4(%rsi)
    00000a18: 	cmpq	%rdx, 0xa8(%rsp)
    00000a20: 	jne	.Ltmp100 # Offset: 2592
    00000a26: 	xorl	%eax, %eax
.Ltmp102:
    00000a28: 	movq	0x58(%rsp), %rdi
    00000a2d: 	movq	0x80(%rsp), %rbx
    00000a35: 	movl	(%rdi,%rax,4), %edi
    00000a38: 	cmpl	%edi, (%rbx,%rax,4)
    00000a3b: 	jne	.Ltmp101 # Offset: 2619
    00000a41: 	addq	$0x1, %rax
    00000a45: 	cmpq	$0x320, %rax
    00000a4b: 	jne	.Ltmp102 # Offset: 2635
.Ltmp208:
    00000a4d: 	movq	0x58(%rsp), %rax
    00000a52: 	xorl	%r8d, %r8d
    00000a55: 	movq	$0x0, (%rax)
    00000a5c: 	movq	0x88(%rsp), %rbx
    00000a64: 	movq	$0x0, -0x10(%rbx)
    00000a6c: 	movq	0x90(%rsp), %rdi
    00000a74: 	andq	$-0x8, %rdi
    00000a78: 	subq	%rdi, %rax
    00000a7b: 	movq	%rax, %rcx
    00000a7e: 	xorl	%eax, %eax
    00000a80: 	addl	$0xc80, %ecx
    00000a86: 	shrl	$0x3, %ecx
    00000a89: 	rep		stosq	%rax, %es:(%rdi)
    00000a8c: 	movq	0xa8(%rsp), %rdi
.Ltmp104:
    00000a94: 	movl	(%r14,%r8,4), %ecx
    00000a98: 	movq	0x58(%rsp), %rax
    00000a9d: 	leaq	-0x1d4c00(%rdi), %rdx
    00000aa4: 	nopl	(%rax) # Size: 4
.Ltmp103:
    00000aa8: 	movl	(%rdx), %esi
    00000aaa: 	addq	$0x2580, %rdx
    00000ab1: 	imull	%ecx, %esi
    00000ab4: 	addl	%esi, (%rax)
    00000ab6: 	movl	-0x1c20(%rdx), %esi
    00000abc: 	imull	%ecx, %esi
    00000abf: 	addl	%esi, 0x4(%rax)
    00000ac2: 	movl	-0x12c0(%rdx), %esi
    00000ac8: 	imull	%ecx, %esi
    00000acb: 	addl	%esi, 0x8(%rax)
    00000ace: 	movl	-0x960(%rdx), %esi
    00000ad4: 	imull	%ecx, %esi
    00000ad7: 	addl	%esi, 0xc(%rax)
    00000ada: 	addq	$0x10, %rax
    00000ade: 	cmpq	%rdi, %rdx
    00000ae1: 	jne	.Ltmp103 # Offset: 2785
    00000ae3: 	addq	$0x1, %r8
    00000ae7: 	leaq	0x4(%rdx), %rdi
    00000aeb: 	cmpq	$0x258, %r8
    00000af2: 	jne	.Ltmp104 # Offset: 2802
    00000af4: 	xorl	%eax, %eax
.Ltmp106:
    00000af6: 	movq	0x58(%rsp), %rdi
    00000afb: 	movq	0x80(%rsp), %rbx
    00000b03: 	movl	(%rdi,%rax,4), %edi
    00000b06: 	cmpl	%edi, (%rbx,%rax,4)
    00000b09: 	jne	.Ltmp105 # Offset: 2825
    00000b0f: 	addq	$0x1, %rax
    00000b13: 	cmpq	$0x320, %rax
    00000b19: 	jne	.Ltmp106 # Offset: 2841
.Ltmp207:
    00000b1b: 	movq	0x58(%rsp), %rsi
    00000b20: 	movq	$0x0, (%rsi)
    00000b27: 	movq	0x88(%rsp), %rax
    00000b2f: 	movq	%rsi, %rcx
    00000b32: 	movq	$0x0, -0x10(%rax)
    00000b3a: 	movq	0x90(%rsp), %rdi
    00000b42: 	xorl	%eax, %eax
    00000b44: 	andq	$-0x8, %rdi
    00000b48: 	subq	%rdi, %rcx
    00000b4b: 	addl	$0xc80, %ecx
    00000b51: 	shrl	$0x3, %ecx
    00000b54: 	rep		stosq	%rax, %es:(%rdi)
    00000b57: 	movq	%r14, %rdi
    00000b5a: 	movq	0x28(%rsp), %rdx
    00000b5f: 	callq	"_ZN22matvecmul_JI_unrolled1IiEclEPKiPiS2_ii.constprop.0/1" # Offset: 2911
    00000b64: 	xorl	%eax, %eax
.Ltmp108:
    00000b66: 	movq	0x58(%rsp), %rdi
    00000b6b: 	movq	0x80(%rsp), %rbx
    00000b73: 	movl	(%rdi,%rax,4), %edi
    00000b76: 	cmpl	%edi, (%rbx,%rax,4)
    00000b79: 	jne	.Ltmp107 # Offset: 2937
    00000b7f: 	addq	$0x1, %rax
    00000b83: 	cmpq	$0x320, %rax
    00000b89: 	jne	.Ltmp108 # Offset: 2953
.Ltmp206:
    00000b8b: 	movq	0x58(%rsp), %rsi
    00000b90: 	movq	$0x0, (%rsi)
    00000b97: 	movq	0x88(%rsp), %rax
    00000b9f: 	movq	%rsi, %rcx
    00000ba2: 	movq	$0x0, -0x10(%rax)
    00000baa: 	movq	0x90(%rsp), %rdi
    00000bb2: 	xorl	%eax, %eax
    00000bb4: 	andq	$-0x8, %rdi
    00000bb8: 	subq	%rdi, %rcx
    00000bbb: 	addl	$0xc80, %ecx
    00000bc1: 	shrl	$0x3, %ecx
    00000bc4: 	rep		stosq	%rax, %es:(%rdi)
    00000bc7: 	movq	%r14, %rdi
    00000bca: 	movq	0x28(%rsp), %rdx
    00000bcf: 	callq	"_ZN22matvecmul_JI_unrolled2IiEclEPKiPiS2_ii.constprop.0/1" # Offset: 3023
    00000bd4: 	xorl	%eax, %eax
.Ltmp110:
    00000bd6: 	movq	0x58(%rsp), %rdi
    00000bdb: 	movq	0x80(%rsp), %rbx
    00000be3: 	movl	(%rdi,%rax,4), %edi
    00000be6: 	cmpl	%edi, (%rbx,%rax,4)
    00000be9: 	jne	.Ltmp109 # Offset: 3049
    00000bef: 	addq	$0x1, %rax
    00000bf3: 	cmpq	$0x320, %rax
    00000bf9: 	jne	.Ltmp110 # Offset: 3065
.Ltmp205:
    00000bfb: 	movq	0x58(%rsp), %rbp
    00000c00: 	movq	$0x0, (%rbp)
    00000c08: 	movq	%rbp, %rcx
    00000c0b: 	leaq	0x4(%rbp), %rbx
    00000c0f: 	movq	%rbp, %r10
    00000c12: 	movq	0x88(%rsp), %rax
    00000c1a: 	movq	$0x0, -0x10(%rax)
    00000c22: 	movq	0x90(%rsp), %rdi
    00000c2a: 	xorl	%eax, %eax
    00000c2c: 	andq	$-0x8, %rdi
    00000c30: 	subq	%rdi, %rcx
    00000c33: 	addl	$0xc80, %ecx
    00000c39: 	shrl	$0x3, %ecx
    00000c3c: 	rep		stosq	%rax, %es:(%rdi)
    00000c3f: 	movq	%rbx, 0xa0(%rsp)
    00000c47: 	movq	0x28(%rsp), %r13
.Ltmp116:
    00000c4c: 	leal	0x50(%rax), %edx
    00000c4f: 	leaq	0x50(%rax), %r11
    00000c53: 	leaq	0x140(%r10), %rcx
    00000c5a: 	cmpl	%eax, %edx
    00000c5c: 	jle	.Ltmp111 # Offset: 3164
    00000c62: 	movq	0xa0(%rsp), %rdi
    00000c6a: 	leaq	(%rbp,%r11,4), %r9
    00000c6f: 	leaq	(%rbp,%rax,4), %rbx
    00000c74: 	movq	%r13, %rsi
    00000c77: 	leaq	0x140(%r10), %rcx
    00000c7e: 	leaq	0x13c(%rdi,%rax,4), %r8
    00000c86: 	xorl	%edi, %edi
    00000c88: 	nopl	(%rax,%rax) # Size: 8
.Ltmp115:
    00000c90: 	leaq	0x2e4a4(%rsi), %rdx
    00000c97: 	movl	(%r14,%rdi,4), %eax
    00000c9b: 	cmpq	%r10, %rdx
    00000c9e: 	jbe	.Ltmp112 # Offset: 3230
    00000ca0: 	movq	%rsi, %r12
    00000ca3: 	movq	%rbx, %rdx
    00000ca6: 	cmpq	%rsi, %r9
    00000ca9: 	ja	.Ltmp113 # Offset: 3241
.Ltmp112:
    00000caf: 	movd	%eax, %xmm4
    00000cb3: 	movq	%r10, %rdx
    00000cb6: 	movq	%rsi, %rax
    00000cb9: 	pshufd	$0x0, %xmm4, %xmm2
    00000cbe: 	movdqa	%xmm2, %xmm3
    00000cc2: 	psrlq	$0x20, %xmm3
    00000cc7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp114:
    00000cd0: 	movd	0x12c0(%rax), %xmm1
    00000cd8: 	movd	(%rax), %xmm0
    00000cdc: 	addq	$0x10, %rdx
    00000ce0: 	addq	$0x2580, %rax
    00000ce6: 	movd	-0x960(%rax), %xmm5
    00000cee: 	movd	-0x1c20(%rax), %xmm6
    00000cf6: 	punpckldq	%xmm5, %xmm1
    00000cfa: 	punpckldq	%xmm6, %xmm0
    00000cfe: 	punpcklqdq	%xmm1, %xmm0
    00000d02: 	movdqa	%xmm0, %xmm1
    00000d06: 	psrlq	$0x20, %xmm0
    00000d0b: 	pmuludq	%xmm2, %xmm1
    00000d0f: 	pmuludq	%xmm3, %xmm0
    00000d13: 	pshufd	$0x8, %xmm1, %xmm1
    00000d18: 	pshufd	$0x8, %xmm0, %xmm0
    00000d1d: 	punpckldq	%xmm0, %xmm1
    00000d21: 	movdqu	-0x10(%rdx), %xmm0
    00000d26: 	paddd	%xmm1, %xmm0
    00000d2a: 	movups	%xmm0, -0x10(%rdx)
    00000d2e: 	cmpq	%rcx, %rdx
    00000d31: 	jne	.Ltmp114 # Offset: 3377
.Ltmp187:
    00000d33: 	addq	$0x1, %rdi
    00000d37: 	addq	$0x4, %rsi
    00000d3b: 	cmpq	$0x258, %rdi
    00000d42: 	jne	.Ltmp115 # Offset: 3394
.Ltmp111:
    00000d48: 	movq	%rcx, %r10
    00000d4b: 	movq	%r11, %rax
    00000d4e: 	addq	$0x2ee00, %r13
    00000d55: 	cmpq	$0x320, %r11
    00000d5c: 	jne	.Ltmp116 # Offset: 3420
    00000d62: 	xorl	%eax, %eax
.Ltmp118:
    00000d64: 	movq	0x58(%rsp), %rdi
    00000d69: 	movq	0x80(%rsp), %rbx
    00000d71: 	movl	(%rdi,%rax,4), %edi
    00000d74: 	cmpl	%edi, (%rbx,%rax,4)
    00000d77: 	jne	.Ltmp117 # Offset: 3447
    00000d7d: 	addq	$0x1, %rax
    00000d81: 	cmpq	$0x320, %rax
    00000d87: 	jne	.Ltmp118 # Offset: 3463
.Ltmp204:
    00000d89: 	movq	0x58(%rsp), %rax
    00000d8e: 	xorl	%r12d, %r12d
    00000d91: 	xorl	%r15d, %r15d
    00000d94: 	movq	$0x0, (%rax)
    00000d9b: 	movq	0x88(%rsp), %rbx
    00000da3: 	movq	$0x0, -0x10(%rbx)
    00000dab: 	movq	0x90(%rsp), %rdi
    00000db3: 	andq	$-0x8, %rdi
    00000db7: 	subq	%rdi, %rax
    00000dba: 	movq	%rax, %rcx
    00000dbd: 	xorl	%eax, %eax
    00000dbf: 	addl	$0xc80, %ecx
    00000dc5: 	shrl	$0x3, %ecx
    00000dc8: 	rep		stosq	%rax, %es:(%rdi)
    00000dcb: 	movq	0x28(%rsp), %r13
.Ltmp123:
    00000dd0: 	movq	%r12, %rbp
    00000dd3: 	addl	$0x8, %r15d
    00000dd7: 	movq	%r14, %rsi
    00000dda: 	xorl	%r11d, %r11d
    00000ddd: 	movq	0xa0(%rsp), %rbx
    00000de5: 	leaq	0x7(,%r12,8), %rax
    00000ded: 	shlq	$0x5, %rbp
    00000df1: 	addq	0x58(%rsp), %rbp
    00000df6: 	leaq	(%rbx,%rax,4), %r10
    00000dfa: 	movq	%r13, %rbx
    00000dfd: 	nopl	(%rax) # Size: 3
.Ltmp122:
    00000e00: 	leal	0x12c(%r11), %r9d
    00000e07: 	movl	%r11d, %r8d
    00000e0a: 	movq	%rbx, %rdx
    00000e0d: 	movq	%rbp, %rcx
.Ltmp121:
    00000e10: 	movl	(%rcx), %edi
    00000e12: 	cmpl	%r9d, %r8d
    00000e15: 	jge	.Ltmp119 # Offset: 3605
    00000e17: 	xorl	%eax, %eax
    00000e19: 	pxor	%xmm3, %xmm3
    00000e1d: 	nopl	(%rax) # Size: 3
.Ltmp120:
    00000e20: 	movdqu	(%rsi,%rax), %xmm0
    00000e25: 	movdqu	(%rdx,%rax), %xmm2
    00000e2a: 	movdqu	(%rsi,%rax), %xmm1
    00000e2f: 	movdqu	(%rdx,%rax), %xmm4
    00000e34: 	addq	$0x10, %rax
    00000e38: 	psrlq	$0x20, %xmm0
    00000e3d: 	psrlq	$0x20, %xmm2
    00000e42: 	pmuludq	%xmm4, %xmm1
    00000e46: 	pmuludq	%xmm2, %xmm0
    00000e4a: 	pshufd	$0x8, %xmm1, %xmm1
    00000e4f: 	pshufd	$0x8, %xmm0, %xmm0
    00000e54: 	punpckldq	%xmm0, %xmm1
    00000e58: 	paddd	%xmm1, %xmm3
    00000e5c: 	cmpq	$0x4b0, %rax
    00000e62: 	jne	.Ltmp120 # Offset: 3682
    00000e64: 	movdqa	%xmm3, %xmm0
    00000e68: 	psrldq	$0x8, %xmm0
    00000e6d: 	paddd	%xmm0, %xmm3
    00000e71: 	movdqa	%xmm3, %xmm0
    00000e75: 	psrldq	$0x4, %xmm0
    00000e7a: 	paddd	%xmm0, %xmm3
    00000e7e: 	movd	%xmm3, %eax
    00000e82: 	addl	%eax, %edi
.Ltmp119:
    00000e84: 	movl	%edi, (%rcx)
    00000e86: 	addq	$0x4, %rcx
    00000e8a: 	addq	$0x960, %rdx
    00000e91: 	cmpq	%rcx, %r10
    00000e94: 	jne	.Ltmp121 # Offset: 3732
    00000e9a: 	addq	$0x12c, %r11
    00000ea1: 	addq	$0x4b0, %rbx
    00000ea8: 	addq	$0x4b0, %rsi
    00000eaf: 	cmpq	$0x258, %r11
    00000eb6: 	jne	.Ltmp122 # Offset: 3766
    00000ebc: 	addq	$0x1, %r12
    00000ec0: 	addq	$0x4b00, %r13
    00000ec7: 	cmpl	$0x320, %r15d
    00000ece: 	jne	.Ltmp123 # Offset: 3790
    00000ed4: 	xorl	%eax, %eax
.Ltmp125:
    00000ed6: 	movq	0x58(%rsp), %rdi
    00000edb: 	movq	0x80(%rsp), %rbx
    00000ee3: 	movl	(%rdi,%rax,4), %edi
    00000ee6: 	cmpl	%edi, (%rbx,%rax,4)
    00000ee9: 	jne	.Ltmp124 # Offset: 3817
    00000eef: 	addq	$0x1, %rax
    00000ef3: 	cmpq	$0x320, %rax
    00000ef9: 	jne	.Ltmp125 # Offset: 3833
.Ltmp203:
    00000efb: 	movq	0x58(%rsp), %rbx
    00000f00: 	movq	$0x0, (%rbx)
    00000f07: 	movq	0x88(%rsp), %rax
    00000f0f: 	movq	%rbx, %rcx
    00000f12: 	movq	$0x0, -0x10(%rax)
    00000f1a: 	movq	0x90(%rsp), %rdi
    00000f22: 	xorl	%eax, %eax
    00000f24: 	andq	$-0x8, %rdi
    00000f28: 	subq	%rdi, %rcx
    00000f2b: 	addl	$0xc80, %ecx
    00000f31: 	shrl	$0x3, %ecx
    00000f34: 	rep		stosq	%rax, %es:(%rdi)
    00000f37: 	movq	%rbx, %rcx
    00000f3a: 	movq	0x28(%rsp), %rdx
.Ltmp127:
    00000f3f: 	movl	(%rcx), %esi
    00000f41: 	xorl	%eax, %eax
    00000f43: 	pxor	%xmm3, %xmm3
    00000f47: 	nopw	(%rax,%rax) # Size: 9
.Ltmp126:
    00000f50: 	movdqu	(%r14,%rax), %xmm0
    00000f56: 	movdqu	(%rdx,%rax), %xmm2
    00000f5b: 	movdqu	(%r14,%rax), %xmm1
    00000f61: 	movdqu	(%rdx,%rax), %xmm6
    00000f66: 	addq	$0x10, %rax
    00000f6a: 	psrlq	$0x20, %xmm0
    00000f6f: 	psrlq	$0x20, %xmm2
    00000f74: 	pmuludq	%xmm6, %xmm1
    00000f78: 	pmuludq	%xmm2, %xmm0
    00000f7c: 	pshufd	$0x8, %xmm1, %xmm1
    00000f81: 	pshufd	$0x8, %xmm0, %xmm0
    00000f86: 	punpckldq	%xmm0, %xmm1
    00000f8a: 	paddd	%xmm1, %xmm3
    00000f8e: 	cmpq	$0x960, %rax
    00000f94: 	jne	.Ltmp126 # Offset: 3988
    00000f96: 	movdqa	%xmm3, %xmm0
    00000f9a: 	addq	$0x4, %rcx
    00000f9e: 	addq	$0x960, %rdx
    00000fa5: 	psrldq	$0x8, %xmm0
    00000faa: 	paddd	%xmm0, %xmm3
    00000fae: 	movdqa	%xmm3, %xmm0
    00000fb2: 	psrldq	$0x4, %xmm0
    00000fb7: 	paddd	%xmm0, %xmm3
    00000fbb: 	movd	%xmm3, %eax
    00000fbf: 	addl	%esi, %eax
    00000fc1: 	movl	%eax, -0x4(%rcx)
    00000fc4: 	cmpq	0xa8(%rsp), %rdx
    00000fcc: 	jne	.Ltmp127 # Offset: 4044
    00000fd2: 	xorl	%eax, %eax
.Ltmp129:
    00000fd4: 	movq	0x58(%rsp), %rdi
    00000fd9: 	movq	0x80(%rsp), %rbx
    00000fe1: 	movl	(%rdi,%rax,4), %edi
    00000fe4: 	cmpl	%edi, (%rbx,%rax,4)
    00000fe7: 	jne	.Ltmp128 # Offset: 4071
    00000fed: 	addq	$0x1, %rax
    00000ff1: 	cmpq	$0x320, %rax
    00000ff7: 	jne	.Ltmp129 # Offset: 4087
.Ltmp202:
    00000ff9: 	movq	0x58(%rsp), %rax
    00000ffe: 	movq	$0x0, (%rax)
    00001005: 	movq	0x88(%rsp), %rbx
    0000100d: 	movq	$0x0, -0x10(%rbx)
    00001015: 	movq	0x90(%rsp), %rdi
    0000101d: 	andq	$-0x8, %rdi
    00001021: 	subq	%rdi, %rax
    00001024: 	movq	%rax, %rcx
    00001027: 	xorl	%eax, %eax
    00001029: 	addl	$0xc80, %ecx
    0000102f: 	shrl	$0x3, %ecx
    00001032: 	rep		stosq	%rax, %es:(%rdi)
    00001035: 	movq	%r14, 0x8(%rsp)
    0000103a: 	movq	$0x0, 0x98(%rsp)
    00001046: 	movq	0x28(%rsp), %r12
.Ltmp137:
    0000104b: 	movq	0x98(%rsp), %rax
    00001053: 	movl	%eax, %ebx
    00001055: 	addl	$0x12c, %ebx
    0000105b: 	movl	%ebx, 0x10(%rsp)
    0000105f: 	cmpl	%eax, %ebx
    00001061: 	jle	.Ltmp130 # Offset: 4193
    00001067: 	leaq	(%r12,%rax,4), %rax
    0000106b: 	movq	0x58(%rsp), %r14
    00001070: 	movq	$0x0, 0x60(%rsp)
    00001079: 	movq	%rax, 0x78(%rsp)
    0000107e: 	nop # Size: 2
.Ltmp136:
    00001080: 	movq	0x60(%rsp), %rbx
    00001085: 	movl	$0x320, %eax
    0000108a: 	leal	0x4c(%rbx), %r10d
    0000108e: 	cmpl	%eax, %r10d
    00001091: 	cmovgl	%eax, %r10d
    00001095: 	cmpl	%ebx, %r10d
    00001098: 	jle	.Ltmp131 # Offset: 4248
    0000109e: 	movl	%r10d, %r11d
    000010a1: 	movq	0x58(%rsp), %rdi
    000010a6: 	movq	%rbx, %rsi
    000010a9: 	subl	%ebx, %r11d
    000010ac: 	movl	%r11d, %eax
    000010af: 	movl	%r11d, 0x30(%rsp)
    000010b4: 	imulq	$0x960, %rax, %rcx
    000010bb: 	addq	%rbx, %rax
    000010be: 	leaq	(%rdi,%rax,4), %rax
    000010c2: 	movq	%rax, (%rsp)
    000010c6: 	movl	%r11d, %eax
    000010c9: 	shrl	$0x2, %eax
    000010cc: 	leaq	-0x95c(%rcx), %r13
    000010d3: 	subl	$0x1, %eax
    000010d6: 	shlq	$0x4, %rax
    000010da: 	leaq	0x10(%r14,%rax), %r8
    000010df: 	movl	%r11d, %eax
    000010e2: 	andl	$-0x4, %eax
    000010e5: 	movl	%eax, 0x20(%rsp)
    000010e9: 	addl	%ebx, %eax
    000010eb: 	imull	$0x258, %eax, %r15d
    000010f2: 	movslq	%eax, %rdx
    000010f5: 	leaq	(%rdi,%rdx,4), %rbx
    000010f9: 	leal	0x1(%rax), %edx
    000010fc: 	addl	$0x2, %eax
    000010ff: 	movl	%edx, 0x38(%rsp)
    00001103: 	movslq	%edx, %rdx
    00001106: 	leaq	(%rdi,%rdx,4), %rbp
    0000110a: 	movl	%r15d, 0x40(%rsp)
    0000110f: 	movl	%r15d, %edx
    00001112: 	leal	0x258(%r15), %r15d
    00001119: 	movl	%eax, 0x48(%rsp)
    0000111d: 	cltq
    0000111f: 	movl	%r15d, 0x50(%rsp)
    00001124: 	leaq	(%rdi,%rax,4), %r15
    00001128: 	leal	0x4b0(%rdx), %eax
    0000112e: 	movl	%eax, 0x68(%rsp)
    00001132: 	leaq	(%rdi,%rsi,4), %rax
    00001136: 	movq	0xa0(%rsp), %rdi
    0000113e: 	movq	%rax, 0x70(%rsp)
    00001143: 	leal	-0x1(%r11), %eax
    00001147: 	movq	%r15, %r11
    0000114a: 	movl	%eax, 0x18(%rsp)
    0000114e: 	addq	%rsi, %rax
    00001151: 	movq	0x98(%rsp), %rsi
    00001159: 	leaq	(%rdi,%rax,4), %r9
    0000115d: 	movq	0x78(%rsp), %rdi
    00001162: 	nopw	(%rax,%rax) # Size: 6
.Ltmp135:
    00001168: 	movq	0x8(%rsp), %rax
    0000116d: 	movl	%esi, %r15d
    00001170: 	movl	(%rax,%rsi,4), %ecx
    00001173: 	leaq	(%r13,%rdi), %rax
    00001178: 	cmpq	%r14, %rax
    0000117b: 	setbe	%dl
    0000117e: 	cmpq	%rdi, (%rsp)
    00001182: 	setbe	%al
    00001185: 	orb	%dl, %al
    00001187: 	je	.Ltmp132 # Offset: 4487
    0000118d: 	cmpl	$0x3, 0x18(%rsp)
    00001192: 	jbe	.Ltmp132 # Offset: 4498
    00001198: 	movd	%ecx, %xmm4
    0000119c: 	movq	%rdi, %rax
    0000119f: 	movq	%r14, %rdx
    000011a2: 	pshufd	$0x0, %xmm4, %xmm2
    000011a7: 	movdqa	%xmm2, %xmm3
    000011ab: 	psrlq	$0x20, %xmm3
.Ltmp133:
    000011b0: 	movd	0x1c20(%rax), %xmm7
    000011b8: 	movd	0x12c0(%rax), %xmm1
    000011c0: 	addq	$0x10, %rdx
    000011c4: 	addq	$0x2580, %rax
    000011ca: 	movd	-0x2580(%rax), %xmm0
    000011d2: 	punpckldq	%xmm7, %xmm1
    000011d6: 	movd	-0x1c20(%rax), %xmm7
    000011de: 	punpckldq	%xmm7, %xmm0
    000011e2: 	punpcklqdq	%xmm1, %xmm0
    000011e6: 	movdqa	%xmm0, %xmm1
    000011ea: 	psrlq	$0x20, %xmm0
    000011ef: 	pmuludq	%xmm2, %xmm1
    000011f3: 	pmuludq	%xmm3, %xmm0
    000011f7: 	pshufd	$0x8, %xmm1, %xmm1
    000011fc: 	pshufd	$0x8, %xmm0, %xmm0
    00001201: 	punpckldq	%xmm0, %xmm1
    00001205: 	movdqu	-0x10(%rdx), %xmm0
    0000120a: 	paddd	%xmm1, %xmm0
    0000120e: 	movups	%xmm0, -0x10(%rdx)
    00001212: 	cmpq	%r8, %rdx
    00001215: 	jne	.Ltmp133 # Offset: 4629
    00001217: 	movl	0x30(%rsp), %edx
    0000121b: 	cmpl	%edx, 0x20(%rsp)
    0000121f: 	je	.Ltmp134 # Offset: 4639
    00001221: 	movl	0x40(%rsp), %eax
    00001225: 	addl	%r15d, %eax
    00001228: 	cltq
    0000122a: 	movl	(%r12,%rax,4), %edx
    0000122e: 	imull	%ecx, %edx
    00001231: 	addl	%edx, (%rbx)
    00001233: 	cmpl	%r10d, 0x38(%rsp)
    00001238: 	jge	.Ltmp134 # Offset: 4664
    0000123a: 	movl	0x50(%rsp), %eax
    0000123e: 	addl	%r15d, %eax
    00001241: 	cltq
    00001243: 	movl	(%r12,%rax,4), %edx
    00001247: 	imull	%ecx, %edx
    0000124a: 	addl	%edx, (%rbp)
    0000124d: 	cmpl	%r10d, 0x48(%rsp)
    00001252: 	jge	.Ltmp134 # Offset: 4690
    00001254: 	addl	0x68(%rsp), %r15d
    00001259: 	movslq	%r15d, %r15
    0000125c: 	imull	(%r12,%r15,4), %ecx
    00001261: 	addl	%ecx, (%r11)
.Ltmp134:
    00001264: 	addq	$0x1, %rsi
    00001268: 	addq	$0x4, %rdi
    0000126c: 	cmpl	%esi, 0x10(%rsp)
    00001270: 	jg	.Ltmp135 # Offset: 4720
.Ltmp131:
    00001276: 	addq	$0x4c, 0x60(%rsp)
    0000127c: 	movq	0x60(%rsp), %rax
    00001281: 	addq	$0x130, %r14
    00001288: 	addq	$0x2c880, 0x78(%rsp)
    00001291: 	cmpq	$0x344, %rax
    00001297: 	jne	.Ltmp136 # Offset: 4759
.Ltmp130:
    0000129d: 	addq	$0x12c, 0x98(%rsp)
    000012a9: 	movq	0x98(%rsp), %rax
    000012b1: 	cmpq	$0x258, %rax
    000012b7: 	jne	.Ltmp137 # Offset: 4791
    000012bd: 	movq	0x8(%rsp), %r14
    000012c2: 	xorl	%eax, %eax
.Ltmp139:
    000012c4: 	movq	0x58(%rsp), %rdi
    000012c9: 	movq	0x80(%rsp), %rbx
    000012d1: 	movl	(%rdi,%rax,4), %edi
    000012d4: 	cmpl	%edi, (%rbx,%rax,4)
    000012d7: 	jne	.Ltmp138 # Offset: 4823
    000012dd: 	addq	$0x1, %rax
    000012e1: 	cmpq	$0x320, %rax
    000012e7: 	jne	.Ltmp139 # Offset: 4839
.Ltmp201:
    000012e9: 	movq	0x58(%rsp), %rdx
    000012ee: 	movq	$0x0, (%rdx)
    000012f5: 	movq	%rdx, %rcx
    000012f8: 	movq	%rdx, %r15
    000012fb: 	movq	0x88(%rsp), %rax
    00001303: 	movq	$0x0, -0x10(%rax)
    0000130b: 	movq	0x90(%rsp), %rdi
    00001313: 	xorl	%eax, %eax
    00001315: 	andq	$-0x8, %rdi
    00001319: 	subq	%rdi, %rcx
    0000131c: 	addl	$0xc80, %ecx
    00001322: 	shrl	$0x3, %ecx
    00001325: 	rep		stosq	%rax, %es:(%rdi)
    00001328: 	movl	$0x4, 0x70(%rsp)
    00001330: 	movq	$0x0, 0x50(%rsp)
    00001339: 	movq	0x28(%rsp), %rbx
    0000133e: 	leaq	0x960(%rbx), %rax
    00001345: 	movq	%rax, 0xc8(%rsp)
    0000134d: 	movq	%rax, 0x78(%rsp)
    00001352: 	leaq	0x10(%rdx), %rax
    00001356: 	movq	%rax, 0x98(%rsp)
.Ltmp144:
    0000135e: 	movq	0x50(%rsp), %rax
    00001363: 	movl	0x70(%rsp), %edx
    00001367: 	movq	0x98(%rsp), %rdi
    0000136f: 	movq	0x78(%rsp), %r10
    00001374: 	leal	0x4d(%rax), %ecx
    00001377: 	leal	0x4c(%rdx), %ebp
    0000137a: 	movl	%eax, (%rsp)
    0000137d: 	cmpl	%ecx, %eax
    0000137f: 	movl	%ecx, 0x8(%rsp)
    00001383: 	movq	0x58(%rsp), %rcx
    00001388: 	leal	0x50(%rax), %r11d
    0000138c: 	cmovgel	%eax, %ebp
    0000138f: 	leaq	0x130(%rdi,%rax,4), %rdi
    00001397: 	xorl	%r8d, %r8d
    0000139a: 	imull	$0x258, %ebp, %edx
    000013a0: 	movslq	%ebp, %rax
    000013a3: 	leaq	(%rcx,%rax,4), %r12
    000013a7: 	leal	0x1(%rbp), %eax
    000013aa: 	movl	%eax, 0x10(%rsp)
    000013ae: 	cltq
    000013b0: 	leaq	(%rcx,%rax,4), %r13
    000013b4: 	leal	0x258(%rdx), %eax
    000013ba: 	movl	%edx, 0x18(%rsp)
    000013be: 	movl	%eax, 0x20(%rsp)
    000013c2: 	leal	0x2(%rbp), %eax
    000013c5: 	movl	%eax, 0x30(%rsp)
    000013c9: 	cltq
    000013cb: 	leaq	(%rcx,%rax,4), %rax
    000013cf: 	movq	%rax, 0x38(%rsp)
    000013d4: 	leal	0x4b0(%rdx), %eax
    000013da: 	movl	%eax, 0x40(%rsp)
    000013de: 	leal	0x3(%rbp), %eax
    000013e1: 	movl	%eax, 0x48(%rsp)
    000013e5: 	cltq
    000013e7: 	leaq	(%rcx,%rax,4), %rax
    000013eb: 	movq	%rax, 0x60(%rsp)
    000013f0: 	leal	0x708(%rdx), %eax
    000013f6: 	movl	%eax, 0x68(%rsp)
    000013fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp143:
    00001400: 	movl	(%r14,%r8,4), %ecx
    00001404: 	movl	0x8(%rsp), %edx
    00001408: 	movl	%r8d, %r9d
    0000140b: 	cmpl	%edx, (%rsp)
    0000140e: 	jge	.Ltmp140 # Offset: 5134
    00001410: 	movq	%r10, %rdx
    00001413: 	movq	%r15, %rax
    00001416: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp141:
    00001420: 	movl	-0x960(%rdx), %esi
    00001426: 	addq	$0x2580, %rdx
    0000142d: 	imull	%ecx, %esi
    00001430: 	addl	%esi, (%rax)
    00001432: 	movl	-0x2580(%rdx), %esi
    00001438: 	imull	%ecx, %esi
    0000143b: 	addl	%esi, 0x4(%rax)
    0000143e: 	movl	-0x1c20(%rdx), %esi
    00001444: 	imull	%ecx, %esi
    00001447: 	addl	%esi, 0x8(%rax)
    0000144a: 	movl	-0x12c0(%rdx), %esi
    00001450: 	imull	%ecx, %esi
    00001453: 	addl	%esi, 0xc(%rax)
    00001456: 	addq	$0x10, %rax
    0000145a: 	cmpq	%rax, %rdi
    0000145d: 	jne	.Ltmp141 # Offset: 5213
.Ltmp140:
    0000145f: 	cmpl	%ebp, %r11d
    00001462: 	jle	.Ltmp142 # Offset: 5218
    00001464: 	movl	0x18(%rsp), %eax
    00001468: 	addl	%r9d, %eax
    0000146b: 	cltq
    0000146d: 	movl	(%rbx,%rax,4), %edx
    00001470: 	imull	%ecx, %edx
    00001473: 	addl	%edx, (%r12)
    00001477: 	cmpl	%r11d, 0x10(%rsp)
    0000147c: 	jge	.Ltmp142 # Offset: 5244
    0000147e: 	movl	0x20(%rsp), %eax
    00001482: 	addl	%r9d, %eax
    00001485: 	cltq
    00001487: 	movl	(%rbx,%rax,4), %edx
    0000148a: 	imull	%ecx, %edx
    0000148d: 	addl	%edx, (%r13)
    00001491: 	cmpl	%r11d, 0x30(%rsp)
    00001496: 	jge	.Ltmp142 # Offset: 5270
    00001498: 	movl	0x40(%rsp), %eax
    0000149c: 	addl	%r9d, %eax
    0000149f: 	cltq
    000014a1: 	movl	(%rbx,%rax,4), %edx
    000014a4: 	imull	%ecx, %edx
    000014a7: 	movl	%edx, %eax
    000014a9: 	movq	0x38(%rsp), %rdx
    000014ae: 	addl	%eax, (%rdx)
    000014b0: 	cmpl	%r11d, 0x48(%rsp)
    000014b5: 	jge	.Ltmp142 # Offset: 5301
    000014b7: 	movl	0x68(%rsp), %eax
    000014bb: 	addl	%r9d, %eax
    000014be: 	cltq
    000014c0: 	imull	(%rbx,%rax,4), %ecx
    000014c4: 	movq	0x60(%rsp), %rax
    000014c9: 	addl	%ecx, (%rax)
.Ltmp142:
    000014cb: 	addq	$0x1, %r8
    000014cf: 	addq	$0x4, %r10
    000014d3: 	cmpq	$0x258, %r8
    000014da: 	jne	.Ltmp143 # Offset: 5338
    000014e0: 	addq	$0x50, 0x50(%rsp)
    000014e6: 	movq	0x50(%rsp), %rax
    000014eb: 	addq	$0x140, %r15
    000014f2: 	addl	$0x50, 0x70(%rsp)
    000014f7: 	addq	$0x2ee00, 0x78(%rsp)
    00001500: 	cmpq	$0x320, %rax
    00001506: 	jne	.Ltmp144 # Offset: 5382
    0000150c: 	xorl	%eax, %eax
.Ltmp146:
    0000150e: 	movq	0x58(%rsp), %rdi
    00001513: 	movq	0x80(%rsp), %rbx
    0000151b: 	movl	(%rdi,%rax,4), %edi
    0000151e: 	cmpl	%edi, (%rbx,%rax,4)
    00001521: 	jne	.Ltmp145 # Offset: 5409
    00001527: 	addq	$0x1, %rax
    0000152b: 	cmpq	$0x320, %rax
    00001531: 	jne	.Ltmp146 # Offset: 5425
.Ltmp200:
    00001533: 	movq	0x58(%rsp), %rbx
    00001538: 	movq	$0x0, (%rbx)
    0000153f: 	movq	0x88(%rsp), %rax
    00001547: 	movq	%rbx, %rcx
    0000154a: 	movq	$0x0, -0x10(%rax)
    00001552: 	movq	0x90(%rsp), %rdi
    0000155a: 	xorl	%eax, %eax
    0000155c: 	andq	$-0x8, %rdi
    00001560: 	subq	%rdi, %rcx
    00001563: 	addl	$0xc80, %ecx
    00001569: 	shrl	$0x3, %ecx
    0000156c: 	rep		stosq	%rax, %es:(%rdi)
    0000156f: 	movq	%rbx, %rcx
    00001572: 	movq	0x28(%rsp), %rdx
.Ltmp148:
    00001577: 	movd	(%rcx), %xmm3
    0000157b: 	xorl	%eax, %eax
    0000157d: 	nopl	(%rax) # Size: 3
.Ltmp147:
    00001580: 	movdqu	(%r14,%rax), %xmm0
    00001586: 	movdqu	(%rdx,%rax), %xmm2
    0000158b: 	movdqu	(%r14,%rax), %xmm1
    00001591: 	movdqu	(%rdx,%rax), %xmm4
    00001596: 	addq	$0x10, %rax
    0000159a: 	psrlq	$0x20, %xmm0
    0000159f: 	psrlq	$0x20, %xmm2
    000015a4: 	pmuludq	%xmm4, %xmm1
    000015a8: 	pmuludq	%xmm2, %xmm0
    000015ac: 	pshufd	$0x8, %xmm1, %xmm1
    000015b1: 	pshufd	$0x8, %xmm0, %xmm0
    000015b6: 	punpckldq	%xmm0, %xmm1
    000015ba: 	paddd	%xmm1, %xmm3
    000015be: 	cmpq	$0x960, %rax
    000015c4: 	jne	.Ltmp147 # Offset: 5572
    000015c6: 	pshufd	$0x55, %xmm3, %xmm0
    000015cb: 	movd	%xmm3, %esi
    000015cf: 	addq	$0x4, %rcx
    000015d3: 	addq	$0x960, %rdx
    000015da: 	movd	%xmm0, %eax
    000015de: 	movdqa	%xmm3, %xmm0
    000015e2: 	punpckhdq	%xmm3, %xmm0
    000015e6: 	addl	%esi, %eax
    000015e8: 	pshufd	$0xff, %xmm3, %xmm3
    000015ed: 	movd	%xmm0, %esi
    000015f1: 	addl	%esi, %eax
    000015f3: 	movd	%xmm3, %esi
    000015f7: 	addl	%esi, %eax
    000015f9: 	movl	%eax, -0x4(%rcx)
    000015fc: 	cmpq	0xa8(%rsp), %rdx
    00001604: 	jne	.Ltmp148 # Offset: 5636
    0000160a: 	xorl	%eax, %eax
.Ltmp150:
    0000160c: 	movq	0x58(%rsp), %rdi
    00001611: 	movq	0x80(%rsp), %rbx
    00001619: 	movl	(%rdi,%rax,4), %edi
    0000161c: 	cmpl	%edi, (%rbx,%rax,4)
    0000161f: 	jne	.Ltmp149 # Offset: 5663
    00001625: 	addq	$0x1, %rax
    00001629: 	cmpq	$0x320, %rax
    0000162f: 	jne	.Ltmp150 # Offset: 5679
.Ltmp199:
    00001631: 	movq	0x58(%rsp), %rbx
    00001636: 	movq	$0x0, (%rbx)
    0000163d: 	movq	0x88(%rsp), %rax
    00001645: 	movq	%rbx, %rcx
    00001648: 	movq	$0x0, -0x10(%rax)
    00001650: 	movq	0x90(%rsp), %rdi
    00001658: 	xorl	%eax, %eax
    0000165a: 	andq	$-0x8, %rdi
    0000165e: 	subq	%rdi, %rcx
    00001661: 	addl	$0xc80, %ecx
    00001667: 	shrl	$0x3, %ecx
    0000166a: 	rep		stosq	%rax, %es:(%rdi)
    0000166d: 	movq	%rbx, %rcx
    00001670: 	movq	0x28(%rsp), %rdx
.Ltmp152:
    00001675: 	movd	(%rcx), %xmm4
    00001679: 	xorl	%eax, %eax
    0000167b: 	pxor	%xmm3, %xmm3
    0000167f: 	nop # Size: 1
.Ltmp151:
    00001680: 	movdqu	(%r14,%rax), %xmm0
    00001686: 	movdqu	(%rdx,%rax), %xmm2
    0000168b: 	movdqu	(%r14,%rax), %xmm1
    00001691: 	movdqu	(%rdx,%rax), %xmm5
    00001696: 	psrlq	$0x20, %xmm2
    0000169b: 	psrlq	$0x20, %xmm0
    000016a0: 	movdqu	0x10(%rdx,%rax), %xmm6
    000016a6: 	pmuludq	%xmm2, %xmm0
    000016aa: 	pmuludq	%xmm5, %xmm1
    000016ae: 	movdqu	0x10(%rdx,%rax), %xmm2
    000016b4: 	psrlq	$0x20, %xmm2
    000016b9: 	pshufd	$0x8, %xmm0, %xmm0
    000016be: 	pshufd	$0x8, %xmm1, %xmm1
    000016c3: 	punpckldq	%xmm0, %xmm1
    000016c7: 	movdqu	0x10(%r14,%rax), %xmm0
    000016ce: 	paddd	%xmm1, %xmm4
    000016d2: 	movdqu	0x10(%r14,%rax), %xmm1
    000016d9: 	addq	$0x20, %rax
    000016dd: 	psrlq	$0x20, %xmm0
    000016e2: 	pmuludq	%xmm6, %xmm1
    000016e6: 	pmuludq	%xmm2, %xmm0
    000016ea: 	pshufd	$0x8, %xmm1, %xmm1
    000016ef: 	pshufd	$0x8, %xmm0, %xmm0
    000016f4: 	punpckldq	%xmm0, %xmm1
    000016f8: 	paddd	%xmm1, %xmm3
    000016fc: 	cmpq	$0x960, %rax
    00001702: 	jne	.Ltmp151 # Offset: 5890
    00001708: 	pshufd	$0x55, %xmm4, %xmm0
    0000170d: 	movd	%xmm4, %esi
    00001711: 	addq	$0x4, %rcx
    00001715: 	addq	$0x960, %rdx
    0000171c: 	movd	%xmm0, %eax
    00001720: 	movdqa	%xmm4, %xmm0
    00001724: 	punpckhdq	%xmm4, %xmm0
    00001728: 	addl	%esi, %eax
    0000172a: 	pshufd	$0xff, %xmm4, %xmm4
    0000172f: 	movd	%xmm0, %esi
    00001733: 	pshufd	$0x55, %xmm3, %xmm0
    00001738: 	addl	%esi, %eax
    0000173a: 	movd	%xmm4, %esi
    0000173e: 	addl	%esi, %eax
    00001740: 	movd	%xmm3, %esi
    00001744: 	addl	%esi, %eax
    00001746: 	movd	%xmm0, %esi
    0000174a: 	movdqa	%xmm3, %xmm0
    0000174e: 	punpckhdq	%xmm3, %xmm0
    00001752: 	addl	%esi, %eax
    00001754: 	pshufd	$0xff, %xmm3, %xmm3
    00001759: 	movd	%xmm0, %esi
    0000175d: 	addl	%esi, %eax
    0000175f: 	movd	%xmm3, %esi
    00001763: 	addl	%esi, %eax
    00001765: 	movl	%eax, -0x4(%rcx)
    00001768: 	cmpq	0xa8(%rsp), %rdx
    00001770: 	jne	.Ltmp152 # Offset: 6000
    00001776: 	xorl	%eax, %eax
.Ltmp154:
    00001778: 	movq	0x58(%rsp), %rdi
    0000177d: 	movq	0x80(%rsp), %rbx
    00001785: 	movl	(%rdi,%rax,4), %edi
    00001788: 	cmpl	%edi, (%rbx,%rax,4)
    0000178b: 	jne	.Ltmp153 # Offset: 6027
    00001791: 	addq	$0x1, %rax
    00001795: 	cmpq	$0x320, %rax
    0000179b: 	jne	.Ltmp154 # Offset: 6043
.Ltmp198:
    0000179d: 	movq	0x58(%rsp), %rax
    000017a2: 	movq	%r14, %r15
    000017a5: 	movq	$0x0, (%rax)
    000017ac: 	movq	0x88(%rsp), %rbx
    000017b4: 	movq	$0x0, -0x10(%rbx)
    000017bc: 	movq	0x90(%rsp), %rdi
    000017c4: 	andq	$-0x8, %rdi
    000017c8: 	subq	%rdi, %rax
    000017cb: 	movq	%rax, %rcx
    000017ce: 	xorl	%eax, %eax
    000017d0: 	addl	$0xc80, %ecx
    000017d6: 	shrl	$0x3, %ecx
    000017d9: 	rep		stosq	%rax, %es:(%rdi)
    000017dc: 	movq	$0x0, 0x70(%rsp)
.Ltmp163:
    000017e5: 	movq	0x70(%rsp), %rbx
    000017ea: 	movl	$0x320, %eax
    000017ef: 	movq	%r15, %r12
    000017f2: 	movq	$0x0, 0x30(%rsp)
    000017fb: 	leal	0xb(%rbx), %edi
    000017fe: 	movl	%ebx, 0x48(%rsp)
    00001802: 	cmpl	%eax, %edi
    00001804: 	cmovlel	%edi, %eax
    00001807: 	movl	%eax, %edi
    00001809: 	movl	%eax, 0x40(%rsp)
    0000180d: 	movq	0x58(%rsp), %rax
    00001812: 	leaq	(%rax,%rbx,4), %rax
    00001816: 	movq	%rax, 0x50(%rsp)
    0000181b: 	imulq	$0x960, %rbx, %rax
    00001822: 	addq	0x28(%rsp), %rax
    00001827: 	movq	%rax, 0x68(%rsp)
    0000182c: 	imulq	$0x258, %rbx, %rax
    00001833: 	movq	%rax, 0x60(%rsp)
    00001838: 	movl	%edi, %eax
    0000183a: 	subl	%ebx, %eax
    0000183c: 	subl	$0x1, %eax
    0000183f: 	addq	%rbx, %rax
    00001842: 	movq	0xa0(%rsp), %rbx
    0000184a: 	leaq	(%rbx,%rax,4), %rax
    0000184e: 	movq	%rax, 0x18(%rsp)
    00001853: 	nopl	(%rax,%rax) # Size: 5
.Ltmp162:
    00001858: 	movq	0x30(%rsp), %rax
    0000185d: 	movl	0x48(%rsp), %edi
    00001861: 	movl	%eax, 0x38(%rsp)
    00001865: 	leal	0x12c(%rax), %ebx
    0000186b: 	cmpl	%edi, 0x40(%rsp)
    0000186f: 	jle	.Ltmp155 # Offset: 6255
    00001875: 	movl	%eax, %edi
    00001877: 	movq	0x60(%rsp), %r13
    0000187c: 	movq	0x68(%rsp), %r11
    00001881: 	movl	%eax, 0x8(%rsp)
    00001885: 	addl	$0x129, %edi
    0000188b: 	shlq	$0x2, %rax
    0000188f: 	movq	0x50(%rsp), %r10
    00001894: 	movl	%edi, 0x10(%rsp)
    00001898: 	movq	%rax, 0x20(%rsp)
    0000189d: 	nopl	(%rax) # Size: 3
.Ltmp161:
    000018a0: 	movl	(%r10), %ecx
    000018a3: 	movl	0x10(%rsp), %edi
    000018a7: 	cmpl	%edi, 0x8(%rsp)
    000018ab: 	jge	.Ltmp156 # Offset: 6315
    000018b1: 	movq	0x20(%rsp), %rax
    000018b6: 	movd	%ecx, %xmm3
    000018ba: 	xorl	%edx, %edx
    000018bc: 	leaq	(%r11,%rax), %rsi
    000018c0: 	xorl	%eax, %eax
    000018c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp157:
    000018c8: 	movdqu	(%r12,%rax), %xmm0
    000018ce: 	movdqu	(%rsi,%rax), %xmm2
    000018d3: 	addl	$0x1, %edx
    000018d6: 	movdqu	(%r12,%rax), %xmm1
    000018dc: 	movdqu	(%rsi,%rax), %xmm5
    000018e1: 	addq	$0x10, %rax
    000018e5: 	psrlq	$0x20, %xmm0
    000018ea: 	psrlq	$0x20, %xmm2
    000018ef: 	pmuludq	%xmm5, %xmm1
    000018f3: 	pmuludq	%xmm2, %xmm0
    000018f7: 	pshufd	$0x8, %xmm1, %xmm1
    000018fc: 	pshufd	$0x8, %xmm0, %xmm0
    00001901: 	punpckldq	%xmm0, %xmm1
    00001905: 	paddd	%xmm1, %xmm3
    00001909: 	cmpl	$0x4a, %edx
    0000190c: 	jbe	.Ltmp157 # Offset: 6412
    0000190e: 	pshufd	$0x55, %xmm3, %xmm0
    00001913: 	movd	%xmm3, %ecx
    00001917: 	movl	%ebx, %edi
    00001919: 	movd	%xmm0, %edx
    0000191d: 	movdqa	%xmm3, %xmm0
    00001921: 	punpckhdq	%xmm3, %xmm0
    00001925: 	pshufd	$0xff, %xmm3, %xmm3
    0000192a: 	movd	%xmm0, %r14d
    0000192f: 	movd	%xmm3, (%rsp)
.Ltmp190:
    00001934: 	cmpl	%edi, %ebx
    00001936: 	jle	.Ltmp158 # Offset: 6454
    0000193c: 	movl	%ebx, %ebp
    0000193e: 	subl	%edi, %ebp
    00001940: 	leal	-0x1(%rbp), %eax
    00001943: 	cmpl	$0x2, %eax
    00001946: 	jbe	.Ltmp159 # Offset: 6470
    0000194c: 	movslq	%edi, %rax
    0000194f: 	movq	0x28(%rsp), %r9
    00001954: 	pxor	%xmm3, %xmm3
    00001958: 	leaq	(%r13,%rax), %rsi
    0000195d: 	leaq	(%r15,%rax,4), %r8
    00001961: 	xorl	%eax, %eax
    00001963: 	leaq	(%r9,%rsi,4), %r9
    00001967: 	movl	%ebp, %esi
    00001969: 	shrl	$0x2, %esi
    0000196c: 	shlq	$0x4, %rsi
.Ltmp160:
    00001970: 	movdqu	(%r9,%rax), %xmm0
    00001976: 	movdqu	(%r8,%rax), %xmm2
    0000197c: 	movdqu	(%r9,%rax), %xmm1
    00001982: 	movdqu	(%r8,%rax), %xmm5
    00001988: 	addq	$0x10, %rax
    0000198c: 	psrlq	$0x20, %xmm0
    00001991: 	psrlq	$0x20, %xmm2
    00001996: 	pmuludq	%xmm5, %xmm1
    0000199a: 	pmuludq	%xmm2, %xmm0
    0000199e: 	pshufd	$0x8, %xmm1, %xmm1
    000019a3: 	pshufd	$0x8, %xmm0, %xmm0
    000019a8: 	punpckldq	%xmm0, %xmm1
    000019ac: 	paddd	%xmm1, %xmm3
    000019b0: 	cmpq	%rax, %rsi
    000019b3: 	jne	.Ltmp160 # Offset: 6579
    000019b5: 	movdqa	%xmm3, %xmm0
    000019b9: 	psrldq	$0x8, %xmm0
    000019be: 	paddd	%xmm0, %xmm3
    000019c2: 	movdqa	%xmm3, %xmm0
    000019c6: 	psrldq	$0x4, %xmm0
    000019cb: 	paddd	%xmm0, %xmm3
    000019cf: 	movd	%xmm3, %eax
    000019d3: 	addl	%eax, %ecx
    000019d5: 	movl	%ebp, %eax
    000019d7: 	andl	$-0x4, %eax
    000019da: 	addl	%eax, %edi
    000019dc: 	cmpl	%ebp, %eax
    000019de: 	je	.Ltmp158 # Offset: 6622
.Ltmp159:
    000019e0: 	movslq	%edi, %rsi
    000019e3: 	movl	(%r11,%rsi,4), %r8d
    000019e7: 	imull	(%r15,%rsi,4), %r8d
    000019ec: 	leaq	(,%rsi,4), %rax
    000019f4: 	leal	0x1(%rdi), %esi
    000019f7: 	addl	%r8d, %ecx
    000019fa: 	cmpl	%ebx, %esi
    000019fc: 	jge	.Ltmp158 # Offset: 6652
    000019fe: 	movl	0x4(%r11,%rax), %esi
    00001a03: 	imull	0x4(%r15,%rax), %esi
    00001a09: 	addl	$0x2, %edi
    00001a0c: 	addl	%esi, %ecx
    00001a0e: 	cmpl	%edi, %ebx
    00001a10: 	jle	.Ltmp158 # Offset: 6672
    00001a12: 	movl	0x8(%r15,%rax), %esi
    00001a17: 	imull	0x8(%r11,%rax), %esi
    00001a1d: 	addl	%esi, %ecx
.Ltmp158:
    00001a1f: 	addl	%ecx, %edx
    00001a21: 	addq	$0x4, %r10
    00001a25: 	addq	$0x960, %r11
    00001a2c: 	addq	$0x258, %r13
    00001a33: 	addl	%r14d, %edx
    00001a36: 	addl	(%rsp), %edx
    00001a39: 	movl	%edx, -0x4(%r10)
    00001a3d: 	cmpq	%r10, 0x18(%rsp)
    00001a42: 	jne	.Ltmp161 # Offset: 6722
.Ltmp155:
    00001a48: 	addq	$0x12c, 0x30(%rsp)
    00001a51: 	movq	0x30(%rsp), %rax
    00001a56: 	addq	$0x4b0, %r12
    00001a5d: 	cmpq	$0x258, %rax
    00001a63: 	jne	.Ltmp162 # Offset: 6755
    00001a69: 	addq	$0xb, 0x70(%rsp)
    00001a6f: 	movq	0x70(%rsp), %rax
    00001a74: 	cmpq	$0x323, %rax
    00001a7a: 	jne	.Ltmp163 # Offset: 6778
    00001a80: 	movq	%r15, %r14
    00001a83: 	xorl	%eax, %eax
.Ltmp165:
    00001a85: 	movq	0x58(%rsp), %rdi
    00001a8a: 	movq	0x80(%rsp), %rbx
    00001a92: 	movl	(%rdi,%rax,4), %edi
    00001a95: 	cmpl	%edi, (%rbx,%rax,4)
    00001a98: 	jne	.Ltmp164 # Offset: 6808
    00001a9e: 	addq	$0x1, %rax
    00001aa2: 	cmpq	$0x320, %rax
    00001aa8: 	jne	.Ltmp165 # Offset: 6824
.Ltmp197:
    00001aaa: 	movq	0x58(%rsp), %rax
    00001aaf: 	movq	$0x0, (%rax)
    00001ab6: 	movq	0x88(%rsp), %rbx
    00001abe: 	movq	$0x0, -0x10(%rbx)
    00001ac6: 	movq	0x90(%rsp), %rdi
    00001ace: 	movq	%r14, %rbx
    00001ad1: 	andq	$-0x8, %rdi
    00001ad5: 	subq	%rdi, %rax
    00001ad8: 	movq	%rax, %rcx
    00001adb: 	xorl	%eax, %eax
    00001add: 	addl	$0xc80, %ecx
    00001ae3: 	shrl	$0x3, %ecx
    00001ae6: 	rep		stosq	%rax, %es:(%rdi)
    00001ae9: 	movq	$0x0, 0xc0(%rsp)
.Ltmp174:
    00001af5: 	movq	0xc0(%rsp), %rdi
    00001afd: 	movl	$0x320, %eax
    00001b02: 	movq	%rbx, %rbp
    00001b05: 	movq	%rbx, %r10
    00001b08: 	movq	$0x0, 0x60(%rsp)
    00001b11: 	leal	0xb(%rdi), %ecx
    00001b14: 	movl	%edi, 0x78(%rsp)
    00001b18: 	cmpl	%eax, %ecx
    00001b1a: 	cmovlel	%ecx, %eax
    00001b1d: 	movl	%eax, %ecx
    00001b1f: 	movl	%eax, 0x70(%rsp)
    00001b23: 	movq	0x58(%rsp), %rax
    00001b28: 	leaq	(%rax,%rdi,4), %rax
    00001b2c: 	movq	%rax, 0xb8(%rsp)
    00001b34: 	imulq	$0x960, %rdi, %rax
    00001b3b: 	addq	0x28(%rsp), %rax
    00001b40: 	movq	%rax, 0xb0(%rsp)
    00001b48: 	imulq	$0x258, %rdi, %rax
    00001b4f: 	movq	%rax, 0xa8(%rsp)
    00001b57: 	movl	%ecx, %eax
    00001b59: 	subl	%edi, %eax
    00001b5b: 	subl	$0x1, %eax
    00001b5e: 	addq	%rdi, %rax
    00001b61: 	movq	0xa0(%rsp), %rdi
    00001b69: 	leaq	(%rdi,%rax,4), %rax
    00001b6d: 	movq	%rax, 0x40(%rsp)
    00001b72: 	nopw	(%rax,%rax) # Size: 6
.Ltmp173:
    00001b78: 	movq	0x60(%rsp), %rax
    00001b7d: 	movl	0x78(%rsp), %ebx
    00001b81: 	movl	%eax, 0x68(%rsp)
    00001b85: 	leal	0x12c(%rax), %r13d
    00001b8c: 	cmpl	%ebx, 0x70(%rsp)
    00001b90: 	jle	.Ltmp166 # Offset: 7056
    00001b96: 	movl	%eax, %ebx
    00001b98: 	movl	%eax, 0x38(%rsp)
    00001b9c: 	movq	0xa8(%rsp), %r12
    00001ba4: 	addl	$0x125, %ebx
    00001baa: 	movq	0xb8(%rsp), %r11
    00001bb2: 	movl	%ebx, 0x30(%rsp)
    00001bb6: 	leaq	(,%rax,4), %rbx
    00001bbe: 	addl	$0x128, %eax
    00001bc3: 	movl	%eax, 0x50(%rsp)
    00001bc7: 	movq	%rbx, 0x48(%rsp)
    00001bcc: 	movq	0xb0(%rsp), %rbx
    00001bd4: 	nopl	(%rax) # Size: 4
.Ltmp172:
    00001bd8: 	movl	(%r11), %edx
    00001bdb: 	movl	0x38(%rsp), %edi
    00001bdf: 	cmpl	%edi, 0x30(%rsp)
    00001be3: 	jle	.Ltmp167 # Offset: 7139
    00001be9: 	movq	0x48(%rsp), %rax
    00001bee: 	movd	%edx, %xmm4
    00001bf2: 	pxor	%xmm3, %xmm3
    00001bf6: 	xorl	%edx, %edx
    00001bf8: 	leaq	(%rax,%rbx), %rcx
    00001bfc: 	xorl	%eax, %eax
    00001bfe: 	nop # Size: 2
.Ltmp168:
    00001c00: 	movdqu	(%rcx,%rax), %xmm0
    00001c05: 	movdqu	(%rbp,%rax), %xmm2
    00001c0b: 	addl	$0x1, %edx
    00001c0e: 	movdqu	(%rcx,%rax), %xmm1
    00001c13: 	movdqu	(%rbp,%rax), %xmm6
    00001c19: 	psrlq	$0x20, %xmm2
    00001c1e: 	psrlq	$0x20, %xmm0
    00001c23: 	movdqu	0x10(%rcx,%rax), %xmm7
    00001c29: 	pmuludq	%xmm2, %xmm0
    00001c2d: 	pmuludq	%xmm6, %xmm1
    00001c31: 	movdqu	0x10(%rcx,%rax), %xmm2
    00001c37: 	psrlq	$0x20, %xmm2
    00001c3c: 	pshufd	$0x8, %xmm0, %xmm0
    00001c41: 	pshufd	$0x8, %xmm1, %xmm1
    00001c46: 	punpckldq	%xmm0, %xmm1
    00001c4a: 	movdqu	0x10(%rbp,%rax), %xmm0
    00001c50: 	paddd	%xmm1, %xmm4
    00001c54: 	movdqu	0x10(%rbp,%rax), %xmm1
    00001c5a: 	addq	$0x20, %rax
    00001c5e: 	psrlq	$0x20, %xmm0
    00001c63: 	pmuludq	%xmm7, %xmm1
    00001c67: 	pmuludq	%xmm2, %xmm0
    00001c6b: 	pshufd	$0x8, %xmm1, %xmm1
    00001c70: 	pshufd	$0x8, %xmm0, %xmm0
    00001c75: 	punpckldq	%xmm0, %xmm1
    00001c79: 	paddd	%xmm1, %xmm3
    00001c7d: 	cmpl	$0x24, %edx
    00001c80: 	jbe	.Ltmp168 # Offset: 7296
    00001c86: 	pshufd	$0x55, %xmm4, %xmm0
    00001c8b: 	movd	%xmm4, %edx
    00001c8f: 	movd	%xmm3, (%rsp)
    00001c94: 	movl	0x50(%rsp), %esi
    00001c98: 	movd	%xmm0, %r15d
    00001c9d: 	movdqa	%xmm4, %xmm0
    00001ca1: 	punpckhdq	%xmm4, %xmm0
    00001ca5: 	pshufd	$0xff, %xmm4, %xmm4
    00001caa: 	movd	%xmm0, %r14d
    00001caf: 	pshufd	$0x55, %xmm3, %xmm0
    00001cb4: 	movd	%xmm4, 0x8(%rsp)
    00001cba: 	movd	%xmm0, 0x20(%rsp)
    00001cc0: 	movdqa	%xmm3, %xmm0
    00001cc4: 	punpckhdq	%xmm3, %xmm0
    00001cc8: 	pshufd	$0xff, %xmm3, %xmm3
    00001ccd: 	movd	%xmm0, 0x10(%rsp)
    00001cd3: 	movd	%xmm3, 0x18(%rsp)
.Ltmp189:
    00001cd9: 	cmpl	%r13d, %esi
    00001cdc: 	jge	.Ltmp169 # Offset: 7388
    00001ce2: 	movl	%r13d, %r9d
    00001ce5: 	subl	%esi, %r9d
    00001ce8: 	leal	-0x1(%r9), %eax
    00001cec: 	cmpl	$0x2, %eax
    00001cef: 	jbe	.Ltmp170 # Offset: 7407
    00001cf5: 	movslq	%esi, %rax
    00001cf8: 	movq	0x28(%rsp), %rdi
    00001cfd: 	pxor	%xmm3, %xmm3
    00001d01: 	leaq	(%rax,%r12), %rcx
    00001d05: 	leaq	(%rdi,%rcx,4), %r8
    00001d09: 	movl	%r9d, %ecx
    00001d0c: 	leaq	(%r10,%rax,4), %rdi
    00001d10: 	xorl	%eax, %eax
    00001d12: 	shrl	$0x2, %ecx
    00001d15: 	shlq	$0x4, %rcx
    00001d19: 	nopl	(%rax) # Size: 7
.Ltmp171:
    00001d20: 	movdqu	(%r8,%rax), %xmm0
    00001d26: 	movdqu	(%rdi,%rax), %xmm2
    00001d2b: 	movdqu	(%r8,%rax), %xmm1
    00001d31: 	movdqu	(%rdi,%rax), %xmm6
    00001d36: 	addq	$0x10, %rax
    00001d3a: 	psrlq	$0x20, %xmm0
    00001d3f: 	psrlq	$0x20, %xmm2
    00001d44: 	pmuludq	%xmm6, %xmm1
    00001d48: 	pmuludq	%xmm2, %xmm0
    00001d4c: 	pshufd	$0x8, %xmm1, %xmm1
    00001d51: 	pshufd	$0x8, %xmm0, %xmm0
    00001d56: 	punpckldq	%xmm0, %xmm1
    00001d5a: 	paddd	%xmm1, %xmm3
    00001d5e: 	cmpq	%rax, %rcx
    00001d61: 	jne	.Ltmp171 # Offset: 7521
    00001d63: 	movdqa	%xmm3, %xmm0
    00001d67: 	psrldq	$0x8, %xmm0
    00001d6c: 	paddd	%xmm0, %xmm3
    00001d70: 	movdqa	%xmm3, %xmm0
    00001d74: 	psrldq	$0x4, %xmm0
    00001d79: 	paddd	%xmm0, %xmm3
    00001d7d: 	movd	%xmm3, %eax
    00001d81: 	addl	%eax, %edx
    00001d83: 	movl	%r9d, %eax
    00001d86: 	andl	$-0x4, %eax
    00001d89: 	addl	%eax, %esi
    00001d8b: 	cmpl	%r9d, %eax
    00001d8e: 	je	.Ltmp169 # Offset: 7566
.Ltmp170:
    00001d90: 	movslq	%esi, %rcx
    00001d93: 	movl	(%r10,%rcx,4), %edi
    00001d97: 	imull	(%rbx,%rcx,4), %edi
    00001d9b: 	leaq	(,%rcx,4), %rax
    00001da3: 	leal	0x1(%rsi), %ecx
    00001da6: 	addl	%edi, %edx
    00001da8: 	cmpl	%r13d, %ecx
    00001dab: 	jge	.Ltmp169 # Offset: 7595
    00001dad: 	movl	0x4(%rax,%rbx), %ecx
    00001db1: 	imull	0x4(%r10,%rax), %ecx
    00001db7: 	addl	$0x2, %esi
    00001dba: 	addl	%ecx, %edx
    00001dbc: 	cmpl	%r13d, %esi
    00001dbf: 	jge	.Ltmp169 # Offset: 7615
    00001dc1: 	movl	0x8(%rax,%rbx), %ecx
    00001dc5: 	imull	0x8(%r10,%rax), %ecx
    00001dcb: 	addl	%ecx, %edx
.Ltmp169:
    00001dcd: 	addl	%r15d, %edx
    00001dd0: 	addq	$0x4, %r11
    00001dd4: 	addq	$0x960, %rbx
    00001ddb: 	addq	$0x258, %r12
    00001de2: 	addl	%r14d, %edx
    00001de5: 	addl	0x8(%rsp), %edx
    00001de9: 	addl	(%rsp), %edx
    00001dec: 	addl	0x20(%rsp), %edx
    00001df0: 	addl	0x10(%rsp), %edx
    00001df4: 	addl	0x18(%rsp), %edx
    00001df8: 	movl	%edx, -0x4(%r11)
    00001dfc: 	cmpq	0x40(%rsp), %r11
    00001e01: 	jne	.Ltmp172 # Offset: 7681
.Ltmp166:
    00001e07: 	addq	$0x12c, 0x60(%rsp)
    00001e10: 	movq	0x60(%rsp), %rax
    00001e15: 	addq	$0x4b0, %rbp
    00001e1c: 	cmpq	$0x258, %rax
    00001e22: 	jne	.Ltmp173 # Offset: 7714
    00001e28: 	addq	$0xb, 0xc0(%rsp)
    00001e31: 	movq	%r10, %rbx
    00001e34: 	movq	0xc0(%rsp), %rax
    00001e3c: 	cmpq	$0x323, %rax
    00001e42: 	jne	.Ltmp174 # Offset: 7746
    00001e48: 	movq	%r10, %r14
    00001e4b: 	xorl	%eax, %eax
.Ltmp176:
    00001e4d: 	movq	0x58(%rsp), %rdi
    00001e52: 	movq	0x80(%rsp), %rbx
    00001e5a: 	movl	(%rdi,%rax,4), %edi
    00001e5d: 	cmpl	%edi, (%rbx,%rax,4)
    00001e60: 	jne	.Ltmp175 # Offset: 7776
    00001e66: 	addq	$0x1, %rax
    00001e6a: 	cmpq	$0x320, %rax
    00001e70: 	jne	.Ltmp176 # Offset: 7792
.Ltmp196:
    00001e72: 	movq	0x58(%rsp), %rax
    00001e77: 	movq	$0x0, (%rax)
    00001e7e: 	movq	0x88(%rsp), %rbx
    00001e86: 	movq	$0x0, -0x10(%rbx)
    00001e8e: 	movq	0x90(%rsp), %rdi
    00001e96: 	andq	$-0x8, %rdi
    00001e9a: 	subq	%rdi, %rax
    00001e9d: 	movq	%rax, %rcx
    00001ea0: 	xorl	%eax, %eax
    00001ea2: 	addl	$0xc80, %ecx
    00001ea8: 	shrl	$0x3, %ecx
    00001eab: 	rep		stosq	%rax, %es:(%rdi)
    00001eae: 	movq	%r14, 0x10(%rsp)
    00001eb3: 	movq	$0x0, 0x88(%rsp)
    00001ebf: 	movq	0x28(%rsp), %r15
.Ltmp183:
    00001ec4: 	movq	0x88(%rsp), %rdi
    00001ecc: 	movl	$0x258, %eax
    00001ed1: 	leal	0xf8(%rdi), %ebx
    00001ed7: 	cmpl	%eax, %ebx
    00001ed9: 	cmovlel	%ebx, %eax
    00001edc: 	movl	%eax, 0x8(%rsp)
    00001ee0: 	cmpl	%edi, %eax
    00001ee2: 	jle	.Ltmp177 # Offset: 7906
    00001ee8: 	movq	0x58(%rsp), %rax
    00001eed: 	movl	$0x4, 0x70(%rsp)
    00001ef5: 	movq	$0x0, 0x50(%rsp)
    00001efe: 	movq	%rax, 0x18(%rsp)
    00001f03: 	movq	0xc8(%rsp), %rax
    00001f0b: 	movq	%rax, 0x78(%rsp)
.Ltmp182:
    00001f10: 	movq	0x50(%rsp), %rax
    00001f15: 	movq	0x98(%rsp), %rbx
    00001f1d: 	movq	0x58(%rsp), %rcx
    00001f22: 	movq	0x78(%rsp), %r10
    00001f27: 	leaq	0x130(%rbx,%rax,4), %rdi
    00001f2f: 	movl	0x70(%rsp), %ebx
    00001f33: 	leal	0x4d(%rax), %r14d
    00001f37: 	movl	%eax, (%rsp)
    00001f3a: 	leal	0x50(%rax), %r11d
    00001f3e: 	movq	0x88(%rsp), %r8
    00001f46: 	addl	$0x4c, %ebx
    00001f49: 	cmpl	%eax, %r14d
    00001f4c: 	cmovlel	%eax, %ebx
    00001f4f: 	imull	$0x258, %ebx, %r13d
    00001f56: 	movslq	%ebx, %rax
    00001f59: 	leaq	(%rcx,%rax,4), %rbp
    00001f5d: 	leal	0x1(%rbx), %eax
    00001f60: 	movl	%eax, 0x20(%rsp)
    00001f64: 	cltq
    00001f66: 	leaq	(%rcx,%rax,4), %r12
    00001f6a: 	leal	0x258(%r13), %eax
    00001f71: 	movl	%eax, 0x28(%rsp)
    00001f75: 	leal	0x2(%rbx), %eax
    00001f78: 	movl	%eax, 0x30(%rsp)
    00001f7c: 	cltq
    00001f7e: 	leaq	(%rcx,%rax,4), %rax
    00001f82: 	movq	%rax, 0x38(%rsp)
    00001f87: 	leal	0x4b0(%r13), %eax
    00001f8e: 	movl	%eax, 0x40(%rsp)
    00001f92: 	leal	0x3(%rbx), %eax
    00001f95: 	movl	%eax, 0x48(%rsp)
    00001f99: 	cltq
    00001f9b: 	leaq	(%rcx,%rax,4), %rax
    00001f9f: 	movq	%rax, 0x60(%rsp)
    00001fa4: 	leal	0x708(%r13), %eax
    00001fab: 	movl	%eax, 0x68(%rsp)
    00001faf: 	nop # Size: 1
.Ltmp181:
    00001fb0: 	movq	0x10(%rsp), %rax
    00001fb5: 	movl	%r8d, %r9d
    00001fb8: 	movl	(%rax,%r8,4), %ecx
    00001fbc: 	cmpl	(%rsp), %r14d
    00001fc0: 	jle	.Ltmp178 # Offset: 8128
    00001fc2: 	movq	0x18(%rsp), %rax
    00001fc7: 	movq	%r10, %rdx
    00001fca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp179:
    00001fd0: 	movl	-0x960(%rdx), %esi
    00001fd6: 	addq	$0x2580, %rdx
    00001fdd: 	imull	%ecx, %esi
    00001fe0: 	addl	%esi, (%rax)
    00001fe2: 	movl	-0x2580(%rdx), %esi
    00001fe8: 	imull	%ecx, %esi
    00001feb: 	addl	%esi, 0x4(%rax)
    00001fee: 	movl	-0x1c20(%rdx), %esi
    00001ff4: 	imull	%ecx, %esi
    00001ff7: 	addl	%esi, 0x8(%rax)
    00001ffa: 	movl	-0x12c0(%rdx), %esi
    00002000: 	imull	%ecx, %esi
    00002003: 	addl	%esi, 0xc(%rax)
    00002006: 	addq	$0x10, %rax
    0000200a: 	cmpq	%rax, %rdi
    0000200d: 	jne	.Ltmp179 # Offset: 8205
.Ltmp178:
    0000200f: 	cmpl	%r11d, %ebx
    00002012: 	jge	.Ltmp180 # Offset: 8210
    00002014: 	leal	(%r9,%r13), %eax
    00002018: 	cltq
    0000201a: 	movl	(%r15,%rax,4), %edx
    0000201e: 	imull	%ecx, %edx
    00002021: 	addl	%edx, (%rbp)
    00002024: 	cmpl	0x20(%rsp), %r11d
    00002029: 	jle	.Ltmp180 # Offset: 8233
    0000202b: 	movl	0x28(%rsp), %eax
    0000202f: 	addl	%r9d, %eax
    00002032: 	cltq
    00002034: 	movl	(%r15,%rax,4), %edx
    00002038: 	imull	%ecx, %edx
    0000203b: 	addl	%edx, (%r12)
    0000203f: 	cmpl	%r11d, 0x30(%rsp)
    00002044: 	jge	.Ltmp180 # Offset: 8260
    00002046: 	movl	0x40(%rsp), %eax
    0000204a: 	addl	%r9d, %eax
    0000204d: 	cltq
    0000204f: 	movl	(%r15,%rax,4), %edx
    00002053: 	imull	%ecx, %edx
    00002056: 	movl	%edx, %eax
    00002058: 	movq	0x38(%rsp), %rdx
    0000205d: 	addl	%eax, (%rdx)
    0000205f: 	cmpl	%r11d, 0x48(%rsp)
    00002064: 	jge	.Ltmp180 # Offset: 8292
    00002066: 	movq	0x60(%rsp), %rax
    0000206b: 	addl	0x68(%rsp), %r9d
    00002070: 	movslq	%r9d, %r9
    00002073: 	imull	(%r15,%r9,4), %ecx
    00002078: 	addl	%ecx, (%rax)
.Ltmp180:
    0000207a: 	addq	$0x1, %r8
    0000207e: 	addq	$0x4, %r10
    00002082: 	cmpl	%r8d, 0x8(%rsp)
    00002087: 	jg	.Ltmp181 # Offset: 8327
    0000208d: 	addq	$0x50, 0x50(%rsp)
    00002093: 	movq	0x50(%rsp), %rax
    00002098: 	addl	$0x50, 0x70(%rsp)
    0000209d: 	addq	$0x2ee00, 0x78(%rsp)
    000020a6: 	addq	$0x140, 0x18(%rsp)
    000020af: 	cmpq	$0x320, %rax
    000020b5: 	jne	.Ltmp182 # Offset: 8373
.Ltmp177:
    000020bb: 	addq	$0xf8, 0x88(%rsp)
    000020c7: 	movq	0x88(%rsp), %rax
    000020cf: 	addq	$0x3e0, 0xc8(%rsp)
    000020db: 	cmpq	$0x2e8, %rax
    000020e1: 	jne	.Ltmp183 # Offset: 8417
    000020e7: 	xorl	%eax, %eax
.Ltmp185:
    000020e9: 	movq	0x58(%rsp), %rdi
    000020ee: 	movq	0x80(%rsp), %rbx
    000020f6: 	movl	(%rdi,%rax,4), %edi
    000020f9: 	cmpl	%edi, (%rbx,%rax,4)
    000020fc: 	jne	.Ltmp184 # Offset: 8444
    00002102: 	addq	$0x1, %rax
    00002106: 	cmpq	$0x320, %rax
    0000210c: 	jne	.Ltmp185 # Offset: 8460
    0000210e: 	movq	0xd58(%rsp), %rax
    00002116: 	subq	%fs:0x28, %rax
    0000211f: 	jne	.Ltmp186 # Offset: 8479
    00002125: 	addq	$0xd68, %rsp
    0000212c: 	popq	%rbx
    0000212d: 	popq	%rbp
    0000212e: 	popq	%r12
    00002130: 	popq	%r13
    00002132: 	popq	%r14
    00002134: 	popq	%r15
    00002136: 	retq # Offset: 8502
    00002137: 	nopw	(%rax,%rax) # Size: 9
.Ltmp113:
    00002140: 	movl	(%r12), %r15d
    00002144: 	addq	$0x960, %r12
    0000214b: 	imull	%eax, %r15d
    0000214f: 	addl	%r15d, (%rdx)
    00002152: 	addq	$0x4, %rdx
    00002156: 	cmpq	%r8, %rdx
    00002159: 	jne	.Ltmp113 # Offset: 8537
    0000215b: 	jmp	.Ltmp187 # Offset: 8539
.Ltmp132:
    00002160: 	movq	0x70(%rsp), %rax
    00002165: 	movq	%rdi, %rdx
    00002168: 	nopl	(%rax,%rax) # Size: 8
.Ltmp188:
    00002170: 	movl	(%rdx), %r15d
    00002173: 	addq	$0x960, %rdx
    0000217a: 	imull	%ecx, %r15d
    0000217e: 	addl	%r15d, (%rax)
    00002181: 	addq	$0x4, %rax
    00002185: 	cmpq	%r9, %rax
    00002188: 	jne	.Ltmp188 # Offset: 8584
    0000218a: 	jmp	.Ltmp134 # Offset: 8586
    0000218f: 	nop # Size: 1
.Ltmp167:
    00002190: 	movl	$0x0, 0x18(%rsp)
    00002198: 	movl	0x68(%rsp), %esi
    0000219c: 	xorl	%r14d, %r14d
    0000219f: 	xorl	%r15d, %r15d
    000021a2: 	movl	$0x0, 0x10(%rsp)
    000021aa: 	movl	$0x0, 0x20(%rsp)
    000021b2: 	movl	$0x0, (%rsp)
    000021b9: 	movl	$0x0, 0x8(%rsp)
    000021c1: 	jmp	.Ltmp189 # Offset: 8641
    000021c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp156:
    000021d0: 	movl	$0x0, (%rsp)
    000021d7: 	movl	0x38(%rsp), %edi
    000021db: 	xorl	%r14d, %r14d
    000021de: 	xorl	%edx, %edx
    000021e0: 	jmp	.Ltmp190 # Offset: 8672
.Ltmp72:
    000021e5: 	movq	%rcx, %rdx
    000021e8: 	movq	%r10, %rax
    000021eb: 	leaq	0x1d4c00(%rcx), %r11
.Ltmp191:
    000021f2: 	movl	(%r9), %r8d
    000021f5: 	addq	$0x960, %rdx
    000021fc: 	imull	-0x960(%rdx), %r8d
    00002204: 	addl	%r8d, (%rax)
    00002207: 	addq	$0x4, %rax
    0000220b: 	cmpq	%r11, %rdx
    0000220e: 	jne	.Ltmp191 # Offset: 8718
    00002210: 	addl	$0x1, %edi
    00002213: 	addq	$0x4, %rcx
    00002217: 	cmpl	$0x258, %edi
    0000221d: 	jne	.Ltmp74 # Offset: 8733
    00002223: 	jmp	.Ltmp192 # Offset: 8739
.Ltmp86:
    00002228: 	movq	%rcx, %rdi
    0000222b: 	movq	%r9, %rdx
    0000222e: 	leaq	0x1d4c00(%rcx), %r10
.Ltmp193:
    00002235: 	movl	(%rdi), %r8d
    00002238: 	addq	$0x960, %rdi
    0000223f: 	imull	%eax, %r8d
    00002243: 	addl	%r8d, (%rdx)
    00002246: 	addq	$0x4, %rdx
    0000224a: 	cmpq	%r10, %rdi
    0000224d: 	jne	.Ltmp193 # Offset: 8781
    0000224f: 	jmp	.Ltmp194 # Offset: 8783
.Ltmp70:
    00002254: 	leaq	DATAat0x243a8(%rip), %rsi
    0000225b: 	movl	$0x1, %edi
    00002260: 	xorl	%eax, %eax
    00002262: 	callq	__printf_chk@PLT # Offset: 8802
    00002267: 	jmp	.Ltmp195 # Offset: 8807
.Ltmp184:
    0000226c: 	movq	0xd58(%rsp), %rax
    00002274: 	subq	%fs:0x28, %rax
    0000227d: 	jne	.Ltmp186 # Offset: 8829
    00002283: 	addq	$0xd68, %rsp
    0000228a: 	leaq	DATAat0x24008(%rip), %rsi
    00002291: 	movl	$0x1, %edi
    00002296: 	xorl	%eax, %eax
    00002298: 	popq	%rbx
    00002299: 	popq	%rbp
    0000229a: 	popq	%r12
    0000229c: 	popq	%r13
    0000229e: 	popq	%r14
    000022a0: 	popq	%r15
    000022a2: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 8866
.Ltmp175:
    000022a7: 	leaq	DATAat0x24040(%rip), %rsi
    000022ae: 	movl	$0x1, %edi
    000022b3: 	xorl	%eax, %eax
    000022b5: 	callq	__printf_chk@PLT # Offset: 8885
    000022ba: 	jmp	.Ltmp196 # Offset: 8890
.Ltmp164:
    000022bf: 	leaq	DATAat0x24078(%rip), %rsi
    000022c6: 	movl	$0x1, %edi
    000022cb: 	xorl	%eax, %eax
    000022cd: 	callq	__printf_chk@PLT # Offset: 8909
    000022d2: 	jmp	.Ltmp197 # Offset: 8914
.Ltmp153:
    000022d7: 	leaq	DATAat0x240b0(%rip), %rsi
    000022de: 	movl	$0x1, %edi
    000022e3: 	xorl	%eax, %eax
    000022e5: 	callq	__printf_chk@PLT # Offset: 8933
    000022ea: 	jmp	.Ltmp198 # Offset: 8938
.Ltmp149:
    000022ef: 	leaq	DATAat0x240e8(%rip), %rsi
    000022f6: 	movl	$0x1, %edi
    000022fb: 	xorl	%eax, %eax
    000022fd: 	callq	__printf_chk@PLT # Offset: 8957
    00002302: 	jmp	.Ltmp199 # Offset: 8962
.Ltmp145:
    00002307: 	leaq	DATAat0x24120(%rip), %rsi
    0000230e: 	movl	$0x1, %edi
    00002313: 	xorl	%eax, %eax
    00002315: 	callq	__printf_chk@PLT # Offset: 8981
    0000231a: 	jmp	.Ltmp200 # Offset: 8986
.Ltmp138:
    0000231f: 	leaq	DATAat0x24158(%rip), %rsi
    00002326: 	movl	$0x1, %edi
    0000232b: 	xorl	%eax, %eax
    0000232d: 	callq	__printf_chk@PLT # Offset: 9005
    00002332: 	jmp	.Ltmp201 # Offset: 9010
.Ltmp128:
    00002337: 	leaq	DATAat0x24188(%rip), %rsi
    0000233e: 	movl	$0x1, %edi
    00002343: 	xorl	%eax, %eax
    00002345: 	callq	__printf_chk@PLT # Offset: 9029
    0000234a: 	jmp	.Ltmp202 # Offset: 9034
.Ltmp124:
    0000234f: 	leaq	DATAat0x241b8(%rip), %rsi
    00002356: 	movl	$0x1, %edi
    0000235b: 	xorl	%eax, %eax
    0000235d: 	callq	__printf_chk@PLT # Offset: 9053
    00002362: 	jmp	.Ltmp203 # Offset: 9058
.Ltmp117:
    00002367: 	leaq	DATAat0x241e8(%rip), %rsi
    0000236e: 	movl	$0x1, %edi
    00002373: 	xorl	%eax, %eax
    00002375: 	callq	__printf_chk@PLT # Offset: 9077
    0000237a: 	jmp	.Ltmp204 # Offset: 9082
.Ltmp109:
    0000237f: 	leaq	DATAat0x24218(%rip), %rsi
    00002386: 	movl	$0x1, %edi
    0000238b: 	xorl	%eax, %eax
    0000238d: 	callq	__printf_chk@PLT # Offset: 9101
    00002392: 	jmp	.Ltmp205 # Offset: 9106
.Ltmp107:
    00002397: 	leaq	DATAat0x24248(%rip), %rsi
    0000239e: 	movl	$0x1, %edi
    000023a3: 	xorl	%eax, %eax
    000023a5: 	callq	__printf_chk@PLT # Offset: 9125
    000023aa: 	jmp	.Ltmp206 # Offset: 9130
.Ltmp105:
    000023af: 	leaq	DATAat0x24278(%rip), %rsi
    000023b6: 	movl	$0x1, %edi
    000023bb: 	xorl	%eax, %eax
    000023bd: 	callq	__printf_chk@PLT # Offset: 9149
    000023c2: 	jmp	.Ltmp207 # Offset: 9154
.Ltmp101:
    000023c7: 	leaq	DATAat0x242a8(%rip), %rsi
    000023ce: 	movl	$0x1, %edi
    000023d3: 	xorl	%eax, %eax
    000023d5: 	callq	__printf_chk@PLT # Offset: 9173
    000023da: 	jmp	.Ltmp208 # Offset: 9178
.Ltmp97:
    000023df: 	leaq	DATAat0x242a8(%rip), %rsi
    000023e6: 	movl	$0x1, %edi
    000023eb: 	xorl	%eax, %eax
    000023ed: 	callq	__printf_chk@PLT # Offset: 9197
    000023f2: 	jmp	.Ltmp209 # Offset: 9202
.Ltmp93:
    000023f7: 	leaq	DATAat0x242d8(%rip), %rsi
    000023fe: 	movl	$0x1, %edi
    00002403: 	xorl	%eax, %eax
    00002405: 	callq	__printf_chk@PLT # Offset: 9221
    0000240a: 	jmp	.Ltmp210 # Offset: 9226
.Ltmp89:
    0000240f: 	leaq	DATAat0x24308(%rip), %rsi
    00002416: 	movl	$0x1, %edi
    0000241b: 	xorl	%eax, %eax
    0000241d: 	callq	__printf_chk@PLT # Offset: 9245
    00002422: 	jmp	.Ltmp211 # Offset: 9250
.Ltmp83:
    00002427: 	leaq	DATAat0x24330(%rip), %rsi
    0000242e: 	movl	$0x1, %edi
    00002433: 	xorl	%eax, %eax
    00002435: 	callq	__printf_chk@PLT # Offset: 9269
    0000243a: 	jmp	.Ltmp212 # Offset: 9274
.Ltmp79:
    0000243f: 	leaq	DATAat0x24358(%rip), %rsi
    00002446: 	movl	$0x1, %edi
    0000244b: 	xorl	%eax, %eax
    0000244d: 	callq	__printf_chk@PLT # Offset: 9293
    00002452: 	jmp	.Ltmp213 # Offset: 9298
.Ltmp75:
    00002457: 	leaq	DATAat0x24380(%rip), %rsi
    0000245e: 	movl	$0x1, %edi
    00002463: 	xorl	%eax, %eax
    00002465: 	callq	__printf_chk@PLT # Offset: 9317
    0000246a: 	jmp	.Ltmp214 # Offset: 9322
.Ltmp186:
    0000246f: 	callq	__stack_chk_fail@PLT # Offset: 9327
DWARF CFI Instructions:
    <empty>
End of Function "_Z16verify_matvecmulIiEvPT_S1_S1_ii.constprop.0/1(*2)"

Binary Function "_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_" after disassembly {
  Number      : 82
  State       : disassembled
  Address     : 0x4f90
  Size        : 0x145
  MaxSize     : 0x150
  Offset      : 0x4f90
  Section     : .text
  Orc Section : .local.text._ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB081:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	movq	%rdi, %r12
    0000000d: 	pushq	%rbp
    0000000e: 	movq	%rdx, %rbp
    00000011: 	pushq	%rbx
    00000012: 	leaq	0x10(%rdi), %rbx
    00000016: 	subq	$0x10, %rsp
    0000001a: 	movq	0x8(%rsi), %r13
    0000001e: 	movq	%fs:0x28, %rax
    00000027: 	movq	%rax, 0x8(%rsp)
    0000002c: 	xorl	%eax, %eax
    0000002e: 	movq	%rbx, (%rdi)
    00000031: 	movq	(%rsi), %r14
    00000034: 	movq	%r14, %rax
    00000037: 	addq	%r13, %rax
    0000003a: 	je	.Ltmp215 # Offset: 58
    0000003c: 	testq	%r14, %r14
    0000003f: 	je	.Ltmp216 # Offset: 63
.Ltmp215:
    00000045: 	movq	%r13, (%rsp)
    00000049: 	cmpq	$0xf, %r13
    0000004d: 	ja	.Ltmp217 # Offset: 77
    0000004f: 	cmpq	$0x1, %r13
    00000053: 	jne	.Ltmp218 # Offset: 83
    00000055: 	movzbl	(%r14), %eax
    00000059: 	movb	%al, 0x10(%r12)
    0000005e: 	movq	%rbx, %rax
.Ltmp222:
    00000061: 	movq	%r13, 0x8(%r12)
    00000066: 	movq	%rbp, %rdi
    00000069: 	movb	$0x0, (%rax,%r13)
    0000006e: 	callq	strlen@PLT # Offset: 110
    00000073: 	movq	%rax, %rdx
    00000076: 	movabsq	$0x3fffffffffffffff, %rax
    00000080: 	subq	0x8(%r12), %rax
    00000085: 	cmpq	%rax, %rdx
    00000088: 	ja	.Ltmp219 # Offset: 136
    0000008a: 	movq	%rbp, %rsi
    0000008d: 	movq	%r12, %rdi
    00000090: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 144
    00000095: 	movq	0x8(%rsp), %rax
    0000009a: 	subq	%fs:0x28, %rax
    000000a3: 	jne	.Ltmp220 # Offset: 163
    000000a5: 	addq	$0x10, %rsp
    000000a9: 	movq	%r12, %rax
    000000ac: 	popq	%rbx
    000000ad: 	popq	%rbp
    000000ae: 	popq	%r12
    000000b0: 	popq	%r13
    000000b2: 	popq	%r14
    000000b4: 	retq # Offset: 180
    000000b5: 	nopl	(%rax) # Size: 3
.Ltmp218:
    000000b8: 	testq	%r13, %r13
    000000bb: 	jne	.Ltmp221 # Offset: 187
    000000bd: 	movq	%rbx, %rax
    000000c0: 	jmp	.Ltmp222 # Offset: 192
    000000c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp217:
    000000c8: 	movq	%r12, %rdi
    000000cb: 	movq	%rsp, %rsi
    000000ce: 	xorl	%edx, %edx
    000000d0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 208
    000000d5: 	movq	%rax, (%r12)
    000000d9: 	movq	%rax, %rdi
    000000dc: 	movq	(%rsp), %rax
    000000e0: 	movq	%rax, 0x10(%r12)
.Ltmp223:
    000000e5: 	movq	%r13, %rdx
    000000e8: 	movq	%r14, %rsi
    000000eb: 	callq	memcpy@PLT # Offset: 235
    000000f0: 	movq	(%rsp), %r13
    000000f4: 	movq	(%r12), %rax
    000000f8: 	jmp	.Ltmp222 # Offset: 248
.Ltmp216:
    000000fd: 	leaq	DATAat0x24520(%rip), %rdi
    00000104: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 260
.Ltmp219:
    00000109: 	leaq	DATAat0x2454a(%rip), %rdi
    00000110: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 272
.Ltmp220:
    00000115: 	callq	__stack_chk_fail@PLT # Offset: 277
.Ltmp221:
    0000011a: 	movq	%rbx, %rdi
    0000011d: 	jmp	.Ltmp223 # Offset: 285
    0000011f: 	endbr64
    00000123: 	movq	%rax, %rbp
    00000126: 	movq	(%r12), %rdi
    0000012a: 	cmpq	%rdi, %rbx
    0000012d: 	je	.Ltmp224 # Offset: 301
    0000012f: 	movq	0x10(%r12), %rsi
    00000134: 	addq	$0x1, %rsi
    00000138: 	callq	_ZdlPvm@PLT # Offset: 312
.Ltmp224:
    0000013d: 	movq	%rbp, %rdi
    00000140: 	callq	_Unwind_Resume@PLT # Offset: 320
DWARF CFI Instructions:
    <empty>
End of Function "_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_"

Binary Function "_Z16verify_matvecmulIfEvPT_S1_S1_ii" after disassembly {
  Number      : 83
  State       : disassembled
  Address     : 0x50e0
  Size        : 0x8feb
  MaxSize     : 0x8ff0
  Offset      : 0x50e0
  Section     : .text
  Orc Section : .local.text._Z16verify_matvecmulIfEvPT_S1_S1_ii
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB082:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movq	%rdx, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0xf88, %rsp
    0000001b: 	movl	%ecx, 0x1b8(%rsp)
    00000022: 	leaq	0x2f0(%rsp), %rdi
    0000002a: 	movl	$0x190, %ecx
    0000002f: 	movq	%rsi, 0x38(%rsp)
    00000034: 	movl	%r8d, 0x54(%rsp)
    00000039: 	movq	%fs:0x28, %rax
    00000042: 	movq	%rax, 0xf78(%rsp)
    0000004a: 	xorl	%eax, %eax
    0000004c: 	movq	%rdi, 0x288(%rsp)
    00000054: 	rep		stosq	%rax, %es:(%rdi)
.Ltmp225:
    00000057: 	pxor	%xmm0, %xmm0
    0000005b: 	cvtsi2ss	%rax, %xmm0
    00000060: 	movss	%xmm0, (%r15,%rax,4)
    00000066: 	addq	$0x1, %rax
    0000006a: 	cmpq	$0x258, %rax
    00000070: 	jne	.Ltmp225 # Offset: 112
    00000072: 	movl	0x54(%rsp), %edi
    00000076: 	testl	%edi, %edi
    00000078: 	jle	.Ltmp226 # Offset: 120
    0000007e: 	movl	0x1b8(%rsp), %edi
    00000085: 	testl	%edi, %edi
    00000087: 	jle	.Ltmp227 # Offset: 135
    0000008d: 	movl	%edi, %eax
    0000008f: 	movslq	%edi, %r9
    00000092: 	leal	-0x1(%rdi), %esi
    00000095: 	andl	$-0x4, %edi
    00000098: 	shrl	$0x2, %eax
    0000009b: 	movl	%edi, %r10d
    0000009e: 	shlq	$0x2, %r9
    000000a2: 	movq	%r14, %r8
    000000a5: 	leal	-0x1(%rax), %edx
    000000a8: 	xorl	%ecx, %ecx
    000000aa: 	xorl	%edi, %edi
    000000ac: 	addq	$0x1, %rdx
    000000b0: 	shlq	$0x4, %rdx
.Ltmp231:
    000000b4: 	pxor	%xmm1, %xmm1
    000000b8: 	cvtsi2ss	%edi, %xmm1
    000000bc: 	cmpl	$0x2, %esi
    000000bf: 	jbe	.Ltmp228 # Offset: 191
    000000c5: 	movaps	%xmm1, %xmm0
    000000c8: 	leaq	(%rdx,%r8), %r11
    000000cc: 	movq	%r8, %rax
    000000cf: 	shufps	$0x0, %xmm0, %xmm0
.Ltmp229:
    000000d3: 	movups	%xmm0, (%rax)
    000000d6: 	addq	$0x10, %rax
    000000da: 	cmpq	%r11, %rax
    000000dd: 	jne	.Ltmp229 # Offset: 221
    000000df: 	movl	%r10d, %eax
    000000e2: 	cmpl	0x1b8(%rsp), %r10d
    000000ea: 	je	.Ltmp230 # Offset: 234
.Ltmp504:
    000000ec: 	leal	(%rcx,%rax), %r11d
    000000f0: 	movl	0x1b8(%rsp), %ebx
    000000f7: 	movslq	%r11d, %r11
    000000fa: 	movss	%xmm1, (%r14,%r11,4)
    00000100: 	leal	0x1(%rax), %r11d
    00000104: 	cmpl	%r11d, %ebx
    00000107: 	jle	.Ltmp230 # Offset: 263
    00000109: 	addl	%ecx, %r11d
    0000010c: 	addl	$0x2, %eax
    0000010f: 	movslq	%r11d, %r11
    00000112: 	movss	%xmm1, (%r14,%r11,4)
    00000118: 	cmpl	%eax, %ebx
    0000011a: 	jle	.Ltmp230 # Offset: 282
    0000011c: 	addl	%ecx, %eax
    0000011e: 	cltq
    00000120: 	movss	%xmm1, (%r14,%rax,4)
.Ltmp230:
    00000126: 	addl	$0x1, %edi
    00000129: 	addl	0x1b8(%rsp), %ecx
    00000130: 	addq	%r9, %r8
    00000133: 	cmpl	%edi, 0x54(%rsp)
    00000137: 	jne	.Ltmp231 # Offset: 311
.Ltmp532:
    0000013d: 	movl	0x54(%rsp), %r8d
    00000142: 	movl	%esi, %eax
    00000144: 	movq	0x288(%rsp), %rdi
    0000014c: 	xorl	%ecx, %ecx
    0000014e: 	leaq	0x2f4(%rsp,%rax,4), %rbx
    00000156: 	movl	%r8d, %eax
    00000159: 	movl	%r8d, %r9d
    0000015c: 	leal	-0x1(%r8), %ebp
    00000160: 	shrl	$0x2, %eax
    00000163: 	andl	$-0x4, %r9d
    00000167: 	subl	$0x1, %eax
    0000016a: 	addq	$0x1, %rax
    0000016e: 	shlq	$0x4, %rax
.Ltmp236:
    00000172: 	testl	%r8d, %r8d
    00000175: 	jle	.Ltmp232 # Offset: 373
    0000017b: 	movss	(%rdi), %xmm1
    0000017f: 	cmpl	$0x2, %ebp
    00000182: 	jbe	.Ltmp233 # Offset: 386
    00000188: 	movslq	%ecx, %rdx
    0000018b: 	leaq	(%r14,%rdx,4), %r10
    0000018f: 	xorl	%edx, %edx
.Ltmp234:
    00000191: 	movups	(%r10,%rdx), %xmm0
    00000196: 	movups	(%r15,%rdx), %xmm4
    0000019b: 	addq	$0x10, %rdx
    0000019f: 	mulps	%xmm4, %xmm0
    000001a2: 	addss	%xmm0, %xmm1
    000001a6: 	movaps	%xmm0, %xmm2
    000001a9: 	shufps	$0x55, %xmm0, %xmm2
    000001ad: 	addss	%xmm2, %xmm1
    000001b1: 	movaps	%xmm0, %xmm2
    000001b4: 	unpckhps	%xmm0, %xmm2
    000001b7: 	shufps	$0xff, %xmm0, %xmm0
    000001bb: 	addss	%xmm2, %xmm1
    000001bf: 	addss	%xmm0, %xmm1
    000001c3: 	cmpq	%rax, %rdx
    000001c6: 	jne	.Ltmp234 # Offset: 454
    000001c8: 	movl	%r9d, %edx
    000001cb: 	cmpl	%r8d, %r9d
    000001ce: 	je	.Ltmp235 # Offset: 462
.Ltmp503:
    000001d0: 	leal	(%rcx,%rdx), %r11d
    000001d4: 	movslq	%edx, %r12
    000001d7: 	movslq	%r11d, %r11
    000001da: 	leaq	(,%r12,4), %r10
    000001e2: 	movss	(%r14,%r11,4), %xmm0
    000001e8: 	mulss	(%r15,%r12,4), %xmm0
    000001ee: 	leal	0x1(%rdx), %r11d
    000001f2: 	addss	%xmm0, %xmm1
    000001f6: 	cmpl	%r11d, %r8d
    000001f9: 	jle	.Ltmp235 # Offset: 505
    000001fb: 	addl	%ecx, %r11d
    000001fe: 	addl	$0x2, %edx
    00000201: 	movslq	%r11d, %r11
    00000204: 	movss	(%r14,%r11,4), %xmm0
    0000020a: 	mulss	0x4(%r15,%r10), %xmm0
    00000211: 	addss	%xmm0, %xmm1
    00000215: 	cmpl	%edx, %r8d
    00000218: 	jle	.Ltmp235 # Offset: 536
    0000021a: 	addl	%ecx, %edx
    0000021c: 	movslq	%edx, %rdx
    0000021f: 	movss	(%r14,%rdx,4), %xmm0
    00000225: 	mulss	0x8(%r15,%r10), %xmm0
    0000022c: 	addss	%xmm0, %xmm1
.Ltmp235:
    00000230: 	movss	%xmm1, (%rdi)
.Ltmp232:
    00000234: 	addq	$0x4, %rdi
    00000238: 	addl	%r8d, %ecx
    0000023b: 	cmpq	%rbx, %rdi
    0000023e: 	jne	.Ltmp236 # Offset: 574
    00000244: 	movq	0x38(%rsp), %rax
    00000249: 	leaq	0xc88(%rax), %rdi
    00000250: 	movq	$0x0, (%rax)
    00000257: 	movq	%rdi, 0xc0(%rsp)
    0000025f: 	leaq	0x8(%rax), %rdi
    00000263: 	movq	$0x0, 0xc78(%rax)
    0000026e: 	movq	%rdi, 0xb8(%rsp)
    00000276: 	andq	$-0x8, %rdi
    0000027a: 	subq	%rdi, %rax
    0000027d: 	movq	%rax, %rcx
    00000280: 	xorl	%eax, %eax
    00000282: 	addl	$0xc80, %ecx
    00000288: 	shrl	$0x3, %ecx
    0000028b: 	rep		stosq	%rax, %es:(%rdi)
    0000028e: 	movl	0x54(%rsp), %eax
    00000292: 	testl	%eax, %eax
    00000294: 	jle	.Ltmp237 # Offset: 660
    00000296: 	movslq	0x54(%rsp), %rax
    0000029b: 	movq	0x38(%rsp), %rbx
    000002a0: 	movq	%r14, %rcx
    000002a3: 	movq	%rax, 0x8(%rsp)
    000002a8: 	movq	%rbx, %rdx
    000002ab: 	leaq	0x4(%rbx,%rsi,4), %rsi
    000002b0: 	leaq	(,%rax,4), %rdi
.Ltmp239:
    000002b8: 	movss	(%rdx), %xmm1
    000002bc: 	xorl	%eax, %eax
    000002be: 	nop # Size: 2
.Ltmp238:
    000002c0: 	movss	(%rcx,%rax,4), %xmm0
    000002c5: 	mulss	(%r15,%rax,4), %xmm0
    000002cb: 	addq	$0x1, %rax
    000002cf: 	addss	%xmm0, %xmm1
    000002d3: 	movss	%xmm1, (%rdx)
    000002d7: 	cmpq	0x8(%rsp), %rax
    000002dc: 	jne	.Ltmp238 # Offset: 732
    000002de: 	addq	$0x4, %rdx
    000002e2: 	addq	%rdi, %rcx
    000002e5: 	cmpq	%rsi, %rdx
    000002e8: 	jne	.Ltmp239 # Offset: 744
.Ltmp237:
    000002ea: 	xorl	%eax, %eax
.Ltmp242:
    000002ec: 	movq	0x288(%rsp), %rdi
    000002f4: 	movss	(%rdi,%rax,4), %xmm1
    000002f9: 	movq	0x38(%rsp), %rdi
    000002fe: 	movaps	%xmm1, %xmm2
    00000301: 	andps	DATAat0x24930(%rip), %xmm2
    00000308: 	movaps	%xmm1, %xmm0
    0000030b: 	subss	(%rdi,%rax,4), %xmm0
    00000310: 	cvtss2sd	%xmm2, %xmm2
    00000314: 	comisd	DATAat0x24968(%rip), %xmm2
    0000031c: 	jbe	.Ltmp240 # Offset: 796
    0000031e: 	divss	%xmm1, %xmm0
.Ltmp240:
    00000322: 	movsd	DATAat0x24970(%rip), %xmm3
    0000032a: 	cvtss2sd	%xmm0, %xmm0
    0000032e: 	andpd	DATAat0x24940(%rip), %xmm0
    00000336: 	comisd	%xmm0, %xmm3
    0000033a: 	jbe	.Ltmp241 # Offset: 826
    00000340: 	addq	$0x1, %rax
    00000344: 	cmpq	$0x320, %rax
    0000034a: 	jne	.Ltmp242 # Offset: 842
.Ltmp505:
    0000034c: 	movq	0x38(%rsp), %rax
    00000351: 	movq	$0x0, (%rax)
    00000358: 	movq	0xc0(%rsp), %rdi
    00000360: 	movq	$0x0, -0x10(%rdi)
    00000368: 	movq	0xb8(%rsp), %rdi
    00000370: 	andq	$-0x8, %rdi
    00000374: 	subq	%rdi, %rax
    00000377: 	movq	%rax, %rcx
    0000037a: 	xorl	%eax, %eax
    0000037c: 	addl	$0xc80, %ecx
    00000382: 	shrl	$0x3, %ecx
    00000385: 	rep		stosq	%rax, %es:(%rdi)
    00000388: 	movl	0x54(%rsp), %edx
    0000038c: 	testl	%edx, %edx
    0000038e: 	jle	.Ltmp243 # Offset: 910
    00000394: 	movl	0x1b8(%rsp), %edi
    0000039b: 	testl	%edi, %edi
    0000039d: 	jle	.Ltmp243 # Offset: 925
    000003a3: 	movslq	0x54(%rsp), %rsi
    000003a8: 	movq	0x38(%rsp), %rcx
    000003ad: 	movslq	%edi, %rax
    000003b0: 	movl	%edi, %r8d
    000003b3: 	movq	%r15, 0x60(%rsp)
    000003b8: 	movq	%r15, %r12
    000003bb: 	movq	%r14, %r13
    000003be: 	andl	$-0x4, %r8d
    000003c2: 	leaq	(%rcx,%rax,4), %rbx
    000003c6: 	leaq	(,%rsi,4), %rdx
    000003ce: 	subq	$0x1, %rax
    000003d2: 	movq	%rsi, %r11
    000003d5: 	movq	%rbx, 0x20(%rsp)
    000003da: 	movq	%rdx, %rbx
    000003dd: 	shlq	$0x4, %r11
    000003e1: 	imulq	%rax, %rbx
    000003e5: 	leaq	(%rcx,%rax,4), %rax
    000003e9: 	movq	%rsi, 0x8(%rsp)
    000003ee: 	movq	%rax, 0x30(%rsp)
    000003f3: 	movl	%edi, %eax
    000003f5: 	shrl	$0x2, %eax
    000003f8: 	subl	$0x1, %eax
    000003fb: 	movq	%rbx, 0x28(%rsp)
    00000400: 	leal	-0x1(%rdi), %ebx
    00000403: 	andl	$0x3, %edi
    00000406: 	shlq	$0x4, %rax
    0000040a: 	movl	%edi, 0x58(%rsp)
    0000040e: 	leaq	0x10(%rcx,%rax), %rbp
    00000413: 	leaq	(%rsi,%rsi,2), %rax
    00000417: 	movl	%ebx, 0x40(%rsp)
    0000041b: 	movq	%rcx, %rsi
    0000041e: 	leaq	(,%rax,4), %r10
    00000426: 	movl	%ebx, %eax
    00000428: 	xorl	%ebx, %ebx
    0000042a: 	leaq	0x4(%rcx,%rax,4), %rax
    0000042f: 	movq	%rax, 0x18(%rsp)
.Ltmp249:
    00000434: 	movq	0x28(%rsp), %r9
    00000439: 	leaq	(,%rbx,4), %rax
    00000441: 	movq	%r12, %rcx
    00000444: 	movl	%ebx, %edi
    00000446: 	addq	$0x4, %r12
    0000044a: 	addq	%rax, %r9
    0000044d: 	addq	%r14, %r9
    00000450: 	cmpq	%r9, %rsi
    00000453: 	seta	%r9b
    00000457: 	addq	%r14, %rax
    0000045a: 	cmpq	%rax, 0x30(%rsp)
    0000045f: 	setb	%al
    00000462: 	orb	%r9b, %al
    00000465: 	je	.Ltmp244 # Offset: 1125
    0000046b: 	cmpq	%r12, %rsi
    0000046e: 	setae	%r9b
    00000472: 	cmpq	%rcx, 0x20(%rsp)
    00000477: 	setbe	%al
    0000047a: 	orl	%r9d, %eax
    0000047d: 	cmpl	$0x1, 0x1b8(%rsp)
    00000485: 	setne	%r9b
    00000489: 	testb	%r9b, %al
    0000048c: 	je	.Ltmp244 # Offset: 1164
    00000492: 	cmpl	$0x2, 0x40(%rsp)
    00000497: 	jbe	.Ltmp245 # Offset: 1175
    0000049d: 	movss	(%rcx), %xmm3
    000004a1: 	movq	%r13, %rax
    000004a4: 	movq	%rsi, %r9
    000004a7: 	shufps	$0x0, %xmm3, %xmm3
.Ltmp246:
    000004ab: 	movss	(%rax,%r10), %xmm0
    000004b1: 	movss	(%rax,%rdx,2), %xmm1
    000004b6: 	addq	$0x10, %r9
    000004ba: 	movss	(%rax,%rdx), %xmm2
    000004bf: 	movups	-0x10(%r9), %xmm4
    000004c4: 	unpcklps	%xmm0, %xmm1
    000004c7: 	movss	(%rax), %xmm0
    000004cb: 	addq	%r11, %rax
    000004ce: 	unpcklps	%xmm2, %xmm0
    000004d1: 	movlhps	%xmm1, %xmm0
    000004d4: 	mulps	%xmm3, %xmm0
    000004d7: 	addps	%xmm4, %xmm0
    000004da: 	movups	%xmm0, -0x10(%r9)
    000004df: 	cmpq	%rbp, %r9
    000004e2: 	jne	.Ltmp246 # Offset: 1250
    000004e4: 	cmpl	%r8d, 0x1b8(%rsp)
    000004ec: 	je	.Ltmp247 # Offset: 1260
    000004f2: 	movl	0x58(%rsp), %eax
    000004f6: 	movl	%eax, %r15d
    000004f9: 	cmpl	$0x1, %eax
    000004fc: 	je	.Ltmp248 # Offset: 1276
    00000502: 	movl	%r8d, 0x10(%rsp)
    00000507: 	movl	%r8d, %eax
.Ltmp502:
    0000050a: 	leaq	(%rsi,%rax,4), %r9
    0000050e: 	movss	(%rcx), %xmm1
    00000512: 	imulq	0x8(%rsp), %rax
    00000518: 	shufps	$0xe0, %xmm1, %xmm1
    0000051c: 	addq	%rbx, %rax
    0000051f: 	leaq	(%r14,%rax,4), %rax
    00000523: 	movss	(%rax,%rdx), %xmm2
    00000528: 	movss	(%rax), %xmm0
    0000052c: 	movl	0x10(%rsp), %eax
    00000530: 	unpcklps	%xmm2, %xmm0
    00000533: 	mulps	%xmm1, %xmm0
    00000536: 	movq	(%r9), %xmm1
    0000053b: 	addps	%xmm1, %xmm0
    0000053e: 	movlps	%xmm0, (%r9)
    00000542: 	movl	%r15d, %r9d
    00000545: 	andl	$-0x2, %r9d
    00000549: 	addl	%r9d, %eax
    0000054c: 	cmpl	%r9d, %r15d
    0000054f: 	je	.Ltmp247 # Offset: 1359
.Ltmp531:
    00000551: 	movslq	%eax, %r9
    00000554: 	imull	0x54(%rsp), %eax
    00000559: 	leaq	(%rsi,%r9,4), %r9
    0000055d: 	addl	%edi, %eax
    0000055f: 	cltq
    00000561: 	movss	(%r14,%rax,4), %xmm0
    00000567: 	mulss	(%rcx), %xmm0
    0000056b: 	addss	(%r9), %xmm0
    00000570: 	movss	%xmm0, (%r9)
.Ltmp247:
    00000575: 	addq	$0x1, %rbx
    00000579: 	addq	$0x4, %r13
    0000057d: 	cmpq	0x8(%rsp), %rbx
    00000582: 	jne	.Ltmp249 # Offset: 1410
    00000588: 	movq	0x60(%rsp), %r15
.Ltmp243:
    0000058d: 	xorl	%eax, %eax
.Ltmp252:
    0000058f: 	movq	0x288(%rsp), %rdi
    00000597: 	movss	(%rdi,%rax,4), %xmm1
    0000059c: 	movq	0x38(%rsp), %rdi
    000005a1: 	movaps	%xmm1, %xmm2
    000005a4: 	andps	DATAat0x24930(%rip), %xmm2
    000005ab: 	movaps	%xmm1, %xmm0
    000005ae: 	subss	(%rdi,%rax,4), %xmm0
    000005b3: 	cvtss2sd	%xmm2, %xmm2
    000005b7: 	comisd	DATAat0x24968(%rip), %xmm2
    000005bf: 	jbe	.Ltmp250 # Offset: 1471
    000005c1: 	divss	%xmm1, %xmm0
.Ltmp250:
    000005c5: 	movsd	DATAat0x24970(%rip), %xmm3
    000005cd: 	cvtss2sd	%xmm0, %xmm0
    000005d1: 	andpd	DATAat0x24940(%rip), %xmm0
    000005d9: 	comisd	%xmm0, %xmm3
    000005dd: 	jbe	.Ltmp251 # Offset: 1501
    000005e3: 	addq	$0x1, %rax
    000005e7: 	cmpq	$0x320, %rax
    000005ed: 	jne	.Ltmp252 # Offset: 1517
.Ltmp530:
    000005ef: 	movq	0x38(%rsp), %rax
    000005f4: 	movq	$0x0, (%rax)
    000005fb: 	movq	0xc0(%rsp), %rdi
    00000603: 	movq	$0x0, -0x10(%rdi)
    0000060b: 	movq	0xb8(%rsp), %rdi
    00000613: 	andq	$-0x8, %rdi
    00000617: 	subq	%rdi, %rax
    0000061a: 	movq	%rax, %rcx
    0000061d: 	xorl	%eax, %eax
    0000061f: 	addl	$0xc80, %ecx
    00000625: 	shrl	$0x3, %ecx
    00000628: 	rep		stosq	%rax, %es:(%rdi)
    0000062b: 	movl	0x1b8(%rsp), %ecx
    00000632: 	testl	%ecx, %ecx
    00000634: 	jle	.Ltmp253 # Offset: 1588
    0000063a: 	movl	0x1b8(%rsp), %eax
    00000641: 	movl	0x54(%rsp), %r8d
    00000646: 	xorl	%ecx, %ecx
    00000648: 	movq	0x38(%rsp), %rdi
    0000064d: 	subl	$0x1, %eax
    00000650: 	movl	%r8d, %r10d
    00000653: 	leal	-0x1(%r8), %ebx
    00000657: 	leaq	0x4(%rdi,%rax,4), %r11
    0000065c: 	movl	%r8d, %eax
    0000065f: 	movq	%rdi, %rsi
    00000662: 	andl	$-0x4, %r10d
    00000666: 	shrl	$0x2, %eax
    00000669: 	subl	$0x1, %eax
    0000066c: 	addq	$0x1, %rax
    00000670: 	shlq	$0x4, %rax
.Ltmp257:
    00000674: 	movss	(%rsi), %xmm1
    00000678: 	testl	%r8d, %r8d
    0000067b: 	jle	.Ltmp254 # Offset: 1659
    00000681: 	cmpl	$0x2, %ebx
    00000684: 	jbe	.Ltmp255 # Offset: 1668
    0000068a: 	movslq	%ecx, %rdx
    0000068d: 	leaq	(%r14,%rdx,4), %rdi
    00000691: 	xorl	%edx, %edx
.Ltmp256:
    00000693: 	movups	(%rdi,%rdx), %xmm0
    00000697: 	movups	(%r15,%rdx), %xmm4
    0000069c: 	addq	$0x10, %rdx
    000006a0: 	mulps	%xmm4, %xmm0
    000006a3: 	addss	%xmm0, %xmm1
    000006a7: 	movaps	%xmm0, %xmm2
    000006aa: 	shufps	$0x55, %xmm0, %xmm2
    000006ae: 	addss	%xmm2, %xmm1
    000006b2: 	movaps	%xmm0, %xmm2
    000006b5: 	unpckhps	%xmm0, %xmm2
    000006b8: 	shufps	$0xff, %xmm0, %xmm0
    000006bc: 	addss	%xmm2, %xmm1
    000006c0: 	addss	%xmm0, %xmm1
    000006c4: 	cmpq	%rdx, %rax
    000006c7: 	jne	.Ltmp256 # Offset: 1735
    000006c9: 	movl	%r10d, %edx
    000006cc: 	cmpl	%r10d, %r8d
    000006cf: 	je	.Ltmp254 # Offset: 1743
.Ltmp501:
    000006d1: 	leal	(%rcx,%rdx), %edi
    000006d4: 	movslq	%edx, %rbp
    000006d7: 	movslq	%edi, %rdi
    000006da: 	leaq	(,%rbp,4), %r9
    000006e2: 	movss	(%r14,%rdi,4), %xmm0
    000006e8: 	mulss	(%r15,%rbp,4), %xmm0
    000006ee: 	leal	0x1(%rdx), %edi
    000006f1: 	addss	%xmm0, %xmm1
    000006f5: 	cmpl	%edi, %r8d
    000006f8: 	jle	.Ltmp254 # Offset: 1784
    000006fa: 	addl	%ecx, %edi
    000006fc: 	addl	$0x2, %edx
    000006ff: 	movslq	%edi, %rdi
    00000702: 	movss	(%r14,%rdi,4), %xmm0
    00000708: 	mulss	0x4(%r15,%r9), %xmm0
    0000070f: 	addss	%xmm0, %xmm1
    00000713: 	cmpl	%edx, %r8d
    00000716: 	jle	.Ltmp254 # Offset: 1814
    00000718: 	addl	%ecx, %edx
    0000071a: 	movslq	%edx, %rdx
    0000071d: 	movss	(%r14,%rdx,4), %xmm0
    00000723: 	mulss	0x8(%r15,%r9), %xmm0
    0000072a: 	addss	%xmm0, %xmm1
.Ltmp254:
    0000072e: 	movss	%xmm1, (%rsi)
    00000732: 	addq	$0x4, %rsi
    00000736: 	addl	%r8d, %ecx
    00000739: 	cmpq	%rsi, %r11
    0000073c: 	jne	.Ltmp257 # Offset: 1852
.Ltmp253:
    00000742: 	xorl	%eax, %eax
.Ltmp260:
    00000744: 	movq	0x288(%rsp), %rdi
    0000074c: 	movss	(%rdi,%rax,4), %xmm1
    00000751: 	movq	0x38(%rsp), %rdi
    00000756: 	movaps	%xmm1, %xmm2
    00000759: 	andps	DATAat0x24930(%rip), %xmm2
    00000760: 	movaps	%xmm1, %xmm0
    00000763: 	subss	(%rdi,%rax,4), %xmm0
    00000768: 	cvtss2sd	%xmm2, %xmm2
    0000076c: 	comisd	DATAat0x24968(%rip), %xmm2
    00000774: 	jbe	.Ltmp258 # Offset: 1908
    00000776: 	divss	%xmm1, %xmm0
.Ltmp258:
    0000077a: 	movsd	DATAat0x24970(%rip), %xmm3
    00000782: 	cvtss2sd	%xmm0, %xmm0
    00000786: 	andpd	DATAat0x24940(%rip), %xmm0
    0000078e: 	comisd	%xmm0, %xmm3
    00000792: 	jbe	.Ltmp259 # Offset: 1938
    00000798: 	addq	$0x1, %rax
    0000079c: 	cmpq	$0x320, %rax
    000007a2: 	jne	.Ltmp260 # Offset: 1954
.Ltmp529:
    000007a4: 	movq	0x38(%rsp), %rax
    000007a9: 	movq	$0x0, (%rax)
    000007b0: 	movq	0xc0(%rsp), %rdi
    000007b8: 	movq	$0x0, -0x10(%rdi)
    000007c0: 	movq	0xb8(%rsp), %rdi
    000007c8: 	andq	$-0x8, %rdi
    000007cc: 	subq	%rdi, %rax
    000007cf: 	movq	%rax, %rcx
    000007d2: 	xorl	%eax, %eax
    000007d4: 	addl	$0xc80, %ecx
    000007da: 	shrl	$0x3, %ecx
    000007dd: 	rep		stosq	%rax, %es:(%rdi)
    000007e0: 	movl	0x1b8(%rsp), %esi
    000007e7: 	testl	%esi, %esi
    000007e9: 	jle	.Ltmp261 # Offset: 2025
    000007ef: 	movslq	0x54(%rsp), %rax
    000007f4: 	movq	0x38(%rsp), %rsi
    000007f9: 	xorl	%ecx, %ecx
    000007fb: 	movq	%rax, %rdi
    000007fe: 	movq	%rax, 0x8(%rsp)
    00000803: 	movl	0x1b8(%rsp), %eax
    0000080a: 	movq	%rsi, %r9
    0000080d: 	movl	%edi, %r10d
    00000810: 	leal	-0x1(%rdi), %ebx
    00000813: 	subl	$0x1, %eax
    00000816: 	andl	$-0x4, %r10d
    0000081a: 	leaq	0x4(%rsi,%rax,4), %r11
    0000081f: 	movl	%edi, %eax
    00000821: 	shrl	$0x2, %eax
    00000824: 	subl	$0x1, %eax
    00000827: 	addq	$0x1, %rax
    0000082b: 	shlq	$0x4, %rax
.Ltmp265:
    0000082f: 	movss	(%r9), %xmm1
    00000834: 	testl	%edi, %edi
    00000836: 	jle	.Ltmp262 # Offset: 2102
    0000083c: 	cmpl	$0x2, %ebx
    0000083f: 	jbe	.Ltmp263 # Offset: 2111
    00000845: 	leaq	(%r14,%rcx,4), %rsi
    00000849: 	xorl	%edx, %edx
.Ltmp264:
    0000084b: 	movups	(%rsi,%rdx), %xmm0
    0000084f: 	movups	(%r15,%rdx), %xmm4
    00000854: 	addq	$0x10, %rdx
    00000858: 	mulps	%xmm4, %xmm0
    0000085b: 	addss	%xmm0, %xmm1
    0000085f: 	movaps	%xmm0, %xmm2
    00000862: 	shufps	$0x55, %xmm0, %xmm2
    00000866: 	addss	%xmm2, %xmm1
    0000086a: 	movaps	%xmm0, %xmm2
    0000086d: 	unpckhps	%xmm0, %xmm2
    00000870: 	shufps	$0xff, %xmm0, %xmm0
    00000874: 	addss	%xmm2, %xmm1
    00000878: 	addss	%xmm0, %xmm1
    0000087c: 	cmpq	%rdx, %rax
    0000087f: 	jne	.Ltmp264 # Offset: 2175
    00000881: 	movl	%r10d, %edx
    00000884: 	cmpl	%r10d, %edi
    00000887: 	je	.Ltmp262 # Offset: 2183
.Ltmp499:
    00000889: 	movslq	%edx, %rsi
    0000088c: 	leaq	(%rcx,%rsi), %rbp
    00000890: 	leaq	(,%rsi,4), %r8
    00000898: 	movss	(%r14,%rbp,4), %xmm0
    0000089e: 	mulss	(%r15,%rsi,4), %xmm0
    000008a4: 	leal	0x1(%rdx), %esi
    000008a7: 	addss	%xmm0, %xmm1
    000008ab: 	cmpl	%esi, %edi
    000008ad: 	jle	.Ltmp262 # Offset: 2221
    000008af: 	movslq	%esi, %rsi
    000008b2: 	addl	$0x2, %edx
    000008b5: 	addq	%rcx, %rsi
    000008b8: 	movss	(%r14,%rsi,4), %xmm0
    000008be: 	mulss	0x4(%r15,%r8), %xmm0
    000008c5: 	addss	%xmm0, %xmm1
    000008c9: 	cmpl	%edx, %edi
    000008cb: 	jle	.Ltmp262 # Offset: 2251
    000008cd: 	movslq	%edx, %rdx
    000008d0: 	addq	%rcx, %rdx
    000008d3: 	movss	(%r14,%rdx,4), %xmm0
    000008d9: 	mulss	0x8(%r15,%r8), %xmm0
    000008e0: 	addss	%xmm0, %xmm1
.Ltmp262:
    000008e4: 	movss	%xmm1, (%r9)
    000008e9: 	addq	$0x4, %r9
    000008ed: 	addq	0x8(%rsp), %rcx
    000008f2: 	cmpq	%r9, %r11
    000008f5: 	jne	.Ltmp265 # Offset: 2293
.Ltmp261:
    000008fb: 	xorl	%eax, %eax
.Ltmp268:
    000008fd: 	movq	0x288(%rsp), %rdi
    00000905: 	movss	(%rdi,%rax,4), %xmm1
    0000090a: 	movq	0x38(%rsp), %rdi
    0000090f: 	movaps	%xmm1, %xmm2
    00000912: 	andps	DATAat0x24930(%rip), %xmm2
    00000919: 	movaps	%xmm1, %xmm0
    0000091c: 	subss	(%rdi,%rax,4), %xmm0
    00000921: 	cvtss2sd	%xmm2, %xmm2
    00000925: 	comisd	DATAat0x24968(%rip), %xmm2
    0000092d: 	jbe	.Ltmp266 # Offset: 2349
    0000092f: 	divss	%xmm1, %xmm0
.Ltmp266:
    00000933: 	movsd	DATAat0x24970(%rip), %xmm3
    0000093b: 	cvtss2sd	%xmm0, %xmm0
    0000093f: 	andpd	DATAat0x24940(%rip), %xmm0
    00000947: 	comisd	%xmm0, %xmm3
    0000094b: 	jbe	.Ltmp267 # Offset: 2379
    00000951: 	addq	$0x1, %rax
    00000955: 	cmpq	$0x320, %rax
    0000095b: 	jne	.Ltmp268 # Offset: 2395
.Ltmp528:
    0000095d: 	movq	0x38(%rsp), %rax
    00000962: 	movq	$0x0, (%rax)
    00000969: 	movq	0xc0(%rsp), %rdi
    00000971: 	movq	$0x0, -0x10(%rdi)
    00000979: 	movq	0xb8(%rsp), %rdi
    00000981: 	andq	$-0x8, %rdi
    00000985: 	subq	%rdi, %rax
    00000988: 	movq	%rax, %rcx
    0000098b: 	xorl	%eax, %eax
    0000098d: 	addl	$0xc80, %ecx
    00000993: 	shrl	$0x3, %ecx
    00000996: 	rep		stosq	%rax, %es:(%rdi)
    00000999: 	movl	0x54(%rsp), %edi
    0000099d: 	testl	%edi, %edi
    0000099f: 	jle	.Ltmp269 # Offset: 2463
    000009a5: 	movl	0x1b8(%rsp), %edx
    000009ac: 	testl	%edx, %edx
    000009ae: 	jle	.Ltmp269 # Offset: 2478
    000009b4: 	movslq	0x54(%rsp), %rsi
    000009b9: 	movq	0x38(%rsp), %r10
    000009be: 	movslq	%edx, %rax
    000009c1: 	movl	%edx, %r11d
    000009c4: 	subq	$0x1, %rax
    000009c8: 	andl	$-0x4, %r11d
    000009cc: 	movq	%r14, %rbx
    000009cf: 	leaq	(,%rsi,4), %rcx
    000009d7: 	movq	%rsi, %r8
    000009da: 	movq	%rsi, 0x8(%rsp)
    000009df: 	movq	%rcx, %rdi
    000009e2: 	imulq	%rax, %rdi
    000009e6: 	leaq	(%r10,%rax,4), %rax
    000009ea: 	movq	%rax, 0x40(%rsp)
    000009ef: 	movl	%edx, %eax
    000009f1: 	shrl	$0x2, %eax
    000009f4: 	subl	$0x1, %eax
    000009f7: 	movq	%rdi, 0x30(%rsp)
    000009fc: 	movq	%rsi, %rdi
    000009ff: 	leaq	(%rsi,%rsi,2), %rsi
    00000a03: 	shlq	$0x4, %rax
    00000a07: 	shlq	$0x4, %rdi
    00000a0b: 	leaq	0x10(%r10,%rax), %r9
    00000a10: 	movl	%r11d, %eax
    00000a13: 	shlq	$0x2, %rsi
    00000a17: 	leaq	(%r10,%rax,4), %r13
    00000a1b: 	movl	%r8d, %eax
    00000a1e: 	imull	%r11d, %eax
    00000a22: 	movl	%eax, 0x18(%rsp)
    00000a26: 	leal	0x1(%r11), %eax
    00000a2a: 	movq	%rax, %rbp
    00000a2d: 	leaq	(%r10,%rax,4), %rax
    00000a31: 	movq	%rax, 0x20(%rsp)
    00000a36: 	movl	%r8d, %eax
    00000a39: 	imull	%ebp, %eax
    00000a3c: 	movl	%eax, 0x28(%rsp)
    00000a40: 	leal	0x2(%r11), %eax
    00000a44: 	movq	%rax, %r12
    00000a47: 	leaq	(%r10,%rax,4), %rax
    00000a4b: 	imull	%r12d, %r8d
    00000a4f: 	movq	%rax, 0x58(%rsp)
    00000a54: 	leal	-0x1(%rdx), %eax
    00000a57: 	movl	%eax, 0x70(%rsp)
    00000a5b: 	leaq	0x4(%r10,%rax,4), %rax
    00000a60: 	xorl	%r10d, %r10d
    00000a63: 	movq	%rax, 0x10(%rsp)
    00000a68: 	movl	%r8d, 0x60(%rsp)
.Ltmp273:
    00000a6d: 	movq	0x30(%rsp), %rdx
    00000a72: 	leaq	(,%r10,4), %rax
    00000a7a: 	movss	(%r15,%r10,4), %xmm3
    00000a80: 	movl	%r10d, %r8d
    00000a83: 	addq	%rax, %rdx
    00000a86: 	addq	%r14, %rdx
    00000a89: 	cmpq	%rdx, 0x38(%rsp)
    00000a8e: 	seta	%dl
    00000a91: 	addq	%r14, %rax
    00000a94: 	cmpq	%rax, 0x40(%rsp)
    00000a99: 	setb	%al
    00000a9c: 	orb	%dl, %al
    00000a9e: 	je	.Ltmp270 # Offset: 2718
    00000aa4: 	movaps	%xmm3, %xmm4
    00000aa7: 	cmpl	$0x2, 0x70(%rsp)
    00000aac: 	movq	0x38(%rsp), %rdx
    00000ab1: 	movq	%rbx, %rax
    00000ab4: 	shufps	$0x0, %xmm4, %xmm4
    00000ab8: 	jbe	.Ltmp270 # Offset: 2744
.Ltmp271:
    00000abe: 	movss	(%rax,%rsi), %xmm0
    00000ac3: 	movss	(%rax,%rcx,2), %xmm1
    00000ac8: 	addq	$0x10, %rdx
    00000acc: 	movss	(%rax,%rcx), %xmm2
    00000ad1: 	movups	-0x10(%rdx), %xmm7
    00000ad5: 	unpcklps	%xmm0, %xmm1
    00000ad8: 	movss	(%rax), %xmm0
    00000adc: 	addq	%rdi, %rax
    00000adf: 	unpcklps	%xmm2, %xmm0
    00000ae2: 	movlhps	%xmm1, %xmm0
    00000ae5: 	mulps	%xmm4, %xmm0
    00000ae8: 	addps	%xmm7, %xmm0
    00000aeb: 	movups	%xmm0, -0x10(%rdx)
    00000aef: 	cmpq	%rdx, %r9
    00000af2: 	jne	.Ltmp271 # Offset: 2802
    00000af4: 	movl	0x1b8(%rsp), %edx
    00000afb: 	cmpl	%r11d, %edx
    00000afe: 	je	.Ltmp272 # Offset: 2814
    00000b00: 	movl	0x18(%rsp), %eax
    00000b04: 	addl	%r8d, %eax
    00000b07: 	cltq
    00000b09: 	movss	(%r14,%rax,4), %xmm0
    00000b0f: 	mulss	%xmm3, %xmm0
    00000b13: 	addss	(%r13), %xmm0
    00000b19: 	movss	%xmm0, (%r13)
    00000b1f: 	cmpl	%ebp, %edx
    00000b21: 	jle	.Ltmp272 # Offset: 2849
    00000b23: 	movl	0x28(%rsp), %eax
    00000b27: 	addl	%r8d, %eax
    00000b2a: 	cltq
    00000b2c: 	movss	(%r14,%rax,4), %xmm0
    00000b32: 	movq	0x20(%rsp), %rax
    00000b37: 	mulss	%xmm3, %xmm0
    00000b3b: 	addss	(%rax), %xmm0
    00000b3f: 	movss	%xmm0, (%rax)
    00000b43: 	cmpl	%r12d, %edx
    00000b46: 	jle	.Ltmp272 # Offset: 2886
    00000b48: 	movl	0x60(%rsp), %eax
    00000b4c: 	addl	%r8d, %eax
    00000b4f: 	cltq
    00000b51: 	mulss	(%r14,%rax,4), %xmm3
    00000b57: 	movq	0x58(%rsp), %rax
    00000b5c: 	addss	(%rax), %xmm3
    00000b60: 	movss	%xmm3, (%rax)
.Ltmp272:
    00000b64: 	addq	$0x1, %r10
    00000b68: 	addq	$0x4, %rbx
    00000b6c: 	cmpq	%r10, 0x8(%rsp)
    00000b71: 	jne	.Ltmp273 # Offset: 2929
.Ltmp269:
    00000b77: 	xorl	%eax, %eax
.Ltmp276:
    00000b79: 	movq	0x288(%rsp), %rdi
    00000b81: 	movss	(%rdi,%rax,4), %xmm1
    00000b86: 	movq	0x38(%rsp), %rdi
    00000b8b: 	movaps	%xmm1, %xmm2
    00000b8e: 	andps	DATAat0x24930(%rip), %xmm2
    00000b95: 	movaps	%xmm1, %xmm0
    00000b98: 	subss	(%rdi,%rax,4), %xmm0
    00000b9d: 	cvtss2sd	%xmm2, %xmm2
    00000ba1: 	comisd	DATAat0x24968(%rip), %xmm2
    00000ba9: 	jbe	.Ltmp274 # Offset: 2985
    00000bab: 	divss	%xmm1, %xmm0
.Ltmp274:
    00000baf: 	movsd	DATAat0x24970(%rip), %xmm4
    00000bb7: 	cvtss2sd	%xmm0, %xmm0
    00000bbb: 	andpd	DATAat0x24940(%rip), %xmm0
    00000bc3: 	comisd	%xmm0, %xmm4
    00000bc7: 	jbe	.Ltmp275 # Offset: 3015
    00000bcd: 	addq	$0x1, %rax
    00000bd1: 	cmpq	$0x320, %rax
    00000bd7: 	jne	.Ltmp276 # Offset: 3031
.Ltmp527:
    00000bd9: 	movq	0x38(%rsp), %rax
    00000bde: 	movq	$0x0, (%rax)
    00000be5: 	movq	0xc0(%rsp), %rdi
    00000bed: 	movq	$0x0, -0x10(%rdi)
    00000bf5: 	movq	0xb8(%rsp), %rdi
    00000bfd: 	andq	$-0x8, %rdi
    00000c01: 	subq	%rdi, %rax
    00000c04: 	movq	%rax, %rcx
    00000c07: 	xorl	%eax, %eax
    00000c09: 	addl	$0xc80, %ecx
    00000c0f: 	shrl	$0x3, %ecx
    00000c12: 	rep		stosq	%rax, %es:(%rdi)
    00000c15: 	movl	0x54(%rsp), %eax
    00000c19: 	movl	0x1b8(%rsp), %r8d
    00000c21: 	subl	$0x3, %eax
    00000c24: 	movl	%eax, 0x98(%rsp)
    00000c2b: 	testl	%r8d, %r8d
    00000c2e: 	jle	.Ltmp277 # Offset: 3118
    00000c34: 	movslq	0x54(%rsp), %rax
    00000c39: 	movq	0x38(%rsp), %rdi
    00000c3e: 	xorl	%ebx, %ebx
    00000c40: 	movq	%rax, %r8
    00000c43: 	movq	%rax, 0x8(%rsp)
    00000c48: 	movl	0x1b8(%rsp), %eax
    00000c4f: 	movq	%rdi, %r11
    00000c52: 	subl	$0x1, %eax
    00000c55: 	leaq	0x4(%rdi,%rax,4), %rbp
    00000c5a: 	leal	-0x4(%r8), %eax
    00000c5e: 	shrl	$0x2, %eax
    00000c61: 	leal	0x1(%rax), %r10d
    00000c65: 	leal	(,%r10,4), %r12d
.Ltmp283:
    00000c6d: 	movl	0x98(%rsp), %esi
    00000c74: 	movss	(%r11), %xmm1
    00000c79: 	leaq	(%r14,%rbx,4), %rcx
    00000c7d: 	testl	%esi, %esi
    00000c7f: 	jle	.Ltmp278 # Offset: 3199
    00000c85: 	pxor	%xmm2, %xmm2
    00000c89: 	xorl	%eax, %eax
    00000c8b: 	xorl	%edx, %edx
    00000c8d: 	movss	%xmm1, %xmm2
    00000c91: 	nopl	(%rax) # Size: 7
.Ltmp279:
    00000c98: 	movups	(%rcx,%rax), %xmm0
    00000c9c: 	movups	(%r15,%rax), %xmm4
    00000ca1: 	addl	$0x1, %edx
    00000ca4: 	addq	$0x10, %rax
    00000ca8: 	mulps	%xmm4, %xmm0
    00000cab: 	addps	%xmm0, %xmm2
    00000cae: 	cmpl	%edx, %r10d
    00000cb1: 	ja	.Ltmp279 # Offset: 3249
    00000cb3: 	movaps	%xmm2, %xmm5
    00000cb6: 	movaps	%xmm2, %xmm4
    00000cb9: 	movaps	%xmm2, %xmm1
    00000cbc: 	movl	%r12d, %esi
    00000cbf: 	unpckhps	%xmm2, %xmm4
    00000cc2: 	shufps	$0x55, %xmm2, %xmm5
    00000cc6: 	shufps	$0xff, %xmm2, %xmm2
    00000cca: 	movaps	%xmm2, %xmm3
.Ltmp422:
    00000ccd: 	cmpl	%esi, %r8d
    00000cd0: 	jle	.Ltmp280 # Offset: 3280
    00000cd6: 	movl	%r8d, %r13d
    00000cd9: 	subl	%esi, %r13d
    00000cdc: 	leal	-0x1(%r13), %eax
    00000ce0: 	cmpl	$0x2, %eax
    00000ce3: 	jbe	.Ltmp281 # Offset: 3299
    00000ce5: 	movslq	%esi, %rax
    00000ce8: 	leaq	(%rax,%rbx), %rdx
    00000cec: 	leaq	(%r15,%rax,4), %rdi
    00000cf0: 	xorl	%eax, %eax
    00000cf2: 	leaq	(%r14,%rdx,4), %r9
    00000cf6: 	movl	%r13d, %edx
    00000cf9: 	shrl	$0x2, %edx
    00000cfc: 	shlq	$0x4, %rdx
.Ltmp282:
    00000d00: 	movups	(%r9,%rax), %xmm0
    00000d05: 	movups	(%rdi,%rax), %xmm7
    00000d09: 	addq	$0x10, %rax
    00000d0d: 	mulps	%xmm7, %xmm0
    00000d10: 	addss	%xmm0, %xmm1
    00000d14: 	movaps	%xmm0, %xmm2
    00000d17: 	shufps	$0x55, %xmm0, %xmm2
    00000d1b: 	addss	%xmm2, %xmm1
    00000d1f: 	movaps	%xmm0, %xmm2
    00000d22: 	unpckhps	%xmm0, %xmm2
    00000d25: 	shufps	$0xff, %xmm0, %xmm0
    00000d29: 	addss	%xmm2, %xmm1
    00000d2d: 	addss	%xmm0, %xmm1
    00000d31: 	cmpq	%rdx, %rax
    00000d34: 	jne	.Ltmp282 # Offset: 3380
    00000d36: 	movl	%r13d, %eax
    00000d39: 	andl	$-0x4, %eax
    00000d3c: 	addl	%eax, %esi
    00000d3e: 	cmpl	%eax, %r13d
    00000d41: 	je	.Ltmp280 # Offset: 3393
.Ltmp281:
    00000d43: 	movslq	%esi, %rdx
    00000d46: 	movss	(%r15,%rdx,4), %xmm0
    00000d4c: 	mulss	(%rcx,%rdx,4), %xmm0
    00000d51: 	leaq	(,%rdx,4), %rax
    00000d59: 	leal	0x1(%rsi), %edx
    00000d5c: 	addss	%xmm0, %xmm1
    00000d60: 	cmpl	%edx, %r8d
    00000d63: 	jle	.Ltmp280 # Offset: 3427
    00000d65: 	movss	0x4(%r15,%rax), %xmm0
    00000d6c: 	mulss	0x4(%rcx,%rax), %xmm0
    00000d72: 	addl	$0x2, %esi
    00000d75: 	addss	%xmm0, %xmm1
    00000d79: 	cmpl	%esi, %r8d
    00000d7c: 	jle	.Ltmp280 # Offset: 3452
    00000d7e: 	movss	0x8(%rcx,%rax), %xmm0
    00000d84: 	mulss	0x8(%r15,%rax), %xmm0
    00000d8b: 	addss	%xmm0, %xmm1
.Ltmp280:
    00000d8f: 	addss	%xmm5, %xmm1
    00000d93: 	addq	$0x4, %r11
    00000d97: 	addq	0x8(%rsp), %rbx
    00000d9c: 	addss	%xmm4, %xmm1
    00000da0: 	movaps	%xmm1, %xmm0
    00000da3: 	addss	%xmm3, %xmm0
    00000da7: 	movss	%xmm0, -0x4(%r11)
    00000dad: 	cmpq	%r11, %rbp
    00000db0: 	jne	.Ltmp283 # Offset: 3504
.Ltmp277:
    00000db6: 	xorl	%eax, %eax
.Ltmp286:
    00000db8: 	movq	0x288(%rsp), %rdi
    00000dc0: 	movss	(%rdi,%rax,4), %xmm1
    00000dc5: 	movq	0x38(%rsp), %rdi
    00000dca: 	movaps	%xmm1, %xmm2
    00000dcd: 	andps	DATAat0x24930(%rip), %xmm2
    00000dd4: 	movaps	%xmm1, %xmm0
    00000dd7: 	subss	(%rdi,%rax,4), %xmm0
    00000ddc: 	cvtss2sd	%xmm2, %xmm2
    00000de0: 	comisd	DATAat0x24968(%rip), %xmm2
    00000de8: 	jbe	.Ltmp284 # Offset: 3560
    00000dea: 	divss	%xmm1, %xmm0
.Ltmp284:
    00000dee: 	movsd	DATAat0x24970(%rip), %xmm3
    00000df6: 	cvtss2sd	%xmm0, %xmm0
    00000dfa: 	andpd	DATAat0x24940(%rip), %xmm0
    00000e02: 	comisd	%xmm0, %xmm3
    00000e06: 	jbe	.Ltmp285 # Offset: 3590
    00000e0c: 	addq	$0x1, %rax
    00000e10: 	cmpq	$0x320, %rax
    00000e16: 	jne	.Ltmp286 # Offset: 3606
.Ltmp526:
    00000e18: 	movq	0x38(%rsp), %rax
    00000e1d: 	movq	$0x0, (%rax)
    00000e24: 	movq	0xc0(%rsp), %rdi
    00000e2c: 	movq	$0x0, -0x10(%rdi)
    00000e34: 	movq	0xb8(%rsp), %rdi
    00000e3c: 	andq	$-0x8, %rdi
    00000e40: 	subq	%rdi, %rax
    00000e43: 	movq	%rax, %rcx
    00000e46: 	xorl	%eax, %eax
    00000e48: 	addl	$0xc80, %ecx
    00000e4e: 	shrl	$0x3, %ecx
    00000e51: 	rep		stosq	%rax, %es:(%rdi)
    00000e54: 	movl	0x1b8(%rsp), %r9d
    00000e5c: 	testl	%r9d, %r9d
    00000e5f: 	jle	.Ltmp287 # Offset: 3679
    00000e65: 	movslq	0x54(%rsp), %rax
    00000e6a: 	movq	0x38(%rsp), %rdi
    00000e6f: 	xorl	%ebx, %ebx
    00000e71: 	pxor	%xmm3, %xmm3
    00000e75: 	movq	%rax, %r8
    00000e78: 	movq	%rax, 0x8(%rsp)
    00000e7d: 	movl	0x1b8(%rsp), %eax
    00000e84: 	movq	%rdi, %r11
    00000e87: 	subl	$0x1, %eax
    00000e8a: 	leaq	0x4(%rdi,%rax,4), %rbp
    00000e8f: 	leal	-0x8(%r8), %eax
    00000e93: 	shrl	$0x3, %eax
    00000e96: 	leal	0x1(%rax), %r10d
    00000e9a: 	leal	(,%r10,8), %r12d
.Ltmp293:
    00000ea2: 	movss	(%r11), %xmm0
    00000ea7: 	leaq	(%r14,%rbx,4), %rcx
    00000eab: 	cmpl	$0x7, %r8d
    00000eaf: 	jle	.Ltmp288 # Offset: 3759
    00000eb5: 	pxor	%xmm2, %xmm2
    00000eb9: 	xorl	%eax, %eax
    00000ebb: 	pxor	%xmm1, %xmm1
    00000ebf: 	xorl	%edx, %edx
    00000ec1: 	movss	%xmm0, %xmm2
    00000ec5: 	nopl	(%rax) # Size: 3
.Ltmp289:
    00000ec8: 	movups	(%r15,%rax), %xmm4
    00000ecd: 	movups	(%rcx,%rax), %xmm0
    00000ed1: 	addl	$0x1, %edx
    00000ed4: 	mulps	%xmm4, %xmm0
    00000ed7: 	movups	0x10(%r15,%rax), %xmm4
    00000edd: 	addps	%xmm0, %xmm2
    00000ee0: 	movups	0x10(%rcx,%rax), %xmm0
    00000ee5: 	addq	$0x20, %rax
    00000ee9: 	mulps	%xmm4, %xmm0
    00000eec: 	addps	%xmm0, %xmm1
    00000eef: 	cmpl	%edx, %r10d
    00000ef2: 	ja	.Ltmp289 # Offset: 3826
    00000ef4: 	movaps	%xmm2, %xmm10
    00000ef8: 	movaps	%xmm2, %xmm9
    00000efc: 	movaps	%xmm1, %xmm6
    00000eff: 	movl	%r12d, %esi
    00000f02: 	movaps	%xmm1, %xmm5
    00000f05: 	movaps	%xmm2, %xmm0
    00000f08: 	unpckhps	%xmm2, %xmm9
    00000f0c: 	shufps	$0x55, %xmm1, %xmm6
    00000f10: 	movaps	%xmm1, %xmm7
    00000f13: 	unpckhps	%xmm1, %xmm5
    00000f16: 	shufps	$0x55, %xmm2, %xmm10
    00000f1b: 	shufps	$0xff, %xmm1, %xmm1
    00000f1f: 	shufps	$0xff, %xmm2, %xmm2
    00000f23: 	movaps	%xmm1, %xmm4
    00000f26: 	movaps	%xmm2, %xmm8
.Ltmp497:
    00000f2a: 	cmpl	%esi, %r8d
    00000f2d: 	jle	.Ltmp290 # Offset: 3885
    00000f33: 	movl	%r8d, %r13d
    00000f36: 	subl	%esi, %r13d
    00000f39: 	leal	-0x1(%r13), %eax
    00000f3d: 	cmpl	$0x2, %eax
    00000f40: 	jbe	.Ltmp291 # Offset: 3904
    00000f42: 	movslq	%esi, %rax
    00000f45: 	leaq	(%rax,%rbx), %rdx
    00000f49: 	leaq	(%r15,%rax,4), %rdi
    00000f4d: 	xorl	%eax, %eax
    00000f4f: 	leaq	(%r14,%rdx,4), %r9
    00000f53: 	movl	%r13d, %edx
    00000f56: 	shrl	$0x2, %edx
    00000f59: 	shlq	$0x4, %rdx
.Ltmp292:
    00000f5d: 	movups	(%rdi,%rax), %xmm2
    00000f61: 	movups	(%r9,%rax), %xmm1
    00000f66: 	addq	$0x10, %rax
    00000f6a: 	mulps	%xmm2, %xmm1
    00000f6d: 	addss	%xmm1, %xmm0
    00000f71: 	movaps	%xmm1, %xmm2
    00000f74: 	shufps	$0x55, %xmm1, %xmm2
    00000f78: 	addss	%xmm2, %xmm0
    00000f7c: 	movaps	%xmm1, %xmm2
    00000f7f: 	unpckhps	%xmm1, %xmm2
    00000f82: 	shufps	$0xff, %xmm1, %xmm1
    00000f86: 	addss	%xmm2, %xmm0
    00000f8a: 	addss	%xmm1, %xmm0
    00000f8e: 	cmpq	%rdx, %rax
    00000f91: 	jne	.Ltmp292 # Offset: 3985
    00000f93: 	movl	%r13d, %eax
    00000f96: 	andl	$-0x4, %eax
    00000f99: 	addl	%eax, %esi
    00000f9b: 	cmpl	%eax, %r13d
    00000f9e: 	je	.Ltmp290 # Offset: 3998
.Ltmp291:
    00000fa0: 	movslq	%esi, %rdx
    00000fa3: 	movss	(%rcx,%rdx,4), %xmm1
    00000fa8: 	mulss	(%r15,%rdx,4), %xmm1
    00000fae: 	leaq	(,%rdx,4), %rax
    00000fb6: 	leal	0x1(%rsi), %edx
    00000fb9: 	addss	%xmm1, %xmm0
    00000fbd: 	cmpl	%edx, %r8d
    00000fc0: 	jle	.Ltmp290 # Offset: 4032
    00000fc2: 	movss	0x4(%rcx,%rax), %xmm1
    00000fc8: 	mulss	0x4(%r15,%rax), %xmm1
    00000fcf: 	addl	$0x2, %esi
    00000fd2: 	addss	%xmm1, %xmm0
    00000fd6: 	cmpl	%esi, %r8d
    00000fd9: 	jle	.Ltmp290 # Offset: 4057
    00000fdb: 	movss	0x8(%rcx,%rax), %xmm1
    00000fe1: 	mulss	0x8(%r15,%rax), %xmm1
    00000fe8: 	addss	%xmm1, %xmm0
.Ltmp290:
    00000fec: 	addss	%xmm10, %xmm0
    00000ff1: 	addq	$0x4, %r11
    00000ff5: 	addq	0x8(%rsp), %rbx
    00000ffa: 	addss	%xmm9, %xmm0
    00000fff: 	addss	%xmm8, %xmm0
    00001004: 	addss	%xmm7, %xmm0
    00001008: 	addss	%xmm6, %xmm0
    0000100c: 	addss	%xmm5, %xmm0
    00001010: 	addss	%xmm4, %xmm0
    00001014: 	movss	%xmm0, -0x4(%r11)
    0000101a: 	cmpq	%rbp, %r11
    0000101d: 	jne	.Ltmp293 # Offset: 4125
.Ltmp287:
    00001023: 	xorl	%eax, %eax
.Ltmp296:
    00001025: 	movq	0x288(%rsp), %rdi
    0000102d: 	movss	(%rdi,%rax,4), %xmm1
    00001032: 	movq	0x38(%rsp), %rdi
    00001037: 	movaps	%xmm1, %xmm2
    0000103a: 	andps	DATAat0x24930(%rip), %xmm2
    00001041: 	movaps	%xmm1, %xmm0
    00001044: 	subss	(%rdi,%rax,4), %xmm0
    00001049: 	cvtss2sd	%xmm2, %xmm2
    0000104d: 	comisd	DATAat0x24968(%rip), %xmm2
    00001055: 	jbe	.Ltmp294 # Offset: 4181
    00001057: 	divss	%xmm1, %xmm0
.Ltmp294:
    0000105b: 	movsd	DATAat0x24970(%rip), %xmm4
    00001063: 	cvtss2sd	%xmm0, %xmm0
    00001067: 	andpd	DATAat0x24940(%rip), %xmm0
    0000106f: 	comisd	%xmm0, %xmm4
    00001073: 	jbe	.Ltmp295 # Offset: 4211
    00001079: 	addq	$0x1, %rax
    0000107d: 	cmpq	$0x320, %rax
    00001083: 	jne	.Ltmp296 # Offset: 4227
.Ltmp525:
    00001085: 	movq	0x38(%rsp), %rax
    0000108a: 	movq	$0x0, (%rax)
    00001091: 	movq	0xc0(%rsp), %rdi
    00001099: 	movq	$0x0, -0x10(%rdi)
    000010a1: 	movq	0xb8(%rsp), %rdi
    000010a9: 	andq	$-0x8, %rdi
    000010ad: 	subq	%rdi, %rax
    000010b0: 	movq	%rax, %rcx
    000010b3: 	xorl	%eax, %eax
    000010b5: 	addl	$0xc80, %ecx
    000010bb: 	shrl	$0x3, %ecx
    000010be: 	rep		stosq	%rax, %es:(%rdi)
    000010c1: 	movl	0x1b8(%rsp), %r10d
    000010c9: 	testl	%r10d, %r10d
    000010cc: 	jle	.Ltmp297 # Offset: 4300
    000010d2: 	movslq	0x54(%rsp), %rax
    000010d7: 	movq	0x38(%rsp), %rdi
    000010dc: 	xorl	%ebx, %ebx
    000010de: 	pxor	%xmm3, %xmm3
    000010e2: 	movq	%rax, %r8
    000010e5: 	movq	%rax, 0x8(%rsp)
    000010ea: 	movl	0x1b8(%rsp), %eax
    000010f1: 	movq	%rdi, %r11
    000010f4: 	subl	$0x1, %eax
    000010f7: 	leaq	0x4(%rdi,%rax,4), %rbp
    000010fc: 	leal	-0x8(%r8), %eax
    00001100: 	shrl	$0x3, %eax
    00001103: 	leal	0x1(%rax), %r10d
    00001107: 	leal	(,%r10,8), %r12d
.Ltmp303:
    0000110f: 	movss	(%r11), %xmm0
    00001114: 	leaq	(%r14,%rbx,4), %rcx
    00001118: 	cmpl	$0x7, %r8d
    0000111c: 	jle	.Ltmp298 # Offset: 4380
    00001122: 	pxor	%xmm2, %xmm2
    00001126: 	xorl	%eax, %eax
    00001128: 	pxor	%xmm1, %xmm1
    0000112c: 	xorl	%edx, %edx
    0000112e: 	movss	%xmm0, %xmm2
    00001132: 	nopw	(%rax,%rax) # Size: 6
.Ltmp299:
    00001138: 	movups	(%r15,%rax), %xmm4
    0000113d: 	movups	(%rcx,%rax), %xmm0
    00001141: 	addl	$0x1, %edx
    00001144: 	mulps	%xmm4, %xmm0
    00001147: 	movups	0x10(%r15,%rax), %xmm4
    0000114d: 	addps	%xmm0, %xmm2
    00001150: 	movups	0x10(%rcx,%rax), %xmm0
    00001155: 	addq	$0x20, %rax
    00001159: 	mulps	%xmm4, %xmm0
    0000115c: 	addps	%xmm0, %xmm1
    0000115f: 	cmpl	%edx, %r10d
    00001162: 	ja	.Ltmp299 # Offset: 4450
    00001164: 	movaps	%xmm2, %xmm10
    00001168: 	movaps	%xmm2, %xmm9
    0000116c: 	movaps	%xmm1, %xmm6
    0000116f: 	movl	%r12d, %esi
    00001172: 	movaps	%xmm1, %xmm5
    00001175: 	movaps	%xmm2, %xmm0
    00001178: 	unpckhps	%xmm2, %xmm9
    0000117c: 	shufps	$0x55, %xmm1, %xmm6
    00001180: 	movaps	%xmm1, %xmm7
    00001183: 	unpckhps	%xmm1, %xmm5
    00001186: 	shufps	$0x55, %xmm2, %xmm10
    0000118b: 	shufps	$0xff, %xmm1, %xmm1
    0000118f: 	shufps	$0xff, %xmm2, %xmm2
    00001193: 	movaps	%xmm1, %xmm4
    00001196: 	movaps	%xmm2, %xmm8
.Ltmp496:
    0000119a: 	cmpl	%esi, %r8d
    0000119d: 	jle	.Ltmp300 # Offset: 4509
    000011a3: 	movl	%r8d, %r13d
    000011a6: 	subl	%esi, %r13d
    000011a9: 	leal	-0x1(%r13), %eax
    000011ad: 	cmpl	$0x2, %eax
    000011b0: 	jbe	.Ltmp301 # Offset: 4528
    000011b2: 	movslq	%esi, %rax
    000011b5: 	leaq	(%rax,%rbx), %rdx
    000011b9: 	leaq	(%r15,%rax,4), %rdi
    000011bd: 	xorl	%eax, %eax
    000011bf: 	leaq	(%r14,%rdx,4), %r9
    000011c3: 	movl	%r13d, %edx
    000011c6: 	shrl	$0x2, %edx
    000011c9: 	shlq	$0x4, %rdx
.Ltmp302:
    000011cd: 	movups	(%rdi,%rax), %xmm2
    000011d1: 	movups	(%r9,%rax), %xmm1
    000011d6: 	addq	$0x10, %rax
    000011da: 	mulps	%xmm2, %xmm1
    000011dd: 	addss	%xmm1, %xmm0
    000011e1: 	movaps	%xmm1, %xmm2
    000011e4: 	shufps	$0x55, %xmm1, %xmm2
    000011e8: 	addss	%xmm2, %xmm0
    000011ec: 	movaps	%xmm1, %xmm2
    000011ef: 	unpckhps	%xmm1, %xmm2
    000011f2: 	shufps	$0xff, %xmm1, %xmm1
    000011f6: 	addss	%xmm2, %xmm0
    000011fa: 	addss	%xmm1, %xmm0
    000011fe: 	cmpq	%rdx, %rax
    00001201: 	jne	.Ltmp302 # Offset: 4609
    00001203: 	movl	%r13d, %eax
    00001206: 	andl	$-0x4, %eax
    00001209: 	addl	%eax, %esi
    0000120b: 	cmpl	%eax, %r13d
    0000120e: 	je	.Ltmp300 # Offset: 4622
.Ltmp301:
    00001210: 	movslq	%esi, %rdx
    00001213: 	movss	(%rcx,%rdx,4), %xmm1
    00001218: 	mulss	(%r15,%rdx,4), %xmm1
    0000121e: 	leaq	(,%rdx,4), %rax
    00001226: 	leal	0x1(%rsi), %edx
    00001229: 	addss	%xmm1, %xmm0
    0000122d: 	cmpl	%edx, %r8d
    00001230: 	jle	.Ltmp300 # Offset: 4656
    00001232: 	movss	0x4(%rcx,%rax), %xmm1
    00001238: 	mulss	0x4(%r15,%rax), %xmm1
    0000123f: 	addl	$0x2, %esi
    00001242: 	addss	%xmm1, %xmm0
    00001246: 	cmpl	%esi, %r8d
    00001249: 	jle	.Ltmp300 # Offset: 4681
    0000124b: 	movss	0x8(%rcx,%rax), %xmm1
    00001251: 	mulss	0x8(%r15,%rax), %xmm1
    00001258: 	addss	%xmm1, %xmm0
.Ltmp300:
    0000125c: 	addss	%xmm10, %xmm0
    00001261: 	addq	$0x4, %r11
    00001265: 	addq	0x8(%rsp), %rbx
    0000126a: 	addss	%xmm9, %xmm0
    0000126f: 	addss	%xmm8, %xmm0
    00001274: 	addss	%xmm7, %xmm0
    00001278: 	addss	%xmm6, %xmm0
    0000127c: 	addss	%xmm5, %xmm0
    00001280: 	addss	%xmm4, %xmm0
    00001284: 	movss	%xmm0, -0x4(%r11)
    0000128a: 	cmpq	%rbp, %r11
    0000128d: 	jne	.Ltmp303 # Offset: 4749
.Ltmp297:
    00001293: 	xorl	%eax, %eax
.Ltmp306:
    00001295: 	movq	0x288(%rsp), %rdi
    0000129d: 	movss	(%rdi,%rax,4), %xmm1
    000012a2: 	movq	0x38(%rsp), %rdi
    000012a7: 	movaps	%xmm1, %xmm2
    000012aa: 	andps	DATAat0x24930(%rip), %xmm2
    000012b1: 	movaps	%xmm1, %xmm0
    000012b4: 	subss	(%rdi,%rax,4), %xmm0
    000012b9: 	cvtss2sd	%xmm2, %xmm2
    000012bd: 	comisd	DATAat0x24968(%rip), %xmm2
    000012c5: 	jbe	.Ltmp304 # Offset: 4805
    000012c7: 	divss	%xmm1, %xmm0
.Ltmp304:
    000012cb: 	movsd	DATAat0x24970(%rip), %xmm3
    000012d3: 	cvtss2sd	%xmm0, %xmm0
    000012d7: 	andpd	DATAat0x24940(%rip), %xmm0
    000012df: 	comisd	%xmm0, %xmm3
    000012e3: 	jbe	.Ltmp305 # Offset: 4835
    000012e9: 	addq	$0x1, %rax
    000012ed: 	cmpq	$0x320, %rax
    000012f3: 	jne	.Ltmp306 # Offset: 4851
.Ltmp524:
    000012f5: 	movq	0x38(%rsp), %rax
    000012fa: 	movq	$0x0, (%rax)
    00001301: 	movq	0xc0(%rsp), %rdi
    00001309: 	movq	$0x0, -0x10(%rdi)
    00001311: 	movq	0xb8(%rsp), %rdi
    00001319: 	andq	$-0x8, %rdi
    0000131d: 	subq	%rdi, %rax
    00001320: 	movq	%rax, %rcx
    00001323: 	xorl	%eax, %eax
    00001325: 	addl	$0xc80, %ecx
    0000132b: 	shrl	$0x3, %ecx
    0000132e: 	rep		stosq	%rax, %es:(%rdi)
    00001331: 	movl	0x54(%rsp), %r11d
    00001336: 	testl	%r11d, %r11d
    00001339: 	jle	.Ltmp307 # Offset: 4921
    0000133f: 	movl	0x1b8(%rsp), %eax
    00001346: 	movslq	0x54(%rsp), %rbp
    0000134b: 	movq	0x38(%rsp), %r9
    00001350: 	leal	-0x3(%rax), %edi
    00001353: 	subl	$0x4, %eax
    00001356: 	movq	%rbp, 0x8(%rsp)
    0000135b: 	leaq	(,%rbp,8), %rsi
    00001363: 	movq	%rsi, 0x18(%rsp)
    00001368: 	leaq	(,%rbp,4), %r11
    00001370: 	movq	%r9, %rcx
    00001373: 	movl	%eax, 0x148(%rsp)
    0000137a: 	shrl	$0x2, %eax
    0000137d: 	leal	0x1(%rax), %edx
    00001380: 	movl	%eax, %esi
    00001382: 	movl	%edi, 0x58(%rsp)
    00001386: 	movq	%rbp, %rdi
    00001389: 	movq	%rdx, %r8
    0000138c: 	movl	%edx, 0x150(%rsp)
    00001393: 	subq	$0x1, %rdx
    00001397: 	movq	%rdx, %rax
    0000139a: 	shlq	$0x4, %rax
    0000139e: 	leaq	0xc(%r9,%rax), %rax
    000013a3: 	movq	%rax, 0x30(%rsp)
    000013a8: 	leal	(,%rbp,4), %eax
    000013af: 	cltq
    000013b1: 	leaq	(,%rax,4), %r12
    000013b9: 	movq	%rax, %rbx
    000013bc: 	leaq	(%rax,%rax,2), %rax
    000013c0: 	imulq	%r12, %rdx
    000013c4: 	leaq	(,%rax,4), %r13
    000013cc: 	movl	%r8d, %eax
    000013cf: 	shlq	$0x4, %rbx
    000013d3: 	andl	$-0x4, %eax
    000013d6: 	movl	%eax, 0x198(%rsp)
    000013dd: 	shll	$0x2, %eax
    000013e0: 	movq	%rdx, 0x40(%rsp)
    000013e5: 	leaq	(%r14,%r11), %rdx
    000013e9: 	movq	%rdx, 0x120(%rsp)
    000013f1: 	movl	%r8d, %edx
    000013f4: 	shrl	$0x2, %edx
    000013f7: 	subl	$0x1, %edx
    000013fa: 	shlq	$0x6, %rdx
    000013fe: 	leaq	0x40(%r9,%rdx), %r10
    00001403: 	movslq	%eax, %rdx
    00001406: 	shlq	$0x2, %rdx
    0000140a: 	addq	%rdx, %rcx
    0000140d: 	movq	%rcx, 0x90(%rsp)
    00001415: 	movl	%ebp, %ecx
    00001417: 	imull	%eax, %ecx
    0000141a: 	movl	%ecx, 0xa0(%rsp)
    00001421: 	leaq	0x4(%r9,%rdx), %rcx
    00001426: 	movq	%rcx, 0xa8(%rsp)
    0000142e: 	leal	0x1(%rax), %ecx
    00001431: 	imull	%ebp, %ecx
    00001434: 	movl	%ecx, 0xb0(%rsp)
    0000143b: 	leaq	0x8(%r9,%rdx), %rcx
    00001440: 	leaq	0xc(%r9,%rdx), %rdx
    00001445: 	movq	%rdx, 0xd8(%rsp)
    0000144d: 	leal	0x3(%rax), %edx
    00001450: 	imull	%ebp, %edx
    00001453: 	movq	%rcx, 0xc8(%rsp)
    0000145b: 	leal	0x2(%rax), %ecx
    0000145e: 	imull	%ebp, %ecx
    00001461: 	movl	%edx, 0xe0(%rsp)
    00001468: 	leal	0x4(%rax), %edx
    0000146b: 	movl	%edx, 0x60(%rsp)
    0000146f: 	movslq	%edx, %rdx
    00001472: 	shlq	$0x2, %rdx
    00001476: 	movl	%ecx, 0xd0(%rsp)
    0000147d: 	leaq	(%r9,%rdx), %rcx
    00001481: 	movq	%rcx, 0xe8(%rsp)
    00001489: 	movl	0x60(%rsp), %ecx
    0000148d: 	imull	%ebp, %ecx
    00001490: 	movl	%ecx, 0xf0(%rsp)
    00001497: 	leaq	0x4(%r9,%rdx), %rcx
    0000149c: 	movq	%rcx, 0x128(%rsp)
    000014a4: 	leal	0x5(%rax), %ecx
    000014a7: 	imull	%ebp, %ecx
    000014aa: 	movl	%ecx, 0xf8(%rsp)
    000014b1: 	leaq	0x8(%r9,%rdx), %rcx
    000014b6: 	movq	%rcx, 0x100(%rsp)
    000014be: 	leal	0x6(%rax), %ecx
    000014c1: 	imull	%ebp, %ecx
    000014c4: 	movl	%ecx, 0x108(%rsp)
    000014cb: 	leaq	0xc(%r9,%rdx), %rcx
    000014d0: 	leal	0x7(%rax), %edx
    000014d3: 	imull	%ebp, %edx
    000014d6: 	movq	%rcx, 0x110(%rsp)
    000014de: 	leal	0x8(%rax), %ecx
    000014e1: 	movl	%ecx, 0x70(%rsp)
    000014e5: 	movl	%edx, 0x118(%rsp)
    000014ec: 	movslq	%ecx, %rdx
    000014ef: 	shlq	$0x2, %rdx
    000014f3: 	leaq	(%r9,%rdx), %rcx
    000014f7: 	movq	%rcx, 0x158(%rsp)
    000014ff: 	movl	0x70(%rsp), %ecx
    00001503: 	movq	$0x0, 0x10(%rsp)
    0000150c: 	imull	%ebp, %ecx
    0000150f: 	movq	%r10, 0x20(%rsp)
    00001514: 	movq	%r15, 0x88(%rsp)
    0000151c: 	movl	%edi, %r15d
    0000151f: 	movl	%ecx, 0x160(%rsp)
    00001526: 	leaq	0x4(%r9,%rdx), %rcx
    0000152b: 	movq	%rcx, 0x168(%rsp)
    00001533: 	leal	0x9(%rax), %ecx
    00001536: 	imull	%ebp, %ecx
    00001539: 	movl	%ecx, 0x170(%rsp)
    00001540: 	leaq	0x8(%r9,%rdx), %rcx
    00001545: 	movq	%rcx, 0x178(%rsp)
    0000154d: 	leal	0xa(%rax), %ecx
    00001550: 	addl	$0xb, %eax
    00001553: 	imull	%ebp, %eax
    00001556: 	imull	%ebp, %ecx
    00001559: 	movl	%eax, 0x190(%rsp)
    00001560: 	movl	%esi, %eax
    00001562: 	shlq	$0x4, %rax
    00001566: 	movl	%ecx, 0x180(%rsp)
    0000156d: 	leaq	0xc(%r9,%rdx), %rcx
    00001572: 	leaq	0x10(%r9,%rax), %rax
    00001577: 	movq	%rcx, 0x188(%rsp)
    0000157f: 	movq	%rax, 0x80(%rsp)
    00001587: 	leaq	(%rbp,%rbp,2), %rax
    0000158c: 	xorl	%ebp, %ebp
    0000158e: 	shlq	$0x2, %rax
    00001592: 	movq	%rax, 0x1a0(%rsp)
    0000159a: 	leal	(,%r8,4), %eax
    000015a2: 	movl	%eax, 0x130(%rsp)
.Ltmp314:
    000015a9: 	movq	0x88(%rsp), %rax
    000015b1: 	movl	0x58(%rsp), %ecx
    000015b5: 	movl	0x10(%rsp), %r8d
    000015ba: 	movss	(%rax,%rbp), %xmm3
    000015bf: 	testl	%ecx, %ecx
    000015c1: 	jle	.Ltmp308 # Offset: 5569
    000015c7: 	movq	0x18(%rsp), %rdi
    000015cc: 	movq	0x40(%rsp), %r10
    000015d1: 	leaq	(%rbp,%r11), %rax
    000015d6: 	leaq	(%r14,%rdi), %rsi
    000015da: 	movq	%rdi, %rcx
    000015dd: 	leaq	(%rdi,%r11), %rdx
    000015e1: 	cmpq	%rsi, 0x30(%rsp)
    000015e6: 	movq	%rsi, 0x28(%rsp)
    000015eb: 	setb	%sil
    000015ef: 	addq	%r10, %rcx
    000015f2: 	addq	%r14, %rcx
    000015f5: 	cmpq	%rcx, %r9
    000015f8: 	seta	%cl
    000015fb: 	orl	%ecx, %esi
    000015fd: 	leaq	(%r14,%rdx), %rcx
    00001601: 	cmpq	%rcx, 0x30(%rsp)
    00001606: 	setb	%cl
    00001609: 	addq	%r10, %rdx
    0000160c: 	addq	%r14, %rdx
    0000160f: 	cmpq	%rdx, %r9
    00001612: 	seta	%dl
    00001615: 	orl	%ecx, %edx
    00001617: 	andl	%esi, %edx
    00001619: 	cmpl	$0xb, 0x148(%rsp)
    00001621: 	seta	%cl
    00001624: 	andl	%ecx, %edx
    00001626: 	leaq	(%r14,%rbp), %rcx
    0000162a: 	movl	%edx, %edi
    0000162c: 	leaq	(%r10,%rbp), %rdx
    00001630: 	movq	0x30(%rsp), %r10
    00001635: 	addq	%r14, %rdx
    00001638: 	cmpq	%rdx, %r9
    0000163b: 	seta	%dl
    0000163e: 	cmpq	%rcx, %r10
    00001641: 	setb	%sil
    00001645: 	orl	%esi, %edx
    00001647: 	testb	%dl, %dil
    0000164a: 	je	.Ltmp309 # Offset: 5706
    00001650: 	leaq	(%r14,%rax), %rdx
    00001654: 	cmpq	%rdx, %r10
    00001657: 	setb	%dl
    0000165a: 	addq	0x40(%rsp), %rax
    0000165f: 	addq	%r14, %rax
    00001662: 	cmpq	%rax, %r9
    00001665: 	seta	%al
    00001668: 	orb	%dl, %al
    0000166a: 	je	.Ltmp309 # Offset: 5738
    00001670: 	movq	0x120(%rsp), %rax
    00001678: 	movq	0x28(%rsp), %rdx
    0000167d: 	movaps	%xmm3, %xmm4
    00001680: 	movq	0x20(%rsp), %r10
    00001685: 	shufps	$0x0, %xmm4, %xmm4
    00001689: 	leaq	(%rax,%rbp), %rdi
    0000168d: 	addq	0x18(%rsp), %rax
    00001692: 	movq	%rax, %rsi
    00001695: 	movq	%r9, %rax
.Ltmp310:
    00001698: 	movups	(%rax), %xmm5
    0000169b: 	movups	0x10(%rax), %xmm2
    0000169f: 	addq	$0x40, %rax
    000016a3: 	movups	-0x20(%rax), %xmm6
    000016a7: 	movss	(%rcx,%r13), %xmm1
    000016ad: 	movaps	%xmm5, %xmm7
    000016b0: 	movss	(%rcx,%r12,2), %xmm0
    000016b6: 	shufps	$0xdd, %xmm2, %xmm5
    000016ba: 	movss	(%rdi,%r12), %xmm9
    000016c0: 	shufps	$0x88, %xmm2, %xmm7
    000016c4: 	movups	-0x10(%rax), %xmm2
    000016c8: 	movaps	%xmm6, %xmm8
    000016cc: 	movss	(%rdx,%r12), %xmm10
    000016d2: 	unpcklps	%xmm1, %xmm0
    000016d5: 	movss	(%rcx), %xmm1
    000016d9: 	shufps	$0x88, %xmm2, %xmm8
    000016de: 	shufps	$0xdd, %xmm2, %xmm6
    000016e2: 	movss	(%rcx,%r12), %xmm2
    000016e8: 	addq	%rbx, %rcx
    000016eb: 	unpcklps	%xmm2, %xmm1
    000016ee: 	movss	(%rdi,%r13), %xmm2
    000016f4: 	movlhps	%xmm0, %xmm1
    000016f7: 	movaps	%xmm7, %xmm0
    000016fa: 	shufps	$0xdd, %xmm8, %xmm7
    000016ff: 	mulps	%xmm4, %xmm1
    00001702: 	shufps	$0x88, %xmm8, %xmm0
    00001707: 	movss	(%rsi,%r12,2), %xmm8
    0000170d: 	addps	%xmm0, %xmm1
    00001710: 	movss	(%rdi,%r12,2), %xmm0
    00001716: 	unpcklps	%xmm2, %xmm0
    00001719: 	movss	(%rdi), %xmm2
    0000171d: 	addq	%rbx, %rdi
    00001720: 	unpcklps	%xmm9, %xmm2
    00001724: 	movss	(%rdx,%r12,2), %xmm9
    0000172a: 	movlhps	%xmm0, %xmm2
    0000172d: 	movaps	%xmm5, %xmm0
    00001730: 	shufps	$0xdd, %xmm6, %xmm5
    00001734: 	mulps	%xmm4, %xmm2
    00001737: 	shufps	$0x88, %xmm6, %xmm0
    0000173b: 	addps	%xmm0, %xmm2
    0000173e: 	movss	(%rdx,%r13), %xmm0
    00001744: 	unpcklps	%xmm0, %xmm9
    00001748: 	movss	(%rdx), %xmm0
    0000174c: 	addq	%rbx, %rdx
    0000174f: 	movaps	%xmm2, %xmm6
    00001752: 	unpcklps	%xmm10, %xmm0
    00001756: 	movlhps	%xmm9, %xmm0
    0000175a: 	movss	(%rsi,%r12), %xmm9
    00001760: 	mulps	%xmm4, %xmm0
    00001763: 	addps	%xmm0, %xmm7
    00001766: 	movss	(%rsi,%r13), %xmm0
    0000176c: 	unpcklps	%xmm0, %xmm8
    00001770: 	movss	(%rsi), %xmm0
    00001774: 	addq	%rbx, %rsi
    00001777: 	unpcklps	%xmm9, %xmm0
    0000177b: 	movlhps	%xmm8, %xmm0
    0000177f: 	mulps	%xmm4, %xmm0
    00001782: 	addps	%xmm5, %xmm0
    00001785: 	movaps	%xmm1, %xmm5
    00001788: 	unpckhps	%xmm7, %xmm1
    0000178b: 	unpcklps	%xmm7, %xmm5
    0000178e: 	unpcklps	%xmm0, %xmm6
    00001791: 	unpckhps	%xmm0, %xmm2
    00001794: 	movaps	%xmm5, %xmm0
    00001797: 	unpcklps	%xmm6, %xmm0
    0000179a: 	unpckhps	%xmm6, %xmm5
    0000179d: 	movups	%xmm0, -0x40(%rax)
    000017a1: 	movaps	%xmm1, %xmm0
    000017a4: 	unpckhps	%xmm2, %xmm1
    000017a7: 	unpcklps	%xmm2, %xmm0
    000017aa: 	movups	%xmm5, -0x30(%rax)
    000017ae: 	movups	%xmm0, -0x20(%rax)
    000017b2: 	movups	%xmm1, -0x10(%rax)
    000017b6: 	cmpq	%r10, %rax
    000017b9: 	jne	.Ltmp310 # Offset: 6073
    000017bf: 	movq	%r10, 0x20(%rsp)
    000017c4: 	movl	0x198(%rsp), %edi
    000017cb: 	cmpl	%edi, 0x150(%rsp)
    000017d2: 	je	.Ltmp311 # Offset: 6098
    000017d8: 	movl	0xa0(%rsp), %eax
    000017df: 	movl	0x58(%rsp), %edi
    000017e3: 	addl	%r8d, %eax
    000017e6: 	cltq
    000017e8: 	movss	(%r14,%rax,4), %xmm0
    000017ee: 	movq	0x90(%rsp), %rax
    000017f6: 	mulss	%xmm3, %xmm0
    000017fa: 	addss	(%rax), %xmm0
    000017fe: 	movss	%xmm0, (%rax)
    00001802: 	movl	0xb0(%rsp), %eax
    00001809: 	addl	%r8d, %eax
    0000180c: 	cltq
    0000180e: 	movss	(%r14,%rax,4), %xmm0
    00001814: 	movq	0xa8(%rsp), %rax
    0000181c: 	mulss	%xmm3, %xmm0
    00001820: 	addss	(%rax), %xmm0
    00001824: 	movss	%xmm0, (%rax)
    00001828: 	movl	0xd0(%rsp), %eax
    0000182f: 	addl	%r8d, %eax
    00001832: 	cltq
    00001834: 	movss	(%r14,%rax,4), %xmm0
    0000183a: 	movq	0xc8(%rsp), %rax
    00001842: 	mulss	%xmm3, %xmm0
    00001846: 	addss	(%rax), %xmm0
    0000184a: 	movss	%xmm0, (%rax)
    0000184e: 	movl	0xe0(%rsp), %eax
    00001855: 	addl	%r8d, %eax
    00001858: 	cltq
    0000185a: 	movss	(%r14,%rax,4), %xmm0
    00001860: 	movq	0xd8(%rsp), %rax
    00001868: 	mulss	%xmm3, %xmm0
    0000186c: 	addss	(%rax), %xmm0
    00001870: 	movss	%xmm0, (%rax)
    00001874: 	movl	0x60(%rsp), %eax
    00001878: 	cmpl	%eax, %edi
    0000187a: 	jle	.Ltmp311 # Offset: 6266
    00001880: 	movl	0xf0(%rsp), %eax
    00001887: 	addl	%r8d, %eax
    0000188a: 	cltq
    0000188c: 	movss	(%r14,%rax,4), %xmm0
    00001892: 	movq	0xe8(%rsp), %rax
    0000189a: 	mulss	%xmm3, %xmm0
    0000189e: 	addss	(%rax), %xmm0
    000018a2: 	movss	%xmm0, (%rax)
    000018a6: 	movl	0xf8(%rsp), %eax
    000018ad: 	addl	%r8d, %eax
    000018b0: 	cltq
    000018b2: 	movss	(%r14,%rax,4), %xmm0
    000018b8: 	movq	0x128(%rsp), %rax
    000018c0: 	mulss	%xmm3, %xmm0
    000018c4: 	addss	(%rax), %xmm0
    000018c8: 	movss	%xmm0, (%rax)
    000018cc: 	movl	0x108(%rsp), %eax
    000018d3: 	addl	%r8d, %eax
    000018d6: 	cltq
    000018d8: 	movss	(%r14,%rax,4), %xmm0
    000018de: 	movq	0x100(%rsp), %rax
    000018e6: 	mulss	%xmm3, %xmm0
    000018ea: 	addss	(%rax), %xmm0
    000018ee: 	movss	%xmm0, (%rax)
    000018f2: 	movl	0x118(%rsp), %eax
    000018f9: 	addl	%r8d, %eax
    000018fc: 	cltq
    000018fe: 	movss	(%r14,%rax,4), %xmm0
    00001904: 	movq	0x110(%rsp), %rax
    0000190c: 	mulss	%xmm3, %xmm0
    00001910: 	addss	(%rax), %xmm0
    00001914: 	movss	%xmm0, (%rax)
    00001918: 	movl	0x70(%rsp), %eax
    0000191c: 	cmpl	%eax, %edi
    0000191e: 	jle	.Ltmp311 # Offset: 6430
    00001924: 	movl	0x160(%rsp), %eax
    0000192b: 	addl	%r8d, %eax
    0000192e: 	cltq
    00001930: 	movss	(%r14,%rax,4), %xmm0
    00001936: 	movq	0x158(%rsp), %rax
    0000193e: 	mulss	%xmm3, %xmm0
    00001942: 	addss	(%rax), %xmm0
    00001946: 	movss	%xmm0, (%rax)
    0000194a: 	movl	0x170(%rsp), %eax
    00001951: 	addl	%r8d, %eax
    00001954: 	cltq
    00001956: 	movss	(%r14,%rax,4), %xmm0
    0000195c: 	movq	0x168(%rsp), %rax
    00001964: 	mulss	%xmm3, %xmm0
    00001968: 	addss	(%rax), %xmm0
    0000196c: 	movss	%xmm0, (%rax)
    00001970: 	movl	0x180(%rsp), %eax
    00001977: 	addl	%r8d, %eax
    0000197a: 	cltq
    0000197c: 	movss	(%r14,%rax,4), %xmm0
    00001982: 	movq	0x178(%rsp), %rax
    0000198a: 	mulss	%xmm3, %xmm0
    0000198e: 	addss	(%rax), %xmm0
    00001992: 	movss	%xmm0, (%rax)
    00001996: 	movl	0x190(%rsp), %eax
    0000199d: 	addl	%r8d, %eax
    000019a0: 	cltq
    000019a2: 	movss	(%r14,%rax,4), %xmm0
    000019a8: 	movq	0x188(%rsp), %rax
    000019b0: 	mulss	%xmm3, %xmm0
    000019b4: 	addss	(%rax), %xmm0
    000019b8: 	movss	%xmm0, (%rax)
.Ltmp311:
    000019bc: 	movl	0x130(%rsp), %eax
.Ltmp424:
    000019c3: 	cmpl	%eax, 0x1b8(%rsp)
    000019ca: 	jle	.Ltmp312 # Offset: 6602
    000019d0: 	movl	%r15d, %ecx
    000019d3: 	movl	0x1b8(%rsp), %edi
    000019da: 	xorl	%r10d, %r10d
    000019dd: 	imull	%eax, %ecx
    000019e0: 	subl	%eax, %edi
    000019e2: 	movl	%edi, 0x138(%rsp)
    000019e9: 	movl	%edi, %edi
    000019eb: 	movslq	%ecx, %rdx
    000019ee: 	addq	0x10(%rsp), %rdx
    000019f3: 	movl	%ecx, 0x140(%rsp)
    000019fa: 	movq	%rdx, 0x1a8(%rsp)
    00001a02: 	leaq	(,%rdx,4), %rcx
    00001a0a: 	leaq	-0x1(%rdi), %rdx
    00001a0e: 	imulq	%r11, %rdx
    00001a12: 	movq	%rcx, 0x28(%rsp)
    00001a17: 	testl	%r15d, %r15d
    00001a1a: 	movq	%rdx, 0x78(%rsp)
    00001a1f: 	movslq	%eax, %rdx
    00001a22: 	cmovsq	0x78(%rsp), %r10
    00001a28: 	leaq	(,%rdx,4), %rsi
    00001a30: 	leaq	-0x1(%rdi,%rdx), %rdx
    00001a35: 	leaq	(%r9,%rdx,4), %rdi
    00001a39: 	movq	0x28(%rsp), %rdx
    00001a3e: 	leaq	(%r9,%rsi), %rcx
    00001a42: 	addq	%r10, %rdx
    00001a45: 	addq	%r14, %rdx
    00001a48: 	cmpq	%rdx, %rdi
    00001a4b: 	movq	0x28(%rsp), %rdx
    00001a50: 	setb	%dil
    00001a54: 	xorl	%r10d, %r10d
    00001a57: 	testl	%r15d, %r15d
    00001a5a: 	cmovnsq	0x78(%rsp), %r10
    00001a60: 	addq	%r10, %rdx
    00001a63: 	addq	%r14, %rdx
    00001a66: 	cmpq	%rdx, %rcx
    00001a69: 	seta	%dl
    00001a6c: 	orb	%dil, %dl
    00001a6f: 	je	.Ltmp313 # Offset: 6767
    00001a75: 	movl	0x138(%rsp), %r10d
    00001a7d: 	movl	%r10d, %edx
    00001a80: 	subl	$0x1, %edx
    00001a83: 	cmpl	$0x2, %edx
    00001a86: 	jbe	.Ltmp313 # Offset: 6790
    00001a8c: 	movq	0x28(%rsp), %rdx
    00001a91: 	movups	(%rcx), %xmm4
    00001a94: 	addq	%r14, %rdx
    00001a97: 	leaq	(%rdx,%r11), %rsi
    00001a9b: 	leaq	(%rsi,%r11), %rdi
    00001a9f: 	movss	(%rsi), %xmm2
    00001aa3: 	movss	(%rdi,%r11), %xmm0
    00001aa9: 	movss	(%rdi), %xmm1
    00001aad: 	unpcklps	%xmm0, %xmm1
    00001ab0: 	movss	(%rdx), %xmm0
    00001ab4: 	movl	%r10d, %edx
    00001ab7: 	andl	$-0x4, %edx
    00001aba: 	unpcklps	%xmm2, %xmm0
    00001abd: 	addl	%edx, %eax
    00001abf: 	movlhps	%xmm1, %xmm0
    00001ac2: 	movaps	%xmm3, %xmm1
    00001ac5: 	shufps	$0x0, %xmm1, %xmm1
    00001ac9: 	mulps	%xmm1, %xmm0
    00001acc: 	addps	%xmm4, %xmm0
    00001acf: 	movups	%xmm0, (%rcx)
    00001ad2: 	cmpl	%edx, %r10d
    00001ad5: 	je	.Ltmp312 # Offset: 6869
    00001adb: 	movl	%r15d, %ecx
    00001ade: 	movslq	%eax, %rdx
    00001ae1: 	movl	0x1b8(%rsp), %r10d
    00001ae9: 	imull	%eax, %ecx
    00001aec: 	leaq	(%r9,%rdx,4), %rsi
    00001af0: 	leal	(%r8,%rcx), %edx
    00001af4: 	movslq	%edx, %rdx
    00001af7: 	movss	(%r14,%rdx,4), %xmm0
    00001afd: 	leal	0x1(%rax), %edx
    00001b00: 	mulss	%xmm3, %xmm0
    00001b04: 	addss	(%rsi), %xmm0
    00001b08: 	movss	%xmm0, (%rsi)
    00001b0c: 	cmpl	%edx, %r10d
    00001b0f: 	jle	.Ltmp312 # Offset: 6927
    00001b11: 	leal	(%r15,%rcx), %edi
    00001b15: 	movslq	%edx, %rdx
    00001b18: 	addl	$0x2, %eax
    00001b1b: 	leal	(%r8,%rdi), %ecx
    00001b1f: 	shlq	$0x2, %rdx
    00001b23: 	movslq	%ecx, %rcx
    00001b26: 	leaq	(%r9,%rdx), %rsi
    00001b2a: 	movss	(%r14,%rcx,4), %xmm0
    00001b30: 	mulss	%xmm3, %xmm0
    00001b34: 	addss	(%rsi), %xmm0
    00001b38: 	movss	%xmm0, (%rsi)
    00001b3c: 	cmpl	%eax, %r10d
    00001b3f: 	jle	.Ltmp312 # Offset: 6975
    00001b41: 	leaq	0x4(%r9,%rdx), %rax
.Ltmp419:
    00001b46: 	addl	%r15d, %edi
    00001b49: 	addl	%r8d, %edi
    00001b4c: 	movslq	%edi, %rdx
    00001b4f: 	mulss	(%r14,%rdx,4), %xmm3
    00001b55: 	addss	(%rax), %xmm3
    00001b59: 	movss	%xmm3, (%rax)
.Ltmp312:
    00001b5d: 	addq	$0x1, 0x10(%rsp)
    00001b63: 	addq	$0x4, %rbp
    00001b67: 	movq	0x10(%rsp), %rax
    00001b6c: 	addq	$0x4, 0x18(%rsp)
    00001b72: 	cmpq	%rax, 0x8(%rsp)
    00001b77: 	jne	.Ltmp314 # Offset: 7031
    00001b7d: 	movq	0x88(%rsp), %r15
.Ltmp307:
    00001b85: 	xorl	%eax, %eax
.Ltmp317:
    00001b87: 	movq	0x288(%rsp), %rdi
    00001b8f: 	movss	(%rdi,%rax,4), %xmm1
    00001b94: 	movq	0x38(%rsp), %rdi
    00001b99: 	movaps	%xmm1, %xmm2
    00001b9c: 	andps	DATAat0x24930(%rip), %xmm2
    00001ba3: 	movaps	%xmm1, %xmm0
    00001ba6: 	subss	(%rdi,%rax,4), %xmm0
    00001bab: 	cvtss2sd	%xmm2, %xmm2
    00001baf: 	comisd	DATAat0x24968(%rip), %xmm2
    00001bb7: 	jbe	.Ltmp315 # Offset: 7095
    00001bb9: 	divss	%xmm1, %xmm0
.Ltmp315:
    00001bbd: 	movsd	DATAat0x24970(%rip), %xmm3
    00001bc5: 	cvtss2sd	%xmm0, %xmm0
    00001bc9: 	andpd	DATAat0x24940(%rip), %xmm0
    00001bd1: 	comisd	%xmm0, %xmm3
    00001bd5: 	jbe	.Ltmp316 # Offset: 7125
    00001bdb: 	addq	$0x1, %rax
    00001bdf: 	cmpq	$0x320, %rax
    00001be5: 	jne	.Ltmp317 # Offset: 7141
.Ltmp523:
    00001be7: 	movq	0x38(%rsp), %rax
    00001bec: 	xorl	%r12d, %r12d
    00001bef: 	movq	$0x0, (%rax)
    00001bf6: 	movq	0xc0(%rsp), %rdi
    00001bfe: 	movq	$0x0, -0x10(%rdi)
    00001c06: 	movq	0xb8(%rsp), %rdi
    00001c0e: 	andq	$-0x8, %rdi
    00001c12: 	subq	%rdi, %rax
    00001c15: 	movq	%rax, %rcx
    00001c18: 	movq	%r12, %rax
    00001c1b: 	addl	$0xc80, %ecx
    00001c21: 	shrl	$0x3, %ecx
    00001c24: 	rep		stosq	%rax, %es:(%rdi)
    00001c27: 	movl	0x98(%rsp), %ebx
    00001c2e: 	testl	%ebx, %ebx
    00001c30: 	jle	.Ltmp318 # Offset: 7216
    00001c36: 	movl	0x1b8(%rsp), %ecx
    00001c3d: 	movl	0x54(%rsp), %esi
    00001c41: 	movq	%r15, %r10
    00001c44: 	leal	-0x3(%rcx), %eax
    00001c47: 	leal	(%rsi,%rsi), %r8d
    00001c4b: 	movl	%eax, 0x58(%rsp)
    00001c4f: 	leal	(,%rsi,4), %eax
    00001c56: 	leal	(%r8,%rsi), %ebx
    00001c5a: 	movslq	%eax, %rdi
    00001c5d: 	movslq	%esi, %rax
    00001c60: 	shlq	$0x2, %rax
    00001c64: 	leaq	(,%rdi,4), %rbp
    00001c6c: 	movq	%rax, 0x60(%rsp)
    00001c71: 	movslq	%r8d, %rax
    00001c74: 	leaq	(,%rax,4), %rdx
    00001c7c: 	movslq	%ebx, %rax
    00001c7f: 	movq	%rbp, 0x8(%rsp)
    00001c84: 	movq	%rdx, 0x78(%rsp)
    00001c89: 	leaq	(,%rax,4), %rdx
    00001c91: 	leal	-0x4(%rsi), %eax
    00001c94: 	shrl	$0x2, %eax
    00001c97: 	movq	%rdx, 0xd8(%rsp)
    00001c9f: 	addl	$0x1, %eax
    00001ca2: 	movl	%eax, 0x168(%rsp)
    00001ca9: 	movq	%rax, %rdx
    00001cac: 	leal	-0x4(%rcx), %eax
    00001caf: 	movl	$0xf, %ecx
    00001cb4: 	movl	%eax, 0x118(%rsp)
    00001cbb: 	shrl	$0x2, %eax
    00001cbe: 	shlq	$0x4, %rdx
    00001cc2: 	leal	0x1(%rax), %r9d
    00001cc6: 	movq	%rdx, 0x158(%rsp)
    00001cce: 	movl	%eax, %r11d
    00001cd1: 	movq	%rbp, %rdx
    00001cd4: 	leaq	-0x1(%r9), %rax
    00001cd8: 	movq	%r9, %r13
    00001cdb: 	movl	%r9d, 0x120(%rsp)
    00001ce3: 	imulq	%rax, %rdx
    00001ce7: 	testq	%rbp, %rbp
    00001cea: 	leaq	0xf(%rdx), %rsi
    00001cee: 	cmovnsq	%rsi, %rcx
    00001cf2: 	shlq	$0x4, %rax
    00001cf6: 	testq	%rbp, %rbp
    00001cf9: 	movl	%r13d, %esi
    00001cfc: 	cmovsq	%rdx, %r12
    00001d00: 	shlq	$0x4, %r9
    00001d04: 	andl	$-0x4, %esi
    00001d07: 	movq	%rcx, 0x128(%rsp)
    00001d0f: 	movq	0x38(%rsp), %rcx
    00001d14: 	movq	%r9, %rdx
    00001d17: 	movq	%r12, 0x130(%rsp)
    00001d1f: 	leaq	0xf(%rcx,%rax), %rax
    00001d24: 	addq	%rcx, %rdx
    00001d27: 	movl	%esi, 0x140(%rsp)
    00001d2e: 	movq	%rax, 0x80(%rsp)
    00001d36: 	movl	%r13d, %eax
    00001d39: 	movq	%rdx, 0x138(%rsp)
    00001d41: 	shrl	$0x2, %eax
    00001d44: 	movq	%rdi, %rdx
    00001d47: 	shlq	$0x4, %rdx
    00001d4b: 	subl	$0x1, %eax
    00001d4e: 	movq	%rdx, 0x150(%rsp)
    00001d56: 	shlq	$0x6, %rax
    00001d5a: 	leaq	(%r14,%rdi,8), %rdx
    00001d5e: 	movq	%rdx, 0x160(%rsp)
    00001d66: 	leaq	0x40(%rcx,%rax), %rdx
    00001d6b: 	leaq	(%rdi,%rdi,2), %rax
    00001d6f: 	movl	%r13d, %edi
    00001d72: 	leaq	(,%rax,4), %r12
    00001d7a: 	movl	%esi, %eax
    00001d7c: 	movq	%rdx, 0xf0(%rsp)
    00001d84: 	shll	$0x2, %edi
    00001d87: 	imulq	%rbp, %rax
    00001d8b: 	movl	%edi, 0x100(%rsp)
    00001d92: 	xorl	%r13d, %r13d
    00001d95: 	leaq	(%r14,%rax), %rdx
    00001d99: 	leal	(,%rsi,4), %eax
    00001da0: 	movl	0x54(%rsp), %esi
    00001da4: 	movq	%rdx, 0x148(%rsp)
    00001dac: 	movslq	%eax, %rdx
    00001daf: 	movl	%r11d, %eax
    00001db2: 	movq	%rdx, 0x108(%rsp)
    00001dba: 	leaq	(%rcx,%rdx,4), %rdx
    00001dbe: 	subl	%esi, %r8d
    00001dc1: 	subl	%esi, %ebx
    00001dc3: 	movq	%rdx, 0x110(%rsp)
    00001dcb: 	movq	%rax, %rdx
    00001dce: 	addq	$0x1, %rax
    00001dd2: 	imulq	%rbp, %rax
    00001dd6: 	shlq	$0x4, %rdx
    00001dda: 	movl	%esi, 0xc8(%rsp)
    00001de1: 	leaq	0x10(%rcx,%rdx), %rcx
    00001de6: 	movl	%r8d, 0x170(%rsp)
    00001dee: 	movq	%rcx, 0xd0(%rsp)
    00001df6: 	leaq	(%r14,%rax), %rdi
    00001dfa: 	movq	0x60(%rsp), %rax
    00001dff: 	movl	%ebx, 0x178(%rsp)
    00001e06: 	movq	%rdi, 0xf8(%rsp)
    00001e0e: 	movq	%rax, 0x70(%rsp)
    00001e13: 	movq	%r15, 0x180(%rsp)
    00001e1b: 	movq	%r14, 0x88(%rsp)
.Ltmp328:
    00001e23: 	movl	0x58(%rsp), %edx
    00001e27: 	testl	%edx, %edx
    00001e29: 	jle	.Ltmp319 # Offset: 7721
    00001e2f: 	movslq	0xc8(%rsp), %r14
    00001e37: 	leaq	0x4(%r13), %rax
    00001e3b: 	movl	0x178(%rsp), %ebx
    00001e42: 	leaq	0x4(%r10), %rcx
    00001e46: 	movq	%rax, 0xe0(%rsp)
    00001e4e: 	leaq	0x8(%r13), %rax
    00001e52: 	movl	0x170(%rsp), %r11d
    00001e5a: 	leaq	0x8(%r10), %rsi
    00001e5e: 	movq	%rax, 0xe8(%rsp)
    00001e66: 	movq	%r14, %rax
    00001e69: 	movq	0x38(%rsp), %r9
    00001e6e: 	shlq	$0x2, %r14
    00001e72: 	addl	%eax, %ebx
    00001e74: 	leaq	0x4(%r14), %rdi
    00001e78: 	leaq	0xc(%r13), %r15
    00001e7c: 	addl	%eax, %r11d
    00001e7f: 	movslq	%ebx, %rbx
    00001e82: 	movq	0x138(%rsp), %rbp
    00001e8a: 	movslq	%r11d, %r11
    00001e8d: 	movq	%rdi, 0x10(%rsp)
    00001e92: 	shlq	$0x2, %rbx
    00001e96: 	shlq	$0x2, %r11
    00001e9a: 	cmpq	%rcx, %r9
    00001e9d: 	leaq	0x8(%r14), %rdi
    00001ea1: 	leaq	0x4(%rbx), %rax
    00001ea5: 	setae	%dl
    00001ea8: 	cmpq	%r10, %rbp
    00001eab: 	movq	%rdi, 0x18(%rsp)
    00001eb0: 	movq	%rax, 0x90(%rsp)
    00001eb8: 	leaq	0x8(%rbx), %rax
    00001ebc: 	leaq	0xc(%r14), %rdi
    00001ec0: 	movq	%rax, 0xa8(%rsp)
    00001ec8: 	leaq	0xc(%rbx), %rax
    00001ecc: 	movq	%rax, 0xb0(%rsp)
    00001ed4: 	setbe	%al
    00001ed7: 	orl	%eax, %edx
    00001ed9: 	cmpq	%rsi, %r9
    00001edc: 	movq	%rdi, 0x20(%rsp)
    00001ee1: 	leaq	0x4(%r11), %rdi
    00001ee5: 	setae	%al
    00001ee8: 	cmpq	%rcx, %rbp
    00001eeb: 	movl	%edx, %r8d
    00001eee: 	movq	%rdi, 0x28(%rsp)
    00001ef3: 	setbe	%dl
    00001ef6: 	leaq	0x8(%r11), %rdi
    00001efa: 	orl	%edx, %eax
    00001efc: 	movq	%rdi, 0x30(%rsp)
    00001f01: 	leaq	0xc(%r11), %rdi
    00001f05: 	andl	%r8d, %eax
    00001f08: 	cmpl	$0xb, 0x118(%rsp)
    00001f10: 	movq	%rdi, 0x40(%rsp)
    00001f15: 	leaq	0xc(%r10), %rdi
    00001f19: 	seta	%dl
    00001f1c: 	movq	0x130(%rsp), %r8
    00001f24: 	andl	%edx, %eax
    00001f26: 	cmpq	%rdi, %r9
    00001f29: 	movl	%eax, %ecx
    00001f2b: 	setae	%al
    00001f2e: 	cmpq	%rsi, %rbp
    00001f31: 	movq	0x128(%rsp), %rsi
    00001f39: 	setbe	%dl
    00001f3c: 	orl	%edx, %eax
    00001f3e: 	andl	%eax, %ecx
    00001f40: 	leaq	0x10(%r10), %rax
    00001f44: 	cmpq	%rax, %r9
    00001f47: 	movq	%rax, 0xa0(%rsp)
    00001f4f: 	setae	%al
    00001f52: 	cmpq	%rdi, %rbp
    00001f55: 	movq	0x70(%rsp), %rbp
    00001f5a: 	movq	0x88(%rsp), %rdi
    00001f62: 	setbe	%dl
    00001f65: 	orl	%edx, %eax
    00001f67: 	andl	%eax, %ecx
    00001f69: 	movq	%rsi, %rax
    00001f6c: 	addq	%rbp, %rax
    00001f6f: 	addq	%rdi, %rax
    00001f72: 	cmpq	%rax, %r9
    00001f75: 	movq	%r8, %rax
    00001f78: 	seta	%dl
    00001f7b: 	addq	%rbp, %rax
    00001f7e: 	movq	0x78(%rsp), %rbp
    00001f83: 	addq	%rdi, %rax
    00001f86: 	cmpq	%rax, 0x80(%rsp)
    00001f8e: 	setb	%al
    00001f91: 	orl	%edx, %eax
    00001f93: 	andl	%eax, %ecx
    00001f95: 	movq	%rsi, %rax
    00001f98: 	addq	%rbp, %rax
    00001f9b: 	addq	%rdi, %rax
    00001f9e: 	cmpq	%rax, %r9
    00001fa1: 	movq	%r8, %rax
    00001fa4: 	seta	%dl
    00001fa7: 	addq	%rbp, %rax
    00001faa: 	movq	0xd8(%rsp), %rbp
    00001fb2: 	addq	%rdi, %rax
    00001fb5: 	cmpq	%rax, 0x80(%rsp)
    00001fbd: 	setb	%al
    00001fc0: 	orl	%edx, %eax
    00001fc2: 	andl	%eax, %ecx
    00001fc4: 	movq	%rsi, %rax
    00001fc7: 	addq	%rbp, %rax
    00001fca: 	addq	%rdi, %rax
    00001fcd: 	cmpq	%rax, %r9
    00001fd0: 	movq	%r8, %rax
    00001fd3: 	seta	%dl
    00001fd6: 	addq	%rbp, %rax
    00001fd9: 	addq	%rdi, %rax
    00001fdc: 	cmpq	%rax, 0x80(%rsp)
    00001fe4: 	setb	%al
    00001fe7: 	orl	%edx, %eax
    00001fe9: 	testb	%al, %cl
    00001feb: 	je	.Ltmp320 # Offset: 8171
    00001ff1: 	leaq	(%r13,%rsi), %rax
    00001ff6: 	addq	%rdi, %rax
    00001ff9: 	cmpq	%rax, %r9
    00001ffc: 	leaq	(%r13,%r8), %rax
    00002001: 	seta	%dl
    00002004: 	addq	%rdi, %rax
    00002007: 	cmpq	%rax, 0x80(%rsp)
    0000200f: 	setb	%al
    00002012: 	orb	%dl, %al
    00002014: 	je	.Ltmp320 # Offset: 8212
    0000201a: 	movq	0x160(%rsp), %rax
    00002022: 	movq	0x70(%rsp), %rsi
    00002027: 	movq	%rdi, %rdx
    0000202a: 	movq	%r10, 0x188(%rsp)
    00002032: 	movq	0x78(%rsp), %rcx
    00002037: 	movss	(%r10), %xmm5
    0000203c: 	addq	%r13, %rdi
    0000203f: 	movss	0x4(%r10), %xmm4
    00002045: 	movss	0x8(%r10), %xmm3
    0000204b: 	addq	%rdx, %rsi
    0000204e: 	leaq	(%r13,%rax), %r8
    00002053: 	movss	0xc(%r10), %xmm2
    00002059: 	addq	%rdx, %rcx
    0000205c: 	movq	%r9, %rax
    0000205f: 	addq	%rbp, %rdx
    00002062: 	movq	0xf0(%rsp), %r10
    0000206a: 	shufps	$0x0, %xmm5, %xmm5
    0000206e: 	shufps	$0x0, %xmm4, %xmm4
    00002072: 	shufps	$0x0, %xmm3, %xmm3
    00002076: 	movq	0x8(%rsp), %rbp
    0000207b: 	movq	0x150(%rsp), %r9
    00002083: 	shufps	$0x0, %xmm2, %xmm2
.Ltmp321:
    00002087: 	movups	(%rax), %xmm6
    0000208a: 	movups	0x10(%rax), %xmm1
    0000208e: 	addq	$0x40, %rax
    00002092: 	movups	-0x20(%rax), %xmm7
    00002096: 	movss	(%r8), %xmm0
    0000209b: 	movaps	%xmm6, %xmm8
    0000209f: 	shufps	$0xdd, %xmm1, %xmm6
    000020a3: 	movss	(%rdi,%rbp), %xmm10
    000020a9: 	shufps	$0x88, %xmm1, %xmm8
    000020ae: 	movups	-0x10(%rax), %xmm1
    000020b2: 	movaps	%xmm7, %xmm9
    000020b6: 	shufps	$0x88, %xmm1, %xmm9
    000020bb: 	shufps	$0xdd, %xmm1, %xmm7
    000020bf: 	movss	(%rdi,%r12), %xmm1
    000020c5: 	unpcklps	%xmm1, %xmm0
    000020c8: 	movss	(%rdi), %xmm1
    000020cc: 	unpcklps	%xmm10, %xmm1
    000020d0: 	movlhps	%xmm0, %xmm1
    000020d3: 	movaps	%xmm8, %xmm0
    000020d7: 	shufps	$0xdd, %xmm9, %xmm8
    000020dc: 	mulps	%xmm5, %xmm1
    000020df: 	shufps	$0x88, %xmm9, %xmm0
    000020e4: 	addps	%xmm0, %xmm1
    000020e7: 	movaps	%xmm1, %xmm0
    000020ea: 	movss	%xmm1, -0x40(%rax)
    000020ef: 	shufps	$0x55, %xmm1, %xmm0
    000020f3: 	movss	%xmm0, -0x30(%rax)
    000020f8: 	movaps	%xmm1, %xmm0
    000020fb: 	unpckhps	%xmm1, %xmm0
    000020fe: 	movss	%xmm0, -0x20(%rax)
    00002103: 	movaps	%xmm1, %xmm0
    00002106: 	shufps	$0xff, %xmm1, %xmm0
    0000210a: 	movss	%xmm0, -0x10(%rax)
    0000210f: 	movss	0x4(%rdi,%r12), %xmm0
    00002116: 	movss	0x4(%r8), %xmm10
    0000211c: 	movss	0x4(%rdi,%rbp), %xmm11
    00002123: 	unpcklps	%xmm0, %xmm10
    00002127: 	movss	0x4(%rdi), %xmm0
    0000212c: 	unpcklps	%xmm11, %xmm0
    00002130: 	movlhps	%xmm10, %xmm0
    00002134: 	mulps	%xmm4, %xmm0
    00002137: 	addps	%xmm1, %xmm0
    0000213a: 	movaps	%xmm0, %xmm1
    0000213d: 	movss	%xmm0, -0x40(%rax)
    00002142: 	shufps	$0x55, %xmm0, %xmm1
    00002146: 	movss	%xmm1, -0x30(%rax)
    0000214b: 	movaps	%xmm0, %xmm1
    0000214e: 	unpckhps	%xmm0, %xmm1
    00002151: 	movss	%xmm1, -0x20(%rax)
    00002156: 	movaps	%xmm0, %xmm1
    00002159: 	shufps	$0xff, %xmm0, %xmm1
    0000215d: 	movss	%xmm1, -0x10(%rax)
    00002162: 	movss	0x8(%rdi,%r12), %xmm1
    00002169: 	movss	0x8(%r8), %xmm10
    0000216f: 	movss	0x8(%rdi,%rbp), %xmm11
    00002176: 	unpcklps	%xmm1, %xmm10
    0000217a: 	movss	0x8(%rdi), %xmm1
    0000217f: 	unpcklps	%xmm11, %xmm1
    00002183: 	movlhps	%xmm10, %xmm1
    00002187: 	mulps	%xmm3, %xmm1
    0000218a: 	addps	%xmm0, %xmm1
    0000218d: 	movaps	%xmm1, %xmm0
    00002190: 	movss	%xmm1, -0x40(%rax)
    00002195: 	shufps	$0x55, %xmm1, %xmm0
    00002199: 	movss	%xmm0, -0x30(%rax)
    0000219e: 	movaps	%xmm1, %xmm0
    000021a1: 	unpckhps	%xmm1, %xmm0
    000021a4: 	movss	%xmm0, -0x20(%rax)
    000021a9: 	movaps	%xmm1, %xmm0
    000021ac: 	shufps	$0xff, %xmm1, %xmm0
    000021b0: 	movss	%xmm0, -0x10(%rax)
    000021b5: 	movss	0xc(%rdi,%r12), %xmm0
    000021bc: 	movss	0xc(%r8), %xmm10
    000021c2: 	movss	0xc(%rdi,%rbp), %xmm11
    000021c9: 	addq	%r9, %r8
    000021cc: 	unpcklps	%xmm0, %xmm10
    000021d0: 	movss	0xc(%rdi), %xmm0
    000021d5: 	addq	%r9, %rdi
    000021d8: 	unpcklps	%xmm11, %xmm0
    000021dc: 	movlhps	%xmm10, %xmm0
    000021e0: 	mulps	%xmm2, %xmm0
    000021e3: 	addps	%xmm1, %xmm0
    000021e6: 	movss	(%rsi,%r12), %xmm1
    000021ec: 	movss	(%rsi,%rbp,2), %xmm10
    000021f2: 	movss	(%rsi,%rbp), %xmm11
    000021f8: 	unpcklps	%xmm1, %xmm10
    000021fc: 	movss	(%rsi), %xmm1
    00002200: 	movss	%xmm0, -0x40(%rax)
    00002205: 	unpcklps	%xmm11, %xmm1
    00002209: 	movlhps	%xmm10, %xmm1
    0000220d: 	movaps	%xmm6, %xmm10
    00002211: 	shufps	$0xdd, %xmm7, %xmm6
    00002215: 	mulps	%xmm5, %xmm1
    00002218: 	shufps	$0x88, %xmm7, %xmm10
    0000221d: 	addps	%xmm10, %xmm1
    00002221: 	movaps	%xmm0, %xmm10
    00002225: 	shufps	$0x55, %xmm0, %xmm10
    0000222a: 	movss	%xmm10, -0x30(%rax)
    00002230: 	movaps	%xmm0, %xmm10
    00002234: 	unpckhps	%xmm0, %xmm10
    00002238: 	shufps	$0xff, %xmm0, %xmm0
    0000223c: 	movss	%xmm0, -0x10(%rax)
    00002241: 	movaps	%xmm1, %xmm0
    00002244: 	movss	%xmm1, -0x3c(%rax)
    00002249: 	shufps	$0x55, %xmm1, %xmm0
    0000224d: 	movss	%xmm0, -0x2c(%rax)
    00002252: 	movaps	%xmm1, %xmm0
    00002255: 	unpckhps	%xmm1, %xmm0
    00002258: 	movss	%xmm10, -0x20(%rax)
    0000225e: 	movss	%xmm0, -0x1c(%rax)
    00002263: 	movaps	%xmm1, %xmm0
    00002266: 	shufps	$0xff, %xmm1, %xmm0
    0000226a: 	movss	%xmm0, -0xc(%rax)
    0000226f: 	movss	0x4(%rsi,%r12), %xmm0
    00002276: 	movss	0x4(%rsi,%rbp,2), %xmm10
    0000227d: 	movss	0x4(%rsi,%rbp), %xmm11
    00002284: 	unpcklps	%xmm0, %xmm10
    00002288: 	movss	0x4(%rsi), %xmm0
    0000228d: 	unpcklps	%xmm11, %xmm0
    00002291: 	movlhps	%xmm10, %xmm0
    00002295: 	mulps	%xmm4, %xmm0
    00002298: 	addps	%xmm0, %xmm1
    0000229b: 	movaps	%xmm1, %xmm0
    0000229e: 	movss	%xmm1, -0x3c(%rax)
    000022a3: 	shufps	$0x55, %xmm1, %xmm0
    000022a7: 	movss	%xmm0, -0x2c(%rax)
    000022ac: 	movaps	%xmm1, %xmm0
    000022af: 	unpckhps	%xmm1, %xmm0
    000022b2: 	movss	%xmm0, -0x1c(%rax)
    000022b7: 	movaps	%xmm1, %xmm0
    000022ba: 	shufps	$0xff, %xmm1, %xmm0
    000022be: 	movss	%xmm0, -0xc(%rax)
    000022c3: 	movss	0x8(%rsi,%r12), %xmm0
    000022ca: 	movss	0x8(%rsi,%rbp,2), %xmm10
    000022d1: 	movss	0x8(%rsi,%rbp), %xmm11
    000022d8: 	unpcklps	%xmm0, %xmm10
    000022dc: 	movss	0x8(%rsi), %xmm0
    000022e1: 	unpcklps	%xmm11, %xmm0
    000022e5: 	movlhps	%xmm10, %xmm0
    000022e9: 	mulps	%xmm3, %xmm0
    000022ec: 	addps	%xmm0, %xmm1
    000022ef: 	movaps	%xmm1, %xmm0
    000022f2: 	movss	%xmm1, -0x3c(%rax)
    000022f7: 	shufps	$0x55, %xmm1, %xmm0
    000022fb: 	movss	%xmm0, -0x2c(%rax)
    00002300: 	movaps	%xmm1, %xmm0
    00002303: 	unpckhps	%xmm1, %xmm0
    00002306: 	movss	%xmm0, -0x1c(%rax)
    0000230b: 	movaps	%xmm1, %xmm0
    0000230e: 	shufps	$0xff, %xmm1, %xmm0
    00002312: 	movss	%xmm0, -0xc(%rax)
    00002317: 	movss	0xc(%rsi,%r12), %xmm0
    0000231e: 	movss	0xc(%rsi,%rbp,2), %xmm10
    00002325: 	movss	0xc(%rsi,%rbp), %xmm11
    0000232c: 	unpcklps	%xmm0, %xmm10
    00002330: 	movss	0xc(%rsi), %xmm0
    00002335: 	addq	%r9, %rsi
    00002338: 	unpcklps	%xmm11, %xmm0
    0000233c: 	movlhps	%xmm10, %xmm0
    00002340: 	mulps	%xmm2, %xmm0
    00002343: 	addps	%xmm1, %xmm0
    00002346: 	movss	(%rcx,%r12), %xmm1
    0000234c: 	movss	(%rcx,%rbp,2), %xmm10
    00002352: 	movss	(%rcx,%rbp), %xmm11
    00002358: 	unpcklps	%xmm1, %xmm10
    0000235c: 	movss	(%rcx), %xmm1
    00002360: 	movss	%xmm0, -0x3c(%rax)
    00002365: 	unpcklps	%xmm11, %xmm1
    00002369: 	movlhps	%xmm10, %xmm1
    0000236d: 	mulps	%xmm5, %xmm1
    00002370: 	addps	%xmm8, %xmm1
    00002374: 	movaps	%xmm0, %xmm8
    00002378: 	shufps	$0x55, %xmm0, %xmm8
    0000237d: 	movss	%xmm8, -0x2c(%rax)
    00002383: 	movaps	%xmm0, %xmm8
    00002387: 	unpckhps	%xmm0, %xmm8
    0000238b: 	shufps	$0xff, %xmm0, %xmm0
    0000238f: 	movss	%xmm0, -0xc(%rax)
    00002394: 	movaps	%xmm1, %xmm0
    00002397: 	movss	%xmm1, -0x38(%rax)
    0000239c: 	shufps	$0x55, %xmm1, %xmm0
    000023a0: 	movss	%xmm0, -0x28(%rax)
    000023a5: 	movaps	%xmm1, %xmm0
    000023a8: 	unpckhps	%xmm1, %xmm0
    000023ab: 	movss	%xmm8, -0x1c(%rax)
    000023b1: 	movss	%xmm0, -0x18(%rax)
    000023b6: 	movaps	%xmm1, %xmm0
    000023b9: 	shufps	$0xff, %xmm1, %xmm0
    000023bd: 	movss	%xmm0, -0x8(%rax)
    000023c2: 	movss	0x4(%rcx,%r12), %xmm0
    000023c9: 	movss	0x4(%rcx,%rbp,2), %xmm8
    000023d0: 	movss	0x4(%rcx,%rbp), %xmm9
    000023d7: 	unpcklps	%xmm0, %xmm8
    000023db: 	movss	0x4(%rcx), %xmm0
    000023e0: 	unpcklps	%xmm9, %xmm0
    000023e4: 	movlhps	%xmm8, %xmm0
    000023e8: 	mulps	%xmm4, %xmm0
    000023eb: 	addps	%xmm1, %xmm0
    000023ee: 	movaps	%xmm0, %xmm1
    000023f1: 	movss	%xmm0, -0x38(%rax)
    000023f6: 	shufps	$0x55, %xmm0, %xmm1
    000023fa: 	movss	%xmm1, -0x28(%rax)
    000023ff: 	movaps	%xmm0, %xmm1
    00002402: 	unpckhps	%xmm0, %xmm1
    00002405: 	movss	%xmm1, -0x18(%rax)
    0000240a: 	movaps	%xmm0, %xmm1
    0000240d: 	shufps	$0xff, %xmm0, %xmm1
    00002411: 	movss	%xmm1, -0x8(%rax)
    00002416: 	movss	0x8(%rcx,%r12), %xmm1
    0000241d: 	movss	0x8(%rcx,%rbp,2), %xmm8
    00002424: 	movss	0x8(%rcx,%rbp), %xmm9
    0000242b: 	unpcklps	%xmm1, %xmm8
    0000242f: 	movss	0x8(%rcx), %xmm1
    00002434: 	unpcklps	%xmm9, %xmm1
    00002438: 	movlhps	%xmm8, %xmm1
    0000243c: 	mulps	%xmm3, %xmm1
    0000243f: 	addps	%xmm0, %xmm1
    00002442: 	movaps	%xmm1, %xmm0
    00002445: 	movss	%xmm1, -0x38(%rax)
    0000244a: 	shufps	$0x55, %xmm1, %xmm0
    0000244e: 	movss	%xmm0, -0x28(%rax)
    00002453: 	movaps	%xmm1, %xmm0
    00002456: 	unpckhps	%xmm1, %xmm0
    00002459: 	movss	%xmm0, -0x18(%rax)
    0000245e: 	movaps	%xmm1, %xmm0
    00002461: 	shufps	$0xff, %xmm1, %xmm0
    00002465: 	movss	%xmm0, -0x8(%rax)
    0000246a: 	movss	0xc(%rcx,%r12), %xmm0
    00002471: 	movss	0xc(%rcx,%rbp,2), %xmm8
    00002478: 	movss	0xc(%rcx,%rbp), %xmm9
    0000247f: 	unpcklps	%xmm0, %xmm8
    00002483: 	movss	0xc(%rcx), %xmm0
    00002488: 	addq	%r9, %rcx
    0000248b: 	unpcklps	%xmm9, %xmm0
    0000248f: 	movlhps	%xmm8, %xmm0
    00002493: 	mulps	%xmm2, %xmm0
    00002496: 	addps	%xmm1, %xmm0
    00002499: 	movss	(%rdx,%r12), %xmm1
    0000249f: 	movss	(%rdx,%rbp,2), %xmm8
    000024a5: 	movss	(%rdx,%rbp), %xmm9
    000024ab: 	unpcklps	%xmm1, %xmm8
    000024af: 	movss	(%rdx), %xmm1
    000024b3: 	movss	%xmm0, -0x38(%rax)
    000024b8: 	unpcklps	%xmm9, %xmm1
    000024bc: 	movlhps	%xmm8, %xmm1
    000024c0: 	mulps	%xmm5, %xmm1
    000024c3: 	addps	%xmm6, %xmm1
    000024c6: 	movaps	%xmm0, %xmm6
    000024c9: 	shufps	$0x55, %xmm0, %xmm6
    000024cd: 	movss	%xmm6, -0x28(%rax)
    000024d2: 	movaps	%xmm0, %xmm6
    000024d5: 	unpckhps	%xmm0, %xmm6
    000024d8: 	shufps	$0xff, %xmm0, %xmm0
    000024dc: 	movss	%xmm0, -0x8(%rax)
    000024e1: 	movaps	%xmm1, %xmm0
    000024e4: 	movss	%xmm1, -0x34(%rax)
    000024e9: 	shufps	$0x55, %xmm1, %xmm0
    000024ed: 	movss	%xmm0, -0x24(%rax)
    000024f2: 	movaps	%xmm1, %xmm0
    000024f5: 	unpckhps	%xmm1, %xmm0
    000024f8: 	movss	%xmm6, -0x18(%rax)
    000024fd: 	movss	%xmm0, -0x14(%rax)
    00002502: 	movaps	%xmm1, %xmm0
    00002505: 	shufps	$0xff, %xmm1, %xmm0
    00002509: 	movss	%xmm0, -0x4(%rax)
    0000250e: 	movss	0x4(%rdx,%r12), %xmm0
    00002515: 	movss	0x4(%rdx,%rbp,2), %xmm6
    0000251b: 	movss	0x4(%rdx,%rbp), %xmm7
    00002521: 	unpcklps	%xmm0, %xmm6
    00002524: 	movss	0x4(%rdx), %xmm0
    00002529: 	unpcklps	%xmm7, %xmm0
    0000252c: 	movlhps	%xmm6, %xmm0
    0000252f: 	mulps	%xmm4, %xmm0
    00002532: 	addps	%xmm1, %xmm0
    00002535: 	movaps	%xmm0, %xmm1
    00002538: 	movss	%xmm0, -0x34(%rax)
    0000253d: 	shufps	$0x55, %xmm0, %xmm1
    00002541: 	movss	%xmm1, -0x24(%rax)
    00002546: 	movaps	%xmm0, %xmm1
    00002549: 	unpckhps	%xmm0, %xmm1
    0000254c: 	movss	%xmm1, -0x14(%rax)
    00002551: 	movaps	%xmm0, %xmm1
    00002554: 	shufps	$0xff, %xmm0, %xmm1
    00002558: 	movss	%xmm1, -0x4(%rax)
    0000255d: 	movss	0x8(%rdx,%r12), %xmm1
    00002564: 	movss	0x8(%rdx,%rbp,2), %xmm6
    0000256a: 	movss	0x8(%rdx,%rbp), %xmm7
    00002570: 	unpcklps	%xmm1, %xmm6
    00002573: 	movss	0x8(%rdx), %xmm1
    00002578: 	unpcklps	%xmm7, %xmm1
    0000257b: 	movlhps	%xmm6, %xmm1
    0000257e: 	mulps	%xmm3, %xmm1
    00002581: 	addps	%xmm0, %xmm1
    00002584: 	movaps	%xmm1, %xmm0
    00002587: 	movss	%xmm1, -0x34(%rax)
    0000258c: 	shufps	$0x55, %xmm1, %xmm0
    00002590: 	movss	%xmm0, -0x24(%rax)
    00002595: 	movaps	%xmm1, %xmm0
    00002598: 	unpckhps	%xmm1, %xmm0
    0000259b: 	movss	%xmm0, -0x14(%rax)
    000025a0: 	movaps	%xmm1, %xmm0
    000025a3: 	shufps	$0xff, %xmm1, %xmm0
    000025a7: 	movss	%xmm0, -0x4(%rax)
    000025ac: 	movss	0xc(%rdx,%r12), %xmm0
    000025b3: 	movss	0xc(%rdx,%rbp,2), %xmm6
    000025b9: 	movss	0xc(%rdx,%rbp), %xmm7
    000025bf: 	unpcklps	%xmm0, %xmm6
    000025c2: 	movss	0xc(%rdx), %xmm0
    000025c7: 	addq	%r9, %rdx
    000025ca: 	unpcklps	%xmm7, %xmm0
    000025cd: 	movlhps	%xmm6, %xmm0
    000025d0: 	mulps	%xmm2, %xmm0
    000025d3: 	addps	%xmm1, %xmm0
    000025d6: 	movaps	%xmm0, %xmm1
    000025d9: 	movss	%xmm0, -0x34(%rax)
    000025de: 	shufps	$0x55, %xmm0, %xmm1
    000025e2: 	movss	%xmm1, -0x24(%rax)
    000025e7: 	movaps	%xmm0, %xmm1
    000025ea: 	unpckhps	%xmm0, %xmm1
    000025ed: 	shufps	$0xff, %xmm0, %xmm0
    000025f1: 	movss	%xmm0, -0x4(%rax)
    000025f6: 	movss	%xmm1, -0x14(%rax)
    000025fb: 	cmpq	%rax, %r10
    000025fe: 	jne	.Ltmp321 # Offset: 9726
    00002604: 	movq	%rbp, 0x8(%rsp)
    00002609: 	movq	0x188(%rsp), %r10
    00002611: 	movl	0x140(%rsp), %edi
    00002618: 	cmpl	%edi, 0x120(%rsp)
    0000261f: 	je	.Ltmp322 # Offset: 9759
    00002625: 	movq	0x90(%rsp), %rdi
    0000262d: 	movq	0x110(%rsp), %rax
    00002635: 	movq	%r12, 0x90(%rsp)
    0000263d: 	movq	0x108(%rsp), %rcx
    00002645: 	movq	0x148(%rsp), %rdx
    0000264d: 	movq	0xa8(%rsp), %r8
    00002655: 	movq	0xb0(%rsp), %r9
    0000265d: 	movq	0xe0(%rsp), %rbp
    00002665: 	movq	0xe8(%rsp), %r12
.Ltmp323:
    0000266d: 	movss	(%rdx,%r13), %xmm0
    00002673: 	mulss	(%r10), %xmm0
    00002678: 	addq	$0x4, %rcx
    0000267c: 	addq	$0x10, %rax
    00002680: 	addss	-0x10(%rax), %xmm0
    00002685: 	movq	0x10(%rsp), %rsi
    0000268a: 	movss	%xmm0, -0x10(%rax)
    0000268f: 	movss	(%rdx,%rbp), %xmm1
    00002694: 	mulss	0x4(%r10), %xmm1
    0000269a: 	addss	%xmm0, %xmm1
    0000269e: 	movss	%xmm1, -0x10(%rax)
    000026a3: 	movss	(%rdx,%r12), %xmm0
    000026a9: 	mulss	0x8(%r10), %xmm0
    000026af: 	addss	%xmm1, %xmm0
    000026b3: 	movss	%xmm0, -0x10(%rax)
    000026b8: 	movss	(%rdx,%r15), %xmm1
    000026be: 	mulss	0xc(%r10), %xmm1
    000026c4: 	addss	%xmm1, %xmm0
    000026c8: 	movss	%xmm0, -0x10(%rax)
    000026cd: 	movss	(%rdx,%r14), %xmm0
    000026d3: 	mulss	(%r10), %xmm0
    000026d8: 	addss	-0xc(%rax), %xmm0
    000026dd: 	movss	%xmm0, -0xc(%rax)
    000026e2: 	movss	(%rdx,%rsi), %xmm1
    000026e7: 	mulss	0x4(%r10), %xmm1
    000026ed: 	movq	0x18(%rsp), %rsi
    000026f2: 	addss	%xmm0, %xmm1
    000026f6: 	movss	%xmm1, -0xc(%rax)
    000026fb: 	movss	(%rdx,%rsi), %xmm0
    00002700: 	mulss	0x8(%r10), %xmm0
    00002706: 	movq	0x20(%rsp), %rsi
    0000270b: 	addss	%xmm1, %xmm0
    0000270f: 	movss	%xmm0, -0xc(%rax)
    00002714: 	movss	(%rdx,%rsi), %xmm1
    00002719: 	mulss	0xc(%r10), %xmm1
    0000271f: 	addss	%xmm1, %xmm0
    00002723: 	movss	%xmm0, -0xc(%rax)
    00002728: 	movss	(%rdx,%r11), %xmm0
    0000272e: 	mulss	(%r10), %xmm0
    00002733: 	addss	-0x8(%rax), %xmm0
    00002738: 	movss	%xmm0, -0x8(%rax)
    0000273d: 	movq	0x28(%rsp), %rsi
    00002742: 	movss	(%rdx,%rsi), %xmm1
    00002747: 	mulss	0x4(%r10), %xmm1
    0000274d: 	movq	0x30(%rsp), %rsi
    00002752: 	addss	%xmm0, %xmm1
    00002756: 	movss	%xmm1, -0x8(%rax)
    0000275b: 	movss	(%rdx,%rsi), %xmm0
    00002760: 	mulss	0x8(%r10), %xmm0
    00002766: 	movq	0x40(%rsp), %rsi
    0000276b: 	addss	%xmm1, %xmm0
    0000276f: 	movss	%xmm0, -0x8(%rax)
    00002774: 	movss	(%rdx,%rsi), %xmm1
    00002779: 	mulss	0xc(%r10), %xmm1
    0000277f: 	addss	%xmm1, %xmm0
    00002783: 	movss	%xmm0, -0x8(%rax)
    00002788: 	movss	(%rdx,%rbx), %xmm0
    0000278d: 	mulss	(%r10), %xmm0
    00002792: 	addss	-0x4(%rax), %xmm0
    00002797: 	movss	%xmm0, -0x4(%rax)
    0000279c: 	movss	(%rdx,%rdi), %xmm1
    000027a1: 	mulss	0x4(%r10), %xmm1
    000027a7: 	addss	%xmm0, %xmm1
    000027ab: 	movss	%xmm1, -0x4(%rax)
    000027b0: 	movss	(%rdx,%r8), %xmm0
    000027b6: 	mulss	0x8(%r10), %xmm0
    000027bc: 	addss	%xmm1, %xmm0
    000027c0: 	movss	%xmm0, -0x4(%rax)
    000027c5: 	movss	(%rdx,%r9), %xmm1
    000027cb: 	addq	0x8(%rsp), %rdx
    000027d0: 	mulss	0xc(%r10), %xmm1
    000027d6: 	addss	%xmm1, %xmm0
    000027da: 	movss	%xmm0, -0x4(%rax)
    000027df: 	cmpl	%ecx, 0x58(%rsp)
    000027e3: 	jg	.Ltmp323 # Offset: 10211
    000027e9: 	movq	0x90(%rsp), %r12
.Ltmp322:
    000027f1: 	movq	0xf8(%rsp), %rax
    000027f9: 	movl	0x100(%rsp), %edx
.Ltmp423:
    00002800: 	cmpl	%edx, 0x1b8(%rsp)
    00002807: 	jle	.Ltmp324 # Offset: 10247
    0000280d: 	movslq	%edx, %rbx
    00002810: 	movq	0x38(%rsp), %r8
    00002815: 	leaq	0x4(%r13), %rsi
    00002819: 	leaq	0x8(%r13), %r14
    0000281d: 	movl	0x1b8(%rsp), %r9d
    00002825: 	leaq	(,%rbx,4), %r11
    0000282d: 	movq	%rbx, 0x10(%rsp)
    00002832: 	leaq	0xc(%r13), %r15
    00002836: 	leaq	(%r8,%r11), %rcx
    0000283a: 	subl	%edx, %r9d
    0000283d: 	movl	%r9d, %edi
    00002840: 	addq	%rdi, %rbx
    00002843: 	subq	$0x1, %rdi
    00002847: 	movq	%rdi, %rbp
    0000284a: 	movq	0x60(%rsp), %rdi
    0000284f: 	leaq	-0x1(%r8,%rbx,4), %r8
    00002854: 	imulq	%rdi, %rbp
    00002858: 	testq	%rdi, %rdi
    0000285b: 	movl	$0x0, %edi
    00002860: 	cmovsq	%rbp, %rdi
    00002864: 	addq	%r13, %rdi
    00002867: 	addq	%rax, %rdi
    0000286a: 	cmpq	%rdi, %r8
    0000286d: 	leaq	0xf(%rbp), %rdi
    00002871: 	movl	$0xf, %ebp
    00002876: 	setb	%r8b
    0000287a: 	cmpq	$0x0, 0x60(%rsp)
    00002880: 	cmovsq	%rbp, %rdi
    00002884: 	addq	%r13, %rdi
    00002887: 	addq	%rax, %rdi
    0000288a: 	cmpq	%rdi, %rcx
    0000288d: 	seta	%dil
    00002891: 	orb	%r8b, %dil
    00002894: 	je	.Ltmp325 # Offset: 10388
    0000289a: 	movq	0x38(%rsp), %r8
    0000289f: 	leaq	(%r8,%rbx,4), %rdi
    000028a3: 	cmpq	%rdi, %r10
    000028a6: 	setae	%r8b
    000028aa: 	cmpq	0xa0(%rsp), %rcx
    000028b2: 	setae	%dil
    000028b6: 	orl	%r8d, %edi
    000028b9: 	cmpl	$0x1, %r9d
    000028bd: 	setne	%r8b
    000028c1: 	testb	%r8b, %dil
    000028c4: 	je	.Ltmp325 # Offset: 10436
    000028ca: 	leal	-0x1(%r9), %edi
    000028ce: 	cmpl	$0x2, %edi
    000028d1: 	jbe	.Ltmp326 # Offset: 10449
    000028d7: 	movq	0x60(%rsp), %rbp
    000028dc: 	leaq	(%rax,%r13), %rdi
    000028e0: 	movups	(%rcx), %xmm7
    000028e3: 	movss	0x4(%r10), %xmm4
    000028e9: 	movss	0x8(%r10), %xmm3
    000028ef: 	leaq	(%rdi,%rbp), %r8
    000028f3: 	movq	%rbp, %rbx
    000028f6: 	movss	0xc(%r10), %xmm2
    000028fc: 	leaq	(%r8,%rbp), %r11
    00002900: 	movss	(%r8), %xmm5
    00002905: 	shufps	$0x0, %xmm4, %xmm4
    00002909: 	shufps	$0x0, %xmm3, %xmm3
    0000290d: 	addq	%r11, %rbx
    00002910: 	movss	(%r11), %xmm1
    00002915: 	shufps	$0x0, %xmm2, %xmm2
    00002919: 	movss	(%rbx), %xmm0
    0000291d: 	unpcklps	%xmm0, %xmm1
    00002920: 	movss	(%rdi), %xmm0
    00002924: 	unpcklps	%xmm5, %xmm0
    00002927: 	movlhps	%xmm1, %xmm0
    0000292a: 	movss	(%r10), %xmm1
    0000292f: 	shufps	$0x0, %xmm1, %xmm1
    00002933: 	mulps	%xmm1, %xmm0
    00002936: 	addps	%xmm7, %xmm0
    00002939: 	movups	%xmm0, (%rcx)
    0000293c: 	movss	0x4(%rbx), %xmm1
    00002941: 	movss	0x4(%r11), %xmm5
    00002947: 	movss	0x4(%r8), %xmm6
    0000294d: 	unpcklps	%xmm1, %xmm5
    00002950: 	movss	0x4(%rdi), %xmm1
    00002955: 	unpcklps	%xmm6, %xmm1
    00002958: 	movlhps	%xmm5, %xmm1
    0000295b: 	mulps	%xmm4, %xmm1
    0000295e: 	addps	%xmm0, %xmm1
    00002961: 	movups	%xmm1, (%rcx)
    00002964: 	movss	0x8(%rbx), %xmm0
    00002969: 	movss	0x8(%r11), %xmm4
    0000296f: 	movss	0x8(%r8), %xmm5
    00002975: 	unpcklps	%xmm0, %xmm4
    00002978: 	movss	0x8(%rdi), %xmm0
    0000297d: 	unpcklps	%xmm5, %xmm0
    00002980: 	movlhps	%xmm4, %xmm0
    00002983: 	mulps	%xmm3, %xmm0
    00002986: 	addps	%xmm1, %xmm0
    00002989: 	movups	%xmm0, (%rcx)
    0000298c: 	movss	0xc(%rbx), %xmm1
    00002991: 	movss	0xc(%r11), %xmm3
    00002997: 	movl	%r9d, %ebx
    0000299a: 	movss	0xc(%r8), %xmm4
    000029a0: 	movl	%r9d, %r8d
    000029a3: 	unpcklps	%xmm1, %xmm3
    000029a6: 	movss	0xc(%rdi), %xmm1
    000029ab: 	andl	$-0x4, %r8d
    000029af: 	movq	%rbp, %rdi
    000029b2: 	addl	%r8d, %edx
    000029b5: 	unpcklps	%xmm4, %xmm1
    000029b8: 	movlhps	%xmm3, %xmm1
    000029bb: 	mulps	%xmm2, %xmm1
    000029be: 	addps	%xmm1, %xmm0
    000029c1: 	movups	%xmm0, (%rcx)
    000029c4: 	movl	%r8d, %ecx
    000029c7: 	imulq	%rcx, %rdi
    000029cb: 	addq	%rax, %rdi
    000029ce: 	cmpl	%r8d, %r9d
    000029d1: 	je	.Ltmp324 # Offset: 10705
    000029d7: 	subl	%r8d, %ebx
    000029da: 	movl	%ebx, %r9d
    000029dd: 	cmpl	$0x1, %ebx
    000029e0: 	je	.Ltmp327 # Offset: 10720
.Ltmp522:
    000029e6: 	movq	0x10(%rsp), %r8
    000029eb: 	movq	0x38(%rsp), %rbx
    000029f0: 	movss	(%r10), %xmm1
    000029f5: 	movss	0x4(%r10), %xmm4
    000029fb: 	addq	%rcx, %r8
    000029fe: 	movss	0x8(%r10), %xmm3
    00002a04: 	movss	0xc(%r10), %xmm2
    00002a0a: 	leaq	(%rbx,%r8,4), %r8
    00002a0e: 	movq	0x60(%rsp), %rbx
    00002a13: 	shufps	$0xe0, %xmm1, %xmm1
    00002a17: 	shufps	$0xe0, %xmm4, %xmm4
    00002a1b: 	shufps	$0xe0, %xmm3, %xmm3
    00002a1f: 	shufps	$0xe0, %xmm2, %xmm2
    00002a23: 	imulq	%rbx, %rcx
    00002a27: 	addq	%r13, %rcx
    00002a2a: 	addq	%rcx, %rax
    00002a2d: 	leaq	(%rax,%rbx), %rcx
    00002a31: 	movss	(%rax), %xmm0
    00002a35: 	movss	(%rcx), %xmm5
    00002a39: 	unpcklps	%xmm5, %xmm0
    00002a3c: 	mulps	%xmm1, %xmm0
    00002a3f: 	movq	(%r8), %xmm1
    00002a44: 	addps	%xmm0, %xmm1
    00002a47: 	movlps	%xmm1, (%r8)
    00002a4b: 	movss	0x4(%rcx), %xmm5
    00002a50: 	movss	0x4(%rax), %xmm0
    00002a55: 	unpcklps	%xmm5, %xmm0
    00002a58: 	mulps	%xmm4, %xmm0
    00002a5b: 	addps	%xmm0, %xmm1
    00002a5e: 	movlps	%xmm1, (%r8)
    00002a62: 	movss	0x8(%rcx), %xmm4
    00002a67: 	movss	0x8(%rax), %xmm0
    00002a6c: 	unpcklps	%xmm4, %xmm0
    00002a6f: 	mulps	%xmm3, %xmm0
    00002a72: 	addps	%xmm1, %xmm0
    00002a75: 	movlps	%xmm0, (%r8)
    00002a79: 	movss	0xc(%rcx), %xmm3
    00002a7e: 	movss	0xc(%rax), %xmm1
    00002a83: 	movl	%r9d, %eax
    00002a86: 	andl	$-0x2, %eax
    00002a89: 	unpcklps	%xmm3, %xmm1
    00002a8c: 	movl	%eax, %ecx
    00002a8e: 	addl	%eax, %edx
    00002a90: 	mulps	%xmm2, %xmm1
    00002a93: 	imulq	%rbx, %rcx
    00002a97: 	addq	%rcx, %rdi
    00002a9a: 	addps	%xmm1, %xmm0
    00002a9d: 	movlps	%xmm0, (%r8)
    00002aa1: 	cmpl	%eax, %r9d
    00002aa4: 	je	.Ltmp324 # Offset: 10916
.Ltmp327:
    00002aa6: 	movq	0x38(%rsp), %rax
    00002aab: 	movslq	%edx, %rdx
    00002aae: 	movss	(%rdi,%r13), %xmm0
    00002ab4: 	mulss	(%r10), %xmm0
    00002ab9: 	leaq	(%rax,%rdx,4), %rax
    00002abd: 	addss	(%rax), %xmm0
    00002ac1: 	movss	%xmm0, (%rax)
    00002ac5: 	movss	(%rdi,%rsi), %xmm1
    00002aca: 	mulss	0x4(%r10), %xmm1
    00002ad0: 	addss	%xmm0, %xmm1
    00002ad4: 	movss	%xmm1, (%rax)
    00002ad8: 	movss	(%rdi,%r14), %xmm0
    00002ade: 	mulss	0x8(%r10), %xmm0
    00002ae4: 	addss	%xmm1, %xmm0
    00002ae8: 	movss	%xmm0, (%rax)
    00002aec: 	movss	(%rdi,%r15), %xmm1
    00002af2: 	mulss	0xc(%r10), %xmm1
    00002af8: 	addss	%xmm1, %xmm0
    00002afc: 	movss	%xmm0, (%rax)
.Ltmp324:
    00002b00: 	addl	$0x4, 0xc8(%rsp)
    00002b08: 	addq	$0x10, %r13
    00002b0c: 	movq	0xa0(%rsp), %r10
    00002b14: 	addq	$0x10, 0x70(%rsp)
    00002b1a: 	addq	$0x10, 0x78(%rsp)
    00002b20: 	addq	$0x10, 0xd8(%rsp)
    00002b29: 	cmpq	0x158(%rsp), %r13
    00002b31: 	jne	.Ltmp328 # Offset: 11057
    00002b37: 	movl	0x168(%rsp), %eax
    00002b3e: 	movq	0x180(%rsp), %r15
    00002b46: 	movq	0x88(%rsp), %r14
    00002b4e: 	shll	$0x2, %eax
    00002b51: 	movl	%eax, 0x70(%rsp)
    00002b55: 	movl	%eax, %edi
.Ltmp533:
    00002b57: 	cmpl	%edi, 0x54(%rsp)
    00002b5b: 	jle	.Ltmp329 # Offset: 11099
    00002b61: 	movslq	0x54(%rsp), %rbx
    00002b66: 	movl	0x1b8(%rsp), %esi
    00002b6d: 	movslq	0x70(%rsp), %r13
    00002b72: 	movq	0x38(%rsp), %r8
    00002b77: 	leaq	(%rbx,%rbx), %rdi
    00002b7b: 	leal	-0x3(%rsi), %eax
    00002b7e: 	movq	%rbx, %r10
    00002b81: 	movq	%rbx, 0x8(%rsp)
    00002b86: 	movl	%eax, 0x30(%rsp)
    00002b8a: 	leaq	(%rdi,%r13), %rax
    00002b8e: 	leaq	(,%rbx,4), %rbp
    00002b96: 	leaq	(,%rax,4), %r12
    00002b9e: 	leal	-0x4(%rsi), %eax
    00002ba1: 	movl	%eax, 0x138(%rsp)
    00002ba8: 	shrl	$0x2, %eax
    00002bab: 	leaq	(,%r13,4), %r11
    00002bb3: 	leal	0x1(%rax), %ecx
    00002bb6: 	movl	%eax, %r9d
    00002bb9: 	leal	(,%rbx,4), %eax
    00002bc0: 	movl	%ecx, 0x10(%rsp)
    00002bc4: 	subq	$0x1, %rcx
    00002bc8: 	cltq
    00002bca: 	movq	%rcx, %rsi
    00002bcd: 	shlq	$0x4, %rsi
    00002bd1: 	leaq	0xc(%r8,%rsi), %rsi
    00002bd6: 	movq	%rsi, 0x28(%rsp)
    00002bdb: 	leaq	(,%rax,4), %rsi
    00002be3: 	imulq	%rsi, %rcx
    00002be7: 	movq	%rsi, 0x20(%rsp)
    00002bec: 	xorl	%esi, %esi
    00002bee: 	testl	%ebx, %ebx
    00002bf0: 	movq	%rsi, %rdx
    00002bf3: 	cmovsq	%rcx, %rdx
    00002bf7: 	cmovnsq	%rcx, %rsi
    00002bfb: 	movl	0x10(%rsp), %ecx
    00002bff: 	movq	%rdx, 0x140(%rsp)
    00002c07: 	shrl	$0x2, %ecx
    00002c0a: 	movq	%rax, %rdx
    00002c0d: 	shlq	$0x4, %rdx
    00002c11: 	subl	$0x1, %ecx
    00002c14: 	movq	%rsi, 0x18(%rsp)
    00002c19: 	movq	%r8, %rsi
    00002c1c: 	shlq	$0x6, %rcx
    00002c20: 	movq	%rdx, %rbx
    00002c23: 	leaq	(%rbp,%r14), %rdx
    00002c28: 	movq	%rdx, 0x198(%rsp)
    00002c30: 	leaq	0x40(%r8,%rcx), %rdx
    00002c35: 	leaq	(%rax,%rax,2), %r8
    00002c39: 	leaq	(,%r8,4), %rax
    00002c41: 	movq	%rdx, 0x58(%rsp)
    00002c46: 	movq	%rsi, %r8
    00002c49: 	movq	%rax, 0x60(%rsp)
    00002c4e: 	movl	0x10(%rsp), %eax
    00002c52: 	andl	$-0x4, %eax
    00002c55: 	movl	%eax, 0x188(%rsp)
    00002c5c: 	leal	(,%rax,4), %eax
    00002c63: 	movslq	%eax, %rcx
    00002c66: 	shlq	$0x2, %rcx
    00002c6a: 	leaq	(%rsi,%rcx), %rdx
    00002c6e: 	movl	%r10d, %esi
    00002c71: 	imull	%eax, %esi
    00002c74: 	movq	%rdx, 0x78(%rsp)
    00002c79: 	leaq	0x4(%r8,%rcx), %rdx
    00002c7e: 	movq	%rdx, 0x88(%rsp)
    00002c86: 	leaq	0x8(%r8,%rcx), %rdx
    00002c8b: 	movq	%rdx, 0xa0(%rsp)
    00002c93: 	movl	%esi, 0x80(%rsp)
    00002c9a: 	leal	0x1(%rax), %esi
    00002c9d: 	imull	%r10d, %esi
    00002ca1: 	movl	%esi, 0x90(%rsp)
    00002ca8: 	leal	0x2(%rax), %esi
    00002cab: 	movl	%esi, %edx
    00002cad: 	leal	0x5(%rax), %esi
    00002cb0: 	imull	%r10d, %edx
    00002cb4: 	movl	%edx, 0xa8(%rsp)
    00002cbb: 	leaq	0xc(%r8,%rcx), %rdx
    00002cc0: 	leal	0x3(%rax), %ecx
    00002cc3: 	imull	%r10d, %ecx
    00002cc7: 	movq	%rdx, 0xb0(%rsp)
    00002ccf: 	leal	0x4(%rax), %edx
    00002cd2: 	movl	%edx, 0x100(%rsp)
    00002cd9: 	movl	%ecx, 0xc8(%rsp)
    00002ce0: 	movslq	%edx, %rcx
    00002ce3: 	imull	%r10d, %edx
    00002ce7: 	shlq	$0x2, %rcx
    00002ceb: 	leaq	(%r8,%rcx), %r8
    00002cef: 	movq	%r8, 0xd0(%rsp)
    00002cf7: 	movq	0x38(%rsp), %r8
    00002cfc: 	movl	%edx, 0xd8(%rsp)
    00002d03: 	leaq	0x4(%r8,%rcx), %rdx
    00002d08: 	movq	%rdx, 0x110(%rsp)
    00002d10: 	movl	%esi, %edx
    00002d12: 	leal	0x6(%rax), %esi
    00002d15: 	imull	%r10d, %edx
    00002d19: 	movl	%edx, 0x118(%rsp)
    00002d20: 	leaq	0x8(%r8,%rcx), %rdx
    00002d25: 	movq	%rdx, 0xe0(%rsp)
    00002d2d: 	movl	%esi, %edx
    00002d2f: 	leal	0x9(%rax), %esi
    00002d32: 	imull	%r10d, %edx
    00002d36: 	movl	%edx, 0xe8(%rsp)
    00002d3d: 	leaq	0xc(%r8,%rcx), %rdx
    00002d42: 	leal	0x7(%rax), %ecx
    00002d45: 	imull	%r10d, %ecx
    00002d49: 	movq	%rdx, 0xf0(%rsp)
    00002d51: 	leal	0x8(%rax), %edx
    00002d54: 	movl	%edx, 0x108(%rsp)
    00002d5b: 	movl	%ecx, 0xf8(%rsp)
    00002d62: 	movslq	%edx, %rcx
    00002d65: 	imull	%r10d, %edx
    00002d69: 	shlq	$0x2, %rcx
    00002d6d: 	leaq	(%r8,%rcx), %r8
    00002d71: 	movq	%r8, 0x148(%rsp)
    00002d79: 	movq	0x38(%rsp), %r8
    00002d7e: 	movl	%edx, 0x150(%rsp)
    00002d85: 	leaq	0x4(%r8,%rcx), %rdx
    00002d8a: 	movq	%rdx, 0x158(%rsp)
    00002d92: 	movl	%esi, %edx
    00002d94: 	leal	0xa(%rax), %esi
    00002d97: 	addl	$0xb, %eax
    00002d9a: 	imull	%r10d, %edx
    00002d9e: 	movl	%edx, 0x160(%rsp)
    00002da5: 	leaq	0x8(%r8,%rcx), %rdx
    00002daa: 	movq	%rdx, 0x168(%rsp)
    00002db2: 	movl	%esi, %edx
    00002db4: 	movq	0x8(%rsp), %rsi
    00002db9: 	imull	%r10d, %edx
    00002dbd: 	movl	%edx, 0x170(%rsp)
    00002dc4: 	leaq	0xc(%r8,%rcx), %rdx
    00002dc9: 	movq	%rdx, 0x178(%rsp)
    00002dd1: 	movl	%eax, %edx
    00002dd3: 	movl	%r9d, %eax
    00002dd6: 	imull	%r10d, %edx
    00002dda: 	shlq	$0x4, %rax
    00002dde: 	movl	%edx, 0x180(%rsp)
    00002de5: 	leaq	0x10(%r8,%rax), %rdx
    00002dea: 	leaq	(%rdi,%rsi), %rax
    00002dee: 	leaq	(,%rax,4), %rdi
    00002df6: 	movl	0x10(%rsp), %eax
    00002dfa: 	movq	%rdx, 0x190(%rsp)
    00002e02: 	movq	%rdi, 0x1a0(%rsp)
    00002e0a: 	shll	$0x2, %eax
    00002e0d: 	movl	%eax, 0x120(%rsp)
.Ltmp336:
    00002e14: 	movl	0x30(%rsp), %eax
    00002e18: 	movss	(%r15,%r11), %xmm0
    00002e1e: 	movl	%r13d, %ecx
    00002e21: 	testl	%eax, %eax
    00002e23: 	jle	.Ltmp330 # Offset: 11811
    00002e29: 	movq	0x140(%rsp), %rdx
    00002e31: 	movq	0x38(%rsp), %r8
    00002e36: 	leaq	(%r12,%rbp), %rsi
    00002e3a: 	leaq	(%r11,%rbp), %rdi
    00002e3e: 	leaq	(%rdx,%r12), %rax
    00002e42: 	addq	%r14, %rax
    00002e45: 	cmpq	%rax, 0x28(%rsp)
    00002e4a: 	movq	0x18(%rsp), %rax
    00002e4f: 	setb	%r9b
    00002e53: 	addq	%r12, %rax
    00002e56: 	movl	%r9d, %r10d
    00002e59: 	addq	%r14, %rax
    00002e5c: 	cmpq	%rax, %r8
    00002e5f: 	seta	%al
    00002e62: 	orl	%eax, %r10d
    00002e65: 	leaq	(%rdx,%rsi), %rax
    00002e69: 	addq	%r14, %rax
    00002e6c: 	cmpq	%rax, 0x28(%rsp)
    00002e71: 	movq	0x18(%rsp), %rax
    00002e76: 	setb	%r9b
    00002e7a: 	addq	%rsi, %rax
    00002e7d: 	addq	%r14, %rax
    00002e80: 	cmpq	%rax, %r8
    00002e83: 	seta	%al
    00002e86: 	orl	%r9d, %eax
    00002e89: 	andl	%r10d, %eax
    00002e8c: 	cmpl	$0xb, 0x138(%rsp)
    00002e94: 	movq	%r8, %r10
    00002e97: 	movl	%eax, %r9d
    00002e9a: 	movq	0x18(%rsp), %rax
    00002e9f: 	seta	%sil
    00002ea3: 	andl	%esi, %r9d
    00002ea6: 	addq	%r11, %rax
    00002ea9: 	addq	%r14, %rax
    00002eac: 	cmpq	%rax, %r8
    00002eaf: 	movq	0x28(%rsp), %r8
    00002eb4: 	leaq	(%rdx,%r11), %rax
    00002eb8: 	seta	%sil
    00002ebc: 	addq	%r14, %rax
    00002ebf: 	cmpq	%rax, %r8
    00002ec2: 	setb	%al
    00002ec5: 	orl	%esi, %eax
    00002ec7: 	testb	%al, %r9b
    00002eca: 	je	.Ltmp331 # Offset: 11978
    00002ed0: 	leaq	(%rdx,%rdi), %rax
    00002ed4: 	addq	%r14, %rax
    00002ed7: 	cmpq	%rax, %r8
    00002eda: 	movq	0x18(%rsp), %rax
    00002edf: 	movq	%r10, %r8
    00002ee2: 	setb	%sil
    00002ee6: 	addq	%rdi, %rax
    00002ee9: 	addq	%r14, %rax
    00002eec: 	cmpq	%rax, %r10
    00002eef: 	seta	%al
    00002ef2: 	orb	%sil, %al
    00002ef5: 	je	.Ltmp331 # Offset: 12021
    00002efb: 	movaps	%xmm0, %xmm5
    00002efe: 	leaq	(%r14,%r11), %rdi
    00002f02: 	leaq	(%r14,%r12), %r9
    00002f06: 	movq	%r8, %rax
    00002f09: 	movq	0x198(%rsp), %rdx
    00002f11: 	movq	0x60(%rsp), %r8
    00002f16: 	shufps	$0x0, %xmm5, %xmm5
    00002f1a: 	leaq	(%r11,%rdx), %rsi
    00002f1e: 	leaq	(%r12,%rdx), %r10
    00002f22: 	movq	0x20(%rsp), %rdx
.Ltmp332:
    00002f27: 	movups	(%rax), %xmm6
    00002f2a: 	movups	0x10(%rax), %xmm4
    00002f2e: 	addq	$0x40, %rax
    00002f32: 	movups	-0x20(%rax), %xmm7
    00002f36: 	movss	(%rdi,%r8), %xmm3
    00002f3c: 	movaps	%xmm6, %xmm1
    00002f3f: 	movss	(%rdi,%rdx,2), %xmm2
    00002f44: 	shufps	$0xdd, %xmm4, %xmm6
    00002f48: 	movss	(%rsi,%rdx,2), %xmm10
    00002f4e: 	shufps	$0x88, %xmm4, %xmm1
    00002f52: 	movups	-0x10(%rax), %xmm4
    00002f56: 	movaps	%xmm7, %xmm8
    00002f5a: 	movss	(%rsi,%rdx), %xmm9
    00002f60: 	unpcklps	%xmm3, %xmm2
    00002f63: 	movss	(%rdi), %xmm3
    00002f67: 	shufps	$0x88, %xmm4, %xmm8
    00002f6c: 	shufps	$0xdd, %xmm4, %xmm7
    00002f70: 	movss	(%rdi,%rdx), %xmm4
    00002f75: 	addq	%rbx, %rdi
    00002f78: 	unpcklps	%xmm4, %xmm3
    00002f7b: 	movaps	%xmm6, %xmm4
    00002f7e: 	shufps	$0xdd, %xmm7, %xmm6
    00002f82: 	movlhps	%xmm2, %xmm3
    00002f85: 	movaps	%xmm1, %xmm2
    00002f88: 	shufps	$0x88, %xmm7, %xmm4
    00002f8c: 	shufps	$0xdd, %xmm8, %xmm1
    00002f91: 	mulps	%xmm5, %xmm3
    00002f94: 	shufps	$0x88, %xmm8, %xmm2
    00002f99: 	movss	(%r10,%rdx,2), %xmm8
    00002f9f: 	addps	%xmm2, %xmm3
    00002fa2: 	movss	(%rsi,%r8), %xmm2
    00002fa8: 	unpcklps	%xmm2, %xmm10
    00002fac: 	movss	(%rsi), %xmm2
    00002fb0: 	addq	%rbx, %rsi
    00002fb3: 	unpcklps	%xmm9, %xmm2
    00002fb7: 	movss	(%r9,%rdx,2), %xmm9
    00002fbd: 	movlhps	%xmm10, %xmm2
    00002fc1: 	movss	(%r9,%rdx), %xmm10
    00002fc7: 	mulps	%xmm5, %xmm2
    00002fca: 	addps	%xmm2, %xmm4
    00002fcd: 	movss	(%r9,%r8), %xmm2
    00002fd3: 	unpcklps	%xmm2, %xmm9
    00002fd7: 	movss	(%r9), %xmm2
    00002fdc: 	addq	%rbx, %r9
    00002fdf: 	movaps	%xmm4, %xmm7
    00002fe2: 	unpcklps	%xmm10, %xmm2
    00002fe6: 	movlhps	%xmm9, %xmm2
    00002fea: 	movss	(%r10,%rdx), %xmm9
    00002ff0: 	mulps	%xmm5, %xmm2
    00002ff3: 	addps	%xmm1, %xmm2
    00002ff6: 	movss	(%r10,%r8), %xmm1
    00002ffc: 	unpcklps	%xmm1, %xmm8
    00003000: 	movss	(%r10), %xmm1
    00003005: 	addq	%rbx, %r10
    00003008: 	unpcklps	%xmm9, %xmm1
    0000300c: 	movlhps	%xmm8, %xmm1
    00003010: 	mulps	%xmm5, %xmm1
    00003013: 	addps	%xmm6, %xmm1
    00003016: 	movaps	%xmm3, %xmm6
    00003019: 	unpckhps	%xmm2, %xmm3
    0000301c: 	unpcklps	%xmm2, %xmm6
    0000301f: 	unpcklps	%xmm1, %xmm7
    00003022: 	unpckhps	%xmm1, %xmm4
    00003025: 	movaps	%xmm6, %xmm1
    00003028: 	unpcklps	%xmm7, %xmm1
    0000302b: 	unpckhps	%xmm7, %xmm6
    0000302e: 	movups	%xmm1, -0x40(%rax)
    00003032: 	movaps	%xmm3, %xmm1
    00003035: 	unpckhps	%xmm4, %xmm3
    00003038: 	unpcklps	%xmm4, %xmm1
    0000303b: 	movups	%xmm6, -0x30(%rax)
    0000303f: 	movups	%xmm1, -0x20(%rax)
    00003043: 	movups	%xmm3, -0x10(%rax)
    00003047: 	cmpq	0x58(%rsp), %rax
    0000304c: 	jne	.Ltmp332 # Offset: 12364
    00003052: 	movq	%rdx, 0x20(%rsp)
    00003057: 	movl	0x188(%rsp), %edi
    0000305e: 	movq	%r8, 0x60(%rsp)
    00003063: 	cmpl	%edi, 0x10(%rsp)
    00003067: 	je	.Ltmp333 # Offset: 12391
    0000306d: 	movl	0x80(%rsp), %eax
    00003074: 	movl	0x30(%rsp), %edi
    00003078: 	addl	%ecx, %eax
    0000307a: 	cltq
    0000307c: 	movss	(%r14,%rax,4), %xmm1
    00003082: 	movq	0x78(%rsp), %rax
    00003087: 	mulss	%xmm0, %xmm1
    0000308b: 	addss	(%rax), %xmm1
    0000308f: 	movss	%xmm1, (%rax)
    00003093: 	movl	0x90(%rsp), %eax
    0000309a: 	addl	%ecx, %eax
    0000309c: 	cltq
    0000309e: 	movss	(%r14,%rax,4), %xmm1
    000030a4: 	movq	0x88(%rsp), %rax
    000030ac: 	mulss	%xmm0, %xmm1
    000030b0: 	addss	(%rax), %xmm1
    000030b4: 	movss	%xmm1, (%rax)
    000030b8: 	movl	0xa8(%rsp), %eax
    000030bf: 	addl	%ecx, %eax
    000030c1: 	cltq
    000030c3: 	movss	(%r14,%rax,4), %xmm1
    000030c9: 	movq	0xa0(%rsp), %rax
    000030d1: 	mulss	%xmm0, %xmm1
    000030d5: 	addss	(%rax), %xmm1
    000030d9: 	movss	%xmm1, (%rax)
    000030dd: 	movl	0xc8(%rsp), %eax
    000030e4: 	addl	%ecx, %eax
    000030e6: 	cltq
    000030e8: 	movss	(%r14,%rax,4), %xmm1
    000030ee: 	movq	0xb0(%rsp), %rax
    000030f6: 	mulss	%xmm0, %xmm1
    000030fa: 	addss	(%rax), %xmm1
    000030fe: 	movss	%xmm1, (%rax)
    00003102: 	movl	0x100(%rsp), %eax
    00003109: 	cmpl	%eax, %edi
    0000310b: 	jle	.Ltmp333 # Offset: 12555
    00003111: 	movl	0xd8(%rsp), %eax
    00003118: 	addl	%ecx, %eax
    0000311a: 	cltq
    0000311c: 	movss	(%r14,%rax,4), %xmm1
    00003122: 	movq	0xd0(%rsp), %rax
    0000312a: 	mulss	%xmm0, %xmm1
    0000312e: 	addss	(%rax), %xmm1
    00003132: 	movss	%xmm1, (%rax)
    00003136: 	movl	0x118(%rsp), %eax
    0000313d: 	addl	%ecx, %eax
    0000313f: 	cltq
    00003141: 	movss	(%r14,%rax,4), %xmm1
    00003147: 	movq	0x110(%rsp), %rax
    0000314f: 	mulss	%xmm0, %xmm1
    00003153: 	addss	(%rax), %xmm1
    00003157: 	movss	%xmm1, (%rax)
    0000315b: 	movl	0xe8(%rsp), %eax
    00003162: 	addl	%ecx, %eax
    00003164: 	cltq
    00003166: 	movss	(%r14,%rax,4), %xmm1
    0000316c: 	movq	0xe0(%rsp), %rax
    00003174: 	mulss	%xmm0, %xmm1
    00003178: 	addss	(%rax), %xmm1
    0000317c: 	movss	%xmm1, (%rax)
    00003180: 	movl	0xf8(%rsp), %eax
    00003187: 	addl	%ecx, %eax
    00003189: 	cltq
    0000318b: 	movss	(%r14,%rax,4), %xmm1
    00003191: 	movq	0xf0(%rsp), %rax
    00003199: 	mulss	%xmm0, %xmm1
    0000319d: 	addss	(%rax), %xmm1
    000031a1: 	movss	%xmm1, (%rax)
    000031a5: 	movl	0x108(%rsp), %eax
    000031ac: 	cmpl	%eax, %edi
    000031ae: 	jle	.Ltmp333 # Offset: 12718
    000031b4: 	movl	0x150(%rsp), %eax
    000031bb: 	addl	%ecx, %eax
    000031bd: 	cltq
    000031bf: 	movss	(%r14,%rax,4), %xmm1
    000031c5: 	movq	0x148(%rsp), %rax
    000031cd: 	mulss	%xmm0, %xmm1
    000031d1: 	addss	(%rax), %xmm1
    000031d5: 	movss	%xmm1, (%rax)
    000031d9: 	movl	0x160(%rsp), %eax
    000031e0: 	addl	%ecx, %eax
    000031e2: 	cltq
    000031e4: 	movss	(%r14,%rax,4), %xmm1
    000031ea: 	movq	0x158(%rsp), %rax
    000031f2: 	mulss	%xmm0, %xmm1
    000031f6: 	addss	(%rax), %xmm1
    000031fa: 	movss	%xmm1, (%rax)
    000031fe: 	movl	0x170(%rsp), %eax
    00003205: 	addl	%ecx, %eax
    00003207: 	cltq
    00003209: 	movss	(%r14,%rax,4), %xmm1
    0000320f: 	movq	0x168(%rsp), %rax
    00003217: 	mulss	%xmm0, %xmm1
    0000321b: 	addss	(%rax), %xmm1
    0000321f: 	movss	%xmm1, (%rax)
    00003223: 	movl	0x180(%rsp), %eax
    0000322a: 	addl	%ecx, %eax
    0000322c: 	cltq
    0000322e: 	movss	(%r14,%rax,4), %xmm1
    00003234: 	movq	0x178(%rsp), %rax
    0000323c: 	mulss	%xmm0, %xmm1
    00003240: 	addss	(%rax), %xmm1
    00003244: 	movss	%xmm1, (%rax)
.Ltmp333:
    00003248: 	movl	0x120(%rsp), %r9d
.Ltmp521:
    00003250: 	cmpl	%r9d, 0x1b8(%rsp)
    00003258: 	jle	.Ltmp334 # Offset: 12888
    0000325e: 	movl	0x1b8(%rsp), %eax
    00003265: 	movq	0x38(%rsp), %r8
    0000326a: 	subl	%r9d, %eax
    0000326d: 	movq	%r8, %r10
    00003270: 	movl	%eax, %esi
    00003272: 	movl	0x54(%rsp), %eax
    00003276: 	movl	%esi, 0x128(%rsp)
    0000327d: 	movl	%esi, %esi
    0000327f: 	imull	%r9d, %eax
    00003283: 	movl	%eax, 0x130(%rsp)
    0000328a: 	cltq
    0000328c: 	leaq	(%rax,%r13), %rdi
    00003290: 	leaq	-0x1(%rsi), %rax
    00003294: 	leaq	(,%rdi,4), %rdx
    0000329c: 	movq	%rdi, 0x1a8(%rsp)
    000032a4: 	movq	%rax, %rdi
    000032a7: 	movslq	%r9d, %rax
    000032aa: 	imulq	%rbp, %rdi
    000032ae: 	movq	%rdi, 0x40(%rsp)
    000032b3: 	leaq	(,%rax,4), %rdi
    000032bb: 	leaq	-0x1(%rsi,%rax), %rax
    000032c0: 	leaq	(%r8,%rax,4), %rsi
    000032c4: 	movl	0x54(%rsp), %eax
    000032c8: 	addq	%rdi, %r10
    000032cb: 	xorl	%r8d, %r8d
    000032ce: 	testl	%eax, %eax
    000032d0: 	cmovsq	0x40(%rsp), %r8
    000032d6: 	movq	%r8, %rax
    000032d9: 	addq	%rdx, %rax
    000032dc: 	addq	%r14, %rax
    000032df: 	cmpq	%rax, %rsi
    000032e2: 	movl	0x54(%rsp), %eax
    000032e6: 	setb	%sil
    000032ea: 	xorl	%r8d, %r8d
    000032ed: 	testl	%eax, %eax
    000032ef: 	cmovnsq	0x40(%rsp), %r8
    000032f5: 	movq	%r8, %rax
    000032f8: 	addq	%rdx, %rax
    000032fb: 	addq	%r14, %rax
    000032fe: 	cmpq	%rax, %r10
    00003301: 	seta	%al
    00003304: 	orb	%sil, %al
    00003307: 	je	.Ltmp335 # Offset: 13063
    0000330d: 	movl	0x128(%rsp), %r8d
    00003315: 	leal	-0x1(%r8), %eax
    00003319: 	cmpl	$0x2, %eax
    0000331c: 	jbe	.Ltmp335 # Offset: 13084
    00003322: 	addq	%r14, %rdx
    00003325: 	movups	(%r10), %xmm4
    00003329: 	leaq	(%rdx,%rbp), %rsi
    0000332d: 	leaq	(%rsi,%rbp), %rdi
    00003331: 	movss	(%rsi), %xmm3
    00003335: 	movss	(%rdi,%rbp), %xmm1
    0000333a: 	movss	(%rdi), %xmm2
    0000333e: 	movl	%r8d, %edi
    00003341: 	andl	$-0x4, %edi
    00003344: 	unpcklps	%xmm1, %xmm2
    00003347: 	movss	(%rdx), %xmm1
    0000334b: 	movl	%edi, %eax
    0000334d: 	leal	(%rdi,%r9), %edi
    00003351: 	unpcklps	%xmm3, %xmm1
    00003354: 	movlhps	%xmm2, %xmm1
    00003357: 	movaps	%xmm0, %xmm2
    0000335a: 	shufps	$0x0, %xmm2, %xmm2
    0000335e: 	mulps	%xmm2, %xmm1
    00003361: 	addps	%xmm4, %xmm1
    00003364: 	movups	%xmm1, (%r10)
    00003368: 	cmpl	%eax, %r8d
    0000336b: 	je	.Ltmp334 # Offset: 13163
    00003371: 	movl	0x54(%rsp), %edx
    00003375: 	movq	0x38(%rsp), %r8
    0000337a: 	movslq	%edi, %rax
    0000337d: 	movl	%edx, %r9d
    00003380: 	leaq	(%r8,%rax,4), %rsi
    00003384: 	imull	%edi, %r9d
    00003388: 	leal	(%r9,%rcx), %eax
    0000338c: 	cltq
    0000338e: 	movss	(%r14,%rax,4), %xmm1
    00003394: 	leal	0x1(%rdi), %eax
    00003397: 	mulss	%xmm0, %xmm1
    0000339b: 	addss	(%rsi), %xmm1
    0000339f: 	movss	%xmm1, (%rsi)
    000033a3: 	cmpl	%eax, 0x1b8(%rsp)
    000033aa: 	jle	.Ltmp334 # Offset: 13226
    000033ac: 	cltq
    000033ae: 	addl	%edx, %r9d
    000033b1: 	movq	%r8, %rsi
    000033b4: 	leaq	(,%rax,4), %r10
    000033bc: 	leal	(%r9,%rcx), %eax
    000033c0: 	cltq
    000033c2: 	addq	%r10, %rsi
    000033c5: 	movss	(%r14,%rax,4), %xmm1
    000033cb: 	leal	0x2(%rdi), %eax
    000033ce: 	mulss	%xmm0, %xmm1
    000033d2: 	addss	(%rsi), %xmm1
    000033d6: 	movss	%xmm1, (%rsi)
    000033da: 	cmpl	%eax, 0x1b8(%rsp)
    000033e1: 	jle	.Ltmp334 # Offset: 13281
    000033e3: 	movl	%edx, %eax
    000033e5: 	leaq	0x4(%r8,%r10), %rsi
    000033ea: 	addl	%r9d, %eax
.Ltmp520:
    000033ed: 	addl	%ecx, %eax
    000033ef: 	cltq
    000033f1: 	mulss	(%r14,%rax,4), %xmm0
    000033f7: 	addss	(%rsi), %xmm0
    000033fb: 	movss	%xmm0, (%rsi)
.Ltmp334:
    000033ff: 	addq	$0x1, %r13
    00003403: 	addq	$0x4, %r12
    00003407: 	addq	$0x4, %r11
    0000340b: 	cmpl	%r13d, 0x54(%rsp)
    00003410: 	jg	.Ltmp336 # Offset: 13328
.Ltmp329:
    00003416: 	xorl	%eax, %eax
.Ltmp339:
    00003418: 	movq	0x288(%rsp), %rdi
    00003420: 	movss	(%rdi,%rax,4), %xmm1
    00003425: 	movq	0x38(%rsp), %rdi
    0000342a: 	movaps	%xmm1, %xmm2
    0000342d: 	andps	DATAat0x24930(%rip), %xmm2
    00003434: 	movaps	%xmm1, %xmm0
    00003437: 	subss	(%rdi,%rax,4), %xmm0
    0000343c: 	cvtss2sd	%xmm2, %xmm2
    00003440: 	comisd	DATAat0x24968(%rip), %xmm2
    00003448: 	jbe	.Ltmp337 # Offset: 13384
    0000344a: 	divss	%xmm1, %xmm0
.Ltmp337:
    0000344e: 	movsd	DATAat0x24970(%rip), %xmm3
    00003456: 	cvtss2sd	%xmm0, %xmm0
    0000345a: 	andpd	DATAat0x24940(%rip), %xmm0
    00003462: 	comisd	%xmm0, %xmm3
    00003466: 	jbe	.Ltmp338 # Offset: 13414
    0000346c: 	addq	$0x1, %rax
    00003470: 	cmpq	$0x320, %rax
    00003476: 	jne	.Ltmp339 # Offset: 13430
.Ltmp519:
    00003478: 	movq	0x38(%rsp), %rax
    0000347d: 	xorl	%r12d, %r12d
    00003480: 	movq	$0x0, (%rax)
    00003487: 	movq	0xc0(%rsp), %rdi
    0000348f: 	movq	$0x0, -0x10(%rdi)
    00003497: 	movq	0xb8(%rsp), %rdi
    0000349f: 	andq	$-0x8, %rdi
    000034a3: 	subq	%rdi, %rax
    000034a6: 	movq	%rax, %rcx
    000034a9: 	movq	%r12, %rax
    000034ac: 	addl	$0xc80, %ecx
    000034b2: 	shrl	$0x3, %ecx
    000034b5: 	rep		stosq	%rax, %es:(%rdi)
    000034b8: 	movl	0x98(%rsp), %ebp
    000034bf: 	testl	%ebp, %ebp
    000034c1: 	jle	.Ltmp340 # Offset: 13505
    000034c7: 	movl	0x1b8(%rsp), %ecx
    000034ce: 	movl	0x54(%rsp), %esi
    000034d2: 	movq	%r15, 0x178(%rsp)
    000034da: 	movq	%r15, %r10
    000034dd: 	leal	-0x3(%rcx), %eax
    000034e0: 	leal	(%rsi,%rsi), %r8d
    000034e4: 	movl	%eax, 0x58(%rsp)
    000034e8: 	leal	(,%rsi,4), %eax
    000034ef: 	leal	(%r8,%rsi), %ebx
    000034f3: 	movslq	%eax, %rdi
    000034f6: 	movslq	%esi, %rax
    000034f9: 	shlq	$0x2, %rax
    000034fd: 	leaq	(,%rdi,4), %rbp
    00003505: 	movq	%rax, 0x60(%rsp)
    0000350a: 	movslq	%r8d, %rax
    0000350d: 	leaq	(,%rax,4), %rdx
    00003515: 	movslq	%ebx, %rax
    00003518: 	movq	%rbp, 0x8(%rsp)
    0000351d: 	movq	%rdx, 0x80(%rsp)
    00003525: 	leaq	(,%rax,4), %rdx
    0000352d: 	leal	-0x4(%rsi), %eax
    00003530: 	shrl	$0x2, %eax
    00003533: 	movq	%rdx, 0x88(%rsp)
    0000353b: 	addl	$0x1, %eax
    0000353e: 	movq	%rax, %rdx
    00003541: 	leal	-0x4(%rcx), %eax
    00003544: 	movl	$0xf, %ecx
    00003549: 	movl	%eax, 0xf8(%rsp)
    00003550: 	shrl	$0x2, %eax
    00003553: 	shlq	$0x4, %rdx
    00003557: 	leal	0x1(%rax), %r9d
    0000355b: 	movl	%eax, %r11d
    0000355e: 	movq	%rdx, 0x158(%rsp)
    00003566: 	leaq	-0x1(%r9), %rax
    0000356a: 	movq	%r9, %r13
    0000356d: 	movl	%r9d, 0x108(%rsp)
    00003575: 	movq	%rax, %rdx
    00003578: 	imulq	%rbp, %rdx
    0000357c: 	testq	%rbp, %rbp
    0000357f: 	leaq	0xf(%rdx), %rsi
    00003583: 	cmovnsq	%rsi, %rcx
    00003587: 	shlq	$0x4, %rax
    0000358b: 	testq	%rbp, %rbp
    0000358e: 	movl	%r13d, %esi
    00003591: 	cmovsq	%rdx, %r12
    00003595: 	shlq	$0x4, %r9
    00003599: 	andl	$-0x4, %esi
    0000359c: 	movq	%rcx, 0xf0(%rsp)
    000035a4: 	movq	0x38(%rsp), %rcx
    000035a9: 	movq	%r9, %rdx
    000035ac: 	movq	%r12, 0x128(%rsp)
    000035b4: 	leaq	0xf(%rcx,%rax), %rax
    000035b9: 	addq	%rcx, %rdx
    000035bc: 	movl	%esi, 0x138(%rsp)
    000035c3: 	movq	%rax, 0xa0(%rsp)
    000035cb: 	movl	%r13d, %eax
    000035ce: 	movq	%rdx, 0x130(%rsp)
    000035d6: 	shrl	$0x2, %eax
    000035d9: 	movq	%rdi, %rdx
    000035dc: 	shlq	$0x4, %rdx
    000035e0: 	subl	$0x1, %eax
    000035e3: 	movq	%rdx, 0x148(%rsp)
    000035eb: 	shlq	$0x6, %rax
    000035ef: 	leaq	(%r14,%rdi,8), %rdx
    000035f3: 	movq	%rdx, 0x160(%rsp)
    000035fb: 	leaq	0x40(%rcx,%rax), %rdx
    00003600: 	leaq	(%rdi,%rdi,2), %rax
    00003604: 	movl	%r13d, %edi
    00003607: 	leaq	(,%rax,4), %r12
    0000360f: 	movl	%esi, %eax
    00003611: 	movq	%rdx, 0x150(%rsp)
    00003619: 	shll	$0x2, %edi
    0000361c: 	imulq	%rbp, %rax
    00003620: 	movl	%edi, 0x120(%rsp)
    00003627: 	xorl	%r13d, %r13d
    0000362a: 	leaq	(%r14,%rax), %rdx
    0000362e: 	leal	(,%rsi,4), %eax
    00003635: 	movl	0x54(%rsp), %esi
    00003639: 	movq	%rdx, 0x140(%rsp)
    00003641: 	movslq	%eax, %rdx
    00003644: 	movl	%r11d, %eax
    00003647: 	movq	%rdx, 0x110(%rsp)
    0000364f: 	leaq	(%rcx,%rdx,4), %rdx
    00003653: 	subl	%esi, %r8d
    00003656: 	subl	%esi, %ebx
    00003658: 	movq	%rdx, 0x100(%rsp)
    00003660: 	movq	%rax, %rdx
    00003663: 	addq	$0x1, %rax
    00003667: 	imulq	%rbp, %rax
    0000366b: 	shlq	$0x4, %rdx
    0000366f: 	movl	%esi, 0xd0(%rsp)
    00003676: 	leaq	0x10(%rcx,%rdx), %rcx
    0000367b: 	movl	%r8d, 0x168(%rsp)
    00003683: 	movq	%rcx, 0xe8(%rsp)
    0000368b: 	leaq	(%r14,%rax), %rdi
    0000368f: 	movq	0x60(%rsp), %rax
    00003694: 	movl	%ebx, 0x170(%rsp)
    0000369b: 	movq	%rdi, 0x118(%rsp)
    000036a3: 	movq	%rax, 0x78(%rsp)
    000036a8: 	movq	%r14, 0x90(%rsp)
.Ltmp350:
    000036b0: 	movl	0x58(%rsp), %eax
    000036b4: 	testl	%eax, %eax
    000036b6: 	jle	.Ltmp341 # Offset: 14006
    000036bc: 	movl	0x170(%rsp), %ebx
    000036c3: 	movslq	0xd0(%rsp), %r14
    000036cb: 	leaq	0x8(%r13), %r15
    000036cf: 	movl	0x168(%rsp), %r11d
    000036d7: 	movq	0xf0(%rsp), %rsi
    000036df: 	movq	%r14, %rax
    000036e2: 	shlq	$0x2, %r14
    000036e6: 	movq	0x78(%rsp), %rcx
    000036eb: 	movq	0x90(%rsp), %rdi
    000036f3: 	addl	%eax, %r11d
    000036f6: 	addl	%eax, %ebx
    000036f8: 	leaq	0x4(%r13), %rax
    000036fc: 	movq	0x38(%rsp), %r9
    00003701: 	movslq	%r11d, %r11
    00003704: 	movq	%rax, 0xe0(%rsp)
    0000370c: 	movslq	%ebx, %rbx
    0000370f: 	leaq	0x4(%r14), %rax
    00003713: 	shlq	$0x2, %r11
    00003717: 	shlq	$0x2, %rbx
    0000371b: 	movq	%rax, 0x10(%rsp)
    00003720: 	movq	0x128(%rsp), %r8
    00003728: 	leaq	0x4(%r11), %rax
    0000372c: 	movq	0x80(%rsp), %rbp
    00003734: 	movq	%rax, 0x18(%rsp)
    00003739: 	leaq	0x4(%rbx), %rax
    0000373d: 	movq	%rax, 0x20(%rsp)
    00003742: 	leaq	0x8(%r14), %rax
    00003746: 	movq	%rax, 0x28(%rsp)
    0000374b: 	leaq	0x8(%r11), %rax
    0000374f: 	movq	%rax, 0x30(%rsp)
    00003754: 	leaq	0x8(%rbx), %rax
    00003758: 	movq	%rax, 0x40(%rsp)
    0000375d: 	leaq	0xc(%r13), %rax
    00003761: 	movq	%rax, 0xd8(%rsp)
    00003769: 	leaq	0xc(%r14), %rax
    0000376d: 	movq	%rax, 0x98(%rsp)
    00003775: 	leaq	0xc(%r11), %rax
    00003779: 	movq	%rax, 0xb0(%rsp)
    00003781: 	leaq	0xc(%rbx), %rax
    00003785: 	movq	%rax, 0xc8(%rsp)
    0000378d: 	movq	%rsi, %rax
    00003790: 	addq	%rcx, %rax
    00003793: 	addq	%rdi, %rax
    00003796: 	cmpq	%rax, %r9
    00003799: 	movq	%r8, %rax
    0000379c: 	seta	%dl
    0000379f: 	addq	%rcx, %rax
    000037a2: 	addq	%rdi, %rax
    000037a5: 	cmpq	%rax, 0xa0(%rsp)
    000037ad: 	setb	%al
    000037b0: 	orl	%eax, %edx
    000037b2: 	leaq	0x10(%r10), %rax
    000037b6: 	cmpq	%rax, %r9
    000037b9: 	movl	%edx, %ecx
    000037bb: 	movq	%rax, 0xa8(%rsp)
    000037c3: 	setae	%dl
    000037c6: 	cmpq	%r10, 0x130(%rsp)
    000037ce: 	setbe	%al
    000037d1: 	orl	%edx, %eax
    000037d3: 	cmpl	$0xb, 0xf8(%rsp)
    000037db: 	seta	%dl
    000037de: 	andl	%edx, %eax
    000037e0: 	andl	%eax, %ecx
    000037e2: 	movq	%rsi, %rax
    000037e5: 	addq	%rbp, %rax
    000037e8: 	addq	%rdi, %rax
    000037eb: 	cmpq	%rax, %r9
    000037ee: 	movq	%r8, %rax
    000037f1: 	seta	%dl
    000037f4: 	addq	%rbp, %rax
    000037f7: 	movq	0x88(%rsp), %rbp
    000037ff: 	addq	%rdi, %rax
    00003802: 	cmpq	%rax, 0xa0(%rsp)
    0000380a: 	setb	%al
    0000380d: 	orl	%edx, %eax
    0000380f: 	andl	%eax, %ecx
    00003811: 	movq	%rsi, %rax
    00003814: 	addq	%rbp, %rax
    00003817: 	addq	%rdi, %rax
    0000381a: 	cmpq	%rax, %r9
    0000381d: 	movq	%r8, %rax
    00003820: 	seta	%dl
    00003823: 	addq	%rbp, %rax
    00003826: 	movq	0xa0(%rsp), %rbp
    0000382e: 	addq	%rdi, %rax
    00003831: 	cmpq	%rax, %rbp
    00003834: 	setb	%al
    00003837: 	orl	%edx, %eax
    00003839: 	testb	%al, %cl
    0000383b: 	je	.Ltmp342 # Offset: 14395
    00003841: 	leaq	(%rsi,%r13), %rax
    00003845: 	addq	%rdi, %rax
    00003848: 	cmpq	%rax, %r9
    0000384b: 	leaq	(%r8,%r13), %rax
    0000384f: 	seta	%dl
    00003852: 	addq	%rdi, %rax
    00003855: 	cmpq	%rax, %rbp
    00003858: 	setb	%al
    0000385b: 	orb	%dl, %al
    0000385d: 	je	.Ltmp342 # Offset: 14429
    00003863: 	movq	0x160(%rsp), %rax
    0000386b: 	movq	0x78(%rsp), %rsi
    00003870: 	movq	%rdi, %rdx
    00003873: 	movq	%r10, 0x180(%rsp)
    0000387b: 	movq	0x80(%rsp), %rcx
    00003883: 	movss	(%r10), %xmm4
    00003888: 	addq	%r13, %rdi
    0000388b: 	movss	0x4(%r10), %xmm3
    00003891: 	movss	0x8(%r10), %xmm2
    00003897: 	leaq	(%r13,%rax), %r8
    0000389c: 	movq	%r9, %rax
    0000389f: 	movss	0xc(%r10), %xmm1
    000038a5: 	movq	0x8(%rsp), %rbp
    000038aa: 	addq	%rdx, %rsi
    000038ad: 	addq	%rdx, %rcx
    000038b0: 	movq	0x148(%rsp), %r9
    000038b8: 	shufps	$0x0, %xmm4, %xmm4
    000038bc: 	shufps	$0x0, %xmm3, %xmm3
    000038c0: 	shufps	$0x0, %xmm2, %xmm2
    000038c4: 	movq	0x150(%rsp), %r10
    000038cc: 	addq	0x88(%rsp), %rdx
    000038d4: 	shufps	$0x0, %xmm1, %xmm1
.Ltmp343:
    000038d8: 	movups	(%rax), %xmm6
    000038db: 	movups	0x10(%rax), %xmm5
    000038df: 	addq	$0x40, %rax
    000038e3: 	movups	-0x20(%rax), %xmm7
    000038e7: 	movss	(%rdi,%r12), %xmm0
    000038ed: 	movaps	%xmm6, %xmm9
    000038f1: 	shufps	$0xdd, %xmm5, %xmm6
    000038f5: 	movss	(%rdi,%rbp), %xmm8
    000038fb: 	movss	(%rsi,%rbp), %xmm11
    00003901: 	shufps	$0x88, %xmm5, %xmm9
    00003906: 	movups	-0x10(%rax), %xmm5
    0000390a: 	movaps	%xmm7, %xmm10
    0000390e: 	movss	(%rcx,%rbp), %xmm12
    00003914: 	shufps	$0x88, %xmm5, %xmm10
    00003919: 	shufps	$0xdd, %xmm5, %xmm7
    0000391d: 	movss	(%r8), %xmm5
    00003922: 	unpcklps	%xmm0, %xmm5
    00003925: 	movss	(%rdi), %xmm0
    00003929: 	unpcklps	%xmm8, %xmm0
    0000392d: 	movss	(%rsi,%r12), %xmm8
    00003933: 	movlhps	%xmm5, %xmm0
    00003936: 	movaps	%xmm9, %xmm5
    0000393a: 	shufps	$0xdd, %xmm10, %xmm9
    0000393f: 	mulps	%xmm4, %xmm0
    00003942: 	shufps	$0x88, %xmm10, %xmm5
    00003947: 	movss	(%rdx,%rbp,2), %xmm10
    0000394d: 	addps	%xmm5, %xmm0
    00003950: 	movss	(%rsi,%rbp,2), %xmm5
    00003955: 	unpcklps	%xmm8, %xmm5
    00003959: 	movss	(%rsi), %xmm8
    0000395e: 	unpcklps	%xmm11, %xmm8
    00003962: 	movss	(%rcx,%rbp,2), %xmm11
    00003968: 	movlhps	%xmm5, %xmm8
    0000396c: 	movaps	%xmm6, %xmm5
    0000396f: 	shufps	$0xdd, %xmm7, %xmm6
    00003973: 	mulps	%xmm4, %xmm8
    00003977: 	shufps	$0x88, %xmm7, %xmm5
    0000397b: 	addps	%xmm5, %xmm8
    0000397f: 	movss	(%rcx,%r12), %xmm5
    00003985: 	unpcklps	%xmm5, %xmm11
    00003989: 	movss	(%rcx), %xmm5
    0000398d: 	movaps	%xmm8, %xmm7
    00003991: 	unpcklps	%xmm12, %xmm5
    00003995: 	movlhps	%xmm11, %xmm5
    00003999: 	movss	(%rdx,%rbp), %xmm11
    0000399f: 	mulps	%xmm4, %xmm5
    000039a2: 	addps	%xmm5, %xmm9
    000039a6: 	movss	(%rdx,%r12), %xmm5
    000039ac: 	unpcklps	%xmm5, %xmm10
    000039b0: 	movss	(%rdx), %xmm5
    000039b4: 	unpcklps	%xmm11, %xmm5
    000039b8: 	movlhps	%xmm10, %xmm5
    000039bc: 	mulps	%xmm4, %xmm5
    000039bf: 	addps	%xmm6, %xmm5
    000039c2: 	movaps	%xmm0, %xmm6
    000039c5: 	unpckhps	%xmm9, %xmm0
    000039c9: 	unpcklps	%xmm9, %xmm6
    000039cd: 	movaps	%xmm6, %xmm10
    000039d1: 	unpcklps	%xmm5, %xmm7
    000039d4: 	unpckhps	%xmm5, %xmm8
    000039d8: 	unpcklps	%xmm7, %xmm10
    000039dc: 	unpckhps	%xmm7, %xmm6
    000039df: 	movaps	%xmm0, %xmm7
    000039e2: 	unpcklps	%xmm8, %xmm7
    000039e6: 	movaps	%xmm10, %xmm9
    000039ea: 	movups	%xmm10, -0x40(%rax)
    000039ef: 	movaps	%xmm6, %xmm5
    000039f2: 	movups	%xmm6, -0x30(%rax)
    000039f6: 	unpckhps	%xmm8, %xmm0
    000039fa: 	shufps	$0x88, %xmm6, %xmm9
    000039ff: 	movaps	%xmm10, %xmm6
    00003a03: 	movaps	%xmm7, %xmm10
    00003a07: 	movups	%xmm7, -0x20(%rax)
    00003a0b: 	shufps	$0xdd, %xmm5, %xmm6
    00003a0f: 	shufps	$0xdd, %xmm0, %xmm7
    00003a13: 	movups	%xmm0, -0x10(%rax)
    00003a17: 	shufps	$0x88, %xmm0, %xmm10
    00003a1c: 	movss	0x4(%r8), %xmm5
    00003a22: 	movss	0x4(%rdi,%r12), %xmm0
    00003a29: 	movss	0x4(%rdi,%rbp), %xmm8
    00003a30: 	movss	0x4(%rsi,%rbp), %xmm11
    00003a37: 	unpcklps	%xmm0, %xmm5
    00003a3a: 	movss	0x4(%rdi), %xmm0
    00003a3f: 	unpcklps	%xmm8, %xmm0
    00003a43: 	movss	0x4(%rsi,%r12), %xmm8
    00003a4a: 	movlhps	%xmm5, %xmm0
    00003a4d: 	movaps	%xmm9, %xmm5
    00003a51: 	shufps	$0xdd, %xmm10, %xmm9
    00003a56: 	mulps	%xmm3, %xmm0
    00003a59: 	shufps	$0x88, %xmm10, %xmm5
    00003a5e: 	addps	%xmm5, %xmm0
    00003a61: 	movss	0x4(%rsi,%rbp,2), %xmm5
    00003a67: 	unpcklps	%xmm8, %xmm5
    00003a6b: 	movss	0x4(%rsi), %xmm8
    00003a71: 	unpcklps	%xmm11, %xmm8
    00003a75: 	movlhps	%xmm5, %xmm8
    00003a79: 	movaps	%xmm6, %xmm5
    00003a7c: 	shufps	$0xdd, %xmm7, %xmm6
    00003a80: 	mulps	%xmm3, %xmm8
    00003a84: 	shufps	$0x88, %xmm7, %xmm5
    00003a88: 	addps	%xmm5, %xmm8
    00003a8c: 	movss	0x4(%rcx,%r12), %xmm5
    00003a93: 	movss	0x4(%rcx,%rbp,2), %xmm11
    00003a9a: 	movss	0x4(%rcx,%rbp), %xmm12
    00003aa1: 	movss	0x4(%rdx,%rbp,2), %xmm10
    00003aa8: 	unpcklps	%xmm5, %xmm11
    00003aac: 	movss	0x4(%rcx), %xmm5
    00003ab1: 	movaps	%xmm8, %xmm7
    00003ab5: 	unpcklps	%xmm12, %xmm5
    00003ab9: 	movlhps	%xmm11, %xmm5
    00003abd: 	movss	0x4(%rdx,%rbp), %xmm11
    00003ac4: 	mulps	%xmm3, %xmm5
    00003ac7: 	addps	%xmm5, %xmm9
    00003acb: 	movss	0x4(%rdx,%r12), %xmm5
    00003ad2: 	unpcklps	%xmm5, %xmm10
    00003ad6: 	movss	0x4(%rdx), %xmm5
    00003adb: 	unpcklps	%xmm11, %xmm5
    00003adf: 	movlhps	%xmm10, %xmm5
    00003ae3: 	mulps	%xmm3, %xmm5
    00003ae6: 	addps	%xmm6, %xmm5
    00003ae9: 	movaps	%xmm0, %xmm6
    00003aec: 	unpckhps	%xmm9, %xmm0
    00003af0: 	unpcklps	%xmm9, %xmm6
    00003af4: 	movaps	%xmm6, %xmm9
    00003af8: 	unpcklps	%xmm5, %xmm7
    00003afb: 	unpckhps	%xmm5, %xmm8
    00003aff: 	unpcklps	%xmm7, %xmm9
    00003b03: 	unpckhps	%xmm7, %xmm6
    00003b06: 	movaps	%xmm0, %xmm7
    00003b09: 	unpcklps	%xmm8, %xmm7
    00003b0d: 	unpckhps	%xmm8, %xmm0
    00003b11: 	movaps	%xmm9, %xmm8
    00003b15: 	movups	%xmm6, -0x30(%rax)
    00003b19: 	movaps	%xmm6, %xmm5
    00003b1c: 	shufps	$0x88, %xmm6, %xmm8
    00003b21: 	movaps	%xmm7, %xmm10
    00003b25: 	movaps	%xmm9, %xmm6
    00003b29: 	movups	%xmm7, -0x20(%rax)
    00003b2d: 	shufps	$0x88, %xmm0, %xmm10
    00003b32: 	shufps	$0xdd, %xmm0, %xmm7
    00003b36: 	shufps	$0xdd, %xmm5, %xmm6
    00003b3a: 	movups	%xmm9, -0x40(%rax)
    00003b3f: 	movups	%xmm0, -0x10(%rax)
    00003b43: 	movss	0x8(%rdi,%r12), %xmm0
    00003b4a: 	movss	0x8(%r8), %xmm5
    00003b50: 	movss	0x8(%rdi,%rbp), %xmm9
    00003b57: 	movss	0x8(%rsi,%rbp), %xmm11
    00003b5e: 	unpcklps	%xmm0, %xmm5
    00003b61: 	movss	0x8(%rdi), %xmm0
    00003b66: 	movss	0x8(%rcx,%rbp), %xmm12
    00003b6d: 	unpcklps	%xmm9, %xmm0
    00003b71: 	movss	0x8(%rsi,%r12), %xmm9
    00003b78: 	movlhps	%xmm5, %xmm0
    00003b7b: 	movaps	%xmm8, %xmm5
    00003b7f: 	shufps	$0xdd, %xmm10, %xmm8
    00003b84: 	mulps	%xmm2, %xmm0
    00003b87: 	shufps	$0x88, %xmm10, %xmm5
    00003b8c: 	movss	0x8(%rdx,%rbp,2), %xmm10
    00003b93: 	addps	%xmm5, %xmm0
    00003b96: 	movss	0x8(%rsi,%rbp,2), %xmm5
    00003b9c: 	unpcklps	%xmm9, %xmm5
    00003ba0: 	movss	0x8(%rsi), %xmm9
    00003ba6: 	unpcklps	%xmm11, %xmm9
    00003baa: 	movss	0x8(%rcx,%rbp,2), %xmm11
    00003bb1: 	movlhps	%xmm5, %xmm9
    00003bb5: 	movaps	%xmm6, %xmm5
    00003bb8: 	shufps	$0xdd, %xmm7, %xmm6
    00003bbc: 	mulps	%xmm2, %xmm9
    00003bc0: 	shufps	$0x88, %xmm7, %xmm5
    00003bc4: 	addps	%xmm5, %xmm9
    00003bc8: 	movss	0x8(%rcx,%r12), %xmm5
    00003bcf: 	unpcklps	%xmm5, %xmm11
    00003bd3: 	movss	0x8(%rcx), %xmm5
    00003bd8: 	unpcklps	%xmm12, %xmm5
    00003bdc: 	movlhps	%xmm11, %xmm5
    00003be0: 	movss	0x8(%rdx,%rbp), %xmm11
    00003be7: 	mulps	%xmm2, %xmm5
    00003bea: 	addps	%xmm5, %xmm8
    00003bee: 	movss	0x8(%rdx,%r12), %xmm5
    00003bf5: 	unpcklps	%xmm5, %xmm10
    00003bf9: 	movss	0x8(%rdx), %xmm5
    00003bfe: 	unpcklps	%xmm11, %xmm5
    00003c02: 	movlhps	%xmm10, %xmm5
    00003c06: 	mulps	%xmm2, %xmm5
    00003c09: 	addps	%xmm6, %xmm5
    00003c0c: 	movaps	%xmm0, %xmm6
    00003c0f: 	unpckhps	%xmm8, %xmm0
    00003c13: 	unpcklps	%xmm8, %xmm6
    00003c17: 	movaps	%xmm9, %xmm8
    00003c1b: 	movaps	%xmm6, %xmm7
    00003c1e: 	unpcklps	%xmm5, %xmm8
    00003c22: 	unpckhps	%xmm5, %xmm9
    00003c26: 	unpckhps	%xmm8, %xmm6
    00003c2a: 	unpcklps	%xmm8, %xmm7
    00003c2e: 	movaps	%xmm0, %xmm8
    00003c32: 	unpcklps	%xmm9, %xmm8
    00003c36: 	unpckhps	%xmm9, %xmm0
    00003c3a: 	movups	%xmm7, -0x40(%rax)
    00003c3e: 	movaps	%xmm7, %xmm9
    00003c42: 	movaps	%xmm8, %xmm10
    00003c46: 	movups	%xmm6, -0x30(%rax)
    00003c4a: 	shufps	$0x88, %xmm6, %xmm9
    00003c4f: 	shufps	$0xdd, %xmm6, %xmm7
    00003c53: 	shufps	$0x88, %xmm0, %xmm10
    00003c58: 	movups	%xmm8, -0x20(%rax)
    00003c5d: 	shufps	$0xdd, %xmm0, %xmm8
    00003c62: 	movups	%xmm0, -0x10(%rax)
    00003c66: 	movss	0xc(%rdi,%r12), %xmm5
    00003c6d: 	movss	0xc(%r8), %xmm0
    00003c73: 	addq	%r9, %r8
    00003c76: 	movss	0xc(%rdi,%rbp), %xmm6
    00003c7c: 	movss	0xc(%rsi,%rbp), %xmm11
    00003c83: 	unpcklps	%xmm5, %xmm0
    00003c86: 	movss	0xc(%rdi), %xmm5
    00003c8b: 	movss	0xc(%rcx,%rbp), %xmm12
    00003c92: 	addq	%r9, %rdi
    00003c95: 	unpcklps	%xmm6, %xmm5
    00003c98: 	movss	0xc(%rsi,%r12), %xmm6
    00003c9f: 	movlhps	%xmm0, %xmm5
    00003ca2: 	movaps	%xmm9, %xmm0
    00003ca6: 	shufps	$0xdd, %xmm10, %xmm9
    00003cab: 	mulps	%xmm1, %xmm5
    00003cae: 	shufps	$0x88, %xmm10, %xmm0
    00003cb3: 	movss	0xc(%rdx,%rbp,2), %xmm10
    00003cba: 	addps	%xmm0, %xmm5
    00003cbd: 	movss	0xc(%rsi,%rbp,2), %xmm0
    00003cc3: 	unpcklps	%xmm6, %xmm0
    00003cc6: 	movss	0xc(%rsi), %xmm6
    00003ccb: 	addq	%r9, %rsi
    00003cce: 	unpcklps	%xmm11, %xmm6
    00003cd2: 	movss	0xc(%rcx,%rbp,2), %xmm11
    00003cd9: 	movlhps	%xmm0, %xmm6
    00003cdc: 	movaps	%xmm7, %xmm0
    00003cdf: 	shufps	$0xdd, %xmm8, %xmm7
    00003ce4: 	mulps	%xmm1, %xmm6
    00003ce7: 	shufps	$0x88, %xmm8, %xmm0
    00003cec: 	addps	%xmm0, %xmm6
    00003cef: 	movss	0xc(%rcx,%r12), %xmm0
    00003cf6: 	unpcklps	%xmm0, %xmm11
    00003cfa: 	movss	0xc(%rcx), %xmm0
    00003cff: 	addq	%r9, %rcx
    00003d02: 	movaps	%xmm6, %xmm8
    00003d06: 	unpcklps	%xmm12, %xmm0
    00003d0a: 	movlhps	%xmm11, %xmm0
    00003d0e: 	movss	0xc(%rdx,%rbp), %xmm11
    00003d15: 	mulps	%xmm1, %xmm0
    00003d18: 	addps	%xmm0, %xmm9
    00003d1c: 	movss	0xc(%rdx,%r12), %xmm0
    00003d23: 	unpcklps	%xmm0, %xmm10
    00003d27: 	movss	0xc(%rdx), %xmm0
    00003d2c: 	addq	%r9, %rdx
    00003d2f: 	unpcklps	%xmm11, %xmm0
    00003d33: 	movlhps	%xmm10, %xmm0
    00003d37: 	mulps	%xmm1, %xmm0
    00003d3a: 	addps	%xmm7, %xmm0
    00003d3d: 	movaps	%xmm5, %xmm7
    00003d40: 	unpckhps	%xmm9, %xmm5
    00003d44: 	unpcklps	%xmm9, %xmm7
    00003d48: 	unpcklps	%xmm0, %xmm8
    00003d4c: 	unpckhps	%xmm0, %xmm6
    00003d4f: 	movaps	%xmm7, %xmm0
    00003d52: 	unpcklps	%xmm8, %xmm0
    00003d56: 	unpckhps	%xmm8, %xmm7
    00003d5a: 	movups	%xmm0, -0x40(%rax)
    00003d5e: 	movaps	%xmm5, %xmm0
    00003d61: 	unpckhps	%xmm6, %xmm5
    00003d64: 	unpcklps	%xmm6, %xmm0
    00003d67: 	movups	%xmm7, -0x30(%rax)
    00003d6b: 	movups	%xmm0, -0x20(%rax)
    00003d6f: 	movups	%xmm5, -0x10(%rax)
    00003d73: 	cmpq	%r10, %rax
    00003d76: 	jne	.Ltmp343 # Offset: 15734
    00003d7c: 	movq	%rbp, 0x8(%rsp)
    00003d81: 	movq	0x180(%rsp), %r10
    00003d89: 	movl	0x138(%rsp), %edi
    00003d90: 	cmpl	%edi, 0x108(%rsp)
    00003d97: 	je	.Ltmp344 # Offset: 15767
    00003d9d: 	movq	0x98(%rsp), %rdi
    00003da5: 	movq	0x100(%rsp), %rax
    00003dad: 	movq	%r12, 0x98(%rsp)
    00003db5: 	movq	0x110(%rsp), %rcx
    00003dbd: 	movq	0x140(%rsp), %rdx
    00003dc5: 	movq	0xb0(%rsp), %r8
    00003dcd: 	movq	0xc8(%rsp), %r9
    00003dd5: 	movq	0xd8(%rsp), %rbp
    00003ddd: 	movq	0xe0(%rsp), %r12
.Ltmp345:
    00003de5: 	movss	(%rdx,%r13), %xmm1
    00003deb: 	mulss	(%r10), %xmm1
    00003df0: 	addq	$0x4, %rcx
    00003df4: 	addq	$0x10, %rax
    00003df8: 	addss	-0x10(%rax), %xmm1
    00003dfd: 	movq	0x10(%rsp), %rsi
    00003e02: 	movss	%xmm1, -0x10(%rax)
    00003e07: 	movss	(%rdx,%r14), %xmm0
    00003e0d: 	mulss	(%r10), %xmm0
    00003e12: 	addss	-0xc(%rax), %xmm0
    00003e17: 	movss	%xmm0, -0xc(%rax)
    00003e1c: 	movss	(%rdx,%r11), %xmm4
    00003e22: 	mulss	(%r10), %xmm4
    00003e27: 	addss	-0x8(%rax), %xmm4
    00003e2c: 	movss	%xmm4, -0x8(%rax)
    00003e31: 	movss	(%rdx,%rbx), %xmm3
    00003e36: 	mulss	(%r10), %xmm3
    00003e3b: 	addss	-0x4(%rax), %xmm3
    00003e40: 	movss	%xmm3, -0x4(%rax)
    00003e45: 	movss	(%rdx,%r12), %xmm2
    00003e4b: 	mulss	0x4(%r10), %xmm2
    00003e51: 	addss	%xmm1, %xmm2
    00003e55: 	movss	%xmm2, -0x10(%rax)
    00003e5a: 	movss	(%rdx,%rsi), %xmm1
    00003e5f: 	mulss	0x4(%r10), %xmm1
    00003e65: 	movq	0x18(%rsp), %rsi
    00003e6a: 	addss	%xmm0, %xmm1
    00003e6e: 	movss	%xmm1, -0xc(%rax)
    00003e73: 	movss	(%rdx,%rsi), %xmm0
    00003e78: 	mulss	0x4(%r10), %xmm0
    00003e7e: 	movq	0x20(%rsp), %rsi
    00003e83: 	addss	%xmm4, %xmm0
    00003e87: 	movss	%xmm0, -0x8(%rax)
    00003e8c: 	movss	(%rdx,%rsi), %xmm4
    00003e91: 	mulss	0x4(%r10), %xmm4
    00003e97: 	addss	%xmm3, %xmm4
    00003e9b: 	movss	%xmm4, -0x4(%rax)
    00003ea0: 	movss	(%rdx,%r15), %xmm3
    00003ea6: 	mulss	0x8(%r10), %xmm3
    00003eac: 	movq	0x28(%rsp), %rsi
    00003eb1: 	addss	%xmm2, %xmm3
    00003eb5: 	movss	%xmm3, -0x10(%rax)
    00003eba: 	movss	(%rdx,%rsi), %xmm2
    00003ebf: 	mulss	0x8(%r10), %xmm2
    00003ec5: 	movq	0x30(%rsp), %rsi
    00003eca: 	addss	%xmm1, %xmm2
    00003ece: 	movss	%xmm2, -0xc(%rax)
    00003ed3: 	movss	(%rdx,%rsi), %xmm1
    00003ed8: 	mulss	0x8(%r10), %xmm1
    00003ede: 	movq	0x40(%rsp), %rsi
    00003ee3: 	addss	%xmm0, %xmm1
    00003ee7: 	movss	%xmm1, -0x8(%rax)
    00003eec: 	movss	(%rdx,%rsi), %xmm0
    00003ef1: 	mulss	0x8(%r10), %xmm0
    00003ef7: 	addss	%xmm4, %xmm0
    00003efb: 	movss	%xmm0, -0x4(%rax)
    00003f00: 	movss	(%rdx,%rbp), %xmm4
    00003f05: 	mulss	0xc(%r10), %xmm4
    00003f0b: 	addss	%xmm4, %xmm3
    00003f0f: 	movss	%xmm3, -0x10(%rax)
    00003f14: 	movss	(%rdx,%rdi), %xmm3
    00003f19: 	mulss	0xc(%r10), %xmm3
    00003f1f: 	addss	%xmm3, %xmm2
    00003f23: 	movss	%xmm2, -0xc(%rax)
    00003f28: 	movss	(%rdx,%r8), %xmm2
    00003f2e: 	mulss	0xc(%r10), %xmm2
    00003f34: 	addss	%xmm2, %xmm1
    00003f38: 	movss	%xmm1, -0x8(%rax)
    00003f3d: 	movss	(%rdx,%r9), %xmm1
    00003f43: 	addq	0x8(%rsp), %rdx
    00003f48: 	mulss	0xc(%r10), %xmm1
    00003f4e: 	addss	%xmm1, %xmm0
    00003f52: 	movss	%xmm0, -0x4(%rax)
    00003f57: 	cmpl	%ecx, 0x58(%rsp)
    00003f5b: 	jg	.Ltmp345 # Offset: 16219
    00003f61: 	movq	0x98(%rsp), %r12
.Ltmp344:
    00003f69: 	movq	0x118(%rsp), %rax
    00003f71: 	movl	0x120(%rsp), %edx
.Ltmp495:
    00003f78: 	cmpl	%edx, 0x1b8(%rsp)
    00003f7f: 	jle	.Ltmp346 # Offset: 16255
    00003f85: 	movslq	%edx, %rcx
    00003f88: 	movq	0x60(%rsp), %r8
    00003f8d: 	leaq	0x4(%r13), %rsi
    00003f91: 	leaq	0x8(%r13), %r14
    00003f95: 	movl	0x1b8(%rsp), %r9d
    00003f9d: 	leaq	(,%rcx,4), %r11
    00003fa5: 	movq	%rcx, 0x10(%rsp)
    00003faa: 	leaq	0xc(%r13), %r15
    00003fae: 	subl	%edx, %r9d
    00003fb1: 	movl	%r9d, %edi
    00003fb4: 	leaq	(%rdi,%rcx), %rbx
    00003fb8: 	subq	$0x1, %rdi
    00003fbc: 	movq	0x38(%rsp), %rcx
    00003fc1: 	imulq	%r8, %rdi
    00003fc5: 	addq	%r11, %rcx
    00003fc8: 	testq	%r8, %r8
    00003fcb: 	movl	$0x0, %r8d
    00003fd1: 	cmovsq	%rdi, %r8
    00003fd5: 	movq	%rdi, %rbp
    00003fd8: 	movq	%r8, %rdi
    00003fdb: 	movq	0x38(%rsp), %r8
    00003fe0: 	addq	%r13, %rdi
    00003fe3: 	addq	%rax, %rdi
    00003fe6: 	leaq	-0x1(%r8,%rbx,4), %r8
    00003feb: 	cmpq	%r8, %rdi
    00003fee: 	movq	%rbp, %rdi
    00003ff1: 	movl	$0xf, %ebp
    00003ff6: 	seta	%r8b
    00003ffa: 	addq	$0xf, %rdi
    00003ffe: 	cmpq	$0x0, 0x60(%rsp)
    00004004: 	cmovsq	%rbp, %rdi
    00004008: 	addq	%r13, %rdi
    0000400b: 	addq	%rax, %rdi
    0000400e: 	cmpq	%rdi, %rcx
    00004011: 	seta	%dil
    00004015: 	orb	%r8b, %dil
    00004018: 	je	.Ltmp347 # Offset: 16408
    0000401e: 	movq	0x38(%rsp), %rdi
    00004023: 	leaq	(%rdi,%rbx,4), %rdi
    00004027: 	cmpq	%rdi, %r10
    0000402a: 	setae	%r8b
    0000402e: 	cmpq	0xa8(%rsp), %rcx
    00004036: 	setae	%dil
    0000403a: 	orl	%r8d, %edi
    0000403d: 	cmpl	$0x1, %r9d
    00004041: 	setne	%r8b
    00004045: 	testb	%r8b, %dil
    00004048: 	je	.Ltmp347 # Offset: 16456
    0000404e: 	leal	-0x1(%r9), %edi
    00004052: 	cmpl	$0x2, %edi
    00004055: 	jbe	.Ltmp348 # Offset: 16469
    0000405b: 	movq	0x60(%rsp), %rbp
    00004060: 	leaq	(%rax,%r13), %rdi
    00004064: 	movups	(%rcx), %xmm7
    00004067: 	movss	0x4(%r10), %xmm4
    0000406d: 	movss	0x8(%r10), %xmm3
    00004073: 	leaq	(%rdi,%rbp), %r8
    00004077: 	movq	%rbp, %rbx
    0000407a: 	movss	0xc(%r10), %xmm2
    00004080: 	leaq	(%r8,%rbp), %r11
    00004084: 	movss	(%r8), %xmm5
    00004089: 	shufps	$0x0, %xmm4, %xmm4
    0000408d: 	shufps	$0x0, %xmm3, %xmm3
    00004091: 	addq	%r11, %rbx
    00004094: 	movss	(%r11), %xmm1
    00004099: 	shufps	$0x0, %xmm2, %xmm2
    0000409d: 	movss	(%rbx), %xmm0
    000040a1: 	unpcklps	%xmm0, %xmm1
    000040a4: 	movss	(%rdi), %xmm0
    000040a8: 	unpcklps	%xmm5, %xmm0
    000040ab: 	movlhps	%xmm1, %xmm0
    000040ae: 	movss	(%r10), %xmm1
    000040b3: 	shufps	$0x0, %xmm1, %xmm1
    000040b7: 	mulps	%xmm1, %xmm0
    000040ba: 	addps	%xmm7, %xmm0
    000040bd: 	movups	%xmm0, (%rcx)
    000040c0: 	movss	0x4(%rbx), %xmm1
    000040c5: 	movss	0x4(%r11), %xmm5
    000040cb: 	movss	0x4(%r8), %xmm6
    000040d1: 	unpcklps	%xmm1, %xmm5
    000040d4: 	movss	0x4(%rdi), %xmm1
    000040d9: 	unpcklps	%xmm6, %xmm1
    000040dc: 	movlhps	%xmm5, %xmm1
    000040df: 	mulps	%xmm4, %xmm1
    000040e2: 	addps	%xmm0, %xmm1
    000040e5: 	movups	%xmm1, (%rcx)
    000040e8: 	movss	0x8(%rbx), %xmm0
    000040ed: 	movss	0x8(%r11), %xmm4
    000040f3: 	movss	0x8(%r8), %xmm5
    000040f9: 	unpcklps	%xmm0, %xmm4
    000040fc: 	movss	0x8(%rdi), %xmm0
    00004101: 	unpcklps	%xmm5, %xmm0
    00004104: 	movlhps	%xmm4, %xmm0
    00004107: 	mulps	%xmm3, %xmm0
    0000410a: 	addps	%xmm1, %xmm0
    0000410d: 	movups	%xmm0, (%rcx)
    00004110: 	movss	0xc(%rbx), %xmm1
    00004115: 	movss	0xc(%r11), %xmm3
    0000411b: 	movl	%r9d, %ebx
    0000411e: 	movss	0xc(%r8), %xmm4
    00004124: 	movl	%r9d, %r8d
    00004127: 	unpcklps	%xmm1, %xmm3
    0000412a: 	movss	0xc(%rdi), %xmm1
    0000412f: 	andl	$-0x4, %r8d
    00004133: 	movq	%rbp, %rdi
    00004136: 	addl	%r8d, %edx
    00004139: 	unpcklps	%xmm4, %xmm1
    0000413c: 	movlhps	%xmm3, %xmm1
    0000413f: 	mulps	%xmm2, %xmm1
    00004142: 	addps	%xmm1, %xmm0
    00004145: 	movups	%xmm0, (%rcx)
    00004148: 	movl	%r8d, %ecx
    0000414b: 	imulq	%rcx, %rdi
    0000414f: 	addq	%rax, %rdi
    00004152: 	cmpl	%r9d, %r8d
    00004155: 	je	.Ltmp346 # Offset: 16725
    0000415b: 	subl	%r8d, %ebx
    0000415e: 	movl	%ebx, %r9d
    00004161: 	cmpl	$0x1, %ebx
    00004164: 	je	.Ltmp349 # Offset: 16740
.Ltmp518:
    0000416a: 	movq	0x10(%rsp), %r8
    0000416f: 	movq	0x38(%rsp), %rbx
    00004174: 	movss	(%r10), %xmm1
    00004179: 	movss	0x4(%r10), %xmm4
    0000417f: 	addq	%rcx, %r8
    00004182: 	movss	0x8(%r10), %xmm3
    00004188: 	movss	0xc(%r10), %xmm2
    0000418e: 	leaq	(%rbx,%r8,4), %r8
    00004192: 	movq	0x60(%rsp), %rbx
    00004197: 	shufps	$0xe0, %xmm1, %xmm1
    0000419b: 	shufps	$0xe0, %xmm4, %xmm4
    0000419f: 	shufps	$0xe0, %xmm3, %xmm3
    000041a3: 	shufps	$0xe0, %xmm2, %xmm2
    000041a7: 	imulq	%rbx, %rcx
    000041ab: 	addq	%r13, %rcx
    000041ae: 	addq	%rcx, %rax
    000041b1: 	leaq	(%rax,%rbx), %rcx
    000041b5: 	movss	(%rax), %xmm0
    000041b9: 	movss	(%rcx), %xmm5
    000041bd: 	unpcklps	%xmm5, %xmm0
    000041c0: 	mulps	%xmm1, %xmm0
    000041c3: 	movq	(%r8), %xmm1
    000041c8: 	addps	%xmm0, %xmm1
    000041cb: 	movlps	%xmm1, (%r8)
    000041cf: 	movss	0x4(%rcx), %xmm5
    000041d4: 	movss	0x4(%rax), %xmm0
    000041d9: 	unpcklps	%xmm5, %xmm0
    000041dc: 	mulps	%xmm4, %xmm0
    000041df: 	addps	%xmm0, %xmm1
    000041e2: 	movlps	%xmm1, (%r8)
    000041e6: 	movss	0x8(%rcx), %xmm4
    000041eb: 	movss	0x8(%rax), %xmm0
    000041f0: 	unpcklps	%xmm4, %xmm0
    000041f3: 	mulps	%xmm3, %xmm0
    000041f6: 	addps	%xmm1, %xmm0
    000041f9: 	movlps	%xmm0, (%r8)
    000041fd: 	movss	0xc(%rcx), %xmm3
    00004202: 	movss	0xc(%rax), %xmm1
    00004207: 	movl	%r9d, %eax
    0000420a: 	andl	$-0x2, %eax
    0000420d: 	unpcklps	%xmm3, %xmm1
    00004210: 	movl	%eax, %ecx
    00004212: 	addl	%eax, %edx
    00004214: 	mulps	%xmm2, %xmm1
    00004217: 	imulq	%rbx, %rcx
    0000421b: 	addq	%rcx, %rdi
    0000421e: 	addps	%xmm1, %xmm0
    00004221: 	movlps	%xmm0, (%r8)
    00004225: 	cmpl	%r9d, %eax
    00004228: 	je	.Ltmp346 # Offset: 16936
.Ltmp349:
    0000422a: 	movq	0x38(%rsp), %rax
    0000422f: 	movslq	%edx, %rdx
    00004232: 	movss	(%rdi,%r13), %xmm0
    00004238: 	mulss	(%r10), %xmm0
    0000423d: 	leaq	(%rax,%rdx,4), %rax
    00004241: 	addss	(%rax), %xmm0
    00004245: 	movss	%xmm0, (%rax)
    00004249: 	movss	(%rdi,%rsi), %xmm1
    0000424e: 	mulss	0x4(%r10), %xmm1
    00004254: 	addss	%xmm0, %xmm1
    00004258: 	movss	%xmm1, (%rax)
    0000425c: 	movss	(%rdi,%r14), %xmm0
    00004262: 	mulss	0x8(%r10), %xmm0
    00004268: 	addss	%xmm1, %xmm0
    0000426c: 	movss	%xmm0, (%rax)
    00004270: 	movss	(%rdi,%r15), %xmm1
    00004276: 	mulss	0xc(%r10), %xmm1
    0000427c: 	addss	%xmm1, %xmm0
    00004280: 	movss	%xmm0, (%rax)
.Ltmp346:
    00004284: 	addl	$0x4, 0xd0(%rsp)
    0000428c: 	addq	$0x10, %r13
    00004290: 	movq	0xa8(%rsp), %r10
    00004298: 	addq	$0x10, 0x78(%rsp)
    0000429e: 	addq	$0x10, 0x80(%rsp)
    000042a7: 	addq	$0x10, 0x88(%rsp)
    000042b0: 	cmpq	0x158(%rsp), %r13
    000042b8: 	jne	.Ltmp350 # Offset: 17080
    000042be: 	movq	0x178(%rsp), %r15
    000042c6: 	movq	0x90(%rsp), %r14
.Ltmp340:
    000042ce: 	movl	0x70(%rsp), %edi
    000042d2: 	cmpl	%edi, 0x54(%rsp)
    000042d6: 	jle	.Ltmp351 # Offset: 17110
    000042dc: 	movslq	0x54(%rsp), %rbx
    000042e1: 	movl	0x1b8(%rsp), %esi
    000042e8: 	movslq	0x70(%rsp), %r13
    000042ed: 	movq	0x38(%rsp), %r8
    000042f2: 	leal	-0x3(%rsi), %eax
    000042f5: 	leaq	(%rbx,%rbx), %rdi
    000042f9: 	movq	0x38(%rsp), %r10
    000042fe: 	movq	%rbx, 0x8(%rsp)
    00004303: 	movl	%eax, 0x28(%rsp)
    00004307: 	leaq	(%rdi,%r13), %rax
    0000430b: 	leaq	(,%rbx,4), %rbp
    00004313: 	leaq	(,%rax,4), %r12
    0000431b: 	leal	-0x4(%rsi), %eax
    0000431e: 	movl	%eax, 0x140(%rsp)
    00004325: 	shrl	$0x2, %eax
    00004328: 	leaq	(,%r13,4), %r11
    00004330: 	leal	0x1(%rax), %ecx
    00004333: 	movl	%eax, %r9d
    00004336: 	leal	(,%rbx,4), %eax
    0000433d: 	movl	%ecx, 0x18(%rsp)
    00004341: 	subq	$0x1, %rcx
    00004345: 	cltq
    00004347: 	movq	%rcx, %rsi
    0000434a: 	shlq	$0x4, %rsi
    0000434e: 	leaq	0xc(%r8,%rsi), %rsi
    00004353: 	movq	%rsi, 0x138(%rsp)
    0000435b: 	leaq	(,%rax,4), %rsi
    00004363: 	imulq	%rsi, %rcx
    00004367: 	movq	%rsi, 0x20(%rsp)
    0000436c: 	xorl	%esi, %esi
    0000436e: 	testl	%ebx, %ebx
    00004370: 	movq	%rsi, %rdx
    00004373: 	cmovsq	%rcx, %rdx
    00004377: 	cmovnsq	%rcx, %rsi
    0000437b: 	movl	0x18(%rsp), %ecx
    0000437f: 	movq	%rsi, 0x130(%rsp)
    00004387: 	shrl	$0x2, %ecx
    0000438a: 	movq	%rax, %rsi
    0000438d: 	shlq	$0x4, %rsi
    00004391: 	subl	$0x1, %ecx
    00004394: 	movq	%rdx, 0x10(%rsp)
    00004399: 	movq	%rsi, 0x30(%rsp)
    0000439e: 	shlq	$0x6, %rcx
    000043a2: 	leaq	(%rbp,%r14), %rsi
    000043a7: 	leaq	0x40(%r8,%rcx), %rdx
    000043ac: 	movq	%rsi, 0x170(%rsp)
    000043b4: 	movq	%r8, %rsi
    000043b7: 	leaq	(%rax,%rax,2), %r8
    000043bb: 	movl	0x18(%rsp), %eax
    000043bf: 	movq	%rdx, 0x40(%rsp)
    000043c4: 	movq	%rsi, %rdx
    000043c7: 	shlq	$0x2, %r8
    000043cb: 	andl	$-0x4, %eax
    000043ce: 	movl	%eax, 0xe8(%rsp)
    000043d5: 	leal	(,%rax,4), %eax
    000043dc: 	movslq	%eax, %rcx
    000043df: 	shlq	$0x2, %rcx
    000043e3: 	addq	%rcx, %rsi
    000043e6: 	movq	%rsi, 0x60(%rsp)
    000043eb: 	movl	%ebx, %esi
    000043ed: 	imull	%eax, %esi
    000043f0: 	movl	%esi, 0x70(%rsp)
    000043f4: 	leaq	0x4(%rdx,%rcx), %rsi
    000043f9: 	movq	%rsi, 0x78(%rsp)
    000043fe: 	leal	0x1(%rax), %esi
    00004401: 	imull	%ebx, %esi
    00004404: 	movl	%esi, 0x80(%rsp)
    0000440b: 	leaq	0x8(%rdx,%rcx), %rsi
    00004410: 	movq	%rsi, 0x88(%rsp)
    00004418: 	leal	0x2(%rax), %esi
    0000441b: 	movl	%esi, %edx
    0000441d: 	movq	0x38(%rsp), %rsi
    00004422: 	imull	%ebx, %edx
    00004425: 	movl	%edx, 0x90(%rsp)
    0000442c: 	leaq	0xc(%r10,%rcx), %rdx
    00004431: 	leal	0x3(%rax), %ecx
    00004434: 	imull	%ebx, %ecx
    00004437: 	movq	%rdx, 0x98(%rsp)
    0000443f: 	leal	0x4(%rax), %edx
    00004442: 	movl	%edx, 0x58(%rsp)
    00004446: 	movl	%ecx, 0xa0(%rsp)
    0000444d: 	movslq	%edx, %rcx
    00004450: 	imull	%ebx, %edx
    00004453: 	shlq	$0x2, %rcx
    00004457: 	addq	%rcx, %r10
    0000445a: 	movl	%edx, 0x180(%rsp)
    00004461: 	leaq	0x4(%rsi,%rcx), %rdx
    00004466: 	leal	0x5(%rax), %esi
    00004469: 	movq	%rdx, 0xb0(%rsp)
    00004471: 	movl	%esi, %edx
    00004473: 	imull	%ebx, %edx
    00004476: 	movq	%r10, 0xa8(%rsp)
    0000447e: 	movl	%edx, 0x188(%rsp)
    00004485: 	movq	0x38(%rsp), %rsi
    0000448a: 	movq	0x38(%rsp), %r10
    0000448f: 	leaq	0x8(%rsi,%rcx), %rdx
    00004494: 	leal	0x6(%rax), %esi
    00004497: 	movq	%rdx, 0xc8(%rsp)
    0000449f: 	movl	%esi, %edx
    000044a1: 	movq	0x38(%rsp), %rsi
    000044a6: 	imull	%ebx, %edx
    000044a9: 	movl	%edx, 0x190(%rsp)
    000044b0: 	leaq	0xc(%r10,%rcx), %rdx
    000044b5: 	leal	0x7(%rax), %ecx
    000044b8: 	imull	%ebx, %ecx
    000044bb: 	movq	%rdx, 0xd0(%rsp)
    000044c3: 	leal	0x8(%rax), %edx
    000044c6: 	movl	%edx, 0xe0(%rsp)
    000044cd: 	movl	%ecx, 0xd8(%rsp)
    000044d4: 	movslq	%edx, %rcx
    000044d7: 	imull	%ebx, %edx
    000044da: 	shlq	$0x2, %rcx
    000044de: 	addq	%rcx, %r10
    000044e1: 	movl	%edx, 0x120(%rsp)
    000044e8: 	leaq	0x4(%rsi,%rcx), %rdx
    000044ed: 	leal	0x9(%rax), %esi
    000044f0: 	movq	%rdx, 0x118(%rsp)
    000044f8: 	movl	%esi, %edx
    000044fa: 	movq	0x38(%rsp), %rsi
    000044ff: 	imull	%ebx, %edx
    00004502: 	movq	%r10, 0x128(%rsp)
    0000450a: 	movq	0x38(%rsp), %r10
    0000450f: 	movl	%edx, 0x110(%rsp)
    00004516: 	leaq	0x8(%rsi,%rcx), %rdx
    0000451b: 	leal	0xa(%rax), %esi
    0000451e: 	addl	$0xb, %eax
    00004521: 	movq	%rdx, 0x108(%rsp)
    00004529: 	movl	%esi, %edx
    0000452b: 	imull	%ebx, %edx
    0000452e: 	movl	%edx, 0x100(%rsp)
    00004535: 	leaq	0xc(%r10,%rcx), %rdx
    0000453a: 	movq	%rdx, 0xf8(%rsp)
    00004542: 	movl	%eax, %edx
    00004544: 	movl	%r9d, %eax
    00004547: 	shlq	$0x4, %rax
    0000454b: 	imull	%ebx, %edx
    0000454e: 	leaq	0x10(%r10,%rax), %rsi
    00004553: 	leaq	(%rdi,%rbx), %rax
    00004557: 	leaq	(,%rax,4), %rdi
    0000455f: 	movl	0x18(%rsp), %eax
    00004563: 	movq	%rsi, 0x168(%rsp)
    0000456b: 	movl	%edx, 0xf0(%rsp)
    00004572: 	shll	$0x2, %eax
    00004575: 	movq	%rdi, 0x198(%rsp)
    0000457d: 	movl	%eax, 0x178(%rsp)
.Ltmp358:
    00004584: 	movl	0x28(%rsp), %eax
    00004588: 	movss	(%r15,%r11), %xmm0
    0000458e: 	movl	%r13d, %ecx
    00004591: 	testl	%eax, %eax
    00004593: 	jle	.Ltmp352 # Offset: 17811
    00004599: 	movq	0x130(%rsp), %rbx
    000045a1: 	leaq	(%r12,%rbp), %rax
    000045a5: 	leaq	(%r11,%rbp), %rdi
    000045a9: 	movq	0x38(%rsp), %r10
    000045ae: 	movq	0x138(%rsp), %rdx
    000045b6: 	leaq	(%rax,%rbx), %rsi
    000045ba: 	addq	%r14, %rsi
    000045bd: 	cmpq	%rsi, %r10
    000045c0: 	seta	%sil
    000045c4: 	addq	0x10(%rsp), %rax
    000045c9: 	addq	%r14, %rax
    000045cc: 	cmpq	%rax, %rdx
    000045cf: 	setb	%al
    000045d2: 	orl	%eax, %esi
    000045d4: 	leaq	(%rbx,%r12), %rax
    000045d8: 	addq	%r14, %rax
    000045db: 	movl	%esi, %r9d
    000045de: 	cmpq	%rax, %r10
    000045e1: 	movq	0x10(%rsp), %rax
    000045e6: 	seta	%sil
    000045ea: 	addq	%r12, %rax
    000045ed: 	addq	%r14, %rax
    000045f0: 	cmpq	%rax, %rdx
    000045f3: 	setb	%al
    000045f6: 	orl	%esi, %eax
    000045f8: 	andl	%r9d, %eax
    000045fb: 	cmpl	$0xb, 0x140(%rsp)
    00004603: 	movl	%eax, %r9d
    00004606: 	movq	0x10(%rsp), %rax
    0000460b: 	seta	%sil
    0000460f: 	andl	%esi, %r9d
    00004612: 	addq	%r11, %rax
    00004615: 	addq	%r14, %rax
    00004618: 	cmpq	%rax, %rdx
    0000461b: 	leaq	(%rbx,%r11), %rax
    0000461f: 	setb	%sil
    00004623: 	addq	%r14, %rax
    00004626: 	cmpq	%rax, %r10
    00004629: 	seta	%al
    0000462c: 	orl	%esi, %eax
    0000462e: 	testb	%al, %r9b
    00004631: 	je	.Ltmp353 # Offset: 17969
    00004637: 	leaq	(%rbx,%rdi), %rax
    0000463b: 	addq	%r14, %rax
    0000463e: 	cmpq	%rax, %r10
    00004641: 	movq	0x10(%rsp), %rax
    00004646: 	seta	%sil
    0000464a: 	addq	%rdi, %rax
    0000464d: 	addq	%r14, %rax
    00004650: 	cmpq	%rax, %rdx
    00004653: 	setb	%al
    00004656: 	orb	%sil, %al
    00004659: 	je	.Ltmp353 # Offset: 18009
    0000465f: 	movq	%r10, %rax
    00004662: 	movq	0x20(%rsp), %rdx
    00004667: 	movaps	%xmm0, %xmm5
    0000466a: 	leaq	(%r14,%r11), %rdi
    0000466e: 	movq	0x170(%rsp), %rbx
    00004676: 	leaq	(%r14,%r12), %r9
    0000467a: 	shufps	$0x0, %xmm5, %xmm5
    0000467e: 	leaq	(%r11,%rbx), %rsi
    00004682: 	leaq	(%r12,%rbx), %r10
    00004686: 	movq	0x30(%rsp), %rbx
.Ltmp354:
    0000468b: 	movups	(%rax), %xmm6
    0000468e: 	movups	0x10(%rax), %xmm3
    00004692: 	addq	$0x40, %rax
    00004696: 	movups	-0x20(%rax), %xmm7
    0000469a: 	movss	(%rdi,%rdx,2), %xmm2
    0000469f: 	movaps	%xmm6, %xmm1
    000046a2: 	shufps	$0xdd, %xmm3, %xmm6
    000046a6: 	movss	(%rdi,%rdx), %xmm4
    000046ab: 	movss	(%rsi,%rdx,2), %xmm10
    000046b1: 	shufps	$0x88, %xmm3, %xmm1
    000046b5: 	movups	-0x10(%rax), %xmm3
    000046b9: 	movaps	%xmm7, %xmm8
    000046bd: 	movss	(%rsi,%rdx), %xmm9
    000046c3: 	shufps	$0x88, %xmm3, %xmm8
    000046c8: 	shufps	$0xdd, %xmm3, %xmm7
    000046cc: 	movss	(%rdi,%r8), %xmm3
    000046d2: 	unpcklps	%xmm3, %xmm2
    000046d5: 	movss	(%rdi), %xmm3
    000046d9: 	addq	%rbx, %rdi
    000046dc: 	unpcklps	%xmm4, %xmm3
    000046df: 	movaps	%xmm6, %xmm4
    000046e2: 	shufps	$0xdd, %xmm7, %xmm6
    000046e6: 	movlhps	%xmm2, %xmm3
    000046e9: 	movaps	%xmm1, %xmm2
    000046ec: 	shufps	$0x88, %xmm7, %xmm4
    000046f0: 	shufps	$0xdd, %xmm8, %xmm1
    000046f5: 	mulps	%xmm5, %xmm3
    000046f8: 	shufps	$0x88, %xmm8, %xmm2
    000046fd: 	movss	(%r10,%rdx,2), %xmm8
    00004703: 	addps	%xmm2, %xmm3
    00004706: 	movss	(%rsi,%r8), %xmm2
    0000470c: 	unpcklps	%xmm2, %xmm10
    00004710: 	movss	(%rsi), %xmm2
    00004714: 	addq	%rbx, %rsi
    00004717: 	unpcklps	%xmm9, %xmm2
    0000471b: 	movss	(%r9,%rdx,2), %xmm9
    00004721: 	movlhps	%xmm10, %xmm2
    00004725: 	movss	(%r9,%rdx), %xmm10
    0000472b: 	mulps	%xmm5, %xmm2
    0000472e: 	addps	%xmm2, %xmm4
    00004731: 	movss	(%r9,%r8), %xmm2
    00004737: 	unpcklps	%xmm2, %xmm9
    0000473b: 	movss	(%r9), %xmm2
    00004740: 	addq	%rbx, %r9
    00004743: 	movaps	%xmm4, %xmm7
    00004746: 	unpcklps	%xmm10, %xmm2
    0000474a: 	movlhps	%xmm9, %xmm2
    0000474e: 	movss	(%r10,%rdx), %xmm9
    00004754: 	mulps	%xmm5, %xmm2
    00004757: 	addps	%xmm1, %xmm2
    0000475a: 	movss	(%r10,%r8), %xmm1
    00004760: 	unpcklps	%xmm1, %xmm8
    00004764: 	movss	(%r10), %xmm1
    00004769: 	addq	%rbx, %r10
    0000476c: 	unpcklps	%xmm9, %xmm1
    00004770: 	movlhps	%xmm8, %xmm1
    00004774: 	mulps	%xmm5, %xmm1
    00004777: 	addps	%xmm6, %xmm1
    0000477a: 	movaps	%xmm3, %xmm6
    0000477d: 	unpckhps	%xmm2, %xmm3
    00004780: 	unpcklps	%xmm2, %xmm6
    00004783: 	unpcklps	%xmm1, %xmm7
    00004786: 	unpckhps	%xmm1, %xmm4
    00004789: 	movaps	%xmm6, %xmm1
    0000478c: 	unpcklps	%xmm7, %xmm1
    0000478f: 	unpckhps	%xmm7, %xmm6
    00004792: 	movups	%xmm1, -0x40(%rax)
    00004796: 	movaps	%xmm3, %xmm1
    00004799: 	unpckhps	%xmm4, %xmm3
    0000479c: 	unpcklps	%xmm4, %xmm1
    0000479f: 	movups	%xmm6, -0x30(%rax)
    000047a3: 	movups	%xmm1, -0x20(%rax)
    000047a7: 	movups	%xmm3, -0x10(%rax)
    000047ab: 	cmpq	0x40(%rsp), %rax
    000047b0: 	jne	.Ltmp354 # Offset: 18352
    000047b6: 	movq	%rdx, 0x20(%rsp)
    000047bb: 	movl	0x18(%rsp), %edi
    000047bf: 	movq	%rbx, 0x30(%rsp)
    000047c4: 	cmpl	%edi, 0xe8(%rsp)
    000047cb: 	je	.Ltmp355 # Offset: 18379
    000047d1: 	movl	0x70(%rsp), %eax
    000047d5: 	movl	0x28(%rsp), %edi
    000047d9: 	addl	%ecx, %eax
    000047db: 	cltq
    000047dd: 	movss	(%r14,%rax,4), %xmm1
    000047e3: 	movq	0x60(%rsp), %rax
    000047e8: 	mulss	%xmm0, %xmm1
    000047ec: 	addss	(%rax), %xmm1
    000047f0: 	movss	%xmm1, (%rax)
    000047f4: 	movl	0x80(%rsp), %eax
    000047fb: 	addl	%ecx, %eax
    000047fd: 	cltq
    000047ff: 	movss	(%r14,%rax,4), %xmm1
    00004805: 	movq	0x78(%rsp), %rax
    0000480a: 	mulss	%xmm0, %xmm1
    0000480e: 	addss	(%rax), %xmm1
    00004812: 	movss	%xmm1, (%rax)
    00004816: 	movl	0x90(%rsp), %eax
    0000481d: 	addl	%ecx, %eax
    0000481f: 	cltq
    00004821: 	movss	(%r14,%rax,4), %xmm1
    00004827: 	movq	0x88(%rsp), %rax
    0000482f: 	mulss	%xmm0, %xmm1
    00004833: 	addss	(%rax), %xmm1
    00004837: 	movss	%xmm1, (%rax)
    0000483b: 	movl	0xa0(%rsp), %eax
    00004842: 	addl	%ecx, %eax
    00004844: 	cltq
    00004846: 	movss	(%r14,%rax,4), %xmm1
    0000484c: 	movq	0x98(%rsp), %rax
    00004854: 	mulss	%xmm0, %xmm1
    00004858: 	addss	(%rax), %xmm1
    0000485c: 	movss	%xmm1, (%rax)
    00004860: 	movl	0x58(%rsp), %eax
    00004864: 	cmpl	%eax, %edi
    00004866: 	jle	.Ltmp355 # Offset: 18534
    0000486c: 	movl	0x180(%rsp), %eax
    00004873: 	addl	%ecx, %eax
    00004875: 	cltq
    00004877: 	movss	(%r14,%rax,4), %xmm1
    0000487d: 	movq	0xa8(%rsp), %rax
    00004885: 	mulss	%xmm0, %xmm1
    00004889: 	addss	(%rax), %xmm1
    0000488d: 	movss	%xmm1, (%rax)
    00004891: 	movl	0x188(%rsp), %eax
    00004898: 	addl	%ecx, %eax
    0000489a: 	cltq
    0000489c: 	movss	(%r14,%rax,4), %xmm1
    000048a2: 	movq	0xb0(%rsp), %rax
    000048aa: 	mulss	%xmm0, %xmm1
    000048ae: 	addss	(%rax), %xmm1
    000048b2: 	movss	%xmm1, (%rax)
    000048b6: 	movl	0x190(%rsp), %eax
    000048bd: 	addl	%ecx, %eax
    000048bf: 	cltq
    000048c1: 	movss	(%r14,%rax,4), %xmm1
    000048c7: 	movq	0xc8(%rsp), %rax
    000048cf: 	mulss	%xmm0, %xmm1
    000048d3: 	addss	(%rax), %xmm1
    000048d7: 	movss	%xmm1, (%rax)
    000048db: 	movl	0xd8(%rsp), %eax
    000048e2: 	addl	%ecx, %eax
    000048e4: 	cltq
    000048e6: 	movss	(%r14,%rax,4), %xmm1
    000048ec: 	movq	0xd0(%rsp), %rax
    000048f4: 	mulss	%xmm0, %xmm1
    000048f8: 	addss	(%rax), %xmm1
    000048fc: 	movss	%xmm1, (%rax)
    00004900: 	cmpl	%edi, 0xe0(%rsp)
    00004907: 	jge	.Ltmp355 # Offset: 18695
    0000490d: 	movl	0x120(%rsp), %eax
    00004914: 	addl	%ecx, %eax
    00004916: 	cltq
    00004918: 	movss	(%r14,%rax,4), %xmm1
    0000491e: 	movq	0x128(%rsp), %rax
    00004926: 	mulss	%xmm0, %xmm1
    0000492a: 	addss	(%rax), %xmm1
    0000492e: 	movss	%xmm1, (%rax)
    00004932: 	movl	0x110(%rsp), %eax
    00004939: 	addl	%ecx, %eax
    0000493b: 	cltq
    0000493d: 	movss	(%r14,%rax,4), %xmm1
    00004943: 	movq	0x118(%rsp), %rax
    0000494b: 	mulss	%xmm0, %xmm1
    0000494f: 	addss	(%rax), %xmm1
    00004953: 	movss	%xmm1, (%rax)
    00004957: 	movl	0x100(%rsp), %eax
    0000495e: 	addl	%ecx, %eax
    00004960: 	cltq
    00004962: 	movss	(%r14,%rax,4), %xmm1
    00004968: 	movq	0x108(%rsp), %rax
    00004970: 	mulss	%xmm0, %xmm1
    00004974: 	addss	(%rax), %xmm1
    00004978: 	movss	%xmm1, (%rax)
    0000497c: 	movl	0xf0(%rsp), %eax
    00004983: 	addl	%ecx, %eax
    00004985: 	cltq
    00004987: 	movss	(%r14,%rax,4), %xmm1
    0000498d: 	movq	0xf8(%rsp), %rax
    00004995: 	mulss	%xmm0, %xmm1
    00004999: 	addss	(%rax), %xmm1
    0000499d: 	movss	%xmm1, (%rax)
.Ltmp355:
    000049a1: 	movl	0x178(%rsp), %r9d
.Ltmp517:
    000049a9: 	cmpl	%r9d, 0x1b8(%rsp)
    000049b1: 	jle	.Ltmp356 # Offset: 18865
    000049b7: 	movl	0x1b8(%rsp), %eax
    000049be: 	movq	0x38(%rsp), %r10
    000049c3: 	subl	%r9d, %eax
    000049c6: 	movl	%eax, %esi
    000049c8: 	movl	0x54(%rsp), %eax
    000049cc: 	movl	%esi, 0x160(%rsp)
    000049d3: 	imull	%r9d, %eax
    000049d7: 	movl	%eax, 0x158(%rsp)
    000049de: 	cltq
    000049e0: 	leaq	(%rax,%r13), %rdi
    000049e4: 	leaq	(,%rdi,4), %rdx
    000049ec: 	movq	%rdi, 0x1a0(%rsp)
    000049f4: 	movl	%esi, %edi
    000049f6: 	movslq	%r9d, %rsi
    000049f9: 	leaq	-0x1(%rdi), %rax
    000049fd: 	movq	%rdi, 0x150(%rsp)
    00004a05: 	leaq	(,%rsi,4), %rdi
    00004a0d: 	movq	%rax, %rbx
    00004a10: 	addq	%rdi, %r10
    00004a13: 	xorl	%eax, %eax
    00004a15: 	imulq	%rbp, %rbx
    00004a19: 	cmpl	$0x0, 0x54(%rsp)
    00004a1e: 	cmovsq	%rbx, %rax
    00004a22: 	movq	%rbx, 0x148(%rsp)
    00004a2a: 	movq	0x150(%rsp), %rbx
    00004a32: 	leaq	-0x1(%rsi,%rbx), %rsi
    00004a37: 	movq	0x38(%rsp), %rbx
    00004a3c: 	addq	%rdx, %rax
    00004a3f: 	addq	%r14, %rax
    00004a42: 	leaq	(%rbx,%rsi,4), %rsi
    00004a46: 	movl	0x54(%rsp), %ebx
    00004a4a: 	cmpq	%rsi, %rax
    00004a4d: 	seta	%sil
    00004a51: 	xorl	%eax, %eax
    00004a53: 	testl	%ebx, %ebx
    00004a55: 	cmovnsq	0x148(%rsp), %rax
    00004a5e: 	addq	%rdx, %rax
    00004a61: 	addq	%r14, %rax
    00004a64: 	cmpq	%rax, %r10
    00004a67: 	seta	%al
    00004a6a: 	orb	%sil, %al
    00004a6d: 	je	.Ltmp357 # Offset: 19053
    00004a73: 	movl	0x160(%rsp), %ebx
    00004a7a: 	leal	-0x1(%rbx), %eax
    00004a7d: 	cmpl	$0x2, %eax
    00004a80: 	jbe	.Ltmp357 # Offset: 19072
    00004a86: 	addq	%r14, %rdx
    00004a89: 	movups	(%r10), %xmm4
    00004a8d: 	leaq	(%rdx,%rbp), %rsi
    00004a91: 	leaq	(%rsi,%rbp), %rdi
    00004a95: 	movss	(%rsi), %xmm3
    00004a99: 	movss	(%rdi,%rbp), %xmm1
    00004a9e: 	movss	(%rdi), %xmm2
    00004aa2: 	movl	%ebx, %edi
    00004aa4: 	andl	$-0x4, %edi
    00004aa7: 	unpcklps	%xmm1, %xmm2
    00004aaa: 	movss	(%rdx), %xmm1
    00004aae: 	movl	%edi, %eax
    00004ab0: 	leal	(%rdi,%r9), %edi
    00004ab4: 	unpcklps	%xmm3, %xmm1
    00004ab7: 	movlhps	%xmm2, %xmm1
    00004aba: 	movaps	%xmm0, %xmm2
    00004abd: 	shufps	$0x0, %xmm2, %xmm2
    00004ac1: 	mulps	%xmm2, %xmm1
    00004ac4: 	addps	%xmm4, %xmm1
    00004ac7: 	movups	%xmm1, (%r10)
    00004acb: 	cmpl	%ebx, %eax
    00004acd: 	je	.Ltmp356 # Offset: 19149
    00004ad3: 	movl	0x54(%rsp), %edx
    00004ad7: 	movq	0x38(%rsp), %rbx
    00004adc: 	movslq	%edi, %rax
    00004adf: 	movl	%edx, %r9d
    00004ae2: 	leaq	(%rbx,%rax,4), %rsi
    00004ae6: 	imull	%edi, %r9d
    00004aea: 	leal	(%r9,%rcx), %eax
    00004aee: 	cltq
    00004af0: 	movss	(%r14,%rax,4), %xmm1
    00004af6: 	leal	0x1(%rdi), %eax
    00004af9: 	mulss	%xmm0, %xmm1
    00004afd: 	addss	(%rsi), %xmm1
    00004b01: 	movss	%xmm1, (%rsi)
    00004b05: 	cmpl	%eax, 0x1b8(%rsp)
    00004b0c: 	jle	.Ltmp356 # Offset: 19212
    00004b0e: 	cltq
    00004b10: 	addl	%edx, %r9d
    00004b13: 	leaq	(,%rax,4), %r10
    00004b1b: 	leal	(%r9,%rcx), %eax
    00004b1f: 	cltq
    00004b21: 	leaq	(%rbx,%r10), %rsi
    00004b25: 	movss	(%r14,%rax,4), %xmm1
    00004b2b: 	leal	0x2(%rdi), %eax
    00004b2e: 	mulss	%xmm0, %xmm1
    00004b32: 	addss	(%rsi), %xmm1
    00004b36: 	movss	%xmm1, (%rsi)
    00004b3a: 	cmpl	%eax, 0x1b8(%rsp)
    00004b41: 	jle	.Ltmp356 # Offset: 19265
    00004b43: 	movl	%edx, %eax
    00004b45: 	leaq	0x4(%rbx,%r10), %rsi
    00004b4a: 	addl	%r9d, %eax
.Ltmp516:
    00004b4d: 	addl	%ecx, %eax
    00004b4f: 	cltq
    00004b51: 	mulss	(%r14,%rax,4), %xmm0
    00004b57: 	addss	(%rsi), %xmm0
    00004b5b: 	movss	%xmm0, (%rsi)
.Ltmp356:
    00004b5f: 	addq	$0x1, %r13
    00004b63: 	addq	$0x4, %r12
    00004b67: 	addq	$0x4, %r11
    00004b6b: 	cmpl	%r13d, 0x54(%rsp)
    00004b70: 	jg	.Ltmp358 # Offset: 19312
.Ltmp351:
    00004b76: 	xorl	%eax, %eax
.Ltmp361:
    00004b78: 	movq	0x288(%rsp), %rdi
    00004b80: 	movss	(%rdi,%rax,4), %xmm1
    00004b85: 	movq	0x38(%rsp), %rdi
    00004b8a: 	movaps	%xmm1, %xmm2
    00004b8d: 	andps	DATAat0x24930(%rip), %xmm2
    00004b94: 	movaps	%xmm1, %xmm0
    00004b97: 	subss	(%rdi,%rax,4), %xmm0
    00004b9c: 	cvtss2sd	%xmm2, %xmm2
    00004ba0: 	comisd	DATAat0x24968(%rip), %xmm2
    00004ba8: 	jbe	.Ltmp359 # Offset: 19368
    00004baa: 	divss	%xmm1, %xmm0
.Ltmp359:
    00004bae: 	movsd	DATAat0x24970(%rip), %xmm3
    00004bb6: 	cvtss2sd	%xmm0, %xmm0
    00004bba: 	andpd	DATAat0x24940(%rip), %xmm0
    00004bc2: 	comisd	%xmm0, %xmm3
    00004bc6: 	jbe	.Ltmp360 # Offset: 19398
    00004bcc: 	addq	$0x1, %rax
    00004bd0: 	cmpq	$0x320, %rax
    00004bd6: 	jne	.Ltmp361 # Offset: 19414
.Ltmp515:
    00004bd8: 	movq	0x38(%rsp), %rax
    00004bdd: 	movq	$0x0, (%rax)
    00004be4: 	movq	0xc0(%rsp), %rdi
    00004bec: 	movq	$0x0, -0x10(%rdi)
    00004bf4: 	movq	0xb8(%rsp), %rdi
    00004bfc: 	andq	$-0x8, %rdi
    00004c00: 	subq	%rdi, %rax
    00004c03: 	movq	%rax, %rcx
    00004c06: 	xorl	%eax, %eax
    00004c08: 	addl	$0xc80, %ecx
    00004c0e: 	shrl	$0x3, %ecx
    00004c11: 	rep		stosq	%rax, %es:(%rdi)
    00004c14: 	movl	0x1b8(%rsp), %r12d
    00004c1c: 	testl	%r12d, %r12d
    00004c1f: 	jle	.Ltmp362 # Offset: 19487
    00004c25: 	movslq	0x54(%rsp), %rax
    00004c2a: 	testl	%eax, %eax
    00004c2c: 	jle	.Ltmp362 # Offset: 19500
    00004c32: 	imull	$0x1e, %eax, %edi
    00004c35: 	movq	%rax, %rbx
    00004c38: 	movq	%rax, 0x8(%rsp)
    00004c3d: 	leaq	(,%rax,4), %r12
    00004c45: 	leaq	(%rax,%rax,2), %rax
    00004c49: 	shlq	$0x4, %rbx
    00004c4d: 	movq	$0x0, 0x98(%rsp)
    00004c59: 	leaq	(,%rax,4), %rbp
    00004c61: 	movq	0x38(%rsp), %rax
    00004c66: 	movl	$0x0, 0xa0(%rsp)
    00004c71: 	movl	%edi, 0xc8(%rsp)
    00004c78: 	movq	%rax, %r13
    00004c7b: 	addq	$0x4, %rax
    00004c7f: 	movq	%rax, 0xd0(%rsp)
.Ltmp368:
    00004c87: 	movq	0x98(%rsp), %rdi
    00004c8f: 	movl	0x1b8(%rsp), %eax
    00004c96: 	leal	0x1e(%rdi), %r10d
    00004c9a: 	cmpl	%eax, %r10d
    00004c9d: 	cmovgl	%eax, %r10d
    00004ca1: 	cmpl	%edi, %r10d
    00004ca4: 	jle	.Ltmp363 # Offset: 19620
    00004caa: 	movl	%r10d, %ecx
    00004cad: 	movl	0x54(%rsp), %r8d
    00004cb2: 	movq	%rdi, %r9
    00004cb5: 	movq	0x38(%rsp), %r11
    00004cba: 	subl	%edi, %ecx
    00004cbc: 	movslq	0xa0(%rsp), %rax
    00004cc4: 	xorl	%edi, %edi
    00004cc6: 	movl	%ecx, %edx
    00004cc8: 	movl	%ecx, 0x40(%rsp)
    00004ccc: 	leaq	(%r14,%rax,4), %rsi
    00004cd0: 	leaq	-0x1(%rdx), %rax
    00004cd4: 	imulq	%r12, %rax
    00004cd8: 	testl	%r8d, %r8d
    00004cdb: 	leaq	-0x1(%rdx,%r9), %rdx
    00004ce0: 	cmovnsq	%rax, %rdi
    00004ce4: 	movq	%rdi, 0x20(%rsp)
    00004ce9: 	leaq	(%r11,%rdx,4), %rdi
    00004ced: 	movq	%rdi, 0x18(%rsp)
    00004cf2: 	movl	$0x0, %edi
    00004cf7: 	cmovnsq	%rdi, %rax
    00004cfb: 	movq	%rax, 0x10(%rsp)
    00004d00: 	movl	%ecx, %eax
    00004d02: 	shrl	$0x2, %eax
    00004d05: 	subl	$0x1, %eax
    00004d08: 	shlq	$0x4, %rax
    00004d0c: 	leaq	0x10(%r13,%rax), %rdi
    00004d11: 	movl	%ecx, %eax
    00004d13: 	andl	$-0x4, %eax
    00004d16: 	movl	%eax, 0x30(%rsp)
    00004d1a: 	addl	%r9d, %eax
    00004d1d: 	movslq	%eax, %rdx
    00004d20: 	leaq	(%r11,%rdx,4), %rdx
    00004d24: 	movq	%rdx, 0xb0(%rsp)
    00004d2c: 	movl	%r8d, %edx
    00004d2f: 	imull	%eax, %edx
    00004d32: 	movl	%edx, 0x60(%rsp)
    00004d36: 	leal	0x1(%rax), %edx
    00004d39: 	addl	$0x2, %eax
    00004d3c: 	movl	%edx, 0x58(%rsp)
    00004d40: 	movslq	%edx, %rdx
    00004d43: 	leaq	(%r11,%rdx,4), %r11
    00004d47: 	movl	0x58(%rsp), %edx
    00004d4b: 	movl	%eax, 0x80(%rsp)
    00004d52: 	movq	%r11, 0x70(%rsp)
    00004d57: 	movl	%eax, %r11d
    00004d5a: 	cltq
    00004d5c: 	imull	%r8d, %edx
    00004d60: 	imull	%r8d, %r11d
    00004d64: 	movl	%edx, 0x78(%rsp)
    00004d68: 	movq	0x38(%rsp), %rdx
    00004d6d: 	movl	%r11d, 0x88(%rsp)
    00004d75: 	movq	0xb0(%rsp), %r11
    00004d7d: 	leaq	(%rdx,%rax,4), %rax
    00004d81: 	movq	%rax, 0x90(%rsp)
    00004d89: 	leaq	(%rdx,%r9,4), %rax
    00004d8d: 	movq	%rax, 0xa8(%rsp)
    00004d95: 	leal	-0x1(%rcx), %eax
    00004d98: 	movq	0xd0(%rsp), %rcx
    00004da0: 	movl	%eax, 0x28(%rsp)
    00004da4: 	addq	%r9, %rax
    00004da7: 	leaq	(%rcx,%rax,4), %r9
    00004dab: 	xorl	%ecx, %ecx
    00004dad: 	nopl	(%rax) # Size: 3
.Ltmp367:
    00004db0: 	movq	0x10(%rsp), %rdx
    00004db5: 	movq	%rsi, %rax
    00004db8: 	movss	(%r15,%rcx,4), %xmm3
    00004dbe: 	movl	%ecx, %r8d
    00004dc1: 	subq	%r14, %rax
    00004dc4: 	addq	%rsi, %rdx
    00004dc7: 	cmpq	%rdx, 0x18(%rsp)
    00004dcc: 	setb	%dl
    00004dcf: 	addq	0x20(%rsp), %rax
    00004dd4: 	addq	%r14, %rax
    00004dd7: 	cmpq	%rax, %r13
    00004dda: 	seta	%al
    00004ddd: 	orb	%dl, %al
    00004ddf: 	je	.Ltmp364 # Offset: 19935
    00004de5: 	movaps	%xmm3, %xmm4
    00004de8: 	cmpl	$0x2, 0x28(%rsp)
    00004ded: 	movq	%rsi, %rax
    00004df0: 	movq	%r13, %rdx
    00004df3: 	shufps	$0x0, %xmm4, %xmm4
    00004df7: 	jbe	.Ltmp364 # Offset: 19959
    00004dfd: 	nopl	(%rax) # Size: 3
.Ltmp365:
    00004e00: 	movss	(%rax,%rbp), %xmm0
    00004e05: 	movss	(%rax,%r12,2), %xmm1
    00004e0b: 	addq	$0x10, %rdx
    00004e0f: 	movss	(%rax,%r12), %xmm2
    00004e15: 	movups	-0x10(%rdx), %xmm7
    00004e19: 	unpcklps	%xmm0, %xmm1
    00004e1c: 	movss	(%rax), %xmm0
    00004e20: 	addq	%rbx, %rax
    00004e23: 	unpcklps	%xmm2, %xmm0
    00004e26: 	movlhps	%xmm1, %xmm0
    00004e29: 	mulps	%xmm4, %xmm0
    00004e2c: 	addps	%xmm7, %xmm0
    00004e2f: 	movups	%xmm0, -0x10(%rdx)
    00004e33: 	cmpq	%rdi, %rdx
    00004e36: 	jne	.Ltmp365 # Offset: 20022
    00004e38: 	movl	0x40(%rsp), %edx
    00004e3c: 	cmpl	%edx, 0x30(%rsp)
    00004e40: 	je	.Ltmp366 # Offset: 20032
    00004e42: 	movl	0x60(%rsp), %eax
    00004e46: 	addl	%r8d, %eax
    00004e49: 	cltq
    00004e4b: 	movss	(%r14,%rax,4), %xmm0
    00004e51: 	mulss	%xmm3, %xmm0
    00004e55: 	addss	(%r11), %xmm0
    00004e5a: 	movss	%xmm0, (%r11)
    00004e5f: 	cmpl	%r10d, 0x58(%rsp)
    00004e64: 	jge	.Ltmp366 # Offset: 20068
    00004e66: 	movl	0x78(%rsp), %eax
    00004e6a: 	addl	%r8d, %eax
    00004e6d: 	cltq
    00004e6f: 	movss	(%r14,%rax,4), %xmm0
    00004e75: 	movq	0x70(%rsp), %rax
    00004e7a: 	mulss	%xmm3, %xmm0
    00004e7e: 	addss	(%rax), %xmm0
    00004e82: 	movss	%xmm0, (%rax)
    00004e86: 	cmpl	%r10d, 0x80(%rsp)
    00004e8e: 	jge	.Ltmp366 # Offset: 20110
    00004e90: 	movl	0x88(%rsp), %eax
    00004e97: 	addl	%r8d, %eax
    00004e9a: 	cltq
    00004e9c: 	mulss	(%r14,%rax,4), %xmm3
    00004ea2: 	movq	0x90(%rsp), %rax
    00004eaa: 	addss	(%rax), %xmm3
    00004eae: 	movss	%xmm3, (%rax)
.Ltmp366:
    00004eb2: 	addq	$0x1, %rcx
    00004eb6: 	addq	$0x4, %rsi
    00004eba: 	cmpq	0x8(%rsp), %rcx
    00004ebf: 	jne	.Ltmp367 # Offset: 20159
.Ltmp363:
    00004ec5: 	addq	$0x1e, 0x98(%rsp)
    00004ece: 	movl	0xc8(%rsp), %edi
    00004ed5: 	addq	$0x78, %r13
    00004ed9: 	addl	%edi, 0xa0(%rsp)
    00004ee0: 	movq	0x98(%rsp), %rax
    00004ee8: 	cmpl	%eax, 0x1b8(%rsp)
    00004eef: 	jg	.Ltmp368 # Offset: 20207
.Ltmp362:
    00004ef5: 	xorl	%eax, %eax
.Ltmp371:
    00004ef7: 	movq	0x288(%rsp), %rdi
    00004eff: 	movss	(%rdi,%rax,4), %xmm1
    00004f04: 	movq	0x38(%rsp), %rdi
    00004f09: 	movaps	%xmm1, %xmm2
    00004f0c: 	andps	DATAat0x24930(%rip), %xmm2
    00004f13: 	movaps	%xmm1, %xmm0
    00004f16: 	subss	(%rdi,%rax,4), %xmm0
    00004f1b: 	cvtss2sd	%xmm2, %xmm2
    00004f1f: 	comisd	DATAat0x24968(%rip), %xmm2
    00004f27: 	jbe	.Ltmp369 # Offset: 20263
    00004f29: 	divss	%xmm1, %xmm0
.Ltmp369:
    00004f2d: 	movsd	DATAat0x24970(%rip), %xmm4
    00004f35: 	cvtss2sd	%xmm0, %xmm0
    00004f39: 	andpd	DATAat0x24940(%rip), %xmm0
    00004f41: 	comisd	%xmm0, %xmm4
    00004f45: 	jbe	.Ltmp370 # Offset: 20293
    00004f4b: 	addq	$0x1, %rax
    00004f4f: 	cmpq	$0x320, %rax
    00004f55: 	jne	.Ltmp371 # Offset: 20309
.Ltmp514:
    00004f57: 	movq	0x38(%rsp), %rax
    00004f5c: 	movq	$0x0, (%rax)
    00004f63: 	movq	0xc0(%rsp), %rdi
    00004f6b: 	movq	$0x0, -0x10(%rdi)
    00004f73: 	movq	0xb8(%rsp), %rdi
    00004f7b: 	andq	$-0x8, %rdi
    00004f7f: 	subq	%rdi, %rax
    00004f82: 	movq	%rax, %rcx
    00004f85: 	xorl	%eax, %eax
    00004f87: 	addl	$0xc80, %ecx
    00004f8d: 	shrl	$0x3, %ecx
    00004f90: 	rep		stosq	%rax, %es:(%rdi)
    00004f93: 	movl	0x1b8(%rsp), %r13d
    00004f9b: 	testl	%r13d, %r13d
    00004f9e: 	jle	.Ltmp372 # Offset: 20382
    00004fa4: 	movl	0x54(%rsp), %edi
    00004fa8: 	testl	%edi, %edi
    00004faa: 	jle	.Ltmp372 # Offset: 20394
    00004fb0: 	leal	(%rdi,%rdi,2), %eax
    00004fb3: 	movslq	%edi, %r13
    00004fb6: 	movq	%r15, 0x70(%rsp)
    00004fbb: 	movq	%r14, %r15
    00004fbe: 	movq	$0x0, 0x78(%rsp)
    00004fc7: 	leal	(%rax,%rax,8), %eax
    00004fca: 	movq	%r13, %rbp
    00004fcd: 	movq	$0x0, 0x88(%rsp)
    00004fd9: 	cltq
    00004fdb: 	movq	%rax, 0x90(%rsp)
    00004fe3: 	movq	0x38(%rsp), %rax
    00004fe8: 	addq	$0x4, %rax
    00004fec: 	movq	%rax, 0x98(%rsp)
.Ltmp379:
    00004ff4: 	movq	0x88(%rsp), %rsi
    00004ffc: 	movl	0x1b8(%rsp), %edi
    00005003: 	movl	%esi, %eax
    00005005: 	addl	$0x1b, %eax
    00005008: 	cmpl	%edi, %eax
    0000500a: 	cmovgl	%edi, %eax
    0000500d: 	cmpl	%esi, %eax
    0000500f: 	jle	.Ltmp373 # Offset: 20495
    00005015: 	movq	%rsi, %rdi
    00005018: 	movq	0x38(%rsp), %rsi
    0000501d: 	movq	0x70(%rsp), %r14
    00005022: 	movq	%r15, %r13
    00005025: 	movq	$0x0, 0x60(%rsp)
    0000502e: 	subl	%edi, %eax
    00005030: 	subl	$0x1, %eax
    00005033: 	leaq	(%rsi,%rdi,4), %rsi
    00005037: 	addq	%rdi, %rax
    0000503a: 	movq	0x98(%rsp), %rdi
    00005042: 	movq	%rsi, 0x80(%rsp)
    0000504a: 	leaq	(%rdi,%rax,4), %rax
    0000504e: 	movq	%rax, 0x8(%rsp)
    00005053: 	nopl	(%rax,%rax) # Size: 5
.Ltmp378:
    00005058: 	movq	0x60(%rsp), %rdi
    0000505d: 	movl	0x54(%rsp), %eax
    00005061: 	leal	0x14(%rdi), %r8d
    00005065: 	movl	%edi, %r9d
    00005068: 	cmpl	%eax, %r8d
    0000506b: 	cmovgl	%eax, %r8d
    0000506f: 	movl	%r8d, %r12d
    00005072: 	subl	%edi, %r12d
    00005075: 	movl	%r12d, %eax
    00005078: 	movl	%r12d, %r11d
    0000507b: 	leal	-0x1(%r12), %r10d
    00005080: 	shrl	$0x2, %eax
    00005083: 	andl	$-0x4, %r11d
    00005087: 	leal	-0x1(%rax), %ecx
    0000508a: 	movl	%edi, %eax
    0000508c: 	addq	$0x1, %rcx
    00005090: 	addl	%r11d, %eax
    00005093: 	shlq	$0x4, %rcx
    00005097: 	cmpl	$0x2, %r10d
    0000509b: 	cmovbel	%edi, %eax
    0000509e: 	movq	0x70(%rsp), %rdi
    000050a3: 	movslq	%eax, %rbx
    000050a6: 	leaq	(%rdi,%rbx,4), %rsi
    000050aa: 	movq	%rsi, 0x10(%rsp)
    000050af: 	leal	0x1(%rax), %esi
    000050b2: 	addl	$0x2, %eax
    000050b5: 	movl	%eax, 0x30(%rsp)
    000050b9: 	cltq
    000050bb: 	movl	%esi, 0x18(%rsp)
    000050bf: 	movslq	%esi, %rsi
    000050c2: 	movq	%rax, 0x58(%rsp)
    000050c7: 	leaq	(%rdi,%rax,4), %rax
    000050cb: 	movq	%rsi, 0x20(%rsp)
    000050d0: 	leaq	(%rdi,%rsi,4), %rsi
    000050d4: 	movq	0x78(%rsp), %rdi
    000050d9: 	movq	%rax, 0x40(%rsp)
    000050de: 	movq	%rsi, 0x28(%rsp)
    000050e3: 	movq	0x80(%rsp), %rsi
    000050eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp377:
    000050f0: 	movss	(%rsi), %xmm1
    000050f4: 	cmpl	%r9d, %r8d
    000050f7: 	jle	.Ltmp374 # Offset: 20727
    000050fd: 	cmpl	$0x2, %r10d
    00005101: 	jbe	.Ltmp375 # Offset: 20737
    00005103: 	leaq	(%r13,%rdi,4), %rdx
    00005108: 	xorl	%eax, %eax
    0000510a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp376:
    00005110: 	movups	(%r14,%rax), %xmm0
    00005115: 	movups	(%rdx,%rax), %xmm4
    00005119: 	addq	$0x10, %rax
    0000511d: 	mulps	%xmm4, %xmm0
    00005120: 	addss	%xmm0, %xmm1
    00005124: 	movaps	%xmm0, %xmm2
    00005127: 	shufps	$0x55, %xmm0, %xmm2
    0000512b: 	addss	%xmm1, %xmm2
    0000512f: 	movaps	%xmm0, %xmm1
    00005132: 	unpckhps	%xmm0, %xmm1
    00005135: 	shufps	$0xff, %xmm0, %xmm0
    00005139: 	addss	%xmm2, %xmm1
    0000513d: 	addss	%xmm0, %xmm1
    00005141: 	cmpq	%rcx, %rax
    00005144: 	jne	.Ltmp376 # Offset: 20804
    00005146: 	cmpl	%r12d, %r11d
    00005149: 	je	.Ltmp374 # Offset: 20809
.Ltmp375:
    0000514b: 	leaq	(%rbx,%rdi), %rax
    0000514f: 	movss	(%r15,%rax,4), %xmm0
    00005155: 	movq	0x10(%rsp), %rax
    0000515a: 	mulss	(%rax), %xmm0
    0000515e: 	addss	%xmm0, %xmm1
    00005162: 	cmpl	%r8d, 0x18(%rsp)
    00005167: 	jge	.Ltmp374 # Offset: 20839
    00005169: 	movq	0x20(%rsp), %rax
    0000516e: 	addq	%rdi, %rax
    00005171: 	movss	(%r15,%rax,4), %xmm0
    00005177: 	movq	0x28(%rsp), %rax
    0000517c: 	mulss	(%rax), %xmm0
    00005180: 	addss	%xmm0, %xmm1
    00005184: 	cmpl	0x30(%rsp), %r8d
    00005189: 	jle	.Ltmp374 # Offset: 20873
    0000518b: 	movq	0x58(%rsp), %rax
    00005190: 	addq	%rdi, %rax
    00005193: 	movss	(%r15,%rax,4), %xmm0
    00005199: 	movq	0x40(%rsp), %rax
    0000519e: 	mulss	(%rax), %xmm0
    000051a2: 	addss	%xmm0, %xmm1
.Ltmp374:
    000051a6: 	movss	%xmm1, (%rsi)
    000051aa: 	addq	%rbp, %rdi
    000051ad: 	addq	$0x4, %rsi
    000051b1: 	cmpq	0x8(%rsp), %rsi
    000051b6: 	jne	.Ltmp377 # Offset: 20918
    000051bc: 	addq	$0x14, 0x60(%rsp)
    000051c2: 	addq	$0x50, %r14
    000051c6: 	movq	0x60(%rsp), %rax
    000051cb: 	addq	$0x50, %r13
    000051cf: 	cmpl	%eax, 0x54(%rsp)
    000051d3: 	jg	.Ltmp378 # Offset: 20947
.Ltmp373:
    000051d9: 	addq	$0x1b, 0x88(%rsp)
    000051e2: 	movq	0x90(%rsp), %rdi
    000051ea: 	movq	0x88(%rsp), %rax
    000051f2: 	addq	%rdi, 0x78(%rsp)
    000051f7: 	cmpl	%eax, 0x1b8(%rsp)
    000051fe: 	jg	.Ltmp379 # Offset: 20990
    00005204: 	movq	%r15, %r14
    00005207: 	movq	0x70(%rsp), %r15
.Ltmp372:
    0000520c: 	xorl	%eax, %eax
.Ltmp382:
    0000520e: 	movq	0x288(%rsp), %rdi
    00005216: 	movss	(%rdi,%rax,4), %xmm1
    0000521b: 	movq	0x38(%rsp), %rdi
    00005220: 	movaps	%xmm1, %xmm2
    00005223: 	andps	DATAat0x24930(%rip), %xmm2
    0000522a: 	movaps	%xmm1, %xmm0
    0000522d: 	subss	(%rdi,%rax,4), %xmm0
    00005232: 	cvtss2sd	%xmm2, %xmm2
    00005236: 	comisd	DATAat0x24968(%rip), %xmm2
    0000523e: 	jbe	.Ltmp380 # Offset: 21054
    00005240: 	divss	%xmm1, %xmm0
.Ltmp380:
    00005244: 	movsd	DATAat0x24970(%rip), %xmm3
    0000524c: 	cvtss2sd	%xmm0, %xmm0
    00005250: 	andpd	DATAat0x24940(%rip), %xmm0
    00005258: 	comisd	%xmm0, %xmm3
    0000525c: 	jbe	.Ltmp381 # Offset: 21084
    00005262: 	addq	$0x1, %rax
    00005266: 	cmpq	$0x320, %rax
    0000526c: 	jne	.Ltmp382 # Offset: 21100
.Ltmp513:
    0000526e: 	movq	0x38(%rsp), %rax
    00005273: 	movq	$0x0, (%rax)
    0000527a: 	movq	0xc0(%rsp), %rdi
    00005282: 	movq	$0x0, -0x10(%rdi)
    0000528a: 	movq	0xb8(%rsp), %rdi
    00005292: 	andq	$-0x8, %rdi
    00005296: 	subq	%rdi, %rax
    00005299: 	movq	%rax, %rcx
    0000529c: 	xorl	%eax, %eax
    0000529e: 	addl	$0xc80, %ecx
    000052a4: 	shrl	$0x3, %ecx
    000052a7: 	rep		stosq	%rax, %es:(%rdi)
    000052aa: 	movl	0x54(%rsp), %eax
    000052ae: 	testl	%eax, %eax
    000052b0: 	jle	.Ltmp383 # Offset: 21168
    000052b6: 	movl	0x1b8(%rsp), %eax
    000052bd: 	testl	%eax, %eax
    000052bf: 	jle	.Ltmp383 # Offset: 21183
    000052c5: 	movslq	0x54(%rsp), %r12
    000052ca: 	movq	0x38(%rsp), %rdi
    000052cf: 	subl	$0x1, %eax
    000052d2: 	movq	%r15, %rbx
    000052d5: 	movq	%r14, 0x70(%rsp)
    000052da: 	movq	$0x0, 0x60(%rsp)
    000052e3: 	leaq	(,%r12,4), %r13
    000052eb: 	leaq	0x4(%rdi,%rax,4), %rbp
    000052f0: 	movq	%r15, 0x78(%rsp)
.Ltmp388:
    000052f5: 	movq	0x60(%rsp), %rdi
    000052fa: 	movl	0x54(%rsp), %eax
    000052fe: 	movq	0x70(%rsp), %rdx
    00005303: 	leal	0x20(%rdi), %r8d
    00005307: 	movl	%edi, %r11d
    0000530a: 	cmpl	%eax, %r8d
    0000530d: 	cmovgl	%eax, %r8d
    00005311: 	movl	%r8d, %r10d
    00005314: 	subl	%edi, %r10d
    00005317: 	movl	%r10d, %eax
    0000531a: 	leal	-0x1(%r10), %r9d
    0000531e: 	shrl	$0x2, %eax
    00005321: 	leal	-0x1(%rax), %ecx
    00005324: 	movl	%r10d, %eax
    00005327: 	andl	$-0x4, %eax
    0000532a: 	addq	$0x1, %rcx
    0000532e: 	movl	%eax, 0x8(%rsp)
    00005332: 	shlq	$0x4, %rcx
    00005336: 	addl	%edi, %eax
    00005338: 	cmpl	$0x2, %r9d
    0000533c: 	cmovbel	%edi, %eax
    0000533f: 	movq	0x78(%rsp), %rdi
    00005344: 	movslq	%eax, %r15
    00005347: 	leaq	(%rdi,%r15,4), %rsi
    0000534b: 	movq	%rsi, 0x10(%rsp)
    00005350: 	leal	0x1(%rax), %esi
    00005353: 	addl	$0x2, %eax
    00005356: 	movl	%eax, 0x30(%rsp)
    0000535a: 	cltq
    0000535c: 	movl	%esi, 0x18(%rsp)
    00005360: 	movslq	%esi, %rsi
    00005363: 	movq	%rax, 0x58(%rsp)
    00005368: 	leaq	(%rdi,%rax,4), %rax
    0000536c: 	movq	%rsi, 0x20(%rsp)
    00005371: 	leaq	(%rdi,%rsi,4), %rsi
    00005375: 	xorl	%edi, %edi
    00005377: 	movq	%rax, 0x40(%rsp)
    0000537c: 	movq	%rsi, 0x28(%rsp)
    00005381: 	movq	0x38(%rsp), %rsi
    00005386: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp387:
    00005390: 	movss	(%rsi), %xmm1
    00005394: 	cmpl	%r11d, %r8d
    00005397: 	jle	.Ltmp384 # Offset: 21399
    0000539d: 	cmpl	$0x2, %r9d
    000053a1: 	jbe	.Ltmp385 # Offset: 21409
    000053a3: 	xorl	%eax, %eax
    000053a5: 	nopl	(%rax) # Size: 3
.Ltmp386:
    000053a8: 	movups	(%rbx,%rax), %xmm0
    000053ac: 	movups	(%rdx,%rax), %xmm4
    000053b0: 	addq	$0x10, %rax
    000053b4: 	mulps	%xmm4, %xmm0
    000053b7: 	addss	%xmm0, %xmm1
    000053bb: 	movaps	%xmm0, %xmm2
    000053be: 	shufps	$0x55, %xmm0, %xmm2
    000053c2: 	addss	%xmm1, %xmm2
    000053c6: 	movaps	%xmm0, %xmm1
    000053c9: 	unpckhps	%xmm0, %xmm1
    000053cc: 	shufps	$0xff, %xmm0, %xmm0
    000053d0: 	addss	%xmm2, %xmm1
    000053d4: 	addss	%xmm0, %xmm1
    000053d8: 	cmpq	%rcx, %rax
    000053db: 	jne	.Ltmp386 # Offset: 21467
    000053dd: 	cmpl	%r10d, 0x8(%rsp)
    000053e2: 	je	.Ltmp384 # Offset: 21474
.Ltmp385:
    000053e4: 	leaq	(%rdi,%r15), %rax
    000053e8: 	movss	(%r14,%rax,4), %xmm0
    000053ee: 	movq	0x10(%rsp), %rax
    000053f3: 	mulss	(%rax), %xmm0
    000053f7: 	addss	%xmm0, %xmm1
    000053fb: 	cmpl	%r8d, 0x18(%rsp)
    00005400: 	jge	.Ltmp384 # Offset: 21504
    00005402: 	movq	0x20(%rsp), %rax
    00005407: 	addq	%rdi, %rax
    0000540a: 	movss	(%r14,%rax,4), %xmm0
    00005410: 	movq	0x28(%rsp), %rax
    00005415: 	mulss	(%rax), %xmm0
    00005419: 	addss	%xmm0, %xmm1
    0000541d: 	cmpl	%r8d, 0x30(%rsp)
    00005422: 	jge	.Ltmp384 # Offset: 21538
    00005424: 	movq	0x58(%rsp), %rax
    00005429: 	addq	%rdi, %rax
    0000542c: 	movss	(%r14,%rax,4), %xmm0
    00005432: 	movq	0x40(%rsp), %rax
    00005437: 	mulss	(%rax), %xmm0
    0000543b: 	addss	%xmm0, %xmm1
.Ltmp384:
    0000543f: 	movss	%xmm1, (%rsi)
    00005443: 	addq	$0x4, %rsi
    00005447: 	addq	%r12, %rdi
    0000544a: 	addq	%r13, %rdx
    0000544d: 	cmpq	%rbp, %rsi
    00005450: 	jne	.Ltmp387 # Offset: 21584
    00005456: 	addq	$0x20, 0x60(%rsp)
    0000545c: 	subq	$-0x80, %rbx
    00005460: 	movq	0x60(%rsp), %rax
    00005465: 	subq	$-0x80, 0x70(%rsp)
    0000546b: 	cmpl	%eax, 0x54(%rsp)
    0000546f: 	jg	.Ltmp388 # Offset: 21615
    00005475: 	movq	0x78(%rsp), %r15
.Ltmp383:
    0000547a: 	xorl	%eax, %eax
.Ltmp391:
    0000547c: 	movq	0x288(%rsp), %rdi
    00005484: 	movss	(%rdi,%rax,4), %xmm1
    00005489: 	movq	0x38(%rsp), %rdi
    0000548e: 	movaps	%xmm1, %xmm2
    00005491: 	andps	DATAat0x24930(%rip), %xmm2
    00005498: 	movaps	%xmm1, %xmm0
    0000549b: 	subss	(%rdi,%rax,4), %xmm0
    000054a0: 	cvtss2sd	%xmm2, %xmm2
    000054a4: 	comisd	DATAat0x24968(%rip), %xmm2
    000054ac: 	jbe	.Ltmp389 # Offset: 21676
    000054ae: 	divss	%xmm1, %xmm0
.Ltmp389:
    000054b2: 	movsd	DATAat0x24970(%rip), %xmm4
    000054ba: 	cvtss2sd	%xmm0, %xmm0
    000054be: 	andpd	DATAat0x24940(%rip), %xmm0
    000054c6: 	comisd	%xmm0, %xmm4
    000054ca: 	jbe	.Ltmp390 # Offset: 21706
    000054d0: 	addq	$0x1, %rax
    000054d4: 	cmpq	$0x320, %rax
    000054da: 	jne	.Ltmp391 # Offset: 21722
.Ltmp512:
    000054dc: 	movq	0x38(%rsp), %rax
    000054e1: 	movq	$0x0, (%rax)
    000054e8: 	movq	0xc0(%rsp), %rdi
    000054f0: 	movq	$0x0, -0x10(%rdi)
    000054f8: 	movq	0xb8(%rsp), %rdi
    00005500: 	andq	$-0x8, %rdi
    00005504: 	subq	%rdi, %rax
    00005507: 	movq	%rax, %rcx
    0000550a: 	xorl	%eax, %eax
    0000550c: 	addl	$0xc80, %ecx
    00005512: 	shrl	$0x3, %ecx
    00005515: 	rep		stosq	%rax, %es:(%rdi)
    00005518: 	movl	0x54(%rsp), %eax
    0000551c: 	testl	%eax, %eax
    0000551e: 	jle	.Ltmp392 # Offset: 21790
    00005524: 	movl	0x1b8(%rsp), %r8d
    0000552c: 	testl	%r8d, %r8d
    0000552f: 	jle	.Ltmp392 # Offset: 21807
    00005535: 	movl	0x54(%rsp), %edi
    00005539: 	movq	%r15, 0x20(%rsp)
    0000553e: 	movq	$0x0, 0xa8(%rsp)
    0000554a: 	leal	(%rdi,%rdi,8), %eax
    0000554d: 	leal	(%rax,%rax,8), %eax
    00005550: 	movl	%eax, 0xc8(%rsp)
    00005557: 	movslq	%edi, %rax
    0000555a: 	movq	%rax, %r12
    0000555d: 	leaq	(,%rax,4), %r13
    00005565: 	leaq	(%rax,%rax,2), %rax
    00005569: 	leaq	(,%rax,4), %rbp
    00005571: 	movq	0x38(%rsp), %rax
    00005576: 	shlq	$0x4, %r12
    0000557a: 	movq	%r12, %r15
    0000557d: 	movq	%rbp, %rbx
    00005580: 	addq	$0x4, %rax
    00005584: 	movq	%rax, 0xd0(%rsp)
.Ltmp400:
    0000558c: 	movq	0xa8(%rsp), %rsi
    00005594: 	movl	0x54(%rsp), %edi
    00005598: 	movq	$0x0, 0x88(%rsp)
    000055a4: 	movl	$0x0, 0xb0(%rsp)
    000055af: 	movq	0x38(%rsp), %r12
    000055b4: 	movl	%esi, %eax
    000055b6: 	addl	$0x12c, %eax
    000055bb: 	cmpl	%edi, %eax
    000055bd: 	cmovgl	%edi, %eax
    000055c0: 	movl	%eax, 0x28(%rsp)
    000055c4: 	cmpl	%esi, %eax
    000055c6: 	jle	.Ltmp393 # Offset: 21958
    000055cc: 	nopl	(%rax) # Size: 4
.Ltmp399:
    000055d0: 	movq	0x88(%rsp), %rdi
    000055d8: 	movl	0x1b8(%rsp), %eax
    000055df: 	leal	0x51(%rdi), %r10d
    000055e3: 	cmpl	%eax, %r10d
    000055e6: 	cmovgl	%eax, %r10d
    000055ea: 	cmpl	%edi, %r10d
    000055ed: 	jle	.Ltmp394 # Offset: 21997
    000055f3: 	movl	%r10d, %r8d
    000055f6: 	movl	0x54(%rsp), %r9d
    000055fb: 	movq	%rdi, %rsi
    000055fe: 	movq	0x38(%rsp), %rbp
    00005603: 	subl	%edi, %r8d
    00005606: 	movslq	0xb0(%rsp), %rax
    0000560e: 	xorl	%edi, %edi
    00005610: 	addq	0xa8(%rsp), %rax
    00005618: 	movl	%r8d, %edx
    0000561b: 	leaq	(%r14,%rax,4), %rcx
    0000561f: 	movl	%r8d, 0x58(%rsp)
    00005624: 	leaq	-0x1(%rdx), %rax
    00005628: 	leaq	-0x1(%rdx,%rsi), %rdx
    0000562d: 	imulq	%r13, %rax
    00005631: 	testl	%r9d, %r9d
    00005634: 	cmovnsq	%rax, %rdi
    00005638: 	movq	%rdi, 0x18(%rsp)
    0000563d: 	leaq	(%rbp,%rdx,4), %rdi
    00005642: 	movq	%rdi, 0x10(%rsp)
    00005647: 	movl	$0x0, %edi
    0000564c: 	cmovnsq	%rdi, %rax
    00005650: 	movq	%rax, 0x8(%rsp)
    00005655: 	movl	%r8d, %eax
    00005658: 	shrl	$0x2, %eax
    0000565b: 	subl	$0x1, %eax
    0000565e: 	shlq	$0x4, %rax
    00005662: 	leaq	0x10(%r12,%rax), %rdi
    00005667: 	movl	%r8d, %eax
    0000566a: 	andl	$-0x4, %eax
    0000566d: 	movl	%eax, 0x40(%rsp)
    00005671: 	addl	%esi, %eax
    00005673: 	movslq	%eax, %rdx
    00005676: 	leaq	(%rbp,%rdx,4), %r11
    0000567b: 	movl	%r9d, %edx
    0000567e: 	imull	%eax, %edx
    00005681: 	movl	%edx, 0x78(%rsp)
    00005685: 	leal	0x1(%rax), %edx
    00005688: 	addl	$0x2, %eax
    0000568b: 	movl	%edx, 0x60(%rsp)
    0000568f: 	movslq	%edx, %rdx
    00005692: 	leaq	(%rbp,%rdx,4), %rbp
    00005697: 	movl	0x60(%rsp), %edx
    0000569b: 	movl	%eax, 0x70(%rsp)
    0000569f: 	cltq
    000056a1: 	imull	%r9d, %edx
    000056a5: 	movl	%edx, 0x80(%rsp)
    000056ac: 	movq	0x38(%rsp), %rdx
    000056b1: 	leaq	(%rdx,%rax,4), %rax
    000056b5: 	movq	%rax, 0x98(%rsp)
    000056bd: 	movl	0x70(%rsp), %eax
    000056c1: 	imull	%r9d, %eax
    000056c5: 	movl	%eax, 0x90(%rsp)
    000056cc: 	leaq	(%rdx,%rsi,4), %rax
    000056d0: 	movq	0xd0(%rsp), %rdx
    000056d8: 	movq	%rax, 0xa0(%rsp)
    000056e0: 	leal	-0x1(%r8), %eax
    000056e4: 	movl	%eax, 0x30(%rsp)
    000056e8: 	addq	%rsi, %rax
    000056eb: 	movq	0xa8(%rsp), %rsi
    000056f3: 	leaq	(%rdx,%rax,4), %r9
    000056f7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp398:
    00005700: 	movq	0x20(%rsp), %rax
    00005705: 	movq	0x8(%rsp), %rdx
    0000570a: 	movl	%esi, %r8d
    0000570d: 	movss	(%rax,%rsi,4), %xmm3
    00005712: 	movq	%rcx, %rax
    00005715: 	addq	%rcx, %rdx
    00005718: 	subq	%r14, %rax
    0000571b: 	cmpq	%rdx, 0x10(%rsp)
    00005720: 	setb	%dl
    00005723: 	addq	0x18(%rsp), %rax
    00005728: 	addq	%r14, %rax
    0000572b: 	cmpq	%rax, %r12
    0000572e: 	seta	%al
    00005731: 	orb	%dl, %al
    00005733: 	je	.Ltmp395 # Offset: 22323
    00005739: 	movaps	%xmm3, %xmm4
    0000573c: 	cmpl	$0x2, 0x30(%rsp)
    00005741: 	movq	%rcx, %rax
    00005744: 	movq	%r12, %rdx
    00005747: 	shufps	$0x0, %xmm4, %xmm4
    0000574b: 	jbe	.Ltmp395 # Offset: 22347
    00005751: 	nopl	(%rax) # Size: 7
.Ltmp396:
    00005758: 	movss	(%rax,%rbx), %xmm0
    0000575d: 	movss	(%rax,%r13,2), %xmm1
    00005763: 	addq	$0x10, %rdx
    00005767: 	movss	(%rax,%r13), %xmm2
    0000576d: 	movups	-0x10(%rdx), %xmm5
    00005771: 	unpcklps	%xmm0, %xmm1
    00005774: 	movss	(%rax), %xmm0
    00005778: 	addq	%r15, %rax
    0000577b: 	unpcklps	%xmm2, %xmm0
    0000577e: 	movlhps	%xmm1, %xmm0
    00005781: 	mulps	%xmm4, %xmm0
    00005784: 	addps	%xmm5, %xmm0
    00005787: 	movups	%xmm0, -0x10(%rdx)
    0000578b: 	cmpq	%rdi, %rdx
    0000578e: 	jne	.Ltmp396 # Offset: 22414
    00005790: 	movl	0x58(%rsp), %edx
    00005794: 	cmpl	%edx, 0x40(%rsp)
    00005798: 	je	.Ltmp397 # Offset: 22424
    0000579a: 	movl	0x78(%rsp), %eax
    0000579e: 	addl	%r8d, %eax
    000057a1: 	cltq
    000057a3: 	movss	(%r14,%rax,4), %xmm0
    000057a9: 	mulss	%xmm3, %xmm0
    000057ad: 	addss	(%r11), %xmm0
    000057b2: 	movss	%xmm0, (%r11)
    000057b7: 	cmpl	%r10d, 0x60(%rsp)
    000057bc: 	jge	.Ltmp397 # Offset: 22460
    000057be: 	movl	0x80(%rsp), %eax
    000057c5: 	addl	%r8d, %eax
    000057c8: 	cltq
    000057ca: 	movss	(%r14,%rax,4), %xmm0
    000057d0: 	mulss	%xmm3, %xmm0
    000057d4: 	addss	(%rbp), %xmm0
    000057d9: 	movss	%xmm0, (%rbp)
    000057de: 	cmpl	%r10d, 0x70(%rsp)
    000057e3: 	jge	.Ltmp397 # Offset: 22499
    000057e5: 	addl	0x90(%rsp), %r8d
    000057ed: 	movq	0x98(%rsp), %rax
    000057f5: 	movslq	%r8d, %r8
    000057f8: 	mulss	(%r14,%r8,4), %xmm3
    000057fe: 	addss	(%rax), %xmm3
    00005802: 	movss	%xmm3, (%rax)
.Ltmp397:
    00005806: 	addq	$0x1, %rsi
    0000580a: 	addq	$0x4, %rcx
    0000580e: 	cmpl	%esi, 0x28(%rsp)
    00005812: 	jg	.Ltmp398 # Offset: 22546
.Ltmp394:
    00005818: 	addq	$0x51, 0x88(%rsp)
    00005821: 	movl	0xc8(%rsp), %edi
    00005828: 	addq	$0x144, %r12
    0000582f: 	addl	%edi, 0xb0(%rsp)
    00005836: 	movq	0x88(%rsp), %rax
    0000583e: 	cmpl	%eax, 0x1b8(%rsp)
    00005845: 	jg	.Ltmp399 # Offset: 22597
.Ltmp393:
    0000584b: 	addq	$0x12c, 0xa8(%rsp)
    00005857: 	movq	0xa8(%rsp), %rax
    0000585f: 	cmpl	%eax, 0x54(%rsp)
    00005863: 	jg	.Ltmp400 # Offset: 22627
    00005869: 	movq	0x20(%rsp), %r15
.Ltmp392:
    0000586e: 	xorl	%eax, %eax
.Ltmp403:
    00005870: 	movq	0x288(%rsp), %rdi
    00005878: 	movss	(%rdi,%rax,4), %xmm1
    0000587d: 	movq	0x38(%rsp), %rdi
    00005882: 	movaps	%xmm1, %xmm2
    00005885: 	andps	DATAat0x24930(%rip), %xmm2
    0000588c: 	movaps	%xmm1, %xmm0
    0000588f: 	subss	(%rdi,%rax,4), %xmm0
    00005894: 	cvtss2sd	%xmm2, %xmm2
    00005898: 	comisd	DATAat0x24968(%rip), %xmm2
    000058a0: 	jbe	.Ltmp401 # Offset: 22688
    000058a2: 	divss	%xmm1, %xmm0
.Ltmp401:
    000058a6: 	movsd	DATAat0x24970(%rip), %xmm3
    000058ae: 	cvtss2sd	%xmm0, %xmm0
    000058b2: 	andpd	DATAat0x24940(%rip), %xmm0
    000058ba: 	comisd	%xmm0, %xmm3
    000058be: 	jbe	.Ltmp402 # Offset: 22718
    000058c4: 	addq	$0x1, %rax
    000058c8: 	cmpq	$0x320, %rax
    000058ce: 	jne	.Ltmp403 # Offset: 22734
.Ltmp511:
    000058d0: 	movq	0x38(%rsp), %rax
    000058d5: 	movq	$0x0, (%rax)
    000058dc: 	movq	0xc0(%rsp), %rdi
    000058e4: 	movq	$0x0, -0x10(%rdi)
    000058ec: 	movq	0xb8(%rsp), %rdi
    000058f4: 	andq	$-0x8, %rdi
    000058f8: 	subq	%rdi, %rax
    000058fb: 	movq	%rax, %rcx
    000058fe: 	xorl	%eax, %eax
    00005900: 	addl	$0xc80, %ecx
    00005906: 	shrl	$0x3, %ecx
    00005909: 	rep		stosq	%rax, %es:(%rdi)
    0000590c: 	movl	0x1b8(%rsp), %eax
    00005913: 	testl	%eax, %eax
    00005915: 	jle	.Ltmp404 # Offset: 22805
    0000591b: 	movl	0x54(%rsp), %edi
    0000591f: 	testl	%edi, %edi
    00005921: 	jle	.Ltmp404 # Offset: 22817
    00005927: 	leal	(,%rdi,4), %eax
    0000592e: 	leal	(%rdi,%rdi), %esi
    00005931: 	movl	%edi, 0x23c(%rsp)
    00005938: 	leal	(%rax,%rdi), %edx
    0000593b: 	cltq
    0000593d: 	movq	$0x0, 0x248(%rsp)
    00005949: 	movl	%edx, %ebx
    0000594b: 	movq	%rax, %r13
    0000594e: 	leaq	(,%rax,4), %r12
    00005956: 	movslq	%esi, %rdx
    00005959: 	shll	$0x4, %ebx
    0000595c: 	leaq	(%rax,%rax,2), %rax
    00005960: 	addl	%edi, %esi
    00005962: 	movl	%edx, 0x238(%rsp)
    00005969: 	movl	%ebx, 0x2c8(%rsp)
    00005970: 	movslq	%ebx, %rbx
    00005973: 	shlq	$0x4, %r13
    00005977: 	leaq	(,%rax,4), %rbp
    0000597f: 	movq	%rbx, 0x2a0(%rsp)
    00005987: 	movslq	%edi, %rbx
    0000598a: 	leaq	(,%rbx,4), %rax
    00005992: 	movl	%esi, 0x240(%rsp)
    00005999: 	movslq	%esi, %rsi
    0000599c: 	movq	%rax, 0xd8(%rsp)
    000059a4: 	movq	0x38(%rsp), %rax
    000059a9: 	movq	%rbx, 0x8(%rsp)
    000059ae: 	movq	%rax, 0x30(%rsp)
    000059b3: 	addq	$0x10, %rax
    000059b7: 	movq	%rbx, 0x250(%rsp)
    000059bf: 	movq	%rdx, 0x258(%rsp)
    000059c7: 	movq	%rsi, 0x260(%rsp)
    000059cf: 	movl	$0x4, 0x290(%rsp)
    000059da: 	movl	$0x0, 0x244(%rsp)
    000059e5: 	movq	%rax, 0x2d0(%rsp)
    000059ed: 	movq	%r15, 0x70(%rsp)
    000059f2: 	movq	$0x0, 0x188(%rsp)
    000059fe: 	movq	0x188(%rsp), %r11
.Ltmp412:
    00005a06: 	movl	0x1b8(%rsp), %edi
    00005a0d: 	movl	%r11d, %eax
    00005a10: 	movq	%r11, %rcx
    00005a13: 	movslq	0x23c(%rsp), %r9
    00005a1b: 	addl	$0x50, %eax
    00005a1e: 	movslq	0x240(%rsp), %r8
    00005a26: 	movl	%r11d, 0x80(%rsp)
    00005a2e: 	cmpl	%edi, %eax
    00005a30: 	cmovgl	%edi, %eax
    00005a33: 	shlq	$0x2, %r9
    00005a37: 	shlq	$0x2, %r8
    00005a3b: 	leal	-0x3(%rax), %esi
    00005a3e: 	movl	%eax, %r10d
    00005a41: 	leaq	(,%rdx,4), %rax
    00005a49: 	movl	%esi, 0x58(%rsp)
    00005a4d: 	movslq	0x244(%rsp), %rsi
    00005a55: 	movq	%rax, 0x60(%rsp)
    00005a5a: 	leaq	(%r14,%rsi,4), %rax
    00005a5e: 	movl	%r10d, 0x40(%rsp)
    00005a63: 	movq	%rax, 0x28(%rsp)
    00005a68: 	movl	$0xfffffffc, %eax
    00005a6d: 	subl	%r11d, %eax
    00005a70: 	addl	%r10d, %eax
    00005a73: 	movl	%eax, 0x88(%rsp)
    00005a7a: 	shrl	$0x2, %eax
    00005a7d: 	leal	0x1(%rax), %edx
    00005a80: 	movl	%eax, %r10d
    00005a83: 	movq	%rdx, %r15
    00005a86: 	movl	%edx, 0xd0(%rsp)
    00005a8d: 	leaq	-0x1(%rdx), %rax
    00005a91: 	leaq	-0x1(%rcx,%rdx,4), %rdx
    00005a96: 	movq	0x38(%rsp), %rcx
    00005a9b: 	imulq	%r12, %rax
    00005a9f: 	leaq	(%rcx,%rdx,4), %rbx
    00005aa3: 	xorl	%edx, %edx
    00005aa5: 	movq	%rbx, 0x20(%rsp)
    00005aaa: 	movl	0x54(%rsp), %ebx
    00005aae: 	testl	%ebx, %ebx
    00005ab0: 	cmovsq	%rax, %rdx
    00005ab4: 	movq	%rdx, 0x18(%rsp)
    00005ab9: 	movl	$0x0, %edx
    00005abe: 	cmovsq	%rdx, %rax
    00005ac2: 	movl	%r15d, %edx
    00005ac5: 	andl	$-0x4, %edx
    00005ac8: 	movq	%rax, 0x10(%rsp)
    00005acd: 	movl	%r15d, %eax
    00005ad0: 	movq	0x30(%rsp), %r15
    00005ad5: 	shrl	$0x2, %eax
    00005ad8: 	movl	%edx, 0xc8(%rsp)
    00005adf: 	subl	$0x1, %eax
    00005ae2: 	shlq	$0x6, %rax
    00005ae6: 	leaq	0x40(%r15,%rax), %r15
    00005aeb: 	leal	(%r11,%rdx,4), %eax
    00005aef: 	movq	%rcx, %r11
    00005af2: 	movslq	%eax, %rdx
    00005af5: 	shlq	$0x2, %rdx
    00005af9: 	leaq	(%rcx,%rdx), %rcx
    00005afd: 	movq	%rcx, 0x138(%rsp)
    00005b05: 	movl	%ebx, %ecx
    00005b07: 	imull	%eax, %ecx
    00005b0a: 	movl	%ecx, 0xf8(%rsp)
    00005b11: 	leaq	0x4(%r11,%rdx), %rcx
    00005b16: 	movq	%rcx, 0x120(%rsp)
    00005b1e: 	leal	0x1(%rax), %ecx
    00005b21: 	imull	%ebx, %ecx
    00005b24: 	movl	%ecx, 0x100(%rsp)
    00005b2b: 	leaq	0x8(%r11,%rdx), %rcx
    00005b30: 	leaq	0xc(%r11,%rdx), %rdx
    00005b35: 	movq	%rdx, 0x110(%rsp)
    00005b3d: 	leal	0x3(%rax), %edx
    00005b40: 	imull	%ebx, %edx
    00005b43: 	movq	%rcx, 0x128(%rsp)
    00005b4b: 	leal	0x2(%rax), %ecx
    00005b4e: 	imull	%ebx, %ecx
    00005b51: 	movl	%edx, 0x130(%rsp)
    00005b58: 	leal	0x4(%rax), %edx
    00005b5b: 	movl	%edx, %edi
    00005b5d: 	movl	%edx, 0x118(%rsp)
    00005b64: 	movslq	%edx, %rdx
    00005b67: 	shlq	$0x2, %rdx
    00005b6b: 	movl	%ecx, 0x108(%rsp)
    00005b72: 	leaq	(%r11,%rdx), %rcx
    00005b76: 	movq	%rcx, 0x148(%rsp)
    00005b7e: 	movl	%ebx, %ecx
    00005b80: 	imull	%edi, %ecx
    00005b83: 	movl	%ecx, 0x150(%rsp)
    00005b8a: 	leaq	0x4(%r11,%rdx), %rcx
    00005b8f: 	movq	%rcx, 0x158(%rsp)
    00005b97: 	leal	0x5(%rax), %ecx
    00005b9a: 	imull	%ebx, %ecx
    00005b9d: 	movl	%ecx, 0x160(%rsp)
    00005ba4: 	leaq	0x8(%r11,%rdx), %rcx
    00005ba9: 	movq	%rcx, 0x168(%rsp)
    00005bb1: 	leal	0x6(%rax), %ecx
    00005bb4: 	imull	%ebx, %ecx
    00005bb7: 	movl	%ecx, 0x170(%rsp)
    00005bbe: 	leaq	0xc(%r11,%rdx), %rcx
    00005bc3: 	leal	0x7(%rax), %edx
    00005bc6: 	imull	%ebx, %edx
    00005bc9: 	movq	%rcx, 0x178(%rsp)
    00005bd1: 	movl	%edx, 0x180(%rsp)
    00005bd8: 	leal	0x8(%rax), %edx
    00005bdb: 	movl	%edx, %edi
    00005bdd: 	movl	%edx, 0x190(%rsp)
    00005be4: 	movslq	%edx, %rdx
    00005be7: 	shlq	$0x2, %rdx
    00005beb: 	leaq	(%r11,%rdx), %rcx
    00005bef: 	movq	%rcx, 0x1d8(%rsp)
    00005bf7: 	movl	%ebx, %ecx
    00005bf9: 	imull	%edi, %ecx
    00005bfc: 	movl	%ecx, 0x1d0(%rsp)
    00005c03: 	leaq	0x4(%r11,%rdx), %rcx
    00005c08: 	movq	%rcx, 0x1c8(%rsp)
    00005c10: 	leal	0x9(%rax), %ecx
    00005c13: 	imull	%ebx, %ecx
    00005c16: 	movl	%ecx, 0x1e8(%rsp)
    00005c1d: 	leaq	0x8(%r11,%rdx), %rcx
    00005c22: 	movq	%rcx, 0x1c0(%rsp)
    00005c2a: 	leal	0xa(%rax), %ecx
    00005c2d: 	addl	$0xb, %eax
    00005c30: 	imull	%ebx, %ecx
    00005c33: 	imull	%ebx, %eax
    00005c36: 	movl	%ecx, 0x1bc(%rsp)
    00005c3d: 	leaq	0xc(%r11,%rdx), %rcx
    00005c42: 	movq	0x2d0(%rsp), %rdx
    00005c4a: 	movq	%rcx, 0x1b0(%rsp)
    00005c52: 	movq	0x188(%rsp), %rcx
    00005c5a: 	movl	%eax, 0x1a8(%rsp)
    00005c61: 	leaq	(%r11,%rcx,4), %rax
    00005c65: 	movq	%rax, 0x268(%rsp)
    00005c6d: 	movl	%r10d, %eax
    00005c70: 	leaq	(%rcx,%rax,4), %rax
    00005c74: 	leaq	(%rdx,%rax,4), %rax
    00005c78: 	movq	%rax, 0x218(%rsp)
    00005c80: 	movq	0x248(%rsp), %rax
    00005c88: 	subq	%rsi, %rax
    00005c8b: 	shlq	$0x2, %rax
    00005c8f: 	movq	%rax, 0x270(%rsp)
    00005c97: 	movq	0x250(%rsp), %rax
    00005c9f: 	subq	%rsi, %rax
    00005ca2: 	shlq	$0x2, %rax
    00005ca6: 	movq	%rax, 0x220(%rsp)
    00005cae: 	movq	0x258(%rsp), %rax
    00005cb6: 	subq	%rsi, %rax
    00005cb9: 	shlq	$0x2, %rax
    00005cbd: 	movq	%rax, 0x228(%rsp)
    00005cc5: 	movq	0x260(%rsp), %rax
    00005ccd: 	subq	%rsi, %rax
    00005cd0: 	movl	%ebx, %esi
    00005cd2: 	shlq	$0x2, %rax
    00005cd6: 	cmpl	%ecx, 0x58(%rsp)
    00005cda: 	movq	%rax, 0x230(%rsp)
    00005ce2: 	movl	0x290(%rsp), %eax
    00005ce9: 	leal	(%rax,%r10,4), %eax
    00005ced: 	movl	0x40(%rsp), %r10d
    00005cf2: 	cmovlel	%ecx, %eax
    00005cf5: 	subl	%eax, %r10d
    00005cf8: 	movl	%eax, %ecx
    00005cfa: 	movl	%eax, 0x78(%rsp)
    00005cfe: 	leal	-0x1(%r10), %eax
    00005d02: 	movl	%r10d, %edx
    00005d05: 	movl	%r10d, 0xf0(%rsp)
    00005d0d: 	cmpl	$0x2, %eax
    00005d10: 	seta	0xe0(%rsp)
    00005d18: 	imull	%ecx, %ebx
    00005d1b: 	movslq	%ecx, %rcx
    00005d1e: 	leaq	(%r11,%rcx,4), %rdi
    00005d22: 	movslq	%ebx, %rax
    00005d25: 	movl	%esi, %ebx
    00005d27: 	xorl	%esi, %esi
    00005d29: 	movq	%rax, 0xb0(%rsp)
    00005d31: 	leaq	-0x1(%rdx), %rax
    00005d35: 	leaq	-0x1(%rcx,%rdx), %rdx
    00005d3a: 	imulq	0xd8(%rsp), %rax
    00005d43: 	testl	%ebx, %ebx
    00005d45: 	cmovnsq	%rax, %rsi
    00005d49: 	movq	%rsi, 0xa8(%rsp)
    00005d51: 	movl	%ebx, %esi
    00005d53: 	movq	%rdi, 0x90(%rsp)
    00005d5b: 	leaq	(%r11,%rdx,4), %rdi
    00005d5f: 	movl	$0x0, %edx
    00005d64: 	cmovnsq	%rdx, %rax
    00005d68: 	movq	%rdi, 0xa0(%rsp)
    00005d70: 	movq	%rax, 0x98(%rsp)
    00005d78: 	movl	%r10d, %eax
    00005d7b: 	andl	$-0x4, %eax
    00005d7e: 	movl	%eax, 0xe8(%rsp)
    00005d85: 	addl	%ecx, %eax
    00005d87: 	imull	%eax, %ebx
    00005d8a: 	leal	0x1(%rax), %r10d
    00005d8e: 	movslq	%eax, %rdx
    00005d91: 	leaq	(%r11,%rdx,4), %rdi
    00005d95: 	movslq	%r10d, %rdx
    00005d98: 	movl	%r10d, 0x198(%rsp)
    00005da0: 	movq	%rdi, 0x140(%rsp)
    00005da8: 	leaq	(%r11,%rdx,4), %rdi
    00005dac: 	leal	0x2(%rax), %edx
    00005daf: 	movl	%ebx, 0x1a0(%rsp)
    00005db6: 	movl	%esi, %ebx
    00005db8: 	movslq	%edx, %rax
    00005dbb: 	imull	%r10d, %ebx
    00005dbf: 	movl	%edx, 0x1ec(%rsp)
    00005dc6: 	leaq	(%r11,%rax,4), %rax
    00005dca: 	movq	%rax, 0x200(%rsp)
    00005dd2: 	movq	%rdi, 0x1f0(%rsp)
    00005dda: 	movq	0x60(%rsp), %rdi
    00005ddf: 	movl	%ebx, 0x1e0(%rsp)
    00005de6: 	movl	%esi, %ebx
    00005de8: 	imull	%edx, %esi
    00005deb: 	leal	0x1(%rcx), %edx
    00005dee: 	movslq	%edx, %rax
    00005df1: 	movl	%edx, 0x278(%rsp)
    00005df8: 	leaq	(%r11,%rax,4), %rax
    00005dfc: 	movl	%esi, 0x1f8(%rsp)
    00005e03: 	movl	%ebx, %esi
    00005e05: 	imull	%edx, %ebx
    00005e08: 	leal	0x2(%rcx), %edx
    00005e0b: 	movq	%rax, 0x280(%rsp)
    00005e13: 	movslq	%edx, %rax
    00005e16: 	addl	$0x3, %ecx
    00005e19: 	leaq	(%r11,%rax,4), %rax
    00005e1d: 	movl	%edx, 0x2b8(%rsp)
    00005e24: 	movl	%ebx, 0x294(%rsp)
    00005e2b: 	movl	%esi, %ebx
    00005e2d: 	imull	%ecx, %esi
    00005e30: 	imull	%edx, %ebx
    00005e33: 	movq	%rax, 0x298(%rsp)
    00005e3b: 	movslq	%ecx, %rax
    00005e3e: 	leaq	(%r11,%rax,4), %rax
    00005e42: 	movl	%ecx, 0x2c0(%rsp)
    00005e49: 	movq	%rax, 0x2b0(%rsp)
    00005e51: 	movl	%ebx, 0x2e8(%rsp)
    00005e58: 	movl	%esi, 0x2a8(%rsp)
    00005e5f: 	xorl	%esi, %esi
    00005e61: 	nopl	(%rax) # Size: 7
.Ltmp410:
    00005e68: 	movq	0x70(%rsp), %rax
    00005e6d: 	movl	0x80(%rsp), %ebx
    00005e74: 	movl	%esi, %ecx
    00005e76: 	movss	(%rax,%rsi,4), %xmm4
    00005e7b: 	cmpl	%ebx, 0x58(%rsp)
    00005e7f: 	jle	.Ltmp405 # Offset: 24191
    00005e85: 	movq	0x10(%rsp), %rdx
    00005e8a: 	movq	0x30(%rsp), %rbx
    00005e8f: 	movq	0x28(%rsp), %r10
    00005e94: 	leaq	(%rdi,%rdx), %rax
    00005e98: 	addq	%r14, %rax
    00005e9b: 	subq	%r14, %r10
    00005e9e: 	cmpq	%rax, %rbx
    00005ea1: 	movq	0x18(%rsp), %rax
    00005ea6: 	seta	%r11b
    00005eaa: 	addq	%rdi, %rax
    00005ead: 	addq	%r14, %rax
    00005eb0: 	cmpq	%rax, 0x20(%rsp)
    00005eb5: 	setb	%al
    00005eb8: 	orl	%eax, %r11d
    00005ebb: 	movq	%rdx, %rax
    00005ebe: 	addq	%r9, %rax
    00005ec1: 	addq	%r14, %rax
    00005ec4: 	cmpq	%rax, %rbx
    00005ec7: 	movq	0x18(%rsp), %rax
    00005ecc: 	seta	%dl
    00005ecf: 	addq	%r9, %rax
    00005ed2: 	addq	%r14, %rax
    00005ed5: 	cmpq	%rax, 0x20(%rsp)
    00005eda: 	setb	%al
    00005edd: 	orl	%edx, %eax
    00005edf: 	andl	%r11d, %eax
    00005ee2: 	cmpl	$0xb, 0x88(%rsp)
    00005eea: 	movq	0x10(%rsp), %r11
    00005eef: 	seta	%dl
    00005ef2: 	andl	%edx, %eax
    00005ef4: 	leaq	(%r11,%r8), %rdx
    00005ef8: 	movq	0x18(%rsp), %r11
    00005efd: 	addq	%r14, %rdx
    00005f00: 	cmpq	%rdx, %rbx
    00005f03: 	seta	%dl
    00005f06: 	addq	%r8, %r11
    00005f09: 	addq	%r14, %r11
    00005f0c: 	cmpq	%r11, 0x20(%rsp)
    00005f11: 	setb	%r11b
    00005f15: 	orl	%r11d, %edx
    00005f18: 	testb	%dl, %al
    00005f1a: 	je	.Ltmp406 # Offset: 24346
    00005f20: 	movq	0x18(%rsp), %rax
    00005f25: 	movq	0x10(%rsp), %r11
    00005f2a: 	addq	%r10, %rax
    00005f2d: 	leaq	(%r10,%r11), %rdx
    00005f31: 	addq	%r14, %rax
    00005f34: 	cmpq	%rax, 0x20(%rsp)
    00005f39: 	setb	%al
    00005f3c: 	addq	%r14, %rdx
    00005f3f: 	cmpq	%rdx, %rbx
    00005f42: 	seta	%dl
    00005f45: 	orb	%al, %dl
    00005f47: 	je	.Ltmp406 # Offset: 24391
    00005f4d: 	movq	0x28(%rsp), %rdx
    00005f52: 	movq	%rbx, %rax
    00005f55: 	movaps	%xmm4, %xmm3
    00005f58: 	leaq	(%r9,%r14), %rbx
    00005f5c: 	leaq	(%rdi,%r14), %r11
    00005f60: 	leaq	(%r14,%r8), %r10
    00005f64: 	shufps	$0x0, %xmm3, %xmm3
    00005f68: 	nopl	(%rax,%rax) # Size: 8
.Ltmp407:
    00005f70: 	movups	(%rax), %xmm5
    00005f73: 	movups	0x10(%rax), %xmm2
    00005f77: 	addq	$0x40, %rax
    00005f7b: 	movups	-0x20(%rax), %xmm6
    00005f7f: 	movss	(%rdx,%rbp), %xmm1
    00005f84: 	movaps	%xmm5, %xmm7
    00005f87: 	movss	(%rdx,%r12,2), %xmm0
    00005f8d: 	shufps	$0xdd, %xmm2, %xmm5
    00005f91: 	movss	(%rbx,%r12), %xmm9
    00005f97: 	shufps	$0x88, %xmm2, %xmm7
    00005f9b: 	movups	-0x10(%rax), %xmm2
    00005f9f: 	movaps	%xmm6, %xmm8
    00005fa3: 	movss	(%r11,%r12), %xmm10
    00005fa9: 	unpcklps	%xmm1, %xmm0
    00005fac: 	movss	(%rdx), %xmm1
    00005fb0: 	shufps	$0x88, %xmm2, %xmm8
    00005fb5: 	shufps	$0xdd, %xmm2, %xmm6
    00005fb9: 	movss	(%rdx,%r12), %xmm2
    00005fbf: 	addq	%r13, %rdx
    00005fc2: 	unpcklps	%xmm2, %xmm1
    00005fc5: 	movss	(%rbx,%rbp), %xmm2
    00005fca: 	movlhps	%xmm0, %xmm1
    00005fcd: 	movaps	%xmm7, %xmm0
    00005fd0: 	shufps	$0xdd, %xmm8, %xmm7
    00005fd5: 	mulps	%xmm3, %xmm1
    00005fd8: 	shufps	$0x88, %xmm8, %xmm0
    00005fdd: 	movss	(%r10,%r12,2), %xmm8
    00005fe3: 	addps	%xmm0, %xmm1
    00005fe6: 	movss	(%rbx,%r12,2), %xmm0
    00005fec: 	unpcklps	%xmm2, %xmm0
    00005fef: 	movss	(%rbx), %xmm2
    00005ff3: 	addq	%r13, %rbx
    00005ff6: 	unpcklps	%xmm9, %xmm2
    00005ffa: 	movss	(%r11,%r12,2), %xmm9
    00006000: 	movlhps	%xmm0, %xmm2
    00006003: 	movaps	%xmm5, %xmm0
    00006006: 	shufps	$0xdd, %xmm6, %xmm5
    0000600a: 	mulps	%xmm3, %xmm2
    0000600d: 	shufps	$0x88, %xmm6, %xmm0
    00006011: 	addps	%xmm0, %xmm2
    00006014: 	movss	(%r11,%rbp), %xmm0
    0000601a: 	unpcklps	%xmm0, %xmm9
    0000601e: 	movss	(%r11), %xmm0
    00006023: 	addq	%r13, %r11
    00006026: 	movaps	%xmm2, %xmm6
    00006029: 	unpcklps	%xmm10, %xmm0
    0000602d: 	movlhps	%xmm9, %xmm0
    00006031: 	movss	(%r10,%r12), %xmm9
    00006037: 	mulps	%xmm3, %xmm0
    0000603a: 	addps	%xmm0, %xmm7
    0000603d: 	movss	(%r10,%rbp), %xmm0
    00006043: 	unpcklps	%xmm0, %xmm8
    00006047: 	movss	(%r10), %xmm0
    0000604c: 	addq	%r13, %r10
    0000604f: 	unpcklps	%xmm9, %xmm0
    00006053: 	movlhps	%xmm8, %xmm0
    00006057: 	mulps	%xmm3, %xmm0
    0000605a: 	addps	%xmm5, %xmm0
    0000605d: 	movaps	%xmm1, %xmm5
    00006060: 	unpckhps	%xmm7, %xmm1
    00006063: 	unpcklps	%xmm7, %xmm5
    00006066: 	unpcklps	%xmm0, %xmm6
    00006069: 	unpckhps	%xmm0, %xmm2
    0000606c: 	movaps	%xmm5, %xmm0
    0000606f: 	unpcklps	%xmm6, %xmm0
    00006072: 	unpckhps	%xmm6, %xmm5
    00006075: 	movups	%xmm0, -0x40(%rax)
    00006079: 	movaps	%xmm1, %xmm0
    0000607c: 	unpckhps	%xmm2, %xmm1
    0000607f: 	unpcklps	%xmm2, %xmm0
    00006082: 	movups	%xmm5, -0x30(%rax)
    00006086: 	movups	%xmm0, -0x20(%rax)
    0000608a: 	movups	%xmm1, -0x10(%rax)
    0000608e: 	cmpq	%r15, %rax
    00006091: 	jne	.Ltmp407 # Offset: 24721
    00006097: 	movl	0xd0(%rsp), %ebx
    0000609e: 	cmpl	%ebx, 0xc8(%rsp)
    000060a5: 	je	.Ltmp405 # Offset: 24741
    000060ab: 	movl	0xf8(%rsp), %eax
    000060b2: 	movl	0x58(%rsp), %ebx
    000060b6: 	addl	%ecx, %eax
    000060b8: 	cltq
    000060ba: 	movss	(%r14,%rax,4), %xmm0
    000060c0: 	movq	0x138(%rsp), %rax
    000060c8: 	mulss	%xmm4, %xmm0
    000060cc: 	addss	(%rax), %xmm0
    000060d0: 	movss	%xmm0, (%rax)
    000060d4: 	movl	0x100(%rsp), %eax
    000060db: 	addl	%ecx, %eax
    000060dd: 	cltq
    000060df: 	movss	(%r14,%rax,4), %xmm0
    000060e5: 	movq	0x120(%rsp), %rax
    000060ed: 	mulss	%xmm4, %xmm0
    000060f1: 	addss	(%rax), %xmm0
    000060f5: 	movss	%xmm0, (%rax)
    000060f9: 	movl	0x108(%rsp), %eax
    00006100: 	addl	%ecx, %eax
    00006102: 	cltq
    00006104: 	movss	(%r14,%rax,4), %xmm0
    0000610a: 	movq	0x128(%rsp), %rax
    00006112: 	mulss	%xmm4, %xmm0
    00006116: 	addss	(%rax), %xmm0
    0000611a: 	movss	%xmm0, (%rax)
    0000611e: 	movl	0x130(%rsp), %eax
    00006125: 	addl	%ecx, %eax
    00006127: 	cltq
    00006129: 	movss	(%r14,%rax,4), %xmm0
    0000612f: 	movq	0x110(%rsp), %rax
    00006137: 	mulss	%xmm4, %xmm0
    0000613b: 	addss	(%rax), %xmm0
    0000613f: 	movss	%xmm0, (%rax)
    00006143: 	cmpl	%ebx, 0x118(%rsp)
    0000614a: 	jge	.Ltmp405 # Offset: 24906
    00006150: 	movl	0x150(%rsp), %eax
    00006157: 	addl	%ecx, %eax
    00006159: 	cltq
    0000615b: 	movss	(%r14,%rax,4), %xmm0
    00006161: 	movq	0x148(%rsp), %rax
    00006169: 	mulss	%xmm4, %xmm0
    0000616d: 	addss	(%rax), %xmm0
    00006171: 	movss	%xmm0, (%rax)
    00006175: 	movl	0x160(%rsp), %eax
    0000617c: 	addl	%ecx, %eax
    0000617e: 	cltq
    00006180: 	movss	(%r14,%rax,4), %xmm0
    00006186: 	movq	0x158(%rsp), %rax
    0000618e: 	mulss	%xmm4, %xmm0
    00006192: 	addss	(%rax), %xmm0
    00006196: 	movss	%xmm0, (%rax)
    0000619a: 	movl	0x170(%rsp), %eax
    000061a1: 	addl	%ecx, %eax
    000061a3: 	cltq
    000061a5: 	movss	(%r14,%rax,4), %xmm0
    000061ab: 	movq	0x168(%rsp), %rax
    000061b3: 	mulss	%xmm4, %xmm0
    000061b7: 	addss	(%rax), %xmm0
    000061bb: 	movss	%xmm0, (%rax)
    000061bf: 	movl	0x180(%rsp), %eax
    000061c6: 	addl	%ecx, %eax
    000061c8: 	cltq
    000061ca: 	movss	(%r14,%rax,4), %xmm0
    000061d0: 	movq	0x178(%rsp), %rax
    000061d8: 	mulss	%xmm4, %xmm0
    000061dc: 	addss	(%rax), %xmm0
    000061e0: 	movss	%xmm0, (%rax)
    000061e4: 	cmpl	%ebx, 0x190(%rsp)
    000061eb: 	jge	.Ltmp405 # Offset: 25067
    000061f1: 	movl	0x1d0(%rsp), %eax
    000061f8: 	addl	%ecx, %eax
    000061fa: 	cltq
    000061fc: 	movss	(%r14,%rax,4), %xmm0
    00006202: 	movq	0x1d8(%rsp), %rax
    0000620a: 	mulss	%xmm4, %xmm0
    0000620e: 	addss	(%rax), %xmm0
    00006212: 	movss	%xmm0, (%rax)
    00006216: 	movl	0x1e8(%rsp), %eax
    0000621d: 	addl	%ecx, %eax
    0000621f: 	cltq
    00006221: 	movss	(%r14,%rax,4), %xmm0
    00006227: 	movq	0x1c8(%rsp), %rax
    0000622f: 	mulss	%xmm4, %xmm0
    00006233: 	addss	(%rax), %xmm0
    00006237: 	movss	%xmm0, (%rax)
    0000623b: 	movl	0x1bc(%rsp), %eax
    00006242: 	addl	%ecx, %eax
    00006244: 	cltq
    00006246: 	movss	(%r14,%rax,4), %xmm0
    0000624c: 	movq	0x1c0(%rsp), %rax
    00006254: 	mulss	%xmm4, %xmm0
    00006258: 	addss	(%rax), %xmm0
    0000625c: 	movss	%xmm0, (%rax)
    00006260: 	movl	0x1a8(%rsp), %eax
    00006267: 	addl	%ecx, %eax
    00006269: 	cltq
    0000626b: 	movss	(%r14,%rax,4), %xmm0
    00006271: 	movq	0x1b0(%rsp), %rax
    00006279: 	mulss	%xmm4, %xmm0
    0000627d: 	addss	(%rax), %xmm0
    00006281: 	movss	%xmm0, (%rax)
.Ltmp405:
    00006285: 	movl	0x78(%rsp), %ebx
    00006289: 	cmpl	%ebx, 0x40(%rsp)
    0000628d: 	jle	.Ltmp408 # Offset: 25229
    00006293: 	movq	0xb0(%rsp), %rax
    0000629b: 	movq	0x98(%rsp), %rbx
    000062a3: 	leaq	(%rsi,%rax), %r10
    000062a7: 	leaq	(,%r10,4), %rax
    000062af: 	leaq	(%rbx,%rax), %rdx
    000062b3: 	movq	0xa8(%rsp), %rbx
    000062bb: 	addq	%r14, %rdx
    000062be: 	cmpq	%rdx, 0xa0(%rsp)
    000062c6: 	leaq	(%rbx,%rax), %rdx
    000062ca: 	movq	0x90(%rsp), %rbx
    000062d2: 	setb	%r11b
    000062d6: 	addq	%r14, %rdx
    000062d9: 	cmpq	%rdx, %rbx
    000062dc: 	seta	%dl
    000062df: 	orb	%r11b, %dl
    000062e2: 	je	.Ltmp409 # Offset: 25314
    000062e8: 	cmpb	$0x0, 0xe0(%rsp)
    000062f0: 	je	.Ltmp409 # Offset: 25328
    000062f6: 	movq	0xd8(%rsp), %r11
    000062fe: 	addq	%r14, %rax
    00006301: 	movups	(%rbx), %xmm3
    00006304: 	leaq	(%rax,%r11), %rdx
    00006308: 	movaps	%xmm3, 0x60(%rsp)
    0000630d: 	leaq	(%rdx,%r11), %r10
    00006311: 	movss	(%rdx), %xmm2
    00006315: 	movss	(%r10,%r11), %xmm0
    0000631b: 	movss	(%r10), %xmm1
    00006320: 	unpcklps	%xmm0, %xmm1
    00006323: 	movss	(%rax), %xmm0
    00006327: 	unpcklps	%xmm2, %xmm0
    0000632a: 	movlhps	%xmm1, %xmm0
    0000632d: 	movaps	%xmm4, %xmm1
    00006330: 	shufps	$0x0, %xmm1, %xmm1
    00006334: 	mulps	%xmm1, %xmm0
    00006337: 	addps	%xmm3, %xmm0
    0000633a: 	movups	%xmm0, (%rbx)
    0000633d: 	movl	0xf0(%rsp), %ebx
    00006344: 	cmpl	%ebx, 0xe8(%rsp)
    0000634b: 	je	.Ltmp408 # Offset: 25419
    00006351: 	movl	0x1a0(%rsp), %eax
    00006358: 	movl	0x40(%rsp), %ebx
    0000635c: 	addl	%ecx, %eax
    0000635e: 	cltq
    00006360: 	movss	(%r14,%rax,4), %xmm0
    00006366: 	movq	0x140(%rsp), %rax
    0000636e: 	mulss	%xmm4, %xmm0
    00006372: 	addss	(%rax), %xmm0
    00006376: 	movss	%xmm0, (%rax)
    0000637a: 	cmpl	%ebx, 0x198(%rsp)
    00006381: 	jge	.Ltmp408 # Offset: 25473
    00006383: 	movl	0x1e0(%rsp), %eax
    0000638a: 	addl	%ecx, %eax
    0000638c: 	cltq
    0000638e: 	movss	(%r14,%rax,4), %xmm0
    00006394: 	movq	0x1f0(%rsp), %rax
    0000639c: 	mulss	%xmm4, %xmm0
    000063a0: 	addss	(%rax), %xmm0
    000063a4: 	movss	%xmm0, (%rax)
    000063a8: 	cmpl	%ebx, 0x1ec(%rsp)
    000063af: 	jge	.Ltmp408 # Offset: 25519
    000063b1: 	movl	0x1f8(%rsp), %eax
    000063b8: 	addl	%ecx, %eax
    000063ba: 	cltq
    000063bc: 	mulss	(%r14,%rax,4), %xmm4
    000063c2: 	movq	0x200(%rsp), %rax
    000063ca: 	addss	(%rax), %xmm4
    000063ce: 	movss	%xmm4, (%rax)
.Ltmp408:
    000063d2: 	addq	$0x1, %rsi
    000063d6: 	addq	$0x4, %r9
    000063da: 	addq	$0x4, %rdi
    000063de: 	addq	$0x4, %r8
    000063e2: 	addq	$0x4, 0x28(%rsp)
    000063e8: 	cmpq	0x8(%rsp), %rsi
    000063ed: 	jne	.Ltmp410 # Offset: 25581
    000063f3: 	movl	0x2c8(%rsp), %eax
    000063fa: 	addl	%eax, 0x238(%rsp)
    00006401: 	addl	%eax, 0x23c(%rsp)
    00006408: 	movl	0x238(%rsp), %edi
    0000640f: 	addl	%eax, 0x240(%rsp)
    00006416: 	addl	%eax, 0x244(%rsp)
    0000641d: 	movq	0x2a0(%rsp), %rax
    00006425: 	addq	$0x50, 0x188(%rsp)
    0000642e: 	addq	%rax, 0x248(%rsp)
    00006436: 	addq	%rax, 0x250(%rsp)
    0000643e: 	addq	%rax, 0x258(%rsp)
    00006446: 	addq	%rax, 0x260(%rsp)
    0000644e: 	movq	0x188(%rsp), %rax
    00006456: 	addl	$0x50, 0x290(%rsp)
    0000645e: 	addq	$0x140, 0x30(%rsp)
    00006467: 	cmpl	%eax, 0x1b8(%rsp)
    0000646e: 	jle	.Ltmp411 # Offset: 25710
    00006474: 	movslq	%edi, %rdx
    00006477: 	movq	%rax, %r11
    0000647a: 	jmp	.Ltmp412 # Offset: 25722
    0000647f: 	nop # Size: 1
.Ltmp395:
    00006480: 	movq	0xa0(%rsp), %rax
    00006488: 	movq	%rcx, %rdx
    0000648b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp413:
    00006490: 	movss	(%rdx), %xmm0
    00006494: 	addq	$0x4, %rax
    00006498: 	addq	%r13, %rdx
    0000649b: 	mulss	%xmm3, %xmm0
    0000649f: 	addss	-0x4(%rax), %xmm0
    000064a4: 	movss	%xmm0, -0x4(%rax)
    000064a9: 	cmpq	%r9, %rax
    000064ac: 	jne	.Ltmp413 # Offset: 25772
    000064ae: 	jmp	.Ltmp397 # Offset: 25774
.Ltmp406:
    000064b3: 	movq	0x28(%rsp), %rdx
    000064b8: 	movq	0x270(%rsp), %rax
    000064c0: 	movq	%r9, 0x208(%rsp)
    000064c8: 	movq	0x220(%rsp), %rbx
    000064d0: 	movq	0x228(%rsp), %r11
    000064d8: 	movq	%rsi, 0x210(%rsp)
    000064e0: 	addq	%rdx, %rax
    000064e3: 	movq	0x230(%rsp), %r10
    000064eb: 	movq	0x218(%rsp), %rsi
    000064f3: 	movq	%rax, 0x60(%rsp)
    000064f8: 	movq	0x60(%rsp), %r9
    000064fd: 	addq	%rdx, %rbx
    00006500: 	addq	%rdx, %r11
    00006503: 	movq	0x268(%rsp), %rax
    0000650b: 	addq	%rdx, %r10
    0000650e: 	xorl	%edx, %edx
.Ltmp414:
    00006510: 	movss	(%r9,%rdx), %xmm0
    00006516: 	addq	$0x10, %rax
    0000651a: 	mulss	%xmm4, %xmm0
    0000651e: 	addss	-0x10(%rax), %xmm0
    00006523: 	movss	%xmm0, -0x10(%rax)
    00006528: 	movss	(%rbx,%rdx), %xmm0
    0000652d: 	mulss	%xmm4, %xmm0
    00006531: 	addss	-0xc(%rax), %xmm0
    00006536: 	movss	%xmm0, -0xc(%rax)
    0000653b: 	movss	(%r11,%rdx), %xmm0
    00006541: 	mulss	%xmm4, %xmm0
    00006545: 	addss	-0x8(%rax), %xmm0
    0000654a: 	movss	%xmm0, -0x8(%rax)
    0000654f: 	movss	(%r10,%rdx), %xmm0
    00006555: 	addq	%r12, %rdx
    00006558: 	mulss	%xmm4, %xmm0
    0000655c: 	addss	-0x4(%rax), %xmm0
    00006561: 	movss	%xmm0, -0x4(%rax)
    00006566: 	cmpq	%rax, %rsi
    00006569: 	jne	.Ltmp414 # Offset: 25961
    0000656b: 	movq	0x208(%rsp), %r9
    00006573: 	movq	0x210(%rsp), %rsi
    0000657b: 	jmp	.Ltmp405 # Offset: 25979
.Ltmp364:
    00006580: 	movq	0xa8(%rsp), %rax
    00006588: 	movq	%rsi, %rdx
    0000658b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp415:
    00006590: 	movss	(%rdx), %xmm0
    00006594: 	addq	$0x4, %rax
    00006598: 	addq	%r12, %rdx
    0000659b: 	mulss	%xmm3, %xmm0
    0000659f: 	addss	-0x4(%rax), %xmm0
    000065a4: 	movss	%xmm0, -0x4(%rax)
    000065a9: 	cmpq	%r9, %rax
    000065ac: 	jne	.Ltmp415 # Offset: 26028
    000065ae: 	jmp	.Ltmp366 # Offset: 26030
.Ltmp409:
    000065b3: 	movss	(%r14,%r10,4), %xmm0
    000065b9: 	movq	0x90(%rsp), %rax
    000065c1: 	movl	0x40(%rsp), %ebx
    000065c5: 	mulss	%xmm4, %xmm0
    000065c9: 	addss	(%rax), %xmm0
    000065cd: 	movss	%xmm0, (%rax)
    000065d1: 	cmpl	%ebx, 0x278(%rsp)
    000065d8: 	jge	.Ltmp408 # Offset: 26072
    000065de: 	movl	0x294(%rsp), %eax
    000065e5: 	addl	%ecx, %eax
    000065e7: 	cltq
    000065e9: 	movss	(%r14,%rax,4), %xmm0
    000065ef: 	movq	0x280(%rsp), %rax
    000065f7: 	mulss	%xmm4, %xmm0
    000065fb: 	addss	(%rax), %xmm0
    000065ff: 	movss	%xmm0, (%rax)
    00006603: 	cmpl	%ebx, 0x2b8(%rsp)
    0000660a: 	jge	.Ltmp408 # Offset: 26122
    00006610: 	movl	0x2e8(%rsp), %eax
    00006617: 	addl	%ecx, %eax
    00006619: 	cltq
    0000661b: 	movss	(%r14,%rax,4), %xmm0
    00006621: 	movq	0x298(%rsp), %rax
    00006629: 	mulss	%xmm4, %xmm0
    0000662d: 	addss	(%rax), %xmm0
    00006631: 	movss	%xmm0, (%rax)
    00006635: 	cmpl	%ebx, 0x2c0(%rsp)
    0000663c: 	jge	.Ltmp408 # Offset: 26172
    00006642: 	movl	0x2a8(%rsp), %eax
    00006649: 	addl	%ecx, %eax
    0000664b: 	cltq
    0000664d: 	mulss	(%r14,%rax,4), %xmm4
    00006653: 	movq	0x2b0(%rsp), %rax
    0000665b: 	addss	(%rax), %xmm4
    0000665f: 	movss	%xmm4, (%rax)
    00006663: 	jmp	.Ltmp408 # Offset: 26211
.Ltmp342:
    00006668: 	movq	%r12, %rdi
    0000666b: 	movq	0x38(%rsp), %rax
    00006670: 	movq	0x90(%rsp), %rdx
    00006678: 	movq	0xb0(%rsp), %r8
    00006680: 	movq	0xc8(%rsp), %r9
    00006688: 	movq	0x8(%rsp), %rcx
    0000668d: 	movq	0xd8(%rsp), %rbp
    00006695: 	movq	0xe0(%rsp), %r12
.Ltmp416:
    0000669d: 	movss	(%rdx,%r13), %xmm1
    000066a3: 	mulss	(%r10), %xmm1
    000066a8: 	addq	$0x10, %rax
    000066ac: 	addss	-0x10(%rax), %xmm1
    000066b1: 	movq	0x10(%rsp), %rsi
    000066b6: 	movss	%xmm1, -0x10(%rax)
    000066bb: 	movss	(%rdx,%r14), %xmm0
    000066c1: 	mulss	(%r10), %xmm0
    000066c6: 	addss	-0xc(%rax), %xmm0
    000066cb: 	movss	%xmm0, -0xc(%rax)
    000066d0: 	movss	(%rdx,%r11), %xmm4
    000066d6: 	mulss	(%r10), %xmm4
    000066db: 	addss	-0x8(%rax), %xmm4
    000066e0: 	movss	%xmm4, -0x8(%rax)
    000066e5: 	movss	(%rdx,%rbx), %xmm3
    000066ea: 	mulss	(%r10), %xmm3
    000066ef: 	addss	-0x4(%rax), %xmm3
    000066f4: 	movss	%xmm3, -0x4(%rax)
    000066f9: 	movss	(%rdx,%r12), %xmm2
    000066ff: 	mulss	0x4(%r10), %xmm2
    00006705: 	addss	%xmm1, %xmm2
    00006709: 	movss	%xmm2, -0x10(%rax)
    0000670e: 	movss	(%rdx,%rsi), %xmm1
    00006713: 	mulss	0x4(%r10), %xmm1
    00006719: 	movq	0x18(%rsp), %rsi
    0000671e: 	addss	%xmm0, %xmm1
    00006722: 	movss	%xmm1, -0xc(%rax)
    00006727: 	movss	(%rdx,%rsi), %xmm0
    0000672c: 	mulss	0x4(%r10), %xmm0
    00006732: 	movq	0x20(%rsp), %rsi
    00006737: 	addss	%xmm4, %xmm0
    0000673b: 	movss	%xmm0, -0x8(%rax)
    00006740: 	movss	(%rdx,%rsi), %xmm4
    00006745: 	mulss	0x4(%r10), %xmm4
    0000674b: 	addss	%xmm3, %xmm4
    0000674f: 	movss	%xmm4, -0x4(%rax)
    00006754: 	movss	(%rdx,%r15), %xmm3
    0000675a: 	mulss	0x8(%r10), %xmm3
    00006760: 	movq	0x28(%rsp), %rsi
    00006765: 	addss	%xmm2, %xmm3
    00006769: 	movss	%xmm3, -0x10(%rax)
    0000676e: 	movss	(%rdx,%rsi), %xmm2
    00006773: 	mulss	0x8(%r10), %xmm2
    00006779: 	movq	0x30(%rsp), %rsi
    0000677e: 	addss	%xmm1, %xmm2
    00006782: 	movss	%xmm2, -0xc(%rax)
    00006787: 	movss	(%rdx,%rsi), %xmm1
    0000678c: 	mulss	0x8(%r10), %xmm1
    00006792: 	movq	0x40(%rsp), %rsi
    00006797: 	addss	%xmm0, %xmm1
    0000679b: 	movss	%xmm1, -0x8(%rax)
    000067a0: 	movss	(%rdx,%rsi), %xmm0
    000067a5: 	mulss	0x8(%r10), %xmm0
    000067ab: 	movq	0x98(%rsp), %rsi
    000067b3: 	addss	%xmm4, %xmm0
    000067b7: 	movss	%xmm0, -0x4(%rax)
    000067bc: 	movss	(%rdx,%rbp), %xmm4
    000067c1: 	mulss	0xc(%r10), %xmm4
    000067c7: 	addss	%xmm4, %xmm3
    000067cb: 	movss	%xmm3, -0x10(%rax)
    000067d0: 	movss	(%rdx,%rsi), %xmm3
    000067d5: 	mulss	0xc(%r10), %xmm3
    000067db: 	addss	%xmm3, %xmm2
    000067df: 	movss	%xmm2, -0xc(%rax)
    000067e4: 	movss	(%rdx,%r8), %xmm2
    000067ea: 	mulss	0xc(%r10), %xmm2
    000067f0: 	addss	%xmm2, %xmm1
    000067f4: 	movss	%xmm1, -0x8(%rax)
    000067f9: 	movss	(%rdx,%r9), %xmm1
    000067ff: 	addq	%rcx, %rdx
    00006802: 	mulss	0xc(%r10), %xmm1
    00006808: 	addss	%xmm1, %xmm0
    0000680c: 	movss	%xmm0, -0x4(%rax)
    00006811: 	cmpq	0xe8(%rsp), %rax
    00006819: 	jne	.Ltmp416 # Offset: 26649
    0000681f: 	movq	%rcx, 0x8(%rsp)
    00006824: 	movq	%rdi, %r12
    00006827: 	jmp	.Ltmp344 # Offset: 26663
.Ltmp347:
    0000682c: 	movss	(%rax,%r13), %xmm0
    00006832: 	mulss	(%r10), %xmm0
    00006837: 	addss	(%rcx), %xmm0
    0000683b: 	movq	0x60(%rsp), %r8
    00006840: 	movl	0x1b8(%rsp), %edi
    00006847: 	movss	%xmm0, (%rcx)
    0000684b: 	movss	(%rax,%rsi), %xmm1
    00006850: 	mulss	0x4(%r10), %xmm1
    00006856: 	addss	%xmm0, %xmm1
    0000685a: 	movss	%xmm1, (%rcx)
    0000685e: 	movss	(%rax,%r14), %xmm0
    00006864: 	mulss	0x8(%r10), %xmm0
    0000686a: 	addss	%xmm1, %xmm0
    0000686e: 	movss	%xmm0, (%rcx)
    00006872: 	movss	(%rax,%r15), %xmm1
    00006878: 	mulss	0xc(%r10), %xmm1
    0000687e: 	addq	%r8, %rax
    00006881: 	addss	%xmm1, %xmm0
    00006885: 	movss	%xmm0, (%rcx)
    00006889: 	leal	0x1(%rdx), %ecx
    0000688c: 	cmpl	%ecx, %edi
    0000688e: 	jle	.Ltmp346 # Offset: 26766
    00006894: 	movq	0x38(%rsp), %rbx
    00006899: 	movss	(%rax,%r13), %xmm0
    0000689f: 	mulss	(%r10), %xmm0
    000068a4: 	leaq	0x4(%rbx,%r11), %rcx
    000068a9: 	addss	(%rcx), %xmm0
    000068ad: 	movss	%xmm0, (%rcx)
    000068b1: 	movss	(%rax,%rsi), %xmm1
    000068b6: 	mulss	0x4(%r10), %xmm1
    000068bc: 	addss	%xmm0, %xmm1
    000068c0: 	movss	%xmm1, (%rcx)
    000068c4: 	movss	(%rax,%r14), %xmm0
    000068ca: 	mulss	0x8(%r10), %xmm0
    000068d0: 	addss	%xmm1, %xmm0
    000068d4: 	movss	%xmm0, (%rcx)
    000068d8: 	movss	(%rax,%r15), %xmm1
    000068de: 	mulss	0xc(%r10), %xmm1
    000068e4: 	addq	%r8, %rax
    000068e7: 	addss	%xmm1, %xmm0
    000068eb: 	movss	%xmm0, (%rcx)
    000068ef: 	leal	0x2(%rdx), %ecx
    000068f2: 	cmpl	%ecx, %edi
    000068f4: 	jle	.Ltmp346 # Offset: 26868
    000068fa: 	movss	(%rax,%r13), %xmm0
    00006900: 	leaq	0x8(%rbx,%r11), %rcx
    00006905: 	mulss	(%r10), %xmm0
    0000690a: 	addl	$0x3, %edx
    0000690d: 	addss	(%rcx), %xmm0
    00006911: 	movss	%xmm0, (%rcx)
    00006915: 	movss	(%rax,%rsi), %xmm1
    0000691a: 	mulss	0x4(%r10), %xmm1
    00006920: 	addss	%xmm0, %xmm1
    00006924: 	movss	%xmm1, (%rcx)
    00006928: 	movss	(%rax,%r14), %xmm0
    0000692e: 	mulss	0x8(%r10), %xmm0
    00006934: 	addss	%xmm1, %xmm0
    00006938: 	movss	%xmm0, (%rcx)
    0000693c: 	movss	(%rax,%r15), %xmm1
    00006942: 	mulss	0xc(%r10), %xmm1
    00006948: 	addq	%r8, %rax
    0000694b: 	addss	%xmm1, %xmm0
    0000694f: 	movss	%xmm0, (%rcx)
    00006953: 	cmpl	%edx, %edi
    00006955: 	jle	.Ltmp346 # Offset: 26965
    0000695b: 	movss	(%rax,%r13), %xmm0
    00006961: 	leaq	0xc(%rbx,%r11), %rdx
    00006966: 	mulss	(%r10), %xmm0
    0000696b: 	addss	(%rdx), %xmm0
    0000696f: 	movss	%xmm0, (%rdx)
    00006973: 	movss	(%rax,%rsi), %xmm1
    00006978: 	mulss	0x4(%r10), %xmm1
    0000697e: 	addss	%xmm0, %xmm1
    00006982: 	movss	%xmm1, (%rdx)
    00006986: 	movss	(%rax,%r14), %xmm0
    0000698c: 	mulss	0x8(%r10), %xmm0
    00006992: 	addss	%xmm1, %xmm0
    00006996: 	movss	%xmm0, (%rdx)
    0000699a: 	movss	(%rax,%r15), %xmm1
    000069a0: 	mulss	0xc(%r10), %xmm1
    000069a6: 	addss	%xmm1, %xmm0
    000069aa: 	movss	%xmm0, (%rdx)
    000069ae: 	jmp	.Ltmp346 # Offset: 27054
.Ltmp325:
    000069b3: 	movss	(%rax,%r13), %xmm0
    000069b9: 	mulss	(%r10), %xmm0
    000069be: 	addss	(%rcx), %xmm0
    000069c2: 	movq	0x60(%rsp), %r8
    000069c7: 	movl	0x1b8(%rsp), %edi
    000069ce: 	movss	%xmm0, (%rcx)
    000069d2: 	movss	(%rax,%rsi), %xmm1
    000069d7: 	mulss	0x4(%r10), %xmm1
    000069dd: 	addss	%xmm0, %xmm1
    000069e1: 	movss	%xmm1, (%rcx)
    000069e5: 	movss	(%rax,%r14), %xmm0
    000069eb: 	mulss	0x8(%r10), %xmm0
    000069f1: 	addss	%xmm1, %xmm0
    000069f5: 	movss	%xmm0, (%rcx)
    000069f9: 	movss	(%rax,%r15), %xmm1
    000069ff: 	mulss	0xc(%r10), %xmm1
    00006a05: 	addq	%r8, %rax
    00006a08: 	addss	%xmm1, %xmm0
    00006a0c: 	movss	%xmm0, (%rcx)
    00006a10: 	leal	0x1(%rdx), %ecx
    00006a13: 	cmpl	%ecx, %edi
    00006a15: 	jle	.Ltmp324 # Offset: 27157
    00006a1b: 	movq	0x38(%rsp), %rbx
    00006a20: 	movss	(%rax,%r13), %xmm0
    00006a26: 	mulss	(%r10), %xmm0
    00006a2b: 	leaq	0x4(%rbx,%r11), %rcx
    00006a30: 	addss	(%rcx), %xmm0
    00006a34: 	movss	%xmm0, (%rcx)
    00006a38: 	movss	(%rax,%rsi), %xmm1
    00006a3d: 	mulss	0x4(%r10), %xmm1
    00006a43: 	addss	%xmm0, %xmm1
    00006a47: 	movss	%xmm1, (%rcx)
    00006a4b: 	movss	(%rax,%r14), %xmm0
    00006a51: 	mulss	0x8(%r10), %xmm0
    00006a57: 	addss	%xmm1, %xmm0
    00006a5b: 	movss	%xmm0, (%rcx)
    00006a5f: 	movss	(%rax,%r15), %xmm1
    00006a65: 	mulss	0xc(%r10), %xmm1
    00006a6b: 	addq	%r8, %rax
    00006a6e: 	addss	%xmm1, %xmm0
    00006a72: 	movss	%xmm0, (%rcx)
    00006a76: 	leal	0x2(%rdx), %ecx
    00006a79: 	cmpl	%ecx, %edi
    00006a7b: 	jle	.Ltmp324 # Offset: 27259
    00006a81: 	movss	(%rax,%r13), %xmm0
    00006a87: 	leaq	0x8(%rbx,%r11), %rcx
    00006a8c: 	mulss	(%r10), %xmm0
    00006a91: 	addl	$0x3, %edx
    00006a94: 	addss	(%rcx), %xmm0
    00006a98: 	movss	%xmm0, (%rcx)
    00006a9c: 	movss	(%rax,%rsi), %xmm1
    00006aa1: 	mulss	0x4(%r10), %xmm1
    00006aa7: 	addss	%xmm0, %xmm1
    00006aab: 	movss	%xmm1, (%rcx)
    00006aaf: 	movss	(%rax,%r14), %xmm0
    00006ab5: 	mulss	0x8(%r10), %xmm0
    00006abb: 	addss	%xmm1, %xmm0
    00006abf: 	movss	%xmm0, (%rcx)
    00006ac3: 	movss	(%rax,%r15), %xmm1
    00006ac9: 	mulss	0xc(%r10), %xmm1
    00006acf: 	addq	%r8, %rax
    00006ad2: 	addss	%xmm1, %xmm0
    00006ad6: 	movss	%xmm0, (%rcx)
    00006ada: 	cmpl	%edx, %edi
    00006adc: 	jle	.Ltmp324 # Offset: 27356
    00006ae2: 	movss	(%rax,%r13), %xmm0
    00006ae8: 	leaq	0xc(%rbx,%r11), %rdx
    00006aed: 	mulss	(%r10), %xmm0
    00006af2: 	addss	(%rdx), %xmm0
    00006af6: 	movss	%xmm0, (%rdx)
    00006afa: 	movss	(%rax,%rsi), %xmm1
    00006aff: 	mulss	0x4(%r10), %xmm1
    00006b05: 	addss	%xmm0, %xmm1
    00006b09: 	movss	%xmm1, (%rdx)
    00006b0d: 	movss	(%rax,%r14), %xmm0
    00006b13: 	mulss	0x8(%r10), %xmm0
    00006b19: 	addss	%xmm1, %xmm0
    00006b1d: 	movss	%xmm0, (%rdx)
    00006b21: 	movss	(%rax,%r15), %xmm1
    00006b27: 	mulss	0xc(%r10), %xmm1
    00006b2d: 	addss	%xmm1, %xmm0
    00006b31: 	movss	%xmm0, (%rdx)
    00006b35: 	jmp	.Ltmp324 # Offset: 27445
.Ltmp320:
    00006b3a: 	movq	%r12, %rdi
    00006b3d: 	movq	0x38(%rsp), %rax
    00006b42: 	movq	0x88(%rsp), %rdx
    00006b4a: 	movq	0xa8(%rsp), %r8
    00006b52: 	movq	0xb0(%rsp), %r9
    00006b5a: 	movq	0x8(%rsp), %rcx
    00006b5f: 	movq	0xe0(%rsp), %rbp
    00006b67: 	movq	0xe8(%rsp), %r12
.Ltmp417:
    00006b6f: 	movss	(%rdx,%r13), %xmm0
    00006b75: 	mulss	(%r10), %xmm0
    00006b7a: 	addq	$0x10, %rax
    00006b7e: 	addss	-0x10(%rax), %xmm0
    00006b83: 	movq	0x10(%rsp), %rsi
    00006b88: 	movss	%xmm0, -0x10(%rax)
    00006b8d: 	movss	(%rdx,%rbp), %xmm1
    00006b92: 	mulss	0x4(%r10), %xmm1
    00006b98: 	addss	%xmm0, %xmm1
    00006b9c: 	movss	%xmm1, -0x10(%rax)
    00006ba1: 	movss	(%rdx,%r12), %xmm0
    00006ba7: 	mulss	0x8(%r10), %xmm0
    00006bad: 	addss	%xmm1, %xmm0
    00006bb1: 	movss	%xmm0, -0x10(%rax)
    00006bb6: 	movss	(%rdx,%r15), %xmm1
    00006bbc: 	mulss	0xc(%r10), %xmm1
    00006bc2: 	addss	%xmm1, %xmm0
    00006bc6: 	movss	%xmm0, -0x10(%rax)
    00006bcb: 	movss	(%rdx,%r14), %xmm0
    00006bd1: 	mulss	(%r10), %xmm0
    00006bd6: 	addss	-0xc(%rax), %xmm0
    00006bdb: 	movss	%xmm0, -0xc(%rax)
    00006be0: 	movss	(%rdx,%rsi), %xmm1
    00006be5: 	mulss	0x4(%r10), %xmm1
    00006beb: 	movq	0x18(%rsp), %rsi
    00006bf0: 	addss	%xmm0, %xmm1
    00006bf4: 	movss	%xmm1, -0xc(%rax)
    00006bf9: 	movss	(%rdx,%rsi), %xmm0
    00006bfe: 	mulss	0x8(%r10), %xmm0
    00006c04: 	movq	0x20(%rsp), %rsi
    00006c09: 	addss	%xmm1, %xmm0
    00006c0d: 	movss	%xmm0, -0xc(%rax)
    00006c12: 	movss	(%rdx,%rsi), %xmm1
    00006c17: 	mulss	0xc(%r10), %xmm1
    00006c1d: 	addss	%xmm1, %xmm0
    00006c21: 	movss	%xmm0, -0xc(%rax)
    00006c26: 	movss	(%rdx,%r11), %xmm0
    00006c2c: 	mulss	(%r10), %xmm0
    00006c31: 	addss	-0x8(%rax), %xmm0
    00006c36: 	movss	%xmm0, -0x8(%rax)
    00006c3b: 	movq	0x28(%rsp), %rsi
    00006c40: 	movss	(%rdx,%rsi), %xmm1
    00006c45: 	mulss	0x4(%r10), %xmm1
    00006c4b: 	movq	0x30(%rsp), %rsi
    00006c50: 	addss	%xmm0, %xmm1
    00006c54: 	movss	%xmm1, -0x8(%rax)
    00006c59: 	movss	(%rdx,%rsi), %xmm0
    00006c5e: 	mulss	0x8(%r10), %xmm0
    00006c64: 	movq	0x40(%rsp), %rsi
    00006c69: 	addss	%xmm1, %xmm0
    00006c6d: 	movss	%xmm0, -0x8(%rax)
    00006c72: 	movss	(%rdx,%rsi), %xmm1
    00006c77: 	mulss	0xc(%r10), %xmm1
    00006c7d: 	movq	0x90(%rsp), %rsi
    00006c85: 	addss	%xmm1, %xmm0
    00006c89: 	movss	%xmm0, -0x8(%rax)
    00006c8e: 	movss	(%rdx,%rbx), %xmm0
    00006c93: 	mulss	(%r10), %xmm0
    00006c98: 	addss	-0x4(%rax), %xmm0
    00006c9d: 	movss	%xmm0, -0x4(%rax)
    00006ca2: 	movss	(%rdx,%rsi), %xmm1
    00006ca7: 	mulss	0x4(%r10), %xmm1
    00006cad: 	addss	%xmm0, %xmm1
    00006cb1: 	movss	%xmm1, -0x4(%rax)
    00006cb6: 	movss	(%rdx,%r8), %xmm0
    00006cbc: 	mulss	0x8(%r10), %xmm0
    00006cc2: 	addss	%xmm1, %xmm0
    00006cc6: 	movss	%xmm0, -0x4(%rax)
    00006ccb: 	movss	(%rdx,%r9), %xmm1
    00006cd1: 	addq	%rcx, %rdx
    00006cd4: 	mulss	0xc(%r10), %xmm1
    00006cda: 	addss	%xmm1, %xmm0
    00006cde: 	movss	%xmm0, -0x4(%rax)
    00006ce3: 	cmpq	%rax, 0xd0(%rsp)
    00006ceb: 	jne	.Ltmp417 # Offset: 27883
    00006cf1: 	movq	%rcx, 0x8(%rsp)
    00006cf6: 	movq	%rdi, %r12
    00006cf9: 	jmp	.Ltmp322 # Offset: 27897
.Ltmp309:
    00006cfe: 	movq	0x20(%rsp), %r10
    00006d03: 	movq	0x8(%rsp), %rcx
    00006d08: 	leaq	(%r14,%rbp), %rdx
    00006d0c: 	movq	%r9, %rax
    00006d0f: 	movq	0x1a0(%rsp), %rsi
.Ltmp418:
    00006d17: 	movss	(%rdx), %xmm0
    00006d1b: 	addq	$0x10, %rax
    00006d1f: 	mulss	%xmm3, %xmm0
    00006d23: 	addss	-0x10(%rax), %xmm0
    00006d28: 	movss	%xmm0, -0x10(%rax)
    00006d2d: 	movss	(%rdx,%rcx,4), %xmm0
    00006d32: 	mulss	%xmm3, %xmm0
    00006d36: 	addss	-0xc(%rax), %xmm0
    00006d3b: 	movss	%xmm0, -0xc(%rax)
    00006d40: 	movss	(%rdx,%rcx,8), %xmm0
    00006d45: 	mulss	%xmm3, %xmm0
    00006d49: 	addss	-0x8(%rax), %xmm0
    00006d4e: 	movss	%xmm0, -0x8(%rax)
    00006d53: 	movss	(%rdx,%rsi), %xmm0
    00006d58: 	addq	%r12, %rdx
    00006d5b: 	mulss	%xmm3, %xmm0
    00006d5f: 	addss	-0x4(%rax), %xmm0
    00006d64: 	movss	%xmm0, -0x4(%rax)
    00006d69: 	cmpq	%rax, 0x80(%rsp)
    00006d71: 	jne	.Ltmp418 # Offset: 28017
    00006d73: 	movq	%r10, 0x20(%rsp)
    00006d78: 	jmp	.Ltmp311 # Offset: 28024
.Ltmp313:
    00006d7d: 	movq	0x1a8(%rsp), %rdi
    00006d85: 	movl	0x1b8(%rsp), %r10d
    00006d8d: 	leal	0x1(%rax), %edx
    00006d90: 	movss	(%r14,%rdi,4), %xmm0
    00006d96: 	mulss	%xmm3, %xmm0
    00006d9a: 	addss	(%rcx), %xmm0
    00006d9e: 	movss	%xmm0, (%rcx)
    00006da2: 	cmpl	%edx, %r10d
    00006da5: 	jle	.Ltmp312 # Offset: 28069
    00006dab: 	movl	0x140(%rsp), %edi
    00006db2: 	leaq	0x4(%r9,%rsi), %rdx
    00006db7: 	addl	%r15d, %edi
    00006dba: 	leal	(%rdi,%r8), %ecx
    00006dbe: 	movslq	%ecx, %rcx
    00006dc1: 	movss	(%r14,%rcx,4), %xmm0
    00006dc7: 	mulss	%xmm3, %xmm0
    00006dcb: 	addss	(%rdx), %xmm0
    00006dcf: 	movss	%xmm0, (%rdx)
    00006dd3: 	leal	0x2(%rax), %edx
    00006dd6: 	cmpl	%edx, %r10d
    00006dd9: 	jle	.Ltmp312 # Offset: 28121
    00006ddf: 	addl	%r15d, %edi
    00006de2: 	leaq	0x8(%r9,%rsi), %rdx
    00006de7: 	addl	$0x3, %eax
    00006dea: 	leal	(%rdi,%r8), %ecx
    00006dee: 	movslq	%ecx, %rcx
    00006df1: 	movss	(%r14,%rcx,4), %xmm0
    00006df7: 	mulss	%xmm3, %xmm0
    00006dfb: 	addss	(%rdx), %xmm0
    00006dff: 	movss	%xmm0, (%rdx)
    00006e03: 	cmpl	%eax, %r10d
    00006e06: 	jle	.Ltmp312 # Offset: 28166
    00006e0c: 	leaq	0xc(%r9,%rsi), %rax
    00006e11: 	jmp	.Ltmp419 # Offset: 28177
.Ltmp270:
    00006e16: 	movq	0x38(%rsp), %rax
    00006e1b: 	movq	%rbx, %rdx
.Ltmp420:
    00006e1e: 	movss	(%rdx), %xmm0
    00006e22: 	addq	$0x4, %rax
    00006e26: 	addq	%rcx, %rdx
    00006e29: 	mulss	%xmm3, %xmm0
    00006e2d: 	addss	-0x4(%rax), %xmm0
    00006e32: 	movss	%xmm0, -0x4(%rax)
    00006e37: 	cmpq	0x10(%rsp), %rax
    00006e3c: 	jne	.Ltmp420 # Offset: 28220
    00006e3e: 	jmp	.Ltmp272 # Offset: 28222
.Ltmp244:
    00006e43: 	movq	%r13, %rdi
    00006e46: 	movq	%rsi, %rax
.Ltmp421:
    00006e49: 	movss	(%rdi), %xmm0
    00006e4d: 	mulss	(%rcx), %xmm0
    00006e51: 	addq	$0x4, %rax
    00006e55: 	addq	%rdx, %rdi
    00006e58: 	addss	-0x4(%rax), %xmm0
    00006e5d: 	movss	%xmm0, -0x4(%rax)
    00006e62: 	cmpq	0x18(%rsp), %rax
    00006e67: 	jne	.Ltmp421 # Offset: 28263
    00006e69: 	jmp	.Ltmp247 # Offset: 28265
.Ltmp278:
    00006e6e: 	pxor	%xmm3, %xmm3
    00006e72: 	xorl	%esi, %esi
    00006e74: 	movaps	%xmm3, %xmm4
    00006e77: 	movaps	%xmm3, %xmm5
    00006e7a: 	jmp	.Ltmp422 # Offset: 28282
.Ltmp319:
    00006e7f: 	leaq	0x10(%r10), %rdi
    00006e83: 	movq	0x88(%rsp), %rax
    00006e8b: 	xorl	%edx, %edx
    00006e8d: 	movq	%rdi, 0xa0(%rsp)
    00006e95: 	jmp	.Ltmp423 # Offset: 28309
.Ltmp308:
    00006e9a: 	xorl	%eax, %eax
    00006e9c: 	jmp	.Ltmp424 # Offset: 28316
.Ltmp411:
    00006ea1: 	movq	0x70(%rsp), %r15
.Ltmp404:
    00006ea6: 	xorl	%eax, %eax
.Ltmp427:
    00006ea8: 	movq	0x288(%rsp), %rdi
    00006eb0: 	movss	(%rdi,%rax,4), %xmm1
    00006eb5: 	movq	0x38(%rsp), %rdi
    00006eba: 	movaps	%xmm1, %xmm2
    00006ebd: 	andps	DATAat0x24930(%rip), %xmm2
    00006ec4: 	movaps	%xmm1, %xmm0
    00006ec7: 	subss	(%rdi,%rax,4), %xmm0
    00006ecc: 	cvtss2sd	%xmm2, %xmm2
    00006ed0: 	comisd	DATAat0x24968(%rip), %xmm2
    00006ed8: 	jbe	.Ltmp425 # Offset: 28376
    00006eda: 	divss	%xmm1, %xmm0
.Ltmp425:
    00006ede: 	movsd	DATAat0x24970(%rip), %xmm4
    00006ee6: 	cvtss2sd	%xmm0, %xmm0
    00006eea: 	andpd	DATAat0x24940(%rip), %xmm0
    00006ef2: 	comisd	%xmm0, %xmm4
    00006ef6: 	jbe	.Ltmp426 # Offset: 28406
    00006efc: 	addq	$0x1, %rax
    00006f00: 	cmpq	$0x320, %rax
    00006f06: 	jne	.Ltmp427 # Offset: 28422
.Ltmp510:
    00006f08: 	movq	0x38(%rsp), %rax
    00006f0d: 	movq	$0x0, (%rax)
    00006f14: 	movq	0xc0(%rsp), %rdi
    00006f1c: 	movq	$0x0, -0x10(%rdi)
    00006f24: 	movq	0xb8(%rsp), %rdi
    00006f2c: 	andq	$-0x8, %rdi
    00006f30: 	subq	%rdi, %rax
    00006f33: 	movq	%rax, %rcx
    00006f36: 	xorl	%eax, %eax
    00006f38: 	addl	$0xc80, %ecx
    00006f3e: 	shrl	$0x3, %ecx
    00006f41: 	rep		stosq	%rax, %es:(%rdi)
    00006f44: 	movl	0x54(%rsp), %eax
    00006f48: 	testl	%eax, %eax
    00006f4a: 	jle	.Ltmp428 # Offset: 28490
    00006f50: 	movl	0x1b8(%rsp), %eax
    00006f57: 	testl	%eax, %eax
    00006f59: 	jle	.Ltmp428 # Offset: 28505
    00006f5f: 	movslq	0x54(%rsp), %rdi
    00006f64: 	subl	$0x1, %eax
    00006f67: 	movq	%r14, 0x58(%rsp)
    00006f6c: 	movq	%r15, %r13
    00006f6f: 	movq	$0x0, 0x40(%rsp)
    00006f78: 	movq	%rdi, 0x8(%rsp)
    00006f7d: 	shlq	$0x2, %rdi
    00006f81: 	movq	%rdi, 0x28(%rsp)
    00006f86: 	movq	0x38(%rsp), %rdi
    00006f8b: 	movl	$0x4, 0x60(%rsp)
    00006f93: 	leaq	0x4(%rdi,%rax,4), %rax
    00006f98: 	movq	%rax, 0x20(%rsp)
.Ltmp435:
    00006f9d: 	movq	0x40(%rsp), %rax
    00006fa2: 	movl	0x54(%rsp), %edi
    00006fa6: 	movq	0x58(%rsp), %rdx
    00006fab: 	movq	0x38(%rsp), %r10
    00006fb0: 	leal	0x258(%rax), %ebp
    00006fb6: 	movl	%eax, 0x70(%rsp)
    00006fba: 	cmpl	%edi, %ebp
    00006fbc: 	movl	%eax, 0x18(%rsp)
    00006fc0: 	cmovgl	%edi, %ebp
    00006fc3: 	xorl	%ebx, %ebx
    00006fc5: 	leal	-0x3(%rbp), %edi
    00006fc8: 	movl	%edi, 0x10(%rsp)
    00006fcc: 	movl	$0xfffffffc, %edi
    00006fd1: 	subl	%eax, %edi
    00006fd3: 	movl	%edi, %eax
    00006fd5: 	movl	0x60(%rsp), %edi
    00006fd9: 	addl	%ebp, %eax
    00006fdb: 	shrl	$0x2, %eax
    00006fde: 	leal	0x1(%rax), %esi
    00006fe1: 	leal	(%rdi,%rax,4), %eax
    00006fe4: 	movl	%eax, 0x30(%rsp)
    00006fe8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp434:
    00006ff0: 	movss	(%r10), %xmm1
    00006ff5: 	movl	0x18(%rsp), %edi
    00006ff9: 	leaq	(%r14,%rbx,4), %r12
    00006ffd: 	cmpl	%edi, 0x10(%rsp)
    00007001: 	jle	.Ltmp429 # Offset: 28673
    00007007: 	pxor	%xmm2, %xmm2
    0000700b: 	xorl	%eax, %eax
    0000700d: 	xorl	%ecx, %ecx
    0000700f: 	movss	%xmm1, %xmm2
    00007013: 	nopl	(%rax,%rax) # Size: 5
.Ltmp430:
    00007018: 	movups	(%r13,%rax), %xmm0
    0000701e: 	movups	(%rdx,%rax), %xmm4
    00007022: 	addl	$0x1, %ecx
    00007025: 	addq	$0x10, %rax
    00007029: 	mulps	%xmm4, %xmm0
    0000702c: 	addps	%xmm0, %xmm2
    0000702f: 	cmpl	%ecx, %esi
    00007031: 	ja	.Ltmp430 # Offset: 28721
    00007033: 	movaps	%xmm2, %xmm3
    00007036: 	movaps	%xmm2, %xmm4
    00007039: 	movl	0x30(%rsp), %edi
    0000703d: 	movaps	%xmm2, %xmm1
    00007040: 	unpckhps	%xmm2, %xmm4
    00007043: 	shufps	$0x55, %xmm2, %xmm3
    00007047: 	shufps	$0xff, %xmm2, %xmm2
    0000704b: 	movaps	%xmm2, %xmm5
.Ltmp494:
    0000704e: 	cmpl	%edi, %ebp
    00007050: 	jle	.Ltmp431 # Offset: 28752
    00007056: 	movl	%ebp, %r11d
    00007059: 	subl	%edi, %r11d
    0000705c: 	leal	-0x1(%r11), %eax
    00007060: 	cmpl	$0x2, %eax
    00007063: 	jbe	.Ltmp432 # Offset: 28771
    00007065: 	movslq	%edi, %rax
    00007068: 	leaq	(%rax,%rbx), %rcx
    0000706c: 	leaq	(%r15,%rax,4), %r8
    00007070: 	xorl	%eax, %eax
    00007072: 	leaq	(%r14,%rcx,4), %r9
    00007076: 	movl	%r11d, %ecx
    00007079: 	shrl	$0x2, %ecx
    0000707c: 	shlq	$0x4, %rcx
.Ltmp433:
    00007080: 	movups	(%r8,%rax), %xmm0
    00007085: 	movups	(%r9,%rax), %xmm7
    0000708a: 	addq	$0x10, %rax
    0000708e: 	mulps	%xmm7, %xmm0
    00007091: 	addss	%xmm0, %xmm1
    00007095: 	movaps	%xmm0, %xmm2
    00007098: 	shufps	$0x55, %xmm0, %xmm2
    0000709c: 	addss	%xmm1, %xmm2
    000070a0: 	movaps	%xmm0, %xmm1
    000070a3: 	unpckhps	%xmm0, %xmm1
    000070a6: 	shufps	$0xff, %xmm0, %xmm0
    000070aa: 	addss	%xmm2, %xmm1
    000070ae: 	addss	%xmm0, %xmm1
    000070b2: 	cmpq	%rax, %rcx
    000070b5: 	jne	.Ltmp433 # Offset: 28853
    000070b7: 	movl	%r11d, %eax
    000070ba: 	andl	$-0x4, %eax
    000070bd: 	addl	%eax, %edi
    000070bf: 	cmpl	%r11d, %eax
    000070c2: 	je	.Ltmp431 # Offset: 28866
.Ltmp432:
    000070c4: 	movslq	%edi, %rcx
    000070c7: 	movss	(%r12,%rcx,4), %xmm0
    000070cd: 	mulss	(%r15,%rcx,4), %xmm0
    000070d3: 	leaq	(,%rcx,4), %rax
    000070db: 	leal	0x1(%rdi), %ecx
    000070de: 	addss	%xmm0, %xmm1
    000070e2: 	cmpl	%ebp, %ecx
    000070e4: 	jge	.Ltmp431 # Offset: 28900
    000070e6: 	movss	0x4(%r12,%rax), %xmm0
    000070ed: 	mulss	0x4(%r15,%rax), %xmm0
    000070f4: 	addl	$0x2, %edi
    000070f7: 	addss	%xmm0, %xmm1
    000070fb: 	cmpl	%edi, %ebp
    000070fd: 	jle	.Ltmp431 # Offset: 28925
    000070ff: 	movss	0x8(%r15,%rax), %xmm0
    00007106: 	mulss	0x8(%r12,%rax), %xmm0
    0000710d: 	addss	%xmm0, %xmm1
.Ltmp431:
    00007111: 	addss	%xmm1, %xmm3
    00007115: 	addq	$0x4, %r10
    00007119: 	addq	0x28(%rsp), %rdx
    0000711e: 	addq	0x8(%rsp), %rbx
    00007123: 	addss	%xmm4, %xmm3
    00007127: 	addss	%xmm5, %xmm3
    0000712b: 	movss	%xmm3, -0x4(%r10)
    00007131: 	cmpq	%r10, 0x20(%rsp)
    00007136: 	jne	.Ltmp434 # Offset: 28982
    0000713c: 	addq	$0x258, 0x40(%rsp)
    00007145: 	addq	$0x960, %r13
    0000714c: 	movq	0x40(%rsp), %rax
    00007151: 	addl	$0x258, 0x60(%rsp)
    00007159: 	addq	$0x960, 0x58(%rsp)
    00007162: 	cmpl	%eax, 0x54(%rsp)
    00007166: 	jg	.Ltmp435 # Offset: 29030
.Ltmp428:
    0000716c: 	xorl	%eax, %eax
.Ltmp438:
    0000716e: 	movq	0x288(%rsp), %rdi
    00007176: 	movss	(%rdi,%rax,4), %xmm1
    0000717b: 	movq	0x38(%rsp), %rdi
    00007180: 	movaps	%xmm1, %xmm2
    00007183: 	andps	DATAat0x24930(%rip), %xmm2
    0000718a: 	movaps	%xmm1, %xmm0
    0000718d: 	subss	(%rdi,%rax,4), %xmm0
    00007192: 	cvtss2sd	%xmm2, %xmm2
    00007196: 	comisd	DATAat0x24968(%rip), %xmm2
    0000719e: 	jbe	.Ltmp436 # Offset: 29086
    000071a0: 	divss	%xmm1, %xmm0
.Ltmp436:
    000071a4: 	movsd	DATAat0x24970(%rip), %xmm3
    000071ac: 	cvtss2sd	%xmm0, %xmm0
    000071b0: 	andpd	DATAat0x24940(%rip), %xmm0
    000071b8: 	comisd	%xmm0, %xmm3
    000071bc: 	jbe	.Ltmp437 # Offset: 29116
    000071c2: 	addq	$0x1, %rax
    000071c6: 	cmpq	$0x320, %rax
    000071cc: 	jne	.Ltmp438 # Offset: 29132
.Ltmp509:
    000071ce: 	movq	0x38(%rsp), %rax
    000071d3: 	movq	$0x0, (%rax)
    000071da: 	movq	0xc0(%rsp), %rdi
    000071e2: 	movq	$0x0, -0x10(%rdi)
    000071ea: 	movq	0xb8(%rsp), %rdi
    000071f2: 	andq	$-0x8, %rdi
    000071f6: 	subq	%rdi, %rax
    000071f9: 	movq	%rax, %rcx
    000071fc: 	xorl	%eax, %eax
    000071fe: 	addl	$0xc80, %ecx
    00007204: 	shrl	$0x3, %ecx
    00007207: 	rep		stosq	%rax, %es:(%rdi)
    0000720a: 	movl	0x54(%rsp), %eax
    0000720e: 	testl	%eax, %eax
    00007210: 	jle	.Ltmp439 # Offset: 29200
    00007216: 	movl	0x54(%rsp), %r11d
    0000721b: 	movl	0x1b8(%rsp), %eax
    00007222: 	leal	-0x7(%r11), %r12d
    00007226: 	testl	%eax, %eax
    00007228: 	jle	.Ltmp439 # Offset: 29224
    0000722e: 	movq	0x38(%rsp), %rdi
    00007233: 	subl	$0x1, %eax
    00007236: 	leal	-0x8(%r11), %esi
    0000723a: 	movl	$0x0, 0x18(%rsp)
    00007242: 	shrl	$0x3, %esi
    00007245: 	pxor	%xmm8, %xmm8
    0000724a: 	leaq	0x4(%rdi,%rax,4), %r13
    0000724f: 	movslq	%r11d, %rax
    00007252: 	addl	$0x1, %esi
    00007255: 	movq	%rax, 0x8(%rsp)
    0000725a: 	leal	(,%rsi,8), %ebp
    00007261: 	movq	%r13, 0x10(%rsp)
.Ltmp446:
    00007266: 	addl	$0x258, 0x18(%rsp)
    0000726e: 	movq	0x38(%rsp), %r10
    00007273: 	xorl	%ebx, %ebx
    00007275: 	nopl	(%rax) # Size: 3
.Ltmp445:
    00007278: 	movss	(%r10), %xmm1
    0000727d: 	leaq	(%r14,%rbx,4), %rdx
    00007281: 	testl	%r12d, %r12d
    00007284: 	jle	.Ltmp440 # Offset: 29316
    0000728a: 	pxor	%xmm4, %xmm4
    0000728e: 	xorl	%eax, %eax
    00007290: 	pxor	%xmm3, %xmm3
    00007294: 	xorl	%ecx, %ecx
    00007296: 	movss	%xmm1, %xmm4
    0000729a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp441:
    000072a0: 	movups	(%rdx,%rax), %xmm7
    000072a4: 	movups	(%r15,%rax), %xmm0
    000072a9: 	addl	$0x1, %ecx
    000072ac: 	mulps	%xmm7, %xmm0
    000072af: 	movups	0x10(%rdx,%rax), %xmm7
    000072b4: 	addps	%xmm0, %xmm4
    000072b7: 	movups	0x10(%r15,%rax), %xmm0
    000072bd: 	addq	$0x20, %rax
    000072c1: 	mulps	%xmm7, %xmm0
    000072c4: 	addps	%xmm0, %xmm3
    000072c7: 	cmpl	%ecx, %esi
    000072c9: 	ja	.Ltmp441 # Offset: 29385
    000072cb: 	movaps	%xmm4, %xmm5
    000072ce: 	movaps	%xmm4, %xmm9
    000072d2: 	movaps	%xmm3, %xmm7
    000072d5: 	movaps	%xmm3, %xmm6
    000072d8: 	movaps	%xmm4, %xmm1
    000072db: 	unpckhps	%xmm4, %xmm9
    000072df: 	shufps	$0x55, %xmm4, %xmm5
    000072e3: 	movaps	%xmm3, %xmm10
    000072e7: 	unpckhps	%xmm3, %xmm6
    000072ea: 	shufps	$0x55, %xmm3, %xmm7
    000072ee: 	shufps	$0xff, %xmm4, %xmm4
    000072f2: 	shufps	$0xff, %xmm3, %xmm3
    000072f6: 	cmpl	%ebp, %r11d
    000072f9: 	jle	.Ltmp442 # Offset: 29433
    000072ff: 	movl	%ebp, %ecx
.Ltmp493:
    00007301: 	movl	%r11d, %eax
    00007304: 	movl	$0x1, %r13d
    0000730a: 	subl	%ecx, %eax
    0000730c: 	cmpl	%ecx, %r11d
    0000730f: 	cmovgl	%eax, %r13d
    00007313: 	subl	$0x1, %eax
    00007316: 	cmpl	$0x2, %eax
    00007319: 	jbe	.Ltmp443 # Offset: 29465
    0000731b: 	cmpl	%ecx, %r11d
    0000731e: 	jle	.Ltmp443 # Offset: 29470
    00007320: 	movslq	%ecx, %rax
    00007323: 	leaq	(%rax,%rbx), %rdi
    00007327: 	leaq	(%r15,%rax,4), %r8
    0000732b: 	xorl	%eax, %eax
    0000732d: 	leaq	(%r14,%rdi,4), %r9
    00007331: 	movl	%r13d, %edi
    00007334: 	shrl	$0x2, %edi
    00007337: 	shlq	$0x4, %rdi
    0000733b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp444:
    00007340: 	movups	(%r9,%rax), %xmm2
    00007345: 	movups	(%r8,%rax), %xmm0
    0000734a: 	addq	$0x10, %rax
    0000734e: 	mulps	%xmm2, %xmm0
    00007351: 	addss	%xmm0, %xmm1
    00007355: 	movaps	%xmm0, %xmm2
    00007358: 	shufps	$0x55, %xmm0, %xmm2
    0000735c: 	addss	%xmm1, %xmm2
    00007360: 	movaps	%xmm0, %xmm1
    00007363: 	unpckhps	%xmm0, %xmm1
    00007366: 	shufps	$0xff, %xmm0, %xmm0
    0000736a: 	addss	%xmm2, %xmm1
    0000736e: 	addss	%xmm0, %xmm1
    00007372: 	cmpq	%rax, %rdi
    00007375: 	jne	.Ltmp444 # Offset: 29557
    00007377: 	movl	%r13d, %eax
    0000737a: 	andl	$-0x4, %eax
    0000737d: 	addl	%eax, %ecx
    0000737f: 	cmpl	%r13d, %eax
    00007382: 	je	.Ltmp442 # Offset: 29570
.Ltmp443:
    00007384: 	movslq	%ecx, %rdi
    00007387: 	movss	(%rdx,%rdi,4), %xmm0
    0000738c: 	mulss	(%r15,%rdi,4), %xmm0
    00007392: 	leaq	(,%rdi,4), %rax
    0000739a: 	leal	0x1(%rcx), %edi
    0000739d: 	addss	%xmm0, %xmm1
    000073a1: 	cmpl	%edi, %r11d
    000073a4: 	jle	.Ltmp442 # Offset: 29604
    000073a6: 	movss	0x4(%rdx,%rax), %xmm0
    000073ac: 	mulss	0x4(%r15,%rax), %xmm0
    000073b3: 	addl	$0x2, %ecx
    000073b6: 	addss	%xmm0, %xmm1
    000073ba: 	cmpl	%ecx, %r11d
    000073bd: 	jle	.Ltmp442 # Offset: 29629
    000073bf: 	movss	0x8(%r15,%rax), %xmm0
    000073c6: 	mulss	0x8(%rdx,%rax), %xmm0
    000073cc: 	addss	%xmm0, %xmm1
.Ltmp442:
    000073d0: 	addss	%xmm1, %xmm5
    000073d4: 	addq	$0x4, %r10
    000073d8: 	addq	0x8(%rsp), %rbx
    000073dd: 	movaps	%xmm5, %xmm0
    000073e0: 	addss	%xmm9, %xmm0
    000073e5: 	addss	%xmm4, %xmm0
    000073e9: 	addss	%xmm10, %xmm0
    000073ee: 	addss	%xmm7, %xmm0
    000073f2: 	addss	%xmm6, %xmm0
    000073f6: 	addss	%xmm3, %xmm0
    000073fa: 	movss	%xmm0, -0x4(%r10)
    00007400: 	cmpq	%r10, 0x10(%rsp)
    00007405: 	jne	.Ltmp445 # Offset: 29701
    0000740b: 	cmpl	0x18(%rsp), %r11d
    00007410: 	jg	.Ltmp446 # Offset: 29712
.Ltmp439:
    00007416: 	xorl	%eax, %eax
.Ltmp449:
    00007418: 	movq	0x288(%rsp), %rdi
    00007420: 	movss	(%rdi,%rax,4), %xmm1
    00007425: 	movq	0x38(%rsp), %rdi
    0000742a: 	movaps	%xmm1, %xmm2
    0000742d: 	andps	DATAat0x24930(%rip), %xmm2
    00007434: 	movaps	%xmm1, %xmm0
    00007437: 	subss	(%rdi,%rax,4), %xmm0
    0000743c: 	cvtss2sd	%xmm2, %xmm2
    00007440: 	comisd	DATAat0x24968(%rip), %xmm2
    00007448: 	jbe	.Ltmp447 # Offset: 29768
    0000744a: 	divss	%xmm1, %xmm0
.Ltmp447:
    0000744e: 	movsd	DATAat0x24970(%rip), %xmm4
    00007456: 	cvtss2sd	%xmm0, %xmm0
    0000745a: 	andpd	DATAat0x24940(%rip), %xmm0
    00007462: 	comisd	%xmm0, %xmm4
    00007466: 	jbe	.Ltmp448 # Offset: 29798
    0000746c: 	addq	$0x1, %rax
    00007470: 	cmpq	$0x320, %rax
    00007476: 	jne	.Ltmp449 # Offset: 29814
.Ltmp508:
    00007478: 	movq	0x38(%rsp), %rax
    0000747d: 	movq	$0x0, (%rax)
    00007484: 	movq	0xc0(%rsp), %rdi
    0000748c: 	movq	$0x0, -0x10(%rdi)
    00007494: 	movq	0xb8(%rsp), %rdi
    0000749c: 	andq	$-0x8, %rdi
    000074a0: 	subq	%rdi, %rax
    000074a3: 	movq	%rax, %rcx
    000074a6: 	xorl	%eax, %eax
    000074a8: 	addl	$0xc80, %ecx
    000074ae: 	shrl	$0x3, %ecx
    000074b1: 	rep		stosq	%rax, %es:(%rdi)
    000074b4: 	movl	0x1b8(%rsp), %edx
    000074bb: 	testl	%edx, %edx
    000074bd: 	jle	.Ltmp450 # Offset: 29885
    000074c3: 	movl	0x54(%rsp), %edi
    000074c7: 	testl	%edi, %edi
    000074c9: 	jle	.Ltmp450 # Offset: 29897
    000074cf: 	movq	$0x0, 0x78(%rsp)
    000074d8: 	leal	(%rdi,%rdi,4), %eax
    000074db: 	pxor	%xmm4, %xmm4
    000074df: 	movq	$0x0, 0x60(%rsp)
    000074e8: 	leal	(%rax,%rax,4), %eax
    000074eb: 	cltq
    000074ed: 	movq	%rax, 0x80(%rsp)
    000074f5: 	movq	0x38(%rsp), %rax
    000074fa: 	addq	$0x4, %rax
    000074fe: 	movq	%rax, 0x88(%rsp)
    00007506: 	movslq	%edi, %rax
    00007509: 	movq	%rax, 0x20(%rsp)
.Ltmp459:
    0000750e: 	movq	0x78(%rsp), %rsi
    00007513: 	movl	0x1b8(%rsp), %edi
    0000751a: 	movl	%esi, %eax
    0000751c: 	addl	$0x19, %eax
    0000751f: 	cmpl	%edi, %eax
    00007521: 	cmovgl	%edi, %eax
    00007524: 	cmpl	%esi, %eax
    00007526: 	jle	.Ltmp451 # Offset: 29990
    0000752c: 	movq	%rsi, %rdi
    0000752f: 	movq	0x38(%rsp), %rsi
    00007534: 	movq	%r15, %r12
    00007537: 	movq	%r14, %r13
    0000753a: 	subl	%edi, %eax
    0000753c: 	movl	$0x4, 0x40(%rsp)
    00007544: 	movq	$0x0, 0x30(%rsp)
    0000754d: 	subl	$0x1, %eax
    00007550: 	leaq	(%rsi,%rdi,4), %rsi
    00007554: 	addq	%rdi, %rax
    00007557: 	movq	0x88(%rsp), %rdi
    0000755f: 	movq	%rsi, 0x70(%rsp)
    00007564: 	leaq	(%rdi,%rax,4), %rax
    00007568: 	movq	%rax, 0x18(%rsp)
    0000756d: 	nopl	(%rax) # Size: 3
.Ltmp458:
    00007570: 	movq	0x30(%rsp), %rax
    00007575: 	movl	0x54(%rsp), %edi
    00007579: 	movq	0x60(%rsp), %r11
    0000757e: 	movq	0x70(%rsp), %r9
    00007583: 	leal	0x100(%rax), %ebx
    00007589: 	movl	%eax, 0x58(%rsp)
    0000758d: 	cmpl	%edi, %ebx
    0000758f: 	movl	%eax, 0x10(%rsp)
    00007593: 	cmovgl	%edi, %ebx
    00007596: 	leal	-0x3(%rbx), %edi
    00007599: 	movl	%edi, 0x8(%rsp)
    0000759d: 	movl	$0xfffffffc, %edi
    000075a2: 	subl	%eax, %edi
    000075a4: 	movl	%edi, %eax
    000075a6: 	movl	0x40(%rsp), %edi
    000075aa: 	addl	%ebx, %eax
    000075ac: 	shrl	$0x2, %eax
    000075af: 	leal	0x1(%rax), %esi
    000075b2: 	leal	(%rdi,%rax,4), %eax
    000075b5: 	movl	%eax, 0x28(%rsp)
    000075b9: 	nopl	(%rax) # Size: 7
.Ltmp457:
    000075c0: 	leaq	(,%r11,4), %rcx
    000075c8: 	movss	(%r9), %xmm1
    000075cd: 	movl	0x10(%rsp), %edi
    000075d1: 	leaq	(%r14,%rcx), %rbp
    000075d5: 	cmpl	%edi, 0x8(%rsp)
    000075d9: 	jle	.Ltmp452 # Offset: 30169
    000075df: 	pxor	%xmm2, %xmm2
    000075e3: 	addq	%r13, %rcx
    000075e6: 	xorl	%eax, %eax
    000075e8: 	xorl	%edx, %edx
    000075ea: 	movss	%xmm1, %xmm2
    000075ee: 	nop # Size: 2
.Ltmp453:
    000075f0: 	movups	(%r12,%rax), %xmm0
    000075f5: 	movups	(%rcx,%rax), %xmm7
    000075f9: 	addl	$0x1, %edx
    000075fc: 	addq	$0x10, %rax
    00007600: 	mulps	%xmm7, %xmm0
    00007603: 	addps	%xmm0, %xmm2
    00007606: 	cmpl	%edx, %esi
    00007608: 	ja	.Ltmp453 # Offset: 30216
    0000760a: 	movaps	%xmm2, %xmm3
    0000760d: 	movaps	%xmm2, %xmm5
    00007610: 	movl	0x28(%rsp), %ecx
    00007614: 	movaps	%xmm2, %xmm1
    00007617: 	unpckhps	%xmm2, %xmm5
    0000761a: 	shufps	$0x55, %xmm2, %xmm3
    0000761e: 	shufps	$0xff, %xmm2, %xmm2
    00007622: 	movaps	%xmm2, %xmm7
.Ltmp492:
    00007625: 	cmpl	%ecx, %ebx
    00007627: 	jle	.Ltmp454 # Offset: 30247
    0000762d: 	movl	%ebx, %r10d
    00007630: 	subl	%ecx, %r10d
    00007633: 	leal	-0x1(%r10), %eax
    00007637: 	cmpl	$0x2, %eax
    0000763a: 	jbe	.Ltmp455 # Offset: 30266
    0000763c: 	movslq	%ecx, %rax
    0000763f: 	leaq	(%rax,%r11), %rdx
    00007643: 	leaq	(%r15,%rax,4), %rdi
    00007647: 	xorl	%eax, %eax
    00007649: 	leaq	(%r14,%rdx,4), %r8
    0000764d: 	movl	%r10d, %edx
    00007650: 	shrl	$0x2, %edx
    00007653: 	shlq	$0x4, %rdx
    00007657: 	nopw	(%rax,%rax) # Size: 9
.Ltmp456:
    00007660: 	movups	(%rdi,%rax), %xmm0
    00007664: 	movups	(%r8,%rax), %xmm6
    00007669: 	addq	$0x10, %rax
    0000766d: 	mulps	%xmm6, %xmm0
    00007670: 	addss	%xmm0, %xmm1
    00007674: 	movaps	%xmm0, %xmm2
    00007677: 	shufps	$0x55, %xmm0, %xmm2
    0000767b: 	addss	%xmm1, %xmm2
    0000767f: 	movaps	%xmm0, %xmm1
    00007682: 	unpckhps	%xmm0, %xmm1
    00007685: 	shufps	$0xff, %xmm0, %xmm0
    00007689: 	addss	%xmm2, %xmm1
    0000768d: 	addss	%xmm0, %xmm1
    00007691: 	cmpq	%rax, %rdx
    00007694: 	jne	.Ltmp456 # Offset: 30356
    00007696: 	movl	%r10d, %eax
    00007699: 	andl	$-0x4, %eax
    0000769c: 	addl	%eax, %ecx
    0000769e: 	cmpl	%r10d, %eax
    000076a1: 	je	.Ltmp454 # Offset: 30369
.Ltmp455:
    000076a3: 	movslq	%ecx, %rdx
    000076a6: 	movss	(%rbp,%rdx,4), %xmm0
    000076ac: 	mulss	(%r15,%rdx,4), %xmm0
    000076b2: 	leaq	(,%rdx,4), %rax
    000076ba: 	leal	0x1(%rcx), %edx
    000076bd: 	addss	%xmm0, %xmm1
    000076c1: 	cmpl	%ebx, %edx
    000076c3: 	jge	.Ltmp454 # Offset: 30403
    000076c5: 	movss	0x4(%rbp,%rax), %xmm0
    000076cb: 	mulss	0x4(%r15,%rax), %xmm0
    000076d2: 	addl	$0x2, %ecx
    000076d5: 	addss	%xmm0, %xmm1
    000076d9: 	cmpl	%ebx, %ecx
    000076db: 	jge	.Ltmp454 # Offset: 30427
    000076dd: 	movss	0x8(%r15,%rax), %xmm0
    000076e4: 	mulss	0x8(%rbp,%rax), %xmm0
    000076ea: 	addss	%xmm0, %xmm1
.Ltmp454:
    000076ee: 	addss	%xmm1, %xmm3
    000076f2: 	addq	$0x4, %r9
    000076f6: 	addq	0x20(%rsp), %r11
    000076fb: 	addss	%xmm5, %xmm3
    000076ff: 	addss	%xmm7, %xmm3
    00007703: 	movss	%xmm3, -0x4(%r9)
    00007709: 	cmpq	%r9, 0x18(%rsp)
    0000770e: 	jne	.Ltmp457 # Offset: 30478
    00007714: 	addq	$0x100, 0x30(%rsp)
    0000771d: 	addq	$0x400, %r12
    00007724: 	movq	0x30(%rsp), %rax
    00007729: 	addq	$0x400, %r13
    00007730: 	addl	$0x100, 0x40(%rsp)
    00007738: 	cmpl	%eax, 0x54(%rsp)
    0000773c: 	jg	.Ltmp458 # Offset: 30524
.Ltmp451:
    00007742: 	addq	$0x19, 0x78(%rsp)
    00007748: 	movq	0x80(%rsp), %rdi
    00007750: 	movq	0x78(%rsp), %rax
    00007755: 	addq	%rdi, 0x60(%rsp)
    0000775a: 	cmpl	%eax, 0x1b8(%rsp)
    00007761: 	jg	.Ltmp459 # Offset: 30561
.Ltmp450:
    00007767: 	xorl	%eax, %eax
.Ltmp462:
    00007769: 	movq	0x288(%rsp), %rdi
    00007771: 	movss	(%rdi,%rax,4), %xmm1
    00007776: 	movq	0x38(%rsp), %rdi
    0000777b: 	movaps	%xmm1, %xmm2
    0000777e: 	andps	DATAat0x24930(%rip), %xmm2
    00007785: 	movaps	%xmm1, %xmm0
    00007788: 	subss	(%rdi,%rax,4), %xmm0
    0000778d: 	cvtss2sd	%xmm2, %xmm2
    00007791: 	comisd	DATAat0x24968(%rip), %xmm2
    00007799: 	jbe	.Ltmp460 # Offset: 30617
    0000779b: 	divss	%xmm1, %xmm0
.Ltmp460:
    0000779f: 	movsd	DATAat0x24970(%rip), %xmm3
    000077a7: 	cvtss2sd	%xmm0, %xmm0
    000077ab: 	andpd	DATAat0x24940(%rip), %xmm0
    000077b3: 	comisd	%xmm0, %xmm3
    000077b7: 	jbe	.Ltmp461 # Offset: 30647
    000077bd: 	addq	$0x1, %rax
    000077c1: 	cmpq	$0x320, %rax
    000077c7: 	jne	.Ltmp462 # Offset: 30663
.Ltmp507:
    000077c9: 	movq	0x38(%rsp), %rax
    000077ce: 	movq	$0x0, (%rax)
    000077d5: 	movq	0xc0(%rsp), %rdi
    000077dd: 	movq	$0x0, -0x10(%rdi)
    000077e5: 	movq	0xb8(%rsp), %rdi
    000077ed: 	andq	$-0x8, %rdi
    000077f1: 	subq	%rdi, %rax
    000077f4: 	movq	%rax, %rcx
    000077f7: 	xorl	%eax, %eax
    000077f9: 	addl	$0xc80, %ecx
    000077ff: 	shrl	$0x3, %ecx
    00007802: 	rep		stosq	%rax, %es:(%rdi)
    00007805: 	movl	0x1b8(%rsp), %ecx
    0000780c: 	testl	%ecx, %ecx
    0000780e: 	jle	.Ltmp463 # Offset: 30734
    00007814: 	movl	0x54(%rsp), %edi
    00007818: 	testl	%edi, %edi
    0000781a: 	jle	.Ltmp463 # Offset: 30746
    00007820: 	leal	(%rdi,%rdi,4), %eax
    00007823: 	pxor	%xmm8, %xmm8
    00007828: 	movq	$0x0, 0x78(%rsp)
    00007831: 	movq	$0x0, 0x60(%rsp)
    0000783a: 	leal	(%rax,%rax,4), %eax
    0000783d: 	cltq
    0000783f: 	movq	%rax, 0x80(%rsp)
    00007847: 	movq	0x38(%rsp), %rax
    0000784c: 	addq	$0x4, %rax
    00007850: 	movq	%rax, 0x88(%rsp)
    00007858: 	movslq	%edi, %rax
    0000785b: 	movq	%rax, 0x20(%rsp)
.Ltmp472:
    00007860: 	movq	0x78(%rsp), %rsi
    00007865: 	movl	0x1b8(%rsp), %edi
    0000786c: 	movl	%esi, %eax
    0000786e: 	addl	$0x19, %eax
    00007871: 	cmpl	%edi, %eax
    00007873: 	cmovgl	%edi, %eax
    00007876: 	cmpl	%esi, %eax
    00007878: 	jle	.Ltmp464 # Offset: 30840
    0000787e: 	movq	%rsi, %rdi
    00007881: 	movq	0x38(%rsp), %rsi
    00007886: 	movq	%r15, %r12
    00007889: 	movq	%r14, %r13
    0000788c: 	subl	%edi, %eax
    0000788e: 	movl	$0x8, 0x40(%rsp)
    00007896: 	movq	$0x0, 0x30(%rsp)
    0000789f: 	subl	$0x1, %eax
    000078a2: 	leaq	(%rsi,%rdi,4), %rsi
    000078a6: 	addq	%rdi, %rax
    000078a9: 	movq	0x88(%rsp), %rdi
    000078b1: 	movq	%rsi, 0x70(%rsp)
    000078b6: 	leaq	(%rdi,%rax,4), %rax
    000078ba: 	movq	%rax, 0x18(%rsp)
    000078bf: 	nop # Size: 1
.Ltmp471:
    000078c0: 	movq	0x30(%rsp), %rax
    000078c5: 	movl	0x54(%rsp), %edi
    000078c9: 	movq	0x60(%rsp), %r11
    000078ce: 	movq	0x70(%rsp), %r9
    000078d3: 	leal	0x100(%rax), %ebx
    000078d9: 	movl	%eax, 0x58(%rsp)
    000078dd: 	cmpl	%edi, %ebx
    000078df: 	movl	%eax, 0x10(%rsp)
    000078e3: 	cmovgl	%edi, %ebx
    000078e6: 	leal	-0x7(%rbx), %edi
    000078e9: 	movl	%edi, 0x8(%rsp)
    000078ed: 	movl	$0xfffffff8, %edi
    000078f2: 	subl	%eax, %edi
    000078f4: 	movl	%edi, %eax
    000078f6: 	movl	0x40(%rsp), %edi
    000078fa: 	addl	%ebx, %eax
    000078fc: 	shrl	$0x3, %eax
    000078ff: 	leal	0x1(%rax), %esi
    00007902: 	leal	(%rdi,%rax,8), %eax
    00007905: 	movl	%eax, 0x28(%rsp)
    00007909: 	nopl	(%rax) # Size: 7
.Ltmp470:
    00007910: 	leaq	(,%r11,4), %rcx
    00007918: 	movss	(%r9), %xmm1
    0000791d: 	movl	0x10(%rsp), %edi
    00007921: 	leaq	(%r14,%rcx), %rbp
    00007925: 	cmpl	%edi, 0x8(%rsp)
    00007929: 	jle	.Ltmp465 # Offset: 31017
    0000792f: 	pxor	%xmm4, %xmm4
    00007933: 	addq	%r13, %rcx
    00007936: 	xorl	%eax, %eax
    00007938: 	xorl	%edx, %edx
    0000793a: 	movss	%xmm1, %xmm4
    0000793e: 	pxor	%xmm3, %xmm3
    00007942: 	nopw	(%rax,%rax) # Size: 6
.Ltmp466:
    00007948: 	movups	(%r12,%rax), %xmm0
    0000794d: 	movups	(%rcx,%rax), %xmm6
    00007951: 	addl	$0x1, %edx
    00007954: 	movups	0x10(%rcx,%rax), %xmm7
    00007959: 	mulps	%xmm6, %xmm0
    0000795c: 	addps	%xmm0, %xmm4
    0000795f: 	movups	0x10(%r12,%rax), %xmm0
    00007965: 	addq	$0x20, %rax
    00007969: 	mulps	%xmm7, %xmm0
    0000796c: 	addps	%xmm0, %xmm3
    0000796f: 	cmpl	%esi, %edx
    00007971: 	jb	.Ltmp466 # Offset: 31089
    00007973: 	movl	0x28(%rsp), %ecx
    00007977: 	movaps	%xmm4, %xmm5
    0000797a: 	movaps	%xmm4, %xmm9
    0000797e: 	movaps	%xmm3, %xmm7
    00007981: 	movaps	%xmm3, %xmm6
    00007984: 	movaps	%xmm4, %xmm1
    00007987: 	unpckhps	%xmm4, %xmm9
    0000798b: 	shufps	$0x55, %xmm4, %xmm5
    0000798f: 	movaps	%xmm3, %xmm10
    00007993: 	unpckhps	%xmm3, %xmm6
    00007996: 	shufps	$0x55, %xmm3, %xmm7
    0000799a: 	shufps	$0xff, %xmm4, %xmm4
    0000799e: 	shufps	$0xff, %xmm3, %xmm3
.Ltmp491:
    000079a2: 	cmpl	%ecx, %ebx
    000079a4: 	jle	.Ltmp467 # Offset: 31140
    000079aa: 	movl	%ebx, %r10d
    000079ad: 	subl	%ecx, %r10d
    000079b0: 	leal	-0x1(%r10), %eax
    000079b4: 	cmpl	$0x2, %eax
    000079b7: 	jbe	.Ltmp468 # Offset: 31159
    000079b9: 	movslq	%ecx, %rax
    000079bc: 	leaq	(%rax,%r11), %rdx
    000079c0: 	leaq	(%r15,%rax,4), %rdi
    000079c4: 	xorl	%eax, %eax
    000079c6: 	leaq	(%r14,%rdx,4), %r8
    000079ca: 	movl	%r10d, %edx
    000079cd: 	shrl	$0x2, %edx
    000079d0: 	shlq	$0x4, %rdx
    000079d4: 	nopl	(%rax) # Size: 4
.Ltmp469:
    000079d8: 	movups	(%r8,%rax), %xmm2
    000079dd: 	movups	(%rdi,%rax), %xmm0
    000079e1: 	addq	$0x10, %rax
    000079e5: 	mulps	%xmm2, %xmm0
    000079e8: 	addss	%xmm0, %xmm1
    000079ec: 	movaps	%xmm0, %xmm2
    000079ef: 	shufps	$0x55, %xmm0, %xmm2
    000079f3: 	addss	%xmm1, %xmm2
    000079f7: 	movaps	%xmm0, %xmm1
    000079fa: 	unpckhps	%xmm0, %xmm1
    000079fd: 	shufps	$0xff, %xmm0, %xmm0
    00007a01: 	addss	%xmm2, %xmm1
    00007a05: 	addss	%xmm0, %xmm1
    00007a09: 	cmpq	%rdx, %rax
    00007a0c: 	jne	.Ltmp469 # Offset: 31244
    00007a0e: 	movl	%r10d, %eax
    00007a11: 	andl	$-0x4, %eax
    00007a14: 	addl	%eax, %ecx
    00007a16: 	cmpl	%r10d, %eax
    00007a19: 	je	.Ltmp467 # Offset: 31257
.Ltmp468:
    00007a1b: 	movslq	%ecx, %rdx
    00007a1e: 	movss	(%rbp,%rdx,4), %xmm0
    00007a24: 	mulss	(%r15,%rdx,4), %xmm0
    00007a2a: 	leaq	(,%rdx,4), %rax
    00007a32: 	leal	0x1(%rcx), %edx
    00007a35: 	addss	%xmm0, %xmm1
    00007a39: 	cmpl	%edx, %ebx
    00007a3b: 	jle	.Ltmp467 # Offset: 31291
    00007a3d: 	movss	0x4(%r15,%rax), %xmm0
    00007a44: 	mulss	0x4(%rbp,%rax), %xmm0
    00007a4a: 	addl	$0x2, %ecx
    00007a4d: 	addss	%xmm0, %xmm1
    00007a51: 	cmpl	%ecx, %ebx
    00007a53: 	jle	.Ltmp467 # Offset: 31315
    00007a55: 	movss	0x8(%r15,%rax), %xmm0
    00007a5c: 	mulss	0x8(%rbp,%rax), %xmm0
    00007a62: 	addss	%xmm0, %xmm1
.Ltmp467:
    00007a66: 	addss	%xmm1, %xmm5
    00007a6a: 	addq	$0x4, %r9
    00007a6e: 	addq	0x20(%rsp), %r11
    00007a73: 	movaps	%xmm5, %xmm0
    00007a76: 	addss	%xmm9, %xmm0
    00007a7b: 	addss	%xmm4, %xmm0
    00007a7f: 	addss	%xmm10, %xmm0
    00007a84: 	addss	%xmm7, %xmm0
    00007a88: 	addss	%xmm6, %xmm0
    00007a8c: 	addss	%xmm3, %xmm0
    00007a90: 	movss	%xmm0, -0x4(%r9)
    00007a96: 	cmpq	0x18(%rsp), %r9
    00007a9b: 	jne	.Ltmp470 # Offset: 31387
    00007aa1: 	addq	$0x100, 0x30(%rsp)
    00007aaa: 	addq	$0x400, %r12
    00007ab1: 	movq	0x30(%rsp), %rax
    00007ab6: 	addq	$0x400, %r13
    00007abd: 	addl	$0x100, 0x40(%rsp)
    00007ac5: 	cmpl	%eax, 0x54(%rsp)
    00007ac9: 	jg	.Ltmp471 # Offset: 31433
.Ltmp464:
    00007acf: 	addq	$0x19, 0x78(%rsp)
    00007ad5: 	movq	0x80(%rsp), %rdi
    00007add: 	movq	0x78(%rsp), %rax
    00007ae2: 	addq	%rdi, 0x60(%rsp)
    00007ae7: 	cmpl	%eax, 0x1b8(%rsp)
    00007aee: 	jg	.Ltmp472 # Offset: 31470
.Ltmp463:
    00007af4: 	xorl	%eax, %eax
.Ltmp475:
    00007af6: 	movq	0x288(%rsp), %rdi
    00007afe: 	movss	(%rdi,%rax,4), %xmm1
    00007b03: 	movq	0x38(%rsp), %rdi
    00007b08: 	movaps	%xmm1, %xmm2
    00007b0b: 	andps	DATAat0x24930(%rip), %xmm2
    00007b12: 	movaps	%xmm1, %xmm0
    00007b15: 	subss	(%rdi,%rax,4), %xmm0
    00007b1a: 	cvtss2sd	%xmm2, %xmm2
    00007b1e: 	comisd	DATAat0x24968(%rip), %xmm2
    00007b26: 	jbe	.Ltmp473 # Offset: 31526
    00007b28: 	divss	%xmm1, %xmm0
.Ltmp473:
    00007b2c: 	movsd	DATAat0x24970(%rip), %xmm4
    00007b34: 	cvtss2sd	%xmm0, %xmm0
    00007b38: 	andpd	DATAat0x24940(%rip), %xmm0
    00007b40: 	comisd	%xmm0, %xmm4
    00007b44: 	jbe	.Ltmp474 # Offset: 31556
    00007b4a: 	addq	$0x1, %rax
    00007b4e: 	cmpq	$0x320, %rax
    00007b54: 	jne	.Ltmp475 # Offset: 31572
.Ltmp506:
    00007b56: 	movq	0x38(%rsp), %rax
    00007b5b: 	movq	$0x0, (%rax)
    00007b62: 	movq	0xc0(%rsp), %rdi
    00007b6a: 	movq	$0x0, -0x10(%rdi)
    00007b72: 	movq	0xb8(%rsp), %rdi
    00007b7a: 	andq	$-0x8, %rdi
    00007b7e: 	subq	%rdi, %rax
    00007b81: 	movq	%rax, %rcx
    00007b84: 	xorl	%eax, %eax
    00007b86: 	addl	$0xc80, %ecx
    00007b8c: 	shrl	$0x3, %ecx
    00007b8f: 	rep		stosq	%rax, %es:(%rdi)
    00007b92: 	movl	0x54(%rsp), %esi
    00007b96: 	testl	%esi, %esi
    00007b98: 	jle	.Ltmp476 # Offset: 31640
    00007b9e: 	movl	0x1b8(%rsp), %edi
    00007ba5: 	testl	%edi, %edi
    00007ba7: 	jle	.Ltmp476 # Offset: 31655
    00007bad: 	movl	0x54(%rsp), %eax
    00007bb1: 	movq	%r15, 0x78(%rsp)
    00007bb6: 	movq	$0x0, 0x1d0(%rsp)
    00007bc2: 	imull	$0x64, %eax, %ecx
    00007bc5: 	leal	(%rax,%rax), %edi
    00007bc8: 	movslq	%edi, %rsi
    00007bcb: 	addl	%eax, %edi
    00007bcd: 	movl	%edi, 0x2ec(%rsp)
    00007bd4: 	movslq	%edi, %rdi
    00007bd7: 	movq	%rdi, 0x2e0(%rsp)
    00007bdf: 	movl	%eax, %edi
    00007be1: 	shll	$0x2, %eax
    00007be4: 	cltq
    00007be6: 	movl	%ecx, 0x2b0(%rsp)
    00007bed: 	movslq	%ecx, %rcx
    00007bf0: 	leaq	(,%rax,4), %rbp
    00007bf8: 	movq	%rax, %r12
    00007bfb: 	leaq	(%rax,%rax,2), %rax
    00007bff: 	movl	%esi, 0x2d0(%rsp)
    00007c06: 	leaq	(,%rax,4), %r13
    00007c0e: 	movslq	%edi, %rax
    00007c11: 	shlq	$0x4, %r12
    00007c15: 	movq	%rbp, %r15
    00007c18: 	movq	%rax, 0x2c8(%rsp)
    00007c20: 	shlq	$0x2, %rax
    00007c24: 	movq	%r13, %rbp
    00007c27: 	movq	%rax, 0xd8(%rsp)
    00007c2f: 	movq	0x38(%rsp), %rax
    00007c34: 	movq	%rcx, 0x2b8(%rsp)
    00007c3c: 	addq	$0x10, %rax
    00007c40: 	movq	%rsi, 0x2d8(%rsp)
    00007c48: 	movq	%rax, 0x2c0(%rsp)
    00007c50: 	movq	%r14, %rax
    00007c53: 	movq	%r12, %r14
    00007c56: 	movq	%rax, %r12
.Ltmp485:
    00007c59: 	movq	0x1d0(%rsp), %rsi
    00007c61: 	movl	0x54(%rsp), %edi
    00007c65: 	movl	%esi, %eax
    00007c67: 	addl	$0x12c, %eax
    00007c6c: 	cmpl	%edi, %eax
    00007c6e: 	cmovgl	%edi, %eax
    00007c71: 	movl	%eax, 0x70(%rsp)
    00007c75: 	cmpl	%esi, %eax
    00007c77: 	jle	.Ltmp477 # Offset: 31863
    00007c7d: 	movq	0x2e0(%rsp), %rax
    00007c85: 	movq	$0x0, 0xf8(%rsp)
    00007c91: 	movq	$0x0, 0x250(%rsp)
    00007c9d: 	movq	%rax, 0x268(%rsp)
    00007ca5: 	movq	0x2d8(%rsp), %rax
    00007cad: 	movl	$0x4, 0x290(%rsp)
    00007cb8: 	movq	%rax, 0x260(%rsp)
    00007cc0: 	movq	0x2c8(%rsp), %rax
    00007cc8: 	movl	$0x0, 0x23c(%rsp)
    00007cd3: 	movq	%rax, 0x258(%rsp)
    00007cdb: 	movq	0x38(%rsp), %rax
    00007ce0: 	movq	%rax, 0x20(%rsp)
    00007ce5: 	movl	0x54(%rsp), %eax
    00007ce9: 	movl	%eax, 0x244(%rsp)
    00007cf0: 	movl	0x2ec(%rsp), %eax
    00007cf7: 	movl	%eax, 0x240(%rsp)
    00007cfe: 	movl	0x2d0(%rsp), %eax
    00007d05: 	movl	%eax, 0x248(%rsp)
    00007d0c: 	nopl	(%rax) # Size: 4
.Ltmp484:
    00007d10: 	movq	0xf8(%rsp), %r11
    00007d18: 	movl	0x1b8(%rsp), %edi
    00007d1f: 	movq	0x1d0(%rsp), %rdx
    00007d27: 	movslq	0x248(%rsp), %r8
    00007d2f: 	movl	%r11d, %eax
    00007d32: 	movq	0x38(%rsp), %rcx
    00007d37: 	movl	%r11d, 0x58(%rsp)
    00007d3c: 	addl	$0x64, %eax
    00007d3f: 	cmpl	%edi, %eax
    00007d41: 	cmovgl	%edi, %eax
    00007d44: 	movslq	0x240(%rsp), %rdi
    00007d4c: 	addq	%rdx, %r8
    00007d4f: 	shlq	$0x2, %r8
    00007d53: 	leal	-0x3(%rax), %esi
    00007d56: 	addq	%rdx, %rdi
    00007d59: 	movl	%eax, %ebx
    00007d5b: 	movl	%esi, 0x30(%rsp)
    00007d5f: 	movslq	0x23c(%rsp), %rsi
    00007d67: 	leaq	(,%rdi,4), %rax
    00007d6f: 	movq	%rax, 0x40(%rsp)
    00007d74: 	leaq	(%rdx,%rsi), %rax
    00007d78: 	movl	%ebx, 0x28(%rsp)
    00007d7c: 	leaq	(%r12,%rax,4), %r13
    00007d80: 	movslq	0x244(%rsp), %rax
    00007d88: 	addq	%rdx, %rax
    00007d8b: 	leaq	(%r12,%rax,4), %r9
    00007d8f: 	movl	$0xfffffffc, %eax
    00007d94: 	subl	%r11d, %eax
    00007d97: 	addl	%ebx, %eax
    00007d99: 	movl	%eax, 0x88(%rsp)
    00007da0: 	shrl	$0x2, %eax
    00007da3: 	leal	0x1(%rax), %edx
    00007da6: 	movl	%eax, %r10d
    00007da9: 	movl	%edx, %edi
    00007dab: 	movl	%edx, 0xc0(%rsp)
    00007db2: 	leaq	-0x1(%rdx), %rax
    00007db6: 	leaq	-0x1(%r11,%rdx,4), %rdx
    00007dbb: 	imulq	%r15, %rax
    00007dbf: 	leaq	(%rcx,%rdx,4), %rbx
    00007dc3: 	xorl	%edx, %edx
    00007dc5: 	movq	%rbx, 0x18(%rsp)
    00007dca: 	movl	0x54(%rsp), %ebx
    00007dce: 	testl	%ebx, %ebx
    00007dd0: 	cmovsq	%rax, %rdx
    00007dd4: 	movq	%rdx, 0x10(%rsp)
    00007dd9: 	movl	$0x0, %edx
    00007dde: 	cmovsq	%rdx, %rax
    00007de2: 	movl	%edi, %edx
    00007de4: 	andl	$-0x4, %edx
    00007de7: 	movq	%rax, 0x8(%rsp)
    00007dec: 	movl	%edi, %eax
    00007dee: 	movq	0x20(%rsp), %rdi
    00007df3: 	shrl	$0x2, %eax
    00007df6: 	movl	%edx, 0xb8(%rsp)
    00007dfd: 	subl	$0x1, %eax
    00007e00: 	shlq	$0x6, %rax
    00007e04: 	leaq	0x40(%rdi,%rax), %rax
    00007e09: 	movq	%rax, 0xb0(%rsp)
    00007e11: 	leal	(%r11,%rdx,4), %eax
    00007e15: 	movq	%rcx, %r11
    00007e18: 	movslq	%eax, %rdx
    00007e1b: 	shlq	$0x2, %rdx
    00007e1f: 	leaq	(%rcx,%rdx), %rdi
    00007e23: 	movl	%ebx, %ecx
    00007e25: 	imull	%eax, %ecx
    00007e28: 	movq	%rdi, 0x108(%rsp)
    00007e30: 	leaq	0x4(%r11,%rdx), %rdi
    00007e35: 	movq	%rdi, 0x128(%rsp)
    00007e3d: 	leaq	0x8(%r11,%rdx), %rdi
    00007e42: 	movq	%rdi, 0x138(%rsp)
    00007e4a: 	leaq	0xc(%r11,%rdx), %rdi
    00007e4f: 	leal	0x3(%rax), %edx
    00007e52: 	movl	%ecx, 0x110(%rsp)
    00007e59: 	imull	%ebx, %edx
    00007e5c: 	leal	0x1(%rax), %ecx
    00007e5f: 	imull	%ebx, %ecx
    00007e62: 	movq	%rdi, 0x118(%rsp)
    00007e6a: 	movl	%edx, 0x120(%rsp)
    00007e71: 	leal	0x4(%rax), %edx
    00007e74: 	movl	%ecx, 0x130(%rsp)
    00007e7b: 	leal	0x2(%rax), %ecx
    00007e7e: 	imull	%ebx, %ecx
    00007e81: 	movl	%edx, 0xd0(%rsp)
    00007e88: 	movslq	%edx, %rdx
    00007e8b: 	shlq	$0x2, %rdx
    00007e8f: 	leaq	(%r11,%rdx), %rdi
    00007e93: 	movl	%ecx, 0x100(%rsp)
    00007e9a: 	movl	0xd0(%rsp), %ecx
    00007ea1: 	movq	%rdi, 0x140(%rsp)
    00007ea9: 	leaq	0x4(%r11,%rdx), %rdi
    00007eae: 	imull	%ebx, %ecx
    00007eb1: 	movl	%ecx, 0x148(%rsp)
    00007eb8: 	leal	0x5(%rax), %ecx
    00007ebb: 	imull	%ebx, %ecx
    00007ebe: 	movq	%rdi, 0x150(%rsp)
    00007ec6: 	leaq	0x8(%r11,%rdx), %rdi
    00007ecb: 	movq	%rdi, 0x160(%rsp)
    00007ed3: 	leaq	0xc(%r11,%rdx), %rdi
    00007ed8: 	leal	0x7(%rax), %edx
    00007edb: 	imull	%ebx, %edx
    00007ede: 	movq	%rdi, 0x170(%rsp)
    00007ee6: 	movl	%ecx, 0x158(%rsp)
    00007eed: 	leal	0x6(%rax), %ecx
    00007ef0: 	imull	%ebx, %ecx
    00007ef3: 	movl	%edx, 0x178(%rsp)
    00007efa: 	leal	0x8(%rax), %edx
    00007efd: 	movl	%edx, 0xf0(%rsp)
    00007f04: 	movslq	%edx, %rdx
    00007f07: 	movl	%ecx, 0x168(%rsp)
    00007f0e: 	movl	0xf0(%rsp), %ecx
    00007f15: 	shlq	$0x2, %rdx
    00007f19: 	leaq	(%r11,%rdx), %rdi
    00007f1d: 	imull	%ebx, %ecx
    00007f20: 	movq	%rdi, 0x1c8(%rsp)
    00007f28: 	leaq	0x4(%r11,%rdx), %rdi
    00007f2d: 	movq	%rdi, 0x1c0(%rsp)
    00007f35: 	leaq	0x8(%r11,%rdx), %rdi
    00007f3a: 	movq	%rdi, 0x1b0(%rsp)
    00007f42: 	leaq	0xc(%r11,%rdx), %rdi
    00007f47: 	movl	%ecx, 0x1e8(%rsp)
    00007f4e: 	leal	0x9(%rax), %ecx
    00007f51: 	imull	%ebx, %ecx
    00007f54: 	movq	%rdi, 0x1a0(%rsp)
    00007f5c: 	movq	0x2c0(%rsp), %rdi
    00007f64: 	movl	%ecx, 0x1bc(%rsp)
    00007f6b: 	leal	0xa(%rax), %ecx
    00007f6e: 	addl	$0xb, %eax
    00007f71: 	imull	%ebx, %ecx
    00007f74: 	imull	%ebx, %eax
    00007f77: 	movl	%ecx, 0x1a8(%rsp)
    00007f7e: 	movq	0xf8(%rsp), %rcx
    00007f86: 	movl	%eax, 0x198(%rsp)
    00007f8d: 	leaq	(%r11,%rcx,4), %rax
    00007f91: 	movq	%rax, 0x210(%rsp)
    00007f99: 	movl	%r10d, %eax
    00007f9c: 	leaq	(%rcx,%rax,4), %rax
    00007fa0: 	leaq	(%rdi,%rax,4), %rax
    00007fa4: 	movq	%rax, 0x218(%rsp)
    00007fac: 	movq	0x250(%rsp), %rax
    00007fb4: 	subq	%rsi, %rax
    00007fb7: 	shlq	$0x2, %rax
    00007fbb: 	movq	%rax, 0x220(%rsp)
    00007fc3: 	movq	0x258(%rsp), %rax
    00007fcb: 	subq	%rsi, %rax
    00007fce: 	shlq	$0x2, %rax
    00007fd2: 	movq	%rax, 0x228(%rsp)
    00007fda: 	movq	0x260(%rsp), %rax
    00007fe2: 	subq	%rsi, %rax
    00007fe5: 	shlq	$0x2, %rax
    00007fe9: 	movq	%rax, 0x200(%rsp)
    00007ff1: 	movq	0x268(%rsp), %rax
    00007ff9: 	subq	%rsi, %rax
    00007ffc: 	shlq	$0x2, %rax
    00008000: 	cmpl	%ecx, 0x30(%rsp)
    00008004: 	movq	%rax, 0x208(%rsp)
    0000800c: 	movl	0x290(%rsp), %eax
    00008013: 	leal	(%rax,%r10,4), %eax
    00008017: 	movl	0x28(%rsp), %r10d
    0000801c: 	cmovlel	%ecx, %eax
    0000801f: 	subl	%eax, %r10d
    00008022: 	movl	%eax, %esi
    00008024: 	movl	%eax, 0x60(%rsp)
    00008028: 	leal	-0x1(%r10), %eax
    0000802c: 	movl	%r10d, 0xe0(%rsp)
    00008034: 	movl	%r10d, %ecx
    00008037: 	cmpl	$0x2, %eax
    0000803a: 	movl	%ebx, %eax
    0000803c: 	seta	0xc8(%rsp)
    00008044: 	imull	%esi, %eax
    00008047: 	xorl	%edx, %edx
    00008049: 	cltq
    0000804b: 	movq	%rax, 0xa0(%rsp)
    00008053: 	leaq	-0x1(%rcx), %rax
    00008057: 	imulq	0xd8(%rsp), %rax
    00008060: 	testl	%ebx, %ebx
    00008062: 	cmovnsq	%rax, %rdx
    00008066: 	movq	%rdx, 0xa8(%rsp)
    0000806e: 	movslq	%esi, %rdx
    00008071: 	leaq	(%r11,%rdx,4), %rdi
    00008075: 	leaq	-0x1(%rcx,%rdx), %rdx
    0000807a: 	movl	$0x0, %ecx
    0000807f: 	cmovnsq	%rcx, %rax
    00008083: 	andl	$-0x4, %r10d
    00008087: 	movl	%ebx, %ecx
    00008089: 	movq	%rdi, 0x80(%rsp)
    00008091: 	leaq	(%r11,%rdx,4), %rdi
    00008095: 	movl	%r10d, 0xe8(%rsp)
    0000809d: 	movq	%rax, 0x90(%rsp)
    000080a5: 	movl	%r10d, %eax
    000080a8: 	addl	%esi, %eax
    000080aa: 	movq	%rdi, 0x98(%rsp)
    000080b2: 	imull	%eax, %ecx
    000080b5: 	movslq	%eax, %rdx
    000080b8: 	leaq	(%r11,%rdx,4), %rdi
    000080bc: 	movq	%rdi, 0x188(%rsp)
    000080c4: 	movl	%ecx, 0x190(%rsp)
    000080cb: 	leal	0x1(%rax), %ecx
    000080ce: 	movslq	%ecx, %rdx
    000080d1: 	movl	%ecx, 0x180(%rsp)
    000080d8: 	imull	%ebx, %ecx
    000080db: 	leaq	(%r11,%rdx,4), %rdi
    000080df: 	movq	%rdi, 0x1e0(%rsp)
    000080e7: 	movq	0x40(%rsp), %rdi
    000080ec: 	movl	%ecx, 0x1ec(%rsp)
    000080f3: 	leal	0x2(%rax), %ecx
    000080f6: 	movslq	%ecx, %rax
    000080f9: 	movl	%ecx, 0x1d8(%rsp)
    00008100: 	imull	%ebx, %ecx
    00008103: 	leaq	(%r11,%rax,4), %rax
    00008107: 	movq	%rax, 0x1f0(%rsp)
    0000810f: 	movl	%ecx, 0x238(%rsp)
    00008116: 	leal	0x1(%rsi), %ecx
    00008119: 	movslq	%ecx, %rax
    0000811c: 	movl	%ecx, 0x230(%rsp)
    00008123: 	imull	%ebx, %ecx
    00008126: 	leaq	(%r11,%rax,4), %rax
    0000812a: 	movq	%rax, 0x278(%rsp)
    00008132: 	movl	%ecx, 0x280(%rsp)
    00008139: 	leal	0x2(%rsi), %ecx
    0000813c: 	movslq	%ecx, %rax
    0000813f: 	movl	%ecx, 0x270(%rsp)
    00008146: 	imull	%ebx, %ecx
    00008149: 	leaq	(%r11,%rax,4), %rax
    0000814d: 	movq	%rax, 0x298(%rsp)
    00008155: 	movl	%ecx, 0x2e8(%rsp)
    0000815c: 	leal	0x3(%rsi), %ecx
    0000815f: 	movq	0x1d0(%rsp), %rsi
    00008167: 	movslq	%ecx, %rax
    0000816a: 	movl	%ecx, 0x294(%rsp)
    00008171: 	imull	%ebx, %ecx
    00008174: 	leaq	(%r11,%rax,4), %rax
    00008178: 	movq	%rax, 0x2a8(%rsp)
    00008180: 	movl	%ecx, 0x2a0(%rsp)
    00008187: 	nopw	(%rax,%rax) # Size: 9
.Ltmp483:
    00008190: 	movq	0x78(%rsp), %rax
    00008195: 	movl	0x58(%rsp), %ebx
    00008199: 	movl	%esi, %ecx
    0000819b: 	movss	(%rax,%rsi,4), %xmm4
    000081a0: 	cmpl	%ebx, 0x30(%rsp)
    000081a4: 	jle	.Ltmp478 # Offset: 33188
    000081aa: 	movq	0x8(%rsp), %r10
    000081af: 	movq	0x20(%rsp), %rbx
    000081b4: 	movq	%r13, %rdx
    000081b7: 	subq	%r12, %rdx
    000081ba: 	leaq	(%rdi,%r10), %rax
    000081be: 	addq	%r12, %rax
    000081c1: 	cmpq	%rax, %rbx
    000081c4: 	movq	0x10(%rsp), %rax
    000081c9: 	seta	%r11b
    000081cd: 	addq	%rdi, %rax
    000081d0: 	addq	%r12, %rax
    000081d3: 	cmpq	%rax, 0x18(%rsp)
    000081d8: 	setb	%al
    000081db: 	orl	%eax, %r11d
    000081de: 	leaq	(%r8,%r10), %rax
    000081e2: 	addq	%r12, %rax
    000081e5: 	cmpq	%rax, %rbx
    000081e8: 	movq	0x10(%rsp), %rax
    000081ed: 	seta	%r10b
    000081f1: 	addq	%r8, %rax
    000081f4: 	addq	%r12, %rax
    000081f7: 	cmpq	%rax, 0x18(%rsp)
    000081fc: 	setb	%al
    000081ff: 	orl	%r10d, %eax
    00008202: 	andl	%r11d, %eax
    00008205: 	cmpl	$0xb, 0x88(%rsp)
    0000820d: 	movq	%r9, %r11
    00008210: 	seta	%r10b
    00008214: 	subq	%r12, %r11
    00008217: 	andl	%r10d, %eax
    0000821a: 	movq	%r11, %r10
    0000821d: 	movq	0x8(%rsp), %r11
    00008222: 	addq	%r9, %r11
    00008225: 	cmpq	%r11, %rbx
    00008228: 	seta	%r11b
    0000822c: 	addq	0x10(%rsp), %r10
    00008231: 	addq	%r12, %r10
    00008234: 	cmpq	%r10, 0x18(%rsp)
    00008239: 	setb	%r10b
    0000823d: 	orl	%r10d, %r11d
    00008240: 	testb	%r11b, %al
    00008243: 	je	.Ltmp479 # Offset: 33347
    00008249: 	movq	0x10(%rsp), %rax
    0000824e: 	addq	%rdx, %rax
    00008251: 	addq	%r12, %rax
    00008254: 	cmpq	%rax, 0x18(%rsp)
    00008259: 	setb	%al
    0000825c: 	addq	0x8(%rsp), %rdx
    00008261: 	addq	%r12, %rdx
    00008264: 	cmpq	%rdx, %rbx
    00008267: 	seta	%dl
    0000826a: 	orb	%al, %dl
    0000826c: 	je	.Ltmp479 # Offset: 33388
    00008272: 	movl	%esi, 0x40(%rsp)
    00008276: 	movq	%rbx, %rax
    00008279: 	movaps	%xmm4, %xmm3
    0000827c: 	leaq	(%r12,%r8), %rbx
    00008280: 	leaq	(%r12,%rdi), %r11
    00008284: 	movq	%r13, %r10
    00008287: 	movq	%r9, %rdx
    0000828a: 	shufps	$0x0, %xmm3, %xmm3
    0000828e: 	movq	0xb0(%rsp), %rcx
    00008296: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp480:
    000082a0: 	movups	(%rax), %xmm5
    000082a3: 	movups	0x10(%rax), %xmm2
    000082a7: 	addq	$0x40, %rax
    000082ab: 	movups	-0x20(%rax), %xmm6
    000082af: 	movss	(%r10,%rbp), %xmm1
    000082b5: 	movaps	%xmm5, %xmm7
    000082b8: 	movss	(%r10,%r15,2), %xmm0
    000082be: 	shufps	$0xdd, %xmm2, %xmm5
    000082c2: 	movss	(%rdx,%r15), %xmm9
    000082c8: 	shufps	$0x88, %xmm2, %xmm7
    000082cc: 	movups	-0x10(%rax), %xmm2
    000082d0: 	movaps	%xmm6, %xmm8
    000082d4: 	movss	(%rbx,%r15), %xmm10
    000082da: 	unpcklps	%xmm1, %xmm0
    000082dd: 	movss	(%r10), %xmm1
    000082e2: 	shufps	$0x88, %xmm2, %xmm8
    000082e7: 	shufps	$0xdd, %xmm2, %xmm6
    000082eb: 	movss	(%r10,%r15), %xmm2
    000082f1: 	addq	%r14, %r10
    000082f4: 	unpcklps	%xmm2, %xmm1
    000082f7: 	movss	(%rdx,%rbp), %xmm2
    000082fc: 	movlhps	%xmm0, %xmm1
    000082ff: 	movaps	%xmm7, %xmm0
    00008302: 	shufps	$0xdd, %xmm8, %xmm7
    00008307: 	mulps	%xmm3, %xmm1
    0000830a: 	shufps	$0x88, %xmm8, %xmm0
    0000830f: 	movss	(%r11,%r15,2), %xmm8
    00008315: 	addps	%xmm0, %xmm1
    00008318: 	movss	(%rdx,%r15,2), %xmm0
    0000831e: 	unpcklps	%xmm2, %xmm0
    00008321: 	movss	(%rdx), %xmm2
    00008325: 	addq	%r14, %rdx
    00008328: 	unpcklps	%xmm9, %xmm2
    0000832c: 	movss	(%rbx,%r15,2), %xmm9
    00008332: 	movlhps	%xmm0, %xmm2
    00008335: 	movaps	%xmm5, %xmm0
    00008338: 	shufps	$0xdd, %xmm6, %xmm5
    0000833c: 	mulps	%xmm3, %xmm2
    0000833f: 	shufps	$0x88, %xmm6, %xmm0
    00008343: 	addps	%xmm0, %xmm2
    00008346: 	movss	(%rbx,%rbp), %xmm0
    0000834b: 	unpcklps	%xmm0, %xmm9
    0000834f: 	movss	(%rbx), %xmm0
    00008353: 	addq	%r14, %rbx
    00008356: 	movaps	%xmm2, %xmm6
    00008359: 	unpcklps	%xmm10, %xmm0
    0000835d: 	movlhps	%xmm9, %xmm0
    00008361: 	movss	(%r11,%r15), %xmm9
    00008367: 	mulps	%xmm3, %xmm0
    0000836a: 	addps	%xmm0, %xmm7
    0000836d: 	movss	(%r11,%rbp), %xmm0
    00008373: 	unpcklps	%xmm0, %xmm8
    00008377: 	movss	(%r11), %xmm0
    0000837c: 	addq	%r14, %r11
    0000837f: 	unpcklps	%xmm9, %xmm0
    00008383: 	movlhps	%xmm8, %xmm0
    00008387: 	mulps	%xmm3, %xmm0
    0000838a: 	addps	%xmm5, %xmm0
    0000838d: 	movaps	%xmm1, %xmm5
    00008390: 	unpckhps	%xmm7, %xmm1
    00008393: 	unpcklps	%xmm7, %xmm5
    00008396: 	unpcklps	%xmm0, %xmm6
    00008399: 	unpckhps	%xmm0, %xmm2
    0000839c: 	movaps	%xmm5, %xmm0
    0000839f: 	unpcklps	%xmm6, %xmm0
    000083a2: 	unpckhps	%xmm6, %xmm5
    000083a5: 	movups	%xmm0, -0x40(%rax)
    000083a9: 	movaps	%xmm1, %xmm0
    000083ac: 	unpckhps	%xmm2, %xmm1
    000083af: 	unpcklps	%xmm2, %xmm0
    000083b2: 	movups	%xmm5, -0x30(%rax)
    000083b6: 	movups	%xmm0, -0x20(%rax)
    000083ba: 	movups	%xmm1, -0x10(%rax)
    000083be: 	cmpq	%rcx, %rax
    000083c1: 	jne	.Ltmp480 # Offset: 33729
    000083c7: 	movl	0x40(%rsp), %ecx
    000083cb: 	movl	0xc0(%rsp), %ebx
    000083d2: 	cmpl	%ebx, 0xb8(%rsp)
    000083d9: 	je	.Ltmp478 # Offset: 33753
    000083df: 	movl	0x110(%rsp), %eax
    000083e6: 	movl	0x30(%rsp), %ebx
    000083ea: 	addl	%ecx, %eax
    000083ec: 	cltq
    000083ee: 	movss	(%r12,%rax,4), %xmm0
    000083f4: 	movq	0x108(%rsp), %rax
    000083fc: 	mulss	%xmm4, %xmm0
    00008400: 	addss	(%rax), %xmm0
    00008404: 	movss	%xmm0, (%rax)
    00008408: 	movl	0x130(%rsp), %eax
    0000840f: 	addl	%ecx, %eax
    00008411: 	cltq
    00008413: 	movss	(%r12,%rax,4), %xmm0
    00008419: 	movq	0x128(%rsp), %rax
    00008421: 	mulss	%xmm4, %xmm0
    00008425: 	addss	(%rax), %xmm0
    00008429: 	movss	%xmm0, (%rax)
    0000842d: 	movl	0x100(%rsp), %eax
    00008434: 	addl	%ecx, %eax
    00008436: 	cltq
    00008438: 	movss	(%r12,%rax,4), %xmm0
    0000843e: 	movq	0x138(%rsp), %rax
    00008446: 	mulss	%xmm4, %xmm0
    0000844a: 	addss	(%rax), %xmm0
    0000844e: 	movss	%xmm0, (%rax)
    00008452: 	movl	0x120(%rsp), %eax
    00008459: 	addl	%ecx, %eax
    0000845b: 	cltq
    0000845d: 	movss	(%r12,%rax,4), %xmm0
    00008463: 	movq	0x118(%rsp), %rax
    0000846b: 	mulss	%xmm4, %xmm0
    0000846f: 	addss	(%rax), %xmm0
    00008473: 	movss	%xmm0, (%rax)
    00008477: 	movl	0xd0(%rsp), %eax
    0000847e: 	cmpl	%eax, %ebx
    00008480: 	jle	.Ltmp478 # Offset: 33920
    00008486: 	movl	0x148(%rsp), %eax
    0000848d: 	addl	%ecx, %eax
    0000848f: 	cltq
    00008491: 	movss	(%r12,%rax,4), %xmm0
    00008497: 	movq	0x140(%rsp), %rax
    0000849f: 	mulss	%xmm4, %xmm0
    000084a3: 	addss	(%rax), %xmm0
    000084a7: 	movss	%xmm0, (%rax)
    000084ab: 	movl	0x158(%rsp), %eax
    000084b2: 	addl	%ecx, %eax
    000084b4: 	cltq
    000084b6: 	movss	(%r12,%rax,4), %xmm0
    000084bc: 	movq	0x150(%rsp), %rax
    000084c4: 	mulss	%xmm4, %xmm0
    000084c8: 	addss	(%rax), %xmm0
    000084cc: 	movss	%xmm0, (%rax)
    000084d0: 	movl	0x168(%rsp), %eax
    000084d7: 	addl	%ecx, %eax
    000084d9: 	cltq
    000084db: 	movss	(%r12,%rax,4), %xmm0
    000084e1: 	movq	0x160(%rsp), %rax
    000084e9: 	mulss	%xmm4, %xmm0
    000084ed: 	addss	(%rax), %xmm0
    000084f1: 	movss	%xmm0, (%rax)
    000084f5: 	movl	0x178(%rsp), %eax
    000084fc: 	addl	%ecx, %eax
    000084fe: 	cltq
    00008500: 	movss	(%r12,%rax,4), %xmm0
    00008506: 	movq	0x170(%rsp), %rax
    0000850e: 	mulss	%xmm4, %xmm0
    00008512: 	addss	(%rax), %xmm0
    00008516: 	movss	%xmm0, (%rax)
    0000851a: 	movl	0xf0(%rsp), %eax
    00008521: 	cmpl	%eax, %ebx
    00008523: 	jle	.Ltmp478 # Offset: 34083
    00008529: 	movl	0x1e8(%rsp), %eax
    00008530: 	addl	%ecx, %eax
    00008532: 	cltq
    00008534: 	movss	(%r12,%rax,4), %xmm0
    0000853a: 	movq	0x1c8(%rsp), %rax
    00008542: 	mulss	%xmm4, %xmm0
    00008546: 	addss	(%rax), %xmm0
    0000854a: 	movss	%xmm0, (%rax)
    0000854e: 	movl	0x1bc(%rsp), %eax
    00008555: 	addl	%ecx, %eax
    00008557: 	cltq
    00008559: 	movss	(%r12,%rax,4), %xmm0
    0000855f: 	movq	0x1c0(%rsp), %rax
    00008567: 	mulss	%xmm4, %xmm0
    0000856b: 	addss	(%rax), %xmm0
    0000856f: 	movss	%xmm0, (%rax)
    00008573: 	movl	0x1a8(%rsp), %eax
    0000857a: 	addl	%ecx, %eax
    0000857c: 	cltq
    0000857e: 	movss	(%r12,%rax,4), %xmm0
    00008584: 	movq	0x1b0(%rsp), %rax
    0000858c: 	mulss	%xmm4, %xmm0
    00008590: 	addss	(%rax), %xmm0
    00008594: 	movss	%xmm0, (%rax)
    00008598: 	movl	0x198(%rsp), %eax
    0000859f: 	addl	%ecx, %eax
    000085a1: 	cltq
    000085a3: 	movss	(%r12,%rax,4), %xmm0
    000085a9: 	movq	0x1a0(%rsp), %rax
    000085b1: 	mulss	%xmm4, %xmm0
    000085b5: 	addss	(%rax), %xmm0
    000085b9: 	movss	%xmm0, (%rax)
.Ltmp478:
    000085bd: 	movl	0x60(%rsp), %ebx
    000085c1: 	cmpl	%ebx, 0x28(%rsp)
    000085c5: 	jle	.Ltmp481 # Offset: 34245
    000085cb: 	movq	0xa0(%rsp), %rax
    000085d3: 	movq	0x90(%rsp), %rbx
    000085db: 	leaq	(%rsi,%rax), %r10
    000085df: 	leaq	(,%r10,4), %rax
    000085e7: 	leaq	(%rbx,%rax), %rdx
    000085eb: 	movq	0xa8(%rsp), %rbx
    000085f3: 	addq	%r12, %rdx
    000085f6: 	cmpq	%rdx, 0x98(%rsp)
    000085fe: 	leaq	(%rax,%rbx), %rdx
    00008602: 	movq	0x80(%rsp), %rbx
    0000860a: 	setb	%r11b
    0000860e: 	addq	%r12, %rdx
    00008611: 	cmpq	%rdx, %rbx
    00008614: 	seta	%dl
    00008617: 	orb	%r11b, %dl
    0000861a: 	je	.Ltmp482 # Offset: 34330
    00008620: 	cmpb	$0x0, 0xc8(%rsp)
    00008628: 	je	.Ltmp482 # Offset: 34344
    0000862e: 	movq	0xd8(%rsp), %r11
    00008636: 	addq	%r12, %rax
    00008639: 	movups	(%rbx), %xmm3
    0000863c: 	leaq	(%rax,%r11), %rdx
    00008640: 	movaps	%xmm3, 0x40(%rsp)
    00008645: 	leaq	(%rdx,%r11), %r10
    00008649: 	movss	(%rdx), %xmm2
    0000864d: 	movss	(%r10,%r11), %xmm0
    00008653: 	movss	(%r10), %xmm1
    00008658: 	unpcklps	%xmm0, %xmm1
    0000865b: 	movss	(%rax), %xmm0
    0000865f: 	unpcklps	%xmm2, %xmm0
    00008662: 	movlhps	%xmm1, %xmm0
    00008665: 	movaps	%xmm4, %xmm1
    00008668: 	shufps	$0x0, %xmm1, %xmm1
    0000866c: 	mulps	%xmm1, %xmm0
    0000866f: 	addps	%xmm3, %xmm0
    00008672: 	movups	%xmm0, (%rbx)
    00008675: 	movl	0xe8(%rsp), %ebx
    0000867c: 	cmpl	%ebx, 0xe0(%rsp)
    00008683: 	je	.Ltmp481 # Offset: 34435
    00008689: 	movl	0x190(%rsp), %eax
    00008690: 	movl	0x28(%rsp), %ebx
    00008694: 	addl	%ecx, %eax
    00008696: 	cltq
    00008698: 	movss	(%r12,%rax,4), %xmm0
    0000869e: 	movq	0x188(%rsp), %rax
    000086a6: 	mulss	%xmm4, %xmm0
    000086aa: 	addss	(%rax), %xmm0
    000086ae: 	movss	%xmm0, (%rax)
    000086b2: 	movl	0x180(%rsp), %eax
    000086b9: 	cmpl	%eax, %ebx
    000086bb: 	jle	.Ltmp481 # Offset: 34491
    000086bd: 	movl	0x1ec(%rsp), %eax
    000086c4: 	addl	%ecx, %eax
    000086c6: 	cltq
    000086c8: 	movss	(%r12,%rax,4), %xmm0
    000086ce: 	movq	0x1e0(%rsp), %rax
    000086d6: 	mulss	%xmm4, %xmm0
    000086da: 	addss	(%rax), %xmm0
    000086de: 	movss	%xmm0, (%rax)
    000086e2: 	cmpl	%ebx, 0x1d8(%rsp)
    000086e9: 	jge	.Ltmp481 # Offset: 34537
    000086eb: 	addl	0x238(%rsp), %ecx
    000086f2: 	movq	0x1f0(%rsp), %rax
    000086fa: 	movslq	%ecx, %rcx
    000086fd: 	mulss	(%r12,%rcx,4), %xmm4
    00008703: 	addss	(%rax), %xmm4
    00008707: 	movss	%xmm4, (%rax)
.Ltmp481:
    0000870b: 	addq	$0x1, %rsi
    0000870f: 	addq	$0x4, %r8
    00008713: 	addq	$0x4, %rdi
    00008717: 	addq	$0x4, %r13
    0000871b: 	addq	$0x4, %r9
    0000871f: 	cmpl	%esi, 0x70(%rsp)
    00008723: 	jg	.Ltmp483 # Offset: 34595
    00008729: 	movl	0x2b0(%rsp), %eax
    00008730: 	addl	%eax, 0x248(%rsp)
    00008737: 	addl	%eax, 0x240(%rsp)
    0000873e: 	addl	%eax, 0x23c(%rsp)
    00008745: 	addl	%eax, 0x244(%rsp)
    0000874c: 	movq	0x2b8(%rsp), %rax
    00008754: 	addq	$0x64, 0xf8(%rsp)
    0000875d: 	addq	%rax, 0x250(%rsp)
    00008765: 	addq	%rax, 0x258(%rsp)
    0000876d: 	addq	%rax, 0x260(%rsp)
    00008775: 	addq	%rax, 0x268(%rsp)
    0000877d: 	movq	0xf8(%rsp), %rax
    00008785: 	addl	$0x64, 0x290(%rsp)
    0000878d: 	addq	$0x190, 0x20(%rsp)
    00008796: 	cmpl	%eax, 0x1b8(%rsp)
    0000879d: 	jg	.Ltmp484 # Offset: 34717
.Ltmp477:
    000087a3: 	addq	$0x12c, 0x1d0(%rsp)
    000087af: 	movq	0x1d0(%rsp), %rax
    000087b7: 	cmpl	%eax, 0x54(%rsp)
    000087bb: 	jg	.Ltmp485 # Offset: 34747
.Ltmp476:
    000087c1: 	xorl	%eax, %eax
.Ltmp488:
    000087c3: 	movq	0x288(%rsp), %rdi
    000087cb: 	movss	(%rdi,%rax,4), %xmm1
    000087d0: 	movq	0x38(%rsp), %rdi
    000087d5: 	movaps	%xmm1, %xmm2
    000087d8: 	andps	DATAat0x24930(%rip), %xmm2
    000087df: 	movaps	%xmm1, %xmm0
    000087e2: 	subss	(%rdi,%rax,4), %xmm0
    000087e7: 	cvtss2sd	%xmm2, %xmm2
    000087eb: 	comisd	DATAat0x24968(%rip), %xmm2
    000087f3: 	jbe	.Ltmp486 # Offset: 34803
    000087f5: 	divss	%xmm1, %xmm0
.Ltmp486:
    000087f9: 	movsd	DATAat0x24970(%rip), %xmm3
    00008801: 	cvtss2sd	%xmm0, %xmm0
    00008805: 	andpd	DATAat0x24940(%rip), %xmm0
    0000880d: 	comisd	%xmm0, %xmm3
    00008811: 	jbe	.Ltmp487 # Offset: 34833
    00008817: 	addq	$0x1, %rax
    0000881b: 	cmpq	$0x320, %rax
    00008821: 	jne	.Ltmp488 # Offset: 34849
    00008823: 	movq	0xf78(%rsp), %rax
    0000882b: 	subq	%fs:0x28, %rax
    00008834: 	jne	.Ltmp489 # Offset: 34868
    0000883a: 	addq	$0xf88, %rsp
    00008841: 	popq	%rbx
    00008842: 	popq	%rbp
    00008843: 	popq	%r12
    00008845: 	popq	%r13
    00008847: 	popq	%r14
    00008849: 	popq	%r15
    0000884b: 	retq # Offset: 34891
    0000884c: 	nopl	(%rax) # Size: 4
.Ltmp479:
    00008850: 	movq	0x200(%rsp), %rdx
    00008858: 	movq	0x220(%rsp), %rax
    00008860: 	movq	%r9, 0x1f8(%rsp)
    00008868: 	movq	0x228(%rsp), %rbx
    00008870: 	addq	%r13, %rax
    00008873: 	leaq	(%rdx,%r13), %r11
    00008877: 	movq	0x208(%rsp), %rdx
    0000887f: 	movq	%rax, 0x40(%rsp)
    00008884: 	movq	0x210(%rsp), %rax
    0000888c: 	addq	%r13, %rbx
    0000888f: 	movq	0x40(%rsp), %r9
    00008894: 	movl	%ecx, 0x40(%rsp)
    00008898: 	leaq	(%rdx,%r13), %r10
    0000889c: 	xorl	%edx, %edx
    0000889e: 	movq	0x218(%rsp), %rcx
    000088a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp490:
    000088b0: 	movss	(%r9,%rdx), %xmm0
    000088b6: 	addq	$0x10, %rax
    000088ba: 	mulss	%xmm4, %xmm0
    000088be: 	addss	-0x10(%rax), %xmm0
    000088c3: 	movss	%xmm0, -0x10(%rax)
    000088c8: 	movss	(%rbx,%rdx), %xmm0
    000088cd: 	mulss	%xmm4, %xmm0
    000088d1: 	addss	-0xc(%rax), %xmm0
    000088d6: 	movss	%xmm0, -0xc(%rax)
    000088db: 	movss	(%r11,%rdx), %xmm0
    000088e1: 	mulss	%xmm4, %xmm0
    000088e5: 	addss	-0x8(%rax), %xmm0
    000088ea: 	movss	%xmm0, -0x8(%rax)
    000088ef: 	movss	(%r10,%rdx), %xmm0
    000088f5: 	addq	%r15, %rdx
    000088f8: 	mulss	%xmm4, %xmm0
    000088fc: 	addss	-0x4(%rax), %xmm0
    00008901: 	movss	%xmm0, -0x4(%rax)
    00008906: 	cmpq	%rcx, %rax
    00008909: 	jne	.Ltmp490 # Offset: 35081
    0000890b: 	movq	0x1f8(%rsp), %r9
    00008913: 	movl	0x40(%rsp), %ecx
    00008917: 	jmp	.Ltmp478 # Offset: 35095
    0000891c: 	nopl	(%rax) # Size: 4
.Ltmp482:
    00008920: 	movss	(%r12,%r10,4), %xmm0
    00008926: 	movq	0x80(%rsp), %rax
    0000892e: 	movl	0x28(%rsp), %ebx
    00008932: 	mulss	%xmm4, %xmm0
    00008936: 	addss	(%rax), %xmm0
    0000893a: 	movss	%xmm0, (%rax)
    0000893e: 	movl	0x230(%rsp), %eax
    00008945: 	cmpl	%eax, %ebx
    00008947: 	jle	.Ltmp481 # Offset: 35143
    0000894d: 	movl	0x280(%rsp), %eax
    00008954: 	addl	%ecx, %eax
    00008956: 	cltq
    00008958: 	movss	(%r12,%rax,4), %xmm0
    0000895e: 	movq	0x278(%rsp), %rax
    00008966: 	mulss	%xmm4, %xmm0
    0000896a: 	addss	(%rax), %xmm0
    0000896e: 	movss	%xmm0, (%rax)
    00008972: 	cmpl	%ebx, 0x270(%rsp)
    00008979: 	jge	.Ltmp481 # Offset: 35193
    0000897f: 	movl	0x2e8(%rsp), %eax
    00008986: 	addl	%ecx, %eax
    00008988: 	cltq
    0000898a: 	movss	(%r12,%rax,4), %xmm0
    00008990: 	movq	0x298(%rsp), %rax
    00008998: 	mulss	%xmm4, %xmm0
    0000899c: 	addss	(%rax), %xmm0
    000089a0: 	movss	%xmm0, (%rax)
    000089a4: 	cmpl	%ebx, 0x294(%rsp)
    000089ab: 	jge	.Ltmp481 # Offset: 35243
    000089b1: 	movl	0x2a0(%rsp), %eax
    000089b8: 	addl	%ecx, %eax
    000089ba: 	cltq
    000089bc: 	mulss	(%r12,%rax,4), %xmm4
    000089c2: 	movq	0x2a8(%rsp), %rax
    000089ca: 	addss	(%rax), %xmm4
    000089ce: 	movss	%xmm4, (%rax)
    000089d2: 	jmp	.Ltmp481 # Offset: 35282
    000089d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp465:
    000089e0: 	movl	0x58(%rsp), %ecx
    000089e4: 	movaps	%xmm8, %xmm3
    000089e8: 	movaps	%xmm8, %xmm6
    000089ec: 	movaps	%xmm8, %xmm7
    000089f0: 	movaps	%xmm8, %xmm10
    000089f4: 	movaps	%xmm8, %xmm4
    000089f8: 	movaps	%xmm8, %xmm9
    000089fc: 	movaps	%xmm8, %xmm5
    00008a00: 	jmp	.Ltmp491 # Offset: 35328
    00008a05: 	nopl	(%rax) # Size: 3
.Ltmp452:
    00008a08: 	movl	0x58(%rsp), %ecx
    00008a0c: 	movaps	%xmm4, %xmm7
    00008a0f: 	movaps	%xmm4, %xmm5
    00008a12: 	movaps	%xmm4, %xmm3
    00008a15: 	jmp	.Ltmp492 # Offset: 35349
.Ltmp440:
    00008a1a: 	movaps	%xmm8, %xmm3
    00008a1e: 	movaps	%xmm8, %xmm6
    00008a22: 	movaps	%xmm8, %xmm7
    00008a26: 	xorl	%ecx, %ecx
    00008a28: 	movaps	%xmm8, %xmm10
    00008a2c: 	movaps	%xmm8, %xmm4
    00008a30: 	movaps	%xmm8, %xmm9
    00008a34: 	movaps	%xmm8, %xmm5
    00008a38: 	jmp	.Ltmp493 # Offset: 35384
.Ltmp429:
    00008a3d: 	pxor	%xmm5, %xmm5
    00008a41: 	movl	0x70(%rsp), %edi
    00008a45: 	movaps	%xmm5, %xmm4
    00008a48: 	movaps	%xmm5, %xmm3
    00008a4b: 	jmp	.Ltmp494 # Offset: 35403
.Ltmp341:
    00008a50: 	leaq	0x10(%r10), %rdi
    00008a54: 	movq	0x90(%rsp), %rax
    00008a5c: 	xorl	%edx, %edx
    00008a5e: 	movq	%rdi, 0xa8(%rsp)
    00008a66: 	jmp	.Ltmp495 # Offset: 35430
.Ltmp298:
    00008a6b: 	movaps	%xmm3, %xmm4
    00008a6e: 	movaps	%xmm3, %xmm5
    00008a71: 	movaps	%xmm3, %xmm6
    00008a74: 	xorl	%esi, %esi
    00008a76: 	movaps	%xmm3, %xmm7
    00008a79: 	movaps	%xmm3, %xmm8
    00008a7d: 	movaps	%xmm3, %xmm9
    00008a81: 	movaps	%xmm3, %xmm10
    00008a85: 	jmp	.Ltmp496 # Offset: 35461
.Ltmp288:
    00008a8a: 	movaps	%xmm3, %xmm4
    00008a8d: 	movaps	%xmm3, %xmm5
    00008a90: 	movaps	%xmm3, %xmm6
    00008a93: 	xorl	%esi, %esi
    00008a95: 	movaps	%xmm3, %xmm7
    00008a98: 	movaps	%xmm3, %xmm8
    00008a9c: 	movaps	%xmm3, %xmm9
    00008aa0: 	movaps	%xmm3, %xmm10
    00008aa4: 	jmp	.Ltmp497 # Offset: 35492
.Ltmp353:
    00008aa9: 	movq	0x38(%rsp), %rax
    00008aae: 	leaq	(%r14,%r11), %rsi
.Ltmp498:
    00008ab2: 	movss	(%rsi), %xmm1
    00008ab6: 	movq	0x8(%rsp), %rdi
    00008abb: 	addq	$0x10, %rax
    00008abf: 	mulss	%xmm0, %xmm1
    00008ac3: 	addss	-0x10(%rax), %xmm1
    00008ac8: 	movss	%xmm1, -0x10(%rax)
    00008acd: 	movss	(%rsi,%rdi,4), %xmm1
    00008ad2: 	mulss	%xmm0, %xmm1
    00008ad6: 	addss	-0xc(%rax), %xmm1
    00008adb: 	movss	%xmm1, -0xc(%rax)
    00008ae0: 	movss	(%rsi,%rdi,8), %xmm1
    00008ae5: 	movq	0x198(%rsp), %rdi
    00008aed: 	mulss	%xmm0, %xmm1
    00008af1: 	addss	-0x8(%rax), %xmm1
    00008af6: 	movss	%xmm1, -0x8(%rax)
    00008afb: 	movss	(%rsi,%rdi), %xmm1
    00008b00: 	addq	0x20(%rsp), %rsi
    00008b05: 	mulss	%xmm0, %xmm1
    00008b09: 	addss	-0x4(%rax), %xmm1
    00008b0e: 	movss	%xmm1, -0x4(%rax)
    00008b13: 	cmpq	0x168(%rsp), %rax
    00008b1b: 	jne	.Ltmp498 # Offset: 35611
    00008b1d: 	jmp	.Ltmp355 # Offset: 35613
.Ltmp263:
    00008b22: 	xorl	%edx, %edx
    00008b24: 	jmp	.Ltmp499 # Offset: 35620
.Ltmp331:
    00008b29: 	movq	0x38(%rsp), %rax
    00008b2e: 	leaq	(%r14,%r11), %rsi
.Ltmp500:
    00008b32: 	movss	(%rsi), %xmm1
    00008b36: 	movq	0x8(%rsp), %rdi
    00008b3b: 	addq	$0x10, %rax
    00008b3f: 	mulss	%xmm0, %xmm1
    00008b43: 	addss	-0x10(%rax), %xmm1
    00008b48: 	movss	%xmm1, -0x10(%rax)
    00008b4d: 	movss	(%rsi,%rdi,4), %xmm1
    00008b52: 	mulss	%xmm0, %xmm1
    00008b56: 	addss	-0xc(%rax), %xmm1
    00008b5b: 	movss	%xmm1, -0xc(%rax)
    00008b60: 	movss	(%rsi,%rdi,8), %xmm1
    00008b65: 	movq	0x1a0(%rsp), %rdi
    00008b6d: 	mulss	%xmm0, %xmm1
    00008b71: 	addss	-0x8(%rax), %xmm1
    00008b76: 	movss	%xmm1, -0x8(%rax)
    00008b7b: 	movss	(%rsi,%rdi), %xmm1
    00008b80: 	addq	0x20(%rsp), %rsi
    00008b85: 	mulss	%xmm0, %xmm1
    00008b89: 	addss	-0x4(%rax), %xmm1
    00008b8e: 	movss	%xmm1, -0x4(%rax)
    00008b93: 	cmpq	%rax, 0x190(%rsp)
    00008b9b: 	jne	.Ltmp500 # Offset: 35739
    00008b9d: 	jmp	.Ltmp333 # Offset: 35741
.Ltmp255:
    00008ba2: 	xorl	%edx, %edx
    00008ba4: 	jmp	.Ltmp501 # Offset: 35748
.Ltmp245:
    00008ba9: 	movl	$0x0, 0x10(%rsp)
    00008bb1: 	movl	0x1b8(%rsp), %r15d
    00008bb9: 	xorl	%eax, %eax
    00008bbb: 	jmp	.Ltmp502 # Offset: 35771
.Ltmp233:
    00008bc0: 	xorl	%edx, %edx
    00008bc2: 	jmp	.Ltmp503 # Offset: 35778
.Ltmp228:
    00008bc7: 	xorl	%eax, %eax
    00008bc9: 	jmp	.Ltmp504 # Offset: 35785
.Ltmp241:
    00008bce: 	leaq	DATAat0x243a8(%rip), %rsi
    00008bd5: 	movl	$0x1, %edi
    00008bda: 	xorl	%eax, %eax
    00008bdc: 	callq	__printf_chk@PLT # Offset: 35804
    00008be1: 	jmp	.Ltmp505 # Offset: 35809
.Ltmp487:
    00008be6: 	movq	0xf78(%rsp), %rax
    00008bee: 	subq	%fs:0x28, %rax
    00008bf7: 	jne	.Ltmp489 # Offset: 35831
    00008bfd: 	addq	$0xf88, %rsp
    00008c04: 	leaq	DATAat0x24008(%rip), %rsi
    00008c0b: 	movl	$0x1, %edi
    00008c10: 	xorl	%eax, %eax
    00008c12: 	popq	%rbx
    00008c13: 	popq	%rbp
    00008c14: 	popq	%r12
    00008c16: 	popq	%r13
    00008c18: 	popq	%r14
    00008c1a: 	popq	%r15
    00008c1c: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 35868
.Ltmp474:
    00008c21: 	leaq	DATAat0x24040(%rip), %rsi
    00008c28: 	movl	$0x1, %edi
    00008c2d: 	xorl	%eax, %eax
    00008c2f: 	callq	__printf_chk@PLT # Offset: 35887
    00008c34: 	jmp	.Ltmp506 # Offset: 35892
.Ltmp461:
    00008c39: 	leaq	DATAat0x24078(%rip), %rsi
    00008c40: 	movl	$0x1, %edi
    00008c45: 	xorl	%eax, %eax
    00008c47: 	callq	__printf_chk@PLT # Offset: 35911
    00008c4c: 	jmp	.Ltmp507 # Offset: 35916
.Ltmp448:
    00008c51: 	leaq	DATAat0x240b0(%rip), %rsi
    00008c58: 	movl	$0x1, %edi
    00008c5d: 	xorl	%eax, %eax
    00008c5f: 	callq	__printf_chk@PLT # Offset: 35935
    00008c64: 	jmp	.Ltmp508 # Offset: 35940
.Ltmp437:
    00008c69: 	leaq	DATAat0x240e8(%rip), %rsi
    00008c70: 	movl	$0x1, %edi
    00008c75: 	xorl	%eax, %eax
    00008c77: 	callq	__printf_chk@PLT # Offset: 35959
    00008c7c: 	jmp	.Ltmp509 # Offset: 35964
.Ltmp426:
    00008c81: 	leaq	DATAat0x24120(%rip), %rsi
    00008c88: 	movl	$0x1, %edi
    00008c8d: 	xorl	%eax, %eax
    00008c8f: 	callq	__printf_chk@PLT # Offset: 35983
    00008c94: 	jmp	.Ltmp510 # Offset: 35988
.Ltmp402:
    00008c99: 	leaq	DATAat0x24158(%rip), %rsi
    00008ca0: 	movl	$0x1, %edi
    00008ca5: 	xorl	%eax, %eax
    00008ca7: 	callq	__printf_chk@PLT # Offset: 36007
    00008cac: 	jmp	.Ltmp511 # Offset: 36012
.Ltmp390:
    00008cb1: 	leaq	DATAat0x24188(%rip), %rsi
    00008cb8: 	movl	$0x1, %edi
    00008cbd: 	xorl	%eax, %eax
    00008cbf: 	callq	__printf_chk@PLT # Offset: 36031
    00008cc4: 	jmp	.Ltmp512 # Offset: 36036
.Ltmp381:
    00008cc9: 	leaq	DATAat0x241b8(%rip), %rsi
    00008cd0: 	movl	$0x1, %edi
    00008cd5: 	xorl	%eax, %eax
    00008cd7: 	callq	__printf_chk@PLT # Offset: 36055
    00008cdc: 	jmp	.Ltmp513 # Offset: 36060
.Ltmp370:
    00008ce1: 	leaq	DATAat0x241e8(%rip), %rsi
    00008ce8: 	movl	$0x1, %edi
    00008ced: 	xorl	%eax, %eax
    00008cef: 	callq	__printf_chk@PLT # Offset: 36079
    00008cf4: 	jmp	.Ltmp514 # Offset: 36084
.Ltmp360:
    00008cf9: 	leaq	DATAat0x24218(%rip), %rsi
    00008d00: 	movl	$0x1, %edi
    00008d05: 	xorl	%eax, %eax
    00008d07: 	callq	__printf_chk@PLT # Offset: 36103
    00008d0c: 	jmp	.Ltmp515 # Offset: 36108
.Ltmp357:
    00008d11: 	movq	0x1a0(%rsp), %rax
    00008d19: 	movl	0x1b8(%rsp), %ebx
    00008d20: 	movss	(%r14,%rax,4), %xmm1
    00008d26: 	leal	0x1(%r9), %eax
    00008d2a: 	mulss	%xmm0, %xmm1
    00008d2e: 	addss	(%r10), %xmm1
    00008d33: 	movss	%xmm1, (%r10)
    00008d38: 	cmpl	%eax, %ebx
    00008d3a: 	jle	.Ltmp356 # Offset: 36154
    00008d40: 	movl	0x158(%rsp), %r10d
    00008d48: 	addl	0x54(%rsp), %r10d
    00008d4d: 	leal	(%rcx,%r10), %eax
    00008d51: 	movq	0x38(%rsp), %rdx
    00008d56: 	cltq
    00008d58: 	movss	(%r14,%rax,4), %xmm1
    00008d5e: 	leaq	0x4(%rdx,%rdi), %rsi
    00008d63: 	leal	0x2(%r9), %eax
    00008d67: 	mulss	%xmm0, %xmm1
    00008d6b: 	addss	(%rsi), %xmm1
    00008d6f: 	movss	%xmm1, (%rsi)
    00008d73: 	cmpl	%eax, %ebx
    00008d75: 	jle	.Ltmp356 # Offset: 36213
    00008d7b: 	addl	0x54(%rsp), %r10d
    00008d80: 	leaq	0x8(%rdx,%rdi), %rsi
    00008d85: 	addl	$0x3, %r9d
    00008d89: 	leal	(%rcx,%r10), %eax
    00008d8d: 	cltq
    00008d8f: 	movss	(%r14,%rax,4), %xmm1
    00008d95: 	mulss	%xmm0, %xmm1
    00008d99: 	addss	(%rsi), %xmm1
    00008d9d: 	movss	%xmm1, (%rsi)
    00008da1: 	cmpl	%r9d, %ebx
    00008da4: 	jle	.Ltmp356 # Offset: 36260
    00008daa: 	movl	0x54(%rsp), %eax
    00008dae: 	leaq	0xc(%rdx,%rdi), %rsi
    00008db3: 	addl	%r10d, %eax
    00008db6: 	jmp	.Ltmp516 # Offset: 36278
.Ltmp352:
    00008dbb: 	xorl	%r9d, %r9d
    00008dbe: 	jmp	.Ltmp517 # Offset: 36286
.Ltmp348:
    00008dc3: 	movq	%rax, %rdi
    00008dc6: 	xorl	%ecx, %ecx
    00008dc8: 	jmp	.Ltmp518 # Offset: 36296
.Ltmp338:
    00008dcd: 	leaq	DATAat0x24248(%rip), %rsi
    00008dd4: 	movl	$0x1, %edi
    00008dd9: 	xorl	%eax, %eax
    00008ddb: 	callq	__printf_chk@PLT # Offset: 36315
    00008de0: 	jmp	.Ltmp519 # Offset: 36320
.Ltmp335:
    00008de5: 	movq	0x1a8(%rsp), %rax
    00008ded: 	movl	0x1b8(%rsp), %edx
    00008df4: 	movss	(%r14,%rax,4), %xmm1
    00008dfa: 	leal	0x1(%r9), %eax
    00008dfe: 	mulss	%xmm0, %xmm1
    00008e02: 	addss	(%r10), %xmm1
    00008e07: 	movss	%xmm1, (%r10)
    00008e0c: 	cmpl	%eax, %edx
    00008e0e: 	jle	.Ltmp334 # Offset: 36366
    00008e14: 	movl	0x130(%rsp), %r10d
    00008e1c: 	movl	0x54(%rsp), %r8d
    00008e21: 	movq	0x38(%rsp), %rax
    00008e26: 	addl	%r8d, %r10d
    00008e29: 	leaq	0x4(%rax,%rdi), %rsi
    00008e2e: 	leal	(%r10,%rcx), %eax
    00008e32: 	cltq
    00008e34: 	movss	(%r14,%rax,4), %xmm1
    00008e3a: 	leal	0x2(%r9), %eax
    00008e3e: 	mulss	%xmm0, %xmm1
    00008e42: 	addss	(%rsi), %xmm1
    00008e46: 	movss	%xmm1, (%rsi)
    00008e4a: 	cmpl	%eax, %edx
    00008e4c: 	jle	.Ltmp334 # Offset: 36428
    00008e52: 	movq	0x38(%rsp), %rax
    00008e57: 	addl	%r8d, %r10d
    00008e5a: 	addl	$0x3, %r9d
    00008e5e: 	leaq	0x8(%rax,%rdi), %rsi
    00008e63: 	leal	(%r10,%rcx), %eax
    00008e67: 	cltq
    00008e69: 	movss	(%r14,%rax,4), %xmm1
    00008e6f: 	mulss	%xmm0, %xmm1
    00008e73: 	addss	(%rsi), %xmm1
    00008e77: 	movss	%xmm1, (%rsi)
    00008e7b: 	cmpl	%r9d, %edx
    00008e7e: 	jle	.Ltmp334 # Offset: 36478
    00008e84: 	movq	0x38(%rsp), %rax
    00008e89: 	leaq	0xc(%rax,%rdi), %rsi
    00008e8e: 	movl	%r8d, %eax
    00008e91: 	addl	%r10d, %eax
    00008e94: 	jmp	.Ltmp520 # Offset: 36500
.Ltmp330:
    00008e99: 	xorl	%r9d, %r9d
    00008e9c: 	jmp	.Ltmp521 # Offset: 36508
.Ltmp326:
    00008ea1: 	movq	%rax, %rdi
    00008ea4: 	xorl	%ecx, %ecx
    00008ea6: 	jmp	.Ltmp522 # Offset: 36518
.Ltmp316:
    00008eab: 	leaq	DATAat0x24278(%rip), %rsi
    00008eb2: 	movl	$0x1, %edi
    00008eb7: 	xorl	%eax, %eax
    00008eb9: 	callq	__printf_chk@PLT # Offset: 36537
    00008ebe: 	jmp	.Ltmp523 # Offset: 36542
.Ltmp305:
    00008ec3: 	leaq	DATAat0x242a8(%rip), %rsi
    00008eca: 	movl	$0x1, %edi
    00008ecf: 	xorl	%eax, %eax
    00008ed1: 	callq	__printf_chk@PLT # Offset: 36561
    00008ed6: 	jmp	.Ltmp524 # Offset: 36566
.Ltmp295:
    00008edb: 	leaq	DATAat0x242a8(%rip), %rsi
    00008ee2: 	movl	$0x1, %edi
    00008ee7: 	xorl	%eax, %eax
    00008ee9: 	callq	__printf_chk@PLT # Offset: 36585
    00008eee: 	jmp	.Ltmp525 # Offset: 36590
.Ltmp285:
    00008ef3: 	leaq	DATAat0x242d8(%rip), %rsi
    00008efa: 	movl	$0x1, %edi
    00008eff: 	xorl	%eax, %eax
    00008f01: 	callq	__printf_chk@PLT # Offset: 36609
    00008f06: 	jmp	.Ltmp526 # Offset: 36614
.Ltmp275:
    00008f0b: 	leaq	DATAat0x24308(%rip), %rsi
    00008f12: 	movl	$0x1, %edi
    00008f17: 	xorl	%eax, %eax
    00008f19: 	callq	__printf_chk@PLT # Offset: 36633
    00008f1e: 	jmp	.Ltmp527 # Offset: 36638
.Ltmp267:
    00008f23: 	leaq	DATAat0x24330(%rip), %rsi
    00008f2a: 	movl	$0x1, %edi
    00008f2f: 	xorl	%eax, %eax
    00008f31: 	callq	__printf_chk@PLT # Offset: 36657
    00008f36: 	jmp	.Ltmp528 # Offset: 36662
.Ltmp259:
    00008f3b: 	leaq	DATAat0x24358(%rip), %rsi
    00008f42: 	movl	$0x1, %edi
    00008f47: 	xorl	%eax, %eax
    00008f49: 	callq	__printf_chk@PLT # Offset: 36681
    00008f4e: 	jmp	.Ltmp529 # Offset: 36686
.Ltmp251:
    00008f53: 	leaq	DATAat0x24380(%rip), %rsi
    00008f5a: 	movl	$0x1, %edi
    00008f5f: 	xorl	%eax, %eax
    00008f61: 	callq	__printf_chk@PLT # Offset: 36705
    00008f66: 	jmp	.Ltmp530 # Offset: 36710
.Ltmp248:
    00008f6b: 	movl	%r8d, %eax
    00008f6e: 	jmp	.Ltmp531 # Offset: 36718
.Ltmp226:
    00008f73: 	movl	0x1b8(%rsp), %eax
    00008f7a: 	testl	%eax, %eax
    00008f7c: 	jle	.Ltmp227 # Offset: 36732
    00008f7e: 	leal	-0x1(%rax), %esi
    00008f81: 	jmp	.Ltmp532 # Offset: 36737
.Ltmp318:
    00008f86: 	movl	$0x0, 0x70(%rsp)
    00008f8e: 	movl	0x70(%rsp), %edi
    00008f92: 	jmp	.Ltmp533 # Offset: 36754
.Ltmp227:
    00008f97: 	movq	0x38(%rsp), %rax
    00008f9c: 	leaq	0xc88(%rax), %rdi
    00008fa3: 	movq	$0x0, (%rax)
    00008faa: 	movq	%rdi, 0xc0(%rsp)
    00008fb2: 	leaq	0x8(%rax), %rdi
    00008fb6: 	movq	$0x0, 0xc78(%rax)
    00008fc1: 	movq	%rdi, 0xb8(%rsp)
    00008fc9: 	andq	$-0x8, %rdi
    00008fcd: 	subq	%rdi, %rax
    00008fd0: 	movq	%rax, %rcx
    00008fd3: 	xorl	%eax, %eax
    00008fd5: 	addl	$0xc80, %ecx
    00008fdb: 	shrl	$0x3, %ecx
    00008fde: 	rep		stosq	%rax, %es:(%rdi)
    00008fe1: 	jmp	.Ltmp237 # Offset: 36833
.Ltmp489:
    00008fe6: 	callq	__stack_chk_fail@PLT # Offset: 36838
DWARF CFI Instructions:
    <empty>
End of Function "_Z16verify_matvecmulIfEvPT_S1_S1_ii"

Binary Function "_Z16verify_matvecmulIdEvPT_S1_S1_ii" after disassembly {
  Number      : 84
  State       : disassembled
  Address     : 0xe0d0
  Size        : 0x74e9
  MaxSize     : 0x74f0
  Offset      : 0xe0d0
  Section     : .text
  Orc Section : .local.text._Z16verify_matvecmulIdEvPT_S1_S1_ii
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB083:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x1000, %rsp
    00000015: 	orq	$0x0, (%rsp)
    0000001a: 	subq	$0xb68, %rsp
    00000021: 	movl	%ecx, 0xcc(%rsp)
    00000028: 	movq	%rdi, %r15
    0000002b: 	movl	$0x320, %ecx
    00000030: 	movq	%rdx, %r14
    00000033: 	movq	%rsi, 0xa8(%rsp)
    0000003b: 	leaq	0x250(%rsp), %rdi
    00000043: 	movl	%r8d, 0x84(%rsp)
    0000004b: 	movq	%fs:0x28, %rax
    00000054: 	movq	%rax, 0x1b58(%rsp)
    0000005c: 	xorl	%eax, %eax
    0000005e: 	movq	%rdi, 0x1e0(%rsp)
    00000066: 	rep		stosq	%rax, %es:(%rdi)
.Ltmp534:
    00000069: 	pxor	%xmm0, %xmm0
    0000006d: 	cvtsi2sd	%rax, %xmm0
    00000072: 	movsd	%xmm0, (%r15,%rax,8)
    00000078: 	addq	$0x1, %rax
    0000007c: 	cmpq	$0x258, %rax
    00000082: 	jne	.Ltmp534 # Offset: 130
    00000084: 	movl	0x84(%rsp), %r10d
    0000008c: 	testl	%r10d, %r10d
    0000008f: 	jle	.Ltmp535 # Offset: 143
    00000095: 	movl	0xcc(%rsp), %r11d
    0000009d: 	testl	%r11d, %r11d
    000000a0: 	jle	.Ltmp536 # Offset: 160
    000000a6: 	movl	%r11d, %eax
    000000a9: 	movslq	%r11d, %r8
    000000ac: 	movl	%r11d, %r9d
    000000af: 	movq	%r14, %rdi
    000000b2: 	shrl	%eax
    000000b4: 	shlq	$0x3, %r8
    000000b8: 	andl	$-0x2, %r9d
    000000bc: 	xorl	%edx, %edx
    000000be: 	leal	-0x1(%rax), %ecx
    000000c1: 	xorl	%esi, %esi
    000000c3: 	addq	$0x1, %rcx
    000000c7: 	shlq	$0x4, %rcx
.Ltmp540:
    000000cb: 	pxor	%xmm0, %xmm0
    000000cf: 	cvtsi2sd	%esi, %xmm0
    000000d3: 	cmpl	$0x1, %r11d
    000000d7: 	je	.Ltmp537 # Offset: 215
    000000dd: 	movapd	%xmm0, %xmm1
    000000e1: 	leaq	(%rcx,%rdi), %r10
    000000e5: 	movq	%rdi, %rax
    000000e8: 	unpcklpd	%xmm1, %xmm1
.Ltmp538:
    000000ec: 	movups	%xmm1, (%rax)
    000000ef: 	addq	$0x10, %rax
    000000f3: 	cmpq	%r10, %rax
    000000f6: 	jne	.Ltmp538 # Offset: 246
    000000f8: 	movl	%r9d, %eax
    000000fb: 	cmpl	%r9d, %r11d
    000000fe: 	je	.Ltmp539 # Offset: 254
.Ltmp813:
    00000100: 	addl	%edx, %eax
    00000102: 	cltq
    00000104: 	movsd	%xmm0, (%r14,%rax,8)
.Ltmp539:
    0000010a: 	addl	$0x1, %esi
    0000010d: 	addl	%r11d, %edx
    00000110: 	addq	%r8, %rdi
    00000113: 	cmpl	%esi, 0x84(%rsp)
    0000011a: 	jne	.Ltmp540 # Offset: 282
.Ltmp837:
    0000011c: 	movl	0xcc(%rsp), %eax
    00000123: 	movl	0x84(%rsp), %r11d
    0000012b: 	xorl	%ecx, %ecx
    0000012d: 	movq	0x1e0(%rsp), %rdi
    00000135: 	subl	$0x1, %eax
    00000138: 	movl	%r11d, %r8d
    0000013b: 	movq	%rax, %rdx
    0000013e: 	leaq	0x258(%rsp,%rax,8), %r9
    00000146: 	movl	%r11d, %eax
    00000149: 	andl	$-0x2, %r8d
    0000014d: 	shrl	%eax
    0000014f: 	leal	-0x1(%rax), %esi
    00000152: 	addq	$0x1, %rsi
    00000156: 	shlq	$0x4, %rsi
.Ltmp545:
    0000015a: 	testl	%r11d, %r11d
    0000015d: 	jle	.Ltmp541 # Offset: 349
    0000015f: 	movsd	(%rdi), %xmm1
    00000163: 	cmpl	$0x1, %r11d
    00000167: 	je	.Ltmp542 # Offset: 359
    0000016d: 	movslq	%ecx, %rax
    00000170: 	leaq	(%r14,%rax,8), %r10
    00000174: 	xorl	%eax, %eax
.Ltmp543:
    00000176: 	movupd	(%r10,%rax), %xmm0
    0000017c: 	movupd	(%r15,%rax), %xmm4
    00000182: 	addq	$0x10, %rax
    00000186: 	mulpd	%xmm4, %xmm0
    0000018a: 	addsd	%xmm0, %xmm1
    0000018e: 	unpckhpd	%xmm0, %xmm0
    00000192: 	addsd	%xmm0, %xmm1
    00000196: 	cmpq	%rax, %rsi
    00000199: 	jne	.Ltmp543 # Offset: 409
    0000019b: 	movslq	%r8d, %rax
    0000019e: 	cmpl	%r8d, %r11d
    000001a1: 	je	.Ltmp544 # Offset: 417
.Ltmp812:
    000001a3: 	leal	(%rcx,%rax), %r10d
    000001a7: 	movslq	%r10d, %r10
    000001aa: 	movsd	(%r14,%r10,8), %xmm0
    000001b0: 	mulsd	(%r15,%rax,8), %xmm0
    000001b6: 	addsd	%xmm0, %xmm1
.Ltmp544:
    000001ba: 	movsd	%xmm1, (%rdi)
.Ltmp541:
    000001be: 	addq	$0x8, %rdi
    000001c2: 	addl	%r11d, %ecx
    000001c5: 	cmpq	%r9, %rdi
    000001c8: 	jne	.Ltmp545 # Offset: 456
    000001ca: 	movq	0xa8(%rsp), %rax
    000001d2: 	leaq	0x1908(%rax), %rbx
    000001d9: 	movq	$0x0, (%rax)
    000001e0: 	movq	%rbx, 0xa0(%rsp)
    000001e8: 	leaq	0x8(%rax), %rbx
    000001ec: 	movq	$0x0, 0x18f8(%rax)
    000001f7: 	movq	%rbx, 0x40(%rsp)
    000001fc: 	andq	$-0x8, %rbx
    00000200: 	subq	%rbx, %rax
    00000203: 	movq	%rbx, %rdi
    00000206: 	movq	%rax, %rcx
    00000209: 	xorl	%eax, %eax
    0000020b: 	addl	$0x1900, %ecx
    00000211: 	shrl	$0x3, %ecx
    00000214: 	rep		stosq	%rax, %es:(%rdi)
    00000217: 	movl	0x84(%rsp), %eax
    0000021e: 	testl	%eax, %eax
    00000220: 	jle	.Ltmp546 # Offset: 544
    00000222: 	movslq	0x84(%rsp), %r8
    0000022a: 	movq	0x40(%rsp), %rax
    0000022f: 	movq	%r14, %rsi
    00000232: 	movq	0xa8(%rsp), %rcx
    0000023a: 	leaq	(,%r8,8), %rdi
    00000242: 	leaq	(%rax,%rdx,8), %rdx
.Ltmp548:
    00000246: 	movsd	(%rcx), %xmm1
    0000024a: 	xorl	%eax, %eax
    0000024c: 	nopl	(%rax) # Size: 4
.Ltmp547:
    00000250: 	movsd	(%rsi,%rax,8), %xmm0
    00000255: 	mulsd	(%r15,%rax,8), %xmm0
    0000025b: 	addq	$0x1, %rax
    0000025f: 	addsd	%xmm0, %xmm1
    00000263: 	movsd	%xmm1, (%rcx)
    00000267: 	cmpq	%r8, %rax
    0000026a: 	jne	.Ltmp547 # Offset: 618
    0000026c: 	addq	$0x8, %rcx
    00000270: 	addq	%rdi, %rsi
    00000273: 	cmpq	%rdx, %rcx
    00000276: 	jne	.Ltmp548 # Offset: 630
.Ltmp546:
    00000278: 	xorl	%eax, %eax
.Ltmp551:
    0000027a: 	movq	0x1e0(%rsp), %rbx
    00000282: 	movsd	(%rbx,%rax,8), %xmm1
    00000287: 	movq	0xa8(%rsp), %rbx
    0000028f: 	movapd	%xmm1, %xmm2
    00000293: 	andpd	DATAat0x24940(%rip), %xmm2
    0000029b: 	movapd	%xmm1, %xmm0
    0000029f: 	comisd	DATAat0x24978(%rip), %xmm2
    000002a7: 	subsd	(%rbx,%rax,8), %xmm0
    000002ac: 	jbe	.Ltmp549 # Offset: 684
    000002ae: 	divsd	%xmm1, %xmm0
.Ltmp549:
    000002b2: 	andpd	DATAat0x24940(%rip), %xmm0
    000002ba: 	movsd	DATAat0x24980(%rip), %xmm4
    000002c2: 	comisd	%xmm0, %xmm4
    000002c6: 	jbe	.Ltmp550 # Offset: 710
    000002cc: 	addq	$0x1, %rax
    000002d0: 	cmpq	$0x320, %rax
    000002d6: 	jne	.Ltmp551 # Offset: 726
.Ltmp814:
    000002d8: 	movq	0xa8(%rsp), %rax
    000002e0: 	movq	$0x0, (%rax)
    000002e7: 	movq	0xa0(%rsp), %rbx
    000002ef: 	movq	$0x0, -0x10(%rbx)
    000002f7: 	movq	0x40(%rsp), %rdi
    000002fc: 	andq	$-0x8, %rdi
    00000300: 	subq	%rdi, %rax
    00000303: 	movq	%rax, %rcx
    00000306: 	xorl	%eax, %eax
    00000308: 	addl	$0x1900, %ecx
    0000030e: 	shrl	$0x3, %ecx
    00000311: 	rep		stosq	%rax, %es:(%rdi)
    00000314: 	movl	0x84(%rsp), %edx
    0000031b: 	testl	%edx, %edx
    0000031d: 	jle	.Ltmp552 # Offset: 797
    00000323: 	movl	0xcc(%rsp), %ebx
    0000032a: 	testl	%ebx, %ebx
    0000032c: 	jle	.Ltmp552 # Offset: 812
    00000332: 	movslq	%ebx, %rax
    00000335: 	movl	%ebx, %r13d
    00000338: 	movq	%r15, %rbp
    0000033b: 	movq	%r14, %r12
    0000033e: 	movslq	0x84(%rsp), %rdi
    00000346: 	movq	0xa8(%rsp), %rsi
    0000034e: 	andl	$-0x2, %r13d
    00000352: 	leaq	(%rsi,%rax,8), %rdx
    00000356: 	subq	$0x1, %rax
    0000035a: 	movq	%rdi, %rcx
    0000035d: 	movq	%rdi, (%rsp)
    00000361: 	leaq	(,%rdi,8), %r8
    00000369: 	movq	%rdx, 0x18(%rsp)
    0000036e: 	shlq	$0x4, %rdi
    00000372: 	movq	%r8, %rdx
    00000375: 	imull	%r13d, %ecx
    00000379: 	movq	%rdi, %r10
    0000037c: 	imulq	%rax, %rdx
    00000380: 	leaq	(%rsi,%rax,8), %rax
    00000384: 	movq	%rax, 0x28(%rsp)
    00000389: 	movl	%ebx, %eax
    0000038b: 	shrl	%eax
    0000038d: 	movl	%ecx, %r9d
    00000390: 	subl	$0x1, %eax
    00000393: 	movq	%rdx, 0x20(%rsp)
    00000398: 	shlq	$0x4, %rax
    0000039c: 	leaq	0x10(%rsi,%rax), %r11
    000003a1: 	movl	%r13d, %eax
    000003a4: 	leaq	(%rsi,%rax,8), %rsi
    000003a8: 	leal	-0x1(%rbx), %eax
    000003ab: 	movq	0x40(%rsp), %rbx
    000003b0: 	movl	%eax, 0x10(%rsp)
    000003b4: 	leaq	(%rbx,%rax,8), %rax
    000003b8: 	xorl	%ebx, %ebx
    000003ba: 	movq	%rax, 0x8(%rsp)
.Ltmp556:
    000003bf: 	movq	0x20(%rsp), %rcx
    000003c4: 	leaq	(,%rbx,8), %rdx
    000003cc: 	movq	%rbp, %rdi
    000003cf: 	movl	%ebx, %eax
    000003d1: 	addq	$0x8, %rbp
    000003d5: 	addq	%rdx, %rcx
    000003d8: 	addq	%r14, %rcx
    000003db: 	cmpq	%rcx, 0xa8(%rsp)
    000003e3: 	seta	%cl
    000003e6: 	addq	%r14, %rdx
    000003e9: 	cmpq	%rdx, 0x28(%rsp)
    000003ee: 	setb	%dl
    000003f1: 	orb	%cl, %dl
    000003f3: 	je	.Ltmp553 # Offset: 1011
    000003f9: 	cmpq	%rbp, 0xa8(%rsp)
    00000401: 	setae	%cl
    00000404: 	cmpq	0x18(%rsp), %rdi
    00000409: 	setae	%dl
    0000040c: 	orl	%ecx, %edx
    0000040e: 	cmpl	$0x1, 0x10(%rsp)
    00000413: 	seta	%cl
    00000416: 	testb	%cl, %dl
    00000418: 	je	.Ltmp553 # Offset: 1048
    0000041e: 	movsd	(%rdi), %xmm1
    00000422: 	movq	0xa8(%rsp), %rdx
    0000042a: 	movq	%r12, %rcx
    0000042d: 	unpcklpd	%xmm1, %xmm1
.Ltmp554:
    00000431: 	movsd	(%rcx), %xmm0
    00000435: 	movupd	(%rdx), %xmm4
    00000439: 	addq	$0x10, %rdx
    0000043d: 	movhpd	(%rcx,%r8), %xmm0
    00000443: 	addq	%r10, %rcx
    00000446: 	mulpd	%xmm1, %xmm0
    0000044a: 	addpd	%xmm4, %xmm0
    0000044e: 	movups	%xmm0, -0x10(%rdx)
    00000452: 	cmpq	%r11, %rdx
    00000455: 	jne	.Ltmp554 # Offset: 1109
    00000457: 	cmpl	%r13d, 0xcc(%rsp)
    0000045f: 	je	.Ltmp555 # Offset: 1119
    00000461: 	addl	%r9d, %eax
    00000464: 	cltq
    00000466: 	movsd	(%r14,%rax,8), %xmm0
    0000046c: 	mulsd	(%rdi), %xmm0
    00000470: 	addsd	(%rsi), %xmm0
    00000474: 	movsd	%xmm0, (%rsi)
.Ltmp555:
    00000478: 	addq	$0x1, %rbx
    0000047c: 	addq	$0x8, %r12
    00000480: 	cmpq	(%rsp), %rbx
    00000484: 	jne	.Ltmp556 # Offset: 1156
.Ltmp552:
    0000048a: 	xorl	%eax, %eax
.Ltmp559:
    0000048c: 	movq	0x1e0(%rsp), %rbx
    00000494: 	movsd	(%rbx,%rax,8), %xmm1
    00000499: 	movq	0xa8(%rsp), %rbx
    000004a1: 	movapd	%xmm1, %xmm2
    000004a5: 	andpd	DATAat0x24940(%rip), %xmm2
    000004ad: 	movapd	%xmm1, %xmm0
    000004b1: 	comisd	DATAat0x24978(%rip), %xmm2
    000004b9: 	subsd	(%rbx,%rax,8), %xmm0
    000004be: 	jbe	.Ltmp557 # Offset: 1214
    000004c0: 	divsd	%xmm1, %xmm0
.Ltmp557:
    000004c4: 	andpd	DATAat0x24940(%rip), %xmm0
    000004cc: 	movsd	DATAat0x24980(%rip), %xmm4
    000004d4: 	comisd	%xmm0, %xmm4
    000004d8: 	jbe	.Ltmp558 # Offset: 1240
    000004de: 	addq	$0x1, %rax
    000004e2: 	cmpq	$0x320, %rax
    000004e8: 	jne	.Ltmp559 # Offset: 1256
.Ltmp836:
    000004ea: 	movq	0xa8(%rsp), %rax
    000004f2: 	movq	$0x0, (%rax)
    000004f9: 	movq	0xa0(%rsp), %rbx
    00000501: 	movq	$0x0, -0x10(%rbx)
    00000509: 	movq	0x40(%rsp), %rdi
    0000050e: 	andq	$-0x8, %rdi
    00000512: 	subq	%rdi, %rax
    00000515: 	movq	%rax, %rcx
    00000518: 	xorl	%eax, %eax
    0000051a: 	addl	$0x1900, %ecx
    00000520: 	shrl	$0x3, %ecx
    00000523: 	rep		stosq	%rax, %es:(%rdi)
    00000526: 	movl	0xcc(%rsp), %ecx
    0000052d: 	testl	%ecx, %ecx
    0000052f: 	jle	.Ltmp560 # Offset: 1327
    00000535: 	movl	0xcc(%rsp), %eax
    0000053c: 	movq	0x40(%rsp), %rbx
    00000541: 	xorl	%edx, %edx
    00000543: 	movl	0x84(%rsp), %r10d
    0000054b: 	movq	0xa8(%rsp), %rsi
    00000553: 	subl	$0x1, %eax
    00000556: 	leaq	(%rbx,%rax,8), %r8
    0000055a: 	movl	%r10d, %eax
    0000055d: 	movl	%r10d, %edi
    00000560: 	shrl	%eax
    00000562: 	andl	$-0x2, %edi
    00000565: 	leal	-0x1(%rax), %ecx
    00000568: 	addq	$0x1, %rcx
    0000056c: 	shlq	$0x4, %rcx
.Ltmp564:
    00000570: 	movsd	(%rsi), %xmm1
    00000574: 	testl	%r10d, %r10d
    00000577: 	jle	.Ltmp561 # Offset: 1399
    00000579: 	cmpl	$0x1, %r10d
    0000057d: 	je	.Ltmp562 # Offset: 1405
    00000583: 	movslq	%edx, %rax
    00000586: 	leaq	(%r14,%rax,8), %r9
    0000058a: 	xorl	%eax, %eax
.Ltmp563:
    0000058c: 	movupd	(%r9,%rax), %xmm0
    00000592: 	movupd	(%r15,%rax), %xmm4
    00000598: 	addq	$0x10, %rax
    0000059c: 	mulpd	%xmm4, %xmm0
    000005a0: 	addsd	%xmm0, %xmm1
    000005a4: 	unpckhpd	%xmm0, %xmm0
    000005a8: 	addsd	%xmm0, %xmm1
    000005ac: 	cmpq	%rcx, %rax
    000005af: 	jne	.Ltmp563 # Offset: 1455
    000005b1: 	movslq	%edi, %rax
    000005b4: 	cmpl	%edi, %r10d
    000005b7: 	je	.Ltmp561 # Offset: 1463
.Ltmp811:
    000005b9: 	leal	(%rdx,%rax), %r9d
    000005bd: 	movslq	%r9d, %r9
    000005c0: 	movsd	(%r14,%r9,8), %xmm0
    000005c6: 	mulsd	(%r15,%rax,8), %xmm0
    000005cc: 	addsd	%xmm0, %xmm1
.Ltmp561:
    000005d0: 	movsd	%xmm1, (%rsi)
    000005d4: 	addq	$0x8, %rsi
    000005d8: 	addl	%r10d, %edx
    000005db: 	cmpq	%r8, %rsi
    000005de: 	jne	.Ltmp564 # Offset: 1502
.Ltmp560:
    000005e0: 	xorl	%eax, %eax
.Ltmp567:
    000005e2: 	movq	0x1e0(%rsp), %rbx
    000005ea: 	movsd	(%rbx,%rax,8), %xmm1
    000005ef: 	movq	0xa8(%rsp), %rbx
    000005f7: 	movapd	%xmm1, %xmm2
    000005fb: 	andpd	DATAat0x24940(%rip), %xmm2
    00000603: 	movapd	%xmm1, %xmm0
    00000607: 	comisd	DATAat0x24978(%rip), %xmm2
    0000060f: 	subsd	(%rbx,%rax,8), %xmm0
    00000614: 	jbe	.Ltmp565 # Offset: 1556
    00000616: 	divsd	%xmm1, %xmm0
.Ltmp565:
    0000061a: 	andpd	DATAat0x24940(%rip), %xmm0
    00000622: 	movsd	DATAat0x24980(%rip), %xmm4
    0000062a: 	comisd	%xmm0, %xmm4
    0000062e: 	jbe	.Ltmp566 # Offset: 1582
    00000634: 	addq	$0x1, %rax
    00000638: 	cmpq	$0x320, %rax
    0000063e: 	jne	.Ltmp567 # Offset: 1598
.Ltmp835:
    00000640: 	movq	0xa8(%rsp), %rax
    00000648: 	movq	$0x0, (%rax)
    0000064f: 	movq	0xa0(%rsp), %rbx
    00000657: 	movq	$0x0, -0x10(%rbx)
    0000065f: 	movq	0x40(%rsp), %rdi
    00000664: 	andq	$-0x8, %rdi
    00000668: 	subq	%rdi, %rax
    0000066b: 	movq	%rax, %rcx
    0000066e: 	xorl	%eax, %eax
    00000670: 	addl	$0x1900, %ecx
    00000676: 	shrl	$0x3, %ecx
    00000679: 	rep		stosq	%rax, %es:(%rdi)
    0000067c: 	movl	0xcc(%rsp), %esi
    00000683: 	testl	%esi, %esi
    00000685: 	jle	.Ltmp568 # Offset: 1669
    0000068b: 	movl	0x84(%rsp), %r10d
    00000693: 	movq	0x40(%rsp), %rdi
    00000698: 	xorl	%edx, %edx
    0000069a: 	movq	0xa8(%rsp), %rsi
    000006a2: 	movslq	%r10d, %rax
    000006a5: 	movq	%rax, (%rsp)
    000006a9: 	movl	0xcc(%rsp), %eax
    000006b0: 	subl	$0x1, %eax
    000006b3: 	leaq	(%rdi,%rax,8), %r9
    000006b7: 	movl	%r10d, %eax
    000006ba: 	movl	%r10d, %edi
    000006bd: 	shrl	%eax
    000006bf: 	andl	$-0x2, %edi
    000006c2: 	leal	-0x1(%rax), %ecx
    000006c5: 	addq	$0x1, %rcx
    000006c9: 	shlq	$0x4, %rcx
.Ltmp572:
    000006cd: 	movsd	(%rsi), %xmm0
    000006d1: 	testl	%r10d, %r10d
    000006d4: 	jle	.Ltmp569 # Offset: 1748
    000006d6: 	cmpl	$0x1, %r10d
    000006da: 	je	.Ltmp570 # Offset: 1754
    000006e0: 	leaq	(%r14,%rdx,8), %r8
    000006e4: 	xorl	%eax, %eax
.Ltmp571:
    000006e6: 	movupd	(%r8,%rax), %xmm2
    000006ec: 	movupd	(%r15,%rax), %xmm4
    000006f2: 	addq	$0x10, %rax
    000006f6: 	mulpd	%xmm4, %xmm2
    000006fa: 	addsd	%xmm2, %xmm0
    000006fe: 	unpckhpd	%xmm2, %xmm2
    00000702: 	addsd	%xmm2, %xmm0
    00000706: 	cmpq	%rcx, %rax
    00000709: 	jne	.Ltmp571 # Offset: 1801
    0000070b: 	movslq	%edi, %rax
    0000070e: 	cmpl	%edi, %r10d
    00000711: 	je	.Ltmp569 # Offset: 1809
.Ltmp810:
    00000713: 	leaq	(%rdx,%rax), %r8
    00000717: 	movsd	(%r14,%r8,8), %xmm1
    0000071d: 	mulsd	(%r15,%rax,8), %xmm1
    00000723: 	addsd	%xmm1, %xmm0
.Ltmp569:
    00000727: 	movsd	%xmm0, (%rsi)
    0000072b: 	addq	$0x8, %rsi
    0000072f: 	addq	(%rsp), %rdx
    00000733: 	cmpq	%rsi, %r9
    00000736: 	jne	.Ltmp572 # Offset: 1846
.Ltmp568:
    00000738: 	xorl	%eax, %eax
.Ltmp575:
    0000073a: 	movq	0x1e0(%rsp), %rbx
    00000742: 	movsd	(%rbx,%rax,8), %xmm1
    00000747: 	movq	0xa8(%rsp), %rbx
    0000074f: 	movapd	%xmm1, %xmm2
    00000753: 	andpd	DATAat0x24940(%rip), %xmm2
    0000075b: 	movapd	%xmm1, %xmm0
    0000075f: 	comisd	DATAat0x24978(%rip), %xmm2
    00000767: 	subsd	(%rbx,%rax,8), %xmm0
    0000076c: 	jbe	.Ltmp573 # Offset: 1900
    0000076e: 	divsd	%xmm1, %xmm0
.Ltmp573:
    00000772: 	andpd	DATAat0x24940(%rip), %xmm0
    0000077a: 	movsd	DATAat0x24980(%rip), %xmm4
    00000782: 	comisd	%xmm0, %xmm4
    00000786: 	jbe	.Ltmp574 # Offset: 1926
    0000078c: 	addq	$0x1, %rax
    00000790: 	cmpq	$0x320, %rax
    00000796: 	jne	.Ltmp575 # Offset: 1942
.Ltmp834:
    00000798: 	movq	0xa8(%rsp), %rax
    000007a0: 	movq	$0x0, (%rax)
    000007a7: 	movq	0xa0(%rsp), %rbx
    000007af: 	movq	$0x0, -0x10(%rbx)
    000007b7: 	movq	0x40(%rsp), %rdi
    000007bc: 	andq	$-0x8, %rdi
    000007c0: 	subq	%rdi, %rax
    000007c3: 	movq	%rax, %rcx
    000007c6: 	xorl	%eax, %eax
    000007c8: 	addl	$0x1900, %ecx
    000007ce: 	shrl	$0x3, %ecx
    000007d1: 	rep		stosq	%rax, %es:(%rdi)
    000007d4: 	movl	0x84(%rsp), %edi
    000007db: 	testl	%edi, %edi
    000007dd: 	jle	.Ltmp576 # Offset: 2013
    000007e3: 	movl	0xcc(%rsp), %esi
    000007ea: 	testl	%esi, %esi
    000007ec: 	jle	.Ltmp576 # Offset: 2028
    000007f2: 	movslq	0x84(%rsp), %rcx
    000007fa: 	movslq	%esi, %rax
    000007fd: 	movq	%r14, %rbx
    00000800: 	subq	$0x1, %rax
    00000804: 	leaq	(,%rcx,8), %rdi
    0000080c: 	movq	%rcx, %rdx
    0000080f: 	movq	%rcx, (%rsp)
    00000813: 	shlq	$0x4, %rcx
    00000817: 	movq	%rdi, %r11
    0000081a: 	movq	%rcx, %r9
    0000081d: 	movl	%esi, %ecx
    0000081f: 	imulq	%rax, %r11
    00000823: 	movq	%r11, 0x8(%rsp)
    00000828: 	movq	0xa8(%rsp), %r11
    00000830: 	leaq	(%r11,%rax,8), %rax
    00000834: 	movq	%rax, 0x10(%rsp)
    00000839: 	movl	%esi, %eax
    0000083b: 	andl	$-0x2, %esi
    0000083e: 	shrl	%eax
    00000840: 	subl	$0x1, %eax
    00000843: 	shlq	$0x4, %rax
    00000847: 	leaq	0x10(%r11,%rax), %r10
    0000084c: 	movl	%esi, %eax
    0000084e: 	imull	%eax, %edx
    00000851: 	leaq	(%r11,%rax,8), %rsi
    00000855: 	movq	%rax, %rbp
    00000858: 	xorl	%r11d, %r11d
    0000085b: 	leal	-0x1(%rcx), %eax
    0000085e: 	movq	0x40(%rsp), %rcx
    00000863: 	movq	%rax, %r12
    00000866: 	movl	%edx, %r8d
    00000869: 	leaq	(%rcx,%rax,8), %r13
.Ltmp580:
    0000086d: 	movq	0x8(%rsp), %rcx
    00000872: 	leaq	(,%r11,8), %rdx
    0000087a: 	movsd	(%r15,%r11,8), %xmm1
    00000880: 	movl	%r11d, %eax
    00000883: 	addq	%rdx, %rcx
    00000886: 	addq	%r14, %rcx
    00000889: 	cmpq	%rcx, 0xa8(%rsp)
    00000891: 	seta	%cl
    00000894: 	addq	%r14, %rdx
    00000897: 	cmpq	%rdx, 0x10(%rsp)
    0000089c: 	setb	%dl
    0000089f: 	orb	%cl, %dl
    000008a1: 	je	.Ltmp577 # Offset: 2209
    000008a7: 	movapd	%xmm1, %xmm2
    000008ab: 	movq	0xa8(%rsp), %rdx
    000008b3: 	movq	%rbx, %rcx
    000008b6: 	unpcklpd	%xmm2, %xmm2
    000008ba: 	cmpl	$0x2, %r12d
    000008be: 	jbe	.Ltmp577 # Offset: 2238
.Ltmp578:
    000008c4: 	movsd	(%rcx), %xmm0
    000008c8: 	movupd	(%rdx), %xmm4
    000008cc: 	addq	$0x10, %rdx
    000008d0: 	movhpd	(%rcx,%rdi), %xmm0
    000008d5: 	addq	%r9, %rcx
    000008d8: 	mulpd	%xmm2, %xmm0
    000008dc: 	addpd	%xmm4, %xmm0
    000008e0: 	movups	%xmm0, -0x10(%rdx)
    000008e4: 	cmpq	%rdx, %r10
    000008e7: 	jne	.Ltmp578 # Offset: 2279
    000008e9: 	cmpl	%ebp, 0xcc(%rsp)
    000008f0: 	je	.Ltmp579 # Offset: 2288
    000008f2: 	addl	%r8d, %eax
    000008f5: 	movsd	(%rsi), %xmm0
    000008f9: 	cltq
    000008fb: 	mulsd	(%r14,%rax,8), %xmm1
    00000901: 	addsd	%xmm1, %xmm0
    00000905: 	movsd	%xmm0, (%rsi)
.Ltmp579:
    00000909: 	addq	$0x1, %r11
    0000090d: 	addq	$0x8, %rbx
    00000911: 	cmpq	(%rsp), %r11
    00000915: 	jne	.Ltmp580 # Offset: 2325
.Ltmp576:
    0000091b: 	xorl	%eax, %eax
.Ltmp583:
    0000091d: 	movq	0x1e0(%rsp), %rbx
    00000925: 	movsd	(%rbx,%rax,8), %xmm1
    0000092a: 	movq	0xa8(%rsp), %rbx
    00000932: 	movapd	%xmm1, %xmm2
    00000936: 	andpd	DATAat0x24940(%rip), %xmm2
    0000093e: 	movapd	%xmm1, %xmm0
    00000942: 	comisd	DATAat0x24978(%rip), %xmm2
    0000094a: 	subsd	(%rbx,%rax,8), %xmm0
    0000094f: 	jbe	.Ltmp581 # Offset: 2383
    00000951: 	divsd	%xmm1, %xmm0
.Ltmp581:
    00000955: 	andpd	DATAat0x24940(%rip), %xmm0
    0000095d: 	movsd	DATAat0x24980(%rip), %xmm4
    00000965: 	comisd	%xmm0, %xmm4
    00000969: 	jbe	.Ltmp582 # Offset: 2409
    0000096f: 	addq	$0x1, %rax
    00000973: 	cmpq	$0x320, %rax
    00000979: 	jne	.Ltmp583 # Offset: 2425
.Ltmp833:
    0000097b: 	movq	0xa8(%rsp), %rax
    00000983: 	movq	$0x0, (%rax)
    0000098a: 	movq	0xa0(%rsp), %rbx
    00000992: 	movq	$0x0, -0x10(%rbx)
    0000099a: 	movq	0x40(%rsp), %rdi
    0000099f: 	andq	$-0x8, %rdi
    000009a3: 	subq	%rdi, %rax
    000009a6: 	movq	%rax, %rcx
    000009a9: 	xorl	%eax, %eax
    000009ab: 	addl	$0x1900, %ecx
    000009b1: 	shrl	$0x3, %ecx
    000009b4: 	rep		stosq	%rax, %es:(%rdi)
    000009b7: 	movl	0x84(%rsp), %eax
    000009be: 	movl	0xcc(%rsp), %r8d
    000009c6: 	subl	$0x3, %eax
    000009c9: 	movl	%eax, 0xb8(%rsp)
    000009d0: 	testl	%r8d, %r8d
    000009d3: 	jle	.Ltmp584 # Offset: 2515
    000009d9: 	movslq	0x84(%rsp), %rax
    000009e1: 	movq	0x40(%rsp), %rdi
    000009e6: 	movq	0xa8(%rsp), %r11
    000009ee: 	movq	%rax, %rbx
    000009f1: 	movq	%rax, (%rsp)
    000009f5: 	movl	0xcc(%rsp), %eax
    000009fc: 	subl	$0x1, %eax
    000009ff: 	leaq	(%rdi,%rax,8), %rbp
    00000a03: 	leal	-0x4(%rbx), %eax
    00000a06: 	xorl	%ebx, %ebx
    00000a08: 	shrl	$0x2, %eax
    00000a0b: 	leal	0x1(%rax), %r10d
    00000a0f: 	leal	(,%r10,4), %r12d
.Ltmp590:
    00000a17: 	movl	0xb8(%rsp), %r8d
    00000a1f: 	movsd	(%r11), %xmm0
    00000a24: 	leaq	(%r14,%rbx,8), %rcx
    00000a28: 	testl	%r8d, %r8d
    00000a2b: 	jle	.Ltmp585 # Offset: 2603
    00000a31: 	movq	%xmm0, %xmm2
    00000a35: 	xorl	%eax, %eax
    00000a37: 	pxor	%xmm1, %xmm1
    00000a3b: 	xorl	%edx, %edx
    00000a3d: 	nopl	(%rax) # Size: 3
.Ltmp586:
    00000a40: 	movupd	(%r15,%rax), %xmm4
    00000a46: 	movupd	(%rcx,%rax), %xmm0
    00000a4b: 	addl	$0x1, %edx
    00000a4e: 	mulpd	%xmm4, %xmm0
    00000a52: 	movupd	0x10(%r15,%rax), %xmm4
    00000a59: 	addpd	%xmm0, %xmm2
    00000a5d: 	movupd	0x10(%rcx,%rax), %xmm0
    00000a63: 	addq	$0x20, %rax
    00000a67: 	mulpd	%xmm4, %xmm0
    00000a6b: 	addpd	%xmm0, %xmm1
    00000a6f: 	cmpl	%r10d, %edx
    00000a72: 	jb	.Ltmp586 # Offset: 2674
    00000a74: 	movapd	%xmm2, %xmm0
    00000a78: 	movapd	%xmm1, %xmm5
    00000a7c: 	unpckhpd	%xmm2, %xmm2
    00000a80: 	movl	%r12d, %eax
    00000a83: 	unpckhpd	%xmm1, %xmm1
    00000a87: 	movapd	%xmm2, %xmm4
    00000a8b: 	movapd	%xmm1, %xmm3
.Ltmp732:
    00000a8f: 	movl	0x84(%rsp), %edi
    00000a96: 	cmpl	%eax, %edi
    00000a98: 	jle	.Ltmp587 # Offset: 2712
    00000a9a: 	subl	%eax, %edi
    00000a9c: 	movl	%edi, %r9d
    00000a9f: 	cmpl	$0x1, %edi
    00000aa2: 	je	.Ltmp588 # Offset: 2722
    00000aa4: 	movslq	%eax, %rdx
    00000aa7: 	leaq	(%rbx,%rdx), %rsi
    00000aab: 	leaq	(%r15,%rdx,8), %rdi
    00000aaf: 	xorl	%edx, %edx
    00000ab1: 	leaq	(%r14,%rsi,8), %r8
    00000ab5: 	movl	%r9d, %esi
    00000ab8: 	shrl	%esi
    00000aba: 	shlq	$0x4, %rsi
.Ltmp589:
    00000abe: 	movupd	(%r8,%rdx), %xmm2
    00000ac4: 	movupd	(%rdi,%rdx), %xmm7
    00000ac9: 	addq	$0x10, %rdx
    00000acd: 	mulpd	%xmm7, %xmm2
    00000ad1: 	addsd	%xmm2, %xmm0
    00000ad5: 	unpckhpd	%xmm2, %xmm2
    00000ad9: 	addsd	%xmm2, %xmm0
    00000add: 	cmpq	%rsi, %rdx
    00000ae0: 	jne	.Ltmp589 # Offset: 2784
    00000ae2: 	movl	%r9d, %edx
    00000ae5: 	andl	$-0x2, %edx
    00000ae8: 	addl	%edx, %eax
    00000aea: 	cmpl	%edx, %r9d
    00000aed: 	je	.Ltmp587 # Offset: 2797
.Ltmp588:
    00000aef: 	cltq
    00000af1: 	movsd	(%rcx,%rax,8), %xmm1
    00000af6: 	mulsd	(%r15,%rax,8), %xmm1
    00000afc: 	addsd	%xmm1, %xmm0
.Ltmp587:
    00000b00: 	addsd	%xmm4, %xmm0
    00000b04: 	addq	$0x8, %r11
    00000b08: 	addq	(%rsp), %rbx
    00000b0c: 	addsd	%xmm5, %xmm0
    00000b10: 	addsd	%xmm3, %xmm0
    00000b14: 	movsd	%xmm0, -0x8(%r11)
    00000b1a: 	cmpq	%rbp, %r11
    00000b1d: 	jne	.Ltmp590 # Offset: 2845
.Ltmp584:
    00000b23: 	xorl	%eax, %eax
.Ltmp593:
    00000b25: 	movq	0x1e0(%rsp), %rbx
    00000b2d: 	movsd	(%rbx,%rax,8), %xmm1
    00000b32: 	movq	0xa8(%rsp), %rbx
    00000b3a: 	movapd	%xmm1, %xmm2
    00000b3e: 	andpd	DATAat0x24940(%rip), %xmm2
    00000b46: 	movapd	%xmm1, %xmm0
    00000b4a: 	comisd	DATAat0x24978(%rip), %xmm2
    00000b52: 	subsd	(%rbx,%rax,8), %xmm0
    00000b57: 	jbe	.Ltmp591 # Offset: 2903
    00000b59: 	divsd	%xmm1, %xmm0
.Ltmp591:
    00000b5d: 	andpd	DATAat0x24940(%rip), %xmm0
    00000b65: 	movsd	DATAat0x24980(%rip), %xmm4
    00000b6d: 	comisd	%xmm0, %xmm4
    00000b71: 	jbe	.Ltmp592 # Offset: 2929
    00000b77: 	addq	$0x1, %rax
    00000b7b: 	cmpq	$0x320, %rax
    00000b81: 	jne	.Ltmp593 # Offset: 2945
.Ltmp832:
    00000b83: 	movq	0xa8(%rsp), %rax
    00000b8b: 	movq	$0x0, (%rax)
    00000b92: 	movq	0xa0(%rsp), %rbx
    00000b9a: 	movq	$0x0, -0x10(%rbx)
    00000ba2: 	movq	0x40(%rsp), %rdi
    00000ba7: 	andq	$-0x8, %rdi
    00000bab: 	subq	%rdi, %rax
    00000bae: 	movq	%rax, %rcx
    00000bb1: 	xorl	%eax, %eax
    00000bb3: 	addl	$0x1900, %ecx
    00000bb9: 	shrl	$0x3, %ecx
    00000bbc: 	rep		stosq	%rax, %es:(%rdi)
    00000bbf: 	movl	0xcc(%rsp), %r9d
    00000bc7: 	testl	%r9d, %r9d
    00000bca: 	jle	.Ltmp594 # Offset: 3018
    00000bd0: 	movslq	0x84(%rsp), %rax
    00000bd8: 	movq	0x40(%rsp), %rdi
    00000bdd: 	movq	%r14, %r9
    00000be0: 	pxor	%xmm2, %xmm2
    00000be4: 	movq	0xa8(%rsp), %r11
    00000bec: 	movq	%rax, %rbx
    00000bef: 	movq	%rax, (%rsp)
    00000bf3: 	leaq	(,%rax,8), %rbp
    00000bfb: 	movl	0xcc(%rsp), %eax
    00000c02: 	subl	$0x1, %eax
    00000c05: 	leaq	(%rdi,%rax,8), %r12
    00000c09: 	leal	-0x8(%rbx), %eax
    00000c0c: 	xorl	%ebx, %ebx
    00000c0e: 	shrl	$0x3, %eax
    00000c11: 	leal	0x1(%rax), %r10d
    00000c15: 	leal	(,%r10,8), %r13d
.Ltmp600:
    00000c1d: 	cmpl	$0x7, 0x84(%rsp)
    00000c25: 	movsd	(%r11), %xmm0
    00000c2a: 	jle	.Ltmp595 # Offset: 3114
    00000c30: 	pxor	%xmm4, %xmm4
    00000c34: 	movq	%xmm0, %xmm9
    00000c39: 	movq	%r15, %rdx
    00000c3c: 	movq	%r9, %rax
    00000c3f: 	xorl	%ecx, %ecx
    00000c41: 	movapd	%xmm4, %xmm5
    00000c45: 	movapd	%xmm4, %xmm7
    00000c49: 	nopl	(%rax) # Size: 7
.Ltmp596:
    00000c50: 	movupd	(%rdx), %xmm3
    00000c54: 	movupd	(%rax), %xmm0
    00000c58: 	addl	$0x1, %ecx
    00000c5b: 	addq	$0x40, %rax
    00000c5f: 	addq	$0x40, %rdx
    00000c63: 	mulpd	%xmm3, %xmm0
    00000c67: 	movupd	-0x30(%rdx), %xmm3
    00000c6c: 	addpd	%xmm0, %xmm9
    00000c71: 	movupd	-0x30(%rax), %xmm0
    00000c76: 	mulpd	%xmm3, %xmm0
    00000c7a: 	movupd	-0x20(%rdx), %xmm3
    00000c7f: 	addpd	%xmm0, %xmm7
    00000c83: 	movupd	-0x20(%rax), %xmm0
    00000c88: 	mulpd	%xmm3, %xmm0
    00000c8c: 	movupd	-0x10(%rdx), %xmm3
    00000c91: 	addpd	%xmm0, %xmm5
    00000c95: 	movupd	-0x10(%rax), %xmm0
    00000c9a: 	mulpd	%xmm3, %xmm0
    00000c9e: 	addpd	%xmm0, %xmm4
    00000ca2: 	cmpl	%r10d, %ecx
    00000ca5: 	jb	.Ltmp596 # Offset: 3237
    00000ca7: 	movapd	%xmm9, %xmm0
    00000cac: 	movapd	%xmm7, %xmm10
    00000cb1: 	movapd	%xmm4, %xmm6
    00000cb5: 	movl	%r13d, %eax
    00000cb8: 	movapd	%xmm5, %xmm8
    00000cbd: 	unpckhpd	%xmm9, %xmm9
    00000cc2: 	unpckhpd	%xmm7, %xmm7
    00000cc6: 	unpckhpd	%xmm5, %xmm5
    00000cca: 	unpckhpd	%xmm4, %xmm4
.Ltmp731:
    00000cce: 	movl	0x84(%rsp), %edi
    00000cd5: 	cmpl	%eax, %edi
    00000cd7: 	jle	.Ltmp597 # Offset: 3287
    00000cd9: 	subl	%eax, %edi
    00000cdb: 	movl	%edi, %r8d
    00000cde: 	cmpl	$0x1, %edi
    00000ce1: 	je	.Ltmp598 # Offset: 3297
    00000ce3: 	movslq	%eax, %rdx
    00000ce6: 	leaq	(%rbx,%rdx), %rcx
    00000cea: 	leaq	(%r15,%rdx,8), %rsi
    00000cee: 	xorl	%edx, %edx
    00000cf0: 	leaq	(%r14,%rcx,8), %rdi
    00000cf4: 	movl	%r8d, %ecx
    00000cf7: 	shrl	%ecx
    00000cf9: 	shlq	$0x4, %rcx
.Ltmp599:
    00000cfd: 	movupd	(%rdi,%rdx), %xmm1
    00000d02: 	movupd	(%rsi,%rdx), %xmm3
    00000d07: 	addq	$0x10, %rdx
    00000d0b: 	mulpd	%xmm3, %xmm1
    00000d0f: 	addsd	%xmm1, %xmm0
    00000d13: 	unpckhpd	%xmm1, %xmm1
    00000d17: 	addsd	%xmm1, %xmm0
    00000d1b: 	cmpq	%rcx, %rdx
    00000d1e: 	jne	.Ltmp599 # Offset: 3358
    00000d20: 	movl	%r8d, %edx
    00000d23: 	andl	$-0x2, %edx
    00000d26: 	addl	%edx, %eax
    00000d28: 	cmpl	%edx, %r8d
    00000d2b: 	je	.Ltmp597 # Offset: 3371
.Ltmp598:
    00000d2d: 	cltq
    00000d2f: 	movsd	(%r9,%rax,8), %xmm1
    00000d35: 	mulsd	(%r15,%rax,8), %xmm1
    00000d3b: 	addsd	%xmm1, %xmm0
.Ltmp597:
    00000d3f: 	addsd	%xmm9, %xmm0
    00000d44: 	addq	$0x8, %r11
    00000d48: 	addq	%rbp, %r9
    00000d4b: 	addq	(%rsp), %rbx
    00000d4f: 	addsd	%xmm10, %xmm0
    00000d54: 	addsd	%xmm7, %xmm0
    00000d58: 	addsd	%xmm8, %xmm0
    00000d5d: 	addsd	%xmm5, %xmm0
    00000d61: 	addsd	%xmm6, %xmm0
    00000d65: 	addsd	%xmm4, %xmm0
    00000d69: 	movsd	%xmm0, -0x8(%r11)
    00000d6f: 	cmpq	%r12, %r11
    00000d72: 	jne	.Ltmp600 # Offset: 3442
.Ltmp594:
    00000d78: 	xorl	%eax, %eax
.Ltmp603:
    00000d7a: 	movq	0x1e0(%rsp), %rbx
    00000d82: 	movsd	(%rbx,%rax,8), %xmm1
    00000d87: 	movq	0xa8(%rsp), %rbx
    00000d8f: 	movapd	%xmm1, %xmm2
    00000d93: 	andpd	DATAat0x24940(%rip), %xmm2
    00000d9b: 	movapd	%xmm1, %xmm0
    00000d9f: 	comisd	DATAat0x24978(%rip), %xmm2
    00000da7: 	subsd	(%rbx,%rax,8), %xmm0
    00000dac: 	jbe	.Ltmp601 # Offset: 3500
    00000dae: 	divsd	%xmm1, %xmm0
.Ltmp601:
    00000db2: 	andpd	DATAat0x24940(%rip), %xmm0
    00000dba: 	movsd	DATAat0x24980(%rip), %xmm4
    00000dc2: 	comisd	%xmm0, %xmm4
    00000dc6: 	jbe	.Ltmp602 # Offset: 3526
    00000dcc: 	addq	$0x1, %rax
    00000dd0: 	cmpq	$0x320, %rax
    00000dd6: 	jne	.Ltmp603 # Offset: 3542
.Ltmp831:
    00000dd8: 	movq	0xa8(%rsp), %rax
    00000de0: 	movq	$0x0, (%rax)
    00000de7: 	movq	0xa0(%rsp), %rbx
    00000def: 	movq	$0x0, -0x10(%rbx)
    00000df7: 	movq	0x40(%rsp), %rdi
    00000dfc: 	andq	$-0x8, %rdi
    00000e00: 	subq	%rdi, %rax
    00000e03: 	movq	%rax, %rcx
    00000e06: 	xorl	%eax, %eax
    00000e08: 	addl	$0x1900, %ecx
    00000e0e: 	shrl	$0x3, %ecx
    00000e11: 	rep		stosq	%rax, %es:(%rdi)
    00000e14: 	movl	0xcc(%rsp), %r10d
    00000e1c: 	testl	%r10d, %r10d
    00000e1f: 	jle	.Ltmp604 # Offset: 3615
    00000e25: 	movslq	0x84(%rsp), %rax
    00000e2d: 	movq	0x40(%rsp), %rdi
    00000e32: 	movq	%r14, %r9
    00000e35: 	pxor	%xmm2, %xmm2
    00000e39: 	movq	0xa8(%rsp), %r11
    00000e41: 	movq	%rax, %rbx
    00000e44: 	movq	%rax, (%rsp)
    00000e48: 	leaq	(,%rax,8), %rbp
    00000e50: 	movl	0xcc(%rsp), %eax
    00000e57: 	subl	$0x1, %eax
    00000e5a: 	leaq	(%rdi,%rax,8), %r12
    00000e5e: 	leal	-0x8(%rbx), %eax
    00000e61: 	xorl	%ebx, %ebx
    00000e63: 	shrl	$0x3, %eax
    00000e66: 	leal	0x1(%rax), %r10d
    00000e6a: 	leal	(,%r10,8), %r13d
.Ltmp610:
    00000e72: 	cmpl	$0x7, 0x84(%rsp)
    00000e7a: 	movsd	(%r11), %xmm0
    00000e7f: 	jle	.Ltmp605 # Offset: 3711
    00000e85: 	pxor	%xmm4, %xmm4
    00000e89: 	movq	%xmm0, %xmm9
    00000e8e: 	movq	%r15, %rdx
    00000e91: 	movq	%r9, %rax
    00000e94: 	xorl	%ecx, %ecx
    00000e96: 	movapd	%xmm4, %xmm5
    00000e9a: 	movapd	%xmm4, %xmm7
    00000e9e: 	nop # Size: 2
.Ltmp606:
    00000ea0: 	movupd	(%rdx), %xmm3
    00000ea4: 	movupd	(%rax), %xmm0
    00000ea8: 	addl	$0x1, %ecx
    00000eab: 	addq	$0x40, %rax
    00000eaf: 	addq	$0x40, %rdx
    00000eb3: 	mulpd	%xmm3, %xmm0
    00000eb7: 	movupd	-0x30(%rdx), %xmm3
    00000ebc: 	addpd	%xmm0, %xmm9
    00000ec1: 	movupd	-0x30(%rax), %xmm0
    00000ec6: 	mulpd	%xmm3, %xmm0
    00000eca: 	movupd	-0x20(%rdx), %xmm3
    00000ecf: 	addpd	%xmm0, %xmm7
    00000ed3: 	movupd	-0x20(%rax), %xmm0
    00000ed8: 	mulpd	%xmm3, %xmm0
    00000edc: 	movupd	-0x10(%rdx), %xmm3
    00000ee1: 	addpd	%xmm0, %xmm5
    00000ee5: 	movupd	-0x10(%rax), %xmm0
    00000eea: 	mulpd	%xmm3, %xmm0
    00000eee: 	addpd	%xmm0, %xmm4
    00000ef2: 	cmpl	%r10d, %ecx
    00000ef5: 	jb	.Ltmp606 # Offset: 3829
    00000ef7: 	movapd	%xmm9, %xmm0
    00000efc: 	movapd	%xmm7, %xmm10
    00000f01: 	movapd	%xmm4, %xmm6
    00000f05: 	movl	%r13d, %eax
    00000f08: 	movapd	%xmm5, %xmm8
    00000f0d: 	unpckhpd	%xmm9, %xmm9
    00000f12: 	unpckhpd	%xmm7, %xmm7
    00000f16: 	unpckhpd	%xmm5, %xmm5
    00000f1a: 	unpckhpd	%xmm4, %xmm4
.Ltmp734:
    00000f1e: 	movl	0x84(%rsp), %edi
    00000f25: 	cmpl	%eax, %edi
    00000f27: 	jle	.Ltmp607 # Offset: 3879
    00000f29: 	subl	%eax, %edi
    00000f2b: 	movl	%edi, %r8d
    00000f2e: 	cmpl	$0x1, %edi
    00000f31: 	je	.Ltmp608 # Offset: 3889
    00000f33: 	movslq	%eax, %rdx
    00000f36: 	leaq	(%rbx,%rdx), %rcx
    00000f3a: 	leaq	(%r15,%rdx,8), %rsi
    00000f3e: 	xorl	%edx, %edx
    00000f40: 	leaq	(%r14,%rcx,8), %rdi
    00000f44: 	movl	%r8d, %ecx
    00000f47: 	shrl	%ecx
    00000f49: 	shlq	$0x4, %rcx
.Ltmp609:
    00000f4d: 	movupd	(%rdi,%rdx), %xmm1
    00000f52: 	movupd	(%rsi,%rdx), %xmm3
    00000f57: 	addq	$0x10, %rdx
    00000f5b: 	mulpd	%xmm3, %xmm1
    00000f5f: 	addsd	%xmm1, %xmm0
    00000f63: 	unpckhpd	%xmm1, %xmm1
    00000f67: 	addsd	%xmm1, %xmm0
    00000f6b: 	cmpq	%rcx, %rdx
    00000f6e: 	jne	.Ltmp609 # Offset: 3950
    00000f70: 	movl	%r8d, %edx
    00000f73: 	andl	$-0x2, %edx
    00000f76: 	addl	%edx, %eax
    00000f78: 	cmpl	%edx, %r8d
    00000f7b: 	je	.Ltmp607 # Offset: 3963
.Ltmp608:
    00000f7d: 	cltq
    00000f7f: 	movsd	(%r9,%rax,8), %xmm1
    00000f85: 	mulsd	(%r15,%rax,8), %xmm1
    00000f8b: 	addsd	%xmm1, %xmm0
.Ltmp607:
    00000f8f: 	addsd	%xmm9, %xmm0
    00000f94: 	addq	$0x8, %r11
    00000f98: 	addq	%rbp, %r9
    00000f9b: 	addq	(%rsp), %rbx
    00000f9f: 	addsd	%xmm10, %xmm0
    00000fa4: 	addsd	%xmm7, %xmm0
    00000fa8: 	addsd	%xmm8, %xmm0
    00000fad: 	addsd	%xmm5, %xmm0
    00000fb1: 	addsd	%xmm6, %xmm0
    00000fb5: 	addsd	%xmm4, %xmm0
    00000fb9: 	movsd	%xmm0, -0x8(%r11)
    00000fbf: 	cmpq	%r12, %r11
    00000fc2: 	jne	.Ltmp610 # Offset: 4034
.Ltmp604:
    00000fc8: 	xorl	%eax, %eax
.Ltmp613:
    00000fca: 	movq	0x1e0(%rsp), %rbx
    00000fd2: 	movsd	(%rbx,%rax,8), %xmm1
    00000fd7: 	movq	0xa8(%rsp), %rbx
    00000fdf: 	movapd	%xmm1, %xmm2
    00000fe3: 	andpd	DATAat0x24940(%rip), %xmm2
    00000feb: 	movapd	%xmm1, %xmm0
    00000fef: 	comisd	DATAat0x24978(%rip), %xmm2
    00000ff7: 	subsd	(%rbx,%rax,8), %xmm0
    00000ffc: 	jbe	.Ltmp611 # Offset: 4092
    00000ffe: 	divsd	%xmm1, %xmm0
.Ltmp611:
    00001002: 	andpd	DATAat0x24940(%rip), %xmm0
    0000100a: 	movsd	DATAat0x24980(%rip), %xmm4
    00001012: 	comisd	%xmm0, %xmm4
    00001016: 	jbe	.Ltmp612 # Offset: 4118
    0000101c: 	addq	$0x1, %rax
    00001020: 	cmpq	$0x320, %rax
    00001026: 	jne	.Ltmp613 # Offset: 4134
.Ltmp830:
    00001028: 	movq	0xa8(%rsp), %rax
    00001030: 	movq	$0x0, (%rax)
    00001037: 	movq	0xa0(%rsp), %rbx
    0000103f: 	movq	$0x0, -0x10(%rbx)
    00001047: 	movq	0x40(%rsp), %rdi
    0000104c: 	andq	$-0x8, %rdi
    00001050: 	subq	%rdi, %rax
    00001053: 	movq	%rax, %rcx
    00001056: 	xorl	%eax, %eax
    00001058: 	addl	$0x1900, %ecx
    0000105e: 	shrl	$0x3, %ecx
    00001061: 	rep		stosq	%rax, %es:(%rdi)
    00001064: 	movl	0x84(%rsp), %r11d
    0000106c: 	testl	%r11d, %r11d
    0000106f: 	jle	.Ltmp614 # Offset: 4207
    00001075: 	movl	0xcc(%rsp), %eax
    0000107c: 	movq	0xa8(%rsp), %rcx
    00001084: 	movq	$0x0, 0x50(%rsp)
    0000108d: 	movslq	0x84(%rsp), %r9
    00001095: 	movq	%r15, 0x90(%rsp)
    0000109d: 	movq	$0x0, 0x28(%rsp)
    000010a6: 	subl	$0x4, %eax
    000010a9: 	movl	%eax, 0xe0(%rsp)
    000010b0: 	shrl	$0x2, %eax
    000010b3: 	movq	%r9, %r8
    000010b6: 	leal	0x1(%rax), %edx
    000010b9: 	movl	%eax, %esi
    000010bb: 	leaq	(,%r8,8), %rbx
    000010c3: 	movq	%r9, (%rsp)
    000010c7: 	movq	%rdx, %rdi
    000010ca: 	movl	%edx, 0xe8(%rsp)
    000010d1: 	subq	$0x1, %rdx
    000010d5: 	shlq	$0x4, %r9
    000010d9: 	movq	%rdx, %rax
    000010dc: 	movq	%rbx, 0x58(%rsp)
    000010e1: 	shlq	$0x5, %rax
    000010e5: 	movq	%r9, 0xd0(%rsp)
    000010ed: 	leaq	0x18(%rcx,%rax), %rax
    000010f2: 	movq	%r9, 0x30(%rsp)
    000010f7: 	movq	%rax, 0x60(%rsp)
    000010fc: 	leal	(,%r8,4), %eax
    00001104: 	cltq
    00001106: 	leaq	(,%rax,8), %r11
    0000110e: 	shlq	$0x4, %rax
    00001112: 	imulq	%r11, %rdx
    00001116: 	movq	%r11, 0x68(%rsp)
    0000111b: 	movq	%rax, %r11
    0000111e: 	leaq	(%rbx,%r14), %rax
    00001122: 	movl	%edi, %ebx
    00001124: 	shrl	%edi
    00001126: 	movq	%r11, 0x48(%rsp)
    0000112b: 	movq	%rax, 0xf0(%rsp)
    00001133: 	movl	%edi, %eax
    00001135: 	movl	%ebx, %edi
    00001137: 	subl	$0x1, %eax
    0000113a: 	movq	%rdx, 0x38(%rsp)
    0000113f: 	shlq	$0x6, %rax
    00001143: 	leaq	0x40(%rcx,%rax), %rax
    00001148: 	movq	%rax, 0xc0(%rsp)
    00001150: 	movl	%ebx, %eax
    00001152: 	movl	%r8d, %ebx
    00001155: 	andl	$-0x2, %eax
    00001158: 	movl	%eax, 0xf8(%rsp)
    0000115f: 	shll	$0x2, %eax
    00001162: 	imull	%eax, %ebx
    00001165: 	movslq	%eax, %rdx
    00001168: 	shlq	$0x3, %rdx
    0000116c: 	leaq	(%rcx,%rdx), %r12
    00001170: 	leaq	0x8(%rcx,%rdx), %r13
    00001175: 	movl	%ebx, 0x8(%rsp)
    00001179: 	movq	%rcx, %rbx
    0000117c: 	leal	0x1(%rax), %ecx
    0000117f: 	imull	%r8d, %ecx
    00001183: 	leaq	0x10(%rbx,%rdx), %rbp
    00001188: 	movl	%ecx, 0x10(%rsp)
    0000118c: 	leal	0x2(%rax), %ecx
    0000118f: 	addl	$0x3, %eax
    00001192: 	imull	%r8d, %eax
    00001196: 	imull	%r8d, %ecx
    0000119a: 	movl	%eax, 0x20(%rsp)
    0000119e: 	movl	%esi, %eax
    000011a0: 	movl	%ecx, 0x18(%rsp)
    000011a4: 	shlq	$0x5, %rax
    000011a8: 	movq	%rbx, %rcx
    000011ab: 	leaq	0x18(%rbx,%rdx), %rbx
    000011b0: 	leaq	0x20(%rcx,%rax), %rax
    000011b5: 	movq	%rcx, %r15
    000011b8: 	movq	%rax, 0x70(%rsp)
    000011bd: 	leaq	(%r8,%r8,2), %rax
    000011c1: 	shlq	$0x3, %rax
    000011c5: 	movq	%rax, 0x100(%rsp)
    000011cd: 	leal	(,%rdi,4), %eax
    000011d4: 	movl	%eax, 0xb0(%rsp)
.Ltmp622:
    000011db: 	movq	0x90(%rsp), %rax
    000011e3: 	movq	0x50(%rsp), %r10
    000011e8: 	cmpl	$0x3, 0xcc(%rsp)
    000011f0: 	movl	0x28(%rsp), %esi
    000011f4: 	movsd	(%rax,%r10), %xmm4
    000011fa: 	jle	.Ltmp615 # Offset: 4602
    00001200: 	movq	0x30(%rsp), %rax
    00001205: 	movq	0x58(%rsp), %rdi
    0000120a: 	movq	%r10, %rcx
    0000120d: 	movq	0x38(%rsp), %r11
    00001212: 	movq	%rax, %rdx
    00001215: 	addq	%rdi, %rcx
    00001218: 	addq	%rdi, %rdx
    0000121b: 	leaq	(%r14,%rax), %rdi
    0000121f: 	cmpq	%rdi, 0x60(%rsp)
    00001224: 	setb	%r8b
    00001228: 	addq	%r11, %rax
    0000122b: 	addq	%r14, %rax
    0000122e: 	movl	%r8d, %r9d
    00001231: 	cmpq	%rax, %r15
    00001234: 	seta	%al
    00001237: 	orl	%eax, %r9d
    0000123a: 	leaq	(%r14,%rdx), %rax
    0000123e: 	cmpq	%rax, 0x60(%rsp)
    00001243: 	movq	%r11, %rax
    00001246: 	setb	%r8b
    0000124a: 	addq	%rdx, %rax
    0000124d: 	addq	%r14, %rax
    00001250: 	cmpq	%rax, %r15
    00001253: 	seta	%al
    00001256: 	orl	%r8d, %eax
    00001259: 	andl	%r9d, %eax
    0000125c: 	cmpl	$0x7, 0xe0(%rsp)
    00001264: 	seta	%dl
    00001267: 	movl	%eax, %r9d
    0000126a: 	andl	%edx, %r9d
    0000126d: 	movq	%r10, %rdx
    00001270: 	addq	%r11, %r10
    00001273: 	movq	0x60(%rsp), %r11
    00001278: 	movq	%r10, %rax
    0000127b: 	leaq	(%r14,%rdx), %r8
    0000127f: 	movq	%rdx, %r10
    00001282: 	addq	%r14, %rax
    00001285: 	cmpq	%rax, %r15
    00001288: 	seta	%al
    0000128b: 	cmpq	%r8, %r11
    0000128e: 	setb	%dl
    00001291: 	orl	%edx, %eax
    00001293: 	testb	%al, %r9b
    00001296: 	je	.Ltmp616 # Offset: 4758
    0000129c: 	movq	0x38(%rsp), %r9
    000012a1: 	leaq	(%r14,%rcx), %rax
    000012a5: 	cmpq	%rax, %r11
    000012a8: 	leaq	(%rcx,%r9), %rax
    000012ac: 	setb	%dl
    000012af: 	addq	%r14, %rax
    000012b2: 	cmpq	%rax, %r15
    000012b5: 	seta	%al
    000012b8: 	orb	%dl, %al
    000012ba: 	je	.Ltmp616 # Offset: 4794
    000012c0: 	movq	0x30(%rsp), %rax
    000012c5: 	movapd	%xmm4, %xmm5
    000012c9: 	movq	0x48(%rsp), %r11
    000012ce: 	xorl	%edx, %edx
    000012d0: 	movq	0xf0(%rsp), %rcx
    000012d8: 	movl	%esi, 0x88(%rsp)
    000012df: 	unpcklpd	%xmm5, %xmm5
    000012e3: 	movq	0xc0(%rsp), %rsi
    000012eb: 	addq	%rcx, %rax
    000012ee: 	addq	%rcx, %r10
    000012f1: 	movq	0x68(%rsp), %rcx
    000012f6: 	movq	%rax, %r9
    000012f9: 	movq	%r15, %rax
.Ltmp617:
    000012fc: 	movsd	(%r8,%rdx), %xmm2
    00001302: 	movupd	(%rax), %xmm0
    00001306: 	addq	$0x40, %rax
    0000130a: 	movupd	-0x20(%rax), %xmm8
    00001310: 	movupd	-0x30(%rax), %xmm6
    00001315: 	movhpd	(%r8,%rcx), %xmm2
    0000131b: 	movhpd	-0x30(%rax), %xmm0
    00001320: 	movlpd	-0x38(%rax), %xmm6
    00001325: 	movupd	-0x10(%rax), %xmm7
    0000132a: 	mulpd	%xmm5, %xmm2
    0000132e: 	movhpd	-0x10(%rax), %xmm8
    00001334: 	movapd	%xmm0, %xmm1
    00001338: 	movlpd	-0x18(%rax), %xmm7
    0000133d: 	unpcklpd	%xmm8, %xmm1
    00001342: 	movapd	%xmm6, %xmm3
    00001346: 	unpckhpd	%xmm8, %xmm0
    0000134b: 	unpcklpd	%xmm7, %xmm3
    0000134f: 	unpckhpd	%xmm7, %xmm6
    00001353: 	addpd	%xmm1, %xmm2
    00001357: 	movsd	(%r10,%rdx), %xmm1
    0000135d: 	movhpd	(%r10,%rcx), %xmm1
    00001363: 	mulpd	%xmm5, %xmm1
    00001367: 	addpd	%xmm1, %xmm3
    0000136b: 	movsd	(%rdi,%rdx), %xmm1
    00001370: 	movhpd	(%rdi,%rcx), %xmm1
    00001375: 	mulpd	%xmm5, %xmm1
    00001379: 	movapd	%xmm3, %xmm7
    0000137d: 	addpd	%xmm0, %xmm1
    00001381: 	movsd	(%r9,%rdx), %xmm0
    00001387: 	addq	%r11, %rdx
    0000138a: 	movhpd	(%r9,%rcx), %xmm0
    00001390: 	addq	%r11, %rcx
    00001393: 	mulpd	%xmm5, %xmm0
    00001397: 	addpd	%xmm6, %xmm0
    0000139b: 	movapd	%xmm2, %xmm6
    0000139f: 	unpckhpd	%xmm1, %xmm2
    000013a3: 	unpcklpd	%xmm1, %xmm6
    000013a7: 	unpcklpd	%xmm0, %xmm7
    000013ab: 	unpckhpd	%xmm0, %xmm3
    000013af: 	movapd	%xmm6, %xmm0
    000013b3: 	unpcklpd	%xmm7, %xmm0
    000013b7: 	unpckhpd	%xmm7, %xmm6
    000013bb: 	movups	%xmm0, -0x40(%rax)
    000013bf: 	movapd	%xmm2, %xmm0
    000013c3: 	unpckhpd	%xmm3, %xmm2
    000013c7: 	unpcklpd	%xmm3, %xmm0
    000013cb: 	movups	%xmm6, -0x30(%rax)
    000013cf: 	movups	%xmm0, -0x20(%rax)
    000013d3: 	movups	%xmm2, -0x10(%rax)
    000013d7: 	cmpq	%rsi, %rax
    000013da: 	jne	.Ltmp617 # Offset: 5082
    000013e0: 	movq	%r11, 0x48(%rsp)
    000013e5: 	movl	0x88(%rsp), %esi
    000013ec: 	movl	0xf8(%rsp), %edi
    000013f3: 	cmpl	%edi, 0xe8(%rsp)
    000013fa: 	je	.Ltmp618 # Offset: 5114
    000013fc: 	movl	0x8(%rsp), %eax
    00001400: 	addl	%esi, %eax
    00001402: 	cltq
    00001404: 	movsd	(%r14,%rax,8), %xmm0
    0000140a: 	movl	0x10(%rsp), %eax
    0000140e: 	mulsd	%xmm4, %xmm0
    00001412: 	addl	%esi, %eax
    00001414: 	addsd	(%r12), %xmm0
    0000141a: 	cltq
    0000141c: 	movsd	%xmm0, (%r12)
    00001422: 	movsd	(%r14,%rax,8), %xmm0
    00001428: 	movl	0x18(%rsp), %eax
    0000142c: 	mulsd	%xmm4, %xmm0
    00001430: 	addl	%esi, %eax
    00001432: 	addsd	(%r13), %xmm0
    00001438: 	cltq
    0000143a: 	movsd	%xmm0, (%r13)
    00001440: 	movsd	(%r14,%rax,8), %xmm0
    00001446: 	movl	0x20(%rsp), %eax
    0000144a: 	mulsd	%xmm4, %xmm0
    0000144e: 	addl	%esi, %eax
    00001450: 	addsd	(%rbp), %xmm0
    00001455: 	cltq
    00001457: 	movsd	%xmm0, (%rbp)
    0000145c: 	movsd	(%r14,%rax,8), %xmm0
    00001462: 	mulsd	%xmm4, %xmm0
    00001466: 	addsd	(%rbx), %xmm0
    0000146a: 	movsd	%xmm0, (%rbx)
.Ltmp618:
    0000146e: 	movl	0xb0(%rsp), %eax
.Ltmp733:
    00001475: 	cmpl	%eax, 0xcc(%rsp)
    0000147c: 	jle	.Ltmp619 # Offset: 5244
    00001482: 	movl	0x84(%rsp), %r11d
    0000148a: 	movl	0xcc(%rsp), %ecx
    00001491: 	movl	%r11d, %edi
    00001494: 	subl	%eax, %ecx
    00001496: 	imull	%eax, %edi
    00001499: 	movl	%ecx, %r9d
    0000149c: 	movslq	%edi, %rdx
    0000149f: 	addq	0x28(%rsp), %rdx
    000014a4: 	movl	%edi, 0xd8(%rsp)
    000014ab: 	movslq	%eax, %rdi
    000014ae: 	leaq	(,%rdx,8), %r10
    000014b6: 	movq	%rdx, 0x108(%rsp)
    000014be: 	leaq	-0x1(%r9), %rdx
    000014c2: 	imulq	0x58(%rsp), %rdx
    000014c8: 	leaq	(,%rdi,8), %r8
    000014d0: 	leaq	-0x1(%r9,%rdi), %rdi
    000014d5: 	leaq	(%r15,%rdi,8), %r9
    000014d9: 	movl	%r11d, %edi
    000014dc: 	xorl	%r11d, %r11d
    000014df: 	movq	%rdx, 0x88(%rsp)
    000014e7: 	testl	%edi, %edi
    000014e9: 	leaq	(%r15,%r8), %rdx
    000014ed: 	cmovsq	0x88(%rsp), %r11
    000014f6: 	movq	%r11, %rdi
    000014f9: 	addq	%r10, %rdi
    000014fc: 	addq	%r14, %rdi
    000014ff: 	cmpq	%rdi, %r9
    00001502: 	movl	0x84(%rsp), %edi
    00001509: 	setb	%r9b
    0000150d: 	xorl	%r11d, %r11d
    00001510: 	testl	%edi, %edi
    00001512: 	cmovnsq	0x88(%rsp), %r11
    0000151b: 	movq	%r11, %rdi
    0000151e: 	addq	%r10, %rdi
    00001521: 	addq	%r14, %rdi
    00001524: 	cmpq	%rdi, %rdx
    00001527: 	seta	%dil
    0000152b: 	orb	%r9b, %dil
    0000152e: 	je	.Ltmp620 # Offset: 5422
    00001534: 	leal	-0x1(%rcx), %edi
    00001537: 	cmpl	$0x2, %edi
    0000153a: 	jbe	.Ltmp620 # Offset: 5434
    00001540: 	addq	%r14, %r10
    00001543: 	movq	0x58(%rsp), %r9
    00001548: 	movapd	%xmm4, %xmm1
    0000154c: 	movupd	(%rdx), %xmm5
    00001550: 	movsd	(%r10), %xmm0
    00001555: 	unpcklpd	%xmm1, %xmm1
    00001559: 	movl	%ecx, %r8d
    0000155c: 	shrl	%r8d
    0000155f: 	leaq	(%r10,%r9,2), %rdi
    00001563: 	movhpd	(%r10,%r9), %xmm0
    00001569: 	mulpd	%xmm1, %xmm0
    0000156d: 	addpd	%xmm5, %xmm0
    00001571: 	movups	%xmm0, (%rdx)
    00001574: 	cmpl	$0x1, %r8d
    00001578: 	je	.Ltmp621 # Offset: 5496
    0000157a: 	movsd	(%rdi), %xmm0
    0000157e: 	movupd	0x10(%rdx), %xmm5
    00001583: 	movhpd	(%rdi,%r9), %xmm0
    00001589: 	mulpd	%xmm1, %xmm0
    0000158d: 	addpd	%xmm5, %xmm0
    00001591: 	movups	%xmm0, 0x10(%rdx)
.Ltmp621:
    00001595: 	movl	%ecx, %edx
    00001597: 	andl	$-0x2, %edx
    0000159a: 	addl	%edx, %eax
    0000159c: 	cmpl	%edx, %ecx
    0000159e: 	je	.Ltmp619 # Offset: 5534
    000015a0: 	movslq	%eax, %rdx
    000015a3: 	imull	0x84(%rsp), %eax
    000015ab: 	leaq	(%r15,%rdx,8), %rdx
.Ltmp728:
    000015af: 	addl	%esi, %eax
    000015b1: 	cltq
    000015b3: 	mulsd	(%r14,%rax,8), %xmm4
    000015b9: 	addsd	(%rdx), %xmm4
    000015bd: 	movsd	%xmm4, (%rdx)
.Ltmp619:
    000015c1: 	addq	$0x1, 0x28(%rsp)
    000015c7: 	movq	0x28(%rsp), %rax
    000015cc: 	addq	$0x8, 0x30(%rsp)
    000015d2: 	addq	$0x8, 0x50(%rsp)
    000015d8: 	cmpq	(%rsp), %rax
    000015dc: 	jne	.Ltmp622 # Offset: 5596
    000015e2: 	movq	0x90(%rsp), %r15
.Ltmp614:
    000015ea: 	xorl	%eax, %eax
.Ltmp625:
    000015ec: 	movq	0x1e0(%rsp), %rbx
    000015f4: 	movsd	(%rbx,%rax,8), %xmm1
    000015f9: 	movq	0xa8(%rsp), %rbx
    00001601: 	movapd	%xmm1, %xmm2
    00001605: 	andpd	DATAat0x24940(%rip), %xmm2
    0000160d: 	movapd	%xmm1, %xmm0
    00001611: 	comisd	DATAat0x24978(%rip), %xmm2
    00001619: 	subsd	(%rbx,%rax,8), %xmm0
    0000161e: 	jbe	.Ltmp623 # Offset: 5662
    00001620: 	divsd	%xmm1, %xmm0
.Ltmp623:
    00001624: 	andpd	DATAat0x24940(%rip), %xmm0
    0000162c: 	movsd	DATAat0x24980(%rip), %xmm4
    00001634: 	comisd	%xmm0, %xmm4
    00001638: 	jbe	.Ltmp624 # Offset: 5688
    0000163e: 	addq	$0x1, %rax
    00001642: 	cmpq	$0x320, %rax
    00001648: 	jne	.Ltmp625 # Offset: 5704
.Ltmp829:
    0000164a: 	movq	0xa8(%rsp), %rax
    00001652: 	xorl	%r10d, %r10d
    00001655: 	movq	$0x0, (%rax)
    0000165c: 	movq	0xa0(%rsp), %rbx
    00001664: 	movq	$0x0, -0x10(%rbx)
    0000166c: 	movq	0x40(%rsp), %rdi
    00001671: 	andq	$-0x8, %rdi
    00001675: 	subq	%rdi, %rax
    00001678: 	movq	%rax, %rcx
    0000167b: 	movq	%r10, %rax
    0000167e: 	addl	$0x1900, %ecx
    00001684: 	shrl	$0x3, %ecx
    00001687: 	rep		stosq	%rax, %es:(%rdi)
    0000168a: 	movl	0xb8(%rsp), %ebx
    00001691: 	testl	%ebx, %ebx
    00001693: 	jle	.Ltmp626 # Offset: 5779
    00001699: 	movl	0x84(%rsp), %esi
    000016a0: 	movq	%r15, 0x178(%rsp)
    000016a8: 	movq	%r15, %r9
    000016ab: 	leal	(,%rsi,4), %eax
    000016b2: 	leal	(%rsi,%rsi), %edi
    000016b5: 	movslq	%eax, %r12
    000016b8: 	movslq	%esi, %rax
    000016bb: 	leal	(%rdi,%rsi), %ebx
    000016be: 	shlq	$0x3, %rax
    000016c2: 	leaq	(,%r12,8), %r11
    000016ca: 	movq	%rax, 0x50(%rsp)
    000016cf: 	movslq	%edi, %rax
    000016d2: 	movq	%r11, %rdx
    000016d5: 	leaq	(,%rax,8), %rcx
    000016dd: 	movslq	%ebx, %rax
    000016e0: 	movq	%r11, 0xb0(%rsp)
    000016e8: 	movq	%rcx, 0x60(%rsp)
    000016ed: 	leaq	(,%rax,8), %rcx
    000016f5: 	leal	-0x4(%rsi), %eax
    000016f8: 	shrl	$0x2, %eax
    000016fb: 	movq	%rcx, 0x68(%rsp)
    00001700: 	addl	$0x1, %eax
    00001703: 	movq	%rax, %rcx
    00001706: 	movl	%eax, 0x160(%rsp)
    0000170d: 	shlq	$0x5, %rcx
    00001711: 	movq	%rcx, 0x130(%rsp)
    00001719: 	movl	0xcc(%rsp), %ecx
    00001720: 	leal	-0x4(%rcx), %eax
    00001723: 	movl	$0x1f, %ecx
    00001728: 	movl	%eax, 0x138(%rsp)
    0000172f: 	shrl	$0x2, %eax
    00001732: 	leal	0x1(%rax), %r8d
    00001736: 	movl	%eax, %ebp
    00001738: 	leaq	-0x1(%r8), %rax
    0000173c: 	movl	%r8d, %r13d
    0000173f: 	movl	%r8d, 0x140(%rsp)
    00001747: 	imulq	%rax, %rdx
    0000174b: 	testq	%r11, %r11
    0000174e: 	leaq	0x1f(%rdx), %rsi
    00001752: 	cmovnsq	%rsi, %rcx
    00001756: 	shlq	$0x5, %rax
    0000175a: 	testq	%r11, %r11
    0000175d: 	movl	%r13d, %esi
    00001760: 	cmovsq	%rdx, %r10
    00001764: 	shlq	$0x5, %r8
    00001768: 	movq	%rcx, 0x70(%rsp)
    0000176d: 	movq	0xa8(%rsp), %rcx
    00001775: 	shlq	$0x4, %r12
    00001779: 	movq	%r12, 0x158(%rsp)
    00001781: 	leaq	0x1f(%rcx,%rax), %rax
    00001786: 	addq	%rcx, %r8
    00001789: 	movq	%rcx, %rdx
    0000178c: 	movq	%r10, 0x88(%rsp)
    00001794: 	movq	%rax, 0x148(%rsp)
    0000179c: 	movl	%r13d, %eax
    0000179f: 	xorl	%r10d, %r10d
    000017a2: 	shrl	%eax
    000017a4: 	movq	%r8, 0x90(%rsp)
    000017ac: 	subl	$0x1, %eax
    000017af: 	movq	%r10, (%rsp)
    000017b3: 	shlq	$0x6, %rax
    000017b7: 	leaq	0x40(%rcx,%rax), %rcx
    000017bc: 	movq	%rcx, 0x128(%rsp)
    000017c4: 	movl	%r13d, %ecx
    000017c7: 	andl	$-0x2, %ecx
    000017ca: 	movl	%ecx, %eax
    000017cc: 	movl	%ecx, 0x150(%rsp)
    000017d3: 	imulq	%r11, %rax
    000017d7: 	leaq	(%r14,%rax), %r8
    000017db: 	leal	(,%rcx,4), %eax
    000017e2: 	movq	%rdx, %rcx
    000017e5: 	cltq
    000017e7: 	shlq	$0x3, %rax
    000017eb: 	leaq	(%rdx,%rax), %rdx
    000017ef: 	leaq	0x10(%rcx,%rax), %r12
    000017f4: 	leaq	0x8(%rcx,%rax), %r13
    000017f9: 	movq	%rdx, 0x28(%rsp)
    000017fe: 	leaq	0x18(%rcx,%rax), %rdx
    00001803: 	movl	%ebp, %eax
    00001805: 	movq	%rdx, 0x8(%rsp)
    0000180a: 	movq	%rax, %rdx
    0000180d: 	addq	$0x1, %rax
    00001811: 	movq	%r12, %rbp
    00001814: 	imulq	%r11, %rax
    00001818: 	shlq	$0x5, %rdx
    0000181c: 	movq	0x8(%rsp), %r12
    00001821: 	leaq	0x20(%rcx,%rdx), %rcx
    00001826: 	movq	%rcx, 0x110(%rsp)
    0000182e: 	leal	(,%rsi,4), %ecx
    00001835: 	movl	0x84(%rsp), %esi
    0000183c: 	movl	%ecx, 0x120(%rsp)
    00001843: 	leaq	(%r14,%rax), %rcx
    00001847: 	movq	0x50(%rsp), %rax
    0000184c: 	subl	%esi, %edi
    0000184e: 	movq	%rcx, 0x118(%rsp)
    00001856: 	movq	%rax, 0x58(%rsp)
    0000185b: 	movl	%ebx, %eax
    0000185d: 	movq	%r13, %rbx
    00001860: 	subl	%esi, %eax
    00001862: 	movl	%esi, 0x100(%rsp)
    00001869: 	movl	%edi, 0x168(%rsp)
    00001870: 	movl	%eax, 0x170(%rsp)
    00001877: 	movq	%r14, 0x8(%rsp)
.Ltmp634:
    0000187c: 	cmpl	$0x3, 0xcc(%rsp)
    00001884: 	jle	.Ltmp627 # Offset: 6276
    0000188a: 	movq	(%rsp), %r10
    0000188e: 	leaq	0x10(%r9), %r11
    00001892: 	movq	%r11, 0xc0(%rsp)
    0000189a: 	leaq	0x8(%r10), %rax
    0000189e: 	movq	%rax, 0x10(%rsp)
    000018a3: 	leaq	0x10(%r10), %rax
    000018a7: 	movq	%rax, 0x18(%rsp)
    000018ac: 	leaq	0x18(%r10), %rax
    000018b0: 	leaq	0x8(%r9), %r10
    000018b4: 	movq	%rax, 0x20(%rsp)
    000018b9: 	movslq	0x100(%rsp), %rax
    000018c1: 	leaq	(,%rax,8), %r13
    000018c9: 	movq	%rax, %rdi
    000018cc: 	movq	%rax, 0x30(%rsp)
    000018d1: 	leaq	0x8(%r13), %rax
    000018d5: 	movq	%rax, 0xd0(%rsp)
    000018dd: 	leaq	0x10(%r13), %rax
    000018e1: 	movq	%rax, 0xd8(%rsp)
    000018e9: 	leaq	0x18(%r13), %rax
    000018ed: 	movq	%rax, 0xe0(%rsp)
    000018f5: 	movl	0x168(%rsp), %eax
    000018fc: 	addl	%edi, %eax
    000018fe: 	cltq
    00001900: 	leaq	(,%rax,8), %r14
    00001908: 	movq	%rax, 0x38(%rsp)
    0000190d: 	leaq	0x8(%r14), %rax
    00001911: 	movq	%rax, 0xe8(%rsp)
    00001919: 	leaq	0x10(%r14), %rax
    0000191d: 	movq	%rax, 0xf0(%rsp)
    00001925: 	leaq	0x18(%r14), %rax
    00001929: 	movq	%rax, 0xf8(%rsp)
    00001931: 	movl	0x170(%rsp), %eax
    00001938: 	addl	%edi, %eax
    0000193a: 	cmpq	%r10, 0xa8(%rsp)
    00001942: 	cltq
    00001944: 	setae	%dl
    00001947: 	cmpq	0x90(%rsp), %r9
    0000194f: 	leaq	(,%rax,8), %r15
    00001957: 	movq	%rax, 0x48(%rsp)
    0000195c: 	leaq	0x18(%r9), %rax
    00001960: 	movq	%rax, 0x108(%rsp)
    00001968: 	setae	%al
    0000196b: 	leaq	0x8(%r15), %rdi
    0000196f: 	leaq	0x10(%r15), %rsi
    00001973: 	orl	%eax, %edx
    00001975: 	movq	0xa8(%rsp), %rax
    0000197d: 	leaq	0x18(%r15), %rcx
    00001981: 	cmpq	%r11, %rax
    00001984: 	movq	0x90(%rsp), %r11
    0000198c: 	setae	%al
    0000198f: 	cmpq	%r11, %r10
    00001992: 	setae	%r10b
    00001996: 	orl	%r10d, %eax
    00001999: 	andl	%edx, %eax
    0000199b: 	cmpl	$0x3, 0x138(%rsp)
    000019a3: 	seta	%dl
    000019a6: 	andl	%eax, %edx
    000019a8: 	movq	0xa8(%rsp), %rax
    000019b0: 	cmpq	0x108(%rsp), %rax
    000019b8: 	setae	%al
    000019bb: 	cmpq	%r11, 0xc0(%rsp)
    000019c3: 	setae	%r11b
    000019c7: 	movl	%r11d, %r10d
    000019ca: 	leaq	0x20(%r9), %r11
    000019ce: 	orl	%r10d, %eax
    000019d1: 	movl	%edx, %r10d
    000019d4: 	movq	%r11, 0xc0(%rsp)
    000019dc: 	andl	%eax, %r10d
    000019df: 	cmpq	%r11, 0xa8(%rsp)
    000019e7: 	movq	0x90(%rsp), %r11
    000019ef: 	setae	%al
    000019f2: 	cmpq	%r11, 0x108(%rsp)
    000019fa: 	setae	%dl
    000019fd: 	orl	%edx, %eax
    000019ff: 	movl	%eax, %r11d
    00001a02: 	movq	0x58(%rsp), %rax
    00001a07: 	addq	0x70(%rsp), %rax
    00001a0c: 	andl	%r10d, %r11d
    00001a0f: 	movl	%r11d, %r10d
    00001a12: 	movq	0x8(%rsp), %r11
    00001a17: 	addq	%r11, %rax
    00001a1a: 	cmpq	%rax, 0xa8(%rsp)
    00001a22: 	movq	0x58(%rsp), %rax
    00001a27: 	seta	%dl
    00001a2a: 	addq	0x88(%rsp), %rax
    00001a32: 	addq	%r11, %rax
    00001a35: 	movq	0x148(%rsp), %r11
    00001a3d: 	cmpq	%rax, %r11
    00001a40: 	setb	%al
    00001a43: 	orl	%edx, %eax
    00001a45: 	movl	%eax, %edx
    00001a47: 	movq	0x8(%rsp), %rax
    00001a4c: 	andl	%r10d, %edx
    00001a4f: 	movl	%edx, %r10d
    00001a52: 	movq	0x60(%rsp), %rdx
    00001a57: 	addq	0x70(%rsp), %rdx
    00001a5c: 	addq	%rdx, %rax
    00001a5f: 	cmpq	%rax, 0xa8(%rsp)
    00001a67: 	movq	0x60(%rsp), %rax
    00001a6c: 	seta	%dl
    00001a6f: 	addq	0x88(%rsp), %rax
    00001a77: 	addq	0x8(%rsp), %rax
    00001a7c: 	cmpq	%rax, %r11
    00001a7f: 	setb	%al
    00001a82: 	orl	%edx, %eax
    00001a84: 	movl	%eax, %edx
    00001a86: 	movq	0x8(%rsp), %rax
    00001a8b: 	andl	%r10d, %edx
    00001a8e: 	movl	%edx, %r10d
    00001a91: 	movq	0x68(%rsp), %rdx
    00001a96: 	addq	0x70(%rsp), %rdx
    00001a9b: 	addq	%rdx, %rax
    00001a9e: 	cmpq	%rax, 0xa8(%rsp)
    00001aa6: 	movq	0x68(%rsp), %rax
    00001aab: 	seta	%dl
    00001aae: 	addq	0x88(%rsp), %rax
    00001ab6: 	addq	0x8(%rsp), %rax
    00001abb: 	cmpq	%rax, %r11
    00001abe: 	setb	%al
    00001ac1: 	orl	%edx, %eax
    00001ac3: 	testb	%al, %r10b
    00001ac6: 	je	.Ltmp628 # Offset: 6854
    00001acc: 	movq	0x8(%rsp), %r10
    00001ad1: 	movq	0x70(%rsp), %rax
    00001ad6: 	addq	(%rsp), %rax
    00001ada: 	addq	%r10, %rax
    00001add: 	cmpq	%rax, 0xa8(%rsp)
    00001ae5: 	movq	0x88(%rsp), %rax
    00001aed: 	seta	%dl
    00001af0: 	addq	(%rsp), %rax
    00001af4: 	addq	%r10, %rax
    00001af7: 	cmpq	%rax, %r11
    00001afa: 	setb	%al
    00001afd: 	orb	%dl, %al
    00001aff: 	je	.Ltmp628 # Offset: 6911
    00001b05: 	movq	%r10, %rax
    00001b08: 	movq	0x58(%rsp), %rsi
    00001b0d: 	movq	(%rsp), %r10
    00001b11: 	movq	%r8, 0xd0(%rsp)
    00001b19: 	movq	0x60(%rsp), %rcx
    00001b1e: 	movq	0x68(%rsp), %rdx
    00001b23: 	movq	%r13, (%rsp)
    00001b27: 	movsd	(%r9), %xmm5
    00001b2c: 	movsd	0x8(%r9), %xmm4
    00001b32: 	leaq	(%r10,%rax), %rdi
    00001b36: 	addq	%rax, %rsi
    00001b39: 	movsd	0x10(%r9), %xmm3
    00001b3f: 	movsd	0x18(%r9), %xmm2
    00001b45: 	addq	%rax, %rcx
    00001b48: 	addq	%rax, %rdx
    00001b4b: 	movq	0xb0(%rsp), %r11
    00001b53: 	unpcklpd	%xmm5, %xmm5
    00001b57: 	unpcklpd	%xmm4, %xmm4
    00001b5b: 	movq	0xa8(%rsp), %rax
    00001b63: 	movq	0x128(%rsp), %r8
    00001b6b: 	movq	0x158(%rsp), %r13
    00001b73: 	unpcklpd	%xmm3, %xmm3
    00001b77: 	unpcklpd	%xmm2, %xmm2
.Ltmp629:
    00001b7b: 	movsd	(%rdi), %xmm0
    00001b7f: 	movupd	(%rax), %xmm8
    00001b84: 	addq	$0x40, %rax
    00001b88: 	movupd	-0x20(%rax), %xmm9
    00001b8e: 	movupd	-0x30(%rax), %xmm6
    00001b93: 	movhpd	(%rdi,%r11), %xmm0
    00001b99: 	movhpd	-0x30(%rax), %xmm8
    00001b9f: 	movlpd	-0x38(%rax), %xmm6
    00001ba4: 	movupd	-0x10(%rax), %xmm7
    00001ba9: 	mulpd	%xmm5, %xmm0
    00001bad: 	movhpd	-0x10(%rax), %xmm9
    00001bb3: 	movapd	%xmm8, %xmm1
    00001bb8: 	movlpd	-0x18(%rax), %xmm7
    00001bbd: 	unpcklpd	%xmm9, %xmm1
    00001bc2: 	movapd	%xmm6, %xmm10
    00001bc7: 	unpckhpd	%xmm9, %xmm8
    00001bcc: 	unpcklpd	%xmm7, %xmm10
    00001bd1: 	unpckhpd	%xmm7, %xmm6
    00001bd5: 	addpd	%xmm1, %xmm0
    00001bd9: 	movlpd	%xmm0, -0x40(%rax)
    00001bde: 	movhpd	%xmm0, -0x20(%rax)
    00001be3: 	movsd	0x8(%rdi), %xmm1
    00001be8: 	movhpd	0x8(%r11,%rdi), %xmm1
    00001bef: 	mulpd	%xmm4, %xmm1
    00001bf3: 	addpd	%xmm0, %xmm1
    00001bf7: 	movlpd	%xmm1, -0x40(%rax)
    00001bfc: 	movhpd	%xmm1, -0x20(%rax)
    00001c01: 	movsd	0x10(%rdi), %xmm0
    00001c06: 	movhpd	0x10(%r11,%rdi), %xmm0
    00001c0d: 	mulpd	%xmm3, %xmm0
    00001c11: 	addpd	%xmm1, %xmm0
    00001c15: 	movlpd	%xmm0, -0x40(%rax)
    00001c1a: 	movhpd	%xmm0, -0x20(%rax)
    00001c1f: 	movsd	0x18(%rdi), %xmm1
    00001c24: 	movhpd	0x18(%r11,%rdi), %xmm1
    00001c2b: 	addq	%r13, %rdi
    00001c2e: 	mulpd	%xmm2, %xmm1
    00001c32: 	addpd	%xmm0, %xmm1
    00001c36: 	movsd	(%rsi), %xmm0
    00001c3a: 	movhpd	(%rsi,%r11), %xmm0
    00001c40: 	mulpd	%xmm5, %xmm0
    00001c44: 	movlpd	%xmm1, -0x40(%rax)
    00001c49: 	movhpd	%xmm1, -0x20(%rax)
    00001c4e: 	addpd	%xmm10, %xmm0
    00001c53: 	movlpd	%xmm0, -0x38(%rax)
    00001c58: 	movhpd	%xmm0, -0x18(%rax)
    00001c5d: 	movsd	0x8(%rsi), %xmm1
    00001c62: 	movhpd	0x8(%r11,%rsi), %xmm1
    00001c69: 	mulpd	%xmm4, %xmm1
    00001c6d: 	addpd	%xmm0, %xmm1
    00001c71: 	movlpd	%xmm1, -0x38(%rax)
    00001c76: 	movhpd	%xmm1, -0x18(%rax)
    00001c7b: 	movsd	0x10(%rsi), %xmm0
    00001c80: 	movhpd	0x10(%r11,%rsi), %xmm0
    00001c87: 	mulpd	%xmm3, %xmm0
    00001c8b: 	addpd	%xmm1, %xmm0
    00001c8f: 	movlpd	%xmm0, -0x38(%rax)
    00001c94: 	movhpd	%xmm0, -0x18(%rax)
    00001c99: 	movsd	0x18(%rsi), %xmm1
    00001c9e: 	movhpd	0x18(%r11,%rsi), %xmm1
    00001ca5: 	addq	%r13, %rsi
    00001ca8: 	mulpd	%xmm2, %xmm1
    00001cac: 	addpd	%xmm0, %xmm1
    00001cb0: 	movsd	(%rcx), %xmm0
    00001cb4: 	movhpd	(%rcx,%r11), %xmm0
    00001cba: 	mulpd	%xmm5, %xmm0
    00001cbe: 	movlpd	%xmm1, -0x38(%rax)
    00001cc3: 	movhpd	%xmm1, -0x18(%rax)
    00001cc8: 	addpd	%xmm8, %xmm0
    00001ccd: 	movlpd	%xmm0, -0x30(%rax)
    00001cd2: 	movhpd	%xmm0, -0x10(%rax)
    00001cd7: 	movsd	0x8(%rcx), %xmm1
    00001cdc: 	movhpd	0x8(%r11,%rcx), %xmm1
    00001ce3: 	mulpd	%xmm4, %xmm1
    00001ce7: 	addpd	%xmm0, %xmm1
    00001ceb: 	movlpd	%xmm1, -0x30(%rax)
    00001cf0: 	movhpd	%xmm1, -0x10(%rax)
    00001cf5: 	movsd	0x10(%rcx), %xmm0
    00001cfa: 	movhpd	0x10(%r11,%rcx), %xmm0
    00001d01: 	mulpd	%xmm3, %xmm0
    00001d05: 	addpd	%xmm1, %xmm0
    00001d09: 	movlpd	%xmm0, -0x30(%rax)
    00001d0e: 	movhpd	%xmm0, -0x10(%rax)
    00001d13: 	movsd	0x18(%rcx), %xmm1
    00001d18: 	movhpd	0x18(%r11,%rcx), %xmm1
    00001d1f: 	addq	%r13, %rcx
    00001d22: 	mulpd	%xmm2, %xmm1
    00001d26: 	addpd	%xmm0, %xmm1
    00001d2a: 	movsd	(%rdx), %xmm0
    00001d2e: 	movhpd	(%rdx,%r11), %xmm0
    00001d34: 	mulpd	%xmm5, %xmm0
    00001d38: 	movlpd	%xmm1, -0x30(%rax)
    00001d3d: 	movhpd	%xmm1, -0x10(%rax)
    00001d42: 	addpd	%xmm6, %xmm0
    00001d46: 	movlpd	%xmm0, -0x28(%rax)
    00001d4b: 	movhpd	%xmm0, -0x8(%rax)
    00001d50: 	movsd	0x8(%rdx), %xmm1
    00001d55: 	movhpd	0x8(%r11,%rdx), %xmm1
    00001d5c: 	mulpd	%xmm4, %xmm1
    00001d60: 	addpd	%xmm0, %xmm1
    00001d64: 	movlpd	%xmm1, -0x28(%rax)
    00001d69: 	movhpd	%xmm1, -0x8(%rax)
    00001d6e: 	movsd	0x10(%rdx), %xmm0
    00001d73: 	movhpd	0x10(%r11,%rdx), %xmm0
    00001d7a: 	mulpd	%xmm3, %xmm0
    00001d7e: 	addpd	%xmm1, %xmm0
    00001d82: 	movlpd	%xmm0, -0x28(%rax)
    00001d87: 	movhpd	%xmm0, -0x8(%rax)
    00001d8c: 	movsd	0x18(%rdx), %xmm1
    00001d91: 	movhpd	0x18(%r11,%rdx), %xmm1
    00001d98: 	addq	%r13, %rdx
    00001d9b: 	mulpd	%xmm2, %xmm1
    00001d9f: 	addpd	%xmm1, %xmm0
    00001da3: 	movlpd	%xmm0, -0x28(%rax)
    00001da8: 	movhpd	%xmm0, -0x8(%rax)
    00001dad: 	cmpq	%rax, %r8
    00001db0: 	jne	.Ltmp629 # Offset: 7600
    00001db6: 	movq	(%rsp), %r13
    00001dba: 	movq	%r11, 0xb0(%rsp)
    00001dc2: 	movq	%r10, (%rsp)
    00001dc6: 	movq	0xd0(%rsp), %r8
    00001dce: 	movl	0x150(%rsp), %edi
    00001dd5: 	cmpl	%edi, 0x140(%rsp)
    00001ddc: 	je	.Ltmp630 # Offset: 7644
    00001de2: 	movq	0x28(%rsp), %rax
    00001de7: 	movsd	(%r8,%r10), %xmm0
    00001ded: 	mulsd	(%r9), %xmm0
    00001df2: 	movq	0x10(%rsp), %rdi
    00001df7: 	addsd	(%rax), %xmm0
    00001dfb: 	movsd	%xmm0, (%rax)
    00001dff: 	movsd	(%r8,%rdi), %xmm1
    00001e05: 	mulsd	0x8(%r9), %xmm1
    00001e0b: 	movq	0x18(%rsp), %rdi
    00001e10: 	addsd	%xmm0, %xmm1
    00001e14: 	movsd	%xmm1, (%rax)
    00001e18: 	movsd	(%r8,%rdi), %xmm0
    00001e1e: 	mulsd	0x10(%r9), %xmm0
    00001e24: 	movq	0x20(%rsp), %rdi
    00001e29: 	addsd	%xmm1, %xmm0
    00001e2d: 	movsd	%xmm0, (%rax)
    00001e31: 	movsd	(%r8,%rdi), %xmm1
    00001e37: 	mulsd	0x18(%r9), %xmm1
    00001e3d: 	addsd	%xmm1, %xmm0
    00001e41: 	movsd	%xmm0, (%rax)
    00001e45: 	movq	0x30(%rsp), %rax
    00001e4a: 	movsd	(%r8,%rax,8), %xmm0
    00001e50: 	mulsd	(%r9), %xmm0
    00001e55: 	addsd	(%rbx), %xmm0
    00001e59: 	movq	0x38(%rsp), %rax
    00001e5e: 	movsd	%xmm0, (%rbx)
    00001e62: 	movsd	0x8(%r8,%r13), %xmm1
    00001e69: 	mulsd	0x8(%r9), %xmm1
    00001e6f: 	addsd	%xmm0, %xmm1
    00001e73: 	movsd	%xmm1, (%rbx)
    00001e77: 	movsd	0x10(%r8,%r13), %xmm0
    00001e7e: 	mulsd	0x10(%r9), %xmm0
    00001e84: 	addsd	%xmm1, %xmm0
    00001e88: 	movsd	%xmm0, (%rbx)
    00001e8c: 	movsd	0x18(%r8,%r13), %xmm1
    00001e93: 	mulsd	0x18(%r9), %xmm1
    00001e99: 	addsd	%xmm1, %xmm0
    00001e9d: 	movsd	%xmm0, (%rbx)
    00001ea1: 	movsd	(%r8,%rax,8), %xmm0
    00001ea7: 	mulsd	(%r9), %xmm0
    00001eac: 	addsd	(%rbp), %xmm0
    00001eb1: 	movq	0x48(%rsp), %rax
    00001eb6: 	movsd	%xmm0, (%rbp)
    00001ebb: 	movsd	0x8(%r8,%r14), %xmm1
    00001ec2: 	mulsd	0x8(%r9), %xmm1
    00001ec8: 	addsd	%xmm0, %xmm1
    00001ecc: 	movsd	%xmm1, (%rbp)
    00001ed1: 	movsd	0x10(%r8,%r14), %xmm0
    00001ed8: 	mulsd	0x10(%r9), %xmm0
    00001ede: 	addsd	%xmm1, %xmm0
    00001ee2: 	movsd	%xmm0, (%rbp)
    00001ee7: 	movsd	0x18(%r8,%r14), %xmm1
    00001eee: 	mulsd	0x18(%r9), %xmm1
    00001ef4: 	addsd	%xmm1, %xmm0
    00001ef8: 	movsd	%xmm0, (%rbp)
    00001efd: 	movsd	(%r8,%rax,8), %xmm0
    00001f03: 	mulsd	(%r9), %xmm0
    00001f08: 	addsd	(%r12), %xmm0
    00001f0e: 	movsd	%xmm0, (%r12)
    00001f14: 	movsd	0x8(%r8,%r15), %xmm1
    00001f1b: 	mulsd	0x8(%r9), %xmm1
    00001f21: 	addsd	%xmm0, %xmm1
    00001f25: 	movsd	%xmm1, (%r12)
    00001f2b: 	movsd	0x10(%r8,%r15), %xmm0
    00001f32: 	mulsd	0x10(%r9), %xmm0
    00001f38: 	addsd	%xmm1, %xmm0
    00001f3c: 	movsd	%xmm0, (%r12)
    00001f42: 	movsd	0x18(%r8,%r15), %xmm1
    00001f49: 	mulsd	0x18(%r9), %xmm1
    00001f4f: 	addsd	%xmm1, %xmm0
    00001f53: 	movsd	%xmm0, (%r12)
.Ltmp630:
    00001f59: 	movq	0x118(%rsp), %rax
    00001f61: 	movl	0x120(%rsp), %r15d
.Ltmp735:
    00001f69: 	cmpl	%r15d, 0xcc(%rsp)
    00001f71: 	jle	.Ltmp631 # Offset: 8049
    00001f77: 	movq	(%rsp), %rsi
    00001f7b: 	movq	0xa8(%rsp), %r11
    00001f83: 	movl	0xcc(%rsp), %ecx
    00001f8a: 	leaq	0x8(%rsi), %rdi
    00001f8e: 	leaq	0x10(%rsi), %r13
    00001f92: 	leaq	0x18(%rsi), %r14
    00001f96: 	movslq	%r15d, %rsi
    00001f99: 	subl	%r15d, %ecx
    00001f9c: 	movq	%rdi, 0x10(%rsp)
    00001fa1: 	leaq	(,%rsi,8), %rdx
    00001fa9: 	movl	%ecx, 0x18(%rsp)
    00001fad: 	movq	%rdx, %r10
    00001fb0: 	movq	%rdx, 0x20(%rsp)
    00001fb5: 	movq	%r11, %rdx
    00001fb8: 	addq	%r10, %rdx
    00001fbb: 	leaq	(%rsi,%rcx), %r10
    00001fbf: 	subq	$0x1, %rcx
    00001fc3: 	movq	%r10, %rdi
    00001fc6: 	movq	%rcx, %r10
    00001fc9: 	movq	0x50(%rsp), %rcx
    00001fce: 	leaq	-0x1(%r11,%rdi,8), %rsi
    00001fd3: 	movq	%rdi, 0x30(%rsp)
    00001fd8: 	imulq	%rcx, %r10
    00001fdc: 	movq	%rcx, %rdi
    00001fdf: 	testq	%rcx, %rcx
    00001fe2: 	movl	$0x0, %ecx
    00001fe7: 	cmovsq	%r10, %rcx
    00001feb: 	addq	(%rsp), %rcx
    00001fef: 	addq	%rax, %rcx
    00001ff2: 	cmpq	%rcx, %rsi
    00001ff5: 	leaq	0x1f(%r10), %rcx
    00001ff9: 	movl	$0x1f, %r10d
    00001fff: 	setb	%sil
    00002003: 	testq	%rdi, %rdi
    00002006: 	cmovsq	%r10, %rcx
    0000200a: 	addq	(%rsp), %rcx
    0000200e: 	addq	%rax, %rcx
    00002011: 	cmpq	%rcx, %rdx
    00002014: 	seta	%cl
    00002017: 	orb	%sil, %cl
    0000201a: 	je	.Ltmp632 # Offset: 8218
    00002020: 	movq	0x30(%rsp), %r10
    00002025: 	leaq	(%r11,%r10,8), %rcx
    00002029: 	movl	0x18(%rsp), %r10d
    0000202e: 	cmpq	%rcx, %r9
    00002031: 	setae	%sil
    00002035: 	cmpq	0xc0(%rsp), %rdx
    0000203d: 	setae	%cl
    00002040: 	orl	%esi, %ecx
    00002042: 	cmpl	$0x1, %r10d
    00002046: 	setne	%sil
    0000204a: 	testb	%sil, %cl
    0000204d: 	je	.Ltmp632 # Offset: 8269
    00002053: 	movq	(%rsp), %rsi
    00002057: 	movsd	(%r9), %xmm5
    0000205c: 	movupd	(%rdx), %xmm7
    00002060: 	movsd	0x8(%r9), %xmm4
    00002066: 	leaq	(%rax,%rsi), %rcx
    0000206a: 	unpcklpd	%xmm5, %xmm5
    0000206e: 	movsd	0x10(%r9), %xmm3
    00002074: 	movl	%r10d, %esi
    00002077: 	movsd	(%rcx), %xmm0
    0000207b: 	movsd	0x18(%r9), %xmm2
    00002081: 	unpcklpd	%xmm4, %xmm4
    00002085: 	shrl	%esi
    00002087: 	unpcklpd	%xmm3, %xmm3
    0000208b: 	movhpd	(%rcx,%rdi), %xmm0
    00002090: 	unpcklpd	%xmm2, %xmm2
    00002094: 	mulpd	%xmm5, %xmm0
    00002098: 	addpd	%xmm7, %xmm0
    0000209c: 	movups	%xmm0, (%rdx)
    0000209f: 	movsd	0x8(%rcx), %xmm1
    000020a4: 	movhpd	0x8(%rcx,%rdi), %xmm1
    000020aa: 	mulpd	%xmm4, %xmm1
    000020ae: 	addpd	%xmm0, %xmm1
    000020b2: 	movups	%xmm1, (%rdx)
    000020b5: 	movsd	0x10(%rcx), %xmm0
    000020ba: 	movhpd	0x10(%rcx,%rdi), %xmm0
    000020c0: 	mulpd	%xmm3, %xmm0
    000020c4: 	addpd	%xmm1, %xmm0
    000020c8: 	movups	%xmm0, (%rdx)
    000020cb: 	movsd	0x18(%rcx), %xmm1
    000020d0: 	movhpd	0x18(%rcx,%rdi), %xmm1
    000020d6: 	leaq	(%rcx,%rdi,2), %rcx
    000020da: 	mulpd	%xmm2, %xmm1
    000020de: 	addpd	%xmm1, %xmm0
    000020e2: 	movups	%xmm0, (%rdx)
    000020e5: 	cmpl	$0x1, %esi
    000020e8: 	je	.Ltmp633 # Offset: 8424
    000020ea: 	movsd	(%rcx), %xmm0
    000020ee: 	movhpd	(%rcx,%rdi), %xmm0
    000020f3: 	mulpd	%xmm5, %xmm0
    000020f7: 	movupd	0x10(%rdx), %xmm5
    000020fc: 	addpd	%xmm5, %xmm0
    00002100: 	movups	%xmm0, 0x10(%rdx)
    00002104: 	movsd	0x8(%rcx), %xmm1
    00002109: 	movhpd	0x8(%rcx,%rdi), %xmm1
    0000210f: 	mulpd	%xmm4, %xmm1
    00002113: 	addpd	%xmm0, %xmm1
    00002117: 	movups	%xmm1, 0x10(%rdx)
    0000211b: 	movsd	0x10(%rcx), %xmm0
    00002120: 	movhpd	0x10(%rcx,%rdi), %xmm0
    00002126: 	mulpd	%xmm3, %xmm0
    0000212a: 	addpd	%xmm1, %xmm0
    0000212e: 	movups	%xmm0, 0x10(%rdx)
    00002132: 	movsd	0x18(%rcx), %xmm1
    00002137: 	movhpd	0x18(%rcx,%rdi), %xmm1
    0000213d: 	mulpd	%xmm2, %xmm1
    00002141: 	addpd	%xmm1, %xmm0
    00002145: 	movups	%xmm0, 0x10(%rdx)
.Ltmp633:
    00002149: 	movl	0x18(%rsp), %r11d
    0000214e: 	movl	%r11d, %esi
    00002151: 	andl	$-0x2, %esi
    00002154: 	movl	%esi, %edx
    00002156: 	imulq	0x50(%rsp), %rdx
    0000215c: 	leal	(%rsi,%r15), %ecx
    00002160: 	addq	%rax, %rdx
    00002163: 	cmpl	%esi, %r11d
    00002166: 	je	.Ltmp631 # Offset: 8550
    00002168: 	movq	(%rsp), %rdi
    0000216c: 	movq	0xa8(%rsp), %rax
    00002174: 	movslq	%ecx, %rcx
    00002177: 	movsd	(%rdx,%rdi), %xmm0
    0000217c: 	leaq	(%rax,%rcx,8), %rax
.Ltmp725:
    00002180: 	mulsd	(%r9), %xmm0
    00002185: 	movq	0x10(%rsp), %rdi
    0000218a: 	addsd	(%rax), %xmm0
    0000218e: 	movsd	%xmm0, (%rax)
    00002192: 	movsd	(%rdx,%rdi), %xmm1
    00002197: 	mulsd	0x8(%r9), %xmm1
    0000219d: 	addsd	%xmm0, %xmm1
    000021a1: 	movsd	%xmm1, (%rax)
    000021a5: 	movsd	(%rdx,%r13), %xmm0
    000021ab: 	mulsd	0x10(%r9), %xmm0
    000021b1: 	addsd	%xmm1, %xmm0
    000021b5: 	movsd	%xmm0, (%rax)
    000021b9: 	movsd	(%rdx,%r14), %xmm1
    000021bf: 	mulsd	0x18(%r9), %xmm1
    000021c5: 	addsd	%xmm1, %xmm0
    000021c9: 	movsd	%xmm0, (%rax)
.Ltmp631:
    000021cd: 	addq	$0x20, (%rsp)
    000021d2: 	movq	0x130(%rsp), %rdi
    000021da: 	movq	(%rsp), %rax
    000021de: 	addl	$0x4, 0x100(%rsp)
    000021e6: 	addq	$0x20, 0x58(%rsp)
    000021ec: 	movq	0xc0(%rsp), %r9
    000021f4: 	addq	$0x20, 0x60(%rsp)
    000021fa: 	addq	$0x20, 0x68(%rsp)
    00002200: 	cmpq	%rdi, %rax
    00002203: 	jne	.Ltmp634 # Offset: 8707
    00002209: 	movl	0x160(%rsp), %eax
    00002210: 	movq	0x178(%rsp), %r15
    00002218: 	movq	0x8(%rsp), %r14
    0000221d: 	shll	$0x2, %eax
    00002220: 	movl	%eax, 0x50(%rsp)
    00002224: 	movl	%eax, %ebx
.Ltmp838:
    00002226: 	cmpl	%ebx, 0x84(%rsp)
    0000222d: 	jle	.Ltmp635 # Offset: 8749
    00002233: 	movslq	0x84(%rsp), %r12
    0000223b: 	movslq	0x50(%rsp), %r11
    00002240: 	movq	0xa8(%rsp), %rbp
    00002248: 	leaq	(%r12,%r12), %rdi
    0000224c: 	movq	%r12, (%rsp)
    00002250: 	leaq	(,%r11,8), %rcx
    00002258: 	leaq	(%rdi,%r11), %rax
    0000225c: 	leaq	(,%rax,8), %r10
    00002264: 	movl	0xcc(%rsp), %eax
    0000226b: 	subl	$0x4, %eax
    0000226e: 	movl	%eax, 0xd0(%rsp)
    00002275: 	shrl	$0x2, %eax
    00002278: 	movl	%eax, %r8d
    0000227b: 	leal	0x1(%rax), %eax
    0000227e: 	movq	%rax, %r13
    00002281: 	movl	%eax, 0x8(%rsp)
    00002285: 	subq	$0x1, %rax
    00002289: 	movq	%rax, %rdx
    0000228c: 	shlq	$0x5, %rdx
    00002290: 	leaq	0x18(%rbp,%rdx), %rsi
    00002295: 	leal	(,%r12,4), %edx
    0000229d: 	movslq	%edx, %rdx
    000022a0: 	movq	%rsi, 0x18(%rsp)
    000022a5: 	leaq	(,%rdx,8), %rsi
    000022ad: 	imulq	%rsi, %rax
    000022b1: 	movq	%rsi, 0x20(%rsp)
    000022b6: 	xorl	%esi, %esi
    000022b8: 	testl	%r12d, %r12d
    000022bb: 	movq	%rsi, %r9
    000022be: 	cmovsq	%rax, %r9
    000022c2: 	cmovnsq	%rax, %rsi
    000022c6: 	shlq	$0x4, %rdx
    000022ca: 	movq	%rdx, 0x10(%rsp)
    000022cf: 	movq	%r9, 0xd8(%rsp)
    000022d7: 	leaq	(,%r12,8), %r9
    000022df: 	leaq	(%r9,%r14), %rax
    000022e3: 	movq	%rsi, 0xe0(%rsp)
    000022eb: 	movq	%rax, 0x100(%rsp)
    000022f3: 	movl	%r13d, %eax
    000022f6: 	shrl	%eax
    000022f8: 	subl	$0x1, %eax
    000022fb: 	shlq	$0x6, %rax
    000022ff: 	leaq	0x40(%rbp,%rax), %rax
    00002304: 	movq	%rax, 0x90(%rsp)
    0000230c: 	movl	%r13d, %eax
    0000230f: 	andl	$-0x2, %eax
    00002312: 	movl	%eax, 0xe8(%rsp)
    00002319: 	shll	$0x2, %eax
    0000231c: 	movslq	%eax, %rdx
    0000231f: 	shlq	$0x3, %rdx
    00002323: 	leaq	(%rbp,%rdx), %rsi
    00002328: 	movq	%rsi, 0x30(%rsp)
    0000232d: 	movl	%r12d, %esi
    00002330: 	imull	%eax, %esi
    00002333: 	movl	%esi, 0x38(%rsp)
    00002337: 	leaq	0x8(%rbp,%rdx), %rsi
    0000233c: 	movq	%rsi, 0x48(%rsp)
    00002341: 	leal	0x1(%rax), %esi
    00002344: 	imull	%r12d, %esi
    00002348: 	movl	%esi, 0x58(%rsp)
    0000234c: 	leaq	0x10(%rbp,%rdx), %rsi
    00002351: 	movq	%rsi, 0x60(%rsp)
    00002356: 	leal	0x2(%rax), %esi
    00002359: 	addl	$0x3, %eax
    0000235c: 	imull	%r12d, %eax
    00002360: 	imull	%r12d, %esi
    00002364: 	movl	%eax, 0x88(%rsp)
    0000236b: 	movl	%r8d, %eax
    0000236e: 	shlq	$0x5, %rax
    00002372: 	movl	%esi, 0x68(%rsp)
    00002376: 	leaq	0x18(%rbp,%rdx), %rsi
    0000237b: 	leaq	0x20(%rbp,%rax), %rax
    00002380: 	movq	%rsi, 0x70(%rsp)
    00002385: 	movq	%rax, 0xf8(%rsp)
    0000238d: 	movq	%r12, %rax
    00002390: 	shlq	$0x4, %r12
    00002394: 	addq	%rdi, %rax
    00002397: 	movq	%r12, 0xf0(%rsp)
    0000239f: 	shlq	$0x3, %rax
    000023a3: 	movq	%rax, 0x108(%rsp)
    000023ab: 	leal	(,%r13,4), %eax
    000023b3: 	movl	%eax, 0xb0(%rsp)
.Ltmp643:
    000023ba: 	cmpl	$0x3, 0xcc(%rsp)
    000023c2: 	movsd	(%r15,%rcx), %xmm0
    000023c8: 	movl	%r11d, %edx
    000023cb: 	jle	.Ltmp636 # Offset: 9163
    000023d1: 	movq	0xd8(%rsp), %r12
    000023d9: 	movq	0xe0(%rsp), %r13
    000023e1: 	leaq	(%r10,%r9), %rsi
    000023e5: 	leaq	(%rcx,%r9), %rdi
    000023e9: 	movq	0xa8(%rsp), %rbp
    000023f1: 	leaq	(%r12,%r10), %rax
    000023f5: 	addq	%r14, %rax
    000023f8: 	cmpq	%rax, 0x18(%rsp)
    000023fd: 	movq	%r13, %rax
    00002400: 	setb	%r8b
    00002404: 	addq	%r10, %rax
    00002407: 	addq	%r14, %rax
    0000240a: 	movl	%r8d, %ebx
    0000240d: 	cmpq	%rax, %rbp
    00002410: 	seta	%al
    00002413: 	orl	%eax, %ebx
    00002415: 	leaq	(%r12,%rsi), %rax
    00002419: 	addq	%r14, %rax
    0000241c: 	cmpq	%rax, 0x18(%rsp)
    00002421: 	movq	%r13, %rax
    00002424: 	setb	%r8b
    00002428: 	addq	%rsi, %rax
    0000242b: 	addq	%r14, %rax
    0000242e: 	cmpq	%rax, %rbp
    00002431: 	seta	%al
    00002434: 	orl	%r8d, %eax
    00002437: 	andl	%ebx, %eax
    00002439: 	cmpl	$0x7, 0xd0(%rsp)
    00002441: 	movl	%eax, %ebx
    00002443: 	movq	%r13, %rax
    00002446: 	seta	%sil
    0000244a: 	addq	%rcx, %rax
    0000244d: 	andl	%esi, %ebx
    0000244f: 	addq	%r14, %rax
    00002452: 	movl	%ebx, %r8d
    00002455: 	movq	%rbp, %rbx
    00002458: 	cmpq	%rax, %rbp
    0000245b: 	movq	0x18(%rsp), %rbp
    00002460: 	leaq	(%r12,%rcx), %rax
    00002464: 	seta	%sil
    00002468: 	addq	%r14, %rax
    0000246b: 	cmpq	%rax, %rbp
    0000246e: 	setb	%al
    00002471: 	orl	%esi, %eax
    00002473: 	testb	%al, %r8b
    00002476: 	je	.Ltmp637 # Offset: 9334
    0000247c: 	leaq	(%r12,%rdi), %rax
    00002480: 	addq	%r14, %rax
    00002483: 	cmpq	%rax, %rbp
    00002486: 	movq	%r13, %rax
    00002489: 	movq	%rbx, %r13
    0000248c: 	setb	%sil
    00002490: 	addq	%rdi, %rax
    00002493: 	addq	%r14, %rax
    00002496: 	cmpq	%rax, %rbx
    00002499: 	seta	%al
    0000249c: 	orb	%sil, %al
    0000249f: 	je	.Ltmp637 # Offset: 9375
    000024a5: 	movapd	%xmm0, %xmm5
    000024a9: 	movq	%r13, %rax
    000024ac: 	movl	0x8(%rsp), %r13d
    000024b1: 	leaq	(%r14,%rcx), %r8
    000024b5: 	movq	0x100(%rsp), %rdi
    000024bd: 	unpcklpd	%xmm5, %xmm5
    000024c1: 	leaq	(%r14,%r10), %rbp
    000024c5: 	xorl	%esi, %esi
    000024c7: 	leaq	(%rcx,%rdi), %rbx
    000024cb: 	leaq	(%r10,%rdi), %r12
    000024cf: 	movq	0x20(%rsp), %rdi
.Ltmp638:
    000024d4: 	movsd	(%r8,%rsi), %xmm3
    000024da: 	movupd	(%rax), %xmm1
    000024de: 	addq	$0x40, %rax
    000024e2: 	movupd	-0x20(%rax), %xmm8
    000024e8: 	movupd	-0x30(%rax), %xmm6
    000024ed: 	movhpd	(%r8,%rdi), %xmm3
    000024f3: 	movhpd	-0x30(%rax), %xmm1
    000024f8: 	movlpd	-0x38(%rax), %xmm6
    000024fd: 	movupd	-0x10(%rax), %xmm7
    00002502: 	mulpd	%xmm5, %xmm3
    00002506: 	movhpd	-0x10(%rax), %xmm8
    0000250c: 	movapd	%xmm1, %xmm2
    00002510: 	movlpd	-0x18(%rax), %xmm7
    00002515: 	unpcklpd	%xmm8, %xmm2
    0000251a: 	movapd	%xmm6, %xmm4
    0000251e: 	unpckhpd	%xmm8, %xmm1
    00002523: 	unpcklpd	%xmm7, %xmm4
    00002527: 	unpckhpd	%xmm7, %xmm6
    0000252b: 	addpd	%xmm2, %xmm3
    0000252f: 	movsd	(%rbx,%rsi), %xmm2
    00002534: 	movhpd	(%rbx,%rdi), %xmm2
    00002539: 	mulpd	%xmm5, %xmm2
    0000253d: 	addpd	%xmm2, %xmm4
    00002541: 	movsd	(%rbp,%rsi), %xmm2
    00002547: 	movhpd	(%rbp,%rdi), %xmm2
    0000254d: 	mulpd	%xmm5, %xmm2
    00002551: 	movapd	%xmm4, %xmm7
    00002555: 	addpd	%xmm1, %xmm2
    00002559: 	movsd	(%r12,%rsi), %xmm1
    0000255f: 	addq	0x10(%rsp), %rsi
    00002564: 	movhpd	(%r12,%rdi), %xmm1
    0000256a: 	addq	0x10(%rsp), %rdi
    0000256f: 	mulpd	%xmm5, %xmm1
    00002573: 	addpd	%xmm6, %xmm1
    00002577: 	movapd	%xmm3, %xmm6
    0000257b: 	unpckhpd	%xmm2, %xmm3
    0000257f: 	unpcklpd	%xmm2, %xmm6
    00002583: 	unpcklpd	%xmm1, %xmm7
    00002587: 	unpckhpd	%xmm1, %xmm4
    0000258b: 	movapd	%xmm6, %xmm1
    0000258f: 	unpcklpd	%xmm7, %xmm1
    00002593: 	unpckhpd	%xmm7, %xmm6
    00002597: 	movups	%xmm1, -0x40(%rax)
    0000259b: 	movapd	%xmm3, %xmm1
    0000259f: 	unpckhpd	%xmm4, %xmm3
    000025a3: 	unpcklpd	%xmm4, %xmm1
    000025a7: 	movups	%xmm6, -0x30(%rax)
    000025ab: 	movups	%xmm1, -0x20(%rax)
    000025af: 	movups	%xmm3, -0x10(%rax)
    000025b3: 	cmpq	0x90(%rsp), %rax
    000025bb: 	jne	.Ltmp638 # Offset: 9659
    000025c1: 	movl	0xe8(%rsp), %eax
    000025c8: 	movl	%r13d, 0x8(%rsp)
    000025cd: 	cmpl	%eax, %r13d
    000025d0: 	je	.Ltmp639 # Offset: 9680
    000025d2: 	movl	0x38(%rsp), %eax
    000025d6: 	addl	%edx, %eax
    000025d8: 	cltq
    000025da: 	movsd	(%r14,%rax,8), %xmm1
    000025e0: 	movq	0x30(%rsp), %rax
    000025e5: 	mulsd	%xmm0, %xmm1
    000025e9: 	addsd	(%rax), %xmm1
    000025ed: 	movsd	%xmm1, (%rax)
    000025f1: 	movl	0x58(%rsp), %eax
    000025f5: 	addl	%edx, %eax
    000025f7: 	cltq
    000025f9: 	movsd	(%r14,%rax,8), %xmm1
    000025ff: 	movq	0x48(%rsp), %rax
    00002604: 	mulsd	%xmm0, %xmm1
    00002608: 	addsd	(%rax), %xmm1
    0000260c: 	movsd	%xmm1, (%rax)
    00002610: 	movl	0x68(%rsp), %eax
    00002614: 	addl	%edx, %eax
    00002616: 	cltq
    00002618: 	movsd	(%r14,%rax,8), %xmm1
    0000261e: 	movq	0x60(%rsp), %rax
    00002623: 	mulsd	%xmm0, %xmm1
    00002627: 	addsd	(%rax), %xmm1
    0000262b: 	movsd	%xmm1, (%rax)
    0000262f: 	movl	0x88(%rsp), %eax
    00002636: 	addl	%edx, %eax
    00002638: 	cltq
    0000263a: 	movsd	(%r14,%rax,8), %xmm1
    00002640: 	movq	0x70(%rsp), %rax
    00002645: 	mulsd	%xmm0, %xmm1
    00002649: 	addsd	(%rax), %xmm1
    0000264d: 	movsd	%xmm1, (%rax)
.Ltmp639:
    00002651: 	movl	0xb0(%rsp), %eax
.Ltmp828:
    00002658: 	cmpl	%eax, 0xcc(%rsp)
    0000265f: 	jle	.Ltmp640 # Offset: 9823
    00002665: 	movl	0x84(%rsp), %edi
    0000266c: 	movl	0xcc(%rsp), %ebx
    00002673: 	movq	0xa8(%rsp), %r13
    0000267b: 	imull	%eax, %edi
    0000267e: 	subl	%eax, %ebx
    00002680: 	movl	%ebx, %r8d
    00002683: 	movslq	%edi, %rsi
    00002686: 	movl	%edi, 0xc0(%rsp)
    0000268d: 	movslq	%eax, %rdi
    00002690: 	addq	%r11, %rsi
    00002693: 	leaq	(,%rdi,8), %rbp
    0000269b: 	leaq	-0x1(%r8,%rdi), %rdi
    000026a0: 	leaq	(,%rsi,8), %r12
    000026a8: 	movq	%rsi, 0x110(%rsp)
    000026b0: 	leaq	-0x1(%r8), %rsi
    000026b4: 	imulq	%r9, %rsi
    000026b8: 	leaq	(%r13,%rdi,8), %r8
    000026bd: 	movl	0x84(%rsp), %edi
    000026c4: 	movq	%rsi, 0x28(%rsp)
    000026c9: 	movq	%r13, %rsi
    000026cc: 	xorl	%r13d, %r13d
    000026cf: 	addq	%rbp, %rsi
    000026d2: 	testl	%edi, %edi
    000026d4: 	cmovsq	0x28(%rsp), %r13
    000026da: 	movq	%r13, %rdi
    000026dd: 	addq	%r12, %rdi
    000026e0: 	addq	%r14, %rdi
    000026e3: 	cmpq	%rdi, %r8
    000026e6: 	movl	0x84(%rsp), %edi
    000026ed: 	setb	%r8b
    000026f1: 	xorl	%r13d, %r13d
    000026f4: 	testl	%edi, %edi
    000026f6: 	cmovnsq	0x28(%rsp), %r13
    000026fc: 	movq	%r13, %rdi
    000026ff: 	addq	%r12, %rdi
    00002702: 	addq	%r14, %rdi
    00002705: 	cmpq	%rdi, %rsi
    00002708: 	seta	%dil
    0000270c: 	orb	%r8b, %dil
    0000270f: 	je	.Ltmp641 # Offset: 9999
    00002715: 	leal	-0x1(%rbx), %edi
    00002718: 	cmpl	$0x2, %edi
    0000271b: 	jbe	.Ltmp641 # Offset: 10011
    00002721: 	leaq	(%r14,%r12), %rdi
    00002725: 	movapd	%xmm0, %xmm2
    00002729: 	movupd	(%rsi), %xmm4
    0000272d: 	movl	%ebx, %r8d
    00002730: 	movsd	(%rdi), %xmm1
    00002734: 	unpcklpd	%xmm2, %xmm2
    00002738: 	shrl	%r8d
    0000273b: 	movhpd	(%rdi,%r9), %xmm1
    00002741: 	leaq	(%rdi,%r9,2), %rdi
    00002745: 	mulpd	%xmm2, %xmm1
    00002749: 	addpd	%xmm4, %xmm1
    0000274d: 	movups	%xmm1, (%rsi)
    00002750: 	cmpl	$0x1, %r8d
    00002754: 	je	.Ltmp642 # Offset: 10068
    00002756: 	movsd	(%rdi), %xmm1
    0000275a: 	movupd	0x10(%rsi), %xmm4
    0000275f: 	movhpd	(%rdi,%r9), %xmm1
    00002765: 	mulpd	%xmm2, %xmm1
    00002769: 	addpd	%xmm4, %xmm1
    0000276d: 	movups	%xmm1, 0x10(%rsi)
.Ltmp642:
    00002771: 	movl	%ebx, %esi
    00002773: 	andl	$-0x2, %esi
    00002776: 	addl	%esi, %eax
    00002778: 	cmpl	%esi, %ebx
    0000277a: 	je	.Ltmp640 # Offset: 10106
    0000277c: 	movslq	%eax, %rsi
    0000277f: 	movq	0xa8(%rsp), %rbx
    00002787: 	imull	0x84(%rsp), %eax
    0000278f: 	leaq	(%rbx,%rsi,8), %rsi
.Ltmp827:
    00002793: 	addl	%edx, %eax
    00002795: 	cltq
    00002797: 	mulsd	(%r14,%rax,8), %xmm0
    0000279d: 	addsd	(%rsi), %xmm0
    000027a1: 	movsd	%xmm0, (%rsi)
.Ltmp640:
    000027a5: 	addq	$0x1, %r11
    000027a9: 	addq	$0x8, %r10
    000027ad: 	addq	$0x8, %rcx
    000027b1: 	cmpl	%r11d, 0x84(%rsp)
    000027b9: 	jg	.Ltmp643 # Offset: 10169
.Ltmp635:
    000027bf: 	xorl	%eax, %eax
.Ltmp646:
    000027c1: 	movq	0x1e0(%rsp), %rbx
    000027c9: 	movsd	(%rbx,%rax,8), %xmm1
    000027ce: 	movq	0xa8(%rsp), %rbx
    000027d6: 	movapd	%xmm1, %xmm2
    000027da: 	andpd	DATAat0x24940(%rip), %xmm2
    000027e2: 	movapd	%xmm1, %xmm0
    000027e6: 	comisd	DATAat0x24978(%rip), %xmm2
    000027ee: 	subsd	(%rbx,%rax,8), %xmm0
    000027f3: 	jbe	.Ltmp644 # Offset: 10227
    000027f5: 	divsd	%xmm1, %xmm0
.Ltmp644:
    000027f9: 	andpd	DATAat0x24940(%rip), %xmm0
    00002801: 	movsd	DATAat0x24980(%rip), %xmm4
    00002809: 	comisd	%xmm0, %xmm4
    0000280d: 	jbe	.Ltmp645 # Offset: 10253
    00002813: 	addq	$0x1, %rax
    00002817: 	cmpq	$0x320, %rax
    0000281d: 	jne	.Ltmp646 # Offset: 10269
.Ltmp826:
    0000281f: 	movq	0xa8(%rsp), %rax
    00002827: 	xorl	%r12d, %r12d
    0000282a: 	movq	$0x0, (%rax)
    00002831: 	movq	0xa0(%rsp), %rbx
    00002839: 	movq	$0x0, -0x10(%rbx)
    00002841: 	movq	0x40(%rsp), %rdi
    00002846: 	andq	$-0x8, %rdi
    0000284a: 	subq	%rdi, %rax
    0000284d: 	movq	%rax, %rcx
    00002850: 	movq	%r12, %rax
    00002853: 	addl	$0x1900, %ecx
    00002859: 	shrl	$0x3, %ecx
    0000285c: 	rep		stosq	%rax, %es:(%rdi)
    0000285f: 	movl	0xb8(%rsp), %ebp
    00002866: 	testl	%ebp, %ebp
    00002868: 	jle	.Ltmp647 # Offset: 10344
    0000286e: 	movl	0x84(%rsp), %esi
    00002875: 	movq	$0x0, (%rsp)
    0000287d: 	movq	%r15, %r11
    00002880: 	movq	%r15, 0x160(%rsp)
    00002888: 	leal	(,%rsi,4), %eax
    0000288f: 	leal	(%rsi,%rsi), %edi
    00002892: 	movslq	%eax, %r9
    00002895: 	movslq	%esi, %rax
    00002898: 	leal	(%rdi,%rsi), %ebx
    0000289b: 	shlq	$0x3, %rax
    0000289f: 	leaq	(,%r9,8), %r10
    000028a7: 	movq	%rax, 0x10(%rsp)
    000028ac: 	movslq	%edi, %rax
    000028af: 	leaq	(,%rax,8), %rcx
    000028b7: 	movslq	%ebx, %rax
    000028ba: 	movq	%r10, 0xb0(%rsp)
    000028c2: 	movq	%rcx, 0x88(%rsp)
    000028ca: 	leaq	(,%rax,8), %rcx
    000028d2: 	leal	-0x4(%rsi), %eax
    000028d5: 	shrl	$0x2, %eax
    000028d8: 	movq	%rcx, 0x90(%rsp)
    000028e0: 	addl	$0x1, %eax
    000028e3: 	movq	%rax, %rcx
    000028e6: 	shlq	$0x5, %rcx
    000028ea: 	movq	%rcx, 0x148(%rsp)
    000028f2: 	movl	0xcc(%rsp), %ecx
    000028f9: 	leal	-0x4(%rcx), %eax
    000028fc: 	movl	$0x1f, %ecx
    00002901: 	movl	%eax, 0x110(%rsp)
    00002908: 	shrl	$0x2, %eax
    0000290b: 	leal	0x1(%rax), %r8d
    0000290f: 	movl	%eax, %ebp
    00002911: 	leaq	-0x1(%r8), %rax
    00002915: 	movl	%r8d, %r13d
    00002918: 	movl	%r8d, 0x108(%rsp)
    00002920: 	movq	%rax, %rdx
    00002923: 	imulq	%r10, %rdx
    00002927: 	testq	%r10, %r10
    0000292a: 	leaq	0x1f(%rdx), %rsi
    0000292e: 	cmovnsq	%rsi, %rcx
    00002932: 	shlq	$0x5, %rax
    00002936: 	testq	%r10, %r10
    00002939: 	movl	%r13d, %esi
    0000293c: 	cmovsq	%rdx, %r12
    00002940: 	shlq	$0x5, %r8
    00002944: 	movq	%rcx, 0x68(%rsp)
    00002949: 	movq	0xa8(%rsp), %rcx
    00002951: 	shlq	$0x4, %r9
    00002955: 	movq	%r12, 0x58(%rsp)
    0000295a: 	leaq	0x1f(%rcx,%rax), %rax
    0000295f: 	movq	%rcx, %rdx
    00002962: 	addq	%rcx, %r8
    00002965: 	movq	%r9, 0x140(%rsp)
    0000296d: 	movq	%rax, 0x60(%rsp)
    00002972: 	movl	%r13d, %eax
    00002975: 	shrl	%eax
    00002977: 	movq	%r8, 0x130(%rsp)
    0000297f: 	subl	$0x1, %eax
    00002982: 	shlq	$0x6, %rax
    00002986: 	leaq	0x40(%rcx,%rax), %rcx
    0000298b: 	movq	%rcx, 0x118(%rsp)
    00002993: 	movl	%r13d, %ecx
    00002996: 	andl	$-0x2, %ecx
    00002999: 	movl	%ecx, %eax
    0000299b: 	movl	%ecx, 0x138(%rsp)
    000029a2: 	imulq	%r10, %rax
    000029a6: 	leaq	(%r14,%rax), %r8
    000029aa: 	leal	(,%rcx,4), %eax
    000029b1: 	movq	%rdx, %rcx
    000029b4: 	cltq
    000029b6: 	shlq	$0x3, %rax
    000029ba: 	leaq	0x8(%rdx,%rax), %r12
    000029bf: 	leaq	(%rdx,%rax), %r13
    000029c3: 	leaq	0x10(%rdx,%rax), %r9
    000029c8: 	leaq	0x18(%rdx,%rax), %rdx
    000029cd: 	movl	%ebp, %eax
    000029cf: 	movq	%r12, %rbp
    000029d2: 	movq	%rdx, 0x8(%rsp)
    000029d7: 	movq	%rax, %rdx
    000029da: 	addq	$0x1, %rax
    000029de: 	movq	0x8(%rsp), %r12
    000029e3: 	imulq	%r10, %rax
    000029e7: 	shlq	$0x5, %rdx
    000029eb: 	movq	%r14, 0x8(%rsp)
    000029f0: 	leaq	0x20(%rcx,%rdx), %rcx
    000029f5: 	movq	%rcx, 0x100(%rsp)
    000029fd: 	leal	(,%rsi,4), %ecx
    00002a04: 	movl	0x84(%rsp), %esi
    00002a0b: 	movl	%ecx, 0x128(%rsp)
    00002a12: 	leaq	(%r14,%rax), %rcx
    00002a16: 	movq	0x10(%rsp), %rax
    00002a1b: 	subl	%esi, %edi
    00002a1d: 	movq	%rcx, 0x120(%rsp)
    00002a25: 	movq	%rax, 0x70(%rsp)
    00002a2a: 	movl	%ebx, %eax
    00002a2c: 	movq	%r13, %rbx
    00002a2f: 	subl	%esi, %eax
    00002a31: 	movl	%esi, 0xc0(%rsp)
    00002a38: 	movl	%edi, 0x150(%rsp)
    00002a3f: 	movl	%eax, 0x158(%rsp)
.Ltmp655:
    00002a46: 	cmpl	$0x3, 0xcc(%rsp)
    00002a4e: 	jle	.Ltmp648 # Offset: 10830
    00002a54: 	movslq	0xc0(%rsp), %rax
    00002a5c: 	movq	0x8(%rsp), %r10
    00002a61: 	movq	%rax, %rdi
    00002a64: 	leaq	(,%rax,8), %r13
    00002a6c: 	movq	%rax, 0x30(%rsp)
    00002a71: 	movl	0x150(%rsp), %eax
    00002a78: 	addl	%edi, %eax
    00002a7a: 	cltq
    00002a7c: 	leaq	(,%rax,8), %r14
    00002a84: 	movq	%rax, 0x38(%rsp)
    00002a89: 	movl	0x158(%rsp), %eax
    00002a90: 	addl	%edi, %eax
    00002a92: 	cltq
    00002a94: 	leaq	(,%rax,8), %r15
    00002a9c: 	movq	%rax, 0x48(%rsp)
    00002aa1: 	movq	(%rsp), %rax
    00002aa5: 	leaq	0x18(%r15), %rcx
    00002aa9: 	leaq	0x8(%rax), %rdi
    00002aad: 	leaq	0x18(%rax), %rsi
    00002ab1: 	movq	%rdi, 0x18(%rsp)
    00002ab6: 	leaq	0x8(%r13), %rdi
    00002aba: 	movq	%rdi, 0xd0(%rsp)
    00002ac2: 	leaq	0x8(%r14), %rdi
    00002ac6: 	movq	%rdi, 0xd8(%rsp)
    00002ace: 	leaq	0x8(%r15), %rdi
    00002ad2: 	movq	%rdi, 0xe0(%rsp)
    00002ada: 	leaq	0x10(%rax), %rdi
    00002ade: 	movq	0x58(%rsp), %rax
    00002ae3: 	addq	0x70(%rsp), %rax
    00002ae8: 	movq	%rdi, 0x20(%rsp)
    00002aed: 	leaq	0x10(%r13), %rdi
    00002af1: 	addq	%r10, %rax
    00002af4: 	cmpq	%rax, 0x60(%rsp)
    00002af9: 	movq	0x68(%rsp), %rax
    00002afe: 	movq	%rdi, 0xe8(%rsp)
    00002b06: 	setb	%dl
    00002b09: 	addq	0x70(%rsp), %rax
    00002b0e: 	leaq	0x10(%r14), %rdi
    00002b12: 	movq	%rsi, 0x28(%rsp)
    00002b17: 	addq	%r10, %rax
    00002b1a: 	cmpq	%rax, 0xa8(%rsp)
    00002b22: 	leaq	0x18(%r14), %rsi
    00002b26: 	movl	%edx, %r10d
    00002b29: 	seta	%al
    00002b2c: 	movq	%rdi, 0xf0(%rsp)
    00002b34: 	leaq	0x10(%r15), %rdi
    00002b38: 	orl	%eax, %r10d
    00002b3b: 	leaq	0x20(%r11), %rax
    00002b3f: 	cmpq	%rax, 0xa8(%rsp)
    00002b47: 	movq	%rdi, 0xf8(%rsp)
    00002b4f: 	setae	%dl
    00002b52: 	cmpq	%r11, 0x130(%rsp)
    00002b5a: 	movq	%rax, 0xb8(%rsp)
    00002b62: 	leaq	0x18(%r13), %rdi
    00002b66: 	setbe	%al
    00002b69: 	orl	%edx, %eax
    00002b6b: 	cmpl	$0x3, 0x110(%rsp)
    00002b73: 	seta	%dl
    00002b76: 	andl	%edx, %eax
    00002b78: 	andl	%r10d, %eax
    00002b7b: 	movl	%eax, %r10d
    00002b7e: 	movq	0x58(%rsp), %rax
    00002b83: 	addq	0x88(%rsp), %rax
    00002b8b: 	addq	0x8(%rsp), %rax
    00002b90: 	cmpq	%rax, 0x60(%rsp)
    00002b95: 	setb	%dl
    00002b98: 	movq	0x68(%rsp), %rax
    00002b9d: 	addq	0x88(%rsp), %rax
    00002ba5: 	addq	0x8(%rsp), %rax
    00002baa: 	cmpq	%rax, 0xa8(%rsp)
    00002bb2: 	seta	%al
    00002bb5: 	orl	%edx, %eax
    00002bb7: 	movq	0x68(%rsp), %rdx
    00002bbc: 	addq	0x90(%rsp), %rdx
    00002bc4: 	andl	%r10d, %eax
    00002bc7: 	movl	%eax, %r10d
    00002bca: 	movq	0x8(%rsp), %rax
    00002bcf: 	addq	%rdx, %rax
    00002bd2: 	cmpq	%rax, 0xa8(%rsp)
    00002bda: 	movq	0x58(%rsp), %rax
    00002bdf: 	seta	%dl
    00002be2: 	addq	0x90(%rsp), %rax
    00002bea: 	addq	0x8(%rsp), %rax
    00002bef: 	cmpq	%rax, 0x60(%rsp)
    00002bf4: 	setb	%al
    00002bf7: 	orl	%edx, %eax
    00002bf9: 	testb	%al, %r10b
    00002bfc: 	je	.Ltmp649 # Offset: 11260
    00002c02: 	movq	0x8(%rsp), %r10
    00002c07: 	movq	0x68(%rsp), %rdx
    00002c0c: 	addq	(%rsp), %rdx
    00002c10: 	movq	%rdx, %rax
    00002c13: 	addq	%r10, %rax
    00002c16: 	cmpq	%rax, 0xa8(%rsp)
    00002c1e: 	movq	0x58(%rsp), %rax
    00002c23: 	seta	%dl
    00002c26: 	addq	(%rsp), %rax
    00002c2a: 	addq	%r10, %rax
    00002c2d: 	cmpq	%rax, 0x60(%rsp)
    00002c32: 	setb	%al
    00002c35: 	orb	%dl, %al
    00002c37: 	je	.Ltmp649 # Offset: 11319
    00002c3d: 	movq	(%rsp), %rdi
    00002c41: 	movq	0x70(%rsp), %rsi
    00002c46: 	movq	%r11, 0xd0(%rsp)
    00002c4e: 	movq	0x88(%rsp), %rcx
    00002c56: 	movq	0x90(%rsp), %rdx
    00002c5e: 	movq	%r8, 0xd8(%rsp)
    00002c66: 	movsd	(%r11), %xmm4
    00002c6b: 	movsd	0x8(%r11), %xmm3
    00002c71: 	addq	%r10, %rdi
    00002c74: 	addq	%r10, %rsi
    00002c77: 	movsd	0x10(%r11), %xmm2
    00002c7d: 	movsd	0x18(%r11), %xmm1
    00002c83: 	addq	%r10, %rcx
    00002c86: 	addq	%r10, %rdx
    00002c89: 	movq	0xa8(%rsp), %rax
    00002c91: 	unpcklpd	%xmm4, %xmm4
    00002c95: 	unpcklpd	%xmm3, %xmm3
    00002c99: 	movq	0xb0(%rsp), %r10
    00002ca1: 	movq	0x118(%rsp), %r8
    00002ca9: 	movq	0x140(%rsp), %r11
    00002cb1: 	unpcklpd	%xmm2, %xmm2
    00002cb5: 	unpcklpd	%xmm1, %xmm1
.Ltmp650:
    00002cb9: 	movsd	(%rdi), %xmm0
    00002cbd: 	movsd	(%rsi), %xmm7
    00002cc1: 	addq	$0x40, %rax
    00002cc5: 	movupd	-0x40(%rax), %xmm5
    00002cca: 	movupd	-0x20(%rax), %xmm10
    00002cd0: 	movhpd	(%rdi,%r10), %xmm0
    00002cd6: 	movhpd	(%rsi,%r10), %xmm7
    00002cdc: 	movupd	-0x30(%rax), %xmm8
    00002ce2: 	movlpd	-0x38(%rax), %xmm8
    00002ce8: 	mulpd	%xmm4, %xmm0
    00002cec: 	movhpd	-0x30(%rax), %xmm5
    00002cf1: 	movhpd	-0x10(%rax), %xmm10
    00002cf7: 	movupd	-0x10(%rax), %xmm9
    00002cfd: 	mulpd	%xmm4, %xmm7
    00002d01: 	movapd	%xmm5, %xmm6
    00002d05: 	movlpd	-0x18(%rax), %xmm9
    00002d0b: 	unpckhpd	%xmm10, %xmm5
    00002d10: 	unpcklpd	%xmm10, %xmm6
    00002d15: 	addpd	%xmm6, %xmm0
    00002d19: 	movapd	%xmm8, %xmm6
    00002d1e: 	unpckhpd	%xmm9, %xmm8
    00002d23: 	unpcklpd	%xmm9, %xmm6
    00002d28: 	addpd	%xmm6, %xmm7
    00002d2c: 	movsd	(%rcx), %xmm6
    00002d30: 	movapd	%xmm0, %xmm9
    00002d35: 	movhpd	(%rcx,%r10), %xmm6
    00002d3b: 	mulpd	%xmm4, %xmm6
    00002d3f: 	addpd	%xmm5, %xmm6
    00002d43: 	movsd	(%rdx), %xmm5
    00002d47: 	movhpd	(%rdx,%r10), %xmm5
    00002d4d: 	mulpd	%xmm4, %xmm5
    00002d51: 	unpcklpd	%xmm6, %xmm9
    00002d56: 	unpckhpd	%xmm6, %xmm0
    00002d5a: 	movapd	%xmm7, %xmm6
    00002d5e: 	addpd	%xmm8, %xmm5
    00002d63: 	movapd	%xmm9, %xmm8
    00002d68: 	unpcklpd	%xmm5, %xmm6
    00002d6c: 	unpckhpd	%xmm5, %xmm7
    00002d70: 	movapd	%xmm9, %xmm5
    00002d75: 	unpcklpd	%xmm6, %xmm8
    00002d7a: 	movapd	%xmm0, %xmm9
    00002d7f: 	unpckhpd	%xmm6, %xmm5
    00002d83: 	unpcklpd	%xmm7, %xmm9
    00002d88: 	movapd	%xmm8, %xmm10
    00002d8d: 	movups	%xmm5, -0x30(%rax)
    00002d91: 	unpckhpd	%xmm7, %xmm0
    00002d95: 	movups	%xmm8, -0x40(%rax)
    00002d9a: 	unpcklpd	%xmm5, %xmm10
    00002d9f: 	unpckhpd	%xmm5, %xmm8
    00002da4: 	movapd	%xmm9, %xmm5
    00002da9: 	movups	%xmm9, -0x20(%rax)
    00002dae: 	unpcklpd	%xmm0, %xmm5
    00002db2: 	unpckhpd	%xmm0, %xmm9
    00002db7: 	movapd	%xmm10, %xmm6
    00002dbc: 	movups	%xmm0, -0x10(%rax)
    00002dc0: 	movsd	0x8(%rdi), %xmm0
    00002dc5: 	movsd	0x8(%rsi), %xmm7
    00002dca: 	unpcklpd	%xmm5, %xmm6
    00002dce: 	unpckhpd	%xmm5, %xmm10
    00002dd3: 	movsd	0x8(%rdx), %xmm5
    00002dd8: 	movhpd	0x8(%r10,%rdi), %xmm0
    00002ddf: 	movhpd	0x8(%r10,%rsi), %xmm7
    00002de6: 	mulpd	%xmm3, %xmm0
    00002dea: 	movhpd	0x8(%r10,%rdx), %xmm5
    00002df1: 	mulpd	%xmm3, %xmm7
    00002df5: 	mulpd	%xmm3, %xmm5
    00002df9: 	addpd	%xmm6, %xmm0
    00002dfd: 	movapd	%xmm8, %xmm6
    00002e02: 	unpckhpd	%xmm9, %xmm8
    00002e07: 	unpcklpd	%xmm9, %xmm6
    00002e0c: 	addpd	%xmm6, %xmm7
    00002e10: 	movsd	0x8(%rcx), %xmm6
    00002e15: 	addpd	%xmm8, %xmm5
    00002e1a: 	movapd	%xmm0, %xmm9
    00002e1f: 	movhpd	0x8(%r10,%rcx), %xmm6
    00002e26: 	mulpd	%xmm3, %xmm6
    00002e2a: 	addpd	%xmm10, %xmm6
    00002e2f: 	unpcklpd	%xmm6, %xmm9
    00002e34: 	unpckhpd	%xmm6, %xmm0
    00002e38: 	movapd	%xmm7, %xmm6
    00002e3c: 	unpcklpd	%xmm5, %xmm6
    00002e40: 	movapd	%xmm9, %xmm8
    00002e45: 	unpckhpd	%xmm5, %xmm7
    00002e49: 	unpcklpd	%xmm6, %xmm8
    00002e4e: 	movapd	%xmm9, %xmm5
    00002e53: 	movapd	%xmm0, %xmm9
    00002e58: 	unpckhpd	%xmm6, %xmm5
    00002e5c: 	unpcklpd	%xmm7, %xmm9
    00002e61: 	movapd	%xmm8, %xmm10
    00002e66: 	movups	%xmm8, -0x40(%rax)
    00002e6b: 	unpckhpd	%xmm7, %xmm0
    00002e6f: 	unpcklpd	%xmm5, %xmm10
    00002e74: 	unpckhpd	%xmm5, %xmm8
    00002e79: 	movups	%xmm5, -0x30(%rax)
    00002e7d: 	movapd	%xmm9, %xmm5
    00002e82: 	movups	%xmm9, -0x20(%rax)
    00002e87: 	unpckhpd	%xmm0, %xmm9
    00002e8c: 	movapd	%xmm10, %xmm6
    00002e91: 	unpcklpd	%xmm0, %xmm5
    00002e95: 	movups	%xmm0, -0x10(%rax)
    00002e99: 	movsd	0x10(%rdi), %xmm0
    00002e9e: 	movsd	0x10(%rsi), %xmm7
    00002ea3: 	unpcklpd	%xmm5, %xmm6
    00002ea7: 	unpckhpd	%xmm5, %xmm10
    00002eac: 	movsd	0x10(%rdx), %xmm5
    00002eb1: 	movhpd	0x10(%r10,%rdi), %xmm0
    00002eb8: 	movhpd	0x10(%r10,%rsi), %xmm7
    00002ebf: 	mulpd	%xmm2, %xmm0
    00002ec3: 	movhpd	0x10(%r10,%rdx), %xmm5
    00002eca: 	mulpd	%xmm2, %xmm7
    00002ece: 	mulpd	%xmm2, %xmm5
    00002ed2: 	addpd	%xmm6, %xmm0
    00002ed6: 	movapd	%xmm8, %xmm6
    00002edb: 	unpckhpd	%xmm9, %xmm8
    00002ee0: 	unpcklpd	%xmm9, %xmm6
    00002ee5: 	addpd	%xmm6, %xmm7
    00002ee9: 	movsd	0x10(%rcx), %xmm6
    00002eee: 	addpd	%xmm8, %xmm5
    00002ef3: 	movapd	%xmm0, %xmm9
    00002ef8: 	movhpd	0x10(%r10,%rcx), %xmm6
    00002eff: 	mulpd	%xmm2, %xmm6
    00002f03: 	addpd	%xmm10, %xmm6
    00002f08: 	unpcklpd	%xmm6, %xmm9
    00002f0d: 	unpckhpd	%xmm6, %xmm0
    00002f11: 	movapd	%xmm7, %xmm6
    00002f15: 	unpcklpd	%xmm5, %xmm6
    00002f19: 	unpckhpd	%xmm5, %xmm7
    00002f1d: 	movapd	%xmm9, %xmm8
    00002f22: 	movapd	%xmm9, %xmm5
    00002f27: 	movapd	%xmm0, %xmm9
    00002f2c: 	unpcklpd	%xmm6, %xmm8
    00002f31: 	unpckhpd	%xmm6, %xmm5
    00002f35: 	unpckhpd	%xmm7, %xmm0
    00002f39: 	unpcklpd	%xmm7, %xmm9
    00002f3e: 	movups	%xmm8, -0x40(%rax)
    00002f43: 	movups	%xmm9, -0x20(%rax)
    00002f48: 	movapd	%xmm8, %xmm10
    00002f4d: 	movapd	%xmm9, %xmm11
    00002f52: 	unpckhpd	%xmm0, %xmm9
    00002f57: 	movups	%xmm0, -0x10(%rax)
    00002f5b: 	unpcklpd	%xmm5, %xmm10
    00002f60: 	unpcklpd	%xmm0, %xmm11
    00002f65: 	unpckhpd	%xmm5, %xmm8
    00002f6a: 	movups	%xmm5, -0x30(%rax)
    00002f6e: 	movsd	0x18(%rdi), %xmm6
    00002f73: 	movsd	0x18(%rsi), %xmm7
    00002f78: 	movapd	%xmm10, %xmm0
    00002f7d: 	unpcklpd	%xmm11, %xmm0
    00002f82: 	movsd	0x18(%rcx), %xmm5
    00002f87: 	unpckhpd	%xmm11, %xmm10
    00002f8c: 	movhpd	0x18(%r10,%rdi), %xmm6
    00002f93: 	movhpd	0x18(%r10,%rsi), %xmm7
    00002f9a: 	addq	%r11, %rdi
    00002f9d: 	addq	%r11, %rsi
    00002fa0: 	mulpd	%xmm1, %xmm6
    00002fa4: 	movhpd	0x18(%r10,%rcx), %xmm5
    00002fab: 	addq	%r11, %rcx
    00002fae: 	mulpd	%xmm1, %xmm7
    00002fb2: 	mulpd	%xmm1, %xmm5
    00002fb6: 	addpd	%xmm0, %xmm6
    00002fba: 	movapd	%xmm8, %xmm0
    00002fbf: 	unpckhpd	%xmm9, %xmm8
    00002fc4: 	unpcklpd	%xmm9, %xmm0
    00002fc9: 	addpd	%xmm0, %xmm7
    00002fcd: 	movsd	0x18(%rdx), %xmm0
    00002fd2: 	addpd	%xmm10, %xmm5
    00002fd7: 	movhpd	0x18(%r10,%rdx), %xmm0
    00002fde: 	addq	%r11, %rdx
    00002fe1: 	mulpd	%xmm1, %xmm0
    00002fe5: 	addpd	%xmm8, %xmm0
    00002fea: 	movapd	%xmm6, %xmm8
    00002fef: 	unpckhpd	%xmm5, %xmm6
    00002ff3: 	unpcklpd	%xmm5, %xmm8
    00002ff8: 	movapd	%xmm7, %xmm5
    00002ffc: 	unpcklpd	%xmm0, %xmm5
    00003000: 	unpckhpd	%xmm0, %xmm7
    00003004: 	movapd	%xmm8, %xmm0
    00003009: 	unpcklpd	%xmm5, %xmm0
    0000300d: 	unpckhpd	%xmm5, %xmm8
    00003012: 	movups	%xmm0, -0x40(%rax)
    00003016: 	movapd	%xmm6, %xmm0
    0000301a: 	unpckhpd	%xmm7, %xmm6
    0000301e: 	unpcklpd	%xmm7, %xmm0
    00003022: 	movups	%xmm8, -0x30(%rax)
    00003027: 	movups	%xmm0, -0x20(%rax)
    0000302b: 	movups	%xmm6, -0x10(%rax)
    0000302f: 	cmpq	%rax, %r8
    00003032: 	jne	.Ltmp650 # Offset: 12338
    00003038: 	movq	%r10, 0xb0(%rsp)
    00003040: 	movq	0xd0(%rsp), %r11
    00003048: 	movq	0xd8(%rsp), %r8
    00003050: 	movl	0x138(%rsp), %edi
    00003057: 	cmpl	%edi, 0x108(%rsp)
    0000305e: 	je	.Ltmp651 # Offset: 12382
    00003064: 	movq	(%rsp), %rax
    00003068: 	movsd	(%r8,%rax), %xmm0
    0000306e: 	mulsd	(%r11), %xmm0
    00003073: 	addsd	(%rbx), %xmm0
    00003077: 	movq	0x30(%rsp), %rax
    0000307c: 	movsd	%xmm0, (%rbx)
    00003080: 	movsd	(%r8,%rax,8), %xmm0
    00003086: 	mulsd	(%r11), %xmm0
    0000308b: 	addsd	(%rbp), %xmm0
    00003090: 	movq	0x38(%rsp), %rax
    00003095: 	movsd	%xmm0, (%rbp)
    0000309a: 	movsd	(%r8,%rax,8), %xmm0
    000030a0: 	mulsd	(%r11), %xmm0
    000030a5: 	addsd	(%r9), %xmm0
    000030aa: 	movq	0x48(%rsp), %rax
    000030af: 	movsd	%xmm0, (%r9)
    000030b4: 	movsd	(%r8,%rax,8), %xmm0
    000030ba: 	mulsd	(%r11), %xmm0
    000030bf: 	addsd	(%r12), %xmm0
    000030c5: 	movq	0x18(%rsp), %rax
    000030ca: 	movsd	%xmm0, (%r12)
    000030d0: 	movsd	(%r8,%rax), %xmm0
    000030d6: 	mulsd	0x8(%r11), %xmm0
    000030dc: 	addsd	(%rbx), %xmm0
    000030e0: 	movsd	%xmm0, (%rbx)
    000030e4: 	movsd	0x8(%r8,%r13), %xmm0
    000030eb: 	mulsd	0x8(%r11), %xmm0
    000030f1: 	addsd	(%rbp), %xmm0
    000030f6: 	movsd	%xmm0, (%rbp)
    000030fb: 	movsd	0x8(%r8,%r14), %xmm0
    00003102: 	mulsd	0x8(%r11), %xmm0
    00003108: 	addsd	(%r9), %xmm0
    0000310d: 	movsd	%xmm0, (%r9)
    00003112: 	movsd	0x8(%r8,%r15), %xmm0
    00003119: 	mulsd	0x8(%r11), %xmm0
    0000311f: 	addsd	(%r12), %xmm0
    00003125: 	movq	0x20(%rsp), %rax
    0000312a: 	movsd	%xmm0, (%r12)
    00003130: 	movsd	(%r8,%rax), %xmm0
    00003136: 	mulsd	0x10(%r11), %xmm0
    0000313c: 	addsd	(%rbx), %xmm0
    00003140: 	movq	0x28(%rsp), %rax
    00003145: 	movsd	%xmm0, (%rbx)
    00003149: 	movsd	0x10(%r8,%r13), %xmm0
    00003150: 	mulsd	0x10(%r11), %xmm0
    00003156: 	addsd	(%rbp), %xmm0
    0000315b: 	movsd	%xmm0, (%rbp)
    00003160: 	movsd	0x10(%r8,%r14), %xmm0
    00003167: 	mulsd	0x10(%r11), %xmm0
    0000316d: 	addsd	(%r9), %xmm0
    00003172: 	movsd	%xmm0, (%r9)
    00003177: 	movsd	0x10(%r8,%r15), %xmm0
    0000317e: 	mulsd	0x10(%r11), %xmm0
    00003184: 	addsd	(%r12), %xmm0
    0000318a: 	movsd	%xmm0, (%r12)
    00003190: 	movsd	(%r8,%rax), %xmm0
    00003196: 	mulsd	0x18(%r11), %xmm0
    0000319c: 	addsd	(%rbx), %xmm0
    000031a0: 	movsd	%xmm0, (%rbx)
    000031a4: 	movsd	0x18(%r8,%r13), %xmm0
    000031ab: 	mulsd	0x18(%r11), %xmm0
    000031b1: 	addsd	(%rbp), %xmm0
    000031b6: 	movsd	%xmm0, (%rbp)
    000031bb: 	movsd	0x18(%r8,%r14), %xmm0
    000031c2: 	mulsd	0x18(%r11), %xmm0
    000031c8: 	addsd	(%r9), %xmm0
    000031cd: 	movsd	%xmm0, (%r9)
    000031d2: 	movsd	0x18(%r8,%r15), %xmm0
    000031d9: 	mulsd	0x18(%r11), %xmm0
    000031df: 	addsd	(%r12), %xmm0
    000031e5: 	movsd	%xmm0, (%r12)
.Ltmp651:
    000031eb: 	movq	0x120(%rsp), %rax
    000031f3: 	movl	0x128(%rsp), %r15d
.Ltmp807:
    000031fb: 	cmpl	%r15d, 0xcc(%rsp)
    00003203: 	jle	.Ltmp652 # Offset: 12803
    00003209: 	movl	0xcc(%rsp), %edx
    00003210: 	movq	(%rsp), %rsi
    00003214: 	subl	%r15d, %edx
    00003217: 	leaq	0x8(%rsi), %rdi
    0000321b: 	leaq	0x18(%rsi), %r14
    0000321f: 	movq	%rsi, %r13
    00003222: 	movl	%edx, %ecx
    00003224: 	movslq	%r15d, %rdx
    00003227: 	movq	%rdi, 0x20(%rsp)
    0000322c: 	leaq	0x10(%rsi), %rdi
    00003230: 	leaq	(%rcx,%rdx), %r10
    00003234: 	shlq	$0x3, %rdx
    00003238: 	movl	%ecx, 0x28(%rsp)
    0000323c: 	subq	$0x1, %rcx
    00003240: 	movq	%rdx, %rsi
    00003243: 	movq	%rdx, 0x30(%rsp)
    00003248: 	movq	0xa8(%rsp), %rdx
    00003250: 	movq	%rdi, 0x18(%rsp)
    00003255: 	addq	%rsi, %rdx
    00003258: 	movq	0x10(%rsp), %rsi
    0000325d: 	imulq	%rsi, %rcx
    00003261: 	testq	%rsi, %rsi
    00003264: 	movl	$0x0, %esi
    00003269: 	cmovsq	%rcx, %rsi
    0000326d: 	movq	%rcx, %rdi
    00003270: 	movq	%rsi, %rcx
    00003273: 	movq	0xa8(%rsp), %rsi
    0000327b: 	addq	%r13, %rcx
    0000327e: 	addq	%rax, %rcx
    00003281: 	leaq	-0x1(%rsi,%r10,8), %rsi
    00003286: 	cmpq	%rsi, %rcx
    00003289: 	movq	%rdi, %rcx
    0000328c: 	movl	$0x1f, %edi
    00003291: 	seta	%sil
    00003295: 	addq	$0x1f, %rcx
    00003299: 	cmpq	$0x0, 0x10(%rsp)
    0000329f: 	cmovsq	%rdi, %rcx
    000032a3: 	addq	%r13, %rcx
    000032a6: 	addq	%rax, %rcx
    000032a9: 	cmpq	%rcx, %rdx
    000032ac: 	seta	%cl
    000032af: 	orb	%sil, %cl
    000032b2: 	je	.Ltmp653 # Offset: 12978
    000032b8: 	movq	0xa8(%rsp), %rcx
    000032c0: 	leaq	(%rcx,%r10,8), %rcx
    000032c4: 	movl	0x28(%rsp), %r10d
    000032c9: 	cmpq	%rcx, %r11
    000032cc: 	setae	%sil
    000032d0: 	cmpq	0xb8(%rsp), %rdx
    000032d8: 	setae	%cl
    000032db: 	orl	%esi, %ecx
    000032dd: 	cmpl	$0x1, %r10d
    000032e1: 	setne	%sil
    000032e5: 	testb	%sil, %cl
    000032e8: 	je	.Ltmp653 # Offset: 13032
    000032ee: 	movq	%r13, %rcx
    000032f1: 	movsd	(%r11), %xmm5
    000032f6: 	movq	0x10(%rsp), %rdi
    000032fb: 	movl	%r10d, %esi
    000032fe: 	addq	%rax, %rcx
    00003301: 	movupd	(%rdx), %xmm7
    00003305: 	movsd	0x8(%r11), %xmm4
    0000330b: 	shrl	%esi
    0000330d: 	movsd	(%rcx), %xmm0
    00003311: 	unpcklpd	%xmm5, %xmm5
    00003315: 	movsd	0x10(%r11), %xmm3
    0000331b: 	movsd	0x18(%r11), %xmm2
    00003321: 	unpcklpd	%xmm4, %xmm4
    00003325: 	movhpd	(%rcx,%rdi), %xmm0
    0000332a: 	unpcklpd	%xmm3, %xmm3
    0000332e: 	mulpd	%xmm5, %xmm0
    00003332: 	unpcklpd	%xmm2, %xmm2
    00003336: 	addpd	%xmm7, %xmm0
    0000333a: 	movups	%xmm0, (%rdx)
    0000333d: 	movsd	0x8(%rcx), %xmm1
    00003342: 	movhpd	0x8(%rcx,%rdi), %xmm1
    00003348: 	mulpd	%xmm4, %xmm1
    0000334c: 	addpd	%xmm0, %xmm1
    00003350: 	movups	%xmm1, (%rdx)
    00003353: 	movsd	0x10(%rcx), %xmm0
    00003358: 	movhpd	0x10(%rcx,%rdi), %xmm0
    0000335e: 	mulpd	%xmm3, %xmm0
    00003362: 	addpd	%xmm1, %xmm0
    00003366: 	movups	%xmm0, (%rdx)
    00003369: 	movsd	0x18(%rcx), %xmm1
    0000336e: 	movhpd	0x18(%rcx,%rdi), %xmm1
    00003374: 	leaq	(%rcx,%rdi,2), %rcx
    00003378: 	mulpd	%xmm2, %xmm1
    0000337c: 	addpd	%xmm1, %xmm0
    00003380: 	movups	%xmm0, (%rdx)
    00003383: 	cmpl	$0x1, %esi
    00003386: 	je	.Ltmp654 # Offset: 13190
    00003388: 	movsd	(%rcx), %xmm0
    0000338c: 	movhpd	(%rcx,%rdi), %xmm0
    00003391: 	mulpd	%xmm5, %xmm0
    00003395: 	movupd	0x10(%rdx), %xmm5
    0000339a: 	addpd	%xmm5, %xmm0
    0000339e: 	movups	%xmm0, 0x10(%rdx)
    000033a2: 	movsd	0x8(%rcx), %xmm1
    000033a7: 	movhpd	0x8(%rcx,%rdi), %xmm1
    000033ad: 	mulpd	%xmm4, %xmm1
    000033b1: 	addpd	%xmm0, %xmm1
    000033b5: 	movups	%xmm1, 0x10(%rdx)
    000033b9: 	movsd	0x10(%rcx), %xmm0
    000033be: 	movhpd	0x10(%rcx,%rdi), %xmm0
    000033c4: 	mulpd	%xmm3, %xmm0
    000033c8: 	addpd	%xmm1, %xmm0
    000033cc: 	movups	%xmm0, 0x10(%rdx)
    000033d0: 	movsd	0x18(%rcx), %xmm1
    000033d5: 	movhpd	0x18(%rcx,%rdi), %xmm1
    000033db: 	mulpd	%xmm2, %xmm1
    000033df: 	addpd	%xmm1, %xmm0
    000033e3: 	movups	%xmm0, 0x10(%rdx)
.Ltmp654:
    000033e7: 	movl	0x28(%rsp), %r10d
    000033ec: 	movl	%r10d, %esi
    000033ef: 	andl	$-0x2, %esi
    000033f2: 	movl	%esi, %edx
    000033f4: 	imulq	0x10(%rsp), %rdx
    000033fa: 	leal	(%rsi,%r15), %ecx
    000033fe: 	addq	%rax, %rdx
    00003401: 	cmpl	%r10d, %esi
    00003404: 	je	.Ltmp652 # Offset: 13316
    00003406: 	movq	0xa8(%rsp), %rax
    0000340e: 	movq	(%rsp), %rsi
    00003412: 	movslq	%ecx, %rcx
    00003415: 	movq	0x20(%rsp), %rdi
    0000341a: 	movsd	(%rdx,%rsi), %xmm0
    0000341f: 	leaq	(%rax,%rcx,8), %rax
    00003423: 	mulsd	(%r11), %xmm0
    00003428: 	addsd	(%rax), %xmm0
    0000342c: 	movsd	%xmm0, (%rax)
.Ltmp724:
    00003430: 	movsd	(%rdx,%rdi), %xmm1
    00003435: 	mulsd	0x8(%r11), %xmm1
    0000343b: 	movq	0x18(%rsp), %rdi
    00003440: 	addsd	%xmm0, %xmm1
    00003444: 	movsd	%xmm1, (%rax)
    00003448: 	movsd	(%rdx,%rdi), %xmm0
    0000344d: 	mulsd	0x10(%r11), %xmm0
    00003453: 	addsd	%xmm1, %xmm0
    00003457: 	movsd	%xmm0, (%rax)
    0000345b: 	movsd	(%rdx,%r14), %xmm1
    00003461: 	mulsd	0x18(%r11), %xmm1
    00003467: 	addsd	%xmm1, %xmm0
    0000346b: 	movsd	%xmm0, (%rax)
.Ltmp652:
    0000346f: 	addq	$0x20, (%rsp)
    00003474: 	movq	(%rsp), %rax
    00003478: 	addl	$0x4, 0xc0(%rsp)
    00003480: 	movq	0xb8(%rsp), %r11
    00003488: 	addq	$0x20, 0x70(%rsp)
    0000348e: 	addq	$0x20, 0x88(%rsp)
    00003497: 	addq	$0x20, 0x90(%rsp)
    000034a0: 	cmpq	0x148(%rsp), %rax
    000034a8: 	jne	.Ltmp655 # Offset: 13480
    000034ae: 	movq	0x160(%rsp), %r15
    000034b6: 	movq	0x8(%rsp), %r14
.Ltmp647:
    000034bb: 	movl	0x50(%rsp), %ebx
    000034bf: 	cmpl	%ebx, 0x84(%rsp)
    000034c6: 	jle	.Ltmp656 # Offset: 13510
    000034cc: 	movslq	0x84(%rsp), %rbp
    000034d4: 	movslq	0x50(%rsp), %rbx
    000034d9: 	movq	%r15, 0x70(%rsp)
    000034de: 	movq	0xa8(%rsp), %r10
    000034e6: 	leaq	(%rbp,%rbp), %rsi
    000034eb: 	movq	%rbp, %r8
    000034ee: 	movq	%rbp, (%rsp)
    000034f2: 	leaq	(,%rbx,8), %r13
    000034fa: 	leaq	(%rsi,%rbx), %rax
    000034fe: 	movl	%r8d, %r15d
    00003501: 	leaq	(,%rax,8), %r12
    00003509: 	movl	0xcc(%rsp), %eax
    00003510: 	subl	$0x4, %eax
    00003513: 	movl	%eax, 0xe8(%rsp)
    0000351a: 	shrl	$0x2, %eax
    0000351d: 	movl	%eax, %edi
    0000351f: 	leal	0x1(%rax), %eax
    00003522: 	movq	%rax, %r9
    00003525: 	movl	%eax, 0xe0(%rsp)
    0000352c: 	subq	$0x1, %rax
    00003530: 	movq	%rax, %rdx
    00003533: 	shlq	$0x5, %rdx
    00003537: 	leaq	0x18(%r10,%rdx), %rcx
    0000353c: 	leal	(,%rbp,4), %edx
    00003543: 	movslq	%edx, %rdx
    00003546: 	movq	%rcx, 0xd8(%rsp)
    0000354e: 	leaq	(,%rdx,8), %rcx
    00003556: 	imulq	%rcx, %rax
    0000355a: 	movq	%rcx, 0x68(%rsp)
    0000355f: 	xorl	%ecx, %ecx
    00003561: 	testl	%ebp, %ebp
    00003563: 	movq	%rcx, %r11
    00003566: 	cmovsq	%rax, %r11
    0000356a: 	cmovnsq	%rax, %rcx
    0000356e: 	shlq	$0x4, %rdx
    00003572: 	movq	%rdx, 0x8(%rsp)
    00003577: 	movq	%r11, 0xd0(%rsp)
    0000357f: 	leaq	(,%rbp,8), %r11
    00003587: 	leaq	(%r14,%r11), %rax
    0000358b: 	movq	%rcx, 0xc0(%rsp)
    00003593: 	movl	%r9d, %ecx
    00003596: 	shrl	%r9d
    00003599: 	movq	%rax, 0x90(%rsp)
    000035a1: 	movl	%r9d, %eax
    000035a4: 	movl	%ecx, %r9d
    000035a7: 	subl	$0x1, %eax
    000035aa: 	shlq	$0x6, %rax
    000035ae: 	leaq	0x40(%r10,%rax), %rax
    000035b3: 	movq	%rax, 0x58(%rsp)
    000035b8: 	movl	%ecx, %eax
    000035ba: 	andl	$-0x2, %eax
    000035bd: 	movl	%eax, 0x88(%rsp)
    000035c4: 	shll	$0x2, %eax
    000035c7: 	movslq	%eax, %rdx
    000035ca: 	shlq	$0x3, %rdx
    000035ce: 	leaq	(%r10,%rdx), %rcx
    000035d2: 	movq	%rcx, 0x50(%rsp)
    000035d7: 	movl	%ebp, %ecx
    000035d9: 	imull	%eax, %ecx
    000035dc: 	movl	%ecx, 0x48(%rsp)
    000035e0: 	leaq	0x8(%r10,%rdx), %rcx
    000035e5: 	movq	%rcx, 0x38(%rsp)
    000035ea: 	leal	0x1(%rax), %ecx
    000035ed: 	imull	%ebp, %ecx
    000035f0: 	movl	%ecx, 0x30(%rsp)
    000035f4: 	leaq	0x10(%r10,%rdx), %rcx
    000035f9: 	movq	%rcx, 0x28(%rsp)
    000035fe: 	leal	0x2(%rax), %ecx
    00003601: 	addl	$0x3, %eax
    00003604: 	imull	%ebp, %eax
    00003607: 	imull	%ebp, %ecx
    0000360a: 	movl	%eax, 0x10(%rsp)
    0000360e: 	movl	%edi, %eax
    00003610: 	movq	%r10, %rdi
    00003613: 	shlq	$0x5, %rax
    00003617: 	movl	%ecx, 0x20(%rsp)
    0000361b: 	leaq	0x18(%r10,%rdx), %rcx
    00003620: 	leaq	0x20(%r10,%rax), %rax
    00003625: 	movq	%rcx, 0x18(%rsp)
    0000362a: 	movq	%rax, 0xb0(%rsp)
    00003632: 	movq	%rbp, %rax
    00003635: 	shlq	$0x4, %rbp
    00003639: 	addq	%rsi, %rax
    0000363c: 	movq	%rbp, 0xb8(%rsp)
    00003644: 	shlq	$0x3, %rax
    00003648: 	movq	%rax, 0x110(%rsp)
    00003650: 	leal	(,%r9,4), %eax
    00003658: 	movl	%eax, 0x108(%rsp)
.Ltmp664:
    0000365f: 	movq	0x70(%rsp), %rax
    00003664: 	cmpl	$0x3, 0xcc(%rsp)
    0000366c: 	movl	%ebx, %edx
    0000366e: 	movsd	(%rax,%r13), %xmm0
    00003674: 	jle	.Ltmp657 # Offset: 13940
    0000367a: 	movq	0xc0(%rsp), %r9
    00003682: 	leaq	(%r11,%r12), %rax
    00003686: 	leaq	(%r11,%r13), %rcx
    0000368a: 	movq	0xd0(%rsp), %rbp
    00003692: 	movq	0xd8(%rsp), %r10
    0000369a: 	leaq	(%rax,%r9), %rsi
    0000369e: 	leaq	(%r12,%rbp), %r8
    000036a2: 	addq	%r14, %rsi
    000036a5: 	cmpq	%rsi, %rdi
    000036a8: 	seta	%sil
    000036ac: 	addq	%rbp, %rax
    000036af: 	addq	%r14, %rax
    000036b2: 	cmpq	%rax, %r10
    000036b5: 	setb	%al
    000036b8: 	orl	%eax, %esi
    000036ba: 	leaq	(%r12,%r9), %rax
    000036be: 	addq	%r14, %rax
    000036c1: 	cmpq	%rax, %rdi
    000036c4: 	seta	%al
    000036c7: 	addq	%r14, %r8
    000036ca: 	cmpq	%r8, %r10
    000036cd: 	setb	%r8b
    000036d1: 	orl	%r8d, %eax
    000036d4: 	leaq	(%r13,%r9), %r8
    000036d9: 	andl	%esi, %eax
    000036db: 	cmpl	$0x7, 0xe8(%rsp)
    000036e3: 	seta	%sil
    000036e7: 	andl	%esi, %eax
    000036e9: 	leaq	(%r13,%rbp), %rsi
    000036ee: 	addq	%r14, %rsi
    000036f1: 	cmpq	%rsi, %r10
    000036f4: 	setb	%sil
    000036f8: 	addq	%r14, %r8
    000036fb: 	cmpq	%r8, %rdi
    000036fe: 	seta	%r8b
    00003702: 	orl	%r8d, %esi
    00003705: 	testb	%sil, %al
    00003708: 	je	.Ltmp658 # Offset: 14088
    0000370e: 	leaq	(%rcx,%r9), %rax
    00003712: 	addq	%r14, %rax
    00003715: 	cmpq	%rax, %rdi
    00003718: 	seta	%al
    0000371b: 	addq	%rbp, %rcx
    0000371e: 	addq	%r14, %rcx
    00003721: 	cmpq	%rcx, %r10
    00003724: 	setb	%cl
    00003727: 	orb	%al, %cl
    00003729: 	je	.Ltmp658 # Offset: 14121
    0000372f: 	movapd	%xmm0, %xmm5
    00003733: 	movq	0x68(%rsp), %rsi
    00003738: 	leaq	(%r14,%r13), %rbp
    0000373c: 	xorl	%ecx, %ecx
    0000373e: 	movq	0x90(%rsp), %rax
    00003746: 	unpcklpd	%xmm5, %xmm5
    0000374a: 	leaq	(%r14,%r12), %r9
    0000374e: 	leaq	(%rax,%r13), %r10
    00003752: 	leaq	(%rax,%r12), %r8
    00003756: 	movq	%rdi, %rax
.Ltmp659:
    00003759: 	movsd	(%rbp,%rcx), %xmm3
    0000375f: 	movupd	(%rax), %xmm1
    00003763: 	addq	$0x40, %rax
    00003767: 	movupd	-0x20(%rax), %xmm8
    0000376d: 	movupd	-0x30(%rax), %xmm6
    00003772: 	movhpd	(%rbp,%rsi), %xmm3
    00003778: 	movhpd	-0x30(%rax), %xmm1
    0000377d: 	movlpd	-0x38(%rax), %xmm6
    00003782: 	movupd	-0x10(%rax), %xmm7
    00003787: 	mulpd	%xmm5, %xmm3
    0000378b: 	movhpd	-0x10(%rax), %xmm8
    00003791: 	movapd	%xmm1, %xmm2
    00003795: 	movlpd	-0x18(%rax), %xmm7
    0000379a: 	unpcklpd	%xmm8, %xmm2
    0000379f: 	movapd	%xmm6, %xmm4
    000037a3: 	unpckhpd	%xmm8, %xmm1
    000037a8: 	unpcklpd	%xmm7, %xmm4
    000037ac: 	unpckhpd	%xmm7, %xmm6
    000037b0: 	addpd	%xmm2, %xmm3
    000037b4: 	movsd	(%r10,%rcx), %xmm2
    000037ba: 	movhpd	(%r10,%rsi), %xmm2
    000037c0: 	mulpd	%xmm5, %xmm2
    000037c4: 	addpd	%xmm2, %xmm4
    000037c8: 	movsd	(%r9,%rcx), %xmm2
    000037ce: 	movhpd	(%r9,%rsi), %xmm2
    000037d4: 	mulpd	%xmm5, %xmm2
    000037d8: 	movapd	%xmm4, %xmm7
    000037dc: 	addpd	%xmm1, %xmm2
    000037e0: 	movsd	(%r8,%rcx), %xmm1
    000037e6: 	addq	0x8(%rsp), %rcx
    000037eb: 	movhpd	(%r8,%rsi), %xmm1
    000037f1: 	addq	0x8(%rsp), %rsi
    000037f6: 	mulpd	%xmm5, %xmm1
    000037fa: 	addpd	%xmm6, %xmm1
    000037fe: 	movapd	%xmm3, %xmm6
    00003802: 	unpckhpd	%xmm2, %xmm3
    00003806: 	unpcklpd	%xmm2, %xmm6
    0000380a: 	unpcklpd	%xmm1, %xmm7
    0000380e: 	unpckhpd	%xmm1, %xmm4
    00003812: 	movapd	%xmm6, %xmm1
    00003816: 	unpcklpd	%xmm7, %xmm1
    0000381a: 	unpckhpd	%xmm7, %xmm6
    0000381e: 	movups	%xmm1, -0x40(%rax)
    00003822: 	movapd	%xmm3, %xmm1
    00003826: 	unpckhpd	%xmm4, %xmm3
    0000382a: 	unpcklpd	%xmm4, %xmm1
    0000382e: 	movups	%xmm6, -0x30(%rax)
    00003832: 	movups	%xmm1, -0x20(%rax)
    00003836: 	movups	%xmm3, -0x10(%rax)
    0000383a: 	cmpq	%rax, 0x58(%rsp)
    0000383f: 	jne	.Ltmp659 # Offset: 14399
    00003845: 	movl	0xe0(%rsp), %esi
    0000384c: 	cmpl	%esi, 0x88(%rsp)
    00003853: 	je	.Ltmp660 # Offset: 14419
    00003855: 	movl	0x48(%rsp), %eax
    00003859: 	addl	%edx, %eax
    0000385b: 	cltq
    0000385d: 	movsd	(%r14,%rax,8), %xmm1
    00003863: 	movq	0x50(%rsp), %rax
    00003868: 	mulsd	%xmm0, %xmm1
    0000386c: 	addsd	(%rax), %xmm1
    00003870: 	movsd	%xmm1, (%rax)
    00003874: 	movl	0x30(%rsp), %eax
    00003878: 	addl	%edx, %eax
    0000387a: 	cltq
    0000387c: 	movsd	(%r14,%rax,8), %xmm1
    00003882: 	movq	0x38(%rsp), %rax
    00003887: 	mulsd	%xmm0, %xmm1
    0000388b: 	addsd	(%rax), %xmm1
    0000388f: 	movsd	%xmm1, (%rax)
    00003893: 	movl	0x20(%rsp), %eax
    00003897: 	addl	%edx, %eax
    00003899: 	cltq
    0000389b: 	movsd	(%r14,%rax,8), %xmm1
    000038a1: 	movq	0x28(%rsp), %rax
    000038a6: 	mulsd	%xmm0, %xmm1
    000038aa: 	addsd	(%rax), %xmm1
    000038ae: 	movsd	%xmm1, (%rax)
    000038b2: 	movl	0x10(%rsp), %eax
    000038b6: 	addl	%edx, %eax
    000038b8: 	cltq
    000038ba: 	movsd	(%r14,%rax,8), %xmm1
    000038c0: 	movq	0x18(%rsp), %rax
    000038c5: 	mulsd	%xmm0, %xmm1
    000038c9: 	addsd	(%rax), %xmm1
    000038cd: 	movsd	%xmm1, (%rax)
.Ltmp660:
    000038d1: 	movl	0x108(%rsp), %eax
.Ltmp825:
    000038d8: 	cmpl	%eax, 0xcc(%rsp)
    000038df: 	jle	.Ltmp661 # Offset: 14559
    000038e5: 	movl	%r15d, %esi
    000038e8: 	movl	0xcc(%rsp), %r8d
    000038f0: 	movslq	%eax, %rbp
    000038f3: 	imull	%eax, %esi
    000038f6: 	leaq	(,%rbp,8), %r10
    000038fe: 	subl	%eax, %r8d
    00003901: 	movslq	%esi, %rcx
    00003904: 	movl	%esi, 0x100(%rsp)
    0000390b: 	leaq	(%rcx,%rbx), %rsi
    0000390f: 	movl	%r8d, %ecx
    00003912: 	movq	%rcx, 0xf8(%rsp)
    0000391a: 	subq	$0x1, %rcx
    0000391e: 	imulq	%r11, %rcx
    00003922: 	movq	%rsi, 0x118(%rsp)
    0000392a: 	shlq	$0x3, %rsi
    0000392e: 	movq	%rsi, 0x60(%rsp)
    00003933: 	xorl	%esi, %esi
    00003935: 	testl	%r15d, %r15d
    00003938: 	movq	%rcx, %r9
    0000393b: 	leaq	(%rdi,%r10), %rcx
    0000393f: 	cmovsq	%r9, %rsi
    00003943: 	movq	%r9, 0xf0(%rsp)
    0000394b: 	movq	0x60(%rsp), %r9
    00003950: 	addq	%rsi, %r9
    00003953: 	movq	0xf8(%rsp), %rsi
    0000395b: 	addq	%r14, %r9
    0000395e: 	leaq	-0x1(%rbp,%rsi), %rbp
    00003963: 	leaq	(%rdi,%rbp,8), %rbp
    00003967: 	cmpq	%rbp, %r9
    0000396a: 	seta	%bpl
    0000396e: 	xorl	%esi, %esi
    00003970: 	testl	%r15d, %r15d
    00003973: 	cmovnsq	0xf0(%rsp), %rsi
    0000397c: 	movq	%rsi, %r9
    0000397f: 	movq	0x60(%rsp), %rsi
    00003984: 	addq	%rsi, %r9
    00003987: 	addq	%r14, %r9
    0000398a: 	cmpq	%r9, %rcx
    0000398d: 	seta	%r9b
    00003991: 	orb	%bpl, %r9b
    00003994: 	je	.Ltmp662 # Offset: 14740
    0000399a: 	leal	-0x1(%r8), %r9d
    0000399e: 	cmpl	$0x2, %r9d
    000039a2: 	jbe	.Ltmp662 # Offset: 14754
    000039a8: 	addq	%r14, %rsi
    000039ab: 	movapd	%xmm0, %xmm2
    000039af: 	movupd	(%rcx), %xmm4
    000039b3: 	movl	%r8d, %r9d
    000039b6: 	movsd	(%rsi), %xmm1
    000039ba: 	unpcklpd	%xmm2, %xmm2
    000039be: 	shrl	%r9d
    000039c1: 	movhpd	(%rsi,%r11), %xmm1
    000039c7: 	leaq	(%rsi,%r11,2), %rsi
    000039cb: 	mulpd	%xmm2, %xmm1
    000039cf: 	addpd	%xmm4, %xmm1
    000039d3: 	movups	%xmm1, (%rcx)
    000039d6: 	cmpl	$0x1, %r9d
    000039da: 	je	.Ltmp663 # Offset: 14810
    000039dc: 	movsd	(%rsi), %xmm1
    000039e0: 	movupd	0x10(%rcx), %xmm4
    000039e5: 	movhpd	(%rsi,%r11), %xmm1
    000039eb: 	mulpd	%xmm2, %xmm1
    000039ef: 	addpd	%xmm4, %xmm1
    000039f3: 	movups	%xmm1, 0x10(%rcx)
.Ltmp663:
    000039f7: 	movl	%r8d, %ecx
    000039fa: 	andl	$-0x2, %ecx
    000039fd: 	addl	%ecx, %eax
    000039ff: 	cmpl	%r8d, %ecx
    00003a02: 	je	.Ltmp661 # Offset: 14850
    00003a04: 	movslq	%eax, %rcx
    00003a07: 	imull	%r15d, %eax
    00003a0b: 	leaq	(%rdi,%rcx,8), %rcx
    00003a0f: 	addl	%edx, %eax
    00003a11: 	cltq
    00003a13: 	mulsd	(%r14,%rax,8), %xmm0
    00003a19: 	addsd	(%rcx), %xmm0
    00003a1d: 	movsd	%xmm0, (%rcx)
.Ltmp661:
    00003a21: 	addq	$0x1, %rbx
    00003a25: 	addq	$0x8, %r12
    00003a29: 	addq	$0x8, %r13
    00003a2d: 	cmpl	%ebx, %r15d
    00003a30: 	jg	.Ltmp664 # Offset: 14896
    00003a36: 	movq	0x70(%rsp), %r15
.Ltmp656:
    00003a3b: 	xorl	%eax, %eax
.Ltmp667:
    00003a3d: 	movq	0x1e0(%rsp), %rbx
    00003a45: 	movsd	(%rbx,%rax,8), %xmm1
    00003a4a: 	movq	0xa8(%rsp), %rbx
    00003a52: 	movapd	%xmm1, %xmm2
    00003a56: 	andpd	DATAat0x24940(%rip), %xmm2
    00003a5e: 	movapd	%xmm1, %xmm0
    00003a62: 	comisd	DATAat0x24978(%rip), %xmm2
    00003a6a: 	subsd	(%rbx,%rax,8), %xmm0
    00003a6f: 	jbe	.Ltmp665 # Offset: 14959
    00003a71: 	divsd	%xmm1, %xmm0
.Ltmp665:
    00003a75: 	andpd	DATAat0x24940(%rip), %xmm0
    00003a7d: 	movsd	DATAat0x24980(%rip), %xmm4
    00003a85: 	comisd	%xmm0, %xmm4
    00003a89: 	jbe	.Ltmp666 # Offset: 14985
    00003a8f: 	addq	$0x1, %rax
    00003a93: 	cmpq	$0x320, %rax
    00003a99: 	jne	.Ltmp667 # Offset: 15001
.Ltmp824:
    00003a9b: 	movq	0xa8(%rsp), %rax
    00003aa3: 	movq	$0x0, (%rax)
    00003aaa: 	movq	0xa0(%rsp), %rbx
    00003ab2: 	movq	$0x0, -0x10(%rbx)
    00003aba: 	movq	0x40(%rsp), %rdi
    00003abf: 	andq	$-0x8, %rdi
    00003ac3: 	subq	%rdi, %rax
    00003ac6: 	movq	%rax, %rcx
    00003ac9: 	xorl	%eax, %eax
    00003acb: 	addl	$0x1900, %ecx
    00003ad1: 	shrl	$0x3, %ecx
    00003ad4: 	rep		stosq	%rax, %es:(%rdi)
    00003ad7: 	movl	0xcc(%rsp), %r12d
    00003adf: 	testl	%r12d, %r12d
    00003ae2: 	jle	.Ltmp668 # Offset: 15074
    00003ae8: 	movl	0x84(%rsp), %ebx
    00003aef: 	testl	%ebx, %ebx
    00003af1: 	jle	.Ltmp668 # Offset: 15089
    00003af7: 	leal	(%rbx,%rbx,2), %eax
    00003afa: 	movl	$0x0, 0x38(%rsp)
    00003b02: 	movq	0xa8(%rsp), %r12
    00003b0a: 	movq	$0x0, 0x30(%rsp)
    00003b13: 	shll	$0x2, %eax
    00003b16: 	movl	%eax, 0x50(%rsp)
    00003b1a: 	movslq	%ebx, %rax
    00003b1d: 	movq	%rax, (%rsp)
    00003b21: 	movq	%rax, %rbx
    00003b24: 	leaq	(,%rax,8), %r13
    00003b2c: 	shlq	$0x4, %rbx
.Ltmp674:
    00003b30: 	movq	0x30(%rsp), %rsi
    00003b35: 	movl	0xcc(%rsp), %edi
    00003b3c: 	movl	%esi, %eax
    00003b3e: 	addl	$0xc, %eax
    00003b41: 	cmpl	%edi, %eax
    00003b43: 	cmovgl	%edi, %eax
    00003b46: 	cmpl	%esi, %eax
    00003b48: 	jle	.Ltmp669 # Offset: 15176
    00003b4e: 	movslq	0x38(%rsp), %rdx
    00003b53: 	movl	%eax, %ecx
    00003b55: 	xorl	%ebp, %ebp
    00003b57: 	movq	0xa8(%rsp), %r8
    00003b5f: 	subl	%esi, %ecx
    00003b61: 	movl	0x84(%rsp), %r11d
    00003b69: 	leaq	(%r14,%rdx,8), %r9
    00003b6d: 	movl	%ecx, %edx
    00003b6f: 	movl	%ecx, 0x28(%rsp)
    00003b73: 	leaq	-0x1(%rdx), %rax
    00003b77: 	leaq	-0x1(%rdx,%rsi), %rdx
    00003b7c: 	imulq	%r13, %rax
    00003b80: 	leaq	(%r8,%rdx,8), %rdi
    00003b84: 	testl	%r11d, %r11d
    00003b87: 	movq	%rsi, %rdx
    00003b8a: 	movq	%rdi, 0x10(%rsp)
    00003b8f: 	movl	$0x0, %edi
    00003b94: 	cmovnsq	%rax, %rbp
    00003b98: 	cmovnsq	%rdi, %rax
    00003b9c: 	movl	%ecx, %edi
    00003b9e: 	shrl	%ecx
    00003ba0: 	movq	%rax, 0x8(%rsp)
    00003ba5: 	movl	%ecx, %eax
    00003ba7: 	movl	%edi, %ecx
    00003ba9: 	andl	$-0x2, %edi
    00003bac: 	subl	$0x1, %eax
    00003baf: 	movl	%edi, 0x20(%rsp)
    00003bb3: 	addl	%esi, %edi
    00003bb5: 	shlq	$0x4, %rax
    00003bb9: 	leaq	0x10(%r12,%rax), %r10
    00003bbe: 	movslq	%edi, %rax
    00003bc1: 	imull	%r11d, %edi
    00003bc5: 	leaq	(%r8,%rax,8), %rsi
    00003bc9: 	leaq	(%r8,%rdx,8), %rax
    00003bcd: 	xorl	%r8d, %r8d
    00003bd0: 	movq	%rax, 0x48(%rsp)
    00003bd5: 	leal	-0x1(%rcx), %eax
    00003bd8: 	movq	0x40(%rsp), %rcx
    00003bdd: 	movl	%eax, 0x18(%rsp)
    00003be1: 	addq	%rdx, %rax
    00003be4: 	leaq	(%rcx,%rax,8), %r11
    00003be8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp673:
    00003bf0: 	movq	0x8(%rsp), %rcx
    00003bf5: 	movq	%r9, %rdx
    00003bf8: 	movsd	(%r15,%r8,8), %xmm1
    00003bfe: 	movl	%r8d, %eax
    00003c01: 	subq	%r14, %rdx
    00003c04: 	addq	%r9, %rcx
    00003c07: 	cmpq	%rcx, 0x10(%rsp)
    00003c0c: 	setb	%cl
    00003c0f: 	addq	%rbp, %rdx
    00003c12: 	addq	%r14, %rdx
    00003c15: 	cmpq	%rdx, %r12
    00003c18: 	seta	%dl
    00003c1b: 	orb	%cl, %dl
    00003c1d: 	je	.Ltmp670 # Offset: 15389
    00003c23: 	movapd	%xmm1, %xmm2
    00003c27: 	cmpl	$0x2, 0x18(%rsp)
    00003c2c: 	movq	%r9, %rcx
    00003c2f: 	movq	%r12, %rdx
    00003c32: 	unpcklpd	%xmm2, %xmm2
    00003c36: 	jbe	.Ltmp670 # Offset: 15414
    00003c3c: 	nopl	(%rax) # Size: 4
.Ltmp671:
    00003c40: 	movsd	(%rcx), %xmm0
    00003c44: 	movupd	(%rdx), %xmm5
    00003c48: 	addq	$0x10, %rdx
    00003c4c: 	movhpd	(%rcx,%r13), %xmm0
    00003c52: 	addq	%rbx, %rcx
    00003c55: 	mulpd	%xmm2, %xmm0
    00003c59: 	addpd	%xmm5, %xmm0
    00003c5d: 	movups	%xmm0, -0x10(%rdx)
    00003c61: 	cmpq	%r10, %rdx
    00003c64: 	jne	.Ltmp671 # Offset: 15460
    00003c66: 	movl	0x28(%rsp), %edx
    00003c6a: 	cmpl	%edx, 0x20(%rsp)
    00003c6e: 	je	.Ltmp672 # Offset: 15470
    00003c70: 	addl	%edi, %eax
    00003c72: 	movsd	(%rsi), %xmm0
    00003c76: 	cltq
    00003c78: 	mulsd	(%r14,%rax,8), %xmm1
    00003c7e: 	addsd	%xmm1, %xmm0
    00003c82: 	movsd	%xmm0, (%rsi)
.Ltmp672:
    00003c86: 	addq	$0x1, %r8
    00003c8a: 	addq	$0x8, %r9
    00003c8e: 	cmpq	(%rsp), %r8
    00003c92: 	jne	.Ltmp673 # Offset: 15506
.Ltmp669:
    00003c98: 	addq	$0xc, 0x30(%rsp)
    00003c9e: 	movl	0x50(%rsp), %edi
    00003ca2: 	addq	$0x60, %r12
    00003ca6: 	addl	%edi, 0x38(%rsp)
    00003caa: 	movq	0x30(%rsp), %rax
    00003caf: 	cmpl	%eax, 0xcc(%rsp)
    00003cb6: 	jg	.Ltmp674 # Offset: 15542
.Ltmp668:
    00003cbc: 	xorl	%eax, %eax
.Ltmp677:
    00003cbe: 	movq	0x1e0(%rsp), %rbx
    00003cc6: 	movsd	(%rbx,%rax,8), %xmm1
    00003ccb: 	movq	0xa8(%rsp), %rbx
    00003cd3: 	movapd	%xmm1, %xmm2
    00003cd7: 	andpd	DATAat0x24940(%rip), %xmm2
    00003cdf: 	movapd	%xmm1, %xmm0
    00003ce3: 	comisd	DATAat0x24978(%rip), %xmm2
    00003ceb: 	subsd	(%rbx,%rax,8), %xmm0
    00003cf0: 	jbe	.Ltmp675 # Offset: 15600
    00003cf2: 	divsd	%xmm1, %xmm0
.Ltmp675:
    00003cf6: 	andpd	DATAat0x24940(%rip), %xmm0
    00003cfe: 	movsd	DATAat0x24980(%rip), %xmm4
    00003d06: 	comisd	%xmm0, %xmm4
    00003d0a: 	jbe	.Ltmp676 # Offset: 15626
    00003d10: 	addq	$0x1, %rax
    00003d14: 	cmpq	$0x320, %rax
    00003d1a: 	jne	.Ltmp677 # Offset: 15642
.Ltmp823:
    00003d1c: 	movq	0xa8(%rsp), %rax
    00003d24: 	movq	$0x0, (%rax)
    00003d2b: 	movq	0xa0(%rsp), %rbx
    00003d33: 	movq	$0x0, -0x10(%rbx)
    00003d3b: 	movq	0x40(%rsp), %rdi
    00003d40: 	andq	$-0x8, %rdi
    00003d44: 	subq	%rdi, %rax
    00003d47: 	movq	%rax, %rcx
    00003d4a: 	xorl	%eax, %eax
    00003d4c: 	addl	$0x1900, %ecx
    00003d52: 	shrl	$0x3, %ecx
    00003d55: 	rep		stosq	%rax, %es:(%rdi)
    00003d58: 	movl	0xcc(%rsp), %r13d
    00003d60: 	testl	%r13d, %r13d
    00003d63: 	jle	.Ltmp678 # Offset: 15715
    00003d69: 	movl	0x84(%rsp), %ebx
    00003d70: 	testl	%ebx, %ebx
    00003d72: 	jle	.Ltmp678 # Offset: 15730
    00003d78: 	imull	$0xe, %ebx, %eax
    00003d7b: 	movq	%r15, 0x10(%rsp)
    00003d80: 	movslq	%ebx, %r13
    00003d83: 	movq	$0x0, 0x28(%rsp)
    00003d8c: 	movq	$0x0, 0x18(%rsp)
    00003d95: 	cltq
    00003d97: 	movq	%rax, 0x30(%rsp)
.Ltmp685:
    00003d9c: 	movq	0x28(%rsp), %rdi
    00003da1: 	movl	0xcc(%rsp), %ebx
    00003da8: 	movl	%edi, %eax
    00003daa: 	addl	$0xe, %eax
    00003dad: 	cmpl	%ebx, %eax
    00003daf: 	cmovgl	%ebx, %eax
    00003db2: 	cmpl	%edi, %eax
    00003db4: 	jle	.Ltmp679 # Offset: 15796
    00003dba: 	movq	%rdi, %rbx
    00003dbd: 	movq	0xa8(%rsp), %rdi
    00003dc5: 	movq	0x10(%rsp), %r10
    00003dca: 	movq	%r14, %r12
    00003dcd: 	movq	$0x0, 0x8(%rsp)
    00003dd6: 	subl	%ebx, %eax
    00003dd8: 	subl	$0x1, %eax
    00003ddb: 	leaq	(%rdi,%rbx,8), %rdi
    00003ddf: 	addq	%rbx, %rax
    00003de2: 	movq	0x40(%rsp), %rbx
    00003de7: 	movq	%rdi, 0x20(%rsp)
    00003dec: 	leaq	(%rbx,%rax,8), %rax
    00003df0: 	movq	%rax, (%rsp)
    00003df4: 	nopl	(%rax) # Size: 4
.Ltmp684:
    00003df8: 	movq	0x8(%rsp), %rdi
    00003dfd: 	movl	0x84(%rsp), %eax
    00003e04: 	movq	0x18(%rsp), %rdx
    00003e09: 	movq	0x20(%rsp), %r9
    00003e0e: 	leal	0x1c(%rdi), %ebx
    00003e11: 	movl	%edi, %ebp
    00003e13: 	cmpl	%eax, %ebx
    00003e15: 	cmovgl	%eax, %ebx
    00003e18: 	movl	%ebx, %r11d
    00003e1b: 	subl	%edi, %r11d
    00003e1e: 	movl	%r11d, %eax
    00003e21: 	movl	%r11d, %r15d
    00003e24: 	shrl	%eax
    00003e26: 	andl	$-0x2, %r15d
    00003e2a: 	leal	-0x1(%rax), %r8d
    00003e2e: 	leal	(%r15,%rdi), %ecx
    00003e32: 	movq	0x10(%rsp), %rax
    00003e37: 	addq	$0x1, %r8
    00003e3b: 	shlq	$0x4, %r8
    00003e3f: 	cmpl	$0x1, %r11d
    00003e43: 	cmovel	%edi, %ecx
    00003e46: 	movslq	%ecx, %rcx
    00003e49: 	leaq	(%rax,%rcx,8), %rsi
    00003e4d: 	nopl	(%rax) # Size: 3
.Ltmp683:
    00003e50: 	movsd	(%r9), %xmm0
    00003e55: 	cmpl	%ebp, %ebx
    00003e57: 	jle	.Ltmp680 # Offset: 15959
    00003e59: 	cmpl	$0x1, %r11d
    00003e5d: 	je	.Ltmp681 # Offset: 15965
    00003e5f: 	leaq	(%r12,%rdx,8), %rdi
    00003e63: 	xorl	%eax, %eax
    00003e65: 	nopl	(%rax) # Size: 3
.Ltmp682:
    00003e68: 	movupd	(%r10,%rax), %xmm2
    00003e6e: 	movupd	(%rdi,%rax), %xmm5
    00003e73: 	addq	$0x10, %rax
    00003e77: 	mulpd	%xmm5, %xmm2
    00003e7b: 	addsd	%xmm2, %xmm0
    00003e7f: 	unpckhpd	%xmm2, %xmm2
    00003e83: 	addsd	%xmm2, %xmm0
    00003e87: 	cmpq	%r8, %rax
    00003e8a: 	jne	.Ltmp682 # Offset: 16010
    00003e8c: 	cmpl	%r11d, %r15d
    00003e8f: 	je	.Ltmp680 # Offset: 16015
.Ltmp681:
    00003e91: 	leaq	(%rcx,%rdx), %rax
    00003e95: 	movsd	(%r14,%rax,8), %xmm1
    00003e9b: 	mulsd	(%rsi), %xmm1
    00003e9f: 	addsd	%xmm1, %xmm0
.Ltmp680:
    00003ea3: 	movsd	%xmm0, (%r9)
    00003ea8: 	addq	%r13, %rdx
    00003eab: 	addq	$0x8, %r9
    00003eaf: 	cmpq	(%rsp), %r9
    00003eb3: 	jne	.Ltmp683 # Offset: 16051
    00003eb5: 	addq	$0x1c, 0x8(%rsp)
    00003ebb: 	addq	$0xe0, %r10
    00003ec2: 	movq	0x8(%rsp), %rax
    00003ec7: 	addq	$0xe0, %r12
    00003ece: 	cmpl	%eax, 0x84(%rsp)
    00003ed5: 	jg	.Ltmp684 # Offset: 16085
.Ltmp679:
    00003edb: 	addq	$0xe, 0x28(%rsp)
    00003ee1: 	movq	0x30(%rsp), %rbx
    00003ee6: 	movq	0x28(%rsp), %rax
    00003eeb: 	addq	%rbx, 0x18(%rsp)
    00003ef0: 	cmpl	%eax, 0xcc(%rsp)
    00003ef7: 	jg	.Ltmp685 # Offset: 16119
    00003efd: 	movq	0x10(%rsp), %r15
.Ltmp678:
    00003f02: 	xorl	%eax, %eax
.Ltmp688:
    00003f04: 	movq	0x1e0(%rsp), %rbx
    00003f0c: 	movsd	(%rbx,%rax,8), %xmm1
    00003f11: 	movq	0xa8(%rsp), %rbx
    00003f19: 	movapd	%xmm1, %xmm2
    00003f1d: 	andpd	DATAat0x24940(%rip), %xmm2
    00003f25: 	movapd	%xmm1, %xmm0
    00003f29: 	comisd	DATAat0x24978(%rip), %xmm2
    00003f31: 	subsd	(%rbx,%rax,8), %xmm0
    00003f36: 	jbe	.Ltmp686 # Offset: 16182
    00003f38: 	divsd	%xmm1, %xmm0
.Ltmp686:
    00003f3c: 	andpd	DATAat0x24940(%rip), %xmm0
    00003f44: 	movsd	DATAat0x24980(%rip), %xmm4
    00003f4c: 	comisd	%xmm0, %xmm4
    00003f50: 	jbe	.Ltmp687 # Offset: 16208
    00003f56: 	addq	$0x1, %rax
    00003f5a: 	cmpq	$0x320, %rax
    00003f60: 	jne	.Ltmp688 # Offset: 16224
.Ltmp822:
    00003f62: 	movq	0xa8(%rsp), %rax
    00003f6a: 	movq	$0x0, (%rax)
    00003f71: 	movq	0xa0(%rsp), %rbx
    00003f79: 	movq	$0x0, -0x10(%rbx)
    00003f81: 	movq	0x40(%rsp), %rdi
    00003f86: 	andq	$-0x8, %rdi
    00003f8a: 	subq	%rdi, %rax
    00003f8d: 	movq	%rax, %rcx
    00003f90: 	xorl	%eax, %eax
    00003f92: 	addl	$0x1900, %ecx
    00003f98: 	shrl	$0x3, %ecx
    00003f9b: 	rep		stosq	%rax, %es:(%rdi)
    00003f9e: 	movl	0x84(%rsp), %eax
    00003fa5: 	testl	%eax, %eax
    00003fa7: 	jle	.Ltmp689 # Offset: 16295
    00003fad: 	movl	0xcc(%rsp), %eax
    00003fb4: 	testl	%eax, %eax
    00003fb6: 	jle	.Ltmp689 # Offset: 16310
    00003fbc: 	movq	0x40(%rsp), %rdi
    00003fc1: 	movq	%r14, 0x10(%rsp)
    00003fc6: 	subl	$0x1, %eax
    00003fc9: 	movq	%r15, %r9
    00003fcc: 	movslq	0x84(%rsp), %rbx
    00003fd4: 	movq	%r15, 0x18(%rsp)
    00003fd9: 	movq	$0x0, 0x8(%rsp)
    00003fe2: 	leaq	(%rdi,%rax,8), %r12
    00003fe6: 	leaq	(,%rbx,8), %r13
    00003fee: 	movq	%rbx, %r15
.Ltmp694:
    00003ff1: 	movq	0x8(%rsp), %rdi
    00003ff6: 	movl	0x84(%rsp), %eax
    00003ffd: 	movq	0x10(%rsp), %rcx
    00004002: 	movq	0xa8(%rsp), %r10
    0000400a: 	leal	0x258(%rdi), %ebx
    00004010: 	movl	%edi, %ebp
    00004012: 	cmpl	%eax, %ebx
    00004014: 	cmovgl	%eax, %ebx
    00004017: 	movl	%ebx, %r11d
    0000401a: 	subl	%edi, %r11d
    0000401d: 	movl	%r11d, %eax
    00004020: 	movl	%r11d, %esi
    00004023: 	shrl	%eax
    00004025: 	andl	$-0x2, %esi
    00004028: 	leal	-0x1(%rax), %r8d
    0000402c: 	movl	%esi, (%rsp)
    0000402f: 	addl	%edi, %esi
    00004031: 	movq	0x18(%rsp), %rax
    00004036: 	addq	$0x1, %r8
    0000403a: 	shlq	$0x4, %r8
    0000403e: 	cmpl	$0x1, %r11d
    00004042: 	cmovel	%edi, %esi
    00004045: 	xorl	%edx, %edx
    00004047: 	movslq	%esi, %rsi
    0000404a: 	leaq	(%rax,%rsi,8), %rdi
    0000404e: 	nop # Size: 2
.Ltmp693:
    00004050: 	movsd	(%r10), %xmm0
    00004055: 	cmpl	%ebp, %ebx
    00004057: 	jle	.Ltmp690 # Offset: 16471
    00004059: 	cmpl	$0x1, %r11d
    0000405d: 	je	.Ltmp691 # Offset: 16477
    0000405f: 	xorl	%eax, %eax
    00004061: 	nopl	(%rax) # Size: 7
.Ltmp692:
    00004068: 	movupd	(%r9,%rax), %xmm2
    0000406e: 	movupd	(%rcx,%rax), %xmm4
    00004073: 	addq	$0x10, %rax
    00004077: 	mulpd	%xmm4, %xmm2
    0000407b: 	addsd	%xmm2, %xmm0
    0000407f: 	unpckhpd	%xmm2, %xmm2
    00004083: 	addsd	%xmm2, %xmm0
    00004087: 	cmpq	%r8, %rax
    0000408a: 	jne	.Ltmp692 # Offset: 16522
    0000408c: 	cmpl	%r11d, (%rsp)
    00004090: 	je	.Ltmp690 # Offset: 16528
.Ltmp691:
    00004092: 	leaq	(%rsi,%rdx), %rax
    00004096: 	movsd	(%r14,%rax,8), %xmm1
    0000409c: 	mulsd	(%rdi), %xmm1
    000040a0: 	addsd	%xmm1, %xmm0
.Ltmp690:
    000040a4: 	movsd	%xmm0, (%r10)
    000040a9: 	addq	$0x8, %r10
    000040ad: 	addq	%r15, %rdx
    000040b0: 	addq	%r13, %rcx
    000040b3: 	cmpq	%r12, %r10
    000040b6: 	jne	.Ltmp693 # Offset: 16566
    000040b8: 	addq	$0x258, 0x8(%rsp)
    000040c1: 	addq	$0x12c0, %r9
    000040c8: 	movq	0x8(%rsp), %rax
    000040cd: 	addq	$0x12c0, 0x10(%rsp)
    000040d6: 	cmpl	%eax, 0x84(%rsp)
    000040dd: 	jg	.Ltmp694 # Offset: 16605
    000040e3: 	movq	0x18(%rsp), %r15
.Ltmp689:
    000040e8: 	xorl	%eax, %eax
.Ltmp697:
    000040ea: 	movq	0x1e0(%rsp), %rbx
    000040f2: 	movsd	(%rbx,%rax,8), %xmm1
    000040f7: 	movq	0xa8(%rsp), %rbx
    000040ff: 	movapd	%xmm1, %xmm2
    00004103: 	andpd	DATAat0x24940(%rip), %xmm2
    0000410b: 	movapd	%xmm1, %xmm0
    0000410f: 	comisd	DATAat0x24978(%rip), %xmm2
    00004117: 	subsd	(%rbx,%rax,8), %xmm0
    0000411c: 	jbe	.Ltmp695 # Offset: 16668
    0000411e: 	divsd	%xmm1, %xmm0
.Ltmp695:
    00004122: 	andpd	DATAat0x24940(%rip), %xmm0
    0000412a: 	movsd	DATAat0x24980(%rip), %xmm4
    00004132: 	comisd	%xmm0, %xmm4
    00004136: 	jbe	.Ltmp696 # Offset: 16694
    0000413c: 	addq	$0x1, %rax
    00004140: 	cmpq	$0x320, %rax
    00004146: 	jne	.Ltmp697 # Offset: 16710
.Ltmp821:
    00004148: 	movq	0xa8(%rsp), %rax
    00004150: 	movq	$0x0, (%rax)
    00004157: 	movq	0xa0(%rsp), %rbx
    0000415f: 	movq	$0x0, -0x10(%rbx)
    00004167: 	movq	0x40(%rsp), %rdi
    0000416c: 	andq	$-0x8, %rdi
    00004170: 	subq	%rdi, %rax
    00004173: 	movq	%rax, %rcx
    00004176: 	xorl	%eax, %eax
    00004178: 	addl	$0x1900, %ecx
    0000417e: 	shrl	$0x3, %ecx
    00004181: 	rep		stosq	%rax, %es:(%rdi)
    00004184: 	movl	0x84(%rsp), %eax
    0000418b: 	testl	%eax, %eax
    0000418d: 	jle	.Ltmp698 # Offset: 16781
    00004193: 	movl	0xcc(%rsp), %r8d
    0000419b: 	testl	%r8d, %r8d
    0000419e: 	jle	.Ltmp698 # Offset: 16798
    000041a4: 	movl	0x84(%rsp), %ebx
    000041ab: 	movq	%r15, 0x8(%rsp)
    000041b0: 	movq	%r14, %r12
    000041b3: 	movq	$0x0, 0x58(%rsp)
    000041bc: 	movl	%ebx, %eax
    000041be: 	shll	$0x4, %eax
    000041c1: 	subl	%ebx, %eax
    000041c3: 	movl	%eax, 0x60(%rsp)
    000041c7: 	movslq	%ebx, %rax
    000041ca: 	movq	%rax, %rbp
    000041cd: 	leaq	(,%rax,8), %r13
    000041d5: 	shlq	$0x4, %rbp
    000041d9: 	movq	%r13, %r15
    000041dc: 	movq	%rbp, %r13
.Ltmp706:
    000041df: 	movq	0x58(%rsp), %rdi
    000041e4: 	movl	0x84(%rsp), %ebx
    000041eb: 	movq	$0x0, 0x30(%rsp)
    000041f4: 	movl	$0x0, 0x48(%rsp)
    000041fc: 	movq	0xa8(%rsp), %r14
    00004204: 	movl	%edi, %eax
    00004206: 	addl	$0x12c, %eax
    0000420b: 	cmpl	%ebx, %eax
    0000420d: 	cmovgl	%ebx, %eax
    00004210: 	movl	%eax, 0x10(%rsp)
    00004214: 	cmpl	%edi, %eax
    00004216: 	jle	.Ltmp699 # Offset: 16918
    0000421c: 	nopl	(%rax) # Size: 4
.Ltmp705:
    00004220: 	movq	0x30(%rsp), %rdi
    00004225: 	movl	0xcc(%rsp), %ebx
    0000422c: 	movl	%edi, %eax
    0000422e: 	addl	$0xf, %eax
    00004231: 	cmpl	%ebx, %eax
    00004233: 	cmovgl	%ebx, %eax
    00004236: 	cmpl	%edi, %eax
    00004238: 	jle	.Ltmp700 # Offset: 16952
    0000423e: 	movslq	0x48(%rsp), %rdx
    00004243: 	movq	0x58(%rsp), %r9
    00004248: 	subl	%edi, %eax
    0000424a: 	movq	%rdi, %rcx
    0000424d: 	leaq	-0x1(%rax), %rbx
    00004251: 	movq	0xa8(%rsp), %r11
    00004259: 	movl	%eax, %ebp
    0000425b: 	xorl	%edi, %edi
    0000425d: 	addq	%r9, %rdx
    00004260: 	imulq	%r15, %rbx
    00004264: 	leaq	-0x1(%rcx,%rax), %rax
    00004269: 	movl	%ebp, 0x28(%rsp)
    0000426d: 	leaq	(%r12,%rdx,8), %r8
    00004271: 	movl	0x84(%rsp), %edx
    00004278: 	leaq	(%r11,%rax,8), %rax
    0000427c: 	movq	%rax, (%rsp)
    00004280: 	movl	$0x0, %eax
    00004285: 	testl	%edx, %edx
    00004287: 	cmovnsq	%rbx, %rdi
    0000428b: 	cmovnsq	%rax, %rbx
    0000428f: 	movl	%ebp, %eax
    00004291: 	shrl	%eax
    00004293: 	movq	%rdi, 0x50(%rsp)
    00004298: 	movl	%ebp, %edi
    0000429a: 	subl	$0x1, %eax
    0000429d: 	andl	$-0x2, %edi
    000042a0: 	shlq	$0x4, %rax
    000042a4: 	movl	%edi, 0x20(%rsp)
    000042a8: 	addl	%ecx, %edi
    000042aa: 	leaq	0x10(%r14,%rax), %r10
    000042af: 	movslq	%edi, %rax
    000042b2: 	imull	%edx, %edi
    000042b5: 	leaq	(%r11,%rax,8), %rsi
    000042b9: 	leaq	(%r11,%rcx,8), %rax
    000042bd: 	movq	%rax, 0x38(%rsp)
    000042c2: 	leal	-0x1(%rbp), %eax
    000042c5: 	movq	0x50(%rsp), %rbp
    000042ca: 	movl	%eax, 0x18(%rsp)
    000042ce: 	addq	%rcx, %rax
    000042d1: 	movq	0x40(%rsp), %rcx
    000042d6: 	leaq	(%rcx,%rax,8), %r11
    000042da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp704:
    000042e0: 	movq	0x8(%rsp), %rcx
    000042e5: 	movq	%r8, %rdx
    000042e8: 	movl	%r9d, %eax
    000042eb: 	subq	%r12, %rdx
    000042ee: 	movsd	(%rcx,%r9,8), %xmm1
    000042f4: 	leaq	(%r8,%rbx), %rcx
    000042f8: 	cmpq	%rcx, (%rsp)
    000042fc: 	setb	%cl
    000042ff: 	addq	%rbp, %rdx
    00004302: 	addq	%r12, %rdx
    00004305: 	cmpq	%rdx, %r14
    00004308: 	seta	%dl
    0000430b: 	orb	%cl, %dl
    0000430d: 	je	.Ltmp701 # Offset: 17165
    00004313: 	movapd	%xmm1, %xmm2
    00004317: 	cmpl	$0x2, 0x18(%rsp)
    0000431c: 	movq	%r8, %rcx
    0000431f: 	movq	%r14, %rdx
    00004322: 	unpcklpd	%xmm2, %xmm2
    00004326: 	jbe	.Ltmp701 # Offset: 17190
    0000432c: 	nopl	(%rax) # Size: 4
.Ltmp702:
    00004330: 	movsd	(%rcx), %xmm0
    00004334: 	movupd	(%rdx), %xmm5
    00004338: 	addq	$0x10, %rdx
    0000433c: 	movhpd	(%rcx,%r15), %xmm0
    00004342: 	addq	%r13, %rcx
    00004345: 	mulpd	%xmm2, %xmm0
    00004349: 	addpd	%xmm5, %xmm0
    0000434d: 	movups	%xmm0, -0x10(%rdx)
    00004351: 	cmpq	%rdx, %r10
    00004354: 	jne	.Ltmp702 # Offset: 17236
    00004356: 	movl	0x28(%rsp), %edx
    0000435a: 	cmpl	%edx, 0x20(%rsp)
    0000435e: 	je	.Ltmp703 # Offset: 17246
    00004360: 	addl	%edi, %eax
    00004362: 	movsd	(%rsi), %xmm0
    00004366: 	cltq
    00004368: 	mulsd	(%r12,%rax,8), %xmm1
    0000436e: 	addsd	%xmm1, %xmm0
    00004372: 	movsd	%xmm0, (%rsi)
.Ltmp703:
    00004376: 	addq	$0x1, %r9
    0000437a: 	addq	$0x8, %r8
    0000437e: 	cmpl	%r9d, 0x10(%rsp)
    00004383: 	jg	.Ltmp704 # Offset: 17283
.Ltmp700:
    00004389: 	addq	$0xf, 0x30(%rsp)
    0000438f: 	movl	0x60(%rsp), %ebx
    00004393: 	addq	$0x78, %r14
    00004397: 	addl	%ebx, 0x48(%rsp)
    0000439b: 	movq	0x30(%rsp), %rax
    000043a0: 	cmpl	%eax, 0xcc(%rsp)
    000043a7: 	jg	.Ltmp705 # Offset: 17319
.Ltmp699:
    000043ad: 	addq	$0x12c, 0x58(%rsp)
    000043b6: 	movq	0x58(%rsp), %rax
    000043bb: 	cmpl	%eax, 0x84(%rsp)
    000043c2: 	jg	.Ltmp706 # Offset: 17346
    000043c8: 	movq	0x8(%rsp), %r15
    000043cd: 	movq	%r12, %r14
.Ltmp698:
    000043d0: 	xorl	%eax, %eax
.Ltmp709:
    000043d2: 	movq	0x1e0(%rsp), %rbx
    000043da: 	movsd	(%rbx,%rax,8), %xmm1
    000043df: 	movq	0xa8(%rsp), %rbx
    000043e7: 	movapd	%xmm1, %xmm2
    000043eb: 	andpd	DATAat0x24940(%rip), %xmm2
    000043f3: 	movapd	%xmm1, %xmm0
    000043f7: 	comisd	DATAat0x24978(%rip), %xmm2
    000043ff: 	subsd	(%rbx,%rax,8), %xmm0
    00004404: 	jbe	.Ltmp707 # Offset: 17412
    00004406: 	divsd	%xmm1, %xmm0
.Ltmp707:
    0000440a: 	andpd	DATAat0x24940(%rip), %xmm0
    00004412: 	movsd	DATAat0x24980(%rip), %xmm4
    0000441a: 	comisd	%xmm0, %xmm4
    0000441e: 	jbe	.Ltmp708 # Offset: 17438
    00004424: 	addq	$0x1, %rax
    00004428: 	cmpq	$0x320, %rax
    0000442e: 	jne	.Ltmp709 # Offset: 17454
.Ltmp820:
    00004430: 	movq	0xa8(%rsp), %rax
    00004438: 	movq	$0x0, (%rax)
    0000443f: 	movq	0xa0(%rsp), %rbx
    00004447: 	movq	$0x0, -0x10(%rbx)
    0000444f: 	movq	0x40(%rsp), %rdi
    00004454: 	andq	$-0x8, %rdi
    00004458: 	subq	%rdi, %rax
    0000445b: 	movq	%rax, %rcx
    0000445e: 	xorl	%eax, %eax
    00004460: 	addl	$0x1900, %ecx
    00004466: 	shrl	$0x3, %ecx
    00004469: 	rep		stosq	%rax, %es:(%rdi)
    0000446c: 	movl	0xcc(%rsp), %eax
    00004473: 	testl	%eax, %eax
    00004475: 	jle	.Ltmp710 # Offset: 17525
    0000447b: 	movl	0x84(%rsp), %ebx
    00004482: 	testl	%ebx, %ebx
    00004484: 	jle	.Ltmp710 # Offset: 17540
    0000448a: 	movl	%ebx, %eax
    0000448c: 	leal	(%rbx,%rbx), %edi
    0000448f: 	movslq	%ebx, %rcx
    00004492: 	movl	%ebx, 0x1a0(%rsp)
    00004499: 	shll	$0x4, %eax
    0000449c: 	movslq	%edi, %rdx
    0000449f: 	addl	%ebx, %edi
    000044a1: 	movq	%rcx, (%rsp)
    000044a5: 	movl	%eax, 0x208(%rsp)
    000044ac: 	cltq
    000044ae: 	movq	%rax, 0x210(%rsp)
    000044b6: 	movslq	%edi, %rax
    000044b9: 	movq	%rax, 0x1c0(%rsp)
    000044c1: 	leal	(,%rbx,4), %eax
    000044c8: 	cltq
    000044ca: 	movl	%edx, 0x168(%rsp)
    000044d1: 	movq	%rax, %r13
    000044d4: 	shlq	$0x3, %rax
    000044d8: 	movl	%edi, 0x1a8(%rsp)
    000044df: 	movq	%rax, 0xe8(%rsp)
    000044e7: 	shlq	$0x4, %r13
    000044eb: 	leaq	(,%rcx,8), %rax
    000044f3: 	movq	%rax, 0x138(%rsp)
    000044fb: 	movq	0xa8(%rsp), %rax
    00004503: 	movq	%rcx, 0x1d0(%rsp)
    0000450b: 	movq	%rax, 0x50(%rsp)
    00004510: 	addq	$0x20, %rax
    00004514: 	movq	%rdx, 0x1c8(%rsp)
    0000451c: 	movq	$0x0, 0x1b8(%rsp)
    00004528: 	movl	$0x4, 0x1b4(%rsp)
    00004533: 	movl	$0x0, 0x1b0(%rsp)
    0000453e: 	movq	%rax, 0x228(%rsp)
    00004546: 	movq	%r15, 0xc0(%rsp)
    0000454e: 	movq	$0x0, 0x160(%rsp)
    0000455a: 	movq	0x160(%rsp), %r8
.Ltmp719:
    00004562: 	movq	0x1d0(%rsp), %r9
    0000456a: 	movl	%r8d, %eax
    0000456d: 	movl	0xcc(%rsp), %ebx
    00004574: 	movl	%r8d, 0xe0(%rsp)
    0000457c: 	addl	$0x10, %eax
    0000457f: 	movq	0xa8(%rsp), %r15
    00004587: 	movq	0x50(%rsp), %r11
    0000458c: 	cmpl	%ebx, %eax
    0000458e: 	movl	%eax, %edi
    00004590: 	leaq	(%r14,%r9,8), %rax
    00004594: 	movq	%rax, 0xb8(%rsp)
    0000459c: 	movslq	0x1a0(%rsp), %rax
    000045a4: 	cmovgl	%ebx, %edi
    000045a7: 	shlq	$0x3, %rax
    000045ab: 	leal	-0x3(%rdi), %r10d
    000045af: 	movl	%edi, 0xb0(%rsp)
    000045b6: 	movq	%rax, 0x58(%rsp)
    000045bb: 	leaq	(,%rdx,8), %rax
    000045c3: 	movq	%rax, 0x60(%rsp)
    000045c8: 	movslq	0x1a8(%rsp), %rax
    000045d0: 	movl	%r10d, 0xd0(%rsp)
    000045d8: 	shlq	$0x3, %rax
    000045dc: 	movq	%rax, 0x30(%rsp)
    000045e1: 	movslq	0x1b0(%rsp), %rax
    000045e9: 	shlq	$0x3, %rax
    000045ed: 	movq	%rax, 0x68(%rsp)
    000045f2: 	movl	$0xfffffffc, %eax
    000045f7: 	subl	%r8d, %eax
    000045fa: 	addl	%edi, %eax
    000045fc: 	movl	%eax, 0xf0(%rsp)
    00004603: 	shrl	$0x2, %eax
    00004606: 	leal	0x1(%rax), %edx
    00004609: 	movl	%eax, %esi
    0000460b: 	movq	%rdx, %rbx
    0000460e: 	movl	%edx, 0x130(%rsp)
    00004615: 	leaq	-0x1(%rdx), %rax
    00004619: 	leaq	-0x1(%r8,%rdx,4), %rdx
    0000461e: 	imulq	0xe8(%rsp), %rax
    00004627: 	leaq	(%r15,%rdx,8), %rcx
    0000462b: 	xorl	%edx, %edx
    0000462d: 	movq	%rcx, 0x48(%rsp)
    00004632: 	movl	0x84(%rsp), %ecx
    00004639: 	testl	%ecx, %ecx
    0000463b: 	cmovsq	%rax, %rdx
    0000463f: 	movq	%rdx, 0x38(%rsp)
    00004644: 	movl	$0x0, %edx
    00004649: 	cmovsq	%rdx, %rax
    0000464d: 	movq	%rax, 0x28(%rsp)
    00004652: 	movl	%ebx, %eax
    00004654: 	andl	$-0x2, %ebx
    00004657: 	shrl	%eax
    00004659: 	movl	%ebx, 0x120(%rsp)
    00004660: 	subl	$0x1, %eax
    00004663: 	shlq	$0x6, %rax
    00004667: 	leaq	0x40(%r11,%rax), %rax
    0000466c: 	movl	%ecx, %r11d
    0000466f: 	movq	%rax, 0x128(%rsp)
    00004677: 	leal	(%r8,%rbx,4), %eax
    0000467b: 	imull	%eax, %ecx
    0000467e: 	movslq	%eax, %rdx
    00004681: 	shlq	$0x3, %rdx
    00004685: 	leaq	0x8(%r15,%rdx), %rbx
    0000468a: 	leaq	(%r15,%rdx), %r12
    0000468e: 	movl	%ecx, 0x20(%rsp)
    00004692: 	leal	0x1(%rax), %ecx
    00004695: 	movl	%ecx, %ebp
    00004697: 	leal	0x2(%rax), %ecx
    0000469a: 	addl	$0x3, %eax
    0000469d: 	movq	%rbx, 0x90(%rsp)
    000046a5: 	imull	%r11d, %ebp
    000046a9: 	leaq	0x10(%r15,%rdx), %rbx
    000046ae: 	movl	%ebp, 0x18(%rsp)
    000046b2: 	movl	%ecx, %ebp
    000046b4: 	movl	%r11d, %ecx
    000046b7: 	imull	%ecx, %eax
    000046ba: 	imull	%r11d, %ebp
    000046be: 	leaq	0x18(%r15,%rdx), %r11
    000046c3: 	movl	%eax, 0x8(%rsp)
    000046c7: 	leaq	(%r15,%r8,8), %rax
    000046cb: 	movl	%ebp, 0x10(%rsp)
    000046cf: 	movq	0x228(%rsp), %rbp
    000046d7: 	movq	%rax, 0x170(%rsp)
    000046df: 	movl	%esi, %eax
    000046e1: 	leaq	(%r8,%rax,4), %rax
    000046e5: 	leaq	(%rbp,%rax,8), %rax
    000046ea: 	movq	%rax, 0x180(%rsp)
    000046f2: 	movq	0x1b8(%rsp), %rax
    000046fa: 	movq	0x90(%rsp), %rbp
    00004702: 	subq	%r9, %rax
    00004705: 	shlq	$0x3, %rax
    00004709: 	movq	%rax, 0x188(%rsp)
    00004711: 	movq	0x1c8(%rsp), %rax
    00004719: 	subq	%r9, %rax
    0000471c: 	shlq	$0x3, %rax
    00004720: 	movq	%rax, 0x190(%rsp)
    00004728: 	movq	0x1c0(%rsp), %rax
    00004730: 	subq	%r9, %rax
    00004733: 	shlq	$0x3, %rax
    00004737: 	cmpl	%r8d, %r10d
    0000473a: 	movq	%rax, 0x198(%rsp)
    00004742: 	movl	0x1b4(%rsp), %eax
    00004749: 	leal	(%rax,%rsi,4), %eax
    0000474c: 	movl	%ecx, %esi
    0000474e: 	cmovlel	%r8d, %eax
    00004752: 	subl	%eax, %edi
    00004754: 	movl	%eax, %r8d
    00004757: 	movl	%eax, 0xd8(%rsp)
    0000475e: 	leal	-0x1(%rdi), %eax
    00004761: 	movl	%edi, %edx
    00004763: 	movl	%edi, 0x158(%rsp)
    0000476a: 	cmpl	$0x2, %eax
    0000476d: 	seta	0x140(%rsp)
    00004775: 	imull	%r8d, %ecx
    00004779: 	movslq	%ecx, %rax
    0000477c: 	movl	$0x0, %ecx
    00004781: 	movq	%rax, 0x118(%rsp)
    00004789: 	leaq	-0x1(%rdx), %rax
    0000478d: 	imulq	0x138(%rsp), %rax
    00004796: 	testl	%esi, %esi
    00004798: 	cmovnsq	%rax, %rcx
    0000479c: 	movq	%rcx, 0x110(%rsp)
    000047a4: 	movslq	%r8d, %rcx
    000047a7: 	leaq	-0x1(%rcx,%rdx), %rdx
    000047ac: 	leaq	(%r15,%rcx,8), %r9
    000047b0: 	leaq	(%r15,%rdx,8), %rcx
    000047b4: 	movl	$0x0, %edx
    000047b9: 	movq	%r9, 0xf8(%rsp)
    000047c1: 	cmovnsq	%rdx, %rax
    000047c5: 	movq	%rcx, 0x108(%rsp)
    000047cd: 	movq	%rax, 0x100(%rsp)
    000047d5: 	movl	%edi, %eax
    000047d7: 	shrl	%edi
    000047d9: 	andl	$-0x2, %eax
    000047dc: 	movl	%edi, 0x150(%rsp)
    000047e3: 	movl	%eax, 0x148(%rsp)
    000047ea: 	addl	%r8d, %eax
    000047ed: 	movslq	%eax, %rdx
    000047f0: 	imull	%esi, %eax
    000047f3: 	leaq	(%r15,%rdx,8), %rdi
    000047f7: 	movq	%rdi, 0x88(%rsp)
    000047ff: 	leal	0x1(%r8), %edi
    00004803: 	movl	%eax, 0x70(%rsp)
    00004807: 	movslq	%edi, %rax
    0000480a: 	movl	%edi, 0x178(%rsp)
    00004811: 	imull	%esi, %edi
    00004814: 	leaq	(%r15,%rax,8), %rax
    00004818: 	movq	%rax, 0x1d8(%rsp)
    00004820: 	movl	%edi, 0x1e8(%rsp)
    00004827: 	leal	0x2(%r8), %edi
    0000482b: 	movslq	%edi, %rax
    0000482e: 	movl	%edi, 0x1fc(%rsp)
    00004835: 	imull	%esi, %edi
    00004838: 	leaq	(%r15,%rax,8), %rax
    0000483c: 	movq	%rax, 0x1f0(%rsp)
    00004844: 	movl	%edi, 0x1f8(%rsp)
    0000484b: 	leal	0x3(%r8), %edi
    0000484f: 	movslq	%edi, %rax
    00004852: 	movl	%edi, 0x200(%rsp)
    00004859: 	imull	%esi, %edi
    0000485c: 	leaq	(%r15,%rax,8), %rax
    00004860: 	xorl	%r15d, %r15d
    00004863: 	movq	%rax, 0x220(%rsp)
    0000486b: 	movl	%edi, 0x218(%rsp)
    00004872: 	nopw	(%rax,%rax) # Size: 6
.Ltmp717:
    00004878: 	movq	0xc0(%rsp), %rax
    00004880: 	movl	0xe0(%rsp), %edi
    00004887: 	movl	%r15d, %edx
    0000488a: 	movsd	(%rax,%r15,8), %xmm4
    00004890: 	cmpl	%edi, 0xd0(%rsp)
    00004897: 	jle	.Ltmp711 # Offset: 18583
    0000489d: 	movq	0x60(%rsp), %rdi
    000048a2: 	movq	0x28(%rsp), %rcx
    000048a7: 	movq	0x50(%rsp), %r10
    000048ac: 	movq	0x48(%rsp), %r9
    000048b1: 	movq	%rdi, %rax
    000048b4: 	movq	0x58(%rsp), %r8
    000048b9: 	addq	%rcx, %rax
    000048bc: 	addq	%r14, %rax
    000048bf: 	cmpq	%rax, %r10
    000048c2: 	movq	0x38(%rsp), %rax
    000048c7: 	seta	%sil
    000048cb: 	addq	%rdi, %rax
    000048ce: 	addq	%r14, %rax
    000048d1: 	cmpq	%rax, %r9
    000048d4: 	setb	%al
    000048d7: 	orl	%eax, %esi
    000048d9: 	movq	%r8, %rax
    000048dc: 	addq	%rcx, %rax
    000048df: 	addq	%r14, %rax
    000048e2: 	cmpq	%rax, %r10
    000048e5: 	movq	0x38(%rsp), %rax
    000048ea: 	seta	%cl
    000048ed: 	addq	%r8, %rax
    000048f0: 	addq	%r14, %rax
    000048f3: 	cmpq	%rax, %r9
    000048f6: 	setb	%al
    000048f9: 	orl	%ecx, %eax
    000048fb: 	andl	%esi, %eax
    000048fd: 	cmpl	$0x7, 0xf0(%rsp)
    00004905: 	movq	0x30(%rsp), %rsi
    0000490a: 	seta	%cl
    0000490d: 	andl	%ecx, %eax
    0000490f: 	movq	0x28(%rsp), %rcx
    00004914: 	addq	%rsi, %rcx
    00004917: 	addq	%r14, %rcx
    0000491a: 	cmpq	%rcx, %r10
    0000491d: 	seta	%cl
    00004920: 	addq	0x38(%rsp), %rsi
    00004925: 	addq	%r14, %rsi
    00004928: 	cmpq	%rsi, %r9
    0000492b: 	setb	%sil
    0000492f: 	orl	%esi, %ecx
    00004931: 	testb	%cl, %al
    00004933: 	je	.Ltmp712 # Offset: 18739
    00004939: 	movq	0x68(%rsp), %r9
    0000493e: 	movq	0x38(%rsp), %rax
    00004943: 	addq	%r9, %rax
    00004946: 	addq	%r14, %rax
    00004949: 	cmpq	%rax, 0x48(%rsp)
    0000494e: 	movq	0x28(%rsp), %rax
    00004953: 	setb	%cl
    00004956: 	addq	%r9, %rax
    00004959: 	addq	%r14, %rax
    0000495c: 	cmpq	%rax, %r10
    0000495f: 	seta	%al
    00004962: 	orb	%cl, %al
    00004964: 	je	.Ltmp712 # Offset: 18788
    0000496a: 	movq	0x30(%rsp), %rsi
    0000496f: 	movq	%r10, %rax
    00004972: 	movapd	%xmm4, %xmm5
    00004976: 	leaq	(%r14,%r9), %r10
    0000497a: 	movl	%r15d, 0x90(%rsp)
    00004982: 	leaq	(%r14,%r8), %r9
    00004986: 	leaq	(%r14,%rdi), %r8
    0000498a: 	unpcklpd	%xmm5, %xmm5
    0000498e: 	leaq	(%r14,%rsi), %rdi
    00004992: 	movq	0x128(%rsp), %rdx
    0000499a: 	movq	0xe8(%rsp), %rsi
    000049a2: 	xorl	%ecx, %ecx
    000049a4: 	nopl	(%rax) # Size: 4
.Ltmp713:
    000049a8: 	movsd	(%r10,%rcx), %xmm2
    000049ae: 	movupd	(%rax), %xmm0
    000049b2: 	addq	$0x40, %rax
    000049b6: 	movupd	-0x20(%rax), %xmm8
    000049bc: 	movupd	-0x30(%rax), %xmm6
    000049c1: 	movhpd	(%r10,%rsi), %xmm2
    000049c7: 	movhpd	-0x30(%rax), %xmm0
    000049cc: 	movlpd	-0x38(%rax), %xmm6
    000049d1: 	movupd	-0x10(%rax), %xmm7
    000049d6: 	mulpd	%xmm5, %xmm2
    000049da: 	movhpd	-0x10(%rax), %xmm8
    000049e0: 	movapd	%xmm0, %xmm1
    000049e4: 	movlpd	-0x18(%rax), %xmm7
    000049e9: 	unpcklpd	%xmm8, %xmm1
    000049ee: 	movapd	%xmm6, %xmm3
    000049f2: 	unpckhpd	%xmm8, %xmm0
    000049f7: 	unpcklpd	%xmm7, %xmm3
    000049fb: 	unpckhpd	%xmm7, %xmm6
    000049ff: 	addpd	%xmm1, %xmm2
    00004a03: 	movsd	(%r9,%rcx), %xmm1
    00004a09: 	movhpd	(%r9,%rsi), %xmm1
    00004a0f: 	mulpd	%xmm5, %xmm1
    00004a13: 	addpd	%xmm1, %xmm3
    00004a17: 	movsd	(%r8,%rcx), %xmm1
    00004a1d: 	movhpd	(%r8,%rsi), %xmm1
    00004a23: 	mulpd	%xmm5, %xmm1
    00004a27: 	movapd	%xmm3, %xmm7
    00004a2b: 	addpd	%xmm0, %xmm1
    00004a2f: 	movsd	(%rdi,%rcx), %xmm0
    00004a34: 	addq	%r13, %rcx
    00004a37: 	movhpd	(%rdi,%rsi), %xmm0
    00004a3c: 	addq	%r13, %rsi
    00004a3f: 	mulpd	%xmm5, %xmm0
    00004a43: 	addpd	%xmm6, %xmm0
    00004a47: 	movapd	%xmm2, %xmm6
    00004a4b: 	unpckhpd	%xmm1, %xmm2
    00004a4f: 	unpcklpd	%xmm1, %xmm6
    00004a53: 	unpcklpd	%xmm0, %xmm7
    00004a57: 	unpckhpd	%xmm0, %xmm3
    00004a5b: 	movapd	%xmm6, %xmm0
    00004a5f: 	unpcklpd	%xmm7, %xmm0
    00004a63: 	unpckhpd	%xmm7, %xmm6
    00004a67: 	movups	%xmm0, -0x40(%rax)
    00004a6b: 	movapd	%xmm2, %xmm0
    00004a6f: 	unpckhpd	%xmm3, %xmm2
    00004a73: 	unpcklpd	%xmm3, %xmm0
    00004a77: 	movups	%xmm6, -0x30(%rax)
    00004a7b: 	movups	%xmm0, -0x20(%rax)
    00004a7f: 	movups	%xmm2, -0x10(%rax)
    00004a83: 	cmpq	%rdx, %rax
    00004a86: 	jne	.Ltmp713 # Offset: 19078
    00004a8c: 	movl	0x90(%rsp), %edx
    00004a93: 	movl	0x130(%rsp), %edi
    00004a9a: 	cmpl	%edi, 0x120(%rsp)
    00004aa1: 	je	.Ltmp711 # Offset: 19105
    00004aa3: 	movl	0x20(%rsp), %eax
    00004aa7: 	addl	%edx, %eax
    00004aa9: 	cltq
    00004aab: 	movsd	(%r14,%rax,8), %xmm0
    00004ab1: 	movl	0x18(%rsp), %eax
    00004ab5: 	mulsd	%xmm4, %xmm0
    00004ab9: 	addl	%edx, %eax
    00004abb: 	addsd	(%r12), %xmm0
    00004ac1: 	cltq
    00004ac3: 	movsd	%xmm0, (%r12)
    00004ac9: 	movsd	(%r14,%rax,8), %xmm0
    00004acf: 	movl	0x10(%rsp), %eax
    00004ad3: 	mulsd	%xmm4, %xmm0
    00004ad7: 	addl	%edx, %eax
    00004ad9: 	addsd	(%rbp), %xmm0
    00004ade: 	cltq
    00004ae0: 	movsd	%xmm0, (%rbp)
    00004ae5: 	movsd	(%r14,%rax,8), %xmm0
    00004aeb: 	movl	0x8(%rsp), %eax
    00004aef: 	mulsd	%xmm4, %xmm0
    00004af3: 	addl	%edx, %eax
    00004af5: 	addsd	(%rbx), %xmm0
    00004af9: 	cltq
    00004afb: 	movsd	%xmm0, (%rbx)
    00004aff: 	movsd	(%r14,%rax,8), %xmm0
    00004b05: 	mulsd	%xmm4, %xmm0
    00004b09: 	addsd	(%r11), %xmm0
    00004b0e: 	movsd	%xmm0, (%r11)
.Ltmp711:
    00004b13: 	movl	0xd8(%rsp), %edi
    00004b1a: 	cmpl	%edi, 0xb0(%rsp)
    00004b21: 	jle	.Ltmp714 # Offset: 19233
    00004b27: 	movq	0x118(%rsp), %rax
    00004b2f: 	movq	0x100(%rsp), %rdi
    00004b37: 	movq	0xf8(%rsp), %r8
    00004b3f: 	leaq	(%r15,%rax), %rsi
    00004b43: 	leaq	(,%rsi,8), %rax
    00004b4b: 	leaq	(%rdi,%rax), %rcx
    00004b4f: 	addq	%r14, %rcx
    00004b52: 	cmpq	%rcx, 0x108(%rsp)
    00004b5a: 	movq	0x110(%rsp), %rcx
    00004b62: 	setb	%dil
    00004b66: 	addq	%rax, %rcx
    00004b69: 	addq	%r14, %rcx
    00004b6c: 	cmpq	%rcx, %r8
    00004b6f: 	seta	%cl
    00004b72: 	orb	%dil, %cl
    00004b75: 	je	.Ltmp715 # Offset: 19317
    00004b7b: 	cmpb	$0x0, 0x140(%rsp)
    00004b83: 	je	.Ltmp715 # Offset: 19331
    00004b89: 	addq	%r14, %rax
    00004b8c: 	movapd	%xmm4, %xmm1
    00004b90: 	movq	0x138(%rsp), %rdi
    00004b98: 	movupd	(%r8), %xmm5
    00004b9d: 	movsd	(%rax), %xmm0
    00004ba1: 	unpcklpd	%xmm1, %xmm1
    00004ba5: 	cmpl	$0x1, 0x150(%rsp)
    00004bad: 	movaps	%xmm5, 0x90(%rsp)
    00004bb5: 	movhpd	(%rax,%rdi), %xmm0
    00004bba: 	leaq	(%rax,%rdi,2), %rax
    00004bbe: 	mulpd	%xmm1, %xmm0
    00004bc2: 	addpd	%xmm5, %xmm0
    00004bc6: 	movups	%xmm0, (%r8)
    00004bca: 	jbe	.Ltmp716 # Offset: 19402
    00004bcc: 	movsd	(%rax), %xmm0
    00004bd0: 	movupd	0x10(%r8), %xmm5
    00004bd6: 	movhpd	(%rax,%rdi), %xmm0
    00004bdb: 	movaps	%xmm5, 0x90(%rsp)
    00004be3: 	mulpd	%xmm1, %xmm0
    00004be7: 	addpd	%xmm5, %xmm0
    00004beb: 	movups	%xmm0, 0x10(%r8)
.Ltmp716:
    00004bf0: 	movl	0x158(%rsp), %edi
    00004bf7: 	cmpl	%edi, 0x148(%rsp)
    00004bfe: 	je	.Ltmp714 # Offset: 19454
    00004c00: 	addl	0x70(%rsp), %edx
    00004c04: 	movq	0x88(%rsp), %rax
    00004c0c: 	movslq	%edx, %rdx
    00004c0f: 	mulsd	(%r14,%rdx,8), %xmm4
    00004c15: 	addsd	(%rax), %xmm4
    00004c19: 	movsd	%xmm4, (%rax)
.Ltmp714:
    00004c1d: 	addq	$0x8, 0xb8(%rsp)
    00004c26: 	addq	$0x1, %r15
    00004c2a: 	addq	$0x8, 0x58(%rsp)
    00004c30: 	addq	$0x8, 0x60(%rsp)
    00004c36: 	addq	$0x8, 0x30(%rsp)
    00004c3c: 	addq	$0x8, 0x68(%rsp)
    00004c42: 	cmpq	(%rsp), %r15
    00004c46: 	jne	.Ltmp717 # Offset: 19526
    00004c4c: 	movl	0x208(%rsp), %eax
    00004c53: 	addl	$0x10, 0x1b4(%rsp)
    00004c5b: 	addl	%eax, 0x168(%rsp)
    00004c62: 	movl	0x168(%rsp), %ebx
    00004c69: 	addl	%eax, 0x1a0(%rsp)
    00004c70: 	addl	%eax, 0x1a8(%rsp)
    00004c77: 	addl	%eax, 0x1b0(%rsp)
    00004c7e: 	movq	0x210(%rsp), %rax
    00004c86: 	addq	$0x10, 0x160(%rsp)
    00004c8f: 	addq	%rax, 0x1b8(%rsp)
    00004c97: 	addq	%rax, 0x1d0(%rsp)
    00004c9f: 	addq	%rax, 0x1c8(%rsp)
    00004ca7: 	addq	%rax, 0x1c0(%rsp)
    00004caf: 	movq	0x160(%rsp), %rax
    00004cb7: 	subq	$-0x80, 0x50(%rsp)
    00004cbd: 	cmpl	%eax, 0xcc(%rsp)
    00004cc4: 	jle	.Ltmp718 # Offset: 19652
    00004cca: 	movslq	%ebx, %rdx
    00004ccd: 	movq	%rax, %r8
    00004cd0: 	jmp	.Ltmp719 # Offset: 19664
    00004cd5: 	nopl	(%rax) # Size: 3
.Ltmp701:
    00004cd8: 	movq	0x38(%rsp), %rax
    00004cdd: 	movq	%r8, %rdx
.Ltmp720:
    00004ce0: 	movsd	(%rdx), %xmm0
    00004ce4: 	addq	$0x8, %rax
    00004ce8: 	addq	%r15, %rdx
    00004ceb: 	mulsd	%xmm1, %xmm0
    00004cef: 	addsd	-0x8(%rax), %xmm0
    00004cf4: 	movsd	%xmm0, -0x8(%rax)
    00004cf9: 	cmpq	%rax, %r11
    00004cfc: 	jne	.Ltmp720 # Offset: 19708
    00004cfe: 	jmp	.Ltmp703 # Offset: 19710
.Ltmp712:
    00004d03: 	movq	0xb8(%rsp), %r10
    00004d0b: 	movq	0x188(%rsp), %r8
    00004d13: 	movl	%edx, 0x90(%rsp)
    00004d1a: 	xorl	%ecx, %ecx
    00004d1c: 	movq	0x190(%rsp), %rdi
    00004d24: 	movq	0x198(%rsp), %rsi
    00004d2c: 	movq	0x170(%rsp), %rax
    00004d34: 	movq	0xe8(%rsp), %rdx
    00004d3c: 	addq	%r10, %r8
    00004d3f: 	movq	0x180(%rsp), %r9
    00004d47: 	addq	%r10, %rdi
    00004d4a: 	addq	%r10, %rsi
    00004d4d: 	nopl	(%rax) # Size: 3
.Ltmp721:
    00004d50: 	movsd	(%r8,%rcx), %xmm0
    00004d56: 	addq	$0x20, %rax
    00004d5a: 	mulsd	%xmm4, %xmm0
    00004d5e: 	addsd	-0x20(%rax), %xmm0
    00004d63: 	movsd	%xmm0, -0x20(%rax)
    00004d68: 	movsd	(%r10,%rcx), %xmm0
    00004d6e: 	mulsd	%xmm4, %xmm0
    00004d72: 	addsd	-0x18(%rax), %xmm0
    00004d77: 	movsd	%xmm0, -0x18(%rax)
    00004d7c: 	movsd	(%rdi,%rcx), %xmm0
    00004d81: 	mulsd	%xmm4, %xmm0
    00004d85: 	addsd	-0x10(%rax), %xmm0
    00004d8a: 	movsd	%xmm0, -0x10(%rax)
    00004d8f: 	movsd	(%rsi,%rcx), %xmm0
    00004d94: 	addq	%rdx, %rcx
    00004d97: 	mulsd	%xmm4, %xmm0
    00004d9b: 	addsd	-0x8(%rax), %xmm0
    00004da0: 	movsd	%xmm0, -0x8(%rax)
    00004da5: 	cmpq	%r9, %rax
    00004da8: 	jne	.Ltmp721 # Offset: 19880
    00004daa: 	movl	0x90(%rsp), %edx
    00004db1: 	jmp	.Ltmp711 # Offset: 19889
.Ltmp670:
    00004db6: 	movq	0x48(%rsp), %rax
    00004dbb: 	movq	%r9, %rdx
    00004dbe: 	nop # Size: 2
.Ltmp722:
    00004dc0: 	movsd	(%rdx), %xmm0
    00004dc4: 	addq	$0x8, %rax
    00004dc8: 	addq	%r13, %rdx
    00004dcb: 	mulsd	%xmm1, %xmm0
    00004dcf: 	addsd	-0x8(%rax), %xmm0
    00004dd4: 	movsd	%xmm0, -0x8(%rax)
    00004dd9: 	cmpq	%r11, %rax
    00004ddc: 	jne	.Ltmp722 # Offset: 19932
    00004dde: 	jmp	.Ltmp672 # Offset: 19934
.Ltmp715:
    00004de3: 	movsd	(%r14,%rsi,8), %xmm0
    00004de9: 	movq	0xf8(%rsp), %rax
    00004df1: 	movl	0xb0(%rsp), %edi
    00004df8: 	mulsd	%xmm4, %xmm0
    00004dfc: 	addsd	(%rax), %xmm0
    00004e00: 	movsd	%xmm0, (%rax)
    00004e04: 	cmpl	%edi, 0x178(%rsp)
    00004e0b: 	jge	.Ltmp714 # Offset: 19979
    00004e11: 	movl	0x1e8(%rsp), %eax
    00004e18: 	addl	%edx, %eax
    00004e1a: 	cltq
    00004e1c: 	movsd	(%r14,%rax,8), %xmm0
    00004e22: 	movq	0x1d8(%rsp), %rax
    00004e2a: 	mulsd	%xmm4, %xmm0
    00004e2e: 	addsd	(%rax), %xmm0
    00004e32: 	movsd	%xmm0, (%rax)
    00004e36: 	movl	0x1fc(%rsp), %eax
    00004e3d: 	cmpl	%eax, %edi
    00004e3f: 	jle	.Ltmp714 # Offset: 20031
    00004e45: 	movl	0x1f8(%rsp), %eax
    00004e4c: 	addl	%edx, %eax
    00004e4e: 	cltq
    00004e50: 	movsd	(%r14,%rax,8), %xmm0
    00004e56: 	movq	0x1f0(%rsp), %rax
    00004e5e: 	mulsd	%xmm4, %xmm0
    00004e62: 	addsd	(%rax), %xmm0
    00004e66: 	movsd	%xmm0, (%rax)
    00004e6a: 	movl	0x200(%rsp), %eax
    00004e71: 	cmpl	%eax, %edi
    00004e73: 	jle	.Ltmp714 # Offset: 20083
    00004e79: 	movl	0x218(%rsp), %eax
    00004e80: 	addl	%edx, %eax
    00004e82: 	cltq
    00004e84: 	mulsd	(%r14,%rax,8), %xmm4
    00004e8a: 	movq	0x220(%rsp), %rax
    00004e92: 	addsd	(%rax), %xmm4
    00004e96: 	movsd	%xmm4, (%rax)
    00004e9a: 	jmp	.Ltmp714 # Offset: 20122
.Ltmp649:
    00004e9f: 	movq	%rbx, 0x30(%rsp)
    00004ea4: 	movq	0x8(%rsp), %rdx
    00004ea9: 	movq	%r8, %rbx
    00004eac: 	movq	%rbp, %r10
    00004eaf: 	movq	0xa8(%rsp), %rax
    00004eb7: 	movq	0xb0(%rsp), %r8
    00004ebf: 	movq	%r12, %rbp
    00004ec2: 	movq	%rbx, %r12
    00004ec5: 	movq	%r9, %rbx
.Ltmp723:
    00004ec8: 	movq	(%rsp), %r9
    00004ecc: 	addq	$0x20, %rax
    00004ed0: 	movsd	(%rdx,%r9), %xmm1
    00004ed6: 	mulsd	(%r11), %xmm1
    00004edb: 	addsd	-0x20(%rax), %xmm1
    00004ee0: 	movq	0x18(%rsp), %r9
    00004ee5: 	movsd	%xmm1, -0x20(%rax)
    00004eea: 	movsd	(%rdx,%r13), %xmm0
    00004ef0: 	mulsd	(%r11), %xmm0
    00004ef5: 	addsd	-0x18(%rax), %xmm0
    00004efa: 	movsd	%xmm0, -0x18(%rax)
    00004eff: 	movsd	(%rdx,%r14), %xmm4
    00004f05: 	mulsd	(%r11), %xmm4
    00004f0a: 	addsd	-0x10(%rax), %xmm4
    00004f0f: 	movsd	%xmm4, -0x10(%rax)
    00004f14: 	movsd	(%rdx,%r15), %xmm3
    00004f1a: 	mulsd	(%r11), %xmm3
    00004f1f: 	addsd	-0x8(%rax), %xmm3
    00004f24: 	movsd	%xmm3, -0x8(%rax)
    00004f29: 	movsd	(%rdx,%r9), %xmm2
    00004f2f: 	mulsd	0x8(%r11), %xmm2
    00004f35: 	movq	0xd0(%rsp), %r9
    00004f3d: 	addsd	%xmm1, %xmm2
    00004f41: 	movsd	%xmm2, -0x20(%rax)
    00004f46: 	movsd	(%rdx,%r9), %xmm1
    00004f4c: 	mulsd	0x8(%r11), %xmm1
    00004f52: 	movq	0xd8(%rsp), %r9
    00004f5a: 	addsd	%xmm0, %xmm1
    00004f5e: 	movsd	%xmm1, -0x18(%rax)
    00004f63: 	movsd	(%rdx,%r9), %xmm0
    00004f69: 	mulsd	0x8(%r11), %xmm0
    00004f6f: 	movq	0xe0(%rsp), %r9
    00004f77: 	addsd	%xmm4, %xmm0
    00004f7b: 	movsd	%xmm0, -0x10(%rax)
    00004f80: 	movsd	(%rdx,%r9), %xmm4
    00004f86: 	mulsd	0x8(%r11), %xmm4
    00004f8c: 	addsd	%xmm3, %xmm4
    00004f90: 	movsd	%xmm4, -0x8(%rax)
    00004f95: 	movq	0x20(%rsp), %r9
    00004f9a: 	movsd	(%rdx,%r9), %xmm3
    00004fa0: 	mulsd	0x10(%r11), %xmm3
    00004fa6: 	movq	0xe8(%rsp), %r9
    00004fae: 	addsd	%xmm2, %xmm3
    00004fb2: 	movsd	%xmm3, -0x20(%rax)
    00004fb7: 	movsd	(%rdx,%r9), %xmm2
    00004fbd: 	mulsd	0x10(%r11), %xmm2
    00004fc3: 	movq	0xf0(%rsp), %r9
    00004fcb: 	addsd	%xmm1, %xmm2
    00004fcf: 	movsd	%xmm2, -0x18(%rax)
    00004fd4: 	movsd	(%rdx,%r9), %xmm1
    00004fda: 	mulsd	0x10(%r11), %xmm1
    00004fe0: 	movq	0xf8(%rsp), %r9
    00004fe8: 	addsd	%xmm0, %xmm1
    00004fec: 	movsd	%xmm1, -0x10(%rax)
    00004ff1: 	movsd	(%rdx,%r9), %xmm0
    00004ff7: 	movq	0x28(%rsp), %r9
    00004ffc: 	mulsd	0x10(%r11), %xmm0
    00005002: 	addsd	%xmm4, %xmm0
    00005006: 	movsd	%xmm0, -0x8(%rax)
    0000500b: 	movsd	(%rdx,%r9), %xmm4
    00005011: 	mulsd	0x18(%r11), %xmm4
    00005017: 	addsd	%xmm4, %xmm3
    0000501b: 	movsd	%xmm3, -0x20(%rax)
    00005020: 	movsd	(%rdx,%rdi), %xmm3
    00005025: 	mulsd	0x18(%r11), %xmm3
    0000502b: 	addsd	%xmm3, %xmm2
    0000502f: 	movsd	%xmm2, -0x18(%rax)
    00005034: 	movsd	(%rdx,%rsi), %xmm2
    00005039: 	mulsd	0x18(%r11), %xmm2
    0000503f: 	addsd	%xmm2, %xmm1
    00005043: 	movsd	%xmm1, -0x10(%rax)
    00005048: 	movsd	(%rdx,%rcx), %xmm1
    0000504d: 	mulsd	0x18(%r11), %xmm1
    00005053: 	addq	%r8, %rdx
    00005056: 	addsd	%xmm1, %xmm0
    0000505a: 	movsd	%xmm0, -0x8(%rax)
    0000505f: 	cmpq	%rax, 0x100(%rsp)
    00005067: 	jne	.Ltmp723 # Offset: 20583
    0000506d: 	movq	%r12, %rax
    00005070: 	movq	%r8, 0xb0(%rsp)
    00005078: 	movq	%rbx, %r9
    0000507b: 	movq	%rbp, %r12
    0000507e: 	movq	0x30(%rsp), %rbx
    00005083: 	movq	%r10, %rbp
    00005086: 	movq	%rax, %r8
    00005089: 	jmp	.Ltmp651 # Offset: 20617
.Ltmp653:
    0000508e: 	movq	(%rsp), %rsi
    00005092: 	movq	0x20(%rsp), %r13
    00005097: 	movq	0x18(%rsp), %rdi
    0000509c: 	movsd	(%rax,%rsi), %xmm0
    000050a1: 	mulsd	(%r11), %xmm0
    000050a6: 	addsd	(%rdx), %xmm0
    000050aa: 	movsd	%xmm0, (%rdx)
    000050ae: 	movsd	(%rax,%r13), %xmm1
    000050b4: 	mulsd	0x8(%r11), %xmm1
    000050ba: 	addsd	%xmm0, %xmm1
    000050be: 	movsd	%xmm1, (%rdx)
    000050c2: 	movsd	(%rax,%rdi), %xmm0
    000050c7: 	mulsd	0x10(%r11), %xmm0
    000050cd: 	movl	0xcc(%rsp), %edi
    000050d4: 	movl	%edi, 0x20(%rsp)
    000050d8: 	addsd	%xmm1, %xmm0
    000050dc: 	movsd	%xmm0, (%rdx)
    000050e0: 	movsd	(%rax,%r14), %xmm1
    000050e6: 	mulsd	0x18(%r11), %xmm1
    000050ec: 	addq	0x10(%rsp), %rax
    000050f1: 	addsd	%xmm1, %xmm0
    000050f5: 	movsd	%xmm0, (%rdx)
    000050f9: 	leal	0x1(%r15), %edx
    000050fd: 	cmpl	%edx, %edi
    000050ff: 	jle	.Ltmp652 # Offset: 20735
    00005105: 	movq	0xa8(%rsp), %rdi
    0000510d: 	movq	0x30(%rsp), %r10
    00005112: 	movsd	(%rax,%rsi), %xmm0
    00005117: 	mulsd	(%r11), %xmm0
    0000511c: 	leaq	0x8(%rdi,%r10), %rdx
    00005121: 	movq	0x18(%rsp), %rcx
    00005126: 	addsd	(%rdx), %xmm0
    0000512a: 	movsd	%xmm0, (%rdx)
    0000512e: 	movsd	(%rax,%r13), %xmm1
    00005134: 	mulsd	0x8(%r11), %xmm1
    0000513a: 	addsd	%xmm0, %xmm1
    0000513e: 	movsd	%xmm1, (%rdx)
    00005142: 	movsd	(%rax,%rcx), %xmm0
    00005147: 	mulsd	0x10(%r11), %xmm0
    0000514d: 	movl	0x20(%rsp), %ecx
    00005151: 	addsd	%xmm1, %xmm0
    00005155: 	movsd	%xmm0, (%rdx)
    00005159: 	movsd	(%rax,%r14), %xmm1
    0000515f: 	mulsd	0x18(%r11), %xmm1
    00005165: 	addq	0x10(%rsp), %rax
    0000516a: 	addsd	%xmm1, %xmm0
    0000516e: 	movsd	%xmm0, (%rdx)
    00005172: 	leal	0x2(%r15), %edx
    00005176: 	cmpl	%edx, %ecx
    00005178: 	jle	.Ltmp652 # Offset: 20856
    0000517e: 	movsd	(%rax,%rsi), %xmm0
    00005183: 	leaq	0x10(%rdi,%r10), %rdx
    00005188: 	mulsd	(%r11), %xmm0
    0000518d: 	addsd	(%rdx), %xmm0
    00005191: 	movq	0x18(%rsp), %rcx
    00005196: 	movsd	%xmm0, (%rdx)
    0000519a: 	movsd	(%rax,%r13), %xmm1
    000051a0: 	mulsd	0x8(%r11), %xmm1
    000051a6: 	addsd	%xmm0, %xmm1
    000051aa: 	movsd	%xmm1, (%rdx)
    000051ae: 	movsd	(%rax,%rcx), %xmm0
    000051b3: 	mulsd	0x10(%r11), %xmm0
    000051b9: 	movl	0x20(%rsp), %ecx
    000051bd: 	addsd	%xmm1, %xmm0
    000051c1: 	movsd	%xmm0, (%rdx)
    000051c5: 	movsd	(%rax,%r14), %xmm1
    000051cb: 	mulsd	0x18(%r11), %xmm1
    000051d1: 	addsd	%xmm1, %xmm0
    000051d5: 	movsd	%xmm0, (%rdx)
    000051d9: 	movq	0x10(%rsp), %rdx
    000051de: 	addq	%rax, %rdx
    000051e1: 	leal	0x3(%r15), %eax
    000051e5: 	cmpl	%eax, %ecx
    000051e7: 	jle	.Ltmp652 # Offset: 20967
    000051ed: 	leaq	0x18(%rdi,%r10), %rax
    000051f2: 	movsd	(%rdx,%rsi), %xmm0
    000051f7: 	mulsd	(%r11), %xmm0
    000051fc: 	movq	%r13, %rdi
    000051ff: 	addsd	(%rax), %xmm0
    00005203: 	movsd	%xmm0, (%rax)
    00005207: 	jmp	.Ltmp724 # Offset: 20999
.Ltmp632:
    0000520c: 	movq	(%rsp), %rdi
    00005210: 	movq	0x10(%rsp), %rsi
    00005215: 	movq	0x50(%rsp), %r10
    0000521a: 	movsd	(%rax,%rdi), %xmm0
    0000521f: 	mulsd	(%r9), %xmm0
    00005224: 	addsd	(%rdx), %xmm0
    00005228: 	movsd	%xmm0, (%rdx)
    0000522c: 	movsd	(%rax,%rsi), %xmm1
    00005231: 	mulsd	0x8(%r9), %xmm1
    00005237: 	movl	0xcc(%rsp), %esi
    0000523e: 	addsd	%xmm0, %xmm1
    00005242: 	movsd	%xmm1, (%rdx)
    00005246: 	movsd	(%rax,%r13), %xmm0
    0000524c: 	mulsd	0x10(%r9), %xmm0
    00005252: 	addsd	%xmm1, %xmm0
    00005256: 	movsd	%xmm0, (%rdx)
    0000525a: 	movsd	(%rax,%r14), %xmm1
    00005260: 	mulsd	0x18(%r9), %xmm1
    00005266: 	addq	%r10, %rax
    00005269: 	addsd	%xmm1, %xmm0
    0000526d: 	movsd	%xmm0, (%rdx)
    00005271: 	leal	0x1(%r15), %edx
    00005275: 	cmpl	%edx, %esi
    00005277: 	jle	.Ltmp631 # Offset: 21111
    0000527d: 	movq	0xa8(%rsp), %rcx
    00005285: 	movq	0x20(%rsp), %r11
    0000528a: 	movsd	(%rax,%rdi), %xmm0
    0000528f: 	mulsd	(%r9), %xmm0
    00005294: 	leaq	0x8(%rcx,%r11), %rdx
    00005299: 	movq	%rcx, 0x18(%rsp)
    0000529e: 	movq	0x10(%rsp), %rcx
    000052a3: 	addsd	(%rdx), %xmm0
    000052a7: 	movsd	%xmm0, (%rdx)
    000052ab: 	movsd	(%rax,%rcx), %xmm1
    000052b0: 	mulsd	0x8(%r9), %xmm1
    000052b6: 	addsd	%xmm0, %xmm1
    000052ba: 	movsd	%xmm1, (%rdx)
    000052be: 	movsd	(%rax,%r13), %xmm0
    000052c4: 	mulsd	0x10(%r9), %xmm0
    000052ca: 	addsd	%xmm1, %xmm0
    000052ce: 	movsd	%xmm0, (%rdx)
    000052d2: 	movsd	(%rax,%r14), %xmm1
    000052d8: 	mulsd	0x18(%r9), %xmm1
    000052de: 	addq	%r10, %rax
    000052e1: 	addsd	%xmm1, %xmm0
    000052e5: 	movsd	%xmm0, (%rdx)
    000052e9: 	leal	0x2(%r15), %edx
    000052ed: 	cmpl	%edx, %esi
    000052ef: 	jle	.Ltmp631 # Offset: 21231
    000052f5: 	movq	0x18(%rsp), %rcx
    000052fa: 	movsd	(%rax,%rdi), %xmm0
    000052ff: 	mulsd	(%r9), %xmm0
    00005304: 	leaq	0x10(%rcx,%r11), %rdx
    00005309: 	movq	0x10(%rsp), %rcx
    0000530e: 	addsd	(%rdx), %xmm0
    00005312: 	movsd	%xmm0, (%rdx)
    00005316: 	movsd	(%rax,%rcx), %xmm1
    0000531b: 	mulsd	0x8(%r9), %xmm1
    00005321: 	addsd	%xmm0, %xmm1
    00005325: 	movsd	%xmm1, (%rdx)
    00005329: 	movsd	(%rax,%r13), %xmm0
    0000532f: 	mulsd	0x10(%r9), %xmm0
    00005335: 	addsd	%xmm1, %xmm0
    00005339: 	movsd	%xmm0, (%rdx)
    0000533d: 	movsd	(%rax,%r14), %xmm1
    00005343: 	mulsd	0x18(%r9), %xmm1
    00005349: 	addsd	%xmm1, %xmm0
    0000534d: 	movsd	%xmm0, (%rdx)
    00005351: 	leaq	(%rax,%r10), %rdx
    00005355: 	leal	0x3(%r15), %eax
    00005359: 	cmpl	%eax, %esi
    0000535b: 	jle	.Ltmp631 # Offset: 21339
    00005361: 	movq	0x18(%rsp), %rcx
    00005366: 	movsd	(%rdx,%rdi), %xmm0
    0000536b: 	leaq	0x18(%rcx,%r11), %rax
    00005370: 	jmp	.Ltmp725 # Offset: 21360
.Ltmp628:
    00005375: 	movq	%r8, %r11
    00005378: 	movq	0xa8(%rsp), %rax
    00005380: 	movq	(%rsp), %r10
    00005384: 	movq	%rbx, 0x30(%rsp)
    00005389: 	movq	0x8(%rsp), %rdx
    0000538e: 	movq	0xb0(%rsp), %r8
    00005396: 	movq	%rbp, %rbx
    00005399: 	movq	%r12, %rbp
    0000539c: 	movq	%r11, %r12
.Ltmp726:
    0000539f: 	movsd	(%rdx,%r10), %xmm0
    000053a5: 	mulsd	(%r9), %xmm0
    000053aa: 	addq	$0x20, %rax
    000053ae: 	addsd	-0x20(%rax), %xmm0
    000053b3: 	movq	0x10(%rsp), %r11
    000053b8: 	movsd	%xmm0, -0x20(%rax)
    000053bd: 	movsd	(%rdx,%r11), %xmm1
    000053c3: 	movq	0x18(%rsp), %r11
    000053c8: 	mulsd	0x8(%r9), %xmm1
    000053ce: 	addsd	%xmm0, %xmm1
    000053d2: 	movsd	%xmm1, -0x20(%rax)
    000053d7: 	movsd	(%rdx,%r11), %xmm0
    000053dd: 	movq	0x20(%rsp), %r11
    000053e2: 	mulsd	0x10(%r9), %xmm0
    000053e8: 	addsd	%xmm1, %xmm0
    000053ec: 	movsd	%xmm0, -0x20(%rax)
    000053f1: 	movsd	(%rdx,%r11), %xmm1
    000053f7: 	mulsd	0x18(%r9), %xmm1
    000053fd: 	movq	0xd0(%rsp), %r11
    00005405: 	addsd	%xmm1, %xmm0
    00005409: 	movsd	%xmm0, -0x20(%rax)
    0000540e: 	movsd	(%rdx,%r13), %xmm0
    00005414: 	mulsd	(%r9), %xmm0
    00005419: 	addsd	-0x18(%rax), %xmm0
    0000541e: 	movsd	%xmm0, -0x18(%rax)
    00005423: 	movsd	(%rdx,%r11), %xmm1
    00005429: 	mulsd	0x8(%r9), %xmm1
    0000542f: 	movq	0xd8(%rsp), %r11
    00005437: 	addsd	%xmm0, %xmm1
    0000543b: 	movsd	%xmm1, -0x18(%rax)
    00005440: 	movsd	(%rdx,%r11), %xmm0
    00005446: 	mulsd	0x10(%r9), %xmm0
    0000544c: 	movq	0xe0(%rsp), %r11
    00005454: 	addsd	%xmm1, %xmm0
    00005458: 	movsd	%xmm0, -0x18(%rax)
    0000545d: 	movsd	(%rdx,%r11), %xmm1
    00005463: 	mulsd	0x18(%r9), %xmm1
    00005469: 	addsd	%xmm1, %xmm0
    0000546d: 	movsd	%xmm0, -0x18(%rax)
    00005472: 	movsd	(%rdx,%r14), %xmm0
    00005478: 	mulsd	(%r9), %xmm0
    0000547d: 	addsd	-0x10(%rax), %xmm0
    00005482: 	movq	0xe8(%rsp), %r11
    0000548a: 	movsd	%xmm0, -0x10(%rax)
    0000548f: 	movsd	(%rdx,%r11), %xmm1
    00005495: 	mulsd	0x8(%r9), %xmm1
    0000549b: 	movq	0xf0(%rsp), %r11
    000054a3: 	addsd	%xmm0, %xmm1
    000054a7: 	movsd	%xmm1, -0x10(%rax)
    000054ac: 	movsd	(%rdx,%r11), %xmm0
    000054b2: 	mulsd	0x10(%r9), %xmm0
    000054b8: 	movq	0xf8(%rsp), %r11
    000054c0: 	addsd	%xmm1, %xmm0
    000054c4: 	movsd	%xmm0, -0x10(%rax)
    000054c9: 	movsd	(%rdx,%r11), %xmm1
    000054cf: 	mulsd	0x18(%r9), %xmm1
    000054d5: 	addsd	%xmm1, %xmm0
    000054d9: 	movsd	%xmm0, -0x10(%rax)
    000054de: 	movsd	(%rdx,%r15), %xmm0
    000054e4: 	mulsd	(%r9), %xmm0
    000054e9: 	addsd	-0x8(%rax), %xmm0
    000054ee: 	movsd	%xmm0, -0x8(%rax)
    000054f3: 	movsd	(%rdx,%rdi), %xmm1
    000054f8: 	mulsd	0x8(%r9), %xmm1
    000054fe: 	addsd	%xmm0, %xmm1
    00005502: 	movsd	%xmm1, -0x8(%rax)
    00005507: 	movsd	(%rdx,%rsi), %xmm0
    0000550c: 	mulsd	0x10(%r9), %xmm0
    00005512: 	addsd	%xmm1, %xmm0
    00005516: 	movsd	%xmm0, -0x8(%rax)
    0000551b: 	movsd	(%rdx,%rcx), %xmm1
    00005520: 	mulsd	0x18(%r9), %xmm1
    00005526: 	addq	%r8, %rdx
    00005529: 	addsd	%xmm1, %xmm0
    0000552d: 	movsd	%xmm0, -0x8(%rax)
    00005532: 	cmpq	0x110(%rsp), %rax
    0000553a: 	jne	.Ltmp726 # Offset: 21818
    00005540: 	movq	%r12, %rax
    00005543: 	movq	%r8, 0xb0(%rsp)
    0000554b: 	movq	%rbp, %r12
    0000554e: 	movq	%rbx, %rbp
    00005551: 	movq	%r10, (%rsp)
    00005555: 	movq	0x30(%rsp), %rbx
    0000555a: 	movq	%rax, %r8
    0000555d: 	jmp	.Ltmp630 # Offset: 21853
.Ltmp616:
    00005562: 	movq	0x50(%rsp), %rax
    00005567: 	movq	0x68(%rsp), %rcx
    0000556c: 	movq	0xd0(%rsp), %rdi
    00005574: 	movq	0x48(%rsp), %r11
    00005579: 	movq	0x100(%rsp), %r8
    00005581: 	movq	(%rsp), %r9
    00005585: 	leaq	(%r14,%rax), %rdx
    00005589: 	movq	%r15, %rax
.Ltmp727:
    0000558c: 	movsd	(%rdx), %xmm0
    00005590: 	addq	$0x20, %rax
    00005594: 	mulsd	%xmm4, %xmm0
    00005598: 	addsd	-0x20(%rax), %xmm0
    0000559d: 	movsd	%xmm0, -0x20(%rax)
    000055a2: 	movsd	(%rdx,%r9,8), %xmm0
    000055a8: 	mulsd	%xmm4, %xmm0
    000055ac: 	addsd	-0x18(%rax), %xmm0
    000055b1: 	movsd	%xmm0, -0x18(%rax)
    000055b6: 	movsd	(%rdx,%rdi), %xmm0
    000055bb: 	mulsd	%xmm4, %xmm0
    000055bf: 	addsd	-0x10(%rax), %xmm0
    000055c4: 	movsd	%xmm0, -0x10(%rax)
    000055c9: 	movsd	(%rdx,%r8), %xmm0
    000055cf: 	addq	%rcx, %rdx
    000055d2: 	mulsd	%xmm4, %xmm0
    000055d6: 	addsd	-0x8(%rax), %xmm0
    000055db: 	movsd	%xmm0, -0x8(%rax)
    000055e0: 	cmpq	%rax, 0x70(%rsp)
    000055e5: 	jne	.Ltmp727 # Offset: 21989
    000055e7: 	movq	%r11, 0x48(%rsp)
    000055ec: 	jmp	.Ltmp618 # Offset: 21996
.Ltmp620:
    000055f1: 	movq	0x108(%rsp), %rdi
    000055f9: 	movl	0xcc(%rsp), %r9d
    00005601: 	movsd	(%r14,%rdi,8), %xmm0
    00005607: 	mulsd	%xmm4, %xmm0
    0000560b: 	addsd	(%rdx), %xmm0
    0000560f: 	movsd	%xmm0, (%rdx)
    00005613: 	leal	0x1(%rax), %edx
    00005616: 	cmpl	%edx, %r9d
    00005619: 	jle	.Ltmp619 # Offset: 22041
    0000561f: 	movl	0xd8(%rsp), %edi
    00005626: 	movl	0x84(%rsp), %r10d
    0000562e: 	leaq	0x8(%r15,%r8), %rcx
    00005633: 	addl	%r10d, %edi
    00005636: 	leal	(%rdi,%rsi), %edx
    00005639: 	movslq	%edx, %rdx
    0000563c: 	movsd	(%r14,%rdx,8), %xmm0
    00005642: 	leal	0x2(%rax), %edx
    00005645: 	mulsd	%xmm4, %xmm0
    00005649: 	addsd	(%rcx), %xmm0
    0000564d: 	movsd	%xmm0, (%rcx)
    00005651: 	cmpl	%edx, %r9d
    00005654: 	jle	.Ltmp619 # Offset: 22100
    0000565a: 	addl	%r10d, %edi
    0000565d: 	leaq	0x10(%r15,%r8), %rcx
    00005662: 	addl	$0x3, %eax
    00005665: 	leal	(%rdi,%rsi), %edx
    00005668: 	movslq	%edx, %rdx
    0000566b: 	movsd	(%r14,%rdx,8), %xmm0
    00005671: 	mulsd	%xmm4, %xmm0
    00005675: 	addsd	(%rcx), %xmm0
    00005679: 	movsd	%xmm0, (%rcx)
    0000567d: 	cmpl	%eax, %r9d
    00005680: 	jle	.Ltmp619 # Offset: 22144
    00005686: 	leaq	0x18(%r15,%r8), %rdx
    0000568b: 	leal	(%r10,%rdi), %eax
    0000568f: 	jmp	.Ltmp728 # Offset: 22159
.Ltmp577:
    00005694: 	movq	0xa8(%rsp), %rax
    0000569c: 	movq	%rbx, %rdx
.Ltmp729:
    0000569f: 	movsd	(%rdx), %xmm0
    000056a3: 	addq	$0x8, %rax
    000056a7: 	addq	%rdi, %rdx
    000056aa: 	mulsd	%xmm1, %xmm0
    000056ae: 	addsd	-0x8(%rax), %xmm0
    000056b3: 	movsd	%xmm0, -0x8(%rax)
    000056b8: 	cmpq	%r13, %rax
    000056bb: 	jne	.Ltmp729 # Offset: 22203
    000056bd: 	jmp	.Ltmp579 # Offset: 22205
.Ltmp553:
    000056c2: 	movq	0xa8(%rsp), %rax
    000056ca: 	movq	%r12, %rdx
.Ltmp730:
    000056cd: 	movsd	(%rdx), %xmm0
    000056d1: 	mulsd	(%rdi), %xmm0
    000056d5: 	addq	$0x8, %rax
    000056d9: 	addq	%r8, %rdx
    000056dc: 	addsd	-0x8(%rax), %xmm0
    000056e1: 	movsd	%xmm0, -0x8(%rax)
    000056e6: 	cmpq	0x8(%rsp), %rax
    000056eb: 	jne	.Ltmp730 # Offset: 22251
    000056ed: 	jmp	.Ltmp555 # Offset: 22253
.Ltmp595:
    000056f2: 	movapd	%xmm2, %xmm4
    000056f6: 	movapd	%xmm2, %xmm6
    000056fa: 	movapd	%xmm2, %xmm5
    000056fe: 	xorl	%eax, %eax
    00005700: 	movapd	%xmm2, %xmm8
    00005705: 	movapd	%xmm2, %xmm7
    00005709: 	movapd	%xmm2, %xmm10
    0000570e: 	movapd	%xmm2, %xmm9
    00005713: 	jmp	.Ltmp731 # Offset: 22291
.Ltmp585:
    00005718: 	pxor	%xmm3, %xmm3
    0000571c: 	xorl	%eax, %eax
    0000571e: 	movapd	%xmm3, %xmm5
    00005722: 	movapd	%xmm3, %xmm4
    00005726: 	jmp	.Ltmp732 # Offset: 22310
.Ltmp615:
    0000572b: 	xorl	%eax, %eax
    0000572d: 	jmp	.Ltmp733 # Offset: 22317
.Ltmp605:
    00005732: 	movapd	%xmm2, %xmm4
    00005736: 	movapd	%xmm2, %xmm6
    0000573a: 	movapd	%xmm2, %xmm5
    0000573e: 	xorl	%eax, %eax
    00005740: 	movapd	%xmm2, %xmm8
    00005745: 	movapd	%xmm2, %xmm7
    00005749: 	movapd	%xmm2, %xmm10
    0000574e: 	movapd	%xmm2, %xmm9
    00005753: 	jmp	.Ltmp734 # Offset: 22355
.Ltmp627:
    00005758: 	leaq	0x20(%r9), %rdi
    0000575c: 	movq	0x8(%rsp), %rax
    00005761: 	xorl	%r15d, %r15d
    00005764: 	movq	%rdi, 0xc0(%rsp)
    0000576c: 	jmp	.Ltmp735 # Offset: 22380
.Ltmp718:
    00005771: 	movq	0xc0(%rsp), %r15
.Ltmp710:
    00005779: 	xorl	%eax, %eax
.Ltmp738:
    0000577b: 	movq	0x1e0(%rsp), %rbx
    00005783: 	movsd	(%rbx,%rax,8), %xmm1
    00005788: 	movq	0xa8(%rsp), %rbx
    00005790: 	movapd	%xmm1, %xmm2
    00005794: 	andpd	DATAat0x24940(%rip), %xmm2
    0000579c: 	movapd	%xmm1, %xmm0
    000057a0: 	comisd	DATAat0x24978(%rip), %xmm2
    000057a8: 	subsd	(%rbx,%rax,8), %xmm0
    000057ad: 	jbe	.Ltmp736 # Offset: 22445
    000057af: 	divsd	%xmm1, %xmm0
.Ltmp736:
    000057b3: 	andpd	DATAat0x24940(%rip), %xmm0
    000057bb: 	movsd	DATAat0x24980(%rip), %xmm4
    000057c3: 	comisd	%xmm0, %xmm4
    000057c7: 	jbe	.Ltmp737 # Offset: 22471
    000057cd: 	addq	$0x1, %rax
    000057d1: 	cmpq	$0x320, %rax
    000057d7: 	jne	.Ltmp738 # Offset: 22487
.Ltmp819:
    000057d9: 	movq	0xa8(%rsp), %rax
    000057e1: 	movq	$0x0, (%rax)
    000057e8: 	movq	0xa0(%rsp), %rbx
    000057f0: 	movq	$0x0, -0x10(%rbx)
    000057f8: 	movq	0x40(%rsp), %rdi
    000057fd: 	andq	$-0x8, %rdi
    00005801: 	subq	%rdi, %rax
    00005804: 	movq	%rax, %rcx
    00005807: 	xorl	%eax, %eax
    00005809: 	addl	$0x1900, %ecx
    0000580f: 	shrl	$0x3, %ecx
    00005812: 	rep		stosq	%rax, %es:(%rdi)
    00005815: 	movl	0x84(%rsp), %eax
    0000581c: 	testl	%eax, %eax
    0000581e: 	jle	.Ltmp739 # Offset: 22558
    00005824: 	movl	0xcc(%rsp), %eax
    0000582b: 	testl	%eax, %eax
    0000582d: 	jle	.Ltmp739 # Offset: 22573
    00005833: 	movslq	0x84(%rsp), %rbx
    0000583b: 	subl	$0x1, %eax
    0000583e: 	movq	%r15, %r13
    00005841: 	movq	%r14, 0x48(%rsp)
    00005846: 	movq	$0x0, 0x30(%rsp)
    0000584f: 	movq	%rbx, (%rsp)
    00005853: 	shlq	$0x3, %rbx
    00005857: 	movq	%rbx, 0x20(%rsp)
    0000585c: 	movq	0x40(%rsp), %rbx
    00005861: 	movl	$0x4, 0x38(%rsp)
    00005869: 	leaq	(%rbx,%rax,8), %rax
    0000586d: 	movq	%rax, 0x10(%rsp)
.Ltmp746:
    00005872: 	movq	0x30(%rsp), %rax
    00005877: 	movl	0x84(%rsp), %ebx
    0000587e: 	movq	0x48(%rsp), %rcx
    00005883: 	movq	0xa8(%rsp), %r11
    0000588b: 	leal	0x258(%rax), %r12d
    00005892: 	movl	%eax, 0x50(%rsp)
    00005896: 	cmpl	%ebx, %r12d
    00005899: 	movl	%eax, 0x18(%rsp)
    0000589d: 	cmovgl	%ebx, %r12d
    000058a1: 	xorl	%ebp, %ebp
    000058a3: 	leal	-0x3(%r12), %ebx
    000058a8: 	movl	%ebx, 0x8(%rsp)
    000058ac: 	movl	$0xfffffffc, %ebx
    000058b1: 	subl	%eax, %ebx
    000058b3: 	movl	%ebx, %eax
    000058b5: 	movl	0x38(%rsp), %ebx
    000058b9: 	addl	%r12d, %eax
    000058bc: 	shrl	$0x2, %eax
    000058bf: 	leal	0x1(%rax), %edi
    000058c2: 	leal	(%rbx,%rax,4), %eax
    000058c5: 	movl	%eax, 0x28(%rsp)
    000058c9: 	nopl	(%rax) # Size: 7
.Ltmp745:
    000058d0: 	movsd	(%r11), %xmm0
    000058d5: 	movl	0x18(%rsp), %ebx
    000058d9: 	leaq	(%r14,%rbp,8), %r8
    000058dd: 	cmpl	%ebx, 0x8(%rsp)
    000058e1: 	jle	.Ltmp740 # Offset: 22753
    000058e7: 	movq	%xmm0, %xmm1
    000058eb: 	xorl	%eax, %eax
    000058ed: 	pxor	%xmm2, %xmm2
    000058f1: 	xorl	%edx, %edx
    000058f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp741:
    000058f8: 	movupd	(%rcx,%rax), %xmm4
    000058fd: 	movupd	(%r13,%rax), %xmm0
    00005904: 	addl	$0x1, %edx
    00005907: 	mulpd	%xmm4, %xmm0
    0000590b: 	movupd	0x10(%rcx,%rax), %xmm4
    00005911: 	addpd	%xmm0, %xmm1
    00005915: 	movupd	0x10(%r13,%rax), %xmm0
    0000591c: 	addq	$0x20, %rax
    00005920: 	mulpd	%xmm4, %xmm0
    00005924: 	addpd	%xmm0, %xmm2
    00005928: 	cmpl	%edi, %edx
    0000592a: 	jb	.Ltmp741 # Offset: 22826
    0000592c: 	movapd	%xmm1, %xmm0
    00005930: 	movapd	%xmm2, %xmm5
    00005934: 	unpckhpd	%xmm1, %xmm1
    00005938: 	movl	0x28(%rsp), %eax
    0000593c: 	unpckhpd	%xmm2, %xmm2
    00005940: 	movapd	%xmm1, %xmm3
    00005944: 	movapd	%xmm2, %xmm4
.Ltmp805:
    00005948: 	cmpl	%eax, %r12d
    0000594b: 	jle	.Ltmp742 # Offset: 22859
    0000594d: 	movl	%r12d, %ebx
    00005950: 	subl	%eax, %ebx
    00005952: 	cmpl	$0x1, %ebx
    00005955: 	je	.Ltmp743 # Offset: 22869
    00005957: 	movslq	%eax, %rdx
    0000595a: 	leaq	(%rbp,%rdx), %rsi
    0000595f: 	leaq	(%r15,%rdx,8), %r9
    00005963: 	xorl	%edx, %edx
    00005965: 	leaq	(%r14,%rsi,8), %r10
    00005969: 	movl	%ebx, %esi
    0000596b: 	shrl	%esi
    0000596d: 	shlq	$0x4, %rsi
    00005971: 	nopl	(%rax) # Size: 7
.Ltmp744:
    00005978: 	movupd	(%r9,%rdx), %xmm2
    0000597e: 	movupd	(%r10,%rdx), %xmm7
    00005984: 	addq	$0x10, %rdx
    00005988: 	mulpd	%xmm7, %xmm2
    0000598c: 	addsd	%xmm2, %xmm0
    00005990: 	unpckhpd	%xmm2, %xmm2
    00005994: 	addsd	%xmm2, %xmm0
    00005998: 	cmpq	%rsi, %rdx
    0000599b: 	jne	.Ltmp744 # Offset: 22939
    0000599d: 	movl	%ebx, %edx
    0000599f: 	andl	$-0x2, %edx
    000059a2: 	addl	%edx, %eax
    000059a4: 	cmpl	%ebx, %edx
    000059a6: 	je	.Ltmp742 # Offset: 22950
.Ltmp743:
    000059a8: 	cltq
    000059aa: 	movsd	(%r15,%rax,8), %xmm1
    000059b0: 	mulsd	(%r8,%rax,8), %xmm1
    000059b6: 	addsd	%xmm1, %xmm0
.Ltmp742:
    000059ba: 	addsd	%xmm0, %xmm3
    000059be: 	addq	$0x8, %r11
    000059c2: 	addq	0x20(%rsp), %rcx
    000059c7: 	addq	(%rsp), %rbp
    000059cb: 	movapd	%xmm3, %xmm1
    000059cf: 	addsd	%xmm5, %xmm1
    000059d3: 	addsd	%xmm4, %xmm1
    000059d7: 	movsd	%xmm1, -0x8(%r11)
    000059dd: 	cmpq	%r11, 0x10(%rsp)
    000059e2: 	jne	.Ltmp745 # Offset: 23010
    000059e8: 	addq	$0x258, 0x30(%rsp)
    000059f1: 	addq	$0x12c0, %r13
    000059f8: 	movq	0x30(%rsp), %rax
    000059fd: 	addl	$0x258, 0x38(%rsp)
    00005a05: 	addq	$0x12c0, 0x48(%rsp)
    00005a0e: 	cmpl	%eax, 0x84(%rsp)
    00005a15: 	jg	.Ltmp746 # Offset: 23061
.Ltmp739:
    00005a1b: 	xorl	%eax, %eax
.Ltmp749:
    00005a1d: 	movq	0x1e0(%rsp), %rbx
    00005a25: 	movsd	(%rbx,%rax,8), %xmm1
    00005a2a: 	movq	0xa8(%rsp), %rbx
    00005a32: 	movapd	%xmm1, %xmm2
    00005a36: 	andpd	DATAat0x24940(%rip), %xmm2
    00005a3e: 	movapd	%xmm1, %xmm0
    00005a42: 	comisd	DATAat0x24978(%rip), %xmm2
    00005a4a: 	subsd	(%rbx,%rax,8), %xmm0
    00005a4f: 	jbe	.Ltmp747 # Offset: 23119
    00005a51: 	divsd	%xmm1, %xmm0
.Ltmp747:
    00005a55: 	andpd	DATAat0x24940(%rip), %xmm0
    00005a5d: 	movsd	DATAat0x24980(%rip), %xmm4
    00005a65: 	comisd	%xmm0, %xmm4
    00005a69: 	jbe	.Ltmp748 # Offset: 23145
    00005a6f: 	addq	$0x1, %rax
    00005a73: 	cmpq	$0x320, %rax
    00005a79: 	jne	.Ltmp749 # Offset: 23161
.Ltmp818:
    00005a7b: 	movq	0xa8(%rsp), %rax
    00005a83: 	movq	$0x0, (%rax)
    00005a8a: 	movq	0xa0(%rsp), %rbx
    00005a92: 	movq	$0x0, -0x10(%rbx)
    00005a9a: 	movq	0x40(%rsp), %rdi
    00005a9f: 	andq	$-0x8, %rdi
    00005aa3: 	subq	%rdi, %rax
    00005aa6: 	movq	%rax, %rcx
    00005aa9: 	xorl	%eax, %eax
    00005aab: 	addl	$0x1900, %ecx
    00005ab1: 	shrl	$0x3, %ecx
    00005ab4: 	rep		stosq	%rax, %es:(%rdi)
    00005ab7: 	movl	0x84(%rsp), %eax
    00005abe: 	testl	%eax, %eax
    00005ac0: 	jle	.Ltmp750 # Offset: 23232
    00005ac6: 	movl	0x84(%rsp), %r11d
    00005ace: 	movl	0xcc(%rsp), %eax
    00005ad5: 	leal	-0x7(%r11), %r12d
    00005ad9: 	testl	%eax, %eax
    00005adb: 	jle	.Ltmp750 # Offset: 23259
    00005ae1: 	movslq	%r11d, %rbx
    00005ae4: 	subl	$0x1, %eax
    00005ae7: 	leal	-0x8(%r11), %ecx
    00005aeb: 	movq	%r14, 0x10(%rsp)
    00005af0: 	movq	%rbx, (%rsp)
    00005af4: 	shrl	$0x3, %ecx
    00005af7: 	pxor	%xmm5, %xmm5
    00005afb: 	leaq	(,%rbx,8), %r13
    00005b03: 	movq	0x40(%rsp), %rbx
    00005b08: 	movl	$0x0, 0x18(%rsp)
    00005b10: 	addl	$0x1, %ecx
    00005b13: 	leal	(,%rcx,8), %ebp
    00005b1a: 	leaq	(%rbx,%rax,8), %rax
    00005b1e: 	movq	%rax, 0x8(%rsp)
.Ltmp757:
    00005b23: 	addl	$0x258, 0x18(%rsp)
    00005b2b: 	movq	0x10(%rsp), %rsi
    00005b30: 	xorl	%r14d, %r14d
    00005b33: 	movq	0xa8(%rsp), %r10
    00005b3b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp756:
    00005b40: 	movsd	(%r10), %xmm0
    00005b45: 	testl	%r12d, %r12d
    00005b48: 	jle	.Ltmp751 # Offset: 23368
    00005b4e: 	pxor	%xmm1, %xmm1
    00005b52: 	movq	%xmm0, %xmm4
    00005b56: 	movq	%r15, %rdx
    00005b59: 	movq	%rsi, %rax
    00005b5c: 	xorl	%edi, %edi
    00005b5e: 	movapd	%xmm1, %xmm2
    00005b62: 	movapd	%xmm1, %xmm3
    00005b66: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp752:
    00005b70: 	movupd	(%rax), %xmm6
    00005b74: 	movupd	(%rdx), %xmm0
    00005b78: 	addl	$0x1, %edi
    00005b7b: 	addq	$0x40, %rdx
    00005b7f: 	movupd	0x20(%rax), %xmm7
    00005b84: 	addq	$0x40, %rax
    00005b88: 	mulpd	%xmm6, %xmm0
    00005b8c: 	movupd	-0x30(%rax), %xmm6
    00005b91: 	addpd	%xmm0, %xmm4
    00005b95: 	movupd	-0x30(%rdx), %xmm0
    00005b9a: 	mulpd	%xmm6, %xmm0
    00005b9e: 	movupd	-0x10(%rax), %xmm6
    00005ba3: 	addpd	%xmm0, %xmm3
    00005ba7: 	movupd	-0x20(%rdx), %xmm0
    00005bac: 	mulpd	%xmm7, %xmm0
    00005bb0: 	addpd	%xmm0, %xmm2
    00005bb4: 	movupd	-0x10(%rdx), %xmm0
    00005bb9: 	mulpd	%xmm6, %xmm0
    00005bbd: 	addpd	%xmm0, %xmm1
    00005bc1: 	cmpl	%ecx, %edi
    00005bc3: 	jb	.Ltmp752 # Offset: 23491
    00005bc5: 	movapd	%xmm4, %xmm0
    00005bc9: 	movapd	%xmm3, %xmm8
    00005bce: 	unpckhpd	%xmm4, %xmm4
    00005bd2: 	unpckhpd	%xmm3, %xmm3
    00005bd6: 	movapd	%xmm2, %xmm9
    00005bdb: 	movapd	%xmm1, %xmm10
    00005be0: 	unpckhpd	%xmm2, %xmm2
    00005be4: 	unpckhpd	%xmm1, %xmm1
    00005be8: 	movapd	%xmm4, %xmm7
    00005bec: 	movapd	%xmm3, %xmm6
    00005bf0: 	movapd	%xmm2, %xmm4
    00005bf4: 	movapd	%xmm1, %xmm3
    00005bf8: 	cmpl	%ebp, %r11d
    00005bfb: 	jle	.Ltmp753 # Offset: 23547
    00005c01: 	movl	%ebp, %eax
.Ltmp806:
    00005c03: 	movl	%r11d, %edx
    00005c06: 	movl	$0x1, %ebx
    00005c0b: 	subl	%eax, %edx
    00005c0d: 	cmpl	%eax, %r11d
    00005c10: 	cmovgl	%edx, %ebx
    00005c13: 	cmpl	$0x1, %edx
    00005c16: 	je	.Ltmp754 # Offset: 23574
    00005c18: 	cmpl	%eax, %r11d
    00005c1b: 	jle	.Ltmp754 # Offset: 23579
    00005c1d: 	movslq	%eax, %rdx
    00005c20: 	movq	0x10(%rsp), %r8
    00005c25: 	leaq	(%r14,%rdx), %rdi
    00005c29: 	leaq	(%r8,%rdi,8), %r9
    00005c2d: 	movl	%ebx, %edi
    00005c2f: 	leaq	(%r15,%rdx,8), %r8
    00005c33: 	xorl	%edx, %edx
    00005c35: 	shrl	%edi
    00005c37: 	shlq	$0x4, %rdi
    00005c3b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp755:
    00005c40: 	movupd	(%r8,%rdx), %xmm1
    00005c46: 	movupd	(%r9,%rdx), %xmm2
    00005c4c: 	addq	$0x10, %rdx
    00005c50: 	mulpd	%xmm2, %xmm1
    00005c54: 	addsd	%xmm1, %xmm0
    00005c58: 	unpckhpd	%xmm1, %xmm1
    00005c5c: 	addsd	%xmm1, %xmm0
    00005c60: 	cmpq	%rdi, %rdx
    00005c63: 	jne	.Ltmp755 # Offset: 23651
    00005c65: 	movl	%ebx, %edx
    00005c67: 	andl	$-0x2, %edx
    00005c6a: 	addl	%edx, %eax
    00005c6c: 	cmpl	%ebx, %edx
    00005c6e: 	je	.Ltmp753 # Offset: 23662
.Ltmp754:
    00005c70: 	cltq
    00005c72: 	movsd	(%r15,%rax,8), %xmm1
    00005c78: 	mulsd	(%rsi,%rax,8), %xmm1
    00005c7d: 	addsd	%xmm1, %xmm0
.Ltmp753:
    00005c81: 	addsd	%xmm7, %xmm0
    00005c85: 	addq	$0x8, %r10
    00005c89: 	addq	%r13, %rsi
    00005c8c: 	addq	(%rsp), %r14
    00005c90: 	addsd	%xmm8, %xmm0
    00005c95: 	addsd	%xmm6, %xmm0
    00005c99: 	addsd	%xmm9, %xmm0
    00005c9e: 	addsd	%xmm4, %xmm0
    00005ca2: 	addsd	%xmm10, %xmm0
    00005ca7: 	addsd	%xmm3, %xmm0
    00005cab: 	movsd	%xmm0, -0x8(%r10)
    00005cb1: 	cmpq	0x8(%rsp), %r10
    00005cb6: 	jne	.Ltmp756 # Offset: 23734
    00005cbc: 	cmpl	0x18(%rsp), %r11d
    00005cc1: 	jg	.Ltmp757 # Offset: 23745
    00005cc7: 	movq	0x10(%rsp), %r14
.Ltmp750:
    00005ccc: 	xorl	%eax, %eax
.Ltmp760:
    00005cce: 	movq	0x1e0(%rsp), %rbx
    00005cd6: 	movsd	(%rbx,%rax,8), %xmm1
    00005cdb: 	movq	0xa8(%rsp), %rbx
    00005ce3: 	movapd	%xmm1, %xmm2
    00005ce7: 	andpd	DATAat0x24940(%rip), %xmm2
    00005cef: 	movapd	%xmm1, %xmm0
    00005cf3: 	comisd	DATAat0x24978(%rip), %xmm2
    00005cfb: 	subsd	(%rbx,%rax,8), %xmm0
    00005d00: 	jbe	.Ltmp758 # Offset: 23808
    00005d02: 	divsd	%xmm1, %xmm0
.Ltmp758:
    00005d06: 	andpd	DATAat0x24940(%rip), %xmm0
    00005d0e: 	movsd	DATAat0x24980(%rip), %xmm4
    00005d16: 	comisd	%xmm0, %xmm4
    00005d1a: 	jbe	.Ltmp759 # Offset: 23834
    00005d20: 	addq	$0x1, %rax
    00005d24: 	cmpq	$0x320, %rax
    00005d2a: 	jne	.Ltmp760 # Offset: 23850
.Ltmp817:
    00005d2c: 	movq	0xa8(%rsp), %rax
    00005d34: 	movq	$0x0, (%rax)
    00005d3b: 	movq	0xa0(%rsp), %rbx
    00005d43: 	movq	$0x0, -0x10(%rbx)
    00005d4b: 	movq	0x40(%rsp), %rdi
    00005d50: 	andq	$-0x8, %rdi
    00005d54: 	subq	%rdi, %rax
    00005d57: 	movq	%rax, %rcx
    00005d5a: 	xorl	%eax, %eax
    00005d5c: 	addl	$0x1900, %ecx
    00005d62: 	shrl	$0x3, %ecx
    00005d65: 	rep		stosq	%rax, %es:(%rdi)
    00005d68: 	movl	0xcc(%rsp), %edx
    00005d6f: 	testl	%edx, %edx
    00005d71: 	jle	.Ltmp761 # Offset: 23921
    00005d77: 	movl	0x84(%rsp), %ebx
    00005d7e: 	testl	%ebx, %ebx
    00005d80: 	jle	.Ltmp761 # Offset: 23936
    00005d86: 	movq	$0x0, 0x58(%rsp)
    00005d8f: 	leal	(%rbx,%rbx,2), %eax
    00005d92: 	pxor	%xmm4, %xmm4
    00005d96: 	movq	$0x0, 0x48(%rsp)
    00005d9f: 	shll	$0x2, %eax
    00005da2: 	cltq
    00005da4: 	movq	%rax, 0x60(%rsp)
    00005da9: 	movslq	%ebx, %rax
    00005dac: 	movq	%rax, 0x18(%rsp)
.Ltmp770:
    00005db1: 	movq	0x58(%rsp), %rdi
    00005db6: 	movl	0xcc(%rsp), %ebx
    00005dbd: 	movl	%edi, %eax
    00005dbf: 	addl	$0xc, %eax
    00005dc2: 	cmpl	%ebx, %eax
    00005dc4: 	cmovgl	%ebx, %eax
    00005dc7: 	cmpl	%edi, %eax
    00005dc9: 	jle	.Ltmp762 # Offset: 24009
    00005dcf: 	movq	%rdi, %rbx
    00005dd2: 	movq	0xa8(%rsp), %rdi
    00005dda: 	movq	%r15, %r12
    00005ddd: 	movq	%r14, %r13
    00005de0: 	subl	%ebx, %eax
    00005de2: 	movl	$0x4, 0x30(%rsp)
    00005dea: 	movq	$0x0, 0x28(%rsp)
    00005df3: 	subl	$0x1, %eax
    00005df6: 	leaq	(%rdi,%rbx,8), %rdi
    00005dfa: 	addq	%rbx, %rax
    00005dfd: 	movq	0x40(%rsp), %rbx
    00005e02: 	movq	%rdi, 0x50(%rsp)
    00005e07: 	leaq	(%rbx,%rax,8), %rax
    00005e0b: 	movq	%rax, 0x10(%rsp)
.Ltmp769:
    00005e10: 	movq	0x28(%rsp), %rax
    00005e15: 	movl	0x84(%rsp), %ebx
    00005e1c: 	movq	0x50(%rsp), %r10
    00005e21: 	leal	0x74(%rax), %ebp
    00005e24: 	movl	%eax, 0x38(%rsp)
    00005e28: 	cmpl	%ebx, %ebp
    00005e2a: 	movl	%eax, 0x8(%rsp)
    00005e2e: 	cmovgl	%ebx, %ebp
    00005e31: 	leal	-0x3(%rbp), %ebx
    00005e34: 	movl	%ebx, (%rsp)
    00005e37: 	movl	$0xfffffffc, %ebx
    00005e3c: 	subl	%eax, %ebx
    00005e3e: 	movl	%ebx, %eax
    00005e40: 	movl	0x30(%rsp), %ebx
    00005e44: 	addl	%ebp, %eax
    00005e46: 	shrl	$0x2, %eax
    00005e49: 	leal	0x1(%rax), %esi
    00005e4c: 	leal	(%rbx,%rax,4), %eax
    00005e4f: 	movq	0x48(%rsp), %rbx
    00005e54: 	movl	%eax, 0x20(%rsp)
    00005e58: 	nopl	(%rax,%rax) # Size: 8
.Ltmp768:
    00005e60: 	leaq	(,%rbx,8), %rcx
    00005e68: 	movsd	(%r10), %xmm0
    00005e6d: 	movl	0x8(%rsp), %edx
    00005e71: 	leaq	(%r14,%rcx), %rdi
    00005e75: 	cmpl	%edx, (%rsp)
    00005e78: 	jle	.Ltmp763 # Offset: 24184
    00005e7e: 	addq	%r13, %rcx
    00005e81: 	movq	%xmm0, %xmm1
    00005e85: 	xorl	%eax, %eax
    00005e87: 	xorl	%edx, %edx
    00005e89: 	pxor	%xmm2, %xmm2
    00005e8d: 	nopl	(%rax) # Size: 3
.Ltmp764:
    00005e90: 	movupd	(%r12,%rax), %xmm0
    00005e96: 	movupd	(%rcx,%rax), %xmm5
    00005e9b: 	addl	$0x1, %edx
    00005e9e: 	movupd	0x10(%rcx,%rax), %xmm7
    00005ea4: 	mulpd	%xmm5, %xmm0
    00005ea8: 	addpd	%xmm0, %xmm1
    00005eac: 	movupd	0x10(%r12,%rax), %xmm0
    00005eb3: 	addq	$0x20, %rax
    00005eb7: 	mulpd	%xmm7, %xmm0
    00005ebb: 	addpd	%xmm0, %xmm2
    00005ebf: 	cmpl	%esi, %edx
    00005ec1: 	jb	.Ltmp764 # Offset: 24257
    00005ec3: 	movapd	%xmm1, %xmm0
    00005ec7: 	movapd	%xmm2, %xmm6
    00005ecb: 	unpckhpd	%xmm1, %xmm1
    00005ecf: 	movl	0x20(%rsp), %eax
    00005ed3: 	unpckhpd	%xmm2, %xmm2
    00005ed7: 	movapd	%xmm1, %xmm3
    00005edb: 	movapd	%xmm2, %xmm5
.Ltmp803:
    00005edf: 	cmpl	%eax, %ebp
    00005ee1: 	jle	.Ltmp765 # Offset: 24289
    00005ee3: 	movl	%ebp, %r11d
    00005ee6: 	subl	%eax, %r11d
    00005ee9: 	cmpl	$0x1, %r11d
    00005eed: 	je	.Ltmp766 # Offset: 24301
    00005eef: 	movslq	%eax, %rdx
    00005ef2: 	leaq	(%rbx,%rdx), %rcx
    00005ef6: 	leaq	(%r15,%rdx,8), %r8
    00005efa: 	xorl	%edx, %edx
    00005efc: 	leaq	(%r14,%rcx,8), %r9
    00005f00: 	movl	%r11d, %ecx
    00005f03: 	shrl	%ecx
    00005f05: 	shlq	$0x4, %rcx
    00005f09: 	nopl	(%rax) # Size: 7
.Ltmp767:
    00005f10: 	movupd	(%r8,%rdx), %xmm2
    00005f16: 	movupd	(%r9,%rdx), %xmm7
    00005f1c: 	addq	$0x10, %rdx
    00005f20: 	mulpd	%xmm7, %xmm2
    00005f24: 	addsd	%xmm2, %xmm0
    00005f28: 	unpckhpd	%xmm2, %xmm2
    00005f2c: 	addsd	%xmm2, %xmm0
    00005f30: 	cmpq	%rcx, %rdx
    00005f33: 	jne	.Ltmp767 # Offset: 24371
    00005f35: 	movl	%r11d, %edx
    00005f38: 	andl	$-0x2, %edx
    00005f3b: 	addl	%edx, %eax
    00005f3d: 	cmpl	%r11d, %edx
    00005f40: 	je	.Ltmp765 # Offset: 24384
.Ltmp766:
    00005f42: 	cltq
    00005f44: 	movsd	(%r15,%rax,8), %xmm1
    00005f4a: 	mulsd	(%rdi,%rax,8), %xmm1
    00005f4f: 	addsd	%xmm1, %xmm0
.Ltmp765:
    00005f53: 	addsd	%xmm0, %xmm3
    00005f57: 	addq	$0x8, %r10
    00005f5b: 	addq	0x18(%rsp), %rbx
    00005f60: 	movapd	%xmm3, %xmm1
    00005f64: 	addsd	%xmm6, %xmm1
    00005f68: 	addsd	%xmm5, %xmm1
    00005f6c: 	movsd	%xmm1, -0x8(%r10)
    00005f72: 	cmpq	0x10(%rsp), %r10
    00005f77: 	jne	.Ltmp768 # Offset: 24439
    00005f7d: 	addq	$0x74, 0x28(%rsp)
    00005f83: 	addq	$0x3a0, %r12
    00005f8a: 	movq	0x28(%rsp), %rax
    00005f8f: 	addq	$0x3a0, %r13
    00005f96: 	addl	$0x74, 0x30(%rsp)
    00005f9b: 	cmpl	%eax, 0x84(%rsp)
    00005fa2: 	jg	.Ltmp769 # Offset: 24482
.Ltmp762:
    00005fa8: 	addq	$0xc, 0x58(%rsp)
    00005fae: 	movq	0x60(%rsp), %rbx
    00005fb3: 	movq	0x58(%rsp), %rax
    00005fb8: 	addq	%rbx, 0x48(%rsp)
    00005fbd: 	cmpl	%eax, 0xcc(%rsp)
    00005fc4: 	jg	.Ltmp770 # Offset: 24516
.Ltmp761:
    00005fca: 	xorl	%eax, %eax
.Ltmp773:
    00005fcc: 	movq	0x1e0(%rsp), %rbx
    00005fd4: 	movsd	(%rbx,%rax,8), %xmm1
    00005fd9: 	movq	0xa8(%rsp), %rbx
    00005fe1: 	movapd	%xmm1, %xmm2
    00005fe5: 	andpd	DATAat0x24940(%rip), %xmm2
    00005fed: 	movapd	%xmm1, %xmm0
    00005ff1: 	comisd	DATAat0x24978(%rip), %xmm2
    00005ff9: 	subsd	(%rbx,%rax,8), %xmm0
    00005ffe: 	jbe	.Ltmp771 # Offset: 24574
    00006000: 	divsd	%xmm1, %xmm0
.Ltmp771:
    00006004: 	andpd	DATAat0x24940(%rip), %xmm0
    0000600c: 	movsd	DATAat0x24980(%rip), %xmm4
    00006014: 	comisd	%xmm0, %xmm4
    00006018: 	jbe	.Ltmp772 # Offset: 24600
    0000601e: 	addq	$0x1, %rax
    00006022: 	cmpq	$0x320, %rax
    00006028: 	jne	.Ltmp773 # Offset: 24616
.Ltmp816:
    0000602a: 	movq	0xa8(%rsp), %rax
    00006032: 	movq	$0x0, (%rax)
    00006039: 	movq	0xa0(%rsp), %rbx
    00006041: 	movq	$0x0, -0x10(%rbx)
    00006049: 	movq	0x40(%rsp), %rdi
    0000604e: 	andq	$-0x8, %rdi
    00006052: 	subq	%rdi, %rax
    00006055: 	movq	%rax, %rcx
    00006058: 	xorl	%eax, %eax
    0000605a: 	addl	$0x1900, %ecx
    00006060: 	shrl	$0x3, %ecx
    00006063: 	rep		stosq	%rax, %es:(%rdi)
    00006066: 	movl	0xcc(%rsp), %ecx
    0000606d: 	testl	%ecx, %ecx
    0000606f: 	jle	.Ltmp774 # Offset: 24687
    00006075: 	movl	0x84(%rsp), %ebx
    0000607c: 	testl	%ebx, %ebx
    0000607e: 	jle	.Ltmp774 # Offset: 24702
    00006084: 	leal	(%rbx,%rbx,2), %eax
    00006087: 	movslq	%ebx, %r13
    0000608a: 	pxor	%xmm5, %xmm5
    0000608e: 	movl	$0x0, 0x70(%rsp)
    00006096: 	movq	$0x0, 0x68(%rsp)
    0000609f: 	shll	$0x2, %eax
    000060a2: 	movl	%eax, 0x90(%rsp)
    000060a9: 	cltq
    000060ab: 	movq	%rax, 0x88(%rsp)
    000060b3: 	leaq	(,%r13,8), %rax
    000060bb: 	movq	$0x0, 0x58(%rsp)
    000060c4: 	movq	%rax, 0x18(%rsp)
    000060c9: 	movq	%r14, %rax
    000060cc: 	movq	%r15, %r14
    000060cf: 	movq	%r13, %r15
    000060d2: 	movq	%rax, %r13
.Ltmp783:
    000060d5: 	movq	0x68(%rsp), %rdi
    000060da: 	movl	0xcc(%rsp), %ebx
    000060e1: 	movl	%edi, %eax
    000060e3: 	addl	$0xc, %eax
    000060e6: 	cmpl	%ebx, %eax
    000060e8: 	cmovgl	%ebx, %eax
    000060eb: 	cmpl	%edi, %eax
    000060ed: 	jle	.Ltmp775 # Offset: 24813
    000060f3: 	movslq	0x70(%rsp), %rdx
    000060f8: 	movq	%r14, 0x20(%rsp)
    000060fd: 	movq	0xa8(%rsp), %rdi
    00006105: 	movl	$0x8, 0x38(%rsp)
    0000610d: 	movq	$0x0, 0x30(%rsp)
    00006116: 	leaq	(%r13,%rdx,8), %rbx
    0000611b: 	movq	%rbx, 0x48(%rsp)
    00006120: 	movq	0x68(%rsp), %rbx
    00006125: 	subl	%ebx, %eax
    00006127: 	leaq	(%rdi,%rbx,8), %rdi
    0000612b: 	subl	$0x1, %eax
    0000612e: 	movq	%rdi, 0x60(%rsp)
    00006133: 	addq	%rbx, %rax
    00006136: 	movq	0x40(%rsp), %rbx
    0000613b: 	leaq	(%rbx,%rax,8), %rax
    0000613f: 	movq	%rax, 0x10(%rsp)
    00006144: 	nopl	(%rax) # Size: 4
.Ltmp782:
    00006148: 	movq	0x30(%rsp), %rax
    0000614d: 	movl	0x84(%rsp), %ebx
    00006154: 	movq	0x48(%rsp), %rbp
    00006159: 	movq	0x60(%rsp), %r10
    0000615e: 	leal	0x74(%rax), %r12d
    00006162: 	movl	%eax, 0x50(%rsp)
    00006166: 	cmpl	%ebx, %r12d
    00006169: 	movl	%eax, 0x8(%rsp)
    0000616d: 	cmovgl	%ebx, %r12d
    00006171: 	leal	-0x7(%r12), %ebx
    00006176: 	movl	%ebx, (%rsp)
    00006179: 	movl	$0xfffffff8, %ebx
    0000617e: 	subl	%eax, %ebx
    00006180: 	movl	%ebx, %eax
    00006182: 	movl	0x38(%rsp), %ebx
    00006186: 	addl	%r12d, %eax
    00006189: 	shrl	$0x3, %eax
    0000618c: 	leal	0x1(%rax), %esi
    0000618f: 	leal	(%rbx,%rax,8), %eax
    00006192: 	movq	0x58(%rsp), %rbx
    00006197: 	movl	%eax, 0x28(%rsp)
    0000619b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp781:
    000061a0: 	movsd	(%r10), %xmm0
    000061a5: 	movl	0x8(%rsp), %ecx
    000061a9: 	leaq	(%r13,%rbx,8), %rdi
    000061ae: 	cmpl	%ecx, (%rsp)
    000061b1: 	jle	.Ltmp776 # Offset: 25009
    000061b7: 	pxor	%xmm1, %xmm1
    000061bb: 	movq	0x20(%rsp), %rax
    000061c0: 	movq	%xmm0, %xmm4
    000061c4: 	movq	%rbp, %rdx
    000061c7: 	xorl	%ecx, %ecx
    000061c9: 	movapd	%xmm1, %xmm2
    000061cd: 	movapd	%xmm1, %xmm3
    000061d1: 	nopl	(%rax) # Size: 7
.Ltmp777:
    000061d8: 	movupd	(%rdx), %xmm7
    000061dc: 	movupd	(%rax), %xmm0
    000061e0: 	addl	$0x1, %ecx
    000061e3: 	addq	$0x40, %rax
    000061e7: 	movupd	0x10(%rdx), %xmm6
    000061ec: 	addq	$0x40, %rdx
    000061f0: 	mulpd	%xmm7, %xmm0
    000061f4: 	movupd	-0x20(%rdx), %xmm7
    000061f9: 	addpd	%xmm0, %xmm4
    000061fd: 	movupd	-0x30(%rax), %xmm0
    00006202: 	mulpd	%xmm6, %xmm0
    00006206: 	movupd	-0x10(%rdx), %xmm6
    0000620b: 	addpd	%xmm0, %xmm3
    0000620f: 	movupd	-0x20(%rax), %xmm0
    00006214: 	mulpd	%xmm7, %xmm0
    00006218: 	addpd	%xmm0, %xmm2
    0000621c: 	movupd	-0x10(%rax), %xmm0
    00006221: 	mulpd	%xmm6, %xmm0
    00006225: 	addpd	%xmm0, %xmm1
    00006229: 	cmpl	%ecx, %esi
    0000622b: 	ja	.Ltmp777 # Offset: 25131
    0000622d: 	movapd	%xmm4, %xmm0
    00006231: 	movapd	%xmm3, %xmm8
    00006236: 	unpckhpd	%xmm4, %xmm4
    0000623a: 	movl	0x28(%rsp), %eax
    0000623e: 	unpckhpd	%xmm3, %xmm3
    00006242: 	movapd	%xmm2, %xmm9
    00006247: 	movapd	%xmm1, %xmm10
    0000624c: 	unpckhpd	%xmm2, %xmm2
    00006250: 	unpckhpd	%xmm1, %xmm1
    00006254: 	movapd	%xmm4, %xmm7
    00006258: 	movapd	%xmm3, %xmm6
    0000625c: 	movapd	%xmm2, %xmm4
    00006260: 	movapd	%xmm1, %xmm3
.Ltmp804:
    00006264: 	cmpl	%eax, %r12d
    00006267: 	jle	.Ltmp778 # Offset: 25191
    00006269: 	movl	%r12d, %r11d
    0000626c: 	subl	%eax, %r11d
    0000626f: 	cmpl	$0x1, %r11d
    00006273: 	je	.Ltmp779 # Offset: 25203
    00006275: 	movslq	%eax, %rdx
    00006278: 	leaq	(%rbx,%rdx), %rcx
    0000627c: 	leaq	(%r14,%rdx,8), %r8
    00006280: 	xorl	%edx, %edx
    00006282: 	leaq	(%r13,%rcx,8), %r9
    00006287: 	movl	%r11d, %ecx
    0000628a: 	shrl	%ecx
    0000628c: 	shlq	$0x4, %rcx
.Ltmp780:
    00006290: 	movupd	(%r8,%rdx), %xmm1
    00006296: 	movupd	(%r9,%rdx), %xmm2
    0000629c: 	addq	$0x10, %rdx
    000062a0: 	mulpd	%xmm2, %xmm1
    000062a4: 	addsd	%xmm1, %xmm0
    000062a8: 	unpckhpd	%xmm1, %xmm1
    000062ac: 	addsd	%xmm1, %xmm0
    000062b0: 	cmpq	%rdx, %rcx
    000062b3: 	jne	.Ltmp780 # Offset: 25267
    000062b5: 	movl	%r11d, %edx
    000062b8: 	andl	$-0x2, %edx
    000062bb: 	addl	%edx, %eax
    000062bd: 	cmpl	%r11d, %edx
    000062c0: 	je	.Ltmp778 # Offset: 25280
.Ltmp779:
    000062c2: 	cltq
    000062c4: 	movsd	(%r14,%rax,8), %xmm1
    000062ca: 	mulsd	(%rdi,%rax,8), %xmm1
    000062cf: 	addsd	%xmm1, %xmm0
.Ltmp778:
    000062d3: 	addsd	%xmm7, %xmm0
    000062d7: 	addq	$0x8, %r10
    000062db: 	addq	0x18(%rsp), %rbp
    000062e0: 	addq	%r15, %rbx
    000062e3: 	addsd	%xmm8, %xmm0
    000062e8: 	addsd	%xmm6, %xmm0
    000062ec: 	addsd	%xmm9, %xmm0
    000062f1: 	addsd	%xmm4, %xmm0
    000062f5: 	addsd	%xmm10, %xmm0
    000062fa: 	addsd	%xmm3, %xmm0
    000062fe: 	movsd	%xmm0, -0x8(%r10)
    00006304: 	cmpq	%r10, 0x10(%rsp)
    00006309: 	jne	.Ltmp781 # Offset: 25353
    0000630f: 	addq	$0x74, 0x30(%rsp)
    00006315: 	movq	0x30(%rsp), %rax
    0000631a: 	addl	$0x74, 0x38(%rsp)
    0000631f: 	addq	$0x3a0, 0x48(%rsp)
    00006328: 	addq	$0x3a0, 0x20(%rsp)
    00006331: 	cmpl	%eax, 0x84(%rsp)
    00006338: 	jg	.Ltmp782 # Offset: 25400
.Ltmp775:
    0000633e: 	addq	$0xc, 0x68(%rsp)
    00006344: 	movq	0x88(%rsp), %rbx
    0000634c: 	movl	0x90(%rsp), %edi
    00006353: 	addq	%rbx, 0x58(%rsp)
    00006358: 	addl	%edi, 0x70(%rsp)
    0000635c: 	movq	0x68(%rsp), %rax
    00006361: 	cmpl	%eax, 0xcc(%rsp)
    00006368: 	jg	.Ltmp783 # Offset: 25448
    0000636e: 	movq	%r14, %r15
    00006371: 	movq	%r13, %r14
.Ltmp774:
    00006374: 	xorl	%eax, %eax
.Ltmp786:
    00006376: 	movq	0x1e0(%rsp), %rbx
    0000637e: 	movsd	(%rbx,%rax,8), %xmm1
    00006383: 	movq	0xa8(%rsp), %rbx
    0000638b: 	movapd	%xmm1, %xmm2
    0000638f: 	andpd	DATAat0x24940(%rip), %xmm2
    00006397: 	movapd	%xmm1, %xmm0
    0000639b: 	comisd	DATAat0x24978(%rip), %xmm2
    000063a3: 	subsd	(%rbx,%rax,8), %xmm0
    000063a8: 	jbe	.Ltmp784 # Offset: 25512
    000063aa: 	divsd	%xmm1, %xmm0
.Ltmp784:
    000063ae: 	andpd	DATAat0x24940(%rip), %xmm0
    000063b6: 	movsd	DATAat0x24980(%rip), %xmm4
    000063be: 	comisd	%xmm0, %xmm4
    000063c2: 	jbe	.Ltmp785 # Offset: 25538
    000063c8: 	addq	$0x1, %rax
    000063cc: 	cmpq	$0x320, %rax
    000063d2: 	jne	.Ltmp786 # Offset: 25554
.Ltmp815:
    000063d4: 	movq	0xa8(%rsp), %rax
    000063dc: 	movq	$0x0, (%rax)
    000063e3: 	movq	0xa0(%rsp), %rbx
    000063eb: 	movq	$0x0, -0x10(%rbx)
    000063f3: 	movq	0x40(%rsp), %rdi
    000063f8: 	andq	$-0x8, %rdi
    000063fc: 	subq	%rdi, %rax
    000063ff: 	movq	%rax, %rcx
    00006402: 	xorl	%eax, %eax
    00006404: 	addl	$0x1900, %ecx
    0000640a: 	shrl	$0x3, %ecx
    0000640d: 	rep		stosq	%rax, %es:(%rdi)
    00006410: 	movl	0x84(%rsp), %esi
    00006417: 	testl	%esi, %esi
    00006419: 	jle	.Ltmp787 # Offset: 25625
    0000641f: 	movl	0xcc(%rsp), %edi
    00006426: 	testl	%edi, %edi
    00006428: 	jle	.Ltmp787 # Offset: 25640
    0000642e: 	movl	0x84(%rsp), %eax
    00006435: 	movq	%r15, 0xd0(%rsp)
    0000643d: 	movq	$0x0, 0x208(%rsp)
    00006449: 	movl	%eax, %ebx
    0000644b: 	leal	(%rax,%rax), %edi
    0000644e: 	shll	$0x4, %ebx
    00006451: 	movl	%edi, %esi
    00006453: 	movl	%edi, 0x248(%rsp)
    0000645a: 	addl	%eax, %edi
    0000645c: 	movl	%ebx, 0x210(%rsp)
    00006463: 	movslq	%ebx, %rbx
    00006466: 	movq	%rbx, 0x220(%rsp)
    0000646e: 	movslq	%esi, %rbx
    00006471: 	movq	%rbx, 0x240(%rsp)
    00006479: 	movslq	%edi, %rbx
    0000647c: 	movq	%rbx, 0x238(%rsp)
    00006484: 	movl	%eax, %ebx
    00006486: 	shll	$0x2, %eax
    00006489: 	cltq
    0000648b: 	movl	%edi, 0x24c(%rsp)
    00006492: 	movq	%rax, %r13
    00006495: 	shlq	$0x3, %rax
    00006499: 	movq	%rax, 0xe0(%rsp)
    000064a1: 	movslq	%ebx, %rax
    000064a4: 	shlq	$0x4, %r13
    000064a8: 	movq	%rax, 0x230(%rsp)
    000064b0: 	shlq	$0x3, %rax
    000064b4: 	movq	%r13, %r15
    000064b7: 	movq	%rax, 0x130(%rsp)
    000064bf: 	movq	0xa8(%rsp), %rax
    000064c7: 	addq	$0x20, %rax
    000064cb: 	movq	%rax, 0x228(%rsp)
.Ltmp797:
    000064d3: 	movq	0x208(%rsp), %rdi
    000064db: 	movl	0x84(%rsp), %ebx
    000064e2: 	movl	%edi, %eax
    000064e4: 	addl	$0x12c, %eax
    000064e9: 	cmpl	%ebx, %eax
    000064eb: 	cmovgl	%ebx, %eax
    000064ee: 	movl	%eax, 0xc0(%rsp)
    000064f5: 	cmpl	%edi, %eax
    000064f7: 	jle	.Ltmp788 # Offset: 25847
    000064fd: 	movq	$0x0, 0x150(%rsp)
    00006509: 	leaq	(%r14,%rdi,8), %rax
    0000650d: 	movq	%rax, 0x218(%rsp)
    00006515: 	movq	0x238(%rsp), %rax
    0000651d: 	movq	$0x0, 0x1a8(%rsp)
    00006529: 	movq	%rax, 0x190(%rsp)
    00006531: 	movq	0x240(%rsp), %rax
    00006539: 	movl	$0x4, 0x1b4(%rsp)
    00006544: 	movq	%rax, 0x198(%rsp)
    0000654c: 	movq	0x230(%rsp), %rax
    00006554: 	movl	$0x0, 0x1b8(%rsp)
    0000655f: 	movq	%rax, 0x1a0(%rsp)
    00006567: 	movq	0xa8(%rsp), %rax
    0000656f: 	movq	%rax, 0x40(%rsp)
    00006574: 	movl	0x24c(%rsp), %eax
    0000657b: 	movl	%eax, 0x1c0(%rsp)
    00006582: 	movl	0x248(%rsp), %eax
    00006589: 	movl	%eax, 0x188(%rsp)
    00006590: 	movl	0x84(%rsp), %eax
    00006597: 	movl	%eax, 0x1b0(%rsp)
    0000659e: 	nop # Size: 2
.Ltmp796:
    000065a0: 	movq	0x150(%rsp), %r9
    000065a8: 	movl	0xcc(%rsp), %edi
    000065af: 	movq	0x1a0(%rsp), %r10
    000065b7: 	movq	0x208(%rsp), %r13
    000065bf: 	movl	%r9d, %eax
    000065c2: 	movq	0xa8(%rsp), %r8
    000065ca: 	movq	0x40(%rsp), %rbp
    000065cf: 	movl	%r9d, 0xb8(%rsp)
    000065d7: 	addl	$0x10, %eax
    000065da: 	cmpl	%edi, %eax
    000065dc: 	cmovgl	%edi, %eax
    000065df: 	xorl	%r11d, %r11d
    000065e2: 	movl	%eax, %edi
    000065e4: 	leal	-0x3(%rax), %edx
    000065e7: 	movl	%eax, 0xa0(%rsp)
    000065ee: 	movq	0x218(%rsp), %rax
    000065f6: 	movl	%edx, 0x90(%rsp)
    000065fd: 	leaq	(%rax,%r10,8), %rax
    00006601: 	movq	%rax, 0x88(%rsp)
    00006609: 	movslq	0x1b0(%rsp), %rax
    00006611: 	addq	%r13, %rax
    00006614: 	shlq	$0x3, %rax
    00006618: 	movq	%rax, 0x48(%rsp)
    0000661d: 	movslq	0x188(%rsp), %rax
    00006625: 	addq	%r13, %rax
    00006628: 	shlq	$0x3, %rax
    0000662c: 	movq	%rax, 0x50(%rsp)
    00006631: 	movslq	0x1c0(%rsp), %rax
    00006639: 	addq	%r13, %rax
    0000663c: 	shlq	$0x3, %rax
    00006640: 	movq	%rax, 0x28(%rsp)
    00006645: 	movslq	0x1b8(%rsp), %rax
    0000664d: 	addq	%r13, %rax
    00006650: 	shlq	$0x3, %rax
    00006654: 	movq	%rax, 0x58(%rsp)
    00006659: 	movl	$0xfffffffc, %eax
    0000665e: 	subl	%r9d, %eax
    00006661: 	addl	%edi, %eax
    00006663: 	movl	%eax, %esi
    00006665: 	movl	%eax, 0xe8(%rsp)
    0000666c: 	shrl	$0x2, %esi
    0000666f: 	leal	0x1(%rsi), %edx
    00006672: 	movq	%rdx, %rbx
    00006675: 	movl	%edx, 0x120(%rsp)
    0000667c: 	leaq	-0x1(%rdx), %rax
    00006680: 	leaq	-0x1(%r9,%rdx,4), %rdx
    00006685: 	imulq	0xe0(%rsp), %rax
    0000668e: 	leaq	(%r8,%rdx,8), %rcx
    00006692: 	movq	%rcx, 0x38(%rsp)
    00006697: 	movl	0x84(%rsp), %ecx
    0000669e: 	testl	%ecx, %ecx
    000066a0: 	cmovsq	%rax, %r11
    000066a4: 	movq	%r11, 0x30(%rsp)
    000066a9: 	movl	$0x0, %r11d
    000066af: 	cmovsq	%r11, %rax
    000066b3: 	movl	%ecx, %r11d
    000066b6: 	movq	%rax, (%rsp)
    000066ba: 	movl	%ebx, %eax
    000066bc: 	andl	$-0x2, %ebx
    000066bf: 	shrl	%eax
    000066c1: 	movl	%ebx, 0x118(%rsp)
    000066c8: 	subl	$0x1, %eax
    000066cb: 	shlq	$0x6, %rax
    000066cf: 	leaq	0x40(%rbp,%rax), %rax
    000066d4: 	movq	%rax, 0x110(%rsp)
    000066dc: 	leal	(%r9,%rbx,4), %eax
    000066e0: 	imull	%eax, %ecx
    000066e3: 	movslq	%eax, %rdx
    000066e6: 	shlq	$0x3, %rdx
    000066ea: 	leaq	0x10(%r8,%rdx), %rbx
    000066ef: 	leaq	(%r8,%rdx), %r12
    000066f3: 	movl	%ecx, 0x20(%rsp)
    000066f7: 	leal	0x1(%rax), %ecx
    000066fa: 	leaq	0x8(%r8,%rdx), %rbp
    000066ff: 	imull	%r11d, %ecx
    00006703: 	movq	%rbx, 0x70(%rsp)
    00006708: 	movl	%ecx, 0x18(%rsp)
    0000670c: 	leal	0x2(%rax), %ecx
    0000670f: 	addl	$0x3, %eax
    00006712: 	movl	%ecx, %ebx
    00006714: 	movl	%r11d, %ecx
    00006717: 	imull	%r11d, %ebx
    0000671b: 	leaq	0x18(%r8,%rdx), %r11
    00006720: 	imull	%ecx, %eax
    00006723: 	movl	%ebx, 0x10(%rsp)
    00006727: 	movl	%eax, 0x8(%rsp)
    0000672b: 	leaq	(%r8,%r9,8), %rax
    0000672f: 	movq	0x228(%rsp), %rbx
    00006737: 	movq	%rax, 0x170(%rsp)
    0000673f: 	movl	%esi, %eax
    00006741: 	leaq	(%r9,%rax,4), %rax
    00006745: 	leaq	(%rbx,%rax,8), %rax
    00006749: 	movq	%rax, 0x168(%rsp)
    00006751: 	movq	0x1a8(%rsp), %rax
    00006759: 	subq	%r10, %rax
    0000675c: 	shlq	$0x3, %rax
    00006760: 	movq	%rax, 0x158(%rsp)
    00006768: 	movq	0x198(%rsp), %rax
    00006770: 	subq	%r10, %rax
    00006773: 	shlq	$0x3, %rax
    00006777: 	movq	%rax, 0x160(%rsp)
    0000677f: 	movq	0x190(%rsp), %rax
    00006787: 	subq	%r10, %rax
    0000678a: 	shlq	$0x3, %rax
    0000678e: 	cmpl	%r9d, 0x90(%rsp)
    00006796: 	movq	%rax, 0x178(%rsp)
    0000679e: 	movl	0x1b4(%rsp), %eax
    000067a5: 	leal	(%rax,%rsi,4), %eax
    000067a8: 	movq	%r9, %rsi
    000067ab: 	movl	%eax, %r9d
    000067ae: 	cmovlel	%esi, %r9d
    000067b2: 	movl	%ecx, %esi
    000067b4: 	subl	%r9d, %edi
    000067b7: 	movslq	%r9d, %rdx
    000067ba: 	movl	%r9d, 0xb0(%rsp)
    000067c2: 	leal	-0x1(%rdi), %eax
    000067c5: 	movl	%edi, 0x138(%rsp)
    000067cc: 	cmpl	$0x2, %eax
    000067cf: 	movl	%r9d, %eax
    000067d2: 	seta	0x128(%rsp)
    000067da: 	imull	%ecx, %eax
    000067dd: 	movl	%edi, %ecx
    000067df: 	xorl	%ebx, %ebx
    000067e1: 	cltq
    000067e3: 	movq	%rax, 0x100(%rsp)
    000067eb: 	leaq	-0x1(%rcx), %rax
    000067ef: 	imulq	0x130(%rsp), %rax
    000067f8: 	testl	%esi, %esi
    000067fa: 	cmovnsq	%rax, %rbx
    000067fe: 	movq	%rbx, 0x108(%rsp)
    00006806: 	leaq	(%r8,%rdx,8), %rbx
    0000680a: 	leaq	-0x1(%rcx,%rdx), %rdx
    0000680f: 	movl	%esi, %ecx
    00006811: 	movl	$0x0, %esi
    00006816: 	movq	%rbx, 0xd8(%rsp)
    0000681e: 	leaq	(%r8,%rdx,8), %rbx
    00006822: 	cmovnsq	%rsi, %rax
    00006826: 	movq	%rbx, 0xf8(%rsp)
    0000682e: 	movq	%rax, 0xf0(%rsp)
    00006836: 	movl	%edi, %eax
    00006838: 	andl	$-0x2, %edi
    0000683b: 	shrl	%eax
    0000683d: 	movl	%edi, 0x140(%rsp)
    00006844: 	movl	%eax, 0x148(%rsp)
    0000684b: 	movl	%edi, %eax
    0000684d: 	leal	0x1(%r9), %edi
    00006851: 	addl	%r9d, %eax
    00006854: 	movl	%edi, 0x180(%rsp)
    0000685b: 	movslq	%eax, %rdx
    0000685e: 	imull	%ecx, %eax
    00006861: 	leaq	(%r8,%rdx,8), %rbx
    00006865: 	movq	%rbx, 0x60(%rsp)
    0000686a: 	movl	%eax, 0x68(%rsp)
    0000686e: 	movslq	%edi, %rax
    00006871: 	imull	%ecx, %edi
    00006874: 	leaq	(%r8,%rax,8), %rax
    00006878: 	movq	%rax, 0x1c8(%rsp)
    00006880: 	movl	%edi, 0x1d0(%rsp)
    00006887: 	leal	0x2(%r9), %edi
    0000688b: 	movl	%edi, 0x1d8(%rsp)
    00006892: 	movslq	%edi, %rax
    00006895: 	imull	%ecx, %edi
    00006898: 	leaq	(%r8,%rax,8), %rax
    0000689c: 	movq	%rax, 0x1e8(%rsp)
    000068a4: 	movl	%edi, 0x1f0(%rsp)
    000068ab: 	leal	0x3(%r9), %edi
    000068af: 	movl	%edi, 0x1f8(%rsp)
    000068b6: 	movslq	%edi, %rax
    000068b9: 	imull	%ecx, %edi
    000068bc: 	leaq	(%r8,%rax,8), %rax
    000068c0: 	movq	%rax, 0x200(%rsp)
    000068c8: 	movl	%edi, 0x1fc(%rsp)
    000068cf: 	movq	0x70(%rsp), %rbx
    000068d4: 	nopl	(%rax) # Size: 4
.Ltmp795:
    000068d8: 	movq	0xd0(%rsp), %rax
    000068e0: 	movl	0xb8(%rsp), %edi
    000068e7: 	movl	%r13d, %edx
    000068ea: 	movsd	(%rax,%r13,8), %xmm4
    000068f0: 	cmpl	%edi, 0x90(%rsp)
    000068f7: 	jle	.Ltmp789 # Offset: 26871
    000068fd: 	movq	0x50(%rsp), %rdi
    00006902: 	movq	(%rsp), %rcx
    00006906: 	movq	0x40(%rsp), %r8
    0000690b: 	movq	0x38(%rsp), %r10
    00006910: 	movq	%rdi, %rax
    00006913: 	movq	0x48(%rsp), %r9
    00006918: 	addq	%rcx, %rax
    0000691b: 	addq	%r14, %rax
    0000691e: 	cmpq	%rax, %r8
    00006921: 	movq	0x30(%rsp), %rax
    00006926: 	seta	%sil
    0000692a: 	addq	%rdi, %rax
    0000692d: 	addq	%r14, %rax
    00006930: 	cmpq	%rax, %r10
    00006933: 	setb	%al
    00006936: 	orl	%eax, %esi
    00006938: 	movq	%r9, %rax
    0000693b: 	addq	%rcx, %rax
    0000693e: 	addq	%r14, %rax
    00006941: 	cmpq	%rax, %r8
    00006944: 	movq	0x30(%rsp), %rax
    00006949: 	seta	%cl
    0000694c: 	addq	%r9, %rax
    0000694f: 	addq	%r14, %rax
    00006952: 	cmpq	%rax, %r10
    00006955: 	setb	%al
    00006958: 	orl	%ecx, %eax
    0000695a: 	andl	%esi, %eax
    0000695c: 	cmpl	$0x7, 0xe8(%rsp)
    00006964: 	movq	0x28(%rsp), %rsi
    00006969: 	seta	%cl
    0000696c: 	andl	%ecx, %eax
    0000696e: 	movq	(%rsp), %rcx
    00006972: 	addq	%rsi, %rcx
    00006975: 	addq	%r14, %rcx
    00006978: 	cmpq	%rcx, %r8
    0000697b: 	seta	%cl
    0000697e: 	addq	0x30(%rsp), %rsi
    00006983: 	addq	%r14, %rsi
    00006986: 	cmpq	%rsi, %r10
    00006989: 	setb	%sil
    0000698d: 	orl	%esi, %ecx
    0000698f: 	testb	%cl, %al
    00006991: 	je	.Ltmp790 # Offset: 27025
    00006997: 	movq	0x58(%rsp), %r10
    0000699c: 	movq	0x30(%rsp), %rax
    000069a1: 	addq	%r10, %rax
    000069a4: 	addq	%r14, %rax
    000069a7: 	cmpq	%rax, 0x38(%rsp)
    000069ac: 	movq	(%rsp), %rax
    000069b0: 	setb	%cl
    000069b3: 	addq	%r10, %rax
    000069b6: 	addq	%r14, %rax
    000069b9: 	cmpq	%rax, %r8
    000069bc: 	seta	%al
    000069bf: 	orb	%cl, %al
    000069c1: 	je	.Ltmp790 # Offset: 27073
    000069c7: 	movq	0x28(%rsp), %rsi
    000069cc: 	movl	%r13d, 0x70(%rsp)
    000069d1: 	movq	%r8, %rax
    000069d4: 	addq	%r14, %r10
    000069d7: 	movapd	%xmm4, %xmm5
    000069db: 	leaq	(%r14,%rdi), %r8
    000069df: 	addq	%r14, %r9
    000069e2: 	xorl	%ecx, %ecx
    000069e4: 	leaq	(%r14,%rsi), %rdi
    000069e8: 	movq	0x110(%rsp), %rdx
    000069f0: 	movq	0xe0(%rsp), %rsi
    000069f8: 	unpcklpd	%xmm5, %xmm5
    000069fc: 	nopl	(%rax) # Size: 4
.Ltmp791:
    00006a00: 	movsd	(%r10,%rcx), %xmm2
    00006a06: 	movupd	(%rax), %xmm0
    00006a0a: 	addq	$0x40, %rax
    00006a0e: 	movupd	-0x20(%rax), %xmm8
    00006a14: 	movupd	-0x30(%rax), %xmm6
    00006a19: 	movhpd	(%r10,%rsi), %xmm2
    00006a1f: 	movhpd	-0x30(%rax), %xmm0
    00006a24: 	movlpd	-0x38(%rax), %xmm6
    00006a29: 	movupd	-0x10(%rax), %xmm7
    00006a2e: 	mulpd	%xmm5, %xmm2
    00006a32: 	movhpd	-0x10(%rax), %xmm8
    00006a38: 	movapd	%xmm0, %xmm1
    00006a3c: 	movlpd	-0x18(%rax), %xmm7
    00006a41: 	unpcklpd	%xmm8, %xmm1
    00006a46: 	movapd	%xmm6, %xmm3
    00006a4a: 	unpckhpd	%xmm8, %xmm0
    00006a4f: 	unpcklpd	%xmm7, %xmm3
    00006a53: 	unpckhpd	%xmm7, %xmm6
    00006a57: 	addpd	%xmm1, %xmm2
    00006a5b: 	movsd	(%r9,%rcx), %xmm1
    00006a61: 	movhpd	(%r9,%rsi), %xmm1
    00006a67: 	mulpd	%xmm5, %xmm1
    00006a6b: 	addpd	%xmm1, %xmm3
    00006a6f: 	movsd	(%r8,%rcx), %xmm1
    00006a75: 	movhpd	(%r8,%rsi), %xmm1
    00006a7b: 	mulpd	%xmm5, %xmm1
    00006a7f: 	movapd	%xmm3, %xmm7
    00006a83: 	addpd	%xmm0, %xmm1
    00006a87: 	movsd	(%rdi,%rcx), %xmm0
    00006a8c: 	addq	%r15, %rcx
    00006a8f: 	movhpd	(%rdi,%rsi), %xmm0
    00006a94: 	addq	%r15, %rsi
    00006a97: 	mulpd	%xmm5, %xmm0
    00006a9b: 	addpd	%xmm6, %xmm0
    00006a9f: 	movapd	%xmm2, %xmm6
    00006aa3: 	unpckhpd	%xmm1, %xmm2
    00006aa7: 	unpcklpd	%xmm1, %xmm6
    00006aab: 	unpcklpd	%xmm0, %xmm7
    00006aaf: 	unpckhpd	%xmm0, %xmm3
    00006ab3: 	movapd	%xmm6, %xmm0
    00006ab7: 	unpcklpd	%xmm7, %xmm0
    00006abb: 	unpckhpd	%xmm7, %xmm6
    00006abf: 	movups	%xmm0, -0x40(%rax)
    00006ac3: 	movapd	%xmm2, %xmm0
    00006ac7: 	unpckhpd	%xmm3, %xmm2
    00006acb: 	unpcklpd	%xmm3, %xmm0
    00006acf: 	movups	%xmm6, -0x30(%rax)
    00006ad3: 	movups	%xmm0, -0x20(%rax)
    00006ad7: 	movups	%xmm2, -0x10(%rax)
    00006adb: 	cmpq	%rax, %rdx
    00006ade: 	jne	.Ltmp791 # Offset: 27358
    00006ae4: 	movl	0x70(%rsp), %edx
    00006ae8: 	movl	0x120(%rsp), %edi
    00006aef: 	cmpl	%edi, 0x118(%rsp)
    00006af6: 	je	.Ltmp789 # Offset: 27382
    00006af8: 	movl	0x20(%rsp), %eax
    00006afc: 	addl	%edx, %eax
    00006afe: 	cltq
    00006b00: 	movsd	(%r14,%rax,8), %xmm0
    00006b06: 	movl	0x18(%rsp), %eax
    00006b0a: 	mulsd	%xmm4, %xmm0
    00006b0e: 	addl	%edx, %eax
    00006b10: 	addsd	(%r12), %xmm0
    00006b16: 	cltq
    00006b18: 	movsd	%xmm0, (%r12)
    00006b1e: 	movsd	(%r14,%rax,8), %xmm0
    00006b24: 	movl	0x10(%rsp), %eax
    00006b28: 	mulsd	%xmm4, %xmm0
    00006b2c: 	addl	%edx, %eax
    00006b2e: 	addsd	(%rbp), %xmm0
    00006b33: 	cltq
    00006b35: 	movsd	%xmm0, (%rbp)
    00006b3a: 	movsd	(%r14,%rax,8), %xmm0
    00006b40: 	movl	0x8(%rsp), %eax
    00006b44: 	mulsd	%xmm4, %xmm0
    00006b48: 	addl	%edx, %eax
    00006b4a: 	addsd	(%rbx), %xmm0
    00006b4e: 	cltq
    00006b50: 	movsd	%xmm0, (%rbx)
    00006b54: 	movsd	(%r14,%rax,8), %xmm0
    00006b5a: 	mulsd	%xmm4, %xmm0
    00006b5e: 	addsd	(%r11), %xmm0
    00006b63: 	movsd	%xmm0, (%r11)
.Ltmp789:
    00006b68: 	movl	0xb0(%rsp), %edi
    00006b6f: 	cmpl	%edi, 0xa0(%rsp)
    00006b76: 	jle	.Ltmp792 # Offset: 27510
    00006b7c: 	movq	0x100(%rsp), %rax
    00006b84: 	movq	0xf0(%rsp), %rdi
    00006b8c: 	movq	0xd8(%rsp), %r9
    00006b94: 	leaq	(%r13,%rax), %rsi
    00006b99: 	leaq	(,%rsi,8), %rax
    00006ba1: 	leaq	(%rdi,%rax), %rcx
    00006ba5: 	addq	%r14, %rcx
    00006ba8: 	cmpq	%rcx, 0xf8(%rsp)
    00006bb0: 	movq	0x108(%rsp), %rcx
    00006bb8: 	setb	%dil
    00006bbc: 	addq	%rax, %rcx
    00006bbf: 	addq	%r14, %rcx
    00006bc2: 	cmpq	%rcx, %r9
    00006bc5: 	seta	%cl
    00006bc8: 	orb	%dil, %cl
    00006bcb: 	je	.Ltmp793 # Offset: 27595
    00006bd1: 	cmpb	$0x0, 0x128(%rsp)
    00006bd9: 	je	.Ltmp793 # Offset: 27609
    00006bdf: 	addq	%r14, %rax
    00006be2: 	movapd	%xmm4, %xmm1
    00006be6: 	movq	0x130(%rsp), %rdi
    00006bee: 	movupd	(%r9), %xmm5
    00006bf3: 	movsd	(%rax), %xmm0
    00006bf7: 	unpcklpd	%xmm1, %xmm1
    00006bfb: 	cmpl	$0x1, 0x148(%rsp)
    00006c03: 	movaps	%xmm5, 0x70(%rsp)
    00006c08: 	movhpd	(%rax,%rdi), %xmm0
    00006c0d: 	leaq	(%rax,%rdi,2), %rax
    00006c11: 	mulpd	%xmm1, %xmm0
    00006c15: 	addpd	%xmm5, %xmm0
    00006c19: 	movups	%xmm0, (%r9)
    00006c1d: 	jbe	.Ltmp794 # Offset: 27677
    00006c1f: 	movsd	(%rax), %xmm0
    00006c23: 	movupd	0x10(%r9), %xmm5
    00006c29: 	movhpd	(%rax,%rdi), %xmm0
    00006c2e: 	movaps	%xmm5, 0x70(%rsp)
    00006c33: 	mulpd	%xmm1, %xmm0
    00006c37: 	addpd	%xmm5, %xmm0
    00006c3b: 	movups	%xmm0, 0x10(%r9)
.Ltmp794:
    00006c40: 	movl	0x140(%rsp), %edi
    00006c47: 	cmpl	%edi, 0x138(%rsp)
    00006c4e: 	je	.Ltmp792 # Offset: 27726
    00006c50: 	addl	0x68(%rsp), %edx
    00006c54: 	movq	0x60(%rsp), %rax
    00006c59: 	movslq	%edx, %rdx
    00006c5c: 	mulsd	(%r14,%rdx,8), %xmm4
    00006c62: 	addsd	(%rax), %xmm4
    00006c66: 	movsd	%xmm4, (%rax)
.Ltmp792:
    00006c6a: 	addq	$0x8, 0x88(%rsp)
    00006c73: 	addq	$0x1, %r13
    00006c77: 	addq	$0x8, 0x48(%rsp)
    00006c7d: 	addq	$0x8, 0x50(%rsp)
    00006c83: 	addq	$0x8, 0x28(%rsp)
    00006c89: 	addq	$0x8, 0x58(%rsp)
    00006c8f: 	cmpl	%r13d, 0xc0(%rsp)
    00006c97: 	jg	.Ltmp795 # Offset: 27799
    00006c9d: 	movl	0x210(%rsp), %eax
    00006ca4: 	addl	$0x10, 0x1b4(%rsp)
    00006cac: 	addl	%eax, 0x1b0(%rsp)
    00006cb3: 	addl	%eax, 0x188(%rsp)
    00006cba: 	addl	%eax, 0x1c0(%rsp)
    00006cc1: 	addl	%eax, 0x1b8(%rsp)
    00006cc8: 	movq	0x220(%rsp), %rax
    00006cd0: 	addq	$0x10, 0x150(%rsp)
    00006cd9: 	addq	%rax, 0x1a8(%rsp)
    00006ce1: 	addq	%rax, 0x1a0(%rsp)
    00006ce9: 	addq	%rax, 0x198(%rsp)
    00006cf1: 	addq	%rax, 0x190(%rsp)
    00006cf9: 	movq	0x150(%rsp), %rax
    00006d01: 	subq	$-0x80, 0x40(%rsp)
    00006d07: 	cmpl	%eax, 0xcc(%rsp)
    00006d0e: 	jg	.Ltmp796 # Offset: 27918
.Ltmp788:
    00006d14: 	addq	$0x12c, 0x208(%rsp)
    00006d20: 	movq	0x208(%rsp), %rax
    00006d28: 	cmpl	%eax, 0x84(%rsp)
    00006d2f: 	jg	.Ltmp797 # Offset: 27951
.Ltmp787:
    00006d35: 	xorl	%eax, %eax
.Ltmp800:
    00006d37: 	movq	0x1e0(%rsp), %rbx
    00006d3f: 	movsd	(%rbx,%rax,8), %xmm1
    00006d44: 	movq	0xa8(%rsp), %rbx
    00006d4c: 	movapd	%xmm1, %xmm2
    00006d50: 	andpd	DATAat0x24940(%rip), %xmm2
    00006d58: 	movapd	%xmm1, %xmm0
    00006d5c: 	comisd	DATAat0x24978(%rip), %xmm2
    00006d64: 	subsd	(%rbx,%rax,8), %xmm0
    00006d69: 	jbe	.Ltmp798 # Offset: 28009
    00006d6b: 	divsd	%xmm1, %xmm0
.Ltmp798:
    00006d6f: 	andpd	DATAat0x24940(%rip), %xmm0
    00006d77: 	movsd	DATAat0x24980(%rip), %xmm4
    00006d7f: 	comisd	%xmm0, %xmm4
    00006d83: 	jbe	.Ltmp799 # Offset: 28035
    00006d89: 	addq	$0x1, %rax
    00006d8d: 	cmpq	$0x320, %rax
    00006d93: 	jne	.Ltmp800 # Offset: 28051
    00006d95: 	movq	0x1b58(%rsp), %rax
    00006d9d: 	subq	%fs:0x28, %rax
    00006da6: 	jne	.Ltmp801 # Offset: 28070
    00006dac: 	addq	$0x1b68, %rsp
    00006db3: 	popq	%rbx
    00006db4: 	popq	%rbp
    00006db5: 	popq	%r12
    00006db7: 	popq	%r13
    00006db9: 	popq	%r14
    00006dbb: 	popq	%r15
    00006dbd: 	retq # Offset: 28093
    00006dbe: 	nop # Size: 2
.Ltmp790:
    00006dc0: 	movq	0x88(%rsp), %r9
    00006dc8: 	movl	%edx, 0x70(%rsp)
    00006dcc: 	xorl	%ecx, %ecx
    00006dce: 	movq	0x158(%rsp), %r8
    00006dd6: 	movq	0x160(%rsp), %rdi
    00006dde: 	movq	0x178(%rsp), %rsi
    00006de6: 	movq	0x170(%rsp), %rax
    00006dee: 	movq	0x168(%rsp), %rdx
    00006df6: 	movq	0xe0(%rsp), %r10
    00006dfe: 	addq	%r9, %r8
    00006e01: 	addq	%r9, %rdi
    00006e04: 	addq	%r9, %rsi
    00006e07: 	nopw	(%rax,%rax) # Size: 9
.Ltmp802:
    00006e10: 	movsd	(%r8,%rcx), %xmm0
    00006e16: 	addq	$0x20, %rax
    00006e1a: 	mulsd	%xmm4, %xmm0
    00006e1e: 	addsd	-0x20(%rax), %xmm0
    00006e23: 	movsd	%xmm0, -0x20(%rax)
    00006e28: 	movsd	(%r9,%rcx), %xmm0
    00006e2e: 	mulsd	%xmm4, %xmm0
    00006e32: 	addsd	-0x18(%rax), %xmm0
    00006e37: 	movsd	%xmm0, -0x18(%rax)
    00006e3c: 	movsd	(%rdi,%rcx), %xmm0
    00006e41: 	mulsd	%xmm4, %xmm0
    00006e45: 	addsd	-0x10(%rax), %xmm0
    00006e4a: 	movsd	%xmm0, -0x10(%rax)
    00006e4f: 	movsd	(%rsi,%rcx), %xmm0
    00006e54: 	addq	%r10, %rcx
    00006e57: 	mulsd	%xmm4, %xmm0
    00006e5b: 	addsd	-0x8(%rax), %xmm0
    00006e60: 	movsd	%xmm0, -0x8(%rax)
    00006e65: 	cmpq	%rax, %rdx
    00006e68: 	jne	.Ltmp802 # Offset: 28264
    00006e6a: 	movl	0x70(%rsp), %edx
    00006e6e: 	jmp	.Ltmp789 # Offset: 28270
    00006e73: 	nopl	(%rax,%rax) # Size: 5
.Ltmp793:
    00006e78: 	movsd	(%r14,%rsi,8), %xmm0
    00006e7e: 	movq	0xd8(%rsp), %rax
    00006e86: 	movl	0xa0(%rsp), %edi
    00006e8d: 	mulsd	%xmm4, %xmm0
    00006e91: 	addsd	(%rax), %xmm0
    00006e95: 	movsd	%xmm0, (%rax)
    00006e99: 	cmpl	%edi, 0x180(%rsp)
    00006ea0: 	jge	.Ltmp792 # Offset: 28320
    00006ea6: 	movl	0x1d0(%rsp), %eax
    00006ead: 	addl	%edx, %eax
    00006eaf: 	cltq
    00006eb1: 	movsd	(%r14,%rax,8), %xmm0
    00006eb7: 	movq	0x1c8(%rsp), %rax
    00006ebf: 	mulsd	%xmm4, %xmm0
    00006ec3: 	addsd	(%rax), %xmm0
    00006ec7: 	movsd	%xmm0, (%rax)
    00006ecb: 	cmpl	%edi, 0x1d8(%rsp)
    00006ed2: 	jge	.Ltmp792 # Offset: 28370
    00006ed8: 	movl	0x1f0(%rsp), %eax
    00006edf: 	addl	%edx, %eax
    00006ee1: 	cltq
    00006ee3: 	movsd	(%r14,%rax,8), %xmm0
    00006ee9: 	movq	0x1e8(%rsp), %rax
    00006ef1: 	mulsd	%xmm4, %xmm0
    00006ef5: 	addsd	(%rax), %xmm0
    00006ef9: 	movsd	%xmm0, (%rax)
    00006efd: 	cmpl	%edi, 0x1f8(%rsp)
    00006f04: 	jge	.Ltmp792 # Offset: 28420
    00006f0a: 	movl	0x1fc(%rsp), %eax
    00006f11: 	addl	%edx, %eax
    00006f13: 	cltq
    00006f15: 	mulsd	(%r14,%rax,8), %xmm4
    00006f1b: 	movq	0x200(%rsp), %rax
    00006f23: 	addsd	(%rax), %xmm4
    00006f27: 	movsd	%xmm4, (%rax)
    00006f2b: 	jmp	.Ltmp792 # Offset: 28459
.Ltmp763:
    00006f30: 	movl	0x38(%rsp), %eax
    00006f34: 	movapd	%xmm4, %xmm5
    00006f38: 	movapd	%xmm4, %xmm6
    00006f3c: 	movapd	%xmm4, %xmm3
    00006f40: 	jmp	.Ltmp803 # Offset: 28480
    00006f45: 	nopl	(%rax) # Size: 3
.Ltmp776:
    00006f48: 	movl	0x50(%rsp), %eax
    00006f4c: 	movapd	%xmm5, %xmm3
    00006f50: 	movapd	%xmm5, %xmm4
    00006f54: 	movapd	%xmm5, %xmm6
    00006f58: 	movapd	%xmm5, %xmm10
    00006f5d: 	movapd	%xmm5, %xmm9
    00006f62: 	movapd	%xmm5, %xmm8
    00006f67: 	movapd	%xmm5, %xmm7
    00006f6b: 	jmp	.Ltmp804 # Offset: 28523
.Ltmp740:
    00006f70: 	pxor	%xmm4, %xmm4
    00006f74: 	movl	0x50(%rsp), %eax
    00006f78: 	movapd	%xmm4, %xmm5
    00006f7c: 	movapd	%xmm4, %xmm3
    00006f80: 	jmp	.Ltmp805 # Offset: 28544
.Ltmp751:
    00006f85: 	movapd	%xmm5, %xmm3
    00006f89: 	movapd	%xmm5, %xmm10
    00006f8e: 	movapd	%xmm5, %xmm4
    00006f92: 	xorl	%eax, %eax
    00006f94: 	movapd	%xmm5, %xmm9
    00006f99: 	movapd	%xmm5, %xmm6
    00006f9d: 	movapd	%xmm5, %xmm8
    00006fa2: 	movapd	%xmm5, %xmm7
    00006fa6: 	jmp	.Ltmp806 # Offset: 28582
.Ltmp648:
    00006fab: 	leaq	0x20(%r11), %rdi
    00006faf: 	movq	0x8(%rsp), %rax
    00006fb4: 	xorl	%r15d, %r15d
    00006fb7: 	movq	%rdi, 0xb8(%rsp)
    00006fbf: 	jmp	.Ltmp807 # Offset: 28607
.Ltmp637:
    00006fc4: 	movq	0xa8(%rsp), %rax
    00006fcc: 	movl	0x8(%rsp), %r13d
    00006fd1: 	leaq	(%r14,%rcx), %rsi
.Ltmp808:
    00006fd5: 	movsd	(%rsi), %xmm1
    00006fd9: 	movq	(%rsp), %rbx
    00006fdd: 	addq	$0x20, %rax
    00006fe1: 	mulsd	%xmm0, %xmm1
    00006fe5: 	addsd	-0x20(%rax), %xmm1
    00006fea: 	movsd	%xmm1, -0x20(%rax)
    00006fef: 	movsd	(%rsi,%rbx,8), %xmm1
    00006ff4: 	movq	0xf0(%rsp), %rbx
    00006ffc: 	mulsd	%xmm0, %xmm1
    00007000: 	addsd	-0x18(%rax), %xmm1
    00007005: 	movsd	%xmm1, -0x18(%rax)
    0000700a: 	movsd	(%rsi,%rbx), %xmm1
    0000700f: 	movq	0x108(%rsp), %rbx
    00007017: 	mulsd	%xmm0, %xmm1
    0000701b: 	addsd	-0x10(%rax), %xmm1
    00007020: 	movsd	%xmm1, -0x10(%rax)
    00007025: 	movsd	(%rsi,%rbx), %xmm1
    0000702a: 	addq	0x20(%rsp), %rsi
    0000702f: 	mulsd	%xmm0, %xmm1
    00007033: 	addsd	-0x8(%rax), %xmm1
    00007038: 	movsd	%xmm1, -0x8(%rax)
    0000703d: 	cmpq	0xf8(%rsp), %rax
    00007045: 	jne	.Ltmp808 # Offset: 28741
    00007047: 	movl	%r13d, 0x8(%rsp)
    0000704c: 	jmp	.Ltmp639 # Offset: 28748
.Ltmp658:
    00007051: 	leaq	(%r14,%r13), %rcx
    00007055: 	movq	%rdi, %rax
.Ltmp809:
    00007058: 	movsd	(%rcx), %xmm1
    0000705c: 	movq	(%rsp), %rsi
    00007060: 	addq	$0x20, %rax
    00007064: 	mulsd	%xmm0, %xmm1
    00007068: 	addsd	-0x20(%rax), %xmm1
    0000706d: 	movsd	%xmm1, -0x20(%rax)
    00007072: 	movsd	(%rcx,%rsi,8), %xmm1
    00007077: 	movq	0xb8(%rsp), %rsi
    0000707f: 	mulsd	%xmm0, %xmm1
    00007083: 	addsd	-0x18(%rax), %xmm1
    00007088: 	movsd	%xmm1, -0x18(%rax)
    0000708d: 	movsd	(%rcx,%rsi), %xmm1
    00007092: 	movq	0x110(%rsp), %rsi
    0000709a: 	mulsd	%xmm0, %xmm1
    0000709e: 	addsd	-0x10(%rax), %xmm1
    000070a3: 	movsd	%xmm1, -0x10(%rax)
    000070a8: 	movsd	(%rcx,%rsi), %xmm1
    000070ad: 	addq	0x68(%rsp), %rcx
    000070b2: 	mulsd	%xmm0, %xmm1
    000070b6: 	addsd	-0x8(%rax), %xmm1
    000070bb: 	movsd	%xmm1, -0x8(%rax)
    000070c0: 	cmpq	0xb0(%rsp), %rax
    000070c8: 	jne	.Ltmp809 # Offset: 28872
    000070ca: 	jmp	.Ltmp660 # Offset: 28874
.Ltmp570:
    000070cf: 	xorl	%eax, %eax
    000070d1: 	jmp	.Ltmp810 # Offset: 28881
.Ltmp562:
    000070d6: 	xorl	%eax, %eax
    000070d8: 	jmp	.Ltmp811 # Offset: 28888
.Ltmp542:
    000070dd: 	xorl	%eax, %eax
    000070df: 	jmp	.Ltmp812 # Offset: 28895
.Ltmp537:
    000070e4: 	xorl	%eax, %eax
    000070e6: 	jmp	.Ltmp813 # Offset: 28902
.Ltmp550:
    000070eb: 	leaq	DATAat0x243a8(%rip), %rsi
    000070f2: 	movl	$0x1, %edi
    000070f7: 	xorl	%eax, %eax
    000070f9: 	callq	__printf_chk@PLT # Offset: 28921
    000070fe: 	jmp	.Ltmp814 # Offset: 28926
.Ltmp799:
    00007103: 	movq	0x1b58(%rsp), %rax
    0000710b: 	subq	%fs:0x28, %rax
    00007114: 	jne	.Ltmp801 # Offset: 28948
    0000711a: 	addq	$0x1b68, %rsp
    00007121: 	leaq	DATAat0x24008(%rip), %rsi
    00007128: 	movl	$0x1, %edi
    0000712d: 	xorl	%eax, %eax
    0000712f: 	popq	%rbx
    00007130: 	popq	%rbp
    00007131: 	popq	%r12
    00007133: 	popq	%r13
    00007135: 	popq	%r14
    00007137: 	popq	%r15
    00007139: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 28985
.Ltmp785:
    0000713e: 	leaq	DATAat0x24040(%rip), %rsi
    00007145: 	movl	$0x1, %edi
    0000714a: 	xorl	%eax, %eax
    0000714c: 	callq	__printf_chk@PLT # Offset: 29004
    00007151: 	jmp	.Ltmp815 # Offset: 29009
.Ltmp772:
    00007156: 	leaq	DATAat0x24078(%rip), %rsi
    0000715d: 	movl	$0x1, %edi
    00007162: 	xorl	%eax, %eax
    00007164: 	callq	__printf_chk@PLT # Offset: 29028
    00007169: 	jmp	.Ltmp816 # Offset: 29033
.Ltmp759:
    0000716e: 	leaq	DATAat0x240b0(%rip), %rsi
    00007175: 	movl	$0x1, %edi
    0000717a: 	xorl	%eax, %eax
    0000717c: 	callq	__printf_chk@PLT # Offset: 29052
    00007181: 	jmp	.Ltmp817 # Offset: 29057
.Ltmp748:
    00007186: 	leaq	DATAat0x240e8(%rip), %rsi
    0000718d: 	movl	$0x1, %edi
    00007192: 	xorl	%eax, %eax
    00007194: 	callq	__printf_chk@PLT # Offset: 29076
    00007199: 	jmp	.Ltmp818 # Offset: 29081
.Ltmp737:
    0000719e: 	leaq	DATAat0x24120(%rip), %rsi
    000071a5: 	movl	$0x1, %edi
    000071aa: 	xorl	%eax, %eax
    000071ac: 	callq	__printf_chk@PLT # Offset: 29100
    000071b1: 	jmp	.Ltmp819 # Offset: 29105
.Ltmp708:
    000071b6: 	leaq	DATAat0x24158(%rip), %rsi
    000071bd: 	movl	$0x1, %edi
    000071c2: 	xorl	%eax, %eax
    000071c4: 	callq	__printf_chk@PLT # Offset: 29124
    000071c9: 	jmp	.Ltmp820 # Offset: 29129
.Ltmp696:
    000071ce: 	leaq	DATAat0x24188(%rip), %rsi
    000071d5: 	movl	$0x1, %edi
    000071da: 	xorl	%eax, %eax
    000071dc: 	callq	__printf_chk@PLT # Offset: 29148
    000071e1: 	jmp	.Ltmp821 # Offset: 29153
.Ltmp687:
    000071e6: 	leaq	DATAat0x241b8(%rip), %rsi
    000071ed: 	movl	$0x1, %edi
    000071f2: 	xorl	%eax, %eax
    000071f4: 	callq	__printf_chk@PLT # Offset: 29172
    000071f9: 	jmp	.Ltmp822 # Offset: 29177
.Ltmp676:
    000071fe: 	leaq	DATAat0x241e8(%rip), %rsi
    00007205: 	movl	$0x1, %edi
    0000720a: 	xorl	%eax, %eax
    0000720c: 	callq	__printf_chk@PLT # Offset: 29196
    00007211: 	jmp	.Ltmp823 # Offset: 29201
.Ltmp666:
    00007216: 	leaq	DATAat0x24218(%rip), %rsi
    0000721d: 	movl	$0x1, %edi
    00007222: 	xorl	%eax, %eax
    00007224: 	callq	__printf_chk@PLT # Offset: 29220
    00007229: 	jmp	.Ltmp824 # Offset: 29225
.Ltmp662:
    0000722e: 	movq	0x118(%rsp), %rsi
    00007236: 	movl	0xcc(%rsp), %r9d
    0000723e: 	movsd	(%r14,%rsi,8), %xmm1
    00007244: 	mulsd	%xmm0, %xmm1
    00007248: 	addsd	(%rcx), %xmm1
    0000724c: 	movsd	%xmm1, (%rcx)
    00007250: 	leal	0x1(%rax), %ecx
    00007253: 	cmpl	%ecx, %r9d
    00007256: 	jle	.Ltmp661 # Offset: 29270
    0000725c: 	movl	0x100(%rsp), %ecx
    00007263: 	leaq	0x8(%rdi,%r10), %rsi
    00007268: 	addl	%r15d, %ecx
    0000726b: 	leal	(%rcx,%rdx), %r8d
    0000726f: 	movslq	%r8d, %r8
    00007272: 	movsd	(%r14,%r8,8), %xmm1
    00007278: 	mulsd	%xmm0, %xmm1
    0000727c: 	addsd	(%rsi), %xmm1
    00007280: 	movsd	%xmm1, (%rsi)
    00007284: 	leal	0x2(%rax), %esi
    00007287: 	cmpl	%esi, %r9d
    0000728a: 	jle	.Ltmp661 # Offset: 29322
    00007290: 	addl	%r15d, %ecx
    00007293: 	leaq	0x10(%rdi,%r10), %r8
    00007298: 	addl	$0x3, %eax
    0000729b: 	leal	(%rcx,%rdx), %esi
    0000729e: 	movslq	%esi, %rsi
    000072a1: 	movsd	(%r14,%rsi,8), %xmm1
    000072a7: 	mulsd	%xmm0, %xmm1
    000072ab: 	addsd	(%r8), %xmm1
    000072b0: 	movsd	%xmm1, (%r8)
    000072b5: 	cmpl	%eax, %r9d
    000072b8: 	jle	.Ltmp661 # Offset: 29368
    000072be: 	addl	%r15d, %ecx
    000072c1: 	leaq	0x18(%rdi,%r10), %rax
    000072c6: 	addl	%edx, %ecx
    000072c8: 	movslq	%ecx, %rdx
    000072cb: 	mulsd	(%r14,%rdx,8), %xmm0
    000072d1: 	addsd	(%rax), %xmm0
    000072d5: 	movsd	%xmm0, (%rax)
    000072d9: 	jmp	.Ltmp661 # Offset: 29401
.Ltmp657:
    000072de: 	xorl	%eax, %eax
    000072e0: 	jmp	.Ltmp825 # Offset: 29408
.Ltmp645:
    000072e5: 	leaq	DATAat0x24248(%rip), %rsi
    000072ec: 	movl	$0x1, %edi
    000072f1: 	xorl	%eax, %eax
    000072f3: 	callq	__printf_chk@PLT # Offset: 29427
    000072f8: 	jmp	.Ltmp826 # Offset: 29432
.Ltmp641:
    000072fd: 	movq	0x110(%rsp), %rbx
    00007305: 	movsd	(%r14,%rbx,8), %xmm1
    0000730b: 	movl	0xcc(%rsp), %ebx
    00007312: 	mulsd	%xmm0, %xmm1
    00007316: 	addsd	(%rsi), %xmm1
    0000731a: 	movsd	%xmm1, (%rsi)
    0000731e: 	leal	0x1(%rax), %esi
    00007321: 	cmpl	%esi, %ebx
    00007323: 	jle	.Ltmp640 # Offset: 29475
    00007329: 	movl	0xc0(%rsp), %r8d
    00007331: 	movl	0x84(%rsp), %r13d
    00007339: 	movq	0xa8(%rsp), %r12
    00007341: 	addl	%r13d, %r8d
    00007344: 	leal	(%r8,%rdx), %esi
    00007348: 	leaq	0x8(%r12,%rbp), %rdi
    0000734d: 	movslq	%esi, %rsi
    00007350: 	movsd	(%r14,%rsi,8), %xmm1
    00007356: 	leal	0x2(%rax), %esi
    00007359: 	mulsd	%xmm0, %xmm1
    0000735d: 	addsd	(%rdi), %xmm1
    00007361: 	movsd	%xmm1, (%rdi)
    00007365: 	cmpl	%esi, %ebx
    00007367: 	jle	.Ltmp640 # Offset: 29543
    0000736d: 	addl	%r13d, %r8d
    00007370: 	leaq	0x10(%r12,%rbp), %rdi
    00007375: 	addl	$0x3, %eax
    00007378: 	leal	(%r8,%rdx), %esi
    0000737c: 	movslq	%esi, %rsi
    0000737f: 	movsd	(%r14,%rsi,8), %xmm1
    00007385: 	mulsd	%xmm0, %xmm1
    00007389: 	addsd	(%rdi), %xmm1
    0000738d: 	movsd	%xmm1, (%rdi)
    00007391: 	cmpl	%eax, %ebx
    00007393: 	jle	.Ltmp640 # Offset: 29587
    00007399: 	movl	%r13d, %eax
    0000739c: 	leaq	0x18(%r12,%rbp), %rsi
    000073a1: 	addl	%r8d, %eax
    000073a4: 	jmp	.Ltmp827 # Offset: 29604
.Ltmp636:
    000073a9: 	xorl	%eax, %eax
    000073ab: 	jmp	.Ltmp828 # Offset: 29611
.Ltmp624:
    000073b0: 	leaq	DATAat0x24278(%rip), %rsi
    000073b7: 	movl	$0x1, %edi
    000073bc: 	xorl	%eax, %eax
    000073be: 	callq	__printf_chk@PLT # Offset: 29630
    000073c3: 	jmp	.Ltmp829 # Offset: 29635
.Ltmp612:
    000073c8: 	leaq	DATAat0x242a8(%rip), %rsi
    000073cf: 	movl	$0x1, %edi
    000073d4: 	xorl	%eax, %eax
    000073d6: 	callq	__printf_chk@PLT # Offset: 29654
    000073db: 	jmp	.Ltmp830 # Offset: 29659
.Ltmp602:
    000073e0: 	leaq	DATAat0x242a8(%rip), %rsi
    000073e7: 	movl	$0x1, %edi
    000073ec: 	xorl	%eax, %eax
    000073ee: 	callq	__printf_chk@PLT # Offset: 29678
    000073f3: 	jmp	.Ltmp831 # Offset: 29683
.Ltmp592:
    000073f8: 	leaq	DATAat0x242d8(%rip), %rsi
    000073ff: 	movl	$0x1, %edi
    00007404: 	xorl	%eax, %eax
    00007406: 	callq	__printf_chk@PLT # Offset: 29702
    0000740b: 	jmp	.Ltmp832 # Offset: 29707
.Ltmp582:
    00007410: 	leaq	DATAat0x24308(%rip), %rsi
    00007417: 	movl	$0x1, %edi
    0000741c: 	xorl	%eax, %eax
    0000741e: 	callq	__printf_chk@PLT # Offset: 29726
    00007423: 	jmp	.Ltmp833 # Offset: 29731
.Ltmp574:
    00007428: 	leaq	DATAat0x24330(%rip), %rsi
    0000742f: 	movl	$0x1, %edi
    00007434: 	xorl	%eax, %eax
    00007436: 	callq	__printf_chk@PLT # Offset: 29750
    0000743b: 	jmp	.Ltmp834 # Offset: 29755
.Ltmp566:
    00007440: 	leaq	DATAat0x24358(%rip), %rsi
    00007447: 	movl	$0x1, %edi
    0000744c: 	xorl	%eax, %eax
    0000744e: 	callq	__printf_chk@PLT # Offset: 29774
    00007453: 	jmp	.Ltmp835 # Offset: 29779
.Ltmp558:
    00007458: 	leaq	DATAat0x24380(%rip), %rsi
    0000745f: 	movl	$0x1, %edi
    00007464: 	xorl	%eax, %eax
    00007466: 	callq	__printf_chk@PLT # Offset: 29798
    0000746b: 	jmp	.Ltmp836 # Offset: 29803
.Ltmp535:
    00007470: 	movl	0xcc(%rsp), %r9d
    00007478: 	testl	%r9d, %r9d
    0000747b: 	jg	.Ltmp837 # Offset: 29819
.Ltmp536:
    00007481: 	movq	0xa8(%rsp), %rax
    00007489: 	leaq	0x1908(%rax), %rbx
    00007490: 	movq	$0x0, (%rax)
    00007497: 	movq	%rbx, 0xa0(%rsp)
    0000749f: 	leaq	0x8(%rax), %rbx
    000074a3: 	movq	$0x0, 0x18f8(%rax)
    000074ae: 	movq	%rbx, 0x40(%rsp)
    000074b3: 	andq	$-0x8, %rbx
    000074b7: 	subq	%rbx, %rax
    000074ba: 	movq	%rbx, %rdi
    000074bd: 	movq	%rax, %rcx
    000074c0: 	xorl	%eax, %eax
    000074c2: 	addl	$0x1900, %ecx
    000074c8: 	shrl	$0x3, %ecx
    000074cb: 	rep		stosq	%rax, %es:(%rdi)
    000074ce: 	jmp	.Ltmp546 # Offset: 29902
.Ltmp626:
    000074d3: 	movl	$0x0, 0x50(%rsp)
    000074db: 	movl	0x50(%rsp), %ebx
    000074df: 	jmp	.Ltmp838 # Offset: 29919
.Ltmp801:
    000074e4: 	callq	__stack_chk_fail@PLT # Offset: 29924
DWARF CFI Instructions:
    <empty>
End of Function "_Z16verify_matvecmulIdEvPT_S1_S1_ii"

Binary Function "_Z9check_sumIfEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 85
  State       : disassembled
  Address     : 0x155c0
  Size        : 0x76
  MaxSize     : 0x80
  Offset      : 0x155c0
  Section     : .text
  Orc Section : .local.text._Z9check_sumIfEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB084:
    00000000: 	endbr64
    00000004: 	movss	DATAat0x24990(%rip), %xmm2
    0000000c: 	pxor	%xmm1, %xmm1
    00000010: 	cvtsd2ss	init_value(%rip), %xmm1
    00000018: 	mulss	%xmm1, %xmm2
    0000001c: 	mulss	%xmm1, %xmm2
    00000020: 	movaps	%xmm0, %xmm1
    00000023: 	subss	%xmm2, %xmm1
    00000027: 	movaps	%xmm0, %xmm2
    0000002a: 	andps	DATAat0x24930(%rip), %xmm2
    00000031: 	cvtss2sd	%xmm2, %xmm2
    00000035: 	comisd	DATAat0x24968(%rip), %xmm2
    0000003d: 	jbe	.Ltmp839 # Offset: 61
    0000003f: 	divss	%xmm0, %xmm1
.Ltmp839:
    00000043: 	movsd	DATAat0x24970(%rip), %xmm0
    0000004b: 	cvtss2sd	%xmm1, %xmm1
    0000004f: 	andpd	DATAat0x24940(%rip), %xmm1
    00000057: 	comisd	%xmm1, %xmm0
    0000005b: 	jbe	.Ltmp840 # Offset: 91
    0000005d: 	retq # Offset: 93
    0000005e: 	nop # Size: 2
.Ltmp840:
    00000060: 	movq	(%rdi), %rdx
    00000063: 	leaq	DATAat0x2455f(%rip), %rsi
    0000006a: 	movl	$0x1, %edi
    0000006f: 	xorl	%eax, %eax
    00000071: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 113
DWARF CFI Instructions:
    <empty>
End of Function "_Z9check_sumIfEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9check_sumIdEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 86
  State       : disassembled
  Address     : 0x15640
  Size        : 0x6e
  MaxSize     : 0x70
  Offset      : 0x15640
  Section     : .text
  Orc Section : .local.text._Z9check_sumIdEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB085:
    00000000: 	endbr64
    00000004: 	movsd	init_value(%rip), %xmm1
    0000000c: 	movsd	DATAat0x24988(%rip), %xmm2
    00000014: 	movapd	%xmm0, %xmm3
    00000018: 	mulsd	%xmm1, %xmm2
    0000001c: 	mulsd	%xmm1, %xmm2
    00000020: 	movapd	%xmm0, %xmm1
    00000024: 	subsd	%xmm2, %xmm1
    00000028: 	movq	DATAat0x24940(%rip), %xmm2
    00000030: 	andpd	%xmm2, %xmm3
    00000034: 	comisd	DATAat0x24978(%rip), %xmm3
    0000003c: 	jbe	.Ltmp841 # Offset: 60
    0000003e: 	divsd	%xmm0, %xmm1
.Ltmp841:
    00000042: 	movsd	DATAat0x24980(%rip), %xmm0
    0000004a: 	andpd	%xmm2, %xmm1
    0000004e: 	comisd	%xmm1, %xmm0
    00000052: 	jbe	.Ltmp842 # Offset: 82
    00000054: 	retq # Offset: 84
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp842:
    00000058: 	movq	(%rdi), %rdx
    0000005b: 	leaq	DATAat0x2455f(%rip), %rsi
    00000062: 	movl	$0x1, %edi
    00000067: 	xorl	%eax, %eax
    00000069: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 105
DWARF CFI Instructions:
    <empty>
End of Function "_Z9check_sumIdEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_" after disassembly {
  Number      : 87
  State       : disassembled
  Address     : 0x156b0
  Size        : 0x328
  MaxSize     : 0x330
  Offset      : 0x156b0
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB086:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rsi, %rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x18, %rsp
    00000015: 	movq	0x48(%rdi), %r12
    00000019: 	movq	0x28(%rdi), %rsi
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x8(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	movq	0x30(%rdi), %rax
    00000031: 	subq	0x38(%rdi), %rax
    00000035: 	movq	%r12, %r13
    00000038: 	sarq	$0x5, %rax
    0000003c: 	subq	%rsi, %r13
    0000003f: 	movq	%r13, %rcx
    00000042: 	sarq	$0x3, %rcx
    00000046: 	cmpq	$0x1, %r12
    0000004a: 	movq	%rcx, %rdx
    0000004d: 	adcq	$-0x1, %rdx
    00000051: 	shlq	$0x4, %rdx
    00000055: 	addq	%rdx, %rax
    00000058: 	movq	0x20(%rdi), %rdx
    0000005c: 	subq	0x10(%rdi), %rdx
    00000060: 	sarq	$0x5, %rdx
    00000064: 	addq	%rdx, %rax
    00000067: 	movabsq	$0x3ffffffffffffff, %rdx
    00000071: 	cmpq	%rdx, %rax
    00000074: 	je	.Ltmp843 # Offset: 116
    0000007a: 	movq	0x8(%rdi), %rdx
    0000007e: 	movq	%rdi, %rbx
    00000081: 	movq	(%rdi), %rdi
    00000084: 	movq	%r12, %rax
    00000087: 	subq	%rdi, %rax
    0000008a: 	movq	%rdx, %r8
    0000008d: 	sarq	$0x3, %rax
    00000091: 	subq	%rax, %r8
    00000094: 	cmpq	$0x1, %r8
    00000098: 	jbe	.Ltmp844 # Offset: 152
.Ltmp855:
    0000009e: 	movl	$0x200, %edi
    000000a3: 	callq	_Znwm@PLT # Offset: 163
    000000a8: 	movq	%rax, 0x8(%r12)
    000000ad: 	movq	0x30(%rbx), %r13
    000000b1: 	movq	0x8(%rbp), %r12
    000000b5: 	leaq	0x10(%r13), %rdi
    000000b9: 	movq	%rdi, (%r13)
    000000bd: 	movq	(%rbp), %r14
    000000c1: 	movq	%r14, %rax
    000000c4: 	addq	%r12, %rax
    000000c7: 	je	.Ltmp845 # Offset: 199
    000000c9: 	testq	%r14, %r14
    000000cc: 	je	.Ltmp846 # Offset: 204
.Ltmp845:
    000000d2: 	movq	%r12, (%rsp)
    000000d6: 	cmpq	$0xf, %r12
    000000da: 	ja	.Ltmp847 # Offset: 218
    000000e0: 	cmpq	$0x1, %r12
    000000e4: 	jne	.Ltmp848 # Offset: 228
    000000e6: 	movzbl	(%r14), %eax
    000000ea: 	movb	%al, 0x10(%r13)
.Ltmp850:
    000000ee: 	movq	%r12, 0x8(%r13)
    000000f2: 	movb	$0x0, (%rdi,%r12)
    000000f7: 	movq	0x48(%rbx), %rdx
    000000fb: 	movq	0x8(%rdx), %rax
    000000ff: 	addq	$0x8, %rdx
    00000103: 	movq	%rdx, %xmm1
    00000108: 	movq	%rax, %xmm0
    0000010d: 	addq	$0x200, %rax
    00000113: 	punpcklqdq	%xmm0, %xmm0
    00000117: 	movups	%xmm0, 0x30(%rbx)
    0000011b: 	movq	%rax, %xmm0
    00000120: 	punpcklqdq	%xmm1, %xmm0
    00000124: 	movups	%xmm0, 0x40(%rbx)
    00000128: 	movq	0x8(%rsp), %rax
    0000012d: 	subq	%fs:0x28, %rax
    00000136: 	jne	.Ltmp849 # Offset: 310
    0000013c: 	addq	$0x18, %rsp
    00000140: 	popq	%rbx
    00000141: 	popq	%rbp
    00000142: 	popq	%r12
    00000144: 	popq	%r13
    00000146: 	popq	%r14
    00000148: 	popq	%r15
    0000014a: 	retq # Offset: 330
    0000014b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp848:
    00000150: 	testq	%r12, %r12
    00000153: 	je	.Ltmp850 # Offset: 339
    00000155: 	jmp	.Ltmp851 # Offset: 341
    0000015a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp844:
    00000160: 	leaq	0x2(%rcx), %r14
    00000164: 	leaq	(%r14,%r14), %rax
    00000168: 	cmpq	%rax, %rdx
    0000016b: 	ja	.Ltmp852 # Offset: 363
    00000171: 	testq	%rdx, %rdx
    00000174: 	movl	$0x1, %eax
    00000179: 	cmovneq	%rdx, %rax
    0000017d: 	leaq	0x2(%rdx,%rax), %r15
    00000182: 	movq	%r15, %rax
    00000185: 	shrq	$0x3c, %rax
    00000189: 	jne	.Ltmp853 # Offset: 393
    0000018f: 	leaq	(,%r15,8), %rdi
    00000197: 	callq	_Znwm@PLT # Offset: 407
    0000019c: 	movq	0x28(%rbx), %rsi
    000001a0: 	movq	%rax, %r12
    000001a3: 	movq	%r15, %rax
    000001a6: 	subq	%r14, %rax
    000001a9: 	shrq	%rax
    000001ac: 	leaq	(%r12,%rax,8), %r14
    000001b0: 	movq	0x48(%rbx), %rax
    000001b4: 	leaq	0x8(%rax), %rdx
    000001b8: 	cmpq	%rsi, %rdx
    000001bb: 	je	.Ltmp854 # Offset: 443
    000001bd: 	subq	%rsi, %rdx
    000001c0: 	movq	%r14, %rdi
    000001c3: 	callq	memmove@PLT # Offset: 451
.Ltmp854:
    000001c8: 	movq	0x8(%rbx), %rax
    000001cc: 	movq	(%rbx), %rdi
    000001cf: 	leaq	(,%rax,8), %rsi
    000001d7: 	callq	_ZdlPvm@PLT # Offset: 471
    000001dc: 	movq	%r12, (%rbx)
    000001df: 	movq	%r15, 0x8(%rbx)
.Ltmp857:
    000001e3: 	movq	(%r14), %rax
    000001e6: 	movq	(%r14), %xmm0
    000001eb: 	leaq	(%r14,%r13), %r12
    000001ef: 	movq	%r14, 0x28(%rbx)
    000001f3: 	movq	%r12, 0x48(%rbx)
    000001f7: 	addq	$0x200, %rax
    000001fd: 	movq	%rax, %xmm2
    00000202: 	punpcklqdq	%xmm2, %xmm0
    00000206: 	movups	%xmm0, 0x18(%rbx)
    0000020a: 	movq	(%r12), %rax
    0000020e: 	movq	(%r12), %xmm0
    00000214: 	addq	$0x200, %rax
    0000021a: 	movq	%rax, %xmm3
    0000021f: 	punpcklqdq	%xmm3, %xmm0
    00000223: 	movups	%xmm0, 0x38(%rbx)
    00000227: 	jmp	.Ltmp855 # Offset: 551
    0000022c: 	nopl	(%rax) # Size: 4
.Ltmp847:
    00000230: 	movq	%rsp, %rsi
    00000233: 	xorl	%edx, %edx
    00000235: 	movq	%r13, %rdi
    00000238: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 568
    0000023d: 	movq	%rax, (%r13)
    00000241: 	movq	%rax, %rdi
    00000244: 	movq	(%rsp), %rax
    00000248: 	movq	%rax, 0x10(%r13)
.Ltmp851:
    0000024c: 	movq	%r12, %rdx
    0000024f: 	movq	%r14, %rsi
    00000252: 	callq	memcpy@PLT # Offset: 594
    00000257: 	movq	(%rsp), %r12
    0000025b: 	movq	(%r13), %rdi
    0000025f: 	jmp	.Ltmp850 # Offset: 607
    00000264: 	nopl	(%rax) # Size: 4
.Ltmp852:
    00000268: 	subq	%r14, %rdx
    0000026b: 	addq	$0x8, %r12
    0000026f: 	shrq	%rdx
    00000272: 	leaq	(%rdi,%rdx,8), %r14
    00000276: 	movq	%r12, %rdx
    00000279: 	subq	%rsi, %rdx
    0000027c: 	cmpq	%r14, %rsi
    0000027f: 	jbe	.Ltmp856 # Offset: 639
    00000281: 	cmpq	%r12, %rsi
    00000284: 	je	.Ltmp857 # Offset: 644
    0000028a: 	movq	%r14, %rdi
    0000028d: 	callq	memmove@PLT # Offset: 653
    00000292: 	jmp	.Ltmp857 # Offset: 658
    00000297: 	nopw	(%rax,%rax) # Size: 9
.Ltmp856:
    000002a0: 	cmpq	%r12, %rsi
    000002a3: 	je	.Ltmp857 # Offset: 675
    000002a9: 	leaq	0x8(%r13), %rdi
    000002ad: 	subq	%rdx, %rdi
    000002b0: 	addq	%r14, %rdi
    000002b3: 	callq	memmove@PLT # Offset: 691
    000002b8: 	jmp	.Ltmp857 # Offset: 696
.Ltmp846:
    000002bd: 	leaq	DATAat0x24520(%rip), %rdi
    000002c4: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 708
    000002c9: 	nopl	(%rax) # Size: 7
.Ltmp853:
    000002d0: 	shrq	$0x3d, %r15
    000002d4: 	je	.Ltmp858 # Offset: 724
    000002d6: 	callq	_ZSt28__throw_bad_array_new_lengthv@PLT # Offset: 726
.Ltmp858:
    000002db: 	callq	_ZSt17__throw_bad_allocv@PLT # Offset: 731
.Ltmp843:
    000002e0: 	leaq	DATAat0x24570(%rip), %rdi
    000002e7: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 743
.Ltmp849:
    000002ec: 	callq	__stack_chk_fail@PLT # Offset: 748
    000002f1: 	endbr64
    000002f5: 	movq	%rax, %rdi
    000002f8: 	callq	__cxa_begin_catch@PLT # Offset: 760
    000002fd: 	movq	0x48(%rbx), %rax
    00000301: 	movl	$0x200, %esi
    00000306: 	movq	0x8(%rax), %rdi
    0000030a: 	callq	_ZdlPvm@PLT # Offset: 778
    0000030f: 	callq	__cxa_rethrow@PLT # Offset: 783
    00000314: 	endbr64
    00000318: 	movq	%rax, %rbp
    0000031b: 	callq	__cxa_end_catch@PLT # Offset: 795
    00000320: 	movq	%rbp, %rdi
    00000323: 	callq	_Unwind_Resume@PLT # Offset: 803
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_" after disassembly {
  Number      : 88
  State       : disassembled
  Address     : 0x159e0
  Size        : 0x10c
  MaxSize     : 0x110
  Offset      : 0x159e0
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB087:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movq	0x30(%rdi), %rbx
    00000015: 	movq	%fs:0x28, %rax
    0000001e: 	movq	%rax, 0x8(%rsp)
    00000023: 	xorl	%eax, %eax
    00000025: 	movq	0x40(%rdi), %rax
    00000029: 	subq	$0x20, %rax
    0000002d: 	cmpq	%rax, %rbx
    00000030: 	je	.Ltmp859 # Offset: 48
    00000036: 	leaq	0x10(%rbx), %rdi
    0000003a: 	movq	0x8(%rsi), %r12
    0000003e: 	movq	%rdi, (%rbx)
    00000041: 	movq	(%rsi), %r13
    00000044: 	movq	%r13, %rax
    00000047: 	addq	%r12, %rax
    0000004a: 	je	.Ltmp860 # Offset: 74
    0000004c: 	testq	%r13, %r13
    0000004f: 	je	.Ltmp861 # Offset: 79
.Ltmp860:
    00000055: 	movq	%r12, (%rsp)
    00000059: 	cmpq	$0xf, %r12
    0000005d: 	ja	.Ltmp862 # Offset: 93
    0000005f: 	cmpq	$0x1, %r12
    00000063: 	jne	.Ltmp863 # Offset: 99
    00000069: 	movzbl	(%r13), %eax
    0000006e: 	movb	%al, 0x10(%rbx)
.Ltmp865:
    00000071: 	movq	%r12, 0x8(%rbx)
    00000075: 	movb	$0x0, (%rdi,%r12)
    0000007a: 	addq	$0x20, 0x30(%rbp)
    0000007f: 	movq	0x8(%rsp), %rax
    00000084: 	subq	%fs:0x28, %rax
    0000008d: 	jne	.Ltmp864 # Offset: 141
    0000008f: 	addq	$0x18, %rsp
    00000093: 	popq	%rbx
    00000094: 	popq	%rbp
    00000095: 	popq	%r12
    00000097: 	popq	%r13
    00000099: 	retq # Offset: 153
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp862:
    000000a0: 	movq	%rbx, %rdi
    000000a3: 	movq	%rsp, %rsi
    000000a6: 	xorl	%edx, %edx
    000000a8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 168
    000000ad: 	movq	%rax, (%rbx)
    000000b0: 	movq	%rax, %rdi
    000000b3: 	movq	(%rsp), %rax
    000000b7: 	movq	%rax, 0x10(%rbx)
.Ltmp866:
    000000bb: 	movq	%r12, %rdx
    000000be: 	movq	%r13, %rsi
    000000c1: 	callq	memcpy@PLT # Offset: 193
    000000c6: 	movq	(%rsp), %r12
    000000ca: 	movq	(%rbx), %rdi
    000000cd: 	jmp	.Ltmp865 # Offset: 205
    000000cf: 	nop # Size: 1
.Ltmp859:
    000000d0: 	movq	0x8(%rsp), %rax
    000000d5: 	subq	%fs:0x28, %rax
    000000de: 	jne	.Ltmp864 # Offset: 222
    000000e0: 	addq	$0x18, %rsp
    000000e4: 	popq	%rbx
    000000e5: 	popq	%rbp
    000000e6: 	popq	%r12
    000000e8: 	popq	%r13
    000000ea: 	jmp	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # TAILCALL  # Offset: 234
    000000ef: 	nop # Size: 1
.Ltmp863:
    000000f0: 	testq	%r12, %r12
    000000f3: 	je	.Ltmp865 # Offset: 243
    000000f9: 	jmp	.Ltmp866 # Offset: 249
.Ltmp861:
    000000fb: 	leaq	DATAat0x24520(%rip), %rdi
    00000102: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 258
.Ltmp864:
    00000107: 	callq	__stack_chk_fail@PLT # Offset: 263
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_"

Binary Function "_Z14test_matvecmulIf21matvecmul_JI_blocked1IfEEvPKT_PS2_S4_iiT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 89
  State       : disassembled
  Address     : 0x15af0
  Size        : 0x4f0
  MaxSize     : 0x4f0
  Offset      : 0x15af0
  Section     : .text
  Orc Section : .local.text._Z14test_matvecmulIf21matvecmul_JI_blocked1IfEEvPKT_PS2_S4_iiT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB088:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdx, %r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x98, %rsp
    00000018: 	movq	"_ZL7gLabels/1"+48(%rip), %rbx
    0000001f: 	movq	%rdi, 0x50(%rsp)
    00000024: 	movq	%rsi, 0x48(%rsp)
    00000029: 	movl	%ecx, 0x68(%rsp)
    0000002d: 	movl	%r8d, 0x58(%rsp)
    00000032: 	movq	%r9, 0x60(%rsp)
    00000037: 	movq	%fs:0x28, %rax
    00000040: 	movq	%rax, 0x88(%rsp)
    00000048: 	xorl	%eax, %eax
    0000004a: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000051: 	subq	$0x20, %rax
    00000055: 	cmpq	%rax, %rbx
    00000058: 	je	.Ltmp867 # Offset: 88
    0000005e: 	leaq	0x10(%rbx), %rdi
    00000062: 	movq	0x8(%r9), %r12
    00000066: 	movq	%rdi, (%rbx)
    00000069: 	movq	(%r9), %rbp
    0000006c: 	movq	%rbp, %rax
    0000006f: 	addq	%r12, %rax
    00000072: 	je	.Ltmp868 # Offset: 114
    00000074: 	testq	%rbp, %rbp
    00000077: 	je	.Ltmp869 # Offset: 119
.Ltmp868:
    0000007d: 	movq	%r12, 0x80(%rsp)
    00000085: 	cmpq	$0xf, %r12
    00000089: 	ja	.Ltmp870 # Offset: 137
    0000008f: 	cmpq	$0x1, %r12
    00000093: 	jne	.Ltmp871 # Offset: 147
    00000099: 	movzbl	(%rbp), %eax
    0000009d: 	movb	%al, 0x10(%rbx)
.Ltmp888:
    000000a0: 	movq	%r12, 0x8(%rbx)
    000000a4: 	movb	$0x0, (%rdi,%r12)
    000000a9: 	addq	$0x20, "_ZL7gLabels/1"+48(%rip)
.Ltmp887:
    000000b1: 	callq	clock@PLT # Offset: 177
    000000b6: 	movq	%rax, start_time(%rip)
    000000bd: 	movl	iterations(%rip), %eax
    000000c3: 	movl	%eax, 0x6c(%rsp)
    000000c7: 	testl	%eax, %eax
    000000c9: 	jle	.Ltmp872 # Offset: 201
    000000cf: 	movl	0x68(%rsp), %eax
    000000d3: 	movq	0x48(%rsp), %rbx
    000000d8: 	movl	$0x0, 0x5c(%rsp)
    000000e0: 	movslq	0x58(%rsp), %r14
    000000e5: 	subl	$0x1, %eax
    000000e8: 	leaq	(%rbx,%rax,4), %rax
    000000ec: 	leaq	(,%r14,4), %r15
    000000f4: 	movq	%rax, (%rsp)
    000000f8: 	movq	%rbx, %rax
    000000fb: 	leaq	0xc88(%rbx), %rbx
    00000102: 	movq	%r15, %rbp
    00000105: 	addq	$0x8, %rax
    00000109: 	movq	%rbx, 0x70(%rsp)
    0000010e: 	movq	%r14, %r15
    00000111: 	movq	%r13, %r14
    00000114: 	movq	%rax, 0x78(%rsp)
.Ltmp880:
    00000119: 	movq	0x48(%rsp), %rax
    0000011e: 	movq	$0x0, (%rax)
    00000125: 	movq	0x70(%rsp), %rbx
    0000012a: 	movq	$0x0, -0x10(%rbx)
    00000132: 	movq	0x78(%rsp), %rdi
    00000137: 	andq	$-0x8, %rdi
    0000013b: 	subq	%rdi, %rax
    0000013e: 	movq	%rax, %rcx
    00000141: 	xorl	%eax, %eax
    00000143: 	addl	$0xc80, %ecx
    00000149: 	shrl	$0x3, %ecx
    0000014c: 	rep		stosq	%rax, %es:(%rdi)
    0000014f: 	movl	0x58(%rsp), %edx
    00000153: 	testl	%edx, %edx
    00000155: 	jle	.Ltmp873 # Offset: 341
    0000015b: 	movl	0x68(%rsp), %eax
    0000015f: 	testl	%eax, %eax
    00000161: 	jle	.Ltmp873 # Offset: 353
    00000167: 	movq	%r14, 0x40(%rsp)
    0000016c: 	movq	0x50(%rsp), %r13
    00000171: 	movq	%r15, %rbx
    00000174: 	movq	%rbp, %r15
    00000177: 	movq	$0x0, 0x38(%rsp)
.Ltmp879:
    00000180: 	movq	0x38(%rsp), %rdi
    00000185: 	movl	0x58(%rsp), %eax
    00000189: 	leal	0x20(%rdi), %r8d
    0000018d: 	movl	%edi, %r9d
    00000190: 	cmpl	%eax, %r8d
    00000193: 	cmovgl	%eax, %r8d
    00000197: 	movl	%r8d, %r12d
    0000019a: 	subl	%edi, %r12d
    0000019d: 	movl	%r12d, %eax
    000001a0: 	movl	%r12d, %r11d
    000001a3: 	leal	-0x1(%r12), %r10d
    000001a8: 	shrl	$0x2, %eax
    000001ab: 	andl	$-0x4, %r11d
    000001af: 	leal	-0x1(%rax), %ecx
    000001b2: 	movl	%edi, %eax
    000001b4: 	addq	$0x1, %rcx
    000001b8: 	addl	%r11d, %eax
    000001bb: 	shlq	$0x4, %rcx
    000001bf: 	cmpl	$0x2, %r10d
    000001c3: 	cmovbel	%edi, %eax
    000001c6: 	movq	0x50(%rsp), %rdi
    000001cb: 	leal	0x1(%rax), %esi
    000001ce: 	movslq	%eax, %rbp
    000001d1: 	addl	$0x2, %eax
    000001d4: 	movl	%eax, 0x24(%rsp)
    000001d8: 	cltq
    000001da: 	leaq	(%rdi,%rbp,4), %rdx
    000001de: 	movl	%esi, 0x20(%rsp)
    000001e2: 	movslq	%esi, %rsi
    000001e5: 	movq	%rax, 0x30(%rsp)
    000001ea: 	leaq	(%rdi,%rax,4), %rax
    000001ee: 	movq	%rdx, 0x8(%rsp)
    000001f3: 	leaq	(%rdi,%rsi,4), %rdx
    000001f7: 	xorl	%edi, %edi
    000001f9: 	movq	%rax, 0x28(%rsp)
    000001fe: 	movq	%rsi, 0x10(%rsp)
    00000203: 	movq	0x48(%rsp), %rsi
    00000208: 	movq	%rdx, 0x18(%rsp)
    0000020d: 	movq	0x40(%rsp), %rdx
    00000212: 	nopw	(%rax,%rax) # Size: 6
.Ltmp878:
    00000218: 	movss	(%rsi), %xmm1
    0000021c: 	cmpl	%r9d, %r8d
    0000021f: 	jle	.Ltmp874 # Offset: 543
    00000225: 	cmpl	$0x2, %r10d
    00000229: 	jbe	.Ltmp875 # Offset: 553
    0000022b: 	xorl	%eax, %eax
    0000022d: 	nopl	(%rax) # Size: 3
.Ltmp876:
    00000230: 	movups	(%r13,%rax), %xmm0
    00000236: 	movups	(%rdx,%rax), %xmm3
    0000023a: 	addq	$0x10, %rax
    0000023e: 	mulps	%xmm3, %xmm0
    00000241: 	addss	%xmm0, %xmm1
    00000245: 	movaps	%xmm0, %xmm2
    00000248: 	shufps	$0x55, %xmm0, %xmm2
    0000024c: 	addss	%xmm1, %xmm2
    00000250: 	movaps	%xmm0, %xmm1
    00000253: 	unpckhps	%xmm0, %xmm1
    00000256: 	shufps	$0xff, %xmm0, %xmm0
    0000025a: 	addss	%xmm2, %xmm1
    0000025e: 	addss	%xmm0, %xmm1
    00000262: 	cmpq	%rcx, %rax
    00000265: 	jne	.Ltmp876 # Offset: 613
    00000267: 	cmpl	%r12d, %r11d
    0000026a: 	je	.Ltmp874 # Offset: 618
.Ltmp875:
    0000026c: 	leaq	(%rbp,%rdi), %rax
    00000271: 	movss	(%r14,%rax,4), %xmm0
    00000277: 	movq	0x8(%rsp), %rax
    0000027c: 	mulss	(%rax), %xmm0
    00000280: 	addss	%xmm0, %xmm1
    00000284: 	cmpl	0x20(%rsp), %r8d
    00000289: 	jle	.Ltmp874 # Offset: 649
    0000028b: 	movq	0x10(%rsp), %rax
    00000290: 	addq	%rdi, %rax
    00000293: 	movss	(%r14,%rax,4), %xmm0
    00000299: 	movq	0x18(%rsp), %rax
    0000029e: 	mulss	(%rax), %xmm0
    000002a2: 	addss	%xmm0, %xmm1
    000002a6: 	cmpl	0x24(%rsp), %r8d
    000002ab: 	jle	.Ltmp874 # Offset: 683
    000002ad: 	movq	0x30(%rsp), %rax
    000002b2: 	addq	%rdi, %rax
    000002b5: 	movss	(%r14,%rax,4), %xmm0
    000002bb: 	movq	0x28(%rsp), %rax
    000002c0: 	mulss	(%rax), %xmm0
    000002c4: 	addss	%xmm0, %xmm1
.Ltmp874:
    000002c8: 	movss	%xmm1, (%rsi)
    000002cc: 	leaq	0x4(%rsi), %rax
    000002d0: 	addq	%rbx, %rdi
    000002d3: 	addq	%r15, %rdx
    000002d6: 	cmpq	(%rsp), %rsi
    000002da: 	je	.Ltmp877 # Offset: 730
    000002dc: 	movq	%rax, %rsi
    000002df: 	jmp	.Ltmp878 # Offset: 735
    000002e4: 	nopl	(%rax) # Size: 4
.Ltmp877:
    000002e8: 	addq	$0x20, 0x38(%rsp)
    000002ee: 	subq	$-0x80, %r13
    000002f2: 	movq	0x38(%rsp), %rax
    000002f7: 	subq	$-0x80, 0x40(%rsp)
    000002fd: 	cmpl	%eax, 0x58(%rsp)
    00000301: 	jg	.Ltmp879 # Offset: 769
    00000307: 	movq	%r15, %rbp
    0000030a: 	movq	%rbx, %r15
.Ltmp873:
    0000030d: 	addl	$0x1, 0x5c(%rsp)
    00000312: 	movl	0x5c(%rsp), %eax
    00000316: 	cmpl	0x6c(%rsp), %eax
    0000031a: 	jne	.Ltmp880 # Offset: 794
.Ltmp872:
    00000320: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000327: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    0000032e: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000335: 	je	.Ltmp881 # Offset: 821
.Ltmp886:
    0000033b: 	movq	-0x20(%rax), %rbp
    0000033f: 	callq	clock@PLT # Offset: 831
    00000344: 	pxor	%xmm0, %xmm0
    00000348: 	movq	%rax, end_time(%rip)
    0000034f: 	movq	%rbp, %rdi
    00000352: 	subq	start_time(%rip), %rax
    00000359: 	cvtsi2sd	%rax, %xmm0
    0000035e: 	divsd	DATAat0x24960(%rip), %xmm0
    00000366: 	callq	_Z13record_resultdPKc # Offset: 870
    0000036b: 	movq	0x48(%rsp), %rax
    00000370: 	pxor	%xmm1, %xmm1
    00000374: 	leaq	0xc80(%rax), %rdx
.Ltmp882:
    0000037b: 	movups	(%rax), %xmm0
    0000037e: 	addq	$0x10, %rax
    00000382: 	addss	%xmm0, %xmm1
    00000386: 	movaps	%xmm0, %xmm2
    00000389: 	shufps	$0x55, %xmm0, %xmm2
    0000038d: 	addss	%xmm2, %xmm1
    00000391: 	movaps	%xmm0, %xmm2
    00000394: 	unpckhps	%xmm0, %xmm2
    00000397: 	shufps	$0xff, %xmm0, %xmm0
    0000039b: 	addss	%xmm2, %xmm1
    0000039f: 	addss	%xmm0, %xmm1
    000003a3: 	cmpq	%rdx, %rax
    000003a6: 	jne	.Ltmp882 # Offset: 934
    000003a8: 	movss	DATAat0x24990(%rip), %xmm2
    000003b0: 	pxor	%xmm0, %xmm0
    000003b4: 	cvtsd2ss	init_value(%rip), %xmm0
    000003bc: 	mulss	%xmm0, %xmm2
    000003c0: 	mulss	%xmm0, %xmm2
    000003c4: 	movaps	%xmm1, %xmm0
    000003c7: 	subss	%xmm2, %xmm0
    000003cb: 	movaps	%xmm1, %xmm2
    000003ce: 	andps	DATAat0x24930(%rip), %xmm2
    000003d5: 	cvtss2sd	%xmm2, %xmm2
    000003d9: 	comisd	DATAat0x24968(%rip), %xmm2
    000003e1: 	jbe	.Ltmp883 # Offset: 993
    000003e3: 	divss	%xmm1, %xmm0
.Ltmp883:
    000003e7: 	movsd	DATAat0x24970(%rip), %xmm1
    000003ef: 	cvtss2sd	%xmm0, %xmm0
    000003f3: 	andpd	DATAat0x24940(%rip), %xmm0
    000003fb: 	comisd	%xmm0, %xmm1
    000003ff: 	jbe	.Ltmp884 # Offset: 1023
    00000401: 	movq	0x88(%rsp), %rax
    00000409: 	subq	%fs:0x28, %rax
    00000412: 	jne	.Ltmp885 # Offset: 1042
    00000418: 	addq	$0x98, %rsp
    0000041f: 	popq	%rbx
    00000420: 	popq	%rbp
    00000421: 	popq	%r12
    00000423: 	popq	%r13
    00000425: 	popq	%r14
    00000427: 	popq	%r15
    00000429: 	retq # Offset: 1065
.Ltmp881:
    0000042a: 	movq	-0x8(%rdx), %rax
    0000042e: 	addq	$0x200, %rax
    00000434: 	jmp	.Ltmp886 # Offset: 1076
.Ltmp867:
    00000439: 	movq	%r9, %rsi
    0000043c: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000443: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1091
    00000448: 	jmp	.Ltmp887 # Offset: 1096
.Ltmp884:
    0000044d: 	movq	0x88(%rsp), %rax
    00000455: 	subq	%fs:0x28, %rax
    0000045e: 	jne	.Ltmp885 # Offset: 1118
    00000464: 	movq	0x60(%rsp), %rax
    00000469: 	leaq	DATAat0x2455f(%rip), %rsi
    00000470: 	movl	$0x1, %edi
    00000475: 	movq	(%rax), %rdx
    00000478: 	addq	$0x98, %rsp
    0000047f: 	xorl	%eax, %eax
    00000481: 	popq	%rbx
    00000482: 	popq	%rbp
    00000483: 	popq	%r12
    00000485: 	popq	%r13
    00000487: 	popq	%r14
    00000489: 	popq	%r15
    0000048b: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 1163
.Ltmp871:
    00000490: 	testq	%r12, %r12
    00000493: 	je	.Ltmp888 # Offset: 1171
    00000499: 	jmp	.Ltmp889 # Offset: 1177
    0000049b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp870:
    000004a0: 	movq	%rbx, %rdi
    000004a3: 	leaq	0x80(%rsp), %rsi
    000004ab: 	xorl	%edx, %edx
    000004ad: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1197
    000004b2: 	movq	%rax, (%rbx)
    000004b5: 	movq	%rax, %rdi
    000004b8: 	movq	0x80(%rsp), %rax
    000004c0: 	movq	%rax, 0x10(%rbx)
.Ltmp889:
    000004c4: 	movq	%r12, %rdx
    000004c7: 	movq	%rbp, %rsi
    000004ca: 	callq	memcpy@PLT # Offset: 1226
    000004cf: 	movq	0x80(%rsp), %r12
    000004d7: 	movq	(%rbx), %rdi
    000004da: 	jmp	.Ltmp888 # Offset: 1242
.Ltmp869:
    000004df: 	leaq	DATAat0x24520(%rip), %rdi
    000004e6: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1254
.Ltmp885:
    000004eb: 	callq	__stack_chk_fail@PLT # Offset: 1259
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_matvecmulIf21matvecmul_JI_blocked1IfEEvPKT_PS2_S4_iiT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z14test_matvecmulIf21matvecmul_IJ_blocked1IfEEvPKT_PS2_S4_iiT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 90
  State       : disassembled
  Address     : 0x15fe0
  Size        : 0x610
  MaxSize     : 0x610
  Offset      : 0x15fe0
  Section     : .text
  Orc Section : .local.text._Z14test_matvecmulIf21matvecmul_IJ_blocked1IfEEvPKT_PS2_S4_iiT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB089:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdx, %r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0xb8, %rsp
    00000018: 	movq	"_ZL7gLabels/1"+48(%rip), %rbx
    0000001f: 	movq	%rdi, 0x18(%rsp)
    00000024: 	movq	%rsi, 0x58(%rsp)
    00000029: 	movl	%ecx, 0x68(%rsp)
    0000002d: 	movl	%r8d, 0x74(%rsp)
    00000032: 	movq	%r9, 0x80(%rsp)
    0000003a: 	movq	%fs:0x28, %rax
    00000043: 	movq	%rax, 0xa8(%rsp)
    0000004b: 	xorl	%eax, %eax
    0000004d: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000054: 	subq	$0x20, %rax
    00000058: 	cmpq	%rax, %rbx
    0000005b: 	je	.Ltmp890 # Offset: 91
    00000061: 	leaq	0x10(%rbx), %rdi
    00000065: 	movq	0x8(%r9), %r12
    00000069: 	movq	%rdi, (%rbx)
    0000006c: 	movq	(%r9), %rbp
    0000006f: 	movq	%rbp, %rax
    00000072: 	addq	%r12, %rax
    00000075: 	je	.Ltmp891 # Offset: 117
    00000077: 	testq	%rbp, %rbp
    0000007a: 	je	.Ltmp892 # Offset: 122
.Ltmp891:
    00000080: 	movq	%r12, 0xa0(%rsp)
    00000088: 	cmpq	$0xf, %r12
    0000008c: 	ja	.Ltmp893 # Offset: 140
    00000092: 	cmpq	$0x1, %r12
    00000096: 	jne	.Ltmp894 # Offset: 150
    0000009c: 	movzbl	(%rbp), %eax
    000000a0: 	movb	%al, 0x10(%rbx)
.Ltmp913:
    000000a3: 	movq	%r12, 0x8(%rbx)
    000000a7: 	movb	$0x0, (%rdi,%r12)
    000000ac: 	addq	$0x20, "_ZL7gLabels/1"+48(%rip)
.Ltmp912:
    000000b4: 	callq	clock@PLT # Offset: 180
    000000b9: 	movq	%rax, start_time(%rip)
    000000c0: 	movl	iterations(%rip), %eax
    000000c6: 	movl	%eax, 0x8c(%rsp)
    000000cd: 	testl	%eax, %eax
    000000cf: 	jle	.Ltmp895 # Offset: 207
    000000d5: 	movl	$0x0, 0x88(%rsp)
    000000e0: 	movl	0x74(%rsp), %ecx
    000000e4: 	imull	$0x1e, %ecx, %eax
    000000e7: 	movl	%eax, 0x70(%rsp)
    000000eb: 	movslq	%ecx, %rax
    000000ee: 	movq	%rax, %rbp
    000000f1: 	leaq	(,%rax,4), %r15
    000000f9: 	leaq	(%rax,%rax,2), %rax
    000000fd: 	leaq	(,%rax,4), %r14
    00000105: 	movq	0x58(%rsp), %rax
    0000010a: 	shlq	$0x4, %rbp
    0000010e: 	leaq	0xc88(%rax), %rbx
    00000115: 	movq	%rbx, 0x98(%rsp)
    0000011d: 	leaq	0x8(%rax), %rbx
    00000121: 	addq	$0x4, %rax
    00000125: 	movq	%rax, 0x78(%rsp)
    0000012a: 	movq	%rbx, 0x90(%rsp)
    00000132: 	leal	-0x1(%rcx), %ebx
    00000135: 	movq	%rbx, 0x20(%rsp)
    0000013a: 	movq	%r14, %rbx
    0000013d: 	movq	%r13, %r14
    00000140: 	movq	%rbp, %r13
.Ltmp905:
    00000143: 	movq	0x58(%rsp), %rax
    00000148: 	movq	$0x0, (%rax)
    0000014f: 	movq	0x98(%rsp), %rcx
    00000157: 	movq	$0x0, -0x10(%rcx)
    0000015f: 	movq	0x90(%rsp), %rdi
    00000167: 	andq	$-0x8, %rdi
    0000016b: 	subq	%rdi, %rax
    0000016e: 	movq	%rax, %rcx
    00000171: 	xorl	%eax, %eax
    00000173: 	addl	$0xc80, %ecx
    00000179: 	shrl	$0x3, %ecx
    0000017c: 	rep		stosq	%rax, %es:(%rdi)
    0000017f: 	movl	0x68(%rsp), %edx
    00000183: 	testl	%edx, %edx
    00000185: 	jle	.Ltmp896 # Offset: 389
    0000018b: 	movl	0x74(%rsp), %eax
    0000018f: 	testl	%eax, %eax
    00000191: 	jle	.Ltmp896 # Offset: 401
    00000197: 	movq	$0x0, 0x40(%rsp)
    000001a0: 	movq	0x58(%rsp), %r12
    000001a5: 	movl	$0x0, 0x6c(%rsp)
    000001ad: 	nopl	(%rax) # Size: 3
.Ltmp904:
    000001b0: 	movq	0x40(%rsp), %rcx
    000001b5: 	movl	0x68(%rsp), %eax
    000001b9: 	leal	0x1e(%rcx), %r10d
    000001bd: 	cmpl	%eax, %r10d
    000001c0: 	cmovgl	%eax, %r10d
    000001c4: 	cmpl	%ecx, %r10d
    000001c7: 	jle	.Ltmp897 # Offset: 455
    000001cd: 	movq	%rcx, %r8
    000001d0: 	movl	%r10d, %esi
    000001d3: 	movslq	0x6c(%rsp), %rax
    000001d8: 	movl	0x74(%rsp), %r9d
    000001dd: 	subl	%r8d, %esi
    000001e0: 	xorl	%edi, %edi
    000001e2: 	movq	0x58(%rsp), %rbp
    000001e7: 	movl	%esi, %edx
    000001e9: 	leaq	(%r14,%rax,4), %rcx
    000001ed: 	movl	%esi, 0x2c(%rsp)
    000001f1: 	leaq	-0x1(%rdx), %rax
    000001f5: 	leaq	-0x1(%rdx,%r8), %rdx
    000001fa: 	imulq	%r15, %rax
    000001fe: 	testl	%r9d, %r9d
    00000201: 	cmovnsq	%rax, %rdi
    00000205: 	movq	%rdi, 0x10(%rsp)
    0000020a: 	leaq	(%rbp,%rdx,4), %rdi
    0000020f: 	movq	%rdi, 0x8(%rsp)
    00000214: 	movl	$0x0, %edi
    00000219: 	cmovnsq	%rdi, %rax
    0000021d: 	movq	%rax, (%rsp)
    00000221: 	movl	%esi, %eax
    00000223: 	shrl	$0x2, %eax
    00000226: 	subl	$0x1, %eax
    00000229: 	shlq	$0x4, %rax
    0000022d: 	leaq	0x10(%r12,%rax), %rdi
    00000232: 	movl	%esi, %eax
    00000234: 	andl	$-0x4, %eax
    00000237: 	movl	%eax, 0x30(%rsp)
    0000023b: 	addl	%r8d, %eax
    0000023e: 	movslq	%eax, %rdx
    00000241: 	leaq	(%rbp,%rdx,4), %r11
    00000246: 	movl	%r9d, %edx
    00000249: 	imull	%eax, %edx
    0000024c: 	movl	%edx, 0x3c(%rsp)
    00000250: 	leal	0x1(%rax), %edx
    00000253: 	addl	$0x2, %eax
    00000256: 	movl	%edx, 0x34(%rsp)
    0000025a: 	movslq	%edx, %rdx
    0000025d: 	leaq	(%rbp,%rdx,4), %rbp
    00000262: 	movl	0x34(%rsp), %edx
    00000266: 	movl	%eax, 0x38(%rsp)
    0000026a: 	cltq
    0000026c: 	imull	%r9d, %edx
    00000270: 	movl	%edx, 0x50(%rsp)
    00000274: 	movq	0x58(%rsp), %rdx
    00000279: 	leaq	(%rdx,%rax,4), %rax
    0000027d: 	movq	%rax, 0x48(%rsp)
    00000282: 	movl	0x38(%rsp), %eax
    00000286: 	imull	%r9d, %eax
    0000028a: 	movl	%eax, 0x54(%rsp)
    0000028e: 	leaq	(%rdx,%r8,4), %rax
    00000292: 	movq	%rax, 0x60(%rsp)
    00000297: 	leal	-0x1(%rsi), %eax
    0000029a: 	movq	0x78(%rsp), %rsi
    0000029f: 	movl	%eax, 0x28(%rsp)
    000002a3: 	addq	%r8, %rax
    000002a6: 	leaq	(%rsi,%rax,4), %r9
    000002aa: 	xorl	%esi, %esi
    000002ac: 	nopl	(%rax) # Size: 4
.Ltmp901:
    000002b0: 	movq	0x18(%rsp), %rax
    000002b5: 	movq	0x10(%rsp), %rdx
    000002ba: 	movl	%esi, %r8d
    000002bd: 	addq	%rcx, %rdx
    000002c0: 	movss	(%rax,%rsi,4), %xmm3
    000002c5: 	movq	%rcx, %rax
    000002c8: 	subq	%r14, %rax
    000002cb: 	cmpq	%rdx, %r12
    000002ce: 	seta	%dl
    000002d1: 	addq	(%rsp), %rax
    000002d5: 	addq	%r14, %rax
    000002d8: 	cmpq	%rax, 0x8(%rsp)
    000002dd: 	setb	%al
    000002e0: 	orb	%dl, %al
    000002e2: 	je	.Ltmp898 # Offset: 738
    000002e8: 	movaps	%xmm3, %xmm4
    000002eb: 	cmpl	$0x2, 0x28(%rsp)
    000002f0: 	movq	%rcx, %rax
    000002f3: 	movq	%r12, %rdx
    000002f6: 	shufps	$0x0, %xmm4, %xmm4
    000002fa: 	jbe	.Ltmp898 # Offset: 762
.Ltmp899:
    00000300: 	movss	(%rax,%rbx), %xmm0
    00000305: 	movss	(%rax,%r15,2), %xmm1
    0000030b: 	addq	$0x10, %rdx
    0000030f: 	movss	(%rax,%r15), %xmm2
    00000315: 	movups	-0x10(%rdx), %xmm5
    00000319: 	unpcklps	%xmm0, %xmm1
    0000031c: 	movss	(%rax), %xmm0
    00000320: 	addq	%r13, %rax
    00000323: 	unpcklps	%xmm2, %xmm0
    00000326: 	movlhps	%xmm1, %xmm0
    00000329: 	mulps	%xmm4, %xmm0
    0000032c: 	addps	%xmm5, %xmm0
    0000032f: 	movups	%xmm0, -0x10(%rdx)
    00000333: 	cmpq	%rdi, %rdx
    00000336: 	jne	.Ltmp899 # Offset: 822
    00000338: 	movl	0x30(%rsp), %edx
    0000033c: 	cmpl	%edx, 0x2c(%rsp)
    00000340: 	je	.Ltmp900 # Offset: 832
    00000342: 	movl	0x3c(%rsp), %eax
    00000346: 	addl	%r8d, %eax
    00000349: 	cltq
    0000034b: 	movss	(%r14,%rax,4), %xmm0
    00000351: 	mulss	%xmm3, %xmm0
    00000355: 	addss	(%r11), %xmm0
    0000035a: 	movss	%xmm0, (%r11)
    0000035f: 	cmpl	0x34(%rsp), %r10d
    00000364: 	jle	.Ltmp900 # Offset: 868
    00000366: 	movl	0x50(%rsp), %eax
    0000036a: 	addl	%r8d, %eax
    0000036d: 	cltq
    0000036f: 	movss	(%r14,%rax,4), %xmm0
    00000375: 	mulss	%xmm3, %xmm0
    00000379: 	addss	(%rbp), %xmm0
    0000037e: 	movss	%xmm0, (%rbp)
    00000383: 	cmpl	0x38(%rsp), %r10d
    00000388: 	jle	.Ltmp900 # Offset: 904
    0000038a: 	addl	0x54(%rsp), %r8d
    0000038f: 	movq	0x48(%rsp), %rax
    00000394: 	movslq	%r8d, %r8
    00000397: 	mulss	(%r14,%r8,4), %xmm3
    0000039d: 	addss	(%rax), %xmm3
    000003a1: 	movss	%xmm3, (%rax)
.Ltmp900:
    000003a5: 	leaq	0x1(%rsi), %rax
    000003a9: 	addq	$0x4, %rcx
    000003ad: 	cmpq	0x20(%rsp), %rsi
    000003b2: 	je	.Ltmp897 # Offset: 946
.Ltmp903:
    000003b4: 	movq	%rax, %rsi
    000003b7: 	jmp	.Ltmp901 # Offset: 951
    000003bc: 	nopl	(%rax) # Size: 4
.Ltmp898:
    000003c0: 	movq	0x60(%rsp), %rax
    000003c5: 	movq	%rcx, %rdx
    000003c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp902:
    000003d0: 	movss	(%rdx), %xmm0
    000003d4: 	addq	$0x4, %rax
    000003d8: 	addq	%r15, %rdx
    000003db: 	mulss	%xmm3, %xmm0
    000003df: 	addss	-0x4(%rax), %xmm0
    000003e4: 	movss	%xmm0, -0x4(%rax)
    000003e9: 	cmpq	%rax, %r9
    000003ec: 	jne	.Ltmp902 # Offset: 1004
    000003ee: 	leaq	0x1(%rsi), %rax
    000003f2: 	addq	$0x4, %rcx
    000003f6: 	cmpq	0x20(%rsp), %rsi
    000003fb: 	jne	.Ltmp903 # Offset: 1019
    000003fd: 	nopl	(%rax) # Size: 3
.Ltmp897:
    00000400: 	addq	$0x1e, 0x40(%rsp)
    00000406: 	movl	0x70(%rsp), %ecx
    0000040a: 	addq	$0x78, %r12
    0000040e: 	addl	%ecx, 0x6c(%rsp)
    00000412: 	movq	0x40(%rsp), %rax
    00000417: 	cmpl	%eax, 0x68(%rsp)
    0000041b: 	jg	.Ltmp904 # Offset: 1051
.Ltmp896:
    00000421: 	addl	$0x1, 0x88(%rsp)
    00000429: 	movl	0x88(%rsp), %eax
    00000430: 	cmpl	0x8c(%rsp), %eax
    00000437: 	jne	.Ltmp905 # Offset: 1079
.Ltmp895:
    0000043d: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000444: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    0000044b: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000452: 	je	.Ltmp906 # Offset: 1106
.Ltmp911:
    00000458: 	movq	-0x20(%rax), %rbp
    0000045c: 	callq	clock@PLT # Offset: 1116
    00000461: 	pxor	%xmm0, %xmm0
    00000465: 	movq	%rax, end_time(%rip)
    0000046c: 	movq	%rbp, %rdi
    0000046f: 	subq	start_time(%rip), %rax
    00000476: 	cvtsi2sd	%rax, %xmm0
    0000047b: 	divsd	DATAat0x24960(%rip), %xmm0
    00000483: 	callq	_Z13record_resultdPKc # Offset: 1155
    00000488: 	movq	0x58(%rsp), %rax
    0000048d: 	pxor	%xmm1, %xmm1
    00000491: 	leaq	0xc80(%rax), %rdx
.Ltmp907:
    00000498: 	movups	(%rax), %xmm0
    0000049b: 	addq	$0x10, %rax
    0000049f: 	addss	%xmm0, %xmm1
    000004a3: 	movaps	%xmm0, %xmm2
    000004a6: 	shufps	$0x55, %xmm0, %xmm2
    000004aa: 	addss	%xmm2, %xmm1
    000004ae: 	movaps	%xmm0, %xmm2
    000004b1: 	unpckhps	%xmm0, %xmm2
    000004b4: 	shufps	$0xff, %xmm0, %xmm0
    000004b8: 	addss	%xmm2, %xmm1
    000004bc: 	addss	%xmm0, %xmm1
    000004c0: 	cmpq	%rax, %rdx
    000004c3: 	jne	.Ltmp907 # Offset: 1219
    000004c5: 	movss	DATAat0x24990(%rip), %xmm2
    000004cd: 	pxor	%xmm0, %xmm0
    000004d1: 	cvtsd2ss	init_value(%rip), %xmm0
    000004d9: 	mulss	%xmm0, %xmm2
    000004dd: 	mulss	%xmm0, %xmm2
    000004e1: 	movaps	%xmm1, %xmm0
    000004e4: 	subss	%xmm2, %xmm0
    000004e8: 	movaps	%xmm1, %xmm2
    000004eb: 	andps	DATAat0x24930(%rip), %xmm2
    000004f2: 	cvtss2sd	%xmm2, %xmm2
    000004f6: 	comisd	DATAat0x24968(%rip), %xmm2
    000004fe: 	jbe	.Ltmp908 # Offset: 1278
    00000500: 	divss	%xmm1, %xmm0
.Ltmp908:
    00000504: 	movsd	DATAat0x24970(%rip), %xmm1
    0000050c: 	cvtss2sd	%xmm0, %xmm0
    00000510: 	andpd	DATAat0x24940(%rip), %xmm0
    00000518: 	comisd	%xmm0, %xmm1
    0000051c: 	jbe	.Ltmp909 # Offset: 1308
    0000051e: 	movq	0xa8(%rsp), %rax
    00000526: 	subq	%fs:0x28, %rax
    0000052f: 	jne	.Ltmp910 # Offset: 1327
    00000535: 	addq	$0xb8, %rsp
    0000053c: 	popq	%rbx
    0000053d: 	popq	%rbp
    0000053e: 	popq	%r12
    00000540: 	popq	%r13
    00000542: 	popq	%r14
    00000544: 	popq	%r15
    00000546: 	retq # Offset: 1350
.Ltmp906:
    00000547: 	movq	-0x8(%rdx), %rax
    0000054b: 	addq	$0x200, %rax
    00000551: 	jmp	.Ltmp911 # Offset: 1361
.Ltmp890:
    00000556: 	movq	%r9, %rsi
    00000559: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000560: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1376
    00000565: 	jmp	.Ltmp912 # Offset: 1381
.Ltmp909:
    0000056a: 	movq	0xa8(%rsp), %rax
    00000572: 	subq	%fs:0x28, %rax
    0000057b: 	jne	.Ltmp910 # Offset: 1403
    00000581: 	movq	0x80(%rsp), %rax
    00000589: 	leaq	DATAat0x2455f(%rip), %rsi
    00000590: 	movl	$0x1, %edi
    00000595: 	movq	(%rax), %rdx
    00000598: 	addq	$0xb8, %rsp
    0000059f: 	xorl	%eax, %eax
    000005a1: 	popq	%rbx
    000005a2: 	popq	%rbp
    000005a3: 	popq	%r12
    000005a5: 	popq	%r13
    000005a7: 	popq	%r14
    000005a9: 	popq	%r15
    000005ab: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 1451
.Ltmp894:
    000005b0: 	testq	%r12, %r12
    000005b3: 	je	.Ltmp913 # Offset: 1459
    000005b9: 	jmp	.Ltmp914 # Offset: 1465
    000005bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp893:
    000005c0: 	movq	%rbx, %rdi
    000005c3: 	leaq	0xa0(%rsp), %rsi
    000005cb: 	xorl	%edx, %edx
    000005cd: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1485
    000005d2: 	movq	%rax, (%rbx)
    000005d5: 	movq	%rax, %rdi
    000005d8: 	movq	0xa0(%rsp), %rax
    000005e0: 	movq	%rax, 0x10(%rbx)
.Ltmp914:
    000005e4: 	movq	%r12, %rdx
    000005e7: 	movq	%rbp, %rsi
    000005ea: 	callq	memcpy@PLT # Offset: 1514
    000005ef: 	movq	0xa0(%rsp), %r12
    000005f7: 	movq	(%rbx), %rdi
    000005fa: 	jmp	.Ltmp913 # Offset: 1530
.Ltmp892:
    000005ff: 	leaq	DATAat0x24520(%rip), %rdi
    00000606: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1542
.Ltmp910:
    0000060b: 	callq	__stack_chk_fail@PLT # Offset: 1547
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_matvecmulIf21matvecmul_IJ_blocked1IfEEvPKT_PS2_S4_iiT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z14test_matvecmulId21matvecmul_JI_blocked1IdEEvPKT_PS2_S4_iiT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 91
  State       : disassembled
  Address     : 0x165f0
  Size        : 0x419
  MaxSize     : 0x420
  Offset      : 0x165f0
  Section     : .text
  Orc Section : .local.text._Z14test_matvecmulId21matvecmul_JI_blocked1IdEEvPKT_PS2_S4_iiT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB090:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movq	%rdx, %rbx
    00000011: 	subq	$0x68, %rsp
    00000015: 	movq	"_ZL7gLabels/1"+48(%rip), %rbp
    0000001c: 	movq	%rdi, 0x20(%rsp)
    00000021: 	movq	%rsi, 0x18(%rsp)
    00000026: 	movl	%ecx, 0x38(%rsp)
    0000002a: 	movl	%r8d, 0x28(%rsp)
    0000002f: 	movq	%r9, 0x30(%rsp)
    00000034: 	movq	%fs:0x28, %rax
    0000003d: 	movq	%rax, 0x58(%rsp)
    00000042: 	xorl	%eax, %eax
    00000044: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000004b: 	subq	$0x20, %rax
    0000004f: 	cmpq	%rax, %rbp
    00000052: 	je	.Ltmp915 # Offset: 82
    00000058: 	leaq	0x10(%rbp), %rdi
    0000005c: 	movq	0x8(%r9), %r12
    00000060: 	movq	%rdi, (%rbp)
    00000064: 	movq	(%r9), %r13
    00000067: 	movq	%r13, %rax
    0000006a: 	addq	%r12, %rax
    0000006d: 	je	.Ltmp916 # Offset: 109
    0000006f: 	testq	%r13, %r13
    00000072: 	je	.Ltmp917 # Offset: 114
.Ltmp916:
    00000078: 	movq	%r12, 0x50(%rsp)
    0000007d: 	cmpq	$0xf, %r12
    00000081: 	ja	.Ltmp918 # Offset: 129
    00000087: 	cmpq	$0x1, %r12
    0000008b: 	jne	.Ltmp919 # Offset: 139
    00000091: 	movzbl	(%r13), %eax
    00000096: 	movb	%al, 0x10(%rbp)
.Ltmp936:
    00000099: 	movq	%r12, 0x8(%rbp)
    0000009d: 	movb	$0x0, (%rdi,%r12)
    000000a2: 	addq	$0x20, "_ZL7gLabels/1"+48(%rip)
.Ltmp935:
    000000aa: 	callq	clock@PLT # Offset: 170
    000000af: 	movq	%rax, start_time(%rip)
    000000b6: 	movl	iterations(%rip), %eax
    000000bc: 	movl	%eax, 0x3c(%rsp)
    000000c0: 	testl	%eax, %eax
    000000c2: 	jle	.Ltmp920 # Offset: 194
    000000c8: 	movl	0x38(%rsp), %eax
    000000cc: 	movq	0x18(%rsp), %rcx
    000000d1: 	movl	$0x0, 0x2c(%rsp)
    000000d9: 	movslq	0x28(%rsp), %r15
    000000de: 	subl	$0x1, %eax
    000000e1: 	leaq	(%rcx,%rax,8), %rax
    000000e5: 	leaq	(,%r15,8), %r14
    000000ed: 	movq	%rax, (%rsp)
    000000f1: 	movq	%rcx, %rax
    000000f4: 	leaq	0x1908(%rcx), %rcx
    000000fb: 	addq	$0x8, %rax
    000000ff: 	movq	%rcx, 0x40(%rsp)
    00000104: 	movq	%rax, 0x48(%rsp)
.Ltmp928:
    00000109: 	movq	0x18(%rsp), %rax
    0000010e: 	movq	$0x0, (%rax)
    00000115: 	movq	0x40(%rsp), %rcx
    0000011a: 	movq	$0x0, -0x10(%rcx)
    00000122: 	movq	0x48(%rsp), %rdi
    00000127: 	andq	$-0x8, %rdi
    0000012b: 	subq	%rdi, %rax
    0000012e: 	movq	%rax, %rcx
    00000131: 	xorl	%eax, %eax
    00000133: 	addl	$0x1900, %ecx
    00000139: 	shrl	$0x3, %ecx
    0000013c: 	rep		stosq	%rax, %es:(%rdi)
    0000013f: 	movl	0x28(%rsp), %edx
    00000143: 	testl	%edx, %edx
    00000145: 	jle	.Ltmp921 # Offset: 325
    0000014b: 	movl	0x38(%rsp), %eax
    0000014f: 	testl	%eax, %eax
    00000151: 	jle	.Ltmp921 # Offset: 337
    00000157: 	movq	%rbx, 0x10(%rsp)
    0000015c: 	movq	0x20(%rsp), %r9
    00000161: 	movq	$0x0, 0x8(%rsp)
    0000016a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp927:
    00000170: 	movq	0x8(%rsp), %rdi
    00000175: 	movl	0x28(%rsp), %eax
    00000179: 	movq	0x10(%rsp), %rcx
    0000017e: 	movq	0x18(%rsp), %r10
    00000183: 	leal	0x258(%rdi), %ebp
    00000189: 	movl	%edi, %r12d
    0000018c: 	cmpl	%eax, %ebp
    0000018e: 	cmovgl	%eax, %ebp
    00000191: 	movl	%ebp, %r11d
    00000194: 	subl	%edi, %r11d
    00000197: 	movl	%r11d, %eax
    0000019a: 	movl	%r11d, %r13d
    0000019d: 	shrl	%eax
    0000019f: 	andl	$-0x2, %r13d
    000001a3: 	leal	-0x1(%rax), %r8d
    000001a7: 	leal	(%r13,%rdi), %esi
    000001ac: 	movq	0x20(%rsp), %rax
    000001b1: 	addq	$0x1, %r8
    000001b5: 	shlq	$0x4, %r8
    000001b9: 	cmpl	$0x1, %r11d
    000001bd: 	cmovel	%edi, %esi
    000001c0: 	xorl	%edx, %edx
    000001c2: 	movslq	%esi, %rsi
    000001c5: 	leaq	(%rax,%rsi,8), %rdi
    000001c9: 	nopl	(%rax) # Size: 7
.Ltmp926:
    000001d0: 	movsd	(%r10), %xmm0
    000001d5: 	cmpl	%r12d, %ebp
    000001d8: 	jle	.Ltmp922 # Offset: 472
    000001da: 	cmpl	$0x1, %r11d
    000001de: 	je	.Ltmp923 # Offset: 478
    000001e0: 	xorl	%eax, %eax
    000001e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp924:
    000001e8: 	movupd	(%r9,%rax), %xmm2
    000001ee: 	movupd	(%rcx,%rax), %xmm4
    000001f3: 	addq	$0x10, %rax
    000001f7: 	mulpd	%xmm4, %xmm2
    000001fb: 	addsd	%xmm2, %xmm0
    000001ff: 	unpckhpd	%xmm2, %xmm2
    00000203: 	addsd	%xmm2, %xmm0
    00000207: 	cmpq	%rax, %r8
    0000020a: 	jne	.Ltmp924 # Offset: 522
    0000020c: 	cmpl	%r11d, %r13d
    0000020f: 	je	.Ltmp922 # Offset: 527
.Ltmp923:
    00000211: 	leaq	(%rdx,%rsi), %rax
    00000215: 	movsd	(%rbx,%rax,8), %xmm1
    0000021a: 	mulsd	(%rdi), %xmm1
    0000021e: 	addsd	%xmm1, %xmm0
.Ltmp922:
    00000222: 	movsd	%xmm0, (%r10)
    00000227: 	leaq	0x8(%r10), %rax
    0000022b: 	addq	%r15, %rdx
    0000022e: 	addq	%r14, %rcx
    00000231: 	cmpq	(%rsp), %r10
    00000235: 	je	.Ltmp925 # Offset: 565
    00000237: 	movq	%rax, %r10
    0000023a: 	jmp	.Ltmp926 # Offset: 570
    0000023c: 	nopl	(%rax) # Size: 4
.Ltmp925:
    00000240: 	addq	$0x258, 0x8(%rsp)
    00000249: 	addq	$0x12c0, %r9
    00000250: 	movq	0x8(%rsp), %rax
    00000255: 	addq	$0x12c0, 0x10(%rsp)
    0000025e: 	cmpl	%eax, 0x28(%rsp)
    00000262: 	jg	.Ltmp927 # Offset: 610
.Ltmp921:
    00000268: 	addl	$0x1, 0x2c(%rsp)
    0000026d: 	movl	0x2c(%rsp), %eax
    00000271: 	cmpl	0x3c(%rsp), %eax
    00000275: 	jne	.Ltmp928 # Offset: 629
.Ltmp920:
    0000027b: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000282: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00000289: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000290: 	je	.Ltmp929 # Offset: 656
.Ltmp934:
    00000296: 	movq	-0x20(%rax), %rbp
    0000029a: 	callq	clock@PLT # Offset: 666
    0000029f: 	pxor	%xmm0, %xmm0
    000002a3: 	movq	%rax, end_time(%rip)
    000002aa: 	movq	%rbp, %rdi
    000002ad: 	subq	start_time(%rip), %rax
    000002b4: 	cvtsi2sd	%rax, %xmm0
    000002b9: 	divsd	DATAat0x24960(%rip), %xmm0
    000002c1: 	callq	_Z13record_resultdPKc # Offset: 705
    000002c6: 	movq	0x18(%rsp), %rax
    000002cb: 	pxor	%xmm0, %xmm0
    000002cf: 	leaq	0x1900(%rax), %rdx
.Ltmp930:
    000002d6: 	movsd	(%rax), %xmm1
    000002da: 	addq	$0x10, %rax
    000002de: 	addsd	%xmm1, %xmm0
    000002e2: 	movsd	-0x8(%rax), %xmm1
    000002e7: 	addsd	%xmm1, %xmm0
    000002eb: 	cmpq	%rdx, %rax
    000002ee: 	jne	.Ltmp930 # Offset: 750
    000002f0: 	movsd	init_value(%rip), %xmm1
    000002f8: 	movsd	DATAat0x24988(%rip), %xmm2
    00000300: 	movapd	%xmm0, %xmm3
    00000304: 	mulsd	%xmm1, %xmm2
    00000308: 	mulsd	%xmm1, %xmm2
    0000030c: 	movapd	%xmm0, %xmm1
    00000310: 	subsd	%xmm2, %xmm1
    00000314: 	movq	DATAat0x24940(%rip), %xmm2
    0000031c: 	andpd	%xmm2, %xmm3
    00000320: 	comisd	DATAat0x24978(%rip), %xmm3
    00000328: 	jbe	.Ltmp931 # Offset: 808
    0000032a: 	divsd	%xmm0, %xmm1
.Ltmp931:
    0000032e: 	movsd	DATAat0x24980(%rip), %xmm0
    00000336: 	andpd	%xmm2, %xmm1
    0000033a: 	comisd	%xmm1, %xmm0
    0000033e: 	jbe	.Ltmp932 # Offset: 830
    00000340: 	movq	0x58(%rsp), %rax
    00000345: 	subq	%fs:0x28, %rax
    0000034e: 	jne	.Ltmp933 # Offset: 846
    00000354: 	addq	$0x68, %rsp
    00000358: 	popq	%rbx
    00000359: 	popq	%rbp
    0000035a: 	popq	%r12
    0000035c: 	popq	%r13
    0000035e: 	popq	%r14
    00000360: 	popq	%r15
    00000362: 	retq # Offset: 866
.Ltmp929:
    00000363: 	movq	-0x8(%rdx), %rax
    00000367: 	addq	$0x200, %rax
    0000036d: 	jmp	.Ltmp934 # Offset: 877
.Ltmp915:
    00000372: 	movq	%r9, %rsi
    00000375: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000037c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 892
    00000381: 	jmp	.Ltmp935 # Offset: 897
.Ltmp932:
    00000386: 	movq	0x58(%rsp), %rax
    0000038b: 	subq	%fs:0x28, %rax
    00000394: 	jne	.Ltmp933 # Offset: 916
    00000396: 	movq	0x30(%rsp), %rax
    0000039b: 	leaq	DATAat0x2455f(%rip), %rsi
    000003a2: 	movl	$0x1, %edi
    000003a7: 	movq	(%rax), %rdx
    000003aa: 	addq	$0x68, %rsp
    000003ae: 	xorl	%eax, %eax
    000003b0: 	popq	%rbx
    000003b1: 	popq	%rbp
    000003b2: 	popq	%r12
    000003b4: 	popq	%r13
    000003b6: 	popq	%r14
    000003b8: 	popq	%r15
    000003ba: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 954
.Ltmp919:
    000003bf: 	testq	%r12, %r12
    000003c2: 	je	.Ltmp936 # Offset: 962
    000003c8: 	jmp	.Ltmp937 # Offset: 968
    000003ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp918:
    000003d0: 	movq	%rbp, %rdi
    000003d3: 	leaq	0x50(%rsp), %rsi
    000003d8: 	xorl	%edx, %edx
    000003da: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 986
    000003df: 	movq	%rax, (%rbp)
    000003e3: 	movq	%rax, %rdi
    000003e6: 	movq	0x50(%rsp), %rax
    000003eb: 	movq	%rax, 0x10(%rbp)
.Ltmp937:
    000003ef: 	movq	%r12, %rdx
    000003f2: 	movq	%r13, %rsi
    000003f5: 	callq	memcpy@PLT # Offset: 1013
    000003fa: 	movq	0x50(%rsp), %r12
    000003ff: 	movq	(%rbp), %rdi
    00000403: 	jmp	.Ltmp936 # Offset: 1027
.Ltmp917:
    00000408: 	leaq	DATAat0x24520(%rip), %rdi
    0000040f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1039
.Ltmp933:
    00000414: 	callq	__stack_chk_fail@PLT # Offset: 1044
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_matvecmulId21matvecmul_JI_blocked1IdEEvPKT_PS2_S4_iiT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z14test_matvecmulId21matvecmul_IJ_blocked1IdEEvPKT_PS2_S4_iiT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 92
  State       : disassembled
  Address     : 0x16a10
  Size        : 0x508
  MaxSize     : 0x510
  Offset      : 0x16a10
  Section     : .text
  Orc Section : .local.text._Z14test_matvecmulId21matvecmul_IJ_blocked1IdEEvPKT_PS2_S4_iiT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB091:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdx, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x98, %rsp
    00000018: 	movq	"_ZL7gLabels/1"+48(%rip), %rbx
    0000001f: 	movq	%rdi, 0x10(%rsp)
    00000024: 	movq	%rsi, 0x50(%rsp)
    00000029: 	movl	%ecx, 0x40(%rsp)
    0000002d: 	movl	%r8d, 0x58(%rsp)
    00000032: 	movq	%r9, 0x68(%rsp)
    00000037: 	movq	%fs:0x28, %rax
    00000040: 	movq	%rax, 0x88(%rsp)
    00000048: 	xorl	%eax, %eax
    0000004a: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000051: 	subq	$0x20, %rax
    00000055: 	cmpq	%rax, %rbx
    00000058: 	je	.Ltmp938 # Offset: 88
    0000005e: 	leaq	0x10(%rbx), %rdi
    00000062: 	movq	0x8(%r9), %r12
    00000066: 	movq	%rdi, (%rbx)
    00000069: 	movq	(%r9), %rbp
    0000006c: 	movq	%rbp, %rax
    0000006f: 	addq	%r12, %rax
    00000072: 	je	.Ltmp939 # Offset: 114
    00000074: 	testq	%rbp, %rbp
    00000077: 	je	.Ltmp940 # Offset: 119
.Ltmp939:
    0000007d: 	movq	%r12, 0x80(%rsp)
    00000085: 	cmpq	$0xf, %r12
    00000089: 	ja	.Ltmp941 # Offset: 137
    0000008f: 	cmpq	$0x1, %r12
    00000093: 	jne	.Ltmp942 # Offset: 147
    00000099: 	movzbl	(%rbp), %eax
    0000009d: 	movb	%al, 0x10(%rbx)
.Ltmp961:
    000000a0: 	movq	%r12, 0x8(%rbx)
    000000a4: 	movb	$0x0, (%rdi,%r12)
    000000a9: 	addq	$0x20, "_ZL7gLabels/1"+48(%rip)
.Ltmp960:
    000000b1: 	callq	clock@PLT # Offset: 177
    000000b6: 	movq	%rax, start_time(%rip)
    000000bd: 	movl	iterations(%rip), %eax
    000000c3: 	movl	%eax, 0x74(%rsp)
    000000c7: 	testl	%eax, %eax
    000000c9: 	jle	.Ltmp943 # Offset: 201
    000000cf: 	movl	0x58(%rsp), %ebx
    000000d3: 	movl	$0x0, 0x70(%rsp)
    000000db: 	movq	%r15, %r12
    000000de: 	leal	(%rbx,%rbx,2), %eax
    000000e1: 	shll	$0x2, %eax
    000000e4: 	movl	%eax, 0x5c(%rsp)
    000000e8: 	movslq	%ebx, %rax
    000000eb: 	movq	%rax, %r13
    000000ee: 	leaq	(,%rax,8), %r14
    000000f6: 	movq	0x50(%rsp), %rax
    000000fb: 	shlq	$0x4, %r13
    000000ff: 	leaq	0x1908(%rax), %rdi
    00000106: 	addq	$0x8, %rax
    0000010a: 	movq	%r13, %r15
    0000010d: 	movq	%r14, %r13
    00000110: 	movq	%rax, 0x60(%rsp)
    00000115: 	leal	-0x1(%rbx), %eax
    00000118: 	movq	%rdi, 0x78(%rsp)
    0000011d: 	movq	%rax, 0x20(%rsp)
.Ltmp953:
    00000122: 	movq	0x50(%rsp), %rax
    00000127: 	movq	$0x0, (%rax)
    0000012e: 	movq	0x78(%rsp), %rbx
    00000133: 	movq	$0x0, -0x10(%rbx)
    0000013b: 	movq	0x60(%rsp), %rdi
    00000140: 	andq	$-0x8, %rdi
    00000144: 	subq	%rdi, %rax
    00000147: 	movq	%rax, %rcx
    0000014a: 	xorl	%eax, %eax
    0000014c: 	addl	$0x1900, %ecx
    00000152: 	shrl	$0x3, %ecx
    00000155: 	rep		stosq	%rax, %es:(%rdi)
    00000158: 	movl	0x40(%rsp), %edx
    0000015c: 	testl	%edx, %edx
    0000015e: 	jle	.Ltmp944 # Offset: 350
    00000164: 	movl	0x58(%rsp), %eax
    00000168: 	testl	%eax, %eax
    0000016a: 	jle	.Ltmp944 # Offset: 362
    00000170: 	movq	$0x0, 0x30(%rsp)
    00000179: 	movq	0x50(%rsp), %r14
    0000017e: 	movl	$0x0, 0x44(%rsp)
    00000186: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp952:
    00000190: 	movq	0x30(%rsp), %rdi
    00000195: 	movl	0x40(%rsp), %ebx
    00000199: 	movl	%edi, %eax
    0000019b: 	addl	$0xc, %eax
    0000019e: 	cmpl	%ebx, %eax
    000001a0: 	cmovgl	%ebx, %eax
    000001a3: 	cmpl	%edi, %eax
    000001a5: 	jle	.Ltmp945 # Offset: 421
    000001ab: 	subl	%edi, %eax
    000001ad: 	movslq	0x44(%rsp), %rdx
    000001b2: 	movq	%rdi, %rcx
    000001b5: 	movq	0x50(%rsp), %r11
    000001ba: 	leaq	-0x1(%rax), %rbx
    000001be: 	movl	%eax, %ebp
    000001c0: 	leaq	-0x1(%rax,%rcx), %rax
    000001c5: 	xorl	%edi, %edi
    000001c7: 	imulq	%r13, %rbx
    000001cb: 	leaq	(%r12,%rdx,8), %r8
    000001cf: 	movl	0x58(%rsp), %edx
    000001d3: 	movl	%ebp, 0x2c(%rsp)
    000001d7: 	leaq	(%r11,%rax,8), %rax
    000001db: 	testl	%edx, %edx
    000001dd: 	movq	%rax, 0x8(%rsp)
    000001e2: 	movl	$0x0, %eax
    000001e7: 	cmovnsq	%rbx, %rdi
    000001eb: 	cmovnsq	%rax, %rbx
    000001ef: 	movl	%ebp, %eax
    000001f1: 	xorl	%r9d, %r9d
    000001f4: 	shrl	%eax
    000001f6: 	movq	%rdi, 0x48(%rsp)
    000001fb: 	movl	%ebp, %edi
    000001fd: 	subl	$0x1, %eax
    00000200: 	andl	$-0x2, %edi
    00000203: 	shlq	$0x4, %rax
    00000207: 	movl	%edi, 0x28(%rsp)
    0000020b: 	addl	%ecx, %edi
    0000020d: 	leaq	0x10(%r14,%rax), %r10
    00000212: 	movslq	%edi, %rax
    00000215: 	imull	%edx, %edi
    00000218: 	leaq	(%r11,%rax,8), %rsi
    0000021c: 	leaq	(%r11,%rcx,8), %rax
    00000220: 	movq	%rax, 0x38(%rsp)
    00000225: 	leal	-0x1(%rbp), %eax
    00000228: 	movq	0x48(%rsp), %rbp
    0000022d: 	movl	%eax, 0x1c(%rsp)
    00000231: 	addq	%rcx, %rax
    00000234: 	movq	0x60(%rsp), %rcx
    00000239: 	leaq	(%rcx,%rax,8), %r11
    0000023d: 	nopl	(%rax) # Size: 3
.Ltmp949:
    00000240: 	movq	0x10(%rsp), %rcx
    00000245: 	movq	%r8, %rdx
    00000248: 	movl	%r9d, %eax
    0000024b: 	subq	%r12, %rdx
    0000024e: 	movsd	(%rcx,%r9,8), %xmm1
    00000254: 	leaq	(%r8,%rbp), %rcx
    00000258: 	cmpq	%rcx, %r14
    0000025b: 	seta	%cl
    0000025e: 	addq	%rbx, %rdx
    00000261: 	addq	%r12, %rdx
    00000264: 	cmpq	%rdx, 0x8(%rsp)
    00000269: 	setb	%dl
    0000026c: 	orb	%cl, %dl
    0000026e: 	je	.Ltmp946 # Offset: 622
    00000270: 	movapd	%xmm1, %xmm2
    00000274: 	cmpl	$0x2, 0x1c(%rsp)
    00000279: 	movq	%r8, %rcx
    0000027c: 	movq	%r14, %rdx
    0000027f: 	unpcklpd	%xmm2, %xmm2
    00000283: 	jbe	.Ltmp946 # Offset: 643
    00000285: 	nopl	(%rax) # Size: 3
.Ltmp947:
    00000288: 	movsd	(%rcx), %xmm0
    0000028c: 	movupd	(%rdx), %xmm4
    00000290: 	addq	$0x10, %rdx
    00000294: 	movhpd	(%rcx,%r13), %xmm0
    0000029a: 	addq	%r15, %rcx
    0000029d: 	mulpd	%xmm2, %xmm0
    000002a1: 	addpd	%xmm4, %xmm0
    000002a5: 	movups	%xmm0, -0x10(%rdx)
    000002a9: 	cmpq	%rdx, %r10
    000002ac: 	jne	.Ltmp947 # Offset: 684
    000002ae: 	movl	0x28(%rsp), %edx
    000002b2: 	cmpl	%edx, 0x2c(%rsp)
    000002b6: 	je	.Ltmp948 # Offset: 694
    000002b8: 	addl	%edi, %eax
    000002ba: 	movsd	(%rsi), %xmm0
    000002be: 	cltq
    000002c0: 	mulsd	(%r12,%rax,8), %xmm1
    000002c6: 	addsd	%xmm1, %xmm0
    000002ca: 	movsd	%xmm0, (%rsi)
.Ltmp948:
    000002ce: 	leaq	0x1(%r9), %rax
    000002d2: 	addq	$0x8, %r8
    000002d6: 	cmpq	0x20(%rsp), %r9
    000002db: 	je	.Ltmp945 # Offset: 731
.Ltmp951:
    000002dd: 	movq	%rax, %r9
    000002e0: 	jmp	.Ltmp949 # Offset: 736
    000002e5: 	nopl	(%rax) # Size: 3
.Ltmp946:
    000002e8: 	movq	0x38(%rsp), %rax
    000002ed: 	movq	%r8, %rdx
.Ltmp950:
    000002f0: 	movsd	(%rdx), %xmm0
    000002f4: 	addq	$0x8, %rax
    000002f8: 	addq	%r13, %rdx
    000002fb: 	mulsd	%xmm1, %xmm0
    000002ff: 	addsd	-0x8(%rax), %xmm0
    00000304: 	movsd	%xmm0, -0x8(%rax)
    00000309: 	cmpq	%r11, %rax
    0000030c: 	jne	.Ltmp950 # Offset: 780
    0000030e: 	leaq	0x1(%r9), %rax
    00000312: 	addq	$0x8, %r8
    00000316: 	cmpq	0x20(%rsp), %r9
    0000031b: 	jne	.Ltmp951 # Offset: 795
    0000031d: 	nopl	(%rax) # Size: 3
.Ltmp945:
    00000320: 	addq	$0xc, 0x30(%rsp)
    00000326: 	movl	0x5c(%rsp), %ebx
    0000032a: 	addq	$0x60, %r14
    0000032e: 	addl	%ebx, 0x44(%rsp)
    00000332: 	movq	0x30(%rsp), %rax
    00000337: 	cmpl	%eax, 0x40(%rsp)
    0000033b: 	jg	.Ltmp952 # Offset: 827
.Ltmp944:
    00000341: 	addl	$0x1, 0x70(%rsp)
    00000346: 	movl	0x70(%rsp), %eax
    0000034a: 	cmpl	0x74(%rsp), %eax
    0000034e: 	jne	.Ltmp953 # Offset: 846
.Ltmp943:
    00000354: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000035b: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00000362: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000369: 	je	.Ltmp954 # Offset: 873
.Ltmp959:
    0000036f: 	movq	-0x20(%rax), %rbp
    00000373: 	callq	clock@PLT # Offset: 883
    00000378: 	pxor	%xmm0, %xmm0
    0000037c: 	movq	%rax, end_time(%rip)
    00000383: 	movq	%rbp, %rdi
    00000386: 	subq	start_time(%rip), %rax
    0000038d: 	cvtsi2sd	%rax, %xmm0
    00000392: 	divsd	DATAat0x24960(%rip), %xmm0
    0000039a: 	callq	_Z13record_resultdPKc # Offset: 922
    0000039f: 	movq	0x50(%rsp), %rax
    000003a4: 	pxor	%xmm0, %xmm0
    000003a8: 	leaq	0x1900(%rax), %rdx
.Ltmp955:
    000003af: 	movsd	(%rax), %xmm1
    000003b3: 	addq	$0x10, %rax
    000003b7: 	addsd	%xmm1, %xmm0
    000003bb: 	movsd	-0x8(%rax), %xmm1
    000003c0: 	addsd	%xmm1, %xmm0
    000003c4: 	cmpq	%rax, %rdx
    000003c7: 	jne	.Ltmp955 # Offset: 967
    000003c9: 	movsd	init_value(%rip), %xmm1
    000003d1: 	movsd	DATAat0x24988(%rip), %xmm2
    000003d9: 	movapd	%xmm0, %xmm3
    000003dd: 	mulsd	%xmm1, %xmm2
    000003e1: 	mulsd	%xmm1, %xmm2
    000003e5: 	movapd	%xmm0, %xmm1
    000003e9: 	subsd	%xmm2, %xmm1
    000003ed: 	movq	DATAat0x24940(%rip), %xmm2
    000003f5: 	andpd	%xmm2, %xmm3
    000003f9: 	comisd	DATAat0x24978(%rip), %xmm3
    00000401: 	jbe	.Ltmp956 # Offset: 1025
    00000403: 	divsd	%xmm0, %xmm1
.Ltmp956:
    00000407: 	movsd	DATAat0x24980(%rip), %xmm0
    0000040f: 	andpd	%xmm2, %xmm1
    00000413: 	comisd	%xmm1, %xmm0
    00000417: 	jbe	.Ltmp957 # Offset: 1047
    00000419: 	movq	0x88(%rsp), %rax
    00000421: 	subq	%fs:0x28, %rax
    0000042a: 	jne	.Ltmp958 # Offset: 1066
    00000430: 	addq	$0x98, %rsp
    00000437: 	popq	%rbx
    00000438: 	popq	%rbp
    00000439: 	popq	%r12
    0000043b: 	popq	%r13
    0000043d: 	popq	%r14
    0000043f: 	popq	%r15
    00000441: 	retq # Offset: 1089
.Ltmp954:
    00000442: 	movq	-0x8(%rdx), %rax
    00000446: 	addq	$0x200, %rax
    0000044c: 	jmp	.Ltmp959 # Offset: 1100
.Ltmp938:
    00000451: 	movq	%r9, %rsi
    00000454: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000045b: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1115
    00000460: 	jmp	.Ltmp960 # Offset: 1120
.Ltmp957:
    00000465: 	movq	0x88(%rsp), %rax
    0000046d: 	subq	%fs:0x28, %rax
    00000476: 	jne	.Ltmp958 # Offset: 1142
    0000047c: 	movq	0x68(%rsp), %rax
    00000481: 	leaq	DATAat0x2455f(%rip), %rsi
    00000488: 	movl	$0x1, %edi
    0000048d: 	movq	(%rax), %rdx
    00000490: 	addq	$0x98, %rsp
    00000497: 	xorl	%eax, %eax
    00000499: 	popq	%rbx
    0000049a: 	popq	%rbp
    0000049b: 	popq	%r12
    0000049d: 	popq	%r13
    0000049f: 	popq	%r14
    000004a1: 	popq	%r15
    000004a3: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 1187
.Ltmp942:
    000004a8: 	testq	%r12, %r12
    000004ab: 	je	.Ltmp961 # Offset: 1195
    000004b1: 	jmp	.Ltmp962 # Offset: 1201
    000004b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp941:
    000004b8: 	movq	%rbx, %rdi
    000004bb: 	leaq	0x80(%rsp), %rsi
    000004c3: 	xorl	%edx, %edx
    000004c5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1221
    000004ca: 	movq	%rax, (%rbx)
    000004cd: 	movq	%rax, %rdi
    000004d0: 	movq	0x80(%rsp), %rax
    000004d8: 	movq	%rax, 0x10(%rbx)
.Ltmp962:
    000004dc: 	movq	%r12, %rdx
    000004df: 	movq	%rbp, %rsi
    000004e2: 	callq	memcpy@PLT # Offset: 1250
    000004e7: 	movq	0x80(%rsp), %r12
    000004ef: 	movq	(%rbx), %rdi
    000004f2: 	jmp	.Ltmp961 # Offset: 1266
.Ltmp940:
    000004f7: 	leaq	DATAat0x24520(%rip), %rdi
    000004fe: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1278
.Ltmp958:
    00000503: 	callq	__stack_chk_fail@PLT # Offset: 1283
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_matvecmulId21matvecmul_IJ_blocked1IdEEvPKT_PS2_S4_iiT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z14test_matvecmulIf21matvecmul_IJ_blocked2IfEEvPKT_PS2_S4_iiT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 93
  State       : disassembled
  Address     : 0x16f20
  Size        : 0x578
  MaxSize     : 0x580
  Offset      : 0x16f20
  Section     : .text
  Orc Section : .local.text._Z14test_matvecmulIf21matvecmul_IJ_blocked2IfEEvPKT_PS2_S4_iiT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB092:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdx, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0xc8, %rsp
    00000018: 	movq	"_ZL7gLabels/1"+48(%rip), %rbx
    0000001f: 	movq	%rdi, 0x58(%rsp)
    00000024: 	movq	%rsi, 0x68(%rsp)
    00000029: 	movl	%ecx, 0x80(%rsp)
    00000030: 	movl	%r8d, 0x24(%rsp)
    00000035: 	movq	%r9, 0x78(%rsp)
    0000003a: 	movq	%fs:0x28, %rax
    00000043: 	movq	%rax, 0xb8(%rsp)
    0000004b: 	xorl	%eax, %eax
    0000004d: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000054: 	subq	$0x20, %rax
    00000058: 	cmpq	%rax, %rbx
    0000005b: 	je	.Ltmp963 # Offset: 91
    0000005d: 	leaq	0x10(%rbx), %rdi
    00000061: 	movq	0x8(%r9), %r12
    00000065: 	movq	%rdi, (%rbx)
    00000068: 	movq	(%r9), %rbp
    0000006b: 	movq	%rbp, %rax
    0000006e: 	addq	%r12, %rax
    00000071: 	je	.Ltmp964 # Offset: 113
    00000073: 	testq	%rbp, %rbp
    00000076: 	je	.Ltmp965 # Offset: 118
.Ltmp964:
    0000007c: 	movq	%r12, 0xb0(%rsp)
    00000084: 	cmpq	$0xf, %r12
    00000088: 	ja	.Ltmp966 # Offset: 136
    0000008e: 	cmpq	$0x1, %r12
    00000092: 	jne	.Ltmp967 # Offset: 146
    00000098: 	movzbl	(%rbp), %eax
    0000009c: 	movb	%al, 0x10(%rbx)
.Ltmp984:
    0000009f: 	movq	%r12, 0x8(%rbx)
    000000a3: 	movb	$0x0, (%rdi,%r12)
    000000a8: 	addq	$0x20, "_ZL7gLabels/1"+48(%rip)
    000000b0: 	jmp	.Ltmp968 # Offset: 176
.Ltmp963:
    000000b2: 	movq	%r9, %rsi
    000000b5: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000000bc: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 188
.Ltmp968:
    000000c1: 	callq	clock@PLT # Offset: 193
    000000c6: 	movq	%rax, start_time(%rip)
    000000cd: 	movl	iterations(%rip), %eax
    000000d3: 	movl	%eax, 0x84(%rsp)
    000000da: 	testl	%eax, %eax
    000000dc: 	jle	.Ltmp969 # Offset: 220
    000000e2: 	movslq	0x24(%rsp), %r13
    000000e7: 	movl	$0x0, 0x74(%rsp)
    000000ef: 	movq	%r14, 0xa8(%rsp)
    000000f7: 	leal	(%r13,%r13,2), %eax
    000000fc: 	movq	%r13, %r14
    000000ff: 	leal	(%rax,%rax,8), %eax
    00000102: 	cltq
    00000104: 	movq	%rax, 0x88(%rsp)
    0000010c: 	movq	0x68(%rsp), %rax
    00000111: 	leaq	0xc88(%rax), %rdi
    00000118: 	movq	%rdi, 0x98(%rsp)
    00000120: 	leaq	0x8(%rax), %rdi
    00000124: 	addq	$0x4, %rax
    00000128: 	movq	%rdi, 0x90(%rsp)
    00000130: 	movq	%rax, 0xa0(%rsp)
.Ltmp978:
    00000138: 	movq	0x68(%rsp), %rax
    0000013d: 	movq	$0x0, (%rax)
    00000144: 	movq	0x98(%rsp), %rbx
    0000014c: 	movq	$0x0, -0x10(%rbx)
    00000154: 	movq	0x90(%rsp), %rdi
    0000015c: 	andq	$-0x8, %rdi
    00000160: 	subq	%rdi, %rax
    00000163: 	movq	%rax, %rcx
    00000166: 	xorl	%eax, %eax
    00000168: 	addl	$0xc80, %ecx
    0000016e: 	shrl	$0x3, %ecx
    00000171: 	rep		stosq	%rax, %es:(%rdi)
    00000174: 	movl	0x80(%rsp), %edx
    0000017b: 	testl	%edx, %edx
    0000017d: 	jle	.Ltmp970 # Offset: 381
    00000183: 	movl	0x24(%rsp), %eax
    00000187: 	testl	%eax, %eax
    00000189: 	jle	.Ltmp970 # Offset: 393
    0000018f: 	movq	0x68(%rsp), %rax
    00000194: 	movq	%r14, %r12
    00000197: 	movq	$0x0, 0x60(%rsp)
    000001a0: 	movq	$0x0, 0x50(%rsp)
    000001a9: 	movq	%rax, 0x48(%rsp)
.Ltmp977:
    000001ae: 	movq	0x60(%rsp), %rdi
    000001b3: 	movl	0x80(%rsp), %ebx
    000001ba: 	movl	%edi, %eax
    000001bc: 	addl	$0x1b, %eax
    000001bf: 	cmpl	%ebx, %eax
    000001c1: 	cmovgl	%ebx, %eax
    000001c4: 	cmpl	%edi, %eax
    000001c6: 	jle	.Ltmp971 # Offset: 454
    000001cc: 	subl	%edi, %eax
    000001ce: 	movq	0x58(%rsp), %r15
    000001d3: 	movq	0xa0(%rsp), %rbx
    000001db: 	movq	$0x0, 0x18(%rsp)
    000001e4: 	subl	$0x1, %eax
    000001e7: 	movq	0xa8(%rsp), %r13
    000001ef: 	addq	%rdi, %rax
    000001f2: 	leaq	(%rbx,%rax,4), %rax
    000001f6: 	movq	%r13, %r14
    000001f9: 	movq	%rax, %rbx
    000001fc: 	nopl	(%rax) # Size: 4
.Ltmp976:
    00000200: 	movq	0x18(%rsp), %rdx
    00000205: 	movl	0x24(%rsp), %eax
    00000209: 	leal	0x14(%rdx), %esi
    0000020c: 	movl	%edx, %r9d
    0000020f: 	cmpl	%eax, %esi
    00000211: 	cmovgl	%eax, %esi
    00000214: 	movl	%esi, %edi
    00000216: 	subl	%edx, %edi
    00000218: 	movl	%edi, %eax
    0000021a: 	movl	%edi, %r11d
    0000021d: 	leal	-0x1(%rdi), %r10d
    00000221: 	shrl	$0x2, %eax
    00000224: 	andl	$-0x4, %r11d
    00000228: 	subl	$0x1, %eax
    0000022b: 	addq	$0x1, %rax
    0000022f: 	shlq	$0x4, %rax
    00000233: 	movq	%rax, 0x10(%rsp)
    00000238: 	movl	%edx, %eax
    0000023a: 	addl	%r11d, %eax
    0000023d: 	cmpl	$0x2, %r10d
    00000241: 	cmovbel	%edx, %eax
    00000244: 	movq	0x58(%rsp), %rdx
    00000249: 	movslq	%eax, %rbp
    0000024c: 	leaq	(%rdx,%rbp,4), %rcx
    00000250: 	movq	%rcx, 0x8(%rsp)
    00000255: 	leal	0x1(%rax), %ecx
    00000258: 	addl	$0x2, %eax
    0000025b: 	movl	%ecx, 0x20(%rsp)
    0000025f: 	movslq	%ecx, %rcx
    00000262: 	movq	%rcx, 0x30(%rsp)
    00000267: 	leaq	(%rdx,%rcx,4), %rcx
    0000026b: 	movl	%eax, 0x70(%rsp)
    0000026f: 	cltq
    00000271: 	movq	%rax, 0x40(%rsp)
    00000276: 	leaq	(%rdx,%rax,4), %rax
    0000027a: 	movq	0x50(%rsp), %rdx
    0000027f: 	movq	%rcx, 0x28(%rsp)
    00000284: 	movq	%rax, 0x38(%rsp)
    00000289: 	movq	0x48(%rsp), %rax
    0000028e: 	nop # Size: 2
.Ltmp975:
    00000290: 	movss	(%rax), %xmm0
    00000294: 	cmpl	%r9d, %esi
    00000297: 	jle	.Ltmp972 # Offset: 663
    0000029d: 	cmpl	$0x2, %r10d
    000002a1: 	jbe	.Ltmp973 # Offset: 673
    000002a3: 	leaq	(%r14,%rdx,4), %r8
    000002a7: 	xorl	%ecx, %ecx
.Ltmp974:
    000002a9: 	movups	(%r15,%rcx), %xmm2
    000002ae: 	movups	(%r8,%rcx), %xmm3
    000002b3: 	addq	$0x10, %rcx
    000002b7: 	mulps	%xmm3, %xmm2
    000002ba: 	addss	%xmm2, %xmm0
    000002be: 	movaps	%xmm2, %xmm1
    000002c1: 	shufps	$0x55, %xmm2, %xmm1
    000002c5: 	addss	%xmm0, %xmm1
    000002c9: 	movaps	%xmm2, %xmm0
    000002cc: 	unpckhps	%xmm2, %xmm0
    000002cf: 	shufps	$0xff, %xmm2, %xmm2
    000002d3: 	addss	%xmm1, %xmm0
    000002d7: 	addss	%xmm2, %xmm0
    000002db: 	cmpq	%rcx, 0x10(%rsp)
    000002e0: 	jne	.Ltmp974 # Offset: 736
    000002e2: 	cmpl	%edi, %r11d
    000002e5: 	je	.Ltmp972 # Offset: 741
.Ltmp973:
    000002e7: 	leaq	(%rbp,%rdx), %rcx
    000002ec: 	movss	(%r13,%rcx,4), %xmm1
    000002f3: 	movq	0x8(%rsp), %rcx
    000002f8: 	mulss	(%rcx), %xmm1
    000002fc: 	addss	%xmm1, %xmm0
    00000300: 	cmpl	0x20(%rsp), %esi
    00000304: 	jle	.Ltmp972 # Offset: 772
    00000306: 	movq	0x30(%rsp), %rcx
    0000030b: 	addq	%rdx, %rcx
    0000030e: 	movss	(%r13,%rcx,4), %xmm1
    00000315: 	movq	0x28(%rsp), %rcx
    0000031a: 	mulss	(%rcx), %xmm1
    0000031e: 	addss	%xmm1, %xmm0
    00000322: 	cmpl	0x70(%rsp), %esi
    00000326: 	jle	.Ltmp972 # Offset: 806
    00000328: 	movq	0x40(%rsp), %rcx
    0000032d: 	addq	%rdx, %rcx
    00000330: 	movss	(%r13,%rcx,4), %xmm1
    00000337: 	movq	0x38(%rsp), %rcx
    0000033c: 	mulss	(%rcx), %xmm1
    00000340: 	addss	%xmm1, %xmm0
    00000344: 	nopl	(%rax) # Size: 4
.Ltmp972:
    00000348: 	movss	%xmm0, (%rax)
    0000034c: 	addq	$0x4, %rax
    00000350: 	addq	%r12, %rdx
    00000353: 	cmpq	%rbx, %rax
    00000356: 	jne	.Ltmp975 # Offset: 854
    0000035c: 	addq	$0x14, 0x18(%rsp)
    00000362: 	addq	$0x50, %r15
    00000366: 	movq	0x18(%rsp), %rax
    0000036b: 	addq	$0x50, %r14
    0000036f: 	cmpl	%eax, 0x24(%rsp)
    00000373: 	jg	.Ltmp976 # Offset: 883
.Ltmp971:
    00000379: 	addq	$0x1b, 0x60(%rsp)
    0000037f: 	movq	0x88(%rsp), %rbx
    00000387: 	addq	$0x6c, 0x48(%rsp)
    0000038d: 	movq	0x60(%rsp), %rax
    00000392: 	addq	%rbx, 0x50(%rsp)
    00000397: 	cmpl	%eax, 0x80(%rsp)
    0000039e: 	jg	.Ltmp977 # Offset: 926
    000003a4: 	movq	%r12, %r14
.Ltmp970:
    000003a7: 	addl	$0x1, 0x74(%rsp)
    000003ac: 	movl	0x74(%rsp), %eax
    000003b0: 	cmpl	0x84(%rsp), %eax
    000003b7: 	jne	.Ltmp978 # Offset: 951
.Ltmp969:
    000003bd: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000003c4: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    000003cb: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000003d2: 	je	.Ltmp979 # Offset: 978
.Ltmp985:
    000003d8: 	movq	-0x20(%rax), %rbp
    000003dc: 	callq	clock@PLT # Offset: 988
    000003e1: 	pxor	%xmm0, %xmm0
    000003e5: 	movq	%rax, end_time(%rip)
    000003ec: 	movq	%rbp, %rdi
    000003ef: 	subq	start_time(%rip), %rax
    000003f6: 	cvtsi2sd	%rax, %xmm0
    000003fb: 	divsd	DATAat0x24960(%rip), %xmm0
    00000403: 	callq	_Z13record_resultdPKc # Offset: 1027
    00000408: 	movq	0x68(%rsp), %rax
    0000040d: 	pxor	%xmm1, %xmm1
    00000411: 	leaq	0xc80(%rax), %rdx
.Ltmp980:
    00000418: 	movups	(%rax), %xmm0
    0000041b: 	addq	$0x10, %rax
    0000041f: 	addss	%xmm0, %xmm1
    00000423: 	movaps	%xmm0, %xmm2
    00000426: 	shufps	$0x55, %xmm0, %xmm2
    0000042a: 	addss	%xmm2, %xmm1
    0000042e: 	movaps	%xmm0, %xmm2
    00000431: 	unpckhps	%xmm0, %xmm2
    00000434: 	shufps	$0xff, %xmm0, %xmm0
    00000438: 	addss	%xmm2, %xmm1
    0000043c: 	addss	%xmm0, %xmm1
    00000440: 	cmpq	%rdx, %rax
    00000443: 	jne	.Ltmp980 # Offset: 1091
    00000445: 	movss	DATAat0x24990(%rip), %xmm2
    0000044d: 	pxor	%xmm0, %xmm0
    00000451: 	cvtsd2ss	init_value(%rip), %xmm0
    00000459: 	mulss	%xmm0, %xmm2
    0000045d: 	mulss	%xmm0, %xmm2
    00000461: 	movaps	%xmm1, %xmm0
    00000464: 	subss	%xmm2, %xmm0
    00000468: 	movaps	%xmm1, %xmm2
    0000046b: 	andps	DATAat0x24930(%rip), %xmm2
    00000472: 	cvtss2sd	%xmm2, %xmm2
    00000476: 	comisd	DATAat0x24968(%rip), %xmm2
    0000047e: 	jbe	.Ltmp981 # Offset: 1150
    00000480: 	divss	%xmm1, %xmm0
.Ltmp981:
    00000484: 	movsd	DATAat0x24970(%rip), %xmm1
    0000048c: 	cvtss2sd	%xmm0, %xmm0
    00000490: 	andpd	DATAat0x24940(%rip), %xmm0
    00000498: 	comisd	%xmm0, %xmm1
    0000049c: 	jbe	.Ltmp982 # Offset: 1180
    000004a2: 	movq	0xb8(%rsp), %rax
    000004aa: 	subq	%fs:0x28, %rax
    000004b3: 	jne	.Ltmp983 # Offset: 1203
    000004b9: 	addq	$0xc8, %rsp
    000004c0: 	popq	%rbx
    000004c1: 	popq	%rbp
    000004c2: 	popq	%r12
    000004c4: 	popq	%r13
    000004c6: 	popq	%r14
    000004c8: 	popq	%r15
    000004ca: 	retq # Offset: 1226
.Ltmp966:
    000004cb: 	movq	%rbx, %rdi
    000004ce: 	leaq	0xb0(%rsp), %rsi
    000004d6: 	xorl	%edx, %edx
    000004d8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1240
    000004dd: 	movq	%rax, (%rbx)
    000004e0: 	movq	%rax, %rdi
    000004e3: 	movq	0xb0(%rsp), %rax
    000004eb: 	movq	%rax, 0x10(%rbx)
.Ltmp986:
    000004ef: 	movq	%r12, %rdx
    000004f2: 	movq	%rbp, %rsi
    000004f5: 	callq	memcpy@PLT # Offset: 1269
    000004fa: 	movq	0xb0(%rsp), %r12
    00000502: 	movq	(%rbx), %rdi
    00000505: 	jmp	.Ltmp984 # Offset: 1285
.Ltmp979:
    0000050a: 	movq	-0x8(%rdx), %rax
    0000050e: 	addq	$0x200, %rax
    00000514: 	jmp	.Ltmp985 # Offset: 1300
.Ltmp967:
    00000519: 	testq	%r12, %r12
    0000051c: 	je	.Ltmp984 # Offset: 1308
    00000522: 	jmp	.Ltmp986 # Offset: 1314
    00000524: 	nopl	(%rax) # Size: 4
.Ltmp982:
    00000528: 	movq	0xb8(%rsp), %rax
    00000530: 	subq	%fs:0x28, %rax
    00000539: 	jne	.Ltmp983 # Offset: 1337
    0000053b: 	movq	0x78(%rsp), %rax
    00000540: 	leaq	DATAat0x2455f(%rip), %rsi
    00000547: 	movl	$0x1, %edi
    0000054c: 	movq	(%rax), %rdx
    0000054f: 	addq	$0xc8, %rsp
    00000556: 	xorl	%eax, %eax
    00000558: 	popq	%rbx
    00000559: 	popq	%rbp
    0000055a: 	popq	%r12
    0000055c: 	popq	%r13
    0000055e: 	popq	%r14
    00000560: 	popq	%r15
    00000562: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 1378
.Ltmp983:
    00000567: 	callq	__stack_chk_fail@PLT # Offset: 1383
.Ltmp965:
    0000056c: 	leaq	DATAat0x24520(%rip), %rdi
    00000573: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1395
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_matvecmulIf21matvecmul_IJ_blocked2IfEEvPKT_PS2_S4_iiT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z14test_matvecmulIf21matvecmul_JI_blocked2IfEEvPKT_PS2_S4_iiT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 94
  State       : disassembled
  Address     : 0x174a0
  Size        : 0x663
  MaxSize     : 0x670
  Offset      : 0x174a0
  Section     : .text
  Orc Section : .local.text._Z14test_matvecmulIf21matvecmul_JI_blocked2IfEEvPKT_PS2_S4_iiT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB093:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rdx, %rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0xb8, %rsp
    00000018: 	movq	"_ZL7gLabels/1"+48(%rip), %rbx
    0000001f: 	movq	%rdi, 0x8(%rsp)
    00000024: 	movq	%rsi, 0x68(%rsp)
    00000029: 	movl	%ecx, 0x44(%rsp)
    0000002d: 	movl	%r8d, 0x70(%rsp)
    00000032: 	movq	%r9, 0x80(%rsp)
    0000003a: 	movq	%fs:0x28, %rax
    00000043: 	movq	%rax, 0xa8(%rsp)
    0000004b: 	xorl	%eax, %eax
    0000004d: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000054: 	subq	$0x20, %rax
    00000058: 	cmpq	%rax, %rbx
    0000005b: 	je	.Ltmp987 # Offset: 91
    0000005d: 	leaq	0x10(%rbx), %rdi
    00000061: 	movq	0x8(%r9), %r12
    00000065: 	movq	%rdi, (%rbx)
    00000068: 	movq	(%r9), %r13
    0000006b: 	movq	%r13, %rax
    0000006e: 	addq	%r12, %rax
    00000071: 	je	.Ltmp988 # Offset: 113
    00000073: 	testq	%r13, %r13
    00000076: 	je	.Ltmp989 # Offset: 118
.Ltmp988:
    0000007c: 	movq	%r12, 0xa0(%rsp)
    00000084: 	cmpq	$0xf, %r12
    00000088: 	ja	.Ltmp990 # Offset: 136
    0000008e: 	cmpq	$0x1, %r12
    00000092: 	jne	.Ltmp991 # Offset: 146
    00000098: 	movzbl	(%r13), %eax
    0000009d: 	movb	%al, 0x10(%rbx)
.Ltmp1010:
    000000a0: 	movq	%r12, 0x8(%rbx)
    000000a4: 	movb	$0x0, (%rdi,%r12)
    000000a9: 	addq	$0x20, "_ZL7gLabels/1"+48(%rip)
    000000b1: 	jmp	.Ltmp992 # Offset: 177
.Ltmp987:
    000000b3: 	movq	%r9, %rsi
    000000b6: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000000bd: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 189
.Ltmp992:
    000000c2: 	callq	clock@PLT # Offset: 194
    000000c7: 	movq	%rax, start_time(%rip)
    000000ce: 	movl	iterations(%rip), %eax
    000000d4: 	movl	%eax, 0x8c(%rsp)
    000000db: 	testl	%eax, %eax
    000000dd: 	jle	.Ltmp993 # Offset: 221
    000000e3: 	movl	$0x0, 0x88(%rsp)
    000000ee: 	movl	0x70(%rsp), %ebx
    000000f2: 	leal	(%rbx,%rbx,8), %eax
    000000f5: 	leal	(%rax,%rax,8), %eax
    000000f8: 	movl	%eax, 0x74(%rsp)
    000000fc: 	movslq	%ebx, %rax
    000000ff: 	movq	%rax, %r14
    00000102: 	leaq	(,%rax,4), %r15
    0000010a: 	leaq	(%rax,%rax,2), %rax
    0000010e: 	leaq	(,%rax,4), %r13
    00000116: 	movq	0x68(%rsp), %rax
    0000011b: 	shlq	$0x4, %r14
    0000011f: 	leaq	0xc88(%rax), %rbx
    00000126: 	movq	%rbx, 0x98(%rsp)
    0000012e: 	leaq	0x8(%rax), %rbx
    00000132: 	addq	$0x4, %rax
    00000136: 	movq	%rbx, 0x90(%rsp)
    0000013e: 	movq	%rax, 0x78(%rsp)
    00000143: 	movq	%r13, %rax
    00000146: 	movq	%r14, %r13
    00000149: 	movq	%rbp, %r14
    0000014c: 	movq	%rax, %rbp
.Ltmp1003:
    0000014f: 	movq	0x68(%rsp), %rax
    00000154: 	movq	$0x0, (%rax)
    0000015b: 	movq	0x98(%rsp), %rbx
    00000163: 	movq	$0x0, -0x10(%rbx)
    0000016b: 	movq	0x90(%rsp), %rdi
    00000173: 	andq	$-0x8, %rdi
    00000177: 	subq	%rdi, %rax
    0000017a: 	movq	%rax, %rcx
    0000017d: 	xorl	%eax, %eax
    0000017f: 	addl	$0xc80, %ecx
    00000185: 	shrl	$0x3, %ecx
    00000188: 	rep		stosq	%rax, %es:(%rdi)
    0000018b: 	movl	0x70(%rsp), %edx
    0000018f: 	testl	%edx, %edx
    00000191: 	jle	.Ltmp994 # Offset: 401
    00000197: 	movl	0x44(%rsp), %eax
    0000019b: 	testl	%eax, %eax
    0000019d: 	jle	.Ltmp994 # Offset: 413
    000001a3: 	movq	$0x0, 0x48(%rsp)
    000001ac: 	movq	%r15, %rax
    000001af: 	movq	%r14, %r12
    000001b2: 	movq	%r13, %r15
    000001b5: 	movq	%rbp, %r14
    000001b8: 	movq	%rax, %r13
.Ltmp1002:
    000001bb: 	movq	0x48(%rsp), %rdi
    000001c0: 	movl	0x70(%rsp), %ebx
    000001c4: 	movq	$0x0, 0x28(%rsp)
    000001cd: 	movl	$0x0, 0x58(%rsp)
    000001d5: 	movl	%edi, %eax
    000001d7: 	addl	$0x12c, %eax
    000001dc: 	cmpl	%ebx, %eax
    000001de: 	cmovgl	%ebx, %eax
    000001e1: 	movq	0x68(%rsp), %rbx
    000001e6: 	movl	%eax, 0x10(%rsp)
    000001ea: 	cmpl	%edi, %eax
    000001ec: 	jle	.Ltmp995 # Offset: 492
    000001f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1001:
    000001f8: 	movq	0x28(%rsp), %rcx
    000001fd: 	movl	0x44(%rsp), %edi
    00000201: 	movl	%ecx, %eax
    00000203: 	addl	$0x51, %eax
    00000206: 	cmpl	%edi, %eax
    00000208: 	cmovgl	%edi, %eax
    0000020b: 	movl	%eax, 0x20(%rsp)
    0000020f: 	cmpl	%ecx, %eax
    00000211: 	jle	.Ltmp996 # Offset: 529
    00000217: 	movq	%rcx, %r9
    0000021a: 	movl	%eax, %ebp
    0000021c: 	movslq	0x58(%rsp), %rax
    00000221: 	addq	0x48(%rsp), %rax
    00000226: 	subl	%r9d, %ebp
    00000229: 	leaq	(%r12,%rax,4), %rcx
    0000022d: 	movq	0x68(%rsp), %rsi
    00000232: 	xorl	%edi, %edi
    00000234: 	movl	%ebp, %eax
    00000236: 	movl	0x70(%rsp), %r8d
    0000023b: 	movl	%ebp, 0x1c(%rsp)
    0000023f: 	leaq	-0x1(%rax), %r10
    00000243: 	leaq	-0x1(%rax,%r9), %rax
    00000248: 	imulq	%r13, %r10
    0000024c: 	leaq	(%rsi,%rax,4), %rax
    00000250: 	testl	%r8d, %r8d
    00000253: 	movq	%rax, (%rsp)
    00000257: 	movl	$0x0, %eax
    0000025c: 	cmovnsq	%r10, %rdi
    00000260: 	cmovnsq	%rax, %r10
    00000264: 	movl	%ebp, %eax
    00000266: 	shrl	$0x2, %eax
    00000269: 	subl	$0x1, %eax
    0000026c: 	movq	%rdi, 0x60(%rsp)
    00000271: 	shlq	$0x4, %rax
    00000275: 	leaq	0x10(%rbx,%rax), %rdi
    0000027a: 	movl	%ebp, %eax
    0000027c: 	andl	$-0x4, %eax
    0000027f: 	movl	%eax, 0x18(%rsp)
    00000283: 	addl	%r9d, %eax
    00000286: 	movslq	%eax, %rdx
    00000289: 	leaq	(%rsi,%rdx,4), %r11
    0000028d: 	movl	%r8d, %edx
    00000290: 	imull	%eax, %edx
    00000293: 	movl	%edx, 0x38(%rsp)
    00000297: 	leal	0x1(%rax), %edx
    0000029a: 	movl	%edx, 0x24(%rsp)
    0000029e: 	movslq	%edx, %rdx
    000002a1: 	leaq	(%rsi,%rdx,4), %rdx
    000002a5: 	movq	%rdx, 0x30(%rsp)
    000002aa: 	movl	0x24(%rsp), %edx
    000002ae: 	imull	%r8d, %edx
    000002b2: 	movl	%edx, 0x3c(%rsp)
    000002b6: 	leal	0x2(%rax), %edx
    000002b9: 	movslq	%edx, %rax
    000002bc: 	movl	%edx, 0x40(%rsp)
    000002c0: 	imull	%r8d, %edx
    000002c4: 	leaq	(%rsi,%rax,4), %rax
    000002c8: 	movq	0x48(%rsp), %rsi
    000002cd: 	movq	%rax, 0x50(%rsp)
    000002d2: 	leal	-0x1(%rbp), %eax
    000002d5: 	movq	0x60(%rsp), %rbp
    000002da: 	movl	%edx, 0x5c(%rsp)
    000002de: 	movq	0x78(%rsp), %rdx
    000002e3: 	movl	%eax, 0x14(%rsp)
    000002e7: 	addq	%r9, %rax
    000002ea: 	leaq	(%rdx,%rax,4), %r9
    000002ee: 	nop # Size: 2
.Ltmp1000:
    000002f0: 	movq	0x8(%rsp), %rax
    000002f5: 	leaq	(%r10,%rcx), %rdx
    000002f9: 	movl	%esi, %r8d
    000002fc: 	movss	(%rax,%rsi,4), %xmm1
    00000301: 	movq	%rcx, %rax
    00000304: 	subq	%r12, %rax
    00000307: 	cmpq	%rdx, (%rsp)
    0000030b: 	setb	%dl
    0000030e: 	addq	%rbp, %rax
    00000311: 	addq	%r12, %rax
    00000314: 	cmpq	%rax, %rbx
    00000317: 	seta	%al
    0000031a: 	orb	%dl, %al
    0000031c: 	je	.Ltmp997 # Offset: 796
    00000322: 	movaps	%xmm1, %xmm4
    00000325: 	cmpl	$0x2, 0x14(%rsp)
    0000032a: 	movq	%rcx, %rax
    0000032d: 	movq	%rbx, %rdx
    00000330: 	shufps	$0x0, %xmm4, %xmm4
    00000334: 	jbe	.Ltmp997 # Offset: 820
.Ltmp998:
    0000033a: 	movss	(%rax,%r14), %xmm0
    00000340: 	movss	(%rax,%r13,2), %xmm2
    00000346: 	addq	$0x10, %rdx
    0000034a: 	movss	(%rax,%r13), %xmm3
    00000350: 	movups	-0x10(%rdx), %xmm5
    00000354: 	unpcklps	%xmm0, %xmm2
    00000357: 	movss	(%rax), %xmm0
    0000035b: 	addq	%r15, %rax
    0000035e: 	unpcklps	%xmm3, %xmm0
    00000361: 	movlhps	%xmm2, %xmm0
    00000364: 	mulps	%xmm4, %xmm0
    00000367: 	addps	%xmm5, %xmm0
    0000036a: 	movups	%xmm0, -0x10(%rdx)
    0000036e: 	cmpq	%rdi, %rdx
    00000371: 	jne	.Ltmp998 # Offset: 881
    00000373: 	movl	0x18(%rsp), %edx
    00000377: 	cmpl	%edx, 0x1c(%rsp)
    0000037b: 	je	.Ltmp999 # Offset: 891
    0000037d: 	movl	0x38(%rsp), %eax
    00000381: 	movl	0x20(%rsp), %edx
    00000385: 	addl	%r8d, %eax
    00000388: 	cltq
    0000038a: 	movss	(%r12,%rax,4), %xmm0
    00000390: 	movl	0x24(%rsp), %eax
    00000394: 	mulss	%xmm1, %xmm0
    00000398: 	addss	(%r11), %xmm0
    0000039d: 	movss	%xmm0, (%r11)
    000003a2: 	cmpl	%eax, %edx
    000003a4: 	jle	.Ltmp999 # Offset: 932
    000003a6: 	movl	0x3c(%rsp), %eax
    000003aa: 	addl	%r8d, %eax
    000003ad: 	cltq
    000003af: 	movss	(%r12,%rax,4), %xmm0
    000003b5: 	movq	0x30(%rsp), %rax
    000003ba: 	mulss	%xmm1, %xmm0
    000003be: 	addss	(%rax), %xmm0
    000003c2: 	movss	%xmm0, (%rax)
    000003c6: 	movl	0x40(%rsp), %eax
    000003ca: 	cmpl	%eax, %edx
    000003cc: 	jle	.Ltmp999 # Offset: 972
    000003ce: 	movl	0x5c(%rsp), %eax
    000003d2: 	addl	%r8d, %eax
    000003d5: 	cltq
    000003d7: 	mulss	(%r12,%rax,4), %xmm1
    000003dd: 	movq	0x50(%rsp), %rax
    000003e2: 	addss	(%rax), %xmm1
    000003e6: 	movss	%xmm1, (%rax)
    000003ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp999:
    000003f0: 	addq	$0x1, %rsi
    000003f4: 	addq	$0x4, %rcx
    000003f8: 	cmpl	%esi, 0x10(%rsp)
    000003fc: 	jg	.Ltmp1000 # Offset: 1020
.Ltmp996:
    00000402: 	addq	$0x51, 0x28(%rsp)
    00000408: 	movl	0x74(%rsp), %edi
    0000040c: 	addq	$0x144, %rbx
    00000413: 	addl	%edi, 0x58(%rsp)
    00000417: 	movq	0x28(%rsp), %rax
    0000041c: 	cmpl	%eax, 0x44(%rsp)
    00000420: 	jg	.Ltmp1001 # Offset: 1056
.Ltmp995:
    00000426: 	addq	$0x12c, 0x48(%rsp)
    0000042f: 	movq	0x48(%rsp), %rax
    00000434: 	cmpl	%eax, 0x70(%rsp)
    00000438: 	jg	.Ltmp1002 # Offset: 1080
    0000043e: 	movq	%r13, %rax
    00000441: 	movq	%r14, %rbp
    00000444: 	movq	%r15, %r13
    00000447: 	movq	%r12, %r14
    0000044a: 	movq	%rax, %r15
.Ltmp994:
    0000044d: 	addl	$0x1, 0x88(%rsp)
    00000455: 	movl	0x88(%rsp), %eax
    0000045c: 	cmpl	0x8c(%rsp), %eax
    00000463: 	jne	.Ltmp1003 # Offset: 1123
.Ltmp993:
    00000469: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000470: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00000477: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000047e: 	je	.Ltmp1004 # Offset: 1150
.Ltmp1011:
    00000484: 	movq	-0x20(%rax), %rbp
    00000488: 	callq	clock@PLT # Offset: 1160
    0000048d: 	pxor	%xmm0, %xmm0
    00000491: 	movq	%rax, end_time(%rip)
    00000498: 	movq	%rbp, %rdi
    0000049b: 	subq	start_time(%rip), %rax
    000004a2: 	cvtsi2sd	%rax, %xmm0
    000004a7: 	divsd	DATAat0x24960(%rip), %xmm0
    000004af: 	callq	_Z13record_resultdPKc # Offset: 1199
    000004b4: 	movq	0x68(%rsp), %rax
    000004b9: 	pxor	%xmm0, %xmm0
    000004bd: 	leaq	0xc80(%rax), %rdx
.Ltmp1005:
    000004c4: 	movups	(%rax), %xmm2
    000004c7: 	addq	$0x10, %rax
    000004cb: 	addss	%xmm2, %xmm0
    000004cf: 	movaps	%xmm2, %xmm1
    000004d2: 	shufps	$0x55, %xmm2, %xmm1
    000004d6: 	addss	%xmm1, %xmm0
    000004da: 	movaps	%xmm2, %xmm1
    000004dd: 	unpckhps	%xmm2, %xmm1
    000004e0: 	addss	%xmm1, %xmm0
    000004e4: 	movaps	%xmm2, %xmm1
    000004e7: 	shufps	$0xff, %xmm2, %xmm1
    000004eb: 	addss	%xmm1, %xmm0
    000004ef: 	cmpq	%rax, %rdx
    000004f2: 	jne	.Ltmp1005 # Offset: 1266
    000004f4: 	movss	DATAat0x24990(%rip), %xmm2
    000004fc: 	pxor	%xmm1, %xmm1
    00000500: 	cvtsd2ss	init_value(%rip), %xmm1
    00000508: 	mulss	%xmm1, %xmm2
    0000050c: 	mulss	%xmm1, %xmm2
    00000510: 	movaps	%xmm0, %xmm1
    00000513: 	subss	%xmm2, %xmm1
    00000517: 	movaps	%xmm0, %xmm2
    0000051a: 	andps	DATAat0x24930(%rip), %xmm2
    00000521: 	cvtss2sd	%xmm2, %xmm2
    00000525: 	comisd	DATAat0x24968(%rip), %xmm2
    0000052d: 	jbe	.Ltmp1006 # Offset: 1325
    0000052f: 	divss	%xmm0, %xmm1
.Ltmp1006:
    00000533: 	movsd	DATAat0x24970(%rip), %xmm0
    0000053b: 	cvtss2sd	%xmm1, %xmm1
    0000053f: 	andpd	DATAat0x24940(%rip), %xmm1
    00000547: 	comisd	%xmm1, %xmm0
    0000054b: 	jbe	.Ltmp1007 # Offset: 1355
    00000551: 	movq	0xa8(%rsp), %rax
    00000559: 	subq	%fs:0x28, %rax
    00000562: 	jne	.Ltmp1008 # Offset: 1378
    00000568: 	addq	$0xb8, %rsp
    0000056f: 	popq	%rbx
    00000570: 	popq	%rbp
    00000571: 	popq	%r12
    00000573: 	popq	%r13
    00000575: 	popq	%r14
    00000577: 	popq	%r15
    00000579: 	retq # Offset: 1401
    0000057a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp997:
    00000580: 	movq	%rcx, %rdx
    00000583: 	movq	%rbx, %rax
    00000586: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1009:
    00000590: 	movss	(%rdx), %xmm0
    00000594: 	addq	$0x4, %rax
    00000598: 	addq	%r13, %rdx
    0000059b: 	mulss	%xmm1, %xmm0
    0000059f: 	addss	-0x4(%rax), %xmm0
    000005a4: 	movss	%xmm0, -0x4(%rax)
    000005a9: 	cmpq	%rax, %r9
    000005ac: 	jne	.Ltmp1009 # Offset: 1452
    000005ae: 	jmp	.Ltmp999 # Offset: 1454
.Ltmp990:
    000005b3: 	movq	%rbx, %rdi
    000005b6: 	leaq	0xa0(%rsp), %rsi
    000005be: 	xorl	%edx, %edx
    000005c0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1472
    000005c5: 	movq	%rax, (%rbx)
    000005c8: 	movq	%rax, %rdi
    000005cb: 	movq	0xa0(%rsp), %rax
    000005d3: 	movq	%rax, 0x10(%rbx)
.Ltmp1012:
    000005d7: 	movq	%r12, %rdx
    000005da: 	movq	%r13, %rsi
    000005dd: 	callq	memcpy@PLT # Offset: 1501
    000005e2: 	movq	0xa0(%rsp), %r12
    000005ea: 	movq	(%rbx), %rdi
    000005ed: 	jmp	.Ltmp1010 # Offset: 1517
.Ltmp1004:
    000005f2: 	movq	-0x8(%rdx), %rax
    000005f6: 	addq	$0x200, %rax
    000005fc: 	jmp	.Ltmp1011 # Offset: 1532
.Ltmp991:
    00000601: 	testq	%r12, %r12
    00000604: 	je	.Ltmp1010 # Offset: 1540
    0000060a: 	jmp	.Ltmp1012 # Offset: 1546
    0000060c: 	nopl	(%rax) # Size: 4
.Ltmp1007:
    00000610: 	movq	0xa8(%rsp), %rax
    00000618: 	subq	%fs:0x28, %rax
    00000621: 	jne	.Ltmp1008 # Offset: 1569
    00000623: 	movq	0x80(%rsp), %rax
    0000062b: 	leaq	DATAat0x2455f(%rip), %rsi
    00000632: 	movl	$0x1, %edi
    00000637: 	movq	(%rax), %rdx
    0000063a: 	addq	$0xb8, %rsp
    00000641: 	xorl	%eax, %eax
    00000643: 	popq	%rbx
    00000644: 	popq	%rbp
    00000645: 	popq	%r12
    00000647: 	popq	%r13
    00000649: 	popq	%r14
    0000064b: 	popq	%r15
    0000064d: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 1613
.Ltmp1008:
    00000652: 	callq	__stack_chk_fail@PLT # Offset: 1618
.Ltmp989:
    00000657: 	leaq	DATAat0x24520(%rip), %rdi
    0000065e: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1630
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_matvecmulIf21matvecmul_JI_blocked2IfEEvPKT_PS2_S4_iiT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z14test_matvecmulId21matvecmul_IJ_blocked2IdEEvPKT_PS2_S4_iiT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 95
  State       : disassembled
  Address     : 0x17b10
  Size        : 0x45d
  MaxSize     : 0x460
  Offset      : 0x17b10
  Section     : .text
  Orc Section : .local.text._Z14test_matvecmulId21matvecmul_IJ_blocked2IdEEvPKT_PS2_S4_iiT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB094:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdx, %r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x88, %rsp
    00000018: 	movq	"_ZL7gLabels/1"+48(%rip), %rbx
    0000001f: 	movq	%rdi, 0x28(%rsp)
    00000024: 	movq	%rsi, 0x38(%rsp)
    00000029: 	movl	%ecx, 0x58(%rsp)
    0000002d: 	movl	%r8d, 0x40(%rsp)
    00000032: 	movq	%r9, 0x48(%rsp)
    00000037: 	movq	%fs:0x28, %rax
    00000040: 	movq	%rax, 0x78(%rsp)
    00000045: 	xorl	%eax, %eax
    00000047: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000004e: 	subq	$0x20, %rax
    00000052: 	cmpq	%rax, %rbx
    00000055: 	je	.Ltmp1013 # Offset: 85
    00000057: 	leaq	0x10(%rbx), %rdi
    0000005b: 	movq	0x8(%r9), %r12
    0000005f: 	movq	%rdi, (%rbx)
    00000062: 	movq	(%r9), %rbp
    00000065: 	movq	%rbp, %rax
    00000068: 	addq	%r12, %rax
    0000006b: 	je	.Ltmp1014 # Offset: 107
    0000006d: 	testq	%rbp, %rbp
    00000070: 	je	.Ltmp1015 # Offset: 112
.Ltmp1014:
    00000076: 	movq	%r12, 0x70(%rsp)
    0000007b: 	cmpq	$0xf, %r12
    0000007f: 	ja	.Ltmp1016 # Offset: 127
    00000085: 	cmpq	$0x1, %r12
    00000089: 	jne	.Ltmp1017 # Offset: 137
    0000008f: 	movzbl	(%rbp), %eax
    00000093: 	movb	%al, 0x10(%rbx)
.Ltmp1034:
    00000096: 	movq	%r12, 0x8(%rbx)
    0000009a: 	movb	$0x0, (%rdi,%r12)
    0000009f: 	addq	$0x20, "_ZL7gLabels/1"+48(%rip)
    000000a7: 	jmp	.Ltmp1018 # Offset: 167
.Ltmp1013:
    000000a9: 	movq	%r9, %rsi
    000000ac: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000000b3: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 179
.Ltmp1018:
    000000b8: 	callq	clock@PLT # Offset: 184
    000000bd: 	movq	%rax, start_time(%rip)
    000000c4: 	movl	iterations(%rip), %eax
    000000ca: 	movl	%eax, 0x5c(%rsp)
    000000ce: 	testl	%eax, %eax
    000000d0: 	jle	.Ltmp1019 # Offset: 208
    000000d6: 	movslq	0x40(%rsp), %r14
    000000db: 	movl	$0x0, 0x44(%rsp)
    000000e3: 	imull	$0xe, %r14d, %eax
    000000e7: 	movq	%r14, %r12
    000000ea: 	movq	%r13, %r14
    000000ed: 	cltq
    000000ef: 	movq	%rax, 0x60(%rsp)
    000000f4: 	movq	0x38(%rsp), %rax
    000000f9: 	leaq	0x1908(%rax), %rsi
    00000100: 	addq	$0x8, %rax
    00000104: 	movq	%rsi, 0x68(%rsp)
    00000109: 	movq	%rax, 0x50(%rsp)
.Ltmp1028:
    0000010e: 	movq	0x38(%rsp), %rax
    00000113: 	movq	$0x0, (%rax)
    0000011a: 	movq	0x68(%rsp), %rbx
    0000011f: 	movq	$0x0, -0x10(%rbx)
    00000127: 	movq	0x50(%rsp), %rdi
    0000012c: 	andq	$-0x8, %rdi
    00000130: 	subq	%rdi, %rax
    00000133: 	movq	%rax, %rcx
    00000136: 	xorl	%eax, %eax
    00000138: 	addl	$0x1900, %ecx
    0000013e: 	shrl	$0x3, %ecx
    00000141: 	rep		stosq	%rax, %es:(%rdi)
    00000144: 	movl	0x58(%rsp), %edx
    00000148: 	testl	%edx, %edx
    0000014a: 	jle	.Ltmp1020 # Offset: 330
    00000150: 	movl	0x40(%rsp), %eax
    00000154: 	testl	%eax, %eax
    00000156: 	jle	.Ltmp1020 # Offset: 342
    0000015c: 	movq	$0x0, 0x30(%rsp)
    00000165: 	movq	0x38(%rsp), %rax
    0000016a: 	movq	$0x0, 0x20(%rsp)
    00000173: 	movq	%rax, 0x18(%rsp)
.Ltmp1027:
    00000178: 	movq	0x30(%rsp), %rsi
    0000017d: 	movl	0x58(%rsp), %ebx
    00000181: 	movl	%esi, %eax
    00000183: 	addl	$0xe, %eax
    00000186: 	cmpl	%ebx, %eax
    00000188: 	cmovgl	%ebx, %eax
    0000018b: 	cmpl	%esi, %eax
    0000018d: 	jle	.Ltmp1021 # Offset: 397
    00000193: 	subl	%esi, %eax
    00000195: 	movq	0x28(%rsp), %r15
    0000019a: 	movq	%r14, %rbx
    0000019d: 	movq	$0x0, 0x10(%rsp)
    000001a6: 	subl	$0x1, %eax
    000001a9: 	addq	%rsi, %rax
    000001ac: 	movq	0x50(%rsp), %rsi
    000001b1: 	leaq	(%rsi,%rax,8), %rax
    000001b5: 	movq	%rax, %r13
    000001b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1026:
    000001c0: 	movq	0x10(%rsp), %rdi
    000001c5: 	movl	0x40(%rsp), %eax
    000001c9: 	movq	0x20(%rsp), %rdx
    000001ce: 	leal	0x1c(%rdi), %r8d
    000001d2: 	movl	%edi, %r11d
    000001d5: 	cmpl	%eax, %r8d
    000001d8: 	cmovgl	%eax, %r8d
    000001dc: 	movl	%r8d, %esi
    000001df: 	subl	%edi, %esi
    000001e1: 	movl	%esi, %eax
    000001e3: 	movl	%esi, %ebp
    000001e5: 	shrl	%eax
    000001e7: 	andl	$-0x2, %ebp
    000001ea: 	subl	$0x1, %eax
    000001ed: 	addl	%ebp, %edi
    000001ef: 	addq	$0x1, %rax
    000001f3: 	shlq	$0x4, %rax
    000001f7: 	cmpl	$0x1, %esi
    000001fa: 	cmovel	%r11d, %edi
    000001fe: 	movq	%rax, 0x8(%rsp)
    00000203: 	movq	0x28(%rsp), %rax
    00000208: 	movslq	%edi, %rdi
    0000020b: 	leaq	(%rax,%rdi,8), %r9
    0000020f: 	movq	0x18(%rsp), %rax
    00000214: 	nopl	(%rax) # Size: 4
.Ltmp1025:
    00000218: 	movsd	(%rax), %xmm0
    0000021c: 	cmpl	%r11d, %r8d
    0000021f: 	jle	.Ltmp1022 # Offset: 543
    00000221: 	cmpl	$0x1, %esi
    00000224: 	je	.Ltmp1023 # Offset: 548
    00000226: 	leaq	(%rbx,%rdx,8), %r10
    0000022a: 	xorl	%ecx, %ecx
.Ltmp1024:
    0000022c: 	movupd	(%r15,%rcx), %xmm2
    00000232: 	movupd	(%r10,%rcx), %xmm4
    00000238: 	addq	$0x10, %rcx
    0000023c: 	mulpd	%xmm4, %xmm2
    00000240: 	addsd	%xmm2, %xmm0
    00000244: 	unpckhpd	%xmm2, %xmm2
    00000248: 	addsd	%xmm2, %xmm0
    0000024c: 	cmpq	%rcx, 0x8(%rsp)
    00000251: 	jne	.Ltmp1024 # Offset: 593
    00000253: 	cmpl	%esi, %ebp
    00000255: 	je	.Ltmp1022 # Offset: 597
.Ltmp1023:
    00000257: 	leaq	(%rdx,%rdi), %rcx
    0000025b: 	movsd	(%r14,%rcx,8), %xmm1
    00000261: 	mulsd	(%r9), %xmm1
    00000266: 	addsd	%xmm1, %xmm0
.Ltmp1022:
    0000026a: 	movsd	%xmm0, (%rax)
    0000026e: 	addq	$0x8, %rax
    00000272: 	addq	%r12, %rdx
    00000275: 	cmpq	%rax, %r13
    00000278: 	jne	.Ltmp1025 # Offset: 632
    0000027a: 	addq	$0x1c, 0x10(%rsp)
    00000280: 	addq	$0xe0, %r15
    00000287: 	movq	0x10(%rsp), %rax
    0000028c: 	addq	$0xe0, %rbx
    00000293: 	cmpl	%eax, 0x40(%rsp)
    00000297: 	jg	.Ltmp1026 # Offset: 663
.Ltmp1021:
    0000029d: 	addq	$0xe, 0x30(%rsp)
    000002a3: 	movq	0x60(%rsp), %rbx
    000002a8: 	addq	$0x70, 0x18(%rsp)
    000002ae: 	movq	0x30(%rsp), %rax
    000002b3: 	addq	%rbx, 0x20(%rsp)
    000002b8: 	cmpl	%eax, 0x58(%rsp)
    000002bc: 	jg	.Ltmp1027 # Offset: 700
.Ltmp1020:
    000002c2: 	addl	$0x1, 0x44(%rsp)
    000002c7: 	movl	0x44(%rsp), %eax
    000002cb: 	cmpl	0x5c(%rsp), %eax
    000002cf: 	jne	.Ltmp1028 # Offset: 719
.Ltmp1019:
    000002d5: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000002dc: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    000002e3: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000002ea: 	je	.Ltmp1029 # Offset: 746
.Ltmp1035:
    000002f0: 	movq	-0x20(%rax), %rbp
    000002f4: 	callq	clock@PLT # Offset: 756
    000002f9: 	pxor	%xmm0, %xmm0
    000002fd: 	movq	%rax, end_time(%rip)
    00000304: 	movq	%rbp, %rdi
    00000307: 	subq	start_time(%rip), %rax
    0000030e: 	cvtsi2sd	%rax, %xmm0
    00000313: 	divsd	DATAat0x24960(%rip), %xmm0
    0000031b: 	callq	_Z13record_resultdPKc # Offset: 795
    00000320: 	movq	0x38(%rsp), %rax
    00000325: 	pxor	%xmm0, %xmm0
    00000329: 	leaq	0x1900(%rax), %rdx
.Ltmp1030:
    00000330: 	movsd	(%rax), %xmm1
    00000334: 	addq	$0x10, %rax
    00000338: 	addsd	%xmm1, %xmm0
    0000033c: 	movsd	-0x8(%rax), %xmm1
    00000341: 	addsd	%xmm1, %xmm0
    00000345: 	cmpq	%rdx, %rax
    00000348: 	jne	.Ltmp1030 # Offset: 840
    0000034a: 	movsd	init_value(%rip), %xmm1
    00000352: 	movsd	DATAat0x24988(%rip), %xmm2
    0000035a: 	movapd	%xmm0, %xmm3
    0000035e: 	mulsd	%xmm1, %xmm2
    00000362: 	mulsd	%xmm1, %xmm2
    00000366: 	movapd	%xmm0, %xmm1
    0000036a: 	subsd	%xmm2, %xmm1
    0000036e: 	movq	DATAat0x24940(%rip), %xmm2
    00000376: 	andpd	%xmm2, %xmm3
    0000037a: 	comisd	DATAat0x24978(%rip), %xmm3
    00000382: 	jbe	.Ltmp1031 # Offset: 898
    00000384: 	divsd	%xmm0, %xmm1
.Ltmp1031:
    00000388: 	movsd	DATAat0x24980(%rip), %xmm0
    00000390: 	andpd	%xmm2, %xmm1
    00000394: 	comisd	%xmm1, %xmm0
    00000398: 	jbe	.Ltmp1032 # Offset: 920
    0000039a: 	movq	0x78(%rsp), %rax
    0000039f: 	subq	%fs:0x28, %rax
    000003a8: 	jne	.Ltmp1033 # Offset: 936
    000003ae: 	addq	$0x88, %rsp
    000003b5: 	popq	%rbx
    000003b6: 	popq	%rbp
    000003b7: 	popq	%r12
    000003b9: 	popq	%r13
    000003bb: 	popq	%r14
    000003bd: 	popq	%r15
    000003bf: 	retq # Offset: 959
.Ltmp1016:
    000003c0: 	movq	%rbx, %rdi
    000003c3: 	leaq	0x70(%rsp), %rsi
    000003c8: 	xorl	%edx, %edx
    000003ca: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 970
    000003cf: 	movq	%rax, (%rbx)
    000003d2: 	movq	%rax, %rdi
    000003d5: 	movq	0x70(%rsp), %rax
    000003da: 	movq	%rax, 0x10(%rbx)
.Ltmp1036:
    000003de: 	movq	%r12, %rdx
    000003e1: 	movq	%rbp, %rsi
    000003e4: 	callq	memcpy@PLT # Offset: 996
    000003e9: 	movq	0x70(%rsp), %r12
    000003ee: 	movq	(%rbx), %rdi
    000003f1: 	jmp	.Ltmp1034 # Offset: 1009
.Ltmp1029:
    000003f6: 	movq	-0x8(%rdx), %rax
    000003fa: 	addq	$0x200, %rax
    00000400: 	jmp	.Ltmp1035 # Offset: 1024
.Ltmp1017:
    00000405: 	testq	%r12, %r12
    00000408: 	je	.Ltmp1034 # Offset: 1032
    0000040e: 	jmp	.Ltmp1036 # Offset: 1038
.Ltmp1032:
    00000410: 	movq	0x78(%rsp), %rax
    00000415: 	subq	%fs:0x28, %rax
    0000041e: 	jne	.Ltmp1033 # Offset: 1054
    00000420: 	movq	0x48(%rsp), %rax
    00000425: 	leaq	DATAat0x2455f(%rip), %rsi
    0000042c: 	movl	$0x1, %edi
    00000431: 	movq	(%rax), %rdx
    00000434: 	addq	$0x88, %rsp
    0000043b: 	xorl	%eax, %eax
    0000043d: 	popq	%rbx
    0000043e: 	popq	%rbp
    0000043f: 	popq	%r12
    00000441: 	popq	%r13
    00000443: 	popq	%r14
    00000445: 	popq	%r15
    00000447: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 1095
.Ltmp1033:
    0000044c: 	callq	__stack_chk_fail@PLT # Offset: 1100
.Ltmp1015:
    00000451: 	leaq	DATAat0x24520(%rip), %rdi
    00000458: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1112
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_matvecmulId21matvecmul_IJ_blocked2IdEEvPKT_PS2_S4_iiT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z14test_matvecmulId21matvecmul_JI_blocked2IdEEvPKT_PS2_S4_iiT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 96
  State       : disassembled
  Address     : 0x17f70
  Size        : 0x535
  MaxSize     : 0x540
  Offset      : 0x17f70
  Section     : .text
  Orc Section : .local.text._Z14test_matvecmulId21matvecmul_JI_blocked2IdEEvPKT_PS2_S4_iiT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB095:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdx, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x88, %rsp
    00000018: 	movq	"_ZL7gLabels/1"+48(%rip), %rbx
    0000001f: 	movq	%rdi, 0x8(%rsp)
    00000024: 	movq	%rsi, 0x40(%rsp)
    00000029: 	movl	%ecx, 0x28(%rsp)
    0000002d: 	movl	%r8d, 0x48(%rsp)
    00000032: 	movq	%r9, 0x58(%rsp)
    00000037: 	movq	%fs:0x28, %rax
    00000040: 	movq	%rax, 0x78(%rsp)
    00000045: 	xorl	%eax, %eax
    00000047: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000004e: 	subq	$0x20, %rax
    00000052: 	cmpq	%rax, %rbx
    00000055: 	je	.Ltmp1037 # Offset: 85
    00000057: 	leaq	0x10(%rbx), %rdi
    0000005b: 	movq	0x8(%r9), %r12
    0000005f: 	movq	%rdi, (%rbx)
    00000062: 	movq	(%r9), %rbp
    00000065: 	movq	%rbp, %rax
    00000068: 	addq	%r12, %rax
    0000006b: 	je	.Ltmp1038 # Offset: 107
    0000006d: 	testq	%rbp, %rbp
    00000070: 	je	.Ltmp1039 # Offset: 112
.Ltmp1038:
    00000076: 	movq	%r12, 0x70(%rsp)
    0000007b: 	cmpq	$0xf, %r12
    0000007f: 	ja	.Ltmp1040 # Offset: 127
    00000085: 	cmpq	$0x1, %r12
    00000089: 	jne	.Ltmp1041 # Offset: 137
    0000008f: 	movzbl	(%rbp), %eax
    00000093: 	movb	%al, 0x10(%rbx)
.Ltmp1060:
    00000096: 	movq	%r12, 0x8(%rbx)
    0000009a: 	movb	$0x0, (%rdi,%r12)
    0000009f: 	addq	$0x20, "_ZL7gLabels/1"+48(%rip)
    000000a7: 	jmp	.Ltmp1042 # Offset: 167
.Ltmp1037:
    000000a9: 	movq	%r9, %rsi
    000000ac: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000000b3: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 179
.Ltmp1042:
    000000b8: 	callq	clock@PLT # Offset: 184
    000000bd: 	movq	%rax, start_time(%rip)
    000000c4: 	movl	iterations(%rip), %eax
    000000ca: 	movl	%eax, 0x64(%rsp)
    000000ce: 	testl	%eax, %eax
    000000d0: 	jle	.Ltmp1043 # Offset: 208
    000000d6: 	movl	0x48(%rsp), %ebx
    000000da: 	movl	$0x0, 0x60(%rsp)
    000000e2: 	movl	%ebx, %eax
    000000e4: 	shll	$0x4, %eax
    000000e7: 	subl	%ebx, %eax
    000000e9: 	movl	%eax, 0x4c(%rsp)
    000000ed: 	movslq	%ebx, %rax
    000000f0: 	leaq	(,%rax,8), %r13
    000000f8: 	movq	%rax, %r15
    000000fb: 	movq	0x40(%rsp), %rax
    00000100: 	shlq	$0x4, %r15
    00000104: 	leaq	0x1908(%rax), %rbx
    0000010b: 	addq	$0x8, %rax
    0000010f: 	movq	%rbx, 0x68(%rsp)
    00000114: 	movq	%rax, 0x50(%rsp)
    00000119: 	movq	%r13, %rax
    0000011c: 	movq	%r15, %r13
    0000011f: 	movq	%rax, %r15
.Ltmp1053:
    00000122: 	movq	0x40(%rsp), %rax
    00000127: 	movq	$0x0, (%rax)
    0000012e: 	movq	0x68(%rsp), %rbx
    00000133: 	movq	$0x0, -0x10(%rbx)
    0000013b: 	movq	0x50(%rsp), %rdi
    00000140: 	andq	$-0x8, %rdi
    00000144: 	subq	%rdi, %rax
    00000147: 	movq	%rax, %rcx
    0000014a: 	xorl	%eax, %eax
    0000014c: 	addl	$0x1900, %ecx
    00000152: 	shrl	$0x3, %ecx
    00000155: 	rep		stosq	%rax, %es:(%rdi)
    00000158: 	movl	0x48(%rsp), %edx
    0000015c: 	testl	%edx, %edx
    0000015e: 	jle	.Ltmp1044 # Offset: 350
    00000164: 	movl	0x28(%rsp), %eax
    00000168: 	testl	%eax, %eax
    0000016a: 	jle	.Ltmp1044 # Offset: 362
    00000170: 	movq	$0x0, 0x38(%rsp)
    00000179: 	movq	%r15, %rax
    0000017c: 	movq	%r14, %r12
    0000017f: 	movq	%r13, %r15
    00000182: 	movq	%rax, %r13
.Ltmp1052:
    00000185: 	movq	0x38(%rsp), %rdi
    0000018a: 	movl	0x48(%rsp), %ebx
    0000018e: 	movq	$0x0, 0x20(%rsp)
    00000197: 	movl	$0x0, 0x2c(%rsp)
    0000019f: 	movq	0x40(%rsp), %r14
    000001a4: 	movl	%edi, %eax
    000001a6: 	addl	$0x12c, %eax
    000001ab: 	cmpl	%ebx, %eax
    000001ad: 	cmovgl	%ebx, %eax
    000001b0: 	movl	%eax, 0x10(%rsp)
    000001b4: 	cmpl	%edi, %eax
    000001b6: 	jle	.Ltmp1045 # Offset: 438
    000001bc: 	nopl	(%rax) # Size: 4
.Ltmp1051:
    000001c0: 	movq	0x20(%rsp), %rsi
    000001c5: 	movl	0x28(%rsp), %ebx
    000001c9: 	movl	%esi, %eax
    000001cb: 	addl	$0xf, %eax
    000001ce: 	cmpl	%ebx, %eax
    000001d0: 	cmovgl	%ebx, %eax
    000001d3: 	cmpl	%esi, %eax
    000001d5: 	jle	.Ltmp1046 # Offset: 469
    000001db: 	movq	%rsi, %rcx
    000001de: 	movslq	0x2c(%rsp), %rdx
    000001e3: 	movq	0x38(%rsp), %rdi
    000001e8: 	xorl	%r11d, %r11d
    000001eb: 	subl	%ecx, %eax
    000001ed: 	movq	0x40(%rsp), %r8
    000001f2: 	addq	%rdi, %rdx
    000001f5: 	leaq	-0x1(%rax), %rbx
    000001f9: 	movl	%eax, %ebp
    000001fb: 	imulq	%r13, %rbx
    000001ff: 	leaq	-0x1(%rax,%rcx), %rax
    00000204: 	movl	%ebp, %r9d
    00000207: 	movl	%ebp, 0x1c(%rsp)
    0000020b: 	leaq	(%r12,%rdx,8), %rsi
    0000020f: 	movl	0x48(%rsp), %edx
    00000213: 	leaq	(%r8,%rax,8), %rax
    00000217: 	movq	%rax, (%rsp)
    0000021b: 	movl	$0x0, %eax
    00000220: 	testl	%edx, %edx
    00000222: 	cmovnsq	%rbx, %r11
    00000226: 	cmovnsq	%rax, %rbx
    0000022a: 	movl	%ebp, %eax
    0000022c: 	andl	$-0x2, %r9d
    00000230: 	shrl	%eax
    00000232: 	movl	%r9d, 0x18(%rsp)
    00000237: 	addl	%ecx, %r9d
    0000023a: 	subl	$0x1, %eax
    0000023d: 	movq	%r11, 0x30(%rsp)
    00000242: 	shlq	$0x4, %rax
    00000246: 	leaq	0x10(%r14,%rax), %r10
    0000024b: 	movslq	%r9d, %rax
    0000024e: 	imull	%edx, %r9d
    00000252: 	leaq	(%r8,%rax,8), %r8
    00000256: 	leal	-0x1(%rbp), %eax
    00000259: 	movq	0x30(%rsp), %rbp
    0000025e: 	movl	%eax, 0x14(%rsp)
    00000262: 	addq	%rcx, %rax
    00000265: 	movq	0x50(%rsp), %rcx
    0000026a: 	leaq	(%rcx,%rax,8), %r11
    0000026e: 	nop # Size: 2
.Ltmp1050:
    00000270: 	movq	0x8(%rsp), %rcx
    00000275: 	movq	%rsi, %rdx
    00000278: 	movl	%edi, %eax
    0000027a: 	subq	%r12, %rdx
    0000027d: 	movsd	(%rcx,%rdi,8), %xmm1
    00000282: 	leaq	(%rbx,%rsi), %rcx
    00000286: 	cmpq	%rcx, (%rsp)
    0000028a: 	setb	%cl
    0000028d: 	addq	%rbp, %rdx
    00000290: 	addq	%r12, %rdx
    00000293: 	cmpq	%rdx, %r14
    00000296: 	seta	%dl
    00000299: 	orb	%cl, %dl
    0000029b: 	je	.Ltmp1047 # Offset: 667
    000002a1: 	movapd	%xmm1, %xmm2
    000002a5: 	cmpl	$0x2, 0x14(%rsp)
    000002aa: 	movq	%rsi, %rcx
    000002ad: 	movq	%r14, %rdx
    000002b0: 	unpcklpd	%xmm2, %xmm2
    000002b4: 	jbe	.Ltmp1047 # Offset: 692
.Ltmp1048:
    000002ba: 	movsd	(%rcx), %xmm0
    000002be: 	movupd	(%rdx), %xmm4
    000002c2: 	addq	$0x10, %rdx
    000002c6: 	movhpd	(%rcx,%r13), %xmm0
    000002cc: 	addq	%r15, %rcx
    000002cf: 	mulpd	%xmm2, %xmm0
    000002d3: 	addpd	%xmm4, %xmm0
    000002d7: 	movups	%xmm0, -0x10(%rdx)
    000002db: 	cmpq	%rdx, %r10
    000002de: 	jne	.Ltmp1048 # Offset: 734
    000002e0: 	movl	0x18(%rsp), %edx
    000002e4: 	cmpl	%edx, 0x1c(%rsp)
    000002e8: 	je	.Ltmp1049 # Offset: 744
    000002ea: 	addl	%r9d, %eax
    000002ed: 	cltq
    000002ef: 	mulsd	(%r12,%rax,8), %xmm1
    000002f5: 	addsd	(%r8), %xmm1
    000002fa: 	movsd	%xmm1, (%r8)
.Ltmp1049:
    000002ff: 	addq	$0x1, %rdi
    00000303: 	addq	$0x8, %rsi
    00000307: 	cmpl	%edi, 0x10(%rsp)
    0000030b: 	jg	.Ltmp1050 # Offset: 779
.Ltmp1046:
    00000311: 	addq	$0xf, 0x20(%rsp)
    00000317: 	movl	0x4c(%rsp), %ebx
    0000031b: 	addq	$0x78, %r14
    0000031f: 	addl	%ebx, 0x2c(%rsp)
    00000323: 	movq	0x20(%rsp), %rax
    00000328: 	cmpl	%eax, 0x28(%rsp)
    0000032c: 	jg	.Ltmp1051 # Offset: 812
.Ltmp1045:
    00000332: 	addq	$0x12c, 0x38(%rsp)
    0000033b: 	movq	0x38(%rsp), %rax
    00000340: 	cmpl	%eax, 0x48(%rsp)
    00000344: 	jg	.Ltmp1052 # Offset: 836
    0000034a: 	movq	%r13, %rax
    0000034d: 	movq	%r12, %r14
    00000350: 	movq	%r15, %r13
    00000353: 	movq	%rax, %r15
.Ltmp1044:
    00000356: 	addl	$0x1, 0x60(%rsp)
    0000035b: 	movl	0x60(%rsp), %eax
    0000035f: 	cmpl	0x64(%rsp), %eax
    00000363: 	jne	.Ltmp1053 # Offset: 867
.Ltmp1043:
    00000369: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000370: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00000377: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000037e: 	je	.Ltmp1054 # Offset: 894
.Ltmp1061:
    00000384: 	movq	-0x20(%rax), %rbp
    00000388: 	callq	clock@PLT # Offset: 904
    0000038d: 	pxor	%xmm0, %xmm0
    00000391: 	movq	%rax, end_time(%rip)
    00000398: 	movq	%rbp, %rdi
    0000039b: 	subq	start_time(%rip), %rax
    000003a2: 	cvtsi2sd	%rax, %xmm0
    000003a7: 	divsd	DATAat0x24960(%rip), %xmm0
    000003af: 	callq	_Z13record_resultdPKc # Offset: 943
    000003b4: 	movq	0x40(%rsp), %rax
    000003b9: 	pxor	%xmm0, %xmm0
    000003bd: 	leaq	0x1900(%rax), %rdx
.Ltmp1055:
    000003c4: 	movsd	(%rax), %xmm1
    000003c8: 	addq	$0x10, %rax
    000003cc: 	addsd	%xmm1, %xmm0
    000003d0: 	movsd	-0x8(%rax), %xmm1
    000003d5: 	addsd	%xmm1, %xmm0
    000003d9: 	cmpq	%rax, %rdx
    000003dc: 	jne	.Ltmp1055 # Offset: 988
    000003de: 	movsd	init_value(%rip), %xmm1
    000003e6: 	movsd	DATAat0x24988(%rip), %xmm2
    000003ee: 	movapd	%xmm0, %xmm3
    000003f2: 	mulsd	%xmm1, %xmm2
    000003f6: 	mulsd	%xmm1, %xmm2
    000003fa: 	movapd	%xmm0, %xmm1
    000003fe: 	subsd	%xmm2, %xmm1
    00000402: 	movq	DATAat0x24940(%rip), %xmm2
    0000040a: 	andpd	%xmm2, %xmm3
    0000040e: 	comisd	DATAat0x24978(%rip), %xmm3
    00000416: 	jbe	.Ltmp1056 # Offset: 1046
    00000418: 	divsd	%xmm0, %xmm1
.Ltmp1056:
    0000041c: 	movsd	DATAat0x24980(%rip), %xmm0
    00000424: 	andpd	%xmm2, %xmm1
    00000428: 	comisd	%xmm1, %xmm0
    0000042c: 	jbe	.Ltmp1057 # Offset: 1068
    00000432: 	movq	0x78(%rsp), %rax
    00000437: 	subq	%fs:0x28, %rax
    00000440: 	jne	.Ltmp1058 # Offset: 1088
    00000446: 	addq	$0x88, %rsp
    0000044d: 	popq	%rbx
    0000044e: 	popq	%rbp
    0000044f: 	popq	%r12
    00000451: 	popq	%r13
    00000453: 	popq	%r14
    00000455: 	popq	%r15
    00000457: 	retq # Offset: 1111
    00000458: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1047:
    00000460: 	movq	%rsi, %rdx
    00000463: 	movq	%r14, %rax
    00000466: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1059:
    00000470: 	movsd	(%rdx), %xmm0
    00000474: 	addq	$0x8, %rax
    00000478: 	addq	%r13, %rdx
    0000047b: 	mulsd	%xmm1, %xmm0
    0000047f: 	addsd	-0x8(%rax), %xmm0
    00000484: 	movsd	%xmm0, -0x8(%rax)
    00000489: 	cmpq	%r11, %rax
    0000048c: 	jne	.Ltmp1059 # Offset: 1164
    0000048e: 	jmp	.Ltmp1049 # Offset: 1166
.Ltmp1040:
    00000493: 	movq	%rbx, %rdi
    00000496: 	leaq	0x70(%rsp), %rsi
    0000049b: 	xorl	%edx, %edx
    0000049d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1181
    000004a2: 	movq	%rax, (%rbx)
    000004a5: 	movq	%rax, %rdi
    000004a8: 	movq	0x70(%rsp), %rax
    000004ad: 	movq	%rax, 0x10(%rbx)
.Ltmp1062:
    000004b1: 	movq	%r12, %rdx
    000004b4: 	movq	%rbp, %rsi
    000004b7: 	callq	memcpy@PLT # Offset: 1207
    000004bc: 	movq	0x70(%rsp), %r12
    000004c1: 	movq	(%rbx), %rdi
    000004c4: 	jmp	.Ltmp1060 # Offset: 1220
.Ltmp1054:
    000004c9: 	movq	-0x8(%rdx), %rax
    000004cd: 	addq	$0x200, %rax
    000004d3: 	jmp	.Ltmp1061 # Offset: 1235
.Ltmp1041:
    000004d8: 	testq	%r12, %r12
    000004db: 	je	.Ltmp1060 # Offset: 1243
    000004e1: 	jmp	.Ltmp1062 # Offset: 1249
    000004e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1057:
    000004e8: 	movq	0x78(%rsp), %rax
    000004ed: 	subq	%fs:0x28, %rax
    000004f6: 	jne	.Ltmp1058 # Offset: 1270
    000004f8: 	movq	0x58(%rsp), %rax
    000004fd: 	leaq	DATAat0x2455f(%rip), %rsi
    00000504: 	movl	$0x1, %edi
    00000509: 	movq	(%rax), %rdx
    0000050c: 	addq	$0x88, %rsp
    00000513: 	xorl	%eax, %eax
    00000515: 	popq	%rbx
    00000516: 	popq	%rbp
    00000517: 	popq	%r12
    00000519: 	popq	%r13
    0000051b: 	popq	%r14
    0000051d: 	popq	%r15
    0000051f: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 1311
.Ltmp1058:
    00000524: 	callq	__stack_chk_fail@PLT # Offset: 1316
.Ltmp1039:
    00000529: 	leaq	DATAat0x24520(%rip), %rdi
    00000530: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1328
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_matvecmulId21matvecmul_JI_blocked2IdEEvPKT_PS2_S4_iiT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z14test_matvecmulIf22matvecmul_IJ_unrolled1IfEEvPKT_PS2_S4_iiT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 97
  State       : disassembled
  Address     : 0x184b0
  Size        : 0x4ca
  MaxSize     : 0x4d0
  Offset      : 0x184b0
  Section     : .text
  Orc Section : .local.text._Z14test_matvecmulIf22matvecmul_IJ_unrolled1IfEEvPKT_PS2_S4_iiT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB096:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movl	%r8d, %r12d
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdx, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x58, %rsp
    0000001b: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    00000022: 	movq	%rsi, 0x18(%rsp)
    00000027: 	movl	%ecx, 0x20(%rsp)
    0000002b: 	movq	%r9, 0x38(%rsp)
    00000030: 	movq	%fs:0x28, %rax
    00000039: 	movq	%rax, 0x48(%rsp)
    0000003e: 	xorl	%eax, %eax
    00000040: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000047: 	subq	$0x20, %rax
    0000004b: 	cmpq	%rax, %r14
    0000004e: 	je	.Ltmp1063 # Offset: 78
    00000054: 	leaq	0x10(%r14), %rdi
    00000058: 	movq	0x8(%r9), %r13
    0000005c: 	movq	%rdi, (%r14)
    0000005f: 	movq	(%r9), %r15
    00000062: 	movq	%r15, %rax
    00000065: 	addq	%r13, %rax
    00000068: 	je	.Ltmp1064 # Offset: 104
    0000006a: 	testq	%r15, %r15
    0000006d: 	je	.Ltmp1065 # Offset: 109
.Ltmp1064:
    00000073: 	movq	%r13, 0x40(%rsp)
    00000078: 	cmpq	$0xf, %r13
    0000007c: 	ja	.Ltmp1066 # Offset: 124
    00000082: 	cmpq	$0x1, %r13
    00000086: 	jne	.Ltmp1067 # Offset: 134
    0000008c: 	movzbl	(%r15), %eax
    00000090: 	movb	%al, 0x10(%r14)
.Ltmp1077:
    00000094: 	movq	%r13, 0x8(%r14)
    00000098: 	movb	$0x0, (%rdi,%r13)
    0000009d: 	addq	$0x20, "_ZL7gLabels/1"+48(%rip)
.Ltmp1085:
    000000a5: 	callq	clock@PLT # Offset: 165
    000000aa: 	movq	%rax, start_time(%rip)
    000000b1: 	movl	iterations(%rip), %eax
    000000b7: 	movl	%eax, 0x24(%rsp)
    000000bb: 	testl	%eax, %eax
    000000bd: 	jle	.Ltmp1068 # Offset: 189
    000000c3: 	movl	0x20(%rsp), %eax
    000000c7: 	movq	0x18(%rsp), %rdi
    000000cc: 	pxor	%xmm3, %xmm3
    000000d0: 	movslq	%r12d, %r10
    000000d3: 	leal	-0x4(%r12), %r8d
    000000d8: 	movl	$0x0, 0x14(%rsp)
    000000e0: 	leal	-0x3(%r12), %r11d
    000000e5: 	subl	$0x1, %eax
    000000e8: 	shrl	$0x2, %r8d
    000000ec: 	leaq	(%rdi,%rax,4), %rax
    000000f0: 	addl	$0x1, %r8d
    000000f4: 	movq	%rax, 0x8(%rsp)
    000000f9: 	leal	(,%r8,4), %eax
    00000101: 	movl	%eax, 0x10(%rsp)
    00000105: 	leaq	0xc88(%rdi), %rax
    0000010c: 	movq	%rax, 0x30(%rsp)
    00000111: 	leaq	0x8(%rdi), %rax
    00000115: 	movq	%rax, 0x28(%rsp)
    0000011a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1078:
    00000120: 	movq	0x18(%rsp), %r13
    00000125: 	xorl	%r15d, %r15d
    00000128: 	movq	$0x0, (%r13)
    00000130: 	movq	0x30(%rsp), %rax
    00000135: 	movq	%r13, %rcx
    00000138: 	movq	$0x0, -0x10(%rax)
    00000140: 	movq	0x28(%rsp), %rdi
    00000145: 	xorl	%eax, %eax
    00000147: 	andq	$-0x8, %rdi
    0000014b: 	subq	%rdi, %rcx
    0000014e: 	addl	$0xc80, %ecx
    00000154: 	shrl	$0x3, %ecx
    00000157: 	rep		stosq	%rax, %es:(%rdi)
    0000015a: 	movl	0x20(%rsp), %eax
    0000015e: 	testl	%eax, %eax
    00000160: 	jle	.Ltmp1069 # Offset: 352
    00000166: 	movss	(%r13), %xmm1
    0000016c: 	leaq	(%rbp,%r15,4), %rdx
    00000171: 	testl	%r11d, %r11d
    00000174: 	jle	.Ltmp1070 # Offset: 372
    0000017a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1075:
    00000180: 	pxor	%xmm2, %xmm2
    00000184: 	xorl	%eax, %eax
    00000186: 	xorl	%ecx, %ecx
    00000188: 	movss	%xmm1, %xmm2
    0000018c: 	nopl	(%rax) # Size: 4
.Ltmp1071:
    00000190: 	movups	(%rbx,%rax), %xmm0
    00000194: 	movups	(%rdx,%rax), %xmm7
    00000198: 	addl	$0x1, %ecx
    0000019b: 	addq	$0x10, %rax
    0000019f: 	mulps	%xmm7, %xmm0
    000001a2: 	addps	%xmm0, %xmm2
    000001a5: 	cmpl	%r8d, %ecx
    000001a8: 	jb	.Ltmp1071 # Offset: 424
    000001aa: 	movaps	%xmm2, %xmm4
    000001ad: 	movaps	%xmm2, %xmm5
    000001b0: 	movl	0x10(%rsp), %esi
    000001b4: 	movaps	%xmm2, %xmm1
    000001b7: 	unpckhps	%xmm2, %xmm5
    000001ba: 	shufps	$0x55, %xmm2, %xmm4
    000001be: 	shufps	$0xff, %xmm2, %xmm2
    000001c2: 	movaps	%xmm2, %xmm7
.Ltmp1076:
    000001c5: 	cmpl	%esi, %r12d
    000001c8: 	jle	.Ltmp1072 # Offset: 456
    000001ce: 	movl	%r12d, %r14d
    000001d1: 	subl	%esi, %r14d
    000001d4: 	leal	-0x1(%r14), %eax
    000001d8: 	cmpl	$0x2, %eax
    000001db: 	jbe	.Ltmp1073 # Offset: 475
    000001dd: 	movslq	%esi, %rax
    000001e0: 	leaq	(%r15,%rax), %rcx
    000001e4: 	leaq	(%rbx,%rax,4), %rdi
    000001e8: 	xorl	%eax, %eax
    000001ea: 	leaq	(%rbp,%rcx,4), %r9
    000001ef: 	movl	%r14d, %ecx
    000001f2: 	shrl	$0x2, %ecx
    000001f5: 	shlq	$0x4, %rcx
    000001f9: 	nopl	(%rax) # Size: 7
.Ltmp1074:
    00000200: 	movups	(%rdi,%rax), %xmm0
    00000204: 	movups	(%r9,%rax), %xmm6
    00000209: 	addq	$0x10, %rax
    0000020d: 	mulps	%xmm6, %xmm0
    00000210: 	addss	%xmm0, %xmm1
    00000214: 	movaps	%xmm0, %xmm2
    00000217: 	shufps	$0x55, %xmm0, %xmm2
    0000021b: 	addss	%xmm1, %xmm2
    0000021f: 	movaps	%xmm0, %xmm1
    00000222: 	unpckhps	%xmm0, %xmm1
    00000225: 	shufps	$0xff, %xmm0, %xmm0
    00000229: 	addss	%xmm2, %xmm1
    0000022d: 	addss	%xmm0, %xmm1
    00000231: 	cmpq	%rcx, %rax
    00000234: 	jne	.Ltmp1074 # Offset: 564
    00000236: 	movl	%r14d, %eax
    00000239: 	andl	$-0x4, %eax
    0000023c: 	addl	%eax, %esi
    0000023e: 	cmpl	%r14d, %eax
    00000241: 	je	.Ltmp1072 # Offset: 577
.Ltmp1073:
    00000243: 	movslq	%esi, %rcx
    00000246: 	movss	(%rbx,%rcx,4), %xmm0
    0000024b: 	mulss	(%rdx,%rcx,4), %xmm0
    00000250: 	leaq	(,%rcx,4), %rax
    00000258: 	leal	0x1(%rsi), %ecx
    0000025b: 	addss	%xmm0, %xmm1
    0000025f: 	cmpl	%ecx, %r12d
    00000262: 	jle	.Ltmp1072 # Offset: 610
    00000264: 	movss	0x4(%rdx,%rax), %xmm0
    0000026a: 	mulss	0x4(%rbx,%rax), %xmm0
    00000270: 	addl	$0x2, %esi
    00000273: 	addss	%xmm0, %xmm1
    00000277: 	cmpl	%esi, %r12d
    0000027a: 	jle	.Ltmp1072 # Offset: 634
    0000027c: 	movss	0x8(%rbx,%rax), %xmm0
    00000282: 	mulss	0x8(%rdx,%rax), %xmm0
    00000288: 	addss	%xmm0, %xmm1
.Ltmp1072:
    0000028c: 	addss	%xmm1, %xmm4
    00000290: 	leaq	0x4(%r13), %rax
    00000294: 	addq	%r10, %r15
    00000297: 	addss	%xmm5, %xmm4
    0000029b: 	addss	%xmm7, %xmm4
    0000029f: 	movss	%xmm4, (%r13)
    000002a5: 	cmpq	%r13, 0x8(%rsp)
    000002aa: 	je	.Ltmp1069 # Offset: 682
    000002ac: 	movq	%rax, %r13
    000002af: 	leaq	(%rbp,%r15,4), %rdx
    000002b4: 	movss	(%r13), %xmm1
    000002ba: 	testl	%r11d, %r11d
    000002bd: 	jg	.Ltmp1075 # Offset: 701
.Ltmp1070:
    000002c3: 	movaps	%xmm3, %xmm7
    000002c6: 	movaps	%xmm3, %xmm5
    000002c9: 	movaps	%xmm3, %xmm4
    000002cc: 	xorl	%esi, %esi
    000002ce: 	jmp	.Ltmp1076 # Offset: 718
.Ltmp1066:
    000002d3: 	movq	%r14, %rdi
    000002d6: 	leaq	0x40(%rsp), %rsi
    000002db: 	xorl	%edx, %edx
    000002dd: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 733
    000002e2: 	movq	%rax, (%r14)
    000002e5: 	movq	%rax, %rdi
    000002e8: 	movq	0x40(%rsp), %rax
    000002ed: 	movq	%rax, 0x10(%r14)
.Ltmp1086:
    000002f1: 	movq	%r13, %rdx
    000002f4: 	movq	%r15, %rsi
    000002f7: 	callq	memcpy@PLT # Offset: 759
    000002fc: 	movq	0x40(%rsp), %r13
    00000301: 	movq	(%r14), %rdi
    00000304: 	jmp	.Ltmp1077 # Offset: 772
    00000309: 	nopl	(%rax) # Size: 7
.Ltmp1069:
    00000310: 	addl	$0x1, 0x14(%rsp)
    00000315: 	movl	0x14(%rsp), %eax
    00000319: 	cmpl	%eax, 0x24(%rsp)
    0000031d: 	jne	.Ltmp1078 # Offset: 797
.Ltmp1087:
    00000323: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000032a: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00000331: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000338: 	je	.Ltmp1079 # Offset: 824
.Ltmp1084:
    0000033e: 	movq	-0x20(%rax), %rbp
    00000342: 	movss	%xmm3, 0x8(%rsp)
    00000348: 	callq	clock@PLT # Offset: 840
    0000034d: 	pxor	%xmm0, %xmm0
    00000351: 	movq	%rax, end_time(%rip)
    00000358: 	movq	%rbp, %rdi
    0000035b: 	subq	start_time(%rip), %rax
    00000362: 	cvtsi2sd	%rax, %xmm0
    00000367: 	divsd	DATAat0x24960(%rip), %xmm0
    0000036f: 	callq	_Z13record_resultdPKc # Offset: 879
    00000374: 	movq	0x18(%rsp), %rax
    00000379: 	movss	0x8(%rsp), %xmm3
    0000037f: 	leaq	0xc80(%rax), %rdx
    00000386: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1080:
    00000390: 	movups	(%rax), %xmm1
    00000393: 	addq	$0x10, %rax
    00000397: 	addss	%xmm1, %xmm3
    0000039b: 	movaps	%xmm1, %xmm0
    0000039e: 	shufps	$0x55, %xmm1, %xmm0
    000003a2: 	addss	%xmm0, %xmm3
    000003a6: 	movaps	%xmm1, %xmm0
    000003a9: 	unpckhps	%xmm1, %xmm0
    000003ac: 	shufps	$0xff, %xmm1, %xmm1
    000003b0: 	addss	%xmm3, %xmm0
    000003b4: 	movaps	%xmm1, %xmm3
    000003b7: 	addss	%xmm0, %xmm3
    000003bb: 	cmpq	%rdx, %rax
    000003be: 	jne	.Ltmp1080 # Offset: 958
    000003c0: 	movss	DATAat0x24990(%rip), %xmm1
    000003c8: 	pxor	%xmm0, %xmm0
    000003cc: 	cvtsd2ss	init_value(%rip), %xmm0
    000003d4: 	mulss	%xmm0, %xmm1
    000003d8: 	mulss	%xmm0, %xmm1
    000003dc: 	movaps	%xmm3, %xmm0
    000003df: 	subss	%xmm1, %xmm0
    000003e3: 	movaps	%xmm3, %xmm1
    000003e6: 	andps	DATAat0x24930(%rip), %xmm1
    000003ed: 	cvtss2sd	%xmm1, %xmm1
    000003f1: 	comisd	DATAat0x24968(%rip), %xmm1
    000003f9: 	jbe	.Ltmp1081 # Offset: 1017
    000003fb: 	divss	%xmm3, %xmm0
.Ltmp1081:
    000003ff: 	movsd	DATAat0x24970(%rip), %xmm1
    00000407: 	cvtss2sd	%xmm0, %xmm0
    0000040b: 	andpd	DATAat0x24940(%rip), %xmm0
    00000413: 	comisd	%xmm0, %xmm1
    00000417: 	jbe	.Ltmp1082 # Offset: 1047
    00000419: 	movq	0x48(%rsp), %rax
    0000041e: 	subq	%fs:0x28, %rax
    00000427: 	jne	.Ltmp1083 # Offset: 1063
    0000042d: 	addq	$0x58, %rsp
    00000431: 	popq	%rbx
    00000432: 	popq	%rbp
    00000433: 	popq	%r12
    00000435: 	popq	%r13
    00000437: 	popq	%r14
    00000439: 	popq	%r15
    0000043b: 	retq # Offset: 1083
.Ltmp1082:
    0000043c: 	movq	0x48(%rsp), %rax
    00000441: 	subq	%fs:0x28, %rax
    0000044a: 	jne	.Ltmp1083 # Offset: 1098
    0000044c: 	movq	0x38(%rsp), %rax
    00000451: 	leaq	DATAat0x2455f(%rip), %rsi
    00000458: 	movl	$0x1, %edi
    0000045d: 	movq	(%rax), %rdx
    00000460: 	addq	$0x58, %rsp
    00000464: 	xorl	%eax, %eax
    00000466: 	popq	%rbx
    00000467: 	popq	%rbp
    00000468: 	popq	%r12
    0000046a: 	popq	%r13
    0000046c: 	popq	%r14
    0000046e: 	popq	%r15
    00000470: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 1136
.Ltmp1079:
    00000475: 	movq	-0x8(%rdx), %rax
    00000479: 	addq	$0x200, %rax
    0000047f: 	jmp	.Ltmp1084 # Offset: 1151
.Ltmp1063:
    00000484: 	movq	%r9, %rsi
    00000487: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000048e: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1166
    00000493: 	jmp	.Ltmp1085 # Offset: 1171
.Ltmp1067:
    00000498: 	testq	%r13, %r13
    0000049b: 	je	.Ltmp1077 # Offset: 1179
    000004a1: 	jmp	.Ltmp1086 # Offset: 1185
    000004a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1068:
    000004b0: 	pxor	%xmm3, %xmm3
    000004b4: 	jmp	.Ltmp1087 # Offset: 1204
.Ltmp1083:
    000004b9: 	callq	__stack_chk_fail@PLT # Offset: 1209
.Ltmp1065:
    000004be: 	leaq	DATAat0x24520(%rip), %rdi
    000004c5: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1221
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_matvecmulIf22matvecmul_IJ_unrolled1IfEEvPKT_PS2_S4_iiT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z14test_matvecmulId22matvecmul_IJ_unrolled1IdEEvPKT_PS2_S4_iiT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 98
  State       : disassembled
  Address     : 0x18980
  Size        : 0x46a
  MaxSize     : 0x470
  Offset      : 0x18980
  Section     : .text
  Orc Section : .local.text._Z14test_matvecmulId22matvecmul_IJ_unrolled1IdEEvPKT_PS2_S4_iiT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB097:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movl	%r8d, %r12d
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdx, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x58, %rsp
    0000001b: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    00000022: 	movq	%rsi, 0x18(%rsp)
    00000027: 	movl	%ecx, 0x20(%rsp)
    0000002b: 	movq	%r9, 0x38(%rsp)
    00000030: 	movq	%fs:0x28, %rax
    00000039: 	movq	%rax, 0x48(%rsp)
    0000003e: 	xorl	%eax, %eax
    00000040: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000047: 	subq	$0x20, %rax
    0000004b: 	cmpq	%rax, %r14
    0000004e: 	je	.Ltmp1088 # Offset: 78
    00000054: 	leaq	0x10(%r14), %rdi
    00000058: 	movq	0x8(%r9), %r13
    0000005c: 	movq	%rdi, (%r14)
    0000005f: 	movq	(%r9), %r15
    00000062: 	movq	%r15, %rax
    00000065: 	addq	%r13, %rax
    00000068: 	je	.Ltmp1089 # Offset: 104
    0000006a: 	testq	%r15, %r15
    0000006d: 	je	.Ltmp1090 # Offset: 109
.Ltmp1089:
    00000073: 	movq	%r13, 0x40(%rsp)
    00000078: 	cmpq	$0xf, %r13
    0000007c: 	ja	.Ltmp1091 # Offset: 124
    00000082: 	cmpq	$0x1, %r13
    00000086: 	jne	.Ltmp1092 # Offset: 134
    0000008c: 	movzbl	(%r15), %eax
    00000090: 	movb	%al, 0x10(%r14)
.Ltmp1102:
    00000094: 	movq	%r13, 0x8(%r14)
    00000098: 	movb	$0x0, (%rdi,%r13)
    0000009d: 	addq	$0x20, "_ZL7gLabels/1"+48(%rip)
.Ltmp1110:
    000000a5: 	callq	clock@PLT # Offset: 165
    000000aa: 	movq	%rax, start_time(%rip)
    000000b1: 	movl	iterations(%rip), %eax
    000000b7: 	movl	%eax, 0x24(%rsp)
    000000bb: 	testl	%eax, %eax
    000000bd: 	jle	.Ltmp1093 # Offset: 189
    000000c3: 	movl	0x20(%rsp), %eax
    000000c7: 	movq	0x18(%rsp), %rdi
    000000cc: 	pxor	%xmm4, %xmm4
    000000d0: 	movslq	%r12d, %r10
    000000d3: 	leal	-0x4(%r12), %r8d
    000000d8: 	movl	$0x0, 0x14(%rsp)
    000000e0: 	leal	-0x3(%r12), %r11d
    000000e5: 	subl	$0x1, %eax
    000000e8: 	shrl	$0x2, %r8d
    000000ec: 	leaq	(%rdi,%rax,8), %rax
    000000f0: 	addl	$0x1, %r8d
    000000f4: 	movq	%rax, 0x8(%rsp)
    000000f9: 	leal	(,%r8,4), %eax
    00000101: 	movl	%eax, 0x10(%rsp)
    00000105: 	leaq	0x1908(%rdi), %rax
    0000010c: 	movq	%rax, 0x28(%rsp)
    00000111: 	leaq	0x8(%rdi), %rax
    00000115: 	movq	%rax, 0x30(%rsp)
    0000011a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1103:
    00000120: 	movq	0x18(%rsp), %r13
    00000125: 	xorl	%r15d, %r15d
    00000128: 	movq	$0x0, (%r13)
    00000130: 	movq	0x28(%rsp), %rax
    00000135: 	movq	%r13, %rcx
    00000138: 	movq	$0x0, -0x10(%rax)
    00000140: 	movq	0x30(%rsp), %rdi
    00000145: 	xorl	%eax, %eax
    00000147: 	andq	$-0x8, %rdi
    0000014b: 	subq	%rdi, %rcx
    0000014e: 	addl	$0x1900, %ecx
    00000154: 	shrl	$0x3, %ecx
    00000157: 	rep		stosq	%rax, %es:(%rdi)
    0000015a: 	movl	0x20(%rsp), %eax
    0000015e: 	testl	%eax, %eax
    00000160: 	jle	.Ltmp1094 # Offset: 352
    00000166: 	movsd	(%r13), %xmm0
    0000016c: 	leaq	(%rbp,%r15,8), %rcx
    00000171: 	testl	%r11d, %r11d
    00000174: 	jle	.Ltmp1095 # Offset: 372
    0000017a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1100:
    00000180: 	movq	%xmm0, %xmm1
    00000184: 	xorl	%eax, %eax
    00000186: 	pxor	%xmm2, %xmm2
    0000018a: 	xorl	%edx, %edx
    0000018c: 	nopl	(%rax) # Size: 4
.Ltmp1096:
    00000190: 	movupd	(%rbx,%rax), %xmm0
    00000195: 	movupd	(%rcx,%rax), %xmm7
    0000019a: 	addl	$0x1, %edx
    0000019d: 	movupd	0x10(%rcx,%rax), %xmm3
    000001a3: 	mulpd	%xmm7, %xmm0
    000001a7: 	addpd	%xmm0, %xmm1
    000001ab: 	movupd	0x10(%rbx,%rax), %xmm0
    000001b1: 	addq	$0x20, %rax
    000001b5: 	mulpd	%xmm3, %xmm0
    000001b9: 	addpd	%xmm0, %xmm2
    000001bd: 	cmpl	%edx, %r8d
    000001c0: 	ja	.Ltmp1096 # Offset: 448
    000001c2: 	movapd	%xmm1, %xmm0
    000001c6: 	movapd	%xmm2, %xmm6
    000001ca: 	unpckhpd	%xmm1, %xmm1
    000001ce: 	movl	0x10(%rsp), %eax
    000001d2: 	unpckhpd	%xmm2, %xmm2
    000001d6: 	movapd	%xmm1, %xmm3
    000001da: 	movapd	%xmm2, %xmm5
.Ltmp1101:
    000001de: 	cmpl	%eax, %r12d
    000001e1: 	jle	.Ltmp1097 # Offset: 481
    000001e3: 	movl	%r12d, %r14d
    000001e6: 	subl	%eax, %r14d
    000001e9: 	cmpl	$0x1, %r14d
    000001ed: 	je	.Ltmp1098 # Offset: 493
    000001ef: 	movslq	%eax, %rdx
    000001f2: 	leaq	(%r15,%rdx), %rsi
    000001f6: 	leaq	(%rbx,%rdx,8), %rdi
    000001fa: 	xorl	%edx, %edx
    000001fc: 	leaq	(%rbp,%rsi,8), %r9
    00000201: 	movl	%r14d, %esi
    00000204: 	shrl	%esi
    00000206: 	shlq	$0x4, %rsi
    0000020a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1099:
    00000210: 	movupd	(%rdi,%rdx), %xmm2
    00000215: 	movupd	(%r9,%rdx), %xmm7
    0000021b: 	addq	$0x10, %rdx
    0000021f: 	mulpd	%xmm7, %xmm2
    00000223: 	addsd	%xmm2, %xmm0
    00000227: 	unpckhpd	%xmm2, %xmm2
    0000022b: 	addsd	%xmm2, %xmm0
    0000022f: 	cmpq	%rsi, %rdx
    00000232: 	jne	.Ltmp1099 # Offset: 562
    00000234: 	movl	%r14d, %edx
    00000237: 	andl	$-0x2, %edx
    0000023a: 	addl	%edx, %eax
    0000023c: 	cmpl	%r14d, %edx
    0000023f: 	je	.Ltmp1097 # Offset: 575
.Ltmp1098:
    00000241: 	cltq
    00000243: 	movsd	(%rbx,%rax,8), %xmm1
    00000248: 	mulsd	(%rcx,%rax,8), %xmm1
    0000024d: 	addsd	%xmm1, %xmm0
.Ltmp1097:
    00000251: 	addsd	%xmm0, %xmm3
    00000255: 	leaq	0x8(%r13), %rax
    00000259: 	addq	%r10, %r15
    0000025c: 	movapd	%xmm3, %xmm1
    00000260: 	addsd	%xmm6, %xmm1
    00000264: 	addsd	%xmm5, %xmm1
    00000268: 	movsd	%xmm1, (%r13)
    0000026e: 	cmpq	0x8(%rsp), %r13
    00000273: 	je	.Ltmp1094 # Offset: 627
    00000275: 	movq	%rax, %r13
    00000278: 	leaq	(%rbp,%r15,8), %rcx
    0000027d: 	movsd	(%r13), %xmm0
    00000283: 	testl	%r11d, %r11d
    00000286: 	jg	.Ltmp1100 # Offset: 646
.Ltmp1095:
    0000028c: 	movapd	%xmm4, %xmm5
    00000290: 	movapd	%xmm4, %xmm6
    00000294: 	movapd	%xmm4, %xmm3
    00000298: 	xorl	%eax, %eax
    0000029a: 	jmp	.Ltmp1101 # Offset: 666
.Ltmp1091:
    0000029f: 	movq	%r14, %rdi
    000002a2: 	leaq	0x40(%rsp), %rsi
    000002a7: 	xorl	%edx, %edx
    000002a9: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 681
    000002ae: 	movq	%rax, (%r14)
    000002b1: 	movq	%rax, %rdi
    000002b4: 	movq	0x40(%rsp), %rax
    000002b9: 	movq	%rax, 0x10(%r14)
.Ltmp1111:
    000002bd: 	movq	%r13, %rdx
    000002c0: 	movq	%r15, %rsi
    000002c3: 	callq	memcpy@PLT # Offset: 707
    000002c8: 	movq	0x40(%rsp), %r13
    000002cd: 	movq	(%r14), %rdi
    000002d0: 	jmp	.Ltmp1102 # Offset: 720
    000002d5: 	nopl	(%rax) # Size: 3
.Ltmp1094:
    000002d8: 	addl	$0x1, 0x14(%rsp)
    000002dd: 	movl	0x14(%rsp), %eax
    000002e1: 	cmpl	%eax, 0x24(%rsp)
    000002e5: 	jne	.Ltmp1103 # Offset: 741
.Ltmp1112:
    000002eb: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000002f2: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    000002f9: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000300: 	je	.Ltmp1104 # Offset: 768
.Ltmp1109:
    00000306: 	movq	-0x20(%rax), %rbp
    0000030a: 	movsd	%xmm4, 0x8(%rsp)
    00000310: 	callq	clock@PLT # Offset: 784
    00000315: 	pxor	%xmm0, %xmm0
    00000319: 	movq	%rax, end_time(%rip)
    00000320: 	movq	%rbp, %rdi
    00000323: 	subq	start_time(%rip), %rax
    0000032a: 	cvtsi2sd	%rax, %xmm0
    0000032f: 	divsd	DATAat0x24960(%rip), %xmm0
    00000337: 	callq	_Z13record_resultdPKc # Offset: 823
    0000033c: 	movq	0x18(%rsp), %rax
    00000341: 	movsd	0x8(%rsp), %xmm4
    00000347: 	leaq	0x1900(%rax), %rdx
    0000034e: 	nop # Size: 2
.Ltmp1105:
    00000350: 	movsd	(%rax), %xmm0
    00000354: 	addq	$0x10, %rax
    00000358: 	addsd	%xmm0, %xmm4
    0000035c: 	movsd	-0x8(%rax), %xmm0
    00000361: 	addsd	%xmm0, %xmm4
    00000365: 	cmpq	%rdx, %rax
    00000368: 	jne	.Ltmp1105 # Offset: 872
    0000036a: 	movsd	init_value(%rip), %xmm0
    00000372: 	movsd	DATAat0x24988(%rip), %xmm1
    0000037a: 	movapd	%xmm4, %xmm2
    0000037e: 	mulsd	%xmm0, %xmm1
    00000382: 	mulsd	%xmm0, %xmm1
    00000386: 	movapd	%xmm4, %xmm0
    0000038a: 	subsd	%xmm1, %xmm0
    0000038e: 	movq	DATAat0x24940(%rip), %xmm1
    00000396: 	andpd	%xmm1, %xmm2
    0000039a: 	comisd	DATAat0x24978(%rip), %xmm2
    000003a2: 	jbe	.Ltmp1106 # Offset: 930
    000003a4: 	divsd	%xmm4, %xmm0
.Ltmp1106:
    000003a8: 	andpd	%xmm1, %xmm0
    000003ac: 	movsd	DATAat0x24980(%rip), %xmm1
    000003b4: 	comisd	%xmm0, %xmm1
    000003b8: 	jbe	.Ltmp1107 # Offset: 952
    000003ba: 	movq	0x48(%rsp), %rax
    000003bf: 	subq	%fs:0x28, %rax
    000003c8: 	jne	.Ltmp1108 # Offset: 968
    000003ce: 	addq	$0x58, %rsp
    000003d2: 	popq	%rbx
    000003d3: 	popq	%rbp
    000003d4: 	popq	%r12
    000003d6: 	popq	%r13
    000003d8: 	popq	%r14
    000003da: 	popq	%r15
    000003dc: 	retq # Offset: 988
.Ltmp1107:
    000003dd: 	movq	0x48(%rsp), %rax
    000003e2: 	subq	%fs:0x28, %rax
    000003eb: 	jne	.Ltmp1108 # Offset: 1003
    000003ed: 	movq	0x38(%rsp), %rax
    000003f2: 	leaq	DATAat0x2455f(%rip), %rsi
    000003f9: 	movl	$0x1, %edi
    000003fe: 	movq	(%rax), %rdx
    00000401: 	addq	$0x58, %rsp
    00000405: 	xorl	%eax, %eax
    00000407: 	popq	%rbx
    00000408: 	popq	%rbp
    00000409: 	popq	%r12
    0000040b: 	popq	%r13
    0000040d: 	popq	%r14
    0000040f: 	popq	%r15
    00000411: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 1041
.Ltmp1104:
    00000416: 	movq	-0x8(%rdx), %rax
    0000041a: 	addq	$0x200, %rax
    00000420: 	jmp	.Ltmp1109 # Offset: 1056
.Ltmp1088:
    00000425: 	movq	%r9, %rsi
    00000428: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000042f: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1071
    00000434: 	jmp	.Ltmp1110 # Offset: 1076
.Ltmp1092:
    00000439: 	testq	%r13, %r13
    0000043c: 	je	.Ltmp1102 # Offset: 1084
    00000442: 	jmp	.Ltmp1111 # Offset: 1090
    00000447: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1093:
    00000450: 	pxor	%xmm4, %xmm4
    00000454: 	jmp	.Ltmp1112 # Offset: 1108
.Ltmp1108:
    00000459: 	callq	__stack_chk_fail@PLT # Offset: 1113
.Ltmp1090:
    0000045e: 	leaq	DATAat0x24520(%rip), %rdi
    00000465: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1125
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_matvecmulId22matvecmul_IJ_unrolled1IdEEvPKT_PS2_S4_iiT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z14test_matvecmulId31matvecmul_JI_blocked_unrolled1AIdEEvPKT_PS2_S4_iiT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 99
  State       : disassembled
  Address     : 0x18df0
  Size        : 0x50a
  MaxSize     : 0x510
  Offset      : 0x18df0
  Section     : .text
  Orc Section : .local.text._Z14test_matvecmulId31matvecmul_JI_blocked_unrolled1AIdEEvPKT_PS2_S4_iiT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB098:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movl	%r8d, %ebp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdi, %rbx
    00000014: 	subq	$0x68, %rsp
    00000018: 	movq	"_ZL7gLabels/1"+48(%rip), %r13
    0000001f: 	movq	%rsi, 0x20(%rsp)
    00000024: 	movq	%rdx, 0x18(%rsp)
    00000029: 	movl	%ecx, 0x38(%rsp)
    0000002d: 	movq	%r9, 0x30(%rsp)
    00000032: 	movq	%fs:0x28, %rax
    0000003b: 	movq	%rax, 0x58(%rsp)
    00000040: 	xorl	%eax, %eax
    00000042: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000049: 	subq	$0x20, %rax
    0000004d: 	cmpq	%rax, %r13
    00000050: 	je	.Ltmp1113 # Offset: 80
    00000056: 	leaq	0x10(%r13), %rdi
    0000005a: 	movq	0x8(%r9), %r12
    0000005e: 	movq	%rdi, (%r13)
    00000062: 	movq	(%r9), %r14
    00000065: 	movq	%r14, %rax
    00000068: 	addq	%r12, %rax
    0000006b: 	je	.Ltmp1114 # Offset: 107
    0000006d: 	testq	%r14, %r14
    00000070: 	je	.Ltmp1115 # Offset: 112
.Ltmp1114:
    00000076: 	movq	%r12, 0x50(%rsp)
    0000007b: 	cmpq	$0xf, %r12
    0000007f: 	ja	.Ltmp1116 # Offset: 127
    00000085: 	cmpq	$0x1, %r12
    00000089: 	jne	.Ltmp1117 # Offset: 137
    0000008f: 	movzbl	(%r14), %eax
    00000093: 	movb	%al, 0x10(%r13)
.Ltmp1137:
    00000097: 	movq	%r12, 0x8(%r13)
    0000009b: 	movb	$0x0, (%rdi,%r12)
    000000a0: 	addq	$0x20, "_ZL7gLabels/1"+48(%rip)
.Ltmp1136:
    000000a8: 	callq	clock@PLT # Offset: 168
    000000ad: 	movq	%rax, start_time(%rip)
    000000b4: 	movl	iterations(%rip), %eax
    000000ba: 	movl	%eax, 0x3c(%rsp)
    000000be: 	testl	%eax, %eax
    000000c0: 	jle	.Ltmp1118 # Offset: 192
    000000c6: 	leal	-0x7(%rbp), %eax
    000000c9: 	movq	0x20(%rsp), %rdi
    000000ce: 	leal	-0x8(%rbp), %r8d
    000000d2: 	movslq	%ebp, %r12
    000000d5: 	movl	%eax, 0x8(%rsp)
    000000d9: 	movl	0x38(%rsp), %eax
    000000dd: 	shrl	$0x3, %r8d
    000000e1: 	leaq	(,%r12,8), %r15
    000000e9: 	movl	$0x0, 0x2c(%rsp)
    000000f1: 	addl	$0x1, %r8d
    000000f5: 	pxor	%xmm4, %xmm4
    000000f9: 	subl	$0x1, %eax
    000000fc: 	leal	(,%r8,8), %r11d
    00000104: 	leaq	(%rdi,%rax,8), %rax
    00000108: 	movq	%rax, 0x10(%rsp)
    0000010d: 	leaq	0x1908(%rdi), %rax
    00000114: 	movq	%rax, 0x40(%rsp)
    00000119: 	leaq	0x8(%rdi), %rax
    0000011d: 	movq	%rax, 0x48(%rsp)
.Ltmp1129:
    00000122: 	movq	0x20(%rsp), %rax
    00000127: 	movq	$0x0, (%rax)
    0000012e: 	movq	0x40(%rsp), %rdi
    00000133: 	movq	$0x0, -0x10(%rdi)
    0000013b: 	movq	0x48(%rsp), %rdi
    00000140: 	andq	$-0x8, %rdi
    00000144: 	subq	%rdi, %rax
    00000147: 	movq	%rax, %rcx
    0000014a: 	xorl	%eax, %eax
    0000014c: 	addl	$0x1900, %ecx
    00000152: 	shrl	$0x3, %ecx
    00000155: 	rep		stosq	%rax, %es:(%rdi)
    00000158: 	testl	%ebp, %ebp
    0000015a: 	jle	.Ltmp1119 # Offset: 346
    00000160: 	movl	0x38(%rsp), %edx
    00000164: 	testl	%edx, %edx
    00000166: 	jle	.Ltmp1119 # Offset: 358
    0000016c: 	movl	$0x0, 0x28(%rsp)
    00000174: 	nopl	(%rax) # Size: 4
.Ltmp1128:
    00000178: 	movq	0x20(%rsp), %r10
    0000017d: 	movl	0x8(%rsp), %eax
    00000181: 	xorl	%r14d, %r14d
    00000184: 	addl	$0x258, 0x28(%rsp)
    0000018c: 	movq	0x18(%rsp), %rsi
    00000191: 	movsd	(%r10), %xmm0
    00000196: 	testl	%eax, %eax
    00000198: 	jle	.Ltmp1120 # Offset: 408
    0000019e: 	nop # Size: 2
.Ltmp1126:
    000001a0: 	pxor	%xmm1, %xmm1
    000001a4: 	movq	%xmm0, %xmm5
    000001a8: 	movq	%rbx, %rdx
    000001ab: 	movq	%rsi, %rax
    000001ae: 	xorl	%ecx, %ecx
    000001b0: 	movapd	%xmm1, %xmm2
    000001b4: 	movapd	%xmm1, %xmm3
    000001b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1121:
    000001c0: 	movupd	(%rax), %xmm6
    000001c4: 	movupd	(%rdx), %xmm0
    000001c8: 	addl	$0x1, %ecx
    000001cb: 	addq	$0x40, %rdx
    000001cf: 	movupd	0x10(%rax), %xmm7
    000001d4: 	addq	$0x40, %rax
    000001d8: 	mulpd	%xmm6, %xmm0
    000001dc: 	movupd	-0x20(%rax), %xmm6
    000001e1: 	addpd	%xmm0, %xmm5
    000001e5: 	movupd	-0x30(%rdx), %xmm0
    000001ea: 	mulpd	%xmm7, %xmm0
    000001ee: 	movupd	-0x10(%rax), %xmm7
    000001f3: 	addpd	%xmm0, %xmm3
    000001f7: 	movupd	-0x20(%rdx), %xmm0
    000001fc: 	mulpd	%xmm6, %xmm0
    00000200: 	addpd	%xmm0, %xmm2
    00000204: 	movupd	-0x10(%rdx), %xmm0
    00000209: 	mulpd	%xmm7, %xmm0
    0000020d: 	addpd	%xmm0, %xmm1
    00000211: 	cmpl	%ecx, %r8d
    00000214: 	ja	.Ltmp1121 # Offset: 532
    00000216: 	movapd	%xmm5, %xmm0
    0000021a: 	movapd	%xmm3, %xmm8
    0000021f: 	unpckhpd	%xmm5, %xmm5
    00000223: 	unpckhpd	%xmm3, %xmm3
    00000227: 	movapd	%xmm2, %xmm9
    0000022c: 	movapd	%xmm1, %xmm10
    00000231: 	unpckhpd	%xmm2, %xmm2
    00000235: 	unpckhpd	%xmm1, %xmm1
    00000239: 	movapd	%xmm5, %xmm7
    0000023d: 	movapd	%xmm3, %xmm6
    00000241: 	movapd	%xmm2, %xmm5
    00000245: 	movapd	%xmm1, %xmm3
    00000249: 	cmpl	%r11d, %ebp
    0000024c: 	jle	.Ltmp1122 # Offset: 588
    00000252: 	movl	%r11d, %eax
.Ltmp1127:
    00000255: 	movl	%ebp, %edx
    00000257: 	movl	$0x1, %r13d
    0000025d: 	subl	%eax, %edx
    0000025f: 	cmpl	%eax, %ebp
    00000261: 	cmovgl	%edx, %r13d
    00000265: 	cmpl	$0x1, %edx
    00000268: 	je	.Ltmp1123 # Offset: 616
    0000026a: 	cmpl	%eax, %ebp
    0000026c: 	jle	.Ltmp1123 # Offset: 620
    0000026e: 	movslq	%eax, %rdx
    00000271: 	movq	0x18(%rsp), %rdi
    00000276: 	leaq	(%r14,%rdx), %rcx
    0000027a: 	leaq	(%rdi,%rcx,8), %r9
    0000027e: 	movl	%r13d, %ecx
    00000281: 	leaq	(%rbx,%rdx,8), %rdi
    00000285: 	xorl	%edx, %edx
    00000287: 	shrl	%ecx
    00000289: 	shlq	$0x4, %rcx
    0000028d: 	nopl	(%rax) # Size: 3
.Ltmp1124:
    00000290: 	movupd	(%rdi,%rdx), %xmm1
    00000295: 	movupd	(%r9,%rdx), %xmm2
    0000029b: 	addq	$0x10, %rdx
    0000029f: 	mulpd	%xmm2, %xmm1
    000002a3: 	addsd	%xmm1, %xmm0
    000002a7: 	unpckhpd	%xmm1, %xmm1
    000002ab: 	addsd	%xmm1, %xmm0
    000002af: 	cmpq	%rdx, %rcx
    000002b2: 	jne	.Ltmp1124 # Offset: 690
    000002b4: 	movl	%r13d, %edx
    000002b7: 	andl	$-0x2, %edx
    000002ba: 	addl	%edx, %eax
    000002bc: 	cmpl	%r13d, %edx
    000002bf: 	je	.Ltmp1122 # Offset: 703
.Ltmp1123:
    000002c1: 	cltq
    000002c3: 	movsd	(%rbx,%rax,8), %xmm1
    000002c8: 	mulsd	(%rsi,%rax,8), %xmm1
    000002cd: 	addsd	%xmm1, %xmm0
.Ltmp1122:
    000002d1: 	addsd	%xmm7, %xmm0
    000002d5: 	leaq	0x8(%r10), %rax
    000002d9: 	addq	%r15, %rsi
    000002dc: 	addq	%r12, %r14
    000002df: 	addsd	%xmm8, %xmm0
    000002e4: 	addsd	%xmm6, %xmm0
    000002e8: 	addsd	%xmm9, %xmm0
    000002ed: 	addsd	%xmm5, %xmm0
    000002f1: 	addsd	%xmm10, %xmm0
    000002f6: 	addsd	%xmm3, %xmm0
    000002fa: 	movsd	%xmm0, (%r10)
    000002ff: 	cmpq	%r10, 0x10(%rsp)
    00000304: 	je	.Ltmp1125 # Offset: 772
    00000306: 	movq	%rax, %r10
    00000309: 	movl	0x8(%rsp), %eax
    0000030d: 	movsd	(%r10), %xmm0
    00000312: 	testl	%eax, %eax
    00000314: 	jg	.Ltmp1126 # Offset: 788
.Ltmp1120:
    0000031a: 	movapd	%xmm4, %xmm3
    0000031e: 	movapd	%xmm4, %xmm10
    00000323: 	movapd	%xmm4, %xmm5
    00000327: 	xorl	%eax, %eax
    00000329: 	movapd	%xmm4, %xmm9
    0000032e: 	movapd	%xmm4, %xmm6
    00000332: 	movapd	%xmm4, %xmm8
    00000337: 	movapd	%xmm4, %xmm7
    0000033b: 	jmp	.Ltmp1127 # Offset: 827
.Ltmp1125:
    00000340: 	cmpl	0x28(%rsp), %ebp
    00000344: 	jg	.Ltmp1128 # Offset: 836
.Ltmp1119:
    0000034a: 	addl	$0x1, 0x2c(%rsp)
    0000034f: 	movl	0x2c(%rsp), %eax
    00000353: 	cmpl	0x3c(%rsp), %eax
    00000357: 	jne	.Ltmp1129 # Offset: 855
.Ltmp1139:
    0000035d: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000364: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    0000036b: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000372: 	je	.Ltmp1130 # Offset: 882
.Ltmp1135:
    00000378: 	movq	-0x20(%rax), %rbp
    0000037c: 	movsd	%xmm4, 0x8(%rsp)
    00000382: 	callq	clock@PLT # Offset: 898
    00000387: 	pxor	%xmm0, %xmm0
    0000038b: 	movq	%rax, end_time(%rip)
    00000392: 	movq	%rbp, %rdi
    00000395: 	subq	start_time(%rip), %rax
    0000039c: 	cvtsi2sd	%rax, %xmm0
    000003a1: 	divsd	DATAat0x24960(%rip), %xmm0
    000003a9: 	callq	_Z13record_resultdPKc # Offset: 937
    000003ae: 	movq	0x20(%rsp), %rax
    000003b3: 	movsd	0x8(%rsp), %xmm4
    000003b9: 	leaq	0x1900(%rax), %rdx
.Ltmp1131:
    000003c0: 	movsd	(%rax), %xmm0
    000003c4: 	addq	$0x10, %rax
    000003c8: 	addsd	%xmm0, %xmm4
    000003cc: 	movsd	-0x8(%rax), %xmm0
    000003d1: 	addsd	%xmm0, %xmm4
    000003d5: 	cmpq	%rdx, %rax
    000003d8: 	jne	.Ltmp1131 # Offset: 984
    000003da: 	movsd	init_value(%rip), %xmm0
    000003e2: 	movsd	DATAat0x24988(%rip), %xmm1
    000003ea: 	movapd	%xmm4, %xmm2
    000003ee: 	mulsd	%xmm0, %xmm1
    000003f2: 	mulsd	%xmm0, %xmm1
    000003f6: 	movapd	%xmm4, %xmm0
    000003fa: 	subsd	%xmm1, %xmm0
    000003fe: 	movq	DATAat0x24940(%rip), %xmm1
    00000406: 	andpd	%xmm1, %xmm2
    0000040a: 	comisd	DATAat0x24978(%rip), %xmm2
    00000412: 	jbe	.Ltmp1132 # Offset: 1042
    00000414: 	divsd	%xmm4, %xmm0
.Ltmp1132:
    00000418: 	andpd	%xmm1, %xmm0
    0000041c: 	movsd	DATAat0x24980(%rip), %xmm1
    00000424: 	comisd	%xmm0, %xmm1
    00000428: 	jbe	.Ltmp1133 # Offset: 1064
    0000042a: 	movq	0x58(%rsp), %rax
    0000042f: 	subq	%fs:0x28, %rax
    00000438: 	jne	.Ltmp1134 # Offset: 1080
    0000043e: 	addq	$0x68, %rsp
    00000442: 	popq	%rbx
    00000443: 	popq	%rbp
    00000444: 	popq	%r12
    00000446: 	popq	%r13
    00000448: 	popq	%r14
    0000044a: 	popq	%r15
    0000044c: 	retq # Offset: 1100
.Ltmp1130:
    0000044d: 	movq	-0x8(%rdx), %rax
    00000451: 	addq	$0x200, %rax
    00000457: 	jmp	.Ltmp1135 # Offset: 1111
.Ltmp1113:
    0000045c: 	movq	%r9, %rsi
    0000045f: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000466: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1126
    0000046b: 	jmp	.Ltmp1136 # Offset: 1131
.Ltmp1133:
    00000470: 	movq	0x58(%rsp), %rax
    00000475: 	subq	%fs:0x28, %rax
    0000047e: 	jne	.Ltmp1134 # Offset: 1150
    00000480: 	movq	0x30(%rsp), %rax
    00000485: 	leaq	DATAat0x2455f(%rip), %rsi
    0000048c: 	movl	$0x1, %edi
    00000491: 	movq	(%rax), %rdx
    00000494: 	addq	$0x68, %rsp
    00000498: 	xorl	%eax, %eax
    0000049a: 	popq	%rbx
    0000049b: 	popq	%rbp
    0000049c: 	popq	%r12
    0000049e: 	popq	%r13
    000004a0: 	popq	%r14
    000004a2: 	popq	%r15
    000004a4: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 1188
.Ltmp1117:
    000004a9: 	testq	%r12, %r12
    000004ac: 	je	.Ltmp1137 # Offset: 1196
    000004b2: 	jmp	.Ltmp1138 # Offset: 1202
    000004b4: 	nopl	(%rax) # Size: 4
.Ltmp1116:
    000004b8: 	movq	%r13, %rdi
    000004bb: 	leaq	0x50(%rsp), %rsi
    000004c0: 	xorl	%edx, %edx
    000004c2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1218
    000004c7: 	movq	%rax, (%r13)
    000004cb: 	movq	%rax, %rdi
    000004ce: 	movq	0x50(%rsp), %rax
    000004d3: 	movq	%rax, 0x10(%r13)
.Ltmp1138:
    000004d7: 	movq	%r12, %rdx
    000004da: 	movq	%r14, %rsi
    000004dd: 	callq	memcpy@PLT # Offset: 1245
    000004e2: 	movq	0x50(%rsp), %r12
    000004e7: 	movq	(%r13), %rdi
    000004eb: 	jmp	.Ltmp1137 # Offset: 1259
.Ltmp1118:
    000004f0: 	pxor	%xmm4, %xmm4
    000004f4: 	jmp	.Ltmp1139 # Offset: 1268
.Ltmp1134:
    000004f9: 	callq	__stack_chk_fail@PLT # Offset: 1273
.Ltmp1115:
    000004fe: 	leaq	DATAat0x24520(%rip), %rdi
    00000505: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1285
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_matvecmulId31matvecmul_JI_blocked_unrolled1AIdEEvPKT_PS2_S4_iiT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z11TestOneTypeIdEvv" after disassembly {
  Number      : 100
  State       : disassembled
  Address     : 0x19300
  Size        : 0x3147
  MaxSize     : 0x3150
  Offset      : 0x19300
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIdEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB099:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x138, %rsp
    00000015: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm7
    0000001d: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm4
    00000025: 	movq	%fs:0x28, %rax
    0000002e: 	movq	%rax, 0x128(%rsp)
    00000036: 	xorl	%eax, %eax
    00000038: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000003f: 	leaq	0xf0(%rsp), %rax
    00000047: 	movl	$0x62756f64, 0xf0(%rsp)
    00000052: 	movaps	%xmm7, 0x10(%rsp)
    00000057: 	movq	%xmm7, %rbx
    0000005c: 	movhlps	%xmm4, %xmm7
    0000005f: 	movq	"_ZL7gLabels/1"+48(%rip), %r13
    00000066: 	movq	%xmm7, %rcx
    0000006b: 	movaps	%xmm4, (%rsp)
    0000006f: 	movq	"_ZL7gLabels/1"+56(%rip), %rbp
    00000076: 	movq	%xmm4, %r14
    0000007b: 	movq	%rax, 0xc8(%rsp)
    00000083: 	leaq	0x8(%rcx), %r12
    00000087: 	movq	%rax, 0xe0(%rsp)
    0000008f: 	movl	$0x656c, %eax
    00000094: 	movw	%ax, 0xf4(%rsp)
    0000009c: 	movq	$0x6, 0xe8(%rsp)
    000000a8: 	movb	$0x0, 0xf6(%rsp)
    000000b0: 	cmpq	%r12, %rdx
    000000b3: 	jbe	.Ltmp1140 # Offset: 179
    000000b5: 	movq	%rbp, 0x20(%rsp)
    000000ba: 	movq	%r12, %r14
    000000bd: 	movq	%rbx, 0x28(%rsp)
    000000c2: 	movq	%r12, %rbx
    000000c5: 	movq	%rdx, %r12
    000000c8: 	movq	%xmm4, 0x30(%rsp)
.Ltmp1143:
    000000ce: 	movq	(%rbx), %r15
    000000d1: 	leaq	0x200(%r15), %rbp
.Ltmp1142:
    000000d8: 	movq	(%r15), %rdi
    000000db: 	leaq	0x10(%r15), %rax
    000000df: 	cmpq	%rax, %rdi
    000000e2: 	je	.Ltmp1141 # Offset: 226
    000000e8: 	movq	0x10(%r15), %rax
    000000ec: 	addq	$0x20, %r15
    000000f0: 	movq	%rcx, 0x38(%rsp)
    000000f5: 	leaq	0x1(%rax), %rsi
    000000f9: 	callq	_ZdlPvm@PLT # Offset: 249
    000000fe: 	cmpq	%rbp, %r15
    00000101: 	movq	0x38(%rsp), %rcx
    00000106: 	jne	.Ltmp1142 # Offset: 262
    00000108: 	addq	$0x8, %rbx
    0000010c: 	cmpq	%rbx, %r12
    0000010f: 	ja	.Ltmp1143 # Offset: 271
.Ltmp1149:
    00000111: 	movq	%r12, %rdx
    00000114: 	movq	0x20(%rsp), %rbp
    00000119: 	movq	%r14, %r12
    0000011c: 	movq	0x28(%rsp), %rbx
    00000121: 	movq	0x30(%rsp), %r14
.Ltmp1140:
    00000126: 	cmpq	%rcx, %rdx
    00000129: 	je	.Ltmp1144 # Offset: 297
.Ltmp1148:
    0000012f: 	cmpq	%r14, %rbx
    00000132: 	je	.Ltmp1145 # Offset: 306
    00000134: 	movq	(%rbx), %rdi
    00000137: 	leaq	0x10(%rbx), %rax
    0000013b: 	cmpq	%rax, %rdi
    0000013e: 	je	.Ltmp1146 # Offset: 318
.Ltmp1147:
    00000140: 	movq	0x10(%rbx), %rax
    00000144: 	addq	$0x20, %rbx
    00000148: 	leaq	0x1(%rax), %rsi
    0000014c: 	callq	_ZdlPvm@PLT # Offset: 332
    00000151: 	cmpq	%rbx, %r14
    00000154: 	je	.Ltmp1145 # Offset: 340
    00000156: 	movq	(%rbx), %rdi
    00000159: 	leaq	0x10(%rbx), %rax
    0000015d: 	cmpq	%rax, %rdi
    00000160: 	jne	.Ltmp1147 # Offset: 352
.Ltmp1146:
    00000162: 	addq	$0x20, %rbx
    00000166: 	jmp	.Ltmp1148 # Offset: 358
.Ltmp1141:
    00000168: 	addq	$0x20, %r15
    0000016c: 	cmpq	%rbp, %r15
    0000016f: 	jne	.Ltmp1142 # Offset: 367
    00000175: 	addq	$0x8, %rbx
    00000179: 	cmpq	%rbx, %r12
    0000017c: 	ja	.Ltmp1143 # Offset: 380
    00000182: 	jmp	.Ltmp1149 # Offset: 386
    00000184: 	nopl	(%rax) # Size: 4
.Ltmp1151:
    00000188: 	movq	(%rbp), %rdi
    0000018c: 	leaq	0x10(%rbp), %rax
    00000190: 	cmpq	%rax, %rdi
    00000193: 	je	.Ltmp1150 # Offset: 403
    00000195: 	movq	0x10(%rbp), %rax
    00000199: 	leaq	0x1(%rax), %rsi
    0000019d: 	callq	_ZdlPvm@PLT # Offset: 413
.Ltmp1150:
    000001a2: 	addq	$0x20, %rbp
.Ltmp1145:
    000001a6: 	cmpq	%rbp, %r13
    000001a9: 	jne	.Ltmp1151 # Offset: 425
.Ltmp1309:
    000001ab: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    000001b2: 	leaq	0x8(%rax), %rbx
    000001b6: 	cmpq	%r12, %rbx
    000001b9: 	jbe	.Ltmp1152 # Offset: 441
.Ltmp1153:
    000001bb: 	movq	(%r12), %rdi
    000001bf: 	movl	$0x200, %esi
    000001c4: 	addq	$0x8, %r12
    000001c8: 	callq	_ZdlPvm@PLT # Offset: 456
    000001cd: 	cmpq	%r12, %rbx
    000001d0: 	ja	.Ltmp1153 # Offset: 464
.Ltmp1152:
    000001d2: 	movdqa	0x10(%rsp), %xmm4
    000001d8: 	movdqa	(%rsp), %xmm5
    000001dd: 	movl	$0x12c0, %edi
    000001e2: 	movaps	%xmm4, "_ZL7gLabels/1"+48(%rip)
    000001e9: 	movaps	%xmm5, "_ZL7gLabels/1"+64(%rip)
    000001f0: 	callq	_Znam@PLT # Offset: 496
    000001f5: 	movl	$0x1900, %edi
    000001fa: 	movq	%rax, %r15
    000001fd: 	callq	_Znam@PLT # Offset: 509
    00000202: 	movl	$0x3a9800, %edi
    00000207: 	movq	%rax, %r14
    0000020a: 	callq	_Znam@PLT # Offset: 522
    0000020f: 	movl	$0x258, %r8d
    00000215: 	movq	%rax, %rdx
    00000218: 	movq	%r14, %rsi
    0000021b: 	movq	%r15, %rdi
    0000021e: 	movl	$0x320, %ecx
    00000223: 	movq	%rax, %r12
    00000226: 	callq	_Z16verify_matvecmulIdEvPT_S1_S1_ii # Offset: 550
    0000022b: 	movsd	init_value(%rip), %xmm0
    00000233: 	leaq	0x12c0(%r15), %rdx
    0000023a: 	movq	%r15, %rax
    0000023d: 	unpcklpd	%xmm0, %xmm0
.Ltmp1154:
    00000241: 	movups	%xmm0, (%rax)
    00000244: 	addq	$0x10, %rax
    00000248: 	cmpq	%rdx, %rax
    0000024b: 	jne	.Ltmp1154 # Offset: 587
    0000024d: 	movq	%r14, 0xd8(%rsp)
    00000255: 	leaq	0x1900(%r14), %rax
    0000025c: 	movq	%rax, 0xc0(%rsp)
    00000264: 	movq	%r14, %rax
.Ltmp1155:
    00000267: 	movups	%xmm0, (%rax)
    0000026a: 	addq	$0x10, %rax
    0000026e: 	cmpq	0xc0(%rsp), %rax
    00000276: 	jne	.Ltmp1155 # Offset: 630
    00000278: 	leaq	0x3a9800(%r12), %rax
    00000280: 	movq	%rax, 0x98(%rsp)
    00000288: 	movq	%r12, %rax
.Ltmp1156:
    0000028b: 	movups	%xmm0, (%rax)
    0000028e: 	addq	$0x10, %rax
    00000292: 	cmpq	0x98(%rsp), %rax
    0000029a: 	jne	.Ltmp1156 # Offset: 666
    0000029c: 	leaq	0x100(%rsp), %rax
    000002a4: 	leaq	0xe0(%rsp), %rsi
    000002ac: 	leaq	DATAat0x245a0(%rip), %rdx
    000002b3: 	movq	%rax, %rdi
    000002b6: 	movq	%rax, 0x50(%rsp)
    000002bb: 	movq	%rax, %rbx
    000002be: 	movq	%rsi, 0xa0(%rsp)
    000002c6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 710
    000002cb: 	movq	%rbx, %rsi
    000002ce: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000002d5: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 725
    000002da: 	callq	clock@PLT # Offset: 730
    000002df: 	movl	iterations(%rip), %r8d
    000002e6: 	xorl	%esi, %esi
    000002e8: 	movq	%rax, start_time(%rip)
    000002ef: 	leaq	0x1908(%r14), %rax
    000002f6: 	movq	%rax, 0x78(%rsp)
    000002fb: 	leaq	0x8(%r14), %rax
    000002ff: 	movq	%rax, 0x70(%rsp)
    00000304: 	xorl	%eax, %eax
    00000306: 	testl	%r8d, %r8d
    00000309: 	jle	.Ltmp1157 # Offset: 777
.Ltmp1160:
    0000030f: 	movq	%rax, (%r14)
    00000312: 	movq	0x78(%rsp), %rbx
    00000317: 	movq	%r14, %rcx
    0000031a: 	movq	%rax, -0x10(%rbx)
    0000031e: 	movq	0x70(%rsp), %rdi
    00000323: 	andq	$-0x8, %rdi
    00000327: 	subq	%rdi, %rcx
    0000032a: 	addl	$0x1900, %ecx
    00000330: 	shrl	$0x3, %ecx
    00000333: 	rep		stosq	%rax, %es:(%rdi)
    00000336: 	movq	%r12, %rcx
    00000339: 	movq	%r14, %rdi
.Ltmp1159:
    0000033c: 	movsd	(%rdi), %xmm1
    00000340: 	xorl	%edx, %edx
    00000342: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1158:
    00000348: 	movupd	(%rcx,%rdx), %xmm0
    0000034d: 	movupd	(%r15,%rdx), %xmm5
    00000353: 	addq	$0x10, %rdx
    00000357: 	mulpd	%xmm5, %xmm0
    0000035b: 	addsd	%xmm0, %xmm1
    0000035f: 	unpckhpd	%xmm0, %xmm0
    00000363: 	addsd	%xmm0, %xmm1
    00000367: 	cmpq	$0x12c0, %rdx
    0000036e: 	jne	.Ltmp1158 # Offset: 878
    00000370: 	movsd	%xmm1, (%rdi)
    00000374: 	addq	$0x12c0, %rcx
    0000037b: 	addq	$0x8, %rdi
    0000037f: 	cmpq	0x98(%rsp), %rcx
    00000387: 	jne	.Ltmp1159 # Offset: 903
    00000389: 	addl	$0x1, %esi
    0000038c: 	cmpl	%r8d, %esi
    0000038f: 	jne	.Ltmp1160 # Offset: 911
.Ltmp1157:
    00000395: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000039c: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    000003a3: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000003aa: 	je	.Ltmp1161 # Offset: 938
.Ltmp1314:
    000003b0: 	movq	-0x20(%rax), %rbp
    000003b4: 	callq	clock@PLT # Offset: 948
    000003b9: 	pxor	%xmm0, %xmm0
    000003bd: 	movq	%rax, end_time(%rip)
    000003c4: 	movq	%rbp, %rdi
    000003c7: 	subq	start_time(%rip), %rax
    000003ce: 	cvtsi2sd	%rax, %xmm0
    000003d3: 	divsd	DATAat0x24960(%rip), %xmm0
    000003db: 	callq	_Z13record_resultdPKc # Offset: 987
    000003e0: 	movq	%r14, %rax
    000003e3: 	pxor	%xmm0, %xmm0
.Ltmp1162:
    000003e7: 	movsd	(%rax), %xmm1
    000003eb: 	addq	$0x10, %rax
    000003ef: 	addsd	%xmm1, %xmm0
    000003f3: 	movsd	-0x8(%rax), %xmm1
    000003f8: 	addsd	%xmm1, %xmm0
    000003fc: 	cmpq	0xc0(%rsp), %rax
    00000404: 	jne	.Ltmp1162 # Offset: 1028
    00000406: 	movq	0x50(%rsp), %rdi
    0000040b: 	callq	_Z9check_sumIdEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1035
    00000410: 	movq	0x100(%rsp), %rdi
    00000418: 	leaq	0x110(%rsp), %rax
    00000420: 	movq	%rax, (%rsp)
    00000424: 	cmpq	%rax, %rdi
    00000427: 	je	.Ltmp1163 # Offset: 1063
    00000429: 	movq	0x110(%rsp), %rax
    00000431: 	leaq	0x1(%rax), %rsi
    00000435: 	callq	_ZdlPvm@PLT # Offset: 1077
.Ltmp1163:
    0000043a: 	movq	0x50(%rsp), %rbx
    0000043f: 	movq	0xa0(%rsp), %rsi
    00000447: 	leaq	DATAat0x245ba(%rip), %rdx
    0000044e: 	movq	%rbx, %rdi
    00000451: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1105
    00000456: 	movq	%rbx, %rsi
    00000459: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000460: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 1120
    00000465: 	callq	clock@PLT # Offset: 1125
    0000046a: 	movl	iterations(%rip), %r11d
    00000471: 	movq	%rax, start_time(%rip)
    00000478: 	testl	%r11d, %r11d
    0000047b: 	jle	.Ltmp1164 # Offset: 1147
    00000481: 	leaq	0x1908(%r14), %rax
    00000488: 	xorl	%r10d, %r10d
    0000048b: 	leaq	0x8(%r15), %r8
    0000048f: 	movq	%rax, 0x78(%rsp)
    00000494: 	leaq	0x8(%r14), %rax
    00000498: 	movq	%rax, 0x70(%rsp)
    0000049d: 	xorl	%eax, %eax
.Ltmp1170:
    0000049f: 	movq	%rax, (%r14)
    000004a2: 	movq	0x78(%rsp), %rbx
    000004a7: 	movq	%r14, %rcx
    000004aa: 	movq	%rax, -0x10(%rbx)
    000004ae: 	movq	0x70(%rsp), %rdi
    000004b3: 	andq	$-0x8, %rdi
    000004b7: 	subq	%rdi, %rcx
    000004ba: 	addl	$0x1900, %ecx
    000004c0: 	shrl	$0x3, %ecx
    000004c3: 	rep		stosq	%rax, %es:(%rdi)
    000004c6: 	movq	%r8, %rcx
    000004c9: 	xorl	%edi, %edi
    000004cb: 	movq	0x98(%rsp), %r9
.Ltmp1166:
    000004d3: 	movsd	-0x8(%rcx), %xmm2
    000004d8: 	movsd	(%rcx), %xmm1
    000004dc: 	leaq	-0x3a9800(%r9), %rdx
    000004e3: 	movq	%r14, %rsi
.Ltmp1165:
    000004e6: 	movsd	0x8(%rdx), %xmm3
    000004eb: 	movsd	(%rdx), %xmm0
    000004ef: 	addq	$0x12c0, %rdx
    000004f6: 	addq	$0x8, %rsi
    000004fa: 	mulsd	%xmm1, %xmm3
    000004fe: 	mulsd	%xmm2, %xmm0
    00000502: 	addsd	-0x8(%rsi), %xmm0
    00000507: 	addsd	%xmm3, %xmm0
    0000050b: 	movsd	%xmm0, -0x8(%rsi)
    00000510: 	cmpq	%r9, %rdx
    00000513: 	jne	.Ltmp1165 # Offset: 1299
    00000515: 	addl	$0x2, %edi
    00000518: 	leaq	0x10(%rdx), %r9
    0000051c: 	addq	$0x10, %rcx
    00000520: 	cmpl	$0x256, %edi
    00000526: 	jne	.Ltmp1166 # Offset: 1318
    00000528: 	movq	%r12, %rcx
    0000052b: 	movq	%r14, %rsi
    0000052e: 	xorl	%edi, %edi
.Ltmp1169:
    00000530: 	movsd	(%rsi), %xmm1
    00000534: 	movl	$0x256, %edx
    00000539: 	jmp	.Ltmp1167 # Offset: 1337
    0000053b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1168:
    00000540: 	movl	$0x257, %edx
.Ltmp1167:
    00000545: 	movsd	(%rcx,%rdx,8), %xmm0
    0000054a: 	mulsd	(%r15,%rdx,8), %xmm0
    00000550: 	addsd	%xmm0, %xmm1
    00000554: 	cmpq	$0x257, %rdx
    0000055b: 	jne	.Ltmp1168 # Offset: 1371
    0000055d: 	addl	$0x258, %edi
    00000563: 	movsd	%xmm1, (%rsi)
    00000567: 	addq	$0x12c0, %rcx
    0000056e: 	addq	$0x8, %rsi
    00000572: 	cmpl	$0x75300, %edi
    00000578: 	jne	.Ltmp1169 # Offset: 1400
    0000057a: 	addl	$0x1, %r10d
    0000057e: 	cmpl	%r11d, %r10d
    00000581: 	jne	.Ltmp1170 # Offset: 1409
.Ltmp1164:
    00000587: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000058e: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00000595: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000059c: 	je	.Ltmp1171 # Offset: 1436
.Ltmp1331:
    000005a2: 	movq	-0x20(%rax), %rbp
    000005a6: 	callq	clock@PLT # Offset: 1446
    000005ab: 	pxor	%xmm0, %xmm0
    000005af: 	movq	%rax, end_time(%rip)
    000005b6: 	movq	%rbp, %rdi
    000005b9: 	subq	start_time(%rip), %rax
    000005c0: 	cvtsi2sd	%rax, %xmm0
    000005c5: 	divsd	DATAat0x24960(%rip), %xmm0
    000005cd: 	callq	_Z13record_resultdPKc # Offset: 1485
    000005d2: 	movq	%r14, %rax
    000005d5: 	pxor	%xmm0, %xmm0
.Ltmp1172:
    000005d9: 	movsd	(%rax), %xmm1
    000005dd: 	addq	$0x10, %rax
    000005e1: 	addsd	%xmm1, %xmm0
    000005e5: 	movsd	-0x8(%rax), %xmm1
    000005ea: 	addsd	%xmm1, %xmm0
    000005ee: 	cmpq	0xc0(%rsp), %rax
    000005f6: 	jne	.Ltmp1172 # Offset: 1526
    000005f8: 	movq	0x50(%rsp), %rdi
    000005fd: 	callq	_Z9check_sumIdEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1533
    00000602: 	movq	0x100(%rsp), %rdi
    0000060a: 	cmpq	(%rsp), %rdi
    0000060e: 	je	.Ltmp1173 # Offset: 1550
    00000610: 	movq	0x110(%rsp), %rax
    00000618: 	leaq	0x1(%rax), %rsi
    0000061c: 	callq	_ZdlPvm@PLT # Offset: 1564
.Ltmp1173:
    00000621: 	movq	0x50(%rsp), %rbx
    00000626: 	movq	0xa0(%rsp), %rsi
    0000062e: 	leaq	DATAat0x245f0(%rip), %rdx
    00000635: 	movq	%rbx, %rdi
    00000638: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1592
    0000063d: 	movq	%rbx, %rsi
    00000640: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000647: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 1607
    0000064c: 	callq	clock@PLT # Offset: 1612
    00000651: 	movl	iterations(%rip), %r8d
    00000658: 	xorl	%esi, %esi
    0000065a: 	movq	%rax, start_time(%rip)
    00000661: 	leaq	0x1908(%r14), %rax
    00000668: 	movq	%rax, 0x78(%rsp)
    0000066d: 	leaq	0x8(%r14), %rax
    00000671: 	movq	%rax, 0x70(%rsp)
    00000676: 	xorl	%eax, %eax
    00000678: 	testl	%r8d, %r8d
    0000067b: 	jle	.Ltmp1174 # Offset: 1659
.Ltmp1177:
    00000681: 	movq	%rax, (%r14)
    00000684: 	movq	0x78(%rsp), %rbx
    00000689: 	movq	%r14, %rcx
    0000068c: 	movq	%rax, -0x10(%rbx)
    00000690: 	movq	0x70(%rsp), %rdi
    00000695: 	andq	$-0x8, %rdi
    00000699: 	subq	%rdi, %rcx
    0000069c: 	addl	$0x1900, %ecx
    000006a2: 	shrl	$0x3, %ecx
    000006a5: 	rep		stosq	%rax, %es:(%rdi)
    000006a8: 	movq	%r12, %rcx
    000006ab: 	movq	%r14, %rdi
.Ltmp1176:
    000006ae: 	movsd	(%rdi), %xmm1
    000006b2: 	xorl	%edx, %edx
    000006b4: 	nopl	(%rax) # Size: 4
.Ltmp1175:
    000006b8: 	movupd	(%rcx,%rdx), %xmm0
    000006bd: 	movupd	(%r15,%rdx), %xmm5
    000006c3: 	addq	$0x10, %rdx
    000006c7: 	mulpd	%xmm5, %xmm0
    000006cb: 	addsd	%xmm0, %xmm1
    000006cf: 	unpckhpd	%xmm0, %xmm0
    000006d3: 	addsd	%xmm0, %xmm1
    000006d7: 	cmpq	$0x12c0, %rdx
    000006de: 	jne	.Ltmp1175 # Offset: 1758
    000006e0: 	movsd	%xmm1, (%rdi)
    000006e4: 	addq	$0x12c0, %rcx
    000006eb: 	addq	$0x8, %rdi
    000006ef: 	cmpq	0x98(%rsp), %rcx
    000006f7: 	jne	.Ltmp1176 # Offset: 1783
    000006f9: 	addl	$0x1, %esi
    000006fc: 	cmpl	%r8d, %esi
    000006ff: 	jne	.Ltmp1177 # Offset: 1791
.Ltmp1174:
    00000705: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000070c: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00000713: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000071a: 	je	.Ltmp1178 # Offset: 1818
.Ltmp1330:
    00000720: 	movq	-0x20(%rax), %rbp
    00000724: 	callq	clock@PLT # Offset: 1828
    00000729: 	pxor	%xmm0, %xmm0
    0000072d: 	movq	%rax, end_time(%rip)
    00000734: 	movq	%rbp, %rdi
    00000737: 	subq	start_time(%rip), %rax
    0000073e: 	cvtsi2sd	%rax, %xmm0
    00000743: 	divsd	DATAat0x24960(%rip), %xmm0
    0000074b: 	callq	_Z13record_resultdPKc # Offset: 1867
    00000750: 	movq	%r14, %rax
    00000753: 	pxor	%xmm0, %xmm0
.Ltmp1179:
    00000757: 	movsd	(%rax), %xmm1
    0000075b: 	addq	$0x10, %rax
    0000075f: 	addsd	%xmm1, %xmm0
    00000763: 	movsd	-0x8(%rax), %xmm1
    00000768: 	addsd	%xmm1, %xmm0
    0000076c: 	cmpq	0xc0(%rsp), %rax
    00000774: 	jne	.Ltmp1179 # Offset: 1908
    00000776: 	movq	0x50(%rsp), %rdi
    0000077b: 	callq	_Z9check_sumIdEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1915
    00000780: 	movq	0x100(%rsp), %rdi
    00000788: 	cmpq	(%rsp), %rdi
    0000078c: 	je	.Ltmp1180 # Offset: 1932
    0000078e: 	movq	0x110(%rsp), %rax
    00000796: 	leaq	0x1(%rax), %rsi
    0000079a: 	callq	_ZdlPvm@PLT # Offset: 1946
.Ltmp1180:
    0000079f: 	movq	0x50(%rsp), %rbx
    000007a4: 	movq	0xa0(%rsp), %rsi
    000007ac: 	leaq	DATAat0x24610(%rip), %rdx
    000007b3: 	movq	%rbx, %rdi
    000007b6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1974
    000007bb: 	movq	%rbx, %rsi
    000007be: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000007c5: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 1989
    000007ca: 	callq	clock@PLT # Offset: 1994
    000007cf: 	movl	iterations(%rip), %r8d
    000007d6: 	xorl	%esi, %esi
    000007d8: 	movq	%rax, start_time(%rip)
    000007df: 	leaq	0x1908(%r14), %rax
    000007e6: 	movq	%rax, 0x78(%rsp)
    000007eb: 	leaq	0x8(%r14), %rax
    000007ef: 	movq	%rax, 0x70(%rsp)
    000007f4: 	xorl	%eax, %eax
    000007f6: 	testl	%r8d, %r8d
    000007f9: 	jle	.Ltmp1181 # Offset: 2041
.Ltmp1184:
    000007ff: 	movq	%rax, (%r14)
    00000802: 	movq	0x78(%rsp), %rbx
    00000807: 	movq	%r14, %rcx
    0000080a: 	movq	%rax, -0x10(%rbx)
    0000080e: 	movq	0x70(%rsp), %rdi
    00000813: 	andq	$-0x8, %rdi
    00000817: 	subq	%rdi, %rcx
    0000081a: 	addl	$0x1900, %ecx
    00000820: 	shrl	$0x3, %ecx
    00000823: 	rep		stosq	%rax, %es:(%rdi)
    00000826: 	movq	%r12, %rcx
    00000829: 	movq	%r14, %rdi
.Ltmp1183:
    0000082c: 	movsd	(%rdi), %xmm1
    00000830: 	xorl	%edx, %edx
    00000832: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1182:
    00000838: 	movupd	(%rcx,%rdx), %xmm0
    0000083d: 	movupd	(%r15,%rdx), %xmm4
    00000843: 	addq	$0x10, %rdx
    00000847: 	mulpd	%xmm4, %xmm0
    0000084b: 	addsd	%xmm0, %xmm1
    0000084f: 	unpckhpd	%xmm0, %xmm0
    00000853: 	addsd	%xmm0, %xmm1
    00000857: 	cmpq	$0x12c0, %rdx
    0000085e: 	jne	.Ltmp1182 # Offset: 2142
    00000860: 	movsd	%xmm1, (%rdi)
    00000864: 	addq	$0x12c0, %rcx
    0000086b: 	addq	$0x8, %rdi
    0000086f: 	cmpq	0x98(%rsp), %rcx
    00000877: 	jne	.Ltmp1183 # Offset: 2167
    00000879: 	addl	$0x1, %esi
    0000087c: 	cmpl	%r8d, %esi
    0000087f: 	jne	.Ltmp1184 # Offset: 2175
.Ltmp1181:
    00000885: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000088c: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00000893: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000089a: 	je	.Ltmp1185 # Offset: 2202
.Ltmp1329:
    000008a0: 	movq	-0x20(%rax), %rbp
    000008a4: 	callq	clock@PLT # Offset: 2212
    000008a9: 	pxor	%xmm0, %xmm0
    000008ad: 	movq	%rax, end_time(%rip)
    000008b4: 	movq	%rbp, %rdi
    000008b7: 	subq	start_time(%rip), %rax
    000008be: 	cvtsi2sd	%rax, %xmm0
    000008c3: 	divsd	DATAat0x24960(%rip), %xmm0
    000008cb: 	callq	_Z13record_resultdPKc # Offset: 2251
    000008d0: 	movq	%r14, %rax
    000008d3: 	pxor	%xmm0, %xmm0
.Ltmp1186:
    000008d7: 	movsd	(%rax), %xmm1
    000008db: 	addq	$0x10, %rax
    000008df: 	addsd	%xmm1, %xmm0
    000008e3: 	movsd	-0x8(%rax), %xmm1
    000008e8: 	addsd	%xmm1, %xmm0
    000008ec: 	cmpq	0xc0(%rsp), %rax
    000008f4: 	jne	.Ltmp1186 # Offset: 2292
    000008f6: 	movsd	init_value(%rip), %xmm1
    000008fe: 	movsd	DATAat0x24988(%rip), %xmm2
    00000906: 	mulsd	%xmm1, %xmm2
    0000090a: 	mulsd	%xmm1, %xmm2
    0000090e: 	movapd	%xmm0, %xmm1
    00000912: 	subsd	%xmm2, %xmm1
    00000916: 	movapd	%xmm0, %xmm2
    0000091a: 	andpd	DATAat0x24940(%rip), %xmm2
    00000922: 	comisd	DATAat0x24978(%rip), %xmm2
    0000092a: 	jbe	.Ltmp1187 # Offset: 2346
    0000092c: 	divsd	%xmm0, %xmm1
.Ltmp1187:
    00000930: 	andpd	DATAat0x24940(%rip), %xmm1
    00000938: 	movsd	DATAat0x24980(%rip), %xmm7
    00000940: 	movq	0x100(%rsp), %rdx
    00000948: 	comisd	%xmm1, %xmm7
    0000094c: 	jbe	.Ltmp1188 # Offset: 2380
.Ltmp1328:
    00000952: 	cmpq	(%rsp), %rdx
    00000956: 	je	.Ltmp1189 # Offset: 2390
    00000958: 	movq	0x110(%rsp), %rax
    00000960: 	movq	%rdx, %rdi
    00000963: 	leaq	0x1(%rax), %rsi
    00000967: 	callq	_ZdlPvm@PLT # Offset: 2407
.Ltmp1189:
    0000096c: 	movq	0x50(%rsp), %rbx
    00000971: 	movq	0xa0(%rsp), %rsi
    00000979: 	leaq	DATAat0x24630(%rip), %rdx
    00000980: 	movq	%rbx, %rdi
    00000983: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2435
    00000988: 	movq	%rbx, %rsi
    0000098b: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000992: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 2450
    00000997: 	callq	clock@PLT # Offset: 2455
    0000099c: 	movl	iterations(%rip), %r11d
    000009a3: 	movq	%rax, start_time(%rip)
    000009aa: 	testl	%r11d, %r11d
    000009ad: 	jle	.Ltmp1190 # Offset: 2477
    000009b3: 	leaq	0x1908(%r14), %rax
    000009ba: 	xorl	%r10d, %r10d
    000009bd: 	leaq	0x8(%r15), %r8
    000009c1: 	movq	%rax, 0x78(%rsp)
    000009c6: 	leaq	0x8(%r14), %rax
    000009ca: 	movq	%rax, 0x70(%rsp)
    000009cf: 	xorl	%eax, %eax
.Ltmp1196:
    000009d1: 	movq	%rax, (%r14)
    000009d4: 	movq	0x78(%rsp), %rbx
    000009d9: 	movq	%r14, %rcx
    000009dc: 	movq	%rax, -0x10(%rbx)
    000009e0: 	movq	0x70(%rsp), %rdi
    000009e5: 	andq	$-0x8, %rdi
    000009e9: 	subq	%rdi, %rcx
    000009ec: 	addl	$0x1900, %ecx
    000009f2: 	shrl	$0x3, %ecx
    000009f5: 	rep		stosq	%rax, %es:(%rdi)
    000009f8: 	movq	%r8, %rcx
    000009fb: 	xorl	%edi, %edi
    000009fd: 	movq	0x98(%rsp), %r9
.Ltmp1192:
    00000a05: 	movsd	-0x8(%rcx), %xmm2
    00000a0a: 	movsd	(%rcx), %xmm1
    00000a0e: 	leaq	-0x3a9800(%r9), %rdx
    00000a15: 	movq	%r14, %rsi
.Ltmp1191:
    00000a18: 	movsd	0x8(%rdx), %xmm3
    00000a1d: 	movsd	(%rdx), %xmm0
    00000a21: 	addq	$0x12c0, %rdx
    00000a28: 	addq	$0x8, %rsi
    00000a2c: 	mulsd	%xmm1, %xmm3
    00000a30: 	mulsd	%xmm2, %xmm0
    00000a34: 	addsd	-0x8(%rsi), %xmm0
    00000a39: 	addsd	%xmm3, %xmm0
    00000a3d: 	movsd	%xmm0, -0x8(%rsi)
    00000a42: 	cmpq	%r9, %rdx
    00000a45: 	jne	.Ltmp1191 # Offset: 2629
    00000a47: 	addl	$0x2, %edi
    00000a4a: 	leaq	0x10(%rdx), %r9
    00000a4e: 	addq	$0x10, %rcx
    00000a52: 	cmpl	$0x256, %edi
    00000a58: 	jne	.Ltmp1192 # Offset: 2648
    00000a5a: 	movq	%r12, %rcx
    00000a5d: 	movq	%r14, %rsi
    00000a60: 	xorl	%edi, %edi
.Ltmp1195:
    00000a62: 	movsd	(%rsi), %xmm1
    00000a66: 	movl	$0x256, %edx
    00000a6b: 	jmp	.Ltmp1193 # Offset: 2667
    00000a6d: 	nopl	(%rax) # Size: 3
.Ltmp1194:
    00000a70: 	movl	$0x257, %edx
.Ltmp1193:
    00000a75: 	movsd	(%rcx,%rdx,8), %xmm0
    00000a7a: 	mulsd	(%r15,%rdx,8), %xmm0
    00000a80: 	addsd	%xmm0, %xmm1
    00000a84: 	cmpq	$0x257, %rdx
    00000a8b: 	jne	.Ltmp1194 # Offset: 2699
    00000a8d: 	addl	$0x258, %edi
    00000a93: 	movsd	%xmm1, (%rsi)
    00000a97: 	addq	$0x12c0, %rcx
    00000a9e: 	addq	$0x8, %rsi
    00000aa2: 	cmpl	$0x75300, %edi
    00000aa8: 	jne	.Ltmp1195 # Offset: 2728
    00000aaa: 	addl	$0x1, %r10d
    00000aae: 	cmpl	%r11d, %r10d
    00000ab1: 	jne	.Ltmp1196 # Offset: 2737
.Ltmp1190:
    00000ab7: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000abe: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00000ac5: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000acc: 	je	.Ltmp1197 # Offset: 2764
.Ltmp1327:
    00000ad2: 	movq	-0x20(%rax), %rbp
    00000ad6: 	callq	clock@PLT # Offset: 2774
    00000adb: 	pxor	%xmm0, %xmm0
    00000adf: 	movq	%rax, end_time(%rip)
    00000ae6: 	movq	%rbp, %rdi
    00000ae9: 	subq	start_time(%rip), %rax
    00000af0: 	cvtsi2sd	%rax, %xmm0
    00000af5: 	divsd	DATAat0x24960(%rip), %xmm0
    00000afd: 	callq	_Z13record_resultdPKc # Offset: 2813
    00000b02: 	movq	%r14, %rax
    00000b05: 	pxor	%xmm0, %xmm0
.Ltmp1198:
    00000b09: 	movsd	(%rax), %xmm1
    00000b0d: 	addq	$0x10, %rax
    00000b11: 	addsd	%xmm1, %xmm0
    00000b15: 	movsd	-0x8(%rax), %xmm1
    00000b1a: 	addsd	%xmm1, %xmm0
    00000b1e: 	cmpq	0xc0(%rsp), %rax
    00000b26: 	jne	.Ltmp1198 # Offset: 2854
    00000b28: 	movq	0x50(%rsp), %rdi
    00000b2d: 	callq	_Z9check_sumIdEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2861
    00000b32: 	movq	0x100(%rsp), %rdi
    00000b3a: 	cmpq	(%rsp), %rdi
    00000b3e: 	je	.Ltmp1199 # Offset: 2878
    00000b40: 	movq	0x110(%rsp), %rax
    00000b48: 	leaq	0x1(%rax), %rsi
    00000b4c: 	callq	_ZdlPvm@PLT # Offset: 2892
.Ltmp1199:
    00000b51: 	movq	0x50(%rsp), %rbx
    00000b56: 	movq	0xa0(%rsp), %rsi
    00000b5e: 	leaq	DATAat0x24650(%rip), %rdx
    00000b65: 	movq	%rbx, %rdi
    00000b68: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2920
    00000b6d: 	movq	%rbx, %rsi
    00000b70: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000b77: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 2935
    00000b7c: 	callq	clock@PLT # Offset: 2940
    00000b81: 	movl	iterations(%rip), %r8d
    00000b88: 	xorl	%esi, %esi
    00000b8a: 	movq	%rax, start_time(%rip)
    00000b91: 	leaq	0x1908(%r14), %rax
    00000b98: 	movq	%rax, 0x78(%rsp)
    00000b9d: 	leaq	0x8(%r14), %rax
    00000ba1: 	movq	%rax, 0x70(%rsp)
    00000ba6: 	xorl	%eax, %eax
    00000ba8: 	testl	%r8d, %r8d
    00000bab: 	jle	.Ltmp1200 # Offset: 2987
.Ltmp1203:
    00000bb1: 	movq	%rax, (%r14)
    00000bb4: 	movq	0x78(%rsp), %rbx
    00000bb9: 	movq	%r14, %rcx
    00000bbc: 	movq	%rax, -0x10(%rbx)
    00000bc0: 	movq	0x70(%rsp), %rdi
    00000bc5: 	andq	$-0x8, %rdi
    00000bc9: 	subq	%rdi, %rcx
    00000bcc: 	addl	$0x1900, %ecx
    00000bd2: 	shrl	$0x3, %ecx
    00000bd5: 	rep		stosq	%rax, %es:(%rdi)
    00000bd8: 	movq	%r12, %rcx
    00000bdb: 	movq	%r14, %rdi
.Ltmp1202:
    00000bde: 	movq	(%rdi), %xmm2
    00000be2: 	xorl	%edx, %edx
    00000be4: 	pxor	%xmm1, %xmm1
    00000be8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1201:
    00000bf0: 	movupd	(%rcx,%rdx), %xmm0
    00000bf5: 	movupd	(%r15,%rdx), %xmm5
    00000bfb: 	movupd	0x10(%r15,%rdx), %xmm4
    00000c02: 	mulpd	%xmm5, %xmm0
    00000c06: 	addpd	%xmm0, %xmm2
    00000c0a: 	movupd	0x10(%rcx,%rdx), %xmm0
    00000c10: 	addq	$0x20, %rdx
    00000c14: 	mulpd	%xmm4, %xmm0
    00000c18: 	addpd	%xmm0, %xmm1
    00000c1c: 	cmpq	$0x12c0, %rdx
    00000c23: 	jne	.Ltmp1201 # Offset: 3107
    00000c25: 	movapd	%xmm2, %xmm0
    00000c29: 	unpckhpd	%xmm2, %xmm2
    00000c2d: 	addq	$0x8, %rdi
    00000c31: 	addq	$0x12c0, %rcx
    00000c38: 	addsd	%xmm2, %xmm0
    00000c3c: 	addsd	%xmm1, %xmm0
    00000c40: 	unpckhpd	%xmm1, %xmm1
    00000c44: 	addsd	%xmm1, %xmm0
    00000c48: 	movsd	%xmm0, -0x8(%rdi)
    00000c4d: 	cmpq	0x98(%rsp), %rcx
    00000c55: 	jne	.Ltmp1202 # Offset: 3157
    00000c57: 	addl	$0x1, %esi
    00000c5a: 	cmpl	%r8d, %esi
    00000c5d: 	jne	.Ltmp1203 # Offset: 3165
.Ltmp1200:
    00000c63: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000c6a: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00000c71: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000c78: 	je	.Ltmp1204 # Offset: 3192
.Ltmp1326:
    00000c7e: 	movq	-0x20(%rax), %rbp
    00000c82: 	callq	clock@PLT # Offset: 3202
    00000c87: 	pxor	%xmm0, %xmm0
    00000c8b: 	movq	%rax, end_time(%rip)
    00000c92: 	movq	%rbp, %rdi
    00000c95: 	subq	start_time(%rip), %rax
    00000c9c: 	cvtsi2sd	%rax, %xmm0
    00000ca1: 	divsd	DATAat0x24960(%rip), %xmm0
    00000ca9: 	callq	_Z13record_resultdPKc # Offset: 3241
    00000cae: 	movq	%r14, %rax
    00000cb1: 	pxor	%xmm0, %xmm0
.Ltmp1205:
    00000cb5: 	movsd	(%rax), %xmm1
    00000cb9: 	addq	$0x10, %rax
    00000cbd: 	addsd	%xmm1, %xmm0
    00000cc1: 	movsd	-0x8(%rax), %xmm1
    00000cc6: 	addsd	%xmm1, %xmm0
    00000cca: 	cmpq	0xc0(%rsp), %rax
    00000cd2: 	jne	.Ltmp1205 # Offset: 3282
    00000cd4: 	movsd	init_value(%rip), %xmm1
    00000cdc: 	movsd	DATAat0x24988(%rip), %xmm2
    00000ce4: 	mulsd	%xmm1, %xmm2
    00000ce8: 	mulsd	%xmm1, %xmm2
    00000cec: 	movapd	%xmm0, %xmm1
    00000cf0: 	subsd	%xmm2, %xmm1
    00000cf4: 	movapd	%xmm0, %xmm2
    00000cf8: 	andpd	DATAat0x24940(%rip), %xmm2
    00000d00: 	comisd	DATAat0x24978(%rip), %xmm2
    00000d08: 	jbe	.Ltmp1206 # Offset: 3336
    00000d0a: 	divsd	%xmm0, %xmm1
.Ltmp1206:
    00000d0e: 	andpd	DATAat0x24940(%rip), %xmm1
    00000d16: 	movsd	DATAat0x24980(%rip), %xmm4
    00000d1e: 	movq	0x100(%rsp), %rdx
    00000d26: 	comisd	%xmm1, %xmm4
    00000d2a: 	jbe	.Ltmp1207 # Offset: 3370
.Ltmp1325:
    00000d30: 	cmpq	(%rsp), %rdx
    00000d34: 	je	.Ltmp1208 # Offset: 3380
    00000d36: 	movq	0x110(%rsp), %rax
    00000d3e: 	movq	%rdx, %rdi
    00000d41: 	leaq	0x1(%rax), %rsi
    00000d45: 	callq	_ZdlPvm@PLT # Offset: 3397
.Ltmp1208:
    00000d4a: 	movq	0x50(%rsp), %rbx
    00000d4f: 	movq	0xa0(%rsp), %rsi
    00000d57: 	leaq	DATAat0x24678(%rip), %rdx
    00000d5e: 	movq	%rbx, %rdi
    00000d61: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3425
    00000d66: 	movq	%rbx, %r9
    00000d69: 	movl	$0x258, %r8d
    00000d6f: 	movq	%r12, %rdx
    00000d72: 	movq	%r14, %rsi
    00000d75: 	movl	$0x320, %ecx
    00000d7a: 	movq	%r15, %rdi
    00000d7d: 	callq	_Z14test_matvecmulId22matvecmul_IJ_unrolled1IdEEvPKT_PS2_S4_iiT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3453
    00000d82: 	movq	0x100(%rsp), %rdi
    00000d8a: 	cmpq	(%rsp), %rdi
    00000d8e: 	je	.Ltmp1209 # Offset: 3470
    00000d90: 	movq	0x110(%rsp), %rax
    00000d98: 	leaq	0x1(%rax), %rsi
    00000d9c: 	callq	_ZdlPvm@PLT # Offset: 3484
.Ltmp1209:
    00000da1: 	movq	0x50(%rsp), %rbx
    00000da6: 	movq	0xa0(%rsp), %rsi
    00000dae: 	leaq	DATAat0x246a0(%rip), %rdx
    00000db5: 	movq	%rbx, %rdi
    00000db8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3512
    00000dbd: 	movq	%rbx, %rsi
    00000dc0: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000dc7: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 3527
    00000dcc: 	callq	clock@PLT # Offset: 3532
    00000dd1: 	movl	iterations(%rip), %r11d
    00000dd8: 	movq	%rax, start_time(%rip)
    00000ddf: 	testl	%r11d, %r11d
    00000de2: 	jle	.Ltmp1210 # Offset: 3554
    00000de8: 	leaq	0x1908(%r14), %rax
    00000def: 	xorl	%r10d, %r10d
    00000df2: 	leaq	0x12c0(%r12), %rsi
    00000dfa: 	movq	%rax, 0x78(%rsp)
    00000dff: 	leaq	0x8(%r14), %rax
    00000e03: 	leaq	0x3aaac0(%r12), %rbx
    00000e0b: 	movq	%rax, 0x70(%rsp)
    00000e10: 	xorl	%eax, %eax
.Ltmp1213:
    00000e12: 	movq	%rax, (%r14)
    00000e15: 	movq	0x78(%rsp), %rdi
    00000e1a: 	movq	%r14, %rcx
    00000e1d: 	movq	%r12, %r9
    00000e20: 	movq	%r14, %r8
    00000e23: 	movq	%rax, -0x10(%rdi)
    00000e27: 	movq	0x70(%rsp), %rdi
    00000e2c: 	andq	$-0x8, %rdi
    00000e30: 	subq	%rdi, %rcx
    00000e33: 	addl	$0x1900, %ecx
    00000e39: 	shrl	$0x3, %ecx
    00000e3c: 	rep		stosq	%rax, %es:(%rdi)
    00000e3f: 	movq	%rsi, %rdi
.Ltmp1212:
    00000e42: 	pxor	%xmm1, %xmm1
    00000e46: 	movq	(%r8), %xmm4
    00000e4b: 	movq	%r15, %rcx
    00000e4e: 	movq	%r9, %rdx
    00000e51: 	movapd	%xmm1, %xmm2
    00000e55: 	movapd	%xmm1, %xmm3
    00000e59: 	nopl	(%rax) # Size: 7
.Ltmp1211:
    00000e60: 	movupd	(%rcx), %xmm5
    00000e64: 	movupd	(%rdx), %xmm0
    00000e68: 	addq	$0x40, %rdx
    00000e6c: 	addq	$0x40, %rcx
    00000e70: 	mulpd	%xmm5, %xmm0
    00000e74: 	movupd	-0x30(%rcx), %xmm5
    00000e79: 	addpd	%xmm0, %xmm4
    00000e7d: 	movupd	-0x30(%rdx), %xmm0
    00000e82: 	mulpd	%xmm5, %xmm0
    00000e86: 	movupd	-0x20(%rcx), %xmm5
    00000e8b: 	addpd	%xmm0, %xmm3
    00000e8f: 	movupd	-0x20(%rdx), %xmm0
    00000e94: 	mulpd	%xmm5, %xmm0
    00000e98: 	movupd	-0x10(%rcx), %xmm5
    00000e9d: 	addpd	%xmm0, %xmm2
    00000ea1: 	movupd	-0x10(%rdx), %xmm0
    00000ea6: 	mulpd	%xmm5, %xmm0
    00000eaa: 	addpd	%xmm0, %xmm1
    00000eae: 	cmpq	%rdi, %rdx
    00000eb1: 	jne	.Ltmp1211 # Offset: 3761
    00000eb3: 	movapd	%xmm4, %xmm0
    00000eb7: 	unpckhpd	%xmm4, %xmm4
    00000ebb: 	leaq	0x12c0(%rdx), %rdi
    00000ec2: 	addq	$0x8, %r8
    00000ec6: 	addsd	%xmm4, %xmm0
    00000eca: 	addq	$0x12c0, %r9
    00000ed1: 	addsd	%xmm3, %xmm0
    00000ed5: 	unpckhpd	%xmm3, %xmm3
    00000ed9: 	addsd	%xmm3, %xmm0
    00000edd: 	addsd	%xmm2, %xmm0
    00000ee1: 	unpckhpd	%xmm2, %xmm2
    00000ee5: 	addsd	%xmm2, %xmm0
    00000ee9: 	addsd	%xmm1, %xmm0
    00000eed: 	unpckhpd	%xmm1, %xmm1
    00000ef1: 	addsd	%xmm1, %xmm0
    00000ef5: 	movsd	%xmm0, -0x8(%r8)
    00000efb: 	cmpq	%rbx, %rdi
    00000efe: 	jne	.Ltmp1212 # Offset: 3838
    00000f04: 	addl	$0x1, %r10d
    00000f08: 	cmpl	%r11d, %r10d
    00000f0b: 	jne	.Ltmp1213 # Offset: 3851
.Ltmp1210:
    00000f11: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000f18: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00000f1f: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000f26: 	je	.Ltmp1214 # Offset: 3878
.Ltmp1324:
    00000f2c: 	movq	-0x20(%rax), %rbp
    00000f30: 	callq	clock@PLT # Offset: 3888
    00000f35: 	pxor	%xmm0, %xmm0
    00000f39: 	movq	%rax, end_time(%rip)
    00000f40: 	movq	%rbp, %rdi
    00000f43: 	subq	start_time(%rip), %rax
    00000f4a: 	cvtsi2sd	%rax, %xmm0
    00000f4f: 	divsd	DATAat0x24960(%rip), %xmm0
    00000f57: 	callq	_Z13record_resultdPKc # Offset: 3927
    00000f5c: 	movq	%r14, %rax
    00000f5f: 	pxor	%xmm0, %xmm0
.Ltmp1215:
    00000f63: 	movsd	(%rax), %xmm1
    00000f67: 	addq	$0x10, %rax
    00000f6b: 	addsd	%xmm1, %xmm0
    00000f6f: 	movsd	-0x8(%rax), %xmm1
    00000f74: 	addsd	%xmm1, %xmm0
    00000f78: 	cmpq	0xc0(%rsp), %rax
    00000f80: 	jne	.Ltmp1215 # Offset: 3968
    00000f82: 	movq	0x50(%rsp), %rdi
    00000f87: 	callq	_Z9check_sumIdEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3975
    00000f8c: 	movq	0x100(%rsp), %rdi
    00000f94: 	cmpq	(%rsp), %rdi
    00000f98: 	je	.Ltmp1216 # Offset: 3992
    00000f9a: 	movq	0x110(%rsp), %rax
    00000fa2: 	leaq	0x1(%rax), %rsi
    00000fa6: 	callq	_ZdlPvm@PLT # Offset: 4006
.Ltmp1216:
    00000fab: 	movq	0x50(%rsp), %rbx
    00000fb0: 	movq	0xa0(%rsp), %rsi
    00000fb8: 	leaq	DATAat0x246c8(%rip), %rdx
    00000fbf: 	movq	%rbx, %rdi
    00000fc2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4034
    00000fc7: 	movq	%rbx, %rsi
    00000fca: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000fd1: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 4049
    00000fd6: 	callq	clock@PLT # Offset: 4054
    00000fdb: 	movl	iterations(%rip), %r11d
    00000fe2: 	movq	%rax, start_time(%rip)
    00000fe9: 	testl	%r11d, %r11d
    00000fec: 	jle	.Ltmp1217 # Offset: 4076
    00000ff2: 	leaq	0x1908(%r14), %rax
    00000ff9: 	xorl	%r10d, %r10d
    00000ffc: 	leaq	0x12c0(%r12), %rsi
    00001004: 	movq	%rax, 0x78(%rsp)
    00001009: 	leaq	0x8(%r14), %rax
    0000100d: 	leaq	0x18e0(%r14), %r8
    00001014: 	movq	%rax, 0x70(%rsp)
    00001019: 	xorl	%eax, %eax
.Ltmp1220:
    0000101b: 	movq	%rax, (%r14)
    0000101e: 	movq	0x78(%rsp), %rbx
    00001023: 	movq	%r14, %rcx
    00001026: 	movq	%r12, %rdx
    00001029: 	movq	%r15, %r9
    0000102c: 	movq	%rax, -0x10(%rbx)
    00001030: 	movq	0x70(%rsp), %rdi
    00001035: 	andq	$-0x8, %rdi
    00001039: 	subq	%rdi, %rcx
    0000103c: 	addl	$0x1900, %ecx
    00001042: 	shrl	$0x3, %ecx
    00001045: 	rep		stosq	%rax, %es:(%rdi)
    00001048: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1219:
    00001050: 	movsd	(%r9), %xmm0
    00001055: 	movq	%rdx, %rdi
    00001058: 	movq	%r14, %rcx
    0000105b: 	movapd	%xmm0, %xmm3
    0000105f: 	unpcklpd	%xmm3, %xmm3
    00001063: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1218:
    00001068: 	movupd	0x2580(%rdi), %xmm1
    00001070: 	movupd	(%rdi), %xmm2
    00001074: 	addq	$0x20, %rcx
    00001078: 	addq	$0x4b00, %rdi
    0000107f: 	movupd	-0x10(%rcx), %xmm4
    00001084: 	movhpd	-0x12c0(%rdi), %xmm1
    0000108c: 	movhpd	-0x3840(%rdi), %xmm2
    00001094: 	mulpd	%xmm3, %xmm1
    00001098: 	mulpd	%xmm3, %xmm2
    0000109c: 	addpd	%xmm4, %xmm1
    000010a0: 	movupd	-0x20(%rcx), %xmm4
    000010a5: 	addpd	%xmm4, %xmm2
    000010a9: 	movups	%xmm1, -0x10(%rcx)
    000010ad: 	movups	%xmm2, -0x20(%rcx)
    000010b1: 	cmpq	%r8, %rcx
    000010b4: 	jne	.Ltmp1218 # Offset: 4276
    000010b6: 	movsd	0x3a4d00(%rdx), %xmm1
    000010be: 	addq	$0x8, %rdx
    000010c2: 	addq	$0x8, %r9
    000010c6: 	mulsd	%xmm0, %xmm1
    000010ca: 	addsd	0x18e0(%r14), %xmm1
    000010d3: 	movsd	%xmm1, 0x18e0(%r14)
    000010dc: 	movsd	0x3a5fb8(%rdx), %xmm1
    000010e4: 	mulsd	%xmm0, %xmm1
    000010e8: 	addsd	0x18e8(%r14), %xmm1
    000010f1: 	movsd	%xmm1, 0x18e8(%r14)
    000010fa: 	movsd	0x3a7278(%rdx), %xmm1
    00001102: 	mulsd	%xmm0, %xmm1
    00001106: 	mulsd	0x3a8538(%rdx), %xmm0
    0000110e: 	addsd	0x18f0(%r14), %xmm1
    00001117: 	addsd	0x18f8(%r14), %xmm0
    00001120: 	movsd	%xmm1, 0x18f0(%r14)
    00001129: 	movsd	%xmm0, 0x18f8(%r14)
    00001132: 	cmpq	%rsi, %rdx
    00001135: 	jne	.Ltmp1219 # Offset: 4405
    0000113b: 	addl	$0x1, %r10d
    0000113f: 	cmpl	%r11d, %r10d
    00001142: 	jne	.Ltmp1220 # Offset: 4418
.Ltmp1217:
    00001148: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000114f: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00001156: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000115d: 	je	.Ltmp1221 # Offset: 4445
.Ltmp1323:
    00001163: 	movq	-0x20(%rax), %rbp
    00001167: 	callq	clock@PLT # Offset: 4455
    0000116c: 	pxor	%xmm0, %xmm0
    00001170: 	movq	%rax, end_time(%rip)
    00001177: 	movq	%rbp, %rdi
    0000117a: 	subq	start_time(%rip), %rax
    00001181: 	cvtsi2sd	%rax, %xmm0
    00001186: 	divsd	DATAat0x24960(%rip), %xmm0
    0000118e: 	callq	_Z13record_resultdPKc # Offset: 4494
    00001193: 	movq	%r14, %rax
    00001196: 	pxor	%xmm0, %xmm0
.Ltmp1222:
    0000119a: 	movsd	(%rax), %xmm1
    0000119e: 	addq	$0x10, %rax
    000011a2: 	addsd	%xmm1, %xmm0
    000011a6: 	movsd	-0x8(%rax), %xmm1
    000011ab: 	addsd	%xmm1, %xmm0
    000011af: 	cmpq	0xc0(%rsp), %rax
    000011b7: 	jne	.Ltmp1222 # Offset: 4535
    000011b9: 	movq	0x50(%rsp), %rdi
    000011be: 	callq	_Z9check_sumIdEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4542
    000011c3: 	movq	0x100(%rsp), %rdi
    000011cb: 	cmpq	(%rsp), %rdi
    000011cf: 	je	.Ltmp1223 # Offset: 4559
    000011d1: 	movq	0x110(%rsp), %rax
    000011d9: 	leaq	0x1(%rax), %rsi
    000011dd: 	callq	_ZdlPvm@PLT # Offset: 4573
.Ltmp1223:
    000011e2: 	movq	0x50(%rsp), %rbx
    000011e7: 	movq	0xa0(%rsp), %rsi
    000011ef: 	leaq	DATAat0x246f0(%rip), %rdx
    000011f6: 	movq	%rbx, %rdi
    000011f9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4601
    000011fe: 	movq	%rbx, %rsi
    00001201: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00001208: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 4616
    0000120d: 	callq	clock@PLT # Offset: 4621
    00001212: 	movl	iterations(%rip), %r11d
    00001219: 	movq	%rax, start_time(%rip)
    00001220: 	testl	%r11d, %r11d
    00001223: 	jle	.Ltmp1224 # Offset: 4643
    00001229: 	leaq	0x1908(%r14), %rax
    00001230: 	xorl	%r10d, %r10d
    00001233: 	leaq	0x12c0(%r12), %rsi
    0000123b: 	movq	%rax, 0x78(%rsp)
    00001240: 	leaq	0x8(%r14), %rax
    00001244: 	leaq	0x18e0(%r14), %r8
    0000124b: 	movq	%rax, 0x70(%rsp)
    00001250: 	xorl	%eax, %eax
.Ltmp1227:
    00001252: 	movq	%rax, (%r14)
    00001255: 	movq	0x78(%rsp), %rbx
    0000125a: 	movq	%r14, %rcx
    0000125d: 	movq	%r12, %rdx
    00001260: 	movq	%r15, %r9
    00001263: 	movq	%rax, -0x10(%rbx)
    00001267: 	movq	0x70(%rsp), %rdi
    0000126c: 	andq	$-0x8, %rdi
    00001270: 	subq	%rdi, %rcx
    00001273: 	addl	$0x1900, %ecx
    00001279: 	shrl	$0x3, %ecx
    0000127c: 	rep		stosq	%rax, %es:(%rdi)
    0000127f: 	nop # Size: 1
.Ltmp1226:
    00001280: 	movsd	(%r9), %xmm0
    00001285: 	movsd	0x8(%r9), %xmm5
    0000128b: 	movq	%rdx, %rcx
    0000128e: 	movq	%r14, %rdi
    00001291: 	movsd	0x10(%r9), %xmm4
    00001297: 	movsd	0x18(%r9), %xmm3
    0000129d: 	movapd	%xmm0, %xmm9
    000012a2: 	movapd	%xmm5, %xmm8
    000012a7: 	movapd	%xmm4, %xmm7
    000012ab: 	movapd	%xmm3, %xmm6
    000012af: 	unpcklpd	%xmm9, %xmm9
    000012b4: 	unpcklpd	%xmm8, %xmm8
    000012b9: 	unpcklpd	%xmm7, %xmm7
    000012bd: 	unpcklpd	%xmm6, %xmm6
    000012c1: 	nopl	(%rax) # Size: 7
.Ltmp1225:
    000012c8: 	movupd	0x10(%rdi), %xmm2
    000012cd: 	movupd	(%rdi), %xmm11
    000012d2: 	addq	$0x20, %rdi
    000012d6: 	addq	$0x4b00, %rcx
    000012dd: 	movupd	-0x2580(%rcx), %xmm1
    000012e5: 	movupd	-0x3840(%rcx), %xmm10
    000012ee: 	movlpd	-0x4af8(%rcx), %xmm10
    000012f7: 	movhpd	-0x12c0(%rcx), %xmm1
    000012ff: 	mulpd	%xmm9, %xmm1
    00001304: 	mulpd	%xmm8, %xmm10
    00001309: 	addpd	%xmm2, %xmm1
    0000130d: 	movupd	-0x12c0(%rcx), %xmm2
    00001315: 	movlpd	-0x2578(%rcx), %xmm2
    0000131d: 	mulpd	%xmm8, %xmm2
    00001322: 	addpd	%xmm2, %xmm1
    00001326: 	movupd	-0x2570(%rcx), %xmm2
    0000132e: 	movhpd	-0x12b0(%rcx), %xmm2
    00001336: 	mulpd	%xmm7, %xmm2
    0000133a: 	addpd	%xmm2, %xmm1
    0000133e: 	movupd	-0x12b0(%rcx), %xmm2
    00001346: 	movlpd	-0x2568(%rcx), %xmm2
    0000134e: 	mulpd	%xmm6, %xmm2
    00001352: 	addpd	%xmm2, %xmm1
    00001356: 	movupd	-0x4b00(%rcx), %xmm2
    0000135e: 	movhpd	-0x3840(%rcx), %xmm2
    00001366: 	mulpd	%xmm9, %xmm2
    0000136b: 	movups	%xmm1, -0x10(%rdi)
    0000136f: 	addpd	%xmm11, %xmm2
    00001374: 	addpd	%xmm10, %xmm2
    00001379: 	movupd	-0x4af0(%rcx), %xmm10
    00001382: 	movhpd	-0x3830(%rcx), %xmm10
    0000138b: 	mulpd	%xmm7, %xmm10
    00001390: 	addpd	%xmm10, %xmm2
    00001395: 	movupd	-0x3830(%rcx), %xmm10
    0000139e: 	movlpd	-0x4ae8(%rcx), %xmm10
    000013a7: 	mulpd	%xmm6, %xmm10
    000013ac: 	addpd	%xmm10, %xmm2
    000013b1: 	movups	%xmm2, -0x20(%rdi)
    000013b5: 	cmpq	%r8, %rdi
    000013b8: 	jne	.Ltmp1225 # Offset: 5048
    000013be: 	movsd	0x3a4d08(%rdx), %xmm2
    000013c6: 	movsd	0x3a4d00(%rdx), %xmm1
    000013ce: 	addq	$0x20, %rdx
    000013d2: 	addq	$0x20, %r9
    000013d6: 	mulsd	%xmm5, %xmm2
    000013da: 	mulsd	%xmm0, %xmm1
    000013de: 	addsd	0x18e0(%r14), %xmm1
    000013e7: 	addsd	%xmm2, %xmm1
    000013eb: 	movsd	0x3a4cf0(%rdx), %xmm2
    000013f3: 	mulsd	%xmm4, %xmm2
    000013f7: 	addsd	%xmm2, %xmm1
    000013fb: 	movsd	0x3a4cf8(%rdx), %xmm2
    00001403: 	mulsd	%xmm3, %xmm2
    00001407: 	addsd	%xmm2, %xmm1
    0000140b: 	movsd	0x3a5fa8(%rdx), %xmm2
    00001413: 	mulsd	%xmm5, %xmm2
    00001417: 	movsd	%xmm1, 0x18e0(%r14)
    00001420: 	movsd	0x3a5fa0(%rdx), %xmm1
    00001428: 	mulsd	%xmm0, %xmm1
    0000142c: 	addsd	0x18e8(%r14), %xmm1
    00001435: 	addsd	%xmm2, %xmm1
    00001439: 	movsd	0x3a5fb0(%rdx), %xmm2
    00001441: 	mulsd	%xmm4, %xmm2
    00001445: 	addsd	%xmm2, %xmm1
    00001449: 	movsd	0x3a5fb8(%rdx), %xmm2
    00001451: 	mulsd	%xmm3, %xmm2
    00001455: 	addsd	%xmm2, %xmm1
    00001459: 	movsd	0x3a7268(%rdx), %xmm2
    00001461: 	mulsd	%xmm5, %xmm2
    00001465: 	movsd	%xmm1, 0x18e8(%r14)
    0000146e: 	movsd	0x3a7260(%rdx), %xmm1
    00001476: 	mulsd	0x3a8528(%rdx), %xmm5
    0000147e: 	mulsd	%xmm0, %xmm1
    00001482: 	addsd	0x18f0(%r14), %xmm1
    0000148b: 	mulsd	0x3a8520(%rdx), %xmm0
    00001493: 	addsd	0x18f8(%r14), %xmm0
    0000149c: 	addsd	%xmm2, %xmm1
    000014a0: 	movsd	0x3a7270(%rdx), %xmm2
    000014a8: 	addsd	%xmm5, %xmm0
    000014ac: 	mulsd	%xmm4, %xmm2
    000014b0: 	mulsd	0x3a8530(%rdx), %xmm4
    000014b8: 	addsd	%xmm2, %xmm1
    000014bc: 	movsd	0x3a7278(%rdx), %xmm2
    000014c4: 	addsd	%xmm4, %xmm0
    000014c8: 	mulsd	%xmm3, %xmm2
    000014cc: 	mulsd	0x3a8538(%rdx), %xmm3
    000014d4: 	addsd	%xmm2, %xmm1
    000014d8: 	addsd	%xmm3, %xmm0
    000014dc: 	movsd	%xmm1, 0x18f0(%r14)
    000014e5: 	movsd	%xmm0, 0x18f8(%r14)
    000014ee: 	cmpq	%rsi, %rdx
    000014f1: 	jne	.Ltmp1226 # Offset: 5361
    000014f7: 	addl	$0x1, %r10d
    000014fb: 	cmpl	%r11d, %r10d
    000014fe: 	jne	.Ltmp1227 # Offset: 5374
.Ltmp1224:
    00001504: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000150b: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00001512: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001519: 	je	.Ltmp1228 # Offset: 5401
.Ltmp1322:
    0000151f: 	movq	-0x20(%rax), %rbp
    00001523: 	callq	clock@PLT # Offset: 5411
    00001528: 	pxor	%xmm0, %xmm0
    0000152c: 	movq	%rax, end_time(%rip)
    00001533: 	movq	%rbp, %rdi
    00001536: 	subq	start_time(%rip), %rax
    0000153d: 	cvtsi2sd	%rax, %xmm0
    00001542: 	divsd	DATAat0x24960(%rip), %xmm0
    0000154a: 	callq	_Z13record_resultdPKc # Offset: 5450
    0000154f: 	movq	%r14, %rax
    00001552: 	pxor	%xmm0, %xmm0
.Ltmp1229:
    00001556: 	movsd	(%rax), %xmm1
    0000155a: 	addq	$0x10, %rax
    0000155e: 	addsd	%xmm1, %xmm0
    00001562: 	movsd	-0x8(%rax), %xmm1
    00001567: 	addsd	%xmm1, %xmm0
    0000156b: 	cmpq	0xc0(%rsp), %rax
    00001573: 	jne	.Ltmp1229 # Offset: 5491
    00001575: 	movq	0x50(%rsp), %rdi
    0000157a: 	callq	_Z9check_sumIdEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5498
    0000157f: 	movq	0x100(%rsp), %rdi
    00001587: 	cmpq	(%rsp), %rdi
    0000158b: 	je	.Ltmp1230 # Offset: 5515
    0000158d: 	movq	0x110(%rsp), %rax
    00001595: 	leaq	0x1(%rax), %rsi
    00001599: 	callq	_ZdlPvm@PLT # Offset: 5529
.Ltmp1230:
    0000159e: 	movq	0x50(%rsp), %rbx
    000015a3: 	movq	0xa0(%rsp), %rsi
    000015ab: 	leaq	DATAat0x24718(%rip), %rdx
    000015b2: 	movq	%rbx, %rdi
    000015b5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5557
    000015ba: 	movq	%rbx, %rsi
    000015bd: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000015c4: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 5572
    000015c9: 	callq	clock@PLT # Offset: 5577
    000015ce: 	movl	iterations(%rip), %r11d
    000015d5: 	movq	%rax, start_time(%rip)
    000015dc: 	testl	%r11d, %r11d
    000015df: 	jle	.Ltmp1231 # Offset: 5599
    000015e5: 	leaq	0x1908(%r14), %rax
    000015ec: 	xorl	%r10d, %r10d
    000015ef: 	leaq	0x12c0(%r12), %rsi
    000015f7: 	movq	%rax, 0x78(%rsp)
    000015fc: 	leaq	0x8(%r14), %rax
    00001600: 	leaq	0x18e0(%r14), %r8
    00001607: 	movq	%rax, 0x70(%rsp)
    0000160c: 	xorl	%eax, %eax
.Ltmp1234:
    0000160e: 	movq	%rax, (%r14)
    00001611: 	movq	0x78(%rsp), %rbx
    00001616: 	movq	%r14, %rcx
    00001619: 	movq	%r12, %rdx
    0000161c: 	movq	%r15, %r9
    0000161f: 	movq	%rax, -0x10(%rbx)
    00001623: 	movq	0x70(%rsp), %rdi
    00001628: 	andq	$-0x8, %rdi
    0000162c: 	subq	%rdi, %rcx
    0000162f: 	addl	$0x1900, %ecx
    00001635: 	shrl	$0x3, %ecx
    00001638: 	rep		stosq	%rax, %es:(%rdi)
    0000163b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1233:
    00001640: 	movsd	(%r9), %xmm1
    00001645: 	movsd	0x8(%r9), %xmm0
    0000164b: 	movq	%rdx, %rcx
    0000164e: 	movq	%r14, %rdi
    00001651: 	movsd	0x10(%r9), %xmm5
    00001657: 	movsd	0x18(%r9), %xmm4
    0000165d: 	movapd	%xmm1, %xmm9
    00001662: 	movapd	%xmm0, %xmm8
    00001667: 	movapd	%xmm5, %xmm7
    0000166b: 	movapd	%xmm4, %xmm6
    0000166f: 	unpcklpd	%xmm9, %xmm9
    00001674: 	unpcklpd	%xmm8, %xmm8
    00001679: 	unpcklpd	%xmm7, %xmm7
    0000167d: 	unpcklpd	%xmm6, %xmm6
    00001681: 	nopl	(%rax) # Size: 7
.Ltmp1232:
    00001688: 	movupd	0x10(%rdi), %xmm3
    0000168d: 	movupd	(%rdi), %xmm12
    00001692: 	addq	$0x20, %rdi
    00001696: 	addq	$0x4b00, %rcx
    0000169d: 	movupd	-0x2580(%rcx), %xmm2
    000016a5: 	movupd	-0x3840(%rcx), %xmm10
    000016ae: 	movlpd	-0x4af8(%rcx), %xmm10
    000016b7: 	movhpd	-0x12c0(%rcx), %xmm2
    000016bf: 	mulpd	%xmm9, %xmm2
    000016c4: 	mulpd	%xmm8, %xmm10
    000016c9: 	addpd	%xmm3, %xmm2
    000016cd: 	movupd	-0x12c0(%rcx), %xmm3
    000016d5: 	movlpd	-0x2578(%rcx), %xmm3
    000016dd: 	mulpd	%xmm8, %xmm3
    000016e2: 	addpd	%xmm3, %xmm2
    000016e6: 	movupd	-0x2570(%rcx), %xmm3
    000016ee: 	movhpd	-0x12b0(%rcx), %xmm3
    000016f6: 	mulpd	%xmm7, %xmm3
    000016fa: 	addpd	%xmm3, %xmm2
    000016fe: 	movupd	-0x12b0(%rcx), %xmm3
    00001706: 	movlpd	-0x2568(%rcx), %xmm3
    0000170e: 	mulpd	%xmm6, %xmm3
    00001712: 	addpd	%xmm3, %xmm2
    00001716: 	movupd	-0x4b00(%rcx), %xmm3
    0000171e: 	movhpd	-0x3840(%rcx), %xmm3
    00001726: 	mulpd	%xmm9, %xmm3
    0000172b: 	movups	%xmm2, -0x10(%rdi)
    0000172f: 	addpd	%xmm12, %xmm3
    00001734: 	addpd	%xmm10, %xmm3
    00001739: 	movupd	-0x4af0(%rcx), %xmm10
    00001742: 	movhpd	-0x3830(%rcx), %xmm10
    0000174b: 	mulpd	%xmm7, %xmm10
    00001750: 	addpd	%xmm10, %xmm3
    00001755: 	movupd	-0x3830(%rcx), %xmm10
    0000175e: 	movlpd	-0x4ae8(%rcx), %xmm10
    00001767: 	mulpd	%xmm6, %xmm10
    0000176c: 	addpd	%xmm10, %xmm3
    00001771: 	movups	%xmm3, -0x20(%rdi)
    00001775: 	cmpq	%r8, %rdi
    00001778: 	jne	.Ltmp1232 # Offset: 6008
    0000177e: 	movsd	0x3a5fc8(%rdx), %xmm3
    00001786: 	addq	$0x20, %rdx
    0000178a: 	addq	$0x20, %r9
    0000178e: 	movsd	0x3a5fa0(%rdx), %xmm2
    00001796: 	movsd	0x3a7260(%rdx), %xmm7
    0000179e: 	movsd	0x3a4ce0(%rdx), %xmm6
    000017a6: 	mulsd	%xmm0, %xmm3
    000017aa: 	mulsd	%xmm1, %xmm2
    000017ae: 	addsd	0x18e8(%r14), %xmm2
    000017b7: 	mulsd	%xmm1, %xmm7
    000017bb: 	addsd	0x18f0(%r14), %xmm7
    000017c4: 	mulsd	%xmm1, %xmm6
    000017c8: 	mulsd	0x3a8520(%rdx), %xmm1
    000017d0: 	addsd	0x18e0(%r14), %xmm6
    000017d9: 	addsd	0x18f8(%r14), %xmm1
    000017e2: 	addsd	%xmm2, %xmm3
    000017e6: 	movsd	0x3a5fb0(%rdx), %xmm2
    000017ee: 	mulsd	%xmm5, %xmm2
    000017f2: 	addsd	%xmm2, %xmm3
    000017f6: 	movsd	0x3a7268(%rdx), %xmm2
    000017fe: 	mulsd	%xmm0, %xmm2
    00001802: 	addsd	%xmm7, %xmm2
    00001806: 	movsd	0x3a7270(%rdx), %xmm7
    0000180e: 	mulsd	%xmm5, %xmm7
    00001812: 	addsd	%xmm7, %xmm2
    00001816: 	movsd	0x3a8528(%rdx), %xmm7
    0000181e: 	mulsd	%xmm0, %xmm7
    00001822: 	mulsd	0x3a4ce8(%rdx), %xmm0
    0000182a: 	addsd	%xmm7, %xmm1
    0000182e: 	movsd	0x3a8530(%rdx), %xmm7
    00001836: 	addsd	%xmm6, %xmm0
    0000183a: 	mulsd	%xmm5, %xmm7
    0000183e: 	mulsd	0x3a4cf0(%rdx), %xmm5
    00001846: 	addsd	%xmm7, %xmm1
    0000184a: 	addsd	%xmm0, %xmm5
    0000184e: 	movsd	0x3a4cf8(%rdx), %xmm0
    00001856: 	mulsd	%xmm4, %xmm0
    0000185a: 	addsd	%xmm5, %xmm0
    0000185e: 	movsd	%xmm0, 0x18e0(%r14)
    00001867: 	movsd	0x3a5fb8(%rdx), %xmm0
    0000186f: 	mulsd	%xmm4, %xmm0
    00001873: 	addsd	%xmm3, %xmm0
    00001877: 	movsd	%xmm0, 0x18e8(%r14)
    00001880: 	movsd	0x3a7278(%rdx), %xmm0
    00001888: 	mulsd	%xmm4, %xmm0
    0000188c: 	mulsd	0x3a8538(%rdx), %xmm4
    00001894: 	addsd	%xmm2, %xmm0
    00001898: 	addsd	%xmm4, %xmm1
    0000189c: 	movsd	%xmm0, 0x18f0(%r14)
    000018a5: 	movsd	%xmm1, 0x18f8(%r14)
    000018ae: 	cmpq	%rdx, %rsi
    000018b1: 	jne	.Ltmp1233 # Offset: 6321
    000018b7: 	addl	$0x1, %r10d
    000018bb: 	cmpl	%r10d, %r11d
    000018be: 	jne	.Ltmp1234 # Offset: 6334
.Ltmp1231:
    000018c4: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000018cb: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    000018d2: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000018d9: 	je	.Ltmp1235 # Offset: 6361
.Ltmp1321:
    000018df: 	movq	-0x20(%rax), %rbp
    000018e3: 	callq	clock@PLT # Offset: 6371
    000018e8: 	pxor	%xmm0, %xmm0
    000018ec: 	movq	%rax, end_time(%rip)
    000018f3: 	movq	%rbp, %rdi
    000018f6: 	subq	start_time(%rip), %rax
    000018fd: 	cvtsi2sd	%rax, %xmm0
    00001902: 	divsd	DATAat0x24960(%rip), %xmm0
    0000190a: 	callq	_Z13record_resultdPKc # Offset: 6410
    0000190f: 	movq	%r14, %rax
    00001912: 	pxor	%xmm0, %xmm0
.Ltmp1236:
    00001916: 	movsd	(%rax), %xmm1
    0000191a: 	addq	$0x10, %rax
    0000191e: 	addsd	%xmm1, %xmm0
    00001922: 	movsd	-0x8(%rax), %xmm1
    00001927: 	addsd	%xmm1, %xmm0
    0000192b: 	cmpq	0xc0(%rsp), %rax
    00001933: 	jne	.Ltmp1236 # Offset: 6451
    00001935: 	movsd	init_value(%rip), %xmm2
    0000193d: 	movsd	DATAat0x24988(%rip), %xmm1
    00001945: 	mulsd	%xmm2, %xmm1
    00001949: 	mulsd	%xmm2, %xmm1
    0000194d: 	movapd	%xmm0, %xmm2
    00001951: 	subsd	%xmm1, %xmm2
    00001955: 	movapd	%xmm0, %xmm1
    00001959: 	andpd	DATAat0x24940(%rip), %xmm1
    00001961: 	comisd	DATAat0x24978(%rip), %xmm1
    00001969: 	jbe	.Ltmp1237 # Offset: 6505
    0000196b: 	divsd	%xmm0, %xmm2
.Ltmp1237:
    0000196f: 	andpd	DATAat0x24940(%rip), %xmm2
    00001977: 	movsd	DATAat0x24980(%rip), %xmm5
    0000197f: 	movq	0x100(%rsp), %rdx
    00001987: 	comisd	%xmm2, %xmm5
    0000198b: 	jbe	.Ltmp1238 # Offset: 6539
.Ltmp1320:
    00001991: 	cmpq	(%rsp), %rdx
    00001995: 	je	.Ltmp1239 # Offset: 6549
    00001997: 	movq	0x110(%rsp), %rax
    0000199f: 	movq	%rdx, %rdi
    000019a2: 	leaq	0x1(%rax), %rsi
    000019a6: 	callq	_ZdlPvm@PLT # Offset: 6566
.Ltmp1239:
    000019ab: 	movq	0x50(%rsp), %rbx
    000019b0: 	movq	0xa0(%rsp), %rsi
    000019b8: 	leaq	DATAat0x24740(%rip), %rdx
    000019bf: 	movq	%rbx, %rdi
    000019c2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6594
    000019c7: 	movq	%rbx, %r9
    000019ca: 	movl	$0x258, %r8d
    000019d0: 	movq	%r12, %rdx
    000019d3: 	movq	%r14, %rsi
    000019d6: 	movl	$0x320, %ecx
    000019db: 	movq	%r15, %rdi
    000019de: 	callq	_Z14test_matvecmulId21matvecmul_IJ_blocked1IdEEvPKT_PS2_S4_iiT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6622
    000019e3: 	movq	0x100(%rsp), %rdi
    000019eb: 	cmpq	(%rsp), %rdi
    000019ef: 	je	.Ltmp1240 # Offset: 6639
    000019f1: 	movq	0x110(%rsp), %rax
    000019f9: 	leaq	0x1(%rax), %rsi
    000019fd: 	callq	_ZdlPvm@PLT # Offset: 6653
.Ltmp1240:
    00001a02: 	movq	0x50(%rsp), %rbx
    00001a07: 	movq	0xa0(%rsp), %rsi
    00001a0f: 	leaq	DATAat0x24768(%rip), %rdx
    00001a16: 	movq	%rbx, %rdi
    00001a19: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6681
    00001a1e: 	movq	%rbx, %r9
    00001a21: 	movl	$0x258, %r8d
    00001a27: 	movq	%r12, %rdx
    00001a2a: 	movq	%r14, %rsi
    00001a2d: 	movl	$0x320, %ecx
    00001a32: 	movq	%r15, %rdi
    00001a35: 	callq	_Z14test_matvecmulId21matvecmul_JI_blocked1IdEEvPKT_PS2_S4_iiT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6709
    00001a3a: 	movq	0x100(%rsp), %rdi
    00001a42: 	cmpq	(%rsp), %rdi
    00001a46: 	je	.Ltmp1241 # Offset: 6726
    00001a48: 	movq	0x110(%rsp), %rax
    00001a50: 	leaq	0x1(%rax), %rsi
    00001a54: 	callq	_ZdlPvm@PLT # Offset: 6740
.Ltmp1241:
    00001a59: 	movq	0x50(%rsp), %rbx
    00001a5e: 	movq	0xa0(%rsp), %rsi
    00001a66: 	leaq	DATAat0x24790(%rip), %rdx
    00001a6d: 	movq	%rbx, %rdi
    00001a70: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6768
    00001a75: 	movq	%rbx, %r9
    00001a78: 	movl	$0x258, %r8d
    00001a7e: 	movq	%r12, %rdx
    00001a81: 	movq	%r14, %rsi
    00001a84: 	movl	$0x320, %ecx
    00001a89: 	movq	%r15, %rdi
    00001a8c: 	callq	_Z14test_matvecmulId21matvecmul_IJ_blocked2IdEEvPKT_PS2_S4_iiT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6796
    00001a91: 	movq	0x100(%rsp), %rdi
    00001a99: 	cmpq	(%rsp), %rdi
    00001a9d: 	je	.Ltmp1242 # Offset: 6813
    00001a9f: 	movq	0x110(%rsp), %rax
    00001aa7: 	leaq	0x1(%rax), %rsi
    00001aab: 	callq	_ZdlPvm@PLT # Offset: 6827
.Ltmp1242:
    00001ab0: 	movq	0x50(%rsp), %rbx
    00001ab5: 	movq	0xa0(%rsp), %rsi
    00001abd: 	leaq	DATAat0x247b8(%rip), %rdx
    00001ac4: 	movq	%rbx, %rdi
    00001ac7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6855
    00001acc: 	movq	%rbx, %r9
    00001acf: 	movl	$0x258, %r8d
    00001ad5: 	movq	%r12, %rdx
    00001ad8: 	movq	%r14, %rsi
    00001adb: 	movl	$0x320, %ecx
    00001ae0: 	movq	%r15, %rdi
    00001ae3: 	callq	_Z14test_matvecmulId21matvecmul_JI_blocked2IdEEvPKT_PS2_S4_iiT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6883
    00001ae8: 	movq	0x100(%rsp), %rdi
    00001af0: 	cmpq	(%rsp), %rdi
    00001af4: 	je	.Ltmp1243 # Offset: 6900
    00001af6: 	movq	0x110(%rsp), %rax
    00001afe: 	leaq	0x1(%rax), %rsi
    00001b02: 	callq	_ZdlPvm@PLT # Offset: 6914
.Ltmp1243:
    00001b07: 	movq	0x50(%rsp), %rbx
    00001b0c: 	movq	0xa0(%rsp), %rsi
    00001b14: 	leaq	DATAat0x247e0(%rip), %rdx
    00001b1b: 	movq	%rbx, %rdi
    00001b1e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6942
    00001b23: 	movq	%rbx, %rsi
    00001b26: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00001b2d: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 6957
    00001b32: 	callq	clock@PLT # Offset: 6962
    00001b37: 	leaq	0x1908(%r14), %rbx
    00001b3e: 	movl	$0x0, 0xa8(%rsp)
    00001b49: 	movq	%rax, start_time(%rip)
    00001b50: 	movl	iterations(%rip), %eax
    00001b56: 	movq	%rbx, 0x78(%rsp)
    00001b5b: 	leaq	0x8(%r14), %rbx
    00001b5f: 	movl	%eax, 0xd0(%rsp)
    00001b66: 	movq	%rbx, 0x70(%rsp)
    00001b6b: 	testl	%eax, %eax
    00001b6d: 	jle	.Ltmp1244 # Offset: 7021
    00001b73: 	movq	%r14, 0xb0(%rsp)
    00001b7b: 	movq	%r15, 0x48(%rsp)
    00001b80: 	movq	%r12, %r15
.Ltmp1252:
    00001b83: 	movq	0xb0(%rsp), %rbx
    00001b8b: 	movq	$0x0, (%rbx)
    00001b92: 	movq	0x78(%rsp), %rax
    00001b97: 	movq	%rbx, %rcx
    00001b9a: 	movq	$0x0, -0x10(%rax)
    00001ba2: 	movq	0x70(%rsp), %rdi
    00001ba7: 	xorl	%eax, %eax
    00001ba9: 	andq	$-0x8, %rdi
    00001bad: 	subq	%rdi, %rcx
    00001bb0: 	addl	$0x1900, %ecx
    00001bb6: 	shrl	$0x3, %ecx
    00001bb9: 	rep		stosq	%rax, %es:(%rdi)
    00001bbc: 	movq	%rbx, 0x80(%rsp)
    00001bc4: 	movq	%r15, 0xb8(%rsp)
    00001bcc: 	movl	$0x0, 0x40(%rsp)
.Ltmp1251:
    00001bd4: 	movl	0x40(%rsp), %eax
    00001bd8: 	movq	0xb0(%rsp), %r9
    00001be0: 	movq	0xb8(%rsp), %rbp
    00001be8: 	movl	%eax, %ebx
    00001bea: 	movl	%eax, 0x68(%rsp)
    00001bee: 	addl	$0x10, %eax
    00001bf1: 	leal	0xd(%rbx), %edi
    00001bf4: 	leal	0xc(%rbx), %ecx
    00001bf7: 	movl	%eax, %esi
    00001bf9: 	movl	%eax, 0x40(%rsp)
    00001bfd: 	cmpl	%ebx, %edi
    00001bff: 	movl	%edi, 0x58(%rsp)
    00001c03: 	movl	%eax, %edi
    00001c05: 	movslq	%ecx, %rax
    00001c08: 	cmovlel	%ebx, %edi
    00001c0b: 	imull	$0x258, %ecx, %r14d
    00001c12: 	shlq	$0x3, %rax
    00001c16: 	movq	%r9, %rcx
    00001c19: 	leaq	(%r9,%rax), %rbx
    00001c1d: 	leaq	0x8(%r9,%rax), %r11
    00001c22: 	leaq	0x10(%rcx,%rax), %r10
    00001c27: 	movslq	%edi, %rdx
    00001c2a: 	movl	%edi, %r13d
    00001c2d: 	movl	%edi, 0x60(%rsp)
    00001c31: 	leal	0x258(%r14), %r9d
    00001c38: 	movl	%r14d, 0x10(%rsp)
    00001c3d: 	movl	%r9d, 0x20(%rsp)
    00001c42: 	leal	0x4b0(%r14), %r9d
    00001c49: 	movl	%r9d, 0x28(%rsp)
    00001c4e: 	leaq	0x18(%rcx,%rax), %r9
    00001c53: 	leal	0x708(%r14), %eax
    00001c5a: 	movl	%eax, 0x30(%rsp)
    00001c5e: 	movl	%esi, %eax
    00001c60: 	imulq	$0x12c0, %rdx, %r8
    00001c67: 	leaq	(%rcx,%rdx,8), %r14
    00001c6b: 	subl	%edi, %eax
    00001c6d: 	movl	%eax, %esi
    00001c6f: 	movl	%eax, 0x38(%rsp)
    00001c73: 	shrl	%esi
    00001c75: 	addq	%r15, %r8
    00001c78: 	movl	%esi, 0x88(%rsp)
    00001c7f: 	movl	%eax, %esi
    00001c81: 	andl	$-0x2, %esi
    00001c84: 	addl	%esi, %r13d
    00001c87: 	cmpl	$0x1, %eax
    00001c8a: 	movl	%esi, 0x90(%rsp)
    00001c91: 	cmovel	%edi, %r13d
    00001c95: 	xorl	%edx, %edx
    00001c97: 	movslq	%r13d, %rax
    00001c9a: 	imull	$0x258, %r13d, %r13d
    00001ca1: 	leaq	(%rcx,%rax,8), %rdi
    00001ca5: 	nopl	(%rax) # Size: 3
.Ltmp1250:
    00001ca8: 	movq	0x48(%rsp), %rsi
    00001cad: 	movl	0x68(%rsp), %ecx
    00001cb1: 	movl	%edx, %eax
    00001cb3: 	movsd	(%rsi,%rdx,8), %xmm0
    00001cb8: 	cmpl	%ecx, 0x58(%rsp)
    00001cbc: 	jle	.Ltmp1245 # Offset: 7356
    00001cc2: 	movapd	%xmm0, %xmm3
    00001cc6: 	movq	0x80(%rsp), %rcx
    00001cce: 	movq	%rbp, %rsi
    00001cd1: 	xorl	%r12d, %r12d
    00001cd4: 	unpcklpd	%xmm3, %xmm3
    00001cd8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1246:
    00001ce0: 	movupd	(%rsi), %xmm2
    00001ce4: 	movupd	(%rcx), %xmm4
    00001ce8: 	addl	$0x1, %r12d
    00001cec: 	addq	$0x20, %rcx
    00001cf0: 	movupd	0x2580(%rsi), %xmm1
    00001cf8: 	movupd	-0x10(%rcx), %xmm5
    00001cfd: 	addq	$0x4b00, %rsi
    00001d04: 	movhpd	-0x3840(%rsi), %xmm2
    00001d0c: 	mulpd	%xmm3, %xmm2
    00001d10: 	movhpd	-0x12c0(%rsi), %xmm1
    00001d18: 	mulpd	%xmm3, %xmm1
    00001d1c: 	addpd	%xmm4, %xmm2
    00001d20: 	addpd	%xmm5, %xmm1
    00001d24: 	movups	%xmm2, -0x20(%rcx)
    00001d28: 	movups	%xmm1, -0x10(%rcx)
    00001d2c: 	cmpl	$0x2, %r12d
    00001d30: 	jbe	.Ltmp1246 # Offset: 7472
    00001d32: 	movl	0x10(%rsp), %esi
    00001d36: 	leal	(%rax,%rsi), %ecx
    00001d39: 	movl	0x20(%rsp), %esi
    00001d3d: 	movslq	%ecx, %rcx
    00001d40: 	movsd	(%r15,%rcx,8), %xmm1
    00001d46: 	leal	(%rax,%rsi), %ecx
    00001d49: 	movl	0x28(%rsp), %esi
    00001d4d: 	movslq	%ecx, %rcx
    00001d50: 	mulsd	%xmm0, %xmm1
    00001d54: 	addsd	(%rbx), %xmm1
    00001d58: 	movsd	%xmm1, (%rbx)
    00001d5c: 	movsd	(%r15,%rcx,8), %xmm1
    00001d62: 	leal	(%rax,%rsi), %ecx
    00001d65: 	movl	0x30(%rsp), %esi
    00001d69: 	movslq	%ecx, %rcx
    00001d6c: 	mulsd	%xmm0, %xmm1
    00001d70: 	addsd	(%r11), %xmm1
    00001d75: 	movsd	%xmm1, (%r11)
    00001d7a: 	movsd	(%r15,%rcx,8), %xmm1
    00001d80: 	leal	(%rax,%rsi), %ecx
    00001d83: 	movslq	%ecx, %rcx
    00001d86: 	mulsd	%xmm0, %xmm1
    00001d8a: 	addsd	(%r10), %xmm1
    00001d8f: 	movsd	%xmm1, (%r10)
    00001d94: 	movsd	(%r15,%rcx,8), %xmm1
    00001d9a: 	mulsd	%xmm0, %xmm1
    00001d9e: 	addsd	(%r9), %xmm1
    00001da3: 	movsd	%xmm1, (%r9)
.Ltmp1245:
    00001da8: 	movl	0x60(%rsp), %ecx
    00001dac: 	cmpl	%ecx, 0x40(%rsp)
    00001db0: 	jle	.Ltmp1247 # Offset: 7600
    00001db2: 	cmpl	$0x1, 0x38(%rsp)
    00001db7: 	je	.Ltmp1248 # Offset: 7607
    00001db9: 	movsd	(%r8), %xmm1
    00001dbe: 	movapd	%xmm0, %xmm2
    00001dc2: 	movupd	(%r14), %xmm5
    00001dc7: 	unpcklpd	%xmm2, %xmm2
    00001dcb: 	cmpl	$0x1, 0x88(%rsp)
    00001dd3: 	movhpd	0x12c0(%r8), %xmm1
    00001ddc: 	mulpd	%xmm2, %xmm1
    00001de0: 	addpd	%xmm5, %xmm1
    00001de4: 	movups	%xmm1, (%r14)
    00001de8: 	jbe	.Ltmp1249 # Offset: 7656
    00001dea: 	movsd	0x2580(%r8), %xmm1
    00001df3: 	movupd	0x10(%r14), %xmm4
    00001df9: 	movhpd	0x3840(%r8), %xmm1
    00001e02: 	mulpd	%xmm2, %xmm1
    00001e06: 	addpd	%xmm4, %xmm1
    00001e0a: 	movups	%xmm1, 0x10(%r14)
.Ltmp1249:
    00001e0f: 	movl	0x90(%rsp), %ecx
    00001e16: 	cmpl	%ecx, 0x38(%rsp)
    00001e1a: 	je	.Ltmp1247 # Offset: 7706
.Ltmp1248:
    00001e1c: 	addl	%r13d, %eax
    00001e1f: 	cltq
    00001e21: 	mulsd	(%r15,%rax,8), %xmm0
    00001e27: 	addsd	(%rdi), %xmm0
    00001e2b: 	movsd	%xmm0, (%rdi)
.Ltmp1247:
    00001e2f: 	addq	$0x1, %rdx
    00001e33: 	addq	$0x8, %r8
    00001e37: 	addq	$0x8, %rbp
    00001e3b: 	cmpq	$0x258, %rdx
    00001e42: 	jne	.Ltmp1250 # Offset: 7746
    00001e48: 	addq	$0x12c00, 0xb8(%rsp)
    00001e54: 	subq	$-0x80, 0x80(%rsp)
    00001e5d: 	cmpl	$0x320, 0x40(%rsp)
    00001e65: 	jne	.Ltmp1251 # Offset: 7781
    00001e6b: 	addl	$0x1, 0xa8(%rsp)
    00001e73: 	movl	0xa8(%rsp), %eax
    00001e7a: 	cmpl	%eax, 0xd0(%rsp)
    00001e81: 	jne	.Ltmp1252 # Offset: 7809
    00001e87: 	movq	%r15, %r12
    00001e8a: 	movq	0xb0(%rsp), %r14
    00001e92: 	movq	0x48(%rsp), %r15
.Ltmp1244:
    00001e97: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001e9e: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00001ea5: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001eac: 	je	.Ltmp1253 # Offset: 7852
.Ltmp1319:
    00001eb2: 	movq	-0x20(%rax), %rbp
    00001eb6: 	callq	clock@PLT # Offset: 7862
    00001ebb: 	pxor	%xmm0, %xmm0
    00001ebf: 	movq	%rax, end_time(%rip)
    00001ec6: 	movq	%rbp, %rdi
    00001ec9: 	subq	start_time(%rip), %rax
    00001ed0: 	cvtsi2sd	%rax, %xmm0
    00001ed5: 	divsd	DATAat0x24960(%rip), %xmm0
    00001edd: 	callq	_Z13record_resultdPKc # Offset: 7901
    00001ee2: 	movq	%r14, %rax
    00001ee5: 	pxor	%xmm0, %xmm0
.Ltmp1254:
    00001ee9: 	movsd	(%rax), %xmm1
    00001eed: 	addq	$0x10, %rax
    00001ef1: 	addsd	%xmm1, %xmm0
    00001ef5: 	movsd	-0x8(%rax), %xmm1
    00001efa: 	addsd	%xmm1, %xmm0
    00001efe: 	cmpq	0xc0(%rsp), %rax
    00001f06: 	jne	.Ltmp1254 # Offset: 7942
    00001f08: 	movq	0x50(%rsp), %rdi
    00001f0d: 	callq	_Z9check_sumIdEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7949
    00001f12: 	movq	0x100(%rsp), %rdi
    00001f1a: 	cmpq	(%rsp), %rdi
    00001f1e: 	je	.Ltmp1255 # Offset: 7966
    00001f20: 	movq	0x110(%rsp), %rax
    00001f28: 	leaq	0x1(%rax), %rsi
    00001f2c: 	callq	_ZdlPvm@PLT # Offset: 7980
.Ltmp1255:
    00001f31: 	movq	0x50(%rsp), %rbx
    00001f36: 	movq	0xa0(%rsp), %rsi
    00001f3e: 	leaq	DATAat0x24810(%rip), %rdx
    00001f45: 	movq	%rbx, %rdi
    00001f48: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8008
    00001f4d: 	movq	%rbx, %rsi
    00001f50: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00001f57: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 8023
    00001f5c: 	callq	clock@PLT # Offset: 8028
    00001f61: 	movl	iterations(%rip), %r8d
    00001f68: 	xorl	%esi, %esi
    00001f6a: 	movq	%rax, start_time(%rip)
    00001f71: 	leaq	0x1908(%r14), %rax
    00001f78: 	movq	%rax, 0x78(%rsp)
    00001f7d: 	leaq	0x8(%r14), %rax
    00001f81: 	movq	%rax, 0x70(%rsp)
    00001f86: 	xorl	%eax, %eax
    00001f88: 	testl	%r8d, %r8d
    00001f8b: 	jle	.Ltmp1256 # Offset: 8075
.Ltmp1259:
    00001f91: 	movq	%rax, (%r14)
    00001f94: 	movq	0x78(%rsp), %rbx
    00001f99: 	movq	%r14, %rcx
    00001f9c: 	movq	%rax, -0x10(%rbx)
    00001fa0: 	movq	0x70(%rsp), %rdi
    00001fa5: 	andq	$-0x8, %rdi
    00001fa9: 	subq	%rdi, %rcx
    00001fac: 	addl	$0x1900, %ecx
    00001fb2: 	shrl	$0x3, %ecx
    00001fb5: 	rep		stosq	%rax, %es:(%rdi)
    00001fb8: 	movq	%r12, %rcx
    00001fbb: 	movq	%r14, %rdi
.Ltmp1258:
    00001fbe: 	movq	(%rdi), %xmm1
    00001fc2: 	xorl	%edx, %edx
    00001fc4: 	pxor	%xmm2, %xmm2
    00001fc8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1257:
    00001fd0: 	movupd	(%r15,%rdx), %xmm4
    00001fd6: 	movupd	(%rcx,%rdx), %xmm0
    00001fdb: 	mulpd	%xmm4, %xmm0
    00001fdf: 	movupd	0x10(%r15,%rdx), %xmm4
    00001fe6: 	addpd	%xmm0, %xmm1
    00001fea: 	movupd	0x10(%rcx,%rdx), %xmm0
    00001ff0: 	addq	$0x20, %rdx
    00001ff4: 	mulpd	%xmm4, %xmm0
    00001ff8: 	addpd	%xmm0, %xmm2
    00001ffc: 	cmpq	$0x12c0, %rdx
    00002003: 	jne	.Ltmp1257 # Offset: 8195
    00002005: 	movapd	%xmm1, %xmm0
    00002009: 	unpckhpd	%xmm1, %xmm1
    0000200d: 	addq	$0x8, %rdi
    00002011: 	addq	$0x12c0, %rcx
    00002018: 	addsd	%xmm1, %xmm0
    0000201c: 	addsd	%xmm2, %xmm0
    00002020: 	unpckhpd	%xmm2, %xmm2
    00002024: 	addsd	%xmm0, %xmm2
    00002028: 	movsd	%xmm2, -0x8(%rdi)
    0000202d: 	cmpq	0x98(%rsp), %rcx
    00002035: 	jne	.Ltmp1258 # Offset: 8245
    00002037: 	addl	$0x1, %esi
    0000203a: 	cmpl	%r8d, %esi
    0000203d: 	jne	.Ltmp1259 # Offset: 8253
.Ltmp1256:
    00002043: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000204a: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00002051: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00002058: 	je	.Ltmp1260 # Offset: 8280
.Ltmp1318:
    0000205e: 	movq	-0x20(%rax), %rbp
    00002062: 	callq	clock@PLT # Offset: 8290
    00002067: 	pxor	%xmm0, %xmm0
    0000206b: 	movq	%rax, end_time(%rip)
    00002072: 	movq	%rbp, %rdi
    00002075: 	subq	start_time(%rip), %rax
    0000207c: 	cvtsi2sd	%rax, %xmm0
    00002081: 	divsd	DATAat0x24960(%rip), %xmm0
    00002089: 	callq	_Z13record_resultdPKc # Offset: 8329
    0000208e: 	movq	%r14, %rax
    00002091: 	pxor	%xmm0, %xmm0
.Ltmp1261:
    00002095: 	movsd	(%rax), %xmm1
    00002099: 	addq	$0x10, %rax
    0000209d: 	addsd	%xmm1, %xmm0
    000020a1: 	movsd	-0x8(%rax), %xmm1
    000020a6: 	addsd	%xmm1, %xmm0
    000020aa: 	cmpq	0xc0(%rsp), %rax
    000020b2: 	jne	.Ltmp1261 # Offset: 8370
    000020b4: 	movq	0x50(%rsp), %rdi
    000020b9: 	callq	_Z9check_sumIdEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 8377
    000020be: 	movq	0x100(%rsp), %rdi
    000020c6: 	cmpq	(%rsp), %rdi
    000020ca: 	je	.Ltmp1262 # Offset: 8394
    000020cc: 	movq	0x110(%rsp), %rax
    000020d4: 	leaq	0x1(%rax), %rsi
    000020d8: 	callq	_ZdlPvm@PLT # Offset: 8408
.Ltmp1262:
    000020dd: 	movq	0x50(%rsp), %rbx
    000020e2: 	movq	0xa0(%rsp), %rsi
    000020ea: 	leaq	DATAat0x24840(%rip), %rdx
    000020f1: 	movq	%rbx, %rdi
    000020f4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8436
    000020f9: 	movq	%rbx, %r9
    000020fc: 	movl	$0x258, %r8d
    00002102: 	movq	%r12, %rdx
    00002105: 	movq	%r14, %rsi
    00002108: 	movl	$0x320, %ecx
    0000210d: 	movq	%r15, %rdi
    00002110: 	callq	_Z14test_matvecmulId31matvecmul_JI_blocked_unrolled1AIdEEvPKT_PS2_S4_iiT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 8464
    00002115: 	movq	0x100(%rsp), %rdi
    0000211d: 	cmpq	(%rsp), %rdi
    00002121: 	je	.Ltmp1263 # Offset: 8481
    00002123: 	movq	0x110(%rsp), %rax
    0000212b: 	leaq	0x1(%rax), %rsi
    0000212f: 	callq	_ZdlPvm@PLT # Offset: 8495
.Ltmp1263:
    00002134: 	movq	0x50(%rsp), %rbx
    00002139: 	movq	0xa0(%rsp), %rsi
    00002141: 	leaq	DATAat0x24870(%rip), %rdx
    00002148: 	movq	%rbx, %rdi
    0000214b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8523
    00002150: 	movq	%rbx, %rsi
    00002153: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000215a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 8538
    0000215f: 	callq	clock@PLT # Offset: 8543
    00002164: 	leaq	0x1908(%r14), %rbx
    0000216b: 	movl	$0x0, 0x80(%rsp)
    00002176: 	movq	%rax, start_time(%rip)
    0000217d: 	movl	iterations(%rip), %eax
    00002183: 	movq	%rbx, 0x78(%rsp)
    00002188: 	leaq	0x8(%r14), %rbx
    0000218c: 	movl	%eax, 0x90(%rsp)
    00002193: 	movq	%rbx, 0x70(%rsp)
    00002198: 	testl	%eax, %eax
    0000219a: 	jle	.Ltmp1264 # Offset: 8602
    000021a0: 	movq	%r14, 0x88(%rsp)
    000021a8: 	movq	%r15, %r14
    000021ab: 	movq	%r12, %r15
.Ltmp1274:
    000021ae: 	movq	0x88(%rsp), %rbx
    000021b6: 	movq	$0x0, (%rbx)
    000021bd: 	movq	0x78(%rsp), %rax
    000021c2: 	movq	%rbx, %rcx
    000021c5: 	movq	$0x0, -0x10(%rax)
    000021cd: 	movq	0x70(%rsp), %rdi
    000021d2: 	xorl	%eax, %eax
    000021d4: 	andq	$-0x8, %rdi
    000021d8: 	subq	%rdi, %rcx
    000021db: 	addl	$0x1900, %ecx
    000021e1: 	shrl	$0x3, %ecx
    000021e4: 	rep		stosq	%rax, %es:(%rdi)
    000021e7: 	movq	%rbx, 0x60(%rsp)
    000021ec: 	movq	%r15, %rax
    000021ef: 	movq	$0x0, 0x68(%rsp)
    000021f8: 	movq	$0x0, 0x48(%rsp)
    00002201: 	movq	%r15, 0x58(%rsp)
    00002206: 	movq	%r14, %r15
    00002209: 	movq	%rax, %r14
.Ltmp1273:
    0000220c: 	movq	0x68(%rsp), %rbx
    00002211: 	movl	$0x320, %edx
    00002216: 	movl	%ebx, %eax
    00002218: 	addl	$0xc, %eax
    0000221b: 	cmpl	%edx, %eax
    0000221d: 	cmovgl	%edx, %eax
    00002220: 	cmpl	%ebx, %eax
    00002222: 	jle	.Ltmp1265 # Offset: 8738
    00002228: 	subl	%ebx, %eax
    0000222a: 	movq	%r15, %r13
    0000222d: 	xorl	%r12d, %r12d
    00002230: 	subl	$0x1, %eax
    00002233: 	addq	%rbx, %rax
    00002236: 	movq	0x70(%rsp), %rbx
    0000223b: 	leaq	(%rbx,%rax,8), %rax
    0000223f: 	movq	%rax, 0x30(%rsp)
    00002244: 	nopl	(%rax) # Size: 4
.Ltmp1272:
    00002248: 	movl	$0x258, %eax
    0000224d: 	leal	0x74(%r12), %edi
    00002252: 	movl	%r12d, 0x28(%rsp)
    00002257: 	movq	0x48(%rsp), %r10
    0000225c: 	cmpl	%eax, %edi
    0000225e: 	movl	%r12d, 0x20(%rsp)
    00002263: 	movq	0x58(%rsp), %r9
    00002268: 	cmovgl	%eax, %edi
    0000226b: 	movq	0x60(%rsp), %rsi
    00002270: 	leal	-0x3(%rdi), %eax
    00002273: 	movl	%eax, 0x10(%rsp)
    00002277: 	movl	$0xfffffffc, %eax
    0000227c: 	subl	%r12d, %eax
    0000227f: 	addl	%edi, %eax
    00002281: 	movl	%eax, %r11d
    00002284: 	andl	$-0x4, %eax
    00002287: 	leal	0x4(%rax,%r12), %eax
    0000228c: 	shrl	$0x2, %r11d
    00002290: 	movl	%eax, 0x38(%rsp)
    00002294: 	leaq	(,%r12,8), %rax
    0000229c: 	addl	$0x1, %r11d
    000022a0: 	movq	%rax, 0x40(%rsp)
    000022a5: 	nopl	(%rax) # Size: 3
.Ltmp1271:
    000022a8: 	movsd	(%rsi), %xmm0
    000022ac: 	movl	0x20(%rsp), %ebx
    000022b0: 	cmpl	%ebx, 0x10(%rsp)
    000022b4: 	jle	.Ltmp1266 # Offset: 8884
    000022ba: 	movq	0x40(%rsp), %rax
    000022bf: 	movq	%xmm0, %xmm2
    000022c3: 	xorl	%edx, %edx
    000022c5: 	pxor	%xmm1, %xmm1
    000022c9: 	leaq	(%r9,%rax), %rcx
    000022cd: 	xorl	%eax, %eax
    000022cf: 	nop # Size: 1
.Ltmp1267:
    000022d0: 	movupd	(%rcx,%rax), %xmm0
    000022d5: 	movupd	(%r13,%rax), %xmm7
    000022dc: 	addl	$0x1, %edx
    000022df: 	movupd	0x10(%r13,%rax), %xmm6
    000022e6: 	mulpd	%xmm7, %xmm0
    000022ea: 	addpd	%xmm0, %xmm2
    000022ee: 	movupd	0x10(%rcx,%rax), %xmm0
    000022f4: 	addq	$0x20, %rax
    000022f8: 	mulpd	%xmm6, %xmm0
    000022fc: 	addpd	%xmm0, %xmm1
    00002300: 	cmpl	%r11d, %edx
    00002303: 	jb	.Ltmp1267 # Offset: 8963
    00002305: 	movapd	%xmm2, %xmm0
    00002309: 	movapd	%xmm1, %xmm5
    0000230d: 	unpckhpd	%xmm2, %xmm2
    00002311: 	movl	0x38(%rsp), %eax
    00002315: 	unpckhpd	%xmm1, %xmm1
    00002319: 	movapd	%xmm2, %xmm4
    0000231d: 	movapd	%xmm1, %xmm3
.Ltmp1312:
    00002321: 	cmpl	%eax, %edi
    00002323: 	jle	.Ltmp1268 # Offset: 8995
    00002325: 	movl	%edi, %r8d
    00002328: 	subl	%eax, %r8d
    0000232b: 	cmpl	$0x1, %r8d
    0000232f: 	je	.Ltmp1269 # Offset: 9007
    00002331: 	movslq	%eax, %rdx
    00002334: 	leaq	(%rdx,%r10), %rcx
    00002338: 	leaq	(%r15,%rdx,8), %rbx
    0000233c: 	movl	%r8d, %edx
    0000233f: 	shrl	%edx
    00002341: 	leaq	(%r14,%rcx,8), %rbp
    00002345: 	xorl	%ecx, %ecx
    00002347: 	shlq	$0x4, %rdx
.Ltmp1270:
    0000234b: 	movupd	(%rbp,%rcx), %xmm2
    00002351: 	movupd	(%rbx,%rcx), %xmm7
    00002356: 	addq	$0x10, %rcx
    0000235a: 	mulpd	%xmm7, %xmm2
    0000235e: 	addsd	%xmm2, %xmm0
    00002362: 	unpckhpd	%xmm2, %xmm2
    00002366: 	addsd	%xmm2, %xmm0
    0000236a: 	cmpq	%rdx, %rcx
    0000236d: 	jne	.Ltmp1270 # Offset: 9069
    0000236f: 	movl	%r8d, %edx
    00002372: 	andl	$-0x2, %edx
    00002375: 	addl	%edx, %eax
    00002377: 	cmpl	%edx, %r8d
    0000237a: 	je	.Ltmp1268 # Offset: 9082
.Ltmp1269:
    0000237c: 	cltq
    0000237e: 	movsd	(%r9,%rax,8), %xmm1
    00002384: 	mulsd	(%r15,%rax,8), %xmm1
    0000238a: 	addsd	%xmm1, %xmm0
.Ltmp1268:
    0000238e: 	addsd	%xmm4, %xmm0
    00002392: 	addq	$0x8, %rsi
    00002396: 	addq	$0x12c0, %r9
    0000239d: 	addq	$0x258, %r10
    000023a4: 	addsd	%xmm5, %xmm0
    000023a8: 	addsd	%xmm3, %xmm0
    000023ac: 	movsd	%xmm0, -0x8(%rsi)
    000023b1: 	cmpq	%rsi, 0x30(%rsp)
    000023b6: 	jne	.Ltmp1271 # Offset: 9142
    000023bc: 	addq	$0x74, %r12
    000023c0: 	addq	$0x3a0, %r13
    000023c7: 	cmpq	$0x2b8, %r12
    000023ce: 	jne	.Ltmp1272 # Offset: 9166
.Ltmp1265:
    000023d4: 	addq	$0xc, 0x68(%rsp)
    000023da: 	movq	0x68(%rsp), %rax
    000023df: 	addq	$0x60, 0x60(%rsp)
    000023e5: 	addq	$0xe100, 0x58(%rsp)
    000023ee: 	addq	$0x1c20, 0x48(%rsp)
    000023f7: 	cmpq	$0x324, %rax
    000023fd: 	jne	.Ltmp1273 # Offset: 9213
    00002403: 	movq	%r14, %rax
    00002406: 	addl	$0x1, 0x80(%rsp)
    0000240e: 	movq	%r15, %r14
    00002411: 	movq	%rax, %r15
    00002414: 	movl	0x80(%rsp), %eax
    0000241b: 	cmpl	%eax, 0x90(%rsp)
    00002422: 	jne	.Ltmp1274 # Offset: 9250
    00002428: 	movq	%r15, %r12
    0000242b: 	movq	%r14, %r15
    0000242e: 	movq	0x88(%rsp), %r14
.Ltmp1264:
    00002436: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000243d: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00002444: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000244b: 	je	.Ltmp1275 # Offset: 9291
.Ltmp1317:
    00002451: 	movq	-0x20(%rax), %rbp
    00002455: 	callq	clock@PLT # Offset: 9301
    0000245a: 	pxor	%xmm0, %xmm0
    0000245e: 	movq	%rax, end_time(%rip)
    00002465: 	movq	%rbp, %rdi
    00002468: 	subq	start_time(%rip), %rax
    0000246f: 	cvtsi2sd	%rax, %xmm0
    00002474: 	divsd	DATAat0x24960(%rip), %xmm0
    0000247c: 	callq	_Z13record_resultdPKc # Offset: 9340
    00002481: 	movq	%r14, %rax
    00002484: 	pxor	%xmm0, %xmm0
.Ltmp1276:
    00002488: 	movsd	(%rax), %xmm1
    0000248c: 	addq	$0x10, %rax
    00002490: 	addsd	%xmm1, %xmm0
    00002494: 	movsd	-0x8(%rax), %xmm1
    00002499: 	addsd	%xmm1, %xmm0
    0000249d: 	cmpq	0xc0(%rsp), %rax
    000024a5: 	jne	.Ltmp1276 # Offset: 9381
    000024a7: 	movq	0x50(%rsp), %rdi
    000024ac: 	callq	_Z9check_sumIdEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9388
    000024b1: 	movq	0x100(%rsp), %rdi
    000024b9: 	cmpq	(%rsp), %rdi
    000024bd: 	je	.Ltmp1277 # Offset: 9405
    000024bf: 	movq	0x110(%rsp), %rax
    000024c7: 	leaq	0x1(%rax), %rsi
    000024cb: 	callq	_ZdlPvm@PLT # Offset: 9419
.Ltmp1277:
    000024d0: 	movq	0x50(%rsp), %rbx
    000024d5: 	movq	0xa0(%rsp), %rsi
    000024dd: 	leaq	DATAat0x248a0(%rip), %rdx
    000024e4: 	movq	%rbx, %rdi
    000024e7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9447
    000024ec: 	movq	%rbx, %rsi
    000024ef: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000024f6: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 9462
    000024fb: 	callq	clock@PLT # Offset: 9467
    00002500: 	leaq	0x1908(%r14), %rbx
    00002507: 	movl	$0x0, 0x88(%rsp)
    00002512: 	movq	%rax, start_time(%rip)
    00002519: 	movl	iterations(%rip), %eax
    0000251f: 	movq	%rbx, 0x78(%rsp)
    00002524: 	leaq	0x8(%r14), %rbx
    00002528: 	movl	%eax, 0xa8(%rsp)
    0000252f: 	movq	%rbx, 0x70(%rsp)
    00002534: 	testl	%eax, %eax
    00002536: 	jle	.Ltmp1278 # Offset: 9526
    0000253c: 	movq	%r14, 0x98(%rsp)
    00002544: 	movq	%r12, %r14
.Ltmp1288:
    00002547: 	movq	0x98(%rsp), %rbx
    0000254f: 	movq	$0x0, (%rbx)
    00002556: 	movq	0x78(%rsp), %rax
    0000255b: 	movq	%rbx, %rcx
    0000255e: 	movq	$0x0, -0x10(%rax)
    00002566: 	movq	0x70(%rsp), %rdi
    0000256b: 	xorl	%eax, %eax
    0000256d: 	andq	$-0x8, %rdi
    00002571: 	subq	%rdi, %rcx
    00002574: 	addl	$0x1900, %ecx
    0000257a: 	shrl	$0x3, %ecx
    0000257d: 	rep		stosq	%rax, %es:(%rdi)
    00002580: 	movq	%rbx, 0x68(%rsp)
    00002585: 	movq	$0x0, 0x80(%rsp)
    00002591: 	movq	$0x0, 0x60(%rsp)
    0000259a: 	movq	%r14, 0x90(%rsp)
    000025a2: 	movq	%r14, 0x30(%rsp)
    000025a7: 	movq	%r15, %r14
.Ltmp1287:
    000025aa: 	movq	0x80(%rsp), %rbx
    000025b2: 	movl	$0x320, %edx
    000025b7: 	movl	%ebx, %eax
    000025b9: 	addl	$0xc, %eax
    000025bc: 	cmpl	%edx, %eax
    000025be: 	cmovgl	%edx, %eax
    000025c1: 	cmpl	%ebx, %eax
    000025c3: 	jle	.Ltmp1279 # Offset: 9667
    000025c9: 	subl	%ebx, %eax
    000025cb: 	movq	%r14, %r15
    000025ce: 	xorl	%r13d, %r13d
    000025d1: 	subl	$0x1, %eax
    000025d4: 	addq	%rbx, %rax
    000025d7: 	movq	0x70(%rsp), %rbx
    000025dc: 	leaq	(%rbx,%rax,8), %rax
    000025e0: 	movq	%rax, 0x48(%rsp)
    000025e5: 	movq	0x90(%rsp), %rax
    000025ed: 	movq	%rax, 0x38(%rsp)
    000025f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1286:
    000025f8: 	movl	$0x258, %eax
    000025fd: 	leal	0x74(%r13), %edi
    00002601: 	movl	%r13d, 0x40(%rsp)
    00002606: 	movq	%r14, %r12
    00002609: 	cmpl	%eax, %edi
    0000260b: 	movl	%r13d, 0x28(%rsp)
    00002610: 	movq	0x60(%rsp), %r10
    00002615: 	cmovgl	%eax, %edi
    00002618: 	movq	0x38(%rsp), %r9
    0000261d: 	movq	0x68(%rsp), %rsi
    00002622: 	subq	%r15, %r12
    00002625: 	leal	-0x7(%rdi), %eax
    00002628: 	movl	%eax, 0x20(%rsp)
    0000262c: 	movl	$0xfffffff8, %eax
    00002631: 	subl	%r13d, %eax
    00002634: 	addl	%edi, %eax
    00002636: 	movl	%eax, %edx
    00002638: 	andl	$-0x8, %eax
    0000263b: 	leal	0x8(%rax,%r13), %eax
    00002640: 	shrl	$0x3, %edx
    00002643: 	movl	%eax, 0x58(%rsp)
    00002647: 	leal	0x1(%rdx), %eax
    0000264a: 	movl	%eax, 0x10(%rsp)
    0000264e: 	nop # Size: 2
.Ltmp1285:
    00002650: 	movsd	(%rsi), %xmm0
    00002654: 	movl	0x28(%rsp), %ebx
    00002658: 	leaq	(%r12,%r9), %rbp
    0000265c: 	cmpl	%ebx, 0x20(%rsp)
    00002660: 	jle	.Ltmp1280 # Offset: 9824
    00002666: 	pxor	%xmm3, %xmm3
    0000266a: 	movq	%xmm0, %xmm7
    0000266e: 	movq	%r15, %rdx
    00002671: 	movq	%r9, %rax
    00002674: 	xorl	%ecx, %ecx
    00002676: 	movapd	%xmm3, %xmm4
    0000267a: 	movapd	%xmm3, %xmm5
    0000267e: 	nop # Size: 2
.Ltmp1281:
    00002680: 	movupd	(%rdx), %xmm6
    00002684: 	movupd	(%rax), %xmm0
    00002688: 	addl	$0x1, %ecx
    0000268b: 	addq	$0x40, %rax
    0000268f: 	addq	$0x40, %rdx
    00002693: 	mulpd	%xmm6, %xmm0
    00002697: 	movupd	-0x30(%rdx), %xmm6
    0000269c: 	addpd	%xmm0, %xmm7
    000026a0: 	movupd	-0x30(%rax), %xmm0
    000026a5: 	mulpd	%xmm6, %xmm0
    000026a9: 	movupd	-0x20(%rdx), %xmm6
    000026ae: 	addpd	%xmm0, %xmm5
    000026b2: 	movupd	-0x20(%rax), %xmm0
    000026b7: 	mulpd	%xmm6, %xmm0
    000026bb: 	movupd	-0x10(%rdx), %xmm6
    000026c0: 	addpd	%xmm0, %xmm4
    000026c4: 	movupd	-0x10(%rax), %xmm0
    000026c9: 	mulpd	%xmm6, %xmm0
    000026cd: 	addpd	%xmm0, %xmm3
    000026d1: 	cmpl	%ecx, 0x10(%rsp)
    000026d5: 	ja	.Ltmp1281 # Offset: 9941
    000026d7: 	movl	0x58(%rsp), %eax
    000026db: 	movapd	%xmm7, %xmm0
    000026df: 	movapd	%xmm3, %xmm6
    000026e3: 	unpckhpd	%xmm7, %xmm7
    000026e7: 	movapd	%xmm5, %xmm9
    000026ec: 	movapd	%xmm4, %xmm8
    000026f1: 	unpckhpd	%xmm5, %xmm5
    000026f5: 	unpckhpd	%xmm4, %xmm4
    000026f9: 	unpckhpd	%xmm3, %xmm3
.Ltmp1313:
    000026fd: 	cmpl	%eax, %edi
    000026ff: 	jle	.Ltmp1282 # Offset: 9983
    00002701: 	movl	%edi, %r8d
    00002704: 	subl	%eax, %r8d
    00002707: 	cmpl	$0x1, %r8d
    0000270b: 	je	.Ltmp1283 # Offset: 9995
    0000270d: 	movslq	%eax, %rdx
    00002710: 	movq	0x30(%rsp), %rbx
    00002715: 	leaq	(%rdx,%r10), %rcx
    00002719: 	leaq	(%r14,%rdx,8), %r11
    0000271d: 	movl	%r8d, %edx
    00002720: 	shrl	%edx
    00002722: 	leaq	(%rbx,%rcx,8), %rbx
    00002726: 	xorl	%ecx, %ecx
    00002728: 	shlq	$0x4, %rdx
.Ltmp1284:
    0000272c: 	movupd	(%r11,%rcx), %xmm2
    00002732: 	movupd	(%rbx,%rcx), %xmm1
    00002737: 	addq	$0x10, %rcx
    0000273b: 	mulpd	%xmm1, %xmm2
    0000273f: 	addsd	%xmm2, %xmm0
    00002743: 	unpckhpd	%xmm2, %xmm2
    00002747: 	addsd	%xmm2, %xmm0
    0000274b: 	cmpq	%rdx, %rcx
    0000274e: 	jne	.Ltmp1284 # Offset: 10062
    00002750: 	movl	%r8d, %edx
    00002753: 	andl	$-0x2, %edx
    00002756: 	addl	%edx, %eax
    00002758: 	cmpl	%r8d, %edx
    0000275b: 	je	.Ltmp1282 # Offset: 10075
.Ltmp1283:
    0000275d: 	cltq
    0000275f: 	movsd	(%r14,%rax,8), %xmm1
    00002765: 	mulsd	(%rbp,%rax,8), %xmm1
    0000276b: 	addsd	%xmm1, %xmm0
.Ltmp1282:
    0000276f: 	addsd	%xmm7, %xmm0
    00002773: 	addq	$0x8, %rsi
    00002777: 	addq	$0x12c0, %r9
    0000277e: 	addq	$0x258, %r10
    00002785: 	addsd	%xmm9, %xmm0
    0000278a: 	addsd	%xmm5, %xmm0
    0000278e: 	addsd	%xmm8, %xmm0
    00002793: 	addsd	%xmm4, %xmm0
    00002797: 	addsd	%xmm6, %xmm0
    0000279b: 	addsd	%xmm3, %xmm0
    0000279f: 	movsd	%xmm0, -0x8(%rsi)
    000027a4: 	cmpq	%rsi, 0x48(%rsp)
    000027a9: 	jne	.Ltmp1285 # Offset: 10153
    000027af: 	addq	$0x74, %r13
    000027b3: 	addq	$0x3a0, %r15
    000027ba: 	addq	$0x3a0, 0x38(%rsp)
    000027c3: 	cmpq	$0x2b8, %r13
    000027ca: 	jne	.Ltmp1286 # Offset: 10186
.Ltmp1279:
    000027d0: 	addq	$0xc, 0x80(%rsp)
    000027d9: 	movq	0x80(%rsp), %rax
    000027e1: 	addq	$0x60, 0x68(%rsp)
    000027e7: 	addq	$0x1c20, 0x60(%rsp)
    000027f0: 	addq	$0xe100, 0x90(%rsp)
    000027fc: 	cmpq	$0x324, %rax
    00002802: 	jne	.Ltmp1287 # Offset: 10242
    00002808: 	addl	$0x1, 0x88(%rsp)
    00002810: 	movq	%r14, %r15
    00002813: 	movl	0x88(%rsp), %eax
    0000281a: 	movq	0x30(%rsp), %r14
    0000281f: 	cmpl	%eax, 0xa8(%rsp)
    00002826: 	jne	.Ltmp1288 # Offset: 10278
    0000282c: 	movq	%r14, %r12
    0000282f: 	movq	0x98(%rsp), %r14
.Ltmp1278:
    00002837: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000283e: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00002845: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000284c: 	je	.Ltmp1289 # Offset: 10316
.Ltmp1316:
    00002852: 	movq	-0x20(%rax), %rbp
    00002856: 	callq	clock@PLT # Offset: 10326
    0000285b: 	pxor	%xmm0, %xmm0
    0000285f: 	movq	%rax, end_time(%rip)
    00002866: 	movq	%rbp, %rdi
    00002869: 	subq	start_time(%rip), %rax
    00002870: 	cvtsi2sd	%rax, %xmm0
    00002875: 	divsd	DATAat0x24960(%rip), %xmm0
    0000287d: 	callq	_Z13record_resultdPKc # Offset: 10365
    00002882: 	movq	%r14, %rax
    00002885: 	pxor	%xmm0, %xmm0
.Ltmp1290:
    00002889: 	movsd	(%rax), %xmm1
    0000288d: 	addq	$0x10, %rax
    00002891: 	addsd	%xmm1, %xmm0
    00002895: 	movsd	-0x8(%rax), %xmm1
    0000289a: 	addsd	%xmm1, %xmm0
    0000289e: 	cmpq	0xc0(%rsp), %rax
    000028a6: 	jne	.Ltmp1290 # Offset: 10406
    000028a8: 	movq	0x50(%rsp), %rdi
    000028ad: 	callq	_Z9check_sumIdEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 10413
    000028b2: 	movq	0x100(%rsp), %rdi
    000028ba: 	cmpq	(%rsp), %rdi
    000028be: 	je	.Ltmp1291 # Offset: 10430
    000028c0: 	movq	0x110(%rsp), %rax
    000028c8: 	leaq	0x1(%rax), %rsi
    000028cc: 	callq	_ZdlPvm@PLT # Offset: 10444
.Ltmp1291:
    000028d1: 	movq	0x50(%rsp), %rbx
    000028d6: 	movq	0xa0(%rsp), %rsi
    000028de: 	leaq	DATAat0x248d0(%rip), %rdx
    000028e5: 	movq	%rbx, %rdi
    000028e8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10472
    000028ed: 	movq	%rbx, %rsi
    000028f0: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000028f7: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 10487
    000028fc: 	callq	clock@PLT # Offset: 10492
    00002901: 	leaq	0x1908(%r14), %rbx
    00002908: 	movl	$0x0, 0xd0(%rsp)
    00002913: 	movq	%rax, start_time(%rip)
    0000291a: 	movl	iterations(%rip), %eax
    00002920: 	movq	%rbx, 0x78(%rsp)
    00002925: 	leaq	0x8(%r14), %rbx
    00002929: 	movl	%eax, 0xd4(%rsp)
    00002930: 	movq	%rbx, 0x70(%rsp)
    00002935: 	testl	%eax, %eax
    00002937: 	jle	.Ltmp1292 # Offset: 10551
    0000293d: 	movq	%r15, 0xa8(%rsp)
    00002945: 	movq	%r12, %r15
.Ltmp1302:
    00002948: 	movq	$0x0, (%r14)
    0000294f: 	movq	0x78(%rsp), %rax
    00002954: 	movq	%r14, %rcx
    00002957: 	movq	%r14, %r13
    0000295a: 	movq	%r15, %r14
    0000295d: 	movq	$0x0, -0x10(%rax)
    00002965: 	movq	0x70(%rsp), %rdi
    0000296a: 	xorl	%eax, %eax
    0000296c: 	andq	$-0x8, %rdi
    00002970: 	subq	%rdi, %rcx
    00002973: 	addl	$0x1900, %ecx
    00002979: 	shrl	$0x3, %ecx
    0000297c: 	rep		stosq	%rax, %es:(%rdi)
    0000297f: 	movq	$0x0, 0xb8(%rsp)
.Ltmp1301:
    0000298b: 	movq	0xb8(%rsp), %rax
    00002993: 	movl	%eax, %ebx
    00002995: 	addl	$0x12c, %ebx
    0000299b: 	movl	%ebx, 0xb0(%rsp)
    000029a2: 	cmpl	%eax, %ebx
    000029a4: 	jle	.Ltmp1293 # Offset: 10660
    000029aa: 	leaq	(%r14,%rax,8), %rax
    000029ae: 	movq	%r13, 0x10(%rsp)
    000029b3: 	xorl	%r15d, %r15d
    000029b6: 	movq	%rax, 0x90(%rsp)
    000029be: 	nop # Size: 2
.Ltmp1300:
    000029c0: 	movl	%r15d, %r12d
    000029c3: 	addl	$0x10, %r15d
    000029c7: 	movq	0xb8(%rsp), %rdi
    000029cf: 	movq	%r13, 0x98(%rsp)
    000029d7: 	leal	0xd(%r12), %eax
    000029dc: 	movl	%r15d, %ebp
    000029df: 	leal	0xc(%r12), %r8d
    000029e4: 	movl	%r15d, %r11d
    000029e7: 	cmpl	%r12d, %eax
    000029ea: 	movl	%eax, 0x68(%rsp)
    000029ee: 	cmovlel	%r12d, %ebp
    000029f2: 	movslq	%ebp, %rax
    000029f5: 	subl	%ebp, %r11d
    000029f8: 	imulq	$0x258, %rax, %rdx
    000029ff: 	leaq	(%r13,%rax,8), %r10
    00002a04: 	movl	%r11d, %eax
    00002a07: 	andl	$-0x2, %eax
    00002a0a: 	movl	%eax, 0x80(%rsp)
    00002a11: 	addl	%ebp, %eax
    00002a13: 	addq	%rdi, %rdx
    00002a16: 	leaq	(%r14,%rdx,8), %rsi
    00002a1a: 	movslq	%r8d, %rdx
    00002a1d: 	shlq	$0x3, %rdx
    00002a21: 	imull	$0x258, %r8d, %r8d
    00002a28: 	leaq	(%r13,%rdx), %rbx
    00002a2d: 	leaq	0x18(%r13,%rdx), %rcx
    00002a32: 	movq	%rbx, 0x48(%rsp)
    00002a37: 	leaq	0x8(%r13,%rdx), %rbx
    00002a3c: 	movq	%rbx, 0x28(%rsp)
    00002a41: 	leal	0x258(%r8), %ebx
    00002a48: 	movl	%ebx, 0x30(%rsp)
    00002a4c: 	leaq	0x10(%r13,%rdx), %rbx
    00002a51: 	movq	%rbx, 0x38(%rsp)
    00002a56: 	leal	0x4b0(%r8), %ebx
    00002a5d: 	movl	%ebx, 0x40(%rsp)
    00002a61: 	leal	0x708(%r8), %ebx
    00002a68: 	movl	%ebx, 0x20(%rsp)
    00002a6c: 	movl	%r11d, %ebx
    00002a6f: 	shrl	%ebx
    00002a71: 	cmpl	$0x1, %r11d
    00002a75: 	cmovel	%ebp, %eax
    00002a78: 	movl	%ebx, 0x88(%rsp)
    00002a7f: 	movslq	%eax, %rdx
    00002a82: 	imull	$0x258, %eax, %eax
    00002a88: 	leaq	(%r13,%rdx,8), %rbx
    00002a8d: 	movq	%rcx, %r13
    00002a90: 	movq	%rbx, 0x58(%rsp)
    00002a95: 	movq	0x90(%rsp), %rbx
    00002a9d: 	movl	%eax, 0x60(%rsp)
    00002aa1: 	nopl	(%rax) # Size: 7
.Ltmp1299:
    00002aa8: 	movq	0xa8(%rsp), %rcx
    00002ab0: 	movl	%edi, %eax
    00002ab2: 	movsd	(%rcx,%rdi,8), %xmm0
    00002ab7: 	cmpl	%r12d, 0x68(%rsp)
    00002abc: 	jle	.Ltmp1294 # Offset: 10940
    00002ac2: 	movapd	%xmm0, %xmm3
    00002ac6: 	movq	0x10(%rsp), %rdx
    00002acb: 	movq	%rbx, %rcx
    00002ace: 	xorl	%r9d, %r9d
    00002ad1: 	unpcklpd	%xmm3, %xmm3
    00002ad5: 	nopl	(%rax) # Size: 3
.Ltmp1295:
    00002ad8: 	movupd	0x2580(%rcx), %xmm1
    00002ae0: 	movupd	(%rcx), %xmm2
    00002ae4: 	addl	$0x1, %r9d
    00002ae8: 	addq	$0x20, %rdx
    00002aec: 	movupd	-0x10(%rdx), %xmm6
    00002af1: 	addq	$0x4b00, %rcx
    00002af8: 	movhpd	-0x12c0(%rcx), %xmm1
    00002b00: 	movhpd	-0x3840(%rcx), %xmm2
    00002b08: 	mulpd	%xmm3, %xmm1
    00002b0c: 	mulpd	%xmm3, %xmm2
    00002b10: 	addpd	%xmm6, %xmm1
    00002b14: 	movupd	-0x20(%rdx), %xmm6
    00002b19: 	addpd	%xmm6, %xmm2
    00002b1d: 	movups	%xmm1, -0x10(%rdx)
    00002b21: 	movups	%xmm2, -0x20(%rdx)
    00002b25: 	cmpl	$0x2, %r9d
    00002b29: 	jbe	.Ltmp1295 # Offset: 11049
    00002b2b: 	leal	(%r8,%rax), %edx
    00002b2f: 	movq	0x48(%rsp), %rcx
    00002b34: 	movslq	%edx, %rdx
    00002b37: 	movsd	(%r14,%rdx,8), %xmm1
    00002b3d: 	mulsd	%xmm0, %xmm1
    00002b41: 	addsd	(%rcx), %xmm1
    00002b45: 	movsd	%xmm1, (%rcx)
    00002b49: 	movl	0x30(%rsp), %ecx
    00002b4d: 	leal	(%rcx,%rax), %edx
    00002b50: 	movq	0x28(%rsp), %rcx
    00002b55: 	movslq	%edx, %rdx
    00002b58: 	movsd	(%r14,%rdx,8), %xmm1
    00002b5e: 	mulsd	%xmm0, %xmm1
    00002b62: 	addsd	(%rcx), %xmm1
    00002b66: 	movsd	%xmm1, (%rcx)
    00002b6a: 	movl	0x40(%rsp), %ecx
    00002b6e: 	leal	(%rcx,%rax), %edx
    00002b71: 	movq	0x38(%rsp), %rcx
    00002b76: 	movslq	%edx, %rdx
    00002b79: 	movsd	(%r14,%rdx,8), %xmm1
    00002b7f: 	mulsd	%xmm0, %xmm1
    00002b83: 	addsd	(%rcx), %xmm1
    00002b87: 	movsd	%xmm1, (%rcx)
    00002b8b: 	movl	0x20(%rsp), %ecx
    00002b8f: 	leal	(%rcx,%rax), %edx
    00002b92: 	movslq	%edx, %rdx
    00002b95: 	movsd	(%r14,%rdx,8), %xmm1
    00002b9b: 	mulsd	%xmm0, %xmm1
    00002b9f: 	addsd	(%r13), %xmm1
    00002ba5: 	movsd	%xmm1, (%r13)
.Ltmp1294:
    00002bab: 	cmpl	%r15d, %ebp
    00002bae: 	jge	.Ltmp1296 # Offset: 11182
    00002bb0: 	cmpl	$0x1, %r11d
    00002bb4: 	je	.Ltmp1297 # Offset: 11188
    00002bb6: 	movsd	(%rsi), %xmm1
    00002bba: 	movapd	%xmm0, %xmm2
    00002bbe: 	movupd	(%r10), %xmm4
    00002bc3: 	unpcklpd	%xmm2, %xmm2
    00002bc7: 	cmpl	$0x1, 0x88(%rsp)
    00002bcf: 	movhpd	0x12c0(%rsi), %xmm1
    00002bd7: 	mulpd	%xmm2, %xmm1
    00002bdb: 	addpd	%xmm4, %xmm1
    00002bdf: 	movups	%xmm1, (%r10)
    00002be3: 	jbe	.Ltmp1298 # Offset: 11235
    00002be5: 	movsd	0x2580(%rsi), %xmm1
    00002bed: 	movupd	0x10(%r10), %xmm6
    00002bf3: 	movhpd	0x3840(%rsi), %xmm1
    00002bfb: 	mulpd	%xmm2, %xmm1
    00002bff: 	addpd	%xmm6, %xmm1
    00002c03: 	movups	%xmm1, 0x10(%r10)
.Ltmp1298:
    00002c08: 	cmpl	0x80(%rsp), %r11d
    00002c10: 	je	.Ltmp1296 # Offset: 11280
.Ltmp1297:
    00002c12: 	addl	0x60(%rsp), %eax
    00002c16: 	cltq
    00002c18: 	mulsd	(%r14,%rax,8), %xmm0
    00002c1e: 	movq	0x58(%rsp), %rax
    00002c23: 	addsd	(%rax), %xmm0
    00002c27: 	movsd	%xmm0, (%rax)
.Ltmp1296:
    00002c2b: 	addq	$0x1, %rdi
    00002c2f: 	addq	$0x8, %rsi
    00002c33: 	addq	$0x8, %rbx
    00002c37: 	cmpl	%edi, 0xb0(%rsp)
    00002c3e: 	jg	.Ltmp1299 # Offset: 11326
    00002c44: 	subq	$-0x80, 0x10(%rsp)
    00002c4a: 	movq	0x98(%rsp), %r13
    00002c52: 	addq	$0x12c00, 0x90(%rsp)
    00002c5e: 	cmpl	$0x320, %r15d
    00002c65: 	jne	.Ltmp1300 # Offset: 11365
.Ltmp1293:
    00002c6b: 	addq	$0x12c, 0xb8(%rsp)
    00002c77: 	movq	0xb8(%rsp), %rax
    00002c7f: 	cmpq	$0x258, %rax
    00002c85: 	jne	.Ltmp1301 # Offset: 11397
    00002c8b: 	addl	$0x1, 0xd0(%rsp)
    00002c93: 	movq	%r14, %r15
    00002c96: 	movl	0xd0(%rsp), %eax
    00002c9d: 	movq	%r13, %r14
    00002ca0: 	cmpl	%eax, 0xd4(%rsp)
    00002ca7: 	jne	.Ltmp1302 # Offset: 11431
    00002cad: 	movq	%r15, %r12
    00002cb0: 	movq	0xa8(%rsp), %r15
.Ltmp1292:
    00002cb8: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002cbf: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00002cc6: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00002ccd: 	je	.Ltmp1303 # Offset: 11469
.Ltmp1315:
    00002cd3: 	movq	-0x20(%rax), %rbp
    00002cd7: 	callq	clock@PLT # Offset: 11479
    00002cdc: 	pxor	%xmm0, %xmm0
    00002ce0: 	movq	%rax, end_time(%rip)
    00002ce7: 	movq	%rbp, %rdi
    00002cea: 	subq	start_time(%rip), %rax
    00002cf1: 	cvtsi2sd	%rax, %xmm0
    00002cf6: 	divsd	DATAat0x24960(%rip), %xmm0
    00002cfe: 	callq	_Z13record_resultdPKc # Offset: 11518
    00002d03: 	movq	0xd8(%rsp), %rax
    00002d0b: 	pxor	%xmm0, %xmm0
.Ltmp1304:
    00002d0f: 	movsd	(%rax), %xmm1
    00002d13: 	addq	$0x10, %rax
    00002d17: 	addsd	%xmm1, %xmm0
    00002d1b: 	movsd	-0x8(%rax), %xmm1
    00002d20: 	addsd	%xmm1, %xmm0
    00002d24: 	cmpq	0xc0(%rsp), %rax
    00002d2c: 	jne	.Ltmp1304 # Offset: 11564
    00002d2e: 	movq	0x50(%rsp), %rdi
    00002d33: 	callq	_Z9check_sumIdEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 11571
    00002d38: 	movq	0x100(%rsp), %rdi
    00002d40: 	cmpq	(%rsp), %rdi
    00002d44: 	je	.Ltmp1305 # Offset: 11588
    00002d46: 	movq	0x110(%rsp), %rax
    00002d4e: 	leaq	0x1(%rax), %rsi
    00002d52: 	callq	_ZdlPvm@PLT # Offset: 11602
.Ltmp1305:
    00002d57: 	movq	0xa0(%rsp), %rsi
    00002d5f: 	movq	0x50(%rsp), %rdi
    00002d64: 	leaq	DATAat0x245d4(%rip), %rdx
    00002d6b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11627
    00002d70: 	movl	iterations(%rip), %edx
    00002d76: 	xorl	%r8d, %r8d
    00002d79: 	xorl	%ecx, %ecx
    00002d7b: 	movl	$0x75300, %esi
    00002d80: 	movq	0x100(%rsp), %rdi
    00002d88: 	callq	_Z9summarizePKciiii # Offset: 11656
    00002d8d: 	movq	0x100(%rsp), %rdi
    00002d95: 	cmpq	(%rsp), %rdi
    00002d99: 	je	.Ltmp1306 # Offset: 11673
    00002d9b: 	movq	0x110(%rsp), %rax
    00002da3: 	leaq	0x1(%rax), %rsi
    00002da7: 	callq	_ZdlPvm@PLT # Offset: 11687
.Ltmp1306:
    00002dac: 	movl	$0x8, %esi
    00002db1: 	movq	%r12, %rdi
    00002db4: 	callq	_ZdlPvm@PLT # Offset: 11700
    00002db9: 	movl	$0x8, %esi
    00002dbe: 	movq	%r14, %rdi
    00002dc1: 	callq	_ZdlPvm@PLT # Offset: 11713
    00002dc6: 	movq	%r15, %rdi
    00002dc9: 	movl	$0x8, %esi
    00002dce: 	callq	_ZdlPvm@PLT # Offset: 11726
    00002dd3: 	movq	0xe0(%rsp), %rdi
    00002ddb: 	cmpq	0xc8(%rsp), %rdi
    00002de3: 	je	.Ltmp1307 # Offset: 11747
    00002de5: 	movq	0xf0(%rsp), %rax
    00002ded: 	leaq	0x1(%rax), %rsi
    00002df1: 	callq	_ZdlPvm@PLT # Offset: 11761
.Ltmp1307:
    00002df6: 	movq	0x128(%rsp), %rax
    00002dfe: 	subq	%fs:0x28, %rax
    00002e07: 	jne	.Ltmp1308 # Offset: 11783
    00002e0d: 	addq	$0x138, %rsp
    00002e14: 	popq	%rbx
    00002e15: 	popq	%rbp
    00002e16: 	popq	%r12
    00002e18: 	popq	%r13
    00002e1a: 	popq	%r14
    00002e1c: 	popq	%r15
    00002e1e: 	retq # Offset: 11806
.Ltmp1310:
    00002e1f: 	addq	$0x20, %rbx
.Ltmp1144:
    00002e23: 	cmpq	%rbx, %r13
    00002e26: 	je	.Ltmp1309 # Offset: 11814
.Ltmp1311:
    00002e2c: 	movq	(%rbx), %rdi
    00002e2f: 	leaq	0x10(%rbx), %rax
    00002e33: 	cmpq	%rax, %rdi
    00002e36: 	je	.Ltmp1310 # Offset: 11830
    00002e38: 	movq	0x10(%rbx), %rax
    00002e3c: 	addq	$0x20, %rbx
    00002e40: 	leaq	0x1(%rax), %rsi
    00002e44: 	callq	_ZdlPvm@PLT # Offset: 11844
    00002e49: 	cmpq	%rbx, %r13
    00002e4c: 	jne	.Ltmp1311 # Offset: 11852
    00002e4e: 	jmp	.Ltmp1309 # Offset: 11854
    00002e53: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1266:
    00002e58: 	pxor	%xmm3, %xmm3
    00002e5c: 	movl	0x28(%rsp), %eax
    00002e60: 	movapd	%xmm3, %xmm5
    00002e64: 	movapd	%xmm3, %xmm4
    00002e68: 	jmp	.Ltmp1312 # Offset: 11880
    00002e6d: 	nopl	(%rax) # Size: 3
.Ltmp1280:
    00002e70: 	pxor	%xmm3, %xmm3
    00002e74: 	movl	0x40(%rsp), %eax
    00002e78: 	movapd	%xmm3, %xmm6
    00002e7c: 	movapd	%xmm3, %xmm4
    00002e80: 	movapd	%xmm3, %xmm8
    00002e85: 	movapd	%xmm3, %xmm5
    00002e89: 	movapd	%xmm3, %xmm9
    00002e8e: 	movapd	%xmm3, %xmm7
    00002e92: 	jmp	.Ltmp1313 # Offset: 11922
.Ltmp1161:
    00002e97: 	movq	-0x8(%rdx), %rax
    00002e9b: 	addq	$0x200, %rax
    00002ea1: 	jmp	.Ltmp1314 # Offset: 11937
.Ltmp1303:
    00002ea6: 	movq	-0x8(%rdx), %rax
    00002eaa: 	addq	$0x200, %rax
    00002eb0: 	jmp	.Ltmp1315 # Offset: 11952
.Ltmp1289:
    00002eb5: 	movq	-0x8(%rdx), %rax
    00002eb9: 	addq	$0x200, %rax
    00002ebf: 	jmp	.Ltmp1316 # Offset: 11967
.Ltmp1275:
    00002ec4: 	movq	-0x8(%rdx), %rax
    00002ec8: 	addq	$0x200, %rax
    00002ece: 	jmp	.Ltmp1317 # Offset: 11982
.Ltmp1260:
    00002ed3: 	movq	-0x8(%rdx), %rax
    00002ed7: 	addq	$0x200, %rax
    00002edd: 	jmp	.Ltmp1318 # Offset: 11997
.Ltmp1253:
    00002ee2: 	movq	-0x8(%rdx), %rax
    00002ee6: 	addq	$0x200, %rax
    00002eec: 	jmp	.Ltmp1319 # Offset: 12012
.Ltmp1238:
    00002ef1: 	leaq	DATAat0x2455f(%rip), %rsi
    00002ef8: 	movl	$0x1, %edi
    00002efd: 	xorl	%eax, %eax
    00002eff: 	callq	__printf_chk@PLT # Offset: 12031
    00002f04: 	movq	0x100(%rsp), %rdx
    00002f0c: 	jmp	.Ltmp1320 # Offset: 12044
.Ltmp1235:
    00002f11: 	movq	-0x8(%rdx), %rax
    00002f15: 	addq	$0x200, %rax
    00002f1b: 	jmp	.Ltmp1321 # Offset: 12059
.Ltmp1228:
    00002f20: 	movq	-0x8(%rdx), %rax
    00002f24: 	addq	$0x200, %rax
    00002f2a: 	jmp	.Ltmp1322 # Offset: 12074
.Ltmp1221:
    00002f2f: 	movq	-0x8(%rdx), %rax
    00002f33: 	addq	$0x200, %rax
    00002f39: 	jmp	.Ltmp1323 # Offset: 12089
.Ltmp1214:
    00002f3e: 	movq	-0x8(%rdx), %rax
    00002f42: 	addq	$0x200, %rax
    00002f48: 	jmp	.Ltmp1324 # Offset: 12104
.Ltmp1207:
    00002f4d: 	leaq	DATAat0x2455f(%rip), %rsi
    00002f54: 	movl	$0x1, %edi
    00002f59: 	xorl	%eax, %eax
    00002f5b: 	callq	__printf_chk@PLT # Offset: 12123
    00002f60: 	movq	0x100(%rsp), %rdx
    00002f68: 	jmp	.Ltmp1325 # Offset: 12136
.Ltmp1204:
    00002f6d: 	movq	-0x8(%rdx), %rax
    00002f71: 	addq	$0x200, %rax
    00002f77: 	jmp	.Ltmp1326 # Offset: 12151
.Ltmp1197:
    00002f7c: 	movq	-0x8(%rdx), %rax
    00002f80: 	addq	$0x200, %rax
    00002f86: 	jmp	.Ltmp1327 # Offset: 12166
.Ltmp1188:
    00002f8b: 	leaq	DATAat0x2455f(%rip), %rsi
    00002f92: 	movl	$0x1, %edi
    00002f97: 	xorl	%eax, %eax
    00002f99: 	callq	__printf_chk@PLT # Offset: 12185
    00002f9e: 	movq	0x100(%rsp), %rdx
    00002fa6: 	jmp	.Ltmp1328 # Offset: 12198
.Ltmp1185:
    00002fab: 	movq	-0x8(%rdx), %rax
    00002faf: 	addq	$0x200, %rax
    00002fb5: 	jmp	.Ltmp1329 # Offset: 12213
.Ltmp1178:
    00002fba: 	movq	-0x8(%rdx), %rax
    00002fbe: 	addq	$0x200, %rax
    00002fc4: 	jmp	.Ltmp1330 # Offset: 12228
.Ltmp1171:
    00002fc9: 	movq	-0x8(%rdx), %rax
    00002fcd: 	addq	$0x200, %rax
    00002fd3: 	jmp	.Ltmp1331 # Offset: 12243
.Ltmp1308:
    00002fd8: 	callq	__stack_chk_fail@PLT # Offset: 12248
    00002fdd: 	endbr64
.Ltmp1333:
    00002fe1: 	movq	%rax, %rbx
    00002fe4: 	jmp	.Ltmp1332 # Offset: 12260
    00002fe6: 	endbr64
    00002fea: 	jmp	.Ltmp1333 # Offset: 12266
    00002fec: 	endbr64
    00002ff0: 	jmp	.Ltmp1333 # Offset: 12272
    00002ff2: 	endbr64
    00002ff6: 	jmp	.Ltmp1333 # Offset: 12278
    00002ff8: 	endbr64
    00002ffc: 	jmp	.Ltmp1333 # Offset: 12284
    00002ffe: 	endbr64
    00003002: 	jmp	.Ltmp1333 # Offset: 12290
    00003004: 	endbr64
    00003008: 	jmp	.Ltmp1333 # Offset: 12296
    0000300a: 	endbr64
    0000300e: 	jmp	.Ltmp1333 # Offset: 12302
    00003010: 	endbr64
    00003014: 	jmp	.Ltmp1333 # Offset: 12308
    00003016: 	endbr64
    0000301a: 	jmp	.Ltmp1333 # Offset: 12314
.Ltmp1332:
    0000301c: 	movq	0x100(%rsp), %rdi
    00003024: 	cmpq	(%rsp), %rdi
    00003028: 	je	.Ltmp1334 # Offset: 12328
.Ltmp1338:
    0000302a: 	movq	0x110(%rsp), %rax
    00003032: 	leaq	0x1(%rax), %rsi
    00003036: 	callq	_ZdlPvm@PLT # Offset: 12342
.Ltmp1334:
    0000303b: 	movl	$0x8, %esi
    00003040: 	movq	%r12, %rdi
    00003043: 	movq	%rbx, %rbp
    00003046: 	callq	_ZdlPvm@PLT # Offset: 12358
.Ltmp1339:
    0000304b: 	movl	$0x8, %esi
    00003050: 	movq	%r14, %rdi
    00003053: 	callq	_ZdlPvm@PLT # Offset: 12371
.Ltmp1340:
    00003058: 	movl	$0x8, %esi
    0000305d: 	movq	%r15, %rdi
    00003060: 	callq	_ZdlPvm@PLT # Offset: 12384
.Ltmp1336:
    00003065: 	movq	0xe0(%rsp), %rdi
    0000306d: 	cmpq	0xc8(%rsp), %rdi
    00003075: 	je	.Ltmp1335 # Offset: 12405
    00003077: 	movq	0xf0(%rsp), %rax
    0000307f: 	leaq	0x1(%rax), %rsi
    00003083: 	callq	_ZdlPvm@PLT # Offset: 12419
.Ltmp1335:
    00003088: 	movq	%rbp, %rdi
    0000308b: 	callq	_Unwind_Resume@PLT # Offset: 12427
    00003090: 	endbr64
    00003094: 	jmp	.Ltmp1333 # Offset: 12436
    00003099: 	endbr64
    0000309d: 	jmp	.Ltmp1333 # Offset: 12445
    000030a2: 	endbr64
    000030a6: 	jmp	.Ltmp1333 # Offset: 12454
    000030ab: 	endbr64
    000030af: 	jmp	.Ltmp1333 # Offset: 12463
    000030b4: 	endbr64
    000030b8: 	movq	%rax, %rbp
    000030bb: 	jmp	.Ltmp1336 # Offset: 12475
    000030bd: 	endbr64
    000030c1: 	jmp	.Ltmp1333 # Offset: 12481
    000030c6: 	endbr64
    000030ca: 	movq	%rax, %rbx
    000030cd: 	jmp	.Ltmp1337 # Offset: 12493
    000030cf: 	endbr64
    000030d3: 	movq	%rax, %rbx
    000030d6: 	jmp	.Ltmp1334 # Offset: 12502
.Ltmp1337:
    000030db: 	movq	0x100(%rsp), %rdi
    000030e3: 	leaq	0x110(%rsp), %rax
    000030eb: 	cmpq	%rax, %rdi
    000030ee: 	jne	.Ltmp1338 # Offset: 12526
    000030f4: 	jmp	.Ltmp1334 # Offset: 12532
    000030f9: 	endbr64
    000030fd: 	movq	%rax, %rbp
    00003100: 	jmp	.Ltmp1339 # Offset: 12544
    00003105: 	endbr64
    00003109: 	movq	%rax, %rbp
    0000310c: 	jmp	.Ltmp1340 # Offset: 12556
    00003111: 	endbr64
    00003115: 	jmp	.Ltmp1333 # Offset: 12565
    0000311a: 	endbr64
    0000311e: 	jmp	.Ltmp1333 # Offset: 12574
    00003123: 	endbr64
    00003127: 	jmp	.Ltmp1333 # Offset: 12583
    0000312c: 	endbr64
    00003130: 	jmp	.Ltmp1333 # Offset: 12592
    00003135: 	endbr64
    00003139: 	jmp	.Ltmp1333 # Offset: 12601
    0000313e: 	endbr64
    00003142: 	jmp	.Ltmp1333 # Offset: 12610
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIdEvv"

Binary Function "_Z14test_matvecmulIf31matvecmul_JI_blocked_unrolled1AIfEEvPKT_PS2_S4_iiT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 101
  State       : disassembled
  Address     : 0x1c450
  Size        : 0x528
  MaxSize     : 0x530
  Offset      : 0x1c450
  Section     : .text
  Orc Section : .local.text._Z14test_matvecmulIf31matvecmul_JI_blocked_unrolled1AIfEEvPKT_PS2_S4_iiT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0100:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movl	%r8d, %r12d
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdx, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x58, %rsp
    0000001b: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    00000022: 	movq	%rsi, 0x10(%rsp)
    00000027: 	movl	%ecx, 0x28(%rsp)
    0000002b: 	movq	%r9, 0x20(%rsp)
    00000030: 	movq	%fs:0x28, %rax
    00000039: 	movq	%rax, 0x48(%rsp)
    0000003e: 	xorl	%eax, %eax
    00000040: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000047: 	subq	$0x20, %rax
    0000004b: 	cmpq	%rax, %r14
    0000004e: 	je	.Ltmp1341 # Offset: 78
    00000054: 	leaq	0x10(%r14), %rdi
    00000058: 	movq	0x8(%r9), %r13
    0000005c: 	movq	%rdi, (%r14)
    0000005f: 	movq	(%r9), %r15
    00000062: 	movq	%r15, %rax
    00000065: 	addq	%r13, %rax
    00000068: 	je	.Ltmp1342 # Offset: 104
    0000006a: 	testq	%r15, %r15
    0000006d: 	je	.Ltmp1343 # Offset: 109
.Ltmp1342:
    00000073: 	movq	%r13, 0x40(%rsp)
    00000078: 	cmpq	$0xf, %r13
    0000007c: 	ja	.Ltmp1344 # Offset: 124
    00000082: 	cmpq	$0x1, %r13
    00000086: 	jne	.Ltmp1345 # Offset: 134
    0000008c: 	movzbl	(%r15), %eax
    00000090: 	movb	%al, 0x10(%r14)
.Ltmp1365:
    00000094: 	movq	%r13, 0x8(%r14)
    00000098: 	movb	$0x0, (%rdi,%r13)
    0000009d: 	addq	$0x20, "_ZL7gLabels/1"+48(%rip)
.Ltmp1364:
    000000a5: 	callq	clock@PLT # Offset: 165
    000000aa: 	movq	%rax, start_time(%rip)
    000000b1: 	movl	iterations(%rip), %eax
    000000b7: 	movl	%eax, 0x2c(%rsp)
    000000bb: 	testl	%eax, %eax
    000000bd: 	jle	.Ltmp1346 # Offset: 189
    000000c3: 	leal	-0x7(%r12), %eax
    000000c8: 	movq	0x10(%rsp), %rdi
    000000cd: 	pxor	%xmm7, %xmm7
    000000d1: 	leal	-0x8(%r12), %r8d
    000000d6: 	movl	%eax, 0x4(%rsp)
    000000da: 	movl	0x28(%rsp), %eax
    000000de: 	shrl	$0x3, %r8d
    000000e2: 	movslq	%r12d, %r15
    000000e5: 	movl	$0x0, 0x1c(%rsp)
    000000ed: 	addl	$0x1, %r8d
    000000f1: 	subl	$0x1, %eax
    000000f4: 	leal	(,%r8,8), %r11d
    000000fc: 	leaq	(%rdi,%rax,4), %rax
    00000100: 	movq	%rax, 0x8(%rsp)
    00000105: 	leaq	0xc88(%rdi), %rax
    0000010c: 	movq	%rax, 0x30(%rsp)
    00000111: 	leaq	0x8(%rdi), %rax
    00000115: 	movq	%rax, 0x38(%rsp)
.Ltmp1357:
    0000011a: 	movq	0x10(%rsp), %rax
    0000011f: 	movq	$0x0, (%rax)
    00000126: 	movq	0x30(%rsp), %rdi
    0000012b: 	movq	$0x0, -0x10(%rdi)
    00000133: 	movq	0x38(%rsp), %rdi
    00000138: 	andq	$-0x8, %rdi
    0000013c: 	subq	%rdi, %rax
    0000013f: 	movq	%rax, %rcx
    00000142: 	xorl	%eax, %eax
    00000144: 	addl	$0xc80, %ecx
    0000014a: 	shrl	$0x3, %ecx
    0000014d: 	rep		stosq	%rax, %es:(%rdi)
    00000150: 	testl	%r12d, %r12d
    00000153: 	jle	.Ltmp1347 # Offset: 339
    00000159: 	movl	0x28(%rsp), %edx
    0000015d: 	testl	%edx, %edx
    0000015f: 	jle	.Ltmp1347 # Offset: 351
    00000165: 	movl	$0x0, 0x18(%rsp)
    0000016d: 	nopl	(%rax) # Size: 3
.Ltmp1356:
    00000170: 	addl	$0x258, 0x18(%rsp)
    00000178: 	movq	0x10(%rsp), %r10
    0000017d: 	xorl	%r13d, %r13d
.Ltmp1354:
    00000180: 	movl	0x4(%rsp), %eax
    00000184: 	movss	(%r10), %xmm1
    00000189: 	leaq	(%rbp,%r13,4), %rdx
    0000018e: 	testl	%eax, %eax
    00000190: 	jle	.Ltmp1348 # Offset: 400
    00000196: 	pxor	%xmm4, %xmm4
    0000019a: 	xorl	%eax, %eax
    0000019c: 	pxor	%xmm3, %xmm3
    000001a0: 	xorl	%ecx, %ecx
    000001a2: 	movss	%xmm1, %xmm4
    000001a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1349:
    000001b0: 	movups	(%rbx,%rax), %xmm0
    000001b4: 	movups	(%rdx,%rax), %xmm5
    000001b8: 	addl	$0x1, %ecx
    000001bb: 	movups	0x10(%rdx,%rax), %xmm6
    000001c0: 	mulps	%xmm5, %xmm0
    000001c3: 	addps	%xmm0, %xmm4
    000001c6: 	movups	0x10(%rbx,%rax), %xmm0
    000001cb: 	addq	$0x20, %rax
    000001cf: 	mulps	%xmm6, %xmm0
    000001d2: 	addps	%xmm0, %xmm3
    000001d5: 	cmpl	%ecx, %r8d
    000001d8: 	ja	.Ltmp1349 # Offset: 472
    000001da: 	movaps	%xmm4, %xmm5
    000001dd: 	movaps	%xmm4, %xmm9
    000001e1: 	movaps	%xmm3, %xmm8
    000001e5: 	movaps	%xmm3, %xmm6
    000001e8: 	movaps	%xmm4, %xmm1
    000001eb: 	unpckhps	%xmm4, %xmm9
    000001ef: 	shufps	$0x55, %xmm4, %xmm5
    000001f3: 	movaps	%xmm3, %xmm10
    000001f7: 	unpckhps	%xmm3, %xmm6
    000001fa: 	shufps	$0x55, %xmm3, %xmm8
    000001ff: 	shufps	$0xff, %xmm4, %xmm4
    00000203: 	shufps	$0xff, %xmm3, %xmm3
    00000207: 	cmpl	%r11d, %r12d
    0000020a: 	jle	.Ltmp1350 # Offset: 522
    00000210: 	movl	%r11d, %ecx
.Ltmp1355:
    00000213: 	movl	%r12d, %eax
    00000216: 	movl	$0x1, %r14d
    0000021c: 	subl	%ecx, %eax
    0000021e: 	cmpl	%ecx, %r12d
    00000221: 	cmovgl	%eax, %r14d
    00000225: 	subl	$0x1, %eax
    00000228: 	cmpl	$0x2, %eax
    0000022b: 	jbe	.Ltmp1351 # Offset: 555
    0000022d: 	cmpl	%ecx, %r12d
    00000230: 	jle	.Ltmp1351 # Offset: 560
    00000232: 	movslq	%ecx, %rax
    00000235: 	leaq	(%rax,%r13), %rsi
    00000239: 	leaq	(%rbx,%rax,4), %rdi
    0000023d: 	xorl	%eax, %eax
    0000023f: 	leaq	(%rbp,%rsi,4), %r9
    00000244: 	movl	%r14d, %esi
    00000247: 	shrl	$0x2, %esi
    0000024a: 	shlq	$0x4, %rsi
    0000024e: 	nop # Size: 2
.Ltmp1352:
    00000250: 	movups	(%r9,%rax), %xmm2
    00000255: 	movups	(%rdi,%rax), %xmm0
    00000259: 	addq	$0x10, %rax
    0000025d: 	mulps	%xmm2, %xmm0
    00000260: 	addss	%xmm0, %xmm1
    00000264: 	movaps	%xmm0, %xmm2
    00000267: 	shufps	$0x55, %xmm0, %xmm2
    0000026b: 	addss	%xmm1, %xmm2
    0000026f: 	movaps	%xmm0, %xmm1
    00000272: 	unpckhps	%xmm0, %xmm1
    00000275: 	shufps	$0xff, %xmm0, %xmm0
    00000279: 	addss	%xmm2, %xmm1
    0000027d: 	addss	%xmm0, %xmm1
    00000281: 	cmpq	%rax, %rsi
    00000284: 	jne	.Ltmp1352 # Offset: 644
    00000286: 	movl	%r14d, %eax
    00000289: 	andl	$-0x4, %eax
    0000028c: 	addl	%eax, %ecx
    0000028e: 	cmpl	%r14d, %eax
    00000291: 	je	.Ltmp1350 # Offset: 657
.Ltmp1351:
    00000293: 	movslq	%ecx, %rsi
    00000296: 	movss	(%rbx,%rsi,4), %xmm0
    0000029b: 	mulss	(%rdx,%rsi,4), %xmm0
    000002a0: 	leaq	(,%rsi,4), %rax
    000002a8: 	leal	0x1(%rcx), %esi
    000002ab: 	addss	%xmm0, %xmm1
    000002af: 	cmpl	%esi, %r12d
    000002b2: 	jle	.Ltmp1350 # Offset: 690
    000002b4: 	movss	0x4(%rbx,%rax), %xmm0
    000002ba: 	mulss	0x4(%rdx,%rax), %xmm0
    000002c0: 	addl	$0x2, %ecx
    000002c3: 	addss	%xmm0, %xmm1
    000002c7: 	cmpl	%ecx, %r12d
    000002ca: 	jle	.Ltmp1350 # Offset: 714
    000002cc: 	movss	0x8(%rbx,%rax), %xmm0
    000002d2: 	mulss	0x8(%rdx,%rax), %xmm0
    000002d8: 	addss	%xmm0, %xmm1
.Ltmp1350:
    000002dc: 	addss	%xmm1, %xmm5
    000002e0: 	leaq	0x4(%r10), %rax
    000002e4: 	addq	%r15, %r13
    000002e7: 	movaps	%xmm5, %xmm0
    000002ea: 	addss	%xmm9, %xmm0
    000002ef: 	addss	%xmm4, %xmm0
    000002f3: 	addss	%xmm10, %xmm0
    000002f8: 	addss	%xmm8, %xmm0
    000002fd: 	addss	%xmm6, %xmm0
    00000301: 	addss	%xmm3, %xmm0
    00000305: 	movss	%xmm0, (%r10)
    0000030a: 	cmpq	%r10, 0x8(%rsp)
    0000030f: 	je	.Ltmp1353 # Offset: 783
    00000311: 	movq	%rax, %r10
    00000314: 	jmp	.Ltmp1354 # Offset: 788
    00000319: 	nopl	(%rax) # Size: 7
.Ltmp1348:
    00000320: 	movaps	%xmm7, %xmm3
    00000323: 	movaps	%xmm7, %xmm6
    00000326: 	movaps	%xmm7, %xmm8
    0000032a: 	xorl	%ecx, %ecx
    0000032c: 	movaps	%xmm7, %xmm10
    00000330: 	movaps	%xmm7, %xmm4
    00000333: 	movaps	%xmm7, %xmm9
    00000337: 	movaps	%xmm7, %xmm5
    0000033a: 	jmp	.Ltmp1355 # Offset: 826
    0000033f: 	nop # Size: 1
.Ltmp1353:
    00000340: 	cmpl	0x18(%rsp), %r12d
    00000345: 	jg	.Ltmp1356 # Offset: 837
.Ltmp1347:
    0000034b: 	addl	$0x1, 0x1c(%rsp)
    00000350: 	movl	0x1c(%rsp), %eax
    00000354: 	cmpl	0x2c(%rsp), %eax
    00000358: 	jne	.Ltmp1357 # Offset: 856
.Ltmp1367:
    0000035e: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000365: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    0000036c: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000373: 	je	.Ltmp1358 # Offset: 883
.Ltmp1363:
    00000379: 	movq	-0x20(%rax), %rbp
    0000037d: 	movss	%xmm7, 0x4(%rsp)
    00000383: 	callq	clock@PLT # Offset: 899
    00000388: 	pxor	%xmm0, %xmm0
    0000038c: 	movq	%rax, end_time(%rip)
    00000393: 	movq	%rbp, %rdi
    00000396: 	subq	start_time(%rip), %rax
    0000039d: 	cvtsi2sd	%rax, %xmm0
    000003a2: 	divsd	DATAat0x24960(%rip), %xmm0
    000003aa: 	callq	_Z13record_resultdPKc # Offset: 938
    000003af: 	movq	0x10(%rsp), %rax
    000003b4: 	movss	0x4(%rsp), %xmm7
    000003ba: 	leaq	0xc80(%rax), %rdx
.Ltmp1359:
    000003c1: 	movups	(%rax), %xmm1
    000003c4: 	addq	$0x10, %rax
    000003c8: 	addss	%xmm1, %xmm7
    000003cc: 	movaps	%xmm1, %xmm0
    000003cf: 	movaps	%xmm1, %xmm2
    000003d2: 	shufps	$0x55, %xmm1, %xmm0
    000003d6: 	unpckhps	%xmm1, %xmm2
    000003d9: 	shufps	$0xff, %xmm1, %xmm1
    000003dd: 	addss	%xmm7, %xmm0
    000003e1: 	addss	%xmm0, %xmm2
    000003e5: 	movaps	%xmm2, %xmm7
    000003e8: 	addss	%xmm1, %xmm7
    000003ec: 	cmpq	%rdx, %rax
    000003ef: 	jne	.Ltmp1359 # Offset: 1007
    000003f1: 	movss	DATAat0x24990(%rip), %xmm1
    000003f9: 	pxor	%xmm0, %xmm0
    000003fd: 	cvtsd2ss	init_value(%rip), %xmm0
    00000405: 	mulss	%xmm0, %xmm1
    00000409: 	mulss	%xmm0, %xmm1
    0000040d: 	movaps	%xmm7, %xmm0
    00000410: 	subss	%xmm1, %xmm0
    00000414: 	movaps	%xmm7, %xmm1
    00000417: 	andps	DATAat0x24930(%rip), %xmm1
    0000041e: 	cvtss2sd	%xmm1, %xmm1
    00000422: 	comisd	DATAat0x24968(%rip), %xmm1
    0000042a: 	jbe	.Ltmp1360 # Offset: 1066
    0000042c: 	divss	%xmm7, %xmm0
.Ltmp1360:
    00000430: 	movsd	DATAat0x24970(%rip), %xmm1
    00000438: 	cvtss2sd	%xmm0, %xmm0
    0000043c: 	andpd	DATAat0x24940(%rip), %xmm0
    00000444: 	comisd	%xmm0, %xmm1
    00000448: 	jbe	.Ltmp1361 # Offset: 1096
    0000044a: 	movq	0x48(%rsp), %rax
    0000044f: 	subq	%fs:0x28, %rax
    00000458: 	jne	.Ltmp1362 # Offset: 1112
    0000045e: 	addq	$0x58, %rsp
    00000462: 	popq	%rbx
    00000463: 	popq	%rbp
    00000464: 	popq	%r12
    00000466: 	popq	%r13
    00000468: 	popq	%r14
    0000046a: 	popq	%r15
    0000046c: 	retq # Offset: 1132
.Ltmp1358:
    0000046d: 	movq	-0x8(%rdx), %rax
    00000471: 	addq	$0x200, %rax
    00000477: 	jmp	.Ltmp1363 # Offset: 1143
.Ltmp1341:
    0000047c: 	movq	%r9, %rsi
    0000047f: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000486: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1158
    0000048b: 	jmp	.Ltmp1364 # Offset: 1163
.Ltmp1361:
    00000490: 	movq	0x48(%rsp), %rax
    00000495: 	subq	%fs:0x28, %rax
    0000049e: 	jne	.Ltmp1362 # Offset: 1182
    000004a0: 	movq	0x20(%rsp), %rax
    000004a5: 	leaq	DATAat0x2455f(%rip), %rsi
    000004ac: 	movl	$0x1, %edi
    000004b1: 	movq	(%rax), %rdx
    000004b4: 	addq	$0x58, %rsp
    000004b8: 	xorl	%eax, %eax
    000004ba: 	popq	%rbx
    000004bb: 	popq	%rbp
    000004bc: 	popq	%r12
    000004be: 	popq	%r13
    000004c0: 	popq	%r14
    000004c2: 	popq	%r15
    000004c4: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 1220
.Ltmp1345:
    000004c9: 	testq	%r13, %r13
    000004cc: 	je	.Ltmp1365 # Offset: 1228
    000004d2: 	jmp	.Ltmp1366 # Offset: 1234
    000004d4: 	nopl	(%rax) # Size: 4
.Ltmp1344:
    000004d8: 	movq	%r14, %rdi
    000004db: 	leaq	0x40(%rsp), %rsi
    000004e0: 	xorl	%edx, %edx
    000004e2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1250
    000004e7: 	movq	%rax, (%r14)
    000004ea: 	movq	%rax, %rdi
    000004ed: 	movq	0x40(%rsp), %rax
    000004f2: 	movq	%rax, 0x10(%r14)
.Ltmp1366:
    000004f6: 	movq	%r13, %rdx
    000004f9: 	movq	%r15, %rsi
    000004fc: 	callq	memcpy@PLT # Offset: 1276
    00000501: 	movq	0x40(%rsp), %r13
    00000506: 	movq	(%r14), %rdi
    00000509: 	jmp	.Ltmp1365 # Offset: 1289
.Ltmp1346:
    0000050e: 	pxor	%xmm7, %xmm7
    00000512: 	jmp	.Ltmp1367 # Offset: 1298
.Ltmp1362:
    00000517: 	callq	__stack_chk_fail@PLT # Offset: 1303
.Ltmp1343:
    0000051c: 	leaq	DATAat0x24520(%rip), %rdi
    00000523: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1315
DWARF CFI Instructions:
    <empty>
End of Function "_Z14test_matvecmulIf31matvecmul_JI_blocked_unrolled1AIfEEvPKT_PS2_S4_iiT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z11TestOneTypeIfEvv" after disassembly {
  Number      : 102
  State       : disassembled
  Address     : 0x1c980
  Size        : 0x3075
  MaxSize     : 0x3080
  Offset      : 0x1c980
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIfEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0101:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x128, %rsp
    00000015: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm6
    0000001d: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000024: 	movq	%fs:0x28, %rax
    0000002d: 	movq	%rax, 0x118(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	movq	"_ZL7gLabels/1"+48(%rip), %r13
    0000003e: 	leaq	0xe0(%rsp), %rax
    00000046: 	movl	$0x616f6c66, 0xe0(%rsp)
    00000051: 	movaps	%xmm6, 0x10(%rsp)
    00000056: 	movq	%xmm6, %rbx
    0000005b: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm6
    00000063: 	movq	"_ZL7gLabels/1"+56(%rip), %rbp
    0000006a: 	movq	%rax, 0xb8(%rsp)
    00000072: 	movhlps	%xmm6, %xmm7
    00000075: 	movaps	%xmm6, (%rsp)
    00000079: 	movq	%xmm6, %r14
    0000007e: 	movq	%xmm7, %rcx
    00000083: 	movq	%rax, 0xd0(%rsp)
    0000008b: 	leaq	0x8(%rcx), %r12
    0000008f: 	movb	$0x74, 0xe4(%rsp)
    00000097: 	movq	$0x5, 0xd8(%rsp)
    000000a3: 	movb	$0x0, 0xe5(%rsp)
    000000ab: 	cmpq	%r12, %rdx
    000000ae: 	jbe	.Ltmp1368 # Offset: 174
    000000b0: 	movq	%rbp, 0x20(%rsp)
    000000b5: 	movq	%r12, %r14
    000000b8: 	movq	%rbx, 0x28(%rsp)
    000000bd: 	movq	%r12, %rbx
    000000c0: 	movq	%rdx, %r12
    000000c3: 	movq	%xmm6, 0x30(%rsp)
.Ltmp1371:
    000000c9: 	movq	(%rbx), %r15
    000000cc: 	leaq	0x200(%r15), %rbp
.Ltmp1370:
    000000d3: 	movq	(%r15), %rdi
    000000d6: 	leaq	0x10(%r15), %rax
    000000da: 	cmpq	%rax, %rdi
    000000dd: 	je	.Ltmp1369 # Offset: 221
    000000e3: 	movq	0x10(%r15), %rax
    000000e7: 	addq	$0x20, %r15
    000000eb: 	movq	%rcx, 0x38(%rsp)
    000000f0: 	leaq	0x1(%rax), %rsi
    000000f4: 	callq	_ZdlPvm@PLT # Offset: 244
    000000f9: 	cmpq	%r15, %rbp
    000000fc: 	movq	0x38(%rsp), %rcx
    00000101: 	jne	.Ltmp1370 # Offset: 257
    00000103: 	addq	$0x8, %rbx
    00000107: 	cmpq	%rbx, %r12
    0000010a: 	ja	.Ltmp1371 # Offset: 266
.Ltmp1537:
    0000010c: 	movq	%r12, %rdx
    0000010f: 	movq	0x20(%rsp), %rbp
    00000114: 	movq	%r14, %r12
    00000117: 	movq	0x28(%rsp), %rbx
    0000011c: 	movq	0x30(%rsp), %r14
.Ltmp1368:
    00000121: 	cmpq	%rcx, %rdx
    00000124: 	je	.Ltmp1372 # Offset: 292
    0000012a: 	cmpq	%rbx, %r14
    0000012d: 	je	.Ltmp1373 # Offset: 301
.Ltmp1376:
    0000012f: 	movq	(%rbx), %rdi
    00000132: 	leaq	0x10(%rbx), %rax
    00000136: 	cmpq	%rax, %rdi
    00000139: 	je	.Ltmp1374 # Offset: 313
.Ltmp1375:
    0000013b: 	movq	0x10(%rbx), %rax
    0000013f: 	addq	$0x20, %rbx
    00000143: 	leaq	0x1(%rax), %rsi
    00000147: 	callq	_ZdlPvm@PLT # Offset: 327
    0000014c: 	cmpq	%r14, %rbx
    0000014f: 	je	.Ltmp1373 # Offset: 335
    00000151: 	movq	(%rbx), %rdi
    00000154: 	leaq	0x10(%rbx), %rax
    00000158: 	cmpq	%rax, %rdi
    0000015b: 	jne	.Ltmp1375 # Offset: 347
.Ltmp1374:
    0000015d: 	addq	$0x20, %rbx
    00000161: 	cmpq	%r14, %rbx
    00000164: 	jne	.Ltmp1376 # Offset: 356
    00000166: 	cmpq	%rbp, %r13
    00000169: 	je	.Ltmp1377 # Offset: 361
.Ltmp1379:
    0000016b: 	movq	(%rbp), %rdi
    0000016f: 	leaq	0x10(%rbp), %rax
    00000173: 	cmpq	%rax, %rdi
    00000176: 	je	.Ltmp1378 # Offset: 374
    00000178: 	movq	0x10(%rbp), %rax
    0000017c: 	leaq	0x1(%rax), %rsi
    00000180: 	callq	_ZdlPvm@PLT # Offset: 384
.Ltmp1378:
    00000185: 	addq	$0x20, %rbp
.Ltmp1373:
    00000189: 	cmpq	%rbp, %r13
    0000018c: 	jne	.Ltmp1379 # Offset: 396
.Ltmp1377:
    0000018e: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    00000195: 	leaq	0x8(%rax), %rbx
    00000199: 	cmpq	%r12, %rbx
    0000019c: 	jbe	.Ltmp1380 # Offset: 412
.Ltmp1381:
    0000019e: 	movq	(%r12), %rdi
    000001a2: 	movl	$0x200, %esi
    000001a7: 	addq	$0x8, %r12
    000001ab: 	callq	_ZdlPvm@PLT # Offset: 427
    000001b0: 	cmpq	%r12, %rbx
    000001b3: 	ja	.Ltmp1381 # Offset: 435
.Ltmp1380:
    000001b5: 	movdqa	0x10(%rsp), %xmm6
    000001bb: 	movl	$0x960, %edi
    000001c0: 	movaps	%xmm6, "_ZL7gLabels/1"+48(%rip)
    000001c7: 	movdqa	(%rsp), %xmm6
    000001cc: 	movaps	%xmm6, "_ZL7gLabels/1"+64(%rip)
    000001d3: 	callq	_Znam@PLT # Offset: 467
    000001d8: 	movl	$0xc80, %edi
    000001dd: 	movq	%rax, %r14
    000001e0: 	callq	_Znam@PLT # Offset: 480
    000001e5: 	movl	$0x1d4c00, %edi
    000001ea: 	movq	%rax, %r15
    000001ed: 	callq	_Znam@PLT # Offset: 493
    000001f2: 	movl	$0x258, %r8d
    000001f8: 	movq	%rax, %rdx
    000001fb: 	movq	%r15, %rsi
    000001fe: 	movq	%r14, %rdi
    00000201: 	movl	$0x320, %ecx
    00000206: 	movq	%rax, (%rsp)
    0000020a: 	callq	_Z16verify_matvecmulIfEvPT_S1_S1_ii # Offset: 522
    0000020f: 	pxor	%xmm0, %xmm0
    00000213: 	leaq	0x960(%r14), %rdx
    0000021a: 	movq	%r14, %rax
    0000021d: 	cvtsd2ss	init_value(%rip), %xmm0
    00000225: 	shufps	$0x0, %xmm0, %xmm0
.Ltmp1382:
    00000229: 	movups	%xmm0, (%rax)
    0000022c: 	addq	$0x10, %rax
    00000230: 	cmpq	%rdx, %rax
    00000233: 	jne	.Ltmp1382 # Offset: 563
    00000235: 	movq	%r15, 0xc8(%rsp)
    0000023d: 	leaq	0xc80(%r15), %rax
    00000244: 	movq	%rax, 0x98(%rsp)
    0000024c: 	movq	%r15, %rax
.Ltmp1383:
    0000024f: 	movups	%xmm0, (%rax)
    00000252: 	addq	$0x10, %rax
    00000256: 	cmpq	0x98(%rsp), %rax
    0000025e: 	jne	.Ltmp1383 # Offset: 606
    00000260: 	movq	(%rsp), %rax
    00000264: 	leaq	0x1d4c00(%rax), %rbx
    0000026b: 	movq	%rbx, 0x20(%rsp)
.Ltmp1384:
    00000270: 	movups	%xmm0, (%rax)
    00000273: 	addq	$0x10, %rax
    00000277: 	cmpq	0x20(%rsp), %rax
    0000027c: 	jne	.Ltmp1384 # Offset: 636
    0000027e: 	leaq	0xf0(%rsp), %rax
    00000286: 	leaq	0xd0(%rsp), %rsi
    0000028e: 	leaq	DATAat0x245a0(%rip), %rdx
    00000295: 	movq	%rax, %rdi
    00000298: 	movq	%rax, 0x30(%rsp)
    0000029d: 	movq	%rax, %rbx
    000002a0: 	movq	%rsi, 0x68(%rsp)
    000002a5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 677
    000002aa: 	movq	%rbx, %rsi
    000002ad: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000002b4: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 692
    000002b9: 	callq	clock@PLT # Offset: 697
    000002be: 	movl	iterations(%rip), %r8d
    000002c5: 	xorl	%esi, %esi
    000002c7: 	movq	%rax, start_time(%rip)
    000002ce: 	leaq	0xc88(%r15), %rax
    000002d5: 	movq	%rax, 0x50(%rsp)
    000002da: 	leaq	0x8(%r15), %rax
    000002de: 	movq	%rax, 0x48(%rsp)
    000002e3: 	xorl	%eax, %eax
    000002e5: 	testl	%r8d, %r8d
    000002e8: 	jle	.Ltmp1385 # Offset: 744
.Ltmp1388:
    000002ee: 	movq	%rax, (%r15)
    000002f1: 	movq	0x50(%rsp), %rbx
    000002f6: 	movq	%r15, %rcx
    000002f9: 	movq	%rax, -0x10(%rbx)
    000002fd: 	movq	0x48(%rsp), %rdi
    00000302: 	andq	$-0x8, %rdi
    00000306: 	subq	%rdi, %rcx
    00000309: 	addl	$0xc80, %ecx
    0000030f: 	shrl	$0x3, %ecx
    00000312: 	rep		stosq	%rax, %es:(%rdi)
    00000315: 	movq	%r15, %rdi
    00000318: 	movq	(%rsp), %rcx
.Ltmp1387:
    0000031c: 	movss	(%rdi), %xmm1
    00000320: 	xorl	%edx, %edx
    00000322: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1386:
    00000328: 	movups	(%r14,%rdx), %xmm0
    0000032d: 	movups	(%rcx,%rdx), %xmm7
    00000331: 	addq	$0x10, %rdx
    00000335: 	mulps	%xmm7, %xmm0
    00000338: 	addss	%xmm0, %xmm1
    0000033c: 	movaps	%xmm0, %xmm2
    0000033f: 	shufps	$0x55, %xmm0, %xmm2
    00000343: 	addss	%xmm1, %xmm2
    00000347: 	movaps	%xmm0, %xmm1
    0000034a: 	unpckhps	%xmm0, %xmm1
    0000034d: 	shufps	$0xff, %xmm0, %xmm0
    00000351: 	addss	%xmm2, %xmm1
    00000355: 	addss	%xmm0, %xmm1
    00000359: 	cmpq	$0x960, %rdx
    00000360: 	jne	.Ltmp1386 # Offset: 864
    00000362: 	movss	%xmm1, (%rdi)
    00000366: 	addq	$0x960, %rcx
    0000036d: 	addq	$0x4, %rdi
    00000371: 	cmpq	0x20(%rsp), %rcx
    00000376: 	jne	.Ltmp1387 # Offset: 886
    00000378: 	addl	$0x1, %esi
    0000037b: 	cmpl	%r8d, %esi
    0000037e: 	jne	.Ltmp1388 # Offset: 894
.Ltmp1385:
    00000384: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000038b: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00000392: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000399: 	je	.Ltmp1389 # Offset: 921
.Ltmp1544:
    0000039f: 	movq	-0x20(%rax), %rbp
    000003a3: 	callq	clock@PLT # Offset: 931
    000003a8: 	pxor	%xmm0, %xmm0
    000003ac: 	movq	%rax, end_time(%rip)
    000003b3: 	movq	%rbp, %rdi
    000003b6: 	subq	start_time(%rip), %rax
    000003bd: 	cvtsi2sd	%rax, %xmm0
    000003c2: 	divsd	DATAat0x24960(%rip), %xmm0
    000003ca: 	callq	_Z13record_resultdPKc # Offset: 970
    000003cf: 	movq	%r15, %rax
    000003d2: 	pxor	%xmm0, %xmm0
.Ltmp1390:
    000003d6: 	movups	(%rax), %xmm2
    000003d9: 	addq	$0x10, %rax
    000003dd: 	addss	%xmm2, %xmm0
    000003e1: 	movaps	%xmm2, %xmm1
    000003e4: 	shufps	$0x55, %xmm2, %xmm1
    000003e8: 	addss	%xmm0, %xmm1
    000003ec: 	movaps	%xmm2, %xmm0
    000003ef: 	unpckhps	%xmm2, %xmm0
    000003f2: 	shufps	$0xff, %xmm2, %xmm2
    000003f6: 	addss	%xmm1, %xmm0
    000003fa: 	addss	%xmm2, %xmm0
    000003fe: 	cmpq	0x98(%rsp), %rax
    00000406: 	jne	.Ltmp1390 # Offset: 1030
    00000408: 	movq	0x30(%rsp), %rdi
    0000040d: 	callq	_Z9check_sumIfEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1037
    00000412: 	movq	0xf0(%rsp), %rdi
    0000041a: 	leaq	0x100(%rsp), %rax
    00000422: 	movq	%rax, 0x10(%rsp)
    00000427: 	cmpq	%rax, %rdi
    0000042a: 	je	.Ltmp1391 # Offset: 1066
    0000042c: 	movq	0x100(%rsp), %rax
    00000434: 	leaq	0x1(%rax), %rsi
    00000438: 	callq	_ZdlPvm@PLT # Offset: 1080
.Ltmp1391:
    0000043d: 	movq	0x30(%rsp), %rbx
    00000442: 	movq	0x68(%rsp), %rsi
    00000447: 	leaq	DATAat0x245ba(%rip), %rdx
    0000044e: 	movq	%rbx, %rdi
    00000451: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1105
    00000456: 	movq	%rbx, %rsi
    00000459: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000460: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 1120
    00000465: 	callq	clock@PLT # Offset: 1125
    0000046a: 	movl	iterations(%rip), %r10d
    00000471: 	xorl	%r8d, %r8d
    00000474: 	movq	%rax, start_time(%rip)
    0000047b: 	leaq	0xc88(%r15), %rax
    00000482: 	movq	%rax, 0x50(%rsp)
    00000487: 	leaq	0x8(%r15), %rax
    0000048b: 	movq	%rax, 0x48(%rsp)
    00000490: 	xorl	%eax, %eax
    00000492: 	testl	%r10d, %r10d
    00000495: 	jle	.Ltmp1392 # Offset: 1173
.Ltmp1398:
    0000049b: 	movq	%rax, (%r15)
    0000049e: 	movq	0x50(%rsp), %rbx
    000004a3: 	movq	%r15, %rcx
    000004a6: 	xorl	%r9d, %r9d
    000004a9: 	movq	%rax, -0x10(%rbx)
    000004ad: 	movq	0x48(%rsp), %rdi
    000004b2: 	andq	$-0x8, %rdi
    000004b6: 	subq	%rdi, %rcx
    000004b9: 	addl	$0xc80, %ecx
    000004bf: 	shrl	$0x3, %ecx
    000004c2: 	rep		stosq	%rax, %es:(%rdi)
    000004c5: 	movq	%r14, %rcx
    000004c8: 	movq	0x20(%rsp), %rsi
.Ltmp1394:
    000004cd: 	movss	(%rcx), %xmm2
    000004d1: 	movss	0x4(%rcx), %xmm1
    000004d6: 	leaq	-0x1d4c00(%rsi), %rdx
    000004dd: 	movq	%r15, %rdi
.Ltmp1393:
    000004e0: 	movss	0x4(%rdx), %xmm3
    000004e5: 	movss	(%rdx), %xmm0
    000004e9: 	addq	$0x960, %rdx
    000004f0: 	addq	$0x4, %rdi
    000004f4: 	mulss	%xmm1, %xmm3
    000004f8: 	mulss	%xmm2, %xmm0
    000004fc: 	addss	-0x4(%rdi), %xmm0
    00000501: 	addss	%xmm3, %xmm0
    00000505: 	movss	%xmm0, -0x4(%rdi)
    0000050a: 	cmpq	%rdx, %rsi
    0000050d: 	jne	.Ltmp1393 # Offset: 1293
    0000050f: 	addl	$0x2, %r9d
    00000513: 	addq	$0x8, %rcx
    00000517: 	addq	$0x8, %rsi
    0000051b: 	cmpl	$0x256, %r9d
    00000522: 	jne	.Ltmp1394 # Offset: 1314
    00000524: 	movq	(%rsp), %rcx
    00000528: 	movq	%r15, %rsi
    0000052b: 	xorl	%edi, %edi
.Ltmp1397:
    0000052d: 	movss	(%rsi), %xmm1
    00000531: 	movl	$0x256, %edx
    00000536: 	jmp	.Ltmp1395 # Offset: 1334
    00000538: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1396:
    00000540: 	movl	$0x257, %edx
.Ltmp1395:
    00000545: 	movss	(%rcx,%rdx,4), %xmm0
    0000054a: 	mulss	(%r14,%rdx,4), %xmm0
    00000550: 	addss	%xmm0, %xmm1
    00000554: 	cmpq	$0x257, %rdx
    0000055b: 	jne	.Ltmp1396 # Offset: 1371
    0000055d: 	addl	$0x258, %edi
    00000563: 	movss	%xmm1, (%rsi)
    00000567: 	addq	$0x960, %rcx
    0000056e: 	addq	$0x4, %rsi
    00000572: 	cmpl	$0x75300, %edi
    00000578: 	jne	.Ltmp1397 # Offset: 1400
    0000057a: 	addl	$0x1, %r8d
    0000057e: 	cmpl	%r10d, %r8d
    00000581: 	jne	.Ltmp1398 # Offset: 1409
.Ltmp1392:
    00000587: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000058e: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00000595: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000059c: 	je	.Ltmp1399 # Offset: 1436
.Ltmp1561:
    000005a2: 	movq	-0x20(%rax), %rbp
    000005a6: 	callq	clock@PLT # Offset: 1446
    000005ab: 	pxor	%xmm0, %xmm0
    000005af: 	movq	%rax, end_time(%rip)
    000005b6: 	movq	%rbp, %rdi
    000005b9: 	subq	start_time(%rip), %rax
    000005c0: 	cvtsi2sd	%rax, %xmm0
    000005c5: 	divsd	DATAat0x24960(%rip), %xmm0
    000005cd: 	callq	_Z13record_resultdPKc # Offset: 1485
    000005d2: 	movq	%r15, %rax
    000005d5: 	pxor	%xmm0, %xmm0
.Ltmp1400:
    000005d9: 	movups	(%rax), %xmm2
    000005dc: 	addq	$0x10, %rax
    000005e0: 	addss	%xmm2, %xmm0
    000005e4: 	movaps	%xmm2, %xmm1
    000005e7: 	shufps	$0x55, %xmm2, %xmm1
    000005eb: 	addss	%xmm0, %xmm1
    000005ef: 	movaps	%xmm2, %xmm0
    000005f2: 	unpckhps	%xmm2, %xmm0
    000005f5: 	shufps	$0xff, %xmm2, %xmm2
    000005f9: 	addss	%xmm1, %xmm0
    000005fd: 	addss	%xmm2, %xmm0
    00000601: 	cmpq	0x98(%rsp), %rax
    00000609: 	jne	.Ltmp1400 # Offset: 1545
    0000060b: 	movss	DATAat0x24990(%rip), %xmm2
    00000613: 	pxor	%xmm1, %xmm1
    00000617: 	cvtsd2ss	init_value(%rip), %xmm1
    0000061f: 	mulss	%xmm1, %xmm2
    00000623: 	mulss	%xmm1, %xmm2
    00000627: 	movaps	%xmm0, %xmm1
    0000062a: 	subss	%xmm2, %xmm1
    0000062e: 	movaps	%xmm0, %xmm2
    00000631: 	andps	DATAat0x24930(%rip), %xmm2
    00000638: 	cvtss2sd	%xmm2, %xmm2
    0000063c: 	comisd	DATAat0x24968(%rip), %xmm2
    00000644: 	jbe	.Ltmp1401 # Offset: 1604
    00000646: 	divss	%xmm0, %xmm1
.Ltmp1401:
    0000064a: 	movsd	DATAat0x24970(%rip), %xmm7
    00000652: 	cvtss2sd	%xmm1, %xmm1
    00000656: 	andpd	DATAat0x24940(%rip), %xmm1
    0000065e: 	movq	0xf0(%rsp), %rdx
    00000666: 	comisd	%xmm1, %xmm7
    0000066a: 	jbe	.Ltmp1402 # Offset: 1642
.Ltmp1560:
    00000670: 	cmpq	0x10(%rsp), %rdx
    00000675: 	je	.Ltmp1403 # Offset: 1653
    00000677: 	movq	0x100(%rsp), %rax
    0000067f: 	movq	%rdx, %rdi
    00000682: 	leaq	0x1(%rax), %rsi
    00000686: 	callq	_ZdlPvm@PLT # Offset: 1670
.Ltmp1403:
    0000068b: 	movq	0x30(%rsp), %rbx
    00000690: 	movq	0x68(%rsp), %rsi
    00000695: 	leaq	DATAat0x245f0(%rip), %rdx
    0000069c: 	movq	%rbx, %rdi
    0000069f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1695
    000006a4: 	movq	%rbx, %rsi
    000006a7: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000006ae: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 1710
    000006b3: 	callq	clock@PLT # Offset: 1715
    000006b8: 	movl	iterations(%rip), %r8d
    000006bf: 	xorl	%esi, %esi
    000006c1: 	movq	%rax, start_time(%rip)
    000006c8: 	leaq	0xc88(%r15), %rax
    000006cf: 	movq	%rax, 0x50(%rsp)
    000006d4: 	leaq	0x8(%r15), %rax
    000006d8: 	movq	%rax, 0x48(%rsp)
    000006dd: 	xorl	%eax, %eax
    000006df: 	testl	%r8d, %r8d
    000006e2: 	jle	.Ltmp1404 # Offset: 1762
.Ltmp1407:
    000006e8: 	movq	%rax, (%r15)
    000006eb: 	movq	0x50(%rsp), %rbx
    000006f0: 	movq	%r15, %rcx
    000006f3: 	movq	%rax, -0x10(%rbx)
    000006f7: 	movq	0x48(%rsp), %rdi
    000006fc: 	andq	$-0x8, %rdi
    00000700: 	subq	%rdi, %rcx
    00000703: 	addl	$0xc80, %ecx
    00000709: 	shrl	$0x3, %ecx
    0000070c: 	rep		stosq	%rax, %es:(%rdi)
    0000070f: 	movq	%r15, %rdi
    00000712: 	movq	(%rsp), %rcx
.Ltmp1406:
    00000716: 	movss	(%rdi), %xmm1
    0000071a: 	xorl	%edx, %edx
    0000071c: 	nopl	(%rax) # Size: 4
.Ltmp1405:
    00000720: 	movups	(%r14,%rdx), %xmm0
    00000725: 	movups	(%rcx,%rdx), %xmm7
    00000729: 	addq	$0x10, %rdx
    0000072d: 	mulps	%xmm7, %xmm0
    00000730: 	addss	%xmm0, %xmm1
    00000734: 	movaps	%xmm0, %xmm2
    00000737: 	shufps	$0x55, %xmm0, %xmm2
    0000073b: 	addss	%xmm1, %xmm2
    0000073f: 	movaps	%xmm0, %xmm1
    00000742: 	unpckhps	%xmm0, %xmm1
    00000745: 	shufps	$0xff, %xmm0, %xmm0
    00000749: 	addss	%xmm2, %xmm1
    0000074d: 	addss	%xmm0, %xmm1
    00000751: 	cmpq	$0x960, %rdx
    00000758: 	jne	.Ltmp1405 # Offset: 1880
    0000075a: 	movss	%xmm1, (%rdi)
    0000075e: 	addq	$0x960, %rcx
    00000765: 	addq	$0x4, %rdi
    00000769: 	cmpq	%rcx, 0x20(%rsp)
    0000076e: 	jne	.Ltmp1406 # Offset: 1902
    00000770: 	addl	$0x1, %esi
    00000773: 	cmpl	%r8d, %esi
    00000776: 	jne	.Ltmp1407 # Offset: 1910
.Ltmp1404:
    0000077c: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000783: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    0000078a: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000791: 	je	.Ltmp1408 # Offset: 1937
.Ltmp1559:
    00000797: 	movq	-0x20(%rax), %rbp
    0000079b: 	callq	clock@PLT # Offset: 1947
    000007a0: 	pxor	%xmm0, %xmm0
    000007a4: 	movq	%rax, end_time(%rip)
    000007ab: 	movq	%rbp, %rdi
    000007ae: 	subq	start_time(%rip), %rax
    000007b5: 	cvtsi2sd	%rax, %xmm0
    000007ba: 	divsd	DATAat0x24960(%rip), %xmm0
    000007c2: 	callq	_Z13record_resultdPKc # Offset: 1986
    000007c7: 	movq	%r15, %rax
    000007ca: 	pxor	%xmm0, %xmm0
.Ltmp1409:
    000007ce: 	movups	(%rax), %xmm2
    000007d1: 	addq	$0x10, %rax
    000007d5: 	addss	%xmm2, %xmm0
    000007d9: 	movaps	%xmm2, %xmm1
    000007dc: 	shufps	$0x55, %xmm2, %xmm1
    000007e0: 	addss	%xmm0, %xmm1
    000007e4: 	movaps	%xmm2, %xmm0
    000007e7: 	unpckhps	%xmm2, %xmm0
    000007ea: 	shufps	$0xff, %xmm2, %xmm2
    000007ee: 	addss	%xmm1, %xmm0
    000007f2: 	addss	%xmm2, %xmm0
    000007f6: 	cmpq	%rax, 0x98(%rsp)
    000007fe: 	jne	.Ltmp1409 # Offset: 2046
    00000800: 	movq	0x30(%rsp), %rdi
    00000805: 	callq	_Z9check_sumIfEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2053
    0000080a: 	movq	0xf0(%rsp), %rdi
    00000812: 	cmpq	0x10(%rsp), %rdi
    00000817: 	je	.Ltmp1410 # Offset: 2071
    00000819: 	movq	0x100(%rsp), %rax
    00000821: 	leaq	0x1(%rax), %rsi
    00000825: 	callq	_ZdlPvm@PLT # Offset: 2085
.Ltmp1410:
    0000082a: 	movq	0x30(%rsp), %rbx
    0000082f: 	movq	0x68(%rsp), %rsi
    00000834: 	leaq	DATAat0x24610(%rip), %rdx
    0000083b: 	movq	%rbx, %rdi
    0000083e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2110
    00000843: 	movq	%rbx, %rsi
    00000846: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000084d: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 2125
    00000852: 	callq	clock@PLT # Offset: 2130
    00000857: 	movl	iterations(%rip), %r8d
    0000085e: 	xorl	%esi, %esi
    00000860: 	movq	%rax, start_time(%rip)
    00000867: 	leaq	0xc88(%r15), %rax
    0000086e: 	movq	%rax, 0x50(%rsp)
    00000873: 	leaq	0x8(%r15), %rax
    00000877: 	movq	%rax, 0x48(%rsp)
    0000087c: 	xorl	%eax, %eax
    0000087e: 	testl	%r8d, %r8d
    00000881: 	jle	.Ltmp1411 # Offset: 2177
.Ltmp1414:
    00000887: 	movq	%rax, (%r15)
    0000088a: 	movq	0x50(%rsp), %rbx
    0000088f: 	movq	%r15, %rcx
    00000892: 	movq	%rax, -0x10(%rbx)
    00000896: 	movq	0x48(%rsp), %rdi
    0000089b: 	andq	$-0x8, %rdi
    0000089f: 	subq	%rdi, %rcx
    000008a2: 	addl	$0xc80, %ecx
    000008a8: 	shrl	$0x3, %ecx
    000008ab: 	rep		stosq	%rax, %es:(%rdi)
    000008ae: 	movq	%r15, %rdi
    000008b1: 	movq	(%rsp), %rcx
.Ltmp1413:
    000008b5: 	movss	(%rdi), %xmm1
    000008b9: 	xorl	%edx, %edx
    000008bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1412:
    000008c0: 	movups	(%r14,%rdx), %xmm0
    000008c5: 	movups	(%rcx,%rdx), %xmm7
    000008c9: 	addq	$0x10, %rdx
    000008cd: 	mulps	%xmm7, %xmm0
    000008d0: 	addss	%xmm0, %xmm1
    000008d4: 	movaps	%xmm0, %xmm2
    000008d7: 	shufps	$0x55, %xmm0, %xmm2
    000008db: 	addss	%xmm1, %xmm2
    000008df: 	movaps	%xmm0, %xmm1
    000008e2: 	unpckhps	%xmm0, %xmm1
    000008e5: 	shufps	$0xff, %xmm0, %xmm0
    000008e9: 	addss	%xmm2, %xmm1
    000008ed: 	addss	%xmm0, %xmm1
    000008f1: 	cmpq	$0x960, %rdx
    000008f8: 	jne	.Ltmp1412 # Offset: 2296
    000008fa: 	movss	%xmm1, (%rdi)
    000008fe: 	addq	$0x960, %rcx
    00000905: 	addq	$0x4, %rdi
    00000909: 	cmpq	0x20(%rsp), %rcx
    0000090e: 	jne	.Ltmp1413 # Offset: 2318
    00000910: 	addl	$0x1, %esi
    00000913: 	cmpl	%r8d, %esi
    00000916: 	jne	.Ltmp1414 # Offset: 2326
.Ltmp1411:
    0000091c: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000923: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    0000092a: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000931: 	je	.Ltmp1415 # Offset: 2353
.Ltmp1558:
    00000937: 	movq	-0x20(%rax), %rbp
    0000093b: 	callq	clock@PLT # Offset: 2363
    00000940: 	pxor	%xmm0, %xmm0
    00000944: 	movq	%rax, end_time(%rip)
    0000094b: 	movq	%rbp, %rdi
    0000094e: 	subq	start_time(%rip), %rax
    00000955: 	cvtsi2sd	%rax, %xmm0
    0000095a: 	divsd	DATAat0x24960(%rip), %xmm0
    00000962: 	callq	_Z13record_resultdPKc # Offset: 2402
    00000967: 	movq	%r15, %rax
    0000096a: 	pxor	%xmm0, %xmm0
.Ltmp1416:
    0000096e: 	movups	(%rax), %xmm2
    00000971: 	addq	$0x10, %rax
    00000975: 	addss	%xmm2, %xmm0
    00000979: 	movaps	%xmm2, %xmm1
    0000097c: 	shufps	$0x55, %xmm2, %xmm1
    00000980: 	addss	%xmm0, %xmm1
    00000984: 	movaps	%xmm2, %xmm0
    00000987: 	unpckhps	%xmm2, %xmm0
    0000098a: 	shufps	$0xff, %xmm2, %xmm2
    0000098e: 	addss	%xmm1, %xmm0
    00000992: 	addss	%xmm2, %xmm0
    00000996: 	cmpq	%rax, 0x98(%rsp)
    0000099e: 	jne	.Ltmp1416 # Offset: 2462
    000009a0: 	movq	0x30(%rsp), %rdi
    000009a5: 	callq	_Z9check_sumIfEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2469
    000009aa: 	movq	0xf0(%rsp), %rdi
    000009b2: 	cmpq	0x10(%rsp), %rdi
    000009b7: 	je	.Ltmp1417 # Offset: 2487
    000009b9: 	movq	0x100(%rsp), %rax
    000009c1: 	leaq	0x1(%rax), %rsi
    000009c5: 	callq	_ZdlPvm@PLT # Offset: 2501
.Ltmp1417:
    000009ca: 	movq	0x30(%rsp), %rbx
    000009cf: 	movq	0x68(%rsp), %rsi
    000009d4: 	leaq	DATAat0x24630(%rip), %rdx
    000009db: 	movq	%rbx, %rdi
    000009de: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2526
    000009e3: 	movq	%rbx, %rsi
    000009e6: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000009ed: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 2541
    000009f2: 	callq	clock@PLT # Offset: 2546
    000009f7: 	movl	iterations(%rip), %r10d
    000009fe: 	xorl	%r8d, %r8d
    00000a01: 	movq	%rax, start_time(%rip)
    00000a08: 	leaq	0xc88(%r15), %rax
    00000a0f: 	movq	%rax, 0x50(%rsp)
    00000a14: 	leaq	0x8(%r15), %rax
    00000a18: 	movq	%rax, 0x48(%rsp)
    00000a1d: 	xorl	%eax, %eax
    00000a1f: 	testl	%r10d, %r10d
    00000a22: 	jle	.Ltmp1418 # Offset: 2594
.Ltmp1424:
    00000a28: 	movq	%rax, (%r15)
    00000a2b: 	movq	0x50(%rsp), %rbx
    00000a30: 	movq	%r15, %rcx
    00000a33: 	movq	%rax, -0x10(%rbx)
    00000a37: 	movq	0x48(%rsp), %rdi
    00000a3c: 	andq	$-0x8, %rdi
    00000a40: 	subq	%rdi, %rcx
    00000a43: 	addl	$0xc80, %ecx
    00000a49: 	shrl	$0x3, %ecx
    00000a4c: 	rep		stosq	%rax, %es:(%rdi)
    00000a4f: 	movq	%r14, %rcx
    00000a52: 	xorl	%edi, %edi
    00000a54: 	movq	0x20(%rsp), %r9
.Ltmp1420:
    00000a59: 	movss	(%rcx), %xmm2
    00000a5d: 	movss	0x4(%rcx), %xmm1
    00000a62: 	leaq	-0x1d4c00(%r9), %rdx
    00000a69: 	movq	%r15, %rsi
.Ltmp1419:
    00000a6c: 	movss	0x4(%rdx), %xmm3
    00000a71: 	movss	(%rdx), %xmm0
    00000a75: 	addq	$0x960, %rdx
    00000a7c: 	addq	$0x4, %rsi
    00000a80: 	mulss	%xmm1, %xmm3
    00000a84: 	mulss	%xmm2, %xmm0
    00000a88: 	addss	-0x4(%rsi), %xmm0
    00000a8d: 	addss	%xmm3, %xmm0
    00000a91: 	movss	%xmm0, -0x4(%rsi)
    00000a96: 	cmpq	%r9, %rdx
    00000a99: 	jne	.Ltmp1419 # Offset: 2713
    00000a9b: 	addl	$0x2, %edi
    00000a9e: 	addq	$0x8, %rcx
    00000aa2: 	leaq	0x8(%rdx), %r9
    00000aa6: 	cmpl	$0x256, %edi
    00000aac: 	jne	.Ltmp1420 # Offset: 2732
    00000aae: 	movq	(%rsp), %rcx
    00000ab2: 	movq	%r15, %rsi
    00000ab5: 	xorl	%edi, %edi
.Ltmp1423:
    00000ab7: 	movss	(%rsi), %xmm1
    00000abb: 	movl	$0x256, %edx
    00000ac0: 	jmp	.Ltmp1421 # Offset: 2752
    00000ac2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1422:
    00000ac8: 	movl	$0x257, %edx
.Ltmp1421:
    00000acd: 	movss	(%rcx,%rdx,4), %xmm0
    00000ad2: 	mulss	(%r14,%rdx,4), %xmm0
    00000ad8: 	addss	%xmm0, %xmm1
    00000adc: 	cmpq	$0x257, %rdx
    00000ae3: 	jne	.Ltmp1422 # Offset: 2787
    00000ae5: 	addl	$0x258, %edi
    00000aeb: 	movss	%xmm1, (%rsi)
    00000aef: 	addq	$0x960, %rcx
    00000af6: 	addq	$0x4, %rsi
    00000afa: 	cmpl	$0x75300, %edi
    00000b00: 	jne	.Ltmp1423 # Offset: 2816
    00000b02: 	addl	$0x1, %r8d
    00000b06: 	cmpl	%r10d, %r8d
    00000b09: 	jne	.Ltmp1424 # Offset: 2825
.Ltmp1418:
    00000b0f: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000b16: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00000b1d: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000b24: 	je	.Ltmp1425 # Offset: 2852
.Ltmp1557:
    00000b2a: 	movq	-0x20(%rax), %rbp
    00000b2e: 	callq	clock@PLT # Offset: 2862
    00000b33: 	pxor	%xmm0, %xmm0
    00000b37: 	movq	%rax, end_time(%rip)
    00000b3e: 	movq	%rbp, %rdi
    00000b41: 	subq	start_time(%rip), %rax
    00000b48: 	cvtsi2sd	%rax, %xmm0
    00000b4d: 	divsd	DATAat0x24960(%rip), %xmm0
    00000b55: 	callq	_Z13record_resultdPKc # Offset: 2901
    00000b5a: 	movq	%r15, %rax
    00000b5d: 	pxor	%xmm0, %xmm0
.Ltmp1426:
    00000b61: 	movups	(%rax), %xmm2
    00000b64: 	addq	$0x10, %rax
    00000b68: 	addss	%xmm2, %xmm0
    00000b6c: 	movaps	%xmm2, %xmm1
    00000b6f: 	shufps	$0x55, %xmm2, %xmm1
    00000b73: 	addss	%xmm0, %xmm1
    00000b77: 	movaps	%xmm2, %xmm0
    00000b7a: 	unpckhps	%xmm2, %xmm0
    00000b7d: 	shufps	$0xff, %xmm2, %xmm2
    00000b81: 	addss	%xmm1, %xmm0
    00000b85: 	addss	%xmm2, %xmm0
    00000b89: 	cmpq	0x98(%rsp), %rax
    00000b91: 	jne	.Ltmp1426 # Offset: 2961
    00000b93: 	movq	0x30(%rsp), %rdi
    00000b98: 	callq	_Z9check_sumIfEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2968
    00000b9d: 	movq	0xf0(%rsp), %rdi
    00000ba5: 	cmpq	0x10(%rsp), %rdi
    00000baa: 	je	.Ltmp1427 # Offset: 2986
    00000bac: 	movq	0x100(%rsp), %rax
    00000bb4: 	leaq	0x1(%rax), %rsi
    00000bb8: 	callq	_ZdlPvm@PLT # Offset: 3000
.Ltmp1427:
    00000bbd: 	movq	0x30(%rsp), %rbx
    00000bc2: 	movq	0x68(%rsp), %rsi
    00000bc7: 	leaq	DATAat0x24650(%rip), %rdx
    00000bce: 	movq	%rbx, %rdi
    00000bd1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3025
    00000bd6: 	movq	%rbx, %rsi
    00000bd9: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000be0: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 3040
    00000be5: 	callq	clock@PLT # Offset: 3045
    00000bea: 	movl	iterations(%rip), %r8d
    00000bf1: 	xorl	%esi, %esi
    00000bf3: 	movq	%rax, start_time(%rip)
    00000bfa: 	leaq	0xc88(%r15), %rax
    00000c01: 	movq	%rax, 0x50(%rsp)
    00000c06: 	leaq	0x8(%r15), %rax
    00000c0a: 	movq	%rax, 0x48(%rsp)
    00000c0f: 	xorl	%eax, %eax
    00000c11: 	testl	%r8d, %r8d
    00000c14: 	jle	.Ltmp1428 # Offset: 3092
.Ltmp1431:
    00000c1a: 	movq	%rax, (%r15)
    00000c1d: 	movq	0x50(%rsp), %rbx
    00000c22: 	movq	%r15, %rcx
    00000c25: 	movq	%rax, -0x10(%rbx)
    00000c29: 	movq	0x48(%rsp), %rdi
    00000c2e: 	andq	$-0x8, %rdi
    00000c32: 	subq	%rdi, %rcx
    00000c35: 	addl	$0xc80, %ecx
    00000c3b: 	shrl	$0x3, %ecx
    00000c3e: 	rep		stosq	%rax, %es:(%rdi)
    00000c41: 	movq	%r15, %rdi
    00000c44: 	movq	(%rsp), %rcx
.Ltmp1430:
    00000c48: 	movss	(%rdi), %xmm1
    00000c4c: 	xorl	%edx, %edx
    00000c4e: 	nop # Size: 2
.Ltmp1429:
    00000c50: 	movups	(%r14,%rdx), %xmm0
    00000c55: 	movups	(%rcx,%rdx), %xmm7
    00000c59: 	addq	$0x10, %rdx
    00000c5d: 	mulps	%xmm7, %xmm0
    00000c60: 	addps	%xmm0, %xmm1
    00000c63: 	cmpq	$0x960, %rdx
    00000c6a: 	jne	.Ltmp1429 # Offset: 3178
    00000c6c: 	movaps	%xmm1, %xmm2
    00000c6f: 	movaps	%xmm1, %xmm0
    00000c72: 	addq	$0x4, %rdi
    00000c76: 	addq	$0x960, %rcx
    00000c7d: 	shufps	$0x55, %xmm1, %xmm2
    00000c81: 	addss	%xmm1, %xmm2
    00000c85: 	unpckhps	%xmm1, %xmm0
    00000c88: 	shufps	$0xff, %xmm1, %xmm1
    00000c8c: 	addss	%xmm0, %xmm2
    00000c90: 	movaps	%xmm1, %xmm0
    00000c93: 	addss	%xmm2, %xmm0
    00000c97: 	movss	%xmm0, -0x4(%rdi)
    00000c9c: 	cmpq	0x20(%rsp), %rcx
    00000ca1: 	jne	.Ltmp1430 # Offset: 3233
    00000ca3: 	addl	$0x1, %esi
    00000ca6: 	cmpl	%r8d, %esi
    00000ca9: 	jne	.Ltmp1431 # Offset: 3241
.Ltmp1428:
    00000caf: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000cb6: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00000cbd: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000cc4: 	je	.Ltmp1432 # Offset: 3268
.Ltmp1556:
    00000cca: 	movq	-0x20(%rax), %rbp
    00000cce: 	callq	clock@PLT # Offset: 3278
    00000cd3: 	pxor	%xmm0, %xmm0
    00000cd7: 	movq	%rax, end_time(%rip)
    00000cde: 	movq	%rbp, %rdi
    00000ce1: 	subq	start_time(%rip), %rax
    00000ce8: 	cvtsi2sd	%rax, %xmm0
    00000ced: 	divsd	DATAat0x24960(%rip), %xmm0
    00000cf5: 	callq	_Z13record_resultdPKc # Offset: 3317
    00000cfa: 	movq	%r15, %rax
    00000cfd: 	pxor	%xmm0, %xmm0
.Ltmp1433:
    00000d01: 	movups	(%rax), %xmm2
    00000d04: 	addq	$0x10, %rax
    00000d08: 	addss	%xmm2, %xmm0
    00000d0c: 	movaps	%xmm2, %xmm1
    00000d0f: 	shufps	$0x55, %xmm2, %xmm1
    00000d13: 	addss	%xmm0, %xmm1
    00000d17: 	movaps	%xmm2, %xmm0
    00000d1a: 	unpckhps	%xmm2, %xmm0
    00000d1d: 	shufps	$0xff, %xmm2, %xmm2
    00000d21: 	addss	%xmm1, %xmm0
    00000d25: 	addss	%xmm2, %xmm0
    00000d29: 	cmpq	0x98(%rsp), %rax
    00000d31: 	jne	.Ltmp1433 # Offset: 3377
    00000d33: 	movq	0x30(%rsp), %rdi
    00000d38: 	callq	_Z9check_sumIfEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3384
    00000d3d: 	movq	0xf0(%rsp), %rdi
    00000d45: 	cmpq	0x10(%rsp), %rdi
    00000d4a: 	je	.Ltmp1434 # Offset: 3402
    00000d4c: 	movq	0x100(%rsp), %rax
    00000d54: 	leaq	0x1(%rax), %rsi
    00000d58: 	callq	_ZdlPvm@PLT # Offset: 3416
.Ltmp1434:
    00000d5d: 	movq	0x30(%rsp), %rbx
    00000d62: 	movq	0x68(%rsp), %rsi
    00000d67: 	leaq	DATAat0x24678(%rip), %rdx
    00000d6e: 	movq	%rbx, %rdi
    00000d71: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3441
    00000d76: 	movq	(%rsp), %rdx
    00000d7a: 	movq	%rbx, %r9
    00000d7d: 	movl	$0x258, %r8d
    00000d83: 	movq	%r15, %rsi
    00000d86: 	movl	$0x320, %ecx
    00000d8b: 	movq	%r14, %rdi
    00000d8e: 	callq	_Z14test_matvecmulIf22matvecmul_IJ_unrolled1IfEEvPKT_PS2_S4_iiT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3470
    00000d93: 	movq	0xf0(%rsp), %rdi
    00000d9b: 	cmpq	0x10(%rsp), %rdi
    00000da0: 	je	.Ltmp1435 # Offset: 3488
    00000da2: 	movq	0x100(%rsp), %rax
    00000daa: 	leaq	0x1(%rax), %rsi
    00000dae: 	callq	_ZdlPvm@PLT # Offset: 3502
.Ltmp1435:
    00000db3: 	movq	0x30(%rsp), %rbx
    00000db8: 	movq	0x68(%rsp), %rsi
    00000dbd: 	leaq	DATAat0x246a0(%rip), %rdx
    00000dc4: 	movq	%rbx, %rdi
    00000dc7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3527
    00000dcc: 	movq	%rbx, %rsi
    00000dcf: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000dd6: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 3542
    00000ddb: 	callq	clock@PLT # Offset: 3547
    00000de0: 	movl	iterations(%rip), %r8d
    00000de7: 	xorl	%esi, %esi
    00000de9: 	movq	%rax, start_time(%rip)
    00000df0: 	leaq	0xc88(%r15), %rax
    00000df7: 	movq	%rax, 0x50(%rsp)
    00000dfc: 	leaq	0x8(%r15), %rax
    00000e00: 	movq	%rax, 0x48(%rsp)
    00000e05: 	xorl	%eax, %eax
    00000e07: 	testl	%r8d, %r8d
    00000e0a: 	jle	.Ltmp1436 # Offset: 3594
.Ltmp1439:
    00000e10: 	movq	%rax, (%r15)
    00000e13: 	movq	0x50(%rsp), %rbx
    00000e18: 	movq	%r15, %rcx
    00000e1b: 	movq	%rax, -0x10(%rbx)
    00000e1f: 	movq	0x48(%rsp), %rdi
    00000e24: 	andq	$-0x8, %rdi
    00000e28: 	subq	%rdi, %rcx
    00000e2b: 	addl	$0xc80, %ecx
    00000e31: 	shrl	$0x3, %ecx
    00000e34: 	rep		stosq	%rax, %es:(%rdi)
    00000e37: 	movq	%r15, %rdi
    00000e3a: 	movq	(%rsp), %rcx
.Ltmp1438:
    00000e3e: 	movss	(%rdi), %xmm2
    00000e42: 	xorl	%edx, %edx
    00000e44: 	pxor	%xmm1, %xmm1
    00000e48: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1437:
    00000e50: 	movups	(%r14,%rdx), %xmm0
    00000e55: 	movups	(%rcx,%rdx), %xmm6
    00000e59: 	movups	0x10(%rcx,%rdx), %xmm7
    00000e5e: 	mulps	%xmm6, %xmm0
    00000e61: 	addps	%xmm0, %xmm2
    00000e64: 	movups	0x10(%r14,%rdx), %xmm0
    00000e6a: 	addq	$0x20, %rdx
    00000e6e: 	mulps	%xmm7, %xmm0
    00000e71: 	addps	%xmm0, %xmm1
    00000e74: 	cmpq	$0x960, %rdx
    00000e7b: 	jne	.Ltmp1437 # Offset: 3707
    00000e7d: 	movaps	%xmm2, %xmm3
    00000e80: 	movaps	%xmm2, %xmm0
    00000e83: 	addq	$0x4, %rdi
    00000e87: 	addq	$0x960, %rcx
    00000e8e: 	shufps	$0x55, %xmm2, %xmm3
    00000e92: 	addss	%xmm2, %xmm3
    00000e96: 	unpckhps	%xmm2, %xmm0
    00000e99: 	shufps	$0xff, %xmm2, %xmm2
    00000e9d: 	addss	%xmm0, %xmm3
    00000ea1: 	movaps	%xmm1, %xmm0
    00000ea4: 	shufps	$0x55, %xmm1, %xmm0
    00000ea8: 	addss	%xmm2, %xmm3
    00000eac: 	movaps	%xmm3, %xmm2
    00000eaf: 	addss	%xmm1, %xmm2
    00000eb3: 	addss	%xmm0, %xmm2
    00000eb7: 	movaps	%xmm1, %xmm0
    00000eba: 	unpckhps	%xmm1, %xmm0
    00000ebd: 	shufps	$0xff, %xmm1, %xmm1
    00000ec1: 	addss	%xmm0, %xmm2
    00000ec5: 	movaps	%xmm1, %xmm0
    00000ec8: 	addss	%xmm2, %xmm0
    00000ecc: 	movss	%xmm0, -0x4(%rdi)
    00000ed1: 	cmpq	0x20(%rsp), %rcx
    00000ed6: 	jne	.Ltmp1438 # Offset: 3798
    00000edc: 	addl	$0x1, %esi
    00000edf: 	cmpl	%r8d, %esi
    00000ee2: 	jne	.Ltmp1439 # Offset: 3810
.Ltmp1436:
    00000ee8: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000eef: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00000ef6: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000efd: 	je	.Ltmp1440 # Offset: 3837
.Ltmp1555:
    00000f03: 	movq	-0x20(%rax), %rbp
    00000f07: 	callq	clock@PLT # Offset: 3847
    00000f0c: 	pxor	%xmm0, %xmm0
    00000f10: 	movq	%rax, end_time(%rip)
    00000f17: 	movq	%rbp, %rdi
    00000f1a: 	subq	start_time(%rip), %rax
    00000f21: 	cvtsi2sd	%rax, %xmm0
    00000f26: 	divsd	DATAat0x24960(%rip), %xmm0
    00000f2e: 	callq	_Z13record_resultdPKc # Offset: 3886
    00000f33: 	movq	%r15, %rax
    00000f36: 	pxor	%xmm0, %xmm0
.Ltmp1441:
    00000f3a: 	movups	(%rax), %xmm2
    00000f3d: 	addq	$0x10, %rax
    00000f41: 	addss	%xmm2, %xmm0
    00000f45: 	movaps	%xmm2, %xmm1
    00000f48: 	shufps	$0x55, %xmm2, %xmm1
    00000f4c: 	addss	%xmm0, %xmm1
    00000f50: 	movaps	%xmm2, %xmm0
    00000f53: 	unpckhps	%xmm2, %xmm0
    00000f56: 	shufps	$0xff, %xmm2, %xmm2
    00000f5a: 	addss	%xmm1, %xmm0
    00000f5e: 	addss	%xmm2, %xmm0
    00000f62: 	cmpq	0x98(%rsp), %rax
    00000f6a: 	jne	.Ltmp1441 # Offset: 3946
    00000f6c: 	movq	0x30(%rsp), %rdi
    00000f71: 	callq	_Z9check_sumIfEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3953
    00000f76: 	movq	0xf0(%rsp), %rdi
    00000f7e: 	cmpq	0x10(%rsp), %rdi
    00000f83: 	je	.Ltmp1442 # Offset: 3971
    00000f85: 	movq	0x100(%rsp), %rax
    00000f8d: 	leaq	0x1(%rax), %rsi
    00000f91: 	callq	_ZdlPvm@PLT # Offset: 3985
.Ltmp1442:
    00000f96: 	movq	0x30(%rsp), %rbx
    00000f9b: 	movq	0x68(%rsp), %rsi
    00000fa0: 	leaq	DATAat0x246c8(%rip), %rdx
    00000fa7: 	movq	%rbx, %rdi
    00000faa: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4010
    00000faf: 	movq	%rbx, %rsi
    00000fb2: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000fb9: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 4025
    00000fbe: 	callq	clock@PLT # Offset: 4030
    00000fc3: 	movl	iterations(%rip), %r8d
    00000fca: 	xorl	%esi, %esi
    00000fcc: 	movq	%rax, start_time(%rip)
    00000fd3: 	leaq	0xc88(%r15), %rax
    00000fda: 	movq	%rax, 0x50(%rsp)
    00000fdf: 	leaq	0x8(%r15), %rax
    00000fe3: 	movq	%rax, 0x48(%rsp)
    00000fe8: 	xorl	%eax, %eax
    00000fea: 	testl	%r8d, %r8d
    00000fed: 	jle	.Ltmp1443 # Offset: 4077
.Ltmp1446:
    00000ff3: 	movq	%rax, (%r15)
    00000ff6: 	movq	0x50(%rsp), %rbx
    00000ffb: 	movq	%r15, %rcx
    00000ffe: 	xorl	%r9d, %r9d
    00001001: 	movq	%rax, -0x10(%rbx)
    00001005: 	movq	0x48(%rsp), %rdi
    0000100a: 	andq	$-0x8, %rdi
    0000100e: 	subq	%rdi, %rcx
    00001011: 	addl	$0xc80, %ecx
    00001017: 	shrl	$0x3, %ecx
    0000101a: 	rep		stosq	%rax, %es:(%rdi)
    0000101d: 	movq	0x20(%rsp), %rdi
.Ltmp1445:
    00001022: 	movss	(%r14,%r9,4), %xmm0
    00001028: 	leaq	-0x1d4c00(%rdi), %rcx
    0000102f: 	movq	%r15, %rdx
    00001032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1444:
    00001038: 	movss	(%rcx), %xmm1
    0000103c: 	addq	$0x2580, %rcx
    00001043: 	addq	$0x10, %rdx
    00001047: 	mulss	%xmm0, %xmm1
    0000104b: 	addss	-0x10(%rdx), %xmm1
    00001050: 	movss	%xmm1, -0x10(%rdx)
    00001055: 	movss	-0x1c20(%rcx), %xmm1
    0000105d: 	mulss	%xmm0, %xmm1
    00001061: 	addss	-0xc(%rdx), %xmm1
    00001066: 	movss	%xmm1, -0xc(%rdx)
    0000106b: 	movss	-0x12c0(%rcx), %xmm1
    00001073: 	mulss	%xmm0, %xmm1
    00001077: 	addss	-0x8(%rdx), %xmm1
    0000107c: 	movss	%xmm1, -0x8(%rdx)
    00001081: 	movss	-0x960(%rcx), %xmm1
    00001089: 	mulss	%xmm0, %xmm1
    0000108d: 	addss	-0x4(%rdx), %xmm1
    00001092: 	movss	%xmm1, -0x4(%rdx)
    00001097: 	cmpq	%rdi, %rcx
    0000109a: 	jne	.Ltmp1444 # Offset: 4250
    0000109c: 	addq	$0x1, %r9
    000010a0: 	leaq	0x4(%rcx), %rdi
    000010a4: 	cmpq	$0x258, %r9
    000010ab: 	jne	.Ltmp1445 # Offset: 4267
    000010b1: 	addl	$0x1, %esi
    000010b4: 	cmpl	%r8d, %esi
    000010b7: 	jne	.Ltmp1446 # Offset: 4279
.Ltmp1443:
    000010bd: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000010c4: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    000010cb: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000010d2: 	je	.Ltmp1447 # Offset: 4306
.Ltmp1554:
    000010d8: 	movq	-0x20(%rax), %rbp
    000010dc: 	callq	clock@PLT # Offset: 4316
    000010e1: 	pxor	%xmm0, %xmm0
    000010e5: 	movq	%rax, end_time(%rip)
    000010ec: 	movq	%rbp, %rdi
    000010ef: 	subq	start_time(%rip), %rax
    000010f6: 	cvtsi2sd	%rax, %xmm0
    000010fb: 	divsd	DATAat0x24960(%rip), %xmm0
    00001103: 	callq	_Z13record_resultdPKc # Offset: 4355
    00001108: 	movq	%r15, %rax
    0000110b: 	pxor	%xmm0, %xmm0
.Ltmp1448:
    0000110f: 	movups	(%rax), %xmm2
    00001112: 	addq	$0x10, %rax
    00001116: 	addss	%xmm2, %xmm0
    0000111a: 	movaps	%xmm2, %xmm1
    0000111d: 	shufps	$0x55, %xmm2, %xmm1
    00001121: 	addss	%xmm0, %xmm1
    00001125: 	movaps	%xmm2, %xmm0
    00001128: 	unpckhps	%xmm2, %xmm0
    0000112b: 	shufps	$0xff, %xmm2, %xmm2
    0000112f: 	addss	%xmm1, %xmm0
    00001133: 	addss	%xmm2, %xmm0
    00001137: 	cmpq	0x98(%rsp), %rax
    0000113f: 	jne	.Ltmp1448 # Offset: 4415
    00001141: 	movq	0x30(%rsp), %rdi
    00001146: 	callq	_Z9check_sumIfEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4422
    0000114b: 	movq	0xf0(%rsp), %rdi
    00001153: 	cmpq	0x10(%rsp), %rdi
    00001158: 	je	.Ltmp1449 # Offset: 4440
    0000115a: 	movq	0x100(%rsp), %rax
    00001162: 	leaq	0x1(%rax), %rsi
    00001166: 	callq	_ZdlPvm@PLT # Offset: 4454
.Ltmp1449:
    0000116b: 	movq	0x30(%rsp), %rbx
    00001170: 	movq	0x68(%rsp), %rsi
    00001175: 	leaq	DATAat0x246f0(%rip), %rdx
    0000117c: 	movq	%rbx, %rdi
    0000117f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4479
    00001184: 	movq	%rbx, %rsi
    00001187: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000118e: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 4494
    00001193: 	callq	clock@PLT # Offset: 4499
    00001198: 	leaq	0xc88(%r15), %rbx
    0000119f: 	movl	$0x0, 0x60(%rsp)
    000011a7: 	movq	%rax, start_time(%rip)
    000011ae: 	movl	iterations(%rip), %eax
    000011b4: 	movq	%rbx, 0x50(%rsp)
    000011b9: 	leaq	0x8(%r15), %rbx
    000011bd: 	movl	%eax, 0x80(%rsp)
    000011c4: 	movq	%rbx, 0x48(%rsp)
    000011c9: 	testl	%eax, %eax
    000011cb: 	jle	.Ltmp1450 # Offset: 4555
    000011d1: 	movq	%r14, 0x78(%rsp)
    000011d6: 	movq	%r15, 0x70(%rsp)
.Ltmp1453:
    000011db: 	movq	0x70(%rsp), %rax
    000011e0: 	movq	$0x0, (%rax)
    000011e7: 	movq	0x50(%rsp), %rbx
    000011ec: 	movq	$0x0, -0x10(%rbx)
    000011f4: 	movq	0x48(%rsp), %rdi
    000011f9: 	andq	$-0x8, %rdi
    000011fd: 	subq	%rdi, %rax
    00001200: 	movq	%rax, %rcx
    00001203: 	xorl	%eax, %eax
    00001205: 	addl	$0xc80, %ecx
    0000120b: 	shrl	$0x3, %ecx
    0000120e: 	rep		stosq	%rax, %es:(%rdi)
.Ltmp1452:
    00001211: 	movq	0x78(%rsp), %rax
    00001216: 	leaq	0x1c20(%rcx), %rsi
    0000121d: 	movq	0x70(%rsp), %rdx
    00001222: 	leaq	0x4(%rcx), %r15
    00001226: 	movq	%rsi, 0x58(%rsp)
    0000122b: 	leaq	0x8(%rcx), %r14
    0000122f: 	leaq	0xc(%rcx), %r13
    00001233: 	movss	(%rax,%rcx), %xmm4
    00001238: 	movss	0x4(%rax,%rcx), %xmm3
    0000123e: 	leaq	0x960(%rcx), %r12
    00001245: 	leaq	0x964(%rcx), %rbp
    0000124c: 	movss	0x8(%rax,%rcx), %xmm2
    00001252: 	movss	0xc(%rax,%rcx), %xmm1
    00001258: 	leaq	0x1c24(%rcx), %rax
    0000125f: 	leaq	0x968(%rcx), %rbx
    00001266: 	movq	%rax, 0x28(%rsp)
    0000126b: 	leaq	0x1c28(%rcx), %rax
    00001272: 	leaq	0x96c(%rcx), %r11
    00001279: 	movq	%rax, 0x38(%rsp)
    0000127e: 	leaq	0x1c2c(%rcx), %rax
    00001285: 	leaq	0x12c0(%rcx), %r10
    0000128c: 	movq	%rax, 0x40(%rsp)
    00001291: 	movq	(%rsp), %rax
    00001295: 	leaq	0x12c4(%rcx), %r9
    0000129c: 	leaq	0x12c8(%rcx), %r8
    000012a3: 	leaq	0x12cc(%rcx), %rdi
    000012aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1451:
    000012b0: 	movss	(%rax,%r15), %xmm5
    000012b6: 	movss	(%rax,%rcx), %xmm0
    000012bb: 	addq	$0x10, %rdx
    000012bf: 	addq	$0x2580, %rax
    000012c5: 	movq	0x58(%rsp), %rsi
    000012ca: 	mulss	%xmm3, %xmm5
    000012ce: 	mulss	%xmm4, %xmm0
    000012d2: 	addss	-0x10(%rdx), %xmm0
    000012d7: 	addss	%xmm5, %xmm0
    000012db: 	movss	-0x2580(%rax,%r14), %xmm5
    000012e5: 	mulss	%xmm2, %xmm5
    000012e9: 	addss	%xmm5, %xmm0
    000012ed: 	movss	-0x2580(%rax,%r13), %xmm5
    000012f7: 	mulss	%xmm1, %xmm5
    000012fb: 	addss	%xmm5, %xmm0
    000012ff: 	movss	-0x2580(%rax,%rbp), %xmm5
    00001308: 	mulss	%xmm3, %xmm5
    0000130c: 	movss	%xmm0, -0x10(%rdx)
    00001311: 	movss	-0x2580(%rax,%r12), %xmm0
    0000131b: 	mulss	%xmm4, %xmm0
    0000131f: 	addss	-0xc(%rdx), %xmm0
    00001324: 	addss	%xmm5, %xmm0
    00001328: 	movss	-0x2580(%rax,%rbx), %xmm5
    00001331: 	mulss	%xmm2, %xmm5
    00001335: 	addss	%xmm5, %xmm0
    00001339: 	movss	-0x2580(%rax,%r11), %xmm5
    00001343: 	mulss	%xmm1, %xmm5
    00001347: 	addss	%xmm5, %xmm0
    0000134b: 	movss	-0x2580(%rax,%r9), %xmm5
    00001355: 	mulss	%xmm3, %xmm5
    00001359: 	movss	%xmm0, -0xc(%rdx)
    0000135e: 	movss	-0x2580(%rax,%r10), %xmm0
    00001368: 	mulss	%xmm4, %xmm0
    0000136c: 	addss	-0x8(%rdx), %xmm0
    00001371: 	addss	%xmm5, %xmm0
    00001375: 	movss	-0x2580(%rax,%r8), %xmm5
    0000137f: 	mulss	%xmm2, %xmm5
    00001383: 	addss	%xmm5, %xmm0
    00001387: 	movss	-0x2580(%rax,%rdi), %xmm5
    00001390: 	mulss	%xmm1, %xmm5
    00001394: 	addss	%xmm5, %xmm0
    00001398: 	movss	%xmm0, -0x8(%rdx)
    0000139d: 	movaps	%xmm4, %xmm0
    000013a0: 	mulss	-0x2580(%rax,%rsi), %xmm0
    000013a9: 	movq	0x28(%rsp), %rsi
    000013ae: 	addss	-0x4(%rdx), %xmm0
    000013b3: 	movss	-0x2580(%rax,%rsi), %xmm5
    000013bc: 	movq	0x38(%rsp), %rsi
    000013c1: 	mulss	%xmm3, %xmm5
    000013c5: 	addss	%xmm5, %xmm0
    000013c9: 	movss	-0x2580(%rax,%rsi), %xmm5
    000013d2: 	movq	0x40(%rsp), %rsi
    000013d7: 	mulss	%xmm2, %xmm5
    000013db: 	addss	%xmm5, %xmm0
    000013df: 	movss	-0x2580(%rax,%rsi), %xmm5
    000013e8: 	mulss	%xmm1, %xmm5
    000013ec: 	addss	%xmm5, %xmm0
    000013f0: 	movss	%xmm0, -0x4(%rdx)
    000013f5: 	cmpq	0x20(%rsp), %rax
    000013fa: 	jne	.Ltmp1451 # Offset: 5114
    00001400: 	addq	$0x10, %rcx
    00001404: 	cmpq	$0x960, %rcx
    0000140b: 	jne	.Ltmp1452 # Offset: 5131
    00001411: 	addl	$0x1, 0x60(%rsp)
    00001416: 	movl	0x60(%rsp), %eax
    0000141a: 	cmpl	0x80(%rsp), %eax
    00001421: 	jne	.Ltmp1453 # Offset: 5153
    00001427: 	movq	0x78(%rsp), %r14
    0000142c: 	movq	0x70(%rsp), %r15
.Ltmp1450:
    00001431: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001438: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    0000143f: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001446: 	je	.Ltmp1454 # Offset: 5190
.Ltmp1553:
    0000144c: 	movq	-0x20(%rax), %rbp
    00001450: 	callq	clock@PLT # Offset: 5200
    00001455: 	pxor	%xmm0, %xmm0
    00001459: 	movq	%rax, end_time(%rip)
    00001460: 	movq	%rbp, %rdi
    00001463: 	subq	start_time(%rip), %rax
    0000146a: 	cvtsi2sd	%rax, %xmm0
    0000146f: 	divsd	DATAat0x24960(%rip), %xmm0
    00001477: 	callq	_Z13record_resultdPKc # Offset: 5239
    0000147c: 	movq	%r15, %rax
    0000147f: 	pxor	%xmm0, %xmm0
.Ltmp1455:
    00001483: 	movups	(%rax), %xmm2
    00001486: 	addq	$0x10, %rax
    0000148a: 	addss	%xmm2, %xmm0
    0000148e: 	movaps	%xmm2, %xmm1
    00001491: 	shufps	$0x55, %xmm2, %xmm1
    00001495: 	addss	%xmm0, %xmm1
    00001499: 	movaps	%xmm2, %xmm0
    0000149c: 	unpckhps	%xmm2, %xmm0
    0000149f: 	shufps	$0xff, %xmm2, %xmm2
    000014a3: 	addss	%xmm1, %xmm0
    000014a7: 	addss	%xmm2, %xmm0
    000014ab: 	cmpq	0x98(%rsp), %rax
    000014b3: 	jne	.Ltmp1455 # Offset: 5299
    000014b5: 	movq	0x30(%rsp), %rdi
    000014ba: 	callq	_Z9check_sumIfEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5306
    000014bf: 	movq	0xf0(%rsp), %rdi
    000014c7: 	cmpq	0x10(%rsp), %rdi
    000014cc: 	je	.Ltmp1456 # Offset: 5324
    000014ce: 	movq	0x100(%rsp), %rax
    000014d6: 	leaq	0x1(%rax), %rsi
    000014da: 	callq	_ZdlPvm@PLT # Offset: 5338
.Ltmp1456:
    000014df: 	movq	0x30(%rsp), %rbx
    000014e4: 	movq	0x68(%rsp), %rsi
    000014e9: 	leaq	DATAat0x24718(%rip), %rdx
    000014f0: 	movq	%rbx, %rdi
    000014f3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5363
    000014f8: 	movq	%rbx, %rsi
    000014fb: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00001502: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 5378
    00001507: 	callq	clock@PLT # Offset: 5383
    0000150c: 	leaq	0xc88(%r15), %rbx
    00001513: 	movl	$0x0, 0x60(%rsp)
    0000151b: 	movq	%rax, start_time(%rip)
    00001522: 	movl	iterations(%rip), %eax
    00001528: 	movq	%rbx, 0x50(%rsp)
    0000152d: 	leaq	0x8(%r15), %rbx
    00001531: 	movl	%eax, 0x80(%rsp)
    00001538: 	movq	%rbx, 0x48(%rsp)
    0000153d: 	testl	%eax, %eax
    0000153f: 	jle	.Ltmp1457 # Offset: 5439
    00001545: 	movq	%r14, 0x78(%rsp)
    0000154a: 	movq	%r15, 0x70(%rsp)
.Ltmp1460:
    0000154f: 	movq	0x70(%rsp), %rax
    00001554: 	movq	$0x0, (%rax)
    0000155b: 	movq	0x50(%rsp), %rbx
    00001560: 	movq	$0x0, -0x10(%rbx)
    00001568: 	movq	0x48(%rsp), %rdi
    0000156d: 	andq	$-0x8, %rdi
    00001571: 	subq	%rdi, %rax
    00001574: 	movq	%rax, %rcx
    00001577: 	xorl	%eax, %eax
    00001579: 	addl	$0xc80, %ecx
    0000157f: 	shrl	$0x3, %ecx
    00001582: 	rep		stosq	%rax, %es:(%rdi)
.Ltmp1459:
    00001585: 	movq	0x78(%rsp), %rax
    0000158a: 	leaq	0xc(%rcx), %rsi
    0000158e: 	movq	0x70(%rsp), %rdx
    00001593: 	leaq	0x960(%rcx), %r15
    0000159a: 	movq	%rsi, 0x58(%rsp)
    0000159f: 	leaq	0x12c0(%rcx), %r14
    000015a6: 	leaq	0x4(%rcx), %r12
    000015aa: 	movss	(%rax,%rcx), %xmm7
    000015af: 	movss	0x4(%rax,%rcx), %xmm6
    000015b5: 	leaq	0x1c20(%rcx), %r13
    000015bc: 	leaq	0x964(%rcx), %rbp
    000015c3: 	movss	0x8(%rax,%rcx), %xmm5
    000015c9: 	movss	0xc(%rax,%rcx), %xmm4
    000015cf: 	leaq	0x8(%rcx), %r10
    000015d3: 	leaq	0x96c(%rcx), %rax
    000015da: 	movq	%rax, 0x28(%rsp)
    000015df: 	leaq	0x12cc(%rcx), %rax
    000015e6: 	leaq	0x12c4(%rcx), %rbx
    000015ed: 	movq	%rax, 0x38(%rsp)
    000015f2: 	leaq	0x1c2c(%rcx), %rax
    000015f9: 	leaq	0x1c24(%rcx), %r11
    00001600: 	movq	%rax, 0x40(%rsp)
    00001605: 	movq	(%rsp), %rax
    00001609: 	leaq	0x968(%rcx), %r9
    00001610: 	leaq	0x12c8(%rcx), %r8
    00001617: 	leaq	0x1c28(%rcx), %rdi
    0000161e: 	nop # Size: 2
.Ltmp1458:
    00001620: 	movss	(%rax,%rbp), %xmm0
    00001625: 	movss	(%rax,%r15), %xmm3
    0000162b: 	addq	$0x10, %rdx
    0000162f: 	addq	$0x2580, %rax
    00001635: 	movss	-0x2580(%rax,%r14), %xmm2
    0000163f: 	movq	0x58(%rsp), %rsi
    00001644: 	movss	-0x2580(%rax,%r13), %xmm1
    0000164e: 	mulss	%xmm6, %xmm0
    00001652: 	movss	-0x2580(%rax,%r12), %xmm8
    0000165c: 	mulss	%xmm7, %xmm3
    00001660: 	addss	-0xc(%rdx), %xmm3
    00001665: 	mulss	%xmm7, %xmm2
    00001669: 	addss	-0x8(%rdx), %xmm2
    0000166e: 	mulss	%xmm7, %xmm1
    00001672: 	addss	-0x4(%rdx), %xmm1
    00001677: 	mulss	%xmm6, %xmm8
    0000167c: 	addss	%xmm0, %xmm3
    00001680: 	movss	-0x2580(%rax,%r9), %xmm0
    0000168a: 	mulss	%xmm5, %xmm0
    0000168e: 	addss	%xmm0, %xmm3
    00001692: 	movss	-0x2580(%rax,%rbx), %xmm0
    0000169b: 	mulss	%xmm6, %xmm0
    0000169f: 	addss	%xmm0, %xmm2
    000016a3: 	movss	-0x2580(%rax,%r8), %xmm0
    000016ad: 	mulss	%xmm5, %xmm0
    000016b1: 	addss	%xmm0, %xmm2
    000016b5: 	movss	-0x2580(%rax,%r11), %xmm0
    000016bf: 	mulss	%xmm6, %xmm0
    000016c3: 	addss	%xmm0, %xmm1
    000016c7: 	movss	-0x2580(%rax,%rdi), %xmm0
    000016d0: 	mulss	%xmm5, %xmm0
    000016d4: 	addss	%xmm0, %xmm1
    000016d8: 	movss	-0x2580(%rax,%rcx), %xmm0
    000016e1: 	mulss	%xmm7, %xmm0
    000016e5: 	addss	-0x10(%rdx), %xmm0
    000016ea: 	addss	%xmm8, %xmm0
    000016ef: 	movss	-0x2580(%rax,%r10), %xmm8
    000016f9: 	mulss	%xmm5, %xmm8
    000016fe: 	addss	%xmm8, %xmm0
    00001703: 	movaps	%xmm4, %xmm8
    00001707: 	mulss	-0x2580(%rax,%rsi), %xmm8
    00001711: 	movq	0x28(%rsp), %rsi
    00001716: 	addss	%xmm8, %xmm0
    0000171b: 	movss	%xmm0, -0x10(%rdx)
    00001720: 	movss	-0x2580(%rax,%rsi), %xmm0
    00001729: 	movq	0x38(%rsp), %rsi
    0000172e: 	mulss	%xmm4, %xmm0
    00001732: 	addss	%xmm3, %xmm0
    00001736: 	movss	%xmm0, -0xc(%rdx)
    0000173b: 	movss	-0x2580(%rax,%rsi), %xmm0
    00001744: 	movq	0x40(%rsp), %rsi
    00001749: 	mulss	%xmm4, %xmm0
    0000174d: 	addss	%xmm2, %xmm0
    00001751: 	movss	%xmm0, -0x8(%rdx)
    00001756: 	movss	-0x2580(%rax,%rsi), %xmm0
    0000175f: 	mulss	%xmm4, %xmm0
    00001763: 	addss	%xmm1, %xmm0
    00001767: 	movss	%xmm0, -0x4(%rdx)
    0000176c: 	cmpq	0x20(%rsp), %rax
    00001771: 	jne	.Ltmp1458 # Offset: 6001
    00001777: 	addq	$0x10, %rcx
    0000177b: 	cmpq	$0x960, %rcx
    00001782: 	jne	.Ltmp1459 # Offset: 6018
    00001788: 	addl	$0x1, 0x60(%rsp)
    0000178d: 	movl	0x60(%rsp), %eax
    00001791: 	cmpl	%eax, 0x80(%rsp)
    00001798: 	jne	.Ltmp1460 # Offset: 6040
    0000179e: 	movq	0x78(%rsp), %r14
    000017a3: 	movq	0x70(%rsp), %r15
.Ltmp1457:
    000017a8: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000017af: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    000017b6: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000017bd: 	je	.Ltmp1461 # Offset: 6077
.Ltmp1552:
    000017c3: 	movq	-0x20(%rax), %rbp
    000017c7: 	callq	clock@PLT # Offset: 6087
    000017cc: 	pxor	%xmm0, %xmm0
    000017d0: 	movq	%rax, end_time(%rip)
    000017d7: 	movq	%rbp, %rdi
    000017da: 	subq	start_time(%rip), %rax
    000017e1: 	cvtsi2sd	%rax, %xmm0
    000017e6: 	divsd	DATAat0x24960(%rip), %xmm0
    000017ee: 	callq	_Z13record_resultdPKc # Offset: 6126
    000017f3: 	movq	%r15, %rax
    000017f6: 	pxor	%xmm0, %xmm0
.Ltmp1462:
    000017fa: 	movups	(%rax), %xmm2
    000017fd: 	addq	$0x10, %rax
    00001801: 	addss	%xmm2, %xmm0
    00001805: 	movaps	%xmm2, %xmm1
    00001808: 	shufps	$0x55, %xmm2, %xmm1
    0000180c: 	addss	%xmm0, %xmm1
    00001810: 	movaps	%xmm2, %xmm0
    00001813: 	unpckhps	%xmm2, %xmm0
    00001816: 	shufps	$0xff, %xmm2, %xmm2
    0000181a: 	addss	%xmm1, %xmm0
    0000181e: 	addss	%xmm2, %xmm0
    00001822: 	cmpq	0x98(%rsp), %rax
    0000182a: 	jne	.Ltmp1462 # Offset: 6186
    0000182c: 	movss	DATAat0x24990(%rip), %xmm2
    00001834: 	pxor	%xmm1, %xmm1
    00001838: 	cvtsd2ss	init_value(%rip), %xmm1
    00001840: 	mulss	%xmm1, %xmm2
    00001844: 	mulss	%xmm1, %xmm2
    00001848: 	movaps	%xmm0, %xmm1
    0000184b: 	subss	%xmm2, %xmm1
    0000184f: 	movaps	%xmm0, %xmm2
    00001852: 	andps	DATAat0x24930(%rip), %xmm2
    00001859: 	cvtss2sd	%xmm2, %xmm2
    0000185d: 	comisd	DATAat0x24968(%rip), %xmm2
    00001865: 	jbe	.Ltmp1463 # Offset: 6245
    00001867: 	divss	%xmm0, %xmm1
.Ltmp1463:
    0000186b: 	movsd	DATAat0x24970(%rip), %xmm6
    00001873: 	cvtss2sd	%xmm1, %xmm1
    00001877: 	andpd	DATAat0x24940(%rip), %xmm1
    0000187f: 	movq	0xf0(%rsp), %rdx
    00001887: 	comisd	%xmm1, %xmm6
    0000188b: 	jbe	.Ltmp1464 # Offset: 6283
.Ltmp1551:
    00001891: 	cmpq	0x10(%rsp), %rdx
    00001896: 	je	.Ltmp1465 # Offset: 6294
    00001898: 	movq	0x100(%rsp), %rax
    000018a0: 	movq	%rdx, %rdi
    000018a3: 	leaq	0x1(%rax), %rsi
    000018a7: 	callq	_ZdlPvm@PLT # Offset: 6311
.Ltmp1465:
    000018ac: 	movq	0x30(%rsp), %rbx
    000018b1: 	movq	0x68(%rsp), %rsi
    000018b6: 	leaq	DATAat0x24740(%rip), %rdx
    000018bd: 	movq	%rbx, %rdi
    000018c0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6336
    000018c5: 	movq	(%rsp), %rdx
    000018c9: 	movq	%rbx, %r9
    000018cc: 	movl	$0x258, %r8d
    000018d2: 	movq	%r15, %rsi
    000018d5: 	movl	$0x320, %ecx
    000018da: 	movq	%r14, %rdi
    000018dd: 	callq	_Z14test_matvecmulIf21matvecmul_IJ_blocked1IfEEvPKT_PS2_S4_iiT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6365
    000018e2: 	movq	0xf0(%rsp), %rdi
    000018ea: 	cmpq	0x10(%rsp), %rdi
    000018ef: 	je	.Ltmp1466 # Offset: 6383
    000018f1: 	movq	0x100(%rsp), %rax
    000018f9: 	leaq	0x1(%rax), %rsi
    000018fd: 	callq	_ZdlPvm@PLT # Offset: 6397
.Ltmp1466:
    00001902: 	movq	0x30(%rsp), %rbx
    00001907: 	movq	0x68(%rsp), %rsi
    0000190c: 	leaq	DATAat0x24768(%rip), %rdx
    00001913: 	movq	%rbx, %rdi
    00001916: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6422
    0000191b: 	movq	(%rsp), %rdx
    0000191f: 	movq	%rbx, %r9
    00001922: 	movl	$0x258, %r8d
    00001928: 	movq	%r15, %rsi
    0000192b: 	movl	$0x320, %ecx
    00001930: 	movq	%r14, %rdi
    00001933: 	callq	_Z14test_matvecmulIf21matvecmul_JI_blocked1IfEEvPKT_PS2_S4_iiT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6451
    00001938: 	movq	0xf0(%rsp), %rdi
    00001940: 	cmpq	0x10(%rsp), %rdi
    00001945: 	je	.Ltmp1467 # Offset: 6469
    00001947: 	movq	0x100(%rsp), %rax
    0000194f: 	leaq	0x1(%rax), %rsi
    00001953: 	callq	_ZdlPvm@PLT # Offset: 6483
.Ltmp1467:
    00001958: 	movq	0x30(%rsp), %rbx
    0000195d: 	movq	0x68(%rsp), %rsi
    00001962: 	leaq	DATAat0x24790(%rip), %rdx
    00001969: 	movq	%rbx, %rdi
    0000196c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6508
    00001971: 	movq	(%rsp), %rdx
    00001975: 	movq	%rbx, %r9
    00001978: 	movl	$0x258, %r8d
    0000197e: 	movq	%r15, %rsi
    00001981: 	movl	$0x320, %ecx
    00001986: 	movq	%r14, %rdi
    00001989: 	callq	_Z14test_matvecmulIf21matvecmul_IJ_blocked2IfEEvPKT_PS2_S4_iiT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6537
    0000198e: 	movq	0xf0(%rsp), %rdi
    00001996: 	cmpq	0x10(%rsp), %rdi
    0000199b: 	je	.Ltmp1468 # Offset: 6555
    0000199d: 	movq	0x100(%rsp), %rax
    000019a5: 	leaq	0x1(%rax), %rsi
    000019a9: 	callq	_ZdlPvm@PLT # Offset: 6569
.Ltmp1468:
    000019ae: 	movq	0x30(%rsp), %rbx
    000019b3: 	movq	0x68(%rsp), %rsi
    000019b8: 	leaq	DATAat0x247b8(%rip), %rdx
    000019bf: 	movq	%rbx, %rdi
    000019c2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6594
    000019c7: 	movq	(%rsp), %rdx
    000019cb: 	movq	%rbx, %r9
    000019ce: 	movl	$0x258, %r8d
    000019d4: 	movq	%r15, %rsi
    000019d7: 	movl	$0x320, %ecx
    000019dc: 	movq	%r14, %rdi
    000019df: 	callq	_Z14test_matvecmulIf21matvecmul_JI_blocked2IfEEvPKT_PS2_S4_iiT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6623
    000019e4: 	movq	0xf0(%rsp), %rdi
    000019ec: 	cmpq	0x10(%rsp), %rdi
    000019f1: 	je	.Ltmp1469 # Offset: 6641
    000019f3: 	movq	0x100(%rsp), %rax
    000019fb: 	leaq	0x1(%rax), %rsi
    000019ff: 	callq	_ZdlPvm@PLT # Offset: 6655
.Ltmp1469:
    00001a04: 	movq	0x30(%rsp), %rbx
    00001a09: 	movq	0x68(%rsp), %rsi
    00001a0e: 	leaq	DATAat0x247e0(%rip), %rdx
    00001a15: 	movq	%rbx, %rdi
    00001a18: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6680
    00001a1d: 	movq	%rbx, %rsi
    00001a20: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00001a27: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 6695
    00001a2c: 	callq	clock@PLT # Offset: 6700
    00001a31: 	movq	%rax, start_time(%rip)
    00001a38: 	movl	iterations(%rip), %eax
    00001a3e: 	movl	%eax, 0xa8(%rsp)
    00001a45: 	testl	%eax, %eax
    00001a47: 	jle	.Ltmp1470 # Offset: 6727
    00001a4d: 	leaq	0xc88(%r15), %rax
    00001a54: 	movq	%r15, %r13
    00001a57: 	movl	$0x0, 0x90(%rsp)
    00001a62: 	movq	%rax, 0x50(%rsp)
    00001a67: 	leaq	0x8(%r15), %rax
    00001a6b: 	movq	%rax, 0x48(%rsp)
    00001a70: 	leaq	0x10(%r15), %rax
    00001a74: 	movq	(%rsp), %r15
    00001a78: 	movq	%rax, 0xb0(%rsp)
.Ltmp1478:
    00001a80: 	movq	$0x0, (%r13)
    00001a88: 	movq	0x50(%rsp), %rax
    00001a8d: 	movq	%r13, %rcx
    00001a90: 	movq	$0x0, -0x10(%rax)
    00001a98: 	movq	0x48(%rsp), %rdi
    00001a9d: 	xorl	%eax, %eax
    00001a9f: 	andq	$-0x8, %rdi
    00001aa3: 	subq	%rdi, %rcx
    00001aa6: 	addl	$0xc80, %ecx
    00001aac: 	shrl	$0x3, %ecx
    00001aaf: 	rep		stosq	%rax, %es:(%rdi)
    00001ab2: 	movq	%r13, 0x38(%rsp)
    00001ab7: 	movq	$0x0, 0x88(%rsp)
    00001ac3: 	movq	$0x258, 0xa0(%rsp)
.Ltmp1477:
    00001acf: 	movq	0x88(%rsp), %rbx
    00001ad7: 	movl	%ebx, %eax
    00001ad9: 	leal	0x50(%rbx), %edi
    00001adc: 	movl	%ebx, 0x58(%rsp)
    00001ae0: 	addl	$0x4d, %eax
    00001ae3: 	movl	%edi, %ebp
    00001ae5: 	movl	%edi, 0x40(%rsp)
    00001ae9: 	cmpl	%ebx, %eax
    00001aeb: 	movl	%eax, 0x28(%rsp)
    00001aef: 	movq	0xa0(%rsp), %rax
    00001af7: 	cmovlel	%ebx, %ebp
    00001afa: 	xorl	%ecx, %ecx
    00001afc: 	movslq	%ebp, %r12
    00001aff: 	subl	%ebp, %edi
    00001b01: 	imulq	$0x258, %r12, %rdx
    00001b08: 	movl	%edi, %r11d
    00001b0b: 	imulq	$0x960, %r12, %rsi
    00001b12: 	subq	%rdx, %rax
    00001b15: 	shlq	$0x2, %rax
    00001b19: 	addq	%r15, %rsi
    00001b1c: 	movq	%rax, 0x60(%rsp)
    00001b21: 	movq	0xb0(%rsp), %rax
    00001b29: 	leaq	0x130(%rax,%rbx,4), %r10
    00001b31: 	leal	-0x1(%rdi), %eax
    00001b34: 	movl	%eax, 0x70(%rsp)
    00001b38: 	movl	%edi, %eax
    00001b3a: 	leaq	(%r13,%r12,4), %rbx
    00001b3f: 	andl	$-0x4, %eax
    00001b42: 	movl	%eax, 0x78(%rsp)
    00001b46: 	addl	%ebp, %eax
    00001b48: 	movl	%eax, 0x80(%rsp)
    00001b4f: 	nop # Size: 1
.Ltmp1476:
    00001b50: 	movss	(%r14,%rcx,4), %xmm0
    00001b56: 	movl	0x58(%rsp), %edi
    00001b5a: 	movl	%ecx, %r9d
    00001b5d: 	cmpl	%edi, 0x28(%rsp)
    00001b61: 	jle	.Ltmp1471 # Offset: 7009
    00001b63: 	movq	0x60(%rsp), %rax
    00001b68: 	leaq	(%rsi,%rax), %rdx
    00001b6c: 	movq	0x38(%rsp), %rax
    00001b71: 	nopl	(%rax) # Size: 7
.Ltmp1472:
    00001b78: 	movss	-0x960(%rdx), %xmm1
    00001b80: 	addq	$0x10, %rax
    00001b84: 	addq	$0x2580, %rdx
    00001b8b: 	mulss	%xmm0, %xmm1
    00001b8f: 	addss	-0x10(%rax), %xmm1
    00001b94: 	movss	%xmm1, -0x10(%rax)
    00001b99: 	movss	-0x2580(%rdx), %xmm1
    00001ba1: 	mulss	%xmm0, %xmm1
    00001ba5: 	addss	-0xc(%rax), %xmm1
    00001baa: 	movss	%xmm1, -0xc(%rax)
    00001baf: 	movss	-0x1c20(%rdx), %xmm1
    00001bb7: 	mulss	%xmm0, %xmm1
    00001bbb: 	addss	-0x8(%rax), %xmm1
    00001bc0: 	movss	%xmm1, -0x8(%rax)
    00001bc5: 	movss	-0x12c0(%rdx), %xmm1
    00001bcd: 	mulss	%xmm0, %xmm1
    00001bd1: 	addss	-0x4(%rax), %xmm1
    00001bd6: 	movss	%xmm1, -0x4(%rax)
    00001bdb: 	cmpq	%r10, %rax
    00001bde: 	jne	.Ltmp1472 # Offset: 7134
.Ltmp1471:
    00001be0: 	cmpl	%ebp, 0x40(%rsp)
    00001be4: 	jle	.Ltmp1473 # Offset: 7140
    00001bea: 	cmpl	$0x2, 0x70(%rsp)
    00001bef: 	jbe	.Ltmp1474 # Offset: 7151
    00001bf5: 	movss	0x1c20(%rsi), %xmm1
    00001bfd: 	movss	0x12c0(%rsi), %xmm2
    00001c05: 	movss	0x960(%rsi), %xmm3
    00001c0d: 	movups	(%rbx), %xmm7
    00001c10: 	unpcklps	%xmm1, %xmm2
    00001c13: 	movss	(%rsi), %xmm1
    00001c17: 	movl	0x78(%rsp), %eax
    00001c1b: 	unpcklps	%xmm3, %xmm1
    00001c1e: 	movlhps	%xmm2, %xmm1
    00001c21: 	movaps	%xmm0, %xmm2
    00001c24: 	shufps	$0x0, %xmm2, %xmm2
    00001c28: 	mulps	%xmm2, %xmm1
    00001c2b: 	addps	%xmm7, %xmm1
    00001c2e: 	movups	%xmm1, (%rbx)
    00001c31: 	cmpl	%r11d, %eax
    00001c34: 	je	.Ltmp1473 # Offset: 7220
    00001c36: 	movl	%eax, %edx
    00001c38: 	movl	0x80(%rsp), %eax
.Ltmp1540:
    00001c3f: 	movl	%r11d, %edi
    00001c42: 	subl	%edx, %edi
    00001c44: 	cmpl	$0x1, %edi
    00001c47: 	je	.Ltmp1475 # Offset: 7239
    00001c49: 	addq	%r12, %rdx
    00001c4c: 	leaq	(%r13,%rdx,4), %r8
    00001c51: 	imulq	$0x258, %rdx, %rdx
    00001c58: 	addq	%rcx, %rdx
    00001c5b: 	leaq	(%r15,%rdx,4), %rdx
    00001c5f: 	movss	0x960(%rdx), %xmm2
    00001c67: 	movss	(%rdx), %xmm1
    00001c6b: 	movl	%edi, %edx
    00001c6d: 	andl	$-0x2, %edx
    00001c70: 	unpcklps	%xmm2, %xmm1
    00001c73: 	movaps	%xmm0, %xmm2
    00001c76: 	addl	%edx, %eax
    00001c78: 	shufps	$0xe0, %xmm2, %xmm2
    00001c7c: 	mulps	%xmm2, %xmm1
    00001c7f: 	movq	(%r8), %xmm2
    00001c84: 	addps	%xmm2, %xmm1
    00001c87: 	movlps	%xmm1, (%r8)
    00001c8b: 	cmpl	%edi, %edx
    00001c8d: 	je	.Ltmp1473 # Offset: 7309
.Ltmp1475:
    00001c8f: 	movslq	%eax, %rdx
    00001c92: 	imull	$0x258, %eax, %eax
    00001c98: 	leaq	(%r13,%rdx,4), %rdx
    00001c9d: 	addl	%r9d, %eax
    00001ca0: 	cltq
    00001ca2: 	mulss	(%r15,%rax,4), %xmm0
    00001ca8: 	addss	(%rdx), %xmm0
    00001cac: 	movss	%xmm0, (%rdx)
.Ltmp1473:
    00001cb0: 	addq	$0x1, %rcx
    00001cb4: 	addq	$0x4, %rsi
    00001cb8: 	cmpq	$0x258, %rcx
    00001cbf: 	jne	.Ltmp1476 # Offset: 7359
    00001cc5: 	addq	$0x50, 0x88(%rsp)
    00001cce: 	movq	0x88(%rsp), %rax
    00001cd6: 	addq	$0x140, 0x38(%rsp)
    00001cdf: 	addq	$0xbb80, 0xa0(%rsp)
    00001ceb: 	cmpq	$0x320, %rax
    00001cf1: 	jne	.Ltmp1477 # Offset: 7409
    00001cf7: 	addl	$0x1, 0x90(%rsp)
    00001cff: 	movl	0x90(%rsp), %eax
    00001d06: 	cmpl	%eax, 0xa8(%rsp)
    00001d0d: 	jne	.Ltmp1478 # Offset: 7437
    00001d13: 	movq	%r13, %r15
.Ltmp1470:
    00001d16: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001d1d: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00001d24: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001d2b: 	je	.Ltmp1479 # Offset: 7467
.Ltmp1550:
    00001d31: 	movq	-0x20(%rax), %rbp
    00001d35: 	callq	clock@PLT # Offset: 7477
    00001d3a: 	pxor	%xmm0, %xmm0
    00001d3e: 	movq	%rax, end_time(%rip)
    00001d45: 	movq	%rbp, %rdi
    00001d48: 	subq	start_time(%rip), %rax
    00001d4f: 	cvtsi2sd	%rax, %xmm0
    00001d54: 	divsd	DATAat0x24960(%rip), %xmm0
    00001d5c: 	callq	_Z13record_resultdPKc # Offset: 7516
    00001d61: 	movq	%r15, %rax
    00001d64: 	pxor	%xmm0, %xmm0
.Ltmp1480:
    00001d68: 	movups	(%rax), %xmm2
    00001d6b: 	addq	$0x10, %rax
    00001d6f: 	addss	%xmm2, %xmm0
    00001d73: 	movaps	%xmm2, %xmm1
    00001d76: 	shufps	$0x55, %xmm2, %xmm1
    00001d7a: 	addss	%xmm0, %xmm1
    00001d7e: 	movaps	%xmm2, %xmm0
    00001d81: 	unpckhps	%xmm2, %xmm0
    00001d84: 	shufps	$0xff, %xmm2, %xmm2
    00001d88: 	addss	%xmm1, %xmm0
    00001d8c: 	addss	%xmm2, %xmm0
    00001d90: 	cmpq	%rax, 0x98(%rsp)
    00001d98: 	jne	.Ltmp1480 # Offset: 7576
    00001d9a: 	movss	DATAat0x24990(%rip), %xmm2
    00001da2: 	pxor	%xmm1, %xmm1
    00001da6: 	cvtsd2ss	init_value(%rip), %xmm1
    00001dae: 	mulss	%xmm1, %xmm2
    00001db2: 	mulss	%xmm1, %xmm2
    00001db6: 	movaps	%xmm0, %xmm1
    00001db9: 	subss	%xmm2, %xmm1
    00001dbd: 	movaps	%xmm0, %xmm2
    00001dc0: 	andps	DATAat0x24930(%rip), %xmm2
    00001dc7: 	cvtss2sd	%xmm2, %xmm2
    00001dcb: 	comisd	DATAat0x24968(%rip), %xmm2
    00001dd3: 	jbe	.Ltmp1481 # Offset: 7635
    00001dd5: 	divss	%xmm0, %xmm1
.Ltmp1481:
    00001dd9: 	movsd	DATAat0x24970(%rip), %xmm7
    00001de1: 	cvtss2sd	%xmm1, %xmm1
    00001de5: 	andpd	DATAat0x24940(%rip), %xmm1
    00001ded: 	movq	0xf0(%rsp), %rdx
    00001df5: 	comisd	%xmm1, %xmm7
    00001df9: 	jbe	.Ltmp1482 # Offset: 7673
.Ltmp1549:
    00001dff: 	cmpq	0x10(%rsp), %rdx
    00001e04: 	je	.Ltmp1483 # Offset: 7684
    00001e06: 	movq	0x100(%rsp), %rax
    00001e0e: 	movq	%rdx, %rdi
    00001e11: 	leaq	0x1(%rax), %rsi
    00001e15: 	callq	_ZdlPvm@PLT # Offset: 7701
.Ltmp1483:
    00001e1a: 	movq	0x30(%rsp), %rbx
    00001e1f: 	movq	0x68(%rsp), %rsi
    00001e24: 	leaq	DATAat0x24810(%rip), %rdx
    00001e2b: 	movq	%rbx, %rdi
    00001e2e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7726
    00001e33: 	movq	%rbx, %rsi
    00001e36: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00001e3d: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 7741
    00001e42: 	callq	clock@PLT # Offset: 7746
    00001e47: 	movl	iterations(%rip), %r8d
    00001e4e: 	xorl	%esi, %esi
    00001e50: 	movq	%rax, start_time(%rip)
    00001e57: 	leaq	0xc88(%r15), %rax
    00001e5e: 	movq	%rax, 0x50(%rsp)
    00001e63: 	leaq	0x8(%r15), %rax
    00001e67: 	movq	%rax, 0x48(%rsp)
    00001e6c: 	xorl	%eax, %eax
    00001e6e: 	testl	%r8d, %r8d
    00001e71: 	jle	.Ltmp1484 # Offset: 7793
.Ltmp1487:
    00001e77: 	movq	%rax, (%r15)
    00001e7a: 	movq	0x50(%rsp), %rbx
    00001e7f: 	movq	%r15, %rcx
    00001e82: 	movq	%rax, -0x10(%rbx)
    00001e86: 	movq	0x48(%rsp), %rdi
    00001e8b: 	andq	$-0x8, %rdi
    00001e8f: 	subq	%rdi, %rcx
    00001e92: 	addl	$0xc80, %ecx
    00001e98: 	shrl	$0x3, %ecx
    00001e9b: 	rep		stosq	%rax, %es:(%rdi)
    00001e9e: 	movq	%r15, %rdi
    00001ea1: 	movq	(%rsp), %rcx
.Ltmp1486:
    00001ea5: 	movss	(%rdi), %xmm1
    00001ea9: 	xorl	%edx, %edx
    00001eab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1485:
    00001eb0: 	movups	(%r14,%rdx), %xmm0
    00001eb5: 	movups	(%rcx,%rdx), %xmm6
    00001eb9: 	addq	$0x10, %rdx
    00001ebd: 	mulps	%xmm6, %xmm0
    00001ec0: 	addps	%xmm0, %xmm1
    00001ec3: 	cmpq	$0x960, %rdx
    00001eca: 	jne	.Ltmp1485 # Offset: 7882
    00001ecc: 	movaps	%xmm1, %xmm2
    00001ecf: 	movaps	%xmm1, %xmm0
    00001ed2: 	addq	$0x4, %rdi
    00001ed6: 	addq	$0x960, %rcx
    00001edd: 	shufps	$0x55, %xmm1, %xmm2
    00001ee1: 	addss	%xmm1, %xmm2
    00001ee5: 	unpckhps	%xmm1, %xmm0
    00001ee8: 	shufps	$0xff, %xmm1, %xmm1
    00001eec: 	addss	%xmm0, %xmm2
    00001ef0: 	movaps	%xmm1, %xmm0
    00001ef3: 	addss	%xmm2, %xmm0
    00001ef7: 	movss	%xmm0, -0x4(%rdi)
    00001efc: 	cmpq	0x20(%rsp), %rcx
    00001f01: 	jne	.Ltmp1486 # Offset: 7937
    00001f03: 	addl	$0x1, %esi
    00001f06: 	cmpl	%r8d, %esi
    00001f09: 	jne	.Ltmp1487 # Offset: 7945
.Ltmp1484:
    00001f0f: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001f16: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00001f1d: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001f24: 	je	.Ltmp1488 # Offset: 7972
.Ltmp1548:
    00001f2a: 	movq	-0x20(%rax), %rbp
    00001f2e: 	callq	clock@PLT # Offset: 7982
    00001f33: 	pxor	%xmm0, %xmm0
    00001f37: 	movq	%rax, end_time(%rip)
    00001f3e: 	movq	%rbp, %rdi
    00001f41: 	subq	start_time(%rip), %rax
    00001f48: 	cvtsi2sd	%rax, %xmm0
    00001f4d: 	divsd	DATAat0x24960(%rip), %xmm0
    00001f55: 	callq	_Z13record_resultdPKc # Offset: 8021
    00001f5a: 	movq	%r15, %rax
    00001f5d: 	pxor	%xmm0, %xmm0
.Ltmp1489:
    00001f61: 	movups	(%rax), %xmm2
    00001f64: 	addq	$0x10, %rax
    00001f68: 	addss	%xmm2, %xmm0
    00001f6c: 	movaps	%xmm2, %xmm1
    00001f6f: 	shufps	$0x55, %xmm2, %xmm1
    00001f73: 	addss	%xmm0, %xmm1
    00001f77: 	movaps	%xmm2, %xmm0
    00001f7a: 	unpckhps	%xmm2, %xmm0
    00001f7d: 	shufps	$0xff, %xmm2, %xmm2
    00001f81: 	addss	%xmm1, %xmm0
    00001f85: 	addss	%xmm2, %xmm0
    00001f89: 	cmpq	%rax, 0x98(%rsp)
    00001f91: 	jne	.Ltmp1489 # Offset: 8081
    00001f93: 	movq	0x30(%rsp), %rdi
    00001f98: 	callq	_Z9check_sumIfEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 8088
    00001f9d: 	movq	0xf0(%rsp), %rdi
    00001fa5: 	cmpq	0x10(%rsp), %rdi
    00001faa: 	je	.Ltmp1490 # Offset: 8106
    00001fac: 	movq	0x100(%rsp), %rax
    00001fb4: 	leaq	0x1(%rax), %rsi
    00001fb8: 	callq	_ZdlPvm@PLT # Offset: 8120
.Ltmp1490:
    00001fbd: 	movq	0x30(%rsp), %rbx
    00001fc2: 	movq	0x68(%rsp), %rsi
    00001fc7: 	leaq	DATAat0x24840(%rip), %rdx
    00001fce: 	movq	%rbx, %rdi
    00001fd1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8145
    00001fd6: 	movq	(%rsp), %rdx
    00001fda: 	movq	%rbx, %r9
    00001fdd: 	movl	$0x258, %r8d
    00001fe3: 	movq	%r15, %rsi
    00001fe6: 	movl	$0x320, %ecx
    00001feb: 	movq	%r14, %rdi
    00001fee: 	callq	_Z14test_matvecmulIf31matvecmul_JI_blocked_unrolled1AIfEEvPKT_PS2_S4_iiT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 8174
    00001ff3: 	movq	0xf0(%rsp), %rdi
    00001ffb: 	cmpq	0x10(%rsp), %rdi
    00002000: 	je	.Ltmp1491 # Offset: 8192
    00002002: 	movq	0x100(%rsp), %rax
    0000200a: 	leaq	0x1(%rax), %rsi
    0000200e: 	callq	_ZdlPvm@PLT # Offset: 8206
.Ltmp1491:
    00002013: 	movq	0x30(%rsp), %rbx
    00002018: 	movq	0x68(%rsp), %rsi
    0000201d: 	leaq	DATAat0x24870(%rip), %rdx
    00002024: 	movq	%rbx, %rdi
    00002027: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8231
    0000202c: 	movq	%rbx, %rsi
    0000202f: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00002036: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 8246
    0000203b: 	callq	clock@PLT # Offset: 8251
    00002040: 	leaq	0xc88(%r15), %rbx
    00002047: 	movl	$0x0, 0x88(%rsp)
    00002052: 	movq	%rax, start_time(%rip)
    00002059: 	movl	iterations(%rip), %eax
    0000205f: 	movq	%rbx, 0x50(%rsp)
    00002064: 	leaq	0x8(%r15), %rbx
    00002068: 	movq	%rbx, 0x48(%rsp)
    0000206d: 	leaq	0x4(%r15), %rbx
    00002071: 	movl	%eax, 0xa0(%rsp)
    00002078: 	movq	%rbx, 0xa8(%rsp)
    00002080: 	testl	%eax, %eax
    00002082: 	jle	.Ltmp1492 # Offset: 8322
    00002088: 	movq	%r15, 0x90(%rsp)
    00002090: 	movq	%r14, %r15
.Ltmp1502:
    00002093: 	movq	0x90(%rsp), %rbx
    0000209b: 	movq	%r15, %r14
    0000209e: 	movq	$0x0, (%rbx)
    000020a5: 	movq	0x50(%rsp), %rax
    000020aa: 	movq	%rbx, %rcx
    000020ad: 	movq	$0x0, -0x10(%rax)
    000020b5: 	movq	0x48(%rsp), %rdi
    000020ba: 	xorl	%eax, %eax
    000020bc: 	andq	$-0x8, %rdi
    000020c0: 	subq	%rdi, %rcx
    000020c3: 	addl	$0xc80, %ecx
    000020c9: 	shrl	$0x3, %ecx
    000020cc: 	rep		stosq	%rax, %es:(%rdi)
    000020cf: 	movq	%rbx, 0x60(%rsp)
    000020d4: 	movq	$0x0, 0x80(%rsp)
    000020e0: 	movq	$0x0, 0x70(%rsp)
    000020e9: 	movq	(%rsp), %rax
    000020ed: 	movq	%rax, 0x78(%rsp)
.Ltmp1501:
    000020f2: 	movq	0x80(%rsp), %rbx
    000020fa: 	movl	%ebx, %eax
    000020fc: 	addl	$0x19, %eax
    000020ff: 	cmpl	%ebx, %eax
    00002101: 	jle	.Ltmp1493 # Offset: 8449
    00002107: 	movq	0xa8(%rsp), %rax
    0000210f: 	xorl	%r15d, %r15d
    00002112: 	leaq	0x60(%rax,%rbx,4), %rax
    00002117: 	movq	%rax, 0x40(%rsp)
    0000211c: 	nopl	(%rax) # Size: 4
.Ltmp1500:
    00002120: 	movl	$0x258, %eax
    00002125: 	movl	%r15d, 0x38(%rsp)
    0000212a: 	leal	0x100(%r15), %esi
    00002131: 	leaq	(,%r15,4), %r13
    00002139: 	cmpl	%eax, %esi
    0000213b: 	movl	%r15d, 0x28(%rsp)
    00002140: 	movq	0x70(%rsp), %r9
    00002145: 	leaq	(%r14,%r13), %r12
    00002149: 	cmovgl	%eax, %esi
    0000214c: 	movq	0x78(%rsp), %r10
    00002151: 	movq	0x60(%rsp), %rdi
    00002156: 	leal	-0x3(%rsi), %eax
    00002159: 	movl	%eax, 0x20(%rsp)
    0000215d: 	movl	$0xfffffffc, %eax
    00002162: 	subl	%r15d, %eax
    00002165: 	addl	%esi, %eax
    00002167: 	movl	%eax, %r11d
    0000216a: 	andl	$-0x4, %eax
    0000216d: 	leal	0x4(%rax,%r15), %eax
    00002172: 	shrl	$0x2, %r11d
    00002176: 	movl	%eax, 0x58(%rsp)
    0000217a: 	addl	$0x1, %r11d
    0000217e: 	nop # Size: 2
.Ltmp1499:
    00002180: 	movss	(%rdi), %xmm0
    00002184: 	movl	0x28(%rsp), %ebx
    00002188: 	cmpl	%ebx, 0x20(%rsp)
    0000218c: 	jle	.Ltmp1494 # Offset: 8588
    00002192: 	pxor	%xmm1, %xmm1
    00002196: 	leaq	(%r10,%r13), %rcx
    0000219a: 	xorl	%eax, %eax
    0000219c: 	xorl	%edx, %edx
    0000219e: 	movss	%xmm0, %xmm1
    000021a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1495:
    000021a8: 	movups	(%r12,%rax), %xmm0
    000021ad: 	movups	(%rcx,%rax), %xmm7
    000021b1: 	addl	$0x1, %edx
    000021b4: 	addq	$0x10, %rax
    000021b8: 	mulps	%xmm7, %xmm0
    000021bb: 	addps	%xmm0, %xmm1
    000021be: 	cmpl	%r11d, %edx
    000021c1: 	jb	.Ltmp1495 # Offset: 8641
    000021c3: 	movaps	%xmm1, %xmm6
    000021c6: 	movaps	%xmm1, %xmm5
    000021c9: 	movl	0x58(%rsp), %eax
    000021cd: 	movaps	%xmm1, %xmm0
    000021d0: 	unpckhps	%xmm1, %xmm5
    000021d3: 	shufps	$0x55, %xmm1, %xmm6
    000021d7: 	shufps	$0xff, %xmm1, %xmm1
    000021db: 	movaps	%xmm1, %xmm3
.Ltmp1541:
    000021de: 	cmpl	%eax, %esi
    000021e0: 	jle	.Ltmp1496 # Offset: 8672
    000021e6: 	movl	%esi, %r8d
    000021e9: 	subl	%eax, %r8d
    000021ec: 	leal	-0x1(%r8), %edx
    000021f0: 	cmpl	$0x2, %edx
    000021f3: 	jbe	.Ltmp1497 # Offset: 8691
    000021f5: 	movslq	%eax, %rdx
    000021f8: 	movq	(%rsp), %rbx
    000021fc: 	leaq	(%r9,%rdx), %rcx
    00002200: 	leaq	(%rbx,%rcx,4), %rbp
    00002204: 	leaq	(%r14,%rdx,4), %rbx
    00002208: 	movl	%r8d, %edx
    0000220b: 	xorl	%ecx, %ecx
    0000220d: 	shrl	$0x2, %edx
    00002210: 	shlq	$0x4, %rdx
.Ltmp1498:
    00002214: 	movups	(%rbx,%rcx), %xmm2
    00002218: 	movups	(%rbp,%rcx), %xmm7
    0000221d: 	addq	$0x10, %rcx
    00002221: 	mulps	%xmm7, %xmm2
    00002224: 	addss	%xmm2, %xmm0
    00002228: 	movaps	%xmm2, %xmm4
    0000222b: 	movaps	%xmm2, %xmm1
    0000222e: 	shufps	$0x55, %xmm2, %xmm4
    00002232: 	unpckhps	%xmm2, %xmm1
    00002235: 	shufps	$0xff, %xmm2, %xmm2
    00002239: 	addss	%xmm0, %xmm4
    0000223d: 	movaps	%xmm1, %xmm0
    00002240: 	addss	%xmm4, %xmm0
    00002244: 	addss	%xmm2, %xmm0
    00002248: 	cmpq	%rdx, %rcx
    0000224b: 	jne	.Ltmp1498 # Offset: 8779
    0000224d: 	movl	%r8d, %edx
    00002250: 	andl	$-0x4, %edx
    00002253: 	addl	%edx, %eax
    00002255: 	cmpl	%edx, %r8d
    00002258: 	je	.Ltmp1496 # Offset: 8792
.Ltmp1497:
    0000225a: 	movslq	%eax, %rcx
    0000225d: 	movss	(%r10,%rcx,4), %xmm1
    00002263: 	mulss	(%r14,%rcx,4), %xmm1
    00002269: 	leaq	(,%rcx,4), %rdx
    00002271: 	leal	0x1(%rax), %ecx
    00002274: 	addss	%xmm1, %xmm0
    00002278: 	cmpl	%esi, %ecx
    0000227a: 	jge	.Ltmp1496 # Offset: 8826
    0000227c: 	movss	0x4(%r14,%rdx), %xmm1
    00002283: 	mulss	0x4(%r10,%rdx), %xmm1
    0000228a: 	addl	$0x2, %eax
    0000228d: 	addss	%xmm1, %xmm0
    00002291: 	cmpl	%esi, %eax
    00002293: 	jge	.Ltmp1496 # Offset: 8851
    00002295: 	movss	0x8(%r14,%rdx), %xmm1
    0000229c: 	mulss	0x8(%r10,%rdx), %xmm1
    000022a3: 	addss	%xmm1, %xmm0
    000022a7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1496:
    000022b0: 	addss	%xmm6, %xmm0
    000022b4: 	addq	$0x4, %rdi
    000022b8: 	addq	$0x960, %r10
    000022bf: 	addq	$0x258, %r9
    000022c6: 	addss	%xmm5, %xmm0
    000022ca: 	addss	%xmm3, %xmm0
    000022ce: 	movss	%xmm0, -0x4(%rdi)
    000022d3: 	cmpq	%rdi, 0x40(%rsp)
    000022d8: 	jne	.Ltmp1499 # Offset: 8920
    000022de: 	addq	$0x100, %r15
    000022e5: 	cmpq	$0x300, %r15
    000022ec: 	jne	.Ltmp1500 # Offset: 8940
.Ltmp1493:
    000022f2: 	addq	$0x19, 0x80(%rsp)
    000022fb: 	movq	0x80(%rsp), %rax
    00002303: 	addq	$0x64, 0x60(%rsp)
    00002309: 	addq	$0xea60, 0x78(%rsp)
    00002312: 	addq	$0x3a98, 0x70(%rsp)
    0000231b: 	cmpq	$0x320, %rax
    00002321: 	jne	.Ltmp1501 # Offset: 8993
    00002327: 	addl	$0x1, 0x88(%rsp)
    0000232f: 	movq	%r14, %r15
    00002332: 	movl	0x88(%rsp), %eax
    00002339: 	cmpl	%eax, 0xa0(%rsp)
    00002340: 	jne	.Ltmp1502 # Offset: 9024
    00002346: 	movq	0x90(%rsp), %r15
.Ltmp1492:
    0000234e: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002355: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    0000235c: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00002363: 	je	.Ltmp1503 # Offset: 9059
.Ltmp1547:
    00002369: 	movq	-0x20(%rax), %rbp
    0000236d: 	callq	clock@PLT # Offset: 9069
    00002372: 	pxor	%xmm0, %xmm0
    00002376: 	movq	%rax, end_time(%rip)
    0000237d: 	movq	%rbp, %rdi
    00002380: 	subq	start_time(%rip), %rax
    00002387: 	cvtsi2sd	%rax, %xmm0
    0000238c: 	divsd	DATAat0x24960(%rip), %xmm0
    00002394: 	callq	_Z13record_resultdPKc # Offset: 9108
    00002399: 	movq	%r15, %rax
    0000239c: 	pxor	%xmm1, %xmm1
.Ltmp1504:
    000023a0: 	movups	(%rax), %xmm0
    000023a3: 	addq	$0x10, %rax
    000023a7: 	addss	%xmm0, %xmm1
    000023ab: 	movaps	%xmm0, %xmm2
    000023ae: 	shufps	$0x55, %xmm0, %xmm2
    000023b2: 	addss	%xmm2, %xmm1
    000023b6: 	movaps	%xmm0, %xmm2
    000023b9: 	unpckhps	%xmm0, %xmm2
    000023bc: 	shufps	$0xff, %xmm0, %xmm0
    000023c0: 	addss	%xmm2, %xmm1
    000023c4: 	addss	%xmm0, %xmm1
    000023c8: 	cmpq	0x98(%rsp), %rax
    000023d0: 	jne	.Ltmp1504 # Offset: 9168
    000023d2: 	movq	0x30(%rsp), %rdi
    000023d7: 	movaps	%xmm1, %xmm0
    000023da: 	callq	_Z9check_sumIfEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9178
    000023df: 	movq	0xf0(%rsp), %rdi
    000023e7: 	cmpq	0x10(%rsp), %rdi
    000023ec: 	je	.Ltmp1505 # Offset: 9196
    000023ee: 	movq	0x100(%rsp), %rax
    000023f6: 	leaq	0x1(%rax), %rsi
    000023fa: 	callq	_ZdlPvm@PLT # Offset: 9210
.Ltmp1505:
    000023ff: 	movq	0x30(%rsp), %rbx
    00002404: 	movq	0x68(%rsp), %rsi
    00002409: 	leaq	DATAat0x248a0(%rip), %rdx
    00002410: 	movq	%rbx, %rdi
    00002413: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9235
    00002418: 	movq	%rbx, %rsi
    0000241b: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00002422: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 9250
    00002427: 	callq	clock@PLT # Offset: 9255
    0000242c: 	leaq	0xc88(%r15), %rbx
    00002433: 	movl	$0x0, 0x88(%rsp)
    0000243e: 	movq	%rax, start_time(%rip)
    00002445: 	movl	iterations(%rip), %eax
    0000244b: 	movq	%rbx, 0x50(%rsp)
    00002450: 	leaq	0x8(%r15), %rbx
    00002454: 	movq	%rbx, 0x48(%rsp)
    00002459: 	leaq	0x4(%r15), %rbx
    0000245d: 	movl	%eax, 0xa0(%rsp)
    00002464: 	movq	%rbx, 0xa8(%rsp)
    0000246c: 	testl	%eax, %eax
    0000246e: 	jle	.Ltmp1506 # Offset: 9326
    00002474: 	movq	%r15, 0x90(%rsp)
    0000247c: 	movq	%r14, %r15
.Ltmp1516:
    0000247f: 	movq	0x90(%rsp), %rbx
    00002487: 	movq	%r15, %r14
    0000248a: 	movq	$0x0, (%rbx)
    00002491: 	movq	0x50(%rsp), %rax
    00002496: 	movq	%rbx, %rcx
    00002499: 	movq	$0x0, -0x10(%rax)
    000024a1: 	movq	0x48(%rsp), %rdi
    000024a6: 	xorl	%eax, %eax
    000024a8: 	andq	$-0x8, %rdi
    000024ac: 	subq	%rdi, %rcx
    000024af: 	addl	$0xc80, %ecx
    000024b5: 	shrl	$0x3, %ecx
    000024b8: 	rep		stosq	%rax, %es:(%rdi)
    000024bb: 	movq	%rbx, 0x78(%rsp)
    000024c0: 	movq	$0x0, 0x80(%rsp)
    000024cc: 	movq	$0x0, 0x60(%rsp)
    000024d5: 	movq	(%rsp), %rax
    000024d9: 	movq	%rax, 0x70(%rsp)
.Ltmp1515:
    000024de: 	movq	0x80(%rsp), %rbx
    000024e6: 	movl	%ebx, %eax
    000024e8: 	addl	$0x19, %eax
    000024eb: 	cmpl	%ebx, %eax
    000024ed: 	jle	.Ltmp1507 # Offset: 9453
    000024f3: 	movq	0xa8(%rsp), %rax
    000024fb: 	xorl	%r15d, %r15d
    000024fe: 	leaq	0x60(%rax,%rbx,4), %rax
    00002503: 	movq	%rax, 0x40(%rsp)
    00002508: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1514:
    00002510: 	movl	$0x258, %eax
    00002515: 	movl	%r15d, 0x38(%rsp)
    0000251a: 	leal	0x100(%r15), %esi
    00002521: 	leaq	(,%r15,4), %r13
    00002529: 	cmpl	%eax, %esi
    0000252b: 	movl	%r15d, 0x20(%rsp)
    00002530: 	movq	0x60(%rsp), %r9
    00002535: 	leaq	(%r14,%r13), %rbx
    00002539: 	cmovgl	%eax, %esi
    0000253c: 	movq	0x70(%rsp), %r10
    00002541: 	movq	0x78(%rsp), %rdi
    00002546: 	leal	-0x7(%rsi), %eax
    00002549: 	movl	%eax, 0x28(%rsp)
    0000254d: 	movl	$0xfffffff8, %eax
    00002552: 	subl	%r15d, %eax
    00002555: 	addl	%esi, %eax
    00002557: 	movl	%eax, %r11d
    0000255a: 	andl	$-0x8, %eax
    0000255d: 	leal	0x8(%rax,%r15), %eax
    00002562: 	shrl	$0x3, %r11d
    00002566: 	movl	%eax, 0x58(%rsp)
    0000256a: 	addl	$0x1, %r11d
    0000256e: 	nop # Size: 2
.Ltmp1513:
    00002570: 	movss	(%rdi), %xmm0
    00002574: 	movl	0x28(%rsp), %ecx
    00002578: 	cmpl	%ecx, 0x20(%rsp)
    0000257c: 	jge	.Ltmp1508 # Offset: 9596
    00002582: 	pxor	%xmm4, %xmm4
    00002586: 	leaq	(%r13,%r10), %rcx
    0000258b: 	xorl	%eax, %eax
    0000258d: 	xorl	%edx, %edx
    0000258f: 	movss	%xmm0, %xmm4
    00002593: 	pxor	%xmm3, %xmm3
    00002597: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1509:
    000025a0: 	movups	(%rbx,%rax), %xmm0
    000025a4: 	movups	(%rcx,%rax), %xmm7
    000025a8: 	addl	$0x1, %edx
    000025ab: 	movups	0x10(%rcx,%rax), %xmm6
    000025b0: 	mulps	%xmm7, %xmm0
    000025b3: 	addps	%xmm0, %xmm4
    000025b6: 	movups	0x10(%rbx,%rax), %xmm0
    000025bb: 	addq	$0x20, %rax
    000025bf: 	mulps	%xmm6, %xmm0
    000025c2: 	addps	%xmm0, %xmm3
    000025c5: 	cmpl	%r11d, %edx
    000025c8: 	jb	.Ltmp1509 # Offset: 9672
    000025ca: 	movl	0x58(%rsp), %eax
    000025ce: 	movaps	%xmm4, %xmm9
    000025d2: 	movaps	%xmm4, %xmm8
    000025d6: 	movaps	%xmm3, %xmm6
    000025d9: 	movaps	%xmm3, %xmm5
    000025dc: 	movaps	%xmm4, %xmm0
    000025df: 	unpckhps	%xmm4, %xmm8
    000025e3: 	shufps	$0x55, %xmm3, %xmm6
    000025e7: 	movaps	%xmm3, %xmm7
    000025ea: 	unpckhps	%xmm3, %xmm5
    000025ed: 	shufps	$0x55, %xmm4, %xmm9
    000025f2: 	shufps	$0xff, %xmm3, %xmm3
    000025f6: 	shufps	$0xff, %xmm4, %xmm4
.Ltmp1542:
    000025fa: 	cmpl	%eax, %esi
    000025fc: 	jle	.Ltmp1510 # Offset: 9724
    00002602: 	movl	%esi, %r8d
    00002605: 	subl	%eax, %r8d
    00002608: 	leal	-0x1(%r8), %edx
    0000260c: 	cmpl	$0x2, %edx
    0000260f: 	jbe	.Ltmp1511 # Offset: 9743
    00002611: 	movslq	%eax, %rdx
    00002614: 	movq	(%rsp), %rbp
    00002618: 	leaq	(%r9,%rdx), %rcx
    0000261c: 	leaq	(%rbp,%rcx,4), %r12
    00002621: 	leaq	(%r14,%rdx,4), %rbp
    00002625: 	movl	%r8d, %edx
    00002628: 	xorl	%ecx, %ecx
    0000262a: 	shrl	$0x2, %edx
    0000262d: 	shlq	$0x4, %rdx
.Ltmp1512:
    00002631: 	movups	(%rbp,%rcx), %xmm2
    00002636: 	movups	(%r12,%rcx), %xmm1
    0000263b: 	addq	$0x10, %rcx
    0000263f: 	mulps	%xmm2, %xmm1
    00002642: 	addss	%xmm1, %xmm0
    00002646: 	movaps	%xmm1, %xmm2
    00002649: 	shufps	$0x55, %xmm1, %xmm2
    0000264d: 	addss	%xmm2, %xmm0
    00002651: 	movaps	%xmm1, %xmm2
    00002654: 	unpckhps	%xmm1, %xmm2
    00002657: 	shufps	$0xff, %xmm1, %xmm1
    0000265b: 	addss	%xmm2, %xmm0
    0000265f: 	addss	%xmm1, %xmm0
    00002663: 	cmpq	%rcx, %rdx
    00002666: 	jne	.Ltmp1512 # Offset: 9830
    00002668: 	movl	%r8d, %edx
    0000266b: 	andl	$-0x4, %edx
    0000266e: 	addl	%edx, %eax
    00002670: 	cmpl	%r8d, %edx
    00002673: 	je	.Ltmp1510 # Offset: 9843
.Ltmp1511:
    00002675: 	movslq	%eax, %rcx
    00002678: 	movss	(%r10,%rcx,4), %xmm1
    0000267e: 	mulss	(%r14,%rcx,4), %xmm1
    00002684: 	leaq	(,%rcx,4), %rdx
    0000268c: 	leal	0x1(%rax), %ecx
    0000268f: 	addss	%xmm1, %xmm0
    00002693: 	cmpl	%ecx, %esi
    00002695: 	jle	.Ltmp1510 # Offset: 9877
    00002697: 	movss	0x4(%r14,%rdx), %xmm1
    0000269e: 	mulss	0x4(%rdx,%r10), %xmm1
    000026a5: 	addl	$0x2, %eax
    000026a8: 	addss	%xmm1, %xmm0
    000026ac: 	cmpl	%eax, %esi
    000026ae: 	jle	.Ltmp1510 # Offset: 9902
    000026b0: 	movss	0x8(%rdx,%r10), %xmm1
    000026b7: 	mulss	0x8(%r14,%rdx), %xmm1
    000026be: 	addss	%xmm1, %xmm0
    000026c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1510:
    000026c8: 	addss	%xmm9, %xmm0
    000026cd: 	addq	$0x4, %rdi
    000026d1: 	addq	$0x960, %r10
    000026d8: 	addq	$0x258, %r9
    000026df: 	addss	%xmm8, %xmm0
    000026e4: 	addss	%xmm4, %xmm0
    000026e8: 	addss	%xmm7, %xmm0
    000026ec: 	addss	%xmm6, %xmm0
    000026f0: 	addss	%xmm5, %xmm0
    000026f4: 	addss	%xmm3, %xmm0
    000026f8: 	movss	%xmm0, -0x4(%rdi)
    000026fd: 	cmpq	%rdi, 0x40(%rsp)
    00002702: 	jne	.Ltmp1513 # Offset: 9986
    00002708: 	addq	$0x100, %r15
    0000270f: 	cmpq	$0x300, %r15
    00002716: 	jne	.Ltmp1514 # Offset: 10006
.Ltmp1507:
    0000271c: 	addq	$0x19, 0x80(%rsp)
    00002725: 	movq	0x80(%rsp), %rax
    0000272d: 	addq	$0x64, 0x78(%rsp)
    00002733: 	addq	$0xea60, 0x70(%rsp)
    0000273c: 	addq	$0x3a98, 0x60(%rsp)
    00002745: 	cmpq	$0x320, %rax
    0000274b: 	jne	.Ltmp1515 # Offset: 10059
    00002751: 	addl	$0x1, 0x88(%rsp)
    00002759: 	movq	%r14, %r15
    0000275c: 	movl	0x88(%rsp), %eax
    00002763: 	cmpl	%eax, 0xa0(%rsp)
    0000276a: 	jne	.Ltmp1516 # Offset: 10090
    00002770: 	movq	0x90(%rsp), %r15
.Ltmp1506:
    00002778: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000277f: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00002786: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000278d: 	je	.Ltmp1517 # Offset: 10125
.Ltmp1546:
    00002793: 	movq	-0x20(%rax), %rbp
    00002797: 	callq	clock@PLT # Offset: 10135
    0000279c: 	pxor	%xmm0, %xmm0
    000027a0: 	movq	%rax, end_time(%rip)
    000027a7: 	movq	%rbp, %rdi
    000027aa: 	subq	start_time(%rip), %rax
    000027b1: 	cvtsi2sd	%rax, %xmm0
    000027b6: 	divsd	DATAat0x24960(%rip), %xmm0
    000027be: 	callq	_Z13record_resultdPKc # Offset: 10174
    000027c3: 	movq	%r15, %rax
    000027c6: 	pxor	%xmm1, %xmm1
.Ltmp1518:
    000027ca: 	movups	(%rax), %xmm0
    000027cd: 	addq	$0x10, %rax
    000027d1: 	addss	%xmm0, %xmm1
    000027d5: 	movaps	%xmm0, %xmm2
    000027d8: 	shufps	$0x55, %xmm0, %xmm2
    000027dc: 	addss	%xmm2, %xmm1
    000027e0: 	movaps	%xmm0, %xmm2
    000027e3: 	unpckhps	%xmm0, %xmm2
    000027e6: 	shufps	$0xff, %xmm0, %xmm0
    000027ea: 	addss	%xmm2, %xmm1
    000027ee: 	addss	%xmm0, %xmm1
    000027f2: 	cmpq	%rax, 0x98(%rsp)
    000027fa: 	jne	.Ltmp1518 # Offset: 10234
    000027fc: 	movq	0x30(%rsp), %rdi
    00002801: 	movaps	%xmm1, %xmm0
    00002804: 	callq	_Z9check_sumIfEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 10244
    00002809: 	movq	0xf0(%rsp), %rdi
    00002811: 	cmpq	0x10(%rsp), %rdi
    00002816: 	je	.Ltmp1519 # Offset: 10262
    00002818: 	movq	0x100(%rsp), %rax
    00002820: 	leaq	0x1(%rax), %rsi
    00002824: 	callq	_ZdlPvm@PLT # Offset: 10276
.Ltmp1519:
    00002829: 	movq	0x30(%rsp), %rbx
    0000282e: 	movq	0x68(%rsp), %rsi
    00002833: 	leaq	DATAat0x248d0(%rip), %rdx
    0000283a: 	movq	%rbx, %rdi
    0000283d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10301
    00002842: 	movq	%rbx, %rsi
    00002845: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000284c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 10316
    00002851: 	callq	clock@PLT # Offset: 10321
    00002856: 	leaq	0xc88(%r15), %rbx
    0000285d: 	movl	$0x0, 0xb0(%rsp)
    00002868: 	movq	%rax, start_time(%rip)
    0000286f: 	movl	iterations(%rip), %eax
    00002875: 	movq	%rbx, 0x50(%rsp)
    0000287a: 	leaq	0x8(%r15), %rbx
    0000287e: 	movq	%rbx, 0x48(%rsp)
    00002883: 	leaq	0x10(%r15), %rbx
    00002887: 	movl	%eax, 0xc4(%rsp)
    0000288e: 	movq	%rbx, 0xa8(%rsp)
    00002896: 	testl	%eax, %eax
    00002898: 	jle	.Ltmp1520 # Offset: 10392
    0000289e: 	movq	(%rsp), %r13
    000028a2: 	movq	%r14, 0x70(%rsp)
    000028a7: 	movq	%r15, %r14
.Ltmp1530:
    000028aa: 	movq	$0x0, (%r14)
    000028b1: 	movq	0x50(%rsp), %rax
    000028b6: 	movq	%r14, %rcx
    000028b9: 	movq	%r14, %r15
    000028bc: 	movq	$0x0, -0x10(%rax)
    000028c4: 	movq	0x48(%rsp), %rdi
    000028c9: 	xorl	%eax, %eax
    000028cb: 	andq	$-0x8, %rdi
    000028cf: 	subq	%rdi, %rcx
    000028d2: 	addl	$0xc80, %ecx
    000028d8: 	shrl	$0x3, %ecx
    000028db: 	rep		stosq	%rax, %es:(%rdi)
    000028de: 	movq	$0x0, 0xa0(%rsp)
.Ltmp1529:
    000028ea: 	movq	0xa0(%rsp), %rbx
    000028f2: 	movl	%ebx, %eax
    000028f4: 	addl	$0x12c, %eax
    000028f9: 	movl	%eax, 0x80(%rsp)
    00002900: 	cmpl	%ebx, %eax
    00002902: 	jle	.Ltmp1521 # Offset: 10498
    00002908: 	movq	%r15, 0x78(%rsp)
    0000290d: 	xorl	%r12d, %r12d
    00002910: 	movq	$0x258, 0x58(%rsp)
    00002919: 	nopl	(%rax) # Size: 7
.Ltmp1528:
    00002920: 	leal	0x61(%r12), %eax
    00002925: 	leal	0x64(%r12), %ebx
    0000292a: 	movq	0x58(%rsp), %rdi
    0000292f: 	movq	0xa0(%rsp), %rcx
    00002937: 	cmpl	%r12d, %eax
    0000293a: 	movl	%ebx, %r8d
    0000293d: 	movl	%eax, 0x40(%rsp)
    00002941: 	movl	%ebx, %ebp
    00002943: 	cmovlel	%r12d, %r8d
    00002947: 	movl	%r12d, 0x38(%rsp)
    0000294c: 	movq	%r12, 0x60(%rsp)
    00002951: 	movslq	%r8d, %r9
    00002954: 	subl	%r8d, %ebp
    00002957: 	imulq	$0x258, %r9, %rax
    0000295e: 	movl	%ebp, %r10d
    00002961: 	leaq	(%r15,%r9,4), %r14
    00002965: 	andl	$-0x4, %r10d
    00002969: 	addq	%rcx, %rax
    0000296c: 	leaq	(%r13,%rax,4), %rsi
    00002971: 	imulq	$-0x960, %r9, %rax
    00002978: 	leaq	(%rax,%rdi,4), %rax
    0000297c: 	movq	%rax, 0x88(%rsp)
    00002984: 	movq	0xa8(%rsp), %rax
    0000298c: 	leaq	0x180(%rax,%r12,4), %rax
    00002994: 	movl	%ebp, %r12d
    00002997: 	movq	%rax, 0x90(%rsp)
    0000299f: 	leal	-0x1(%rbp), %eax
    000029a2: 	movl	%eax, 0x28(%rsp)
    000029a6: 	leal	(%r10,%r8), %eax
    000029aa: 	movl	%eax, 0x20(%rsp)
    000029ae: 	nop # Size: 2
.Ltmp1527:
    000029b0: 	movq	0x70(%rsp), %rax
    000029b5: 	movl	0x40(%rsp), %edi
    000029b9: 	movl	%ecx, %ebp
    000029bb: 	movss	(%rax,%rcx,4), %xmm0
    000029c0: 	cmpl	%edi, 0x38(%rsp)
    000029c4: 	jge	.Ltmp1522 # Offset: 10692
    000029ca: 	movq	0x88(%rsp), %rax
    000029d2: 	movq	0x90(%rsp), %rdi
    000029da: 	leaq	(%rax,%rsi), %rdx
    000029de: 	movq	0x78(%rsp), %rax
    000029e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1523:
    000029e8: 	movss	-0x960(%rdx), %xmm1
    000029f0: 	addq	$0x10, %rax
    000029f4: 	addq	$0x2580, %rdx
    000029fb: 	mulss	%xmm0, %xmm1
    000029ff: 	addss	-0x10(%rax), %xmm1
    00002a04: 	movss	%xmm1, -0x10(%rax)
    00002a09: 	movss	-0x2580(%rdx), %xmm1
    00002a11: 	mulss	%xmm0, %xmm1
    00002a15: 	addss	-0xc(%rax), %xmm1
    00002a1a: 	movss	%xmm1, -0xc(%rax)
    00002a1f: 	movss	-0x1c20(%rdx), %xmm1
    00002a27: 	mulss	%xmm0, %xmm1
    00002a2b: 	addss	-0x8(%rax), %xmm1
    00002a30: 	movss	%xmm1, -0x8(%rax)
    00002a35: 	movss	-0x12c0(%rdx), %xmm1
    00002a3d: 	mulss	%xmm0, %xmm1
    00002a41: 	addss	-0x4(%rax), %xmm1
    00002a46: 	movss	%xmm1, -0x4(%rax)
    00002a4b: 	cmpq	%rdi, %rax
    00002a4e: 	jne	.Ltmp1523 # Offset: 10830
.Ltmp1522:
    00002a50: 	cmpl	%ebx, %r8d
    00002a53: 	jge	.Ltmp1524 # Offset: 10835
    00002a59: 	cmpl	$0x2, 0x28(%rsp)
    00002a5e: 	jbe	.Ltmp1525 # Offset: 10846
    00002a64: 	movss	0x1c20(%rsi), %xmm1
    00002a6c: 	movss	0x12c0(%rsi), %xmm2
    00002a74: 	movss	0x960(%rsi), %xmm3
    00002a7c: 	movups	(%r14), %xmm6
    00002a80: 	unpcklps	%xmm1, %xmm2
    00002a83: 	movss	(%rsi), %xmm1
    00002a87: 	unpcklps	%xmm3, %xmm1
    00002a8a: 	movlhps	%xmm2, %xmm1
    00002a8d: 	movaps	%xmm0, %xmm2
    00002a90: 	shufps	$0x0, %xmm2, %xmm2
    00002a94: 	mulps	%xmm2, %xmm1
    00002a97: 	addps	%xmm6, %xmm1
    00002a9a: 	movups	%xmm1, (%r14)
    00002a9e: 	cmpl	%r12d, %r10d
    00002aa1: 	je	.Ltmp1524 # Offset: 10913
    00002aa3: 	movl	0x20(%rsp), %eax
    00002aa7: 	movl	%r10d, %edx
.Ltmp1543:
    00002aaa: 	movl	%r12d, %r11d
    00002aad: 	subl	%edx, %r11d
    00002ab0: 	cmpl	$0x1, %r11d
    00002ab4: 	je	.Ltmp1526 # Offset: 10932
    00002ab6: 	addq	%r9, %rdx
    00002ab9: 	leaq	(%r15,%rdx,4), %rdi
    00002abd: 	imulq	$0x258, %rdx, %rdx
    00002ac4: 	addq	%rcx, %rdx
    00002ac7: 	leaq	(%r13,%rdx,4), %rdx
    00002acc: 	movss	0x960(%rdx), %xmm2
    00002ad4: 	movss	(%rdx), %xmm1
    00002ad8: 	movl	%r11d, %edx
    00002adb: 	andl	$-0x2, %edx
    00002ade: 	unpcklps	%xmm2, %xmm1
    00002ae1: 	movaps	%xmm0, %xmm2
    00002ae4: 	addl	%edx, %eax
    00002ae6: 	shufps	$0xe0, %xmm2, %xmm2
    00002aea: 	mulps	%xmm2, %xmm1
    00002aed: 	movq	(%rdi), %xmm2
    00002af1: 	addps	%xmm2, %xmm1
    00002af4: 	movlps	%xmm1, (%rdi)
    00002af7: 	cmpl	%r11d, %edx
    00002afa: 	je	.Ltmp1524 # Offset: 11002
.Ltmp1526:
    00002afc: 	movslq	%eax, %rdx
    00002aff: 	imull	$0x258, %eax, %eax
    00002b05: 	leaq	(%r15,%rdx,4), %rdx
    00002b09: 	addl	%ebp, %eax
    00002b0b: 	cltq
    00002b0d: 	mulss	(%r13,%rax,4), %xmm0
    00002b14: 	addss	(%rdx), %xmm0
    00002b18: 	movss	%xmm0, (%rdx)
.Ltmp1524:
    00002b1c: 	addq	$0x1, %rcx
    00002b20: 	addq	$0x4, %rsi
    00002b24: 	cmpl	%ecx, 0x80(%rsp)
    00002b2b: 	jg	.Ltmp1527 # Offset: 11051
    00002b31: 	addq	$0x190, 0x78(%rsp)
    00002b3a: 	movq	0x60(%rsp), %r12
    00002b3f: 	addq	$0xea60, 0x58(%rsp)
    00002b48: 	addq	$0x64, %r12
    00002b4c: 	cmpq	$0x320, %r12
    00002b53: 	jne	.Ltmp1528 # Offset: 11091
.Ltmp1521:
    00002b59: 	addq	$0x12c, 0xa0(%rsp)
    00002b65: 	movq	0xa0(%rsp), %rax
    00002b6d: 	cmpq	$0x258, %rax
    00002b73: 	jne	.Ltmp1529 # Offset: 11123
    00002b79: 	addl	$0x1, 0xb0(%rsp)
    00002b81: 	movq	%r15, %r14
    00002b84: 	movl	0xb0(%rsp), %eax
    00002b8b: 	cmpl	%eax, 0xc4(%rsp)
    00002b92: 	jne	.Ltmp1530 # Offset: 11154
    00002b98: 	movq	0x70(%rsp), %r14
.Ltmp1520:
    00002b9d: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002ba4: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00002bab: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00002bb2: 	je	.Ltmp1531 # Offset: 11186
.Ltmp1545:
    00002bb8: 	movq	-0x20(%rax), %rbp
    00002bbc: 	callq	clock@PLT # Offset: 11196
    00002bc1: 	pxor	%xmm0, %xmm0
    00002bc5: 	movq	%rax, end_time(%rip)
    00002bcc: 	movq	%rbp, %rdi
    00002bcf: 	subq	start_time(%rip), %rax
    00002bd6: 	cvtsi2sd	%rax, %xmm0
    00002bdb: 	divsd	DATAat0x24960(%rip), %xmm0
    00002be3: 	callq	_Z13record_resultdPKc # Offset: 11235
    00002be8: 	movq	0xc8(%rsp), %rax
    00002bf0: 	pxor	%xmm0, %xmm0
.Ltmp1532:
    00002bf4: 	movups	(%rax), %xmm2
    00002bf7: 	addq	$0x10, %rax
    00002bfb: 	addss	%xmm2, %xmm0
    00002bff: 	movaps	%xmm2, %xmm1
    00002c02: 	shufps	$0x55, %xmm2, %xmm1
    00002c06: 	addss	%xmm0, %xmm1
    00002c0a: 	movaps	%xmm2, %xmm0
    00002c0d: 	unpckhps	%xmm2, %xmm0
    00002c10: 	shufps	$0xff, %xmm2, %xmm2
    00002c14: 	addss	%xmm0, %xmm1
    00002c18: 	movaps	%xmm2, %xmm0
    00002c1b: 	addss	%xmm1, %xmm0
    00002c1f: 	cmpq	0x98(%rsp), %rax
    00002c27: 	jne	.Ltmp1532 # Offset: 11303
    00002c29: 	movq	0x30(%rsp), %rdi
    00002c2e: 	callq	_Z9check_sumIfEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 11310
    00002c33: 	movq	0xf0(%rsp), %rdi
    00002c3b: 	cmpq	0x10(%rsp), %rdi
    00002c40: 	je	.Ltmp1533 # Offset: 11328
    00002c42: 	movq	0x100(%rsp), %rax
    00002c4a: 	leaq	0x1(%rax), %rsi
    00002c4e: 	callq	_ZdlPvm@PLT # Offset: 11342
.Ltmp1533:
    00002c53: 	movq	0x68(%rsp), %rsi
    00002c58: 	movq	0x30(%rsp), %rdi
    00002c5d: 	leaq	DATAat0x245d4(%rip), %rdx
    00002c64: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11364
    00002c69: 	movl	iterations(%rip), %edx
    00002c6f: 	xorl	%r8d, %r8d
    00002c72: 	xorl	%ecx, %ecx
    00002c74: 	movl	$0x75300, %esi
    00002c79: 	movq	0xf0(%rsp), %rdi
    00002c81: 	callq	_Z9summarizePKciiii # Offset: 11393
    00002c86: 	movq	0xf0(%rsp), %rdi
    00002c8e: 	cmpq	0x10(%rsp), %rdi
    00002c93: 	je	.Ltmp1534 # Offset: 11411
    00002c95: 	movq	0x100(%rsp), %rax
    00002c9d: 	leaq	0x1(%rax), %rsi
    00002ca1: 	callq	_ZdlPvm@PLT # Offset: 11425
.Ltmp1534:
    00002ca6: 	movq	(%rsp), %rdi
    00002caa: 	movl	$0x4, %esi
    00002caf: 	callq	_ZdlPvm@PLT # Offset: 11439
    00002cb4: 	movl	$0x4, %esi
    00002cb9: 	movq	%r15, %rdi
    00002cbc: 	callq	_ZdlPvm@PLT # Offset: 11452
    00002cc1: 	movq	%r14, %rdi
    00002cc4: 	movl	$0x4, %esi
    00002cc9: 	callq	_ZdlPvm@PLT # Offset: 11465
    00002cce: 	movq	0xd0(%rsp), %rdi
    00002cd6: 	cmpq	0xb8(%rsp), %rdi
    00002cde: 	je	.Ltmp1535 # Offset: 11486
    00002ce0: 	movq	0xe0(%rsp), %rax
    00002ce8: 	leaq	0x1(%rax), %rsi
    00002cec: 	callq	_ZdlPvm@PLT # Offset: 11500
.Ltmp1535:
    00002cf1: 	movq	0x118(%rsp), %rax
    00002cf9: 	subq	%fs:0x28, %rax
    00002d02: 	jne	.Ltmp1536 # Offset: 11522
    00002d08: 	addq	$0x128, %rsp
    00002d0f: 	popq	%rbx
    00002d10: 	popq	%rbp
    00002d11: 	popq	%r12
    00002d13: 	popq	%r13
    00002d15: 	popq	%r14
    00002d17: 	popq	%r15
    00002d19: 	retq # Offset: 11545
.Ltmp1369:
    00002d1a: 	addq	$0x20, %r15
    00002d1e: 	cmpq	%rbp, %r15
    00002d21: 	jne	.Ltmp1370 # Offset: 11553
    00002d27: 	addq	$0x8, %rbx
    00002d2b: 	cmpq	%rbx, %r12
    00002d2e: 	ja	.Ltmp1371 # Offset: 11566
    00002d34: 	jmp	.Ltmp1537 # Offset: 11572
.Ltmp1538:
    00002d39: 	addq	$0x20, %rbx
.Ltmp1372:
    00002d3d: 	cmpq	%rbx, %r13
    00002d40: 	je	.Ltmp1377 # Offset: 11584
.Ltmp1539:
    00002d46: 	movq	(%rbx), %rdi
    00002d49: 	leaq	0x10(%rbx), %rax
    00002d4d: 	cmpq	%rax, %rdi
    00002d50: 	je	.Ltmp1538 # Offset: 11600
    00002d52: 	movq	0x10(%rbx), %rax
    00002d56: 	addq	$0x20, %rbx
    00002d5a: 	leaq	0x1(%rax), %rsi
    00002d5e: 	callq	_ZdlPvm@PLT # Offset: 11614
    00002d63: 	cmpq	%rbx, %r13
    00002d66: 	jne	.Ltmp1539 # Offset: 11622
    00002d68: 	jmp	.Ltmp1377 # Offset: 11624
    00002d6d: 	nopl	(%rax) # Size: 3
.Ltmp1474:
    00002d70: 	movl	%ebp, %eax
    00002d72: 	xorl	%edx, %edx
    00002d74: 	jmp	.Ltmp1540 # Offset: 11636
    00002d79: 	nopl	(%rax) # Size: 7
.Ltmp1494:
    00002d80: 	pxor	%xmm3, %xmm3
    00002d84: 	movl	0x38(%rsp), %eax
    00002d88: 	movaps	%xmm3, %xmm5
    00002d8b: 	movaps	%xmm3, %xmm6
    00002d8e: 	jmp	.Ltmp1541 # Offset: 11662
    00002d93: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1508:
    00002d98: 	pxor	%xmm3, %xmm3
    00002d9c: 	movl	0x38(%rsp), %eax
    00002da0: 	movaps	%xmm3, %xmm5
    00002da3: 	movaps	%xmm3, %xmm6
    00002da6: 	movaps	%xmm3, %xmm7
    00002da9: 	movaps	%xmm3, %xmm4
    00002dac: 	movaps	%xmm3, %xmm8
    00002db0: 	movaps	%xmm3, %xmm9
    00002db4: 	jmp	.Ltmp1542 # Offset: 11700
.Ltmp1525:
    00002db9: 	movl	%r8d, %eax
    00002dbc: 	xorl	%edx, %edx
    00002dbe: 	jmp	.Ltmp1543 # Offset: 11710
.Ltmp1389:
    00002dc3: 	movq	-0x8(%rdx), %rax
    00002dc7: 	addq	$0x200, %rax
    00002dcd: 	jmp	.Ltmp1544 # Offset: 11725
.Ltmp1531:
    00002dd2: 	movq	-0x8(%rdx), %rax
    00002dd6: 	addq	$0x200, %rax
    00002ddc: 	jmp	.Ltmp1545 # Offset: 11740
.Ltmp1517:
    00002de1: 	movq	-0x8(%rdx), %rax
    00002de5: 	addq	$0x200, %rax
    00002deb: 	jmp	.Ltmp1546 # Offset: 11755
.Ltmp1503:
    00002df0: 	movq	-0x8(%rdx), %rax
    00002df4: 	addq	$0x200, %rax
    00002dfa: 	jmp	.Ltmp1547 # Offset: 11770
.Ltmp1488:
    00002dff: 	movq	-0x8(%rdx), %rax
    00002e03: 	addq	$0x200, %rax
    00002e09: 	jmp	.Ltmp1548 # Offset: 11785
.Ltmp1482:
    00002e0e: 	leaq	DATAat0x2455f(%rip), %rsi
    00002e15: 	movl	$0x1, %edi
    00002e1a: 	xorl	%eax, %eax
    00002e1c: 	callq	__printf_chk@PLT # Offset: 11804
    00002e21: 	movq	0xf0(%rsp), %rdx
    00002e29: 	jmp	.Ltmp1549 # Offset: 11817
.Ltmp1479:
    00002e2e: 	movq	-0x8(%rdx), %rax
    00002e32: 	addq	$0x200, %rax
    00002e38: 	jmp	.Ltmp1550 # Offset: 11832
.Ltmp1464:
    00002e3d: 	leaq	DATAat0x2455f(%rip), %rsi
    00002e44: 	movl	$0x1, %edi
    00002e49: 	xorl	%eax, %eax
    00002e4b: 	callq	__printf_chk@PLT # Offset: 11851
    00002e50: 	movq	0xf0(%rsp), %rdx
    00002e58: 	jmp	.Ltmp1551 # Offset: 11864
.Ltmp1461:
    00002e5d: 	movq	-0x8(%rdx), %rax
    00002e61: 	addq	$0x200, %rax
    00002e67: 	jmp	.Ltmp1552 # Offset: 11879
.Ltmp1454:
    00002e6c: 	movq	-0x8(%rdx), %rax
    00002e70: 	addq	$0x200, %rax
    00002e76: 	jmp	.Ltmp1553 # Offset: 11894
.Ltmp1447:
    00002e7b: 	movq	-0x8(%rdx), %rax
    00002e7f: 	addq	$0x200, %rax
    00002e85: 	jmp	.Ltmp1554 # Offset: 11909
.Ltmp1440:
    00002e8a: 	movq	-0x8(%rdx), %rax
    00002e8e: 	addq	$0x200, %rax
    00002e94: 	jmp	.Ltmp1555 # Offset: 11924
.Ltmp1432:
    00002e99: 	movq	-0x8(%rdx), %rax
    00002e9d: 	addq	$0x200, %rax
    00002ea3: 	jmp	.Ltmp1556 # Offset: 11939
.Ltmp1425:
    00002ea8: 	movq	-0x8(%rdx), %rax
    00002eac: 	addq	$0x200, %rax
    00002eb2: 	jmp	.Ltmp1557 # Offset: 11954
.Ltmp1415:
    00002eb7: 	movq	-0x8(%rdx), %rax
    00002ebb: 	addq	$0x200, %rax
    00002ec1: 	jmp	.Ltmp1558 # Offset: 11969
.Ltmp1408:
    00002ec6: 	movq	-0x8(%rdx), %rax
    00002eca: 	addq	$0x200, %rax
    00002ed0: 	jmp	.Ltmp1559 # Offset: 11984
.Ltmp1402:
    00002ed5: 	leaq	DATAat0x2455f(%rip), %rsi
    00002edc: 	movl	$0x1, %edi
    00002ee1: 	xorl	%eax, %eax
    00002ee3: 	callq	__printf_chk@PLT # Offset: 12003
    00002ee8: 	movq	0xf0(%rsp), %rdx
    00002ef0: 	jmp	.Ltmp1560 # Offset: 12016
.Ltmp1399:
    00002ef5: 	movq	-0x8(%rdx), %rax
    00002ef9: 	addq	$0x200, %rax
    00002eff: 	jmp	.Ltmp1561 # Offset: 12031
.Ltmp1536:
    00002f04: 	callq	__stack_chk_fail@PLT # Offset: 12036
    00002f09: 	endbr64
.Ltmp1563:
    00002f0d: 	movq	%rax, %rbx
    00002f10: 	jmp	.Ltmp1562 # Offset: 12048
    00002f12: 	endbr64
    00002f16: 	jmp	.Ltmp1563 # Offset: 12054
    00002f18: 	endbr64
    00002f1c: 	jmp	.Ltmp1563 # Offset: 12060
    00002f1e: 	endbr64
    00002f22: 	jmp	.Ltmp1563 # Offset: 12066
    00002f24: 	endbr64
    00002f28: 	jmp	.Ltmp1563 # Offset: 12072
    00002f2a: 	endbr64
    00002f2e: 	jmp	.Ltmp1563 # Offset: 12078
    00002f30: 	endbr64
    00002f34: 	jmp	.Ltmp1563 # Offset: 12084
    00002f36: 	endbr64
    00002f3a: 	jmp	.Ltmp1563 # Offset: 12090
    00002f3c: 	endbr64
    00002f40: 	jmp	.Ltmp1563 # Offset: 12096
    00002f42: 	endbr64
    00002f46: 	jmp	.Ltmp1563 # Offset: 12102
.Ltmp1562:
    00002f48: 	movq	0xf0(%rsp), %rdi
    00002f50: 	cmpq	0x10(%rsp), %rdi
    00002f55: 	je	.Ltmp1564 # Offset: 12117
.Ltmp1568:
    00002f57: 	movq	0x100(%rsp), %rax
    00002f5f: 	leaq	0x1(%rax), %rsi
    00002f63: 	callq	_ZdlPvm@PLT # Offset: 12131
.Ltmp1564:
    00002f68: 	movq	(%rsp), %rdi
    00002f6c: 	movl	$0x4, %esi
    00002f71: 	movq	%rbx, %rbp
    00002f74: 	callq	_ZdlPvm@PLT # Offset: 12148
.Ltmp1569:
    00002f79: 	movl	$0x4, %esi
    00002f7e: 	movq	%r15, %rdi
    00002f81: 	callq	_ZdlPvm@PLT # Offset: 12161
.Ltmp1570:
    00002f86: 	movl	$0x4, %esi
    00002f8b: 	movq	%r14, %rdi
    00002f8e: 	callq	_ZdlPvm@PLT # Offset: 12174
.Ltmp1566:
    00002f93: 	movq	0xd0(%rsp), %rdi
    00002f9b: 	cmpq	0xb8(%rsp), %rdi
    00002fa3: 	je	.Ltmp1565 # Offset: 12195
    00002fa5: 	movq	0xe0(%rsp), %rax
    00002fad: 	leaq	0x1(%rax), %rsi
    00002fb1: 	callq	_ZdlPvm@PLT # Offset: 12209
.Ltmp1565:
    00002fb6: 	movq	%rbp, %rdi
    00002fb9: 	callq	_Unwind_Resume@PLT # Offset: 12217
    00002fbe: 	endbr64
    00002fc2: 	jmp	.Ltmp1563 # Offset: 12226
    00002fc7: 	endbr64
    00002fcb: 	jmp	.Ltmp1563 # Offset: 12235
    00002fd0: 	endbr64
    00002fd4: 	jmp	.Ltmp1563 # Offset: 12244
    00002fd9: 	endbr64
    00002fdd: 	jmp	.Ltmp1563 # Offset: 12253
    00002fe2: 	endbr64
    00002fe6: 	movq	%rax, %rbp
    00002fe9: 	jmp	.Ltmp1566 # Offset: 12265
    00002feb: 	endbr64
    00002fef: 	jmp	.Ltmp1563 # Offset: 12271
    00002ff4: 	endbr64
    00002ff8: 	movq	%rax, %rbx
    00002ffb: 	jmp	.Ltmp1567 # Offset: 12283
    00002ffd: 	endbr64
    00003001: 	movq	%rax, %rbx
    00003004: 	jmp	.Ltmp1564 # Offset: 12292
.Ltmp1567:
    00003009: 	movq	0xf0(%rsp), %rdi
    00003011: 	leaq	0x100(%rsp), %rax
    00003019: 	cmpq	%rax, %rdi
    0000301c: 	jne	.Ltmp1568 # Offset: 12316
    00003022: 	jmp	.Ltmp1564 # Offset: 12322
    00003027: 	endbr64
    0000302b: 	movq	%rax, %rbp
    0000302e: 	jmp	.Ltmp1569 # Offset: 12334
    00003033: 	endbr64
    00003037: 	movq	%rax, %rbp
    0000303a: 	jmp	.Ltmp1570 # Offset: 12346
    0000303f: 	endbr64
    00003043: 	jmp	.Ltmp1563 # Offset: 12355
    00003048: 	endbr64
    0000304c: 	jmp	.Ltmp1563 # Offset: 12364
    00003051: 	endbr64
    00003055: 	jmp	.Ltmp1563 # Offset: 12373
    0000305a: 	endbr64
    0000305e: 	jmp	.Ltmp1563 # Offset: 12382
    00003063: 	endbr64
    00003067: 	jmp	.Ltmp1563 # Offset: 12391
    0000306c: 	endbr64
    00003070: 	jmp	.Ltmp1563 # Offset: 12400
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIfEvv"

Binary Function "_Z11TestOneTypeIiEvv" after disassembly {
  Number      : 103
  State       : disassembled
  Address     : 0x1fa00
  Size        : 0x3f93
  MaxSize     : 0x3f93
  Offset      : 0x1fa00
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIiEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0102:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	$0x5f32, %esi
    0000000b: 	pushq	%r14
    0000000d: 	pushq	%r13
    0000000f: 	pushq	%r12
    00000011: 	pushq	%rbp
    00000012: 	pushq	%rbx
    00000013: 	subq	$0x178, %rsp
    0000001a: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm6
    00000022: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000029: 	movq	%fs:0x28, %rax
    00000032: 	movq	%rax, 0x168(%rsp)
    0000003a: 	xorl	%eax, %eax
    0000003c: 	movq	"_ZL7gLabels/1"+48(%rip), %r13
    00000043: 	leaq	0x130(%rsp), %rax
    0000004b: 	movl	$0x33746e69, 0x130(%rsp)
    00000056: 	movaps	%xmm6, (%rsp)
    0000005a: 	movq	%xmm6, %rbx
    0000005f: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm6
    00000067: 	movq	"_ZL7gLabels/1"+56(%rip), %rbp
    0000006e: 	movq	%rax, 0xf0(%rsp)
    00000076: 	movhlps	%xmm6, %xmm5
    00000079: 	movq	%rax, 0x120(%rsp)
    00000081: 	movq	%xmm6, %r14
    00000086: 	movq	%xmm5, %rcx
    0000008b: 	movw	%si, 0x134(%rsp)
    00000093: 	leaq	0x8(%rcx), %r12
    00000097: 	movb	$0x74, 0x136(%rsp)
    0000009f: 	movq	$0x7, 0x128(%rsp)
    000000ab: 	movq	%r12, %rax
    000000ae: 	movb	$0x0, 0x137(%rsp)
    000000b6: 	movaps	%xmm6, 0x10(%rsp)
    000000bb: 	cmpq	%r12, %rdx
    000000be: 	jbe	.Ltmp1571 # Offset: 190
.Ltmp1574:
    000000c0: 	movq	(%rax), %r15
    000000c3: 	leaq	0x200(%r15), %r8
.Ltmp1573:
    000000ca: 	movq	(%r15), %rdi
    000000cd: 	leaq	0x10(%r15), %rsi
    000000d1: 	cmpq	%rsi, %rdi
    000000d4: 	je	.Ltmp1572 # Offset: 212
    000000da: 	movq	%rax, 0x30(%rsp)
    000000df: 	movq	0x10(%r15), %rax
    000000e3: 	addq	$0x20, %r15
    000000e7: 	movq	%r8, 0x40(%rsp)
    000000ec: 	leaq	0x1(%rax), %rsi
    000000f0: 	movq	%rcx, 0x38(%rsp)
    000000f5: 	movq	%rdx, 0x28(%rsp)
    000000fa: 	callq	_ZdlPvm@PLT # Offset: 250
    000000ff: 	movq	0x40(%rsp), %r8
    00000104: 	movq	0x28(%rsp), %rdx
    00000109: 	movq	0x30(%rsp), %rax
    0000010e: 	movq	0x38(%rsp), %rcx
    00000113: 	cmpq	%r15, %r8
    00000116: 	jne	.Ltmp1573 # Offset: 278
    00000118: 	addq	$0x8, %rax
    0000011c: 	cmpq	%rax, %rdx
    0000011f: 	ja	.Ltmp1574 # Offset: 287
.Ltmp1571:
    00000121: 	cmpq	%rcx, %rdx
    00000124: 	je	.Ltmp1575 # Offset: 292
    0000012a: 	cmpq	%rbx, %r14
    0000012d: 	je	.Ltmp1576 # Offset: 301
.Ltmp1579:
    0000012f: 	movq	(%rbx), %rdi
    00000132: 	leaq	0x10(%rbx), %rax
    00000136: 	cmpq	%rax, %rdi
    00000139: 	je	.Ltmp1577 # Offset: 313
.Ltmp1578:
    0000013b: 	movq	0x10(%rbx), %rax
    0000013f: 	addq	$0x20, %rbx
    00000143: 	leaq	0x1(%rax), %rsi
    00000147: 	callq	_ZdlPvm@PLT # Offset: 327
    0000014c: 	cmpq	%r14, %rbx
    0000014f: 	je	.Ltmp1576 # Offset: 335
    00000151: 	movq	(%rbx), %rdi
    00000154: 	leaq	0x10(%rbx), %rax
    00000158: 	cmpq	%rax, %rdi
    0000015b: 	jne	.Ltmp1578 # Offset: 347
.Ltmp1577:
    0000015d: 	addq	$0x20, %rbx
    00000161: 	cmpq	%r14, %rbx
    00000164: 	jne	.Ltmp1579 # Offset: 356
    00000166: 	cmpq	%rbp, %r13
    00000169: 	je	.Ltmp1580 # Offset: 361
.Ltmp1582:
    0000016b: 	movq	(%rbp), %rdi
    0000016f: 	leaq	0x10(%rbp), %rax
    00000173: 	cmpq	%rax, %rdi
    00000176: 	je	.Ltmp1581 # Offset: 374
    00000178: 	movq	0x10(%rbp), %rax
    0000017c: 	leaq	0x1(%rax), %rsi
    00000180: 	callq	_ZdlPvm@PLT # Offset: 384
.Ltmp1581:
    00000185: 	addq	$0x20, %rbp
.Ltmp1576:
    00000189: 	cmpq	%rbp, %r13
    0000018c: 	jne	.Ltmp1582 # Offset: 396
.Ltmp1580:
    0000018e: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    00000195: 	leaq	0x8(%rax), %rbx
    00000199: 	cmpq	%r12, %rbx
    0000019c: 	jbe	.Ltmp1583 # Offset: 412
.Ltmp1584:
    0000019e: 	movq	(%r12), %rdi
    000001a2: 	movl	$0x200, %esi
    000001a7: 	addq	$0x8, %r12
    000001ab: 	callq	_ZdlPvm@PLT # Offset: 427
    000001b0: 	cmpq	%r12, %rbx
    000001b3: 	ja	.Ltmp1584 # Offset: 435
.Ltmp1583:
    000001b5: 	movdqa	(%rsp), %xmm7
    000001ba: 	movdqa	0x10(%rsp), %xmm6
    000001c0: 	movl	$0x960, %edi
    000001c5: 	movaps	%xmm7, "_ZL7gLabels/1"+48(%rip)
    000001cc: 	movaps	%xmm6, "_ZL7gLabels/1"+64(%rip)
    000001d3: 	callq	_Znam@PLT # Offset: 467
    000001d8: 	movl	$0xc80, %edi
    000001dd: 	movq	%rax, %r13
    000001e0: 	callq	_Znam@PLT # Offset: 480
    000001e5: 	movl	$0x1d4c00, %edi
    000001ea: 	movq	%rax, 0x10(%rsp)
    000001ef: 	movq	%rax, %rbx
    000001f2: 	callq	_Znam@PLT # Offset: 498
    000001f7: 	movq	%rax, %rdx
    000001fa: 	movq	%rbx, %rsi
    000001fd: 	movq	%r13, %rdi
    00000200: 	movq	%rax, (%rsp)
    00000204: 	callq	"_Z16verify_matvecmulIiEvPT_S1_S1_ii.constprop.0/1" # Offset: 516
    00000209: 	cvttsd2si	init_value(%rip), %eax
    00000211: 	leaq	0x960(%r13), %rdx
    00000218: 	movd	%eax, %xmm0
    0000021c: 	movq	%r13, %rax
    0000021f: 	pshufd	$0x0, %xmm0, %xmm0
.Ltmp1585:
    00000224: 	movups	%xmm0, (%rax)
    00000227: 	addq	$0x10, %rax
    0000022b: 	cmpq	%rdx, %rax
    0000022e: 	jne	.Ltmp1585 # Offset: 558
    00000230: 	movq	0x10(%rsp), %rax
    00000235: 	leaq	0xc80(%rax), %rbx
    0000023c: 	movq	%rax, 0x100(%rsp)
    00000244: 	movq	%rbx, 0x88(%rsp)
.Ltmp1586:
    0000024c: 	movups	%xmm0, (%rax)
    0000024f: 	addq	$0x10, %rax
    00000253: 	cmpq	0x88(%rsp), %rax
    0000025b: 	jne	.Ltmp1586 # Offset: 603
    0000025d: 	movq	(%rsp), %rax
    00000261: 	leaq	0x1d4c00(%rax), %rbx
    00000268: 	movq	%rbx, 0x58(%rsp)
.Ltmp1587:
    0000026d: 	movups	%xmm0, (%rax)
    00000270: 	addq	$0x10, %rax
    00000274: 	cmpq	0x58(%rsp), %rax
    00000279: 	jne	.Ltmp1587 # Offset: 633
    0000027b: 	leaq	0x140(%rsp), %rax
    00000283: 	leaq	0x120(%rsp), %rbx
    0000028b: 	movq	%rbx, %rsi
    0000028e: 	leaq	DATAat0x245a0(%rip), %rdx
    00000295: 	movq	%rax, %rdi
    00000298: 	movq	%rbx, 0x98(%rsp)
    000002a0: 	movq	%rax, 0x90(%rsp)
    000002a8: 	movq	%rax, %rbx
    000002ab: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 683
    000002b0: 	movq	%rbx, %rsi
    000002b3: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000002ba: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 698
    000002bf: 	callq	clock@PLT # Offset: 703
    000002c4: 	movl	iterations(%rip), %r8d
    000002cb: 	movq	0x10(%rsp), %r9
    000002d0: 	xorl	%esi, %esi
    000002d2: 	movq	%rax, start_time(%rip)
    000002d9: 	movq	0x10(%rsp), %rax
    000002de: 	leaq	0xc88(%rax), %rbx
    000002e5: 	addq	$0x8, %rax
    000002e9: 	movq	%rax, 0x38(%rsp)
    000002ee: 	xorl	%eax, %eax
    000002f0: 	movq	%rbx, 0x40(%rsp)
    000002f5: 	testl	%r8d, %r8d
    000002f8: 	jle	.Ltmp1588 # Offset: 760
.Ltmp1591:
    000002fe: 	movq	%rax, (%r9)
    00000301: 	movq	0x40(%rsp), %rbx
    00000306: 	movq	%r9, %rcx
    00000309: 	movq	%rax, -0x10(%rbx)
    0000030d: 	movq	0x38(%rsp), %rdi
    00000312: 	andq	$-0x8, %rdi
    00000316: 	subq	%rdi, %rcx
    00000319: 	addl	$0xc80, %ecx
    0000031f: 	shrl	$0x3, %ecx
    00000322: 	rep		stosq	%rax, %es:(%rdi)
    00000325: 	movq	%r9, %rdi
    00000328: 	movq	(%rsp), %rcx
.Ltmp1590:
    0000032c: 	movl	(%rdi), %r10d
    0000032f: 	xorl	%edx, %edx
    00000331: 	pxor	%xmm3, %xmm3
    00000335: 	nopl	(%rax) # Size: 3
.Ltmp1589:
    00000338: 	movdqu	(%r13,%rdx), %xmm0
    0000033f: 	movdqu	(%rcx,%rdx), %xmm2
    00000344: 	movdqu	(%r13,%rdx), %xmm1
    0000034b: 	movdqu	(%rcx,%rdx), %xmm5
    00000350: 	addq	$0x10, %rdx
    00000354: 	psrlq	$0x20, %xmm0
    00000359: 	psrlq	$0x20, %xmm2
    0000035e: 	pmuludq	%xmm5, %xmm1
    00000362: 	pmuludq	%xmm2, %xmm0
    00000366: 	pshufd	$0x8, %xmm1, %xmm1
    0000036b: 	pshufd	$0x8, %xmm0, %xmm0
    00000370: 	punpckldq	%xmm0, %xmm1
    00000374: 	paddd	%xmm1, %xmm3
    00000378: 	cmpq	$0x960, %rdx
    0000037f: 	jne	.Ltmp1589 # Offset: 895
    00000381: 	movdqa	%xmm3, %xmm0
    00000385: 	addq	$0x4, %rdi
    00000389: 	addq	$0x960, %rcx
    00000390: 	psrldq	$0x8, %xmm0
    00000395: 	paddd	%xmm0, %xmm3
    00000399: 	movdqa	%xmm3, %xmm0
    0000039d: 	psrldq	$0x4, %xmm0
    000003a2: 	paddd	%xmm0, %xmm3
    000003a6: 	movd	%xmm3, %edx
    000003aa: 	addl	%r10d, %edx
    000003ad: 	movl	%edx, -0x4(%rdi)
    000003b0: 	cmpq	0x58(%rsp), %rcx
    000003b5: 	jne	.Ltmp1590 # Offset: 949
    000003bb: 	addl	$0x1, %esi
    000003be: 	cmpl	%r8d, %esi
    000003c1: 	jne	.Ltmp1591 # Offset: 961
.Ltmp1588:
    000003c7: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000003ce: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    000003d5: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000003dc: 	je	.Ltmp1592 # Offset: 988
.Ltmp1806:
    000003e2: 	movq	-0x20(%rax), %rbp
    000003e6: 	callq	clock@PLT # Offset: 998
    000003eb: 	pxor	%xmm0, %xmm0
    000003ef: 	movq	%rax, end_time(%rip)
    000003f6: 	movq	%rbp, %rdi
    000003f9: 	subq	start_time(%rip), %rax
    00000400: 	cvtsi2sd	%rax, %xmm0
    00000405: 	divsd	DATAat0x24960(%rip), %xmm0
    0000040d: 	callq	_Z13record_resultdPKc # Offset: 1037
    00000412: 	movq	0x10(%rsp), %rax
    00000417: 	pxor	%xmm0, %xmm0
.Ltmp1593:
    0000041b: 	movdqu	(%rax), %xmm7
    0000041f: 	addq	$0x10, %rax
    00000423: 	paddd	%xmm7, %xmm0
    00000427: 	cmpq	0x88(%rsp), %rax
    0000042f: 	jne	.Ltmp1593 # Offset: 1071
    00000431: 	cvttsd2si	init_value(%rip), %eax
    00000439: 	movdqa	%xmm0, %xmm1
    0000043d: 	movq	0x140(%rsp), %rdx
    00000445: 	psrldq	$0x8, %xmm1
    0000044a: 	paddd	%xmm1, %xmm0
    0000044e: 	movdqa	%xmm0, %xmm1
    00000452: 	imull	%eax, %eax
    00000455: 	psrldq	$0x4, %xmm1
    0000045a: 	paddd	%xmm1, %xmm0
    0000045e: 	imull	$0x75300, %eax, %ecx
    00000464: 	movd	%xmm0, %eax
    00000468: 	cmpl	%eax, %ecx
    0000046a: 	jne	.Ltmp1594 # Offset: 1130
.Ltmp1818:
    00000470: 	leaq	0x150(%rsp), %rax
    00000478: 	movq	%rax, 0x30(%rsp)
    0000047d: 	cmpq	%rax, %rdx
    00000480: 	je	.Ltmp1595 # Offset: 1152
    00000482: 	movq	0x150(%rsp), %rax
    0000048a: 	movq	%rdx, %rdi
    0000048d: 	leaq	0x1(%rax), %rsi
    00000491: 	callq	_ZdlPvm@PLT # Offset: 1169
.Ltmp1595:
    00000496: 	movq	0x90(%rsp), %rbx
    0000049e: 	movq	0x98(%rsp), %rsi
    000004a6: 	leaq	DATAat0x245ba(%rip), %rdx
    000004ad: 	movq	%rbx, %rdi
    000004b0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1200
    000004b5: 	movq	%rbx, %rsi
    000004b8: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000004bf: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 1215
    000004c4: 	callq	clock@PLT # Offset: 1220
    000004c9: 	movl	iterations(%rip), %r12d
    000004d0: 	movq	0x10(%rsp), %r8
    000004d5: 	xorl	%ebp, %ebp
    000004d7: 	movq	%rax, start_time(%rip)
    000004de: 	movq	0x10(%rsp), %rax
    000004e3: 	leaq	0xc88(%rax), %rbx
    000004ea: 	addq	$0x8, %rax
    000004ee: 	movq	%rbx, 0x40(%rsp)
    000004f3: 	xorl	%ebx, %ebx
    000004f5: 	movq	%rax, 0x38(%rsp)
    000004fa: 	testl	%r12d, %r12d
    000004fd: 	jle	.Ltmp1596 # Offset: 1277
.Ltmp1602:
    00000503: 	movq	%rbx, (%r8)
    00000506: 	movq	0x40(%rsp), %rax
    0000050b: 	movq	%r8, %rcx
    0000050e: 	movq	%r13, %rdx
    00000511: 	xorl	%esi, %esi
    00000513: 	movq	%rbx, -0x10(%rax)
    00000517: 	movq	0x38(%rsp), %rdi
    0000051c: 	movq	%rbx, %rax
    0000051f: 	andq	$-0x8, %rdi
    00000523: 	subq	%rdi, %rcx
    00000526: 	addl	$0xc80, %ecx
    0000052c: 	shrl	$0x3, %ecx
    0000052f: 	rep		stosq	%rax, %es:(%rdi)
    00000532: 	movq	0x58(%rsp), %rdi
.Ltmp1598:
    00000537: 	movl	(%rdx), %r10d
    0000053a: 	movl	0x4(%rdx), %r9d
    0000053e: 	leaq	-0x1d4c00(%rdi), %rax
    00000545: 	movq	%r8, %rcx
.Ltmp1597:
    00000548: 	movl	(%rax), %r14d
    0000054b: 	movl	0x4(%rax), %r11d
    0000054f: 	addq	$0x960, %rax
    00000555: 	imull	%r10d, %r14d
    00000559: 	imull	%r9d, %r11d
    0000055d: 	addl	%r14d, %r11d
    00000560: 	addl	%r11d, (%rcx)
    00000563: 	addq	$0x4, %rcx
    00000567: 	cmpq	%rdi, %rax
    0000056a: 	jne	.Ltmp1597 # Offset: 1386
    0000056c: 	addl	$0x2, %esi
    0000056f: 	addq	$0x8, %rdx
    00000573: 	leaq	0x8(%rax), %rdi
    00000577: 	cmpl	$0x256, %esi
    0000057d: 	jne	.Ltmp1598 # Offset: 1405
    0000057f: 	movq	(%rsp), %rsi
    00000583: 	movq	%r8, %rdi
    00000586: 	xorl	%r9d, %r9d
.Ltmp1601:
    00000589: 	movl	(%rdi), %ecx
    0000058b: 	movl	$0x256, %edx
    00000590: 	jmp	.Ltmp1599 # Offset: 1424
    00000592: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1600:
    00000598: 	movl	$0x257, %edx
.Ltmp1599:
    0000059d: 	movl	(%rsi,%rdx,4), %eax
    000005a0: 	imull	(%r13,%rdx,4), %eax
    000005a6: 	addl	%eax, %ecx
    000005a8: 	cmpq	$0x257, %rdx
    000005af: 	jne	.Ltmp1600 # Offset: 1455
    000005b1: 	addl	$0x258, %r9d
    000005b8: 	movl	%ecx, (%rdi)
    000005ba: 	addq	$0x960, %rsi
    000005c1: 	addq	$0x4, %rdi
    000005c5: 	cmpl	$0x75300, %r9d
    000005cc: 	jne	.Ltmp1601 # Offset: 1484
    000005ce: 	addl	$0x1, %ebp
    000005d1: 	cmpl	%r12d, %ebp
    000005d4: 	jne	.Ltmp1602 # Offset: 1492
.Ltmp1596:
    000005da: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000005e1: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    000005e8: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000005ef: 	je	.Ltmp1603 # Offset: 1519
.Ltmp1817:
    000005f5: 	movq	-0x20(%rax), %rbp
    000005f9: 	callq	clock@PLT # Offset: 1529
    000005fe: 	pxor	%xmm0, %xmm0
    00000602: 	movq	%rax, end_time(%rip)
    00000609: 	movq	%rbp, %rdi
    0000060c: 	subq	start_time(%rip), %rax
    00000613: 	cvtsi2sd	%rax, %xmm0
    00000618: 	divsd	DATAat0x24960(%rip), %xmm0
    00000620: 	callq	_Z13record_resultdPKc # Offset: 1568
    00000625: 	movq	0x10(%rsp), %rax
    0000062a: 	pxor	%xmm0, %xmm0
.Ltmp1604:
    0000062e: 	movdqu	(%rax), %xmm6
    00000632: 	addq	$0x10, %rax
    00000636: 	paddd	%xmm6, %xmm0
    0000063a: 	cmpq	0x88(%rsp), %rax
    00000642: 	jne	.Ltmp1604 # Offset: 1602
    00000644: 	cvttsd2si	init_value(%rip), %eax
    0000064c: 	movdqa	%xmm0, %xmm1
    00000650: 	movq	0x140(%rsp), %rdx
    00000658: 	psrldq	$0x8, %xmm1
    0000065d: 	paddd	%xmm1, %xmm0
    00000661: 	movdqa	%xmm0, %xmm1
    00000665: 	imull	%eax, %eax
    00000668: 	psrldq	$0x4, %xmm1
    0000066d: 	paddd	%xmm1, %xmm0
    00000671: 	imull	$0x75300, %eax, %ecx
    00000677: 	movd	%xmm0, %eax
    0000067b: 	cmpl	%eax, %ecx
    0000067d: 	jne	.Ltmp1605 # Offset: 1661
.Ltmp1816:
    00000683: 	cmpq	0x30(%rsp), %rdx
    00000688: 	je	.Ltmp1606 # Offset: 1672
    0000068a: 	movq	0x150(%rsp), %rax
    00000692: 	movq	%rdx, %rdi
    00000695: 	leaq	0x1(%rax), %rsi
    00000699: 	callq	_ZdlPvm@PLT # Offset: 1689
.Ltmp1606:
    0000069e: 	movq	0x90(%rsp), %rbx
    000006a6: 	movq	0x98(%rsp), %rsi
    000006ae: 	leaq	DATAat0x245f0(%rip), %rdx
    000006b5: 	movq	%rbx, %rdi
    000006b8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1720
    000006bd: 	movq	%rbx, %rsi
    000006c0: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000006c7: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 1735
    000006cc: 	callq	clock@PLT # Offset: 1740
    000006d1: 	movl	iterations(%rip), %r8d
    000006d8: 	movq	0x10(%rsp), %r9
    000006dd: 	xorl	%esi, %esi
    000006df: 	movq	%rax, start_time(%rip)
    000006e6: 	movq	0x10(%rsp), %rax
    000006eb: 	leaq	0xc88(%rax), %rbx
    000006f2: 	addq	$0x8, %rax
    000006f6: 	movq	%rax, 0x38(%rsp)
    000006fb: 	xorl	%eax, %eax
    000006fd: 	movq	%rbx, 0x40(%rsp)
    00000702: 	testl	%r8d, %r8d
    00000705: 	jle	.Ltmp1607 # Offset: 1797
.Ltmp1610:
    0000070b: 	movq	%rax, (%r9)
    0000070e: 	movq	0x40(%rsp), %rbx
    00000713: 	movq	%r9, %rcx
    00000716: 	movq	%rax, -0x10(%rbx)
    0000071a: 	movq	0x38(%rsp), %rdi
    0000071f: 	andq	$-0x8, %rdi
    00000723: 	subq	%rdi, %rcx
    00000726: 	addl	$0xc80, %ecx
    0000072c: 	shrl	$0x3, %ecx
    0000072f: 	rep		stosq	%rax, %es:(%rdi)
    00000732: 	movq	%r9, %rdi
    00000735: 	movq	(%rsp), %rcx
.Ltmp1609:
    00000739: 	movl	(%rdi), %r10d
    0000073c: 	xorl	%edx, %edx
    0000073e: 	pxor	%xmm3, %xmm3
    00000742: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1608:
    00000748: 	movdqu	(%r13,%rdx), %xmm0
    0000074f: 	movdqu	(%rcx,%rdx), %xmm2
    00000754: 	movdqu	(%r13,%rdx), %xmm1
    0000075b: 	movdqu	(%rcx,%rdx), %xmm6
    00000760: 	addq	$0x10, %rdx
    00000764: 	psrlq	$0x20, %xmm0
    00000769: 	psrlq	$0x20, %xmm2
    0000076e: 	pmuludq	%xmm6, %xmm1
    00000772: 	pmuludq	%xmm2, %xmm0
    00000776: 	pshufd	$0x8, %xmm1, %xmm1
    0000077b: 	pshufd	$0x8, %xmm0, %xmm0
    00000780: 	punpckldq	%xmm0, %xmm1
    00000784: 	paddd	%xmm1, %xmm3
    00000788: 	cmpq	$0x960, %rdx
    0000078f: 	jne	.Ltmp1608 # Offset: 1935
    00000791: 	movdqa	%xmm3, %xmm0
    00000795: 	addq	$0x4, %rdi
    00000799: 	addq	$0x960, %rcx
    000007a0: 	psrldq	$0x8, %xmm0
    000007a5: 	paddd	%xmm0, %xmm3
    000007a9: 	movdqa	%xmm3, %xmm0
    000007ad: 	psrldq	$0x4, %xmm0
    000007b2: 	paddd	%xmm0, %xmm3
    000007b6: 	movd	%xmm3, %edx
    000007ba: 	addl	%r10d, %edx
    000007bd: 	movl	%edx, -0x4(%rdi)
    000007c0: 	cmpq	0x58(%rsp), %rcx
    000007c5: 	jne	.Ltmp1609 # Offset: 1989
    000007cb: 	addl	$0x1, %esi
    000007ce: 	cmpl	%r8d, %esi
    000007d1: 	jne	.Ltmp1610 # Offset: 2001
.Ltmp1607:
    000007d7: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000007de: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    000007e5: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000007ec: 	je	.Ltmp1611 # Offset: 2028
.Ltmp1815:
    000007f2: 	movq	-0x20(%rax), %rbp
    000007f6: 	callq	clock@PLT # Offset: 2038
    000007fb: 	pxor	%xmm0, %xmm0
    000007ff: 	movq	%rax, end_time(%rip)
    00000806: 	movq	%rbp, %rdi
    00000809: 	subq	start_time(%rip), %rax
    00000810: 	cvtsi2sd	%rax, %xmm0
    00000815: 	divsd	DATAat0x24960(%rip), %xmm0
    0000081d: 	callq	_Z13record_resultdPKc # Offset: 2077
    00000822: 	movq	0x10(%rsp), %rax
    00000827: 	pxor	%xmm0, %xmm0
.Ltmp1612:
    0000082b: 	movdqu	(%rax), %xmm7
    0000082f: 	addq	$0x10, %rax
    00000833: 	paddd	%xmm7, %xmm0
    00000837: 	cmpq	0x88(%rsp), %rax
    0000083f: 	jne	.Ltmp1612 # Offset: 2111
    00000841: 	cvttsd2si	init_value(%rip), %eax
    00000849: 	movdqa	%xmm0, %xmm1
    0000084d: 	movq	0x140(%rsp), %rdx
    00000855: 	psrldq	$0x8, %xmm1
    0000085a: 	paddd	%xmm1, %xmm0
    0000085e: 	movdqa	%xmm0, %xmm1
    00000862: 	imull	%eax, %eax
    00000865: 	psrldq	$0x4, %xmm1
    0000086a: 	paddd	%xmm1, %xmm0
    0000086e: 	imull	$0x75300, %eax, %ecx
    00000874: 	movd	%xmm0, %eax
    00000878: 	cmpl	%eax, %ecx
    0000087a: 	jne	.Ltmp1613 # Offset: 2170
.Ltmp1814:
    00000880: 	cmpq	0x30(%rsp), %rdx
    00000885: 	je	.Ltmp1614 # Offset: 2181
    00000887: 	movq	0x150(%rsp), %rax
    0000088f: 	movq	%rdx, %rdi
    00000892: 	leaq	0x1(%rax), %rsi
    00000896: 	callq	_ZdlPvm@PLT # Offset: 2198
.Ltmp1614:
    0000089b: 	movq	0x90(%rsp), %rbx
    000008a3: 	movq	0x98(%rsp), %rsi
    000008ab: 	leaq	DATAat0x24610(%rip), %rdx
    000008b2: 	movq	%rbx, %rdi
    000008b5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2229
    000008ba: 	movq	%rbx, %rsi
    000008bd: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000008c4: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 2244
    000008c9: 	callq	clock@PLT # Offset: 2249
    000008ce: 	movl	iterations(%rip), %r8d
    000008d5: 	movq	0x10(%rsp), %r9
    000008da: 	xorl	%esi, %esi
    000008dc: 	movq	%rax, start_time(%rip)
    000008e3: 	movq	0x10(%rsp), %rax
    000008e8: 	leaq	0xc88(%rax), %rbx
    000008ef: 	addq	$0x8, %rax
    000008f3: 	movq	%rax, 0x38(%rsp)
    000008f8: 	xorl	%eax, %eax
    000008fa: 	movq	%rbx, 0x40(%rsp)
    000008ff: 	testl	%r8d, %r8d
    00000902: 	jle	.Ltmp1615 # Offset: 2306
.Ltmp1618:
    00000908: 	movq	%rax, (%r9)
    0000090b: 	movq	0x40(%rsp), %rbx
    00000910: 	movq	%r9, %rcx
    00000913: 	movq	%rax, -0x10(%rbx)
    00000917: 	movq	0x38(%rsp), %rdi
    0000091c: 	andq	$-0x8, %rdi
    00000920: 	subq	%rdi, %rcx
    00000923: 	addl	$0xc80, %ecx
    00000929: 	shrl	$0x3, %ecx
    0000092c: 	rep		stosq	%rax, %es:(%rdi)
    0000092f: 	movq	%r9, %rdi
    00000932: 	movq	(%rsp), %rcx
.Ltmp1617:
    00000936: 	movl	(%rdi), %r10d
    00000939: 	xorl	%edx, %edx
    0000093b: 	pxor	%xmm3, %xmm3
    0000093f: 	nop # Size: 1
.Ltmp1616:
    00000940: 	movdqu	(%r13,%rdx), %xmm0
    00000947: 	movdqu	(%rcx,%rdx), %xmm2
    0000094c: 	movdqu	(%r13,%rdx), %xmm1
    00000953: 	movdqu	(%rcx,%rdx), %xmm7
    00000958: 	addq	$0x10, %rdx
    0000095c: 	psrlq	$0x20, %xmm0
    00000961: 	psrlq	$0x20, %xmm2
    00000966: 	pmuludq	%xmm7, %xmm1
    0000096a: 	pmuludq	%xmm2, %xmm0
    0000096e: 	pshufd	$0x8, %xmm1, %xmm1
    00000973: 	pshufd	$0x8, %xmm0, %xmm0
    00000978: 	punpckldq	%xmm0, %xmm1
    0000097c: 	paddd	%xmm1, %xmm3
    00000980: 	cmpq	$0x960, %rdx
    00000987: 	jne	.Ltmp1616 # Offset: 2439
    00000989: 	movdqa	%xmm3, %xmm0
    0000098d: 	addq	$0x4, %rdi
    00000991: 	addq	$0x960, %rcx
    00000998: 	psrldq	$0x8, %xmm0
    0000099d: 	paddd	%xmm0, %xmm3
    000009a1: 	movdqa	%xmm3, %xmm0
    000009a5: 	psrldq	$0x4, %xmm0
    000009aa: 	paddd	%xmm0, %xmm3
    000009ae: 	movd	%xmm3, %edx
    000009b2: 	addl	%r10d, %edx
    000009b5: 	movl	%edx, -0x4(%rdi)
    000009b8: 	cmpq	0x58(%rsp), %rcx
    000009bd: 	jne	.Ltmp1617 # Offset: 2493
    000009c3: 	addl	$0x1, %esi
    000009c6: 	cmpl	%r8d, %esi
    000009c9: 	jne	.Ltmp1618 # Offset: 2505
.Ltmp1615:
    000009cf: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000009d6: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    000009dd: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000009e4: 	je	.Ltmp1619 # Offset: 2532
.Ltmp1813:
    000009ea: 	movq	-0x20(%rax), %rbp
    000009ee: 	callq	clock@PLT # Offset: 2542
    000009f3: 	pxor	%xmm0, %xmm0
    000009f7: 	movq	%rax, end_time(%rip)
    000009fe: 	movq	%rbp, %rdi
    00000a01: 	subq	start_time(%rip), %rax
    00000a08: 	cvtsi2sd	%rax, %xmm0
    00000a0d: 	divsd	DATAat0x24960(%rip), %xmm0
    00000a15: 	callq	_Z13record_resultdPKc # Offset: 2581
    00000a1a: 	movq	0x10(%rsp), %rax
    00000a1f: 	pxor	%xmm0, %xmm0
.Ltmp1620:
    00000a23: 	movdqu	(%rax), %xmm6
    00000a27: 	addq	$0x10, %rax
    00000a2b: 	paddd	%xmm6, %xmm0
    00000a2f: 	cmpq	0x88(%rsp), %rax
    00000a37: 	jne	.Ltmp1620 # Offset: 2615
    00000a39: 	cvttsd2si	init_value(%rip), %eax
    00000a41: 	movdqa	%xmm0, %xmm1
    00000a45: 	movq	0x140(%rsp), %rdx
    00000a4d: 	psrldq	$0x8, %xmm1
    00000a52: 	paddd	%xmm1, %xmm0
    00000a56: 	movdqa	%xmm0, %xmm1
    00000a5a: 	imull	%eax, %eax
    00000a5d: 	psrldq	$0x4, %xmm1
    00000a62: 	paddd	%xmm1, %xmm0
    00000a66: 	imull	$0x75300, %eax, %ecx
    00000a6c: 	movd	%xmm0, %eax
    00000a70: 	cmpl	%eax, %ecx
    00000a72: 	jne	.Ltmp1621 # Offset: 2674
.Ltmp1812:
    00000a78: 	cmpq	0x30(%rsp), %rdx
    00000a7d: 	je	.Ltmp1622 # Offset: 2685
    00000a7f: 	movq	0x150(%rsp), %rax
    00000a87: 	movq	%rdx, %rdi
    00000a8a: 	leaq	0x1(%rax), %rsi
    00000a8e: 	callq	_ZdlPvm@PLT # Offset: 2702
.Ltmp1622:
    00000a93: 	movq	0x90(%rsp), %rbx
    00000a9b: 	movq	0x98(%rsp), %rsi
    00000aa3: 	leaq	DATAat0x24630(%rip), %rdx
    00000aaa: 	movq	%rbx, %rdi
    00000aad: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2733
    00000ab2: 	movq	%rbx, %rsi
    00000ab5: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000abc: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 2748
    00000ac1: 	callq	clock@PLT # Offset: 2753
    00000ac6: 	movl	iterations(%rip), %r12d
    00000acd: 	movq	0x10(%rsp), %r8
    00000ad2: 	xorl	%ebp, %ebp
    00000ad4: 	movq	%rax, start_time(%rip)
    00000adb: 	movq	0x10(%rsp), %rax
    00000ae0: 	leaq	0xc88(%rax), %rbx
    00000ae7: 	addq	$0x8, %rax
    00000aeb: 	movq	%rbx, 0x40(%rsp)
    00000af0: 	xorl	%ebx, %ebx
    00000af2: 	movq	%rax, 0x38(%rsp)
    00000af7: 	testl	%r12d, %r12d
    00000afa: 	jle	.Ltmp1623 # Offset: 2810
.Ltmp1629:
    00000b00: 	movq	%rbx, (%r8)
    00000b03: 	movq	0x40(%rsp), %rax
    00000b08: 	movq	%r8, %rcx
    00000b0b: 	movq	%r13, %rdx
    00000b0e: 	xorl	%esi, %esi
    00000b10: 	movq	%rbx, -0x10(%rax)
    00000b14: 	movq	0x38(%rsp), %rdi
    00000b19: 	movq	%rbx, %rax
    00000b1c: 	andq	$-0x8, %rdi
    00000b20: 	subq	%rdi, %rcx
    00000b23: 	addl	$0xc80, %ecx
    00000b29: 	shrl	$0x3, %ecx
    00000b2c: 	rep		stosq	%rax, %es:(%rdi)
    00000b2f: 	movq	0x58(%rsp), %rdi
.Ltmp1625:
    00000b34: 	movl	(%rdx), %r10d
    00000b37: 	movl	0x4(%rdx), %r9d
    00000b3b: 	leaq	-0x1d4c00(%rdi), %rax
    00000b42: 	movq	%r8, %rcx
.Ltmp1624:
    00000b45: 	movl	(%rax), %r14d
    00000b48: 	movl	0x4(%rax), %r11d
    00000b4c: 	addq	$0x960, %rax
    00000b52: 	imull	%r10d, %r14d
    00000b56: 	imull	%r9d, %r11d
    00000b5a: 	addl	%r14d, %r11d
    00000b5d: 	addl	%r11d, (%rcx)
    00000b60: 	addq	$0x4, %rcx
    00000b64: 	cmpq	%rdi, %rax
    00000b67: 	jne	.Ltmp1624 # Offset: 2919
    00000b69: 	addl	$0x2, %esi
    00000b6c: 	addq	$0x8, %rdx
    00000b70: 	leaq	0x8(%rax), %rdi
    00000b74: 	cmpl	$0x256, %esi
    00000b7a: 	jne	.Ltmp1625 # Offset: 2938
    00000b7c: 	movq	(%rsp), %rsi
    00000b80: 	movq	%r8, %rdi
    00000b83: 	xorl	%r9d, %r9d
.Ltmp1628:
    00000b86: 	movl	(%rdi), %ecx
    00000b88: 	movl	$0x256, %edx
    00000b8d: 	jmp	.Ltmp1626 # Offset: 2957
    00000b8f: 	nop # Size: 1
.Ltmp1627:
    00000b90: 	movl	$0x257, %edx
.Ltmp1626:
    00000b95: 	movl	(%rsi,%rdx,4), %eax
    00000b98: 	imull	(%r13,%rdx,4), %eax
    00000b9e: 	addl	%eax, %ecx
    00000ba0: 	cmpq	$0x257, %rdx
    00000ba7: 	jne	.Ltmp1627 # Offset: 2983
    00000ba9: 	addl	$0x258, %r9d
    00000bb0: 	movl	%ecx, (%rdi)
    00000bb2: 	addq	$0x960, %rsi
    00000bb9: 	addq	$0x4, %rdi
    00000bbd: 	cmpl	$0x75300, %r9d
    00000bc4: 	jne	.Ltmp1628 # Offset: 3012
    00000bc6: 	addl	$0x1, %ebp
    00000bc9: 	cmpl	%r12d, %ebp
    00000bcc: 	jne	.Ltmp1629 # Offset: 3020
.Ltmp1623:
    00000bd2: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000bd9: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00000be0: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000be7: 	je	.Ltmp1630 # Offset: 3047
.Ltmp1811:
    00000bed: 	movq	-0x20(%rax), %rbp
    00000bf1: 	callq	clock@PLT # Offset: 3057
    00000bf6: 	pxor	%xmm0, %xmm0
    00000bfa: 	movq	%rax, end_time(%rip)
    00000c01: 	movq	%rbp, %rdi
    00000c04: 	subq	start_time(%rip), %rax
    00000c0b: 	cvtsi2sd	%rax, %xmm0
    00000c10: 	divsd	DATAat0x24960(%rip), %xmm0
    00000c18: 	callq	_Z13record_resultdPKc # Offset: 3096
    00000c1d: 	movq	0x10(%rsp), %rax
    00000c22: 	pxor	%xmm0, %xmm0
.Ltmp1631:
    00000c26: 	movdqu	(%rax), %xmm7
    00000c2a: 	addq	$0x10, %rax
    00000c2e: 	paddd	%xmm7, %xmm0
    00000c32: 	cmpq	0x88(%rsp), %rax
    00000c3a: 	jne	.Ltmp1631 # Offset: 3130
    00000c3c: 	cvttsd2si	init_value(%rip), %eax
    00000c44: 	movdqa	%xmm0, %xmm1
    00000c48: 	movq	0x140(%rsp), %rdx
    00000c50: 	psrldq	$0x8, %xmm1
    00000c55: 	paddd	%xmm1, %xmm0
    00000c59: 	movdqa	%xmm0, %xmm1
    00000c5d: 	imull	%eax, %eax
    00000c60: 	psrldq	$0x4, %xmm1
    00000c65: 	paddd	%xmm1, %xmm0
    00000c69: 	imull	$0x75300, %eax, %ecx
    00000c6f: 	movd	%xmm0, %eax
    00000c73: 	cmpl	%eax, %ecx
    00000c75: 	jne	.Ltmp1632 # Offset: 3189
.Ltmp1810:
    00000c7b: 	cmpq	0x30(%rsp), %rdx
    00000c80: 	je	.Ltmp1633 # Offset: 3200
    00000c82: 	movq	0x150(%rsp), %rax
    00000c8a: 	movq	%rdx, %rdi
    00000c8d: 	leaq	0x1(%rax), %rsi
    00000c91: 	callq	_ZdlPvm@PLT # Offset: 3217
.Ltmp1633:
    00000c96: 	movq	0x90(%rsp), %rbx
    00000c9e: 	movq	0x98(%rsp), %rsi
    00000ca6: 	leaq	DATAat0x24650(%rip), %rdx
    00000cad: 	movq	%rbx, %rdi
    00000cb0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3248
    00000cb5: 	movq	%rbx, %rsi
    00000cb8: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000cbf: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 3263
    00000cc4: 	callq	clock@PLT # Offset: 3268
    00000cc9: 	movl	iterations(%rip), %r8d
    00000cd0: 	movq	0x10(%rsp), %r9
    00000cd5: 	xorl	%esi, %esi
    00000cd7: 	movq	%rax, start_time(%rip)
    00000cde: 	movq	0x10(%rsp), %rax
    00000ce3: 	leaq	0xc88(%rax), %rbx
    00000cea: 	addq	$0x8, %rax
    00000cee: 	movq	%rax, 0x38(%rsp)
    00000cf3: 	xorl	%eax, %eax
    00000cf5: 	movq	%rbx, 0x40(%rsp)
    00000cfa: 	testl	%r8d, %r8d
    00000cfd: 	jle	.Ltmp1634 # Offset: 3325
.Ltmp1637:
    00000d03: 	movq	%rax, (%r9)
    00000d06: 	movq	0x40(%rsp), %rbx
    00000d0b: 	movq	%r9, %rcx
    00000d0e: 	movq	%rax, -0x10(%rbx)
    00000d12: 	movq	0x38(%rsp), %rdi
    00000d17: 	andq	$-0x8, %rdi
    00000d1b: 	subq	%rdi, %rcx
    00000d1e: 	addl	$0xc80, %ecx
    00000d24: 	shrl	$0x3, %ecx
    00000d27: 	rep		stosq	%rax, %es:(%rdi)
    00000d2a: 	movq	%r9, %rdi
    00000d2d: 	movq	(%rsp), %rcx
.Ltmp1636:
    00000d31: 	movd	(%rdi), %xmm3
    00000d35: 	xorl	%edx, %edx
    00000d37: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1635:
    00000d40: 	movdqu	(%r13,%rdx), %xmm0
    00000d47: 	movdqu	(%rcx,%rdx), %xmm2
    00000d4c: 	movdqu	(%r13,%rdx), %xmm1
    00000d53: 	movdqu	(%rcx,%rdx), %xmm7
    00000d58: 	addq	$0x10, %rdx
    00000d5c: 	psrlq	$0x20, %xmm0
    00000d61: 	psrlq	$0x20, %xmm2
    00000d66: 	pmuludq	%xmm7, %xmm1
    00000d6a: 	pmuludq	%xmm2, %xmm0
    00000d6e: 	pshufd	$0x8, %xmm1, %xmm1
    00000d73: 	pshufd	$0x8, %xmm0, %xmm0
    00000d78: 	punpckldq	%xmm0, %xmm1
    00000d7c: 	paddd	%xmm1, %xmm3
    00000d80: 	cmpq	$0x960, %rdx
    00000d87: 	jne	.Ltmp1635 # Offset: 3463
    00000d89: 	pshufd	$0x55, %xmm3, %xmm0
    00000d8e: 	movd	%xmm3, %r10d
    00000d93: 	addq	$0x4, %rdi
    00000d97: 	addq	$0x960, %rcx
    00000d9e: 	movd	%xmm0, %edx
    00000da2: 	movdqa	%xmm3, %xmm0
    00000da6: 	punpckhdq	%xmm3, %xmm0
    00000daa: 	addl	%r10d, %edx
    00000dad: 	pshufd	$0xff, %xmm3, %xmm3
    00000db2: 	movd	%xmm0, %r10d
    00000db7: 	addl	%r10d, %edx
    00000dba: 	movd	%xmm3, %r10d
    00000dbf: 	addl	%r10d, %edx
    00000dc2: 	movl	%edx, -0x4(%rdi)
    00000dc5: 	cmpq	0x58(%rsp), %rcx
    00000dca: 	jne	.Ltmp1636 # Offset: 3530
    00000dd0: 	addl	$0x1, %esi
    00000dd3: 	cmpl	%r8d, %esi
    00000dd6: 	jne	.Ltmp1637 # Offset: 3542
.Ltmp1634:
    00000ddc: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000de3: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00000dea: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000df1: 	je	.Ltmp1638 # Offset: 3569
.Ltmp1809:
    00000df7: 	movq	-0x20(%rax), %rbp
    00000dfb: 	callq	clock@PLT # Offset: 3579
    00000e00: 	pxor	%xmm0, %xmm0
    00000e04: 	movq	%rax, end_time(%rip)
    00000e0b: 	movq	%rbp, %rdi
    00000e0e: 	subq	start_time(%rip), %rax
    00000e15: 	cvtsi2sd	%rax, %xmm0
    00000e1a: 	divsd	DATAat0x24960(%rip), %xmm0
    00000e22: 	callq	_Z13record_resultdPKc # Offset: 3618
    00000e27: 	movq	0x10(%rsp), %rax
    00000e2c: 	pxor	%xmm0, %xmm0
.Ltmp1639:
    00000e30: 	movdqu	(%rax), %xmm6
    00000e34: 	addq	$0x10, %rax
    00000e38: 	paddd	%xmm6, %xmm0
    00000e3c: 	cmpq	0x88(%rsp), %rax
    00000e44: 	jne	.Ltmp1639 # Offset: 3652
    00000e46: 	cvttsd2si	init_value(%rip), %eax
    00000e4e: 	movdqa	%xmm0, %xmm1
    00000e52: 	movq	0x140(%rsp), %rdx
    00000e5a: 	psrldq	$0x8, %xmm1
    00000e5f: 	paddd	%xmm1, %xmm0
    00000e63: 	movdqa	%xmm0, %xmm1
    00000e67: 	imull	%eax, %eax
    00000e6a: 	psrldq	$0x4, %xmm1
    00000e6f: 	paddd	%xmm1, %xmm0
    00000e73: 	imull	$0x75300, %eax, %ecx
    00000e79: 	movd	%xmm0, %eax
    00000e7d: 	cmpl	%eax, %ecx
    00000e7f: 	jne	.Ltmp1640 # Offset: 3711
.Ltmp1808:
    00000e85: 	cmpq	0x30(%rsp), %rdx
    00000e8a: 	je	.Ltmp1641 # Offset: 3722
    00000e8c: 	movq	0x150(%rsp), %rax
    00000e94: 	movq	%rdx, %rdi
    00000e97: 	leaq	0x1(%rax), %rsi
    00000e9b: 	callq	_ZdlPvm@PLT # Offset: 3739
.Ltmp1641:
    00000ea0: 	movq	0x90(%rsp), %rbx
    00000ea8: 	movq	0x98(%rsp), %rsi
    00000eb0: 	leaq	DATAat0x24678(%rip), %rdx
    00000eb7: 	movq	%rbx, %rdi
    00000eba: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3770
    00000ebf: 	movq	%rbx, %rsi
    00000ec2: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000ec9: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 3785
    00000ece: 	callq	clock@PLT # Offset: 3790
    00000ed3: 	movl	iterations(%rip), %r8d
    00000eda: 	movq	0x10(%rsp), %r9
    00000edf: 	xorl	%esi, %esi
    00000ee1: 	movq	%rax, start_time(%rip)
    00000ee8: 	movq	0x10(%rsp), %rax
    00000eed: 	leaq	0xc88(%rax), %rbx
    00000ef4: 	addq	$0x8, %rax
    00000ef8: 	movq	%rax, 0x38(%rsp)
    00000efd: 	xorl	%eax, %eax
    00000eff: 	movq	%rbx, 0x40(%rsp)
    00000f04: 	testl	%r8d, %r8d
    00000f07: 	jle	.Ltmp1642 # Offset: 3847
.Ltmp1645:
    00000f0d: 	movq	%rax, (%r9)
    00000f10: 	movq	0x40(%rsp), %rbx
    00000f15: 	movq	%r9, %rcx
    00000f18: 	movq	%rax, -0x10(%rbx)
    00000f1c: 	movq	0x38(%rsp), %rdi
    00000f21: 	andq	$-0x8, %rdi
    00000f25: 	subq	%rdi, %rcx
    00000f28: 	addl	$0xc80, %ecx
    00000f2e: 	shrl	$0x3, %ecx
    00000f31: 	rep		stosq	%rax, %es:(%rdi)
    00000f34: 	movq	%r9, %rdi
    00000f37: 	movq	(%rsp), %rcx
.Ltmp1644:
    00000f3b: 	movd	(%rdi), %xmm3
    00000f3f: 	xorl	%edx, %edx
    00000f41: 	nopl	(%rax) # Size: 7
.Ltmp1643:
    00000f48: 	movdqu	(%r13,%rdx), %xmm0
    00000f4f: 	movdqu	(%rcx,%rdx), %xmm2
    00000f54: 	movdqu	(%r13,%rdx), %xmm1
    00000f5b: 	movdqu	(%rcx,%rdx), %xmm7
    00000f60: 	addq	$0x10, %rdx
    00000f64: 	psrlq	$0x20, %xmm0
    00000f69: 	psrlq	$0x20, %xmm2
    00000f6e: 	pmuludq	%xmm7, %xmm1
    00000f72: 	pmuludq	%xmm2, %xmm0
    00000f76: 	pshufd	$0x8, %xmm1, %xmm1
    00000f7b: 	pshufd	$0x8, %xmm0, %xmm0
    00000f80: 	punpckldq	%xmm0, %xmm1
    00000f84: 	paddd	%xmm1, %xmm3
    00000f88: 	cmpq	$0x960, %rdx
    00000f8f: 	jne	.Ltmp1643 # Offset: 3983
    00000f91: 	pshufd	$0x55, %xmm3, %xmm0
    00000f96: 	movd	%xmm3, %r10d
    00000f9b: 	addq	$0x4, %rdi
    00000f9f: 	addq	$0x960, %rcx
    00000fa6: 	movd	%xmm0, %edx
    00000faa: 	movdqa	%xmm3, %xmm0
    00000fae: 	punpckhdq	%xmm3, %xmm0
    00000fb2: 	addl	%r10d, %edx
    00000fb5: 	pshufd	$0xff, %xmm3, %xmm3
    00000fba: 	movd	%xmm0, %r10d
    00000fbf: 	addl	%r10d, %edx
    00000fc2: 	movd	%xmm3, %r10d
    00000fc7: 	addl	%r10d, %edx
    00000fca: 	movl	%edx, -0x4(%rdi)
    00000fcd: 	cmpq	0x58(%rsp), %rcx
    00000fd2: 	jne	.Ltmp1644 # Offset: 4050
    00000fd8: 	addl	$0x1, %esi
    00000fdb: 	cmpl	%r8d, %esi
    00000fde: 	jne	.Ltmp1645 # Offset: 4062
.Ltmp1642:
    00000fe4: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000feb: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00000ff2: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000ff9: 	je	.Ltmp1646 # Offset: 4089
.Ltmp1823:
    00000fff: 	movq	-0x20(%rax), %rbp
    00001003: 	callq	clock@PLT # Offset: 4099
    00001008: 	pxor	%xmm0, %xmm0
    0000100c: 	movq	%rax, end_time(%rip)
    00001013: 	movq	%rbp, %rdi
    00001016: 	subq	start_time(%rip), %rax
    0000101d: 	cvtsi2sd	%rax, %xmm0
    00001022: 	divsd	DATAat0x24960(%rip), %xmm0
    0000102a: 	callq	_Z13record_resultdPKc # Offset: 4138
    0000102f: 	movq	0x10(%rsp), %rax
    00001034: 	pxor	%xmm0, %xmm0
.Ltmp1647:
    00001038: 	movdqu	(%rax), %xmm5
    0000103c: 	addq	$0x10, %rax
    00001040: 	paddd	%xmm5, %xmm0
    00001044: 	cmpq	0x88(%rsp), %rax
    0000104c: 	jne	.Ltmp1647 # Offset: 4172
    0000104e: 	cvttsd2si	init_value(%rip), %eax
    00001056: 	movdqa	%xmm0, %xmm1
    0000105a: 	movq	0x140(%rsp), %rdx
    00001062: 	psrldq	$0x8, %xmm1
    00001067: 	paddd	%xmm1, %xmm0
    0000106b: 	movdqa	%xmm0, %xmm1
    0000106f: 	imull	%eax, %eax
    00001072: 	psrldq	$0x4, %xmm1
    00001077: 	paddd	%xmm1, %xmm0
    0000107b: 	imull	$0x75300, %eax, %ecx
    00001081: 	movd	%xmm0, %eax
    00001085: 	cmpl	%eax, %ecx
    00001087: 	jne	.Ltmp1648 # Offset: 4231
.Ltmp1822:
    0000108d: 	cmpq	0x30(%rsp), %rdx
    00001092: 	je	.Ltmp1649 # Offset: 4242
    00001094: 	movq	0x150(%rsp), %rax
    0000109c: 	movq	%rdx, %rdi
    0000109f: 	leaq	0x1(%rax), %rsi
    000010a3: 	callq	_ZdlPvm@PLT # Offset: 4259
.Ltmp1649:
    000010a8: 	movq	0x90(%rsp), %rbx
    000010b0: 	movq	0x98(%rsp), %rsi
    000010b8: 	leaq	DATAat0x246a0(%rip), %rdx
    000010bf: 	movq	%rbx, %rdi
    000010c2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4290
    000010c7: 	movq	%rbx, %rsi
    000010ca: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000010d1: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 4305
    000010d6: 	callq	clock@PLT # Offset: 4310
    000010db: 	movl	iterations(%rip), %ecx
    000010e1: 	movq	%rax, start_time(%rip)
    000010e8: 	testl	%ecx, %ecx
    000010ea: 	jle	.Ltmp1650 # Offset: 4330
    000010ec: 	movq	0x10(%rsp), %r11
    000010f1: 	xorl	%r9d, %r9d
    000010f4: 	xorl	%r10d, %r10d
    000010f7: 	leaq	0xc88(%r11), %rax
    000010fe: 	movq	%rax, 0x40(%rsp)
    00001103: 	leaq	0x8(%r11), %rax
    00001107: 	movq	%rax, 0x38(%rsp)
.Ltmp1651:
    0000110c: 	movq	%r10, (%r11)
    0000110f: 	movq	0x40(%rsp), %rax
    00001114: 	movq	%r11, %rcx
    00001117: 	movq	%r11, %rsi
    0000111a: 	addl	$0x1, %r9d
    0000111e: 	movq	%r10, -0x10(%rax)
    00001122: 	movq	0x38(%rsp), %rdi
    00001127: 	movq	%r10, %rax
    0000112a: 	andq	$-0x8, %rdi
    0000112e: 	subq	%rdi, %rcx
    00001131: 	addl	$0xc80, %ecx
    00001137: 	shrl	$0x3, %ecx
    0000113a: 	rep		stosq	%rax, %es:(%rdi)
    0000113d: 	movq	%r13, %rdi
    00001140: 	movq	(%rsp), %rdx
    00001144: 	callq	"_ZN22matvecmul_IJ_unrolled2IiEclEPKiPiS2_ii.constprop.0/1" # Offset: 4420
    00001149: 	cmpl	iterations(%rip), %r9d
    00001150: 	jl	.Ltmp1651 # Offset: 4432
.Ltmp1650:
    00001152: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001159: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00001160: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001167: 	je	.Ltmp1652 # Offset: 4455
.Ltmp1821:
    0000116d: 	movq	-0x20(%rax), %rbp
    00001171: 	callq	clock@PLT # Offset: 4465
    00001176: 	pxor	%xmm0, %xmm0
    0000117a: 	movq	%rax, end_time(%rip)
    00001181: 	movq	%rbp, %rdi
    00001184: 	subq	start_time(%rip), %rax
    0000118b: 	cvtsi2sd	%rax, %xmm0
    00001190: 	divsd	DATAat0x24960(%rip), %xmm0
    00001198: 	callq	_Z13record_resultdPKc # Offset: 4504
    0000119d: 	movq	0x10(%rsp), %rax
    000011a2: 	pxor	%xmm0, %xmm0
.Ltmp1653:
    000011a6: 	movdqu	(%rax), %xmm7
    000011aa: 	addq	$0x10, %rax
    000011ae: 	paddd	%xmm7, %xmm0
    000011b2: 	cmpq	0x88(%rsp), %rax
    000011ba: 	jne	.Ltmp1653 # Offset: 4538
    000011bc: 	cvttsd2si	init_value(%rip), %eax
    000011c4: 	movdqa	%xmm0, %xmm1
    000011c8: 	movq	0x140(%rsp), %rdx
    000011d0: 	psrldq	$0x8, %xmm1
    000011d5: 	paddd	%xmm1, %xmm0
    000011d9: 	movdqa	%xmm0, %xmm1
    000011dd: 	imull	%eax, %eax
    000011e0: 	psrldq	$0x4, %xmm1
    000011e5: 	paddd	%xmm1, %xmm0
    000011e9: 	imull	$0x75300, %eax, %ecx
    000011ef: 	movd	%xmm0, %eax
    000011f3: 	cmpl	%eax, %ecx
    000011f5: 	jne	.Ltmp1654 # Offset: 4597
.Ltmp1820:
    000011fb: 	cmpq	0x30(%rsp), %rdx
    00001200: 	je	.Ltmp1655 # Offset: 4608
    00001202: 	movq	0x150(%rsp), %rax
    0000120a: 	movq	%rdx, %rdi
    0000120d: 	leaq	0x1(%rax), %rsi
    00001211: 	callq	_ZdlPvm@PLT # Offset: 4625
.Ltmp1655:
    00001216: 	movq	0x90(%rsp), %rbx
    0000121e: 	movq	0x98(%rsp), %rsi
    00001226: 	leaq	DATAat0x246c8(%rip), %rdx
    0000122d: 	movq	%rbx, %rdi
    00001230: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4656
    00001235: 	movq	%rbx, %rsi
    00001238: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000123f: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 4671
    00001244: 	callq	clock@PLT # Offset: 4676
    00001249: 	movl	iterations(%rip), %r11d
    00001250: 	movq	0x10(%rsp), %r9
    00001255: 	xorl	%r10d, %r10d
    00001258: 	movq	%rax, start_time(%rip)
    0000125f: 	movq	0x10(%rsp), %rax
    00001264: 	leaq	0xc88(%rax), %rbx
    0000126b: 	addq	$0x8, %rax
    0000126f: 	movq	%rax, 0x38(%rsp)
    00001274: 	xorl	%eax, %eax
    00001276: 	movq	%rbx, 0x40(%rsp)
    0000127b: 	testl	%r11d, %r11d
    0000127e: 	jle	.Ltmp1656 # Offset: 4734
.Ltmp1659:
    00001284: 	movq	%rax, (%r9)
    00001287: 	movq	0x40(%rsp), %rbx
    0000128c: 	movq	%r9, %rcx
    0000128f: 	movq	%rax, -0x10(%rbx)
    00001293: 	movq	0x38(%rsp), %rdi
    00001298: 	xorl	%ebx, %ebx
    0000129a: 	andq	$-0x8, %rdi
    0000129e: 	subq	%rdi, %rcx
    000012a1: 	addl	$0xc80, %ecx
    000012a7: 	shrl	$0x3, %ecx
    000012aa: 	rep		stosq	%rax, %es:(%rdi)
    000012ad: 	movq	0x58(%rsp), %r8
.Ltmp1658:
    000012b2: 	movl	(%r13,%rbx,4), %esi
    000012b7: 	leaq	-0x1d4c00(%r8), %rcx
    000012be: 	movq	%r9, %rdx
    000012c1: 	nopl	(%rax) # Size: 7
.Ltmp1657:
    000012c8: 	movl	(%rcx), %edi
    000012ca: 	addq	$0x2580, %rcx
    000012d1: 	imull	%esi, %edi
    000012d4: 	addl	%edi, (%rdx)
    000012d6: 	movl	-0x1c20(%rcx), %edi
    000012dc: 	imull	%esi, %edi
    000012df: 	addl	%edi, 0x4(%rdx)
    000012e2: 	movl	-0x12c0(%rcx), %edi
    000012e8: 	imull	%esi, %edi
    000012eb: 	addl	%edi, 0x8(%rdx)
    000012ee: 	movl	-0x960(%rcx), %edi
    000012f4: 	imull	%esi, %edi
    000012f7: 	addl	%edi, 0xc(%rdx)
    000012fa: 	addq	$0x10, %rdx
    000012fe: 	cmpq	%r8, %rcx
    00001301: 	jne	.Ltmp1657 # Offset: 4865
    00001303: 	addq	$0x1, %rbx
    00001307: 	leaq	0x4(%rcx), %r8
    0000130b: 	cmpq	$0x258, %rbx
    00001312: 	jne	.Ltmp1658 # Offset: 4882
    00001314: 	addl	$0x1, %r10d
    00001318: 	cmpl	%r11d, %r10d
    0000131b: 	jne	.Ltmp1659 # Offset: 4891
.Ltmp1656:
    00001321: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001328: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    0000132f: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001336: 	je	.Ltmp1660 # Offset: 4918
.Ltmp1819:
    0000133c: 	movq	-0x20(%rax), %rbp
    00001340: 	callq	clock@PLT # Offset: 4928
    00001345: 	pxor	%xmm0, %xmm0
    00001349: 	movq	%rax, end_time(%rip)
    00001350: 	movq	%rbp, %rdi
    00001353: 	subq	start_time(%rip), %rax
    0000135a: 	cvtsi2sd	%rax, %xmm0
    0000135f: 	divsd	DATAat0x24960(%rip), %xmm0
    00001367: 	callq	_Z13record_resultdPKc # Offset: 4967
    0000136c: 	movq	0x10(%rsp), %rax
    00001371: 	pxor	%xmm0, %xmm0
.Ltmp1661:
    00001375: 	movdqu	(%rax), %xmm6
    00001379: 	addq	$0x10, %rax
    0000137d: 	paddd	%xmm6, %xmm0
    00001381: 	cmpq	0x88(%rsp), %rax
    00001389: 	jne	.Ltmp1661 # Offset: 5001
    0000138b: 	cvttsd2si	init_value(%rip), %eax
    00001393: 	movdqa	%xmm0, %xmm1
    00001397: 	movq	0x140(%rsp), %rdx
    0000139f: 	psrldq	$0x8, %xmm1
    000013a4: 	paddd	%xmm1, %xmm0
    000013a8: 	movdqa	%xmm0, %xmm1
    000013ac: 	imull	%eax, %eax
    000013af: 	psrldq	$0x4, %xmm1
    000013b4: 	paddd	%xmm1, %xmm0
    000013b8: 	imull	$0x75300, %eax, %ecx
    000013be: 	movd	%xmm0, %eax
    000013c2: 	cmpl	%eax, %ecx
    000013c4: 	jne	.Ltmp1662 # Offset: 5060
.Ltmp1825:
    000013ca: 	cmpq	0x30(%rsp), %rdx
    000013cf: 	je	.Ltmp1663 # Offset: 5071
    000013d1: 	movq	0x150(%rsp), %rax
    000013d9: 	movq	%rdx, %rdi
    000013dc: 	leaq	0x1(%rax), %rsi
    000013e0: 	callq	_ZdlPvm@PLT # Offset: 5088
.Ltmp1663:
    000013e5: 	movq	0x98(%rsp), %rsi
    000013ed: 	movq	0x90(%rsp), %rdi
    000013f5: 	leaq	DATAat0x246f0(%rip), %rdx
    000013fc: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5116
    00001401: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00001408: 	movq	"_ZL7gLabels/1"+48(%rip), %rbx
    0000140f: 	subq	$0x20, %rax
    00001413: 	cmpq	%rax, %rbx
    00001416: 	je	.Ltmp1664 # Offset: 5142
    0000141c: 	leaq	0x10(%rbx), %rdi
    00001420: 	movq	0x148(%rsp), %r12
    00001428: 	movq	%rdi, (%rbx)
    0000142b: 	movq	0x140(%rsp), %rbp
    00001433: 	movq	%rbp, %rax
    00001436: 	addq	%r12, %rax
    00001439: 	je	.Ltmp1665 # Offset: 5177
    0000143b: 	testq	%rbp, %rbp
    0000143e: 	je	.Ltmp1666 # Offset: 5182
.Ltmp1665:
    00001444: 	movq	%r12, 0x118(%rsp)
    0000144c: 	cmpq	$0xf, %r12
    00001450: 	ja	.Ltmp1667 # Offset: 5200
    00001456: 	cmpq	$0x1, %r12
    0000145a: 	jne	.Ltmp1668 # Offset: 5210
    00001460: 	movzbl	(%rbp), %eax
    00001464: 	movb	%al, 0x10(%rbx)
.Ltmp1807:
    00001467: 	movq	%r12, 0x8(%rbx)
    0000146b: 	movb	$0x0, (%rdi,%r12)
    00001470: 	addq	$0x20, "_ZL7gLabels/1"+48(%rip)
.Ltmp1824:
    00001478: 	callq	clock@PLT # Offset: 5240
    0000147d: 	movl	iterations(%rip), %edx
    00001483: 	movq	%rax, start_time(%rip)
    0000148a: 	testl	%edx, %edx
    0000148c: 	jle	.Ltmp1669 # Offset: 5260
    0000148e: 	movq	0x10(%rsp), %r12
    00001493: 	xorl	%ebx, %ebx
    00001495: 	xorl	%ebp, %ebp
    00001497: 	leaq	0xc88(%r12), %rax
    0000149f: 	movq	%rax, 0x40(%rsp)
    000014a4: 	leaq	0x8(%r12), %rax
    000014a9: 	movq	%rax, 0x38(%rsp)
.Ltmp1670:
    000014ae: 	movq	%rbp, (%r12)
    000014b2: 	movq	0x40(%rsp), %rax
    000014b7: 	movq	%r12, %rcx
    000014ba: 	movq	%r12, %rsi
    000014bd: 	addl	$0x1, %ebx
    000014c0: 	movq	%rbp, -0x10(%rax)
    000014c4: 	movq	0x38(%rsp), %rdi
    000014c9: 	movq	%rbp, %rax
    000014cc: 	andq	$-0x8, %rdi
    000014d0: 	subq	%rdi, %rcx
    000014d3: 	addl	$0xc80, %ecx
    000014d9: 	shrl	$0x3, %ecx
    000014dc: 	rep		stosq	%rax, %es:(%rdi)
    000014df: 	movq	%r13, %rdi
    000014e2: 	movq	(%rsp), %rdx
    000014e6: 	callq	"_ZN22matvecmul_JI_unrolled1IiEclEPKiPiS2_ii.constprop.0/1" # Offset: 5350
    000014eb: 	cmpl	iterations(%rip), %ebx
    000014f1: 	jl	.Ltmp1670 # Offset: 5361
.Ltmp1669:
    000014f3: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000014fa: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00001501: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001508: 	je	.Ltmp1671 # Offset: 5384
.Ltmp1827:
    0000150e: 	movq	-0x20(%rax), %rbp
    00001512: 	callq	clock@PLT # Offset: 5394
    00001517: 	pxor	%xmm0, %xmm0
    0000151b: 	movq	%rax, end_time(%rip)
    00001522: 	movq	%rbp, %rdi
    00001525: 	subq	start_time(%rip), %rax
    0000152c: 	cvtsi2sd	%rax, %xmm0
    00001531: 	divsd	DATAat0x24960(%rip), %xmm0
    00001539: 	callq	_Z13record_resultdPKc # Offset: 5433
    0000153e: 	movq	0x10(%rsp), %rax
    00001543: 	pxor	%xmm0, %xmm0
.Ltmp1672:
    00001547: 	movdqu	(%rax), %xmm5
    0000154b: 	addq	$0x10, %rax
    0000154f: 	paddd	%xmm5, %xmm0
    00001553: 	cmpq	0x88(%rsp), %rax
    0000155b: 	jne	.Ltmp1672 # Offset: 5467
    0000155d: 	cvttsd2si	init_value(%rip), %eax
    00001565: 	movdqa	%xmm0, %xmm1
    00001569: 	movq	0x140(%rsp), %rdx
    00001571: 	psrldq	$0x8, %xmm1
    00001576: 	paddd	%xmm1, %xmm0
    0000157a: 	movdqa	%xmm0, %xmm1
    0000157e: 	imull	%eax, %eax
    00001581: 	psrldq	$0x4, %xmm1
    00001586: 	paddd	%xmm1, %xmm0
    0000158a: 	imull	$0x75300, %eax, %ecx
    00001590: 	movd	%xmm0, %eax
    00001594: 	cmpl	%eax, %ecx
    00001596: 	je	.Ltmp1673 # Offset: 5526
    00001598: 	leaq	DATAat0x2455f(%rip), %rsi
    0000159f: 	movl	$0x1, %edi
    000015a4: 	xorl	%eax, %eax
    000015a6: 	callq	__printf_chk@PLT # Offset: 5542
    000015ab: 	movq	0x140(%rsp), %rdx
.Ltmp1673:
    000015b3: 	cmpq	0x30(%rsp), %rdx
    000015b8: 	je	.Ltmp1674 # Offset: 5560
    000015ba: 	movq	0x150(%rsp), %rax
    000015c2: 	movq	%rdx, %rdi
    000015c5: 	leaq	0x1(%rax), %rsi
    000015c9: 	callq	_ZdlPvm@PLT # Offset: 5577
.Ltmp1674:
    000015ce: 	movq	0x90(%rsp), %rbx
    000015d6: 	movq	0x98(%rsp), %rsi
    000015de: 	leaq	DATAat0x24718(%rip), %rdx
    000015e5: 	movq	%rbx, %rdi
    000015e8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5608
    000015ed: 	movq	%rbx, %rsi
    000015f0: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000015f7: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 5623
    000015fc: 	callq	clock@PLT # Offset: 5628
    00001601: 	movq	%rax, start_time(%rip)
    00001608: 	movl	iterations(%rip), %eax
    0000160e: 	testl	%eax, %eax
    00001610: 	jle	.Ltmp1675 # Offset: 5648
    00001612: 	movq	0x10(%rsp), %r12
    00001617: 	xorl	%ebx, %ebx
    00001619: 	xorl	%ebp, %ebp
    0000161b: 	leaq	0xc88(%r12), %rax
    00001623: 	movq	%rax, 0x40(%rsp)
    00001628: 	leaq	0x8(%r12), %rax
    0000162d: 	movq	%rax, 0x38(%rsp)
.Ltmp1676:
    00001632: 	movq	%rbp, (%r12)
    00001636: 	movq	0x40(%rsp), %rax
    0000163b: 	movq	%r12, %rcx
    0000163e: 	movq	%r12, %rsi
    00001641: 	addl	$0x1, %ebx
    00001644: 	movq	%rbp, -0x10(%rax)
    00001648: 	movq	0x38(%rsp), %rdi
    0000164d: 	movq	%rbp, %rax
    00001650: 	andq	$-0x8, %rdi
    00001654: 	subq	%rdi, %rcx
    00001657: 	addl	$0xc80, %ecx
    0000165d: 	shrl	$0x3, %ecx
    00001660: 	rep		stosq	%rax, %es:(%rdi)
    00001663: 	movq	%r13, %rdi
    00001666: 	movq	(%rsp), %rdx
    0000166a: 	callq	"_ZN22matvecmul_JI_unrolled2IiEclEPKiPiS2_ii.constprop.0/1" # Offset: 5738
    0000166f: 	cmpl	iterations(%rip), %ebx
    00001675: 	jl	.Ltmp1676 # Offset: 5749
.Ltmp1675:
    00001677: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000167e: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00001685: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000168c: 	je	.Ltmp1677 # Offset: 5772
.Ltmp1828:
    00001692: 	movq	-0x20(%rax), %rbp
    00001696: 	callq	clock@PLT # Offset: 5782
    0000169b: 	pxor	%xmm0, %xmm0
    0000169f: 	movq	%rax, end_time(%rip)
    000016a6: 	movq	%rbp, %rdi
    000016a9: 	subq	start_time(%rip), %rax
    000016b0: 	cvtsi2sd	%rax, %xmm0
    000016b5: 	divsd	DATAat0x24960(%rip), %xmm0
    000016bd: 	callq	_Z13record_resultdPKc # Offset: 5821
    000016c2: 	movq	0x10(%rsp), %rax
    000016c7: 	pxor	%xmm0, %xmm0
.Ltmp1678:
    000016cb: 	movdqu	(%rax), %xmm7
    000016cf: 	addq	$0x10, %rax
    000016d3: 	paddd	%xmm7, %xmm0
    000016d7: 	cmpq	0x88(%rsp), %rax
    000016df: 	jne	.Ltmp1678 # Offset: 5855
    000016e1: 	cvttsd2si	init_value(%rip), %eax
    000016e9: 	movdqa	%xmm0, %xmm1
    000016ed: 	movq	0x140(%rsp), %rdx
    000016f5: 	psrldq	$0x8, %xmm1
    000016fa: 	paddd	%xmm1, %xmm0
    000016fe: 	movdqa	%xmm0, %xmm1
    00001702: 	imull	%eax, %eax
    00001705: 	psrldq	$0x4, %xmm1
    0000170a: 	paddd	%xmm1, %xmm0
    0000170e: 	imull	$0x75300, %eax, %ecx
    00001714: 	movd	%xmm0, %eax
    00001718: 	cmpl	%eax, %ecx
    0000171a: 	je	.Ltmp1679 # Offset: 5914
    0000171c: 	leaq	DATAat0x2455f(%rip), %rsi
    00001723: 	movl	$0x1, %edi
    00001728: 	xorl	%eax, %eax
    0000172a: 	callq	__printf_chk@PLT # Offset: 5930
    0000172f: 	movq	0x140(%rsp), %rdx
.Ltmp1679:
    00001737: 	cmpq	0x30(%rsp), %rdx
    0000173c: 	je	.Ltmp1680 # Offset: 5948
    0000173e: 	movq	0x150(%rsp), %rax
    00001746: 	movq	%rdx, %rdi
    00001749: 	leaq	0x1(%rax), %rsi
    0000174d: 	callq	_ZdlPvm@PLT # Offset: 5965
.Ltmp1680:
    00001752: 	movq	0x90(%rsp), %rbx
    0000175a: 	movq	0x98(%rsp), %rsi
    00001762: 	leaq	DATAat0x24740(%rip), %rdx
    00001769: 	movq	%rbx, %rdi
    0000176c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5996
    00001771: 	movq	%rbx, %rsi
    00001774: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000177b: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 6011
    00001780: 	callq	clock@PLT # Offset: 6016
    00001785: 	movl	iterations(%rip), %ebx
    0000178b: 	xorl	%r14d, %r14d
    0000178e: 	movl	$0x0, 0x28(%rsp)
    00001796: 	movq	%rax, start_time(%rip)
    0000179d: 	movq	0x10(%rsp), %rax
    000017a2: 	movl	%ebx, 0x50(%rsp)
    000017a6: 	leaq	0xc88(%rax), %rsi
    000017ad: 	movq	%rsi, 0x40(%rsp)
    000017b2: 	leaq	0x8(%rax), %rsi
    000017b6: 	addq	$0x4, %rax
    000017ba: 	movq	%rsi, 0x38(%rsp)
    000017bf: 	movq	%rax, 0x68(%rsp)
    000017c4: 	testl	%ebx, %ebx
    000017c6: 	jle	.Ltmp1681 # Offset: 6086
.Ltmp1689:
    000017cc: 	movq	0x10(%rsp), %r12
    000017d1: 	xorl	%r11d, %r11d
    000017d4: 	movq	%r14, (%r12)
    000017d8: 	movq	0x40(%rsp), %rax
    000017dd: 	movq	%r12, %rcx
    000017e0: 	movq	%r14, -0x10(%rax)
    000017e4: 	movq	0x38(%rsp), %rdi
    000017e9: 	movq	%r14, %rax
    000017ec: 	andq	$-0x8, %rdi
    000017f0: 	subq	%rdi, %rcx
    000017f3: 	addl	$0xc80, %ecx
    000017f9: 	shrl	$0x3, %ecx
    000017fc: 	rep		stosq	%rax, %es:(%rdi)
    000017ff: 	movq	$0x0, 0x48(%rsp)
    00001808: 	movq	(%rsp), %rbx
.Ltmp1688:
    0000180c: 	leal	0x50(%r11), %eax
    00001810: 	movl	%eax, 0x60(%rsp)
    00001814: 	cmpl	%r11d, %eax
    00001817: 	jle	.Ltmp1682 # Offset: 6167
    0000181d: 	movq	0x68(%rsp), %rax
    00001822: 	leaq	0x4(%rbx), %r15
    00001826: 	leaq	0x4(%r13), %r10
    0000182a: 	xorl	%ebp, %ebp
    0000182c: 	leaq	0x13c(%rax,%r11,4), %rdi
.Ltmp1684:
    00001834: 	movl	-0x4(%r10), %r8d
    00001838: 	movl	(%r10), %esi
    0000183b: 	movq	%r15, %rdx
    0000183e: 	movq	%r12, %rax
    00001841: 	nopl	(%rax) # Size: 7
.Ltmp1683:
    00001848: 	movl	-0x4(%rdx), %r9d
    0000184c: 	movl	(%rdx), %ecx
    0000184e: 	addq	$0x960, %rdx
    00001855: 	imull	%r8d, %r9d
    00001859: 	imull	%esi, %ecx
    0000185c: 	addl	%r9d, %ecx
    0000185f: 	addl	%ecx, (%rax)
    00001861: 	addq	$0x4, %rax
    00001865: 	cmpq	%rdi, %rax
    00001868: 	jne	.Ltmp1683 # Offset: 6248
    0000186a: 	addl	$0x2, %ebp
    0000186d: 	addq	$0x8, %r15
    00001871: 	addq	$0x8, %r10
    00001875: 	cmpl	$0x256, %ebp
    0000187b: 	jne	.Ltmp1684 # Offset: 6267
    0000187d: 	imull	$0x258, 0x60(%rsp), %r9d
    00001886: 	movl	0x48(%rsp), %r8d
    0000188b: 	movq	%rbx, %rdi
    0000188e: 	movq	%r12, %rsi
    00001891: 	nopl	(%rax) # Size: 7
.Ltmp1687:
    00001898: 	movl	(%rsi), %ecx
    0000189a: 	movl	$0x256, %eax
    0000189f: 	jmp	.Ltmp1685 # Offset: 6303
    000018a1: 	nopl	(%rax) # Size: 7
.Ltmp1686:
    000018a8: 	movl	$0x257, %eax
.Ltmp1685:
    000018ad: 	movl	(%rdi,%rax,4), %edx
    000018b0: 	imull	(%r13,%rax,4), %edx
    000018b6: 	addl	%edx, %ecx
    000018b8: 	cmpq	$0x257, %rax
    000018be: 	jne	.Ltmp1686 # Offset: 6334
    000018c0: 	addl	$0x258, %r8d
    000018c7: 	movl	%ecx, (%rsi)
    000018c9: 	addq	$0x960, %rdi
    000018d0: 	addq	$0x4, %rsi
    000018d4: 	cmpl	%r9d, %r8d
    000018d7: 	jne	.Ltmp1687 # Offset: 6359
.Ltmp1682:
    000018d9: 	addq	$0x50, %r11
    000018dd: 	addq	$0x140, %r12
    000018e4: 	addq	$0xbb80, 0x48(%rsp)
    000018ed: 	addq	$0x2ee00, %rbx
    000018f4: 	cmpq	$0x320, %r11
    000018fb: 	jne	.Ltmp1688 # Offset: 6395
    00001901: 	addl	$0x1, 0x28(%rsp)
    00001906: 	movl	0x28(%rsp), %eax
    0000190a: 	cmpl	0x50(%rsp), %eax
    0000190e: 	jne	.Ltmp1689 # Offset: 6414
.Ltmp1681:
    00001914: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000191b: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00001922: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001929: 	je	.Ltmp1690 # Offset: 6441
.Ltmp1829:
    0000192f: 	movq	-0x20(%rax), %rbp
    00001933: 	callq	clock@PLT # Offset: 6451
    00001938: 	pxor	%xmm0, %xmm0
    0000193c: 	movq	%rax, end_time(%rip)
    00001943: 	movq	%rbp, %rdi
    00001946: 	subq	start_time(%rip), %rax
    0000194d: 	cvtsi2sd	%rax, %xmm0
    00001952: 	divsd	DATAat0x24960(%rip), %xmm0
    0000195a: 	callq	_Z13record_resultdPKc # Offset: 6490
    0000195f: 	movq	0x10(%rsp), %rax
    00001964: 	pxor	%xmm0, %xmm0
.Ltmp1691:
    00001968: 	movdqu	(%rax), %xmm6
    0000196c: 	addq	$0x10, %rax
    00001970: 	paddd	%xmm6, %xmm0
    00001974: 	cmpq	%rax, 0x88(%rsp)
    0000197c: 	jne	.Ltmp1691 # Offset: 6524
    0000197e: 	cvttsd2si	init_value(%rip), %eax
    00001986: 	movdqa	%xmm0, %xmm1
    0000198a: 	movq	0x140(%rsp), %rdx
    00001992: 	psrldq	$0x8, %xmm1
    00001997: 	paddd	%xmm1, %xmm0
    0000199b: 	movdqa	%xmm0, %xmm1
    0000199f: 	imull	%eax, %eax
    000019a2: 	psrldq	$0x4, %xmm1
    000019a7: 	paddd	%xmm1, %xmm0
    000019ab: 	imull	$0x75300, %eax, %ecx
    000019b1: 	movd	%xmm0, %eax
    000019b5: 	cmpl	%eax, %ecx
    000019b7: 	je	.Ltmp1692 # Offset: 6583
    000019b9: 	leaq	DATAat0x2455f(%rip), %rsi
    000019c0: 	movl	$0x1, %edi
    000019c5: 	xorl	%eax, %eax
    000019c7: 	callq	__printf_chk@PLT # Offset: 6599
    000019cc: 	movq	0x140(%rsp), %rdx
.Ltmp1692:
    000019d4: 	cmpq	0x30(%rsp), %rdx
    000019d9: 	je	.Ltmp1693 # Offset: 6617
    000019db: 	movq	0x150(%rsp), %rax
    000019e3: 	movq	%rdx, %rdi
    000019e6: 	leaq	0x1(%rax), %rsi
    000019ea: 	callq	_ZdlPvm@PLT # Offset: 6634
.Ltmp1693:
    000019ef: 	movq	0x90(%rsp), %rbx
    000019f7: 	movq	0x98(%rsp), %rsi
    000019ff: 	leaq	DATAat0x24768(%rip), %rdx
    00001a06: 	movq	%rbx, %rdi
    00001a09: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6665
    00001a0e: 	movq	%rbx, %rsi
    00001a11: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00001a18: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 6680
    00001a1d: 	callq	clock@PLT # Offset: 6685
    00001a22: 	movl	iterations(%rip), %r8d
    00001a29: 	movq	0x10(%rsp), %r9
    00001a2e: 	xorl	%esi, %esi
    00001a30: 	movq	%rax, start_time(%rip)
    00001a37: 	movq	0x10(%rsp), %rax
    00001a3c: 	leaq	0xc88(%rax), %rbx
    00001a43: 	addq	$0x8, %rax
    00001a47: 	movq	%rax, 0x38(%rsp)
    00001a4c: 	xorl	%eax, %eax
    00001a4e: 	movq	%rbx, 0x40(%rsp)
    00001a53: 	testl	%r8d, %r8d
    00001a56: 	jle	.Ltmp1694 # Offset: 6742
.Ltmp1697:
    00001a5c: 	movq	%rax, (%r9)
    00001a5f: 	movq	0x40(%rsp), %rbx
    00001a64: 	movq	%r9, %rcx
    00001a67: 	movq	%rax, -0x10(%rbx)
    00001a6b: 	movq	0x38(%rsp), %rdi
    00001a70: 	andq	$-0x8, %rdi
    00001a74: 	subq	%rdi, %rcx
    00001a77: 	addl	$0xc80, %ecx
    00001a7d: 	shrl	$0x3, %ecx
    00001a80: 	rep		stosq	%rax, %es:(%rdi)
    00001a83: 	movq	%r9, %rdi
    00001a86: 	movq	(%rsp), %rcx
.Ltmp1696:
    00001a8a: 	movl	(%rdi), %r10d
    00001a8d: 	xorl	%edx, %edx
    00001a8f: 	pxor	%xmm3, %xmm3
    00001a93: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1695:
    00001a98: 	movdqu	(%r13,%rdx), %xmm0
    00001a9f: 	movdqu	(%rcx,%rdx), %xmm2
    00001aa4: 	movdqu	(%r13,%rdx), %xmm1
    00001aab: 	movdqu	(%rcx,%rdx), %xmm5
    00001ab0: 	addq	$0x10, %rdx
    00001ab4: 	psrlq	$0x20, %xmm0
    00001ab9: 	psrlq	$0x20, %xmm2
    00001abe: 	pmuludq	%xmm5, %xmm1
    00001ac2: 	pmuludq	%xmm2, %xmm0
    00001ac6: 	pshufd	$0x8, %xmm1, %xmm1
    00001acb: 	pshufd	$0x8, %xmm0, %xmm0
    00001ad0: 	punpckldq	%xmm0, %xmm1
    00001ad4: 	paddd	%xmm1, %xmm3
    00001ad8: 	cmpq	$0x960, %rdx
    00001adf: 	jne	.Ltmp1695 # Offset: 6879
    00001ae1: 	movdqa	%xmm3, %xmm0
    00001ae5: 	addq	$0x4, %rdi
    00001ae9: 	addq	$0x960, %rcx
    00001af0: 	psrldq	$0x8, %xmm0
    00001af5: 	paddd	%xmm0, %xmm3
    00001af9: 	movdqa	%xmm3, %xmm0
    00001afd: 	psrldq	$0x4, %xmm0
    00001b02: 	paddd	%xmm0, %xmm3
    00001b06: 	movd	%xmm3, %edx
    00001b0a: 	addl	%r10d, %edx
    00001b0d: 	movl	%edx, -0x4(%rdi)
    00001b10: 	cmpq	0x58(%rsp), %rcx
    00001b15: 	jne	.Ltmp1696 # Offset: 6933
    00001b1b: 	addl	$0x1, %esi
    00001b1e: 	cmpl	%r8d, %esi
    00001b21: 	jne	.Ltmp1697 # Offset: 6945
.Ltmp1694:
    00001b27: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001b2e: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00001b35: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001b3c: 	je	.Ltmp1698 # Offset: 6972
.Ltmp1830:
    00001b42: 	movq	-0x20(%rax), %rbp
    00001b46: 	callq	clock@PLT # Offset: 6982
    00001b4b: 	pxor	%xmm0, %xmm0
    00001b4f: 	movq	%rax, end_time(%rip)
    00001b56: 	movq	%rbp, %rdi
    00001b59: 	subq	start_time(%rip), %rax
    00001b60: 	cvtsi2sd	%rax, %xmm0
    00001b65: 	divsd	DATAat0x24960(%rip), %xmm0
    00001b6d: 	callq	_Z13record_resultdPKc # Offset: 7021
    00001b72: 	movq	0x10(%rsp), %rax
    00001b77: 	pxor	%xmm0, %xmm0
.Ltmp1699:
    00001b7b: 	movdqu	(%rax), %xmm5
    00001b7f: 	addq	$0x10, %rax
    00001b83: 	paddd	%xmm5, %xmm0
    00001b87: 	cmpq	0x88(%rsp), %rax
    00001b8f: 	jne	.Ltmp1699 # Offset: 7055
    00001b91: 	cvttsd2si	init_value(%rip), %eax
    00001b99: 	movdqa	%xmm0, %xmm1
    00001b9d: 	movq	0x140(%rsp), %rdx
    00001ba5: 	psrldq	$0x8, %xmm1
    00001baa: 	paddd	%xmm1, %xmm0
    00001bae: 	movdqa	%xmm0, %xmm1
    00001bb2: 	imull	%eax, %eax
    00001bb5: 	psrldq	$0x4, %xmm1
    00001bba: 	paddd	%xmm1, %xmm0
    00001bbe: 	imull	$0x75300, %eax, %ecx
    00001bc4: 	movd	%xmm0, %eax
    00001bc8: 	cmpl	%eax, %ecx
    00001bca: 	je	.Ltmp1700 # Offset: 7114
    00001bcc: 	leaq	DATAat0x2455f(%rip), %rsi
    00001bd3: 	movl	$0x1, %edi
    00001bd8: 	xorl	%eax, %eax
    00001bda: 	callq	__printf_chk@PLT # Offset: 7130
    00001bdf: 	movq	0x140(%rsp), %rdx
.Ltmp1700:
    00001be7: 	cmpq	0x30(%rsp), %rdx
    00001bec: 	je	.Ltmp1701 # Offset: 7148
    00001bee: 	movq	0x150(%rsp), %rax
    00001bf6: 	movq	%rdx, %rdi
    00001bf9: 	leaq	0x1(%rax), %rsi
    00001bfd: 	callq	_ZdlPvm@PLT # Offset: 7165
.Ltmp1701:
    00001c02: 	movq	0x90(%rsp), %rbx
    00001c0a: 	movq	0x98(%rsp), %rsi
    00001c12: 	leaq	DATAat0x24790(%rip), %rdx
    00001c19: 	movq	%rbx, %rdi
    00001c1c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7196
    00001c21: 	movq	%rbx, %rsi
    00001c24: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00001c2b: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 7211
    00001c30: 	callq	clock@PLT # Offset: 7216
    00001c35: 	movq	%rax, start_time(%rip)
    00001c3c: 	movl	iterations(%rip), %eax
    00001c42: 	movl	%eax, 0x50(%rsp)
    00001c46: 	testl	%eax, %eax
    00001c48: 	jle	.Ltmp1702 # Offset: 7240
    00001c4e: 	movq	0x10(%rsp), %rax
    00001c53: 	movl	$0x0, 0x28(%rsp)
    00001c5b: 	leaq	0xc88(%rax), %rbx
    00001c62: 	movq	%rbx, 0x40(%rsp)
    00001c67: 	leaq	0x8(%rax), %rbx
    00001c6b: 	addq	$0x4, %rax
    00001c6f: 	movq	%rbx, 0x38(%rsp)
    00001c74: 	movq	%rax, 0xd8(%rsp)
.Ltmp1709:
    00001c7c: 	movq	0x10(%rsp), %rbp
    00001c81: 	xorl	%r15d, %r15d
    00001c84: 	movq	$0x0, (%rbp)
    00001c8c: 	movq	0x40(%rsp), %rax
    00001c91: 	movq	%rbp, %rcx
    00001c94: 	movq	$0x0, -0x10(%rax)
    00001c9c: 	movq	0x38(%rsp), %rdi
    00001ca1: 	xorl	%eax, %eax
    00001ca3: 	andq	$-0x8, %rdi
    00001ca7: 	subq	%rdi, %rcx
    00001caa: 	addl	$0xc80, %ecx
    00001cb0: 	shrl	$0x3, %ecx
    00001cb3: 	rep		stosq	%rax, %es:(%rdi)
    00001cb6: 	movq	(%rsp), %rax
    00001cba: 	movq	%rax, 0x48(%rsp)
.Ltmp1708:
    00001cbf: 	movq	0xd8(%rsp), %rax
    00001cc7: 	movl	%r15d, %r12d
    00001cca: 	movq	%r13, %r8
    00001ccd: 	xorl	%esi, %esi
    00001ccf: 	movq	0x48(%rsp), %r9
    00001cd4: 	leal	0x8(%r15), %r14d
    00001cd8: 	leaq	0x1c(%rax,%r15,4), %rbx
    00001cdd: 	nopl	(%rax) # Size: 3
.Ltmp1707:
    00001ce0: 	leal	0x12c(%rsi), %r11d
    00001ce7: 	movl	%esi, %r10d
    00001cea: 	movq	%r9, %rcx
    00001ced: 	movq	%rbp, %rdx
    00001cf0: 	cmpl	%r12d, %r14d
    00001cf3: 	jle	.Ltmp1703 # Offset: 7411
    00001cf9: 	nopl	(%rax) # Size: 7
.Ltmp1706:
    00001d00: 	movl	(%rdx), %edi
    00001d02: 	cmpl	%r11d, %r10d
    00001d05: 	jge	.Ltmp1704 # Offset: 7429
    00001d07: 	xorl	%eax, %eax
    00001d09: 	pxor	%xmm1, %xmm1
.Ltmp1705:
    00001d0d: 	movdqu	(%r8,%rax), %xmm0
    00001d13: 	movdqu	(%rcx,%rax), %xmm3
    00001d18: 	movdqu	(%r8,%rax), %xmm2
    00001d1e: 	movdqu	(%rcx,%rax), %xmm5
    00001d23: 	addq	$0x10, %rax
    00001d27: 	psrlq	$0x20, %xmm0
    00001d2c: 	psrlq	$0x20, %xmm3
    00001d31: 	pmuludq	%xmm5, %xmm2
    00001d35: 	pmuludq	%xmm3, %xmm0
    00001d39: 	pshufd	$0x8, %xmm2, %xmm2
    00001d3e: 	pshufd	$0x8, %xmm0, %xmm0
    00001d43: 	punpckldq	%xmm0, %xmm2
    00001d47: 	paddd	%xmm2, %xmm1
    00001d4b: 	cmpq	$0x4b0, %rax
    00001d51: 	jne	.Ltmp1705 # Offset: 7505
    00001d53: 	movdqa	%xmm1, %xmm0
    00001d57: 	psrldq	$0x8, %xmm0
    00001d5c: 	paddd	%xmm0, %xmm1
    00001d60: 	movdqa	%xmm1, %xmm0
    00001d64: 	psrldq	$0x4, %xmm0
    00001d69: 	paddd	%xmm0, %xmm1
    00001d6d: 	movd	%xmm1, %eax
    00001d71: 	addl	%eax, %edi
.Ltmp1704:
    00001d73: 	movl	%edi, (%rdx)
    00001d75: 	addq	$0x4, %rdx
    00001d79: 	addq	$0x960, %rcx
    00001d80: 	cmpq	%rdx, %rbx
    00001d83: 	jne	.Ltmp1706 # Offset: 7555
.Ltmp1703:
    00001d89: 	addq	$0x12c, %rsi
    00001d90: 	addq	$0x4b0, %r9
    00001d97: 	addq	$0x4b0, %r8
    00001d9e: 	cmpq	$0x258, %rsi
    00001da5: 	jne	.Ltmp1707 # Offset: 7589
    00001dab: 	addq	$0x8, %r15
    00001daf: 	addq	$0x20, %rbp
    00001db3: 	addq	$0x4b00, 0x48(%rsp)
    00001dbc: 	cmpq	$0x320, %r15
    00001dc3: 	jne	.Ltmp1708 # Offset: 7619
    00001dc9: 	addl	$0x1, 0x28(%rsp)
    00001dce: 	movl	0x28(%rsp), %eax
    00001dd2: 	cmpl	0x50(%rsp), %eax
    00001dd6: 	jne	.Ltmp1709 # Offset: 7638
.Ltmp1702:
    00001ddc: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001de3: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00001dea: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001df1: 	je	.Ltmp1710 # Offset: 7665
.Ltmp1831:
    00001df7: 	movq	-0x20(%rax), %rbp
    00001dfb: 	callq	clock@PLT # Offset: 7675
    00001e00: 	pxor	%xmm0, %xmm0
    00001e04: 	movq	%rax, end_time(%rip)
    00001e0b: 	movq	%rbp, %rdi
    00001e0e: 	subq	start_time(%rip), %rax
    00001e15: 	cvtsi2sd	%rax, %xmm0
    00001e1a: 	divsd	DATAat0x24960(%rip), %xmm0
    00001e22: 	callq	_Z13record_resultdPKc # Offset: 7714
    00001e27: 	movq	0x10(%rsp), %rax
    00001e2c: 	pxor	%xmm0, %xmm0
.Ltmp1711:
    00001e30: 	movdqu	(%rax), %xmm7
    00001e34: 	addq	$0x10, %rax
    00001e38: 	paddd	%xmm7, %xmm0
    00001e3c: 	cmpq	0x88(%rsp), %rax
    00001e44: 	jne	.Ltmp1711 # Offset: 7748
    00001e46: 	cvttsd2si	init_value(%rip), %eax
    00001e4e: 	movdqa	%xmm0, %xmm1
    00001e52: 	movq	0x140(%rsp), %rdx
    00001e5a: 	psrldq	$0x8, %xmm1
    00001e5f: 	paddd	%xmm1, %xmm0
    00001e63: 	movdqa	%xmm0, %xmm1
    00001e67: 	imull	%eax, %eax
    00001e6a: 	psrldq	$0x4, %xmm1
    00001e6f: 	paddd	%xmm1, %xmm0
    00001e73: 	imull	$0x75300, %eax, %ecx
    00001e79: 	movd	%xmm0, %eax
    00001e7d: 	cmpl	%eax, %ecx
    00001e7f: 	je	.Ltmp1712 # Offset: 7807
    00001e81: 	leaq	DATAat0x2455f(%rip), %rsi
    00001e88: 	movl	$0x1, %edi
    00001e8d: 	xorl	%eax, %eax
    00001e8f: 	callq	__printf_chk@PLT # Offset: 7823
    00001e94: 	movq	0x140(%rsp), %rdx
.Ltmp1712:
    00001e9c: 	cmpq	0x30(%rsp), %rdx
    00001ea1: 	je	.Ltmp1713 # Offset: 7841
    00001ea3: 	movq	0x150(%rsp), %rax
    00001eab: 	movq	%rdx, %rdi
    00001eae: 	leaq	0x1(%rax), %rsi
    00001eb2: 	callq	_ZdlPvm@PLT # Offset: 7858
.Ltmp1713:
    00001eb7: 	movq	0x90(%rsp), %rbx
    00001ebf: 	movq	0x98(%rsp), %rsi
    00001ec7: 	leaq	DATAat0x247b8(%rip), %rdx
    00001ece: 	movq	%rbx, %rdi
    00001ed1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7889
    00001ed6: 	movq	%rbx, %rsi
    00001ed9: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00001ee0: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 7904
    00001ee5: 	callq	clock@PLT # Offset: 7909
    00001eea: 	movq	%rax, start_time(%rip)
    00001ef1: 	movl	iterations(%rip), %eax
    00001ef7: 	movl	%eax, 0xd0(%rsp)
    00001efe: 	testl	%eax, %eax
    00001f00: 	jle	.Ltmp1714 # Offset: 7936
    00001f06: 	movq	0x10(%rsp), %rax
    00001f0b: 	movq	%r13, 0x80(%rsp)
    00001f13: 	movl	$0x0, 0xf8(%rsp)
    00001f1e: 	leaq	0xc88(%rax), %rbx
    00001f25: 	movq	%rbx, 0x40(%rsp)
    00001f2a: 	leaq	0x8(%rax), %rbx
    00001f2e: 	addq	$0x4, %rax
    00001f32: 	movq	%rbx, 0x38(%rsp)
    00001f37: 	movq	(%rsp), %rbx
    00001f3b: 	movq	%rax, 0xa0(%rsp)
    00001f43: 	addq	$0x4, %rbx
    00001f47: 	movq	%rbx, 0x108(%rsp)
.Ltmp1726:
    00001f4f: 	movq	0x10(%rsp), %rax
    00001f54: 	movq	$0x0, (%rax)
    00001f5b: 	movq	0x40(%rsp), %rbx
    00001f60: 	movq	$0x0, -0x10(%rbx)
    00001f68: 	movq	0x38(%rsp), %rdi
    00001f6d: 	andq	$-0x8, %rdi
    00001f71: 	subq	%rdi, %rax
    00001f74: 	movq	%rax, %rcx
    00001f77: 	xorl	%eax, %eax
    00001f79: 	addl	$0xc80, %ecx
    00001f7f: 	shrl	$0x3, %ecx
    00001f82: 	rep		stosq	%rax, %es:(%rdi)
    00001f85: 	movl	$0x1, 0x60(%rsp)
    00001f8d: 	movq	$0x0, 0xb8(%rsp)
    00001f99: 	movq	0x108(%rsp), %rax
    00001fa1: 	movq	%rax, 0xc8(%rsp)
    00001fa9: 	movq	0x80(%rsp), %rax
    00001fb1: 	movq	%rax, 0x68(%rsp)
.Ltmp1725:
    00001fb6: 	movq	0xb8(%rsp), %rax
    00001fbe: 	movl	%eax, %ebx
    00001fc0: 	movl	%eax, 0x70(%rsp)
    00001fc4: 	addl	$0x12c, %ebx
    00001fca: 	movl	%ebx, 0xa8(%rsp)
    00001fd1: 	cmpl	%eax, %ebx
    00001fd3: 	jle	.Ltmp1715 # Offset: 8147
    00001fd9: 	addl	$0x12b, %eax
    00001fde: 	movq	0xc8(%rsp), %rbx
    00001fe6: 	movq	0x10(%rsp), %r15
    00001feb: 	xorl	%r14d, %r14d
    00001fee: 	movl	%eax, 0x78(%rsp)
    00001ff2: 	movq	$0x0, 0x48(%rsp)
    00001ffb: 	movl	%eax, 0xc0(%rsp)
    00002002: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1724:
    00002008: 	leal	0x4c(%r14), %ecx
    0000200c: 	movl	$0x320, %eax
    00002011: 	movl	%r14d, 0x50(%rsp)
    00002016: 	movl	%r14d, %r13d
    00002019: 	cmpl	%eax, %ecx
    0000201b: 	cmovgl	%eax, %ecx
    0000201e: 	cmpl	%r14d, %ecx
    00002021: 	jle	.Ltmp1716 # Offset: 8225
    00002027: 	movl	0x60(%rsp), %esi
    0000202b: 	movl	0x78(%rsp), %eax
    0000202f: 	cmpl	%eax, %esi
    00002031: 	jge	.Ltmp1717 # Offset: 8241
    00002037: 	movl	%ecx, %eax
    00002039: 	movq	0xa0(%rsp), %rdi
    00002041: 	movq	0x68(%rsp), %rbp
    00002046: 	movq	%rbx, %r12
    00002049: 	subl	%r14d, %eax
    0000204c: 	subl	$0x1, %eax
    0000204f: 	addq	%r14, %rax
    00002052: 	leaq	(%rdi,%rax,4), %r9
    00002056: 	movl	0x70(%rsp), %eax
    0000205a: 	movl	%eax, 0x28(%rsp)
.Ltmp1719:
    0000205e: 	movl	(%rbp), %r10d
    00002062: 	movl	0x4(%rbp), %r8d
    00002066: 	movq	%r12, %rdx
    00002069: 	movq	%r15, %rax
    0000206c: 	nopl	(%rax) # Size: 4
.Ltmp1718:
    00002070: 	movl	-0x4(%rdx), %r11d
    00002074: 	movl	(%rdx), %edi
    00002076: 	addq	$0x960, %rdx
    0000207d: 	imull	%r10d, %r11d
    00002081: 	imull	%r8d, %edi
    00002085: 	addl	%r11d, %edi
    00002088: 	addl	%edi, (%rax)
    0000208a: 	addq	$0x4, %rax
    0000208e: 	cmpq	%r9, %rax
    00002091: 	jne	.Ltmp1718 # Offset: 8337
    00002093: 	addl	$0x2, 0x28(%rsp)
    00002098: 	addl	$0x2, %esi
    0000209b: 	addq	$0x8, %rbp
    0000209f: 	addq	$0x8, %r12
    000020a3: 	cmpl	0xc0(%rsp), %esi
    000020aa: 	jl	.Ltmp1719 # Offset: 8362
.Ltmp1832:
    000020ac: 	movslq	0x28(%rsp), %rsi
    000020b1: 	movq	0x48(%rsp), %rax
    000020b6: 	movl	%ecx, %r9d
    000020b9: 	movq	(%rsp), %rdi
    000020bd: 	subl	%r13d, %r9d
    000020c0: 	movq	0x10(%rsp), %r11
    000020c5: 	addq	%rsi, %rax
    000020c8: 	movl	%r9d, %r10d
    000020cb: 	leal	-0x1(%r9), %edx
    000020cf: 	leaq	(%rdi,%rax,4), %rdi
    000020d3: 	movl	%r9d, %eax
    000020d6: 	andl	$-0x4, %r10d
    000020da: 	movl	%edx, 0xb0(%rsp)
    000020e1: 	shrl	$0x2, %eax
    000020e4: 	subl	$0x1, %eax
    000020e7: 	shlq	$0x4, %rax
    000020eb: 	cmpl	$0x2, %edx
    000020ee: 	leaq	0x10(%r15,%rax), %rbp
    000020f3: 	leal	(%r10,%r13), %eax
    000020f7: 	cmovbel	0x50(%rsp), %eax
    000020fc: 	movq	%rbp, 0x28(%rsp)
    00002101: 	imull	$0x258, %eax, %r12d
    00002108: 	movslq	%eax, %rdx
    0000210b: 	leal	0x1(%rax), %r13d
    0000210f: 	addl	$0x2, %eax
    00002112: 	movl	%eax, 0xd8(%rsp)
    00002119: 	leaq	(%r11,%rdx,4), %r8
    0000211d: 	cltq
    0000211f: 	movslq	%r13d, %rdx
    00002122: 	leaq	(%r11,%rdx,4), %rdx
    00002126: 	leaq	(%r11,%rax,4), %rax
    0000212a: 	movq	%rdx, 0x50(%rsp)
    0000212f: 	leal	0x258(%r12), %edx
    00002137: 	movq	%rax, 0xe8(%rsp)
    0000213f: 	leal	0x4b0(%r12), %eax
    00002147: 	movl	%edx, 0xfc(%rsp)
    0000214e: 	movl	%eax, 0xe0(%rsp)
    00002155: 	nopl	(%rax) # Size: 3
.Ltmp1723:
    00002158: 	movq	0x80(%rsp), %rax
    00002160: 	cmpl	$0x2, 0xb0(%rsp)
    00002168: 	movl	%esi, %r11d
    0000216b: 	movd	(%rax,%rsi,4), %xmm3
    00002170: 	jbe	.Ltmp1720 # Offset: 8560
    00002176: 	pshufd	$0x0, %xmm3, %xmm2
    0000217b: 	movq	0x28(%rsp), %rbp
    00002180: 	movq	%rdi, %rax
    00002183: 	movq	%r15, %rdx
    00002186: 	movdqa	%xmm2, %xmm4
    0000218a: 	psrlq	$0x20, %xmm4
.Ltmp1721:
    0000218f: 	movd	0x12c0(%rax), %xmm1
    00002197: 	movd	(%rax), %xmm0
    0000219b: 	addq	$0x10, %rdx
    0000219f: 	addq	$0x2580, %rax
    000021a5: 	movd	-0x960(%rax), %xmm6
    000021ad: 	movd	-0x1c20(%rax), %xmm7
    000021b5: 	punpckldq	%xmm6, %xmm1
    000021b9: 	punpckldq	%xmm7, %xmm0
    000021bd: 	punpcklqdq	%xmm1, %xmm0
    000021c1: 	movdqa	%xmm0, %xmm1
    000021c5: 	psrlq	$0x20, %xmm0
    000021ca: 	pmuludq	%xmm2, %xmm1
    000021ce: 	pmuludq	%xmm4, %xmm0
    000021d2: 	pshufd	$0x8, %xmm1, %xmm1
    000021d7: 	pshufd	$0x8, %xmm0, %xmm0
    000021dc: 	punpckldq	%xmm0, %xmm1
    000021e0: 	movdqu	-0x10(%rdx), %xmm0
    000021e5: 	paddd	%xmm1, %xmm0
    000021e9: 	movups	%xmm0, -0x10(%rdx)
    000021ed: 	cmpq	%rdx, %rbp
    000021f0: 	jne	.Ltmp1721 # Offset: 8688
    000021f2: 	movq	%rbp, 0x28(%rsp)
    000021f7: 	cmpl	%r9d, %r10d
    000021fa: 	je	.Ltmp1722 # Offset: 8698
.Ltmp1720:
    000021fc: 	movq	(%rsp), %rbp
    00002200: 	leal	(%r12,%r11), %eax
    00002204: 	movd	%xmm3, %edx
    00002208: 	cltq
    0000220a: 	imull	(%rbp,%rax,4), %edx
    0000220f: 	addl	%edx, (%r8)
    00002212: 	cmpl	%ecx, %r13d
    00002215: 	jge	.Ltmp1722 # Offset: 8725
    00002217: 	movl	0xfc(%rsp), %eax
    0000221e: 	movd	%xmm3, %edx
    00002222: 	addl	%r11d, %eax
    00002225: 	cltq
    00002227: 	imull	(%rbp,%rax,4), %edx
    0000222c: 	movl	%edx, %eax
    0000222e: 	movq	0x50(%rsp), %rdx
    00002233: 	addl	%eax, (%rdx)
    00002235: 	cmpl	%ecx, 0xd8(%rsp)
    0000223c: 	jge	.Ltmp1722 # Offset: 8764
    0000223e: 	movl	0xe0(%rsp), %eax
    00002245: 	leal	(%rax,%r11), %edx
    00002249: 	movd	%xmm3, %eax
    0000224d: 	movslq	%edx, %rdx
    00002250: 	imull	(%rbp,%rdx,4), %eax
    00002255: 	movq	0xe8(%rsp), %rdx
    0000225d: 	addl	%eax, (%rdx)
    0000225f: 	nop # Size: 1
.Ltmp1722:
    00002260: 	addq	$0x1, %rsi
    00002264: 	addq	$0x4, %rdi
    00002268: 	cmpl	%esi, 0xa8(%rsp)
    0000226f: 	jg	.Ltmp1723 # Offset: 8815
.Ltmp1716:
    00002275: 	addq	$0x4c, %r14
    00002279: 	addq	$0x130, %r15
    00002280: 	addq	$0xb220, 0x48(%rsp)
    00002289: 	addq	$0x2c880, %rbx
    00002290: 	cmpq	$0x344, %r14
    00002297: 	jne	.Ltmp1724 # Offset: 8855
.Ltmp1715:
    0000229d: 	addq	$0x12c, 0xb8(%rsp)
    000022a9: 	movq	0xb8(%rsp), %rax
    000022b1: 	addq	$0x4b0, 0xc8(%rsp)
    000022bd: 	addl	$0x12c, 0x60(%rsp)
    000022c5: 	addq	$0x4b0, 0x68(%rsp)
    000022ce: 	cmpq	$0x258, %rax
    000022d4: 	jne	.Ltmp1725 # Offset: 8916
    000022da: 	addl	$0x1, 0xf8(%rsp)
    000022e2: 	movl	0xf8(%rsp), %eax
    000022e9: 	cmpl	%eax, 0xd0(%rsp)
    000022f0: 	jne	.Ltmp1726 # Offset: 8944
    000022f6: 	movq	0x80(%rsp), %r13
.Ltmp1714:
    000022fe: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002305: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    0000230c: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00002313: 	je	.Ltmp1727 # Offset: 8979
.Ltmp1833:
    00002319: 	movq	-0x20(%rax), %rbp
    0000231d: 	callq	clock@PLT # Offset: 8989
    00002322: 	pxor	%xmm0, %xmm0
    00002326: 	movq	%rax, end_time(%rip)
    0000232d: 	movq	%rbp, %rdi
    00002330: 	subq	start_time(%rip), %rax
    00002337: 	cvtsi2sd	%rax, %xmm0
    0000233c: 	divsd	DATAat0x24960(%rip), %xmm0
    00002344: 	callq	_Z13record_resultdPKc # Offset: 9028
    00002349: 	movq	0x10(%rsp), %rax
    0000234e: 	pxor	%xmm0, %xmm0
.Ltmp1728:
    00002352: 	movdqu	(%rax), %xmm6
    00002356: 	addq	$0x10, %rax
    0000235a: 	paddd	%xmm6, %xmm0
    0000235e: 	cmpq	0x88(%rsp), %rax
    00002366: 	jne	.Ltmp1728 # Offset: 9062
    00002368: 	cvttsd2si	init_value(%rip), %eax
    00002370: 	movdqa	%xmm0, %xmm1
    00002374: 	movq	0x140(%rsp), %rdx
    0000237c: 	psrldq	$0x8, %xmm1
    00002381: 	paddd	%xmm1, %xmm0
    00002385: 	movdqa	%xmm0, %xmm1
    00002389: 	imull	%eax, %eax
    0000238c: 	psrldq	$0x4, %xmm1
    00002391: 	paddd	%xmm1, %xmm0
    00002395: 	imull	$0x75300, %eax, %ecx
    0000239b: 	movd	%xmm0, %eax
    0000239f: 	cmpl	%eax, %ecx
    000023a1: 	je	.Ltmp1729 # Offset: 9121
    000023a3: 	leaq	DATAat0x2455f(%rip), %rsi
    000023aa: 	movl	$0x1, %edi
    000023af: 	xorl	%eax, %eax
    000023b1: 	callq	__printf_chk@PLT # Offset: 9137
    000023b6: 	movq	0x140(%rsp), %rdx
.Ltmp1729:
    000023be: 	cmpq	0x30(%rsp), %rdx
    000023c3: 	je	.Ltmp1730 # Offset: 9155
    000023c5: 	movq	0x150(%rsp), %rax
    000023cd: 	movq	%rdx, %rdi
    000023d0: 	leaq	0x1(%rax), %rsi
    000023d4: 	callq	_ZdlPvm@PLT # Offset: 9172
.Ltmp1730:
    000023d9: 	movq	0x90(%rsp), %rbx
    000023e1: 	movq	0x98(%rsp), %rsi
    000023e9: 	leaq	DATAat0x247e0(%rip), %rdx
    000023f0: 	movq	%rbx, %rdi
    000023f3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9203
    000023f8: 	movq	%rbx, %rsi
    000023fb: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00002402: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 9218
    00002407: 	callq	clock@PLT # Offset: 9223
    0000240c: 	movq	%rax, start_time(%rip)
    00002413: 	movl	iterations(%rip), %eax
    00002419: 	movl	%eax, 0xa0(%rsp)
    00002420: 	testl	%eax, %eax
    00002422: 	jle	.Ltmp1731 # Offset: 9250
    00002428: 	movq	0x10(%rsp), %rax
    0000242d: 	movl	$0x0, 0x50(%rsp)
    00002435: 	movq	%r13, %r15
    00002438: 	leaq	0xc88(%rax), %rbx
    0000243f: 	movq	%rbx, 0x40(%rsp)
    00002444: 	leaq	0x8(%rax), %rbx
    00002448: 	addq	$0x10, %rax
    0000244c: 	movq	%rax, 0xb0(%rsp)
    00002454: 	movq	(%rsp), %rax
    00002458: 	movq	%rbx, 0x38(%rsp)
    0000245d: 	addq	$0x960, %rax
    00002463: 	movq	%rax, 0xc0(%rsp)
.Ltmp1737:
    0000246b: 	movq	0x10(%rsp), %r14
    00002470: 	movq	$0x0, (%r14)
    00002477: 	movq	0x40(%rsp), %rax
    0000247c: 	movq	%r14, %rcx
    0000247f: 	movq	$0x0, -0x10(%rax)
    00002487: 	movq	0x38(%rsp), %rdi
    0000248c: 	xorl	%eax, %eax
    0000248e: 	andq	$-0x8, %rdi
    00002492: 	subq	%rdi, %rcx
    00002495: 	addl	$0xc80, %ecx
    0000249b: 	shrl	$0x3, %ecx
    0000249e: 	rep		stosq	%rax, %es:(%rdi)
    000024a1: 	movq	$0x0, 0x48(%rsp)
    000024aa: 	movq	0xc0(%rsp), %rax
    000024b2: 	movq	%rax, 0x60(%rsp)
.Ltmp1736:
    000024b7: 	movq	0x48(%rsp), %rax
    000024bc: 	movq	0xb0(%rsp), %rbx
    000024c4: 	movq	0x10(%rsp), %rsi
    000024c9: 	movq	0x60(%rsp), %r9
    000024ce: 	leal	0x4d(%rax), %r12d
    000024d2: 	leal	0x50(%rax), %r10d
    000024d6: 	movl	%eax, %ebp
    000024d8: 	movl	%eax, %r13d
    000024db: 	cmpl	%eax, %r12d
    000024de: 	leaq	0x130(%rbx,%rax,4), %rbx
    000024e6: 	cmovgl	%r10d, %ebp
    000024ea: 	movslq	%ebp, %rax
    000024ed: 	imull	$0x258, %ebp, %edi
    000024f3: 	leaq	(%rsi,%rax,4), %r11
    000024f7: 	leal	0x1(%rbp), %eax
    000024fa: 	movl	%eax, 0x28(%rsp)
    000024fe: 	cltq
    00002500: 	leaq	(%rsi,%rax,4), %rax
    00002504: 	addl	$0x708, %edi
    0000250a: 	movq	%rax, 0xa8(%rsp)
    00002512: 	leal	0x2(%rbp), %eax
    00002515: 	movl	%eax, 0x68(%rsp)
    00002519: 	cltq
    0000251b: 	leaq	(%rsi,%rax,4), %rax
    0000251f: 	movq	%rax, 0x70(%rsp)
    00002524: 	leal	0x3(%rbp), %eax
    00002527: 	movl	%eax, 0x78(%rsp)
    0000252b: 	cltq
    0000252d: 	leaq	(%rsi,%rax,4), %rax
    00002531: 	xorl	%esi, %esi
    00002533: 	movq	%rax, 0x80(%rsp)
    0000253b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1735:
    00002540: 	movl	(%r15,%rsi,4), %ecx
    00002544: 	cmpl	%r13d, %r12d
    00002547: 	jle	.Ltmp1732 # Offset: 9543
    00002549: 	movq	%r9, %rdx
    0000254c: 	movq	%r14, %rax
    0000254f: 	nop # Size: 1
.Ltmp1733:
    00002550: 	movl	-0x960(%rdx), %r8d
    00002557: 	addq	$0x2580, %rdx
    0000255e: 	imull	%ecx, %r8d
    00002562: 	addl	%r8d, (%rax)
    00002565: 	movl	-0x2580(%rdx), %r8d
    0000256c: 	imull	%ecx, %r8d
    00002570: 	addl	%r8d, 0x4(%rax)
    00002574: 	movl	-0x1c20(%rdx), %r8d
    0000257b: 	imull	%ecx, %r8d
    0000257f: 	addl	%r8d, 0x8(%rax)
    00002583: 	movl	-0x12c0(%rdx), %r8d
    0000258a: 	imull	%ecx, %r8d
    0000258e: 	addl	%r8d, 0xc(%rax)
    00002592: 	addq	$0x10, %rax
    00002596: 	cmpq	%rax, %rbx
    00002599: 	jne	.Ltmp1733 # Offset: 9625
.Ltmp1732:
    0000259b: 	cmpl	%ebp, %r10d
    0000259e: 	jle	.Ltmp1734 # Offset: 9630
    000025a0: 	movq	(%rsp), %r8
    000025a4: 	leal	-0x708(%rdi), %eax
    000025aa: 	cltq
    000025ac: 	movl	(%r8,%rax,4), %edx
    000025b0: 	imull	%ecx, %edx
    000025b3: 	addl	%edx, (%r11)
    000025b6: 	cmpl	0x28(%rsp), %r10d
    000025bb: 	jle	.Ltmp1734 # Offset: 9659
    000025bd: 	leal	-0x4b0(%rdi), %eax
    000025c3: 	movq	%r8, %rdx
    000025c6: 	cltq
    000025c8: 	movl	(%r8,%rax,4), %r8d
    000025cc: 	imull	%ecx, %r8d
    000025d0: 	movl	%r8d, %eax
    000025d3: 	movq	0xa8(%rsp), %r8
    000025db: 	addl	%eax, (%r8)
    000025de: 	cmpl	%r10d, 0x68(%rsp)
    000025e3: 	jge	.Ltmp1734 # Offset: 9699
    000025e5: 	leal	-0x258(%rdi), %eax
    000025eb: 	cltq
    000025ed: 	movl	(%rdx,%rax,4), %r8d
    000025f1: 	imull	%ecx, %r8d
    000025f5: 	movl	%r8d, %eax
    000025f8: 	movq	0x70(%rsp), %r8
    000025fd: 	addl	%eax, (%r8)
    00002600: 	cmpl	%r10d, 0x78(%rsp)
    00002605: 	jge	.Ltmp1734 # Offset: 9733
    00002607: 	movslq	%edi, %rax
    0000260a: 	imull	(%rdx,%rax,4), %ecx
    0000260e: 	movq	0x80(%rsp), %rax
    00002616: 	addl	%ecx, (%rax)
.Ltmp1734:
    00002618: 	addq	$0x1, %rsi
    0000261c: 	addl	$0x1, %edi
    0000261f: 	addq	$0x4, %r9
    00002623: 	cmpq	$0x258, %rsi
    0000262a: 	jne	.Ltmp1735 # Offset: 9770
    00002630: 	addq	$0x50, 0x48(%rsp)
    00002636: 	movq	0x48(%rsp), %rax
    0000263b: 	addq	$0x140, %r14
    00002642: 	addq	$0x2ee00, 0x60(%rsp)
    0000264b: 	cmpq	$0x320, %rax
    00002651: 	jne	.Ltmp1736 # Offset: 9809
    00002657: 	addl	$0x1, 0x50(%rsp)
    0000265c: 	movl	0x50(%rsp), %eax
    00002660: 	cmpl	0xa0(%rsp), %eax
    00002667: 	jne	.Ltmp1737 # Offset: 9831
    0000266d: 	movq	%r15, %r13
.Ltmp1731:
    00002670: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002677: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    0000267e: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00002685: 	je	.Ltmp1738 # Offset: 9861
.Ltmp1834:
    0000268b: 	movq	-0x20(%rax), %rbp
    0000268f: 	callq	clock@PLT # Offset: 9871
    00002694: 	pxor	%xmm0, %xmm0
    00002698: 	movq	%rax, end_time(%rip)
    0000269f: 	movq	%rbp, %rdi
    000026a2: 	subq	start_time(%rip), %rax
    000026a9: 	cvtsi2sd	%rax, %xmm0
    000026ae: 	divsd	DATAat0x24960(%rip), %xmm0
    000026b6: 	callq	_Z13record_resultdPKc # Offset: 9910
    000026bb: 	movq	0x10(%rsp), %rax
    000026c0: 	pxor	%xmm0, %xmm0
.Ltmp1739:
    000026c4: 	movdqu	(%rax), %xmm5
    000026c8: 	addq	$0x10, %rax
    000026cc: 	paddd	%xmm5, %xmm0
    000026d0: 	cmpq	%rax, 0x88(%rsp)
    000026d8: 	jne	.Ltmp1739 # Offset: 9944
    000026da: 	cvttsd2si	init_value(%rip), %eax
    000026e2: 	movdqa	%xmm0, %xmm1
    000026e6: 	movq	0x140(%rsp), %rdx
    000026ee: 	psrldq	$0x8, %xmm1
    000026f3: 	paddd	%xmm1, %xmm0
    000026f7: 	movdqa	%xmm0, %xmm1
    000026fb: 	imull	%eax, %eax
    000026fe: 	psrldq	$0x4, %xmm1
    00002703: 	paddd	%xmm1, %xmm0
    00002707: 	imull	$0x75300, %eax, %ecx
    0000270d: 	movd	%xmm0, %eax
    00002711: 	cmpl	%eax, %ecx
    00002713: 	je	.Ltmp1740 # Offset: 10003
    00002715: 	leaq	DATAat0x2455f(%rip), %rsi
    0000271c: 	movl	$0x1, %edi
    00002721: 	xorl	%eax, %eax
    00002723: 	callq	__printf_chk@PLT # Offset: 10019
    00002728: 	movq	0x140(%rsp), %rdx
.Ltmp1740:
    00002730: 	cmpq	0x30(%rsp), %rdx
    00002735: 	je	.Ltmp1741 # Offset: 10037
    00002737: 	movq	0x150(%rsp), %rax
    0000273f: 	movq	%rdx, %rdi
    00002742: 	leaq	0x1(%rax), %rsi
    00002746: 	callq	_ZdlPvm@PLT # Offset: 10054
.Ltmp1741:
    0000274b: 	movq	0x90(%rsp), %rbx
    00002753: 	movq	0x98(%rsp), %rsi
    0000275b: 	leaq	DATAat0x24810(%rip), %rdx
    00002762: 	movq	%rbx, %rdi
    00002765: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10085
    0000276a: 	movq	%rbx, %rsi
    0000276d: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00002774: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 10100
    00002779: 	callq	clock@PLT # Offset: 10105
    0000277e: 	movl	iterations(%rip), %r8d
    00002785: 	movq	0x10(%rsp), %r9
    0000278a: 	xorl	%esi, %esi
    0000278c: 	movq	%rax, start_time(%rip)
    00002793: 	movq	0x10(%rsp), %rax
    00002798: 	leaq	0xc88(%rax), %rbx
    0000279f: 	addq	$0x8, %rax
    000027a3: 	movq	%rax, 0x38(%rsp)
    000027a8: 	xorl	%eax, %eax
    000027aa: 	movq	%rbx, 0x40(%rsp)
    000027af: 	testl	%r8d, %r8d
    000027b2: 	jle	.Ltmp1742 # Offset: 10162
.Ltmp1745:
    000027b8: 	movq	%rax, (%r9)
    000027bb: 	movq	0x40(%rsp), %rbx
    000027c0: 	movq	%r9, %rcx
    000027c3: 	movq	%rax, -0x10(%rbx)
    000027c7: 	movq	0x38(%rsp), %rdi
    000027cc: 	andq	$-0x8, %rdi
    000027d0: 	subq	%rdi, %rcx
    000027d3: 	addl	$0xc80, %ecx
    000027d9: 	shrl	$0x3, %ecx
    000027dc: 	rep		stosq	%rax, %es:(%rdi)
    000027df: 	movq	%r9, %rdi
    000027e2: 	movq	(%rsp), %rcx
.Ltmp1744:
    000027e6: 	movd	(%rdi), %xmm3
    000027ea: 	xorl	%edx, %edx
    000027ec: 	nopl	(%rax) # Size: 4
.Ltmp1743:
    000027f0: 	movdqu	(%r13,%rdx), %xmm0
    000027f7: 	movdqu	(%rcx,%rdx), %xmm2
    000027fc: 	movdqu	(%r13,%rdx), %xmm1
    00002803: 	movdqu	(%rcx,%rdx), %xmm5
    00002808: 	addq	$0x10, %rdx
    0000280c: 	psrlq	$0x20, %xmm0
    00002811: 	psrlq	$0x20, %xmm2
    00002816: 	pmuludq	%xmm5, %xmm1
    0000281a: 	pmuludq	%xmm2, %xmm0
    0000281e: 	pshufd	$0x8, %xmm1, %xmm1
    00002823: 	pshufd	$0x8, %xmm0, %xmm0
    00002828: 	punpckldq	%xmm0, %xmm1
    0000282c: 	paddd	%xmm1, %xmm3
    00002830: 	cmpq	$0x960, %rdx
    00002837: 	jne	.Ltmp1743 # Offset: 10295
    00002839: 	pshufd	$0x55, %xmm3, %xmm0
    0000283e: 	movd	%xmm3, %r10d
    00002843: 	addq	$0x4, %rdi
    00002847: 	addq	$0x960, %rcx
    0000284e: 	movd	%xmm0, %edx
    00002852: 	movdqa	%xmm3, %xmm0
    00002856: 	punpckhdq	%xmm3, %xmm0
    0000285a: 	addl	%r10d, %edx
    0000285d: 	pshufd	$0xff, %xmm3, %xmm3
    00002862: 	movd	%xmm0, %r10d
    00002867: 	addl	%r10d, %edx
    0000286a: 	movd	%xmm3, %r10d
    0000286f: 	addl	%r10d, %edx
    00002872: 	movl	%edx, -0x4(%rdi)
    00002875: 	cmpq	0x58(%rsp), %rcx
    0000287a: 	jne	.Ltmp1744 # Offset: 10362
    00002880: 	addl	$0x1, %esi
    00002883: 	cmpl	%r8d, %esi
    00002886: 	jne	.Ltmp1745 # Offset: 10374
.Ltmp1742:
    0000288c: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002893: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    0000289a: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000028a1: 	je	.Ltmp1746 # Offset: 10401
.Ltmp1835:
    000028a7: 	movq	-0x20(%rax), %rbp
    000028ab: 	callq	clock@PLT # Offset: 10411
    000028b0: 	pxor	%xmm0, %xmm0
    000028b4: 	movq	%rax, end_time(%rip)
    000028bb: 	movq	%rbp, %rdi
    000028be: 	subq	start_time(%rip), %rax
    000028c5: 	cvtsi2sd	%rax, %xmm0
    000028ca: 	divsd	DATAat0x24960(%rip), %xmm0
    000028d2: 	callq	_Z13record_resultdPKc # Offset: 10450
    000028d7: 	movq	0x10(%rsp), %rax
    000028dc: 	pxor	%xmm0, %xmm0
.Ltmp1747:
    000028e0: 	movdqu	(%rax), %xmm7
    000028e4: 	addq	$0x10, %rax
    000028e8: 	paddd	%xmm7, %xmm0
    000028ec: 	cmpq	0x88(%rsp), %rax
    000028f4: 	jne	.Ltmp1747 # Offset: 10484
    000028f6: 	cvttsd2si	init_value(%rip), %eax
    000028fe: 	movdqa	%xmm0, %xmm1
    00002902: 	movq	0x140(%rsp), %rdx
    0000290a: 	psrldq	$0x8, %xmm1
    0000290f: 	paddd	%xmm1, %xmm0
    00002913: 	movdqa	%xmm0, %xmm1
    00002917: 	imull	%eax, %eax
    0000291a: 	psrldq	$0x4, %xmm1
    0000291f: 	paddd	%xmm1, %xmm0
    00002923: 	imull	$0x75300, %eax, %ecx
    00002929: 	movd	%xmm0, %eax
    0000292d: 	cmpl	%eax, %ecx
    0000292f: 	je	.Ltmp1748 # Offset: 10543
    00002931: 	leaq	DATAat0x2455f(%rip), %rsi
    00002938: 	movl	$0x1, %edi
    0000293d: 	xorl	%eax, %eax
    0000293f: 	callq	__printf_chk@PLT # Offset: 10559
    00002944: 	movq	0x140(%rsp), %rdx
.Ltmp1748:
    0000294c: 	cmpq	0x30(%rsp), %rdx
    00002951: 	je	.Ltmp1749 # Offset: 10577
    00002953: 	movq	0x150(%rsp), %rax
    0000295b: 	movq	%rdx, %rdi
    0000295e: 	leaq	0x1(%rax), %rsi
    00002962: 	callq	_ZdlPvm@PLT # Offset: 10594
.Ltmp1749:
    00002967: 	movq	0x90(%rsp), %rbx
    0000296f: 	movq	0x98(%rsp), %rsi
    00002977: 	leaq	DATAat0x24840(%rip), %rdx
    0000297e: 	movq	%rbx, %rdi
    00002981: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10625
    00002986: 	movq	%rbx, %rsi
    00002989: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00002990: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 10640
    00002995: 	callq	clock@PLT # Offset: 10645
    0000299a: 	movl	iterations(%rip), %r8d
    000029a1: 	movq	0x10(%rsp), %r9
    000029a6: 	xorl	%esi, %esi
    000029a8: 	movq	%rax, start_time(%rip)
    000029af: 	movq	0x10(%rsp), %rax
    000029b4: 	leaq	0xc88(%rax), %rbx
    000029bb: 	addq	$0x8, %rax
    000029bf: 	movq	%rax, 0x38(%rsp)
    000029c4: 	xorl	%eax, %eax
    000029c6: 	movq	%rbx, 0x40(%rsp)
    000029cb: 	testl	%r8d, %r8d
    000029ce: 	jle	.Ltmp1750 # Offset: 10702
.Ltmp1753:
    000029d4: 	movq	%rax, (%r9)
    000029d7: 	movq	0x40(%rsp), %rbx
    000029dc: 	movq	%r9, %rcx
    000029df: 	movq	%rax, -0x10(%rbx)
    000029e3: 	movq	0x38(%rsp), %rdi
    000029e8: 	andq	$-0x8, %rdi
    000029ec: 	subq	%rdi, %rcx
    000029ef: 	addl	$0xc80, %ecx
    000029f5: 	shrl	$0x3, %ecx
    000029f8: 	rep		stosq	%rax, %es:(%rdi)
    000029fb: 	movq	%r9, %rdi
    000029fe: 	movq	(%rsp), %rcx
.Ltmp1752:
    00002a02: 	movd	(%rdi), %xmm4
    00002a06: 	xorl	%edx, %edx
    00002a08: 	pxor	%xmm3, %xmm3
    00002a0c: 	nopl	(%rax) # Size: 4
.Ltmp1751:
    00002a10: 	movdqu	(%r13,%rdx), %xmm0
    00002a17: 	movdqu	(%rcx,%rdx), %xmm2
    00002a1c: 	movdqu	(%r13,%rdx), %xmm1
    00002a23: 	movdqu	(%rcx,%rdx), %xmm6
    00002a28: 	psrlq	$0x20, %xmm2
    00002a2d: 	psrlq	$0x20, %xmm0
    00002a32: 	movdqu	0x10(%rcx,%rdx), %xmm7
    00002a38: 	pmuludq	%xmm2, %xmm0
    00002a3c: 	pmuludq	%xmm6, %xmm1
    00002a40: 	movdqu	0x10(%rcx,%rdx), %xmm2
    00002a46: 	psrlq	$0x20, %xmm2
    00002a4b: 	pshufd	$0x8, %xmm0, %xmm0
    00002a50: 	pshufd	$0x8, %xmm1, %xmm1
    00002a55: 	punpckldq	%xmm0, %xmm1
    00002a59: 	movdqu	0x10(%r13,%rdx), %xmm0
    00002a60: 	paddd	%xmm1, %xmm4
    00002a64: 	movdqu	0x10(%r13,%rdx), %xmm1
    00002a6b: 	addq	$0x20, %rdx
    00002a6f: 	psrlq	$0x20, %xmm0
    00002a74: 	pmuludq	%xmm7, %xmm1
    00002a78: 	pmuludq	%xmm2, %xmm0
    00002a7c: 	pshufd	$0x8, %xmm1, %xmm1
    00002a81: 	pshufd	$0x8, %xmm0, %xmm0
    00002a86: 	punpckldq	%xmm0, %xmm1
    00002a8a: 	paddd	%xmm1, %xmm3
    00002a8e: 	cmpq	$0x960, %rdx
    00002a95: 	jne	.Ltmp1751 # Offset: 10901
    00002a9b: 	pshufd	$0x55, %xmm4, %xmm0
    00002aa0: 	movd	%xmm4, %r10d
    00002aa5: 	addq	$0x4, %rdi
    00002aa9: 	addq	$0x960, %rcx
    00002ab0: 	movd	%xmm0, %edx
    00002ab4: 	movdqa	%xmm4, %xmm0
    00002ab8: 	punpckhdq	%xmm4, %xmm0
    00002abc: 	addl	%r10d, %edx
    00002abf: 	pshufd	$0xff, %xmm4, %xmm4
    00002ac4: 	movd	%xmm0, %r10d
    00002ac9: 	pshufd	$0x55, %xmm3, %xmm0
    00002ace: 	addl	%r10d, %edx
    00002ad1: 	movd	%xmm4, %r10d
    00002ad6: 	addl	%r10d, %edx
    00002ad9: 	movd	%xmm3, %r10d
    00002ade: 	addl	%r10d, %edx
    00002ae1: 	movd	%xmm0, %r10d
    00002ae6: 	movdqa	%xmm3, %xmm0
    00002aea: 	punpckhdq	%xmm3, %xmm0
    00002aee: 	addl	%r10d, %edx
    00002af1: 	pshufd	$0xff, %xmm3, %xmm3
    00002af6: 	movd	%xmm0, %r10d
    00002afb: 	addl	%r10d, %edx
    00002afe: 	movd	%xmm3, %r10d
    00002b03: 	addl	%r10d, %edx
    00002b06: 	movl	%edx, -0x4(%rdi)
    00002b09: 	cmpq	0x58(%rsp), %rcx
    00002b0e: 	jne	.Ltmp1752 # Offset: 11022
    00002b14: 	addl	$0x1, %esi
    00002b17: 	cmpl	%esi, %r8d
    00002b1a: 	jne	.Ltmp1753 # Offset: 11034
.Ltmp1750:
    00002b20: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002b27: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00002b2e: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00002b35: 	je	.Ltmp1754 # Offset: 11061
.Ltmp1837:
    00002b3b: 	movq	-0x20(%rax), %rbp
    00002b3f: 	callq	clock@PLT # Offset: 11071
    00002b44: 	pxor	%xmm0, %xmm0
    00002b48: 	movq	%rax, end_time(%rip)
    00002b4f: 	movq	%rbp, %rdi
    00002b52: 	subq	start_time(%rip), %rax
    00002b59: 	cvtsi2sd	%rax, %xmm0
    00002b5e: 	divsd	DATAat0x24960(%rip), %xmm0
    00002b66: 	callq	_Z13record_resultdPKc # Offset: 11110
    00002b6b: 	movq	0x10(%rsp), %rax
    00002b70: 	pxor	%xmm0, %xmm0
.Ltmp1755:
    00002b74: 	movdqu	(%rax), %xmm6
    00002b78: 	addq	$0x10, %rax
    00002b7c: 	paddd	%xmm6, %xmm0
    00002b80: 	cmpq	0x88(%rsp), %rax
    00002b88: 	jne	.Ltmp1755 # Offset: 11144
    00002b8a: 	cvttsd2si	init_value(%rip), %eax
    00002b92: 	movdqa	%xmm0, %xmm1
    00002b96: 	movq	0x140(%rsp), %rdx
    00002b9e: 	psrldq	$0x8, %xmm1
    00002ba3: 	paddd	%xmm1, %xmm0
    00002ba7: 	movdqa	%xmm0, %xmm1
    00002bab: 	imull	%eax, %eax
    00002bae: 	psrldq	$0x4, %xmm1
    00002bb3: 	paddd	%xmm1, %xmm0
    00002bb7: 	imull	$0x75300, %eax, %ecx
    00002bbd: 	movd	%xmm0, %eax
    00002bc1: 	cmpl	%eax, %ecx
    00002bc3: 	je	.Ltmp1756 # Offset: 11203
    00002bc5: 	leaq	DATAat0x2455f(%rip), %rsi
    00002bcc: 	movl	$0x1, %edi
    00002bd1: 	xorl	%eax, %eax
    00002bd3: 	callq	__printf_chk@PLT # Offset: 11219
    00002bd8: 	movq	0x140(%rsp), %rdx
.Ltmp1756:
    00002be0: 	cmpq	0x30(%rsp), %rdx
    00002be5: 	je	.Ltmp1757 # Offset: 11237
    00002be7: 	movq	0x150(%rsp), %rax
    00002bef: 	movq	%rdx, %rdi
    00002bf2: 	leaq	0x1(%rax), %rsi
    00002bf6: 	callq	_ZdlPvm@PLT # Offset: 11254
.Ltmp1757:
    00002bfb: 	movq	0x90(%rsp), %rbx
    00002c03: 	movq	0x98(%rsp), %rsi
    00002c0b: 	leaq	DATAat0x24870(%rip), %rdx
    00002c12: 	movq	%rbx, %rdi
    00002c15: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11285
    00002c1a: 	movq	%rbx, %rsi
    00002c1d: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00002c24: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 11300
    00002c29: 	callq	clock@PLT # Offset: 11305
    00002c2e: 	movq	%rax, start_time(%rip)
    00002c35: 	movl	iterations(%rip), %eax
    00002c3b: 	movl	%eax, 0xc0(%rsp)
    00002c42: 	testl	%eax, %eax
    00002c44: 	jle	.Ltmp1758 # Offset: 11332
    00002c4a: 	movq	0x10(%rsp), %rax
    00002c4f: 	movq	%r13, %r12
    00002c52: 	movl	$0x0, 0xf8(%rsp)
    00002c5d: 	leaq	0xc88(%rax), %rbx
    00002c64: 	movq	%rbx, 0x40(%rsp)
    00002c69: 	leaq	0x8(%rax), %rbx
    00002c6d: 	addq	$0x4, %rax
    00002c71: 	movq	%rbx, 0x38(%rsp)
    00002c76: 	movq	%rax, 0xd8(%rsp)
.Ltmp1768:
    00002c7e: 	movq	0x10(%rsp), %rbx
    00002c83: 	movq	%r12, %rbp
    00002c86: 	movq	$0x0, (%rbx)
    00002c8d: 	movq	0x40(%rsp), %rax
    00002c92: 	movq	%rbx, %rcx
    00002c95: 	movq	$0x0, -0x10(%rax)
    00002c9d: 	movq	0x38(%rsp), %rdi
    00002ca2: 	xorl	%eax, %eax
    00002ca4: 	andq	$-0x8, %rdi
    00002ca8: 	subq	%rdi, %rcx
    00002cab: 	addl	$0xc80, %ecx
    00002cb1: 	shrl	$0x3, %ecx
    00002cb4: 	rep		stosq	%rax, %es:(%rdi)
    00002cb7: 	movq	%rbx, 0xa8(%rsp)
    00002cbf: 	movq	$0x0, 0xb8(%rsp)
    00002ccb: 	movq	$0x0, 0x80(%rsp)
    00002cd7: 	movq	(%rsp), %rax
    00002cdb: 	movq	%rax, 0xa0(%rsp)
.Ltmp1767:
    00002ce3: 	movq	0xb8(%rsp), %rbx
    00002ceb: 	movl	$0x320, %eax
    00002cf0: 	leal	0xb(%rbx), %esi
    00002cf3: 	movl	%ebx, 0xb0(%rsp)
    00002cfa: 	cmpl	%eax, %esi
    00002cfc: 	cmovlel	%esi, %eax
    00002cff: 	xorl	%r12d, %r12d
    00002d02: 	movl	%eax, 0x78(%rsp)
    00002d06: 	subl	%ebx, %eax
    00002d08: 	subl	$0x1, %eax
    00002d0b: 	addq	%rbx, %rax
    00002d0e: 	movq	0xd8(%rsp), %rbx
    00002d16: 	leaq	(%rbx,%rax,4), %rax
    00002d1a: 	movq	%rax, 0x68(%rsp)
    00002d1f: 	nop # Size: 1
.Ltmp1766:
    00002d20: 	movl	%r12d, 0x58(%rsp)
    00002d25: 	movl	0xb0(%rsp), %ebx
    00002d2c: 	leal	0x12c(%r12), %r13d
    00002d34: 	cmpl	%ebx, 0x78(%rsp)
    00002d38: 	jle	.Ltmp1759 # Offset: 11576
    00002d3e: 	leal	0x129(%r12), %eax
    00002d46: 	movl	%r12d, 0x50(%rsp)
    00002d4b: 	movq	0x80(%rsp), %r10
    00002d53: 	movl	%eax, 0x48(%rsp)
    00002d57: 	leaq	(,%r12,4), %rax
    00002d5f: 	movq	0xa0(%rsp), %r11
    00002d67: 	movq	%rax, 0x70(%rsp)
    00002d6c: 	movq	0xa8(%rsp), %r8
    00002d74: 	leaq	(%rbp,%rax), %rbx
    00002d79: 	movq	%r12, 0x60(%rsp)
    00002d7e: 	nop # Size: 2
.Ltmp1765:
    00002d80: 	movl	(%r8), %esi
    00002d83: 	movl	0x50(%rsp), %edi
    00002d87: 	cmpl	%edi, 0x48(%rsp)
    00002d8b: 	jle	.Ltmp1760 # Offset: 11659
    00002d91: 	movq	0x70(%rsp), %rax
    00002d96: 	movd	%esi, %xmm3
    00002d9a: 	xorl	%edx, %edx
    00002d9c: 	leaq	(%r11,%rax), %rcx
    00002da0: 	xorl	%eax, %eax
    00002da2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1761:
    00002da8: 	movdqu	(%rbx,%rax), %xmm0
    00002dad: 	movdqu	(%rcx,%rax), %xmm2
    00002db2: 	addl	$0x1, %edx
    00002db5: 	movdqu	(%rbx,%rax), %xmm1
    00002dba: 	movdqu	(%rcx,%rax), %xmm5
    00002dbf: 	addq	$0x10, %rax
    00002dc3: 	psrlq	$0x20, %xmm0
    00002dc8: 	psrlq	$0x20, %xmm2
    00002dcd: 	pmuludq	%xmm5, %xmm1
    00002dd1: 	pmuludq	%xmm2, %xmm0
    00002dd5: 	pshufd	$0x8, %xmm1, %xmm1
    00002dda: 	pshufd	$0x8, %xmm0, %xmm0
    00002ddf: 	punpckldq	%xmm0, %xmm1
    00002de3: 	paddd	%xmm1, %xmm3
    00002de7: 	cmpl	$0x4a, %edx
    00002dea: 	jbe	.Ltmp1761 # Offset: 11754
    00002dec: 	pshufd	$0x55, %xmm3, %xmm0
    00002df1: 	movd	%xmm3, %esi
    00002df5: 	movl	%r13d, %edx
    00002df8: 	movd	%xmm0, %eax
    00002dfc: 	movdqa	%xmm3, %xmm0
    00002e00: 	punpckhdq	%xmm3, %xmm0
    00002e04: 	pshufd	$0xff, %xmm3, %xmm3
    00002e09: 	movd	%xmm0, 0x28(%rsp)
    00002e0f: 	movd	%xmm3, %r12d
.Ltmp1836:
    00002e14: 	cmpl	%r13d, %edx
    00002e17: 	jge	.Ltmp1762 # Offset: 11799
    00002e1d: 	movl	%r13d, %r9d
    00002e20: 	subl	%edx, %r9d
    00002e23: 	leal	-0x1(%r9), %ecx
    00002e27: 	cmpl	$0x2, %ecx
    00002e2a: 	jbe	.Ltmp1763 # Offset: 11818
    00002e30: 	movslq	%edx, %rcx
    00002e33: 	movq	(%rsp), %r15
    00002e37: 	pxor	%xmm0, %xmm0
    00002e3b: 	leaq	(%r10,%rcx), %rdi
    00002e3f: 	leaq	(%rbp,%rcx,4), %r14
    00002e44: 	movl	%r9d, %ecx
    00002e47: 	shrl	$0x2, %ecx
    00002e4a: 	leaq	(%r15,%rdi,4), %r15
    00002e4e: 	xorl	%edi, %edi
    00002e50: 	shlq	$0x4, %rcx
.Ltmp1764:
    00002e54: 	movdqu	(%r14,%rdi), %xmm1
    00002e5a: 	movdqu	(%r15,%rdi), %xmm3
    00002e60: 	movdqu	(%r14,%rdi), %xmm2
    00002e66: 	movdqu	(%r15,%rdi), %xmm5
    00002e6c: 	addq	$0x10, %rdi
    00002e70: 	psrlq	$0x20, %xmm1
    00002e75: 	psrlq	$0x20, %xmm3
    00002e7a: 	pmuludq	%xmm5, %xmm2
    00002e7e: 	pmuludq	%xmm3, %xmm1
    00002e82: 	pshufd	$0x8, %xmm2, %xmm2
    00002e87: 	pshufd	$0x8, %xmm1, %xmm1
    00002e8c: 	punpckldq	%xmm1, %xmm2
    00002e90: 	paddd	%xmm2, %xmm0
    00002e94: 	cmpq	%rdi, %rcx
    00002e97: 	jne	.Ltmp1764 # Offset: 11927
    00002e99: 	movdqa	%xmm0, %xmm1
    00002e9d: 	psrldq	$0x8, %xmm1
    00002ea2: 	paddd	%xmm1, %xmm0
    00002ea6: 	movdqa	%xmm0, %xmm1
    00002eaa: 	psrldq	$0x4, %xmm1
    00002eaf: 	paddd	%xmm1, %xmm0
    00002eb3: 	movd	%xmm0, %ecx
    00002eb7: 	addl	%ecx, %esi
    00002eb9: 	movl	%r9d, %ecx
    00002ebc: 	andl	$-0x4, %ecx
    00002ebf: 	addl	%ecx, %edx
    00002ec1: 	cmpl	%r9d, %ecx
    00002ec4: 	je	.Ltmp1762 # Offset: 11972
.Ltmp1763:
    00002ec6: 	movslq	%edx, %rdi
    00002ec9: 	movl	(%r11,%rdi,4), %ecx
    00002ecd: 	imull	(%rbp,%rdi,4), %ecx
    00002ed2: 	leaq	(,%rdi,4), %r9
    00002eda: 	addl	%ecx, %esi
    00002edc: 	leal	0x1(%rdx), %ecx
    00002edf: 	cmpl	%r13d, %ecx
    00002ee2: 	jge	.Ltmp1762 # Offset: 12002
    00002ee4: 	movl	0x4(%rbp,%r9), %ecx
    00002ee9: 	imull	0x4(%r9,%r11), %ecx
    00002eef: 	addl	$0x2, %edx
    00002ef2: 	addl	%ecx, %esi
    00002ef4: 	cmpl	%r13d, %edx
    00002ef7: 	jge	.Ltmp1762 # Offset: 12023
    00002ef9: 	movl	0x8(%rbp,%r9), %edx
    00002efe: 	imull	0x8(%r9,%r11), %edx
    00002f04: 	addl	%edx, %esi
    00002f06: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1762:
    00002f10: 	addl	%esi, %eax
    00002f12: 	addl	0x28(%rsp), %eax
    00002f16: 	addq	$0x4, %r8
    00002f1a: 	addq	$0x960, %r11
    00002f21: 	addl	%r12d, %eax
    00002f24: 	addq	$0x258, %r10
    00002f2b: 	movl	%eax, -0x4(%r8)
    00002f2f: 	cmpq	%r8, 0x68(%rsp)
    00002f34: 	jne	.Ltmp1765 # Offset: 12084
    00002f3a: 	movq	0x60(%rsp), %r12
.Ltmp1759:
    00002f3f: 	addq	$0x12c, %r12
    00002f46: 	cmpq	$0x258, %r12
    00002f4d: 	jne	.Ltmp1766 # Offset: 12109
    00002f53: 	addq	$0xb, 0xb8(%rsp)
    00002f5c: 	movq	0xb8(%rsp), %rax
    00002f64: 	addq	$0x2c, 0xa8(%rsp)
    00002f6d: 	addq	$0x6720, 0xa0(%rsp)
    00002f79: 	addq	$0x19c8, 0x80(%rsp)
    00002f85: 	cmpq	$0x323, %rax
    00002f8b: 	jne	.Ltmp1767 # Offset: 12171
    00002f91: 	addl	$0x1, 0xf8(%rsp)
    00002f99: 	movq	%rbp, %r12
    00002f9c: 	movl	0xf8(%rsp), %eax
    00002fa3: 	cmpl	%eax, 0xc0(%rsp)
    00002faa: 	jne	.Ltmp1768 # Offset: 12202
    00002fb0: 	movq	%rbp, %r13
.Ltmp1758:
    00002fb3: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002fba: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00002fc1: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00002fc8: 	je	.Ltmp1769 # Offset: 12232
.Ltmp1839:
    00002fce: 	movq	-0x20(%rax), %rbp
    00002fd2: 	callq	clock@PLT # Offset: 12242
    00002fd7: 	pxor	%xmm0, %xmm0
    00002fdb: 	movq	%rax, end_time(%rip)
    00002fe2: 	movq	%rbp, %rdi
    00002fe5: 	subq	start_time(%rip), %rax
    00002fec: 	cvtsi2sd	%rax, %xmm0
    00002ff1: 	divsd	DATAat0x24960(%rip), %xmm0
    00002ff9: 	callq	_Z13record_resultdPKc # Offset: 12281
    00002ffe: 	movq	0x10(%rsp), %rax
    00003003: 	pxor	%xmm0, %xmm0
.Ltmp1770:
    00003007: 	movdqu	(%rax), %xmm5
    0000300b: 	addq	$0x10, %rax
    0000300f: 	paddd	%xmm5, %xmm0
    00003013: 	cmpq	0x88(%rsp), %rax
    0000301b: 	jne	.Ltmp1770 # Offset: 12315
    0000301d: 	cvttsd2si	init_value(%rip), %eax
    00003025: 	movdqa	%xmm0, %xmm1
    00003029: 	movq	0x140(%rsp), %rdx
    00003031: 	psrldq	$0x8, %xmm1
    00003036: 	paddd	%xmm1, %xmm0
    0000303a: 	movdqa	%xmm0, %xmm1
    0000303e: 	imull	%eax, %eax
    00003041: 	psrldq	$0x4, %xmm1
    00003046: 	paddd	%xmm1, %xmm0
    0000304a: 	imull	$0x75300, %eax, %ecx
    00003050: 	movd	%xmm0, %eax
    00003054: 	cmpl	%eax, %ecx
    00003056: 	je	.Ltmp1771 # Offset: 12374
    00003058: 	leaq	DATAat0x2455f(%rip), %rsi
    0000305f: 	movl	$0x1, %edi
    00003064: 	xorl	%eax, %eax
    00003066: 	callq	__printf_chk@PLT # Offset: 12390
    0000306b: 	movq	0x140(%rsp), %rdx
.Ltmp1771:
    00003073: 	cmpq	0x30(%rsp), %rdx
    00003078: 	je	.Ltmp1772 # Offset: 12408
    0000307a: 	movq	0x150(%rsp), %rax
    00003082: 	movq	%rdx, %rdi
    00003085: 	leaq	0x1(%rax), %rsi
    00003089: 	callq	_ZdlPvm@PLT # Offset: 12425
.Ltmp1772:
    0000308e: 	movq	0x90(%rsp), %rbx
    00003096: 	movq	0x98(%rsp), %rsi
    0000309e: 	leaq	DATAat0x248a0(%rip), %rdx
    000030a5: 	movq	%rbx, %rdi
    000030a8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12456
    000030ad: 	movq	%rbx, %rsi
    000030b0: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000030b7: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 12471
    000030bc: 	callq	clock@PLT # Offset: 12476
    000030c1: 	movq	%rax, start_time(%rip)
    000030c8: 	movl	iterations(%rip), %eax
    000030ce: 	movl	%eax, 0xfc(%rsp)
    000030d5: 	testl	%eax, %eax
    000030d7: 	jle	.Ltmp1773 # Offset: 12503
    000030dd: 	movq	0x10(%rsp), %rax
    000030e2: 	movq	%r13, %r12
    000030e5: 	movl	$0x0, 0xe8(%rsp)
    000030f0: 	leaq	0xc88(%rax), %rbx
    000030f7: 	movq	%rbx, 0x40(%rsp)
    000030fc: 	leaq	0x8(%rax), %rbx
    00003100: 	addq	$0x4, %rax
    00003104: 	movq	%rbx, 0x38(%rsp)
    00003109: 	movq	%rax, 0xd8(%rsp)
.Ltmp1783:
    00003111: 	movq	0x10(%rsp), %rbx
    00003116: 	movq	%r12, %rbp
    00003119: 	movq	$0x0, (%rbx)
    00003120: 	movq	0x40(%rsp), %rax
    00003125: 	movq	%rbx, %rcx
    00003128: 	movq	$0x0, -0x10(%rax)
    00003130: 	movq	0x38(%rsp), %rdi
    00003135: 	xorl	%eax, %eax
    00003137: 	andq	$-0x8, %rdi
    0000313b: 	subq	%rdi, %rcx
    0000313e: 	addl	$0xc80, %ecx
    00003144: 	shrl	$0x3, %ecx
    00003147: 	rep		stosq	%rax, %es:(%rdi)
    0000314a: 	movq	%rbx, 0xd0(%rsp)
    00003152: 	movq	$0x0, 0xe0(%rsp)
    0000315e: 	movq	$0x0, 0xc0(%rsp)
    0000316a: 	movq	(%rsp), %rax
    0000316e: 	movq	%rax, 0xc8(%rsp)
.Ltmp1782:
    00003176: 	movq	0xe0(%rsp), %rbx
    0000317e: 	movl	$0x320, %eax
    00003183: 	movq	%rbp, %r8
    00003186: 	leal	0xb(%rbx), %esi
    00003189: 	movl	%ebx, 0xf8(%rsp)
    00003190: 	cmpl	%eax, %esi
    00003192: 	cmovlel	%esi, %eax
    00003195: 	xorl	%r12d, %r12d
    00003198: 	movl	%eax, 0xb8(%rsp)
    0000319f: 	subl	%ebx, %eax
    000031a1: 	subl	$0x1, %eax
    000031a4: 	addq	%rbx, %rax
    000031a7: 	movq	0xd8(%rsp), %rbx
    000031af: 	leaq	(%rbx,%rax,4), %rax
    000031b3: 	movq	%rax, 0xa0(%rsp)
    000031bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1781:
    000031c0: 	movl	%r12d, 0x78(%rsp)
    000031c5: 	movl	0xf8(%rsp), %ebx
    000031cc: 	leal	0x12c(%r12), %ebp
    000031d4: 	cmpl	%ebx, 0xb8(%rsp)
    000031db: 	jle	.Ltmp1774 # Offset: 12763
    000031e1: 	leal	0x125(%r12), %eax
    000031e9: 	movl	%r12d, 0x70(%rsp)
    000031ee: 	movq	0xc0(%rsp), %r11
    000031f6: 	movl	%eax, 0x68(%rsp)
    000031fa: 	leal	0x128(%r12), %eax
    00003202: 	movq	0xc8(%rsp), %r10
    0000320a: 	movl	%eax, 0xb0(%rsp)
    00003211: 	leaq	(,%r12,4), %rax
    00003219: 	movq	0xd0(%rsp), %r9
    00003221: 	movq	%rax, 0xa8(%rsp)
    00003229: 	leaq	(%r8,%rax), %rbx
    0000322d: 	movq	%r12, 0x80(%rsp)
    00003235: 	nopl	(%rax) # Size: 3
.Ltmp1780:
    00003238: 	movl	(%r9), %eax
    0000323b: 	movl	0x70(%rsp), %edi
    0000323f: 	cmpl	%edi, 0x68(%rsp)
    00003243: 	jle	.Ltmp1775 # Offset: 12867
    00003249: 	movq	0xa8(%rsp), %rsi
    00003251: 	movd	%eax, %xmm4
    00003255: 	xorl	%edx, %edx
    00003257: 	xorl	%eax, %eax
    00003259: 	pxor	%xmm3, %xmm3
    0000325d: 	leaq	(%rsi,%r10), %rcx
    00003261: 	nopl	(%rax) # Size: 7
.Ltmp1776:
    00003268: 	movdqu	(%rbx,%rax), %xmm0
    0000326d: 	movdqu	(%rcx,%rax), %xmm2
    00003272: 	addl	$0x1, %edx
    00003275: 	movdqu	(%rbx,%rax), %xmm1
    0000327a: 	movdqu	(%rcx,%rax), %xmm6
    0000327f: 	psrlq	$0x20, %xmm2
    00003284: 	psrlq	$0x20, %xmm0
    00003289: 	movdqu	0x10(%rcx,%rax), %xmm7
    0000328f: 	pmuludq	%xmm2, %xmm0
    00003293: 	pmuludq	%xmm6, %xmm1
    00003297: 	movdqu	0x10(%rcx,%rax), %xmm2
    0000329d: 	psrlq	$0x20, %xmm2
    000032a2: 	pshufd	$0x8, %xmm0, %xmm0
    000032a7: 	pshufd	$0x8, %xmm1, %xmm1
    000032ac: 	punpckldq	%xmm0, %xmm1
    000032b0: 	movdqu	0x10(%rbx,%rax), %xmm0
    000032b6: 	paddd	%xmm1, %xmm4
    000032ba: 	movdqu	0x10(%rbx,%rax), %xmm1
    000032c0: 	addq	$0x20, %rax
    000032c4: 	psrlq	$0x20, %xmm0
    000032c9: 	pmuludq	%xmm7, %xmm1
    000032cd: 	pmuludq	%xmm2, %xmm0
    000032d1: 	pshufd	$0x8, %xmm1, %xmm1
    000032d6: 	pshufd	$0x8, %xmm0, %xmm0
    000032db: 	punpckldq	%xmm0, %xmm1
    000032df: 	paddd	%xmm1, %xmm3
    000032e3: 	cmpl	$0x24, %edx
    000032e6: 	jbe	.Ltmp1776 # Offset: 13030
    000032e8: 	pshufd	$0x55, %xmm4, %xmm0
    000032ed: 	pshufd	$0xff, %xmm4, %xmm1
    000032f2: 	movd	%xmm4, %eax
    000032f6: 	movl	0xb0(%rsp), %edx
    000032fd: 	movd	%xmm0, %r13d
    00003302: 	movdqa	%xmm4, %xmm0
    00003306: 	movd	%xmm1, 0x58(%rsp)
    0000330c: 	punpckhdq	%xmm4, %xmm0
    00003310: 	movd	%xmm3, 0x28(%rsp)
    00003316: 	movd	%xmm0, 0x60(%rsp)
    0000331c: 	pshufd	$0x55, %xmm3, %xmm0
    00003321: 	movd	%xmm0, 0x50(%rsp)
    00003327: 	movdqa	%xmm3, %xmm0
    0000332b: 	punpckhdq	%xmm3, %xmm0
    0000332f: 	movd	%xmm0, 0x48(%rsp)
    00003335: 	pshufd	$0xff, %xmm3, %xmm0
    0000333a: 	movd	%xmm0, %r12d
.Ltmp1838:
    0000333f: 	cmpl	%edx, %ebp
    00003341: 	jle	.Ltmp1777 # Offset: 13121
    00003347: 	movl	%ebp, %edi
    00003349: 	subl	%edx, %edi
    0000334b: 	leal	-0x1(%rdi), %ecx
    0000334e: 	cmpl	$0x2, %ecx
    00003351: 	jbe	.Ltmp1778 # Offset: 13137
    00003357: 	movslq	%edx, %rcx
    0000335a: 	movq	(%rsp), %r15
    0000335e: 	pxor	%xmm0, %xmm0
    00003362: 	leaq	(%r11,%rcx), %rsi
    00003366: 	leaq	(%r8,%rcx,4), %r14
    0000336a: 	movl	%edi, %ecx
    0000336c: 	shrl	$0x2, %ecx
    0000336f: 	leaq	(%r15,%rsi,4), %r15
    00003373: 	xorl	%esi, %esi
    00003375: 	shlq	$0x4, %rcx
.Ltmp1779:
    00003379: 	movdqu	(%r15,%rsi), %xmm1
    0000337f: 	movdqu	(%r14,%rsi), %xmm3
    00003385: 	movdqu	(%r15,%rsi), %xmm2
    0000338b: 	movdqu	(%r14,%rsi), %xmm6
    00003391: 	addq	$0x10, %rsi
    00003395: 	psrlq	$0x20, %xmm1
    0000339a: 	psrlq	$0x20, %xmm3
    0000339f: 	pmuludq	%xmm6, %xmm2
    000033a3: 	pmuludq	%xmm3, %xmm1
    000033a7: 	pshufd	$0x8, %xmm2, %xmm2
    000033ac: 	pshufd	$0x8, %xmm1, %xmm1
    000033b1: 	punpckldq	%xmm1, %xmm2
    000033b5: 	paddd	%xmm2, %xmm0
    000033b9: 	cmpq	%rsi, %rcx
    000033bc: 	jne	.Ltmp1779 # Offset: 13244
    000033be: 	movdqa	%xmm0, %xmm1
    000033c2: 	psrldq	$0x8, %xmm1
    000033c7: 	paddd	%xmm1, %xmm0
    000033cb: 	movdqa	%xmm0, %xmm1
    000033cf: 	psrldq	$0x4, %xmm1
    000033d4: 	paddd	%xmm1, %xmm0
    000033d8: 	movd	%xmm0, %ecx
    000033dc: 	addl	%ecx, %eax
    000033de: 	movl	%edi, %ecx
    000033e0: 	andl	$-0x4, %ecx
    000033e3: 	addl	%ecx, %edx
    000033e5: 	cmpl	%edi, %ecx
    000033e7: 	je	.Ltmp1777 # Offset: 13287
.Ltmp1778:
    000033e9: 	movslq	%edx, %rcx
    000033ec: 	movl	(%r10,%rcx,4), %edi
    000033f0: 	imull	(%r8,%rcx,4), %edi
    000033f5: 	leaq	(,%rcx,4), %rsi
    000033fd: 	leal	0x1(%rdx), %ecx
    00003400: 	addl	%edi, %eax
    00003402: 	cmpl	%ebp, %ecx
    00003404: 	jge	.Ltmp1777 # Offset: 13316
    00003406: 	movl	0x4(%rsi,%r10), %ecx
    0000340b: 	imull	0x4(%r8,%rsi), %ecx
    00003411: 	addl	$0x2, %edx
    00003414: 	addl	%ecx, %eax
    00003416: 	cmpl	%edx, %ebp
    00003418: 	jle	.Ltmp1777 # Offset: 13336
    0000341a: 	movl	0x8(%r8,%rsi), %edx
    0000341f: 	imull	0x8(%rsi,%r10), %edx
    00003425: 	addl	%edx, %eax
    00003427: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1777:
    00003430: 	addl	%r13d, %eax
    00003433: 	addl	0x60(%rsp), %eax
    00003437: 	addl	0x58(%rsp), %eax
    0000343b: 	addq	$0x4, %r9
    0000343f: 	addl	0x28(%rsp), %eax
    00003443: 	addl	0x50(%rsp), %eax
    00003447: 	addq	$0x960, %r10
    0000344e: 	addq	$0x258, %r11
    00003455: 	addl	0x48(%rsp), %eax
    00003459: 	addl	%r12d, %eax
    0000345c: 	movl	%eax, -0x4(%r9)
    00003460: 	cmpq	%r9, 0xa0(%rsp)
    00003468: 	jne	.Ltmp1780 # Offset: 13416
    0000346e: 	movq	0x80(%rsp), %r12
.Ltmp1774:
    00003476: 	addq	$0x12c, %r12
    0000347d: 	cmpq	$0x258, %r12
    00003484: 	jne	.Ltmp1781 # Offset: 13444
    0000348a: 	addq	$0xb, 0xe0(%rsp)
    00003493: 	movq	%r8, %rbp
    00003496: 	movq	0xe0(%rsp), %rax
    0000349e: 	addq	$0x2c, 0xd0(%rsp)
    000034a7: 	addq	$0x6720, 0xc8(%rsp)
    000034b3: 	addq	$0x19c8, 0xc0(%rsp)
    000034bf: 	cmpq	$0x323, %rax
    000034c5: 	jne	.Ltmp1782 # Offset: 13509
    000034cb: 	addl	$0x1, 0xe8(%rsp)
    000034d3: 	movq	%r8, %r12
    000034d6: 	movl	0xe8(%rsp), %eax
    000034dd: 	cmpl	0xfc(%rsp), %eax
    000034e4: 	jne	.Ltmp1783 # Offset: 13540
    000034ea: 	movq	%r8, %r13
.Ltmp1773:
    000034ed: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000034f4: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    000034fb: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00003502: 	je	.Ltmp1784 # Offset: 13570
.Ltmp1841:
    00003508: 	movq	-0x20(%rax), %rbp
    0000350c: 	callq	clock@PLT # Offset: 13580
    00003511: 	pxor	%xmm0, %xmm0
    00003515: 	movq	%rax, end_time(%rip)
    0000351c: 	movq	%rbp, %rdi
    0000351f: 	subq	start_time(%rip), %rax
    00003526: 	cvtsi2sd	%rax, %xmm0
    0000352b: 	divsd	DATAat0x24960(%rip), %xmm0
    00003533: 	callq	_Z13record_resultdPKc # Offset: 13619
    00003538: 	movq	0x10(%rsp), %rax
    0000353d: 	pxor	%xmm0, %xmm0
.Ltmp1785:
    00003541: 	movdqu	(%rax), %xmm7
    00003545: 	addq	$0x10, %rax
    00003549: 	paddd	%xmm7, %xmm0
    0000354d: 	cmpq	%rax, 0x88(%rsp)
    00003555: 	jne	.Ltmp1785 # Offset: 13653
    00003557: 	cvttsd2si	init_value(%rip), %eax
    0000355f: 	movdqa	%xmm0, %xmm1
    00003563: 	movq	0x140(%rsp), %rdx
    0000356b: 	psrldq	$0x8, %xmm1
    00003570: 	paddd	%xmm1, %xmm0
    00003574: 	movdqa	%xmm0, %xmm1
    00003578: 	imull	%eax, %eax
    0000357b: 	psrldq	$0x4, %xmm1
    00003580: 	paddd	%xmm1, %xmm0
    00003584: 	imull	$0x75300, %eax, %ecx
    0000358a: 	movd	%xmm0, %eax
    0000358e: 	cmpl	%eax, %ecx
    00003590: 	je	.Ltmp1786 # Offset: 13712
    00003592: 	leaq	DATAat0x2455f(%rip), %rsi
    00003599: 	movl	$0x1, %edi
    0000359e: 	xorl	%eax, %eax
    000035a0: 	callq	__printf_chk@PLT # Offset: 13728
    000035a5: 	movq	0x140(%rsp), %rdx
.Ltmp1786:
    000035ad: 	cmpq	0x30(%rsp), %rdx
    000035b2: 	je	.Ltmp1787 # Offset: 13746
    000035b4: 	movq	0x150(%rsp), %rax
    000035bc: 	movq	%rdx, %rdi
    000035bf: 	leaq	0x1(%rax), %rsi
    000035c3: 	callq	_ZdlPvm@PLT # Offset: 13763
.Ltmp1787:
    000035c8: 	movq	0x90(%rsp), %rbx
    000035d0: 	movq	0x98(%rsp), %rsi
    000035d8: 	leaq	DATAat0x248d0(%rip), %rdx
    000035df: 	movq	%rbx, %rdi
    000035e2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13794
    000035e7: 	movq	%rbx, %rsi
    000035ea: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000035f1: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 13809
    000035f6: 	callq	clock@PLT # Offset: 13814
    000035fb: 	movq	%rax, start_time(%rip)
    00003602: 	movl	iterations(%rip), %eax
    00003608: 	movl	%eax, 0xd0(%rsp)
    0000360f: 	testl	%eax, %eax
    00003611: 	jle	.Ltmp1788 # Offset: 13841
    00003617: 	movq	0x10(%rsp), %rax
    0000361c: 	movq	%r13, 0x50(%rsp)
    00003621: 	movl	$0x0, 0xf8(%rsp)
    0000362c: 	leaq	0xc88(%rax), %rbx
    00003633: 	movq	%rax, %r14
    00003636: 	movq	%rbx, 0x40(%rsp)
    0000363b: 	leaq	0x8(%rax), %rbx
    0000363f: 	movq	%rbx, 0x38(%rsp)
    00003644: 	movq	(%rsp), %rbx
    00003648: 	addq	$0x960, %rbx
    0000364f: 	movq	%rbx, 0xc0(%rsp)
    00003657: 	leaq	0x10(%rax), %rbx
    0000365b: 	movq	%rbx, 0xb8(%rsp)
.Ltmp1796:
    00003663: 	movq	$0x0, (%r14)
    0000366a: 	movq	0x40(%rsp), %rax
    0000366f: 	movq	%r14, %rcx
    00003672: 	movq	%r14, %r15
    00003675: 	movq	$0x0, -0x10(%rax)
    0000367d: 	movq	0x38(%rsp), %rdi
    00003682: 	xorl	%eax, %eax
    00003684: 	andq	$-0x8, %rdi
    00003688: 	subq	%rdi, %rcx
    0000368b: 	addl	$0xc80, %ecx
    00003691: 	shrl	$0x3, %ecx
    00003694: 	rep		stosq	%rax, %es:(%rdi)
    00003697: 	movq	$0x0, 0x68(%rsp)
    000036a0: 	movq	0xc0(%rsp), %rax
    000036a8: 	movq	%rax, 0xc8(%rsp)
.Ltmp1795:
    000036b0: 	movq	0x68(%rsp), %rbx
    000036b5: 	movl	$0x258, %eax
    000036ba: 	leal	0xf8(%rbx), %esi
    000036c0: 	movl	%ebx, 0xa8(%rsp)
    000036c7: 	cmpl	%eax, %esi
    000036c9: 	cmovlel	%esi, %eax
    000036cc: 	movl	%eax, 0x58(%rsp)
    000036d0: 	cmpl	%ebx, %eax
    000036d2: 	jle	.Ltmp1789 # Offset: 14034
    000036d8: 	movq	0xc8(%rsp), %rax
    000036e0: 	movq	%r15, 0x60(%rsp)
    000036e5: 	xorl	%r14d, %r14d
    000036e8: 	movq	%rax, 0x48(%rsp)
    000036ed: 	nopl	(%rax) # Size: 3
.Ltmp1794:
    000036f0: 	leal	0x4d(%r14), %r12d
    000036f4: 	leal	0x50(%r14), %r9d
    000036f8: 	movl	%r14d, %r8d
    000036fb: 	movl	%r14d, 0x28(%rsp)
    00003700: 	cmpl	%r14d, %r12d
    00003703: 	movq	0x48(%rsp), %r10
    00003708: 	movq	0x68(%rsp), %rdi
    0000370d: 	cmovgl	%r9d, %r8d
    00003711: 	movq	0xb8(%rsp), %rax
    00003719: 	leal	0x1(%r8), %ebx
    0000371d: 	leaq	0x130(%rax,%r14,4), %r13
    00003725: 	movslq	%r8d, %rax
    00003728: 	imull	$0x258, %r8d, %esi
    0000372f: 	leaq	(%r15,%rax,4), %r11
    00003733: 	movslq	%ebx, %rax
    00003736: 	addl	0xa8(%rsp), %esi
    0000373d: 	leaq	(%r15,%rax,4), %rax
    00003741: 	movq	%rax, 0xb0(%rsp)
    00003749: 	leal	0x2(%r8), %eax
    0000374d: 	movl	%eax, 0x80(%rsp)
    00003754: 	cltq
    00003756: 	leaq	(%r15,%rax,4), %rax
    0000375a: 	movq	%rax, 0x78(%rsp)
    0000375f: 	leal	0x3(%r8), %eax
    00003763: 	movl	%eax, 0x70(%rsp)
    00003767: 	cltq
    00003769: 	leaq	(%r15,%rax,4), %rax
    0000376d: 	movq	%rax, 0xa0(%rsp)
    00003775: 	nopl	(%rax) # Size: 3
.Ltmp1793:
    00003778: 	movq	0x50(%rsp), %rax
    0000377d: 	movl	(%rax,%rdi,4), %ecx
    00003780: 	cmpl	0x28(%rsp), %r12d
    00003785: 	jle	.Ltmp1790 # Offset: 14213
    00003787: 	movq	0x60(%rsp), %rax
    0000378c: 	movq	%r10, %rdx
    0000378f: 	nop # Size: 1
.Ltmp1791:
    00003790: 	movl	-0x960(%rdx), %ebp
    00003796: 	addq	$0x2580, %rdx
    0000379d: 	imull	%ecx, %ebp
    000037a0: 	addl	%ebp, (%rax)
    000037a2: 	movl	-0x2580(%rdx), %ebp
    000037a8: 	imull	%ecx, %ebp
    000037ab: 	addl	%ebp, 0x4(%rax)
    000037ae: 	movl	-0x1c20(%rdx), %ebp
    000037b4: 	imull	%ecx, %ebp
    000037b7: 	addl	%ebp, 0x8(%rax)
    000037ba: 	movl	-0x12c0(%rdx), %ebp
    000037c0: 	imull	%ecx, %ebp
    000037c3: 	addl	%ebp, 0xc(%rax)
    000037c6: 	addq	$0x10, %rax
    000037ca: 	cmpq	%rax, %r13
    000037cd: 	jne	.Ltmp1791 # Offset: 14285
.Ltmp1790:
    000037cf: 	cmpl	%r8d, %r9d
    000037d2: 	jle	.Ltmp1792 # Offset: 14290
    000037d4: 	movq	(%rsp), %rbp
    000037d8: 	movslq	%esi, %rax
    000037db: 	movl	(%rbp,%rax,4), %edx
    000037df: 	imull	%ecx, %edx
    000037e2: 	addl	%edx, (%r11)
    000037e5: 	cmpl	%ebx, %r9d
    000037e8: 	jle	.Ltmp1792 # Offset: 14312
    000037ea: 	leal	0x258(%rsi), %eax
    000037f0: 	movq	%rbp, %rdx
    000037f3: 	cltq
    000037f5: 	movl	(%rbp,%rax,4), %ebp
    000037f9: 	imull	%ecx, %ebp
    000037fc: 	movl	%ebp, %eax
    000037fe: 	movq	0xb0(%rsp), %rbp
    00003806: 	addl	%eax, (%rbp)
    00003809: 	cmpl	0x80(%rsp), %r9d
    00003811: 	jle	.Ltmp1792 # Offset: 14353
    00003813: 	leal	0x4b0(%rsi), %eax
    00003819: 	cltq
    0000381b: 	movl	(%rdx,%rax,4), %ebp
    0000381e: 	imull	%ecx, %ebp
    00003821: 	movl	%ebp, %eax
    00003823: 	movq	0x78(%rsp), %rbp
    00003828: 	addl	%eax, (%rbp)
    0000382b: 	cmpl	0x70(%rsp), %r9d
    00003830: 	jle	.Ltmp1792 # Offset: 14384
    00003832: 	leal	0x708(%rsi), %eax
    00003838: 	cltq
    0000383a: 	imull	(%rdx,%rax,4), %ecx
    0000383e: 	movq	0xa0(%rsp), %rax
    00003846: 	addl	%ecx, (%rax)
    00003848: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1792:
    00003850: 	addq	$0x1, %rdi
    00003854: 	addl	$0x1, %esi
    00003857: 	addq	$0x4, %r10
    0000385b: 	cmpl	%edi, 0x58(%rsp)
    0000385f: 	jg	.Ltmp1793 # Offset: 14431
    00003865: 	addq	$0x140, 0x60(%rsp)
    0000386e: 	addq	$0x50, %r14
    00003872: 	addq	$0x2ee00, 0x48(%rsp)
    0000387b: 	cmpq	$0x320, %r14
    00003882: 	jne	.Ltmp1794 # Offset: 14466
.Ltmp1789:
    00003888: 	addq	$0xf8, 0x68(%rsp)
    00003891: 	movq	0x68(%rsp), %rax
    00003896: 	addq	$0x3e0, 0xc8(%rsp)
    000038a2: 	cmpq	$0x2e8, %rax
    000038a8: 	jne	.Ltmp1795 # Offset: 14504
    000038ae: 	addl	$0x1, 0xf8(%rsp)
    000038b6: 	movq	%r15, %r14
    000038b9: 	movl	0xf8(%rsp), %eax
    000038c0: 	cmpl	%eax, 0xd0(%rsp)
    000038c7: 	jne	.Ltmp1796 # Offset: 14535
    000038cd: 	movq	0x50(%rsp), %r13
.Ltmp1788:
    000038d2: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000038d9: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    000038e0: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000038e7: 	je	.Ltmp1797 # Offset: 14567
.Ltmp1840:
    000038ed: 	movq	-0x20(%rax), %rbp
    000038f1: 	callq	clock@PLT # Offset: 14577
    000038f6: 	pxor	%xmm0, %xmm0
    000038fa: 	movq	%rax, end_time(%rip)
    00003901: 	movq	%rbp, %rdi
    00003904: 	subq	start_time(%rip), %rax
    0000390b: 	cvtsi2sd	%rax, %xmm0
    00003910: 	divsd	DATAat0x24960(%rip), %xmm0
    00003918: 	callq	_Z13record_resultdPKc # Offset: 14616
    0000391d: 	movq	0x100(%rsp), %rax
    00003925: 	pxor	%xmm0, %xmm0
.Ltmp1798:
    00003929: 	movdqu	(%rax), %xmm6
    0000392d: 	addq	$0x10, %rax
    00003931: 	paddd	%xmm6, %xmm0
    00003935: 	cmpq	0x88(%rsp), %rax
    0000393d: 	jne	.Ltmp1798 # Offset: 14653
    0000393f: 	cvttsd2si	init_value(%rip), %ecx
    00003947: 	movdqa	%xmm0, %xmm1
    0000394b: 	movq	0x140(%rsp), %rdx
    00003953: 	psrldq	$0x8, %xmm1
    00003958: 	paddd	%xmm1, %xmm0
    0000395c: 	movdqa	%xmm0, %xmm1
    00003960: 	imull	%ecx, %ecx
    00003963: 	psrldq	$0x4, %xmm1
    00003968: 	paddd	%xmm1, %xmm0
    0000396c: 	movd	%xmm0, %eax
    00003970: 	imull	$0x75300, %ecx, %ecx
    00003976: 	cmpl	%ecx, %eax
    00003978: 	je	.Ltmp1799 # Offset: 14712
    0000397a: 	leaq	DATAat0x2455f(%rip), %rsi
    00003981: 	movl	$0x1, %edi
    00003986: 	xorl	%eax, %eax
    00003988: 	callq	__printf_chk@PLT # Offset: 14728
    0000398d: 	movq	0x140(%rsp), %rdx
.Ltmp1799:
    00003995: 	cmpq	0x30(%rsp), %rdx
    0000399a: 	je	.Ltmp1800 # Offset: 14746
    0000399c: 	movq	0x150(%rsp), %rax
    000039a4: 	movq	%rdx, %rdi
    000039a7: 	leaq	0x1(%rax), %rsi
    000039ab: 	callq	_ZdlPvm@PLT # Offset: 14763
.Ltmp1800:
    000039b0: 	movq	0x98(%rsp), %rsi
    000039b8: 	movq	0x90(%rsp), %rdi
    000039c0: 	leaq	DATAat0x245d4(%rip), %rdx
    000039c7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 14791
    000039cc: 	movl	iterations(%rip), %edx
    000039d2: 	xorl	%r8d, %r8d
    000039d5: 	xorl	%ecx, %ecx
    000039d7: 	movl	$0x75300, %esi
    000039dc: 	movq	0x140(%rsp), %rdi
    000039e4: 	callq	_Z9summarizePKciiii # Offset: 14820
    000039e9: 	movq	0x140(%rsp), %rdi
    000039f1: 	cmpq	0x30(%rsp), %rdi
    000039f6: 	je	.Ltmp1801 # Offset: 14838
    000039f8: 	movq	0x150(%rsp), %rax
    00003a00: 	leaq	0x1(%rax), %rsi
    00003a04: 	callq	_ZdlPvm@PLT # Offset: 14852
.Ltmp1801:
    00003a09: 	movq	(%rsp), %rdi
    00003a0d: 	movl	$0x4, %esi
    00003a12: 	callq	_ZdlPvm@PLT # Offset: 14866
    00003a17: 	movq	0x10(%rsp), %rdi
    00003a1c: 	movl	$0x4, %esi
    00003a21: 	callq	_ZdlPvm@PLT # Offset: 14881
    00003a26: 	movq	%r13, %rdi
    00003a29: 	movl	$0x4, %esi
    00003a2e: 	callq	_ZdlPvm@PLT # Offset: 14894
    00003a33: 	movq	0x120(%rsp), %rdi
    00003a3b: 	cmpq	0xf0(%rsp), %rdi
    00003a43: 	je	.Ltmp1802 # Offset: 14915
    00003a45: 	movq	0x130(%rsp), %rax
    00003a4d: 	leaq	0x1(%rax), %rsi
    00003a51: 	callq	_ZdlPvm@PLT # Offset: 14929
.Ltmp1802:
    00003a56: 	movq	0x168(%rsp), %rax
    00003a5e: 	subq	%fs:0x28, %rax
    00003a67: 	jne	.Ltmp1803 # Offset: 14951
    00003a6d: 	addq	$0x178, %rsp
    00003a74: 	popq	%rbx
    00003a75: 	popq	%rbp
    00003a76: 	popq	%r12
    00003a78: 	popq	%r13
    00003a7a: 	popq	%r14
    00003a7c: 	popq	%r15
    00003a7e: 	retq # Offset: 14974
.Ltmp1572:
    00003a7f: 	addq	$0x20, %r15
    00003a83: 	cmpq	%r8, %r15
    00003a86: 	jne	.Ltmp1573 # Offset: 14982
    00003a8c: 	addq	$0x8, %rax
    00003a90: 	cmpq	%rax, %rdx
    00003a93: 	ja	.Ltmp1574 # Offset: 14995
    00003a99: 	jmp	.Ltmp1571 # Offset: 15001
.Ltmp1804:
    00003a9e: 	addq	$0x20, %rbx
.Ltmp1575:
    00003aa2: 	cmpq	%rbx, %r13
    00003aa5: 	je	.Ltmp1580 # Offset: 15013
.Ltmp1805:
    00003aab: 	movq	(%rbx), %rdi
    00003aae: 	leaq	0x10(%rbx), %rax
    00003ab2: 	cmpq	%rax, %rdi
    00003ab5: 	je	.Ltmp1804 # Offset: 15029
    00003ab7: 	movq	0x10(%rbx), %rax
    00003abb: 	addq	$0x20, %rbx
    00003abf: 	leaq	0x1(%rax), %rsi
    00003ac3: 	callq	_ZdlPvm@PLT # Offset: 15043
    00003ac8: 	cmpq	%rbx, %r13
    00003acb: 	jne	.Ltmp1805 # Offset: 15051
    00003acd: 	jmp	.Ltmp1580 # Offset: 15053
.Ltmp1592:
    00003ad2: 	movq	-0x8(%rdx), %rax
    00003ad6: 	addq	$0x200, %rax
    00003adc: 	jmp	.Ltmp1806 # Offset: 15068
.Ltmp1667:
    00003ae1: 	leaq	0x118(%rsp), %rsi
    00003ae9: 	xorl	%edx, %edx
    00003aeb: 	movq	%rbx, %rdi
    00003aee: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 15086
    00003af3: 	movq	%rax, (%rbx)
    00003af6: 	movq	%rax, %rdi
    00003af9: 	movq	0x118(%rsp), %rax
    00003b01: 	movq	%rax, 0x10(%rbx)
.Ltmp1826:
    00003b05: 	movq	%r12, %rdx
    00003b08: 	movq	%rbp, %rsi
    00003b0b: 	callq	memcpy@PLT # Offset: 15115
    00003b10: 	movq	0x118(%rsp), %r12
    00003b18: 	movq	(%rbx), %rdi
    00003b1b: 	jmp	.Ltmp1807 # Offset: 15131
.Ltmp1640:
    00003b20: 	leaq	DATAat0x2455f(%rip), %rsi
    00003b27: 	movl	$0x1, %edi
    00003b2c: 	xorl	%eax, %eax
    00003b2e: 	callq	__printf_chk@PLT # Offset: 15150
    00003b33: 	movq	0x140(%rsp), %rdx
    00003b3b: 	jmp	.Ltmp1808 # Offset: 15163
.Ltmp1638:
    00003b40: 	movq	-0x8(%rdx), %rax
    00003b44: 	addq	$0x200, %rax
    00003b4a: 	jmp	.Ltmp1809 # Offset: 15178
.Ltmp1632:
    00003b4f: 	leaq	DATAat0x2455f(%rip), %rsi
    00003b56: 	movl	$0x1, %edi
    00003b5b: 	xorl	%eax, %eax
    00003b5d: 	callq	__printf_chk@PLT # Offset: 15197
    00003b62: 	movq	0x140(%rsp), %rdx
    00003b6a: 	jmp	.Ltmp1810 # Offset: 15210
.Ltmp1630:
    00003b6f: 	movq	-0x8(%rdx), %rax
    00003b73: 	addq	$0x200, %rax
    00003b79: 	jmp	.Ltmp1811 # Offset: 15225
.Ltmp1621:
    00003b7e: 	leaq	DATAat0x2455f(%rip), %rsi
    00003b85: 	movl	$0x1, %edi
    00003b8a: 	xorl	%eax, %eax
    00003b8c: 	callq	__printf_chk@PLT # Offset: 15244
    00003b91: 	movq	0x140(%rsp), %rdx
    00003b99: 	jmp	.Ltmp1812 # Offset: 15257
.Ltmp1619:
    00003b9e: 	movq	-0x8(%rdx), %rax
    00003ba2: 	addq	$0x200, %rax
    00003ba8: 	jmp	.Ltmp1813 # Offset: 15272
.Ltmp1613:
    00003bad: 	leaq	DATAat0x2455f(%rip), %rsi
    00003bb4: 	movl	$0x1, %edi
    00003bb9: 	xorl	%eax, %eax
    00003bbb: 	callq	__printf_chk@PLT # Offset: 15291
    00003bc0: 	movq	0x140(%rsp), %rdx
    00003bc8: 	jmp	.Ltmp1814 # Offset: 15304
.Ltmp1611:
    00003bcd: 	movq	-0x8(%rdx), %rax
    00003bd1: 	addq	$0x200, %rax
    00003bd7: 	jmp	.Ltmp1815 # Offset: 15319
.Ltmp1605:
    00003bdc: 	leaq	DATAat0x2455f(%rip), %rsi
    00003be3: 	movl	$0x1, %edi
    00003be8: 	xorl	%eax, %eax
    00003bea: 	callq	__printf_chk@PLT # Offset: 15338
    00003bef: 	movq	0x140(%rsp), %rdx
    00003bf7: 	jmp	.Ltmp1816 # Offset: 15351
.Ltmp1603:
    00003bfc: 	movq	-0x8(%rdx), %rax
    00003c00: 	addq	$0x200, %rax
    00003c06: 	jmp	.Ltmp1817 # Offset: 15366
.Ltmp1594:
    00003c0b: 	leaq	DATAat0x2455f(%rip), %rsi
    00003c12: 	movl	$0x1, %edi
    00003c17: 	xorl	%eax, %eax
    00003c19: 	callq	__printf_chk@PLT # Offset: 15385
    00003c1e: 	movq	0x140(%rsp), %rdx
    00003c26: 	jmp	.Ltmp1818 # Offset: 15398
.Ltmp1660:
    00003c2b: 	movq	-0x8(%rdx), %rax
    00003c2f: 	addq	$0x200, %rax
    00003c35: 	jmp	.Ltmp1819 # Offset: 15413
.Ltmp1654:
    00003c3a: 	leaq	DATAat0x2455f(%rip), %rsi
    00003c41: 	movl	$0x1, %edi
    00003c46: 	xorl	%eax, %eax
    00003c48: 	callq	__printf_chk@PLT # Offset: 15432
    00003c4d: 	movq	0x140(%rsp), %rdx
    00003c55: 	jmp	.Ltmp1820 # Offset: 15445
.Ltmp1652:
    00003c5a: 	movq	-0x8(%rdx), %rax
    00003c5e: 	addq	$0x200, %rax
    00003c64: 	jmp	.Ltmp1821 # Offset: 15460
.Ltmp1648:
    00003c69: 	leaq	DATAat0x2455f(%rip), %rsi
    00003c70: 	movl	$0x1, %edi
    00003c75: 	xorl	%eax, %eax
    00003c77: 	callq	__printf_chk@PLT # Offset: 15479
    00003c7c: 	movq	0x140(%rsp), %rdx
    00003c84: 	jmp	.Ltmp1822 # Offset: 15492
.Ltmp1646:
    00003c89: 	movq	-0x8(%rdx), %rax
    00003c8d: 	addq	$0x200, %rax
    00003c93: 	jmp	.Ltmp1823 # Offset: 15507
.Ltmp1664:
    00003c98: 	movq	0x90(%rsp), %rsi
    00003ca0: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00003ca7: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 15527
    00003cac: 	jmp	.Ltmp1824 # Offset: 15532
.Ltmp1662:
    00003cb1: 	leaq	DATAat0x2455f(%rip), %rsi
    00003cb8: 	movl	$0x1, %edi
    00003cbd: 	xorl	%eax, %eax
    00003cbf: 	callq	__printf_chk@PLT # Offset: 15551
    00003cc4: 	movq	0x140(%rsp), %rdx
    00003ccc: 	jmp	.Ltmp1825 # Offset: 15564
.Ltmp1668:
    00003cd1: 	testq	%r12, %r12
    00003cd4: 	je	.Ltmp1807 # Offset: 15572
    00003cda: 	jmp	.Ltmp1826 # Offset: 15578
    00003cdf: 	nop # Size: 1
.Ltmp1671:
    00003ce0: 	movq	-0x8(%rdx), %rax
    00003ce4: 	addq	$0x200, %rax
    00003cea: 	jmp	.Ltmp1827 # Offset: 15594
.Ltmp1677:
    00003cef: 	movq	-0x8(%rdx), %rax
    00003cf3: 	addq	$0x200, %rax
    00003cf9: 	jmp	.Ltmp1828 # Offset: 15609
.Ltmp1690:
    00003cfe: 	movq	-0x8(%rdx), %rax
    00003d02: 	addq	$0x200, %rax
    00003d08: 	jmp	.Ltmp1829 # Offset: 15624
.Ltmp1698:
    00003d0d: 	movq	-0x8(%rdx), %rax
    00003d11: 	addq	$0x200, %rax
    00003d17: 	jmp	.Ltmp1830 # Offset: 15639
.Ltmp1710:
    00003d1c: 	movq	-0x8(%rdx), %rax
    00003d20: 	addq	$0x200, %rax
    00003d26: 	jmp	.Ltmp1831 # Offset: 15654
    00003d2b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1717:
    00003d30: 	movl	0x70(%rsp), %eax
    00003d34: 	movl	%eax, 0x28(%rsp)
    00003d38: 	jmp	.Ltmp1832 # Offset: 15672
.Ltmp1727:
    00003d3d: 	movq	-0x8(%rdx), %rax
    00003d41: 	addq	$0x200, %rax
    00003d47: 	jmp	.Ltmp1833 # Offset: 15687
.Ltmp1738:
    00003d4c: 	movq	-0x8(%rdx), %rax
    00003d50: 	addq	$0x200, %rax
    00003d56: 	jmp	.Ltmp1834 # Offset: 15702
.Ltmp1746:
    00003d5b: 	movq	-0x8(%rdx), %rax
    00003d5f: 	addq	$0x200, %rax
    00003d65: 	jmp	.Ltmp1835 # Offset: 15717
    00003d6a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1760:
    00003d70: 	movl	$0x0, 0x28(%rsp)
    00003d78: 	movl	0x58(%rsp), %edx
    00003d7c: 	xorl	%r12d, %r12d
    00003d7f: 	xorl	%eax, %eax
    00003d81: 	jmp	.Ltmp1836 # Offset: 15745
.Ltmp1754:
    00003d86: 	movq	-0x8(%rdx), %rax
    00003d8a: 	addq	$0x200, %rax
    00003d90: 	jmp	.Ltmp1837 # Offset: 15760
    00003d95: 	nopl	(%rax) # Size: 3
.Ltmp1775:
    00003d98: 	movl	$0x0, 0x48(%rsp)
    00003da0: 	movl	0x78(%rsp), %edx
    00003da4: 	xorl	%r12d, %r12d
    00003da7: 	xorl	%r13d, %r13d
    00003daa: 	movl	$0x0, 0x50(%rsp)
    00003db2: 	movl	$0x0, 0x28(%rsp)
    00003dba: 	movl	$0x0, 0x58(%rsp)
    00003dc2: 	movl	$0x0, 0x60(%rsp)
    00003dca: 	jmp	.Ltmp1838 # Offset: 15818
.Ltmp1769:
    00003dcf: 	movq	-0x8(%rdx), %rax
    00003dd3: 	addq	$0x200, %rax
    00003dd9: 	jmp	.Ltmp1839 # Offset: 15833
.Ltmp1797:
    00003dde: 	movq	-0x8(%rdx), %rax
    00003de2: 	addq	$0x200, %rax
    00003de8: 	jmp	.Ltmp1840 # Offset: 15848
.Ltmp1784:
    00003ded: 	movq	-0x8(%rdx), %rax
    00003df1: 	addq	$0x200, %rax
    00003df7: 	jmp	.Ltmp1841 # Offset: 15863
.Ltmp1666:
    00003dfc: 	leaq	DATAat0x24520(%rip), %rdi
    00003e03: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 15875
.Ltmp1803:
    00003e08: 	callq	__stack_chk_fail@PLT # Offset: 15880
    00003e0d: 	endbr64
.Ltmp1846:
    00003e11: 	movq	%rax, %rbx
    00003e14: 	jmp	.Ltmp1842 # Offset: 15892
    00003e19: 	endbr64
    00003e1d: 	movq	%rax, %rbx
    00003e20: 	movq	0x140(%rsp), %rdi
    00003e28: 	leaq	0x150(%rsp), %rax
    00003e30: 	cmpq	%rax, %rdi
    00003e33: 	je	.Ltmp1843 # Offset: 15923
.Ltmp1845:
    00003e35: 	movq	0x150(%rsp), %rax
    00003e3d: 	leaq	0x1(%rax), %rsi
    00003e41: 	callq	_ZdlPvm@PLT # Offset: 15937
.Ltmp1843:
    00003e46: 	movq	(%rsp), %rdi
    00003e4a: 	movl	$0x4, %esi
    00003e4f: 	movq	%rbx, %rbp
    00003e52: 	callq	_ZdlPvm@PLT # Offset: 15954
.Ltmp1848:
    00003e57: 	movq	0x10(%rsp), %rdi
    00003e5c: 	movl	$0x4, %esi
    00003e61: 	callq	_ZdlPvm@PLT # Offset: 15969
.Ltmp1849:
    00003e66: 	movl	$0x4, %esi
    00003e6b: 	movq	%r13, %rdi
    00003e6e: 	callq	_ZdlPvm@PLT # Offset: 15982
.Ltmp1847:
    00003e73: 	movq	0x120(%rsp), %rdi
    00003e7b: 	cmpq	0xf0(%rsp), %rdi
    00003e83: 	je	.Ltmp1844 # Offset: 16003
    00003e85: 	movq	0x130(%rsp), %rax
    00003e8d: 	leaq	0x1(%rax), %rsi
    00003e91: 	callq	_ZdlPvm@PLT # Offset: 16017
.Ltmp1844:
    00003e96: 	movq	%rbp, %rdi
    00003e99: 	callq	_Unwind_Resume@PLT # Offset: 16025
.Ltmp1842:
    00003e9e: 	movq	0x140(%rsp), %rdi
    00003ea6: 	cmpq	0x30(%rsp), %rdi
    00003eab: 	jne	.Ltmp1845 # Offset: 16043
    00003ead: 	jmp	.Ltmp1843 # Offset: 16045
    00003eaf: 	endbr64
    00003eb3: 	jmp	.Ltmp1846 # Offset: 16051
    00003eb8: 	endbr64
    00003ebc: 	jmp	.Ltmp1846 # Offset: 16060
    00003ec1: 	endbr64
    00003ec5: 	jmp	.Ltmp1846 # Offset: 16069
    00003eca: 	endbr64
    00003ece: 	jmp	.Ltmp1846 # Offset: 16078
    00003ed3: 	endbr64
    00003ed7: 	jmp	.Ltmp1846 # Offset: 16087
    00003edc: 	endbr64
    00003ee0: 	jmp	.Ltmp1846 # Offset: 16096
    00003ee5: 	endbr64
    00003ee9: 	jmp	.Ltmp1846 # Offset: 16105
    00003eee: 	endbr64
    00003ef2: 	jmp	.Ltmp1846 # Offset: 16114
    00003ef7: 	endbr64
    00003efb: 	jmp	.Ltmp1846 # Offset: 16123
    00003f00: 	endbr64
    00003f04: 	jmp	.Ltmp1846 # Offset: 16132
    00003f09: 	endbr64
    00003f0d: 	jmp	.Ltmp1846 # Offset: 16141
    00003f12: 	endbr64
    00003f16: 	jmp	.Ltmp1846 # Offset: 16150
    00003f1b: 	endbr64
    00003f1f: 	jmp	.Ltmp1846 # Offset: 16159
    00003f24: 	endbr64
    00003f28: 	jmp	.Ltmp1846 # Offset: 16168
    00003f2d: 	endbr64
    00003f31: 	jmp	.Ltmp1846 # Offset: 16177
    00003f36: 	endbr64
    00003f3a: 	movq	%rax, %rbp
    00003f3d: 	jmp	.Ltmp1847 # Offset: 16189
    00003f42: 	endbr64
    00003f46: 	jmp	.Ltmp1846 # Offset: 16198
    00003f4b: 	endbr64
    00003f4f: 	jmp	.Ltmp1846 # Offset: 16207
    00003f54: 	endbr64
    00003f58: 	jmp	.Ltmp1846 # Offset: 16216
    00003f5d: 	endbr64
    00003f61: 	jmp	.Ltmp1846 # Offset: 16225
    00003f66: 	endbr64
    00003f6a: 	movq	%rax, %rbx
    00003f6d: 	jmp	.Ltmp1843 # Offset: 16237
    00003f72: 	endbr64
    00003f76: 	movq	%rax, %rbp
    00003f79: 	jmp	.Ltmp1848 # Offset: 16249
    00003f7e: 	endbr64
    00003f82: 	movq	%rax, %rbp
    00003f85: 	jmp	.Ltmp1849 # Offset: 16261
    00003f8a: 	endbr64
    00003f8e: 	jmp	.Ltmp1846 # Offset: 16270
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIiEvv"

Binary Function "_fini" after disassembly {
  Number      : 104
  State       : disassembled
  Address     : 0x23994
  Size        : 0xd
  MaxSize     : 0xd
  Offset      : 0x23994
  Section     : .fini
  Orc Section : .local.text._fini
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0103:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	addq	$0x8, %rsp
    0000000c: 	retq # Offset: 12
DWARF CFI Instructions:
    <empty>
End of Function "_fini"

BOLT-INFO: 0 out of 105 functions in the binary (0.0%) have non-empty execution profile
BOLT-INFO: 1351 instructions were shortened
BOLT-INFO: removed 95 empty blocks
BOLT-INFO: patched build-id (flipped last bit)
BOLT: 100 out of 133 functions were overwritten.
BOLT-INFO: rewriting .eh_frame_hdr in-place
BOLT-INFO: setting _end to 0x2027d8
