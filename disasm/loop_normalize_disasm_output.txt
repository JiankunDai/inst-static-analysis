BOLT-INFO: shared object or position-independent executable detected
BOLT-INFO: Target architecture: x86_64
BOLT-INFO: BOLT version: <unknown>
BOLT-INFO: first alloc address is 0x0
BOLT-INFO: creating new program header table at address 0x200000, offset 0x200000
BOLT-INFO: enabling lite mode
BOLT-WARNING: split function detected on input : _GLOBAL__sub_I_results.cold
Binary Function "_init" after disassembly {
  Number      : 1
  State       : disassembled
  Address     : 0x1000
  Size        : 0x1b
  MaxSize     : 0x1b
  Offset      : 0x1000
  Section     : .init
  Orc Section : .local.text._init
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB00:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	movq	DATAat0x16ff0(%rip), %rax
    0000000f: 	testq	%rax, %rax
    00000012: 	je	.Ltmp0 # Offset: 18
    00000014: 	callq	*%rax # Offset: 20
.Ltmp0:
    00000016: 	addq	$0x8, %rsp
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_init"

Binary Function "main" after disassembly {
  Number      : 3
  State       : disassembled
  Address     : 0x13f0
  Size        : 0xdb
  MaxSize     : 0xe0
  Offset      : 0x13f0
  Section     : .text
  Orc Section : .local.text.main
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB02:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	pushq	%rbp
    0000000b: 	pushq	%rbx
    0000000c: 	testl	%edi, %edi
    0000000e: 	jle	.Ltmp1 # Offset: 14
    00000014: 	leal	-0x1(%rdi), %eax
    00000017: 	movl	%edi, %r13d
    0000001a: 	movq	%rsi, %r14
    0000001d: 	movq	%rsi, %rbx
    00000020: 	leaq	0x8(%rsi,%rax,8), %r12
    00000025: 	leaq	DATAat0x11042(%rip), %rbp
    0000002c: 	nopl	(%rax) # Size: 4
.Ltmp2:
    00000030: 	movq	(%rbx), %rdx
    00000033: 	movq	%rbp, %rsi
    00000036: 	movl	$0x1, %edi
    0000003b: 	xorl	%eax, %eax
    0000003d: 	addq	$0x8, %rbx
    00000041: 	callq	__printf_chk@PLT # Offset: 65
    00000046: 	cmpq	%rbx, %r12
    00000049: 	jne	.Ltmp2 # Offset: 73
    0000004b: 	xorl	%eax, %eax
    0000004d: 	leaq	DATAat0x11028(%rip), %rsi
    00000054: 	movl	$0x1, %edi
    00000059: 	callq	__printf_chk@PLT # Offset: 89
    0000005e: 	cmpl	$0x1, %r13d
    00000062: 	jg	.Ltmp3 # Offset: 98
.Ltmp6:
    00000064: 	movl	init_value(%rip), %eax
    0000006a: 	cmpl	$0x7f, %eax
    0000006d: 	jg	.Ltmp4 # Offset: 109
    0000006f: 	testl	%eax, %eax
    00000071: 	jne	.Ltmp5 # Offset: 113
.Ltmp4:
    00000073: 	movl	$0x2a, init_value(%rip)
.Ltmp5:
    0000007d: 	callq	_Z9TestLoopsIiEvv # Offset: 125
    00000082: 	callq	_Z9TestLoopsIhEvv # Offset: 130
    00000087: 	popq	%rbx
    00000088: 	xorl	%eax, %eax
    0000008a: 	popq	%rbp
    0000008b: 	popq	%r12
    0000008d: 	popq	%r13
    0000008f: 	popq	%r14
    00000091: 	retq # Offset: 145
.Ltmp3:
    00000092: 	movq	0x8(%r14), %rdi
    00000096: 	movl	$0xa, %edx
    0000009b: 	xorl	%esi, %esi
    0000009d: 	callq	strtol@PLT # Offset: 157
    000000a2: 	movl	%eax, iterations(%rip)
    000000a8: 	cmpl	$0x2, %r13d
    000000ac: 	jle	.Ltmp6 # Offset: 172
    000000ae: 	movq	0x10(%r14), %rdi
    000000b2: 	movl	$0xa, %edx
    000000b7: 	xorl	%esi, %esi
    000000b9: 	callq	strtol@PLT # Offset: 185
    000000be: 	movl	%eax, init_value(%rip)
    000000c4: 	jmp	.Ltmp6 # Offset: 196
.Ltmp1:
    000000c6: 	leaq	DATAat0x11028(%rip), %rsi
    000000cd: 	movl	$0x1, %edi
    000000d2: 	xorl	%eax, %eax
    000000d4: 	callq	__printf_chk@PLT # Offset: 212
    000000d9: 	jmp	.Ltmp6 # Offset: 217
DWARF CFI Instructions:
    <empty>
End of Function "main"

Binary Function "_start" after disassembly {
  Number      : 5
  State       : disassembled
  Address     : 0x15b0
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x15b0
  Section     : .text
  Orc Section : .local.text._start
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB04:
    00000000: 	endbr64
    00000004: 	xorl	%ebp, %ebp
    00000006: 	movq	%rdx, %r9
    00000009: 	popq	%rsi
    0000000a: 	movq	%rsp, %rdx
    0000000d: 	andq	$-0x10, %rsp
    00000011: 	pushq	%rax
    00000012: 	pushq	%rsp
    00000013: 	xorl	%r8d, %r8d
    00000016: 	xorl	%ecx, %ecx
    00000018: 	leaq	main(%rip), %rdi
    0000001f: 	callq	*DATAat0x16fe0(%rip) # Offset: 31
    00000025: 	hlt
DWARF CFI Instructions:
    <empty>
End of Function "_start"

Binary Function "deregister_tm_clones/1(*2)" after disassembly {
  All names   : deregister_tm_clones/1
                deregister_tm_clones/crtstuff.c/1
  Number      : 6
  State       : disassembled
  Address     : 0x15e0
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x15e0
  Section     : .text
  Orc Section : .local.text.deregister_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB05:
    00000000: 	leaq	"completed.0/1"(%rip), %rdi
    00000007: 	leaq	"completed.0/1"(%rip), %rax
    0000000e: 	cmpq	%rdi, %rax
    00000011: 	je	.Ltmp7 # Offset: 17
    00000013: 	movq	DATAat0x16fe8(%rip), %rax
    0000001a: 	testq	%rax, %rax
    0000001d: 	je	.Ltmp7 # Offset: 29
    0000001f: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 31
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp7:
    00000028: 	retq # Offset: 40
    00000029: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "deregister_tm_clones/1(*2)"

Binary Function "register_tm_clones/1(*2)" after disassembly {
  All names   : register_tm_clones/1
                register_tm_clones/crtstuff.c/1
  Number      : 7
  State       : disassembled
  Address     : 0x1610
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x1610
  Section     : .text
  Orc Section : .local.text.register_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB06:
    00000000: 	leaq	"completed.0/1"(%rip), %rdi
    00000007: 	leaq	"completed.0/1"(%rip), %rsi
    0000000e: 	subq	%rdi, %rsi
    00000011: 	movq	%rsi, %rax
    00000014: 	shrq	$0x3f, %rsi
    00000018: 	sarq	$0x3, %rax
    0000001c: 	addq	%rax, %rsi
    0000001f: 	sarq	%rsi
    00000022: 	je	.Ltmp8 # Offset: 34
    00000024: 	movq	DATAat0x16ff8(%rip), %rax
    0000002b: 	testq	%rax, %rax
    0000002e: 	je	.Ltmp8 # Offset: 46
    00000030: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 48
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp8:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "register_tm_clones/1(*2)"

Binary Function "__do_global_dtors_aux/1(*2)" after disassembly {
  All names   : __do_global_dtors_aux/1
                __do_global_dtors_aux/crtstuff.c/1
  Number      : 8
  State       : disassembled
  Address     : 0x1650
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x1650
  Section     : .text
  Orc Section : .local.text.__do_global_dtors_aux/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB07:
    00000000: 	endbr64
    00000004: 	cmpb	$0x0, "completed.0/1"(%rip)
    0000000b: 	jne	.Ltmp9 # Offset: 11
    0000000d: 	pushq	%rbp
    0000000e: 	cmpq	$0x0, __cxa_finalize@GOT(%rip)
    00000016: 	movq	%rsp, %rbp
    00000019: 	je	.Ltmp10 # Offset: 25
    0000001b: 	movq	__dso_handle(%rip), %rdi
    00000022: 	callq	__cxa_finalize@PLT # Offset: 34
.Ltmp10:
    00000027: 	callq	"deregister_tm_clones/1" # Offset: 39
    0000002c: 	movb	$0x1, "completed.0/1"(%rip)
    00000033: 	popq	%rbp
    00000034: 	retq # Offset: 52
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp9:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "__do_global_dtors_aux/1(*2)"

Binary Function "frame_dummy/1(*2)" after disassembly {
  All names   : frame_dummy/1
                frame_dummy/crtstuff.c/1
  Number      : 9
  State       : disassembled
  Address     : 0x1690
  Size        : 0x10
  MaxSize     : 0x10
  Offset      : 0x1690
  Section     : .text
  Orc Section : .local.text.frame_dummy/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB08:
    00000000: 	endbr64
    00000004: 	jmp	"register_tm_clones/1" # TAILCALL  # Offset: 4
    00000009: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "frame_dummy/1(*2)"

Binary Function "_Z9summarizePKciiii.constprop.0/1(*2)" after disassembly {
  All names   : _Z9summarizePKciiii.constprop.0/1
                _Z9summarizePKciiii.constprop.0/loop_normalize.cpp/1
  Number      : 10
  State       : disassembled
  Address     : 0x16a0
  Size        : 0x25e
  MaxSize     : 0x260
  Offset      : 0x16a0
  Section     : .text
  Orc Section : .local.text._Z9summarizePKciiii.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB09:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	subq	$0x28, %rsp
    0000000e: 	movl	current_test(%rip), %eax
    00000014: 	testl	%eax, %eax
    00000016: 	je	.Ltmp11 # Offset: 22
    0000001c: 	movq	%rdi, %r12
    0000001f: 	movl	%esi, %r13d
    00000022: 	jle	.Ltmp12 # Offset: 34
    00000028: 	movq	results(%rip), %rdx
    0000002f: 	subl	$0x1, %eax
    00000032: 	movl	$0xc, %ebx
    00000037: 	shlq	$0x4, %rax
    0000003b: 	leaq	0x8(%rdx), %r14
    0000003f: 	leaq	0x18(%rdx,%rax), %rbp
    00000044: 	nopl	(%rax) # Size: 4
.Ltmp13:
    00000048: 	movq	(%r14), %rdi
    0000004b: 	callq	strlen@PLT # Offset: 75
    00000050: 	cmpl	%eax, %ebx
    00000052: 	cmovll	%eax, %ebx
    00000055: 	addq	$0x10, %r14
    00000059: 	cmpq	%r14, %rbp
    0000005c: 	jne	.Ltmp13 # Offset: 92
    0000005e: 	leal	-0xc(%rbx), %edx
.Ltmp23:
    00000061: 	leaq	DATAat0x11044(%rip), %r14
    00000068: 	leaq	DATAat0x11048(%rip), %rsi
    0000006f: 	movl	$0x1, %edi
    00000074: 	xorl	%eax, %eax
    00000076: 	movq	%r14, %rcx
    00000079: 	callq	__printf_chk@PLT # Offset: 121
    0000007e: 	movq	%r14, %rcx
    00000081: 	movl	%ebx, %edx
    00000083: 	movl	$0x1, %edi
    00000088: 	leaq	DATAat0x11088(%rip), %rsi
    0000008f: 	xorl	%eax, %eax
    00000091: 	callq	__printf_chk@PLT # Offset: 145
    00000096: 	movl	current_test(%rip), %eax
    0000009c: 	testl	%eax, %eax
    0000009e: 	jle	.Ltmp14 # Offset: 158
    000000a4: 	pxor	%xmm0, %xmm0
    000000a8: 	movsd	DATAat0x11e90(%rip), %xmm3
    000000b0: 	leaq	DATAat0x110b8(%rip), %rbp
    000000b7: 	cvtsi2sd	%r13d, %xmm0
    000000bc: 	mulsd	DATAat0x11e80(%rip), %xmm0
    000000c4: 	xorl	%r13d, %r13d
    000000c7: 	divsd	DATAat0x11e88(%rip), %xmm0
    000000cf: 	movsd	%xmm0, 0x18(%rsp)
    000000d5: 	jmp	.Ltmp15 # Offset: 213
    000000da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp19:
    000000e0: 	comisd	%xmm0, %xmm3
    000000e4: 	ja	.Ltmp16 # Offset: 228
    000000ea: 	movq	DATAat0x11e70(%rip), %rdi
    000000f1: 	movq	%rdi, %xmm2
.Ltmp20:
    000000f6: 	comisd	%xmm0, %xmm3
    000000fa: 	movq	DATAat0x11e70(%rip), %rsi
    00000101: 	movq	%rsi, %xmm1
    00000106: 	ja	.Ltmp17 # Offset: 262
    00000108: 	movsd	0x18(%rsp), %xmm1
    0000010e: 	divsd	%xmm0, %xmm1
.Ltmp17:
    00000112: 	movq	0x8(%rax), %r14
    00000116: 	movsd	%xmm0, 0x10(%rsp)
    0000011c: 	addq	$0x1, %r13
    00000120: 	movsd	%xmm1, 0x8(%rsp)
    00000126: 	movq	%r14, %rdi
    00000129: 	movsd	%xmm2, (%rsp)
    0000012e: 	callq	strlen@PLT # Offset: 302
    00000133: 	movsd	(%rsp), %xmm2
    00000138: 	movl	%ebx, %ecx
    0000013a: 	movq	%rbp, %rsi
    0000013d: 	movsd	0x8(%rsp), %xmm1
    00000143: 	subl	%eax, %ecx
    00000145: 	movq	%r14, %r9
    00000148: 	movl	%r15d, %edx
    0000014b: 	movsd	0x10(%rsp), %xmm0
    00000151: 	movl	$0x1, %edi
    00000156: 	movl	$0x3, %eax
    0000015b: 	leaq	DATAat0x11029(%rip), %r8
    00000162: 	callq	__printf_chk@PLT # Offset: 354
    00000167: 	movl	current_test(%rip), %eax
    0000016d: 	movq	DATAat0x11e90(%rip), %rsi
    00000174: 	cmpl	%r13d, %eax
    00000177: 	movq	%rsi, %xmm3
    0000017c: 	jle	.Ltmp18 # Offset: 380
.Ltmp15:
    0000017e: 	movq	results(%rip), %rax
    00000185: 	movq	%r13, %rdx
    00000188: 	movl	%r13d, %r15d
    0000018b: 	shlq	$0x4, %rdx
    0000018f: 	movsd	(%rax), %xmm1
    00000193: 	addq	%rdx, %rax
    00000196: 	movsd	(%rax), %xmm0
    0000019a: 	comisd	%xmm1, %xmm3
    0000019e: 	ja	.Ltmp19 # Offset: 414
    000001a4: 	movapd	%xmm0, %xmm2
    000001a8: 	divsd	%xmm1, %xmm2
    000001ac: 	jmp	.Ltmp20 # Offset: 428
    000001b1: 	nopl	(%rax) # Size: 7
.Ltmp16:
    000001b8: 	movq	DATAat0x11e78(%rip), %rsi
    000001bf: 	movq	DATAat0x11e70(%rip), %rdi
    000001c6: 	movq	%rsi, %xmm2
    000001cb: 	movq	%rdi, %xmm1
    000001d0: 	jmp	.Ltmp17 # Offset: 464
    000001d5: 	nopl	(%rax) # Size: 3
.Ltmp18:
    000001d8: 	testl	%eax, %eax
    000001da: 	jle	.Ltmp14 # Offset: 474
    000001dc: 	movq	results(%rip), %rdx
    000001e3: 	leal	-0x1(%rax), %ecx
    000001e6: 	pxor	%xmm0, %xmm0
    000001ea: 	shlq	$0x4, %rcx
    000001ee: 	leaq	0x10(%rdx), %rax
    000001f2: 	addq	%rax, %rcx
    000001f5: 	jmp	.Ltmp21 # Offset: 501
    000001f7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp22:
    00000200: 	addq	$0x10, %rax
.Ltmp21:
    00000204: 	addsd	(%rdx), %xmm0
    00000208: 	movq	%rax, %rdx
    0000020b: 	cmpq	%rax, %rcx
    0000020e: 	jne	.Ltmp22 # Offset: 526
.Ltmp24:
    00000210: 	movq	%r12, %rdx
    00000213: 	movl	$0x1, %edi
    00000218: 	movl	$0x1, %eax
    0000021d: 	leaq	DATAat0x110e8(%rip), %rsi
    00000224: 	callq	__printf_chk@PLT # Offset: 548
    00000229: 	movl	$0x0, current_test(%rip)
.Ltmp11:
    00000233: 	addq	$0x28, %rsp
    00000237: 	popq	%rbx
    00000238: 	popq	%rbp
    00000239: 	popq	%r12
    0000023b: 	popq	%r13
    0000023d: 	popq	%r14
    0000023f: 	popq	%r15
    00000241: 	retq # Offset: 577
    00000242: 	nopw	(%rax,%rax) # Size: 6
.Ltmp12:
    00000248: 	xorl	%edx, %edx
    0000024a: 	movl	$0xc, %ebx
    0000024f: 	jmp	.Ltmp23 # Offset: 591
    00000254: 	nopl	(%rax) # Size: 4
.Ltmp14:
    00000258: 	pxor	%xmm0, %xmm0
    0000025c: 	jmp	.Ltmp24 # Offset: 604
DWARF CFI Instructions:
    <empty>
End of Function "_Z9summarizePKciiii.constprop.0/1(*2)"

Binary Function "_Z13record_resultdPKc" after disassembly {
  Number      : 11
  State       : disassembled
  Address     : 0x1900
  Size        : 0xa0
  MaxSize     : 0xa0
  Offset      : 0x1900
  Section     : .text
  Orc Section : .local.text._Z13record_resultdPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB010:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %rbx
    00000008: 	subq	$0x10, %rsp
    0000000c: 	movq	results(%rip), %rdi
    00000013: 	movl	allocated_results(%rip), %esi
    00000019: 	testq	%rdi, %rdi
    0000001c: 	je	.Ltmp25 # Offset: 28
    0000001e: 	movl	current_test(%rip), %eax
    00000024: 	cmpl	%esi, %eax
    00000026: 	jl	.Ltmp26 # Offset: 38
.Ltmp25:
    00000028: 	addl	$0xa, %esi
    0000002b: 	movsd	%xmm0, 0x8(%rsp)
    00000031: 	movl	%esi, allocated_results(%rip)
    00000037: 	movslq	%esi, %rsi
    0000003a: 	shlq	$0x4, %rsi
    0000003e: 	callq	realloc@PLT # Offset: 62
    00000043: 	movq	%rax, results(%rip)
    0000004a: 	movq	%rax, %rdi
    0000004d: 	testq	%rax, %rax
    00000050: 	je	.Ltmp27 # Offset: 80
    00000052: 	movl	current_test(%rip), %eax
    00000058: 	movsd	0x8(%rsp), %xmm0
.Ltmp26:
    0000005e: 	movslq	%eax, %rdx
    00000061: 	addl	$0x1, %eax
    00000064: 	shlq	$0x4, %rdx
    00000068: 	addq	%rdx, %rdi
    0000006b: 	movsd	%xmm0, (%rdi)
    0000006f: 	movq	%rbx, 0x8(%rdi)
    00000073: 	movl	%eax, current_test(%rip)
    00000079: 	addq	$0x10, %rsp
    0000007d: 	popq	%rbx
    0000007e: 	retq # Offset: 126
.Ltmp27:
    0000007f: 	movl	allocated_results(%rip), %edx
    00000085: 	movl	$0x1, %edi
    0000008a: 	leaq	DATAat0x11110(%rip), %rsi
    00000091: 	xorl	%eax, %eax
    00000093: 	callq	__printf_chk@PLT # Offset: 147
    00000098: 	orl	$-0x1, %edi
    0000009b: 	callq	exit@PLT # Offset: 155
DWARF CFI Instructions:
    <empty>
End of Function "_Z13record_resultdPKc"

Binary Function "_Z9summarizePKciiii" after disassembly {
  Number      : 12
  State       : disassembled
  Address     : 0x19a0
  Size        : 0x325
  MaxSize     : 0x330
  Offset      : 0x19a0
  Section     : .text
  Orc Section : .local.text._Z9summarizePKciiii
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB011:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x38, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movl	%r8d, 0x2c(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp28 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	movl	%esi, %r15d
    0000002b: 	movl	%edx, %r13d
    0000002e: 	jle	.Ltmp29 # Offset: 46
    00000034: 	movq	results(%rip), %rcx
    0000003b: 	subl	$0x1, %eax
    0000003e: 	movl	$0xc, %ebx
    00000043: 	shlq	$0x4, %rax
    00000047: 	leaq	0x8(%rcx), %r14
    0000004b: 	leaq	0x18(%rcx,%rax), %rbp
.Ltmp30:
    00000050: 	movq	(%r14), %rdi
    00000053: 	callq	strlen@PLT # Offset: 83
    00000058: 	cmpl	%eax, %ebx
    0000005a: 	cmovll	%eax, %ebx
    0000005d: 	addq	$0x10, %r14
    00000061: 	cmpq	%r14, %rbp
    00000064: 	jne	.Ltmp30 # Offset: 100
    00000066: 	leal	-0xc(%rbx), %edx
.Ltmp43:
    00000069: 	leaq	DATAat0x11044(%rip), %rbp
    00000070: 	leaq	DATAat0x11048(%rip), %rsi
    00000077: 	movl	$0x1, %edi
    0000007c: 	xorl	%eax, %eax
    0000007e: 	movq	%rbp, %rcx
    00000081: 	callq	__printf_chk@PLT # Offset: 129
    00000086: 	movl	%ebx, %edx
    00000088: 	movq	%rbp, %rcx
    0000008b: 	movl	$0x1, %edi
    00000090: 	leaq	DATAat0x11088(%rip), %rsi
    00000097: 	xorl	%eax, %eax
    00000099: 	callq	__printf_chk@PLT # Offset: 153
    0000009e: 	movl	current_test(%rip), %edx
    000000a4: 	testl	%edx, %edx
    000000a6: 	jle	.Ltmp31 # Offset: 166
    000000ac: 	pxor	%xmm0, %xmm0
    000000b0: 	pxor	%xmm1, %xmm1
    000000b4: 	xorl	%r14d, %r14d
    000000b7: 	movsd	DATAat0x11e90(%rip), %xmm3
    000000bf: 	cvtsi2sd	%r15d, %xmm0
    000000c4: 	leaq	DATAat0x110b8(%rip), %rbp
    000000cb: 	cvtsi2sd	%r13d, %xmm1
    000000d0: 	mulsd	%xmm1, %xmm0
    000000d4: 	divsd	DATAat0x11e88(%rip), %xmm0
    000000dc: 	movsd	%xmm0, 0x20(%rsp)
    000000e2: 	jmp	.Ltmp32 # Offset: 226
    000000e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp36:
    000000f0: 	comisd	%xmm0, %xmm3
    000000f4: 	ja	.Ltmp33 # Offset: 244
    000000fa: 	movq	DATAat0x11e70(%rip), %rdi
    00000101: 	movq	%rdi, %xmm2
.Ltmp37:
    00000106: 	comisd	%xmm0, %xmm3
    0000010a: 	movq	DATAat0x11e70(%rip), %rsi
    00000111: 	movq	%rsi, %xmm1
    00000116: 	ja	.Ltmp34 # Offset: 278
    00000118: 	movsd	0x20(%rsp), %xmm1
    0000011e: 	divsd	%xmm0, %xmm1
.Ltmp34:
    00000122: 	movq	0x8(%rax), %r15
    00000126: 	movsd	%xmm0, 0x18(%rsp)
    0000012c: 	addq	$0x1, %r14
    00000130: 	movsd	%xmm1, 0x10(%rsp)
    00000136: 	movq	%r15, %rdi
    00000139: 	movsd	%xmm2, 0x8(%rsp)
    0000013f: 	callq	strlen@PLT # Offset: 319
    00000144: 	movsd	0x8(%rsp), %xmm2
    0000014a: 	movl	%ebx, %ecx
    0000014c: 	movq	%r15, %r9
    0000014f: 	movsd	0x10(%rsp), %xmm1
    00000155: 	subl	%eax, %ecx
    00000157: 	movl	$0x1, %edi
    0000015c: 	movl	%r13d, %edx
    0000015f: 	movsd	0x18(%rsp), %xmm0
    00000165: 	leaq	DATAat0x11029(%rip), %r8
    0000016c: 	movq	%rbp, %rsi
    0000016f: 	movl	$0x3, %eax
    00000174: 	callq	__printf_chk@PLT # Offset: 372
    00000179: 	movl	current_test(%rip), %eax
    0000017f: 	movq	DATAat0x11e90(%rip), %rdi
    00000186: 	cmpl	%r14d, %eax
    00000189: 	movq	%rdi, %xmm3
    0000018e: 	jle	.Ltmp35 # Offset: 398
.Ltmp32:
    00000190: 	movq	results(%rip), %rax
    00000197: 	movq	%r14, %rcx
    0000019a: 	movl	%r14d, %r13d
    0000019d: 	shlq	$0x4, %rcx
    000001a1: 	movsd	(%rax), %xmm1
    000001a5: 	addq	%rcx, %rax
    000001a8: 	movsd	(%rax), %xmm0
    000001ac: 	comisd	%xmm1, %xmm3
    000001b0: 	ja	.Ltmp36 # Offset: 432
    000001b6: 	movapd	%xmm0, %xmm2
    000001ba: 	divsd	%xmm1, %xmm2
    000001be: 	jmp	.Ltmp37 # Offset: 446
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp33:
    000001c8: 	movq	DATAat0x11e78(%rip), %rsi
    000001cf: 	movq	DATAat0x11e70(%rip), %rdx
    000001d6: 	movq	%rsi, %xmm2
    000001db: 	movq	%rdx, %xmm1
    000001e0: 	jmp	.Ltmp34 # Offset: 480
    000001e5: 	nopl	(%rax) # Size: 3
.Ltmp35:
    000001e8: 	testl	%eax, %eax
    000001ea: 	jle	.Ltmp31 # Offset: 490
    000001f0: 	movq	results(%rip), %rdx
    000001f7: 	leal	-0x1(%rax), %ecx
    000001fa: 	pxor	%xmm1, %xmm1
    000001fe: 	shlq	$0x4, %rcx
    00000202: 	movapd	%xmm1, %xmm0
    00000206: 	leaq	0x10(%rdx), %rax
    0000020a: 	addq	%rax, %rcx
    0000020d: 	jmp	.Ltmp38 # Offset: 525
    0000020f: 	nop # Size: 1
.Ltmp39:
    00000210: 	addq	$0x10, %rax
.Ltmp38:
    00000214: 	addsd	(%rdx), %xmm0
    00000218: 	movq	%rax, %rdx
    0000021b: 	cmpq	%rax, %rcx
    0000021e: 	jne	.Ltmp39 # Offset: 542
.Ltmp44:
    00000220: 	movq	%r12, %rdx
    00000223: 	movl	$0x1, %edi
    00000228: 	movl	$0x1, %eax
    0000022d: 	movsd	%xmm1, 0x8(%rsp)
    00000233: 	leaq	DATAat0x110e8(%rip), %rsi
    0000023a: 	callq	__printf_chk@PLT # Offset: 570
    0000023f: 	movl	0x2c(%rsp), %eax
    00000243: 	movl	current_test(%rip), %ebp
    00000249: 	testl	%eax, %eax
    0000024b: 	je	.Ltmp40 # Offset: 587
    0000024d: 	cmpl	$0x1, %ebp
    00000250: 	jg	.Ltmp41 # Offset: 592
.Ltmp40:
    00000252: 	movl	$0x0, current_test(%rip)
.Ltmp28:
    0000025c: 	addq	$0x38, %rsp
    00000260: 	popq	%rbx
    00000261: 	popq	%rbp
    00000262: 	popq	%r12
    00000264: 	popq	%r13
    00000266: 	popq	%r14
    00000268: 	popq	%r15
    0000026a: 	retq # Offset: 618
    0000026b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp41:
    00000270: 	movq	results(%rip), %rbx
    00000277: 	movsd	0x8(%rsp), %xmm1
    0000027d: 	movl	$0x1, %r13d
    00000283: 	movsd	(%rbx), %xmm5
    00000287: 	addq	$0x10, %rbx
    0000028b: 	movsd	%xmm5, 0x10(%rsp)
    00000291: 	nopl	(%rax) # Size: 7
.Ltmp42:
    00000298: 	movsd	(%rbx), %xmm0
    0000029c: 	movsd	%xmm1, 0x8(%rsp)
    000002a2: 	addl	$0x1, %r13d
    000002a6: 	addq	$0x10, %rbx
    000002aa: 	divsd	0x10(%rsp), %xmm0
    000002b0: 	callq	log@PLT # Offset: 688
    000002b5: 	movsd	0x8(%rsp), %xmm1
    000002bb: 	addsd	%xmm0, %xmm1
    000002bf: 	cmpl	%r13d, %ebp
    000002c2: 	jg	.Ltmp42 # Offset: 706
    000002c4: 	subl	$0x1, %ebp
    000002c7: 	pxor	%xmm0, %xmm0
    000002cb: 	cvtsi2sd	%ebp, %xmm0
    000002cf: 	divsd	%xmm0, %xmm1
    000002d3: 	movapd	%xmm1, %xmm0
    000002d7: 	callq	exp@PLT # Offset: 727
    000002dc: 	movq	%r12, %rdx
    000002df: 	movl	$0x1, %edi
    000002e4: 	leaq	DATAat0x11004(%rip), %rsi
    000002eb: 	movl	$0x1, %eax
    000002f0: 	callq	__printf_chk@PLT # Offset: 752
    000002f5: 	movl	$0x0, current_test(%rip)
    000002ff: 	jmp	.Ltmp28 # Offset: 767
    00000304: 	nopl	(%rax) # Size: 4
.Ltmp29:
    00000308: 	xorl	%edx, %edx
    0000030a: 	movl	$0xc, %ebx
    0000030f: 	jmp	.Ltmp43 # Offset: 783
    00000314: 	nopl	(%rax) # Size: 4
.Ltmp31:
    00000318: 	pxor	%xmm1, %xmm1
    0000031c: 	movapd	%xmm1, %xmm0
    00000320: 	jmp	.Ltmp44 # Offset: 800
DWARF CFI Instructions:
    <empty>
End of Function "_Z9summarizePKciiii"

Binary Function "_Z17summarize_simplefP8_IO_FILEPKc" after disassembly {
  Number      : 13
  State       : disassembled
  Address     : 0x1cd0
  Size        : 0x1a6
  MaxSize     : 0x1b0
  Offset      : 0x1cd0
  Section     : .text
  Orc Section : .local.text._Z17summarize_simplefP8_IO_FILEPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB012:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x18, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movq	%rsi, 0x8(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp45 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	jle	.Ltmp46 # Offset: 40
    0000002e: 	movq	results(%rip), %rdx
    00000035: 	subl	$0x1, %eax
    00000038: 	movl	$0xc, %ebp
    0000003d: 	shlq	$0x4, %rax
    00000041: 	leaq	0x8(%rdx), %r13
    00000045: 	leaq	0x18(%rdx,%rax), %rbx
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp47:
    00000050: 	movq	(%r13), %rdi
    00000054: 	callq	strlen@PLT # Offset: 84
    00000059: 	cmpl	%eax, %ebp
    0000005b: 	cmovll	%eax, %ebp
    0000005e: 	addq	$0x10, %r13
    00000062: 	cmpq	%r13, %rbx
    00000065: 	jne	.Ltmp47 # Offset: 101
    00000067: 	leal	-0xc(%rbp), %ecx
.Ltmp52:
    0000006a: 	leaq	DATAat0x11044(%rip), %r8
    00000071: 	movl	$0x1, %esi
    00000076: 	xorl	%eax, %eax
    00000078: 	xorl	%ebx, %ebx
    0000007a: 	leaq	DATAat0x11130(%rip), %rdx
    00000081: 	movq	%r12, %rdi
    00000084: 	leaq	DATAat0x1102a(%rip), %r14
    0000008b: 	callq	__fprintf_chk@PLT # Offset: 139
    00000090: 	movl	$0x1, %esi
    00000095: 	movl	%ebp, %ecx
    00000097: 	movq	%r12, %rdi
    0000009a: 	leaq	DATAat0x11044(%rip), %r8
    000000a1: 	leaq	DATAat0x11018(%rip), %rdx
    000000a8: 	xorl	%eax, %eax
    000000aa: 	callq	__fprintf_chk@PLT # Offset: 170
    000000af: 	movl	current_test(%rip), %esi
    000000b5: 	testl	%esi, %esi
    000000b7: 	jle	.Ltmp48 # Offset: 183
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp49:
    000000c0: 	movq	%rbx, %rdx
    000000c3: 	shlq	$0x4, %rdx
    000000c7: 	addq	results(%rip), %rdx
    000000ce: 	movq	0x8(%rdx), %r13
    000000d2: 	movq	%rdx, %r15
    000000d5: 	movq	%r13, %rdi
    000000d8: 	callq	strlen@PLT # Offset: 216
    000000dd: 	subq	$0x8, %rsp
    000000e1: 	movsd	(%r15), %xmm0
    000000e6: 	movl	%ebx, %ecx
    000000e8: 	pushq	%r13
    000000ea: 	movl	%ebp, %r8d
    000000ed: 	movq	%r14, %rdx
    000000f0: 	leaq	DATAat0x11029(%rip), %r9
    000000f7: 	subl	%eax, %r8d
    000000fa: 	movl	$0x1, %esi
    000000ff: 	movq	%r12, %rdi
    00000102: 	movl	$0x1, %eax
    00000107: 	addq	$0x1, %rbx
    0000010b: 	callq	__fprintf_chk@PLT # Offset: 267
    00000110: 	movl	current_test(%rip), %eax
    00000116: 	popq	%rdx
    00000117: 	popq	%rcx
    00000118: 	cmpl	%ebx, %eax
    0000011a: 	jg	.Ltmp49 # Offset: 282
    0000011c: 	testl	%eax, %eax
    0000011e: 	jle	.Ltmp48 # Offset: 286
    00000124: 	movq	results(%rip), %rdx
    0000012b: 	leal	-0x1(%rax), %ecx
    0000012e: 	pxor	%xmm0, %xmm0
    00000132: 	shlq	$0x4, %rcx
    00000136: 	leaq	0x10(%rdx), %rax
    0000013a: 	addq	%rax, %rcx
    0000013d: 	jmp	.Ltmp50 # Offset: 317
    0000013f: 	nop # Size: 1
.Ltmp51:
    00000140: 	addq	$0x10, %rax
.Ltmp50:
    00000144: 	addsd	(%rdx), %xmm0
    00000148: 	movq	%rax, %rdx
    0000014b: 	cmpq	%rax, %rcx
    0000014e: 	jne	.Ltmp51 # Offset: 334
.Ltmp53:
    00000150: 	movq	0x8(%rsp), %rcx
    00000155: 	movl	$0x1, %esi
    0000015a: 	movq	%r12, %rdi
    0000015d: 	movl	$0x1, %eax
    00000162: 	leaq	DATAat0x110e8(%rip), %rdx
    00000169: 	callq	__fprintf_chk@PLT # Offset: 361
    0000016e: 	movl	$0x0, current_test(%rip)
.Ltmp45:
    00000178: 	addq	$0x18, %rsp
    0000017c: 	popq	%rbx
    0000017d: 	popq	%rbp
    0000017e: 	popq	%r12
    00000180: 	popq	%r13
    00000182: 	popq	%r14
    00000184: 	popq	%r15
    00000186: 	retq # Offset: 390
    00000187: 	nopw	(%rax,%rax) # Size: 9
.Ltmp46:
    00000190: 	xorl	%ecx, %ecx
    00000192: 	movl	$0xc, %ebp
    00000197: 	jmp	.Ltmp52 # Offset: 407
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp48:
    000001a0: 	pxor	%xmm0, %xmm0
    000001a4: 	jmp	.Ltmp53 # Offset: 420
DWARF CFI Instructions:
    <empty>
End of Function "_Z17summarize_simplefP8_IO_FILEPKc"

Binary Function "_Z11start_timerv" after disassembly {
  Number      : 14
  State       : disassembled
  Address     : 0x1e80
  Size        : 0x19
  MaxSize     : 0x20
  Offset      : 0x1e80
  Section     : .text
  Orc Section : .local.text._Z11start_timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB013:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	movq	%rax, start_time(%rip)
    00000014: 	addq	$0x8, %rsp
    00000018: 	retq # Offset: 24
DWARF CFI Instructions:
    <empty>
End of Function "_Z11start_timerv"

Binary Function "_Z5timerv" after disassembly {
  Number      : 15
  State       : disassembled
  Address     : 0x1ea0
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x1ea0
  Section     : .text
  Orc Section : .local.text._Z5timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB014:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	pxor	%xmm0, %xmm0
    00000011: 	movq	%rax, end_time(%rip)
    00000018: 	subq	start_time(%rip), %rax
    0000001f: 	cvtsi2sd	%rax, %xmm0
    00000024: 	divsd	DATAat0x11e88(%rip), %xmm0
    0000002c: 	addq	$0x8, %rsp
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z5timerv"

Binary Function "_ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 16
  State       : disassembled
  Address     : 0x1ee0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x1ee0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB015:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f38, %edx
    00000017: 	movl	$0x746e6975, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 17
  State       : disassembled
  Address     : 0x1f10
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x1f10
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB016:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3631746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 18
  State       : disassembled
  Address     : 0x1f40
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x1f40
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB017:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3233746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 19
  State       : disassembled
  Address     : 0x1f70
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x1f70
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB018:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3436746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 20
  State       : disassembled
  Address     : 0x1fa0
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x1fa0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB019:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x38746e69, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x745f, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 21
  State       : disassembled
  Address     : 0x1fd0
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x1fd0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB020:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x38746e69, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x745f, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 22
  State       : disassembled
  Address     : 0x2000
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x2000
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB021:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f36, %edx
    00000017: 	movl	$0x31746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 23
  State       : disassembled
  Address     : 0x2030
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x2030
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB022:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f32, %edx
    00000017: 	movl	$0x33746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 24
  State       : disassembled
  Address     : 0x2060
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x2060
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB023:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f34, %edx
    00000017: 	movl	$0x36746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 25
  State       : disassembled
  Address     : 0x2090
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x2090
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB024:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x14(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x616f6c66, 0x10(%rdi)
    00000019: 	movq	$0x5, 0x8(%rdi)
    00000021: 	movb	$0x0, 0x15(%rdi)
    00000025: 	retq # Offset: 37
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 26
  State       : disassembled
  Address     : 0x20c0
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x20c0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB025:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x62756f64, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x656c, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 27
  State       : disassembled
  Address     : 0x20f0
  Size        : 0x36
  MaxSize     : 0x40
  Offset      : 0x20f0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB026:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x65, 0x1a(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x756f6420676e6f6c, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movl	$0x6c62, %edx
    00000021: 	movq	%rcx, 0x10(%rdi)
    00000025: 	movw	%dx, 0x18(%rdi)
    00000029: 	movq	$0xb, 0x8(%rdi)
    00000031: 	movb	$0x0, 0x1b(%rdi)
    00000035: 	retq # Offset: 53
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 28
  State       : disassembled
  Address     : 0x2130
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x2130
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB027:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f38746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 29
  State       : disassembled
  Address     : 0x2160
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x2160
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB028:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3631746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 30
  State       : disassembled
  Address     : 0x2190
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x2190
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB029:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3233746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 31
  State       : disassembled
  Address     : 0x21c0
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x21c0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB030:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3436746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 32
  State       : disassembled
  Address     : 0x21f0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x21f0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB031:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x745f, %edx
    00000017: 	movl	$0x38746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 33
  State       : disassembled
  Address     : 0x2220
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x2220
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB032:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3631746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 34
  State       : disassembled
  Address     : 0x2250
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x2250
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB033:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3233746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 35
  State       : disassembled
  Address     : 0x2280
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x2280
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB034:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3436746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 36
  State       : disassembled
  Address     : 0x22b0
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x22b0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB035:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x616f6c66, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x2a74, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 37
  State       : disassembled
  Address     : 0x22e0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x22e0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB036:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x656c, %edx
    00000017: 	movl	$0x62756f64, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 38
  State       : disassembled
  Address     : 0x2310
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x2310
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB037:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x0, 0x1c(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x756f6420676e6f6c, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movl	$0x2a656c62, 0x18(%rdi)
    00000027: 	movq	$0xc, 0x8(%rdi)
    0000002f: 	retq # Offset: 47
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_Z18count_half_for_optIiEmPT_m" after disassembly {
  Number      : 39
  State       : disassembled
  Address     : 0x2340
  Size        : 0xb
  MaxSize     : 0x10
  Offset      : 0x2340
  Section     : .text
  Orc Section : .local.text._Z18count_half_for_optIiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB038:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	shrq	%rax
    0000000a: 	retq # Offset: 10
DWARF CFI Instructions:
    <empty>
End of Function "_Z18count_half_for_optIiEmPT_m"

Binary Function "_Z15count_half_optAIiEmPT_m" after disassembly {
  Number      : 40
  State       : disassembled
  Address     : 0x2350
  Size        : 0xb
  MaxSize     : 0x10
  Offset      : 0x2350
  Section     : .text
  Orc Section : .local.text._Z15count_half_optAIiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB039:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	shrq	%rax
    0000000a: 	retq # Offset: 10
DWARF CFI Instructions:
    <empty>
End of Function "_Z15count_half_optAIiEmPT_m"

Binary Function "_Z26count_half_for_uncountableIiEmPT_m" after disassembly {
  Number      : 41
  State       : disassembled
  Address     : 0x2360
  Size        : 0x21
  MaxSize     : 0x30
  Offset      : 0x2360
  Section     : .text
  Orc Section : .local.text._Z26count_half_for_uncountableIiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB040:
    00000000: 	endbr64
    00000004: 	movl	(%rdi), %ecx
    00000006: 	xorl	%eax, %eax
    00000008: 	testl	%ecx, %ecx
    0000000a: 	je	.Ltmp54 # Offset: 10
    0000000c: 	nopl	(%rax) # Size: 4
.Ltmp55:
    00000010: 	addq	$0x1, %rax
    00000014: 	movl	(%rdi,%rax,4), %edx
    00000017: 	testl	%edx, %edx
    00000019: 	jne	.Ltmp55 # Offset: 25
    0000001b: 	retq # Offset: 27
    0000001c: 	nopl	(%rax) # Size: 4
.Ltmp54:
    00000020: 	retq # Offset: 32
DWARF CFI Instructions:
    <empty>
End of Function "_Z26count_half_for_uncountableIiEmPT_m"

Binary Function "_Z23count_half_for_pointer1IiEmPT_m" after disassembly {
  Number      : 42
  State       : disassembled
  Address     : 0x2390
  Size        : 0x23
  MaxSize     : 0x30
  Offset      : 0x2390
  Section     : .text
  Orc Section : .local.text._Z23count_half_for_pointer1IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB041:
    00000000: 	endbr64
    00000004: 	shlq	$0x2, %rsi
    00000008: 	leaq	-0x4(%rdi,%rsi), %rax
    0000000d: 	cmpq	%rax, %rdi
    00000010: 	jae	.Ltmp56 # Offset: 16
    00000012: 	leaq	-0x5(%rsi), %rax
    00000016: 	shrq	$0x3, %rax
    0000001a: 	leaq	0x1(%rax), %rax
    0000001e: 	retq # Offset: 30
    0000001f: 	nop # Size: 1
.Ltmp56:
    00000020: 	xorl	%eax, %eax
    00000022: 	retq # Offset: 34
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_for_pointer1IiEmPT_m"

Binary Function "_Z23count_half_for_pointer2IiEmPT_m" after disassembly {
  Number      : 43
  State       : disassembled
  Address     : 0x23c0
  Size        : 0x23
  MaxSize     : 0x30
  Offset      : 0x23c0
  Section     : .text
  Orc Section : .local.text._Z23count_half_for_pointer2IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB042:
    00000000: 	endbr64
    00000004: 	shlq	$0x2, %rsi
    00000008: 	leaq	-0x4(%rdi,%rsi), %rax
    0000000d: 	cmpq	%rax, %rdi
    00000010: 	jae	.Ltmp57 # Offset: 16
    00000012: 	leaq	-0x5(%rsi), %rax
    00000016: 	shrq	$0x3, %rax
    0000001a: 	leaq	0x1(%rax), %rax
    0000001e: 	retq # Offset: 30
    0000001f: 	nop # Size: 1
.Ltmp57:
    00000020: 	xorl	%eax, %eax
    00000022: 	retq # Offset: 34
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_for_pointer2IiEmPT_m"

Binary Function "_Z23count_half_for_pointer3IiEmPT_m" after disassembly {
  Number      : 44
  State       : disassembled
  Address     : 0x23f0
  Size        : 0x3b
  MaxSize     : 0x40
  Offset      : 0x23f0
  Section     : .text
  Orc Section : .local.text._Z23count_half_for_pointer3IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB043:
    00000000: 	endbr64
    00000004: 	leaq	-0x4(,%rsi,4), %rdx
    0000000c: 	xorl	%r8d, %r8d
    0000000f: 	leaq	(%rdi,%rdx), %rax
    00000013: 	testq	%rdx, %rdx
    00000016: 	jle	.Ltmp58 # Offset: 22
    00000018: 	nopl	(%rax,%rax) # Size: 8
.Ltmp59:
    00000020: 	subq	$0x4, %rax
    00000024: 	addq	$0x4, %rdi
    00000028: 	addq	$0x1, %r8
    0000002c: 	movq	%rax, %rdx
    0000002f: 	subq	%rdi, %rdx
    00000032: 	testq	%rdx, %rdx
    00000035: 	jg	.Ltmp59 # Offset: 53
.Ltmp58:
    00000037: 	movq	%r8, %rax
    0000003a: 	retq # Offset: 58
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_for_pointer3IiEmPT_m"

Binary Function "_Z23count_half_for_pointer4IiEmPT_m" after disassembly {
  Number      : 45
  State       : disassembled
  Address     : 0x2430
  Size        : 0x23
  MaxSize     : 0x30
  Offset      : 0x2430
  Section     : .text
  Orc Section : .local.text._Z23count_half_for_pointer4IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB044:
    00000000: 	endbr64
    00000004: 	shlq	$0x2, %rsi
    00000008: 	leaq	-0x4(%rdi,%rsi), %rax
    0000000d: 	cmpq	%rax, %rdi
    00000010: 	jae	.Ltmp60 # Offset: 16
    00000012: 	leaq	-0x5(%rsi), %rax
    00000016: 	shrq	$0x3, %rax
    0000001a: 	leaq	0x1(%rax), %rax
    0000001e: 	retq # Offset: 30
    0000001f: 	nop # Size: 1
.Ltmp60:
    00000020: 	xorl	%eax, %eax
    00000022: 	retq # Offset: 34
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_for_pointer4IiEmPT_m"

Binary Function "_Z23count_half_for_pointer5IiEmPT_m" after disassembly {
  Number      : 46
  State       : disassembled
  Address     : 0x2460
  Size        : 0x3f
  MaxSize     : 0x40
  Offset      : 0x2460
  Section     : .text
  Orc Section : .local.text._Z23count_half_for_pointer5IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB045:
    00000000: 	endbr64
    00000004: 	leaq	(%rdi,%rsi,4), %rax
    00000008: 	cmpq	%rax, %rdi
    0000000b: 	je	.Ltmp61 # Offset: 11
    0000000d: 	subq	$0x4, %rax
    00000011: 	xorl	%r8d, %r8d
    00000014: 	cmpq	%rax, %rdi
    00000017: 	jne	.Ltmp62 # Offset: 23
    00000019: 	jmp	.Ltmp63 # Offset: 25
    0000001b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp64:
    00000020: 	subq	$0x4, %rax
    00000024: 	cmpq	%rdi, %rax
    00000027: 	je	.Ltmp63 # Offset: 39
.Ltmp62:
    00000029: 	addq	$0x4, %rdi
    0000002d: 	addq	$0x1, %r8
    00000031: 	cmpq	%rax, %rdi
    00000034: 	jne	.Ltmp64 # Offset: 52
.Ltmp63:
    00000036: 	movq	%r8, %rax
    00000039: 	retq # Offset: 57
.Ltmp61:
    0000003a: 	xorl	%r8d, %r8d
    0000003d: 	jmp	.Ltmp63 # Offset: 61
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_for_pointer5IiEmPT_m"

Binary Function "_Z23count_half_for_pointer6IiEmPT_m" after disassembly {
  Number      : 47
  State       : disassembled
  Address     : 0x24a0
  Size        : 0x33
  MaxSize     : 0x40
  Offset      : 0x24a0
  Section     : .text
  Orc Section : .local.text._Z23count_half_for_pointer6IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB046:
    00000000: 	endbr64
    00000004: 	shlq	$0x2, %rsi
    00000008: 	leaq	-0x4(%rdi,%rsi), %rax
    0000000d: 	cmpq	%rax, %rdi
    00000010: 	jae	.Ltmp65 # Offset: 16
    00000012: 	subq	$0x5, %rsi
    00000016: 	shrq	$0x3, %rsi
    0000001a: 	leaq	0x4(,%rsi,4), %rax
    00000022: 	sarq	$0x2, %rax
    00000026: 	retq # Offset: 38
    00000027: 	nopw	(%rax,%rax) # Size: 9
.Ltmp65:
    00000030: 	xorl	%eax, %eax
    00000032: 	retq # Offset: 50
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_for_pointer6IiEmPT_m"

Binary Function "_Z23count_half_for_pointer7IiEmPT_m" after disassembly {
  Number      : 48
  State       : disassembled
  Address     : 0x24e0
  Size        : 0x5c
  MaxSize     : 0x60
  Offset      : 0x24e0
  Section     : .text
  Orc Section : .local.text._Z23count_half_for_pointer7IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB047:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rdx
    00000007: 	shlq	$0x2, %rsi
    0000000b: 	leaq	(%rdi,%rsi), %rax
    0000000f: 	shrq	%rdx
    00000012: 	cmpq	%rdi, %rax
    00000015: 	jbe	.Ltmp66 # Offset: 21
    00000017: 	cmpq	$0x1, %rdx
    0000001b: 	je	.Ltmp67 # Offset: 27
    0000001d: 	subq	$0x1, %rsi
    00000021: 	movl	$0x1, %eax
    00000026: 	shrq	$0x2, %rsi
    0000002a: 	leaq	0x1(%rsi), %r8
    0000002e: 	jmp	.Ltmp68 # Offset: 46
.Ltmp70:
    00000030: 	addq	$0x1, %rax
    00000034: 	cmpq	%rax, %rdx
    00000037: 	je	.Ltmp69 # Offset: 55
.Ltmp68:
    00000039: 	cmpq	%r8, %rax
    0000003c: 	jne	.Ltmp70 # Offset: 60
.Ltmp71:
    0000003e: 	movq	%r8, %rax
    00000041: 	retq # Offset: 65
    00000042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp69:
    00000048: 	movq	%rdx, %r8
    0000004b: 	movq	%r8, %rax
    0000004e: 	retq # Offset: 78
.Ltmp66:
    0000004f: 	xorl	%r8d, %r8d
    00000052: 	jmp	.Ltmp71 # Offset: 82
.Ltmp67:
    00000054: 	movl	$0x1, %r8d
    0000005a: 	jmp	.Ltmp71 # Offset: 90
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_for_pointer7IiEmPT_m"

Binary Function "_Z23count_half_for_pointer8IiEmPT_m" after disassembly {
  Number      : 49
  State       : disassembled
  Address     : 0x2540
  Size        : 0x43
  MaxSize     : 0x50
  Offset      : 0x2540
  Section     : .text
  Orc Section : .local.text._Z23count_half_for_pointer8IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB048:
    00000000: 	endbr64
    00000004: 	leaq	(%rdi,%rsi,4), %rcx
    00000008: 	leaq	-0x4(%rcx), %rdx
    0000000c: 	cmpq	%rdx, %rdi
    0000000f: 	jae	.Ltmp72 # Offset: 15
    00000011: 	cmpq	%rcx, %rdi
    00000014: 	jae	.Ltmp72 # Offset: 20
    00000016: 	movq	%rdi, %rax
    00000019: 	jmp	.Ltmp73 # Offset: 25
    0000001b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp75:
    00000020: 	cmpq	%rax, %rcx
    00000023: 	jbe	.Ltmp74 # Offset: 35
.Ltmp73:
    00000025: 	addq	$0x4, %rax
    00000029: 	subq	$0x4, %rdx
    0000002d: 	cmpq	%rdx, %rax
    00000030: 	jb	.Ltmp75 # Offset: 48
.Ltmp74:
    00000032: 	subq	%rdi, %rax
    00000035: 	sarq	$0x2, %rax
    00000039: 	retq # Offset: 57
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp72:
    00000040: 	xorl	%eax, %eax
    00000042: 	retq # Offset: 66
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_for_pointer8IiEmPT_m"

Binary Function "_Z21count_half_for_index1IiEmPT_m" after disassembly {
  Number      : 50
  State       : disassembled
  Address     : 0x2590
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x2590
  Section     : .text
  Orc Section : .local.text._Z21count_half_for_index1IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB049:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	cmpq	$0x1, %rsi
    0000000a: 	je	.Ltmp76 # Offset: 10
    0000000c: 	nopl	(%rax) # Size: 4
.Ltmp77:
    00000010: 	addq	$0x1, %rax
    00000014: 	movq	%rsi, %rdx
    00000017: 	subq	%rax, %rdx
    0000001a: 	subq	$0x1, %rdx
    0000001e: 	cmpq	%rax, %rdx
    00000021: 	ja	.Ltmp77 # Offset: 33
    00000023: 	retq # Offset: 35
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp76:
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_Z21count_half_for_index1IiEmPT_m"

Binary Function "_Z21count_half_for_index2IiEmPT_m" after disassembly {
  Number      : 51
  State       : disassembled
  Address     : 0x25c0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x25c0
  Section     : .text
  Orc Section : .local.text._Z21count_half_for_index2IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB050:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	cmpq	$0x1, %rsi
    0000000a: 	je	.Ltmp78 # Offset: 10
    0000000c: 	nopl	(%rax) # Size: 4
.Ltmp79:
    00000010: 	addq	$0x1, %rax
    00000014: 	movq	%rsi, %rdx
    00000017: 	subq	%rax, %rdx
    0000001a: 	subq	$0x1, %rdx
    0000001e: 	cmpq	%rax, %rdx
    00000021: 	ja	.Ltmp79 # Offset: 33
    00000023: 	retq # Offset: 35
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp78:
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_Z21count_half_for_index2IiEmPT_m"

Binary Function "_Z21count_half_for_index3IiEmPT_m" after disassembly {
  Number      : 52
  State       : disassembled
  Address     : 0x25f0
  Size        : 0x1b
  MaxSize     : 0x20
  Offset      : 0x25f0
  Section     : .text
  Orc Section : .local.text._Z21count_half_for_index3IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB051:
    00000000: 	endbr64
    00000004: 	leal	-0x1(%rsi), %eax
    00000007: 	testl	%eax, %eax
    00000009: 	jle	.Ltmp80 # Offset: 9
    0000000b: 	subl	$0x2, %esi
    0000000e: 	shrl	%esi
    00000010: 	leal	0x1(%rsi), %eax
    00000013: 	retq # Offset: 19
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp80:
    00000018: 	xorl	%eax, %eax
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_Z21count_half_for_index3IiEmPT_m"

Binary Function "_Z21count_half_for_index4IiEmPT_m" after disassembly {
  Number      : 53
  State       : disassembled
  Address     : 0x2610
  Size        : 0x21
  MaxSize     : 0x30
  Offset      : 0x2610
  Section     : .text
  Orc Section : .local.text._Z21count_half_for_index4IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB052:
    00000000: 	endbr64
    00000004: 	movl	%esi, %ecx
    00000006: 	subl	$0x1, %esi
    00000009: 	xorl	%eax, %eax
    0000000b: 	testl	%esi, %esi
    0000000d: 	jle	.Ltmp81 # Offset: 13
    0000000f: 	nop # Size: 1
.Ltmp82:
    00000010: 	addq	$0x1, %rax
    00000014: 	leal	0x1(%rax,%rax), %edx
    00000018: 	cmpl	%ecx, %edx
    0000001a: 	js	.Ltmp82 # Offset: 26
    0000001c: 	retq # Offset: 28
    0000001d: 	nopl	(%rax) # Size: 3
.Ltmp81:
    00000020: 	retq # Offset: 32
DWARF CFI Instructions:
    <empty>
End of Function "_Z21count_half_for_index4IiEmPT_m"

Binary Function "_Z21count_half_for_index5IiEmPT_m" after disassembly {
  Number      : 54
  State       : disassembled
  Address     : 0x2640
  Size        : 0x1b
  MaxSize     : 0x20
  Offset      : 0x2640
  Section     : .text
  Orc Section : .local.text._Z21count_half_for_index5IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB053:
    00000000: 	endbr64
    00000004: 	leal	-0x1(%rsi), %eax
    00000007: 	testl	%eax, %eax
    00000009: 	jle	.Ltmp83 # Offset: 9
    0000000b: 	subl	$0x2, %esi
    0000000e: 	shrl	%esi
    00000010: 	leal	0x1(%rsi), %eax
    00000013: 	retq # Offset: 19
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp83:
    00000018: 	xorl	%eax, %eax
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_Z21count_half_for_index5IiEmPT_m"

Binary Function "_Z21count_half_for_index6IiEmPT_m" after disassembly {
  Number      : 55
  State       : disassembled
  Address     : 0x2660
  Size        : 0x1b
  MaxSize     : 0x20
  Offset      : 0x2660
  Section     : .text
  Orc Section : .local.text._Z21count_half_for_index6IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB054:
    00000000: 	endbr64
    00000004: 	cmpl	$0x1, %esi
    00000007: 	jle	.Ltmp84 # Offset: 7
    00000009: 	subl	$0x2, %esi
    0000000c: 	shrl	%esi
    0000000e: 	leal	0x1(%rsi), %eax
    00000011: 	retq # Offset: 17
    00000012: 	nopw	(%rax,%rax) # Size: 6
.Ltmp84:
    00000018: 	xorl	%eax, %eax
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_Z21count_half_for_index6IiEmPT_m"

Binary Function "_Z21count_half_for_index7IiEmPT_m" after disassembly {
  Number      : 56
  State       : disassembled
  Address     : 0x2680
  Size        : 0x32
  MaxSize     : 0x40
  Offset      : 0x2680
  Section     : .text
  Orc Section : .local.text._Z21count_half_for_index7IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB055:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	testl	%esi, %esi
    00000008: 	je	.Ltmp85 # Offset: 8
    0000000a: 	subl	$0x1, %esi
    0000000d: 	jne	.Ltmp86 # Offset: 13
    0000000f: 	jmp	.Ltmp87 # Offset: 15
    00000011: 	nopl	(%rax) # Size: 7
.Ltmp88:
    00000018: 	subl	$0x1, %esi
    0000001b: 	cmpl	%esi, %eax
    0000001d: 	je	.Ltmp87 # Offset: 29
.Ltmp86:
    0000001f: 	addq	$0x1, %rax
    00000023: 	cmpl	%esi, %eax
    00000025: 	jne	.Ltmp88 # Offset: 37
    00000027: 	retq # Offset: 39
    00000028: 	nopl	(%rax,%rax) # Size: 8
.Ltmp87:
    00000030: 	retq # Offset: 48
.Ltmp85:
    00000031: 	retq # Offset: 49
DWARF CFI Instructions:
    <empty>
End of Function "_Z21count_half_for_index7IiEmPT_m"

Binary Function "_Z21count_half_for_index8IiEmPT_m" after disassembly {
  Number      : 57
  State       : disassembled
  Address     : 0x26c0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x26c0
  Section     : .text
  Orc Section : .local.text._Z21count_half_for_index8IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB056:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	cmpq	$0x1, %rsi
    0000000a: 	je	.Ltmp89 # Offset: 10
    0000000c: 	nopl	(%rax) # Size: 4
.Ltmp90:
    00000010: 	addq	$0x1, %rax
    00000014: 	movq	%rsi, %rdx
    00000017: 	subq	%rax, %rdx
    0000001a: 	subq	$0x1, %rdx
    0000001e: 	cmpq	%rax, %rdx
    00000021: 	ja	.Ltmp90 # Offset: 33
    00000023: 	retq # Offset: 35
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp89:
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_Z21count_half_for_index8IiEmPT_m"

Binary Function "_Z21count_half_for_index9IiEmPT_m" after disassembly {
  Number      : 58
  State       : disassembled
  Address     : 0x26f0
  Size        : 0x34
  MaxSize     : 0x40
  Offset      : 0x26f0
  Section     : .text
  Orc Section : .local.text._Z21count_half_for_index9IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB057:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rcx
    00000007: 	movq	%rsi, %rax
    0000000a: 	xorl	%edx, %edx
    0000000c: 	shrq	%rcx
    0000000f: 	jmp	.Ltmp91 # Offset: 15
    00000011: 	nopl	(%rax) # Size: 7
.Ltmp93:
    00000018: 	addq	$0x1, %rdx
    0000001c: 	cmpq	%rdx, %rcx
    0000001f: 	je	.Ltmp92 # Offset: 31
.Ltmp91:
    00000021: 	cmpq	%rax, %rdx
    00000024: 	jne	.Ltmp93 # Offset: 36
    00000026: 	retq # Offset: 38
    00000027: 	nopw	(%rax,%rax) # Size: 9
.Ltmp92:
    00000030: 	movq	%rcx, %rax
    00000033: 	retq # Offset: 51
DWARF CFI Instructions:
    <empty>
End of Function "_Z21count_half_for_index9IiEmPT_m"

Binary Function "_Z22count_half_for_index10IiEmPT_m" after disassembly {
  Number      : 59
  State       : disassembled
  Address     : 0x2730
  Size        : 0x2e
  MaxSize     : 0x30
  Offset      : 0x2730
  Section     : .text
  Orc Section : .local.text._Z22count_half_for_index10IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB058:
    00000000: 	endbr64
    00000004: 	xorl	%r8d, %r8d
    00000007: 	cmpq	$0x1, %rsi
    0000000b: 	jbe	.Ltmp94 # Offset: 11
    0000000d: 	nopl	(%rax) # Size: 3
.Ltmp95:
    00000010: 	addq	$0x1, %r8
    00000014: 	movq	%rsi, %rax
    00000017: 	subq	%r8, %rax
    0000001a: 	subq	$0x1, %rax
    0000001e: 	cmpq	%rsi, %rax
    00000021: 	cmovaq	%rsi, %rax
    00000025: 	cmpq	%rax, %r8
    00000028: 	jb	.Ltmp95 # Offset: 40
.Ltmp94:
    0000002a: 	movq	%r8, %rax
    0000002d: 	retq # Offset: 45
DWARF CFI Instructions:
    <empty>
End of Function "_Z22count_half_for_index10IiEmPT_m"

Binary Function "_Z24count_half_for_iterator1IPiEmT_m" after disassembly {
  Number      : 60
  State       : disassembled
  Address     : 0x2760
  Size        : 0x23
  MaxSize     : 0x30
  Offset      : 0x2760
  Section     : .text
  Orc Section : .local.text._Z24count_half_for_iterator1IPiEmT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB059:
    00000000: 	endbr64
    00000004: 	shlq	$0x2, %rsi
    00000008: 	leaq	-0x4(%rdi,%rsi), %rax
    0000000d: 	cmpq	%rax, %rdi
    00000010: 	jae	.Ltmp96 # Offset: 16
    00000012: 	leaq	-0x5(%rsi), %rax
    00000016: 	shrq	$0x3, %rax
    0000001a: 	leaq	0x1(%rax), %rax
    0000001e: 	retq # Offset: 30
    0000001f: 	nop # Size: 1
.Ltmp96:
    00000020: 	xorl	%eax, %eax
    00000022: 	retq # Offset: 34
DWARF CFI Instructions:
    <empty>
End of Function "_Z24count_half_for_iterator1IPiEmT_m"

Binary Function "_Z24count_half_for_iterator2IPiEmT_m" after disassembly {
  Number      : 61
  State       : disassembled
  Address     : 0x2790
  Size        : 0x23
  MaxSize     : 0x30
  Offset      : 0x2790
  Section     : .text
  Orc Section : .local.text._Z24count_half_for_iterator2IPiEmT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB060:
    00000000: 	endbr64
    00000004: 	shlq	$0x2, %rsi
    00000008: 	leaq	-0x4(%rdi,%rsi), %rax
    0000000d: 	cmpq	%rax, %rdi
    00000010: 	jae	.Ltmp97 # Offset: 16
    00000012: 	leaq	-0x5(%rsi), %rax
    00000016: 	shrq	$0x3, %rax
    0000001a: 	leaq	0x1(%rax), %rax
    0000001e: 	retq # Offset: 30
    0000001f: 	nop # Size: 1
.Ltmp97:
    00000020: 	xorl	%eax, %eax
    00000022: 	retq # Offset: 34
DWARF CFI Instructions:
    <empty>
End of Function "_Z24count_half_for_iterator2IPiEmT_m"

Binary Function "_Z24count_half_for_iterator3IPiEmT_m" after disassembly {
  Number      : 62
  State       : disassembled
  Address     : 0x27c0
  Size        : 0x3b
  MaxSize     : 0x40
  Offset      : 0x27c0
  Section     : .text
  Orc Section : .local.text._Z24count_half_for_iterator3IPiEmT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB061:
    00000000: 	endbr64
    00000004: 	leaq	-0x4(,%rsi,4), %rdx
    0000000c: 	xorl	%r8d, %r8d
    0000000f: 	leaq	(%rdi,%rdx), %rax
    00000013: 	testq	%rdx, %rdx
    00000016: 	jle	.Ltmp98 # Offset: 22
    00000018: 	nopl	(%rax,%rax) # Size: 8
.Ltmp99:
    00000020: 	subq	$0x4, %rax
    00000024: 	addq	$0x4, %rdi
    00000028: 	addq	$0x1, %r8
    0000002c: 	movq	%rax, %rdx
    0000002f: 	subq	%rdi, %rdx
    00000032: 	testq	%rdx, %rdx
    00000035: 	jg	.Ltmp99 # Offset: 53
.Ltmp98:
    00000037: 	movq	%r8, %rax
    0000003a: 	retq # Offset: 58
DWARF CFI Instructions:
    <empty>
End of Function "_Z24count_half_for_iterator3IPiEmT_m"

Binary Function "_Z24count_half_for_iterator4IPiEmT_m" after disassembly {
  Number      : 63
  State       : disassembled
  Address     : 0x2800
  Size        : 0x23
  MaxSize     : 0x30
  Offset      : 0x2800
  Section     : .text
  Orc Section : .local.text._Z24count_half_for_iterator4IPiEmT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB062:
    00000000: 	endbr64
    00000004: 	shlq	$0x2, %rsi
    00000008: 	leaq	-0x4(%rdi,%rsi), %rax
    0000000d: 	cmpq	%rax, %rdi
    00000010: 	jae	.Ltmp100 # Offset: 16
    00000012: 	leaq	-0x5(%rsi), %rax
    00000016: 	shrq	$0x3, %rax
    0000001a: 	leaq	0x1(%rax), %rax
    0000001e: 	retq # Offset: 30
    0000001f: 	nop # Size: 1
.Ltmp100:
    00000020: 	xorl	%eax, %eax
    00000022: 	retq # Offset: 34
DWARF CFI Instructions:
    <empty>
End of Function "_Z24count_half_for_iterator4IPiEmT_m"

Binary Function "_Z24count_half_for_iterator5IPiEmT_m" after disassembly {
  Number      : 64
  State       : disassembled
  Address     : 0x2830
  Size        : 0x3f
  MaxSize     : 0x40
  Offset      : 0x2830
  Section     : .text
  Orc Section : .local.text._Z24count_half_for_iterator5IPiEmT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB063:
    00000000: 	endbr64
    00000004: 	leaq	(%rdi,%rsi,4), %rax
    00000008: 	cmpq	%rax, %rdi
    0000000b: 	je	.Ltmp101 # Offset: 11
    0000000d: 	subq	$0x4, %rax
    00000011: 	xorl	%r8d, %r8d
    00000014: 	cmpq	%rax, %rdi
    00000017: 	jne	.Ltmp102 # Offset: 23
    00000019: 	jmp	.Ltmp103 # Offset: 25
    0000001b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp104:
    00000020: 	subq	$0x4, %rax
    00000024: 	cmpq	%rdi, %rax
    00000027: 	je	.Ltmp103 # Offset: 39
.Ltmp102:
    00000029: 	addq	$0x4, %rdi
    0000002d: 	addq	$0x1, %r8
    00000031: 	cmpq	%rax, %rdi
    00000034: 	jne	.Ltmp104 # Offset: 52
.Ltmp103:
    00000036: 	movq	%r8, %rax
    00000039: 	retq # Offset: 57
.Ltmp101:
    0000003a: 	xorl	%r8d, %r8d
    0000003d: 	jmp	.Ltmp103 # Offset: 61
DWARF CFI Instructions:
    <empty>
End of Function "_Z24count_half_for_iterator5IPiEmT_m"

Binary Function "_Z24count_half_for_iterator6IPiEmT_m" after disassembly {
  Number      : 65
  State       : disassembled
  Address     : 0x2870
  Size        : 0x33
  MaxSize     : 0x40
  Offset      : 0x2870
  Section     : .text
  Orc Section : .local.text._Z24count_half_for_iterator6IPiEmT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB064:
    00000000: 	endbr64
    00000004: 	shlq	$0x2, %rsi
    00000008: 	leaq	-0x4(%rdi,%rsi), %rax
    0000000d: 	cmpq	%rax, %rdi
    00000010: 	jae	.Ltmp105 # Offset: 16
    00000012: 	subq	$0x5, %rsi
    00000016: 	shrq	$0x3, %rsi
    0000001a: 	leaq	0x4(,%rsi,4), %rax
    00000022: 	sarq	$0x2, %rax
    00000026: 	retq # Offset: 38
    00000027: 	nopw	(%rax,%rax) # Size: 9
.Ltmp105:
    00000030: 	xorl	%eax, %eax
    00000032: 	retq # Offset: 50
DWARF CFI Instructions:
    <empty>
End of Function "_Z24count_half_for_iterator6IPiEmT_m"

Binary Function "_Z24count_half_for_iterator7IPiEmT_m" after disassembly {
  Number      : 66
  State       : disassembled
  Address     : 0x28b0
  Size        : 0x5c
  MaxSize     : 0x60
  Offset      : 0x28b0
  Section     : .text
  Orc Section : .local.text._Z24count_half_for_iterator7IPiEmT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB065:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rdx
    00000007: 	shlq	$0x2, %rsi
    0000000b: 	leaq	(%rdi,%rsi), %rax
    0000000f: 	shrq	%rdx
    00000012: 	cmpq	%rdi, %rax
    00000015: 	jbe	.Ltmp106 # Offset: 21
    00000017: 	cmpq	$0x1, %rdx
    0000001b: 	je	.Ltmp107 # Offset: 27
    0000001d: 	subq	$0x1, %rsi
    00000021: 	movl	$0x1, %eax
    00000026: 	shrq	$0x2, %rsi
    0000002a: 	leaq	0x1(%rsi), %r8
    0000002e: 	jmp	.Ltmp108 # Offset: 46
.Ltmp110:
    00000030: 	addq	$0x1, %rax
    00000034: 	cmpq	%rax, %rdx
    00000037: 	je	.Ltmp109 # Offset: 55
.Ltmp108:
    00000039: 	cmpq	%r8, %rax
    0000003c: 	jne	.Ltmp110 # Offset: 60
.Ltmp111:
    0000003e: 	movq	%r8, %rax
    00000041: 	retq # Offset: 65
    00000042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp109:
    00000048: 	movq	%rdx, %r8
    0000004b: 	movq	%r8, %rax
    0000004e: 	retq # Offset: 78
.Ltmp106:
    0000004f: 	xorl	%r8d, %r8d
    00000052: 	jmp	.Ltmp111 # Offset: 82
.Ltmp107:
    00000054: 	movl	$0x1, %r8d
    0000005a: 	jmp	.Ltmp111 # Offset: 90
DWARF CFI Instructions:
    <empty>
End of Function "_Z24count_half_for_iterator7IPiEmT_m"

Binary Function "_Z24count_half_for_iterator8IPiEmT_m" after disassembly {
  Number      : 67
  State       : disassembled
  Address     : 0x2910
  Size        : 0x43
  MaxSize     : 0x50
  Offset      : 0x2910
  Section     : .text
  Orc Section : .local.text._Z24count_half_for_iterator8IPiEmT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB066:
    00000000: 	endbr64
    00000004: 	leaq	(%rdi,%rsi,4), %rcx
    00000008: 	leaq	-0x4(%rcx), %rdx
    0000000c: 	cmpq	%rdx, %rdi
    0000000f: 	jae	.Ltmp112 # Offset: 15
    00000011: 	cmpq	%rcx, %rdi
    00000014: 	jae	.Ltmp112 # Offset: 20
    00000016: 	movq	%rdi, %rax
    00000019: 	jmp	.Ltmp113 # Offset: 25
    0000001b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp115:
    00000020: 	cmpq	%rax, %rcx
    00000023: 	jbe	.Ltmp114 # Offset: 35
.Ltmp113:
    00000025: 	addq	$0x4, %rax
    00000029: 	subq	$0x4, %rdx
    0000002d: 	cmpq	%rdx, %rax
    00000030: 	jb	.Ltmp115 # Offset: 48
.Ltmp114:
    00000032: 	subq	%rdi, %rax
    00000035: 	sarq	$0x2, %rax
    00000039: 	retq # Offset: 57
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp112:
    00000040: 	xorl	%eax, %eax
    00000042: 	retq # Offset: 66
DWARF CFI Instructions:
    <empty>
End of Function "_Z24count_half_for_iterator8IPiEmT_m"

Binary Function "_Z24count_half_for_iterator1IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEmT_m" after disassembly {
  Number      : 68
  State       : disassembled
  Address     : 0x2960
  Size        : 0x23
  MaxSize     : 0x30
  Offset      : 0x2960
  Section     : .text
  Orc Section : .local.text._Z24count_half_for_iterator1IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEmT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB067:
    00000000: 	endbr64
    00000004: 	shlq	$0x2, %rsi
    00000008: 	leaq	-0x4(%rsi,%rdi), %rax
    0000000d: 	cmpq	%rax, %rdi
    00000010: 	jae	.Ltmp116 # Offset: 16
    00000012: 	leaq	-0x5(%rsi), %rax
    00000016: 	shrq	$0x3, %rax
    0000001a: 	leaq	0x1(%rax), %rax
    0000001e: 	retq # Offset: 30
    0000001f: 	nop # Size: 1
.Ltmp116:
    00000020: 	xorl	%eax, %eax
    00000022: 	retq # Offset: 34
DWARF CFI Instructions:
    <empty>
End of Function "_Z24count_half_for_iterator1IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEmT_m"

Binary Function "_Z24count_half_for_iterator2IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEmT_m" after disassembly {
  Number      : 69
  State       : disassembled
  Address     : 0x2990
  Size        : 0x23
  MaxSize     : 0x30
  Offset      : 0x2990
  Section     : .text
  Orc Section : .local.text._Z24count_half_for_iterator2IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEmT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB068:
    00000000: 	endbr64
    00000004: 	shlq	$0x2, %rsi
    00000008: 	leaq	-0x4(%rsi,%rdi), %rax
    0000000d: 	cmpq	%rax, %rdi
    00000010: 	jae	.Ltmp117 # Offset: 16
    00000012: 	leaq	-0x5(%rsi), %rax
    00000016: 	shrq	$0x3, %rax
    0000001a: 	leaq	0x1(%rax), %rax
    0000001e: 	retq # Offset: 30
    0000001f: 	nop # Size: 1
.Ltmp117:
    00000020: 	xorl	%eax, %eax
    00000022: 	retq # Offset: 34
DWARF CFI Instructions:
    <empty>
End of Function "_Z24count_half_for_iterator2IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEmT_m"

Binary Function "_Z24count_half_for_iterator3IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEmT_m" after disassembly {
  Number      : 70
  State       : disassembled
  Address     : 0x29c0
  Size        : 0x3b
  MaxSize     : 0x40
  Offset      : 0x29c0
  Section     : .text
  Orc Section : .local.text._Z24count_half_for_iterator3IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEmT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB069:
    00000000: 	endbr64
    00000004: 	leaq	-0x4(,%rsi,4), %rdx
    0000000c: 	xorl	%r8d, %r8d
    0000000f: 	leaq	(%rdi,%rdx), %rax
    00000013: 	testq	%rdx, %rdx
    00000016: 	jle	.Ltmp118 # Offset: 22
    00000018: 	nopl	(%rax,%rax) # Size: 8
.Ltmp119:
    00000020: 	subq	$0x4, %rax
    00000024: 	addq	$0x4, %rdi
    00000028: 	addq	$0x1, %r8
    0000002c: 	movq	%rax, %rdx
    0000002f: 	subq	%rdi, %rdx
    00000032: 	testq	%rdx, %rdx
    00000035: 	jg	.Ltmp119 # Offset: 53
.Ltmp118:
    00000037: 	movq	%r8, %rax
    0000003a: 	retq # Offset: 58
DWARF CFI Instructions:
    <empty>
End of Function "_Z24count_half_for_iterator3IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEmT_m"

Binary Function "_Z24count_half_for_iterator4IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEmT_m" after disassembly {
  Number      : 71
  State       : disassembled
  Address     : 0x2a00
  Size        : 0x23
  MaxSize     : 0x30
  Offset      : 0x2a00
  Section     : .text
  Orc Section : .local.text._Z24count_half_for_iterator4IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEmT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB070:
    00000000: 	endbr64
    00000004: 	shlq	$0x2, %rsi
    00000008: 	leaq	-0x4(%rsi,%rdi), %rax
    0000000d: 	cmpq	%rax, %rdi
    00000010: 	jae	.Ltmp120 # Offset: 16
    00000012: 	leaq	-0x5(%rsi), %rax
    00000016: 	shrq	$0x3, %rax
    0000001a: 	leaq	0x1(%rax), %rax
    0000001e: 	retq # Offset: 30
    0000001f: 	nop # Size: 1
.Ltmp120:
    00000020: 	xorl	%eax, %eax
    00000022: 	retq # Offset: 34
DWARF CFI Instructions:
    <empty>
End of Function "_Z24count_half_for_iterator4IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEmT_m"

Binary Function "_Z24count_half_for_iterator5IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEmT_m" after disassembly {
  Number      : 72
  State       : disassembled
  Address     : 0x2a30
  Size        : 0x3f
  MaxSize     : 0x40
  Offset      : 0x2a30
  Section     : .text
  Orc Section : .local.text._Z24count_half_for_iterator5IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEmT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB071:
    00000000: 	endbr64
    00000004: 	leaq	(%rdi,%rsi,4), %rax
    00000008: 	cmpq	%rax, %rdi
    0000000b: 	je	.Ltmp121 # Offset: 11
    0000000d: 	subq	$0x4, %rax
    00000011: 	xorl	%r8d, %r8d
    00000014: 	cmpq	%rax, %rdi
    00000017: 	jne	.Ltmp122 # Offset: 23
    00000019: 	jmp	.Ltmp123 # Offset: 25
    0000001b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp124:
    00000020: 	subq	$0x4, %rax
    00000024: 	cmpq	%rdi, %rax
    00000027: 	je	.Ltmp123 # Offset: 39
.Ltmp122:
    00000029: 	addq	$0x4, %rdi
    0000002d: 	addq	$0x1, %r8
    00000031: 	cmpq	%rax, %rdi
    00000034: 	jne	.Ltmp124 # Offset: 52
.Ltmp123:
    00000036: 	movq	%r8, %rax
    00000039: 	retq # Offset: 57
.Ltmp121:
    0000003a: 	xorl	%r8d, %r8d
    0000003d: 	jmp	.Ltmp123 # Offset: 61
DWARF CFI Instructions:
    <empty>
End of Function "_Z24count_half_for_iterator5IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEmT_m"

Binary Function "_Z24count_half_for_iterator6IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEmT_m" after disassembly {
  Number      : 73
  State       : disassembled
  Address     : 0x2a70
  Size        : 0x33
  MaxSize     : 0x40
  Offset      : 0x2a70
  Section     : .text
  Orc Section : .local.text._Z24count_half_for_iterator6IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEmT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB072:
    00000000: 	endbr64
    00000004: 	shlq	$0x2, %rsi
    00000008: 	leaq	-0x4(%rsi,%rdi), %rax
    0000000d: 	cmpq	%rax, %rdi
    00000010: 	jae	.Ltmp125 # Offset: 16
    00000012: 	subq	$0x5, %rsi
    00000016: 	shrq	$0x3, %rsi
    0000001a: 	leaq	0x4(,%rsi,4), %rax
    00000022: 	sarq	$0x2, %rax
    00000026: 	retq # Offset: 38
    00000027: 	nopw	(%rax,%rax) # Size: 9
.Ltmp125:
    00000030: 	xorl	%eax, %eax
    00000032: 	retq # Offset: 50
DWARF CFI Instructions:
    <empty>
End of Function "_Z24count_half_for_iterator6IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEmT_m"

Binary Function "_Z24count_half_for_iterator7IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEmT_m" after disassembly {
  Number      : 74
  State       : disassembled
  Address     : 0x2ab0
  Size        : 0x5c
  MaxSize     : 0x60
  Offset      : 0x2ab0
  Section     : .text
  Orc Section : .local.text._Z24count_half_for_iterator7IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEmT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB073:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rdx
    00000007: 	shlq	$0x2, %rsi
    0000000b: 	leaq	(%rdi,%rsi), %rax
    0000000f: 	shrq	%rdx
    00000012: 	cmpq	%rdi, %rax
    00000015: 	jbe	.Ltmp126 # Offset: 21
    00000017: 	cmpq	$0x1, %rdx
    0000001b: 	je	.Ltmp127 # Offset: 27
    0000001d: 	subq	$0x1, %rsi
    00000021: 	movl	$0x1, %eax
    00000026: 	shrq	$0x2, %rsi
    0000002a: 	leaq	0x1(%rsi), %r8
    0000002e: 	jmp	.Ltmp128 # Offset: 46
.Ltmp130:
    00000030: 	addq	$0x1, %rax
    00000034: 	cmpq	%rax, %rdx
    00000037: 	je	.Ltmp129 # Offset: 55
.Ltmp128:
    00000039: 	cmpq	%rax, %r8
    0000003c: 	jne	.Ltmp130 # Offset: 60
.Ltmp131:
    0000003e: 	movq	%r8, %rax
    00000041: 	retq # Offset: 65
    00000042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp129:
    00000048: 	movq	%rdx, %r8
    0000004b: 	movq	%r8, %rax
    0000004e: 	retq # Offset: 78
.Ltmp126:
    0000004f: 	xorl	%r8d, %r8d
    00000052: 	jmp	.Ltmp131 # Offset: 82
.Ltmp127:
    00000054: 	movl	$0x1, %r8d
    0000005a: 	jmp	.Ltmp131 # Offset: 90
DWARF CFI Instructions:
    <empty>
End of Function "_Z24count_half_for_iterator7IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEmT_m"

Binary Function "_Z24count_half_for_iterator8IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEmT_m" after disassembly {
  Number      : 75
  State       : disassembled
  Address     : 0x2b10
  Size        : 0x53
  MaxSize     : 0x60
  Offset      : 0x2b10
  Section     : .text
  Orc Section : .local.text._Z24count_half_for_iterator8IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEmT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB074:
    00000000: 	endbr64
    00000004: 	leaq	(%rdi,%rsi,4), %r9
    00000008: 	leaq	-0x4(%r9), %rax
    0000000c: 	cmpq	%rdi, %rax
    0000000f: 	jbe	.Ltmp132 # Offset: 15
    00000011: 	cmpq	%rdi, %r9
    00000014: 	jbe	.Ltmp132 # Offset: 20
    00000016: 	leaq	-0x8(%r9), %rcx
    0000001a: 	leaq	0x4(%rdi), %rdx
    0000001e: 	nop # Size: 2
.Ltmp133:
    00000020: 	cmpq	%rcx, %rdx
    00000023: 	movq	%rdx, %rax
    00000026: 	setae	%sil
    0000002a: 	cmpq	%rdx, %r9
    0000002d: 	setbe	%r8b
    00000031: 	subq	$0x4, %rcx
    00000035: 	addq	$0x4, %rdx
    00000039: 	orb	%r8b, %sil
    0000003c: 	je	.Ltmp133 # Offset: 60
    0000003e: 	subq	%rdi, %rax
    00000041: 	sarq	$0x2, %rax
    00000045: 	retq # Offset: 69
    00000046: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp132:
    00000050: 	xorl	%eax, %eax
    00000052: 	retq # Offset: 82
DWARF CFI Instructions:
    <empty>
End of Function "_Z24count_half_for_iterator8IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEmT_m"

Binary Function "_Z20count_half_while_optIiEmPT_m" after disassembly {
  Number      : 76
  State       : disassembled
  Address     : 0x2b70
  Size        : 0xb
  MaxSize     : 0x10
  Offset      : 0x2b70
  Section     : .text
  Orc Section : .local.text._Z20count_half_while_optIiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB075:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	shrq	%rax
    0000000a: 	retq # Offset: 10
DWARF CFI Instructions:
    <empty>
End of Function "_Z20count_half_while_optIiEmPT_m"

Binary Function "_Z28count_half_while_uncountableIiEmPT_m" after disassembly {
  Number      : 77
  State       : disassembled
  Address     : 0x2b80
  Size        : 0x21
  MaxSize     : 0x30
  Offset      : 0x2b80
  Section     : .text
  Orc Section : .local.text._Z28count_half_while_uncountableIiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB076:
    00000000: 	endbr64
    00000004: 	movl	(%rdi), %ecx
    00000006: 	xorl	%eax, %eax
    00000008: 	testl	%ecx, %ecx
    0000000a: 	je	.Ltmp134 # Offset: 10
    0000000c: 	nopl	(%rax) # Size: 4
.Ltmp135:
    00000010: 	addq	$0x1, %rax
    00000014: 	movl	(%rdi,%rax,4), %edx
    00000017: 	testl	%edx, %edx
    00000019: 	jne	.Ltmp135 # Offset: 25
    0000001b: 	retq # Offset: 27
    0000001c: 	nopl	(%rax) # Size: 4
.Ltmp134:
    00000020: 	retq # Offset: 32
DWARF CFI Instructions:
    <empty>
End of Function "_Z28count_half_while_uncountableIiEmPT_m"

Binary Function "_Z25count_half_while_pointer1IiEmPT_m" after disassembly {
  Number      : 78
  State       : disassembled
  Address     : 0x2bb0
  Size        : 0x23
  MaxSize     : 0x30
  Offset      : 0x2bb0
  Section     : .text
  Orc Section : .local.text._Z25count_half_while_pointer1IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB077:
    00000000: 	endbr64
    00000004: 	shlq	$0x2, %rsi
    00000008: 	leaq	-0x4(%rdi,%rsi), %rax
    0000000d: 	cmpq	%rax, %rdi
    00000010: 	jae	.Ltmp136 # Offset: 16
    00000012: 	leaq	-0x5(%rsi), %rax
    00000016: 	shrq	$0x3, %rax
    0000001a: 	leaq	0x1(%rax), %rax
    0000001e: 	retq # Offset: 30
    0000001f: 	nop # Size: 1
.Ltmp136:
    00000020: 	xorl	%eax, %eax
    00000022: 	retq # Offset: 34
DWARF CFI Instructions:
    <empty>
End of Function "_Z25count_half_while_pointer1IiEmPT_m"

Binary Function "_Z25count_half_while_pointer2IiEmPT_m" after disassembly {
  Number      : 79
  State       : disassembled
  Address     : 0x2be0
  Size        : 0x23
  MaxSize     : 0x30
  Offset      : 0x2be0
  Section     : .text
  Orc Section : .local.text._Z25count_half_while_pointer2IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB078:
    00000000: 	endbr64
    00000004: 	shlq	$0x2, %rsi
    00000008: 	leaq	-0x4(%rdi,%rsi), %rax
    0000000d: 	cmpq	%rax, %rdi
    00000010: 	jae	.Ltmp137 # Offset: 16
    00000012: 	leaq	-0x5(%rsi), %rax
    00000016: 	shrq	$0x3, %rax
    0000001a: 	leaq	0x1(%rax), %rax
    0000001e: 	retq # Offset: 30
    0000001f: 	nop # Size: 1
.Ltmp137:
    00000020: 	xorl	%eax, %eax
    00000022: 	retq # Offset: 34
DWARF CFI Instructions:
    <empty>
End of Function "_Z25count_half_while_pointer2IiEmPT_m"

Binary Function "_Z25count_half_while_pointer3IiEmPT_m" after disassembly {
  Number      : 80
  State       : disassembled
  Address     : 0x2c10
  Size        : 0x3b
  MaxSize     : 0x40
  Offset      : 0x2c10
  Section     : .text
  Orc Section : .local.text._Z25count_half_while_pointer3IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB079:
    00000000: 	endbr64
    00000004: 	leaq	-0x4(,%rsi,4), %rdx
    0000000c: 	xorl	%r8d, %r8d
    0000000f: 	leaq	(%rdi,%rdx), %rax
    00000013: 	testq	%rdx, %rdx
    00000016: 	jle	.Ltmp138 # Offset: 22
    00000018: 	nopl	(%rax,%rax) # Size: 8
.Ltmp139:
    00000020: 	subq	$0x4, %rax
    00000024: 	addq	$0x4, %rdi
    00000028: 	addq	$0x1, %r8
    0000002c: 	movq	%rax, %rdx
    0000002f: 	subq	%rdi, %rdx
    00000032: 	testq	%rdx, %rdx
    00000035: 	jg	.Ltmp139 # Offset: 53
.Ltmp138:
    00000037: 	movq	%r8, %rax
    0000003a: 	retq # Offset: 58
DWARF CFI Instructions:
    <empty>
End of Function "_Z25count_half_while_pointer3IiEmPT_m"

Binary Function "_Z25count_half_while_pointer4IiEmPT_m" after disassembly {
  Number      : 81
  State       : disassembled
  Address     : 0x2c50
  Size        : 0x23
  MaxSize     : 0x30
  Offset      : 0x2c50
  Section     : .text
  Orc Section : .local.text._Z25count_half_while_pointer4IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB080:
    00000000: 	endbr64
    00000004: 	shlq	$0x2, %rsi
    00000008: 	leaq	-0x4(%rdi,%rsi), %rax
    0000000d: 	cmpq	%rax, %rdi
    00000010: 	jae	.Ltmp140 # Offset: 16
    00000012: 	leaq	-0x5(%rsi), %rax
    00000016: 	shrq	$0x3, %rax
    0000001a: 	leaq	0x1(%rax), %rax
    0000001e: 	retq # Offset: 30
    0000001f: 	nop # Size: 1
.Ltmp140:
    00000020: 	xorl	%eax, %eax
    00000022: 	retq # Offset: 34
DWARF CFI Instructions:
    <empty>
End of Function "_Z25count_half_while_pointer4IiEmPT_m"

Binary Function "_Z25count_half_while_pointer5IiEmPT_m" after disassembly {
  Number      : 82
  State       : disassembled
  Address     : 0x2c80
  Size        : 0x3f
  MaxSize     : 0x40
  Offset      : 0x2c80
  Section     : .text
  Orc Section : .local.text._Z25count_half_while_pointer5IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB081:
    00000000: 	endbr64
    00000004: 	leaq	(%rdi,%rsi,4), %rax
    00000008: 	cmpq	%rax, %rdi
    0000000b: 	je	.Ltmp141 # Offset: 11
    0000000d: 	subq	$0x4, %rax
    00000011: 	xorl	%r8d, %r8d
    00000014: 	cmpq	%rax, %rdi
    00000017: 	jne	.Ltmp142 # Offset: 23
    00000019: 	jmp	.Ltmp143 # Offset: 25
    0000001b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp144:
    00000020: 	subq	$0x4, %rax
    00000024: 	cmpq	%rdi, %rax
    00000027: 	je	.Ltmp143 # Offset: 39
.Ltmp142:
    00000029: 	addq	$0x4, %rdi
    0000002d: 	addq	$0x1, %r8
    00000031: 	cmpq	%rax, %rdi
    00000034: 	jne	.Ltmp144 # Offset: 52
.Ltmp143:
    00000036: 	movq	%r8, %rax
    00000039: 	retq # Offset: 57
.Ltmp141:
    0000003a: 	xorl	%r8d, %r8d
    0000003d: 	jmp	.Ltmp143 # Offset: 61
DWARF CFI Instructions:
    <empty>
End of Function "_Z25count_half_while_pointer5IiEmPT_m"

Binary Function "_Z25count_half_while_pointer6IiEmPT_m" after disassembly {
  Number      : 83
  State       : disassembled
  Address     : 0x2cc0
  Size        : 0x33
  MaxSize     : 0x40
  Offset      : 0x2cc0
  Section     : .text
  Orc Section : .local.text._Z25count_half_while_pointer6IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB082:
    00000000: 	endbr64
    00000004: 	shlq	$0x2, %rsi
    00000008: 	leaq	-0x4(%rdi,%rsi), %rax
    0000000d: 	cmpq	%rax, %rdi
    00000010: 	jae	.Ltmp145 # Offset: 16
    00000012: 	subq	$0x5, %rsi
    00000016: 	shrq	$0x3, %rsi
    0000001a: 	leaq	0x4(,%rsi,4), %rax
    00000022: 	sarq	$0x2, %rax
    00000026: 	retq # Offset: 38
    00000027: 	nopw	(%rax,%rax) # Size: 9
.Ltmp145:
    00000030: 	xorl	%eax, %eax
    00000032: 	retq # Offset: 50
DWARF CFI Instructions:
    <empty>
End of Function "_Z25count_half_while_pointer6IiEmPT_m"

Binary Function "_Z25count_half_while_pointer7IiEmPT_m" after disassembly {
  Number      : 84
  State       : disassembled
  Address     : 0x2d00
  Size        : 0x5c
  MaxSize     : 0x60
  Offset      : 0x2d00
  Section     : .text
  Orc Section : .local.text._Z25count_half_while_pointer7IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB083:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rdx
    00000007: 	shlq	$0x2, %rsi
    0000000b: 	leaq	(%rdi,%rsi), %rax
    0000000f: 	shrq	%rdx
    00000012: 	cmpq	%rdi, %rax
    00000015: 	jbe	.Ltmp146 # Offset: 21
    00000017: 	cmpq	$0x1, %rdx
    0000001b: 	je	.Ltmp147 # Offset: 27
    0000001d: 	subq	$0x1, %rsi
    00000021: 	movl	$0x1, %eax
    00000026: 	shrq	$0x2, %rsi
    0000002a: 	leaq	0x1(%rsi), %r8
    0000002e: 	jmp	.Ltmp148 # Offset: 46
.Ltmp150:
    00000030: 	addq	$0x1, %rax
    00000034: 	cmpq	%rax, %rdx
    00000037: 	je	.Ltmp149 # Offset: 55
.Ltmp148:
    00000039: 	cmpq	%r8, %rax
    0000003c: 	jne	.Ltmp150 # Offset: 60
.Ltmp151:
    0000003e: 	movq	%r8, %rax
    00000041: 	retq # Offset: 65
    00000042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp149:
    00000048: 	movq	%rdx, %r8
    0000004b: 	movq	%r8, %rax
    0000004e: 	retq # Offset: 78
.Ltmp146:
    0000004f: 	xorl	%r8d, %r8d
    00000052: 	jmp	.Ltmp151 # Offset: 82
.Ltmp147:
    00000054: 	movl	$0x1, %r8d
    0000005a: 	jmp	.Ltmp151 # Offset: 90
DWARF CFI Instructions:
    <empty>
End of Function "_Z25count_half_while_pointer7IiEmPT_m"

Binary Function "_Z25count_half_while_pointer8IiEmPT_m" after disassembly {
  Number      : 85
  State       : disassembled
  Address     : 0x2d60
  Size        : 0x43
  MaxSize     : 0x50
  Offset      : 0x2d60
  Section     : .text
  Orc Section : .local.text._Z25count_half_while_pointer8IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB084:
    00000000: 	endbr64
    00000004: 	leaq	(%rdi,%rsi,4), %rcx
    00000008: 	leaq	-0x4(%rcx), %rdx
    0000000c: 	cmpq	%rdx, %rdi
    0000000f: 	jae	.Ltmp152 # Offset: 15
    00000011: 	cmpq	%rcx, %rdi
    00000014: 	jae	.Ltmp152 # Offset: 20
    00000016: 	movq	%rdi, %rax
    00000019: 	jmp	.Ltmp153 # Offset: 25
    0000001b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp155:
    00000020: 	cmpq	%rax, %rcx
    00000023: 	jbe	.Ltmp154 # Offset: 35
.Ltmp153:
    00000025: 	addq	$0x4, %rax
    00000029: 	subq	$0x4, %rdx
    0000002d: 	cmpq	%rdx, %rax
    00000030: 	jb	.Ltmp155 # Offset: 48
.Ltmp154:
    00000032: 	subq	%rdi, %rax
    00000035: 	sarq	$0x2, %rax
    00000039: 	retq # Offset: 57
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp152:
    00000040: 	xorl	%eax, %eax
    00000042: 	retq # Offset: 66
DWARF CFI Instructions:
    <empty>
End of Function "_Z25count_half_while_pointer8IiEmPT_m"

Binary Function "_Z23count_half_while_index1IiEmPT_m" after disassembly {
  Number      : 86
  State       : disassembled
  Address     : 0x2db0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x2db0
  Section     : .text
  Orc Section : .local.text._Z23count_half_while_index1IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB085:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	cmpq	$0x1, %rsi
    0000000a: 	je	.Ltmp156 # Offset: 10
    0000000c: 	nopl	(%rax) # Size: 4
.Ltmp157:
    00000010: 	addq	$0x1, %rax
    00000014: 	movq	%rsi, %rdx
    00000017: 	subq	%rax, %rdx
    0000001a: 	subq	$0x1, %rdx
    0000001e: 	cmpq	%rax, %rdx
    00000021: 	ja	.Ltmp157 # Offset: 33
    00000023: 	retq # Offset: 35
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp156:
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_while_index1IiEmPT_m"

Binary Function "_Z23count_half_while_index2IiEmPT_m" after disassembly {
  Number      : 87
  State       : disassembled
  Address     : 0x2de0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x2de0
  Section     : .text
  Orc Section : .local.text._Z23count_half_while_index2IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB086:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	cmpq	$0x1, %rsi
    0000000a: 	je	.Ltmp158 # Offset: 10
    0000000c: 	nopl	(%rax) # Size: 4
.Ltmp159:
    00000010: 	addq	$0x1, %rax
    00000014: 	movq	%rsi, %rdx
    00000017: 	subq	%rax, %rdx
    0000001a: 	subq	$0x1, %rdx
    0000001e: 	cmpq	%rax, %rdx
    00000021: 	ja	.Ltmp159 # Offset: 33
    00000023: 	retq # Offset: 35
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp158:
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_while_index2IiEmPT_m"

Binary Function "_Z23count_half_while_index3IiEmPT_m" after disassembly {
  Number      : 88
  State       : disassembled
  Address     : 0x2e10
  Size        : 0x1b
  MaxSize     : 0x20
  Offset      : 0x2e10
  Section     : .text
  Orc Section : .local.text._Z23count_half_while_index3IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB087:
    00000000: 	endbr64
    00000004: 	leal	-0x1(%rsi), %eax
    00000007: 	testl	%eax, %eax
    00000009: 	jle	.Ltmp160 # Offset: 9
    0000000b: 	subl	$0x2, %esi
    0000000e: 	shrl	%esi
    00000010: 	leal	0x1(%rsi), %eax
    00000013: 	retq # Offset: 19
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp160:
    00000018: 	xorl	%eax, %eax
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_while_index3IiEmPT_m"

Binary Function "_Z23count_half_while_index4IiEmPT_m" after disassembly {
  Number      : 89
  State       : disassembled
  Address     : 0x2e30
  Size        : 0x21
  MaxSize     : 0x30
  Offset      : 0x2e30
  Section     : .text
  Orc Section : .local.text._Z23count_half_while_index4IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB088:
    00000000: 	endbr64
    00000004: 	movl	%esi, %ecx
    00000006: 	subl	$0x1, %esi
    00000009: 	xorl	%eax, %eax
    0000000b: 	testl	%esi, %esi
    0000000d: 	jle	.Ltmp161 # Offset: 13
    0000000f: 	nop # Size: 1
.Ltmp162:
    00000010: 	addq	$0x1, %rax
    00000014: 	leal	0x1(%rax,%rax), %edx
    00000018: 	cmpl	%ecx, %edx
    0000001a: 	js	.Ltmp162 # Offset: 26
    0000001c: 	retq # Offset: 28
    0000001d: 	nopl	(%rax) # Size: 3
.Ltmp161:
    00000020: 	retq # Offset: 32
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_while_index4IiEmPT_m"

Binary Function "_Z23count_half_while_index5IiEmPT_m" after disassembly {
  Number      : 90
  State       : disassembled
  Address     : 0x2e60
  Size        : 0x1b
  MaxSize     : 0x20
  Offset      : 0x2e60
  Section     : .text
  Orc Section : .local.text._Z23count_half_while_index5IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB089:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	testq	%rsi, %rsi
    00000009: 	je	.Ltmp163 # Offset: 9
    0000000b: 	leal	-0x1(%rsi), %edx
    0000000e: 	testl	%edx, %edx
    00000010: 	jle	.Ltmp163 # Offset: 16
    00000012: 	subl	$0x2, %esi
    00000015: 	shrl	%esi
    00000017: 	leal	0x1(%rsi), %eax
.Ltmp163:
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_while_index5IiEmPT_m"

Binary Function "_Z23count_half_while_index6IiEmPT_m" after disassembly {
  Number      : 91
  State       : disassembled
  Address     : 0x2e80
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x2e80
  Section     : .text
  Orc Section : .local.text._Z23count_half_while_index6IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB090:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	cmpq	$0x1, %rsi
    0000000a: 	je	.Ltmp164 # Offset: 10
    0000000c: 	nopl	(%rax) # Size: 4
.Ltmp165:
    00000010: 	addq	$0x1, %rax
    00000014: 	movq	%rsi, %rdx
    00000017: 	subq	%rax, %rdx
    0000001a: 	subq	$0x1, %rdx
    0000001e: 	cmpq	%rax, %rdx
    00000021: 	ja	.Ltmp165 # Offset: 33
    00000023: 	retq # Offset: 35
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp164:
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_while_index6IiEmPT_m"

Binary Function "_Z23count_half_while_index7IiEmPT_m" after disassembly {
  Number      : 92
  State       : disassembled
  Address     : 0x2eb0
  Size        : 0x36
  MaxSize     : 0x40
  Offset      : 0x2eb0
  Section     : .text
  Orc Section : .local.text._Z23count_half_while_index7IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB091:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	testq	%rsi, %rsi
    0000000a: 	je	.Ltmp166 # Offset: 10
    0000000c: 	subq	$0x1, %rax
    00000010: 	je	.Ltmp167 # Offset: 16
    00000012: 	xorl	%edx, %edx
    00000014: 	jmp	.Ltmp168 # Offset: 20
    00000016: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp169:
    00000020: 	subq	$0x1, %rax
    00000024: 	cmpq	%rdx, %rax
    00000027: 	je	.Ltmp167 # Offset: 39
.Ltmp168:
    00000029: 	addq	$0x1, %rdx
    0000002d: 	cmpq	%rax, %rdx
    00000030: 	jne	.Ltmp169 # Offset: 48
    00000032: 	retq # Offset: 50
.Ltmp166:
    00000033: 	xorl	%eax, %eax
.Ltmp167:
    00000035: 	retq # Offset: 53
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_while_index7IiEmPT_m"

Binary Function "_Z23count_half_while_index8IiEmPT_m" after disassembly {
  Number      : 93
  State       : disassembled
  Address     : 0x2ef0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x2ef0
  Section     : .text
  Orc Section : .local.text._Z23count_half_while_index8IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB092:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	cmpq	$0x1, %rsi
    0000000a: 	je	.Ltmp170 # Offset: 10
    0000000c: 	nopl	(%rax) # Size: 4
.Ltmp171:
    00000010: 	addq	$0x1, %rax
    00000014: 	movq	%rsi, %rdx
    00000017: 	subq	%rax, %rdx
    0000001a: 	subq	$0x1, %rdx
    0000001e: 	cmpq	%rax, %rdx
    00000021: 	ja	.Ltmp171 # Offset: 33
    00000023: 	retq # Offset: 35
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp170:
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_while_index8IiEmPT_m"

Binary Function "_Z23count_half_while_index9IiEmPT_m" after disassembly {
  Number      : 94
  State       : disassembled
  Address     : 0x2f20
  Size        : 0x34
  MaxSize     : 0x40
  Offset      : 0x2f20
  Section     : .text
  Orc Section : .local.text._Z23count_half_while_index9IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB093:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rcx
    00000007: 	movq	%rsi, %rax
    0000000a: 	xorl	%edx, %edx
    0000000c: 	shrq	%rcx
    0000000f: 	jmp	.Ltmp172 # Offset: 15
    00000011: 	nopl	(%rax) # Size: 7
.Ltmp174:
    00000018: 	addq	$0x1, %rdx
    0000001c: 	cmpq	%rdx, %rcx
    0000001f: 	je	.Ltmp173 # Offset: 31
.Ltmp172:
    00000021: 	cmpq	%rax, %rdx
    00000024: 	jne	.Ltmp174 # Offset: 36
    00000026: 	retq # Offset: 38
    00000027: 	nopw	(%rax,%rax) # Size: 9
.Ltmp173:
    00000030: 	movq	%rcx, %rax
    00000033: 	retq # Offset: 51
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_while_index9IiEmPT_m"

Binary Function "_Z24count_half_while_index10IiEmPT_m" after disassembly {
  Number      : 95
  State       : disassembled
  Address     : 0x2f60
  Size        : 0x2e
  MaxSize     : 0x30
  Offset      : 0x2f60
  Section     : .text
  Orc Section : .local.text._Z24count_half_while_index10IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB094:
    00000000: 	endbr64
    00000004: 	xorl	%r8d, %r8d
    00000007: 	cmpq	$0x1, %rsi
    0000000b: 	jbe	.Ltmp175 # Offset: 11
    0000000d: 	nopl	(%rax) # Size: 3
.Ltmp176:
    00000010: 	addq	$0x1, %r8
    00000014: 	movq	%rsi, %rax
    00000017: 	subq	%r8, %rax
    0000001a: 	subq	$0x1, %rax
    0000001e: 	cmpq	%rsi, %rax
    00000021: 	cmovaq	%rsi, %rax
    00000025: 	cmpq	%rax, %r8
    00000028: 	jb	.Ltmp176 # Offset: 40
.Ltmp175:
    0000002a: 	movq	%r8, %rax
    0000002d: 	retq # Offset: 45
DWARF CFI Instructions:
    <empty>
End of Function "_Z24count_half_while_index10IiEmPT_m"

Binary Function "_Z17count_half_do_optIiEmPT_m" after disassembly {
  Number      : 96
  State       : disassembled
  Address     : 0x2f90
  Size        : 0x18
  MaxSize     : 0x20
  Offset      : 0x2f90
  Section     : .text
  Orc Section : .local.text._Z17count_half_do_optIiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB095:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	testq	%rsi, %rsi
    00000009: 	je	.Ltmp177 # Offset: 9
    0000000b: 	shrq	%rsi
    0000000e: 	movl	$0x1, %eax
    00000013: 	cmovneq	%rsi, %rax
.Ltmp177:
    00000017: 	retq # Offset: 23
DWARF CFI Instructions:
    <empty>
End of Function "_Z17count_half_do_optIiEmPT_m"

Binary Function "_Z25count_half_do_uncountableIiEmPT_m" after disassembly {
  Number      : 97
  State       : disassembled
  Address     : 0x2fb0
  Size        : 0x1c
  MaxSize     : 0x20
  Offset      : 0x2fb0
  Section     : .text
  Orc Section : .local.text._Z25count_half_do_uncountableIiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB096:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	testq	%rsi, %rsi
    00000009: 	je	.Ltmp178 # Offset: 9
    0000000b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp179:
    00000010: 	addq	$0x1, %rax
    00000014: 	movl	(%rdi,%rax,4), %edx
    00000017: 	testl	%edx, %edx
    00000019: 	jne	.Ltmp179 # Offset: 25
.Ltmp178:
    0000001b: 	retq # Offset: 27
DWARF CFI Instructions:
    <empty>
End of Function "_Z25count_half_do_uncountableIiEmPT_m"

Binary Function "_Z20count_half_do_index1IiEmPT_m" after disassembly {
  Number      : 98
  State       : disassembled
  Address     : 0x2fd0
  Size        : 0x24
  MaxSize     : 0x30
  Offset      : 0x2fd0
  Section     : .text
  Orc Section : .local.text._Z20count_half_do_index1IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB097:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	testq	%rsi, %rsi
    00000009: 	je	.Ltmp180 # Offset: 9
    0000000b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp181:
    00000010: 	addq	$0x1, %rax
    00000014: 	movq	%rsi, %rdx
    00000017: 	subq	%rax, %rdx
    0000001a: 	subq	$0x1, %rdx
    0000001e: 	cmpq	%rdx, %rax
    00000021: 	jb	.Ltmp181 # Offset: 33
.Ltmp180:
    00000023: 	retq # Offset: 35
DWARF CFI Instructions:
    <empty>
End of Function "_Z20count_half_do_index1IiEmPT_m"

Binary Function "_Z20count_half_do_index2IiEmPT_m" after disassembly {
  Number      : 99
  State       : disassembled
  Address     : 0x3000
  Size        : 0x24
  MaxSize     : 0x30
  Offset      : 0x3000
  Section     : .text
  Orc Section : .local.text._Z20count_half_do_index2IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB098:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	testq	%rsi, %rsi
    00000009: 	je	.Ltmp182 # Offset: 9
    0000000b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp183:
    00000010: 	addq	$0x1, %rax
    00000014: 	movq	%rsi, %rdx
    00000017: 	subq	%rax, %rdx
    0000001a: 	subq	$0x1, %rdx
    0000001e: 	cmpq	%rdx, %rax
    00000021: 	jb	.Ltmp183 # Offset: 33
.Ltmp182:
    00000023: 	retq # Offset: 35
DWARF CFI Instructions:
    <empty>
End of Function "_Z20count_half_do_index2IiEmPT_m"

Binary Function "_Z20count_half_do_index3IiEmPT_m" after disassembly {
  Number      : 100
  State       : disassembled
  Address     : 0x3030
  Size        : 0x27
  MaxSize     : 0x30
  Offset      : 0x3030
  Section     : .text
  Orc Section : .local.text._Z20count_half_do_index3IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB099:
    00000000: 	endbr64
    00000004: 	xorl	%r8d, %r8d
    00000007: 	testq	%rsi, %rsi
    0000000a: 	je	.Ltmp184 # Offset: 10
    0000000c: 	nopl	(%rax) # Size: 4
.Ltmp185:
    00000010: 	addq	$0x1, %r8
    00000014: 	movl	%esi, %eax
    00000016: 	leal	(%r8,%r8), %edx
    0000001a: 	subl	%edx, %eax
    0000001c: 	subl	$0x1, %eax
    0000001f: 	testl	%eax, %eax
    00000021: 	jg	.Ltmp185 # Offset: 33
.Ltmp184:
    00000023: 	movq	%r8, %rax
    00000026: 	retq # Offset: 38
DWARF CFI Instructions:
    <empty>
End of Function "_Z20count_half_do_index3IiEmPT_m"

Binary Function "_Z20count_half_do_index4IiEmPT_m" after disassembly {
  Number      : 101
  State       : disassembled
  Address     : 0x3060
  Size        : 0x1d
  MaxSize     : 0x20
  Offset      : 0x3060
  Section     : .text
  Orc Section : .local.text._Z20count_half_do_index4IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0100:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	testq	%rsi, %rsi
    00000009: 	je	.Ltmp186 # Offset: 9
    0000000b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp187:
    00000010: 	addq	$0x1, %rax
    00000014: 	leal	0x1(%rax,%rax), %edx
    00000018: 	cmpl	%esi, %edx
    0000001a: 	js	.Ltmp187 # Offset: 26
.Ltmp186:
    0000001c: 	retq # Offset: 28
DWARF CFI Instructions:
    <empty>
End of Function "_Z20count_half_do_index4IiEmPT_m"

Binary Function "_Z20count_half_do_index5IiEmPT_m" after disassembly {
  Number      : 102
  State       : disassembled
  Address     : 0x3080
  Size        : 0x27
  MaxSize     : 0x30
  Offset      : 0x3080
  Section     : .text
  Orc Section : .local.text._Z20count_half_do_index5IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0101:
    00000000: 	endbr64
    00000004: 	xorl	%r8d, %r8d
    00000007: 	testq	%rsi, %rsi
    0000000a: 	je	.Ltmp188 # Offset: 10
    0000000c: 	nopl	(%rax) # Size: 4
.Ltmp189:
    00000010: 	addq	$0x1, %r8
    00000014: 	movl	%esi, %eax
    00000016: 	leal	(%r8,%r8), %edx
    0000001a: 	subl	%edx, %eax
    0000001c: 	subl	$0x1, %eax
    0000001f: 	testl	%eax, %eax
    00000021: 	jg	.Ltmp189 # Offset: 33
.Ltmp188:
    00000023: 	movq	%r8, %rax
    00000026: 	retq # Offset: 38
DWARF CFI Instructions:
    <empty>
End of Function "_Z20count_half_do_index5IiEmPT_m"

Binary Function "_Z19count_half_goto_optIiEmPT_m" after disassembly {
  Number      : 103
  State       : disassembled
  Address     : 0x30b0
  Size        : 0x18
  MaxSize     : 0x20
  Offset      : 0x30b0
  Section     : .text
  Orc Section : .local.text._Z19count_half_goto_optIiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0102:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	testq	%rsi, %rsi
    00000009: 	je	.Ltmp190 # Offset: 9
    0000000b: 	shrq	%rsi
    0000000e: 	movl	$0x1, %eax
    00000013: 	cmovneq	%rsi, %rax
.Ltmp190:
    00000017: 	retq # Offset: 23
DWARF CFI Instructions:
    <empty>
End of Function "_Z19count_half_goto_optIiEmPT_m"

Binary Function "_Z27count_half_goto_uncountableIiEmPT_m" after disassembly {
  Number      : 104
  State       : disassembled
  Address     : 0x30d0
  Size        : 0x1c
  MaxSize     : 0x20
  Offset      : 0x30d0
  Section     : .text
  Orc Section : .local.text._Z27count_half_goto_uncountableIiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0103:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	testq	%rsi, %rsi
    00000009: 	je	.Ltmp191 # Offset: 9
    0000000b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp192:
    00000010: 	addq	$0x1, %rax
    00000014: 	movl	(%rdi,%rax,4), %edx
    00000017: 	testl	%edx, %edx
    00000019: 	jne	.Ltmp192 # Offset: 25
.Ltmp191:
    0000001b: 	retq # Offset: 27
DWARF CFI Instructions:
    <empty>
End of Function "_Z27count_half_goto_uncountableIiEmPT_m"

Binary Function "_Z22count_half_goto_index1IiEmPT_m" after disassembly {
  Number      : 105
  State       : disassembled
  Address     : 0x30f0
  Size        : 0x24
  MaxSize     : 0x30
  Offset      : 0x30f0
  Section     : .text
  Orc Section : .local.text._Z22count_half_goto_index1IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0104:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	testq	%rsi, %rsi
    00000009: 	je	.Ltmp193 # Offset: 9
    0000000b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp194:
    00000010: 	addq	$0x1, %rax
    00000014: 	movq	%rsi, %rdx
    00000017: 	subq	%rax, %rdx
    0000001a: 	subq	$0x1, %rdx
    0000001e: 	cmpq	%rdx, %rax
    00000021: 	jb	.Ltmp194 # Offset: 33
.Ltmp193:
    00000023: 	retq # Offset: 35
DWARF CFI Instructions:
    <empty>
End of Function "_Z22count_half_goto_index1IiEmPT_m"

Binary Function "_Z22count_half_goto_index2IiEmPT_m" after disassembly {
  Number      : 106
  State       : disassembled
  Address     : 0x3120
  Size        : 0x24
  MaxSize     : 0x30
  Offset      : 0x3120
  Section     : .text
  Orc Section : .local.text._Z22count_half_goto_index2IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0105:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	testq	%rsi, %rsi
    00000009: 	je	.Ltmp195 # Offset: 9
    0000000b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp196:
    00000010: 	addq	$0x1, %rax
    00000014: 	movq	%rsi, %rdx
    00000017: 	subq	%rax, %rdx
    0000001a: 	subq	$0x1, %rdx
    0000001e: 	cmpq	%rdx, %rax
    00000021: 	jb	.Ltmp196 # Offset: 33
.Ltmp195:
    00000023: 	retq # Offset: 35
DWARF CFI Instructions:
    <empty>
End of Function "_Z22count_half_goto_index2IiEmPT_m"

Binary Function "_Z22count_half_goto_index3IiEmPT_m" after disassembly {
  Number      : 107
  State       : disassembled
  Address     : 0x3150
  Size        : 0x27
  MaxSize     : 0x30
  Offset      : 0x3150
  Section     : .text
  Orc Section : .local.text._Z22count_half_goto_index3IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0106:
    00000000: 	endbr64
    00000004: 	xorl	%r8d, %r8d
    00000007: 	testq	%rsi, %rsi
    0000000a: 	je	.Ltmp197 # Offset: 10
    0000000c: 	nopl	(%rax) # Size: 4
.Ltmp198:
    00000010: 	addq	$0x1, %r8
    00000014: 	movl	%esi, %eax
    00000016: 	leal	(%r8,%r8), %edx
    0000001a: 	subl	%edx, %eax
    0000001c: 	subl	$0x1, %eax
    0000001f: 	testl	%eax, %eax
    00000021: 	jg	.Ltmp198 # Offset: 33
.Ltmp197:
    00000023: 	movq	%r8, %rax
    00000026: 	retq # Offset: 38
DWARF CFI Instructions:
    <empty>
End of Function "_Z22count_half_goto_index3IiEmPT_m"

Binary Function "_Z22count_half_goto_index4IiEmPT_m" after disassembly {
  Number      : 108
  State       : disassembled
  Address     : 0x3180
  Size        : 0x1d
  MaxSize     : 0x20
  Offset      : 0x3180
  Section     : .text
  Orc Section : .local.text._Z22count_half_goto_index4IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0107:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	testq	%rsi, %rsi
    00000009: 	je	.Ltmp199 # Offset: 9
    0000000b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp200:
    00000010: 	addq	$0x1, %rax
    00000014: 	leal	0x1(%rax,%rax), %edx
    00000018: 	cmpl	%esi, %edx
    0000001a: 	js	.Ltmp200 # Offset: 26
.Ltmp199:
    0000001c: 	retq # Offset: 28
DWARF CFI Instructions:
    <empty>
End of Function "_Z22count_half_goto_index4IiEmPT_m"

Binary Function "_Z22count_half_goto_index5IiEmPT_m" after disassembly {
  Number      : 109
  State       : disassembled
  Address     : 0x31a0
  Size        : 0x27
  MaxSize     : 0x30
  Offset      : 0x31a0
  Section     : .text
  Orc Section : .local.text._Z22count_half_goto_index5IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0108:
    00000000: 	endbr64
    00000004: 	xorl	%r8d, %r8d
    00000007: 	testq	%rsi, %rsi
    0000000a: 	je	.Ltmp201 # Offset: 10
    0000000c: 	nopl	(%rax) # Size: 4
.Ltmp202:
    00000010: 	addq	$0x1, %r8
    00000014: 	movl	%esi, %eax
    00000016: 	leal	(%r8,%r8), %edx
    0000001a: 	subl	%edx, %eax
    0000001c: 	subl	$0x1, %eax
    0000001f: 	testl	%eax, %eax
    00000021: 	jg	.Ltmp202 # Offset: 33
.Ltmp201:
    00000023: 	movq	%r8, %rax
    00000026: 	retq # Offset: 38
DWARF CFI Instructions:
    <empty>
End of Function "_Z22count_half_goto_index5IiEmPT_m"

Binary Function "_Z20count_half_goto2_optIiEmPT_m" after disassembly {
  Number      : 110
  State       : disassembled
  Address     : 0x31d0
  Size        : 0xb
  MaxSize     : 0x10
  Offset      : 0x31d0
  Section     : .text
  Orc Section : .local.text._Z20count_half_goto2_optIiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0109:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	shrq	%rax
    0000000a: 	retq # Offset: 10
DWARF CFI Instructions:
    <empty>
End of Function "_Z20count_half_goto2_optIiEmPT_m"

Binary Function "_Z28count_half_goto2_uncountableIiEmPT_m" after disassembly {
  Number      : 111
  State       : disassembled
  Address     : 0x31e0
  Size        : 0x21
  MaxSize     : 0x30
  Offset      : 0x31e0
  Section     : .text
  Orc Section : .local.text._Z28count_half_goto2_uncountableIiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0110:
    00000000: 	endbr64
    00000004: 	movl	(%rdi), %ecx
    00000006: 	xorl	%eax, %eax
    00000008: 	testl	%ecx, %ecx
    0000000a: 	je	.Ltmp203 # Offset: 10
    0000000c: 	nopl	(%rax) # Size: 4
.Ltmp204:
    00000010: 	addq	$0x1, %rax
    00000014: 	movl	(%rdi,%rax,4), %edx
    00000017: 	testl	%edx, %edx
    00000019: 	jne	.Ltmp204 # Offset: 25
    0000001b: 	retq # Offset: 27
    0000001c: 	nopl	(%rax) # Size: 4
.Ltmp203:
    00000020: 	retq # Offset: 32
DWARF CFI Instructions:
    <empty>
End of Function "_Z28count_half_goto2_uncountableIiEmPT_m"

Binary Function "_Z25count_half_goto2_pointer1IiEmPT_m" after disassembly {
  Number      : 112
  State       : disassembled
  Address     : 0x3210
  Size        : 0x23
  MaxSize     : 0x30
  Offset      : 0x3210
  Section     : .text
  Orc Section : .local.text._Z25count_half_goto2_pointer1IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0111:
    00000000: 	endbr64
    00000004: 	shlq	$0x2, %rsi
    00000008: 	leaq	-0x4(%rdi,%rsi), %rax
    0000000d: 	cmpq	%rax, %rdi
    00000010: 	jae	.Ltmp205 # Offset: 16
    00000012: 	leaq	-0x5(%rsi), %rax
    00000016: 	shrq	$0x3, %rax
    0000001a: 	leaq	0x1(%rax), %rax
    0000001e: 	retq # Offset: 30
    0000001f: 	nop # Size: 1
.Ltmp205:
    00000020: 	xorl	%eax, %eax
    00000022: 	retq # Offset: 34
DWARF CFI Instructions:
    <empty>
End of Function "_Z25count_half_goto2_pointer1IiEmPT_m"

Binary Function "_Z25count_half_goto2_pointer2IiEmPT_m" after disassembly {
  Number      : 113
  State       : disassembled
  Address     : 0x3240
  Size        : 0x23
  MaxSize     : 0x30
  Offset      : 0x3240
  Section     : .text
  Orc Section : .local.text._Z25count_half_goto2_pointer2IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0112:
    00000000: 	endbr64
    00000004: 	shlq	$0x2, %rsi
    00000008: 	leaq	-0x4(%rdi,%rsi), %rax
    0000000d: 	cmpq	%rax, %rdi
    00000010: 	jae	.Ltmp206 # Offset: 16
    00000012: 	leaq	-0x5(%rsi), %rax
    00000016: 	shrq	$0x3, %rax
    0000001a: 	leaq	0x1(%rax), %rax
    0000001e: 	retq # Offset: 30
    0000001f: 	nop # Size: 1
.Ltmp206:
    00000020: 	xorl	%eax, %eax
    00000022: 	retq # Offset: 34
DWARF CFI Instructions:
    <empty>
End of Function "_Z25count_half_goto2_pointer2IiEmPT_m"

Binary Function "_Z25count_half_goto2_pointer3IiEmPT_m" after disassembly {
  Number      : 114
  State       : disassembled
  Address     : 0x3270
  Size        : 0x3b
  MaxSize     : 0x40
  Offset      : 0x3270
  Section     : .text
  Orc Section : .local.text._Z25count_half_goto2_pointer3IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0113:
    00000000: 	endbr64
    00000004: 	leaq	-0x4(,%rsi,4), %rdx
    0000000c: 	xorl	%r8d, %r8d
    0000000f: 	leaq	(%rdi,%rdx), %rax
    00000013: 	testq	%rdx, %rdx
    00000016: 	jle	.Ltmp207 # Offset: 22
    00000018: 	nopl	(%rax,%rax) # Size: 8
.Ltmp208:
    00000020: 	subq	$0x4, %rax
    00000024: 	addq	$0x4, %rdi
    00000028: 	addq	$0x1, %r8
    0000002c: 	movq	%rax, %rdx
    0000002f: 	subq	%rdi, %rdx
    00000032: 	testq	%rdx, %rdx
    00000035: 	jg	.Ltmp208 # Offset: 53
.Ltmp207:
    00000037: 	movq	%r8, %rax
    0000003a: 	retq # Offset: 58
DWARF CFI Instructions:
    <empty>
End of Function "_Z25count_half_goto2_pointer3IiEmPT_m"

Binary Function "_Z23count_half_goto2_index1IiEmPT_m" after disassembly {
  Number      : 115
  State       : disassembled
  Address     : 0x32b0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x32b0
  Section     : .text
  Orc Section : .local.text._Z23count_half_goto2_index1IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0114:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	cmpq	$0x1, %rsi
    0000000a: 	je	.Ltmp209 # Offset: 10
    0000000c: 	nopl	(%rax) # Size: 4
.Ltmp210:
    00000010: 	addq	$0x1, %rax
    00000014: 	movq	%rsi, %rdx
    00000017: 	subq	%rax, %rdx
    0000001a: 	subq	$0x1, %rdx
    0000001e: 	cmpq	%rax, %rdx
    00000021: 	ja	.Ltmp210 # Offset: 33
    00000023: 	retq # Offset: 35
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp209:
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_goto2_index1IiEmPT_m"

Binary Function "_Z23count_half_goto2_index2IiEmPT_m" after disassembly {
  Number      : 116
  State       : disassembled
  Address     : 0x32e0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x32e0
  Section     : .text
  Orc Section : .local.text._Z23count_half_goto2_index2IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0115:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	cmpq	$0x1, %rsi
    0000000a: 	je	.Ltmp211 # Offset: 10
    0000000c: 	nopl	(%rax) # Size: 4
.Ltmp212:
    00000010: 	addq	$0x1, %rax
    00000014: 	movq	%rsi, %rdx
    00000017: 	subq	%rax, %rdx
    0000001a: 	subq	$0x1, %rdx
    0000001e: 	cmpq	%rax, %rdx
    00000021: 	ja	.Ltmp212 # Offset: 33
    00000023: 	retq # Offset: 35
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp211:
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_goto2_index2IiEmPT_m"

Binary Function "_Z23count_half_goto2_index3IiEmPT_m" after disassembly {
  Number      : 117
  State       : disassembled
  Address     : 0x3310
  Size        : 0x1b
  MaxSize     : 0x20
  Offset      : 0x3310
  Section     : .text
  Orc Section : .local.text._Z23count_half_goto2_index3IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0116:
    00000000: 	endbr64
    00000004: 	leal	-0x1(%rsi), %eax
    00000007: 	testl	%eax, %eax
    00000009: 	jle	.Ltmp213 # Offset: 9
    0000000b: 	subl	$0x2, %esi
    0000000e: 	shrl	%esi
    00000010: 	leal	0x1(%rsi), %eax
    00000013: 	retq # Offset: 19
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp213:
    00000018: 	xorl	%eax, %eax
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_goto2_index3IiEmPT_m"

Binary Function "_Z23count_half_goto2_index4IiEmPT_m" after disassembly {
  Number      : 118
  State       : disassembled
  Address     : 0x3330
  Size        : 0x21
  MaxSize     : 0x30
  Offset      : 0x3330
  Section     : .text
  Orc Section : .local.text._Z23count_half_goto2_index4IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0117:
    00000000: 	endbr64
    00000004: 	movl	%esi, %ecx
    00000006: 	subl	$0x1, %esi
    00000009: 	xorl	%eax, %eax
    0000000b: 	testl	%esi, %esi
    0000000d: 	jle	.Ltmp214 # Offset: 13
    0000000f: 	nop # Size: 1
.Ltmp215:
    00000010: 	addq	$0x1, %rax
    00000014: 	leal	0x1(%rax,%rax), %edx
    00000018: 	cmpl	%ecx, %edx
    0000001a: 	js	.Ltmp215 # Offset: 26
    0000001c: 	retq # Offset: 28
    0000001d: 	nopl	(%rax) # Size: 3
.Ltmp214:
    00000020: 	retq # Offset: 32
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_goto2_index4IiEmPT_m"

Binary Function "_Z23count_half_goto2_index5IiEmPT_m" after disassembly {
  Number      : 119
  State       : disassembled
  Address     : 0x3360
  Size        : 0x1b
  MaxSize     : 0x20
  Offset      : 0x3360
  Section     : .text
  Orc Section : .local.text._Z23count_half_goto2_index5IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0118:
    00000000: 	endbr64
    00000004: 	leal	-0x1(%rsi), %eax
    00000007: 	testl	%eax, %eax
    00000009: 	jle	.Ltmp216 # Offset: 9
    0000000b: 	subl	$0x2, %esi
    0000000e: 	shrl	%esi
    00000010: 	leal	0x1(%rsi), %eax
    00000013: 	retq # Offset: 19
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp216:
    00000018: 	xorl	%eax, %eax
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_goto2_index5IiEmPT_m"

Binary Function "_Z20count_half_goto3_optIiEmPT_m" after disassembly {
  Number      : 120
  State       : disassembled
  Address     : 0x3380
  Size        : 0xb
  MaxSize     : 0x10
  Offset      : 0x3380
  Section     : .text
  Orc Section : .local.text._Z20count_half_goto3_optIiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0119:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	shrq	%rax
    0000000a: 	retq # Offset: 10
DWARF CFI Instructions:
    <empty>
End of Function "_Z20count_half_goto3_optIiEmPT_m"

Binary Function "_Z28count_half_goto3_uncountableIiEmPT_m" after disassembly {
  Number      : 121
  State       : disassembled
  Address     : 0x3390
  Size        : 0x1c
  MaxSize     : 0x20
  Offset      : 0x3390
  Section     : .text
  Orc Section : .local.text._Z28count_half_goto3_uncountableIiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0120:
    00000000: 	endbr64
    00000004: 	movl	(%rdi), %ecx
    00000006: 	xorl	%eax, %eax
    00000008: 	testl	%ecx, %ecx
    0000000a: 	je	.Ltmp217 # Offset: 10
    0000000c: 	nopl	(%rax) # Size: 4
.Ltmp218:
    00000010: 	addq	$0x1, %rax
    00000014: 	movl	(%rdi,%rax,4), %edx
    00000017: 	testl	%edx, %edx
    00000019: 	jne	.Ltmp218 # Offset: 25
.Ltmp217:
    0000001b: 	retq # Offset: 27
DWARF CFI Instructions:
    <empty>
End of Function "_Z28count_half_goto3_uncountableIiEmPT_m"

Binary Function "_Z25count_half_goto3_pointer1IiEmPT_m" after disassembly {
  Number      : 122
  State       : disassembled
  Address     : 0x33b0
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x33b0
  Section     : .text
  Orc Section : .local.text._Z25count_half_goto3_pointer1IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0121:
    00000000: 	endbr64
    00000004: 	shlq	$0x2, %rsi
    00000008: 	leaq	-0x5(%rsi), %rax
    0000000c: 	leaq	-0x4(%rdi,%rsi), %rdx
    00000011: 	shrq	$0x3, %rax
    00000015: 	addq	$0x1, %rax
    00000019: 	cmpq	%rdx, %rdi
    0000001c: 	movl	$0x0, %edx
    00000021: 	cmovaeq	%rdx, %rax
    00000025: 	retq # Offset: 37
DWARF CFI Instructions:
    <empty>
End of Function "_Z25count_half_goto3_pointer1IiEmPT_m"

Binary Function "_Z25count_half_goto3_pointer2IiEmPT_m" after disassembly {
  Number      : 123
  State       : disassembled
  Address     : 0x33e0
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x33e0
  Section     : .text
  Orc Section : .local.text._Z25count_half_goto3_pointer2IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0122:
    00000000: 	endbr64
    00000004: 	shlq	$0x2, %rsi
    00000008: 	leaq	-0x5(%rsi), %rax
    0000000c: 	leaq	-0x4(%rdi,%rsi), %rdx
    00000011: 	shrq	$0x3, %rax
    00000015: 	addq	$0x1, %rax
    00000019: 	cmpq	%rdx, %rdi
    0000001c: 	movl	$0x0, %edx
    00000021: 	cmovaeq	%rdx, %rax
    00000025: 	retq # Offset: 37
DWARF CFI Instructions:
    <empty>
End of Function "_Z25count_half_goto3_pointer2IiEmPT_m"

Binary Function "_Z25count_half_goto3_pointer3IiEmPT_m" after disassembly {
  Number      : 124
  State       : disassembled
  Address     : 0x3410
  Size        : 0x3b
  MaxSize     : 0x40
  Offset      : 0x3410
  Section     : .text
  Orc Section : .local.text._Z25count_half_goto3_pointer3IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0123:
    00000000: 	endbr64
    00000004: 	leaq	-0x4(,%rsi,4), %rdx
    0000000c: 	xorl	%r8d, %r8d
    0000000f: 	leaq	(%rdi,%rdx), %rax
    00000013: 	testq	%rdx, %rdx
    00000016: 	jle	.Ltmp219 # Offset: 22
    00000018: 	nopl	(%rax,%rax) # Size: 8
.Ltmp220:
    00000020: 	subq	$0x4, %rax
    00000024: 	addq	$0x4, %rdi
    00000028: 	addq	$0x1, %r8
    0000002c: 	movq	%rax, %rdx
    0000002f: 	subq	%rdi, %rdx
    00000032: 	testq	%rdx, %rdx
    00000035: 	jg	.Ltmp220 # Offset: 53
.Ltmp219:
    00000037: 	movq	%r8, %rax
    0000003a: 	retq # Offset: 58
DWARF CFI Instructions:
    <empty>
End of Function "_Z25count_half_goto3_pointer3IiEmPT_m"

Binary Function "_Z23count_half_goto3_index1IiEmPT_m" after disassembly {
  Number      : 125
  State       : disassembled
  Address     : 0x3450
  Size        : 0x24
  MaxSize     : 0x30
  Offset      : 0x3450
  Section     : .text
  Orc Section : .local.text._Z23count_half_goto3_index1IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0124:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	cmpq	$0x1, %rsi
    0000000a: 	je	.Ltmp221 # Offset: 10
    0000000c: 	nopl	(%rax) # Size: 4
.Ltmp222:
    00000010: 	addq	$0x1, %rax
    00000014: 	movq	%rsi, %rdx
    00000017: 	subq	%rax, %rdx
    0000001a: 	subq	$0x1, %rdx
    0000001e: 	cmpq	%rax, %rdx
    00000021: 	ja	.Ltmp222 # Offset: 33
.Ltmp221:
    00000023: 	retq # Offset: 35
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_goto3_index1IiEmPT_m"

Binary Function "_Z23count_half_goto3_index2IiEmPT_m" after disassembly {
  Number      : 126
  State       : disassembled
  Address     : 0x3480
  Size        : 0x24
  MaxSize     : 0x30
  Offset      : 0x3480
  Section     : .text
  Orc Section : .local.text._Z23count_half_goto3_index2IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0125:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	cmpq	$0x1, %rsi
    0000000a: 	je	.Ltmp223 # Offset: 10
    0000000c: 	nopl	(%rax) # Size: 4
.Ltmp224:
    00000010: 	addq	$0x1, %rax
    00000014: 	movq	%rsi, %rdx
    00000017: 	subq	%rax, %rdx
    0000001a: 	subq	$0x1, %rdx
    0000001e: 	cmpq	%rax, %rdx
    00000021: 	ja	.Ltmp224 # Offset: 33
.Ltmp223:
    00000023: 	retq # Offset: 35
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_goto3_index2IiEmPT_m"

Binary Function "_Z23count_half_goto3_index3IiEmPT_m" after disassembly {
  Number      : 127
  State       : disassembled
  Address     : 0x34b0
  Size        : 0x1b
  MaxSize     : 0x20
  Offset      : 0x34b0
  Section     : .text
  Orc Section : .local.text._Z23count_half_goto3_index3IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0126:
    00000000: 	endbr64
    00000004: 	leal	-0x1(%rsi), %eax
    00000007: 	testl	%eax, %eax
    00000009: 	jle	.Ltmp225 # Offset: 9
    0000000b: 	subl	$0x2, %esi
    0000000e: 	shrl	%esi
    00000010: 	leal	0x1(%rsi), %eax
    00000013: 	retq # Offset: 19
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp225:
    00000018: 	xorl	%eax, %eax
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_goto3_index3IiEmPT_m"

Binary Function "_Z23count_half_goto3_index4IiEmPT_m" after disassembly {
  Number      : 128
  State       : disassembled
  Address     : 0x34d0
  Size        : 0x1d
  MaxSize     : 0x20
  Offset      : 0x34d0
  Section     : .text
  Orc Section : .local.text._Z23count_half_goto3_index4IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0127:
    00000000: 	endbr64
    00000004: 	movl	%esi, %ecx
    00000006: 	subl	$0x1, %esi
    00000009: 	xorl	%eax, %eax
    0000000b: 	testl	%esi, %esi
    0000000d: 	jle	.Ltmp226 # Offset: 13
    0000000f: 	nop # Size: 1
.Ltmp227:
    00000010: 	addq	$0x1, %rax
    00000014: 	leal	0x1(%rax,%rax), %edx
    00000018: 	cmpl	%ecx, %edx
    0000001a: 	js	.Ltmp227 # Offset: 26
.Ltmp226:
    0000001c: 	retq # Offset: 28
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_goto3_index4IiEmPT_m"

Binary Function "_Z23count_half_goto3_index5IiEmPT_m" after disassembly {
  Number      : 129
  State       : disassembled
  Address     : 0x34f0
  Size        : 0x1b
  MaxSize     : 0x20
  Offset      : 0x34f0
  Section     : .text
  Orc Section : .local.text._Z23count_half_goto3_index5IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0128:
    00000000: 	endbr64
    00000004: 	leal	-0x1(%rsi), %eax
    00000007: 	testl	%eax, %eax
    00000009: 	jle	.Ltmp228 # Offset: 9
    0000000b: 	subl	$0x2, %esi
    0000000e: 	shrl	%esi
    00000010: 	leal	0x1(%rsi), %eax
    00000013: 	retq # Offset: 19
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp228:
    00000018: 	xorl	%eax, %eax
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_goto3_index5IiEmPT_m"

Binary Function "_Z20count_half_goto4_optIiEmPT_m" after disassembly {
  Number      : 130
  State       : disassembled
  Address     : 0x3510
  Size        : 0x19
  MaxSize     : 0x20
  Offset      : 0x3510
  Section     : .text
  Orc Section : .local.text._Z20count_half_goto4_optIiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0129:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	cmpq	$0x1, %rsi
    0000000a: 	jbe	.Ltmp229 # Offset: 10
    0000000c: 	shrq	%rsi
    0000000f: 	movl	$0x1, %eax
    00000014: 	cmovneq	%rsi, %rax
.Ltmp229:
    00000018: 	retq # Offset: 24
DWARF CFI Instructions:
    <empty>
End of Function "_Z20count_half_goto4_optIiEmPT_m"

Binary Function "_Z28count_half_goto4_uncountableIiEmPT_m" after disassembly {
  Number      : 131
  State       : disassembled
  Address     : 0x3530
  Size        : 0x1c
  MaxSize     : 0x20
  Offset      : 0x3530
  Section     : .text
  Orc Section : .local.text._Z28count_half_goto4_uncountableIiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0130:
    00000000: 	endbr64
    00000004: 	movl	(%rdi), %ecx
    00000006: 	xorl	%eax, %eax
    00000008: 	testl	%ecx, %ecx
    0000000a: 	je	.Ltmp230 # Offset: 10
    0000000c: 	nopl	(%rax) # Size: 4
.Ltmp231:
    00000010: 	addq	$0x1, %rax
    00000014: 	movl	(%rdi,%rax,4), %edx
    00000017: 	testl	%edx, %edx
    00000019: 	jne	.Ltmp231 # Offset: 25
.Ltmp230:
    0000001b: 	retq # Offset: 27
DWARF CFI Instructions:
    <empty>
End of Function "_Z28count_half_goto4_uncountableIiEmPT_m"

Binary Function "_Z25count_half_goto4_pointer1IiEmPT_m" after disassembly {
  Number      : 132
  State       : disassembled
  Address     : 0x3550
  Size        : 0x21
  MaxSize     : 0x30
  Offset      : 0x3550
  Section     : .text
  Orc Section : .local.text._Z25count_half_goto4_pointer1IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0131:
    00000000: 	endbr64
    00000004: 	shlq	$0x2, %rsi
    00000008: 	xorl	%eax, %eax
    0000000a: 	leaq	-0x4(%rdi,%rsi), %rdx
    0000000f: 	cmpq	%rdx, %rdi
    00000012: 	jae	.Ltmp232 # Offset: 18
    00000014: 	subq	$0x5, %rsi
    00000018: 	shrq	$0x3, %rsi
    0000001c: 	leaq	0x1(%rsi), %rax
.Ltmp232:
    00000020: 	retq # Offset: 32
DWARF CFI Instructions:
    <empty>
End of Function "_Z25count_half_goto4_pointer1IiEmPT_m"

Binary Function "_Z25count_half_goto4_pointer2IiEmPT_m" after disassembly {
  Number      : 133
  State       : disassembled
  Address     : 0x3580
  Size        : 0x21
  MaxSize     : 0x30
  Offset      : 0x3580
  Section     : .text
  Orc Section : .local.text._Z25count_half_goto4_pointer2IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0132:
    00000000: 	endbr64
    00000004: 	shlq	$0x2, %rsi
    00000008: 	xorl	%eax, %eax
    0000000a: 	leaq	-0x4(%rdi,%rsi), %rdx
    0000000f: 	cmpq	%rdx, %rdi
    00000012: 	jae	.Ltmp233 # Offset: 18
    00000014: 	subq	$0x5, %rsi
    00000018: 	shrq	$0x3, %rsi
    0000001c: 	leaq	0x1(%rsi), %rax
.Ltmp233:
    00000020: 	retq # Offset: 32
DWARF CFI Instructions:
    <empty>
End of Function "_Z25count_half_goto4_pointer2IiEmPT_m"

Binary Function "_Z25count_half_goto4_pointer3IiEmPT_m" after disassembly {
  Number      : 134
  State       : disassembled
  Address     : 0x35b0
  Size        : 0x3b
  MaxSize     : 0x40
  Offset      : 0x35b0
  Section     : .text
  Orc Section : .local.text._Z25count_half_goto4_pointer3IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0133:
    00000000: 	endbr64
    00000004: 	leaq	-0x4(,%rsi,4), %rax
    0000000c: 	xorl	%r8d, %r8d
    0000000f: 	testq	%rax, %rax
    00000012: 	jle	.Ltmp234 # Offset: 18
    00000014: 	addq	%rdi, %rax
    00000017: 	nopw	(%rax,%rax) # Size: 9
.Ltmp235:
    00000020: 	subq	$0x4, %rax
    00000024: 	addq	$0x4, %rdi
    00000028: 	addq	$0x1, %r8
    0000002c: 	movq	%rax, %rdx
    0000002f: 	subq	%rdi, %rdx
    00000032: 	testq	%rdx, %rdx
    00000035: 	jg	.Ltmp235 # Offset: 53
.Ltmp234:
    00000037: 	movq	%r8, %rax
    0000003a: 	retq # Offset: 58
DWARF CFI Instructions:
    <empty>
End of Function "_Z25count_half_goto4_pointer3IiEmPT_m"

Binary Function "_Z23count_half_goto4_index1IiEmPT_m" after disassembly {
  Number      : 135
  State       : disassembled
  Address     : 0x35f0
  Size        : 0x24
  MaxSize     : 0x30
  Offset      : 0x35f0
  Section     : .text
  Orc Section : .local.text._Z23count_half_goto4_index1IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0134:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	cmpq	$0x1, %rsi
    0000000a: 	je	.Ltmp236 # Offset: 10
    0000000c: 	nopl	(%rax) # Size: 4
.Ltmp237:
    00000010: 	addq	$0x1, %rax
    00000014: 	movq	%rsi, %rdx
    00000017: 	subq	%rax, %rdx
    0000001a: 	subq	$0x1, %rdx
    0000001e: 	cmpq	%rdx, %rax
    00000021: 	jb	.Ltmp237 # Offset: 33
.Ltmp236:
    00000023: 	retq # Offset: 35
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_goto4_index1IiEmPT_m"

Binary Function "_Z23count_half_goto4_index2IiEmPT_m" after disassembly {
  Number      : 136
  State       : disassembled
  Address     : 0x3620
  Size        : 0x24
  MaxSize     : 0x30
  Offset      : 0x3620
  Section     : .text
  Orc Section : .local.text._Z23count_half_goto4_index2IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0135:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	cmpq	$0x1, %rsi
    0000000a: 	je	.Ltmp238 # Offset: 10
    0000000c: 	nopl	(%rax) # Size: 4
.Ltmp239:
    00000010: 	addq	$0x1, %rax
    00000014: 	movq	%rsi, %rdx
    00000017: 	subq	%rax, %rdx
    0000001a: 	subq	$0x1, %rdx
    0000001e: 	cmpq	%rdx, %rax
    00000021: 	jb	.Ltmp239 # Offset: 33
.Ltmp238:
    00000023: 	retq # Offset: 35
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_goto4_index2IiEmPT_m"

Binary Function "_Z23count_half_goto4_index3IiEmPT_m" after disassembly {
  Number      : 137
  State       : disassembled
  Address     : 0x3650
  Size        : 0x16
  MaxSize     : 0x20
  Offset      : 0x3650
  Section     : .text
  Orc Section : .local.text._Z23count_half_goto4_index3IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0136:
    00000000: 	endbr64
    00000004: 	leal	-0x1(%rsi), %edx
    00000007: 	xorl	%eax, %eax
    00000009: 	testl	%edx, %edx
    0000000b: 	jle	.Ltmp240 # Offset: 11
    0000000d: 	subl	$0x2, %esi
    00000010: 	shrl	%esi
    00000012: 	leal	0x1(%rsi), %eax
.Ltmp240:
    00000015: 	retq # Offset: 21
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_goto4_index3IiEmPT_m"

Binary Function "_Z23count_half_goto4_index4IiEmPT_m" after disassembly {
  Number      : 138
  State       : disassembled
  Address     : 0x3670
  Size        : 0x1d
  MaxSize     : 0x20
  Offset      : 0x3670
  Section     : .text
  Orc Section : .local.text._Z23count_half_goto4_index4IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0137:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp241:
    00000010: 	addq	$0x1, %rax
    00000014: 	leal	0x1(%rax,%rax), %edx
    00000018: 	cmpl	%esi, %edx
    0000001a: 	js	.Ltmp241 # Offset: 26
    0000001c: 	retq # Offset: 28
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_goto4_index4IiEmPT_m"

Binary Function "_Z23count_half_goto4_index5IiEmPT_m" after disassembly {
  Number      : 139
  State       : disassembled
  Address     : 0x3690
  Size        : 0x27
  MaxSize     : 0x30
  Offset      : 0x3690
  Section     : .text
  Orc Section : .local.text._Z23count_half_goto4_index5IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0138:
    00000000: 	endbr64
    00000004: 	xorl	%r8d, %r8d
    00000007: 	nopw	(%rax,%rax) # Size: 9
.Ltmp242:
    00000010: 	addq	$0x1, %r8
    00000014: 	movl	%esi, %eax
    00000016: 	leal	(%r8,%r8), %edx
    0000001a: 	subl	%edx, %eax
    0000001c: 	subl	$0x1, %eax
    0000001f: 	testl	%eax, %eax
    00000021: 	jg	.Ltmp242 # Offset: 33
    00000023: 	movq	%r8, %rax
    00000026: 	retq # Offset: 38
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_goto4_index5IiEmPT_m"

Binary Function "_Z23count_half_forrange_optISt6vectorIiSaIiEEEmRKT_m" after disassembly {
  Number      : 140
  State       : disassembled
  Address     : 0x36c0
  Size        : 0x13
  MaxSize     : 0x20
  Offset      : 0x36c0
  Section     : .text
  Orc Section : .local.text._Z23count_half_forrange_optISt6vectorIiSaIiEEEmRKT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0139:
    00000000: 	endbr64
    00000004: 	movq	0x8(%rdi), %rax
    00000008: 	subq	(%rdi), %rax
    0000000b: 	sarq	$0x2, %rax
    0000000f: 	shrq	%rax
    00000012: 	retq # Offset: 18
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_forrange_optISt6vectorIiSaIiEEEmRKT_m"

Binary Function "_Z24count_half_forrange_opt2ISt6vectorIiSaIiEEEmRKT_m" after disassembly {
  Number      : 141
  State       : disassembled
  Address     : 0x36e0
  Size        : 0xb
  MaxSize     : 0x10
  Offset      : 0x36e0
  Section     : .text
  Orc Section : .local.text._Z24count_half_forrange_opt2ISt6vectorIiSaIiEEEmRKT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0140:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	shrq	%rax
    0000000a: 	retq # Offset: 10
DWARF CFI Instructions:
    <empty>
End of Function "_Z24count_half_forrange_opt2ISt6vectorIiSaIiEEEmRKT_m"

Binary Function "_Z31count_half_forrange_uncountableISt6vectorIiSaIiEEEmRKT_m" after disassembly {
  Number      : 142
  State       : disassembled
  Address     : 0x36f0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x36f0
  Section     : .text
  Orc Section : .local.text._Z31count_half_forrange_uncountableISt6vectorIiSaIiEEEmRKT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0141:
    00000000: 	endbr64
    00000004: 	movq	(%rdi), %rax
    00000007: 	movq	0x8(%rdi), %rdx
    0000000b: 	xorl	%r8d, %r8d
    0000000e: 	cmpq	%rax, %rdx
    00000011: 	jne	.Ltmp243 # Offset: 17
    00000013: 	jmp	.Ltmp244 # Offset: 19
    00000015: 	nopl	(%rax) # Size: 3
.Ltmp245:
    00000018: 	addq	$0x4, %rax
    0000001c: 	addq	$0x1, %r8
    00000020: 	cmpq	%rax, %rdx
    00000023: 	je	.Ltmp244 # Offset: 35
.Ltmp243:
    00000025: 	movl	(%rax), %ecx
    00000027: 	testl	%ecx, %ecx
    00000029: 	jne	.Ltmp245 # Offset: 41
.Ltmp244:
    0000002b: 	movq	%r8, %rax
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_Z31count_half_forrange_uncountableISt6vectorIiSaIiEEEmRKT_m"

Binary Function "_Z20count_half_forrange1ISt6vectorIiSaIiEEEmRKT_m" after disassembly {
  Number      : 143
  State       : disassembled
  Address     : 0x3720
  Size        : 0x4b
  MaxSize     : 0x50
  Offset      : 0x3720
  Section     : .text
  Orc Section : .local.text._Z20count_half_forrange1ISt6vectorIiSaIiEEEmRKT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0142:
    00000000: 	endbr64
    00000004: 	movq	0x8(%rdi), %rcx
    00000008: 	movq	(%rdi), %rax
    0000000b: 	movq	%rcx, %rdx
    0000000e: 	subq	%rax, %rdx
    00000011: 	sarq	$0x2, %rdx
    00000015: 	shrq	%rdx
    00000018: 	cmpq	%rax, %rcx
    0000001b: 	je	.Ltmp246 # Offset: 27
    0000001d: 	movl	$0x1, %r8d
    00000023: 	cmpq	$0x1, %rdx
    00000027: 	jne	.Ltmp247 # Offset: 39
    00000029: 	jmp	.Ltmp248 # Offset: 41
    0000002b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp249:
    00000030: 	addq	$0x1, %r8
    00000034: 	cmpq	%r8, %rdx
    00000037: 	je	.Ltmp248 # Offset: 55
.Ltmp247:
    00000039: 	addq	$0x4, %rax
    0000003d: 	cmpq	%rax, %rcx
    00000040: 	jne	.Ltmp249 # Offset: 64
.Ltmp248:
    00000042: 	movq	%r8, %rax
    00000045: 	retq # Offset: 69
.Ltmp246:
    00000046: 	xorl	%r8d, %r8d
    00000049: 	jmp	.Ltmp248 # Offset: 73
DWARF CFI Instructions:
    <empty>
End of Function "_Z20count_half_forrange1ISt6vectorIiSaIiEEEmRKT_m"

Binary Function "_Z20count_half_forrange2ISt6vectorIiSaIiEEEmRKT_m" after disassembly {
  Number      : 144
  State       : disassembled
  Address     : 0x3770
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x3770
  Section     : .text
  Orc Section : .local.text._Z20count_half_forrange2ISt6vectorIiSaIiEEEmRKT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0143:
    00000000: 	endbr64
    00000004: 	movq	(%rdi), %rdx
    00000007: 	movq	0x8(%rdi), %rax
    0000000b: 	cmpq	%rdx, %rax
    0000000e: 	je	.Ltmp250 # Offset: 14
    00000010: 	subq	$0x4, %rax
    00000014: 	subq	%rdx, %rax
    00000017: 	shrq	$0x2, %rax
    0000001b: 	addq	$0x1, %rax
    0000001f: 	shrq	%rax
    00000022: 	retq # Offset: 34
    00000023: 	nopl	(%rax,%rax) # Size: 5
.Ltmp250:
    00000028: 	xorl	%eax, %eax
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_Z20count_half_forrange2ISt6vectorIiSaIiEEEmRKT_m"

Binary Function "_Z20count_half_forrange3ISt6vectorIiSaIiEEEmRKT_m" after disassembly {
  Number      : 145
  State       : disassembled
  Address     : 0x37a0
  Size        : 0x4f
  MaxSize     : 0x50
  Offset      : 0x37a0
  Section     : .text
  Orc Section : .local.text._Z20count_half_forrange3ISt6vectorIiSaIiEEEmRKT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0144:
    00000000: 	endbr64
    00000004: 	movq	0x8(%rdi), %rsi
    00000008: 	movq	(%rdi), %rax
    0000000b: 	movq	%rsi, %rcx
    0000000e: 	subq	%rax, %rcx
    00000011: 	sarq	$0x2, %rcx
    00000015: 	cmpq	%rax, %rsi
    00000018: 	je	.Ltmp251 # Offset: 24
    0000001a: 	movl	$0x1, %r8d
    00000020: 	cmpq	$0x2, %rcx
    00000024: 	jne	.Ltmp252 # Offset: 36
    00000026: 	jmp	.Ltmp253 # Offset: 38
    00000028: 	nopl	(%rax,%rax) # Size: 8
.Ltmp254:
    00000030: 	addq	$0x1, %r8
    00000034: 	leaq	(%r8,%r8), %rdx
    00000038: 	cmpq	%rcx, %rdx
    0000003b: 	je	.Ltmp253 # Offset: 59
.Ltmp252:
    0000003d: 	addq	$0x4, %rax
    00000041: 	cmpq	%rax, %rsi
    00000044: 	jne	.Ltmp254 # Offset: 68
.Ltmp253:
    00000046: 	movq	%r8, %rax
    00000049: 	retq # Offset: 73
.Ltmp251:
    0000004a: 	xorl	%r8d, %r8d
    0000004d: 	jmp	.Ltmp253 # Offset: 77
DWARF CFI Instructions:
    <empty>
End of Function "_Z20count_half_forrange3ISt6vectorIiSaIiEEEmRKT_m"

Binary Function "_Z18count_half_for_optIhEmPT_m" after disassembly {
  Number      : 146
  State       : disassembled
  Address     : 0x37f0
  Size        : 0xb
  MaxSize     : 0x10
  Offset      : 0x37f0
  Section     : .text
  Orc Section : .local.text._Z18count_half_for_optIhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0145:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	shrq	%rax
    0000000a: 	retq # Offset: 10
DWARF CFI Instructions:
    <empty>
End of Function "_Z18count_half_for_optIhEmPT_m"

Binary Function "_Z15count_half_optAIhEmPT_m" after disassembly {
  Number      : 147
  State       : disassembled
  Address     : 0x3800
  Size        : 0xb
  MaxSize     : 0x10
  Offset      : 0x3800
  Section     : .text
  Orc Section : .local.text._Z15count_half_optAIhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0146:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	shrq	%rax
    0000000a: 	retq # Offset: 10
DWARF CFI Instructions:
    <empty>
End of Function "_Z15count_half_optAIhEmPT_m"

Binary Function "_Z26count_half_for_uncountableIhEmPT_m" after disassembly {
  Number      : 148
  State       : disassembled
  Address     : 0x3810
  Size        : 0x21
  MaxSize     : 0x30
  Offset      : 0x3810
  Section     : .text
  Orc Section : .local.text._Z26count_half_for_uncountableIhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0147:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	cmpb	$0x0, (%rdi)
    00000009: 	je	.Ltmp255 # Offset: 9
    0000000b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp256:
    00000010: 	addq	$0x1, %rax
    00000014: 	cmpb	$0x0, (%rdi,%rax)
    00000018: 	jne	.Ltmp256 # Offset: 24
    0000001a: 	retq # Offset: 26
    0000001b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp255:
    00000020: 	retq # Offset: 32
DWARF CFI Instructions:
    <empty>
End of Function "_Z26count_half_for_uncountableIhEmPT_m"

Binary Function "_Z23count_half_for_pointer1IhEmPT_m" after disassembly {
  Number      : 149
  State       : disassembled
  Address     : 0x3840
  Size        : 0x23
  MaxSize     : 0x30
  Offset      : 0x3840
  Section     : .text
  Orc Section : .local.text._Z23count_half_for_pointer1IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0148:
    00000000: 	endbr64
    00000004: 	leaq	-0x1(%rdi,%rsi), %rax
    00000009: 	cmpq	%rax, %rdi
    0000000c: 	jae	.Ltmp257 # Offset: 12
    0000000e: 	leaq	-0x2(%rsi), %rax
    00000012: 	shrq	%rax
    00000015: 	leaq	0x1(%rax), %rax
    00000019: 	retq # Offset: 25
    0000001a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp257:
    00000020: 	xorl	%eax, %eax
    00000022: 	retq # Offset: 34
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_for_pointer1IhEmPT_m"

Binary Function "_Z23count_half_for_pointer2IhEmPT_m" after disassembly {
  Number      : 150
  State       : disassembled
  Address     : 0x3870
  Size        : 0x23
  MaxSize     : 0x30
  Offset      : 0x3870
  Section     : .text
  Orc Section : .local.text._Z23count_half_for_pointer2IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0149:
    00000000: 	endbr64
    00000004: 	leaq	-0x1(%rdi,%rsi), %rax
    00000009: 	cmpq	%rax, %rdi
    0000000c: 	jae	.Ltmp258 # Offset: 12
    0000000e: 	leaq	-0x2(%rsi), %rax
    00000012: 	shrq	%rax
    00000015: 	leaq	0x1(%rax), %rax
    00000019: 	retq # Offset: 25
    0000001a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp258:
    00000020: 	xorl	%eax, %eax
    00000022: 	retq # Offset: 34
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_for_pointer2IhEmPT_m"

Binary Function "_Z23count_half_for_pointer3IhEmPT_m" after disassembly {
  Number      : 151
  State       : disassembled
  Address     : 0x38a0
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x38a0
  Section     : .text
  Orc Section : .local.text._Z23count_half_for_pointer3IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0150:
    00000000: 	endbr64
    00000004: 	subq	$0x1, %rsi
    00000008: 	xorl	%eax, %eax
    0000000a: 	leaq	(%rdi,%rsi), %r8
    0000000e: 	testq	%rsi, %rsi
    00000011: 	jle	.Ltmp259 # Offset: 17
    00000013: 	nopl	(%rax,%rax) # Size: 5
.Ltmp260:
    00000018: 	addq	$0x1, %rax
    0000001c: 	movq	%r8, %rdx
    0000001f: 	subq	%rax, %rdx
    00000022: 	leaq	(%rdi,%rax), %rcx
    00000026: 	subq	%rcx, %rdx
    00000029: 	testq	%rdx, %rdx
    0000002c: 	jg	.Ltmp260 # Offset: 44
    0000002e: 	retq # Offset: 46
    0000002f: 	nop # Size: 1
.Ltmp259:
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_for_pointer3IhEmPT_m"

Binary Function "_Z23count_half_for_pointer4IhEmPT_m" after disassembly {
  Number      : 152
  State       : disassembled
  Address     : 0x38e0
  Size        : 0x23
  MaxSize     : 0x30
  Offset      : 0x38e0
  Section     : .text
  Orc Section : .local.text._Z23count_half_for_pointer4IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0151:
    00000000: 	endbr64
    00000004: 	leaq	-0x1(%rdi,%rsi), %rax
    00000009: 	cmpq	%rax, %rdi
    0000000c: 	jae	.Ltmp261 # Offset: 12
    0000000e: 	leaq	-0x2(%rsi), %rax
    00000012: 	shrq	%rax
    00000015: 	leaq	0x1(%rax), %rax
    00000019: 	retq # Offset: 25
    0000001a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp261:
    00000020: 	xorl	%eax, %eax
    00000022: 	retq # Offset: 34
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_for_pointer4IhEmPT_m"

Binary Function "_Z23count_half_for_pointer5IhEmPT_m" after disassembly {
  Number      : 153
  State       : disassembled
  Address     : 0x3910
  Size        : 0x47
  MaxSize     : 0x50
  Offset      : 0x3910
  Section     : .text
  Orc Section : .local.text._Z23count_half_for_pointer5IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0152:
    00000000: 	endbr64
    00000004: 	addq	%rdi, %rsi
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp262 # Offset: 10
    0000000c: 	leaq	-0x1(%rsi), %rax
    00000010: 	cmpq	%rax, %rdi
    00000013: 	jne	.Ltmp263 # Offset: 19
    00000015: 	jmp	.Ltmp262 # Offset: 21
    00000017: 	nopw	(%rax,%rax) # Size: 9
.Ltmp265:
    00000020: 	subq	$0x1, %rax
    00000024: 	cmpq	%rdi, %rax
    00000027: 	je	.Ltmp264 # Offset: 39
.Ltmp263:
    00000029: 	movq	%rsi, %r8
    0000002c: 	addq	$0x1, %rdi
    00000030: 	subq	%rax, %r8
    00000033: 	cmpq	%rax, %rdi
    00000036: 	jne	.Ltmp265 # Offset: 54
.Ltmp264:
    00000038: 	movq	%r8, %rax
    0000003b: 	retq # Offset: 59
    0000003c: 	nopl	(%rax) # Size: 4
.Ltmp262:
    00000040: 	xorl	%r8d, %r8d
    00000043: 	movq	%r8, %rax
    00000046: 	retq # Offset: 70
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_for_pointer5IhEmPT_m"

Binary Function "_Z23count_half_for_pointer6IhEmPT_m" after disassembly {
  Number      : 154
  State       : disassembled
  Address     : 0x3960
  Size        : 0x23
  MaxSize     : 0x30
  Offset      : 0x3960
  Section     : .text
  Orc Section : .local.text._Z23count_half_for_pointer6IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0153:
    00000000: 	endbr64
    00000004: 	leaq	-0x1(%rdi,%rsi), %rax
    00000009: 	cmpq	%rax, %rdi
    0000000c: 	jae	.Ltmp266 # Offset: 12
    0000000e: 	leaq	-0x2(%rsi), %rax
    00000012: 	shrq	%rax
    00000015: 	leaq	0x1(%rax), %rax
    00000019: 	retq # Offset: 25
    0000001a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp266:
    00000020: 	xorl	%eax, %eax
    00000022: 	retq # Offset: 34
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_for_pointer6IhEmPT_m"

Binary Function "_Z23count_half_for_pointer7IhEmPT_m" after disassembly {
  Number      : 155
  State       : disassembled
  Address     : 0x3990
  Size        : 0x34
  MaxSize     : 0x40
  Offset      : 0x3990
  Section     : .text
  Orc Section : .local.text._Z23count_half_for_pointer7IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0154:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rdx
    00000007: 	leaq	(%rdi,%rsi), %rax
    0000000b: 	shrq	%rdx
    0000000e: 	cmpq	%rdi, %rax
    00000011: 	jbe	.Ltmp267 # Offset: 17
    00000013: 	movl	$0x1, %eax
    00000018: 	cmpq	$0x1, %rdx
    0000001c: 	jne	.Ltmp268 # Offset: 28
    0000001e: 	jmp	.Ltmp269 # Offset: 30
.Ltmp270:
    00000020: 	addq	$0x1, %rax
    00000024: 	cmpq	%rax, %rdx
    00000027: 	je	.Ltmp269 # Offset: 39
.Ltmp268:
    00000029: 	cmpq	%rax, %rsi
    0000002c: 	jne	.Ltmp270 # Offset: 44
    0000002e: 	retq # Offset: 46
    0000002f: 	nop # Size: 1
.Ltmp269:
    00000030: 	retq # Offset: 48
.Ltmp267:
    00000031: 	xorl	%eax, %eax
    00000033: 	retq # Offset: 51
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_for_pointer7IhEmPT_m"

Binary Function "_Z23count_half_for_pointer8IhEmPT_m" after disassembly {
  Number      : 156
  State       : disassembled
  Address     : 0x39d0
  Size        : 0x43
  MaxSize     : 0x50
  Offset      : 0x39d0
  Section     : .text
  Orc Section : .local.text._Z23count_half_for_pointer8IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0155:
    00000000: 	endbr64
    00000004: 	addq	%rdi, %rsi
    00000007: 	leaq	-0x1(%rsi), %rdx
    0000000b: 	cmpq	%rdx, %rdi
    0000000e: 	jae	.Ltmp271 # Offset: 14
    00000010: 	cmpq	%rsi, %rdi
    00000013: 	jae	.Ltmp271 # Offset: 19
    00000015: 	movq	%rdi, %rax
    00000018: 	jmp	.Ltmp272 # Offset: 24
    0000001a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp274:
    00000020: 	cmpq	%rax, %rsi
    00000023: 	jbe	.Ltmp273 # Offset: 35
.Ltmp272:
    00000025: 	addq	$0x1, %rax
    00000029: 	subq	$0x1, %rdx
    0000002d: 	cmpq	%rdx, %rax
    00000030: 	jb	.Ltmp274 # Offset: 48
.Ltmp273:
    00000032: 	subq	%rdi, %rax
    00000035: 	retq # Offset: 53
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp271:
    00000040: 	xorl	%eax, %eax
    00000042: 	retq # Offset: 66
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_for_pointer8IhEmPT_m"

Binary Function "_Z21count_half_for_index1IhEmPT_m" after disassembly {
  Number      : 157
  State       : disassembled
  Address     : 0x3a20
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x3a20
  Section     : .text
  Orc Section : .local.text._Z21count_half_for_index1IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0156:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	cmpq	$0x1, %rsi
    0000000a: 	je	.Ltmp275 # Offset: 10
    0000000c: 	nopl	(%rax) # Size: 4
.Ltmp276:
    00000010: 	addq	$0x1, %rax
    00000014: 	movq	%rsi, %rdx
    00000017: 	subq	%rax, %rdx
    0000001a: 	subq	$0x1, %rdx
    0000001e: 	cmpq	%rax, %rdx
    00000021: 	ja	.Ltmp276 # Offset: 33
    00000023: 	retq # Offset: 35
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp275:
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_Z21count_half_for_index1IhEmPT_m"

Binary Function "_Z21count_half_for_index2IhEmPT_m" after disassembly {
  Number      : 158
  State       : disassembled
  Address     : 0x3a50
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x3a50
  Section     : .text
  Orc Section : .local.text._Z21count_half_for_index2IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0157:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	cmpq	$0x1, %rsi
    0000000a: 	je	.Ltmp277 # Offset: 10
    0000000c: 	nopl	(%rax) # Size: 4
.Ltmp278:
    00000010: 	addq	$0x1, %rax
    00000014: 	movq	%rsi, %rdx
    00000017: 	subq	%rax, %rdx
    0000001a: 	subq	$0x1, %rdx
    0000001e: 	cmpq	%rax, %rdx
    00000021: 	ja	.Ltmp278 # Offset: 33
    00000023: 	retq # Offset: 35
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp277:
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_Z21count_half_for_index2IhEmPT_m"

Binary Function "_Z21count_half_for_index3IhEmPT_m" after disassembly {
  Number      : 159
  State       : disassembled
  Address     : 0x3a80
  Size        : 0x1b
  MaxSize     : 0x20
  Offset      : 0x3a80
  Section     : .text
  Orc Section : .local.text._Z21count_half_for_index3IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0158:
    00000000: 	endbr64
    00000004: 	leal	-0x1(%rsi), %eax
    00000007: 	testl	%eax, %eax
    00000009: 	jle	.Ltmp279 # Offset: 9
    0000000b: 	subl	$0x2, %esi
    0000000e: 	shrl	%esi
    00000010: 	leal	0x1(%rsi), %eax
    00000013: 	retq # Offset: 19
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp279:
    00000018: 	xorl	%eax, %eax
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_Z21count_half_for_index3IhEmPT_m"

Binary Function "_Z21count_half_for_index4IhEmPT_m" after disassembly {
  Number      : 160
  State       : disassembled
  Address     : 0x3aa0
  Size        : 0x21
  MaxSize     : 0x30
  Offset      : 0x3aa0
  Section     : .text
  Orc Section : .local.text._Z21count_half_for_index4IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0159:
    00000000: 	endbr64
    00000004: 	movl	%esi, %ecx
    00000006: 	subl	$0x1, %esi
    00000009: 	xorl	%eax, %eax
    0000000b: 	testl	%esi, %esi
    0000000d: 	jle	.Ltmp280 # Offset: 13
    0000000f: 	nop # Size: 1
.Ltmp281:
    00000010: 	addq	$0x1, %rax
    00000014: 	leal	0x1(%rax,%rax), %edx
    00000018: 	cmpl	%ecx, %edx
    0000001a: 	js	.Ltmp281 # Offset: 26
    0000001c: 	retq # Offset: 28
    0000001d: 	nopl	(%rax) # Size: 3
.Ltmp280:
    00000020: 	retq # Offset: 32
DWARF CFI Instructions:
    <empty>
End of Function "_Z21count_half_for_index4IhEmPT_m"

Binary Function "_Z21count_half_for_index5IhEmPT_m" after disassembly {
  Number      : 161
  State       : disassembled
  Address     : 0x3ad0
  Size        : 0x1b
  MaxSize     : 0x20
  Offset      : 0x3ad0
  Section     : .text
  Orc Section : .local.text._Z21count_half_for_index5IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0160:
    00000000: 	endbr64
    00000004: 	leal	-0x1(%rsi), %eax
    00000007: 	testl	%eax, %eax
    00000009: 	jle	.Ltmp282 # Offset: 9
    0000000b: 	subl	$0x2, %esi
    0000000e: 	shrl	%esi
    00000010: 	leal	0x1(%rsi), %eax
    00000013: 	retq # Offset: 19
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp282:
    00000018: 	xorl	%eax, %eax
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_Z21count_half_for_index5IhEmPT_m"

Binary Function "_Z21count_half_for_index6IhEmPT_m" after disassembly {
  Number      : 162
  State       : disassembled
  Address     : 0x3af0
  Size        : 0x1b
  MaxSize     : 0x20
  Offset      : 0x3af0
  Section     : .text
  Orc Section : .local.text._Z21count_half_for_index6IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0161:
    00000000: 	endbr64
    00000004: 	cmpl	$0x1, %esi
    00000007: 	jle	.Ltmp283 # Offset: 7
    00000009: 	subl	$0x2, %esi
    0000000c: 	shrl	%esi
    0000000e: 	leal	0x1(%rsi), %eax
    00000011: 	retq # Offset: 17
    00000012: 	nopw	(%rax,%rax) # Size: 6
.Ltmp283:
    00000018: 	xorl	%eax, %eax
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_Z21count_half_for_index6IhEmPT_m"

Binary Function "_Z21count_half_for_index7IhEmPT_m" after disassembly {
  Number      : 163
  State       : disassembled
  Address     : 0x3b10
  Size        : 0x32
  MaxSize     : 0x40
  Offset      : 0x3b10
  Section     : .text
  Orc Section : .local.text._Z21count_half_for_index7IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0162:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	testl	%esi, %esi
    00000008: 	je	.Ltmp284 # Offset: 8
    0000000a: 	subl	$0x1, %esi
    0000000d: 	jne	.Ltmp285 # Offset: 13
    0000000f: 	jmp	.Ltmp286 # Offset: 15
    00000011: 	nopl	(%rax) # Size: 7
.Ltmp287:
    00000018: 	subl	$0x1, %esi
    0000001b: 	cmpl	%esi, %eax
    0000001d: 	je	.Ltmp286 # Offset: 29
.Ltmp285:
    0000001f: 	addq	$0x1, %rax
    00000023: 	cmpl	%esi, %eax
    00000025: 	jne	.Ltmp287 # Offset: 37
    00000027: 	retq # Offset: 39
    00000028: 	nopl	(%rax,%rax) # Size: 8
.Ltmp286:
    00000030: 	retq # Offset: 48
.Ltmp284:
    00000031: 	retq # Offset: 49
DWARF CFI Instructions:
    <empty>
End of Function "_Z21count_half_for_index7IhEmPT_m"

Binary Function "_Z21count_half_for_index8IhEmPT_m" after disassembly {
  Number      : 164
  State       : disassembled
  Address     : 0x3b50
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x3b50
  Section     : .text
  Orc Section : .local.text._Z21count_half_for_index8IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0163:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	cmpq	$0x1, %rsi
    0000000a: 	je	.Ltmp288 # Offset: 10
    0000000c: 	nopl	(%rax) # Size: 4
.Ltmp289:
    00000010: 	addq	$0x1, %rax
    00000014: 	movq	%rsi, %rdx
    00000017: 	subq	%rax, %rdx
    0000001a: 	subq	$0x1, %rdx
    0000001e: 	cmpq	%rax, %rdx
    00000021: 	ja	.Ltmp289 # Offset: 33
    00000023: 	retq # Offset: 35
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp288:
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_Z21count_half_for_index8IhEmPT_m"

Binary Function "_Z21count_half_for_index9IhEmPT_m" after disassembly {
  Number      : 165
  State       : disassembled
  Address     : 0x3b80
  Size        : 0x34
  MaxSize     : 0x40
  Offset      : 0x3b80
  Section     : .text
  Orc Section : .local.text._Z21count_half_for_index9IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0164:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rcx
    00000007: 	movq	%rsi, %rax
    0000000a: 	xorl	%edx, %edx
    0000000c: 	shrq	%rcx
    0000000f: 	jmp	.Ltmp290 # Offset: 15
    00000011: 	nopl	(%rax) # Size: 7
.Ltmp292:
    00000018: 	addq	$0x1, %rdx
    0000001c: 	cmpq	%rdx, %rcx
    0000001f: 	je	.Ltmp291 # Offset: 31
.Ltmp290:
    00000021: 	cmpq	%rax, %rdx
    00000024: 	jne	.Ltmp292 # Offset: 36
    00000026: 	retq # Offset: 38
    00000027: 	nopw	(%rax,%rax) # Size: 9
.Ltmp291:
    00000030: 	movq	%rcx, %rax
    00000033: 	retq # Offset: 51
DWARF CFI Instructions:
    <empty>
End of Function "_Z21count_half_for_index9IhEmPT_m"

Binary Function "_Z22count_half_for_index10IhEmPT_m" after disassembly {
  Number      : 166
  State       : disassembled
  Address     : 0x3bc0
  Size        : 0x2e
  MaxSize     : 0x30
  Offset      : 0x3bc0
  Section     : .text
  Orc Section : .local.text._Z22count_half_for_index10IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0165:
    00000000: 	endbr64
    00000004: 	xorl	%r8d, %r8d
    00000007: 	cmpq	$0x1, %rsi
    0000000b: 	jbe	.Ltmp293 # Offset: 11
    0000000d: 	nopl	(%rax) # Size: 3
.Ltmp294:
    00000010: 	addq	$0x1, %r8
    00000014: 	movq	%rsi, %rax
    00000017: 	subq	%r8, %rax
    0000001a: 	subq	$0x1, %rax
    0000001e: 	cmpq	%rsi, %rax
    00000021: 	cmovaq	%rsi, %rax
    00000025: 	cmpq	%rax, %r8
    00000028: 	jb	.Ltmp294 # Offset: 40
.Ltmp293:
    0000002a: 	movq	%r8, %rax
    0000002d: 	retq # Offset: 45
DWARF CFI Instructions:
    <empty>
End of Function "_Z22count_half_for_index10IhEmPT_m"

Binary Function "_Z24count_half_for_iterator1IPhEmT_m" after disassembly {
  Number      : 167
  State       : disassembled
  Address     : 0x3bf0
  Size        : 0x23
  MaxSize     : 0x30
  Offset      : 0x3bf0
  Section     : .text
  Orc Section : .local.text._Z24count_half_for_iterator1IPhEmT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0166:
    00000000: 	endbr64
    00000004: 	leaq	-0x1(%rdi,%rsi), %rax
    00000009: 	cmpq	%rax, %rdi
    0000000c: 	jae	.Ltmp295 # Offset: 12
    0000000e: 	leaq	-0x2(%rsi), %rax
    00000012: 	shrq	%rax
    00000015: 	leaq	0x1(%rax), %rax
    00000019: 	retq # Offset: 25
    0000001a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp295:
    00000020: 	xorl	%eax, %eax
    00000022: 	retq # Offset: 34
DWARF CFI Instructions:
    <empty>
End of Function "_Z24count_half_for_iterator1IPhEmT_m"

Binary Function "_Z24count_half_for_iterator2IPhEmT_m" after disassembly {
  Number      : 168
  State       : disassembled
  Address     : 0x3c20
  Size        : 0x23
  MaxSize     : 0x30
  Offset      : 0x3c20
  Section     : .text
  Orc Section : .local.text._Z24count_half_for_iterator2IPhEmT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0167:
    00000000: 	endbr64
    00000004: 	leaq	-0x1(%rdi,%rsi), %rax
    00000009: 	cmpq	%rax, %rdi
    0000000c: 	jae	.Ltmp296 # Offset: 12
    0000000e: 	leaq	-0x2(%rsi), %rax
    00000012: 	shrq	%rax
    00000015: 	leaq	0x1(%rax), %rax
    00000019: 	retq # Offset: 25
    0000001a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp296:
    00000020: 	xorl	%eax, %eax
    00000022: 	retq # Offset: 34
DWARF CFI Instructions:
    <empty>
End of Function "_Z24count_half_for_iterator2IPhEmT_m"

Binary Function "_Z24count_half_for_iterator3IPhEmT_m" after disassembly {
  Number      : 169
  State       : disassembled
  Address     : 0x3c50
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x3c50
  Section     : .text
  Orc Section : .local.text._Z24count_half_for_iterator3IPhEmT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0168:
    00000000: 	endbr64
    00000004: 	subq	$0x1, %rsi
    00000008: 	xorl	%eax, %eax
    0000000a: 	leaq	(%rdi,%rsi), %r8
    0000000e: 	testq	%rsi, %rsi
    00000011: 	jle	.Ltmp297 # Offset: 17
    00000013: 	nopl	(%rax,%rax) # Size: 5
.Ltmp298:
    00000018: 	addq	$0x1, %rax
    0000001c: 	movq	%r8, %rdx
    0000001f: 	subq	%rax, %rdx
    00000022: 	leaq	(%rdi,%rax), %rcx
    00000026: 	subq	%rcx, %rdx
    00000029: 	testq	%rdx, %rdx
    0000002c: 	jg	.Ltmp298 # Offset: 44
    0000002e: 	retq # Offset: 46
    0000002f: 	nop # Size: 1
.Ltmp297:
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z24count_half_for_iterator3IPhEmT_m"

Binary Function "_Z24count_half_for_iterator4IPhEmT_m" after disassembly {
  Number      : 170
  State       : disassembled
  Address     : 0x3c90
  Size        : 0x23
  MaxSize     : 0x30
  Offset      : 0x3c90
  Section     : .text
  Orc Section : .local.text._Z24count_half_for_iterator4IPhEmT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0169:
    00000000: 	endbr64
    00000004: 	leaq	-0x1(%rdi,%rsi), %rax
    00000009: 	cmpq	%rax, %rdi
    0000000c: 	jae	.Ltmp299 # Offset: 12
    0000000e: 	leaq	-0x2(%rsi), %rax
    00000012: 	shrq	%rax
    00000015: 	leaq	0x1(%rax), %rax
    00000019: 	retq # Offset: 25
    0000001a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp299:
    00000020: 	xorl	%eax, %eax
    00000022: 	retq # Offset: 34
DWARF CFI Instructions:
    <empty>
End of Function "_Z24count_half_for_iterator4IPhEmT_m"

Binary Function "_Z24count_half_for_iterator5IPhEmT_m" after disassembly {
  Number      : 171
  State       : disassembled
  Address     : 0x3cc0
  Size        : 0x47
  MaxSize     : 0x50
  Offset      : 0x3cc0
  Section     : .text
  Orc Section : .local.text._Z24count_half_for_iterator5IPhEmT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0170:
    00000000: 	endbr64
    00000004: 	addq	%rdi, %rsi
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp300 # Offset: 10
    0000000c: 	leaq	-0x1(%rsi), %rax
    00000010: 	cmpq	%rax, %rdi
    00000013: 	jne	.Ltmp301 # Offset: 19
    00000015: 	jmp	.Ltmp300 # Offset: 21
    00000017: 	nopw	(%rax,%rax) # Size: 9
.Ltmp303:
    00000020: 	subq	$0x1, %rax
    00000024: 	cmpq	%rdi, %rax
    00000027: 	je	.Ltmp302 # Offset: 39
.Ltmp301:
    00000029: 	movq	%rsi, %r8
    0000002c: 	addq	$0x1, %rdi
    00000030: 	subq	%rax, %r8
    00000033: 	cmpq	%rax, %rdi
    00000036: 	jne	.Ltmp303 # Offset: 54
.Ltmp302:
    00000038: 	movq	%r8, %rax
    0000003b: 	retq # Offset: 59
    0000003c: 	nopl	(%rax) # Size: 4
.Ltmp300:
    00000040: 	xorl	%r8d, %r8d
    00000043: 	movq	%r8, %rax
    00000046: 	retq # Offset: 70
DWARF CFI Instructions:
    <empty>
End of Function "_Z24count_half_for_iterator5IPhEmT_m"

Binary Function "_Z24count_half_for_iterator6IPhEmT_m" after disassembly {
  Number      : 172
  State       : disassembled
  Address     : 0x3d10
  Size        : 0x23
  MaxSize     : 0x30
  Offset      : 0x3d10
  Section     : .text
  Orc Section : .local.text._Z24count_half_for_iterator6IPhEmT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0171:
    00000000: 	endbr64
    00000004: 	leaq	-0x1(%rdi,%rsi), %rax
    00000009: 	cmpq	%rax, %rdi
    0000000c: 	jae	.Ltmp304 # Offset: 12
    0000000e: 	leaq	-0x2(%rsi), %rax
    00000012: 	shrq	%rax
    00000015: 	leaq	0x1(%rax), %rax
    00000019: 	retq # Offset: 25
    0000001a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp304:
    00000020: 	xorl	%eax, %eax
    00000022: 	retq # Offset: 34
DWARF CFI Instructions:
    <empty>
End of Function "_Z24count_half_for_iterator6IPhEmT_m"

Binary Function "_Z24count_half_for_iterator7IPhEmT_m" after disassembly {
  Number      : 173
  State       : disassembled
  Address     : 0x3d40
  Size        : 0x34
  MaxSize     : 0x40
  Offset      : 0x3d40
  Section     : .text
  Orc Section : .local.text._Z24count_half_for_iterator7IPhEmT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0172:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rdx
    00000007: 	leaq	(%rdi,%rsi), %rax
    0000000b: 	shrq	%rdx
    0000000e: 	cmpq	%rdi, %rax
    00000011: 	jbe	.Ltmp305 # Offset: 17
    00000013: 	movl	$0x1, %eax
    00000018: 	cmpq	$0x1, %rdx
    0000001c: 	jne	.Ltmp306 # Offset: 28
    0000001e: 	jmp	.Ltmp307 # Offset: 30
.Ltmp308:
    00000020: 	addq	$0x1, %rax
    00000024: 	cmpq	%rax, %rdx
    00000027: 	je	.Ltmp307 # Offset: 39
.Ltmp306:
    00000029: 	cmpq	%rax, %rsi
    0000002c: 	jne	.Ltmp308 # Offset: 44
    0000002e: 	retq # Offset: 46
    0000002f: 	nop # Size: 1
.Ltmp307:
    00000030: 	retq # Offset: 48
.Ltmp305:
    00000031: 	xorl	%eax, %eax
    00000033: 	retq # Offset: 51
DWARF CFI Instructions:
    <empty>
End of Function "_Z24count_half_for_iterator7IPhEmT_m"

Binary Function "_Z24count_half_for_iterator8IPhEmT_m" after disassembly {
  Number      : 174
  State       : disassembled
  Address     : 0x3d80
  Size        : 0x43
  MaxSize     : 0x50
  Offset      : 0x3d80
  Section     : .text
  Orc Section : .local.text._Z24count_half_for_iterator8IPhEmT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0173:
    00000000: 	endbr64
    00000004: 	addq	%rdi, %rsi
    00000007: 	leaq	-0x1(%rsi), %rdx
    0000000b: 	cmpq	%rdx, %rdi
    0000000e: 	jae	.Ltmp309 # Offset: 14
    00000010: 	cmpq	%rsi, %rdi
    00000013: 	jae	.Ltmp309 # Offset: 19
    00000015: 	movq	%rdi, %rax
    00000018: 	jmp	.Ltmp310 # Offset: 24
    0000001a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp312:
    00000020: 	cmpq	%rax, %rsi
    00000023: 	jbe	.Ltmp311 # Offset: 35
.Ltmp310:
    00000025: 	addq	$0x1, %rax
    00000029: 	subq	$0x1, %rdx
    0000002d: 	cmpq	%rdx, %rax
    00000030: 	jb	.Ltmp312 # Offset: 48
.Ltmp311:
    00000032: 	subq	%rdi, %rax
    00000035: 	retq # Offset: 53
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp309:
    00000040: 	xorl	%eax, %eax
    00000042: 	retq # Offset: 66
DWARF CFI Instructions:
    <empty>
End of Function "_Z24count_half_for_iterator8IPhEmT_m"

Binary Function "_Z24count_half_for_iterator1IN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEmT_m" after disassembly {
  Number      : 175
  State       : disassembled
  Address     : 0x3dd0
  Size        : 0x23
  MaxSize     : 0x30
  Offset      : 0x3dd0
  Section     : .text
  Orc Section : .local.text._Z24count_half_for_iterator1IN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEmT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0174:
    00000000: 	endbr64
    00000004: 	leaq	-0x1(%rdi,%rsi), %rax
    00000009: 	cmpq	%rax, %rdi
    0000000c: 	jae	.Ltmp313 # Offset: 12
    0000000e: 	leaq	-0x2(%rsi), %rax
    00000012: 	shrq	%rax
    00000015: 	leaq	0x1(%rax), %rax
    00000019: 	retq # Offset: 25
    0000001a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp313:
    00000020: 	xorl	%eax, %eax
    00000022: 	retq # Offset: 34
DWARF CFI Instructions:
    <empty>
End of Function "_Z24count_half_for_iterator1IN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEmT_m"

Binary Function "_Z24count_half_for_iterator2IN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEmT_m" after disassembly {
  Number      : 176
  State       : disassembled
  Address     : 0x3e00
  Size        : 0x23
  MaxSize     : 0x30
  Offset      : 0x3e00
  Section     : .text
  Orc Section : .local.text._Z24count_half_for_iterator2IN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEmT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0175:
    00000000: 	endbr64
    00000004: 	leaq	-0x1(%rdi,%rsi), %rax
    00000009: 	cmpq	%rax, %rdi
    0000000c: 	jae	.Ltmp314 # Offset: 12
    0000000e: 	leaq	-0x2(%rsi), %rax
    00000012: 	shrq	%rax
    00000015: 	leaq	0x1(%rax), %rax
    00000019: 	retq # Offset: 25
    0000001a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp314:
    00000020: 	xorl	%eax, %eax
    00000022: 	retq # Offset: 34
DWARF CFI Instructions:
    <empty>
End of Function "_Z24count_half_for_iterator2IN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEmT_m"

Binary Function "_Z24count_half_for_iterator3IN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEmT_m" after disassembly {
  Number      : 177
  State       : disassembled
  Address     : 0x3e30
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x3e30
  Section     : .text
  Orc Section : .local.text._Z24count_half_for_iterator3IN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEmT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0176:
    00000000: 	endbr64
    00000004: 	subq	$0x1, %rsi
    00000008: 	xorl	%eax, %eax
    0000000a: 	leaq	(%rdi,%rsi), %r8
    0000000e: 	testq	%rsi, %rsi
    00000011: 	jle	.Ltmp315 # Offset: 17
    00000013: 	nopl	(%rax,%rax) # Size: 5
.Ltmp316:
    00000018: 	addq	$0x1, %rax
    0000001c: 	movq	%r8, %rdx
    0000001f: 	subq	%rax, %rdx
    00000022: 	leaq	(%rdi,%rax), %rcx
    00000026: 	subq	%rcx, %rdx
    00000029: 	testq	%rdx, %rdx
    0000002c: 	jg	.Ltmp316 # Offset: 44
    0000002e: 	retq # Offset: 46
    0000002f: 	nop # Size: 1
.Ltmp315:
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z24count_half_for_iterator3IN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEmT_m"

Binary Function "_Z24count_half_for_iterator4IN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEmT_m" after disassembly {
  Number      : 178
  State       : disassembled
  Address     : 0x3e70
  Size        : 0x23
  MaxSize     : 0x30
  Offset      : 0x3e70
  Section     : .text
  Orc Section : .local.text._Z24count_half_for_iterator4IN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEmT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0177:
    00000000: 	endbr64
    00000004: 	leaq	-0x1(%rdi,%rsi), %rax
    00000009: 	cmpq	%rax, %rdi
    0000000c: 	jae	.Ltmp317 # Offset: 12
    0000000e: 	leaq	-0x2(%rsi), %rax
    00000012: 	shrq	%rax
    00000015: 	leaq	0x1(%rax), %rax
    00000019: 	retq # Offset: 25
    0000001a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp317:
    00000020: 	xorl	%eax, %eax
    00000022: 	retq # Offset: 34
DWARF CFI Instructions:
    <empty>
End of Function "_Z24count_half_for_iterator4IN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEmT_m"

Binary Function "_Z24count_half_for_iterator5IN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEmT_m" after disassembly {
  Number      : 179
  State       : disassembled
  Address     : 0x3ea0
  Size        : 0x47
  MaxSize     : 0x50
  Offset      : 0x3ea0
  Section     : .text
  Orc Section : .local.text._Z24count_half_for_iterator5IN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEmT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0178:
    00000000: 	endbr64
    00000004: 	addq	%rdi, %rsi
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp318 # Offset: 10
    0000000c: 	leaq	-0x1(%rsi), %rax
    00000010: 	cmpq	%rax, %rdi
    00000013: 	jne	.Ltmp319 # Offset: 19
    00000015: 	jmp	.Ltmp318 # Offset: 21
    00000017: 	nopw	(%rax,%rax) # Size: 9
.Ltmp321:
    00000020: 	subq	$0x1, %rax
    00000024: 	cmpq	%rax, %rdi
    00000027: 	je	.Ltmp320 # Offset: 39
.Ltmp319:
    00000029: 	movq	%rsi, %r8
    0000002c: 	addq	$0x1, %rdi
    00000030: 	subq	%rax, %r8
    00000033: 	cmpq	%rax, %rdi
    00000036: 	jne	.Ltmp321 # Offset: 54
.Ltmp320:
    00000038: 	movq	%r8, %rax
    0000003b: 	retq # Offset: 59
    0000003c: 	nopl	(%rax) # Size: 4
.Ltmp318:
    00000040: 	xorl	%r8d, %r8d
    00000043: 	movq	%r8, %rax
    00000046: 	retq # Offset: 70
DWARF CFI Instructions:
    <empty>
End of Function "_Z24count_half_for_iterator5IN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEmT_m"

Binary Function "_Z24count_half_for_iterator6IN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEmT_m" after disassembly {
  Number      : 180
  State       : disassembled
  Address     : 0x3ef0
  Size        : 0x23
  MaxSize     : 0x30
  Offset      : 0x3ef0
  Section     : .text
  Orc Section : .local.text._Z24count_half_for_iterator6IN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEmT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0179:
    00000000: 	endbr64
    00000004: 	leaq	-0x1(%rdi,%rsi), %rax
    00000009: 	cmpq	%rax, %rdi
    0000000c: 	jae	.Ltmp322 # Offset: 12
    0000000e: 	leaq	-0x2(%rsi), %rax
    00000012: 	shrq	%rax
    00000015: 	leaq	0x1(%rax), %rax
    00000019: 	retq # Offset: 25
    0000001a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp322:
    00000020: 	xorl	%eax, %eax
    00000022: 	retq # Offset: 34
DWARF CFI Instructions:
    <empty>
End of Function "_Z24count_half_for_iterator6IN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEmT_m"

Binary Function "_Z24count_half_for_iterator7IN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEmT_m" after disassembly {
  Number      : 181
  State       : disassembled
  Address     : 0x3f20
  Size        : 0x34
  MaxSize     : 0x40
  Offset      : 0x3f20
  Section     : .text
  Orc Section : .local.text._Z24count_half_for_iterator7IN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEmT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0180:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rdx
    00000007: 	leaq	(%rdi,%rsi), %rax
    0000000b: 	shrq	%rdx
    0000000e: 	cmpq	%rdi, %rax
    00000011: 	jbe	.Ltmp323 # Offset: 17
    00000013: 	movl	$0x1, %eax
    00000018: 	cmpq	$0x1, %rdx
    0000001c: 	jne	.Ltmp324 # Offset: 28
    0000001e: 	jmp	.Ltmp325 # Offset: 30
.Ltmp326:
    00000020: 	addq	$0x1, %rax
    00000024: 	cmpq	%rax, %rdx
    00000027: 	je	.Ltmp325 # Offset: 39
.Ltmp324:
    00000029: 	cmpq	%rax, %rsi
    0000002c: 	jne	.Ltmp326 # Offset: 44
    0000002e: 	retq # Offset: 46
    0000002f: 	nop # Size: 1
.Ltmp325:
    00000030: 	retq # Offset: 48
.Ltmp323:
    00000031: 	xorl	%eax, %eax
    00000033: 	retq # Offset: 51
DWARF CFI Instructions:
    <empty>
End of Function "_Z24count_half_for_iterator7IN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEmT_m"

Binary Function "_Z24count_half_for_iterator8IN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEmT_m" after disassembly {
  Number      : 182
  State       : disassembled
  Address     : 0x3f60
  Size        : 0x4b
  MaxSize     : 0x50
  Offset      : 0x3f60
  Section     : .text
  Orc Section : .local.text._Z24count_half_for_iterator8IN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEmT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0181:
    00000000: 	endbr64
    00000004: 	addq	%rdi, %rsi
    00000007: 	leaq	-0x1(%rsi), %rax
    0000000b: 	cmpq	%rdi, %rax
    0000000e: 	jbe	.Ltmp327 # Offset: 14
    00000010: 	cmpq	%rdi, %rsi
    00000013: 	jbe	.Ltmp327 # Offset: 19
    00000015: 	leaq	-0x2(%rsi), %rcx
    00000019: 	leaq	0x1(%rdi), %rdx
    0000001d: 	nopl	(%rax) # Size: 3
.Ltmp328:
    00000020: 	cmpq	%rcx, %rdx
    00000023: 	movq	%rdx, %rax
    00000026: 	setae	%r8b
    0000002a: 	cmpq	%rdx, %rsi
    0000002d: 	setbe	%r9b
    00000031: 	subq	$0x1, %rcx
    00000035: 	addq	$0x1, %rdx
    00000039: 	orb	%r9b, %r8b
    0000003c: 	je	.Ltmp328 # Offset: 60
    0000003e: 	subq	%rdi, %rax
    00000041: 	retq # Offset: 65
    00000042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp327:
    00000048: 	xorl	%eax, %eax
    0000004a: 	retq # Offset: 74
DWARF CFI Instructions:
    <empty>
End of Function "_Z24count_half_for_iterator8IN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEmT_m"

Binary Function "_Z20count_half_while_optIhEmPT_m" after disassembly {
  Number      : 183
  State       : disassembled
  Address     : 0x3fb0
  Size        : 0xb
  MaxSize     : 0x10
  Offset      : 0x3fb0
  Section     : .text
  Orc Section : .local.text._Z20count_half_while_optIhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0182:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	shrq	%rax
    0000000a: 	retq # Offset: 10
DWARF CFI Instructions:
    <empty>
End of Function "_Z20count_half_while_optIhEmPT_m"

Binary Function "_Z28count_half_while_uncountableIhEmPT_m" after disassembly {
  Number      : 184
  State       : disassembled
  Address     : 0x3fc0
  Size        : 0x21
  MaxSize     : 0x30
  Offset      : 0x3fc0
  Section     : .text
  Orc Section : .local.text._Z28count_half_while_uncountableIhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0183:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	cmpb	$0x0, (%rdi)
    00000009: 	je	.Ltmp329 # Offset: 9
    0000000b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp330:
    00000010: 	addq	$0x1, %rax
    00000014: 	cmpb	$0x0, (%rdi,%rax)
    00000018: 	jne	.Ltmp330 # Offset: 24
    0000001a: 	retq # Offset: 26
    0000001b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp329:
    00000020: 	retq # Offset: 32
DWARF CFI Instructions:
    <empty>
End of Function "_Z28count_half_while_uncountableIhEmPT_m"

Binary Function "_Z25count_half_while_pointer1IhEmPT_m" after disassembly {
  Number      : 185
  State       : disassembled
  Address     : 0x3ff0
  Size        : 0x23
  MaxSize     : 0x30
  Offset      : 0x3ff0
  Section     : .text
  Orc Section : .local.text._Z25count_half_while_pointer1IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0184:
    00000000: 	endbr64
    00000004: 	leaq	-0x1(%rdi,%rsi), %rax
    00000009: 	cmpq	%rax, %rdi
    0000000c: 	jae	.Ltmp331 # Offset: 12
    0000000e: 	leaq	-0x2(%rsi), %rax
    00000012: 	shrq	%rax
    00000015: 	leaq	0x1(%rax), %rax
    00000019: 	retq # Offset: 25
    0000001a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp331:
    00000020: 	xorl	%eax, %eax
    00000022: 	retq # Offset: 34
DWARF CFI Instructions:
    <empty>
End of Function "_Z25count_half_while_pointer1IhEmPT_m"

Binary Function "_Z25count_half_while_pointer2IhEmPT_m" after disassembly {
  Number      : 186
  State       : disassembled
  Address     : 0x4020
  Size        : 0x23
  MaxSize     : 0x30
  Offset      : 0x4020
  Section     : .text
  Orc Section : .local.text._Z25count_half_while_pointer2IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0185:
    00000000: 	endbr64
    00000004: 	leaq	-0x1(%rdi,%rsi), %rax
    00000009: 	cmpq	%rax, %rdi
    0000000c: 	jae	.Ltmp332 # Offset: 12
    0000000e: 	leaq	-0x2(%rsi), %rax
    00000012: 	shrq	%rax
    00000015: 	leaq	0x1(%rax), %rax
    00000019: 	retq # Offset: 25
    0000001a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp332:
    00000020: 	xorl	%eax, %eax
    00000022: 	retq # Offset: 34
DWARF CFI Instructions:
    <empty>
End of Function "_Z25count_half_while_pointer2IhEmPT_m"

Binary Function "_Z25count_half_while_pointer3IhEmPT_m" after disassembly {
  Number      : 187
  State       : disassembled
  Address     : 0x4050
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x4050
  Section     : .text
  Orc Section : .local.text._Z25count_half_while_pointer3IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0186:
    00000000: 	endbr64
    00000004: 	subq	$0x1, %rsi
    00000008: 	xorl	%eax, %eax
    0000000a: 	leaq	(%rdi,%rsi), %r8
    0000000e: 	testq	%rsi, %rsi
    00000011: 	jle	.Ltmp333 # Offset: 17
    00000013: 	nopl	(%rax,%rax) # Size: 5
.Ltmp334:
    00000018: 	addq	$0x1, %rax
    0000001c: 	movq	%r8, %rdx
    0000001f: 	subq	%rax, %rdx
    00000022: 	leaq	(%rdi,%rax), %rcx
    00000026: 	subq	%rcx, %rdx
    00000029: 	testq	%rdx, %rdx
    0000002c: 	jg	.Ltmp334 # Offset: 44
    0000002e: 	retq # Offset: 46
    0000002f: 	nop # Size: 1
.Ltmp333:
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z25count_half_while_pointer3IhEmPT_m"

Binary Function "_Z25count_half_while_pointer4IhEmPT_m" after disassembly {
  Number      : 188
  State       : disassembled
  Address     : 0x4090
  Size        : 0x23
  MaxSize     : 0x30
  Offset      : 0x4090
  Section     : .text
  Orc Section : .local.text._Z25count_half_while_pointer4IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0187:
    00000000: 	endbr64
    00000004: 	leaq	-0x1(%rdi,%rsi), %rax
    00000009: 	cmpq	%rax, %rdi
    0000000c: 	jae	.Ltmp335 # Offset: 12
    0000000e: 	leaq	-0x2(%rsi), %rax
    00000012: 	shrq	%rax
    00000015: 	leaq	0x1(%rax), %rax
    00000019: 	retq # Offset: 25
    0000001a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp335:
    00000020: 	xorl	%eax, %eax
    00000022: 	retq # Offset: 34
DWARF CFI Instructions:
    <empty>
End of Function "_Z25count_half_while_pointer4IhEmPT_m"

Binary Function "_Z25count_half_while_pointer5IhEmPT_m" after disassembly {
  Number      : 189
  State       : disassembled
  Address     : 0x40c0
  Size        : 0x47
  MaxSize     : 0x50
  Offset      : 0x40c0
  Section     : .text
  Orc Section : .local.text._Z25count_half_while_pointer5IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0188:
    00000000: 	endbr64
    00000004: 	addq	%rdi, %rsi
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp336 # Offset: 10
    0000000c: 	leaq	-0x1(%rsi), %rax
    00000010: 	cmpq	%rax, %rdi
    00000013: 	jne	.Ltmp337 # Offset: 19
    00000015: 	jmp	.Ltmp336 # Offset: 21
    00000017: 	nopw	(%rax,%rax) # Size: 9
.Ltmp339:
    00000020: 	subq	$0x1, %rax
    00000024: 	cmpq	%rdi, %rax
    00000027: 	je	.Ltmp338 # Offset: 39
.Ltmp337:
    00000029: 	movq	%rsi, %r8
    0000002c: 	addq	$0x1, %rdi
    00000030: 	subq	%rax, %r8
    00000033: 	cmpq	%rax, %rdi
    00000036: 	jne	.Ltmp339 # Offset: 54
.Ltmp338:
    00000038: 	movq	%r8, %rax
    0000003b: 	retq # Offset: 59
    0000003c: 	nopl	(%rax) # Size: 4
.Ltmp336:
    00000040: 	xorl	%r8d, %r8d
    00000043: 	movq	%r8, %rax
    00000046: 	retq # Offset: 70
DWARF CFI Instructions:
    <empty>
End of Function "_Z25count_half_while_pointer5IhEmPT_m"

Binary Function "_Z25count_half_while_pointer6IhEmPT_m" after disassembly {
  Number      : 190
  State       : disassembled
  Address     : 0x4110
  Size        : 0x23
  MaxSize     : 0x30
  Offset      : 0x4110
  Section     : .text
  Orc Section : .local.text._Z25count_half_while_pointer6IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0189:
    00000000: 	endbr64
    00000004: 	leaq	-0x1(%rdi,%rsi), %rax
    00000009: 	cmpq	%rax, %rdi
    0000000c: 	jae	.Ltmp340 # Offset: 12
    0000000e: 	leaq	-0x2(%rsi), %rax
    00000012: 	shrq	%rax
    00000015: 	leaq	0x1(%rax), %rax
    00000019: 	retq # Offset: 25
    0000001a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp340:
    00000020: 	xorl	%eax, %eax
    00000022: 	retq # Offset: 34
DWARF CFI Instructions:
    <empty>
End of Function "_Z25count_half_while_pointer6IhEmPT_m"

Binary Function "_Z25count_half_while_pointer7IhEmPT_m" after disassembly {
  Number      : 191
  State       : disassembled
  Address     : 0x4140
  Size        : 0x34
  MaxSize     : 0x40
  Offset      : 0x4140
  Section     : .text
  Orc Section : .local.text._Z25count_half_while_pointer7IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0190:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rdx
    00000007: 	leaq	(%rdi,%rsi), %rax
    0000000b: 	shrq	%rdx
    0000000e: 	cmpq	%rdi, %rax
    00000011: 	jbe	.Ltmp341 # Offset: 17
    00000013: 	movl	$0x1, %eax
    00000018: 	cmpq	$0x1, %rdx
    0000001c: 	jne	.Ltmp342 # Offset: 28
    0000001e: 	jmp	.Ltmp343 # Offset: 30
.Ltmp344:
    00000020: 	addq	$0x1, %rax
    00000024: 	cmpq	%rax, %rdx
    00000027: 	je	.Ltmp343 # Offset: 39
.Ltmp342:
    00000029: 	cmpq	%rax, %rsi
    0000002c: 	jne	.Ltmp344 # Offset: 44
    0000002e: 	retq # Offset: 46
    0000002f: 	nop # Size: 1
.Ltmp343:
    00000030: 	retq # Offset: 48
.Ltmp341:
    00000031: 	xorl	%eax, %eax
    00000033: 	retq # Offset: 51
DWARF CFI Instructions:
    <empty>
End of Function "_Z25count_half_while_pointer7IhEmPT_m"

Binary Function "_Z25count_half_while_pointer8IhEmPT_m" after disassembly {
  Number      : 192
  State       : disassembled
  Address     : 0x4180
  Size        : 0x43
  MaxSize     : 0x50
  Offset      : 0x4180
  Section     : .text
  Orc Section : .local.text._Z25count_half_while_pointer8IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0191:
    00000000: 	endbr64
    00000004: 	addq	%rdi, %rsi
    00000007: 	leaq	-0x1(%rsi), %rdx
    0000000b: 	cmpq	%rdx, %rdi
    0000000e: 	jae	.Ltmp345 # Offset: 14
    00000010: 	cmpq	%rsi, %rdi
    00000013: 	jae	.Ltmp345 # Offset: 19
    00000015: 	movq	%rdi, %rax
    00000018: 	jmp	.Ltmp346 # Offset: 24
    0000001a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp348:
    00000020: 	cmpq	%rax, %rsi
    00000023: 	jbe	.Ltmp347 # Offset: 35
.Ltmp346:
    00000025: 	addq	$0x1, %rax
    00000029: 	subq	$0x1, %rdx
    0000002d: 	cmpq	%rdx, %rax
    00000030: 	jb	.Ltmp348 # Offset: 48
.Ltmp347:
    00000032: 	subq	%rdi, %rax
    00000035: 	retq # Offset: 53
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp345:
    00000040: 	xorl	%eax, %eax
    00000042: 	retq # Offset: 66
DWARF CFI Instructions:
    <empty>
End of Function "_Z25count_half_while_pointer8IhEmPT_m"

Binary Function "_Z23count_half_while_index1IhEmPT_m" after disassembly {
  Number      : 193
  State       : disassembled
  Address     : 0x41d0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x41d0
  Section     : .text
  Orc Section : .local.text._Z23count_half_while_index1IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0192:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	cmpq	$0x1, %rsi
    0000000a: 	je	.Ltmp349 # Offset: 10
    0000000c: 	nopl	(%rax) # Size: 4
.Ltmp350:
    00000010: 	addq	$0x1, %rax
    00000014: 	movq	%rsi, %rdx
    00000017: 	subq	%rax, %rdx
    0000001a: 	subq	$0x1, %rdx
    0000001e: 	cmpq	%rax, %rdx
    00000021: 	ja	.Ltmp350 # Offset: 33
    00000023: 	retq # Offset: 35
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp349:
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_while_index1IhEmPT_m"

Binary Function "_Z23count_half_while_index2IhEmPT_m" after disassembly {
  Number      : 194
  State       : disassembled
  Address     : 0x4200
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x4200
  Section     : .text
  Orc Section : .local.text._Z23count_half_while_index2IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0193:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	cmpq	$0x1, %rsi
    0000000a: 	je	.Ltmp351 # Offset: 10
    0000000c: 	nopl	(%rax) # Size: 4
.Ltmp352:
    00000010: 	addq	$0x1, %rax
    00000014: 	movq	%rsi, %rdx
    00000017: 	subq	%rax, %rdx
    0000001a: 	subq	$0x1, %rdx
    0000001e: 	cmpq	%rax, %rdx
    00000021: 	ja	.Ltmp352 # Offset: 33
    00000023: 	retq # Offset: 35
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp351:
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_while_index2IhEmPT_m"

Binary Function "_Z23count_half_while_index3IhEmPT_m" after disassembly {
  Number      : 195
  State       : disassembled
  Address     : 0x4230
  Size        : 0x1b
  MaxSize     : 0x20
  Offset      : 0x4230
  Section     : .text
  Orc Section : .local.text._Z23count_half_while_index3IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0194:
    00000000: 	endbr64
    00000004: 	leal	-0x1(%rsi), %eax
    00000007: 	testl	%eax, %eax
    00000009: 	jle	.Ltmp353 # Offset: 9
    0000000b: 	subl	$0x2, %esi
    0000000e: 	shrl	%esi
    00000010: 	leal	0x1(%rsi), %eax
    00000013: 	retq # Offset: 19
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp353:
    00000018: 	xorl	%eax, %eax
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_while_index3IhEmPT_m"

Binary Function "_Z23count_half_while_index4IhEmPT_m" after disassembly {
  Number      : 196
  State       : disassembled
  Address     : 0x4250
  Size        : 0x21
  MaxSize     : 0x30
  Offset      : 0x4250
  Section     : .text
  Orc Section : .local.text._Z23count_half_while_index4IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0195:
    00000000: 	endbr64
    00000004: 	movl	%esi, %ecx
    00000006: 	subl	$0x1, %esi
    00000009: 	xorl	%eax, %eax
    0000000b: 	testl	%esi, %esi
    0000000d: 	jle	.Ltmp354 # Offset: 13
    0000000f: 	nop # Size: 1
.Ltmp355:
    00000010: 	addq	$0x1, %rax
    00000014: 	leal	0x1(%rax,%rax), %edx
    00000018: 	cmpl	%ecx, %edx
    0000001a: 	js	.Ltmp355 # Offset: 26
    0000001c: 	retq # Offset: 28
    0000001d: 	nopl	(%rax) # Size: 3
.Ltmp354:
    00000020: 	retq # Offset: 32
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_while_index4IhEmPT_m"

Binary Function "_Z23count_half_while_index5IhEmPT_m" after disassembly {
  Number      : 197
  State       : disassembled
  Address     : 0x4280
  Size        : 0x1b
  MaxSize     : 0x20
  Offset      : 0x4280
  Section     : .text
  Orc Section : .local.text._Z23count_half_while_index5IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0196:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	testq	%rsi, %rsi
    00000009: 	je	.Ltmp356 # Offset: 9
    0000000b: 	leal	-0x1(%rsi), %edx
    0000000e: 	testl	%edx, %edx
    00000010: 	jle	.Ltmp356 # Offset: 16
    00000012: 	subl	$0x2, %esi
    00000015: 	shrl	%esi
    00000017: 	leal	0x1(%rsi), %eax
.Ltmp356:
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_while_index5IhEmPT_m"

Binary Function "_Z23count_half_while_index6IhEmPT_m" after disassembly {
  Number      : 198
  State       : disassembled
  Address     : 0x42a0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x42a0
  Section     : .text
  Orc Section : .local.text._Z23count_half_while_index6IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0197:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	cmpq	$0x1, %rsi
    0000000a: 	je	.Ltmp357 # Offset: 10
    0000000c: 	nopl	(%rax) # Size: 4
.Ltmp358:
    00000010: 	addq	$0x1, %rax
    00000014: 	movq	%rsi, %rdx
    00000017: 	subq	%rax, %rdx
    0000001a: 	subq	$0x1, %rdx
    0000001e: 	cmpq	%rax, %rdx
    00000021: 	ja	.Ltmp358 # Offset: 33
    00000023: 	retq # Offset: 35
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp357:
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_while_index6IhEmPT_m"

Binary Function "_Z23count_half_while_index7IhEmPT_m" after disassembly {
  Number      : 199
  State       : disassembled
  Address     : 0x42d0
  Size        : 0x36
  MaxSize     : 0x40
  Offset      : 0x42d0
  Section     : .text
  Orc Section : .local.text._Z23count_half_while_index7IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0198:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	testq	%rsi, %rsi
    0000000a: 	je	.Ltmp359 # Offset: 10
    0000000c: 	subq	$0x1, %rax
    00000010: 	je	.Ltmp360 # Offset: 16
    00000012: 	xorl	%edx, %edx
    00000014: 	jmp	.Ltmp361 # Offset: 20
    00000016: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp362:
    00000020: 	subq	$0x1, %rax
    00000024: 	cmpq	%rdx, %rax
    00000027: 	je	.Ltmp360 # Offset: 39
.Ltmp361:
    00000029: 	addq	$0x1, %rdx
    0000002d: 	cmpq	%rax, %rdx
    00000030: 	jne	.Ltmp362 # Offset: 48
    00000032: 	retq # Offset: 50
.Ltmp359:
    00000033: 	xorl	%eax, %eax
.Ltmp360:
    00000035: 	retq # Offset: 53
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_while_index7IhEmPT_m"

Binary Function "_Z23count_half_while_index8IhEmPT_m" after disassembly {
  Number      : 200
  State       : disassembled
  Address     : 0x4310
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x4310
  Section     : .text
  Orc Section : .local.text._Z23count_half_while_index8IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0199:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	cmpq	$0x1, %rsi
    0000000a: 	je	.Ltmp363 # Offset: 10
    0000000c: 	nopl	(%rax) # Size: 4
.Ltmp364:
    00000010: 	addq	$0x1, %rax
    00000014: 	movq	%rsi, %rdx
    00000017: 	subq	%rax, %rdx
    0000001a: 	subq	$0x1, %rdx
    0000001e: 	cmpq	%rax, %rdx
    00000021: 	ja	.Ltmp364 # Offset: 33
    00000023: 	retq # Offset: 35
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp363:
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_while_index8IhEmPT_m"

Binary Function "_Z23count_half_while_index9IhEmPT_m" after disassembly {
  Number      : 201
  State       : disassembled
  Address     : 0x4340
  Size        : 0x34
  MaxSize     : 0x40
  Offset      : 0x4340
  Section     : .text
  Orc Section : .local.text._Z23count_half_while_index9IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0200:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rcx
    00000007: 	movq	%rsi, %rax
    0000000a: 	xorl	%edx, %edx
    0000000c: 	shrq	%rcx
    0000000f: 	jmp	.Ltmp365 # Offset: 15
    00000011: 	nopl	(%rax) # Size: 7
.Ltmp367:
    00000018: 	addq	$0x1, %rdx
    0000001c: 	cmpq	%rdx, %rcx
    0000001f: 	je	.Ltmp366 # Offset: 31
.Ltmp365:
    00000021: 	cmpq	%rax, %rdx
    00000024: 	jne	.Ltmp367 # Offset: 36
    00000026: 	retq # Offset: 38
    00000027: 	nopw	(%rax,%rax) # Size: 9
.Ltmp366:
    00000030: 	movq	%rcx, %rax
    00000033: 	retq # Offset: 51
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_while_index9IhEmPT_m"

Binary Function "_Z24count_half_while_index10IhEmPT_m" after disassembly {
  Number      : 202
  State       : disassembled
  Address     : 0x4380
  Size        : 0x2e
  MaxSize     : 0x30
  Offset      : 0x4380
  Section     : .text
  Orc Section : .local.text._Z24count_half_while_index10IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0201:
    00000000: 	endbr64
    00000004: 	xorl	%r8d, %r8d
    00000007: 	cmpq	$0x1, %rsi
    0000000b: 	jbe	.Ltmp368 # Offset: 11
    0000000d: 	nopl	(%rax) # Size: 3
.Ltmp369:
    00000010: 	addq	$0x1, %r8
    00000014: 	movq	%rsi, %rax
    00000017: 	subq	%r8, %rax
    0000001a: 	subq	$0x1, %rax
    0000001e: 	cmpq	%rsi, %rax
    00000021: 	cmovaq	%rsi, %rax
    00000025: 	cmpq	%rax, %r8
    00000028: 	jb	.Ltmp369 # Offset: 40
.Ltmp368:
    0000002a: 	movq	%r8, %rax
    0000002d: 	retq # Offset: 45
DWARF CFI Instructions:
    <empty>
End of Function "_Z24count_half_while_index10IhEmPT_m"

Binary Function "_Z17count_half_do_optIhEmPT_m" after disassembly {
  Number      : 203
  State       : disassembled
  Address     : 0x43b0
  Size        : 0x18
  MaxSize     : 0x20
  Offset      : 0x43b0
  Section     : .text
  Orc Section : .local.text._Z17count_half_do_optIhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0202:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	testq	%rsi, %rsi
    00000009: 	je	.Ltmp370 # Offset: 9
    0000000b: 	shrq	%rsi
    0000000e: 	movl	$0x1, %eax
    00000013: 	cmovneq	%rsi, %rax
.Ltmp370:
    00000017: 	retq # Offset: 23
DWARF CFI Instructions:
    <empty>
End of Function "_Z17count_half_do_optIhEmPT_m"

Binary Function "_Z25count_half_do_uncountableIhEmPT_m" after disassembly {
  Number      : 204
  State       : disassembled
  Address     : 0x43d0
  Size        : 0x1b
  MaxSize     : 0x20
  Offset      : 0x43d0
  Section     : .text
  Orc Section : .local.text._Z25count_half_do_uncountableIhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0203:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	testq	%rsi, %rsi
    00000009: 	je	.Ltmp371 # Offset: 9
    0000000b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp372:
    00000010: 	addq	$0x1, %rax
    00000014: 	cmpb	$0x0, (%rdi,%rax)
    00000018: 	jne	.Ltmp372 # Offset: 24
.Ltmp371:
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_Z25count_half_do_uncountableIhEmPT_m"

Binary Function "_Z22count_half_do_pointer1IhEmPT_m" after disassembly {
  Number      : 205
  State       : disassembled
  Address     : 0x43f0
  Size        : 0x28
  MaxSize     : 0x30
  Offset      : 0x43f0
  Section     : .text
  Orc Section : .local.text._Z22count_half_do_pointer1IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0204:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	testq	%rsi, %rsi
    00000009: 	je	.Ltmp373 # Offset: 9
    0000000b: 	leaq	-0x2(%rsi), %rax
    0000000f: 	leaq	-0x2(%rdi,%rsi), %rdx
    00000014: 	shrq	%rax
    00000017: 	addq	$0x1, %rax
    0000001b: 	cmpq	%rdx, %rdi
    0000001e: 	movl	$0x1, %edx
    00000023: 	cmovaq	%rdx, %rax
.Ltmp373:
    00000027: 	retq # Offset: 39
DWARF CFI Instructions:
    <empty>
End of Function "_Z22count_half_do_pointer1IhEmPT_m"

Binary Function "_Z22count_half_do_pointer2IhEmPT_m" after disassembly {
  Number      : 206
  State       : disassembled
  Address     : 0x4420
  Size        : 0x28
  MaxSize     : 0x30
  Offset      : 0x4420
  Section     : .text
  Orc Section : .local.text._Z22count_half_do_pointer2IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0205:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	testq	%rsi, %rsi
    00000009: 	je	.Ltmp374 # Offset: 9
    0000000b: 	leaq	-0x2(%rsi), %rax
    0000000f: 	leaq	-0x2(%rdi,%rsi), %rdx
    00000014: 	shrq	%rax
    00000017: 	addq	$0x1, %rax
    0000001b: 	cmpq	%rdx, %rdi
    0000001e: 	movl	$0x1, %edx
    00000023: 	cmovaq	%rdx, %rax
.Ltmp374:
    00000027: 	retq # Offset: 39
DWARF CFI Instructions:
    <empty>
End of Function "_Z22count_half_do_pointer2IhEmPT_m"

Binary Function "_Z20count_half_do_index1IhEmPT_m" after disassembly {
  Number      : 207
  State       : disassembled
  Address     : 0x4450
  Size        : 0x24
  MaxSize     : 0x30
  Offset      : 0x4450
  Section     : .text
  Orc Section : .local.text._Z20count_half_do_index1IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0206:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	testq	%rsi, %rsi
    00000009: 	je	.Ltmp375 # Offset: 9
    0000000b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp376:
    00000010: 	addq	$0x1, %rax
    00000014: 	movq	%rsi, %rdx
    00000017: 	subq	%rax, %rdx
    0000001a: 	subq	$0x1, %rdx
    0000001e: 	cmpq	%rdx, %rax
    00000021: 	jb	.Ltmp376 # Offset: 33
.Ltmp375:
    00000023: 	retq # Offset: 35
DWARF CFI Instructions:
    <empty>
End of Function "_Z20count_half_do_index1IhEmPT_m"

Binary Function "_Z20count_half_do_index2IhEmPT_m" after disassembly {
  Number      : 208
  State       : disassembled
  Address     : 0x4480
  Size        : 0x24
  MaxSize     : 0x30
  Offset      : 0x4480
  Section     : .text
  Orc Section : .local.text._Z20count_half_do_index2IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0207:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	testq	%rsi, %rsi
    00000009: 	je	.Ltmp377 # Offset: 9
    0000000b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp378:
    00000010: 	addq	$0x1, %rax
    00000014: 	movq	%rsi, %rdx
    00000017: 	subq	%rax, %rdx
    0000001a: 	subq	$0x1, %rdx
    0000001e: 	cmpq	%rdx, %rax
    00000021: 	jb	.Ltmp378 # Offset: 33
.Ltmp377:
    00000023: 	retq # Offset: 35
DWARF CFI Instructions:
    <empty>
End of Function "_Z20count_half_do_index2IhEmPT_m"

Binary Function "_Z20count_half_do_index3IhEmPT_m" after disassembly {
  Number      : 209
  State       : disassembled
  Address     : 0x44b0
  Size        : 0x27
  MaxSize     : 0x30
  Offset      : 0x44b0
  Section     : .text
  Orc Section : .local.text._Z20count_half_do_index3IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0208:
    00000000: 	endbr64
    00000004: 	xorl	%r8d, %r8d
    00000007: 	testq	%rsi, %rsi
    0000000a: 	je	.Ltmp379 # Offset: 10
    0000000c: 	nopl	(%rax) # Size: 4
.Ltmp380:
    00000010: 	addq	$0x1, %r8
    00000014: 	movl	%esi, %eax
    00000016: 	leal	(%r8,%r8), %edx
    0000001a: 	subl	%edx, %eax
    0000001c: 	subl	$0x1, %eax
    0000001f: 	testl	%eax, %eax
    00000021: 	jg	.Ltmp380 # Offset: 33
.Ltmp379:
    00000023: 	movq	%r8, %rax
    00000026: 	retq # Offset: 38
DWARF CFI Instructions:
    <empty>
End of Function "_Z20count_half_do_index3IhEmPT_m"

Binary Function "_Z20count_half_do_index4IhEmPT_m" after disassembly {
  Number      : 210
  State       : disassembled
  Address     : 0x44e0
  Size        : 0x1d
  MaxSize     : 0x20
  Offset      : 0x44e0
  Section     : .text
  Orc Section : .local.text._Z20count_half_do_index4IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0209:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	testq	%rsi, %rsi
    00000009: 	je	.Ltmp381 # Offset: 9
    0000000b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp382:
    00000010: 	addq	$0x1, %rax
    00000014: 	leal	0x1(%rax,%rax), %edx
    00000018: 	cmpl	%esi, %edx
    0000001a: 	js	.Ltmp382 # Offset: 26
.Ltmp381:
    0000001c: 	retq # Offset: 28
DWARF CFI Instructions:
    <empty>
End of Function "_Z20count_half_do_index4IhEmPT_m"

Binary Function "_Z20count_half_do_index5IhEmPT_m" after disassembly {
  Number      : 211
  State       : disassembled
  Address     : 0x4500
  Size        : 0x27
  MaxSize     : 0x30
  Offset      : 0x4500
  Section     : .text
  Orc Section : .local.text._Z20count_half_do_index5IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0210:
    00000000: 	endbr64
    00000004: 	xorl	%r8d, %r8d
    00000007: 	testq	%rsi, %rsi
    0000000a: 	je	.Ltmp383 # Offset: 10
    0000000c: 	nopl	(%rax) # Size: 4
.Ltmp384:
    00000010: 	addq	$0x1, %r8
    00000014: 	movl	%esi, %eax
    00000016: 	leal	(%r8,%r8), %edx
    0000001a: 	subl	%edx, %eax
    0000001c: 	subl	$0x1, %eax
    0000001f: 	testl	%eax, %eax
    00000021: 	jg	.Ltmp384 # Offset: 33
.Ltmp383:
    00000023: 	movq	%r8, %rax
    00000026: 	retq # Offset: 38
DWARF CFI Instructions:
    <empty>
End of Function "_Z20count_half_do_index5IhEmPT_m"

Binary Function "_Z19count_half_goto_optIhEmPT_m" after disassembly {
  Number      : 212
  State       : disassembled
  Address     : 0x4530
  Size        : 0x18
  MaxSize     : 0x20
  Offset      : 0x4530
  Section     : .text
  Orc Section : .local.text._Z19count_half_goto_optIhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0211:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	testq	%rsi, %rsi
    00000009: 	je	.Ltmp385 # Offset: 9
    0000000b: 	shrq	%rsi
    0000000e: 	movl	$0x1, %eax
    00000013: 	cmovneq	%rsi, %rax
.Ltmp385:
    00000017: 	retq # Offset: 23
DWARF CFI Instructions:
    <empty>
End of Function "_Z19count_half_goto_optIhEmPT_m"

Binary Function "_Z27count_half_goto_uncountableIhEmPT_m" after disassembly {
  Number      : 213
  State       : disassembled
  Address     : 0x4550
  Size        : 0x1b
  MaxSize     : 0x20
  Offset      : 0x4550
  Section     : .text
  Orc Section : .local.text._Z27count_half_goto_uncountableIhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0212:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	testq	%rsi, %rsi
    00000009: 	je	.Ltmp386 # Offset: 9
    0000000b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp387:
    00000010: 	addq	$0x1, %rax
    00000014: 	cmpb	$0x0, (%rdi,%rax)
    00000018: 	jne	.Ltmp387 # Offset: 24
.Ltmp386:
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_Z27count_half_goto_uncountableIhEmPT_m"

Binary Function "_Z24count_half_goto_pointer1IhEmPT_m" after disassembly {
  Number      : 214
  State       : disassembled
  Address     : 0x4570
  Size        : 0x28
  MaxSize     : 0x30
  Offset      : 0x4570
  Section     : .text
  Orc Section : .local.text._Z24count_half_goto_pointer1IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0213:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	testq	%rsi, %rsi
    00000009: 	je	.Ltmp388 # Offset: 9
    0000000b: 	leaq	-0x2(%rsi), %rax
    0000000f: 	leaq	-0x2(%rdi,%rsi), %rdx
    00000014: 	shrq	%rax
    00000017: 	addq	$0x1, %rax
    0000001b: 	cmpq	%rdx, %rdi
    0000001e: 	movl	$0x1, %edx
    00000023: 	cmovaq	%rdx, %rax
.Ltmp388:
    00000027: 	retq # Offset: 39
DWARF CFI Instructions:
    <empty>
End of Function "_Z24count_half_goto_pointer1IhEmPT_m"

Binary Function "_Z24count_half_goto_pointer2IhEmPT_m" after disassembly {
  Number      : 215
  State       : disassembled
  Address     : 0x45a0
  Size        : 0x28
  MaxSize     : 0x30
  Offset      : 0x45a0
  Section     : .text
  Orc Section : .local.text._Z24count_half_goto_pointer2IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0214:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	testq	%rsi, %rsi
    00000009: 	je	.Ltmp389 # Offset: 9
    0000000b: 	leaq	-0x2(%rsi), %rax
    0000000f: 	leaq	-0x2(%rdi,%rsi), %rdx
    00000014: 	shrq	%rax
    00000017: 	addq	$0x1, %rax
    0000001b: 	cmpq	%rdx, %rdi
    0000001e: 	movl	$0x1, %edx
    00000023: 	cmovaq	%rdx, %rax
.Ltmp389:
    00000027: 	retq # Offset: 39
DWARF CFI Instructions:
    <empty>
End of Function "_Z24count_half_goto_pointer2IhEmPT_m"

Binary Function "_Z22count_half_goto_index1IhEmPT_m" after disassembly {
  Number      : 216
  State       : disassembled
  Address     : 0x45d0
  Size        : 0x24
  MaxSize     : 0x30
  Offset      : 0x45d0
  Section     : .text
  Orc Section : .local.text._Z22count_half_goto_index1IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0215:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	testq	%rsi, %rsi
    00000009: 	je	.Ltmp390 # Offset: 9
    0000000b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp391:
    00000010: 	addq	$0x1, %rax
    00000014: 	movq	%rsi, %rdx
    00000017: 	subq	%rax, %rdx
    0000001a: 	subq	$0x1, %rdx
    0000001e: 	cmpq	%rdx, %rax
    00000021: 	jb	.Ltmp391 # Offset: 33
.Ltmp390:
    00000023: 	retq # Offset: 35
DWARF CFI Instructions:
    <empty>
End of Function "_Z22count_half_goto_index1IhEmPT_m"

Binary Function "_Z22count_half_goto_index2IhEmPT_m" after disassembly {
  Number      : 217
  State       : disassembled
  Address     : 0x4600
  Size        : 0x24
  MaxSize     : 0x30
  Offset      : 0x4600
  Section     : .text
  Orc Section : .local.text._Z22count_half_goto_index2IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0216:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	testq	%rsi, %rsi
    00000009: 	je	.Ltmp392 # Offset: 9
    0000000b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp393:
    00000010: 	addq	$0x1, %rax
    00000014: 	movq	%rsi, %rdx
    00000017: 	subq	%rax, %rdx
    0000001a: 	subq	$0x1, %rdx
    0000001e: 	cmpq	%rdx, %rax
    00000021: 	jb	.Ltmp393 # Offset: 33
.Ltmp392:
    00000023: 	retq # Offset: 35
DWARF CFI Instructions:
    <empty>
End of Function "_Z22count_half_goto_index2IhEmPT_m"

Binary Function "_Z22count_half_goto_index3IhEmPT_m" after disassembly {
  Number      : 218
  State       : disassembled
  Address     : 0x4630
  Size        : 0x27
  MaxSize     : 0x30
  Offset      : 0x4630
  Section     : .text
  Orc Section : .local.text._Z22count_half_goto_index3IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0217:
    00000000: 	endbr64
    00000004: 	xorl	%r8d, %r8d
    00000007: 	testq	%rsi, %rsi
    0000000a: 	je	.Ltmp394 # Offset: 10
    0000000c: 	nopl	(%rax) # Size: 4
.Ltmp395:
    00000010: 	addq	$0x1, %r8
    00000014: 	movl	%esi, %eax
    00000016: 	leal	(%r8,%r8), %edx
    0000001a: 	subl	%edx, %eax
    0000001c: 	subl	$0x1, %eax
    0000001f: 	testl	%eax, %eax
    00000021: 	jg	.Ltmp395 # Offset: 33
.Ltmp394:
    00000023: 	movq	%r8, %rax
    00000026: 	retq # Offset: 38
DWARF CFI Instructions:
    <empty>
End of Function "_Z22count_half_goto_index3IhEmPT_m"

Binary Function "_Z22count_half_goto_index4IhEmPT_m" after disassembly {
  Number      : 219
  State       : disassembled
  Address     : 0x4660
  Size        : 0x1d
  MaxSize     : 0x20
  Offset      : 0x4660
  Section     : .text
  Orc Section : .local.text._Z22count_half_goto_index4IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0218:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	testq	%rsi, %rsi
    00000009: 	je	.Ltmp396 # Offset: 9
    0000000b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp397:
    00000010: 	addq	$0x1, %rax
    00000014: 	leal	0x1(%rax,%rax), %edx
    00000018: 	cmpl	%esi, %edx
    0000001a: 	js	.Ltmp397 # Offset: 26
.Ltmp396:
    0000001c: 	retq # Offset: 28
DWARF CFI Instructions:
    <empty>
End of Function "_Z22count_half_goto_index4IhEmPT_m"

Binary Function "_Z22count_half_goto_index5IhEmPT_m" after disassembly {
  Number      : 220
  State       : disassembled
  Address     : 0x4680
  Size        : 0x27
  MaxSize     : 0x30
  Offset      : 0x4680
  Section     : .text
  Orc Section : .local.text._Z22count_half_goto_index5IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0219:
    00000000: 	endbr64
    00000004: 	xorl	%r8d, %r8d
    00000007: 	testq	%rsi, %rsi
    0000000a: 	je	.Ltmp398 # Offset: 10
    0000000c: 	nopl	(%rax) # Size: 4
.Ltmp399:
    00000010: 	addq	$0x1, %r8
    00000014: 	movl	%esi, %eax
    00000016: 	leal	(%r8,%r8), %edx
    0000001a: 	subl	%edx, %eax
    0000001c: 	subl	$0x1, %eax
    0000001f: 	testl	%eax, %eax
    00000021: 	jg	.Ltmp399 # Offset: 33
.Ltmp398:
    00000023: 	movq	%r8, %rax
    00000026: 	retq # Offset: 38
DWARF CFI Instructions:
    <empty>
End of Function "_Z22count_half_goto_index5IhEmPT_m"

Binary Function "_Z20count_half_goto2_optIhEmPT_m" after disassembly {
  Number      : 221
  State       : disassembled
  Address     : 0x46b0
  Size        : 0xb
  MaxSize     : 0x10
  Offset      : 0x46b0
  Section     : .text
  Orc Section : .local.text._Z20count_half_goto2_optIhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0220:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	shrq	%rax
    0000000a: 	retq # Offset: 10
DWARF CFI Instructions:
    <empty>
End of Function "_Z20count_half_goto2_optIhEmPT_m"

Binary Function "_Z28count_half_goto2_uncountableIhEmPT_m" after disassembly {
  Number      : 222
  State       : disassembled
  Address     : 0x46c0
  Size        : 0x21
  MaxSize     : 0x30
  Offset      : 0x46c0
  Section     : .text
  Orc Section : .local.text._Z28count_half_goto2_uncountableIhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0221:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	cmpb	$0x0, (%rdi)
    00000009: 	je	.Ltmp400 # Offset: 9
    0000000b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp401:
    00000010: 	addq	$0x1, %rax
    00000014: 	cmpb	$0x0, (%rdi,%rax)
    00000018: 	jne	.Ltmp401 # Offset: 24
    0000001a: 	retq # Offset: 26
    0000001b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp400:
    00000020: 	retq # Offset: 32
DWARF CFI Instructions:
    <empty>
End of Function "_Z28count_half_goto2_uncountableIhEmPT_m"

Binary Function "_Z25count_half_goto2_pointer1IhEmPT_m" after disassembly {
  Number      : 223
  State       : disassembled
  Address     : 0x46f0
  Size        : 0x23
  MaxSize     : 0x30
  Offset      : 0x46f0
  Section     : .text
  Orc Section : .local.text._Z25count_half_goto2_pointer1IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0222:
    00000000: 	endbr64
    00000004: 	leaq	-0x1(%rdi,%rsi), %rax
    00000009: 	cmpq	%rax, %rdi
    0000000c: 	jae	.Ltmp402 # Offset: 12
    0000000e: 	leaq	-0x2(%rsi), %rax
    00000012: 	shrq	%rax
    00000015: 	leaq	0x1(%rax), %rax
    00000019: 	retq # Offset: 25
    0000001a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp402:
    00000020: 	xorl	%eax, %eax
    00000022: 	retq # Offset: 34
DWARF CFI Instructions:
    <empty>
End of Function "_Z25count_half_goto2_pointer1IhEmPT_m"

Binary Function "_Z25count_half_goto2_pointer2IhEmPT_m" after disassembly {
  Number      : 224
  State       : disassembled
  Address     : 0x4720
  Size        : 0x23
  MaxSize     : 0x30
  Offset      : 0x4720
  Section     : .text
  Orc Section : .local.text._Z25count_half_goto2_pointer2IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0223:
    00000000: 	endbr64
    00000004: 	leaq	-0x1(%rdi,%rsi), %rax
    00000009: 	cmpq	%rax, %rdi
    0000000c: 	jae	.Ltmp403 # Offset: 12
    0000000e: 	leaq	-0x2(%rsi), %rax
    00000012: 	shrq	%rax
    00000015: 	leaq	0x1(%rax), %rax
    00000019: 	retq # Offset: 25
    0000001a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp403:
    00000020: 	xorl	%eax, %eax
    00000022: 	retq # Offset: 34
DWARF CFI Instructions:
    <empty>
End of Function "_Z25count_half_goto2_pointer2IhEmPT_m"

Binary Function "_Z25count_half_goto2_pointer3IhEmPT_m" after disassembly {
  Number      : 225
  State       : disassembled
  Address     : 0x4750
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x4750
  Section     : .text
  Orc Section : .local.text._Z25count_half_goto2_pointer3IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0224:
    00000000: 	endbr64
    00000004: 	subq	$0x1, %rsi
    00000008: 	xorl	%eax, %eax
    0000000a: 	leaq	(%rdi,%rsi), %r8
    0000000e: 	testq	%rsi, %rsi
    00000011: 	jle	.Ltmp404 # Offset: 17
    00000013: 	nopl	(%rax,%rax) # Size: 5
.Ltmp405:
    00000018: 	addq	$0x1, %rax
    0000001c: 	movq	%r8, %rdx
    0000001f: 	subq	%rax, %rdx
    00000022: 	leaq	(%rdi,%rax), %rcx
    00000026: 	subq	%rcx, %rdx
    00000029: 	testq	%rdx, %rdx
    0000002c: 	jg	.Ltmp405 # Offset: 44
    0000002e: 	retq # Offset: 46
    0000002f: 	nop # Size: 1
.Ltmp404:
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z25count_half_goto2_pointer3IhEmPT_m"

Binary Function "_Z23count_half_goto2_index1IhEmPT_m" after disassembly {
  Number      : 226
  State       : disassembled
  Address     : 0x4790
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x4790
  Section     : .text
  Orc Section : .local.text._Z23count_half_goto2_index1IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0225:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	cmpq	$0x1, %rsi
    0000000a: 	je	.Ltmp406 # Offset: 10
    0000000c: 	nopl	(%rax) # Size: 4
.Ltmp407:
    00000010: 	addq	$0x1, %rax
    00000014: 	movq	%rsi, %rdx
    00000017: 	subq	%rax, %rdx
    0000001a: 	subq	$0x1, %rdx
    0000001e: 	cmpq	%rax, %rdx
    00000021: 	ja	.Ltmp407 # Offset: 33
    00000023: 	retq # Offset: 35
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp406:
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_goto2_index1IhEmPT_m"

Binary Function "_Z23count_half_goto2_index2IhEmPT_m" after disassembly {
  Number      : 227
  State       : disassembled
  Address     : 0x47c0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x47c0
  Section     : .text
  Orc Section : .local.text._Z23count_half_goto2_index2IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0226:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	cmpq	$0x1, %rsi
    0000000a: 	je	.Ltmp408 # Offset: 10
    0000000c: 	nopl	(%rax) # Size: 4
.Ltmp409:
    00000010: 	addq	$0x1, %rax
    00000014: 	movq	%rsi, %rdx
    00000017: 	subq	%rax, %rdx
    0000001a: 	subq	$0x1, %rdx
    0000001e: 	cmpq	%rax, %rdx
    00000021: 	ja	.Ltmp409 # Offset: 33
    00000023: 	retq # Offset: 35
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp408:
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_goto2_index2IhEmPT_m"

Binary Function "_Z23count_half_goto2_index3IhEmPT_m" after disassembly {
  Number      : 228
  State       : disassembled
  Address     : 0x47f0
  Size        : 0x1b
  MaxSize     : 0x20
  Offset      : 0x47f0
  Section     : .text
  Orc Section : .local.text._Z23count_half_goto2_index3IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0227:
    00000000: 	endbr64
    00000004: 	leal	-0x1(%rsi), %eax
    00000007: 	testl	%eax, %eax
    00000009: 	jle	.Ltmp410 # Offset: 9
    0000000b: 	subl	$0x2, %esi
    0000000e: 	shrl	%esi
    00000010: 	leal	0x1(%rsi), %eax
    00000013: 	retq # Offset: 19
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp410:
    00000018: 	xorl	%eax, %eax
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_goto2_index3IhEmPT_m"

Binary Function "_Z23count_half_goto2_index4IhEmPT_m" after disassembly {
  Number      : 229
  State       : disassembled
  Address     : 0x4810
  Size        : 0x21
  MaxSize     : 0x30
  Offset      : 0x4810
  Section     : .text
  Orc Section : .local.text._Z23count_half_goto2_index4IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0228:
    00000000: 	endbr64
    00000004: 	movl	%esi, %ecx
    00000006: 	subl	$0x1, %esi
    00000009: 	xorl	%eax, %eax
    0000000b: 	testl	%esi, %esi
    0000000d: 	jle	.Ltmp411 # Offset: 13
    0000000f: 	nop # Size: 1
.Ltmp412:
    00000010: 	addq	$0x1, %rax
    00000014: 	leal	0x1(%rax,%rax), %edx
    00000018: 	cmpl	%ecx, %edx
    0000001a: 	js	.Ltmp412 # Offset: 26
    0000001c: 	retq # Offset: 28
    0000001d: 	nopl	(%rax) # Size: 3
.Ltmp411:
    00000020: 	retq # Offset: 32
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_goto2_index4IhEmPT_m"

Binary Function "_Z23count_half_goto2_index5IhEmPT_m" after disassembly {
  Number      : 230
  State       : disassembled
  Address     : 0x4840
  Size        : 0x1b
  MaxSize     : 0x20
  Offset      : 0x4840
  Section     : .text
  Orc Section : .local.text._Z23count_half_goto2_index5IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0229:
    00000000: 	endbr64
    00000004: 	leal	-0x1(%rsi), %eax
    00000007: 	testl	%eax, %eax
    00000009: 	jle	.Ltmp413 # Offset: 9
    0000000b: 	subl	$0x2, %esi
    0000000e: 	shrl	%esi
    00000010: 	leal	0x1(%rsi), %eax
    00000013: 	retq # Offset: 19
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp413:
    00000018: 	xorl	%eax, %eax
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_goto2_index5IhEmPT_m"

Binary Function "_Z20count_half_goto3_optIhEmPT_m" after disassembly {
  Number      : 231
  State       : disassembled
  Address     : 0x4860
  Size        : 0xb
  MaxSize     : 0x10
  Offset      : 0x4860
  Section     : .text
  Orc Section : .local.text._Z20count_half_goto3_optIhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0230:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	shrq	%rax
    0000000a: 	retq # Offset: 10
DWARF CFI Instructions:
    <empty>
End of Function "_Z20count_half_goto3_optIhEmPT_m"

Binary Function "_Z28count_half_goto3_uncountableIhEmPT_m" after disassembly {
  Number      : 232
  State       : disassembled
  Address     : 0x4870
  Size        : 0x1b
  MaxSize     : 0x20
  Offset      : 0x4870
  Section     : .text
  Orc Section : .local.text._Z28count_half_goto3_uncountableIhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0231:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	cmpb	$0x0, (%rdi)
    00000009: 	je	.Ltmp414 # Offset: 9
    0000000b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp415:
    00000010: 	addq	$0x1, %rax
    00000014: 	cmpb	$0x0, (%rdi,%rax)
    00000018: 	jne	.Ltmp415 # Offset: 24
.Ltmp414:
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_Z28count_half_goto3_uncountableIhEmPT_m"

Binary Function "_Z25count_half_goto3_pointer1IhEmPT_m" after disassembly {
  Number      : 233
  State       : disassembled
  Address     : 0x4890
  Size        : 0x21
  MaxSize     : 0x30
  Offset      : 0x4890
  Section     : .text
  Orc Section : .local.text._Z25count_half_goto3_pointer1IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0232:
    00000000: 	endbr64
    00000004: 	leaq	-0x2(%rsi), %rax
    00000008: 	leaq	-0x1(%rdi,%rsi), %rdx
    0000000d: 	shrq	%rax
    00000010: 	addq	$0x1, %rax
    00000014: 	cmpq	%rdx, %rdi
    00000017: 	movl	$0x0, %edx
    0000001c: 	cmovaeq	%rdx, %rax
    00000020: 	retq # Offset: 32
DWARF CFI Instructions:
    <empty>
End of Function "_Z25count_half_goto3_pointer1IhEmPT_m"

Binary Function "_Z25count_half_goto3_pointer2IhEmPT_m" after disassembly {
  Number      : 234
  State       : disassembled
  Address     : 0x48c0
  Size        : 0x21
  MaxSize     : 0x30
  Offset      : 0x48c0
  Section     : .text
  Orc Section : .local.text._Z25count_half_goto3_pointer2IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0233:
    00000000: 	endbr64
    00000004: 	leaq	-0x2(%rsi), %rax
    00000008: 	leaq	-0x1(%rdi,%rsi), %rdx
    0000000d: 	shrq	%rax
    00000010: 	addq	$0x1, %rax
    00000014: 	cmpq	%rdx, %rdi
    00000017: 	movl	$0x0, %edx
    0000001c: 	cmovaeq	%rdx, %rax
    00000020: 	retq # Offset: 32
DWARF CFI Instructions:
    <empty>
End of Function "_Z25count_half_goto3_pointer2IhEmPT_m"

Binary Function "_Z25count_half_goto3_pointer3IhEmPT_m" after disassembly {
  Number      : 235
  State       : disassembled
  Address     : 0x48f0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x48f0
  Section     : .text
  Orc Section : .local.text._Z25count_half_goto3_pointer3IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0234:
    00000000: 	endbr64
    00000004: 	subq	$0x1, %rsi
    00000008: 	xorl	%eax, %eax
    0000000a: 	leaq	(%rdi,%rsi), %r8
    0000000e: 	testq	%rsi, %rsi
    00000011: 	jle	.Ltmp416 # Offset: 17
    00000013: 	nopl	(%rax,%rax) # Size: 5
.Ltmp417:
    00000018: 	addq	$0x1, %rax
    0000001c: 	movq	%r8, %rdx
    0000001f: 	subq	%rax, %rdx
    00000022: 	leaq	(%rdi,%rax), %rcx
    00000026: 	subq	%rcx, %rdx
    00000029: 	testq	%rdx, %rdx
    0000002c: 	jg	.Ltmp417 # Offset: 44
.Ltmp416:
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_Z25count_half_goto3_pointer3IhEmPT_m"

Binary Function "_Z23count_half_goto3_index1IhEmPT_m" after disassembly {
  Number      : 236
  State       : disassembled
  Address     : 0x4920
  Size        : 0x24
  MaxSize     : 0x30
  Offset      : 0x4920
  Section     : .text
  Orc Section : .local.text._Z23count_half_goto3_index1IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0235:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	cmpq	$0x1, %rsi
    0000000a: 	je	.Ltmp418 # Offset: 10
    0000000c: 	nopl	(%rax) # Size: 4
.Ltmp419:
    00000010: 	addq	$0x1, %rax
    00000014: 	movq	%rsi, %rdx
    00000017: 	subq	%rax, %rdx
    0000001a: 	subq	$0x1, %rdx
    0000001e: 	cmpq	%rax, %rdx
    00000021: 	ja	.Ltmp419 # Offset: 33
.Ltmp418:
    00000023: 	retq # Offset: 35
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_goto3_index1IhEmPT_m"

Binary Function "_Z23count_half_goto3_index2IhEmPT_m" after disassembly {
  Number      : 237
  State       : disassembled
  Address     : 0x4950
  Size        : 0x24
  MaxSize     : 0x30
  Offset      : 0x4950
  Section     : .text
  Orc Section : .local.text._Z23count_half_goto3_index2IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0236:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	cmpq	$0x1, %rsi
    0000000a: 	je	.Ltmp420 # Offset: 10
    0000000c: 	nopl	(%rax) # Size: 4
.Ltmp421:
    00000010: 	addq	$0x1, %rax
    00000014: 	movq	%rsi, %rdx
    00000017: 	subq	%rax, %rdx
    0000001a: 	subq	$0x1, %rdx
    0000001e: 	cmpq	%rax, %rdx
    00000021: 	ja	.Ltmp421 # Offset: 33
.Ltmp420:
    00000023: 	retq # Offset: 35
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_goto3_index2IhEmPT_m"

Binary Function "_Z23count_half_goto3_index3IhEmPT_m" after disassembly {
  Number      : 238
  State       : disassembled
  Address     : 0x4980
  Size        : 0x1b
  MaxSize     : 0x20
  Offset      : 0x4980
  Section     : .text
  Orc Section : .local.text._Z23count_half_goto3_index3IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0237:
    00000000: 	endbr64
    00000004: 	leal	-0x1(%rsi), %eax
    00000007: 	testl	%eax, %eax
    00000009: 	jle	.Ltmp422 # Offset: 9
    0000000b: 	subl	$0x2, %esi
    0000000e: 	shrl	%esi
    00000010: 	leal	0x1(%rsi), %eax
    00000013: 	retq # Offset: 19
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp422:
    00000018: 	xorl	%eax, %eax
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_goto3_index3IhEmPT_m"

Binary Function "_Z23count_half_goto3_index4IhEmPT_m" after disassembly {
  Number      : 239
  State       : disassembled
  Address     : 0x49a0
  Size        : 0x1d
  MaxSize     : 0x20
  Offset      : 0x49a0
  Section     : .text
  Orc Section : .local.text._Z23count_half_goto3_index4IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0238:
    00000000: 	endbr64
    00000004: 	movl	%esi, %ecx
    00000006: 	subl	$0x1, %esi
    00000009: 	xorl	%eax, %eax
    0000000b: 	testl	%esi, %esi
    0000000d: 	jle	.Ltmp423 # Offset: 13
    0000000f: 	nop # Size: 1
.Ltmp424:
    00000010: 	addq	$0x1, %rax
    00000014: 	leal	0x1(%rax,%rax), %edx
    00000018: 	cmpl	%ecx, %edx
    0000001a: 	js	.Ltmp424 # Offset: 26
.Ltmp423:
    0000001c: 	retq # Offset: 28
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_goto3_index4IhEmPT_m"

Binary Function "_Z23count_half_goto3_index5IhEmPT_m" after disassembly {
  Number      : 240
  State       : disassembled
  Address     : 0x49c0
  Size        : 0x1b
  MaxSize     : 0x20
  Offset      : 0x49c0
  Section     : .text
  Orc Section : .local.text._Z23count_half_goto3_index5IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0239:
    00000000: 	endbr64
    00000004: 	leal	-0x1(%rsi), %eax
    00000007: 	testl	%eax, %eax
    00000009: 	jle	.Ltmp425 # Offset: 9
    0000000b: 	subl	$0x2, %esi
    0000000e: 	shrl	%esi
    00000010: 	leal	0x1(%rsi), %eax
    00000013: 	retq # Offset: 19
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp425:
    00000018: 	xorl	%eax, %eax
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_goto3_index5IhEmPT_m"

Binary Function "_Z20count_half_goto4_optIhEmPT_m" after disassembly {
  Number      : 241
  State       : disassembled
  Address     : 0x49e0
  Size        : 0x19
  MaxSize     : 0x20
  Offset      : 0x49e0
  Section     : .text
  Orc Section : .local.text._Z20count_half_goto4_optIhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0240:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	cmpq	$0x1, %rsi
    0000000a: 	jbe	.Ltmp426 # Offset: 10
    0000000c: 	shrq	%rsi
    0000000f: 	movl	$0x1, %eax
    00000014: 	cmovneq	%rsi, %rax
.Ltmp426:
    00000018: 	retq # Offset: 24
DWARF CFI Instructions:
    <empty>
End of Function "_Z20count_half_goto4_optIhEmPT_m"

Binary Function "_Z28count_half_goto4_uncountableIhEmPT_m" after disassembly {
  Number      : 242
  State       : disassembled
  Address     : 0x4a00
  Size        : 0x1b
  MaxSize     : 0x20
  Offset      : 0x4a00
  Section     : .text
  Orc Section : .local.text._Z28count_half_goto4_uncountableIhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0241:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	cmpb	$0x0, (%rdi)
    00000009: 	je	.Ltmp427 # Offset: 9
    0000000b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp428:
    00000010: 	addq	$0x1, %rax
    00000014: 	cmpb	$0x0, (%rdi,%rax)
    00000018: 	jne	.Ltmp428 # Offset: 24
.Ltmp427:
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_Z28count_half_goto4_uncountableIhEmPT_m"

Binary Function "_Z25count_half_goto4_pointer1IhEmPT_m" after disassembly {
  Number      : 243
  State       : disassembled
  Address     : 0x4a20
  Size        : 0x1c
  MaxSize     : 0x20
  Offset      : 0x4a20
  Section     : .text
  Orc Section : .local.text._Z25count_half_goto4_pointer1IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0242:
    00000000: 	endbr64
    00000004: 	leaq	-0x1(%rdi,%rsi), %rdx
    00000009: 	xorl	%eax, %eax
    0000000b: 	cmpq	%rdx, %rdi
    0000000e: 	jae	.Ltmp429 # Offset: 14
    00000010: 	subq	$0x2, %rsi
    00000014: 	shrq	%rsi
    00000017: 	leaq	0x1(%rsi), %rax
.Ltmp429:
    0000001b: 	retq # Offset: 27
DWARF CFI Instructions:
    <empty>
End of Function "_Z25count_half_goto4_pointer1IhEmPT_m"

Binary Function "_Z25count_half_goto4_pointer2IhEmPT_m" after disassembly {
  Number      : 244
  State       : disassembled
  Address     : 0x4a40
  Size        : 0x1c
  MaxSize     : 0x20
  Offset      : 0x4a40
  Section     : .text
  Orc Section : .local.text._Z25count_half_goto4_pointer2IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0243:
    00000000: 	endbr64
    00000004: 	leaq	-0x1(%rdi,%rsi), %rdx
    00000009: 	xorl	%eax, %eax
    0000000b: 	cmpq	%rdx, %rdi
    0000000e: 	jae	.Ltmp430 # Offset: 14
    00000010: 	subq	$0x2, %rsi
    00000014: 	shrq	%rsi
    00000017: 	leaq	0x1(%rsi), %rax
.Ltmp430:
    0000001b: 	retq # Offset: 27
DWARF CFI Instructions:
    <empty>
End of Function "_Z25count_half_goto4_pointer2IhEmPT_m"

Binary Function "_Z25count_half_goto4_pointer3IhEmPT_m" after disassembly {
  Number      : 245
  State       : disassembled
  Address     : 0x4a60
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x4a60
  Section     : .text
  Orc Section : .local.text._Z25count_half_goto4_pointer3IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0244:
    00000000: 	endbr64
    00000004: 	subq	$0x1, %rsi
    00000008: 	xorl	%eax, %eax
    0000000a: 	testq	%rsi, %rsi
    0000000d: 	jle	.Ltmp431 # Offset: 13
    0000000f: 	addq	%rdi, %rsi
    00000012: 	nopw	(%rax,%rax) # Size: 6
.Ltmp432:
    00000018: 	addq	$0x1, %rax
    0000001c: 	movq	%rsi, %rdx
    0000001f: 	subq	%rax, %rdx
    00000022: 	leaq	(%rdi,%rax), %rcx
    00000026: 	subq	%rcx, %rdx
    00000029: 	testq	%rdx, %rdx
    0000002c: 	jg	.Ltmp432 # Offset: 44
.Ltmp431:
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_Z25count_half_goto4_pointer3IhEmPT_m"

Binary Function "_Z23count_half_goto4_index1IhEmPT_m" after disassembly {
  Number      : 246
  State       : disassembled
  Address     : 0x4a90
  Size        : 0x24
  MaxSize     : 0x30
  Offset      : 0x4a90
  Section     : .text
  Orc Section : .local.text._Z23count_half_goto4_index1IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0245:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	cmpq	$0x1, %rsi
    0000000a: 	je	.Ltmp433 # Offset: 10
    0000000c: 	nopl	(%rax) # Size: 4
.Ltmp434:
    00000010: 	addq	$0x1, %rax
    00000014: 	movq	%rsi, %rdx
    00000017: 	subq	%rax, %rdx
    0000001a: 	subq	$0x1, %rdx
    0000001e: 	cmpq	%rdx, %rax
    00000021: 	jb	.Ltmp434 # Offset: 33
.Ltmp433:
    00000023: 	retq # Offset: 35
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_goto4_index1IhEmPT_m"

Binary Function "_Z23count_half_goto4_index2IhEmPT_m" after disassembly {
  Number      : 247
  State       : disassembled
  Address     : 0x4ac0
  Size        : 0x24
  MaxSize     : 0x30
  Offset      : 0x4ac0
  Section     : .text
  Orc Section : .local.text._Z23count_half_goto4_index2IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0246:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	cmpq	$0x1, %rsi
    0000000a: 	je	.Ltmp435 # Offset: 10
    0000000c: 	nopl	(%rax) # Size: 4
.Ltmp436:
    00000010: 	addq	$0x1, %rax
    00000014: 	movq	%rsi, %rdx
    00000017: 	subq	%rax, %rdx
    0000001a: 	subq	$0x1, %rdx
    0000001e: 	cmpq	%rdx, %rax
    00000021: 	jb	.Ltmp436 # Offset: 33
.Ltmp435:
    00000023: 	retq # Offset: 35
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_goto4_index2IhEmPT_m"

Binary Function "_Z23count_half_goto4_index3IhEmPT_m" after disassembly {
  Number      : 248
  State       : disassembled
  Address     : 0x4af0
  Size        : 0x16
  MaxSize     : 0x20
  Offset      : 0x4af0
  Section     : .text
  Orc Section : .local.text._Z23count_half_goto4_index3IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0247:
    00000000: 	endbr64
    00000004: 	leal	-0x1(%rsi), %edx
    00000007: 	xorl	%eax, %eax
    00000009: 	testl	%edx, %edx
    0000000b: 	jle	.Ltmp437 # Offset: 11
    0000000d: 	subl	$0x2, %esi
    00000010: 	shrl	%esi
    00000012: 	leal	0x1(%rsi), %eax
.Ltmp437:
    00000015: 	retq # Offset: 21
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_goto4_index3IhEmPT_m"

Binary Function "_Z23count_half_goto4_index4IhEmPT_m" after disassembly {
  Number      : 249
  State       : disassembled
  Address     : 0x4b10
  Size        : 0x1d
  MaxSize     : 0x20
  Offset      : 0x4b10
  Section     : .text
  Orc Section : .local.text._Z23count_half_goto4_index4IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0248:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp438:
    00000010: 	addq	$0x1, %rax
    00000014: 	leal	0x1(%rax,%rax), %edx
    00000018: 	cmpl	%esi, %edx
    0000001a: 	js	.Ltmp438 # Offset: 26
    0000001c: 	retq # Offset: 28
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_goto4_index4IhEmPT_m"

Binary Function "_Z23count_half_goto4_index5IhEmPT_m" after disassembly {
  Number      : 250
  State       : disassembled
  Address     : 0x4b30
  Size        : 0x27
  MaxSize     : 0x30
  Offset      : 0x4b30
  Section     : .text
  Orc Section : .local.text._Z23count_half_goto4_index5IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0249:
    00000000: 	endbr64
    00000004: 	xorl	%r8d, %r8d
    00000007: 	nopw	(%rax,%rax) # Size: 9
.Ltmp439:
    00000010: 	addq	$0x1, %r8
    00000014: 	movl	%esi, %eax
    00000016: 	leal	(%r8,%r8), %edx
    0000001a: 	subl	%edx, %eax
    0000001c: 	subl	$0x1, %eax
    0000001f: 	testl	%eax, %eax
    00000021: 	jg	.Ltmp439 # Offset: 33
    00000023: 	movq	%r8, %rax
    00000026: 	retq # Offset: 38
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_goto4_index5IhEmPT_m"

Binary Function "_Z23count_half_forrange_optISt6vectorIhSaIhEEEmRKT_m" after disassembly {
  Number      : 251
  State       : disassembled
  Address     : 0x4b60
  Size        : 0xf
  MaxSize     : 0x10
  Offset      : 0x4b60
  Section     : .text
  Orc Section : .local.text._Z23count_half_forrange_optISt6vectorIhSaIhEEEmRKT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0250:
    00000000: 	endbr64
    00000004: 	movq	0x8(%rdi), %rax
    00000008: 	subq	(%rdi), %rax
    0000000b: 	shrq	%rax
    0000000e: 	retq # Offset: 14
DWARF CFI Instructions:
    <empty>
End of Function "_Z23count_half_forrange_optISt6vectorIhSaIhEEEmRKT_m"

Binary Function "_Z24count_half_forrange_opt2ISt6vectorIhSaIhEEEmRKT_m" after disassembly {
  Number      : 252
  State       : disassembled
  Address     : 0x4b70
  Size        : 0xb
  MaxSize     : 0x10
  Offset      : 0x4b70
  Section     : .text
  Orc Section : .local.text._Z24count_half_forrange_opt2ISt6vectorIhSaIhEEEmRKT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0251:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	shrq	%rax
    0000000a: 	retq # Offset: 10
DWARF CFI Instructions:
    <empty>
End of Function "_Z24count_half_forrange_opt2ISt6vectorIhSaIhEEEmRKT_m"

Binary Function "_Z31count_half_forrange_uncountableISt6vectorIhSaIhEEEmRKT_m" after disassembly {
  Number      : 253
  State       : disassembled
  Address     : 0x4b80
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x4b80
  Section     : .text
  Orc Section : .local.text._Z31count_half_forrange_uncountableISt6vectorIhSaIhEEEmRKT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0252:
    00000000: 	endbr64
    00000004: 	movq	(%rdi), %rdx
    00000007: 	movq	0x8(%rdi), %rsi
    0000000b: 	xorl	%eax, %eax
    0000000d: 	cmpq	%rdx, %rsi
    00000010: 	jne	.Ltmp440 # Offset: 16
    00000012: 	jmp	.Ltmp441 # Offset: 18
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp443:
    00000018: 	addq	$0x1, %rax
    0000001c: 	leaq	(%rdx,%rax), %rcx
    00000020: 	cmpq	%rcx, %rsi
    00000023: 	je	.Ltmp442 # Offset: 35
.Ltmp440:
    00000025: 	cmpb	$0x0, (%rdx,%rax)
    00000029: 	jne	.Ltmp443 # Offset: 41
.Ltmp441:
    0000002b: 	retq # Offset: 43
    0000002c: 	nopl	(%rax) # Size: 4
.Ltmp442:
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z31count_half_forrange_uncountableISt6vectorIhSaIhEEEmRKT_m"

Binary Function "_Z20count_half_forrange1ISt6vectorIhSaIhEEEmRKT_m" after disassembly {
  Number      : 254
  State       : disassembled
  Address     : 0x4bc0
  Size        : 0x5c
  MaxSize     : 0x60
  Offset      : 0x4bc0
  Section     : .text
  Orc Section : .local.text._Z20count_half_forrange1ISt6vectorIhSaIhEEEmRKT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0253:
    00000000: 	endbr64
    00000004: 	movq	0x8(%rdi), %rsi
    00000008: 	movq	(%rdi), %rax
    0000000b: 	movq	%rsi, %rdx
    0000000e: 	subq	%rax, %rdx
    00000011: 	movq	%rdx, %rcx
    00000014: 	shrq	%rcx
    00000017: 	cmpq	%rax, %rsi
    0000001a: 	je	.Ltmp444 # Offset: 26
    0000001c: 	cmpq	$0x1, %rcx
    00000020: 	je	.Ltmp445 # Offset: 32
    00000022: 	movq	%rdx, %r8
    00000025: 	movl	$0x1, %eax
    0000002a: 	jmp	.Ltmp446 # Offset: 42
    0000002c: 	nopl	(%rax) # Size: 4
.Ltmp448:
    00000030: 	addq	$0x1, %rax
    00000034: 	cmpq	%rax, %rcx
    00000037: 	je	.Ltmp447 # Offset: 55
.Ltmp446:
    00000039: 	cmpq	%rax, %rdx
    0000003c: 	jne	.Ltmp448 # Offset: 60
.Ltmp449:
    0000003e: 	movq	%r8, %rax
    00000041: 	retq # Offset: 65
    00000042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp447:
    00000048: 	movq	%rcx, %r8
    0000004b: 	movq	%r8, %rax
    0000004e: 	retq # Offset: 78
.Ltmp444:
    0000004f: 	xorl	%r8d, %r8d
    00000052: 	jmp	.Ltmp449 # Offset: 82
.Ltmp445:
    00000054: 	movl	$0x1, %r8d
    0000005a: 	jmp	.Ltmp449 # Offset: 90
DWARF CFI Instructions:
    <empty>
End of Function "_Z20count_half_forrange1ISt6vectorIhSaIhEEEmRKT_m"

Binary Function "_Z20count_half_forrange2ISt6vectorIhSaIhEEEmRKT_m" after disassembly {
  Number      : 255
  State       : disassembled
  Address     : 0x4c20
  Size        : 0x21
  MaxSize     : 0x30
  Offset      : 0x4c20
  Section     : .text
  Orc Section : .local.text._Z20count_half_forrange2ISt6vectorIhSaIhEEEmRKT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0254:
    00000000: 	endbr64
    00000004: 	movq	0x8(%rdi), %rcx
    00000008: 	movq	(%rdi), %rdx
    0000000b: 	movq	%rcx, %rax
    0000000e: 	subq	%rdx, %rax
    00000011: 	shrq	%rax
    00000014: 	cmpq	%rdx, %rcx
    00000017: 	movl	$0x0, %edx
    0000001c: 	cmoveq	%rdx, %rax
    00000020: 	retq # Offset: 32
DWARF CFI Instructions:
    <empty>
End of Function "_Z20count_half_forrange2ISt6vectorIhSaIhEEEmRKT_m"

Binary Function "_Z20count_half_forrange3ISt6vectorIhSaIhEEEmRKT_m" after disassembly {
  Number      : 256
  State       : disassembled
  Address     : 0x4c50
  Size        : 0x64
  MaxSize     : 0x70
  Offset      : 0x4c50
  Section     : .text
  Orc Section : .local.text._Z20count_half_forrange3ISt6vectorIhSaIhEEEmRKT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0255:
    00000000: 	endbr64
    00000004: 	movq	0x8(%rdi), %rcx
    00000008: 	movq	(%rdi), %rax
    0000000b: 	movq	%rcx, %rdx
    0000000e: 	subq	%rax, %rdx
    00000011: 	cmpq	%rax, %rcx
    00000014: 	je	.Ltmp450 # Offset: 20
    00000016: 	cmpq	$0x2, %rdx
    0000001a: 	je	.Ltmp451 # Offset: 26
    0000001c: 	movq	%rdx, %r8
    0000001f: 	movl	$0x1, %eax
    00000024: 	jmp	.Ltmp452 # Offset: 36
    00000026: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp454:
    00000030: 	addq	$0x1, %rax
    00000034: 	leaq	(%rax,%rax), %rcx
    00000038: 	cmpq	%rcx, %rdx
    0000003b: 	je	.Ltmp453 # Offset: 59
.Ltmp452:
    0000003d: 	cmpq	%rax, %rdx
    00000040: 	jne	.Ltmp454 # Offset: 64
.Ltmp455:
    00000042: 	movq	%r8, %rax
    00000045: 	retq # Offset: 69
    00000046: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp453:
    00000050: 	movq	%rax, %r8
    00000053: 	movq	%r8, %rax
    00000056: 	retq # Offset: 86
.Ltmp450:
    00000057: 	xorl	%r8d, %r8d
    0000005a: 	jmp	.Ltmp455 # Offset: 90
.Ltmp451:
    0000005c: 	movl	$0x1, %r8d
    00000062: 	jmp	.Ltmp455 # Offset: 98
DWARF CFI Instructions:
    <empty>
End of Function "_Z20count_half_forrange3ISt6vectorIhSaIhEEEmRKT_m"

Binary Function "_Z22count_half_do_pointer2IiEmPT_m" after disassembly {
  Number      : 257
  State       : disassembled
  Address     : 0x4cc0
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x4cc0
  Section     : .text
  Orc Section : .local.text._Z22count_half_do_pointer2IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0256:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	testq	%rsi, %rsi
    00000009: 	je	.Ltmp456 # Offset: 9
    0000000b: 	shlq	$0x2, %rsi
    0000000f: 	leaq	-0x3(%rdi), %rcx
    00000013: 	leaq	-0x5(%rsi), %rax
    00000017: 	leaq	-0x8(%rdi,%rsi), %rdx
    0000001c: 	shrq	$0x3, %rax
    00000020: 	addq	$0x1, %rax
    00000024: 	cmpq	%rdx, %rcx
    00000027: 	movl	$0x1, %edx
    0000002c: 	cmovaq	%rdx, %rax
.Ltmp456:
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z22count_half_do_pointer2IiEmPT_m"

Binary Function "_Z22count_half_do_pointer3IiEmPT_m" after disassembly {
  Number      : 258
  State       : disassembled
  Address     : 0x4d00
  Size        : 0x33
  MaxSize     : 0x40
  Offset      : 0x4d00
  Section     : .text
  Orc Section : .local.text._Z22count_half_do_pointer3IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0257:
    00000000: 	endbr64
    00000004: 	xorl	%r8d, %r8d
    00000007: 	testq	%rsi, %rsi
    0000000a: 	je	.Ltmp457 # Offset: 10
    0000000c: 	leaq	-0x4(%rdi,%rsi,4), %rax
    00000011: 	nopl	(%rax) # Size: 7
.Ltmp458:
    00000018: 	subq	$0x4, %rax
    0000001c: 	addq	$0x4, %rdi
    00000020: 	addq	$0x1, %r8
    00000024: 	movq	%rax, %rdx
    00000027: 	subq	%rdi, %rdx
    0000002a: 	testq	%rdx, %rdx
    0000002d: 	jg	.Ltmp458 # Offset: 45
.Ltmp457:
    0000002f: 	movq	%r8, %rax
    00000032: 	retq # Offset: 50
DWARF CFI Instructions:
    <empty>
End of Function "_Z22count_half_do_pointer3IiEmPT_m"

Binary Function "_Z24count_half_goto_pointer2IiEmPT_m" after disassembly {
  Number      : 259
  State       : disassembled
  Address     : 0x4d40
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x4d40
  Section     : .text
  Orc Section : .local.text._Z24count_half_goto_pointer2IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0258:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	testq	%rsi, %rsi
    00000009: 	je	.Ltmp459 # Offset: 9
    0000000b: 	shlq	$0x2, %rsi
    0000000f: 	leaq	-0x3(%rdi), %rcx
    00000013: 	leaq	-0x5(%rsi), %rax
    00000017: 	leaq	-0x8(%rdi,%rsi), %rdx
    0000001c: 	shrq	$0x3, %rax
    00000020: 	addq	$0x1, %rax
    00000024: 	cmpq	%rdx, %rcx
    00000027: 	movl	$0x1, %edx
    0000002c: 	cmovaq	%rdx, %rax
.Ltmp459:
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z24count_half_goto_pointer2IiEmPT_m"

Binary Function "_Z24count_half_goto_pointer3IiEmPT_m" after disassembly {
  Number      : 260
  State       : disassembled
  Address     : 0x4d80
  Size        : 0x33
  MaxSize     : 0x40
  Offset      : 0x4d80
  Section     : .text
  Orc Section : .local.text._Z24count_half_goto_pointer3IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0259:
    00000000: 	endbr64
    00000004: 	xorl	%r8d, %r8d
    00000007: 	testq	%rsi, %rsi
    0000000a: 	je	.Ltmp460 # Offset: 10
    0000000c: 	leaq	-0x4(%rdi,%rsi,4), %rax
    00000011: 	nopl	(%rax) # Size: 7
.Ltmp461:
    00000018: 	subq	$0x4, %rax
    0000001c: 	addq	$0x4, %rdi
    00000020: 	addq	$0x1, %r8
    00000024: 	movq	%rax, %rdx
    00000027: 	subq	%rdi, %rdx
    0000002a: 	testq	%rdx, %rdx
    0000002d: 	jg	.Ltmp461 # Offset: 45
.Ltmp460:
    0000002f: 	movq	%r8, %rax
    00000032: 	retq # Offset: 50
DWARF CFI Instructions:
    <empty>
End of Function "_Z24count_half_goto_pointer3IiEmPT_m"

Binary Function "_Z22count_half_do_pointer3IhEmPT_m" after disassembly {
  Number      : 261
  State       : disassembled
  Address     : 0x4dc0
  Size        : 0x27
  MaxSize     : 0x30
  Offset      : 0x4dc0
  Section     : .text
  Orc Section : .local.text._Z22count_half_do_pointer3IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0260:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	testq	%rsi, %rsi
    00000009: 	je	.Ltmp462 # Offset: 9
    0000000b: 	leaq	-0x1(%rdi,%rsi), %rsi
.Ltmp463:
    00000010: 	addq	$0x1, %rax
    00000014: 	movq	%rsi, %rdx
    00000017: 	subq	%rax, %rdx
    0000001a: 	leaq	(%rdi,%rax), %rcx
    0000001e: 	subq	%rcx, %rdx
    00000021: 	testq	%rdx, %rdx
    00000024: 	jg	.Ltmp463 # Offset: 36
.Ltmp462:
    00000026: 	retq # Offset: 38
DWARF CFI Instructions:
    <empty>
End of Function "_Z22count_half_do_pointer3IhEmPT_m"

Binary Function "_Z24count_half_goto_pointer3IhEmPT_m" after disassembly {
  Number      : 262
  State       : disassembled
  Address     : 0x4df0
  Size        : 0x27
  MaxSize     : 0x30
  Offset      : 0x4df0
  Section     : .text
  Orc Section : .local.text._Z24count_half_goto_pointer3IhEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0261:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	testq	%rsi, %rsi
    00000009: 	je	.Ltmp464 # Offset: 9
    0000000b: 	leaq	-0x1(%rdi,%rsi), %rsi
.Ltmp465:
    00000010: 	addq	$0x1, %rax
    00000014: 	movq	%rsi, %rdx
    00000017: 	subq	%rax, %rdx
    0000001a: 	leaq	(%rdi,%rax), %rcx
    0000001e: 	subq	%rcx, %rdx
    00000021: 	testq	%rdx, %rdx
    00000024: 	jg	.Ltmp465 # Offset: 36
.Ltmp464:
    00000026: 	retq # Offset: 38
DWARF CFI Instructions:
    <empty>
End of Function "_Z24count_half_goto_pointer3IhEmPT_m"

Binary Function "_Z22count_half_do_pointer1IiEmPT_m" after disassembly {
  Number      : 263
  State       : disassembled
  Address     : 0x4e20
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x4e20
  Section     : .text
  Orc Section : .local.text._Z22count_half_do_pointer1IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0262:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	testq	%rsi, %rsi
    00000009: 	je	.Ltmp466 # Offset: 9
    0000000b: 	shlq	$0x2, %rsi
    0000000f: 	leaq	-0x3(%rdi), %rcx
    00000013: 	leaq	-0x5(%rsi), %rax
    00000017: 	leaq	-0x8(%rdi,%rsi), %rdx
    0000001c: 	shrq	$0x3, %rax
    00000020: 	addq	$0x1, %rax
    00000024: 	cmpq	%rdx, %rcx
    00000027: 	movl	$0x1, %edx
    0000002c: 	cmovaq	%rdx, %rax
.Ltmp466:
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z22count_half_do_pointer1IiEmPT_m"

Binary Function "_Z24count_half_goto_pointer1IiEmPT_m" after disassembly {
  Number      : 264
  State       : disassembled
  Address     : 0x4e60
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x4e60
  Section     : .text
  Orc Section : .local.text._Z24count_half_goto_pointer1IiEmPT_m
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0263:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	testq	%rsi, %rsi
    00000009: 	je	.Ltmp467 # Offset: 9
    0000000b: 	shlq	$0x2, %rsi
    0000000f: 	leaq	-0x3(%rdi), %rcx
    00000013: 	leaq	-0x5(%rsi), %rax
    00000017: 	leaq	-0x8(%rdi,%rsi), %rdx
    0000001c: 	shrq	$0x3, %rax
    00000020: 	addq	$0x1, %rax
    00000024: 	cmpq	%rdx, %rcx
    00000027: 	movl	$0x1, %edx
    0000002c: 	cmovaq	%rdx, %rax
.Ltmp467:
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z24count_half_goto_pointer1IiEmPT_m"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev(*2)" after disassembly {
  All names   : _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
                _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev
  Number      : 265
  State       : disassembled
  Address     : 0x4ea0
  Size        : 0x1f7
  MaxSize     : 0x200
  Offset      : 0x4ea0
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0264:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x28, %rsp
    00000015: 	movq	0x20(%rdi), %rcx
    00000019: 	movq	0x30(%rdi), %rax
    0000001d: 	movq	0x38(%rdi), %r13
    00000021: 	movq	0x10(%rdi), %rbp
    00000025: 	movq	%rcx, 0x10(%rsp)
    0000002a: 	movq	0x28(%rdi), %rcx
    0000002e: 	movq	%rax, 0x8(%rsp)
    00000033: 	movq	0x48(%rdi), %rax
    00000037: 	leaq	0x8(%rcx), %r12
    0000003b: 	movq	%rcx, 0x18(%rsp)
    00000040: 	movq	%rax, (%rsp)
    00000044: 	cmpq	%r12, %rax
    00000047: 	jbe	.Ltmp468 # Offset: 71
    00000049: 	nopl	(%rax) # Size: 7
.Ltmp471:
    00000050: 	movq	(%r12), %r15
    00000054: 	leaq	0x200(%r15), %rbx
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp470:
    00000060: 	movq	(%r15), %rdi
    00000063: 	leaq	0x10(%r15), %rdx
    00000067: 	cmpq	%rdx, %rdi
    0000006a: 	je	.Ltmp469 # Offset: 106
    00000070: 	movq	0x10(%r15), %rax
    00000074: 	addq	$0x20, %r15
    00000078: 	leaq	0x1(%rax), %rsi
    0000007c: 	callq	_ZdlPvm@PLT # Offset: 124
    00000081: 	cmpq	%r15, %rbx
    00000084: 	jne	.Ltmp470 # Offset: 132
    00000086: 	addq	$0x8, %r12
    0000008a: 	cmpq	%r12, (%rsp)
    0000008e: 	ja	.Ltmp471 # Offset: 142
.Ltmp468:
    00000090: 	movq	(%rsp), %rcx
    00000094: 	cmpq	%rcx, 0x18(%rsp)
    00000099: 	je	.Ltmp472 # Offset: 153
    0000009f: 	cmpq	0x10(%rsp), %rbp
    000000a4: 	je	.Ltmp473 # Offset: 164
.Ltmp476:
    000000a6: 	movq	(%rbp), %rdi
    000000aa: 	leaq	0x10(%rbp), %rax
    000000ae: 	cmpq	%rax, %rdi
    000000b1: 	je	.Ltmp474 # Offset: 177
.Ltmp475:
    000000b3: 	movq	0x10(%rbp), %rax
    000000b7: 	addq	$0x20, %rbp
    000000bb: 	leaq	0x1(%rax), %rsi
    000000bf: 	callq	_ZdlPvm@PLT # Offset: 191
    000000c4: 	cmpq	%rbp, 0x10(%rsp)
    000000c9: 	je	.Ltmp473 # Offset: 201
    000000cb: 	movq	(%rbp), %rdi
    000000cf: 	leaq	0x10(%rbp), %rax
    000000d3: 	cmpq	%rax, %rdi
    000000d6: 	jne	.Ltmp475 # Offset: 214
.Ltmp474:
    000000d8: 	addq	$0x20, %rbp
    000000dc: 	cmpq	%rbp, 0x10(%rsp)
    000000e1: 	jne	.Ltmp476 # Offset: 225
    000000e3: 	cmpq	%r13, 0x8(%rsp)
    000000e8: 	je	.Ltmp477 # Offset: 232
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp479:
    000000f0: 	movq	(%r13), %rdi
    000000f4: 	leaq	0x10(%r13), %rax
    000000f8: 	cmpq	%rax, %rdi
    000000fb: 	je	.Ltmp478 # Offset: 251
    000000fd: 	movq	0x10(%r13), %rax
    00000101: 	leaq	0x1(%rax), %rsi
    00000105: 	callq	_ZdlPvm@PLT # Offset: 261
.Ltmp478:
    0000010a: 	addq	$0x20, %r13
.Ltmp473:
    0000010e: 	cmpq	%r13, 0x8(%rsp)
    00000113: 	jne	.Ltmp479 # Offset: 275
.Ltmp477:
    00000115: 	movq	(%r14), %rdi
    00000118: 	testq	%rdi, %rdi
    0000011b: 	je	.Ltmp480 # Offset: 283
.Ltmp486:
    00000121: 	movq	0x48(%r14), %rax
    00000125: 	movq	0x28(%r14), %rbx
    00000129: 	leaq	0x8(%rax), %rbp
    0000012d: 	cmpq	%rbx, %rbp
    00000130: 	jbe	.Ltmp481 # Offset: 304
    00000132: 	nopw	(%rax,%rax) # Size: 6
.Ltmp482:
    00000138: 	movq	(%rbx), %rdi
    0000013b: 	movl	$0x200, %esi
    00000140: 	addq	$0x8, %rbx
    00000144: 	callq	_ZdlPvm@PLT # Offset: 324
    00000149: 	cmpq	%rbx, %rbp
    0000014c: 	ja	.Ltmp482 # Offset: 332
    0000014e: 	movq	(%r14), %rdi
.Ltmp481:
    00000151: 	movq	0x8(%r14), %rsi
    00000155: 	addq	$0x28, %rsp
    00000159: 	popq	%rbx
    0000015a: 	popq	%rbp
    0000015b: 	shlq	$0x3, %rsi
    0000015f: 	popq	%r12
    00000161: 	popq	%r13
    00000163: 	popq	%r14
    00000165: 	popq	%r15
    00000167: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 359
    0000016c: 	nopl	(%rax) # Size: 4
.Ltmp469:
    00000170: 	addq	$0x20, %r15
    00000174: 	cmpq	%r15, %rbx
    00000177: 	jne	.Ltmp470 # Offset: 375
    0000017d: 	addq	$0x8, %r12
    00000181: 	cmpq	%r12, (%rsp)
    00000185: 	ja	.Ltmp471 # Offset: 389
    0000018b: 	jmp	.Ltmp468 # Offset: 395
.Ltmp472:
    00000190: 	cmpq	0x8(%rsp), %rbp
    00000195: 	je	.Ltmp477 # Offset: 405
.Ltmp485:
    0000019b: 	movq	(%rbp), %rdi
    0000019f: 	leaq	0x10(%rbp), %rax
    000001a3: 	cmpq	%rax, %rdi
    000001a6: 	je	.Ltmp483 # Offset: 422
.Ltmp484:
    000001a8: 	movq	0x10(%rbp), %rax
    000001ac: 	addq	$0x20, %rbp
    000001b0: 	leaq	0x1(%rax), %rsi
    000001b4: 	callq	_ZdlPvm@PLT # Offset: 436
    000001b9: 	cmpq	%rbp, 0x8(%rsp)
    000001be: 	je	.Ltmp477 # Offset: 446
    000001c4: 	movq	(%rbp), %rdi
    000001c8: 	leaq	0x10(%rbp), %rax
    000001cc: 	cmpq	%rax, %rdi
    000001cf: 	jne	.Ltmp484 # Offset: 463
.Ltmp483:
    000001d1: 	addq	$0x20, %rbp
    000001d5: 	cmpq	%rbp, 0x8(%rsp)
    000001da: 	jne	.Ltmp485 # Offset: 474
    000001dc: 	movq	(%r14), %rdi
    000001df: 	testq	%rdi, %rdi
    000001e2: 	jne	.Ltmp486 # Offset: 482
.Ltmp480:
    000001e8: 	addq	$0x28, %rsp
    000001ec: 	popq	%rbx
    000001ed: 	popq	%rbp
    000001ee: 	popq	%r12
    000001f0: 	popq	%r13
    000001f2: 	popq	%r14
    000001f4: 	popq	%r15
    000001f6: 	retq # Offset: 502
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev(*2)"

Binary Function "_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_" after disassembly {
  Number      : 266
  State       : disassembled
  Address     : 0x50a0
  Size        : 0x145
  MaxSize     : 0x150
  Offset      : 0x50a0
  Section     : .text
  Orc Section : .local.text._ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0265:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	movq	%rdi, %r12
    0000000d: 	pushq	%rbp
    0000000e: 	movq	%rdx, %rbp
    00000011: 	pushq	%rbx
    00000012: 	leaq	0x10(%rdi), %rbx
    00000016: 	subq	$0x10, %rsp
    0000001a: 	movq	0x8(%rsi), %r13
    0000001e: 	movq	%fs:0x28, %rax
    00000027: 	movq	%rax, 0x8(%rsp)
    0000002c: 	xorl	%eax, %eax
    0000002e: 	movq	%rbx, (%rdi)
    00000031: 	movq	(%rsi), %r14
    00000034: 	movq	%r14, %rax
    00000037: 	addq	%r13, %rax
    0000003a: 	je	.Ltmp487 # Offset: 58
    0000003c: 	testq	%r14, %r14
    0000003f: 	je	.Ltmp488 # Offset: 63
.Ltmp487:
    00000045: 	movq	%r13, (%rsp)
    00000049: 	cmpq	$0xf, %r13
    0000004d: 	ja	.Ltmp489 # Offset: 77
    0000004f: 	cmpq	$0x1, %r13
    00000053: 	jne	.Ltmp490 # Offset: 83
    00000055: 	movzbl	(%r14), %eax
    00000059: 	movb	%al, 0x10(%r12)
    0000005e: 	movq	%rbx, %rax
.Ltmp494:
    00000061: 	movq	%r13, 0x8(%r12)
    00000066: 	movq	%rbp, %rdi
    00000069: 	movb	$0x0, (%rax,%r13)
    0000006e: 	callq	strlen@PLT # Offset: 110
    00000073: 	movq	%rax, %rdx
    00000076: 	movabsq	$0x3fffffffffffffff, %rax
    00000080: 	subq	0x8(%r12), %rax
    00000085: 	cmpq	%rax, %rdx
    00000088: 	ja	.Ltmp491 # Offset: 136
    0000008a: 	movq	%rbp, %rsi
    0000008d: 	movq	%r12, %rdi
    00000090: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 144
    00000095: 	movq	0x8(%rsp), %rax
    0000009a: 	subq	%fs:0x28, %rax
    000000a3: 	jne	.Ltmp492 # Offset: 163
    000000a5: 	addq	$0x10, %rsp
    000000a9: 	movq	%r12, %rax
    000000ac: 	popq	%rbx
    000000ad: 	popq	%rbp
    000000ae: 	popq	%r12
    000000b0: 	popq	%r13
    000000b2: 	popq	%r14
    000000b4: 	retq # Offset: 180
    000000b5: 	nopl	(%rax) # Size: 3
.Ltmp490:
    000000b8: 	testq	%r13, %r13
    000000bb: 	jne	.Ltmp493 # Offset: 187
    000000bd: 	movq	%rbx, %rax
    000000c0: 	jmp	.Ltmp494 # Offset: 192
    000000c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp489:
    000000c8: 	movq	%r12, %rdi
    000000cb: 	movq	%rsp, %rsi
    000000ce: 	xorl	%edx, %edx
    000000d0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 208
    000000d5: 	movq	%rax, (%r12)
    000000d9: 	movq	%rax, %rdi
    000000dc: 	movq	(%rsp), %rax
    000000e0: 	movq	%rax, 0x10(%r12)
.Ltmp495:
    000000e5: 	movq	%r13, %rdx
    000000e8: 	movq	%r14, %rsi
    000000eb: 	callq	memcpy@PLT # Offset: 235
    000000f0: 	movq	(%rsp), %r13
    000000f4: 	movq	(%r12), %rax
    000000f8: 	jmp	.Ltmp494 # Offset: 248
.Ltmp488:
    000000fd: 	leaq	DATAat0x11158(%rip), %rdi
    00000104: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 260
.Ltmp491:
    00000109: 	leaq	DATAat0x11182(%rip), %rdi
    00000110: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 272
.Ltmp492:
    00000115: 	callq	__stack_chk_fail@PLT # Offset: 277
.Ltmp493:
    0000011a: 	movq	%rbx, %rdi
    0000011d: 	jmp	.Ltmp495 # Offset: 285
    0000011f: 	endbr64
    00000123: 	movq	%rax, %rbp
    00000126: 	movq	(%r12), %rdi
    0000012a: 	cmpq	%rdi, %rbx
    0000012d: 	je	.Ltmp496 # Offset: 301
    0000012f: 	movq	0x10(%r12), %rsi
    00000134: 	addq	$0x1, %rsi
    00000138: 	callq	_ZdlPvm@PLT # Offset: 312
.Ltmp496:
    0000013d: 	movq	%rbp, %rdi
    00000140: 	callq	_Unwind_Resume@PLT # Offset: 320
DWARF CFI Instructions:
    <empty>
End of Function "_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_" after disassembly {
  Number      : 267
  State       : disassembled
  Address     : 0x51f0
  Size        : 0x328
  MaxSize     : 0x330
  Offset      : 0x51f0
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0266:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rsi, %rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x18, %rsp
    00000015: 	movq	0x48(%rdi), %r12
    00000019: 	movq	0x28(%rdi), %rsi
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x8(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	movq	0x30(%rdi), %rax
    00000031: 	subq	0x38(%rdi), %rax
    00000035: 	movq	%r12, %r13
    00000038: 	sarq	$0x5, %rax
    0000003c: 	subq	%rsi, %r13
    0000003f: 	movq	%r13, %rcx
    00000042: 	sarq	$0x3, %rcx
    00000046: 	cmpq	$0x1, %r12
    0000004a: 	movq	%rcx, %rdx
    0000004d: 	adcq	$-0x1, %rdx
    00000051: 	shlq	$0x4, %rdx
    00000055: 	addq	%rdx, %rax
    00000058: 	movq	0x20(%rdi), %rdx
    0000005c: 	subq	0x10(%rdi), %rdx
    00000060: 	sarq	$0x5, %rdx
    00000064: 	addq	%rdx, %rax
    00000067: 	movabsq	$0x3ffffffffffffff, %rdx
    00000071: 	cmpq	%rdx, %rax
    00000074: 	je	.Ltmp497 # Offset: 116
    0000007a: 	movq	0x8(%rdi), %rdx
    0000007e: 	movq	%rdi, %rbx
    00000081: 	movq	(%rdi), %rdi
    00000084: 	movq	%r12, %rax
    00000087: 	subq	%rdi, %rax
    0000008a: 	movq	%rdx, %r8
    0000008d: 	sarq	$0x3, %rax
    00000091: 	subq	%rax, %r8
    00000094: 	cmpq	$0x1, %r8
    00000098: 	jbe	.Ltmp498 # Offset: 152
.Ltmp509:
    0000009e: 	movl	$0x200, %edi
    000000a3: 	callq	_Znwm@PLT # Offset: 163
    000000a8: 	movq	%rax, 0x8(%r12)
    000000ad: 	movq	0x30(%rbx), %r13
    000000b1: 	movq	0x8(%rbp), %r12
    000000b5: 	leaq	0x10(%r13), %rdi
    000000b9: 	movq	%rdi, (%r13)
    000000bd: 	movq	(%rbp), %r14
    000000c1: 	movq	%r14, %rax
    000000c4: 	addq	%r12, %rax
    000000c7: 	je	.Ltmp499 # Offset: 199
    000000c9: 	testq	%r14, %r14
    000000cc: 	je	.Ltmp500 # Offset: 204
.Ltmp499:
    000000d2: 	movq	%r12, (%rsp)
    000000d6: 	cmpq	$0xf, %r12
    000000da: 	ja	.Ltmp501 # Offset: 218
    000000e0: 	cmpq	$0x1, %r12
    000000e4: 	jne	.Ltmp502 # Offset: 228
    000000e6: 	movzbl	(%r14), %eax
    000000ea: 	movb	%al, 0x10(%r13)
.Ltmp504:
    000000ee: 	movq	%r12, 0x8(%r13)
    000000f2: 	movb	$0x0, (%rdi,%r12)
    000000f7: 	movq	0x48(%rbx), %rdx
    000000fb: 	movq	0x8(%rdx), %rax
    000000ff: 	addq	$0x8, %rdx
    00000103: 	movq	%rdx, %xmm1
    00000108: 	movq	%rax, %xmm0
    0000010d: 	addq	$0x200, %rax
    00000113: 	punpcklqdq	%xmm0, %xmm0
    00000117: 	movups	%xmm0, 0x30(%rbx)
    0000011b: 	movq	%rax, %xmm0
    00000120: 	punpcklqdq	%xmm1, %xmm0
    00000124: 	movups	%xmm0, 0x40(%rbx)
    00000128: 	movq	0x8(%rsp), %rax
    0000012d: 	subq	%fs:0x28, %rax
    00000136: 	jne	.Ltmp503 # Offset: 310
    0000013c: 	addq	$0x18, %rsp
    00000140: 	popq	%rbx
    00000141: 	popq	%rbp
    00000142: 	popq	%r12
    00000144: 	popq	%r13
    00000146: 	popq	%r14
    00000148: 	popq	%r15
    0000014a: 	retq # Offset: 330
    0000014b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp502:
    00000150: 	testq	%r12, %r12
    00000153: 	je	.Ltmp504 # Offset: 339
    00000155: 	jmp	.Ltmp505 # Offset: 341
    0000015a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp498:
    00000160: 	leaq	0x2(%rcx), %r14
    00000164: 	leaq	(%r14,%r14), %rax
    00000168: 	cmpq	%rax, %rdx
    0000016b: 	ja	.Ltmp506 # Offset: 363
    00000171: 	testq	%rdx, %rdx
    00000174: 	movl	$0x1, %eax
    00000179: 	cmovneq	%rdx, %rax
    0000017d: 	leaq	0x2(%rdx,%rax), %r15
    00000182: 	movq	%r15, %rax
    00000185: 	shrq	$0x3c, %rax
    00000189: 	jne	.Ltmp507 # Offset: 393
    0000018f: 	leaq	(,%r15,8), %rdi
    00000197: 	callq	_Znwm@PLT # Offset: 407
    0000019c: 	movq	0x28(%rbx), %rsi
    000001a0: 	movq	%rax, %r12
    000001a3: 	movq	%r15, %rax
    000001a6: 	subq	%r14, %rax
    000001a9: 	shrq	%rax
    000001ac: 	leaq	(%r12,%rax,8), %r14
    000001b0: 	movq	0x48(%rbx), %rax
    000001b4: 	leaq	0x8(%rax), %rdx
    000001b8: 	cmpq	%rsi, %rdx
    000001bb: 	je	.Ltmp508 # Offset: 443
    000001bd: 	subq	%rsi, %rdx
    000001c0: 	movq	%r14, %rdi
    000001c3: 	callq	memmove@PLT # Offset: 451
.Ltmp508:
    000001c8: 	movq	0x8(%rbx), %rax
    000001cc: 	movq	(%rbx), %rdi
    000001cf: 	leaq	(,%rax,8), %rsi
    000001d7: 	callq	_ZdlPvm@PLT # Offset: 471
    000001dc: 	movq	%r12, (%rbx)
    000001df: 	movq	%r15, 0x8(%rbx)
.Ltmp511:
    000001e3: 	movq	(%r14), %rax
    000001e6: 	movq	(%r14), %xmm0
    000001eb: 	leaq	(%r14,%r13), %r12
    000001ef: 	movq	%r14, 0x28(%rbx)
    000001f3: 	movq	%r12, 0x48(%rbx)
    000001f7: 	addq	$0x200, %rax
    000001fd: 	movq	%rax, %xmm2
    00000202: 	punpcklqdq	%xmm2, %xmm0
    00000206: 	movups	%xmm0, 0x18(%rbx)
    0000020a: 	movq	(%r12), %rax
    0000020e: 	movq	(%r12), %xmm0
    00000214: 	addq	$0x200, %rax
    0000021a: 	movq	%rax, %xmm3
    0000021f: 	punpcklqdq	%xmm3, %xmm0
    00000223: 	movups	%xmm0, 0x38(%rbx)
    00000227: 	jmp	.Ltmp509 # Offset: 551
    0000022c: 	nopl	(%rax) # Size: 4
.Ltmp501:
    00000230: 	movq	%rsp, %rsi
    00000233: 	xorl	%edx, %edx
    00000235: 	movq	%r13, %rdi
    00000238: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 568
    0000023d: 	movq	%rax, (%r13)
    00000241: 	movq	%rax, %rdi
    00000244: 	movq	(%rsp), %rax
    00000248: 	movq	%rax, 0x10(%r13)
.Ltmp505:
    0000024c: 	movq	%r12, %rdx
    0000024f: 	movq	%r14, %rsi
    00000252: 	callq	memcpy@PLT # Offset: 594
    00000257: 	movq	(%rsp), %r12
    0000025b: 	movq	(%r13), %rdi
    0000025f: 	jmp	.Ltmp504 # Offset: 607
    00000264: 	nopl	(%rax) # Size: 4
.Ltmp506:
    00000268: 	subq	%r14, %rdx
    0000026b: 	addq	$0x8, %r12
    0000026f: 	shrq	%rdx
    00000272: 	leaq	(%rdi,%rdx,8), %r14
    00000276: 	movq	%r12, %rdx
    00000279: 	subq	%rsi, %rdx
    0000027c: 	cmpq	%r14, %rsi
    0000027f: 	jbe	.Ltmp510 # Offset: 639
    00000281: 	cmpq	%r12, %rsi
    00000284: 	je	.Ltmp511 # Offset: 644
    0000028a: 	movq	%r14, %rdi
    0000028d: 	callq	memmove@PLT # Offset: 653
    00000292: 	jmp	.Ltmp511 # Offset: 658
    00000297: 	nopw	(%rax,%rax) # Size: 9
.Ltmp510:
    000002a0: 	cmpq	%r12, %rsi
    000002a3: 	je	.Ltmp511 # Offset: 675
    000002a9: 	leaq	0x8(%r13), %rdi
    000002ad: 	subq	%rdx, %rdi
    000002b0: 	addq	%r14, %rdi
    000002b3: 	callq	memmove@PLT # Offset: 691
    000002b8: 	jmp	.Ltmp511 # Offset: 696
.Ltmp500:
    000002bd: 	leaq	DATAat0x11158(%rip), %rdi
    000002c4: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 708
    000002c9: 	nopl	(%rax) # Size: 7
.Ltmp507:
    000002d0: 	shrq	$0x3d, %r15
    000002d4: 	je	.Ltmp512 # Offset: 724
    000002d6: 	callq	_ZSt28__throw_bad_array_new_lengthv@PLT # Offset: 726
.Ltmp512:
    000002db: 	callq	_ZSt17__throw_bad_allocv@PLT # Offset: 731
.Ltmp497:
    000002e0: 	leaq	DATAat0x11198(%rip), %rdi
    000002e7: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 743
.Ltmp503:
    000002ec: 	callq	__stack_chk_fail@PLT # Offset: 748
    000002f1: 	endbr64
    000002f5: 	movq	%rax, %rdi
    000002f8: 	callq	__cxa_begin_catch@PLT # Offset: 760
    000002fd: 	movq	0x48(%rbx), %rax
    00000301: 	movl	$0x200, %esi
    00000306: 	movq	0x8(%rax), %rdi
    0000030a: 	callq	_ZdlPvm@PLT # Offset: 778
    0000030f: 	callq	__cxa_rethrow@PLT # Offset: 783
    00000314: 	endbr64
    00000318: 	movq	%rax, %rbp
    0000031b: 	callq	__cxa_end_catch@PLT # Offset: 795
    00000320: 	movq	%rbp, %rdi
    00000323: 	callq	_Unwind_Resume@PLT # Offset: 803
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_"

Binary Function "_Z15test_count_halfIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEPFmS6_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 268
  State       : disassembled
  Address     : 0x5520
  Size        : 0x22c
  MaxSize     : 0x230
  Offset      : 0x5520
  Section     : .text
  Orc Section : .local.text._Z15test_count_halfIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEPFmS6_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0267:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	leaq	DATAat0x111c8(%rip), %r15
    0000000d: 	pushq	%r14
    0000000f: 	pushq	%r13
    00000011: 	movq	%rdi, %r13
    00000014: 	pushq	%r12
    00000016: 	movq	%rdx, %r12
    00000019: 	pushq	%rbp
    0000001a: 	movq	%rsi, %rbp
    0000001d: 	pushq	%rbx
    0000001e: 	movq	%rbp, %r14
    00000021: 	xorl	%ebx, %ebx
    00000023: 	shrq	%r14
    00000026: 	subq	$0x28, %rsp
    0000002a: 	movq	%rcx, 0x8(%rsp)
    0000002f: 	movq	%fs:0x28, %rax
    00000038: 	movq	%rax, 0x18(%rsp)
    0000003d: 	xorl	%eax, %eax
    0000003f: 	callq	clock@PLT # Offset: 63
    00000044: 	movq	%rax, start_time(%rip)
    0000004b: 	movl	iterations(%rip), %eax
    00000051: 	testl	%eax, %eax
    00000053: 	je	.Ltmp513 # Offset: 83
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp515:
    00000058: 	movq	%rbp, %rsi
    0000005b: 	movq	%r13, %rdi
    0000005e: 	callq	*%r12 # Offset: 94
    00000061: 	cmpq	%rax, %r14
    00000064: 	je	.Ltmp514 # Offset: 100
    0000006a: 	movq	0x8(%rsp), %rax
    0000006f: 	movq	%r15, %rsi
    00000072: 	movl	$0x1, %edi
    00000077: 	addq	$0x1, %rbx
    0000007b: 	movq	(%rax), %rdx
    0000007e: 	xorl	%eax, %eax
    00000080: 	callq	__printf_chk@PLT # Offset: 128
    00000085: 	movslq	iterations(%rip), %rax
    0000008c: 	cmpq	%rax, %rbx
    0000008f: 	jb	.Ltmp515 # Offset: 143
.Ltmp513:
    00000091: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000098: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000009f: 	subq	$0x20, %rax
    000000a3: 	cmpq	%rax, %rbx
    000000a6: 	je	.Ltmp516 # Offset: 166
    000000ac: 	movq	0x8(%rsp), %rax
    000000b1: 	leaq	0x10(%rbx), %rdi
    000000b5: 	movq	%rdi, (%rbx)
    000000b8: 	movq	(%rax), %rbp
    000000bb: 	movq	0x8(%rax), %r12
    000000bf: 	movq	%rbp, %rax
    000000c2: 	addq	%r12, %rax
    000000c5: 	je	.Ltmp517 # Offset: 197
    000000c7: 	testq	%rbp, %rbp
    000000ca: 	je	.Ltmp518 # Offset: 202
.Ltmp517:
    000000d0: 	movq	%r12, 0x10(%rsp)
    000000d5: 	cmpq	$0xf, %r12
    000000d9: 	ja	.Ltmp519 # Offset: 217
    000000df: 	cmpq	$0x1, %r12
    000000e3: 	jne	.Ltmp520 # Offset: 227
    000000e9: 	movzbl	(%rbp), %eax
    000000ed: 	movb	%al, 0x10(%rbx)
.Ltmp523:
    000000f0: 	movq	%r12, 0x8(%rbx)
    000000f4: 	movb	$0x0, (%rdi,%r12)
    000000f9: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000100: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000107: 	addq	$0x20, %rax
    0000010b: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000112: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000119: 	je	.Ltmp521 # Offset: 281
.Ltmp524:
    0000011f: 	movq	-0x20(%rax), %rbp
    00000123: 	callq	clock@PLT # Offset: 291
    00000128: 	movq	%rax, end_time(%rip)
    0000012f: 	movq	0x18(%rsp), %rdx
    00000134: 	subq	%fs:0x28, %rdx
    0000013d: 	jne	.Ltmp522 # Offset: 317
    00000143: 	subq	start_time(%rip), %rax
    0000014a: 	pxor	%xmm0, %xmm0
    0000014e: 	movq	%rbp, %rdi
    00000151: 	cvtsi2sd	%rax, %xmm0
    00000156: 	divsd	DATAat0x11e88(%rip), %xmm0
    0000015e: 	addq	$0x28, %rsp
    00000162: 	popq	%rbx
    00000163: 	popq	%rbp
    00000164: 	popq	%r12
    00000166: 	popq	%r13
    00000168: 	popq	%r14
    0000016a: 	popq	%r15
    0000016c: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 364
    00000171: 	nopl	(%rax) # Size: 7
.Ltmp514:
    00000178: 	movslq	iterations(%rip), %rax
    0000017f: 	addq	$0x1, %rbx
    00000183: 	cmpq	%rbx, %rax
    00000186: 	ja	.Ltmp515 # Offset: 390
    0000018c: 	jmp	.Ltmp513 # Offset: 396
    00000191: 	nopl	(%rax) # Size: 7
.Ltmp519:
    00000198: 	movq	%rbx, %rdi
    0000019b: 	leaq	0x10(%rsp), %rsi
    000001a0: 	xorl	%edx, %edx
    000001a2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 418
    000001a7: 	movq	%rax, (%rbx)
    000001aa: 	movq	%rax, %rdi
    000001ad: 	movq	0x10(%rsp), %rax
    000001b2: 	movq	%rax, 0x10(%rbx)
.Ltmp525:
    000001b6: 	movq	%r12, %rdx
    000001b9: 	movq	%rbp, %rsi
    000001bc: 	callq	memcpy@PLT # Offset: 444
    000001c1: 	movq	0x10(%rsp), %r12
    000001c6: 	movq	(%rbx), %rdi
    000001c9: 	jmp	.Ltmp523 # Offset: 457
    000001ce: 	nop # Size: 2
.Ltmp516:
    000001d0: 	movq	0x8(%rsp), %rsi
    000001d5: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001dc: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 476
    000001e1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001e8: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001ef: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001f6: 	jne	.Ltmp524 # Offset: 502
.Ltmp521:
    000001fc: 	movq	-0x8(%rdx), %rax
    00000200: 	addq	$0x200, %rax
    00000206: 	jmp	.Ltmp524 # Offset: 518
    0000020b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp520:
    00000210: 	testq	%r12, %r12
    00000213: 	je	.Ltmp523 # Offset: 531
    00000219: 	jmp	.Ltmp525 # Offset: 537
.Ltmp522:
    0000021b: 	callq	__stack_chk_fail@PLT # Offset: 539
.Ltmp518:
    00000220: 	leaq	DATAat0x11158(%rip), %rdi
    00000227: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 551
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_count_halfIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEPFmS6_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z15test_count_halfISt6vectorIiSaIiEEPFmRKS2_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z15test_count_halfISt6vectorIiSaIiEEPFmRKS2_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z15test_count_halfISt6vectorIiSaIiEEPFmRKS2_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/loop_normalize.cpp/1
  Number      : 269
  State       : disassembled
  Address     : 0x5750
  Size        : 0x214
  MaxSize     : 0x220
  Offset      : 0x5750
  Section     : .text
  Orc Section : .local.text._Z15test_count_halfISt6vectorIiSaIiEEPFmRKS2_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0268:
    00000000: 	pushq	%r14
    00000002: 	leaq	DATAat0x111c8(%rip), %r14
    00000009: 	pushq	%r13
    0000000b: 	movq	%rdx, %r13
    0000000e: 	pushq	%r12
    00000010: 	movq	%rdi, %r12
    00000013: 	pushq	%rbp
    00000014: 	movq	%rsi, %rbp
    00000017: 	pushq	%rbx
    00000018: 	xorl	%ebx, %ebx
    0000001a: 	subq	$0x10, %rsp
    0000001e: 	movq	%fs:0x28, %rax
    00000027: 	movq	%rax, 0x8(%rsp)
    0000002c: 	xorl	%eax, %eax
    0000002e: 	callq	clock@PLT # Offset: 46
    00000033: 	movq	%rax, start_time(%rip)
    0000003a: 	movl	iterations(%rip), %eax
    00000040: 	testl	%eax, %eax
    00000042: 	je	.Ltmp526 # Offset: 66
    00000044: 	nopl	(%rax) # Size: 4
.Ltmp528:
    00000048: 	movl	$0xfa0, %esi
    0000004d: 	movq	%r12, %rdi
    00000050: 	callq	*%rbp # Offset: 80
    00000052: 	cmpq	$0x7d0, %rax
    00000058: 	je	.Ltmp527 # Offset: 88
    0000005e: 	movq	(%r13), %rdx
    00000062: 	movq	%r14, %rsi
    00000065: 	movl	$0x1, %edi
    0000006a: 	xorl	%eax, %eax
    0000006c: 	addq	$0x1, %rbx
    00000070: 	callq	__printf_chk@PLT # Offset: 112
    00000075: 	movslq	iterations(%rip), %rax
    0000007c: 	cmpq	%rax, %rbx
    0000007f: 	jb	.Ltmp528 # Offset: 127
.Ltmp526:
    00000081: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000088: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000008f: 	subq	$0x20, %rax
    00000093: 	cmpq	%rax, %rbx
    00000096: 	je	.Ltmp529 # Offset: 150
    0000009c: 	leaq	0x10(%rbx), %rdi
    000000a0: 	movq	0x8(%r13), %r12
    000000a4: 	movq	%rdi, (%rbx)
    000000a7: 	movq	(%r13), %rbp
    000000ab: 	movq	%rbp, %rax
    000000ae: 	addq	%r12, %rax
    000000b1: 	je	.Ltmp530 # Offset: 177
    000000b3: 	testq	%rbp, %rbp
    000000b6: 	je	.Ltmp531 # Offset: 182
.Ltmp530:
    000000bc: 	movq	%r12, (%rsp)
    000000c0: 	cmpq	$0xf, %r12
    000000c4: 	ja	.Ltmp532 # Offset: 196
    000000ca: 	cmpq	$0x1, %r12
    000000ce: 	jne	.Ltmp533 # Offset: 206
    000000d4: 	movzbl	(%rbp), %eax
    000000d8: 	movb	%al, 0x10(%rbx)
.Ltmp536:
    000000db: 	movq	%r12, 0x8(%rbx)
    000000df: 	movb	$0x0, (%rdi,%r12)
    000000e4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000000eb: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000000f2: 	addq	$0x20, %rax
    000000f6: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000000fd: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000104: 	je	.Ltmp534 # Offset: 260
.Ltmp537:
    0000010a: 	movq	-0x20(%rax), %rbp
    0000010e: 	callq	clock@PLT # Offset: 270
    00000113: 	movq	%rax, end_time(%rip)
    0000011a: 	movq	0x8(%rsp), %rdx
    0000011f: 	subq	%fs:0x28, %rdx
    00000128: 	jne	.Ltmp535 # Offset: 296
    0000012e: 	subq	start_time(%rip), %rax
    00000135: 	pxor	%xmm0, %xmm0
    00000139: 	movq	%rbp, %rdi
    0000013c: 	cvtsi2sd	%rax, %xmm0
    00000141: 	divsd	DATAat0x11e88(%rip), %xmm0
    00000149: 	addq	$0x10, %rsp
    0000014d: 	popq	%rbx
    0000014e: 	popq	%rbp
    0000014f: 	popq	%r12
    00000151: 	popq	%r13
    00000153: 	popq	%r14
    00000155: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 341
    0000015a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp527:
    00000160: 	movslq	iterations(%rip), %rax
    00000167: 	addq	$0x1, %rbx
    0000016b: 	cmpq	%rax, %rbx
    0000016e: 	jb	.Ltmp528 # Offset: 366
    00000174: 	jmp	.Ltmp526 # Offset: 372
    00000179: 	nopl	(%rax) # Size: 7
.Ltmp532:
    00000180: 	movq	%rbx, %rdi
    00000183: 	movq	%rsp, %rsi
    00000186: 	xorl	%edx, %edx
    00000188: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 392
    0000018d: 	movq	%rax, (%rbx)
    00000190: 	movq	%rax, %rdi
    00000193: 	movq	(%rsp), %rax
    00000197: 	movq	%rax, 0x10(%rbx)
.Ltmp538:
    0000019b: 	movq	%r12, %rdx
    0000019e: 	movq	%rbp, %rsi
    000001a1: 	callq	memcpy@PLT # Offset: 417
    000001a6: 	movq	(%rsp), %r12
    000001aa: 	movq	(%rbx), %rdi
    000001ad: 	jmp	.Ltmp536 # Offset: 429
    000001b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp529:
    000001b8: 	movq	%r13, %rsi
    000001bb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001c2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 450
    000001c7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001ce: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001d5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001dc: 	jne	.Ltmp537 # Offset: 476
.Ltmp534:
    000001e2: 	movq	-0x8(%rdx), %rax
    000001e6: 	addq	$0x200, %rax
    000001ec: 	jmp	.Ltmp537 # Offset: 492
    000001f1: 	nopl	(%rax) # Size: 7
.Ltmp533:
    000001f8: 	testq	%r12, %r12
    000001fb: 	je	.Ltmp536 # Offset: 507
    00000201: 	jmp	.Ltmp538 # Offset: 513
.Ltmp535:
    00000203: 	callq	__stack_chk_fail@PLT # Offset: 515
.Ltmp531:
    00000208: 	leaq	DATAat0x11158(%rip), %rdi
    0000020f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 527
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_count_halfISt6vectorIiSaIiEEPFmRKS2_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/loop_normalize.cpp/1
  Number      : 270
  State       : disassembled
  Address     : 0x5970
  Size        : 0x214
  MaxSize     : 0x220
  Offset      : 0x5970
  Section     : .text
  Orc Section : .local.text._Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0269:
    00000000: 	pushq	%r14
    00000002: 	leaq	DATAat0x111c8(%rip), %r14
    00000009: 	pushq	%r13
    0000000b: 	movq	%rdx, %r13
    0000000e: 	pushq	%r12
    00000010: 	movq	%rdi, %r12
    00000013: 	pushq	%rbp
    00000014: 	movq	%rsi, %rbp
    00000017: 	pushq	%rbx
    00000018: 	xorl	%ebx, %ebx
    0000001a: 	subq	$0x10, %rsp
    0000001e: 	movq	%fs:0x28, %rax
    00000027: 	movq	%rax, 0x8(%rsp)
    0000002c: 	xorl	%eax, %eax
    0000002e: 	callq	clock@PLT # Offset: 46
    00000033: 	movq	%rax, start_time(%rip)
    0000003a: 	movl	iterations(%rip), %eax
    00000040: 	testl	%eax, %eax
    00000042: 	je	.Ltmp539 # Offset: 66
    00000044: 	nopl	(%rax) # Size: 4
.Ltmp541:
    00000048: 	movl	$0xfa0, %esi
    0000004d: 	movq	%r12, %rdi
    00000050: 	callq	*%rbp # Offset: 80
    00000052: 	cmpq	$0x7d0, %rax
    00000058: 	je	.Ltmp540 # Offset: 88
    0000005e: 	movq	(%r13), %rdx
    00000062: 	movq	%r14, %rsi
    00000065: 	movl	$0x1, %edi
    0000006a: 	xorl	%eax, %eax
    0000006c: 	addq	$0x1, %rbx
    00000070: 	callq	__printf_chk@PLT # Offset: 112
    00000075: 	movslq	iterations(%rip), %rax
    0000007c: 	cmpq	%rax, %rbx
    0000007f: 	jb	.Ltmp541 # Offset: 127
.Ltmp539:
    00000081: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000088: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000008f: 	subq	$0x20, %rax
    00000093: 	cmpq	%rax, %rbx
    00000096: 	je	.Ltmp542 # Offset: 150
    0000009c: 	leaq	0x10(%rbx), %rdi
    000000a0: 	movq	0x8(%r13), %r12
    000000a4: 	movq	%rdi, (%rbx)
    000000a7: 	movq	(%r13), %rbp
    000000ab: 	movq	%rbp, %rax
    000000ae: 	addq	%r12, %rax
    000000b1: 	je	.Ltmp543 # Offset: 177
    000000b3: 	testq	%rbp, %rbp
    000000b6: 	je	.Ltmp544 # Offset: 182
.Ltmp543:
    000000bc: 	movq	%r12, (%rsp)
    000000c0: 	cmpq	$0xf, %r12
    000000c4: 	ja	.Ltmp545 # Offset: 196
    000000ca: 	cmpq	$0x1, %r12
    000000ce: 	jne	.Ltmp546 # Offset: 206
    000000d4: 	movzbl	(%rbp), %eax
    000000d8: 	movb	%al, 0x10(%rbx)
.Ltmp549:
    000000db: 	movq	%r12, 0x8(%rbx)
    000000df: 	movb	$0x0, (%rdi,%r12)
    000000e4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000000eb: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000000f2: 	addq	$0x20, %rax
    000000f6: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000000fd: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000104: 	je	.Ltmp547 # Offset: 260
.Ltmp550:
    0000010a: 	movq	-0x20(%rax), %rbp
    0000010e: 	callq	clock@PLT # Offset: 270
    00000113: 	movq	%rax, end_time(%rip)
    0000011a: 	movq	0x8(%rsp), %rdx
    0000011f: 	subq	%fs:0x28, %rdx
    00000128: 	jne	.Ltmp548 # Offset: 296
    0000012e: 	subq	start_time(%rip), %rax
    00000135: 	pxor	%xmm0, %xmm0
    00000139: 	movq	%rbp, %rdi
    0000013c: 	cvtsi2sd	%rax, %xmm0
    00000141: 	divsd	DATAat0x11e88(%rip), %xmm0
    00000149: 	addq	$0x10, %rsp
    0000014d: 	popq	%rbx
    0000014e: 	popq	%rbp
    0000014f: 	popq	%r12
    00000151: 	popq	%r13
    00000153: 	popq	%r14
    00000155: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 341
    0000015a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp540:
    00000160: 	movslq	iterations(%rip), %rax
    00000167: 	addq	$0x1, %rbx
    0000016b: 	cmpq	%rax, %rbx
    0000016e: 	jb	.Ltmp541 # Offset: 366
    00000174: 	jmp	.Ltmp539 # Offset: 372
    00000179: 	nopl	(%rax) # Size: 7
.Ltmp545:
    00000180: 	movq	%rbx, %rdi
    00000183: 	movq	%rsp, %rsi
    00000186: 	xorl	%edx, %edx
    00000188: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 392
    0000018d: 	movq	%rax, (%rbx)
    00000190: 	movq	%rax, %rdi
    00000193: 	movq	(%rsp), %rax
    00000197: 	movq	%rax, 0x10(%rbx)
.Ltmp551:
    0000019b: 	movq	%r12, %rdx
    0000019e: 	movq	%rbp, %rsi
    000001a1: 	callq	memcpy@PLT # Offset: 417
    000001a6: 	movq	(%rsp), %r12
    000001aa: 	movq	(%rbx), %rdi
    000001ad: 	jmp	.Ltmp549 # Offset: 429
    000001b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp542:
    000001b8: 	movq	%r13, %rsi
    000001bb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001c2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 450
    000001c7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001ce: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001d5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001dc: 	jne	.Ltmp550 # Offset: 476
.Ltmp547:
    000001e2: 	movq	-0x8(%rdx), %rax
    000001e6: 	addq	$0x200, %rax
    000001ec: 	jmp	.Ltmp550 # Offset: 492
    000001f1: 	nopl	(%rax) # Size: 7
.Ltmp546:
    000001f8: 	testq	%r12, %r12
    000001fb: 	je	.Ltmp549 # Offset: 507
    00000201: 	jmp	.Ltmp551 # Offset: 513
.Ltmp548:
    00000203: 	callq	__stack_chk_fail@PLT # Offset: 515
.Ltmp544:
    00000208: 	leaq	DATAat0x11158(%rip), %rdi
    0000020f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 527
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/loop_normalize.cpp/1
  Number      : 271
  State       : disassembled
  Address     : 0x5b90
  Size        : 0x214
  MaxSize     : 0x220
  Offset      : 0x5b90
  Section     : .text
  Orc Section : .local.text._Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0270:
    00000000: 	pushq	%r14
    00000002: 	leaq	DATAat0x111c8(%rip), %r14
    00000009: 	pushq	%r13
    0000000b: 	movq	%rdx, %r13
    0000000e: 	pushq	%r12
    00000010: 	movq	%rdi, %r12
    00000013: 	pushq	%rbp
    00000014: 	movq	%rsi, %rbp
    00000017: 	pushq	%rbx
    00000018: 	xorl	%ebx, %ebx
    0000001a: 	subq	$0x10, %rsp
    0000001e: 	movq	%fs:0x28, %rax
    00000027: 	movq	%rax, 0x8(%rsp)
    0000002c: 	xorl	%eax, %eax
    0000002e: 	callq	clock@PLT # Offset: 46
    00000033: 	movq	%rax, start_time(%rip)
    0000003a: 	movl	iterations(%rip), %eax
    00000040: 	testl	%eax, %eax
    00000042: 	je	.Ltmp552 # Offset: 66
    00000044: 	nopl	(%rax) # Size: 4
.Ltmp554:
    00000048: 	movl	$0xfa0, %esi
    0000004d: 	movq	%r12, %rdi
    00000050: 	callq	*%rbp # Offset: 80
    00000052: 	cmpq	$0x7d0, %rax
    00000058: 	je	.Ltmp553 # Offset: 88
    0000005e: 	movq	(%r13), %rdx
    00000062: 	movq	%r14, %rsi
    00000065: 	movl	$0x1, %edi
    0000006a: 	xorl	%eax, %eax
    0000006c: 	addq	$0x1, %rbx
    00000070: 	callq	__printf_chk@PLT # Offset: 112
    00000075: 	movslq	iterations(%rip), %rax
    0000007c: 	cmpq	%rax, %rbx
    0000007f: 	jb	.Ltmp554 # Offset: 127
.Ltmp552:
    00000081: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000088: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000008f: 	subq	$0x20, %rax
    00000093: 	cmpq	%rax, %rbx
    00000096: 	je	.Ltmp555 # Offset: 150
    0000009c: 	leaq	0x10(%rbx), %rdi
    000000a0: 	movq	0x8(%r13), %r12
    000000a4: 	movq	%rdi, (%rbx)
    000000a7: 	movq	(%r13), %rbp
    000000ab: 	movq	%rbp, %rax
    000000ae: 	addq	%r12, %rax
    000000b1: 	je	.Ltmp556 # Offset: 177
    000000b3: 	testq	%rbp, %rbp
    000000b6: 	je	.Ltmp557 # Offset: 182
.Ltmp556:
    000000bc: 	movq	%r12, (%rsp)
    000000c0: 	cmpq	$0xf, %r12
    000000c4: 	ja	.Ltmp558 # Offset: 196
    000000ca: 	cmpq	$0x1, %r12
    000000ce: 	jne	.Ltmp559 # Offset: 206
    000000d4: 	movzbl	(%rbp), %eax
    000000d8: 	movb	%al, 0x10(%rbx)
.Ltmp562:
    000000db: 	movq	%r12, 0x8(%rbx)
    000000df: 	movb	$0x0, (%rdi,%r12)
    000000e4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000000eb: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000000f2: 	addq	$0x20, %rax
    000000f6: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000000fd: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000104: 	je	.Ltmp560 # Offset: 260
.Ltmp563:
    0000010a: 	movq	-0x20(%rax), %rbp
    0000010e: 	callq	clock@PLT # Offset: 270
    00000113: 	movq	%rax, end_time(%rip)
    0000011a: 	movq	0x8(%rsp), %rdx
    0000011f: 	subq	%fs:0x28, %rdx
    00000128: 	jne	.Ltmp561 # Offset: 296
    0000012e: 	subq	start_time(%rip), %rax
    00000135: 	pxor	%xmm0, %xmm0
    00000139: 	movq	%rbp, %rdi
    0000013c: 	cvtsi2sd	%rax, %xmm0
    00000141: 	divsd	DATAat0x11e88(%rip), %xmm0
    00000149: 	addq	$0x10, %rsp
    0000014d: 	popq	%rbx
    0000014e: 	popq	%rbp
    0000014f: 	popq	%r12
    00000151: 	popq	%r13
    00000153: 	popq	%r14
    00000155: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 341
    0000015a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp553:
    00000160: 	movslq	iterations(%rip), %rax
    00000167: 	addq	$0x1, %rbx
    0000016b: 	cmpq	%rax, %rbx
    0000016e: 	jb	.Ltmp554 # Offset: 366
    00000174: 	jmp	.Ltmp552 # Offset: 372
    00000179: 	nopl	(%rax) # Size: 7
.Ltmp558:
    00000180: 	movq	%rbx, %rdi
    00000183: 	movq	%rsp, %rsi
    00000186: 	xorl	%edx, %edx
    00000188: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 392
    0000018d: 	movq	%rax, (%rbx)
    00000190: 	movq	%rax, %rdi
    00000193: 	movq	(%rsp), %rax
    00000197: 	movq	%rax, 0x10(%rbx)
.Ltmp564:
    0000019b: 	movq	%r12, %rdx
    0000019e: 	movq	%rbp, %rsi
    000001a1: 	callq	memcpy@PLT # Offset: 417
    000001a6: 	movq	(%rsp), %r12
    000001aa: 	movq	(%rbx), %rdi
    000001ad: 	jmp	.Ltmp562 # Offset: 429
    000001b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp555:
    000001b8: 	movq	%r13, %rsi
    000001bb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001c2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 450
    000001c7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001ce: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001d5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001dc: 	jne	.Ltmp563 # Offset: 476
.Ltmp560:
    000001e2: 	movq	-0x8(%rdx), %rax
    000001e6: 	addq	$0x200, %rax
    000001ec: 	jmp	.Ltmp563 # Offset: 492
    000001f1: 	nopl	(%rax) # Size: 7
.Ltmp559:
    000001f8: 	testq	%r12, %r12
    000001fb: 	je	.Ltmp562 # Offset: 507
    00000201: 	jmp	.Ltmp564 # Offset: 513
.Ltmp561:
    00000203: 	callq	__stack_chk_fail@PLT # Offset: 515
.Ltmp557:
    00000208: 	leaq	DATAat0x11158(%rip), %rdi
    0000020f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 527
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z9TestLoopsIiEvv" after disassembly {
  Number      : 272
  State       : disassembled
  Address     : 0x5db0
  Size        : 0x4c06
  MaxSize     : 0x4c10
  Offset      : 0x5db0
  Section     : .text
  Orc Section : .local.text._Z9TestLoopsIiEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0271:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0x4000(%rsp), %r11
.Ltmp565:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp565 # Offset: 37
    00000027: 	subq	$0x68, %rsp
    0000002b: 	movl	$0x3e80, %edi
    00000030: 	movq	%fs:0x28, %rax
    00000039: 	movq	%rax, 0x4058(%rsp)
    00000041: 	xorl	%eax, %eax
    00000043: 	callq	_Znwm@PLT # Offset: 67
    00000048: 	movl	$0x0, (%rax)
    0000004e: 	leaq	0x4(%rax), %rdi
    00000052: 	movq	%rax, 0x8(%rsp)
    00000057: 	addq	$0x3e80, %rax
    0000005d: 	movq	%rax, 0x28(%rsp)
    00000062: 	cmpq	%rax, %rdi
    00000065: 	je	.Ltmp566 # Offset: 101
    00000067: 	movl	$0x3e7c, %edx
    0000006c: 	xorl	%esi, %esi
    0000006e: 	callq	memset@PLT # Offset: 110
.Ltmp566:
    00000073: 	leaq	0xa0(%rsp), %rax
    0000007b: 	movdqa	_Z7gLabelsB5cxx11+32(%rip), %xmm1
    00000083: 	movdqa	_Z7gLabelsB5cxx11+16(%rip), %xmm2
    0000008b: 	movl	$0x33746e69, 0xa0(%rsp)
    00000096: 	movq	%rax, 0x60(%rsp)
    0000009b: 	movq	_Z7gLabelsB5cxx11+56(%rip), %r14
    000000a2: 	movq	%rax, 0x90(%rsp)
    000000aa: 	movhlps	%xmm1, %xmm6
    000000ad: 	movl	$0x5f32, %eax
    000000b2: 	movq	%xmm2, %rbp
    000000b7: 	movw	%ax, 0xa4(%rsp)
    000000bf: 	leaq	0xc0(%rsp), %rax
    000000c7: 	movq	%xmm6, %rcx
    000000cc: 	movq	%rax, 0x68(%rsp)
    000000d1: 	leaq	0x8(%rcx), %r12
    000000d5: 	movq	%rax, 0xb0(%rsp)
    000000dd: 	movq	%r12, %r13
    000000e0: 	movabsq	$0x2a745f3233746e69, %rax
    000000ea: 	movq	%rax, 0xc0(%rsp)
    000000f2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000000f9: 	movb	$0x74, 0xa6(%rsp)
    00000101: 	movq	%rax, 0x10(%rsp)
    00000106: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rax
    0000010d: 	movq	$0x7, 0x98(%rsp)
    00000119: 	movb	$0x0, 0xa7(%rsp)
    00000121: 	movq	$0x8, 0xb8(%rsp)
    0000012d: 	movb	$0x0, 0xc8(%rsp)
    00000135: 	movq	%rax, 0x20(%rsp)
    0000013a: 	movaps	%xmm2, 0x30(%rsp)
    0000013f: 	movaps	%xmm1, 0x40(%rsp)
    00000144: 	movq	%xmm6, 0x50(%rsp)
    0000014a: 	movq	%xmm1, 0x18(%rsp)
    00000150: 	cmpq	%r12, %rax
    00000153: 	jbe	.Ltmp567 # Offset: 339
    00000155: 	movq	%rax, %r15
    00000158: 	movq	%xmm2, 0x58(%rsp)
    0000015e: 	nop # Size: 2
.Ltmp570:
    00000160: 	movq	(%r13), %rbp
    00000164: 	leaq	0x200(%rbp), %rbx
    0000016b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp569:
    00000170: 	movq	(%rbp), %rdi
    00000174: 	leaq	0x10(%rbp), %rax
    00000178: 	cmpq	%rax, %rdi
    0000017b: 	je	.Ltmp568 # Offset: 379
    00000181: 	movq	0x10(%rbp), %rax
    00000185: 	addq	$0x20, %rbp
    00000189: 	leaq	0x1(%rax), %rsi
    0000018d: 	callq	_ZdlPvm@PLT # Offset: 397
    00000192: 	cmpq	%rbx, %rbp
    00000195: 	jne	.Ltmp569 # Offset: 405
    00000197: 	addq	$0x8, %r13
    0000019b: 	cmpq	%r13, %r15
    0000019e: 	ja	.Ltmp570 # Offset: 414
.Ltmp869:
    000001a0: 	movq	0x58(%rsp), %rbp
.Ltmp567:
    000001a5: 	movq	0x20(%rsp), %rcx
    000001aa: 	cmpq	%rcx, 0x50(%rsp)
    000001af: 	jne	.Ltmp571 # Offset: 431
    000001b1: 	jmp	.Ltmp572 # Offset: 433
    000001b6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp574:
    000001c0: 	movq	(%rbp), %rdi
    000001c4: 	leaq	0x10(%rbp), %rax
    000001c8: 	cmpq	%rax, %rdi
    000001cb: 	je	.Ltmp573 # Offset: 459
    000001cd: 	movq	0x10(%rbp), %rax
    000001d1: 	leaq	0x1(%rax), %rsi
    000001d5: 	callq	_ZdlPvm@PLT # Offset: 469
.Ltmp573:
    000001da: 	addq	$0x20, %rbp
.Ltmp571:
    000001de: 	cmpq	%rbp, 0x18(%rsp)
    000001e3: 	jne	.Ltmp574 # Offset: 483
    000001e5: 	cmpq	%r14, 0x10(%rsp)
    000001ea: 	je	.Ltmp575 # Offset: 490
    000001ec: 	nopl	(%rax) # Size: 4
.Ltmp577:
    000001f0: 	movq	(%r14), %rdi
    000001f3: 	leaq	0x10(%r14), %rax
    000001f7: 	cmpq	%rax, %rdi
    000001fa: 	je	.Ltmp576 # Offset: 506
    000001fc: 	movq	0x10(%r14), %rax
    00000200: 	leaq	0x1(%rax), %rsi
    00000204: 	callq	_ZdlPvm@PLT # Offset: 516
.Ltmp576:
    00000209: 	addq	$0x20, %r14
    0000020d: 	cmpq	%r14, 0x10(%rsp)
    00000212: 	jne	.Ltmp577 # Offset: 530
.Ltmp575:
    00000214: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rax
    0000021b: 	leaq	0x8(%rax), %rbx
    0000021f: 	cmpq	%r12, %rbx
    00000222: 	jbe	.Ltmp578 # Offset: 546
    00000224: 	nopl	(%rax) # Size: 4
.Ltmp579:
    00000228: 	movq	(%r12), %rdi
    0000022c: 	movl	$0x200, %esi
    00000231: 	addq	$0x8, %r12
    00000235: 	callq	_ZdlPvm@PLT # Offset: 565
    0000023a: 	cmpq	%r12, %rbx
    0000023d: 	ja	.Ltmp579 # Offset: 573
.Ltmp578:
    0000023f: 	movdqa	0x30(%rsp), %xmm3
    00000245: 	movdqa	0x40(%rsp), %xmm4
    0000024b: 	leaq	0x1d0(%rsp), %r12
    00000253: 	leaq	0x4050(%rsp), %rdx
    0000025b: 	movd	init_value(%rip), %xmm5
    00000263: 	movq	%r12, %rax
    00000266: 	movaps	%xmm3, _Z7gLabelsB5cxx11+48(%rip)
    0000026d: 	movaps	%xmm4, _Z7gLabelsB5cxx11+64(%rip)
    00000274: 	pshufd	$0x0, %xmm5, %xmm0
    00000279: 	nopl	(%rax) # Size: 7
.Ltmp580:
    00000280: 	movaps	%xmm0, (%rax)
    00000283: 	addq	$0x10, %rax
    00000287: 	cmpq	%rax, %rdx
    0000028a: 	jne	.Ltmp580 # Offset: 650
    0000028c: 	movq	0x8(%rsp), %rax
    00000291: 	movq	0x28(%rsp), %rdx
    00000296: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp581:
    000002a0: 	movups	%xmm0, (%rax)
    000002a3: 	addq	$0x10, %rax
    000002a7: 	cmpq	%rax, %rdx
    000002aa: 	jne	.Ltmp581 # Offset: 682
    000002ac: 	movq	0x8(%rsp), %rax
    000002b1: 	leaq	0x1b0(%rsp), %rbp
    000002b9: 	leaq	0x90(%rsp), %r13
    000002c1: 	movl	$0x0, 0x2110(%rsp)
    000002cc: 	leaq	DATAat0x111d8(%rip), %rdx
    000002d3: 	movq	%r13, %rsi
    000002d6: 	movq	%rbp, %rdi
    000002d9: 	movl	$0x0, 0x1f40(%rax)
    000002e3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 739
    000002e8: 	movq	%rbp, %rdx
    000002eb: 	leaq	_Z18count_half_for_optIiEmPT_m(%rip), %rsi
    000002f2: 	movq	%r12, %rdi
    000002f5: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 757
    000002fa: 	movq	0x1b0(%rsp), %rdi
    00000302: 	leaq	0x1c0(%rsp), %rbx
    0000030a: 	cmpq	%rbx, %rdi
    0000030d: 	je	.Ltmp582 # Offset: 781
    0000030f: 	movq	0x1c0(%rsp), %rax
    00000317: 	leaq	0x1(%rax), %rsi
    0000031b: 	callq	_ZdlPvm@PLT # Offset: 795
.Ltmp582:
    00000320: 	leaq	DATAat0x111ec(%rip), %rdx
    00000327: 	movq	%r13, %rsi
    0000032a: 	movq	%rbp, %rdi
    0000032d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 813
    00000332: 	movq	%rbp, %rdx
    00000335: 	leaq	_Z15count_half_optAIiEmPT_m(%rip), %rsi
    0000033c: 	movq	%r12, %rdi
    0000033f: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 831
    00000344: 	movq	0x1b0(%rsp), %rdi
    0000034c: 	cmpq	%rbx, %rdi
    0000034f: 	je	.Ltmp583 # Offset: 847
    00000351: 	movq	0x1c0(%rsp), %rax
    00000359: 	leaq	0x1(%rax), %rsi
    0000035d: 	callq	_ZdlPvm@PLT # Offset: 861
.Ltmp583:
    00000362: 	leaq	DATAat0x11204(%rip), %rdx
    00000369: 	movq	%r13, %rsi
    0000036c: 	movq	%rbp, %rdi
    0000036f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 879
    00000374: 	movq	%rbp, %rdx
    00000377: 	leaq	_Z26count_half_for_uncountableIiEmPT_m(%rip), %rsi
    0000037e: 	movq	%r12, %rdi
    00000381: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 897
    00000386: 	movq	0x1b0(%rsp), %rdi
    0000038e: 	cmpq	%rbx, %rdi
    00000391: 	je	.Ltmp584 # Offset: 913
    00000393: 	movq	0x1c0(%rsp), %rax
    0000039b: 	leaq	0x1(%rax), %rsi
    0000039f: 	callq	_ZdlPvm@PLT # Offset: 927
.Ltmp584:
    000003a4: 	movq	0x90(%rsp), %r15
    000003ac: 	movq	0x98(%rsp), %r14
    000003b4: 	movq	%rbx, 0x1b0(%rsp)
    000003bc: 	movq	%r15, %rax
    000003bf: 	addq	%r14, %rax
    000003c2: 	je	.Ltmp585 # Offset: 962
    000003c4: 	testq	%r15, %r15
    000003c7: 	je	.Ltmp586 # Offset: 967
.Ltmp585:
    000003cd: 	movq	%r14, 0x70(%rsp)
    000003d2: 	cmpq	$0xf, %r14
    000003d6: 	ja	.Ltmp587 # Offset: 982
    000003dc: 	cmpq	$0x1, %r14
    000003e0: 	jne	.Ltmp588 # Offset: 992
    000003e6: 	movzbl	(%r15), %eax
    000003ea: 	movb	%al, 0x1c0(%rsp)
    000003f1: 	movq	%rbx, %rax
.Ltmp871:
    000003f4: 	movq	%r14, 0x1b8(%rsp)
    000003fc: 	movb	$0x0, (%rax,%r14)
    00000401: 	movabsq	$0x3fffffffffffffff, %rax
    0000040b: 	subq	0x1b8(%rsp), %rax
    00000413: 	cmpq	$0x17, %rax
    00000417: 	jbe	.Ltmp589 # Offset: 1047
    0000041d: 	movl	$0x18, %edx
    00000422: 	leaq	DATAat0x1121b(%rip), %rsi
    00000429: 	movq	%rbp, %rdi
    0000042c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1068
    00000431: 	movq	%rbp, %rdx
    00000434: 	leaq	_Z23count_half_for_pointer1IiEmPT_m(%rip), %rsi
    0000043b: 	movq	%r12, %rdi
    0000043e: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1086
    00000443: 	movq	0x1b0(%rsp), %rdi
    0000044b: 	cmpq	%rbx, %rdi
    0000044e: 	je	.Ltmp590 # Offset: 1102
    00000450: 	movq	0x1c0(%rsp), %rax
    00000458: 	leaq	0x1(%rax), %rsi
    0000045c: 	callq	_ZdlPvm@PLT # Offset: 1116
.Ltmp590:
    00000461: 	movq	0x90(%rsp), %r15
    00000469: 	movq	0x98(%rsp), %r14
    00000471: 	movq	%rbx, 0x1b0(%rsp)
    00000479: 	movq	%r15, %rax
    0000047c: 	addq	%r14, %rax
    0000047f: 	je	.Ltmp591 # Offset: 1151
    00000481: 	testq	%r15, %r15
    00000484: 	je	.Ltmp592 # Offset: 1156
.Ltmp591:
    0000048a: 	movq	%r14, 0x70(%rsp)
    0000048f: 	cmpq	$0xf, %r14
    00000493: 	ja	.Ltmp593 # Offset: 1171
    00000499: 	cmpq	$0x1, %r14
    0000049d: 	jne	.Ltmp594 # Offset: 1181
    000004a3: 	movzbl	(%r15), %eax
    000004a7: 	movb	%al, 0x1c0(%rsp)
    000004ae: 	movq	%rbx, %rax
.Ltmp879:
    000004b1: 	movq	%r14, 0x1b8(%rsp)
    000004b9: 	movb	$0x0, (%rax,%r14)
    000004be: 	movabsq	$0x3fffffffffffffff, %rax
    000004c8: 	subq	0x1b8(%rsp), %rax
    000004d0: 	cmpq	$0x17, %rax
    000004d4: 	jbe	.Ltmp595 # Offset: 1236
    000004da: 	movl	$0x18, %edx
    000004df: 	leaq	DATAat0x11234(%rip), %rsi
    000004e6: 	movq	%rbp, %rdi
    000004e9: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1257
    000004ee: 	movq	%rbp, %rdx
    000004f1: 	leaq	_Z23count_half_for_pointer2IiEmPT_m(%rip), %rsi
    000004f8: 	movq	%r12, %rdi
    000004fb: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1275
    00000500: 	movq	0x1b0(%rsp), %rdi
    00000508: 	cmpq	%rbx, %rdi
    0000050b: 	je	.Ltmp596 # Offset: 1291
    0000050d: 	movq	0x1c0(%rsp), %rax
    00000515: 	leaq	0x1(%rax), %rsi
    00000519: 	callq	_ZdlPvm@PLT # Offset: 1305
.Ltmp596:
    0000051e: 	leaq	DATAat0x1124d(%rip), %rdx
    00000525: 	movq	%r13, %rsi
    00000528: 	movq	%rbp, %rdi
    0000052b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1323
    00000530: 	movq	%rbp, %rdx
    00000533: 	leaq	_Z23count_half_for_pointer3IiEmPT_m(%rip), %rsi
    0000053a: 	movq	%r12, %rdi
    0000053d: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1341
    00000542: 	movq	0x1b0(%rsp), %rdi
    0000054a: 	cmpq	%rbx, %rdi
    0000054d: 	je	.Ltmp597 # Offset: 1357
    0000054f: 	movq	0x1c0(%rsp), %rax
    00000557: 	leaq	0x1(%rax), %rsi
    0000055b: 	callq	_ZdlPvm@PLT # Offset: 1371
.Ltmp597:
    00000560: 	leaq	DATAat0x11266(%rip), %rdx
    00000567: 	movq	%r13, %rsi
    0000056a: 	movq	%rbp, %rdi
    0000056d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1389
    00000572: 	movq	%rbp, %rdx
    00000575: 	leaq	_Z23count_half_for_pointer4IiEmPT_m(%rip), %rsi
    0000057c: 	movq	%r12, %rdi
    0000057f: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1407
    00000584: 	movq	0x1b0(%rsp), %rdi
    0000058c: 	cmpq	%rbx, %rdi
    0000058f: 	je	.Ltmp598 # Offset: 1423
    00000591: 	movq	0x1c0(%rsp), %rax
    00000599: 	leaq	0x1(%rax), %rsi
    0000059d: 	callq	_ZdlPvm@PLT # Offset: 1437
.Ltmp598:
    000005a2: 	movq	0x90(%rsp), %r15
    000005aa: 	movq	0x98(%rsp), %r14
    000005b2: 	movq	%rbx, 0x1b0(%rsp)
    000005ba: 	movq	%r15, %rax
    000005bd: 	addq	%r14, %rax
    000005c0: 	je	.Ltmp599 # Offset: 1472
    000005c2: 	testq	%r15, %r15
    000005c5: 	je	.Ltmp600 # Offset: 1477
.Ltmp599:
    000005cb: 	movq	%r14, 0x70(%rsp)
    000005d0: 	cmpq	$0xf, %r14
    000005d4: 	ja	.Ltmp601 # Offset: 1492
    000005da: 	cmpq	$0x1, %r14
    000005de: 	jne	.Ltmp602 # Offset: 1502
    000005e4: 	movzbl	(%r15), %eax
    000005e8: 	movb	%al, 0x1c0(%rsp)
    000005ef: 	movq	%rbx, %rax
.Ltmp877:
    000005f2: 	movq	%r14, 0x1b8(%rsp)
    000005fa: 	movb	$0x0, (%rax,%r14)
    000005ff: 	movabsq	$0x3fffffffffffffff, %rax
    00000609: 	subq	0x1b8(%rsp), %rax
    00000611: 	cmpq	$0x17, %rax
    00000615: 	jbe	.Ltmp603 # Offset: 1557
    0000061b: 	movl	$0x18, %edx
    00000620: 	leaq	DATAat0x1127f(%rip), %rsi
    00000627: 	movq	%rbp, %rdi
    0000062a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1578
    0000062f: 	movq	%rbp, %rdx
    00000632: 	leaq	_Z23count_half_for_pointer5IiEmPT_m(%rip), %rsi
    00000639: 	movq	%r12, %rdi
    0000063c: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1596
    00000641: 	movq	0x1b0(%rsp), %rdi
    00000649: 	cmpq	%rbx, %rdi
    0000064c: 	je	.Ltmp604 # Offset: 1612
    0000064e: 	movq	0x1c0(%rsp), %rax
    00000656: 	leaq	0x1(%rax), %rsi
    0000065a: 	callq	_ZdlPvm@PLT # Offset: 1626
.Ltmp604:
    0000065f: 	leaq	DATAat0x11298(%rip), %rdx
    00000666: 	movq	%r13, %rsi
    00000669: 	movq	%rbp, %rdi
    0000066c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1644
    00000671: 	movq	%rbp, %rdx
    00000674: 	leaq	_Z23count_half_for_pointer6IiEmPT_m(%rip), %rsi
    0000067b: 	movq	%r12, %rdi
    0000067e: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1662
    00000683: 	movq	0x1b0(%rsp), %rdi
    0000068b: 	cmpq	%rbx, %rdi
    0000068e: 	je	.Ltmp605 # Offset: 1678
    00000690: 	movq	0x1c0(%rsp), %rax
    00000698: 	leaq	0x1(%rax), %rsi
    0000069c: 	callq	_ZdlPvm@PLT # Offset: 1692
.Ltmp605:
    000006a1: 	movq	0x90(%rsp), %r15
    000006a9: 	movq	0x98(%rsp), %r14
    000006b1: 	movq	%rbx, 0x1b0(%rsp)
    000006b9: 	movq	%r15, %rax
    000006bc: 	addq	%r14, %rax
    000006bf: 	je	.Ltmp606 # Offset: 1727
    000006c1: 	testq	%r15, %r15
    000006c4: 	je	.Ltmp607 # Offset: 1732
.Ltmp606:
    000006ca: 	movq	%r14, 0x70(%rsp)
    000006cf: 	cmpq	$0xf, %r14
    000006d3: 	ja	.Ltmp608 # Offset: 1747
    000006d9: 	cmpq	$0x1, %r14
    000006dd: 	jne	.Ltmp609 # Offset: 1757
    000006e3: 	movzbl	(%r15), %eax
    000006e7: 	movb	%al, 0x1c0(%rsp)
    000006ee: 	movq	%rbx, %rax
.Ltmp875:
    000006f1: 	movq	%r14, 0x1b8(%rsp)
    000006f9: 	movb	$0x0, (%rax,%r14)
    000006fe: 	movabsq	$0x3fffffffffffffff, %rax
    00000708: 	subq	0x1b8(%rsp), %rax
    00000710: 	cmpq	$0x17, %rax
    00000714: 	jbe	.Ltmp610 # Offset: 1812
    0000071a: 	movl	$0x18, %edx
    0000071f: 	leaq	DATAat0x112b1(%rip), %rsi
    00000726: 	movq	%rbp, %rdi
    00000729: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1833
    0000072e: 	movq	%rbp, %rdx
    00000731: 	leaq	_Z23count_half_for_pointer7IiEmPT_m(%rip), %rsi
    00000738: 	movq	%r12, %rdi
    0000073b: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1851
    00000740: 	movq	0x1b0(%rsp), %rdi
    00000748: 	cmpq	%rbx, %rdi
    0000074b: 	je	.Ltmp611 # Offset: 1867
    0000074d: 	movq	0x1c0(%rsp), %rax
    00000755: 	leaq	0x1(%rax), %rsi
    00000759: 	callq	_ZdlPvm@PLT # Offset: 1881
.Ltmp611:
    0000075e: 	leaq	DATAat0x112ca(%rip), %rdx
    00000765: 	movq	%r13, %rsi
    00000768: 	movq	%rbp, %rdi
    0000076b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1899
    00000770: 	movq	%rbp, %rdx
    00000773: 	leaq	_Z23count_half_for_pointer8IiEmPT_m(%rip), %rsi
    0000077a: 	movq	%r12, %rdi
    0000077d: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1917
    00000782: 	movq	0x1b0(%rsp), %rdi
    0000078a: 	cmpq	%rbx, %rdi
    0000078d: 	je	.Ltmp612 # Offset: 1933
    0000078f: 	movq	0x1c0(%rsp), %rax
    00000797: 	leaq	0x1(%rax), %rsi
    0000079b: 	callq	_ZdlPvm@PLT # Offset: 1947
.Ltmp612:
    000007a0: 	leaq	DATAat0x112e3(%rip), %rdx
    000007a7: 	movq	%r13, %rsi
    000007aa: 	movq	%rbp, %rdi
    000007ad: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1965
    000007b2: 	movq	%rbp, %rdx
    000007b5: 	leaq	_Z21count_half_for_index1IiEmPT_m(%rip), %rsi
    000007bc: 	movq	%r12, %rdi
    000007bf: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1983
    000007c4: 	movq	0x1b0(%rsp), %rdi
    000007cc: 	cmpq	%rbx, %rdi
    000007cf: 	je	.Ltmp613 # Offset: 1999
    000007d1: 	movq	0x1c0(%rsp), %rax
    000007d9: 	leaq	0x1(%rax), %rsi
    000007dd: 	callq	_ZdlPvm@PLT # Offset: 2013
.Ltmp613:
    000007e2: 	leaq	DATAat0x112fa(%rip), %rdx
    000007e9: 	movq	%r13, %rsi
    000007ec: 	movq	%rbp, %rdi
    000007ef: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2031
    000007f4: 	movq	%rbp, %rdx
    000007f7: 	leaq	_Z21count_half_for_index2IiEmPT_m(%rip), %rsi
    000007fe: 	movq	%r12, %rdi
    00000801: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2049
    00000806: 	movq	0x1b0(%rsp), %rdi
    0000080e: 	cmpq	%rbx, %rdi
    00000811: 	je	.Ltmp614 # Offset: 2065
    00000813: 	movq	0x1c0(%rsp), %rax
    0000081b: 	leaq	0x1(%rax), %rsi
    0000081f: 	callq	_ZdlPvm@PLT # Offset: 2079
.Ltmp614:
    00000824: 	leaq	DATAat0x11311(%rip), %rdx
    0000082b: 	movq	%r13, %rsi
    0000082e: 	movq	%rbp, %rdi
    00000831: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2097
    00000836: 	movq	%rbp, %rdx
    00000839: 	leaq	_Z21count_half_for_index3IiEmPT_m(%rip), %rsi
    00000840: 	movq	%r12, %rdi
    00000843: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2115
    00000848: 	movq	0x1b0(%rsp), %rdi
    00000850: 	cmpq	%rbx, %rdi
    00000853: 	je	.Ltmp615 # Offset: 2131
    00000855: 	movq	0x1c0(%rsp), %rax
    0000085d: 	leaq	0x1(%rax), %rsi
    00000861: 	callq	_ZdlPvm@PLT # Offset: 2145
.Ltmp615:
    00000866: 	leaq	DATAat0x11328(%rip), %rdx
    0000086d: 	movq	%r13, %rsi
    00000870: 	movq	%rbp, %rdi
    00000873: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2163
    00000878: 	movq	%rbp, %rdx
    0000087b: 	leaq	_Z21count_half_for_index4IiEmPT_m(%rip), %rsi
    00000882: 	movq	%r12, %rdi
    00000885: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2181
    0000088a: 	movq	0x1b0(%rsp), %rdi
    00000892: 	cmpq	%rbx, %rdi
    00000895: 	je	.Ltmp616 # Offset: 2197
    00000897: 	movq	0x1c0(%rsp), %rax
    0000089f: 	leaq	0x1(%rax), %rsi
    000008a3: 	callq	_ZdlPvm@PLT # Offset: 2211
.Ltmp616:
    000008a8: 	leaq	DATAat0x1133f(%rip), %rdx
    000008af: 	movq	%r13, %rsi
    000008b2: 	movq	%rbp, %rdi
    000008b5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2229
    000008ba: 	movq	%rbp, %rdx
    000008bd: 	leaq	_Z21count_half_for_index5IiEmPT_m(%rip), %rsi
    000008c4: 	movq	%r12, %rdi
    000008c7: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2247
    000008cc: 	movq	0x1b0(%rsp), %rdi
    000008d4: 	cmpq	%rbx, %rdi
    000008d7: 	je	.Ltmp617 # Offset: 2263
    000008d9: 	movq	0x1c0(%rsp), %rax
    000008e1: 	leaq	0x1(%rax), %rsi
    000008e5: 	callq	_ZdlPvm@PLT # Offset: 2277
.Ltmp617:
    000008ea: 	leaq	DATAat0x11356(%rip), %rdx
    000008f1: 	movq	%r13, %rsi
    000008f4: 	movq	%rbp, %rdi
    000008f7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2295
    000008fc: 	movq	%rbp, %rdx
    000008ff: 	leaq	_Z21count_half_for_index6IiEmPT_m(%rip), %rsi
    00000906: 	movq	%r12, %rdi
    00000909: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2313
    0000090e: 	movq	0x1b0(%rsp), %rdi
    00000916: 	cmpq	%rbx, %rdi
    00000919: 	je	.Ltmp618 # Offset: 2329
    0000091b: 	movq	0x1c0(%rsp), %rax
    00000923: 	leaq	0x1(%rax), %rsi
    00000927: 	callq	_ZdlPvm@PLT # Offset: 2343
.Ltmp618:
    0000092c: 	leaq	DATAat0x1136d(%rip), %rdx
    00000933: 	movq	%r13, %rsi
    00000936: 	movq	%rbp, %rdi
    00000939: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2361
    0000093e: 	movq	%rbp, %rdx
    00000941: 	leaq	_Z21count_half_for_index7IiEmPT_m(%rip), %rsi
    00000948: 	movq	%r12, %rdi
    0000094b: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2379
    00000950: 	movq	0x1b0(%rsp), %rdi
    00000958: 	cmpq	%rbx, %rdi
    0000095b: 	je	.Ltmp619 # Offset: 2395
    0000095d: 	movq	0x1c0(%rsp), %rax
    00000965: 	leaq	0x1(%rax), %rsi
    00000969: 	callq	_ZdlPvm@PLT # Offset: 2409
.Ltmp619:
    0000096e: 	leaq	DATAat0x11384(%rip), %rdx
    00000975: 	movq	%r13, %rsi
    00000978: 	movq	%rbp, %rdi
    0000097b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2427
    00000980: 	movq	%rbp, %rdx
    00000983: 	leaq	_Z21count_half_for_index8IiEmPT_m(%rip), %rsi
    0000098a: 	movq	%r12, %rdi
    0000098d: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2445
    00000992: 	movq	0x1b0(%rsp), %rdi
    0000099a: 	cmpq	%rbx, %rdi
    0000099d: 	je	.Ltmp620 # Offset: 2461
    0000099f: 	movq	0x1c0(%rsp), %rax
    000009a7: 	leaq	0x1(%rax), %rsi
    000009ab: 	callq	_ZdlPvm@PLT # Offset: 2475
.Ltmp620:
    000009b0: 	leaq	DATAat0x1139b(%rip), %rdx
    000009b7: 	movq	%r13, %rsi
    000009ba: 	movq	%rbp, %rdi
    000009bd: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2493
    000009c2: 	movq	%rbp, %rdx
    000009c5: 	leaq	_Z21count_half_for_index9IiEmPT_m(%rip), %rsi
    000009cc: 	movq	%r12, %rdi
    000009cf: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2511
    000009d4: 	movq	0x1b0(%rsp), %rdi
    000009dc: 	cmpq	%rbx, %rdi
    000009df: 	je	.Ltmp621 # Offset: 2527
    000009e1: 	movq	0x1c0(%rsp), %rax
    000009e9: 	leaq	0x1(%rax), %rsi
    000009ed: 	callq	_ZdlPvm@PLT # Offset: 2541
.Ltmp621:
    000009f2: 	leaq	DATAat0x113b2(%rip), %rdx
    000009f9: 	movq	%r13, %rsi
    000009fc: 	movq	%rbp, %rdi
    000009ff: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2559
    00000a04: 	movq	%rbp, %rdx
    00000a07: 	leaq	_Z22count_half_for_index10IiEmPT_m(%rip), %rsi
    00000a0e: 	movq	%r12, %rdi
    00000a11: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2577
    00000a16: 	movq	0x1b0(%rsp), %rdi
    00000a1e: 	cmpq	%rbx, %rdi
    00000a21: 	je	.Ltmp622 # Offset: 2593
    00000a23: 	movq	0x1c0(%rsp), %rax
    00000a2b: 	leaq	0x1(%rax), %rsi
    00000a2f: 	callq	_ZdlPvm@PLT # Offset: 2607
.Ltmp622:
    00000a34: 	leaq	0xb0(%rsp), %r14
    00000a3c: 	leaq	DATAat0x113ca(%rip), %rdx
    00000a43: 	movq	%rbp, %rdi
    00000a46: 	movq	%r14, %rsi
    00000a49: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2633
    00000a4e: 	movq	%rbp, %rdx
    00000a51: 	leaq	_Z24count_half_for_iterator1IPiEmT_m(%rip), %rsi
    00000a58: 	movq	%r12, %rdi
    00000a5b: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2651
    00000a60: 	movq	0x1b0(%rsp), %rdi
    00000a68: 	cmpq	%rbx, %rdi
    00000a6b: 	je	.Ltmp623 # Offset: 2667
    00000a6d: 	movq	0x1c0(%rsp), %rax
    00000a75: 	leaq	0x1(%rax), %rsi
    00000a79: 	callq	_ZdlPvm@PLT # Offset: 2681
.Ltmp623:
    00000a7e: 	movq	0xb0(%rsp), %rax
    00000a86: 	movq	0xb8(%rsp), %r15
    00000a8e: 	movq	%rbx, 0x1b0(%rsp)
    00000a96: 	movq	%rax, %rcx
    00000a99: 	movq	%rax, 0x10(%rsp)
    00000a9e: 	addq	%r15, %rcx
    00000aa1: 	je	.Ltmp624 # Offset: 2721
    00000aa3: 	testq	%rax, %rax
    00000aa6: 	je	.Ltmp625 # Offset: 2726
.Ltmp624:
    00000aac: 	movq	%r15, 0x70(%rsp)
    00000ab1: 	cmpq	$0xf, %r15
    00000ab5: 	ja	.Ltmp626 # Offset: 2741
    00000abb: 	cmpq	$0x1, %r15
    00000abf: 	jne	.Ltmp627 # Offset: 2751
    00000ac5: 	movq	0x10(%rsp), %rax
    00000aca: 	movzbl	(%rax), %eax
    00000acd: 	movb	%al, 0x1c0(%rsp)
    00000ad4: 	movq	%rbx, %rax
.Ltmp873:
    00000ad7: 	movq	%r15, 0x1b8(%rsp)
    00000adf: 	movb	$0x0, (%rax,%r15)
    00000ae4: 	movabsq	$0x3fffffffffffffff, %rax
    00000aee: 	subq	0x1b8(%rsp), %rax
    00000af6: 	cmpq	$0x18, %rax
    00000afa: 	jbe	.Ltmp628 # Offset: 2810
    00000b00: 	movl	$0x19, %edx
    00000b05: 	leaq	DATAat0x113e4(%rip), %rsi
    00000b0c: 	movq	%rbp, %rdi
    00000b0f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2831
    00000b14: 	movq	%rbp, %rdx
    00000b17: 	leaq	_Z24count_half_for_iterator2IPiEmT_m(%rip), %rsi
    00000b1e: 	movq	%r12, %rdi
    00000b21: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2849
    00000b26: 	movq	0x1b0(%rsp), %rdi
    00000b2e: 	cmpq	%rbx, %rdi
    00000b31: 	je	.Ltmp629 # Offset: 2865
    00000b33: 	movq	0x1c0(%rsp), %rax
    00000b3b: 	leaq	0x1(%rax), %rsi
    00000b3f: 	callq	_ZdlPvm@PLT # Offset: 2879
.Ltmp629:
    00000b44: 	leaq	DATAat0x113fe(%rip), %rdx
    00000b4b: 	movq	%r14, %rsi
    00000b4e: 	movq	%rbp, %rdi
    00000b51: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2897
    00000b56: 	movq	%rbp, %rdx
    00000b59: 	leaq	_Z24count_half_for_iterator3IPiEmT_m(%rip), %rsi
    00000b60: 	movq	%r12, %rdi
    00000b63: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2915
    00000b68: 	movq	0x1b0(%rsp), %rdi
    00000b70: 	cmpq	%rbx, %rdi
    00000b73: 	je	.Ltmp630 # Offset: 2931
    00000b75: 	movq	0x1c0(%rsp), %rax
    00000b7d: 	leaq	0x1(%rax), %rsi
    00000b81: 	callq	_ZdlPvm@PLT # Offset: 2945
.Ltmp630:
    00000b86: 	movq	0xb0(%rsp), %rax
    00000b8e: 	movq	0xb8(%rsp), %r15
    00000b96: 	movq	%rbx, 0x1b0(%rsp)
    00000b9e: 	movq	%rax, %rcx
    00000ba1: 	movq	%rax, 0x10(%rsp)
    00000ba6: 	addq	%r15, %rcx
    00000ba9: 	je	.Ltmp631 # Offset: 2985
    00000bab: 	testq	%rax, %rax
    00000bae: 	je	.Ltmp632 # Offset: 2990
.Ltmp631:
    00000bb4: 	movq	%r15, 0x70(%rsp)
    00000bb9: 	cmpq	$0xf, %r15
    00000bbd: 	ja	.Ltmp633 # Offset: 3005
    00000bc3: 	cmpq	$0x1, %r15
    00000bc7: 	jne	.Ltmp634 # Offset: 3015
    00000bcd: 	movq	0x10(%rsp), %rax
    00000bd2: 	movzbl	(%rax), %eax
    00000bd5: 	movb	%al, 0x1c0(%rsp)
    00000bdc: 	movq	%rbx, %rax
.Ltmp895:
    00000bdf: 	movq	%r15, 0x1b8(%rsp)
    00000be7: 	movb	$0x0, (%rax,%r15)
    00000bec: 	movabsq	$0x3fffffffffffffff, %rax
    00000bf6: 	subq	0x1b8(%rsp), %rax
    00000bfe: 	cmpq	$0x18, %rax
    00000c02: 	jbe	.Ltmp635 # Offset: 3074
    00000c08: 	movl	$0x19, %edx
    00000c0d: 	leaq	DATAat0x11418(%rip), %rsi
    00000c14: 	movq	%rbp, %rdi
    00000c17: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3095
    00000c1c: 	movq	%rbp, %rdx
    00000c1f: 	leaq	_Z24count_half_for_iterator4IPiEmT_m(%rip), %rsi
    00000c26: 	movq	%r12, %rdi
    00000c29: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3113
    00000c2e: 	movq	0x1b0(%rsp), %rdi
    00000c36: 	cmpq	%rbx, %rdi
    00000c39: 	je	.Ltmp636 # Offset: 3129
    00000c3b: 	movq	0x1c0(%rsp), %rax
    00000c43: 	leaq	0x1(%rax), %rsi
    00000c47: 	callq	_ZdlPvm@PLT # Offset: 3143
.Ltmp636:
    00000c4c: 	leaq	DATAat0x11432(%rip), %rdx
    00000c53: 	movq	%r14, %rsi
    00000c56: 	movq	%rbp, %rdi
    00000c59: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3161
    00000c5e: 	movq	%rbp, %rdx
    00000c61: 	leaq	_Z24count_half_for_iterator5IPiEmT_m(%rip), %rsi
    00000c68: 	movq	%r12, %rdi
    00000c6b: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3179
    00000c70: 	movq	0x1b0(%rsp), %rdi
    00000c78: 	cmpq	%rbx, %rdi
    00000c7b: 	je	.Ltmp637 # Offset: 3195
    00000c7d: 	movq	0x1c0(%rsp), %rax
    00000c85: 	leaq	0x1(%rax), %rsi
    00000c89: 	callq	_ZdlPvm@PLT # Offset: 3209
.Ltmp637:
    00000c8e: 	leaq	DATAat0x1144c(%rip), %rdx
    00000c95: 	movq	%r14, %rsi
    00000c98: 	movq	%rbp, %rdi
    00000c9b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3227
    00000ca0: 	movq	%rbp, %rdx
    00000ca3: 	leaq	_Z24count_half_for_iterator6IPiEmT_m(%rip), %rsi
    00000caa: 	movq	%r12, %rdi
    00000cad: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3245
    00000cb2: 	movq	0x1b0(%rsp), %rdi
    00000cba: 	cmpq	%rbx, %rdi
    00000cbd: 	je	.Ltmp638 # Offset: 3261
    00000cbf: 	movq	0x1c0(%rsp), %rax
    00000cc7: 	leaq	0x1(%rax), %rsi
    00000ccb: 	callq	_ZdlPvm@PLT # Offset: 3275
.Ltmp638:
    00000cd0: 	leaq	DATAat0x1144c(%rip), %rdx
    00000cd7: 	movq	%r14, %rsi
    00000cda: 	movq	%rbp, %rdi
    00000cdd: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3293
    00000ce2: 	movq	%rbp, %rdx
    00000ce5: 	leaq	_Z24count_half_for_iterator6IPiEmT_m(%rip), %rsi
    00000cec: 	movq	%r12, %rdi
    00000cef: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3311
    00000cf4: 	movq	0x1b0(%rsp), %rdi
    00000cfc: 	cmpq	%rbx, %rdi
    00000cff: 	je	.Ltmp639 # Offset: 3327
    00000d01: 	movq	0x1c0(%rsp), %rax
    00000d09: 	leaq	0x1(%rax), %rsi
    00000d0d: 	callq	_ZdlPvm@PLT # Offset: 3341
.Ltmp639:
    00000d12: 	movq	0xb0(%rsp), %rax
    00000d1a: 	movq	0xb8(%rsp), %r15
    00000d22: 	movq	%rbx, 0x1b0(%rsp)
    00000d2a: 	movq	%rax, %rcx
    00000d2d: 	movq	%rax, 0x10(%rsp)
    00000d32: 	addq	%r15, %rcx
    00000d35: 	je	.Ltmp640 # Offset: 3381
    00000d37: 	testq	%rax, %rax
    00000d3a: 	je	.Ltmp641 # Offset: 3386
.Ltmp640:
    00000d40: 	movq	%r15, 0x70(%rsp)
    00000d45: 	cmpq	$0xf, %r15
    00000d49: 	ja	.Ltmp642 # Offset: 3401
    00000d4f: 	cmpq	$0x1, %r15
    00000d53: 	jne	.Ltmp643 # Offset: 3411
    00000d59: 	movq	0x10(%rsp), %rax
    00000d5e: 	movzbl	(%rax), %eax
    00000d61: 	movb	%al, 0x1c0(%rsp)
    00000d68: 	movq	%rbx, %rax
.Ltmp893:
    00000d6b: 	movq	%r15, 0x1b8(%rsp)
    00000d73: 	movb	$0x0, (%rax,%r15)
    00000d78: 	movabsq	$0x3fffffffffffffff, %rax
    00000d82: 	subq	0x1b8(%rsp), %rax
    00000d8a: 	cmpq	$0x18, %rax
    00000d8e: 	jbe	.Ltmp644 # Offset: 3470
    00000d94: 	movl	$0x19, %edx
    00000d99: 	leaq	DATAat0x1144c(%rip), %rsi
    00000da0: 	movq	%rbp, %rdi
    00000da3: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3491
    00000da8: 	movq	%rbp, %rdx
    00000dab: 	leaq	_Z24count_half_for_iterator6IPiEmT_m(%rip), %rsi
    00000db2: 	movq	%r12, %rdi
    00000db5: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3509
    00000dba: 	movq	0x1b0(%rsp), %rdi
    00000dc2: 	cmpq	%rbx, %rdi
    00000dc5: 	je	.Ltmp645 # Offset: 3525
    00000dc7: 	movq	0x1c0(%rsp), %rax
    00000dcf: 	leaq	0x1(%rax), %rsi
    00000dd3: 	callq	_ZdlPvm@PLT # Offset: 3539
.Ltmp645:
    00000dd8: 	leaq	DATAat0x11466(%rip), %rdx
    00000ddf: 	movq	%r14, %rsi
    00000de2: 	movq	%rbp, %rdi
    00000de5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3557
    00000dea: 	movq	%rbp, %rdx
    00000ded: 	leaq	_Z24count_half_for_iterator7IPiEmT_m(%rip), %rsi
    00000df4: 	movq	%r12, %rdi
    00000df7: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3575
    00000dfc: 	movq	0x1b0(%rsp), %rdi
    00000e04: 	cmpq	%rbx, %rdi
    00000e07: 	je	.Ltmp646 # Offset: 3591
    00000e09: 	movq	0x1c0(%rsp), %rax
    00000e11: 	leaq	0x1(%rax), %rsi
    00000e15: 	callq	_ZdlPvm@PLT # Offset: 3605
.Ltmp646:
    00000e1a: 	leaq	DATAat0x11480(%rip), %rdx
    00000e21: 	movq	%r14, %rsi
    00000e24: 	movq	%rbp, %rdi
    00000e27: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3623
    00000e2c: 	movq	%rbp, %rdx
    00000e2f: 	leaq	_Z24count_half_for_iterator8IPiEmT_m(%rip), %rsi
    00000e36: 	movq	%r12, %rdi
    00000e39: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3641
    00000e3e: 	movq	0x1b0(%rsp), %rdi
    00000e46: 	cmpq	%rbx, %rdi
    00000e49: 	je	.Ltmp647 # Offset: 3657
    00000e4b: 	movq	0x1c0(%rsp), %rax
    00000e53: 	leaq	0x1(%rax), %rsi
    00000e57: 	callq	_ZdlPvm@PLT # Offset: 3671
.Ltmp647:
    00000e5c: 	leaq	DATAat0x11c28(%rip), %rdx
    00000e63: 	movq	%r13, %rsi
    00000e66: 	movq	%rbp, %rdi
    00000e69: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3689
    00000e6e: 	movq	0x8(%rsp), %rdi
    00000e73: 	movq	%rbp, %rcx
    00000e76: 	movl	$0xfa0, %esi
    00000e7b: 	leaq	_Z24count_half_for_iterator1IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEmT_m(%rip), %rdx
    00000e82: 	callq	_Z15test_count_halfIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEPFmS6_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3714
    00000e87: 	movq	0x1b0(%rsp), %rdi
    00000e8f: 	cmpq	%rbx, %rdi
    00000e92: 	je	.Ltmp648 # Offset: 3730
    00000e94: 	movq	0x1c0(%rsp), %rax
    00000e9c: 	leaq	0x1(%rax), %rsi
    00000ea0: 	callq	_ZdlPvm@PLT # Offset: 3744
.Ltmp648:
    00000ea5: 	leaq	DATAat0x11c50(%rip), %rdx
    00000eac: 	movq	%r13, %rsi
    00000eaf: 	movq	%rbp, %rdi
    00000eb2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3762
    00000eb7: 	movq	0x8(%rsp), %rdi
    00000ebc: 	movq	%rbp, %rcx
    00000ebf: 	movl	$0xfa0, %esi
    00000ec4: 	leaq	_Z24count_half_for_iterator2IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEmT_m(%rip), %rdx
    00000ecb: 	callq	_Z15test_count_halfIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEPFmS6_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3787
    00000ed0: 	movq	0x1b0(%rsp), %rdi
    00000ed8: 	cmpq	%rbx, %rdi
    00000edb: 	je	.Ltmp649 # Offset: 3803
    00000edd: 	movq	0x1c0(%rsp), %rax
    00000ee5: 	leaq	0x1(%rax), %rsi
    00000ee9: 	callq	_ZdlPvm@PLT # Offset: 3817
.Ltmp649:
    00000eee: 	leaq	DATAat0x11c78(%rip), %rdx
    00000ef5: 	movq	%r13, %rsi
    00000ef8: 	movq	%rbp, %rdi
    00000efb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3835
    00000f00: 	movq	0x8(%rsp), %rdi
    00000f05: 	movq	%rbp, %rcx
    00000f08: 	movl	$0xfa0, %esi
    00000f0d: 	leaq	_Z24count_half_for_iterator3IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEmT_m(%rip), %rdx
    00000f14: 	callq	_Z15test_count_halfIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEPFmS6_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3860
    00000f19: 	movq	0x1b0(%rsp), %rdi
    00000f21: 	cmpq	%rbx, %rdi
    00000f24: 	je	.Ltmp650 # Offset: 3876
    00000f26: 	movq	0x1c0(%rsp), %rax
    00000f2e: 	leaq	0x1(%rax), %rsi
    00000f32: 	callq	_ZdlPvm@PLT # Offset: 3890
.Ltmp650:
    00000f37: 	leaq	DATAat0x11ca0(%rip), %rdx
    00000f3e: 	movq	%r13, %rsi
    00000f41: 	movq	%rbp, %rdi
    00000f44: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3908
    00000f49: 	movq	0x8(%rsp), %rdi
    00000f4e: 	movq	%rbp, %rcx
    00000f51: 	movl	$0xfa0, %esi
    00000f56: 	leaq	_Z24count_half_for_iterator4IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEmT_m(%rip), %rdx
    00000f5d: 	callq	_Z15test_count_halfIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEPFmS6_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3933
    00000f62: 	movq	0x1b0(%rsp), %rdi
    00000f6a: 	cmpq	%rbx, %rdi
    00000f6d: 	je	.Ltmp651 # Offset: 3949
    00000f6f: 	movq	0x1c0(%rsp), %rax
    00000f77: 	leaq	0x1(%rax), %rsi
    00000f7b: 	callq	_ZdlPvm@PLT # Offset: 3963
.Ltmp651:
    00000f80: 	leaq	DATAat0x11cc8(%rip), %rdx
    00000f87: 	movq	%r13, %rsi
    00000f8a: 	movq	%rbp, %rdi
    00000f8d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3981
    00000f92: 	movq	0x8(%rsp), %rdi
    00000f97: 	movq	%rbp, %rcx
    00000f9a: 	movl	$0xfa0, %esi
    00000f9f: 	leaq	_Z24count_half_for_iterator5IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEmT_m(%rip), %rdx
    00000fa6: 	callq	_Z15test_count_halfIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEPFmS6_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4006
    00000fab: 	movq	0x1b0(%rsp), %rdi
    00000fb3: 	cmpq	%rbx, %rdi
    00000fb6: 	je	.Ltmp652 # Offset: 4022
    00000fb8: 	movq	0x1c0(%rsp), %rax
    00000fc0: 	leaq	0x1(%rax), %rsi
    00000fc4: 	callq	_ZdlPvm@PLT # Offset: 4036
.Ltmp652:
    00000fc9: 	leaq	DATAat0x11cf0(%rip), %rdx
    00000fd0: 	movq	%r13, %rsi
    00000fd3: 	movq	%rbp, %rdi
    00000fd6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4054
    00000fdb: 	movq	0x8(%rsp), %rdi
    00000fe0: 	movq	%rbp, %rcx
    00000fe3: 	movl	$0xfa0, %esi
    00000fe8: 	leaq	_Z24count_half_for_iterator6IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEmT_m(%rip), %rdx
    00000fef: 	callq	_Z15test_count_halfIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEPFmS6_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4079
    00000ff4: 	movq	0x1b0(%rsp), %rdi
    00000ffc: 	cmpq	%rbx, %rdi
    00000fff: 	je	.Ltmp653 # Offset: 4095
    00001001: 	movq	0x1c0(%rsp), %rax
    00001009: 	leaq	0x1(%rax), %rsi
    0000100d: 	callq	_ZdlPvm@PLT # Offset: 4109
.Ltmp653:
    00001012: 	leaq	DATAat0x11d18(%rip), %rdx
    00001019: 	movq	%r13, %rsi
    0000101c: 	movq	%rbp, %rdi
    0000101f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4127
    00001024: 	movq	0x8(%rsp), %rdi
    00001029: 	movq	%rbp, %rcx
    0000102c: 	movl	$0xfa0, %esi
    00001031: 	leaq	_Z24count_half_for_iterator7IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEmT_m(%rip), %rdx
    00001038: 	callq	_Z15test_count_halfIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEPFmS6_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4152
    0000103d: 	movq	0x1b0(%rsp), %rdi
    00001045: 	cmpq	%rbx, %rdi
    00001048: 	je	.Ltmp654 # Offset: 4168
    0000104a: 	movq	0x1c0(%rsp), %rax
    00001052: 	leaq	0x1(%rax), %rsi
    00001056: 	callq	_ZdlPvm@PLT # Offset: 4182
.Ltmp654:
    0000105b: 	movq	0x90(%rsp), %r15
    00001063: 	movq	0x98(%rsp), %r14
    0000106b: 	movq	%rbx, 0x1b0(%rsp)
    00001073: 	movq	%r15, %rax
    00001076: 	addq	%r14, %rax
    00001079: 	je	.Ltmp655 # Offset: 4217
    0000107b: 	testq	%r15, %r15
    0000107e: 	je	.Ltmp656 # Offset: 4222
.Ltmp655:
    00001084: 	movq	%r14, 0x70(%rsp)
    00001089: 	cmpq	$0xf, %r14
    0000108d: 	ja	.Ltmp657 # Offset: 4237
    00001093: 	cmpq	$0x1, %r14
    00001097: 	jne	.Ltmp658 # Offset: 4247
    0000109d: 	movzbl	(%r15), %eax
    000010a1: 	movb	%al, 0x1c0(%rsp)
    000010a8: 	movq	%rbx, %rax
.Ltmp891:
    000010ab: 	movq	%r14, 0x1b8(%rsp)
    000010b3: 	movb	$0x0, (%rax,%r14)
    000010b8: 	movabsq	$0x3fffffffffffffff, %rax
    000010c2: 	subq	0x1b8(%rsp), %rax
    000010ca: 	cmpq	$0x1f, %rax
    000010ce: 	jbe	.Ltmp659 # Offset: 4302
    000010d4: 	movl	$0x20, %edx
    000010d9: 	leaq	DATAat0x11d40(%rip), %rsi
    000010e0: 	movq	%rbp, %rdi
    000010e3: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4323
    000010e8: 	movq	0x8(%rsp), %rdi
    000010ed: 	movq	%rbp, %rcx
    000010f0: 	movl	$0xfa0, %esi
    000010f5: 	leaq	_Z24count_half_for_iterator8IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEmT_m(%rip), %rdx
    000010fc: 	callq	_Z15test_count_halfIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEPFmS6_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4348
    00001101: 	movq	0x1b0(%rsp), %rdi
    00001109: 	cmpq	%rbx, %rdi
    0000110c: 	je	.Ltmp660 # Offset: 4364
    0000110e: 	movq	0x1c0(%rsp), %rax
    00001116: 	leaq	0x1(%rax), %rsi
    0000111a: 	callq	_ZdlPvm@PLT # Offset: 4378
.Ltmp660:
    0000111f: 	leaq	0xd0(%rsp), %rdi
    00001127: 	leaq	DATAat0x11d68(%rip), %rdx
    0000112e: 	movq	%r13, %rsi
    00001131: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4401
    00001136: 	movl	iterations(%rip), %esi
    0000113c: 	movq	0xd0(%rsp), %rdi
    00001144: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 4420
    00001149: 	leaq	DATAat0x1149a(%rip), %rdx
    00001150: 	movq	%r13, %rsi
    00001153: 	movq	%rbp, %rdi
    00001156: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4438
    0000115b: 	movq	%rbp, %rdx
    0000115e: 	leaq	_Z20count_half_while_optIiEmPT_m(%rip), %rsi
    00001165: 	movq	%r12, %rdi
    00001168: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 4456
    0000116d: 	movq	0x1b0(%rsp), %rdi
    00001175: 	cmpq	%rbx, %rdi
    00001178: 	je	.Ltmp661 # Offset: 4472
    0000117a: 	movq	0x1c0(%rsp), %rax
    00001182: 	leaq	0x1(%rax), %rsi
    00001186: 	callq	_ZdlPvm@PLT # Offset: 4486
.Ltmp661:
    0000118b: 	leaq	DATAat0x114b0(%rip), %rdx
    00001192: 	movq	%r13, %rsi
    00001195: 	movq	%rbp, %rdi
    00001198: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4504
    0000119d: 	movq	%rbp, %rdx
    000011a0: 	leaq	_Z28count_half_while_uncountableIiEmPT_m(%rip), %rsi
    000011a7: 	movq	%r12, %rdi
    000011aa: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 4522
    000011af: 	movq	0x1b0(%rsp), %rdi
    000011b7: 	cmpq	%rbx, %rdi
    000011ba: 	je	.Ltmp662 # Offset: 4538
    000011bc: 	movq	0x1c0(%rsp), %rax
    000011c4: 	leaq	0x1(%rax), %rsi
    000011c8: 	callq	_ZdlPvm@PLT # Offset: 4552
.Ltmp662:
    000011cd: 	leaq	DATAat0x114c9(%rip), %rdx
    000011d4: 	movq	%r13, %rsi
    000011d7: 	movq	%rbp, %rdi
    000011da: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4570
    000011df: 	movq	%rbp, %rdx
    000011e2: 	leaq	_Z25count_half_while_pointer1IiEmPT_m(%rip), %rsi
    000011e9: 	movq	%r12, %rdi
    000011ec: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 4588
    000011f1: 	movq	0x1b0(%rsp), %rdi
    000011f9: 	cmpq	%rbx, %rdi
    000011fc: 	je	.Ltmp663 # Offset: 4604
    000011fe: 	movq	0x1c0(%rsp), %rax
    00001206: 	leaq	0x1(%rax), %rsi
    0000120a: 	callq	_ZdlPvm@PLT # Offset: 4618
.Ltmp663:
    0000120f: 	leaq	DATAat0x114e4(%rip), %rdx
    00001216: 	movq	%r13, %rsi
    00001219: 	movq	%rbp, %rdi
    0000121c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4636
    00001221: 	movq	%rbp, %rdx
    00001224: 	leaq	_Z25count_half_while_pointer2IiEmPT_m(%rip), %rsi
    0000122b: 	movq	%r12, %rdi
    0000122e: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 4654
    00001233: 	movq	0x1b0(%rsp), %rdi
    0000123b: 	cmpq	%rbx, %rdi
    0000123e: 	je	.Ltmp664 # Offset: 4670
    00001240: 	movq	0x1c0(%rsp), %rax
    00001248: 	leaq	0x1(%rax), %rsi
    0000124c: 	callq	_ZdlPvm@PLT # Offset: 4684
.Ltmp664:
    00001251: 	leaq	DATAat0x114ff(%rip), %rdx
    00001258: 	movq	%r13, %rsi
    0000125b: 	movq	%rbp, %rdi
    0000125e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4702
    00001263: 	movq	%rbp, %rdx
    00001266: 	leaq	_Z25count_half_while_pointer3IiEmPT_m(%rip), %rsi
    0000126d: 	movq	%r12, %rdi
    00001270: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 4720
    00001275: 	movq	0x1b0(%rsp), %rdi
    0000127d: 	cmpq	%rbx, %rdi
    00001280: 	je	.Ltmp665 # Offset: 4736
    00001282: 	movq	0x1c0(%rsp), %rax
    0000128a: 	leaq	0x1(%rax), %rsi
    0000128e: 	callq	_ZdlPvm@PLT # Offset: 4750
.Ltmp665:
    00001293: 	movq	0x90(%rsp), %r15
    0000129b: 	movq	0x98(%rsp), %r14
    000012a3: 	movq	%rbx, 0x1b0(%rsp)
    000012ab: 	movq	%r15, %rax
    000012ae: 	addq	%r14, %rax
    000012b1: 	je	.Ltmp666 # Offset: 4785
    000012b3: 	testq	%r15, %r15
    000012b6: 	je	.Ltmp667 # Offset: 4790
.Ltmp666:
    000012bc: 	movq	%r14, 0x70(%rsp)
    000012c1: 	cmpq	$0xf, %r14
    000012c5: 	ja	.Ltmp668 # Offset: 4805
    000012cb: 	cmpq	$0x1, %r14
    000012cf: 	jne	.Ltmp669 # Offset: 4815
    000012d5: 	movzbl	(%r15), %eax
    000012d9: 	movb	%al, 0x1c0(%rsp)
    000012e0: 	movq	%rbx, %rax
.Ltmp889:
    000012e3: 	movq	%r14, 0x1b8(%rsp)
    000012eb: 	movb	$0x0, (%rax,%r14)
    000012f0: 	movabsq	$0x3fffffffffffffff, %rax
    000012fa: 	subq	0x1b8(%rsp), %rax
    00001302: 	cmpq	$0x19, %rax
    00001306: 	jbe	.Ltmp670 # Offset: 4870
    0000130c: 	movl	$0x1a, %edx
    00001311: 	leaq	DATAat0x1151a(%rip), %rsi
    00001318: 	movq	%rbp, %rdi
    0000131b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4891
    00001320: 	movq	%rbp, %rdx
    00001323: 	leaq	_Z25count_half_while_pointer4IiEmPT_m(%rip), %rsi
    0000132a: 	movq	%r12, %rdi
    0000132d: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 4909
    00001332: 	movq	0x1b0(%rsp), %rdi
    0000133a: 	cmpq	%rbx, %rdi
    0000133d: 	je	.Ltmp671 # Offset: 4925
    0000133f: 	movq	0x1c0(%rsp), %rax
    00001347: 	leaq	0x1(%rax), %rsi
    0000134b: 	callq	_ZdlPvm@PLT # Offset: 4939
.Ltmp671:
    00001350: 	movq	0x90(%rsp), %r15
    00001358: 	movq	0x98(%rsp), %r14
    00001360: 	movq	%rbx, 0x1b0(%rsp)
    00001368: 	movq	%r15, %rax
    0000136b: 	addq	%r14, %rax
    0000136e: 	je	.Ltmp672 # Offset: 4974
    00001370: 	testq	%r15, %r15
    00001373: 	je	.Ltmp673 # Offset: 4979
.Ltmp672:
    00001379: 	movq	%r14, 0x70(%rsp)
    0000137e: 	cmpq	$0xf, %r14
    00001382: 	ja	.Ltmp674 # Offset: 4994
    00001388: 	cmpq	$0x1, %r14
    0000138c: 	jne	.Ltmp675 # Offset: 5004
    00001392: 	movzbl	(%r15), %eax
    00001396: 	movb	%al, 0x1c0(%rsp)
    0000139d: 	movq	%rbx, %rax
.Ltmp887:
    000013a0: 	movq	%r14, 0x1b8(%rsp)
    000013a8: 	movb	$0x0, (%rax,%r14)
    000013ad: 	movabsq	$0x3fffffffffffffff, %rax
    000013b7: 	subq	0x1b8(%rsp), %rax
    000013bf: 	cmpq	$0x19, %rax
    000013c3: 	jbe	.Ltmp676 # Offset: 5059
    000013c9: 	movl	$0x1a, %edx
    000013ce: 	leaq	DATAat0x11535(%rip), %rsi
    000013d5: 	movq	%rbp, %rdi
    000013d8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5080
    000013dd: 	movq	%rbp, %rdx
    000013e0: 	leaq	_Z25count_half_while_pointer5IiEmPT_m(%rip), %rsi
    000013e7: 	movq	%r12, %rdi
    000013ea: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 5098
    000013ef: 	movq	0x1b0(%rsp), %rdi
    000013f7: 	cmpq	%rbx, %rdi
    000013fa: 	je	.Ltmp677 # Offset: 5114
    000013fc: 	movq	0x1c0(%rsp), %rax
    00001404: 	leaq	0x1(%rax), %rsi
    00001408: 	callq	_ZdlPvm@PLT # Offset: 5128
.Ltmp677:
    0000140d: 	leaq	DATAat0x11550(%rip), %rdx
    00001414: 	movq	%r13, %rsi
    00001417: 	movq	%rbp, %rdi
    0000141a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5146
    0000141f: 	movq	%rbp, %rdx
    00001422: 	leaq	_Z25count_half_while_pointer6IiEmPT_m(%rip), %rsi
    00001429: 	movq	%r12, %rdi
    0000142c: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 5164
    00001431: 	movq	0x1b0(%rsp), %rdi
    00001439: 	cmpq	%rbx, %rdi
    0000143c: 	je	.Ltmp678 # Offset: 5180
    0000143e: 	movq	0x1c0(%rsp), %rax
    00001446: 	leaq	0x1(%rax), %rsi
    0000144a: 	callq	_ZdlPvm@PLT # Offset: 5194
.Ltmp678:
    0000144f: 	leaq	DATAat0x1156b(%rip), %rdx
    00001456: 	movq	%r13, %rsi
    00001459: 	movq	%rbp, %rdi
    0000145c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5212
    00001461: 	movq	%rbp, %rdx
    00001464: 	leaq	_Z25count_half_while_pointer7IiEmPT_m(%rip), %rsi
    0000146b: 	movq	%r12, %rdi
    0000146e: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 5230
    00001473: 	movq	0x1b0(%rsp), %rdi
    0000147b: 	cmpq	%rbx, %rdi
    0000147e: 	je	.Ltmp679 # Offset: 5246
    00001480: 	movq	0x1c0(%rsp), %rax
    00001488: 	leaq	0x1(%rax), %rsi
    0000148c: 	callq	_ZdlPvm@PLT # Offset: 5260
.Ltmp679:
    00001491: 	leaq	DATAat0x11586(%rip), %rdx
    00001498: 	movq	%r13, %rsi
    0000149b: 	movq	%rbp, %rdi
    0000149e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5278
    000014a3: 	movq	%rbp, %rdx
    000014a6: 	leaq	_Z25count_half_while_pointer8IiEmPT_m(%rip), %rsi
    000014ad: 	movq	%r12, %rdi
    000014b0: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 5296
    000014b5: 	movq	0x1b0(%rsp), %rdi
    000014bd: 	cmpq	%rbx, %rdi
    000014c0: 	je	.Ltmp680 # Offset: 5312
    000014c2: 	movq	0x1c0(%rsp), %rax
    000014ca: 	leaq	0x1(%rax), %rsi
    000014ce: 	callq	_ZdlPvm@PLT # Offset: 5326
.Ltmp680:
    000014d3: 	leaq	DATAat0x115a1(%rip), %rdx
    000014da: 	movq	%r13, %rsi
    000014dd: 	movq	%rbp, %rdi
    000014e0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5344
    000014e5: 	movq	%rbp, %rdx
    000014e8: 	leaq	_Z23count_half_while_index1IiEmPT_m(%rip), %rsi
    000014ef: 	movq	%r12, %rdi
    000014f2: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 5362
    000014f7: 	movq	0x1b0(%rsp), %rdi
    000014ff: 	cmpq	%rbx, %rdi
    00001502: 	je	.Ltmp681 # Offset: 5378
    00001504: 	movq	0x1c0(%rsp), %rax
    0000150c: 	leaq	0x1(%rax), %rsi
    00001510: 	callq	_ZdlPvm@PLT # Offset: 5392
.Ltmp681:
    00001515: 	leaq	DATAat0x115ba(%rip), %rdx
    0000151c: 	movq	%r13, %rsi
    0000151f: 	movq	%rbp, %rdi
    00001522: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5410
    00001527: 	movq	%rbp, %rdx
    0000152a: 	leaq	_Z23count_half_while_index2IiEmPT_m(%rip), %rsi
    00001531: 	movq	%r12, %rdi
    00001534: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 5428
    00001539: 	movq	0x1b0(%rsp), %rdi
    00001541: 	cmpq	%rbx, %rdi
    00001544: 	je	.Ltmp682 # Offset: 5444
    00001546: 	movq	0x1c0(%rsp), %rax
    0000154e: 	leaq	0x1(%rax), %rsi
    00001552: 	callq	_ZdlPvm@PLT # Offset: 5458
.Ltmp682:
    00001557: 	movq	0x90(%rsp), %r15
    0000155f: 	movq	0x98(%rsp), %r14
    00001567: 	movq	%rbx, 0x1b0(%rsp)
    0000156f: 	movq	%r15, %rax
    00001572: 	addq	%r14, %rax
    00001575: 	je	.Ltmp683 # Offset: 5493
    00001577: 	testq	%r15, %r15
    0000157a: 	je	.Ltmp684 # Offset: 5498
.Ltmp683:
    00001580: 	movq	%r14, 0x70(%rsp)
    00001585: 	cmpq	$0xf, %r14
    00001589: 	ja	.Ltmp685 # Offset: 5513
    0000158f: 	cmpq	$0x1, %r14
    00001593: 	jne	.Ltmp686 # Offset: 5523
    00001599: 	movzbl	(%r15), %eax
    0000159d: 	movb	%al, 0x1c0(%rsp)
    000015a4: 	movq	%rbx, %rax
.Ltmp885:
    000015a7: 	movq	%r14, 0x1b8(%rsp)
    000015af: 	movb	$0x0, (%rax,%r14)
    000015b4: 	movabsq	$0x3fffffffffffffff, %rax
    000015be: 	subq	0x1b8(%rsp), %rax
    000015c6: 	cmpq	$0x17, %rax
    000015ca: 	jbe	.Ltmp687 # Offset: 5578
    000015d0: 	movl	$0x18, %edx
    000015d5: 	leaq	DATAat0x115d3(%rip), %rsi
    000015dc: 	movq	%rbp, %rdi
    000015df: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5599
    000015e4: 	movq	%rbp, %rdx
    000015e7: 	leaq	_Z23count_half_while_index3IiEmPT_m(%rip), %rsi
    000015ee: 	movq	%r12, %rdi
    000015f1: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 5617
    000015f6: 	movq	0x1b0(%rsp), %rdi
    000015fe: 	cmpq	%rbx, %rdi
    00001601: 	je	.Ltmp688 # Offset: 5633
    00001603: 	movq	0x1c0(%rsp), %rax
    0000160b: 	leaq	0x1(%rax), %rsi
    0000160f: 	callq	_ZdlPvm@PLT # Offset: 5647
.Ltmp688:
    00001614: 	leaq	DATAat0x115ec(%rip), %rdx
    0000161b: 	movq	%r13, %rsi
    0000161e: 	movq	%rbp, %rdi
    00001621: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5665
    00001626: 	movq	%rbp, %rdx
    00001629: 	leaq	_Z23count_half_while_index4IiEmPT_m(%rip), %rsi
    00001630: 	movq	%r12, %rdi
    00001633: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 5683
    00001638: 	movq	0x1b0(%rsp), %rdi
    00001640: 	cmpq	%rbx, %rdi
    00001643: 	je	.Ltmp689 # Offset: 5699
    00001645: 	movq	0x1c0(%rsp), %rax
    0000164d: 	leaq	0x1(%rax), %rsi
    00001651: 	callq	_ZdlPvm@PLT # Offset: 5713
.Ltmp689:
    00001656: 	movq	0x90(%rsp), %r15
    0000165e: 	movq	0x98(%rsp), %r14
    00001666: 	movq	%rbx, 0x1b0(%rsp)
    0000166e: 	movq	%r15, %rax
    00001671: 	addq	%r14, %rax
    00001674: 	je	.Ltmp690 # Offset: 5748
    00001676: 	testq	%r15, %r15
    00001679: 	je	.Ltmp691 # Offset: 5753
.Ltmp690:
    0000167f: 	movq	%r14, 0x70(%rsp)
    00001684: 	cmpq	$0xf, %r14
    00001688: 	ja	.Ltmp692 # Offset: 5768
    0000168e: 	cmpq	$0x1, %r14
    00001692: 	jne	.Ltmp693 # Offset: 5778
    00001698: 	movzbl	(%r15), %eax
    0000169c: 	movb	%al, 0x1c0(%rsp)
    000016a3: 	movq	%rbx, %rax
.Ltmp883:
    000016a6: 	movq	%r14, 0x1b8(%rsp)
    000016ae: 	movb	$0x0, (%rax,%r14)
    000016b3: 	movabsq	$0x3fffffffffffffff, %rax
    000016bd: 	subq	0x1b8(%rsp), %rax
    000016c5: 	cmpq	$0x17, %rax
    000016c9: 	jbe	.Ltmp694 # Offset: 5833
    000016cf: 	movl	$0x18, %edx
    000016d4: 	leaq	DATAat0x11605(%rip), %rsi
    000016db: 	movq	%rbp, %rdi
    000016de: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5854
    000016e3: 	movq	%rbp, %rdx
    000016e6: 	leaq	_Z23count_half_while_index5IiEmPT_m(%rip), %rsi
    000016ed: 	movq	%r12, %rdi
    000016f0: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 5872
    000016f5: 	movq	0x1b0(%rsp), %rdi
    000016fd: 	cmpq	%rbx, %rdi
    00001700: 	je	.Ltmp695 # Offset: 5888
    00001702: 	movq	0x1c0(%rsp), %rax
    0000170a: 	leaq	0x1(%rax), %rsi
    0000170e: 	callq	_ZdlPvm@PLT # Offset: 5902
.Ltmp695:
    00001713: 	leaq	DATAat0x1161e(%rip), %rdx
    0000171a: 	movq	%r13, %rsi
    0000171d: 	movq	%rbp, %rdi
    00001720: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5920
    00001725: 	movq	%rbp, %rdx
    00001728: 	leaq	_Z23count_half_while_index6IiEmPT_m(%rip), %rsi
    0000172f: 	movq	%r12, %rdi
    00001732: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 5938
    00001737: 	movq	0x1b0(%rsp), %rdi
    0000173f: 	cmpq	%rbx, %rdi
    00001742: 	je	.Ltmp696 # Offset: 5954
    00001744: 	movq	0x1c0(%rsp), %rax
    0000174c: 	leaq	0x1(%rax), %rsi
    00001750: 	callq	_ZdlPvm@PLT # Offset: 5968
.Ltmp696:
    00001755: 	leaq	DATAat0x11637(%rip), %rdx
    0000175c: 	movq	%r13, %rsi
    0000175f: 	movq	%rbp, %rdi
    00001762: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5986
    00001767: 	movq	%rbp, %rdx
    0000176a: 	leaq	_Z23count_half_while_index7IiEmPT_m(%rip), %rsi
    00001771: 	movq	%r12, %rdi
    00001774: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 6004
    00001779: 	movq	0x1b0(%rsp), %rdi
    00001781: 	cmpq	%rbx, %rdi
    00001784: 	je	.Ltmp697 # Offset: 6020
    00001786: 	movq	0x1c0(%rsp), %rax
    0000178e: 	leaq	0x1(%rax), %rsi
    00001792: 	callq	_ZdlPvm@PLT # Offset: 6034
.Ltmp697:
    00001797: 	leaq	DATAat0x11650(%rip), %rdx
    0000179e: 	movq	%r13, %rsi
    000017a1: 	movq	%rbp, %rdi
    000017a4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6052
    000017a9: 	movq	%rbp, %rdx
    000017ac: 	leaq	_Z23count_half_while_index8IiEmPT_m(%rip), %rsi
    000017b3: 	movq	%r12, %rdi
    000017b6: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 6070
    000017bb: 	movq	0x1b0(%rsp), %rdi
    000017c3: 	cmpq	%rbx, %rdi
    000017c6: 	je	.Ltmp698 # Offset: 6086
    000017c8: 	movq	0x1c0(%rsp), %rax
    000017d0: 	leaq	0x1(%rax), %rsi
    000017d4: 	callq	_ZdlPvm@PLT # Offset: 6100
.Ltmp698:
    000017d9: 	leaq	DATAat0x11669(%rip), %rdx
    000017e0: 	movq	%r13, %rsi
    000017e3: 	movq	%rbp, %rdi
    000017e6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6118
    000017eb: 	movq	%rbp, %rdx
    000017ee: 	leaq	_Z23count_half_while_index9IiEmPT_m(%rip), %rsi
    000017f5: 	movq	%r12, %rdi
    000017f8: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 6136
    000017fd: 	movq	0x1b0(%rsp), %rdi
    00001805: 	cmpq	%rbx, %rdi
    00001808: 	je	.Ltmp699 # Offset: 6152
    0000180a: 	movq	0x1c0(%rsp), %rax
    00001812: 	leaq	0x1(%rax), %rsi
    00001816: 	callq	_ZdlPvm@PLT # Offset: 6166
.Ltmp699:
    0000181b: 	leaq	DATAat0x11682(%rip), %rdx
    00001822: 	movq	%r13, %rsi
    00001825: 	movq	%rbp, %rdi
    00001828: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6184
    0000182d: 	movq	%rbp, %rdx
    00001830: 	leaq	_Z24count_half_while_index10IiEmPT_m(%rip), %rsi
    00001837: 	movq	%r12, %rdi
    0000183a: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 6202
    0000183f: 	movq	0x1b0(%rsp), %rdi
    00001847: 	cmpq	%rbx, %rdi
    0000184a: 	je	.Ltmp700 # Offset: 6218
    0000184c: 	movq	0x1c0(%rsp), %rax
    00001854: 	leaq	0x1(%rax), %rsi
    00001858: 	callq	_ZdlPvm@PLT # Offset: 6232
.Ltmp700:
    0000185d: 	leaq	0xf0(%rsp), %rdi
    00001865: 	leaq	DATAat0x11d88(%rip), %rdx
    0000186c: 	movq	%r13, %rsi
    0000186f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6255
    00001874: 	movl	iterations(%rip), %esi
    0000187a: 	movq	0xf0(%rsp), %rdi
    00001882: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 6274
    00001887: 	movq	0x90(%rsp), %r15
    0000188f: 	movq	0x98(%rsp), %r14
    00001897: 	movq	%rbx, 0x1b0(%rsp)
    0000189f: 	movq	%r15, %rax
    000018a2: 	addq	%r14, %rax
    000018a5: 	je	.Ltmp701 # Offset: 6309
    000018a7: 	testq	%r15, %r15
    000018aa: 	je	.Ltmp702 # Offset: 6314
.Ltmp701:
    000018b0: 	movq	%r14, 0x70(%rsp)
    000018b5: 	cmpq	$0xf, %r14
    000018b9: 	ja	.Ltmp703 # Offset: 6329
    000018bf: 	cmpq	$0x1, %r14
    000018c3: 	jne	.Ltmp704 # Offset: 6339
    000018c9: 	movzbl	(%r15), %eax
    000018cd: 	movb	%al, 0x1c0(%rsp)
    000018d4: 	movq	%rbx, %rax
.Ltmp881:
    000018d7: 	movq	%r14, 0x1b8(%rsp)
    000018df: 	movb	$0x0, (%rax,%r14)
    000018e4: 	movabsq	$0x3fffffffffffffff, %rax
    000018ee: 	subq	0x1b8(%rsp), %rax
    000018f6: 	cmpq	$0x11, %rax
    000018fa: 	jbe	.Ltmp705 # Offset: 6394
    00001900: 	movl	$0x12, %edx
    00001905: 	leaq	DATAat0x1169c(%rip), %rsi
    0000190c: 	movq	%rbp, %rdi
    0000190f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 6415
    00001914: 	movq	%rbp, %rdx
    00001917: 	leaq	_Z17count_half_do_optIiEmPT_m(%rip), %rsi
    0000191e: 	movq	%r12, %rdi
    00001921: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 6433
    00001926: 	movq	0x1b0(%rsp), %rdi
    0000192e: 	cmpq	%rbx, %rdi
    00001931: 	je	.Ltmp706 # Offset: 6449
    00001933: 	movq	0x1c0(%rsp), %rax
    0000193b: 	leaq	0x1(%rax), %rsi
    0000193f: 	callq	_ZdlPvm@PLT # Offset: 6463
.Ltmp706:
    00001944: 	movq	0x90(%rsp), %r15
    0000194c: 	movq	0x98(%rsp), %r14
    00001954: 	movq	%rbx, 0x1b0(%rsp)
    0000195c: 	movq	%r15, %rax
    0000195f: 	addq	%r14, %rax
    00001962: 	je	.Ltmp707 # Offset: 6498
    00001964: 	testq	%r15, %r15
    00001967: 	je	.Ltmp708 # Offset: 6503
.Ltmp707:
    0000196d: 	movq	%r14, 0x70(%rsp)
    00001972: 	cmpq	$0xf, %r14
    00001976: 	ja	.Ltmp709 # Offset: 6518
    0000197c: 	cmpq	$0x1, %r14
    00001980: 	jne	.Ltmp710 # Offset: 6528
    00001986: 	movzbl	(%r15), %eax
    0000198a: 	movb	%al, 0x1c0(%rsp)
    00001991: 	movq	%rbx, %rax
.Ltmp901:
    00001994: 	movq	%r14, 0x1b8(%rsp)
    0000199c: 	movb	$0x0, (%rax,%r14)
    000019a1: 	movabsq	$0x3fffffffffffffff, %rax
    000019ab: 	subq	0x1b8(%rsp), %rax
    000019b3: 	cmpq	$0x14, %rax
    000019b7: 	jbe	.Ltmp711 # Offset: 6583
    000019bd: 	movl	$0x15, %edx
    000019c2: 	leaq	DATAat0x116af(%rip), %rsi
    000019c9: 	movq	%rbp, %rdi
    000019cc: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 6604
    000019d1: 	movq	%rbp, %rdx
    000019d4: 	leaq	_Z25count_half_do_uncountableIiEmPT_m(%rip), %rsi
    000019db: 	movq	%r12, %rdi
    000019de: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 6622
    000019e3: 	movq	0x1b0(%rsp), %rdi
    000019eb: 	cmpq	%rbx, %rdi
    000019ee: 	je	.Ltmp712 # Offset: 6638
    000019f0: 	movq	0x1c0(%rsp), %rax
    000019f8: 	leaq	0x1(%rax), %rsi
    000019fc: 	callq	_ZdlPvm@PLT # Offset: 6652
.Ltmp712:
    00001a01: 	movq	0x90(%rsp), %r15
    00001a09: 	movq	0x98(%rsp), %r14
    00001a11: 	movq	%rbx, 0x1b0(%rsp)
    00001a19: 	movq	%r15, %rax
    00001a1c: 	addq	%r14, %rax
    00001a1f: 	je	.Ltmp713 # Offset: 6687
    00001a21: 	testq	%r15, %r15
    00001a24: 	je	.Ltmp714 # Offset: 6692
.Ltmp713:
    00001a2a: 	movq	%r14, 0x70(%rsp)
    00001a2f: 	cmpq	$0xf, %r14
    00001a33: 	ja	.Ltmp715 # Offset: 6707
    00001a39: 	cmpq	$0x1, %r14
    00001a3d: 	jne	.Ltmp716 # Offset: 6717
    00001a43: 	movzbl	(%r15), %eax
    00001a47: 	movb	%al, 0x1c0(%rsp)
    00001a4e: 	movq	%rbx, %rax
.Ltmp899:
    00001a51: 	movq	%r14, 0x1b8(%rsp)
    00001a59: 	movb	$0x0, (%rax,%r14)
    00001a5e: 	movabsq	$0x3fffffffffffffff, %rax
    00001a68: 	subq	0x1b8(%rsp), %rax
    00001a70: 	cmpq	$0x16, %rax
    00001a74: 	jbe	.Ltmp717 # Offset: 6772
    00001a7a: 	movl	$0x17, %edx
    00001a7f: 	leaq	DATAat0x116c5(%rip), %rsi
    00001a86: 	movq	%rbp, %rdi
    00001a89: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 6793
    00001a8e: 	movq	%rbp, %rdx
    00001a91: 	leaq	_Z22count_half_do_pointer1IiEmPT_m(%rip), %rsi
    00001a98: 	movq	%r12, %rdi
    00001a9b: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 6811
    00001aa0: 	movq	0x1b0(%rsp), %rdi
    00001aa8: 	cmpq	%rbx, %rdi
    00001aab: 	je	.Ltmp718 # Offset: 6827
    00001aad: 	movq	0x1c0(%rsp), %rax
    00001ab5: 	leaq	0x1(%rax), %rsi
    00001ab9: 	callq	_ZdlPvm@PLT # Offset: 6841
.Ltmp718:
    00001abe: 	leaq	DATAat0x116dd(%rip), %rdx
    00001ac5: 	movq	%r13, %rsi
    00001ac8: 	movq	%rbp, %rdi
    00001acb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6859
    00001ad0: 	movq	%rbp, %rdx
    00001ad3: 	leaq	_Z22count_half_do_pointer2IiEmPT_m(%rip), %rsi
    00001ada: 	movq	%r12, %rdi
    00001add: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 6877
    00001ae2: 	movq	0x1b0(%rsp), %rdi
    00001aea: 	cmpq	%rbx, %rdi
    00001aed: 	je	.Ltmp719 # Offset: 6893
    00001aef: 	movq	0x1c0(%rsp), %rax
    00001af7: 	leaq	0x1(%rax), %rsi
    00001afb: 	callq	_ZdlPvm@PLT # Offset: 6907
.Ltmp719:
    00001b00: 	movq	0x90(%rsp), %r15
    00001b08: 	movq	0x98(%rsp), %r14
    00001b10: 	movq	%rbx, 0x1b0(%rsp)
    00001b18: 	movq	%r15, %rax
    00001b1b: 	addq	%r14, %rax
    00001b1e: 	je	.Ltmp720 # Offset: 6942
    00001b20: 	testq	%r15, %r15
    00001b23: 	je	.Ltmp721 # Offset: 6947
.Ltmp720:
    00001b29: 	movq	%r14, 0x70(%rsp)
    00001b2e: 	cmpq	$0xf, %r14
    00001b32: 	ja	.Ltmp722 # Offset: 6962
    00001b38: 	cmpq	$0x1, %r14
    00001b3c: 	jne	.Ltmp723 # Offset: 6972
    00001b42: 	movzbl	(%r15), %eax
    00001b46: 	movb	%al, 0x1c0(%rsp)
    00001b4d: 	movq	%rbx, %rax
.Ltmp897:
    00001b50: 	movq	%r14, 0x1b8(%rsp)
    00001b58: 	movb	$0x0, (%rax,%r14)
    00001b5d: 	movabsq	$0x3fffffffffffffff, %rax
    00001b67: 	subq	0x1b8(%rsp), %rax
    00001b6f: 	cmpq	$0x16, %rax
    00001b73: 	jbe	.Ltmp724 # Offset: 7027
    00001b79: 	movl	$0x17, %edx
    00001b7e: 	leaq	DATAat0x116f5(%rip), %rsi
    00001b85: 	movq	%rbp, %rdi
    00001b88: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 7048
    00001b8d: 	movq	%rbp, %rdx
    00001b90: 	leaq	_Z22count_half_do_pointer3IiEmPT_m(%rip), %rsi
    00001b97: 	movq	%r12, %rdi
    00001b9a: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 7066
    00001b9f: 	movq	0x1b0(%rsp), %rdi
    00001ba7: 	cmpq	%rbx, %rdi
    00001baa: 	je	.Ltmp725 # Offset: 7082
    00001bac: 	movq	0x1c0(%rsp), %rax
    00001bb4: 	leaq	0x1(%rax), %rsi
    00001bb8: 	callq	_ZdlPvm@PLT # Offset: 7096
.Ltmp725:
    00001bbd: 	leaq	DATAat0x1170d(%rip), %rdx
    00001bc4: 	movq	%r13, %rsi
    00001bc7: 	movq	%rbp, %rdi
    00001bca: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7114
    00001bcf: 	movq	%rbp, %rdx
    00001bd2: 	leaq	_Z20count_half_do_index1IiEmPT_m(%rip), %rsi
    00001bd9: 	movq	%r12, %rdi
    00001bdc: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 7132
    00001be1: 	movq	0x1b0(%rsp), %rdi
    00001be9: 	cmpq	%rbx, %rdi
    00001bec: 	je	.Ltmp726 # Offset: 7148
    00001bee: 	movq	0x1c0(%rsp), %rax
    00001bf6: 	leaq	0x1(%rax), %rsi
    00001bfa: 	callq	_ZdlPvm@PLT # Offset: 7162
.Ltmp726:
    00001bff: 	movq	0x90(%rsp), %r15
    00001c07: 	movq	0x98(%rsp), %r14
    00001c0f: 	movq	%rbx, 0x1b0(%rsp)
    00001c17: 	movq	%r15, %rax
    00001c1a: 	addq	%r14, %rax
    00001c1d: 	je	.Ltmp727 # Offset: 7197
    00001c1f: 	testq	%r15, %r15
    00001c22: 	je	.Ltmp728 # Offset: 7202
.Ltmp727:
    00001c28: 	movq	%r14, 0x70(%rsp)
    00001c2d: 	cmpq	$0xf, %r14
    00001c31: 	ja	.Ltmp729 # Offset: 7217
    00001c37: 	cmpq	$0x1, %r14
    00001c3b: 	jne	.Ltmp730 # Offset: 7227
    00001c41: 	movzbl	(%r15), %eax
    00001c45: 	movb	%al, 0x1c0(%rsp)
    00001c4c: 	movq	%rbx, %rax
.Ltmp903:
    00001c4f: 	movq	%r14, 0x1b8(%rsp)
    00001c57: 	movb	$0x0, (%rax,%r14)
    00001c5c: 	movabsq	$0x3fffffffffffffff, %rax
    00001c66: 	subq	0x1b8(%rsp), %rax
    00001c6e: 	cmpq	$0x14, %rax
    00001c72: 	jbe	.Ltmp731 # Offset: 7282
    00001c78: 	movl	$0x15, %edx
    00001c7d: 	leaq	DATAat0x11723(%rip), %rsi
    00001c84: 	movq	%rbp, %rdi
    00001c87: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 7303
    00001c8c: 	movq	%rbp, %rdx
    00001c8f: 	leaq	_Z20count_half_do_index2IiEmPT_m(%rip), %rsi
    00001c96: 	movq	%r12, %rdi
    00001c99: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 7321
    00001c9e: 	movq	0x1b0(%rsp), %rdi
    00001ca6: 	cmpq	%rbx, %rdi
    00001ca9: 	je	.Ltmp732 # Offset: 7337
    00001cab: 	movq	0x1c0(%rsp), %rax
    00001cb3: 	leaq	0x1(%rax), %rsi
    00001cb7: 	callq	_ZdlPvm@PLT # Offset: 7351
.Ltmp732:
    00001cbc: 	leaq	DATAat0x11739(%rip), %rdx
    00001cc3: 	movq	%r13, %rsi
    00001cc6: 	movq	%rbp, %rdi
    00001cc9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7369
    00001cce: 	movq	%rbp, %rdx
    00001cd1: 	leaq	_Z20count_half_do_index3IiEmPT_m(%rip), %rsi
    00001cd8: 	movq	%r12, %rdi
    00001cdb: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 7387
    00001ce0: 	movq	0x1b0(%rsp), %rdi
    00001ce8: 	cmpq	%rbx, %rdi
    00001ceb: 	je	.Ltmp733 # Offset: 7403
    00001ced: 	movq	0x1c0(%rsp), %rax
    00001cf5: 	leaq	0x1(%rax), %rsi
    00001cf9: 	callq	_ZdlPvm@PLT # Offset: 7417
.Ltmp733:
    00001cfe: 	movq	0x90(%rsp), %r15
    00001d06: 	movq	0x98(%rsp), %r14
    00001d0e: 	movq	%rbx, 0x1b0(%rsp)
    00001d16: 	movq	%r15, %rax
    00001d19: 	addq	%r14, %rax
    00001d1c: 	je	.Ltmp734 # Offset: 7452
    00001d1e: 	testq	%r15, %r15
    00001d21: 	je	.Ltmp735 # Offset: 7457
.Ltmp734:
    00001d27: 	movq	%r14, 0x70(%rsp)
    00001d2c: 	cmpq	$0xf, %r14
    00001d30: 	ja	.Ltmp736 # Offset: 7472
    00001d36: 	cmpq	$0x1, %r14
    00001d3a: 	jne	.Ltmp737 # Offset: 7482
    00001d40: 	movzbl	(%r15), %eax
    00001d44: 	movb	%al, 0x1c0(%rsp)
    00001d4b: 	movq	%rbx, %rax
.Ltmp911:
    00001d4e: 	movq	%r14, 0x1b8(%rsp)
    00001d56: 	movb	$0x0, (%rax,%r14)
    00001d5b: 	movabsq	$0x3fffffffffffffff, %rax
    00001d65: 	subq	0x1b8(%rsp), %rax
    00001d6d: 	cmpq	$0x14, %rax
    00001d71: 	jbe	.Ltmp738 # Offset: 7537
    00001d77: 	movl	$0x15, %edx
    00001d7c: 	leaq	DATAat0x1174f(%rip), %rsi
    00001d83: 	movq	%rbp, %rdi
    00001d86: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 7558
    00001d8b: 	movq	%rbp, %rdx
    00001d8e: 	leaq	_Z20count_half_do_index4IiEmPT_m(%rip), %rsi
    00001d95: 	movq	%r12, %rdi
    00001d98: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 7576
    00001d9d: 	movq	0x1b0(%rsp), %rdi
    00001da5: 	cmpq	%rbx, %rdi
    00001da8: 	je	.Ltmp739 # Offset: 7592
    00001daa: 	movq	0x1c0(%rsp), %rax
    00001db2: 	leaq	0x1(%rax), %rsi
    00001db6: 	callq	_ZdlPvm@PLT # Offset: 7606
.Ltmp739:
    00001dbb: 	movq	0x90(%rsp), %r15
    00001dc3: 	movq	0x98(%rsp), %r14
    00001dcb: 	movq	%rbx, 0x1b0(%rsp)
    00001dd3: 	movq	%r15, %rax
    00001dd6: 	addq	%r14, %rax
    00001dd9: 	je	.Ltmp740 # Offset: 7641
    00001ddb: 	testq	%r15, %r15
    00001dde: 	je	.Ltmp741 # Offset: 7646
.Ltmp740:
    00001de4: 	movq	%r14, 0x70(%rsp)
    00001de9: 	cmpq	$0xf, %r14
    00001ded: 	ja	.Ltmp742 # Offset: 7661
    00001df3: 	cmpq	$0x1, %r14
    00001df7: 	jne	.Ltmp743 # Offset: 7671
    00001dfd: 	movzbl	(%r15), %eax
    00001e01: 	movb	%al, 0x1c0(%rsp)
    00001e08: 	movq	%rbx, %rax
.Ltmp909:
    00001e0b: 	movq	%r14, 0x1b8(%rsp)
    00001e13: 	movb	$0x0, (%rax,%r14)
    00001e18: 	movabsq	$0x3fffffffffffffff, %rax
    00001e22: 	subq	0x1b8(%rsp), %rax
    00001e2a: 	cmpq	$0x14, %rax
    00001e2e: 	jbe	.Ltmp744 # Offset: 7726
    00001e34: 	movl	$0x15, %edx
    00001e39: 	leaq	DATAat0x11765(%rip), %rsi
    00001e40: 	movq	%rbp, %rdi
    00001e43: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 7747
    00001e48: 	movq	%rbp, %rdx
    00001e4b: 	leaq	_Z20count_half_do_index5IiEmPT_m(%rip), %rsi
    00001e52: 	movq	%r12, %rdi
    00001e55: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 7765
    00001e5a: 	movq	0x1b0(%rsp), %rdi
    00001e62: 	cmpq	%rbx, %rdi
    00001e65: 	je	.Ltmp745 # Offset: 7781
    00001e67: 	movq	0x1c0(%rsp), %rax
    00001e6f: 	leaq	0x1(%rax), %rsi
    00001e73: 	callq	_ZdlPvm@PLT # Offset: 7795
.Ltmp745:
    00001e78: 	movq	0x90(%rsp), %r15
    00001e80: 	leaq	0x120(%rsp), %rax
    00001e88: 	movq	0x98(%rsp), %r14
    00001e90: 	movq	%rax, 0x10(%rsp)
    00001e95: 	movq	%rax, 0x110(%rsp)
    00001e9d: 	movq	%r15, %rax
    00001ea0: 	addq	%r14, %rax
    00001ea3: 	je	.Ltmp746 # Offset: 7843
    00001ea5: 	testq	%r15, %r15
    00001ea8: 	je	.Ltmp747 # Offset: 7848
.Ltmp746:
    00001eae: 	movq	%r14, 0x70(%rsp)
    00001eb3: 	cmpq	$0xf, %r14
    00001eb7: 	ja	.Ltmp748 # Offset: 7863
    00001ebd: 	cmpq	$0x1, %r14
    00001ec1: 	jne	.Ltmp749 # Offset: 7873
    00001ec7: 	movzbl	(%r15), %eax
    00001ecb: 	movb	%al, 0x120(%rsp)
    00001ed2: 	movq	0x10(%rsp), %rax
.Ltmp907:
    00001ed7: 	movq	%r14, 0x118(%rsp)
    00001edf: 	movb	$0x0, (%rax,%r14)
    00001ee4: 	movabsq	$0x3fffffffffffffff, %rax
    00001eee: 	subq	0x118(%rsp), %rax
    00001ef6: 	cmpq	$0x1c, %rax
    00001efa: 	jbe	.Ltmp750 # Offset: 7930
    00001f00: 	leaq	0x110(%rsp), %rdi
    00001f08: 	movl	$0x1d, %edx
    00001f0d: 	leaq	DATAat0x1177b(%rip), %rsi
    00001f14: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 7956
    00001f19: 	movl	iterations(%rip), %esi
    00001f1f: 	movq	0x110(%rsp), %rdi
    00001f27: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 7975
    00001f2c: 	leaq	DATAat0x11799(%rip), %rdx
    00001f33: 	movq	%r13, %rsi
    00001f36: 	movq	%rbp, %rdi
    00001f39: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7993
    00001f3e: 	movq	%rbp, %rdx
    00001f41: 	leaq	_Z19count_half_goto_optIiEmPT_m(%rip), %rsi
    00001f48: 	movq	%r12, %rdi
    00001f4b: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 8011
    00001f50: 	movq	0x1b0(%rsp), %rdi
    00001f58: 	cmpq	%rbx, %rdi
    00001f5b: 	je	.Ltmp751 # Offset: 8027
    00001f5d: 	movq	0x1c0(%rsp), %rax
    00001f65: 	leaq	0x1(%rax), %rsi
    00001f69: 	callq	_ZdlPvm@PLT # Offset: 8041
.Ltmp751:
    00001f6e: 	leaq	DATAat0x117ae(%rip), %rdx
    00001f75: 	movq	%r13, %rsi
    00001f78: 	movq	%rbp, %rdi
    00001f7b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8059
    00001f80: 	movq	%rbp, %rdx
    00001f83: 	leaq	_Z27count_half_goto_uncountableIiEmPT_m(%rip), %rsi
    00001f8a: 	movq	%r12, %rdi
    00001f8d: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 8077
    00001f92: 	movq	0x1b0(%rsp), %rdi
    00001f9a: 	cmpq	%rbx, %rdi
    00001f9d: 	je	.Ltmp752 # Offset: 8093
    00001f9f: 	movq	0x1c0(%rsp), %rax
    00001fa7: 	leaq	0x1(%rax), %rsi
    00001fab: 	callq	_ZdlPvm@PLT # Offset: 8107
.Ltmp752:
    00001fb0: 	leaq	DATAat0x117c6(%rip), %rdx
    00001fb7: 	movq	%r13, %rsi
    00001fba: 	movq	%rbp, %rdi
    00001fbd: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8125
    00001fc2: 	movq	%rbp, %rdx
    00001fc5: 	leaq	_Z24count_half_goto_pointer1IiEmPT_m(%rip), %rsi
    00001fcc: 	movq	%r12, %rdi
    00001fcf: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 8143
    00001fd4: 	movq	0x1b0(%rsp), %rdi
    00001fdc: 	cmpq	%rbx, %rdi
    00001fdf: 	je	.Ltmp753 # Offset: 8159
    00001fe1: 	movq	0x1c0(%rsp), %rax
    00001fe9: 	leaq	0x1(%rax), %rsi
    00001fed: 	callq	_ZdlPvm@PLT # Offset: 8173
.Ltmp753:
    00001ff2: 	movq	0x90(%rsp), %r15
    00001ffa: 	movq	0x98(%rsp), %r14
    00002002: 	movq	%rbx, 0x1b0(%rsp)
    0000200a: 	movq	%r15, %rax
    0000200d: 	addq	%r14, %rax
    00002010: 	je	.Ltmp754 # Offset: 8208
    00002012: 	testq	%r15, %r15
    00002015: 	je	.Ltmp755 # Offset: 8213
.Ltmp754:
    0000201b: 	movq	%r14, 0x70(%rsp)
    00002020: 	cmpq	$0xf, %r14
    00002024: 	ja	.Ltmp756 # Offset: 8228
    0000202a: 	cmpq	$0x1, %r14
    0000202e: 	jne	.Ltmp757 # Offset: 8238
    00002034: 	movzbl	(%r15), %eax
    00002038: 	movb	%al, 0x1c0(%rsp)
    0000203f: 	movq	%rbx, %rax
.Ltmp905:
    00002042: 	movq	%r14, 0x1b8(%rsp)
    0000204a: 	movb	$0x0, (%rax,%r14)
    0000204f: 	movabsq	$0x3fffffffffffffff, %rax
    00002059: 	subq	0x1b8(%rsp), %rax
    00002061: 	cmpq	$0x18, %rax
    00002065: 	jbe	.Ltmp758 # Offset: 8293
    0000206b: 	movl	$0x19, %edx
    00002070: 	leaq	DATAat0x117e0(%rip), %rsi
    00002077: 	movq	%rbp, %rdi
    0000207a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 8314
    0000207f: 	movq	%rbp, %rdx
    00002082: 	leaq	_Z24count_half_goto_pointer2IiEmPT_m(%rip), %rsi
    00002089: 	movq	%r12, %rdi
    0000208c: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 8332
    00002091: 	movq	0x1b0(%rsp), %rdi
    00002099: 	cmpq	%rbx, %rdi
    0000209c: 	je	.Ltmp759 # Offset: 8348
    0000209e: 	movq	0x1c0(%rsp), %rax
    000020a6: 	leaq	0x1(%rax), %rsi
    000020aa: 	callq	_ZdlPvm@PLT # Offset: 8362
.Ltmp759:
    000020af: 	leaq	DATAat0x117fa(%rip), %rdx
    000020b6: 	movq	%r13, %rsi
    000020b9: 	movq	%rbp, %rdi
    000020bc: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8380
    000020c1: 	movq	%rbp, %rdx
    000020c4: 	leaq	_Z24count_half_goto_pointer3IiEmPT_m(%rip), %rsi
    000020cb: 	movq	%r12, %rdi
    000020ce: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 8398
    000020d3: 	movq	0x1b0(%rsp), %rdi
    000020db: 	cmpq	%rbx, %rdi
    000020de: 	je	.Ltmp760 # Offset: 8414
    000020e0: 	movq	0x1c0(%rsp), %rax
    000020e8: 	leaq	0x1(%rax), %rsi
    000020ec: 	callq	_ZdlPvm@PLT # Offset: 8428
.Ltmp760:
    000020f1: 	movq	0x90(%rsp), %r15
    000020f9: 	movq	0x98(%rsp), %r14
    00002101: 	movq	%rbx, 0x1b0(%rsp)
    00002109: 	movq	%r15, %rax
    0000210c: 	addq	%r14, %rax
    0000210f: 	je	.Ltmp761 # Offset: 8463
    00002111: 	testq	%r15, %r15
    00002114: 	je	.Ltmp762 # Offset: 8468
.Ltmp761:
    0000211a: 	movq	%r14, 0x70(%rsp)
    0000211f: 	cmpq	$0xf, %r14
    00002123: 	ja	.Ltmp763 # Offset: 8483
    00002129: 	cmpq	$0x1, %r14
    0000212d: 	jne	.Ltmp764 # Offset: 8493
    00002133: 	movzbl	(%r15), %eax
    00002137: 	movb	%al, 0x1c0(%rsp)
    0000213e: 	movq	%rbx, %rax
.Ltmp925:
    00002141: 	movq	%r14, 0x1b8(%rsp)
    00002149: 	movb	$0x0, (%rax,%r14)
    0000214e: 	movabsq	$0x3fffffffffffffff, %rax
    00002158: 	subq	0x1b8(%rsp), %rax
    00002160: 	cmpq	$0x16, %rax
    00002164: 	jbe	.Ltmp765 # Offset: 8548
    0000216a: 	movl	$0x17, %edx
    0000216f: 	leaq	DATAat0x11814(%rip), %rsi
    00002176: 	movq	%rbp, %rdi
    00002179: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 8569
    0000217e: 	movq	%rbp, %rdx
    00002181: 	leaq	_Z22count_half_goto_index1IiEmPT_m(%rip), %rsi
    00002188: 	movq	%r12, %rdi
    0000218b: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 8587
    00002190: 	movq	0x1b0(%rsp), %rdi
    00002198: 	cmpq	%rbx, %rdi
    0000219b: 	je	.Ltmp766 # Offset: 8603
    0000219d: 	movq	0x1c0(%rsp), %rax
    000021a5: 	leaq	0x1(%rax), %rsi
    000021a9: 	callq	_ZdlPvm@PLT # Offset: 8617
.Ltmp766:
    000021ae: 	leaq	DATAat0x1182c(%rip), %rdx
    000021b5: 	movq	%r13, %rsi
    000021b8: 	movq	%rbp, %rdi
    000021bb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8635
    000021c0: 	movq	%rbp, %rdx
    000021c3: 	leaq	_Z22count_half_goto_index2IiEmPT_m(%rip), %rsi
    000021ca: 	movq	%r12, %rdi
    000021cd: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 8653
    000021d2: 	movq	0x1b0(%rsp), %rdi
    000021da: 	cmpq	%rbx, %rdi
    000021dd: 	je	.Ltmp767 # Offset: 8669
    000021df: 	movq	0x1c0(%rsp), %rax
    000021e7: 	leaq	0x1(%rax), %rsi
    000021eb: 	callq	_ZdlPvm@PLT # Offset: 8683
.Ltmp767:
    000021f0: 	movq	0x90(%rsp), %r15
    000021f8: 	movq	0x98(%rsp), %r14
    00002200: 	movq	%rbx, 0x1b0(%rsp)
    00002208: 	movq	%r15, %rax
    0000220b: 	addq	%r14, %rax
    0000220e: 	je	.Ltmp768 # Offset: 8718
    00002210: 	testq	%r15, %r15
    00002213: 	je	.Ltmp769 # Offset: 8723
.Ltmp768:
    00002219: 	movq	%r14, 0x70(%rsp)
    0000221e: 	cmpq	$0xf, %r14
    00002222: 	ja	.Ltmp770 # Offset: 8738
    00002228: 	cmpq	$0x1, %r14
    0000222c: 	jne	.Ltmp771 # Offset: 8748
    00002232: 	movzbl	(%r15), %eax
    00002236: 	movb	%al, 0x1c0(%rsp)
    0000223d: 	movq	%rbx, %rax
.Ltmp923:
    00002240: 	movq	%r14, 0x1b8(%rsp)
    00002248: 	movb	$0x0, (%rax,%r14)
    0000224d: 	movabsq	$0x3fffffffffffffff, %rax
    00002257: 	subq	0x1b8(%rsp), %rax
    0000225f: 	cmpq	$0x16, %rax
    00002263: 	jbe	.Ltmp772 # Offset: 8803
    00002269: 	movl	$0x17, %edx
    0000226e: 	leaq	DATAat0x11844(%rip), %rsi
    00002275: 	movq	%rbp, %rdi
    00002278: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 8824
    0000227d: 	movq	%rbp, %rdx
    00002280: 	leaq	_Z22count_half_goto_index3IiEmPT_m(%rip), %rsi
    00002287: 	movq	%r12, %rdi
    0000228a: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 8842
    0000228f: 	movq	0x1b0(%rsp), %rdi
    00002297: 	cmpq	%rbx, %rdi
    0000229a: 	je	.Ltmp773 # Offset: 8858
    0000229c: 	movq	0x1c0(%rsp), %rax
    000022a4: 	leaq	0x1(%rax), %rsi
    000022a8: 	callq	_ZdlPvm@PLT # Offset: 8872
.Ltmp773:
    000022ad: 	leaq	DATAat0x1185c(%rip), %rdx
    000022b4: 	movq	%r13, %rsi
    000022b7: 	movq	%rbp, %rdi
    000022ba: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8890
    000022bf: 	movq	%rbp, %rdx
    000022c2: 	leaq	_Z22count_half_goto_index4IiEmPT_m(%rip), %rsi
    000022c9: 	movq	%r12, %rdi
    000022cc: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 8908
    000022d1: 	movq	0x1b0(%rsp), %rdi
    000022d9: 	cmpq	%rbx, %rdi
    000022dc: 	je	.Ltmp774 # Offset: 8924
    000022de: 	movq	0x1c0(%rsp), %rax
    000022e6: 	leaq	0x1(%rax), %rsi
    000022ea: 	callq	_ZdlPvm@PLT # Offset: 8938
.Ltmp774:
    000022ef: 	leaq	DATAat0x11874(%rip), %rdx
    000022f6: 	movq	%r13, %rsi
    000022f9: 	movq	%rbp, %rdi
    000022fc: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8956
    00002301: 	movq	%rbp, %rdx
    00002304: 	leaq	_Z22count_half_goto_index5IiEmPT_m(%rip), %rsi
    0000230b: 	movq	%r12, %rdi
    0000230e: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 8974
    00002313: 	movq	0x1b0(%rsp), %rdi
    0000231b: 	cmpq	%rbx, %rdi
    0000231e: 	je	.Ltmp775 # Offset: 8990
    00002320: 	movq	0x1c0(%rsp), %rax
    00002328: 	leaq	0x1(%rax), %rsi
    0000232c: 	callq	_ZdlPvm@PLT # Offset: 9004
.Ltmp775:
    00002331: 	leaq	0x130(%rsp), %rdi
    00002339: 	leaq	DATAat0x11db0(%rip), %rdx
    00002340: 	movq	%r13, %rsi
    00002343: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9027
    00002348: 	movl	iterations(%rip), %esi
    0000234e: 	movq	0x130(%rsp), %rdi
    00002356: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 9046
    0000235b: 	movq	0x90(%rsp), %r15
    00002363: 	movq	0x98(%rsp), %r14
    0000236b: 	movq	%rbx, 0x1b0(%rsp)
    00002373: 	movq	%r15, %rax
    00002376: 	addq	%r14, %rax
    00002379: 	je	.Ltmp776 # Offset: 9081
    0000237b: 	testq	%r15, %r15
    0000237e: 	je	.Ltmp777 # Offset: 9086
.Ltmp776:
    00002384: 	movq	%r14, 0x70(%rsp)
    00002389: 	cmpq	$0xf, %r14
    0000238d: 	ja	.Ltmp778 # Offset: 9101
    00002393: 	cmpq	$0x1, %r14
    00002397: 	jne	.Ltmp779 # Offset: 9111
    0000239d: 	movzbl	(%r15), %eax
    000023a1: 	movb	%al, 0x1c0(%rsp)
    000023a8: 	movq	%rbx, %rax
.Ltmp921:
    000023ab: 	movq	%r14, 0x1b8(%rsp)
    000023b3: 	movb	$0x0, (%rax,%r14)
    000023b8: 	movabsq	$0x3fffffffffffffff, %rax
    000023c2: 	subq	0x1b8(%rsp), %rax
    000023ca: 	cmpq	$0x14, %rax
    000023ce: 	jbe	.Ltmp780 # Offset: 9166
    000023d4: 	movl	$0x15, %edx
    000023d9: 	leaq	DATAat0x1188c(%rip), %rsi
    000023e0: 	movq	%rbp, %rdi
    000023e3: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 9187
    000023e8: 	movq	%rbp, %rdx
    000023eb: 	leaq	_Z20count_half_goto2_optIiEmPT_m(%rip), %rsi
    000023f2: 	movq	%r12, %rdi
    000023f5: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 9205
    000023fa: 	movq	0x1b0(%rsp), %rdi
    00002402: 	cmpq	%rbx, %rdi
    00002405: 	je	.Ltmp781 # Offset: 9221
    00002407: 	movq	0x1c0(%rsp), %rax
    0000240f: 	leaq	0x1(%rax), %rsi
    00002413: 	callq	_ZdlPvm@PLT # Offset: 9235
.Ltmp781:
    00002418: 	leaq	DATAat0x118a2(%rip), %rdx
    0000241f: 	movq	%r13, %rsi
    00002422: 	movq	%rbp, %rdi
    00002425: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9253
    0000242a: 	movq	%rbp, %rdx
    0000242d: 	leaq	_Z28count_half_goto2_uncountableIiEmPT_m(%rip), %rsi
    00002434: 	movq	%r12, %rdi
    00002437: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 9271
    0000243c: 	movq	0x1b0(%rsp), %rdi
    00002444: 	cmpq	%rbx, %rdi
    00002447: 	je	.Ltmp782 # Offset: 9287
    00002449: 	movq	0x1c0(%rsp), %rax
    00002451: 	leaq	0x1(%rax), %rsi
    00002455: 	callq	_ZdlPvm@PLT # Offset: 9301
.Ltmp782:
    0000245a: 	leaq	DATAat0x118bb(%rip), %rdx
    00002461: 	movq	%r13, %rsi
    00002464: 	movq	%rbp, %rdi
    00002467: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9319
    0000246c: 	movq	%rbp, %rdx
    0000246f: 	leaq	_Z25count_half_goto2_pointer1IiEmPT_m(%rip), %rsi
    00002476: 	movq	%r12, %rdi
    00002479: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 9337
    0000247e: 	movq	0x1b0(%rsp), %rdi
    00002486: 	cmpq	%rbx, %rdi
    00002489: 	je	.Ltmp783 # Offset: 9353
    0000248b: 	movq	0x1c0(%rsp), %rax
    00002493: 	leaq	0x1(%rax), %rsi
    00002497: 	callq	_ZdlPvm@PLT # Offset: 9367
.Ltmp783:
    0000249c: 	leaq	DATAat0x118d6(%rip), %rdx
    000024a3: 	movq	%r13, %rsi
    000024a6: 	movq	%rbp, %rdi
    000024a9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9385
    000024ae: 	movq	%rbp, %rdx
    000024b1: 	leaq	_Z25count_half_goto2_pointer2IiEmPT_m(%rip), %rsi
    000024b8: 	movq	%r12, %rdi
    000024bb: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 9403
    000024c0: 	movq	0x1b0(%rsp), %rdi
    000024c8: 	cmpq	%rbx, %rdi
    000024cb: 	je	.Ltmp784 # Offset: 9419
    000024cd: 	movq	0x1c0(%rsp), %rax
    000024d5: 	leaq	0x1(%rax), %rsi
    000024d9: 	callq	_ZdlPvm@PLT # Offset: 9433
.Ltmp784:
    000024de: 	leaq	DATAat0x118f1(%rip), %rdx
    000024e5: 	movq	%r13, %rsi
    000024e8: 	movq	%rbp, %rdi
    000024eb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9451
    000024f0: 	movq	%rbp, %rdx
    000024f3: 	leaq	_Z25count_half_goto2_pointer3IiEmPT_m(%rip), %rsi
    000024fa: 	movq	%r12, %rdi
    000024fd: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 9469
    00002502: 	movq	0x1b0(%rsp), %rdi
    0000250a: 	cmpq	%rbx, %rdi
    0000250d: 	je	.Ltmp785 # Offset: 9485
    0000250f: 	movq	0x1c0(%rsp), %rax
    00002517: 	leaq	0x1(%rax), %rsi
    0000251b: 	callq	_ZdlPvm@PLT # Offset: 9499
.Ltmp785:
    00002520: 	movq	0x90(%rsp), %r15
    00002528: 	movq	0x98(%rsp), %r14
    00002530: 	movq	%rbx, 0x1b0(%rsp)
    00002538: 	movq	%r15, %rax
    0000253b: 	addq	%r14, %rax
    0000253e: 	je	.Ltmp786 # Offset: 9534
    00002540: 	testq	%r15, %r15
    00002543: 	je	.Ltmp787 # Offset: 9539
.Ltmp786:
    00002549: 	movq	%r14, 0x70(%rsp)
    0000254e: 	cmpq	$0xf, %r14
    00002552: 	ja	.Ltmp788 # Offset: 9554
    00002558: 	cmpq	$0x1, %r14
    0000255c: 	jne	.Ltmp789 # Offset: 9564
    00002562: 	movzbl	(%r15), %eax
    00002566: 	movb	%al, 0x1c0(%rsp)
    0000256d: 	movq	%rbx, %rax
.Ltmp919:
    00002570: 	movq	%r14, 0x1b8(%rsp)
    00002578: 	movb	$0x0, (%rax,%r14)
    0000257d: 	movabsq	$0x3fffffffffffffff, %rax
    00002587: 	subq	0x1b8(%rsp), %rax
    0000258f: 	cmpq	$0x17, %rax
    00002593: 	jbe	.Ltmp790 # Offset: 9619
    00002599: 	movl	$0x18, %edx
    0000259e: 	leaq	DATAat0x1190c(%rip), %rsi
    000025a5: 	movq	%rbp, %rdi
    000025a8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 9640
    000025ad: 	movq	%rbp, %rdx
    000025b0: 	leaq	_Z23count_half_goto2_index1IiEmPT_m(%rip), %rsi
    000025b7: 	movq	%r12, %rdi
    000025ba: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 9658
    000025bf: 	movq	0x1b0(%rsp), %rdi
    000025c7: 	cmpq	%rbx, %rdi
    000025ca: 	je	.Ltmp791 # Offset: 9674
    000025cc: 	movq	0x1c0(%rsp), %rax
    000025d4: 	leaq	0x1(%rax), %rsi
    000025d8: 	callq	_ZdlPvm@PLT # Offset: 9688
.Ltmp791:
    000025dd: 	leaq	DATAat0x11925(%rip), %rdx
    000025e4: 	movq	%r13, %rsi
    000025e7: 	movq	%rbp, %rdi
    000025ea: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9706
    000025ef: 	movq	%rbp, %rdx
    000025f2: 	leaq	_Z23count_half_goto2_index2IiEmPT_m(%rip), %rsi
    000025f9: 	movq	%r12, %rdi
    000025fc: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 9724
    00002601: 	movq	0x1b0(%rsp), %rdi
    00002609: 	cmpq	%rbx, %rdi
    0000260c: 	je	.Ltmp792 # Offset: 9740
    0000260e: 	movq	0x1c0(%rsp), %rax
    00002616: 	leaq	0x1(%rax), %rsi
    0000261a: 	callq	_ZdlPvm@PLT # Offset: 9754
.Ltmp792:
    0000261f: 	leaq	DATAat0x1193e(%rip), %rdx
    00002626: 	movq	%r13, %rsi
    00002629: 	movq	%rbp, %rdi
    0000262c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9772
    00002631: 	movq	%rbp, %rdx
    00002634: 	leaq	_Z23count_half_goto2_index3IiEmPT_m(%rip), %rsi
    0000263b: 	movq	%r12, %rdi
    0000263e: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 9790
    00002643: 	movq	0x1b0(%rsp), %rdi
    0000264b: 	cmpq	%rbx, %rdi
    0000264e: 	je	.Ltmp793 # Offset: 9806
    00002650: 	movq	0x1c0(%rsp), %rax
    00002658: 	leaq	0x1(%rax), %rsi
    0000265c: 	callq	_ZdlPvm@PLT # Offset: 9820
.Ltmp793:
    00002661: 	leaq	DATAat0x11957(%rip), %rdx
    00002668: 	movq	%r13, %rsi
    0000266b: 	movq	%rbp, %rdi
    0000266e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9838
    00002673: 	movq	%rbp, %rdx
    00002676: 	leaq	_Z23count_half_goto2_index4IiEmPT_m(%rip), %rsi
    0000267d: 	movq	%r12, %rdi
    00002680: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 9856
    00002685: 	movq	0x1b0(%rsp), %rdi
    0000268d: 	cmpq	%rbx, %rdi
    00002690: 	je	.Ltmp794 # Offset: 9872
    00002692: 	movq	0x1c0(%rsp), %rax
    0000269a: 	leaq	0x1(%rax), %rsi
    0000269e: 	callq	_ZdlPvm@PLT # Offset: 9886
.Ltmp794:
    000026a3: 	leaq	DATAat0x11970(%rip), %rdx
    000026aa: 	movq	%r13, %rsi
    000026ad: 	movq	%rbp, %rdi
    000026b0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9904
    000026b5: 	movq	%rbp, %rdx
    000026b8: 	leaq	_Z23count_half_goto2_index5IiEmPT_m(%rip), %rsi
    000026bf: 	movq	%r12, %rdi
    000026c2: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 9922
    000026c7: 	movq	0x1b0(%rsp), %rdi
    000026cf: 	cmpq	%rbx, %rdi
    000026d2: 	je	.Ltmp795 # Offset: 9938
    000026d4: 	movq	0x1c0(%rsp), %rax
    000026dc: 	leaq	0x1(%rax), %rsi
    000026e0: 	callq	_ZdlPvm@PLT # Offset: 9952
.Ltmp795:
    000026e5: 	leaq	0x150(%rsp), %rdi
    000026ed: 	leaq	DATAat0x11dd0(%rip), %rdx
    000026f4: 	movq	%r13, %rsi
    000026f7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9975
    000026fc: 	movl	iterations(%rip), %esi
    00002702: 	movq	0x150(%rsp), %rdi
    0000270a: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 9994
    0000270f: 	leaq	DATAat0x11989(%rip), %rdx
    00002716: 	movq	%r13, %rsi
    00002719: 	movq	%rbp, %rdi
    0000271c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10012
    00002721: 	movq	%rbp, %rdx
    00002724: 	leaq	_Z20count_half_goto3_optIiEmPT_m(%rip), %rsi
    0000272b: 	movq	%r12, %rdi
    0000272e: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 10030
    00002733: 	movq	0x1b0(%rsp), %rdi
    0000273b: 	cmpq	%rbx, %rdi
    0000273e: 	je	.Ltmp796 # Offset: 10046
    00002740: 	movq	0x1c0(%rsp), %rax
    00002748: 	leaq	0x1(%rax), %rsi
    0000274c: 	callq	_ZdlPvm@PLT # Offset: 10060
.Ltmp796:
    00002751: 	leaq	DATAat0x1199f(%rip), %rdx
    00002758: 	movq	%r13, %rsi
    0000275b: 	movq	%rbp, %rdi
    0000275e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10078
    00002763: 	movq	%rbp, %rdx
    00002766: 	leaq	_Z28count_half_goto3_uncountableIiEmPT_m(%rip), %rsi
    0000276d: 	movq	%r12, %rdi
    00002770: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 10096
    00002775: 	movq	0x1b0(%rsp), %rdi
    0000277d: 	cmpq	%rbx, %rdi
    00002780: 	je	.Ltmp797 # Offset: 10112
    00002782: 	movq	0x1c0(%rsp), %rax
    0000278a: 	leaq	0x1(%rax), %rsi
    0000278e: 	callq	_ZdlPvm@PLT # Offset: 10126
.Ltmp797:
    00002793: 	movq	0x90(%rsp), %r15
    0000279b: 	movq	0x98(%rsp), %r14
    000027a3: 	movq	%rbx, 0x1b0(%rsp)
    000027ab: 	movq	%r15, %rax
    000027ae: 	addq	%r14, %rax
    000027b1: 	je	.Ltmp798 # Offset: 10161
    000027b3: 	testq	%r15, %r15
    000027b6: 	je	.Ltmp799 # Offset: 10166
.Ltmp798:
    000027bc: 	movq	%r14, 0x70(%rsp)
    000027c1: 	cmpq	$0xf, %r14
    000027c5: 	ja	.Ltmp800 # Offset: 10181
    000027cb: 	cmpq	$0x1, %r14
    000027cf: 	jne	.Ltmp801 # Offset: 10191
    000027d5: 	movzbl	(%r15), %eax
    000027d9: 	movb	%al, 0x1c0(%rsp)
    000027e0: 	movq	%rbx, %rax
.Ltmp917:
    000027e3: 	movq	%r14, 0x1b8(%rsp)
    000027eb: 	movb	$0x0, (%rax,%r14)
    000027f0: 	movabsq	$0x3fffffffffffffff, %rax
    000027fa: 	subq	0x1b8(%rsp), %rax
    00002802: 	cmpq	$0x19, %rax
    00002806: 	jbe	.Ltmp802 # Offset: 10246
    0000280c: 	movl	$0x1a, %edx
    00002811: 	leaq	DATAat0x119b8(%rip), %rsi
    00002818: 	movq	%rbp, %rdi
    0000281b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 10267
    00002820: 	movq	%rbp, %rdx
    00002823: 	leaq	_Z25count_half_goto3_pointer1IiEmPT_m(%rip), %rsi
    0000282a: 	movq	%r12, %rdi
    0000282d: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 10285
    00002832: 	movq	0x1b0(%rsp), %rdi
    0000283a: 	cmpq	%rbx, %rdi
    0000283d: 	je	.Ltmp803 # Offset: 10301
    0000283f: 	movq	0x1c0(%rsp), %rax
    00002847: 	leaq	0x1(%rax), %rsi
    0000284b: 	callq	_ZdlPvm@PLT # Offset: 10315
.Ltmp803:
    00002850: 	leaq	DATAat0x119d3(%rip), %rdx
    00002857: 	movq	%r13, %rsi
    0000285a: 	movq	%rbp, %rdi
    0000285d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10333
    00002862: 	movq	%rbp, %rdx
    00002865: 	leaq	_Z25count_half_goto3_pointer2IiEmPT_m(%rip), %rsi
    0000286c: 	movq	%r12, %rdi
    0000286f: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 10351
    00002874: 	movq	0x1b0(%rsp), %rdi
    0000287c: 	cmpq	%rbx, %rdi
    0000287f: 	je	.Ltmp804 # Offset: 10367
    00002881: 	movq	0x1c0(%rsp), %rax
    00002889: 	leaq	0x1(%rax), %rsi
    0000288d: 	callq	_ZdlPvm@PLT # Offset: 10381
.Ltmp804:
    00002892: 	leaq	DATAat0x119ee(%rip), %rdx
    00002899: 	movq	%r13, %rsi
    0000289c: 	movq	%rbp, %rdi
    0000289f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10399
    000028a4: 	movq	%rbp, %rdx
    000028a7: 	leaq	_Z25count_half_goto3_pointer3IiEmPT_m(%rip), %rsi
    000028ae: 	movq	%r12, %rdi
    000028b1: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 10417
    000028b6: 	movq	0x1b0(%rsp), %rdi
    000028be: 	cmpq	%rbx, %rdi
    000028c1: 	je	.Ltmp805 # Offset: 10433
    000028c3: 	movq	0x1c0(%rsp), %rax
    000028cb: 	leaq	0x1(%rax), %rsi
    000028cf: 	callq	_ZdlPvm@PLT # Offset: 10447
.Ltmp805:
    000028d4: 	leaq	DATAat0x11a09(%rip), %rdx
    000028db: 	movq	%r13, %rsi
    000028de: 	movq	%rbp, %rdi
    000028e1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10465
    000028e6: 	movq	%rbp, %rdx
    000028e9: 	leaq	_Z23count_half_goto3_index1IiEmPT_m(%rip), %rsi
    000028f0: 	movq	%r12, %rdi
    000028f3: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 10483
    000028f8: 	movq	0x1b0(%rsp), %rdi
    00002900: 	cmpq	%rbx, %rdi
    00002903: 	je	.Ltmp806 # Offset: 10499
    00002905: 	movq	0x1c0(%rsp), %rax
    0000290d: 	leaq	0x1(%rax), %rsi
    00002911: 	callq	_ZdlPvm@PLT # Offset: 10513
.Ltmp806:
    00002916: 	leaq	DATAat0x11a22(%rip), %rdx
    0000291d: 	movq	%r13, %rsi
    00002920: 	movq	%rbp, %rdi
    00002923: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10531
    00002928: 	movq	%rbp, %rdx
    0000292b: 	leaq	_Z23count_half_goto3_index2IiEmPT_m(%rip), %rsi
    00002932: 	movq	%r12, %rdi
    00002935: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 10549
    0000293a: 	movq	0x1b0(%rsp), %rdi
    00002942: 	cmpq	%rbx, %rdi
    00002945: 	je	.Ltmp807 # Offset: 10565
    00002947: 	movq	0x1c0(%rsp), %rax
    0000294f: 	leaq	0x1(%rax), %rsi
    00002953: 	callq	_ZdlPvm@PLT # Offset: 10579
.Ltmp807:
    00002958: 	leaq	DATAat0x11a3b(%rip), %rdx
    0000295f: 	movq	%r13, %rsi
    00002962: 	movq	%rbp, %rdi
    00002965: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10597
    0000296a: 	movq	%rbp, %rdx
    0000296d: 	leaq	_Z23count_half_goto3_index3IiEmPT_m(%rip), %rsi
    00002974: 	movq	%r12, %rdi
    00002977: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 10615
    0000297c: 	movq	0x1b0(%rsp), %rdi
    00002984: 	cmpq	%rbx, %rdi
    00002987: 	je	.Ltmp808 # Offset: 10631
    00002989: 	movq	0x1c0(%rsp), %rax
    00002991: 	leaq	0x1(%rax), %rsi
    00002995: 	callq	_ZdlPvm@PLT # Offset: 10645
.Ltmp808:
    0000299a: 	leaq	DATAat0x11a54(%rip), %rdx
    000029a1: 	movq	%r13, %rsi
    000029a4: 	movq	%rbp, %rdi
    000029a7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10663
    000029ac: 	movq	%rbp, %rdx
    000029af: 	leaq	_Z23count_half_goto3_index4IiEmPT_m(%rip), %rsi
    000029b6: 	movq	%r12, %rdi
    000029b9: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 10681
    000029be: 	movq	0x1b0(%rsp), %rdi
    000029c6: 	cmpq	%rbx, %rdi
    000029c9: 	je	.Ltmp809 # Offset: 10697
    000029cb: 	movq	0x1c0(%rsp), %rax
    000029d3: 	leaq	0x1(%rax), %rsi
    000029d7: 	callq	_ZdlPvm@PLT # Offset: 10711
.Ltmp809:
    000029dc: 	leaq	DATAat0x11a6d(%rip), %rdx
    000029e3: 	movq	%r13, %rsi
    000029e6: 	movq	%rbp, %rdi
    000029e9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10729
    000029ee: 	movq	%rbp, %rdx
    000029f1: 	leaq	_Z23count_half_goto3_index5IiEmPT_m(%rip), %rsi
    000029f8: 	movq	%r12, %rdi
    000029fb: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 10747
    00002a00: 	movq	0x1b0(%rsp), %rdi
    00002a08: 	cmpq	%rbx, %rdi
    00002a0b: 	je	.Ltmp810 # Offset: 10763
    00002a0d: 	movq	0x1c0(%rsp), %rax
    00002a15: 	leaq	0x1(%rax), %rsi
    00002a19: 	callq	_ZdlPvm@PLT # Offset: 10777
.Ltmp810:
    00002a1e: 	leaq	0x170(%rsp), %rdi
    00002a26: 	leaq	DATAat0x11df8(%rip), %rdx
    00002a2d: 	movq	%r13, %rsi
    00002a30: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10800
    00002a35: 	movl	iterations(%rip), %esi
    00002a3b: 	movq	0x170(%rsp), %rdi
    00002a43: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 10819
    00002a48: 	leaq	DATAat0x11a86(%rip), %rdx
    00002a4f: 	movq	%r13, %rsi
    00002a52: 	movq	%rbp, %rdi
    00002a55: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10837
    00002a5a: 	movq	%rbp, %rdx
    00002a5d: 	leaq	_Z20count_half_goto4_optIiEmPT_m(%rip), %rsi
    00002a64: 	movq	%r12, %rdi
    00002a67: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 10855
    00002a6c: 	movq	0x1b0(%rsp), %rdi
    00002a74: 	cmpq	%rbx, %rdi
    00002a77: 	je	.Ltmp811 # Offset: 10871
    00002a79: 	movq	0x1c0(%rsp), %rax
    00002a81: 	leaq	0x1(%rax), %rsi
    00002a85: 	callq	_ZdlPvm@PLT # Offset: 10885
.Ltmp811:
    00002a8a: 	leaq	DATAat0x11a9c(%rip), %rdx
    00002a91: 	movq	%r13, %rsi
    00002a94: 	movq	%rbp, %rdi
    00002a97: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10903
    00002a9c: 	movq	%rbp, %rdx
    00002a9f: 	leaq	_Z28count_half_goto4_uncountableIiEmPT_m(%rip), %rsi
    00002aa6: 	movq	%r12, %rdi
    00002aa9: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 10921
    00002aae: 	movq	0x1b0(%rsp), %rdi
    00002ab6: 	cmpq	%rbx, %rdi
    00002ab9: 	je	.Ltmp812 # Offset: 10937
    00002abb: 	movq	0x1c0(%rsp), %rax
    00002ac3: 	leaq	0x1(%rax), %rsi
    00002ac7: 	callq	_ZdlPvm@PLT # Offset: 10951
.Ltmp812:
    00002acc: 	leaq	DATAat0x11ab5(%rip), %rdx
    00002ad3: 	movq	%r13, %rsi
    00002ad6: 	movq	%rbp, %rdi
    00002ad9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10969
    00002ade: 	movq	%rbp, %rdx
    00002ae1: 	leaq	_Z25count_half_goto4_pointer1IiEmPT_m(%rip), %rsi
    00002ae8: 	movq	%r12, %rdi
    00002aeb: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 10987
    00002af0: 	movq	0x1b0(%rsp), %rdi
    00002af8: 	cmpq	%rbx, %rdi
    00002afb: 	je	.Ltmp813 # Offset: 11003
    00002afd: 	movq	0x1c0(%rsp), %rax
    00002b05: 	leaq	0x1(%rax), %rsi
    00002b09: 	callq	_ZdlPvm@PLT # Offset: 11017
.Ltmp813:
    00002b0e: 	leaq	DATAat0x11ad0(%rip), %rdx
    00002b15: 	movq	%r13, %rsi
    00002b18: 	movq	%rbp, %rdi
    00002b1b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11035
    00002b20: 	movq	%rbp, %rdx
    00002b23: 	leaq	_Z25count_half_goto4_pointer2IiEmPT_m(%rip), %rsi
    00002b2a: 	movq	%r12, %rdi
    00002b2d: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 11053
    00002b32: 	movq	0x1b0(%rsp), %rdi
    00002b3a: 	cmpq	%rbx, %rdi
    00002b3d: 	je	.Ltmp814 # Offset: 11069
    00002b3f: 	movq	0x1c0(%rsp), %rax
    00002b47: 	leaq	0x1(%rax), %rsi
    00002b4b: 	callq	_ZdlPvm@PLT # Offset: 11083
.Ltmp814:
    00002b50: 	movq	0x90(%rsp), %r15
    00002b58: 	movq	0x98(%rsp), %r14
    00002b60: 	movq	%rbx, 0x1b0(%rsp)
    00002b68: 	movq	%r15, %rax
    00002b6b: 	addq	%r14, %rax
    00002b6e: 	je	.Ltmp815 # Offset: 11118
    00002b70: 	testq	%r15, %r15
    00002b73: 	je	.Ltmp816 # Offset: 11123
.Ltmp815:
    00002b79: 	movq	%r14, 0x70(%rsp)
    00002b7e: 	cmpq	$0xf, %r14
    00002b82: 	ja	.Ltmp817 # Offset: 11138
    00002b88: 	cmpq	$0x1, %r14
    00002b8c: 	jne	.Ltmp818 # Offset: 11148
    00002b92: 	movzbl	(%r15), %eax
    00002b96: 	movb	%al, 0x1c0(%rsp)
    00002b9d: 	movq	%rbx, %rax
.Ltmp915:
    00002ba0: 	movq	%r14, 0x1b8(%rsp)
    00002ba8: 	movb	$0x0, (%rax,%r14)
    00002bad: 	movabsq	$0x3fffffffffffffff, %rax
    00002bb7: 	subq	0x1b8(%rsp), %rax
    00002bbf: 	cmpq	$0x19, %rax
    00002bc3: 	jbe	.Ltmp819 # Offset: 11203
    00002bc9: 	movl	$0x1a, %edx
    00002bce: 	leaq	DATAat0x11aeb(%rip), %rsi
    00002bd5: 	movq	%rbp, %rdi
    00002bd8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 11224
    00002bdd: 	movq	%rbp, %rdx
    00002be0: 	leaq	_Z25count_half_goto4_pointer3IiEmPT_m(%rip), %rsi
    00002be7: 	movq	%r12, %rdi
    00002bea: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 11242
    00002bef: 	movq	0x1b0(%rsp), %rdi
    00002bf7: 	cmpq	%rbx, %rdi
    00002bfa: 	je	.Ltmp820 # Offset: 11258
    00002bfc: 	movq	0x1c0(%rsp), %rax
    00002c04: 	leaq	0x1(%rax), %rsi
    00002c08: 	callq	_ZdlPvm@PLT # Offset: 11272
.Ltmp820:
    00002c0d: 	leaq	DATAat0x11b06(%rip), %rdx
    00002c14: 	movq	%r13, %rsi
    00002c17: 	movq	%rbp, %rdi
    00002c1a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11290
    00002c1f: 	movq	%rbp, %rdx
    00002c22: 	leaq	_Z23count_half_goto4_index1IiEmPT_m(%rip), %rsi
    00002c29: 	movq	%r12, %rdi
    00002c2c: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 11308
    00002c31: 	movq	0x1b0(%rsp), %rdi
    00002c39: 	cmpq	%rbx, %rdi
    00002c3c: 	je	.Ltmp821 # Offset: 11324
    00002c3e: 	movq	0x1c0(%rsp), %rax
    00002c46: 	leaq	0x1(%rax), %rsi
    00002c4a: 	callq	_ZdlPvm@PLT # Offset: 11338
.Ltmp821:
    00002c4f: 	leaq	DATAat0x11b1f(%rip), %rdx
    00002c56: 	movq	%r13, %rsi
    00002c59: 	movq	%rbp, %rdi
    00002c5c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11356
    00002c61: 	movq	%rbp, %rdx
    00002c64: 	leaq	_Z23count_half_goto4_index2IiEmPT_m(%rip), %rsi
    00002c6b: 	movq	%r12, %rdi
    00002c6e: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 11374
    00002c73: 	movq	0x1b0(%rsp), %rdi
    00002c7b: 	cmpq	%rbx, %rdi
    00002c7e: 	je	.Ltmp822 # Offset: 11390
    00002c80: 	movq	0x1c0(%rsp), %rax
    00002c88: 	leaq	0x1(%rax), %rsi
    00002c8c: 	callq	_ZdlPvm@PLT # Offset: 11404
.Ltmp822:
    00002c91: 	leaq	DATAat0x11b38(%rip), %rdx
    00002c98: 	movq	%r13, %rsi
    00002c9b: 	movq	%rbp, %rdi
    00002c9e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11422
    00002ca3: 	movq	%rbp, %rdx
    00002ca6: 	leaq	_Z23count_half_goto4_index3IiEmPT_m(%rip), %rsi
    00002cad: 	movq	%r12, %rdi
    00002cb0: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 11440
    00002cb5: 	movq	0x1b0(%rsp), %rdi
    00002cbd: 	cmpq	%rbx, %rdi
    00002cc0: 	je	.Ltmp823 # Offset: 11456
    00002cc2: 	movq	0x1c0(%rsp), %rax
    00002cca: 	leaq	0x1(%rax), %rsi
    00002cce: 	callq	_ZdlPvm@PLT # Offset: 11470
.Ltmp823:
    00002cd3: 	leaq	DATAat0x11b51(%rip), %rdx
    00002cda: 	movq	%r13, %rsi
    00002cdd: 	movq	%rbp, %rdi
    00002ce0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11488
    00002ce5: 	movq	%rbp, %rdx
    00002ce8: 	leaq	_Z23count_half_goto4_index4IiEmPT_m(%rip), %rsi
    00002cef: 	movq	%r12, %rdi
    00002cf2: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 11506
    00002cf7: 	movq	0x1b0(%rsp), %rdi
    00002cff: 	cmpq	%rbx, %rdi
    00002d02: 	je	.Ltmp824 # Offset: 11522
    00002d04: 	movq	0x1c0(%rsp), %rax
    00002d0c: 	leaq	0x1(%rax), %rsi
    00002d10: 	callq	_ZdlPvm@PLT # Offset: 11536
.Ltmp824:
    00002d15: 	movq	0x90(%rsp), %r15
    00002d1d: 	movq	0x98(%rsp), %r14
    00002d25: 	movq	%rbx, 0x1b0(%rsp)
    00002d2d: 	movq	%r15, %rax
    00002d30: 	addq	%r14, %rax
    00002d33: 	je	.Ltmp825 # Offset: 11571
    00002d35: 	testq	%r15, %r15
    00002d38: 	je	.Ltmp826 # Offset: 11576
.Ltmp825:
    00002d3e: 	movq	%r14, 0x70(%rsp)
    00002d43: 	cmpq	$0xf, %r14
    00002d47: 	ja	.Ltmp827 # Offset: 11591
    00002d4d: 	cmpq	$0x1, %r14
    00002d51: 	jne	.Ltmp828 # Offset: 11601
    00002d57: 	movzbl	(%r15), %eax
    00002d5b: 	movb	%al, 0x1c0(%rsp)
    00002d62: 	movq	%rbx, %rax
.Ltmp913:
    00002d65: 	movq	%r14, 0x1b8(%rsp)
    00002d6d: 	movb	$0x0, (%rax,%r14)
    00002d72: 	movabsq	$0x3fffffffffffffff, %rax
    00002d7c: 	subq	0x1b8(%rsp), %rax
    00002d84: 	cmpq	$0x17, %rax
    00002d88: 	jbe	.Ltmp829 # Offset: 11656
    00002d8e: 	movl	$0x18, %edx
    00002d93: 	leaq	DATAat0x11b6a(%rip), %rsi
    00002d9a: 	movq	%rbp, %rdi
    00002d9d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 11677
    00002da2: 	movq	%rbp, %rdx
    00002da5: 	leaq	_Z23count_half_goto4_index5IiEmPT_m(%rip), %rsi
    00002dac: 	movq	%r12, %rdi
    00002daf: 	callq	"_Z15test_count_halfIPiPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 11695
    00002db4: 	movq	0x1b0(%rsp), %rdi
    00002dbc: 	cmpq	%rbx, %rdi
    00002dbf: 	je	.Ltmp830 # Offset: 11711
    00002dc1: 	movq	0x1c0(%rsp), %rax
    00002dc9: 	leaq	0x1(%rax), %rsi
    00002dcd: 	callq	_ZdlPvm@PLT # Offset: 11725
.Ltmp830:
    00002dd2: 	leaq	0x190(%rsp), %rdi
    00002dda: 	leaq	DATAat0x11e20(%rip), %rdx
    00002de1: 	movq	%r13, %rsi
    00002de4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11748
    00002de9: 	movl	iterations(%rip), %esi
    00002def: 	movq	0x190(%rsp), %rdi
    00002df7: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 11767
    00002dfc: 	leaq	DATAat0x11b83(%rip), %rdx
    00002e03: 	movq	%r13, %rsi
    00002e06: 	movq	%rbp, %rdi
    00002e09: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11785
    00002e0e: 	pxor	%xmm0, %xmm0
    00002e12: 	movl	$0x3e80, %edi
    00002e17: 	movq	$0x0, 0x80(%rsp)
    00002e23: 	movaps	%xmm0, 0x70(%rsp)
    00002e28: 	callq	_Znwm@PLT # Offset: 11816
    00002e2d: 	movq	0x8(%rsp), %rsi
    00002e32: 	leaq	0x3e80(%rax), %r12
    00002e39: 	movq	%rax, %rdi
    00002e3c: 	movl	$0x3e80, %edx
    00002e41: 	leaq	0x70(%rsp), %r14
    00002e46: 	movq	%rax, 0x70(%rsp)
    00002e4b: 	movq	%r12, 0x80(%rsp)
    00002e53: 	callq	memcpy@PLT # Offset: 11859
    00002e58: 	movq	%rbp, %rdx
    00002e5b: 	movq	%r14, %rdi
    00002e5e: 	movq	%r12, 0x78(%rsp)
    00002e63: 	leaq	_Z23count_half_forrange_optISt6vectorIiSaIiEEEmRKT_m(%rip), %rsi
    00002e6a: 	callq	"_Z15test_count_halfISt6vectorIiSaIiEEPFmRKS2_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 11882
    00002e6f: 	movq	0x70(%rsp), %rdi
    00002e74: 	testq	%rdi, %rdi
    00002e77: 	je	.Ltmp831 # Offset: 11895
    00002e79: 	movq	0x80(%rsp), %rsi
    00002e81: 	subq	%rdi, %rsi
    00002e84: 	callq	_ZdlPvm@PLT # Offset: 11908
.Ltmp831:
    00002e89: 	movq	0x1b0(%rsp), %rdi
    00002e91: 	cmpq	%rbx, %rdi
    00002e94: 	je	.Ltmp832 # Offset: 11924
    00002e96: 	movq	0x1c0(%rsp), %rax
    00002e9e: 	leaq	0x1(%rax), %rsi
    00002ea2: 	callq	_ZdlPvm@PLT # Offset: 11938
.Ltmp832:
    00002ea7: 	leaq	DATAat0x11b9d(%rip), %rdx
    00002eae: 	movq	%r13, %rsi
    00002eb1: 	movq	%rbp, %rdi
    00002eb4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11956
    00002eb9: 	pxor	%xmm0, %xmm0
    00002ebd: 	movl	$0x3e80, %edi
    00002ec2: 	movq	$0x0, 0x80(%rsp)
    00002ece: 	movaps	%xmm0, 0x70(%rsp)
    00002ed3: 	callq	_Znwm@PLT # Offset: 11987
    00002ed8: 	movq	0x8(%rsp), %rsi
    00002edd: 	leaq	0x3e80(%rax), %r12
    00002ee4: 	movq	%rax, %rdi
    00002ee7: 	movl	$0x3e80, %edx
    00002eec: 	movq	%rax, 0x70(%rsp)
    00002ef1: 	movq	%r12, 0x80(%rsp)
    00002ef9: 	callq	memcpy@PLT # Offset: 12025
    00002efe: 	movq	%rbp, %rdx
    00002f01: 	movq	%r14, %rdi
    00002f04: 	movq	%r12, 0x78(%rsp)
    00002f09: 	leaq	_Z24count_half_forrange_opt2ISt6vectorIiSaIiEEEmRKT_m(%rip), %rsi
    00002f10: 	callq	"_Z15test_count_halfISt6vectorIiSaIiEEPFmRKS2_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 12048
    00002f15: 	movq	0x70(%rsp), %rdi
    00002f1a: 	testq	%rdi, %rdi
    00002f1d: 	je	.Ltmp833 # Offset: 12061
    00002f1f: 	movq	0x80(%rsp), %rsi
    00002f27: 	subq	%rdi, %rsi
    00002f2a: 	callq	_ZdlPvm@PLT # Offset: 12074
.Ltmp833:
    00002f2f: 	movq	0x1b0(%rsp), %rdi
    00002f37: 	cmpq	%rbx, %rdi
    00002f3a: 	je	.Ltmp834 # Offset: 12090
    00002f3c: 	movq	0x1c0(%rsp), %rax
    00002f44: 	leaq	0x1(%rax), %rsi
    00002f48: 	callq	_ZdlPvm@PLT # Offset: 12104
.Ltmp834:
    00002f4d: 	movq	0x90(%rsp), %r15
    00002f55: 	movq	0x98(%rsp), %r12
    00002f5d: 	movq	%rbx, 0x1b0(%rsp)
    00002f65: 	movq	%r15, %rax
    00002f68: 	addq	%r12, %rax
    00002f6b: 	je	.Ltmp835 # Offset: 12139
    00002f6d: 	testq	%r15, %r15
    00002f70: 	je	.Ltmp836 # Offset: 12144
.Ltmp835:
    00002f76: 	movq	%r12, 0x70(%rsp)
    00002f7b: 	cmpq	$0xf, %r12
    00002f7f: 	ja	.Ltmp837 # Offset: 12159
    00002f85: 	cmpq	$0x1, %r12
    00002f89: 	jne	.Ltmp838 # Offset: 12169
    00002f8f: 	movzbl	(%r15), %eax
    00002f93: 	movb	%al, 0x1c0(%rsp)
    00002f9a: 	movq	%rbx, %rax
.Ltmp930:
    00002f9d: 	movq	%r12, 0x1b8(%rsp)
    00002fa5: 	movb	$0x0, (%rax,%r12)
    00002faa: 	movabsq	$0x3fffffffffffffff, %rax
    00002fb4: 	subq	0x1b8(%rsp), %rax
    00002fbc: 	cmpq	$0x10, %rax
    00002fc0: 	jbe	.Ltmp839 # Offset: 12224
    00002fc6: 	movl	$0x11, %edx
    00002fcb: 	leaq	DATAat0x11bb8(%rip), %rsi
    00002fd2: 	movq	%rbp, %rdi
    00002fd5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 12245
    00002fda: 	pxor	%xmm0, %xmm0
    00002fde: 	movl	$0x3e80, %edi
    00002fe3: 	movq	$0x0, 0x80(%rsp)
    00002fef: 	movaps	%xmm0, 0x70(%rsp)
    00002ff4: 	callq	_Znwm@PLT # Offset: 12276
    00002ff9: 	movq	0x8(%rsp), %rsi
    00002ffe: 	leaq	0x3e80(%rax), %r12
    00003005: 	movq	%rax, %rdi
    00003008: 	movl	$0x3e80, %edx
    0000300d: 	movq	%rax, 0x70(%rsp)
    00003012: 	movq	%r12, 0x80(%rsp)
    0000301a: 	callq	memcpy@PLT # Offset: 12314
    0000301f: 	movq	%rbp, %rdx
    00003022: 	movq	%r14, %rdi
    00003025: 	movq	%r12, 0x78(%rsp)
    0000302a: 	leaq	_Z31count_half_forrange_uncountableISt6vectorIiSaIiEEEmRKT_m(%rip), %rsi
    00003031: 	callq	"_Z15test_count_halfISt6vectorIiSaIiEEPFmRKS2_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 12337
    00003036: 	movq	0x70(%rsp), %rdi
    0000303b: 	testq	%rdi, %rdi
    0000303e: 	je	.Ltmp840 # Offset: 12350
    00003040: 	movq	0x80(%rsp), %rsi
    00003048: 	subq	%rdi, %rsi
    0000304b: 	callq	_ZdlPvm@PLT # Offset: 12363
.Ltmp840:
    00003050: 	movq	0x1b0(%rsp), %rdi
    00003058: 	cmpq	%rbx, %rdi
    0000305b: 	je	.Ltmp841 # Offset: 12379
    0000305d: 	movq	0x1c0(%rsp), %rax
    00003065: 	leaq	0x1(%rax), %rsi
    00003069: 	callq	_ZdlPvm@PLT # Offset: 12393
.Ltmp841:
    0000306e: 	leaq	DATAat0x11bca(%rip), %rdx
    00003075: 	movq	%r13, %rsi
    00003078: 	movq	%rbp, %rdi
    0000307b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12411
    00003080: 	pxor	%xmm0, %xmm0
    00003084: 	movl	$0x3e80, %edi
    00003089: 	movq	$0x0, 0x80(%rsp)
    00003095: 	movaps	%xmm0, 0x70(%rsp)
    0000309a: 	callq	_Znwm@PLT # Offset: 12442
    0000309f: 	movq	0x8(%rsp), %rsi
    000030a4: 	leaq	0x3e80(%rax), %r12
    000030ab: 	movq	%rax, %rdi
    000030ae: 	movl	$0x3e80, %edx
    000030b3: 	movq	%rax, 0x70(%rsp)
    000030b8: 	movq	%r12, 0x80(%rsp)
    000030c0: 	callq	memcpy@PLT # Offset: 12480
    000030c5: 	movq	%rbp, %rdx
    000030c8: 	movq	%r14, %rdi
    000030cb: 	movq	%r12, 0x78(%rsp)
    000030d0: 	leaq	_Z20count_half_forrange1ISt6vectorIiSaIiEEEmRKT_m(%rip), %rsi
    000030d7: 	callq	"_Z15test_count_halfISt6vectorIiSaIiEEPFmRKS2_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 12503
    000030dc: 	movq	0x70(%rsp), %rdi
    000030e1: 	testq	%rdi, %rdi
    000030e4: 	je	.Ltmp842 # Offset: 12516
    000030e6: 	movq	0x80(%rsp), %rsi
    000030ee: 	subq	%rdi, %rsi
    000030f1: 	callq	_ZdlPvm@PLT # Offset: 12529
.Ltmp842:
    000030f6: 	movq	0x1b0(%rsp), %rdi
    000030fe: 	cmpq	%rbx, %rdi
    00003101: 	je	.Ltmp843 # Offset: 12545
    00003103: 	movq	0x1c0(%rsp), %rax
    0000310b: 	leaq	0x1(%rax), %rsi
    0000310f: 	callq	_ZdlPvm@PLT # Offset: 12559
.Ltmp843:
    00003114: 	leaq	DATAat0x11be8(%rip), %rdx
    0000311b: 	movq	%r13, %rsi
    0000311e: 	movq	%rbp, %rdi
    00003121: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12577
    00003126: 	pxor	%xmm0, %xmm0
    0000312a: 	movl	$0x3e80, %edi
    0000312f: 	movq	$0x0, 0x80(%rsp)
    0000313b: 	movaps	%xmm0, 0x70(%rsp)
    00003140: 	callq	_Znwm@PLT # Offset: 12608
    00003145: 	movq	0x8(%rsp), %rsi
    0000314a: 	leaq	0x3e80(%rax), %r12
    00003151: 	movq	%rax, %rdi
    00003154: 	movl	$0x3e80, %edx
    00003159: 	movq	%rax, 0x70(%rsp)
    0000315e: 	movq	%r12, 0x80(%rsp)
    00003166: 	callq	memcpy@PLT # Offset: 12646
    0000316b: 	movq	%rbp, %rdx
    0000316e: 	movq	%r14, %rdi
    00003171: 	movq	%r12, 0x78(%rsp)
    00003176: 	leaq	_Z20count_half_forrange2ISt6vectorIiSaIiEEEmRKT_m(%rip), %rsi
    0000317d: 	callq	"_Z15test_count_halfISt6vectorIiSaIiEEPFmRKS2_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 12669
    00003182: 	movq	0x70(%rsp), %rdi
    00003187: 	testq	%rdi, %rdi
    0000318a: 	je	.Ltmp844 # Offset: 12682
    0000318c: 	movq	0x80(%rsp), %rsi
    00003194: 	subq	%rdi, %rsi
    00003197: 	callq	_ZdlPvm@PLT # Offset: 12695
.Ltmp844:
    0000319c: 	movq	0x1b0(%rsp), %rdi
    000031a4: 	cmpq	%rbx, %rdi
    000031a7: 	je	.Ltmp845 # Offset: 12711
    000031a9: 	movq	0x1c0(%rsp), %rax
    000031b1: 	leaq	0x1(%rax), %rsi
    000031b5: 	callq	_ZdlPvm@PLT # Offset: 12725
.Ltmp845:
    000031ba: 	movq	0x90(%rsp), %r13
    000031c2: 	movq	0x98(%rsp), %r12
    000031ca: 	movq	%rbx, 0x1b0(%rsp)
    000031d2: 	movq	%r13, %rax
    000031d5: 	addq	%r12, %rax
    000031d8: 	je	.Ltmp846 # Offset: 12760
    000031da: 	testq	%r13, %r13
    000031dd: 	je	.Ltmp847 # Offset: 12765
.Ltmp846:
    000031e3: 	movq	%r12, 0x70(%rsp)
    000031e8: 	cmpq	$0xf, %r12
    000031ec: 	ja	.Ltmp848 # Offset: 12780
    000031f2: 	cmpq	$0x1, %r12
    000031f6: 	jne	.Ltmp849 # Offset: 12790
    000031fc: 	movzbl	(%r13), %eax
    00003201: 	movb	%al, 0x1c0(%rsp)
    00003208: 	movq	%rbx, %rax
.Ltmp932:
    0000320b: 	movq	%r12, 0x1b8(%rsp)
    00003213: 	movb	$0x0, (%rax,%r12)
    00003218: 	movabsq	$0x3fffffffffffffff, %rax
    00003222: 	subq	0x1b8(%rsp), %rax
    0000322a: 	cmpq	$0x1c, %rax
    0000322e: 	jbe	.Ltmp850 # Offset: 12846
    00003234: 	movl	$0x1d, %edx
    00003239: 	leaq	DATAat0x11c06(%rip), %rsi
    00003240: 	movq	%rbp, %rdi
    00003243: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 12867
    00003248: 	pxor	%xmm0, %xmm0
    0000324c: 	movl	$0x3e80, %edi
    00003251: 	movq	$0x0, 0x80(%rsp)
    0000325d: 	movaps	%xmm0, 0x70(%rsp)
    00003262: 	callq	_Znwm@PLT # Offset: 12898
    00003267: 	movq	0x8(%rsp), %rsi
    0000326c: 	leaq	0x3e80(%rax), %r12
    00003273: 	movq	%rax, %rdi
    00003276: 	movl	$0x3e80, %edx
    0000327b: 	movq	%rax, 0x70(%rsp)
    00003280: 	movq	%r12, 0x80(%rsp)
    00003288: 	callq	memcpy@PLT # Offset: 12936
    0000328d: 	movq	%rbp, %rdx
    00003290: 	movq	%r14, %rdi
    00003293: 	movq	%r12, 0x78(%rsp)
    00003298: 	leaq	_Z20count_half_forrange3ISt6vectorIiSaIiEEEmRKT_m(%rip), %rsi
    0000329f: 	callq	"_Z15test_count_halfISt6vectorIiSaIiEEPFmRKS2_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 12959
    000032a4: 	movq	0x70(%rsp), %rdi
    000032a9: 	testq	%rdi, %rdi
    000032ac: 	je	.Ltmp851 # Offset: 12972
    000032ae: 	movq	0x80(%rsp), %rsi
    000032b6: 	subq	%rdi, %rsi
    000032b9: 	callq	_ZdlPvm@PLT # Offset: 12985
.Ltmp851:
    000032be: 	movq	0x1b0(%rsp), %rdi
    000032c6: 	cmpq	%rbx, %rdi
    000032c9: 	je	.Ltmp852 # Offset: 13001
    000032cb: 	movq	0x1c0(%rsp), %rax
    000032d3: 	leaq	0x1(%rax), %rsi
    000032d7: 	callq	_ZdlPvm@PLT # Offset: 13015
.Ltmp852:
    000032dc: 	movq	0x90(%rsp), %r13
    000032e4: 	movq	0x98(%rsp), %r12
    000032ec: 	movq	%rbx, 0x1b0(%rsp)
    000032f4: 	movq	%r13, %rax
    000032f7: 	addq	%r12, %rax
    000032fa: 	je	.Ltmp853 # Offset: 13050
    000032fc: 	testq	%r13, %r13
    000032ff: 	je	.Ltmp854 # Offset: 13055
.Ltmp853:
    00003305: 	movq	%r12, 0x70(%rsp)
    0000330a: 	cmpq	$0xf, %r12
    0000330e: 	ja	.Ltmp855 # Offset: 13070
    00003314: 	cmpq	$0x1, %r12
    00003318: 	jne	.Ltmp856 # Offset: 13080
    0000331e: 	movzbl	(%r13), %eax
    00003323: 	movb	%al, 0x1c0(%rsp)
    0000332a: 	movq	%rbx, %rax
.Ltmp933:
    0000332d: 	movq	%r12, 0x1b8(%rsp)
    00003335: 	movb	$0x0, (%rax,%r12)
    0000333a: 	movabsq	$0x3fffffffffffffff, %rax
    00003344: 	subq	0x1b8(%rsp), %rax
    0000334c: 	cmpq	$0x23, %rax
    00003350: 	jbe	.Ltmp857 # Offset: 13136
    00003356: 	movl	$0x24, %edx
    0000335b: 	leaq	DATAat0x11e48(%rip), %rsi
    00003362: 	movq	%rbp, %rdi
    00003365: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 13157
    0000336a: 	movl	iterations(%rip), %esi
    00003370: 	movq	0x1b0(%rsp), %rdi
    00003378: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 13176
    0000337d: 	movq	0x1b0(%rsp), %rdi
    00003385: 	cmpq	%rbx, %rdi
    00003388: 	je	.Ltmp858 # Offset: 13192
    0000338a: 	movq	0x1c0(%rsp), %rax
    00003392: 	leaq	0x1(%rax), %rsi
    00003396: 	callq	_ZdlPvm@PLT # Offset: 13206
.Ltmp858:
    0000339b: 	movq	0x190(%rsp), %rdi
    000033a3: 	leaq	0x1a0(%rsp), %rax
    000033ab: 	cmpq	%rax, %rdi
    000033ae: 	je	.Ltmp859 # Offset: 13230
    000033b0: 	movq	0x1a0(%rsp), %rax
    000033b8: 	leaq	0x1(%rax), %rsi
    000033bc: 	callq	_ZdlPvm@PLT # Offset: 13244
.Ltmp859:
    000033c1: 	movq	0x170(%rsp), %rdi
    000033c9: 	leaq	0x180(%rsp), %rax
    000033d1: 	cmpq	%rax, %rdi
    000033d4: 	je	.Ltmp860 # Offset: 13268
    000033d6: 	movq	0x180(%rsp), %rax
    000033de: 	leaq	0x1(%rax), %rsi
    000033e2: 	callq	_ZdlPvm@PLT # Offset: 13282
.Ltmp860:
    000033e7: 	movq	0x150(%rsp), %rdi
    000033ef: 	leaq	0x160(%rsp), %rax
    000033f7: 	cmpq	%rax, %rdi
    000033fa: 	je	.Ltmp861 # Offset: 13306
    000033fc: 	movq	0x160(%rsp), %rax
    00003404: 	leaq	0x1(%rax), %rsi
    00003408: 	callq	_ZdlPvm@PLT # Offset: 13320
.Ltmp861:
    0000340d: 	movq	0x130(%rsp), %rdi
    00003415: 	leaq	0x140(%rsp), %rax
    0000341d: 	cmpq	%rax, %rdi
    00003420: 	je	.Ltmp862 # Offset: 13344
    00003422: 	movq	0x140(%rsp), %rax
    0000342a: 	leaq	0x1(%rax), %rsi
    0000342e: 	callq	_ZdlPvm@PLT # Offset: 13358
.Ltmp862:
    00003433: 	movq	0x110(%rsp), %rdi
    0000343b: 	cmpq	0x10(%rsp), %rdi
    00003440: 	je	.Ltmp863 # Offset: 13376
    00003442: 	movq	0x120(%rsp), %rax
    0000344a: 	leaq	0x1(%rax), %rsi
    0000344e: 	callq	_ZdlPvm@PLT # Offset: 13390
.Ltmp863:
    00003453: 	movq	0xf0(%rsp), %rdi
    0000345b: 	leaq	0x100(%rsp), %rax
    00003463: 	cmpq	%rax, %rdi
    00003466: 	je	.Ltmp864 # Offset: 13414
    00003468: 	movq	0x100(%rsp), %rax
    00003470: 	leaq	0x1(%rax), %rsi
    00003474: 	callq	_ZdlPvm@PLT # Offset: 13428
.Ltmp864:
    00003479: 	movq	0xd0(%rsp), %rdi
    00003481: 	leaq	0xe0(%rsp), %rax
    00003489: 	cmpq	%rax, %rdi
    0000348c: 	je	.Ltmp865 # Offset: 13452
    0000348e: 	movq	0xe0(%rsp), %rax
    00003496: 	leaq	0x1(%rax), %rsi
    0000349a: 	callq	_ZdlPvm@PLT # Offset: 13466
.Ltmp865:
    0000349f: 	movq	0xb0(%rsp), %rdi
    000034a7: 	cmpq	0x68(%rsp), %rdi
    000034ac: 	je	.Ltmp866 # Offset: 13484
    000034ae: 	movq	0xc0(%rsp), %rax
    000034b6: 	leaq	0x1(%rax), %rsi
    000034ba: 	callq	_ZdlPvm@PLT # Offset: 13498
.Ltmp866:
    000034bf: 	movq	0x90(%rsp), %rdi
    000034c7: 	cmpq	0x60(%rsp), %rdi
    000034cc: 	je	.Ltmp867 # Offset: 13516
    000034ce: 	movq	0xa0(%rsp), %rax
    000034d6: 	leaq	0x1(%rax), %rsi
    000034da: 	callq	_ZdlPvm@PLT # Offset: 13530
.Ltmp867:
    000034df: 	movq	0x8(%rsp), %rdi
    000034e4: 	movl	$0x3e80, %esi
    000034e9: 	callq	_ZdlPvm@PLT # Offset: 13545
    000034ee: 	movq	0x4058(%rsp), %rax
    000034f6: 	subq	%fs:0x28, %rax
    000034ff: 	jne	.Ltmp868 # Offset: 13567
    00003505: 	addq	$0x4068, %rsp
    0000350c: 	popq	%rbx
    0000350d: 	popq	%rbp
    0000350e: 	popq	%r12
    00003510: 	popq	%r13
    00003512: 	popq	%r14
    00003514: 	popq	%r15
    00003516: 	retq # Offset: 13590
    00003517: 	nopw	(%rax,%rax) # Size: 9
.Ltmp568:
    00003520: 	addq	$0x20, %rbp
    00003524: 	cmpq	%rbx, %rbp
    00003527: 	jne	.Ltmp569 # Offset: 13607
    0000352d: 	addq	$0x8, %r13
    00003531: 	cmpq	%r13, %r15
    00003534: 	ja	.Ltmp570 # Offset: 13620
    0000353a: 	jmp	.Ltmp869 # Offset: 13626
.Ltmp588:
    0000353f: 	testq	%r14, %r14
    00003542: 	jne	.Ltmp870 # Offset: 13634
    00003548: 	movq	%rbx, %rax
    0000354b: 	jmp	.Ltmp871 # Offset: 13643
.Ltmp627:
    00003550: 	testq	%r15, %r15
    00003553: 	jne	.Ltmp872 # Offset: 13651
    00003559: 	movq	%rbx, %rax
    0000355c: 	jmp	.Ltmp873 # Offset: 13660
.Ltmp609:
    00003561: 	testq	%r14, %r14
    00003564: 	jne	.Ltmp874 # Offset: 13668
    0000356a: 	movq	%rbx, %rax
    0000356d: 	jmp	.Ltmp875 # Offset: 13677
.Ltmp602:
    00003572: 	testq	%r14, %r14
    00003575: 	jne	.Ltmp876 # Offset: 13685
    0000357b: 	movq	%rbx, %rax
    0000357e: 	jmp	.Ltmp877 # Offset: 13694
.Ltmp594:
    00003583: 	testq	%r14, %r14
    00003586: 	jne	.Ltmp878 # Offset: 13702
    0000358c: 	movq	%rbx, %rax
    0000358f: 	jmp	.Ltmp879 # Offset: 13711
.Ltmp704:
    00003594: 	testq	%r14, %r14
    00003597: 	jne	.Ltmp880 # Offset: 13719
    0000359d: 	movq	%rbx, %rax
    000035a0: 	jmp	.Ltmp881 # Offset: 13728
.Ltmp693:
    000035a5: 	testq	%r14, %r14
    000035a8: 	jne	.Ltmp882 # Offset: 13736
    000035ae: 	movq	%rbx, %rax
    000035b1: 	jmp	.Ltmp883 # Offset: 13745
.Ltmp686:
    000035b6: 	testq	%r14, %r14
    000035b9: 	jne	.Ltmp884 # Offset: 13753
    000035bf: 	movq	%rbx, %rax
    000035c2: 	jmp	.Ltmp885 # Offset: 13762
.Ltmp675:
    000035c7: 	testq	%r14, %r14
    000035ca: 	jne	.Ltmp886 # Offset: 13770
    000035d0: 	movq	%rbx, %rax
    000035d3: 	jmp	.Ltmp887 # Offset: 13779
.Ltmp669:
    000035d8: 	testq	%r14, %r14
    000035db: 	jne	.Ltmp888 # Offset: 13787
    000035e1: 	movq	%rbx, %rax
    000035e4: 	jmp	.Ltmp889 # Offset: 13796
.Ltmp658:
    000035e9: 	testq	%r14, %r14
    000035ec: 	jne	.Ltmp890 # Offset: 13804
    000035f2: 	movq	%rbx, %rax
    000035f5: 	jmp	.Ltmp891 # Offset: 13813
.Ltmp643:
    000035fa: 	testq	%r15, %r15
    000035fd: 	jne	.Ltmp892 # Offset: 13821
    00003603: 	movq	%rbx, %rax
    00003606: 	jmp	.Ltmp893 # Offset: 13830
.Ltmp634:
    0000360b: 	testq	%r15, %r15
    0000360e: 	jne	.Ltmp894 # Offset: 13838
    00003614: 	movq	%rbx, %rax
    00003617: 	jmp	.Ltmp895 # Offset: 13847
.Ltmp723:
    0000361c: 	testq	%r14, %r14
    0000361f: 	jne	.Ltmp896 # Offset: 13855
    00003625: 	movq	%rbx, %rax
    00003628: 	jmp	.Ltmp897 # Offset: 13864
.Ltmp716:
    0000362d: 	testq	%r14, %r14
    00003630: 	jne	.Ltmp898 # Offset: 13872
    00003636: 	movq	%rbx, %rax
    00003639: 	jmp	.Ltmp899 # Offset: 13881
.Ltmp710:
    0000363e: 	testq	%r14, %r14
    00003641: 	jne	.Ltmp900 # Offset: 13889
    00003647: 	movq	%rbx, %rax
    0000364a: 	jmp	.Ltmp901 # Offset: 13898
.Ltmp715:
    0000364f: 	leaq	0x70(%rsp), %rsi
    00003654: 	xorl	%edx, %edx
    00003656: 	movq	%rbp, %rdi
    00003659: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 13913
    0000365e: 	movq	%rax, 0x1b0(%rsp)
    00003666: 	movq	%rax, %rdi
    00003669: 	movq	0x70(%rsp), %rax
    0000366e: 	movq	%rax, 0x1c0(%rsp)
.Ltmp949:
    00003676: 	movq	%r14, %rdx
    00003679: 	movq	%r15, %rsi
    0000367c: 	callq	memcpy@PLT # Offset: 13948
    00003681: 	movq	0x70(%rsp), %r14
    00003686: 	movq	0x1b0(%rsp), %rax
    0000368e: 	jmp	.Ltmp899 # Offset: 13966
.Ltmp722:
    00003693: 	leaq	0x70(%rsp), %rsi
    00003698: 	xorl	%edx, %edx
    0000369a: 	movq	%rbp, %rdi
    0000369d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 13981
    000036a2: 	movq	%rax, 0x1b0(%rsp)
    000036aa: 	movq	%rax, %rdi
    000036ad: 	movq	0x70(%rsp), %rax
    000036b2: 	movq	%rax, 0x1c0(%rsp)
.Ltmp948:
    000036ba: 	movq	%r14, %rdx
    000036bd: 	movq	%r15, %rsi
    000036c0: 	callq	memcpy@PLT # Offset: 14016
    000036c5: 	movq	0x70(%rsp), %r14
    000036ca: 	movq	0x1b0(%rsp), %rax
    000036d2: 	jmp	.Ltmp897 # Offset: 14034
.Ltmp593:
    000036d7: 	leaq	0x70(%rsp), %rsi
    000036dc: 	xorl	%edx, %edx
    000036de: 	movq	%rbp, %rdi
    000036e1: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 14049
    000036e6: 	movq	%rax, 0x1b0(%rsp)
    000036ee: 	movq	%rax, %rdi
    000036f1: 	movq	0x70(%rsp), %rax
    000036f6: 	movq	%rax, 0x1c0(%rsp)
.Ltmp939:
    000036fe: 	movq	%r14, %rdx
    00003701: 	movq	%r15, %rsi
    00003704: 	callq	memcpy@PLT # Offset: 14084
    00003709: 	movq	0x70(%rsp), %r14
    0000370e: 	movq	0x1b0(%rsp), %rax
    00003716: 	jmp	.Ltmp879 # Offset: 14102
.Ltmp587:
    0000371b: 	leaq	0x70(%rsp), %rsi
    00003720: 	xorl	%edx, %edx
    00003722: 	movq	%rbp, %rdi
    00003725: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 14117
    0000372a: 	movq	%rax, 0x1b0(%rsp)
    00003732: 	movq	%rax, %rdi
    00003735: 	movq	0x70(%rsp), %rax
    0000373a: 	movq	%rax, 0x1c0(%rsp)
.Ltmp935:
    00003742: 	movq	%r14, %rdx
    00003745: 	movq	%r15, %rsi
    00003748: 	callq	memcpy@PLT # Offset: 14152
    0000374d: 	movq	0x70(%rsp), %r14
    00003752: 	movq	0x1b0(%rsp), %rax
    0000375a: 	jmp	.Ltmp871 # Offset: 14170
.Ltmp633:
    0000375f: 	leaq	0x70(%rsp), %rsi
    00003764: 	xorl	%edx, %edx
    00003766: 	movq	%rbp, %rdi
    00003769: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 14185
    0000376e: 	movq	%rax, 0x1b0(%rsp)
    00003776: 	movq	%rax, %rdi
    00003779: 	movq	0x70(%rsp), %rax
    0000377e: 	movq	%rax, 0x1c0(%rsp)
.Ltmp947:
    00003786: 	movq	0x10(%rsp), %rsi
    0000378b: 	movq	%r15, %rdx
    0000378e: 	callq	memcpy@PLT # Offset: 14222
    00003793: 	movq	0x70(%rsp), %r15
    00003798: 	movq	0x1b0(%rsp), %rax
    000037a0: 	jmp	.Ltmp895 # Offset: 14240
.Ltmp626:
    000037a5: 	leaq	0x70(%rsp), %rsi
    000037aa: 	xorl	%edx, %edx
    000037ac: 	movq	%rbp, %rdi
    000037af: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 14255
    000037b4: 	movq	%rax, 0x1b0(%rsp)
    000037bc: 	movq	%rax, %rdi
    000037bf: 	movq	0x70(%rsp), %rax
    000037c4: 	movq	%rax, 0x1c0(%rsp)
.Ltmp936:
    000037cc: 	movq	0x10(%rsp), %rsi
    000037d1: 	movq	%r15, %rdx
    000037d4: 	callq	memcpy@PLT # Offset: 14292
    000037d9: 	movq	0x70(%rsp), %r15
    000037de: 	movq	0x1b0(%rsp), %rax
    000037e6: 	jmp	.Ltmp873 # Offset: 14310
.Ltmp709:
    000037eb: 	leaq	0x70(%rsp), %rsi
    000037f0: 	xorl	%edx, %edx
    000037f2: 	movq	%rbp, %rdi
    000037f5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 14325
    000037fa: 	movq	%rax, 0x1b0(%rsp)
    00003802: 	movq	%rax, %rdi
    00003805: 	movq	0x70(%rsp), %rax
    0000380a: 	movq	%rax, 0x1c0(%rsp)
.Ltmp950:
    00003812: 	movq	%r14, %rdx
    00003815: 	movq	%r15, %rsi
    00003818: 	callq	memcpy@PLT # Offset: 14360
    0000381d: 	movq	0x70(%rsp), %r14
    00003822: 	movq	0x1b0(%rsp), %rax
    0000382a: 	jmp	.Ltmp901 # Offset: 14378
.Ltmp703:
    0000382f: 	leaq	0x70(%rsp), %rsi
    00003834: 	xorl	%edx, %edx
    00003836: 	movq	%rbp, %rdi
    00003839: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 14393
    0000383e: 	movq	%rax, 0x1b0(%rsp)
    00003846: 	movq	%rax, %rdi
    00003849: 	movq	0x70(%rsp), %rax
    0000384e: 	movq	%rax, 0x1c0(%rsp)
.Ltmp940:
    00003856: 	movq	%r14, %rdx
    00003859: 	movq	%r15, %rsi
    0000385c: 	callq	memcpy@PLT # Offset: 14428
    00003861: 	movq	0x70(%rsp), %r14
    00003866: 	movq	0x1b0(%rsp), %rax
    0000386e: 	jmp	.Ltmp881 # Offset: 14446
.Ltmp608:
    00003873: 	leaq	0x70(%rsp), %rsi
    00003878: 	xorl	%edx, %edx
    0000387a: 	movq	%rbp, %rdi
    0000387d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 14461
    00003882: 	movq	%rax, 0x1b0(%rsp)
    0000388a: 	movq	%rax, %rdi
    0000388d: 	movq	0x70(%rsp), %rax
    00003892: 	movq	%rax, 0x1c0(%rsp)
.Ltmp937:
    0000389a: 	movq	%r14, %rdx
    0000389d: 	movq	%r15, %rsi
    000038a0: 	callq	memcpy@PLT # Offset: 14496
    000038a5: 	movq	0x70(%rsp), %r14
    000038aa: 	movq	0x1b0(%rsp), %rax
    000038b2: 	jmp	.Ltmp875 # Offset: 14514
.Ltmp601:
    000038b7: 	leaq	0x70(%rsp), %rsi
    000038bc: 	xorl	%edx, %edx
    000038be: 	movq	%rbp, %rdi
    000038c1: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 14529
    000038c6: 	movq	%rax, 0x1b0(%rsp)
    000038ce: 	movq	%rax, %rdi
    000038d1: 	movq	0x70(%rsp), %rax
    000038d6: 	movq	%rax, 0x1c0(%rsp)
.Ltmp938:
    000038de: 	movq	%r14, %rdx
    000038e1: 	movq	%r15, %rsi
    000038e4: 	callq	memcpy@PLT # Offset: 14564
    000038e9: 	movq	0x70(%rsp), %r14
    000038ee: 	movq	0x1b0(%rsp), %rax
    000038f6: 	jmp	.Ltmp877 # Offset: 14582
.Ltmp674:
    000038fb: 	leaq	0x70(%rsp), %rsi
    00003900: 	xorl	%edx, %edx
    00003902: 	movq	%rbp, %rdi
    00003905: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 14597
    0000390a: 	movq	%rax, 0x1b0(%rsp)
    00003912: 	movq	%rax, %rdi
    00003915: 	movq	0x70(%rsp), %rax
    0000391a: 	movq	%rax, 0x1c0(%rsp)
.Ltmp943:
    00003922: 	movq	%r14, %rdx
    00003925: 	movq	%r15, %rsi
    00003928: 	callq	memcpy@PLT # Offset: 14632
    0000392d: 	movq	0x70(%rsp), %r14
    00003932: 	movq	0x1b0(%rsp), %rax
    0000393a: 	jmp	.Ltmp887 # Offset: 14650
.Ltmp668:
    0000393f: 	leaq	0x70(%rsp), %rsi
    00003944: 	xorl	%edx, %edx
    00003946: 	movq	%rbp, %rdi
    00003949: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 14665
    0000394e: 	movq	%rax, 0x1b0(%rsp)
    00003956: 	movq	%rax, %rdi
    00003959: 	movq	0x70(%rsp), %rax
    0000395e: 	movq	%rax, 0x1c0(%rsp)
.Ltmp944:
    00003966: 	movq	%r14, %rdx
    00003969: 	movq	%r15, %rsi
    0000396c: 	callq	memcpy@PLT # Offset: 14700
    00003971: 	movq	0x70(%rsp), %r14
    00003976: 	movq	0x1b0(%rsp), %rax
    0000397e: 	jmp	.Ltmp889 # Offset: 14718
.Ltmp692:
    00003983: 	leaq	0x70(%rsp), %rsi
    00003988: 	xorl	%edx, %edx
    0000398a: 	movq	%rbp, %rdi
    0000398d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 14733
    00003992: 	movq	%rax, 0x1b0(%rsp)
    0000399a: 	movq	%rax, %rdi
    0000399d: 	movq	0x70(%rsp), %rax
    000039a2: 	movq	%rax, 0x1c0(%rsp)
.Ltmp941:
    000039aa: 	movq	%r14, %rdx
    000039ad: 	movq	%r15, %rsi
    000039b0: 	callq	memcpy@PLT # Offset: 14768
    000039b5: 	movq	0x70(%rsp), %r14
    000039ba: 	movq	0x1b0(%rsp), %rax
    000039c2: 	jmp	.Ltmp883 # Offset: 14786
.Ltmp685:
    000039c7: 	leaq	0x70(%rsp), %rsi
    000039cc: 	xorl	%edx, %edx
    000039ce: 	movq	%rbp, %rdi
    000039d1: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 14801
    000039d6: 	movq	%rax, 0x1b0(%rsp)
    000039de: 	movq	%rax, %rdi
    000039e1: 	movq	0x70(%rsp), %rax
    000039e6: 	movq	%rax, 0x1c0(%rsp)
.Ltmp942:
    000039ee: 	movq	%r14, %rdx
    000039f1: 	movq	%r15, %rsi
    000039f4: 	callq	memcpy@PLT # Offset: 14836
    000039f9: 	movq	0x70(%rsp), %r14
    000039fe: 	movq	0x1b0(%rsp), %rax
    00003a06: 	jmp	.Ltmp885 # Offset: 14854
.Ltmp657:
    00003a0b: 	leaq	0x70(%rsp), %rsi
    00003a10: 	xorl	%edx, %edx
    00003a12: 	movq	%rbp, %rdi
    00003a15: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 14869
    00003a1a: 	movq	%rax, 0x1b0(%rsp)
    00003a22: 	movq	%rax, %rdi
    00003a25: 	movq	0x70(%rsp), %rax
    00003a2a: 	movq	%rax, 0x1c0(%rsp)
.Ltmp945:
    00003a32: 	movq	%r14, %rdx
    00003a35: 	movq	%r15, %rsi
    00003a38: 	callq	memcpy@PLT # Offset: 14904
    00003a3d: 	movq	0x70(%rsp), %r14
    00003a42: 	movq	0x1b0(%rsp), %rax
    00003a4a: 	jmp	.Ltmp891 # Offset: 14922
.Ltmp642:
    00003a4f: 	leaq	0x70(%rsp), %rsi
    00003a54: 	xorl	%edx, %edx
    00003a56: 	movq	%rbp, %rdi
    00003a59: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 14937
    00003a5e: 	movq	%rax, 0x1b0(%rsp)
    00003a66: 	movq	%rax, %rdi
    00003a69: 	movq	0x70(%rsp), %rax
    00003a6e: 	movq	%rax, 0x1c0(%rsp)
.Ltmp946:
    00003a76: 	movq	0x10(%rsp), %rsi
    00003a7b: 	movq	%r15, %rdx
    00003a7e: 	callq	memcpy@PLT # Offset: 14974
    00003a83: 	movq	0x70(%rsp), %r15
    00003a88: 	movq	0x1b0(%rsp), %rax
    00003a90: 	jmp	.Ltmp893 # Offset: 14992
.Ltmp730:
    00003a95: 	testq	%r14, %r14
    00003a98: 	jne	.Ltmp902 # Offset: 15000
    00003a9e: 	movq	%rbx, %rax
    00003aa1: 	jmp	.Ltmp903 # Offset: 15009
.Ltmp757:
    00003aa6: 	testq	%r14, %r14
    00003aa9: 	jne	.Ltmp904 # Offset: 15017
    00003aaf: 	movq	%rbx, %rax
    00003ab2: 	jmp	.Ltmp905 # Offset: 15026
.Ltmp749:
    00003ab7: 	testq	%r14, %r14
    00003aba: 	jne	.Ltmp906 # Offset: 15034
    00003ac0: 	movq	0x10(%rsp), %rax
    00003ac5: 	jmp	.Ltmp907 # Offset: 15045
.Ltmp743:
    00003aca: 	testq	%r14, %r14
    00003acd: 	jne	.Ltmp908 # Offset: 15053
    00003ad3: 	movq	%rbx, %rax
    00003ad6: 	jmp	.Ltmp909 # Offset: 15062
.Ltmp737:
    00003adb: 	testq	%r14, %r14
    00003ade: 	jne	.Ltmp910 # Offset: 15070
    00003ae4: 	movq	%rbx, %rax
    00003ae7: 	jmp	.Ltmp911 # Offset: 15079
.Ltmp828:
    00003aec: 	testq	%r14, %r14
    00003aef: 	jne	.Ltmp912 # Offset: 15087
    00003af5: 	movq	%rbx, %rax
    00003af8: 	jmp	.Ltmp913 # Offset: 15096
.Ltmp818:
    00003afd: 	testq	%r14, %r14
    00003b00: 	jne	.Ltmp914 # Offset: 15104
    00003b06: 	movq	%rbx, %rax
    00003b09: 	jmp	.Ltmp915 # Offset: 15113
.Ltmp801:
    00003b0e: 	testq	%r14, %r14
    00003b11: 	jne	.Ltmp916 # Offset: 15121
    00003b17: 	movq	%rbx, %rax
    00003b1a: 	jmp	.Ltmp917 # Offset: 15130
.Ltmp789:
    00003b1f: 	testq	%r14, %r14
    00003b22: 	jne	.Ltmp918 # Offset: 15138
    00003b28: 	movq	%rbx, %rax
    00003b2b: 	jmp	.Ltmp919 # Offset: 15147
.Ltmp779:
    00003b30: 	testq	%r14, %r14
    00003b33: 	jne	.Ltmp920 # Offset: 15155
    00003b39: 	movq	%rbx, %rax
    00003b3c: 	jmp	.Ltmp921 # Offset: 15164
.Ltmp771:
    00003b41: 	testq	%r14, %r14
    00003b44: 	jne	.Ltmp922 # Offset: 15172
    00003b4a: 	movq	%rbx, %rax
    00003b4d: 	jmp	.Ltmp923 # Offset: 15181
.Ltmp764:
    00003b52: 	testq	%r14, %r14
    00003b55: 	jne	.Ltmp924 # Offset: 15189
    00003b5b: 	movq	%rbx, %rax
    00003b5e: 	jmp	.Ltmp925 # Offset: 15198
.Ltmp770:
    00003b63: 	leaq	0x70(%rsp), %rsi
    00003b68: 	xorl	%edx, %edx
    00003b6a: 	movq	%rbp, %rdi
    00003b6d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 15213
    00003b72: 	movq	%rax, 0x1b0(%rsp)
    00003b7a: 	movq	%rax, %rdi
    00003b7d: 	movq	0x70(%rsp), %rax
    00003b82: 	movq	%rax, 0x1c0(%rsp)
.Ltmp961:
    00003b8a: 	movq	%r14, %rdx
    00003b8d: 	movq	%r15, %rsi
    00003b90: 	callq	memcpy@PLT # Offset: 15248
    00003b95: 	movq	0x70(%rsp), %r14
    00003b9a: 	movq	0x1b0(%rsp), %rax
    00003ba2: 	jmp	.Ltmp923 # Offset: 15266
.Ltmp788:
    00003ba7: 	leaq	0x70(%rsp), %rsi
    00003bac: 	xorl	%edx, %edx
    00003bae: 	movq	%rbp, %rdi
    00003bb1: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 15281
    00003bb6: 	movq	%rax, 0x1b0(%rsp)
    00003bbe: 	movq	%rax, %rdi
    00003bc1: 	movq	0x70(%rsp), %rax
    00003bc6: 	movq	%rax, 0x1c0(%rsp)
.Ltmp959:
    00003bce: 	movq	%r14, %rdx
    00003bd1: 	movq	%r15, %rsi
    00003bd4: 	callq	memcpy@PLT # Offset: 15316
    00003bd9: 	movq	0x70(%rsp), %r14
    00003bde: 	movq	0x1b0(%rsp), %rax
    00003be6: 	jmp	.Ltmp919 # Offset: 15334
.Ltmp778:
    00003beb: 	leaq	0x70(%rsp), %rsi
    00003bf0: 	xorl	%edx, %edx
    00003bf2: 	movq	%rbp, %rdi
    00003bf5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 15349
    00003bfa: 	movq	%rax, 0x1b0(%rsp)
    00003c02: 	movq	%rax, %rdi
    00003c05: 	movq	0x70(%rsp), %rax
    00003c0a: 	movq	%rax, 0x1c0(%rsp)
.Ltmp960:
    00003c12: 	movq	%r14, %rdx
    00003c15: 	movq	%r15, %rsi
    00003c18: 	callq	memcpy@PLT # Offset: 15384
    00003c1d: 	movq	0x70(%rsp), %r14
    00003c22: 	movq	0x1b0(%rsp), %rax
    00003c2a: 	jmp	.Ltmp921 # Offset: 15402
.Ltmp827:
    00003c2f: 	leaq	0x70(%rsp), %rsi
    00003c34: 	xorl	%edx, %edx
    00003c36: 	movq	%rbp, %rdi
    00003c39: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 15417
    00003c3e: 	movq	%rax, 0x1b0(%rsp)
    00003c46: 	movq	%rax, %rdi
    00003c49: 	movq	0x70(%rsp), %rax
    00003c4e: 	movq	%rax, 0x1c0(%rsp)
.Ltmp956:
    00003c56: 	movq	%r14, %rdx
    00003c59: 	movq	%r15, %rsi
    00003c5c: 	callq	memcpy@PLT # Offset: 15452
    00003c61: 	movq	0x70(%rsp), %r14
    00003c66: 	movq	0x1b0(%rsp), %rax
    00003c6e: 	jmp	.Ltmp913 # Offset: 15470
.Ltmp817:
    00003c73: 	leaq	0x70(%rsp), %rsi
    00003c78: 	xorl	%edx, %edx
    00003c7a: 	movq	%rbp, %rdi
    00003c7d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 15485
    00003c82: 	movq	%rax, 0x1b0(%rsp)
    00003c8a: 	movq	%rax, %rdi
    00003c8d: 	movq	0x70(%rsp), %rax
    00003c92: 	movq	%rax, 0x1c0(%rsp)
.Ltmp957:
    00003c9a: 	movq	%r14, %rdx
    00003c9d: 	movq	%r15, %rsi
    00003ca0: 	callq	memcpy@PLT # Offset: 15520
    00003ca5: 	movq	0x70(%rsp), %r14
    00003caa: 	movq	0x1b0(%rsp), %rax
    00003cb2: 	jmp	.Ltmp915 # Offset: 15538
.Ltmp800:
    00003cb7: 	leaq	0x70(%rsp), %rsi
    00003cbc: 	xorl	%edx, %edx
    00003cbe: 	movq	%rbp, %rdi
    00003cc1: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 15553
    00003cc6: 	movq	%rax, 0x1b0(%rsp)
    00003cce: 	movq	%rax, %rdi
    00003cd1: 	movq	0x70(%rsp), %rax
    00003cd6: 	movq	%rax, 0x1c0(%rsp)
.Ltmp958:
    00003cde: 	movq	%r14, %rdx
    00003ce1: 	movq	%r15, %rsi
    00003ce4: 	callq	memcpy@PLT # Offset: 15588
    00003ce9: 	movq	0x70(%rsp), %r14
    00003cee: 	movq	0x1b0(%rsp), %rax
    00003cf6: 	jmp	.Ltmp917 # Offset: 15606
.Ltmp729:
    00003cfb: 	leaq	0x70(%rsp), %rsi
    00003d00: 	xorl	%edx, %edx
    00003d02: 	movq	%rbp, %rdi
    00003d05: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 15621
    00003d0a: 	movq	%rax, 0x1b0(%rsp)
    00003d12: 	movq	%rax, %rdi
    00003d15: 	movq	0x70(%rsp), %rax
    00003d1a: 	movq	%rax, 0x1c0(%rsp)
.Ltmp951:
    00003d22: 	movq	%r14, %rdx
    00003d25: 	movq	%r15, %rsi
    00003d28: 	callq	memcpy@PLT # Offset: 15656
    00003d2d: 	movq	0x70(%rsp), %r14
    00003d32: 	movq	0x1b0(%rsp), %rax
    00003d3a: 	jmp	.Ltmp903 # Offset: 15674
.Ltmp763:
    00003d3f: 	leaq	0x70(%rsp), %rsi
    00003d44: 	xorl	%edx, %edx
    00003d46: 	movq	%rbp, %rdi
    00003d49: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 15689
    00003d4e: 	movq	%rax, 0x1b0(%rsp)
    00003d56: 	movq	%rax, %rdi
    00003d59: 	movq	0x70(%rsp), %rax
    00003d5e: 	movq	%rax, 0x1c0(%rsp)
.Ltmp962:
    00003d66: 	movq	%r14, %rdx
    00003d69: 	movq	%r15, %rsi
    00003d6c: 	callq	memcpy@PLT # Offset: 15724
    00003d71: 	movq	0x70(%rsp), %r14
    00003d76: 	movq	0x1b0(%rsp), %rax
    00003d7e: 	jmp	.Ltmp925 # Offset: 15742
.Ltmp756:
    00003d83: 	leaq	0x70(%rsp), %rsi
    00003d88: 	xorl	%edx, %edx
    00003d8a: 	movq	%rbp, %rdi
    00003d8d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 15757
    00003d92: 	movq	%rax, 0x1b0(%rsp)
    00003d9a: 	movq	%rax, %rdi
    00003d9d: 	movq	0x70(%rsp), %rax
    00003da2: 	movq	%rax, 0x1c0(%rsp)
.Ltmp952:
    00003daa: 	movq	%r14, %rdx
    00003dad: 	movq	%r15, %rsi
    00003db0: 	callq	memcpy@PLT # Offset: 15792
    00003db5: 	movq	0x70(%rsp), %r14
    00003dba: 	movq	0x1b0(%rsp), %rax
    00003dc2: 	jmp	.Ltmp905 # Offset: 15810
.Ltmp736:
    00003dc7: 	leaq	0x70(%rsp), %rsi
    00003dcc: 	xorl	%edx, %edx
    00003dce: 	movq	%rbp, %rdi
    00003dd1: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 15825
    00003dd6: 	movq	%rax, 0x1b0(%rsp)
    00003dde: 	movq	%rax, %rdi
    00003de1: 	movq	0x70(%rsp), %rax
    00003de6: 	movq	%rax, 0x1c0(%rsp)
.Ltmp955:
    00003dee: 	movq	%r14, %rdx
    00003df1: 	movq	%r15, %rsi
    00003df4: 	callq	memcpy@PLT # Offset: 15860
    00003df9: 	movq	0x70(%rsp), %r14
    00003dfe: 	movq	0x1b0(%rsp), %rax
    00003e06: 	jmp	.Ltmp911 # Offset: 15878
.Ltmp748:
    00003e0b: 	leaq	0x70(%rsp), %rsi
    00003e10: 	leaq	0x110(%rsp), %rdi
    00003e18: 	xorl	%edx, %edx
    00003e1a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 15898
    00003e1f: 	movq	%rax, 0x110(%rsp)
    00003e27: 	movq	%rax, %rdi
    00003e2a: 	movq	0x70(%rsp), %rax
    00003e2f: 	movq	%rax, 0x120(%rsp)
.Ltmp953:
    00003e37: 	movq	%r14, %rdx
    00003e3a: 	movq	%r15, %rsi
    00003e3d: 	callq	memcpy@PLT # Offset: 15933
    00003e42: 	movq	0x70(%rsp), %r14
    00003e47: 	movq	0x110(%rsp), %rax
    00003e4f: 	jmp	.Ltmp907 # Offset: 15951
.Ltmp742:
    00003e54: 	leaq	0x70(%rsp), %rsi
    00003e59: 	xorl	%edx, %edx
    00003e5b: 	movq	%rbp, %rdi
    00003e5e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 15966
    00003e63: 	movq	%rax, 0x1b0(%rsp)
    00003e6b: 	movq	%rax, %rdi
    00003e6e: 	movq	0x70(%rsp), %rax
    00003e73: 	movq	%rax, 0x1c0(%rsp)
.Ltmp954:
    00003e7b: 	movq	%r14, %rdx
    00003e7e: 	movq	%r15, %rsi
    00003e81: 	callq	memcpy@PLT # Offset: 16001
    00003e86: 	movq	0x70(%rsp), %r14
    00003e8b: 	movq	0x1b0(%rsp), %rax
    00003e93: 	jmp	.Ltmp909 # Offset: 16019
.Ltmp572:
    00003e98: 	cmpq	0x10(%rsp), %rbp
    00003e9d: 	je	.Ltmp575 # Offset: 16029
.Ltmp928:
    00003ea3: 	movq	(%rbp), %rdi
    00003ea7: 	leaq	0x10(%rbp), %rax
    00003eab: 	cmpq	%rax, %rdi
    00003eae: 	je	.Ltmp926 # Offset: 16046
.Ltmp927:
    00003eb0: 	movq	0x10(%rbp), %rax
    00003eb4: 	addq	$0x20, %rbp
    00003eb8: 	leaq	0x1(%rax), %rsi
    00003ebc: 	callq	_ZdlPvm@PLT # Offset: 16060
    00003ec1: 	cmpq	%rbp, 0x10(%rsp)
    00003ec6: 	je	.Ltmp575 # Offset: 16070
    00003ecc: 	movq	(%rbp), %rdi
    00003ed0: 	leaq	0x10(%rbp), %rax
    00003ed4: 	cmpq	%rax, %rdi
    00003ed7: 	jne	.Ltmp927 # Offset: 16087
.Ltmp926:
    00003ed9: 	addq	$0x20, %rbp
    00003edd: 	cmpq	%rbp, 0x10(%rsp)
    00003ee2: 	jne	.Ltmp928 # Offset: 16098
    00003ee4: 	jmp	.Ltmp575 # Offset: 16100
.Ltmp838:
    00003ee9: 	testq	%r12, %r12
    00003eec: 	jne	.Ltmp929 # Offset: 16108
    00003ef2: 	movq	%rbx, %rax
    00003ef5: 	jmp	.Ltmp930 # Offset: 16117
.Ltmp837:
    00003efa: 	xorl	%edx, %edx
    00003efc: 	movq	%r14, %rsi
    00003eff: 	movq	%rbp, %rdi
    00003f02: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 16130
    00003f07: 	movq	%rax, 0x1b0(%rsp)
    00003f0f: 	movq	%rax, %rdi
    00003f12: 	movq	0x70(%rsp), %rax
    00003f17: 	movq	%rax, 0x1c0(%rsp)
.Ltmp963:
    00003f1f: 	movq	%r12, %rdx
    00003f22: 	movq	%r15, %rsi
    00003f25: 	callq	memcpy@PLT # Offset: 16165
    00003f2a: 	movq	0x70(%rsp), %r12
    00003f2f: 	movq	0x1b0(%rsp), %rax
    00003f37: 	jmp	.Ltmp930 # Offset: 16183
.Ltmp849:
    00003f3c: 	testq	%r12, %r12
    00003f3f: 	jne	.Ltmp931 # Offset: 16191
    00003f45: 	movq	%rbx, %rax
    00003f48: 	jmp	.Ltmp932 # Offset: 16200
.Ltmp848:
    00003f4d: 	xorl	%edx, %edx
    00003f4f: 	movq	%r14, %rsi
    00003f52: 	movq	%rbp, %rdi
    00003f55: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 16213
    00003f5a: 	movq	%rax, 0x1b0(%rsp)
    00003f62: 	movq	%rax, %rdi
    00003f65: 	movq	0x70(%rsp), %rax
    00003f6a: 	movq	%rax, 0x1c0(%rsp)
.Ltmp964:
    00003f72: 	movq	%r12, %rdx
    00003f75: 	movq	%r13, %rsi
    00003f78: 	callq	memcpy@PLT # Offset: 16248
    00003f7d: 	movq	0x70(%rsp), %r12
    00003f82: 	movq	0x1b0(%rsp), %rax
    00003f8a: 	jmp	.Ltmp932 # Offset: 16266
.Ltmp855:
    00003f8f: 	xorl	%edx, %edx
    00003f91: 	movq	%r14, %rsi
    00003f94: 	movq	%rbp, %rdi
    00003f97: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 16279
    00003f9c: 	movq	%rax, 0x1b0(%rsp)
    00003fa4: 	movq	%rax, %rdi
    00003fa7: 	movq	0x70(%rsp), %rax
    00003fac: 	movq	%rax, 0x1c0(%rsp)
.Ltmp965:
    00003fb4: 	movq	%r12, %rdx
    00003fb7: 	movq	%r13, %rsi
    00003fba: 	callq	memcpy@PLT # Offset: 16314
    00003fbf: 	movq	0x70(%rsp), %r12
    00003fc4: 	movq	0x1b0(%rsp), %rax
    00003fcc: 	jmp	.Ltmp933 # Offset: 16332
.Ltmp856:
    00003fd1: 	testq	%r12, %r12
    00003fd4: 	jne	.Ltmp934 # Offset: 16340
    00003fda: 	movq	%rbx, %rax
    00003fdd: 	jmp	.Ltmp933 # Offset: 16349
.Ltmp586:
    00003fe2: 	leaq	DATAat0x11158(%rip), %rdi
    00003fe9: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16361
.Ltmp589:
    00003fee: 	leaq	DATAat0x11182(%rip), %rdi
    00003ff5: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 16373
.Ltmp592:
    00003ffa: 	leaq	DATAat0x11158(%rip), %rdi
    00004001: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16385
.Ltmp595:
    00004006: 	leaq	DATAat0x11182(%rip), %rdi
    0000400d: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 16397
.Ltmp600:
    00004012: 	leaq	DATAat0x11158(%rip), %rdi
    00004019: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16409
.Ltmp603:
    0000401e: 	leaq	DATAat0x11182(%rip), %rdi
    00004025: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 16421
.Ltmp607:
    0000402a: 	leaq	DATAat0x11158(%rip), %rdi
    00004031: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16433
.Ltmp610:
    00004036: 	leaq	DATAat0x11182(%rip), %rdi
    0000403d: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 16445
.Ltmp625:
    00004042: 	leaq	DATAat0x11158(%rip), %rdi
    00004049: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16457
.Ltmp628:
    0000404e: 	leaq	DATAat0x11182(%rip), %rdi
    00004055: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 16469
.Ltmp632:
    0000405a: 	leaq	DATAat0x11158(%rip), %rdi
    00004061: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16481
.Ltmp635:
    00004066: 	leaq	DATAat0x11182(%rip), %rdi
    0000406d: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 16493
.Ltmp641:
    00004072: 	leaq	DATAat0x11158(%rip), %rdi
    00004079: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16505
.Ltmp644:
    0000407e: 	leaq	DATAat0x11182(%rip), %rdi
    00004085: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 16517
.Ltmp656:
    0000408a: 	leaq	DATAat0x11158(%rip), %rdi
    00004091: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16529
.Ltmp659:
    00004096: 	leaq	DATAat0x11182(%rip), %rdi
    0000409d: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 16541
.Ltmp667:
    000040a2: 	leaq	DATAat0x11158(%rip), %rdi
    000040a9: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16553
.Ltmp670:
    000040ae: 	leaq	DATAat0x11182(%rip), %rdi
    000040b5: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 16565
.Ltmp673:
    000040ba: 	leaq	DATAat0x11158(%rip), %rdi
    000040c1: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16577
.Ltmp676:
    000040c6: 	leaq	DATAat0x11182(%rip), %rdi
    000040cd: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 16589
.Ltmp684:
    000040d2: 	leaq	DATAat0x11158(%rip), %rdi
    000040d9: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16601
.Ltmp687:
    000040de: 	leaq	DATAat0x11182(%rip), %rdi
    000040e5: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 16613
.Ltmp691:
    000040ea: 	leaq	DATAat0x11158(%rip), %rdi
    000040f1: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16625
.Ltmp694:
    000040f6: 	leaq	DATAat0x11182(%rip), %rdi
    000040fd: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 16637
.Ltmp702:
    00004102: 	leaq	DATAat0x11158(%rip), %rdi
    00004109: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16649
.Ltmp705:
    0000410e: 	leaq	DATAat0x11182(%rip), %rdi
    00004115: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 16661
.Ltmp708:
    0000411a: 	leaq	DATAat0x11158(%rip), %rdi
    00004121: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16673
.Ltmp711:
    00004126: 	leaq	DATAat0x11182(%rip), %rdi
    0000412d: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 16685
.Ltmp714:
    00004132: 	leaq	DATAat0x11158(%rip), %rdi
    00004139: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16697
.Ltmp717:
    0000413e: 	leaq	DATAat0x11182(%rip), %rdi
    00004145: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 16709
.Ltmp721:
    0000414a: 	leaq	DATAat0x11158(%rip), %rdi
    00004151: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16721
.Ltmp724:
    00004156: 	leaq	DATAat0x11182(%rip), %rdi
    0000415d: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 16733
.Ltmp728:
    00004162: 	leaq	DATAat0x11158(%rip), %rdi
    00004169: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16745
.Ltmp731:
    0000416e: 	leaq	DATAat0x11182(%rip), %rdi
    00004175: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 16757
.Ltmp735:
    0000417a: 	leaq	DATAat0x11158(%rip), %rdi
    00004181: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16769
.Ltmp738:
    00004186: 	leaq	DATAat0x11182(%rip), %rdi
    0000418d: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 16781
.Ltmp741:
    00004192: 	leaq	DATAat0x11158(%rip), %rdi
    00004199: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16793
.Ltmp744:
    0000419e: 	leaq	DATAat0x11182(%rip), %rdi
    000041a5: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 16805
.Ltmp747:
    000041aa: 	leaq	DATAat0x11158(%rip), %rdi
    000041b1: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16817
.Ltmp750:
    000041b6: 	leaq	DATAat0x11182(%rip), %rdi
    000041bd: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 16829
.Ltmp755:
    000041c2: 	leaq	DATAat0x11158(%rip), %rdi
    000041c9: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16841
.Ltmp758:
    000041ce: 	leaq	DATAat0x11182(%rip), %rdi
    000041d5: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 16853
.Ltmp762:
    000041da: 	leaq	DATAat0x11158(%rip), %rdi
    000041e1: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16865
.Ltmp765:
    000041e6: 	leaq	DATAat0x11182(%rip), %rdi
    000041ed: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 16877
.Ltmp769:
    000041f2: 	leaq	DATAat0x11158(%rip), %rdi
    000041f9: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16889
.Ltmp772:
    000041fe: 	leaq	DATAat0x11182(%rip), %rdi
    00004205: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 16901
.Ltmp777:
    0000420a: 	leaq	DATAat0x11158(%rip), %rdi
    00004211: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16913
.Ltmp780:
    00004216: 	leaq	DATAat0x11182(%rip), %rdi
    0000421d: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 16925
.Ltmp787:
    00004222: 	leaq	DATAat0x11158(%rip), %rdi
    00004229: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16937
.Ltmp790:
    0000422e: 	leaq	DATAat0x11182(%rip), %rdi
    00004235: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 16949
.Ltmp799:
    0000423a: 	leaq	DATAat0x11158(%rip), %rdi
    00004241: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16961
.Ltmp802:
    00004246: 	leaq	DATAat0x11182(%rip), %rdi
    0000424d: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 16973
.Ltmp816:
    00004252: 	leaq	DATAat0x11158(%rip), %rdi
    00004259: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16985
.Ltmp819:
    0000425e: 	leaq	DATAat0x11182(%rip), %rdi
    00004265: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 16997
.Ltmp826:
    0000426a: 	leaq	DATAat0x11158(%rip), %rdi
    00004271: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 17009
.Ltmp829:
    00004276: 	leaq	DATAat0x11182(%rip), %rdi
    0000427d: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 17021
.Ltmp836:
    00004282: 	leaq	DATAat0x11158(%rip), %rdi
    00004289: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 17033
.Ltmp839:
    0000428e: 	leaq	DATAat0x11182(%rip), %rdi
    00004295: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 17045
.Ltmp847:
    0000429a: 	leaq	DATAat0x11158(%rip), %rdi
    000042a1: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 17057
.Ltmp850:
    000042a6: 	leaq	DATAat0x11182(%rip), %rdi
    000042ad: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 17069
.Ltmp854:
    000042b2: 	leaq	DATAat0x11158(%rip), %rdi
    000042b9: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 17081
.Ltmp857:
    000042be: 	leaq	DATAat0x11182(%rip), %rdi
    000042c5: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 17093
.Ltmp868:
    000042ca: 	callq	__stack_chk_fail@PLT # Offset: 17098
.Ltmp870:
    000042cf: 	movq	%rbx, %rdi
    000042d2: 	jmp	.Ltmp935 # Offset: 17106
.Ltmp872:
    000042d7: 	movq	%rbx, %rdi
    000042da: 	jmp	.Ltmp936 # Offset: 17114
.Ltmp874:
    000042df: 	movq	%rbx, %rdi
    000042e2: 	jmp	.Ltmp937 # Offset: 17122
.Ltmp876:
    000042e7: 	movq	%rbx, %rdi
    000042ea: 	jmp	.Ltmp938 # Offset: 17130
.Ltmp878:
    000042ef: 	movq	%rbx, %rdi
    000042f2: 	jmp	.Ltmp939 # Offset: 17138
.Ltmp880:
    000042f7: 	movq	%rbx, %rdi
    000042fa: 	jmp	.Ltmp940 # Offset: 17146
.Ltmp882:
    000042ff: 	movq	%rbx, %rdi
    00004302: 	jmp	.Ltmp941 # Offset: 17154
.Ltmp884:
    00004307: 	movq	%rbx, %rdi
    0000430a: 	jmp	.Ltmp942 # Offset: 17162
.Ltmp886:
    0000430f: 	movq	%rbx, %rdi
    00004312: 	jmp	.Ltmp943 # Offset: 17170
.Ltmp888:
    00004317: 	movq	%rbx, %rdi
    0000431a: 	jmp	.Ltmp944 # Offset: 17178
.Ltmp890:
    0000431f: 	movq	%rbx, %rdi
    00004322: 	jmp	.Ltmp945 # Offset: 17186
.Ltmp892:
    00004327: 	movq	%rbx, %rdi
    0000432a: 	jmp	.Ltmp946 # Offset: 17194
.Ltmp894:
    0000432f: 	movq	%rbx, %rdi
    00004332: 	jmp	.Ltmp947 # Offset: 17202
.Ltmp896:
    00004337: 	movq	%rbx, %rdi
    0000433a: 	jmp	.Ltmp948 # Offset: 17210
.Ltmp898:
    0000433f: 	movq	%rbx, %rdi
    00004342: 	jmp	.Ltmp949 # Offset: 17218
.Ltmp900:
    00004347: 	movq	%rbx, %rdi
    0000434a: 	jmp	.Ltmp950 # Offset: 17226
.Ltmp902:
    0000434f: 	movq	%rbx, %rdi
    00004352: 	jmp	.Ltmp951 # Offset: 17234
.Ltmp904:
    00004357: 	movq	%rbx, %rdi
    0000435a: 	jmp	.Ltmp952 # Offset: 17242
.Ltmp906:
    0000435f: 	movq	0x10(%rsp), %rdi
    00004364: 	jmp	.Ltmp953 # Offset: 17252
.Ltmp908:
    00004369: 	movq	%rbx, %rdi
    0000436c: 	jmp	.Ltmp954 # Offset: 17260
.Ltmp910:
    00004371: 	movq	%rbx, %rdi
    00004374: 	jmp	.Ltmp955 # Offset: 17268
.Ltmp912:
    00004379: 	movq	%rbx, %rdi
    0000437c: 	jmp	.Ltmp956 # Offset: 17276
.Ltmp914:
    00004381: 	movq	%rbx, %rdi
    00004384: 	jmp	.Ltmp957 # Offset: 17284
.Ltmp916:
    00004389: 	movq	%rbx, %rdi
    0000438c: 	jmp	.Ltmp958 # Offset: 17292
.Ltmp918:
    00004391: 	movq	%rbx, %rdi
    00004394: 	jmp	.Ltmp959 # Offset: 17300
.Ltmp920:
    00004399: 	movq	%rbx, %rdi
    0000439c: 	jmp	.Ltmp960 # Offset: 17308
.Ltmp922:
    000043a1: 	movq	%rbx, %rdi
    000043a4: 	jmp	.Ltmp961 # Offset: 17316
.Ltmp924:
    000043a9: 	movq	%rbx, %rdi
    000043ac: 	jmp	.Ltmp962 # Offset: 17324
.Ltmp929:
    000043b1: 	movq	%rbx, %rdi
    000043b4: 	jmp	.Ltmp963 # Offset: 17332
.Ltmp931:
    000043b9: 	movq	%rbx, %rdi
    000043bc: 	jmp	.Ltmp964 # Offset: 17340
.Ltmp934:
    000043c1: 	movq	%rbx, %rdi
    000043c4: 	jmp	.Ltmp965 # Offset: 17348
    000043c9: 	endbr64
.Ltmp968:
    000043cd: 	movq	%rax, %rbp
    000043d0: 	jmp	.Ltmp966 # Offset: 17360
    000043d5: 	endbr64
.Ltmp984:
    000043d9: 	movq	%rax, %rbp
    000043dc: 	jmp	.Ltmp967 # Offset: 17372
    000043e1: 	endbr64
    000043e5: 	jmp	.Ltmp968 # Offset: 17381
    000043e7: 	endbr64
.Ltmp982:
    000043eb: 	movq	%rax, %rbp
    000043ee: 	jmp	.Ltmp969 # Offset: 17390
    000043f0: 	endbr64
.Ltmp981:
    000043f4: 	movq	%rax, %rbp
    000043f7: 	jmp	.Ltmp970 # Offset: 17399
.Ltmp969:
    000043f9: 	movq	0x70(%rsp), %rdi
    000043fe: 	movq	0x80(%rsp), %rsi
    00004406: 	subq	%rdi, %rsi
    00004409: 	testq	%rdi, %rdi
    0000440c: 	je	.Ltmp970 # Offset: 17420
    0000440e: 	callq	_ZdlPvm@PLT # Offset: 17422
.Ltmp970:
    00004413: 	movq	0x1b0(%rsp), %rdi
    0000441b: 	cmpq	%rbx, %rdi
    0000441e: 	je	.Ltmp971 # Offset: 17438
    00004420: 	movq	0x1c0(%rsp), %rax
    00004428: 	leaq	0x1(%rax), %rsi
    0000442c: 	callq	_ZdlPvm@PLT # Offset: 17452
.Ltmp971:
    00004431: 	movq	0x190(%rsp), %rdi
    00004439: 	leaq	0x1a0(%rsp), %rax
    00004441: 	cmpq	%rax, %rdi
    00004444: 	je	.Ltmp972 # Offset: 17476
    00004446: 	movq	0x1a0(%rsp), %rax
    0000444e: 	leaq	0x1(%rax), %rsi
    00004452: 	callq	_ZdlPvm@PLT # Offset: 17490
.Ltmp972:
    00004457: 	movq	0x170(%rsp), %rdi
    0000445f: 	leaq	0x180(%rsp), %rax
    00004467: 	cmpq	%rax, %rdi
    0000446a: 	je	.Ltmp973 # Offset: 17514
    0000446c: 	movq	0x180(%rsp), %rax
    00004474: 	leaq	0x1(%rax), %rsi
    00004478: 	callq	_ZdlPvm@PLT # Offset: 17528
.Ltmp973:
    0000447d: 	movq	0x150(%rsp), %rdi
    00004485: 	leaq	0x160(%rsp), %rax
    0000448d: 	cmpq	%rax, %rdi
    00004490: 	je	.Ltmp974 # Offset: 17552
    00004492: 	movq	0x160(%rsp), %rax
    0000449a: 	leaq	0x1(%rax), %rsi
    0000449e: 	callq	_ZdlPvm@PLT # Offset: 17566
.Ltmp974:
    000044a3: 	movq	0x130(%rsp), %rdi
    000044ab: 	leaq	0x140(%rsp), %rax
    000044b3: 	cmpq	%rax, %rdi
    000044b6: 	je	.Ltmp975 # Offset: 17590
    000044b8: 	movq	0x140(%rsp), %rax
    000044c0: 	leaq	0x1(%rax), %rsi
    000044c4: 	callq	_ZdlPvm@PLT # Offset: 17604
.Ltmp975:
    000044c9: 	movq	0x110(%rsp), %rdi
    000044d1: 	cmpq	0x10(%rsp), %rdi
    000044d6: 	je	.Ltmp976 # Offset: 17622
    000044d8: 	movq	0x120(%rsp), %rax
    000044e0: 	leaq	0x1(%rax), %rsi
    000044e4: 	callq	_ZdlPvm@PLT # Offset: 17636
.Ltmp976:
    000044e9: 	movq	0xf0(%rsp), %rdi
    000044f1: 	leaq	0x100(%rsp), %rax
    000044f9: 	cmpq	%rax, %rdi
    000044fc: 	je	.Ltmp977 # Offset: 17660
    000044fe: 	movq	0x100(%rsp), %rax
    00004506: 	leaq	0x1(%rax), %rsi
    0000450a: 	callq	_ZdlPvm@PLT # Offset: 17674
.Ltmp977:
    0000450f: 	movq	0xd0(%rsp), %rdi
    00004517: 	leaq	0xe0(%rsp), %rax
    0000451f: 	cmpq	%rax, %rdi
    00004522: 	je	.Ltmp978 # Offset: 17698
    00004524: 	movq	0xe0(%rsp), %rax
    0000452c: 	leaq	0x1(%rax), %rsi
    00004530: 	callq	_ZdlPvm@PLT # Offset: 17712
.Ltmp978:
    00004535: 	movq	0xb0(%rsp), %rdi
    0000453d: 	cmpq	0x68(%rsp), %rdi
    00004542: 	je	.Ltmp979 # Offset: 17730
    00004544: 	movq	0xc0(%rsp), %rax
    0000454c: 	leaq	0x1(%rax), %rsi
    00004550: 	callq	_ZdlPvm@PLT # Offset: 17744
.Ltmp979:
    00004555: 	movq	0x90(%rsp), %rdi
    0000455d: 	cmpq	0x60(%rsp), %rdi
    00004562: 	je	.Ltmp980 # Offset: 17762
    00004564: 	movq	0xa0(%rsp), %rax
    0000456c: 	leaq	0x1(%rax), %rsi
    00004570: 	callq	_ZdlPvm@PLT # Offset: 17776
.Ltmp980:
    00004575: 	movq	0x8(%rsp), %rdi
    0000457a: 	movl	$0x3e80, %esi
    0000457f: 	callq	_ZdlPvm@PLT # Offset: 17791
    00004584: 	movq	%rbp, %rdi
    00004587: 	callq	_Unwind_Resume@PLT # Offset: 17799
    0000458c: 	endbr64
    00004590: 	jmp	.Ltmp981 # Offset: 17808
    00004595: 	endbr64
    00004599: 	jmp	.Ltmp982 # Offset: 17817
    0000459e: 	endbr64
    000045a2: 	jmp	.Ltmp981 # Offset: 17826
    000045a7: 	endbr64
    000045ab: 	jmp	.Ltmp981 # Offset: 17835
    000045b0: 	endbr64
    000045b4: 	movq	%rax, %rbp
    000045b7: 	jmp	.Ltmp983 # Offset: 17847
    000045b9: 	endbr64
    000045bd: 	movq	%rax, %rbp
    000045c0: 	jmp	.Ltmp978 # Offset: 17856
.Ltmp983:
    000045c5: 	movq	0x1b0(%rsp), %rdi
    000045cd: 	leaq	0x1c0(%rsp), %rax
    000045d5: 	cmpq	%rax, %rdi
    000045d8: 	je	.Ltmp978 # Offset: 17880
.Ltmp985:
    000045de: 	movq	0x1c0(%rsp), %rax
    000045e6: 	leaq	0x1(%rax), %rsi
    000045ea: 	callq	_ZdlPvm@PLT # Offset: 17898
    000045ef: 	jmp	.Ltmp978 # Offset: 17903
    000045f4: 	endbr64
    000045f8: 	jmp	.Ltmp982 # Offset: 17912
    000045fd: 	endbr64
    00004601: 	jmp	.Ltmp982 # Offset: 17921
    00004606: 	endbr64
    0000460a: 	jmp	.Ltmp981 # Offset: 17930
    0000460f: 	endbr64
    00004613: 	jmp	.Ltmp984 # Offset: 17939
    00004618: 	endbr64
    0000461c: 	jmp	.Ltmp981 # Offset: 17948
    00004621: 	endbr64
    00004625: 	jmp	.Ltmp981 # Offset: 17957
    0000462a: 	endbr64
    0000462e: 	jmp	.Ltmp981 # Offset: 17966
.Ltmp966:
    00004633: 	movq	0x1b0(%rsp), %rdi
    0000463b: 	cmpq	%rbx, %rdi
    0000463e: 	jne	.Ltmp985 # Offset: 17982
    00004640: 	jmp	.Ltmp978 # Offset: 17984
    00004645: 	endbr64
.Ltmp987:
    00004649: 	movq	%rax, %rbp
    0000464c: 	jmp	.Ltmp986 # Offset: 17996
    0000464e: 	endbr64
    00004652: 	movq	%rax, %rbp
    00004655: 	jmp	.Ltmp974 # Offset: 18005
    0000465a: 	endbr64
    0000465e: 	jmp	.Ltmp987 # Offset: 18014
    00004660: 	endbr64
    00004664: 	jmp	.Ltmp987 # Offset: 18020
.Ltmp986:
    00004666: 	movq	0x1b0(%rsp), %rdi
    0000466e: 	cmpq	%rbx, %rdi
    00004671: 	je	.Ltmp975 # Offset: 18033
    00004677: 	movq	0x1c0(%rsp), %rax
    0000467f: 	leaq	0x1(%rax), %rsi
    00004683: 	callq	_ZdlPvm@PLT # Offset: 18051
    00004688: 	jmp	.Ltmp975 # Offset: 18056
    0000468d: 	endbr64
    00004691: 	jmp	.Ltmp987 # Offset: 18065
    00004693: 	endbr64
    00004697: 	jmp	.Ltmp987 # Offset: 18071
    00004699: 	endbr64
    0000469d: 	jmp	.Ltmp987 # Offset: 18077
    0000469f: 	endbr64
    000046a3: 	jmp	.Ltmp987 # Offset: 18083
    000046a5: 	endbr64
    000046a9: 	jmp	.Ltmp987 # Offset: 18089
    000046ab: 	endbr64
    000046af: 	jmp	.Ltmp987 # Offset: 18095
    000046b1: 	endbr64
    000046b5: 	jmp	.Ltmp987 # Offset: 18101
    000046b7: 	endbr64
    000046bb: 	jmp	.Ltmp987 # Offset: 18107
    000046bd: 	endbr64
.Ltmp989:
    000046c1: 	movq	%rax, %rbp
    000046c4: 	jmp	.Ltmp988 # Offset: 18116
    000046c6: 	endbr64
    000046ca: 	jmp	.Ltmp989 # Offset: 18122
    000046cc: 	endbr64
    000046d0: 	jmp	.Ltmp968 # Offset: 18128
.Ltmp988:
    000046d5: 	movq	0x1b0(%rsp), %rdi
    000046dd: 	cmpq	%rbx, %rdi
    000046e0: 	je	.Ltmp974 # Offset: 18144
    000046e6: 	movq	0x1c0(%rsp), %rax
    000046ee: 	leaq	0x1(%rax), %rsi
    000046f2: 	callq	_ZdlPvm@PLT # Offset: 18162
    000046f7: 	jmp	.Ltmp974 # Offset: 18167
.Ltmp967:
    000046fc: 	movq	0x1b0(%rsp), %rdi
    00004704: 	cmpq	%rbx, %rdi
    00004707: 	je	.Ltmp973 # Offset: 18183
    0000470d: 	movq	0x1c0(%rsp), %rax
    00004715: 	leaq	0x1(%rax), %rsi
    00004719: 	callq	_ZdlPvm@PLT # Offset: 18201
    0000471e: 	jmp	.Ltmp973 # Offset: 18206
    00004723: 	endbr64
    00004727: 	jmp	.Ltmp987 # Offset: 18215
    0000472c: 	endbr64
    00004730: 	jmp	.Ltmp987 # Offset: 18224
    00004735: 	endbr64
    00004739: 	jmp	.Ltmp989 # Offset: 18233
    0000473b: 	endbr64
    0000473f: 	jmp	.Ltmp989 # Offset: 18239
    00004741: 	endbr64
    00004745: 	jmp	.Ltmp989 # Offset: 18245
    0000474a: 	endbr64
    0000474e: 	jmp	.Ltmp989 # Offset: 18254
    00004753: 	endbr64
    00004757: 	jmp	.Ltmp989 # Offset: 18263
    0000475c: 	endbr64
    00004760: 	jmp	.Ltmp989 # Offset: 18272
    00004765: 	endbr64
    00004769: 	jmp	.Ltmp984 # Offset: 18281
    0000476e: 	endbr64
    00004772: 	jmp	.Ltmp984 # Offset: 18290
    00004777: 	endbr64
.Ltmp991:
    0000477b: 	movq	%rax, %rbp
    0000477e: 	jmp	.Ltmp990 # Offset: 18302
    00004780: 	endbr64
    00004784: 	jmp	.Ltmp991 # Offset: 18308
    00004786: 	endbr64
.Ltmp992:
    0000478a: 	movq	%rax, %rbp
    0000478d: 	jmp	.Ltmp975 # Offset: 18317
    00004792: 	endbr64
    00004796: 	jmp	.Ltmp991 # Offset: 18326
    00004798: 	endbr64
    0000479c: 	jmp	.Ltmp992 # Offset: 18332
.Ltmp990:
    0000479e: 	movq	0x1b0(%rsp), %rdi
    000047a6: 	cmpq	%rbx, %rdi
    000047a9: 	je	.Ltmp976 # Offset: 18345
    000047af: 	movq	0x1c0(%rsp), %rax
    000047b7: 	leaq	0x1(%rax), %rsi
    000047bb: 	callq	_ZdlPvm@PLT # Offset: 18363
    000047c0: 	jmp	.Ltmp976 # Offset: 18368
    000047c5: 	endbr64
    000047c9: 	jmp	.Ltmp991 # Offset: 18377
    000047cb: 	endbr64
    000047cf: 	jmp	.Ltmp991 # Offset: 18383
    000047d1: 	endbr64
    000047d5: 	jmp	.Ltmp991 # Offset: 18389
    000047d7: 	endbr64
    000047db: 	jmp	.Ltmp968 # Offset: 18395
    000047e0: 	endbr64
    000047e4: 	jmp	.Ltmp968 # Offset: 18404
    000047e9: 	endbr64
    000047ed: 	jmp	.Ltmp968 # Offset: 18413
    000047f2: 	endbr64
    000047f6: 	jmp	.Ltmp968 # Offset: 18422
    000047fb: 	endbr64
    000047ff: 	jmp	.Ltmp968 # Offset: 18431
    00004804: 	endbr64
    00004808: 	jmp	.Ltmp968 # Offset: 18440
    0000480d: 	endbr64
    00004811: 	jmp	.Ltmp968 # Offset: 18449
    00004816: 	endbr64
    0000481a: 	movq	%rax, %rbp
    0000481d: 	jmp	.Ltmp977 # Offset: 18461
    00004822: 	endbr64
.Ltmp994:
    00004826: 	movq	%rax, %rbp
    00004829: 	jmp	.Ltmp993 # Offset: 18473
    0000482b: 	endbr64
    0000482f: 	jmp	.Ltmp994 # Offset: 18479
    00004831: 	endbr64
    00004835: 	jmp	.Ltmp994 # Offset: 18485
    00004837: 	endbr64
    0000483b: 	jmp	.Ltmp968 # Offset: 18491
    00004840: 	endbr64
    00004844: 	jmp	.Ltmp968 # Offset: 18500
    00004849: 	endbr64
    0000484d: 	jmp	.Ltmp994 # Offset: 18509
.Ltmp993:
    0000484f: 	movq	0x1b0(%rsp), %rdi
    00004857: 	cmpq	%rbx, %rdi
    0000485a: 	je	.Ltmp977 # Offset: 18522
    00004860: 	movq	0x1c0(%rsp), %rax
    00004868: 	leaq	0x1(%rax), %rsi
    0000486c: 	callq	_ZdlPvm@PLT # Offset: 18540
    00004871: 	jmp	.Ltmp977 # Offset: 18545
    00004876: 	endbr64
    0000487a: 	jmp	.Ltmp968 # Offset: 18554
    0000487f: 	endbr64
    00004883: 	jmp	.Ltmp968 # Offset: 18563
    00004888: 	endbr64
    0000488c: 	jmp	.Ltmp968 # Offset: 18572
    00004891: 	endbr64
    00004895: 	jmp	.Ltmp968 # Offset: 18581
    0000489a: 	endbr64
    0000489e: 	jmp	.Ltmp968 # Offset: 18590
    000048a3: 	endbr64
    000048a7: 	jmp	.Ltmp968 # Offset: 18599
    000048ac: 	endbr64
    000048b0: 	jmp	.Ltmp968 # Offset: 18608
    000048b5: 	endbr64
    000048b9: 	jmp	.Ltmp968 # Offset: 18617
    000048be: 	endbr64
    000048c2: 	jmp	.Ltmp968 # Offset: 18626
    000048c7: 	endbr64
    000048cb: 	jmp	.Ltmp968 # Offset: 18635
    000048d0: 	endbr64
    000048d4: 	jmp	.Ltmp968 # Offset: 18644
    000048d9: 	endbr64
    000048dd: 	jmp	.Ltmp968 # Offset: 18653
    000048e2: 	endbr64
    000048e6: 	jmp	.Ltmp968 # Offset: 18662
    000048eb: 	endbr64
    000048ef: 	jmp	.Ltmp968 # Offset: 18671
    000048f4: 	endbr64
    000048f8: 	jmp	.Ltmp968 # Offset: 18680
    000048fd: 	endbr64
    00004901: 	jmp	.Ltmp968 # Offset: 18689
    00004906: 	endbr64
    0000490a: 	jmp	.Ltmp968 # Offset: 18698
    0000490f: 	endbr64
    00004913: 	jmp	.Ltmp968 # Offset: 18707
    00004918: 	endbr64
    0000491c: 	jmp	.Ltmp968 # Offset: 18716
    00004921: 	endbr64
    00004925: 	jmp	.Ltmp968 # Offset: 18725
    0000492a: 	endbr64
    0000492e: 	jmp	.Ltmp968 # Offset: 18734
    00004933: 	endbr64
    00004937: 	jmp	.Ltmp968 # Offset: 18743
    0000493c: 	endbr64
    00004940: 	jmp	.Ltmp968 # Offset: 18752
    00004945: 	endbr64
    00004949: 	jmp	.Ltmp968 # Offset: 18761
    0000494e: 	endbr64
    00004952: 	jmp	.Ltmp968 # Offset: 18770
    00004957: 	endbr64
    0000495b: 	jmp	.Ltmp968 # Offset: 18779
    00004960: 	endbr64
    00004964: 	jmp	.Ltmp968 # Offset: 18788
    00004969: 	endbr64
    0000496d: 	jmp	.Ltmp968 # Offset: 18797
    00004972: 	endbr64
    00004976: 	jmp	.Ltmp968 # Offset: 18806
    0000497b: 	endbr64
    0000497f: 	jmp	.Ltmp968 # Offset: 18815
    00004984: 	endbr64
    00004988: 	jmp	.Ltmp968 # Offset: 18824
    0000498d: 	endbr64
    00004991: 	jmp	.Ltmp968 # Offset: 18833
    00004996: 	endbr64
.Ltmp996:
    0000499a: 	movq	%rax, %rbp
    0000499d: 	jmp	.Ltmp995 # Offset: 18845
    0000499f: 	endbr64
    000049a3: 	jmp	.Ltmp996 # Offset: 18851
    000049a5: 	endbr64
    000049a9: 	jmp	.Ltmp984 # Offset: 18857
    000049ae: 	endbr64
    000049b2: 	jmp	.Ltmp984 # Offset: 18866
.Ltmp995:
    000049b7: 	movq	0x1b0(%rsp), %rdi
    000049bf: 	cmpq	%rbx, %rdi
    000049c2: 	je	.Ltmp972 # Offset: 18882
    000049c8: 	movq	0x1c0(%rsp), %rax
    000049d0: 	leaq	0x1(%rax), %rsi
    000049d4: 	callq	_ZdlPvm@PLT # Offset: 18900
    000049d9: 	jmp	.Ltmp972 # Offset: 18905
    000049de: 	endbr64
    000049e2: 	jmp	.Ltmp984 # Offset: 18914
    000049e7: 	endbr64
    000049eb: 	jmp	.Ltmp981 # Offset: 18923
    000049f0: 	endbr64
    000049f4: 	jmp	.Ltmp982 # Offset: 18932
    000049f9: 	endbr64
    000049fd: 	jmp	.Ltmp984 # Offset: 18941
    00004a02: 	endbr64
    00004a06: 	jmp	.Ltmp981 # Offset: 18950
    00004a0b: 	endbr64
    00004a0f: 	jmp	.Ltmp982 # Offset: 18959
    00004a14: 	endbr64
    00004a18: 	jmp	.Ltmp989 # Offset: 18968
    00004a1d: 	endbr64
    00004a21: 	jmp	.Ltmp989 # Offset: 18977
    00004a26: 	endbr64
    00004a2a: 	jmp	.Ltmp989 # Offset: 18986
    00004a2f: 	endbr64
    00004a33: 	jmp	.Ltmp989 # Offset: 18995
    00004a38: 	endbr64
    00004a3c: 	movq	%rax, %rbp
    00004a3f: 	jmp	.Ltmp973 # Offset: 19007
    00004a44: 	endbr64
    00004a48: 	jmp	.Ltmp984 # Offset: 19016
    00004a4d: 	endbr64
    00004a51: 	jmp	.Ltmp996 # Offset: 19025
    00004a56: 	endbr64
    00004a5a: 	movq	%rax, %rbp
    00004a5d: 	jmp	.Ltmp971 # Offset: 19037
    00004a62: 	endbr64
    00004a66: 	jmp	.Ltmp984 # Offset: 19046
    00004a6b: 	endbr64
    00004a6f: 	jmp	.Ltmp984 # Offset: 19055
    00004a74: 	endbr64
    00004a78: 	movq	%rax, %rbp
    00004a7b: 	jmp	.Ltmp972 # Offset: 19067
    00004a80: 	endbr64
    00004a84: 	jmp	.Ltmp996 # Offset: 19076
    00004a89: 	endbr64
    00004a8d: 	jmp	.Ltmp996 # Offset: 19085
    00004a92: 	endbr64
    00004a96: 	jmp	.Ltmp996 # Offset: 19094
    00004a9b: 	endbr64
    00004a9f: 	jmp	.Ltmp996 # Offset: 19103
    00004aa4: 	endbr64
    00004aa8: 	jmp	.Ltmp996 # Offset: 19112
    00004aad: 	endbr64
    00004ab1: 	jmp	.Ltmp996 # Offset: 19121
    00004ab6: 	endbr64
    00004aba: 	jmp	.Ltmp996 # Offset: 19130
    00004abf: 	endbr64
    00004ac3: 	jmp	.Ltmp996 # Offset: 19139
    00004ac8: 	endbr64
    00004acc: 	jmp	.Ltmp996 # Offset: 19148
    00004ad1: 	endbr64
    00004ad5: 	jmp	.Ltmp994 # Offset: 19157
    00004ada: 	endbr64
    00004ade: 	jmp	.Ltmp994 # Offset: 19166
    00004ae3: 	endbr64
    00004ae7: 	jmp	.Ltmp968 # Offset: 19175
    00004aec: 	endbr64
    00004af0: 	jmp	.Ltmp968 # Offset: 19184
    00004af5: 	endbr64
    00004af9: 	jmp	.Ltmp994 # Offset: 19193
    00004afe: 	endbr64
    00004b02: 	jmp	.Ltmp994 # Offset: 19202
    00004b07: 	endbr64
    00004b0b: 	jmp	.Ltmp994 # Offset: 19211
    00004b10: 	endbr64
    00004b14: 	jmp	.Ltmp994 # Offset: 19220
    00004b19: 	endbr64
    00004b1d: 	jmp	.Ltmp991 # Offset: 19229
    00004b22: 	endbr64
    00004b26: 	jmp	.Ltmp991 # Offset: 19238
    00004b2b: 	endbr64
    00004b2f: 	movq	%rax, %rbp
    00004b32: 	jmp	.Ltmp976 # Offset: 19250
    00004b37: 	endbr64
    00004b3b: 	jmp	.Ltmp991 # Offset: 19259
    00004b40: 	endbr64
    00004b44: 	jmp	.Ltmp991 # Offset: 19268
    00004b49: 	endbr64
    00004b4d: 	jmp	.Ltmp991 # Offset: 19277
    00004b52: 	endbr64
    00004b56: 	jmp	.Ltmp991 # Offset: 19286
    00004b5b: 	endbr64
    00004b5f: 	jmp	.Ltmp991 # Offset: 19295
    00004b64: 	endbr64
    00004b68: 	jmp	.Ltmp991 # Offset: 19304
    00004b6d: 	endbr64
    00004b71: 	jmp	.Ltmp991 # Offset: 19313
    00004b76: 	endbr64
    00004b7a: 	jmp	.Ltmp991 # Offset: 19322
    00004b7f: 	endbr64
    00004b83: 	jmp	.Ltmp991 # Offset: 19331
    00004b88: 	endbr64
    00004b8c: 	jmp	.Ltmp994 # Offset: 19340
    00004b91: 	endbr64
    00004b95: 	jmp	.Ltmp994 # Offset: 19349
    00004b9a: 	endbr64
    00004b9e: 	jmp	.Ltmp994 # Offset: 19358
    00004ba3: 	endbr64
    00004ba7: 	jmp	.Ltmp994 # Offset: 19367
    00004bac: 	endbr64
    00004bb0: 	jmp	.Ltmp994 # Offset: 19376
    00004bb5: 	endbr64
    00004bb9: 	jmp	.Ltmp994 # Offset: 19385
    00004bbe: 	endbr64
    00004bc2: 	jmp	.Ltmp994 # Offset: 19394
    00004bc7: 	endbr64
    00004bcb: 	jmp	.Ltmp994 # Offset: 19403
    00004bd0: 	endbr64
    00004bd4: 	jmp	.Ltmp994 # Offset: 19412
    00004bd9: 	endbr64
    00004bdd: 	jmp	.Ltmp994 # Offset: 19421
    00004be2: 	endbr64
    00004be6: 	jmp	.Ltmp994 # Offset: 19430
    00004beb: 	endbr64
    00004bef: 	jmp	.Ltmp994 # Offset: 19439
    00004bf4: 	endbr64
    00004bf8: 	jmp	.Ltmp994 # Offset: 19448
    00004bfd: 	endbr64
    00004c01: 	jmp	.Ltmp994 # Offset: 19457
DWARF CFI Instructions:
    <empty>
End of Function "_Z9TestLoopsIiEvv"

Binary Function "_Z15test_count_halfISt6vectorIhSaIhEEPFmRKS2_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z15test_count_halfISt6vectorIhSaIhEEPFmRKS2_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z15test_count_halfISt6vectorIhSaIhEEPFmRKS2_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/loop_normalize.cpp/1
  Number      : 273
  State       : disassembled
  Address     : 0xa9c0
  Size        : 0x214
  MaxSize     : 0x220
  Offset      : 0xa9c0
  Section     : .text
  Orc Section : .local.text._Z15test_count_halfISt6vectorIhSaIhEEPFmRKS2_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0272:
    00000000: 	pushq	%r14
    00000002: 	leaq	DATAat0x111c8(%rip), %r14
    00000009: 	pushq	%r13
    0000000b: 	movq	%rdx, %r13
    0000000e: 	pushq	%r12
    00000010: 	movq	%rdi, %r12
    00000013: 	pushq	%rbp
    00000014: 	movq	%rsi, %rbp
    00000017: 	pushq	%rbx
    00000018: 	xorl	%ebx, %ebx
    0000001a: 	subq	$0x10, %rsp
    0000001e: 	movq	%fs:0x28, %rax
    00000027: 	movq	%rax, 0x8(%rsp)
    0000002c: 	xorl	%eax, %eax
    0000002e: 	callq	clock@PLT # Offset: 46
    00000033: 	movq	%rax, start_time(%rip)
    0000003a: 	movl	iterations(%rip), %eax
    00000040: 	testl	%eax, %eax
    00000042: 	je	.Ltmp997 # Offset: 66
    00000044: 	nopl	(%rax) # Size: 4
.Ltmp999:
    00000048: 	movl	$0xfa0, %esi
    0000004d: 	movq	%r12, %rdi
    00000050: 	callq	*%rbp # Offset: 80
    00000052: 	cmpq	$0x7d0, %rax
    00000058: 	je	.Ltmp998 # Offset: 88
    0000005e: 	movq	(%r13), %rdx
    00000062: 	movq	%r14, %rsi
    00000065: 	movl	$0x1, %edi
    0000006a: 	xorl	%eax, %eax
    0000006c: 	addq	$0x1, %rbx
    00000070: 	callq	__printf_chk@PLT # Offset: 112
    00000075: 	movslq	iterations(%rip), %rax
    0000007c: 	cmpq	%rax, %rbx
    0000007f: 	jb	.Ltmp999 # Offset: 127
.Ltmp997:
    00000081: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000088: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000008f: 	subq	$0x20, %rax
    00000093: 	cmpq	%rax, %rbx
    00000096: 	je	.Ltmp1000 # Offset: 150
    0000009c: 	leaq	0x10(%rbx), %rdi
    000000a0: 	movq	0x8(%r13), %r12
    000000a4: 	movq	%rdi, (%rbx)
    000000a7: 	movq	(%r13), %rbp
    000000ab: 	movq	%rbp, %rax
    000000ae: 	addq	%r12, %rax
    000000b1: 	je	.Ltmp1001 # Offset: 177
    000000b3: 	testq	%rbp, %rbp
    000000b6: 	je	.Ltmp1002 # Offset: 182
.Ltmp1001:
    000000bc: 	movq	%r12, (%rsp)
    000000c0: 	cmpq	$0xf, %r12
    000000c4: 	ja	.Ltmp1003 # Offset: 196
    000000ca: 	cmpq	$0x1, %r12
    000000ce: 	jne	.Ltmp1004 # Offset: 206
    000000d4: 	movzbl	(%rbp), %eax
    000000d8: 	movb	%al, 0x10(%rbx)
.Ltmp1007:
    000000db: 	movq	%r12, 0x8(%rbx)
    000000df: 	movb	$0x0, (%rdi,%r12)
    000000e4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000000eb: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000000f2: 	addq	$0x20, %rax
    000000f6: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000000fd: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000104: 	je	.Ltmp1005 # Offset: 260
.Ltmp1008:
    0000010a: 	movq	-0x20(%rax), %rbp
    0000010e: 	callq	clock@PLT # Offset: 270
    00000113: 	movq	%rax, end_time(%rip)
    0000011a: 	movq	0x8(%rsp), %rdx
    0000011f: 	subq	%fs:0x28, %rdx
    00000128: 	jne	.Ltmp1006 # Offset: 296
    0000012e: 	subq	start_time(%rip), %rax
    00000135: 	pxor	%xmm0, %xmm0
    00000139: 	movq	%rbp, %rdi
    0000013c: 	cvtsi2sd	%rax, %xmm0
    00000141: 	divsd	DATAat0x11e88(%rip), %xmm0
    00000149: 	addq	$0x10, %rsp
    0000014d: 	popq	%rbx
    0000014e: 	popq	%rbp
    0000014f: 	popq	%r12
    00000151: 	popq	%r13
    00000153: 	popq	%r14
    00000155: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 341
    0000015a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp998:
    00000160: 	movslq	iterations(%rip), %rax
    00000167: 	addq	$0x1, %rbx
    0000016b: 	cmpq	%rax, %rbx
    0000016e: 	jb	.Ltmp999 # Offset: 366
    00000174: 	jmp	.Ltmp997 # Offset: 372
    00000179: 	nopl	(%rax) # Size: 7
.Ltmp1003:
    00000180: 	movq	%rbx, %rdi
    00000183: 	movq	%rsp, %rsi
    00000186: 	xorl	%edx, %edx
    00000188: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 392
    0000018d: 	movq	%rax, (%rbx)
    00000190: 	movq	%rax, %rdi
    00000193: 	movq	(%rsp), %rax
    00000197: 	movq	%rax, 0x10(%rbx)
.Ltmp1009:
    0000019b: 	movq	%r12, %rdx
    0000019e: 	movq	%rbp, %rsi
    000001a1: 	callq	memcpy@PLT # Offset: 417
    000001a6: 	movq	(%rsp), %r12
    000001aa: 	movq	(%rbx), %rdi
    000001ad: 	jmp	.Ltmp1007 # Offset: 429
    000001b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1000:
    000001b8: 	movq	%r13, %rsi
    000001bb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001c2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 450
    000001c7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001ce: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001d5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001dc: 	jne	.Ltmp1008 # Offset: 476
.Ltmp1005:
    000001e2: 	movq	-0x8(%rdx), %rax
    000001e6: 	addq	$0x200, %rax
    000001ec: 	jmp	.Ltmp1008 # Offset: 492
    000001f1: 	nopl	(%rax) # Size: 7
.Ltmp1004:
    000001f8: 	testq	%r12, %r12
    000001fb: 	je	.Ltmp1007 # Offset: 507
    00000201: 	jmp	.Ltmp1009 # Offset: 513
.Ltmp1006:
    00000203: 	callq	__stack_chk_fail@PLT # Offset: 515
.Ltmp1002:
    00000208: 	leaq	DATAat0x11158(%rip), %rdi
    0000020f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 527
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_count_halfISt6vectorIhSaIhEEPFmRKS2_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z15test_count_halfIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEPFmS6_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 274
  State       : disassembled
  Address     : 0xabe0
  Size        : 0x22c
  MaxSize     : 0x230
  Offset      : 0xabe0
  Section     : .text
  Orc Section : .local.text._Z15test_count_halfIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEPFmS6_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0273:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	leaq	DATAat0x111c8(%rip), %r15
    0000000d: 	pushq	%r14
    0000000f: 	pushq	%r13
    00000011: 	movq	%rdi, %r13
    00000014: 	pushq	%r12
    00000016: 	movq	%rdx, %r12
    00000019: 	pushq	%rbp
    0000001a: 	movq	%rsi, %rbp
    0000001d: 	pushq	%rbx
    0000001e: 	movq	%rbp, %r14
    00000021: 	xorl	%ebx, %ebx
    00000023: 	shrq	%r14
    00000026: 	subq	$0x28, %rsp
    0000002a: 	movq	%rcx, 0x8(%rsp)
    0000002f: 	movq	%fs:0x28, %rax
    00000038: 	movq	%rax, 0x18(%rsp)
    0000003d: 	xorl	%eax, %eax
    0000003f: 	callq	clock@PLT # Offset: 63
    00000044: 	movq	%rax, start_time(%rip)
    0000004b: 	movl	iterations(%rip), %eax
    00000051: 	testl	%eax, %eax
    00000053: 	je	.Ltmp1010 # Offset: 83
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp1012:
    00000058: 	movq	%rbp, %rsi
    0000005b: 	movq	%r13, %rdi
    0000005e: 	callq	*%r12 # Offset: 94
    00000061: 	cmpq	%rax, %r14
    00000064: 	je	.Ltmp1011 # Offset: 100
    0000006a: 	movq	0x8(%rsp), %rax
    0000006f: 	movq	%r15, %rsi
    00000072: 	movl	$0x1, %edi
    00000077: 	addq	$0x1, %rbx
    0000007b: 	movq	(%rax), %rdx
    0000007e: 	xorl	%eax, %eax
    00000080: 	callq	__printf_chk@PLT # Offset: 128
    00000085: 	movslq	iterations(%rip), %rax
    0000008c: 	cmpq	%rax, %rbx
    0000008f: 	jb	.Ltmp1012 # Offset: 143
.Ltmp1010:
    00000091: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000098: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000009f: 	subq	$0x20, %rax
    000000a3: 	cmpq	%rax, %rbx
    000000a6: 	je	.Ltmp1013 # Offset: 166
    000000ac: 	movq	0x8(%rsp), %rax
    000000b1: 	leaq	0x10(%rbx), %rdi
    000000b5: 	movq	%rdi, (%rbx)
    000000b8: 	movq	(%rax), %rbp
    000000bb: 	movq	0x8(%rax), %r12
    000000bf: 	movq	%rbp, %rax
    000000c2: 	addq	%r12, %rax
    000000c5: 	je	.Ltmp1014 # Offset: 197
    000000c7: 	testq	%rbp, %rbp
    000000ca: 	je	.Ltmp1015 # Offset: 202
.Ltmp1014:
    000000d0: 	movq	%r12, 0x10(%rsp)
    000000d5: 	cmpq	$0xf, %r12
    000000d9: 	ja	.Ltmp1016 # Offset: 217
    000000df: 	cmpq	$0x1, %r12
    000000e3: 	jne	.Ltmp1017 # Offset: 227
    000000e9: 	movzbl	(%rbp), %eax
    000000ed: 	movb	%al, 0x10(%rbx)
.Ltmp1020:
    000000f0: 	movq	%r12, 0x8(%rbx)
    000000f4: 	movb	$0x0, (%rdi,%r12)
    000000f9: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000100: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000107: 	addq	$0x20, %rax
    0000010b: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000112: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000119: 	je	.Ltmp1018 # Offset: 281
.Ltmp1021:
    0000011f: 	movq	-0x20(%rax), %rbp
    00000123: 	callq	clock@PLT # Offset: 291
    00000128: 	movq	%rax, end_time(%rip)
    0000012f: 	movq	0x18(%rsp), %rdx
    00000134: 	subq	%fs:0x28, %rdx
    0000013d: 	jne	.Ltmp1019 # Offset: 317
    00000143: 	subq	start_time(%rip), %rax
    0000014a: 	pxor	%xmm0, %xmm0
    0000014e: 	movq	%rbp, %rdi
    00000151: 	cvtsi2sd	%rax, %xmm0
    00000156: 	divsd	DATAat0x11e88(%rip), %xmm0
    0000015e: 	addq	$0x28, %rsp
    00000162: 	popq	%rbx
    00000163: 	popq	%rbp
    00000164: 	popq	%r12
    00000166: 	popq	%r13
    00000168: 	popq	%r14
    0000016a: 	popq	%r15
    0000016c: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 364
    00000171: 	nopl	(%rax) # Size: 7
.Ltmp1011:
    00000178: 	movslq	iterations(%rip), %rax
    0000017f: 	addq	$0x1, %rbx
    00000183: 	cmpq	%rbx, %rax
    00000186: 	ja	.Ltmp1012 # Offset: 390
    0000018c: 	jmp	.Ltmp1010 # Offset: 396
    00000191: 	nopl	(%rax) # Size: 7
.Ltmp1016:
    00000198: 	movq	%rbx, %rdi
    0000019b: 	leaq	0x10(%rsp), %rsi
    000001a0: 	xorl	%edx, %edx
    000001a2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 418
    000001a7: 	movq	%rax, (%rbx)
    000001aa: 	movq	%rax, %rdi
    000001ad: 	movq	0x10(%rsp), %rax
    000001b2: 	movq	%rax, 0x10(%rbx)
.Ltmp1022:
    000001b6: 	movq	%r12, %rdx
    000001b9: 	movq	%rbp, %rsi
    000001bc: 	callq	memcpy@PLT # Offset: 444
    000001c1: 	movq	0x10(%rsp), %r12
    000001c6: 	movq	(%rbx), %rdi
    000001c9: 	jmp	.Ltmp1020 # Offset: 457
    000001ce: 	nop # Size: 2
.Ltmp1013:
    000001d0: 	movq	0x8(%rsp), %rsi
    000001d5: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001dc: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 476
    000001e1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001e8: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001ef: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001f6: 	jne	.Ltmp1021 # Offset: 502
.Ltmp1018:
    000001fc: 	movq	-0x8(%rdx), %rax
    00000200: 	addq	$0x200, %rax
    00000206: 	jmp	.Ltmp1021 # Offset: 518
    0000020b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1017:
    00000210: 	testq	%r12, %r12
    00000213: 	je	.Ltmp1020 # Offset: 531
    00000219: 	jmp	.Ltmp1022 # Offset: 537
.Ltmp1019:
    0000021b: 	callq	__stack_chk_fail@PLT # Offset: 539
.Ltmp1015:
    00000220: 	leaq	DATAat0x11158(%rip), %rdi
    00000227: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 551
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_count_halfIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEPFmS6_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9TestLoopsIhEvv" after disassembly {
  Number      : 275
  State       : disassembled
  Address     : 0xae10
  Size        : 0x55b7
  MaxSize     : 0x55b7
  Offset      : 0xae10
  Section     : .text
  Orc Section : .local.text._Z9TestLoopsIhEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0274:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x1000, %rsp
    00000015: 	orq	$0x0, (%rsp)
    0000001a: 	subq	$0x188, %rsp
    00000021: 	movl	$0xfa0, %edi
    00000026: 	movq	%fs:0x28, %rax
    0000002f: 	movq	%rax, 0x1178(%rsp)
    00000037: 	xorl	%eax, %eax
    00000039: 	callq	_Znwm@PLT # Offset: 57
    0000003e: 	leaq	0x9(%rax), %rdi
    00000042: 	leaq	0xfa8(%rax), %rcx
    00000049: 	movq	%rax, 0x8(%rsp)
    0000004e: 	andq	$-0x8, %rdi
    00000052: 	movq	$0x0, 0x1(%rax)
    0000005a: 	movb	$0x0, (%rax)
    0000005d: 	movq	%rcx, 0x20(%rsp)
    00000062: 	movq	$0x0, 0xf98(%rax)
    0000006d: 	subl	%edi, %eax
    0000006f: 	leal	0xfa0(%rax), %ecx
    00000075: 	xorl	%eax, %eax
    00000077: 	shrl	$0x3, %ecx
    0000007a: 	rep		stosq	%rax, %es:(%rdi)
    0000007d: 	leaq	0xa0(%rsp), %rax
    00000085: 	movl	$0x746e6975, 0xa0(%rsp)
    00000090: 	movq	%rax, 0x60(%rsp)
    00000095: 	movq	%rax, 0x90(%rsp)
    0000009d: 	movl	$0x5f38, %eax
    000000a2: 	movdqa	_Z7gLabelsB5cxx11+32(%rip), %xmm1
    000000aa: 	movw	%ax, 0xa4(%rsp)
    000000b2: 	leaq	0xc0(%rsp), %rax
    000000ba: 	movdqa	_Z7gLabelsB5cxx11+16(%rip), %xmm2
    000000c2: 	movq	%rax, 0x68(%rsp)
    000000c7: 	movhlps	%xmm1, %xmm5
    000000ca: 	movq	_Z7gLabelsB5cxx11+56(%rip), %r14
    000000d1: 	movq	%rax, 0xb0(%rsp)
    000000d9: 	movabsq	$0x2a745f38746e6975, %rax
    000000e3: 	movq	%xmm5, %rcx
    000000e8: 	movq	%xmm2, %rbp
    000000ed: 	movq	%rax, 0xc0(%rsp)
    000000f5: 	leaq	0x8(%rcx), %r12
    000000f9: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000100: 	movb	$0x74, 0xa6(%rsp)
    00000108: 	movq	%rax, 0x10(%rsp)
    0000010d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rax
    00000114: 	movq	$0x7, 0x98(%rsp)
    00000120: 	movb	$0x0, 0xa7(%rsp)
    00000128: 	movq	$0x8, 0xb8(%rsp)
    00000134: 	movb	$0x0, 0xc8(%rsp)
    0000013c: 	movq	%rax, 0x28(%rsp)
    00000141: 	movaps	%xmm2, 0x30(%rsp)
    00000146: 	movaps	%xmm1, 0x40(%rsp)
    0000014b: 	movq	%xmm5, 0x50(%rsp)
    00000151: 	movq	%xmm1, 0x18(%rsp)
    00000157: 	cmpq	%r12, %rax
    0000015a: 	jbe	.Ltmp1023 # Offset: 346
    0000015c: 	movq	%r12, %r13
    0000015f: 	movq	%rax, %r15
    00000162: 	movq	%xmm2, 0x58(%rsp)
    00000168: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1026:
    00000170: 	movq	(%r13), %rbp
    00000174: 	leaq	0x200(%rbp), %rbx
    0000017b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1025:
    00000180: 	movq	(%rbp), %rdi
    00000184: 	leaq	0x10(%rbp), %rax
    00000188: 	cmpq	%rax, %rdi
    0000018b: 	je	.Ltmp1024 # Offset: 395
    00000191: 	movq	0x10(%rbp), %rax
    00000195: 	addq	$0x20, %rbp
    00000199: 	leaq	0x1(%rax), %rsi
    0000019d: 	callq	_ZdlPvm@PLT # Offset: 413
    000001a2: 	cmpq	%rbp, %rbx
    000001a5: 	jne	.Ltmp1025 # Offset: 421
    000001a7: 	addq	$0x8, %r13
    000001ab: 	cmpq	%r13, %r15
    000001ae: 	ja	.Ltmp1026 # Offset: 430
.Ltmp1331:
    000001b0: 	movq	0x58(%rsp), %rbp
.Ltmp1023:
    000001b5: 	movq	0x50(%rsp), %rcx
    000001ba: 	cmpq	%rcx, 0x28(%rsp)
    000001bf: 	je	.Ltmp1027 # Offset: 447
    000001c5: 	cmpq	%rbp, 0x18(%rsp)
    000001ca: 	je	.Ltmp1028 # Offset: 458
.Ltmp1031:
    000001cc: 	movq	(%rbp), %rdi
    000001d0: 	leaq	0x10(%rbp), %rax
    000001d4: 	cmpq	%rax, %rdi
    000001d7: 	je	.Ltmp1029 # Offset: 471
.Ltmp1030:
    000001d9: 	movq	0x10(%rbp), %rax
    000001dd: 	addq	$0x20, %rbp
    000001e1: 	leaq	0x1(%rax), %rsi
    000001e5: 	callq	_ZdlPvm@PLT # Offset: 485
    000001ea: 	cmpq	0x18(%rsp), %rbp
    000001ef: 	je	.Ltmp1028 # Offset: 495
    000001f1: 	movq	(%rbp), %rdi
    000001f5: 	leaq	0x10(%rbp), %rax
    000001f9: 	cmpq	%rax, %rdi
    000001fc: 	jne	.Ltmp1030 # Offset: 508
.Ltmp1029:
    000001fe: 	addq	$0x20, %rbp
    00000202: 	cmpq	0x18(%rsp), %rbp
    00000207: 	jne	.Ltmp1031 # Offset: 519
    00000209: 	cmpq	%r14, 0x10(%rsp)
    0000020e: 	je	.Ltmp1032 # Offset: 526
.Ltmp1034:
    00000210: 	movq	(%r14), %rdi
    00000213: 	leaq	0x10(%r14), %rax
    00000217: 	cmpq	%rax, %rdi
    0000021a: 	je	.Ltmp1033 # Offset: 538
    0000021c: 	movq	0x10(%r14), %rax
    00000220: 	leaq	0x1(%rax), %rsi
    00000224: 	callq	_ZdlPvm@PLT # Offset: 548
.Ltmp1033:
    00000229: 	addq	$0x20, %r14
.Ltmp1028:
    0000022d: 	cmpq	%r14, 0x10(%rsp)
    00000232: 	jne	.Ltmp1034 # Offset: 562
.Ltmp1032:
    00000234: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rax
    0000023b: 	leaq	0x8(%rax), %rbx
    0000023f: 	cmpq	%r12, %rbx
    00000242: 	jbe	.Ltmp1035 # Offset: 578
    00000244: 	nopl	(%rax) # Size: 4
.Ltmp1036:
    00000248: 	movq	(%r12), %rdi
    0000024c: 	movl	$0x200, %esi
    00000251: 	addq	$0x8, %r12
    00000255: 	callq	_ZdlPvm@PLT # Offset: 597
    0000025a: 	cmpq	%r12, %rbx
    0000025d: 	ja	.Ltmp1036 # Offset: 605
.Ltmp1035:
    0000025f: 	movq	0x8(%rsp), %rbx
    00000264: 	movzbl	init_value(%rip), %eax
    0000026b: 	movabsq	$0x101010101010101, %rdx
    00000275: 	leaq	0x1d0(%rsp), %r12
    0000027d: 	movdqa	0x30(%rsp), %xmm3
    00000283: 	movdqa	0x40(%rsp), %xmm4
    00000289: 	movl	$0x1f4, %ecx
    0000028e: 	movq	%r12, %rdi
    00000291: 	imulq	%rdx, %rax
    00000295: 	leaq	0x1b0(%rsp), %rbp
    0000029d: 	movaps	%xmm3, _Z7gLabelsB5cxx11+48(%rip)
    000002a4: 	leaq	0x90(%rsp), %r13
    000002ac: 	leaq	DATAat0x111d8(%rip), %rdx
    000002b3: 	movaps	%xmm4, _Z7gLabelsB5cxx11+64(%rip)
    000002ba: 	movq	%r13, %rsi
    000002bd: 	rep		stosq	%rax, %es:(%rdi)
    000002c0: 	movq	%rax, (%rbx)
    000002c3: 	movq	0x20(%rsp), %rcx
    000002c8: 	leaq	0x8(%rbx), %rdi
    000002cc: 	andq	$-0x8, %rdi
    000002d0: 	movq	%rax, -0x10(%rcx)
    000002d4: 	movq	%rbx, %rcx
    000002d7: 	subq	%rdi, %rcx
    000002da: 	addl	$0xfa0, %ecx
    000002e0: 	shrl	$0x3, %ecx
    000002e3: 	rep		stosq	%rax, %es:(%rdi)
    000002e6: 	movb	$0x0, 0x7d0(%rbx)
    000002ed: 	movq	%rbp, %rdi
    000002f0: 	movb	$0x0, 0x9a0(%rsp)
    000002f8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 760
    000002fd: 	movq	%rbp, %rdx
    00000300: 	leaq	_Z18count_half_for_optIhEmPT_m(%rip), %rsi
    00000307: 	movq	%r12, %rdi
    0000030a: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 778
    0000030f: 	movq	0x1b0(%rsp), %rdi
    00000317: 	leaq	0x1c0(%rsp), %rbx
    0000031f: 	cmpq	%rbx, %rdi
    00000322: 	je	.Ltmp1037 # Offset: 802
    00000324: 	movq	0x1c0(%rsp), %rax
    0000032c: 	leaq	0x1(%rax), %rsi
    00000330: 	callq	_ZdlPvm@PLT # Offset: 816
.Ltmp1037:
    00000335: 	movq	0x90(%rsp), %r15
    0000033d: 	movq	0x98(%rsp), %r14
    00000345: 	movq	%rbx, 0x1b0(%rsp)
    0000034d: 	movq	%r15, %rax
    00000350: 	addq	%r14, %rax
    00000353: 	je	.Ltmp1038 # Offset: 851
    00000355: 	testq	%r15, %r15
    00000358: 	je	.Ltmp1039 # Offset: 856
.Ltmp1038:
    0000035e: 	movq	%r14, 0x70(%rsp)
    00000363: 	cmpq	$0xf, %r14
    00000367: 	ja	.Ltmp1040 # Offset: 871
    0000036d: 	cmpq	$0x1, %r14
    00000371: 	jne	.Ltmp1041 # Offset: 881
    00000377: 	movzbl	(%r15), %eax
    0000037b: 	movb	%al, 0x1c0(%rsp)
    00000382: 	movq	%rbx, %rax
.Ltmp1333:
    00000385: 	movq	%r14, 0x1b8(%rsp)
    0000038d: 	movb	$0x0, (%rax,%r14)
    00000392: 	movabsq	$0x3fffffffffffffff, %rax
    0000039c: 	subq	0x1b8(%rsp), %rax
    000003a4: 	cmpq	$0x16, %rax
    000003a8: 	jbe	.Ltmp1042 # Offset: 936
    000003ae: 	movl	$0x17, %edx
    000003b3: 	leaq	DATAat0x111ec(%rip), %rsi
    000003ba: 	movq	%rbp, %rdi
    000003bd: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 957
    000003c2: 	movq	%rbp, %rdx
    000003c5: 	leaq	_Z15count_half_optAIhEmPT_m(%rip), %rsi
    000003cc: 	movq	%r12, %rdi
    000003cf: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 975
    000003d4: 	movq	0x1b0(%rsp), %rdi
    000003dc: 	cmpq	%rbx, %rdi
    000003df: 	je	.Ltmp1043 # Offset: 991
    000003e1: 	movq	0x1c0(%rsp), %rax
    000003e9: 	leaq	0x1(%rax), %rsi
    000003ed: 	callq	_ZdlPvm@PLT # Offset: 1005
.Ltmp1043:
    000003f2: 	leaq	DATAat0x11204(%rip), %rdx
    000003f9: 	movq	%r13, %rsi
    000003fc: 	movq	%rbp, %rdi
    000003ff: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1023
    00000404: 	movq	%rbp, %rdx
    00000407: 	leaq	_Z26count_half_for_uncountableIhEmPT_m(%rip), %rsi
    0000040e: 	movq	%r12, %rdi
    00000411: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1041
    00000416: 	movq	0x1b0(%rsp), %rdi
    0000041e: 	cmpq	%rbx, %rdi
    00000421: 	je	.Ltmp1044 # Offset: 1057
    00000423: 	movq	0x1c0(%rsp), %rax
    0000042b: 	leaq	0x1(%rax), %rsi
    0000042f: 	callq	_ZdlPvm@PLT # Offset: 1071
.Ltmp1044:
    00000434: 	leaq	DATAat0x1121b(%rip), %rdx
    0000043b: 	movq	%r13, %rsi
    0000043e: 	movq	%rbp, %rdi
    00000441: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1089
    00000446: 	movq	%rbp, %rdx
    00000449: 	leaq	_Z23count_half_for_pointer1IhEmPT_m(%rip), %rsi
    00000450: 	movq	%r12, %rdi
    00000453: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1107
    00000458: 	movq	0x1b0(%rsp), %rdi
    00000460: 	cmpq	%rbx, %rdi
    00000463: 	je	.Ltmp1045 # Offset: 1123
    00000465: 	movq	0x1c0(%rsp), %rax
    0000046d: 	leaq	0x1(%rax), %rsi
    00000471: 	callq	_ZdlPvm@PLT # Offset: 1137
.Ltmp1045:
    00000476: 	movq	0x90(%rsp), %r15
    0000047e: 	movq	0x98(%rsp), %r14
    00000486: 	movq	%rbx, 0x1b0(%rsp)
    0000048e: 	movq	%r15, %rax
    00000491: 	addq	%r14, %rax
    00000494: 	je	.Ltmp1046 # Offset: 1172
    00000496: 	testq	%r15, %r15
    00000499: 	je	.Ltmp1047 # Offset: 1177
.Ltmp1046:
    0000049f: 	movq	%r14, 0x70(%rsp)
    000004a4: 	cmpq	$0xf, %r14
    000004a8: 	ja	.Ltmp1048 # Offset: 1192
    000004ae: 	cmpq	$0x1, %r14
    000004b2: 	jne	.Ltmp1049 # Offset: 1202
    000004b8: 	movzbl	(%r15), %eax
    000004bc: 	movb	%al, 0x1c0(%rsp)
    000004c3: 	movq	%rbx, %rax
.Ltmp1337:
    000004c6: 	movq	%r14, 0x1b8(%rsp)
    000004ce: 	movb	$0x0, (%rax,%r14)
    000004d3: 	movabsq	$0x3fffffffffffffff, %rax
    000004dd: 	subq	0x1b8(%rsp), %rax
    000004e5: 	cmpq	$0x17, %rax
    000004e9: 	jbe	.Ltmp1050 # Offset: 1257
    000004ef: 	movl	$0x18, %edx
    000004f4: 	leaq	DATAat0x11234(%rip), %rsi
    000004fb: 	movq	%rbp, %rdi
    000004fe: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1278
    00000503: 	movq	%rbp, %rdx
    00000506: 	leaq	_Z23count_half_for_pointer2IhEmPT_m(%rip), %rsi
    0000050d: 	movq	%r12, %rdi
    00000510: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1296
    00000515: 	movq	0x1b0(%rsp), %rdi
    0000051d: 	cmpq	%rbx, %rdi
    00000520: 	je	.Ltmp1051 # Offset: 1312
    00000522: 	movq	0x1c0(%rsp), %rax
    0000052a: 	leaq	0x1(%rax), %rsi
    0000052e: 	callq	_ZdlPvm@PLT # Offset: 1326
.Ltmp1051:
    00000533: 	movq	0x90(%rsp), %r15
    0000053b: 	movq	0x98(%rsp), %r14
    00000543: 	movq	%rbx, 0x1b0(%rsp)
    0000054b: 	movq	%r15, %rax
    0000054e: 	addq	%r14, %rax
    00000551: 	je	.Ltmp1052 # Offset: 1361
    00000553: 	testq	%r15, %r15
    00000556: 	je	.Ltmp1053 # Offset: 1366
.Ltmp1052:
    0000055c: 	movq	%r14, 0x70(%rsp)
    00000561: 	cmpq	$0xf, %r14
    00000565: 	ja	.Ltmp1054 # Offset: 1381
    0000056b: 	cmpq	$0x1, %r14
    0000056f: 	jne	.Ltmp1055 # Offset: 1391
    00000575: 	movzbl	(%r15), %eax
    00000579: 	movb	%al, 0x1c0(%rsp)
    00000580: 	movq	%rbx, %rax
.Ltmp1335:
    00000583: 	movq	%r14, 0x1b8(%rsp)
    0000058b: 	movb	$0x0, (%rax,%r14)
    00000590: 	movabsq	$0x3fffffffffffffff, %rax
    0000059a: 	subq	0x1b8(%rsp), %rax
    000005a2: 	cmpq	$0x17, %rax
    000005a6: 	jbe	.Ltmp1056 # Offset: 1446
    000005ac: 	movl	$0x18, %edx
    000005b1: 	leaq	DATAat0x1124d(%rip), %rsi
    000005b8: 	movq	%rbp, %rdi
    000005bb: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1467
    000005c0: 	movq	%rbp, %rdx
    000005c3: 	leaq	_Z23count_half_for_pointer3IhEmPT_m(%rip), %rsi
    000005ca: 	movq	%r12, %rdi
    000005cd: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1485
    000005d2: 	movq	0x1b0(%rsp), %rdi
    000005da: 	cmpq	%rbx, %rdi
    000005dd: 	je	.Ltmp1057 # Offset: 1501
    000005df: 	movq	0x1c0(%rsp), %rax
    000005e7: 	leaq	0x1(%rax), %rsi
    000005eb: 	callq	_ZdlPvm@PLT # Offset: 1515
.Ltmp1057:
    000005f0: 	movq	0x90(%rsp), %r15
    000005f8: 	movq	0x98(%rsp), %r14
    00000600: 	movq	%rbx, 0x1b0(%rsp)
    00000608: 	movq	%r15, %rax
    0000060b: 	addq	%r14, %rax
    0000060e: 	je	.Ltmp1058 # Offset: 1550
    00000610: 	testq	%r15, %r15
    00000613: 	je	.Ltmp1059 # Offset: 1555
.Ltmp1058:
    00000619: 	movq	%r14, 0x70(%rsp)
    0000061e: 	cmpq	$0xf, %r14
    00000622: 	ja	.Ltmp1060 # Offset: 1570
    00000628: 	cmpq	$0x1, %r14
    0000062c: 	jne	.Ltmp1061 # Offset: 1580
    00000632: 	movzbl	(%r15), %eax
    00000636: 	movb	%al, 0x1c0(%rsp)
    0000063d: 	movq	%rbx, %rax
.Ltmp1345:
    00000640: 	movq	%r14, 0x1b8(%rsp)
    00000648: 	movb	$0x0, (%rax,%r14)
    0000064d: 	movabsq	$0x3fffffffffffffff, %rax
    00000657: 	subq	0x1b8(%rsp), %rax
    0000065f: 	cmpq	$0x17, %rax
    00000663: 	jbe	.Ltmp1062 # Offset: 1635
    00000669: 	movl	$0x18, %edx
    0000066e: 	leaq	DATAat0x11266(%rip), %rsi
    00000675: 	movq	%rbp, %rdi
    00000678: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1656
    0000067d: 	movq	%rbp, %rdx
    00000680: 	leaq	_Z23count_half_for_pointer4IhEmPT_m(%rip), %rsi
    00000687: 	movq	%r12, %rdi
    0000068a: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1674
    0000068f: 	movq	0x1b0(%rsp), %rdi
    00000697: 	cmpq	%rbx, %rdi
    0000069a: 	je	.Ltmp1063 # Offset: 1690
    0000069c: 	movq	0x1c0(%rsp), %rax
    000006a4: 	leaq	0x1(%rax), %rsi
    000006a8: 	callq	_ZdlPvm@PLT # Offset: 1704
.Ltmp1063:
    000006ad: 	leaq	DATAat0x1127f(%rip), %rdx
    000006b4: 	movq	%r13, %rsi
    000006b7: 	movq	%rbp, %rdi
    000006ba: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1722
    000006bf: 	movq	%rbp, %rdx
    000006c2: 	leaq	_Z23count_half_for_pointer5IhEmPT_m(%rip), %rsi
    000006c9: 	movq	%r12, %rdi
    000006cc: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1740
    000006d1: 	movq	0x1b0(%rsp), %rdi
    000006d9: 	cmpq	%rbx, %rdi
    000006dc: 	je	.Ltmp1064 # Offset: 1756
    000006de: 	movq	0x1c0(%rsp), %rax
    000006e6: 	leaq	0x1(%rax), %rsi
    000006ea: 	callq	_ZdlPvm@PLT # Offset: 1770
.Ltmp1064:
    000006ef: 	movq	0x90(%rsp), %r15
    000006f7: 	movq	0x98(%rsp), %r14
    000006ff: 	movq	%rbx, 0x1b0(%rsp)
    00000707: 	movq	%r15, %rax
    0000070a: 	addq	%r14, %rax
    0000070d: 	je	.Ltmp1065 # Offset: 1805
    0000070f: 	testq	%r15, %r15
    00000712: 	je	.Ltmp1066 # Offset: 1810
.Ltmp1065:
    00000718: 	movq	%r14, 0x70(%rsp)
    0000071d: 	cmpq	$0xf, %r14
    00000721: 	ja	.Ltmp1067 # Offset: 1825
    00000727: 	cmpq	$0x1, %r14
    0000072b: 	jne	.Ltmp1068 # Offset: 1835
    00000731: 	movzbl	(%r15), %eax
    00000735: 	movb	%al, 0x1c0(%rsp)
    0000073c: 	movq	%rbx, %rax
.Ltmp1343:
    0000073f: 	movq	%r14, 0x1b8(%rsp)
    00000747: 	movb	$0x0, (%rax,%r14)
    0000074c: 	movabsq	$0x3fffffffffffffff, %rax
    00000756: 	subq	0x1b8(%rsp), %rax
    0000075e: 	cmpq	$0x17, %rax
    00000762: 	jbe	.Ltmp1069 # Offset: 1890
    00000768: 	movl	$0x18, %edx
    0000076d: 	leaq	DATAat0x11298(%rip), %rsi
    00000774: 	movq	%rbp, %rdi
    00000777: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1911
    0000077c: 	movq	%rbp, %rdx
    0000077f: 	leaq	_Z23count_half_for_pointer6IhEmPT_m(%rip), %rsi
    00000786: 	movq	%r12, %rdi
    00000789: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1929
    0000078e: 	movq	0x1b0(%rsp), %rdi
    00000796: 	cmpq	%rbx, %rdi
    00000799: 	je	.Ltmp1070 # Offset: 1945
    0000079b: 	movq	0x1c0(%rsp), %rax
    000007a3: 	leaq	0x1(%rax), %rsi
    000007a7: 	callq	_ZdlPvm@PLT # Offset: 1959
.Ltmp1070:
    000007ac: 	movq	0x90(%rsp), %r15
    000007b4: 	movq	0x98(%rsp), %r14
    000007bc: 	movq	%rbx, 0x1b0(%rsp)
    000007c4: 	movq	%r15, %rax
    000007c7: 	addq	%r14, %rax
    000007ca: 	je	.Ltmp1071 # Offset: 1994
    000007cc: 	testq	%r15, %r15
    000007cf: 	je	.Ltmp1072 # Offset: 1999
.Ltmp1071:
    000007d5: 	movq	%r14, 0x70(%rsp)
    000007da: 	cmpq	$0xf, %r14
    000007de: 	ja	.Ltmp1073 # Offset: 2014
    000007e4: 	cmpq	$0x1, %r14
    000007e8: 	jne	.Ltmp1074 # Offset: 2024
    000007ee: 	movzbl	(%r15), %eax
    000007f2: 	movb	%al, 0x1c0(%rsp)
    000007f9: 	movq	%rbx, %rax
.Ltmp1341:
    000007fc: 	movq	%r14, 0x1b8(%rsp)
    00000804: 	movb	$0x0, (%rax,%r14)
    00000809: 	movabsq	$0x3fffffffffffffff, %rax
    00000813: 	subq	0x1b8(%rsp), %rax
    0000081b: 	cmpq	$0x17, %rax
    0000081f: 	jbe	.Ltmp1075 # Offset: 2079
    00000825: 	movl	$0x18, %edx
    0000082a: 	leaq	DATAat0x112b1(%rip), %rsi
    00000831: 	movq	%rbp, %rdi
    00000834: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2100
    00000839: 	movq	%rbp, %rdx
    0000083c: 	leaq	_Z23count_half_for_pointer7IhEmPT_m(%rip), %rsi
    00000843: 	movq	%r12, %rdi
    00000846: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2118
    0000084b: 	movq	0x1b0(%rsp), %rdi
    00000853: 	cmpq	%rbx, %rdi
    00000856: 	je	.Ltmp1076 # Offset: 2134
    00000858: 	movq	0x1c0(%rsp), %rax
    00000860: 	leaq	0x1(%rax), %rsi
    00000864: 	callq	_ZdlPvm@PLT # Offset: 2148
.Ltmp1076:
    00000869: 	movq	0x90(%rsp), %r15
    00000871: 	movq	0x98(%rsp), %r14
    00000879: 	movq	%rbx, 0x1b0(%rsp)
    00000881: 	movq	%r15, %rax
    00000884: 	addq	%r14, %rax
    00000887: 	je	.Ltmp1077 # Offset: 2183
    00000889: 	testq	%r15, %r15
    0000088c: 	je	.Ltmp1078 # Offset: 2188
.Ltmp1077:
    00000892: 	movq	%r14, 0x70(%rsp)
    00000897: 	cmpq	$0xf, %r14
    0000089b: 	ja	.Ltmp1079 # Offset: 2203
    000008a1: 	cmpq	$0x1, %r14
    000008a5: 	jne	.Ltmp1080 # Offset: 2213
    000008ab: 	movzbl	(%r15), %eax
    000008af: 	movb	%al, 0x1c0(%rsp)
    000008b6: 	movq	%rbx, %rax
.Ltmp1339:
    000008b9: 	movq	%r14, 0x1b8(%rsp)
    000008c1: 	movb	$0x0, (%rax,%r14)
    000008c6: 	movabsq	$0x3fffffffffffffff, %rax
    000008d0: 	subq	0x1b8(%rsp), %rax
    000008d8: 	cmpq	$0x17, %rax
    000008dc: 	jbe	.Ltmp1081 # Offset: 2268
    000008e2: 	movl	$0x18, %edx
    000008e7: 	leaq	DATAat0x112ca(%rip), %rsi
    000008ee: 	movq	%rbp, %rdi
    000008f1: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2289
    000008f6: 	movq	%rbp, %rdx
    000008f9: 	leaq	_Z23count_half_for_pointer8IhEmPT_m(%rip), %rsi
    00000900: 	movq	%r12, %rdi
    00000903: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2307
    00000908: 	movq	0x1b0(%rsp), %rdi
    00000910: 	cmpq	%rbx, %rdi
    00000913: 	je	.Ltmp1082 # Offset: 2323
    00000915: 	movq	0x1c0(%rsp), %rax
    0000091d: 	leaq	0x1(%rax), %rsi
    00000921: 	callq	_ZdlPvm@PLT # Offset: 2337
.Ltmp1082:
    00000926: 	leaq	DATAat0x112e3(%rip), %rdx
    0000092d: 	movq	%r13, %rsi
    00000930: 	movq	%rbp, %rdi
    00000933: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2355
    00000938: 	movq	%rbp, %rdx
    0000093b: 	leaq	_Z21count_half_for_index1IhEmPT_m(%rip), %rsi
    00000942: 	movq	%r12, %rdi
    00000945: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2373
    0000094a: 	movq	0x1b0(%rsp), %rdi
    00000952: 	cmpq	%rbx, %rdi
    00000955: 	je	.Ltmp1083 # Offset: 2389
    00000957: 	movq	0x1c0(%rsp), %rax
    0000095f: 	leaq	0x1(%rax), %rsi
    00000963: 	callq	_ZdlPvm@PLT # Offset: 2403
.Ltmp1083:
    00000968: 	movq	0x90(%rsp), %r15
    00000970: 	movq	0x98(%rsp), %r14
    00000978: 	movq	%rbx, 0x1b0(%rsp)
    00000980: 	movq	%r15, %rax
    00000983: 	addq	%r14, %rax
    00000986: 	je	.Ltmp1084 # Offset: 2438
    00000988: 	testq	%r15, %r15
    0000098b: 	je	.Ltmp1085 # Offset: 2443
.Ltmp1084:
    00000991: 	movq	%r14, 0x70(%rsp)
    00000996: 	cmpq	$0xf, %r14
    0000099a: 	ja	.Ltmp1086 # Offset: 2458
    000009a0: 	cmpq	$0x1, %r14
    000009a4: 	jne	.Ltmp1087 # Offset: 2468
    000009aa: 	movzbl	(%r15), %eax
    000009ae: 	movb	%al, 0x1c0(%rsp)
    000009b5: 	movq	%rbx, %rax
.Ltmp1361:
    000009b8: 	movq	%r14, 0x1b8(%rsp)
    000009c0: 	movb	$0x0, (%rax,%r14)
    000009c5: 	movabsq	$0x3fffffffffffffff, %rax
    000009cf: 	subq	0x1b8(%rsp), %rax
    000009d7: 	cmpq	$0x15, %rax
    000009db: 	jbe	.Ltmp1088 # Offset: 2523
    000009e1: 	movl	$0x16, %edx
    000009e6: 	leaq	DATAat0x112fa(%rip), %rsi
    000009ed: 	movq	%rbp, %rdi
    000009f0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2544
    000009f5: 	movq	%rbp, %rdx
    000009f8: 	leaq	_Z21count_half_for_index2IhEmPT_m(%rip), %rsi
    000009ff: 	movq	%r12, %rdi
    00000a02: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2562
    00000a07: 	movq	0x1b0(%rsp), %rdi
    00000a0f: 	cmpq	%rbx, %rdi
    00000a12: 	je	.Ltmp1089 # Offset: 2578
    00000a14: 	movq	0x1c0(%rsp), %rax
    00000a1c: 	leaq	0x1(%rax), %rsi
    00000a20: 	callq	_ZdlPvm@PLT # Offset: 2592
.Ltmp1089:
    00000a25: 	movq	0x90(%rsp), %r15
    00000a2d: 	movq	0x98(%rsp), %r14
    00000a35: 	movq	%rbx, 0x1b0(%rsp)
    00000a3d: 	movq	%r15, %rax
    00000a40: 	addq	%r14, %rax
    00000a43: 	je	.Ltmp1090 # Offset: 2627
    00000a45: 	testq	%r15, %r15
    00000a48: 	je	.Ltmp1091 # Offset: 2632
.Ltmp1090:
    00000a4e: 	movq	%r14, 0x70(%rsp)
    00000a53: 	cmpq	$0xf, %r14
    00000a57: 	ja	.Ltmp1092 # Offset: 2647
    00000a5d: 	cmpq	$0x1, %r14
    00000a61: 	jne	.Ltmp1093 # Offset: 2657
    00000a67: 	movzbl	(%r15), %eax
    00000a6b: 	movb	%al, 0x1c0(%rsp)
    00000a72: 	movq	%rbx, %rax
.Ltmp1359:
    00000a75: 	movq	%r14, 0x1b8(%rsp)
    00000a7d: 	movb	$0x0, (%rax,%r14)
    00000a82: 	movabsq	$0x3fffffffffffffff, %rax
    00000a8c: 	subq	0x1b8(%rsp), %rax
    00000a94: 	cmpq	$0x15, %rax
    00000a98: 	jbe	.Ltmp1094 # Offset: 2712
    00000a9e: 	movl	$0x16, %edx
    00000aa3: 	leaq	DATAat0x11311(%rip), %rsi
    00000aaa: 	movq	%rbp, %rdi
    00000aad: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2733
    00000ab2: 	movq	%rbp, %rdx
    00000ab5: 	leaq	_Z21count_half_for_index3IhEmPT_m(%rip), %rsi
    00000abc: 	movq	%r12, %rdi
    00000abf: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2751
    00000ac4: 	movq	0x1b0(%rsp), %rdi
    00000acc: 	cmpq	%rbx, %rdi
    00000acf: 	je	.Ltmp1095 # Offset: 2767
    00000ad1: 	movq	0x1c0(%rsp), %rax
    00000ad9: 	leaq	0x1(%rax), %rsi
    00000add: 	callq	_ZdlPvm@PLT # Offset: 2781
.Ltmp1095:
    00000ae2: 	leaq	DATAat0x11328(%rip), %rdx
    00000ae9: 	movq	%r13, %rsi
    00000aec: 	movq	%rbp, %rdi
    00000aef: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2799
    00000af4: 	movq	%rbp, %rdx
    00000af7: 	leaq	_Z21count_half_for_index4IhEmPT_m(%rip), %rsi
    00000afe: 	movq	%r12, %rdi
    00000b01: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2817
    00000b06: 	movq	0x1b0(%rsp), %rdi
    00000b0e: 	cmpq	%rbx, %rdi
    00000b11: 	je	.Ltmp1096 # Offset: 2833
    00000b13: 	movq	0x1c0(%rsp), %rax
    00000b1b: 	leaq	0x1(%rax), %rsi
    00000b1f: 	callq	_ZdlPvm@PLT # Offset: 2847
.Ltmp1096:
    00000b24: 	movq	0x90(%rsp), %r15
    00000b2c: 	movq	0x98(%rsp), %r14
    00000b34: 	movq	%rbx, 0x1b0(%rsp)
    00000b3c: 	movq	%r15, %rax
    00000b3f: 	addq	%r14, %rax
    00000b42: 	je	.Ltmp1097 # Offset: 2882
    00000b44: 	testq	%r15, %r15
    00000b47: 	je	.Ltmp1098 # Offset: 2887
.Ltmp1097:
    00000b4d: 	movq	%r14, 0x70(%rsp)
    00000b52: 	cmpq	$0xf, %r14
    00000b56: 	ja	.Ltmp1099 # Offset: 2902
    00000b5c: 	cmpq	$0x1, %r14
    00000b60: 	jne	.Ltmp1100 # Offset: 2912
    00000b66: 	movzbl	(%r15), %eax
    00000b6a: 	movb	%al, 0x1c0(%rsp)
    00000b71: 	movq	%rbx, %rax
.Ltmp1357:
    00000b74: 	movq	%r14, 0x1b8(%rsp)
    00000b7c: 	movb	$0x0, (%rax,%r14)
    00000b81: 	movabsq	$0x3fffffffffffffff, %rax
    00000b8b: 	subq	0x1b8(%rsp), %rax
    00000b93: 	cmpq	$0x15, %rax
    00000b97: 	jbe	.Ltmp1101 # Offset: 2967
    00000b9d: 	movl	$0x16, %edx
    00000ba2: 	leaq	DATAat0x1133f(%rip), %rsi
    00000ba9: 	movq	%rbp, %rdi
    00000bac: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2988
    00000bb1: 	movq	%rbp, %rdx
    00000bb4: 	leaq	_Z21count_half_for_index5IhEmPT_m(%rip), %rsi
    00000bbb: 	movq	%r12, %rdi
    00000bbe: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3006
    00000bc3: 	movq	0x1b0(%rsp), %rdi
    00000bcb: 	cmpq	%rbx, %rdi
    00000bce: 	je	.Ltmp1102 # Offset: 3022
    00000bd0: 	movq	0x1c0(%rsp), %rax
    00000bd8: 	leaq	0x1(%rax), %rsi
    00000bdc: 	callq	_ZdlPvm@PLT # Offset: 3036
.Ltmp1102:
    00000be1: 	movq	0x90(%rsp), %r15
    00000be9: 	movq	0x98(%rsp), %r14
    00000bf1: 	movq	%rbx, 0x1b0(%rsp)
    00000bf9: 	movq	%r15, %rax
    00000bfc: 	addq	%r14, %rax
    00000bff: 	je	.Ltmp1103 # Offset: 3071
    00000c01: 	testq	%r15, %r15
    00000c04: 	je	.Ltmp1104 # Offset: 3076
.Ltmp1103:
    00000c0a: 	movq	%r14, 0x70(%rsp)
    00000c0f: 	cmpq	$0xf, %r14
    00000c13: 	ja	.Ltmp1105 # Offset: 3091
    00000c19: 	cmpq	$0x1, %r14
    00000c1d: 	jne	.Ltmp1106 # Offset: 3101
    00000c23: 	movzbl	(%r15), %eax
    00000c27: 	movb	%al, 0x1c0(%rsp)
    00000c2e: 	movq	%rbx, %rax
.Ltmp1355:
    00000c31: 	movq	%r14, 0x1b8(%rsp)
    00000c39: 	movb	$0x0, (%rax,%r14)
    00000c3e: 	movabsq	$0x3fffffffffffffff, %rax
    00000c48: 	subq	0x1b8(%rsp), %rax
    00000c50: 	cmpq	$0x15, %rax
    00000c54: 	jbe	.Ltmp1107 # Offset: 3156
    00000c5a: 	movl	$0x16, %edx
    00000c5f: 	leaq	DATAat0x11356(%rip), %rsi
    00000c66: 	movq	%rbp, %rdi
    00000c69: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3177
    00000c6e: 	movq	%rbp, %rdx
    00000c71: 	leaq	_Z21count_half_for_index6IhEmPT_m(%rip), %rsi
    00000c78: 	movq	%r12, %rdi
    00000c7b: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3195
    00000c80: 	movq	0x1b0(%rsp), %rdi
    00000c88: 	cmpq	%rbx, %rdi
    00000c8b: 	je	.Ltmp1108 # Offset: 3211
    00000c8d: 	movq	0x1c0(%rsp), %rax
    00000c95: 	leaq	0x1(%rax), %rsi
    00000c99: 	callq	_ZdlPvm@PLT # Offset: 3225
.Ltmp1108:
    00000c9e: 	leaq	DATAat0x1136d(%rip), %rdx
    00000ca5: 	movq	%r13, %rsi
    00000ca8: 	movq	%rbp, %rdi
    00000cab: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3243
    00000cb0: 	movq	%rbp, %rdx
    00000cb3: 	leaq	_Z21count_half_for_index7IhEmPT_m(%rip), %rsi
    00000cba: 	movq	%r12, %rdi
    00000cbd: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3261
    00000cc2: 	movq	0x1b0(%rsp), %rdi
    00000cca: 	cmpq	%rbx, %rdi
    00000ccd: 	je	.Ltmp1109 # Offset: 3277
    00000ccf: 	movq	0x1c0(%rsp), %rax
    00000cd7: 	leaq	0x1(%rax), %rsi
    00000cdb: 	callq	_ZdlPvm@PLT # Offset: 3291
.Ltmp1109:
    00000ce0: 	movq	0x90(%rsp), %r15
    00000ce8: 	movq	0x98(%rsp), %r14
    00000cf0: 	movq	%rbx, 0x1b0(%rsp)
    00000cf8: 	movq	%r15, %rax
    00000cfb: 	addq	%r14, %rax
    00000cfe: 	je	.Ltmp1110 # Offset: 3326
    00000d00: 	testq	%r15, %r15
    00000d03: 	je	.Ltmp1111 # Offset: 3331
.Ltmp1110:
    00000d09: 	movq	%r14, 0x70(%rsp)
    00000d0e: 	cmpq	$0xf, %r14
    00000d12: 	ja	.Ltmp1112 # Offset: 3346
    00000d18: 	cmpq	$0x1, %r14
    00000d1c: 	jne	.Ltmp1113 # Offset: 3356
    00000d22: 	movzbl	(%r15), %eax
    00000d26: 	movb	%al, 0x1c0(%rsp)
    00000d2d: 	movq	%rbx, %rax
.Ltmp1353:
    00000d30: 	movq	%r14, 0x1b8(%rsp)
    00000d38: 	movb	$0x0, (%rax,%r14)
    00000d3d: 	movabsq	$0x3fffffffffffffff, %rax
    00000d47: 	subq	0x1b8(%rsp), %rax
    00000d4f: 	cmpq	$0x15, %rax
    00000d53: 	jbe	.Ltmp1114 # Offset: 3411
    00000d59: 	movl	$0x16, %edx
    00000d5e: 	leaq	DATAat0x11384(%rip), %rsi
    00000d65: 	movq	%rbp, %rdi
    00000d68: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3432
    00000d6d: 	movq	%rbp, %rdx
    00000d70: 	leaq	_Z21count_half_for_index8IhEmPT_m(%rip), %rsi
    00000d77: 	movq	%r12, %rdi
    00000d7a: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3450
    00000d7f: 	movq	0x1b0(%rsp), %rdi
    00000d87: 	cmpq	%rbx, %rdi
    00000d8a: 	je	.Ltmp1115 # Offset: 3466
    00000d8c: 	movq	0x1c0(%rsp), %rax
    00000d94: 	leaq	0x1(%rax), %rsi
    00000d98: 	callq	_ZdlPvm@PLT # Offset: 3480
.Ltmp1115:
    00000d9d: 	leaq	DATAat0x1139b(%rip), %rdx
    00000da4: 	movq	%r13, %rsi
    00000da7: 	movq	%rbp, %rdi
    00000daa: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3498
    00000daf: 	movq	%rbp, %rdx
    00000db2: 	leaq	_Z21count_half_for_index9IhEmPT_m(%rip), %rsi
    00000db9: 	movq	%r12, %rdi
    00000dbc: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3516
    00000dc1: 	movq	0x1b0(%rsp), %rdi
    00000dc9: 	cmpq	%rbx, %rdi
    00000dcc: 	je	.Ltmp1116 # Offset: 3532
    00000dce: 	movq	0x1c0(%rsp), %rax
    00000dd6: 	leaq	0x1(%rax), %rsi
    00000dda: 	callq	_ZdlPvm@PLT # Offset: 3546
.Ltmp1116:
    00000ddf: 	movq	0x90(%rsp), %r15
    00000de7: 	movq	0x98(%rsp), %r14
    00000def: 	movq	%rbx, 0x1b0(%rsp)
    00000df7: 	movq	%r15, %rax
    00000dfa: 	addq	%r14, %rax
    00000dfd: 	je	.Ltmp1117 # Offset: 3581
    00000dff: 	testq	%r15, %r15
    00000e02: 	je	.Ltmp1118 # Offset: 3586
.Ltmp1117:
    00000e08: 	movq	%r14, 0x70(%rsp)
    00000e0d: 	cmpq	$0xf, %r14
    00000e11: 	ja	.Ltmp1119 # Offset: 3601
    00000e17: 	cmpq	$0x1, %r14
    00000e1b: 	jne	.Ltmp1120 # Offset: 3611
    00000e21: 	movzbl	(%r15), %eax
    00000e25: 	movb	%al, 0x1c0(%rsp)
    00000e2c: 	movq	%rbx, %rax
.Ltmp1351:
    00000e2f: 	movq	%r14, 0x1b8(%rsp)
    00000e37: 	movb	$0x0, (%rax,%r14)
    00000e3c: 	movabsq	$0x3fffffffffffffff, %rax
    00000e46: 	subq	0x1b8(%rsp), %rax
    00000e4e: 	cmpq	$0x16, %rax
    00000e52: 	jbe	.Ltmp1121 # Offset: 3666
    00000e58: 	movl	$0x17, %edx
    00000e5d: 	leaq	DATAat0x113b2(%rip), %rsi
    00000e64: 	movq	%rbp, %rdi
    00000e67: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3687
    00000e6c: 	movq	%rbp, %rdx
    00000e6f: 	leaq	_Z22count_half_for_index10IhEmPT_m(%rip), %rsi
    00000e76: 	movq	%r12, %rdi
    00000e79: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3705
    00000e7e: 	movq	0x1b0(%rsp), %rdi
    00000e86: 	cmpq	%rbx, %rdi
    00000e89: 	je	.Ltmp1122 # Offset: 3721
    00000e8b: 	movq	0x1c0(%rsp), %rax
    00000e93: 	leaq	0x1(%rax), %rsi
    00000e97: 	callq	_ZdlPvm@PLT # Offset: 3735
.Ltmp1122:
    00000e9c: 	leaq	0xb0(%rsp), %r14
    00000ea4: 	leaq	DATAat0x113ca(%rip), %rdx
    00000eab: 	movq	%rbp, %rdi
    00000eae: 	movq	%r14, %rsi
    00000eb1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3761
    00000eb6: 	movq	%rbp, %rdx
    00000eb9: 	leaq	_Z24count_half_for_iterator1IPhEmT_m(%rip), %rsi
    00000ec0: 	movq	%r12, %rdi
    00000ec3: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3779
    00000ec8: 	movq	0x1b0(%rsp), %rdi
    00000ed0: 	cmpq	%rbx, %rdi
    00000ed3: 	je	.Ltmp1123 # Offset: 3795
    00000ed5: 	movq	0x1c0(%rsp), %rax
    00000edd: 	leaq	0x1(%rax), %rsi
    00000ee1: 	callq	_ZdlPvm@PLT # Offset: 3809
.Ltmp1123:
    00000ee6: 	leaq	DATAat0x113e4(%rip), %rdx
    00000eed: 	movq	%r14, %rsi
    00000ef0: 	movq	%rbp, %rdi
    00000ef3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3827
    00000ef8: 	movq	%rbp, %rdx
    00000efb: 	leaq	_Z24count_half_for_iterator2IPhEmT_m(%rip), %rsi
    00000f02: 	movq	%r12, %rdi
    00000f05: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3845
    00000f0a: 	movq	0x1b0(%rsp), %rdi
    00000f12: 	cmpq	%rbx, %rdi
    00000f15: 	je	.Ltmp1124 # Offset: 3861
    00000f17: 	movq	0x1c0(%rsp), %rax
    00000f1f: 	leaq	0x1(%rax), %rsi
    00000f23: 	callq	_ZdlPvm@PLT # Offset: 3875
.Ltmp1124:
    00000f28: 	leaq	DATAat0x113fe(%rip), %rdx
    00000f2f: 	movq	%r14, %rsi
    00000f32: 	movq	%rbp, %rdi
    00000f35: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3893
    00000f3a: 	movq	%rbp, %rdx
    00000f3d: 	leaq	_Z24count_half_for_iterator3IPhEmT_m(%rip), %rsi
    00000f44: 	movq	%r12, %rdi
    00000f47: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3911
    00000f4c: 	movq	0x1b0(%rsp), %rdi
    00000f54: 	cmpq	%rbx, %rdi
    00000f57: 	je	.Ltmp1125 # Offset: 3927
    00000f59: 	movq	0x1c0(%rsp), %rax
    00000f61: 	leaq	0x1(%rax), %rsi
    00000f65: 	callq	_ZdlPvm@PLT # Offset: 3941
.Ltmp1125:
    00000f6a: 	leaq	DATAat0x11418(%rip), %rdx
    00000f71: 	movq	%r14, %rsi
    00000f74: 	movq	%rbp, %rdi
    00000f77: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3959
    00000f7c: 	movq	%rbp, %rdx
    00000f7f: 	leaq	_Z24count_half_for_iterator4IPhEmT_m(%rip), %rsi
    00000f86: 	movq	%r12, %rdi
    00000f89: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3977
    00000f8e: 	movq	0x1b0(%rsp), %rdi
    00000f96: 	cmpq	%rbx, %rdi
    00000f99: 	je	.Ltmp1126 # Offset: 3993
    00000f9b: 	movq	0x1c0(%rsp), %rax
    00000fa3: 	leaq	0x1(%rax), %rsi
    00000fa7: 	callq	_ZdlPvm@PLT # Offset: 4007
.Ltmp1126:
    00000fac: 	leaq	DATAat0x11432(%rip), %rdx
    00000fb3: 	movq	%r14, %rsi
    00000fb6: 	movq	%rbp, %rdi
    00000fb9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4025
    00000fbe: 	movq	%rbp, %rdx
    00000fc1: 	leaq	_Z24count_half_for_iterator5IPhEmT_m(%rip), %rsi
    00000fc8: 	movq	%r12, %rdi
    00000fcb: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 4043
    00000fd0: 	movq	0x1b0(%rsp), %rdi
    00000fd8: 	cmpq	%rbx, %rdi
    00000fdb: 	je	.Ltmp1127 # Offset: 4059
    00000fdd: 	movq	0x1c0(%rsp), %rax
    00000fe5: 	leaq	0x1(%rax), %rsi
    00000fe9: 	callq	_ZdlPvm@PLT # Offset: 4073
.Ltmp1127:
    00000fee: 	leaq	DATAat0x1144c(%rip), %rdx
    00000ff5: 	movq	%r14, %rsi
    00000ff8: 	movq	%rbp, %rdi
    00000ffb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4091
    00001000: 	movq	%rbp, %rdx
    00001003: 	leaq	_Z24count_half_for_iterator6IPhEmT_m(%rip), %rsi
    0000100a: 	movq	%r12, %rdi
    0000100d: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 4109
    00001012: 	movq	0x1b0(%rsp), %rdi
    0000101a: 	cmpq	%rbx, %rdi
    0000101d: 	je	.Ltmp1128 # Offset: 4125
    0000101f: 	movq	0x1c0(%rsp), %rax
    00001027: 	leaq	0x1(%rax), %rsi
    0000102b: 	callq	_ZdlPvm@PLT # Offset: 4139
.Ltmp1128:
    00001030: 	leaq	DATAat0x1144c(%rip), %rdx
    00001037: 	movq	%r14, %rsi
    0000103a: 	movq	%rbp, %rdi
    0000103d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4157
    00001042: 	movq	%rbp, %rdx
    00001045: 	leaq	_Z24count_half_for_iterator6IPhEmT_m(%rip), %rsi
    0000104c: 	movq	%r12, %rdi
    0000104f: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 4175
    00001054: 	movq	0x1b0(%rsp), %rdi
    0000105c: 	cmpq	%rbx, %rdi
    0000105f: 	je	.Ltmp1129 # Offset: 4191
    00001061: 	movq	0x1c0(%rsp), %rax
    00001069: 	leaq	0x1(%rax), %rsi
    0000106d: 	callq	_ZdlPvm@PLT # Offset: 4205
.Ltmp1129:
    00001072: 	movq	0xb0(%rsp), %rax
    0000107a: 	movq	0xb8(%rsp), %r15
    00001082: 	movq	%rbx, 0x1b0(%rsp)
    0000108a: 	movq	%rax, %rcx
    0000108d: 	movq	%rax, 0x10(%rsp)
    00001092: 	addq	%r15, %rcx
    00001095: 	je	.Ltmp1130 # Offset: 4245
    00001097: 	testq	%rax, %rax
    0000109a: 	je	.Ltmp1131 # Offset: 4250
.Ltmp1130:
    000010a0: 	movq	%r15, 0x70(%rsp)
    000010a5: 	cmpq	$0xf, %r15
    000010a9: 	ja	.Ltmp1132 # Offset: 4265
    000010af: 	cmpq	$0x1, %r15
    000010b3: 	jne	.Ltmp1133 # Offset: 4275
    000010b9: 	movq	0x10(%rsp), %rax
    000010be: 	movzbl	(%rax), %eax
    000010c1: 	movb	%al, 0x1c0(%rsp)
    000010c8: 	movq	%rbx, %rax
.Ltmp1349:
    000010cb: 	movq	%r15, 0x1b8(%rsp)
    000010d3: 	movb	$0x0, (%rax,%r15)
    000010d8: 	movabsq	$0x3fffffffffffffff, %rax
    000010e2: 	subq	0x1b8(%rsp), %rax
    000010ea: 	cmpq	$0x18, %rax
    000010ee: 	jbe	.Ltmp1134 # Offset: 4334
    000010f4: 	movl	$0x19, %edx
    000010f9: 	leaq	DATAat0x1144c(%rip), %rsi
    00001100: 	movq	%rbp, %rdi
    00001103: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4355
    00001108: 	movq	%rbp, %rdx
    0000110b: 	leaq	_Z24count_half_for_iterator6IPhEmT_m(%rip), %rsi
    00001112: 	movq	%r12, %rdi
    00001115: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 4373
    0000111a: 	movq	0x1b0(%rsp), %rdi
    00001122: 	cmpq	%rbx, %rdi
    00001125: 	je	.Ltmp1135 # Offset: 4389
    00001127: 	movq	0x1c0(%rsp), %rax
    0000112f: 	leaq	0x1(%rax), %rsi
    00001133: 	callq	_ZdlPvm@PLT # Offset: 4403
.Ltmp1135:
    00001138: 	leaq	DATAat0x11466(%rip), %rdx
    0000113f: 	movq	%r14, %rsi
    00001142: 	movq	%rbp, %rdi
    00001145: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4421
    0000114a: 	movq	%rbp, %rdx
    0000114d: 	leaq	_Z24count_half_for_iterator7IPhEmT_m(%rip), %rsi
    00001154: 	movq	%r12, %rdi
    00001157: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 4439
    0000115c: 	movq	0x1b0(%rsp), %rdi
    00001164: 	cmpq	%rbx, %rdi
    00001167: 	je	.Ltmp1136 # Offset: 4455
    00001169: 	movq	0x1c0(%rsp), %rax
    00001171: 	leaq	0x1(%rax), %rsi
    00001175: 	callq	_ZdlPvm@PLT # Offset: 4469
.Ltmp1136:
    0000117a: 	leaq	DATAat0x11480(%rip), %rdx
    00001181: 	movq	%r14, %rsi
    00001184: 	movq	%rbp, %rdi
    00001187: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4487
    0000118c: 	movq	%rbp, %rdx
    0000118f: 	leaq	_Z24count_half_for_iterator8IPhEmT_m(%rip), %rsi
    00001196: 	movq	%r12, %rdi
    00001199: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 4505
    0000119e: 	movq	0x1b0(%rsp), %rdi
    000011a6: 	cmpq	%rbx, %rdi
    000011a9: 	je	.Ltmp1137 # Offset: 4521
    000011ab: 	movq	0x1c0(%rsp), %rax
    000011b3: 	leaq	0x1(%rax), %rsi
    000011b7: 	callq	_ZdlPvm@PLT # Offset: 4535
.Ltmp1137:
    000011bc: 	leaq	DATAat0x11c28(%rip), %rdx
    000011c3: 	movq	%r13, %rsi
    000011c6: 	movq	%rbp, %rdi
    000011c9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4553
    000011ce: 	movq	0x8(%rsp), %rdi
    000011d3: 	movq	%rbp, %rcx
    000011d6: 	movl	$0xfa0, %esi
    000011db: 	leaq	_Z24count_half_for_iterator1IN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEmT_m(%rip), %rdx
    000011e2: 	callq	_Z15test_count_halfIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEPFmS6_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4578
    000011e7: 	movq	0x1b0(%rsp), %rdi
    000011ef: 	cmpq	%rbx, %rdi
    000011f2: 	je	.Ltmp1138 # Offset: 4594
    000011f4: 	movq	0x1c0(%rsp), %rax
    000011fc: 	leaq	0x1(%rax), %rsi
    00001200: 	callq	_ZdlPvm@PLT # Offset: 4608
.Ltmp1138:
    00001205: 	leaq	DATAat0x11c50(%rip), %rdx
    0000120c: 	movq	%r13, %rsi
    0000120f: 	movq	%rbp, %rdi
    00001212: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4626
    00001217: 	movq	0x8(%rsp), %rdi
    0000121c: 	movq	%rbp, %rcx
    0000121f: 	movl	$0xfa0, %esi
    00001224: 	leaq	_Z24count_half_for_iterator2IN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEmT_m(%rip), %rdx
    0000122b: 	callq	_Z15test_count_halfIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEPFmS6_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4651
    00001230: 	movq	0x1b0(%rsp), %rdi
    00001238: 	cmpq	%rbx, %rdi
    0000123b: 	je	.Ltmp1139 # Offset: 4667
    0000123d: 	movq	0x1c0(%rsp), %rax
    00001245: 	leaq	0x1(%rax), %rsi
    00001249: 	callq	_ZdlPvm@PLT # Offset: 4681
.Ltmp1139:
    0000124e: 	leaq	DATAat0x11c78(%rip), %rdx
    00001255: 	movq	%r13, %rsi
    00001258: 	movq	%rbp, %rdi
    0000125b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4699
    00001260: 	movq	0x8(%rsp), %rdi
    00001265: 	movq	%rbp, %rcx
    00001268: 	movl	$0xfa0, %esi
    0000126d: 	leaq	_Z24count_half_for_iterator3IN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEmT_m(%rip), %rdx
    00001274: 	callq	_Z15test_count_halfIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEPFmS6_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4724
    00001279: 	movq	0x1b0(%rsp), %rdi
    00001281: 	cmpq	%rbx, %rdi
    00001284: 	je	.Ltmp1140 # Offset: 4740
    00001286: 	movq	0x1c0(%rsp), %rax
    0000128e: 	leaq	0x1(%rax), %rsi
    00001292: 	callq	_ZdlPvm@PLT # Offset: 4754
.Ltmp1140:
    00001297: 	leaq	DATAat0x11ca0(%rip), %rdx
    0000129e: 	movq	%r13, %rsi
    000012a1: 	movq	%rbp, %rdi
    000012a4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4772
    000012a9: 	movq	0x8(%rsp), %rdi
    000012ae: 	movq	%rbp, %rcx
    000012b1: 	movl	$0xfa0, %esi
    000012b6: 	leaq	_Z24count_half_for_iterator4IN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEmT_m(%rip), %rdx
    000012bd: 	callq	_Z15test_count_halfIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEPFmS6_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4797
    000012c2: 	movq	0x1b0(%rsp), %rdi
    000012ca: 	cmpq	%rbx, %rdi
    000012cd: 	je	.Ltmp1141 # Offset: 4813
    000012cf: 	movq	0x1c0(%rsp), %rax
    000012d7: 	leaq	0x1(%rax), %rsi
    000012db: 	callq	_ZdlPvm@PLT # Offset: 4827
.Ltmp1141:
    000012e0: 	leaq	DATAat0x11cc8(%rip), %rdx
    000012e7: 	movq	%r13, %rsi
    000012ea: 	movq	%rbp, %rdi
    000012ed: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4845
    000012f2: 	movq	0x8(%rsp), %rdi
    000012f7: 	movq	%rbp, %rcx
    000012fa: 	movl	$0xfa0, %esi
    000012ff: 	leaq	_Z24count_half_for_iterator5IN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEmT_m(%rip), %rdx
    00001306: 	callq	_Z15test_count_halfIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEPFmS6_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4870
    0000130b: 	movq	0x1b0(%rsp), %rdi
    00001313: 	cmpq	%rbx, %rdi
    00001316: 	je	.Ltmp1142 # Offset: 4886
    00001318: 	movq	0x1c0(%rsp), %rax
    00001320: 	leaq	0x1(%rax), %rsi
    00001324: 	callq	_ZdlPvm@PLT # Offset: 4900
.Ltmp1142:
    00001329: 	leaq	DATAat0x11cf0(%rip), %rdx
    00001330: 	movq	%r13, %rsi
    00001333: 	movq	%rbp, %rdi
    00001336: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4918
    0000133b: 	movq	0x8(%rsp), %rdi
    00001340: 	movq	%rbp, %rcx
    00001343: 	movl	$0xfa0, %esi
    00001348: 	leaq	_Z24count_half_for_iterator6IN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEmT_m(%rip), %rdx
    0000134f: 	callq	_Z15test_count_halfIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEPFmS6_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4943
    00001354: 	movq	0x1b0(%rsp), %rdi
    0000135c: 	cmpq	%rbx, %rdi
    0000135f: 	je	.Ltmp1143 # Offset: 4959
    00001361: 	movq	0x1c0(%rsp), %rax
    00001369: 	leaq	0x1(%rax), %rsi
    0000136d: 	callq	_ZdlPvm@PLT # Offset: 4973
.Ltmp1143:
    00001372: 	leaq	DATAat0x11d18(%rip), %rdx
    00001379: 	movq	%r13, %rsi
    0000137c: 	movq	%rbp, %rdi
    0000137f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4991
    00001384: 	movq	0x8(%rsp), %rdi
    00001389: 	movq	%rbp, %rcx
    0000138c: 	movl	$0xfa0, %esi
    00001391: 	leaq	_Z24count_half_for_iterator7IN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEmT_m(%rip), %rdx
    00001398: 	callq	_Z15test_count_halfIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEPFmS6_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5016
    0000139d: 	movq	0x1b0(%rsp), %rdi
    000013a5: 	cmpq	%rbx, %rdi
    000013a8: 	je	.Ltmp1144 # Offset: 5032
    000013aa: 	movq	0x1c0(%rsp), %rax
    000013b2: 	leaq	0x1(%rax), %rsi
    000013b6: 	callq	_ZdlPvm@PLT # Offset: 5046
.Ltmp1144:
    000013bb: 	leaq	DATAat0x11d40(%rip), %rdx
    000013c2: 	movq	%r13, %rsi
    000013c5: 	movq	%rbp, %rdi
    000013c8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5064
    000013cd: 	movq	0x8(%rsp), %rdi
    000013d2: 	movq	%rbp, %rcx
    000013d5: 	movl	$0xfa0, %esi
    000013da: 	leaq	_Z24count_half_for_iterator8IN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEmT_m(%rip), %rdx
    000013e1: 	callq	_Z15test_count_halfIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEPFmS6_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5089
    000013e6: 	movq	0x1b0(%rsp), %rdi
    000013ee: 	cmpq	%rbx, %rdi
    000013f1: 	je	.Ltmp1145 # Offset: 5105
    000013f3: 	movq	0x1c0(%rsp), %rax
    000013fb: 	leaq	0x1(%rax), %rsi
    000013ff: 	callq	_ZdlPvm@PLT # Offset: 5119
.Ltmp1145:
    00001404: 	leaq	0xd0(%rsp), %rdi
    0000140c: 	leaq	DATAat0x11d68(%rip), %rdx
    00001413: 	movq	%r13, %rsi
    00001416: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5142
    0000141b: 	movl	iterations(%rip), %esi
    00001421: 	movq	0xd0(%rsp), %rdi
    00001429: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 5161
    0000142e: 	leaq	DATAat0x1149a(%rip), %rdx
    00001435: 	movq	%r13, %rsi
    00001438: 	movq	%rbp, %rdi
    0000143b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5179
    00001440: 	movq	%rbp, %rdx
    00001443: 	leaq	_Z20count_half_while_optIhEmPT_m(%rip), %rsi
    0000144a: 	movq	%r12, %rdi
    0000144d: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 5197
    00001452: 	movq	0x1b0(%rsp), %rdi
    0000145a: 	cmpq	%rbx, %rdi
    0000145d: 	je	.Ltmp1146 # Offset: 5213
    0000145f: 	movq	0x1c0(%rsp), %rax
    00001467: 	leaq	0x1(%rax), %rsi
    0000146b: 	callq	_ZdlPvm@PLT # Offset: 5227
.Ltmp1146:
    00001470: 	leaq	DATAat0x114b0(%rip), %rdx
    00001477: 	movq	%r13, %rsi
    0000147a: 	movq	%rbp, %rdi
    0000147d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5245
    00001482: 	movq	%rbp, %rdx
    00001485: 	leaq	_Z28count_half_while_uncountableIhEmPT_m(%rip), %rsi
    0000148c: 	movq	%r12, %rdi
    0000148f: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 5263
    00001494: 	movq	0x1b0(%rsp), %rdi
    0000149c: 	cmpq	%rbx, %rdi
    0000149f: 	je	.Ltmp1147 # Offset: 5279
    000014a1: 	movq	0x1c0(%rsp), %rax
    000014a9: 	leaq	0x1(%rax), %rsi
    000014ad: 	callq	_ZdlPvm@PLT # Offset: 5293
.Ltmp1147:
    000014b2: 	leaq	DATAat0x114c9(%rip), %rdx
    000014b9: 	movq	%r13, %rsi
    000014bc: 	movq	%rbp, %rdi
    000014bf: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5311
    000014c4: 	movq	%rbp, %rdx
    000014c7: 	leaq	_Z25count_half_while_pointer1IhEmPT_m(%rip), %rsi
    000014ce: 	movq	%r12, %rdi
    000014d1: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 5329
    000014d6: 	movq	0x1b0(%rsp), %rdi
    000014de: 	cmpq	%rbx, %rdi
    000014e1: 	je	.Ltmp1148 # Offset: 5345
    000014e3: 	movq	0x1c0(%rsp), %rax
    000014eb: 	leaq	0x1(%rax), %rsi
    000014ef: 	callq	_ZdlPvm@PLT # Offset: 5359
.Ltmp1148:
    000014f4: 	leaq	DATAat0x114e4(%rip), %rdx
    000014fb: 	movq	%r13, %rsi
    000014fe: 	movq	%rbp, %rdi
    00001501: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5377
    00001506: 	movq	%rbp, %rdx
    00001509: 	leaq	_Z25count_half_while_pointer2IhEmPT_m(%rip), %rsi
    00001510: 	movq	%r12, %rdi
    00001513: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 5395
    00001518: 	movq	0x1b0(%rsp), %rdi
    00001520: 	cmpq	%rbx, %rdi
    00001523: 	je	.Ltmp1149 # Offset: 5411
    00001525: 	movq	0x1c0(%rsp), %rax
    0000152d: 	leaq	0x1(%rax), %rsi
    00001531: 	callq	_ZdlPvm@PLT # Offset: 5425
.Ltmp1149:
    00001536: 	leaq	DATAat0x114ff(%rip), %rdx
    0000153d: 	movq	%r13, %rsi
    00001540: 	movq	%rbp, %rdi
    00001543: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5443
    00001548: 	movq	%rbp, %rdx
    0000154b: 	leaq	_Z25count_half_while_pointer3IhEmPT_m(%rip), %rsi
    00001552: 	movq	%r12, %rdi
    00001555: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 5461
    0000155a: 	movq	0x1b0(%rsp), %rdi
    00001562: 	cmpq	%rbx, %rdi
    00001565: 	je	.Ltmp1150 # Offset: 5477
    00001567: 	movq	0x1c0(%rsp), %rax
    0000156f: 	leaq	0x1(%rax), %rsi
    00001573: 	callq	_ZdlPvm@PLT # Offset: 5491
.Ltmp1150:
    00001578: 	leaq	DATAat0x1151a(%rip), %rdx
    0000157f: 	movq	%r13, %rsi
    00001582: 	movq	%rbp, %rdi
    00001585: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5509
    0000158a: 	movq	%rbp, %rdx
    0000158d: 	leaq	_Z25count_half_while_pointer4IhEmPT_m(%rip), %rsi
    00001594: 	movq	%r12, %rdi
    00001597: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 5527
    0000159c: 	movq	0x1b0(%rsp), %rdi
    000015a4: 	cmpq	%rbx, %rdi
    000015a7: 	je	.Ltmp1151 # Offset: 5543
    000015a9: 	movq	0x1c0(%rsp), %rax
    000015b1: 	leaq	0x1(%rax), %rsi
    000015b5: 	callq	_ZdlPvm@PLT # Offset: 5557
.Ltmp1151:
    000015ba: 	leaq	DATAat0x11535(%rip), %rdx
    000015c1: 	movq	%r13, %rsi
    000015c4: 	movq	%rbp, %rdi
    000015c7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5575
    000015cc: 	movq	%rbp, %rdx
    000015cf: 	leaq	_Z25count_half_while_pointer5IhEmPT_m(%rip), %rsi
    000015d6: 	movq	%r12, %rdi
    000015d9: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 5593
    000015de: 	movq	0x1b0(%rsp), %rdi
    000015e6: 	cmpq	%rbx, %rdi
    000015e9: 	je	.Ltmp1152 # Offset: 5609
    000015eb: 	movq	0x1c0(%rsp), %rax
    000015f3: 	leaq	0x1(%rax), %rsi
    000015f7: 	callq	_ZdlPvm@PLT # Offset: 5623
.Ltmp1152:
    000015fc: 	leaq	DATAat0x11550(%rip), %rdx
    00001603: 	movq	%r13, %rsi
    00001606: 	movq	%rbp, %rdi
    00001609: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5641
    0000160e: 	movq	%rbp, %rdx
    00001611: 	leaq	_Z25count_half_while_pointer6IhEmPT_m(%rip), %rsi
    00001618: 	movq	%r12, %rdi
    0000161b: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 5659
    00001620: 	movq	0x1b0(%rsp), %rdi
    00001628: 	cmpq	%rbx, %rdi
    0000162b: 	je	.Ltmp1153 # Offset: 5675
    0000162d: 	movq	0x1c0(%rsp), %rax
    00001635: 	leaq	0x1(%rax), %rsi
    00001639: 	callq	_ZdlPvm@PLT # Offset: 5689
.Ltmp1153:
    0000163e: 	leaq	DATAat0x1156b(%rip), %rdx
    00001645: 	movq	%r13, %rsi
    00001648: 	movq	%rbp, %rdi
    0000164b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5707
    00001650: 	movq	%rbp, %rdx
    00001653: 	leaq	_Z25count_half_while_pointer7IhEmPT_m(%rip), %rsi
    0000165a: 	movq	%r12, %rdi
    0000165d: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 5725
    00001662: 	movq	0x1b0(%rsp), %rdi
    0000166a: 	cmpq	%rbx, %rdi
    0000166d: 	je	.Ltmp1154 # Offset: 5741
    0000166f: 	movq	0x1c0(%rsp), %rax
    00001677: 	leaq	0x1(%rax), %rsi
    0000167b: 	callq	_ZdlPvm@PLT # Offset: 5755
.Ltmp1154:
    00001680: 	leaq	DATAat0x11586(%rip), %rdx
    00001687: 	movq	%r13, %rsi
    0000168a: 	movq	%rbp, %rdi
    0000168d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5773
    00001692: 	movq	%rbp, %rdx
    00001695: 	leaq	_Z25count_half_while_pointer8IhEmPT_m(%rip), %rsi
    0000169c: 	movq	%r12, %rdi
    0000169f: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 5791
    000016a4: 	movq	0x1b0(%rsp), %rdi
    000016ac: 	cmpq	%rbx, %rdi
    000016af: 	je	.Ltmp1155 # Offset: 5807
    000016b1: 	movq	0x1c0(%rsp), %rax
    000016b9: 	leaq	0x1(%rax), %rsi
    000016bd: 	callq	_ZdlPvm@PLT # Offset: 5821
.Ltmp1155:
    000016c2: 	leaq	DATAat0x115a1(%rip), %rdx
    000016c9: 	movq	%r13, %rsi
    000016cc: 	movq	%rbp, %rdi
    000016cf: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5839
    000016d4: 	movq	%rbp, %rdx
    000016d7: 	leaq	_Z23count_half_while_index1IhEmPT_m(%rip), %rsi
    000016de: 	movq	%r12, %rdi
    000016e1: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 5857
    000016e6: 	movq	0x1b0(%rsp), %rdi
    000016ee: 	cmpq	%rbx, %rdi
    000016f1: 	je	.Ltmp1156 # Offset: 5873
    000016f3: 	movq	0x1c0(%rsp), %rax
    000016fb: 	leaq	0x1(%rax), %rsi
    000016ff: 	callq	_ZdlPvm@PLT # Offset: 5887
.Ltmp1156:
    00001704: 	leaq	DATAat0x115ba(%rip), %rdx
    0000170b: 	movq	%r13, %rsi
    0000170e: 	movq	%rbp, %rdi
    00001711: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5905
    00001716: 	movq	%rbp, %rdx
    00001719: 	leaq	_Z23count_half_while_index2IhEmPT_m(%rip), %rsi
    00001720: 	movq	%r12, %rdi
    00001723: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 5923
    00001728: 	movq	0x1b0(%rsp), %rdi
    00001730: 	cmpq	%rbx, %rdi
    00001733: 	je	.Ltmp1157 # Offset: 5939
    00001735: 	movq	0x1c0(%rsp), %rax
    0000173d: 	leaq	0x1(%rax), %rsi
    00001741: 	callq	_ZdlPvm@PLT # Offset: 5953
.Ltmp1157:
    00001746: 	leaq	DATAat0x115d3(%rip), %rdx
    0000174d: 	movq	%r13, %rsi
    00001750: 	movq	%rbp, %rdi
    00001753: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5971
    00001758: 	movq	%rbp, %rdx
    0000175b: 	leaq	_Z23count_half_while_index3IhEmPT_m(%rip), %rsi
    00001762: 	movq	%r12, %rdi
    00001765: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 5989
    0000176a: 	movq	0x1b0(%rsp), %rdi
    00001772: 	cmpq	%rbx, %rdi
    00001775: 	je	.Ltmp1158 # Offset: 6005
    00001777: 	movq	0x1c0(%rsp), %rax
    0000177f: 	leaq	0x1(%rax), %rsi
    00001783: 	callq	_ZdlPvm@PLT # Offset: 6019
.Ltmp1158:
    00001788: 	leaq	DATAat0x115ec(%rip), %rdx
    0000178f: 	movq	%r13, %rsi
    00001792: 	movq	%rbp, %rdi
    00001795: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6037
    0000179a: 	movq	%rbp, %rdx
    0000179d: 	leaq	_Z23count_half_while_index4IhEmPT_m(%rip), %rsi
    000017a4: 	movq	%r12, %rdi
    000017a7: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 6055
    000017ac: 	movq	0x1b0(%rsp), %rdi
    000017b4: 	cmpq	%rbx, %rdi
    000017b7: 	je	.Ltmp1159 # Offset: 6071
    000017b9: 	movq	0x1c0(%rsp), %rax
    000017c1: 	leaq	0x1(%rax), %rsi
    000017c5: 	callq	_ZdlPvm@PLT # Offset: 6085
.Ltmp1159:
    000017ca: 	leaq	DATAat0x11605(%rip), %rdx
    000017d1: 	movq	%r13, %rsi
    000017d4: 	movq	%rbp, %rdi
    000017d7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6103
    000017dc: 	movq	%rbp, %rdx
    000017df: 	leaq	_Z23count_half_while_index5IhEmPT_m(%rip), %rsi
    000017e6: 	movq	%r12, %rdi
    000017e9: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 6121
    000017ee: 	movq	0x1b0(%rsp), %rdi
    000017f6: 	cmpq	%rbx, %rdi
    000017f9: 	je	.Ltmp1160 # Offset: 6137
    000017fb: 	movq	0x1c0(%rsp), %rax
    00001803: 	leaq	0x1(%rax), %rsi
    00001807: 	callq	_ZdlPvm@PLT # Offset: 6151
.Ltmp1160:
    0000180c: 	leaq	DATAat0x1161e(%rip), %rdx
    00001813: 	movq	%r13, %rsi
    00001816: 	movq	%rbp, %rdi
    00001819: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6169
    0000181e: 	movq	%rbp, %rdx
    00001821: 	leaq	_Z23count_half_while_index6IhEmPT_m(%rip), %rsi
    00001828: 	movq	%r12, %rdi
    0000182b: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 6187
    00001830: 	movq	0x1b0(%rsp), %rdi
    00001838: 	cmpq	%rbx, %rdi
    0000183b: 	je	.Ltmp1161 # Offset: 6203
    0000183d: 	movq	0x1c0(%rsp), %rax
    00001845: 	leaq	0x1(%rax), %rsi
    00001849: 	callq	_ZdlPvm@PLT # Offset: 6217
.Ltmp1161:
    0000184e: 	leaq	DATAat0x11637(%rip), %rdx
    00001855: 	movq	%r13, %rsi
    00001858: 	movq	%rbp, %rdi
    0000185b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6235
    00001860: 	movq	%rbp, %rdx
    00001863: 	leaq	_Z23count_half_while_index7IhEmPT_m(%rip), %rsi
    0000186a: 	movq	%r12, %rdi
    0000186d: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 6253
    00001872: 	movq	0x1b0(%rsp), %rdi
    0000187a: 	cmpq	%rbx, %rdi
    0000187d: 	je	.Ltmp1162 # Offset: 6269
    0000187f: 	movq	0x1c0(%rsp), %rax
    00001887: 	leaq	0x1(%rax), %rsi
    0000188b: 	callq	_ZdlPvm@PLT # Offset: 6283
.Ltmp1162:
    00001890: 	leaq	DATAat0x11650(%rip), %rdx
    00001897: 	movq	%r13, %rsi
    0000189a: 	movq	%rbp, %rdi
    0000189d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6301
    000018a2: 	movq	%rbp, %rdx
    000018a5: 	leaq	_Z23count_half_while_index8IhEmPT_m(%rip), %rsi
    000018ac: 	movq	%r12, %rdi
    000018af: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 6319
    000018b4: 	movq	0x1b0(%rsp), %rdi
    000018bc: 	cmpq	%rbx, %rdi
    000018bf: 	je	.Ltmp1163 # Offset: 6335
    000018c1: 	movq	0x1c0(%rsp), %rax
    000018c9: 	leaq	0x1(%rax), %rsi
    000018cd: 	callq	_ZdlPvm@PLT # Offset: 6349
.Ltmp1163:
    000018d2: 	leaq	DATAat0x11669(%rip), %rdx
    000018d9: 	movq	%r13, %rsi
    000018dc: 	movq	%rbp, %rdi
    000018df: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6367
    000018e4: 	movq	%rbp, %rdx
    000018e7: 	leaq	_Z23count_half_while_index9IhEmPT_m(%rip), %rsi
    000018ee: 	movq	%r12, %rdi
    000018f1: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 6385
    000018f6: 	movq	0x1b0(%rsp), %rdi
    000018fe: 	cmpq	%rbx, %rdi
    00001901: 	je	.Ltmp1164 # Offset: 6401
    00001903: 	movq	0x1c0(%rsp), %rax
    0000190b: 	leaq	0x1(%rax), %rsi
    0000190f: 	callq	_ZdlPvm@PLT # Offset: 6415
.Ltmp1164:
    00001914: 	leaq	DATAat0x11682(%rip), %rdx
    0000191b: 	movq	%r13, %rsi
    0000191e: 	movq	%rbp, %rdi
    00001921: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6433
    00001926: 	movq	%rbp, %rdx
    00001929: 	leaq	_Z24count_half_while_index10IhEmPT_m(%rip), %rsi
    00001930: 	movq	%r12, %rdi
    00001933: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 6451
    00001938: 	movq	0x1b0(%rsp), %rdi
    00001940: 	cmpq	%rbx, %rdi
    00001943: 	je	.Ltmp1165 # Offset: 6467
    00001945: 	movq	0x1c0(%rsp), %rax
    0000194d: 	leaq	0x1(%rax), %rsi
    00001951: 	callq	_ZdlPvm@PLT # Offset: 6481
.Ltmp1165:
    00001956: 	movq	0x90(%rsp), %r15
    0000195e: 	leaq	0x100(%rsp), %rax
    00001966: 	movq	0x98(%rsp), %r14
    0000196e: 	movq	%rax, 0x18(%rsp)
    00001973: 	movq	%rax, 0xf0(%rsp)
    0000197b: 	movq	%r15, %rax
    0000197e: 	addq	%r14, %rax
    00001981: 	je	.Ltmp1166 # Offset: 6529
    00001983: 	testq	%r15, %r15
    00001986: 	je	.Ltmp1167 # Offset: 6534
.Ltmp1166:
    0000198c: 	movq	%r14, 0x70(%rsp)
    00001991: 	cmpq	$0xf, %r14
    00001995: 	ja	.Ltmp1168 # Offset: 6549
    0000199b: 	cmpq	$0x1, %r14
    0000199f: 	jne	.Ltmp1169 # Offset: 6559
    000019a5: 	movzbl	(%r15), %eax
    000019a9: 	movb	%al, 0x100(%rsp)
    000019b0: 	movq	0x18(%rsp), %rax
.Ltmp1347:
    000019b5: 	movq	%r14, 0xf8(%rsp)
    000019bd: 	movb	$0x0, (%rax,%r14)
    000019c2: 	movabsq	$0x3fffffffffffffff, %rax
    000019cc: 	subq	0xf8(%rsp), %rax
    000019d4: 	cmpq	$0x1f, %rax
    000019d8: 	jbe	.Ltmp1170 # Offset: 6616
    000019de: 	leaq	0xf0(%rsp), %rdi
    000019e6: 	movl	$0x20, %edx
    000019eb: 	leaq	DATAat0x11d88(%rip), %rsi
    000019f2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 6642
    000019f7: 	movl	iterations(%rip), %esi
    000019fd: 	movq	0xf0(%rsp), %rdi
    00001a05: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 6661
    00001a0a: 	leaq	DATAat0x1169c(%rip), %rdx
    00001a11: 	movq	%r13, %rsi
    00001a14: 	movq	%rbp, %rdi
    00001a17: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6679
    00001a1c: 	movq	%rbp, %rdx
    00001a1f: 	leaq	_Z17count_half_do_optIhEmPT_m(%rip), %rsi
    00001a26: 	movq	%r12, %rdi
    00001a29: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 6697
    00001a2e: 	movq	0x1b0(%rsp), %rdi
    00001a36: 	cmpq	%rbx, %rdi
    00001a39: 	je	.Ltmp1171 # Offset: 6713
    00001a3b: 	movq	0x1c0(%rsp), %rax
    00001a43: 	leaq	0x1(%rax), %rsi
    00001a47: 	callq	_ZdlPvm@PLT # Offset: 6727
.Ltmp1171:
    00001a4c: 	leaq	DATAat0x116af(%rip), %rdx
    00001a53: 	movq	%r13, %rsi
    00001a56: 	movq	%rbp, %rdi
    00001a59: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6745
    00001a5e: 	movq	%rbp, %rdx
    00001a61: 	leaq	_Z25count_half_do_uncountableIhEmPT_m(%rip), %rsi
    00001a68: 	movq	%r12, %rdi
    00001a6b: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 6763
    00001a70: 	movq	0x1b0(%rsp), %rdi
    00001a78: 	cmpq	%rbx, %rdi
    00001a7b: 	je	.Ltmp1172 # Offset: 6779
    00001a7d: 	movq	0x1c0(%rsp), %rax
    00001a85: 	leaq	0x1(%rax), %rsi
    00001a89: 	callq	_ZdlPvm@PLT # Offset: 6793
.Ltmp1172:
    00001a8e: 	movq	0x90(%rsp), %r15
    00001a96: 	movq	0x98(%rsp), %r14
    00001a9e: 	movq	%rbx, 0x1b0(%rsp)
    00001aa6: 	movq	%r15, %rax
    00001aa9: 	addq	%r14, %rax
    00001aac: 	je	.Ltmp1173 # Offset: 6828
    00001aae: 	testq	%r15, %r15
    00001ab1: 	je	.Ltmp1174 # Offset: 6833
.Ltmp1173:
    00001ab7: 	movq	%r14, 0x70(%rsp)
    00001abc: 	cmpq	$0xf, %r14
    00001ac0: 	ja	.Ltmp1175 # Offset: 6848
    00001ac6: 	cmpq	$0x1, %r14
    00001aca: 	jne	.Ltmp1176 # Offset: 6858
    00001ad0: 	movzbl	(%r15), %eax
    00001ad4: 	movb	%al, 0x1c0(%rsp)
    00001adb: 	movq	%rbx, %rax
.Ltmp1363:
    00001ade: 	movq	%r14, 0x1b8(%rsp)
    00001ae6: 	movb	$0x0, (%rax,%r14)
    00001aeb: 	movabsq	$0x3fffffffffffffff, %rax
    00001af5: 	subq	0x1b8(%rsp), %rax
    00001afd: 	cmpq	$0x16, %rax
    00001b01: 	jbe	.Ltmp1177 # Offset: 6913
    00001b07: 	movl	$0x17, %edx
    00001b0c: 	leaq	DATAat0x116c5(%rip), %rsi
    00001b13: 	movq	%rbp, %rdi
    00001b16: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 6934
    00001b1b: 	movq	%rbp, %rdx
    00001b1e: 	leaq	_Z22count_half_do_pointer1IhEmPT_m(%rip), %rsi
    00001b25: 	movq	%r12, %rdi
    00001b28: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 6952
    00001b2d: 	movq	0x1b0(%rsp), %rdi
    00001b35: 	cmpq	%rbx, %rdi
    00001b38: 	je	.Ltmp1178 # Offset: 6968
    00001b3a: 	movq	0x1c0(%rsp), %rax
    00001b42: 	leaq	0x1(%rax), %rsi
    00001b46: 	callq	_ZdlPvm@PLT # Offset: 6982
.Ltmp1178:
    00001b4b: 	leaq	DATAat0x116dd(%rip), %rdx
    00001b52: 	movq	%r13, %rsi
    00001b55: 	movq	%rbp, %rdi
    00001b58: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7000
    00001b5d: 	movq	%rbp, %rdx
    00001b60: 	leaq	_Z22count_half_do_pointer2IhEmPT_m(%rip), %rsi
    00001b67: 	movq	%r12, %rdi
    00001b6a: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 7018
    00001b6f: 	movq	0x1b0(%rsp), %rdi
    00001b77: 	cmpq	%rbx, %rdi
    00001b7a: 	je	.Ltmp1179 # Offset: 7034
    00001b7c: 	movq	0x1c0(%rsp), %rax
    00001b84: 	leaq	0x1(%rax), %rsi
    00001b88: 	callq	_ZdlPvm@PLT # Offset: 7048
.Ltmp1179:
    00001b8d: 	leaq	DATAat0x116f5(%rip), %rdx
    00001b94: 	movq	%r13, %rsi
    00001b97: 	movq	%rbp, %rdi
    00001b9a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7066
    00001b9f: 	movq	%rbp, %rdx
    00001ba2: 	leaq	_Z22count_half_do_pointer3IhEmPT_m(%rip), %rsi
    00001ba9: 	movq	%r12, %rdi
    00001bac: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 7084
    00001bb1: 	movq	0x1b0(%rsp), %rdi
    00001bb9: 	cmpq	%rbx, %rdi
    00001bbc: 	je	.Ltmp1180 # Offset: 7100
    00001bbe: 	movq	0x1c0(%rsp), %rax
    00001bc6: 	leaq	0x1(%rax), %rsi
    00001bca: 	callq	_ZdlPvm@PLT # Offset: 7114
.Ltmp1180:
    00001bcf: 	leaq	DATAat0x1170d(%rip), %rdx
    00001bd6: 	movq	%r13, %rsi
    00001bd9: 	movq	%rbp, %rdi
    00001bdc: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7132
    00001be1: 	movq	%rbp, %rdx
    00001be4: 	leaq	_Z20count_half_do_index1IhEmPT_m(%rip), %rsi
    00001beb: 	movq	%r12, %rdi
    00001bee: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 7150
    00001bf3: 	movq	0x1b0(%rsp), %rdi
    00001bfb: 	cmpq	%rbx, %rdi
    00001bfe: 	je	.Ltmp1181 # Offset: 7166
    00001c00: 	movq	0x1c0(%rsp), %rax
    00001c08: 	leaq	0x1(%rax), %rsi
    00001c0c: 	callq	_ZdlPvm@PLT # Offset: 7180
.Ltmp1181:
    00001c11: 	leaq	DATAat0x11723(%rip), %rdx
    00001c18: 	movq	%r13, %rsi
    00001c1b: 	movq	%rbp, %rdi
    00001c1e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7198
    00001c23: 	movq	%rbp, %rdx
    00001c26: 	leaq	_Z20count_half_do_index2IhEmPT_m(%rip), %rsi
    00001c2d: 	movq	%r12, %rdi
    00001c30: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 7216
    00001c35: 	movq	0x1b0(%rsp), %rdi
    00001c3d: 	cmpq	%rbx, %rdi
    00001c40: 	je	.Ltmp1182 # Offset: 7232
    00001c42: 	movq	0x1c0(%rsp), %rax
    00001c4a: 	leaq	0x1(%rax), %rsi
    00001c4e: 	callq	_ZdlPvm@PLT # Offset: 7246
.Ltmp1182:
    00001c53: 	leaq	DATAat0x11739(%rip), %rdx
    00001c5a: 	movq	%r13, %rsi
    00001c5d: 	movq	%rbp, %rdi
    00001c60: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7264
    00001c65: 	movq	%rbp, %rdx
    00001c68: 	leaq	_Z20count_half_do_index3IhEmPT_m(%rip), %rsi
    00001c6f: 	movq	%r12, %rdi
    00001c72: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 7282
    00001c77: 	movq	0x1b0(%rsp), %rdi
    00001c7f: 	cmpq	%rbx, %rdi
    00001c82: 	je	.Ltmp1183 # Offset: 7298
    00001c84: 	movq	0x1c0(%rsp), %rax
    00001c8c: 	leaq	0x1(%rax), %rsi
    00001c90: 	callq	_ZdlPvm@PLT # Offset: 7312
.Ltmp1183:
    00001c95: 	leaq	DATAat0x1174f(%rip), %rdx
    00001c9c: 	movq	%r13, %rsi
    00001c9f: 	movq	%rbp, %rdi
    00001ca2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7330
    00001ca7: 	movq	%rbp, %rdx
    00001caa: 	leaq	_Z20count_half_do_index4IhEmPT_m(%rip), %rsi
    00001cb1: 	movq	%r12, %rdi
    00001cb4: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 7348
    00001cb9: 	movq	0x1b0(%rsp), %rdi
    00001cc1: 	cmpq	%rbx, %rdi
    00001cc4: 	je	.Ltmp1184 # Offset: 7364
    00001cc6: 	movq	0x1c0(%rsp), %rax
    00001cce: 	leaq	0x1(%rax), %rsi
    00001cd2: 	callq	_ZdlPvm@PLT # Offset: 7378
.Ltmp1184:
    00001cd7: 	leaq	DATAat0x11765(%rip), %rdx
    00001cde: 	movq	%r13, %rsi
    00001ce1: 	movq	%rbp, %rdi
    00001ce4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7396
    00001ce9: 	movq	%rbp, %rdx
    00001cec: 	leaq	_Z20count_half_do_index5IhEmPT_m(%rip), %rsi
    00001cf3: 	movq	%r12, %rdi
    00001cf6: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 7414
    00001cfb: 	movq	0x1b0(%rsp), %rdi
    00001d03: 	cmpq	%rbx, %rdi
    00001d06: 	je	.Ltmp1185 # Offset: 7430
    00001d08: 	movq	0x1c0(%rsp), %rax
    00001d10: 	leaq	0x1(%rax), %rsi
    00001d14: 	callq	_ZdlPvm@PLT # Offset: 7444
.Ltmp1185:
    00001d19: 	leaq	0x110(%rsp), %rdi
    00001d21: 	leaq	DATAat0x1177b(%rip), %rdx
    00001d28: 	movq	%r13, %rsi
    00001d2b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7467
    00001d30: 	movl	iterations(%rip), %esi
    00001d36: 	movq	0x110(%rsp), %rdi
    00001d3e: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 7486
    00001d43: 	leaq	DATAat0x11799(%rip), %rdx
    00001d4a: 	movq	%r13, %rsi
    00001d4d: 	movq	%rbp, %rdi
    00001d50: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7504
    00001d55: 	movq	%rbp, %rdx
    00001d58: 	leaq	_Z19count_half_goto_optIhEmPT_m(%rip), %rsi
    00001d5f: 	movq	%r12, %rdi
    00001d62: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 7522
    00001d67: 	movq	0x1b0(%rsp), %rdi
    00001d6f: 	cmpq	%rbx, %rdi
    00001d72: 	je	.Ltmp1186 # Offset: 7538
    00001d74: 	movq	0x1c0(%rsp), %rax
    00001d7c: 	leaq	0x1(%rax), %rsi
    00001d80: 	callq	_ZdlPvm@PLT # Offset: 7552
.Ltmp1186:
    00001d85: 	leaq	DATAat0x117ae(%rip), %rdx
    00001d8c: 	movq	%r13, %rsi
    00001d8f: 	movq	%rbp, %rdi
    00001d92: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7570
    00001d97: 	movq	%rbp, %rdx
    00001d9a: 	leaq	_Z27count_half_goto_uncountableIhEmPT_m(%rip), %rsi
    00001da1: 	movq	%r12, %rdi
    00001da4: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 7588
    00001da9: 	movq	0x1b0(%rsp), %rdi
    00001db1: 	cmpq	%rbx, %rdi
    00001db4: 	je	.Ltmp1187 # Offset: 7604
    00001db6: 	movq	0x1c0(%rsp), %rax
    00001dbe: 	leaq	0x1(%rax), %rsi
    00001dc2: 	callq	_ZdlPvm@PLT # Offset: 7618
.Ltmp1187:
    00001dc7: 	leaq	DATAat0x117c6(%rip), %rdx
    00001dce: 	movq	%r13, %rsi
    00001dd1: 	movq	%rbp, %rdi
    00001dd4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7636
    00001dd9: 	movq	%rbp, %rdx
    00001ddc: 	leaq	_Z24count_half_goto_pointer1IhEmPT_m(%rip), %rsi
    00001de3: 	movq	%r12, %rdi
    00001de6: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 7654
    00001deb: 	movq	0x1b0(%rsp), %rdi
    00001df3: 	cmpq	%rbx, %rdi
    00001df6: 	je	.Ltmp1188 # Offset: 7670
    00001df8: 	movq	0x1c0(%rsp), %rax
    00001e00: 	leaq	0x1(%rax), %rsi
    00001e04: 	callq	_ZdlPvm@PLT # Offset: 7684
.Ltmp1188:
    00001e09: 	leaq	DATAat0x117e0(%rip), %rdx
    00001e10: 	movq	%r13, %rsi
    00001e13: 	movq	%rbp, %rdi
    00001e16: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7702
    00001e1b: 	movq	%rbp, %rdx
    00001e1e: 	leaq	_Z24count_half_goto_pointer2IhEmPT_m(%rip), %rsi
    00001e25: 	movq	%r12, %rdi
    00001e28: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 7720
    00001e2d: 	movq	0x1b0(%rsp), %rdi
    00001e35: 	cmpq	%rbx, %rdi
    00001e38: 	je	.Ltmp1189 # Offset: 7736
    00001e3a: 	movq	0x1c0(%rsp), %rax
    00001e42: 	leaq	0x1(%rax), %rsi
    00001e46: 	callq	_ZdlPvm@PLT # Offset: 7750
.Ltmp1189:
    00001e4b: 	leaq	DATAat0x117fa(%rip), %rdx
    00001e52: 	movq	%r13, %rsi
    00001e55: 	movq	%rbp, %rdi
    00001e58: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7768
    00001e5d: 	movq	%rbp, %rdx
    00001e60: 	leaq	_Z24count_half_goto_pointer3IhEmPT_m(%rip), %rsi
    00001e67: 	movq	%r12, %rdi
    00001e6a: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 7786
    00001e6f: 	movq	0x1b0(%rsp), %rdi
    00001e77: 	cmpq	%rbx, %rdi
    00001e7a: 	je	.Ltmp1190 # Offset: 7802
    00001e7c: 	movq	0x1c0(%rsp), %rax
    00001e84: 	leaq	0x1(%rax), %rsi
    00001e88: 	callq	_ZdlPvm@PLT # Offset: 7816
.Ltmp1190:
    00001e8d: 	leaq	DATAat0x11814(%rip), %rdx
    00001e94: 	movq	%r13, %rsi
    00001e97: 	movq	%rbp, %rdi
    00001e9a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7834
    00001e9f: 	movq	%rbp, %rdx
    00001ea2: 	leaq	_Z22count_half_goto_index1IhEmPT_m(%rip), %rsi
    00001ea9: 	movq	%r12, %rdi
    00001eac: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 7852
    00001eb1: 	movq	0x1b0(%rsp), %rdi
    00001eb9: 	cmpq	%rbx, %rdi
    00001ebc: 	je	.Ltmp1191 # Offset: 7868
    00001ebe: 	movq	0x1c0(%rsp), %rax
    00001ec6: 	leaq	0x1(%rax), %rsi
    00001eca: 	callq	_ZdlPvm@PLT # Offset: 7882
.Ltmp1191:
    00001ecf: 	leaq	DATAat0x1182c(%rip), %rdx
    00001ed6: 	movq	%r13, %rsi
    00001ed9: 	movq	%rbp, %rdi
    00001edc: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7900
    00001ee1: 	movq	%rbp, %rdx
    00001ee4: 	leaq	_Z22count_half_goto_index2IhEmPT_m(%rip), %rsi
    00001eeb: 	movq	%r12, %rdi
    00001eee: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 7918
    00001ef3: 	movq	0x1b0(%rsp), %rdi
    00001efb: 	cmpq	%rbx, %rdi
    00001efe: 	je	.Ltmp1192 # Offset: 7934
    00001f00: 	movq	0x1c0(%rsp), %rax
    00001f08: 	leaq	0x1(%rax), %rsi
    00001f0c: 	callq	_ZdlPvm@PLT # Offset: 7948
.Ltmp1192:
    00001f11: 	leaq	DATAat0x11844(%rip), %rdx
    00001f18: 	movq	%r13, %rsi
    00001f1b: 	movq	%rbp, %rdi
    00001f1e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7966
    00001f23: 	movq	%rbp, %rdx
    00001f26: 	leaq	_Z22count_half_goto_index3IhEmPT_m(%rip), %rsi
    00001f2d: 	movq	%r12, %rdi
    00001f30: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 7984
    00001f35: 	movq	0x1b0(%rsp), %rdi
    00001f3d: 	cmpq	%rbx, %rdi
    00001f40: 	je	.Ltmp1193 # Offset: 8000
    00001f42: 	movq	0x1c0(%rsp), %rax
    00001f4a: 	leaq	0x1(%rax), %rsi
    00001f4e: 	callq	_ZdlPvm@PLT # Offset: 8014
.Ltmp1193:
    00001f53: 	leaq	DATAat0x1185c(%rip), %rdx
    00001f5a: 	movq	%r13, %rsi
    00001f5d: 	movq	%rbp, %rdi
    00001f60: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8032
    00001f65: 	movq	%rbp, %rdx
    00001f68: 	leaq	_Z22count_half_goto_index4IhEmPT_m(%rip), %rsi
    00001f6f: 	movq	%r12, %rdi
    00001f72: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 8050
    00001f77: 	movq	0x1b0(%rsp), %rdi
    00001f7f: 	cmpq	%rbx, %rdi
    00001f82: 	je	.Ltmp1194 # Offset: 8066
    00001f84: 	movq	0x1c0(%rsp), %rax
    00001f8c: 	leaq	0x1(%rax), %rsi
    00001f90: 	callq	_ZdlPvm@PLT # Offset: 8080
.Ltmp1194:
    00001f95: 	leaq	DATAat0x11874(%rip), %rdx
    00001f9c: 	movq	%r13, %rsi
    00001f9f: 	movq	%rbp, %rdi
    00001fa2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8098
    00001fa7: 	movq	%rbp, %rdx
    00001faa: 	leaq	_Z22count_half_goto_index5IhEmPT_m(%rip), %rsi
    00001fb1: 	movq	%r12, %rdi
    00001fb4: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 8116
    00001fb9: 	movq	0x1b0(%rsp), %rdi
    00001fc1: 	cmpq	%rbx, %rdi
    00001fc4: 	je	.Ltmp1195 # Offset: 8132
    00001fc6: 	movq	0x1c0(%rsp), %rax
    00001fce: 	leaq	0x1(%rax), %rsi
    00001fd2: 	callq	_ZdlPvm@PLT # Offset: 8146
.Ltmp1195:
    00001fd7: 	leaq	0x130(%rsp), %rdi
    00001fdf: 	leaq	DATAat0x11db0(%rip), %rdx
    00001fe6: 	movq	%r13, %rsi
    00001fe9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8169
    00001fee: 	movl	iterations(%rip), %esi
    00001ff4: 	movq	0x130(%rsp), %rdi
    00001ffc: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 8188
    00002001: 	leaq	DATAat0x1188c(%rip), %rdx
    00002008: 	movq	%r13, %rsi
    0000200b: 	movq	%rbp, %rdi
    0000200e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8206
    00002013: 	movq	%rbp, %rdx
    00002016: 	leaq	_Z20count_half_goto2_optIhEmPT_m(%rip), %rsi
    0000201d: 	movq	%r12, %rdi
    00002020: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 8224
    00002025: 	movq	0x1b0(%rsp), %rdi
    0000202d: 	cmpq	%rbx, %rdi
    00002030: 	je	.Ltmp1196 # Offset: 8240
    00002032: 	movq	0x1c0(%rsp), %rax
    0000203a: 	leaq	0x1(%rax), %rsi
    0000203e: 	callq	_ZdlPvm@PLT # Offset: 8254
.Ltmp1196:
    00002043: 	leaq	DATAat0x118a2(%rip), %rdx
    0000204a: 	movq	%r13, %rsi
    0000204d: 	movq	%rbp, %rdi
    00002050: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8272
    00002055: 	movq	%rbp, %rdx
    00002058: 	leaq	_Z28count_half_goto2_uncountableIhEmPT_m(%rip), %rsi
    0000205f: 	movq	%r12, %rdi
    00002062: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 8290
    00002067: 	movq	0x1b0(%rsp), %rdi
    0000206f: 	cmpq	%rbx, %rdi
    00002072: 	je	.Ltmp1197 # Offset: 8306
    00002074: 	movq	0x1c0(%rsp), %rax
    0000207c: 	leaq	0x1(%rax), %rsi
    00002080: 	callq	_ZdlPvm@PLT # Offset: 8320
.Ltmp1197:
    00002085: 	movq	0x90(%rsp), %r15
    0000208d: 	movq	0x98(%rsp), %r14
    00002095: 	movq	%rbx, 0x1b0(%rsp)
    0000209d: 	movq	%r15, %rax
    000020a0: 	addq	%r14, %rax
    000020a3: 	je	.Ltmp1198 # Offset: 8355
    000020a5: 	testq	%r15, %r15
    000020a8: 	je	.Ltmp1199 # Offset: 8360
.Ltmp1198:
    000020ae: 	movq	%r14, 0x70(%rsp)
    000020b3: 	cmpq	$0xf, %r14
    000020b7: 	ja	.Ltmp1200 # Offset: 8375
    000020bd: 	cmpq	$0x1, %r14
    000020c1: 	jne	.Ltmp1201 # Offset: 8385
    000020c7: 	movzbl	(%r15), %eax
    000020cb: 	movb	%al, 0x1c0(%rsp)
    000020d2: 	movq	%rbx, %rax
.Ltmp1365:
    000020d5: 	movq	%r14, 0x1b8(%rsp)
    000020dd: 	movb	$0x0, (%rax,%r14)
    000020e2: 	movabsq	$0x3fffffffffffffff, %rax
    000020ec: 	subq	0x1b8(%rsp), %rax
    000020f4: 	cmpq	$0x19, %rax
    000020f8: 	jbe	.Ltmp1202 # Offset: 8440
    000020fe: 	movl	$0x1a, %edx
    00002103: 	leaq	DATAat0x118bb(%rip), %rsi
    0000210a: 	movq	%rbp, %rdi
    0000210d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 8461
    00002112: 	movq	%rbp, %rdx
    00002115: 	leaq	_Z25count_half_goto2_pointer1IhEmPT_m(%rip), %rsi
    0000211c: 	movq	%r12, %rdi
    0000211f: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 8479
    00002124: 	movq	0x1b0(%rsp), %rdi
    0000212c: 	cmpq	%rbx, %rdi
    0000212f: 	je	.Ltmp1203 # Offset: 8495
    00002131: 	movq	0x1c0(%rsp), %rax
    00002139: 	leaq	0x1(%rax), %rsi
    0000213d: 	callq	_ZdlPvm@PLT # Offset: 8509
.Ltmp1203:
    00002142: 	movq	0x90(%rsp), %r15
    0000214a: 	movq	0x98(%rsp), %r14
    00002152: 	movq	%rbx, 0x1b0(%rsp)
    0000215a: 	movq	%r15, %rax
    0000215d: 	addq	%r14, %rax
    00002160: 	je	.Ltmp1204 # Offset: 8544
    00002162: 	testq	%r15, %r15
    00002165: 	je	.Ltmp1205 # Offset: 8549
.Ltmp1204:
    0000216b: 	movq	%r14, 0x70(%rsp)
    00002170: 	cmpq	$0xf, %r14
    00002174: 	ja	.Ltmp1206 # Offset: 8564
    0000217a: 	cmpq	$0x1, %r14
    0000217e: 	jne	.Ltmp1207 # Offset: 8574
    00002184: 	movzbl	(%r15), %eax
    00002188: 	movb	%al, 0x1c0(%rsp)
    0000218f: 	movq	%rbx, %rax
.Ltmp1369:
    00002192: 	movq	%r14, 0x1b8(%rsp)
    0000219a: 	movb	$0x0, (%rax,%r14)
    0000219f: 	movabsq	$0x3fffffffffffffff, %rax
    000021a9: 	subq	0x1b8(%rsp), %rax
    000021b1: 	cmpq	$0x19, %rax
    000021b5: 	jbe	.Ltmp1208 # Offset: 8629
    000021bb: 	movl	$0x1a, %edx
    000021c0: 	leaq	DATAat0x118d6(%rip), %rsi
    000021c7: 	movq	%rbp, %rdi
    000021ca: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 8650
    000021cf: 	movq	%rbp, %rdx
    000021d2: 	leaq	_Z25count_half_goto2_pointer2IhEmPT_m(%rip), %rsi
    000021d9: 	movq	%r12, %rdi
    000021dc: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 8668
    000021e1: 	movq	0x1b0(%rsp), %rdi
    000021e9: 	cmpq	%rbx, %rdi
    000021ec: 	je	.Ltmp1209 # Offset: 8684
    000021ee: 	movq	0x1c0(%rsp), %rax
    000021f6: 	leaq	0x1(%rax), %rsi
    000021fa: 	callq	_ZdlPvm@PLT # Offset: 8698
.Ltmp1209:
    000021ff: 	leaq	DATAat0x118f1(%rip), %rdx
    00002206: 	movq	%r13, %rsi
    00002209: 	movq	%rbp, %rdi
    0000220c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8716
    00002211: 	movq	%rbp, %rdx
    00002214: 	leaq	_Z25count_half_goto2_pointer3IhEmPT_m(%rip), %rsi
    0000221b: 	movq	%r12, %rdi
    0000221e: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 8734
    00002223: 	movq	0x1b0(%rsp), %rdi
    0000222b: 	cmpq	%rbx, %rdi
    0000222e: 	je	.Ltmp1210 # Offset: 8750
    00002230: 	movq	0x1c0(%rsp), %rax
    00002238: 	leaq	0x1(%rax), %rsi
    0000223c: 	callq	_ZdlPvm@PLT # Offset: 8764
.Ltmp1210:
    00002241: 	leaq	DATAat0x1190c(%rip), %rdx
    00002248: 	movq	%r13, %rsi
    0000224b: 	movq	%rbp, %rdi
    0000224e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8782
    00002253: 	movq	%rbp, %rdx
    00002256: 	leaq	_Z23count_half_goto2_index1IhEmPT_m(%rip), %rsi
    0000225d: 	movq	%r12, %rdi
    00002260: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 8800
    00002265: 	movq	0x1b0(%rsp), %rdi
    0000226d: 	cmpq	%rbx, %rdi
    00002270: 	je	.Ltmp1211 # Offset: 8816
    00002272: 	movq	0x1c0(%rsp), %rax
    0000227a: 	leaq	0x1(%rax), %rsi
    0000227e: 	callq	_ZdlPvm@PLT # Offset: 8830
.Ltmp1211:
    00002283: 	movq	0x90(%rsp), %r15
    0000228b: 	movq	0x98(%rsp), %r14
    00002293: 	movq	%rbx, 0x1b0(%rsp)
    0000229b: 	movq	%r15, %rax
    0000229e: 	addq	%r14, %rax
    000022a1: 	je	.Ltmp1212 # Offset: 8865
    000022a3: 	testq	%r15, %r15
    000022a6: 	je	.Ltmp1213 # Offset: 8870
.Ltmp1212:
    000022ac: 	movq	%r14, 0x70(%rsp)
    000022b1: 	cmpq	$0xf, %r14
    000022b5: 	ja	.Ltmp1214 # Offset: 8885
    000022bb: 	cmpq	$0x1, %r14
    000022bf: 	jne	.Ltmp1215 # Offset: 8895
    000022c5: 	movzbl	(%r15), %eax
    000022c9: 	movb	%al, 0x1c0(%rsp)
    000022d0: 	movq	%rbx, %rax
.Ltmp1367:
    000022d3: 	movq	%r14, 0x1b8(%rsp)
    000022db: 	movb	$0x0, (%rax,%r14)
    000022e0: 	movabsq	$0x3fffffffffffffff, %rax
    000022ea: 	subq	0x1b8(%rsp), %rax
    000022f2: 	cmpq	$0x17, %rax
    000022f6: 	jbe	.Ltmp1216 # Offset: 8950
    000022fc: 	movl	$0x18, %edx
    00002301: 	leaq	DATAat0x11925(%rip), %rsi
    00002308: 	movq	%rbp, %rdi
    0000230b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 8971
    00002310: 	movq	%rbp, %rdx
    00002313: 	leaq	_Z23count_half_goto2_index2IhEmPT_m(%rip), %rsi
    0000231a: 	movq	%r12, %rdi
    0000231d: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 8989
    00002322: 	movq	0x1b0(%rsp), %rdi
    0000232a: 	cmpq	%rbx, %rdi
    0000232d: 	je	.Ltmp1217 # Offset: 9005
    0000232f: 	movq	0x1c0(%rsp), %rax
    00002337: 	leaq	0x1(%rax), %rsi
    0000233b: 	callq	_ZdlPvm@PLT # Offset: 9019
.Ltmp1217:
    00002340: 	leaq	DATAat0x1193e(%rip), %rdx
    00002347: 	movq	%r13, %rsi
    0000234a: 	movq	%rbp, %rdi
    0000234d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9037
    00002352: 	movq	%rbp, %rdx
    00002355: 	leaq	_Z23count_half_goto2_index3IhEmPT_m(%rip), %rsi
    0000235c: 	movq	%r12, %rdi
    0000235f: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 9055
    00002364: 	movq	0x1b0(%rsp), %rdi
    0000236c: 	cmpq	%rbx, %rdi
    0000236f: 	je	.Ltmp1218 # Offset: 9071
    00002371: 	movq	0x1c0(%rsp), %rax
    00002379: 	leaq	0x1(%rax), %rsi
    0000237d: 	callq	_ZdlPvm@PLT # Offset: 9085
.Ltmp1218:
    00002382: 	movq	0x90(%rsp), %r15
    0000238a: 	movq	0x98(%rsp), %r14
    00002392: 	movq	%rbx, 0x1b0(%rsp)
    0000239a: 	movq	%r15, %rax
    0000239d: 	addq	%r14, %rax
    000023a0: 	je	.Ltmp1219 # Offset: 9120
    000023a2: 	testq	%r15, %r15
    000023a5: 	je	.Ltmp1220 # Offset: 9125
.Ltmp1219:
    000023ab: 	movq	%r14, 0x70(%rsp)
    000023b0: 	cmpq	$0xf, %r14
    000023b4: 	ja	.Ltmp1221 # Offset: 9140
    000023ba: 	cmpq	$0x1, %r14
    000023be: 	jne	.Ltmp1222 # Offset: 9150
    000023c4: 	movzbl	(%r15), %eax
    000023c8: 	movb	%al, 0x1c0(%rsp)
    000023cf: 	movq	%rbx, %rax
.Ltmp1377:
    000023d2: 	movq	%r14, 0x1b8(%rsp)
    000023da: 	movb	$0x0, (%rax,%r14)
    000023df: 	movabsq	$0x3fffffffffffffff, %rax
    000023e9: 	subq	0x1b8(%rsp), %rax
    000023f1: 	cmpq	$0x17, %rax
    000023f5: 	jbe	.Ltmp1223 # Offset: 9205
    000023fb: 	movl	$0x18, %edx
    00002400: 	leaq	DATAat0x11957(%rip), %rsi
    00002407: 	movq	%rbp, %rdi
    0000240a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 9226
    0000240f: 	movq	%rbp, %rdx
    00002412: 	leaq	_Z23count_half_goto2_index4IhEmPT_m(%rip), %rsi
    00002419: 	movq	%r12, %rdi
    0000241c: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 9244
    00002421: 	movq	0x1b0(%rsp), %rdi
    00002429: 	cmpq	%rbx, %rdi
    0000242c: 	je	.Ltmp1224 # Offset: 9260
    0000242e: 	movq	0x1c0(%rsp), %rax
    00002436: 	leaq	0x1(%rax), %rsi
    0000243a: 	callq	_ZdlPvm@PLT # Offset: 9274
.Ltmp1224:
    0000243f: 	leaq	DATAat0x11970(%rip), %rdx
    00002446: 	movq	%r13, %rsi
    00002449: 	movq	%rbp, %rdi
    0000244c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9292
    00002451: 	movq	%rbp, %rdx
    00002454: 	leaq	_Z23count_half_goto2_index5IhEmPT_m(%rip), %rsi
    0000245b: 	movq	%r12, %rdi
    0000245e: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 9310
    00002463: 	movq	0x1b0(%rsp), %rdi
    0000246b: 	cmpq	%rbx, %rdi
    0000246e: 	je	.Ltmp1225 # Offset: 9326
    00002470: 	movq	0x1c0(%rsp), %rax
    00002478: 	leaq	0x1(%rax), %rsi
    0000247c: 	callq	_ZdlPvm@PLT # Offset: 9340
.Ltmp1225:
    00002481: 	movq	0x90(%rsp), %r15
    00002489: 	leaq	0x160(%rsp), %rax
    00002491: 	movq	0x98(%rsp), %r14
    00002499: 	movq	%rax, 0x28(%rsp)
    0000249e: 	movq	%rax, 0x150(%rsp)
    000024a6: 	movq	%r15, %rax
    000024a9: 	addq	%r14, %rax
    000024ac: 	je	.Ltmp1226 # Offset: 9388
    000024ae: 	testq	%r15, %r15
    000024b1: 	je	.Ltmp1227 # Offset: 9393
.Ltmp1226:
    000024b7: 	movq	%r14, 0x70(%rsp)
    000024bc: 	cmpq	$0xf, %r14
    000024c0: 	ja	.Ltmp1228 # Offset: 9408
    000024c6: 	cmpq	$0x1, %r14
    000024ca: 	jne	.Ltmp1229 # Offset: 9418
    000024d0: 	movzbl	(%r15), %eax
    000024d4: 	movb	%al, 0x160(%rsp)
    000024db: 	movq	0x28(%rsp), %rax
.Ltmp1375:
    000024e0: 	movq	%r14, 0x158(%rsp)
    000024e8: 	movb	$0x0, (%rax,%r14)
    000024ed: 	movabsq	$0x3fffffffffffffff, %rax
    000024f7: 	subq	0x158(%rsp), %rax
    000024ff: 	cmpq	$0x1f, %rax
    00002503: 	jbe	.Ltmp1230 # Offset: 9475
    00002509: 	leaq	0x150(%rsp), %rdi
    00002511: 	movl	$0x20, %edx
    00002516: 	leaq	DATAat0x11dd0(%rip), %rsi
    0000251d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 9501
    00002522: 	movl	iterations(%rip), %esi
    00002528: 	movq	0x150(%rsp), %rdi
    00002530: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 9520
    00002535: 	leaq	DATAat0x11989(%rip), %rdx
    0000253c: 	movq	%r13, %rsi
    0000253f: 	movq	%rbp, %rdi
    00002542: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9538
    00002547: 	movq	%rbp, %rdx
    0000254a: 	leaq	_Z20count_half_goto3_optIhEmPT_m(%rip), %rsi
    00002551: 	movq	%r12, %rdi
    00002554: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 9556
    00002559: 	movq	0x1b0(%rsp), %rdi
    00002561: 	cmpq	%rbx, %rdi
    00002564: 	je	.Ltmp1231 # Offset: 9572
    00002566: 	movq	0x1c0(%rsp), %rax
    0000256e: 	leaq	0x1(%rax), %rsi
    00002572: 	callq	_ZdlPvm@PLT # Offset: 9586
.Ltmp1231:
    00002577: 	movq	0x90(%rsp), %r15
    0000257f: 	movq	0x98(%rsp), %r14
    00002587: 	movq	%rbx, 0x1b0(%rsp)
    0000258f: 	movq	%r15, %rax
    00002592: 	addq	%r14, %rax
    00002595: 	je	.Ltmp1232 # Offset: 9621
    00002597: 	testq	%r15, %r15
    0000259a: 	je	.Ltmp1233 # Offset: 9626
.Ltmp1232:
    000025a0: 	movq	%r14, 0x70(%rsp)
    000025a5: 	cmpq	$0xf, %r14
    000025a9: 	ja	.Ltmp1234 # Offset: 9641
    000025af: 	cmpq	$0x1, %r14
    000025b3: 	jne	.Ltmp1235 # Offset: 9651
    000025b9: 	movzbl	(%r15), %eax
    000025bd: 	movb	%al, 0x1c0(%rsp)
    000025c4: 	movq	%rbx, %rax
.Ltmp1373:
    000025c7: 	movq	%r14, 0x1b8(%rsp)
    000025cf: 	movb	$0x0, (%rax,%r14)
    000025d4: 	movabsq	$0x3fffffffffffffff, %rax
    000025de: 	subq	0x1b8(%rsp), %rax
    000025e6: 	cmpq	$0x17, %rax
    000025ea: 	jbe	.Ltmp1236 # Offset: 9706
    000025f0: 	movl	$0x18, %edx
    000025f5: 	leaq	DATAat0x1199f(%rip), %rsi
    000025fc: 	movq	%rbp, %rdi
    000025ff: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 9727
    00002604: 	movq	%rbp, %rdx
    00002607: 	leaq	_Z28count_half_goto3_uncountableIhEmPT_m(%rip), %rsi
    0000260e: 	movq	%r12, %rdi
    00002611: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 9745
    00002616: 	movq	0x1b0(%rsp), %rdi
    0000261e: 	cmpq	%rbx, %rdi
    00002621: 	je	.Ltmp1237 # Offset: 9761
    00002623: 	movq	0x1c0(%rsp), %rax
    0000262b: 	leaq	0x1(%rax), %rsi
    0000262f: 	callq	_ZdlPvm@PLT # Offset: 9775
.Ltmp1237:
    00002634: 	leaq	DATAat0x119b8(%rip), %rdx
    0000263b: 	movq	%r13, %rsi
    0000263e: 	movq	%rbp, %rdi
    00002641: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9793
    00002646: 	movq	%rbp, %rdx
    00002649: 	leaq	_Z25count_half_goto3_pointer1IhEmPT_m(%rip), %rsi
    00002650: 	movq	%r12, %rdi
    00002653: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 9811
    00002658: 	movq	0x1b0(%rsp), %rdi
    00002660: 	cmpq	%rbx, %rdi
    00002663: 	je	.Ltmp1238 # Offset: 9827
    00002665: 	movq	0x1c0(%rsp), %rax
    0000266d: 	leaq	0x1(%rax), %rsi
    00002671: 	callq	_ZdlPvm@PLT # Offset: 9841
.Ltmp1238:
    00002676: 	leaq	DATAat0x119d3(%rip), %rdx
    0000267d: 	movq	%r13, %rsi
    00002680: 	movq	%rbp, %rdi
    00002683: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9859
    00002688: 	movq	%rbp, %rdx
    0000268b: 	leaq	_Z25count_half_goto3_pointer2IhEmPT_m(%rip), %rsi
    00002692: 	movq	%r12, %rdi
    00002695: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 9877
    0000269a: 	movq	0x1b0(%rsp), %rdi
    000026a2: 	cmpq	%rbx, %rdi
    000026a5: 	je	.Ltmp1239 # Offset: 9893
    000026a7: 	movq	0x1c0(%rsp), %rax
    000026af: 	leaq	0x1(%rax), %rsi
    000026b3: 	callq	_ZdlPvm@PLT # Offset: 9907
.Ltmp1239:
    000026b8: 	leaq	DATAat0x119ee(%rip), %rdx
    000026bf: 	movq	%r13, %rsi
    000026c2: 	movq	%rbp, %rdi
    000026c5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9925
    000026ca: 	movq	%rbp, %rdx
    000026cd: 	leaq	_Z25count_half_goto3_pointer3IhEmPT_m(%rip), %rsi
    000026d4: 	movq	%r12, %rdi
    000026d7: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 9943
    000026dc: 	movq	0x1b0(%rsp), %rdi
    000026e4: 	cmpq	%rbx, %rdi
    000026e7: 	je	.Ltmp1240 # Offset: 9959
    000026e9: 	movq	0x1c0(%rsp), %rax
    000026f1: 	leaq	0x1(%rax), %rsi
    000026f5: 	callq	_ZdlPvm@PLT # Offset: 9973
.Ltmp1240:
    000026fa: 	movq	0x90(%rsp), %r15
    00002702: 	movq	0x98(%rsp), %r14
    0000270a: 	movq	%rbx, 0x1b0(%rsp)
    00002712: 	movq	%r15, %rax
    00002715: 	addq	%r14, %rax
    00002718: 	je	.Ltmp1241 # Offset: 10008
    0000271a: 	testq	%r15, %r15
    0000271d: 	je	.Ltmp1242 # Offset: 10013
.Ltmp1241:
    00002723: 	movq	%r14, 0x70(%rsp)
    00002728: 	cmpq	$0xf, %r14
    0000272c: 	ja	.Ltmp1243 # Offset: 10028
    00002732: 	cmpq	$0x1, %r14
    00002736: 	jne	.Ltmp1244 # Offset: 10038
    0000273c: 	movzbl	(%r15), %eax
    00002740: 	movb	%al, 0x1c0(%rsp)
    00002747: 	movq	%rbx, %rax
.Ltmp1371:
    0000274a: 	movq	%r14, 0x1b8(%rsp)
    00002752: 	movb	$0x0, (%rax,%r14)
    00002757: 	movabsq	$0x3fffffffffffffff, %rax
    00002761: 	subq	0x1b8(%rsp), %rax
    00002769: 	cmpq	$0x17, %rax
    0000276d: 	jbe	.Ltmp1245 # Offset: 10093
    00002773: 	movl	$0x18, %edx
    00002778: 	leaq	DATAat0x11a09(%rip), %rsi
    0000277f: 	movq	%rbp, %rdi
    00002782: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 10114
    00002787: 	movq	%rbp, %rdx
    0000278a: 	leaq	_Z23count_half_goto3_index1IhEmPT_m(%rip), %rsi
    00002791: 	movq	%r12, %rdi
    00002794: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 10132
    00002799: 	movq	0x1b0(%rsp), %rdi
    000027a1: 	cmpq	%rbx, %rdi
    000027a4: 	je	.Ltmp1246 # Offset: 10148
    000027a6: 	movq	0x1c0(%rsp), %rax
    000027ae: 	leaq	0x1(%rax), %rsi
    000027b2: 	callq	_ZdlPvm@PLT # Offset: 10162
.Ltmp1246:
    000027b7: 	leaq	DATAat0x11a22(%rip), %rdx
    000027be: 	movq	%r13, %rsi
    000027c1: 	movq	%rbp, %rdi
    000027c4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10180
    000027c9: 	movq	%rbp, %rdx
    000027cc: 	leaq	_Z23count_half_goto3_index2IhEmPT_m(%rip), %rsi
    000027d3: 	movq	%r12, %rdi
    000027d6: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 10198
    000027db: 	movq	0x1b0(%rsp), %rdi
    000027e3: 	cmpq	%rbx, %rdi
    000027e6: 	je	.Ltmp1247 # Offset: 10214
    000027e8: 	movq	0x1c0(%rsp), %rax
    000027f0: 	leaq	0x1(%rax), %rsi
    000027f4: 	callq	_ZdlPvm@PLT # Offset: 10228
.Ltmp1247:
    000027f9: 	movq	0x90(%rsp), %r15
    00002801: 	movq	0x98(%rsp), %r14
    00002809: 	movq	%rbx, 0x1b0(%rsp)
    00002811: 	movq	%r15, %rax
    00002814: 	addq	%r14, %rax
    00002817: 	je	.Ltmp1248 # Offset: 10263
    00002819: 	testq	%r15, %r15
    0000281c: 	je	.Ltmp1249 # Offset: 10268
.Ltmp1248:
    00002822: 	movq	%r14, 0x70(%rsp)
    00002827: 	cmpq	$0xf, %r14
    0000282b: 	ja	.Ltmp1250 # Offset: 10283
    00002831: 	cmpq	$0x1, %r14
    00002835: 	jne	.Ltmp1251 # Offset: 10293
    0000283b: 	movzbl	(%r15), %eax
    0000283f: 	movb	%al, 0x1c0(%rsp)
    00002846: 	movq	%rbx, %rax
.Ltmp1389:
    00002849: 	movq	%r14, 0x1b8(%rsp)
    00002851: 	movb	$0x0, (%rax,%r14)
    00002856: 	movabsq	$0x3fffffffffffffff, %rax
    00002860: 	subq	0x1b8(%rsp), %rax
    00002868: 	cmpq	$0x17, %rax
    0000286c: 	jbe	.Ltmp1252 # Offset: 10348
    00002872: 	movl	$0x18, %edx
    00002877: 	leaq	DATAat0x11a3b(%rip), %rsi
    0000287e: 	movq	%rbp, %rdi
    00002881: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 10369
    00002886: 	movq	%rbp, %rdx
    00002889: 	leaq	_Z23count_half_goto3_index3IhEmPT_m(%rip), %rsi
    00002890: 	movq	%r12, %rdi
    00002893: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 10387
    00002898: 	movq	0x1b0(%rsp), %rdi
    000028a0: 	cmpq	%rbx, %rdi
    000028a3: 	je	.Ltmp1253 # Offset: 10403
    000028a5: 	movq	0x1c0(%rsp), %rax
    000028ad: 	leaq	0x1(%rax), %rsi
    000028b1: 	callq	_ZdlPvm@PLT # Offset: 10417
.Ltmp1253:
    000028b6: 	leaq	DATAat0x11a54(%rip), %rdx
    000028bd: 	movq	%r13, %rsi
    000028c0: 	movq	%rbp, %rdi
    000028c3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10435
    000028c8: 	movq	%rbp, %rdx
    000028cb: 	leaq	_Z23count_half_goto3_index4IhEmPT_m(%rip), %rsi
    000028d2: 	movq	%r12, %rdi
    000028d5: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 10453
    000028da: 	movq	0x1b0(%rsp), %rdi
    000028e2: 	cmpq	%rbx, %rdi
    000028e5: 	je	.Ltmp1254 # Offset: 10469
    000028e7: 	movq	0x1c0(%rsp), %rax
    000028ef: 	leaq	0x1(%rax), %rsi
    000028f3: 	callq	_ZdlPvm@PLT # Offset: 10483
.Ltmp1254:
    000028f8: 	leaq	DATAat0x11a6d(%rip), %rdx
    000028ff: 	movq	%r13, %rsi
    00002902: 	movq	%rbp, %rdi
    00002905: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10501
    0000290a: 	movq	%rbp, %rdx
    0000290d: 	leaq	_Z23count_half_goto3_index5IhEmPT_m(%rip), %rsi
    00002914: 	movq	%r12, %rdi
    00002917: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 10519
    0000291c: 	movq	0x1b0(%rsp), %rdi
    00002924: 	cmpq	%rbx, %rdi
    00002927: 	je	.Ltmp1255 # Offset: 10535
    00002929: 	movq	0x1c0(%rsp), %rax
    00002931: 	leaq	0x1(%rax), %rsi
    00002935: 	callq	_ZdlPvm@PLT # Offset: 10549
.Ltmp1255:
    0000293a: 	leaq	0x170(%rsp), %rdi
    00002942: 	leaq	DATAat0x11df8(%rip), %rdx
    00002949: 	movq	%r13, %rsi
    0000294c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10572
    00002951: 	movl	iterations(%rip), %esi
    00002957: 	movq	0x170(%rsp), %rdi
    0000295f: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 10591
    00002964: 	leaq	DATAat0x11a86(%rip), %rdx
    0000296b: 	movq	%r13, %rsi
    0000296e: 	movq	%rbp, %rdi
    00002971: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10609
    00002976: 	movq	%rbp, %rdx
    00002979: 	leaq	_Z20count_half_goto4_optIhEmPT_m(%rip), %rsi
    00002980: 	movq	%r12, %rdi
    00002983: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 10627
    00002988: 	movq	0x1b0(%rsp), %rdi
    00002990: 	cmpq	%rbx, %rdi
    00002993: 	je	.Ltmp1256 # Offset: 10643
    00002995: 	movq	0x1c0(%rsp), %rax
    0000299d: 	leaq	0x1(%rax), %rsi
    000029a1: 	callq	_ZdlPvm@PLT # Offset: 10657
.Ltmp1256:
    000029a6: 	leaq	DATAat0x11a9c(%rip), %rdx
    000029ad: 	movq	%r13, %rsi
    000029b0: 	movq	%rbp, %rdi
    000029b3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10675
    000029b8: 	movq	%rbp, %rdx
    000029bb: 	leaq	_Z28count_half_goto4_uncountableIhEmPT_m(%rip), %rsi
    000029c2: 	movq	%r12, %rdi
    000029c5: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 10693
    000029ca: 	movq	0x1b0(%rsp), %rdi
    000029d2: 	cmpq	%rbx, %rdi
    000029d5: 	je	.Ltmp1257 # Offset: 10709
    000029d7: 	movq	0x1c0(%rsp), %rax
    000029df: 	leaq	0x1(%rax), %rsi
    000029e3: 	callq	_ZdlPvm@PLT # Offset: 10723
.Ltmp1257:
    000029e8: 	leaq	DATAat0x11ab5(%rip), %rdx
    000029ef: 	movq	%r13, %rsi
    000029f2: 	movq	%rbp, %rdi
    000029f5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10741
    000029fa: 	movq	%rbp, %rdx
    000029fd: 	leaq	_Z25count_half_goto4_pointer1IhEmPT_m(%rip), %rsi
    00002a04: 	movq	%r12, %rdi
    00002a07: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 10759
    00002a0c: 	movq	0x1b0(%rsp), %rdi
    00002a14: 	cmpq	%rbx, %rdi
    00002a17: 	je	.Ltmp1258 # Offset: 10775
    00002a19: 	movq	0x1c0(%rsp), %rax
    00002a21: 	leaq	0x1(%rax), %rsi
    00002a25: 	callq	_ZdlPvm@PLT # Offset: 10789
.Ltmp1258:
    00002a2a: 	leaq	DATAat0x11ad0(%rip), %rdx
    00002a31: 	movq	%r13, %rsi
    00002a34: 	movq	%rbp, %rdi
    00002a37: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10807
    00002a3c: 	movq	%rbp, %rdx
    00002a3f: 	leaq	_Z25count_half_goto4_pointer2IhEmPT_m(%rip), %rsi
    00002a46: 	movq	%r12, %rdi
    00002a49: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 10825
    00002a4e: 	movq	0x1b0(%rsp), %rdi
    00002a56: 	cmpq	%rbx, %rdi
    00002a59: 	je	.Ltmp1259 # Offset: 10841
    00002a5b: 	movq	0x1c0(%rsp), %rax
    00002a63: 	leaq	0x1(%rax), %rsi
    00002a67: 	callq	_ZdlPvm@PLT # Offset: 10855
.Ltmp1259:
    00002a6c: 	leaq	DATAat0x11aeb(%rip), %rdx
    00002a73: 	movq	%r13, %rsi
    00002a76: 	movq	%rbp, %rdi
    00002a79: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10873
    00002a7e: 	movq	%rbp, %rdx
    00002a81: 	leaq	_Z25count_half_goto4_pointer3IhEmPT_m(%rip), %rsi
    00002a88: 	movq	%r12, %rdi
    00002a8b: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 10891
    00002a90: 	movq	0x1b0(%rsp), %rdi
    00002a98: 	cmpq	%rbx, %rdi
    00002a9b: 	je	.Ltmp1260 # Offset: 10907
    00002a9d: 	movq	0x1c0(%rsp), %rax
    00002aa5: 	leaq	0x1(%rax), %rsi
    00002aa9: 	callq	_ZdlPvm@PLT # Offset: 10921
.Ltmp1260:
    00002aae: 	movq	0x90(%rsp), %r15
    00002ab6: 	movq	0x98(%rsp), %r14
    00002abe: 	movq	%rbx, 0x1b0(%rsp)
    00002ac6: 	movq	%r15, %rax
    00002ac9: 	addq	%r14, %rax
    00002acc: 	je	.Ltmp1261 # Offset: 10956
    00002ace: 	testq	%r15, %r15
    00002ad1: 	je	.Ltmp1262 # Offset: 10961
.Ltmp1261:
    00002ad7: 	movq	%r14, 0x70(%rsp)
    00002adc: 	cmpq	$0xf, %r14
    00002ae0: 	ja	.Ltmp1263 # Offset: 10976
    00002ae6: 	cmpq	$0x1, %r14
    00002aea: 	jne	.Ltmp1264 # Offset: 10986
    00002af0: 	movzbl	(%r15), %eax
    00002af4: 	movb	%al, 0x1c0(%rsp)
    00002afb: 	movq	%rbx, %rax
.Ltmp1387:
    00002afe: 	movq	%r14, 0x1b8(%rsp)
    00002b06: 	movb	$0x0, (%rax,%r14)
    00002b0b: 	movabsq	$0x3fffffffffffffff, %rax
    00002b15: 	subq	0x1b8(%rsp), %rax
    00002b1d: 	cmpq	$0x17, %rax
    00002b21: 	jbe	.Ltmp1265 # Offset: 11041
    00002b27: 	movl	$0x18, %edx
    00002b2c: 	leaq	DATAat0x11b06(%rip), %rsi
    00002b33: 	movq	%rbp, %rdi
    00002b36: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 11062
    00002b3b: 	movq	%rbp, %rdx
    00002b3e: 	leaq	_Z23count_half_goto4_index1IhEmPT_m(%rip), %rsi
    00002b45: 	movq	%r12, %rdi
    00002b48: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 11080
    00002b4d: 	movq	0x1b0(%rsp), %rdi
    00002b55: 	cmpq	%rbx, %rdi
    00002b58: 	je	.Ltmp1266 # Offset: 11096
    00002b5a: 	movq	0x1c0(%rsp), %rax
    00002b62: 	leaq	0x1(%rax), %rsi
    00002b66: 	callq	_ZdlPvm@PLT # Offset: 11110
.Ltmp1266:
    00002b6b: 	leaq	DATAat0x11b1f(%rip), %rdx
    00002b72: 	movq	%r13, %rsi
    00002b75: 	movq	%rbp, %rdi
    00002b78: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11128
    00002b7d: 	movq	%rbp, %rdx
    00002b80: 	leaq	_Z23count_half_goto4_index2IhEmPT_m(%rip), %rsi
    00002b87: 	movq	%r12, %rdi
    00002b8a: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 11146
    00002b8f: 	movq	0x1b0(%rsp), %rdi
    00002b97: 	cmpq	%rbx, %rdi
    00002b9a: 	je	.Ltmp1267 # Offset: 11162
    00002b9c: 	movq	0x1c0(%rsp), %rax
    00002ba4: 	leaq	0x1(%rax), %rsi
    00002ba8: 	callq	_ZdlPvm@PLT # Offset: 11176
.Ltmp1267:
    00002bad: 	movq	0x90(%rsp), %r15
    00002bb5: 	movq	0x98(%rsp), %r14
    00002bbd: 	movq	%rbx, 0x1b0(%rsp)
    00002bc5: 	movq	%r15, %rax
    00002bc8: 	addq	%r14, %rax
    00002bcb: 	je	.Ltmp1268 # Offset: 11211
    00002bcd: 	testq	%r15, %r15
    00002bd0: 	je	.Ltmp1269 # Offset: 11216
.Ltmp1268:
    00002bd6: 	movq	%r14, 0x70(%rsp)
    00002bdb: 	cmpq	$0xf, %r14
    00002bdf: 	ja	.Ltmp1270 # Offset: 11231
    00002be5: 	cmpq	$0x1, %r14
    00002be9: 	jne	.Ltmp1271 # Offset: 11241
    00002bef: 	movzbl	(%r15), %eax
    00002bf3: 	movb	%al, 0x1c0(%rsp)
    00002bfa: 	movq	%rbx, %rax
.Ltmp1385:
    00002bfd: 	movq	%r14, 0x1b8(%rsp)
    00002c05: 	movb	$0x0, (%rax,%r14)
    00002c0a: 	movabsq	$0x3fffffffffffffff, %rax
    00002c14: 	subq	0x1b8(%rsp), %rax
    00002c1c: 	cmpq	$0x17, %rax
    00002c20: 	jbe	.Ltmp1272 # Offset: 11296
    00002c26: 	movl	$0x18, %edx
    00002c2b: 	leaq	DATAat0x11b38(%rip), %rsi
    00002c32: 	movq	%rbp, %rdi
    00002c35: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 11317
    00002c3a: 	movq	%rbp, %rdx
    00002c3d: 	leaq	_Z23count_half_goto4_index3IhEmPT_m(%rip), %rsi
    00002c44: 	movq	%r12, %rdi
    00002c47: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 11335
    00002c4c: 	movq	0x1b0(%rsp), %rdi
    00002c54: 	cmpq	%rbx, %rdi
    00002c57: 	je	.Ltmp1273 # Offset: 11351
    00002c59: 	movq	0x1c0(%rsp), %rax
    00002c61: 	leaq	0x1(%rax), %rsi
    00002c65: 	callq	_ZdlPvm@PLT # Offset: 11365
.Ltmp1273:
    00002c6a: 	leaq	DATAat0x11b51(%rip), %rdx
    00002c71: 	movq	%r13, %rsi
    00002c74: 	movq	%rbp, %rdi
    00002c77: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11383
    00002c7c: 	movq	%rbp, %rdx
    00002c7f: 	leaq	_Z23count_half_goto4_index4IhEmPT_m(%rip), %rsi
    00002c86: 	movq	%r12, %rdi
    00002c89: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 11401
    00002c8e: 	movq	0x1b0(%rsp), %rdi
    00002c96: 	cmpq	%rbx, %rdi
    00002c99: 	je	.Ltmp1274 # Offset: 11417
    00002c9b: 	movq	0x1c0(%rsp), %rax
    00002ca3: 	leaq	0x1(%rax), %rsi
    00002ca7: 	callq	_ZdlPvm@PLT # Offset: 11431
.Ltmp1274:
    00002cac: 	movq	0x90(%rsp), %r15
    00002cb4: 	movq	0x98(%rsp), %r14
    00002cbc: 	movq	%rbx, 0x1b0(%rsp)
    00002cc4: 	movq	%r15, %rax
    00002cc7: 	addq	%r14, %rax
    00002cca: 	je	.Ltmp1275 # Offset: 11466
    00002ccc: 	testq	%r15, %r15
    00002ccf: 	je	.Ltmp1276 # Offset: 11471
.Ltmp1275:
    00002cd5: 	movq	%r14, 0x70(%rsp)
    00002cda: 	cmpq	$0xf, %r14
    00002cde: 	ja	.Ltmp1277 # Offset: 11486
    00002ce4: 	cmpq	$0x1, %r14
    00002ce8: 	jne	.Ltmp1278 # Offset: 11496
    00002cee: 	movzbl	(%r15), %eax
    00002cf2: 	movb	%al, 0x1c0(%rsp)
    00002cf9: 	movq	%rbx, %rax
.Ltmp1383:
    00002cfc: 	movq	%r14, 0x1b8(%rsp)
    00002d04: 	movb	$0x0, (%rax,%r14)
    00002d09: 	movabsq	$0x3fffffffffffffff, %rax
    00002d13: 	subq	0x1b8(%rsp), %rax
    00002d1b: 	cmpq	$0x17, %rax
    00002d1f: 	jbe	.Ltmp1279 # Offset: 11551
    00002d25: 	movl	$0x18, %edx
    00002d2a: 	leaq	DATAat0x11b6a(%rip), %rsi
    00002d31: 	movq	%rbp, %rdi
    00002d34: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 11572
    00002d39: 	movq	%rbp, %rdx
    00002d3c: 	leaq	_Z23count_half_goto4_index5IhEmPT_m(%rip), %rsi
    00002d43: 	movq	%r12, %rdi
    00002d46: 	callq	"_Z15test_count_halfIPhPFmS0_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 11590
    00002d4b: 	movq	0x1b0(%rsp), %rdi
    00002d53: 	cmpq	%rbx, %rdi
    00002d56: 	je	.Ltmp1280 # Offset: 11606
    00002d58: 	movq	0x1c0(%rsp), %rax
    00002d60: 	leaq	0x1(%rax), %rsi
    00002d64: 	callq	_ZdlPvm@PLT # Offset: 11620
.Ltmp1280:
    00002d69: 	movq	0x90(%rsp), %r14
    00002d71: 	leaq	0x1a0(%rsp), %rax
    00002d79: 	movq	0x98(%rsp), %r12
    00002d81: 	movq	%rax, 0x10(%rsp)
    00002d86: 	movq	%rax, 0x190(%rsp)
    00002d8e: 	movq	%r14, %rax
    00002d91: 	addq	%r12, %rax
    00002d94: 	je	.Ltmp1281 # Offset: 11668
    00002d96: 	testq	%r14, %r14
    00002d99: 	je	.Ltmp1282 # Offset: 11673
.Ltmp1281:
    00002d9f: 	movq	%r12, 0x70(%rsp)
    00002da4: 	cmpq	$0xf, %r12
    00002da8: 	ja	.Ltmp1283 # Offset: 11688
    00002dae: 	cmpq	$0x1, %r12
    00002db2: 	jne	.Ltmp1284 # Offset: 11698
    00002db8: 	movzbl	(%r14), %eax
    00002dbc: 	movb	%al, 0x1a0(%rsp)
    00002dc3: 	movq	0x10(%rsp), %rax
.Ltmp1381:
    00002dc8: 	movq	%r12, 0x198(%rsp)
    00002dd0: 	movb	$0x0, (%rax,%r12)
    00002dd5: 	movabsq	$0x3fffffffffffffff, %rax
    00002ddf: 	subq	0x198(%rsp), %rax
    00002de7: 	cmpq	$0x1f, %rax
    00002deb: 	jbe	.Ltmp1285 # Offset: 11755
    00002df1: 	leaq	0x190(%rsp), %rdi
    00002df9: 	movl	$0x20, %edx
    00002dfe: 	leaq	DATAat0x11e20(%rip), %rsi
    00002e05: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 11781
    00002e0a: 	movl	iterations(%rip), %esi
    00002e10: 	movq	0x190(%rsp), %rdi
    00002e18: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 11800
    00002e1d: 	movq	0x90(%rsp), %r14
    00002e25: 	movq	0x98(%rsp), %r12
    00002e2d: 	movq	%rbx, 0x1b0(%rsp)
    00002e35: 	movq	%r14, %rax
    00002e38: 	addq	%r12, %rax
    00002e3b: 	je	.Ltmp1286 # Offset: 11835
    00002e3d: 	testq	%r14, %r14
    00002e40: 	je	.Ltmp1287 # Offset: 11840
.Ltmp1286:
    00002e46: 	movq	%r12, 0x70(%rsp)
    00002e4b: 	cmpq	$0xf, %r12
    00002e4f: 	ja	.Ltmp1288 # Offset: 11855
    00002e55: 	cmpq	$0x1, %r12
    00002e59: 	jne	.Ltmp1289 # Offset: 11865
    00002e5f: 	movzbl	(%r14), %eax
    00002e63: 	movb	%al, 0x1c0(%rsp)
    00002e6a: 	movq	%rbx, %rax
.Ltmp1379:
    00002e6d: 	movq	%r12, 0x1b8(%rsp)
    00002e75: 	movb	$0x0, (%rax,%r12)
    00002e7a: 	movabsq	$0x3fffffffffffffff, %rax
    00002e84: 	subq	0x1b8(%rsp), %rax
    00002e8c: 	cmpq	$0x18, %rax
    00002e90: 	jbe	.Ltmp1290 # Offset: 11920
    00002e96: 	movl	$0x19, %edx
    00002e9b: 	leaq	DATAat0x11b83(%rip), %rsi
    00002ea2: 	movq	%rbp, %rdi
    00002ea5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 11941
    00002eaa: 	pxor	%xmm0, %xmm0
    00002eae: 	movl	$0xfa0, %edi
    00002eb3: 	movq	$0x0, 0x80(%rsp)
    00002ebf: 	movaps	%xmm0, 0x70(%rsp)
    00002ec4: 	callq	_Znwm@PLT # Offset: 11972
    00002ec9: 	movq	0x8(%rsp), %rsi
    00002ece: 	leaq	0xfa0(%rax), %rdx
    00002ed5: 	movq	%rax, 0x70(%rsp)
    00002eda: 	leaq	0x8(%rax), %rdi
    00002ede: 	movq	%rdx, 0x80(%rsp)
    00002ee6: 	andq	$-0x8, %rdi
    00002eea: 	leaq	0x70(%rsp), %r12
    00002eef: 	movq	(%rsi), %rcx
    00002ef2: 	movq	%rcx, (%rax)
    00002ef5: 	movq	0x20(%rsp), %rcx
    00002efa: 	movq	-0x10(%rcx), %rcx
    00002efe: 	movq	%rcx, 0xf98(%rax)
    00002f05: 	subq	%rdi, %rax
    00002f08: 	subq	%rax, %rsi
    00002f0b: 	addl	$0xfa0, %eax
    00002f10: 	shrl	$0x3, %eax
    00002f13: 	movl	%eax, %ecx
    00002f15: 	rep		movsq	(%rsi), %es:(%rdi)
    00002f18: 	movq	%rdx, 0x78(%rsp)
    00002f1d: 	leaq	_Z23count_half_forrange_optISt6vectorIhSaIhEEEmRKT_m(%rip), %rsi
    00002f24: 	movq	%rbp, %rdx
    00002f27: 	movq	%r12, %rdi
    00002f2a: 	callq	"_Z15test_count_halfISt6vectorIhSaIhEEPFmRKS2_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 12074
    00002f2f: 	movq	0x70(%rsp), %rdi
    00002f34: 	testq	%rdi, %rdi
    00002f37: 	je	.Ltmp1291 # Offset: 12087
    00002f39: 	movq	0x80(%rsp), %rsi
    00002f41: 	subq	%rdi, %rsi
    00002f44: 	callq	_ZdlPvm@PLT # Offset: 12100
.Ltmp1291:
    00002f49: 	movq	0x1b0(%rsp), %rdi
    00002f51: 	cmpq	%rbx, %rdi
    00002f54: 	je	.Ltmp1292 # Offset: 12116
    00002f56: 	movq	0x1c0(%rsp), %rax
    00002f5e: 	leaq	0x1(%rax), %rsi
    00002f62: 	callq	_ZdlPvm@PLT # Offset: 12130
.Ltmp1292:
    00002f67: 	leaq	DATAat0x11b9d(%rip), %rdx
    00002f6e: 	movq	%r13, %rsi
    00002f71: 	movq	%rbp, %rdi
    00002f74: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12148
    00002f79: 	pxor	%xmm0, %xmm0
    00002f7d: 	movl	$0xfa0, %edi
    00002f82: 	movq	$0x0, 0x80(%rsp)
    00002f8e: 	movaps	%xmm0, 0x70(%rsp)
    00002f93: 	callq	_Znwm@PLT # Offset: 12179
    00002f98: 	movq	0x8(%rsp), %rsi
    00002f9d: 	leaq	0xfa0(%rax), %rdx
    00002fa4: 	movq	%rax, 0x70(%rsp)
    00002fa9: 	leaq	0x8(%rax), %rdi
    00002fad: 	movq	%rdx, 0x80(%rsp)
    00002fb5: 	andq	$-0x8, %rdi
    00002fb9: 	movq	(%rsi), %rcx
    00002fbc: 	movq	%rcx, (%rax)
    00002fbf: 	movq	0x20(%rsp), %rcx
    00002fc4: 	movq	-0x10(%rcx), %rcx
    00002fc8: 	movq	%rcx, 0xf98(%rax)
    00002fcf: 	subq	%rdi, %rax
    00002fd2: 	subq	%rax, %rsi
    00002fd5: 	addl	$0xfa0, %eax
    00002fda: 	shrl	$0x3, %eax
    00002fdd: 	movl	%eax, %ecx
    00002fdf: 	rep		movsq	(%rsi), %es:(%rdi)
    00002fe2: 	movq	%rdx, 0x78(%rsp)
    00002fe7: 	leaq	_Z24count_half_forrange_opt2ISt6vectorIhSaIhEEEmRKT_m(%rip), %rsi
    00002fee: 	movq	%rbp, %rdx
    00002ff1: 	movq	%r12, %rdi
    00002ff4: 	callq	"_Z15test_count_halfISt6vectorIhSaIhEEPFmRKS2_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 12276
    00002ff9: 	movq	0x70(%rsp), %rdi
    00002ffe: 	testq	%rdi, %rdi
    00003001: 	je	.Ltmp1293 # Offset: 12289
    00003003: 	movq	0x80(%rsp), %rsi
    0000300b: 	subq	%rdi, %rsi
    0000300e: 	callq	_ZdlPvm@PLT # Offset: 12302
.Ltmp1293:
    00003013: 	movq	0x1b0(%rsp), %rdi
    0000301b: 	cmpq	%rbx, %rdi
    0000301e: 	je	.Ltmp1294 # Offset: 12318
    00003020: 	movq	0x1c0(%rsp), %rax
    00003028: 	leaq	0x1(%rax), %rsi
    0000302c: 	callq	_ZdlPvm@PLT # Offset: 12332
.Ltmp1294:
    00003031: 	movq	0x90(%rsp), %r15
    00003039: 	movq	0x98(%rsp), %r14
    00003041: 	movq	%rbx, 0x1b0(%rsp)
    00003049: 	movq	%r15, %rax
    0000304c: 	addq	%r14, %rax
    0000304f: 	je	.Ltmp1295 # Offset: 12367
    00003051: 	testq	%r15, %r15
    00003054: 	je	.Ltmp1296 # Offset: 12372
.Ltmp1295:
    0000305a: 	movq	%r14, 0x70(%rsp)
    0000305f: 	cmpq	$0xf, %r14
    00003063: 	ja	.Ltmp1297 # Offset: 12387
    00003069: 	cmpq	$0x1, %r14
    0000306d: 	jne	.Ltmp1298 # Offset: 12397
    00003073: 	movzbl	(%r15), %eax
    00003077: 	movb	%al, 0x1c0(%rsp)
    0000307e: 	movq	%rbx, %rax
.Ltmp1391:
    00003081: 	movq	%r14, 0x1b8(%rsp)
    00003089: 	movb	$0x0, (%rax,%r14)
    0000308e: 	movabsq	$0x3fffffffffffffff, %rax
    00003098: 	subq	0x1b8(%rsp), %rax
    000030a0: 	cmpq	$0x10, %rax
    000030a4: 	jbe	.Ltmp1299 # Offset: 12452
    000030aa: 	movl	$0x11, %edx
    000030af: 	leaq	DATAat0x11bb8(%rip), %rsi
    000030b6: 	movq	%rbp, %rdi
    000030b9: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 12473
    000030be: 	pxor	%xmm0, %xmm0
    000030c2: 	movl	$0xfa0, %edi
    000030c7: 	movq	$0x0, 0x80(%rsp)
    000030d3: 	movaps	%xmm0, 0x70(%rsp)
    000030d8: 	callq	_Znwm@PLT # Offset: 12504
    000030dd: 	movq	0x8(%rsp), %rsi
    000030e2: 	leaq	0xfa0(%rax), %rdx
    000030e9: 	movq	%rax, 0x70(%rsp)
    000030ee: 	leaq	0x8(%rax), %rdi
    000030f2: 	movq	%rdx, 0x80(%rsp)
    000030fa: 	andq	$-0x8, %rdi
    000030fe: 	movq	(%rsi), %rcx
    00003101: 	movq	%rcx, (%rax)
    00003104: 	movq	0x20(%rsp), %rcx
    00003109: 	movq	-0x10(%rcx), %rcx
    0000310d: 	movq	%rcx, 0xf98(%rax)
    00003114: 	subq	%rdi, %rax
    00003117: 	subq	%rax, %rsi
    0000311a: 	addl	$0xfa0, %eax
    0000311f: 	shrl	$0x3, %eax
    00003122: 	movl	%eax, %ecx
    00003124: 	rep		movsq	(%rsi), %es:(%rdi)
    00003127: 	movq	%rdx, 0x78(%rsp)
    0000312c: 	leaq	_Z31count_half_forrange_uncountableISt6vectorIhSaIhEEEmRKT_m(%rip), %rsi
    00003133: 	movq	%rbp, %rdx
    00003136: 	movq	%r12, %rdi
    00003139: 	callq	"_Z15test_count_halfISt6vectorIhSaIhEEPFmRKS2_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 12601
    0000313e: 	movq	0x70(%rsp), %rdi
    00003143: 	testq	%rdi, %rdi
    00003146: 	je	.Ltmp1300 # Offset: 12614
    00003148: 	movq	0x80(%rsp), %rsi
    00003150: 	subq	%rdi, %rsi
    00003153: 	callq	_ZdlPvm@PLT # Offset: 12627
.Ltmp1300:
    00003158: 	movq	0x1b0(%rsp), %rdi
    00003160: 	cmpq	%rbx, %rdi
    00003163: 	je	.Ltmp1301 # Offset: 12643
    00003165: 	movq	0x1c0(%rsp), %rax
    0000316d: 	leaq	0x1(%rax), %rsi
    00003171: 	callq	_ZdlPvm@PLT # Offset: 12657
.Ltmp1301:
    00003176: 	leaq	DATAat0x11bca(%rip), %rdx
    0000317d: 	movq	%r13, %rsi
    00003180: 	movq	%rbp, %rdi
    00003183: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12675
    00003188: 	pxor	%xmm0, %xmm0
    0000318c: 	movl	$0xfa0, %edi
    00003191: 	movq	$0x0, 0x80(%rsp)
    0000319d: 	movaps	%xmm0, 0x70(%rsp)
    000031a2: 	callq	_Znwm@PLT # Offset: 12706
    000031a7: 	movq	0x8(%rsp), %rsi
    000031ac: 	leaq	0xfa0(%rax), %rdx
    000031b3: 	movq	%rax, 0x70(%rsp)
    000031b8: 	leaq	0x8(%rax), %rdi
    000031bc: 	movq	%rdx, 0x80(%rsp)
    000031c4: 	andq	$-0x8, %rdi
    000031c8: 	movq	(%rsi), %rcx
    000031cb: 	movq	%rcx, (%rax)
    000031ce: 	movq	0x20(%rsp), %rcx
    000031d3: 	movq	-0x10(%rcx), %rcx
    000031d7: 	movq	%rcx, 0xf98(%rax)
    000031de: 	subq	%rdi, %rax
    000031e1: 	subq	%rax, %rsi
    000031e4: 	addl	$0xfa0, %eax
    000031e9: 	shrl	$0x3, %eax
    000031ec: 	movl	%eax, %ecx
    000031ee: 	rep		movsq	(%rsi), %es:(%rdi)
    000031f1: 	movq	%rdx, 0x78(%rsp)
    000031f6: 	leaq	_Z20count_half_forrange1ISt6vectorIhSaIhEEEmRKT_m(%rip), %rsi
    000031fd: 	movq	%rbp, %rdx
    00003200: 	movq	%r12, %rdi
    00003203: 	callq	"_Z15test_count_halfISt6vectorIhSaIhEEPFmRKS2_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 12803
    00003208: 	movq	0x70(%rsp), %rdi
    0000320d: 	testq	%rdi, %rdi
    00003210: 	je	.Ltmp1302 # Offset: 12816
    00003212: 	movq	0x80(%rsp), %rsi
    0000321a: 	subq	%rdi, %rsi
    0000321d: 	callq	_ZdlPvm@PLT # Offset: 12829
.Ltmp1302:
    00003222: 	movq	0x1b0(%rsp), %rdi
    0000322a: 	cmpq	%rbx, %rdi
    0000322d: 	je	.Ltmp1303 # Offset: 12845
    0000322f: 	movq	0x1c0(%rsp), %rax
    00003237: 	leaq	0x1(%rax), %rsi
    0000323b: 	callq	_ZdlPvm@PLT # Offset: 12859
.Ltmp1303:
    00003240: 	movq	0x90(%rsp), %r15
    00003248: 	movq	0x98(%rsp), %r14
    00003250: 	movq	%rbx, 0x1b0(%rsp)
    00003258: 	movq	%r15, %rax
    0000325b: 	addq	%r14, %rax
    0000325e: 	je	.Ltmp1304 # Offset: 12894
    00003260: 	testq	%r15, %r15
    00003263: 	je	.Ltmp1305 # Offset: 12899
.Ltmp1304:
    00003269: 	movq	%r14, 0x70(%rsp)
    0000326e: 	cmpq	$0xf, %r14
    00003272: 	ja	.Ltmp1306 # Offset: 12914
    00003278: 	cmpq	$0x1, %r14
    0000327c: 	jne	.Ltmp1307 # Offset: 12924
    00003282: 	movzbl	(%r15), %eax
    00003286: 	movb	%al, 0x1c0(%rsp)
    0000328d: 	movq	%rbx, %rax
.Ltmp1393:
    00003290: 	movq	%r14, 0x1b8(%rsp)
    00003298: 	movb	$0x0, (%rax,%r14)
    0000329d: 	movabsq	$0x3fffffffffffffff, %rax
    000032a7: 	subq	0x1b8(%rsp), %rax
    000032af: 	cmpq	$0x1c, %rax
    000032b3: 	jbe	.Ltmp1308 # Offset: 12979
    000032b9: 	movl	$0x1d, %edx
    000032be: 	leaq	DATAat0x11be8(%rip), %rsi
    000032c5: 	movq	%rbp, %rdi
    000032c8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 13000
    000032cd: 	pxor	%xmm0, %xmm0
    000032d1: 	movl	$0xfa0, %edi
    000032d6: 	movq	$0x0, 0x80(%rsp)
    000032e2: 	movaps	%xmm0, 0x70(%rsp)
    000032e7: 	callq	_Znwm@PLT # Offset: 13031
    000032ec: 	movq	0x8(%rsp), %rsi
    000032f1: 	leaq	0xfa0(%rax), %rdx
    000032f8: 	movq	%rax, 0x70(%rsp)
    000032fd: 	leaq	0x8(%rax), %rdi
    00003301: 	movq	%rdx, 0x80(%rsp)
    00003309: 	andq	$-0x8, %rdi
    0000330d: 	movq	(%rsi), %rcx
    00003310: 	movq	%rcx, (%rax)
    00003313: 	movq	0x20(%rsp), %rcx
    00003318: 	movq	-0x10(%rcx), %rcx
    0000331c: 	movq	%rcx, 0xf98(%rax)
    00003323: 	subq	%rdi, %rax
    00003326: 	subq	%rax, %rsi
    00003329: 	addl	$0xfa0, %eax
    0000332e: 	shrl	$0x3, %eax
    00003331: 	movl	%eax, %ecx
    00003333: 	rep		movsq	(%rsi), %es:(%rdi)
    00003336: 	movq	%rdx, 0x78(%rsp)
    0000333b: 	leaq	_Z20count_half_forrange2ISt6vectorIhSaIhEEEmRKT_m(%rip), %rsi
    00003342: 	movq	%rbp, %rdx
    00003345: 	movq	%r12, %rdi
    00003348: 	callq	"_Z15test_count_halfISt6vectorIhSaIhEEPFmRKS2_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 13128
    0000334d: 	movq	0x70(%rsp), %rdi
    00003352: 	testq	%rdi, %rdi
    00003355: 	je	.Ltmp1309 # Offset: 13141
    00003357: 	movq	0x80(%rsp), %rsi
    0000335f: 	subq	%rdi, %rsi
    00003362: 	callq	_ZdlPvm@PLT # Offset: 13154
.Ltmp1309:
    00003367: 	movq	0x1b0(%rsp), %rdi
    0000336f: 	cmpq	%rbx, %rdi
    00003372: 	je	.Ltmp1310 # Offset: 13170
    00003374: 	movq	0x1c0(%rsp), %rax
    0000337c: 	leaq	0x1(%rax), %rsi
    00003380: 	callq	_ZdlPvm@PLT # Offset: 13184
.Ltmp1310:
    00003385: 	movq	0x90(%rsp), %r15
    0000338d: 	movq	0x98(%rsp), %r14
    00003395: 	movq	%rbx, 0x1b0(%rsp)
    0000339d: 	movq	%r15, %rax
    000033a0: 	addq	%r14, %rax
    000033a3: 	je	.Ltmp1311 # Offset: 13219
    000033a5: 	testq	%r15, %r15
    000033a8: 	je	.Ltmp1312 # Offset: 13224
.Ltmp1311:
    000033ae: 	movq	%r14, 0x70(%rsp)
    000033b3: 	cmpq	$0xf, %r14
    000033b7: 	ja	.Ltmp1313 # Offset: 13239
    000033bd: 	cmpq	$0x1, %r14
    000033c1: 	jne	.Ltmp1314 # Offset: 13249
    000033c7: 	movzbl	(%r15), %eax
    000033cb: 	movb	%al, 0x1c0(%rsp)
    000033d2: 	movq	%rbx, %rax
.Ltmp1395:
    000033d5: 	movq	%r14, 0x1b8(%rsp)
    000033dd: 	movb	$0x0, (%rax,%r14)
    000033e2: 	movabsq	$0x3fffffffffffffff, %rax
    000033ec: 	subq	0x1b8(%rsp), %rax
    000033f4: 	cmpq	$0x1c, %rax
    000033f8: 	jbe	.Ltmp1315 # Offset: 13304
    000033fe: 	movl	$0x1d, %edx
    00003403: 	leaq	DATAat0x11c06(%rip), %rsi
    0000340a: 	movq	%rbp, %rdi
    0000340d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 13325
    00003412: 	pxor	%xmm0, %xmm0
    00003416: 	movl	$0xfa0, %edi
    0000341b: 	movq	$0x0, 0x80(%rsp)
    00003427: 	movaps	%xmm0, 0x70(%rsp)
    0000342c: 	callq	_Znwm@PLT # Offset: 13356
    00003431: 	movq	0x8(%rsp), %rsi
    00003436: 	leaq	0xfa0(%rax), %rdx
    0000343d: 	movq	%rax, 0x70(%rsp)
    00003442: 	leaq	0x8(%rax), %rdi
    00003446: 	movq	%rdx, 0x80(%rsp)
    0000344e: 	andq	$-0x8, %rdi
    00003452: 	movq	(%rsi), %rcx
    00003455: 	movq	%rcx, (%rax)
    00003458: 	movq	0x20(%rsp), %rcx
    0000345d: 	movq	-0x10(%rcx), %rcx
    00003461: 	movq	%rcx, 0xf98(%rax)
    00003468: 	subq	%rdi, %rax
    0000346b: 	subq	%rax, %rsi
    0000346e: 	addl	$0xfa0, %eax
    00003473: 	shrl	$0x3, %eax
    00003476: 	movl	%eax, %ecx
    00003478: 	rep		movsq	(%rsi), %es:(%rdi)
    0000347b: 	movq	%rdx, 0x78(%rsp)
    00003480: 	leaq	_Z20count_half_forrange3ISt6vectorIhSaIhEEEmRKT_m(%rip), %rsi
    00003487: 	movq	%rbp, %rdx
    0000348a: 	movq	%r12, %rdi
    0000348d: 	callq	"_Z15test_count_halfISt6vectorIhSaIhEEPFmRKS2_mEEvT_mT0_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 13453
    00003492: 	movq	0x70(%rsp), %rdi
    00003497: 	testq	%rdi, %rdi
    0000349a: 	je	.Ltmp1316 # Offset: 13466
    0000349c: 	movq	0x80(%rsp), %rsi
    000034a4: 	subq	%rdi, %rsi
    000034a7: 	callq	_ZdlPvm@PLT # Offset: 13479
.Ltmp1316:
    000034ac: 	movq	0x1b0(%rsp), %rdi
    000034b4: 	cmpq	%rbx, %rdi
    000034b7: 	je	.Ltmp1317 # Offset: 13495
    000034b9: 	movq	0x1c0(%rsp), %rax
    000034c1: 	leaq	0x1(%rax), %rsi
    000034c5: 	callq	_ZdlPvm@PLT # Offset: 13509
.Ltmp1317:
    000034ca: 	leaq	DATAat0x11e48(%rip), %rdx
    000034d1: 	movq	%r13, %rsi
    000034d4: 	movq	%rbp, %rdi
    000034d7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13527
    000034dc: 	movl	iterations(%rip), %esi
    000034e2: 	movq	0x1b0(%rsp), %rdi
    000034ea: 	callq	"_Z9summarizePKciiii.constprop.0/1" # Offset: 13546
    000034ef: 	movq	0x1b0(%rsp), %rdi
    000034f7: 	cmpq	%rbx, %rdi
    000034fa: 	je	.Ltmp1318 # Offset: 13562
    000034fc: 	movq	0x1c0(%rsp), %rax
    00003504: 	leaq	0x1(%rax), %rsi
    00003508: 	callq	_ZdlPvm@PLT # Offset: 13576
.Ltmp1318:
    0000350d: 	movq	0x190(%rsp), %rdi
    00003515: 	cmpq	0x10(%rsp), %rdi
    0000351a: 	je	.Ltmp1319 # Offset: 13594
    0000351c: 	movq	0x1a0(%rsp), %rax
    00003524: 	leaq	0x1(%rax), %rsi
    00003528: 	callq	_ZdlPvm@PLT # Offset: 13608
.Ltmp1319:
    0000352d: 	movq	0x170(%rsp), %rdi
    00003535: 	leaq	0x180(%rsp), %rax
    0000353d: 	cmpq	%rax, %rdi
    00003540: 	je	.Ltmp1320 # Offset: 13632
    00003542: 	movq	0x180(%rsp), %rax
    0000354a: 	leaq	0x1(%rax), %rsi
    0000354e: 	callq	_ZdlPvm@PLT # Offset: 13646
.Ltmp1320:
    00003553: 	movq	0x150(%rsp), %rdi
    0000355b: 	cmpq	0x28(%rsp), %rdi
    00003560: 	je	.Ltmp1321 # Offset: 13664
    00003562: 	movq	0x160(%rsp), %rax
    0000356a: 	leaq	0x1(%rax), %rsi
    0000356e: 	callq	_ZdlPvm@PLT # Offset: 13678
.Ltmp1321:
    00003573: 	movq	0x130(%rsp), %rdi
    0000357b: 	leaq	0x140(%rsp), %rax
    00003583: 	cmpq	%rax, %rdi
    00003586: 	je	.Ltmp1322 # Offset: 13702
    00003588: 	movq	0x140(%rsp), %rax
    00003590: 	leaq	0x1(%rax), %rsi
    00003594: 	callq	_ZdlPvm@PLT # Offset: 13716
.Ltmp1322:
    00003599: 	movq	0x110(%rsp), %rdi
    000035a1: 	leaq	0x120(%rsp), %rax
    000035a9: 	cmpq	%rax, %rdi
    000035ac: 	je	.Ltmp1323 # Offset: 13740
    000035ae: 	movq	0x120(%rsp), %rax
    000035b6: 	leaq	0x1(%rax), %rsi
    000035ba: 	callq	_ZdlPvm@PLT # Offset: 13754
.Ltmp1323:
    000035bf: 	movq	0xf0(%rsp), %rdi
    000035c7: 	cmpq	0x18(%rsp), %rdi
    000035cc: 	je	.Ltmp1324 # Offset: 13772
    000035ce: 	movq	0x100(%rsp), %rax
    000035d6: 	leaq	0x1(%rax), %rsi
    000035da: 	callq	_ZdlPvm@PLT # Offset: 13786
.Ltmp1324:
    000035df: 	movq	0xd0(%rsp), %rdi
    000035e7: 	leaq	0xe0(%rsp), %rax
    000035ef: 	cmpq	%rax, %rdi
    000035f2: 	je	.Ltmp1325 # Offset: 13810
    000035f4: 	movq	0xe0(%rsp), %rax
    000035fc: 	leaq	0x1(%rax), %rsi
    00003600: 	callq	_ZdlPvm@PLT # Offset: 13824
.Ltmp1325:
    00003605: 	movq	0xb0(%rsp), %rdi
    0000360d: 	cmpq	0x68(%rsp), %rdi
    00003612: 	je	.Ltmp1326 # Offset: 13842
    00003614: 	movq	0xc0(%rsp), %rax
    0000361c: 	leaq	0x1(%rax), %rsi
    00003620: 	callq	_ZdlPvm@PLT # Offset: 13856
.Ltmp1326:
    00003625: 	movq	0x90(%rsp), %rdi
    0000362d: 	cmpq	0x60(%rsp), %rdi
    00003632: 	je	.Ltmp1327 # Offset: 13874
    00003634: 	movq	0xa0(%rsp), %rax
    0000363c: 	leaq	0x1(%rax), %rsi
    00003640: 	callq	_ZdlPvm@PLT # Offset: 13888
.Ltmp1327:
    00003645: 	movq	0x8(%rsp), %rdi
    0000364a: 	movl	$0xfa0, %esi
    0000364f: 	callq	_ZdlPvm@PLT # Offset: 13903
    00003654: 	movq	0x1178(%rsp), %rax
    0000365c: 	subq	%fs:0x28, %rax
    00003665: 	jne	.Ltmp1328 # Offset: 13925
    0000366b: 	addq	$0x1188, %rsp
    00003672: 	popq	%rbx
    00003673: 	popq	%rbp
    00003674: 	popq	%r12
    00003676: 	popq	%r13
    00003678: 	popq	%r14
    0000367a: 	popq	%r15
    0000367c: 	retq # Offset: 13948
    0000367d: 	nopl	(%rax) # Size: 3
.Ltmp1329:
    00003680: 	addq	$0x20, %rbp
.Ltmp1027:
    00003684: 	cmpq	%rbp, 0x10(%rsp)
    00003689: 	je	.Ltmp1032 # Offset: 13961
.Ltmp1330:
    0000368f: 	movq	(%rbp), %rdi
    00003693: 	leaq	0x10(%rbp), %rax
    00003697: 	cmpq	%rax, %rdi
    0000369a: 	je	.Ltmp1329 # Offset: 13978
    0000369c: 	movq	0x10(%rbp), %rax
    000036a0: 	addq	$0x20, %rbp
    000036a4: 	leaq	0x1(%rax), %rsi
    000036a8: 	callq	_ZdlPvm@PLT # Offset: 13992
    000036ad: 	cmpq	%rbp, 0x10(%rsp)
    000036b2: 	jne	.Ltmp1330 # Offset: 14002
    000036b4: 	jmp	.Ltmp1032 # Offset: 14004
    000036b9: 	nopl	(%rax) # Size: 7
.Ltmp1024:
    000036c0: 	addq	$0x20, %rbp
    000036c4: 	cmpq	%rbx, %rbp
    000036c7: 	jne	.Ltmp1025 # Offset: 14023
    000036cd: 	addq	$0x8, %r13
    000036d1: 	cmpq	%r13, %r15
    000036d4: 	ja	.Ltmp1026 # Offset: 14036
    000036da: 	jmp	.Ltmp1331 # Offset: 14042
.Ltmp1041:
    000036df: 	testq	%r14, %r14
    000036e2: 	jne	.Ltmp1332 # Offset: 14050
    000036e8: 	movq	%rbx, %rax
    000036eb: 	jmp	.Ltmp1333 # Offset: 14059
.Ltmp1055:
    000036f0: 	testq	%r14, %r14
    000036f3: 	jne	.Ltmp1334 # Offset: 14067
    000036f9: 	movq	%rbx, %rax
    000036fc: 	jmp	.Ltmp1335 # Offset: 14076
.Ltmp1049:
    00003701: 	testq	%r14, %r14
    00003704: 	jne	.Ltmp1336 # Offset: 14084
    0000370a: 	movq	%rbx, %rax
    0000370d: 	jmp	.Ltmp1337 # Offset: 14093
.Ltmp1080:
    00003712: 	testq	%r14, %r14
    00003715: 	jne	.Ltmp1338 # Offset: 14101
    0000371b: 	movq	%rbx, %rax
    0000371e: 	jmp	.Ltmp1339 # Offset: 14110
.Ltmp1074:
    00003723: 	testq	%r14, %r14
    00003726: 	jne	.Ltmp1340 # Offset: 14118
    0000372c: 	movq	%rbx, %rax
    0000372f: 	jmp	.Ltmp1341 # Offset: 14127
.Ltmp1068:
    00003734: 	testq	%r14, %r14
    00003737: 	jne	.Ltmp1342 # Offset: 14135
    0000373d: 	movq	%rbx, %rax
    00003740: 	jmp	.Ltmp1343 # Offset: 14144
.Ltmp1061:
    00003745: 	testq	%r14, %r14
    00003748: 	jne	.Ltmp1344 # Offset: 14152
    0000374e: 	movq	%rbx, %rax
    00003751: 	jmp	.Ltmp1345 # Offset: 14161
.Ltmp1169:
    00003756: 	testq	%r14, %r14
    00003759: 	jne	.Ltmp1346 # Offset: 14169
    0000375f: 	movq	0x18(%rsp), %rax
    00003764: 	jmp	.Ltmp1347 # Offset: 14180
.Ltmp1133:
    00003769: 	testq	%r15, %r15
    0000376c: 	jne	.Ltmp1348 # Offset: 14188
    00003772: 	movq	%rbx, %rax
    00003775: 	jmp	.Ltmp1349 # Offset: 14197
.Ltmp1120:
    0000377a: 	testq	%r14, %r14
    0000377d: 	jne	.Ltmp1350 # Offset: 14205
    00003783: 	movq	%rbx, %rax
    00003786: 	jmp	.Ltmp1351 # Offset: 14214
.Ltmp1113:
    0000378b: 	testq	%r14, %r14
    0000378e: 	jne	.Ltmp1352 # Offset: 14222
    00003794: 	movq	%rbx, %rax
    00003797: 	jmp	.Ltmp1353 # Offset: 14231
.Ltmp1106:
    0000379c: 	testq	%r14, %r14
    0000379f: 	jne	.Ltmp1354 # Offset: 14239
    000037a5: 	movq	%rbx, %rax
    000037a8: 	jmp	.Ltmp1355 # Offset: 14248
.Ltmp1100:
    000037ad: 	testq	%r14, %r14
    000037b0: 	jne	.Ltmp1356 # Offset: 14256
    000037b6: 	movq	%rbx, %rax
    000037b9: 	jmp	.Ltmp1357 # Offset: 14265
.Ltmp1093:
    000037be: 	testq	%r14, %r14
    000037c1: 	jne	.Ltmp1358 # Offset: 14273
    000037c7: 	movq	%rbx, %rax
    000037ca: 	jmp	.Ltmp1359 # Offset: 14282
.Ltmp1087:
    000037cf: 	testq	%r14, %r14
    000037d2: 	jne	.Ltmp1360 # Offset: 14290
    000037d8: 	movq	%rbx, %rax
    000037db: 	jmp	.Ltmp1361 # Offset: 14299
.Ltmp1176:
    000037e0: 	testq	%r14, %r14
    000037e3: 	jne	.Ltmp1362 # Offset: 14307
    000037e9: 	movq	%rbx, %rax
    000037ec: 	jmp	.Ltmp1363 # Offset: 14316
.Ltmp1099:
    000037f1: 	leaq	0x70(%rsp), %rsi
    000037f6: 	xorl	%edx, %edx
    000037f8: 	movq	%rbp, %rdi
    000037fb: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 14331
    00003800: 	movq	%rax, 0x1b0(%rsp)
    00003808: 	movq	%rax, %rdi
    0000380b: 	movq	0x70(%rsp), %rax
    00003810: 	movq	%rax, 0x1c0(%rsp)
.Ltmp1408:
    00003818: 	movq	%r14, %rdx
    0000381b: 	movq	%r15, %rsi
    0000381e: 	callq	memcpy@PLT # Offset: 14366
    00003823: 	movq	0x70(%rsp), %r14
    00003828: 	movq	0x1b0(%rsp), %rax
    00003830: 	jmp	.Ltmp1357 # Offset: 14384
.Ltmp1092:
    00003835: 	leaq	0x70(%rsp), %rsi
    0000383a: 	xorl	%edx, %edx
    0000383c: 	movq	%rbp, %rdi
    0000383f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 14399
    00003844: 	movq	%rax, 0x1b0(%rsp)
    0000384c: 	movq	%rax, %rdi
    0000384f: 	movq	0x70(%rsp), %rax
    00003854: 	movq	%rax, 0x1c0(%rsp)
.Ltmp1409:
    0000385c: 	movq	%r14, %rdx
    0000385f: 	movq	%r15, %rsi
    00003862: 	callq	memcpy@PLT # Offset: 14434
    00003867: 	movq	0x70(%rsp), %r14
    0000386c: 	movq	0x1b0(%rsp), %rax
    00003874: 	jmp	.Ltmp1359 # Offset: 14452
.Ltmp1073:
    00003879: 	leaq	0x70(%rsp), %rsi
    0000387e: 	xorl	%edx, %edx
    00003880: 	movq	%rbp, %rdi
    00003883: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 14467
    00003888: 	movq	%rax, 0x1b0(%rsp)
    00003890: 	movq	%rax, %rdi
    00003893: 	movq	0x70(%rsp), %rax
    00003898: 	movq	%rax, 0x1c0(%rsp)
.Ltmp1400:
    000038a0: 	movq	%r14, %rdx
    000038a3: 	movq	%r15, %rsi
    000038a6: 	callq	memcpy@PLT # Offset: 14502
    000038ab: 	movq	0x70(%rsp), %r14
    000038b0: 	movq	0x1b0(%rsp), %rax
    000038b8: 	jmp	.Ltmp1341 # Offset: 14520
.Ltmp1067:
    000038bd: 	leaq	0x70(%rsp), %rsi
    000038c2: 	xorl	%edx, %edx
    000038c4: 	movq	%rbp, %rdi
    000038c7: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 14535
    000038cc: 	movq	%rax, 0x1b0(%rsp)
    000038d4: 	movq	%rax, %rdi
    000038d7: 	movq	0x70(%rsp), %rax
    000038dc: 	movq	%rax, 0x1c0(%rsp)
.Ltmp1401:
    000038e4: 	movq	%r14, %rdx
    000038e7: 	movq	%r15, %rsi
    000038ea: 	callq	memcpy@PLT # Offset: 14570
    000038ef: 	movq	0x70(%rsp), %r14
    000038f4: 	movq	0x1b0(%rsp), %rax
    000038fc: 	jmp	.Ltmp1343 # Offset: 14588
.Ltmp1060:
    00003901: 	leaq	0x70(%rsp), %rsi
    00003906: 	xorl	%edx, %edx
    00003908: 	movq	%rbp, %rdi
    0000390b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 14603
    00003910: 	movq	%rax, 0x1b0(%rsp)
    00003918: 	movq	%rax, %rdi
    0000391b: 	movq	0x70(%rsp), %rax
    00003920: 	movq	%rax, 0x1c0(%rsp)
.Ltmp1402:
    00003928: 	movq	%r14, %rdx
    0000392b: 	movq	%r15, %rsi
    0000392e: 	callq	memcpy@PLT # Offset: 14638
    00003933: 	movq	0x70(%rsp), %r14
    00003938: 	movq	0x1b0(%rsp), %rax
    00003940: 	jmp	.Ltmp1345 # Offset: 14656
.Ltmp1168:
    00003945: 	leaq	0x70(%rsp), %rsi
    0000394a: 	leaq	0xf0(%rsp), %rdi
    00003952: 	xorl	%edx, %edx
    00003954: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 14676
    00003959: 	movq	%rax, 0xf0(%rsp)
    00003961: 	movq	%rax, %rdi
    00003964: 	movq	0x70(%rsp), %rax
    00003969: 	movq	%rax, 0x100(%rsp)
.Ltmp1403:
    00003971: 	movq	%r14, %rdx
    00003974: 	movq	%r15, %rsi
    00003977: 	callq	memcpy@PLT # Offset: 14711
    0000397c: 	movq	0x70(%rsp), %r14
    00003981: 	movq	0xf0(%rsp), %rax
    00003989: 	jmp	.Ltmp1347 # Offset: 14729
.Ltmp1132:
    0000398e: 	leaq	0x70(%rsp), %rsi
    00003993: 	xorl	%edx, %edx
    00003995: 	movq	%rbp, %rdi
    00003998: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 14744
    0000399d: 	movq	%rax, 0x1b0(%rsp)
    000039a5: 	movq	%rax, %rdi
    000039a8: 	movq	0x70(%rsp), %rax
    000039ad: 	movq	%rax, 0x1c0(%rsp)
.Ltmp1404:
    000039b5: 	movq	0x10(%rsp), %rsi
    000039ba: 	movq	%r15, %rdx
    000039bd: 	callq	memcpy@PLT # Offset: 14781
    000039c2: 	movq	0x70(%rsp), %r15
    000039c7: 	movq	0x1b0(%rsp), %rax
    000039cf: 	jmp	.Ltmp1349 # Offset: 14799
.Ltmp1119:
    000039d4: 	leaq	0x70(%rsp), %rsi
    000039d9: 	xorl	%edx, %edx
    000039db: 	movq	%rbp, %rdi
    000039de: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 14814
    000039e3: 	movq	%rax, 0x1b0(%rsp)
    000039eb: 	movq	%rax, %rdi
    000039ee: 	movq	0x70(%rsp), %rax
    000039f3: 	movq	%rax, 0x1c0(%rsp)
.Ltmp1405:
    000039fb: 	movq	%r14, %rdx
    000039fe: 	movq	%r15, %rsi
    00003a01: 	callq	memcpy@PLT # Offset: 14849
    00003a06: 	movq	0x70(%rsp), %r14
    00003a0b: 	movq	0x1b0(%rsp), %rax
    00003a13: 	jmp	.Ltmp1351 # Offset: 14867
.Ltmp1112:
    00003a18: 	leaq	0x70(%rsp), %rsi
    00003a1d: 	xorl	%edx, %edx
    00003a1f: 	movq	%rbp, %rdi
    00003a22: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 14882
    00003a27: 	movq	%rax, 0x1b0(%rsp)
    00003a2f: 	movq	%rax, %rdi
    00003a32: 	movq	0x70(%rsp), %rax
    00003a37: 	movq	%rax, 0x1c0(%rsp)
.Ltmp1406:
    00003a3f: 	movq	%r14, %rdx
    00003a42: 	movq	%r15, %rsi
    00003a45: 	callq	memcpy@PLT # Offset: 14917
    00003a4a: 	movq	0x70(%rsp), %r14
    00003a4f: 	movq	0x1b0(%rsp), %rax
    00003a57: 	jmp	.Ltmp1353 # Offset: 14935
.Ltmp1105:
    00003a5c: 	leaq	0x70(%rsp), %rsi
    00003a61: 	xorl	%edx, %edx
    00003a63: 	movq	%rbp, %rdi
    00003a66: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 14950
    00003a6b: 	movq	%rax, 0x1b0(%rsp)
    00003a73: 	movq	%rax, %rdi
    00003a76: 	movq	0x70(%rsp), %rax
    00003a7b: 	movq	%rax, 0x1c0(%rsp)
.Ltmp1407:
    00003a83: 	movq	%r14, %rdx
    00003a86: 	movq	%r15, %rsi
    00003a89: 	callq	memcpy@PLT # Offset: 14985
    00003a8e: 	movq	0x70(%rsp), %r14
    00003a93: 	movq	0x1b0(%rsp), %rax
    00003a9b: 	jmp	.Ltmp1355 # Offset: 15003
.Ltmp1040:
    00003aa0: 	leaq	0x70(%rsp), %rsi
    00003aa5: 	xorl	%edx, %edx
    00003aa7: 	movq	%rbp, %rdi
    00003aaa: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 15018
    00003aaf: 	movq	%rax, 0x1b0(%rsp)
    00003ab7: 	movq	%rax, %rdi
    00003aba: 	movq	0x70(%rsp), %rax
    00003abf: 	movq	%rax, 0x1c0(%rsp)
.Ltmp1396:
    00003ac7: 	movq	%r14, %rdx
    00003aca: 	movq	%r15, %rsi
    00003acd: 	callq	memcpy@PLT # Offset: 15053
    00003ad2: 	movq	0x70(%rsp), %r14
    00003ad7: 	movq	0x1b0(%rsp), %rax
    00003adf: 	jmp	.Ltmp1333 # Offset: 15071
.Ltmp1054:
    00003ae4: 	leaq	0x70(%rsp), %rsi
    00003ae9: 	xorl	%edx, %edx
    00003aeb: 	movq	%rbp, %rdi
    00003aee: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 15086
    00003af3: 	movq	%rax, 0x1b0(%rsp)
    00003afb: 	movq	%rax, %rdi
    00003afe: 	movq	0x70(%rsp), %rax
    00003b03: 	movq	%rax, 0x1c0(%rsp)
.Ltmp1397:
    00003b0b: 	movq	%r14, %rdx
    00003b0e: 	movq	%r15, %rsi
    00003b11: 	callq	memcpy@PLT # Offset: 15121
    00003b16: 	movq	0x70(%rsp), %r14
    00003b1b: 	movq	0x1b0(%rsp), %rax
    00003b23: 	jmp	.Ltmp1335 # Offset: 15139
.Ltmp1048:
    00003b28: 	leaq	0x70(%rsp), %rsi
    00003b2d: 	xorl	%edx, %edx
    00003b2f: 	movq	%rbp, %rdi
    00003b32: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 15154
    00003b37: 	movq	%rax, 0x1b0(%rsp)
    00003b3f: 	movq	%rax, %rdi
    00003b42: 	movq	0x70(%rsp), %rax
    00003b47: 	movq	%rax, 0x1c0(%rsp)
.Ltmp1398:
    00003b4f: 	movq	%r14, %rdx
    00003b52: 	movq	%r15, %rsi
    00003b55: 	callq	memcpy@PLT # Offset: 15189
    00003b5a: 	movq	0x70(%rsp), %r14
    00003b5f: 	movq	0x1b0(%rsp), %rax
    00003b67: 	jmp	.Ltmp1337 # Offset: 15207
.Ltmp1079:
    00003b6c: 	leaq	0x70(%rsp), %rsi
    00003b71: 	xorl	%edx, %edx
    00003b73: 	movq	%rbp, %rdi
    00003b76: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 15222
    00003b7b: 	movq	%rax, 0x1b0(%rsp)
    00003b83: 	movq	%rax, %rdi
    00003b86: 	movq	0x70(%rsp), %rax
    00003b8b: 	movq	%rax, 0x1c0(%rsp)
.Ltmp1399:
    00003b93: 	movq	%r14, %rdx
    00003b96: 	movq	%r15, %rsi
    00003b99: 	callq	memcpy@PLT # Offset: 15257
    00003b9e: 	movq	0x70(%rsp), %r14
    00003ba3: 	movq	0x1b0(%rsp), %rax
    00003bab: 	jmp	.Ltmp1339 # Offset: 15275
.Ltmp1086:
    00003bb0: 	leaq	0x70(%rsp), %rsi
    00003bb5: 	xorl	%edx, %edx
    00003bb7: 	movq	%rbp, %rdi
    00003bba: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 15290
    00003bbf: 	movq	%rax, 0x1b0(%rsp)
    00003bc7: 	movq	%rax, %rdi
    00003bca: 	movq	0x70(%rsp), %rax
    00003bcf: 	movq	%rax, 0x1c0(%rsp)
.Ltmp1410:
    00003bd7: 	movq	%r14, %rdx
    00003bda: 	movq	%r15, %rsi
    00003bdd: 	callq	memcpy@PLT # Offset: 15325
    00003be2: 	movq	0x70(%rsp), %r14
    00003be7: 	movq	0x1b0(%rsp), %rax
    00003bef: 	jmp	.Ltmp1361 # Offset: 15343
.Ltmp1175:
    00003bf4: 	leaq	0x70(%rsp), %rsi
    00003bf9: 	xorl	%edx, %edx
    00003bfb: 	movq	%rbp, %rdi
    00003bfe: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 15358
    00003c03: 	movq	%rax, 0x1b0(%rsp)
    00003c0b: 	movq	%rax, %rdi
    00003c0e: 	movq	0x70(%rsp), %rax
    00003c13: 	movq	%rax, 0x1c0(%rsp)
.Ltmp1411:
    00003c1b: 	movq	%r14, %rdx
    00003c1e: 	movq	%r15, %rsi
    00003c21: 	callq	memcpy@PLT # Offset: 15393
    00003c26: 	movq	0x70(%rsp), %r14
    00003c2b: 	movq	0x1b0(%rsp), %rax
    00003c33: 	jmp	.Ltmp1363 # Offset: 15411
.Ltmp1201:
    00003c38: 	testq	%r14, %r14
    00003c3b: 	jne	.Ltmp1364 # Offset: 15419
    00003c41: 	movq	%rbx, %rax
    00003c44: 	jmp	.Ltmp1365 # Offset: 15428
.Ltmp1215:
    00003c49: 	testq	%r14, %r14
    00003c4c: 	jne	.Ltmp1366 # Offset: 15436
    00003c52: 	movq	%rbx, %rax
    00003c55: 	jmp	.Ltmp1367 # Offset: 15445
.Ltmp1207:
    00003c5a: 	testq	%r14, %r14
    00003c5d: 	jne	.Ltmp1368 # Offset: 15453
    00003c63: 	movq	%rbx, %rax
    00003c66: 	jmp	.Ltmp1369 # Offset: 15462
.Ltmp1244:
    00003c6b: 	testq	%r14, %r14
    00003c6e: 	jne	.Ltmp1370 # Offset: 15470
    00003c74: 	movq	%rbx, %rax
    00003c77: 	jmp	.Ltmp1371 # Offset: 15479
.Ltmp1235:
    00003c7c: 	testq	%r14, %r14
    00003c7f: 	jne	.Ltmp1372 # Offset: 15487
    00003c85: 	movq	%rbx, %rax
    00003c88: 	jmp	.Ltmp1373 # Offset: 15496
.Ltmp1229:
    00003c8d: 	testq	%r14, %r14
    00003c90: 	jne	.Ltmp1374 # Offset: 15504
    00003c96: 	movq	0x28(%rsp), %rax
    00003c9b: 	jmp	.Ltmp1375 # Offset: 15515
.Ltmp1222:
    00003ca0: 	testq	%r14, %r14
    00003ca3: 	jne	.Ltmp1376 # Offset: 15523
    00003ca9: 	movq	%rbx, %rax
    00003cac: 	jmp	.Ltmp1377 # Offset: 15532
.Ltmp1289:
    00003cb1: 	testq	%r12, %r12
    00003cb4: 	jne	.Ltmp1378 # Offset: 15540
    00003cba: 	movq	%rbx, %rax
    00003cbd: 	jmp	.Ltmp1379 # Offset: 15549
.Ltmp1284:
    00003cc2: 	testq	%r12, %r12
    00003cc5: 	jne	.Ltmp1380 # Offset: 15557
    00003ccb: 	movq	0x10(%rsp), %rax
    00003cd0: 	jmp	.Ltmp1381 # Offset: 15568
.Ltmp1278:
    00003cd5: 	testq	%r14, %r14
    00003cd8: 	jne	.Ltmp1382 # Offset: 15576
    00003cde: 	movq	%rbx, %rax
    00003ce1: 	jmp	.Ltmp1383 # Offset: 15585
.Ltmp1271:
    00003ce6: 	testq	%r14, %r14
    00003ce9: 	jne	.Ltmp1384 # Offset: 15593
    00003cef: 	movq	%rbx, %rax
    00003cf2: 	jmp	.Ltmp1385 # Offset: 15602
.Ltmp1264:
    00003cf7: 	testq	%r14, %r14
    00003cfa: 	jne	.Ltmp1386 # Offset: 15610
    00003d00: 	movq	%rbx, %rax
    00003d03: 	jmp	.Ltmp1387 # Offset: 15619
.Ltmp1251:
    00003d08: 	testq	%r14, %r14
    00003d0b: 	jne	.Ltmp1388 # Offset: 15627
    00003d11: 	movq	%rbx, %rax
    00003d14: 	jmp	.Ltmp1389 # Offset: 15636
.Ltmp1250:
    00003d19: 	leaq	0x70(%rsp), %rsi
    00003d1e: 	xorl	%edx, %edx
    00003d20: 	movq	%rbp, %rdi
    00003d23: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 15651
    00003d28: 	movq	%rax, 0x1b0(%rsp)
    00003d30: 	movq	%rax, %rdi
    00003d33: 	movq	0x70(%rsp), %rax
    00003d38: 	movq	%rax, 0x1c0(%rsp)
.Ltmp1424:
    00003d40: 	movq	%r14, %rdx
    00003d43: 	movq	%r15, %rsi
    00003d46: 	callq	memcpy@PLT # Offset: 15686
    00003d4b: 	movq	0x70(%rsp), %r14
    00003d50: 	movq	0x1b0(%rsp), %rax
    00003d58: 	jmp	.Ltmp1389 # Offset: 15704
.Ltmp1283:
    00003d5d: 	leaq	0x70(%rsp), %rsi
    00003d62: 	leaq	0x190(%rsp), %rdi
    00003d6a: 	xorl	%edx, %edx
    00003d6c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 15724
    00003d71: 	movq	%rax, 0x190(%rsp)
    00003d79: 	movq	%rax, %rdi
    00003d7c: 	movq	0x70(%rsp), %rax
    00003d81: 	movq	%rax, 0x1a0(%rsp)
.Ltmp1420:
    00003d89: 	movq	%r12, %rdx
    00003d8c: 	movq	%r14, %rsi
    00003d8f: 	callq	memcpy@PLT # Offset: 15759
    00003d94: 	movq	0x70(%rsp), %r12
    00003d99: 	movq	0x190(%rsp), %rax
    00003da1: 	jmp	.Ltmp1381 # Offset: 15777
.Ltmp1277:
    00003da6: 	leaq	0x70(%rsp), %rsi
    00003dab: 	xorl	%edx, %edx
    00003dad: 	movq	%rbp, %rdi
    00003db0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 15792
    00003db5: 	movq	%rax, 0x1b0(%rsp)
    00003dbd: 	movq	%rax, %rdi
    00003dc0: 	movq	0x70(%rsp), %rax
    00003dc5: 	movq	%rax, 0x1c0(%rsp)
.Ltmp1421:
    00003dcd: 	movq	%r14, %rdx
    00003dd0: 	movq	%r15, %rsi
    00003dd3: 	callq	memcpy@PLT # Offset: 15827
    00003dd8: 	movq	0x70(%rsp), %r14
    00003ddd: 	movq	0x1b0(%rsp), %rax
    00003de5: 	jmp	.Ltmp1383 # Offset: 15845
.Ltmp1270:
    00003dea: 	leaq	0x70(%rsp), %rsi
    00003def: 	xorl	%edx, %edx
    00003df1: 	movq	%rbp, %rdi
    00003df4: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 15860
    00003df9: 	movq	%rax, 0x1b0(%rsp)
    00003e01: 	movq	%rax, %rdi
    00003e04: 	movq	0x70(%rsp), %rax
    00003e09: 	movq	%rax, 0x1c0(%rsp)
.Ltmp1422:
    00003e11: 	movq	%r14, %rdx
    00003e14: 	movq	%r15, %rsi
    00003e17: 	callq	memcpy@PLT # Offset: 15895
    00003e1c: 	movq	0x70(%rsp), %r14
    00003e21: 	movq	0x1b0(%rsp), %rax
    00003e29: 	jmp	.Ltmp1385 # Offset: 15913
.Ltmp1263:
    00003e2e: 	leaq	0x70(%rsp), %rsi
    00003e33: 	xorl	%edx, %edx
    00003e35: 	movq	%rbp, %rdi
    00003e38: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 15928
    00003e3d: 	movq	%rax, 0x1b0(%rsp)
    00003e45: 	movq	%rax, %rdi
    00003e48: 	movq	0x70(%rsp), %rax
    00003e4d: 	movq	%rax, 0x1c0(%rsp)
.Ltmp1423:
    00003e55: 	movq	%r14, %rdx
    00003e58: 	movq	%r15, %rsi
    00003e5b: 	callq	memcpy@PLT # Offset: 15963
    00003e60: 	movq	0x70(%rsp), %r14
    00003e65: 	movq	0x1b0(%rsp), %rax
    00003e6d: 	jmp	.Ltmp1387 # Offset: 15981
.Ltmp1200:
    00003e72: 	leaq	0x70(%rsp), %rsi
    00003e77: 	xorl	%edx, %edx
    00003e79: 	movq	%rbp, %rdi
    00003e7c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 15996
    00003e81: 	movq	%rax, 0x1b0(%rsp)
    00003e89: 	movq	%rax, %rdi
    00003e8c: 	movq	0x70(%rsp), %rax
    00003e91: 	movq	%rax, 0x1c0(%rsp)
.Ltmp1412:
    00003e99: 	movq	%r14, %rdx
    00003e9c: 	movq	%r15, %rsi
    00003e9f: 	callq	memcpy@PLT # Offset: 16031
    00003ea4: 	movq	0x70(%rsp), %r14
    00003ea9: 	movq	0x1b0(%rsp), %rax
    00003eb1: 	jmp	.Ltmp1365 # Offset: 16049
.Ltmp1214:
    00003eb6: 	leaq	0x70(%rsp), %rsi
    00003ebb: 	xorl	%edx, %edx
    00003ebd: 	movq	%rbp, %rdi
    00003ec0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 16064
    00003ec5: 	movq	%rax, 0x1b0(%rsp)
    00003ecd: 	movq	%rax, %rdi
    00003ed0: 	movq	0x70(%rsp), %rax
    00003ed5: 	movq	%rax, 0x1c0(%rsp)
.Ltmp1413:
    00003edd: 	movq	%r14, %rdx
    00003ee0: 	movq	%r15, %rsi
    00003ee3: 	callq	memcpy@PLT # Offset: 16099
    00003ee8: 	movq	0x70(%rsp), %r14
    00003eed: 	movq	0x1b0(%rsp), %rax
    00003ef5: 	jmp	.Ltmp1367 # Offset: 16117
.Ltmp1206:
    00003efa: 	leaq	0x70(%rsp), %rsi
    00003eff: 	xorl	%edx, %edx
    00003f01: 	movq	%rbp, %rdi
    00003f04: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 16132
    00003f09: 	movq	%rax, 0x1b0(%rsp)
    00003f11: 	movq	%rax, %rdi
    00003f14: 	movq	0x70(%rsp), %rax
    00003f19: 	movq	%rax, 0x1c0(%rsp)
.Ltmp1414:
    00003f21: 	movq	%r14, %rdx
    00003f24: 	movq	%r15, %rsi
    00003f27: 	callq	memcpy@PLT # Offset: 16167
    00003f2c: 	movq	0x70(%rsp), %r14
    00003f31: 	movq	0x1b0(%rsp), %rax
    00003f39: 	jmp	.Ltmp1369 # Offset: 16185
.Ltmp1243:
    00003f3e: 	leaq	0x70(%rsp), %rsi
    00003f43: 	xorl	%edx, %edx
    00003f45: 	movq	%rbp, %rdi
    00003f48: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 16200
    00003f4d: 	movq	%rax, 0x1b0(%rsp)
    00003f55: 	movq	%rax, %rdi
    00003f58: 	movq	0x70(%rsp), %rax
    00003f5d: 	movq	%rax, 0x1c0(%rsp)
.Ltmp1415:
    00003f65: 	movq	%r14, %rdx
    00003f68: 	movq	%r15, %rsi
    00003f6b: 	callq	memcpy@PLT # Offset: 16235
    00003f70: 	movq	0x70(%rsp), %r14
    00003f75: 	movq	0x1b0(%rsp), %rax
    00003f7d: 	jmp	.Ltmp1371 # Offset: 16253
.Ltmp1234:
    00003f82: 	leaq	0x70(%rsp), %rsi
    00003f87: 	xorl	%edx, %edx
    00003f89: 	movq	%rbp, %rdi
    00003f8c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 16268
    00003f91: 	movq	%rax, 0x1b0(%rsp)
    00003f99: 	movq	%rax, %rdi
    00003f9c: 	movq	0x70(%rsp), %rax
    00003fa1: 	movq	%rax, 0x1c0(%rsp)
.Ltmp1416:
    00003fa9: 	movq	%r14, %rdx
    00003fac: 	movq	%r15, %rsi
    00003faf: 	callq	memcpy@PLT # Offset: 16303
    00003fb4: 	movq	0x70(%rsp), %r14
    00003fb9: 	movq	0x1b0(%rsp), %rax
    00003fc1: 	jmp	.Ltmp1373 # Offset: 16321
.Ltmp1228:
    00003fc6: 	leaq	0x70(%rsp), %rsi
    00003fcb: 	leaq	0x150(%rsp), %rdi
    00003fd3: 	xorl	%edx, %edx
    00003fd5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 16341
    00003fda: 	movq	%rax, 0x150(%rsp)
    00003fe2: 	movq	%rax, %rdi
    00003fe5: 	movq	0x70(%rsp), %rax
    00003fea: 	movq	%rax, 0x160(%rsp)
.Ltmp1417:
    00003ff2: 	movq	%r14, %rdx
    00003ff5: 	movq	%r15, %rsi
    00003ff8: 	callq	memcpy@PLT # Offset: 16376
    00003ffd: 	movq	0x70(%rsp), %r14
    00004002: 	movq	0x150(%rsp), %rax
    0000400a: 	jmp	.Ltmp1375 # Offset: 16394
.Ltmp1221:
    0000400f: 	leaq	0x70(%rsp), %rsi
    00004014: 	xorl	%edx, %edx
    00004016: 	movq	%rbp, %rdi
    00004019: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 16409
    0000401e: 	movq	%rax, 0x1b0(%rsp)
    00004026: 	movq	%rax, %rdi
    00004029: 	movq	0x70(%rsp), %rax
    0000402e: 	movq	%rax, 0x1c0(%rsp)
.Ltmp1418:
    00004036: 	movq	%r14, %rdx
    00004039: 	movq	%r15, %rsi
    0000403c: 	callq	memcpy@PLT # Offset: 16444
    00004041: 	movq	0x70(%rsp), %r14
    00004046: 	movq	0x1b0(%rsp), %rax
    0000404e: 	jmp	.Ltmp1377 # Offset: 16462
.Ltmp1288:
    00004053: 	leaq	0x70(%rsp), %rsi
    00004058: 	xorl	%edx, %edx
    0000405a: 	movq	%rbp, %rdi
    0000405d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 16477
    00004062: 	movq	%rax, 0x1b0(%rsp)
    0000406a: 	movq	%rax, %rdi
    0000406d: 	movq	0x70(%rsp), %rax
    00004072: 	movq	%rax, 0x1c0(%rsp)
.Ltmp1419:
    0000407a: 	movq	%r12, %rdx
    0000407d: 	movq	%r14, %rsi
    00004080: 	callq	memcpy@PLT # Offset: 16512
    00004085: 	movq	0x70(%rsp), %r12
    0000408a: 	movq	0x1b0(%rsp), %rax
    00004092: 	jmp	.Ltmp1379 # Offset: 16530
.Ltmp1298:
    00004097: 	testq	%r14, %r14
    0000409a: 	jne	.Ltmp1390 # Offset: 16538
    000040a0: 	movq	%rbx, %rax
    000040a3: 	jmp	.Ltmp1391 # Offset: 16547
.Ltmp1297:
    000040a8: 	xorl	%edx, %edx
    000040aa: 	movq	%r12, %rsi
    000040ad: 	movq	%rbp, %rdi
    000040b0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 16560
    000040b5: 	movq	%rax, 0x1b0(%rsp)
    000040bd: 	movq	%rax, %rdi
    000040c0: 	movq	0x70(%rsp), %rax
    000040c5: 	movq	%rax, 0x1c0(%rsp)
.Ltmp1425:
    000040cd: 	movq	%r14, %rdx
    000040d0: 	movq	%r15, %rsi
    000040d3: 	callq	memcpy@PLT # Offset: 16595
    000040d8: 	movq	0x70(%rsp), %r14
    000040dd: 	movq	0x1b0(%rsp), %rax
    000040e5: 	jmp	.Ltmp1391 # Offset: 16613
.Ltmp1307:
    000040ea: 	testq	%r14, %r14
    000040ed: 	jne	.Ltmp1392 # Offset: 16621
    000040f3: 	movq	%rbx, %rax
    000040f6: 	jmp	.Ltmp1393 # Offset: 16630
.Ltmp1306:
    000040fb: 	xorl	%edx, %edx
    000040fd: 	movq	%r12, %rsi
    00004100: 	movq	%rbp, %rdi
    00004103: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 16643
    00004108: 	movq	%rax, 0x1b0(%rsp)
    00004110: 	movq	%rax, %rdi
    00004113: 	movq	0x70(%rsp), %rax
    00004118: 	movq	%rax, 0x1c0(%rsp)
.Ltmp1426:
    00004120: 	movq	%r14, %rdx
    00004123: 	movq	%r15, %rsi
    00004126: 	callq	memcpy@PLT # Offset: 16678
    0000412b: 	movq	0x70(%rsp), %r14
    00004130: 	movq	0x1b0(%rsp), %rax
    00004138: 	jmp	.Ltmp1393 # Offset: 16696
.Ltmp1314:
    0000413d: 	testq	%r14, %r14
    00004140: 	jne	.Ltmp1394 # Offset: 16704
    00004146: 	movq	%rbx, %rax
    00004149: 	jmp	.Ltmp1395 # Offset: 16713
.Ltmp1313:
    0000414e: 	xorl	%edx, %edx
    00004150: 	movq	%r12, %rsi
    00004153: 	movq	%rbp, %rdi
    00004156: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 16726
    0000415b: 	movq	%rax, 0x1b0(%rsp)
    00004163: 	movq	%rax, %rdi
    00004166: 	movq	0x70(%rsp), %rax
    0000416b: 	movq	%rax, 0x1c0(%rsp)
.Ltmp1427:
    00004173: 	movq	%r14, %rdx
    00004176: 	movq	%r15, %rsi
    00004179: 	callq	memcpy@PLT # Offset: 16761
    0000417e: 	movq	0x70(%rsp), %r14
    00004183: 	movq	0x1b0(%rsp), %rax
    0000418b: 	jmp	.Ltmp1395 # Offset: 16779
.Ltmp1039:
    00004190: 	leaq	DATAat0x11158(%rip), %rdi
    00004197: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16791
.Ltmp1042:
    0000419c: 	leaq	DATAat0x11182(%rip), %rdi
    000041a3: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 16803
.Ltmp1047:
    000041a8: 	leaq	DATAat0x11158(%rip), %rdi
    000041af: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16815
.Ltmp1050:
    000041b4: 	leaq	DATAat0x11182(%rip), %rdi
    000041bb: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 16827
.Ltmp1053:
    000041c0: 	leaq	DATAat0x11158(%rip), %rdi
    000041c7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16839
.Ltmp1056:
    000041cc: 	leaq	DATAat0x11182(%rip), %rdi
    000041d3: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 16851
.Ltmp1059:
    000041d8: 	leaq	DATAat0x11158(%rip), %rdi
    000041df: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16863
.Ltmp1062:
    000041e4: 	leaq	DATAat0x11182(%rip), %rdi
    000041eb: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 16875
.Ltmp1066:
    000041f0: 	leaq	DATAat0x11158(%rip), %rdi
    000041f7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16887
.Ltmp1069:
    000041fc: 	leaq	DATAat0x11182(%rip), %rdi
    00004203: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 16899
.Ltmp1072:
    00004208: 	leaq	DATAat0x11158(%rip), %rdi
    0000420f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16911
.Ltmp1075:
    00004214: 	leaq	DATAat0x11182(%rip), %rdi
    0000421b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 16923
.Ltmp1078:
    00004220: 	leaq	DATAat0x11158(%rip), %rdi
    00004227: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16935
.Ltmp1081:
    0000422c: 	leaq	DATAat0x11182(%rip), %rdi
    00004233: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 16947
.Ltmp1085:
    00004238: 	leaq	DATAat0x11158(%rip), %rdi
    0000423f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16959
.Ltmp1088:
    00004244: 	leaq	DATAat0x11182(%rip), %rdi
    0000424b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 16971
.Ltmp1091:
    00004250: 	leaq	DATAat0x11158(%rip), %rdi
    00004257: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 16983
.Ltmp1094:
    0000425c: 	leaq	DATAat0x11182(%rip), %rdi
    00004263: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 16995
.Ltmp1098:
    00004268: 	leaq	DATAat0x11158(%rip), %rdi
    0000426f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 17007
.Ltmp1101:
    00004274: 	leaq	DATAat0x11182(%rip), %rdi
    0000427b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 17019
.Ltmp1104:
    00004280: 	leaq	DATAat0x11158(%rip), %rdi
    00004287: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 17031
.Ltmp1107:
    0000428c: 	leaq	DATAat0x11182(%rip), %rdi
    00004293: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 17043
.Ltmp1111:
    00004298: 	leaq	DATAat0x11158(%rip), %rdi
    0000429f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 17055
.Ltmp1114:
    000042a4: 	leaq	DATAat0x11182(%rip), %rdi
    000042ab: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 17067
.Ltmp1118:
    000042b0: 	leaq	DATAat0x11158(%rip), %rdi
    000042b7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 17079
.Ltmp1121:
    000042bc: 	leaq	DATAat0x11182(%rip), %rdi
    000042c3: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 17091
.Ltmp1131:
    000042c8: 	leaq	DATAat0x11158(%rip), %rdi
    000042cf: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 17103
.Ltmp1134:
    000042d4: 	leaq	DATAat0x11182(%rip), %rdi
    000042db: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 17115
.Ltmp1167:
    000042e0: 	leaq	DATAat0x11158(%rip), %rdi
    000042e7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 17127
.Ltmp1170:
    000042ec: 	leaq	DATAat0x11182(%rip), %rdi
    000042f3: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 17139
.Ltmp1174:
    000042f8: 	leaq	DATAat0x11158(%rip), %rdi
    000042ff: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 17151
.Ltmp1177:
    00004304: 	leaq	DATAat0x11182(%rip), %rdi
    0000430b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 17163
.Ltmp1199:
    00004310: 	leaq	DATAat0x11158(%rip), %rdi
    00004317: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 17175
.Ltmp1202:
    0000431c: 	leaq	DATAat0x11182(%rip), %rdi
    00004323: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 17187
.Ltmp1205:
    00004328: 	leaq	DATAat0x11158(%rip), %rdi
    0000432f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 17199
.Ltmp1208:
    00004334: 	leaq	DATAat0x11182(%rip), %rdi
    0000433b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 17211
.Ltmp1213:
    00004340: 	leaq	DATAat0x11158(%rip), %rdi
    00004347: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 17223
.Ltmp1216:
    0000434c: 	leaq	DATAat0x11182(%rip), %rdi
    00004353: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 17235
.Ltmp1220:
    00004358: 	leaq	DATAat0x11158(%rip), %rdi
    0000435f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 17247
.Ltmp1223:
    00004364: 	leaq	DATAat0x11182(%rip), %rdi
    0000436b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 17259
.Ltmp1227:
    00004370: 	leaq	DATAat0x11158(%rip), %rdi
    00004377: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 17271
.Ltmp1230:
    0000437c: 	leaq	DATAat0x11182(%rip), %rdi
    00004383: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 17283
.Ltmp1233:
    00004388: 	leaq	DATAat0x11158(%rip), %rdi
    0000438f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 17295
.Ltmp1236:
    00004394: 	leaq	DATAat0x11182(%rip), %rdi
    0000439b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 17307
.Ltmp1242:
    000043a0: 	leaq	DATAat0x11158(%rip), %rdi
    000043a7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 17319
.Ltmp1245:
    000043ac: 	leaq	DATAat0x11182(%rip), %rdi
    000043b3: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 17331
.Ltmp1249:
    000043b8: 	leaq	DATAat0x11158(%rip), %rdi
    000043bf: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 17343
.Ltmp1252:
    000043c4: 	leaq	DATAat0x11182(%rip), %rdi
    000043cb: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 17355
.Ltmp1262:
    000043d0: 	leaq	DATAat0x11158(%rip), %rdi
    000043d7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 17367
.Ltmp1265:
    000043dc: 	leaq	DATAat0x11182(%rip), %rdi
    000043e3: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 17379
.Ltmp1269:
    000043e8: 	leaq	DATAat0x11158(%rip), %rdi
    000043ef: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 17391
.Ltmp1272:
    000043f4: 	leaq	DATAat0x11182(%rip), %rdi
    000043fb: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 17403
.Ltmp1276:
    00004400: 	leaq	DATAat0x11158(%rip), %rdi
    00004407: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 17415
.Ltmp1279:
    0000440c: 	leaq	DATAat0x11182(%rip), %rdi
    00004413: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 17427
.Ltmp1282:
    00004418: 	leaq	DATAat0x11158(%rip), %rdi
    0000441f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 17439
.Ltmp1285:
    00004424: 	leaq	DATAat0x11182(%rip), %rdi
    0000442b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 17451
.Ltmp1287:
    00004430: 	leaq	DATAat0x11158(%rip), %rdi
    00004437: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 17463
.Ltmp1290:
    0000443c: 	leaq	DATAat0x11182(%rip), %rdi
    00004443: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 17475
.Ltmp1296:
    00004448: 	leaq	DATAat0x11158(%rip), %rdi
    0000444f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 17487
.Ltmp1299:
    00004454: 	leaq	DATAat0x11182(%rip), %rdi
    0000445b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 17499
.Ltmp1305:
    00004460: 	leaq	DATAat0x11158(%rip), %rdi
    00004467: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 17511
.Ltmp1308:
    0000446c: 	leaq	DATAat0x11182(%rip), %rdi
    00004473: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 17523
.Ltmp1312:
    00004478: 	leaq	DATAat0x11158(%rip), %rdi
    0000447f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 17535
.Ltmp1315:
    00004484: 	leaq	DATAat0x11182(%rip), %rdi
    0000448b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 17547
.Ltmp1328:
    00004490: 	callq	__stack_chk_fail@PLT # Offset: 17552
.Ltmp1332:
    00004495: 	movq	%rbx, %rdi
    00004498: 	jmp	.Ltmp1396 # Offset: 17560
.Ltmp1334:
    0000449d: 	movq	%rbx, %rdi
    000044a0: 	jmp	.Ltmp1397 # Offset: 17568
.Ltmp1336:
    000044a5: 	movq	%rbx, %rdi
    000044a8: 	jmp	.Ltmp1398 # Offset: 17576
.Ltmp1338:
    000044ad: 	movq	%rbx, %rdi
    000044b0: 	jmp	.Ltmp1399 # Offset: 17584
.Ltmp1340:
    000044b5: 	movq	%rbx, %rdi
    000044b8: 	jmp	.Ltmp1400 # Offset: 17592
.Ltmp1342:
    000044bd: 	movq	%rbx, %rdi
    000044c0: 	jmp	.Ltmp1401 # Offset: 17600
.Ltmp1344:
    000044c5: 	movq	%rbx, %rdi
    000044c8: 	jmp	.Ltmp1402 # Offset: 17608
.Ltmp1346:
    000044cd: 	movq	0x18(%rsp), %rdi
    000044d2: 	jmp	.Ltmp1403 # Offset: 17618
.Ltmp1348:
    000044d7: 	movq	%rbx, %rdi
    000044da: 	jmp	.Ltmp1404 # Offset: 17626
.Ltmp1350:
    000044df: 	movq	%rbx, %rdi
    000044e2: 	jmp	.Ltmp1405 # Offset: 17634
.Ltmp1352:
    000044e7: 	movq	%rbx, %rdi
    000044ea: 	jmp	.Ltmp1406 # Offset: 17642
.Ltmp1354:
    000044ef: 	movq	%rbx, %rdi
    000044f2: 	jmp	.Ltmp1407 # Offset: 17650
.Ltmp1356:
    000044f7: 	movq	%rbx, %rdi
    000044fa: 	jmp	.Ltmp1408 # Offset: 17658
.Ltmp1358:
    000044ff: 	movq	%rbx, %rdi
    00004502: 	jmp	.Ltmp1409 # Offset: 17666
.Ltmp1360:
    00004507: 	movq	%rbx, %rdi
    0000450a: 	jmp	.Ltmp1410 # Offset: 17674
.Ltmp1362:
    0000450f: 	movq	%rbx, %rdi
    00004512: 	jmp	.Ltmp1411 # Offset: 17682
.Ltmp1364:
    00004517: 	movq	%rbx, %rdi
    0000451a: 	jmp	.Ltmp1412 # Offset: 17690
.Ltmp1366:
    0000451f: 	movq	%rbx, %rdi
    00004522: 	jmp	.Ltmp1413 # Offset: 17698
.Ltmp1368:
    00004527: 	movq	%rbx, %rdi
    0000452a: 	jmp	.Ltmp1414 # Offset: 17706
.Ltmp1370:
    0000452f: 	movq	%rbx, %rdi
    00004532: 	jmp	.Ltmp1415 # Offset: 17714
.Ltmp1372:
    00004537: 	movq	%rbx, %rdi
    0000453a: 	jmp	.Ltmp1416 # Offset: 17722
.Ltmp1374:
    0000453f: 	movq	0x28(%rsp), %rdi
    00004544: 	jmp	.Ltmp1417 # Offset: 17732
.Ltmp1376:
    00004549: 	movq	%rbx, %rdi
    0000454c: 	jmp	.Ltmp1418 # Offset: 17740
.Ltmp1378:
    00004551: 	movq	%rbx, %rdi
    00004554: 	jmp	.Ltmp1419 # Offset: 17748
.Ltmp1380:
    00004559: 	movq	0x10(%rsp), %rdi
    0000455e: 	jmp	.Ltmp1420 # Offset: 17758
.Ltmp1382:
    00004563: 	movq	%rbx, %rdi
    00004566: 	jmp	.Ltmp1421 # Offset: 17766
.Ltmp1384:
    0000456b: 	movq	%rbx, %rdi
    0000456e: 	jmp	.Ltmp1422 # Offset: 17774
.Ltmp1386:
    00004573: 	movq	%rbx, %rdi
    00004576: 	jmp	.Ltmp1423 # Offset: 17782
.Ltmp1388:
    0000457b: 	movq	%rbx, %rdi
    0000457e: 	jmp	.Ltmp1424 # Offset: 17790
.Ltmp1390:
    00004583: 	movq	%rbx, %rdi
    00004586: 	jmp	.Ltmp1425 # Offset: 17798
.Ltmp1392:
    0000458b: 	movq	%rbx, %rdi
    0000458e: 	jmp	.Ltmp1426 # Offset: 17806
.Ltmp1394:
    00004593: 	movq	%rbx, %rdi
    00004596: 	jmp	.Ltmp1427 # Offset: 17814
    0000459b: 	endbr64
.Ltmp1429:
    0000459f: 	movq	%rax, %rbp
    000045a2: 	jmp	.Ltmp1428 # Offset: 17826
    000045a7: 	endbr64
    000045ab: 	jmp	.Ltmp1429 # Offset: 17835
    000045ad: 	endbr64
.Ltmp1432:
    000045b1: 	movq	%rax, %rbp
    000045b4: 	jmp	.Ltmp1430 # Offset: 17844
    000045b9: 	endbr64
    000045bd: 	movq	%rax, %rbp
    000045c0: 	jmp	.Ltmp1431 # Offset: 17856
    000045c5: 	endbr64
    000045c9: 	jmp	.Ltmp1432 # Offset: 17865
    000045cb: 	endbr64
    000045cf: 	movq	%rax, %rbp
    000045d2: 	jmp	.Ltmp1433 # Offset: 17874
    000045d4: 	endbr64
    000045d8: 	movq	%rax, %rbp
    000045db: 	jmp	.Ltmp1434 # Offset: 17883
.Ltmp1433:
    000045dd: 	movq	0x1b0(%rsp), %rdi
    000045e5: 	cmpq	%rbx, %rdi
    000045e8: 	je	.Ltmp1435 # Offset: 17896
    000045ea: 	movq	0x1c0(%rsp), %rax
    000045f2: 	leaq	0x1(%rax), %rsi
    000045f6: 	callq	_ZdlPvm@PLT # Offset: 17910
.Ltmp1435:
    000045fb: 	movq	0xb0(%rsp), %rdi
    00004603: 	cmpq	0x68(%rsp), %rdi
    00004608: 	je	.Ltmp1436 # Offset: 17928
    0000460a: 	movq	0xc0(%rsp), %rax
    00004612: 	leaq	0x1(%rax), %rsi
    00004616: 	callq	_ZdlPvm@PLT # Offset: 17942
.Ltmp1436:
    0000461b: 	movq	0x90(%rsp), %rdi
    00004623: 	cmpq	0x60(%rsp), %rdi
    00004628: 	je	.Ltmp1437 # Offset: 17960
    0000462a: 	movq	0xa0(%rsp), %rax
    00004632: 	leaq	0x1(%rax), %rsi
    00004636: 	callq	_ZdlPvm@PLT # Offset: 17974
.Ltmp1437:
    0000463b: 	movq	0x8(%rsp), %rdi
    00004640: 	movl	$0xfa0, %esi
    00004645: 	callq	_ZdlPvm@PLT # Offset: 17989
    0000464a: 	movq	%rbp, %rdi
    0000464d: 	callq	_Unwind_Resume@PLT # Offset: 17997
.Ltmp1434:
    00004652: 	movq	0x1b0(%rsp), %rdi
    0000465a: 	cmpq	%rbx, %rdi
    0000465d: 	je	.Ltmp1435 # Offset: 18013
    0000465f: 	movq	0x1c0(%rsp), %rax
    00004667: 	leaq	0x1(%rax), %rsi
    0000466b: 	callq	_ZdlPvm@PLT # Offset: 18027
    00004670: 	jmp	.Ltmp1435 # Offset: 18032
    00004672: 	endbr64
    00004676: 	jmp	.Ltmp1432 # Offset: 18038
    0000467b: 	endbr64
    0000467f: 	jmp	.Ltmp1432 # Offset: 18047
    00004684: 	endbr64
    00004688: 	movq	%rax, %rbp
    0000468b: 	jmp	.Ltmp1438 # Offset: 18059
    0000468d: 	endbr64
    00004691: 	movq	%rax, %rbp
    00004694: 	jmp	.Ltmp1439 # Offset: 18068
.Ltmp1438:
    00004696: 	movq	0x1b0(%rsp), %rdi
    0000469e: 	cmpq	%rbx, %rdi
    000046a1: 	je	.Ltmp1435 # Offset: 18081
    000046a7: 	movq	0x1c0(%rsp), %rax
    000046af: 	leaq	0x1(%rax), %rsi
    000046b3: 	callq	_ZdlPvm@PLT # Offset: 18099
    000046b8: 	jmp	.Ltmp1435 # Offset: 18104
.Ltmp1430:
    000046bd: 	movq	0x1b0(%rsp), %rdi
    000046c5: 	cmpq	%rbx, %rdi
    000046c8: 	je	.Ltmp1439 # Offset: 18120
    000046ca: 	movq	0x1c0(%rsp), %rax
    000046d2: 	leaq	0x1(%rax), %rsi
    000046d6: 	callq	_ZdlPvm@PLT # Offset: 18134
.Ltmp1439:
    000046db: 	movq	0xd0(%rsp), %rdi
    000046e3: 	leaq	0xe0(%rsp), %rax
    000046eb: 	cmpq	%rax, %rdi
    000046ee: 	je	.Ltmp1435 # Offset: 18158
    000046f4: 	movq	0xe0(%rsp), %rax
    000046fc: 	leaq	0x1(%rax), %rsi
    00004700: 	callq	_ZdlPvm@PLT # Offset: 18176
    00004705: 	jmp	.Ltmp1435 # Offset: 18181
    0000470a: 	endbr64
    0000470e: 	movq	%rax, %rbp
    00004711: 	jmp	.Ltmp1440 # Offset: 18193
    00004713: 	endbr64
    00004717: 	movq	%rax, %rbp
    0000471a: 	jmp	.Ltmp1441 # Offset: 18202
.Ltmp1440:
    0000471c: 	movq	0x1b0(%rsp), %rdi
    00004724: 	cmpq	%rbx, %rdi
    00004727: 	je	.Ltmp1435 # Offset: 18215
    0000472d: 	movq	0x1c0(%rsp), %rax
    00004735: 	leaq	0x1(%rax), %rsi
    00004739: 	callq	_ZdlPvm@PLT # Offset: 18233
    0000473e: 	jmp	.Ltmp1435 # Offset: 18238
.Ltmp1441:
    00004743: 	movq	0x1b0(%rsp), %rdi
    0000474b: 	cmpq	%rbx, %rdi
    0000474e: 	je	.Ltmp1435 # Offset: 18254
    00004754: 	movq	0x1c0(%rsp), %rax
    0000475c: 	leaq	0x1(%rax), %rsi
    00004760: 	callq	_ZdlPvm@PLT # Offset: 18272
    00004765: 	jmp	.Ltmp1435 # Offset: 18277
    0000476a: 	endbr64
    0000476e: 	movq	%rax, %rbp
    00004771: 	jmp	.Ltmp1442 # Offset: 18289
    00004773: 	endbr64
    00004777: 	movq	%rax, %rbp
    0000477a: 	jmp	.Ltmp1443 # Offset: 18298
.Ltmp1442:
    0000477c: 	movq	0x1b0(%rsp), %rdi
    00004784: 	cmpq	%rbx, %rdi
    00004787: 	je	.Ltmp1435 # Offset: 18311
    0000478d: 	movq	0x1c0(%rsp), %rax
    00004795: 	leaq	0x1(%rax), %rsi
    00004799: 	callq	_ZdlPvm@PLT # Offset: 18329
    0000479e: 	jmp	.Ltmp1435 # Offset: 18334
.Ltmp1443:
    000047a3: 	movq	0x1b0(%rsp), %rdi
    000047ab: 	cmpq	%rbx, %rdi
    000047ae: 	je	.Ltmp1435 # Offset: 18350
    000047b4: 	movq	0x1c0(%rsp), %rax
    000047bc: 	leaq	0x1(%rax), %rsi
    000047c0: 	callq	_ZdlPvm@PLT # Offset: 18368
    000047c5: 	jmp	.Ltmp1435 # Offset: 18373
    000047ca: 	endbr64
    000047ce: 	movq	%rax, %rbp
    000047d1: 	movq	0x1b0(%rsp), %rdi
    000047d9: 	cmpq	%rbx, %rdi
    000047dc: 	je	.Ltmp1435 # Offset: 18396
    000047e2: 	movq	0x1c0(%rsp), %rax
    000047ea: 	leaq	0x1(%rax), %rsi
    000047ee: 	callq	_ZdlPvm@PLT # Offset: 18414
    000047f3: 	jmp	.Ltmp1435 # Offset: 18419
    000047f8: 	endbr64
.Ltmp1445:
    000047fc: 	movq	%rax, %rbp
    000047ff: 	jmp	.Ltmp1444 # Offset: 18431
    00004801: 	endbr64
    00004805: 	jmp	.Ltmp1445 # Offset: 18437
    00004807: 	endbr64
    0000480b: 	movq	%rax, %rbp
    0000480e: 	jmp	.Ltmp1446 # Offset: 18446
    00004810: 	endbr64
    00004814: 	movq	%rax, %rbp
    00004817: 	jmp	.Ltmp1447 # Offset: 18455
.Ltmp1444:
    00004819: 	movq	0x1b0(%rsp), %rdi
    00004821: 	cmpq	%rbx, %rdi
    00004824: 	je	.Ltmp1448 # Offset: 18468
    00004826: 	movq	0x1c0(%rsp), %rax
    0000482e: 	leaq	0x1(%rax), %rsi
    00004832: 	callq	_ZdlPvm@PLT # Offset: 18482
.Ltmp1448:
    00004837: 	movq	0xf0(%rsp), %rdi
    0000483f: 	cmpq	0x18(%rsp), %rdi
    00004844: 	je	.Ltmp1439 # Offset: 18500
    0000484a: 	movq	0x100(%rsp), %rax
    00004852: 	leaq	0x1(%rax), %rsi
    00004856: 	callq	_ZdlPvm@PLT # Offset: 18518
    0000485b: 	jmp	.Ltmp1439 # Offset: 18523
.Ltmp1446:
    00004860: 	movq	0x1b0(%rsp), %rdi
    00004868: 	cmpq	%rbx, %rdi
    0000486b: 	je	.Ltmp1435 # Offset: 18539
    00004871: 	movq	0x1c0(%rsp), %rax
    00004879: 	leaq	0x1(%rax), %rsi
    0000487d: 	callq	_ZdlPvm@PLT # Offset: 18557
    00004882: 	jmp	.Ltmp1435 # Offset: 18562
.Ltmp1447:
    00004887: 	movq	0x1b0(%rsp), %rdi
    0000488f: 	cmpq	%rbx, %rdi
    00004892: 	je	.Ltmp1435 # Offset: 18578
    00004898: 	movq	0x1c0(%rsp), %rax
    000048a0: 	leaq	0x1(%rax), %rsi
    000048a4: 	callq	_ZdlPvm@PLT # Offset: 18596
    000048a9: 	jmp	.Ltmp1435 # Offset: 18601
    000048ae: 	endbr64
    000048b2: 	jmp	.Ltmp1445 # Offset: 18610
    000048b7: 	endbr64
    000048bb: 	jmp	.Ltmp1445 # Offset: 18619
    000048c0: 	endbr64
    000048c4: 	jmp	.Ltmp1432 # Offset: 18628
    000048c9: 	endbr64
    000048cd: 	jmp	.Ltmp1432 # Offset: 18637
    000048d2: 	endbr64
    000048d6: 	movq	%rax, %rbp
    000048d9: 	jmp	.Ltmp1449 # Offset: 18649
    000048db: 	endbr64
    000048df: 	movq	%rax, %rbp
    000048e2: 	jmp	.Ltmp1450 # Offset: 18658
.Ltmp1449:
    000048e4: 	movq	0x1b0(%rsp), %rdi
    000048ec: 	cmpq	%rbx, %rdi
    000048ef: 	je	.Ltmp1435 # Offset: 18671
    000048f5: 	movq	0x1c0(%rsp), %rax
    000048fd: 	leaq	0x1(%rax), %rsi
    00004901: 	callq	_ZdlPvm@PLT # Offset: 18689
    00004906: 	jmp	.Ltmp1435 # Offset: 18694
.Ltmp1450:
    0000490b: 	movq	0x1b0(%rsp), %rdi
    00004913: 	cmpq	%rbx, %rdi
    00004916: 	je	.Ltmp1435 # Offset: 18710
    0000491c: 	movq	0x1c0(%rsp), %rax
    00004924: 	leaq	0x1(%rax), %rsi
    00004928: 	callq	_ZdlPvm@PLT # Offset: 18728
    0000492d: 	jmp	.Ltmp1435 # Offset: 18733
    00004932: 	endbr64
    00004936: 	jmp	.Ltmp1432 # Offset: 18742
    0000493b: 	endbr64
    0000493f: 	jmp	.Ltmp1432 # Offset: 18751
    00004944: 	endbr64
    00004948: 	jmp	.Ltmp1432 # Offset: 18760
.Ltmp1431:
    0000494d: 	movq	0x1b0(%rsp), %rdi
    00004955: 	cmpq	%rbx, %rdi
    00004958: 	je	.Ltmp1435 # Offset: 18776
    0000495e: 	movq	0x1c0(%rsp), %rax
    00004966: 	leaq	0x1(%rax), %rsi
    0000496a: 	callq	_ZdlPvm@PLT # Offset: 18794
    0000496f: 	jmp	.Ltmp1435 # Offset: 18799
    00004974: 	endbr64
    00004978: 	jmp	.Ltmp1432 # Offset: 18808
    0000497d: 	endbr64
    00004981: 	jmp	.Ltmp1432 # Offset: 18817
    00004986: 	endbr64
    0000498a: 	jmp	.Ltmp1432 # Offset: 18826
    0000498f: 	endbr64
    00004993: 	jmp	.Ltmp1432 # Offset: 18835
.Ltmp1428:
    00004998: 	movq	0x1b0(%rsp), %rdi
    000049a0: 	cmpq	%rbx, %rdi
    000049a3: 	je	.Ltmp1451 # Offset: 18851
    000049a5: 	movq	0x1c0(%rsp), %rax
    000049ad: 	leaq	0x1(%rax), %rsi
    000049b1: 	callq	_ZdlPvm@PLT # Offset: 18865
.Ltmp1451:
    000049b6: 	movq	0x170(%rsp), %rdi
    000049be: 	leaq	0x180(%rsp), %rax
    000049c6: 	cmpq	%rax, %rdi
    000049c9: 	je	.Ltmp1452 # Offset: 18889
    000049cb: 	movq	0x180(%rsp), %rax
    000049d3: 	leaq	0x1(%rax), %rsi
    000049d7: 	callq	_ZdlPvm@PLT # Offset: 18903
.Ltmp1452:
    000049dc: 	movq	0x150(%rsp), %rdi
    000049e4: 	cmpq	0x28(%rsp), %rdi
    000049e9: 	je	.Ltmp1453 # Offset: 18921
    000049eb: 	movq	0x160(%rsp), %rax
    000049f3: 	leaq	0x1(%rax), %rsi
    000049f7: 	callq	_ZdlPvm@PLT # Offset: 18935
.Ltmp1453:
    000049fc: 	movq	0x130(%rsp), %rdi
    00004a04: 	leaq	0x140(%rsp), %rax
    00004a0c: 	cmpq	%rax, %rdi
    00004a0f: 	je	.Ltmp1454 # Offset: 18959
    00004a11: 	movq	0x140(%rsp), %rax
    00004a19: 	leaq	0x1(%rax), %rsi
    00004a1d: 	callq	_ZdlPvm@PLT # Offset: 18973
.Ltmp1454:
    00004a22: 	movq	0x110(%rsp), %rdi
    00004a2a: 	leaq	0x120(%rsp), %rax
    00004a32: 	cmpq	%rax, %rdi
    00004a35: 	je	.Ltmp1448 # Offset: 18997
    00004a3b: 	movq	0x120(%rsp), %rax
    00004a43: 	leaq	0x1(%rax), %rsi
    00004a47: 	callq	_ZdlPvm@PLT # Offset: 19015
    00004a4c: 	jmp	.Ltmp1448 # Offset: 19020
    00004a51: 	endbr64
    00004a55: 	jmp	.Ltmp1432 # Offset: 19029
    00004a5a: 	endbr64
    00004a5e: 	jmp	.Ltmp1429 # Offset: 19038
    00004a63: 	endbr64
    00004a67: 	jmp	.Ltmp1429 # Offset: 19047
    00004a6c: 	endbr64
.Ltmp1456:
    00004a70: 	movq	%rax, %rbp
    00004a73: 	jmp	.Ltmp1455 # Offset: 19059
    00004a75: 	endbr64
    00004a79: 	jmp	.Ltmp1456 # Offset: 19065
    00004a7b: 	endbr64
.Ltmp1459:
    00004a7f: 	movq	%rax, %rbp
    00004a82: 	jmp	.Ltmp1457 # Offset: 19074
    00004a84: 	endbr64
    00004a88: 	jmp	.Ltmp1429 # Offset: 19080
    00004a8d: 	endbr64
.Ltmp1458:
    00004a91: 	movq	%rax, %rbp
    00004a94: 	movq	0x70(%rsp), %rdi
    00004a99: 	movq	0x80(%rsp), %rsi
    00004aa1: 	subq	%rdi, %rsi
    00004aa4: 	testq	%rdi, %rdi
    00004aa7: 	je	.Ltmp1457 # Offset: 19111
    00004aa9: 	callq	_ZdlPvm@PLT # Offset: 19113
.Ltmp1457:
    00004aae: 	movq	0x1b0(%rsp), %rdi
    00004ab6: 	cmpq	%rbx, %rdi
    00004ab9: 	je	.Ltmp1455 # Offset: 19129
    00004abb: 	movq	0x1c0(%rsp), %rax
    00004ac3: 	leaq	0x1(%rax), %rsi
    00004ac7: 	callq	_ZdlPvm@PLT # Offset: 19143
.Ltmp1455:
    00004acc: 	movq	0x190(%rsp), %rdi
    00004ad4: 	cmpq	0x10(%rsp), %rdi
    00004ad9: 	je	.Ltmp1451 # Offset: 19161
    00004adf: 	movq	0x1a0(%rsp), %rax
    00004ae7: 	leaq	0x1(%rax), %rsi
    00004aeb: 	callq	_ZdlPvm@PLT # Offset: 19179
    00004af0: 	jmp	.Ltmp1451 # Offset: 19184
    00004af5: 	endbr64
    00004af9: 	jmp	.Ltmp1429 # Offset: 19193
    00004afe: 	endbr64
    00004b02: 	jmp	.Ltmp1429 # Offset: 19202
    00004b07: 	endbr64
    00004b0b: 	jmp	.Ltmp1429 # Offset: 19211
    00004b10: 	endbr64
    00004b14: 	jmp	.Ltmp1429 # Offset: 19220
    00004b19: 	endbr64
    00004b1d: 	jmp	.Ltmp1429 # Offset: 19229
    00004b22: 	endbr64
    00004b26: 	jmp	.Ltmp1429 # Offset: 19238
    00004b2b: 	endbr64
    00004b2f: 	jmp	.Ltmp1458 # Offset: 19247
    00004b34: 	endbr64
    00004b38: 	jmp	.Ltmp1459 # Offset: 19256
    00004b3d: 	endbr64
    00004b41: 	jmp	.Ltmp1459 # Offset: 19265
    00004b46: 	endbr64
    00004b4a: 	jmp	.Ltmp1458 # Offset: 19274
    00004b4f: 	endbr64
    00004b53: 	jmp	.Ltmp1459 # Offset: 19283
    00004b58: 	endbr64
    00004b5c: 	jmp	.Ltmp1459 # Offset: 19292
    00004b61: 	endbr64
    00004b65: 	jmp	.Ltmp1458 # Offset: 19301
    00004b6a: 	endbr64
    00004b6e: 	movq	%rax, %rbp
    00004b71: 	jmp	.Ltmp1460 # Offset: 19313
    00004b73: 	endbr64
    00004b77: 	movq	%rax, %rbp
    00004b7a: 	jmp	.Ltmp1435 # Offset: 19322
.Ltmp1460:
    00004b7f: 	movq	0x1b0(%rsp), %rdi
    00004b87: 	leaq	0x1c0(%rsp), %rax
    00004b8f: 	cmpq	%rax, %rdi
    00004b92: 	je	.Ltmp1435 # Offset: 19346
    00004b98: 	movq	0x1c0(%rsp), %rax
    00004ba0: 	leaq	0x1(%rax), %rsi
    00004ba4: 	callq	_ZdlPvm@PLT # Offset: 19364
    00004ba9: 	jmp	.Ltmp1435 # Offset: 19369
    00004bae: 	endbr64
    00004bb2: 	jmp	.Ltmp1459 # Offset: 19378
    00004bb7: 	endbr64
    00004bbb: 	jmp	.Ltmp1458 # Offset: 19387
    00004bc0: 	endbr64
    00004bc4: 	jmp	.Ltmp1459 # Offset: 19396
    00004bc9: 	endbr64
    00004bcd: 	jmp	.Ltmp1458 # Offset: 19405
    00004bd2: 	endbr64
    00004bd6: 	jmp	.Ltmp1459 # Offset: 19414
    00004bdb: 	endbr64
    00004bdf: 	jmp	.Ltmp1459 # Offset: 19423
    00004be4: 	endbr64
    00004be8: 	jmp	.Ltmp1459 # Offset: 19432
    00004bed: 	endbr64
    00004bf1: 	jmp	.Ltmp1459 # Offset: 19441
    00004bf6: 	endbr64
.Ltmp1462:
    00004bfa: 	movq	%rax, %rbp
    00004bfd: 	jmp	.Ltmp1461 # Offset: 19453
    00004c02: 	endbr64
    00004c06: 	jmp	.Ltmp1462 # Offset: 19462
    00004c08: 	endbr64
    00004c0c: 	movq	%rax, %rbp
    00004c0f: 	jmp	.Ltmp1451 # Offset: 19471
    00004c14: 	endbr64
.Ltmp1464:
    00004c18: 	movq	%rax, %rbp
    00004c1b: 	jmp	.Ltmp1463 # Offset: 19483
    00004c1d: 	endbr64
    00004c21: 	jmp	.Ltmp1464 # Offset: 19489
    00004c23: 	endbr64
    00004c27: 	jmp	.Ltmp1464 # Offset: 19495
    00004c29: 	endbr64
    00004c2d: 	jmp	.Ltmp1464 # Offset: 19501
.Ltmp1463:
    00004c2f: 	movq	0x1b0(%rsp), %rdi
    00004c37: 	cmpq	%rbx, %rdi
    00004c3a: 	je	.Ltmp1453 # Offset: 19514
    00004c40: 	movq	0x1c0(%rsp), %rax
    00004c48: 	leaq	0x1(%rax), %rsi
    00004c4c: 	callq	_ZdlPvm@PLT # Offset: 19532
    00004c51: 	jmp	.Ltmp1453 # Offset: 19537
    00004c56: 	endbr64
    00004c5a: 	jmp	.Ltmp1464 # Offset: 19546
    00004c5c: 	endbr64
    00004c60: 	jmp	.Ltmp1464 # Offset: 19552
    00004c62: 	endbr64
    00004c66: 	jmp	.Ltmp1464 # Offset: 19558
    00004c68: 	endbr64
    00004c6c: 	jmp	.Ltmp1464 # Offset: 19564
    00004c6e: 	endbr64
    00004c72: 	jmp	.Ltmp1462 # Offset: 19570
    00004c74: 	endbr64
    00004c78: 	jmp	.Ltmp1462 # Offset: 19576
    00004c7a: 	endbr64
    00004c7e: 	movq	%rax, %rbp
    00004c81: 	jmp	.Ltmp1453 # Offset: 19585
    00004c86: 	endbr64
    00004c8a: 	jmp	.Ltmp1464 # Offset: 19594
    00004c8c: 	endbr64
    00004c90: 	jmp	.Ltmp1464 # Offset: 19600
    00004c92: 	endbr64
    00004c96: 	jmp	.Ltmp1464 # Offset: 19606
    00004c98: 	endbr64
    00004c9c: 	movq	%rax, %rbp
    00004c9f: 	jmp	.Ltmp1465 # Offset: 19615
    00004ca1: 	endbr64
    00004ca5: 	movq	%rax, %rbp
    00004ca8: 	jmp	.Ltmp1466 # Offset: 19624
.Ltmp1465:
    00004caa: 	movq	0x1b0(%rsp), %rdi
    00004cb2: 	cmpq	%rbx, %rdi
    00004cb5: 	je	.Ltmp1435 # Offset: 19637
    00004cbb: 	movq	0x1c0(%rsp), %rax
    00004cc3: 	leaq	0x1(%rax), %rsi
    00004cc7: 	callq	_ZdlPvm@PLT # Offset: 19655
    00004ccc: 	jmp	.Ltmp1435 # Offset: 19660
.Ltmp1466:
    00004cd1: 	movq	0x1b0(%rsp), %rdi
    00004cd9: 	cmpq	%rbx, %rdi
    00004cdc: 	je	.Ltmp1435 # Offset: 19676
    00004ce2: 	movq	0x1c0(%rsp), %rax
    00004cea: 	leaq	0x1(%rax), %rsi
    00004cee: 	callq	_ZdlPvm@PLT # Offset: 19694
    00004cf3: 	jmp	.Ltmp1435 # Offset: 19699
    00004cf8: 	endbr64
    00004cfc: 	jmp	.Ltmp1462 # Offset: 19708
    00004d01: 	endbr64
    00004d05: 	jmp	.Ltmp1429 # Offset: 19717
    00004d0a: 	endbr64
    00004d0e: 	jmp	.Ltmp1462 # Offset: 19726
    00004d13: 	endbr64
    00004d17: 	jmp	.Ltmp1462 # Offset: 19735
    00004d1c: 	endbr64
    00004d20: 	jmp	.Ltmp1462 # Offset: 19744
    00004d25: 	endbr64
    00004d29: 	jmp	.Ltmp1462 # Offset: 19753
    00004d2e: 	endbr64
    00004d32: 	jmp	.Ltmp1464 # Offset: 19762
    00004d37: 	endbr64
    00004d3b: 	jmp	.Ltmp1464 # Offset: 19771
    00004d40: 	endbr64
.Ltmp1467:
    00004d44: 	movq	%rax, %rbp
    00004d47: 	jmp	.Ltmp1452 # Offset: 19783
    00004d4c: 	endbr64
    00004d50: 	jmp	.Ltmp1462 # Offset: 19792
    00004d55: 	endbr64
    00004d59: 	jmp	.Ltmp1462 # Offset: 19801
    00004d5e: 	endbr64
    00004d62: 	jmp	.Ltmp1462 # Offset: 19810
    00004d67: 	endbr64
    00004d6b: 	jmp	.Ltmp1467 # Offset: 19819
    00004d6d: 	endbr64
    00004d71: 	jmp	.Ltmp1462 # Offset: 19825
    00004d76: 	endbr64
    00004d7a: 	jmp	.Ltmp1429 # Offset: 19834
.Ltmp1461:
    00004d7f: 	movq	0x1b0(%rsp), %rdi
    00004d87: 	cmpq	%rbx, %rdi
    00004d8a: 	je	.Ltmp1452 # Offset: 19850
    00004d90: 	movq	0x1c0(%rsp), %rax
    00004d98: 	leaq	0x1(%rax), %rsi
    00004d9c: 	callq	_ZdlPvm@PLT # Offset: 19868
    00004da1: 	jmp	.Ltmp1452 # Offset: 19873
    00004da6: 	endbr64
    00004daa: 	movq	%rax, %rbp
    00004dad: 	jmp	.Ltmp1468 # Offset: 19885
    00004db2: 	endbr64
    00004db6: 	jmp	.Ltmp1445 # Offset: 19894
    00004dbb: 	endbr64
    00004dbf: 	movq	%rax, %rbp
    00004dc2: 	jmp	.Ltmp1469 # Offset: 19906
    00004dc4: 	endbr64
    00004dc8: 	movq	%rax, %rbp
    00004dcb: 	jmp	.Ltmp1470 # Offset: 19915
.Ltmp1469:
    00004dcd: 	movq	0x1b0(%rsp), %rdi
    00004dd5: 	cmpq	%rbx, %rdi
    00004dd8: 	je	.Ltmp1435 # Offset: 19928
    00004dde: 	movq	0x1c0(%rsp), %rax
    00004de6: 	leaq	0x1(%rax), %rsi
    00004dea: 	callq	_ZdlPvm@PLT # Offset: 19946
    00004def: 	jmp	.Ltmp1435 # Offset: 19951
.Ltmp1470:
    00004df4: 	movq	0x1b0(%rsp), %rdi
    00004dfc: 	cmpq	%rbx, %rdi
    00004dff: 	je	.Ltmp1435 # Offset: 19967
    00004e05: 	movq	0x1c0(%rsp), %rax
    00004e0d: 	leaq	0x1(%rax), %rsi
    00004e11: 	callq	_ZdlPvm@PLT # Offset: 19985
    00004e16: 	jmp	.Ltmp1435 # Offset: 19990
    00004e1b: 	endbr64
    00004e1f: 	movq	%rax, %rbp
    00004e22: 	jmp	.Ltmp1471 # Offset: 20002
    00004e24: 	endbr64
    00004e28: 	movq	%rax, %rbp
    00004e2b: 	jmp	.Ltmp1472 # Offset: 20011
.Ltmp1471:
    00004e2d: 	movq	0x1b0(%rsp), %rdi
    00004e35: 	cmpq	%rbx, %rdi
    00004e38: 	je	.Ltmp1435 # Offset: 20024
    00004e3e: 	movq	0x1c0(%rsp), %rax
    00004e46: 	leaq	0x1(%rax), %rsi
    00004e4a: 	callq	_ZdlPvm@PLT # Offset: 20042
    00004e4f: 	jmp	.Ltmp1435 # Offset: 20047
.Ltmp1472:
    00004e54: 	movq	0x1b0(%rsp), %rdi
    00004e5c: 	cmpq	%rbx, %rdi
    00004e5f: 	je	.Ltmp1435 # Offset: 20063
    00004e65: 	movq	0x1c0(%rsp), %rax
    00004e6d: 	leaq	0x1(%rax), %rsi
    00004e71: 	callq	_ZdlPvm@PLT # Offset: 20081
    00004e76: 	jmp	.Ltmp1435 # Offset: 20086
    00004e7b: 	endbr64
    00004e7f: 	movq	%rax, %rbp
    00004e82: 	jmp	.Ltmp1473 # Offset: 20098
    00004e84: 	endbr64
    00004e88: 	jmp	.Ltmp1464 # Offset: 20104
.Ltmp1473:
    00004e8d: 	movq	0x1b0(%rsp), %rdi
    00004e95: 	cmpq	%rbx, %rdi
    00004e98: 	je	.Ltmp1435 # Offset: 20120
    00004e9e: 	movq	0x1c0(%rsp), %rax
    00004ea6: 	leaq	0x1(%rax), %rsi
    00004eaa: 	callq	_ZdlPvm@PLT # Offset: 20138
    00004eaf: 	jmp	.Ltmp1435 # Offset: 20143
    00004eb4: 	endbr64
    00004eb8: 	movq	%rax, %rbp
    00004ebb: 	jmp	.Ltmp1474 # Offset: 20155
    00004ebd: 	endbr64
    00004ec1: 	movq	%rax, %rbp
    00004ec4: 	jmp	.Ltmp1475 # Offset: 20164
.Ltmp1474:
    00004ec6: 	movq	0x1b0(%rsp), %rdi
    00004ece: 	cmpq	%rbx, %rdi
    00004ed1: 	je	.Ltmp1435 # Offset: 20177
    00004ed7: 	movq	0x1c0(%rsp), %rax
    00004edf: 	leaq	0x1(%rax), %rsi
    00004ee3: 	callq	_ZdlPvm@PLT # Offset: 20195
    00004ee8: 	jmp	.Ltmp1435 # Offset: 20200
.Ltmp1475:
    00004eed: 	movq	0x1b0(%rsp), %rdi
    00004ef5: 	cmpq	%rbx, %rdi
    00004ef8: 	je	.Ltmp1435 # Offset: 20216
    00004efe: 	movq	0x1c0(%rsp), %rax
    00004f06: 	leaq	0x1(%rax), %rsi
    00004f0a: 	callq	_ZdlPvm@PLT # Offset: 20234
    00004f0f: 	jmp	.Ltmp1435 # Offset: 20239
    00004f14: 	endbr64
    00004f18: 	movq	%rax, %rbp
    00004f1b: 	jmp	.Ltmp1476 # Offset: 20251
    00004f1d: 	endbr64
    00004f21: 	movq	%rax, %rbp
    00004f24: 	jmp	.Ltmp1477 # Offset: 20260
.Ltmp1476:
    00004f26: 	movq	0x1b0(%rsp), %rdi
    00004f2e: 	cmpq	%rbx, %rdi
    00004f31: 	je	.Ltmp1435 # Offset: 20273
    00004f37: 	movq	0x1c0(%rsp), %rax
    00004f3f: 	leaq	0x1(%rax), %rsi
    00004f43: 	callq	_ZdlPvm@PLT # Offset: 20291
    00004f48: 	jmp	.Ltmp1435 # Offset: 20296
.Ltmp1477:
    00004f4d: 	movq	0x1b0(%rsp), %rdi
    00004f55: 	cmpq	%rbx, %rdi
    00004f58: 	je	.Ltmp1435 # Offset: 20312
    00004f5e: 	movq	0x1c0(%rsp), %rax
    00004f66: 	leaq	0x1(%rax), %rsi
    00004f6a: 	callq	_ZdlPvm@PLT # Offset: 20330
    00004f6f: 	jmp	.Ltmp1435 # Offset: 20335
    00004f74: 	endbr64
    00004f78: 	movq	%rax, %rbp
    00004f7b: 	jmp	.Ltmp1478 # Offset: 20347
    00004f7d: 	endbr64
    00004f81: 	movq	%rax, %rbp
    00004f84: 	jmp	.Ltmp1479 # Offset: 20356
.Ltmp1478:
    00004f86: 	movq	0x1b0(%rsp), %rdi
    00004f8e: 	cmpq	%rbx, %rdi
    00004f91: 	je	.Ltmp1435 # Offset: 20369
    00004f97: 	movq	0x1c0(%rsp), %rax
    00004f9f: 	leaq	0x1(%rax), %rsi
    00004fa3: 	callq	_ZdlPvm@PLT # Offset: 20387
    00004fa8: 	jmp	.Ltmp1435 # Offset: 20392
.Ltmp1479:
    00004fad: 	movq	0x1b0(%rsp), %rdi
    00004fb5: 	cmpq	%rbx, %rdi
    00004fb8: 	je	.Ltmp1435 # Offset: 20408
    00004fbe: 	movq	0x1c0(%rsp), %rax
    00004fc6: 	leaq	0x1(%rax), %rsi
    00004fca: 	callq	_ZdlPvm@PLT # Offset: 20426
    00004fcf: 	jmp	.Ltmp1435 # Offset: 20431
    00004fd4: 	endbr64
    00004fd8: 	movq	%rax, %rbp
    00004fdb: 	jmp	.Ltmp1480 # Offset: 20443
    00004fdd: 	endbr64
    00004fe1: 	movq	%rax, %rbp
    00004fe4: 	jmp	.Ltmp1481 # Offset: 20452
.Ltmp1480:
    00004fe6: 	movq	0x1b0(%rsp), %rdi
    00004fee: 	cmpq	%rbx, %rdi
    00004ff1: 	je	.Ltmp1435 # Offset: 20465
    00004ff7: 	movq	0x1c0(%rsp), %rax
    00004fff: 	leaq	0x1(%rax), %rsi
    00005003: 	callq	_ZdlPvm@PLT # Offset: 20483
    00005008: 	jmp	.Ltmp1435 # Offset: 20488
.Ltmp1481:
    0000500d: 	movq	0x1b0(%rsp), %rdi
    00005015: 	cmpq	%rbx, %rdi
    00005018: 	je	.Ltmp1435 # Offset: 20504
    0000501e: 	movq	0x1c0(%rsp), %rax
    00005026: 	leaq	0x1(%rax), %rsi
    0000502a: 	callq	_ZdlPvm@PLT # Offset: 20522
    0000502f: 	jmp	.Ltmp1435 # Offset: 20527
    00005034: 	endbr64
    00005038: 	jmp	.Ltmp1445 # Offset: 20536
    0000503d: 	endbr64
    00005041: 	jmp	.Ltmp1445 # Offset: 20545
    00005046: 	endbr64
    0000504a: 	jmp	.Ltmp1432 # Offset: 20554
    0000504f: 	endbr64
    00005053: 	jmp	.Ltmp1432 # Offset: 20563
    00005058: 	endbr64
.Ltmp1482:
    0000505c: 	movq	%rax, %rbp
    0000505f: 	jmp	.Ltmp1448 # Offset: 20575
    00005064: 	endbr64
    00005068: 	jmp	.Ltmp1482 # Offset: 20584
    0000506a: 	endbr64
    0000506e: 	jmp	.Ltmp1445 # Offset: 20590
    00005073: 	endbr64
    00005077: 	jmp	.Ltmp1445 # Offset: 20599
    0000507c: 	endbr64
    00005080: 	movq	%rax, %rbp
    00005083: 	jmp	.Ltmp1483 # Offset: 20611
    00005085: 	endbr64
    00005089: 	movq	%rax, %rbp
    0000508c: 	jmp	.Ltmp1484 # Offset: 20620
.Ltmp1483:
    0000508e: 	movq	0x1b0(%rsp), %rdi
    00005096: 	cmpq	%rbx, %rdi
    00005099: 	je	.Ltmp1435 # Offset: 20633
    0000509f: 	movq	0x1c0(%rsp), %rax
    000050a7: 	leaq	0x1(%rax), %rsi
    000050ab: 	callq	_ZdlPvm@PLT # Offset: 20651
    000050b0: 	jmp	.Ltmp1435 # Offset: 20656
.Ltmp1484:
    000050b5: 	movq	0x1b0(%rsp), %rdi
    000050bd: 	cmpq	%rbx, %rdi
    000050c0: 	je	.Ltmp1435 # Offset: 20672
    000050c6: 	movq	0x1c0(%rsp), %rax
    000050ce: 	leaq	0x1(%rax), %rsi
    000050d2: 	callq	_ZdlPvm@PLT # Offset: 20690
    000050d7: 	jmp	.Ltmp1435 # Offset: 20695
    000050dc: 	endbr64
    000050e0: 	movq	%rax, %rbp
    000050e3: 	jmp	.Ltmp1485 # Offset: 20707
    000050e5: 	endbr64
    000050e9: 	movq	%rax, %rbp
    000050ec: 	jmp	.Ltmp1486 # Offset: 20716
.Ltmp1485:
    000050ee: 	movq	0x1b0(%rsp), %rdi
    000050f6: 	cmpq	%rbx, %rdi
    000050f9: 	je	.Ltmp1435 # Offset: 20729
    000050ff: 	movq	0x1c0(%rsp), %rax
    00005107: 	leaq	0x1(%rax), %rsi
    0000510b: 	callq	_ZdlPvm@PLT # Offset: 20747
    00005110: 	jmp	.Ltmp1435 # Offset: 20752
.Ltmp1486:
    00005115: 	movq	0x1b0(%rsp), %rdi
    0000511d: 	cmpq	%rbx, %rdi
    00005120: 	je	.Ltmp1435 # Offset: 20768
    00005126: 	movq	0x1c0(%rsp), %rax
    0000512e: 	leaq	0x1(%rax), %rsi
    00005132: 	callq	_ZdlPvm@PLT # Offset: 20786
    00005137: 	jmp	.Ltmp1435 # Offset: 20791
    0000513c: 	endbr64
    00005140: 	jmp	.Ltmp1432 # Offset: 20800
    00005145: 	endbr64
    00005149: 	jmp	.Ltmp1432 # Offset: 20809
    0000514e: 	endbr64
    00005152: 	movq	%rax, %rbp
    00005155: 	jmp	.Ltmp1487 # Offset: 20821
    00005157: 	endbr64
    0000515b: 	movq	%rax, %rbp
    0000515e: 	jmp	.Ltmp1488 # Offset: 20830
.Ltmp1487:
    00005160: 	movq	0x1b0(%rsp), %rdi
    00005168: 	cmpq	%rbx, %rdi
    0000516b: 	je	.Ltmp1435 # Offset: 20843
    00005171: 	movq	0x1c0(%rsp), %rax
    00005179: 	leaq	0x1(%rax), %rsi
    0000517d: 	callq	_ZdlPvm@PLT # Offset: 20861
    00005182: 	jmp	.Ltmp1435 # Offset: 20866
.Ltmp1488:
    00005187: 	movq	0x1b0(%rsp), %rdi
    0000518f: 	cmpq	%rbx, %rdi
    00005192: 	je	.Ltmp1435 # Offset: 20882
    00005198: 	movq	0x1c0(%rsp), %rax
    000051a0: 	leaq	0x1(%rax), %rsi
    000051a4: 	callq	_ZdlPvm@PLT # Offset: 20900
    000051a9: 	jmp	.Ltmp1435 # Offset: 20905
    000051ae: 	endbr64
    000051b2: 	movq	%rax, %rbp
    000051b5: 	movq	0x1b0(%rsp), %rdi
    000051bd: 	cmpq	%rbx, %rdi
    000051c0: 	je	.Ltmp1435 # Offset: 20928
    000051c6: 	movq	0x1c0(%rsp), %rax
    000051ce: 	leaq	0x1(%rax), %rsi
    000051d2: 	callq	_ZdlPvm@PLT # Offset: 20946
    000051d7: 	jmp	.Ltmp1435 # Offset: 20951
    000051dc: 	endbr64
    000051e0: 	movq	%rax, %rbp
    000051e3: 	jmp	.Ltmp1489 # Offset: 20963
    000051e8: 	endbr64
.Ltmp1492:
    000051ec: 	movq	%rax, %rbp
    000051ef: 	jmp	.Ltmp1490 # Offset: 20975
    000051f4: 	endbr64
    000051f8: 	movq	%rax, %rbp
    000051fb: 	jmp	.Ltmp1491 # Offset: 20987
    00005200: 	endbr64
    00005204: 	jmp	.Ltmp1492 # Offset: 20996
    00005206: 	endbr64
    0000520a: 	movq	%rax, %rbp
    0000520d: 	jmp	.Ltmp1493 # Offset: 21005
    0000520f: 	endbr64
    00005213: 	movq	%rax, %rbp
    00005216: 	jmp	.Ltmp1494 # Offset: 21014
.Ltmp1493:
    00005218: 	movq	0x1b0(%rsp), %rdi
    00005220: 	cmpq	%rbx, %rdi
    00005223: 	je	.Ltmp1435 # Offset: 21027
    00005229: 	movq	0x1c0(%rsp), %rax
    00005231: 	leaq	0x1(%rax), %rsi
    00005235: 	callq	_ZdlPvm@PLT # Offset: 21045
    0000523a: 	jmp	.Ltmp1435 # Offset: 21050
.Ltmp1494:
    0000523f: 	movq	0x1b0(%rsp), %rdi
    00005247: 	cmpq	%rbx, %rdi
    0000524a: 	je	.Ltmp1435 # Offset: 21066
    00005250: 	movq	0x1c0(%rsp), %rax
    00005258: 	leaq	0x1(%rax), %rsi
    0000525c: 	callq	_ZdlPvm@PLT # Offset: 21084
    00005261: 	jmp	.Ltmp1435 # Offset: 21089
    00005266: 	endbr64
    0000526a: 	movq	%rax, %rbp
    0000526d: 	jmp	.Ltmp1495 # Offset: 21101
    0000526f: 	endbr64
    00005273: 	movq	%rax, %rbp
    00005276: 	jmp	.Ltmp1496 # Offset: 21110
.Ltmp1495:
    00005278: 	movq	0x1b0(%rsp), %rdi
    00005280: 	cmpq	%rbx, %rdi
    00005283: 	je	.Ltmp1435 # Offset: 21123
    00005289: 	movq	0x1c0(%rsp), %rax
    00005291: 	leaq	0x1(%rax), %rsi
    00005295: 	callq	_ZdlPvm@PLT # Offset: 21141
    0000529a: 	jmp	.Ltmp1435 # Offset: 21146
.Ltmp1496:
    0000529f: 	movq	0x1b0(%rsp), %rdi
    000052a7: 	cmpq	%rbx, %rdi
    000052aa: 	je	.Ltmp1435 # Offset: 21162
    000052b0: 	movq	0x1c0(%rsp), %rax
    000052b8: 	leaq	0x1(%rax), %rsi
    000052bc: 	callq	_ZdlPvm@PLT # Offset: 21180
    000052c1: 	jmp	.Ltmp1435 # Offset: 21185
    000052c6: 	endbr64
    000052ca: 	movq	%rax, %rbp
    000052cd: 	jmp	.Ltmp1497 # Offset: 21197
    000052cf: 	endbr64
    000052d3: 	movq	%rax, %rbp
    000052d6: 	jmp	.Ltmp1498 # Offset: 21206
.Ltmp1497:
    000052d8: 	movq	0x1b0(%rsp), %rdi
    000052e0: 	cmpq	%rbx, %rdi
    000052e3: 	je	.Ltmp1435 # Offset: 21219
    000052e9: 	movq	0x1c0(%rsp), %rax
    000052f1: 	leaq	0x1(%rax), %rsi
    000052f5: 	callq	_ZdlPvm@PLT # Offset: 21237
    000052fa: 	jmp	.Ltmp1435 # Offset: 21242
.Ltmp1498:
    000052ff: 	movq	0x1b0(%rsp), %rdi
    00005307: 	cmpq	%rbx, %rdi
    0000530a: 	je	.Ltmp1435 # Offset: 21258
    00005310: 	movq	0x1c0(%rsp), %rax
    00005318: 	leaq	0x1(%rax), %rsi
    0000531c: 	callq	_ZdlPvm@PLT # Offset: 21276
    00005321: 	jmp	.Ltmp1435 # Offset: 21281
    00005326: 	endbr64
    0000532a: 	movq	%rax, %rbp
    0000532d: 	movq	0x1b0(%rsp), %rdi
    00005335: 	cmpq	%rbx, %rdi
    00005338: 	je	.Ltmp1435 # Offset: 21304
    0000533e: 	movq	0x1c0(%rsp), %rax
    00005346: 	leaq	0x1(%rax), %rsi
    0000534a: 	callq	_ZdlPvm@PLT # Offset: 21322
    0000534f: 	jmp	.Ltmp1435 # Offset: 21327
    00005354: 	endbr64
    00005358: 	movq	%rax, %rbp
    0000535b: 	jmp	.Ltmp1499 # Offset: 21339
    0000535d: 	endbr64
    00005361: 	movq	%rax, %rbp
    00005364: 	jmp	.Ltmp1500 # Offset: 21348
    00005369: 	endbr64
    0000536d: 	jmp	.Ltmp1432 # Offset: 21357
    00005372: 	endbr64
    00005376: 	movq	%rax, %rbp
    00005379: 	movq	0x1b0(%rsp), %rdi
    00005381: 	cmpq	%rbx, %rdi
    00005384: 	je	.Ltmp1435 # Offset: 21380
    0000538a: 	movq	0x1c0(%rsp), %rax
    00005392: 	leaq	0x1(%rax), %rsi
    00005396: 	callq	_ZdlPvm@PLT # Offset: 21398
    0000539b: 	jmp	.Ltmp1435 # Offset: 21403
.Ltmp1490:
    000053a0: 	movq	0x1b0(%rsp), %rdi
    000053a8: 	cmpq	%rbx, %rdi
    000053ab: 	je	.Ltmp1454 # Offset: 21419
    000053b1: 	movq	0x1c0(%rsp), %rax
    000053b9: 	leaq	0x1(%rax), %rsi
    000053bd: 	callq	_ZdlPvm@PLT # Offset: 21437
    000053c2: 	jmp	.Ltmp1454 # Offset: 21442
    000053c7: 	endbr64
    000053cb: 	movq	%rax, %rbp
    000053ce: 	jmp	.Ltmp1501 # Offset: 21454
.Ltmp1499:
    000053d0: 	movq	0x1b0(%rsp), %rdi
    000053d8: 	cmpq	%rbx, %rdi
    000053db: 	je	.Ltmp1435 # Offset: 21467
    000053e1: 	movq	0x1c0(%rsp), %rax
    000053e9: 	leaq	0x1(%rax), %rsi
    000053ed: 	callq	_ZdlPvm@PLT # Offset: 21485
    000053f2: 	jmp	.Ltmp1435 # Offset: 21490
.Ltmp1501:
    000053f7: 	movq	0x1b0(%rsp), %rdi
    000053ff: 	cmpq	%rbx, %rdi
    00005402: 	je	.Ltmp1435 # Offset: 21506
    00005408: 	movq	0x1c0(%rsp), %rax
    00005410: 	leaq	0x1(%rax), %rsi
    00005414: 	callq	_ZdlPvm@PLT # Offset: 21524
    00005419: 	jmp	.Ltmp1435 # Offset: 21529
    0000541e: 	endbr64
    00005422: 	movq	%rax, %rbp
    00005425: 	movq	0x1b0(%rsp), %rdi
    0000542d: 	cmpq	%rbx, %rdi
    00005430: 	je	.Ltmp1435 # Offset: 21552
    00005436: 	movq	0x1c0(%rsp), %rax
    0000543e: 	leaq	0x1(%rax), %rsi
    00005442: 	callq	_ZdlPvm@PLT # Offset: 21570
    00005447: 	jmp	.Ltmp1435 # Offset: 21575
    0000544c: 	endbr64
    00005450: 	jmp	.Ltmp1432 # Offset: 21584
.Ltmp1500:
    00005455: 	movq	0x1b0(%rsp), %rdi
    0000545d: 	cmpq	%rbx, %rdi
    00005460: 	je	.Ltmp1435 # Offset: 21600
    00005466: 	movq	0x1c0(%rsp), %rax
    0000546e: 	leaq	0x1(%rax), %rsi
    00005472: 	callq	_ZdlPvm@PLT # Offset: 21618
    00005477: 	jmp	.Ltmp1435 # Offset: 21623
    0000547c: 	endbr64
    00005480: 	jmp	.Ltmp1492 # Offset: 21632
    00005485: 	endbr64
    00005489: 	jmp	.Ltmp1492 # Offset: 21641
    0000548e: 	endbr64
    00005492: 	movq	%rax, %rbp
    00005495: 	jmp	.Ltmp1502 # Offset: 21653
    00005497: 	endbr64
    0000549b: 	movq	%rax, %rbp
    0000549e: 	jmp	.Ltmp1503 # Offset: 21662
.Ltmp1502:
    000054a0: 	movq	0x1b0(%rsp), %rdi
    000054a8: 	cmpq	%rbx, %rdi
    000054ab: 	je	.Ltmp1435 # Offset: 21675
    000054b1: 	movq	0x1c0(%rsp), %rax
    000054b9: 	leaq	0x1(%rax), %rsi
    000054bd: 	callq	_ZdlPvm@PLT # Offset: 21693
    000054c2: 	jmp	.Ltmp1435 # Offset: 21698
.Ltmp1503:
    000054c7: 	movq	0x1b0(%rsp), %rdi
    000054cf: 	cmpq	%rbx, %rdi
    000054d2: 	je	.Ltmp1435 # Offset: 21714
    000054d8: 	movq	0x1c0(%rsp), %rax
    000054e0: 	leaq	0x1(%rax), %rsi
    000054e4: 	callq	_ZdlPvm@PLT # Offset: 21732
    000054e9: 	jmp	.Ltmp1435 # Offset: 21737
    000054ee: 	endbr64
    000054f2: 	jmp	.Ltmp1492 # Offset: 21746
    000054f7: 	endbr64
    000054fb: 	jmp	.Ltmp1492 # Offset: 21755
    00005500: 	endbr64
    00005504: 	jmp	.Ltmp1492 # Offset: 21764
.Ltmp1489:
    00005509: 	movq	0x1b0(%rsp), %rdi
    00005511: 	cmpq	%rbx, %rdi
    00005514: 	je	.Ltmp1435 # Offset: 21780
    0000551a: 	movq	0x1c0(%rsp), %rax
    00005522: 	leaq	0x1(%rax), %rsi
    00005526: 	callq	_ZdlPvm@PLT # Offset: 21798
    0000552b: 	jmp	.Ltmp1435 # Offset: 21803
    00005530: 	endbr64
    00005534: 	jmp	.Ltmp1445 # Offset: 21812
    00005539: 	endbr64
    0000553d: 	jmp	.Ltmp1492 # Offset: 21821
    00005542: 	endbr64
    00005546: 	jmp	.Ltmp1492 # Offset: 21830
    0000554b: 	endbr64
    0000554f: 	jmp	.Ltmp1492 # Offset: 21839
.Ltmp1491:
    00005554: 	movq	0x1b0(%rsp), %rdi
    0000555c: 	cmpq	%rbx, %rdi
    0000555f: 	je	.Ltmp1435 # Offset: 21855
    00005565: 	movq	0x1c0(%rsp), %rax
    0000556d: 	leaq	0x1(%rax), %rsi
    00005571: 	callq	_ZdlPvm@PLT # Offset: 21873
    00005576: 	jmp	.Ltmp1435 # Offset: 21878
    0000557b: 	endbr64
    0000557f: 	jmp	.Ltmp1445 # Offset: 21887
    00005584: 	endbr64
    00005588: 	movq	%rax, %rbp
    0000558b: 	jmp	.Ltmp1454 # Offset: 21899
.Ltmp1468:
    00005590: 	movq	0x1b0(%rsp), %rdi
    00005598: 	cmpq	%rbx, %rdi
    0000559b: 	je	.Ltmp1435 # Offset: 21915
    000055a1: 	movq	0x1c0(%rsp), %rax
    000055a9: 	leaq	0x1(%rax), %rsi
    000055ad: 	callq	_ZdlPvm@PLT # Offset: 21933
    000055b2: 	jmp	.Ltmp1435 # Offset: 21938
DWARF CFI Instructions:
    <empty>
End of Function "_Z9TestLoopsIhEvv"

Binary Function "_fini" after disassembly {
  Number      : 276
  State       : disassembled
  Address     : 0x103c8
  Size        : 0xd
  MaxSize     : 0xd
  Offset      : 0x103c8
  Section     : .fini
  Orc Section : .local.text._fini
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0275:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	addq	$0x8, %rsp
    0000000c: 	retq # Offset: 12
DWARF CFI Instructions:
    <empty>
End of Function "_fini"

BOLT-INFO: 0 out of 277 functions in the binary (0.0%) have non-empty execution profile
BOLT-INFO: 999 instructions were shortened
BOLT-INFO: removed 297 empty blocks
BOLT-INFO: patched build-id (flipped last bit)
BOLT: 272 out of 304 functions were overwritten.
BOLT-INFO: rewriting .eh_frame_hdr in-place
BOLT-INFO: setting _end to 0x204810
