BOLT-INFO: shared object or position-independent executable detected
BOLT-INFO: Target architecture: x86_64
BOLT-INFO: BOLT version: <unknown>
BOLT-INFO: first alloc address is 0x0
BOLT-INFO: creating new program header table at address 0x200000, offset 0x200000
BOLT-INFO: enabling lite mode
BOLT-WARNING: ignoring symbol __bss_start at 0x55028, which lies outside .bss
BOLT-WARNING: split function detected on input : _GLOBAL__sub_I_results.cold
Binary Function "_init" after disassembly {
  Number      : 1
  State       : disassembled
  Address     : 0x1000
  Size        : 0x1b
  MaxSize     : 0x1b
  Offset      : 0x1000
  Section     : .init
  Orc Section : .local.text._init
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB00:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	movq	DATAat0x54ff0(%rip), %rax
    0000000f: 	testq	%rax, %rax
    00000012: 	je	.Ltmp0 # Offset: 18
    00000014: 	callq	*%rax # Offset: 20
.Ltmp0:
    00000016: 	addq	$0x8, %rsp
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_init"

Binary Function "main" after disassembly {
  Number      : 3
  State       : disassembled
  Address     : 0x13f0
  Size        : 0x12e
  MaxSize     : 0x130
  Offset      : 0x13f0
  Section     : .text
  Orc Section : .local.text.main
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB02:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	pushq	%rbp
    0000000b: 	pushq	%rbx
    0000000c: 	subq	$0x10, %rsp
    00000010: 	testl	%edi, %edi
    00000012: 	jle	.Ltmp1 # Offset: 18
    00000018: 	leal	-0x1(%rdi), %eax
    0000001b: 	movl	%edi, %r13d
    0000001e: 	movq	%rsi, %r14
    00000021: 	movq	%rsi, %rbx
    00000024: 	leaq	0x8(%rsi,%rax,8), %r12
    00000029: 	leaq	DATAat0x4d190(%rip), %rbp
.Ltmp2:
    00000030: 	movq	(%rbx), %rdx
    00000033: 	movq	%rbp, %rsi
    00000036: 	movl	$0x1, %edi
    0000003b: 	xorl	%eax, %eax
    0000003d: 	addq	$0x8, %rbx
    00000041: 	callq	__printf_chk@PLT # Offset: 65
    00000046: 	cmpq	%r12, %rbx
    00000049: 	jne	.Ltmp2 # Offset: 73
    0000004b: 	xorl	%eax, %eax
    0000004d: 	leaq	DATAat0x4d176(%rip), %rsi
    00000054: 	movl	$0x1, %edi
    00000059: 	callq	__printf_chk@PLT # Offset: 89
    0000005e: 	cmpl	$0x1, %r13d
    00000062: 	jg	.Ltmp3 # Offset: 98
.Ltmp4:
    00000064: 	movsd	DATAat0x4d638(%rip), %xmm0
.Ltmp5:
    0000006c: 	movsd	%xmm0, 0x8(%rsp)
    00000072: 	callq	_Z11TestOneTypeIaEvd # Offset: 114
    00000077: 	movsd	0x8(%rsp), %xmm0
    0000007d: 	callq	_Z11TestOneTypeIhEvd # Offset: 125
    00000082: 	movsd	0x8(%rsp), %xmm0
    00000088: 	callq	_Z11TestOneTypeIiEvd # Offset: 136
    0000008d: 	movsd	0x8(%rsp), %xmm0
    00000093: 	callq	_Z11TestOneTypeIjEvd # Offset: 147
    00000098: 	movl	iterations(%rip), %edx
    0000009e: 	movsd	0x8(%rsp), %xmm0
    000000a4: 	testl	%edx, %edx
    000000a6: 	leal	0x7(%rdx), %eax
    000000a9: 	cmovnsl	%edx, %eax
    000000ac: 	sarl	$0x3, %eax
    000000af: 	movl	%eax, iterations(%rip)
    000000b5: 	callq	_Z11TestOneTypeIfEvd # Offset: 181
    000000ba: 	addq	$0x10, %rsp
    000000be: 	xorl	%eax, %eax
    000000c0: 	popq	%rbx
    000000c1: 	popq	%rbp
    000000c2: 	popq	%r12
    000000c4: 	popq	%r13
    000000c6: 	popq	%r14
    000000c8: 	retq # Offset: 200
.Ltmp3:
    000000c9: 	movq	0x8(%r14), %rdi
    000000cd: 	movl	$0xa, %edx
    000000d2: 	xorl	%esi, %esi
    000000d4: 	callq	strtol@PLT # Offset: 212
    000000d9: 	movl	%eax, iterations(%rip)
    000000df: 	cmpl	$0x2, %r13d
    000000e3: 	jle	.Ltmp4 # Offset: 227
    000000e9: 	movq	0x10(%r14), %rdi
    000000ed: 	xorl	%esi, %esi
    000000ef: 	callq	strtod@PLT # Offset: 239
    000000f4: 	movsd	%xmm0, init_value(%rip)
    000000fc: 	cmpl	$0x3, %r13d
    00000100: 	jle	.Ltmp4 # Offset: 256
    00000106: 	movq	0x18(%r14), %rdi
    0000010a: 	xorl	%esi, %esi
    0000010c: 	callq	strtod@PLT # Offset: 268
    00000111: 	jmp	.Ltmp5 # Offset: 273
.Ltmp1:
    00000116: 	leaq	DATAat0x4d176(%rip), %rsi
    0000011d: 	movl	$0x1, %edi
    00000122: 	xorl	%eax, %eax
    00000124: 	callq	__printf_chk@PLT # Offset: 292
    00000129: 	jmp	.Ltmp4 # Offset: 297
DWARF CFI Instructions:
    <empty>
End of Function "main"

Binary Function "_start" after disassembly {
  Number      : 5
  State       : disassembled
  Address     : 0x1600
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x1600
  Section     : .text
  Orc Section : .local.text._start
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB04:
    00000000: 	endbr64
    00000004: 	xorl	%ebp, %ebp
    00000006: 	movq	%rdx, %r9
    00000009: 	popq	%rsi
    0000000a: 	movq	%rsp, %rdx
    0000000d: 	andq	$-0x10, %rsp
    00000011: 	pushq	%rax
    00000012: 	pushq	%rsp
    00000013: 	xorl	%r8d, %r8d
    00000016: 	xorl	%ecx, %ecx
    00000018: 	leaq	main(%rip), %rdi
    0000001f: 	callq	*DATAat0x54fe0(%rip) # Offset: 31
    00000025: 	hlt
DWARF CFI Instructions:
    <empty>
End of Function "_start"

Binary Function "deregister_tm_clones/1(*2)" after disassembly {
  All names   : deregister_tm_clones/1
                deregister_tm_clones/crtstuff.c/1
  Number      : 6
  State       : disassembled
  Address     : 0x1630
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x1630
  Section     : .text
  Orc Section : .local.text.deregister_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB05:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rax
    0000000e: 	cmpq	%rdi, %rax
    00000011: 	je	.Ltmp6 # Offset: 17
    00000013: 	movq	DATAat0x54fe8(%rip), %rax
    0000001a: 	testq	%rax, %rax
    0000001d: 	je	.Ltmp6 # Offset: 29
    0000001f: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 31
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp6:
    00000028: 	retq # Offset: 40
    00000029: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "deregister_tm_clones/1(*2)"

Binary Function "register_tm_clones/1(*2)" after disassembly {
  All names   : register_tm_clones/1
                register_tm_clones/crtstuff.c/1
  Number      : 7
  State       : disassembled
  Address     : 0x1660
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x1660
  Section     : .text
  Orc Section : .local.text.register_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB06:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rsi
    0000000e: 	subq	%rdi, %rsi
    00000011: 	movq	%rsi, %rax
    00000014: 	shrq	$0x3f, %rsi
    00000018: 	sarq	$0x3, %rax
    0000001c: 	addq	%rax, %rsi
    0000001f: 	sarq	%rsi
    00000022: 	je	.Ltmp7 # Offset: 34
    00000024: 	movq	DATAat0x54ff8(%rip), %rax
    0000002b: 	testq	%rax, %rax
    0000002e: 	je	.Ltmp7 # Offset: 46
    00000030: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 48
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp7:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "register_tm_clones/1(*2)"

Binary Function "__do_global_dtors_aux/1(*2)" after disassembly {
  All names   : __do_global_dtors_aux/1
                __do_global_dtors_aux/crtstuff.c/1
  Number      : 8
  State       : disassembled
  Address     : 0x16a0
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x16a0
  Section     : .text
  Orc Section : .local.text.__do_global_dtors_aux/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB07:
    00000000: 	endbr64
    00000004: 	cmpb	$0x0, "completed.0/1"(%rip)
    0000000b: 	jne	.Ltmp8 # Offset: 11
    0000000d: 	pushq	%rbp
    0000000e: 	cmpq	$0x0, __cxa_finalize@GOT(%rip)
    00000016: 	movq	%rsp, %rbp
    00000019: 	je	.Ltmp9 # Offset: 25
    0000001b: 	movq	__dso_handle(%rip), %rdi
    00000022: 	callq	__cxa_finalize@PLT # Offset: 34
.Ltmp9:
    00000027: 	callq	"deregister_tm_clones/1" # Offset: 39
    0000002c: 	movb	$0x1, "completed.0/1"(%rip)
    00000033: 	popq	%rbp
    00000034: 	retq # Offset: 52
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp8:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "__do_global_dtors_aux/1(*2)"

Binary Function "frame_dummy/1(*2)" after disassembly {
  All names   : frame_dummy/1
                frame_dummy/crtstuff.c/1
  Number      : 9
  State       : disassembled
  Address     : 0x16e0
  Size        : 0x10
  MaxSize     : 0x10
  Offset      : 0x16e0
  Section     : .text
  Orc Section : .local.text.frame_dummy/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB08:
    00000000: 	endbr64
    00000004: 	jmp	"register_tm_clones/1" # TAILCALL  # Offset: 4
    00000009: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "frame_dummy/1(*2)"

Binary Function "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1(*2)" after disassembly {
  All names   : _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1
                _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/simple_types_cse.cpp/1
  Number      : 10
  State       : disassembled
  Address     : 0x16f0
  Size        : 0xd3
  MaxSize     : 0xe0
  Offset      : 0x16f0
  Section     : .text
  Orc Section : .local.text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB09:
    00000000: 	pushq	%r13
    00000002: 	pushq	%r12
    00000004: 	leaq	0x10(%rdi), %r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	subq	$0x18, %rsp
    0000000e: 	movq	%fs:0x28, %rax
    00000017: 	movq	%rax, 0x8(%rsp)
    0000001c: 	xorl	%eax, %eax
    0000001e: 	movq	%r12, (%rdi)
    00000021: 	testq	%rsi, %rsi
    00000024: 	je	.Ltmp10 # Offset: 36
    0000002a: 	movq	%rdi, %rbx
    0000002d: 	movq	%rsi, %rdi
    00000030: 	movq	%rsi, %rbp
    00000033: 	callq	strlen@PLT # Offset: 51
    00000038: 	movq	%rax, (%rsp)
    0000003c: 	movq	%rax, %r13
    0000003f: 	cmpq	$0xf, %rax
    00000043: 	ja	.Ltmp11 # Offset: 67
    00000045: 	cmpq	$0x1, %rax
    00000049: 	jne	.Ltmp12 # Offset: 73
    0000004b: 	movzbl	(%rbp), %edx
    0000004f: 	movb	%dl, 0x10(%rbx)
.Ltmp14:
    00000052: 	movq	%rax, 0x8(%rbx)
    00000056: 	movb	$0x0, (%r12,%rax)
    0000005b: 	movq	0x8(%rsp), %rax
    00000060: 	subq	%fs:0x28, %rax
    00000069: 	jne	.Ltmp13 # Offset: 105
    0000006b: 	addq	$0x18, %rsp
    0000006f: 	popq	%rbx
    00000070: 	popq	%rbp
    00000071: 	popq	%r12
    00000073: 	popq	%r13
    00000075: 	retq # Offset: 117
    00000076: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp12:
    00000080: 	testq	%rax, %rax
    00000083: 	je	.Ltmp14 # Offset: 131
    00000085: 	jmp	.Ltmp15 # Offset: 133
    00000087: 	nopw	(%rax,%rax) # Size: 9
.Ltmp11:
    00000090: 	movq	%rsp, %rsi
    00000093: 	xorl	%edx, %edx
    00000095: 	movq	%rbx, %rdi
    00000098: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 152
    0000009d: 	movq	%rax, (%rbx)
    000000a0: 	movq	%rax, %r12
    000000a3: 	movq	(%rsp), %rax
    000000a7: 	movq	%rax, 0x10(%rbx)
.Ltmp15:
    000000ab: 	movq	%r12, %rdi
    000000ae: 	movq	%r13, %rdx
    000000b1: 	movq	%rbp, %rsi
    000000b4: 	callq	memcpy@PLT # Offset: 180
    000000b9: 	movq	(%rsp), %rax
    000000bd: 	movq	(%rbx), %r12
    000000c0: 	jmp	.Ltmp14 # Offset: 192
.Ltmp13:
    000000c2: 	callq	__stack_chk_fail@PLT # Offset: 194
.Ltmp10:
    000000c7: 	leaq	DATAat0x4d018(%rip), %rdi
    000000ce: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 206
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1(*2)"

Binary Function "_Z13record_resultdPKc" after disassembly {
  Number      : 11
  State       : disassembled
  Address     : 0x17d0
  Size        : 0xa0
  MaxSize     : 0xa0
  Offset      : 0x17d0
  Section     : .text
  Orc Section : .local.text._Z13record_resultdPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB010:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %rbx
    00000008: 	subq	$0x10, %rsp
    0000000c: 	movq	results(%rip), %rdi
    00000013: 	movl	allocated_results(%rip), %esi
    00000019: 	testq	%rdi, %rdi
    0000001c: 	je	.Ltmp16 # Offset: 28
    0000001e: 	movl	current_test(%rip), %eax
    00000024: 	cmpl	%esi, %eax
    00000026: 	jl	.Ltmp17 # Offset: 38
.Ltmp16:
    00000028: 	addl	$0xa, %esi
    0000002b: 	movsd	%xmm0, 0x8(%rsp)
    00000031: 	movl	%esi, allocated_results(%rip)
    00000037: 	movslq	%esi, %rsi
    0000003a: 	shlq	$0x4, %rsi
    0000003e: 	callq	realloc@PLT # Offset: 62
    00000043: 	movq	%rax, results(%rip)
    0000004a: 	movq	%rax, %rdi
    0000004d: 	testq	%rax, %rax
    00000050: 	je	.Ltmp18 # Offset: 80
    00000052: 	movl	current_test(%rip), %eax
    00000058: 	movsd	0x8(%rsp), %xmm0
.Ltmp17:
    0000005e: 	movslq	%eax, %rdx
    00000061: 	addl	$0x1, %eax
    00000064: 	shlq	$0x4, %rdx
    00000068: 	addq	%rdx, %rdi
    0000006b: 	movsd	%xmm0, (%rdi)
    0000006f: 	movq	%rbx, 0x8(%rdi)
    00000073: 	movl	%eax, current_test(%rip)
    00000079: 	addq	$0x10, %rsp
    0000007d: 	popq	%rbx
    0000007e: 	retq # Offset: 126
.Ltmp18:
    0000007f: 	movl	allocated_results(%rip), %edx
    00000085: 	movl	$0x1, %edi
    0000008a: 	leaq	DATAat0x4d048(%rip), %rsi
    00000091: 	xorl	%eax, %eax
    00000093: 	callq	__printf_chk@PLT # Offset: 147
    00000098: 	orl	$-0x1, %edi
    0000009b: 	callq	exit@PLT # Offset: 155
DWARF CFI Instructions:
    <empty>
End of Function "_Z13record_resultdPKc"

Binary Function "_Z9summarizePKciiii" after disassembly {
  Number      : 12
  State       : disassembled
  Address     : 0x1870
  Size        : 0x325
  MaxSize     : 0x330
  Offset      : 0x1870
  Section     : .text
  Orc Section : .local.text._Z9summarizePKciiii
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB011:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x38, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movl	%r8d, 0x2c(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp19 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	movl	%esi, %r15d
    0000002b: 	movl	%edx, %r13d
    0000002e: 	jle	.Ltmp20 # Offset: 46
    00000034: 	movq	results(%rip), %rcx
    0000003b: 	subl	$0x1, %eax
    0000003e: 	movl	$0xc, %ebx
    00000043: 	shlq	$0x4, %rax
    00000047: 	leaq	0x8(%rcx), %r14
    0000004b: 	leaq	0x18(%rcx,%rax), %rbp
.Ltmp21:
    00000050: 	movq	(%r14), %rdi
    00000053: 	callq	strlen@PLT # Offset: 83
    00000058: 	cmpl	%eax, %ebx
    0000005a: 	cmovll	%eax, %ebx
    0000005d: 	addq	$0x10, %r14
    00000061: 	cmpq	%r14, %rbp
    00000064: 	jne	.Ltmp21 # Offset: 100
    00000066: 	leal	-0xc(%rbx), %edx
.Ltmp34:
    00000069: 	leaq	DATAat0x4d192(%rip), %rbp
    00000070: 	leaq	DATAat0x4d068(%rip), %rsi
    00000077: 	movl	$0x1, %edi
    0000007c: 	xorl	%eax, %eax
    0000007e: 	movq	%rbp, %rcx
    00000081: 	callq	__printf_chk@PLT # Offset: 129
    00000086: 	movl	%ebx, %edx
    00000088: 	movq	%rbp, %rcx
    0000008b: 	movl	$0x1, %edi
    00000090: 	leaq	DATAat0x4d0a8(%rip), %rsi
    00000097: 	xorl	%eax, %eax
    00000099: 	callq	__printf_chk@PLT # Offset: 153
    0000009e: 	movl	current_test(%rip), %edx
    000000a4: 	testl	%edx, %edx
    000000a6: 	jle	.Ltmp22 # Offset: 166
    000000ac: 	pxor	%xmm0, %xmm0
    000000b0: 	pxor	%xmm1, %xmm1
    000000b4: 	xorl	%r14d, %r14d
    000000b7: 	movsd	DATAat0x4d620(%rip), %xmm3
    000000bf: 	cvtsi2sd	%r15d, %xmm0
    000000c4: 	leaq	DATAat0x4d0d8(%rip), %rbp
    000000cb: 	cvtsi2sd	%r13d, %xmm1
    000000d0: 	mulsd	%xmm1, %xmm0
    000000d4: 	divsd	DATAat0x4d640(%rip), %xmm0
    000000dc: 	movsd	%xmm0, 0x20(%rsp)
    000000e2: 	jmp	.Ltmp23 # Offset: 226
    000000e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp27:
    000000f0: 	comisd	%xmm0, %xmm3
    000000f4: 	ja	.Ltmp24 # Offset: 244
    000000fa: 	movq	DATAat0x4d630(%rip), %rdi
    00000101: 	movq	%rdi, %xmm2
.Ltmp28:
    00000106: 	comisd	%xmm0, %xmm3
    0000010a: 	movq	DATAat0x4d630(%rip), %rsi
    00000111: 	movq	%rsi, %xmm1
    00000116: 	ja	.Ltmp25 # Offset: 278
    00000118: 	movsd	0x20(%rsp), %xmm1
    0000011e: 	divsd	%xmm0, %xmm1
.Ltmp25:
    00000122: 	movq	0x8(%rax), %r15
    00000126: 	movsd	%xmm0, 0x18(%rsp)
    0000012c: 	addq	$0x1, %r14
    00000130: 	movsd	%xmm1, 0x10(%rsp)
    00000136: 	movq	%r15, %rdi
    00000139: 	movsd	%xmm2, 0x8(%rsp)
    0000013f: 	callq	strlen@PLT # Offset: 319
    00000144: 	movsd	0x8(%rsp), %xmm2
    0000014a: 	movl	%ebx, %ecx
    0000014c: 	movq	%r15, %r9
    0000014f: 	movsd	0x10(%rsp), %xmm1
    00000155: 	subl	%eax, %ecx
    00000157: 	movl	$0x1, %edi
    0000015c: 	movl	%r13d, %edx
    0000015f: 	movsd	0x18(%rsp), %xmm0
    00000165: 	leaq	DATAat0x4d177(%rip), %r8
    0000016c: 	movq	%rbp, %rsi
    0000016f: 	movl	$0x3, %eax
    00000174: 	callq	__printf_chk@PLT # Offset: 372
    00000179: 	movl	current_test(%rip), %eax
    0000017f: 	movq	DATAat0x4d620(%rip), %rdi
    00000186: 	cmpl	%r14d, %eax
    00000189: 	movq	%rdi, %xmm3
    0000018e: 	jle	.Ltmp26 # Offset: 398
.Ltmp23:
    00000190: 	movq	results(%rip), %rax
    00000197: 	movq	%r14, %rcx
    0000019a: 	movl	%r14d, %r13d
    0000019d: 	shlq	$0x4, %rcx
    000001a1: 	movsd	(%rax), %xmm1
    000001a5: 	addq	%rcx, %rax
    000001a8: 	movsd	(%rax), %xmm0
    000001ac: 	comisd	%xmm1, %xmm3
    000001b0: 	ja	.Ltmp27 # Offset: 432
    000001b6: 	movapd	%xmm0, %xmm2
    000001ba: 	divsd	%xmm1, %xmm2
    000001be: 	jmp	.Ltmp28 # Offset: 446
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp24:
    000001c8: 	movq	DATAat0x4d638(%rip), %rsi
    000001cf: 	movq	DATAat0x4d630(%rip), %rdx
    000001d6: 	movq	%rsi, %xmm2
    000001db: 	movq	%rdx, %xmm1
    000001e0: 	jmp	.Ltmp25 # Offset: 480
    000001e5: 	nopl	(%rax) # Size: 3
.Ltmp26:
    000001e8: 	testl	%eax, %eax
    000001ea: 	jle	.Ltmp22 # Offset: 490
    000001f0: 	movq	results(%rip), %rdx
    000001f7: 	leal	-0x1(%rax), %ecx
    000001fa: 	pxor	%xmm1, %xmm1
    000001fe: 	shlq	$0x4, %rcx
    00000202: 	movapd	%xmm1, %xmm0
    00000206: 	leaq	0x10(%rdx), %rax
    0000020a: 	addq	%rax, %rcx
    0000020d: 	jmp	.Ltmp29 # Offset: 525
    0000020f: 	nop # Size: 1
.Ltmp30:
    00000210: 	addq	$0x10, %rax
.Ltmp29:
    00000214: 	addsd	(%rdx), %xmm0
    00000218: 	movq	%rax, %rdx
    0000021b: 	cmpq	%rax, %rcx
    0000021e: 	jne	.Ltmp30 # Offset: 542
.Ltmp35:
    00000220: 	movq	%r12, %rdx
    00000223: 	movl	$0x1, %edi
    00000228: 	movl	$0x1, %eax
    0000022d: 	movsd	%xmm1, 0x8(%rsp)
    00000233: 	leaq	DATAat0x4d108(%rip), %rsi
    0000023a: 	callq	__printf_chk@PLT # Offset: 570
    0000023f: 	movl	0x2c(%rsp), %eax
    00000243: 	movl	current_test(%rip), %ebp
    00000249: 	testl	%eax, %eax
    0000024b: 	je	.Ltmp31 # Offset: 587
    0000024d: 	cmpl	$0x1, %ebp
    00000250: 	jg	.Ltmp32 # Offset: 592
.Ltmp31:
    00000252: 	movl	$0x0, current_test(%rip)
.Ltmp19:
    0000025c: 	addq	$0x38, %rsp
    00000260: 	popq	%rbx
    00000261: 	popq	%rbp
    00000262: 	popq	%r12
    00000264: 	popq	%r13
    00000266: 	popq	%r14
    00000268: 	popq	%r15
    0000026a: 	retq # Offset: 618
    0000026b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp32:
    00000270: 	movq	results(%rip), %rbx
    00000277: 	movsd	0x8(%rsp), %xmm1
    0000027d: 	movl	$0x1, %r13d
    00000283: 	movsd	(%rbx), %xmm5
    00000287: 	addq	$0x10, %rbx
    0000028b: 	movsd	%xmm5, 0x10(%rsp)
    00000291: 	nopl	(%rax) # Size: 7
.Ltmp33:
    00000298: 	movsd	(%rbx), %xmm0
    0000029c: 	movsd	%xmm1, 0x8(%rsp)
    000002a2: 	addl	$0x1, %r13d
    000002a6: 	addq	$0x10, %rbx
    000002aa: 	divsd	0x10(%rsp), %xmm0
    000002b0: 	callq	log@PLT # Offset: 688
    000002b5: 	movsd	0x8(%rsp), %xmm1
    000002bb: 	addsd	%xmm0, %xmm1
    000002bf: 	cmpl	%r13d, %ebp
    000002c2: 	jg	.Ltmp33 # Offset: 706
    000002c4: 	subl	$0x1, %ebp
    000002c7: 	pxor	%xmm0, %xmm0
    000002cb: 	cvtsi2sd	%ebp, %xmm0
    000002cf: 	divsd	%xmm0, %xmm1
    000002d3: 	movapd	%xmm1, %xmm0
    000002d7: 	callq	exp@PLT # Offset: 727
    000002dc: 	movq	%r12, %rdx
    000002df: 	movl	$0x1, %edi
    000002e4: 	leaq	DATAat0x4d152(%rip), %rsi
    000002eb: 	movl	$0x1, %eax
    000002f0: 	callq	__printf_chk@PLT # Offset: 752
    000002f5: 	movl	$0x0, current_test(%rip)
    000002ff: 	jmp	.Ltmp19 # Offset: 767
    00000304: 	nopl	(%rax) # Size: 4
.Ltmp20:
    00000308: 	xorl	%edx, %edx
    0000030a: 	movl	$0xc, %ebx
    0000030f: 	jmp	.Ltmp34 # Offset: 783
    00000314: 	nopl	(%rax) # Size: 4
.Ltmp22:
    00000318: 	pxor	%xmm1, %xmm1
    0000031c: 	movapd	%xmm1, %xmm0
    00000320: 	jmp	.Ltmp35 # Offset: 800
DWARF CFI Instructions:
    <empty>
End of Function "_Z9summarizePKciiii"

Binary Function "_Z17summarize_simplefP8_IO_FILEPKc" after disassembly {
  Number      : 13
  State       : disassembled
  Address     : 0x1ba0
  Size        : 0x1a6
  MaxSize     : 0x1b0
  Offset      : 0x1ba0
  Section     : .text
  Orc Section : .local.text._Z17summarize_simplefP8_IO_FILEPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB012:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x18, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movq	%rsi, 0x8(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp36 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	jle	.Ltmp37 # Offset: 40
    0000002e: 	movq	results(%rip), %rdx
    00000035: 	subl	$0x1, %eax
    00000038: 	movl	$0xc, %ebp
    0000003d: 	shlq	$0x4, %rax
    00000041: 	leaq	0x8(%rdx), %r13
    00000045: 	leaq	0x18(%rdx,%rax), %rbx
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp38:
    00000050: 	movq	(%r13), %rdi
    00000054: 	callq	strlen@PLT # Offset: 84
    00000059: 	cmpl	%eax, %ebp
    0000005b: 	cmovll	%eax, %ebp
    0000005e: 	addq	$0x10, %r13
    00000062: 	cmpq	%r13, %rbx
    00000065: 	jne	.Ltmp38 # Offset: 101
    00000067: 	leal	-0xc(%rbp), %ecx
.Ltmp43:
    0000006a: 	leaq	DATAat0x4d192(%rip), %r8
    00000071: 	movl	$0x1, %esi
    00000076: 	xorl	%eax, %eax
    00000078: 	xorl	%ebx, %ebx
    0000007a: 	leaq	DATAat0x4d130(%rip), %rdx
    00000081: 	movq	%r12, %rdi
    00000084: 	leaq	DATAat0x4d178(%rip), %r14
    0000008b: 	callq	__fprintf_chk@PLT # Offset: 139
    00000090: 	movl	$0x1, %esi
    00000095: 	movl	%ebp, %ecx
    00000097: 	movq	%r12, %rdi
    0000009a: 	leaq	DATAat0x4d192(%rip), %r8
    000000a1: 	leaq	DATAat0x4d166(%rip), %rdx
    000000a8: 	xorl	%eax, %eax
    000000aa: 	callq	__fprintf_chk@PLT # Offset: 170
    000000af: 	movl	current_test(%rip), %esi
    000000b5: 	testl	%esi, %esi
    000000b7: 	jle	.Ltmp39 # Offset: 183
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp40:
    000000c0: 	movq	%rbx, %rdx
    000000c3: 	shlq	$0x4, %rdx
    000000c7: 	addq	results(%rip), %rdx
    000000ce: 	movq	0x8(%rdx), %r13
    000000d2: 	movq	%rdx, %r15
    000000d5: 	movq	%r13, %rdi
    000000d8: 	callq	strlen@PLT # Offset: 216
    000000dd: 	subq	$0x8, %rsp
    000000e1: 	movsd	(%r15), %xmm0
    000000e6: 	movl	%ebx, %ecx
    000000e8: 	pushq	%r13
    000000ea: 	movl	%ebp, %r8d
    000000ed: 	movq	%r14, %rdx
    000000f0: 	leaq	DATAat0x4d177(%rip), %r9
    000000f7: 	subl	%eax, %r8d
    000000fa: 	movl	$0x1, %esi
    000000ff: 	movq	%r12, %rdi
    00000102: 	movl	$0x1, %eax
    00000107: 	addq	$0x1, %rbx
    0000010b: 	callq	__fprintf_chk@PLT # Offset: 267
    00000110: 	movl	current_test(%rip), %eax
    00000116: 	popq	%rdx
    00000117: 	popq	%rcx
    00000118: 	cmpl	%ebx, %eax
    0000011a: 	jg	.Ltmp40 # Offset: 282
    0000011c: 	testl	%eax, %eax
    0000011e: 	jle	.Ltmp39 # Offset: 286
    00000124: 	movq	results(%rip), %rdx
    0000012b: 	leal	-0x1(%rax), %ecx
    0000012e: 	pxor	%xmm0, %xmm0
    00000132: 	shlq	$0x4, %rcx
    00000136: 	leaq	0x10(%rdx), %rax
    0000013a: 	addq	%rax, %rcx
    0000013d: 	jmp	.Ltmp41 # Offset: 317
    0000013f: 	nop # Size: 1
.Ltmp42:
    00000140: 	addq	$0x10, %rax
.Ltmp41:
    00000144: 	addsd	(%rdx), %xmm0
    00000148: 	movq	%rax, %rdx
    0000014b: 	cmpq	%rax, %rcx
    0000014e: 	jne	.Ltmp42 # Offset: 334
.Ltmp44:
    00000150: 	movq	0x8(%rsp), %rcx
    00000155: 	movl	$0x1, %esi
    0000015a: 	movq	%r12, %rdi
    0000015d: 	movl	$0x1, %eax
    00000162: 	leaq	DATAat0x4d108(%rip), %rdx
    00000169: 	callq	__fprintf_chk@PLT # Offset: 361
    0000016e: 	movl	$0x0, current_test(%rip)
.Ltmp36:
    00000178: 	addq	$0x18, %rsp
    0000017c: 	popq	%rbx
    0000017d: 	popq	%rbp
    0000017e: 	popq	%r12
    00000180: 	popq	%r13
    00000182: 	popq	%r14
    00000184: 	popq	%r15
    00000186: 	retq # Offset: 390
    00000187: 	nopw	(%rax,%rax) # Size: 9
.Ltmp37:
    00000190: 	xorl	%ecx, %ecx
    00000192: 	movl	$0xc, %ebp
    00000197: 	jmp	.Ltmp43 # Offset: 407
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp39:
    000001a0: 	pxor	%xmm0, %xmm0
    000001a4: 	jmp	.Ltmp44 # Offset: 420
DWARF CFI Instructions:
    <empty>
End of Function "_Z17summarize_simplefP8_IO_FILEPKc"

Binary Function "_Z11start_timerv" after disassembly {
  Number      : 14
  State       : disassembled
  Address     : 0x1d50
  Size        : 0x19
  MaxSize     : 0x20
  Offset      : 0x1d50
  Section     : .text
  Orc Section : .local.text._Z11start_timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB013:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	movq	%rax, start_time(%rip)
    00000014: 	addq	$0x8, %rsp
    00000018: 	retq # Offset: 24
DWARF CFI Instructions:
    <empty>
End of Function "_Z11start_timerv"

Binary Function "_Z5timerv" after disassembly {
  Number      : 15
  State       : disassembled
  Address     : 0x1d70
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x1d70
  Section     : .text
  Orc Section : .local.text._Z5timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB014:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	pxor	%xmm0, %xmm0
    00000011: 	movq	%rax, end_time(%rip)
    00000018: 	subq	start_time(%rip), %rax
    0000001f: 	cvtsi2sd	%rax, %xmm0
    00000024: 	divsd	DATAat0x4d640(%rip), %xmm0
    0000002c: 	addq	$0x8, %rsp
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z5timerv"

Binary Function "_ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 16
  State       : disassembled
  Address     : 0x1db0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x1db0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB015:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f38, %edx
    00000017: 	movl	$0x746e6975, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 17
  State       : disassembled
  Address     : 0x1de0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x1de0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB016:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3631746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 18
  State       : disassembled
  Address     : 0x1e10
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x1e10
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB017:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3233746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 19
  State       : disassembled
  Address     : 0x1e40
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x1e40
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB018:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3436746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 20
  State       : disassembled
  Address     : 0x1e70
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x1e70
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB019:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x38746e69, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x745f, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 21
  State       : disassembled
  Address     : 0x1ea0
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x1ea0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB020:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x38746e69, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x745f, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 22
  State       : disassembled
  Address     : 0x1ed0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x1ed0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB021:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f36, %edx
    00000017: 	movl	$0x31746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 23
  State       : disassembled
  Address     : 0x1f00
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x1f00
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB022:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f32, %edx
    00000017: 	movl	$0x33746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 24
  State       : disassembled
  Address     : 0x1f30
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x1f30
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB023:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f34, %edx
    00000017: 	movl	$0x36746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 25
  State       : disassembled
  Address     : 0x1f60
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x1f60
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB024:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x14(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x616f6c66, 0x10(%rdi)
    00000019: 	movq	$0x5, 0x8(%rdi)
    00000021: 	movb	$0x0, 0x15(%rdi)
    00000025: 	retq # Offset: 37
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 26
  State       : disassembled
  Address     : 0x1f90
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x1f90
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB025:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x62756f64, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x656c, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 27
  State       : disassembled
  Address     : 0x1fc0
  Size        : 0x36
  MaxSize     : 0x40
  Offset      : 0x1fc0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB026:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x65, 0x1a(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x756f6420676e6f6c, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movl	$0x6c62, %edx
    00000021: 	movq	%rcx, 0x10(%rdi)
    00000025: 	movw	%dx, 0x18(%rdi)
    00000029: 	movq	$0xb, 0x8(%rdi)
    00000031: 	movb	$0x0, 0x1b(%rdi)
    00000035: 	retq # Offset: 53
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 28
  State       : disassembled
  Address     : 0x2000
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x2000
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB027:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f38746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 29
  State       : disassembled
  Address     : 0x2030
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x2030
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB028:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3631746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 30
  State       : disassembled
  Address     : 0x2060
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x2060
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB029:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3233746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 31
  State       : disassembled
  Address     : 0x2090
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x2090
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB030:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3436746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 32
  State       : disassembled
  Address     : 0x20c0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x20c0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB031:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x745f, %edx
    00000017: 	movl	$0x38746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 33
  State       : disassembled
  Address     : 0x20f0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x20f0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB032:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3631746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 34
  State       : disassembled
  Address     : 0x2120
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x2120
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB033:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3233746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 35
  State       : disassembled
  Address     : 0x2150
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x2150
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB034:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3436746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 36
  State       : disassembled
  Address     : 0x2180
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x2180
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB035:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x616f6c66, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x2a74, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 37
  State       : disassembled
  Address     : 0x21b0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x21b0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB036:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x656c, %edx
    00000017: 	movl	$0x62756f64, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 38
  State       : disassembled
  Address     : 0x21e0
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x21e0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB037:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x0, 0x1c(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x756f6420676e6f6c, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movl	$0x2a656c62, 0x18(%rdi)
    00000027: 	movq	$0xc, 0x8(%rdi)
    0000002f: 	retq # Offset: 47
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_Z30check_shifted_variable_sum_CSEIf14custom_cse_addIfEEvT_S2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z30check_shifted_variable_sum_CSEIf14custom_cse_addIfEEvT_S2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z30check_shifted_variable_sum_CSEIf14custom_cse_addIfEEvT_S2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/simple_types_cse.cpp/1
  Number      : 39
  State       : disassembled
  Address     : 0x2210
  Size        : 0x56
  MaxSize     : 0x60
  Offset      : 0x2210
  Section     : .text
  Orc Section : .local.text._Z30check_shifted_variable_sum_CSEIf14custom_cse_addIfEEvT_S2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB038:
    00000000: 	movaps	%xmm0, %xmm1
    00000003: 	andps	DATAat0x4d5d0(%rip), %xmm1
    0000000a: 	cvtss2sd	%xmm1, %xmm1
    0000000e: 	comisd	DATAat0x4d620(%rip), %xmm1
    00000016: 	jbe	.Ltmp45 # Offset: 22
    00000018: 	divss	%xmm0, %xmm0
.Ltmp45:
    0000001c: 	movsd	DATAat0x4d628(%rip), %xmm1
    00000024: 	cvtss2sd	%xmm0, %xmm0
    00000028: 	andpd	DATAat0x4d5e0(%rip), %xmm0
    00000030: 	comisd	%xmm0, %xmm1
    00000034: 	jbe	.Ltmp46 # Offset: 52
    00000036: 	retq # Offset: 54
    00000037: 	nopw	(%rax,%rax) # Size: 9
.Ltmp46:
    00000040: 	movq	(%rdi), %rdx
    00000043: 	leaq	DATAat0x4d004(%rip), %rsi
    0000004a: 	movl	$0x1, %edi
    0000004f: 	xorl	%eax, %eax
    00000051: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 81
DWARF CFI Instructions:
    <empty>
End of Function "_Z30check_shifted_variable_sum_CSEIf14custom_cse_addIfEEvT_S2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev(*2)" after disassembly {
  All names   : _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
                _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev
  Number      : 40
  State       : disassembled
  Address     : 0x2270
  Size        : 0x1f7
  MaxSize     : 0x200
  Offset      : 0x2270
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB039:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x28, %rsp
    00000015: 	movq	0x20(%rdi), %rcx
    00000019: 	movq	0x30(%rdi), %rax
    0000001d: 	movq	0x38(%rdi), %r13
    00000021: 	movq	0x10(%rdi), %rbp
    00000025: 	movq	%rcx, 0x10(%rsp)
    0000002a: 	movq	0x28(%rdi), %rcx
    0000002e: 	movq	%rax, 0x8(%rsp)
    00000033: 	movq	0x48(%rdi), %rax
    00000037: 	leaq	0x8(%rcx), %r12
    0000003b: 	movq	%rcx, 0x18(%rsp)
    00000040: 	movq	%rax, (%rsp)
    00000044: 	cmpq	%r12, %rax
    00000047: 	jbe	.Ltmp47 # Offset: 71
    00000049: 	nopl	(%rax) # Size: 7
.Ltmp50:
    00000050: 	movq	(%r12), %r15
    00000054: 	leaq	0x200(%r15), %rbx
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp49:
    00000060: 	movq	(%r15), %rdi
    00000063: 	leaq	0x10(%r15), %rdx
    00000067: 	cmpq	%rdx, %rdi
    0000006a: 	je	.Ltmp48 # Offset: 106
    00000070: 	movq	0x10(%r15), %rax
    00000074: 	addq	$0x20, %r15
    00000078: 	leaq	0x1(%rax), %rsi
    0000007c: 	callq	_ZdlPvm@PLT # Offset: 124
    00000081: 	cmpq	%r15, %rbx
    00000084: 	jne	.Ltmp49 # Offset: 132
    00000086: 	addq	$0x8, %r12
    0000008a: 	cmpq	%r12, (%rsp)
    0000008e: 	ja	.Ltmp50 # Offset: 142
.Ltmp47:
    00000090: 	movq	(%rsp), %rcx
    00000094: 	cmpq	%rcx, 0x18(%rsp)
    00000099: 	je	.Ltmp51 # Offset: 153
    0000009f: 	cmpq	0x10(%rsp), %rbp
    000000a4: 	je	.Ltmp52 # Offset: 164
.Ltmp55:
    000000a6: 	movq	(%rbp), %rdi
    000000aa: 	leaq	0x10(%rbp), %rax
    000000ae: 	cmpq	%rax, %rdi
    000000b1: 	je	.Ltmp53 # Offset: 177
.Ltmp54:
    000000b3: 	movq	0x10(%rbp), %rax
    000000b7: 	addq	$0x20, %rbp
    000000bb: 	leaq	0x1(%rax), %rsi
    000000bf: 	callq	_ZdlPvm@PLT # Offset: 191
    000000c4: 	cmpq	%rbp, 0x10(%rsp)
    000000c9: 	je	.Ltmp52 # Offset: 201
    000000cb: 	movq	(%rbp), %rdi
    000000cf: 	leaq	0x10(%rbp), %rax
    000000d3: 	cmpq	%rax, %rdi
    000000d6: 	jne	.Ltmp54 # Offset: 214
.Ltmp53:
    000000d8: 	addq	$0x20, %rbp
    000000dc: 	cmpq	%rbp, 0x10(%rsp)
    000000e1: 	jne	.Ltmp55 # Offset: 225
    000000e3: 	cmpq	%r13, 0x8(%rsp)
    000000e8: 	je	.Ltmp56 # Offset: 232
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp58:
    000000f0: 	movq	(%r13), %rdi
    000000f4: 	leaq	0x10(%r13), %rax
    000000f8: 	cmpq	%rax, %rdi
    000000fb: 	je	.Ltmp57 # Offset: 251
    000000fd: 	movq	0x10(%r13), %rax
    00000101: 	leaq	0x1(%rax), %rsi
    00000105: 	callq	_ZdlPvm@PLT # Offset: 261
.Ltmp57:
    0000010a: 	addq	$0x20, %r13
.Ltmp52:
    0000010e: 	cmpq	%r13, 0x8(%rsp)
    00000113: 	jne	.Ltmp58 # Offset: 275
.Ltmp56:
    00000115: 	movq	(%r14), %rdi
    00000118: 	testq	%rdi, %rdi
    0000011b: 	je	.Ltmp59 # Offset: 283
.Ltmp65:
    00000121: 	movq	0x48(%r14), %rax
    00000125: 	movq	0x28(%r14), %rbx
    00000129: 	leaq	0x8(%rax), %rbp
    0000012d: 	cmpq	%rbx, %rbp
    00000130: 	jbe	.Ltmp60 # Offset: 304
    00000132: 	nopw	(%rax,%rax) # Size: 6
.Ltmp61:
    00000138: 	movq	(%rbx), %rdi
    0000013b: 	movl	$0x200, %esi
    00000140: 	addq	$0x8, %rbx
    00000144: 	callq	_ZdlPvm@PLT # Offset: 324
    00000149: 	cmpq	%rbx, %rbp
    0000014c: 	ja	.Ltmp61 # Offset: 332
    0000014e: 	movq	(%r14), %rdi
.Ltmp60:
    00000151: 	movq	0x8(%r14), %rsi
    00000155: 	addq	$0x28, %rsp
    00000159: 	popq	%rbx
    0000015a: 	popq	%rbp
    0000015b: 	shlq	$0x3, %rsi
    0000015f: 	popq	%r12
    00000161: 	popq	%r13
    00000163: 	popq	%r14
    00000165: 	popq	%r15
    00000167: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 359
    0000016c: 	nopl	(%rax) # Size: 4
.Ltmp48:
    00000170: 	addq	$0x20, %r15
    00000174: 	cmpq	%r15, %rbx
    00000177: 	jne	.Ltmp49 # Offset: 375
    0000017d: 	addq	$0x8, %r12
    00000181: 	cmpq	%r12, (%rsp)
    00000185: 	ja	.Ltmp50 # Offset: 389
    0000018b: 	jmp	.Ltmp47 # Offset: 395
.Ltmp51:
    00000190: 	cmpq	0x8(%rsp), %rbp
    00000195: 	je	.Ltmp56 # Offset: 405
.Ltmp64:
    0000019b: 	movq	(%rbp), %rdi
    0000019f: 	leaq	0x10(%rbp), %rax
    000001a3: 	cmpq	%rax, %rdi
    000001a6: 	je	.Ltmp62 # Offset: 422
.Ltmp63:
    000001a8: 	movq	0x10(%rbp), %rax
    000001ac: 	addq	$0x20, %rbp
    000001b0: 	leaq	0x1(%rax), %rsi
    000001b4: 	callq	_ZdlPvm@PLT # Offset: 436
    000001b9: 	cmpq	%rbp, 0x8(%rsp)
    000001be: 	je	.Ltmp56 # Offset: 446
    000001c4: 	movq	(%rbp), %rdi
    000001c8: 	leaq	0x10(%rbp), %rax
    000001cc: 	cmpq	%rax, %rdi
    000001cf: 	jne	.Ltmp63 # Offset: 463
.Ltmp62:
    000001d1: 	addq	$0x20, %rbp
    000001d5: 	cmpq	%rbp, 0x8(%rsp)
    000001da: 	jne	.Ltmp64 # Offset: 474
    000001dc: 	movq	(%r14), %rdi
    000001df: 	testq	%rdi, %rdi
    000001e2: 	jne	.Ltmp65 # Offset: 482
.Ltmp59:
    000001e8: 	addq	$0x28, %rsp
    000001ec: 	popq	%rbx
    000001ed: 	popq	%rbp
    000001ee: 	popq	%r12
    000001f0: 	popq	%r13
    000001f2: 	popq	%r14
    000001f4: 	popq	%r15
    000001f6: 	retq # Offset: 502
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev(*2)"

Binary Function "_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_" after disassembly {
  Number      : 41
  State       : disassembled
  Address     : 0x2470
  Size        : 0x145
  MaxSize     : 0x150
  Offset      : 0x2470
  Section     : .text
  Orc Section : .local.text._ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB040:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	movq	%rdi, %r12
    0000000d: 	pushq	%rbp
    0000000e: 	movq	%rdx, %rbp
    00000011: 	pushq	%rbx
    00000012: 	leaq	0x10(%rdi), %rbx
    00000016: 	subq	$0x10, %rsp
    0000001a: 	movq	0x8(%rsi), %r13
    0000001e: 	movq	%fs:0x28, %rax
    00000027: 	movq	%rax, 0x8(%rsp)
    0000002c: 	xorl	%eax, %eax
    0000002e: 	movq	%rbx, (%rdi)
    00000031: 	movq	(%rsi), %r14
    00000034: 	movq	%r14, %rax
    00000037: 	addq	%r13, %rax
    0000003a: 	je	.Ltmp66 # Offset: 58
    0000003c: 	testq	%r14, %r14
    0000003f: 	je	.Ltmp67 # Offset: 63
.Ltmp66:
    00000045: 	movq	%r13, (%rsp)
    00000049: 	cmpq	$0xf, %r13
    0000004d: 	ja	.Ltmp68 # Offset: 77
    0000004f: 	cmpq	$0x1, %r13
    00000053: 	jne	.Ltmp69 # Offset: 83
    00000055: 	movzbl	(%r14), %eax
    00000059: 	movb	%al, 0x10(%r12)
    0000005e: 	movq	%rbx, %rax
.Ltmp73:
    00000061: 	movq	%r13, 0x8(%r12)
    00000066: 	movq	%rbp, %rdi
    00000069: 	movb	$0x0, (%rax,%r13)
    0000006e: 	callq	strlen@PLT # Offset: 110
    00000073: 	movq	%rax, %rdx
    00000076: 	movabsq	$0x3fffffffffffffff, %rax
    00000080: 	subq	0x8(%r12), %rax
    00000085: 	cmpq	%rax, %rdx
    00000088: 	ja	.Ltmp70 # Offset: 136
    0000008a: 	movq	%rbp, %rsi
    0000008d: 	movq	%r12, %rdi
    00000090: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 144
    00000095: 	movq	0x8(%rsp), %rax
    0000009a: 	subq	%fs:0x28, %rax
    000000a3: 	jne	.Ltmp71 # Offset: 163
    000000a5: 	addq	$0x10, %rsp
    000000a9: 	movq	%r12, %rax
    000000ac: 	popq	%rbx
    000000ad: 	popq	%rbp
    000000ae: 	popq	%r12
    000000b0: 	popq	%r13
    000000b2: 	popq	%r14
    000000b4: 	retq # Offset: 180
    000000b5: 	nopl	(%rax) # Size: 3
.Ltmp69:
    000000b8: 	testq	%r13, %r13
    000000bb: 	jne	.Ltmp72 # Offset: 187
    000000bd: 	movq	%rbx, %rax
    000000c0: 	jmp	.Ltmp73 # Offset: 192
    000000c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp68:
    000000c8: 	movq	%r12, %rdi
    000000cb: 	movq	%rsp, %rsi
    000000ce: 	xorl	%edx, %edx
    000000d0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 208
    000000d5: 	movq	%rax, (%r12)
    000000d9: 	movq	%rax, %rdi
    000000dc: 	movq	(%rsp), %rax
    000000e0: 	movq	%rax, 0x10(%r12)
.Ltmp74:
    000000e5: 	movq	%r13, %rdx
    000000e8: 	movq	%r14, %rsi
    000000eb: 	callq	memcpy@PLT # Offset: 235
    000000f0: 	movq	(%rsp), %r13
    000000f4: 	movq	(%r12), %rax
    000000f8: 	jmp	.Ltmp73 # Offset: 248
.Ltmp67:
    000000fd: 	leaq	DATAat0x4d018(%rip), %rdi
    00000104: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 260
.Ltmp70:
    00000109: 	leaq	DATAat0x4d194(%rip), %rdi
    00000110: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 272
.Ltmp71:
    00000115: 	callq	__stack_chk_fail@PLT # Offset: 277
.Ltmp72:
    0000011a: 	movq	%rbx, %rdi
    0000011d: 	jmp	.Ltmp74 # Offset: 285
    0000011f: 	endbr64
    00000123: 	movq	%rax, %rbp
    00000126: 	movq	(%r12), %rdi
    0000012a: 	cmpq	%rdi, %rbx
    0000012d: 	je	.Ltmp75 # Offset: 301
    0000012f: 	movq	0x10(%r12), %rsi
    00000134: 	addq	$0x1, %rsi
    00000138: 	callq	_ZdlPvm@PLT # Offset: 312
.Ltmp75:
    0000013d: 	movq	%rbp, %rdi
    00000140: 	callq	_Unwind_Resume@PLT # Offset: 320
DWARF CFI Instructions:
    <empty>
End of Function "_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E" after disassembly {
  Number      : 42
  State       : disassembled
  Address     : 0x25c0
  Size        : 0x21d
  MaxSize     : 0x220
  Offset      : 0x25c0
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB041:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x38, %rsp
    00000015: 	movq	0x30(%rdi), %rcx
    00000019: 	movq	0x48(%rdi), %rax
    0000001d: 	movq	0x38(%rdi), %r13
    00000021: 	movq	(%rsi), %rbp
    00000024: 	movq	%rdi, 0x20(%rsp)
    00000029: 	movq	%rcx, 0x10(%rsp)
    0000002e: 	movq	0x10(%rsi), %rcx
    00000032: 	movq	%rax, (%rsp)
    00000036: 	movq	%rcx, 0x18(%rsp)
    0000003b: 	movq	0x18(%rsi), %rcx
    0000003f: 	leaq	0x8(%rcx), %r12
    00000043: 	movq	%rcx, 0x28(%rsp)
    00000048: 	cmpq	%r12, %rax
    0000004b: 	jbe	.Ltmp76 # Offset: 75
    0000004d: 	nopl	(%rax) # Size: 3
.Ltmp79:
    00000050: 	movq	(%r12), %r14
    00000054: 	leaq	0x200(%r14), %rbx
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp78:
    00000060: 	movq	(%r14), %rdi
    00000063: 	leaq	0x10(%r14), %rdx
    00000067: 	cmpq	%rdx, %rdi
    0000006a: 	je	.Ltmp77 # Offset: 106
    00000070: 	movq	0x10(%r14), %rax
    00000074: 	addq	$0x20, %r14
    00000078: 	leaq	0x1(%rax), %rsi
    0000007c: 	callq	_ZdlPvm@PLT # Offset: 124
    00000081: 	cmpq	%rbx, %r14
    00000084: 	jne	.Ltmp78 # Offset: 132
    00000086: 	addq	$0x8, %r12
    0000008a: 	cmpq	%r12, (%rsp)
    0000008e: 	ja	.Ltmp79 # Offset: 142
.Ltmp76:
    00000090: 	movq	(%rsp), %rcx
    00000094: 	cmpq	%rcx, 0x28(%rsp)
    00000099: 	je	.Ltmp80 # Offset: 153
    0000009f: 	cmpq	0x18(%rsp), %rbp
    000000a4: 	je	.Ltmp81 # Offset: 164
    000000a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp83:
    000000b0: 	movq	(%rbp), %rdi
    000000b4: 	leaq	0x10(%rbp), %rax
    000000b8: 	cmpq	%rax, %rdi
    000000bb: 	je	.Ltmp82 # Offset: 187
    000000c1: 	movq	0x10(%rbp), %rax
    000000c5: 	addq	$0x20, %rbp
    000000c9: 	leaq	0x1(%rax), %rsi
    000000cd: 	callq	_ZdlPvm@PLT # Offset: 205
    000000d2: 	cmpq	%rbp, 0x18(%rsp)
    000000d7: 	jne	.Ltmp83 # Offset: 215
.Ltmp81:
    000000d9: 	cmpq	%r13, 0x10(%rsp)
    000000de: 	je	.Ltmp84 # Offset: 222
.Ltmp86:
    000000e0: 	movq	(%r13), %rdi
    000000e4: 	leaq	0x10(%r13), %rax
    000000e8: 	cmpq	%rax, %rdi
    000000eb: 	je	.Ltmp85 # Offset: 235
    000000f1: 	movq	0x10(%r13), %rax
    000000f5: 	addq	$0x20, %r13
    000000f9: 	leaq	0x1(%rax), %rsi
    000000fd: 	callq	_ZdlPvm@PLT # Offset: 253
    00000102: 	cmpq	%r13, 0x10(%rsp)
    00000107: 	jne	.Ltmp86 # Offset: 263
.Ltmp84:
    00000109: 	movq	0x20(%rsp), %rax
    0000010e: 	movq	0x48(%rax), %rax
    00000112: 	movq	%rax, (%rsp)
    00000116: 	leaq	0x8(%rax), %rbp
    0000011a: 	movq	0x18(%r15), %rax
    0000011e: 	leaq	0x8(%rax), %rbx
    00000122: 	cmpq	%rbx, %rbp
    00000125: 	jbe	.Ltmp87 # Offset: 293
    00000127: 	nopw	(%rax,%rax) # Size: 9
.Ltmp88:
    00000130: 	movq	(%rbx), %rdi
    00000133: 	movl	$0x200, %esi
    00000138: 	addq	$0x8, %rbx
    0000013c: 	callq	_ZdlPvm@PLT # Offset: 316
    00000141: 	cmpq	%rbx, %rbp
    00000144: 	ja	.Ltmp88 # Offset: 324
.Ltmp87:
    00000146: 	movdqu	(%r15), %xmm0
    0000014b: 	movq	0x20(%rsp), %rax
    00000150: 	movups	%xmm0, 0x30(%rax)
    00000154: 	movdqu	0x10(%r15), %xmm1
    0000015a: 	movaps	%xmm1, (%rsp)
    0000015e: 	movups	%xmm1, 0x40(%rax)
    00000162: 	addq	$0x38, %rsp
    00000166: 	popq	%rbx
    00000167: 	popq	%rbp
    00000168: 	popq	%r12
    0000016a: 	popq	%r13
    0000016c: 	popq	%r14
    0000016e: 	popq	%r15
    00000170: 	retq # Offset: 368
    00000171: 	nopl	(%rax) # Size: 7
.Ltmp77:
    00000178: 	addq	$0x20, %r14
    0000017c: 	cmpq	%r14, %rbx
    0000017f: 	jne	.Ltmp78 # Offset: 383
    00000185: 	addq	$0x8, %r12
    00000189: 	cmpq	%r12, (%rsp)
    0000018d: 	ja	.Ltmp79 # Offset: 397
    00000193: 	jmp	.Ltmp76 # Offset: 403
    00000198: 	nopl	(%rax,%rax) # Size: 8
.Ltmp85:
    000001a0: 	addq	$0x20, %r13
    000001a4: 	cmpq	%r13, 0x10(%rsp)
    000001a9: 	jne	.Ltmp86 # Offset: 425
    000001af: 	jmp	.Ltmp84 # Offset: 431
    000001b4: 	nopl	(%rax) # Size: 4
.Ltmp82:
    000001b8: 	addq	$0x20, %rbp
    000001bc: 	cmpq	%rbp, 0x18(%rsp)
    000001c1: 	jne	.Ltmp83 # Offset: 449
    000001c7: 	jmp	.Ltmp81 # Offset: 455
.Ltmp80:
    000001cc: 	cmpq	0x10(%rsp), %rbp
    000001d1: 	je	.Ltmp84 # Offset: 465
.Ltmp91:
    000001d7: 	movq	(%rbp), %rdi
    000001db: 	leaq	0x10(%rbp), %rax
    000001df: 	cmpq	%rax, %rdi
    000001e2: 	je	.Ltmp89 # Offset: 482
.Ltmp90:
    000001e4: 	movq	0x10(%rbp), %rax
    000001e8: 	addq	$0x20, %rbp
    000001ec: 	leaq	0x1(%rax), %rsi
    000001f0: 	callq	_ZdlPvm@PLT # Offset: 496
    000001f5: 	cmpq	%rbp, 0x10(%rsp)
    000001fa: 	je	.Ltmp84 # Offset: 506
    00000200: 	movq	(%rbp), %rdi
    00000204: 	leaq	0x10(%rbp), %rax
    00000208: 	cmpq	%rax, %rdi
    0000020b: 	jne	.Ltmp90 # Offset: 523
.Ltmp89:
    0000020d: 	addq	$0x20, %rbp
    00000211: 	cmpq	%rbp, 0x10(%rsp)
    00000216: 	jne	.Ltmp91 # Offset: 534
    00000218: 	jmp	.Ltmp84 # Offset: 536
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_" after disassembly {
  Number      : 43
  State       : disassembled
  Address     : 0x27e0
  Size        : 0x328
  MaxSize     : 0x330
  Offset      : 0x27e0
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB042:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rsi, %rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x18, %rsp
    00000015: 	movq	0x48(%rdi), %r12
    00000019: 	movq	0x28(%rdi), %rsi
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x8(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	movq	0x30(%rdi), %rax
    00000031: 	subq	0x38(%rdi), %rax
    00000035: 	movq	%r12, %r13
    00000038: 	sarq	$0x5, %rax
    0000003c: 	subq	%rsi, %r13
    0000003f: 	movq	%r13, %rcx
    00000042: 	sarq	$0x3, %rcx
    00000046: 	cmpq	$0x1, %r12
    0000004a: 	movq	%rcx, %rdx
    0000004d: 	adcq	$-0x1, %rdx
    00000051: 	shlq	$0x4, %rdx
    00000055: 	addq	%rdx, %rax
    00000058: 	movq	0x20(%rdi), %rdx
    0000005c: 	subq	0x10(%rdi), %rdx
    00000060: 	sarq	$0x5, %rdx
    00000064: 	addq	%rdx, %rax
    00000067: 	movabsq	$0x3ffffffffffffff, %rdx
    00000071: 	cmpq	%rdx, %rax
    00000074: 	je	.Ltmp92 # Offset: 116
    0000007a: 	movq	0x8(%rdi), %rdx
    0000007e: 	movq	%rdi, %rbx
    00000081: 	movq	(%rdi), %rdi
    00000084: 	movq	%r12, %rax
    00000087: 	subq	%rdi, %rax
    0000008a: 	movq	%rdx, %r8
    0000008d: 	sarq	$0x3, %rax
    00000091: 	subq	%rax, %r8
    00000094: 	cmpq	$0x1, %r8
    00000098: 	jbe	.Ltmp93 # Offset: 152
.Ltmp104:
    0000009e: 	movl	$0x200, %edi
    000000a3: 	callq	_Znwm@PLT # Offset: 163
    000000a8: 	movq	%rax, 0x8(%r12)
    000000ad: 	movq	0x30(%rbx), %r13
    000000b1: 	movq	0x8(%rbp), %r12
    000000b5: 	leaq	0x10(%r13), %rdi
    000000b9: 	movq	%rdi, (%r13)
    000000bd: 	movq	(%rbp), %r14
    000000c1: 	movq	%r14, %rax
    000000c4: 	addq	%r12, %rax
    000000c7: 	je	.Ltmp94 # Offset: 199
    000000c9: 	testq	%r14, %r14
    000000cc: 	je	.Ltmp95 # Offset: 204
.Ltmp94:
    000000d2: 	movq	%r12, (%rsp)
    000000d6: 	cmpq	$0xf, %r12
    000000da: 	ja	.Ltmp96 # Offset: 218
    000000e0: 	cmpq	$0x1, %r12
    000000e4: 	jne	.Ltmp97 # Offset: 228
    000000e6: 	movzbl	(%r14), %eax
    000000ea: 	movb	%al, 0x10(%r13)
.Ltmp99:
    000000ee: 	movq	%r12, 0x8(%r13)
    000000f2: 	movb	$0x0, (%rdi,%r12)
    000000f7: 	movq	0x48(%rbx), %rdx
    000000fb: 	movq	0x8(%rdx), %rax
    000000ff: 	addq	$0x8, %rdx
    00000103: 	movq	%rdx, %xmm1
    00000108: 	movq	%rax, %xmm0
    0000010d: 	addq	$0x200, %rax
    00000113: 	punpcklqdq	%xmm0, %xmm0
    00000117: 	movups	%xmm0, 0x30(%rbx)
    0000011b: 	movq	%rax, %xmm0
    00000120: 	punpcklqdq	%xmm1, %xmm0
    00000124: 	movups	%xmm0, 0x40(%rbx)
    00000128: 	movq	0x8(%rsp), %rax
    0000012d: 	subq	%fs:0x28, %rax
    00000136: 	jne	.Ltmp98 # Offset: 310
    0000013c: 	addq	$0x18, %rsp
    00000140: 	popq	%rbx
    00000141: 	popq	%rbp
    00000142: 	popq	%r12
    00000144: 	popq	%r13
    00000146: 	popq	%r14
    00000148: 	popq	%r15
    0000014a: 	retq # Offset: 330
    0000014b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp97:
    00000150: 	testq	%r12, %r12
    00000153: 	je	.Ltmp99 # Offset: 339
    00000155: 	jmp	.Ltmp100 # Offset: 341
    0000015a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp93:
    00000160: 	leaq	0x2(%rcx), %r14
    00000164: 	leaq	(%r14,%r14), %rax
    00000168: 	cmpq	%rax, %rdx
    0000016b: 	ja	.Ltmp101 # Offset: 363
    00000171: 	testq	%rdx, %rdx
    00000174: 	movl	$0x1, %eax
    00000179: 	cmovneq	%rdx, %rax
    0000017d: 	leaq	0x2(%rdx,%rax), %r15
    00000182: 	movq	%r15, %rax
    00000185: 	shrq	$0x3c, %rax
    00000189: 	jne	.Ltmp102 # Offset: 393
    0000018f: 	leaq	(,%r15,8), %rdi
    00000197: 	callq	_Znwm@PLT # Offset: 407
    0000019c: 	movq	0x28(%rbx), %rsi
    000001a0: 	movq	%rax, %r12
    000001a3: 	movq	%r15, %rax
    000001a6: 	subq	%r14, %rax
    000001a9: 	shrq	%rax
    000001ac: 	leaq	(%r12,%rax,8), %r14
    000001b0: 	movq	0x48(%rbx), %rax
    000001b4: 	leaq	0x8(%rax), %rdx
    000001b8: 	cmpq	%rsi, %rdx
    000001bb: 	je	.Ltmp103 # Offset: 443
    000001bd: 	subq	%rsi, %rdx
    000001c0: 	movq	%r14, %rdi
    000001c3: 	callq	memmove@PLT # Offset: 451
.Ltmp103:
    000001c8: 	movq	0x8(%rbx), %rax
    000001cc: 	movq	(%rbx), %rdi
    000001cf: 	leaq	(,%rax,8), %rsi
    000001d7: 	callq	_ZdlPvm@PLT # Offset: 471
    000001dc: 	movq	%r12, (%rbx)
    000001df: 	movq	%r15, 0x8(%rbx)
.Ltmp106:
    000001e3: 	movq	(%r14), %rax
    000001e6: 	movq	(%r14), %xmm0
    000001eb: 	leaq	(%r14,%r13), %r12
    000001ef: 	movq	%r14, 0x28(%rbx)
    000001f3: 	movq	%r12, 0x48(%rbx)
    000001f7: 	addq	$0x200, %rax
    000001fd: 	movq	%rax, %xmm2
    00000202: 	punpcklqdq	%xmm2, %xmm0
    00000206: 	movups	%xmm0, 0x18(%rbx)
    0000020a: 	movq	(%r12), %rax
    0000020e: 	movq	(%r12), %xmm0
    00000214: 	addq	$0x200, %rax
    0000021a: 	movq	%rax, %xmm3
    0000021f: 	punpcklqdq	%xmm3, %xmm0
    00000223: 	movups	%xmm0, 0x38(%rbx)
    00000227: 	jmp	.Ltmp104 # Offset: 551
    0000022c: 	nopl	(%rax) # Size: 4
.Ltmp96:
    00000230: 	movq	%rsp, %rsi
    00000233: 	xorl	%edx, %edx
    00000235: 	movq	%r13, %rdi
    00000238: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 568
    0000023d: 	movq	%rax, (%r13)
    00000241: 	movq	%rax, %rdi
    00000244: 	movq	(%rsp), %rax
    00000248: 	movq	%rax, 0x10(%r13)
.Ltmp100:
    0000024c: 	movq	%r12, %rdx
    0000024f: 	movq	%r14, %rsi
    00000252: 	callq	memcpy@PLT # Offset: 594
    00000257: 	movq	(%rsp), %r12
    0000025b: 	movq	(%r13), %rdi
    0000025f: 	jmp	.Ltmp99 # Offset: 607
    00000264: 	nopl	(%rax) # Size: 4
.Ltmp101:
    00000268: 	subq	%r14, %rdx
    0000026b: 	addq	$0x8, %r12
    0000026f: 	shrq	%rdx
    00000272: 	leaq	(%rdi,%rdx,8), %r14
    00000276: 	movq	%r12, %rdx
    00000279: 	subq	%rsi, %rdx
    0000027c: 	cmpq	%r14, %rsi
    0000027f: 	jbe	.Ltmp105 # Offset: 639
    00000281: 	cmpq	%r12, %rsi
    00000284: 	je	.Ltmp106 # Offset: 644
    0000028a: 	movq	%r14, %rdi
    0000028d: 	callq	memmove@PLT # Offset: 653
    00000292: 	jmp	.Ltmp106 # Offset: 658
    00000297: 	nopw	(%rax,%rax) # Size: 9
.Ltmp105:
    000002a0: 	cmpq	%r12, %rsi
    000002a3: 	je	.Ltmp106 # Offset: 675
    000002a9: 	leaq	0x8(%r13), %rdi
    000002ad: 	subq	%rdx, %rdi
    000002b0: 	addq	%r14, %rdi
    000002b3: 	callq	memmove@PLT # Offset: 691
    000002b8: 	jmp	.Ltmp106 # Offset: 696
.Ltmp95:
    000002bd: 	leaq	DATAat0x4d018(%rip), %rdi
    000002c4: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 708
    000002c9: 	nopl	(%rax) # Size: 7
.Ltmp102:
    000002d0: 	shrq	$0x3d, %r15
    000002d4: 	je	.Ltmp107 # Offset: 724
    000002d6: 	callq	_ZSt28__throw_bad_array_new_lengthv@PLT # Offset: 726
.Ltmp107:
    000002db: 	callq	_ZSt17__throw_bad_allocv@PLT # Offset: 731
.Ltmp92:
    000002e0: 	leaq	DATAat0x4d1b0(%rip), %rdi
    000002e7: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 743
.Ltmp98:
    000002ec: 	callq	__stack_chk_fail@PLT # Offset: 748
    000002f1: 	endbr64
    000002f5: 	movq	%rax, %rdi
    000002f8: 	callq	__cxa_begin_catch@PLT # Offset: 760
    000002fd: 	movq	0x48(%rbx), %rax
    00000301: 	movl	$0x200, %esi
    00000306: 	movq	0x8(%rax), %rdi
    0000030a: 	callq	_ZdlPvm@PLT # Offset: 778
    0000030f: 	callq	__cxa_rethrow@PLT # Offset: 783
    00000314: 	endbr64
    00000318: 	movq	%rax, %rbp
    0000031b: 	callq	__cxa_end_catch@PLT # Offset: 795
    00000320: 	movq	%rbp, %rdi
    00000323: 	callq	_Unwind_Resume@PLT # Offset: 803
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_" after disassembly {
  Number      : 44
  State       : disassembled
  Address     : 0x2b10
  Size        : 0x10c
  MaxSize     : 0x110
  Offset      : 0x2b10
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB043:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movq	0x30(%rdi), %rbx
    00000015: 	movq	%fs:0x28, %rax
    0000001e: 	movq	%rax, 0x8(%rsp)
    00000023: 	xorl	%eax, %eax
    00000025: 	movq	0x40(%rdi), %rax
    00000029: 	subq	$0x20, %rax
    0000002d: 	cmpq	%rax, %rbx
    00000030: 	je	.Ltmp108 # Offset: 48
    00000036: 	leaq	0x10(%rbx), %rdi
    0000003a: 	movq	0x8(%rsi), %r12
    0000003e: 	movq	%rdi, (%rbx)
    00000041: 	movq	(%rsi), %r13
    00000044: 	movq	%r13, %rax
    00000047: 	addq	%r12, %rax
    0000004a: 	je	.Ltmp109 # Offset: 74
    0000004c: 	testq	%r13, %r13
    0000004f: 	je	.Ltmp110 # Offset: 79
.Ltmp109:
    00000055: 	movq	%r12, (%rsp)
    00000059: 	cmpq	$0xf, %r12
    0000005d: 	ja	.Ltmp111 # Offset: 93
    0000005f: 	cmpq	$0x1, %r12
    00000063: 	jne	.Ltmp112 # Offset: 99
    00000069: 	movzbl	(%r13), %eax
    0000006e: 	movb	%al, 0x10(%rbx)
.Ltmp114:
    00000071: 	movq	%r12, 0x8(%rbx)
    00000075: 	movb	$0x0, (%rdi,%r12)
    0000007a: 	addq	$0x20, 0x30(%rbp)
    0000007f: 	movq	0x8(%rsp), %rax
    00000084: 	subq	%fs:0x28, %rax
    0000008d: 	jne	.Ltmp113 # Offset: 141
    0000008f: 	addq	$0x18, %rsp
    00000093: 	popq	%rbx
    00000094: 	popq	%rbp
    00000095: 	popq	%r12
    00000097: 	popq	%r13
    00000099: 	retq # Offset: 153
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp111:
    000000a0: 	movq	%rbx, %rdi
    000000a3: 	movq	%rsp, %rsi
    000000a6: 	xorl	%edx, %edx
    000000a8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 168
    000000ad: 	movq	%rax, (%rbx)
    000000b0: 	movq	%rax, %rdi
    000000b3: 	movq	(%rsp), %rax
    000000b7: 	movq	%rax, 0x10(%rbx)
.Ltmp115:
    000000bb: 	movq	%r12, %rdx
    000000be: 	movq	%r13, %rsi
    000000c1: 	callq	memcpy@PLT # Offset: 193
    000000c6: 	movq	(%rsp), %r12
    000000ca: 	movq	(%rbx), %rdi
    000000cd: 	jmp	.Ltmp114 # Offset: 205
    000000cf: 	nop # Size: 1
.Ltmp108:
    000000d0: 	movq	0x8(%rsp), %rax
    000000d5: 	subq	%fs:0x28, %rax
    000000de: 	jne	.Ltmp113 # Offset: 222
    000000e0: 	addq	$0x18, %rsp
    000000e4: 	popq	%rbx
    000000e5: 	popq	%rbp
    000000e6: 	popq	%r12
    000000e8: 	popq	%r13
    000000ea: 	jmp	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # TAILCALL  # Offset: 234
    000000ef: 	nop # Size: 1
.Ltmp112:
    000000f0: 	testq	%r12, %r12
    000000f3: 	je	.Ltmp114 # Offset: 243
    000000f9: 	jmp	.Ltmp115 # Offset: 249
.Ltmp110:
    000000fb: 	leaq	DATAat0x4d018(%rip), %rdi
    00000102: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 258
.Ltmp113:
    00000107: 	callq	__stack_chk_fail@PLT # Offset: 263
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_"

Binary Function "_Z28test_CSE2_add_inline_flippedIh14custom_cse_addIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 45
  State       : disassembled
  Address     : 0x2c20
  Size        : 0x394
  MaxSize     : 0x3a0
  Offset      : 0x2c20
  Section     : .text
  Orc Section : .local.text._Z28test_CSE2_add_inline_flippedIh14custom_cse_addIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB044:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movl	%esi, %ebp
    0000000f: 	pushq	%rbx
    00000010: 	movq	%rdi, %rbx
    00000013: 	subq	$0x38, %rsp
    00000017: 	movq	%rcx, 0x10(%rsp)
    0000001c: 	movq	%fs:0x28, %rax
    00000025: 	movq	%rax, 0x28(%rsp)
    0000002a: 	xorl	%eax, %eax
    0000002c: 	callq	clock@PLT # Offset: 44
    00000031: 	movl	iterations(%rip), %edi
    00000037: 	movq	%rax, start_time(%rip)
    0000003e: 	testl	%edi, %edi
    00000040: 	jle	.Ltmp116 # Offset: 64
    00000046: 	leal	-0x1(%rbp), %r15d
    0000004a: 	movzbl	(%rbx), %r10d
    0000004e: 	leal	-0x2(%rbp), %r8d
    00000052: 	xorl	%r13d, %r13d
    00000055: 	movl	%r15d, %eax
    00000058: 	movl	%r15d, %r14d
    0000005b: 	shrl	$0x4, %eax
    0000005e: 	andl	$-0x10, %r14d
    00000062: 	subl	$0x1, %eax
    00000065: 	leal	0x1(%r14), %r9d
    00000069: 	shlq	$0x4, %rax
    0000006d: 	leaq	0x10(%rbx,%rax), %r12
    00000072: 	nopw	(%rax,%rax) # Size: 6
.Ltmp122:
    00000078: 	movl	%r10d, %edx
    0000007b: 	subb	0x1(%rbx), %dl
    0000007e: 	addl	%edx, %edx
    00000080: 	cmpl	$0x1, %ebp
    00000083: 	jle	.Ltmp117 # Offset: 131
    00000089: 	cmpl	$0xe, %r8d
    0000008d: 	jbe	.Ltmp118 # Offset: 141
    00000093: 	movq	%rbx, %rax
    00000096: 	pxor	%xmm1, %xmm1
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp119:
    000000a0: 	movdqu	(%rax), %xmm0
    000000a4: 	movdqu	0x1(%rax), %xmm2
    000000a9: 	addq	$0x10, %rax
    000000ad: 	psubb	%xmm2, %xmm0
    000000b1: 	paddb	%xmm0, %xmm0
    000000b5: 	paddb	%xmm0, %xmm1
    000000b9: 	cmpq	%r12, %rax
    000000bc: 	jne	.Ltmp119 # Offset: 188
    000000be: 	movdqa	%xmm1, %xmm0
    000000c2: 	psrldq	$0x8, %xmm0
    000000c7: 	paddb	%xmm0, %xmm1
    000000cb: 	pxor	%xmm0, %xmm0
    000000cf: 	psadbw	%xmm0, %xmm1
    000000d3: 	movd	%xmm1, %eax
    000000d7: 	addl	%eax, %edx
    000000d9: 	cmpl	%r14d, %r15d
    000000dc: 	je	.Ltmp117 # Offset: 220
    000000e2: 	movl	%r14d, %eax
    000000e5: 	movl	%r9d, %ecx
.Ltmp130:
    000000e8: 	movl	%ebp, %r11d
    000000eb: 	subl	%eax, %r11d
    000000ee: 	leal	-0x1(%r11), %esi
    000000f2: 	subl	$0x2, %r11d
    000000f6: 	cmpl	$0x6, %r11d
    000000fa: 	jbe	.Ltmp120 # Offset: 250
    000000fc: 	movq	0x1(%rbx,%rax), %xmm1
    00000102: 	movq	(%rbx,%rax), %xmm0
    00000107: 	psubb	%xmm1, %xmm0
    0000010b: 	pxor	%xmm1, %xmm1
    0000010f: 	paddb	%xmm0, %xmm0
    00000113: 	movdqa	%xmm0, %xmm3
    00000117: 	psadbw	%xmm1, %xmm3
    0000011b: 	movq	%xmm3, %rax
    00000120: 	movq	%xmm3, 0x18(%rsp)
    00000126: 	movl	%eax, %r11d
    00000129: 	movl	%esi, %eax
    0000012b: 	andl	$-0x8, %eax
    0000012e: 	addl	%r11d, %edx
    00000131: 	addl	%eax, %ecx
    00000133: 	cmpl	%eax, %esi
    00000135: 	je	.Ltmp117 # Offset: 309
.Ltmp120:
    00000137: 	movslq	%ecx, %rax
    0000013a: 	addq	%rbx, %rax
    0000013d: 	movzbl	(%rax), %esi
    00000140: 	movzbl	-0x1(%rax), %eax
    00000144: 	subl	%esi, %eax
    00000146: 	leal	(%rdx,%rax,2), %edx
    00000149: 	leal	0x1(%rcx), %eax
    0000014c: 	cmpl	%eax, %ebp
    0000014e: 	jle	.Ltmp117 # Offset: 334
    00000150: 	cltq
    00000152: 	movzbl	(%rbx,%rax), %eax
    00000156: 	subl	%eax, %esi
    00000158: 	leal	(%rdx,%rsi,2), %edx
    0000015b: 	leal	0x2(%rcx), %esi
    0000015e: 	cmpl	%esi, %ebp
    00000160: 	jle	.Ltmp117 # Offset: 352
    00000162: 	movslq	%esi, %rsi
    00000165: 	movzbl	(%rbx,%rsi), %esi
    00000169: 	subl	%esi, %eax
    0000016b: 	leal	(%rdx,%rax,2), %edx
    0000016e: 	leal	0x3(%rcx), %eax
    00000171: 	cmpl	%eax, %ebp
    00000173: 	jle	.Ltmp117 # Offset: 371
    00000175: 	cltq
    00000177: 	movzbl	(%rbx,%rax), %eax
    0000017b: 	subl	%eax, %esi
    0000017d: 	leal	(%rdx,%rsi,2), %edx
    00000180: 	leal	0x4(%rcx), %esi
    00000183: 	cmpl	%esi, %ebp
    00000185: 	jle	.Ltmp117 # Offset: 389
    00000187: 	movslq	%esi, %rsi
    0000018a: 	movzbl	(%rbx,%rsi), %esi
    0000018e: 	subl	%esi, %eax
    00000190: 	leal	(%rdx,%rax,2), %edx
    00000193: 	leal	0x5(%rcx), %eax
    00000196: 	cmpl	%eax, %ebp
    00000198: 	jle	.Ltmp117 # Offset: 408
    0000019a: 	cltq
    0000019c: 	addl	$0x6, %ecx
    0000019f: 	movzbl	(%rbx,%rax), %eax
    000001a3: 	subl	%eax, %esi
    000001a5: 	leal	(%rdx,%rsi,2), %edx
    000001a8: 	cmpl	%ecx, %ebp
    000001aa: 	jle	.Ltmp117 # Offset: 426
    000001ac: 	movslq	%ecx, %rcx
    000001af: 	subb	(%rbx,%rcx), %al
    000001b2: 	leal	(%rdx,%rax,2), %edx
.Ltmp117:
    000001b5: 	testb	%dl, %dl
    000001b7: 	jne	.Ltmp121 # Offset: 439
    000001bd: 	addl	$0x1, %r13d
    000001c1: 	cmpl	%edi, %r13d
    000001c4: 	jl	.Ltmp122 # Offset: 452
.Ltmp116:
    000001ca: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001d1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001d8: 	subq	$0x20, %rax
    000001dc: 	cmpq	%rax, %rbx
    000001df: 	je	.Ltmp123 # Offset: 479
    000001e5: 	movq	0x10(%rsp), %rax
    000001ea: 	leaq	0x10(%rbx), %rdi
    000001ee: 	movq	%rdi, (%rbx)
    000001f1: 	movq	(%rax), %rbp
    000001f4: 	movq	0x8(%rax), %r12
    000001f8: 	movq	%rbp, %rax
    000001fb: 	addq	%r12, %rax
    000001fe: 	je	.Ltmp124 # Offset: 510
    00000200: 	testq	%rbp, %rbp
    00000203: 	je	.Ltmp125 # Offset: 515
.Ltmp124:
    00000209: 	movq	%r12, 0x20(%rsp)
    0000020e: 	cmpq	$0xf, %r12
    00000212: 	ja	.Ltmp126 # Offset: 530
    00000218: 	cmpq	$0x1, %r12
    0000021c: 	jne	.Ltmp127 # Offset: 540
    00000222: 	movzbl	(%rbp), %eax
    00000226: 	movb	%al, 0x10(%rbx)
.Ltmp131:
    00000229: 	movq	%r12, 0x8(%rbx)
    0000022d: 	movb	$0x0, (%rdi,%r12)
    00000232: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000239: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000240: 	addq	$0x20, %rax
    00000244: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000024b: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000252: 	je	.Ltmp128 # Offset: 594
.Ltmp132:
    00000258: 	movq	-0x20(%rax), %rbp
    0000025c: 	callq	clock@PLT # Offset: 604
    00000261: 	movq	%rax, end_time(%rip)
    00000268: 	movq	0x28(%rsp), %rdx
    0000026d: 	subq	%fs:0x28, %rdx
    00000276: 	jne	.Ltmp129 # Offset: 630
    0000027c: 	subq	start_time(%rip), %rax
    00000283: 	pxor	%xmm0, %xmm0
    00000287: 	movq	%rbp, %rdi
    0000028a: 	cvtsi2sd	%rax, %xmm0
    0000028f: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000297: 	addq	$0x38, %rsp
    0000029b: 	popq	%rbx
    0000029c: 	popq	%rbp
    0000029d: 	popq	%r12
    0000029f: 	popq	%r13
    000002a1: 	popq	%r14
    000002a3: 	popq	%r15
    000002a5: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 677
    000002aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp121:
    000002b0: 	movq	0x10(%rsp), %rax
    000002b5: 	movl	$0x1, %edi
    000002ba: 	movl	%r8d, 0xc(%rsp)
    000002bf: 	leaq	DATAat0x4d004(%rip), %rsi
    000002c6: 	movl	%r9d, 0x8(%rsp)
    000002cb: 	addl	$0x1, %r13d
    000002cf: 	movq	(%rax), %rdx
    000002d2: 	xorl	%eax, %eax
    000002d4: 	callq	__printf_chk@PLT # Offset: 724
    000002d9: 	movl	iterations(%rip), %edi
    000002df: 	cmpl	%r13d, %edi
    000002e2: 	jle	.Ltmp116 # Offset: 738
    000002e8: 	movzbl	(%rbx), %r10d
    000002ec: 	movl	0x8(%rsp), %r9d
    000002f1: 	movl	0xc(%rsp), %r8d
    000002f6: 	jmp	.Ltmp122 # Offset: 758
.Ltmp118:
    000002fb: 	xorl	%eax, %eax
    000002fd: 	movl	$0x1, %ecx
    00000302: 	jmp	.Ltmp130 # Offset: 770
.Ltmp126:
    00000307: 	movq	%rbx, %rdi
    0000030a: 	leaq	0x20(%rsp), %rsi
    0000030f: 	xorl	%edx, %edx
    00000311: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 785
    00000316: 	movq	%rax, (%rbx)
    00000319: 	movq	%rax, %rdi
    0000031c: 	movq	0x20(%rsp), %rax
    00000321: 	movq	%rax, 0x10(%rbx)
.Ltmp133:
    00000325: 	movq	%r12, %rdx
    00000328: 	movq	%rbp, %rsi
    0000032b: 	callq	memcpy@PLT # Offset: 811
    00000330: 	movq	0x20(%rsp), %r12
    00000335: 	movq	(%rbx), %rdi
    00000338: 	jmp	.Ltmp131 # Offset: 824
.Ltmp123:
    0000033d: 	movq	0x10(%rsp), %rsi
    00000342: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000349: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 841
    0000034e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000355: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000035c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000363: 	jne	.Ltmp132 # Offset: 867
.Ltmp128:
    00000369: 	movq	-0x8(%rdx), %rax
    0000036d: 	addq	$0x200, %rax
    00000373: 	jmp	.Ltmp132 # Offset: 883
.Ltmp127:
    00000378: 	testq	%r12, %r12
    0000037b: 	je	.Ltmp131 # Offset: 891
    00000381: 	jmp	.Ltmp133 # Offset: 897
.Ltmp129:
    00000383: 	callq	__stack_chk_fail@PLT # Offset: 899
.Ltmp125:
    00000388: 	leaq	DATAat0x4d018(%rip), %rdi
    0000038f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 911
DWARF CFI Instructions:
    <empty>
End of Function "_Z28test_CSE2_add_inline_flippedIh14custom_cse_addIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSE2Ih14custom_cse_subIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 46
  State       : disassembled
  Address     : 0x2fc0
  Size        : 0x3af
  MaxSize     : 0x3b0
  Offset      : 0x2fc0
  Section     : .text
  Orc Section : .local.text._Z9test_CSE2Ih14custom_cse_subIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB045:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%edx, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%esi, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdi, %rbx
    00000016: 	subq	$0x38, %rsp
    0000001a: 	movq	%rcx, 0x10(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x28(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r10d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r10d, %r10d
    00000045: 	jle	.Ltmp134 # Offset: 69
    0000004b: 	leal	-0x1(%rbp), %r8d
    0000004f: 	leal	-0x2(%rbp), %eax
    00000052: 	movzbl	(%rbx), %r9d
    00000056: 	movzbl	0x1(%rbx), %edi
    0000005a: 	movl	%eax, 0x4(%rsp)
    0000005e: 	movl	%r8d, %eax
    00000061: 	movl	%r8d, %r14d
    00000064: 	xorl	%r13d, %r13d
    00000067: 	shrl	$0x4, %eax
    0000006a: 	andl	$-0x10, %r14d
    0000006e: 	subl	$0x1, %eax
    00000071: 	shlq	$0x4, %rax
    00000075: 	leaq	0x10(%rbx,%rax), %r12
    0000007a: 	leal	0x1(%r14), %eax
    0000007e: 	movl	%eax, 0x8(%rsp)
    00000082: 	nopw	(%rax,%rax) # Size: 6
.Ltmp140:
    00000088: 	movl	%r9d, %eax
    0000008b: 	subl	%edi, %eax
    0000008d: 	leal	(%r15,%rax), %edx
    00000091: 	movzbl	%dl, %ecx
    00000094: 	leal	(%rax,%rdx,2), %edx
    00000097: 	movzbl	%dil, %eax
    0000009b: 	addl	%r9d, %edx
    0000009e: 	leal	(%rax,%rcx,2), %eax
    000000a1: 	subl	%eax, %edx
    000000a3: 	cmpl	$0x1, %ebp
    000000a6: 	jle	.Ltmp135 # Offset: 166
    000000ac: 	cmpl	$0xe, 0x4(%rsp)
    000000b1: 	jbe	.Ltmp136 # Offset: 177
    000000b7: 	movq	%rbx, %rax
    000000ba: 	pxor	%xmm1, %xmm1
    000000be: 	nop # Size: 2
.Ltmp137:
    000000c0: 	movdqu	(%rax), %xmm0
    000000c4: 	movdqu	0x1(%rax), %xmm2
    000000c9: 	addq	$0x10, %rax
    000000cd: 	psubb	%xmm2, %xmm0
    000000d1: 	paddb	%xmm0, %xmm0
    000000d5: 	paddb	%xmm0, %xmm1
    000000d9: 	cmpq	%rax, %r12
    000000dc: 	jne	.Ltmp137 # Offset: 220
    000000de: 	movdqa	%xmm1, %xmm0
    000000e2: 	psrldq	$0x8, %xmm0
    000000e7: 	paddb	%xmm0, %xmm1
    000000eb: 	pxor	%xmm0, %xmm0
    000000ef: 	psadbw	%xmm0, %xmm1
    000000f3: 	movd	%xmm1, %eax
    000000f7: 	addl	%eax, %edx
    000000f9: 	cmpl	%r14d, %r8d
    000000fc: 	je	.Ltmp135 # Offset: 252
    00000102: 	movl	0x8(%rsp), %ecx
    00000106: 	movl	%r14d, %eax
.Ltmp148:
    00000109: 	movl	%ebp, %r11d
    0000010c: 	subl	%eax, %r11d
    0000010f: 	leal	-0x1(%r11), %esi
    00000113: 	subl	$0x2, %r11d
    00000117: 	cmpl	$0x6, %r11d
    0000011b: 	jbe	.Ltmp138 # Offset: 283
    0000011d: 	movq	0x1(%rbx,%rax), %xmm1
    00000123: 	movq	(%rbx,%rax), %xmm0
    00000128: 	psubb	%xmm1, %xmm0
    0000012c: 	pxor	%xmm1, %xmm1
    00000130: 	paddb	%xmm0, %xmm0
    00000134: 	movdqa	%xmm0, %xmm3
    00000138: 	psadbw	%xmm1, %xmm3
    0000013c: 	movq	%xmm3, %rax
    00000141: 	movq	%xmm3, 0x18(%rsp)
    00000147: 	movl	%eax, %r11d
    0000014a: 	movl	%esi, %eax
    0000014c: 	andl	$-0x8, %eax
    0000014f: 	addl	%r11d, %edx
    00000152: 	addl	%eax, %ecx
    00000154: 	cmpl	%esi, %eax
    00000156: 	je	.Ltmp135 # Offset: 342
.Ltmp138:
    00000158: 	movslq	%ecx, %rax
    0000015b: 	addq	%rbx, %rax
    0000015e: 	movzbl	(%rax), %esi
    00000161: 	movzbl	-0x1(%rax), %eax
    00000165: 	subl	%esi, %eax
    00000167: 	leal	(%rdx,%rax,2), %edx
    0000016a: 	leal	0x1(%rcx), %eax
    0000016d: 	cmpl	%ebp, %eax
    0000016f: 	jge	.Ltmp135 # Offset: 367
    00000171: 	cltq
    00000173: 	movzbl	(%rbx,%rax), %eax
    00000177: 	subl	%eax, %esi
    00000179: 	leal	(%rdx,%rsi,2), %edx
    0000017c: 	leal	0x2(%rcx), %esi
    0000017f: 	cmpl	%esi, %ebp
    00000181: 	jle	.Ltmp135 # Offset: 385
    00000183: 	movslq	%esi, %rsi
    00000186: 	movzbl	(%rbx,%rsi), %esi
    0000018a: 	subl	%esi, %eax
    0000018c: 	leal	(%rdx,%rax,2), %edx
    0000018f: 	leal	0x3(%rcx), %eax
    00000192: 	cmpl	%eax, %ebp
    00000194: 	jle	.Ltmp135 # Offset: 404
    00000196: 	cltq
    00000198: 	movzbl	(%rbx,%rax), %eax
    0000019c: 	subl	%eax, %esi
    0000019e: 	leal	(%rdx,%rsi,2), %edx
    000001a1: 	leal	0x4(%rcx), %esi
    000001a4: 	cmpl	%esi, %ebp
    000001a6: 	jle	.Ltmp135 # Offset: 422
    000001a8: 	movslq	%esi, %rsi
    000001ab: 	movzbl	(%rbx,%rsi), %esi
    000001af: 	subl	%esi, %eax
    000001b1: 	leal	(%rdx,%rax,2), %edx
    000001b4: 	leal	0x5(%rcx), %eax
    000001b7: 	cmpl	%ebp, %eax
    000001b9: 	jge	.Ltmp135 # Offset: 441
    000001bb: 	cltq
    000001bd: 	addl	$0x6, %ecx
    000001c0: 	movzbl	(%rbx,%rax), %eax
    000001c4: 	subl	%eax, %esi
    000001c6: 	leal	(%rdx,%rsi,2), %edx
    000001c9: 	cmpl	%ecx, %ebp
    000001cb: 	jle	.Ltmp135 # Offset: 459
    000001cd: 	movslq	%ecx, %rcx
    000001d0: 	subb	(%rbx,%rcx), %al
    000001d3: 	leal	(%rdx,%rax,2), %edx
.Ltmp135:
    000001d6: 	testb	%dl, %dl
    000001d8: 	jne	.Ltmp139 # Offset: 472
    000001de: 	addl	$0x1, %r13d
    000001e2: 	cmpl	%r10d, %r13d
    000001e5: 	jl	.Ltmp140 # Offset: 485
.Ltmp134:
    000001eb: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001f2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001f9: 	subq	$0x20, %rax
    000001fd: 	cmpq	%rax, %rbx
    00000200: 	je	.Ltmp141 # Offset: 512
    00000206: 	movq	0x10(%rsp), %rax
    0000020b: 	leaq	0x10(%rbx), %rdi
    0000020f: 	movq	%rdi, (%rbx)
    00000212: 	movq	(%rax), %rbp
    00000215: 	movq	0x8(%rax), %r12
    00000219: 	movq	%rbp, %rax
    0000021c: 	addq	%r12, %rax
    0000021f: 	je	.Ltmp142 # Offset: 543
    00000221: 	testq	%rbp, %rbp
    00000224: 	je	.Ltmp143 # Offset: 548
.Ltmp142:
    0000022a: 	movq	%r12, 0x20(%rsp)
    0000022f: 	cmpq	$0xf, %r12
    00000233: 	ja	.Ltmp144 # Offset: 563
    00000239: 	cmpq	$0x1, %r12
    0000023d: 	jne	.Ltmp145 # Offset: 573
    00000243: 	movzbl	(%rbp), %eax
    00000247: 	movb	%al, 0x10(%rbx)
.Ltmp149:
    0000024a: 	movq	%r12, 0x8(%rbx)
    0000024e: 	movb	$0x0, (%rdi,%r12)
    00000253: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000025a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000261: 	addq	$0x20, %rax
    00000265: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000026c: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000273: 	je	.Ltmp146 # Offset: 627
.Ltmp150:
    00000279: 	movq	-0x20(%rax), %rbp
    0000027d: 	callq	clock@PLT # Offset: 637
    00000282: 	movq	%rax, end_time(%rip)
    00000289: 	movq	0x28(%rsp), %rdx
    0000028e: 	subq	%fs:0x28, %rdx
    00000297: 	jne	.Ltmp147 # Offset: 663
    0000029d: 	subq	start_time(%rip), %rax
    000002a4: 	pxor	%xmm0, %xmm0
    000002a8: 	movq	%rbp, %rdi
    000002ab: 	cvtsi2sd	%rax, %xmm0
    000002b0: 	divsd	DATAat0x4d640(%rip), %xmm0
    000002b8: 	addq	$0x38, %rsp
    000002bc: 	popq	%rbx
    000002bd: 	popq	%rbp
    000002be: 	popq	%r12
    000002c0: 	popq	%r13
    000002c2: 	popq	%r14
    000002c4: 	popq	%r15
    000002c6: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 710
    000002cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp139:
    000002d0: 	movq	0x10(%rsp), %rax
    000002d5: 	leaq	DATAat0x4d004(%rip), %rsi
    000002dc: 	movl	$0x1, %edi
    000002e1: 	movl	%r8d, 0xc(%rsp)
    000002e6: 	addl	$0x1, %r13d
    000002ea: 	movq	(%rax), %rdx
    000002ed: 	xorl	%eax, %eax
    000002ef: 	callq	__printf_chk@PLT # Offset: 751
    000002f4: 	movl	iterations(%rip), %r10d
    000002fb: 	cmpl	%r10d, %r13d
    000002fe: 	jge	.Ltmp134 # Offset: 766
    00000304: 	movzbl	(%rbx), %r9d
    00000308: 	movzbl	0x1(%rbx), %edi
    0000030c: 	movl	0xc(%rsp), %r8d
    00000311: 	jmp	.Ltmp140 # Offset: 785
.Ltmp136:
    00000316: 	xorl	%eax, %eax
    00000318: 	movl	$0x1, %ecx
    0000031d: 	jmp	.Ltmp148 # Offset: 797
.Ltmp144:
    00000322: 	movq	%rbx, %rdi
    00000325: 	leaq	0x20(%rsp), %rsi
    0000032a: 	xorl	%edx, %edx
    0000032c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 812
    00000331: 	movq	%rax, (%rbx)
    00000334: 	movq	%rax, %rdi
    00000337: 	movq	0x20(%rsp), %rax
    0000033c: 	movq	%rax, 0x10(%rbx)
.Ltmp151:
    00000340: 	movq	%r12, %rdx
    00000343: 	movq	%rbp, %rsi
    00000346: 	callq	memcpy@PLT # Offset: 838
    0000034b: 	movq	0x20(%rsp), %r12
    00000350: 	movq	(%rbx), %rdi
    00000353: 	jmp	.Ltmp149 # Offset: 851
.Ltmp141:
    00000358: 	movq	0x10(%rsp), %rsi
    0000035d: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000364: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 868
    00000369: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000370: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000377: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000037e: 	jne	.Ltmp150 # Offset: 894
.Ltmp146:
    00000384: 	movq	-0x8(%rdx), %rax
    00000388: 	addq	$0x200, %rax
    0000038e: 	jmp	.Ltmp150 # Offset: 910
.Ltmp145:
    00000393: 	testq	%r12, %r12
    00000396: 	je	.Ltmp149 # Offset: 918
    0000039c: 	jmp	.Ltmp151 # Offset: 924
.Ltmp147:
    0000039e: 	callq	__stack_chk_fail@PLT # Offset: 926
.Ltmp143:
    000003a3: 	leaq	DATAat0x4d018(%rip), %rdi
    000003aa: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 938
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE2Ih14custom_cse_subIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSE2Ia14custom_cse_mulIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z9test_CSE2Ia14custom_cse_mulIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z9test_CSE2Ia14custom_cse_mulIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/simple_types_cse.cpp/1
  Number      : 47
  State       : disassembled
  Address     : 0x3370
  Size        : 0x917
  MaxSize     : 0x920
  Offset      : 0x3370
  Section     : .text
  Orc Section : .local.text._Z9test_CSE2Ia14custom_cse_mulIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB046:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	movq	%rdi, %r13
    00000009: 	pushq	%r12
    0000000b: 	movl	%esi, %r12d
    0000000e: 	pushq	%rbp
    0000000f: 	pushq	%rbx
    00000010: 	subq	$0xe8, %rsp
    00000017: 	movq	%rdx, 0xc8(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0xd8(%rsp)
    00000030: 	xorl	%eax, %eax
    00000032: 	callq	clock@PLT # Offset: 50
    00000037: 	movq	%rax, start_time(%rip)
    0000003e: 	movl	iterations(%rip), %eax
    00000044: 	movl	%eax, 0xc4(%rsp)
    0000004b: 	testl	%eax, %eax
    0000004d: 	jle	.Ltmp152 # Offset: 77
    00000053: 	movzbl	(%r13), %eax
    00000058: 	movzbl	0x1(%r13), %r15d
    0000005d: 	movl	$0x0, 0xc(%rsp)
    00000065: 	leaq	0x1f30(%r13), %r14
    0000006c: 	movdqa	DATAat0x4d5f0(%rip), %xmm4
    00000074: 	movd	%r12d, %xmm5
    00000079: 	pxor	%xmm6, %xmm6
    0000007d: 	movb	%al, 0x17(%rsp)
    00000081: 	movzbl	0x1f30(%r13), %eax
    00000089: 	punpcklbw	%xmm5, %xmm5
    0000008d: 	punpcklwd	%xmm5, %xmm5
    00000091: 	movb	%al, 0x13(%rsp)
    00000095: 	movzbl	0x1f31(%r13), %eax
    0000009d: 	pshufd	$0x0, %xmm5, %xmm5
    000000a2: 	movb	%al, 0xb8(%rsp)
    000000a9: 	movzbl	0x1f32(%r13), %eax
    000000b1: 	movb	%al, 0xb9(%rsp)
    000000b8: 	movzbl	0x1f33(%r13), %eax
    000000c0: 	movb	%al, 0x14(%rsp)
    000000c4: 	movzbl	0x1f34(%r13), %eax
    000000cc: 	movb	%al, 0x15(%rsp)
    000000d0: 	movzbl	0x1f35(%r13), %eax
    000000d8: 	movb	%al, 0xba(%rsp)
    000000df: 	movzbl	0x1f36(%r13), %eax
    000000e7: 	movb	%al, 0xbb(%rsp)
    000000ee: 	movzbl	0x1f37(%r13), %eax
    000000f6: 	movb	%al, 0xbc(%rsp)
    000000fd: 	movzbl	0x1f38(%r13), %eax
    00000105: 	movb	%al, 0xbd(%rsp)
    0000010c: 	movzbl	0x1f39(%r13), %eax
    00000114: 	movb	%al, 0xbe(%rsp)
    0000011b: 	movzbl	0x1f3a(%r13), %eax
    00000123: 	movb	%al, 0xbf(%rsp)
    0000012a: 	movzbl	0x1f3b(%r13), %eax
    00000132: 	movb	%al, 0xc0(%rsp)
    00000139: 	movzbl	0x1f3c(%r13), %eax
    00000141: 	movb	%al, 0xc1(%rsp)
    00000148: 	movzbl	0x1f3d(%r13), %eax
    00000150: 	movb	%al, 0x12(%rsp)
    00000154: 	movzbl	0x1f3e(%r13), %eax
    0000015c: 	movb	%r15b, 0xc3(%rsp)
    00000164: 	movb	%al, 0xc2(%rsp)
    0000016b: 	movzbl	0x1f3f(%r13), %eax
    00000173: 	movq	%r14, 0x18(%rsp)
    00000178: 	movb	%al, 0x16(%rsp)
    0000017c: 	nopl	(%rax) # Size: 4
.Ltmp155:
    00000180: 	movzbl	0x17(%rsp), %eax
    00000185: 	movsbl	0x17(%rsp), %edx
    0000018a: 	pxor	%xmm3, %xmm3
    0000018e: 	movzbl	0xc3(%rsp), %edi
    00000196: 	movq	0x18(%rsp), %rbx
    0000019b: 	movl	%edx, %esi
    0000019d: 	imull	%edi, %eax
    000001a0: 	subl	%edi, %esi
    000001a2: 	addl	%r12d, %eax
    000001a5: 	movsbl	%al, %eax
    000001a8: 	leal	(%rdx,%rax,2), %ecx
    000001ab: 	movl	%esi, %edx
    000001ad: 	addl	%ecx, %edx
    000001af: 	movsbl	%dil, %ecx
    000001b3: 	leal	(%rcx,%rax,2), %eax
    000001b6: 	subl	%eax, %edx
    000001b8: 	movq	%r13, %rax
    000001bb: 	movb	%dl, 0x20(%rsp)
    000001bf: 	nop # Size: 1
.Ltmp153:
    000001c0: 	movdqu	(%rax), %xmm0
    000001c4: 	movdqu	0x1(%rax), %xmm2
    000001c9: 	addq	$0x10, %rax
    000001cd: 	movdqa	%xmm0, %xmm1
    000001d1: 	movdqa	%xmm0, %xmm7
    000001d5: 	movdqa	%xmm2, %xmm9
    000001da: 	movdqa	%xmm2, %xmm8
    000001df: 	punpcklbw	%xmm0, %xmm1
    000001e3: 	punpckhbw	%xmm0, %xmm7
    000001e7: 	punpcklbw	%xmm2, %xmm9
    000001ec: 	punpckhbw	%xmm2, %xmm8
    000001f1: 	pmullw	%xmm9, %xmm1
    000001f6: 	pmullw	%xmm8, %xmm7
    000001fb: 	pand	%xmm4, %xmm1
    000001ff: 	pand	%xmm4, %xmm7
    00000203: 	packuswb	%xmm7, %xmm1
    00000207: 	paddb	%xmm5, %xmm1
    0000020b: 	paddb	%xmm1, %xmm0
    0000020f: 	paddb	%xmm1, %xmm2
    00000213: 	paddb	%xmm1, %xmm0
    00000217: 	paddb	%xmm1, %xmm2
    0000021b: 	paddb	%xmm0, %xmm0
    0000021f: 	psubb	%xmm2, %xmm3
    00000223: 	psubb	%xmm2, %xmm0
    00000227: 	paddb	%xmm0, %xmm3
    0000022b: 	cmpq	%rax, %rbx
    0000022e: 	jne	.Ltmp153 # Offset: 558
    00000230: 	movzbl	0x13(%rsp), %eax
    00000235: 	movsbl	0xb8(%rsp), %ecx
    0000023d: 	movq	%rbx, 0x18(%rsp)
    00000242: 	movdqa	%xmm3, %xmm0
    00000246: 	psrldq	$0x8, %xmm0
    0000024b: 	imull	%ecx, %eax
    0000024e: 	movl	%ecx, %esi
    00000250: 	movl	%ecx, 0x30(%rsp)
    00000254: 	paddb	%xmm0, %xmm3
    00000258: 	psadbw	%xmm6, %xmm3
    0000025c: 	movd	%xmm3, 0x80(%rsp)
    00000265: 	leal	(%rax,%r12), %edx
    00000269: 	movsbl	%dl, %eax
    0000026c: 	leal	(%rcx,%rax,2), %edi
    0000026f: 	movsbl	0xb9(%rsp), %ecx
    00000277: 	movl	%eax, 0x34(%rsp)
    0000027b: 	movl	%esi, %eax
    0000027d: 	movl	%edi, 0x84(%rsp)
    00000284: 	imull	%ecx, %eax
    00000287: 	movl	%ecx, %edi
    00000289: 	movl	%ecx, 0x50(%rsp)
    0000028d: 	leal	(%rax,%r12), %r14d
    00000291: 	movsbl	%r14b, %r14d
    00000295: 	leal	(%rcx,%r14,2), %r8d
    00000299: 	movsbl	0x14(%rsp), %ecx
    0000029e: 	movl	%r8d, 0x88(%rsp)
    000002a6: 	movl	%ecx, %eax
    000002a8: 	movl	%ecx, %r9d
    000002ab: 	movl	%ecx, 0x48(%rsp)
    000002af: 	imull	%edi, %eax
    000002b2: 	movl	%r9d, %ebx
    000002b5: 	leal	(%rax,%r12), %ebp
    000002b9: 	movsbl	%bpl, %eax
    000002bd: 	leal	(%rcx,%rax,2), %r11d
    000002c1: 	movsbl	0x15(%rsp), %ecx
    000002c6: 	movl	%eax, 0x44(%rsp)
    000002ca: 	movl	%r11d, 0x8c(%rsp)
    000002d2: 	movl	%ecx, %eax
    000002d4: 	movl	%ecx, %r15d
    000002d7: 	movl	%ecx, 0x40(%rsp)
    000002db: 	imull	%ebx, %eax
    000002de: 	addl	%r12d, %eax
    000002e1: 	movsbl	%al, %r9d
    000002e5: 	movl	%r15d, %eax
    000002e8: 	leal	(%rcx,%r9,2), %r8d
    000002ec: 	movsbl	0xba(%rsp), %ecx
    000002f4: 	movl	%r9d, 0x3c(%rsp)
    000002f9: 	movl	%r8d, 0x90(%rsp)
    00000301: 	imull	%ecx, %eax
    00000304: 	movl	%ecx, %esi
    00000306: 	movl	%ecx, 0x38(%rsp)
    0000030a: 	leal	(%rax,%r12), %r11d
    0000030e: 	movl	%esi, %eax
    00000310: 	movsbl	%r11b, %r11d
    00000314: 	leal	(%rcx,%r11,2), %r10d
    00000318: 	movsbl	0xbb(%rsp), %ecx
    00000320: 	movl	%r10d, 0x94(%rsp)
    00000328: 	imull	%ecx, %eax
    0000032b: 	movl	%ecx, %edi
    0000032d: 	movl	%ecx, 0x54(%rsp)
    00000331: 	leal	(%rax,%r12), %r10d
    00000335: 	movl	%edi, %eax
    00000337: 	movsbl	%r10b, %r10d
    0000033b: 	leal	(%rcx,%r10,2), %esi
    0000033f: 	movsbl	0xbc(%rsp), %ecx
    00000347: 	movl	%esi, 0x98(%rsp)
    0000034e: 	imull	%ecx, %eax
    00000351: 	movl	%ecx, %esi
    00000353: 	movl	%ecx, 0x58(%rsp)
    00000357: 	leal	(%rax,%r12), %r9d
    0000035b: 	movl	%esi, %eax
    0000035d: 	movsbl	%r9b, %r9d
    00000361: 	leal	(%rcx,%r9,2), %r15d
    00000365: 	movsbl	0xbd(%rsp), %ecx
    0000036d: 	movl	%r15d, 0x9c(%rsp)
    00000375: 	imull	%ecx, %eax
    00000378: 	movl	%ecx, %edi
    0000037a: 	movl	%ecx, 0x5c(%rsp)
    0000037e: 	leal	(%rax,%r12), %r8d
    00000382: 	movl	%edi, %eax
    00000384: 	movsbl	%r8b, %r8d
    00000388: 	leal	(%rcx,%r8,2), %r15d
    0000038c: 	movsbl	0xbe(%rsp), %ecx
    00000394: 	movl	%r15d, 0xa0(%rsp)
    0000039c: 	imull	%ecx, %eax
    0000039f: 	movl	%ecx, 0x60(%rsp)
    000003a3: 	movl	%ecx, %esi
    000003a5: 	leal	(%rax,%r12), %edi
    000003a9: 	movl	%esi, %eax
    000003ab: 	movsbl	%dil, %edi
    000003af: 	leal	(%rcx,%rdi,2), %r15d
    000003b3: 	movl	%r15d, 0xa4(%rsp)
    000003bb: 	movzbl	0xbf(%rsp), %ebx
    000003c3: 	movzbl	0xc0(%rsp), %ebp
    000003cb: 	movzbl	0xc1(%rsp), %edx
    000003d3: 	movsbl	%bl, %ecx
    000003d6: 	imull	%ecx, %eax
    000003d9: 	movl	%ecx, 0x64(%rsp)
    000003dd: 	leal	(%rax,%r12), %esi
    000003e1: 	movl	%ebx, %eax
    000003e3: 	movl	%edx, %ebx
    000003e5: 	movsbl	%sil, %esi
    000003e9: 	leal	(%rcx,%rsi,2), %r15d
    000003ed: 	movl	%r15d, 0xa8(%rsp)
    000003f5: 	movsbl	%bpl, %r15d
    000003f9: 	imull	%r15d, %eax
    000003fd: 	movl	%r15d, 0x68(%rsp)
    00000402: 	leal	(%rax,%r12), %ecx
    00000406: 	movl	%ebp, %eax
    00000408: 	movzbl	0x12(%rsp), %ebp
    0000040d: 	imull	%ebx, %eax
    00000410: 	movsbl	%cl, %ecx
    00000413: 	leal	(%r15,%rcx,2), %r15d
    00000417: 	movl	%r15d, 0xac(%rsp)
    0000041f: 	movsbl	%dl, %r15d
    00000423: 	addl	%r12d, %eax
    00000426: 	movl	%r15d, 0x6c(%rsp)
    0000042b: 	movsbl	%al, %eax
    0000042e: 	leal	(%r15,%rax,2), %ebx
    00000432: 	movl	%eax, 0x70(%rsp)
    00000436: 	movl	%edx, %eax
    00000438: 	movsbl	%bpl, %r15d
    0000043c: 	imull	%ebp, %eax
    0000043f: 	movzbl	0xc2(%rsp), %edx
    00000447: 	movl	%r15d, 0x74(%rsp)
    0000044c: 	addl	%r12d, %eax
    0000044f: 	movsbl	%al, %eax
    00000452: 	leal	(%r15,%rax,2), %ebp
    00000456: 	movl	%eax, 0x78(%rsp)
    0000045a: 	movzbl	0x12(%rsp), %eax
    0000045f: 	movsbl	%dl, %r15d
    00000463: 	imull	%edx, %eax
    00000466: 	addl	%r12d, %eax
    00000469: 	movsbl	%al, %eax
    0000046c: 	movl	%eax, 0x7c(%rsp)
    00000470: 	leal	(%r15,%rax,2), %eax
    00000474: 	movl	%eax, 0xb0(%rsp)
    0000047b: 	movzbl	0x16(%rsp), %eax
    00000480: 	imull	%edx, %eax
    00000483: 	addl	%r12d, %eax
    00000486: 	movsbl	%al, %eax
    00000489: 	movl	%eax, %edx
    0000048b: 	movsbl	0x16(%rsp), %eax
    00000490: 	movl	%edx, 0x4c(%rsp)
    00000494: 	leal	(%rax,%rdx,2), %edx
    00000497: 	movzbl	0x34(%rsp), %eax
    0000049c: 	movl	%edx, 0xb4(%rsp)
    000004a3: 	movzbl	0x13(%rsp), %edx
    000004a8: 	leal	(%rdx,%rax,2), %edx
    000004ab: 	movl	0x84(%rsp), %eax
    000004b2: 	addl	%edx, %edx
    000004b4: 	subl	%eax, %edx
    000004b6: 	subl	%eax, %edx
    000004b8: 	movzbl	0x20(%rsp), %eax
    000004bd: 	addb	0x80(%rsp), %al
    000004c4: 	addl	%edx, %eax
    000004c6: 	movl	0x30(%rsp), %edx
    000004ca: 	leal	(%rdx,%r14,2), %edx
    000004ce: 	movl	0x88(%rsp), %r14d
    000004d6: 	addl	%edx, %edx
    000004d8: 	subl	%r14d, %edx
    000004db: 	subl	%r14d, %edx
    000004de: 	movl	0x44(%rsp), %r14d
    000004e3: 	addl	%eax, %edx
    000004e5: 	movl	0x50(%rsp), %eax
    000004e9: 	leal	(%rax,%r14,2), %eax
    000004ed: 	movl	0x8c(%rsp), %r14d
    000004f5: 	addl	%eax, %eax
    000004f7: 	subl	%r14d, %eax
    000004fa: 	subl	%r14d, %eax
    000004fd: 	movl	0x3c(%rsp), %r14d
    00000502: 	addl	%eax, %edx
    00000504: 	movl	0x48(%rsp), %eax
    00000508: 	leal	(%rax,%r14,2), %eax
    0000050c: 	movl	0x90(%rsp), %r14d
    00000514: 	addl	%eax, %eax
    00000516: 	subl	%r14d, %eax
    00000519: 	subl	%r14d, %eax
    0000051c: 	addl	%eax, %edx
    0000051e: 	movl	0x40(%rsp), %eax
    00000522: 	leal	(%rax,%r11,2), %eax
    00000526: 	movl	0x94(%rsp), %r11d
    0000052e: 	addl	%eax, %eax
    00000530: 	subl	%r11d, %eax
    00000533: 	subl	%r11d, %eax
    00000536: 	movl	0xa0(%rsp), %r11d
    0000053e: 	addl	%eax, %edx
    00000540: 	movl	0x38(%rsp), %eax
    00000544: 	leal	(%rax,%r10,2), %eax
    00000548: 	movl	0x98(%rsp), %r10d
    00000550: 	addl	%eax, %eax
    00000552: 	subl	%r10d, %eax
    00000555: 	subl	%r10d, %eax
    00000558: 	movl	0x9c(%rsp), %r10d
    00000560: 	addl	%eax, %edx
    00000562: 	movl	0x54(%rsp), %eax
    00000566: 	leal	(%rax,%r9,2), %eax
    0000056a: 	addl	%eax, %eax
    0000056c: 	subl	%r10d, %eax
    0000056f: 	subl	%r10d, %eax
    00000572: 	addl	%eax, %edx
    00000574: 	movl	0x58(%rsp), %eax
    00000578: 	leal	(%rax,%r8,2), %eax
    0000057c: 	addl	%eax, %eax
    0000057e: 	subl	%r11d, %eax
    00000581: 	subl	%r11d, %eax
    00000584: 	addl	%eax, %edx
    00000586: 	movl	0x5c(%rsp), %eax
    0000058a: 	leal	(%rax,%rdi,2), %eax
    0000058d: 	movl	0xa4(%rsp), %edi
    00000594: 	addl	%eax, %eax
    00000596: 	subl	%edi, %eax
    00000598: 	subl	%edi, %eax
    0000059a: 	movl	0xa8(%rsp), %edi
    000005a1: 	addl	%eax, %edx
    000005a3: 	movl	0x60(%rsp), %eax
    000005a7: 	leal	(%rax,%rsi,2), %eax
    000005aa: 	addl	%eax, %eax
    000005ac: 	subl	%edi, %eax
    000005ae: 	subl	%edi, %eax
    000005b0: 	addl	%eax, %edx
    000005b2: 	movl	0x64(%rsp), %eax
    000005b6: 	leal	(%rax,%rcx,2), %eax
    000005b9: 	movl	0xac(%rsp), %ecx
    000005c0: 	addl	%eax, %eax
    000005c2: 	subl	%ecx, %eax
    000005c4: 	subl	%ecx, %eax
    000005c6: 	movl	0x70(%rsp), %ecx
    000005ca: 	addl	%eax, %edx
    000005cc: 	movl	0x68(%rsp), %eax
    000005d0: 	leal	(%rax,%rcx,2), %eax
    000005d3: 	addl	%eax, %eax
    000005d5: 	subl	%ebx, %eax
    000005d7: 	subl	%ebx, %eax
    000005d9: 	movl	0x6c(%rsp), %ebx
    000005dd: 	addl	%eax, %edx
    000005df: 	movl	0x78(%rsp), %eax
    000005e3: 	leal	(%rbx,%rax,2), %eax
    000005e6: 	movl	0xb0(%rsp), %ebx
    000005ed: 	addl	%eax, %eax
    000005ef: 	subl	%ebp, %eax
    000005f1: 	subl	%ebp, %eax
    000005f3: 	movl	0x74(%rsp), %ebp
    000005f7: 	addl	%eax, %edx
    000005f9: 	movl	0x7c(%rsp), %eax
    000005fd: 	leal	(%rbp,%rax,2), %eax
    00000601: 	addl	%eax, %eax
    00000603: 	subl	%ebx, %eax
    00000605: 	subl	%ebx, %eax
    00000607: 	movl	0xb4(%rsp), %ebx
    0000060e: 	addl	%eax, %edx
    00000610: 	movl	0x4c(%rsp), %eax
    00000614: 	leal	(%r15,%rax,2), %eax
    00000618: 	addl	%eax, %eax
    0000061a: 	subl	%ebx, %eax
    0000061c: 	subl	%ebx, %eax
    0000061e: 	addb	%dl, %al
    00000620: 	jne	.Ltmp154 # Offset: 1568
    00000626: 	addl	$0x1, 0xc(%rsp)
    0000062b: 	movl	0xc(%rsp), %eax
    0000062f: 	cmpl	0xc4(%rsp), %eax
    00000636: 	jl	.Ltmp155 # Offset: 1590
.Ltmp152:
    0000063c: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000643: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000064a: 	subq	$0x20, %rax
    0000064e: 	cmpq	%rax, %rbx
    00000651: 	je	.Ltmp156 # Offset: 1617
    00000657: 	movq	0xc8(%rsp), %rax
    0000065f: 	leaq	0x10(%rbx), %rdi
    00000663: 	movq	%rdi, (%rbx)
    00000666: 	movq	(%rax), %rbp
    00000669: 	movq	0x8(%rax), %r12
    0000066d: 	movq	%rbp, %rax
    00000670: 	addq	%r12, %rax
    00000673: 	je	.Ltmp157 # Offset: 1651
    00000675: 	testq	%rbp, %rbp
    00000678: 	je	.Ltmp158 # Offset: 1656
.Ltmp157:
    0000067e: 	movq	%r12, 0xd0(%rsp)
    00000686: 	cmpq	$0xf, %r12
    0000068a: 	ja	.Ltmp159 # Offset: 1674
    00000690: 	cmpq	$0x1, %r12
    00000694: 	jne	.Ltmp160 # Offset: 1684
    0000069a: 	movzbl	(%rbp), %eax
    0000069e: 	movb	%al, 0x10(%rbx)
.Ltmp163:
    000006a1: 	movq	%r12, 0x8(%rbx)
    000006a5: 	movb	$0x0, (%rdi,%r12)
    000006aa: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000006b1: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000006b8: 	addq	$0x20, %rax
    000006bc: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000006c3: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000006ca: 	je	.Ltmp161 # Offset: 1738
.Ltmp164:
    000006d0: 	movq	-0x20(%rax), %rbp
    000006d4: 	callq	clock@PLT # Offset: 1748
    000006d9: 	movq	%rax, end_time(%rip)
    000006e0: 	movq	0xd8(%rsp), %rdx
    000006e8: 	subq	%fs:0x28, %rdx
    000006f1: 	jne	.Ltmp162 # Offset: 1777
    000006f7: 	subq	start_time(%rip), %rax
    000006fe: 	pxor	%xmm0, %xmm0
    00000702: 	movq	%rbp, %rdi
    00000705: 	cvtsi2sd	%rax, %xmm0
    0000070a: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000712: 	addq	$0xe8, %rsp
    00000719: 	popq	%rbx
    0000071a: 	popq	%rbp
    0000071b: 	popq	%r12
    0000071d: 	popq	%r13
    0000071f: 	popq	%r14
    00000721: 	popq	%r15
    00000723: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1827
    00000728: 	nopl	(%rax,%rax) # Size: 8
.Ltmp154:
    00000730: 	movq	0xc8(%rsp), %rax
    00000738: 	movl	$0x1, %edi
    0000073d: 	movaps	%xmm5, 0x20(%rsp)
    00000742: 	leaq	DATAat0x4d004(%rip), %rsi
    00000749: 	movq	(%rax), %rdx
    0000074c: 	xorl	%eax, %eax
    0000074e: 	callq	__printf_chk@PLT # Offset: 1870
    00000753: 	addl	$0x1, 0xc(%rsp)
    00000758: 	movl	iterations(%rip), %ebx
    0000075e: 	movl	0xc(%rsp), %eax
    00000762: 	movl	%ebx, 0xc4(%rsp)
    00000769: 	cmpl	%eax, %ebx
    0000076b: 	jle	.Ltmp152 # Offset: 1899
    00000771: 	movzbl	(%r13), %eax
    00000776: 	pxor	%xmm6, %xmm6
    0000077a: 	movb	%al, 0x17(%rsp)
    0000077e: 	movzbl	0x1(%r13), %eax
    00000783: 	movb	%al, 0xc3(%rsp)
    0000078a: 	movzbl	0x1f30(%r13), %eax
    00000792: 	movb	%al, 0x13(%rsp)
    00000796: 	movzbl	0x1f31(%r13), %eax
    0000079e: 	movb	%al, 0xb8(%rsp)
    000007a5: 	movzbl	0x1f32(%r13), %eax
    000007ad: 	movb	%al, 0xb9(%rsp)
    000007b4: 	movzbl	0x1f33(%r13), %eax
    000007bc: 	movb	%al, 0x14(%rsp)
    000007c0: 	movzbl	0x1f34(%r13), %eax
    000007c8: 	movb	%al, 0x15(%rsp)
    000007cc: 	movzbl	0x1f35(%r13), %eax
    000007d4: 	movb	%al, 0xba(%rsp)
    000007db: 	movzbl	0x1f36(%r13), %eax
    000007e3: 	movb	%al, 0xbb(%rsp)
    000007ea: 	movzbl	0x1f37(%r13), %eax
    000007f2: 	movb	%al, 0xbc(%rsp)
    000007f9: 	movzbl	0x1f38(%r13), %eax
    00000801: 	movb	%al, 0xbd(%rsp)
    00000808: 	movzbl	0x1f39(%r13), %eax
    00000810: 	movb	%al, 0xbe(%rsp)
    00000817: 	movzbl	0x1f3a(%r13), %eax
    0000081f: 	movb	%al, 0xbf(%rsp)
    00000826: 	movzbl	0x1f3b(%r13), %eax
    0000082e: 	movb	%al, 0xc0(%rsp)
    00000835: 	movzbl	0x1f3c(%r13), %eax
    0000083d: 	movb	%al, 0xc1(%rsp)
    00000844: 	movzbl	0x1f3d(%r13), %eax
    0000084c: 	movb	%al, 0x12(%rsp)
    00000850: 	movzbl	0x1f3e(%r13), %eax
    00000858: 	movdqa	0x20(%rsp), %xmm5
    0000085e: 	movdqa	DATAat0x4d5f0(%rip), %xmm4
    00000866: 	movb	%al, 0xc2(%rsp)
    0000086d: 	movzbl	0x1f3f(%r13), %eax
    00000875: 	movb	%al, 0x16(%rsp)
    00000879: 	jmp	.Ltmp155 # Offset: 2169
.Ltmp159:
    0000087e: 	movq	%rbx, %rdi
    00000881: 	leaq	0xd0(%rsp), %rsi
    00000889: 	xorl	%edx, %edx
    0000088b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 2187
    00000890: 	movq	%rax, (%rbx)
    00000893: 	movq	%rax, %rdi
    00000896: 	movq	0xd0(%rsp), %rax
    0000089e: 	movq	%rax, 0x10(%rbx)
.Ltmp165:
    000008a2: 	movq	%r12, %rdx
    000008a5: 	movq	%rbp, %rsi
    000008a8: 	callq	memcpy@PLT # Offset: 2216
    000008ad: 	movq	0xd0(%rsp), %r12
    000008b5: 	movq	(%rbx), %rdi
    000008b8: 	jmp	.Ltmp163 # Offset: 2232
.Ltmp156:
    000008bd: 	movq	0xc8(%rsp), %rsi
    000008c5: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000008cc: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 2252
    000008d1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000008d8: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000008df: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000008e6: 	jne	.Ltmp164 # Offset: 2278
.Ltmp161:
    000008ec: 	movq	-0x8(%rdx), %rax
    000008f0: 	addq	$0x200, %rax
    000008f6: 	jmp	.Ltmp164 # Offset: 2294
.Ltmp160:
    000008fb: 	testq	%r12, %r12
    000008fe: 	je	.Ltmp163 # Offset: 2302
    00000904: 	jmp	.Ltmp165 # Offset: 2308
.Ltmp162:
    00000906: 	callq	__stack_chk_fail@PLT # Offset: 2310
.Ltmp158:
    0000090b: 	leaq	DATAat0x4d018(%rip), %rdi
    00000912: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 2322
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE2Ia14custom_cse_mulIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z9test_CSE2Ia14custom_cse_addIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z9test_CSE2Ia14custom_cse_addIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z9test_CSE2Ia14custom_cse_addIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/simple_types_cse.cpp/1
  Number      : 48
  State       : disassembled
  Address     : 0x3c90
  Size        : 0x59f
  MaxSize     : 0x5a0
  Offset      : 0x3c90
  Section     : .text
  Orc Section : .local.text._Z9test_CSE2Ia14custom_cse_addIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB047:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movl	%esi, %ebp
    0000000b: 	pushq	%rbx
    0000000c: 	subq	$0x88, %rsp
    00000013: 	movq	%rdi, 0x48(%rsp)
    00000018: 	movq	%rdx, 0x60(%rsp)
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x78(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	callq	clock@PLT # Offset: 45
    00000032: 	movq	%rax, start_time(%rip)
    00000039: 	movl	iterations(%rip), %eax
    0000003f: 	movl	%eax, 0x54(%rsp)
    00000043: 	testl	%eax, %eax
    00000045: 	jle	.Ltmp166 # Offset: 69
    0000004b: 	movq	0x48(%rsp), %rax
    00000050: 	movd	%ebp, %xmm4
    00000054: 	movl	$0x0, 0x3c(%rsp)
    0000005c: 	pxor	%xmm7, %xmm7
    00000060: 	punpcklbw	%xmm4, %xmm4
    00000064: 	movzbl	(%rax), %ebx
    00000067: 	punpcklwd	%xmm4, %xmm4
    0000006b: 	movzbl	0x1f3d(%rax), %r13d
    00000073: 	movzbl	0x1f3e(%rax), %r12d
    0000007b: 	pshufd	$0x0, %xmm4, %xmm4
    00000080: 	movq	0x1f30(%rax), %xmm6
    00000088: 	movq	0x1f31(%rax), %xmm5
    00000090: 	movb	%bl, 0x52(%rsp)
    00000094: 	movl	%r13d, %r11d
    00000097: 	movzbl	0x1(%rax), %ebx
    0000009b: 	movb	%bl, 0x53(%rsp)
    0000009f: 	leaq	0x1f30(%rax), %rbx
    000000a6: 	movq	%rbx, 0x58(%rsp)
    000000ab: 	movzbl	%bpl, %ebx
    000000af: 	movw	%bx, 0x50(%rsp)
    000000b4: 	movzbl	0x1f38(%rax), %ebx
    000000bb: 	movb	%bl, 0x17(%rsp)
    000000bf: 	movzbl	0x1f39(%rax), %ebx
    000000c6: 	movb	%bl, 0x43(%rsp)
    000000ca: 	movzbl	0x1f3a(%rax), %ebx
    000000d1: 	movb	%bl, 0x44(%rsp)
    000000d5: 	movzbl	0x1f3b(%rax), %ebx
    000000dc: 	movb	%bl, 0x45(%rsp)
    000000e0: 	movzbl	0x1f3c(%rax), %ebx
    000000e7: 	movzbl	0x1f3f(%rax), %eax
    000000ee: 	movb	%bl, 0x46(%rsp)
    000000f2: 	movl	%ebp, %ebx
    000000f4: 	movl	%r12d, %ebp
    000000f7: 	movb	%al, 0x47(%rsp)
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp169:
    00000100: 	movsbl	0x52(%rsp), %eax
    00000105: 	movzbl	0x53(%rsp), %esi
    0000010a: 	pxor	%xmm3, %xmm3
    0000010e: 	movl	%eax, %edx
    00000110: 	movl	%eax, %edi
    00000112: 	addl	%esi, %edx
    00000114: 	subl	%esi, %edi
    00000116: 	addl	%ebx, %edx
    00000118: 	movl	%edi, %ecx
    0000011a: 	movsbl	%dl, %edx
    0000011d: 	leal	(%rax,%rdx,2), %eax
    00000120: 	addl	%ecx, %eax
    00000122: 	movsbl	%sil, %ecx
    00000126: 	leal	(%rcx,%rdx,2), %edx
    00000129: 	movq	0x58(%rsp), %rcx
    0000012e: 	subl	%edx, %eax
    00000130: 	movq	0x48(%rsp), %rdx
    00000135: 	nopl	(%rax) # Size: 3
.Ltmp167:
    00000138: 	movdqu	(%rdx), %xmm1
    0000013c: 	movdqu	0x1(%rdx), %xmm2
    00000141: 	addq	$0x10, %rdx
    00000145: 	movdqu	-0x10(%rdx), %xmm0
    0000014a: 	paddb	%xmm1, %xmm2
    0000014e: 	movdqu	-0xf(%rdx), %xmm1
    00000153: 	paddb	%xmm4, %xmm2
    00000157: 	paddb	%xmm2, %xmm0
    0000015b: 	paddb	%xmm2, %xmm1
    0000015f: 	paddb	%xmm2, %xmm0
    00000163: 	paddb	%xmm2, %xmm1
    00000167: 	paddb	%xmm0, %xmm0
    0000016b: 	psubb	%xmm1, %xmm3
    0000016f: 	psubb	%xmm1, %xmm0
    00000173: 	paddb	%xmm0, %xmm3
    00000177: 	cmpq	%rdx, %rcx
    0000017a: 	jne	.Ltmp167 # Offset: 378
    0000017c: 	movdqa	%xmm3, %xmm0
    00000180: 	movzwl	0x50(%rsp), %edi
    00000185: 	movdqa	%xmm5, %xmm1
    00000189: 	movsbl	0x43(%rsp), %r10d
    0000018f: 	psrldq	$0x8, %xmm0
    00000194: 	paddb	%xmm6, %xmm1
    00000198: 	movzbl	0x17(%rsp), %ecx
    0000019d: 	movzbl	0x17(%rsp), %r12d
    000001a3: 	paddb	%xmm0, %xmm3
    000001a7: 	psadbw	%xmm7, %xmm3
    000001ab: 	movd	%xmm3, %edx
    000001af: 	addl	%edx, %eax
    000001b1: 	movsbl	0x44(%rsp), %edx
    000001b6: 	movb	%al, (%rsp)
    000001b9: 	movl	%edi, %eax
    000001bb: 	shll	$0x8, %eax
    000001be: 	movl	%edx, 0x18(%rsp)
    000001c2: 	movl	%edx, %esi
    000001c4: 	orl	%edi, %eax
    000001c6: 	movl	%r10d, %edi
    000001c9: 	movd	%eax, %xmm3
    000001cd: 	addl	%edx, %edi
    000001cf: 	pshuflw	$0x0, %xmm3, %xmm0
    000001d4: 	movl	%edi, %r9d
    000001d7: 	paddb	%xmm0, %xmm1
    000001db: 	addl	%ebx, %r9d
    000001de: 	movsbl	%r9b, %r9d
    000001e2: 	leal	(%rdx,%r9,2), %r13d
    000001e6: 	movsbl	0x45(%rsp), %edx
    000001eb: 	leal	(%r10,%r9,2), %r9d
    000001ef: 	movdqa	%xmm1, %xmm0
    000001f3: 	movdqa	%xmm1, %xmm2
    000001f7: 	addl	%r9d, %r9d
    000001fa: 	paddb	%xmm6, %xmm0
    000001fe: 	paddb	%xmm5, %xmm2
    00000202: 	addl	%edx, %esi
    00000204: 	movl	%edx, 0x1c(%rsp)
    00000208: 	movl	%esi, %r8d
    0000020b: 	subl	%r13d, %r9d
    0000020e: 	addl	%ebx, %r8d
    00000211: 	subl	%r13d, %r9d
    00000214: 	paddb	%xmm1, %xmm0
    00000218: 	paddb	%xmm2, %xmm1
    0000021c: 	movsbl	%r8b, %r8d
    00000220: 	leal	(%rdx,%r8,2), %edi
    00000224: 	movl	%edi, 0x2c(%rsp)
    00000228: 	paddb	%xmm1, %xmm1
    0000022c: 	paddb	%xmm0, %xmm0
    00000230: 	psubb	%xmm1, %xmm0
    00000234: 	pxor	%xmm1, %xmm1
    00000238: 	movdqa	%xmm0, %xmm3
    0000023c: 	psadbw	%xmm1, %xmm3
    00000240: 	movq	%xmm3, %rax
    00000245: 	movq	%xmm3, 0x68(%rsp)
    0000024b: 	movb	%al, 0x42(%rsp)
    0000024f: 	leal	(%rcx,%rbx), %eax
    00000252: 	movl	%edx, %ecx
    00000254: 	movsbl	0x46(%rsp), %edx
    00000259: 	addl	%r10d, %eax
    0000025c: 	movsbl	%al, %eax
    0000025f: 	addl	%edx, %ecx
    00000261: 	movl	%edx, %esi
    00000263: 	movl	%edx, 0x20(%rsp)
    00000267: 	leal	(%r10,%rax,2), %r14d
    0000026b: 	leal	(%r12,%rax,2), %eax
    0000026f: 	movl	0x18(%rsp), %r10d
    00000274: 	movl	%ecx, %edi
    00000276: 	addl	%eax, %eax
    00000278: 	addl	%ebx, %edi
    0000027a: 	leal	(%r11,%rbp), %ecx
    0000027e: 	addl	%r11d, %esi
    00000281: 	subl	%r14d, %eax
    00000284: 	leal	(%r10,%r8,2), %r8d
    00000288: 	movsbl	%dil, %edi
    0000028c: 	movl	0x1c(%rsp), %r10d
    00000291: 	subl	%r14d, %eax
    00000294: 	movzbl	(%rsp), %r14d
    00000299: 	addb	0x42(%rsp), %r14b
    0000029e: 	addl	%r8d, %r8d
    000002a1: 	addl	%r14d, %eax
    000002a4: 	movl	0x2c(%rsp), %r14d
    000002a9: 	leal	(%rdx,%rdi,2), %r15d
    000002ad: 	leal	(%r10,%rdi,2), %edi
    000002b1: 	movl	%r15d, 0x30(%rsp)
    000002b6: 	addl	%edi, %edi
    000002b8: 	addl	%ebx, %esi
    000002ba: 	addl	%r9d, %eax
    000002bd: 	subl	%r14d, %r8d
    000002c0: 	movsbl	%r11b, %edx
    000002c4: 	movsbl	%sil, %esi
    000002c8: 	addl	%ebx, %ecx
    000002ca: 	subl	%r14d, %r8d
    000002cd: 	movl	0x30(%rsp), %r14d
    000002d2: 	leal	(%rdx,%rsi,2), %r15d
    000002d6: 	movl	%edx, 0x24(%rsp)
    000002da: 	addl	%r8d, %eax
    000002dd: 	movl	%r15d, 0x34(%rsp)
    000002e2: 	movsbl	%bpl, %edx
    000002e6: 	movsbl	%cl, %ecx
    000002e9: 	subl	%r14d, %edi
    000002ec: 	movsbl	0x47(%rsp), %r15d
    000002f2: 	movl	%edx, 0x28(%rsp)
    000002f6: 	leal	(%rdx,%rcx,2), %edx
    000002f9: 	subl	%r14d, %edi
    000002fc: 	movl	0x34(%rsp), %r10d
    00000301: 	movl	%edx, 0x38(%rsp)
    00000305: 	addl	%edi, %eax
    00000307: 	movl	0x20(%rsp), %edi
    0000030b: 	leal	(%r15,%rbp), %edx
    0000030f: 	movl	0x28(%rsp), %r12d
    00000314: 	addl	%ebx, %edx
    00000316: 	leal	(%rdi,%rsi,2), %esi
    00000319: 	movl	0x24(%rsp), %edi
    0000031d: 	movsbl	%dl, %edx
    00000320: 	addl	%esi, %esi
    00000322: 	leal	(%r15,%rdx,2), %r15d
    00000326: 	leal	(%r12,%rdx,2), %edx
    0000032a: 	subl	%r10d, %esi
    0000032d: 	leal	(%rdi,%rcx,2), %ecx
    00000330: 	addl	%edx, %edx
    00000332: 	subl	%r10d, %esi
    00000335: 	addl	%ecx, %ecx
    00000337: 	subl	%r15d, %edx
    0000033a: 	addl	%esi, %eax
    0000033c: 	movl	0x38(%rsp), %esi
    00000340: 	subl	%r15d, %edx
    00000343: 	subl	%esi, %ecx
    00000345: 	subl	%esi, %ecx
    00000347: 	addl	%ecx, %eax
    00000349: 	addb	%al, %dl
    0000034b: 	jne	.Ltmp168 # Offset: 843
    00000351: 	addl	$0x1, 0x3c(%rsp)
    00000356: 	movl	0x3c(%rsp), %eax
    0000035a: 	cmpl	0x54(%rsp), %eax
    0000035e: 	jl	.Ltmp169 # Offset: 862
.Ltmp166:
    00000364: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000036b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000372: 	subq	$0x20, %rax
    00000376: 	cmpq	%rax, %rbx
    00000379: 	je	.Ltmp170 # Offset: 889
    0000037f: 	movq	0x60(%rsp), %rax
    00000384: 	leaq	0x10(%rbx), %rdi
    00000388: 	movq	%rdi, (%rbx)
    0000038b: 	movq	(%rax), %rbp
    0000038e: 	movq	0x8(%rax), %r12
    00000392: 	movq	%rbp, %rax
    00000395: 	addq	%r12, %rax
    00000398: 	je	.Ltmp171 # Offset: 920
    0000039a: 	testq	%rbp, %rbp
    0000039d: 	je	.Ltmp172 # Offset: 925
.Ltmp171:
    000003a3: 	movq	%r12, 0x70(%rsp)
    000003a8: 	cmpq	$0xf, %r12
    000003ac: 	ja	.Ltmp173 # Offset: 940
    000003b2: 	cmpq	$0x1, %r12
    000003b6: 	jne	.Ltmp174 # Offset: 950
    000003bc: 	movzbl	(%rbp), %eax
    000003c0: 	movb	%al, 0x10(%rbx)
.Ltmp177:
    000003c3: 	movq	%r12, 0x8(%rbx)
    000003c7: 	movb	$0x0, (%rdi,%r12)
    000003cc: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000003d3: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003da: 	addq	$0x20, %rax
    000003de: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000003e5: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000003ec: 	je	.Ltmp175 # Offset: 1004
.Ltmp178:
    000003f2: 	movq	-0x20(%rax), %rbp
    000003f6: 	callq	clock@PLT # Offset: 1014
    000003fb: 	movq	%rax, end_time(%rip)
    00000402: 	movq	0x78(%rsp), %rdx
    00000407: 	subq	%fs:0x28, %rdx
    00000410: 	jne	.Ltmp176 # Offset: 1040
    00000416: 	subq	start_time(%rip), %rax
    0000041d: 	pxor	%xmm0, %xmm0
    00000421: 	movq	%rbp, %rdi
    00000424: 	cvtsi2sd	%rax, %xmm0
    00000429: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000431: 	addq	$0x88, %rsp
    00000438: 	popq	%rbx
    00000439: 	popq	%rbp
    0000043a: 	popq	%r12
    0000043c: 	popq	%r13
    0000043e: 	popq	%r14
    00000440: 	popq	%r15
    00000442: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1090
    00000447: 	nopw	(%rax,%rax) # Size: 9
.Ltmp168:
    00000450: 	movq	0x60(%rsp), %rax
    00000455: 	leaq	DATAat0x4d004(%rip), %rsi
    0000045c: 	movl	$0x1, %edi
    00000461: 	movaps	%xmm4, (%rsp)
    00000465: 	movq	(%rax), %rdx
    00000468: 	xorl	%eax, %eax
    0000046a: 	callq	__printf_chk@PLT # Offset: 1130
    0000046f: 	addl	$0x1, 0x3c(%rsp)
    00000474: 	movl	iterations(%rip), %ecx
    0000047a: 	movl	0x3c(%rsp), %eax
    0000047e: 	movl	%ecx, 0x54(%rsp)
    00000482: 	cmpl	%ecx, %eax
    00000484: 	jge	.Ltmp166 # Offset: 1156
    0000048a: 	movq	0x48(%rsp), %rax
    0000048f: 	movdqa	(%rsp), %xmm4
    00000494: 	pxor	%xmm7, %xmm7
    00000498: 	movzbl	(%rax), %edi
    0000049b: 	movzbl	0x1f3a(%rax), %ecx
    000004a2: 	movq	0x1f30(%rax), %xmm6
    000004aa: 	movzbl	0x1f3d(%rax), %r11d
    000004b2: 	movb	%dil, 0x52(%rsp)
    000004b7: 	movzbl	0x1(%rax), %edi
    000004bb: 	movb	%cl, 0x44(%rsp)
    000004bf: 	movzbl	0x1f3e(%rax), %ebp
    000004c6: 	movb	%dil, 0x53(%rsp)
    000004cb: 	movzbl	0x1f38(%rax), %edi
    000004d2: 	movq	0x1f31(%rax), %xmm5
    000004da: 	movzbl	0x1f3c(%rax), %ecx
    000004e1: 	movb	%dil, 0x17(%rsp)
    000004e6: 	movzbl	0x1f39(%rax), %edi
    000004ed: 	movb	%cl, 0x46(%rsp)
    000004f1: 	movb	%dil, 0x43(%rsp)
    000004f6: 	movzbl	0x1f3b(%rax), %edi
    000004fd: 	movzbl	0x1f3f(%rax), %eax
    00000504: 	movb	%dil, 0x45(%rsp)
    00000509: 	movb	%al, 0x47(%rsp)
    0000050d: 	jmp	.Ltmp169 # Offset: 1293
.Ltmp173:
    00000512: 	movq	%rbx, %rdi
    00000515: 	leaq	0x70(%rsp), %rsi
    0000051a: 	xorl	%edx, %edx
    0000051c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1308
    00000521: 	movq	%rax, (%rbx)
    00000524: 	movq	%rax, %rdi
    00000527: 	movq	0x70(%rsp), %rax
    0000052c: 	movq	%rax, 0x10(%rbx)
.Ltmp179:
    00000530: 	movq	%r12, %rdx
    00000533: 	movq	%rbp, %rsi
    00000536: 	callq	memcpy@PLT # Offset: 1334
    0000053b: 	movq	0x70(%rsp), %r12
    00000540: 	movq	(%rbx), %rdi
    00000543: 	jmp	.Ltmp177 # Offset: 1347
.Ltmp170:
    00000548: 	movq	0x60(%rsp), %rsi
    0000054d: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000554: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1364
    00000559: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000560: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000567: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000056e: 	jne	.Ltmp178 # Offset: 1390
.Ltmp175:
    00000574: 	movq	-0x8(%rdx), %rax
    00000578: 	addq	$0x200, %rax
    0000057e: 	jmp	.Ltmp178 # Offset: 1406
.Ltmp174:
    00000583: 	testq	%r12, %r12
    00000586: 	je	.Ltmp177 # Offset: 1414
    0000058c: 	jmp	.Ltmp179 # Offset: 1420
.Ltmp176:
    0000058e: 	callq	__stack_chk_fail@PLT # Offset: 1422
.Ltmp172:
    00000593: 	leaq	DATAat0x4d018(%rip), %rdi
    0000059a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1434
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE2Ia14custom_cse_addIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z9test_CSE2Ih14custom_cse_mulIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 49
  State       : disassembled
  Address     : 0x4230
  Size        : 0x3c6
  MaxSize     : 0x3d0
  Offset      : 0x4230
  Section     : .text
  Orc Section : .local.text._Z9test_CSE2Ih14custom_cse_mulIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB048:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%edx, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%esi, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdi, %rbx
    00000016: 	subq	$0x38, %rsp
    0000001a: 	movq	%rcx, 0x10(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x28(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r9d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r9d, %r9d
    00000045: 	jle	.Ltmp180 # Offset: 69
    0000004b: 	leal	-0x1(%rbp), %r8d
    0000004f: 	leal	-0x2(%rbp), %eax
    00000052: 	movzbl	(%rbx), %edi
    00000055: 	movzbl	0x1(%rbx), %esi
    00000059: 	movl	%eax, 0x4(%rsp)
    0000005d: 	movl	%r8d, %eax
    00000060: 	movl	%r8d, %r14d
    00000063: 	xorl	%r13d, %r13d
    00000066: 	shrl	$0x4, %eax
    00000069: 	andl	$-0x10, %r14d
    0000006d: 	subl	$0x1, %eax
    00000070: 	shlq	$0x4, %rax
    00000074: 	leaq	0x10(%rbx,%rax), %r12
    00000079: 	leal	0x1(%r14), %eax
    0000007d: 	movl	%eax, 0x8(%rsp)
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp186:
    00000088: 	movl	%edi, %eax
    0000008a: 	movl	%edi, %edx
    0000008c: 	imull	%esi, %eax
    0000008f: 	subl	%esi, %edx
    00000091: 	addl	%r15d, %eax
    00000094: 	movzbl	%al, %ecx
    00000097: 	leal	(%rdx,%rax,2), %edx
    0000009a: 	movzbl	%sil, %eax
    0000009e: 	addl	%edi, %edx
    000000a0: 	leal	(%rax,%rcx,2), %eax
    000000a3: 	subl	%eax, %edx
    000000a5: 	cmpl	$0x1, %ebp
    000000a8: 	jle	.Ltmp181 # Offset: 168
    000000ae: 	cmpl	$0xe, 0x4(%rsp)
    000000b3: 	jbe	.Ltmp182 # Offset: 179
    000000b9: 	movq	%rbx, %rax
    000000bc: 	pxor	%xmm1, %xmm1
.Ltmp183:
    000000c0: 	movdqu	(%rax), %xmm0
    000000c4: 	movdqu	0x1(%rax), %xmm2
    000000c9: 	addq	$0x10, %rax
    000000cd: 	psubb	%xmm2, %xmm0
    000000d1: 	paddb	%xmm0, %xmm0
    000000d5: 	paddb	%xmm0, %xmm1
    000000d9: 	cmpq	%rax, %r12
    000000dc: 	jne	.Ltmp183 # Offset: 220
    000000de: 	movdqa	%xmm1, %xmm0
    000000e2: 	psrldq	$0x8, %xmm0
    000000e7: 	paddb	%xmm0, %xmm1
    000000eb: 	pxor	%xmm0, %xmm0
    000000ef: 	psadbw	%xmm0, %xmm1
    000000f3: 	movd	%xmm1, %eax
    000000f7: 	addl	%eax, %edx
    000000f9: 	cmpl	%r14d, %r8d
    000000fc: 	je	.Ltmp181 # Offset: 252
    00000102: 	movl	0x8(%rsp), %ecx
    00000106: 	movl	%r14d, %eax
.Ltmp194:
    00000109: 	movl	%ebp, %r11d
    0000010c: 	subl	%eax, %r11d
    0000010f: 	leal	-0x1(%r11), %r10d
    00000113: 	subl	$0x2, %r11d
    00000117: 	cmpl	$0x6, %r11d
    0000011b: 	jbe	.Ltmp184 # Offset: 283
    0000011d: 	movq	0x1(%rbx,%rax), %xmm1
    00000123: 	movq	(%rbx,%rax), %xmm0
    00000128: 	psubb	%xmm1, %xmm0
    0000012c: 	pxor	%xmm1, %xmm1
    00000130: 	paddb	%xmm0, %xmm0
    00000134: 	movdqa	%xmm0, %xmm3
    00000138: 	psadbw	%xmm1, %xmm3
    0000013c: 	movq	%xmm3, %rax
    00000141: 	movq	%xmm3, 0x18(%rsp)
    00000147: 	movl	%eax, %r11d
    0000014a: 	movl	%r10d, %eax
    0000014d: 	andl	$-0x8, %eax
    00000150: 	addl	%r11d, %edx
    00000153: 	addl	%eax, %ecx
    00000155: 	cmpl	%r10d, %eax
    00000158: 	je	.Ltmp181 # Offset: 344
.Ltmp184:
    0000015e: 	movslq	%ecx, %rax
    00000161: 	addq	%rbx, %rax
    00000164: 	movzbl	(%rax), %r10d
    00000168: 	movzbl	-0x1(%rax), %eax
    0000016c: 	subl	%r10d, %eax
    0000016f: 	leal	(%rdx,%rax,2), %edx
    00000172: 	leal	0x1(%rcx), %eax
    00000175: 	cmpl	%ebp, %eax
    00000177: 	jge	.Ltmp181 # Offset: 375
    00000179: 	cltq
    0000017b: 	movzbl	(%rbx,%rax), %eax
    0000017f: 	subl	%eax, %r10d
    00000182: 	leal	(%rdx,%r10,2), %edx
    00000186: 	leal	0x2(%rcx), %r10d
    0000018a: 	cmpl	%r10d, %ebp
    0000018d: 	jle	.Ltmp181 # Offset: 397
    0000018f: 	movslq	%r10d, %r10
    00000192: 	movzbl	(%rbx,%r10), %r10d
    00000197: 	subl	%r10d, %eax
    0000019a: 	leal	(%rdx,%rax,2), %edx
    0000019d: 	leal	0x3(%rcx), %eax
    000001a0: 	cmpl	%eax, %ebp
    000001a2: 	jle	.Ltmp181 # Offset: 418
    000001a4: 	cltq
    000001a6: 	movzbl	(%rbx,%rax), %eax
    000001aa: 	subl	%eax, %r10d
    000001ad: 	leal	(%rdx,%r10,2), %edx
    000001b1: 	leal	0x4(%rcx), %r10d
    000001b5: 	cmpl	%r10d, %ebp
    000001b8: 	jle	.Ltmp181 # Offset: 440
    000001ba: 	movslq	%r10d, %r10
    000001bd: 	movzbl	(%rbx,%r10), %r10d
    000001c2: 	subl	%r10d, %eax
    000001c5: 	leal	(%rdx,%rax,2), %edx
    000001c8: 	leal	0x5(%rcx), %eax
    000001cb: 	cmpl	%eax, %ebp
    000001cd: 	jle	.Ltmp181 # Offset: 461
    000001cf: 	cltq
    000001d1: 	addl	$0x6, %ecx
    000001d4: 	movzbl	(%rbx,%rax), %eax
    000001d8: 	subl	%eax, %r10d
    000001db: 	leal	(%rdx,%r10,2), %edx
    000001df: 	cmpl	%ecx, %ebp
    000001e1: 	jle	.Ltmp181 # Offset: 481
    000001e3: 	movslq	%ecx, %rcx
    000001e6: 	subb	(%rbx,%rcx), %al
    000001e9: 	leal	(%rdx,%rax,2), %edx
.Ltmp181:
    000001ec: 	testb	%dl, %dl
    000001ee: 	jne	.Ltmp185 # Offset: 494
    000001f4: 	addl	$0x1, %r13d
    000001f8: 	cmpl	%r9d, %r13d
    000001fb: 	jl	.Ltmp186 # Offset: 507
.Ltmp180:
    00000201: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000208: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000020f: 	subq	$0x20, %rax
    00000213: 	cmpq	%rax, %rbx
    00000216: 	je	.Ltmp187 # Offset: 534
    0000021c: 	movq	0x10(%rsp), %rax
    00000221: 	leaq	0x10(%rbx), %rdi
    00000225: 	movq	%rdi, (%rbx)
    00000228: 	movq	(%rax), %rbp
    0000022b: 	movq	0x8(%rax), %r12
    0000022f: 	movq	%rbp, %rax
    00000232: 	addq	%r12, %rax
    00000235: 	je	.Ltmp188 # Offset: 565
    00000237: 	testq	%rbp, %rbp
    0000023a: 	je	.Ltmp189 # Offset: 570
.Ltmp188:
    00000240: 	movq	%r12, 0x20(%rsp)
    00000245: 	cmpq	$0xf, %r12
    00000249: 	ja	.Ltmp190 # Offset: 585
    0000024f: 	cmpq	$0x1, %r12
    00000253: 	jne	.Ltmp191 # Offset: 595
    00000259: 	movzbl	(%rbp), %eax
    0000025d: 	movb	%al, 0x10(%rbx)
.Ltmp195:
    00000260: 	movq	%r12, 0x8(%rbx)
    00000264: 	movb	$0x0, (%rdi,%r12)
    00000269: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000270: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000277: 	addq	$0x20, %rax
    0000027b: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000282: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000289: 	je	.Ltmp192 # Offset: 649
.Ltmp196:
    0000028f: 	movq	-0x20(%rax), %rbp
    00000293: 	callq	clock@PLT # Offset: 659
    00000298: 	movq	%rax, end_time(%rip)
    0000029f: 	movq	0x28(%rsp), %rdx
    000002a4: 	subq	%fs:0x28, %rdx
    000002ad: 	jne	.Ltmp193 # Offset: 685
    000002b3: 	subq	start_time(%rip), %rax
    000002ba: 	pxor	%xmm0, %xmm0
    000002be: 	movq	%rbp, %rdi
    000002c1: 	cvtsi2sd	%rax, %xmm0
    000002c6: 	divsd	DATAat0x4d640(%rip), %xmm0
    000002ce: 	addq	$0x38, %rsp
    000002d2: 	popq	%rbx
    000002d3: 	popq	%rbp
    000002d4: 	popq	%r12
    000002d6: 	popq	%r13
    000002d8: 	popq	%r14
    000002da: 	popq	%r15
    000002dc: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 732
    000002e1: 	nopl	(%rax) # Size: 7
.Ltmp185:
    000002e8: 	movq	0x10(%rsp), %rax
    000002ed: 	leaq	DATAat0x4d004(%rip), %rsi
    000002f4: 	movl	$0x1, %edi
    000002f9: 	movl	%r8d, 0xc(%rsp)
    000002fe: 	addl	$0x1, %r13d
    00000302: 	movq	(%rax), %rdx
    00000305: 	xorl	%eax, %eax
    00000307: 	callq	__printf_chk@PLT # Offset: 775
    0000030c: 	movl	iterations(%rip), %r9d
    00000313: 	cmpl	%r9d, %r13d
    00000316: 	jge	.Ltmp180 # Offset: 790
    0000031c: 	movzbl	(%rbx), %edi
    0000031f: 	movzbl	0x1(%rbx), %esi
    00000323: 	movl	0xc(%rsp), %r8d
    00000328: 	jmp	.Ltmp186 # Offset: 808
.Ltmp182:
    0000032d: 	xorl	%eax, %eax
    0000032f: 	movl	$0x1, %ecx
    00000334: 	jmp	.Ltmp194 # Offset: 820
.Ltmp190:
    00000339: 	movq	%rbx, %rdi
    0000033c: 	leaq	0x20(%rsp), %rsi
    00000341: 	xorl	%edx, %edx
    00000343: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 835
    00000348: 	movq	%rax, (%rbx)
    0000034b: 	movq	%rax, %rdi
    0000034e: 	movq	0x20(%rsp), %rax
    00000353: 	movq	%rax, 0x10(%rbx)
.Ltmp197:
    00000357: 	movq	%r12, %rdx
    0000035a: 	movq	%rbp, %rsi
    0000035d: 	callq	memcpy@PLT # Offset: 861
    00000362: 	movq	0x20(%rsp), %r12
    00000367: 	movq	(%rbx), %rdi
    0000036a: 	jmp	.Ltmp195 # Offset: 874
.Ltmp187:
    0000036f: 	movq	0x10(%rsp), %rsi
    00000374: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000037b: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 891
    00000380: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000387: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000038e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000395: 	jne	.Ltmp196 # Offset: 917
.Ltmp192:
    0000039b: 	movq	-0x8(%rdx), %rax
    0000039f: 	addq	$0x200, %rax
    000003a5: 	jmp	.Ltmp196 # Offset: 933
.Ltmp191:
    000003aa: 	testq	%r12, %r12
    000003ad: 	je	.Ltmp195 # Offset: 941
    000003b3: 	jmp	.Ltmp197 # Offset: 947
.Ltmp193:
    000003b5: 	callq	__stack_chk_fail@PLT # Offset: 949
.Ltmp189:
    000003ba: 	leaq	DATAat0x4d018(%rip), %rdi
    000003c1: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 961
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE2Ih14custom_cse_mulIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z20test_CSE2_add_inlineIa14custom_cse_addIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z20test_CSE2_add_inlineIa14custom_cse_addIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z20test_CSE2_add_inlineIa14custom_cse_addIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/simple_types_cse.cpp/1
  Number      : 50
  State       : disassembled
  Address     : 0x4600
  Size        : 0x3e8
  MaxSize     : 0x3f0
  Offset      : 0x4600
  Section     : .text
  Orc Section : .local.text._Z20test_CSE2_add_inlineIa14custom_cse_addIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB049:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movl	%esi, %ebp
    0000000b: 	pushq	%rbx
    0000000c: 	movq	%rdi, %rbx
    0000000f: 	subq	$0x48, %rsp
    00000013: 	movq	%rdx, 0x20(%rsp)
    00000018: 	movq	%fs:0x28, %rax
    00000021: 	movq	%rax, 0x38(%rsp)
    00000026: 	xorl	%eax, %eax
    00000028: 	callq	clock@PLT # Offset: 40
    0000002d: 	movq	%rax, start_time(%rip)
    00000034: 	movl	iterations(%rip), %eax
    0000003a: 	movl	%eax, 0xc(%rsp)
    0000003e: 	testl	%eax, %eax
    00000040: 	jle	.Ltmp198 # Offset: 64
    00000046: 	movzbl	%bpl, %r12d
    0000004a: 	movzbl	(%rbx), %edi
    0000004d: 	xorl	%r13d, %r13d
    00000050: 	movq	0x1f30(%rbx), %xmm5
    00000058: 	movl	%r12d, %eax
    0000005b: 	movzbl	0x1f38(%rbx), %r15d
    00000063: 	movq	0x1f31(%rbx), %xmm4
    0000006b: 	leaq	0x1f30(%rbx), %rbp
    00000072: 	movd	%eax, %xmm3
    00000076: 	movb	%dil, 0xb(%rsp)
    0000007b: 	movzbl	0x1f39(%rbx), %r11d
    00000083: 	pxor	%xmm6, %xmm6
    00000087: 	punpcklbw	%xmm3, %xmm3
    0000008b: 	movzbl	0x1f3a(%rbx), %r10d
    00000093: 	movzbl	0x1f3b(%rbx), %r9d
    0000009b: 	punpcklwd	%xmm3, %xmm3
    0000009f: 	movzbl	0x1f3c(%rbx), %r8d
    000000a7: 	movzbl	0x1f3d(%rbx), %edi
    000000ae: 	movzbl	0x1f3e(%rbx), %esi
    000000b5: 	movzbl	0x1f3f(%rbx), %r14d
    000000bd: 	pshufd	$0x0, %xmm3, %xmm3
    000000c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp201:
    000000c8: 	movzbl	0xb(%rsp), %ecx
    000000cd: 	subb	0x1(%rbx), %cl
    000000d0: 	movq	%rbx, %rax
    000000d3: 	pxor	%xmm1, %xmm1
    000000d7: 	addl	%ecx, %ecx
    000000d9: 	nopl	(%rax) # Size: 7
.Ltmp199:
    000000e0: 	movdqu	(%rax), %xmm7
    000000e4: 	movdqu	0x1(%rax), %xmm0
    000000e9: 	addq	$0x10, %rax
    000000ed: 	movdqu	-0xf(%rax), %xmm2
    000000f2: 	paddb	%xmm7, %xmm0
    000000f6: 	paddb	%xmm3, %xmm0
    000000fa: 	paddb	%xmm0, %xmm0
    000000fe: 	paddb	%xmm0, %xmm2
    00000102: 	paddb	%xmm7, %xmm0
    00000106: 	paddb	%xmm0, %xmm0
    0000010a: 	psubb	%xmm2, %xmm1
    0000010e: 	psubb	%xmm2, %xmm0
    00000112: 	paddb	%xmm0, %xmm1
    00000116: 	cmpq	%rax, %rbp
    00000119: 	jne	.Ltmp199 # Offset: 281
    0000011b: 	movdqa	%xmm1, %xmm0
    0000011f: 	psrldq	$0x8, %xmm0
    00000124: 	paddb	%xmm0, %xmm1
    00000128: 	movdqa	%xmm4, %xmm0
    0000012c: 	psadbw	%xmm6, %xmm1
    00000130: 	paddb	%xmm5, %xmm0
    00000134: 	movd	%xmm1, %eax
    00000138: 	addl	%eax, %ecx
    0000013a: 	movl	%r12d, %eax
    0000013d: 	shll	$0x8, %eax
    00000140: 	orl	%r12d, %eax
    00000143: 	movd	%eax, %xmm7
    00000147: 	pshuflw	$0x0, %xmm7, %xmm1
    0000014c: 	paddb	%xmm1, %xmm0
    00000150: 	paddb	%xmm0, %xmm0
    00000154: 	movdqa	%xmm0, %xmm1
    00000158: 	paddb	%xmm4, %xmm0
    0000015c: 	paddb	%xmm5, %xmm1
    00000160: 	paddb	%xmm0, %xmm0
    00000164: 	paddb	%xmm1, %xmm1
    00000168: 	psubb	%xmm0, %xmm1
    0000016c: 	pxor	%xmm0, %xmm0
    00000170: 	movdqa	%xmm1, %xmm7
    00000174: 	psadbw	%xmm0, %xmm7
    00000178: 	movq	%xmm7, %rdx
    0000017d: 	movq	%xmm7, 0x28(%rsp)
    00000183: 	movl	%edx, %eax
    00000185: 	movl	%r15d, %edx
    00000188: 	subl	%r11d, %edx
    0000018b: 	addl	%ecx, %eax
    0000018d: 	leal	(%rax,%rdx,2), %eax
    00000190: 	movl	%r11d, %edx
    00000193: 	subl	%r10d, %edx
    00000196: 	leal	(%rax,%rdx,2), %eax
    00000199: 	movl	%r10d, %edx
    0000019c: 	subl	%r9d, %edx
    0000019f: 	leal	(%rax,%rdx,2), %eax
    000001a2: 	movl	%r9d, %edx
    000001a5: 	subl	%r8d, %edx
    000001a8: 	leal	(%rax,%rdx,2), %eax
    000001ab: 	movl	%r8d, %edx
    000001ae: 	subl	%edi, %edx
    000001b0: 	leal	(%rax,%rdx,2), %eax
    000001b3: 	movl	%edi, %edx
    000001b5: 	subl	%esi, %edx
    000001b7: 	leal	(%rax,%rdx,2), %eax
    000001ba: 	movl	%esi, %edx
    000001bc: 	subl	%r14d, %edx
    000001bf: 	leal	(%rax,%rdx,2), %eax
    000001c2: 	testb	%al, %al
    000001c4: 	jne	.Ltmp200 # Offset: 452
    000001ca: 	addl	$0x1, %r13d
    000001ce: 	cmpl	0xc(%rsp), %r13d
    000001d3: 	jl	.Ltmp201 # Offset: 467
.Ltmp198:
    000001d9: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001e0: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001e7: 	subq	$0x20, %rax
    000001eb: 	cmpq	%rax, %rbx
    000001ee: 	je	.Ltmp202 # Offset: 494
    000001f4: 	movq	0x20(%rsp), %rax
    000001f9: 	leaq	0x10(%rbx), %rdi
    000001fd: 	movq	%rdi, (%rbx)
    00000200: 	movq	(%rax), %rbp
    00000203: 	movq	0x8(%rax), %r12
    00000207: 	movq	%rbp, %rax
    0000020a: 	addq	%r12, %rax
    0000020d: 	je	.Ltmp203 # Offset: 525
    0000020f: 	testq	%rbp, %rbp
    00000212: 	je	.Ltmp204 # Offset: 530
.Ltmp203:
    00000218: 	movq	%r12, 0x30(%rsp)
    0000021d: 	cmpq	$0xf, %r12
    00000221: 	ja	.Ltmp205 # Offset: 545
    00000227: 	cmpq	$0x1, %r12
    0000022b: 	jne	.Ltmp206 # Offset: 555
    00000231: 	movzbl	(%rbp), %eax
    00000235: 	movb	%al, 0x10(%rbx)
.Ltmp209:
    00000238: 	movq	%r12, 0x8(%rbx)
    0000023c: 	movb	$0x0, (%rdi,%r12)
    00000241: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000248: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000024f: 	addq	$0x20, %rax
    00000253: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000025a: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000261: 	je	.Ltmp207 # Offset: 609
.Ltmp210:
    00000267: 	movq	-0x20(%rax), %rbp
    0000026b: 	callq	clock@PLT # Offset: 619
    00000270: 	movq	%rax, end_time(%rip)
    00000277: 	movq	0x38(%rsp), %rdx
    0000027c: 	subq	%fs:0x28, %rdx
    00000285: 	jne	.Ltmp208 # Offset: 645
    0000028b: 	subq	start_time(%rip), %rax
    00000292: 	pxor	%xmm0, %xmm0
    00000296: 	movq	%rbp, %rdi
    00000299: 	cvtsi2sd	%rax, %xmm0
    0000029e: 	divsd	DATAat0x4d640(%rip), %xmm0
    000002a6: 	addq	$0x48, %rsp
    000002aa: 	popq	%rbx
    000002ab: 	popq	%rbp
    000002ac: 	popq	%r12
    000002ae: 	popq	%r13
    000002b0: 	popq	%r14
    000002b2: 	popq	%r15
    000002b4: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 692
    000002b9: 	nopl	(%rax) # Size: 7
.Ltmp200:
    000002c0: 	movq	0x20(%rsp), %rax
    000002c5: 	leaq	DATAat0x4d004(%rip), %rsi
    000002cc: 	movl	$0x1, %edi
    000002d1: 	movaps	%xmm3, 0x10(%rsp)
    000002d6: 	addl	$0x1, %r13d
    000002da: 	movq	(%rax), %rdx
    000002dd: 	xorl	%eax, %eax
    000002df: 	callq	__printf_chk@PLT # Offset: 735
    000002e4: 	movl	iterations(%rip), %eax
    000002ea: 	movl	%eax, 0xc(%rsp)
    000002ee: 	cmpl	%eax, %r13d
    000002f1: 	jge	.Ltmp198 # Offset: 753
    000002f7: 	movzbl	(%rbx), %eax
    000002fa: 	movzbl	0x1f38(%rbx), %r15d
    00000302: 	pxor	%xmm6, %xmm6
    00000306: 	movq	0x1f30(%rbx), %xmm5
    0000030e: 	movzbl	0x1f39(%rbx), %r11d
    00000316: 	movb	%al, 0xb(%rsp)
    0000031a: 	movzbl	0x1f3a(%rbx), %r10d
    00000322: 	movq	0x1f31(%rbx), %xmm4
    0000032a: 	movzbl	0x1f3b(%rbx), %r9d
    00000332: 	movzbl	0x1f3c(%rbx), %r8d
    0000033a: 	movzbl	0x1f3d(%rbx), %edi
    00000341: 	movzbl	0x1f3e(%rbx), %esi
    00000348: 	movzbl	0x1f3f(%rbx), %r14d
    00000350: 	movdqa	0x10(%rsp), %xmm3
    00000356: 	jmp	.Ltmp201 # Offset: 854
.Ltmp205:
    0000035b: 	movq	%rbx, %rdi
    0000035e: 	leaq	0x30(%rsp), %rsi
    00000363: 	xorl	%edx, %edx
    00000365: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 869
    0000036a: 	movq	%rax, (%rbx)
    0000036d: 	movq	%rax, %rdi
    00000370: 	movq	0x30(%rsp), %rax
    00000375: 	movq	%rax, 0x10(%rbx)
.Ltmp211:
    00000379: 	movq	%r12, %rdx
    0000037c: 	movq	%rbp, %rsi
    0000037f: 	callq	memcpy@PLT # Offset: 895
    00000384: 	movq	0x30(%rsp), %r12
    00000389: 	movq	(%rbx), %rdi
    0000038c: 	jmp	.Ltmp209 # Offset: 908
.Ltmp202:
    00000391: 	movq	0x20(%rsp), %rsi
    00000396: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000039d: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 925
    000003a2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000003a9: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000003b0: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003b7: 	jne	.Ltmp210 # Offset: 951
.Ltmp207:
    000003bd: 	movq	-0x8(%rdx), %rax
    000003c1: 	addq	$0x200, %rax
    000003c7: 	jmp	.Ltmp210 # Offset: 967
.Ltmp206:
    000003cc: 	testq	%r12, %r12
    000003cf: 	je	.Ltmp209 # Offset: 975
    000003d5: 	jmp	.Ltmp211 # Offset: 981
.Ltmp208:
    000003d7: 	callq	__stack_chk_fail@PLT # Offset: 983
.Ltmp204:
    000003dc: 	leaq	DATAat0x4d018(%rip), %rdi
    000003e3: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 995
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_CSE2_add_inlineIa14custom_cse_addIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z28test_CSE2_add_inline_flippedIj14custom_cse_addIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 51
  State       : disassembled
  Address     : 0x49f0
  Size        : 0x30d
  MaxSize     : 0x310
  Offset      : 0x49f0
  Section     : .text
  Orc Section : .local.text._Z28test_CSE2_add_inline_flippedIj14custom_cse_addIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB050:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rcx, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movq	%fs:0x28, %rax
    00000024: 	movq	%rax, 0x18(%rsp)
    00000029: 	xorl	%eax, %eax
    0000002b: 	callq	clock@PLT # Offset: 43
    00000030: 	movl	iterations(%rip), %edi
    00000036: 	movq	%rax, start_time(%rip)
    0000003d: 	testl	%edi, %edi
    0000003f: 	jle	.Ltmp212 # Offset: 63
    00000045: 	leal	-0x1(%r14), %r8d
    00000049: 	movl	(%rbx), %r10d
    0000004c: 	leal	-0x2(%r14), %r9d
    00000050: 	xorl	%r13d, %r13d
    00000053: 	movl	%r8d, %eax
    00000056: 	movl	%r8d, %r15d
    00000059: 	shrl	$0x2, %eax
    0000005c: 	andl	$-0x4, %r15d
    00000060: 	subl	$0x1, %eax
    00000063: 	shlq	$0x4, %rax
    00000067: 	leaq	0x10(%rbx,%rax), %rbp
    0000006c: 	leal	0x1(%r15), %eax
    00000070: 	movl	%eax, 0x4(%rsp)
    00000074: 	nopl	(%rax) # Size: 4
.Ltmp218:
    00000078: 	movl	%r10d, %edx
    0000007b: 	subl	0x4(%rbx), %edx
    0000007e: 	addl	%edx, %edx
    00000080: 	cmpl	$0x1, %r14d
    00000084: 	jle	.Ltmp213 # Offset: 132
    0000008a: 	cmpl	$0x2, %r9d
    0000008e: 	jbe	.Ltmp214 # Offset: 142
    00000094: 	movq	%rbx, %rax
    00000097: 	pxor	%xmm1, %xmm1
    0000009b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp215:
    000000a0: 	movdqu	(%rax), %xmm0
    000000a4: 	movdqu	0x4(%rax), %xmm2
    000000a9: 	addq	$0x10, %rax
    000000ad: 	psubd	%xmm2, %xmm0
    000000b1: 	pslld	$0x1, %xmm0
    000000b6: 	paddd	%xmm0, %xmm1
    000000ba: 	cmpq	%rbp, %rax
    000000bd: 	jne	.Ltmp215 # Offset: 189
    000000bf: 	movdqa	%xmm1, %xmm0
    000000c3: 	psrldq	$0x8, %xmm0
    000000c8: 	paddd	%xmm0, %xmm1
    000000cc: 	movdqa	%xmm1, %xmm0
    000000d0: 	psrldq	$0x4, %xmm0
    000000d5: 	paddd	%xmm0, %xmm1
    000000d9: 	movd	%xmm1, %eax
    000000dd: 	addl	%eax, %edx
    000000df: 	cmpl	%r8d, %r15d
    000000e2: 	je	.Ltmp213 # Offset: 226
    000000e4: 	movl	0x4(%rsp), %eax
    000000e8: 	movl	%r15d, %ecx
.Ltmp226:
    000000eb: 	movl	%r14d, %r11d
    000000ee: 	subl	%ecx, %r11d
    000000f1: 	leal	-0x1(%r11), %esi
    000000f5: 	cmpl	$0x2, %r11d
    000000f9: 	je	.Ltmp216 # Offset: 249
    000000fb: 	movq	(%rbx,%rcx,4), %xmm0
    00000100: 	movq	0x4(%rbx,%rcx,4), %xmm1
    00000106: 	psubd	%xmm1, %xmm0
    0000010a: 	pslld	$0x1, %xmm0
    0000010f: 	movd	%xmm0, %r11d
    00000114: 	pshufd	$0xe5, %xmm0, %xmm3
    00000119: 	movd	%xmm3, %ecx
    0000011d: 	addl	%r11d, %ecx
    00000120: 	addl	%ecx, %edx
    00000122: 	movl	%esi, %ecx
    00000124: 	andl	$-0x2, %ecx
    00000127: 	addl	%ecx, %eax
    00000129: 	cmpl	%ecx, %esi
    0000012b: 	je	.Ltmp213 # Offset: 299
.Ltmp216:
    0000012d: 	cltq
    0000012f: 	movl	-0x4(%rbx,%rax,4), %ecx
    00000133: 	subl	(%rbx,%rax,4), %ecx
    00000136: 	leal	(%rdx,%rcx,2), %edx
.Ltmp213:
    00000139: 	testl	%edx, %edx
    0000013b: 	jne	.Ltmp217 # Offset: 315
    00000141: 	addl	$0x1, %r13d
    00000145: 	cmpl	%edi, %r13d
    00000148: 	jl	.Ltmp218 # Offset: 328
.Ltmp212:
    0000014e: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000155: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000015c: 	subq	$0x20, %rax
    00000160: 	cmpq	%rax, %rbx
    00000163: 	je	.Ltmp219 # Offset: 355
    00000169: 	leaq	0x10(%rbx), %rdi
    0000016d: 	movq	%rdi, (%rbx)
    00000170: 	movq	(%r12), %rbp
    00000174: 	movq	0x8(%r12), %r12
    00000179: 	movq	%rbp, %rax
    0000017c: 	addq	%r12, %rax
    0000017f: 	je	.Ltmp220 # Offset: 383
    00000181: 	testq	%rbp, %rbp
    00000184: 	je	.Ltmp221 # Offset: 388
.Ltmp220:
    0000018a: 	movq	%r12, 0x10(%rsp)
    0000018f: 	cmpq	$0xf, %r12
    00000193: 	ja	.Ltmp222 # Offset: 403
    00000199: 	cmpq	$0x1, %r12
    0000019d: 	jne	.Ltmp223 # Offset: 413
    000001a3: 	movzbl	(%rbp), %eax
    000001a7: 	movb	%al, 0x10(%rbx)
.Ltmp227:
    000001aa: 	movq	%r12, 0x8(%rbx)
    000001ae: 	movb	$0x0, (%rdi,%r12)
    000001b3: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001ba: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001c1: 	addq	$0x20, %rax
    000001c5: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001cc: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000001d3: 	je	.Ltmp224 # Offset: 467
.Ltmp228:
    000001d9: 	movq	-0x20(%rax), %rbp
    000001dd: 	callq	clock@PLT # Offset: 477
    000001e2: 	movq	%rax, end_time(%rip)
    000001e9: 	movq	0x18(%rsp), %rdx
    000001ee: 	subq	%fs:0x28, %rdx
    000001f7: 	jne	.Ltmp225 # Offset: 503
    000001fd: 	subq	start_time(%rip), %rax
    00000204: 	pxor	%xmm0, %xmm0
    00000208: 	movq	%rbp, %rdi
    0000020b: 	cvtsi2sd	%rax, %xmm0
    00000210: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000218: 	addq	$0x28, %rsp
    0000021c: 	popq	%rbx
    0000021d: 	popq	%rbp
    0000021e: 	popq	%r12
    00000220: 	popq	%r13
    00000222: 	popq	%r14
    00000224: 	popq	%r15
    00000226: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 550
    0000022b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp217:
    00000230: 	movq	(%r12), %rdx
    00000234: 	movl	$0x1, %edi
    00000239: 	xorl	%eax, %eax
    0000023b: 	movl	%r8d, 0xc(%rsp)
    00000240: 	leaq	DATAat0x4d004(%rip), %rsi
    00000247: 	movl	%r9d, 0x8(%rsp)
    0000024c: 	addl	$0x1, %r13d
    00000250: 	callq	__printf_chk@PLT # Offset: 592
    00000255: 	movl	iterations(%rip), %edi
    0000025b: 	cmpl	%r13d, %edi
    0000025e: 	jle	.Ltmp212 # Offset: 606
    00000264: 	movl	(%rbx), %r10d
    00000267: 	movl	0x8(%rsp), %r9d
    0000026c: 	movl	0xc(%rsp), %r8d
    00000271: 	jmp	.Ltmp218 # Offset: 625
.Ltmp214:
    00000276: 	xorl	%ecx, %ecx
    00000278: 	movl	$0x1, %eax
    0000027d: 	jmp	.Ltmp226 # Offset: 637
.Ltmp222:
    00000282: 	movq	%rbx, %rdi
    00000285: 	leaq	0x10(%rsp), %rsi
    0000028a: 	xorl	%edx, %edx
    0000028c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 652
    00000291: 	movq	%rax, (%rbx)
    00000294: 	movq	%rax, %rdi
    00000297: 	movq	0x10(%rsp), %rax
    0000029c: 	movq	%rax, 0x10(%rbx)
.Ltmp229:
    000002a0: 	movq	%r12, %rdx
    000002a3: 	movq	%rbp, %rsi
    000002a6: 	callq	memcpy@PLT # Offset: 678
    000002ab: 	movq	0x10(%rsp), %r12
    000002b0: 	movq	(%rbx), %rdi
    000002b3: 	jmp	.Ltmp227 # Offset: 691
.Ltmp219:
    000002b8: 	movq	%r12, %rsi
    000002bb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002c2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 706
    000002c7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002ce: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002d5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002dc: 	jne	.Ltmp228 # Offset: 732
.Ltmp224:
    000002e2: 	movq	-0x8(%rdx), %rax
    000002e6: 	addq	$0x200, %rax
    000002ec: 	jmp	.Ltmp228 # Offset: 748
.Ltmp223:
    000002f1: 	testq	%r12, %r12
    000002f4: 	je	.Ltmp227 # Offset: 756
    000002fa: 	jmp	.Ltmp229 # Offset: 762
.Ltmp225:
    000002fc: 	callq	__stack_chk_fail@PLT # Offset: 764
.Ltmp221:
    00000301: 	leaq	DATAat0x4d018(%rip), %rdi
    00000308: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 776
DWARF CFI Instructions:
    <empty>
End of Function "_Z28test_CSE2_add_inline_flippedIj14custom_cse_addIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z20test_CSE2_add_inlineIj14custom_cse_addIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 52
  State       : disassembled
  Address     : 0x4d00
  Size        : 0x30d
  MaxSize     : 0x310
  Offset      : 0x4d00
  Section     : .text
  Orc Section : .local.text._Z20test_CSE2_add_inlineIj14custom_cse_addIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB051:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rcx, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movq	%fs:0x28, %rax
    00000024: 	movq	%rax, 0x18(%rsp)
    00000029: 	xorl	%eax, %eax
    0000002b: 	callq	clock@PLT # Offset: 43
    00000030: 	movl	iterations(%rip), %edi
    00000036: 	movq	%rax, start_time(%rip)
    0000003d: 	testl	%edi, %edi
    0000003f: 	jle	.Ltmp230 # Offset: 63
    00000045: 	leal	-0x1(%r14), %r8d
    00000049: 	movl	(%rbx), %r10d
    0000004c: 	leal	-0x2(%r14), %r9d
    00000050: 	xorl	%r13d, %r13d
    00000053: 	movl	%r8d, %eax
    00000056: 	movl	%r8d, %r15d
    00000059: 	shrl	$0x2, %eax
    0000005c: 	andl	$-0x4, %r15d
    00000060: 	subl	$0x1, %eax
    00000063: 	shlq	$0x4, %rax
    00000067: 	leaq	0x10(%rbx,%rax), %rbp
    0000006c: 	leal	0x1(%r15), %eax
    00000070: 	movl	%eax, 0x4(%rsp)
    00000074: 	nopl	(%rax) # Size: 4
.Ltmp236:
    00000078: 	movl	%r10d, %edx
    0000007b: 	subl	0x4(%rbx), %edx
    0000007e: 	addl	%edx, %edx
    00000080: 	cmpl	$0x1, %r14d
    00000084: 	jle	.Ltmp231 # Offset: 132
    0000008a: 	cmpl	$0x2, %r9d
    0000008e: 	jbe	.Ltmp232 # Offset: 142
    00000094: 	movq	%rbx, %rax
    00000097: 	pxor	%xmm1, %xmm1
    0000009b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp233:
    000000a0: 	movdqu	(%rax), %xmm0
    000000a4: 	movdqu	0x4(%rax), %xmm2
    000000a9: 	addq	$0x10, %rax
    000000ad: 	psubd	%xmm2, %xmm0
    000000b1: 	pslld	$0x1, %xmm0
    000000b6: 	paddd	%xmm0, %xmm1
    000000ba: 	cmpq	%rbp, %rax
    000000bd: 	jne	.Ltmp233 # Offset: 189
    000000bf: 	movdqa	%xmm1, %xmm0
    000000c3: 	psrldq	$0x8, %xmm0
    000000c8: 	paddd	%xmm0, %xmm1
    000000cc: 	movdqa	%xmm1, %xmm0
    000000d0: 	psrldq	$0x4, %xmm0
    000000d5: 	paddd	%xmm0, %xmm1
    000000d9: 	movd	%xmm1, %eax
    000000dd: 	addl	%eax, %edx
    000000df: 	cmpl	%r8d, %r15d
    000000e2: 	je	.Ltmp231 # Offset: 226
    000000e4: 	movl	0x4(%rsp), %eax
    000000e8: 	movl	%r15d, %ecx
.Ltmp244:
    000000eb: 	movl	%r14d, %r11d
    000000ee: 	subl	%ecx, %r11d
    000000f1: 	leal	-0x1(%r11), %esi
    000000f5: 	cmpl	$0x2, %r11d
    000000f9: 	je	.Ltmp234 # Offset: 249
    000000fb: 	movq	(%rbx,%rcx,4), %xmm0
    00000100: 	movq	0x4(%rbx,%rcx,4), %xmm1
    00000106: 	psubd	%xmm1, %xmm0
    0000010a: 	pslld	$0x1, %xmm0
    0000010f: 	movd	%xmm0, %r11d
    00000114: 	pshufd	$0xe5, %xmm0, %xmm3
    00000119: 	movd	%xmm3, %ecx
    0000011d: 	addl	%r11d, %ecx
    00000120: 	addl	%ecx, %edx
    00000122: 	movl	%esi, %ecx
    00000124: 	andl	$-0x2, %ecx
    00000127: 	addl	%ecx, %eax
    00000129: 	cmpl	%ecx, %esi
    0000012b: 	je	.Ltmp231 # Offset: 299
.Ltmp234:
    0000012d: 	cltq
    0000012f: 	movl	-0x4(%rbx,%rax,4), %ecx
    00000133: 	subl	(%rbx,%rax,4), %ecx
    00000136: 	leal	(%rdx,%rcx,2), %edx
.Ltmp231:
    00000139: 	testl	%edx, %edx
    0000013b: 	jne	.Ltmp235 # Offset: 315
    00000141: 	addl	$0x1, %r13d
    00000145: 	cmpl	%edi, %r13d
    00000148: 	jl	.Ltmp236 # Offset: 328
.Ltmp230:
    0000014e: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000155: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000015c: 	subq	$0x20, %rax
    00000160: 	cmpq	%rax, %rbx
    00000163: 	je	.Ltmp237 # Offset: 355
    00000169: 	leaq	0x10(%rbx), %rdi
    0000016d: 	movq	%rdi, (%rbx)
    00000170: 	movq	(%r12), %rbp
    00000174: 	movq	0x8(%r12), %r12
    00000179: 	movq	%rbp, %rax
    0000017c: 	addq	%r12, %rax
    0000017f: 	je	.Ltmp238 # Offset: 383
    00000181: 	testq	%rbp, %rbp
    00000184: 	je	.Ltmp239 # Offset: 388
.Ltmp238:
    0000018a: 	movq	%r12, 0x10(%rsp)
    0000018f: 	cmpq	$0xf, %r12
    00000193: 	ja	.Ltmp240 # Offset: 403
    00000199: 	cmpq	$0x1, %r12
    0000019d: 	jne	.Ltmp241 # Offset: 413
    000001a3: 	movzbl	(%rbp), %eax
    000001a7: 	movb	%al, 0x10(%rbx)
.Ltmp245:
    000001aa: 	movq	%r12, 0x8(%rbx)
    000001ae: 	movb	$0x0, (%rdi,%r12)
    000001b3: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001ba: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001c1: 	addq	$0x20, %rax
    000001c5: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001cc: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000001d3: 	je	.Ltmp242 # Offset: 467
.Ltmp246:
    000001d9: 	movq	-0x20(%rax), %rbp
    000001dd: 	callq	clock@PLT # Offset: 477
    000001e2: 	movq	%rax, end_time(%rip)
    000001e9: 	movq	0x18(%rsp), %rdx
    000001ee: 	subq	%fs:0x28, %rdx
    000001f7: 	jne	.Ltmp243 # Offset: 503
    000001fd: 	subq	start_time(%rip), %rax
    00000204: 	pxor	%xmm0, %xmm0
    00000208: 	movq	%rbp, %rdi
    0000020b: 	cvtsi2sd	%rax, %xmm0
    00000210: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000218: 	addq	$0x28, %rsp
    0000021c: 	popq	%rbx
    0000021d: 	popq	%rbp
    0000021e: 	popq	%r12
    00000220: 	popq	%r13
    00000222: 	popq	%r14
    00000224: 	popq	%r15
    00000226: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 550
    0000022b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp235:
    00000230: 	movq	(%r12), %rdx
    00000234: 	movl	$0x1, %edi
    00000239: 	xorl	%eax, %eax
    0000023b: 	movl	%r8d, 0xc(%rsp)
    00000240: 	leaq	DATAat0x4d004(%rip), %rsi
    00000247: 	movl	%r9d, 0x8(%rsp)
    0000024c: 	addl	$0x1, %r13d
    00000250: 	callq	__printf_chk@PLT # Offset: 592
    00000255: 	movl	iterations(%rip), %edi
    0000025b: 	cmpl	%r13d, %edi
    0000025e: 	jle	.Ltmp230 # Offset: 606
    00000264: 	movl	(%rbx), %r10d
    00000267: 	movl	0x8(%rsp), %r9d
    0000026c: 	movl	0xc(%rsp), %r8d
    00000271: 	jmp	.Ltmp236 # Offset: 625
.Ltmp232:
    00000276: 	xorl	%ecx, %ecx
    00000278: 	movl	$0x1, %eax
    0000027d: 	jmp	.Ltmp244 # Offset: 637
.Ltmp240:
    00000282: 	movq	%rbx, %rdi
    00000285: 	leaq	0x10(%rsp), %rsi
    0000028a: 	xorl	%edx, %edx
    0000028c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 652
    00000291: 	movq	%rax, (%rbx)
    00000294: 	movq	%rax, %rdi
    00000297: 	movq	0x10(%rsp), %rax
    0000029c: 	movq	%rax, 0x10(%rbx)
.Ltmp247:
    000002a0: 	movq	%r12, %rdx
    000002a3: 	movq	%rbp, %rsi
    000002a6: 	callq	memcpy@PLT # Offset: 678
    000002ab: 	movq	0x10(%rsp), %r12
    000002b0: 	movq	(%rbx), %rdi
    000002b3: 	jmp	.Ltmp245 # Offset: 691
.Ltmp237:
    000002b8: 	movq	%r12, %rsi
    000002bb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002c2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 706
    000002c7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002ce: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002d5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002dc: 	jne	.Ltmp246 # Offset: 732
.Ltmp242:
    000002e2: 	movq	-0x8(%rdx), %rax
    000002e6: 	addq	$0x200, %rax
    000002ec: 	jmp	.Ltmp246 # Offset: 748
.Ltmp241:
    000002f1: 	testq	%r12, %r12
    000002f4: 	je	.Ltmp245 # Offset: 756
    000002fa: 	jmp	.Ltmp247 # Offset: 762
.Ltmp243:
    000002fc: 	callq	__stack_chk_fail@PLT # Offset: 764
.Ltmp239:
    00000301: 	leaq	DATAat0x4d018(%rip), %rdi
    00000308: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 776
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_CSE2_add_inlineIj14custom_cse_addIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSE2Ij14custom_cse_addIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 53
  State       : disassembled
  Address     : 0x5010
  Size        : 0x30d
  MaxSize     : 0x310
  Offset      : 0x5010
  Section     : .text
  Orc Section : .local.text._Z9test_CSE2Ij14custom_cse_addIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB052:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rcx, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movq	%fs:0x28, %rax
    00000024: 	movq	%rax, 0x18(%rsp)
    00000029: 	xorl	%eax, %eax
    0000002b: 	callq	clock@PLT # Offset: 43
    00000030: 	movl	iterations(%rip), %edi
    00000036: 	movq	%rax, start_time(%rip)
    0000003d: 	testl	%edi, %edi
    0000003f: 	jle	.Ltmp248 # Offset: 63
    00000045: 	leal	-0x1(%r14), %r8d
    00000049: 	movl	(%rbx), %r10d
    0000004c: 	leal	-0x2(%r14), %r9d
    00000050: 	xorl	%r13d, %r13d
    00000053: 	movl	%r8d, %eax
    00000056: 	movl	%r8d, %r15d
    00000059: 	shrl	$0x2, %eax
    0000005c: 	andl	$-0x4, %r15d
    00000060: 	subl	$0x1, %eax
    00000063: 	shlq	$0x4, %rax
    00000067: 	leaq	0x10(%rbx,%rax), %rbp
    0000006c: 	leal	0x1(%r15), %eax
    00000070: 	movl	%eax, 0x4(%rsp)
    00000074: 	nopl	(%rax) # Size: 4
.Ltmp254:
    00000078: 	movl	%r10d, %edx
    0000007b: 	subl	0x4(%rbx), %edx
    0000007e: 	addl	%edx, %edx
    00000080: 	cmpl	$0x1, %r14d
    00000084: 	jle	.Ltmp249 # Offset: 132
    0000008a: 	cmpl	$0x2, %r9d
    0000008e: 	jbe	.Ltmp250 # Offset: 142
    00000094: 	movq	%rbx, %rax
    00000097: 	pxor	%xmm1, %xmm1
    0000009b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp251:
    000000a0: 	movdqu	(%rax), %xmm0
    000000a4: 	movdqu	0x4(%rax), %xmm2
    000000a9: 	addq	$0x10, %rax
    000000ad: 	psubd	%xmm2, %xmm0
    000000b1: 	pslld	$0x1, %xmm0
    000000b6: 	paddd	%xmm0, %xmm1
    000000ba: 	cmpq	%rbp, %rax
    000000bd: 	jne	.Ltmp251 # Offset: 189
    000000bf: 	movdqa	%xmm1, %xmm0
    000000c3: 	psrldq	$0x8, %xmm0
    000000c8: 	paddd	%xmm0, %xmm1
    000000cc: 	movdqa	%xmm1, %xmm0
    000000d0: 	psrldq	$0x4, %xmm0
    000000d5: 	paddd	%xmm0, %xmm1
    000000d9: 	movd	%xmm1, %eax
    000000dd: 	addl	%eax, %edx
    000000df: 	cmpl	%r8d, %r15d
    000000e2: 	je	.Ltmp249 # Offset: 226
    000000e4: 	movl	0x4(%rsp), %eax
    000000e8: 	movl	%r15d, %ecx
.Ltmp262:
    000000eb: 	movl	%r14d, %r11d
    000000ee: 	subl	%ecx, %r11d
    000000f1: 	leal	-0x1(%r11), %esi
    000000f5: 	cmpl	$0x2, %r11d
    000000f9: 	je	.Ltmp252 # Offset: 249
    000000fb: 	movq	(%rbx,%rcx,4), %xmm0
    00000100: 	movq	0x4(%rbx,%rcx,4), %xmm1
    00000106: 	psubd	%xmm1, %xmm0
    0000010a: 	pslld	$0x1, %xmm0
    0000010f: 	movd	%xmm0, %r11d
    00000114: 	pshufd	$0xe5, %xmm0, %xmm3
    00000119: 	movd	%xmm3, %ecx
    0000011d: 	addl	%r11d, %ecx
    00000120: 	addl	%ecx, %edx
    00000122: 	movl	%esi, %ecx
    00000124: 	andl	$-0x2, %ecx
    00000127: 	addl	%ecx, %eax
    00000129: 	cmpl	%ecx, %esi
    0000012b: 	je	.Ltmp249 # Offset: 299
.Ltmp252:
    0000012d: 	cltq
    0000012f: 	movl	-0x4(%rbx,%rax,4), %ecx
    00000133: 	subl	(%rbx,%rax,4), %ecx
    00000136: 	leal	(%rdx,%rcx,2), %edx
.Ltmp249:
    00000139: 	testl	%edx, %edx
    0000013b: 	jne	.Ltmp253 # Offset: 315
    00000141: 	addl	$0x1, %r13d
    00000145: 	cmpl	%edi, %r13d
    00000148: 	jl	.Ltmp254 # Offset: 328
.Ltmp248:
    0000014e: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000155: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000015c: 	subq	$0x20, %rax
    00000160: 	cmpq	%rax, %rbx
    00000163: 	je	.Ltmp255 # Offset: 355
    00000169: 	leaq	0x10(%rbx), %rdi
    0000016d: 	movq	%rdi, (%rbx)
    00000170: 	movq	(%r12), %rbp
    00000174: 	movq	0x8(%r12), %r12
    00000179: 	movq	%rbp, %rax
    0000017c: 	addq	%r12, %rax
    0000017f: 	je	.Ltmp256 # Offset: 383
    00000181: 	testq	%rbp, %rbp
    00000184: 	je	.Ltmp257 # Offset: 388
.Ltmp256:
    0000018a: 	movq	%r12, 0x10(%rsp)
    0000018f: 	cmpq	$0xf, %r12
    00000193: 	ja	.Ltmp258 # Offset: 403
    00000199: 	cmpq	$0x1, %r12
    0000019d: 	jne	.Ltmp259 # Offset: 413
    000001a3: 	movzbl	(%rbp), %eax
    000001a7: 	movb	%al, 0x10(%rbx)
.Ltmp263:
    000001aa: 	movq	%r12, 0x8(%rbx)
    000001ae: 	movb	$0x0, (%rdi,%r12)
    000001b3: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001ba: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001c1: 	addq	$0x20, %rax
    000001c5: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001cc: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000001d3: 	je	.Ltmp260 # Offset: 467
.Ltmp264:
    000001d9: 	movq	-0x20(%rax), %rbp
    000001dd: 	callq	clock@PLT # Offset: 477
    000001e2: 	movq	%rax, end_time(%rip)
    000001e9: 	movq	0x18(%rsp), %rdx
    000001ee: 	subq	%fs:0x28, %rdx
    000001f7: 	jne	.Ltmp261 # Offset: 503
    000001fd: 	subq	start_time(%rip), %rax
    00000204: 	pxor	%xmm0, %xmm0
    00000208: 	movq	%rbp, %rdi
    0000020b: 	cvtsi2sd	%rax, %xmm0
    00000210: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000218: 	addq	$0x28, %rsp
    0000021c: 	popq	%rbx
    0000021d: 	popq	%rbp
    0000021e: 	popq	%r12
    00000220: 	popq	%r13
    00000222: 	popq	%r14
    00000224: 	popq	%r15
    00000226: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 550
    0000022b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp253:
    00000230: 	movq	(%r12), %rdx
    00000234: 	movl	$0x1, %edi
    00000239: 	xorl	%eax, %eax
    0000023b: 	movl	%r8d, 0xc(%rsp)
    00000240: 	leaq	DATAat0x4d004(%rip), %rsi
    00000247: 	movl	%r9d, 0x8(%rsp)
    0000024c: 	addl	$0x1, %r13d
    00000250: 	callq	__printf_chk@PLT # Offset: 592
    00000255: 	movl	iterations(%rip), %edi
    0000025b: 	cmpl	%r13d, %edi
    0000025e: 	jle	.Ltmp248 # Offset: 606
    00000264: 	movl	(%rbx), %r10d
    00000267: 	movl	0x8(%rsp), %r9d
    0000026c: 	movl	0xc(%rsp), %r8d
    00000271: 	jmp	.Ltmp254 # Offset: 625
.Ltmp250:
    00000276: 	xorl	%ecx, %ecx
    00000278: 	movl	$0x1, %eax
    0000027d: 	jmp	.Ltmp262 # Offset: 637
.Ltmp258:
    00000282: 	movq	%rbx, %rdi
    00000285: 	leaq	0x10(%rsp), %rsi
    0000028a: 	xorl	%edx, %edx
    0000028c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 652
    00000291: 	movq	%rax, (%rbx)
    00000294: 	movq	%rax, %rdi
    00000297: 	movq	0x10(%rsp), %rax
    0000029c: 	movq	%rax, 0x10(%rbx)
.Ltmp265:
    000002a0: 	movq	%r12, %rdx
    000002a3: 	movq	%rbp, %rsi
    000002a6: 	callq	memcpy@PLT # Offset: 678
    000002ab: 	movq	0x10(%rsp), %r12
    000002b0: 	movq	(%rbx), %rdi
    000002b3: 	jmp	.Ltmp263 # Offset: 691
.Ltmp255:
    000002b8: 	movq	%r12, %rsi
    000002bb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002c2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 706
    000002c7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002ce: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002d5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002dc: 	jne	.Ltmp264 # Offset: 732
.Ltmp260:
    000002e2: 	movq	-0x8(%rdx), %rax
    000002e6: 	addq	$0x200, %rax
    000002ec: 	jmp	.Ltmp264 # Offset: 748
.Ltmp259:
    000002f1: 	testq	%r12, %r12
    000002f4: 	je	.Ltmp263 # Offset: 756
    000002fa: 	jmp	.Ltmp265 # Offset: 762
.Ltmp261:
    000002fc: 	callq	__stack_chk_fail@PLT # Offset: 764
.Ltmp257:
    00000301: 	leaq	DATAat0x4d018(%rip), %rdi
    00000308: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 776
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE2Ij14custom_cse_addIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSE2Ii14custom_cse_mulIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 54
  State       : disassembled
  Address     : 0x5320
  Size        : 0x38b
  MaxSize     : 0x390
  Offset      : 0x5320
  Section     : .text
  Orc Section : .local.text._Z9test_CSE2Ii14custom_cse_mulIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB053:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	movl	%edx, %ebp
    00000015: 	pushq	%rbx
    00000016: 	subq	$0x38, %rsp
    0000001a: 	movq	%rcx, 0x18(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x28(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r10d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r10d, %r10d
    00000045: 	jle	.Ltmp266 # Offset: 69
    0000004b: 	leal	-0x1(%r14), %r15d
    0000004f: 	leal	-0x2(%r14), %eax
    00000053: 	xorl	%r13d, %r13d
    00000056: 	movl	%eax, 0xc(%rsp)
    0000005a: 	movl	%r15d, %eax
    0000005d: 	shrl	$0x2, %eax
    00000060: 	subl	$0x1, %eax
    00000063: 	shlq	$0x4, %rax
    00000067: 	leaq	0x10(%r12,%rax), %rbx
    0000006c: 	movl	%r15d, %eax
    0000006f: 	andl	$-0x4, %eax
    00000072: 	movl	%eax, 0x10(%rsp)
    00000076: 	addl	$0x1, %eax
    00000079: 	movl	%eax, 0x14(%rsp)
.Ltmp279:
    0000007d: 	movl	(%r12), %r8d
    00000081: 	movl	0x4(%r12), %edi
.Ltmp271:
    00000086: 	movl	%r8d, %eax
    00000089: 	movl	%r8d, %ecx
    0000008c: 	imull	%edi, %eax
    0000008f: 	subl	%edi, %ecx
    00000091: 	addl	%ebp, %eax
    00000093: 	leal	(%r8,%rax,2), %edx
    00000097: 	leal	(%rdi,%rax,2), %eax
    0000009a: 	addl	%ecx, %edx
    0000009c: 	subl	%eax, %edx
    0000009e: 	cmpl	$0x1, %r14d
    000000a2: 	jle	.Ltmp267 # Offset: 162
    000000a8: 	cmpl	$0x2, 0xc(%rsp)
    000000ad: 	jbe	.Ltmp268 # Offset: 173
    000000b3: 	movd	%ebp, %xmm7
    000000b7: 	movq	%r12, %rax
    000000ba: 	pxor	%xmm1, %xmm1
    000000be: 	pshufd	$0x0, %xmm7, %xmm5
    000000c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp269:
    000000c8: 	movdqu	(%rax), %xmm3
    000000cc: 	movdqu	0x4(%rax), %xmm2
    000000d1: 	addq	$0x10, %rax
    000000d5: 	movdqa	%xmm2, %xmm4
    000000d9: 	movdqa	%xmm3, %xmm6
    000000dd: 	movdqa	%xmm2, %xmm0
    000000e1: 	psrlq	$0x20, %xmm4
    000000e6: 	psrlq	$0x20, %xmm6
    000000eb: 	pmuludq	%xmm3, %xmm0
    000000ef: 	pmuludq	%xmm6, %xmm4
    000000f3: 	pshufd	$0x8, %xmm0, %xmm0
    000000f8: 	pshufd	$0x8, %xmm4, %xmm4
    000000fd: 	punpckldq	%xmm4, %xmm0
    00000101: 	paddd	%xmm5, %xmm0
    00000105: 	paddd	%xmm0, %xmm3
    00000109: 	paddd	%xmm0, %xmm2
    0000010d: 	paddd	%xmm0, %xmm3
    00000111: 	paddd	%xmm0, %xmm2
    00000115: 	paddd	%xmm3, %xmm1
    00000119: 	psubd	%xmm2, %xmm1
    0000011d: 	paddd	%xmm3, %xmm1
    00000121: 	psubd	%xmm2, %xmm1
    00000125: 	cmpq	%rbx, %rax
    00000128: 	jne	.Ltmp269 # Offset: 296
    0000012a: 	movdqa	%xmm1, %xmm0
    0000012e: 	psrldq	$0x8, %xmm0
    00000133: 	paddd	%xmm0, %xmm1
    00000137: 	movdqa	%xmm1, %xmm0
    0000013b: 	psrldq	$0x4, %xmm0
    00000140: 	paddd	%xmm0, %xmm1
    00000144: 	movd	%xmm1, %eax
    00000148: 	addl	%eax, %edx
    0000014a: 	cmpl	%r15d, 0x10(%rsp)
    0000014f: 	je	.Ltmp267 # Offset: 335
    00000151: 	movl	0x14(%rsp), %ecx
.Ltmp280:
    00000155: 	movslq	%ecx, %rax
    00000158: 	shlq	$0x2, %rax
    0000015c: 	leaq	(%r12,%rax), %rsi
    00000160: 	movl	-0x4(%rsi), %r11d
    00000164: 	movl	(%rsi), %r9d
    00000167: 	movl	%r11d, %esi
    0000016a: 	imull	%r9d, %esi
    0000016e: 	addl	%ebp, %esi
    00000170: 	leal	(%r11,%rsi,2), %r11d
    00000174: 	leal	(%r9,%rsi,2), %esi
    00000178: 	leal	(%rdx,%r11,2), %edx
    0000017c: 	subl	%esi, %edx
    0000017e: 	subl	%esi, %edx
    00000180: 	leal	0x1(%rcx), %esi
    00000183: 	cmpl	%esi, %r14d
    00000186: 	jle	.Ltmp267 # Offset: 390
    00000188: 	movl	0x4(%r12,%rax), %esi
    0000018d: 	movl	%r9d, %r11d
    00000190: 	addl	$0x2, %ecx
    00000193: 	imull	%esi, %r11d
    00000197: 	addl	%ebp, %r11d
    0000019a: 	leal	(%r9,%r11,2), %r9d
    0000019e: 	leal	(%rsi,%r11,2), %r11d
    000001a2: 	leal	(%rdx,%r9,2), %edx
    000001a6: 	subl	%r11d, %edx
    000001a9: 	subl	%r11d, %edx
    000001ac: 	cmpl	%ecx, %r14d
    000001af: 	jle	.Ltmp267 # Offset: 431
    000001b1: 	movl	0x8(%r12,%rax), %ecx
    000001b6: 	movl	%esi, %eax
    000001b8: 	imull	%ecx, %eax
    000001bb: 	addl	%ebp, %eax
    000001bd: 	leal	(%rsi,%rax,2), %esi
    000001c0: 	leal	(%rcx,%rax,2), %eax
    000001c3: 	leal	(%rdx,%rsi,2), %edx
    000001c6: 	subl	%eax, %edx
    000001c8: 	subl	%eax, %edx
.Ltmp267:
    000001ca: 	testl	%edx, %edx
    000001cc: 	jne	.Ltmp270 # Offset: 460
    000001d2: 	addl	$0x1, %r13d
    000001d6: 	cmpl	%r10d, %r13d
    000001d9: 	jl	.Ltmp271 # Offset: 473
.Ltmp266:
    000001df: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001e6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001ed: 	subq	$0x20, %rax
    000001f1: 	cmpq	%rax, %rbx
    000001f4: 	je	.Ltmp272 # Offset: 500
    000001fa: 	movq	0x18(%rsp), %rax
    000001ff: 	leaq	0x10(%rbx), %rdi
    00000203: 	movq	%rdi, (%rbx)
    00000206: 	movq	(%rax), %rbp
    00000209: 	movq	0x8(%rax), %r12
    0000020d: 	movq	%rbp, %rax
    00000210: 	addq	%r12, %rax
    00000213: 	je	.Ltmp273 # Offset: 531
    00000215: 	testq	%rbp, %rbp
    00000218: 	je	.Ltmp274 # Offset: 536
.Ltmp273:
    0000021e: 	movq	%r12, 0x20(%rsp)
    00000223: 	cmpq	$0xf, %r12
    00000227: 	ja	.Ltmp275 # Offset: 551
    0000022d: 	cmpq	$0x1, %r12
    00000231: 	jne	.Ltmp276 # Offset: 561
    00000237: 	movzbl	(%rbp), %eax
    0000023b: 	movb	%al, 0x10(%rbx)
.Ltmp281:
    0000023e: 	movq	%r12, 0x8(%rbx)
    00000242: 	movb	$0x0, (%rdi,%r12)
    00000247: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000024e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000255: 	addq	$0x20, %rax
    00000259: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000260: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000267: 	je	.Ltmp277 # Offset: 615
.Ltmp282:
    0000026d: 	movq	-0x20(%rax), %rbp
    00000271: 	callq	clock@PLT # Offset: 625
    00000276: 	movq	%rax, end_time(%rip)
    0000027d: 	movq	0x28(%rsp), %rdx
    00000282: 	subq	%fs:0x28, %rdx
    0000028b: 	jne	.Ltmp278 # Offset: 651
    00000291: 	subq	start_time(%rip), %rax
    00000298: 	pxor	%xmm0, %xmm0
    0000029c: 	movq	%rbp, %rdi
    0000029f: 	cvtsi2sd	%rax, %xmm0
    000002a4: 	divsd	DATAat0x4d640(%rip), %xmm0
    000002ac: 	addq	$0x38, %rsp
    000002b0: 	popq	%rbx
    000002b1: 	popq	%rbp
    000002b2: 	popq	%r12
    000002b4: 	popq	%r13
    000002b6: 	popq	%r14
    000002b8: 	popq	%r15
    000002ba: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 698
    000002bf: 	nop # Size: 1
.Ltmp270:
    000002c0: 	movq	0x18(%rsp), %rax
    000002c5: 	leaq	DATAat0x4d004(%rip), %rsi
    000002cc: 	movl	$0x1, %edi
    000002d1: 	addl	$0x1, %r13d
    000002d5: 	movq	(%rax), %rdx
    000002d8: 	xorl	%eax, %eax
    000002da: 	callq	__printf_chk@PLT # Offset: 730
    000002df: 	movl	iterations(%rip), %r10d
    000002e6: 	cmpl	%r10d, %r13d
    000002e9: 	jl	.Ltmp279 # Offset: 745
    000002ef: 	jmp	.Ltmp266 # Offset: 751
.Ltmp268:
    000002f4: 	movl	$0x1, %ecx
    000002f9: 	jmp	.Ltmp280 # Offset: 761
.Ltmp275:
    000002fe: 	movq	%rbx, %rdi
    00000301: 	leaq	0x20(%rsp), %rsi
    00000306: 	xorl	%edx, %edx
    00000308: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 776
    0000030d: 	movq	%rax, (%rbx)
    00000310: 	movq	%rax, %rdi
    00000313: 	movq	0x20(%rsp), %rax
    00000318: 	movq	%rax, 0x10(%rbx)
.Ltmp283:
    0000031c: 	movq	%r12, %rdx
    0000031f: 	movq	%rbp, %rsi
    00000322: 	callq	memcpy@PLT # Offset: 802
    00000327: 	movq	0x20(%rsp), %r12
    0000032c: 	movq	(%rbx), %rdi
    0000032f: 	jmp	.Ltmp281 # Offset: 815
.Ltmp272:
    00000334: 	movq	0x18(%rsp), %rsi
    00000339: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000340: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 832
    00000345: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000034c: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000353: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000035a: 	jne	.Ltmp282 # Offset: 858
.Ltmp277:
    00000360: 	movq	-0x8(%rdx), %rax
    00000364: 	addq	$0x200, %rax
    0000036a: 	jmp	.Ltmp282 # Offset: 874
.Ltmp276:
    0000036f: 	testq	%r12, %r12
    00000372: 	je	.Ltmp281 # Offset: 882
    00000378: 	jmp	.Ltmp283 # Offset: 888
.Ltmp278:
    0000037a: 	callq	__stack_chk_fail@PLT # Offset: 890
.Ltmp274:
    0000037f: 	leaq	DATAat0x4d018(%rip), %rdi
    00000386: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 902
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE2Ii14custom_cse_mulIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z20test_CSE2_add_inlineIi14custom_cse_addIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 55
  State       : disassembled
  Address     : 0x56b0
  Size        : 0x39d
  MaxSize     : 0x3a0
  Offset      : 0x56b0
  Section     : .text
  Orc Section : .local.text._Z20test_CSE2_add_inlineIi14custom_cse_addIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB054:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdi, %rbx
    00000016: 	subq	$0x38, %rsp
    0000001a: 	movq	%rcx, 0x18(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x28(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r10d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r10d, %r10d
    00000045: 	jle	.Ltmp284 # Offset: 69
    0000004b: 	leal	-0x1(%r14), %r8d
    0000004f: 	leal	-0x2(%r14), %eax
    00000053: 	movl	(%rbx), %edi
    00000055: 	movl	0x4(%rbx), %esi
    00000058: 	movl	%eax, 0xc(%rsp)
    0000005c: 	movl	%r8d, %eax
    0000005f: 	movl	%r8d, %r15d
    00000062: 	xorl	%r13d, %r13d
    00000065: 	shrl	$0x2, %eax
    00000068: 	andl	$-0x4, %r15d
    0000006c: 	subl	$0x1, %eax
    0000006f: 	shlq	$0x4, %rax
    00000073: 	leaq	0x10(%rbx,%rax), %r12
    00000078: 	leal	0x1(%r15), %eax
    0000007c: 	movl	%eax, 0x10(%rsp)
.Ltmp290:
    00000080: 	leal	(%rdi,%rsi), %edx
    00000083: 	movl	%edi, %ecx
    00000085: 	addl	%ebp, %edx
    00000087: 	subl	%esi, %ecx
    00000089: 	leal	(%rdi,%rdx,2), %eax
    0000008c: 	leal	(%rsi,%rdx,2), %edx
    0000008f: 	addl	%ecx, %eax
    00000091: 	subl	%edx, %eax
    00000093: 	cmpl	$0x1, %r14d
    00000097: 	jle	.Ltmp285 # Offset: 151
    0000009d: 	cmpl	$0x2, 0xc(%rsp)
    000000a2: 	jbe	.Ltmp286 # Offset: 162
    000000a8: 	movd	%ebp, %xmm6
    000000ac: 	movq	%rbx, %rdx
    000000af: 	pxor	%xmm0, %xmm0
    000000b3: 	pshufd	$0x0, %xmm6, %xmm4
    000000b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp287:
    000000c0: 	movdqu	(%rdx), %xmm5
    000000c4: 	movdqu	0x4(%rdx), %xmm3
    000000c9: 	addq	$0x10, %rdx
    000000cd: 	movdqu	-0xc(%rdx), %xmm1
    000000d2: 	paddd	%xmm5, %xmm3
    000000d6: 	movdqa	%xmm5, %xmm2
    000000da: 	paddd	%xmm4, %xmm3
    000000de: 	paddd	%xmm3, %xmm2
    000000e2: 	paddd	%xmm3, %xmm1
    000000e6: 	paddd	%xmm3, %xmm2
    000000ea: 	paddd	%xmm3, %xmm1
    000000ee: 	paddd	%xmm2, %xmm0
    000000f2: 	psubd	%xmm1, %xmm0
    000000f6: 	paddd	%xmm2, %xmm0
    000000fa: 	psubd	%xmm1, %xmm0
    000000fe: 	cmpq	%r12, %rdx
    00000101: 	jne	.Ltmp287 # Offset: 257
    00000103: 	movdqa	%xmm0, %xmm1
    00000107: 	psrldq	$0x8, %xmm1
    0000010c: 	paddd	%xmm1, %xmm0
    00000110: 	movdqa	%xmm0, %xmm1
    00000114: 	psrldq	$0x4, %xmm1
    00000119: 	paddd	%xmm1, %xmm0
    0000011d: 	movd	%xmm0, %edx
    00000121: 	addl	%edx, %eax
    00000123: 	cmpl	%r8d, %r15d
    00000126: 	je	.Ltmp285 # Offset: 294
    0000012c: 	movl	0x10(%rsp), %edx
    00000130: 	movl	%r15d, %r9d
.Ltmp298:
    00000133: 	movl	%r14d, %r11d
    00000136: 	subl	%r9d, %r11d
    00000139: 	leal	-0x1(%r11), %ecx
    0000013d: 	cmpl	$0x2, %r11d
    00000141: 	je	.Ltmp288 # Offset: 321
    00000143: 	movq	(%rbx,%r9,4), %xmm3
    00000149: 	movq	0x4(%rbx,%r9,4), %xmm1
    00000150: 	movd	%ebp, %xmm6
    00000154: 	pshufd	$0xe0, %xmm6, %xmm0
    00000159: 	movdqa	%xmm3, %xmm2
    0000015d: 	paddd	%xmm1, %xmm2
    00000161: 	paddd	%xmm0, %xmm2
    00000165: 	movdqa	%xmm3, %xmm0
    00000169: 	psubd	%xmm1, %xmm3
    0000016d: 	paddd	%xmm2, %xmm0
    00000171: 	paddd	%xmm2, %xmm1
    00000175: 	paddd	%xmm2, %xmm0
    00000179: 	paddd	%xmm2, %xmm1
    0000017d: 	paddd	%xmm3, %xmm0
    00000181: 	psubd	%xmm1, %xmm0
    00000185: 	movd	%xmm0, %r11d
    0000018a: 	pshufd	$0xe5, %xmm0, %xmm7
    0000018f: 	movd	%xmm7, %r9d
    00000194: 	addl	%r11d, %r9d
    00000197: 	addl	%r9d, %eax
    0000019a: 	movl	%ecx, %r9d
    0000019d: 	andl	$-0x2, %r9d
    000001a1: 	addl	%r9d, %edx
    000001a4: 	cmpl	%ecx, %r9d
    000001a7: 	je	.Ltmp285 # Offset: 423
.Ltmp288:
    000001a9: 	movslq	%edx, %rdx
    000001ac: 	movl	-0x4(%rbx,%rdx,4), %ecx
    000001b0: 	movl	(%rbx,%rdx,4), %r9d
    000001b4: 	leal	(%r9,%rcx), %edx
    000001b8: 	addl	%ebp, %edx
    000001ba: 	leal	(%rcx,%rdx,2), %ecx
    000001bd: 	leal	(%r9,%rdx,2), %edx
    000001c1: 	leal	(%rax,%rcx,2), %eax
    000001c4: 	subl	%edx, %eax
    000001c6: 	subl	%edx, %eax
.Ltmp285:
    000001c8: 	testl	%eax, %eax
    000001ca: 	jne	.Ltmp289 # Offset: 458
    000001d0: 	addl	$0x1, %r13d
    000001d4: 	cmpl	%r10d, %r13d
    000001d7: 	jl	.Ltmp290 # Offset: 471
.Ltmp284:
    000001dd: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001e4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001eb: 	subq	$0x20, %rax
    000001ef: 	cmpq	%rax, %rbx
    000001f2: 	je	.Ltmp291 # Offset: 498
    000001f8: 	movq	0x18(%rsp), %rax
    000001fd: 	leaq	0x10(%rbx), %rdi
    00000201: 	movq	%rdi, (%rbx)
    00000204: 	movq	(%rax), %rbp
    00000207: 	movq	0x8(%rax), %r12
    0000020b: 	movq	%rbp, %rax
    0000020e: 	addq	%r12, %rax
    00000211: 	je	.Ltmp292 # Offset: 529
    00000213: 	testq	%rbp, %rbp
    00000216: 	je	.Ltmp293 # Offset: 534
.Ltmp292:
    0000021c: 	movq	%r12, 0x20(%rsp)
    00000221: 	cmpq	$0xf, %r12
    00000225: 	ja	.Ltmp294 # Offset: 549
    0000022b: 	cmpq	$0x1, %r12
    0000022f: 	jne	.Ltmp295 # Offset: 559
    00000235: 	movzbl	(%rbp), %eax
    00000239: 	movb	%al, 0x10(%rbx)
.Ltmp299:
    0000023c: 	movq	%r12, 0x8(%rbx)
    00000240: 	movb	$0x0, (%rdi,%r12)
    00000245: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000024c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000253: 	addq	$0x20, %rax
    00000257: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000025e: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000265: 	je	.Ltmp296 # Offset: 613
.Ltmp300:
    0000026b: 	movq	-0x20(%rax), %rbp
    0000026f: 	callq	clock@PLT # Offset: 623
    00000274: 	movq	%rax, end_time(%rip)
    0000027b: 	movq	0x28(%rsp), %rdx
    00000280: 	subq	%fs:0x28, %rdx
    00000289: 	jne	.Ltmp297 # Offset: 649
    0000028f: 	subq	start_time(%rip), %rax
    00000296: 	pxor	%xmm0, %xmm0
    0000029a: 	movq	%rbp, %rdi
    0000029d: 	cvtsi2sd	%rax, %xmm0
    000002a2: 	divsd	DATAat0x4d640(%rip), %xmm0
    000002aa: 	addq	$0x38, %rsp
    000002ae: 	popq	%rbx
    000002af: 	popq	%rbp
    000002b0: 	popq	%r12
    000002b2: 	popq	%r13
    000002b4: 	popq	%r14
    000002b6: 	popq	%r15
    000002b8: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 696
    000002bd: 	nopl	(%rax) # Size: 3
.Ltmp289:
    000002c0: 	movq	0x18(%rsp), %rax
    000002c5: 	leaq	DATAat0x4d004(%rip), %rsi
    000002cc: 	movl	$0x1, %edi
    000002d1: 	movl	%r8d, 0x14(%rsp)
    000002d6: 	addl	$0x1, %r13d
    000002da: 	movq	(%rax), %rdx
    000002dd: 	xorl	%eax, %eax
    000002df: 	callq	__printf_chk@PLT # Offset: 735
    000002e4: 	movl	iterations(%rip), %r10d
    000002eb: 	cmpl	%r10d, %r13d
    000002ee: 	jge	.Ltmp284 # Offset: 750
    000002f4: 	movl	(%rbx), %edi
    000002f6: 	movl	0x4(%rbx), %esi
    000002f9: 	movl	0x14(%rsp), %r8d
    000002fe: 	jmp	.Ltmp290 # Offset: 766
.Ltmp286:
    00000303: 	xorl	%r9d, %r9d
    00000306: 	movl	$0x1, %edx
    0000030b: 	jmp	.Ltmp298 # Offset: 779
.Ltmp294:
    00000310: 	movq	%rbx, %rdi
    00000313: 	leaq	0x20(%rsp), %rsi
    00000318: 	xorl	%edx, %edx
    0000031a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 794
    0000031f: 	movq	%rax, (%rbx)
    00000322: 	movq	%rax, %rdi
    00000325: 	movq	0x20(%rsp), %rax
    0000032a: 	movq	%rax, 0x10(%rbx)
.Ltmp301:
    0000032e: 	movq	%r12, %rdx
    00000331: 	movq	%rbp, %rsi
    00000334: 	callq	memcpy@PLT # Offset: 820
    00000339: 	movq	0x20(%rsp), %r12
    0000033e: 	movq	(%rbx), %rdi
    00000341: 	jmp	.Ltmp299 # Offset: 833
.Ltmp291:
    00000346: 	movq	0x18(%rsp), %rsi
    0000034b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000352: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 850
    00000357: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000035e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000365: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000036c: 	jne	.Ltmp300 # Offset: 876
.Ltmp296:
    00000372: 	movq	-0x8(%rdx), %rax
    00000376: 	addq	$0x200, %rax
    0000037c: 	jmp	.Ltmp300 # Offset: 892
.Ltmp295:
    00000381: 	testq	%r12, %r12
    00000384: 	je	.Ltmp299 # Offset: 900
    0000038a: 	jmp	.Ltmp301 # Offset: 906
.Ltmp297:
    0000038c: 	callq	__stack_chk_fail@PLT # Offset: 908
.Ltmp293:
    00000391: 	leaq	DATAat0x4d018(%rip), %rdi
    00000398: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 920
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_CSE2_add_inlineIi14custom_cse_addIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSE2Ii14custom_cse_addIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 56
  State       : disassembled
  Address     : 0x5a50
  Size        : 0x39d
  MaxSize     : 0x3a0
  Offset      : 0x5a50
  Section     : .text
  Orc Section : .local.text._Z9test_CSE2Ii14custom_cse_addIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB055:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdi, %rbx
    00000016: 	subq	$0x38, %rsp
    0000001a: 	movq	%rcx, 0x18(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x28(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r10d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r10d, %r10d
    00000045: 	jle	.Ltmp302 # Offset: 69
    0000004b: 	leal	-0x1(%r14), %r8d
    0000004f: 	leal	-0x2(%r14), %eax
    00000053: 	movl	(%rbx), %edi
    00000055: 	movl	0x4(%rbx), %esi
    00000058: 	movl	%eax, 0xc(%rsp)
    0000005c: 	movl	%r8d, %eax
    0000005f: 	movl	%r8d, %r15d
    00000062: 	xorl	%r13d, %r13d
    00000065: 	shrl	$0x2, %eax
    00000068: 	andl	$-0x4, %r15d
    0000006c: 	subl	$0x1, %eax
    0000006f: 	shlq	$0x4, %rax
    00000073: 	leaq	0x10(%rbx,%rax), %r12
    00000078: 	leal	0x1(%r15), %eax
    0000007c: 	movl	%eax, 0x10(%rsp)
.Ltmp308:
    00000080: 	leal	(%rdi,%rsi), %edx
    00000083: 	movl	%edi, %ecx
    00000085: 	addl	%ebp, %edx
    00000087: 	subl	%esi, %ecx
    00000089: 	leal	(%rdi,%rdx,2), %eax
    0000008c: 	leal	(%rsi,%rdx,2), %edx
    0000008f: 	addl	%ecx, %eax
    00000091: 	subl	%edx, %eax
    00000093: 	cmpl	$0x1, %r14d
    00000097: 	jle	.Ltmp303 # Offset: 151
    0000009d: 	cmpl	$0x2, 0xc(%rsp)
    000000a2: 	jbe	.Ltmp304 # Offset: 162
    000000a8: 	movd	%ebp, %xmm6
    000000ac: 	movq	%rbx, %rdx
    000000af: 	pxor	%xmm0, %xmm0
    000000b3: 	pshufd	$0x0, %xmm6, %xmm4
    000000b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp305:
    000000c0: 	movdqu	(%rdx), %xmm5
    000000c4: 	movdqu	0x4(%rdx), %xmm3
    000000c9: 	addq	$0x10, %rdx
    000000cd: 	movdqu	-0xc(%rdx), %xmm1
    000000d2: 	paddd	%xmm5, %xmm3
    000000d6: 	movdqa	%xmm5, %xmm2
    000000da: 	paddd	%xmm4, %xmm3
    000000de: 	paddd	%xmm3, %xmm2
    000000e2: 	paddd	%xmm3, %xmm1
    000000e6: 	paddd	%xmm3, %xmm2
    000000ea: 	paddd	%xmm3, %xmm1
    000000ee: 	paddd	%xmm2, %xmm0
    000000f2: 	psubd	%xmm1, %xmm0
    000000f6: 	paddd	%xmm2, %xmm0
    000000fa: 	psubd	%xmm1, %xmm0
    000000fe: 	cmpq	%r12, %rdx
    00000101: 	jne	.Ltmp305 # Offset: 257
    00000103: 	movdqa	%xmm0, %xmm1
    00000107: 	psrldq	$0x8, %xmm1
    0000010c: 	paddd	%xmm1, %xmm0
    00000110: 	movdqa	%xmm0, %xmm1
    00000114: 	psrldq	$0x4, %xmm1
    00000119: 	paddd	%xmm1, %xmm0
    0000011d: 	movd	%xmm0, %edx
    00000121: 	addl	%edx, %eax
    00000123: 	cmpl	%r8d, %r15d
    00000126: 	je	.Ltmp303 # Offset: 294
    0000012c: 	movl	0x10(%rsp), %edx
    00000130: 	movl	%r15d, %r9d
.Ltmp316:
    00000133: 	movl	%r14d, %r11d
    00000136: 	subl	%r9d, %r11d
    00000139: 	leal	-0x1(%r11), %ecx
    0000013d: 	cmpl	$0x2, %r11d
    00000141: 	je	.Ltmp306 # Offset: 321
    00000143: 	movq	(%rbx,%r9,4), %xmm3
    00000149: 	movq	0x4(%rbx,%r9,4), %xmm1
    00000150: 	movd	%ebp, %xmm6
    00000154: 	pshufd	$0xe0, %xmm6, %xmm0
    00000159: 	movdqa	%xmm3, %xmm2
    0000015d: 	paddd	%xmm1, %xmm2
    00000161: 	paddd	%xmm0, %xmm2
    00000165: 	movdqa	%xmm3, %xmm0
    00000169: 	psubd	%xmm1, %xmm3
    0000016d: 	paddd	%xmm2, %xmm0
    00000171: 	paddd	%xmm2, %xmm1
    00000175: 	paddd	%xmm2, %xmm0
    00000179: 	paddd	%xmm2, %xmm1
    0000017d: 	paddd	%xmm3, %xmm0
    00000181: 	psubd	%xmm1, %xmm0
    00000185: 	movd	%xmm0, %r11d
    0000018a: 	pshufd	$0xe5, %xmm0, %xmm7
    0000018f: 	movd	%xmm7, %r9d
    00000194: 	addl	%r11d, %r9d
    00000197: 	addl	%r9d, %eax
    0000019a: 	movl	%ecx, %r9d
    0000019d: 	andl	$-0x2, %r9d
    000001a1: 	addl	%r9d, %edx
    000001a4: 	cmpl	%ecx, %r9d
    000001a7: 	je	.Ltmp303 # Offset: 423
.Ltmp306:
    000001a9: 	movslq	%edx, %rdx
    000001ac: 	movl	-0x4(%rbx,%rdx,4), %ecx
    000001b0: 	movl	(%rbx,%rdx,4), %r9d
    000001b4: 	leal	(%r9,%rcx), %edx
    000001b8: 	addl	%ebp, %edx
    000001ba: 	leal	(%rcx,%rdx,2), %ecx
    000001bd: 	leal	(%r9,%rdx,2), %edx
    000001c1: 	leal	(%rax,%rcx,2), %eax
    000001c4: 	subl	%edx, %eax
    000001c6: 	subl	%edx, %eax
.Ltmp303:
    000001c8: 	testl	%eax, %eax
    000001ca: 	jne	.Ltmp307 # Offset: 458
    000001d0: 	addl	$0x1, %r13d
    000001d4: 	cmpl	%r10d, %r13d
    000001d7: 	jl	.Ltmp308 # Offset: 471
.Ltmp302:
    000001dd: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001e4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001eb: 	subq	$0x20, %rax
    000001ef: 	cmpq	%rax, %rbx
    000001f2: 	je	.Ltmp309 # Offset: 498
    000001f8: 	movq	0x18(%rsp), %rax
    000001fd: 	leaq	0x10(%rbx), %rdi
    00000201: 	movq	%rdi, (%rbx)
    00000204: 	movq	(%rax), %rbp
    00000207: 	movq	0x8(%rax), %r12
    0000020b: 	movq	%rbp, %rax
    0000020e: 	addq	%r12, %rax
    00000211: 	je	.Ltmp310 # Offset: 529
    00000213: 	testq	%rbp, %rbp
    00000216: 	je	.Ltmp311 # Offset: 534
.Ltmp310:
    0000021c: 	movq	%r12, 0x20(%rsp)
    00000221: 	cmpq	$0xf, %r12
    00000225: 	ja	.Ltmp312 # Offset: 549
    0000022b: 	cmpq	$0x1, %r12
    0000022f: 	jne	.Ltmp313 # Offset: 559
    00000235: 	movzbl	(%rbp), %eax
    00000239: 	movb	%al, 0x10(%rbx)
.Ltmp317:
    0000023c: 	movq	%r12, 0x8(%rbx)
    00000240: 	movb	$0x0, (%rdi,%r12)
    00000245: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000024c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000253: 	addq	$0x20, %rax
    00000257: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000025e: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000265: 	je	.Ltmp314 # Offset: 613
.Ltmp318:
    0000026b: 	movq	-0x20(%rax), %rbp
    0000026f: 	callq	clock@PLT # Offset: 623
    00000274: 	movq	%rax, end_time(%rip)
    0000027b: 	movq	0x28(%rsp), %rdx
    00000280: 	subq	%fs:0x28, %rdx
    00000289: 	jne	.Ltmp315 # Offset: 649
    0000028f: 	subq	start_time(%rip), %rax
    00000296: 	pxor	%xmm0, %xmm0
    0000029a: 	movq	%rbp, %rdi
    0000029d: 	cvtsi2sd	%rax, %xmm0
    000002a2: 	divsd	DATAat0x4d640(%rip), %xmm0
    000002aa: 	addq	$0x38, %rsp
    000002ae: 	popq	%rbx
    000002af: 	popq	%rbp
    000002b0: 	popq	%r12
    000002b2: 	popq	%r13
    000002b4: 	popq	%r14
    000002b6: 	popq	%r15
    000002b8: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 696
    000002bd: 	nopl	(%rax) # Size: 3
.Ltmp307:
    000002c0: 	movq	0x18(%rsp), %rax
    000002c5: 	leaq	DATAat0x4d004(%rip), %rsi
    000002cc: 	movl	$0x1, %edi
    000002d1: 	movl	%r8d, 0x14(%rsp)
    000002d6: 	addl	$0x1, %r13d
    000002da: 	movq	(%rax), %rdx
    000002dd: 	xorl	%eax, %eax
    000002df: 	callq	__printf_chk@PLT # Offset: 735
    000002e4: 	movl	iterations(%rip), %r10d
    000002eb: 	cmpl	%r10d, %r13d
    000002ee: 	jge	.Ltmp302 # Offset: 750
    000002f4: 	movl	(%rbx), %edi
    000002f6: 	movl	0x4(%rbx), %esi
    000002f9: 	movl	0x14(%rsp), %r8d
    000002fe: 	jmp	.Ltmp308 # Offset: 766
.Ltmp304:
    00000303: 	xorl	%r9d, %r9d
    00000306: 	movl	$0x1, %edx
    0000030b: 	jmp	.Ltmp316 # Offset: 779
.Ltmp312:
    00000310: 	movq	%rbx, %rdi
    00000313: 	leaq	0x20(%rsp), %rsi
    00000318: 	xorl	%edx, %edx
    0000031a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 794
    0000031f: 	movq	%rax, (%rbx)
    00000322: 	movq	%rax, %rdi
    00000325: 	movq	0x20(%rsp), %rax
    0000032a: 	movq	%rax, 0x10(%rbx)
.Ltmp319:
    0000032e: 	movq	%r12, %rdx
    00000331: 	movq	%rbp, %rsi
    00000334: 	callq	memcpy@PLT # Offset: 820
    00000339: 	movq	0x20(%rsp), %r12
    0000033e: 	movq	(%rbx), %rdi
    00000341: 	jmp	.Ltmp317 # Offset: 833
.Ltmp309:
    00000346: 	movq	0x18(%rsp), %rsi
    0000034b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000352: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 850
    00000357: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000035e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000365: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000036c: 	jne	.Ltmp318 # Offset: 876
.Ltmp314:
    00000372: 	movq	-0x8(%rdx), %rax
    00000376: 	addq	$0x200, %rax
    0000037c: 	jmp	.Ltmp318 # Offset: 892
.Ltmp313:
    00000381: 	testq	%r12, %r12
    00000384: 	je	.Ltmp317 # Offset: 900
    0000038a: 	jmp	.Ltmp319 # Offset: 906
.Ltmp315:
    0000038c: 	callq	__stack_chk_fail@PLT # Offset: 908
.Ltmp311:
    00000391: 	leaq	DATAat0x4d018(%rip), %rdi
    00000398: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 920
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE2Ii14custom_cse_addIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSE2Ia14custom_cse_mixIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z9test_CSE2Ia14custom_cse_mixIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z9test_CSE2Ia14custom_cse_mixIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/simple_types_cse.cpp/1
  Number      : 57
  State       : disassembled
  Address     : 0x5df0
  Size        : 0x292
  MaxSize     : 0x2a0
  Offset      : 0x5df0
  Section     : .text
  Orc Section : .local.text._Z9test_CSE2Ia14custom_cse_mixIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB056:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	movq	%rdi, %r14
    00000007: 	pushq	%r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	movl	%esi, %ebp
    0000000e: 	pushq	%rbx
    0000000f: 	subq	$0x28, %rsp
    00000013: 	movq	%rdx, 0x8(%rsp)
    00000018: 	movq	%fs:0x28, %rax
    00000021: 	movq	%rax, 0x18(%rsp)
    00000026: 	xorl	%eax, %eax
    00000028: 	callq	clock@PLT # Offset: 40
    0000002d: 	movl	iterations(%rip), %r11d
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	testl	%r11d, %r11d
    0000003e: 	jle	.Ltmp320 # Offset: 62
    00000044: 	leaq	0x1(%r14), %rax
    00000048: 	movzbl	(%r14), %r15d
    0000004c: 	movsbl	0x1(%r14), %r10d
    00000051: 	xorl	%r13d, %r13d
    00000054: 	movq	%rax, (%rsp)
    00000058: 	movsbl	%bpl, %ebx
    0000005c: 	leaq	0x1f40(%r14), %r12
    00000063: 	nopl	(%rax,%rax) # Size: 5
.Ltmp323:
    00000068: 	movsbl	%r15b, %edi
    0000006c: 	movl	%ebp, %eax
    0000006e: 	movq	(%rsp), %r8
    00000072: 	movl	%edi, %ecx
    00000074: 	subl	%r10d, %ecx
    00000077: 	imull	%ecx, %eax
    0000007a: 	movl	%eax, %esi
    0000007c: 	movl	%edi, %eax
    0000007e: 	cltd
    0000007f: 	idivl	%ebx
    00000081: 	addl	%esi, %eax
    00000083: 	movsbl	%al, %eax
    00000086: 	leal	(%rdi,%rax,2), %edx
    00000089: 	leal	(%r10,%rax,2), %eax
    0000008d: 	addl	%edx, %ecx
    0000008f: 	subl	%eax, %ecx
    00000091: 	nopl	(%rax) # Size: 7
.Ltmp321:
    00000098: 	movl	%edi, %esi
    0000009a: 	movsbl	(%r8), %edi
    0000009e: 	addq	$0x1, %r8
    000000a2: 	movl	%esi, %r9d
    000000a5: 	subl	%edi, %r9d
    000000a8: 	movl	%r9d, %eax
    000000ab: 	imull	%ebp, %eax
    000000ae: 	movl	%eax, %r9d
    000000b1: 	movl	%esi, %eax
    000000b3: 	cltd
    000000b4: 	idivl	%ebx
    000000b6: 	addl	%r9d, %eax
    000000b9: 	movsbl	%al, %eax
    000000bc: 	leal	(%rdi,%rax,2), %edx
    000000bf: 	leal	(%rsi,%rax,2), %eax
    000000c2: 	leal	(%rcx,%rax,2), %eax
    000000c5: 	subl	%edx, %eax
    000000c7: 	subl	%edx, %eax
    000000c9: 	movl	%eax, %ecx
    000000cb: 	cmpq	%r12, %r8
    000000ce: 	jne	.Ltmp321 # Offset: 206
    000000d0: 	testb	%al, %al
    000000d2: 	jne	.Ltmp322 # Offset: 210
    000000d8: 	addl	$0x1, %r13d
    000000dc: 	cmpl	%r11d, %r13d
    000000df: 	jl	.Ltmp323 # Offset: 223
.Ltmp320:
    000000e1: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000e8: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000ef: 	subq	$0x20, %rax
    000000f3: 	cmpq	%rax, %rbx
    000000f6: 	je	.Ltmp324 # Offset: 246
    000000fc: 	movq	0x8(%rsp), %rax
    00000101: 	leaq	0x10(%rbx), %rdi
    00000105: 	movq	%rdi, (%rbx)
    00000108: 	movq	(%rax), %rbp
    0000010b: 	movq	0x8(%rax), %r12
    0000010f: 	movq	%rbp, %rax
    00000112: 	addq	%r12, %rax
    00000115: 	je	.Ltmp325 # Offset: 277
    00000117: 	testq	%rbp, %rbp
    0000011a: 	je	.Ltmp326 # Offset: 282
.Ltmp325:
    00000120: 	movq	%r12, 0x10(%rsp)
    00000125: 	cmpq	$0xf, %r12
    00000129: 	ja	.Ltmp327 # Offset: 297
    0000012f: 	cmpq	$0x1, %r12
    00000133: 	jne	.Ltmp328 # Offset: 307
    00000139: 	movzbl	(%rbp), %eax
    0000013d: 	movb	%al, 0x10(%rbx)
.Ltmp331:
    00000140: 	movq	%r12, 0x8(%rbx)
    00000144: 	movb	$0x0, (%rdi,%r12)
    00000149: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000150: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000157: 	addq	$0x20, %rax
    0000015b: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000162: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000169: 	je	.Ltmp329 # Offset: 361
.Ltmp332:
    0000016f: 	movq	-0x20(%rax), %rbp
    00000173: 	callq	clock@PLT # Offset: 371
    00000178: 	movq	%rax, end_time(%rip)
    0000017f: 	movq	0x18(%rsp), %rdx
    00000184: 	subq	%fs:0x28, %rdx
    0000018d: 	jne	.Ltmp330 # Offset: 397
    00000193: 	subq	start_time(%rip), %rax
    0000019a: 	pxor	%xmm0, %xmm0
    0000019e: 	movq	%rbp, %rdi
    000001a1: 	cvtsi2sd	%rax, %xmm0
    000001a6: 	divsd	DATAat0x4d640(%rip), %xmm0
    000001ae: 	addq	$0x28, %rsp
    000001b2: 	popq	%rbx
    000001b3: 	popq	%rbp
    000001b4: 	popq	%r12
    000001b6: 	popq	%r13
    000001b8: 	popq	%r14
    000001ba: 	popq	%r15
    000001bc: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 444
    000001c1: 	nopl	(%rax) # Size: 7
.Ltmp322:
    000001c8: 	movq	0x8(%rsp), %rax
    000001cd: 	leaq	DATAat0x4d004(%rip), %rsi
    000001d4: 	movl	$0x1, %edi
    000001d9: 	addl	$0x1, %r13d
    000001dd: 	movq	(%rax), %rdx
    000001e0: 	xorl	%eax, %eax
    000001e2: 	callq	__printf_chk@PLT # Offset: 482
    000001e7: 	movl	iterations(%rip), %r11d
    000001ee: 	cmpl	%r11d, %r13d
    000001f1: 	jge	.Ltmp320 # Offset: 497
    000001f7: 	movzbl	(%r14), %r15d
    000001fb: 	movsbl	0x1(%r14), %r10d
    00000200: 	jmp	.Ltmp323 # Offset: 512
.Ltmp327:
    00000205: 	movq	%rbx, %rdi
    00000208: 	leaq	0x10(%rsp), %rsi
    0000020d: 	xorl	%edx, %edx
    0000020f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 527
    00000214: 	movq	%rax, (%rbx)
    00000217: 	movq	%rax, %rdi
    0000021a: 	movq	0x10(%rsp), %rax
    0000021f: 	movq	%rax, 0x10(%rbx)
.Ltmp333:
    00000223: 	movq	%r12, %rdx
    00000226: 	movq	%rbp, %rsi
    00000229: 	callq	memcpy@PLT # Offset: 553
    0000022e: 	movq	0x10(%rsp), %r12
    00000233: 	movq	(%rbx), %rdi
    00000236: 	jmp	.Ltmp331 # Offset: 566
.Ltmp324:
    0000023b: 	movq	0x8(%rsp), %rsi
    00000240: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000247: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 583
    0000024c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000253: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000025a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000261: 	jne	.Ltmp332 # Offset: 609
.Ltmp329:
    00000267: 	movq	-0x8(%rdx), %rax
    0000026b: 	addq	$0x200, %rax
    00000271: 	jmp	.Ltmp332 # Offset: 625
.Ltmp328:
    00000276: 	testq	%r12, %r12
    00000279: 	je	.Ltmp331 # Offset: 633
    0000027f: 	jmp	.Ltmp333 # Offset: 639
.Ltmp330:
    00000281: 	callq	__stack_chk_fail@PLT # Offset: 641
.Ltmp326:
    00000286: 	leaq	DATAat0x4d018(%rip), %rdi
    0000028d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 653
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE2Ia14custom_cse_mixIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z9test_CSE2Ij14custom_cse_mixIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 58
  State       : disassembled
  Address     : 0x6090
  Size        : 0x30d
  MaxSize     : 0x310
  Offset      : 0x6090
  Section     : .text
  Orc Section : .local.text._Z9test_CSE2Ij14custom_cse_mixIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB057:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rcx, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movq	%fs:0x28, %rax
    00000024: 	movq	%rax, 0x18(%rsp)
    00000029: 	xorl	%eax, %eax
    0000002b: 	callq	clock@PLT # Offset: 43
    00000030: 	movl	iterations(%rip), %edi
    00000036: 	movq	%rax, start_time(%rip)
    0000003d: 	testl	%edi, %edi
    0000003f: 	jle	.Ltmp334 # Offset: 63
    00000045: 	leal	-0x1(%r14), %r8d
    00000049: 	movl	(%rbx), %r10d
    0000004c: 	leal	-0x2(%r14), %r9d
    00000050: 	xorl	%r13d, %r13d
    00000053: 	movl	%r8d, %eax
    00000056: 	movl	%r8d, %r15d
    00000059: 	shrl	$0x2, %eax
    0000005c: 	andl	$-0x4, %r15d
    00000060: 	subl	$0x1, %eax
    00000063: 	shlq	$0x4, %rax
    00000067: 	leaq	0x10(%rbx,%rax), %rbp
    0000006c: 	leal	0x1(%r15), %eax
    00000070: 	movl	%eax, 0x4(%rsp)
    00000074: 	nopl	(%rax) # Size: 4
.Ltmp340:
    00000078: 	movl	%r10d, %edx
    0000007b: 	subl	0x4(%rbx), %edx
    0000007e: 	addl	%edx, %edx
    00000080: 	cmpl	$0x1, %r14d
    00000084: 	jle	.Ltmp335 # Offset: 132
    0000008a: 	cmpl	$0x2, %r9d
    0000008e: 	jbe	.Ltmp336 # Offset: 142
    00000094: 	movq	%rbx, %rax
    00000097: 	pxor	%xmm1, %xmm1
    0000009b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp337:
    000000a0: 	movdqu	(%rax), %xmm0
    000000a4: 	movdqu	0x4(%rax), %xmm2
    000000a9: 	addq	$0x10, %rax
    000000ad: 	psubd	%xmm2, %xmm0
    000000b1: 	pslld	$0x1, %xmm0
    000000b6: 	paddd	%xmm0, %xmm1
    000000ba: 	cmpq	%rax, %rbp
    000000bd: 	jne	.Ltmp337 # Offset: 189
    000000bf: 	movdqa	%xmm1, %xmm0
    000000c3: 	psrldq	$0x8, %xmm0
    000000c8: 	paddd	%xmm0, %xmm1
    000000cc: 	movdqa	%xmm1, %xmm0
    000000d0: 	psrldq	$0x4, %xmm0
    000000d5: 	paddd	%xmm0, %xmm1
    000000d9: 	movd	%xmm1, %eax
    000000dd: 	addl	%eax, %edx
    000000df: 	cmpl	%r15d, %r8d
    000000e2: 	je	.Ltmp335 # Offset: 226
    000000e4: 	movl	0x4(%rsp), %eax
    000000e8: 	movl	%r15d, %ecx
.Ltmp348:
    000000eb: 	movl	%r14d, %r11d
    000000ee: 	subl	%ecx, %r11d
    000000f1: 	leal	-0x1(%r11), %esi
    000000f5: 	cmpl	$0x2, %r11d
    000000f9: 	je	.Ltmp338 # Offset: 249
    000000fb: 	movq	(%rbx,%rcx,4), %xmm0
    00000100: 	movq	0x4(%rbx,%rcx,4), %xmm1
    00000106: 	psubd	%xmm1, %xmm0
    0000010a: 	pslld	$0x1, %xmm0
    0000010f: 	movd	%xmm0, %r11d
    00000114: 	pshufd	$0xe5, %xmm0, %xmm3
    00000119: 	movd	%xmm3, %ecx
    0000011d: 	addl	%r11d, %ecx
    00000120: 	addl	%ecx, %edx
    00000122: 	movl	%esi, %ecx
    00000124: 	andl	$-0x2, %ecx
    00000127: 	addl	%ecx, %eax
    00000129: 	cmpl	%esi, %ecx
    0000012b: 	je	.Ltmp335 # Offset: 299
.Ltmp338:
    0000012d: 	cltq
    0000012f: 	movl	-0x4(%rbx,%rax,4), %ecx
    00000133: 	subl	(%rbx,%rax,4), %ecx
    00000136: 	leal	(%rdx,%rcx,2), %edx
.Ltmp335:
    00000139: 	testl	%edx, %edx
    0000013b: 	jne	.Ltmp339 # Offset: 315
    00000141: 	addl	$0x1, %r13d
    00000145: 	cmpl	%edi, %r13d
    00000148: 	jl	.Ltmp340 # Offset: 328
.Ltmp334:
    0000014e: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000155: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000015c: 	subq	$0x20, %rax
    00000160: 	cmpq	%rax, %rbx
    00000163: 	je	.Ltmp341 # Offset: 355
    00000169: 	leaq	0x10(%rbx), %rdi
    0000016d: 	movq	%rdi, (%rbx)
    00000170: 	movq	(%r12), %rbp
    00000174: 	movq	0x8(%r12), %r12
    00000179: 	movq	%rbp, %rax
    0000017c: 	addq	%r12, %rax
    0000017f: 	je	.Ltmp342 # Offset: 383
    00000181: 	testq	%rbp, %rbp
    00000184: 	je	.Ltmp343 # Offset: 388
.Ltmp342:
    0000018a: 	movq	%r12, 0x10(%rsp)
    0000018f: 	cmpq	$0xf, %r12
    00000193: 	ja	.Ltmp344 # Offset: 403
    00000199: 	cmpq	$0x1, %r12
    0000019d: 	jne	.Ltmp345 # Offset: 413
    000001a3: 	movzbl	(%rbp), %eax
    000001a7: 	movb	%al, 0x10(%rbx)
.Ltmp349:
    000001aa: 	movq	%r12, 0x8(%rbx)
    000001ae: 	movb	$0x0, (%rdi,%r12)
    000001b3: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001ba: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001c1: 	addq	$0x20, %rax
    000001c5: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001cc: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000001d3: 	je	.Ltmp346 # Offset: 467
.Ltmp350:
    000001d9: 	movq	-0x20(%rax), %rbp
    000001dd: 	callq	clock@PLT # Offset: 477
    000001e2: 	movq	%rax, end_time(%rip)
    000001e9: 	movq	0x18(%rsp), %rdx
    000001ee: 	subq	%fs:0x28, %rdx
    000001f7: 	jne	.Ltmp347 # Offset: 503
    000001fd: 	subq	start_time(%rip), %rax
    00000204: 	pxor	%xmm0, %xmm0
    00000208: 	movq	%rbp, %rdi
    0000020b: 	cvtsi2sd	%rax, %xmm0
    00000210: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000218: 	addq	$0x28, %rsp
    0000021c: 	popq	%rbx
    0000021d: 	popq	%rbp
    0000021e: 	popq	%r12
    00000220: 	popq	%r13
    00000222: 	popq	%r14
    00000224: 	popq	%r15
    00000226: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 550
    0000022b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp339:
    00000230: 	movq	(%r12), %rdx
    00000234: 	movl	$0x1, %edi
    00000239: 	xorl	%eax, %eax
    0000023b: 	movl	%r9d, 0xc(%rsp)
    00000240: 	leaq	DATAat0x4d004(%rip), %rsi
    00000247: 	movl	%r8d, 0x8(%rsp)
    0000024c: 	addl	$0x1, %r13d
    00000250: 	callq	__printf_chk@PLT # Offset: 592
    00000255: 	movl	iterations(%rip), %edi
    0000025b: 	cmpl	%edi, %r13d
    0000025e: 	jge	.Ltmp334 # Offset: 606
    00000264: 	movl	(%rbx), %r10d
    00000267: 	movl	0x8(%rsp), %r8d
    0000026c: 	movl	0xc(%rsp), %r9d
    00000271: 	jmp	.Ltmp340 # Offset: 625
.Ltmp336:
    00000276: 	xorl	%ecx, %ecx
    00000278: 	movl	$0x1, %eax
    0000027d: 	jmp	.Ltmp348 # Offset: 637
.Ltmp344:
    00000282: 	movq	%rbx, %rdi
    00000285: 	leaq	0x10(%rsp), %rsi
    0000028a: 	xorl	%edx, %edx
    0000028c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 652
    00000291: 	movq	%rax, (%rbx)
    00000294: 	movq	%rax, %rdi
    00000297: 	movq	0x10(%rsp), %rax
    0000029c: 	movq	%rax, 0x10(%rbx)
.Ltmp351:
    000002a0: 	movq	%r12, %rdx
    000002a3: 	movq	%rbp, %rsi
    000002a6: 	callq	memcpy@PLT # Offset: 678
    000002ab: 	movq	0x10(%rsp), %r12
    000002b0: 	movq	(%rbx), %rdi
    000002b3: 	jmp	.Ltmp349 # Offset: 691
.Ltmp341:
    000002b8: 	movq	%r12, %rsi
    000002bb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002c2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 706
    000002c7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002ce: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002d5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002dc: 	jne	.Ltmp350 # Offset: 732
.Ltmp346:
    000002e2: 	movq	-0x8(%rdx), %rax
    000002e6: 	addq	$0x200, %rax
    000002ec: 	jmp	.Ltmp350 # Offset: 748
.Ltmp345:
    000002f1: 	testq	%r12, %r12
    000002f4: 	je	.Ltmp349 # Offset: 756
    000002fa: 	jmp	.Ltmp351 # Offset: 762
.Ltmp347:
    000002fc: 	callq	__stack_chk_fail@PLT # Offset: 764
.Ltmp343:
    00000301: 	leaq	DATAat0x4d018(%rip), %rdi
    00000308: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 776
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE2Ij14custom_cse_mixIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSE2Ii14custom_cse_mixIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 59
  State       : disassembled
  Address     : 0x63a0
  Size        : 0x279
  MaxSize     : 0x280
  Offset      : 0x63a0
  Section     : .text
  Orc Section : .local.text._Z9test_CSE2Ii14custom_cse_mixIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB058:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%esi, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movl	%edx, %ebx
    00000016: 	subq	$0x28, %rsp
    0000001a: 	movq	%rcx, 0x8(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x18(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r15d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r15d, %r15d
    00000045: 	jle	.Ltmp352 # Offset: 69
    0000004b: 	leal	-0x2(%r13), %eax
    0000004f: 	xorl	%r14d, %r14d
    00000052: 	leaq	0x8(%r12,%rax,4), %rbp
.Ltmp364:
    00000057: 	movl	(%r12), %r10d
    0000005b: 	movl	0x4(%r12), %r11d
.Ltmp356:
    00000060: 	movl	%r10d, %eax
    00000063: 	movl	%r10d, %r8d
    00000066: 	movl	%ebx, %edi
    00000068: 	movl	%r10d, %esi
    0000006b: 	cltd
    0000006c: 	subl	%r11d, %r8d
    0000006f: 	idivl	%ebx
    00000071: 	imull	%r8d, %edi
    00000075: 	addl	%edi, %eax
    00000077: 	leal	(%r10,%rax,2), %ecx
    0000007b: 	leal	(%r11,%rax,2), %eax
    0000007f: 	addl	%r8d, %ecx
    00000082: 	subl	%eax, %ecx
    00000084: 	cmpl	$0x1, %r13d
    00000088: 	jle	.Ltmp353 # Offset: 136
    0000008a: 	leaq	0x4(%r12), %rdi
    0000008f: 	nop # Size: 1
.Ltmp354:
    00000090: 	movl	%esi, %r8d
    00000093: 	movl	(%rdi), %esi
    00000095: 	addq	$0x4, %rdi
    00000099: 	movl	%r8d, %eax
    0000009c: 	subl	%esi, %eax
    0000009e: 	imull	%ebx, %eax
    000000a1: 	movl	%eax, %r9d
    000000a4: 	movl	%r8d, %eax
    000000a7: 	cltd
    000000a8: 	idivl	%ebx
    000000aa: 	addl	%r9d, %eax
    000000ad: 	leal	(%r8,%rax,2), %edx
    000000b1: 	leal	(%rsi,%rax,2), %eax
    000000b4: 	addl	%edx, %ecx
    000000b6: 	subl	%eax, %ecx
    000000b8: 	addl	%edx, %ecx
    000000ba: 	subl	%eax, %ecx
    000000bc: 	cmpq	%rdi, %rbp
    000000bf: 	jne	.Ltmp354 # Offset: 191
.Ltmp353:
    000000c1: 	testl	%ecx, %ecx
    000000c3: 	jne	.Ltmp355 # Offset: 195
    000000c9: 	addl	$0x1, %r14d
    000000cd: 	cmpl	%r15d, %r14d
    000000d0: 	jl	.Ltmp356 # Offset: 208
.Ltmp352:
    000000d2: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000d9: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000e0: 	subq	$0x20, %rax
    000000e4: 	cmpq	%rax, %rbx
    000000e7: 	je	.Ltmp357 # Offset: 231
    000000ed: 	movq	0x8(%rsp), %rax
    000000f2: 	leaq	0x10(%rbx), %rdi
    000000f6: 	movq	%rdi, (%rbx)
    000000f9: 	movq	(%rax), %rbp
    000000fc: 	movq	0x8(%rax), %r12
    00000100: 	movq	%rbp, %rax
    00000103: 	addq	%r12, %rax
    00000106: 	je	.Ltmp358 # Offset: 262
    00000108: 	testq	%rbp, %rbp
    0000010b: 	je	.Ltmp359 # Offset: 267
.Ltmp358:
    00000111: 	movq	%r12, 0x10(%rsp)
    00000116: 	cmpq	$0xf, %r12
    0000011a: 	ja	.Ltmp360 # Offset: 282
    00000120: 	cmpq	$0x1, %r12
    00000124: 	jne	.Ltmp361 # Offset: 292
    0000012a: 	movzbl	(%rbp), %eax
    0000012e: 	movb	%al, 0x10(%rbx)
.Ltmp365:
    00000131: 	movq	%r12, 0x8(%rbx)
    00000135: 	movb	$0x0, (%rdi,%r12)
    0000013a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000141: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000148: 	addq	$0x20, %rax
    0000014c: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000153: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000015a: 	je	.Ltmp362 # Offset: 346
.Ltmp366:
    00000160: 	movq	-0x20(%rax), %rbp
    00000164: 	callq	clock@PLT # Offset: 356
    00000169: 	movq	%rax, end_time(%rip)
    00000170: 	movq	0x18(%rsp), %rdx
    00000175: 	subq	%fs:0x28, %rdx
    0000017e: 	jne	.Ltmp363 # Offset: 382
    00000184: 	subq	start_time(%rip), %rax
    0000018b: 	pxor	%xmm0, %xmm0
    0000018f: 	movq	%rbp, %rdi
    00000192: 	cvtsi2sd	%rax, %xmm0
    00000197: 	divsd	DATAat0x4d640(%rip), %xmm0
    0000019f: 	addq	$0x28, %rsp
    000001a3: 	popq	%rbx
    000001a4: 	popq	%rbp
    000001a5: 	popq	%r12
    000001a7: 	popq	%r13
    000001a9: 	popq	%r14
    000001ab: 	popq	%r15
    000001ad: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 429
    000001b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp355:
    000001b8: 	movq	0x8(%rsp), %rax
    000001bd: 	leaq	DATAat0x4d004(%rip), %rsi
    000001c4: 	movl	$0x1, %edi
    000001c9: 	addl	$0x1, %r14d
    000001cd: 	movq	(%rax), %rdx
    000001d0: 	xorl	%eax, %eax
    000001d2: 	callq	__printf_chk@PLT # Offset: 466
    000001d7: 	movl	iterations(%rip), %r15d
    000001de: 	cmpl	%r15d, %r14d
    000001e1: 	jl	.Ltmp364 # Offset: 481
    000001e7: 	jmp	.Ltmp352 # Offset: 487
.Ltmp360:
    000001ec: 	movq	%rbx, %rdi
    000001ef: 	leaq	0x10(%rsp), %rsi
    000001f4: 	xorl	%edx, %edx
    000001f6: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 502
    000001fb: 	movq	%rax, (%rbx)
    000001fe: 	movq	%rax, %rdi
    00000201: 	movq	0x10(%rsp), %rax
    00000206: 	movq	%rax, 0x10(%rbx)
.Ltmp367:
    0000020a: 	movq	%r12, %rdx
    0000020d: 	movq	%rbp, %rsi
    00000210: 	callq	memcpy@PLT # Offset: 528
    00000215: 	movq	0x10(%rsp), %r12
    0000021a: 	movq	(%rbx), %rdi
    0000021d: 	jmp	.Ltmp365 # Offset: 541
.Ltmp357:
    00000222: 	movq	0x8(%rsp), %rsi
    00000227: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000022e: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 558
    00000233: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000023a: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000241: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000248: 	jne	.Ltmp366 # Offset: 584
.Ltmp362:
    0000024e: 	movq	-0x8(%rdx), %rax
    00000252: 	addq	$0x200, %rax
    00000258: 	jmp	.Ltmp366 # Offset: 600
.Ltmp361:
    0000025d: 	testq	%r12, %r12
    00000260: 	je	.Ltmp365 # Offset: 608
    00000266: 	jmp	.Ltmp367 # Offset: 614
.Ltmp363:
    00000268: 	callq	__stack_chk_fail@PLT # Offset: 616
.Ltmp359:
    0000026d: 	leaq	DATAat0x4d018(%rip), %rdi
    00000274: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 628
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE2Ii14custom_cse_mixIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSE2Ih14custom_cse_mixIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 60
  State       : disassembled
  Address     : 0x6620
  Size        : 0x3d6
  MaxSize     : 0x3e0
  Offset      : 0x6620
  Section     : .text
  Orc Section : .local.text._Z9test_CSE2Ih14custom_cse_mixIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB059:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%edx, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%esi, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdi, %rbx
    00000016: 	subq	$0x38, %rsp
    0000001a: 	movq	%rcx, 0x10(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x28(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r9d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r9d, %r9d
    00000045: 	jle	.Ltmp368 # Offset: 69
    0000004b: 	leal	-0x1(%rbp), %r8d
    0000004f: 	leal	-0x2(%rbp), %eax
    00000052: 	movzbl	(%rbx), %esi
    00000055: 	movzbl	0x1(%rbx), %edi
    00000059: 	movl	%eax, 0x4(%rsp)
    0000005d: 	movl	%r8d, %eax
    00000060: 	movl	%r8d, %r15d
    00000063: 	xorl	%r14d, %r14d
    00000066: 	shrl	$0x4, %eax
    00000069: 	andl	$-0x10, %r15d
    0000006d: 	subl	$0x1, %eax
    00000070: 	shlq	$0x4, %rax
    00000074: 	leaq	0x10(%rbx,%rax), %r12
    00000079: 	leal	0x1(%r15), %eax
    0000007d: 	movl	%eax, 0x8(%rsp)
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp374:
    00000088: 	movl	%esi, %ecx
    0000008a: 	movl	%r13d, %eax
    0000008d: 	subl	%edi, %ecx
    0000008f: 	imull	%ecx, %eax
    00000092: 	movl	%eax, %edx
    00000094: 	movzbl	%sil, %eax
    00000098: 	divb	%r13b
    0000009b: 	addl	%edx, %eax
    0000009d: 	movzbl	%al, %r10d
    000000a1: 	leal	(%rcx,%rax,2), %edx
    000000a4: 	movzbl	%dil, %eax
    000000a8: 	addl	%esi, %edx
    000000aa: 	leal	(%rax,%r10,2), %eax
    000000ae: 	subl	%eax, %edx
    000000b0: 	cmpl	$0x1, %ebp
    000000b3: 	jle	.Ltmp369 # Offset: 179
    000000b9: 	cmpl	$0xe, 0x4(%rsp)
    000000be: 	jbe	.Ltmp370 # Offset: 190
    000000c4: 	movq	%rbx, %rax
    000000c7: 	pxor	%xmm1, %xmm1
    000000cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp371:
    000000d0: 	movdqu	(%rax), %xmm0
    000000d4: 	movdqu	0x1(%rax), %xmm2
    000000d9: 	addq	$0x10, %rax
    000000dd: 	psubb	%xmm2, %xmm0
    000000e1: 	paddb	%xmm0, %xmm0
    000000e5: 	paddb	%xmm0, %xmm1
    000000e9: 	cmpq	%rax, %r12
    000000ec: 	jne	.Ltmp371 # Offset: 236
    000000ee: 	movdqa	%xmm1, %xmm0
    000000f2: 	psrldq	$0x8, %xmm0
    000000f7: 	paddb	%xmm0, %xmm1
    000000fb: 	pxor	%xmm0, %xmm0
    000000ff: 	psadbw	%xmm0, %xmm1
    00000103: 	movd	%xmm1, %eax
    00000107: 	addl	%eax, %edx
    00000109: 	cmpl	%r15d, %r8d
    0000010c: 	je	.Ltmp369 # Offset: 268
    00000112: 	movl	0x8(%rsp), %ecx
    00000116: 	movl	%r15d, %eax
.Ltmp382:
    00000119: 	movl	%ebp, %r11d
    0000011c: 	subl	%eax, %r11d
    0000011f: 	leal	-0x1(%r11), %r10d
    00000123: 	subl	$0x2, %r11d
    00000127: 	cmpl	$0x6, %r11d
    0000012b: 	jbe	.Ltmp372 # Offset: 299
    0000012d: 	movq	0x1(%rbx,%rax), %xmm1
    00000133: 	movq	(%rbx,%rax), %xmm0
    00000138: 	psubb	%xmm1, %xmm0
    0000013c: 	pxor	%xmm1, %xmm1
    00000140: 	paddb	%xmm0, %xmm0
    00000144: 	movdqa	%xmm0, %xmm3
    00000148: 	psadbw	%xmm1, %xmm3
    0000014c: 	movq	%xmm3, %rax
    00000151: 	movq	%xmm3, 0x18(%rsp)
    00000157: 	movl	%eax, %r11d
    0000015a: 	movl	%r10d, %eax
    0000015d: 	andl	$-0x8, %eax
    00000160: 	addl	%r11d, %edx
    00000163: 	addl	%eax, %ecx
    00000165: 	cmpl	%r10d, %eax
    00000168: 	je	.Ltmp369 # Offset: 360
.Ltmp372:
    0000016e: 	movslq	%ecx, %rax
    00000171: 	addq	%rbx, %rax
    00000174: 	movzbl	(%rax), %r10d
    00000178: 	movzbl	-0x1(%rax), %eax
    0000017c: 	subl	%r10d, %eax
    0000017f: 	leal	(%rdx,%rax,2), %edx
    00000182: 	leal	0x1(%rcx), %eax
    00000185: 	cmpl	%eax, %ebp
    00000187: 	jle	.Ltmp369 # Offset: 391
    00000189: 	cltq
    0000018b: 	movzbl	(%rbx,%rax), %eax
    0000018f: 	subl	%eax, %r10d
    00000192: 	leal	(%rdx,%r10,2), %edx
    00000196: 	leal	0x2(%rcx), %r10d
    0000019a: 	cmpl	%r10d, %ebp
    0000019d: 	jle	.Ltmp369 # Offset: 413
    0000019f: 	movslq	%r10d, %r10
    000001a2: 	movzbl	(%rbx,%r10), %r10d
    000001a7: 	subl	%r10d, %eax
    000001aa: 	leal	(%rdx,%rax,2), %edx
    000001ad: 	leal	0x3(%rcx), %eax
    000001b0: 	cmpl	%eax, %ebp
    000001b2: 	jle	.Ltmp369 # Offset: 434
    000001b4: 	cltq
    000001b6: 	movzbl	(%rbx,%rax), %eax
    000001ba: 	subl	%eax, %r10d
    000001bd: 	leal	(%rdx,%r10,2), %edx
    000001c1: 	leal	0x4(%rcx), %r10d
    000001c5: 	cmpl	%r10d, %ebp
    000001c8: 	jle	.Ltmp369 # Offset: 456
    000001ca: 	movslq	%r10d, %r10
    000001cd: 	movzbl	(%rbx,%r10), %r10d
    000001d2: 	subl	%r10d, %eax
    000001d5: 	leal	(%rdx,%rax,2), %edx
    000001d8: 	leal	0x5(%rcx), %eax
    000001db: 	cmpl	%eax, %ebp
    000001dd: 	jle	.Ltmp369 # Offset: 477
    000001df: 	cltq
    000001e1: 	addl	$0x6, %ecx
    000001e4: 	movzbl	(%rbx,%rax), %eax
    000001e8: 	subl	%eax, %r10d
    000001eb: 	leal	(%rdx,%r10,2), %edx
    000001ef: 	cmpl	%ebp, %ecx
    000001f1: 	jge	.Ltmp369 # Offset: 497
    000001f3: 	movslq	%ecx, %rcx
    000001f6: 	subb	(%rbx,%rcx), %al
    000001f9: 	leal	(%rdx,%rax,2), %edx
.Ltmp369:
    000001fc: 	testb	%dl, %dl
    000001fe: 	jne	.Ltmp373 # Offset: 510
    00000204: 	addl	$0x1, %r14d
    00000208: 	cmpl	%r9d, %r14d
    0000020b: 	jl	.Ltmp374 # Offset: 523
.Ltmp368:
    00000211: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000218: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000021f: 	subq	$0x20, %rax
    00000223: 	cmpq	%rax, %rbx
    00000226: 	je	.Ltmp375 # Offset: 550
    0000022c: 	movq	0x10(%rsp), %rax
    00000231: 	leaq	0x10(%rbx), %rdi
    00000235: 	movq	%rdi, (%rbx)
    00000238: 	movq	(%rax), %rbp
    0000023b: 	movq	0x8(%rax), %r12
    0000023f: 	movq	%rbp, %rax
    00000242: 	addq	%r12, %rax
    00000245: 	je	.Ltmp376 # Offset: 581
    00000247: 	testq	%rbp, %rbp
    0000024a: 	je	.Ltmp377 # Offset: 586
.Ltmp376:
    00000250: 	movq	%r12, 0x20(%rsp)
    00000255: 	cmpq	$0xf, %r12
    00000259: 	ja	.Ltmp378 # Offset: 601
    0000025f: 	cmpq	$0x1, %r12
    00000263: 	jne	.Ltmp379 # Offset: 611
    00000269: 	movzbl	(%rbp), %eax
    0000026d: 	movb	%al, 0x10(%rbx)
.Ltmp383:
    00000270: 	movq	%r12, 0x8(%rbx)
    00000274: 	movb	$0x0, (%rdi,%r12)
    00000279: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000280: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000287: 	addq	$0x20, %rax
    0000028b: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000292: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000299: 	je	.Ltmp380 # Offset: 665
.Ltmp384:
    0000029f: 	movq	-0x20(%rax), %rbp
    000002a3: 	callq	clock@PLT # Offset: 675
    000002a8: 	movq	%rax, end_time(%rip)
    000002af: 	movq	0x28(%rsp), %rdx
    000002b4: 	subq	%fs:0x28, %rdx
    000002bd: 	jne	.Ltmp381 # Offset: 701
    000002c3: 	subq	start_time(%rip), %rax
    000002ca: 	pxor	%xmm0, %xmm0
    000002ce: 	movq	%rbp, %rdi
    000002d1: 	cvtsi2sd	%rax, %xmm0
    000002d6: 	divsd	DATAat0x4d640(%rip), %xmm0
    000002de: 	addq	$0x38, %rsp
    000002e2: 	popq	%rbx
    000002e3: 	popq	%rbp
    000002e4: 	popq	%r12
    000002e6: 	popq	%r13
    000002e8: 	popq	%r14
    000002ea: 	popq	%r15
    000002ec: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 748
    000002f1: 	nopl	(%rax) # Size: 7
.Ltmp373:
    000002f8: 	movq	0x10(%rsp), %rax
    000002fd: 	leaq	DATAat0x4d004(%rip), %rsi
    00000304: 	movl	$0x1, %edi
    00000309: 	movl	%r8d, 0xc(%rsp)
    0000030e: 	addl	$0x1, %r14d
    00000312: 	movq	(%rax), %rdx
    00000315: 	xorl	%eax, %eax
    00000317: 	callq	__printf_chk@PLT # Offset: 791
    0000031c: 	movl	iterations(%rip), %r9d
    00000323: 	cmpl	%r9d, %r14d
    00000326: 	jge	.Ltmp368 # Offset: 806
    0000032c: 	movzbl	(%rbx), %esi
    0000032f: 	movzbl	0x1(%rbx), %edi
    00000333: 	movl	0xc(%rsp), %r8d
    00000338: 	jmp	.Ltmp374 # Offset: 824
.Ltmp370:
    0000033d: 	xorl	%eax, %eax
    0000033f: 	movl	$0x1, %ecx
    00000344: 	jmp	.Ltmp382 # Offset: 836
.Ltmp378:
    00000349: 	movq	%rbx, %rdi
    0000034c: 	leaq	0x20(%rsp), %rsi
    00000351: 	xorl	%edx, %edx
    00000353: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 851
    00000358: 	movq	%rax, (%rbx)
    0000035b: 	movq	%rax, %rdi
    0000035e: 	movq	0x20(%rsp), %rax
    00000363: 	movq	%rax, 0x10(%rbx)
.Ltmp385:
    00000367: 	movq	%r12, %rdx
    0000036a: 	movq	%rbp, %rsi
    0000036d: 	callq	memcpy@PLT # Offset: 877
    00000372: 	movq	0x20(%rsp), %r12
    00000377: 	movq	(%rbx), %rdi
    0000037a: 	jmp	.Ltmp383 # Offset: 890
.Ltmp375:
    0000037f: 	movq	0x10(%rsp), %rsi
    00000384: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000038b: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 907
    00000390: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000397: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000039e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003a5: 	jne	.Ltmp384 # Offset: 933
.Ltmp380:
    000003ab: 	movq	-0x8(%rdx), %rax
    000003af: 	addq	$0x200, %rax
    000003b5: 	jmp	.Ltmp384 # Offset: 949
.Ltmp379:
    000003ba: 	testq	%r12, %r12
    000003bd: 	je	.Ltmp383 # Offset: 957
    000003c3: 	jmp	.Ltmp385 # Offset: 963
.Ltmp381:
    000003c5: 	callq	__stack_chk_fail@PLT # Offset: 965
.Ltmp377:
    000003ca: 	leaq	DATAat0x4d018(%rip), %rdi
    000003d1: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 977
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE2Ih14custom_cse_mixIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z17test_CSE2_halfoptIf14custom_cse_mixIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 61
  State       : disassembled
  Address     : 0x6a00
  Size        : 0x3f3
  MaxSize     : 0x400
  Offset      : 0x6a00
  Section     : .text
  Orc Section : .local.text._Z17test_CSE2_halfoptIf14custom_cse_mixIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB060:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movl	%esi, %r12d
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdx, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movss	%xmm0, 0xc(%rsp)
    00000021: 	movq	%fs:0x28, %rax
    0000002a: 	movq	%rax, 0x18(%rsp)
    0000002f: 	xorl	%eax, %eax
    00000031: 	callq	clock@PLT # Offset: 49
    00000036: 	movl	iterations(%rip), %edx
    0000003c: 	movss	0xc(%rsp), %xmm3
    00000042: 	movq	%rax, start_time(%rip)
    00000049: 	testl	%edx, %edx
    0000004b: 	jle	.Ltmp386 # Offset: 75
    00000051: 	leal	-0x4(%r12), %eax
    00000056: 	movss	(%rbx), %xmm4
    0000005a: 	movss	0x4(%rbx), %xmm5
    0000005f: 	xorl	%r13d, %r13d
    00000062: 	shrl	%eax
    00000064: 	movq	DATAat0x4d5e0(%rip), %xmm7
    0000006c: 	movsd	DATAat0x4d620(%rip), %xmm8
    00000075: 	pxor	%xmm10, %xmm10
    0000007a: 	movsd	DATAat0x4d628(%rip), %xmm6
    00000082: 	leaq	0x5(%rax,%rax), %r14
    00000087: 	movss	DATAat0x4d5d0(%rip), %xmm9
    00000090: 	leaq	DATAat0x4d004(%rip), %r15
    00000097: 	nopw	(%rax,%rax) # Size: 9
.Ltmp394:
    000000a0: 	movaps	%xmm4, %xmm12
    000000a4: 	movaps	%xmm4, %xmm0
    000000a7: 	movaps	%xmm4, %xmm2
    000000aa: 	divss	%xmm3, %xmm12
    000000af: 	subss	%xmm5, %xmm0
    000000b3: 	movaps	%xmm4, %xmm1
    000000b6: 	mulss	%xmm3, %xmm0
    000000ba: 	addss	%xmm12, %xmm0
    000000bf: 	addss	%xmm0, %xmm0
    000000c3: 	addss	%xmm0, %xmm2
    000000c7: 	addss	%xmm5, %xmm0
    000000cb: 	subss	%xmm0, %xmm2
    000000cf: 	movaps	%xmm2, %xmm0
    000000d2: 	addss	%xmm10, %xmm0
    000000d7: 	addss	%xmm0, %xmm2
    000000db: 	cmpl	$0x1, %r12d
    000000df: 	jle	.Ltmp387 # Offset: 223
    000000e5: 	cmpl	$0x3, %r12d
    000000e9: 	jle	.Ltmp388 # Offset: 233
    000000ef: 	movl	$0x3, %ecx
    000000f4: 	jmp	.Ltmp389 # Offset: 244
    000000f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp390:
    00000100: 	movaps	%xmm1, %xmm12
    00000104: 	divss	%xmm3, %xmm12
.Ltmp389:
    00000109: 	movss	-0x8(%rbx,%rcx,4), %xmm11
    00000110: 	movaps	%xmm1, %xmm0
    00000113: 	movslq	%ecx, %rax
    00000116: 	subss	%xmm11, %xmm0
    0000011b: 	mulss	%xmm3, %xmm0
    0000011f: 	addss	%xmm12, %xmm0
    00000124: 	movaps	%xmm11, %xmm12
    00000128: 	addss	%xmm0, %xmm0
    0000012c: 	divss	%xmm3, %xmm12
    00000131: 	addss	%xmm0, %xmm1
    00000135: 	addss	%xmm11, %xmm0
    0000013a: 	subss	%xmm0, %xmm1
    0000013e: 	movaps	%xmm11, %xmm0
    00000142: 	addss	%xmm1, %xmm2
    00000146: 	addss	%xmm1, %xmm2
    0000014a: 	movss	-0x4(%rbx,%rcx,4), %xmm1
    00000150: 	addq	$0x2, %rcx
    00000154: 	subss	%xmm1, %xmm0
    00000158: 	mulss	%xmm3, %xmm0
    0000015c: 	addss	%xmm12, %xmm0
    00000161: 	addss	%xmm0, %xmm0
    00000165: 	addss	%xmm0, %xmm11
    0000016a: 	addss	%xmm1, %xmm0
    0000016e: 	subss	%xmm0, %xmm11
    00000173: 	addss	%xmm11, %xmm2
    00000178: 	addss	%xmm11, %xmm2
    0000017d: 	cmpq	%rcx, %r14
    00000180: 	jne	.Ltmp390 # Offset: 384
    00000186: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp391:
    00000190: 	movss	-0x4(%rbx,%rax,4), %xmm1
    00000196: 	movss	(%rbx,%rax,4), %xmm11
    0000019c: 	addq	$0x1, %rax
    000001a0: 	movaps	%xmm1, %xmm12
    000001a4: 	movaps	%xmm1, %xmm0
    000001a7: 	divss	%xmm3, %xmm12
    000001ac: 	subss	%xmm11, %xmm0
    000001b1: 	mulss	%xmm3, %xmm0
    000001b5: 	addss	%xmm12, %xmm0
    000001ba: 	addss	%xmm0, %xmm0
    000001be: 	addss	%xmm0, %xmm1
    000001c2: 	addss	%xmm11, %xmm0
    000001c7: 	subss	%xmm0, %xmm1
    000001cb: 	addss	%xmm1, %xmm2
    000001cf: 	addss	%xmm1, %xmm2
    000001d3: 	cmpl	%eax, %r12d
    000001d6: 	jg	.Ltmp391 # Offset: 470
.Ltmp387:
    000001d8: 	movaps	%xmm2, %xmm0
    000001db: 	andps	%xmm9, %xmm0
    000001df: 	cvtss2sd	%xmm0, %xmm0
    000001e3: 	comisd	%xmm8, %xmm0
    000001e8: 	jbe	.Ltmp392 # Offset: 488
    000001ea: 	divss	%xmm2, %xmm2
.Ltmp392:
    000001ee: 	cvtss2sd	%xmm2, %xmm2
    000001f2: 	andpd	%xmm7, %xmm2
    000001f6: 	comisd	%xmm2, %xmm6
    000001fa: 	jbe	.Ltmp393 # Offset: 506
    00000200: 	addl	$0x1, %r13d
    00000204: 	cmpl	%edx, %r13d
    00000207: 	jl	.Ltmp394 # Offset: 519
.Ltmp386:
    0000020d: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000214: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000021b: 	subq	$0x20, %rax
    0000021f: 	cmpq	%rax, %rbx
    00000222: 	je	.Ltmp395 # Offset: 546
    00000228: 	leaq	0x10(%rbx), %rdi
    0000022c: 	movq	0x8(%rbp), %r12
    00000230: 	movq	%rdi, (%rbx)
    00000233: 	movq	(%rbp), %r13
    00000237: 	movq	%r13, %rax
    0000023a: 	addq	%r12, %rax
    0000023d: 	je	.Ltmp396 # Offset: 573
    0000023f: 	testq	%r13, %r13
    00000242: 	je	.Ltmp397 # Offset: 578
.Ltmp396:
    00000248: 	movq	%r12, 0x10(%rsp)
    0000024d: 	cmpq	$0xf, %r12
    00000251: 	ja	.Ltmp398 # Offset: 593
    00000257: 	cmpq	$0x1, %r12
    0000025b: 	jne	.Ltmp399 # Offset: 603
    00000261: 	movzbl	(%r13), %eax
    00000266: 	movb	%al, 0x10(%rbx)
.Ltmp402:
    00000269: 	movq	%r12, 0x8(%rbx)
    0000026d: 	movb	$0x0, (%rdi,%r12)
    00000272: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000279: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000280: 	addq	$0x20, %rax
    00000284: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000028b: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000292: 	je	.Ltmp400 # Offset: 658
.Ltmp403:
    00000298: 	movq	-0x20(%rax), %rbp
    0000029c: 	callq	clock@PLT # Offset: 668
    000002a1: 	movq	%rax, end_time(%rip)
    000002a8: 	movq	0x18(%rsp), %rdx
    000002ad: 	subq	%fs:0x28, %rdx
    000002b6: 	jne	.Ltmp401 # Offset: 694
    000002bc: 	subq	start_time(%rip), %rax
    000002c3: 	pxor	%xmm0, %xmm0
    000002c7: 	movq	%rbp, %rdi
    000002ca: 	cvtsi2sd	%rax, %xmm0
    000002cf: 	divsd	DATAat0x4d640(%rip), %xmm0
    000002d7: 	addq	$0x28, %rsp
    000002db: 	popq	%rbx
    000002dc: 	popq	%rbp
    000002dd: 	popq	%r12
    000002df: 	popq	%r13
    000002e1: 	popq	%r14
    000002e3: 	popq	%r15
    000002e5: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 741
    000002ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp393:
    000002f0: 	movq	(%rbp), %rdx
    000002f4: 	movq	%r15, %rsi
    000002f7: 	movl	$0x1, %edi
    000002fc: 	xorl	%eax, %eax
    000002fe: 	movss	%xmm3, 0xc(%rsp)
    00000304: 	addl	$0x1, %r13d
    00000308: 	callq	__printf_chk@PLT # Offset: 776
    0000030d: 	movl	iterations(%rip), %edx
    00000313: 	cmpl	%r13d, %edx
    00000316: 	jle	.Ltmp386 # Offset: 790
    0000031c: 	movq	DATAat0x4d620(%rip), %rax
    00000323: 	movss	0x4(%rbx), %xmm5
    00000328: 	pxor	%xmm10, %xmm10
    0000032d: 	movss	DATAat0x4d5d0(%rip), %xmm9
    00000336: 	movss	(%rbx), %xmm4
    0000033a: 	movss	0xc(%rsp), %xmm3
    00000340: 	movq	%rax, %xmm8
    00000345: 	movq	DATAat0x4d628(%rip), %rax
    0000034c: 	movq	DATAat0x4d5e0(%rip), %xmm7
    00000354: 	movq	%rax, %xmm6
    00000359: 	jmp	.Ltmp394 # Offset: 857
.Ltmp388:
    0000035e: 	movl	$0x1, %eax
    00000363: 	jmp	.Ltmp391 # Offset: 867
.Ltmp398:
    00000368: 	movq	%rbx, %rdi
    0000036b: 	leaq	0x10(%rsp), %rsi
    00000370: 	xorl	%edx, %edx
    00000372: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 882
    00000377: 	movq	%rax, (%rbx)
    0000037a: 	movq	%rax, %rdi
    0000037d: 	movq	0x10(%rsp), %rax
    00000382: 	movq	%rax, 0x10(%rbx)
.Ltmp404:
    00000386: 	movq	%r12, %rdx
    00000389: 	movq	%r13, %rsi
    0000038c: 	callq	memcpy@PLT # Offset: 908
    00000391: 	movq	0x10(%rsp), %r12
    00000396: 	movq	(%rbx), %rdi
    00000399: 	jmp	.Ltmp402 # Offset: 921
.Ltmp395:
    0000039e: 	movq	%rbp, %rsi
    000003a1: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000003a8: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 936
    000003ad: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000003b4: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000003bb: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003c2: 	jne	.Ltmp403 # Offset: 962
.Ltmp400:
    000003c8: 	movq	-0x8(%rdx), %rax
    000003cc: 	addq	$0x200, %rax
    000003d2: 	jmp	.Ltmp403 # Offset: 978
.Ltmp399:
    000003d7: 	testq	%r12, %r12
    000003da: 	je	.Ltmp402 # Offset: 986
    000003e0: 	jmp	.Ltmp404 # Offset: 992
.Ltmp401:
    000003e2: 	callq	__stack_chk_fail@PLT # Offset: 994
.Ltmp397:
    000003e7: 	leaq	DATAat0x4d018(%rip), %rdi
    000003ee: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1006
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_CSE2_halfoptIf14custom_cse_mixIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSE2If14custom_cse_divIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 62
  State       : disassembled
  Address     : 0x6e00
  Size        : 0x345
  MaxSize     : 0x350
  Offset      : 0x6e00
  Section     : .text
  Orc Section : .local.text._Z9test_CSE2If14custom_cse_divIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB061:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rdx, %rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movss	%xmm0, 0xc(%rsp)
    00000021: 	movq	%fs:0x28, %rax
    0000002a: 	movq	%rax, 0x18(%rsp)
    0000002f: 	xorl	%eax, %eax
    00000031: 	callq	clock@PLT # Offset: 49
    00000036: 	movl	iterations(%rip), %edx
    0000003c: 	movss	0xc(%rsp), %xmm4
    00000042: 	movq	%rax, start_time(%rip)
    00000049: 	testl	%edx, %edx
    0000004b: 	jle	.Ltmp405 # Offset: 75
    00000051: 	leal	-0x2(%r14), %eax
    00000055: 	movss	(%r13), %xmm5
    0000005b: 	movss	0x4(%r13), %xmm6
    00000061: 	xorl	%r12d, %r12d
    00000064: 	movsd	DATAat0x4d620(%rip), %xmm9
    0000006d: 	leaq	0x8(%r13,%rax,4), %rbx
    00000072: 	movq	DATAat0x4d5e0(%rip), %xmm8
    0000007b: 	pxor	%xmm11, %xmm11
    00000080: 	movsd	DATAat0x4d628(%rip), %xmm7
    00000088: 	leaq	DATAat0x4d004(%rip), %r15
    0000008f: 	movss	DATAat0x4d5d0(%rip), %xmm10
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp410:
    000000a0: 	movaps	%xmm5, %xmm0
    000000a3: 	movaps	%xmm5, %xmm1
    000000a6: 	movaps	%xmm6, %xmm2
    000000a9: 	divss	%xmm6, %xmm0
    000000ad: 	movaps	%xmm5, %xmm3
    000000b0: 	addss	%xmm4, %xmm0
    000000b4: 	addss	%xmm0, %xmm1
    000000b8: 	addss	%xmm0, %xmm2
    000000bc: 	addss	%xmm0, %xmm1
    000000c0: 	addss	%xmm2, %xmm0
    000000c4: 	movaps	%xmm1, %xmm12
    000000c8: 	addss	%xmm11, %xmm12
    000000cd: 	movaps	%xmm12, %xmm2
    000000d1: 	subss	%xmm0, %xmm2
    000000d5: 	addss	%xmm2, %xmm1
    000000d9: 	subss	%xmm0, %xmm1
    000000dd: 	cmpl	$0x1, %r14d
    000000e1: 	jle	.Ltmp406 # Offset: 225
    000000e3: 	leaq	0x4(%r13), %rax
    000000e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp407:
    000000f0: 	movaps	%xmm3, %xmm0
    000000f3: 	movss	(%rax), %xmm3
    000000f7: 	addq	$0x4, %rax
    000000fb: 	movaps	%xmm0, %xmm2
    000000fe: 	divss	%xmm3, %xmm2
    00000102: 	movaps	%xmm3, %xmm12
    00000106: 	addss	%xmm4, %xmm2
    0000010a: 	addss	%xmm2, %xmm0
    0000010e: 	addss	%xmm2, %xmm12
    00000113: 	addss	%xmm2, %xmm0
    00000117: 	addss	%xmm12, %xmm2
    0000011c: 	addss	%xmm0, %xmm1
    00000120: 	subss	%xmm2, %xmm1
    00000124: 	addss	%xmm0, %xmm1
    00000128: 	subss	%xmm2, %xmm1
    0000012c: 	cmpq	%rax, %rbx
    0000012f: 	jne	.Ltmp407 # Offset: 303
.Ltmp406:
    00000131: 	movaps	%xmm1, %xmm0
    00000134: 	andps	%xmm10, %xmm0
    00000138: 	cvtss2sd	%xmm0, %xmm0
    0000013c: 	comisd	%xmm9, %xmm0
    00000141: 	jbe	.Ltmp408 # Offset: 321
    00000143: 	divss	%xmm1, %xmm1
.Ltmp408:
    00000147: 	cvtss2sd	%xmm1, %xmm1
    0000014b: 	andpd	%xmm8, %xmm1
    00000150: 	comisd	%xmm1, %xmm7
    00000154: 	jbe	.Ltmp409 # Offset: 340
    0000015a: 	addl	$0x1, %r12d
    0000015e: 	cmpl	%edx, %r12d
    00000161: 	jl	.Ltmp410 # Offset: 353
.Ltmp405:
    00000167: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000016e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000175: 	subq	$0x20, %rax
    00000179: 	cmpq	%rax, %rbx
    0000017c: 	je	.Ltmp411 # Offset: 380
    00000182: 	leaq	0x10(%rbx), %rdi
    00000186: 	movq	0x8(%rbp), %r12
    0000018a: 	movq	%rdi, (%rbx)
    0000018d: 	movq	(%rbp), %r13
    00000191: 	movq	%r13, %rax
    00000194: 	addq	%r12, %rax
    00000197: 	je	.Ltmp412 # Offset: 407
    00000199: 	testq	%r13, %r13
    0000019c: 	je	.Ltmp413 # Offset: 412
.Ltmp412:
    000001a2: 	movq	%r12, 0x10(%rsp)
    000001a7: 	cmpq	$0xf, %r12
    000001ab: 	ja	.Ltmp414 # Offset: 427
    000001b1: 	cmpq	$0x1, %r12
    000001b5: 	jne	.Ltmp415 # Offset: 437
    000001bb: 	movzbl	(%r13), %eax
    000001c0: 	movb	%al, 0x10(%rbx)
.Ltmp418:
    000001c3: 	movq	%r12, 0x8(%rbx)
    000001c7: 	movb	$0x0, (%rdi,%r12)
    000001cc: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001d3: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001da: 	addq	$0x20, %rax
    000001de: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001e5: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000001ec: 	je	.Ltmp416 # Offset: 492
.Ltmp419:
    000001f2: 	movq	-0x20(%rax), %rbp
    000001f6: 	callq	clock@PLT # Offset: 502
    000001fb: 	movq	%rax, end_time(%rip)
    00000202: 	movq	0x18(%rsp), %rdx
    00000207: 	subq	%fs:0x28, %rdx
    00000210: 	jne	.Ltmp417 # Offset: 528
    00000216: 	subq	start_time(%rip), %rax
    0000021d: 	pxor	%xmm0, %xmm0
    00000221: 	movq	%rbp, %rdi
    00000224: 	cvtsi2sd	%rax, %xmm0
    00000229: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000231: 	addq	$0x28, %rsp
    00000235: 	popq	%rbx
    00000236: 	popq	%rbp
    00000237: 	popq	%r12
    00000239: 	popq	%r13
    0000023b: 	popq	%r14
    0000023d: 	popq	%r15
    0000023f: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 575
    00000244: 	nopl	(%rax) # Size: 4
.Ltmp409:
    00000248: 	movq	(%rbp), %rdx
    0000024c: 	movq	%r15, %rsi
    0000024f: 	movl	$0x1, %edi
    00000254: 	xorl	%eax, %eax
    00000256: 	movss	%xmm4, 0xc(%rsp)
    0000025c: 	addl	$0x1, %r12d
    00000260: 	callq	__printf_chk@PLT # Offset: 608
    00000265: 	movl	iterations(%rip), %edx
    0000026b: 	cmpl	%edx, %r12d
    0000026e: 	jge	.Ltmp405 # Offset: 622
    00000274: 	movq	DATAat0x4d620(%rip), %rax
    0000027b: 	movss	(%r13), %xmm5
    00000281: 	pxor	%xmm11, %xmm11
    00000286: 	movss	DATAat0x4d5d0(%rip), %xmm10
    0000028f: 	movss	0x4(%r13), %xmm6
    00000295: 	movss	0xc(%rsp), %xmm4
    0000029b: 	movq	DATAat0x4d5e0(%rip), %xmm8
    000002a4: 	movq	%rax, %xmm9
    000002a9: 	movq	DATAat0x4d628(%rip), %rax
    000002b0: 	movq	%rax, %xmm7
    000002b5: 	jmp	.Ltmp410 # Offset: 693
.Ltmp414:
    000002ba: 	movq	%rbx, %rdi
    000002bd: 	leaq	0x10(%rsp), %rsi
    000002c2: 	xorl	%edx, %edx
    000002c4: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 708
    000002c9: 	movq	%rax, (%rbx)
    000002cc: 	movq	%rax, %rdi
    000002cf: 	movq	0x10(%rsp), %rax
    000002d4: 	movq	%rax, 0x10(%rbx)
.Ltmp420:
    000002d8: 	movq	%r12, %rdx
    000002db: 	movq	%r13, %rsi
    000002de: 	callq	memcpy@PLT # Offset: 734
    000002e3: 	movq	0x10(%rsp), %r12
    000002e8: 	movq	(%rbx), %rdi
    000002eb: 	jmp	.Ltmp418 # Offset: 747
.Ltmp411:
    000002f0: 	movq	%rbp, %rsi
    000002f3: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002fa: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 762
    000002ff: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000306: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000030d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000314: 	jne	.Ltmp419 # Offset: 788
.Ltmp416:
    0000031a: 	movq	-0x8(%rdx), %rax
    0000031e: 	addq	$0x200, %rax
    00000324: 	jmp	.Ltmp419 # Offset: 804
.Ltmp415:
    00000329: 	testq	%r12, %r12
    0000032c: 	je	.Ltmp418 # Offset: 812
    00000332: 	jmp	.Ltmp420 # Offset: 818
.Ltmp417:
    00000334: 	callq	__stack_chk_fail@PLT # Offset: 820
.Ltmp413:
    00000339: 	leaq	DATAat0x4d018(%rip), %rdi
    00000340: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 832
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE2If14custom_cse_divIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z17test_CSE4_halfoptIf14custom_cse_divIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 63
  State       : disassembled
  Address     : 0x7150
  Size        : 0x3db
  MaxSize     : 0x3e0
  Offset      : 0x7150
  Section     : .text
  Orc Section : .local.text._Z17test_CSE4_halfoptIf14custom_cse_divIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB062:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movl	%esi, %r12d
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdx, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movss	%xmm0, 0xc(%rsp)
    00000021: 	movq	%fs:0x28, %rax
    0000002a: 	movq	%rax, 0x18(%rsp)
    0000002f: 	xorl	%eax, %eax
    00000031: 	callq	clock@PLT # Offset: 49
    00000036: 	movl	iterations(%rip), %edx
    0000003c: 	movss	0xc(%rsp), %xmm3
    00000042: 	movq	%rax, start_time(%rip)
    00000049: 	testl	%edx, %edx
    0000004b: 	jle	.Ltmp421 # Offset: 75
    00000051: 	leal	-0x4(%r12), %eax
    00000056: 	movss	(%rbx), %xmm4
    0000005a: 	movss	0x4(%rbx), %xmm5
    0000005f: 	xorl	%r13d, %r13d
    00000062: 	shrl	%eax
    00000064: 	movq	DATAat0x4d5e0(%rip), %xmm7
    0000006c: 	movsd	DATAat0x4d620(%rip), %xmm8
    00000075: 	pxor	%xmm10, %xmm10
    0000007a: 	movsd	DATAat0x4d628(%rip), %xmm6
    00000082: 	leaq	0x5(%rax,%rax), %r14
    00000087: 	movss	DATAat0x4d5d0(%rip), %xmm9
    00000090: 	leaq	DATAat0x4d004(%rip), %r15
    00000097: 	nopw	(%rax,%rax) # Size: 9
.Ltmp428:
    000000a0: 	movaps	%xmm4, %xmm1
    000000a3: 	movaps	%xmm4, %xmm0
    000000a6: 	movaps	%xmm4, %xmm2
    000000a9: 	divss	%xmm5, %xmm1
    000000ad: 	addss	%xmm3, %xmm1
    000000b1: 	addss	%xmm1, %xmm1
    000000b5: 	addss	%xmm1, %xmm0
    000000b9: 	addss	%xmm5, %xmm1
    000000bd: 	subss	%xmm1, %xmm0
    000000c1: 	movaps	%xmm0, %xmm1
    000000c4: 	addss	%xmm10, %xmm1
    000000c9: 	addss	%xmm0, %xmm1
    000000cd: 	addss	%xmm0, %xmm1
    000000d1: 	addss	%xmm1, %xmm0
    000000d5: 	cmpl	$0x1, %r12d
    000000d9: 	jle	.Ltmp422 # Offset: 217
    000000df: 	cmpl	$0x3, %r12d
    000000e3: 	jle	.Ltmp423 # Offset: 227
    000000e9: 	movl	$0x3, %ecx
.Ltmp424:
    000000ee: 	movss	-0x8(%rbx,%rcx,4), %xmm11
    000000f5: 	movaps	%xmm2, %xmm12
    000000f9: 	movslq	%ecx, %rax
    000000fc: 	divss	%xmm11, %xmm12
    00000101: 	addss	%xmm3, %xmm12
    00000106: 	addss	%xmm12, %xmm12
    0000010b: 	addss	%xmm12, %xmm2
    00000110: 	addss	%xmm11, %xmm12
    00000115: 	movaps	%xmm2, %xmm1
    00000118: 	movss	-0x4(%rbx,%rcx,4), %xmm2
    0000011e: 	addq	$0x2, %rcx
    00000122: 	subss	%xmm12, %xmm1
    00000127: 	movaps	%xmm11, %xmm12
    0000012b: 	divss	%xmm2, %xmm12
    00000130: 	addss	%xmm1, %xmm0
    00000134: 	addss	%xmm1, %xmm0
    00000138: 	addss	%xmm1, %xmm0
    0000013c: 	addss	%xmm1, %xmm0
    00000140: 	movaps	%xmm11, %xmm1
    00000144: 	addss	%xmm3, %xmm12
    00000149: 	addss	%xmm12, %xmm12
    0000014e: 	addss	%xmm12, %xmm1
    00000153: 	addss	%xmm2, %xmm12
    00000158: 	subss	%xmm12, %xmm1
    0000015d: 	addss	%xmm1, %xmm0
    00000161: 	addss	%xmm1, %xmm0
    00000165: 	addss	%xmm1, %xmm0
    00000169: 	addss	%xmm1, %xmm0
    0000016d: 	cmpq	%rcx, %r14
    00000170: 	jne	.Ltmp424 # Offset: 368
    00000176: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp425:
    00000180: 	movss	-0x4(%rbx,%rax,4), %xmm1
    00000186: 	movss	(%rbx,%rax,4), %xmm11
    0000018c: 	addq	$0x1, %rax
    00000190: 	movaps	%xmm1, %xmm2
    00000193: 	divss	%xmm11, %xmm2
    00000198: 	addss	%xmm3, %xmm2
    0000019c: 	addss	%xmm2, %xmm2
    000001a0: 	addss	%xmm2, %xmm1
    000001a4: 	addss	%xmm11, %xmm2
    000001a9: 	subss	%xmm2, %xmm1
    000001ad: 	addss	%xmm1, %xmm0
    000001b1: 	addss	%xmm1, %xmm0
    000001b5: 	addss	%xmm1, %xmm0
    000001b9: 	addss	%xmm1, %xmm0
    000001bd: 	cmpl	%eax, %r12d
    000001c0: 	jg	.Ltmp425 # Offset: 448
.Ltmp422:
    000001c2: 	movaps	%xmm0, %xmm1
    000001c5: 	andps	%xmm9, %xmm1
    000001c9: 	cvtss2sd	%xmm1, %xmm1
    000001cd: 	comisd	%xmm8, %xmm1
    000001d2: 	jbe	.Ltmp426 # Offset: 466
    000001d4: 	divss	%xmm0, %xmm0
.Ltmp426:
    000001d8: 	cvtss2sd	%xmm0, %xmm0
    000001dc: 	andpd	%xmm7, %xmm0
    000001e0: 	comisd	%xmm0, %xmm6
    000001e4: 	jbe	.Ltmp427 # Offset: 484
    000001ea: 	addl	$0x1, %r13d
    000001ee: 	cmpl	%edx, %r13d
    000001f1: 	jl	.Ltmp428 # Offset: 497
.Ltmp421:
    000001f7: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001fe: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000205: 	subq	$0x20, %rax
    00000209: 	cmpq	%rax, %rbx
    0000020c: 	je	.Ltmp429 # Offset: 524
    00000212: 	leaq	0x10(%rbx), %rdi
    00000216: 	movq	0x8(%rbp), %r12
    0000021a: 	movq	%rdi, (%rbx)
    0000021d: 	movq	(%rbp), %r13
    00000221: 	movq	%r13, %rax
    00000224: 	addq	%r12, %rax
    00000227: 	je	.Ltmp430 # Offset: 551
    00000229: 	testq	%r13, %r13
    0000022c: 	je	.Ltmp431 # Offset: 556
.Ltmp430:
    00000232: 	movq	%r12, 0x10(%rsp)
    00000237: 	cmpq	$0xf, %r12
    0000023b: 	ja	.Ltmp432 # Offset: 571
    00000241: 	cmpq	$0x1, %r12
    00000245: 	jne	.Ltmp433 # Offset: 581
    0000024b: 	movzbl	(%r13), %eax
    00000250: 	movb	%al, 0x10(%rbx)
.Ltmp436:
    00000253: 	movq	%r12, 0x8(%rbx)
    00000257: 	movb	$0x0, (%rdi,%r12)
    0000025c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000263: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000026a: 	addq	$0x20, %rax
    0000026e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000275: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000027c: 	je	.Ltmp434 # Offset: 636
.Ltmp437:
    00000282: 	movq	-0x20(%rax), %rbp
    00000286: 	callq	clock@PLT # Offset: 646
    0000028b: 	movq	%rax, end_time(%rip)
    00000292: 	movq	0x18(%rsp), %rdx
    00000297: 	subq	%fs:0x28, %rdx
    000002a0: 	jne	.Ltmp435 # Offset: 672
    000002a6: 	subq	start_time(%rip), %rax
    000002ad: 	pxor	%xmm0, %xmm0
    000002b1: 	movq	%rbp, %rdi
    000002b4: 	cvtsi2sd	%rax, %xmm0
    000002b9: 	divsd	DATAat0x4d640(%rip), %xmm0
    000002c1: 	addq	$0x28, %rsp
    000002c5: 	popq	%rbx
    000002c6: 	popq	%rbp
    000002c7: 	popq	%r12
    000002c9: 	popq	%r13
    000002cb: 	popq	%r14
    000002cd: 	popq	%r15
    000002cf: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 719
    000002d4: 	nopl	(%rax) # Size: 4
.Ltmp427:
    000002d8: 	movq	(%rbp), %rdx
    000002dc: 	movq	%r15, %rsi
    000002df: 	movl	$0x1, %edi
    000002e4: 	xorl	%eax, %eax
    000002e6: 	movss	%xmm3, 0xc(%rsp)
    000002ec: 	addl	$0x1, %r13d
    000002f0: 	callq	__printf_chk@PLT # Offset: 752
    000002f5: 	movl	iterations(%rip), %edx
    000002fb: 	cmpl	%r13d, %edx
    000002fe: 	jle	.Ltmp421 # Offset: 766
    00000304: 	movq	DATAat0x4d620(%rip), %rax
    0000030b: 	movss	0x4(%rbx), %xmm5
    00000310: 	pxor	%xmm10, %xmm10
    00000315: 	movss	DATAat0x4d5d0(%rip), %xmm9
    0000031e: 	movss	(%rbx), %xmm4
    00000322: 	movss	0xc(%rsp), %xmm3
    00000328: 	movq	%rax, %xmm8
    0000032d: 	movq	DATAat0x4d628(%rip), %rax
    00000334: 	movq	DATAat0x4d5e0(%rip), %xmm7
    0000033c: 	movq	%rax, %xmm6
    00000341: 	jmp	.Ltmp428 # Offset: 833
.Ltmp423:
    00000346: 	movl	$0x1, %eax
    0000034b: 	jmp	.Ltmp425 # Offset: 843
.Ltmp432:
    00000350: 	movq	%rbx, %rdi
    00000353: 	leaq	0x10(%rsp), %rsi
    00000358: 	xorl	%edx, %edx
    0000035a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 858
    0000035f: 	movq	%rax, (%rbx)
    00000362: 	movq	%rax, %rdi
    00000365: 	movq	0x10(%rsp), %rax
    0000036a: 	movq	%rax, 0x10(%rbx)
.Ltmp438:
    0000036e: 	movq	%r12, %rdx
    00000371: 	movq	%r13, %rsi
    00000374: 	callq	memcpy@PLT # Offset: 884
    00000379: 	movq	0x10(%rsp), %r12
    0000037e: 	movq	(%rbx), %rdi
    00000381: 	jmp	.Ltmp436 # Offset: 897
.Ltmp429:
    00000386: 	movq	%rbp, %rsi
    00000389: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000390: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 912
    00000395: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000039c: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000003a3: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003aa: 	jne	.Ltmp437 # Offset: 938
.Ltmp434:
    000003b0: 	movq	-0x8(%rdx), %rax
    000003b4: 	addq	$0x200, %rax
    000003ba: 	jmp	.Ltmp437 # Offset: 954
.Ltmp433:
    000003bf: 	testq	%r12, %r12
    000003c2: 	je	.Ltmp436 # Offset: 962
    000003c8: 	jmp	.Ltmp438 # Offset: 968
.Ltmp435:
    000003ca: 	callq	__stack_chk_fail@PLT # Offset: 970
.Ltmp431:
    000003cf: 	leaq	DATAat0x4d018(%rip), %rdi
    000003d6: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 982
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_CSE4_halfoptIf14custom_cse_divIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z28test_CSE4_add_inline_flippedIa14custom_cse_addIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z28test_CSE4_add_inline_flippedIa14custom_cse_addIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z28test_CSE4_add_inline_flippedIa14custom_cse_addIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/simple_types_cse.cpp/1
  Number      : 64
  State       : disassembled
  Address     : 0x7530
  Size        : 0x58a
  MaxSize     : 0x590
  Offset      : 0x7530
  Section     : .text
  Orc Section : .local.text._Z28test_CSE4_add_inline_flippedIa14custom_cse_addIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB063:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	movl	%esi, %ebx
    0000000c: 	subq	$0x68, %rsp
    00000010: 	movq	%rdi, 0x28(%rsp)
    00000015: 	movq	%rdx, 0x40(%rsp)
    0000001a: 	movq	%fs:0x28, %rax
    00000023: 	movq	%rax, 0x58(%rsp)
    00000028: 	xorl	%eax, %eax
    0000002a: 	callq	clock@PLT # Offset: 42
    0000002f: 	movq	%rax, start_time(%rip)
    00000036: 	movl	iterations(%rip), %eax
    0000003c: 	movl	%eax, 0x34(%rsp)
    00000040: 	testl	%eax, %eax
    00000042: 	jle	.Ltmp439 # Offset: 66
    00000048: 	movq	0x28(%rsp), %rax
    0000004d: 	movd	%ebx, %xmm3
    00000051: 	movl	$0x0, 0x24(%rsp)
    00000059: 	pxor	%xmm6, %xmm6
    0000005d: 	punpcklbw	%xmm3, %xmm3
    00000061: 	movzbl	(%rax), %esi
    00000064: 	movzbl	0x1(%rax), %edi
    00000068: 	punpcklwd	%xmm3, %xmm3
    0000006c: 	movzbl	0x1f39(%rax), %ecx
    00000073: 	pshufd	$0x0, %xmm3, %xmm3
    00000078: 	movq	0x1f30(%rax), %xmm5
    00000080: 	movq	0x1f31(%rax), %xmm4
    00000088: 	movb	%sil, 0x32(%rsp)
    0000008d: 	leaq	0x1f30(%rax), %rsi
    00000094: 	movq	%rsi, 0x38(%rsp)
    00000099: 	movzbl	0x1f38(%rax), %esi
    000000a0: 	movb	%dil, 0x33(%rsp)
    000000a5: 	movzbl	%bl, %edi
    000000a8: 	movw	%di, 0x30(%rsp)
    000000ad: 	movzbl	0x1f3a(%rax), %edi
    000000b4: 	movb	%sil, 0x20(%rsp)
    000000b9: 	movzbl	0x1f3b(%rax), %esi
    000000c0: 	movb	%cl, 0xc(%rsp)
    000000c4: 	movzbl	0x1f3c(%rax), %ecx
    000000cb: 	movb	%dil, 0xa(%rsp)
    000000d0: 	movzbl	0x1f3d(%rax), %edi
    000000d7: 	movb	%sil, 0xd(%rsp)
    000000dc: 	movzbl	0x1f3e(%rax), %esi
    000000e3: 	movzbl	0x1f3f(%rax), %eax
    000000ea: 	movb	%cl, 0xe(%rsp)
    000000ee: 	movb	%dil, 0xf(%rsp)
    000000f3: 	movb	%sil, 0xb(%rsp)
    000000f8: 	movb	%al, 0x21(%rsp)
    000000fc: 	nopl	(%rax) # Size: 4
.Ltmp442:
    00000100: 	movzbl	0x32(%rsp), %edi
    00000105: 	movzbl	0x33(%rsp), %esi
    0000010a: 	pxor	%xmm2, %xmm2
    0000010e: 	movl	%edi, %eax
    00000110: 	addl	%esi, %eax
    00000112: 	addl	%ebx, %eax
    00000114: 	addl	%eax, %eax
    00000116: 	leal	(%rsi,%rax), %edx
    00000119: 	addl	%edi, %eax
    0000011b: 	subl	%esi, %edi
    0000011d: 	movl	%edi, %ecx
    0000011f: 	leal	(%rax,%rax,2), %eax
    00000122: 	addl	%ecx, %eax
    00000124: 	movq	0x38(%rsp), %rcx
    00000129: 	subl	%edx, %eax
    0000012b: 	subl	%edx, %eax
    0000012d: 	subl	%edx, %eax
    0000012f: 	movq	0x28(%rsp), %rdx
    00000134: 	nopl	(%rax) # Size: 4
.Ltmp440:
    00000138: 	movdqu	(%rdx), %xmm7
    0000013c: 	movdqu	0x1(%rdx), %xmm0
    00000141: 	addq	$0x10, %rdx
    00000145: 	movdqu	-0xf(%rdx), %xmm1
    0000014a: 	paddb	%xmm7, %xmm0
    0000014e: 	paddb	%xmm3, %xmm0
    00000152: 	paddb	%xmm0, %xmm0
    00000156: 	paddb	%xmm0, %xmm1
    0000015a: 	paddb	%xmm7, %xmm0
    0000015e: 	paddb	%xmm0, %xmm0
    00000162: 	movdqa	%xmm1, %xmm7
    00000166: 	psubb	%xmm1, %xmm2
    0000016a: 	paddb	%xmm0, %xmm0
    0000016e: 	paddb	%xmm1, %xmm7
    00000172: 	psubb	%xmm1, %xmm0
    00000176: 	psubb	%xmm7, %xmm0
    0000017a: 	paddb	%xmm0, %xmm2
    0000017e: 	cmpq	%rdx, %rcx
    00000181: 	jne	.Ltmp440 # Offset: 385
    00000183: 	movdqa	%xmm2, %xmm0
    00000187: 	movzwl	0x30(%rsp), %edi
    0000018c: 	movzbl	0xa(%rsp), %ecx
    00000191: 	psrldq	$0x8, %xmm0
    00000196: 	movzbl	0xf(%rsp), %r11d
    0000019c: 	movzbl	0x21(%rsp), %r9d
    000001a2: 	paddb	%xmm0, %xmm2
    000001a6: 	movdqa	%xmm4, %xmm0
    000001aa: 	psadbw	%xmm6, %xmm2
    000001ae: 	paddb	%xmm5, %xmm0
    000001b2: 	movl	%r11d, %r10d
    000001b5: 	movd	%xmm2, %edx
    000001b9: 	addl	%edx, %eax
    000001bb: 	movzbl	0xe(%rsp), %edx
    000001c0: 	movb	%al, 0x22(%rsp)
    000001c4: 	movl	%edi, %eax
    000001c6: 	shll	$0x8, %eax
    000001c9: 	orl	%edi, %eax
    000001cb: 	movd	%eax, %xmm2
    000001cf: 	pshuflw	$0x0, %xmm2, %xmm1
    000001d4: 	paddb	%xmm1, %xmm0
    000001d8: 	paddb	%xmm0, %xmm0
    000001dc: 	movdqa	%xmm0, %xmm1
    000001e0: 	paddb	%xmm4, %xmm0
    000001e4: 	paddb	%xmm5, %xmm1
    000001e8: 	paddb	%xmm0, %xmm0
    000001ec: 	paddb	%xmm1, %xmm1
    000001f0: 	paddb	%xmm1, %xmm1
    000001f4: 	psubb	%xmm0, %xmm1
    000001f8: 	psubb	%xmm0, %xmm1
    000001fc: 	pxor	%xmm0, %xmm0
    00000200: 	movdqa	%xmm1, %xmm2
    00000204: 	psadbw	%xmm0, %xmm2
    00000208: 	movq	%xmm2, %rax
    0000020d: 	movq	%xmm2, 0x48(%rsp)
    00000213: 	movb	%al, 0x23(%rsp)
    00000217: 	movzbl	0x20(%rsp), %eax
    0000021c: 	leal	(%rax,%rbx), %r8d
    00000220: 	movzbl	0xc(%rsp), %eax
    00000225: 	addl	%eax, %r8d
    00000228: 	movl	%eax, %edi
    0000022a: 	addl	%r8d, %r8d
    0000022d: 	addl	%ecx, %edi
    0000022f: 	leal	(%rax,%r8), %r15d
    00000233: 	movzbl	0xd(%rsp), %eax
    00000238: 	addl	%ebx, %edi
    0000023a: 	addb	0x20(%rsp), %r8b
    0000023f: 	addl	%edi, %edi
    00000241: 	shll	$0x2, %r8d
    00000245: 	movl	%eax, %esi
    00000247: 	leal	(%rdi,%rcx), %r14d
    0000024b: 	subl	%r15d, %r8d
    0000024e: 	addl	%ecx, %esi
    00000250: 	movl	%eax, %ecx
    00000252: 	subl	%r15d, %r8d
    00000255: 	addl	%edx, %ecx
    00000257: 	addl	%ebx, %esi
    00000259: 	subl	%r15d, %r8d
    0000025c: 	addl	%ebx, %ecx
    0000025e: 	addl	%esi, %esi
    00000260: 	subl	%r15d, %r8d
    00000263: 	addl	%ecx, %ecx
    00000265: 	leal	(%rsi,%rax), %r13d
    00000269: 	leal	(%rdx,%rcx), %r12d
    0000026d: 	addl	%r11d, %edx
    00000270: 	addl	%ebx, %edx
    00000272: 	addl	%edx, %edx
    00000274: 	leal	(%r11,%rdx), %ebp
    00000278: 	movzbl	0xb(%rsp), %r11d
    0000027e: 	addl	%r11d, %r10d
    00000281: 	movl	%r10d, %eax
    00000284: 	movl	%r11d, %r10d
    00000287: 	addl	%ebx, %eax
    00000289: 	addl	%r10d, %r9d
    0000028c: 	addl	%eax, %eax
    0000028e: 	leal	(%r10,%rax), %r11d
    00000292: 	movl	%r9d, %r10d
    00000295: 	movzbl	0x23(%rsp), %r9d
    0000029b: 	addb	0x22(%rsp), %r9b
    000002a0: 	addl	%ebx, %r10d
    000002a3: 	addl	%r8d, %r9d
    000002a6: 	addl	%r10d, %r10d
    000002a9: 	movb	%r10b, 0x10(%rsp)
    000002ae: 	addb	0x21(%rsp), %r10b
    000002b3: 	addb	0xc(%rsp), %dil
    000002b8: 	addb	0xa(%rsp), %sil
    000002bd: 	shll	$0x2, %edi
    000002c0: 	shll	$0x2, %esi
    000002c3: 	addb	0xd(%rsp), %cl
    000002c7: 	addb	0xe(%rsp), %dl
    000002cb: 	subl	%r14d, %edi
    000002ce: 	subl	%r13d, %esi
    000002d1: 	shll	$0x2, %ecx
    000002d4: 	addb	0xf(%rsp), %al
    000002d8: 	subl	%r14d, %edi
    000002db: 	subl	%r13d, %esi
    000002de: 	subl	%r12d, %ecx
    000002e1: 	shll	$0x2, %edx
    000002e4: 	subl	%r14d, %edi
    000002e7: 	subl	%r13d, %esi
    000002ea: 	subl	%r12d, %ecx
    000002ed: 	subl	%ebp, %edx
    000002ef: 	subl	%r14d, %edi
    000002f2: 	subl	%r13d, %esi
    000002f5: 	subl	%r12d, %ecx
    000002f8: 	subl	%ebp, %edx
    000002fa: 	addl	%r9d, %edi
    000002fd: 	shll	$0x2, %eax
    00000300: 	subl	%r12d, %ecx
    00000303: 	subl	%ebp, %edx
    00000305: 	addl	%edi, %esi
    00000307: 	subl	%r11d, %eax
    0000030a: 	subl	%ebp, %edx
    0000030c: 	addl	%esi, %ecx
    0000030e: 	subl	%r11d, %eax
    00000311: 	addl	%ecx, %edx
    00000313: 	subl	%r11d, %eax
    00000316: 	subl	%r11d, %eax
    00000319: 	addl	%edx, %eax
    0000031b: 	movzbl	0x10(%rsp), %edx
    00000320: 	addb	0xb(%rsp), %dl
    00000324: 	shll	$0x2, %edx
    00000327: 	subl	%r10d, %edx
    0000032a: 	subl	%r10d, %edx
    0000032d: 	subl	%r10d, %edx
    00000330: 	subl	%r10d, %edx
    00000333: 	addb	%al, %dl
    00000335: 	jne	.Ltmp441 # Offset: 821
    0000033b: 	addl	$0x1, 0x24(%rsp)
    00000340: 	movl	0x24(%rsp), %eax
    00000344: 	cmpl	0x34(%rsp), %eax
    00000348: 	jl	.Ltmp442 # Offset: 840
.Ltmp439:
    0000034e: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000355: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000035c: 	subq	$0x20, %rax
    00000360: 	cmpq	%rax, %rbx
    00000363: 	je	.Ltmp443 # Offset: 867
    00000369: 	movq	0x40(%rsp), %rax
    0000036e: 	leaq	0x10(%rbx), %rdi
    00000372: 	movq	%rdi, (%rbx)
    00000375: 	movq	(%rax), %rbp
    00000378: 	movq	0x8(%rax), %r12
    0000037c: 	movq	%rbp, %rax
    0000037f: 	addq	%r12, %rax
    00000382: 	je	.Ltmp444 # Offset: 898
    00000384: 	testq	%rbp, %rbp
    00000387: 	je	.Ltmp445 # Offset: 903
.Ltmp444:
    0000038d: 	movq	%r12, 0x50(%rsp)
    00000392: 	cmpq	$0xf, %r12
    00000396: 	ja	.Ltmp446 # Offset: 918
    0000039c: 	cmpq	$0x1, %r12
    000003a0: 	jne	.Ltmp447 # Offset: 928
    000003a6: 	movzbl	(%rbp), %eax
    000003aa: 	movb	%al, 0x10(%rbx)
.Ltmp450:
    000003ad: 	movq	%r12, 0x8(%rbx)
    000003b1: 	movb	$0x0, (%rdi,%r12)
    000003b6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000003bd: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003c4: 	addq	$0x20, %rax
    000003c8: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000003cf: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000003d6: 	je	.Ltmp448 # Offset: 982
.Ltmp451:
    000003dc: 	movq	-0x20(%rax), %rbp
    000003e0: 	callq	clock@PLT # Offset: 992
    000003e5: 	movq	%rax, end_time(%rip)
    000003ec: 	movq	0x58(%rsp), %rdx
    000003f1: 	subq	%fs:0x28, %rdx
    000003fa: 	jne	.Ltmp449 # Offset: 1018
    00000400: 	subq	start_time(%rip), %rax
    00000407: 	pxor	%xmm0, %xmm0
    0000040b: 	movq	%rbp, %rdi
    0000040e: 	cvtsi2sd	%rax, %xmm0
    00000413: 	divsd	DATAat0x4d640(%rip), %xmm0
    0000041b: 	addq	$0x68, %rsp
    0000041f: 	popq	%rbx
    00000420: 	popq	%rbp
    00000421: 	popq	%r12
    00000423: 	popq	%r13
    00000425: 	popq	%r14
    00000427: 	popq	%r15
    00000429: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1065
    0000042e: 	nop # Size: 2
.Ltmp441:
    00000430: 	movq	0x40(%rsp), %rax
    00000435: 	movl	$0x1, %edi
    0000043a: 	movaps	%xmm3, 0x10(%rsp)
    0000043f: 	leaq	DATAat0x4d004(%rip), %rsi
    00000446: 	movq	(%rax), %rdx
    00000449: 	xorl	%eax, %eax
    0000044b: 	callq	__printf_chk@PLT # Offset: 1099
    00000450: 	addl	$0x1, 0x24(%rsp)
    00000455: 	movl	iterations(%rip), %edi
    0000045b: 	movl	0x24(%rsp), %eax
    0000045f: 	movl	%edi, 0x34(%rsp)
    00000463: 	cmpl	%edi, %eax
    00000465: 	jge	.Ltmp439 # Offset: 1125
    0000046b: 	movq	0x28(%rsp), %rax
    00000470: 	movdqa	0x10(%rsp), %xmm3
    00000476: 	pxor	%xmm6, %xmm6
    0000047a: 	movzbl	(%rax), %esi
    0000047d: 	movzbl	0x1f3a(%rax), %edi
    00000484: 	movq	0x1f30(%rax), %xmm5
    0000048c: 	movzbl	0x1f3b(%rax), %ecx
    00000493: 	movq	0x1f31(%rax), %xmm4
    0000049b: 	movb	%sil, 0x32(%rsp)
    000004a0: 	movzbl	0x1(%rax), %esi
    000004a4: 	movb	%dil, 0xa(%rsp)
    000004a9: 	movb	%cl, 0xd(%rsp)
    000004ad: 	movzbl	0x1f3d(%rax), %edi
    000004b4: 	movb	%sil, 0x33(%rsp)
    000004b9: 	movzbl	0x1f38(%rax), %esi
    000004c0: 	movzbl	0x1f3e(%rax), %ecx
    000004c7: 	movb	%dil, 0xf(%rsp)
    000004cc: 	movb	%sil, 0x20(%rsp)
    000004d1: 	movzbl	0x1f39(%rax), %esi
    000004d8: 	movb	%cl, 0xb(%rsp)
    000004dc: 	movb	%sil, 0xc(%rsp)
    000004e1: 	movzbl	0x1f3c(%rax), %esi
    000004e8: 	movzbl	0x1f3f(%rax), %eax
    000004ef: 	movb	%sil, 0xe(%rsp)
    000004f4: 	movb	%al, 0x21(%rsp)
    000004f8: 	jmp	.Ltmp442 # Offset: 1272
.Ltmp446:
    000004fd: 	movq	%rbx, %rdi
    00000500: 	leaq	0x50(%rsp), %rsi
    00000505: 	xorl	%edx, %edx
    00000507: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1287
    0000050c: 	movq	%rax, (%rbx)
    0000050f: 	movq	%rax, %rdi
    00000512: 	movq	0x50(%rsp), %rax
    00000517: 	movq	%rax, 0x10(%rbx)
.Ltmp452:
    0000051b: 	movq	%r12, %rdx
    0000051e: 	movq	%rbp, %rsi
    00000521: 	callq	memcpy@PLT # Offset: 1313
    00000526: 	movq	0x50(%rsp), %r12
    0000052b: 	movq	(%rbx), %rdi
    0000052e: 	jmp	.Ltmp450 # Offset: 1326
.Ltmp443:
    00000533: 	movq	0x40(%rsp), %rsi
    00000538: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000053f: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1343
    00000544: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000054b: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000552: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000559: 	jne	.Ltmp451 # Offset: 1369
.Ltmp448:
    0000055f: 	movq	-0x8(%rdx), %rax
    00000563: 	addq	$0x200, %rax
    00000569: 	jmp	.Ltmp451 # Offset: 1385
.Ltmp447:
    0000056e: 	testq	%r12, %r12
    00000571: 	je	.Ltmp450 # Offset: 1393
    00000577: 	jmp	.Ltmp452 # Offset: 1399
.Ltmp449:
    00000579: 	callq	__stack_chk_fail@PLT # Offset: 1401
.Ltmp445:
    0000057e: 	leaq	DATAat0x4d018(%rip), %rdi
    00000585: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1413
DWARF CFI Instructions:
    <empty>
End of Function "_Z28test_CSE4_add_inline_flippedIa14custom_cse_addIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z28test_CSE4_add_inline_flippedIh14custom_cse_addIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 65
  State       : disassembled
  Address     : 0x7ac0
  Size        : 0x510
  MaxSize     : 0x510
  Offset      : 0x7ac0
  Section     : .text
  Orc Section : .local.text._Z28test_CSE4_add_inline_flippedIh14custom_cse_addIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB064:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movl	%esi, %r12d
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdi, %rbx
    00000016: 	subq	$0x48, %rsp
    0000001a: 	movq	%rcx, 0x20(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x38(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r9d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r9d, %r9d
    00000045: 	jle	.Ltmp453 # Offset: 69
    0000004b: 	leal	-0x1(%r12), %edi
    00000050: 	leal	-0x2(%r12), %eax
    00000055: 	movd	%ebp, %xmm2
    00000059: 	xorl	%r14d, %r14d
    0000005c: 	movl	%eax, 0x4(%rsp)
    00000060: 	movl	%edi, %eax
    00000062: 	punpcklbw	%xmm2, %xmm2
    00000066: 	movzbl	(%rbx), %r8d
    0000006a: 	shrl	$0x4, %eax
    0000006d: 	movl	%edi, 0x8(%rsp)
    00000071: 	andl	$-0x10, %edi
    00000074: 	punpcklwd	%xmm2, %xmm2
    00000078: 	subl	$0x1, %eax
    0000007b: 	movl	%edi, %r15d
    0000007e: 	shlq	$0x4, %rax
    00000082: 	leaq	0x10(%rbx,%rax), %r13
    00000087: 	leal	0x1(%rdi), %eax
    0000008a: 	movzbl	0x1(%rbx), %edi
    0000008e: 	movl	%eax, 0xc(%rsp)
    00000092: 	nopw	(%rax,%rax) # Size: 6
.Ltmp459:
    00000098: 	leal	(%r8,%rdi), %eax
    0000009c: 	movl	%r8d, %ecx
    0000009f: 	addl	%ebp, %eax
    000000a1: 	subl	%edi, %ecx
    000000a3: 	addl	%eax, %eax
    000000a5: 	leal	(%rdi,%rax), %edx
    000000a8: 	addl	%r8d, %eax
    000000ab: 	leal	(%rax,%rax,2), %eax
    000000ae: 	addl	%ecx, %eax
    000000b0: 	subl	%edx, %eax
    000000b2: 	subl	%edx, %eax
    000000b4: 	subl	%edx, %eax
    000000b6: 	cmpl	$0x1, %r12d
    000000ba: 	jle	.Ltmp454 # Offset: 186
    000000c0: 	cmpl	$0xe, 0x4(%rsp)
    000000c5: 	jbe	.Ltmp455 # Offset: 197
    000000cb: 	pshufd	$0x0, %xmm2, %xmm5
    000000d0: 	movq	%rbx, %rdx
    000000d3: 	pxor	%xmm4, %xmm4
    000000d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp456:
    000000e0: 	movdqu	(%rdx), %xmm6
    000000e4: 	movdqu	0x1(%rdx), %xmm0
    000000e9: 	addq	$0x10, %rdx
    000000ed: 	movdqu	-0xf(%rdx), %xmm1
    000000f2: 	paddb	%xmm6, %xmm0
    000000f6: 	paddb	%xmm5, %xmm0
    000000fa: 	paddb	%xmm0, %xmm0
    000000fe: 	paddb	%xmm0, %xmm1
    00000102: 	paddb	%xmm6, %xmm0
    00000106: 	movdqa	%xmm1, %xmm3
    0000010a: 	paddb	%xmm0, %xmm0
    0000010e: 	paddb	%xmm0, %xmm0
    00000112: 	paddb	%xmm1, %xmm3
    00000116: 	psubb	%xmm1, %xmm0
    0000011a: 	paddb	%xmm3, %xmm1
    0000011e: 	psubb	%xmm1, %xmm0
    00000122: 	paddb	%xmm0, %xmm4
    00000126: 	cmpq	%rdx, %r13
    00000129: 	jne	.Ltmp456 # Offset: 297
    0000012b: 	movdqa	%xmm4, %xmm0
    0000012f: 	psrldq	$0x8, %xmm0
    00000134: 	paddb	%xmm0, %xmm4
    00000138: 	pxor	%xmm0, %xmm0
    0000013c: 	psadbw	%xmm0, %xmm4
    00000140: 	movd	%xmm4, %edx
    00000144: 	addl	%edx, %eax
    00000146: 	cmpl	0x8(%rsp), %r15d
    0000014b: 	je	.Ltmp454 # Offset: 331
    00000151: 	movl	0xc(%rsp), %ecx
    00000155: 	movl	%r15d, %edx
.Ltmp467:
    00000158: 	movl	%r12d, %r10d
    0000015b: 	subl	%edx, %r10d
    0000015e: 	leal	-0x1(%r10), %esi
    00000162: 	subl	$0x2, %r10d
    00000166: 	cmpl	$0x6, %r10d
    0000016a: 	jbe	.Ltmp457 # Offset: 362
    0000016c: 	movq	(%rbx,%rdx), %xmm0
    00000171: 	movq	0x1(%rbx,%rdx), %xmm3
    00000177: 	movl	%ebp, %edx
    00000179: 	movzbl	%bpl, %r10d
    0000017d: 	shll	$0x8, %edx
    00000180: 	orl	%r10d, %edx
    00000183: 	movd	%edx, %xmm6
    00000187: 	pshuflw	$0x0, %xmm6, %xmm1
    0000018c: 	paddb	%xmm0, %xmm1
    00000190: 	paddb	%xmm3, %xmm1
    00000194: 	paddb	%xmm1, %xmm1
    00000198: 	paddb	%xmm1, %xmm0
    0000019c: 	paddb	%xmm3, %xmm1
    000001a0: 	paddb	%xmm0, %xmm0
    000001a4: 	paddb	%xmm1, %xmm1
    000001a8: 	paddb	%xmm0, %xmm0
    000001ac: 	psubb	%xmm1, %xmm0
    000001b0: 	psubb	%xmm1, %xmm0
    000001b4: 	pxor	%xmm1, %xmm1
    000001b8: 	movdqa	%xmm0, %xmm5
    000001bc: 	psadbw	%xmm1, %xmm5
    000001c0: 	movq	%xmm5, %rdx
    000001c5: 	movq	%xmm5, 0x28(%rsp)
    000001cb: 	movl	%edx, %r10d
    000001ce: 	movl	%esi, %edx
    000001d0: 	andl	$-0x8, %edx
    000001d3: 	addl	%r10d, %eax
    000001d6: 	addl	%edx, %ecx
    000001d8: 	cmpl	%esi, %edx
    000001da: 	je	.Ltmp454 # Offset: 474
.Ltmp457:
    000001e0: 	movslq	%ecx, %rdx
    000001e3: 	addq	%rbx, %rdx
    000001e6: 	movzbl	-0x1(%rdx), %esi
    000001ea: 	movzbl	(%rdx), %edx
    000001ed: 	leal	(%rsi,%rdx), %r11d
    000001f1: 	addl	%ebp, %r11d
    000001f4: 	addl	%r11d, %r11d
    000001f7: 	addl	%r11d, %esi
    000001fa: 	leal	(%r11,%rdx), %r10d
    000001fe: 	shll	$0x2, %esi
    00000201: 	subl	%r10d, %esi
    00000204: 	addl	%esi, %eax
    00000206: 	leal	0x1(%rcx), %esi
    00000209: 	subl	%r10d, %eax
    0000020c: 	addl	%r10d, %r10d
    0000020f: 	subl	%r10d, %eax
    00000212: 	cmpl	%esi, %r12d
    00000215: 	jle	.Ltmp454 # Offset: 533
    0000021b: 	movslq	%esi, %rsi
    0000021e: 	leal	(%rbp,%rdx), %r11d
    00000223: 	movzbl	(%rbx,%rsi), %esi
    00000227: 	addl	%esi, %r11d
    0000022a: 	addl	%r11d, %r11d
    0000022d: 	addl	%r11d, %edx
    00000230: 	leal	(%r11,%rsi), %r10d
    00000234: 	shll	$0x2, %edx
    00000237: 	subl	%r10d, %edx
    0000023a: 	subl	%r10d, %edx
    0000023d: 	addl	%r10d, %r10d
    00000240: 	subl	%r10d, %edx
    00000243: 	addl	%edx, %eax
    00000245: 	leal	0x2(%rcx), %edx
    00000248: 	cmpl	%edx, %r12d
    0000024b: 	jle	.Ltmp454 # Offset: 587
    00000251: 	movslq	%edx, %rdx
    00000254: 	movzbl	(%rbx,%rdx), %r10d
    00000259: 	leal	(%rbp,%rsi), %edx
    0000025d: 	addl	%r10d, %edx
    00000260: 	addl	%edx, %edx
    00000262: 	leal	(%r10,%rdx), %r11d
    00000266: 	addl	%esi, %edx
    00000268: 	shll	$0x2, %edx
    0000026b: 	subl	%r11d, %edx
    0000026e: 	subl	%r11d, %edx
    00000271: 	addl	%r11d, %r11d
    00000274: 	subl	%r11d, %edx
    00000277: 	addl	%edx, %eax
    00000279: 	leal	0x3(%rcx), %edx
    0000027c: 	cmpl	%edx, %r12d
    0000027f: 	jle	.Ltmp454 # Offset: 639
    00000285: 	movslq	%edx, %rdx
    00000288: 	movzbl	(%rbx,%rdx), %esi
    0000028c: 	leal	(%rbp,%r10), %edx
    00000291: 	addl	%esi, %edx
    00000293: 	addl	%edx, %edx
    00000295: 	leal	(%rsi,%rdx), %r11d
    00000299: 	addl	%r10d, %edx
    0000029c: 	shll	$0x2, %edx
    0000029f: 	subl	%r11d, %edx
    000002a2: 	subl	%r11d, %edx
    000002a5: 	addl	%r11d, %r11d
    000002a8: 	subl	%r11d, %edx
    000002ab: 	addl	%edx, %eax
    000002ad: 	leal	0x4(%rcx), %edx
    000002b0: 	cmpl	%edx, %r12d
    000002b3: 	jle	.Ltmp454 # Offset: 691
    000002b9: 	movslq	%edx, %rdx
    000002bc: 	movzbl	(%rbx,%rdx), %r10d
    000002c1: 	leal	(%rbp,%rsi), %edx
    000002c5: 	addl	%r10d, %edx
    000002c8: 	addl	%edx, %edx
    000002ca: 	leal	(%r10,%rdx), %r11d
    000002ce: 	addl	%esi, %edx
    000002d0: 	shll	$0x2, %edx
    000002d3: 	subl	%r11d, %edx
    000002d6: 	subl	%r11d, %edx
    000002d9: 	addl	%r11d, %r11d
    000002dc: 	subl	%r11d, %edx
    000002df: 	addl	%edx, %eax
    000002e1: 	leal	0x5(%rcx), %edx
    000002e4: 	cmpl	%edx, %r12d
    000002e7: 	jle	.Ltmp454 # Offset: 743
    000002e9: 	movslq	%edx, %rdx
    000002ec: 	leal	(%rbp,%r10), %esi
    000002f1: 	addl	$0x6, %ecx
    000002f4: 	movzbl	(%rbx,%rdx), %edx
    000002f8: 	addl	%edx, %esi
    000002fa: 	addl	%esi, %esi
    000002fc: 	leal	(%rdx,%rsi), %r11d
    00000300: 	addl	%r10d, %esi
    00000303: 	shll	$0x2, %esi
    00000306: 	subl	%r11d, %esi
    00000309: 	subl	%r11d, %esi
    0000030c: 	addl	%r11d, %r11d
    0000030f: 	subl	%r11d, %esi
    00000312: 	addl	%esi, %eax
    00000314: 	cmpl	%ecx, %r12d
    00000317: 	jle	.Ltmp454 # Offset: 791
    00000319: 	movslq	%ecx, %rcx
    0000031c: 	movzbl	(%rbx,%rcx), %esi
    00000320: 	leal	(%rbp,%rdx), %ecx
    00000324: 	addl	%esi, %ecx
    00000326: 	addl	%ecx, %ecx
    00000328: 	addl	%ecx, %edx
    0000032a: 	addl	%ecx, %esi
    0000032c: 	shll	$0x2, %edx
    0000032f: 	subl	%esi, %edx
    00000331: 	subl	%esi, %edx
    00000333: 	addl	%esi, %esi
    00000335: 	subl	%esi, %edx
    00000337: 	addl	%edx, %eax
.Ltmp454:
    00000339: 	testb	%al, %al
    0000033b: 	jne	.Ltmp458 # Offset: 827
    00000341: 	addl	$0x1, %r14d
    00000345: 	cmpl	%r9d, %r14d
    00000348: 	jl	.Ltmp459 # Offset: 840
.Ltmp453:
    0000034e: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000355: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000035c: 	subq	$0x20, %rax
    00000360: 	cmpq	%rax, %rbx
    00000363: 	je	.Ltmp460 # Offset: 867
    00000369: 	movq	0x20(%rsp), %rax
    0000036e: 	leaq	0x10(%rbx), %rdi
    00000372: 	movq	%rdi, (%rbx)
    00000375: 	movq	(%rax), %rbp
    00000378: 	movq	0x8(%rax), %r12
    0000037c: 	movq	%rbp, %rax
    0000037f: 	addq	%r12, %rax
    00000382: 	je	.Ltmp461 # Offset: 898
    00000384: 	testq	%rbp, %rbp
    00000387: 	je	.Ltmp462 # Offset: 903
.Ltmp461:
    0000038d: 	movq	%r12, 0x30(%rsp)
    00000392: 	cmpq	$0xf, %r12
    00000396: 	ja	.Ltmp463 # Offset: 918
    0000039c: 	cmpq	$0x1, %r12
    000003a0: 	jne	.Ltmp464 # Offset: 928
    000003a6: 	movzbl	(%rbp), %eax
    000003aa: 	movb	%al, 0x10(%rbx)
.Ltmp468:
    000003ad: 	movq	%r12, 0x8(%rbx)
    000003b1: 	movb	$0x0, (%rdi,%r12)
    000003b6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000003bd: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003c4: 	addq	$0x20, %rax
    000003c8: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000003cf: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000003d6: 	je	.Ltmp465 # Offset: 982
.Ltmp469:
    000003dc: 	movq	-0x20(%rax), %rbp
    000003e0: 	callq	clock@PLT # Offset: 992
    000003e5: 	movq	%rax, end_time(%rip)
    000003ec: 	movq	0x38(%rsp), %rdx
    000003f1: 	subq	%fs:0x28, %rdx
    000003fa: 	jne	.Ltmp466 # Offset: 1018
    00000400: 	subq	start_time(%rip), %rax
    00000407: 	pxor	%xmm0, %xmm0
    0000040b: 	movq	%rbp, %rdi
    0000040e: 	cvtsi2sd	%rax, %xmm0
    00000413: 	divsd	DATAat0x4d640(%rip), %xmm0
    0000041b: 	addq	$0x48, %rsp
    0000041f: 	popq	%rbx
    00000420: 	popq	%rbp
    00000421: 	popq	%r12
    00000423: 	popq	%r13
    00000425: 	popq	%r14
    00000427: 	popq	%r15
    00000429: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1065
    0000042e: 	nop # Size: 2
.Ltmp458:
    00000430: 	movq	0x20(%rsp), %rax
    00000435: 	leaq	DATAat0x4d004(%rip), %rsi
    0000043c: 	movl	$0x1, %edi
    00000441: 	movaps	%xmm2, 0x10(%rsp)
    00000446: 	addl	$0x1, %r14d
    0000044a: 	movq	(%rax), %rdx
    0000044d: 	xorl	%eax, %eax
    0000044f: 	callq	__printf_chk@PLT # Offset: 1103
    00000454: 	movl	iterations(%rip), %r9d
    0000045b: 	cmpl	%r14d, %r9d
    0000045e: 	jle	.Ltmp453 # Offset: 1118
    00000464: 	movzbl	(%rbx), %r8d
    00000468: 	movzbl	0x1(%rbx), %edi
    0000046c: 	movdqa	0x10(%rsp), %xmm2
    00000472: 	jmp	.Ltmp459 # Offset: 1138
.Ltmp455:
    00000477: 	xorl	%edx, %edx
    00000479: 	movl	$0x1, %ecx
    0000047e: 	jmp	.Ltmp467 # Offset: 1150
.Ltmp463:
    00000483: 	movq	%rbx, %rdi
    00000486: 	leaq	0x30(%rsp), %rsi
    0000048b: 	xorl	%edx, %edx
    0000048d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1165
    00000492: 	movq	%rax, (%rbx)
    00000495: 	movq	%rax, %rdi
    00000498: 	movq	0x30(%rsp), %rax
    0000049d: 	movq	%rax, 0x10(%rbx)
.Ltmp470:
    000004a1: 	movq	%r12, %rdx
    000004a4: 	movq	%rbp, %rsi
    000004a7: 	callq	memcpy@PLT # Offset: 1191
    000004ac: 	movq	0x30(%rsp), %r12
    000004b1: 	movq	(%rbx), %rdi
    000004b4: 	jmp	.Ltmp468 # Offset: 1204
.Ltmp460:
    000004b9: 	movq	0x20(%rsp), %rsi
    000004be: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000004c5: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1221
    000004ca: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000004d1: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000004d8: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000004df: 	jne	.Ltmp469 # Offset: 1247
.Ltmp465:
    000004e5: 	movq	-0x8(%rdx), %rax
    000004e9: 	addq	$0x200, %rax
    000004ef: 	jmp	.Ltmp469 # Offset: 1263
.Ltmp464:
    000004f4: 	testq	%r12, %r12
    000004f7: 	je	.Ltmp468 # Offset: 1271
    000004fd: 	jmp	.Ltmp470 # Offset: 1277
.Ltmp466:
    000004ff: 	callq	__stack_chk_fail@PLT # Offset: 1279
.Ltmp462:
    00000504: 	leaq	DATAat0x4d018(%rip), %rdi
    0000050b: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1291
DWARF CFI Instructions:
    <empty>
End of Function "_Z28test_CSE4_add_inline_flippedIh14custom_cse_addIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSE4Ii14custom_cse_subIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 66
  State       : disassembled
  Address     : 0x7fd0
  Size        : 0x3c5
  MaxSize     : 0x3d0
  Offset      : 0x7fd0
  Section     : .text
  Orc Section : .local.text._Z9test_CSE4Ii14custom_cse_subIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB065:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdi, %rbx
    00000016: 	subq	$0x38, %rsp
    0000001a: 	movq	%rcx, 0x18(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x28(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r10d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r10d, %r10d
    00000045: 	jle	.Ltmp471 # Offset: 69
    0000004b: 	leal	-0x1(%r14), %r8d
    0000004f: 	leal	-0x2(%r14), %eax
    00000053: 	movl	(%rbx), %r9d
    00000056: 	movl	0x4(%rbx), %edi
    00000059: 	movl	%eax, 0xc(%rsp)
    0000005d: 	movl	%r8d, %eax
    00000060: 	movl	%r8d, %r15d
    00000063: 	xorl	%r13d, %r13d
    00000066: 	shrl	$0x2, %eax
    00000069: 	andl	$-0x4, %r15d
    0000006d: 	subl	$0x1, %eax
    00000070: 	shlq	$0x4, %rax
    00000074: 	leaq	0x10(%rbx,%rax), %r12
    00000079: 	leal	0x1(%r15), %eax
    0000007d: 	movl	%eax, 0x10(%rsp)
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp477:
    00000088: 	movl	%r9d, %edx
    0000008b: 	subl	%edi, %edx
    0000008d: 	leal	(%rbp,%rdx), %ecx
    00000091: 	leal	(%r9,%rcx,2), %eax
    00000095: 	leal	(%rdi,%rcx,2), %ecx
    00000098: 	leal	(%rdx,%rax,2), %edx
    0000009b: 	subl	%ecx, %edx
    0000009d: 	subl	%ecx, %edx
    0000009f: 	addl	%edx, %eax
    000000a1: 	subl	%ecx, %eax
    000000a3: 	cmpl	$0x1, %r14d
    000000a7: 	jle	.Ltmp472 # Offset: 167
    000000ad: 	cmpl	$0x2, 0xc(%rsp)
    000000b2: 	jbe	.Ltmp473 # Offset: 178
    000000b8: 	movd	%ebp, %xmm6
    000000bc: 	movq	%rbx, %rdx
    000000bf: 	pxor	%xmm0, %xmm0
    000000c3: 	pshufd	$0x0, %xmm6, %xmm4
    000000c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp474:
    000000d0: 	movdqu	(%rdx), %xmm2
    000000d4: 	movdqu	0x4(%rdx), %xmm5
    000000d9: 	addq	$0x10, %rdx
    000000dd: 	movdqa	%xmm2, %xmm3
    000000e1: 	movdqa	%xmm5, %xmm1
    000000e5: 	psubd	%xmm5, %xmm3
    000000e9: 	paddd	%xmm4, %xmm3
    000000ed: 	paddd	%xmm3, %xmm2
    000000f1: 	paddd	%xmm3, %xmm1
    000000f5: 	paddd	%xmm3, %xmm2
    000000f9: 	paddd	%xmm3, %xmm1
    000000fd: 	paddd	%xmm2, %xmm0
    00000101: 	psubd	%xmm1, %xmm0
    00000105: 	paddd	%xmm2, %xmm0
    00000109: 	psubd	%xmm1, %xmm0
    0000010d: 	paddd	%xmm2, %xmm0
    00000111: 	psubd	%xmm1, %xmm0
    00000115: 	paddd	%xmm2, %xmm0
    00000119: 	psubd	%xmm1, %xmm0
    0000011d: 	cmpq	%r12, %rdx
    00000120: 	jne	.Ltmp474 # Offset: 288
    00000122: 	movdqa	%xmm0, %xmm1
    00000126: 	psrldq	$0x8, %xmm1
    0000012b: 	paddd	%xmm1, %xmm0
    0000012f: 	movdqa	%xmm0, %xmm1
    00000133: 	psrldq	$0x4, %xmm1
    00000138: 	paddd	%xmm1, %xmm0
    0000013c: 	movd	%xmm0, %edx
    00000140: 	addl	%edx, %eax
    00000142: 	cmpl	%r8d, %r15d
    00000145: 	je	.Ltmp472 # Offset: 325
    0000014b: 	movl	0x10(%rsp), %edx
    0000014f: 	movl	%r15d, %esi
.Ltmp485:
    00000152: 	movl	%r14d, %r11d
    00000155: 	subl	%esi, %r11d
    00000158: 	leal	-0x1(%r11), %ecx
    0000015c: 	cmpl	$0x2, %r11d
    00000160: 	je	.Ltmp475 # Offset: 352
    00000162: 	movq	(%rbx,%rsi,4), %xmm3
    00000167: 	movq	0x4(%rbx,%rsi,4), %xmm2
    0000016d: 	movd	%ebp, %xmm6
    00000171: 	pshufd	$0xe0, %xmm6, %xmm0
    00000176: 	movdqa	%xmm3, %xmm1
    0000017a: 	psubd	%xmm2, %xmm1
    0000017e: 	paddd	%xmm1, %xmm0
    00000182: 	paddd	%xmm0, %xmm3
    00000186: 	paddd	%xmm0, %xmm2
    0000018a: 	paddd	%xmm0, %xmm3
    0000018e: 	paddd	%xmm0, %xmm2
    00000192: 	paddd	%xmm3, %xmm1
    00000196: 	movdqa	%xmm1, %xmm0
    0000019a: 	psubd	%xmm2, %xmm0
    0000019e: 	paddd	%xmm3, %xmm0
    000001a2: 	psubd	%xmm2, %xmm0
    000001a6: 	paddd	%xmm3, %xmm0
    000001aa: 	psubd	%xmm2, %xmm0
    000001ae: 	movd	%xmm0, %r11d
    000001b3: 	pshufd	$0xe5, %xmm0, %xmm7
    000001b8: 	movd	%xmm7, %esi
    000001bc: 	addl	%r11d, %esi
    000001bf: 	addl	%esi, %eax
    000001c1: 	movl	%ecx, %esi
    000001c3: 	andl	$-0x2, %esi
    000001c6: 	addl	%esi, %edx
    000001c8: 	cmpl	%ecx, %esi
    000001ca: 	je	.Ltmp472 # Offset: 458
.Ltmp475:
    000001cc: 	movslq	%edx, %rdx
    000001cf: 	movl	-0x4(%rbx,%rdx,4), %ecx
    000001d3: 	movl	(%rbx,%rdx,4), %esi
    000001d6: 	movl	%ecx, %edx
    000001d8: 	subl	%esi, %edx
    000001da: 	addl	%ebp, %edx
    000001dc: 	leal	(%rcx,%rdx,2), %ecx
    000001df: 	leal	(%rsi,%rdx,2), %edx
    000001e2: 	leal	(%rax,%rcx,2), %eax
    000001e5: 	subl	%edx, %eax
    000001e7: 	subl	%edx, %eax
    000001e9: 	leal	(%rax,%rcx,2), %eax
    000001ec: 	subl	%edx, %eax
    000001ee: 	subl	%edx, %eax
.Ltmp472:
    000001f0: 	testl	%eax, %eax
    000001f2: 	jne	.Ltmp476 # Offset: 498
    000001f8: 	addl	$0x1, %r13d
    000001fc: 	cmpl	%r10d, %r13d
    000001ff: 	jl	.Ltmp477 # Offset: 511
.Ltmp471:
    00000205: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000020c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000213: 	subq	$0x20, %rax
    00000217: 	cmpq	%rax, %rbx
    0000021a: 	je	.Ltmp478 # Offset: 538
    00000220: 	movq	0x18(%rsp), %rax
    00000225: 	leaq	0x10(%rbx), %rdi
    00000229: 	movq	%rdi, (%rbx)
    0000022c: 	movq	(%rax), %rbp
    0000022f: 	movq	0x8(%rax), %r12
    00000233: 	movq	%rbp, %rax
    00000236: 	addq	%r12, %rax
    00000239: 	je	.Ltmp479 # Offset: 569
    0000023b: 	testq	%rbp, %rbp
    0000023e: 	je	.Ltmp480 # Offset: 574
.Ltmp479:
    00000244: 	movq	%r12, 0x20(%rsp)
    00000249: 	cmpq	$0xf, %r12
    0000024d: 	ja	.Ltmp481 # Offset: 589
    00000253: 	cmpq	$0x1, %r12
    00000257: 	jne	.Ltmp482 # Offset: 599
    0000025d: 	movzbl	(%rbp), %eax
    00000261: 	movb	%al, 0x10(%rbx)
.Ltmp486:
    00000264: 	movq	%r12, 0x8(%rbx)
    00000268: 	movb	$0x0, (%rdi,%r12)
    0000026d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000274: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000027b: 	addq	$0x20, %rax
    0000027f: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000286: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000028d: 	je	.Ltmp483 # Offset: 653
.Ltmp487:
    00000293: 	movq	-0x20(%rax), %rbp
    00000297: 	callq	clock@PLT # Offset: 663
    0000029c: 	movq	%rax, end_time(%rip)
    000002a3: 	movq	0x28(%rsp), %rdx
    000002a8: 	subq	%fs:0x28, %rdx
    000002b1: 	jne	.Ltmp484 # Offset: 689
    000002b7: 	subq	start_time(%rip), %rax
    000002be: 	pxor	%xmm0, %xmm0
    000002c2: 	movq	%rbp, %rdi
    000002c5: 	cvtsi2sd	%rax, %xmm0
    000002ca: 	divsd	DATAat0x4d640(%rip), %xmm0
    000002d2: 	addq	$0x38, %rsp
    000002d6: 	popq	%rbx
    000002d7: 	popq	%rbp
    000002d8: 	popq	%r12
    000002da: 	popq	%r13
    000002dc: 	popq	%r14
    000002de: 	popq	%r15
    000002e0: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 736
    000002e5: 	nopl	(%rax) # Size: 3
.Ltmp476:
    000002e8: 	movq	0x18(%rsp), %rax
    000002ed: 	leaq	DATAat0x4d004(%rip), %rsi
    000002f4: 	movl	$0x1, %edi
    000002f9: 	movl	%r8d, 0x14(%rsp)
    000002fe: 	addl	$0x1, %r13d
    00000302: 	movq	(%rax), %rdx
    00000305: 	xorl	%eax, %eax
    00000307: 	callq	__printf_chk@PLT # Offset: 775
    0000030c: 	movl	iterations(%rip), %r10d
    00000313: 	cmpl	%r10d, %r13d
    00000316: 	jge	.Ltmp471 # Offset: 790
    0000031c: 	movl	(%rbx), %r9d
    0000031f: 	movl	0x4(%rbx), %edi
    00000322: 	movl	0x14(%rsp), %r8d
    00000327: 	jmp	.Ltmp477 # Offset: 807
.Ltmp473:
    0000032c: 	xorl	%esi, %esi
    0000032e: 	movl	$0x1, %edx
    00000333: 	jmp	.Ltmp485 # Offset: 819
.Ltmp481:
    00000338: 	movq	%rbx, %rdi
    0000033b: 	leaq	0x20(%rsp), %rsi
    00000340: 	xorl	%edx, %edx
    00000342: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 834
    00000347: 	movq	%rax, (%rbx)
    0000034a: 	movq	%rax, %rdi
    0000034d: 	movq	0x20(%rsp), %rax
    00000352: 	movq	%rax, 0x10(%rbx)
.Ltmp488:
    00000356: 	movq	%r12, %rdx
    00000359: 	movq	%rbp, %rsi
    0000035c: 	callq	memcpy@PLT # Offset: 860
    00000361: 	movq	0x20(%rsp), %r12
    00000366: 	movq	(%rbx), %rdi
    00000369: 	jmp	.Ltmp486 # Offset: 873
.Ltmp478:
    0000036e: 	movq	0x18(%rsp), %rsi
    00000373: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000037a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 890
    0000037f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000386: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000038d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000394: 	jne	.Ltmp487 # Offset: 916
.Ltmp483:
    0000039a: 	movq	-0x8(%rdx), %rax
    0000039e: 	addq	$0x200, %rax
    000003a4: 	jmp	.Ltmp487 # Offset: 932
.Ltmp482:
    000003a9: 	testq	%r12, %r12
    000003ac: 	je	.Ltmp486 # Offset: 940
    000003b2: 	jmp	.Ltmp488 # Offset: 946
.Ltmp484:
    000003b4: 	callq	__stack_chk_fail@PLT # Offset: 948
.Ltmp480:
    000003b9: 	leaq	DATAat0x4d018(%rip), %rdi
    000003c0: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 960
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE4Ii14custom_cse_subIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z20test_CSE4_add_inlineIh14custom_cse_addIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 67
  State       : disassembled
  Address     : 0x83a0
  Size        : 0x510
  MaxSize     : 0x510
  Offset      : 0x83a0
  Section     : .text
  Orc Section : .local.text._Z20test_CSE4_add_inlineIh14custom_cse_addIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB066:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movl	%esi, %r12d
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdi, %rbx
    00000016: 	subq	$0x48, %rsp
    0000001a: 	movq	%rcx, 0x20(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x38(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r9d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r9d, %r9d
    00000045: 	jle	.Ltmp489 # Offset: 69
    0000004b: 	leal	-0x1(%r12), %edi
    00000050: 	leal	-0x2(%r12), %eax
    00000055: 	movd	%ebp, %xmm2
    00000059: 	xorl	%r14d, %r14d
    0000005c: 	movl	%eax, 0x4(%rsp)
    00000060: 	movl	%edi, %eax
    00000062: 	punpcklbw	%xmm2, %xmm2
    00000066: 	movzbl	(%rbx), %r8d
    0000006a: 	shrl	$0x4, %eax
    0000006d: 	movl	%edi, 0x8(%rsp)
    00000071: 	andl	$-0x10, %edi
    00000074: 	punpcklwd	%xmm2, %xmm2
    00000078: 	subl	$0x1, %eax
    0000007b: 	movl	%edi, %r15d
    0000007e: 	shlq	$0x4, %rax
    00000082: 	leaq	0x10(%rbx,%rax), %r13
    00000087: 	leal	0x1(%rdi), %eax
    0000008a: 	movzbl	0x1(%rbx), %edi
    0000008e: 	movl	%eax, 0xc(%rsp)
    00000092: 	nopw	(%rax,%rax) # Size: 6
.Ltmp495:
    00000098: 	leal	(%r8,%rdi), %eax
    0000009c: 	movl	%r8d, %ecx
    0000009f: 	addl	%ebp, %eax
    000000a1: 	subl	%edi, %ecx
    000000a3: 	addl	%eax, %eax
    000000a5: 	leal	(%rdi,%rax), %edx
    000000a8: 	addl	%r8d, %eax
    000000ab: 	leal	(%rax,%rax,2), %eax
    000000ae: 	addl	%ecx, %eax
    000000b0: 	subl	%edx, %eax
    000000b2: 	subl	%edx, %eax
    000000b4: 	subl	%edx, %eax
    000000b6: 	cmpl	$0x1, %r12d
    000000ba: 	jle	.Ltmp490 # Offset: 186
    000000c0: 	cmpl	$0xe, 0x4(%rsp)
    000000c5: 	jbe	.Ltmp491 # Offset: 197
    000000cb: 	pshufd	$0x0, %xmm2, %xmm5
    000000d0: 	movq	%rbx, %rdx
    000000d3: 	pxor	%xmm4, %xmm4
    000000d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp492:
    000000e0: 	movdqu	(%rdx), %xmm6
    000000e4: 	movdqu	0x1(%rdx), %xmm0
    000000e9: 	addq	$0x10, %rdx
    000000ed: 	movdqu	-0xf(%rdx), %xmm1
    000000f2: 	paddb	%xmm6, %xmm0
    000000f6: 	paddb	%xmm5, %xmm0
    000000fa: 	paddb	%xmm0, %xmm0
    000000fe: 	paddb	%xmm0, %xmm1
    00000102: 	paddb	%xmm6, %xmm0
    00000106: 	movdqa	%xmm1, %xmm3
    0000010a: 	paddb	%xmm0, %xmm0
    0000010e: 	paddb	%xmm0, %xmm0
    00000112: 	paddb	%xmm1, %xmm3
    00000116: 	psubb	%xmm1, %xmm0
    0000011a: 	paddb	%xmm3, %xmm1
    0000011e: 	psubb	%xmm1, %xmm0
    00000122: 	paddb	%xmm0, %xmm4
    00000126: 	cmpq	%rdx, %r13
    00000129: 	jne	.Ltmp492 # Offset: 297
    0000012b: 	movdqa	%xmm4, %xmm0
    0000012f: 	psrldq	$0x8, %xmm0
    00000134: 	paddb	%xmm0, %xmm4
    00000138: 	pxor	%xmm0, %xmm0
    0000013c: 	psadbw	%xmm0, %xmm4
    00000140: 	movd	%xmm4, %edx
    00000144: 	addl	%edx, %eax
    00000146: 	cmpl	0x8(%rsp), %r15d
    0000014b: 	je	.Ltmp490 # Offset: 331
    00000151: 	movl	0xc(%rsp), %ecx
    00000155: 	movl	%r15d, %edx
.Ltmp503:
    00000158: 	movl	%r12d, %r10d
    0000015b: 	subl	%edx, %r10d
    0000015e: 	leal	-0x1(%r10), %esi
    00000162: 	subl	$0x2, %r10d
    00000166: 	cmpl	$0x6, %r10d
    0000016a: 	jbe	.Ltmp493 # Offset: 362
    0000016c: 	movq	(%rbx,%rdx), %xmm0
    00000171: 	movq	0x1(%rbx,%rdx), %xmm3
    00000177: 	movl	%ebp, %edx
    00000179: 	movzbl	%bpl, %r10d
    0000017d: 	shll	$0x8, %edx
    00000180: 	orl	%r10d, %edx
    00000183: 	movd	%edx, %xmm6
    00000187: 	pshuflw	$0x0, %xmm6, %xmm1
    0000018c: 	paddb	%xmm0, %xmm1
    00000190: 	paddb	%xmm3, %xmm1
    00000194: 	paddb	%xmm1, %xmm1
    00000198: 	paddb	%xmm1, %xmm0
    0000019c: 	paddb	%xmm3, %xmm1
    000001a0: 	paddb	%xmm0, %xmm0
    000001a4: 	paddb	%xmm1, %xmm1
    000001a8: 	paddb	%xmm0, %xmm0
    000001ac: 	psubb	%xmm1, %xmm0
    000001b0: 	psubb	%xmm1, %xmm0
    000001b4: 	pxor	%xmm1, %xmm1
    000001b8: 	movdqa	%xmm0, %xmm5
    000001bc: 	psadbw	%xmm1, %xmm5
    000001c0: 	movq	%xmm5, %rdx
    000001c5: 	movq	%xmm5, 0x28(%rsp)
    000001cb: 	movl	%edx, %r10d
    000001ce: 	movl	%esi, %edx
    000001d0: 	andl	$-0x8, %edx
    000001d3: 	addl	%r10d, %eax
    000001d6: 	addl	%edx, %ecx
    000001d8: 	cmpl	%esi, %edx
    000001da: 	je	.Ltmp490 # Offset: 474
.Ltmp493:
    000001e0: 	movslq	%ecx, %rdx
    000001e3: 	addq	%rbx, %rdx
    000001e6: 	movzbl	-0x1(%rdx), %esi
    000001ea: 	movzbl	(%rdx), %edx
    000001ed: 	leal	(%rsi,%rdx), %r11d
    000001f1: 	addl	%ebp, %r11d
    000001f4: 	addl	%r11d, %r11d
    000001f7: 	addl	%r11d, %esi
    000001fa: 	leal	(%r11,%rdx), %r10d
    000001fe: 	shll	$0x2, %esi
    00000201: 	subl	%r10d, %esi
    00000204: 	addl	%esi, %eax
    00000206: 	leal	0x1(%rcx), %esi
    00000209: 	subl	%r10d, %eax
    0000020c: 	addl	%r10d, %r10d
    0000020f: 	subl	%r10d, %eax
    00000212: 	cmpl	%esi, %r12d
    00000215: 	jle	.Ltmp490 # Offset: 533
    0000021b: 	movslq	%esi, %rsi
    0000021e: 	leal	(%rbp,%rdx), %r11d
    00000223: 	movzbl	(%rbx,%rsi), %esi
    00000227: 	addl	%esi, %r11d
    0000022a: 	addl	%r11d, %r11d
    0000022d: 	addl	%r11d, %edx
    00000230: 	leal	(%r11,%rsi), %r10d
    00000234: 	shll	$0x2, %edx
    00000237: 	subl	%r10d, %edx
    0000023a: 	subl	%r10d, %edx
    0000023d: 	addl	%r10d, %r10d
    00000240: 	subl	%r10d, %edx
    00000243: 	addl	%edx, %eax
    00000245: 	leal	0x2(%rcx), %edx
    00000248: 	cmpl	%edx, %r12d
    0000024b: 	jle	.Ltmp490 # Offset: 587
    00000251: 	movslq	%edx, %rdx
    00000254: 	movzbl	(%rbx,%rdx), %r10d
    00000259: 	leal	(%rbp,%rsi), %edx
    0000025d: 	addl	%r10d, %edx
    00000260: 	addl	%edx, %edx
    00000262: 	leal	(%r10,%rdx), %r11d
    00000266: 	addl	%esi, %edx
    00000268: 	shll	$0x2, %edx
    0000026b: 	subl	%r11d, %edx
    0000026e: 	subl	%r11d, %edx
    00000271: 	addl	%r11d, %r11d
    00000274: 	subl	%r11d, %edx
    00000277: 	addl	%edx, %eax
    00000279: 	leal	0x3(%rcx), %edx
    0000027c: 	cmpl	%edx, %r12d
    0000027f: 	jle	.Ltmp490 # Offset: 639
    00000285: 	movslq	%edx, %rdx
    00000288: 	movzbl	(%rbx,%rdx), %esi
    0000028c: 	leal	(%rbp,%r10), %edx
    00000291: 	addl	%esi, %edx
    00000293: 	addl	%edx, %edx
    00000295: 	leal	(%rsi,%rdx), %r11d
    00000299: 	addl	%r10d, %edx
    0000029c: 	shll	$0x2, %edx
    0000029f: 	subl	%r11d, %edx
    000002a2: 	subl	%r11d, %edx
    000002a5: 	addl	%r11d, %r11d
    000002a8: 	subl	%r11d, %edx
    000002ab: 	addl	%edx, %eax
    000002ad: 	leal	0x4(%rcx), %edx
    000002b0: 	cmpl	%edx, %r12d
    000002b3: 	jle	.Ltmp490 # Offset: 691
    000002b9: 	movslq	%edx, %rdx
    000002bc: 	movzbl	(%rbx,%rdx), %r10d
    000002c1: 	leal	(%rbp,%rsi), %edx
    000002c5: 	addl	%r10d, %edx
    000002c8: 	addl	%edx, %edx
    000002ca: 	leal	(%r10,%rdx), %r11d
    000002ce: 	addl	%esi, %edx
    000002d0: 	shll	$0x2, %edx
    000002d3: 	subl	%r11d, %edx
    000002d6: 	subl	%r11d, %edx
    000002d9: 	addl	%r11d, %r11d
    000002dc: 	subl	%r11d, %edx
    000002df: 	addl	%edx, %eax
    000002e1: 	leal	0x5(%rcx), %edx
    000002e4: 	cmpl	%edx, %r12d
    000002e7: 	jle	.Ltmp490 # Offset: 743
    000002e9: 	movslq	%edx, %rdx
    000002ec: 	leal	(%rbp,%r10), %esi
    000002f1: 	addl	$0x6, %ecx
    000002f4: 	movzbl	(%rbx,%rdx), %edx
    000002f8: 	addl	%edx, %esi
    000002fa: 	addl	%esi, %esi
    000002fc: 	leal	(%rdx,%rsi), %r11d
    00000300: 	addl	%r10d, %esi
    00000303: 	shll	$0x2, %esi
    00000306: 	subl	%r11d, %esi
    00000309: 	subl	%r11d, %esi
    0000030c: 	addl	%r11d, %r11d
    0000030f: 	subl	%r11d, %esi
    00000312: 	addl	%esi, %eax
    00000314: 	cmpl	%ecx, %r12d
    00000317: 	jle	.Ltmp490 # Offset: 791
    00000319: 	movslq	%ecx, %rcx
    0000031c: 	movzbl	(%rbx,%rcx), %esi
    00000320: 	leal	(%rbp,%rdx), %ecx
    00000324: 	addl	%esi, %ecx
    00000326: 	addl	%ecx, %ecx
    00000328: 	addl	%ecx, %edx
    0000032a: 	addl	%ecx, %esi
    0000032c: 	shll	$0x2, %edx
    0000032f: 	subl	%esi, %edx
    00000331: 	subl	%esi, %edx
    00000333: 	addl	%esi, %esi
    00000335: 	subl	%esi, %edx
    00000337: 	addl	%edx, %eax
.Ltmp490:
    00000339: 	testb	%al, %al
    0000033b: 	jne	.Ltmp494 # Offset: 827
    00000341: 	addl	$0x1, %r14d
    00000345: 	cmpl	%r9d, %r14d
    00000348: 	jl	.Ltmp495 # Offset: 840
.Ltmp489:
    0000034e: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000355: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000035c: 	subq	$0x20, %rax
    00000360: 	cmpq	%rax, %rbx
    00000363: 	je	.Ltmp496 # Offset: 867
    00000369: 	movq	0x20(%rsp), %rax
    0000036e: 	leaq	0x10(%rbx), %rdi
    00000372: 	movq	%rdi, (%rbx)
    00000375: 	movq	(%rax), %rbp
    00000378: 	movq	0x8(%rax), %r12
    0000037c: 	movq	%rbp, %rax
    0000037f: 	addq	%r12, %rax
    00000382: 	je	.Ltmp497 # Offset: 898
    00000384: 	testq	%rbp, %rbp
    00000387: 	je	.Ltmp498 # Offset: 903
.Ltmp497:
    0000038d: 	movq	%r12, 0x30(%rsp)
    00000392: 	cmpq	$0xf, %r12
    00000396: 	ja	.Ltmp499 # Offset: 918
    0000039c: 	cmpq	$0x1, %r12
    000003a0: 	jne	.Ltmp500 # Offset: 928
    000003a6: 	movzbl	(%rbp), %eax
    000003aa: 	movb	%al, 0x10(%rbx)
.Ltmp504:
    000003ad: 	movq	%r12, 0x8(%rbx)
    000003b1: 	movb	$0x0, (%rdi,%r12)
    000003b6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000003bd: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003c4: 	addq	$0x20, %rax
    000003c8: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000003cf: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000003d6: 	je	.Ltmp501 # Offset: 982
.Ltmp505:
    000003dc: 	movq	-0x20(%rax), %rbp
    000003e0: 	callq	clock@PLT # Offset: 992
    000003e5: 	movq	%rax, end_time(%rip)
    000003ec: 	movq	0x38(%rsp), %rdx
    000003f1: 	subq	%fs:0x28, %rdx
    000003fa: 	jne	.Ltmp502 # Offset: 1018
    00000400: 	subq	start_time(%rip), %rax
    00000407: 	pxor	%xmm0, %xmm0
    0000040b: 	movq	%rbp, %rdi
    0000040e: 	cvtsi2sd	%rax, %xmm0
    00000413: 	divsd	DATAat0x4d640(%rip), %xmm0
    0000041b: 	addq	$0x48, %rsp
    0000041f: 	popq	%rbx
    00000420: 	popq	%rbp
    00000421: 	popq	%r12
    00000423: 	popq	%r13
    00000425: 	popq	%r14
    00000427: 	popq	%r15
    00000429: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1065
    0000042e: 	nop # Size: 2
.Ltmp494:
    00000430: 	movq	0x20(%rsp), %rax
    00000435: 	leaq	DATAat0x4d004(%rip), %rsi
    0000043c: 	movl	$0x1, %edi
    00000441: 	movaps	%xmm2, 0x10(%rsp)
    00000446: 	addl	$0x1, %r14d
    0000044a: 	movq	(%rax), %rdx
    0000044d: 	xorl	%eax, %eax
    0000044f: 	callq	__printf_chk@PLT # Offset: 1103
    00000454: 	movl	iterations(%rip), %r9d
    0000045b: 	cmpl	%r14d, %r9d
    0000045e: 	jle	.Ltmp489 # Offset: 1118
    00000464: 	movzbl	(%rbx), %r8d
    00000468: 	movzbl	0x1(%rbx), %edi
    0000046c: 	movdqa	0x10(%rsp), %xmm2
    00000472: 	jmp	.Ltmp495 # Offset: 1138
.Ltmp491:
    00000477: 	xorl	%edx, %edx
    00000479: 	movl	$0x1, %ecx
    0000047e: 	jmp	.Ltmp503 # Offset: 1150
.Ltmp499:
    00000483: 	movq	%rbx, %rdi
    00000486: 	leaq	0x30(%rsp), %rsi
    0000048b: 	xorl	%edx, %edx
    0000048d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1165
    00000492: 	movq	%rax, (%rbx)
    00000495: 	movq	%rax, %rdi
    00000498: 	movq	0x30(%rsp), %rax
    0000049d: 	movq	%rax, 0x10(%rbx)
.Ltmp506:
    000004a1: 	movq	%r12, %rdx
    000004a4: 	movq	%rbp, %rsi
    000004a7: 	callq	memcpy@PLT # Offset: 1191
    000004ac: 	movq	0x30(%rsp), %r12
    000004b1: 	movq	(%rbx), %rdi
    000004b4: 	jmp	.Ltmp504 # Offset: 1204
.Ltmp496:
    000004b9: 	movq	0x20(%rsp), %rsi
    000004be: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000004c5: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1221
    000004ca: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000004d1: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000004d8: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000004df: 	jne	.Ltmp505 # Offset: 1247
.Ltmp501:
    000004e5: 	movq	-0x8(%rdx), %rax
    000004e9: 	addq	$0x200, %rax
    000004ef: 	jmp	.Ltmp505 # Offset: 1263
.Ltmp500:
    000004f4: 	testq	%r12, %r12
    000004f7: 	je	.Ltmp504 # Offset: 1271
    000004fd: 	jmp	.Ltmp506 # Offset: 1277
.Ltmp502:
    000004ff: 	callq	__stack_chk_fail@PLT # Offset: 1279
.Ltmp498:
    00000504: 	leaq	DATAat0x4d018(%rip), %rdi
    0000050b: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1291
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_CSE4_add_inlineIh14custom_cse_addIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSE4Ij14custom_cse_subIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 68
  State       : disassembled
  Address     : 0x88b0
  Size        : 0x3b5
  MaxSize     : 0x3c0
  Offset      : 0x88b0
  Section     : .text
  Orc Section : .local.text._Z9test_CSE4Ij14custom_cse_subIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB067:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdi, %rbx
    00000016: 	subq	$0x38, %rsp
    0000001a: 	movq	%rcx, 0x18(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x28(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r10d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r10d, %r10d
    00000045: 	jle	.Ltmp507 # Offset: 69
    0000004b: 	leal	-0x1(%r14), %r8d
    0000004f: 	leal	-0x2(%r14), %eax
    00000053: 	movl	(%rbx), %r9d
    00000056: 	movl	0x4(%rbx), %edi
    00000059: 	movl	%eax, 0xc(%rsp)
    0000005d: 	movl	%r8d, %eax
    00000060: 	movl	%r8d, %r15d
    00000063: 	xorl	%r13d, %r13d
    00000066: 	shrl	$0x2, %eax
    00000069: 	andl	$-0x4, %r15d
    0000006d: 	subl	$0x1, %eax
    00000070: 	shlq	$0x4, %rax
    00000074: 	leaq	0x10(%rbx,%rax), %r12
    00000079: 	leal	0x1(%r15), %eax
    0000007d: 	movl	%eax, 0x10(%rsp)
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp513:
    00000088: 	movl	%r9d, %ecx
    0000008b: 	subl	%edi, %ecx
    0000008d: 	leal	(%rbp,%rcx), %eax
    00000091: 	addl	%eax, %eax
    00000093: 	leal	(%rdi,%rax), %edx
    00000096: 	addl	%r9d, %eax
    00000099: 	leal	(%rax,%rax,2), %eax
    0000009c: 	subl	%edx, %eax
    0000009e: 	addl	%ecx, %eax
    000000a0: 	subl	%edx, %eax
    000000a2: 	subl	%edx, %eax
    000000a4: 	cmpl	$0x1, %r14d
    000000a8: 	jle	.Ltmp508 # Offset: 168
    000000ae: 	cmpl	$0x2, 0xc(%rsp)
    000000b3: 	jbe	.Ltmp509 # Offset: 179
    000000b9: 	movd	%ebp, %xmm7
    000000bd: 	movq	%rbx, %rdx
    000000c0: 	pxor	%xmm3, %xmm3
    000000c4: 	pshufd	$0x0, %xmm7, %xmm4
    000000c9: 	nopl	(%rax) # Size: 7
.Ltmp510:
    000000d0: 	movdqu	(%rdx), %xmm0
    000000d4: 	movdqu	0x4(%rdx), %xmm5
    000000d9: 	addq	$0x10, %rdx
    000000dd: 	movdqu	-0x10(%rdx), %xmm6
    000000e2: 	paddd	%xmm4, %xmm0
    000000e6: 	movdqa	%xmm5, %xmm1
    000000ea: 	psubd	%xmm5, %xmm0
    000000ee: 	pslld	$0x1, %xmm0
    000000f3: 	paddd	%xmm0, %xmm1
    000000f7: 	paddd	%xmm6, %xmm0
    000000fb: 	movdqa	%xmm1, %xmm2
    000000ff: 	pslld	$0x2, %xmm0
    00000104: 	pslld	$0x1, %xmm2
    00000109: 	psubd	%xmm1, %xmm0
    0000010d: 	paddd	%xmm2, %xmm1
    00000111: 	psubd	%xmm1, %xmm0
    00000115: 	paddd	%xmm0, %xmm3
    00000119: 	cmpq	%r12, %rdx
    0000011c: 	jne	.Ltmp510 # Offset: 284
    0000011e: 	movdqa	%xmm3, %xmm0
    00000122: 	psrldq	$0x8, %xmm0
    00000127: 	paddd	%xmm0, %xmm3
    0000012b: 	movdqa	%xmm3, %xmm0
    0000012f: 	psrldq	$0x4, %xmm0
    00000134: 	paddd	%xmm0, %xmm3
    00000138: 	movd	%xmm3, %edx
    0000013c: 	addl	%edx, %eax
    0000013e: 	cmpl	%r8d, %r15d
    00000141: 	je	.Ltmp508 # Offset: 321
    00000147: 	movl	0x10(%rsp), %edx
    0000014b: 	movl	%r15d, %esi
.Ltmp521:
    0000014e: 	movl	%r14d, %r11d
    00000151: 	subl	%esi, %r11d
    00000154: 	leal	-0x1(%r11), %ecx
    00000158: 	cmpl	$0x2, %r11d
    0000015c: 	je	.Ltmp511 # Offset: 348
    0000015e: 	movq	(%rbx,%rsi,4), %xmm1
    00000163: 	movd	%ebp, %xmm7
    00000167: 	movq	0x4(%rbx,%rsi,4), %xmm2
    0000016d: 	pshufd	$0xe0, %xmm7, %xmm0
    00000172: 	paddd	%xmm1, %xmm0
    00000176: 	psubd	%xmm2, %xmm0
    0000017a: 	pslld	$0x1, %xmm0
    0000017f: 	paddd	%xmm0, %xmm2
    00000183: 	paddd	%xmm1, %xmm0
    00000187: 	movdqa	%xmm2, %xmm1
    0000018b: 	pslld	$0x2, %xmm0
    00000190: 	pslld	$0x1, %xmm1
    00000195: 	psubd	%xmm2, %xmm0
    00000199: 	paddd	%xmm2, %xmm1
    0000019d: 	psubd	%xmm1, %xmm0
    000001a1: 	movd	%xmm0, %r11d
    000001a6: 	pshufd	$0xe5, %xmm0, %xmm7
    000001ab: 	movd	%xmm7, %esi
    000001af: 	addl	%r11d, %esi
    000001b2: 	addl	%esi, %eax
    000001b4: 	movl	%ecx, %esi
    000001b6: 	andl	$-0x2, %esi
    000001b9: 	addl	%esi, %edx
    000001bb: 	cmpl	%ecx, %esi
    000001bd: 	je	.Ltmp508 # Offset: 445
.Ltmp511:
    000001bf: 	movslq	%edx, %rdx
    000001c2: 	movl	-0x4(%rbx,%rdx,4), %esi
    000001c6: 	movl	(%rbx,%rdx,4), %edx
    000001c9: 	movl	%esi, %ecx
    000001cb: 	subl	%edx, %ecx
    000001cd: 	addl	%ebp, %ecx
    000001cf: 	addl	%ecx, %ecx
    000001d1: 	addl	%ecx, %edx
    000001d3: 	addl	%esi, %ecx
    000001d5: 	leal	(%rax,%rcx,4), %eax
    000001d8: 	subl	%edx, %eax
    000001da: 	subl	%edx, %eax
    000001dc: 	addl	%edx, %edx
    000001de: 	subl	%edx, %eax
.Ltmp508:
    000001e0: 	testl	%eax, %eax
    000001e2: 	jne	.Ltmp512 # Offset: 482
    000001e8: 	addl	$0x1, %r13d
    000001ec: 	cmpl	%r10d, %r13d
    000001ef: 	jl	.Ltmp513 # Offset: 495
.Ltmp507:
    000001f5: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001fc: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000203: 	subq	$0x20, %rax
    00000207: 	cmpq	%rax, %rbx
    0000020a: 	je	.Ltmp514 # Offset: 522
    00000210: 	movq	0x18(%rsp), %rax
    00000215: 	leaq	0x10(%rbx), %rdi
    00000219: 	movq	%rdi, (%rbx)
    0000021c: 	movq	(%rax), %rbp
    0000021f: 	movq	0x8(%rax), %r12
    00000223: 	movq	%rbp, %rax
    00000226: 	addq	%r12, %rax
    00000229: 	je	.Ltmp515 # Offset: 553
    0000022b: 	testq	%rbp, %rbp
    0000022e: 	je	.Ltmp516 # Offset: 558
.Ltmp515:
    00000234: 	movq	%r12, 0x20(%rsp)
    00000239: 	cmpq	$0xf, %r12
    0000023d: 	ja	.Ltmp517 # Offset: 573
    00000243: 	cmpq	$0x1, %r12
    00000247: 	jne	.Ltmp518 # Offset: 583
    0000024d: 	movzbl	(%rbp), %eax
    00000251: 	movb	%al, 0x10(%rbx)
.Ltmp522:
    00000254: 	movq	%r12, 0x8(%rbx)
    00000258: 	movb	$0x0, (%rdi,%r12)
    0000025d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000264: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000026b: 	addq	$0x20, %rax
    0000026f: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000276: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000027d: 	je	.Ltmp519 # Offset: 637
.Ltmp523:
    00000283: 	movq	-0x20(%rax), %rbp
    00000287: 	callq	clock@PLT # Offset: 647
    0000028c: 	movq	%rax, end_time(%rip)
    00000293: 	movq	0x28(%rsp), %rdx
    00000298: 	subq	%fs:0x28, %rdx
    000002a1: 	jne	.Ltmp520 # Offset: 673
    000002a7: 	subq	start_time(%rip), %rax
    000002ae: 	pxor	%xmm0, %xmm0
    000002b2: 	movq	%rbp, %rdi
    000002b5: 	cvtsi2sd	%rax, %xmm0
    000002ba: 	divsd	DATAat0x4d640(%rip), %xmm0
    000002c2: 	addq	$0x38, %rsp
    000002c6: 	popq	%rbx
    000002c7: 	popq	%rbp
    000002c8: 	popq	%r12
    000002ca: 	popq	%r13
    000002cc: 	popq	%r14
    000002ce: 	popq	%r15
    000002d0: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 720
    000002d5: 	nopl	(%rax) # Size: 3
.Ltmp512:
    000002d8: 	movq	0x18(%rsp), %rax
    000002dd: 	leaq	DATAat0x4d004(%rip), %rsi
    000002e4: 	movl	$0x1, %edi
    000002e9: 	movl	%r8d, 0x14(%rsp)
    000002ee: 	addl	$0x1, %r13d
    000002f2: 	movq	(%rax), %rdx
    000002f5: 	xorl	%eax, %eax
    000002f7: 	callq	__printf_chk@PLT # Offset: 759
    000002fc: 	movl	iterations(%rip), %r10d
    00000303: 	cmpl	%r10d, %r13d
    00000306: 	jge	.Ltmp507 # Offset: 774
    0000030c: 	movl	(%rbx), %r9d
    0000030f: 	movl	0x4(%rbx), %edi
    00000312: 	movl	0x14(%rsp), %r8d
    00000317: 	jmp	.Ltmp513 # Offset: 791
.Ltmp509:
    0000031c: 	xorl	%esi, %esi
    0000031e: 	movl	$0x1, %edx
    00000323: 	jmp	.Ltmp521 # Offset: 803
.Ltmp517:
    00000328: 	movq	%rbx, %rdi
    0000032b: 	leaq	0x20(%rsp), %rsi
    00000330: 	xorl	%edx, %edx
    00000332: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 818
    00000337: 	movq	%rax, (%rbx)
    0000033a: 	movq	%rax, %rdi
    0000033d: 	movq	0x20(%rsp), %rax
    00000342: 	movq	%rax, 0x10(%rbx)
.Ltmp524:
    00000346: 	movq	%r12, %rdx
    00000349: 	movq	%rbp, %rsi
    0000034c: 	callq	memcpy@PLT # Offset: 844
    00000351: 	movq	0x20(%rsp), %r12
    00000356: 	movq	(%rbx), %rdi
    00000359: 	jmp	.Ltmp522 # Offset: 857
.Ltmp514:
    0000035e: 	movq	0x18(%rsp), %rsi
    00000363: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000036a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 874
    0000036f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000376: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000037d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000384: 	jne	.Ltmp523 # Offset: 900
.Ltmp519:
    0000038a: 	movq	-0x8(%rdx), %rax
    0000038e: 	addq	$0x200, %rax
    00000394: 	jmp	.Ltmp523 # Offset: 916
.Ltmp518:
    00000399: 	testq	%r12, %r12
    0000039c: 	je	.Ltmp522 # Offset: 924
    000003a2: 	jmp	.Ltmp524 # Offset: 930
.Ltmp520:
    000003a4: 	callq	__stack_chk_fail@PLT # Offset: 932
.Ltmp516:
    000003a9: 	leaq	DATAat0x4d018(%rip), %rdi
    000003b0: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 944
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE4Ij14custom_cse_subIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSE4Ia14custom_cse_divIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z9test_CSE4Ia14custom_cse_divIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z9test_CSE4Ia14custom_cse_divIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/simple_types_cse.cpp/1
  Number      : 69
  State       : disassembled
  Address     : 0x8c70
  Size        : 0x270
  MaxSize     : 0x270
  Offset      : 0x8c70
  Section     : .text
  Orc Section : .local.text._Z9test_CSE4Ia14custom_cse_divIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB068:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	movq	%rdi, %r14
    00000007: 	pushq	%r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	movq	%rdx, %rbp
    0000000f: 	pushq	%rbx
    00000010: 	movl	%esi, %ebx
    00000012: 	subq	$0x18, %rsp
    00000016: 	movq	%fs:0x28, %rax
    0000001f: 	movq	%rax, 0x8(%rsp)
    00000024: 	xorl	%eax, %eax
    00000026: 	callq	clock@PLT # Offset: 38
    0000002b: 	movl	iterations(%rip), %r11d
    00000032: 	movq	%rax, start_time(%rip)
    00000039: 	testl	%r11d, %r11d
    0000003c: 	jle	.Ltmp525 # Offset: 60
    00000042: 	movzbl	(%r14), %r10d
    00000046: 	movzbl	0x1(%r14), %r9d
    0000004b: 	xorl	%r13d, %r13d
    0000004e: 	leaq	0x1(%r14), %r15
    00000052: 	leaq	0x1f40(%r14), %r12
    00000059: 	nopl	(%rax) # Size: 7
.Ltmp528:
    00000060: 	movsbl	%r10b, %esi
    00000064: 	movsbl	%r9b, %ecx
    00000068: 	movq	%r15, %rdi
    0000006b: 	movl	%esi, %eax
    0000006d: 	cltd
    0000006e: 	idivl	%ecx
    00000070: 	addl	%ebx, %eax
    00000072: 	movsbl	%al, %eax
    00000075: 	leal	(%rcx,%rax,2), %edx
    00000078: 	leal	(%rsi,%rax,2), %eax
    0000007b: 	leal	(%rax,%rax,2), %ecx
    0000007e: 	movl	%r10d, %eax
    00000081: 	subl	%r9d, %eax
    00000084: 	addl	%eax, %ecx
    00000086: 	subl	%edx, %ecx
    00000088: 	subl	%edx, %ecx
    0000008a: 	subl	%edx, %ecx
    0000008c: 	nopl	(%rax) # Size: 4
.Ltmp526:
    00000090: 	movl	%esi, %r8d
    00000093: 	movsbl	(%rdi), %esi
    00000096: 	addq	$0x1, %rdi
    0000009a: 	movl	%r8d, %eax
    0000009d: 	cltd
    0000009e: 	idivl	%esi
    000000a0: 	addl	%ebx, %eax
    000000a2: 	movsbl	%al, %eax
    000000a5: 	leal	(%rsi,%rax,2), %edx
    000000a8: 	leal	(%r8,%rax,2), %eax
    000000ac: 	leal	(%rcx,%rax,4), %ecx
    000000af: 	subl	%edx, %ecx
    000000b1: 	subl	%edx, %ecx
    000000b3: 	subl	%edx, %ecx
    000000b5: 	subl	%edx, %ecx
    000000b7: 	cmpq	%r12, %rdi
    000000ba: 	jne	.Ltmp526 # Offset: 186
    000000bc: 	testb	%cl, %cl
    000000be: 	jne	.Ltmp527 # Offset: 190
    000000c4: 	addl	$0x1, %r13d
    000000c8: 	cmpl	%r11d, %r13d
    000000cb: 	jl	.Ltmp528 # Offset: 203
.Ltmp525:
    000000cd: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000d4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000db: 	subq	$0x20, %rax
    000000df: 	cmpq	%rax, %rbx
    000000e2: 	je	.Ltmp529 # Offset: 226
    000000e8: 	leaq	0x10(%rbx), %rdi
    000000ec: 	movq	0x8(%rbp), %r12
    000000f0: 	movq	%rdi, (%rbx)
    000000f3: 	movq	(%rbp), %r13
    000000f7: 	movq	%r13, %rax
    000000fa: 	addq	%r12, %rax
    000000fd: 	je	.Ltmp530 # Offset: 253
    000000ff: 	testq	%r13, %r13
    00000102: 	je	.Ltmp531 # Offset: 258
.Ltmp530:
    00000108: 	movq	%r12, (%rsp)
    0000010c: 	cmpq	$0xf, %r12
    00000110: 	ja	.Ltmp532 # Offset: 272
    00000116: 	cmpq	$0x1, %r12
    0000011a: 	jne	.Ltmp533 # Offset: 282
    00000120: 	movzbl	(%r13), %eax
    00000125: 	movb	%al, 0x10(%rbx)
.Ltmp536:
    00000128: 	movq	%r12, 0x8(%rbx)
    0000012c: 	movb	$0x0, (%rdi,%r12)
    00000131: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000138: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000013f: 	addq	$0x20, %rax
    00000143: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000014a: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000151: 	je	.Ltmp534 # Offset: 337
.Ltmp537:
    00000157: 	movq	-0x20(%rax), %rbp
    0000015b: 	callq	clock@PLT # Offset: 347
    00000160: 	movq	%rax, end_time(%rip)
    00000167: 	movq	0x8(%rsp), %rdx
    0000016c: 	subq	%fs:0x28, %rdx
    00000175: 	jne	.Ltmp535 # Offset: 373
    0000017b: 	subq	start_time(%rip), %rax
    00000182: 	pxor	%xmm0, %xmm0
    00000186: 	movq	%rbp, %rdi
    00000189: 	cvtsi2sd	%rax, %xmm0
    0000018e: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000196: 	addq	$0x18, %rsp
    0000019a: 	popq	%rbx
    0000019b: 	popq	%rbp
    0000019c: 	popq	%r12
    0000019e: 	popq	%r13
    000001a0: 	popq	%r14
    000001a2: 	popq	%r15
    000001a4: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 420
    000001a9: 	nopl	(%rax) # Size: 7
.Ltmp527:
    000001b0: 	movq	(%rbp), %rdx
    000001b4: 	movl	$0x1, %edi
    000001b9: 	xorl	%eax, %eax
    000001bb: 	addl	$0x1, %r13d
    000001bf: 	leaq	DATAat0x4d004(%rip), %rsi
    000001c6: 	callq	__printf_chk@PLT # Offset: 454
    000001cb: 	movl	iterations(%rip), %r11d
    000001d2: 	cmpl	%r11d, %r13d
    000001d5: 	jge	.Ltmp525 # Offset: 469
    000001db: 	movzbl	(%r14), %r10d
    000001df: 	movzbl	0x1(%r14), %r9d
    000001e4: 	jmp	.Ltmp528 # Offset: 484
.Ltmp532:
    000001e9: 	movq	%rbx, %rdi
    000001ec: 	movq	%rsp, %rsi
    000001ef: 	xorl	%edx, %edx
    000001f1: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 497
    000001f6: 	movq	%rax, (%rbx)
    000001f9: 	movq	%rax, %rdi
    000001fc: 	movq	(%rsp), %rax
    00000200: 	movq	%rax, 0x10(%rbx)
.Ltmp538:
    00000204: 	movq	%r12, %rdx
    00000207: 	movq	%r13, %rsi
    0000020a: 	callq	memcpy@PLT # Offset: 522
    0000020f: 	movq	(%rsp), %r12
    00000213: 	movq	(%rbx), %rdi
    00000216: 	jmp	.Ltmp536 # Offset: 534
.Ltmp529:
    0000021b: 	movq	%rbp, %rsi
    0000021e: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000225: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 549
    0000022a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000231: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000238: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000023f: 	jne	.Ltmp537 # Offset: 575
.Ltmp534:
    00000245: 	movq	-0x8(%rdx), %rax
    00000249: 	addq	$0x200, %rax
    0000024f: 	jmp	.Ltmp537 # Offset: 591
.Ltmp533:
    00000254: 	testq	%r12, %r12
    00000257: 	je	.Ltmp536 # Offset: 599
    0000025d: 	jmp	.Ltmp538 # Offset: 605
.Ltmp535:
    0000025f: 	callq	__stack_chk_fail@PLT # Offset: 607
.Ltmp531:
    00000264: 	leaq	DATAat0x4d018(%rip), %rdi
    0000026b: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 619
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE4Ia14custom_cse_divIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z9test_CSE4Ia14custom_cse_subIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z9test_CSE4Ia14custom_cse_subIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z9test_CSE4Ia14custom_cse_subIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/simple_types_cse.cpp/1
  Number      : 70
  State       : disassembled
  Address     : 0x8ee0
  Size        : 0x5c2
  MaxSize     : 0x5d0
  Offset      : 0x8ee0
  Section     : .text
  Orc Section : .local.text._Z9test_CSE4Ia14custom_cse_subIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB069:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movl	%esi, %ebp
    0000000b: 	pushq	%rbx
    0000000c: 	subq	$0x78, %rsp
    00000010: 	movq	%rdi, 0x38(%rsp)
    00000015: 	movq	%rdx, 0x50(%rsp)
    0000001a: 	movq	%fs:0x28, %rax
    00000023: 	movq	%rax, 0x68(%rsp)
    00000028: 	xorl	%eax, %eax
    0000002a: 	callq	clock@PLT # Offset: 42
    0000002f: 	movq	%rax, start_time(%rip)
    00000036: 	movl	iterations(%rip), %eax
    0000003c: 	movl	%eax, 0x44(%rsp)
    00000040: 	testl	%eax, %eax
    00000042: 	jle	.Ltmp539 # Offset: 66
    00000048: 	movq	0x38(%rsp), %rax
    0000004d: 	movd	%ebp, %xmm3
    00000051: 	movl	$0x0, 0x2c(%rsp)
    00000059: 	pxor	%xmm6, %xmm6
    0000005d: 	punpcklbw	%xmm3, %xmm3
    00000061: 	movq	0x1f30(%rax), %xmm4
    00000069: 	movzbl	(%rax), %ebx
    0000006c: 	punpcklwd	%xmm3, %xmm3
    00000070: 	movq	0x1f31(%rax), %xmm5
    00000078: 	pshufd	$0x0, %xmm3, %xmm3
    0000007d: 	movb	%bl, 0x43(%rsp)
    00000081: 	movzbl	0x1(%rax), %ebx
    00000085: 	movb	%bl, 0x42(%rsp)
    00000089: 	leaq	0x1f30(%rax), %rbx
    00000090: 	movq	%rbx, 0x48(%rsp)
    00000095: 	movzbl	%bpl, %ebx
    00000099: 	movw	%bx, 0x40(%rsp)
    0000009e: 	movzbl	0x1f38(%rax), %ebx
    000000a5: 	movb	%bl, 0x12(%rsp)
    000000a9: 	movzbl	0x1f39(%rax), %ebx
    000000b0: 	movb	%bl, 0x32(%rsp)
    000000b4: 	movzbl	0x1f3a(%rax), %ebx
    000000bb: 	movb	%bl, 0x33(%rsp)
    000000bf: 	movzbl	0x1f3b(%rax), %ebx
    000000c6: 	movb	%bl, 0x34(%rsp)
    000000ca: 	movzbl	0x1f3c(%rax), %ebx
    000000d1: 	movb	%bl, 0x35(%rsp)
    000000d5: 	movzbl	0x1f3d(%rax), %ebx
    000000dc: 	movb	%bl, 0x36(%rsp)
    000000e0: 	movzbl	0x1f3e(%rax), %ebx
    000000e7: 	movzbl	0x1f3f(%rax), %eax
    000000ee: 	movb	%bl, 0x37(%rsp)
    000000f2: 	movl	%ebp, %ebx
    000000f4: 	movb	%al, 0x13(%rsp)
    000000f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp542:
    00000100: 	movsbl	0x43(%rsp), %esi
    00000105: 	movsbl	0x42(%rsp), %edx
    0000010a: 	pxor	%xmm2, %xmm2
    0000010e: 	movl	%esi, %ecx
    00000110: 	subl	%edx, %ecx
    00000112: 	leal	(%rcx,%rbx), %eax
    00000115: 	movsbl	%al, %eax
    00000118: 	leal	(%rdx,%rax,2), %edx
    0000011b: 	leal	(%rsi,%rax,2), %eax
    0000011e: 	leal	(%rax,%rax,2), %eax
    00000121: 	subl	%edx, %eax
    00000123: 	addl	%ecx, %eax
    00000125: 	movq	0x48(%rsp), %rcx
    0000012a: 	subl	%edx, %eax
    0000012c: 	subl	%edx, %eax
    0000012e: 	movq	0x38(%rsp), %rdx
    00000133: 	nopl	(%rax,%rax) # Size: 5
.Ltmp540:
    00000138: 	movdqu	(%rdx), %xmm1
    0000013c: 	movdqu	0x1(%rdx), %xmm0
    00000141: 	addq	$0x10, %rdx
    00000145: 	paddb	%xmm3, %xmm1
    00000149: 	movdqa	%xmm1, %xmm7
    0000014d: 	psubb	%xmm0, %xmm7
    00000151: 	movdqu	-0x10(%rdx), %xmm0
    00000156: 	paddb	%xmm7, %xmm1
    0000015a: 	paddb	%xmm7, %xmm0
    0000015e: 	psubb	%xmm1, %xmm2
    00000162: 	paddb	%xmm7, %xmm0
    00000166: 	movdqa	%xmm1, %xmm7
    0000016a: 	paddb	%xmm0, %xmm0
    0000016e: 	paddb	%xmm1, %xmm7
    00000172: 	paddb	%xmm0, %xmm0
    00000176: 	psubb	%xmm1, %xmm0
    0000017a: 	psubb	%xmm7, %xmm0
    0000017e: 	paddb	%xmm0, %xmm2
    00000182: 	cmpq	%rdx, %rcx
    00000185: 	jne	.Ltmp540 # Offset: 389
    00000187: 	movdqa	%xmm2, %xmm0
    0000018b: 	movzwl	0x40(%rsp), %edi
    00000190: 	movsbl	0x33(%rsp), %r12d
    00000196: 	psrldq	$0x8, %xmm0
    0000019b: 	movsbl	0x32(%rsp), %r14d
    000001a1: 	paddb	%xmm0, %xmm2
    000001a5: 	movl	%r12d, 0x14(%rsp)
    000001aa: 	psadbw	%xmm6, %xmm2
    000001ae: 	leal	(%r14,%rbx), %r8d
    000001b2: 	movd	%xmm2, %edx
    000001b6: 	subl	%r12d, %r8d
    000001b9: 	addl	%edx, %eax
    000001bb: 	movsbl	0x34(%rsp), %edx
    000001c0: 	movsbl	%r8b, %r8d
    000001c4: 	movb	%al, 0x30(%rsp)
    000001c8: 	movl	%edi, %eax
    000001ca: 	leal	(%r12,%r8,2), %r13d
    000001ce: 	leal	(%r14,%r8,2), %r8d
    000001d2: 	shll	$0x8, %eax
    000001d5: 	movl	%edx, %ecx
    000001d7: 	movl	%edx, 0x18(%rsp)
    000001db: 	shll	$0x2, %r8d
    000001df: 	orl	%edi, %eax
    000001e1: 	movzbl	0x12(%rsp), %edi
    000001e6: 	leal	(%rbx,%rcx), %esi
    000001e9: 	subl	%r13d, %r8d
    000001ec: 	movd	%eax, %xmm2
    000001f0: 	subl	%r13d, %r8d
    000001f3: 	pshuflw	$0x0, %xmm2, %xmm2
    000001f8: 	subl	%r13d, %r8d
    000001fb: 	paddb	%xmm4, %xmm2
    000001ff: 	subl	%r13d, %r8d
    00000202: 	movdqa	%xmm2, %xmm1
    00000206: 	psubb	%xmm5, %xmm1
    0000020a: 	movdqa	%xmm1, %xmm0
    0000020e: 	paddb	%xmm4, %xmm0
    00000212: 	paddb	%xmm1, %xmm0
    00000216: 	paddb	%xmm2, %xmm1
    0000021a: 	paddb	%xmm0, %xmm0
    0000021e: 	paddb	%xmm1, %xmm1
    00000222: 	paddb	%xmm0, %xmm0
    00000226: 	psubb	%xmm1, %xmm0
    0000022a: 	psubb	%xmm1, %xmm0
    0000022e: 	pxor	%xmm1, %xmm1
    00000232: 	movdqa	%xmm0, %xmm2
    00000236: 	psadbw	%xmm1, %xmm2
    0000023a: 	movq	%xmm2, %rax
    0000023f: 	movq	%xmm2, 0x58(%rsp)
    00000245: 	movb	%al, 0x31(%rsp)
    00000249: 	leal	(%rdi,%rbx), %eax
    0000024c: 	movl	%r12d, %edi
    0000024f: 	addl	%ebx, %edi
    00000251: 	subl	%r14d, %eax
    00000254: 	subl	%edx, %edi
    00000256: 	movsbl	%al, %eax
    00000259: 	movsbl	%dil, %edi
    0000025d: 	leal	(%r14,%rax,2), %r15d
    00000261: 	leal	(%rdx,%rdi,2), %ebp
    00000264: 	movsbl	0x35(%rsp), %edx
    00000269: 	movl	%edx, %ecx
    0000026b: 	movl	%edx, 0x1c(%rsp)
    0000026f: 	subl	%ecx, %esi
    00000271: 	addl	%ebx, %ecx
    00000273: 	movsbl	%sil, %esi
    00000277: 	leal	(%rdx,%rsi,2), %r12d
    0000027b: 	movsbl	0x36(%rsp), %edx
    00000280: 	subl	%edx, %ecx
    00000282: 	movl	%edx, 0x20(%rsp)
    00000286: 	movsbl	%cl, %ecx
    00000289: 	leal	(%rdx,%rcx,2), %r11d
    0000028d: 	movl	%ecx, 0x24(%rsp)
    00000291: 	movzbl	0x37(%rsp), %ecx
    00000296: 	leal	(%rbx,%rdx), %edx
    00000299: 	subl	%ecx, %edx
    0000029b: 	movsbl	%cl, %r9d
    0000029f: 	movsbl	%dl, %edx
    000002a2: 	movl	%r9d, 0x28(%rsp)
    000002a7: 	leal	(%r9,%rdx,2), %r10d
    000002ab: 	movl	%ecx, %r9d
    000002ae: 	addl	%ebx, %r9d
    000002b1: 	subb	0x13(%rsp), %r9b
    000002b6: 	movsbl	%r9b, %ecx
    000002ba: 	movsbl	0x13(%rsp), %r9d
    000002c0: 	movl	%ecx, (%rsp)
    000002c3: 	leal	(%r9,%rcx,2), %r9d
    000002c7: 	movzbl	0x12(%rsp), %ecx
    000002cc: 	leal	(%rcx,%rax,2), %eax
    000002cf: 	movl	0x14(%rsp), %ecx
    000002d3: 	shll	$0x2, %eax
    000002d6: 	subl	%r15d, %eax
    000002d9: 	leal	(%rcx,%rdi,2), %edi
    000002dc: 	movl	0x24(%rsp), %ecx
    000002e0: 	subl	%r15d, %eax
    000002e3: 	shll	$0x2, %edi
    000002e6: 	subl	%r15d, %eax
    000002e9: 	subl	%ebp, %edi
    000002eb: 	subl	%r15d, %eax
    000002ee: 	subl	%ebp, %edi
    000002f0: 	movzbl	0x30(%rsp), %r15d
    000002f6: 	addb	0x31(%rsp), %r15b
    000002fb: 	addl	%r15d, %eax
    000002fe: 	subl	%ebp, %edi
    00000300: 	subl	%ebp, %edi
    00000302: 	addl	%r8d, %eax
    00000305: 	addl	%edi, %eax
    00000307: 	movl	0x18(%rsp), %edi
    0000030b: 	leal	(%rdi,%rsi,2), %esi
    0000030e: 	movl	0x28(%rsp), %edi
    00000312: 	shll	$0x2, %esi
    00000315: 	subl	%r12d, %esi
    00000318: 	subl	%r12d, %esi
    0000031b: 	subl	%r12d, %esi
    0000031e: 	subl	%r12d, %esi
    00000321: 	addl	%esi, %eax
    00000323: 	movl	0x1c(%rsp), %esi
    00000327: 	leal	(%rsi,%rcx,2), %ecx
    0000032a: 	movl	0x20(%rsp), %esi
    0000032e: 	shll	$0x2, %ecx
    00000331: 	subl	%r11d, %ecx
    00000334: 	leal	(%rsi,%rdx,2), %edx
    00000337: 	subl	%r11d, %ecx
    0000033a: 	shll	$0x2, %edx
    0000033d: 	subl	%r11d, %ecx
    00000340: 	subl	%r10d, %edx
    00000343: 	subl	%r11d, %ecx
    00000346: 	subl	%r10d, %edx
    00000349: 	addl	%ecx, %eax
    0000034b: 	subl	%r10d, %edx
    0000034e: 	movl	(%rsp), %ecx
    00000351: 	subl	%r10d, %edx
    00000354: 	addl	%edx, %eax
    00000356: 	leal	(%rdi,%rcx,2), %edx
    00000359: 	shll	$0x2, %edx
    0000035c: 	subl	%r9d, %edx
    0000035f: 	subl	%r9d, %edx
    00000362: 	subl	%r9d, %edx
    00000365: 	subl	%r9d, %edx
    00000368: 	addb	%al, %dl
    0000036a: 	jne	.Ltmp541 # Offset: 874
    00000370: 	addl	$0x1, 0x2c(%rsp)
    00000375: 	movl	0x2c(%rsp), %eax
    00000379: 	cmpl	0x44(%rsp), %eax
    0000037d: 	jl	.Ltmp542 # Offset: 893
.Ltmp539:
    00000383: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000038a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000391: 	subq	$0x20, %rax
    00000395: 	cmpq	%rax, %rbx
    00000398: 	je	.Ltmp543 # Offset: 920
    0000039e: 	movq	0x50(%rsp), %rax
    000003a3: 	leaq	0x10(%rbx), %rdi
    000003a7: 	movq	%rdi, (%rbx)
    000003aa: 	movq	(%rax), %rbp
    000003ad: 	movq	0x8(%rax), %r12
    000003b1: 	movq	%rbp, %rax
    000003b4: 	addq	%r12, %rax
    000003b7: 	je	.Ltmp544 # Offset: 951
    000003b9: 	testq	%rbp, %rbp
    000003bc: 	je	.Ltmp545 # Offset: 956
.Ltmp544:
    000003c2: 	movq	%r12, 0x60(%rsp)
    000003c7: 	cmpq	$0xf, %r12
    000003cb: 	ja	.Ltmp546 # Offset: 971
    000003d1: 	cmpq	$0x1, %r12
    000003d5: 	jne	.Ltmp547 # Offset: 981
    000003db: 	movzbl	(%rbp), %eax
    000003df: 	movb	%al, 0x10(%rbx)
.Ltmp550:
    000003e2: 	movq	%r12, 0x8(%rbx)
    000003e6: 	movb	$0x0, (%rdi,%r12)
    000003eb: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000003f2: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003f9: 	addq	$0x20, %rax
    000003fd: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000404: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000040b: 	je	.Ltmp548 # Offset: 1035
.Ltmp551:
    00000411: 	movq	-0x20(%rax), %rbp
    00000415: 	callq	clock@PLT # Offset: 1045
    0000041a: 	movq	%rax, end_time(%rip)
    00000421: 	movq	0x68(%rsp), %rdx
    00000426: 	subq	%fs:0x28, %rdx
    0000042f: 	jne	.Ltmp549 # Offset: 1071
    00000435: 	subq	start_time(%rip), %rax
    0000043c: 	pxor	%xmm0, %xmm0
    00000440: 	movq	%rbp, %rdi
    00000443: 	cvtsi2sd	%rax, %xmm0
    00000448: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000450: 	addq	$0x78, %rsp
    00000454: 	popq	%rbx
    00000455: 	popq	%rbp
    00000456: 	popq	%r12
    00000458: 	popq	%r13
    0000045a: 	popq	%r14
    0000045c: 	popq	%r15
    0000045e: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1118
    00000463: 	nopl	(%rax,%rax) # Size: 5
.Ltmp541:
    00000468: 	movq	0x50(%rsp), %rax
    0000046d: 	leaq	DATAat0x4d004(%rip), %rsi
    00000474: 	movl	$0x1, %edi
    00000479: 	movaps	%xmm3, (%rsp)
    0000047d: 	movq	(%rax), %rdx
    00000480: 	xorl	%eax, %eax
    00000482: 	callq	__printf_chk@PLT # Offset: 1154
    00000487: 	addl	$0x1, 0x2c(%rsp)
    0000048c: 	movl	iterations(%rip), %esi
    00000492: 	movl	0x2c(%rsp), %eax
    00000496: 	movl	%esi, 0x44(%rsp)
    0000049a: 	cmpl	%esi, %eax
    0000049c: 	jge	.Ltmp539 # Offset: 1180
    000004a2: 	movq	0x38(%rsp), %rax
    000004a7: 	movdqa	(%rsp), %xmm3
    000004ac: 	pxor	%xmm6, %xmm6
    000004b0: 	movzbl	(%rax), %esi
    000004b3: 	movzbl	0x1(%rax), %edi
    000004b7: 	movq	0x1f30(%rax), %xmm4
    000004bf: 	movq	0x1f31(%rax), %xmm5
    000004c7: 	movb	%sil, 0x43(%rsp)
    000004cc: 	movzbl	0x1f38(%rax), %esi
    000004d3: 	movb	%dil, 0x42(%rsp)
    000004d8: 	movzbl	0x1f39(%rax), %edi
    000004df: 	movb	%sil, 0x12(%rsp)
    000004e4: 	movzbl	0x1f3a(%rax), %esi
    000004eb: 	movb	%dil, 0x32(%rsp)
    000004f0: 	movzbl	0x1f3b(%rax), %edi
    000004f7: 	movb	%sil, 0x33(%rsp)
    000004fc: 	movzbl	0x1f3c(%rax), %esi
    00000503: 	movb	%dil, 0x34(%rsp)
    00000508: 	movzbl	0x1f3d(%rax), %edi
    0000050f: 	movb	%sil, 0x35(%rsp)
    00000514: 	movzbl	0x1f3e(%rax), %esi
    0000051b: 	movzbl	0x1f3f(%rax), %eax
    00000522: 	movb	%dil, 0x36(%rsp)
    00000527: 	movb	%sil, 0x37(%rsp)
    0000052c: 	movb	%al, 0x13(%rsp)
    00000530: 	jmp	.Ltmp542 # Offset: 1328
.Ltmp546:
    00000535: 	movq	%rbx, %rdi
    00000538: 	leaq	0x60(%rsp), %rsi
    0000053d: 	xorl	%edx, %edx
    0000053f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1343
    00000544: 	movq	%rax, (%rbx)
    00000547: 	movq	%rax, %rdi
    0000054a: 	movq	0x60(%rsp), %rax
    0000054f: 	movq	%rax, 0x10(%rbx)
.Ltmp552:
    00000553: 	movq	%r12, %rdx
    00000556: 	movq	%rbp, %rsi
    00000559: 	callq	memcpy@PLT # Offset: 1369
    0000055e: 	movq	0x60(%rsp), %r12
    00000563: 	movq	(%rbx), %rdi
    00000566: 	jmp	.Ltmp550 # Offset: 1382
.Ltmp543:
    0000056b: 	movq	0x50(%rsp), %rsi
    00000570: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000577: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1399
    0000057c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000583: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000058a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000591: 	jne	.Ltmp551 # Offset: 1425
.Ltmp548:
    00000597: 	movq	-0x8(%rdx), %rax
    0000059b: 	addq	$0x200, %rax
    000005a1: 	jmp	.Ltmp551 # Offset: 1441
.Ltmp547:
    000005a6: 	testq	%r12, %r12
    000005a9: 	je	.Ltmp550 # Offset: 1449
    000005af: 	jmp	.Ltmp552 # Offset: 1455
.Ltmp549:
    000005b1: 	callq	__stack_chk_fail@PLT # Offset: 1457
.Ltmp545:
    000005b6: 	leaq	DATAat0x4d018(%rip), %rdi
    000005bd: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1469
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE4Ia14custom_cse_subIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z20test_CSE4_add_inlineIa14custom_cse_addIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z20test_CSE4_add_inlineIa14custom_cse_addIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z20test_CSE4_add_inlineIa14custom_cse_addIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/simple_types_cse.cpp/1
  Number      : 71
  State       : disassembled
  Address     : 0x94b0
  Size        : 0x58a
  MaxSize     : 0x590
  Offset      : 0x94b0
  Section     : .text
  Orc Section : .local.text._Z20test_CSE4_add_inlineIa14custom_cse_addIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB070:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	movl	%esi, %ebx
    0000000c: 	subq	$0x68, %rsp
    00000010: 	movq	%rdi, 0x28(%rsp)
    00000015: 	movq	%rdx, 0x40(%rsp)
    0000001a: 	movq	%fs:0x28, %rax
    00000023: 	movq	%rax, 0x58(%rsp)
    00000028: 	xorl	%eax, %eax
    0000002a: 	callq	clock@PLT # Offset: 42
    0000002f: 	movq	%rax, start_time(%rip)
    00000036: 	movl	iterations(%rip), %eax
    0000003c: 	movl	%eax, 0x34(%rsp)
    00000040: 	testl	%eax, %eax
    00000042: 	jle	.Ltmp553 # Offset: 66
    00000048: 	movq	0x28(%rsp), %rax
    0000004d: 	movd	%ebx, %xmm3
    00000051: 	movl	$0x0, 0x24(%rsp)
    00000059: 	pxor	%xmm6, %xmm6
    0000005d: 	punpcklbw	%xmm3, %xmm3
    00000061: 	movzbl	(%rax), %esi
    00000064: 	movzbl	0x1(%rax), %edi
    00000068: 	punpcklwd	%xmm3, %xmm3
    0000006c: 	movzbl	0x1f39(%rax), %ecx
    00000073: 	pshufd	$0x0, %xmm3, %xmm3
    00000078: 	movq	0x1f30(%rax), %xmm5
    00000080: 	movq	0x1f31(%rax), %xmm4
    00000088: 	movb	%sil, 0x32(%rsp)
    0000008d: 	leaq	0x1f30(%rax), %rsi
    00000094: 	movq	%rsi, 0x38(%rsp)
    00000099: 	movzbl	0x1f38(%rax), %esi
    000000a0: 	movb	%dil, 0x33(%rsp)
    000000a5: 	movzbl	%bl, %edi
    000000a8: 	movw	%di, 0x30(%rsp)
    000000ad: 	movzbl	0x1f3a(%rax), %edi
    000000b4: 	movb	%sil, 0x20(%rsp)
    000000b9: 	movzbl	0x1f3b(%rax), %esi
    000000c0: 	movb	%cl, 0xc(%rsp)
    000000c4: 	movzbl	0x1f3c(%rax), %ecx
    000000cb: 	movb	%dil, 0xa(%rsp)
    000000d0: 	movzbl	0x1f3d(%rax), %edi
    000000d7: 	movb	%sil, 0xd(%rsp)
    000000dc: 	movzbl	0x1f3e(%rax), %esi
    000000e3: 	movzbl	0x1f3f(%rax), %eax
    000000ea: 	movb	%cl, 0xe(%rsp)
    000000ee: 	movb	%dil, 0xf(%rsp)
    000000f3: 	movb	%sil, 0xb(%rsp)
    000000f8: 	movb	%al, 0x21(%rsp)
    000000fc: 	nopl	(%rax) # Size: 4
.Ltmp556:
    00000100: 	movzbl	0x32(%rsp), %edi
    00000105: 	movzbl	0x33(%rsp), %esi
    0000010a: 	pxor	%xmm2, %xmm2
    0000010e: 	movl	%edi, %eax
    00000110: 	addl	%esi, %eax
    00000112: 	addl	%ebx, %eax
    00000114: 	addl	%eax, %eax
    00000116: 	leal	(%rsi,%rax), %edx
    00000119: 	addl	%edi, %eax
    0000011b: 	subl	%esi, %edi
    0000011d: 	movl	%edi, %ecx
    0000011f: 	leal	(%rax,%rax,2), %eax
    00000122: 	addl	%ecx, %eax
    00000124: 	movq	0x38(%rsp), %rcx
    00000129: 	subl	%edx, %eax
    0000012b: 	subl	%edx, %eax
    0000012d: 	subl	%edx, %eax
    0000012f: 	movq	0x28(%rsp), %rdx
    00000134: 	nopl	(%rax) # Size: 4
.Ltmp554:
    00000138: 	movdqu	(%rdx), %xmm7
    0000013c: 	movdqu	0x1(%rdx), %xmm0
    00000141: 	addq	$0x10, %rdx
    00000145: 	movdqu	-0xf(%rdx), %xmm1
    0000014a: 	paddb	%xmm7, %xmm0
    0000014e: 	paddb	%xmm3, %xmm0
    00000152: 	paddb	%xmm0, %xmm0
    00000156: 	paddb	%xmm0, %xmm1
    0000015a: 	paddb	%xmm7, %xmm0
    0000015e: 	paddb	%xmm0, %xmm0
    00000162: 	movdqa	%xmm1, %xmm7
    00000166: 	psubb	%xmm1, %xmm2
    0000016a: 	paddb	%xmm0, %xmm0
    0000016e: 	paddb	%xmm1, %xmm7
    00000172: 	psubb	%xmm1, %xmm0
    00000176: 	psubb	%xmm7, %xmm0
    0000017a: 	paddb	%xmm0, %xmm2
    0000017e: 	cmpq	%rdx, %rcx
    00000181: 	jne	.Ltmp554 # Offset: 385
    00000183: 	movdqa	%xmm2, %xmm0
    00000187: 	movzwl	0x30(%rsp), %edi
    0000018c: 	movzbl	0xa(%rsp), %ecx
    00000191: 	psrldq	$0x8, %xmm0
    00000196: 	movzbl	0xf(%rsp), %r11d
    0000019c: 	movzbl	0x21(%rsp), %r9d
    000001a2: 	paddb	%xmm0, %xmm2
    000001a6: 	movdqa	%xmm4, %xmm0
    000001aa: 	psadbw	%xmm6, %xmm2
    000001ae: 	paddb	%xmm5, %xmm0
    000001b2: 	movl	%r11d, %r10d
    000001b5: 	movd	%xmm2, %edx
    000001b9: 	addl	%edx, %eax
    000001bb: 	movzbl	0xe(%rsp), %edx
    000001c0: 	movb	%al, 0x22(%rsp)
    000001c4: 	movl	%edi, %eax
    000001c6: 	shll	$0x8, %eax
    000001c9: 	orl	%edi, %eax
    000001cb: 	movd	%eax, %xmm2
    000001cf: 	pshuflw	$0x0, %xmm2, %xmm1
    000001d4: 	paddb	%xmm1, %xmm0
    000001d8: 	paddb	%xmm0, %xmm0
    000001dc: 	movdqa	%xmm0, %xmm1
    000001e0: 	paddb	%xmm4, %xmm0
    000001e4: 	paddb	%xmm5, %xmm1
    000001e8: 	paddb	%xmm0, %xmm0
    000001ec: 	paddb	%xmm1, %xmm1
    000001f0: 	paddb	%xmm1, %xmm1
    000001f4: 	psubb	%xmm0, %xmm1
    000001f8: 	psubb	%xmm0, %xmm1
    000001fc: 	pxor	%xmm0, %xmm0
    00000200: 	movdqa	%xmm1, %xmm2
    00000204: 	psadbw	%xmm0, %xmm2
    00000208: 	movq	%xmm2, %rax
    0000020d: 	movq	%xmm2, 0x48(%rsp)
    00000213: 	movb	%al, 0x23(%rsp)
    00000217: 	movzbl	0x20(%rsp), %eax
    0000021c: 	leal	(%rax,%rbx), %r8d
    00000220: 	movzbl	0xc(%rsp), %eax
    00000225: 	addl	%eax, %r8d
    00000228: 	movl	%eax, %edi
    0000022a: 	addl	%r8d, %r8d
    0000022d: 	addl	%ecx, %edi
    0000022f: 	leal	(%rax,%r8), %r15d
    00000233: 	movzbl	0xd(%rsp), %eax
    00000238: 	addl	%ebx, %edi
    0000023a: 	addb	0x20(%rsp), %r8b
    0000023f: 	addl	%edi, %edi
    00000241: 	shll	$0x2, %r8d
    00000245: 	movl	%eax, %esi
    00000247: 	leal	(%rdi,%rcx), %r14d
    0000024b: 	subl	%r15d, %r8d
    0000024e: 	addl	%ecx, %esi
    00000250: 	movl	%eax, %ecx
    00000252: 	subl	%r15d, %r8d
    00000255: 	addl	%edx, %ecx
    00000257: 	addl	%ebx, %esi
    00000259: 	subl	%r15d, %r8d
    0000025c: 	addl	%ebx, %ecx
    0000025e: 	addl	%esi, %esi
    00000260: 	subl	%r15d, %r8d
    00000263: 	addl	%ecx, %ecx
    00000265: 	leal	(%rsi,%rax), %r13d
    00000269: 	leal	(%rdx,%rcx), %r12d
    0000026d: 	addl	%r11d, %edx
    00000270: 	addl	%ebx, %edx
    00000272: 	addl	%edx, %edx
    00000274: 	leal	(%r11,%rdx), %ebp
    00000278: 	movzbl	0xb(%rsp), %r11d
    0000027e: 	addl	%r11d, %r10d
    00000281: 	movl	%r10d, %eax
    00000284: 	movl	%r11d, %r10d
    00000287: 	addl	%ebx, %eax
    00000289: 	addl	%r10d, %r9d
    0000028c: 	addl	%eax, %eax
    0000028e: 	leal	(%r10,%rax), %r11d
    00000292: 	movl	%r9d, %r10d
    00000295: 	movzbl	0x23(%rsp), %r9d
    0000029b: 	addb	0x22(%rsp), %r9b
    000002a0: 	addl	%ebx, %r10d
    000002a3: 	addl	%r8d, %r9d
    000002a6: 	addl	%r10d, %r10d
    000002a9: 	movb	%r10b, 0x10(%rsp)
    000002ae: 	addb	0x21(%rsp), %r10b
    000002b3: 	addb	0xc(%rsp), %dil
    000002b8: 	addb	0xa(%rsp), %sil
    000002bd: 	shll	$0x2, %edi
    000002c0: 	shll	$0x2, %esi
    000002c3: 	addb	0xd(%rsp), %cl
    000002c7: 	addb	0xe(%rsp), %dl
    000002cb: 	subl	%r14d, %edi
    000002ce: 	subl	%r13d, %esi
    000002d1: 	shll	$0x2, %ecx
    000002d4: 	addb	0xf(%rsp), %al
    000002d8: 	subl	%r14d, %edi
    000002db: 	subl	%r13d, %esi
    000002de: 	subl	%r12d, %ecx
    000002e1: 	shll	$0x2, %edx
    000002e4: 	subl	%r14d, %edi
    000002e7: 	subl	%r13d, %esi
    000002ea: 	subl	%r12d, %ecx
    000002ed: 	subl	%ebp, %edx
    000002ef: 	subl	%r14d, %edi
    000002f2: 	subl	%r13d, %esi
    000002f5: 	subl	%r12d, %ecx
    000002f8: 	subl	%ebp, %edx
    000002fa: 	addl	%r9d, %edi
    000002fd: 	shll	$0x2, %eax
    00000300: 	subl	%r12d, %ecx
    00000303: 	subl	%ebp, %edx
    00000305: 	addl	%edi, %esi
    00000307: 	subl	%r11d, %eax
    0000030a: 	subl	%ebp, %edx
    0000030c: 	addl	%esi, %ecx
    0000030e: 	subl	%r11d, %eax
    00000311: 	addl	%ecx, %edx
    00000313: 	subl	%r11d, %eax
    00000316: 	subl	%r11d, %eax
    00000319: 	addl	%edx, %eax
    0000031b: 	movzbl	0x10(%rsp), %edx
    00000320: 	addb	0xb(%rsp), %dl
    00000324: 	shll	$0x2, %edx
    00000327: 	subl	%r10d, %edx
    0000032a: 	subl	%r10d, %edx
    0000032d: 	subl	%r10d, %edx
    00000330: 	subl	%r10d, %edx
    00000333: 	addb	%al, %dl
    00000335: 	jne	.Ltmp555 # Offset: 821
    0000033b: 	addl	$0x1, 0x24(%rsp)
    00000340: 	movl	0x24(%rsp), %eax
    00000344: 	cmpl	0x34(%rsp), %eax
    00000348: 	jl	.Ltmp556 # Offset: 840
.Ltmp553:
    0000034e: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000355: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000035c: 	subq	$0x20, %rax
    00000360: 	cmpq	%rax, %rbx
    00000363: 	je	.Ltmp557 # Offset: 867
    00000369: 	movq	0x40(%rsp), %rax
    0000036e: 	leaq	0x10(%rbx), %rdi
    00000372: 	movq	%rdi, (%rbx)
    00000375: 	movq	(%rax), %rbp
    00000378: 	movq	0x8(%rax), %r12
    0000037c: 	movq	%rbp, %rax
    0000037f: 	addq	%r12, %rax
    00000382: 	je	.Ltmp558 # Offset: 898
    00000384: 	testq	%rbp, %rbp
    00000387: 	je	.Ltmp559 # Offset: 903
.Ltmp558:
    0000038d: 	movq	%r12, 0x50(%rsp)
    00000392: 	cmpq	$0xf, %r12
    00000396: 	ja	.Ltmp560 # Offset: 918
    0000039c: 	cmpq	$0x1, %r12
    000003a0: 	jne	.Ltmp561 # Offset: 928
    000003a6: 	movzbl	(%rbp), %eax
    000003aa: 	movb	%al, 0x10(%rbx)
.Ltmp564:
    000003ad: 	movq	%r12, 0x8(%rbx)
    000003b1: 	movb	$0x0, (%rdi,%r12)
    000003b6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000003bd: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003c4: 	addq	$0x20, %rax
    000003c8: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000003cf: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000003d6: 	je	.Ltmp562 # Offset: 982
.Ltmp565:
    000003dc: 	movq	-0x20(%rax), %rbp
    000003e0: 	callq	clock@PLT # Offset: 992
    000003e5: 	movq	%rax, end_time(%rip)
    000003ec: 	movq	0x58(%rsp), %rdx
    000003f1: 	subq	%fs:0x28, %rdx
    000003fa: 	jne	.Ltmp563 # Offset: 1018
    00000400: 	subq	start_time(%rip), %rax
    00000407: 	pxor	%xmm0, %xmm0
    0000040b: 	movq	%rbp, %rdi
    0000040e: 	cvtsi2sd	%rax, %xmm0
    00000413: 	divsd	DATAat0x4d640(%rip), %xmm0
    0000041b: 	addq	$0x68, %rsp
    0000041f: 	popq	%rbx
    00000420: 	popq	%rbp
    00000421: 	popq	%r12
    00000423: 	popq	%r13
    00000425: 	popq	%r14
    00000427: 	popq	%r15
    00000429: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1065
    0000042e: 	nop # Size: 2
.Ltmp555:
    00000430: 	movq	0x40(%rsp), %rax
    00000435: 	movl	$0x1, %edi
    0000043a: 	movaps	%xmm3, 0x10(%rsp)
    0000043f: 	leaq	DATAat0x4d004(%rip), %rsi
    00000446: 	movq	(%rax), %rdx
    00000449: 	xorl	%eax, %eax
    0000044b: 	callq	__printf_chk@PLT # Offset: 1099
    00000450: 	addl	$0x1, 0x24(%rsp)
    00000455: 	movl	iterations(%rip), %edi
    0000045b: 	movl	0x24(%rsp), %eax
    0000045f: 	movl	%edi, 0x34(%rsp)
    00000463: 	cmpl	%edi, %eax
    00000465: 	jge	.Ltmp553 # Offset: 1125
    0000046b: 	movq	0x28(%rsp), %rax
    00000470: 	movdqa	0x10(%rsp), %xmm3
    00000476: 	pxor	%xmm6, %xmm6
    0000047a: 	movzbl	(%rax), %esi
    0000047d: 	movzbl	0x1f3a(%rax), %edi
    00000484: 	movq	0x1f30(%rax), %xmm5
    0000048c: 	movzbl	0x1f3b(%rax), %ecx
    00000493: 	movq	0x1f31(%rax), %xmm4
    0000049b: 	movb	%sil, 0x32(%rsp)
    000004a0: 	movzbl	0x1(%rax), %esi
    000004a4: 	movb	%dil, 0xa(%rsp)
    000004a9: 	movb	%cl, 0xd(%rsp)
    000004ad: 	movzbl	0x1f3d(%rax), %edi
    000004b4: 	movb	%sil, 0x33(%rsp)
    000004b9: 	movzbl	0x1f38(%rax), %esi
    000004c0: 	movzbl	0x1f3e(%rax), %ecx
    000004c7: 	movb	%dil, 0xf(%rsp)
    000004cc: 	movb	%sil, 0x20(%rsp)
    000004d1: 	movzbl	0x1f39(%rax), %esi
    000004d8: 	movb	%cl, 0xb(%rsp)
    000004dc: 	movb	%sil, 0xc(%rsp)
    000004e1: 	movzbl	0x1f3c(%rax), %esi
    000004e8: 	movzbl	0x1f3f(%rax), %eax
    000004ef: 	movb	%sil, 0xe(%rsp)
    000004f4: 	movb	%al, 0x21(%rsp)
    000004f8: 	jmp	.Ltmp556 # Offset: 1272
.Ltmp560:
    000004fd: 	movq	%rbx, %rdi
    00000500: 	leaq	0x50(%rsp), %rsi
    00000505: 	xorl	%edx, %edx
    00000507: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1287
    0000050c: 	movq	%rax, (%rbx)
    0000050f: 	movq	%rax, %rdi
    00000512: 	movq	0x50(%rsp), %rax
    00000517: 	movq	%rax, 0x10(%rbx)
.Ltmp566:
    0000051b: 	movq	%r12, %rdx
    0000051e: 	movq	%rbp, %rsi
    00000521: 	callq	memcpy@PLT # Offset: 1313
    00000526: 	movq	0x50(%rsp), %r12
    0000052b: 	movq	(%rbx), %rdi
    0000052e: 	jmp	.Ltmp564 # Offset: 1326
.Ltmp557:
    00000533: 	movq	0x40(%rsp), %rsi
    00000538: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000053f: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1343
    00000544: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000054b: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000552: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000559: 	jne	.Ltmp565 # Offset: 1369
.Ltmp562:
    0000055f: 	movq	-0x8(%rdx), %rax
    00000563: 	addq	$0x200, %rax
    00000569: 	jmp	.Ltmp565 # Offset: 1385
.Ltmp561:
    0000056e: 	testq	%r12, %r12
    00000571: 	je	.Ltmp564 # Offset: 1393
    00000577: 	jmp	.Ltmp566 # Offset: 1399
.Ltmp563:
    00000579: 	callq	__stack_chk_fail@PLT # Offset: 1401
.Ltmp559:
    0000057e: 	leaq	DATAat0x4d018(%rip), %rdi
    00000585: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1413
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_CSE4_add_inlineIa14custom_cse_addIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z9test_CSE4Ih14custom_cse_mulIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 72
  State       : disassembled
  Address     : 0x9a40
  Size        : 0x687
  MaxSize     : 0x690
  Offset      : 0x9a40
  Section     : .text
  Orc Section : .local.text._Z9test_CSE4Ih14custom_cse_mulIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB071:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movl	%esi, %r12d
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdi, %rbx
    00000016: 	subq	$0x48, %rsp
    0000001a: 	movq	%rcx, 0x28(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x38(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r11d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r11d, %r11d
    00000045: 	jle	.Ltmp567 # Offset: 69
    0000004b: 	leal	-0x1(%r12), %esi
    00000050: 	leal	-0x2(%r12), %eax
    00000055: 	movd	%ebp, %xmm6
    00000059: 	xorl	%r14d, %r14d
    0000005c: 	movl	%eax, 0x8(%rsp)
    00000060: 	movl	%esi, %eax
    00000062: 	movzbl	(%rbx), %r9d
    00000066: 	punpcklbw	%xmm6, %xmm6
    0000006a: 	shrl	$0x4, %eax
    0000006d: 	movl	%esi, 0x20(%rsp)
    00000071: 	andl	$-0x10, %esi
    00000074: 	movzbl	0x1(%rbx), %r8d
    00000079: 	subl	$0x1, %eax
    0000007c: 	movl	%esi, 0xc(%rsp)
    00000080: 	movdqa	DATAat0x4d5f0(%rip), %xmm4
    00000088: 	shlq	$0x4, %rax
    0000008c: 	leaq	0x10(%rbx,%rax), %r13
    00000091: 	leal	0x1(%rsi), %eax
    00000094: 	movl	%eax, 0x24(%rsp)
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp572:
    000000a0: 	movl	%r9d, %eax
    000000a3: 	movzbl	%r8b, %edx
    000000a7: 	imull	%r8d, %eax
    000000ab: 	addl	%ebp, %eax
    000000ad: 	movzbl	%al, %eax
    000000b0: 	leal	(%rdx,%rax,2), %ecx
    000000b3: 	movzbl	%r9b, %edx
    000000b7: 	leal	(%rdx,%rax,2), %eax
    000000ba: 	leal	(%rax,%rax,2), %edx
    000000bd: 	movl	%r9d, %eax
    000000c0: 	subl	%r8d, %eax
    000000c3: 	addl	%eax, %edx
    000000c5: 	subl	%ecx, %edx
    000000c7: 	subl	%ecx, %edx
    000000c9: 	subl	%ecx, %edx
    000000cb: 	cmpl	$0x1, %r12d
    000000cf: 	jle	.Ltmp568 # Offset: 207
    000000d5: 	cmpl	$0xe, 0x8(%rsp)
    000000da: 	jbe	.Ltmp569 # Offset: 218
    000000e0: 	movdqa	%xmm6, %xmm5
    000000e4: 	movq	%rbx, %rax
    000000e7: 	pxor	%xmm3, %xmm3
    000000eb: 	punpcklwd	%xmm6, %xmm5
    000000ef: 	pshufd	$0x0, %xmm5, %xmm5
    000000f4: 	nopl	(%rax) # Size: 4
.Ltmp570:
    000000f8: 	movdqu	(%rax), %xmm0
    000000fc: 	movdqu	0x1(%rax), %xmm1
    00000101: 	addq	$0x10, %rax
    00000105: 	movdqa	%xmm0, %xmm2
    00000109: 	movdqa	%xmm0, %xmm7
    0000010d: 	movdqa	%xmm1, %xmm9
    00000112: 	movdqa	%xmm1, %xmm8
    00000117: 	punpcklbw	%xmm0, %xmm2
    0000011b: 	punpckhbw	%xmm0, %xmm7
    0000011f: 	punpcklbw	%xmm1, %xmm9
    00000124: 	punpckhbw	%xmm1, %xmm8
    00000129: 	pmullw	%xmm9, %xmm2
    0000012e: 	pmullw	%xmm8, %xmm7
    00000133: 	pand	%xmm4, %xmm2
    00000137: 	pand	%xmm4, %xmm7
    0000013b: 	packuswb	%xmm7, %xmm2
    0000013f: 	paddb	%xmm5, %xmm2
    00000143: 	paddb	%xmm2, %xmm1
    00000147: 	paddb	%xmm2, %xmm0
    0000014b: 	paddb	%xmm2, %xmm1
    0000014f: 	paddb	%xmm2, %xmm0
    00000153: 	paddb	%xmm0, %xmm0
    00000157: 	movdqa	%xmm1, %xmm2
    0000015b: 	paddb	%xmm0, %xmm0
    0000015f: 	paddb	%xmm1, %xmm2
    00000163: 	psubb	%xmm1, %xmm0
    00000167: 	paddb	%xmm2, %xmm1
    0000016b: 	psubb	%xmm1, %xmm0
    0000016f: 	paddb	%xmm0, %xmm3
    00000173: 	cmpq	%rax, %r13
    00000176: 	jne	.Ltmp570 # Offset: 374
    00000178: 	movdqa	%xmm3, %xmm0
    0000017c: 	movl	0x20(%rsp), %esi
    00000180: 	psrldq	$0x8, %xmm0
    00000185: 	paddb	%xmm0, %xmm3
    00000189: 	pxor	%xmm0, %xmm0
    0000018d: 	psadbw	%xmm0, %xmm3
    00000191: 	movd	%xmm3, %eax
    00000195: 	addl	%eax, %edx
    00000197: 	cmpl	%esi, 0xc(%rsp)
    0000019b: 	je	.Ltmp568 # Offset: 411
    000001a1: 	movl	0x24(%rsp), %esi
.Ltmp580:
    000001a5: 	movslq	%esi, %rax
    000001a8: 	addq	%rbx, %rax
    000001ab: 	movzbl	-0x1(%rax), %r10d
    000001b0: 	movzbl	(%rax), %r15d
    000001b4: 	movl	%r10d, %eax
    000001b7: 	imull	%r15d, %eax
    000001bb: 	leal	(%rax,%rbp), %ecx
    000001be: 	movzbl	%cl, %ecx
    000001c1: 	leal	(%r15,%rcx,2), %eax
    000001c5: 	leal	(%r10,%rcx,2), %ecx
    000001c9: 	leal	(%rdx,%rcx,4), %ecx
    000001cc: 	subl	%eax, %ecx
    000001ce: 	subl	%eax, %ecx
    000001d0: 	addl	%eax, %eax
    000001d2: 	movl	%ecx, %edx
    000001d4: 	subl	%eax, %edx
    000001d6: 	leal	0x1(%rsi), %eax
    000001d9: 	cmpl	%eax, %r12d
    000001dc: 	jle	.Ltmp568 # Offset: 476
    000001e2: 	cltq
    000001e4: 	movzbl	(%rbx,%rax), %r10d
    000001e9: 	movl	%r15d, %eax
    000001ec: 	imull	%r10d, %eax
    000001f0: 	addl	%ebp, %eax
    000001f2: 	movzbl	%al, %eax
    000001f5: 	leal	(%r10,%rax,2), %edi
    000001f9: 	leal	(%r15,%rax,2), %eax
    000001fd: 	shll	$0x2, %eax
    00000200: 	subl	%edi, %eax
    00000202: 	subl	%edi, %eax
    00000204: 	addl	%edi, %edi
    00000206: 	subl	%edi, %eax
    00000208: 	addl	%eax, %edx
    0000020a: 	leal	0x2(%rsi), %eax
    0000020d: 	cmpl	%eax, %r12d
    00000210: 	jle	.Ltmp568 # Offset: 528
    00000216: 	cltq
    00000218: 	movzbl	(%rbx,%rax), %r15d
    0000021d: 	movl	%r10d, %eax
    00000220: 	imull	%r15d, %eax
    00000224: 	addl	%ebp, %eax
    00000226: 	movzbl	%al, %eax
    00000229: 	leal	(%r15,%rax,2), %ecx
    0000022d: 	leal	(%r10,%rax,2), %eax
    00000231: 	shll	$0x2, %eax
    00000234: 	subl	%ecx, %eax
    00000236: 	subl	%ecx, %eax
    00000238: 	addl	%ecx, %ecx
    0000023a: 	subl	%ecx, %eax
    0000023c: 	addl	%eax, %edx
    0000023e: 	leal	0x3(%rsi), %eax
    00000241: 	cmpl	%eax, %r12d
    00000244: 	jle	.Ltmp568 # Offset: 580
    0000024a: 	cltq
    0000024c: 	movzbl	(%rbx,%rax), %r10d
    00000251: 	movl	%r15d, %eax
    00000254: 	imull	%r10d, %eax
    00000258: 	addl	%ebp, %eax
    0000025a: 	movzbl	%al, %eax
    0000025d: 	leal	(%r10,%rax,2), %edi
    00000261: 	leal	(%r15,%rax,2), %eax
    00000265: 	shll	$0x2, %eax
    00000268: 	subl	%edi, %eax
    0000026a: 	subl	%edi, %eax
    0000026c: 	addl	%edi, %edi
    0000026e: 	subl	%edi, %eax
    00000270: 	addl	%eax, %edx
    00000272: 	leal	0x4(%rsi), %eax
    00000275: 	cmpl	%eax, %r12d
    00000278: 	jle	.Ltmp568 # Offset: 632
    0000027e: 	cltq
    00000280: 	movzbl	(%rbx,%rax), %r15d
    00000285: 	movl	%r10d, %eax
    00000288: 	imull	%r15d, %eax
    0000028c: 	addl	%ebp, %eax
    0000028e: 	movzbl	%al, %eax
    00000291: 	leal	(%r15,%rax,2), %ecx
    00000295: 	leal	(%r10,%rax,2), %eax
    00000299: 	shll	$0x2, %eax
    0000029c: 	subl	%ecx, %eax
    0000029e: 	subl	%ecx, %eax
    000002a0: 	addl	%ecx, %ecx
    000002a2: 	subl	%ecx, %eax
    000002a4: 	addl	%eax, %edx
    000002a6: 	leal	0x5(%rsi), %eax
    000002a9: 	cmpl	%eax, %r12d
    000002ac: 	jle	.Ltmp568 # Offset: 684
    000002b2: 	cltq
    000002b4: 	movzbl	(%rbx,%rax), %r10d
    000002b9: 	movl	%r15d, %eax
    000002bc: 	imull	%r10d, %eax
    000002c0: 	addl	%ebp, %eax
    000002c2: 	movzbl	%al, %eax
    000002c5: 	leal	(%r10,%rax,2), %edi
    000002c9: 	leal	(%r15,%rax,2), %eax
    000002cd: 	shll	$0x2, %eax
    000002d0: 	subl	%edi, %eax
    000002d2: 	subl	%edi, %eax
    000002d4: 	addl	%edi, %edi
    000002d6: 	subl	%edi, %eax
    000002d8: 	addl	%eax, %edx
    000002da: 	leal	0x6(%rsi), %eax
    000002dd: 	cmpl	%eax, %r12d
    000002e0: 	jle	.Ltmp568 # Offset: 736
    000002e6: 	cltq
    000002e8: 	movzbl	(%rbx,%rax), %r15d
    000002ed: 	movl	%r10d, %eax
    000002f0: 	imull	%r15d, %eax
    000002f4: 	addl	%ebp, %eax
    000002f6: 	movzbl	%al, %eax
    000002f9: 	leal	(%r15,%rax,2), %ecx
    000002fd: 	leal	(%r10,%rax,2), %eax
    00000301: 	shll	$0x2, %eax
    00000304: 	subl	%ecx, %eax
    00000306: 	subl	%ecx, %eax
    00000308: 	addl	%ecx, %ecx
    0000030a: 	subl	%ecx, %eax
    0000030c: 	addl	%eax, %edx
    0000030e: 	leal	0x7(%rsi), %eax
    00000311: 	cmpl	%eax, %r12d
    00000314: 	jle	.Ltmp568 # Offset: 788
    0000031a: 	cltq
    0000031c: 	movzbl	(%rbx,%rax), %r10d
    00000321: 	movl	%r15d, %eax
    00000324: 	imull	%r10d, %eax
    00000328: 	addl	%ebp, %eax
    0000032a: 	movzbl	%al, %eax
    0000032d: 	leal	(%r10,%rax,2), %edi
    00000331: 	leal	(%r15,%rax,2), %eax
    00000335: 	shll	$0x2, %eax
    00000338: 	subl	%edi, %eax
    0000033a: 	subl	%edi, %eax
    0000033c: 	addl	%edi, %edi
    0000033e: 	subl	%edi, %eax
    00000340: 	addl	%eax, %edx
    00000342: 	leal	0x8(%rsi), %eax
    00000345: 	cmpl	%eax, %r12d
    00000348: 	jle	.Ltmp568 # Offset: 840
    0000034e: 	cltq
    00000350: 	movzbl	(%rbx,%rax), %r15d
    00000355: 	movl	%r10d, %eax
    00000358: 	imull	%r15d, %eax
    0000035c: 	addl	%ebp, %eax
    0000035e: 	movzbl	%al, %eax
    00000361: 	leal	(%r15,%rax,2), %ecx
    00000365: 	leal	(%r10,%rax,2), %eax
    00000369: 	shll	$0x2, %eax
    0000036c: 	subl	%ecx, %eax
    0000036e: 	subl	%ecx, %eax
    00000370: 	addl	%ecx, %ecx
    00000372: 	subl	%ecx, %eax
    00000374: 	addl	%eax, %edx
    00000376: 	leal	0x9(%rsi), %eax
    00000379: 	cmpl	%eax, %r12d
    0000037c: 	jle	.Ltmp568 # Offset: 892
    00000382: 	cltq
    00000384: 	movzbl	(%rbx,%rax), %r10d
    00000389: 	movl	%r15d, %eax
    0000038c: 	imull	%r10d, %eax
    00000390: 	addl	%ebp, %eax
    00000392: 	movzbl	%al, %eax
    00000395: 	leal	(%r10,%rax,2), %edi
    00000399: 	leal	(%r15,%rax,2), %eax
    0000039d: 	shll	$0x2, %eax
    000003a0: 	subl	%edi, %eax
    000003a2: 	subl	%edi, %eax
    000003a4: 	addl	%edi, %edi
    000003a6: 	subl	%edi, %eax
    000003a8: 	addl	%eax, %edx
    000003aa: 	leal	0xa(%rsi), %eax
    000003ad: 	cmpl	%eax, %r12d
    000003b0: 	jle	.Ltmp568 # Offset: 944
    000003b6: 	cltq
    000003b8: 	movzbl	(%rbx,%rax), %r15d
    000003bd: 	movl	%r10d, %eax
    000003c0: 	imull	%r15d, %eax
    000003c4: 	addl	%ebp, %eax
    000003c6: 	movzbl	%al, %eax
    000003c9: 	leal	(%r15,%rax,2), %ecx
    000003cd: 	leal	(%r10,%rax,2), %eax
    000003d1: 	shll	$0x2, %eax
    000003d4: 	subl	%ecx, %eax
    000003d6: 	subl	%ecx, %eax
    000003d8: 	addl	%ecx, %ecx
    000003da: 	subl	%ecx, %eax
    000003dc: 	addl	%eax, %edx
    000003de: 	leal	0xb(%rsi), %eax
    000003e1: 	cmpl	%eax, %r12d
    000003e4: 	jle	.Ltmp568 # Offset: 996
    000003ea: 	cltq
    000003ec: 	movzbl	(%rbx,%rax), %r10d
    000003f1: 	movl	%r15d, %eax
    000003f4: 	imull	%r10d, %eax
    000003f8: 	addl	%ebp, %eax
    000003fa: 	movzbl	%al, %eax
    000003fd: 	leal	(%r10,%rax,2), %edi
    00000401: 	leal	(%r15,%rax,2), %eax
    00000405: 	shll	$0x2, %eax
    00000408: 	subl	%edi, %eax
    0000040a: 	subl	%edi, %eax
    0000040c: 	addl	%edi, %edi
    0000040e: 	subl	%edi, %eax
    00000410: 	addl	%eax, %edx
    00000412: 	leal	0xc(%rsi), %eax
    00000415: 	cmpl	%eax, %r12d
    00000418: 	jle	.Ltmp568 # Offset: 1048
    0000041e: 	cltq
    00000420: 	movzbl	(%rbx,%rax), %r15d
    00000425: 	movl	%r10d, %eax
    00000428: 	imull	%r15d, %eax
    0000042c: 	addl	%ebp, %eax
    0000042e: 	movzbl	%al, %eax
    00000431: 	leal	(%r15,%rax,2), %ecx
    00000435: 	leal	(%r10,%rax,2), %eax
    00000439: 	shll	$0x2, %eax
    0000043c: 	subl	%ecx, %eax
    0000043e: 	subl	%ecx, %eax
    00000440: 	addl	%ecx, %ecx
    00000442: 	subl	%ecx, %eax
    00000444: 	addl	%eax, %edx
    00000446: 	leal	0xd(%rsi), %eax
    00000449: 	cmpl	%eax, %r12d
    0000044c: 	jle	.Ltmp568 # Offset: 1100
    0000044e: 	cltq
    00000450: 	addl	$0xe, %esi
    00000453: 	movzbl	(%rbx,%rax), %r10d
    00000458: 	movl	%r15d, %eax
    0000045b: 	imull	%r10d, %eax
    0000045f: 	addl	%ebp, %eax
    00000461: 	movzbl	%al, %eax
    00000464: 	leal	(%r10,%rax,2), %edi
    00000468: 	leal	(%r15,%rax,2), %eax
    0000046c: 	shll	$0x2, %eax
    0000046f: 	subl	%edi, %eax
    00000471: 	subl	%edi, %eax
    00000473: 	addl	%edi, %edi
    00000475: 	subl	%edi, %eax
    00000477: 	addl	%eax, %edx
    00000479: 	cmpl	%esi, %r12d
    0000047c: 	jle	.Ltmp568 # Offset: 1148
    0000047e: 	movslq	%esi, %rsi
    00000481: 	movl	%r10d, %eax
    00000484: 	movzbl	(%rbx,%rsi), %esi
    00000488: 	imull	%esi, %eax
    0000048b: 	addl	%ebp, %eax
    0000048d: 	movzbl	%al, %eax
    00000490: 	leal	(%rsi,%rax,2), %ecx
    00000493: 	leal	(%r10,%rax,2), %eax
    00000497: 	shll	$0x2, %eax
    0000049a: 	subl	%ecx, %eax
    0000049c: 	subl	%ecx, %eax
    0000049e: 	addl	%ecx, %ecx
    000004a0: 	subl	%ecx, %eax
    000004a2: 	addl	%eax, %edx
    000004a4: 	nopl	(%rax) # Size: 4
.Ltmp568:
    000004a8: 	testb	%dl, %dl
    000004aa: 	jne	.Ltmp571 # Offset: 1194
    000004b0: 	addl	$0x1, %r14d
    000004b4: 	cmpl	%r11d, %r14d
    000004b7: 	jl	.Ltmp572 # Offset: 1207
.Ltmp567:
    000004bd: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000004c4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000004cb: 	subq	$0x20, %rax
    000004cf: 	cmpq	%rax, %rbx
    000004d2: 	je	.Ltmp573 # Offset: 1234
    000004d8: 	movq	0x28(%rsp), %rax
    000004dd: 	leaq	0x10(%rbx), %rdi
    000004e1: 	movq	%rdi, (%rbx)
    000004e4: 	movq	(%rax), %rbp
    000004e7: 	movq	0x8(%rax), %r12
    000004eb: 	movq	%rbp, %rax
    000004ee: 	addq	%r12, %rax
    000004f1: 	je	.Ltmp574 # Offset: 1265
    000004f3: 	testq	%rbp, %rbp
    000004f6: 	je	.Ltmp575 # Offset: 1270
.Ltmp574:
    000004fc: 	movq	%r12, 0x30(%rsp)
    00000501: 	cmpq	$0xf, %r12
    00000505: 	ja	.Ltmp576 # Offset: 1285
    0000050b: 	cmpq	$0x1, %r12
    0000050f: 	jne	.Ltmp577 # Offset: 1295
    00000515: 	movzbl	(%rbp), %eax
    00000519: 	movb	%al, 0x10(%rbx)
.Ltmp581:
    0000051c: 	movq	%r12, 0x8(%rbx)
    00000520: 	movb	$0x0, (%rdi,%r12)
    00000525: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000052c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000533: 	addq	$0x20, %rax
    00000537: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000053e: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000545: 	je	.Ltmp578 # Offset: 1349
.Ltmp582:
    0000054b: 	movq	-0x20(%rax), %rbp
    0000054f: 	callq	clock@PLT # Offset: 1359
    00000554: 	movq	%rax, end_time(%rip)
    0000055b: 	movq	0x38(%rsp), %rdx
    00000560: 	subq	%fs:0x28, %rdx
    00000569: 	jne	.Ltmp579 # Offset: 1385
    0000056f: 	subq	start_time(%rip), %rax
    00000576: 	pxor	%xmm0, %xmm0
    0000057a: 	movq	%rbp, %rdi
    0000057d: 	cvtsi2sd	%rax, %xmm0
    00000582: 	divsd	DATAat0x4d640(%rip), %xmm0
    0000058a: 	addq	$0x48, %rsp
    0000058e: 	popq	%rbx
    0000058f: 	popq	%rbp
    00000590: 	popq	%r12
    00000592: 	popq	%r13
    00000594: 	popq	%r14
    00000596: 	popq	%r15
    00000598: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1432
    0000059d: 	nopl	(%rax) # Size: 3
.Ltmp571:
    000005a0: 	movq	0x28(%rsp), %rax
    000005a5: 	leaq	DATAat0x4d004(%rip), %rsi
    000005ac: 	movl	$0x1, %edi
    000005b1: 	movaps	%xmm6, 0x10(%rsp)
    000005b6: 	addl	$0x1, %r14d
    000005ba: 	movq	(%rax), %rdx
    000005bd: 	xorl	%eax, %eax
    000005bf: 	callq	__printf_chk@PLT # Offset: 1471
    000005c4: 	movl	iterations(%rip), %r11d
    000005cb: 	cmpl	%r11d, %r14d
    000005ce: 	jge	.Ltmp567 # Offset: 1486
    000005d4: 	movzbl	(%rbx), %r9d
    000005d8: 	movzbl	0x1(%rbx), %r8d
    000005dd: 	movdqa	0x10(%rsp), %xmm6
    000005e3: 	movdqa	DATAat0x4d5f0(%rip), %xmm4
    000005eb: 	jmp	.Ltmp572 # Offset: 1515
.Ltmp569:
    000005f0: 	movl	$0x1, %esi
    000005f5: 	jmp	.Ltmp580 # Offset: 1525
.Ltmp576:
    000005fa: 	movq	%rbx, %rdi
    000005fd: 	leaq	0x30(%rsp), %rsi
    00000602: 	xorl	%edx, %edx
    00000604: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1540
    00000609: 	movq	%rax, (%rbx)
    0000060c: 	movq	%rax, %rdi
    0000060f: 	movq	0x30(%rsp), %rax
    00000614: 	movq	%rax, 0x10(%rbx)
.Ltmp583:
    00000618: 	movq	%r12, %rdx
    0000061b: 	movq	%rbp, %rsi
    0000061e: 	callq	memcpy@PLT # Offset: 1566
    00000623: 	movq	0x30(%rsp), %r12
    00000628: 	movq	(%rbx), %rdi
    0000062b: 	jmp	.Ltmp581 # Offset: 1579
.Ltmp573:
    00000630: 	movq	0x28(%rsp), %rsi
    00000635: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000063c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1596
    00000641: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000648: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000064f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000656: 	jne	.Ltmp582 # Offset: 1622
.Ltmp578:
    0000065c: 	movq	-0x8(%rdx), %rax
    00000660: 	addq	$0x200, %rax
    00000666: 	jmp	.Ltmp582 # Offset: 1638
.Ltmp577:
    0000066b: 	testq	%r12, %r12
    0000066e: 	je	.Ltmp581 # Offset: 1646
    00000674: 	jmp	.Ltmp583 # Offset: 1652
.Ltmp579:
    00000676: 	callq	__stack_chk_fail@PLT # Offset: 1654
.Ltmp575:
    0000067b: 	leaq	DATAat0x4d018(%rip), %rdi
    00000682: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1666
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE4Ih14custom_cse_mulIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSE4Ih14custom_cse_divIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 73
  State       : disassembled
  Address     : 0xa0d0
  Size        : 0x2a4
  MaxSize     : 0x2b0
  Offset      : 0xa0d0
  Section     : .text
  Orc Section : .local.text._Z9test_CSE4Ih14custom_cse_divIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB072:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%esi, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movl	%edx, %ebx
    00000016: 	subq	$0x28, %rsp
    0000001a: 	movq	%rcx, 0x8(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x18(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r11d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r11d, %r11d
    00000045: 	jle	.Ltmp584 # Offset: 69
    0000004b: 	leal	-0x2(%r13), %eax
    0000004f: 	movzbl	(%r12), %r10d
    00000054: 	movzbl	0x1(%r12), %r9d
    0000005a: 	xorl	%r14d, %r14d
    0000005d: 	leaq	0x2(%r12,%rax), %rbp
    00000062: 	nopw	(%rax,%rax) # Size: 6
.Ltmp588:
    00000068: 	movzbl	%r10b, %eax
    0000006c: 	movzbl	%r9b, %ecx
    00000070: 	movzbl	%r10b, %r8d
    00000074: 	movl	%r10d, %edx
    00000077: 	divb	%r9b
    0000007a: 	addl	%ebx, %eax
    0000007c: 	movzbl	%al, %eax
    0000007f: 	leal	(%rcx,%rax,2), %ecx
    00000082: 	leal	(%r8,%rax,2), %eax
    00000086: 	leal	(%rax,%rax,2), %esi
    00000089: 	movl	%r10d, %eax
    0000008c: 	subl	%r9d, %eax
    0000008f: 	addl	%eax, %esi
    00000091: 	subl	%ecx, %esi
    00000093: 	subl	%ecx, %esi
    00000095: 	subl	%ecx, %esi
    00000097: 	cmpl	$0x1, %r13d
    0000009b: 	jle	.Ltmp585 # Offset: 155
    0000009d: 	leaq	0x1(%r12), %rcx
    000000a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp586:
    000000a8: 	movl	%r8d, %edi
    000000ab: 	movzbl	(%rcx), %r8d
    000000af: 	movzbl	%dl, %eax
    000000b2: 	addq	$0x1, %rcx
    000000b6: 	divb	%r8b
    000000b9: 	movl	%r8d, %edx
    000000bc: 	addl	%ebx, %eax
    000000be: 	movzbl	%al, %eax
    000000c1: 	leal	(%r8,%rax,2), %r15d
    000000c5: 	leal	(%rdi,%rax,2), %eax
    000000c8: 	shll	$0x2, %eax
    000000cb: 	subl	%r15d, %eax
    000000ce: 	subl	%r15d, %eax
    000000d1: 	addl	%r15d, %r15d
    000000d4: 	subl	%r15d, %eax
    000000d7: 	addl	%eax, %esi
    000000d9: 	cmpq	%rbp, %rcx
    000000dc: 	jne	.Ltmp586 # Offset: 220
.Ltmp585:
    000000de: 	testb	%sil, %sil
    000000e1: 	jne	.Ltmp587 # Offset: 225
    000000e7: 	addl	$0x1, %r14d
    000000eb: 	cmpl	%r11d, %r14d
    000000ee: 	jl	.Ltmp588 # Offset: 238
.Ltmp584:
    000000f4: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000fb: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000102: 	subq	$0x20, %rax
    00000106: 	cmpq	%rax, %rbx
    00000109: 	je	.Ltmp589 # Offset: 265
    0000010f: 	movq	0x8(%rsp), %rax
    00000114: 	leaq	0x10(%rbx), %rdi
    00000118: 	movq	%rdi, (%rbx)
    0000011b: 	movq	(%rax), %rbp
    0000011e: 	movq	0x8(%rax), %r12
    00000122: 	movq	%rbp, %rax
    00000125: 	addq	%r12, %rax
    00000128: 	je	.Ltmp590 # Offset: 296
    0000012a: 	testq	%rbp, %rbp
    0000012d: 	je	.Ltmp591 # Offset: 301
.Ltmp590:
    00000133: 	movq	%r12, 0x10(%rsp)
    00000138: 	cmpq	$0xf, %r12
    0000013c: 	ja	.Ltmp592 # Offset: 316
    00000142: 	cmpq	$0x1, %r12
    00000146: 	jne	.Ltmp593 # Offset: 326
    0000014c: 	movzbl	(%rbp), %eax
    00000150: 	movb	%al, 0x10(%rbx)
.Ltmp596:
    00000153: 	movq	%r12, 0x8(%rbx)
    00000157: 	movb	$0x0, (%rdi,%r12)
    0000015c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000163: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000016a: 	addq	$0x20, %rax
    0000016e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000175: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000017c: 	je	.Ltmp594 # Offset: 380
.Ltmp597:
    00000182: 	movq	-0x20(%rax), %rbp
    00000186: 	callq	clock@PLT # Offset: 390
    0000018b: 	movq	%rax, end_time(%rip)
    00000192: 	movq	0x18(%rsp), %rdx
    00000197: 	subq	%fs:0x28, %rdx
    000001a0: 	jne	.Ltmp595 # Offset: 416
    000001a6: 	subq	start_time(%rip), %rax
    000001ad: 	pxor	%xmm0, %xmm0
    000001b1: 	movq	%rbp, %rdi
    000001b4: 	cvtsi2sd	%rax, %xmm0
    000001b9: 	divsd	DATAat0x4d640(%rip), %xmm0
    000001c1: 	addq	$0x28, %rsp
    000001c5: 	popq	%rbx
    000001c6: 	popq	%rbp
    000001c7: 	popq	%r12
    000001c9: 	popq	%r13
    000001cb: 	popq	%r14
    000001cd: 	popq	%r15
    000001cf: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 463
    000001d4: 	nopl	(%rax) # Size: 4
.Ltmp587:
    000001d8: 	movq	0x8(%rsp), %rax
    000001dd: 	leaq	DATAat0x4d004(%rip), %rsi
    000001e4: 	movl	$0x1, %edi
    000001e9: 	addl	$0x1, %r14d
    000001ed: 	movq	(%rax), %rdx
    000001f0: 	xorl	%eax, %eax
    000001f2: 	callq	__printf_chk@PLT # Offset: 498
    000001f7: 	movl	iterations(%rip), %r11d
    000001fe: 	cmpl	%r11d, %r14d
    00000201: 	jge	.Ltmp584 # Offset: 513
    00000207: 	movzbl	(%r12), %r10d
    0000020c: 	movzbl	0x1(%r12), %r9d
    00000212: 	jmp	.Ltmp588 # Offset: 530
.Ltmp592:
    00000217: 	movq	%rbx, %rdi
    0000021a: 	leaq	0x10(%rsp), %rsi
    0000021f: 	xorl	%edx, %edx
    00000221: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 545
    00000226: 	movq	%rax, (%rbx)
    00000229: 	movq	%rax, %rdi
    0000022c: 	movq	0x10(%rsp), %rax
    00000231: 	movq	%rax, 0x10(%rbx)
.Ltmp598:
    00000235: 	movq	%r12, %rdx
    00000238: 	movq	%rbp, %rsi
    0000023b: 	callq	memcpy@PLT # Offset: 571
    00000240: 	movq	0x10(%rsp), %r12
    00000245: 	movq	(%rbx), %rdi
    00000248: 	jmp	.Ltmp596 # Offset: 584
.Ltmp589:
    0000024d: 	movq	0x8(%rsp), %rsi
    00000252: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000259: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 601
    0000025e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000265: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000026c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000273: 	jne	.Ltmp597 # Offset: 627
.Ltmp594:
    00000279: 	movq	-0x8(%rdx), %rax
    0000027d: 	addq	$0x200, %rax
    00000283: 	jmp	.Ltmp597 # Offset: 643
.Ltmp593:
    00000288: 	testq	%r12, %r12
    0000028b: 	je	.Ltmp596 # Offset: 651
    00000291: 	jmp	.Ltmp598 # Offset: 657
.Ltmp595:
    00000293: 	callq	__stack_chk_fail@PLT # Offset: 659
.Ltmp591:
    00000298: 	leaq	DATAat0x4d018(%rip), %rdi
    0000029f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 671
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE4Ih14custom_cse_divIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSE4Ih14custom_cse_addIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 74
  State       : disassembled
  Address     : 0xa380
  Size        : 0x532
  MaxSize     : 0x540
  Offset      : 0xa380
  Section     : .text
  Orc Section : .local.text._Z9test_CSE4Ih14custom_cse_addIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB073:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movl	%esi, %r12d
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdi, %rbx
    00000016: 	subq	$0x48, %rsp
    0000001a: 	movq	%rcx, 0x20(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x38(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	movl	iterations(%rip), %eax
    00000041: 	movl	%eax, (%rsp)
    00000044: 	testl	%eax, %eax
    00000046: 	jle	.Ltmp599 # Offset: 70
    0000004c: 	leal	-0x1(%r12), %edi
    00000051: 	leal	-0x2(%r12), %eax
    00000056: 	movd	%ebp, %xmm3
    0000005a: 	xorl	%r14d, %r14d
    0000005d: 	movl	%eax, 0x4(%rsp)
    00000061: 	movl	%edi, %eax
    00000063: 	punpcklbw	%xmm3, %xmm3
    00000067: 	movzbl	(%rbx), %r8d
    0000006b: 	shrl	$0x4, %eax
    0000006e: 	movl	%edi, 0x8(%rsp)
    00000072: 	andl	$-0x10, %edi
    00000075: 	punpcklwd	%xmm3, %xmm3
    00000079: 	subl	$0x1, %eax
    0000007c: 	movl	%edi, %r15d
    0000007f: 	shlq	$0x4, %rax
    00000083: 	leaq	0x10(%rbx,%rax), %r13
    00000088: 	leal	0x1(%rdi), %eax
    0000008b: 	movzbl	0x1(%rbx), %edi
    0000008f: 	movl	%eax, 0xc(%rsp)
    00000093: 	nopl	(%rax,%rax) # Size: 5
.Ltmp605:
    00000098: 	leal	(%r8,%rdi), %eax
    0000009c: 	movzbl	%r8b, %ecx
    000000a0: 	movzbl	%dil, %edx
    000000a4: 	addl	%ebp, %eax
    000000a6: 	movzbl	%al, %eax
    000000a9: 	leal	(%rdx,%rax,2), %edx
    000000ac: 	leal	(%rcx,%rax,2), %eax
    000000af: 	movl	%r8d, %ecx
    000000b2: 	leal	(%rax,%rax,2), %eax
    000000b5: 	subl	%edi, %ecx
    000000b7: 	addl	%ecx, %eax
    000000b9: 	subl	%edx, %eax
    000000bb: 	subl	%edx, %eax
    000000bd: 	subl	%edx, %eax
    000000bf: 	cmpl	$0x1, %r12d
    000000c3: 	jle	.Ltmp600 # Offset: 195
    000000c9: 	cmpl	$0xe, 0x4(%rsp)
    000000ce: 	jbe	.Ltmp601 # Offset: 206
    000000d4: 	pshufd	$0x0, %xmm3, %xmm5
    000000d9: 	movq	%rbx, %rdx
    000000dc: 	pxor	%xmm4, %xmm4
.Ltmp602:
    000000e0: 	movdqu	(%rdx), %xmm6
    000000e4: 	movdqu	0x1(%rdx), %xmm2
    000000e9: 	addq	$0x10, %rdx
    000000ed: 	movdqu	-0xf(%rdx), %xmm1
    000000f2: 	paddb	%xmm6, %xmm2
    000000f6: 	movdqa	%xmm6, %xmm0
    000000fa: 	paddb	%xmm5, %xmm2
    000000fe: 	paddb	%xmm2, %xmm1
    00000102: 	paddb	%xmm2, %xmm0
    00000106: 	paddb	%xmm2, %xmm1
    0000010a: 	paddb	%xmm2, %xmm0
    0000010e: 	paddb	%xmm0, %xmm0
    00000112: 	movdqa	%xmm1, %xmm2
    00000116: 	paddb	%xmm0, %xmm0
    0000011a: 	paddb	%xmm1, %xmm2
    0000011e: 	psubb	%xmm1, %xmm0
    00000122: 	paddb	%xmm2, %xmm1
    00000126: 	psubb	%xmm1, %xmm0
    0000012a: 	paddb	%xmm0, %xmm4
    0000012e: 	cmpq	%rdx, %r13
    00000131: 	jne	.Ltmp602 # Offset: 305
    00000133: 	movdqa	%xmm4, %xmm0
    00000137: 	psrldq	$0x8, %xmm0
    0000013c: 	paddb	%xmm0, %xmm4
    00000140: 	pxor	%xmm0, %xmm0
    00000144: 	psadbw	%xmm0, %xmm4
    00000148: 	movd	%xmm4, %edx
    0000014c: 	addl	%edx, %eax
    0000014e: 	cmpl	0x8(%rsp), %r15d
    00000153: 	je	.Ltmp600 # Offset: 339
    00000159: 	movl	0xc(%rsp), %ecx
    0000015d: 	movl	%r15d, %edx
.Ltmp613:
    00000160: 	movl	%r12d, %r9d
    00000163: 	subl	%edx, %r9d
    00000166: 	leal	-0x1(%r9), %esi
    0000016a: 	subl	$0x2, %r9d
    0000016e: 	cmpl	$0x6, %r9d
    00000172: 	jbe	.Ltmp603 # Offset: 370
    00000174: 	movq	(%rbx,%rdx), %xmm0
    00000179: 	movq	0x1(%rbx,%rdx), %xmm2
    0000017f: 	movl	%ebp, %edx
    00000181: 	movzbl	%bpl, %r9d
    00000185: 	shll	$0x8, %edx
    00000188: 	orl	%r9d, %edx
    0000018b: 	movd	%edx, %xmm5
    0000018f: 	pshuflw	$0x0, %xmm5, %xmm1
    00000194: 	paddb	%xmm0, %xmm1
    00000198: 	paddb	%xmm2, %xmm1
    0000019c: 	paddb	%xmm1, %xmm0
    000001a0: 	paddb	%xmm1, %xmm2
    000001a4: 	paddb	%xmm1, %xmm0
    000001a8: 	paddb	%xmm2, %xmm1
    000001ac: 	paddb	%xmm0, %xmm0
    000001b0: 	paddb	%xmm1, %xmm1
    000001b4: 	paddb	%xmm0, %xmm0
    000001b8: 	psubb	%xmm1, %xmm0
    000001bc: 	psubb	%xmm1, %xmm0
    000001c0: 	pxor	%xmm1, %xmm1
    000001c4: 	movdqa	%xmm0, %xmm7
    000001c8: 	psadbw	%xmm1, %xmm7
    000001cc: 	movq	%xmm7, %rdx
    000001d1: 	movq	%xmm7, 0x28(%rsp)
    000001d7: 	movl	%edx, %r9d
    000001da: 	movl	%esi, %edx
    000001dc: 	andl	$-0x8, %edx
    000001df: 	addl	%r9d, %eax
    000001e2: 	addl	%edx, %ecx
    000001e4: 	cmpl	%edx, %esi
    000001e6: 	je	.Ltmp600 # Offset: 486
.Ltmp603:
    000001ec: 	movslq	%ecx, %rdx
    000001ef: 	addq	%rbx, %rdx
    000001f2: 	movzbl	(%rdx), %r9d
    000001f6: 	movzbl	-0x1(%rdx), %r11d
    000001fb: 	leal	(%r11,%r9), %edx
    000001ff: 	movl	%r9d, %esi
    00000202: 	addl	%ebp, %edx
    00000204: 	movzbl	%dl, %edx
    00000207: 	leal	(%r9,%rdx,2), %r10d
    0000020b: 	leal	(%r11,%rdx,2), %edx
    0000020f: 	leal	(%rax,%rdx,4), %edx
    00000212: 	subl	%r10d, %edx
    00000215: 	subl	%r10d, %edx
    00000218: 	addl	%r10d, %r10d
    0000021b: 	movl	%edx, %eax
    0000021d: 	leal	0x1(%rcx), %edx
    00000220: 	subl	%r10d, %eax
    00000223: 	cmpl	%edx, %r12d
    00000226: 	jle	.Ltmp600 # Offset: 550
    0000022c: 	movslq	%edx, %rdx
    0000022f: 	addl	%ebp, %esi
    00000231: 	movzbl	(%rbx,%rdx), %r10d
    00000236: 	addl	%r10d, %esi
    00000239: 	movl	%r10d, %edx
    0000023c: 	movzbl	%sil, %esi
    00000240: 	leal	(%r10,%rsi,2), %r11d
    00000244: 	leal	(%r9,%rsi,2), %esi
    00000248: 	shll	$0x2, %esi
    0000024b: 	subl	%r11d, %esi
    0000024e: 	subl	%r11d, %esi
    00000251: 	addl	%r11d, %r11d
    00000254: 	subl	%r11d, %esi
    00000257: 	addl	%esi, %eax
    00000259: 	leal	0x2(%rcx), %esi
    0000025c: 	cmpl	%esi, %r12d
    0000025f: 	jle	.Ltmp600 # Offset: 607
    00000265: 	movslq	%esi, %rsi
    00000268: 	addl	%ebp, %edx
    0000026a: 	movzbl	(%rbx,%rsi), %r9d
    0000026f: 	addl	%r9d, %edx
    00000272: 	movzbl	%dl, %edx
    00000275: 	leal	(%r9,%rdx,2), %r11d
    00000279: 	leal	(%r10,%rdx,2), %edx
    0000027d: 	shll	$0x2, %edx
    00000280: 	subl	%r11d, %edx
    00000283: 	subl	%r11d, %edx
    00000286: 	addl	%r11d, %r11d
    00000289: 	subl	%r11d, %edx
    0000028c: 	addl	%edx, %eax
    0000028e: 	leal	0x3(%rcx), %edx
    00000291: 	cmpl	%edx, %r12d
    00000294: 	jle	.Ltmp600 # Offset: 660
    0000029a: 	movslq	%edx, %rdx
    0000029d: 	movzbl	(%rbx,%rdx), %r11d
    000002a2: 	leal	(%rbp,%r9), %edx
    000002a7: 	addl	%r11d, %edx
    000002aa: 	movzbl	%dl, %edx
    000002ad: 	leal	(%r11,%rdx,2), %esi
    000002b1: 	leal	(%r9,%rdx,2), %edx
    000002b5: 	shll	$0x2, %edx
    000002b8: 	subl	%esi, %edx
    000002ba: 	subl	%esi, %edx
    000002bc: 	addl	%esi, %esi
    000002be: 	subl	%esi, %edx
    000002c0: 	addl	%edx, %eax
    000002c2: 	leal	0x4(%rcx), %edx
    000002c5: 	cmpl	%edx, %r12d
    000002c8: 	jle	.Ltmp600 # Offset: 712
    000002ce: 	movslq	%edx, %rdx
    000002d1: 	movzbl	(%rbx,%rdx), %r9d
    000002d6: 	leal	(%rbp,%r11), %edx
    000002db: 	addl	%r9d, %edx
    000002de: 	movzbl	%dl, %edx
    000002e1: 	leal	(%r9,%rdx,2), %r10d
    000002e5: 	leal	(%r11,%rdx,2), %edx
    000002e9: 	shll	$0x2, %edx
    000002ec: 	subl	%r10d, %edx
    000002ef: 	subl	%r10d, %edx
    000002f2: 	addl	%r10d, %r10d
    000002f5: 	subl	%r10d, %edx
    000002f8: 	addl	%edx, %eax
    000002fa: 	leal	0x5(%rcx), %edx
    000002fd: 	cmpl	%edx, %r12d
    00000300: 	jle	.Ltmp600 # Offset: 768
    00000302: 	movslq	%edx, %rdx
    00000305: 	addl	$0x6, %ecx
    00000308: 	movzbl	(%rbx,%rdx), %r11d
    0000030d: 	leal	(%rbp,%r9), %edx
    00000312: 	addl	%r11d, %edx
    00000315: 	movzbl	%dl, %edx
    00000318: 	leal	(%r11,%rdx,2), %esi
    0000031c: 	leal	(%r9,%rdx,2), %edx
    00000320: 	shll	$0x2, %edx
    00000323: 	subl	%esi, %edx
    00000325: 	subl	%esi, %edx
    00000327: 	addl	%esi, %esi
    00000329: 	subl	%esi, %edx
    0000032b: 	addl	%edx, %eax
    0000032d: 	cmpl	%ecx, %r12d
    00000330: 	jle	.Ltmp600 # Offset: 816
    00000332: 	movslq	%ecx, %rcx
    00000335: 	leal	(%rbp,%r11), %edx
    0000033a: 	movzbl	(%rbx,%rcx), %ecx
    0000033e: 	addl	%ecx, %edx
    00000340: 	movzbl	%dl, %edx
    00000343: 	leal	(%rcx,%rdx,2), %ecx
    00000346: 	leal	(%r11,%rdx,2), %edx
    0000034a: 	shll	$0x2, %edx
    0000034d: 	subl	%ecx, %edx
    0000034f: 	subl	%ecx, %edx
    00000351: 	addl	%ecx, %ecx
    00000353: 	subl	%ecx, %edx
    00000355: 	addl	%edx, %eax
.Ltmp600:
    00000357: 	testb	%al, %al
    00000359: 	jne	.Ltmp604 # Offset: 857
    0000035f: 	addl	$0x1, %r14d
    00000363: 	cmpl	(%rsp), %r14d
    00000367: 	jl	.Ltmp605 # Offset: 871
.Ltmp599:
    0000036d: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000374: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000037b: 	subq	$0x20, %rax
    0000037f: 	cmpq	%rax, %rbx
    00000382: 	je	.Ltmp606 # Offset: 898
    00000388: 	movq	0x20(%rsp), %rax
    0000038d: 	leaq	0x10(%rbx), %rdi
    00000391: 	movq	%rdi, (%rbx)
    00000394: 	movq	(%rax), %rbp
    00000397: 	movq	0x8(%rax), %r12
    0000039b: 	movq	%rbp, %rax
    0000039e: 	addq	%r12, %rax
    000003a1: 	je	.Ltmp607 # Offset: 929
    000003a3: 	testq	%rbp, %rbp
    000003a6: 	je	.Ltmp608 # Offset: 934
.Ltmp607:
    000003ac: 	movq	%r12, 0x30(%rsp)
    000003b1: 	cmpq	$0xf, %r12
    000003b5: 	ja	.Ltmp609 # Offset: 949
    000003bb: 	cmpq	$0x1, %r12
    000003bf: 	jne	.Ltmp610 # Offset: 959
    000003c5: 	movzbl	(%rbp), %eax
    000003c9: 	movb	%al, 0x10(%rbx)
.Ltmp614:
    000003cc: 	movq	%r12, 0x8(%rbx)
    000003d0: 	movb	$0x0, (%rdi,%r12)
    000003d5: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000003dc: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003e3: 	addq	$0x20, %rax
    000003e7: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000003ee: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000003f5: 	je	.Ltmp611 # Offset: 1013
.Ltmp615:
    000003fb: 	movq	-0x20(%rax), %rbp
    000003ff: 	callq	clock@PLT # Offset: 1023
    00000404: 	movq	%rax, end_time(%rip)
    0000040b: 	movq	0x38(%rsp), %rdx
    00000410: 	subq	%fs:0x28, %rdx
    00000419: 	jne	.Ltmp612 # Offset: 1049
    0000041f: 	subq	start_time(%rip), %rax
    00000426: 	pxor	%xmm0, %xmm0
    0000042a: 	movq	%rbp, %rdi
    0000042d: 	cvtsi2sd	%rax, %xmm0
    00000432: 	divsd	DATAat0x4d640(%rip), %xmm0
    0000043a: 	addq	$0x48, %rsp
    0000043e: 	popq	%rbx
    0000043f: 	popq	%rbp
    00000440: 	popq	%r12
    00000442: 	popq	%r13
    00000444: 	popq	%r14
    00000446: 	popq	%r15
    00000448: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1096
    0000044d: 	nopl	(%rax) # Size: 3
.Ltmp604:
    00000450: 	movq	0x20(%rsp), %rax
    00000455: 	leaq	DATAat0x4d004(%rip), %rsi
    0000045c: 	movl	$0x1, %edi
    00000461: 	movaps	%xmm3, 0x10(%rsp)
    00000466: 	addl	$0x1, %r14d
    0000046a: 	movq	(%rax), %rdx
    0000046d: 	xorl	%eax, %eax
    0000046f: 	callq	__printf_chk@PLT # Offset: 1135
    00000474: 	movl	iterations(%rip), %eax
    0000047a: 	movl	%eax, (%rsp)
    0000047d: 	cmpl	%eax, %r14d
    00000480: 	jge	.Ltmp599 # Offset: 1152
    00000486: 	movzbl	(%rbx), %r8d
    0000048a: 	movzbl	0x1(%rbx), %edi
    0000048e: 	movdqa	0x10(%rsp), %xmm3
    00000494: 	jmp	.Ltmp605 # Offset: 1172
.Ltmp601:
    00000499: 	xorl	%edx, %edx
    0000049b: 	movl	$0x1, %ecx
    000004a0: 	jmp	.Ltmp613 # Offset: 1184
.Ltmp609:
    000004a5: 	movq	%rbx, %rdi
    000004a8: 	leaq	0x30(%rsp), %rsi
    000004ad: 	xorl	%edx, %edx
    000004af: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1199
    000004b4: 	movq	%rax, (%rbx)
    000004b7: 	movq	%rax, %rdi
    000004ba: 	movq	0x30(%rsp), %rax
    000004bf: 	movq	%rax, 0x10(%rbx)
.Ltmp616:
    000004c3: 	movq	%r12, %rdx
    000004c6: 	movq	%rbp, %rsi
    000004c9: 	callq	memcpy@PLT # Offset: 1225
    000004ce: 	movq	0x30(%rsp), %r12
    000004d3: 	movq	(%rbx), %rdi
    000004d6: 	jmp	.Ltmp614 # Offset: 1238
.Ltmp606:
    000004db: 	movq	0x20(%rsp), %rsi
    000004e0: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000004e7: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1255
    000004ec: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000004f3: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000004fa: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000501: 	jne	.Ltmp615 # Offset: 1281
.Ltmp611:
    00000507: 	movq	-0x8(%rdx), %rax
    0000050b: 	addq	$0x200, %rax
    00000511: 	jmp	.Ltmp615 # Offset: 1297
.Ltmp610:
    00000516: 	testq	%r12, %r12
    00000519: 	je	.Ltmp614 # Offset: 1305
    0000051f: 	jmp	.Ltmp616 # Offset: 1311
.Ltmp612:
    00000521: 	callq	__stack_chk_fail@PLT # Offset: 1313
.Ltmp608:
    00000526: 	leaq	DATAat0x4d018(%rip), %rdi
    0000052d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1325
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE4Ih14custom_cse_addIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSE4Ia14custom_cse_mulIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z9test_CSE4Ia14custom_cse_mulIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z9test_CSE4Ia14custom_cse_mulIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/simple_types_cse.cpp/1
  Number      : 75
  State       : disassembled
  Address     : 0xa8c0
  Size        : 0x942
  MaxSize     : 0x950
  Offset      : 0xa8c0
  Section     : .text
  Orc Section : .local.text._Z9test_CSE4Ia14custom_cse_mulIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB074:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movl	%esi, %ebx
    0000000f: 	subq	$0xd8, %rsp
    00000016: 	movq	%rdx, 0xb8(%rsp)
    0000001e: 	movq	%fs:0x28, %rax
    00000027: 	movq	%rax, 0xc8(%rsp)
    0000002f: 	xorl	%eax, %eax
    00000031: 	callq	clock@PLT # Offset: 49
    00000036: 	movq	%rax, start_time(%rip)
    0000003d: 	movl	iterations(%rip), %eax
    00000043: 	movl	%eax, 0xac(%rsp)
    0000004a: 	testl	%eax, %eax
    0000004c: 	jle	.Ltmp617 # Offset: 76
    00000052: 	movzbl	(%rbp), %eax
    00000056: 	movd	%ebx, %xmm5
    0000005a: 	pxor	%xmm6, %xmm6
    0000005e: 	movq	%rbp, %r13
    00000061: 	movl	$0x0, 0x10(%rsp)
    00000069: 	movdqa	DATAat0x4d5f0(%rip), %xmm4
    00000071: 	punpcklbw	%xmm5, %xmm5
    00000075: 	movb	%al, 0x17(%rsp)
    00000079: 	movzbl	0x1(%rbp), %eax
    0000007d: 	punpcklwd	%xmm5, %xmm5
    00000081: 	pshufd	$0x0, %xmm5, %xmm5
    00000086: 	movb	%al, 0xa1(%rsp)
    0000008d: 	leaq	0x1f30(%rbp), %rax
    00000094: 	movq	%rax, 0xb0(%rsp)
    0000009c: 	movzbl	0x1f30(%rbp), %eax
    000000a3: 	movb	%al, 0x18(%rsp)
    000000a7: 	movzbl	0x1f31(%rbp), %eax
    000000ae: 	movb	%al, 0xa2(%rsp)
    000000b5: 	movzbl	0x1f32(%rbp), %eax
    000000bc: 	movb	%al, 0xa3(%rsp)
    000000c3: 	movzbl	0x1f33(%rbp), %eax
    000000ca: 	movb	%al, 0x19(%rsp)
    000000ce: 	movzbl	0x1f34(%rbp), %eax
    000000d5: 	movb	%al, 0x1a(%rsp)
    000000d9: 	movzbl	0x1f35(%rbp), %eax
    000000e0: 	movb	%al, 0xa4(%rsp)
    000000e7: 	movzbl	0x1f36(%rbp), %eax
    000000ee: 	movb	%al, 0xa5(%rsp)
    000000f5: 	movzbl	0x1f37(%rbp), %eax
    000000fc: 	movb	%al, 0xa6(%rsp)
    00000103: 	movzbl	0x1f38(%rbp), %eax
    0000010a: 	movb	%al, 0xa7(%rsp)
    00000111: 	movzbl	0x1f39(%rbp), %eax
    00000118: 	movb	%al, 0xa8(%rsp)
    0000011f: 	movzbl	0x1f3a(%rbp), %eax
    00000126: 	movb	%al, 0xa9(%rsp)
    0000012d: 	movzbl	0x1f3b(%rbp), %eax
    00000134: 	movb	%al, 0xaa(%rsp)
    0000013b: 	movzbl	0x1f3c(%rbp), %eax
    00000142: 	movb	%al, 0x15(%rsp)
    00000146: 	movzbl	0x1f3d(%rbp), %eax
    0000014d: 	movb	%al, 0x16(%rsp)
    00000151: 	movzbl	0x1f3e(%rbp), %eax
    00000158: 	movb	%al, 0xab(%rsp)
    0000015f: 	movzbl	0x1f3f(%rbp), %eax
    00000166: 	movb	%al, 0x1b(%rsp)
    0000016a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp620:
    00000170: 	movzbl	0x17(%rsp), %eax
    00000175: 	movsbl	0xa1(%rsp), %edx
    0000017d: 	pxor	%xmm3, %xmm3
    00000181: 	movsbl	0x17(%rsp), %ecx
    00000186: 	imull	%edx, %eax
    00000189: 	movl	%edx, %esi
    0000018b: 	addl	%ebx, %eax
    0000018d: 	movsbl	%al, %eax
    00000190: 	leal	(%rdx,%rax,2), %edx
    00000193: 	leal	(%rcx,%rax,2), %eax
    00000196: 	subl	%esi, %ecx
    00000198: 	leal	(%rax,%rax,2), %eax
    0000019b: 	addl	%ecx, %eax
    0000019d: 	subl	%edx, %eax
    0000019f: 	subl	%edx, %eax
    000001a1: 	subl	%edx, %eax
    000001a3: 	movq	0xb0(%rsp), %rdx
    000001ab: 	movb	%al, 0xa0(%rsp)
    000001b2: 	movq	%r13, %rax
    000001b5: 	nopl	(%rax) # Size: 3
.Ltmp618:
    000001b8: 	movdqu	(%rax), %xmm0
    000001bc: 	movdqu	0x1(%rax), %xmm1
    000001c1: 	addq	$0x10, %rax
    000001c5: 	movdqa	%xmm0, %xmm2
    000001c9: 	movdqa	%xmm0, %xmm7
    000001cd: 	movdqa	%xmm1, %xmm9
    000001d2: 	movdqa	%xmm1, %xmm8
    000001d7: 	punpcklbw	%xmm0, %xmm2
    000001db: 	punpckhbw	%xmm0, %xmm7
    000001df: 	punpcklbw	%xmm1, %xmm9
    000001e4: 	punpckhbw	%xmm1, %xmm8
    000001e9: 	pmullw	%xmm9, %xmm2
    000001ee: 	pmullw	%xmm8, %xmm7
    000001f3: 	pand	%xmm4, %xmm2
    000001f7: 	pand	%xmm4, %xmm7
    000001fb: 	packuswb	%xmm7, %xmm2
    000001ff: 	paddb	%xmm5, %xmm2
    00000203: 	paddb	%xmm2, %xmm0
    00000207: 	paddb	%xmm2, %xmm1
    0000020b: 	paddb	%xmm2, %xmm0
    0000020f: 	paddb	%xmm2, %xmm1
    00000213: 	paddb	%xmm0, %xmm0
    00000217: 	movdqa	%xmm1, %xmm2
    0000021b: 	psubb	%xmm1, %xmm3
    0000021f: 	paddb	%xmm0, %xmm0
    00000223: 	paddb	%xmm1, %xmm2
    00000227: 	psubb	%xmm1, %xmm0
    0000022b: 	psubb	%xmm2, %xmm0
    0000022f: 	paddb	%xmm0, %xmm3
    00000233: 	cmpq	%rax, %rdx
    00000236: 	jne	.Ltmp618 # Offset: 566
    00000238: 	movsbl	0xa2(%rsp), %edx
    00000240: 	movzbl	0x18(%rsp), %eax
    00000245: 	movdqa	%xmm3, %xmm0
    00000249: 	psrldq	$0x8, %xmm0
    0000024e: 	imull	%edx, %eax
    00000251: 	movl	%edx, %ecx
    00000253: 	movl	%edx, 0x1c(%rsp)
    00000257: 	paddb	%xmm0, %xmm3
    0000025b: 	psadbw	%xmm6, %xmm3
    0000025f: 	movd	%xmm3, 0x8c(%rsp)
    00000268: 	addl	%ebx, %eax
    0000026a: 	movsbl	%al, %edi
    0000026d: 	movl	%ecx, %eax
    0000026f: 	leal	(%rdx,%rdi,2), %r14d
    00000273: 	movsbl	0xa3(%rsp), %edx
    0000027b: 	movl	%edi, 0x20(%rsp)
    0000027f: 	movl	%edx, %ecx
    00000281: 	movl	%edx, 0x40(%rsp)
    00000285: 	imull	%ecx, %eax
    00000288: 	addl	%ebx, %eax
    0000028a: 	movsbl	%al, %r8d
    0000028e: 	leal	(%rdx,%r8,2), %edi
    00000292: 	movsbl	0x19(%rsp), %edx
    00000297: 	movl	%r8d, 0x38(%rsp)
    0000029c: 	movl	%edi, 0x90(%rsp)
    000002a3: 	movl	%edx, %eax
    000002a5: 	movl	%edx, %r9d
    000002a8: 	movl	%edx, 0x30(%rsp)
    000002ac: 	imull	%ecx, %eax
    000002af: 	movl	%r9d, %edi
    000002b2: 	addl	%ebx, %eax
    000002b4: 	movsbl	%al, %r10d
    000002b8: 	leal	(%rdx,%r10,2), %r12d
    000002bc: 	movsbl	0x1a(%rsp), %edx
    000002c1: 	movl	%r10d, 0x2c(%rsp)
    000002c6: 	movl	%edx, %eax
    000002c8: 	movl	%edx, %r15d
    000002cb: 	movl	%edx, 0x28(%rsp)
    000002cf: 	imull	%edi, %eax
    000002d2: 	addl	%ebx, %eax
    000002d4: 	movsbl	%al, %r9d
    000002d8: 	movl	%r15d, %eax
    000002db: 	leal	(%rdx,%r9,2), %ebp
    000002df: 	movsbl	0xa4(%rsp), %edx
    000002e7: 	movl	%r9d, 0x24(%rsp)
    000002ec: 	imull	%edx, %eax
    000002ef: 	movl	%edx, (%rsp)
    000002f2: 	addl	%ebx, %eax
    000002f4: 	movsbl	%al, %r15d
    000002f8: 	movl	%edx, %eax
    000002fa: 	leal	(%rdx,%r15,2), %r11d
    000002fe: 	movsbl	0xa5(%rsp), %edx
    00000306: 	movl	%r15d, 0x3c(%rsp)
    0000030b: 	imull	%edx, %eax
    0000030e: 	movl	%edx, %ecx
    00000310: 	movl	%edx, 0x44(%rsp)
    00000314: 	addl	%ebx, %eax
    00000316: 	movsbl	%al, %esi
    00000319: 	movl	%ecx, %eax
    0000031b: 	leal	(%rdx,%rsi,2), %r10d
    0000031f: 	movsbl	0xa6(%rsp), %edx
    00000327: 	movl	%esi, 0x48(%rsp)
    0000032b: 	imull	%edx, %eax
    0000032e: 	movl	%edx, %esi
    00000330: 	movl	%edx, 0x4c(%rsp)
    00000334: 	addl	%ebx, %eax
    00000336: 	movsbl	%al, %r8d
    0000033a: 	movl	%esi, %eax
    0000033c: 	leal	(%rdx,%r8,2), %r9d
    00000340: 	movsbl	0xa7(%rsp), %edx
    00000348: 	movl	%r8d, 0x50(%rsp)
    0000034d: 	imull	%edx, %eax
    00000350: 	movl	%edx, 0x54(%rsp)
    00000354: 	addl	%ebx, %eax
    00000356: 	movsbl	%al, %r15d
    0000035a: 	movl	%edx, %eax
    0000035c: 	leal	(%rdx,%r15,2), %r8d
    00000360: 	movsbl	0xa8(%rsp), %edx
    00000368: 	movl	%r15d, 0x58(%rsp)
    0000036d: 	imull	%edx, %eax
    00000370: 	movl	%edx, %esi
    00000372: 	movl	%edx, 0x5c(%rsp)
    00000376: 	addl	%ebx, %eax
    00000378: 	movsbl	%al, %edi
    0000037b: 	movl	%esi, %eax
    0000037d: 	movl	%edi, 0x60(%rsp)
    00000381: 	leal	(%rdx,%rdi,2), %edi
    00000384: 	movsbl	0xa9(%rsp), %edx
    0000038c: 	imull	%edx, %eax
    0000038f: 	movl	%edx, %ecx
    00000391: 	movl	%edx, 0x64(%rsp)
    00000395: 	addl	%ebx, %eax
    00000397: 	movsbl	%al, %esi
    0000039a: 	movl	%ecx, %eax
    0000039c: 	movl	%esi, 0x68(%rsp)
    000003a0: 	leal	(%rdx,%rsi,2), %esi
    000003a3: 	movsbl	0xaa(%rsp), %edx
    000003ab: 	movzbl	0x15(%rsp), %ecx
    000003b0: 	imull	%edx, %eax
    000003b3: 	movl	%edx, %r15d
    000003b6: 	movl	%edx, 0x6c(%rsp)
    000003ba: 	addl	%ebx, %eax
    000003bc: 	movsbl	%al, %eax
    000003bf: 	movl	%eax, 0x70(%rsp)
    000003c3: 	leal	(%rdx,%rax,2), %eax
    000003c6: 	movsbl	%cl, %edx
    000003c9: 	movl	%eax, 0x94(%rsp)
    000003d0: 	movl	%r15d, %eax
    000003d3: 	movl	%ecx, %r15d
    000003d6: 	movzbl	0x16(%rsp), %ecx
    000003db: 	imull	%r15d, %eax
    000003df: 	movl	%edx, 0x74(%rsp)
    000003e3: 	addl	%ebx, %eax
    000003e5: 	movsbl	%al, %r15d
    000003e9: 	movzbl	0x15(%rsp), %eax
    000003ee: 	leal	(%rdx,%r15,2), %edx
    000003f2: 	movl	%r15d, 0x78(%rsp)
    000003f7: 	movsbl	%cl, %r15d
    000003fb: 	imull	%ecx, %eax
    000003fe: 	movl	%r15d, 0x7c(%rsp)
    00000403: 	movzbl	0xab(%rsp), %ecx
    0000040b: 	addl	%ebx, %eax
    0000040d: 	movsbl	%al, %eax
    00000410: 	leal	(%r15,%rax,2), %r15d
    00000414: 	movl	%eax, 0x80(%rsp)
    0000041b: 	movzbl	0x16(%rsp), %eax
    00000420: 	movl	%r15d, 0x98(%rsp)
    00000428: 	movsbl	%cl, %r15d
    0000042c: 	imull	%ecx, %eax
    0000042f: 	movl	%r15d, 0x84(%rsp)
    00000437: 	addl	%ebx, %eax
    00000439: 	movsbl	%al, %eax
    0000043c: 	leal	(%r15,%rax,2), %r15d
    00000440: 	movl	%eax, 0x88(%rsp)
    00000447: 	movzbl	0x1b(%rsp), %eax
    0000044c: 	imull	%ecx, %eax
    0000044f: 	addl	%ebx, %eax
    00000451: 	movsbl	%al, %ecx
    00000454: 	movsbl	0x1b(%rsp), %eax
    00000459: 	movl	%ecx, 0x34(%rsp)
    0000045d: 	leal	(%rax,%rcx,2), %eax
    00000460: 	movzbl	0x18(%rsp), %ecx
    00000465: 	movl	%eax, 0x9c(%rsp)
    0000046c: 	movzbl	0x20(%rsp), %eax
    00000471: 	leal	(%rcx,%rax,2), %eax
    00000474: 	movl	0x38(%rsp), %ecx
    00000478: 	shll	$0x2, %eax
    0000047b: 	subl	%r14d, %eax
    0000047e: 	subl	%r14d, %eax
    00000481: 	subl	%r14d, %eax
    00000484: 	subl	%r14d, %eax
    00000487: 	movzbl	0xa0(%rsp), %r14d
    00000490: 	addb	0x8c(%rsp), %r14b
    00000498: 	addl	%r14d, %eax
    0000049b: 	movl	0x1c(%rsp), %r14d
    000004a0: 	leal	(%r14,%rcx,2), %r14d
    000004a4: 	movl	0x90(%rsp), %ecx
    000004ab: 	shll	$0x2, %r14d
    000004af: 	subl	%ecx, %r14d
    000004b2: 	subl	%ecx, %r14d
    000004b5: 	subl	%ecx, %r14d
    000004b8: 	subl	%ecx, %r14d
    000004bb: 	movl	0x40(%rsp), %ecx
    000004bf: 	addl	%eax, %r14d
    000004c2: 	movl	0x2c(%rsp), %eax
    000004c6: 	leal	(%rcx,%rax,2), %eax
    000004c9: 	movl	0x30(%rsp), %ecx
    000004cd: 	shll	$0x2, %eax
    000004d0: 	subl	%r12d, %eax
    000004d3: 	subl	%r12d, %eax
    000004d6: 	subl	%r12d, %eax
    000004d9: 	subl	%r12d, %eax
    000004dc: 	addl	%r14d, %eax
    000004df: 	movl	0x24(%rsp), %r14d
    000004e4: 	leal	(%rcx,%r14,2), %r12d
    000004e8: 	shll	$0x2, %r12d
    000004ec: 	subl	%ebp, %r12d
    000004ef: 	subl	%ebp, %r12d
    000004f2: 	subl	%ebp, %r12d
    000004f5: 	subl	%ebp, %r12d
    000004f8: 	movl	0x28(%rsp), %ebp
    000004fc: 	movl	0x3c(%rsp), %ecx
    00000500: 	addl	%r12d, %eax
    00000503: 	movl	0x78(%rsp), %r14d
    00000508: 	leal	(%rbp,%rcx,2), %ebp
    0000050c: 	movl	(%rsp), %ecx
    0000050f: 	shll	$0x2, %ebp
    00000512: 	subl	%r11d, %ebp
    00000515: 	subl	%r11d, %ebp
    00000518: 	subl	%r11d, %ebp
    0000051b: 	subl	%r11d, %ebp
    0000051e: 	movl	0x48(%rsp), %r11d
    00000523: 	addl	%ebp, %eax
    00000525: 	leal	(%rcx,%r11,2), %r11d
    00000529: 	movl	0x44(%rsp), %ecx
    0000052d: 	shll	$0x2, %r11d
    00000531: 	subl	%r10d, %r11d
    00000534: 	subl	%r10d, %r11d
    00000537: 	subl	%r10d, %r11d
    0000053a: 	subl	%r10d, %r11d
    0000053d: 	movl	0x50(%rsp), %r10d
    00000542: 	addl	%r11d, %eax
    00000545: 	movl	0x60(%rsp), %r11d
    0000054a: 	leal	(%rcx,%r10,2), %r10d
    0000054e: 	movl	0x58(%rsp), %ecx
    00000552: 	shll	$0x2, %r10d
    00000556: 	subl	%r9d, %r10d
    00000559: 	subl	%r9d, %r10d
    0000055c: 	subl	%r9d, %r10d
    0000055f: 	subl	%r9d, %r10d
    00000562: 	movl	0x4c(%rsp), %r9d
    00000567: 	addl	%r10d, %eax
    0000056a: 	movl	0x68(%rsp), %r10d
    0000056f: 	leal	(%r9,%rcx,2), %r9d
    00000573: 	movl	0x54(%rsp), %ecx
    00000577: 	shll	$0x2, %r9d
    0000057b: 	subl	%r8d, %r9d
    0000057e: 	subl	%r8d, %r9d
    00000581: 	subl	%r8d, %r9d
    00000584: 	subl	%r8d, %r9d
    00000587: 	leal	(%rcx,%r11,2), %r8d
    0000058b: 	movl	0x5c(%rsp), %ecx
    0000058f: 	movl	0x70(%rsp), %r11d
    00000594: 	shll	$0x2, %r8d
    00000598: 	addl	%r9d, %eax
    0000059b: 	subl	%edi, %r8d
    0000059e: 	subl	%edi, %r8d
    000005a1: 	subl	%edi, %r8d
    000005a4: 	subl	%edi, %r8d
    000005a7: 	leal	(%rcx,%r10,2), %edi
    000005ab: 	movl	0x64(%rsp), %ecx
    000005af: 	shll	$0x2, %edi
    000005b2: 	addl	%r8d, %eax
    000005b5: 	subl	%esi, %edi
    000005b7: 	subl	%esi, %edi
    000005b9: 	subl	%esi, %edi
    000005bb: 	subl	%esi, %edi
    000005bd: 	leal	(%rcx,%r11,2), %esi
    000005c1: 	movl	0x6c(%rsp), %ecx
    000005c5: 	addl	%edi, %eax
    000005c7: 	movl	0x94(%rsp), %edi
    000005ce: 	shll	$0x2, %esi
    000005d1: 	leal	(%rcx,%r14,2), %ecx
    000005d5: 	subl	%edi, %esi
    000005d7: 	subl	%edi, %esi
    000005d9: 	subl	%edi, %esi
    000005db: 	subl	%edi, %esi
    000005dd: 	movl	0x9c(%rsp), %edi
    000005e4: 	addl	%esi, %eax
    000005e6: 	shll	$0x2, %ecx
    000005e9: 	movl	0x98(%rsp), %esi
    000005f0: 	subl	%edx, %ecx
    000005f2: 	subl	%edx, %ecx
    000005f4: 	subl	%edx, %ecx
    000005f6: 	subl	%edx, %ecx
    000005f8: 	movl	0x80(%rsp), %edx
    000005ff: 	addl	%ecx, %eax
    00000601: 	movl	0x74(%rsp), %ecx
    00000605: 	leal	(%rcx,%rdx,2), %edx
    00000608: 	movl	0x88(%rsp), %ecx
    0000060f: 	shll	$0x2, %edx
    00000612: 	subl	%esi, %edx
    00000614: 	subl	%esi, %edx
    00000616: 	subl	%esi, %edx
    00000618: 	subl	%esi, %edx
    0000061a: 	movl	0x7c(%rsp), %esi
    0000061e: 	addl	%edx, %eax
    00000620: 	leal	(%rsi,%rcx,2), %edx
    00000623: 	movl	0x34(%rsp), %ecx
    00000627: 	shll	$0x2, %edx
    0000062a: 	subl	%r15d, %edx
    0000062d: 	subl	%r15d, %edx
    00000630: 	subl	%r15d, %edx
    00000633: 	subl	%r15d, %edx
    00000636: 	movl	0x84(%rsp), %r15d
    0000063e: 	addl	%edx, %eax
    00000640: 	leal	(%r15,%rcx,2), %edx
    00000644: 	shll	$0x2, %edx
    00000647: 	subl	%edi, %edx
    00000649: 	subl	%edi, %edx
    0000064b: 	subl	%edi, %edx
    0000064d: 	subl	%edi, %edx
    0000064f: 	addb	%al, %dl
    00000651: 	jne	.Ltmp619 # Offset: 1617
    00000657: 	addl	$0x1, 0x10(%rsp)
    0000065c: 	movl	0x10(%rsp), %eax
    00000660: 	cmpl	0xac(%rsp), %eax
    00000667: 	jl	.Ltmp620 # Offset: 1639
.Ltmp617:
    0000066d: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000674: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000067b: 	subq	$0x20, %rax
    0000067f: 	cmpq	%rax, %rbx
    00000682: 	je	.Ltmp621 # Offset: 1666
    00000688: 	movq	0xb8(%rsp), %rax
    00000690: 	leaq	0x10(%rbx), %rdi
    00000694: 	movq	%rdi, (%rbx)
    00000697: 	movq	(%rax), %rbp
    0000069a: 	movq	0x8(%rax), %r12
    0000069e: 	movq	%rbp, %rax
    000006a1: 	addq	%r12, %rax
    000006a4: 	je	.Ltmp622 # Offset: 1700
    000006a6: 	testq	%rbp, %rbp
    000006a9: 	je	.Ltmp623 # Offset: 1705
.Ltmp622:
    000006af: 	movq	%r12, 0xc0(%rsp)
    000006b7: 	cmpq	$0xf, %r12
    000006bb: 	ja	.Ltmp624 # Offset: 1723
    000006c1: 	cmpq	$0x1, %r12
    000006c5: 	jne	.Ltmp625 # Offset: 1733
    000006cb: 	movzbl	(%rbp), %eax
    000006cf: 	movb	%al, 0x10(%rbx)
.Ltmp628:
    000006d2: 	movq	%r12, 0x8(%rbx)
    000006d6: 	movb	$0x0, (%rdi,%r12)
    000006db: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000006e2: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000006e9: 	addq	$0x20, %rax
    000006ed: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000006f4: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000006fb: 	je	.Ltmp626 # Offset: 1787
.Ltmp629:
    00000701: 	movq	-0x20(%rax), %rbp
    00000705: 	callq	clock@PLT # Offset: 1797
    0000070a: 	movq	%rax, end_time(%rip)
    00000711: 	movq	0xc8(%rsp), %rdx
    00000719: 	subq	%fs:0x28, %rdx
    00000722: 	jne	.Ltmp627 # Offset: 1826
    00000728: 	subq	start_time(%rip), %rax
    0000072f: 	pxor	%xmm0, %xmm0
    00000733: 	movq	%rbp, %rdi
    00000736: 	cvtsi2sd	%rax, %xmm0
    0000073b: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000743: 	addq	$0xd8, %rsp
    0000074a: 	popq	%rbx
    0000074b: 	popq	%rbp
    0000074c: 	popq	%r12
    0000074e: 	popq	%r13
    00000750: 	popq	%r14
    00000752: 	popq	%r15
    00000754: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1876
    00000759: 	nopl	(%rax) # Size: 7
.Ltmp619:
    00000760: 	movl	$0x1, %edi
    00000765: 	movq	0xb8(%rsp), %rax
    0000076d: 	leaq	DATAat0x4d004(%rip), %rsi
    00000774: 	movaps	%xmm5, (%rsp)
    00000778: 	movq	(%rax), %rdx
    0000077b: 	xorl	%eax, %eax
    0000077d: 	callq	__printf_chk@PLT # Offset: 1917
    00000782: 	addl	$0x1, 0x10(%rsp)
    00000787: 	movl	iterations(%rip), %edi
    0000078d: 	movl	0x10(%rsp), %eax
    00000791: 	movl	%edi, 0xac(%rsp)
    00000798: 	cmpl	%edi, %eax
    0000079a: 	jge	.Ltmp617 # Offset: 1946
    000007a0: 	movzbl	(%r13), %eax
    000007a5: 	pxor	%xmm6, %xmm6
    000007a9: 	movb	%al, 0x17(%rsp)
    000007ad: 	movzbl	0x1(%r13), %eax
    000007b2: 	movb	%al, 0xa1(%rsp)
    000007b9: 	movzbl	0x1f30(%r13), %eax
    000007c1: 	movb	%al, 0x18(%rsp)
    000007c5: 	movzbl	0x1f31(%r13), %eax
    000007cd: 	movb	%al, 0xa2(%rsp)
    000007d4: 	movzbl	0x1f32(%r13), %eax
    000007dc: 	movb	%al, 0xa3(%rsp)
    000007e3: 	movzbl	0x1f33(%r13), %eax
    000007eb: 	movb	%al, 0x19(%rsp)
    000007ef: 	movzbl	0x1f34(%r13), %eax
    000007f7: 	movb	%al, 0x1a(%rsp)
    000007fb: 	movzbl	0x1f35(%r13), %eax
    00000803: 	movb	%al, 0xa4(%rsp)
    0000080a: 	movzbl	0x1f36(%r13), %eax
    00000812: 	movb	%al, 0xa5(%rsp)
    00000819: 	movzbl	0x1f37(%r13), %eax
    00000821: 	movb	%al, 0xa6(%rsp)
    00000828: 	movzbl	0x1f38(%r13), %eax
    00000830: 	movb	%al, 0xa7(%rsp)
    00000837: 	movzbl	0x1f39(%r13), %eax
    0000083f: 	movb	%al, 0xa8(%rsp)
    00000846: 	movzbl	0x1f3a(%r13), %eax
    0000084e: 	movb	%al, 0xa9(%rsp)
    00000855: 	movzbl	0x1f3b(%r13), %eax
    0000085d: 	movb	%al, 0xaa(%rsp)
    00000864: 	movzbl	0x1f3c(%r13), %eax
    0000086c: 	movb	%al, 0x15(%rsp)
    00000870: 	movzbl	0x1f3d(%r13), %eax
    00000878: 	movb	%al, 0x16(%rsp)
    0000087c: 	movzbl	0x1f3e(%r13), %eax
    00000884: 	movdqa	(%rsp), %xmm5
    00000889: 	movdqa	DATAat0x4d5f0(%rip), %xmm4
    00000891: 	movb	%al, 0xab(%rsp)
    00000898: 	movzbl	0x1f3f(%r13), %eax
    000008a0: 	movb	%al, 0x1b(%rsp)
    000008a4: 	jmp	.Ltmp620 # Offset: 2212
.Ltmp624:
    000008a9: 	movq	%rbx, %rdi
    000008ac: 	leaq	0xc0(%rsp), %rsi
    000008b4: 	xorl	%edx, %edx
    000008b6: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 2230
    000008bb: 	movq	%rax, (%rbx)
    000008be: 	movq	%rax, %rdi
    000008c1: 	movq	0xc0(%rsp), %rax
    000008c9: 	movq	%rax, 0x10(%rbx)
.Ltmp630:
    000008cd: 	movq	%r12, %rdx
    000008d0: 	movq	%rbp, %rsi
    000008d3: 	callq	memcpy@PLT # Offset: 2259
    000008d8: 	movq	0xc0(%rsp), %r12
    000008e0: 	movq	(%rbx), %rdi
    000008e3: 	jmp	.Ltmp628 # Offset: 2275
.Ltmp621:
    000008e8: 	movq	0xb8(%rsp), %rsi
    000008f0: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000008f7: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 2295
    000008fc: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000903: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000090a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000911: 	jne	.Ltmp629 # Offset: 2321
.Ltmp626:
    00000917: 	movq	-0x8(%rdx), %rax
    0000091b: 	addq	$0x200, %rax
    00000921: 	jmp	.Ltmp629 # Offset: 2337
.Ltmp625:
    00000926: 	testq	%r12, %r12
    00000929: 	je	.Ltmp628 # Offset: 2345
    0000092f: 	jmp	.Ltmp630 # Offset: 2351
.Ltmp627:
    00000931: 	callq	__stack_chk_fail@PLT # Offset: 2353
.Ltmp623:
    00000936: 	leaq	DATAat0x4d018(%rip), %rdi
    0000093d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 2365
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE4Ia14custom_cse_mulIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z9test_CSE4Ih14custom_cse_subIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 76
  State       : disassembled
  Address     : 0xb210
  Size        : 0x53b
  MaxSize     : 0x540
  Offset      : 0xb210
  Section     : .text
  Orc Section : .local.text._Z9test_CSE4Ih14custom_cse_subIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB075:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movl	%esi, %r12d
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdi, %rbx
    00000016: 	subq	$0x48, %rsp
    0000001a: 	movq	%rcx, 0x20(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x38(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	movl	iterations(%rip), %eax
    00000041: 	movl	%eax, (%rsp)
    00000044: 	testl	%eax, %eax
    00000046: 	jle	.Ltmp631 # Offset: 70
    0000004c: 	leal	-0x1(%r12), %edi
    00000051: 	leal	-0x2(%r12), %eax
    00000056: 	movd	%ebp, %xmm2
    0000005a: 	xorl	%r14d, %r14d
    0000005d: 	movl	%eax, 0x4(%rsp)
    00000061: 	movl	%edi, %eax
    00000063: 	punpcklbw	%xmm2, %xmm2
    00000067: 	movzbl	(%rbx), %r8d
    0000006b: 	shrl	$0x4, %eax
    0000006e: 	movl	%edi, 0x8(%rsp)
    00000072: 	andl	$-0x10, %edi
    00000075: 	punpcklwd	%xmm2, %xmm2
    00000079: 	subl	$0x1, %eax
    0000007c: 	movl	%edi, %r15d
    0000007f: 	shlq	$0x4, %rax
    00000083: 	leaq	0x10(%rbx,%rax), %r13
    00000088: 	leal	0x1(%rdi), %eax
    0000008b: 	movzbl	0x1(%rbx), %edi
    0000008f: 	movl	%eax, 0xc(%rsp)
    00000093: 	nopl	(%rax,%rax) # Size: 5
.Ltmp637:
    00000098: 	movl	%r8d, %ecx
    0000009b: 	movzbl	%dil, %edx
    0000009f: 	movzbl	%r8b, %esi
    000000a3: 	subl	%edi, %ecx
    000000a5: 	leal	(%rbp,%rcx), %eax
    000000a9: 	movzbl	%al, %eax
    000000ac: 	leal	(%rdx,%rax,2), %edx
    000000af: 	leal	(%rsi,%rax,2), %eax
    000000b2: 	leal	(%rax,%rax,2), %eax
    000000b5: 	subl	%edx, %eax
    000000b7: 	addl	%ecx, %eax
    000000b9: 	subl	%edx, %eax
    000000bb: 	subl	%edx, %eax
    000000bd: 	cmpl	$0x1, %r12d
    000000c1: 	jle	.Ltmp632 # Offset: 193
    000000c7: 	cmpl	$0xe, 0x4(%rsp)
    000000cc: 	jbe	.Ltmp633 # Offset: 204
    000000d2: 	pshufd	$0x0, %xmm2, %xmm5
    000000d7: 	movq	%rbx, %rdx
    000000da: 	pxor	%xmm4, %xmm4
    000000de: 	nop # Size: 2
.Ltmp634:
    000000e0: 	movdqu	(%rdx), %xmm1
    000000e4: 	movdqu	0x1(%rdx), %xmm6
    000000e9: 	addq	$0x10, %rdx
    000000ed: 	movdqu	-0x10(%rdx), %xmm0
    000000f2: 	paddb	%xmm5, %xmm1
    000000f6: 	movdqa	%xmm1, %xmm3
    000000fa: 	psubb	%xmm6, %xmm3
    000000fe: 	paddb	%xmm3, %xmm0
    00000102: 	paddb	%xmm3, %xmm1
    00000106: 	paddb	%xmm3, %xmm0
    0000010a: 	movdqa	%xmm1, %xmm3
    0000010e: 	paddb	%xmm0, %xmm0
    00000112: 	paddb	%xmm1, %xmm3
    00000116: 	paddb	%xmm0, %xmm0
    0000011a: 	psubb	%xmm1, %xmm0
    0000011e: 	paddb	%xmm3, %xmm1
    00000122: 	psubb	%xmm1, %xmm0
    00000126: 	paddb	%xmm0, %xmm4
    0000012a: 	cmpq	%r13, %rdx
    0000012d: 	jne	.Ltmp634 # Offset: 301
    0000012f: 	movdqa	%xmm4, %xmm0
    00000133: 	psrldq	$0x8, %xmm0
    00000138: 	paddb	%xmm0, %xmm4
    0000013c: 	pxor	%xmm0, %xmm0
    00000140: 	psadbw	%xmm0, %xmm4
    00000144: 	movd	%xmm4, %edx
    00000148: 	addl	%edx, %eax
    0000014a: 	cmpl	0x8(%rsp), %r15d
    0000014f: 	je	.Ltmp632 # Offset: 335
    00000155: 	movl	0xc(%rsp), %ecx
    00000159: 	movl	%r15d, %r10d
.Ltmp645:
    0000015c: 	movl	%r12d, %edx
    0000015f: 	subl	%r10d, %edx
    00000162: 	leal	-0x1(%rdx), %esi
    00000165: 	subl	$0x2, %edx
    00000168: 	cmpl	$0x6, %edx
    0000016b: 	jbe	.Ltmp635 # Offset: 363
    0000016d: 	movl	%ebp, %r9d
    00000170: 	movzbl	%bpl, %r11d
    00000174: 	movq	(%rbx,%r10), %xmm0
    0000017a: 	movq	0x1(%rbx,%r10), %xmm4
    00000181: 	shll	$0x8, %r9d
    00000185: 	orl	%r11d, %r9d
    00000188: 	movd	%r9d, %xmm5
    0000018d: 	pshuflw	$0x0, %xmm5, %xmm1
    00000192: 	paddb	%xmm0, %xmm1
    00000196: 	movdqa	%xmm1, %xmm3
    0000019a: 	psubb	%xmm4, %xmm3
    0000019e: 	paddb	%xmm3, %xmm0
    000001a2: 	paddb	%xmm3, %xmm1
    000001a6: 	paddb	%xmm3, %xmm0
    000001aa: 	paddb	%xmm1, %xmm1
    000001ae: 	paddb	%xmm0, %xmm0
    000001b2: 	paddb	%xmm0, %xmm0
    000001b6: 	psubb	%xmm1, %xmm0
    000001ba: 	psubb	%xmm1, %xmm0
    000001be: 	pxor	%xmm1, %xmm1
    000001c2: 	movdqa	%xmm0, %xmm7
    000001c6: 	psadbw	%xmm1, %xmm7
    000001ca: 	movq	%xmm7, %rdx
    000001cf: 	movq	%xmm7, 0x28(%rsp)
    000001d5: 	movl	%edx, %r9d
    000001d8: 	movl	%esi, %edx
    000001da: 	andl	$-0x8, %edx
    000001dd: 	addl	%r9d, %eax
    000001e0: 	addl	%edx, %ecx
    000001e2: 	cmpl	%esi, %edx
    000001e4: 	je	.Ltmp632 # Offset: 484
.Ltmp635:
    000001ea: 	movslq	%ecx, %rdx
    000001ed: 	addq	%rbx, %rdx
    000001f0: 	movzbl	-0x1(%rdx), %r11d
    000001f5: 	movzbl	(%rdx), %r9d
    000001f9: 	leal	(%r11,%rbp), %edx
    000001fd: 	movl	%r9d, %esi
    00000200: 	subl	%r9d, %edx
    00000203: 	movzbl	%dl, %edx
    00000206: 	leal	(%r9,%rdx,2), %r10d
    0000020a: 	leal	(%r11,%rdx,2), %edx
    0000020e: 	leal	(%rax,%rdx,4), %edx
    00000211: 	subl	%r10d, %edx
    00000214: 	subl	%r10d, %edx
    00000217: 	addl	%r10d, %r10d
    0000021a: 	movl	%edx, %eax
    0000021c: 	leal	0x1(%rcx), %edx
    0000021f: 	subl	%r10d, %eax
    00000222: 	cmpl	%edx, %r12d
    00000225: 	jle	.Ltmp632 # Offset: 549
    0000022b: 	movslq	%edx, %rdx
    0000022e: 	addl	%ebp, %esi
    00000230: 	movzbl	(%rbx,%rdx), %r10d
    00000235: 	subl	%r10d, %esi
    00000238: 	movl	%r10d, %edx
    0000023b: 	movzbl	%sil, %esi
    0000023f: 	leal	(%r10,%rsi,2), %r11d
    00000243: 	leal	(%r9,%rsi,2), %esi
    00000247: 	shll	$0x2, %esi
    0000024a: 	subl	%r11d, %esi
    0000024d: 	subl	%r11d, %esi
    00000250: 	addl	%r11d, %r11d
    00000253: 	subl	%r11d, %esi
    00000256: 	addl	%esi, %eax
    00000258: 	leal	0x2(%rcx), %esi
    0000025b: 	cmpl	%esi, %r12d
    0000025e: 	jle	.Ltmp632 # Offset: 606
    00000264: 	movslq	%esi, %rsi
    00000267: 	addl	%ebp, %edx
    00000269: 	movzbl	(%rbx,%rsi), %r9d
    0000026e: 	subl	%r9d, %edx
    00000271: 	movl	%r9d, %esi
    00000274: 	movzbl	%dl, %edx
    00000277: 	leal	(%r9,%rdx,2), %r11d
    0000027b: 	leal	(%r10,%rdx,2), %edx
    0000027f: 	shll	$0x2, %edx
    00000282: 	subl	%r11d, %edx
    00000285: 	subl	%r11d, %edx
    00000288: 	addl	%r11d, %r11d
    0000028b: 	subl	%r11d, %edx
    0000028e: 	addl	%edx, %eax
    00000290: 	leal	0x3(%rcx), %edx
    00000293: 	cmpl	%edx, %r12d
    00000296: 	jle	.Ltmp632 # Offset: 662
    0000029c: 	movslq	%edx, %rdx
    0000029f: 	addl	%ebp, %esi
    000002a1: 	movzbl	(%rbx,%rdx), %r11d
    000002a6: 	subl	%r11d, %esi
    000002a9: 	movl	%r11d, %r10d
    000002ac: 	movzbl	%sil, %edx
    000002b0: 	leal	(%r11,%rdx,2), %esi
    000002b4: 	leal	(%r9,%rdx,2), %edx
    000002b8: 	shll	$0x2, %edx
    000002bb: 	subl	%esi, %edx
    000002bd: 	subl	%esi, %edx
    000002bf: 	addl	%esi, %esi
    000002c1: 	subl	%esi, %edx
    000002c3: 	addl	%edx, %eax
    000002c5: 	leal	0x4(%rcx), %edx
    000002c8: 	cmpl	%edx, %r12d
    000002cb: 	jle	.Ltmp632 # Offset: 715
    000002d1: 	movslq	%edx, %rdx
    000002d4: 	addl	%ebp, %r10d
    000002d7: 	movzbl	(%rbx,%rdx), %r9d
    000002dc: 	subl	%r9d, %r10d
    000002df: 	movl	%r9d, %esi
    000002e2: 	movzbl	%r10b, %edx
    000002e6: 	leal	(%r9,%rdx,2), %r10d
    000002ea: 	leal	(%r11,%rdx,2), %edx
    000002ee: 	shll	$0x2, %edx
    000002f1: 	subl	%r10d, %edx
    000002f4: 	subl	%r10d, %edx
    000002f7: 	addl	%r10d, %r10d
    000002fa: 	subl	%r10d, %edx
    000002fd: 	addl	%edx, %eax
    000002ff: 	leal	0x5(%rcx), %edx
    00000302: 	cmpl	%edx, %r12d
    00000305: 	jle	.Ltmp632 # Offset: 773
    00000307: 	movslq	%edx, %rdx
    0000030a: 	addl	%ebp, %esi
    0000030c: 	addl	$0x6, %ecx
    0000030f: 	movzbl	(%rbx,%rdx), %r11d
    00000314: 	subl	%r11d, %esi
    00000317: 	movl	%r11d, %r10d
    0000031a: 	movzbl	%sil, %edx
    0000031e: 	leal	(%r11,%rdx,2), %esi
    00000322: 	leal	(%r9,%rdx,2), %edx
    00000326: 	shll	$0x2, %edx
    00000329: 	subl	%esi, %edx
    0000032b: 	subl	%esi, %edx
    0000032d: 	addl	%esi, %esi
    0000032f: 	subl	%esi, %edx
    00000331: 	addl	%edx, %eax
    00000333: 	cmpl	%ecx, %r12d
    00000336: 	jle	.Ltmp632 # Offset: 822
    00000338: 	movslq	%ecx, %rcx
    0000033b: 	addl	%ebp, %r10d
    0000033e: 	movzbl	(%rbx,%rcx), %ecx
    00000342: 	subl	%ecx, %r10d
    00000345: 	movzbl	%r10b, %edx
    00000349: 	leal	(%rcx,%rdx,2), %ecx
    0000034c: 	leal	(%r11,%rdx,2), %edx
    00000350: 	shll	$0x2, %edx
    00000353: 	subl	%ecx, %edx
    00000355: 	subl	%ecx, %edx
    00000357: 	addl	%ecx, %ecx
    00000359: 	subl	%ecx, %edx
    0000035b: 	addl	%edx, %eax
.Ltmp632:
    0000035d: 	testb	%al, %al
    0000035f: 	jne	.Ltmp636 # Offset: 863
    00000365: 	addl	$0x1, %r14d
    00000369: 	cmpl	(%rsp), %r14d
    0000036d: 	jl	.Ltmp637 # Offset: 877
.Ltmp631:
    00000373: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000037a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000381: 	subq	$0x20, %rax
    00000385: 	cmpq	%rax, %rbx
    00000388: 	je	.Ltmp638 # Offset: 904
    0000038e: 	movq	0x20(%rsp), %rax
    00000393: 	leaq	0x10(%rbx), %rdi
    00000397: 	movq	%rdi, (%rbx)
    0000039a: 	movq	(%rax), %rbp
    0000039d: 	movq	0x8(%rax), %r12
    000003a1: 	movq	%rbp, %rax
    000003a4: 	addq	%r12, %rax
    000003a7: 	je	.Ltmp639 # Offset: 935
    000003a9: 	testq	%rbp, %rbp
    000003ac: 	je	.Ltmp640 # Offset: 940
.Ltmp639:
    000003b2: 	movq	%r12, 0x30(%rsp)
    000003b7: 	cmpq	$0xf, %r12
    000003bb: 	ja	.Ltmp641 # Offset: 955
    000003c1: 	cmpq	$0x1, %r12
    000003c5: 	jne	.Ltmp642 # Offset: 965
    000003cb: 	movzbl	(%rbp), %eax
    000003cf: 	movb	%al, 0x10(%rbx)
.Ltmp646:
    000003d2: 	movq	%r12, 0x8(%rbx)
    000003d6: 	movb	$0x0, (%rdi,%r12)
    000003db: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000003e2: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003e9: 	addq	$0x20, %rax
    000003ed: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000003f4: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000003fb: 	je	.Ltmp643 # Offset: 1019
.Ltmp647:
    00000401: 	movq	-0x20(%rax), %rbp
    00000405: 	callq	clock@PLT # Offset: 1029
    0000040a: 	movq	%rax, end_time(%rip)
    00000411: 	movq	0x38(%rsp), %rdx
    00000416: 	subq	%fs:0x28, %rdx
    0000041f: 	jne	.Ltmp644 # Offset: 1055
    00000425: 	subq	start_time(%rip), %rax
    0000042c: 	pxor	%xmm0, %xmm0
    00000430: 	movq	%rbp, %rdi
    00000433: 	cvtsi2sd	%rax, %xmm0
    00000438: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000440: 	addq	$0x48, %rsp
    00000444: 	popq	%rbx
    00000445: 	popq	%rbp
    00000446: 	popq	%r12
    00000448: 	popq	%r13
    0000044a: 	popq	%r14
    0000044c: 	popq	%r15
    0000044e: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1102
    00000453: 	nopl	(%rax,%rax) # Size: 5
.Ltmp636:
    00000458: 	movq	0x20(%rsp), %rax
    0000045d: 	leaq	DATAat0x4d004(%rip), %rsi
    00000464: 	movl	$0x1, %edi
    00000469: 	movaps	%xmm2, 0x10(%rsp)
    0000046e: 	addl	$0x1, %r14d
    00000472: 	movq	(%rax), %rdx
    00000475: 	xorl	%eax, %eax
    00000477: 	callq	__printf_chk@PLT # Offset: 1143
    0000047c: 	movl	iterations(%rip), %eax
    00000482: 	movl	%eax, (%rsp)
    00000485: 	cmpl	%eax, %r14d
    00000488: 	jge	.Ltmp631 # Offset: 1160
    0000048e: 	movzbl	(%rbx), %r8d
    00000492: 	movzbl	0x1(%rbx), %edi
    00000496: 	movdqa	0x10(%rsp), %xmm2
    0000049c: 	jmp	.Ltmp637 # Offset: 1180
.Ltmp633:
    000004a1: 	xorl	%r10d, %r10d
    000004a4: 	movl	$0x1, %ecx
    000004a9: 	jmp	.Ltmp645 # Offset: 1193
.Ltmp641:
    000004ae: 	movq	%rbx, %rdi
    000004b1: 	leaq	0x30(%rsp), %rsi
    000004b6: 	xorl	%edx, %edx
    000004b8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1208
    000004bd: 	movq	%rax, (%rbx)
    000004c0: 	movq	%rax, %rdi
    000004c3: 	movq	0x30(%rsp), %rax
    000004c8: 	movq	%rax, 0x10(%rbx)
.Ltmp648:
    000004cc: 	movq	%r12, %rdx
    000004cf: 	movq	%rbp, %rsi
    000004d2: 	callq	memcpy@PLT # Offset: 1234
    000004d7: 	movq	0x30(%rsp), %r12
    000004dc: 	movq	(%rbx), %rdi
    000004df: 	jmp	.Ltmp646 # Offset: 1247
.Ltmp638:
    000004e4: 	movq	0x20(%rsp), %rsi
    000004e9: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000004f0: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1264
    000004f5: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000004fc: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000503: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000050a: 	jne	.Ltmp647 # Offset: 1290
.Ltmp643:
    00000510: 	movq	-0x8(%rdx), %rax
    00000514: 	addq	$0x200, %rax
    0000051a: 	jmp	.Ltmp647 # Offset: 1306
.Ltmp642:
    0000051f: 	testq	%r12, %r12
    00000522: 	je	.Ltmp646 # Offset: 1314
    00000528: 	jmp	.Ltmp648 # Offset: 1320
.Ltmp644:
    0000052a: 	callq	__stack_chk_fail@PLT # Offset: 1322
.Ltmp640:
    0000052f: 	leaq	DATAat0x4d018(%rip), %rdi
    00000536: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1334
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE4Ih14custom_cse_subIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSE4Ia14custom_cse_addIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z9test_CSE4Ia14custom_cse_addIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z9test_CSE4Ia14custom_cse_addIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/simple_types_cse.cpp/1
  Number      : 77
  State       : disassembled
  Address     : 0xb750
  Size        : 0x5e2
  MaxSize     : 0x5f0
  Offset      : 0xb750
  Section     : .text
  Orc Section : .local.text._Z9test_CSE4Ia14custom_cse_addIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB076:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movl	%esi, %ebp
    0000000b: 	pushq	%rbx
    0000000c: 	subq	$0x78, %rsp
    00000010: 	movq	%rdi, 0x38(%rsp)
    00000015: 	movq	%rdx, 0x50(%rsp)
    0000001a: 	movq	%fs:0x28, %rax
    00000023: 	movq	%rax, 0x68(%rsp)
    00000028: 	xorl	%eax, %eax
    0000002a: 	callq	clock@PLT # Offset: 42
    0000002f: 	movq	%rax, start_time(%rip)
    00000036: 	movl	iterations(%rip), %eax
    0000003c: 	movl	%eax, 0x44(%rsp)
    00000040: 	testl	%eax, %eax
    00000042: 	jle	.Ltmp649 # Offset: 66
    00000048: 	movq	0x38(%rsp), %rax
    0000004d: 	movd	%ebp, %xmm4
    00000051: 	movl	$0x0, 0x2c(%rsp)
    00000059: 	pxor	%xmm7, %xmm7
    0000005d: 	punpcklbw	%xmm4, %xmm4
    00000061: 	movzbl	(%rax), %esi
    00000064: 	movzbl	0x1(%rax), %edi
    00000068: 	punpcklwd	%xmm4, %xmm4
    0000006c: 	movzbl	0x1f38(%rax), %ebx
    00000073: 	pshufd	$0x0, %xmm4, %xmm4
    00000078: 	movq	0x1f30(%rax), %xmm6
    00000080: 	movq	0x1f31(%rax), %xmm5
    00000088: 	movb	%sil, 0x43(%rsp)
    0000008d: 	leaq	0x1f30(%rax), %rsi
    00000094: 	movb	%dil, 0x42(%rsp)
    00000099: 	movzbl	%bpl, %edi
    0000009d: 	movq	%rsi, 0x48(%rsp)
    000000a2: 	movzbl	0x1f39(%rax), %esi
    000000a9: 	movw	%di, 0x40(%rsp)
    000000ae: 	movzbl	0x1f3a(%rax), %edi
    000000b5: 	movb	%bl, 0x12(%rsp)
    000000b9: 	movzbl	0x1f3b(%rax), %ebx
    000000c0: 	movb	%sil, 0x32(%rsp)
    000000c5: 	movzbl	0x1f3c(%rax), %esi
    000000cc: 	movb	%dil, 0x33(%rsp)
    000000d1: 	movzbl	0x1f3d(%rax), %edi
    000000d8: 	movb	%bl, 0x34(%rsp)
    000000dc: 	movzbl	0x1f3e(%rax), %ebx
    000000e3: 	movzbl	0x1f3f(%rax), %eax
    000000ea: 	movb	%sil, 0x35(%rsp)
    000000ef: 	movb	%dil, 0x36(%rsp)
    000000f4: 	movb	%bl, 0x37(%rsp)
    000000f8: 	movb	%al, 0x13(%rsp)
    000000fc: 	nopl	(%rax) # Size: 4
.Ltmp652:
    00000100: 	movsbl	0x43(%rsp), %ecx
    00000105: 	movsbl	0x42(%rsp), %edx
    0000010a: 	pxor	%xmm3, %xmm3
    0000010e: 	movl	%ecx, %eax
    00000110: 	movl	%ecx, %edi
    00000112: 	movl	%edx, %ebx
    00000114: 	addl	%edx, %eax
    00000116: 	subl	%ebx, %edi
    00000118: 	addl	%ebp, %eax
    0000011a: 	movsbl	%al, %eax
    0000011d: 	leal	(%rdx,%rax,2), %edx
    00000120: 	leal	(%rcx,%rax,2), %eax
    00000123: 	movl	%edi, %ecx
    00000125: 	leal	(%rax,%rax,2), %eax
    00000128: 	addl	%ecx, %eax
    0000012a: 	movq	0x48(%rsp), %rcx
    0000012f: 	subl	%edx, %eax
    00000131: 	subl	%edx, %eax
    00000133: 	subl	%edx, %eax
    00000135: 	movq	0x38(%rsp), %rdx
    0000013a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp650:
    00000140: 	movdqu	(%rdx), %xmm1
    00000144: 	movdqu	0x1(%rdx), %xmm2
    00000149: 	addq	$0x10, %rdx
    0000014d: 	movdqu	-0x10(%rdx), %xmm0
    00000152: 	paddb	%xmm1, %xmm2
    00000156: 	movdqu	-0xf(%rdx), %xmm1
    0000015b: 	paddb	%xmm4, %xmm2
    0000015f: 	paddb	%xmm2, %xmm0
    00000163: 	paddb	%xmm2, %xmm1
    00000167: 	paddb	%xmm2, %xmm0
    0000016b: 	paddb	%xmm2, %xmm1
    0000016f: 	paddb	%xmm0, %xmm0
    00000173: 	movdqa	%xmm1, %xmm2
    00000177: 	psubb	%xmm1, %xmm3
    0000017b: 	paddb	%xmm0, %xmm0
    0000017f: 	paddb	%xmm1, %xmm2
    00000183: 	psubb	%xmm1, %xmm0
    00000187: 	psubb	%xmm2, %xmm0
    0000018b: 	paddb	%xmm0, %xmm3
    0000018f: 	cmpq	%rdx, %rcx
    00000192: 	jne	.Ltmp650 # Offset: 402
    00000194: 	movdqa	%xmm3, %xmm0
    00000198: 	movzwl	0x40(%rsp), %ebx
    0000019d: 	movdqa	%xmm5, %xmm1
    000001a1: 	movsbl	0x32(%rsp), %r14d
    000001a7: 	psrldq	$0x8, %xmm0
    000001ac: 	paddb	%xmm6, %xmm1
    000001b0: 	movzbl	0x12(%rsp), %edi
    000001b5: 	movsbl	0x33(%rsp), %r12d
    000001bb: 	paddb	%xmm0, %xmm3
    000001bf: 	movsbl	0x36(%rsp), %r8d
    000001c5: 	psadbw	%xmm7, %xmm3
    000001c9: 	movl	%r12d, %esi
    000001cc: 	movd	%xmm3, %edx
    000001d0: 	movl	%r8d, %r9d
    000001d3: 	movl	%r8d, 0x1c(%rsp)
    000001d8: 	addl	%edx, %eax
    000001da: 	movsbl	0x35(%rsp), %edx
    000001df: 	movb	%al, 0x30(%rsp)
    000001e3: 	movl	%ebx, %eax
    000001e5: 	shll	$0x8, %eax
    000001e8: 	movl	%edx, 0x18(%rsp)
    000001ec: 	orl	%ebx, %eax
    000001ee: 	movl	%r14d, %ebx
    000001f1: 	movd	%eax, %xmm3
    000001f5: 	addl	%r12d, %ebx
    000001f8: 	pshuflw	$0x0, %xmm3, %xmm0
    000001fd: 	paddb	%xmm0, %xmm1
    00000201: 	movdqa	%xmm1, %xmm0
    00000205: 	movdqa	%xmm1, %xmm2
    00000209: 	paddb	%xmm6, %xmm0
    0000020d: 	paddb	%xmm5, %xmm2
    00000211: 	paddb	%xmm1, %xmm0
    00000215: 	paddb	%xmm2, %xmm1
    00000219: 	paddb	%xmm0, %xmm0
    0000021d: 	paddb	%xmm1, %xmm1
    00000221: 	paddb	%xmm0, %xmm0
    00000225: 	psubb	%xmm1, %xmm0
    00000229: 	psubb	%xmm1, %xmm0
    0000022d: 	pxor	%xmm1, %xmm1
    00000231: 	movdqa	%xmm0, %xmm3
    00000235: 	psadbw	%xmm1, %xmm3
    00000239: 	movq	%xmm3, %rax
    0000023e: 	movq	%xmm3, 0x58(%rsp)
    00000244: 	movb	%al, 0x31(%rsp)
    00000248: 	leal	(%rdi,%rbp), %eax
    0000024b: 	movl	%ebx, %edi
    0000024d: 	movsbl	0x34(%rsp), %ebx
    00000252: 	addl	%r14d, %eax
    00000255: 	addl	%ebp, %edi
    00000257: 	movl	%ebx, %ecx
    00000259: 	movsbl	%al, %eax
    0000025c: 	addl	%ebx, %esi
    0000025e: 	movsbl	%dil, %edi
    00000262: 	addl	%edx, %ecx
    00000264: 	leal	(%r14,%rax,2), %r15d
    00000268: 	leal	(%r12,%rdi,2), %r13d
    0000026c: 	addl	%ebp, %esi
    0000026e: 	addl	%ebp, %ecx
    00000270: 	leal	(%r14,%rdi,2), %edi
    00000274: 	movsbl	%sil, %esi
    00000278: 	movl	%ebx, 0x14(%rsp)
    0000027c: 	movsbl	%cl, %ecx
    0000027f: 	shll	$0x2, %edi
    00000282: 	leal	(%rbx,%rsi,2), %ebx
    00000285: 	leal	(%r12,%rsi,2), %esi
    00000289: 	leal	(%rdx,%rcx,2), %r11d
    0000028d: 	addl	%r8d, %edx
    00000290: 	subl	%r13d, %edi
    00000293: 	shll	$0x2, %esi
    00000296: 	addl	%ebp, %edx
    00000298: 	subl	%r13d, %edi
    0000029b: 	subl	%ebx, %esi
    0000029d: 	movsbl	%dl, %edx
    000002a0: 	subl	%r13d, %edi
    000002a3: 	subl	%ebx, %esi
    000002a5: 	leal	(%r8,%rdx,2), %r10d
    000002a9: 	movl	%edx, 0x20(%rsp)
    000002ad: 	movzbl	0x37(%rsp), %edx
    000002b2: 	subl	%r13d, %edi
    000002b5: 	addl	%edx, %r9d
    000002b8: 	movsbl	%dl, %r8d
    000002bc: 	addl	%ebp, %r9d
    000002bf: 	movl	%r8d, 0x24(%rsp)
    000002c4: 	movsbl	%r9b, %r9d
    000002c8: 	movl	%r9d, 0x28(%rsp)
    000002cd: 	leal	(%r8,%r9,2), %r9d
    000002d1: 	movzbl	0x13(%rsp), %r8d
    000002d7: 	addl	%edx, %r8d
    000002da: 	addl	%ebp, %r8d
    000002dd: 	movsbl	%r8b, %edx
    000002e1: 	movsbl	0x13(%rsp), %r8d
    000002e7: 	movl	%edx, (%rsp)
    000002ea: 	leal	(%r8,%rdx,2), %r8d
    000002ee: 	movzbl	0x12(%rsp), %edx
    000002f3: 	leal	(%rdx,%rax,2), %eax
    000002f6: 	movl	0x20(%rsp), %edx
    000002fa: 	shll	$0x2, %eax
    000002fd: 	subl	%r15d, %eax
    00000300: 	subl	%r15d, %eax
    00000303: 	subl	%r15d, %eax
    00000306: 	subl	%r15d, %eax
    00000309: 	movzbl	0x30(%rsp), %r15d
    0000030f: 	addb	0x31(%rsp), %r15b
    00000314: 	addl	%r15d, %eax
    00000317: 	addl	%edi, %eax
    00000319: 	subl	%ebx, %esi
    0000031b: 	movl	0x1c(%rsp), %edi
    0000031f: 	subl	%ebx, %esi
    00000321: 	movl	0x14(%rsp), %ebx
    00000325: 	addl	%esi, %eax
    00000327: 	leal	(%rbx,%rcx,2), %ecx
    0000032a: 	movl	0x28(%rsp), %ebx
    0000032e: 	shll	$0x2, %ecx
    00000331: 	subl	%r11d, %ecx
    00000334: 	subl	%r11d, %ecx
    00000337: 	subl	%r11d, %ecx
    0000033a: 	subl	%r11d, %ecx
    0000033d: 	movl	0x18(%rsp), %r11d
    00000342: 	addl	%ecx, %eax
    00000344: 	leal	(%r11,%rdx,2), %edx
    00000348: 	shll	$0x2, %edx
    0000034b: 	subl	%r10d, %edx
    0000034e: 	subl	%r10d, %edx
    00000351: 	subl	%r10d, %edx
    00000354: 	subl	%r10d, %edx
    00000357: 	addl	%edx, %eax
    00000359: 	leal	(%rdi,%rbx,2), %edx
    0000035c: 	movl	0x24(%rsp), %edi
    00000360: 	shll	$0x2, %edx
    00000363: 	subl	%r9d, %edx
    00000366: 	subl	%r9d, %edx
    00000369: 	subl	%r9d, %edx
    0000036c: 	subl	%r9d, %edx
    0000036f: 	addl	%edx, %eax
    00000371: 	movl	(%rsp), %edx
    00000374: 	leal	(%rdi,%rdx,2), %edx
    00000377: 	shll	$0x2, %edx
    0000037a: 	subl	%r8d, %edx
    0000037d: 	subl	%r8d, %edx
    00000380: 	subl	%r8d, %edx
    00000383: 	subl	%r8d, %edx
    00000386: 	addb	%al, %dl
    00000388: 	jne	.Ltmp651 # Offset: 904
    0000038e: 	addl	$0x1, 0x2c(%rsp)
    00000393: 	movl	0x2c(%rsp), %eax
    00000397: 	cmpl	0x44(%rsp), %eax
    0000039b: 	jl	.Ltmp652 # Offset: 923
.Ltmp649:
    000003a1: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000003a8: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000003af: 	subq	$0x20, %rax
    000003b3: 	cmpq	%rax, %rbx
    000003b6: 	je	.Ltmp653 # Offset: 950
    000003bc: 	movq	0x50(%rsp), %rax
    000003c1: 	leaq	0x10(%rbx), %rdi
    000003c5: 	movq	%rdi, (%rbx)
    000003c8: 	movq	(%rax), %rbp
    000003cb: 	movq	0x8(%rax), %r12
    000003cf: 	movq	%rbp, %rax
    000003d2: 	addq	%r12, %rax
    000003d5: 	je	.Ltmp654 # Offset: 981
    000003d7: 	testq	%rbp, %rbp
    000003da: 	je	.Ltmp655 # Offset: 986
.Ltmp654:
    000003e0: 	movq	%r12, 0x60(%rsp)
    000003e5: 	cmpq	$0xf, %r12
    000003e9: 	ja	.Ltmp656 # Offset: 1001
    000003ef: 	cmpq	$0x1, %r12
    000003f3: 	jne	.Ltmp657 # Offset: 1011
    000003f9: 	movzbl	(%rbp), %eax
    000003fd: 	movb	%al, 0x10(%rbx)
.Ltmp660:
    00000400: 	movq	%r12, 0x8(%rbx)
    00000404: 	movb	$0x0, (%rdi,%r12)
    00000409: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000410: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000417: 	addq	$0x20, %rax
    0000041b: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000422: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000429: 	je	.Ltmp658 # Offset: 1065
.Ltmp661:
    0000042f: 	movq	-0x20(%rax), %rbp
    00000433: 	callq	clock@PLT # Offset: 1075
    00000438: 	movq	%rax, end_time(%rip)
    0000043f: 	movq	0x68(%rsp), %rdx
    00000444: 	subq	%fs:0x28, %rdx
    0000044d: 	jne	.Ltmp659 # Offset: 1101
    00000453: 	subq	start_time(%rip), %rax
    0000045a: 	pxor	%xmm0, %xmm0
    0000045e: 	movq	%rbp, %rdi
    00000461: 	cvtsi2sd	%rax, %xmm0
    00000466: 	divsd	DATAat0x4d640(%rip), %xmm0
    0000046e: 	addq	$0x78, %rsp
    00000472: 	popq	%rbx
    00000473: 	popq	%rbp
    00000474: 	popq	%r12
    00000476: 	popq	%r13
    00000478: 	popq	%r14
    0000047a: 	popq	%r15
    0000047c: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1148
    00000481: 	nopl	(%rax) # Size: 7
.Ltmp651:
    00000488: 	movq	0x50(%rsp), %rax
    0000048d: 	movl	$0x1, %edi
    00000492: 	leaq	DATAat0x4d004(%rip), %rsi
    00000499: 	movaps	%xmm4, (%rsp)
    0000049d: 	movq	(%rax), %rdx
    000004a0: 	xorl	%eax, %eax
    000004a2: 	callq	__printf_chk@PLT # Offset: 1186
    000004a7: 	addl	$0x1, 0x2c(%rsp)
    000004ac: 	movl	iterations(%rip), %edi
    000004b2: 	movl	0x2c(%rsp), %eax
    000004b6: 	movl	%edi, 0x44(%rsp)
    000004ba: 	cmpl	%edi, %eax
    000004bc: 	jge	.Ltmp649 # Offset: 1212
    000004c2: 	movq	0x38(%rsp), %rax
    000004c7: 	movdqa	(%rsp), %xmm4
    000004cc: 	pxor	%xmm7, %xmm7
    000004d0: 	movzbl	(%rax), %esi
    000004d3: 	movzbl	0x1f3a(%rax), %edi
    000004da: 	movq	0x1f30(%rax), %xmm6
    000004e2: 	movq	0x1f31(%rax), %xmm5
    000004ea: 	movb	%sil, 0x43(%rsp)
    000004ef: 	movzbl	0x1(%rax), %esi
    000004f3: 	movb	%dil, 0x33(%rsp)
    000004f8: 	movzbl	0x1f3c(%rax), %edi
    000004ff: 	movb	%sil, 0x42(%rsp)
    00000504: 	movzbl	0x1f38(%rax), %esi
    0000050b: 	movb	%dil, 0x35(%rsp)
    00000510: 	movzbl	0x1f3e(%rax), %edi
    00000517: 	movb	%sil, 0x12(%rsp)
    0000051c: 	movzbl	0x1f39(%rax), %esi
    00000523: 	movb	%dil, 0x37(%rsp)
    00000528: 	movb	%sil, 0x32(%rsp)
    0000052d: 	movzbl	0x1f3b(%rax), %esi
    00000534: 	movb	%sil, 0x34(%rsp)
    00000539: 	movzbl	0x1f3d(%rax), %esi
    00000540: 	movzbl	0x1f3f(%rax), %eax
    00000547: 	movb	%sil, 0x36(%rsp)
    0000054c: 	movb	%al, 0x13(%rsp)
    00000550: 	jmp	.Ltmp652 # Offset: 1360
.Ltmp656:
    00000555: 	movq	%rbx, %rdi
    00000558: 	leaq	0x60(%rsp), %rsi
    0000055d: 	xorl	%edx, %edx
    0000055f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1375
    00000564: 	movq	%rax, (%rbx)
    00000567: 	movq	%rax, %rdi
    0000056a: 	movq	0x60(%rsp), %rax
    0000056f: 	movq	%rax, 0x10(%rbx)
.Ltmp662:
    00000573: 	movq	%r12, %rdx
    00000576: 	movq	%rbp, %rsi
    00000579: 	callq	memcpy@PLT # Offset: 1401
    0000057e: 	movq	0x60(%rsp), %r12
    00000583: 	movq	(%rbx), %rdi
    00000586: 	jmp	.Ltmp660 # Offset: 1414
.Ltmp653:
    0000058b: 	movq	0x50(%rsp), %rsi
    00000590: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000597: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1431
    0000059c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000005a3: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000005aa: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000005b1: 	jne	.Ltmp661 # Offset: 1457
.Ltmp658:
    000005b7: 	movq	-0x8(%rdx), %rax
    000005bb: 	addq	$0x200, %rax
    000005c1: 	jmp	.Ltmp661 # Offset: 1473
.Ltmp657:
    000005c6: 	testq	%r12, %r12
    000005c9: 	je	.Ltmp660 # Offset: 1481
    000005cf: 	jmp	.Ltmp662 # Offset: 1487
.Ltmp659:
    000005d1: 	callq	__stack_chk_fail@PLT # Offset: 1489
.Ltmp655:
    000005d6: 	leaq	DATAat0x4d018(%rip), %rdi
    000005dd: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1501
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE4Ia14custom_cse_addIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z9test_CSE4Ij14custom_cse_divIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 78
  State       : disassembled
  Address     : 0xbd40
  Size        : 0x267
  MaxSize     : 0x270
  Offset      : 0xbd40
  Section     : .text
  Orc Section : .local.text._Z9test_CSE4Ij14custom_cse_divIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB077:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rcx, %rbp
    00000016: 	pushq	%rbx
    00000017: 	movl	%edx, %ebx
    00000019: 	subq	$0x18, %rsp
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x8(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	callq	clock@PLT # Offset: 45
    00000032: 	movl	iterations(%rip), %r11d
    00000039: 	movq	%rax, start_time(%rip)
    00000040: 	testl	%r11d, %r11d
    00000043: 	jle	.Ltmp663 # Offset: 67
    00000049: 	leal	-0x2(%r14), %eax
    0000004d: 	xorl	%r15d, %r15d
    00000050: 	leaq	0x8(%r13,%rax,4), %r12
.Ltmp675:
    00000055: 	movl	(%r13), %r9d
    00000059: 	movl	0x4(%r13), %r10d
.Ltmp667:
    0000005d: 	movl	%r9d, %eax
    00000060: 	xorl	%edx, %edx
    00000062: 	movl	%r9d, %ecx
    00000065: 	divl	%r10d
    00000068: 	addl	%ebx, %eax
    0000006a: 	addl	%eax, %eax
    0000006c: 	leal	(%r10,%rax), %edx
    00000070: 	addl	%r9d, %eax
    00000073: 	leal	(%rax,%rax,2), %r8d
    00000077: 	movl	%r9d, %eax
    0000007a: 	subl	%r10d, %eax
    0000007d: 	addl	%eax, %r8d
    00000080: 	subl	%edx, %r8d
    00000083: 	subl	%edx, %r8d
    00000086: 	subl	%edx, %r8d
    00000089: 	cmpl	$0x1, %r14d
    0000008d: 	jle	.Ltmp664 # Offset: 141
    0000008f: 	leaq	0x4(%r13), %rsi
    00000093: 	nopl	(%rax,%rax) # Size: 5
.Ltmp665:
    00000098: 	movl	%ecx, %edi
    0000009a: 	movl	(%rsi), %ecx
    0000009c: 	xorl	%edx, %edx
    0000009e: 	addq	$0x4, %rsi
    000000a2: 	movl	%edi, %eax
    000000a4: 	divl	%ecx
    000000a6: 	addl	%ebx, %eax
    000000a8: 	addl	%eax, %eax
    000000aa: 	leal	(%rcx,%rax), %edx
    000000ad: 	addl	%edi, %eax
    000000af: 	shll	$0x2, %eax
    000000b2: 	subl	%edx, %eax
    000000b4: 	subl	%edx, %eax
    000000b6: 	addl	%edx, %edx
    000000b8: 	subl	%edx, %eax
    000000ba: 	addl	%eax, %r8d
    000000bd: 	cmpq	%rsi, %r12
    000000c0: 	jne	.Ltmp665 # Offset: 192
.Ltmp664:
    000000c2: 	testl	%r8d, %r8d
    000000c5: 	jne	.Ltmp666 # Offset: 197
    000000cb: 	addl	$0x1, %r15d
    000000cf: 	cmpl	%r11d, %r15d
    000000d2: 	jl	.Ltmp667 # Offset: 210
.Ltmp663:
    000000d4: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000db: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000e2: 	subq	$0x20, %rax
    000000e6: 	cmpq	%rax, %rbx
    000000e9: 	je	.Ltmp668 # Offset: 233
    000000ef: 	leaq	0x10(%rbx), %rdi
    000000f3: 	movq	0x8(%rbp), %r12
    000000f7: 	movq	%rdi, (%rbx)
    000000fa: 	movq	(%rbp), %r13
    000000fe: 	movq	%r13, %rax
    00000101: 	addq	%r12, %rax
    00000104: 	je	.Ltmp669 # Offset: 260
    00000106: 	testq	%r13, %r13
    00000109: 	je	.Ltmp670 # Offset: 265
.Ltmp669:
    0000010f: 	movq	%r12, (%rsp)
    00000113: 	cmpq	$0xf, %r12
    00000117: 	ja	.Ltmp671 # Offset: 279
    0000011d: 	cmpq	$0x1, %r12
    00000121: 	jne	.Ltmp672 # Offset: 289
    00000127: 	movzbl	(%r13), %eax
    0000012c: 	movb	%al, 0x10(%rbx)
.Ltmp676:
    0000012f: 	movq	%r12, 0x8(%rbx)
    00000133: 	movb	$0x0, (%rdi,%r12)
    00000138: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000013f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000146: 	addq	$0x20, %rax
    0000014a: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000151: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000158: 	je	.Ltmp673 # Offset: 344
.Ltmp677:
    0000015e: 	movq	-0x20(%rax), %rbp
    00000162: 	callq	clock@PLT # Offset: 354
    00000167: 	movq	%rax, end_time(%rip)
    0000016e: 	movq	0x8(%rsp), %rdx
    00000173: 	subq	%fs:0x28, %rdx
    0000017c: 	jne	.Ltmp674 # Offset: 380
    00000182: 	subq	start_time(%rip), %rax
    00000189: 	pxor	%xmm0, %xmm0
    0000018d: 	movq	%rbp, %rdi
    00000190: 	cvtsi2sd	%rax, %xmm0
    00000195: 	divsd	DATAat0x4d640(%rip), %xmm0
    0000019d: 	addq	$0x18, %rsp
    000001a1: 	popq	%rbx
    000001a2: 	popq	%rbp
    000001a3: 	popq	%r12
    000001a5: 	popq	%r13
    000001a7: 	popq	%r14
    000001a9: 	popq	%r15
    000001ab: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 427
.Ltmp666:
    000001b0: 	movq	(%rbp), %rdx
    000001b4: 	movl	$0x1, %edi
    000001b9: 	xorl	%eax, %eax
    000001bb: 	addl	$0x1, %r15d
    000001bf: 	leaq	DATAat0x4d004(%rip), %rsi
    000001c6: 	callq	__printf_chk@PLT # Offset: 454
    000001cb: 	movl	iterations(%rip), %r11d
    000001d2: 	cmpl	%r11d, %r15d
    000001d5: 	jl	.Ltmp675 # Offset: 469
    000001db: 	jmp	.Ltmp663 # Offset: 475
.Ltmp671:
    000001e0: 	movq	%rbx, %rdi
    000001e3: 	movq	%rsp, %rsi
    000001e6: 	xorl	%edx, %edx
    000001e8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 488
    000001ed: 	movq	%rax, (%rbx)
    000001f0: 	movq	%rax, %rdi
    000001f3: 	movq	(%rsp), %rax
    000001f7: 	movq	%rax, 0x10(%rbx)
.Ltmp678:
    000001fb: 	movq	%r12, %rdx
    000001fe: 	movq	%r13, %rsi
    00000201: 	callq	memcpy@PLT # Offset: 513
    00000206: 	movq	(%rsp), %r12
    0000020a: 	movq	(%rbx), %rdi
    0000020d: 	jmp	.Ltmp676 # Offset: 525
.Ltmp668:
    00000212: 	movq	%rbp, %rsi
    00000215: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000021c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 540
    00000221: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000228: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000022f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000236: 	jne	.Ltmp677 # Offset: 566
.Ltmp673:
    0000023c: 	movq	-0x8(%rdx), %rax
    00000240: 	addq	$0x200, %rax
    00000246: 	jmp	.Ltmp677 # Offset: 582
.Ltmp672:
    0000024b: 	testq	%r12, %r12
    0000024e: 	je	.Ltmp676 # Offset: 590
    00000254: 	jmp	.Ltmp678 # Offset: 596
.Ltmp674:
    00000256: 	callq	__stack_chk_fail@PLT # Offset: 598
.Ltmp670:
    0000025b: 	leaq	DATAat0x4d018(%rip), %rdi
    00000262: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 610
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE4Ij14custom_cse_divIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSE4Ii14custom_cse_mulIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 79
  State       : disassembled
  Address     : 0xbfb0
  Size        : 0x3bb
  MaxSize     : 0x3c0
  Offset      : 0xbfb0
  Section     : .text
  Orc Section : .local.text._Z9test_CSE4Ii14custom_cse_mulIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB078:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%esi, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	movl	%edx, %ebp
    00000015: 	pushq	%rbx
    00000016: 	subq	$0x38, %rsp
    0000001a: 	movq	%rcx, 0x18(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x28(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r11d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r11d, %r11d
    00000045: 	jle	.Ltmp679 # Offset: 69
    0000004b: 	leal	-0x1(%r13), %r15d
    0000004f: 	leal	-0x2(%r13), %eax
    00000053: 	xorl	%r14d, %r14d
    00000056: 	movl	%eax, 0xc(%rsp)
    0000005a: 	movl	%r15d, %eax
    0000005d: 	shrl	$0x2, %eax
    00000060: 	subl	$0x1, %eax
    00000063: 	shlq	$0x4, %rax
    00000067: 	leaq	0x10(%r12,%rax), %rbx
    0000006c: 	movl	%r15d, %eax
    0000006f: 	andl	$-0x4, %eax
    00000072: 	movl	%eax, 0x10(%rsp)
    00000076: 	addl	$0x1, %eax
    00000079: 	movl	%eax, 0x14(%rsp)
.Ltmp692:
    0000007d: 	movl	(%r12), %r9d
    00000081: 	movl	0x4(%r12), %r8d
.Ltmp684:
    00000086: 	movl	%r9d, %edx
    00000089: 	imull	%r8d, %edx
    0000008d: 	addl	%ebp, %edx
    0000008f: 	leal	(%r9,%rdx,2), %eax
    00000093: 	leal	(%r8,%rdx,2), %ecx
    00000097: 	movl	%r9d, %edx
    0000009a: 	subl	%r8d, %edx
    0000009d: 	addl	%eax, %edx
    0000009f: 	subl	%ecx, %edx
    000000a1: 	addl	%eax, %edx
    000000a3: 	subl	%ecx, %edx
    000000a5: 	addl	%edx, %eax
    000000a7: 	subl	%ecx, %eax
    000000a9: 	cmpl	$0x1, %r13d
    000000ad: 	jle	.Ltmp680 # Offset: 173
    000000b3: 	cmpl	$0x2, 0xc(%rsp)
    000000b8: 	jbe	.Ltmp681 # Offset: 184
    000000be: 	movd	%ebp, %xmm7
    000000c2: 	movq	%r12, %rdx
    000000c5: 	pxor	%xmm0, %xmm0
    000000c9: 	pshufd	$0x0, %xmm7, %xmm4
    000000ce: 	nop # Size: 2
.Ltmp682:
    000000d0: 	movdqu	(%rdx), %xmm2
    000000d4: 	movdqu	0x4(%rdx), %xmm1
    000000d9: 	addq	$0x10, %rdx
    000000dd: 	movdqa	%xmm1, %xmm5
    000000e1: 	movdqa	%xmm2, %xmm6
    000000e5: 	movdqa	%xmm1, %xmm3
    000000e9: 	psrlq	$0x20, %xmm5
    000000ee: 	psrlq	$0x20, %xmm6
    000000f3: 	pmuludq	%xmm2, %xmm3
    000000f7: 	pmuludq	%xmm6, %xmm5
    000000fb: 	pshufd	$0x8, %xmm3, %xmm3
    00000100: 	pshufd	$0x8, %xmm5, %xmm5
    00000105: 	punpckldq	%xmm5, %xmm3
    00000109: 	paddd	%xmm4, %xmm3
    0000010d: 	paddd	%xmm3, %xmm2
    00000111: 	paddd	%xmm3, %xmm1
    00000115: 	paddd	%xmm3, %xmm2
    00000119: 	paddd	%xmm3, %xmm1
    0000011d: 	paddd	%xmm2, %xmm0
    00000121: 	psubd	%xmm1, %xmm0
    00000125: 	paddd	%xmm2, %xmm0
    00000129: 	psubd	%xmm1, %xmm0
    0000012d: 	paddd	%xmm2, %xmm0
    00000131: 	psubd	%xmm1, %xmm0
    00000135: 	paddd	%xmm2, %xmm0
    00000139: 	psubd	%xmm1, %xmm0
    0000013d: 	cmpq	%rbx, %rdx
    00000140: 	jne	.Ltmp682 # Offset: 320
    00000142: 	movdqa	%xmm0, %xmm1
    00000146: 	psrldq	$0x8, %xmm1
    0000014b: 	paddd	%xmm1, %xmm0
    0000014f: 	movdqa	%xmm0, %xmm1
    00000153: 	psrldq	$0x4, %xmm1
    00000158: 	paddd	%xmm1, %xmm0
    0000015c: 	movd	%xmm0, %edx
    00000160: 	addl	%edx, %eax
    00000162: 	cmpl	%r15d, 0x10(%rsp)
    00000167: 	je	.Ltmp680 # Offset: 359
    0000016d: 	movl	0x14(%rsp), %esi
.Ltmp693:
    00000171: 	movslq	%esi, %rcx
    00000174: 	shlq	$0x2, %rcx
    00000178: 	leaq	(%r12,%rcx), %rdi
    0000017c: 	movl	-0x4(%rdi), %edx
    0000017f: 	movl	(%rdi), %r10d
    00000182: 	movl	%edx, %edi
    00000184: 	imull	%r10d, %edi
    00000188: 	addl	%ebp, %edi
    0000018a: 	leal	(%rdx,%rdi,2), %edx
    0000018d: 	leal	(%r10,%rdi,2), %edi
    00000191: 	addl	%edx, %eax
    00000193: 	subl	%edi, %eax
    00000195: 	addl	%edx, %eax
    00000197: 	subl	%edi, %eax
    00000199: 	addl	%edx, %eax
    0000019b: 	subl	%edi, %eax
    0000019d: 	addl	%eax, %edx
    0000019f: 	movl	%edx, %eax
    000001a1: 	leal	0x1(%rsi), %edx
    000001a4: 	subl	%edi, %eax
    000001a6: 	cmpl	%edx, %r13d
    000001a9: 	jle	.Ltmp680 # Offset: 425
    000001ab: 	movl	0x4(%r12,%rcx), %edx
    000001b0: 	movl	%r10d, %edi
    000001b3: 	addl	$0x2, %esi
    000001b6: 	imull	%edx, %edi
    000001b9: 	addl	%ebp, %edi
    000001bb: 	leal	(%r10,%rdi,2), %r10d
    000001bf: 	leal	(%rdx,%rdi,2), %edi
    000001c2: 	leal	(%rax,%r10,2), %eax
    000001c6: 	subl	%edi, %eax
    000001c8: 	subl	%edi, %eax
    000001ca: 	leal	(%rax,%r10,2), %eax
    000001ce: 	subl	%edi, %eax
    000001d0: 	subl	%edi, %eax
    000001d2: 	cmpl	%esi, %r13d
    000001d5: 	jle	.Ltmp680 # Offset: 469
    000001d7: 	movl	0x8(%r12,%rcx), %edi
    000001dc: 	movl	%edx, %esi
    000001de: 	imull	%edi, %esi
    000001e1: 	addl	%ebp, %esi
    000001e3: 	leal	(%rdx,%rsi,2), %ecx
    000001e6: 	leal	(%rdi,%rsi,2), %edx
    000001e9: 	leal	(%rax,%rcx,2), %eax
    000001ec: 	subl	%edx, %eax
    000001ee: 	subl	%edx, %eax
    000001f0: 	leal	(%rax,%rcx,2), %eax
    000001f3: 	subl	%edx, %eax
    000001f5: 	subl	%edx, %eax
.Ltmp680:
    000001f7: 	testl	%eax, %eax
    000001f9: 	jne	.Ltmp683 # Offset: 505
    000001ff: 	addl	$0x1, %r14d
    00000203: 	cmpl	%r11d, %r14d
    00000206: 	jl	.Ltmp684 # Offset: 518
.Ltmp679:
    0000020c: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000213: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000021a: 	subq	$0x20, %rax
    0000021e: 	cmpq	%rax, %rbx
    00000221: 	je	.Ltmp685 # Offset: 545
    00000227: 	movq	0x18(%rsp), %rax
    0000022c: 	leaq	0x10(%rbx), %rdi
    00000230: 	movq	%rdi, (%rbx)
    00000233: 	movq	(%rax), %rbp
    00000236: 	movq	0x8(%rax), %r12
    0000023a: 	movq	%rbp, %rax
    0000023d: 	addq	%r12, %rax
    00000240: 	je	.Ltmp686 # Offset: 576
    00000242: 	testq	%rbp, %rbp
    00000245: 	je	.Ltmp687 # Offset: 581
.Ltmp686:
    0000024b: 	movq	%r12, 0x20(%rsp)
    00000250: 	cmpq	$0xf, %r12
    00000254: 	ja	.Ltmp688 # Offset: 596
    0000025a: 	cmpq	$0x1, %r12
    0000025e: 	jne	.Ltmp689 # Offset: 606
    00000264: 	movzbl	(%rbp), %eax
    00000268: 	movb	%al, 0x10(%rbx)
.Ltmp694:
    0000026b: 	movq	%r12, 0x8(%rbx)
    0000026f: 	movb	$0x0, (%rdi,%r12)
    00000274: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000027b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000282: 	addq	$0x20, %rax
    00000286: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000028d: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000294: 	je	.Ltmp690 # Offset: 660
.Ltmp695:
    0000029a: 	movq	-0x20(%rax), %rbp
    0000029e: 	callq	clock@PLT # Offset: 670
    000002a3: 	movq	%rax, end_time(%rip)
    000002aa: 	movq	0x28(%rsp), %rdx
    000002af: 	subq	%fs:0x28, %rdx
    000002b8: 	jne	.Ltmp691 # Offset: 696
    000002be: 	subq	start_time(%rip), %rax
    000002c5: 	pxor	%xmm0, %xmm0
    000002c9: 	movq	%rbp, %rdi
    000002cc: 	cvtsi2sd	%rax, %xmm0
    000002d1: 	divsd	DATAat0x4d640(%rip), %xmm0
    000002d9: 	addq	$0x38, %rsp
    000002dd: 	popq	%rbx
    000002de: 	popq	%rbp
    000002df: 	popq	%r12
    000002e1: 	popq	%r13
    000002e3: 	popq	%r14
    000002e5: 	popq	%r15
    000002e7: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 743
    000002ec: 	nopl	(%rax) # Size: 4
.Ltmp683:
    000002f0: 	movq	0x18(%rsp), %rax
    000002f5: 	leaq	DATAat0x4d004(%rip), %rsi
    000002fc: 	movl	$0x1, %edi
    00000301: 	addl	$0x1, %r14d
    00000305: 	movq	(%rax), %rdx
    00000308: 	xorl	%eax, %eax
    0000030a: 	callq	__printf_chk@PLT # Offset: 778
    0000030f: 	movl	iterations(%rip), %r11d
    00000316: 	cmpl	%r11d, %r14d
    00000319: 	jl	.Ltmp692 # Offset: 793
    0000031f: 	jmp	.Ltmp679 # Offset: 799
.Ltmp681:
    00000324: 	movl	$0x1, %esi
    00000329: 	jmp	.Ltmp693 # Offset: 809
.Ltmp688:
    0000032e: 	movq	%rbx, %rdi
    00000331: 	leaq	0x20(%rsp), %rsi
    00000336: 	xorl	%edx, %edx
    00000338: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 824
    0000033d: 	movq	%rax, (%rbx)
    00000340: 	movq	%rax, %rdi
    00000343: 	movq	0x20(%rsp), %rax
    00000348: 	movq	%rax, 0x10(%rbx)
.Ltmp696:
    0000034c: 	movq	%r12, %rdx
    0000034f: 	movq	%rbp, %rsi
    00000352: 	callq	memcpy@PLT # Offset: 850
    00000357: 	movq	0x20(%rsp), %r12
    0000035c: 	movq	(%rbx), %rdi
    0000035f: 	jmp	.Ltmp694 # Offset: 863
.Ltmp685:
    00000364: 	movq	0x18(%rsp), %rsi
    00000369: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000370: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 880
    00000375: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000037c: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000383: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000038a: 	jne	.Ltmp695 # Offset: 906
.Ltmp690:
    00000390: 	movq	-0x8(%rdx), %rax
    00000394: 	addq	$0x200, %rax
    0000039a: 	jmp	.Ltmp695 # Offset: 922
.Ltmp689:
    0000039f: 	testq	%r12, %r12
    000003a2: 	je	.Ltmp694 # Offset: 930
    000003a8: 	jmp	.Ltmp696 # Offset: 936
.Ltmp691:
    000003aa: 	callq	__stack_chk_fail@PLT # Offset: 938
.Ltmp687:
    000003af: 	leaq	DATAat0x4d018(%rip), %rdi
    000003b6: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 950
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE4Ii14custom_cse_mulIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z20test_CSE4_add_inlineIi14custom_cse_addIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 80
  State       : disassembled
  Address     : 0xc370
  Size        : 0x3cd
  MaxSize     : 0x3d0
  Offset      : 0xc370
  Section     : .text
  Orc Section : .local.text._Z20test_CSE4_add_inlineIi14custom_cse_addIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB079:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdi, %rbx
    00000016: 	subq	$0x38, %rsp
    0000001a: 	movq	%rcx, 0x18(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x28(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r10d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r10d, %r10d
    00000045: 	jle	.Ltmp697 # Offset: 69
    0000004b: 	leal	-0x1(%r14), %r8d
    0000004f: 	leal	-0x2(%r14), %eax
    00000053: 	movl	(%rbx), %edi
    00000055: 	movl	0x4(%rbx), %esi
    00000058: 	movl	%eax, 0xc(%rsp)
    0000005c: 	movl	%r8d, %eax
    0000005f: 	movl	%r8d, %r15d
    00000062: 	xorl	%r13d, %r13d
    00000065: 	shrl	$0x2, %eax
    00000068: 	andl	$-0x4, %r15d
    0000006c: 	subl	$0x1, %eax
    0000006f: 	shlq	$0x4, %rax
    00000073: 	leaq	0x10(%rbx,%rax), %r12
    00000078: 	leal	0x1(%r15), %eax
    0000007c: 	movl	%eax, 0x10(%rsp)
.Ltmp703:
    00000080: 	leal	(%rdi,%rsi), %edx
    00000083: 	addl	%ebp, %edx
    00000085: 	leal	(%rdi,%rdx,2), %eax
    00000088: 	leal	(%rsi,%rdx,2), %ecx
    0000008b: 	movl	%edi, %edx
    0000008d: 	subl	%esi, %edx
    0000008f: 	addl	%eax, %edx
    00000091: 	subl	%ecx, %edx
    00000093: 	addl	%eax, %edx
    00000095: 	subl	%ecx, %edx
    00000097: 	addl	%edx, %eax
    00000099: 	subl	%ecx, %eax
    0000009b: 	cmpl	$0x1, %r14d
    0000009f: 	jle	.Ltmp698 # Offset: 159
    000000a5: 	cmpl	$0x2, 0xc(%rsp)
    000000aa: 	jbe	.Ltmp699 # Offset: 170
    000000b0: 	movd	%ebp, %xmm5
    000000b4: 	movq	%rbx, %rdx
    000000b7: 	pxor	%xmm0, %xmm0
    000000bb: 	pshufd	$0x0, %xmm5, %xmm4
.Ltmp700:
    000000c0: 	movdqu	(%rdx), %xmm6
    000000c4: 	movdqu	0x4(%rdx), %xmm3
    000000c9: 	addq	$0x10, %rdx
    000000cd: 	movdqu	-0xc(%rdx), %xmm1
    000000d2: 	paddd	%xmm6, %xmm3
    000000d6: 	movdqa	%xmm6, %xmm2
    000000da: 	paddd	%xmm4, %xmm3
    000000de: 	paddd	%xmm3, %xmm2
    000000e2: 	paddd	%xmm3, %xmm1
    000000e6: 	paddd	%xmm3, %xmm2
    000000ea: 	paddd	%xmm3, %xmm1
    000000ee: 	paddd	%xmm2, %xmm0
    000000f2: 	psubd	%xmm1, %xmm0
    000000f6: 	paddd	%xmm2, %xmm0
    000000fa: 	psubd	%xmm1, %xmm0
    000000fe: 	paddd	%xmm2, %xmm0
    00000102: 	psubd	%xmm1, %xmm0
    00000106: 	paddd	%xmm2, %xmm0
    0000010a: 	psubd	%xmm1, %xmm0
    0000010e: 	cmpq	%r12, %rdx
    00000111: 	jne	.Ltmp700 # Offset: 273
    00000113: 	movdqa	%xmm0, %xmm1
    00000117: 	psrldq	$0x8, %xmm1
    0000011c: 	paddd	%xmm1, %xmm0
    00000120: 	movdqa	%xmm0, %xmm1
    00000124: 	psrldq	$0x4, %xmm1
    00000129: 	paddd	%xmm1, %xmm0
    0000012d: 	movd	%xmm0, %edx
    00000131: 	addl	%edx, %eax
    00000133: 	cmpl	%r8d, %r15d
    00000136: 	je	.Ltmp698 # Offset: 310
    0000013c: 	movl	0x10(%rsp), %edx
    00000140: 	movl	%r15d, %r9d
.Ltmp711:
    00000143: 	movl	%r14d, %r11d
    00000146: 	subl	%r9d, %r11d
    00000149: 	leal	-0x1(%r11), %ecx
    0000014d: 	cmpl	$0x2, %r11d
    00000151: 	je	.Ltmp701 # Offset: 337
    00000153: 	movq	0x4(%rbx,%r9,4), %xmm5
    0000015a: 	movq	(%rbx,%r9,4), %xmm1
    00000160: 	movd	%ebp, %xmm7
    00000164: 	pshufd	$0xe0, %xmm7, %xmm0
    00000169: 	movdqa	%xmm5, %xmm2
    0000016d: 	movdqa	%xmm1, %xmm4
    00000171: 	movdqa	%xmm5, %xmm3
    00000175: 	paddd	%xmm1, %xmm2
    00000179: 	psubd	%xmm5, %xmm1
    0000017d: 	paddd	%xmm0, %xmm2
    00000181: 	movdqa	%xmm1, %xmm0
    00000185: 	paddd	%xmm2, %xmm4
    00000189: 	paddd	%xmm2, %xmm3
    0000018d: 	paddd	%xmm2, %xmm4
    00000191: 	paddd	%xmm3, %xmm2
    00000195: 	paddd	%xmm4, %xmm0
    00000199: 	psubd	%xmm2, %xmm0
    0000019d: 	paddd	%xmm4, %xmm0
    000001a1: 	psubd	%xmm2, %xmm0
    000001a5: 	paddd	%xmm4, %xmm0
    000001a9: 	psubd	%xmm2, %xmm0
    000001ad: 	movd	%xmm0, %r11d
    000001b2: 	pshufd	$0xe5, %xmm0, %xmm7
    000001b7: 	movd	%xmm7, %r9d
    000001bc: 	addl	%r11d, %r9d
    000001bf: 	addl	%r9d, %eax
    000001c2: 	movl	%ecx, %r9d
    000001c5: 	andl	$-0x2, %r9d
    000001c9: 	addl	%r9d, %edx
    000001cc: 	cmpl	%ecx, %r9d
    000001cf: 	je	.Ltmp698 # Offset: 463
.Ltmp701:
    000001d1: 	movslq	%edx, %rdx
    000001d4: 	movl	-0x4(%rbx,%rdx,4), %ecx
    000001d8: 	movl	(%rbx,%rdx,4), %r9d
    000001dc: 	leal	(%r9,%rcx), %edx
    000001e0: 	addl	%ebp, %edx
    000001e2: 	leal	(%rcx,%rdx,2), %ecx
    000001e5: 	leal	(%r9,%rdx,2), %edx
    000001e9: 	leal	(%rax,%rcx,2), %eax
    000001ec: 	subl	%edx, %eax
    000001ee: 	subl	%edx, %eax
    000001f0: 	leal	(%rax,%rcx,2), %eax
    000001f3: 	subl	%edx, %eax
    000001f5: 	subl	%edx, %eax
.Ltmp698:
    000001f7: 	testl	%eax, %eax
    000001f9: 	jne	.Ltmp702 # Offset: 505
    000001ff: 	addl	$0x1, %r13d
    00000203: 	cmpl	%r10d, %r13d
    00000206: 	jl	.Ltmp703 # Offset: 518
.Ltmp697:
    0000020c: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000213: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000021a: 	subq	$0x20, %rax
    0000021e: 	cmpq	%rax, %rbx
    00000221: 	je	.Ltmp704 # Offset: 545
    00000227: 	movq	0x18(%rsp), %rax
    0000022c: 	leaq	0x10(%rbx), %rdi
    00000230: 	movq	%rdi, (%rbx)
    00000233: 	movq	(%rax), %rbp
    00000236: 	movq	0x8(%rax), %r12
    0000023a: 	movq	%rbp, %rax
    0000023d: 	addq	%r12, %rax
    00000240: 	je	.Ltmp705 # Offset: 576
    00000242: 	testq	%rbp, %rbp
    00000245: 	je	.Ltmp706 # Offset: 581
.Ltmp705:
    0000024b: 	movq	%r12, 0x20(%rsp)
    00000250: 	cmpq	$0xf, %r12
    00000254: 	ja	.Ltmp707 # Offset: 596
    0000025a: 	cmpq	$0x1, %r12
    0000025e: 	jne	.Ltmp708 # Offset: 606
    00000264: 	movzbl	(%rbp), %eax
    00000268: 	movb	%al, 0x10(%rbx)
.Ltmp712:
    0000026b: 	movq	%r12, 0x8(%rbx)
    0000026f: 	movb	$0x0, (%rdi,%r12)
    00000274: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000027b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000282: 	addq	$0x20, %rax
    00000286: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000028d: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000294: 	je	.Ltmp709 # Offset: 660
.Ltmp713:
    0000029a: 	movq	-0x20(%rax), %rbp
    0000029e: 	callq	clock@PLT # Offset: 670
    000002a3: 	movq	%rax, end_time(%rip)
    000002aa: 	movq	0x28(%rsp), %rdx
    000002af: 	subq	%fs:0x28, %rdx
    000002b8: 	jne	.Ltmp710 # Offset: 696
    000002be: 	subq	start_time(%rip), %rax
    000002c5: 	pxor	%xmm0, %xmm0
    000002c9: 	movq	%rbp, %rdi
    000002cc: 	cvtsi2sd	%rax, %xmm0
    000002d1: 	divsd	DATAat0x4d640(%rip), %xmm0
    000002d9: 	addq	$0x38, %rsp
    000002dd: 	popq	%rbx
    000002de: 	popq	%rbp
    000002df: 	popq	%r12
    000002e1: 	popq	%r13
    000002e3: 	popq	%r14
    000002e5: 	popq	%r15
    000002e7: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 743
    000002ec: 	nopl	(%rax) # Size: 4
.Ltmp702:
    000002f0: 	movq	0x18(%rsp), %rax
    000002f5: 	leaq	DATAat0x4d004(%rip), %rsi
    000002fc: 	movl	$0x1, %edi
    00000301: 	movl	%r8d, 0x14(%rsp)
    00000306: 	addl	$0x1, %r13d
    0000030a: 	movq	(%rax), %rdx
    0000030d: 	xorl	%eax, %eax
    0000030f: 	callq	__printf_chk@PLT # Offset: 783
    00000314: 	movl	iterations(%rip), %r10d
    0000031b: 	cmpl	%r10d, %r13d
    0000031e: 	jge	.Ltmp697 # Offset: 798
    00000324: 	movl	(%rbx), %edi
    00000326: 	movl	0x4(%rbx), %esi
    00000329: 	movl	0x14(%rsp), %r8d
    0000032e: 	jmp	.Ltmp703 # Offset: 814
.Ltmp699:
    00000333: 	xorl	%r9d, %r9d
    00000336: 	movl	$0x1, %edx
    0000033b: 	jmp	.Ltmp711 # Offset: 827
.Ltmp707:
    00000340: 	movq	%rbx, %rdi
    00000343: 	leaq	0x20(%rsp), %rsi
    00000348: 	xorl	%edx, %edx
    0000034a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 842
    0000034f: 	movq	%rax, (%rbx)
    00000352: 	movq	%rax, %rdi
    00000355: 	movq	0x20(%rsp), %rax
    0000035a: 	movq	%rax, 0x10(%rbx)
.Ltmp714:
    0000035e: 	movq	%r12, %rdx
    00000361: 	movq	%rbp, %rsi
    00000364: 	callq	memcpy@PLT # Offset: 868
    00000369: 	movq	0x20(%rsp), %r12
    0000036e: 	movq	(%rbx), %rdi
    00000371: 	jmp	.Ltmp712 # Offset: 881
.Ltmp704:
    00000376: 	movq	0x18(%rsp), %rsi
    0000037b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000382: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 898
    00000387: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000038e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000395: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000039c: 	jne	.Ltmp713 # Offset: 924
.Ltmp709:
    000003a2: 	movq	-0x8(%rdx), %rax
    000003a6: 	addq	$0x200, %rax
    000003ac: 	jmp	.Ltmp713 # Offset: 940
.Ltmp708:
    000003b1: 	testq	%r12, %r12
    000003b4: 	je	.Ltmp712 # Offset: 948
    000003ba: 	jmp	.Ltmp714 # Offset: 954
.Ltmp710:
    000003bc: 	callq	__stack_chk_fail@PLT # Offset: 956
.Ltmp706:
    000003c1: 	leaq	DATAat0x4d018(%rip), %rdi
    000003c8: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 968
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_CSE4_add_inlineIi14custom_cse_addIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSE4Ii14custom_cse_addIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 81
  State       : disassembled
  Address     : 0xc740
  Size        : 0x3cd
  MaxSize     : 0x3d0
  Offset      : 0xc740
  Section     : .text
  Orc Section : .local.text._Z9test_CSE4Ii14custom_cse_addIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB080:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdi, %rbx
    00000016: 	subq	$0x38, %rsp
    0000001a: 	movq	%rcx, 0x18(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x28(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r10d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r10d, %r10d
    00000045: 	jle	.Ltmp715 # Offset: 69
    0000004b: 	leal	-0x1(%r14), %r8d
    0000004f: 	leal	-0x2(%r14), %eax
    00000053: 	movl	(%rbx), %edi
    00000055: 	movl	0x4(%rbx), %esi
    00000058: 	movl	%eax, 0xc(%rsp)
    0000005c: 	movl	%r8d, %eax
    0000005f: 	movl	%r8d, %r15d
    00000062: 	xorl	%r13d, %r13d
    00000065: 	shrl	$0x2, %eax
    00000068: 	andl	$-0x4, %r15d
    0000006c: 	subl	$0x1, %eax
    0000006f: 	shlq	$0x4, %rax
    00000073: 	leaq	0x10(%rbx,%rax), %r12
    00000078: 	leal	0x1(%r15), %eax
    0000007c: 	movl	%eax, 0x10(%rsp)
.Ltmp721:
    00000080: 	leal	(%rdi,%rsi), %edx
    00000083: 	addl	%ebp, %edx
    00000085: 	leal	(%rdi,%rdx,2), %eax
    00000088: 	leal	(%rsi,%rdx,2), %ecx
    0000008b: 	movl	%edi, %edx
    0000008d: 	subl	%esi, %edx
    0000008f: 	addl	%eax, %edx
    00000091: 	subl	%ecx, %edx
    00000093: 	addl	%eax, %edx
    00000095: 	subl	%ecx, %edx
    00000097: 	addl	%edx, %eax
    00000099: 	subl	%ecx, %eax
    0000009b: 	cmpl	$0x1, %r14d
    0000009f: 	jle	.Ltmp716 # Offset: 159
    000000a5: 	cmpl	$0x2, 0xc(%rsp)
    000000aa: 	jbe	.Ltmp717 # Offset: 170
    000000b0: 	movd	%ebp, %xmm5
    000000b4: 	movq	%rbx, %rdx
    000000b7: 	pxor	%xmm0, %xmm0
    000000bb: 	pshufd	$0x0, %xmm5, %xmm4
.Ltmp718:
    000000c0: 	movdqu	(%rdx), %xmm6
    000000c4: 	movdqu	0x4(%rdx), %xmm3
    000000c9: 	addq	$0x10, %rdx
    000000cd: 	movdqu	-0xc(%rdx), %xmm1
    000000d2: 	paddd	%xmm6, %xmm3
    000000d6: 	movdqa	%xmm6, %xmm2
    000000da: 	paddd	%xmm4, %xmm3
    000000de: 	paddd	%xmm3, %xmm2
    000000e2: 	paddd	%xmm3, %xmm1
    000000e6: 	paddd	%xmm3, %xmm2
    000000ea: 	paddd	%xmm3, %xmm1
    000000ee: 	paddd	%xmm2, %xmm0
    000000f2: 	psubd	%xmm1, %xmm0
    000000f6: 	paddd	%xmm2, %xmm0
    000000fa: 	psubd	%xmm1, %xmm0
    000000fe: 	paddd	%xmm2, %xmm0
    00000102: 	psubd	%xmm1, %xmm0
    00000106: 	paddd	%xmm2, %xmm0
    0000010a: 	psubd	%xmm1, %xmm0
    0000010e: 	cmpq	%r12, %rdx
    00000111: 	jne	.Ltmp718 # Offset: 273
    00000113: 	movdqa	%xmm0, %xmm1
    00000117: 	psrldq	$0x8, %xmm1
    0000011c: 	paddd	%xmm1, %xmm0
    00000120: 	movdqa	%xmm0, %xmm1
    00000124: 	psrldq	$0x4, %xmm1
    00000129: 	paddd	%xmm1, %xmm0
    0000012d: 	movd	%xmm0, %edx
    00000131: 	addl	%edx, %eax
    00000133: 	cmpl	%r8d, %r15d
    00000136: 	je	.Ltmp716 # Offset: 310
    0000013c: 	movl	0x10(%rsp), %edx
    00000140: 	movl	%r15d, %r9d
.Ltmp729:
    00000143: 	movl	%r14d, %r11d
    00000146: 	subl	%r9d, %r11d
    00000149: 	leal	-0x1(%r11), %ecx
    0000014d: 	cmpl	$0x2, %r11d
    00000151: 	je	.Ltmp719 # Offset: 337
    00000153: 	movq	0x4(%rbx,%r9,4), %xmm5
    0000015a: 	movq	(%rbx,%r9,4), %xmm1
    00000160: 	movd	%ebp, %xmm7
    00000164: 	pshufd	$0xe0, %xmm7, %xmm0
    00000169: 	movdqa	%xmm5, %xmm2
    0000016d: 	movdqa	%xmm1, %xmm4
    00000171: 	movdqa	%xmm5, %xmm3
    00000175: 	paddd	%xmm1, %xmm2
    00000179: 	psubd	%xmm5, %xmm1
    0000017d: 	paddd	%xmm0, %xmm2
    00000181: 	movdqa	%xmm1, %xmm0
    00000185: 	paddd	%xmm2, %xmm4
    00000189: 	paddd	%xmm2, %xmm3
    0000018d: 	paddd	%xmm2, %xmm4
    00000191: 	paddd	%xmm3, %xmm2
    00000195: 	paddd	%xmm4, %xmm0
    00000199: 	psubd	%xmm2, %xmm0
    0000019d: 	paddd	%xmm4, %xmm0
    000001a1: 	psubd	%xmm2, %xmm0
    000001a5: 	paddd	%xmm4, %xmm0
    000001a9: 	psubd	%xmm2, %xmm0
    000001ad: 	movd	%xmm0, %r11d
    000001b2: 	pshufd	$0xe5, %xmm0, %xmm7
    000001b7: 	movd	%xmm7, %r9d
    000001bc: 	addl	%r11d, %r9d
    000001bf: 	addl	%r9d, %eax
    000001c2: 	movl	%ecx, %r9d
    000001c5: 	andl	$-0x2, %r9d
    000001c9: 	addl	%r9d, %edx
    000001cc: 	cmpl	%ecx, %r9d
    000001cf: 	je	.Ltmp716 # Offset: 463
.Ltmp719:
    000001d1: 	movslq	%edx, %rdx
    000001d4: 	movl	-0x4(%rbx,%rdx,4), %ecx
    000001d8: 	movl	(%rbx,%rdx,4), %r9d
    000001dc: 	leal	(%r9,%rcx), %edx
    000001e0: 	addl	%ebp, %edx
    000001e2: 	leal	(%rcx,%rdx,2), %ecx
    000001e5: 	leal	(%r9,%rdx,2), %edx
    000001e9: 	leal	(%rax,%rcx,2), %eax
    000001ec: 	subl	%edx, %eax
    000001ee: 	subl	%edx, %eax
    000001f0: 	leal	(%rax,%rcx,2), %eax
    000001f3: 	subl	%edx, %eax
    000001f5: 	subl	%edx, %eax
.Ltmp716:
    000001f7: 	testl	%eax, %eax
    000001f9: 	jne	.Ltmp720 # Offset: 505
    000001ff: 	addl	$0x1, %r13d
    00000203: 	cmpl	%r10d, %r13d
    00000206: 	jl	.Ltmp721 # Offset: 518
.Ltmp715:
    0000020c: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000213: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000021a: 	subq	$0x20, %rax
    0000021e: 	cmpq	%rax, %rbx
    00000221: 	je	.Ltmp722 # Offset: 545
    00000227: 	movq	0x18(%rsp), %rax
    0000022c: 	leaq	0x10(%rbx), %rdi
    00000230: 	movq	%rdi, (%rbx)
    00000233: 	movq	(%rax), %rbp
    00000236: 	movq	0x8(%rax), %r12
    0000023a: 	movq	%rbp, %rax
    0000023d: 	addq	%r12, %rax
    00000240: 	je	.Ltmp723 # Offset: 576
    00000242: 	testq	%rbp, %rbp
    00000245: 	je	.Ltmp724 # Offset: 581
.Ltmp723:
    0000024b: 	movq	%r12, 0x20(%rsp)
    00000250: 	cmpq	$0xf, %r12
    00000254: 	ja	.Ltmp725 # Offset: 596
    0000025a: 	cmpq	$0x1, %r12
    0000025e: 	jne	.Ltmp726 # Offset: 606
    00000264: 	movzbl	(%rbp), %eax
    00000268: 	movb	%al, 0x10(%rbx)
.Ltmp730:
    0000026b: 	movq	%r12, 0x8(%rbx)
    0000026f: 	movb	$0x0, (%rdi,%r12)
    00000274: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000027b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000282: 	addq	$0x20, %rax
    00000286: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000028d: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000294: 	je	.Ltmp727 # Offset: 660
.Ltmp731:
    0000029a: 	movq	-0x20(%rax), %rbp
    0000029e: 	callq	clock@PLT # Offset: 670
    000002a3: 	movq	%rax, end_time(%rip)
    000002aa: 	movq	0x28(%rsp), %rdx
    000002af: 	subq	%fs:0x28, %rdx
    000002b8: 	jne	.Ltmp728 # Offset: 696
    000002be: 	subq	start_time(%rip), %rax
    000002c5: 	pxor	%xmm0, %xmm0
    000002c9: 	movq	%rbp, %rdi
    000002cc: 	cvtsi2sd	%rax, %xmm0
    000002d1: 	divsd	DATAat0x4d640(%rip), %xmm0
    000002d9: 	addq	$0x38, %rsp
    000002dd: 	popq	%rbx
    000002de: 	popq	%rbp
    000002df: 	popq	%r12
    000002e1: 	popq	%r13
    000002e3: 	popq	%r14
    000002e5: 	popq	%r15
    000002e7: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 743
    000002ec: 	nopl	(%rax) # Size: 4
.Ltmp720:
    000002f0: 	movq	0x18(%rsp), %rax
    000002f5: 	leaq	DATAat0x4d004(%rip), %rsi
    000002fc: 	movl	$0x1, %edi
    00000301: 	movl	%r8d, 0x14(%rsp)
    00000306: 	addl	$0x1, %r13d
    0000030a: 	movq	(%rax), %rdx
    0000030d: 	xorl	%eax, %eax
    0000030f: 	callq	__printf_chk@PLT # Offset: 783
    00000314: 	movl	iterations(%rip), %r10d
    0000031b: 	cmpl	%r10d, %r13d
    0000031e: 	jge	.Ltmp715 # Offset: 798
    00000324: 	movl	(%rbx), %edi
    00000326: 	movl	0x4(%rbx), %esi
    00000329: 	movl	0x14(%rsp), %r8d
    0000032e: 	jmp	.Ltmp721 # Offset: 814
.Ltmp717:
    00000333: 	xorl	%r9d, %r9d
    00000336: 	movl	$0x1, %edx
    0000033b: 	jmp	.Ltmp729 # Offset: 827
.Ltmp725:
    00000340: 	movq	%rbx, %rdi
    00000343: 	leaq	0x20(%rsp), %rsi
    00000348: 	xorl	%edx, %edx
    0000034a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 842
    0000034f: 	movq	%rax, (%rbx)
    00000352: 	movq	%rax, %rdi
    00000355: 	movq	0x20(%rsp), %rax
    0000035a: 	movq	%rax, 0x10(%rbx)
.Ltmp732:
    0000035e: 	movq	%r12, %rdx
    00000361: 	movq	%rbp, %rsi
    00000364: 	callq	memcpy@PLT # Offset: 868
    00000369: 	movq	0x20(%rsp), %r12
    0000036e: 	movq	(%rbx), %rdi
    00000371: 	jmp	.Ltmp730 # Offset: 881
.Ltmp722:
    00000376: 	movq	0x18(%rsp), %rsi
    0000037b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000382: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 898
    00000387: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000038e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000395: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000039c: 	jne	.Ltmp731 # Offset: 924
.Ltmp727:
    000003a2: 	movq	-0x8(%rdx), %rax
    000003a6: 	addq	$0x200, %rax
    000003ac: 	jmp	.Ltmp731 # Offset: 940
.Ltmp726:
    000003b1: 	testq	%r12, %r12
    000003b4: 	je	.Ltmp730 # Offset: 948
    000003ba: 	jmp	.Ltmp732 # Offset: 954
.Ltmp728:
    000003bc: 	callq	__stack_chk_fail@PLT # Offset: 956
.Ltmp724:
    000003c1: 	leaq	DATAat0x4d018(%rip), %rdi
    000003c8: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 968
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE4Ii14custom_cse_addIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSE4Ii14custom_cse_divIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 82
  State       : disassembled
  Address     : 0xcb10
  Size        : 0x26f
  MaxSize     : 0x270
  Offset      : 0xcb10
  Section     : .text
  Orc Section : .local.text._Z9test_CSE4Ii14custom_cse_divIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB081:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rcx, %rbp
    00000016: 	pushq	%rbx
    00000017: 	movl	%edx, %ebx
    00000019: 	subq	$0x18, %rsp
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x8(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	callq	clock@PLT # Offset: 45
    00000032: 	movl	iterations(%rip), %r10d
    00000039: 	movq	%rax, start_time(%rip)
    00000040: 	testl	%r10d, %r10d
    00000043: 	jle	.Ltmp733 # Offset: 67
    00000049: 	leal	-0x2(%r14), %eax
    0000004d: 	xorl	%r15d, %r15d
    00000050: 	leaq	0x8(%r13,%rax,4), %r12
.Ltmp745:
    00000055: 	movl	(%r13), %r8d
    00000059: 	movl	0x4(%r13), %r9d
.Ltmp737:
    0000005d: 	movl	%r8d, %eax
    00000060: 	movl	%r8d, %ecx
    00000063: 	cltd
    00000064: 	idivl	%r9d
    00000067: 	addl	%ebx, %eax
    00000069: 	leal	(%r8,%rax,2), %edi
    0000006d: 	leal	(%r9,%rax,2), %esi
    00000071: 	movl	%r8d, %eax
    00000074: 	subl	%r9d, %eax
    00000077: 	addl	%edi, %eax
    00000079: 	subl	%esi, %eax
    0000007b: 	addl	%edi, %eax
    0000007d: 	subl	%esi, %eax
    0000007f: 	addl	%eax, %edi
    00000081: 	subl	%esi, %edi
    00000083: 	cmpl	$0x1, %r14d
    00000087: 	jle	.Ltmp734 # Offset: 135
    00000089: 	leaq	0x4(%r13), %rsi
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp735:
    00000090: 	movl	%ecx, %r11d
    00000093: 	movl	(%rsi), %ecx
    00000095: 	addq	$0x4, %rsi
    00000099: 	movl	%r11d, %eax
    0000009c: 	cltd
    0000009d: 	idivl	%ecx
    0000009f: 	addl	%ebx, %eax
    000000a1: 	leal	(%r11,%rax,2), %edx
    000000a5: 	leal	(%rcx,%rax,2), %r11d
    000000a9: 	addl	%edx, %edi
    000000ab: 	movl	%edi, %eax
    000000ad: 	subl	%r11d, %eax
    000000b0: 	addl	%edx, %eax
    000000b2: 	subl	%r11d, %eax
    000000b5: 	addl	%edx, %eax
    000000b7: 	subl	%r11d, %eax
    000000ba: 	addl	%eax, %edx
    000000bc: 	movl	%edx, %edi
    000000be: 	subl	%r11d, %edi
    000000c1: 	cmpq	%rsi, %r12
    000000c4: 	jne	.Ltmp735 # Offset: 196
.Ltmp734:
    000000c6: 	testl	%edi, %edi
    000000c8: 	jne	.Ltmp736 # Offset: 200
    000000ce: 	addl	$0x1, %r15d
    000000d2: 	cmpl	%r10d, %r15d
    000000d5: 	jl	.Ltmp737 # Offset: 213
.Ltmp733:
    000000d7: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000de: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000e5: 	subq	$0x20, %rax
    000000e9: 	cmpq	%rax, %rbx
    000000ec: 	je	.Ltmp738 # Offset: 236
    000000f2: 	leaq	0x10(%rbx), %rdi
    000000f6: 	movq	0x8(%rbp), %r12
    000000fa: 	movq	%rdi, (%rbx)
    000000fd: 	movq	(%rbp), %r13
    00000101: 	movq	%r13, %rax
    00000104: 	addq	%r12, %rax
    00000107: 	je	.Ltmp739 # Offset: 263
    00000109: 	testq	%r13, %r13
    0000010c: 	je	.Ltmp740 # Offset: 268
.Ltmp739:
    00000112: 	movq	%r12, (%rsp)
    00000116: 	cmpq	$0xf, %r12
    0000011a: 	ja	.Ltmp741 # Offset: 282
    00000120: 	cmpq	$0x1, %r12
    00000124: 	jne	.Ltmp742 # Offset: 292
    0000012a: 	movzbl	(%r13), %eax
    0000012f: 	movb	%al, 0x10(%rbx)
.Ltmp746:
    00000132: 	movq	%r12, 0x8(%rbx)
    00000136: 	movb	$0x0, (%rdi,%r12)
    0000013b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000142: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000149: 	addq	$0x20, %rax
    0000014d: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000154: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000015b: 	je	.Ltmp743 # Offset: 347
.Ltmp747:
    00000161: 	movq	-0x20(%rax), %rbp
    00000165: 	callq	clock@PLT # Offset: 357
    0000016a: 	movq	%rax, end_time(%rip)
    00000171: 	movq	0x8(%rsp), %rdx
    00000176: 	subq	%fs:0x28, %rdx
    0000017f: 	jne	.Ltmp744 # Offset: 383
    00000185: 	subq	start_time(%rip), %rax
    0000018c: 	pxor	%xmm0, %xmm0
    00000190: 	movq	%rbp, %rdi
    00000193: 	cvtsi2sd	%rax, %xmm0
    00000198: 	divsd	DATAat0x4d640(%rip), %xmm0
    000001a0: 	addq	$0x18, %rsp
    000001a4: 	popq	%rbx
    000001a5: 	popq	%rbp
    000001a6: 	popq	%r12
    000001a8: 	popq	%r13
    000001aa: 	popq	%r14
    000001ac: 	popq	%r15
    000001ae: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 430
    000001b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp736:
    000001b8: 	movq	(%rbp), %rdx
    000001bc: 	movl	$0x1, %edi
    000001c1: 	xorl	%eax, %eax
    000001c3: 	addl	$0x1, %r15d
    000001c7: 	leaq	DATAat0x4d004(%rip), %rsi
    000001ce: 	callq	__printf_chk@PLT # Offset: 462
    000001d3: 	movl	iterations(%rip), %r10d
    000001da: 	cmpl	%r10d, %r15d
    000001dd: 	jl	.Ltmp745 # Offset: 477
    000001e3: 	jmp	.Ltmp733 # Offset: 483
.Ltmp741:
    000001e8: 	movq	%rbx, %rdi
    000001eb: 	movq	%rsp, %rsi
    000001ee: 	xorl	%edx, %edx
    000001f0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 496
    000001f5: 	movq	%rax, (%rbx)
    000001f8: 	movq	%rax, %rdi
    000001fb: 	movq	(%rsp), %rax
    000001ff: 	movq	%rax, 0x10(%rbx)
.Ltmp748:
    00000203: 	movq	%r12, %rdx
    00000206: 	movq	%r13, %rsi
    00000209: 	callq	memcpy@PLT # Offset: 521
    0000020e: 	movq	(%rsp), %r12
    00000212: 	movq	(%rbx), %rdi
    00000215: 	jmp	.Ltmp746 # Offset: 533
.Ltmp738:
    0000021a: 	movq	%rbp, %rsi
    0000021d: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000224: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 548
    00000229: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000230: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000237: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000023e: 	jne	.Ltmp747 # Offset: 574
.Ltmp743:
    00000244: 	movq	-0x8(%rdx), %rax
    00000248: 	addq	$0x200, %rax
    0000024e: 	jmp	.Ltmp747 # Offset: 590
.Ltmp742:
    00000253: 	testq	%r12, %r12
    00000256: 	je	.Ltmp746 # Offset: 598
    0000025c: 	jmp	.Ltmp748 # Offset: 604
.Ltmp744:
    0000025e: 	callq	__stack_chk_fail@PLT # Offset: 606
.Ltmp740:
    00000263: 	leaq	DATAat0x4d018(%rip), %rdi
    0000026a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 618
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE4Ii14custom_cse_divIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z20test_CSE4_add_inlineIj14custom_cse_addIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 83
  State       : disassembled
  Address     : 0xcd80
  Size        : 0x3ad
  MaxSize     : 0x3b0
  Offset      : 0xcd80
  Section     : .text
  Orc Section : .local.text._Z20test_CSE4_add_inlineIj14custom_cse_addIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB082:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdi, %rbx
    00000016: 	subq	$0x38, %rsp
    0000001a: 	movq	%rcx, 0x18(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x28(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r10d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r10d, %r10d
    00000045: 	jle	.Ltmp749 # Offset: 69
    0000004b: 	leal	-0x1(%r14), %r8d
    0000004f: 	leal	-0x2(%r14), %eax
    00000053: 	movl	(%rbx), %edi
    00000055: 	movl	0x4(%rbx), %esi
    00000058: 	movl	%eax, 0xc(%rsp)
    0000005c: 	movl	%r8d, %eax
    0000005f: 	movl	%r8d, %r15d
    00000062: 	xorl	%r13d, %r13d
    00000065: 	shrl	$0x2, %eax
    00000068: 	andl	$-0x4, %r15d
    0000006c: 	subl	$0x1, %eax
    0000006f: 	shlq	$0x4, %rax
    00000073: 	leaq	0x10(%rbx,%rax), %r12
    00000078: 	leal	0x1(%r15), %eax
    0000007c: 	movl	%eax, 0x10(%rsp)
.Ltmp755:
    00000080: 	leal	(%rdi,%rsi), %eax
    00000083: 	movl	%edi, %ecx
    00000085: 	addl	%ebp, %eax
    00000087: 	subl	%esi, %ecx
    00000089: 	addl	%eax, %eax
    0000008b: 	leal	(%rsi,%rax), %edx
    0000008e: 	addl	%edi, %eax
    00000090: 	leal	(%rax,%rax,2), %eax
    00000093: 	addl	%ecx, %eax
    00000095: 	subl	%edx, %eax
    00000097: 	subl	%edx, %eax
    00000099: 	subl	%edx, %eax
    0000009b: 	cmpl	$0x1, %r14d
    0000009f: 	jle	.Ltmp750 # Offset: 159
    000000a5: 	cmpl	$0x2, 0xc(%rsp)
    000000aa: 	jbe	.Ltmp751 # Offset: 170
    000000b0: 	movd	%ebp, %xmm7
    000000b4: 	movq	%rbx, %rdx
    000000b7: 	pxor	%xmm3, %xmm3
    000000bb: 	pshufd	$0x0, %xmm7, %xmm4
.Ltmp752:
    000000c0: 	movdqu	(%rdx), %xmm5
    000000c4: 	movdqu	0x4(%rdx), %xmm0
    000000c9: 	addq	$0x10, %rdx
    000000cd: 	movdqu	-0xc(%rdx), %xmm1
    000000d2: 	paddd	%xmm5, %xmm0
    000000d6: 	paddd	%xmm4, %xmm0
    000000da: 	pslld	$0x1, %xmm0
    000000df: 	paddd	%xmm0, %xmm1
    000000e3: 	paddd	%xmm5, %xmm0
    000000e7: 	movdqa	%xmm1, %xmm2
    000000eb: 	pslld	$0x2, %xmm0
    000000f0: 	pslld	$0x1, %xmm2
    000000f5: 	psubd	%xmm1, %xmm0
    000000f9: 	paddd	%xmm2, %xmm1
    000000fd: 	psubd	%xmm1, %xmm0
    00000101: 	paddd	%xmm0, %xmm3
    00000105: 	cmpq	%r12, %rdx
    00000108: 	jne	.Ltmp752 # Offset: 264
    0000010a: 	movdqa	%xmm3, %xmm0
    0000010e: 	psrldq	$0x8, %xmm0
    00000113: 	paddd	%xmm0, %xmm3
    00000117: 	movdqa	%xmm3, %xmm0
    0000011b: 	psrldq	$0x4, %xmm0
    00000120: 	paddd	%xmm0, %xmm3
    00000124: 	movd	%xmm3, %edx
    00000128: 	addl	%edx, %eax
    0000012a: 	cmpl	%r8d, %r15d
    0000012d: 	je	.Ltmp750 # Offset: 301
    00000133: 	movl	0x10(%rsp), %edx
    00000137: 	movl	%r15d, %r9d
.Ltmp763:
    0000013a: 	movl	%r14d, %r11d
    0000013d: 	subl	%r9d, %r11d
    00000140: 	leal	-0x1(%r11), %ecx
    00000144: 	cmpl	$0x2, %r11d
    00000148: 	je	.Ltmp753 # Offset: 328
    0000014a: 	movq	(%rbx,%r9,4), %xmm1
    00000150: 	movd	%ebp, %xmm7
    00000154: 	movq	0x4(%rbx,%r9,4), %xmm2
    0000015b: 	pshufd	$0xe0, %xmm7, %xmm0
    00000160: 	paddd	%xmm1, %xmm0
    00000164: 	paddd	%xmm2, %xmm0
    00000168: 	pslld	$0x1, %xmm0
    0000016d: 	paddd	%xmm0, %xmm2
    00000171: 	paddd	%xmm1, %xmm0
    00000175: 	movdqa	%xmm2, %xmm1
    00000179: 	pslld	$0x2, %xmm0
    0000017e: 	pslld	$0x1, %xmm1
    00000183: 	psubd	%xmm2, %xmm0
    00000187: 	paddd	%xmm2, %xmm1
    0000018b: 	psubd	%xmm1, %xmm0
    0000018f: 	movd	%xmm0, %r11d
    00000194: 	pshufd	$0xe5, %xmm0, %xmm7
    00000199: 	movd	%xmm7, %r9d
    0000019e: 	addl	%r11d, %r9d
    000001a1: 	addl	%r9d, %eax
    000001a4: 	movl	%ecx, %r9d
    000001a7: 	andl	$-0x2, %r9d
    000001ab: 	addl	%r9d, %edx
    000001ae: 	cmpl	%ecx, %r9d
    000001b1: 	je	.Ltmp750 # Offset: 433
.Ltmp753:
    000001b3: 	movslq	%edx, %rdx
    000001b6: 	movl	-0x4(%rbx,%rdx,4), %r9d
    000001bb: 	movl	(%rbx,%rdx,4), %edx
    000001be: 	leal	(%rbp,%rdx), %ecx
    000001c2: 	addl	%r9d, %ecx
    000001c5: 	addl	%ecx, %ecx
    000001c7: 	addl	%ecx, %edx
    000001c9: 	addl	%r9d, %ecx
    000001cc: 	leal	(%rax,%rcx,4), %eax
    000001cf: 	subl	%edx, %eax
    000001d1: 	subl	%edx, %eax
    000001d3: 	addl	%edx, %edx
    000001d5: 	subl	%edx, %eax
.Ltmp750:
    000001d7: 	testl	%eax, %eax
    000001d9: 	jne	.Ltmp754 # Offset: 473
    000001df: 	addl	$0x1, %r13d
    000001e3: 	cmpl	%r10d, %r13d
    000001e6: 	jl	.Ltmp755 # Offset: 486
.Ltmp749:
    000001ec: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001f3: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001fa: 	subq	$0x20, %rax
    000001fe: 	cmpq	%rax, %rbx
    00000201: 	je	.Ltmp756 # Offset: 513
    00000207: 	movq	0x18(%rsp), %rax
    0000020c: 	leaq	0x10(%rbx), %rdi
    00000210: 	movq	%rdi, (%rbx)
    00000213: 	movq	(%rax), %rbp
    00000216: 	movq	0x8(%rax), %r12
    0000021a: 	movq	%rbp, %rax
    0000021d: 	addq	%r12, %rax
    00000220: 	je	.Ltmp757 # Offset: 544
    00000222: 	testq	%rbp, %rbp
    00000225: 	je	.Ltmp758 # Offset: 549
.Ltmp757:
    0000022b: 	movq	%r12, 0x20(%rsp)
    00000230: 	cmpq	$0xf, %r12
    00000234: 	ja	.Ltmp759 # Offset: 564
    0000023a: 	cmpq	$0x1, %r12
    0000023e: 	jne	.Ltmp760 # Offset: 574
    00000244: 	movzbl	(%rbp), %eax
    00000248: 	movb	%al, 0x10(%rbx)
.Ltmp764:
    0000024b: 	movq	%r12, 0x8(%rbx)
    0000024f: 	movb	$0x0, (%rdi,%r12)
    00000254: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000025b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000262: 	addq	$0x20, %rax
    00000266: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000026d: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000274: 	je	.Ltmp761 # Offset: 628
.Ltmp765:
    0000027a: 	movq	-0x20(%rax), %rbp
    0000027e: 	callq	clock@PLT # Offset: 638
    00000283: 	movq	%rax, end_time(%rip)
    0000028a: 	movq	0x28(%rsp), %rdx
    0000028f: 	subq	%fs:0x28, %rdx
    00000298: 	jne	.Ltmp762 # Offset: 664
    0000029e: 	subq	start_time(%rip), %rax
    000002a5: 	pxor	%xmm0, %xmm0
    000002a9: 	movq	%rbp, %rdi
    000002ac: 	cvtsi2sd	%rax, %xmm0
    000002b1: 	divsd	DATAat0x4d640(%rip), %xmm0
    000002b9: 	addq	$0x38, %rsp
    000002bd: 	popq	%rbx
    000002be: 	popq	%rbp
    000002bf: 	popq	%r12
    000002c1: 	popq	%r13
    000002c3: 	popq	%r14
    000002c5: 	popq	%r15
    000002c7: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 711
    000002cc: 	nopl	(%rax) # Size: 4
.Ltmp754:
    000002d0: 	movq	0x18(%rsp), %rax
    000002d5: 	leaq	DATAat0x4d004(%rip), %rsi
    000002dc: 	movl	$0x1, %edi
    000002e1: 	movl	%r8d, 0x14(%rsp)
    000002e6: 	addl	$0x1, %r13d
    000002ea: 	movq	(%rax), %rdx
    000002ed: 	xorl	%eax, %eax
    000002ef: 	callq	__printf_chk@PLT # Offset: 751
    000002f4: 	movl	iterations(%rip), %r10d
    000002fb: 	cmpl	%r10d, %r13d
    000002fe: 	jge	.Ltmp749 # Offset: 766
    00000304: 	movl	(%rbx), %edi
    00000306: 	movl	0x4(%rbx), %esi
    00000309: 	movl	0x14(%rsp), %r8d
    0000030e: 	jmp	.Ltmp755 # Offset: 782
.Ltmp751:
    00000313: 	xorl	%r9d, %r9d
    00000316: 	movl	$0x1, %edx
    0000031b: 	jmp	.Ltmp763 # Offset: 795
.Ltmp759:
    00000320: 	movq	%rbx, %rdi
    00000323: 	leaq	0x20(%rsp), %rsi
    00000328: 	xorl	%edx, %edx
    0000032a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 810
    0000032f: 	movq	%rax, (%rbx)
    00000332: 	movq	%rax, %rdi
    00000335: 	movq	0x20(%rsp), %rax
    0000033a: 	movq	%rax, 0x10(%rbx)
.Ltmp766:
    0000033e: 	movq	%r12, %rdx
    00000341: 	movq	%rbp, %rsi
    00000344: 	callq	memcpy@PLT # Offset: 836
    00000349: 	movq	0x20(%rsp), %r12
    0000034e: 	movq	(%rbx), %rdi
    00000351: 	jmp	.Ltmp764 # Offset: 849
.Ltmp756:
    00000356: 	movq	0x18(%rsp), %rsi
    0000035b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000362: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 866
    00000367: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000036e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000375: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000037c: 	jne	.Ltmp765 # Offset: 892
.Ltmp761:
    00000382: 	movq	-0x8(%rdx), %rax
    00000386: 	addq	$0x200, %rax
    0000038c: 	jmp	.Ltmp765 # Offset: 908
.Ltmp760:
    00000391: 	testq	%r12, %r12
    00000394: 	je	.Ltmp764 # Offset: 916
    0000039a: 	jmp	.Ltmp766 # Offset: 922
.Ltmp762:
    0000039c: 	callq	__stack_chk_fail@PLT # Offset: 924
.Ltmp758:
    000003a1: 	leaq	DATAat0x4d018(%rip), %rdi
    000003a8: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 936
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_CSE4_add_inlineIj14custom_cse_addIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z28test_CSE4_add_inline_flippedIj14custom_cse_addIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 84
  State       : disassembled
  Address     : 0xd130
  Size        : 0x3ad
  MaxSize     : 0x3b0
  Offset      : 0xd130
  Section     : .text
  Orc Section : .local.text._Z28test_CSE4_add_inline_flippedIj14custom_cse_addIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB083:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdi, %rbx
    00000016: 	subq	$0x38, %rsp
    0000001a: 	movq	%rcx, 0x18(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x28(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r10d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r10d, %r10d
    00000045: 	jle	.Ltmp767 # Offset: 69
    0000004b: 	leal	-0x1(%r14), %r8d
    0000004f: 	leal	-0x2(%r14), %eax
    00000053: 	movl	(%rbx), %edi
    00000055: 	movl	0x4(%rbx), %esi
    00000058: 	movl	%eax, 0xc(%rsp)
    0000005c: 	movl	%r8d, %eax
    0000005f: 	movl	%r8d, %r15d
    00000062: 	xorl	%r13d, %r13d
    00000065: 	shrl	$0x2, %eax
    00000068: 	andl	$-0x4, %r15d
    0000006c: 	subl	$0x1, %eax
    0000006f: 	shlq	$0x4, %rax
    00000073: 	leaq	0x10(%rbx,%rax), %r12
    00000078: 	leal	0x1(%r15), %eax
    0000007c: 	movl	%eax, 0x10(%rsp)
.Ltmp773:
    00000080: 	leal	(%rdi,%rsi), %eax
    00000083: 	movl	%edi, %ecx
    00000085: 	addl	%ebp, %eax
    00000087: 	subl	%esi, %ecx
    00000089: 	addl	%eax, %eax
    0000008b: 	leal	(%rsi,%rax), %edx
    0000008e: 	addl	%edi, %eax
    00000090: 	leal	(%rax,%rax,2), %eax
    00000093: 	addl	%ecx, %eax
    00000095: 	subl	%edx, %eax
    00000097: 	subl	%edx, %eax
    00000099: 	subl	%edx, %eax
    0000009b: 	cmpl	$0x1, %r14d
    0000009f: 	jle	.Ltmp768 # Offset: 159
    000000a5: 	cmpl	$0x2, 0xc(%rsp)
    000000aa: 	jbe	.Ltmp769 # Offset: 170
    000000b0: 	movd	%ebp, %xmm7
    000000b4: 	movq	%rbx, %rdx
    000000b7: 	pxor	%xmm3, %xmm3
    000000bb: 	pshufd	$0x0, %xmm7, %xmm4
.Ltmp770:
    000000c0: 	movdqu	(%rdx), %xmm5
    000000c4: 	movdqu	0x4(%rdx), %xmm0
    000000c9: 	addq	$0x10, %rdx
    000000cd: 	movdqu	-0xc(%rdx), %xmm1
    000000d2: 	paddd	%xmm5, %xmm0
    000000d6: 	paddd	%xmm4, %xmm0
    000000da: 	pslld	$0x1, %xmm0
    000000df: 	paddd	%xmm0, %xmm1
    000000e3: 	paddd	%xmm5, %xmm0
    000000e7: 	movdqa	%xmm1, %xmm2
    000000eb: 	pslld	$0x2, %xmm0
    000000f0: 	pslld	$0x1, %xmm2
    000000f5: 	psubd	%xmm1, %xmm0
    000000f9: 	paddd	%xmm2, %xmm1
    000000fd: 	psubd	%xmm1, %xmm0
    00000101: 	paddd	%xmm0, %xmm3
    00000105: 	cmpq	%r12, %rdx
    00000108: 	jne	.Ltmp770 # Offset: 264
    0000010a: 	movdqa	%xmm3, %xmm0
    0000010e: 	psrldq	$0x8, %xmm0
    00000113: 	paddd	%xmm0, %xmm3
    00000117: 	movdqa	%xmm3, %xmm0
    0000011b: 	psrldq	$0x4, %xmm0
    00000120: 	paddd	%xmm0, %xmm3
    00000124: 	movd	%xmm3, %edx
    00000128: 	addl	%edx, %eax
    0000012a: 	cmpl	%r8d, %r15d
    0000012d: 	je	.Ltmp768 # Offset: 301
    00000133: 	movl	0x10(%rsp), %edx
    00000137: 	movl	%r15d, %r9d
.Ltmp781:
    0000013a: 	movl	%r14d, %r11d
    0000013d: 	subl	%r9d, %r11d
    00000140: 	leal	-0x1(%r11), %ecx
    00000144: 	cmpl	$0x2, %r11d
    00000148: 	je	.Ltmp771 # Offset: 328
    0000014a: 	movq	(%rbx,%r9,4), %xmm1
    00000150: 	movd	%ebp, %xmm7
    00000154: 	movq	0x4(%rbx,%r9,4), %xmm2
    0000015b: 	pshufd	$0xe0, %xmm7, %xmm0
    00000160: 	paddd	%xmm1, %xmm0
    00000164: 	paddd	%xmm2, %xmm0
    00000168: 	pslld	$0x1, %xmm0
    0000016d: 	paddd	%xmm0, %xmm2
    00000171: 	paddd	%xmm1, %xmm0
    00000175: 	movdqa	%xmm2, %xmm1
    00000179: 	pslld	$0x2, %xmm0
    0000017e: 	pslld	$0x1, %xmm1
    00000183: 	psubd	%xmm2, %xmm0
    00000187: 	paddd	%xmm2, %xmm1
    0000018b: 	psubd	%xmm1, %xmm0
    0000018f: 	movd	%xmm0, %r11d
    00000194: 	pshufd	$0xe5, %xmm0, %xmm7
    00000199: 	movd	%xmm7, %r9d
    0000019e: 	addl	%r11d, %r9d
    000001a1: 	addl	%r9d, %eax
    000001a4: 	movl	%ecx, %r9d
    000001a7: 	andl	$-0x2, %r9d
    000001ab: 	addl	%r9d, %edx
    000001ae: 	cmpl	%ecx, %r9d
    000001b1: 	je	.Ltmp768 # Offset: 433
.Ltmp771:
    000001b3: 	movslq	%edx, %rdx
    000001b6: 	movl	-0x4(%rbx,%rdx,4), %r9d
    000001bb: 	movl	(%rbx,%rdx,4), %edx
    000001be: 	leal	(%rbp,%rdx), %ecx
    000001c2: 	addl	%r9d, %ecx
    000001c5: 	addl	%ecx, %ecx
    000001c7: 	addl	%ecx, %edx
    000001c9: 	addl	%r9d, %ecx
    000001cc: 	leal	(%rax,%rcx,4), %eax
    000001cf: 	subl	%edx, %eax
    000001d1: 	subl	%edx, %eax
    000001d3: 	addl	%edx, %edx
    000001d5: 	subl	%edx, %eax
.Ltmp768:
    000001d7: 	testl	%eax, %eax
    000001d9: 	jne	.Ltmp772 # Offset: 473
    000001df: 	addl	$0x1, %r13d
    000001e3: 	cmpl	%r10d, %r13d
    000001e6: 	jl	.Ltmp773 # Offset: 486
.Ltmp767:
    000001ec: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001f3: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001fa: 	subq	$0x20, %rax
    000001fe: 	cmpq	%rax, %rbx
    00000201: 	je	.Ltmp774 # Offset: 513
    00000207: 	movq	0x18(%rsp), %rax
    0000020c: 	leaq	0x10(%rbx), %rdi
    00000210: 	movq	%rdi, (%rbx)
    00000213: 	movq	(%rax), %rbp
    00000216: 	movq	0x8(%rax), %r12
    0000021a: 	movq	%rbp, %rax
    0000021d: 	addq	%r12, %rax
    00000220: 	je	.Ltmp775 # Offset: 544
    00000222: 	testq	%rbp, %rbp
    00000225: 	je	.Ltmp776 # Offset: 549
.Ltmp775:
    0000022b: 	movq	%r12, 0x20(%rsp)
    00000230: 	cmpq	$0xf, %r12
    00000234: 	ja	.Ltmp777 # Offset: 564
    0000023a: 	cmpq	$0x1, %r12
    0000023e: 	jne	.Ltmp778 # Offset: 574
    00000244: 	movzbl	(%rbp), %eax
    00000248: 	movb	%al, 0x10(%rbx)
.Ltmp782:
    0000024b: 	movq	%r12, 0x8(%rbx)
    0000024f: 	movb	$0x0, (%rdi,%r12)
    00000254: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000025b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000262: 	addq	$0x20, %rax
    00000266: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000026d: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000274: 	je	.Ltmp779 # Offset: 628
.Ltmp783:
    0000027a: 	movq	-0x20(%rax), %rbp
    0000027e: 	callq	clock@PLT # Offset: 638
    00000283: 	movq	%rax, end_time(%rip)
    0000028a: 	movq	0x28(%rsp), %rdx
    0000028f: 	subq	%fs:0x28, %rdx
    00000298: 	jne	.Ltmp780 # Offset: 664
    0000029e: 	subq	start_time(%rip), %rax
    000002a5: 	pxor	%xmm0, %xmm0
    000002a9: 	movq	%rbp, %rdi
    000002ac: 	cvtsi2sd	%rax, %xmm0
    000002b1: 	divsd	DATAat0x4d640(%rip), %xmm0
    000002b9: 	addq	$0x38, %rsp
    000002bd: 	popq	%rbx
    000002be: 	popq	%rbp
    000002bf: 	popq	%r12
    000002c1: 	popq	%r13
    000002c3: 	popq	%r14
    000002c5: 	popq	%r15
    000002c7: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 711
    000002cc: 	nopl	(%rax) # Size: 4
.Ltmp772:
    000002d0: 	movq	0x18(%rsp), %rax
    000002d5: 	leaq	DATAat0x4d004(%rip), %rsi
    000002dc: 	movl	$0x1, %edi
    000002e1: 	movl	%r8d, 0x14(%rsp)
    000002e6: 	addl	$0x1, %r13d
    000002ea: 	movq	(%rax), %rdx
    000002ed: 	xorl	%eax, %eax
    000002ef: 	callq	__printf_chk@PLT # Offset: 751
    000002f4: 	movl	iterations(%rip), %r10d
    000002fb: 	cmpl	%r10d, %r13d
    000002fe: 	jge	.Ltmp767 # Offset: 766
    00000304: 	movl	(%rbx), %edi
    00000306: 	movl	0x4(%rbx), %esi
    00000309: 	movl	0x14(%rsp), %r8d
    0000030e: 	jmp	.Ltmp773 # Offset: 782
.Ltmp769:
    00000313: 	xorl	%r9d, %r9d
    00000316: 	movl	$0x1, %edx
    0000031b: 	jmp	.Ltmp781 # Offset: 795
.Ltmp777:
    00000320: 	movq	%rbx, %rdi
    00000323: 	leaq	0x20(%rsp), %rsi
    00000328: 	xorl	%edx, %edx
    0000032a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 810
    0000032f: 	movq	%rax, (%rbx)
    00000332: 	movq	%rax, %rdi
    00000335: 	movq	0x20(%rsp), %rax
    0000033a: 	movq	%rax, 0x10(%rbx)
.Ltmp784:
    0000033e: 	movq	%r12, %rdx
    00000341: 	movq	%rbp, %rsi
    00000344: 	callq	memcpy@PLT # Offset: 836
    00000349: 	movq	0x20(%rsp), %r12
    0000034e: 	movq	(%rbx), %rdi
    00000351: 	jmp	.Ltmp782 # Offset: 849
.Ltmp774:
    00000356: 	movq	0x18(%rsp), %rsi
    0000035b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000362: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 866
    00000367: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000036e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000375: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000037c: 	jne	.Ltmp783 # Offset: 892
.Ltmp779:
    00000382: 	movq	-0x8(%rdx), %rax
    00000386: 	addq	$0x200, %rax
    0000038c: 	jmp	.Ltmp783 # Offset: 908
.Ltmp778:
    00000391: 	testq	%r12, %r12
    00000394: 	je	.Ltmp782 # Offset: 916
    0000039a: 	jmp	.Ltmp784 # Offset: 922
.Ltmp780:
    0000039c: 	callq	__stack_chk_fail@PLT # Offset: 924
.Ltmp776:
    000003a1: 	leaq	DATAat0x4d018(%rip), %rdi
    000003a8: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 936
DWARF CFI Instructions:
    <empty>
End of Function "_Z28test_CSE4_add_inline_flippedIj14custom_cse_addIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSE4Ij14custom_cse_mulIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 85
  State       : disassembled
  Address     : 0xd4e0
  Size        : 0x3bb
  MaxSize     : 0x3c0
  Offset      : 0xd4e0
  Section     : .text
  Orc Section : .local.text._Z9test_CSE4Ij14custom_cse_mulIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB084:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%esi, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	movl	%edx, %ebp
    00000015: 	pushq	%rbx
    00000016: 	subq	$0x38, %rsp
    0000001a: 	movq	%rcx, 0x18(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x28(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r11d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r11d, %r11d
    00000045: 	jle	.Ltmp785 # Offset: 69
    0000004b: 	leal	-0x1(%r13), %edi
    0000004f: 	leal	-0x2(%r13), %eax
    00000053: 	xorl	%r14d, %r14d
    00000056: 	movl	%eax, 0x8(%rsp)
    0000005a: 	movl	%edi, %eax
    0000005c: 	shrl	$0x2, %eax
    0000005f: 	movl	%edi, 0x10(%rsp)
    00000063: 	andl	$-0x4, %edi
    00000066: 	subl	$0x1, %eax
    00000069: 	movl	%edi, 0xc(%rsp)
    0000006d: 	shlq	$0x4, %rax
    00000071: 	leaq	0x10(%r12,%rax), %rbx
    00000076: 	leal	0x1(%rdi), %eax
    00000079: 	movl	%eax, 0x14(%rsp)
.Ltmp798:
    0000007d: 	movl	(%r12), %r9d
    00000081: 	movl	0x4(%r12), %r8d
.Ltmp790:
    00000086: 	movl	%r9d, %eax
    00000089: 	imull	%r8d, %eax
    0000008d: 	addl	%ebp, %eax
    0000008f: 	addl	%eax, %eax
    00000091: 	leal	(%r8,%rax), %ecx
    00000095: 	addl	%r9d, %eax
    00000098: 	leal	(%rax,%rax,2), %edx
    0000009b: 	movl	%r9d, %eax
    0000009e: 	subl	%r8d, %eax
    000000a1: 	addl	%eax, %edx
    000000a3: 	subl	%ecx, %edx
    000000a5: 	subl	%ecx, %edx
    000000a7: 	subl	%ecx, %edx
    000000a9: 	cmpl	$0x1, %r13d
    000000ad: 	jle	.Ltmp786 # Offset: 173
    000000b3: 	cmpl	$0x2, 0x8(%rsp)
    000000b8: 	jbe	.Ltmp787 # Offset: 184
    000000be: 	movd	%ebp, %xmm7
    000000c2: 	movq	%r12, %rax
    000000c5: 	pxor	%xmm3, %xmm3
    000000c9: 	pshufd	$0x0, %xmm7, %xmm4
    000000ce: 	nop # Size: 2
.Ltmp788:
    000000d0: 	movdqu	(%rax), %xmm5
    000000d4: 	movdqu	0x4(%rax), %xmm1
    000000d9: 	addq	$0x10, %rax
    000000dd: 	movdqa	%xmm1, %xmm2
    000000e1: 	movdqa	%xmm5, %xmm6
    000000e5: 	movdqa	%xmm1, %xmm0
    000000e9: 	psrlq	$0x20, %xmm2
    000000ee: 	psrlq	$0x20, %xmm6
    000000f3: 	pmuludq	%xmm5, %xmm0
    000000f7: 	pmuludq	%xmm6, %xmm2
    000000fb: 	pshufd	$0x8, %xmm0, %xmm0
    00000100: 	pshufd	$0x8, %xmm2, %xmm2
    00000105: 	punpckldq	%xmm2, %xmm0
    00000109: 	paddd	%xmm4, %xmm0
    0000010d: 	pslld	$0x1, %xmm0
    00000112: 	paddd	%xmm0, %xmm1
    00000116: 	paddd	%xmm5, %xmm0
    0000011a: 	movdqa	%xmm1, %xmm2
    0000011e: 	pslld	$0x2, %xmm0
    00000123: 	pslld	$0x1, %xmm2
    00000128: 	psubd	%xmm1, %xmm0
    0000012c: 	paddd	%xmm2, %xmm1
    00000130: 	psubd	%xmm1, %xmm0
    00000134: 	paddd	%xmm0, %xmm3
    00000138: 	cmpq	%rax, %rbx
    0000013b: 	jne	.Ltmp788 # Offset: 315
    0000013d: 	movdqa	%xmm3, %xmm0
    00000141: 	movl	0x10(%rsp), %edi
    00000145: 	psrldq	$0x8, %xmm0
    0000014a: 	paddd	%xmm0, %xmm3
    0000014e: 	movdqa	%xmm3, %xmm0
    00000152: 	psrldq	$0x4, %xmm0
    00000157: 	paddd	%xmm0, %xmm3
    0000015b: 	movd	%xmm3, %eax
    0000015f: 	addl	%eax, %edx
    00000161: 	cmpl	%edi, 0xc(%rsp)
    00000165: 	je	.Ltmp786 # Offset: 357
    0000016b: 	movl	0x14(%rsp), %edi
.Ltmp799:
    0000016f: 	movslq	%edi, %rsi
    00000172: 	shlq	$0x2, %rsi
    00000176: 	leaq	(%r12,%rsi), %rax
    0000017a: 	movl	-0x4(%rax), %ecx
    0000017d: 	movl	(%rax), %r15d
    00000180: 	movl	%ecx, %eax
    00000182: 	imull	%r15d, %eax
    00000186: 	addl	%ebp, %eax
    00000188: 	addl	%eax, %eax
    0000018a: 	addl	%eax, %ecx
    0000018c: 	leal	(%rax,%r15), %r10d
    00000190: 	leal	0x1(%rdi), %eax
    00000193: 	leal	(%rdx,%rcx,4), %edx
    00000196: 	subl	%r10d, %edx
    00000199: 	subl	%r10d, %edx
    0000019c: 	addl	%r10d, %r10d
    0000019f: 	subl	%r10d, %edx
    000001a2: 	cmpl	%eax, %r13d
    000001a5: 	jle	.Ltmp786 # Offset: 421
    000001a7: 	movl	0x4(%r12,%rsi), %ecx
    000001ac: 	movl	%r15d, %eax
    000001af: 	addl	$0x2, %edi
    000001b2: 	imull	%ecx, %eax
    000001b5: 	addl	%ebp, %eax
    000001b7: 	addl	%eax, %eax
    000001b9: 	leal	(%rax,%rcx), %r10d
    000001bd: 	addl	%r15d, %eax
    000001c0: 	shll	$0x2, %eax
    000001c3: 	subl	%r10d, %eax
    000001c6: 	subl	%r10d, %eax
    000001c9: 	addl	%r10d, %r10d
    000001cc: 	subl	%r10d, %eax
    000001cf: 	addl	%eax, %edx
    000001d1: 	cmpl	%r13d, %edi
    000001d4: 	jge	.Ltmp786 # Offset: 468
    000001d6: 	movl	0x8(%r12,%rsi), %esi
    000001db: 	movl	%ecx, %eax
    000001dd: 	imull	%esi, %eax
    000001e0: 	addl	%ebp, %eax
    000001e2: 	addl	%eax, %eax
    000001e4: 	addl	%eax, %esi
    000001e6: 	addl	%ecx, %eax
    000001e8: 	shll	$0x2, %eax
    000001eb: 	subl	%esi, %eax
    000001ed: 	subl	%esi, %eax
    000001ef: 	addl	%esi, %esi
    000001f1: 	subl	%esi, %eax
    000001f3: 	addl	%eax, %edx
.Ltmp786:
    000001f5: 	testl	%edx, %edx
    000001f7: 	jne	.Ltmp789 # Offset: 503
    000001fd: 	addl	$0x1, %r14d
    00000201: 	cmpl	%r11d, %r14d
    00000204: 	jl	.Ltmp790 # Offset: 516
.Ltmp785:
    0000020a: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000211: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000218: 	subq	$0x20, %rax
    0000021c: 	cmpq	%rax, %rbx
    0000021f: 	je	.Ltmp791 # Offset: 543
    00000225: 	movq	0x18(%rsp), %rax
    0000022a: 	leaq	0x10(%rbx), %rdi
    0000022e: 	movq	%rdi, (%rbx)
    00000231: 	movq	(%rax), %rbp
    00000234: 	movq	0x8(%rax), %r12
    00000238: 	movq	%rbp, %rax
    0000023b: 	addq	%r12, %rax
    0000023e: 	je	.Ltmp792 # Offset: 574
    00000240: 	testq	%rbp, %rbp
    00000243: 	je	.Ltmp793 # Offset: 579
.Ltmp792:
    00000249: 	movq	%r12, 0x20(%rsp)
    0000024e: 	cmpq	$0xf, %r12
    00000252: 	ja	.Ltmp794 # Offset: 594
    00000258: 	cmpq	$0x1, %r12
    0000025c: 	jne	.Ltmp795 # Offset: 604
    00000262: 	movzbl	(%rbp), %eax
    00000266: 	movb	%al, 0x10(%rbx)
.Ltmp800:
    00000269: 	movq	%r12, 0x8(%rbx)
    0000026d: 	movb	$0x0, (%rdi,%r12)
    00000272: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000279: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000280: 	addq	$0x20, %rax
    00000284: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000028b: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000292: 	je	.Ltmp796 # Offset: 658
.Ltmp801:
    00000298: 	movq	-0x20(%rax), %rbp
    0000029c: 	callq	clock@PLT # Offset: 668
    000002a1: 	movq	%rax, end_time(%rip)
    000002a8: 	movq	0x28(%rsp), %rdx
    000002ad: 	subq	%fs:0x28, %rdx
    000002b6: 	jne	.Ltmp797 # Offset: 694
    000002bc: 	subq	start_time(%rip), %rax
    000002c3: 	pxor	%xmm0, %xmm0
    000002c7: 	movq	%rbp, %rdi
    000002ca: 	cvtsi2sd	%rax, %xmm0
    000002cf: 	divsd	DATAat0x4d640(%rip), %xmm0
    000002d7: 	addq	$0x38, %rsp
    000002db: 	popq	%rbx
    000002dc: 	popq	%rbp
    000002dd: 	popq	%r12
    000002df: 	popq	%r13
    000002e1: 	popq	%r14
    000002e3: 	popq	%r15
    000002e5: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 741
    000002ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp789:
    000002f0: 	movq	0x18(%rsp), %rax
    000002f5: 	leaq	DATAat0x4d004(%rip), %rsi
    000002fc: 	movl	$0x1, %edi
    00000301: 	addl	$0x1, %r14d
    00000305: 	movq	(%rax), %rdx
    00000308: 	xorl	%eax, %eax
    0000030a: 	callq	__printf_chk@PLT # Offset: 778
    0000030f: 	movl	iterations(%rip), %r11d
    00000316: 	cmpl	%r11d, %r14d
    00000319: 	jl	.Ltmp798 # Offset: 793
    0000031f: 	jmp	.Ltmp785 # Offset: 799
.Ltmp787:
    00000324: 	movl	$0x1, %edi
    00000329: 	jmp	.Ltmp799 # Offset: 809
.Ltmp794:
    0000032e: 	movq	%rbx, %rdi
    00000331: 	leaq	0x20(%rsp), %rsi
    00000336: 	xorl	%edx, %edx
    00000338: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 824
    0000033d: 	movq	%rax, (%rbx)
    00000340: 	movq	%rax, %rdi
    00000343: 	movq	0x20(%rsp), %rax
    00000348: 	movq	%rax, 0x10(%rbx)
.Ltmp802:
    0000034c: 	movq	%r12, %rdx
    0000034f: 	movq	%rbp, %rsi
    00000352: 	callq	memcpy@PLT # Offset: 850
    00000357: 	movq	0x20(%rsp), %r12
    0000035c: 	movq	(%rbx), %rdi
    0000035f: 	jmp	.Ltmp800 # Offset: 863
.Ltmp791:
    00000364: 	movq	0x18(%rsp), %rsi
    00000369: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000370: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 880
    00000375: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000037c: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000383: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000038a: 	jne	.Ltmp801 # Offset: 906
.Ltmp796:
    00000390: 	movq	-0x8(%rdx), %rax
    00000394: 	addq	$0x200, %rax
    0000039a: 	jmp	.Ltmp801 # Offset: 922
.Ltmp795:
    0000039f: 	testq	%r12, %r12
    000003a2: 	je	.Ltmp800 # Offset: 930
    000003a8: 	jmp	.Ltmp802 # Offset: 936
.Ltmp797:
    000003aa: 	callq	__stack_chk_fail@PLT # Offset: 938
.Ltmp793:
    000003af: 	leaq	DATAat0x4d018(%rip), %rdi
    000003b6: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 950
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE4Ij14custom_cse_mulIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z28test_CSE4_add_inline_flippedIi14custom_cse_addIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 86
  State       : disassembled
  Address     : 0xd8a0
  Size        : 0x3cd
  MaxSize     : 0x3d0
  Offset      : 0xd8a0
  Section     : .text
  Orc Section : .local.text._Z28test_CSE4_add_inline_flippedIi14custom_cse_addIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB085:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdi, %rbx
    00000016: 	subq	$0x38, %rsp
    0000001a: 	movq	%rcx, 0x18(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x28(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r10d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r10d, %r10d
    00000045: 	jle	.Ltmp803 # Offset: 69
    0000004b: 	leal	-0x1(%r14), %r8d
    0000004f: 	leal	-0x2(%r14), %eax
    00000053: 	movl	(%rbx), %edi
    00000055: 	movl	0x4(%rbx), %esi
    00000058: 	movl	%eax, 0xc(%rsp)
    0000005c: 	movl	%r8d, %eax
    0000005f: 	movl	%r8d, %r15d
    00000062: 	xorl	%r13d, %r13d
    00000065: 	shrl	$0x2, %eax
    00000068: 	andl	$-0x4, %r15d
    0000006c: 	subl	$0x1, %eax
    0000006f: 	shlq	$0x4, %rax
    00000073: 	leaq	0x10(%rbx,%rax), %r12
    00000078: 	leal	0x1(%r15), %eax
    0000007c: 	movl	%eax, 0x10(%rsp)
.Ltmp809:
    00000080: 	leal	(%rdi,%rsi), %edx
    00000083: 	addl	%ebp, %edx
    00000085: 	leal	(%rdi,%rdx,2), %eax
    00000088: 	leal	(%rsi,%rdx,2), %ecx
    0000008b: 	movl	%edi, %edx
    0000008d: 	subl	%esi, %edx
    0000008f: 	addl	%eax, %edx
    00000091: 	subl	%ecx, %edx
    00000093: 	addl	%eax, %edx
    00000095: 	subl	%ecx, %edx
    00000097: 	addl	%edx, %eax
    00000099: 	subl	%ecx, %eax
    0000009b: 	cmpl	$0x1, %r14d
    0000009f: 	jle	.Ltmp804 # Offset: 159
    000000a5: 	cmpl	$0x2, 0xc(%rsp)
    000000aa: 	jbe	.Ltmp805 # Offset: 170
    000000b0: 	movd	%ebp, %xmm5
    000000b4: 	movq	%rbx, %rdx
    000000b7: 	pxor	%xmm0, %xmm0
    000000bb: 	pshufd	$0x0, %xmm5, %xmm4
.Ltmp806:
    000000c0: 	movdqu	(%rdx), %xmm6
    000000c4: 	movdqu	0x4(%rdx), %xmm3
    000000c9: 	addq	$0x10, %rdx
    000000cd: 	movdqu	-0xc(%rdx), %xmm1
    000000d2: 	paddd	%xmm6, %xmm3
    000000d6: 	movdqa	%xmm6, %xmm2
    000000da: 	paddd	%xmm4, %xmm3
    000000de: 	paddd	%xmm3, %xmm2
    000000e2: 	paddd	%xmm3, %xmm1
    000000e6: 	paddd	%xmm3, %xmm2
    000000ea: 	paddd	%xmm3, %xmm1
    000000ee: 	paddd	%xmm2, %xmm0
    000000f2: 	psubd	%xmm1, %xmm0
    000000f6: 	paddd	%xmm2, %xmm0
    000000fa: 	psubd	%xmm1, %xmm0
    000000fe: 	paddd	%xmm2, %xmm0
    00000102: 	psubd	%xmm1, %xmm0
    00000106: 	paddd	%xmm2, %xmm0
    0000010a: 	psubd	%xmm1, %xmm0
    0000010e: 	cmpq	%r12, %rdx
    00000111: 	jne	.Ltmp806 # Offset: 273
    00000113: 	movdqa	%xmm0, %xmm1
    00000117: 	psrldq	$0x8, %xmm1
    0000011c: 	paddd	%xmm1, %xmm0
    00000120: 	movdqa	%xmm0, %xmm1
    00000124: 	psrldq	$0x4, %xmm1
    00000129: 	paddd	%xmm1, %xmm0
    0000012d: 	movd	%xmm0, %edx
    00000131: 	addl	%edx, %eax
    00000133: 	cmpl	%r8d, %r15d
    00000136: 	je	.Ltmp804 # Offset: 310
    0000013c: 	movl	0x10(%rsp), %edx
    00000140: 	movl	%r15d, %r9d
.Ltmp817:
    00000143: 	movl	%r14d, %r11d
    00000146: 	subl	%r9d, %r11d
    00000149: 	leal	-0x1(%r11), %ecx
    0000014d: 	cmpl	$0x2, %r11d
    00000151: 	je	.Ltmp807 # Offset: 337
    00000153: 	movq	0x4(%rbx,%r9,4), %xmm5
    0000015a: 	movq	(%rbx,%r9,4), %xmm1
    00000160: 	movd	%ebp, %xmm7
    00000164: 	pshufd	$0xe0, %xmm7, %xmm0
    00000169: 	movdqa	%xmm5, %xmm2
    0000016d: 	movdqa	%xmm1, %xmm4
    00000171: 	movdqa	%xmm5, %xmm3
    00000175: 	paddd	%xmm1, %xmm2
    00000179: 	psubd	%xmm5, %xmm1
    0000017d: 	paddd	%xmm0, %xmm2
    00000181: 	movdqa	%xmm1, %xmm0
    00000185: 	paddd	%xmm2, %xmm4
    00000189: 	paddd	%xmm2, %xmm3
    0000018d: 	paddd	%xmm2, %xmm4
    00000191: 	paddd	%xmm3, %xmm2
    00000195: 	paddd	%xmm4, %xmm0
    00000199: 	psubd	%xmm2, %xmm0
    0000019d: 	paddd	%xmm4, %xmm0
    000001a1: 	psubd	%xmm2, %xmm0
    000001a5: 	paddd	%xmm4, %xmm0
    000001a9: 	psubd	%xmm2, %xmm0
    000001ad: 	movd	%xmm0, %r11d
    000001b2: 	pshufd	$0xe5, %xmm0, %xmm7
    000001b7: 	movd	%xmm7, %r9d
    000001bc: 	addl	%r11d, %r9d
    000001bf: 	addl	%r9d, %eax
    000001c2: 	movl	%ecx, %r9d
    000001c5: 	andl	$-0x2, %r9d
    000001c9: 	addl	%r9d, %edx
    000001cc: 	cmpl	%ecx, %r9d
    000001cf: 	je	.Ltmp804 # Offset: 463
.Ltmp807:
    000001d1: 	movslq	%edx, %rdx
    000001d4: 	movl	-0x4(%rbx,%rdx,4), %ecx
    000001d8: 	movl	(%rbx,%rdx,4), %r9d
    000001dc: 	leal	(%r9,%rcx), %edx
    000001e0: 	addl	%ebp, %edx
    000001e2: 	leal	(%rcx,%rdx,2), %ecx
    000001e5: 	leal	(%r9,%rdx,2), %edx
    000001e9: 	leal	(%rax,%rcx,2), %eax
    000001ec: 	subl	%edx, %eax
    000001ee: 	subl	%edx, %eax
    000001f0: 	leal	(%rax,%rcx,2), %eax
    000001f3: 	subl	%edx, %eax
    000001f5: 	subl	%edx, %eax
.Ltmp804:
    000001f7: 	testl	%eax, %eax
    000001f9: 	jne	.Ltmp808 # Offset: 505
    000001ff: 	addl	$0x1, %r13d
    00000203: 	cmpl	%r10d, %r13d
    00000206: 	jl	.Ltmp809 # Offset: 518
.Ltmp803:
    0000020c: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000213: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000021a: 	subq	$0x20, %rax
    0000021e: 	cmpq	%rax, %rbx
    00000221: 	je	.Ltmp810 # Offset: 545
    00000227: 	movq	0x18(%rsp), %rax
    0000022c: 	leaq	0x10(%rbx), %rdi
    00000230: 	movq	%rdi, (%rbx)
    00000233: 	movq	(%rax), %rbp
    00000236: 	movq	0x8(%rax), %r12
    0000023a: 	movq	%rbp, %rax
    0000023d: 	addq	%r12, %rax
    00000240: 	je	.Ltmp811 # Offset: 576
    00000242: 	testq	%rbp, %rbp
    00000245: 	je	.Ltmp812 # Offset: 581
.Ltmp811:
    0000024b: 	movq	%r12, 0x20(%rsp)
    00000250: 	cmpq	$0xf, %r12
    00000254: 	ja	.Ltmp813 # Offset: 596
    0000025a: 	cmpq	$0x1, %r12
    0000025e: 	jne	.Ltmp814 # Offset: 606
    00000264: 	movzbl	(%rbp), %eax
    00000268: 	movb	%al, 0x10(%rbx)
.Ltmp818:
    0000026b: 	movq	%r12, 0x8(%rbx)
    0000026f: 	movb	$0x0, (%rdi,%r12)
    00000274: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000027b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000282: 	addq	$0x20, %rax
    00000286: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000028d: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000294: 	je	.Ltmp815 # Offset: 660
.Ltmp819:
    0000029a: 	movq	-0x20(%rax), %rbp
    0000029e: 	callq	clock@PLT # Offset: 670
    000002a3: 	movq	%rax, end_time(%rip)
    000002aa: 	movq	0x28(%rsp), %rdx
    000002af: 	subq	%fs:0x28, %rdx
    000002b8: 	jne	.Ltmp816 # Offset: 696
    000002be: 	subq	start_time(%rip), %rax
    000002c5: 	pxor	%xmm0, %xmm0
    000002c9: 	movq	%rbp, %rdi
    000002cc: 	cvtsi2sd	%rax, %xmm0
    000002d1: 	divsd	DATAat0x4d640(%rip), %xmm0
    000002d9: 	addq	$0x38, %rsp
    000002dd: 	popq	%rbx
    000002de: 	popq	%rbp
    000002df: 	popq	%r12
    000002e1: 	popq	%r13
    000002e3: 	popq	%r14
    000002e5: 	popq	%r15
    000002e7: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 743
    000002ec: 	nopl	(%rax) # Size: 4
.Ltmp808:
    000002f0: 	movq	0x18(%rsp), %rax
    000002f5: 	leaq	DATAat0x4d004(%rip), %rsi
    000002fc: 	movl	$0x1, %edi
    00000301: 	movl	%r8d, 0x14(%rsp)
    00000306: 	addl	$0x1, %r13d
    0000030a: 	movq	(%rax), %rdx
    0000030d: 	xorl	%eax, %eax
    0000030f: 	callq	__printf_chk@PLT # Offset: 783
    00000314: 	movl	iterations(%rip), %r10d
    0000031b: 	cmpl	%r10d, %r13d
    0000031e: 	jge	.Ltmp803 # Offset: 798
    00000324: 	movl	(%rbx), %edi
    00000326: 	movl	0x4(%rbx), %esi
    00000329: 	movl	0x14(%rsp), %r8d
    0000032e: 	jmp	.Ltmp809 # Offset: 814
.Ltmp805:
    00000333: 	xorl	%r9d, %r9d
    00000336: 	movl	$0x1, %edx
    0000033b: 	jmp	.Ltmp817 # Offset: 827
.Ltmp813:
    00000340: 	movq	%rbx, %rdi
    00000343: 	leaq	0x20(%rsp), %rsi
    00000348: 	xorl	%edx, %edx
    0000034a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 842
    0000034f: 	movq	%rax, (%rbx)
    00000352: 	movq	%rax, %rdi
    00000355: 	movq	0x20(%rsp), %rax
    0000035a: 	movq	%rax, 0x10(%rbx)
.Ltmp820:
    0000035e: 	movq	%r12, %rdx
    00000361: 	movq	%rbp, %rsi
    00000364: 	callq	memcpy@PLT # Offset: 868
    00000369: 	movq	0x20(%rsp), %r12
    0000036e: 	movq	(%rbx), %rdi
    00000371: 	jmp	.Ltmp818 # Offset: 881
.Ltmp810:
    00000376: 	movq	0x18(%rsp), %rsi
    0000037b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000382: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 898
    00000387: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000038e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000395: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000039c: 	jne	.Ltmp819 # Offset: 924
.Ltmp815:
    000003a2: 	movq	-0x8(%rdx), %rax
    000003a6: 	addq	$0x200, %rax
    000003ac: 	jmp	.Ltmp819 # Offset: 940
.Ltmp814:
    000003b1: 	testq	%r12, %r12
    000003b4: 	je	.Ltmp818 # Offset: 948
    000003ba: 	jmp	.Ltmp820 # Offset: 954
.Ltmp816:
    000003bc: 	callq	__stack_chk_fail@PLT # Offset: 956
.Ltmp812:
    000003c1: 	leaq	DATAat0x4d018(%rip), %rdi
    000003c8: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 968
DWARF CFI Instructions:
    <empty>
End of Function "_Z28test_CSE4_add_inline_flippedIi14custom_cse_addIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSE4Ij14custom_cse_addIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 87
  State       : disassembled
  Address     : 0xdc70
  Size        : 0x3ad
  MaxSize     : 0x3b0
  Offset      : 0xdc70
  Section     : .text
  Orc Section : .local.text._Z9test_CSE4Ij14custom_cse_addIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB086:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdi, %rbx
    00000016: 	subq	$0x38, %rsp
    0000001a: 	movq	%rcx, 0x18(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x28(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r10d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r10d, %r10d
    00000045: 	jle	.Ltmp821 # Offset: 69
    0000004b: 	leal	-0x1(%r14), %r8d
    0000004f: 	leal	-0x2(%r14), %eax
    00000053: 	movl	(%rbx), %edi
    00000055: 	movl	0x4(%rbx), %esi
    00000058: 	movl	%eax, 0xc(%rsp)
    0000005c: 	movl	%r8d, %eax
    0000005f: 	movl	%r8d, %r15d
    00000062: 	xorl	%r13d, %r13d
    00000065: 	shrl	$0x2, %eax
    00000068: 	andl	$-0x4, %r15d
    0000006c: 	subl	$0x1, %eax
    0000006f: 	shlq	$0x4, %rax
    00000073: 	leaq	0x10(%rbx,%rax), %r12
    00000078: 	leal	0x1(%r15), %eax
    0000007c: 	movl	%eax, 0x10(%rsp)
.Ltmp827:
    00000080: 	leal	(%rdi,%rsi), %eax
    00000083: 	movl	%edi, %ecx
    00000085: 	addl	%ebp, %eax
    00000087: 	subl	%esi, %ecx
    00000089: 	addl	%eax, %eax
    0000008b: 	leal	(%rsi,%rax), %edx
    0000008e: 	addl	%edi, %eax
    00000090: 	leal	(%rax,%rax,2), %eax
    00000093: 	addl	%ecx, %eax
    00000095: 	subl	%edx, %eax
    00000097: 	subl	%edx, %eax
    00000099: 	subl	%edx, %eax
    0000009b: 	cmpl	$0x1, %r14d
    0000009f: 	jle	.Ltmp822 # Offset: 159
    000000a5: 	cmpl	$0x2, 0xc(%rsp)
    000000aa: 	jbe	.Ltmp823 # Offset: 170
    000000b0: 	movd	%ebp, %xmm7
    000000b4: 	movq	%rbx, %rdx
    000000b7: 	pxor	%xmm3, %xmm3
    000000bb: 	pshufd	$0x0, %xmm7, %xmm4
.Ltmp824:
    000000c0: 	movdqu	(%rdx), %xmm5
    000000c4: 	movdqu	0x4(%rdx), %xmm0
    000000c9: 	addq	$0x10, %rdx
    000000cd: 	movdqu	-0xc(%rdx), %xmm1
    000000d2: 	paddd	%xmm5, %xmm0
    000000d6: 	paddd	%xmm4, %xmm0
    000000da: 	pslld	$0x1, %xmm0
    000000df: 	paddd	%xmm0, %xmm1
    000000e3: 	paddd	%xmm5, %xmm0
    000000e7: 	movdqa	%xmm1, %xmm2
    000000eb: 	pslld	$0x2, %xmm0
    000000f0: 	pslld	$0x1, %xmm2
    000000f5: 	psubd	%xmm1, %xmm0
    000000f9: 	paddd	%xmm2, %xmm1
    000000fd: 	psubd	%xmm1, %xmm0
    00000101: 	paddd	%xmm0, %xmm3
    00000105: 	cmpq	%r12, %rdx
    00000108: 	jne	.Ltmp824 # Offset: 264
    0000010a: 	movdqa	%xmm3, %xmm0
    0000010e: 	psrldq	$0x8, %xmm0
    00000113: 	paddd	%xmm0, %xmm3
    00000117: 	movdqa	%xmm3, %xmm0
    0000011b: 	psrldq	$0x4, %xmm0
    00000120: 	paddd	%xmm0, %xmm3
    00000124: 	movd	%xmm3, %edx
    00000128: 	addl	%edx, %eax
    0000012a: 	cmpl	%r8d, %r15d
    0000012d: 	je	.Ltmp822 # Offset: 301
    00000133: 	movl	0x10(%rsp), %edx
    00000137: 	movl	%r15d, %r9d
.Ltmp835:
    0000013a: 	movl	%r14d, %r11d
    0000013d: 	subl	%r9d, %r11d
    00000140: 	leal	-0x1(%r11), %ecx
    00000144: 	cmpl	$0x2, %r11d
    00000148: 	je	.Ltmp825 # Offset: 328
    0000014a: 	movq	(%rbx,%r9,4), %xmm1
    00000150: 	movd	%ebp, %xmm7
    00000154: 	movq	0x4(%rbx,%r9,4), %xmm2
    0000015b: 	pshufd	$0xe0, %xmm7, %xmm0
    00000160: 	paddd	%xmm1, %xmm0
    00000164: 	paddd	%xmm2, %xmm0
    00000168: 	pslld	$0x1, %xmm0
    0000016d: 	paddd	%xmm0, %xmm2
    00000171: 	paddd	%xmm1, %xmm0
    00000175: 	movdqa	%xmm2, %xmm1
    00000179: 	pslld	$0x2, %xmm0
    0000017e: 	pslld	$0x1, %xmm1
    00000183: 	psubd	%xmm2, %xmm0
    00000187: 	paddd	%xmm2, %xmm1
    0000018b: 	psubd	%xmm1, %xmm0
    0000018f: 	movd	%xmm0, %r11d
    00000194: 	pshufd	$0xe5, %xmm0, %xmm7
    00000199: 	movd	%xmm7, %r9d
    0000019e: 	addl	%r11d, %r9d
    000001a1: 	addl	%r9d, %eax
    000001a4: 	movl	%ecx, %r9d
    000001a7: 	andl	$-0x2, %r9d
    000001ab: 	addl	%r9d, %edx
    000001ae: 	cmpl	%ecx, %r9d
    000001b1: 	je	.Ltmp822 # Offset: 433
.Ltmp825:
    000001b3: 	movslq	%edx, %rdx
    000001b6: 	movl	-0x4(%rbx,%rdx,4), %r9d
    000001bb: 	movl	(%rbx,%rdx,4), %edx
    000001be: 	leal	(%rbp,%rdx), %ecx
    000001c2: 	addl	%r9d, %ecx
    000001c5: 	addl	%ecx, %ecx
    000001c7: 	addl	%ecx, %edx
    000001c9: 	addl	%r9d, %ecx
    000001cc: 	leal	(%rax,%rcx,4), %eax
    000001cf: 	subl	%edx, %eax
    000001d1: 	subl	%edx, %eax
    000001d3: 	addl	%edx, %edx
    000001d5: 	subl	%edx, %eax
.Ltmp822:
    000001d7: 	testl	%eax, %eax
    000001d9: 	jne	.Ltmp826 # Offset: 473
    000001df: 	addl	$0x1, %r13d
    000001e3: 	cmpl	%r10d, %r13d
    000001e6: 	jl	.Ltmp827 # Offset: 486
.Ltmp821:
    000001ec: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001f3: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001fa: 	subq	$0x20, %rax
    000001fe: 	cmpq	%rax, %rbx
    00000201: 	je	.Ltmp828 # Offset: 513
    00000207: 	movq	0x18(%rsp), %rax
    0000020c: 	leaq	0x10(%rbx), %rdi
    00000210: 	movq	%rdi, (%rbx)
    00000213: 	movq	(%rax), %rbp
    00000216: 	movq	0x8(%rax), %r12
    0000021a: 	movq	%rbp, %rax
    0000021d: 	addq	%r12, %rax
    00000220: 	je	.Ltmp829 # Offset: 544
    00000222: 	testq	%rbp, %rbp
    00000225: 	je	.Ltmp830 # Offset: 549
.Ltmp829:
    0000022b: 	movq	%r12, 0x20(%rsp)
    00000230: 	cmpq	$0xf, %r12
    00000234: 	ja	.Ltmp831 # Offset: 564
    0000023a: 	cmpq	$0x1, %r12
    0000023e: 	jne	.Ltmp832 # Offset: 574
    00000244: 	movzbl	(%rbp), %eax
    00000248: 	movb	%al, 0x10(%rbx)
.Ltmp836:
    0000024b: 	movq	%r12, 0x8(%rbx)
    0000024f: 	movb	$0x0, (%rdi,%r12)
    00000254: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000025b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000262: 	addq	$0x20, %rax
    00000266: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000026d: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000274: 	je	.Ltmp833 # Offset: 628
.Ltmp837:
    0000027a: 	movq	-0x20(%rax), %rbp
    0000027e: 	callq	clock@PLT # Offset: 638
    00000283: 	movq	%rax, end_time(%rip)
    0000028a: 	movq	0x28(%rsp), %rdx
    0000028f: 	subq	%fs:0x28, %rdx
    00000298: 	jne	.Ltmp834 # Offset: 664
    0000029e: 	subq	start_time(%rip), %rax
    000002a5: 	pxor	%xmm0, %xmm0
    000002a9: 	movq	%rbp, %rdi
    000002ac: 	cvtsi2sd	%rax, %xmm0
    000002b1: 	divsd	DATAat0x4d640(%rip), %xmm0
    000002b9: 	addq	$0x38, %rsp
    000002bd: 	popq	%rbx
    000002be: 	popq	%rbp
    000002bf: 	popq	%r12
    000002c1: 	popq	%r13
    000002c3: 	popq	%r14
    000002c5: 	popq	%r15
    000002c7: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 711
    000002cc: 	nopl	(%rax) # Size: 4
.Ltmp826:
    000002d0: 	movq	0x18(%rsp), %rax
    000002d5: 	leaq	DATAat0x4d004(%rip), %rsi
    000002dc: 	movl	$0x1, %edi
    000002e1: 	movl	%r8d, 0x14(%rsp)
    000002e6: 	addl	$0x1, %r13d
    000002ea: 	movq	(%rax), %rdx
    000002ed: 	xorl	%eax, %eax
    000002ef: 	callq	__printf_chk@PLT # Offset: 751
    000002f4: 	movl	iterations(%rip), %r10d
    000002fb: 	cmpl	%r10d, %r13d
    000002fe: 	jge	.Ltmp821 # Offset: 766
    00000304: 	movl	(%rbx), %edi
    00000306: 	movl	0x4(%rbx), %esi
    00000309: 	movl	0x14(%rsp), %r8d
    0000030e: 	jmp	.Ltmp827 # Offset: 782
.Ltmp823:
    00000313: 	xorl	%r9d, %r9d
    00000316: 	movl	$0x1, %edx
    0000031b: 	jmp	.Ltmp835 # Offset: 795
.Ltmp831:
    00000320: 	movq	%rbx, %rdi
    00000323: 	leaq	0x20(%rsp), %rsi
    00000328: 	xorl	%edx, %edx
    0000032a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 810
    0000032f: 	movq	%rax, (%rbx)
    00000332: 	movq	%rax, %rdi
    00000335: 	movq	0x20(%rsp), %rax
    0000033a: 	movq	%rax, 0x10(%rbx)
.Ltmp838:
    0000033e: 	movq	%r12, %rdx
    00000341: 	movq	%rbp, %rsi
    00000344: 	callq	memcpy@PLT # Offset: 836
    00000349: 	movq	0x20(%rsp), %r12
    0000034e: 	movq	(%rbx), %rdi
    00000351: 	jmp	.Ltmp836 # Offset: 849
.Ltmp828:
    00000356: 	movq	0x18(%rsp), %rsi
    0000035b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000362: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 866
    00000367: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000036e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000375: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000037c: 	jne	.Ltmp837 # Offset: 892
.Ltmp833:
    00000382: 	movq	-0x8(%rdx), %rax
    00000386: 	addq	$0x200, %rax
    0000038c: 	jmp	.Ltmp837 # Offset: 908
.Ltmp832:
    00000391: 	testq	%r12, %r12
    00000394: 	je	.Ltmp836 # Offset: 916
    0000039a: 	jmp	.Ltmp838 # Offset: 922
.Ltmp834:
    0000039c: 	callq	__stack_chk_fail@PLT # Offset: 924
.Ltmp830:
    000003a1: 	leaq	DATAat0x4d018(%rip), %rdi
    000003a8: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 936
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE4Ij14custom_cse_addIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z17test_CSE4_halfoptIf14custom_cse_mixIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 88
  State       : disassembled
  Address     : 0xe020
  Size        : 0x413
  MaxSize     : 0x420
  Offset      : 0xe020
  Section     : .text
  Orc Section : .local.text._Z17test_CSE4_halfoptIf14custom_cse_mixIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB087:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movl	%esi, %r12d
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdx, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movss	%xmm0, 0xc(%rsp)
    00000021: 	movq	%fs:0x28, %rax
    0000002a: 	movq	%rax, 0x18(%rsp)
    0000002f: 	xorl	%eax, %eax
    00000031: 	callq	clock@PLT # Offset: 49
    00000036: 	movl	iterations(%rip), %edx
    0000003c: 	movss	0xc(%rsp), %xmm3
    00000042: 	movq	%rax, start_time(%rip)
    00000049: 	testl	%edx, %edx
    0000004b: 	jle	.Ltmp839 # Offset: 75
    00000051: 	leal	-0x4(%r12), %eax
    00000056: 	movss	(%rbx), %xmm4
    0000005a: 	movss	0x4(%rbx), %xmm5
    0000005f: 	xorl	%r13d, %r13d
    00000062: 	shrl	%eax
    00000064: 	movq	DATAat0x4d5e0(%rip), %xmm7
    0000006c: 	movsd	DATAat0x4d620(%rip), %xmm8
    00000075: 	pxor	%xmm10, %xmm10
    0000007a: 	movsd	DATAat0x4d628(%rip), %xmm6
    00000082: 	leaq	0x5(%rax,%rax), %r14
    00000087: 	movss	DATAat0x4d5d0(%rip), %xmm9
    00000090: 	leaq	DATAat0x4d004(%rip), %r15
    00000097: 	nopw	(%rax,%rax) # Size: 9
.Ltmp847:
    000000a0: 	movaps	%xmm4, %xmm13
    000000a4: 	movaps	%xmm4, %xmm0
    000000a7: 	movaps	%xmm4, %xmm2
    000000aa: 	divss	%xmm3, %xmm13
    000000af: 	subss	%xmm5, %xmm0
    000000b3: 	movaps	%xmm4, %xmm11
    000000b7: 	mulss	%xmm3, %xmm0
    000000bb: 	addss	%xmm13, %xmm0
    000000c0: 	addss	%xmm0, %xmm0
    000000c4: 	addss	%xmm0, %xmm2
    000000c8: 	addss	%xmm5, %xmm0
    000000cc: 	subss	%xmm0, %xmm2
    000000d0: 	movaps	%xmm2, %xmm0
    000000d3: 	addss	%xmm10, %xmm0
    000000d8: 	addss	%xmm2, %xmm0
    000000dc: 	addss	%xmm2, %xmm0
    000000e0: 	addss	%xmm0, %xmm2
    000000e4: 	cmpl	$0x1, %r12d
    000000e8: 	jle	.Ltmp840 # Offset: 232
    000000ee: 	cmpl	$0x3, %r12d
    000000f2: 	jle	.Ltmp841 # Offset: 242
    000000f8: 	movl	$0x3, %ecx
    000000fd: 	jmp	.Ltmp842 # Offset: 253
    000000ff: 	nop # Size: 1
.Ltmp843:
    00000100: 	movaps	%xmm11, %xmm13
    00000104: 	divss	%xmm3, %xmm13
.Ltmp842:
    00000109: 	movss	-0x8(%rbx,%rcx,4), %xmm12
    00000110: 	movaps	%xmm11, %xmm1
    00000114: 	movaps	%xmm11, %xmm0
    00000118: 	movslq	%ecx, %rax
    0000011b: 	movss	-0x4(%rbx,%rcx,4), %xmm11
    00000122: 	addq	$0x2, %rcx
    00000126: 	subss	%xmm12, %xmm1
    0000012b: 	mulss	%xmm3, %xmm1
    0000012f: 	addss	%xmm13, %xmm1
    00000134: 	addss	%xmm1, %xmm1
    00000138: 	addss	%xmm1, %xmm0
    0000013c: 	addss	%xmm12, %xmm1
    00000141: 	subss	%xmm1, %xmm0
    00000145: 	addss	%xmm0, %xmm2
    00000149: 	movaps	%xmm0, %xmm1
    0000014c: 	addss	%xmm0, %xmm2
    00000150: 	addss	%xmm0, %xmm2
    00000154: 	movaps	%xmm12, %xmm0
    00000158: 	subss	%xmm11, %xmm0
    0000015d: 	addss	%xmm2, %xmm1
    00000161: 	movaps	%xmm12, %xmm2
    00000165: 	divss	%xmm3, %xmm2
    00000169: 	mulss	%xmm3, %xmm0
    0000016d: 	addss	%xmm2, %xmm0
    00000171: 	addss	%xmm0, %xmm0
    00000175: 	addss	%xmm0, %xmm12
    0000017a: 	addss	%xmm11, %xmm0
    0000017f: 	subss	%xmm0, %xmm12
    00000184: 	addss	%xmm12, %xmm1
    00000189: 	addss	%xmm12, %xmm1
    0000018e: 	addss	%xmm12, %xmm1
    00000193: 	movaps	%xmm1, %xmm2
    00000196: 	addss	%xmm12, %xmm2
    0000019b: 	cmpq	%rcx, %r14
    0000019e: 	jne	.Ltmp843 # Offset: 414
    000001a4: 	nopl	(%rax) # Size: 4
.Ltmp844:
    000001a8: 	movss	-0x4(%rbx,%rax,4), %xmm1
    000001ae: 	movss	(%rbx,%rax,4), %xmm11
    000001b4: 	addq	$0x1, %rax
    000001b8: 	movaps	%xmm1, %xmm12
    000001bc: 	movaps	%xmm1, %xmm0
    000001bf: 	divss	%xmm3, %xmm12
    000001c4: 	subss	%xmm11, %xmm0
    000001c9: 	mulss	%xmm3, %xmm0
    000001cd: 	addss	%xmm12, %xmm0
    000001d2: 	addss	%xmm0, %xmm0
    000001d6: 	addss	%xmm0, %xmm1
    000001da: 	addss	%xmm11, %xmm0
    000001df: 	subss	%xmm0, %xmm1
    000001e3: 	addss	%xmm1, %xmm2
    000001e7: 	addss	%xmm1, %xmm2
    000001eb: 	addss	%xmm1, %xmm2
    000001ef: 	addss	%xmm1, %xmm2
    000001f3: 	cmpl	%eax, %r12d
    000001f6: 	jg	.Ltmp844 # Offset: 502
.Ltmp840:
    000001f8: 	movaps	%xmm2, %xmm0
    000001fb: 	andps	%xmm9, %xmm0
    000001ff: 	cvtss2sd	%xmm0, %xmm0
    00000203: 	comisd	%xmm8, %xmm0
    00000208: 	jbe	.Ltmp845 # Offset: 520
    0000020a: 	divss	%xmm2, %xmm2
.Ltmp845:
    0000020e: 	cvtss2sd	%xmm2, %xmm2
    00000212: 	andpd	%xmm7, %xmm2
    00000216: 	comisd	%xmm2, %xmm6
    0000021a: 	jbe	.Ltmp846 # Offset: 538
    00000220: 	addl	$0x1, %r13d
    00000224: 	cmpl	%edx, %r13d
    00000227: 	jl	.Ltmp847 # Offset: 551
.Ltmp839:
    0000022d: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000234: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000023b: 	subq	$0x20, %rax
    0000023f: 	cmpq	%rax, %rbx
    00000242: 	je	.Ltmp848 # Offset: 578
    00000248: 	leaq	0x10(%rbx), %rdi
    0000024c: 	movq	0x8(%rbp), %r12
    00000250: 	movq	%rdi, (%rbx)
    00000253: 	movq	(%rbp), %r13
    00000257: 	movq	%r13, %rax
    0000025a: 	addq	%r12, %rax
    0000025d: 	je	.Ltmp849 # Offset: 605
    0000025f: 	testq	%r13, %r13
    00000262: 	je	.Ltmp850 # Offset: 610
.Ltmp849:
    00000268: 	movq	%r12, 0x10(%rsp)
    0000026d: 	cmpq	$0xf, %r12
    00000271: 	ja	.Ltmp851 # Offset: 625
    00000277: 	cmpq	$0x1, %r12
    0000027b: 	jne	.Ltmp852 # Offset: 635
    00000281: 	movzbl	(%r13), %eax
    00000286: 	movb	%al, 0x10(%rbx)
.Ltmp855:
    00000289: 	movq	%r12, 0x8(%rbx)
    0000028d: 	movb	$0x0, (%rdi,%r12)
    00000292: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000299: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002a0: 	addq	$0x20, %rax
    000002a4: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002ab: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000002b2: 	je	.Ltmp853 # Offset: 690
.Ltmp856:
    000002b8: 	movq	-0x20(%rax), %rbp
    000002bc: 	callq	clock@PLT # Offset: 700
    000002c1: 	movq	%rax, end_time(%rip)
    000002c8: 	movq	0x18(%rsp), %rdx
    000002cd: 	subq	%fs:0x28, %rdx
    000002d6: 	jne	.Ltmp854 # Offset: 726
    000002dc: 	subq	start_time(%rip), %rax
    000002e3: 	pxor	%xmm0, %xmm0
    000002e7: 	movq	%rbp, %rdi
    000002ea: 	cvtsi2sd	%rax, %xmm0
    000002ef: 	divsd	DATAat0x4d640(%rip), %xmm0
    000002f7: 	addq	$0x28, %rsp
    000002fb: 	popq	%rbx
    000002fc: 	popq	%rbp
    000002fd: 	popq	%r12
    000002ff: 	popq	%r13
    00000301: 	popq	%r14
    00000303: 	popq	%r15
    00000305: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 773
    0000030a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp846:
    00000310: 	movq	(%rbp), %rdx
    00000314: 	movq	%r15, %rsi
    00000317: 	movl	$0x1, %edi
    0000031c: 	xorl	%eax, %eax
    0000031e: 	movss	%xmm3, 0xc(%rsp)
    00000324: 	addl	$0x1, %r13d
    00000328: 	callq	__printf_chk@PLT # Offset: 808
    0000032d: 	movl	iterations(%rip), %edx
    00000333: 	cmpl	%r13d, %edx
    00000336: 	jle	.Ltmp839 # Offset: 822
    0000033c: 	movq	DATAat0x4d620(%rip), %rax
    00000343: 	movss	0x4(%rbx), %xmm5
    00000348: 	movss	DATAat0x4d5d0(%rip), %xmm9
    00000351: 	pxor	%xmm10, %xmm10
    00000356: 	movss	(%rbx), %xmm4
    0000035a: 	movss	0xc(%rsp), %xmm3
    00000360: 	movq	%rax, %xmm8
    00000365: 	movq	DATAat0x4d628(%rip), %rax
    0000036c: 	movq	DATAat0x4d5e0(%rip), %xmm7
    00000374: 	movq	%rax, %xmm6
    00000379: 	jmp	.Ltmp847 # Offset: 889
.Ltmp841:
    0000037e: 	movl	$0x1, %eax
    00000383: 	jmp	.Ltmp844 # Offset: 899
.Ltmp851:
    00000388: 	movq	%rbx, %rdi
    0000038b: 	leaq	0x10(%rsp), %rsi
    00000390: 	xorl	%edx, %edx
    00000392: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 914
    00000397: 	movq	%rax, (%rbx)
    0000039a: 	movq	%rax, %rdi
    0000039d: 	movq	0x10(%rsp), %rax
    000003a2: 	movq	%rax, 0x10(%rbx)
.Ltmp857:
    000003a6: 	movq	%r12, %rdx
    000003a9: 	movq	%r13, %rsi
    000003ac: 	callq	memcpy@PLT # Offset: 940
    000003b1: 	movq	0x10(%rsp), %r12
    000003b6: 	movq	(%rbx), %rdi
    000003b9: 	jmp	.Ltmp855 # Offset: 953
.Ltmp848:
    000003be: 	movq	%rbp, %rsi
    000003c1: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000003c8: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 968
    000003cd: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000003d4: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000003db: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003e2: 	jne	.Ltmp856 # Offset: 994
.Ltmp853:
    000003e8: 	movq	-0x8(%rdx), %rax
    000003ec: 	addq	$0x200, %rax
    000003f2: 	jmp	.Ltmp856 # Offset: 1010
.Ltmp852:
    000003f7: 	testq	%r12, %r12
    000003fa: 	je	.Ltmp855 # Offset: 1018
    00000400: 	jmp	.Ltmp857 # Offset: 1024
.Ltmp854:
    00000402: 	callq	__stack_chk_fail@PLT # Offset: 1026
.Ltmp850:
    00000407: 	leaq	DATAat0x4d018(%rip), %rdi
    0000040e: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1038
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_CSE4_halfoptIf14custom_cse_mixIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSE2If14custom_cse_mixIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 89
  State       : disassembled
  Address     : 0xe440
  Size        : 0x36c
  MaxSize     : 0x370
  Offset      : 0xe440
  Section     : .text
  Orc Section : .local.text._Z9test_CSE2If14custom_cse_mixIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB088:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rdx, %rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movss	%xmm0, 0xc(%rsp)
    00000021: 	movq	%fs:0x28, %rax
    0000002a: 	movq	%rax, 0x18(%rsp)
    0000002f: 	xorl	%eax, %eax
    00000031: 	callq	clock@PLT # Offset: 49
    00000036: 	movl	iterations(%rip), %edx
    0000003c: 	movss	0xc(%rsp), %xmm3
    00000042: 	movq	%rax, start_time(%rip)
    00000049: 	testl	%edx, %edx
    0000004b: 	jle	.Ltmp858 # Offset: 75
    00000051: 	leal	-0x2(%r14), %eax
    00000055: 	movss	(%r13), %xmm4
    0000005b: 	movss	0x4(%r13), %xmm5
    00000061: 	xorl	%r12d, %r12d
    00000064: 	movsd	DATAat0x4d620(%rip), %xmm8
    0000006d: 	leaq	0x8(%r13,%rax,4), %rbx
    00000072: 	pxor	%xmm10, %xmm10
    00000077: 	movq	DATAat0x4d5e0(%rip), %xmm7
    0000007f: 	movsd	DATAat0x4d628(%rip), %xmm6
    00000087: 	leaq	DATAat0x4d004(%rip), %r15
    0000008e: 	movss	DATAat0x4d5d0(%rip), %xmm9
    00000097: 	nopw	(%rax,%rax) # Size: 9
.Ltmp863:
    000000a0: 	movaps	%xmm4, %xmm1
    000000a3: 	movaps	%xmm4, %xmm0
    000000a6: 	movaps	%xmm4, %xmm11
    000000aa: 	divss	%xmm3, %xmm1
    000000ae: 	subss	%xmm5, %xmm0
    000000b2: 	movaps	%xmm4, %xmm2
    000000b5: 	mulss	%xmm3, %xmm0
    000000b9: 	addss	%xmm1, %xmm0
    000000bd: 	movaps	%xmm5, %xmm1
    000000c0: 	addss	%xmm0, %xmm11
    000000c5: 	addss	%xmm0, %xmm1
    000000c9: 	addss	%xmm0, %xmm11
    000000ce: 	addss	%xmm1, %xmm0
    000000d2: 	movaps	%xmm11, %xmm12
    000000d6: 	addss	%xmm10, %xmm12
    000000db: 	movaps	%xmm12, %xmm1
    000000df: 	subss	%xmm0, %xmm1
    000000e3: 	addss	%xmm1, %xmm11
    000000e8: 	subss	%xmm0, %xmm11
    000000ed: 	cmpl	$0x1, %r14d
    000000f1: 	jle	.Ltmp859 # Offset: 241
    000000f3: 	leaq	0x4(%r13), %rax
    000000f7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp860:
    00000100: 	movaps	%xmm2, %xmm0
    00000103: 	movss	(%rax), %xmm2
    00000107: 	addq	$0x4, %rax
    0000010b: 	movaps	%xmm0, %xmm12
    0000010f: 	movaps	%xmm0, %xmm1
    00000112: 	divss	%xmm3, %xmm12
    00000117: 	subss	%xmm2, %xmm1
    0000011b: 	mulss	%xmm3, %xmm1
    0000011f: 	addss	%xmm12, %xmm1
    00000124: 	movaps	%xmm2, %xmm12
    00000128: 	addss	%xmm1, %xmm0
    0000012c: 	addss	%xmm1, %xmm12
    00000131: 	addss	%xmm1, %xmm0
    00000135: 	addss	%xmm12, %xmm1
    0000013a: 	addss	%xmm0, %xmm11
    0000013f: 	subss	%xmm1, %xmm11
    00000144: 	addss	%xmm0, %xmm11
    00000149: 	subss	%xmm1, %xmm11
    0000014e: 	cmpq	%rax, %rbx
    00000151: 	jne	.Ltmp860 # Offset: 337
.Ltmp859:
    00000153: 	movaps	%xmm11, %xmm0
    00000157: 	andps	%xmm9, %xmm0
    0000015b: 	cvtss2sd	%xmm0, %xmm0
    0000015f: 	comisd	%xmm8, %xmm0
    00000164: 	jbe	.Ltmp861 # Offset: 356
    00000166: 	divss	%xmm11, %xmm11
.Ltmp861:
    0000016b: 	cvtss2sd	%xmm11, %xmm11
    00000170: 	andpd	%xmm7, %xmm11
    00000175: 	comisd	%xmm11, %xmm6
    0000017a: 	jbe	.Ltmp862 # Offset: 378
    00000180: 	addl	$0x1, %r12d
    00000184: 	cmpl	%edx, %r12d
    00000187: 	jl	.Ltmp863 # Offset: 391
.Ltmp858:
    0000018d: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000194: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000019b: 	subq	$0x20, %rax
    0000019f: 	cmpq	%rax, %rbx
    000001a2: 	je	.Ltmp864 # Offset: 418
    000001a8: 	leaq	0x10(%rbx), %rdi
    000001ac: 	movq	0x8(%rbp), %r12
    000001b0: 	movq	%rdi, (%rbx)
    000001b3: 	movq	(%rbp), %r13
    000001b7: 	movq	%r13, %rax
    000001ba: 	addq	%r12, %rax
    000001bd: 	je	.Ltmp865 # Offset: 445
    000001bf: 	testq	%r13, %r13
    000001c2: 	je	.Ltmp866 # Offset: 450
.Ltmp865:
    000001c8: 	movq	%r12, 0x10(%rsp)
    000001cd: 	cmpq	$0xf, %r12
    000001d1: 	ja	.Ltmp867 # Offset: 465
    000001d7: 	cmpq	$0x1, %r12
    000001db: 	jne	.Ltmp868 # Offset: 475
    000001e1: 	movzbl	(%r13), %eax
    000001e6: 	movb	%al, 0x10(%rbx)
.Ltmp871:
    000001e9: 	movq	%r12, 0x8(%rbx)
    000001ed: 	movb	$0x0, (%rdi,%r12)
    000001f2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001f9: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000200: 	addq	$0x20, %rax
    00000204: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000020b: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000212: 	je	.Ltmp869 # Offset: 530
.Ltmp872:
    00000218: 	movq	-0x20(%rax), %rbp
    0000021c: 	callq	clock@PLT # Offset: 540
    00000221: 	movq	%rax, end_time(%rip)
    00000228: 	movq	0x18(%rsp), %rdx
    0000022d: 	subq	%fs:0x28, %rdx
    00000236: 	jne	.Ltmp870 # Offset: 566
    0000023c: 	subq	start_time(%rip), %rax
    00000243: 	pxor	%xmm0, %xmm0
    00000247: 	movq	%rbp, %rdi
    0000024a: 	cvtsi2sd	%rax, %xmm0
    0000024f: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000257: 	addq	$0x28, %rsp
    0000025b: 	popq	%rbx
    0000025c: 	popq	%rbp
    0000025d: 	popq	%r12
    0000025f: 	popq	%r13
    00000261: 	popq	%r14
    00000263: 	popq	%r15
    00000265: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 613
    0000026a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp862:
    00000270: 	movq	(%rbp), %rdx
    00000274: 	movq	%r15, %rsi
    00000277: 	movl	$0x1, %edi
    0000027c: 	xorl	%eax, %eax
    0000027e: 	movss	%xmm3, 0xc(%rsp)
    00000284: 	addl	$0x1, %r12d
    00000288: 	callq	__printf_chk@PLT # Offset: 648
    0000028d: 	movl	iterations(%rip), %edx
    00000293: 	cmpl	%edx, %r12d
    00000296: 	jge	.Ltmp858 # Offset: 662
    0000029c: 	movq	DATAat0x4d620(%rip), %rax
    000002a3: 	movss	(%r13), %xmm4
    000002a9: 	movss	DATAat0x4d5d0(%rip), %xmm9
    000002b2: 	pxor	%xmm10, %xmm10
    000002b7: 	movss	0x4(%r13), %xmm5
    000002bd: 	movss	0xc(%rsp), %xmm3
    000002c3: 	movq	%rax, %xmm8
    000002c8: 	movq	DATAat0x4d628(%rip), %rax
    000002cf: 	movq	DATAat0x4d5e0(%rip), %xmm7
    000002d7: 	movq	%rax, %xmm6
    000002dc: 	jmp	.Ltmp863 # Offset: 732
.Ltmp867:
    000002e1: 	movq	%rbx, %rdi
    000002e4: 	leaq	0x10(%rsp), %rsi
    000002e9: 	xorl	%edx, %edx
    000002eb: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 747
    000002f0: 	movq	%rax, (%rbx)
    000002f3: 	movq	%rax, %rdi
    000002f6: 	movq	0x10(%rsp), %rax
    000002fb: 	movq	%rax, 0x10(%rbx)
.Ltmp873:
    000002ff: 	movq	%r12, %rdx
    00000302: 	movq	%r13, %rsi
    00000305: 	callq	memcpy@PLT # Offset: 773
    0000030a: 	movq	0x10(%rsp), %r12
    0000030f: 	movq	(%rbx), %rdi
    00000312: 	jmp	.Ltmp871 # Offset: 786
.Ltmp864:
    00000317: 	movq	%rbp, %rsi
    0000031a: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000321: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 801
    00000326: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000032d: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000334: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000033b: 	jne	.Ltmp872 # Offset: 827
.Ltmp869:
    00000341: 	movq	-0x8(%rdx), %rax
    00000345: 	addq	$0x200, %rax
    0000034b: 	jmp	.Ltmp872 # Offset: 843
.Ltmp868:
    00000350: 	testq	%r12, %r12
    00000353: 	je	.Ltmp871 # Offset: 851
    00000359: 	jmp	.Ltmp873 # Offset: 857
.Ltmp870:
    0000035b: 	callq	__stack_chk_fail@PLT # Offset: 859
.Ltmp866:
    00000360: 	leaq	DATAat0x4d018(%rip), %rdi
    00000367: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 871
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE2If14custom_cse_mixIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSE4Ia14custom_cse_mixIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z9test_CSE4Ia14custom_cse_mixIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z9test_CSE4Ia14custom_cse_mixIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/simple_types_cse.cpp/1
  Number      : 90
  State       : disassembled
  Address     : 0xe7b0
  Size        : 0x2a2
  MaxSize     : 0x2b0
  Offset      : 0xe7b0
  Section     : .text
  Orc Section : .local.text._Z9test_CSE4Ia14custom_cse_mixIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB089:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	movq	%rdi, %r14
    00000007: 	pushq	%r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	movl	%esi, %ebp
    0000000e: 	pushq	%rbx
    0000000f: 	subq	$0x28, %rsp
    00000013: 	movq	%rdx, 0x8(%rsp)
    00000018: 	movq	%fs:0x28, %rax
    00000021: 	movq	%rax, 0x18(%rsp)
    00000026: 	xorl	%eax, %eax
    00000028: 	callq	clock@PLT # Offset: 40
    0000002d: 	movl	iterations(%rip), %r11d
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	testl	%r11d, %r11d
    0000003e: 	jle	.Ltmp874 # Offset: 62
    00000044: 	leaq	0x1(%r14), %rax
    00000048: 	movzbl	(%r14), %r15d
    0000004c: 	movsbl	0x1(%r14), %r10d
    00000051: 	xorl	%r13d, %r13d
    00000054: 	movq	%rax, (%rsp)
    00000058: 	movsbl	%bpl, %ebx
    0000005c: 	leaq	0x1f40(%r14), %r12
    00000063: 	nopl	(%rax,%rax) # Size: 5
.Ltmp877:
    00000068: 	movsbl	%r15b, %esi
    0000006c: 	movl	%ebp, %eax
    0000006e: 	movl	%esi, %edi
    00000070: 	subl	%r10d, %edi
    00000073: 	imull	%edi, %eax
    00000076: 	movl	%eax, %ecx
    00000078: 	movl	%esi, %eax
    0000007a: 	cltd
    0000007b: 	idivl	%ebx
    0000007d: 	addl	%ecx, %eax
    0000007f: 	movsbl	%al, %eax
    00000082: 	leal	(%r10,%rax,2), %edx
    00000086: 	leal	(%rsi,%rax,2), %eax
    00000089: 	leal	(%rax,%rax,2), %ecx
    0000008c: 	subl	%edx, %ecx
    0000008e: 	addl	%edi, %ecx
    00000090: 	movq	(%rsp), %rdi
    00000094: 	subl	%edx, %ecx
    00000096: 	subl	%edx, %ecx
    00000098: 	movl	%ecx, %r8d
    0000009b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp875:
    000000a0: 	movl	%esi, %ecx
    000000a2: 	movsbl	(%rdi), %esi
    000000a5: 	addq	$0x1, %rdi
    000000a9: 	movl	%ecx, %r9d
    000000ac: 	subl	%esi, %r9d
    000000af: 	movl	%r9d, %eax
    000000b2: 	imull	%ebp, %eax
    000000b5: 	movl	%eax, %r9d
    000000b8: 	movl	%ecx, %eax
    000000ba: 	cltd
    000000bb: 	idivl	%ebx
    000000bd: 	addl	%r9d, %eax
    000000c0: 	movsbl	%al, %eax
    000000c3: 	leal	(%rcx,%rax,2), %ecx
    000000c6: 	leal	(%rsi,%rax,2), %edx
    000000c9: 	leal	(%r8,%rcx,4), %ecx
    000000cd: 	subl	%edx, %ecx
    000000cf: 	subl	%edx, %ecx
    000000d1: 	subl	%edx, %ecx
    000000d3: 	subl	%edx, %ecx
    000000d5: 	movl	%ecx, %r8d
    000000d8: 	cmpq	%r12, %rdi
    000000db: 	jne	.Ltmp875 # Offset: 219
    000000dd: 	testb	%cl, %cl
    000000df: 	jne	.Ltmp876 # Offset: 223
    000000e5: 	addl	$0x1, %r13d
    000000e9: 	cmpl	%r11d, %r13d
    000000ec: 	jl	.Ltmp877 # Offset: 236
.Ltmp874:
    000000f2: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000f9: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000100: 	subq	$0x20, %rax
    00000104: 	cmpq	%rax, %rbx
    00000107: 	je	.Ltmp878 # Offset: 263
    0000010d: 	movq	0x8(%rsp), %rax
    00000112: 	leaq	0x10(%rbx), %rdi
    00000116: 	movq	%rdi, (%rbx)
    00000119: 	movq	(%rax), %rbp
    0000011c: 	movq	0x8(%rax), %r12
    00000120: 	movq	%rbp, %rax
    00000123: 	addq	%r12, %rax
    00000126: 	je	.Ltmp879 # Offset: 294
    00000128: 	testq	%rbp, %rbp
    0000012b: 	je	.Ltmp880 # Offset: 299
.Ltmp879:
    00000131: 	movq	%r12, 0x10(%rsp)
    00000136: 	cmpq	$0xf, %r12
    0000013a: 	ja	.Ltmp881 # Offset: 314
    00000140: 	cmpq	$0x1, %r12
    00000144: 	jne	.Ltmp882 # Offset: 324
    0000014a: 	movzbl	(%rbp), %eax
    0000014e: 	movb	%al, 0x10(%rbx)
.Ltmp885:
    00000151: 	movq	%r12, 0x8(%rbx)
    00000155: 	movb	$0x0, (%rdi,%r12)
    0000015a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000161: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000168: 	addq	$0x20, %rax
    0000016c: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000173: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000017a: 	je	.Ltmp883 # Offset: 378
.Ltmp886:
    00000180: 	movq	-0x20(%rax), %rbp
    00000184: 	callq	clock@PLT # Offset: 388
    00000189: 	movq	%rax, end_time(%rip)
    00000190: 	movq	0x18(%rsp), %rdx
    00000195: 	subq	%fs:0x28, %rdx
    0000019e: 	jne	.Ltmp884 # Offset: 414
    000001a4: 	subq	start_time(%rip), %rax
    000001ab: 	pxor	%xmm0, %xmm0
    000001af: 	movq	%rbp, %rdi
    000001b2: 	cvtsi2sd	%rax, %xmm0
    000001b7: 	divsd	DATAat0x4d640(%rip), %xmm0
    000001bf: 	addq	$0x28, %rsp
    000001c3: 	popq	%rbx
    000001c4: 	popq	%rbp
    000001c5: 	popq	%r12
    000001c7: 	popq	%r13
    000001c9: 	popq	%r14
    000001cb: 	popq	%r15
    000001cd: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 461
    000001d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp876:
    000001d8: 	movq	0x8(%rsp), %rax
    000001dd: 	leaq	DATAat0x4d004(%rip), %rsi
    000001e4: 	movl	$0x1, %edi
    000001e9: 	addl	$0x1, %r13d
    000001ed: 	movq	(%rax), %rdx
    000001f0: 	xorl	%eax, %eax
    000001f2: 	callq	__printf_chk@PLT # Offset: 498
    000001f7: 	movl	iterations(%rip), %r11d
    000001fe: 	cmpl	%r11d, %r13d
    00000201: 	jge	.Ltmp874 # Offset: 513
    00000207: 	movzbl	(%r14), %r15d
    0000020b: 	movsbl	0x1(%r14), %r10d
    00000210: 	jmp	.Ltmp877 # Offset: 528
.Ltmp881:
    00000215: 	movq	%rbx, %rdi
    00000218: 	leaq	0x10(%rsp), %rsi
    0000021d: 	xorl	%edx, %edx
    0000021f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 543
    00000224: 	movq	%rax, (%rbx)
    00000227: 	movq	%rax, %rdi
    0000022a: 	movq	0x10(%rsp), %rax
    0000022f: 	movq	%rax, 0x10(%rbx)
.Ltmp887:
    00000233: 	movq	%r12, %rdx
    00000236: 	movq	%rbp, %rsi
    00000239: 	callq	memcpy@PLT # Offset: 569
    0000023e: 	movq	0x10(%rsp), %r12
    00000243: 	movq	(%rbx), %rdi
    00000246: 	jmp	.Ltmp885 # Offset: 582
.Ltmp878:
    0000024b: 	movq	0x8(%rsp), %rsi
    00000250: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000257: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 599
    0000025c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000263: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000026a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000271: 	jne	.Ltmp886 # Offset: 625
.Ltmp883:
    00000277: 	movq	-0x8(%rdx), %rax
    0000027b: 	addq	$0x200, %rax
    00000281: 	jmp	.Ltmp886 # Offset: 641
.Ltmp882:
    00000286: 	testq	%r12, %r12
    00000289: 	je	.Ltmp885 # Offset: 649
    0000028f: 	jmp	.Ltmp887 # Offset: 655
.Ltmp884:
    00000291: 	callq	__stack_chk_fail@PLT # Offset: 657
.Ltmp880:
    00000296: 	leaq	DATAat0x4d018(%rip), %rdi
    0000029d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 669
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE4Ia14custom_cse_mixIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z9test_CSE4Ij14custom_cse_mixIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 91
  State       : disassembled
  Address     : 0xea60
  Size        : 0x291
  MaxSize     : 0x2a0
  Offset      : 0xea60
  Section     : .text
  Orc Section : .local.text._Z9test_CSE4Ij14custom_cse_mixIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB090:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%esi, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movl	%edx, %ebx
    00000016: 	subq	$0x28, %rsp
    0000001a: 	movq	%rcx, 0x8(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x18(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r15d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r15d, %r15d
    00000045: 	jle	.Ltmp888 # Offset: 69
    0000004b: 	leal	-0x2(%r13), %eax
    0000004f: 	xorl	%r14d, %r14d
    00000052: 	leaq	0x8(%r12,%rax,4), %rbp
.Ltmp900:
    00000057: 	movl	(%r12), %r10d
    0000005b: 	movl	0x4(%r12), %r11d
.Ltmp892:
    00000060: 	movl	%r10d, %eax
    00000063: 	xorl	%edx, %edx
    00000065: 	movl	%r10d, %edi
    00000068: 	movl	%ebx, %ecx
    0000006a: 	divl	%ebx
    0000006c: 	subl	%r11d, %edi
    0000006f: 	movl	%r10d, %esi
    00000072: 	imull	%edi, %ecx
    00000075: 	addl	%ecx, %eax
    00000077: 	addl	%eax, %eax
    00000079: 	leal	(%r11,%rax), %edx
    0000007d: 	addl	%r10d, %eax
    00000080: 	leal	(%rax,%rax,2), %r8d
    00000084: 	subl	%edx, %r8d
    00000087: 	addl	%edi, %r8d
    0000008a: 	subl	%edx, %r8d
    0000008d: 	subl	%edx, %r8d
    00000090: 	cmpl	$0x1, %r13d
    00000094: 	jle	.Ltmp889 # Offset: 148
    00000096: 	leaq	0x4(%r12), %rdi
    0000009b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp890:
    000000a0: 	movl	%esi, %ecx
    000000a2: 	xorl	%edx, %edx
    000000a4: 	movl	(%rdi), %esi
    000000a6: 	addq	$0x4, %rdi
    000000aa: 	movl	%ecx, %eax
    000000ac: 	movl	%ecx, %r9d
    000000af: 	divl	%ebx
    000000b1: 	subl	%esi, %r9d
    000000b4: 	imull	%ebx, %r9d
    000000b8: 	addl	%r9d, %eax
    000000bb: 	addl	%eax, %eax
    000000bd: 	leal	(%rsi,%rax), %edx
    000000c0: 	addl	%ecx, %eax
    000000c2: 	shll	$0x2, %eax
    000000c5: 	subl	%edx, %eax
    000000c7: 	subl	%edx, %eax
    000000c9: 	addl	%edx, %edx
    000000cb: 	subl	%edx, %eax
    000000cd: 	addl	%eax, %r8d
    000000d0: 	cmpq	%rdi, %rbp
    000000d3: 	jne	.Ltmp890 # Offset: 211
.Ltmp889:
    000000d5: 	testl	%r8d, %r8d
    000000d8: 	jne	.Ltmp891 # Offset: 216
    000000de: 	addl	$0x1, %r14d
    000000e2: 	cmpl	%r15d, %r14d
    000000e5: 	jl	.Ltmp892 # Offset: 229
.Ltmp888:
    000000eb: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000f2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000f9: 	subq	$0x20, %rax
    000000fd: 	cmpq	%rax, %rbx
    00000100: 	je	.Ltmp893 # Offset: 256
    00000106: 	movq	0x8(%rsp), %rax
    0000010b: 	leaq	0x10(%rbx), %rdi
    0000010f: 	movq	%rdi, (%rbx)
    00000112: 	movq	(%rax), %rbp
    00000115: 	movq	0x8(%rax), %r12
    00000119: 	movq	%rbp, %rax
    0000011c: 	addq	%r12, %rax
    0000011f: 	je	.Ltmp894 # Offset: 287
    00000121: 	testq	%rbp, %rbp
    00000124: 	je	.Ltmp895 # Offset: 292
.Ltmp894:
    0000012a: 	movq	%r12, 0x10(%rsp)
    0000012f: 	cmpq	$0xf, %r12
    00000133: 	ja	.Ltmp896 # Offset: 307
    00000139: 	cmpq	$0x1, %r12
    0000013d: 	jne	.Ltmp897 # Offset: 317
    00000143: 	movzbl	(%rbp), %eax
    00000147: 	movb	%al, 0x10(%rbx)
.Ltmp901:
    0000014a: 	movq	%r12, 0x8(%rbx)
    0000014e: 	movb	$0x0, (%rdi,%r12)
    00000153: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000015a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000161: 	addq	$0x20, %rax
    00000165: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000016c: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000173: 	je	.Ltmp898 # Offset: 371
.Ltmp902:
    00000179: 	movq	-0x20(%rax), %rbp
    0000017d: 	callq	clock@PLT # Offset: 381
    00000182: 	movq	%rax, end_time(%rip)
    00000189: 	movq	0x18(%rsp), %rdx
    0000018e: 	subq	%fs:0x28, %rdx
    00000197: 	jne	.Ltmp899 # Offset: 407
    0000019d: 	subq	start_time(%rip), %rax
    000001a4: 	pxor	%xmm0, %xmm0
    000001a8: 	movq	%rbp, %rdi
    000001ab: 	cvtsi2sd	%rax, %xmm0
    000001b0: 	divsd	DATAat0x4d640(%rip), %xmm0
    000001b8: 	addq	$0x28, %rsp
    000001bc: 	popq	%rbx
    000001bd: 	popq	%rbp
    000001be: 	popq	%r12
    000001c0: 	popq	%r13
    000001c2: 	popq	%r14
    000001c4: 	popq	%r15
    000001c6: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 454
    000001cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp891:
    000001d0: 	movq	0x8(%rsp), %rax
    000001d5: 	leaq	DATAat0x4d004(%rip), %rsi
    000001dc: 	movl	$0x1, %edi
    000001e1: 	addl	$0x1, %r14d
    000001e5: 	movq	(%rax), %rdx
    000001e8: 	xorl	%eax, %eax
    000001ea: 	callq	__printf_chk@PLT # Offset: 490
    000001ef: 	movl	iterations(%rip), %r15d
    000001f6: 	cmpl	%r15d, %r14d
    000001f9: 	jl	.Ltmp900 # Offset: 505
    000001ff: 	jmp	.Ltmp888 # Offset: 511
.Ltmp896:
    00000204: 	movq	%rbx, %rdi
    00000207: 	leaq	0x10(%rsp), %rsi
    0000020c: 	xorl	%edx, %edx
    0000020e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 526
    00000213: 	movq	%rax, (%rbx)
    00000216: 	movq	%rax, %rdi
    00000219: 	movq	0x10(%rsp), %rax
    0000021e: 	movq	%rax, 0x10(%rbx)
.Ltmp903:
    00000222: 	movq	%r12, %rdx
    00000225: 	movq	%rbp, %rsi
    00000228: 	callq	memcpy@PLT # Offset: 552
    0000022d: 	movq	0x10(%rsp), %r12
    00000232: 	movq	(%rbx), %rdi
    00000235: 	jmp	.Ltmp901 # Offset: 565
.Ltmp893:
    0000023a: 	movq	0x8(%rsp), %rsi
    0000023f: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000246: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 582
    0000024b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000252: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000259: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000260: 	jne	.Ltmp902 # Offset: 608
.Ltmp898:
    00000266: 	movq	-0x8(%rdx), %rax
    0000026a: 	addq	$0x200, %rax
    00000270: 	jmp	.Ltmp902 # Offset: 624
.Ltmp897:
    00000275: 	testq	%r12, %r12
    00000278: 	je	.Ltmp901 # Offset: 632
    0000027e: 	jmp	.Ltmp903 # Offset: 638
.Ltmp899:
    00000280: 	callq	__stack_chk_fail@PLT # Offset: 640
.Ltmp895:
    00000285: 	leaq	DATAat0x4d018(%rip), %rdi
    0000028c: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 652
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE4Ij14custom_cse_mixIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSE4Ii14custom_cse_mixIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 92
  State       : disassembled
  Address     : 0xed00
  Size        : 0x291
  MaxSize     : 0x2a0
  Offset      : 0xed00
  Section     : .text
  Orc Section : .local.text._Z9test_CSE4Ii14custom_cse_mixIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB091:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%esi, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movl	%edx, %ebx
    00000016: 	subq	$0x28, %rsp
    0000001a: 	movq	%rcx, 0x8(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x18(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r15d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r15d, %r15d
    00000045: 	jle	.Ltmp904 # Offset: 69
    0000004b: 	leal	-0x2(%r13), %eax
    0000004f: 	xorl	%r14d, %r14d
    00000052: 	leaq	0x8(%r12,%rax,4), %rbp
.Ltmp916:
    00000057: 	movl	(%r12), %r10d
    0000005b: 	movl	0x4(%r12), %r11d
.Ltmp908:
    00000060: 	movl	%r10d, %eax
    00000063: 	movl	%r10d, %esi
    00000066: 	movl	%ebx, %edi
    00000068: 	movl	%r10d, %ecx
    0000006b: 	cltd
    0000006c: 	subl	%r11d, %esi
    0000006f: 	idivl	%ebx
    00000071: 	imull	%esi, %edi
    00000074: 	addl	%edi, %eax
    00000076: 	leal	(%r10,%rax,2), %r8d
    0000007a: 	leal	(%r11,%rax,2), %eax
    0000007e: 	addl	%r8d, %esi
    00000081: 	subl	%eax, %esi
    00000083: 	addl	%r8d, %esi
    00000086: 	subl	%eax, %esi
    00000088: 	addl	%esi, %r8d
    0000008b: 	subl	%eax, %r8d
    0000008e: 	cmpl	$0x1, %r13d
    00000092: 	jle	.Ltmp905 # Offset: 146
    00000094: 	leaq	0x4(%r12), %rsi
    00000099: 	nopl	(%rax) # Size: 7
.Ltmp906:
    000000a0: 	movl	%ecx, %r9d
    000000a3: 	movl	(%rsi), %ecx
    000000a5: 	addq	$0x4, %rsi
    000000a9: 	movl	%r9d, %eax
    000000ac: 	movl	%r9d, %edi
    000000af: 	cltd
    000000b0: 	subl	%ecx, %edi
    000000b2: 	idivl	%ebx
    000000b4: 	imull	%ebx, %edi
    000000b7: 	addl	%eax, %edi
    000000b9: 	leal	(%r9,%rdi,2), %edx
    000000bd: 	leal	(%rcx,%rdi,2), %edi
    000000c0: 	leal	(%rdx,%r8), %eax
    000000c4: 	subl	%edi, %eax
    000000c6: 	addl	%edx, %eax
    000000c8: 	subl	%edi, %eax
    000000ca: 	addl	%edx, %eax
    000000cc: 	subl	%edi, %eax
    000000ce: 	addl	%eax, %edx
    000000d0: 	subl	%edi, %edx
    000000d2: 	movl	%edx, %r8d
    000000d5: 	cmpq	%rsi, %rbp
    000000d8: 	jne	.Ltmp906 # Offset: 216
.Ltmp905:
    000000da: 	testl	%r8d, %r8d
    000000dd: 	jne	.Ltmp907 # Offset: 221
    000000e3: 	addl	$0x1, %r14d
    000000e7: 	cmpl	%r15d, %r14d
    000000ea: 	jl	.Ltmp908 # Offset: 234
.Ltmp904:
    000000f0: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000f7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000fe: 	subq	$0x20, %rax
    00000102: 	cmpq	%rax, %rbx
    00000105: 	je	.Ltmp909 # Offset: 261
    0000010b: 	movq	0x8(%rsp), %rax
    00000110: 	leaq	0x10(%rbx), %rdi
    00000114: 	movq	%rdi, (%rbx)
    00000117: 	movq	(%rax), %rbp
    0000011a: 	movq	0x8(%rax), %r12
    0000011e: 	movq	%rbp, %rax
    00000121: 	addq	%r12, %rax
    00000124: 	je	.Ltmp910 # Offset: 292
    00000126: 	testq	%rbp, %rbp
    00000129: 	je	.Ltmp911 # Offset: 297
.Ltmp910:
    0000012f: 	movq	%r12, 0x10(%rsp)
    00000134: 	cmpq	$0xf, %r12
    00000138: 	ja	.Ltmp912 # Offset: 312
    0000013e: 	cmpq	$0x1, %r12
    00000142: 	jne	.Ltmp913 # Offset: 322
    00000148: 	movzbl	(%rbp), %eax
    0000014c: 	movb	%al, 0x10(%rbx)
.Ltmp917:
    0000014f: 	movq	%r12, 0x8(%rbx)
    00000153: 	movb	$0x0, (%rdi,%r12)
    00000158: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000015f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000166: 	addq	$0x20, %rax
    0000016a: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000171: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000178: 	je	.Ltmp914 # Offset: 376
.Ltmp918:
    0000017e: 	movq	-0x20(%rax), %rbp
    00000182: 	callq	clock@PLT # Offset: 386
    00000187: 	movq	%rax, end_time(%rip)
    0000018e: 	movq	0x18(%rsp), %rdx
    00000193: 	subq	%fs:0x28, %rdx
    0000019c: 	jne	.Ltmp915 # Offset: 412
    000001a2: 	subq	start_time(%rip), %rax
    000001a9: 	pxor	%xmm0, %xmm0
    000001ad: 	movq	%rbp, %rdi
    000001b0: 	cvtsi2sd	%rax, %xmm0
    000001b5: 	divsd	DATAat0x4d640(%rip), %xmm0
    000001bd: 	addq	$0x28, %rsp
    000001c1: 	popq	%rbx
    000001c2: 	popq	%rbp
    000001c3: 	popq	%r12
    000001c5: 	popq	%r13
    000001c7: 	popq	%r14
    000001c9: 	popq	%r15
    000001cb: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 459
.Ltmp907:
    000001d0: 	movq	0x8(%rsp), %rax
    000001d5: 	leaq	DATAat0x4d004(%rip), %rsi
    000001dc: 	movl	$0x1, %edi
    000001e1: 	addl	$0x1, %r14d
    000001e5: 	movq	(%rax), %rdx
    000001e8: 	xorl	%eax, %eax
    000001ea: 	callq	__printf_chk@PLT # Offset: 490
    000001ef: 	movl	iterations(%rip), %r15d
    000001f6: 	cmpl	%r15d, %r14d
    000001f9: 	jl	.Ltmp916 # Offset: 505
    000001ff: 	jmp	.Ltmp904 # Offset: 511
.Ltmp912:
    00000204: 	movq	%rbx, %rdi
    00000207: 	leaq	0x10(%rsp), %rsi
    0000020c: 	xorl	%edx, %edx
    0000020e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 526
    00000213: 	movq	%rax, (%rbx)
    00000216: 	movq	%rax, %rdi
    00000219: 	movq	0x10(%rsp), %rax
    0000021e: 	movq	%rax, 0x10(%rbx)
.Ltmp919:
    00000222: 	movq	%r12, %rdx
    00000225: 	movq	%rbp, %rsi
    00000228: 	callq	memcpy@PLT # Offset: 552
    0000022d: 	movq	0x10(%rsp), %r12
    00000232: 	movq	(%rbx), %rdi
    00000235: 	jmp	.Ltmp917 # Offset: 565
.Ltmp909:
    0000023a: 	movq	0x8(%rsp), %rsi
    0000023f: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000246: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 582
    0000024b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000252: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000259: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000260: 	jne	.Ltmp918 # Offset: 608
.Ltmp914:
    00000266: 	movq	-0x8(%rdx), %rax
    0000026a: 	addq	$0x200, %rax
    00000270: 	jmp	.Ltmp918 # Offset: 624
.Ltmp913:
    00000275: 	testq	%r12, %r12
    00000278: 	je	.Ltmp917 # Offset: 632
    0000027e: 	jmp	.Ltmp919 # Offset: 638
.Ltmp915:
    00000280: 	callq	__stack_chk_fail@PLT # Offset: 640
.Ltmp911:
    00000285: 	leaq	DATAat0x4d018(%rip), %rdi
    0000028c: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 652
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE4Ii14custom_cse_mixIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSE4Ih14custom_cse_mixIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 93
  State       : disassembled
  Address     : 0xefa0
  Size        : 0x2bc
  MaxSize     : 0x2c0
  Offset      : 0xefa0
  Section     : .text
  Orc Section : .local.text._Z9test_CSE4Ih14custom_cse_mixIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB092:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%esi, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movl	%edx, %ebx
    00000016: 	subq	$0x28, %rsp
    0000001a: 	movq	%rcx, 0x8(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x18(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r11d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r11d, %r11d
    00000045: 	jle	.Ltmp920 # Offset: 69
    0000004b: 	leal	-0x2(%r13), %eax
    0000004f: 	movzbl	(%r12), %r9d
    00000054: 	movzbl	0x1(%r12), %r10d
    0000005a: 	xorl	%r14d, %r14d
    0000005d: 	leaq	0x2(%r12,%rax), %rbp
    00000062: 	nopw	(%rax,%rax) # Size: 6
.Ltmp924:
    00000068: 	movl	%r9d, %r8d
    0000006b: 	movl	%ebx, %eax
    0000006d: 	movzbl	%r9b, %edi
    00000071: 	movl	%r9d, %edx
    00000074: 	subl	%r10d, %r8d
    00000077: 	imull	%r8d, %eax
    0000007b: 	movl	%eax, %ecx
    0000007d: 	movzbl	%r9b, %eax
    00000081: 	divb	%bl
    00000083: 	addl	%ecx, %eax
    00000085: 	movzbl	%r10b, %ecx
    00000089: 	movzbl	%al, %eax
    0000008c: 	leal	(%rcx,%rax,2), %ecx
    0000008f: 	leal	(%rdi,%rax,2), %eax
    00000092: 	leal	(%rax,%rax,2), %esi
    00000095: 	subl	%ecx, %esi
    00000097: 	addl	%r8d, %esi
    0000009a: 	subl	%ecx, %esi
    0000009c: 	subl	%ecx, %esi
    0000009e: 	cmpl	$0x1, %r13d
    000000a2: 	jle	.Ltmp921 # Offset: 162
    000000a4: 	leaq	0x1(%r12), %rcx
    000000a9: 	nopl	(%rax) # Size: 7
.Ltmp922:
    000000b0: 	movl	%edx, %r8d
    000000b3: 	movzbl	(%rcx), %edx
    000000b6: 	movl	%edi, %r15d
    000000b9: 	addq	$0x1, %rcx
    000000bd: 	movl	%r8d, %eax
    000000c0: 	subl	%edx, %eax
    000000c2: 	imull	%ebx, %eax
    000000c5: 	movl	%eax, %edi
    000000c7: 	movzbl	%r8b, %eax
    000000cb: 	divb	%bl
    000000cd: 	addl	%eax, %edi
    000000cf: 	movzbl	%dil, %eax
    000000d3: 	movzbl	%dl, %edi
    000000d6: 	leal	(%rdi,%rax,2), %r8d
    000000da: 	leal	(%r15,%rax,2), %eax
    000000de: 	shll	$0x2, %eax
    000000e1: 	subl	%r8d, %eax
    000000e4: 	subl	%r8d, %eax
    000000e7: 	addl	%r8d, %r8d
    000000ea: 	subl	%r8d, %eax
    000000ed: 	addl	%eax, %esi
    000000ef: 	cmpq	%rbp, %rcx
    000000f2: 	jne	.Ltmp922 # Offset: 242
.Ltmp921:
    000000f4: 	testb	%sil, %sil
    000000f7: 	jne	.Ltmp923 # Offset: 247
    000000fd: 	addl	$0x1, %r14d
    00000101: 	cmpl	%r11d, %r14d
    00000104: 	jl	.Ltmp924 # Offset: 260
.Ltmp920:
    0000010a: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000111: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000118: 	subq	$0x20, %rax
    0000011c: 	cmpq	%rax, %rbx
    0000011f: 	je	.Ltmp925 # Offset: 287
    00000125: 	movq	0x8(%rsp), %rax
    0000012a: 	leaq	0x10(%rbx), %rdi
    0000012e: 	movq	%rdi, (%rbx)
    00000131: 	movq	(%rax), %rbp
    00000134: 	movq	0x8(%rax), %r12
    00000138: 	movq	%rbp, %rax
    0000013b: 	addq	%r12, %rax
    0000013e: 	je	.Ltmp926 # Offset: 318
    00000140: 	testq	%rbp, %rbp
    00000143: 	je	.Ltmp927 # Offset: 323
.Ltmp926:
    00000149: 	movq	%r12, 0x10(%rsp)
    0000014e: 	cmpq	$0xf, %r12
    00000152: 	ja	.Ltmp928 # Offset: 338
    00000158: 	cmpq	$0x1, %r12
    0000015c: 	jne	.Ltmp929 # Offset: 348
    00000162: 	movzbl	(%rbp), %eax
    00000166: 	movb	%al, 0x10(%rbx)
.Ltmp932:
    00000169: 	movq	%r12, 0x8(%rbx)
    0000016d: 	movb	$0x0, (%rdi,%r12)
    00000172: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000179: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000180: 	addq	$0x20, %rax
    00000184: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000018b: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000192: 	je	.Ltmp930 # Offset: 402
.Ltmp933:
    00000198: 	movq	-0x20(%rax), %rbp
    0000019c: 	callq	clock@PLT # Offset: 412
    000001a1: 	movq	%rax, end_time(%rip)
    000001a8: 	movq	0x18(%rsp), %rdx
    000001ad: 	subq	%fs:0x28, %rdx
    000001b6: 	jne	.Ltmp931 # Offset: 438
    000001bc: 	subq	start_time(%rip), %rax
    000001c3: 	pxor	%xmm0, %xmm0
    000001c7: 	movq	%rbp, %rdi
    000001ca: 	cvtsi2sd	%rax, %xmm0
    000001cf: 	divsd	DATAat0x4d640(%rip), %xmm0
    000001d7: 	addq	$0x28, %rsp
    000001db: 	popq	%rbx
    000001dc: 	popq	%rbp
    000001dd: 	popq	%r12
    000001df: 	popq	%r13
    000001e1: 	popq	%r14
    000001e3: 	popq	%r15
    000001e5: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 485
    000001ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp923:
    000001f0: 	movq	0x8(%rsp), %rax
    000001f5: 	leaq	DATAat0x4d004(%rip), %rsi
    000001fc: 	movl	$0x1, %edi
    00000201: 	addl	$0x1, %r14d
    00000205: 	movq	(%rax), %rdx
    00000208: 	xorl	%eax, %eax
    0000020a: 	callq	__printf_chk@PLT # Offset: 522
    0000020f: 	movl	iterations(%rip), %r11d
    00000216: 	cmpl	%r11d, %r14d
    00000219: 	jge	.Ltmp920 # Offset: 537
    0000021f: 	movzbl	(%r12), %r9d
    00000224: 	movzbl	0x1(%r12), %r10d
    0000022a: 	jmp	.Ltmp924 # Offset: 554
.Ltmp928:
    0000022f: 	movq	%rbx, %rdi
    00000232: 	leaq	0x10(%rsp), %rsi
    00000237: 	xorl	%edx, %edx
    00000239: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 569
    0000023e: 	movq	%rax, (%rbx)
    00000241: 	movq	%rax, %rdi
    00000244: 	movq	0x10(%rsp), %rax
    00000249: 	movq	%rax, 0x10(%rbx)
.Ltmp934:
    0000024d: 	movq	%r12, %rdx
    00000250: 	movq	%rbp, %rsi
    00000253: 	callq	memcpy@PLT # Offset: 595
    00000258: 	movq	0x10(%rsp), %r12
    0000025d: 	movq	(%rbx), %rdi
    00000260: 	jmp	.Ltmp932 # Offset: 608
.Ltmp925:
    00000265: 	movq	0x8(%rsp), %rsi
    0000026a: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000271: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 625
    00000276: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000027d: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000284: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000028b: 	jne	.Ltmp933 # Offset: 651
.Ltmp930:
    00000291: 	movq	-0x8(%rdx), %rax
    00000295: 	addq	$0x200, %rax
    0000029b: 	jmp	.Ltmp933 # Offset: 667
.Ltmp929:
    000002a0: 	testq	%r12, %r12
    000002a3: 	je	.Ltmp932 # Offset: 675
    000002a9: 	jmp	.Ltmp934 # Offset: 681
.Ltmp931:
    000002ab: 	callq	__stack_chk_fail@PLT # Offset: 683
.Ltmp927:
    000002b0: 	leaq	DATAat0x4d018(%rip), %rdi
    000002b7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 695
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE4Ih14custom_cse_mixIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSE4If14custom_cse_addIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 94
  State       : disassembled
  Address     : 0xf260
  Size        : 0x36d
  MaxSize     : 0x370
  Offset      : 0xf260
  Section     : .text
  Orc Section : .local.text._Z9test_CSE4If14custom_cse_addIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB093:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rdx, %rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movss	%xmm0, 0xc(%rsp)
    00000021: 	movq	%fs:0x28, %rax
    0000002a: 	movq	%rax, 0x18(%rsp)
    0000002f: 	xorl	%eax, %eax
    00000031: 	callq	clock@PLT # Offset: 49
    00000036: 	movl	iterations(%rip), %edx
    0000003c: 	movss	0xc(%rsp), %xmm4
    00000042: 	movq	%rax, start_time(%rip)
    00000049: 	testl	%edx, %edx
    0000004b: 	jle	.Ltmp935 # Offset: 75
    00000051: 	leal	-0x2(%r14), %eax
    00000055: 	movss	(%r13), %xmm5
    0000005b: 	movss	0x4(%r13), %xmm6
    00000061: 	xorl	%r12d, %r12d
    00000064: 	movsd	DATAat0x4d620(%rip), %xmm9
    0000006d: 	leaq	0x8(%r13,%rax,4), %rbx
    00000072: 	movq	DATAat0x4d5e0(%rip), %xmm8
    0000007b: 	pxor	%xmm11, %xmm11
    00000080: 	movsd	DATAat0x4d628(%rip), %xmm7
    00000088: 	leaq	DATAat0x4d004(%rip), %r15
    0000008f: 	movss	DATAat0x4d5d0(%rip), %xmm10
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp940:
    000000a0: 	movaps	%xmm5, %xmm12
    000000a4: 	movaps	%xmm5, %xmm0
    000000a7: 	movaps	%xmm6, %xmm2
    000000aa: 	addss	%xmm6, %xmm12
    000000af: 	movaps	%xmm5, %xmm3
    000000b2: 	addss	%xmm4, %xmm12
    000000b7: 	addss	%xmm12, %xmm0
    000000bc: 	addss	%xmm12, %xmm2
    000000c1: 	addss	%xmm12, %xmm0
    000000c6: 	addss	%xmm12, %xmm2
    000000cb: 	movaps	%xmm0, %xmm1
    000000ce: 	addss	%xmm11, %xmm1
    000000d3: 	subss	%xmm2, %xmm1
    000000d7: 	addss	%xmm0, %xmm1
    000000db: 	subss	%xmm2, %xmm1
    000000df: 	addss	%xmm0, %xmm1
    000000e3: 	subss	%xmm2, %xmm1
    000000e7: 	addss	%xmm1, %xmm0
    000000eb: 	subss	%xmm2, %xmm0
    000000ef: 	cmpl	$0x1, %r14d
    000000f3: 	jle	.Ltmp936 # Offset: 243
    000000f5: 	leaq	0x4(%r13), %rax
    000000f9: 	nopl	(%rax) # Size: 7
.Ltmp937:
    00000100: 	movaps	%xmm3, %xmm1
    00000103: 	movss	(%rax), %xmm3
    00000107: 	addq	$0x4, %rax
    0000010b: 	movaps	%xmm3, %xmm12
    0000010f: 	movaps	%xmm3, %xmm2
    00000112: 	addss	%xmm1, %xmm12
    00000117: 	addss	%xmm4, %xmm12
    0000011c: 	addss	%xmm12, %xmm1
    00000121: 	addss	%xmm12, %xmm2
    00000126: 	addss	%xmm12, %xmm1
    0000012b: 	addss	%xmm12, %xmm2
    00000130: 	addss	%xmm1, %xmm0
    00000134: 	subss	%xmm2, %xmm0
    00000138: 	addss	%xmm1, %xmm0
    0000013c: 	subss	%xmm2, %xmm0
    00000140: 	addss	%xmm1, %xmm0
    00000144: 	subss	%xmm2, %xmm0
    00000148: 	addss	%xmm1, %xmm0
    0000014c: 	subss	%xmm2, %xmm0
    00000150: 	cmpq	%rax, %rbx
    00000153: 	jne	.Ltmp937 # Offset: 339
.Ltmp936:
    00000155: 	movaps	%xmm0, %xmm1
    00000158: 	andps	%xmm10, %xmm1
    0000015c: 	cvtss2sd	%xmm1, %xmm1
    00000160: 	comisd	%xmm9, %xmm1
    00000165: 	jbe	.Ltmp938 # Offset: 357
    00000167: 	divss	%xmm0, %xmm0
.Ltmp938:
    0000016b: 	cvtss2sd	%xmm0, %xmm0
    0000016f: 	andpd	%xmm8, %xmm0
    00000174: 	comisd	%xmm0, %xmm7
    00000178: 	jbe	.Ltmp939 # Offset: 376
    0000017e: 	addl	$0x1, %r12d
    00000182: 	cmpl	%edx, %r12d
    00000185: 	jl	.Ltmp940 # Offset: 389
.Ltmp935:
    0000018b: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000192: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000199: 	subq	$0x20, %rax
    0000019d: 	cmpq	%rax, %rbx
    000001a0: 	je	.Ltmp941 # Offset: 416
    000001a6: 	leaq	0x10(%rbx), %rdi
    000001aa: 	movq	0x8(%rbp), %r12
    000001ae: 	movq	%rdi, (%rbx)
    000001b1: 	movq	(%rbp), %r13
    000001b5: 	movq	%r13, %rax
    000001b8: 	addq	%r12, %rax
    000001bb: 	je	.Ltmp942 # Offset: 443
    000001bd: 	testq	%r13, %r13
    000001c0: 	je	.Ltmp943 # Offset: 448
.Ltmp942:
    000001c6: 	movq	%r12, 0x10(%rsp)
    000001cb: 	cmpq	$0xf, %r12
    000001cf: 	ja	.Ltmp944 # Offset: 463
    000001d5: 	cmpq	$0x1, %r12
    000001d9: 	jne	.Ltmp945 # Offset: 473
    000001df: 	movzbl	(%r13), %eax
    000001e4: 	movb	%al, 0x10(%rbx)
.Ltmp948:
    000001e7: 	movq	%r12, 0x8(%rbx)
    000001eb: 	movb	$0x0, (%rdi,%r12)
    000001f0: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001f7: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001fe: 	addq	$0x20, %rax
    00000202: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000209: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000210: 	je	.Ltmp946 # Offset: 528
.Ltmp949:
    00000216: 	movq	-0x20(%rax), %rbp
    0000021a: 	callq	clock@PLT # Offset: 538
    0000021f: 	movq	%rax, end_time(%rip)
    00000226: 	movq	0x18(%rsp), %rdx
    0000022b: 	subq	%fs:0x28, %rdx
    00000234: 	jne	.Ltmp947 # Offset: 564
    0000023a: 	subq	start_time(%rip), %rax
    00000241: 	pxor	%xmm0, %xmm0
    00000245: 	movq	%rbp, %rdi
    00000248: 	cvtsi2sd	%rax, %xmm0
    0000024d: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000255: 	addq	$0x28, %rsp
    00000259: 	popq	%rbx
    0000025a: 	popq	%rbp
    0000025b: 	popq	%r12
    0000025d: 	popq	%r13
    0000025f: 	popq	%r14
    00000261: 	popq	%r15
    00000263: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 611
    00000268: 	nopl	(%rax,%rax) # Size: 8
.Ltmp939:
    00000270: 	movq	(%rbp), %rdx
    00000274: 	movq	%r15, %rsi
    00000277: 	movl	$0x1, %edi
    0000027c: 	xorl	%eax, %eax
    0000027e: 	movss	%xmm4, 0xc(%rsp)
    00000284: 	addl	$0x1, %r12d
    00000288: 	callq	__printf_chk@PLT # Offset: 648
    0000028d: 	movl	iterations(%rip), %edx
    00000293: 	cmpl	%edx, %r12d
    00000296: 	jge	.Ltmp935 # Offset: 662
    0000029c: 	movq	DATAat0x4d620(%rip), %rax
    000002a3: 	movss	(%r13), %xmm5
    000002a9: 	pxor	%xmm11, %xmm11
    000002ae: 	movss	DATAat0x4d5d0(%rip), %xmm10
    000002b7: 	movss	0x4(%r13), %xmm6
    000002bd: 	movss	0xc(%rsp), %xmm4
    000002c3: 	movq	DATAat0x4d5e0(%rip), %xmm8
    000002cc: 	movq	%rax, %xmm9
    000002d1: 	movq	DATAat0x4d628(%rip), %rax
    000002d8: 	movq	%rax, %xmm7
    000002dd: 	jmp	.Ltmp940 # Offset: 733
.Ltmp944:
    000002e2: 	movq	%rbx, %rdi
    000002e5: 	leaq	0x10(%rsp), %rsi
    000002ea: 	xorl	%edx, %edx
    000002ec: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 748
    000002f1: 	movq	%rax, (%rbx)
    000002f4: 	movq	%rax, %rdi
    000002f7: 	movq	0x10(%rsp), %rax
    000002fc: 	movq	%rax, 0x10(%rbx)
.Ltmp950:
    00000300: 	movq	%r12, %rdx
    00000303: 	movq	%r13, %rsi
    00000306: 	callq	memcpy@PLT # Offset: 774
    0000030b: 	movq	0x10(%rsp), %r12
    00000310: 	movq	(%rbx), %rdi
    00000313: 	jmp	.Ltmp948 # Offset: 787
.Ltmp941:
    00000318: 	movq	%rbp, %rsi
    0000031b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000322: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 802
    00000327: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000032e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000335: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000033c: 	jne	.Ltmp949 # Offset: 828
.Ltmp946:
    00000342: 	movq	-0x8(%rdx), %rax
    00000346: 	addq	$0x200, %rax
    0000034c: 	jmp	.Ltmp949 # Offset: 844
.Ltmp945:
    00000351: 	testq	%r12, %r12
    00000354: 	je	.Ltmp948 # Offset: 852
    0000035a: 	jmp	.Ltmp950 # Offset: 858
.Ltmp947:
    0000035c: 	callq	__stack_chk_fail@PLT # Offset: 860
.Ltmp943:
    00000361: 	leaq	DATAat0x4d018(%rip), %rdi
    00000368: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 872
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE4If14custom_cse_addIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSE4If14custom_cse_subIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 95
  State       : disassembled
  Address     : 0xf5d0
  Size        : 0x36d
  MaxSize     : 0x370
  Offset      : 0xf5d0
  Section     : .text
  Orc Section : .local.text._Z9test_CSE4If14custom_cse_subIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB094:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rdx, %rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movss	%xmm0, 0xc(%rsp)
    00000021: 	movq	%fs:0x28, %rax
    0000002a: 	movq	%rax, 0x18(%rsp)
    0000002f: 	xorl	%eax, %eax
    00000031: 	callq	clock@PLT # Offset: 49
    00000036: 	movl	iterations(%rip), %edx
    0000003c: 	movss	0xc(%rsp), %xmm4
    00000042: 	movq	%rax, start_time(%rip)
    00000049: 	testl	%edx, %edx
    0000004b: 	jle	.Ltmp951 # Offset: 75
    00000051: 	leal	-0x2(%r14), %eax
    00000055: 	movss	(%r13), %xmm5
    0000005b: 	movss	0x4(%r13), %xmm6
    00000061: 	xorl	%r12d, %r12d
    00000064: 	movsd	DATAat0x4d620(%rip), %xmm9
    0000006d: 	leaq	0x8(%r13,%rax,4), %rbx
    00000072: 	movq	DATAat0x4d5e0(%rip), %xmm8
    0000007b: 	pxor	%xmm11, %xmm11
    00000080: 	movsd	DATAat0x4d628(%rip), %xmm7
    00000088: 	leaq	DATAat0x4d004(%rip), %r15
    0000008f: 	movss	DATAat0x4d5d0(%rip), %xmm10
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp956:
    000000a0: 	movaps	%xmm5, %xmm12
    000000a4: 	movaps	%xmm5, %xmm0
    000000a7: 	movaps	%xmm6, %xmm2
    000000aa: 	subss	%xmm6, %xmm12
    000000af: 	movaps	%xmm5, %xmm3
    000000b2: 	addss	%xmm4, %xmm12
    000000b7: 	addss	%xmm12, %xmm0
    000000bc: 	addss	%xmm12, %xmm2
    000000c1: 	addss	%xmm12, %xmm0
    000000c6: 	addss	%xmm12, %xmm2
    000000cb: 	movaps	%xmm0, %xmm1
    000000ce: 	addss	%xmm11, %xmm1
    000000d3: 	subss	%xmm2, %xmm1
    000000d7: 	addss	%xmm0, %xmm1
    000000db: 	subss	%xmm2, %xmm1
    000000df: 	addss	%xmm0, %xmm1
    000000e3: 	subss	%xmm2, %xmm1
    000000e7: 	addss	%xmm1, %xmm0
    000000eb: 	subss	%xmm2, %xmm0
    000000ef: 	cmpl	$0x1, %r14d
    000000f3: 	jle	.Ltmp952 # Offset: 243
    000000f5: 	leaq	0x4(%r13), %rax
    000000f9: 	nopl	(%rax) # Size: 7
.Ltmp953:
    00000100: 	movaps	%xmm3, %xmm1
    00000103: 	movss	(%rax), %xmm3
    00000107: 	addq	$0x4, %rax
    0000010b: 	movaps	%xmm1, %xmm12
    0000010f: 	subss	%xmm3, %xmm12
    00000114: 	movaps	%xmm3, %xmm2
    00000117: 	addss	%xmm4, %xmm12
    0000011c: 	addss	%xmm12, %xmm1
    00000121: 	addss	%xmm12, %xmm2
    00000126: 	addss	%xmm12, %xmm1
    0000012b: 	addss	%xmm12, %xmm2
    00000130: 	addss	%xmm1, %xmm0
    00000134: 	subss	%xmm2, %xmm0
    00000138: 	addss	%xmm1, %xmm0
    0000013c: 	subss	%xmm2, %xmm0
    00000140: 	addss	%xmm1, %xmm0
    00000144: 	subss	%xmm2, %xmm0
    00000148: 	addss	%xmm1, %xmm0
    0000014c: 	subss	%xmm2, %xmm0
    00000150: 	cmpq	%rax, %rbx
    00000153: 	jne	.Ltmp953 # Offset: 339
.Ltmp952:
    00000155: 	movaps	%xmm0, %xmm1
    00000158: 	andps	%xmm10, %xmm1
    0000015c: 	cvtss2sd	%xmm1, %xmm1
    00000160: 	comisd	%xmm9, %xmm1
    00000165: 	jbe	.Ltmp954 # Offset: 357
    00000167: 	divss	%xmm0, %xmm0
.Ltmp954:
    0000016b: 	cvtss2sd	%xmm0, %xmm0
    0000016f: 	andpd	%xmm8, %xmm0
    00000174: 	comisd	%xmm0, %xmm7
    00000178: 	jbe	.Ltmp955 # Offset: 376
    0000017e: 	addl	$0x1, %r12d
    00000182: 	cmpl	%edx, %r12d
    00000185: 	jl	.Ltmp956 # Offset: 389
.Ltmp951:
    0000018b: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000192: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000199: 	subq	$0x20, %rax
    0000019d: 	cmpq	%rax, %rbx
    000001a0: 	je	.Ltmp957 # Offset: 416
    000001a6: 	leaq	0x10(%rbx), %rdi
    000001aa: 	movq	0x8(%rbp), %r12
    000001ae: 	movq	%rdi, (%rbx)
    000001b1: 	movq	(%rbp), %r13
    000001b5: 	movq	%r13, %rax
    000001b8: 	addq	%r12, %rax
    000001bb: 	je	.Ltmp958 # Offset: 443
    000001bd: 	testq	%r13, %r13
    000001c0: 	je	.Ltmp959 # Offset: 448
.Ltmp958:
    000001c6: 	movq	%r12, 0x10(%rsp)
    000001cb: 	cmpq	$0xf, %r12
    000001cf: 	ja	.Ltmp960 # Offset: 463
    000001d5: 	cmpq	$0x1, %r12
    000001d9: 	jne	.Ltmp961 # Offset: 473
    000001df: 	movzbl	(%r13), %eax
    000001e4: 	movb	%al, 0x10(%rbx)
.Ltmp964:
    000001e7: 	movq	%r12, 0x8(%rbx)
    000001eb: 	movb	$0x0, (%rdi,%r12)
    000001f0: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001f7: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001fe: 	addq	$0x20, %rax
    00000202: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000209: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000210: 	je	.Ltmp962 # Offset: 528
.Ltmp965:
    00000216: 	movq	-0x20(%rax), %rbp
    0000021a: 	callq	clock@PLT # Offset: 538
    0000021f: 	movq	%rax, end_time(%rip)
    00000226: 	movq	0x18(%rsp), %rdx
    0000022b: 	subq	%fs:0x28, %rdx
    00000234: 	jne	.Ltmp963 # Offset: 564
    0000023a: 	subq	start_time(%rip), %rax
    00000241: 	pxor	%xmm0, %xmm0
    00000245: 	movq	%rbp, %rdi
    00000248: 	cvtsi2sd	%rax, %xmm0
    0000024d: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000255: 	addq	$0x28, %rsp
    00000259: 	popq	%rbx
    0000025a: 	popq	%rbp
    0000025b: 	popq	%r12
    0000025d: 	popq	%r13
    0000025f: 	popq	%r14
    00000261: 	popq	%r15
    00000263: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 611
    00000268: 	nopl	(%rax,%rax) # Size: 8
.Ltmp955:
    00000270: 	movq	(%rbp), %rdx
    00000274: 	movq	%r15, %rsi
    00000277: 	movl	$0x1, %edi
    0000027c: 	xorl	%eax, %eax
    0000027e: 	movss	%xmm4, 0xc(%rsp)
    00000284: 	addl	$0x1, %r12d
    00000288: 	callq	__printf_chk@PLT # Offset: 648
    0000028d: 	movl	iterations(%rip), %edx
    00000293: 	cmpl	%edx, %r12d
    00000296: 	jge	.Ltmp951 # Offset: 662
    0000029c: 	movq	DATAat0x4d620(%rip), %rax
    000002a3: 	movss	(%r13), %xmm5
    000002a9: 	pxor	%xmm11, %xmm11
    000002ae: 	movss	DATAat0x4d5d0(%rip), %xmm10
    000002b7: 	movss	0x4(%r13), %xmm6
    000002bd: 	movss	0xc(%rsp), %xmm4
    000002c3: 	movq	DATAat0x4d5e0(%rip), %xmm8
    000002cc: 	movq	%rax, %xmm9
    000002d1: 	movq	DATAat0x4d628(%rip), %rax
    000002d8: 	movq	%rax, %xmm7
    000002dd: 	jmp	.Ltmp956 # Offset: 733
.Ltmp960:
    000002e2: 	movq	%rbx, %rdi
    000002e5: 	leaq	0x10(%rsp), %rsi
    000002ea: 	xorl	%edx, %edx
    000002ec: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 748
    000002f1: 	movq	%rax, (%rbx)
    000002f4: 	movq	%rax, %rdi
    000002f7: 	movq	0x10(%rsp), %rax
    000002fc: 	movq	%rax, 0x10(%rbx)
.Ltmp966:
    00000300: 	movq	%r12, %rdx
    00000303: 	movq	%r13, %rsi
    00000306: 	callq	memcpy@PLT # Offset: 774
    0000030b: 	movq	0x10(%rsp), %r12
    00000310: 	movq	(%rbx), %rdi
    00000313: 	jmp	.Ltmp964 # Offset: 787
.Ltmp957:
    00000318: 	movq	%rbp, %rsi
    0000031b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000322: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 802
    00000327: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000032e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000335: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000033c: 	jne	.Ltmp965 # Offset: 828
.Ltmp962:
    00000342: 	movq	-0x8(%rdx), %rax
    00000346: 	addq	$0x200, %rax
    0000034c: 	jmp	.Ltmp965 # Offset: 844
.Ltmp961:
    00000351: 	testq	%r12, %r12
    00000354: 	je	.Ltmp964 # Offset: 852
    0000035a: 	jmp	.Ltmp966 # Offset: 858
.Ltmp963:
    0000035c: 	callq	__stack_chk_fail@PLT # Offset: 860
.Ltmp959:
    00000361: 	leaq	DATAat0x4d018(%rip), %rdi
    00000368: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 872
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE4If14custom_cse_subIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSE4If14custom_cse_mulIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 96
  State       : disassembled
  Address     : 0xf940
  Size        : 0x36d
  MaxSize     : 0x370
  Offset      : 0xf940
  Section     : .text
  Orc Section : .local.text._Z9test_CSE4If14custom_cse_mulIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB095:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rdx, %rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movss	%xmm0, 0xc(%rsp)
    00000021: 	movq	%fs:0x28, %rax
    0000002a: 	movq	%rax, 0x18(%rsp)
    0000002f: 	xorl	%eax, %eax
    00000031: 	callq	clock@PLT # Offset: 49
    00000036: 	movl	iterations(%rip), %edx
    0000003c: 	movss	0xc(%rsp), %xmm4
    00000042: 	movq	%rax, start_time(%rip)
    00000049: 	testl	%edx, %edx
    0000004b: 	jle	.Ltmp967 # Offset: 75
    00000051: 	leal	-0x2(%r14), %eax
    00000055: 	movss	(%r13), %xmm5
    0000005b: 	movss	0x4(%r13), %xmm6
    00000061: 	xorl	%r12d, %r12d
    00000064: 	movsd	DATAat0x4d620(%rip), %xmm9
    0000006d: 	leaq	0x8(%r13,%rax,4), %rbx
    00000072: 	movq	DATAat0x4d5e0(%rip), %xmm8
    0000007b: 	pxor	%xmm11, %xmm11
    00000080: 	movsd	DATAat0x4d628(%rip), %xmm7
    00000088: 	leaq	DATAat0x4d004(%rip), %r15
    0000008f: 	movss	DATAat0x4d5d0(%rip), %xmm10
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp972:
    000000a0: 	movaps	%xmm5, %xmm12
    000000a4: 	movaps	%xmm5, %xmm0
    000000a7: 	movaps	%xmm6, %xmm2
    000000aa: 	mulss	%xmm6, %xmm12
    000000af: 	movaps	%xmm5, %xmm3
    000000b2: 	addss	%xmm4, %xmm12
    000000b7: 	addss	%xmm12, %xmm0
    000000bc: 	addss	%xmm12, %xmm2
    000000c1: 	addss	%xmm12, %xmm0
    000000c6: 	addss	%xmm12, %xmm2
    000000cb: 	movaps	%xmm0, %xmm1
    000000ce: 	addss	%xmm11, %xmm1
    000000d3: 	subss	%xmm2, %xmm1
    000000d7: 	addss	%xmm0, %xmm1
    000000db: 	subss	%xmm2, %xmm1
    000000df: 	addss	%xmm0, %xmm1
    000000e3: 	subss	%xmm2, %xmm1
    000000e7: 	addss	%xmm1, %xmm0
    000000eb: 	subss	%xmm2, %xmm0
    000000ef: 	cmpl	$0x1, %r14d
    000000f3: 	jle	.Ltmp968 # Offset: 243
    000000f5: 	leaq	0x4(%r13), %rax
    000000f9: 	nopl	(%rax) # Size: 7
.Ltmp969:
    00000100: 	movaps	%xmm3, %xmm1
    00000103: 	movss	(%rax), %xmm3
    00000107: 	addq	$0x4, %rax
    0000010b: 	movaps	%xmm3, %xmm12
    0000010f: 	movaps	%xmm3, %xmm2
    00000112: 	mulss	%xmm1, %xmm12
    00000117: 	addss	%xmm4, %xmm12
    0000011c: 	addss	%xmm12, %xmm1
    00000121: 	addss	%xmm12, %xmm2
    00000126: 	addss	%xmm12, %xmm1
    0000012b: 	addss	%xmm12, %xmm2
    00000130: 	addss	%xmm1, %xmm0
    00000134: 	subss	%xmm2, %xmm0
    00000138: 	addss	%xmm1, %xmm0
    0000013c: 	subss	%xmm2, %xmm0
    00000140: 	addss	%xmm1, %xmm0
    00000144: 	subss	%xmm2, %xmm0
    00000148: 	addss	%xmm1, %xmm0
    0000014c: 	subss	%xmm2, %xmm0
    00000150: 	cmpq	%rax, %rbx
    00000153: 	jne	.Ltmp969 # Offset: 339
.Ltmp968:
    00000155: 	movaps	%xmm0, %xmm1
    00000158: 	andps	%xmm10, %xmm1
    0000015c: 	cvtss2sd	%xmm1, %xmm1
    00000160: 	comisd	%xmm9, %xmm1
    00000165: 	jbe	.Ltmp970 # Offset: 357
    00000167: 	divss	%xmm0, %xmm0
.Ltmp970:
    0000016b: 	cvtss2sd	%xmm0, %xmm0
    0000016f: 	andpd	%xmm8, %xmm0
    00000174: 	comisd	%xmm0, %xmm7
    00000178: 	jbe	.Ltmp971 # Offset: 376
    0000017e: 	addl	$0x1, %r12d
    00000182: 	cmpl	%edx, %r12d
    00000185: 	jl	.Ltmp972 # Offset: 389
.Ltmp967:
    0000018b: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000192: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000199: 	subq	$0x20, %rax
    0000019d: 	cmpq	%rax, %rbx
    000001a0: 	je	.Ltmp973 # Offset: 416
    000001a6: 	leaq	0x10(%rbx), %rdi
    000001aa: 	movq	0x8(%rbp), %r12
    000001ae: 	movq	%rdi, (%rbx)
    000001b1: 	movq	(%rbp), %r13
    000001b5: 	movq	%r13, %rax
    000001b8: 	addq	%r12, %rax
    000001bb: 	je	.Ltmp974 # Offset: 443
    000001bd: 	testq	%r13, %r13
    000001c0: 	je	.Ltmp975 # Offset: 448
.Ltmp974:
    000001c6: 	movq	%r12, 0x10(%rsp)
    000001cb: 	cmpq	$0xf, %r12
    000001cf: 	ja	.Ltmp976 # Offset: 463
    000001d5: 	cmpq	$0x1, %r12
    000001d9: 	jne	.Ltmp977 # Offset: 473
    000001df: 	movzbl	(%r13), %eax
    000001e4: 	movb	%al, 0x10(%rbx)
.Ltmp980:
    000001e7: 	movq	%r12, 0x8(%rbx)
    000001eb: 	movb	$0x0, (%rdi,%r12)
    000001f0: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001f7: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001fe: 	addq	$0x20, %rax
    00000202: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000209: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000210: 	je	.Ltmp978 # Offset: 528
.Ltmp981:
    00000216: 	movq	-0x20(%rax), %rbp
    0000021a: 	callq	clock@PLT # Offset: 538
    0000021f: 	movq	%rax, end_time(%rip)
    00000226: 	movq	0x18(%rsp), %rdx
    0000022b: 	subq	%fs:0x28, %rdx
    00000234: 	jne	.Ltmp979 # Offset: 564
    0000023a: 	subq	start_time(%rip), %rax
    00000241: 	pxor	%xmm0, %xmm0
    00000245: 	movq	%rbp, %rdi
    00000248: 	cvtsi2sd	%rax, %xmm0
    0000024d: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000255: 	addq	$0x28, %rsp
    00000259: 	popq	%rbx
    0000025a: 	popq	%rbp
    0000025b: 	popq	%r12
    0000025d: 	popq	%r13
    0000025f: 	popq	%r14
    00000261: 	popq	%r15
    00000263: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 611
    00000268: 	nopl	(%rax,%rax) # Size: 8
.Ltmp971:
    00000270: 	movq	(%rbp), %rdx
    00000274: 	movq	%r15, %rsi
    00000277: 	movl	$0x1, %edi
    0000027c: 	xorl	%eax, %eax
    0000027e: 	movss	%xmm4, 0xc(%rsp)
    00000284: 	addl	$0x1, %r12d
    00000288: 	callq	__printf_chk@PLT # Offset: 648
    0000028d: 	movl	iterations(%rip), %edx
    00000293: 	cmpl	%edx, %r12d
    00000296: 	jge	.Ltmp967 # Offset: 662
    0000029c: 	movq	DATAat0x4d620(%rip), %rax
    000002a3: 	movss	(%r13), %xmm5
    000002a9: 	pxor	%xmm11, %xmm11
    000002ae: 	movss	DATAat0x4d5d0(%rip), %xmm10
    000002b7: 	movss	0x4(%r13), %xmm6
    000002bd: 	movss	0xc(%rsp), %xmm4
    000002c3: 	movq	DATAat0x4d5e0(%rip), %xmm8
    000002cc: 	movq	%rax, %xmm9
    000002d1: 	movq	DATAat0x4d628(%rip), %rax
    000002d8: 	movq	%rax, %xmm7
    000002dd: 	jmp	.Ltmp972 # Offset: 733
.Ltmp976:
    000002e2: 	movq	%rbx, %rdi
    000002e5: 	leaq	0x10(%rsp), %rsi
    000002ea: 	xorl	%edx, %edx
    000002ec: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 748
    000002f1: 	movq	%rax, (%rbx)
    000002f4: 	movq	%rax, %rdi
    000002f7: 	movq	0x10(%rsp), %rax
    000002fc: 	movq	%rax, 0x10(%rbx)
.Ltmp982:
    00000300: 	movq	%r12, %rdx
    00000303: 	movq	%r13, %rsi
    00000306: 	callq	memcpy@PLT # Offset: 774
    0000030b: 	movq	0x10(%rsp), %r12
    00000310: 	movq	(%rbx), %rdi
    00000313: 	jmp	.Ltmp980 # Offset: 787
.Ltmp973:
    00000318: 	movq	%rbp, %rsi
    0000031b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000322: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 802
    00000327: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000032e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000335: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000033c: 	jne	.Ltmp981 # Offset: 828
.Ltmp978:
    00000342: 	movq	-0x8(%rdx), %rax
    00000346: 	addq	$0x200, %rax
    0000034c: 	jmp	.Ltmp981 # Offset: 844
.Ltmp977:
    00000351: 	testq	%r12, %r12
    00000354: 	je	.Ltmp980 # Offset: 852
    0000035a: 	jmp	.Ltmp982 # Offset: 858
.Ltmp979:
    0000035c: 	callq	__stack_chk_fail@PLT # Offset: 860
.Ltmp975:
    00000361: 	leaq	DATAat0x4d018(%rip), %rdi
    00000368: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 872
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE4If14custom_cse_mulIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z28test_CSE4_add_inline_flippedIf14custom_cse_addIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 97
  State       : disassembled
  Address     : 0xfcb0
  Size        : 0x36d
  MaxSize     : 0x370
  Offset      : 0xfcb0
  Section     : .text
  Orc Section : .local.text._Z28test_CSE4_add_inline_flippedIf14custom_cse_addIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB096:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rdx, %rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movss	%xmm0, 0xc(%rsp)
    00000021: 	movq	%fs:0x28, %rax
    0000002a: 	movq	%rax, 0x18(%rsp)
    0000002f: 	xorl	%eax, %eax
    00000031: 	callq	clock@PLT # Offset: 49
    00000036: 	movl	iterations(%rip), %edx
    0000003c: 	movss	0xc(%rsp), %xmm4
    00000042: 	movq	%rax, start_time(%rip)
    00000049: 	testl	%edx, %edx
    0000004b: 	jle	.Ltmp983 # Offset: 75
    00000051: 	leal	-0x2(%r14), %eax
    00000055: 	movss	(%r13), %xmm5
    0000005b: 	movss	0x4(%r13), %xmm6
    00000061: 	xorl	%r12d, %r12d
    00000064: 	movsd	DATAat0x4d620(%rip), %xmm9
    0000006d: 	leaq	0x8(%r13,%rax,4), %rbx
    00000072: 	movq	DATAat0x4d5e0(%rip), %xmm8
    0000007b: 	pxor	%xmm11, %xmm11
    00000080: 	movsd	DATAat0x4d628(%rip), %xmm7
    00000088: 	leaq	DATAat0x4d004(%rip), %r15
    0000008f: 	movss	DATAat0x4d5d0(%rip), %xmm10
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp988:
    000000a0: 	movaps	%xmm5, %xmm12
    000000a4: 	movaps	%xmm5, %xmm0
    000000a7: 	movaps	%xmm6, %xmm2
    000000aa: 	addss	%xmm6, %xmm12
    000000af: 	movaps	%xmm5, %xmm3
    000000b2: 	addss	%xmm4, %xmm12
    000000b7: 	addss	%xmm12, %xmm0
    000000bc: 	addss	%xmm12, %xmm2
    000000c1: 	addss	%xmm12, %xmm0
    000000c6: 	addss	%xmm12, %xmm2
    000000cb: 	movaps	%xmm0, %xmm1
    000000ce: 	addss	%xmm11, %xmm1
    000000d3: 	subss	%xmm2, %xmm1
    000000d7: 	addss	%xmm0, %xmm1
    000000db: 	subss	%xmm2, %xmm1
    000000df: 	addss	%xmm0, %xmm1
    000000e3: 	subss	%xmm2, %xmm1
    000000e7: 	addss	%xmm1, %xmm0
    000000eb: 	subss	%xmm2, %xmm0
    000000ef: 	cmpl	$0x1, %r14d
    000000f3: 	jle	.Ltmp984 # Offset: 243
    000000f5: 	leaq	0x4(%r13), %rax
    000000f9: 	nopl	(%rax) # Size: 7
.Ltmp985:
    00000100: 	movaps	%xmm3, %xmm1
    00000103: 	movss	(%rax), %xmm3
    00000107: 	addq	$0x4, %rax
    0000010b: 	movaps	%xmm3, %xmm12
    0000010f: 	movaps	%xmm3, %xmm2
    00000112: 	addss	%xmm1, %xmm12
    00000117: 	addss	%xmm4, %xmm12
    0000011c: 	addss	%xmm12, %xmm1
    00000121: 	addss	%xmm12, %xmm2
    00000126: 	addss	%xmm12, %xmm1
    0000012b: 	addss	%xmm12, %xmm2
    00000130: 	addss	%xmm1, %xmm0
    00000134: 	subss	%xmm2, %xmm0
    00000138: 	addss	%xmm1, %xmm0
    0000013c: 	subss	%xmm2, %xmm0
    00000140: 	addss	%xmm1, %xmm0
    00000144: 	subss	%xmm2, %xmm0
    00000148: 	addss	%xmm1, %xmm0
    0000014c: 	subss	%xmm2, %xmm0
    00000150: 	cmpq	%rax, %rbx
    00000153: 	jne	.Ltmp985 # Offset: 339
.Ltmp984:
    00000155: 	movaps	%xmm0, %xmm1
    00000158: 	andps	%xmm10, %xmm1
    0000015c: 	cvtss2sd	%xmm1, %xmm1
    00000160: 	comisd	%xmm9, %xmm1
    00000165: 	jbe	.Ltmp986 # Offset: 357
    00000167: 	divss	%xmm0, %xmm0
.Ltmp986:
    0000016b: 	cvtss2sd	%xmm0, %xmm0
    0000016f: 	andpd	%xmm8, %xmm0
    00000174: 	comisd	%xmm0, %xmm7
    00000178: 	jbe	.Ltmp987 # Offset: 376
    0000017e: 	addl	$0x1, %r12d
    00000182: 	cmpl	%edx, %r12d
    00000185: 	jl	.Ltmp988 # Offset: 389
.Ltmp983:
    0000018b: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000192: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000199: 	subq	$0x20, %rax
    0000019d: 	cmpq	%rax, %rbx
    000001a0: 	je	.Ltmp989 # Offset: 416
    000001a6: 	leaq	0x10(%rbx), %rdi
    000001aa: 	movq	0x8(%rbp), %r12
    000001ae: 	movq	%rdi, (%rbx)
    000001b1: 	movq	(%rbp), %r13
    000001b5: 	movq	%r13, %rax
    000001b8: 	addq	%r12, %rax
    000001bb: 	je	.Ltmp990 # Offset: 443
    000001bd: 	testq	%r13, %r13
    000001c0: 	je	.Ltmp991 # Offset: 448
.Ltmp990:
    000001c6: 	movq	%r12, 0x10(%rsp)
    000001cb: 	cmpq	$0xf, %r12
    000001cf: 	ja	.Ltmp992 # Offset: 463
    000001d5: 	cmpq	$0x1, %r12
    000001d9: 	jne	.Ltmp993 # Offset: 473
    000001df: 	movzbl	(%r13), %eax
    000001e4: 	movb	%al, 0x10(%rbx)
.Ltmp996:
    000001e7: 	movq	%r12, 0x8(%rbx)
    000001eb: 	movb	$0x0, (%rdi,%r12)
    000001f0: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001f7: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001fe: 	addq	$0x20, %rax
    00000202: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000209: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000210: 	je	.Ltmp994 # Offset: 528
.Ltmp997:
    00000216: 	movq	-0x20(%rax), %rbp
    0000021a: 	callq	clock@PLT # Offset: 538
    0000021f: 	movq	%rax, end_time(%rip)
    00000226: 	movq	0x18(%rsp), %rdx
    0000022b: 	subq	%fs:0x28, %rdx
    00000234: 	jne	.Ltmp995 # Offset: 564
    0000023a: 	subq	start_time(%rip), %rax
    00000241: 	pxor	%xmm0, %xmm0
    00000245: 	movq	%rbp, %rdi
    00000248: 	cvtsi2sd	%rax, %xmm0
    0000024d: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000255: 	addq	$0x28, %rsp
    00000259: 	popq	%rbx
    0000025a: 	popq	%rbp
    0000025b: 	popq	%r12
    0000025d: 	popq	%r13
    0000025f: 	popq	%r14
    00000261: 	popq	%r15
    00000263: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 611
    00000268: 	nopl	(%rax,%rax) # Size: 8
.Ltmp987:
    00000270: 	movq	(%rbp), %rdx
    00000274: 	movq	%r15, %rsi
    00000277: 	movl	$0x1, %edi
    0000027c: 	xorl	%eax, %eax
    0000027e: 	movss	%xmm4, 0xc(%rsp)
    00000284: 	addl	$0x1, %r12d
    00000288: 	callq	__printf_chk@PLT # Offset: 648
    0000028d: 	movl	iterations(%rip), %edx
    00000293: 	cmpl	%edx, %r12d
    00000296: 	jge	.Ltmp983 # Offset: 662
    0000029c: 	movq	DATAat0x4d620(%rip), %rax
    000002a3: 	movss	(%r13), %xmm5
    000002a9: 	pxor	%xmm11, %xmm11
    000002ae: 	movss	DATAat0x4d5d0(%rip), %xmm10
    000002b7: 	movss	0x4(%r13), %xmm6
    000002bd: 	movss	0xc(%rsp), %xmm4
    000002c3: 	movq	DATAat0x4d5e0(%rip), %xmm8
    000002cc: 	movq	%rax, %xmm9
    000002d1: 	movq	DATAat0x4d628(%rip), %rax
    000002d8: 	movq	%rax, %xmm7
    000002dd: 	jmp	.Ltmp988 # Offset: 733
.Ltmp992:
    000002e2: 	movq	%rbx, %rdi
    000002e5: 	leaq	0x10(%rsp), %rsi
    000002ea: 	xorl	%edx, %edx
    000002ec: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 748
    000002f1: 	movq	%rax, (%rbx)
    000002f4: 	movq	%rax, %rdi
    000002f7: 	movq	0x10(%rsp), %rax
    000002fc: 	movq	%rax, 0x10(%rbx)
.Ltmp998:
    00000300: 	movq	%r12, %rdx
    00000303: 	movq	%r13, %rsi
    00000306: 	callq	memcpy@PLT # Offset: 774
    0000030b: 	movq	0x10(%rsp), %r12
    00000310: 	movq	(%rbx), %rdi
    00000313: 	jmp	.Ltmp996 # Offset: 787
.Ltmp989:
    00000318: 	movq	%rbp, %rsi
    0000031b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000322: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 802
    00000327: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000032e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000335: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000033c: 	jne	.Ltmp997 # Offset: 828
.Ltmp994:
    00000342: 	movq	-0x8(%rdx), %rax
    00000346: 	addq	$0x200, %rax
    0000034c: 	jmp	.Ltmp997 # Offset: 844
.Ltmp993:
    00000351: 	testq	%r12, %r12
    00000354: 	je	.Ltmp996 # Offset: 852
    0000035a: 	jmp	.Ltmp998 # Offset: 858
.Ltmp995:
    0000035c: 	callq	__stack_chk_fail@PLT # Offset: 860
.Ltmp991:
    00000361: 	leaq	DATAat0x4d018(%rip), %rdi
    00000368: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 872
DWARF CFI Instructions:
    <empty>
End of Function "_Z28test_CSE4_add_inline_flippedIf14custom_cse_addIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSE4If14custom_cse_divIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 98
  State       : disassembled
  Address     : 0x10020
  Size        : 0x36d
  MaxSize     : 0x370
  Offset      : 0x10020
  Section     : .text
  Orc Section : .local.text._Z9test_CSE4If14custom_cse_divIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB097:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rdx, %rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movss	%xmm0, 0xc(%rsp)
    00000021: 	movq	%fs:0x28, %rax
    0000002a: 	movq	%rax, 0x18(%rsp)
    0000002f: 	xorl	%eax, %eax
    00000031: 	callq	clock@PLT # Offset: 49
    00000036: 	movl	iterations(%rip), %edx
    0000003c: 	movss	0xc(%rsp), %xmm4
    00000042: 	movq	%rax, start_time(%rip)
    00000049: 	testl	%edx, %edx
    0000004b: 	jle	.Ltmp999 # Offset: 75
    00000051: 	leal	-0x2(%r14), %eax
    00000055: 	movss	(%r13), %xmm5
    0000005b: 	movss	0x4(%r13), %xmm6
    00000061: 	xorl	%r12d, %r12d
    00000064: 	movsd	DATAat0x4d620(%rip), %xmm9
    0000006d: 	leaq	0x8(%r13,%rax,4), %rbx
    00000072: 	movq	DATAat0x4d5e0(%rip), %xmm8
    0000007b: 	pxor	%xmm11, %xmm11
    00000080: 	movsd	DATAat0x4d628(%rip), %xmm7
    00000088: 	leaq	DATAat0x4d004(%rip), %r15
    0000008f: 	movss	DATAat0x4d5d0(%rip), %xmm10
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1004:
    000000a0: 	movaps	%xmm5, %xmm12
    000000a4: 	movaps	%xmm5, %xmm0
    000000a7: 	movaps	%xmm6, %xmm2
    000000aa: 	divss	%xmm6, %xmm12
    000000af: 	movaps	%xmm5, %xmm3
    000000b2: 	addss	%xmm4, %xmm12
    000000b7: 	addss	%xmm12, %xmm0
    000000bc: 	addss	%xmm12, %xmm2
    000000c1: 	addss	%xmm12, %xmm0
    000000c6: 	addss	%xmm12, %xmm2
    000000cb: 	movaps	%xmm0, %xmm1
    000000ce: 	addss	%xmm11, %xmm1
    000000d3: 	subss	%xmm2, %xmm1
    000000d7: 	addss	%xmm0, %xmm1
    000000db: 	subss	%xmm2, %xmm1
    000000df: 	addss	%xmm0, %xmm1
    000000e3: 	subss	%xmm2, %xmm1
    000000e7: 	addss	%xmm1, %xmm0
    000000eb: 	subss	%xmm2, %xmm0
    000000ef: 	cmpl	$0x1, %r14d
    000000f3: 	jle	.Ltmp1000 # Offset: 243
    000000f5: 	leaq	0x4(%r13), %rax
    000000f9: 	nopl	(%rax) # Size: 7
.Ltmp1001:
    00000100: 	movaps	%xmm3, %xmm1
    00000103: 	movss	(%rax), %xmm3
    00000107: 	addq	$0x4, %rax
    0000010b: 	movaps	%xmm1, %xmm12
    0000010f: 	divss	%xmm3, %xmm12
    00000114: 	movaps	%xmm3, %xmm2
    00000117: 	addss	%xmm4, %xmm12
    0000011c: 	addss	%xmm12, %xmm1
    00000121: 	addss	%xmm12, %xmm2
    00000126: 	addss	%xmm12, %xmm1
    0000012b: 	addss	%xmm12, %xmm2
    00000130: 	addss	%xmm1, %xmm0
    00000134: 	subss	%xmm2, %xmm0
    00000138: 	addss	%xmm1, %xmm0
    0000013c: 	subss	%xmm2, %xmm0
    00000140: 	addss	%xmm1, %xmm0
    00000144: 	subss	%xmm2, %xmm0
    00000148: 	addss	%xmm1, %xmm0
    0000014c: 	subss	%xmm2, %xmm0
    00000150: 	cmpq	%rax, %rbx
    00000153: 	jne	.Ltmp1001 # Offset: 339
.Ltmp1000:
    00000155: 	movaps	%xmm0, %xmm1
    00000158: 	andps	%xmm10, %xmm1
    0000015c: 	cvtss2sd	%xmm1, %xmm1
    00000160: 	comisd	%xmm9, %xmm1
    00000165: 	jbe	.Ltmp1002 # Offset: 357
    00000167: 	divss	%xmm0, %xmm0
.Ltmp1002:
    0000016b: 	cvtss2sd	%xmm0, %xmm0
    0000016f: 	andpd	%xmm8, %xmm0
    00000174: 	comisd	%xmm0, %xmm7
    00000178: 	jbe	.Ltmp1003 # Offset: 376
    0000017e: 	addl	$0x1, %r12d
    00000182: 	cmpl	%edx, %r12d
    00000185: 	jl	.Ltmp1004 # Offset: 389
.Ltmp999:
    0000018b: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000192: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000199: 	subq	$0x20, %rax
    0000019d: 	cmpq	%rax, %rbx
    000001a0: 	je	.Ltmp1005 # Offset: 416
    000001a6: 	leaq	0x10(%rbx), %rdi
    000001aa: 	movq	0x8(%rbp), %r12
    000001ae: 	movq	%rdi, (%rbx)
    000001b1: 	movq	(%rbp), %r13
    000001b5: 	movq	%r13, %rax
    000001b8: 	addq	%r12, %rax
    000001bb: 	je	.Ltmp1006 # Offset: 443
    000001bd: 	testq	%r13, %r13
    000001c0: 	je	.Ltmp1007 # Offset: 448
.Ltmp1006:
    000001c6: 	movq	%r12, 0x10(%rsp)
    000001cb: 	cmpq	$0xf, %r12
    000001cf: 	ja	.Ltmp1008 # Offset: 463
    000001d5: 	cmpq	$0x1, %r12
    000001d9: 	jne	.Ltmp1009 # Offset: 473
    000001df: 	movzbl	(%r13), %eax
    000001e4: 	movb	%al, 0x10(%rbx)
.Ltmp1012:
    000001e7: 	movq	%r12, 0x8(%rbx)
    000001eb: 	movb	$0x0, (%rdi,%r12)
    000001f0: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001f7: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001fe: 	addq	$0x20, %rax
    00000202: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000209: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000210: 	je	.Ltmp1010 # Offset: 528
.Ltmp1013:
    00000216: 	movq	-0x20(%rax), %rbp
    0000021a: 	callq	clock@PLT # Offset: 538
    0000021f: 	movq	%rax, end_time(%rip)
    00000226: 	movq	0x18(%rsp), %rdx
    0000022b: 	subq	%fs:0x28, %rdx
    00000234: 	jne	.Ltmp1011 # Offset: 564
    0000023a: 	subq	start_time(%rip), %rax
    00000241: 	pxor	%xmm0, %xmm0
    00000245: 	movq	%rbp, %rdi
    00000248: 	cvtsi2sd	%rax, %xmm0
    0000024d: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000255: 	addq	$0x28, %rsp
    00000259: 	popq	%rbx
    0000025a: 	popq	%rbp
    0000025b: 	popq	%r12
    0000025d: 	popq	%r13
    0000025f: 	popq	%r14
    00000261: 	popq	%r15
    00000263: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 611
    00000268: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1003:
    00000270: 	movq	(%rbp), %rdx
    00000274: 	movq	%r15, %rsi
    00000277: 	movl	$0x1, %edi
    0000027c: 	xorl	%eax, %eax
    0000027e: 	movss	%xmm4, 0xc(%rsp)
    00000284: 	addl	$0x1, %r12d
    00000288: 	callq	__printf_chk@PLT # Offset: 648
    0000028d: 	movl	iterations(%rip), %edx
    00000293: 	cmpl	%edx, %r12d
    00000296: 	jge	.Ltmp999 # Offset: 662
    0000029c: 	movq	DATAat0x4d620(%rip), %rax
    000002a3: 	movss	(%r13), %xmm5
    000002a9: 	pxor	%xmm11, %xmm11
    000002ae: 	movss	DATAat0x4d5d0(%rip), %xmm10
    000002b7: 	movss	0x4(%r13), %xmm6
    000002bd: 	movss	0xc(%rsp), %xmm4
    000002c3: 	movq	DATAat0x4d5e0(%rip), %xmm8
    000002cc: 	movq	%rax, %xmm9
    000002d1: 	movq	DATAat0x4d628(%rip), %rax
    000002d8: 	movq	%rax, %xmm7
    000002dd: 	jmp	.Ltmp1004 # Offset: 733
.Ltmp1008:
    000002e2: 	movq	%rbx, %rdi
    000002e5: 	leaq	0x10(%rsp), %rsi
    000002ea: 	xorl	%edx, %edx
    000002ec: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 748
    000002f1: 	movq	%rax, (%rbx)
    000002f4: 	movq	%rax, %rdi
    000002f7: 	movq	0x10(%rsp), %rax
    000002fc: 	movq	%rax, 0x10(%rbx)
.Ltmp1014:
    00000300: 	movq	%r12, %rdx
    00000303: 	movq	%r13, %rsi
    00000306: 	callq	memcpy@PLT # Offset: 774
    0000030b: 	movq	0x10(%rsp), %r12
    00000310: 	movq	(%rbx), %rdi
    00000313: 	jmp	.Ltmp1012 # Offset: 787
.Ltmp1005:
    00000318: 	movq	%rbp, %rsi
    0000031b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000322: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 802
    00000327: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000032e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000335: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000033c: 	jne	.Ltmp1013 # Offset: 828
.Ltmp1010:
    00000342: 	movq	-0x8(%rdx), %rax
    00000346: 	addq	$0x200, %rax
    0000034c: 	jmp	.Ltmp1013 # Offset: 844
.Ltmp1009:
    00000351: 	testq	%r12, %r12
    00000354: 	je	.Ltmp1012 # Offset: 852
    0000035a: 	jmp	.Ltmp1014 # Offset: 858
.Ltmp1011:
    0000035c: 	callq	__stack_chk_fail@PLT # Offset: 860
.Ltmp1007:
    00000361: 	leaq	DATAat0x4d018(%rip), %rdi
    00000368: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 872
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE4If14custom_cse_divIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z17test_CSE8_halfoptIf14custom_cse_addIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 99
  State       : disassembled
  Address     : 0x10390
  Size        : 0x423
  MaxSize     : 0x430
  Offset      : 0x10390
  Section     : .text
  Orc Section : .local.text._Z17test_CSE8_halfoptIf14custom_cse_addIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB098:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movl	%esi, %r12d
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdx, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movss	%xmm0, 0xc(%rsp)
    00000021: 	movq	%fs:0x28, %rax
    0000002a: 	movq	%rax, 0x18(%rsp)
    0000002f: 	xorl	%eax, %eax
    00000031: 	callq	clock@PLT # Offset: 49
    00000036: 	movl	iterations(%rip), %edx
    0000003c: 	movss	0xc(%rsp), %xmm2
    00000042: 	movq	%rax, start_time(%rip)
    00000049: 	testl	%edx, %edx
    0000004b: 	jle	.Ltmp1015 # Offset: 75
    00000051: 	leal	-0x4(%r12), %eax
    00000056: 	movss	0x4(%rbx), %xmm4
    0000005b: 	movss	(%rbx), %xmm3
    0000005f: 	xorl	%r13d, %r13d
    00000062: 	shrl	%eax
    00000064: 	movsd	DATAat0x4d620(%rip), %xmm7
    0000006c: 	movq	DATAat0x4d5e0(%rip), %xmm6
    00000074: 	pxor	%xmm9, %xmm9
    00000079: 	movsd	DATAat0x4d628(%rip), %xmm5
    00000081: 	leaq	0x5(%rax,%rax), %r14
    00000086: 	movss	DATAat0x4d5d0(%rip), %xmm8
    0000008f: 	leaq	DATAat0x4d004(%rip), %r15
    00000096: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1022:
    000000a0: 	movaps	%xmm4, %xmm1
    000000a3: 	movaps	%xmm3, %xmm0
    000000a6: 	movaps	%xmm3, %xmm10
    000000aa: 	addss	%xmm3, %xmm1
    000000ae: 	addss	%xmm2, %xmm1
    000000b2: 	addss	%xmm1, %xmm1
    000000b6: 	addss	%xmm1, %xmm0
    000000ba: 	addss	%xmm4, %xmm1
    000000be: 	subss	%xmm1, %xmm0
    000000c2: 	movaps	%xmm0, %xmm1
    000000c5: 	addss	%xmm9, %xmm1
    000000ca: 	addss	%xmm0, %xmm1
    000000ce: 	addss	%xmm0, %xmm1
    000000d2: 	addss	%xmm0, %xmm1
    000000d6: 	addss	%xmm0, %xmm1
    000000da: 	addss	%xmm0, %xmm1
    000000de: 	addss	%xmm0, %xmm1
    000000e2: 	addss	%xmm1, %xmm0
    000000e6: 	cmpl	$0x1, %r12d
    000000ea: 	jle	.Ltmp1016 # Offset: 234
    000000f0: 	cmpl	$0x3, %r12d
    000000f4: 	jle	.Ltmp1017 # Offset: 244
    000000fa: 	movl	$0x3, %ecx
.Ltmp1018:
    000000ff: 	movss	-0x8(%rbx,%rcx,4), %xmm11
    00000106: 	movaps	%xmm10, %xmm1
    0000010a: 	movslq	%ecx, %rax
    0000010d: 	movaps	%xmm11, %xmm12
    00000111: 	addss	%xmm10, %xmm12
    00000116: 	movss	-0x4(%rbx,%rcx,4), %xmm10
    0000011d: 	addq	$0x2, %rcx
    00000121: 	addss	%xmm2, %xmm12
    00000126: 	addss	%xmm12, %xmm12
    0000012b: 	addss	%xmm12, %xmm1
    00000130: 	addss	%xmm11, %xmm12
    00000135: 	subss	%xmm12, %xmm1
    0000013a: 	addss	%xmm1, %xmm0
    0000013e: 	addss	%xmm1, %xmm0
    00000142: 	addss	%xmm1, %xmm0
    00000146: 	addss	%xmm1, %xmm0
    0000014a: 	addss	%xmm1, %xmm0
    0000014e: 	addss	%xmm1, %xmm0
    00000152: 	addss	%xmm1, %xmm0
    00000156: 	addss	%xmm1, %xmm0
    0000015a: 	movaps	%xmm11, %xmm1
    0000015e: 	addss	%xmm10, %xmm1
    00000163: 	addss	%xmm2, %xmm1
    00000167: 	addss	%xmm1, %xmm1
    0000016b: 	addss	%xmm1, %xmm11
    00000170: 	addss	%xmm10, %xmm1
    00000175: 	subss	%xmm1, %xmm11
    0000017a: 	addss	%xmm11, %xmm0
    0000017f: 	addss	%xmm11, %xmm0
    00000184: 	addss	%xmm11, %xmm0
    00000189: 	addss	%xmm11, %xmm0
    0000018e: 	addss	%xmm11, %xmm0
    00000193: 	addss	%xmm11, %xmm0
    00000198: 	addss	%xmm11, %xmm0
    0000019d: 	addss	%xmm11, %xmm0
    000001a2: 	cmpq	%rcx, %r14
    000001a5: 	jne	.Ltmp1018 # Offset: 421
    000001ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1019:
    000001b0: 	movss	-0x4(%rbx,%rax,4), %xmm1
    000001b6: 	movss	(%rbx,%rax,4), %xmm11
    000001bc: 	addq	$0x1, %rax
    000001c0: 	movaps	%xmm1, %xmm10
    000001c4: 	addss	%xmm11, %xmm10
    000001c9: 	addss	%xmm2, %xmm10
    000001ce: 	addss	%xmm10, %xmm10
    000001d3: 	addss	%xmm10, %xmm1
    000001d8: 	addss	%xmm11, %xmm10
    000001dd: 	subss	%xmm10, %xmm1
    000001e2: 	addss	%xmm1, %xmm0
    000001e6: 	addss	%xmm1, %xmm0
    000001ea: 	addss	%xmm1, %xmm0
    000001ee: 	addss	%xmm1, %xmm0
    000001f2: 	addss	%xmm1, %xmm0
    000001f6: 	addss	%xmm1, %xmm0
    000001fa: 	addss	%xmm1, %xmm0
    000001fe: 	addss	%xmm1, %xmm0
    00000202: 	cmpl	%eax, %r12d
    00000205: 	jg	.Ltmp1019 # Offset: 517
.Ltmp1016:
    00000207: 	movaps	%xmm0, %xmm1
    0000020a: 	andps	%xmm8, %xmm1
    0000020e: 	cvtss2sd	%xmm1, %xmm1
    00000212: 	comisd	%xmm7, %xmm1
    00000216: 	jbe	.Ltmp1020 # Offset: 534
    00000218: 	divss	%xmm0, %xmm0
.Ltmp1020:
    0000021c: 	cvtss2sd	%xmm0, %xmm0
    00000220: 	andpd	%xmm6, %xmm0
    00000224: 	comisd	%xmm0, %xmm5
    00000228: 	jbe	.Ltmp1021 # Offset: 552
    0000022e: 	addl	$0x1, %r13d
    00000232: 	cmpl	%edx, %r13d
    00000235: 	jl	.Ltmp1022 # Offset: 565
.Ltmp1015:
    0000023b: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000242: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000249: 	subq	$0x20, %rax
    0000024d: 	cmpq	%rax, %rbx
    00000250: 	je	.Ltmp1023 # Offset: 592
    00000256: 	leaq	0x10(%rbx), %rdi
    0000025a: 	movq	0x8(%rbp), %r12
    0000025e: 	movq	%rdi, (%rbx)
    00000261: 	movq	(%rbp), %r13
    00000265: 	movq	%r13, %rax
    00000268: 	addq	%r12, %rax
    0000026b: 	je	.Ltmp1024 # Offset: 619
    0000026d: 	testq	%r13, %r13
    00000270: 	je	.Ltmp1025 # Offset: 624
.Ltmp1024:
    00000276: 	movq	%r12, 0x10(%rsp)
    0000027b: 	cmpq	$0xf, %r12
    0000027f: 	ja	.Ltmp1026 # Offset: 639
    00000285: 	cmpq	$0x1, %r12
    00000289: 	jne	.Ltmp1027 # Offset: 649
    0000028f: 	movzbl	(%r13), %eax
    00000294: 	movb	%al, 0x10(%rbx)
.Ltmp1030:
    00000297: 	movq	%r12, 0x8(%rbx)
    0000029b: 	movb	$0x0, (%rdi,%r12)
    000002a0: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002a7: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002ae: 	addq	$0x20, %rax
    000002b2: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002b9: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000002c0: 	je	.Ltmp1028 # Offset: 704
.Ltmp1031:
    000002c6: 	movq	-0x20(%rax), %rbp
    000002ca: 	callq	clock@PLT # Offset: 714
    000002cf: 	movq	%rax, end_time(%rip)
    000002d6: 	movq	0x18(%rsp), %rdx
    000002db: 	subq	%fs:0x28, %rdx
    000002e4: 	jne	.Ltmp1029 # Offset: 740
    000002ea: 	subq	start_time(%rip), %rax
    000002f1: 	pxor	%xmm0, %xmm0
    000002f5: 	movq	%rbp, %rdi
    000002f8: 	cvtsi2sd	%rax, %xmm0
    000002fd: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000305: 	addq	$0x28, %rsp
    00000309: 	popq	%rbx
    0000030a: 	popq	%rbp
    0000030b: 	popq	%r12
    0000030d: 	popq	%r13
    0000030f: 	popq	%r14
    00000311: 	popq	%r15
    00000313: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 787
    00000318: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1021:
    00000320: 	movq	(%rbp), %rdx
    00000324: 	movq	%r15, %rsi
    00000327: 	movl	$0x1, %edi
    0000032c: 	xorl	%eax, %eax
    0000032e: 	movss	%xmm2, 0xc(%rsp)
    00000334: 	addl	$0x1, %r13d
    00000338: 	callq	__printf_chk@PLT # Offset: 824
    0000033d: 	movl	iterations(%rip), %edx
    00000343: 	cmpl	%r13d, %edx
    00000346: 	jle	.Ltmp1015 # Offset: 838
    0000034c: 	movq	DATAat0x4d620(%rip), %rax
    00000353: 	movss	0x4(%rbx), %xmm4
    00000358: 	movss	DATAat0x4d5d0(%rip), %xmm8
    00000361: 	pxor	%xmm9, %xmm9
    00000366: 	movss	(%rbx), %xmm3
    0000036a: 	movss	0xc(%rsp), %xmm2
    00000370: 	movq	%rax, %xmm7
    00000375: 	movq	DATAat0x4d628(%rip), %rax
    0000037c: 	movq	DATAat0x4d5e0(%rip), %xmm6
    00000384: 	movq	%rax, %xmm5
    00000389: 	jmp	.Ltmp1022 # Offset: 905
.Ltmp1017:
    0000038e: 	movl	$0x1, %eax
    00000393: 	jmp	.Ltmp1019 # Offset: 915
.Ltmp1026:
    00000398: 	movq	%rbx, %rdi
    0000039b: 	leaq	0x10(%rsp), %rsi
    000003a0: 	xorl	%edx, %edx
    000003a2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 930
    000003a7: 	movq	%rax, (%rbx)
    000003aa: 	movq	%rax, %rdi
    000003ad: 	movq	0x10(%rsp), %rax
    000003b2: 	movq	%rax, 0x10(%rbx)
.Ltmp1032:
    000003b6: 	movq	%r12, %rdx
    000003b9: 	movq	%r13, %rsi
    000003bc: 	callq	memcpy@PLT # Offset: 956
    000003c1: 	movq	0x10(%rsp), %r12
    000003c6: 	movq	(%rbx), %rdi
    000003c9: 	jmp	.Ltmp1030 # Offset: 969
.Ltmp1023:
    000003ce: 	movq	%rbp, %rsi
    000003d1: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000003d8: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 984
    000003dd: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000003e4: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000003eb: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003f2: 	jne	.Ltmp1031 # Offset: 1010
.Ltmp1028:
    000003f8: 	movq	-0x8(%rdx), %rax
    000003fc: 	addq	$0x200, %rax
    00000402: 	jmp	.Ltmp1031 # Offset: 1026
.Ltmp1027:
    00000407: 	testq	%r12, %r12
    0000040a: 	je	.Ltmp1030 # Offset: 1034
    00000410: 	jmp	.Ltmp1032 # Offset: 1040
.Ltmp1029:
    00000412: 	callq	__stack_chk_fail@PLT # Offset: 1042
.Ltmp1025:
    00000417: 	leaq	DATAat0x4d018(%rip), %rdi
    0000041e: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1054
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_CSE8_halfoptIf14custom_cse_addIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z17test_CSE8_halfoptIf14custom_cse_mulIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 100
  State       : disassembled
  Address     : 0x107c0
  Size        : 0x423
  MaxSize     : 0x430
  Offset      : 0x107c0
  Section     : .text
  Orc Section : .local.text._Z17test_CSE8_halfoptIf14custom_cse_mulIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB099:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movl	%esi, %r12d
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdx, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movss	%xmm0, 0xc(%rsp)
    00000021: 	movq	%fs:0x28, %rax
    0000002a: 	movq	%rax, 0x18(%rsp)
    0000002f: 	xorl	%eax, %eax
    00000031: 	callq	clock@PLT # Offset: 49
    00000036: 	movl	iterations(%rip), %edx
    0000003c: 	movss	0xc(%rsp), %xmm2
    00000042: 	movq	%rax, start_time(%rip)
    00000049: 	testl	%edx, %edx
    0000004b: 	jle	.Ltmp1033 # Offset: 75
    00000051: 	leal	-0x4(%r12), %eax
    00000056: 	movss	0x4(%rbx), %xmm4
    0000005b: 	movss	(%rbx), %xmm3
    0000005f: 	xorl	%r13d, %r13d
    00000062: 	shrl	%eax
    00000064: 	movsd	DATAat0x4d620(%rip), %xmm7
    0000006c: 	movq	DATAat0x4d5e0(%rip), %xmm6
    00000074: 	pxor	%xmm9, %xmm9
    00000079: 	movsd	DATAat0x4d628(%rip), %xmm5
    00000081: 	leaq	0x5(%rax,%rax), %r14
    00000086: 	movss	DATAat0x4d5d0(%rip), %xmm8
    0000008f: 	leaq	DATAat0x4d004(%rip), %r15
    00000096: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1040:
    000000a0: 	movaps	%xmm4, %xmm1
    000000a3: 	movaps	%xmm3, %xmm0
    000000a6: 	movaps	%xmm3, %xmm10
    000000aa: 	mulss	%xmm3, %xmm1
    000000ae: 	addss	%xmm2, %xmm1
    000000b2: 	addss	%xmm1, %xmm1
    000000b6: 	addss	%xmm1, %xmm0
    000000ba: 	addss	%xmm4, %xmm1
    000000be: 	subss	%xmm1, %xmm0
    000000c2: 	movaps	%xmm0, %xmm1
    000000c5: 	addss	%xmm9, %xmm1
    000000ca: 	addss	%xmm0, %xmm1
    000000ce: 	addss	%xmm0, %xmm1
    000000d2: 	addss	%xmm0, %xmm1
    000000d6: 	addss	%xmm0, %xmm1
    000000da: 	addss	%xmm0, %xmm1
    000000de: 	addss	%xmm0, %xmm1
    000000e2: 	addss	%xmm1, %xmm0
    000000e6: 	cmpl	$0x1, %r12d
    000000ea: 	jle	.Ltmp1034 # Offset: 234
    000000f0: 	cmpl	$0x3, %r12d
    000000f4: 	jle	.Ltmp1035 # Offset: 244
    000000fa: 	movl	$0x3, %ecx
.Ltmp1036:
    000000ff: 	movss	-0x8(%rbx,%rcx,4), %xmm11
    00000106: 	movaps	%xmm10, %xmm1
    0000010a: 	movslq	%ecx, %rax
    0000010d: 	movaps	%xmm11, %xmm12
    00000111: 	mulss	%xmm10, %xmm12
    00000116: 	movss	-0x4(%rbx,%rcx,4), %xmm10
    0000011d: 	addq	$0x2, %rcx
    00000121: 	addss	%xmm2, %xmm12
    00000126: 	addss	%xmm12, %xmm12
    0000012b: 	addss	%xmm12, %xmm1
    00000130: 	addss	%xmm11, %xmm12
    00000135: 	subss	%xmm12, %xmm1
    0000013a: 	addss	%xmm1, %xmm0
    0000013e: 	addss	%xmm1, %xmm0
    00000142: 	addss	%xmm1, %xmm0
    00000146: 	addss	%xmm1, %xmm0
    0000014a: 	addss	%xmm1, %xmm0
    0000014e: 	addss	%xmm1, %xmm0
    00000152: 	addss	%xmm1, %xmm0
    00000156: 	addss	%xmm1, %xmm0
    0000015a: 	movaps	%xmm11, %xmm1
    0000015e: 	mulss	%xmm10, %xmm1
    00000163: 	addss	%xmm2, %xmm1
    00000167: 	addss	%xmm1, %xmm1
    0000016b: 	addss	%xmm1, %xmm11
    00000170: 	addss	%xmm10, %xmm1
    00000175: 	subss	%xmm1, %xmm11
    0000017a: 	addss	%xmm11, %xmm0
    0000017f: 	addss	%xmm11, %xmm0
    00000184: 	addss	%xmm11, %xmm0
    00000189: 	addss	%xmm11, %xmm0
    0000018e: 	addss	%xmm11, %xmm0
    00000193: 	addss	%xmm11, %xmm0
    00000198: 	addss	%xmm11, %xmm0
    0000019d: 	addss	%xmm11, %xmm0
    000001a2: 	cmpq	%rcx, %r14
    000001a5: 	jne	.Ltmp1036 # Offset: 421
    000001ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1037:
    000001b0: 	movss	-0x4(%rbx,%rax,4), %xmm1
    000001b6: 	movss	(%rbx,%rax,4), %xmm11
    000001bc: 	addq	$0x1, %rax
    000001c0: 	movaps	%xmm1, %xmm10
    000001c4: 	mulss	%xmm11, %xmm10
    000001c9: 	addss	%xmm2, %xmm10
    000001ce: 	addss	%xmm10, %xmm10
    000001d3: 	addss	%xmm10, %xmm1
    000001d8: 	addss	%xmm11, %xmm10
    000001dd: 	subss	%xmm10, %xmm1
    000001e2: 	addss	%xmm1, %xmm0
    000001e6: 	addss	%xmm1, %xmm0
    000001ea: 	addss	%xmm1, %xmm0
    000001ee: 	addss	%xmm1, %xmm0
    000001f2: 	addss	%xmm1, %xmm0
    000001f6: 	addss	%xmm1, %xmm0
    000001fa: 	addss	%xmm1, %xmm0
    000001fe: 	addss	%xmm1, %xmm0
    00000202: 	cmpl	%eax, %r12d
    00000205: 	jg	.Ltmp1037 # Offset: 517
.Ltmp1034:
    00000207: 	movaps	%xmm0, %xmm1
    0000020a: 	andps	%xmm8, %xmm1
    0000020e: 	cvtss2sd	%xmm1, %xmm1
    00000212: 	comisd	%xmm7, %xmm1
    00000216: 	jbe	.Ltmp1038 # Offset: 534
    00000218: 	divss	%xmm0, %xmm0
.Ltmp1038:
    0000021c: 	cvtss2sd	%xmm0, %xmm0
    00000220: 	andpd	%xmm6, %xmm0
    00000224: 	comisd	%xmm0, %xmm5
    00000228: 	jbe	.Ltmp1039 # Offset: 552
    0000022e: 	addl	$0x1, %r13d
    00000232: 	cmpl	%edx, %r13d
    00000235: 	jl	.Ltmp1040 # Offset: 565
.Ltmp1033:
    0000023b: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000242: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000249: 	subq	$0x20, %rax
    0000024d: 	cmpq	%rax, %rbx
    00000250: 	je	.Ltmp1041 # Offset: 592
    00000256: 	leaq	0x10(%rbx), %rdi
    0000025a: 	movq	0x8(%rbp), %r12
    0000025e: 	movq	%rdi, (%rbx)
    00000261: 	movq	(%rbp), %r13
    00000265: 	movq	%r13, %rax
    00000268: 	addq	%r12, %rax
    0000026b: 	je	.Ltmp1042 # Offset: 619
    0000026d: 	testq	%r13, %r13
    00000270: 	je	.Ltmp1043 # Offset: 624
.Ltmp1042:
    00000276: 	movq	%r12, 0x10(%rsp)
    0000027b: 	cmpq	$0xf, %r12
    0000027f: 	ja	.Ltmp1044 # Offset: 639
    00000285: 	cmpq	$0x1, %r12
    00000289: 	jne	.Ltmp1045 # Offset: 649
    0000028f: 	movzbl	(%r13), %eax
    00000294: 	movb	%al, 0x10(%rbx)
.Ltmp1048:
    00000297: 	movq	%r12, 0x8(%rbx)
    0000029b: 	movb	$0x0, (%rdi,%r12)
    000002a0: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002a7: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002ae: 	addq	$0x20, %rax
    000002b2: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002b9: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000002c0: 	je	.Ltmp1046 # Offset: 704
.Ltmp1049:
    000002c6: 	movq	-0x20(%rax), %rbp
    000002ca: 	callq	clock@PLT # Offset: 714
    000002cf: 	movq	%rax, end_time(%rip)
    000002d6: 	movq	0x18(%rsp), %rdx
    000002db: 	subq	%fs:0x28, %rdx
    000002e4: 	jne	.Ltmp1047 # Offset: 740
    000002ea: 	subq	start_time(%rip), %rax
    000002f1: 	pxor	%xmm0, %xmm0
    000002f5: 	movq	%rbp, %rdi
    000002f8: 	cvtsi2sd	%rax, %xmm0
    000002fd: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000305: 	addq	$0x28, %rsp
    00000309: 	popq	%rbx
    0000030a: 	popq	%rbp
    0000030b: 	popq	%r12
    0000030d: 	popq	%r13
    0000030f: 	popq	%r14
    00000311: 	popq	%r15
    00000313: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 787
    00000318: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1039:
    00000320: 	movq	(%rbp), %rdx
    00000324: 	movq	%r15, %rsi
    00000327: 	movl	$0x1, %edi
    0000032c: 	xorl	%eax, %eax
    0000032e: 	movss	%xmm2, 0xc(%rsp)
    00000334: 	addl	$0x1, %r13d
    00000338: 	callq	__printf_chk@PLT # Offset: 824
    0000033d: 	movl	iterations(%rip), %edx
    00000343: 	cmpl	%r13d, %edx
    00000346: 	jle	.Ltmp1033 # Offset: 838
    0000034c: 	movq	DATAat0x4d620(%rip), %rax
    00000353: 	movss	0x4(%rbx), %xmm4
    00000358: 	movss	DATAat0x4d5d0(%rip), %xmm8
    00000361: 	pxor	%xmm9, %xmm9
    00000366: 	movss	(%rbx), %xmm3
    0000036a: 	movss	0xc(%rsp), %xmm2
    00000370: 	movq	%rax, %xmm7
    00000375: 	movq	DATAat0x4d628(%rip), %rax
    0000037c: 	movq	DATAat0x4d5e0(%rip), %xmm6
    00000384: 	movq	%rax, %xmm5
    00000389: 	jmp	.Ltmp1040 # Offset: 905
.Ltmp1035:
    0000038e: 	movl	$0x1, %eax
    00000393: 	jmp	.Ltmp1037 # Offset: 915
.Ltmp1044:
    00000398: 	movq	%rbx, %rdi
    0000039b: 	leaq	0x10(%rsp), %rsi
    000003a0: 	xorl	%edx, %edx
    000003a2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 930
    000003a7: 	movq	%rax, (%rbx)
    000003aa: 	movq	%rax, %rdi
    000003ad: 	movq	0x10(%rsp), %rax
    000003b2: 	movq	%rax, 0x10(%rbx)
.Ltmp1050:
    000003b6: 	movq	%r12, %rdx
    000003b9: 	movq	%r13, %rsi
    000003bc: 	callq	memcpy@PLT # Offset: 956
    000003c1: 	movq	0x10(%rsp), %r12
    000003c6: 	movq	(%rbx), %rdi
    000003c9: 	jmp	.Ltmp1048 # Offset: 969
.Ltmp1041:
    000003ce: 	movq	%rbp, %rsi
    000003d1: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000003d8: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 984
    000003dd: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000003e4: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000003eb: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003f2: 	jne	.Ltmp1049 # Offset: 1010
.Ltmp1046:
    000003f8: 	movq	-0x8(%rdx), %rax
    000003fc: 	addq	$0x200, %rax
    00000402: 	jmp	.Ltmp1049 # Offset: 1026
.Ltmp1045:
    00000407: 	testq	%r12, %r12
    0000040a: 	je	.Ltmp1048 # Offset: 1034
    00000410: 	jmp	.Ltmp1050 # Offset: 1040
.Ltmp1047:
    00000412: 	callq	__stack_chk_fail@PLT # Offset: 1042
.Ltmp1043:
    00000417: 	leaq	DATAat0x4d018(%rip), %rdi
    0000041e: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1054
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_CSE8_halfoptIf14custom_cse_mulIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z17test_CSE8_halfoptIf14custom_cse_subIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 101
  State       : disassembled
  Address     : 0x10bf0
  Size        : 0x423
  MaxSize     : 0x430
  Offset      : 0x10bf0
  Section     : .text
  Orc Section : .local.text._Z17test_CSE8_halfoptIf14custom_cse_subIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0100:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movl	%esi, %r12d
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdx, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movss	%xmm0, 0xc(%rsp)
    00000021: 	movq	%fs:0x28, %rax
    0000002a: 	movq	%rax, 0x18(%rsp)
    0000002f: 	xorl	%eax, %eax
    00000031: 	callq	clock@PLT # Offset: 49
    00000036: 	movl	iterations(%rip), %edx
    0000003c: 	movss	0xc(%rsp), %xmm2
    00000042: 	movq	%rax, start_time(%rip)
    00000049: 	testl	%edx, %edx
    0000004b: 	jle	.Ltmp1051 # Offset: 75
    00000051: 	leal	-0x4(%r12), %eax
    00000056: 	movss	0x4(%rbx), %xmm4
    0000005b: 	movss	(%rbx), %xmm3
    0000005f: 	xorl	%r13d, %r13d
    00000062: 	shrl	%eax
    00000064: 	movsd	DATAat0x4d620(%rip), %xmm7
    0000006c: 	movq	DATAat0x4d5e0(%rip), %xmm6
    00000074: 	pxor	%xmm9, %xmm9
    00000079: 	movsd	DATAat0x4d628(%rip), %xmm5
    00000081: 	leaq	0x5(%rax,%rax), %r14
    00000086: 	movss	DATAat0x4d5d0(%rip), %xmm8
    0000008f: 	leaq	DATAat0x4d004(%rip), %r15
    00000096: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1058:
    000000a0: 	movaps	%xmm3, %xmm1
    000000a3: 	movaps	%xmm3, %xmm0
    000000a6: 	movaps	%xmm3, %xmm10
    000000aa: 	subss	%xmm4, %xmm1
    000000ae: 	addss	%xmm2, %xmm1
    000000b2: 	addss	%xmm1, %xmm1
    000000b6: 	addss	%xmm1, %xmm0
    000000ba: 	addss	%xmm4, %xmm1
    000000be: 	subss	%xmm1, %xmm0
    000000c2: 	movaps	%xmm0, %xmm1
    000000c5: 	addss	%xmm9, %xmm1
    000000ca: 	addss	%xmm0, %xmm1
    000000ce: 	addss	%xmm0, %xmm1
    000000d2: 	addss	%xmm0, %xmm1
    000000d6: 	addss	%xmm0, %xmm1
    000000da: 	addss	%xmm0, %xmm1
    000000de: 	addss	%xmm0, %xmm1
    000000e2: 	addss	%xmm1, %xmm0
    000000e6: 	cmpl	$0x1, %r12d
    000000ea: 	jle	.Ltmp1052 # Offset: 234
    000000f0: 	cmpl	$0x3, %r12d
    000000f4: 	jle	.Ltmp1053 # Offset: 244
    000000fa: 	movl	$0x3, %ecx
.Ltmp1054:
    000000ff: 	movss	-0x8(%rbx,%rcx,4), %xmm11
    00000106: 	movaps	%xmm10, %xmm12
    0000010a: 	movaps	%xmm10, %xmm1
    0000010e: 	movslq	%ecx, %rax
    00000111: 	movss	-0x4(%rbx,%rcx,4), %xmm10
    00000118: 	addq	$0x2, %rcx
    0000011c: 	subss	%xmm11, %xmm12
    00000121: 	addss	%xmm2, %xmm12
    00000126: 	addss	%xmm12, %xmm12
    0000012b: 	addss	%xmm12, %xmm1
    00000130: 	addss	%xmm11, %xmm12
    00000135: 	subss	%xmm12, %xmm1
    0000013a: 	addss	%xmm1, %xmm0
    0000013e: 	addss	%xmm1, %xmm0
    00000142: 	addss	%xmm1, %xmm0
    00000146: 	addss	%xmm1, %xmm0
    0000014a: 	addss	%xmm1, %xmm0
    0000014e: 	addss	%xmm1, %xmm0
    00000152: 	addss	%xmm1, %xmm0
    00000156: 	addss	%xmm1, %xmm0
    0000015a: 	movaps	%xmm11, %xmm1
    0000015e: 	subss	%xmm10, %xmm1
    00000163: 	addss	%xmm2, %xmm1
    00000167: 	addss	%xmm1, %xmm1
    0000016b: 	addss	%xmm1, %xmm11
    00000170: 	addss	%xmm10, %xmm1
    00000175: 	subss	%xmm1, %xmm11
    0000017a: 	addss	%xmm11, %xmm0
    0000017f: 	addss	%xmm11, %xmm0
    00000184: 	addss	%xmm11, %xmm0
    00000189: 	addss	%xmm11, %xmm0
    0000018e: 	addss	%xmm11, %xmm0
    00000193: 	addss	%xmm11, %xmm0
    00000198: 	addss	%xmm11, %xmm0
    0000019d: 	addss	%xmm11, %xmm0
    000001a2: 	cmpq	%rcx, %r14
    000001a5: 	jne	.Ltmp1054 # Offset: 421
    000001ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1055:
    000001b0: 	movss	-0x4(%rbx,%rax,4), %xmm1
    000001b6: 	movss	(%rbx,%rax,4), %xmm11
    000001bc: 	addq	$0x1, %rax
    000001c0: 	movaps	%xmm1, %xmm10
    000001c4: 	subss	%xmm11, %xmm10
    000001c9: 	addss	%xmm2, %xmm10
    000001ce: 	addss	%xmm10, %xmm10
    000001d3: 	addss	%xmm10, %xmm1
    000001d8: 	addss	%xmm11, %xmm10
    000001dd: 	subss	%xmm10, %xmm1
    000001e2: 	addss	%xmm1, %xmm0
    000001e6: 	addss	%xmm1, %xmm0
    000001ea: 	addss	%xmm1, %xmm0
    000001ee: 	addss	%xmm1, %xmm0
    000001f2: 	addss	%xmm1, %xmm0
    000001f6: 	addss	%xmm1, %xmm0
    000001fa: 	addss	%xmm1, %xmm0
    000001fe: 	addss	%xmm1, %xmm0
    00000202: 	cmpl	%eax, %r12d
    00000205: 	jg	.Ltmp1055 # Offset: 517
.Ltmp1052:
    00000207: 	movaps	%xmm0, %xmm1
    0000020a: 	andps	%xmm8, %xmm1
    0000020e: 	cvtss2sd	%xmm1, %xmm1
    00000212: 	comisd	%xmm7, %xmm1
    00000216: 	jbe	.Ltmp1056 # Offset: 534
    00000218: 	divss	%xmm0, %xmm0
.Ltmp1056:
    0000021c: 	cvtss2sd	%xmm0, %xmm0
    00000220: 	andpd	%xmm6, %xmm0
    00000224: 	comisd	%xmm0, %xmm5
    00000228: 	jbe	.Ltmp1057 # Offset: 552
    0000022e: 	addl	$0x1, %r13d
    00000232: 	cmpl	%edx, %r13d
    00000235: 	jl	.Ltmp1058 # Offset: 565
.Ltmp1051:
    0000023b: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000242: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000249: 	subq	$0x20, %rax
    0000024d: 	cmpq	%rax, %rbx
    00000250: 	je	.Ltmp1059 # Offset: 592
    00000256: 	leaq	0x10(%rbx), %rdi
    0000025a: 	movq	0x8(%rbp), %r12
    0000025e: 	movq	%rdi, (%rbx)
    00000261: 	movq	(%rbp), %r13
    00000265: 	movq	%r13, %rax
    00000268: 	addq	%r12, %rax
    0000026b: 	je	.Ltmp1060 # Offset: 619
    0000026d: 	testq	%r13, %r13
    00000270: 	je	.Ltmp1061 # Offset: 624
.Ltmp1060:
    00000276: 	movq	%r12, 0x10(%rsp)
    0000027b: 	cmpq	$0xf, %r12
    0000027f: 	ja	.Ltmp1062 # Offset: 639
    00000285: 	cmpq	$0x1, %r12
    00000289: 	jne	.Ltmp1063 # Offset: 649
    0000028f: 	movzbl	(%r13), %eax
    00000294: 	movb	%al, 0x10(%rbx)
.Ltmp1066:
    00000297: 	movq	%r12, 0x8(%rbx)
    0000029b: 	movb	$0x0, (%rdi,%r12)
    000002a0: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002a7: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002ae: 	addq	$0x20, %rax
    000002b2: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002b9: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000002c0: 	je	.Ltmp1064 # Offset: 704
.Ltmp1067:
    000002c6: 	movq	-0x20(%rax), %rbp
    000002ca: 	callq	clock@PLT # Offset: 714
    000002cf: 	movq	%rax, end_time(%rip)
    000002d6: 	movq	0x18(%rsp), %rdx
    000002db: 	subq	%fs:0x28, %rdx
    000002e4: 	jne	.Ltmp1065 # Offset: 740
    000002ea: 	subq	start_time(%rip), %rax
    000002f1: 	pxor	%xmm0, %xmm0
    000002f5: 	movq	%rbp, %rdi
    000002f8: 	cvtsi2sd	%rax, %xmm0
    000002fd: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000305: 	addq	$0x28, %rsp
    00000309: 	popq	%rbx
    0000030a: 	popq	%rbp
    0000030b: 	popq	%r12
    0000030d: 	popq	%r13
    0000030f: 	popq	%r14
    00000311: 	popq	%r15
    00000313: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 787
    00000318: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1057:
    00000320: 	movq	(%rbp), %rdx
    00000324: 	movq	%r15, %rsi
    00000327: 	movl	$0x1, %edi
    0000032c: 	xorl	%eax, %eax
    0000032e: 	movss	%xmm2, 0xc(%rsp)
    00000334: 	addl	$0x1, %r13d
    00000338: 	callq	__printf_chk@PLT # Offset: 824
    0000033d: 	movl	iterations(%rip), %edx
    00000343: 	cmpl	%r13d, %edx
    00000346: 	jle	.Ltmp1051 # Offset: 838
    0000034c: 	movq	DATAat0x4d620(%rip), %rax
    00000353: 	movss	0x4(%rbx), %xmm4
    00000358: 	movss	DATAat0x4d5d0(%rip), %xmm8
    00000361: 	pxor	%xmm9, %xmm9
    00000366: 	movss	(%rbx), %xmm3
    0000036a: 	movss	0xc(%rsp), %xmm2
    00000370: 	movq	%rax, %xmm7
    00000375: 	movq	DATAat0x4d628(%rip), %rax
    0000037c: 	movq	DATAat0x4d5e0(%rip), %xmm6
    00000384: 	movq	%rax, %xmm5
    00000389: 	jmp	.Ltmp1058 # Offset: 905
.Ltmp1053:
    0000038e: 	movl	$0x1, %eax
    00000393: 	jmp	.Ltmp1055 # Offset: 915
.Ltmp1062:
    00000398: 	movq	%rbx, %rdi
    0000039b: 	leaq	0x10(%rsp), %rsi
    000003a0: 	xorl	%edx, %edx
    000003a2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 930
    000003a7: 	movq	%rax, (%rbx)
    000003aa: 	movq	%rax, %rdi
    000003ad: 	movq	0x10(%rsp), %rax
    000003b2: 	movq	%rax, 0x10(%rbx)
.Ltmp1068:
    000003b6: 	movq	%r12, %rdx
    000003b9: 	movq	%r13, %rsi
    000003bc: 	callq	memcpy@PLT # Offset: 956
    000003c1: 	movq	0x10(%rsp), %r12
    000003c6: 	movq	(%rbx), %rdi
    000003c9: 	jmp	.Ltmp1066 # Offset: 969
.Ltmp1059:
    000003ce: 	movq	%rbp, %rsi
    000003d1: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000003d8: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 984
    000003dd: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000003e4: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000003eb: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003f2: 	jne	.Ltmp1067 # Offset: 1010
.Ltmp1064:
    000003f8: 	movq	-0x8(%rdx), %rax
    000003fc: 	addq	$0x200, %rax
    00000402: 	jmp	.Ltmp1067 # Offset: 1026
.Ltmp1063:
    00000407: 	testq	%r12, %r12
    0000040a: 	je	.Ltmp1066 # Offset: 1034
    00000410: 	jmp	.Ltmp1068 # Offset: 1040
.Ltmp1065:
    00000412: 	callq	__stack_chk_fail@PLT # Offset: 1042
.Ltmp1061:
    00000417: 	leaq	DATAat0x4d018(%rip), %rdi
    0000041e: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1054
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_CSE8_halfoptIf14custom_cse_subIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z17test_CSE8_halfoptIf14custom_cse_divIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 102
  State       : disassembled
  Address     : 0x11020
  Size        : 0x423
  MaxSize     : 0x430
  Offset      : 0x11020
  Section     : .text
  Orc Section : .local.text._Z17test_CSE8_halfoptIf14custom_cse_divIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0101:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movl	%esi, %r12d
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdx, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movss	%xmm0, 0xc(%rsp)
    00000021: 	movq	%fs:0x28, %rax
    0000002a: 	movq	%rax, 0x18(%rsp)
    0000002f: 	xorl	%eax, %eax
    00000031: 	callq	clock@PLT # Offset: 49
    00000036: 	movl	iterations(%rip), %edx
    0000003c: 	movss	0xc(%rsp), %xmm2
    00000042: 	movq	%rax, start_time(%rip)
    00000049: 	testl	%edx, %edx
    0000004b: 	jle	.Ltmp1069 # Offset: 75
    00000051: 	leal	-0x4(%r12), %eax
    00000056: 	movss	0x4(%rbx), %xmm4
    0000005b: 	movss	(%rbx), %xmm3
    0000005f: 	xorl	%r13d, %r13d
    00000062: 	shrl	%eax
    00000064: 	movsd	DATAat0x4d620(%rip), %xmm7
    0000006c: 	movq	DATAat0x4d5e0(%rip), %xmm6
    00000074: 	pxor	%xmm9, %xmm9
    00000079: 	movsd	DATAat0x4d628(%rip), %xmm5
    00000081: 	leaq	0x5(%rax,%rax), %r14
    00000086: 	movss	DATAat0x4d5d0(%rip), %xmm8
    0000008f: 	leaq	DATAat0x4d004(%rip), %r15
    00000096: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1076:
    000000a0: 	movaps	%xmm3, %xmm1
    000000a3: 	movaps	%xmm3, %xmm0
    000000a6: 	movaps	%xmm3, %xmm10
    000000aa: 	divss	%xmm4, %xmm1
    000000ae: 	addss	%xmm2, %xmm1
    000000b2: 	addss	%xmm1, %xmm1
    000000b6: 	addss	%xmm1, %xmm0
    000000ba: 	addss	%xmm4, %xmm1
    000000be: 	subss	%xmm1, %xmm0
    000000c2: 	movaps	%xmm0, %xmm1
    000000c5: 	addss	%xmm9, %xmm1
    000000ca: 	addss	%xmm0, %xmm1
    000000ce: 	addss	%xmm0, %xmm1
    000000d2: 	addss	%xmm0, %xmm1
    000000d6: 	addss	%xmm0, %xmm1
    000000da: 	addss	%xmm0, %xmm1
    000000de: 	addss	%xmm0, %xmm1
    000000e2: 	addss	%xmm1, %xmm0
    000000e6: 	cmpl	$0x1, %r12d
    000000ea: 	jle	.Ltmp1070 # Offset: 234
    000000f0: 	cmpl	$0x3, %r12d
    000000f4: 	jle	.Ltmp1071 # Offset: 244
    000000fa: 	movl	$0x3, %ecx
.Ltmp1072:
    000000ff: 	movss	-0x8(%rbx,%rcx,4), %xmm11
    00000106: 	movaps	%xmm10, %xmm12
    0000010a: 	movaps	%xmm10, %xmm1
    0000010e: 	movslq	%ecx, %rax
    00000111: 	movss	-0x4(%rbx,%rcx,4), %xmm10
    00000118: 	addq	$0x2, %rcx
    0000011c: 	divss	%xmm11, %xmm12
    00000121: 	addss	%xmm2, %xmm12
    00000126: 	addss	%xmm12, %xmm12
    0000012b: 	addss	%xmm12, %xmm1
    00000130: 	addss	%xmm11, %xmm12
    00000135: 	subss	%xmm12, %xmm1
    0000013a: 	addss	%xmm1, %xmm0
    0000013e: 	addss	%xmm1, %xmm0
    00000142: 	addss	%xmm1, %xmm0
    00000146: 	addss	%xmm1, %xmm0
    0000014a: 	addss	%xmm1, %xmm0
    0000014e: 	addss	%xmm1, %xmm0
    00000152: 	addss	%xmm1, %xmm0
    00000156: 	addss	%xmm1, %xmm0
    0000015a: 	movaps	%xmm11, %xmm1
    0000015e: 	divss	%xmm10, %xmm1
    00000163: 	addss	%xmm2, %xmm1
    00000167: 	addss	%xmm1, %xmm1
    0000016b: 	addss	%xmm1, %xmm11
    00000170: 	addss	%xmm10, %xmm1
    00000175: 	subss	%xmm1, %xmm11
    0000017a: 	addss	%xmm11, %xmm0
    0000017f: 	addss	%xmm11, %xmm0
    00000184: 	addss	%xmm11, %xmm0
    00000189: 	addss	%xmm11, %xmm0
    0000018e: 	addss	%xmm11, %xmm0
    00000193: 	addss	%xmm11, %xmm0
    00000198: 	addss	%xmm11, %xmm0
    0000019d: 	addss	%xmm11, %xmm0
    000001a2: 	cmpq	%rcx, %r14
    000001a5: 	jne	.Ltmp1072 # Offset: 421
    000001ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1073:
    000001b0: 	movss	-0x4(%rbx,%rax,4), %xmm1
    000001b6: 	movss	(%rbx,%rax,4), %xmm11
    000001bc: 	addq	$0x1, %rax
    000001c0: 	movaps	%xmm1, %xmm10
    000001c4: 	divss	%xmm11, %xmm10
    000001c9: 	addss	%xmm2, %xmm10
    000001ce: 	addss	%xmm10, %xmm10
    000001d3: 	addss	%xmm10, %xmm1
    000001d8: 	addss	%xmm11, %xmm10
    000001dd: 	subss	%xmm10, %xmm1
    000001e2: 	addss	%xmm1, %xmm0
    000001e6: 	addss	%xmm1, %xmm0
    000001ea: 	addss	%xmm1, %xmm0
    000001ee: 	addss	%xmm1, %xmm0
    000001f2: 	addss	%xmm1, %xmm0
    000001f6: 	addss	%xmm1, %xmm0
    000001fa: 	addss	%xmm1, %xmm0
    000001fe: 	addss	%xmm1, %xmm0
    00000202: 	cmpl	%eax, %r12d
    00000205: 	jg	.Ltmp1073 # Offset: 517
.Ltmp1070:
    00000207: 	movaps	%xmm0, %xmm1
    0000020a: 	andps	%xmm8, %xmm1
    0000020e: 	cvtss2sd	%xmm1, %xmm1
    00000212: 	comisd	%xmm7, %xmm1
    00000216: 	jbe	.Ltmp1074 # Offset: 534
    00000218: 	divss	%xmm0, %xmm0
.Ltmp1074:
    0000021c: 	cvtss2sd	%xmm0, %xmm0
    00000220: 	andpd	%xmm6, %xmm0
    00000224: 	comisd	%xmm0, %xmm5
    00000228: 	jbe	.Ltmp1075 # Offset: 552
    0000022e: 	addl	$0x1, %r13d
    00000232: 	cmpl	%edx, %r13d
    00000235: 	jl	.Ltmp1076 # Offset: 565
.Ltmp1069:
    0000023b: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000242: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000249: 	subq	$0x20, %rax
    0000024d: 	cmpq	%rax, %rbx
    00000250: 	je	.Ltmp1077 # Offset: 592
    00000256: 	leaq	0x10(%rbx), %rdi
    0000025a: 	movq	0x8(%rbp), %r12
    0000025e: 	movq	%rdi, (%rbx)
    00000261: 	movq	(%rbp), %r13
    00000265: 	movq	%r13, %rax
    00000268: 	addq	%r12, %rax
    0000026b: 	je	.Ltmp1078 # Offset: 619
    0000026d: 	testq	%r13, %r13
    00000270: 	je	.Ltmp1079 # Offset: 624
.Ltmp1078:
    00000276: 	movq	%r12, 0x10(%rsp)
    0000027b: 	cmpq	$0xf, %r12
    0000027f: 	ja	.Ltmp1080 # Offset: 639
    00000285: 	cmpq	$0x1, %r12
    00000289: 	jne	.Ltmp1081 # Offset: 649
    0000028f: 	movzbl	(%r13), %eax
    00000294: 	movb	%al, 0x10(%rbx)
.Ltmp1084:
    00000297: 	movq	%r12, 0x8(%rbx)
    0000029b: 	movb	$0x0, (%rdi,%r12)
    000002a0: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002a7: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002ae: 	addq	$0x20, %rax
    000002b2: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002b9: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000002c0: 	je	.Ltmp1082 # Offset: 704
.Ltmp1085:
    000002c6: 	movq	-0x20(%rax), %rbp
    000002ca: 	callq	clock@PLT # Offset: 714
    000002cf: 	movq	%rax, end_time(%rip)
    000002d6: 	movq	0x18(%rsp), %rdx
    000002db: 	subq	%fs:0x28, %rdx
    000002e4: 	jne	.Ltmp1083 # Offset: 740
    000002ea: 	subq	start_time(%rip), %rax
    000002f1: 	pxor	%xmm0, %xmm0
    000002f5: 	movq	%rbp, %rdi
    000002f8: 	cvtsi2sd	%rax, %xmm0
    000002fd: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000305: 	addq	$0x28, %rsp
    00000309: 	popq	%rbx
    0000030a: 	popq	%rbp
    0000030b: 	popq	%r12
    0000030d: 	popq	%r13
    0000030f: 	popq	%r14
    00000311: 	popq	%r15
    00000313: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 787
    00000318: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1075:
    00000320: 	movq	(%rbp), %rdx
    00000324: 	movq	%r15, %rsi
    00000327: 	movl	$0x1, %edi
    0000032c: 	xorl	%eax, %eax
    0000032e: 	movss	%xmm2, 0xc(%rsp)
    00000334: 	addl	$0x1, %r13d
    00000338: 	callq	__printf_chk@PLT # Offset: 824
    0000033d: 	movl	iterations(%rip), %edx
    00000343: 	cmpl	%r13d, %edx
    00000346: 	jle	.Ltmp1069 # Offset: 838
    0000034c: 	movq	DATAat0x4d620(%rip), %rax
    00000353: 	movss	0x4(%rbx), %xmm4
    00000358: 	movss	DATAat0x4d5d0(%rip), %xmm8
    00000361: 	pxor	%xmm9, %xmm9
    00000366: 	movss	(%rbx), %xmm3
    0000036a: 	movss	0xc(%rsp), %xmm2
    00000370: 	movq	%rax, %xmm7
    00000375: 	movq	DATAat0x4d628(%rip), %rax
    0000037c: 	movq	DATAat0x4d5e0(%rip), %xmm6
    00000384: 	movq	%rax, %xmm5
    00000389: 	jmp	.Ltmp1076 # Offset: 905
.Ltmp1071:
    0000038e: 	movl	$0x1, %eax
    00000393: 	jmp	.Ltmp1073 # Offset: 915
.Ltmp1080:
    00000398: 	movq	%rbx, %rdi
    0000039b: 	leaq	0x10(%rsp), %rsi
    000003a0: 	xorl	%edx, %edx
    000003a2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 930
    000003a7: 	movq	%rax, (%rbx)
    000003aa: 	movq	%rax, %rdi
    000003ad: 	movq	0x10(%rsp), %rax
    000003b2: 	movq	%rax, 0x10(%rbx)
.Ltmp1086:
    000003b6: 	movq	%r12, %rdx
    000003b9: 	movq	%r13, %rsi
    000003bc: 	callq	memcpy@PLT # Offset: 956
    000003c1: 	movq	0x10(%rsp), %r12
    000003c6: 	movq	(%rbx), %rdi
    000003c9: 	jmp	.Ltmp1084 # Offset: 969
.Ltmp1077:
    000003ce: 	movq	%rbp, %rsi
    000003d1: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000003d8: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 984
    000003dd: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000003e4: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000003eb: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003f2: 	jne	.Ltmp1085 # Offset: 1010
.Ltmp1082:
    000003f8: 	movq	-0x8(%rdx), %rax
    000003fc: 	addq	$0x200, %rax
    00000402: 	jmp	.Ltmp1085 # Offset: 1026
.Ltmp1081:
    00000407: 	testq	%r12, %r12
    0000040a: 	je	.Ltmp1084 # Offset: 1034
    00000410: 	jmp	.Ltmp1086 # Offset: 1040
.Ltmp1083:
    00000412: 	callq	__stack_chk_fail@PLT # Offset: 1042
.Ltmp1079:
    00000417: 	leaq	DATAat0x4d018(%rip), %rdi
    0000041e: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1054
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_CSE8_halfoptIf14custom_cse_divIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z20test_CSE4_add_inlineIf14custom_cse_addIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 103
  State       : disassembled
  Address     : 0x11450
  Size        : 0x36d
  MaxSize     : 0x370
  Offset      : 0x11450
  Section     : .text
  Orc Section : .local.text._Z20test_CSE4_add_inlineIf14custom_cse_addIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0102:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rdx, %rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movss	%xmm0, 0xc(%rsp)
    00000021: 	movq	%fs:0x28, %rax
    0000002a: 	movq	%rax, 0x18(%rsp)
    0000002f: 	xorl	%eax, %eax
    00000031: 	callq	clock@PLT # Offset: 49
    00000036: 	movl	iterations(%rip), %edx
    0000003c: 	movss	0xc(%rsp), %xmm4
    00000042: 	movq	%rax, start_time(%rip)
    00000049: 	testl	%edx, %edx
    0000004b: 	jle	.Ltmp1087 # Offset: 75
    00000051: 	leal	-0x2(%r14), %eax
    00000055: 	movss	(%r13), %xmm5
    0000005b: 	movss	0x4(%r13), %xmm6
    00000061: 	xorl	%r12d, %r12d
    00000064: 	movsd	DATAat0x4d620(%rip), %xmm9
    0000006d: 	leaq	0x8(%r13,%rax,4), %rbx
    00000072: 	movq	DATAat0x4d5e0(%rip), %xmm8
    0000007b: 	pxor	%xmm11, %xmm11
    00000080: 	movsd	DATAat0x4d628(%rip), %xmm7
    00000088: 	leaq	DATAat0x4d004(%rip), %r15
    0000008f: 	movss	DATAat0x4d5d0(%rip), %xmm10
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1092:
    000000a0: 	movaps	%xmm5, %xmm12
    000000a4: 	movaps	%xmm5, %xmm0
    000000a7: 	movaps	%xmm6, %xmm2
    000000aa: 	addss	%xmm6, %xmm12
    000000af: 	movaps	%xmm5, %xmm3
    000000b2: 	addss	%xmm4, %xmm12
    000000b7: 	addss	%xmm12, %xmm0
    000000bc: 	addss	%xmm12, %xmm2
    000000c1: 	addss	%xmm12, %xmm0
    000000c6: 	addss	%xmm12, %xmm2
    000000cb: 	movaps	%xmm0, %xmm1
    000000ce: 	addss	%xmm11, %xmm1
    000000d3: 	subss	%xmm2, %xmm1
    000000d7: 	addss	%xmm0, %xmm1
    000000db: 	subss	%xmm2, %xmm1
    000000df: 	addss	%xmm0, %xmm1
    000000e3: 	subss	%xmm2, %xmm1
    000000e7: 	addss	%xmm1, %xmm0
    000000eb: 	subss	%xmm2, %xmm0
    000000ef: 	cmpl	$0x1, %r14d
    000000f3: 	jle	.Ltmp1088 # Offset: 243
    000000f5: 	leaq	0x4(%r13), %rax
    000000f9: 	nopl	(%rax) # Size: 7
.Ltmp1089:
    00000100: 	movaps	%xmm3, %xmm1
    00000103: 	movss	(%rax), %xmm3
    00000107: 	addq	$0x4, %rax
    0000010b: 	movaps	%xmm3, %xmm12
    0000010f: 	movaps	%xmm3, %xmm2
    00000112: 	addss	%xmm1, %xmm12
    00000117: 	addss	%xmm4, %xmm12
    0000011c: 	addss	%xmm12, %xmm1
    00000121: 	addss	%xmm12, %xmm2
    00000126: 	addss	%xmm12, %xmm1
    0000012b: 	addss	%xmm12, %xmm2
    00000130: 	addss	%xmm1, %xmm0
    00000134: 	subss	%xmm2, %xmm0
    00000138: 	addss	%xmm1, %xmm0
    0000013c: 	subss	%xmm2, %xmm0
    00000140: 	addss	%xmm1, %xmm0
    00000144: 	subss	%xmm2, %xmm0
    00000148: 	addss	%xmm1, %xmm0
    0000014c: 	subss	%xmm2, %xmm0
    00000150: 	cmpq	%rax, %rbx
    00000153: 	jne	.Ltmp1089 # Offset: 339
.Ltmp1088:
    00000155: 	movaps	%xmm0, %xmm1
    00000158: 	andps	%xmm10, %xmm1
    0000015c: 	cvtss2sd	%xmm1, %xmm1
    00000160: 	comisd	%xmm9, %xmm1
    00000165: 	jbe	.Ltmp1090 # Offset: 357
    00000167: 	divss	%xmm0, %xmm0
.Ltmp1090:
    0000016b: 	cvtss2sd	%xmm0, %xmm0
    0000016f: 	andpd	%xmm8, %xmm0
    00000174: 	comisd	%xmm0, %xmm7
    00000178: 	jbe	.Ltmp1091 # Offset: 376
    0000017e: 	addl	$0x1, %r12d
    00000182: 	cmpl	%edx, %r12d
    00000185: 	jl	.Ltmp1092 # Offset: 389
.Ltmp1087:
    0000018b: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000192: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000199: 	subq	$0x20, %rax
    0000019d: 	cmpq	%rax, %rbx
    000001a0: 	je	.Ltmp1093 # Offset: 416
    000001a6: 	leaq	0x10(%rbx), %rdi
    000001aa: 	movq	0x8(%rbp), %r12
    000001ae: 	movq	%rdi, (%rbx)
    000001b1: 	movq	(%rbp), %r13
    000001b5: 	movq	%r13, %rax
    000001b8: 	addq	%r12, %rax
    000001bb: 	je	.Ltmp1094 # Offset: 443
    000001bd: 	testq	%r13, %r13
    000001c0: 	je	.Ltmp1095 # Offset: 448
.Ltmp1094:
    000001c6: 	movq	%r12, 0x10(%rsp)
    000001cb: 	cmpq	$0xf, %r12
    000001cf: 	ja	.Ltmp1096 # Offset: 463
    000001d5: 	cmpq	$0x1, %r12
    000001d9: 	jne	.Ltmp1097 # Offset: 473
    000001df: 	movzbl	(%r13), %eax
    000001e4: 	movb	%al, 0x10(%rbx)
.Ltmp1100:
    000001e7: 	movq	%r12, 0x8(%rbx)
    000001eb: 	movb	$0x0, (%rdi,%r12)
    000001f0: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001f7: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001fe: 	addq	$0x20, %rax
    00000202: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000209: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000210: 	je	.Ltmp1098 # Offset: 528
.Ltmp1101:
    00000216: 	movq	-0x20(%rax), %rbp
    0000021a: 	callq	clock@PLT # Offset: 538
    0000021f: 	movq	%rax, end_time(%rip)
    00000226: 	movq	0x18(%rsp), %rdx
    0000022b: 	subq	%fs:0x28, %rdx
    00000234: 	jne	.Ltmp1099 # Offset: 564
    0000023a: 	subq	start_time(%rip), %rax
    00000241: 	pxor	%xmm0, %xmm0
    00000245: 	movq	%rbp, %rdi
    00000248: 	cvtsi2sd	%rax, %xmm0
    0000024d: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000255: 	addq	$0x28, %rsp
    00000259: 	popq	%rbx
    0000025a: 	popq	%rbp
    0000025b: 	popq	%r12
    0000025d: 	popq	%r13
    0000025f: 	popq	%r14
    00000261: 	popq	%r15
    00000263: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 611
    00000268: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1091:
    00000270: 	movq	(%rbp), %rdx
    00000274: 	movq	%r15, %rsi
    00000277: 	movl	$0x1, %edi
    0000027c: 	xorl	%eax, %eax
    0000027e: 	movss	%xmm4, 0xc(%rsp)
    00000284: 	addl	$0x1, %r12d
    00000288: 	callq	__printf_chk@PLT # Offset: 648
    0000028d: 	movl	iterations(%rip), %edx
    00000293: 	cmpl	%edx, %r12d
    00000296: 	jge	.Ltmp1087 # Offset: 662
    0000029c: 	movq	DATAat0x4d620(%rip), %rax
    000002a3: 	movss	(%r13), %xmm5
    000002a9: 	pxor	%xmm11, %xmm11
    000002ae: 	movss	DATAat0x4d5d0(%rip), %xmm10
    000002b7: 	movss	0x4(%r13), %xmm6
    000002bd: 	movss	0xc(%rsp), %xmm4
    000002c3: 	movq	DATAat0x4d5e0(%rip), %xmm8
    000002cc: 	movq	%rax, %xmm9
    000002d1: 	movq	DATAat0x4d628(%rip), %rax
    000002d8: 	movq	%rax, %xmm7
    000002dd: 	jmp	.Ltmp1092 # Offset: 733
.Ltmp1096:
    000002e2: 	movq	%rbx, %rdi
    000002e5: 	leaq	0x10(%rsp), %rsi
    000002ea: 	xorl	%edx, %edx
    000002ec: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 748
    000002f1: 	movq	%rax, (%rbx)
    000002f4: 	movq	%rax, %rdi
    000002f7: 	movq	0x10(%rsp), %rax
    000002fc: 	movq	%rax, 0x10(%rbx)
.Ltmp1102:
    00000300: 	movq	%r12, %rdx
    00000303: 	movq	%r13, %rsi
    00000306: 	callq	memcpy@PLT # Offset: 774
    0000030b: 	movq	0x10(%rsp), %r12
    00000310: 	movq	(%rbx), %rdi
    00000313: 	jmp	.Ltmp1100 # Offset: 787
.Ltmp1093:
    00000318: 	movq	%rbp, %rsi
    0000031b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000322: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 802
    00000327: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000032e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000335: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000033c: 	jne	.Ltmp1101 # Offset: 828
.Ltmp1098:
    00000342: 	movq	-0x8(%rdx), %rax
    00000346: 	addq	$0x200, %rax
    0000034c: 	jmp	.Ltmp1101 # Offset: 844
.Ltmp1097:
    00000351: 	testq	%r12, %r12
    00000354: 	je	.Ltmp1100 # Offset: 852
    0000035a: 	jmp	.Ltmp1102 # Offset: 858
.Ltmp1099:
    0000035c: 	callq	__stack_chk_fail@PLT # Offset: 860
.Ltmp1095:
    00000361: 	leaq	DATAat0x4d018(%rip), %rdi
    00000368: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 872
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_CSE4_add_inlineIf14custom_cse_addIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSE4If14custom_cse_mixIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 104
  State       : disassembled
  Address     : 0x117c0
  Size        : 0x37d
  MaxSize     : 0x380
  Offset      : 0x117c0
  Section     : .text
  Orc Section : .local.text._Z9test_CSE4If14custom_cse_mixIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0103:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rdx, %rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movss	%xmm0, 0xc(%rsp)
    00000021: 	movq	%fs:0x28, %rax
    0000002a: 	movq	%rax, 0x18(%rsp)
    0000002f: 	xorl	%eax, %eax
    00000031: 	callq	clock@PLT # Offset: 49
    00000036: 	movl	iterations(%rip), %edx
    0000003c: 	movss	0xc(%rsp), %xmm4
    00000042: 	movq	%rax, start_time(%rip)
    00000049: 	testl	%edx, %edx
    0000004b: 	jle	.Ltmp1103 # Offset: 75
    00000051: 	leal	-0x2(%r14), %eax
    00000055: 	movss	(%r13), %xmm5
    0000005b: 	movss	0x4(%r13), %xmm6
    00000061: 	xorl	%r12d, %r12d
    00000064: 	movsd	DATAat0x4d620(%rip), %xmm9
    0000006d: 	leaq	0x8(%r13,%rax,4), %rbx
    00000072: 	movq	DATAat0x4d5e0(%rip), %xmm8
    0000007b: 	pxor	%xmm11, %xmm11
    00000080: 	movsd	DATAat0x4d628(%rip), %xmm7
    00000088: 	leaq	DATAat0x4d004(%rip), %r15
    0000008f: 	movss	DATAat0x4d5d0(%rip), %xmm10
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1108:
    000000a0: 	movaps	%xmm5, %xmm0
    000000a3: 	movaps	%xmm5, %xmm12
    000000a7: 	movaps	%xmm6, %xmm2
    000000aa: 	divss	%xmm4, %xmm0
    000000ae: 	subss	%xmm6, %xmm12
    000000b3: 	movaps	%xmm5, %xmm3
    000000b6: 	mulss	%xmm4, %xmm12
    000000bb: 	addss	%xmm0, %xmm12
    000000c0: 	movaps	%xmm5, %xmm0
    000000c3: 	addss	%xmm12, %xmm0
    000000c8: 	addss	%xmm12, %xmm2
    000000cd: 	addss	%xmm12, %xmm0
    000000d2: 	addss	%xmm12, %xmm2
    000000d7: 	movaps	%xmm0, %xmm1
    000000da: 	addss	%xmm11, %xmm1
    000000df: 	subss	%xmm2, %xmm1
    000000e3: 	addss	%xmm0, %xmm1
    000000e7: 	subss	%xmm2, %xmm1
    000000eb: 	addss	%xmm0, %xmm1
    000000ef: 	subss	%xmm2, %xmm1
    000000f3: 	addss	%xmm1, %xmm0
    000000f7: 	subss	%xmm2, %xmm0
    000000fb: 	cmpl	$0x1, %r14d
    000000ff: 	jle	.Ltmp1104 # Offset: 255
    00000101: 	leaq	0x4(%r13), %rax
    00000105: 	nopl	(%rax) # Size: 3
.Ltmp1105:
    00000108: 	movaps	%xmm3, %xmm1
    0000010b: 	movss	(%rax), %xmm3
    0000010f: 	addq	$0x4, %rax
    00000113: 	movaps	%xmm1, %xmm2
    00000116: 	movaps	%xmm1, %xmm12
    0000011a: 	divss	%xmm4, %xmm2
    0000011e: 	subss	%xmm3, %xmm12
    00000123: 	mulss	%xmm4, %xmm12
    00000128: 	addss	%xmm2, %xmm12
    0000012d: 	movaps	%xmm3, %xmm2
    00000130: 	addss	%xmm12, %xmm1
    00000135: 	addss	%xmm12, %xmm2
    0000013a: 	addss	%xmm12, %xmm1
    0000013f: 	addss	%xmm12, %xmm2
    00000144: 	addss	%xmm1, %xmm0
    00000148: 	subss	%xmm2, %xmm0
    0000014c: 	addss	%xmm1, %xmm0
    00000150: 	subss	%xmm2, %xmm0
    00000154: 	addss	%xmm1, %xmm0
    00000158: 	subss	%xmm2, %xmm0
    0000015c: 	addss	%xmm1, %xmm0
    00000160: 	subss	%xmm2, %xmm0
    00000164: 	cmpq	%rax, %rbx
    00000167: 	jne	.Ltmp1105 # Offset: 359
.Ltmp1104:
    00000169: 	movaps	%xmm0, %xmm1
    0000016c: 	andps	%xmm10, %xmm1
    00000170: 	cvtss2sd	%xmm1, %xmm1
    00000174: 	comisd	%xmm9, %xmm1
    00000179: 	jbe	.Ltmp1106 # Offset: 377
    0000017b: 	divss	%xmm0, %xmm0
.Ltmp1106:
    0000017f: 	cvtss2sd	%xmm0, %xmm0
    00000183: 	andpd	%xmm8, %xmm0
    00000188: 	comisd	%xmm0, %xmm7
    0000018c: 	jbe	.Ltmp1107 # Offset: 396
    00000192: 	addl	$0x1, %r12d
    00000196: 	cmpl	%edx, %r12d
    00000199: 	jl	.Ltmp1108 # Offset: 409
.Ltmp1103:
    0000019f: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001a6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001ad: 	subq	$0x20, %rax
    000001b1: 	cmpq	%rax, %rbx
    000001b4: 	je	.Ltmp1109 # Offset: 436
    000001ba: 	leaq	0x10(%rbx), %rdi
    000001be: 	movq	0x8(%rbp), %r12
    000001c2: 	movq	%rdi, (%rbx)
    000001c5: 	movq	(%rbp), %r13
    000001c9: 	movq	%r13, %rax
    000001cc: 	addq	%r12, %rax
    000001cf: 	je	.Ltmp1110 # Offset: 463
    000001d1: 	testq	%r13, %r13
    000001d4: 	je	.Ltmp1111 # Offset: 468
.Ltmp1110:
    000001da: 	movq	%r12, 0x10(%rsp)
    000001df: 	cmpq	$0xf, %r12
    000001e3: 	ja	.Ltmp1112 # Offset: 483
    000001e9: 	cmpq	$0x1, %r12
    000001ed: 	jne	.Ltmp1113 # Offset: 493
    000001f3: 	movzbl	(%r13), %eax
    000001f8: 	movb	%al, 0x10(%rbx)
.Ltmp1116:
    000001fb: 	movq	%r12, 0x8(%rbx)
    000001ff: 	movb	$0x0, (%rdi,%r12)
    00000204: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000020b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000212: 	addq	$0x20, %rax
    00000216: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000021d: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000224: 	je	.Ltmp1114 # Offset: 548
.Ltmp1117:
    0000022a: 	movq	-0x20(%rax), %rbp
    0000022e: 	callq	clock@PLT # Offset: 558
    00000233: 	movq	%rax, end_time(%rip)
    0000023a: 	movq	0x18(%rsp), %rdx
    0000023f: 	subq	%fs:0x28, %rdx
    00000248: 	jne	.Ltmp1115 # Offset: 584
    0000024e: 	subq	start_time(%rip), %rax
    00000255: 	pxor	%xmm0, %xmm0
    00000259: 	movq	%rbp, %rdi
    0000025c: 	cvtsi2sd	%rax, %xmm0
    00000261: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000269: 	addq	$0x28, %rsp
    0000026d: 	popq	%rbx
    0000026e: 	popq	%rbp
    0000026f: 	popq	%r12
    00000271: 	popq	%r13
    00000273: 	popq	%r14
    00000275: 	popq	%r15
    00000277: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 631
    0000027c: 	nopl	(%rax) # Size: 4
.Ltmp1107:
    00000280: 	movq	(%rbp), %rdx
    00000284: 	movq	%r15, %rsi
    00000287: 	movl	$0x1, %edi
    0000028c: 	xorl	%eax, %eax
    0000028e: 	movss	%xmm4, 0xc(%rsp)
    00000294: 	addl	$0x1, %r12d
    00000298: 	callq	__printf_chk@PLT # Offset: 664
    0000029d: 	movl	iterations(%rip), %edx
    000002a3: 	cmpl	%edx, %r12d
    000002a6: 	jge	.Ltmp1103 # Offset: 678
    000002ac: 	movq	DATAat0x4d620(%rip), %rax
    000002b3: 	movss	(%r13), %xmm5
    000002b9: 	pxor	%xmm11, %xmm11
    000002be: 	movss	DATAat0x4d5d0(%rip), %xmm10
    000002c7: 	movss	0x4(%r13), %xmm6
    000002cd: 	movss	0xc(%rsp), %xmm4
    000002d3: 	movq	DATAat0x4d5e0(%rip), %xmm8
    000002dc: 	movq	%rax, %xmm9
    000002e1: 	movq	DATAat0x4d628(%rip), %rax
    000002e8: 	movq	%rax, %xmm7
    000002ed: 	jmp	.Ltmp1108 # Offset: 749
.Ltmp1112:
    000002f2: 	movq	%rbx, %rdi
    000002f5: 	leaq	0x10(%rsp), %rsi
    000002fa: 	xorl	%edx, %edx
    000002fc: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 764
    00000301: 	movq	%rax, (%rbx)
    00000304: 	movq	%rax, %rdi
    00000307: 	movq	0x10(%rsp), %rax
    0000030c: 	movq	%rax, 0x10(%rbx)
.Ltmp1118:
    00000310: 	movq	%r12, %rdx
    00000313: 	movq	%r13, %rsi
    00000316: 	callq	memcpy@PLT # Offset: 790
    0000031b: 	movq	0x10(%rsp), %r12
    00000320: 	movq	(%rbx), %rdi
    00000323: 	jmp	.Ltmp1116 # Offset: 803
.Ltmp1109:
    00000328: 	movq	%rbp, %rsi
    0000032b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000332: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 818
    00000337: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000033e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000345: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000034c: 	jne	.Ltmp1117 # Offset: 844
.Ltmp1114:
    00000352: 	movq	-0x8(%rdx), %rax
    00000356: 	addq	$0x200, %rax
    0000035c: 	jmp	.Ltmp1117 # Offset: 860
.Ltmp1113:
    00000361: 	testq	%r12, %r12
    00000364: 	je	.Ltmp1116 # Offset: 868
    0000036a: 	jmp	.Ltmp1118 # Offset: 874
.Ltmp1115:
    0000036c: 	callq	__stack_chk_fail@PLT # Offset: 876
.Ltmp1111:
    00000371: 	leaq	DATAat0x4d018(%rip), %rdi
    00000378: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 888
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE4If14custom_cse_mixIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z17test_CSE8_halfoptIf14custom_cse_mixIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 105
  State       : disassembled
  Address     : 0x11b40
  Size        : 0x463
  MaxSize     : 0x470
  Offset      : 0x11b40
  Section     : .text
  Orc Section : .local.text._Z17test_CSE8_halfoptIf14custom_cse_mixIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0104:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movl	%esi, %r12d
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdx, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movss	%xmm0, 0xc(%rsp)
    00000021: 	movq	%fs:0x28, %rax
    0000002a: 	movq	%rax, 0x18(%rsp)
    0000002f: 	xorl	%eax, %eax
    00000031: 	callq	clock@PLT # Offset: 49
    00000036: 	movl	iterations(%rip), %edx
    0000003c: 	movss	0xc(%rsp), %xmm2
    00000042: 	movq	%rax, start_time(%rip)
    00000049: 	testl	%edx, %edx
    0000004b: 	jle	.Ltmp1119 # Offset: 75
    00000051: 	leal	-0x4(%r12), %eax
    00000056: 	movss	0x4(%rbx), %xmm4
    0000005b: 	movss	(%rbx), %xmm3
    0000005f: 	xorl	%r13d, %r13d
    00000062: 	shrl	%eax
    00000064: 	movsd	DATAat0x4d620(%rip), %xmm7
    0000006c: 	movq	DATAat0x4d5e0(%rip), %xmm6
    00000074: 	pxor	%xmm9, %xmm9
    00000079: 	movsd	DATAat0x4d628(%rip), %xmm5
    00000081: 	leaq	0x5(%rax,%rax), %r14
    00000086: 	movss	DATAat0x4d5d0(%rip), %xmm8
    0000008f: 	leaq	DATAat0x4d004(%rip), %r15
    00000096: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1127:
    000000a0: 	movaps	%xmm3, %xmm12
    000000a4: 	movaps	%xmm3, %xmm1
    000000a7: 	movaps	%xmm3, %xmm0
    000000aa: 	divss	%xmm2, %xmm12
    000000af: 	subss	%xmm4, %xmm1
    000000b3: 	movaps	%xmm3, %xmm10
    000000b7: 	mulss	%xmm2, %xmm1
    000000bb: 	addss	%xmm12, %xmm1
    000000c0: 	addss	%xmm1, %xmm1
    000000c4: 	addss	%xmm1, %xmm0
    000000c8: 	addss	%xmm4, %xmm1
    000000cc: 	subss	%xmm1, %xmm0
    000000d0: 	movaps	%xmm0, %xmm1
    000000d3: 	addss	%xmm9, %xmm1
    000000d8: 	addss	%xmm0, %xmm1
    000000dc: 	addss	%xmm0, %xmm1
    000000e0: 	addss	%xmm0, %xmm1
    000000e4: 	addss	%xmm0, %xmm1
    000000e8: 	addss	%xmm0, %xmm1
    000000ec: 	addss	%xmm0, %xmm1
    000000f0: 	addss	%xmm1, %xmm0
    000000f4: 	cmpl	$0x1, %r12d
    000000f8: 	jle	.Ltmp1120 # Offset: 248
    000000fe: 	cmpl	$0x3, %r12d
    00000102: 	jle	.Ltmp1121 # Offset: 258
    00000108: 	movl	$0x3, %ecx
    0000010d: 	jmp	.Ltmp1122 # Offset: 269
    0000010f: 	nop # Size: 1
.Ltmp1123:
    00000110: 	movaps	%xmm10, %xmm12
    00000114: 	divss	%xmm2, %xmm12
.Ltmp1122:
    00000119: 	movss	-0x8(%rbx,%rcx,4), %xmm11
    00000120: 	movaps	%xmm10, %xmm1
    00000124: 	movslq	%ecx, %rax
    00000127: 	subss	%xmm11, %xmm1
    0000012c: 	mulss	%xmm2, %xmm1
    00000130: 	addss	%xmm1, %xmm12
    00000135: 	movaps	%xmm10, %xmm1
    00000139: 	movss	-0x4(%rbx,%rcx,4), %xmm10
    00000140: 	addq	$0x2, %rcx
    00000144: 	addss	%xmm12, %xmm12
    00000149: 	addss	%xmm12, %xmm1
    0000014e: 	addss	%xmm11, %xmm12
    00000153: 	subss	%xmm12, %xmm1
    00000158: 	movaps	%xmm11, %xmm12
    0000015c: 	divss	%xmm2, %xmm12
    00000161: 	addss	%xmm1, %xmm0
    00000165: 	addss	%xmm1, %xmm0
    00000169: 	addss	%xmm1, %xmm0
    0000016d: 	addss	%xmm1, %xmm0
    00000171: 	addss	%xmm1, %xmm0
    00000175: 	addss	%xmm1, %xmm0
    00000179: 	addss	%xmm1, %xmm0
    0000017d: 	addss	%xmm1, %xmm0
    00000181: 	movaps	%xmm11, %xmm1
    00000185: 	subss	%xmm10, %xmm1
    0000018a: 	mulss	%xmm2, %xmm1
    0000018e: 	addss	%xmm12, %xmm1
    00000193: 	addss	%xmm1, %xmm1
    00000197: 	addss	%xmm1, %xmm11
    0000019c: 	addss	%xmm10, %xmm1
    000001a1: 	subss	%xmm1, %xmm11
    000001a6: 	addss	%xmm11, %xmm0
    000001ab: 	addss	%xmm11, %xmm0
    000001b0: 	addss	%xmm11, %xmm0
    000001b5: 	addss	%xmm11, %xmm0
    000001ba: 	addss	%xmm11, %xmm0
    000001bf: 	addss	%xmm11, %xmm0
    000001c4: 	addss	%xmm11, %xmm0
    000001c9: 	addss	%xmm11, %xmm0
    000001ce: 	cmpq	%rcx, %r14
    000001d1: 	jne	.Ltmp1123 # Offset: 465
    000001d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1124:
    000001e0: 	movss	-0x4(%rbx,%rax,4), %xmm1
    000001e6: 	movss	(%rbx,%rax,4), %xmm11
    000001ec: 	addq	$0x1, %rax
    000001f0: 	movaps	%xmm1, %xmm12
    000001f4: 	movaps	%xmm1, %xmm10
    000001f8: 	divss	%xmm2, %xmm12
    000001fd: 	subss	%xmm11, %xmm10
    00000202: 	mulss	%xmm2, %xmm10
    00000207: 	addss	%xmm12, %xmm10
    0000020c: 	addss	%xmm10, %xmm10
    00000211: 	addss	%xmm10, %xmm1
    00000216: 	addss	%xmm11, %xmm10
    0000021b: 	subss	%xmm10, %xmm1
    00000220: 	addss	%xmm1, %xmm0
    00000224: 	addss	%xmm1, %xmm0
    00000228: 	addss	%xmm1, %xmm0
    0000022c: 	addss	%xmm1, %xmm0
    00000230: 	addss	%xmm1, %xmm0
    00000234: 	addss	%xmm1, %xmm0
    00000238: 	addss	%xmm1, %xmm0
    0000023c: 	addss	%xmm1, %xmm0
    00000240: 	cmpl	%eax, %r12d
    00000243: 	jg	.Ltmp1124 # Offset: 579
.Ltmp1120:
    00000245: 	movaps	%xmm0, %xmm1
    00000248: 	andps	%xmm8, %xmm1
    0000024c: 	cvtss2sd	%xmm1, %xmm1
    00000250: 	comisd	%xmm7, %xmm1
    00000254: 	jbe	.Ltmp1125 # Offset: 596
    00000256: 	divss	%xmm0, %xmm0
.Ltmp1125:
    0000025a: 	cvtss2sd	%xmm0, %xmm0
    0000025e: 	andpd	%xmm6, %xmm0
    00000262: 	comisd	%xmm0, %xmm5
    00000266: 	jbe	.Ltmp1126 # Offset: 614
    0000026c: 	addl	$0x1, %r13d
    00000270: 	cmpl	%edx, %r13d
    00000273: 	jl	.Ltmp1127 # Offset: 627
.Ltmp1119:
    00000279: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000280: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000287: 	subq	$0x20, %rax
    0000028b: 	cmpq	%rax, %rbx
    0000028e: 	je	.Ltmp1128 # Offset: 654
    00000294: 	leaq	0x10(%rbx), %rdi
    00000298: 	movq	0x8(%rbp), %r12
    0000029c: 	movq	%rdi, (%rbx)
    0000029f: 	movq	(%rbp), %r13
    000002a3: 	movq	%r13, %rax
    000002a6: 	addq	%r12, %rax
    000002a9: 	je	.Ltmp1129 # Offset: 681
    000002ab: 	testq	%r13, %r13
    000002ae: 	je	.Ltmp1130 # Offset: 686
.Ltmp1129:
    000002b4: 	movq	%r12, 0x10(%rsp)
    000002b9: 	cmpq	$0xf, %r12
    000002bd: 	ja	.Ltmp1131 # Offset: 701
    000002c3: 	cmpq	$0x1, %r12
    000002c7: 	jne	.Ltmp1132 # Offset: 711
    000002cd: 	movzbl	(%r13), %eax
    000002d2: 	movb	%al, 0x10(%rbx)
.Ltmp1135:
    000002d5: 	movq	%r12, 0x8(%rbx)
    000002d9: 	movb	$0x0, (%rdi,%r12)
    000002de: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002e5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002ec: 	addq	$0x20, %rax
    000002f0: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002f7: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000002fe: 	je	.Ltmp1133 # Offset: 766
.Ltmp1136:
    00000304: 	movq	-0x20(%rax), %rbp
    00000308: 	callq	clock@PLT # Offset: 776
    0000030d: 	movq	%rax, end_time(%rip)
    00000314: 	movq	0x18(%rsp), %rdx
    00000319: 	subq	%fs:0x28, %rdx
    00000322: 	jne	.Ltmp1134 # Offset: 802
    00000328: 	subq	start_time(%rip), %rax
    0000032f: 	pxor	%xmm0, %xmm0
    00000333: 	movq	%rbp, %rdi
    00000336: 	cvtsi2sd	%rax, %xmm0
    0000033b: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000343: 	addq	$0x28, %rsp
    00000347: 	popq	%rbx
    00000348: 	popq	%rbp
    00000349: 	popq	%r12
    0000034b: 	popq	%r13
    0000034d: 	popq	%r14
    0000034f: 	popq	%r15
    00000351: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 849
    00000356: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1126:
    00000360: 	movq	(%rbp), %rdx
    00000364: 	movq	%r15, %rsi
    00000367: 	movl	$0x1, %edi
    0000036c: 	xorl	%eax, %eax
    0000036e: 	movss	%xmm2, 0xc(%rsp)
    00000374: 	addl	$0x1, %r13d
    00000378: 	callq	__printf_chk@PLT # Offset: 888
    0000037d: 	movl	iterations(%rip), %edx
    00000383: 	cmpl	%r13d, %edx
    00000386: 	jle	.Ltmp1119 # Offset: 902
    0000038c: 	movq	DATAat0x4d620(%rip), %rax
    00000393: 	movss	0x4(%rbx), %xmm4
    00000398: 	pxor	%xmm9, %xmm9
    0000039d: 	movss	DATAat0x4d5d0(%rip), %xmm8
    000003a6: 	movss	(%rbx), %xmm3
    000003aa: 	movss	0xc(%rsp), %xmm2
    000003b0: 	movq	%rax, %xmm7
    000003b5: 	movq	DATAat0x4d628(%rip), %rax
    000003bc: 	movq	DATAat0x4d5e0(%rip), %xmm6
    000003c4: 	movq	%rax, %xmm5
    000003c9: 	jmp	.Ltmp1127 # Offset: 969
.Ltmp1121:
    000003ce: 	movl	$0x1, %eax
    000003d3: 	jmp	.Ltmp1124 # Offset: 979
.Ltmp1131:
    000003d8: 	movq	%rbx, %rdi
    000003db: 	leaq	0x10(%rsp), %rsi
    000003e0: 	xorl	%edx, %edx
    000003e2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 994
    000003e7: 	movq	%rax, (%rbx)
    000003ea: 	movq	%rax, %rdi
    000003ed: 	movq	0x10(%rsp), %rax
    000003f2: 	movq	%rax, 0x10(%rbx)
.Ltmp1137:
    000003f6: 	movq	%r12, %rdx
    000003f9: 	movq	%r13, %rsi
    000003fc: 	callq	memcpy@PLT # Offset: 1020
    00000401: 	movq	0x10(%rsp), %r12
    00000406: 	movq	(%rbx), %rdi
    00000409: 	jmp	.Ltmp1135 # Offset: 1033
.Ltmp1128:
    0000040e: 	movq	%rbp, %rsi
    00000411: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000418: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1048
    0000041d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000424: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000042b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000432: 	jne	.Ltmp1136 # Offset: 1074
.Ltmp1133:
    00000438: 	movq	-0x8(%rdx), %rax
    0000043c: 	addq	$0x200, %rax
    00000442: 	jmp	.Ltmp1136 # Offset: 1090
.Ltmp1132:
    00000447: 	testq	%r12, %r12
    0000044a: 	je	.Ltmp1135 # Offset: 1098
    00000450: 	jmp	.Ltmp1137 # Offset: 1104
.Ltmp1134:
    00000452: 	callq	__stack_chk_fail@PLT # Offset: 1106
.Ltmp1130:
    00000457: 	leaq	DATAat0x4d018(%rip), %rdi
    0000045e: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1118
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_CSE8_halfoptIf14custom_cse_mixIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z28test_CSE8_add_inline_flippedIa14custom_cse_addIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z28test_CSE8_add_inline_flippedIa14custom_cse_addIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z28test_CSE8_add_inline_flippedIa14custom_cse_addIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/simple_types_cse.cpp/1
  Number      : 106
  State       : disassembled
  Address     : 0x11fb0
  Size        : 0x60b
  MaxSize     : 0x610
  Offset      : 0x11fb0
  Section     : .text
  Orc Section : .local.text._Z28test_CSE8_add_inline_flippedIa14custom_cse_addIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0105:
    00000000: 	pushq	%r15
    00000002: 	movl	%esi, %r15d
    00000005: 	pushq	%r14
    00000007: 	pushq	%r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x68, %rsp
    00000011: 	movq	%rdi, 0x28(%rsp)
    00000016: 	movq	%rdx, 0x40(%rsp)
    0000001b: 	movq	%fs:0x28, %rax
    00000024: 	movq	%rax, 0x58(%rsp)
    00000029: 	xorl	%eax, %eax
    0000002b: 	callq	clock@PLT # Offset: 43
    00000030: 	movq	%rax, start_time(%rip)
    00000037: 	movl	iterations(%rip), %eax
    0000003d: 	movl	%eax, 0x34(%rsp)
    00000041: 	testl	%eax, %eax
    00000043: 	jle	.Ltmp1138 # Offset: 67
    00000049: 	movq	0x28(%rsp), %rax
    0000004e: 	movd	%r15d, %xmm2
    00000053: 	movl	$0x0, 0x24(%rsp)
    0000005b: 	pxor	%xmm5, %xmm5
    0000005f: 	punpcklbw	%xmm2, %xmm2
    00000063: 	movq	0x1f30(%rax), %xmm4
    0000006b: 	movzbl	(%rax), %ebx
    0000006e: 	punpcklwd	%xmm2, %xmm2
    00000072: 	movq	0x1f31(%rax), %xmm3
    0000007a: 	pshufd	$0x0, %xmm2, %xmm2
    0000007f: 	movb	%bl, 0x33(%rsp)
    00000083: 	movzbl	0x1(%rax), %ebx
    00000087: 	movb	%bl, 0x32(%rsp)
    0000008b: 	leaq	0x1f30(%rax), %rbx
    00000092: 	movq	%rbx, 0x38(%rsp)
    00000097: 	movzbl	%r15b, %ebx
    0000009b: 	movw	%bx, 0x30(%rsp)
    000000a0: 	movzbl	0x1f38(%rax), %ebx
    000000a7: 	movb	%bl, 0x20(%rsp)
    000000ab: 	movzbl	0x1f39(%rax), %ebx
    000000b2: 	movb	%bl, 0xc(%rsp)
    000000b6: 	movzbl	0x1f3a(%rax), %ebx
    000000bd: 	movb	%bl, 0xa(%rsp)
    000000c1: 	movzbl	0x1f3b(%rax), %ebx
    000000c8: 	movb	%bl, 0xd(%rsp)
    000000cc: 	movzbl	0x1f3c(%rax), %ebx
    000000d3: 	movb	%bl, 0xe(%rsp)
    000000d7: 	movzbl	0x1f3d(%rax), %ebx
    000000de: 	movb	%bl, 0xf(%rsp)
    000000e2: 	movzbl	0x1f3e(%rax), %ebx
    000000e9: 	movzbl	0x1f3f(%rax), %eax
    000000f0: 	movb	%bl, 0xb(%rsp)
    000000f4: 	movb	%al, 0x21(%rsp)
    000000f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1141:
    00000100: 	movzbl	0x33(%rsp), %ebx
    00000105: 	movzbl	0x32(%rsp), %edi
    0000010a: 	pxor	%xmm6, %xmm6
    0000010e: 	movl	%ebx, %edx
    00000110: 	addl	%edi, %edx
    00000112: 	addl	%r15d, %edx
    00000115: 	addl	%edx, %edx
    00000117: 	leal	(%rdi,%rdx), %ecx
    0000011a: 	addl	%ebx, %edx
    0000011c: 	subl	%edi, %ebx
    0000011e: 	leal	(,%rdx,8), %eax
    00000125: 	subl	%edx, %eax
    00000127: 	movl	%ebx, %edx
    00000129: 	addl	%edx, %eax
    0000012b: 	movq	0x28(%rsp), %rdx
    00000130: 	subl	%ecx, %eax
    00000132: 	subl	%ecx, %eax
    00000134: 	subl	%ecx, %eax
    00000136: 	subl	%ecx, %eax
    00000138: 	subl	%ecx, %eax
    0000013a: 	subl	%ecx, %eax
    0000013c: 	subl	%ecx, %eax
    0000013e: 	movq	0x38(%rsp), %rcx
    00000143: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1139:
    00000148: 	movdqu	(%rdx), %xmm7
    0000014c: 	movdqu	0x1(%rdx), %xmm0
    00000151: 	addq	$0x10, %rdx
    00000155: 	movdqu	-0xf(%rdx), %xmm1
    0000015a: 	movdqu	-0x10(%rdx), %xmm8
    00000160: 	paddb	%xmm7, %xmm0
    00000164: 	paddb	%xmm2, %xmm0
    00000168: 	paddb	%xmm0, %xmm0
    0000016c: 	paddb	%xmm0, %xmm1
    00000170: 	paddb	%xmm8, %xmm0
    00000175: 	paddb	%xmm0, %xmm0
    00000179: 	movdqa	%xmm1, %xmm7
    0000017d: 	paddb	%xmm0, %xmm0
    00000181: 	paddb	%xmm1, %xmm7
    00000185: 	paddb	%xmm0, %xmm0
    00000189: 	psubb	%xmm7, %xmm6
    0000018d: 	psubb	%xmm1, %xmm0
    00000191: 	paddb	%xmm7, %xmm1
    00000195: 	psubb	%xmm7, %xmm0
    00000199: 	paddb	%xmm6, %xmm0
    0000019d: 	movdqa	%xmm0, %xmm6
    000001a1: 	psubb	%xmm1, %xmm6
    000001a5: 	cmpq	%rdx, %rcx
    000001a8: 	jne	.Ltmp1139 # Offset: 424
    000001aa: 	movdqa	%xmm6, %xmm0
    000001ae: 	movzwl	0x30(%rsp), %ebx
    000001b3: 	movzbl	0xf(%rsp), %r10d
    000001b9: 	psrldq	$0x8, %xmm0
    000001be: 	movzbl	0x21(%rsp), %r14d
    000001c4: 	paddb	%xmm0, %xmm6
    000001c8: 	movdqa	%xmm3, %xmm0
    000001cc: 	movl	%r10d, %r9d
    000001cf: 	psadbw	%xmm5, %xmm6
    000001d3: 	paddb	%xmm4, %xmm0
    000001d7: 	movd	%xmm6, %edx
    000001db: 	addl	%edx, %eax
    000001dd: 	movzbl	0xe(%rsp), %edx
    000001e2: 	movb	%al, 0x22(%rsp)
    000001e6: 	movl	%ebx, %eax
    000001e8: 	shll	$0x8, %eax
    000001eb: 	orl	%ebx, %eax
    000001ed: 	movzbl	0xa(%rsp), %ebx
    000001f2: 	movd	%eax, %xmm7
    000001f6: 	pshuflw	$0x0, %xmm7, %xmm1
    000001fb: 	paddb	%xmm1, %xmm0
    000001ff: 	paddb	%xmm0, %xmm0
    00000203: 	movdqa	%xmm0, %xmm1
    00000207: 	paddb	%xmm3, %xmm0
    0000020b: 	paddb	%xmm4, %xmm1
    0000020f: 	movdqa	%xmm0, %xmm6
    00000213: 	paddb	%xmm1, %xmm1
    00000217: 	paddb	%xmm0, %xmm6
    0000021b: 	paddb	%xmm1, %xmm1
    0000021f: 	paddb	%xmm1, %xmm1
    00000223: 	psubb	%xmm0, %xmm1
    00000227: 	paddb	%xmm6, %xmm0
    0000022b: 	paddb	%xmm6, %xmm6
    0000022f: 	paddb	%xmm6, %xmm0
    00000233: 	psubb	%xmm0, %xmm1
    00000237: 	pxor	%xmm0, %xmm0
    0000023b: 	movdqa	%xmm1, %xmm7
    0000023f: 	psadbw	%xmm0, %xmm7
    00000243: 	movq	%xmm7, %rax
    00000248: 	movq	%xmm7, 0x48(%rsp)
    0000024e: 	movb	%al, 0x23(%rsp)
    00000252: 	movzbl	0x20(%rsp), %eax
    00000257: 	leal	(%rax,%r15), %r8d
    0000025b: 	movzbl	0xc(%rsp), %eax
    00000260: 	addl	%eax, %r8d
    00000263: 	movl	%eax, %edi
    00000265: 	addl	%r8d, %r8d
    00000268: 	addl	%ebx, %edi
    0000026a: 	leal	(%rax,%r8), %r13d
    0000026e: 	movzbl	0xd(%rsp), %eax
    00000273: 	addl	%r15d, %edi
    00000276: 	addb	0x20(%rsp), %r8b
    0000027b: 	addl	%edi, %edi
    0000027d: 	shll	$0x3, %r8d
    00000281: 	movl	%eax, %ecx
    00000283: 	movl	%eax, %esi
    00000285: 	leal	(%rdi,%rbx), %r12d
    00000289: 	subl	%r13d, %r8d
    0000028c: 	addl	%edx, %ecx
    0000028e: 	addl	%ebx, %esi
    00000290: 	subl	%r13d, %r8d
    00000293: 	addl	%r15d, %ecx
    00000296: 	addl	%r15d, %esi
    00000299: 	subl	%r13d, %r8d
    0000029c: 	addl	%ecx, %ecx
    0000029e: 	addl	%esi, %esi
    000002a0: 	subl	%r13d, %r8d
    000002a3: 	leal	(%rcx,%rdx), %ebx
    000002a6: 	addl	%r10d, %edx
    000002a9: 	leal	(%rsi,%rax), %ebp
    000002ac: 	subl	%r13d, %r8d
    000002af: 	addl	%r15d, %edx
    000002b2: 	subl	%r13d, %r8d
    000002b5: 	addl	%edx, %edx
    000002b7: 	leal	(%r10,%rdx), %r11d
    000002bb: 	movzbl	0xb(%rsp), %r10d
    000002c1: 	addl	%r10d, %r9d
    000002c4: 	movl	%r9d, %eax
    000002c7: 	movl	%r10d, %r9d
    000002ca: 	addl	%r15d, %eax
    000002cd: 	addl	%r9d, %r14d
    000002d0: 	addl	%eax, %eax
    000002d2: 	leal	(%r9,%rax), %r10d
    000002d6: 	movl	%r14d, %r9d
    000002d9: 	movzbl	0x23(%rsp), %r14d
    000002df: 	addl	%r15d, %r9d
    000002e2: 	addl	%r9d, %r9d
    000002e5: 	movb	%r9b, 0x10(%rsp)
    000002ea: 	addb	0x21(%rsp), %r9b
    000002ef: 	subl	%r13d, %r8d
    000002f2: 	addb	0xc(%rsp), %dil
    000002f7: 	addb	0xa(%rsp), %sil
    000002fc: 	subl	%r13d, %r8d
    000002ff: 	shll	$0x3, %edi
    00000302: 	shll	$0x3, %esi
    00000305: 	addb	0xd(%rsp), %cl
    00000309: 	addb	0x22(%rsp), %r14b
    0000030e: 	subl	%r12d, %edi
    00000311: 	subl	%ebp, %esi
    00000313: 	shll	$0x3, %ecx
    00000316: 	addl	%r8d, %r14d
    00000319: 	subl	%r12d, %edi
    0000031c: 	subl	%ebp, %esi
    0000031e: 	subl	%ebx, %ecx
    00000320: 	subl	%r12d, %edi
    00000323: 	subl	%ebp, %esi
    00000325: 	subl	%ebx, %ecx
    00000327: 	subl	%r12d, %edi
    0000032a: 	subl	%ebp, %esi
    0000032c: 	subl	%ebx, %ecx
    0000032e: 	subl	%r12d, %edi
    00000331: 	subl	%ebp, %esi
    00000333: 	subl	%ebx, %ecx
    00000335: 	subl	%r12d, %edi
    00000338: 	subl	%ebp, %esi
    0000033a: 	subl	%r12d, %edi
    0000033d: 	subl	%ebp, %esi
    0000033f: 	subl	%r12d, %edi
    00000342: 	subl	%ebp, %esi
    00000344: 	addl	%r14d, %edi
    00000347: 	addl	%edi, %esi
    00000349: 	subl	%ebx, %ecx
    0000034b: 	addb	0xe(%rsp), %dl
    0000034f: 	addb	0xf(%rsp), %al
    00000353: 	shll	$0x3, %edx
    00000356: 	shll	$0x3, %eax
    00000359: 	subl	%ebx, %ecx
    0000035b: 	subl	%r11d, %edx
    0000035e: 	subl	%r10d, %eax
    00000361: 	subl	%ebx, %ecx
    00000363: 	subl	%r11d, %edx
    00000366: 	subl	%r10d, %eax
    00000369: 	subl	%ebx, %ecx
    0000036b: 	subl	%r11d, %edx
    0000036e: 	subl	%r10d, %eax
    00000371: 	addl	%esi, %ecx
    00000373: 	subl	%r11d, %edx
    00000376: 	subl	%r10d, %eax
    00000379: 	subl	%r11d, %edx
    0000037c: 	subl	%r10d, %eax
    0000037f: 	subl	%r11d, %edx
    00000382: 	subl	%r10d, %eax
    00000385: 	subl	%r11d, %edx
    00000388: 	subl	%r10d, %eax
    0000038b: 	subl	%r11d, %edx
    0000038e: 	subl	%r10d, %eax
    00000391: 	addl	%ecx, %edx
    00000393: 	addl	%edx, %eax
    00000395: 	movzbl	0x10(%rsp), %edx
    0000039a: 	addb	0xb(%rsp), %dl
    0000039e: 	shll	$0x3, %edx
    000003a1: 	subl	%r9d, %edx
    000003a4: 	subl	%r9d, %edx
    000003a7: 	subl	%r9d, %edx
    000003aa: 	subl	%r9d, %edx
    000003ad: 	subl	%r9d, %edx
    000003b0: 	subl	%r9d, %edx
    000003b3: 	subl	%r9d, %edx
    000003b6: 	subl	%r9d, %edx
    000003b9: 	addb	%al, %dl
    000003bb: 	jne	.Ltmp1140 # Offset: 955
    000003c1: 	addl	$0x1, 0x24(%rsp)
    000003c6: 	movl	0x24(%rsp), %eax
    000003ca: 	cmpl	0x34(%rsp), %eax
    000003ce: 	jl	.Ltmp1141 # Offset: 974
.Ltmp1138:
    000003d4: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000003db: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000003e2: 	subq	$0x20, %rax
    000003e6: 	cmpq	%rax, %rbx
    000003e9: 	je	.Ltmp1142 # Offset: 1001
    000003ef: 	movq	0x40(%rsp), %rax
    000003f4: 	leaq	0x10(%rbx), %rdi
    000003f8: 	movq	%rdi, (%rbx)
    000003fb: 	movq	(%rax), %rbp
    000003fe: 	movq	0x8(%rax), %r12
    00000402: 	movq	%rbp, %rax
    00000405: 	addq	%r12, %rax
    00000408: 	je	.Ltmp1143 # Offset: 1032
    0000040a: 	testq	%rbp, %rbp
    0000040d: 	je	.Ltmp1144 # Offset: 1037
.Ltmp1143:
    00000413: 	movq	%r12, 0x50(%rsp)
    00000418: 	cmpq	$0xf, %r12
    0000041c: 	ja	.Ltmp1145 # Offset: 1052
    00000422: 	cmpq	$0x1, %r12
    00000426: 	jne	.Ltmp1146 # Offset: 1062
    0000042c: 	movzbl	(%rbp), %eax
    00000430: 	movb	%al, 0x10(%rbx)
.Ltmp1149:
    00000433: 	movq	%r12, 0x8(%rbx)
    00000437: 	movb	$0x0, (%rdi,%r12)
    0000043c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000443: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000044a: 	addq	$0x20, %rax
    0000044e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000455: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000045c: 	je	.Ltmp1147 # Offset: 1116
.Ltmp1150:
    00000462: 	movq	-0x20(%rax), %rbp
    00000466: 	callq	clock@PLT # Offset: 1126
    0000046b: 	movq	%rax, end_time(%rip)
    00000472: 	movq	0x58(%rsp), %rdx
    00000477: 	subq	%fs:0x28, %rdx
    00000480: 	jne	.Ltmp1148 # Offset: 1152
    00000486: 	subq	start_time(%rip), %rax
    0000048d: 	pxor	%xmm0, %xmm0
    00000491: 	movq	%rbp, %rdi
    00000494: 	cvtsi2sd	%rax, %xmm0
    00000499: 	divsd	DATAat0x4d640(%rip), %xmm0
    000004a1: 	addq	$0x68, %rsp
    000004a5: 	popq	%rbx
    000004a6: 	popq	%rbp
    000004a7: 	popq	%r12
    000004a9: 	popq	%r13
    000004ab: 	popq	%r14
    000004ad: 	popq	%r15
    000004af: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1199
    000004b4: 	nopl	(%rax) # Size: 4
.Ltmp1140:
    000004b8: 	movq	0x40(%rsp), %rax
    000004bd: 	movl	$0x1, %edi
    000004c2: 	movaps	%xmm2, 0x10(%rsp)
    000004c7: 	leaq	DATAat0x4d004(%rip), %rsi
    000004ce: 	movq	(%rax), %rdx
    000004d1: 	xorl	%eax, %eax
    000004d3: 	callq	__printf_chk@PLT # Offset: 1235
    000004d8: 	addl	$0x1, 0x24(%rsp)
    000004dd: 	movl	iterations(%rip), %ebx
    000004e3: 	movl	0x24(%rsp), %eax
    000004e7: 	movl	%ebx, 0x34(%rsp)
    000004eb: 	cmpl	%eax, %ebx
    000004ed: 	jle	.Ltmp1138 # Offset: 1261
    000004f3: 	movq	0x28(%rsp), %rax
    000004f8: 	movdqa	0x10(%rsp), %xmm2
    000004fe: 	pxor	%xmm5, %xmm5
    00000502: 	movq	0x1f30(%rax), %xmm4
    0000050a: 	movzbl	(%rax), %ebx
    0000050d: 	movq	0x1f31(%rax), %xmm3
    00000515: 	movb	%bl, 0x33(%rsp)
    00000519: 	movzbl	0x1(%rax), %ebx
    0000051d: 	movb	%bl, 0x32(%rsp)
    00000521: 	movzbl	0x1f38(%rax), %ebx
    00000528: 	movb	%bl, 0x20(%rsp)
    0000052c: 	movzbl	0x1f39(%rax), %ebx
    00000533: 	movb	%bl, 0xc(%rsp)
    00000537: 	movzbl	0x1f3a(%rax), %ebx
    0000053e: 	movb	%bl, 0xa(%rsp)
    00000542: 	movzbl	0x1f3b(%rax), %ebx
    00000549: 	movb	%bl, 0xd(%rsp)
    0000054d: 	movzbl	0x1f3c(%rax), %ebx
    00000554: 	movb	%bl, 0xe(%rsp)
    00000558: 	movzbl	0x1f3d(%rax), %ebx
    0000055f: 	movb	%bl, 0xf(%rsp)
    00000563: 	movzbl	0x1f3e(%rax), %ebx
    0000056a: 	movzbl	0x1f3f(%rax), %eax
    00000571: 	movb	%bl, 0xb(%rsp)
    00000575: 	movb	%al, 0x21(%rsp)
    00000579: 	jmp	.Ltmp1141 # Offset: 1401
.Ltmp1145:
    0000057e: 	movq	%rbx, %rdi
    00000581: 	leaq	0x50(%rsp), %rsi
    00000586: 	xorl	%edx, %edx
    00000588: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1416
    0000058d: 	movq	%rax, (%rbx)
    00000590: 	movq	%rax, %rdi
    00000593: 	movq	0x50(%rsp), %rax
    00000598: 	movq	%rax, 0x10(%rbx)
.Ltmp1151:
    0000059c: 	movq	%r12, %rdx
    0000059f: 	movq	%rbp, %rsi
    000005a2: 	callq	memcpy@PLT # Offset: 1442
    000005a7: 	movq	0x50(%rsp), %r12
    000005ac: 	movq	(%rbx), %rdi
    000005af: 	jmp	.Ltmp1149 # Offset: 1455
.Ltmp1142:
    000005b4: 	movq	0x40(%rsp), %rsi
    000005b9: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000005c0: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1472
    000005c5: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000005cc: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000005d3: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000005da: 	jne	.Ltmp1150 # Offset: 1498
.Ltmp1147:
    000005e0: 	movq	-0x8(%rdx), %rax
    000005e4: 	addq	$0x200, %rax
    000005ea: 	jmp	.Ltmp1150 # Offset: 1514
.Ltmp1146:
    000005ef: 	testq	%r12, %r12
    000005f2: 	je	.Ltmp1149 # Offset: 1522
    000005f8: 	jmp	.Ltmp1151 # Offset: 1528
.Ltmp1148:
    000005fa: 	callq	__stack_chk_fail@PLT # Offset: 1530
.Ltmp1144:
    000005ff: 	leaq	DATAat0x4d018(%rip), %rdi
    00000606: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1542
DWARF CFI Instructions:
    <empty>
End of Function "_Z28test_CSE8_add_inline_flippedIa14custom_cse_addIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z9test_CSE8Ia14custom_cse_mulIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z9test_CSE8Ia14custom_cse_mulIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z9test_CSE8Ia14custom_cse_mulIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/simple_types_cse.cpp/1
  Number      : 107
  State       : disassembled
  Address     : 0x125c0
  Size        : 0xa2f
  MaxSize     : 0xa30
  Offset      : 0x125c0
  Section     : .text
  Orc Section : .local.text._Z9test_CSE8Ia14custom_cse_mulIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0106:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	movl	%esi, %ebx
    0000000c: 	subq	$0xe8, %rsp
    00000013: 	movq	%rdi, 0xa8(%rsp)
    0000001b: 	movq	%rdx, 0xc8(%rsp)
    00000023: 	movq	%fs:0x28, %rax
    0000002c: 	movq	%rax, 0xd8(%rsp)
    00000034: 	xorl	%eax, %eax
    00000036: 	callq	clock@PLT # Offset: 54
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	movl	iterations(%rip), %eax
    00000048: 	movl	%eax, 0xbc(%rsp)
    0000004f: 	testl	%eax, %eax
    00000051: 	jle	.Ltmp1152 # Offset: 81
    00000057: 	movq	0xa8(%rsp), %rax
    0000005f: 	movl	$0x0, 0xc(%rsp)
    00000067: 	movd	%ebx, %xmm3
    0000006b: 	pxor	%xmm4, %xmm4
    0000006f: 	movdqa	DATAat0x4d5f0(%rip), %xmm2
    00000077: 	punpcklbw	%xmm3, %xmm3
    0000007b: 	movzbl	(%rax), %esi
    0000007e: 	leaq	0x1f30(%rax), %rdi
    00000085: 	punpcklwd	%xmm3, %xmm3
    00000089: 	movq	%rdi, 0xc0(%rsp)
    00000091: 	movzbl	0x1f31(%rax), %edi
    00000098: 	pshufd	$0x0, %xmm3, %xmm3
    0000009d: 	movb	%sil, 0x27(%rsp)
    000000a2: 	movzbl	0x1(%rax), %esi
    000000a6: 	movb	%dil, 0xb2(%rsp)
    000000ae: 	movzbl	0x1f33(%rax), %edi
    000000b5: 	movb	%sil, 0xbb(%rsp)
    000000bd: 	movzbl	0x1f30(%rax), %esi
    000000c4: 	movb	%dil, 0x23(%rsp)
    000000c9: 	movzbl	0x1f35(%rax), %edi
    000000d0: 	movb	%sil, 0x22(%rsp)
    000000d5: 	movzbl	0x1f32(%rax), %esi
    000000dc: 	movb	%dil, 0x25(%rsp)
    000000e1: 	movzbl	0x1f37(%rax), %edi
    000000e8: 	movb	%sil, 0xb3(%rsp)
    000000f0: 	movzbl	0x1f34(%rax), %esi
    000000f7: 	movb	%dil, 0xb5(%rsp)
    000000ff: 	movzbl	0x1f39(%rax), %edi
    00000106: 	movb	%sil, 0x24(%rsp)
    0000010b: 	movzbl	0x1f36(%rax), %esi
    00000112: 	movb	%dil, 0xb7(%rsp)
    0000011a: 	movzbl	0x1f3b(%rax), %edi
    00000121: 	movb	%sil, 0xb4(%rsp)
    00000129: 	movzbl	0x1f38(%rax), %esi
    00000130: 	movb	%dil, 0xb9(%rsp)
    00000138: 	movb	%sil, 0xb6(%rsp)
    00000140: 	movzbl	0x1f3a(%rax), %esi
    00000147: 	movb	%sil, 0xb8(%rsp)
    0000014f: 	movzbl	0x1f3c(%rax), %esi
    00000156: 	movzbl	0x1f3d(%rax), %edi
    0000015d: 	movb	%sil, 0x20(%rsp)
    00000162: 	movzbl	0x1f3e(%rax), %esi
    00000169: 	movzbl	0x1f3f(%rax), %eax
    00000170: 	movb	%dil, 0x21(%rsp)
    00000175: 	movb	%sil, 0xba(%rsp)
    0000017d: 	movb	%al, 0x26(%rsp)
    00000181: 	nopl	(%rax) # Size: 7
.Ltmp1155:
    00000188: 	movzbl	0x27(%rsp), %eax
    0000018d: 	movsbl	0xbb(%rsp), %edx
    00000195: 	pxor	%xmm5, %xmm5
    00000199: 	movsbl	0x27(%rsp), %ecx
    0000019e: 	imull	%edx, %eax
    000001a1: 	movl	%edx, %edi
    000001a3: 	movl	%ecx, %esi
    000001a5: 	addl	%ebx, %eax
    000001a7: 	movsbl	%al, %eax
    000001aa: 	leal	(%rcx,%rax,2), %ecx
    000001ad: 	leal	(%rdx,%rax,2), %edx
    000001b0: 	leal	(,%rcx,8), %eax
    000001b7: 	subl	%ecx, %eax
    000001b9: 	movl	%esi, %ecx
    000001bb: 	subl	%edi, %ecx
    000001bd: 	addl	%ecx, %eax
    000001bf: 	subl	%edx, %eax
    000001c1: 	subl	%edx, %eax
    000001c3: 	subl	%edx, %eax
    000001c5: 	subl	%edx, %eax
    000001c7: 	subl	%edx, %eax
    000001c9: 	subl	%edx, %eax
    000001cb: 	subl	%edx, %eax
    000001cd: 	movq	0xc0(%rsp), %rdx
    000001d5: 	movb	%al, 0xb1(%rsp)
    000001dc: 	movq	0xa8(%rsp), %rax
    000001e4: 	nopl	(%rax) # Size: 4
.Ltmp1153:
    000001e8: 	movdqu	(%rax), %xmm0
    000001ec: 	movdqu	0x1(%rax), %xmm6
    000001f1: 	addq	$0x10, %rax
    000001f5: 	movdqa	%xmm0, %xmm1
    000001f9: 	movdqa	%xmm0, %xmm7
    000001fd: 	movdqa	%xmm6, %xmm9
    00000202: 	movdqa	%xmm6, %xmm8
    00000207: 	punpcklbw	%xmm0, %xmm1
    0000020b: 	punpckhbw	%xmm0, %xmm7
    0000020f: 	punpcklbw	%xmm6, %xmm9
    00000214: 	punpckhbw	%xmm6, %xmm8
    00000219: 	pmullw	%xmm9, %xmm1
    0000021e: 	pmullw	%xmm8, %xmm7
    00000223: 	pand	%xmm2, %xmm1
    00000227: 	pand	%xmm2, %xmm7
    0000022b: 	packuswb	%xmm7, %xmm1
    0000022f: 	paddb	%xmm3, %xmm1
    00000233: 	paddb	%xmm1, %xmm0
    00000237: 	paddb	%xmm1, %xmm6
    0000023b: 	paddb	%xmm1, %xmm0
    0000023f: 	paddb	%xmm1, %xmm6
    00000243: 	paddb	%xmm0, %xmm0
    00000247: 	movdqa	%xmm6, %xmm7
    0000024b: 	paddb	%xmm0, %xmm0
    0000024f: 	paddb	%xmm6, %xmm7
    00000253: 	paddb	%xmm0, %xmm0
    00000257: 	psubb	%xmm7, %xmm5
    0000025b: 	psubb	%xmm6, %xmm0
    0000025f: 	paddb	%xmm7, %xmm6
    00000263: 	psubb	%xmm7, %xmm0
    00000267: 	paddb	%xmm5, %xmm0
    0000026b: 	movdqa	%xmm0, %xmm5
    0000026f: 	psubb	%xmm6, %xmm5
    00000273: 	cmpq	%rax, %rdx
    00000276: 	jne	.Ltmp1153 # Offset: 630
    0000027c: 	movsbl	0xb2(%rsp), %edx
    00000284: 	movzbl	0x22(%rsp), %eax
    00000289: 	movdqa	%xmm5, %xmm0
    0000028d: 	psrldq	$0x8, %xmm0
    00000292: 	imull	%edx, %eax
    00000295: 	movl	%edx, %ecx
    00000297: 	movl	%edx, 0x28(%rsp)
    0000029b: 	paddb	%xmm0, %xmm5
    0000029f: 	psadbw	%xmm4, %xmm5
    000002a3: 	movd	%xmm5, 0x98(%rsp)
    000002ac: 	addl	%ebx, %eax
    000002ae: 	movsbl	%al, %edi
    000002b1: 	movl	%ecx, %eax
    000002b3: 	leal	(%rdx,%rdi,2), %r14d
    000002b7: 	movsbl	0xb3(%rsp), %edx
    000002bf: 	movl	%edi, 0x2c(%rsp)
    000002c3: 	movl	%edx, %ecx
    000002c5: 	movl	%edx, 0x4c(%rsp)
    000002c9: 	imull	%ecx, %eax
    000002cc: 	addl	%ebx, %eax
    000002ce: 	movsbl	%al, %r8d
    000002d2: 	leal	(%rdx,%r8,2), %r13d
    000002d6: 	movsbl	0x23(%rsp), %edx
    000002db: 	movl	%r8d, 0x48(%rsp)
    000002e0: 	movl	%edx, %eax
    000002e2: 	movl	%edx, %r9d
    000002e5: 	movl	%edx, 0x40(%rsp)
    000002e9: 	imull	%ecx, %eax
    000002ec: 	addl	%ebx, %eax
    000002ee: 	movsbl	%al, %r10d
    000002f2: 	leal	(%rdx,%r10,2), %r12d
    000002f6: 	movsbl	0x24(%rsp), %edx
    000002fb: 	movl	%r10d, 0x3c(%rsp)
    00000300: 	movl	%edx, %eax
    00000302: 	movl	%edx, %r15d
    00000305: 	movl	%edx, 0x38(%rsp)
    00000309: 	imull	%r9d, %eax
    0000030d: 	movl	%r15d, %edi
    00000310: 	addl	%ebx, %eax
    00000312: 	movsbl	%al, %r9d
    00000316: 	leal	(%rdx,%r9,2), %ebp
    0000031a: 	movsbl	0x25(%rsp), %edx
    0000031f: 	movl	%r9d, 0x34(%rsp)
    00000324: 	movl	%edx, %eax
    00000326: 	movl	%edx, %esi
    00000328: 	movl	%edx, 0x30(%rsp)
    0000032c: 	imull	%edi, %eax
    0000032f: 	addl	%ebx, %eax
    00000331: 	movsbl	%al, %r15d
    00000335: 	movl	%esi, %eax
    00000337: 	leal	(%rdx,%r15,2), %r11d
    0000033b: 	movsbl	0xb4(%rsp), %edx
    00000343: 	movl	%r15d, 0x10(%rsp)
    00000348: 	imull	%edx, %eax
    0000034b: 	movl	%edx, 0x50(%rsp)
    0000034f: 	addl	%ebx, %eax
    00000351: 	movsbl	%al, %esi
    00000354: 	movl	%edx, %eax
    00000356: 	leal	(%rdx,%rsi,2), %r10d
    0000035a: 	movsbl	0xb5(%rsp), %edx
    00000362: 	movl	%esi, 0x54(%rsp)
    00000366: 	imull	%edx, %eax
    00000369: 	movl	%edx, %edi
    0000036b: 	movl	%edx, 0x58(%rsp)
    0000036f: 	addl	%ebx, %eax
    00000371: 	movsbl	%al, %r8d
    00000375: 	movl	%edi, %eax
    00000377: 	leal	(%rdx,%r8,2), %r9d
    0000037b: 	movsbl	0xb6(%rsp), %edx
    00000383: 	movl	%r8d, 0x5c(%rsp)
    00000388: 	imull	%edx, %eax
    0000038b: 	movl	%edx, 0x60(%rsp)
    0000038f: 	addl	%ebx, %eax
    00000391: 	movsbl	%al, %r15d
    00000395: 	movl	%edx, %eax
    00000397: 	leal	(%rdx,%r15,2), %r8d
    0000039b: 	movsbl	0xb7(%rsp), %edx
    000003a3: 	movl	%r15d, 0x64(%rsp)
    000003a8: 	imull	%edx, %eax
    000003ab: 	movl	%edx, %ecx
    000003ad: 	movl	%edx, 0x68(%rsp)
    000003b1: 	addl	%ebx, %eax
    000003b3: 	movsbl	%al, %edi
    000003b6: 	movl	%ecx, %eax
    000003b8: 	movl	%edi, 0x6c(%rsp)
    000003bc: 	leal	(%rdx,%rdi,2), %edi
    000003bf: 	movsbl	0xb8(%rsp), %edx
    000003c7: 	movl	%edx, %ecx
    000003c9: 	movl	%edx, 0x70(%rsp)
    000003cd: 	imull	%ecx, %eax
    000003d0: 	addl	%ebx, %eax
    000003d2: 	movsbl	%al, %r15d
    000003d6: 	movl	%ecx, %eax
    000003d8: 	leal	(%rdx,%r15,2), %esi
    000003dc: 	movl	%r15d, 0x74(%rsp)
    000003e1: 	movsbl	0xb9(%rsp), %edx
    000003e9: 	movzbl	0x20(%rsp), %ecx
    000003ee: 	imull	%edx, %eax
    000003f1: 	movl	%edx, %r15d
    000003f4: 	movl	%edx, 0x78(%rsp)
    000003f8: 	addl	%ebx, %eax
    000003fa: 	movsbl	%al, %eax
    000003fd: 	movl	%eax, 0x7c(%rsp)
    00000401: 	leal	(%rdx,%rax,2), %eax
    00000404: 	movsbl	%cl, %edx
    00000407: 	movl	%eax, 0x9c(%rsp)
    0000040e: 	movl	%r15d, %eax
    00000411: 	movl	%ecx, %r15d
    00000414: 	movzbl	0x21(%rsp), %ecx
    00000419: 	imull	%r15d, %eax
    0000041d: 	movl	%edx, 0x80(%rsp)
    00000424: 	addl	%ebx, %eax
    00000426: 	movsbl	%al, %r15d
    0000042a: 	movzbl	0x20(%rsp), %eax
    0000042f: 	leal	(%rdx,%r15,2), %edx
    00000433: 	movl	%r15d, 0x84(%rsp)
    0000043b: 	movsbl	%cl, %r15d
    0000043f: 	imull	%ecx, %eax
    00000442: 	movl	%r15d, 0x88(%rsp)
    0000044a: 	movzbl	0xba(%rsp), %ecx
    00000452: 	addl	%ebx, %eax
    00000454: 	movsbl	%al, %eax
    00000457: 	leal	(%r15,%rax,2), %r15d
    0000045b: 	movl	%eax, 0x8c(%rsp)
    00000462: 	movzbl	0x21(%rsp), %eax
    00000467: 	movl	%r15d, 0xa0(%rsp)
    0000046f: 	movsbl	%cl, %r15d
    00000473: 	imull	%ecx, %eax
    00000476: 	movl	%r15d, 0x90(%rsp)
    0000047e: 	addl	%ebx, %eax
    00000480: 	movsbl	%al, %eax
    00000483: 	leal	(%r15,%rax,2), %r15d
    00000487: 	movl	%eax, 0x94(%rsp)
    0000048e: 	movzbl	0x26(%rsp), %eax
    00000493: 	imull	%ecx, %eax
    00000496: 	addl	%ebx, %eax
    00000498: 	movsbl	%al, %ecx
    0000049b: 	movsbl	0x26(%rsp), %eax
    000004a0: 	movl	%ecx, 0x44(%rsp)
    000004a4: 	leal	(%rax,%rcx,2), %eax
    000004a7: 	movzbl	0x22(%rsp), %ecx
    000004ac: 	movl	%eax, 0xa4(%rsp)
    000004b3: 	movzbl	0x2c(%rsp), %eax
    000004b8: 	leal	(%rcx,%rax,2), %eax
    000004bb: 	movl	0x48(%rsp), %ecx
    000004bf: 	shll	$0x3, %eax
    000004c2: 	subl	%r14d, %eax
    000004c5: 	subl	%r14d, %eax
    000004c8: 	subl	%r14d, %eax
    000004cb: 	subl	%r14d, %eax
    000004ce: 	subl	%r14d, %eax
    000004d1: 	subl	%r14d, %eax
    000004d4: 	subl	%r14d, %eax
    000004d7: 	subl	%r14d, %eax
    000004da: 	movzbl	0xb1(%rsp), %r14d
    000004e3: 	addb	0x98(%rsp), %r14b
    000004eb: 	addl	%eax, %r14d
    000004ee: 	movl	0x28(%rsp), %eax
    000004f2: 	leal	(%rax,%rcx,2), %eax
    000004f5: 	movl	0x4c(%rsp), %ecx
    000004f9: 	shll	$0x3, %eax
    000004fc: 	subl	%r13d, %eax
    000004ff: 	subl	%r13d, %eax
    00000502: 	subl	%r13d, %eax
    00000505: 	subl	%r13d, %eax
    00000508: 	subl	%r13d, %eax
    0000050b: 	subl	%r13d, %eax
    0000050e: 	subl	%r13d, %eax
    00000511: 	subl	%r13d, %eax
    00000514: 	addl	%r14d, %eax
    00000517: 	movl	0x3c(%rsp), %r14d
    0000051c: 	leal	(%rcx,%r14,2), %r13d
    00000520: 	movl	0x40(%rsp), %ecx
    00000524: 	movl	0x34(%rsp), %r14d
    00000529: 	shll	$0x3, %r13d
    0000052d: 	subl	%r12d, %r13d
    00000530: 	subl	%r12d, %r13d
    00000533: 	subl	%r12d, %r13d
    00000536: 	subl	%r12d, %r13d
    00000539: 	subl	%r12d, %r13d
    0000053c: 	subl	%r12d, %r13d
    0000053f: 	subl	%r12d, %r13d
    00000542: 	subl	%r12d, %r13d
    00000545: 	leal	(%rcx,%r14,2), %r12d
    00000549: 	movl	0x10(%rsp), %ecx
    0000054d: 	shll	$0x3, %r12d
    00000551: 	addl	%r13d, %eax
    00000554: 	subl	%ebp, %r12d
    00000557: 	subl	%ebp, %r12d
    0000055a: 	subl	%ebp, %r12d
    0000055d: 	subl	%ebp, %r12d
    00000560: 	subl	%ebp, %r12d
    00000563: 	subl	%ebp, %r12d
    00000566: 	subl	%ebp, %r12d
    00000569: 	subl	%ebp, %r12d
    0000056c: 	movl	0x38(%rsp), %ebp
    00000570: 	addl	%r12d, %eax
    00000573: 	leal	(%rbp,%rcx,2), %ebp
    00000577: 	movl	0x30(%rsp), %ecx
    0000057b: 	movl	0x54(%rsp), %r14d
    00000580: 	shll	$0x3, %ebp
    00000583: 	subl	%r11d, %ebp
    00000586: 	subl	%r11d, %ebp
    00000589: 	subl	%r11d, %ebp
    0000058c: 	subl	%r11d, %ebp
    0000058f: 	subl	%r11d, %ebp
    00000592: 	subl	%r11d, %ebp
    00000595: 	subl	%r11d, %ebp
    00000598: 	subl	%r11d, %ebp
    0000059b: 	leal	(%rcx,%r14,2), %r11d
    0000059f: 	movl	0x50(%rsp), %ecx
    000005a3: 	movl	0x5c(%rsp), %r14d
    000005a8: 	shll	$0x3, %r11d
    000005ac: 	addl	%ebp, %eax
    000005ae: 	subl	%r10d, %r11d
    000005b1: 	subl	%r10d, %r11d
    000005b4: 	subl	%r10d, %r11d
    000005b7: 	subl	%r10d, %r11d
    000005ba: 	subl	%r10d, %r11d
    000005bd: 	subl	%r10d, %r11d
    000005c0: 	subl	%r10d, %r11d
    000005c3: 	subl	%r10d, %r11d
    000005c6: 	leal	(%rcx,%r14,2), %r10d
    000005ca: 	movl	0x58(%rsp), %ecx
    000005ce: 	movl	0x64(%rsp), %r14d
    000005d3: 	shll	$0x3, %r10d
    000005d7: 	addl	%r11d, %eax
    000005da: 	subl	%r9d, %r10d
    000005dd: 	subl	%r9d, %r10d
    000005e0: 	subl	%r9d, %r10d
    000005e3: 	subl	%r9d, %r10d
    000005e6: 	subl	%r9d, %r10d
    000005e9: 	subl	%r9d, %r10d
    000005ec: 	subl	%r9d, %r10d
    000005ef: 	subl	%r9d, %r10d
    000005f2: 	leal	(%rcx,%r14,2), %r9d
    000005f6: 	movl	0x60(%rsp), %ecx
    000005fa: 	movl	0x6c(%rsp), %r14d
    000005ff: 	shll	$0x3, %r9d
    00000603: 	addl	%r10d, %eax
    00000606: 	subl	%r8d, %r9d
    00000609: 	subl	%r8d, %r9d
    0000060c: 	subl	%r8d, %r9d
    0000060f: 	subl	%r8d, %r9d
    00000612: 	subl	%r8d, %r9d
    00000615: 	subl	%r8d, %r9d
    00000618: 	subl	%r8d, %r9d
    0000061b: 	subl	%r8d, %r9d
    0000061e: 	leal	(%rcx,%r14,2), %r8d
    00000622: 	movl	0x68(%rsp), %ecx
    00000626: 	movl	0x74(%rsp), %r14d
    0000062b: 	shll	$0x3, %r8d
    0000062f: 	addl	%r9d, %eax
    00000632: 	subl	%edi, %r8d
    00000635: 	subl	%edi, %r8d
    00000638: 	subl	%edi, %r8d
    0000063b: 	subl	%edi, %r8d
    0000063e: 	subl	%edi, %r8d
    00000641: 	subl	%edi, %r8d
    00000644: 	subl	%edi, %r8d
    00000647: 	subl	%edi, %r8d
    0000064a: 	leal	(%rcx,%r14,2), %edi
    0000064e: 	movl	0x70(%rsp), %ecx
    00000652: 	movl	0x7c(%rsp), %r14d
    00000657: 	shll	$0x3, %edi
    0000065a: 	addl	%r8d, %eax
    0000065d: 	subl	%esi, %edi
    0000065f: 	subl	%esi, %edi
    00000661: 	subl	%esi, %edi
    00000663: 	subl	%esi, %edi
    00000665: 	subl	%esi, %edi
    00000667: 	subl	%esi, %edi
    00000669: 	subl	%esi, %edi
    0000066b: 	subl	%esi, %edi
    0000066d: 	leal	(%rcx,%r14,2), %esi
    00000671: 	movl	0x78(%rsp), %ecx
    00000675: 	movl	0x84(%rsp), %r14d
    0000067d: 	addl	%edi, %eax
    0000067f: 	movl	0x9c(%rsp), %edi
    00000686: 	shll	$0x3, %esi
    00000689: 	leal	(%rcx,%r14,2), %ecx
    0000068d: 	subl	%edi, %esi
    0000068f: 	shll	$0x3, %ecx
    00000692: 	subl	%edi, %esi
    00000694: 	subl	%edx, %ecx
    00000696: 	subl	%edi, %esi
    00000698: 	subl	%edx, %ecx
    0000069a: 	subl	%edi, %esi
    0000069c: 	subl	%edx, %ecx
    0000069e: 	subl	%edi, %esi
    000006a0: 	subl	%edx, %ecx
    000006a2: 	subl	%edi, %esi
    000006a4: 	subl	%edx, %ecx
    000006a6: 	subl	%edi, %esi
    000006a8: 	subl	%edx, %ecx
    000006aa: 	subl	%edi, %esi
    000006ac: 	subl	%edx, %ecx
    000006ae: 	movl	0xa0(%rsp), %edi
    000006b5: 	subl	%edx, %ecx
    000006b7: 	addl	%esi, %eax
    000006b9: 	movl	0x8c(%rsp), %edx
    000006c0: 	movl	0xa4(%rsp), %esi
    000006c7: 	addl	%ecx, %eax
    000006c9: 	movl	0x80(%rsp), %ecx
    000006d0: 	leal	(%rcx,%rdx,2), %edx
    000006d3: 	movl	0x94(%rsp), %ecx
    000006da: 	shll	$0x3, %edx
    000006dd: 	subl	%edi, %edx
    000006df: 	subl	%edi, %edx
    000006e1: 	subl	%edi, %edx
    000006e3: 	subl	%edi, %edx
    000006e5: 	subl	%edi, %edx
    000006e7: 	subl	%edi, %edx
    000006e9: 	subl	%edi, %edx
    000006eb: 	subl	%edi, %edx
    000006ed: 	movl	0x88(%rsp), %edi
    000006f4: 	addl	%edx, %eax
    000006f6: 	leal	(%rdi,%rcx,2), %edx
    000006f9: 	movl	0x44(%rsp), %ecx
    000006fd: 	shll	$0x3, %edx
    00000700: 	subl	%r15d, %edx
    00000703: 	subl	%r15d, %edx
    00000706: 	subl	%r15d, %edx
    00000709: 	subl	%r15d, %edx
    0000070c: 	subl	%r15d, %edx
    0000070f: 	subl	%r15d, %edx
    00000712: 	subl	%r15d, %edx
    00000715: 	subl	%r15d, %edx
    00000718: 	movl	0x90(%rsp), %r15d
    00000720: 	addl	%edx, %eax
    00000722: 	leal	(%r15,%rcx,2), %edx
    00000726: 	shll	$0x3, %edx
    00000729: 	subl	%esi, %edx
    0000072b: 	subl	%esi, %edx
    0000072d: 	subl	%esi, %edx
    0000072f: 	subl	%esi, %edx
    00000731: 	subl	%esi, %edx
    00000733: 	subl	%esi, %edx
    00000735: 	subl	%esi, %edx
    00000737: 	subl	%esi, %edx
    00000739: 	addb	%al, %dl
    0000073b: 	jne	.Ltmp1154 # Offset: 1851
    00000741: 	addl	$0x1, 0xc(%rsp)
    00000746: 	movl	0xc(%rsp), %eax
    0000074a: 	cmpl	0xbc(%rsp), %eax
    00000751: 	jl	.Ltmp1155 # Offset: 1873
.Ltmp1152:
    00000757: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000075e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000765: 	subq	$0x20, %rax
    00000769: 	cmpq	%rax, %rbx
    0000076c: 	je	.Ltmp1156 # Offset: 1900
    00000772: 	movq	0xc8(%rsp), %rax
    0000077a: 	leaq	0x10(%rbx), %rdi
    0000077e: 	movq	%rdi, (%rbx)
    00000781: 	movq	(%rax), %rbp
    00000784: 	movq	0x8(%rax), %r12
    00000788: 	movq	%rbp, %rax
    0000078b: 	addq	%r12, %rax
    0000078e: 	je	.Ltmp1157 # Offset: 1934
    00000790: 	testq	%rbp, %rbp
    00000793: 	je	.Ltmp1158 # Offset: 1939
.Ltmp1157:
    00000799: 	movq	%r12, 0xd0(%rsp)
    000007a1: 	cmpq	$0xf, %r12
    000007a5: 	ja	.Ltmp1159 # Offset: 1957
    000007ab: 	cmpq	$0x1, %r12
    000007af: 	jne	.Ltmp1160 # Offset: 1967
    000007b5: 	movzbl	(%rbp), %eax
    000007b9: 	movb	%al, 0x10(%rbx)
.Ltmp1163:
    000007bc: 	movq	%r12, 0x8(%rbx)
    000007c0: 	movb	$0x0, (%rdi,%r12)
    000007c5: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000007cc: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000007d3: 	addq	$0x20, %rax
    000007d7: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000007de: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000007e5: 	je	.Ltmp1161 # Offset: 2021
.Ltmp1164:
    000007eb: 	movq	-0x20(%rax), %rbp
    000007ef: 	callq	clock@PLT # Offset: 2031
    000007f4: 	movq	%rax, end_time(%rip)
    000007fb: 	movq	0xd8(%rsp), %rdx
    00000803: 	subq	%fs:0x28, %rdx
    0000080c: 	jne	.Ltmp1162 # Offset: 2060
    00000812: 	subq	start_time(%rip), %rax
    00000819: 	pxor	%xmm0, %xmm0
    0000081d: 	movq	%rbp, %rdi
    00000820: 	cvtsi2sd	%rax, %xmm0
    00000825: 	divsd	DATAat0x4d640(%rip), %xmm0
    0000082d: 	addq	$0xe8, %rsp
    00000834: 	popq	%rbx
    00000835: 	popq	%rbp
    00000836: 	popq	%r12
    00000838: 	popq	%r13
    0000083a: 	popq	%r14
    0000083c: 	popq	%r15
    0000083e: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 2110
    00000843: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1154:
    00000848: 	movq	0xc8(%rsp), %rax
    00000850: 	movl	$0x1, %edi
    00000855: 	movaps	%xmm3, 0x10(%rsp)
    0000085a: 	leaq	DATAat0x4d004(%rip), %rsi
    00000861: 	movq	(%rax), %rdx
    00000864: 	xorl	%eax, %eax
    00000866: 	callq	__printf_chk@PLT # Offset: 2150
    0000086b: 	addl	$0x1, 0xc(%rsp)
    00000870: 	movl	iterations(%rip), %edi
    00000876: 	movl	0xc(%rsp), %eax
    0000087a: 	movl	%edi, 0xbc(%rsp)
    00000881: 	cmpl	%edi, %eax
    00000883: 	jge	.Ltmp1152 # Offset: 2179
    00000889: 	movq	0xa8(%rsp), %rax
    00000891: 	pxor	%xmm4, %xmm4
    00000895: 	movzbl	(%rax), %edi
    00000898: 	movzbl	0x1f33(%rax), %esi
    0000089f: 	movb	%dil, 0x27(%rsp)
    000008a4: 	movzbl	0x1(%rax), %edi
    000008a8: 	movb	%sil, 0x23(%rsp)
    000008ad: 	movzbl	0x1f35(%rax), %esi
    000008b4: 	movb	%dil, 0xbb(%rsp)
    000008bc: 	movzbl	0x1f30(%rax), %edi
    000008c3: 	movb	%sil, 0x25(%rsp)
    000008c8: 	movzbl	0x1f37(%rax), %esi
    000008cf: 	movb	%dil, 0x22(%rsp)
    000008d4: 	movzbl	0x1f31(%rax), %edi
    000008db: 	movb	%sil, 0xb5(%rsp)
    000008e3: 	movzbl	0x1f39(%rax), %esi
    000008ea: 	movb	%dil, 0xb2(%rsp)
    000008f2: 	movzbl	0x1f32(%rax), %edi
    000008f9: 	movb	%sil, 0xb7(%rsp)
    00000901: 	movzbl	0x1f3b(%rax), %esi
    00000908: 	movb	%dil, 0xb3(%rsp)
    00000910: 	movzbl	0x1f34(%rax), %edi
    00000917: 	movb	%sil, 0xb9(%rsp)
    0000091f: 	movzbl	0x1f3d(%rax), %esi
    00000926: 	movb	%dil, 0x24(%rsp)
    0000092b: 	movzbl	0x1f36(%rax), %edi
    00000932: 	movb	%dil, 0xb4(%rsp)
    0000093a: 	movzbl	0x1f38(%rax), %edi
    00000941: 	movb	%dil, 0xb6(%rsp)
    00000949: 	movzbl	0x1f3a(%rax), %edi
    00000950: 	movb	%dil, 0xb8(%rsp)
    00000958: 	movzbl	0x1f3c(%rax), %edi
    0000095f: 	movb	%dil, 0x20(%rsp)
    00000964: 	movb	%sil, 0x21(%rsp)
    00000969: 	movzbl	0x1f3e(%rax), %edi
    00000970: 	movzbl	0x1f3f(%rax), %eax
    00000977: 	movdqa	0x10(%rsp), %xmm3
    0000097d: 	movb	%dil, 0xba(%rsp)
    00000985: 	movdqa	DATAat0x4d5f0(%rip), %xmm2
    0000098d: 	movb	%al, 0x26(%rsp)
    00000991: 	jmp	.Ltmp1155 # Offset: 2449
.Ltmp1159:
    00000996: 	movq	%rbx, %rdi
    00000999: 	leaq	0xd0(%rsp), %rsi
    000009a1: 	xorl	%edx, %edx
    000009a3: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 2467
    000009a8: 	movq	%rax, (%rbx)
    000009ab: 	movq	%rax, %rdi
    000009ae: 	movq	0xd0(%rsp), %rax
    000009b6: 	movq	%rax, 0x10(%rbx)
.Ltmp1165:
    000009ba: 	movq	%r12, %rdx
    000009bd: 	movq	%rbp, %rsi
    000009c0: 	callq	memcpy@PLT # Offset: 2496
    000009c5: 	movq	0xd0(%rsp), %r12
    000009cd: 	movq	(%rbx), %rdi
    000009d0: 	jmp	.Ltmp1163 # Offset: 2512
.Ltmp1156:
    000009d5: 	movq	0xc8(%rsp), %rsi
    000009dd: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000009e4: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 2532
    000009e9: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000009f0: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000009f7: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000009fe: 	jne	.Ltmp1164 # Offset: 2558
.Ltmp1161:
    00000a04: 	movq	-0x8(%rdx), %rax
    00000a08: 	addq	$0x200, %rax
    00000a0e: 	jmp	.Ltmp1164 # Offset: 2574
.Ltmp1160:
    00000a13: 	testq	%r12, %r12
    00000a16: 	je	.Ltmp1163 # Offset: 2582
    00000a1c: 	jmp	.Ltmp1165 # Offset: 2588
.Ltmp1162:
    00000a1e: 	callq	__stack_chk_fail@PLT # Offset: 2590
.Ltmp1158:
    00000a23: 	leaq	DATAat0x4d018(%rip), %rdi
    00000a2a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 2602
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE8Ia14custom_cse_mulIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z9test_CSE8Ih14custom_cse_addIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 108
  State       : disassembled
  Address     : 0x12ff0
  Size        : 0x593
  MaxSize     : 0x5a0
  Offset      : 0x12ff0
  Section     : .text
  Orc Section : .local.text._Z9test_CSE8Ih14custom_cse_addIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0107:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movl	%esi, %r12d
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdi, %rbx
    00000016: 	subq	$0x48, %rsp
    0000001a: 	movq	%rcx, 0x20(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x38(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	movl	iterations(%rip), %eax
    00000041: 	movl	%eax, (%rsp)
    00000044: 	testl	%eax, %eax
    00000046: 	jle	.Ltmp1166 # Offset: 70
    0000004c: 	leal	-0x1(%r12), %ecx
    00000051: 	leal	-0x2(%r12), %eax
    00000056: 	movd	%ebp, %xmm3
    0000005a: 	xorl	%r14d, %r14d
    0000005d: 	movl	%eax, 0x4(%rsp)
    00000061: 	movl	%ecx, %eax
    00000063: 	punpcklbw	%xmm3, %xmm3
    00000067: 	movzbl	(%rbx), %r9d
    0000006b: 	shrl	$0x4, %eax
    0000006e: 	movl	%ecx, 0x8(%rsp)
    00000072: 	andl	$-0x10, %ecx
    00000075: 	movzbl	0x1(%rbx), %r8d
    0000007a: 	subl	$0x1, %eax
    0000007d: 	movl	%ecx, %r15d
    00000080: 	punpcklwd	%xmm3, %xmm3
    00000084: 	shlq	$0x4, %rax
    00000088: 	leaq	0x10(%rbx,%rax), %r13
    0000008d: 	leal	0x1(%rcx), %eax
    00000090: 	movl	%eax, 0xc(%rsp)
    00000094: 	nopl	(%rax) # Size: 4
.Ltmp1172:
    00000098: 	leal	(%r9,%r8), %eax
    0000009c: 	movzbl	%r9b, %ecx
    000000a0: 	movzbl	%r8b, %edx
    000000a4: 	addl	%ebp, %eax
    000000a6: 	movzbl	%al, %eax
    000000a9: 	leal	(%rcx,%rax,2), %ecx
    000000ac: 	leal	(%rdx,%rax,2), %edx
    000000af: 	leal	(,%rcx,8), %eax
    000000b6: 	subl	%ecx, %eax
    000000b8: 	movl	%r9d, %ecx
    000000bb: 	subl	%r8d, %ecx
    000000be: 	addl	%ecx, %eax
    000000c0: 	subl	%edx, %eax
    000000c2: 	subl	%edx, %eax
    000000c4: 	subl	%edx, %eax
    000000c6: 	subl	%edx, %eax
    000000c8: 	subl	%edx, %eax
    000000ca: 	subl	%edx, %eax
    000000cc: 	subl	%edx, %eax
    000000ce: 	cmpl	$0x1, %r12d
    000000d2: 	jle	.Ltmp1167 # Offset: 210
    000000d8: 	cmpl	$0xe, 0x4(%rsp)
    000000dd: 	jbe	.Ltmp1168 # Offset: 221
    000000e3: 	pshufd	$0x0, %xmm3, %xmm5
    000000e8: 	movq	%rbx, %rdx
    000000eb: 	pxor	%xmm4, %xmm4
    000000ef: 	nop # Size: 1
.Ltmp1169:
    000000f0: 	movdqu	(%rdx), %xmm7
    000000f4: 	movdqu	0x1(%rdx), %xmm2
    000000f9: 	addq	$0x10, %rdx
    000000fd: 	movdqu	-0xf(%rdx), %xmm1
    00000102: 	paddb	%xmm7, %xmm2
    00000106: 	movdqa	%xmm7, %xmm0
    0000010a: 	paddb	%xmm5, %xmm2
    0000010e: 	paddb	%xmm2, %xmm0
    00000112: 	paddb	%xmm2, %xmm1
    00000116: 	paddb	%xmm2, %xmm0
    0000011a: 	paddb	%xmm2, %xmm1
    0000011e: 	paddb	%xmm0, %xmm0
    00000122: 	movdqa	%xmm1, %xmm6
    00000126: 	paddb	%xmm0, %xmm0
    0000012a: 	paddb	%xmm1, %xmm6
    0000012e: 	paddb	%xmm0, %xmm0
    00000132: 	psubb	%xmm6, %xmm4
    00000136: 	psubb	%xmm1, %xmm0
    0000013a: 	paddb	%xmm6, %xmm1
    0000013e: 	psubb	%xmm6, %xmm0
    00000142: 	psubb	%xmm1, %xmm0
    00000146: 	paddb	%xmm0, %xmm4
    0000014a: 	cmpq	%rdx, %r13
    0000014d: 	jne	.Ltmp1169 # Offset: 333
    0000014f: 	movdqa	%xmm4, %xmm0
    00000153: 	psrldq	$0x8, %xmm0
    00000158: 	paddb	%xmm0, %xmm4
    0000015c: 	pxor	%xmm0, %xmm0
    00000160: 	psadbw	%xmm0, %xmm4
    00000164: 	movd	%xmm4, %edx
    00000168: 	addl	%edx, %eax
    0000016a: 	cmpl	0x8(%rsp), %r15d
    0000016f: 	je	.Ltmp1167 # Offset: 367
    00000175: 	movl	0xc(%rsp), %ecx
    00000179: 	movl	%r15d, %edx
.Ltmp1180:
    0000017c: 	movl	%r12d, %edi
    0000017f: 	subl	%edx, %edi
    00000181: 	leal	-0x1(%rdi), %esi
    00000184: 	subl	$0x2, %edi
    00000187: 	cmpl	$0x6, %edi
    0000018a: 	jbe	.Ltmp1170 # Offset: 394
    00000190: 	movq	(%rbx,%rdx), %xmm0
    00000195: 	movq	0x1(%rbx,%rdx), %xmm1
    0000019b: 	movl	%ebp, %edx
    0000019d: 	movzbl	%bpl, %edi
    000001a1: 	shll	$0x8, %edx
    000001a4: 	orl	%edi, %edx
    000001a6: 	movd	%edx, %xmm7
    000001aa: 	pshuflw	$0x0, %xmm7, %xmm2
    000001af: 	paddb	%xmm0, %xmm2
    000001b3: 	paddb	%xmm1, %xmm2
    000001b7: 	paddb	%xmm2, %xmm0
    000001bb: 	paddb	%xmm2, %xmm1
    000001bf: 	paddb	%xmm2, %xmm0
    000001c3: 	paddb	%xmm2, %xmm1
    000001c7: 	paddb	%xmm0, %xmm0
    000001cb: 	movdqa	%xmm1, %xmm2
    000001cf: 	paddb	%xmm1, %xmm2
    000001d3: 	paddb	%xmm0, %xmm0
    000001d7: 	paddb	%xmm0, %xmm0
    000001db: 	psubb	%xmm1, %xmm0
    000001df: 	paddb	%xmm2, %xmm1
    000001e3: 	paddb	%xmm2, %xmm2
    000001e7: 	paddb	%xmm2, %xmm1
    000001eb: 	psubb	%xmm1, %xmm0
    000001ef: 	pxor	%xmm1, %xmm1
    000001f3: 	movdqa	%xmm0, %xmm5
    000001f7: 	psadbw	%xmm1, %xmm5
    000001fb: 	movq	%xmm5, %rdx
    00000200: 	movq	%xmm5, 0x28(%rsp)
    00000206: 	movl	%edx, %edi
    00000208: 	movl	%esi, %edx
    0000020a: 	andl	$-0x8, %edx
    0000020d: 	addl	%edi, %eax
    0000020f: 	addl	%edx, %ecx
    00000211: 	cmpl	%esi, %edx
    00000213: 	je	.Ltmp1167 # Offset: 531
.Ltmp1170:
    00000219: 	movslq	%ecx, %rdx
    0000021c: 	addq	%rbx, %rdx
    0000021f: 	movzbl	(%rdx), %r10d
    00000223: 	movzbl	-0x1(%rdx), %r11d
    00000228: 	leal	(%r11,%r10), %edx
    0000022c: 	movl	%r10d, %esi
    0000022f: 	addl	%ebp, %edx
    00000231: 	movzbl	%dl, %edx
    00000234: 	leal	(%r10,%rdx,2), %edi
    00000238: 	leal	(%r11,%rdx,2), %edx
    0000023c: 	leal	(%rax,%rdx,8), %eax
    0000023f: 	leal	0x1(%rcx), %edx
    00000242: 	subl	%edi, %eax
    00000244: 	subl	%edi, %eax
    00000246: 	subl	%edi, %eax
    00000248: 	subl	%edi, %eax
    0000024a: 	subl	%edi, %eax
    0000024c: 	subl	%edi, %eax
    0000024e: 	addl	%edi, %edi
    00000250: 	subl	%edi, %eax
    00000252: 	cmpl	%edx, %r12d
    00000255: 	jle	.Ltmp1167 # Offset: 597
    0000025b: 	movslq	%edx, %rdx
    0000025e: 	addl	%ebp, %esi
    00000260: 	movzbl	(%rbx,%rdx), %edi
    00000264: 	addl	%edi, %esi
    00000266: 	movl	%edi, %edx
    00000268: 	movzbl	%sil, %esi
    0000026c: 	leal	(%rdi,%rsi,2), %r11d
    00000270: 	leal	(%r10,%rsi,2), %esi
    00000274: 	shll	$0x3, %esi
    00000277: 	subl	%r11d, %esi
    0000027a: 	subl	%r11d, %esi
    0000027d: 	subl	%r11d, %esi
    00000280: 	subl	%r11d, %esi
    00000283: 	subl	%r11d, %esi
    00000286: 	subl	%r11d, %esi
    00000289: 	addl	%r11d, %r11d
    0000028c: 	subl	%r11d, %esi
    0000028f: 	addl	%esi, %eax
    00000291: 	leal	0x2(%rcx), %esi
    00000294: 	cmpl	%esi, %r12d
    00000297: 	jle	.Ltmp1167 # Offset: 663
    0000029d: 	movslq	%esi, %rsi
    000002a0: 	addl	%ebp, %edx
    000002a2: 	movzbl	(%rbx,%rsi), %r10d
    000002a7: 	addl	%r10d, %edx
    000002aa: 	movzbl	%dl, %edx
    000002ad: 	leal	(%r10,%rdx,2), %r11d
    000002b1: 	leal	(%rdi,%rdx,2), %edx
    000002b4: 	shll	$0x3, %edx
    000002b7: 	subl	%r11d, %edx
    000002ba: 	subl	%r11d, %edx
    000002bd: 	subl	%r11d, %edx
    000002c0: 	subl	%r11d, %edx
    000002c3: 	subl	%r11d, %edx
    000002c6: 	subl	%r11d, %edx
    000002c9: 	addl	%r11d, %r11d
    000002cc: 	subl	%r11d, %edx
    000002cf: 	addl	%edx, %eax
    000002d1: 	leal	0x3(%rcx), %edx
    000002d4: 	cmpl	%edx, %r12d
    000002d7: 	jle	.Ltmp1167 # Offset: 727
    000002dd: 	movslq	%edx, %rdx
    000002e0: 	movzbl	(%rbx,%rdx), %r11d
    000002e5: 	leal	(%rbp,%r10), %edx
    000002ea: 	addl	%r11d, %edx
    000002ed: 	movzbl	%dl, %edx
    000002f0: 	leal	(%r11,%rdx,2), %esi
    000002f4: 	leal	(%r10,%rdx,2), %edx
    000002f8: 	shll	$0x3, %edx
    000002fb: 	subl	%esi, %edx
    000002fd: 	subl	%esi, %edx
    000002ff: 	subl	%esi, %edx
    00000301: 	subl	%esi, %edx
    00000303: 	subl	%esi, %edx
    00000305: 	subl	%esi, %edx
    00000307: 	addl	%esi, %esi
    00000309: 	subl	%esi, %edx
    0000030b: 	addl	%edx, %eax
    0000030d: 	leal	0x4(%rcx), %edx
    00000310: 	cmpl	%edx, %r12d
    00000313: 	jle	.Ltmp1167 # Offset: 787
    00000319: 	movslq	%edx, %rdx
    0000031c: 	movzbl	(%rbx,%rdx), %r10d
    00000321: 	leal	(%rbp,%r11), %edx
    00000326: 	addl	%r10d, %edx
    00000329: 	movzbl	%dl, %edx
    0000032c: 	leal	(%r10,%rdx,2), %edi
    00000330: 	leal	(%r11,%rdx,2), %edx
    00000334: 	shll	$0x3, %edx
    00000337: 	subl	%edi, %edx
    00000339: 	subl	%edi, %edx
    0000033b: 	subl	%edi, %edx
    0000033d: 	subl	%edi, %edx
    0000033f: 	subl	%edi, %edx
    00000341: 	subl	%edi, %edx
    00000343: 	addl	%edi, %edi
    00000345: 	subl	%edi, %edx
    00000347: 	addl	%edx, %eax
    00000349: 	leal	0x5(%rcx), %edx
    0000034c: 	cmpl	%edx, %r12d
    0000034f: 	jle	.Ltmp1167 # Offset: 847
    00000351: 	movslq	%edx, %rdx
    00000354: 	addl	$0x6, %ecx
    00000357: 	movzbl	(%rbx,%rdx), %r11d
    0000035c: 	leal	(%rbp,%r10), %edx
    00000361: 	addl	%r11d, %edx
    00000364: 	movzbl	%dl, %edx
    00000367: 	leal	(%r11,%rdx,2), %esi
    0000036b: 	leal	(%r10,%rdx,2), %edx
    0000036f: 	shll	$0x3, %edx
    00000372: 	subl	%esi, %edx
    00000374: 	subl	%esi, %edx
    00000376: 	subl	%esi, %edx
    00000378: 	subl	%esi, %edx
    0000037a: 	subl	%esi, %edx
    0000037c: 	subl	%esi, %edx
    0000037e: 	addl	%esi, %esi
    00000380: 	subl	%esi, %edx
    00000382: 	addl	%edx, %eax
    00000384: 	cmpl	%ecx, %r12d
    00000387: 	jle	.Ltmp1167 # Offset: 903
    00000389: 	movslq	%ecx, %rcx
    0000038c: 	leal	(%rbp,%r11), %edx
    00000391: 	movzbl	(%rbx,%rcx), %ecx
    00000395: 	addl	%ecx, %edx
    00000397: 	movzbl	%dl, %edx
    0000039a: 	leal	(%rcx,%rdx,2), %ecx
    0000039d: 	leal	(%r11,%rdx,2), %edx
    000003a1: 	shll	$0x3, %edx
    000003a4: 	subl	%ecx, %edx
    000003a6: 	subl	%ecx, %edx
    000003a8: 	subl	%ecx, %edx
    000003aa: 	subl	%ecx, %edx
    000003ac: 	subl	%ecx, %edx
    000003ae: 	subl	%ecx, %edx
    000003b0: 	addl	%ecx, %ecx
    000003b2: 	subl	%ecx, %edx
    000003b4: 	addl	%edx, %eax
.Ltmp1167:
    000003b6: 	testb	%al, %al
    000003b8: 	jne	.Ltmp1171 # Offset: 952
    000003be: 	addl	$0x1, %r14d
    000003c2: 	cmpl	(%rsp), %r14d
    000003c6: 	jl	.Ltmp1172 # Offset: 966
.Ltmp1166:
    000003cc: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000003d3: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000003da: 	subq	$0x20, %rax
    000003de: 	cmpq	%rax, %rbx
    000003e1: 	je	.Ltmp1173 # Offset: 993
    000003e7: 	movq	0x20(%rsp), %rax
    000003ec: 	leaq	0x10(%rbx), %rdi
    000003f0: 	movq	%rdi, (%rbx)
    000003f3: 	movq	(%rax), %rbp
    000003f6: 	movq	0x8(%rax), %r12
    000003fa: 	movq	%rbp, %rax
    000003fd: 	addq	%r12, %rax
    00000400: 	je	.Ltmp1174 # Offset: 1024
    00000402: 	testq	%rbp, %rbp
    00000405: 	je	.Ltmp1175 # Offset: 1029
.Ltmp1174:
    0000040b: 	movq	%r12, 0x30(%rsp)
    00000410: 	cmpq	$0xf, %r12
    00000414: 	ja	.Ltmp1176 # Offset: 1044
    0000041a: 	cmpq	$0x1, %r12
    0000041e: 	jne	.Ltmp1177 # Offset: 1054
    00000424: 	movzbl	(%rbp), %eax
    00000428: 	movb	%al, 0x10(%rbx)
.Ltmp1181:
    0000042b: 	movq	%r12, 0x8(%rbx)
    0000042f: 	movb	$0x0, (%rdi,%r12)
    00000434: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000043b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000442: 	addq	$0x20, %rax
    00000446: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000044d: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000454: 	je	.Ltmp1178 # Offset: 1108
.Ltmp1182:
    0000045a: 	movq	-0x20(%rax), %rbp
    0000045e: 	callq	clock@PLT # Offset: 1118
    00000463: 	movq	%rax, end_time(%rip)
    0000046a: 	movq	0x38(%rsp), %rdx
    0000046f: 	subq	%fs:0x28, %rdx
    00000478: 	jne	.Ltmp1179 # Offset: 1144
    0000047e: 	subq	start_time(%rip), %rax
    00000485: 	pxor	%xmm0, %xmm0
    00000489: 	movq	%rbp, %rdi
    0000048c: 	cvtsi2sd	%rax, %xmm0
    00000491: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000499: 	addq	$0x48, %rsp
    0000049d: 	popq	%rbx
    0000049e: 	popq	%rbp
    0000049f: 	popq	%r12
    000004a1: 	popq	%r13
    000004a3: 	popq	%r14
    000004a5: 	popq	%r15
    000004a7: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1191
    000004ac: 	nopl	(%rax) # Size: 4
.Ltmp1171:
    000004b0: 	movq	0x20(%rsp), %rax
    000004b5: 	leaq	DATAat0x4d004(%rip), %rsi
    000004bc: 	movl	$0x1, %edi
    000004c1: 	movaps	%xmm3, 0x10(%rsp)
    000004c6: 	addl	$0x1, %r14d
    000004ca: 	movq	(%rax), %rdx
    000004cd: 	xorl	%eax, %eax
    000004cf: 	callq	__printf_chk@PLT # Offset: 1231
    000004d4: 	movl	iterations(%rip), %eax
    000004da: 	movl	%eax, (%rsp)
    000004dd: 	cmpl	%r14d, %eax
    000004e0: 	jle	.Ltmp1166 # Offset: 1248
    000004e6: 	movzbl	(%rbx), %r9d
    000004ea: 	movzbl	0x1(%rbx), %r8d
    000004ef: 	movdqa	0x10(%rsp), %xmm3
    000004f5: 	jmp	.Ltmp1172 # Offset: 1269
.Ltmp1168:
    000004fa: 	xorl	%edx, %edx
    000004fc: 	movl	$0x1, %ecx
    00000501: 	jmp	.Ltmp1180 # Offset: 1281
.Ltmp1176:
    00000506: 	movq	%rbx, %rdi
    00000509: 	leaq	0x30(%rsp), %rsi
    0000050e: 	xorl	%edx, %edx
    00000510: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1296
    00000515: 	movq	%rax, (%rbx)
    00000518: 	movq	%rax, %rdi
    0000051b: 	movq	0x30(%rsp), %rax
    00000520: 	movq	%rax, 0x10(%rbx)
.Ltmp1183:
    00000524: 	movq	%r12, %rdx
    00000527: 	movq	%rbp, %rsi
    0000052a: 	callq	memcpy@PLT # Offset: 1322
    0000052f: 	movq	0x30(%rsp), %r12
    00000534: 	movq	(%rbx), %rdi
    00000537: 	jmp	.Ltmp1181 # Offset: 1335
.Ltmp1173:
    0000053c: 	movq	0x20(%rsp), %rsi
    00000541: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000548: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1352
    0000054d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000554: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000055b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000562: 	jne	.Ltmp1182 # Offset: 1378
.Ltmp1178:
    00000568: 	movq	-0x8(%rdx), %rax
    0000056c: 	addq	$0x200, %rax
    00000572: 	jmp	.Ltmp1182 # Offset: 1394
.Ltmp1177:
    00000577: 	testq	%r12, %r12
    0000057a: 	je	.Ltmp1181 # Offset: 1402
    00000580: 	jmp	.Ltmp1183 # Offset: 1408
.Ltmp1179:
    00000582: 	callq	__stack_chk_fail@PLT # Offset: 1410
.Ltmp1175:
    00000587: 	leaq	DATAat0x4d018(%rip), %rdi
    0000058e: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1422
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE8Ih14custom_cse_addIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSE8Ii14custom_cse_subIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 109
  State       : disassembled
  Address     : 0x13590
  Size        : 0x42d
  MaxSize     : 0x430
  Offset      : 0x13590
  Section     : .text
  Orc Section : .local.text._Z9test_CSE8Ii14custom_cse_subIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0108:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdi, %rbx
    00000016: 	subq	$0x38, %rsp
    0000001a: 	movq	%rcx, 0x18(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x28(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r10d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r10d, %r10d
    00000045: 	jle	.Ltmp1184 # Offset: 69
    0000004b: 	leal	-0x1(%r14), %r8d
    0000004f: 	leal	-0x2(%r14), %eax
    00000053: 	movl	(%rbx), %r9d
    00000056: 	movl	0x4(%rbx), %edi
    00000059: 	movl	%eax, 0xc(%rsp)
    0000005d: 	movl	%r8d, %eax
    00000060: 	movl	%r8d, %r15d
    00000063: 	xorl	%r13d, %r13d
    00000066: 	shrl	$0x2, %eax
    00000069: 	andl	$-0x4, %r15d
    0000006d: 	subl	$0x1, %eax
    00000070: 	shlq	$0x4, %rax
    00000074: 	leaq	0x10(%rbx,%rax), %r12
    00000079: 	leal	0x1(%r15), %eax
    0000007d: 	movl	%eax, 0x10(%rsp)
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp1190:
    00000088: 	movl	%r9d, %edx
    0000008b: 	subl	%edi, %edx
    0000008d: 	leal	(%rbp,%rdx), %ecx
    00000091: 	leal	(%r9,%rcx,2), %eax
    00000095: 	leal	(%rdi,%rcx,2), %ecx
    00000098: 	leal	(%rdx,%rax,2), %edx
    0000009b: 	subl	%ecx, %edx
    0000009d: 	subl	%ecx, %edx
    0000009f: 	addl	%eax, %edx
    000000a1: 	subl	%ecx, %edx
    000000a3: 	addl	%eax, %edx
    000000a5: 	subl	%ecx, %edx
    000000a7: 	addl	%eax, %edx
    000000a9: 	subl	%ecx, %edx
    000000ab: 	addl	%eax, %edx
    000000ad: 	subl	%ecx, %edx
    000000af: 	addl	%edx, %eax
    000000b1: 	subl	%ecx, %eax
    000000b3: 	cmpl	$0x1, %r14d
    000000b7: 	jle	.Ltmp1185 # Offset: 183
    000000bd: 	cmpl	$0x2, 0xc(%rsp)
    000000c2: 	jbe	.Ltmp1186 # Offset: 194
    000000c8: 	movd	%ebp, %xmm6
    000000cc: 	movq	%rbx, %rdx
    000000cf: 	pxor	%xmm0, %xmm0
    000000d3: 	pshufd	$0x0, %xmm6, %xmm2
    000000d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1187:
    000000e0: 	movdqu	(%rdx), %xmm3
    000000e4: 	movdqu	0x4(%rdx), %xmm5
    000000e9: 	addq	$0x10, %rdx
    000000ed: 	movdqa	%xmm3, %xmm4
    000000f1: 	movdqa	%xmm5, %xmm1
    000000f5: 	psubd	%xmm5, %xmm4
    000000f9: 	paddd	%xmm2, %xmm4
    000000fd: 	paddd	%xmm4, %xmm3
    00000101: 	paddd	%xmm4, %xmm1
    00000105: 	paddd	%xmm4, %xmm3
    00000109: 	paddd	%xmm4, %xmm1
    0000010d: 	paddd	%xmm3, %xmm0
    00000111: 	psubd	%xmm1, %xmm0
    00000115: 	paddd	%xmm3, %xmm0
    00000119: 	psubd	%xmm1, %xmm0
    0000011d: 	paddd	%xmm3, %xmm0
    00000121: 	psubd	%xmm1, %xmm0
    00000125: 	paddd	%xmm3, %xmm0
    00000129: 	psubd	%xmm1, %xmm0
    0000012d: 	paddd	%xmm3, %xmm0
    00000131: 	psubd	%xmm1, %xmm0
    00000135: 	paddd	%xmm3, %xmm0
    00000139: 	psubd	%xmm1, %xmm0
    0000013d: 	paddd	%xmm3, %xmm0
    00000141: 	psubd	%xmm1, %xmm0
    00000145: 	paddd	%xmm3, %xmm0
    00000149: 	psubd	%xmm1, %xmm0
    0000014d: 	cmpq	%rdx, %r12
    00000150: 	jne	.Ltmp1187 # Offset: 336
    00000152: 	movdqa	%xmm0, %xmm1
    00000156: 	psrldq	$0x8, %xmm1
    0000015b: 	paddd	%xmm1, %xmm0
    0000015f: 	movdqa	%xmm0, %xmm1
    00000163: 	psrldq	$0x4, %xmm1
    00000168: 	paddd	%xmm1, %xmm0
    0000016c: 	movd	%xmm0, %edx
    00000170: 	addl	%edx, %eax
    00000172: 	cmpl	%r8d, %r15d
    00000175: 	je	.Ltmp1185 # Offset: 373
    0000017b: 	movl	0x10(%rsp), %edx
    0000017f: 	movl	%r15d, %esi
.Ltmp1198:
    00000182: 	movl	%r14d, %r11d
    00000185: 	subl	%esi, %r11d
    00000188: 	leal	-0x1(%r11), %ecx
    0000018c: 	cmpl	$0x2, %r11d
    00000190: 	je	.Ltmp1188 # Offset: 400
    00000196: 	movq	(%rbx,%rsi,4), %xmm3
    0000019b: 	movq	0x4(%rbx,%rsi,4), %xmm2
    000001a1: 	movd	%ebp, %xmm6
    000001a5: 	pshufd	$0xe0, %xmm6, %xmm0
    000001aa: 	movdqa	%xmm3, %xmm1
    000001ae: 	psubd	%xmm2, %xmm1
    000001b2: 	paddd	%xmm1, %xmm0
    000001b6: 	paddd	%xmm0, %xmm3
    000001ba: 	paddd	%xmm0, %xmm2
    000001be: 	paddd	%xmm0, %xmm3
    000001c2: 	paddd	%xmm0, %xmm2
    000001c6: 	paddd	%xmm3, %xmm1
    000001ca: 	movdqa	%xmm1, %xmm0
    000001ce: 	psubd	%xmm2, %xmm0
    000001d2: 	paddd	%xmm3, %xmm0
    000001d6: 	psubd	%xmm2, %xmm0
    000001da: 	paddd	%xmm3, %xmm0
    000001de: 	psubd	%xmm2, %xmm0
    000001e2: 	paddd	%xmm3, %xmm0
    000001e6: 	psubd	%xmm2, %xmm0
    000001ea: 	paddd	%xmm3, %xmm0
    000001ee: 	psubd	%xmm2, %xmm0
    000001f2: 	paddd	%xmm3, %xmm0
    000001f6: 	psubd	%xmm2, %xmm0
    000001fa: 	paddd	%xmm3, %xmm0
    000001fe: 	psubd	%xmm2, %xmm0
    00000202: 	movd	%xmm0, %esi
    00000206: 	pshufd	$0xe5, %xmm0, %xmm7
    0000020b: 	movd	%xmm7, %r11d
    00000210: 	addl	%r11d, %esi
    00000213: 	addl	%esi, %eax
    00000215: 	movl	%ecx, %esi
    00000217: 	andl	$-0x2, %esi
    0000021a: 	addl	%esi, %edx
    0000021c: 	cmpl	%ecx, %esi
    0000021e: 	je	.Ltmp1185 # Offset: 542
.Ltmp1188:
    00000220: 	movslq	%edx, %rdx
    00000223: 	movl	-0x4(%rbx,%rdx,4), %ecx
    00000227: 	movl	(%rbx,%rdx,4), %esi
    0000022a: 	movl	%ecx, %edx
    0000022c: 	subl	%esi, %edx
    0000022e: 	addl	%ebp, %edx
    00000230: 	leal	(%rcx,%rdx,2), %ecx
    00000233: 	leal	(%rsi,%rdx,2), %edx
    00000236: 	leal	(%rax,%rcx,2), %eax
    00000239: 	subl	%edx, %eax
    0000023b: 	subl	%edx, %eax
    0000023d: 	leal	(%rax,%rcx,2), %eax
    00000240: 	subl	%edx, %eax
    00000242: 	subl	%edx, %eax
    00000244: 	leal	(%rax,%rcx,2), %eax
    00000247: 	subl	%edx, %eax
    00000249: 	subl	%edx, %eax
    0000024b: 	leal	(%rax,%rcx,2), %eax
    0000024e: 	subl	%edx, %eax
    00000250: 	subl	%edx, %eax
.Ltmp1185:
    00000252: 	testl	%eax, %eax
    00000254: 	jne	.Ltmp1189 # Offset: 596
    0000025a: 	addl	$0x1, %r13d
    0000025e: 	cmpl	%r10d, %r13d
    00000261: 	jl	.Ltmp1190 # Offset: 609
.Ltmp1184:
    00000267: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000026e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000275: 	subq	$0x20, %rax
    00000279: 	cmpq	%rax, %rbx
    0000027c: 	je	.Ltmp1191 # Offset: 636
    00000282: 	movq	0x18(%rsp), %rax
    00000287: 	leaq	0x10(%rbx), %rdi
    0000028b: 	movq	%rdi, (%rbx)
    0000028e: 	movq	(%rax), %rbp
    00000291: 	movq	0x8(%rax), %r12
    00000295: 	movq	%rbp, %rax
    00000298: 	addq	%r12, %rax
    0000029b: 	je	.Ltmp1192 # Offset: 667
    0000029d: 	testq	%rbp, %rbp
    000002a0: 	je	.Ltmp1193 # Offset: 672
.Ltmp1192:
    000002a6: 	movq	%r12, 0x20(%rsp)
    000002ab: 	cmpq	$0xf, %r12
    000002af: 	ja	.Ltmp1194 # Offset: 687
    000002b5: 	cmpq	$0x1, %r12
    000002b9: 	jne	.Ltmp1195 # Offset: 697
    000002bf: 	movzbl	(%rbp), %eax
    000002c3: 	movb	%al, 0x10(%rbx)
.Ltmp1199:
    000002c6: 	movq	%r12, 0x8(%rbx)
    000002ca: 	movb	$0x0, (%rdi,%r12)
    000002cf: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002d6: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002dd: 	addq	$0x20, %rax
    000002e1: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002e8: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000002ef: 	je	.Ltmp1196 # Offset: 751
.Ltmp1200:
    000002f5: 	movq	-0x20(%rax), %rbp
    000002f9: 	callq	clock@PLT # Offset: 761
    000002fe: 	movq	%rax, end_time(%rip)
    00000305: 	movq	0x28(%rsp), %rdx
    0000030a: 	subq	%fs:0x28, %rdx
    00000313: 	jne	.Ltmp1197 # Offset: 787
    00000319: 	subq	start_time(%rip), %rax
    00000320: 	pxor	%xmm0, %xmm0
    00000324: 	movq	%rbp, %rdi
    00000327: 	cvtsi2sd	%rax, %xmm0
    0000032c: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000334: 	addq	$0x38, %rsp
    00000338: 	popq	%rbx
    00000339: 	popq	%rbp
    0000033a: 	popq	%r12
    0000033c: 	popq	%r13
    0000033e: 	popq	%r14
    00000340: 	popq	%r15
    00000342: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 834
    00000347: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1189:
    00000350: 	movq	0x18(%rsp), %rax
    00000355: 	leaq	DATAat0x4d004(%rip), %rsi
    0000035c: 	movl	$0x1, %edi
    00000361: 	movl	%r8d, 0x14(%rsp)
    00000366: 	addl	$0x1, %r13d
    0000036a: 	movq	(%rax), %rdx
    0000036d: 	xorl	%eax, %eax
    0000036f: 	callq	__printf_chk@PLT # Offset: 879
    00000374: 	movl	iterations(%rip), %r10d
    0000037b: 	cmpl	%r10d, %r13d
    0000037e: 	jge	.Ltmp1184 # Offset: 894
    00000384: 	movl	(%rbx), %r9d
    00000387: 	movl	0x4(%rbx), %edi
    0000038a: 	movl	0x14(%rsp), %r8d
    0000038f: 	jmp	.Ltmp1190 # Offset: 911
.Ltmp1186:
    00000394: 	xorl	%esi, %esi
    00000396: 	movl	$0x1, %edx
    0000039b: 	jmp	.Ltmp1198 # Offset: 923
.Ltmp1194:
    000003a0: 	movq	%rbx, %rdi
    000003a3: 	leaq	0x20(%rsp), %rsi
    000003a8: 	xorl	%edx, %edx
    000003aa: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 938
    000003af: 	movq	%rax, (%rbx)
    000003b2: 	movq	%rax, %rdi
    000003b5: 	movq	0x20(%rsp), %rax
    000003ba: 	movq	%rax, 0x10(%rbx)
.Ltmp1201:
    000003be: 	movq	%r12, %rdx
    000003c1: 	movq	%rbp, %rsi
    000003c4: 	callq	memcpy@PLT # Offset: 964
    000003c9: 	movq	0x20(%rsp), %r12
    000003ce: 	movq	(%rbx), %rdi
    000003d1: 	jmp	.Ltmp1199 # Offset: 977
.Ltmp1191:
    000003d6: 	movq	0x18(%rsp), %rsi
    000003db: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000003e2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 994
    000003e7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000003ee: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000003f5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003fc: 	jne	.Ltmp1200 # Offset: 1020
.Ltmp1196:
    00000402: 	movq	-0x8(%rdx), %rax
    00000406: 	addq	$0x200, %rax
    0000040c: 	jmp	.Ltmp1200 # Offset: 1036
.Ltmp1195:
    00000411: 	testq	%r12, %r12
    00000414: 	je	.Ltmp1199 # Offset: 1044
    0000041a: 	jmp	.Ltmp1201 # Offset: 1050
.Ltmp1197:
    0000041c: 	callq	__stack_chk_fail@PLT # Offset: 1052
.Ltmp1193:
    00000421: 	leaq	DATAat0x4d018(%rip), %rdi
    00000428: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1064
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE8Ii14custom_cse_subIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSE8Ia14custom_cse_subIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z9test_CSE8Ia14custom_cse_subIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z9test_CSE8Ia14custom_cse_subIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/simple_types_cse.cpp/1
  Number      : 110
  State       : disassembled
  Address     : 0x139c0
  Size        : 0x655
  MaxSize     : 0x660
  Offset      : 0x139c0
  Section     : .text
  Orc Section : .local.text._Z9test_CSE8Ia14custom_cse_subIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0109:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	movl	%esi, %r13d
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x78, %rsp
    00000011: 	movq	%rdi, 0x38(%rsp)
    00000016: 	movq	%rdx, 0x50(%rsp)
    0000001b: 	movq	%fs:0x28, %rax
    00000024: 	movq	%rax, 0x68(%rsp)
    00000029: 	xorl	%eax, %eax
    0000002b: 	callq	clock@PLT # Offset: 43
    00000030: 	movq	%rax, start_time(%rip)
    00000037: 	movl	iterations(%rip), %eax
    0000003d: 	movl	%eax, 0x44(%rsp)
    00000041: 	testl	%eax, %eax
    00000043: 	jle	.Ltmp1202 # Offset: 67
    00000049: 	movq	0x38(%rsp), %rax
    0000004e: 	movzbl	%r13b, %edi
    00000052: 	movd	%r13d, %xmm3
    00000057: 	movl	$0x0, 0x30(%rsp)
    0000005f: 	movw	%di, 0x40(%rsp)
    00000064: 	punpcklbw	%xmm3, %xmm3
    00000068: 	pxor	%xmm6, %xmm6
    0000006c: 	movzbl	(%rax), %ebx
    0000006f: 	movzbl	0x1f39(%rax), %edi
    00000076: 	punpcklwd	%xmm3, %xmm3
    0000007a: 	movq	0x1f30(%rax), %xmm4
    00000082: 	pshufd	$0x0, %xmm3, %xmm3
    00000087: 	movq	0x1f31(%rax), %xmm5
    0000008f: 	movb	%bl, 0x43(%rsp)
    00000093: 	movzbl	0x1(%rax), %ebx
    00000097: 	movb	%dil, 0x34(%rsp)
    0000009c: 	movzbl	0x1f3b(%rax), %edi
    000000a3: 	movb	%bl, 0x42(%rsp)
    000000a7: 	leaq	0x1f30(%rax), %rbx
    000000ae: 	movq	%rbx, 0x48(%rsp)
    000000b3: 	movzbl	0x1f38(%rax), %ebx
    000000ba: 	movb	%dil, 0x36(%rsp)
    000000bf: 	movzbl	0x1f3d(%rax), %edi
    000000c6: 	movb	%bl, 0x12(%rsp)
    000000ca: 	movzbl	0x1f3a(%rax), %ebx
    000000d1: 	movb	%dil, 0x10(%rsp)
    000000d6: 	movb	%bl, 0x35(%rsp)
    000000da: 	movzbl	0x1f3c(%rax), %ebx
    000000e1: 	movb	%bl, 0x37(%rsp)
    000000e5: 	movzbl	0x1f3e(%rax), %ebx
    000000ec: 	movzbl	0x1f3f(%rax), %eax
    000000f3: 	movb	%bl, 0x11(%rsp)
    000000f7: 	movb	%al, 0x13(%rsp)
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1205:
    00000100: 	movsbl	0x43(%rsp), %esi
    00000105: 	movsbl	0x42(%rsp), %edx
    0000010a: 	pxor	%xmm2, %xmm2
    0000010e: 	movl	%esi, %ecx
    00000110: 	subl	%edx, %ecx
    00000112: 	leal	(%rcx,%r13), %eax
    00000116: 	movsbl	%al, %eax
    00000119: 	leal	(%rsi,%rax,2), %esi
    0000011c: 	leal	(%rdx,%rax,2), %edx
    0000011f: 	leal	(,%rsi,8), %eax
    00000126: 	subl	%esi, %eax
    00000128: 	subl	%edx, %eax
    0000012a: 	addl	%ecx, %eax
    0000012c: 	movq	0x48(%rsp), %rcx
    00000131: 	subl	%edx, %eax
    00000133: 	subl	%edx, %eax
    00000135: 	subl	%edx, %eax
    00000137: 	subl	%edx, %eax
    00000139: 	subl	%edx, %eax
    0000013b: 	subl	%edx, %eax
    0000013d: 	movq	0x38(%rsp), %rdx
    00000142: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1203:
    00000148: 	movdqu	(%rdx), %xmm1
    0000014c: 	movdqu	0x1(%rdx), %xmm7
    00000151: 	addq	$0x10, %rdx
    00000155: 	movdqu	-0x10(%rdx), %xmm0
    0000015a: 	paddb	%xmm3, %xmm1
    0000015e: 	movdqa	%xmm1, %xmm8
    00000163: 	psubb	%xmm7, %xmm8
    00000168: 	paddb	%xmm8, %xmm0
    0000016d: 	paddb	%xmm8, %xmm1
    00000172: 	paddb	%xmm8, %xmm0
    00000177: 	movdqa	%xmm1, %xmm7
    0000017b: 	paddb	%xmm0, %xmm0
    0000017f: 	paddb	%xmm1, %xmm7
    00000183: 	paddb	%xmm0, %xmm0
    00000187: 	psubb	%xmm7, %xmm2
    0000018b: 	paddb	%xmm0, %xmm0
    0000018f: 	psubb	%xmm1, %xmm0
    00000193: 	paddb	%xmm7, %xmm1
    00000197: 	psubb	%xmm7, %xmm0
    0000019b: 	paddb	%xmm2, %xmm0
    0000019f: 	movdqa	%xmm0, %xmm2
    000001a3: 	psubb	%xmm1, %xmm2
    000001a7: 	cmpq	%rdx, %rcx
    000001aa: 	jne	.Ltmp1203 # Offset: 426
    000001ac: 	movdqa	%xmm2, %xmm0
    000001b0: 	movzwl	0x40(%rsp), %ebx
    000001b5: 	movsbl	0x35(%rsp), %r14d
    000001bb: 	psrldq	$0x8, %xmm0
    000001c0: 	movsbl	0x34(%rsp), %r15d
    000001c6: 	paddb	%xmm0, %xmm2
    000001ca: 	psadbw	%xmm6, %xmm2
    000001ce: 	leal	(%r15,%r13), %r12d
    000001d2: 	movd	%xmm2, %edx
    000001d6: 	subl	%r14d, %r12d
    000001d9: 	addl	%edx, %eax
    000001db: 	movsbl	0x36(%rsp), %edx
    000001e0: 	movsbl	%r12b, %r12d
    000001e4: 	movb	%al, 0x2e(%rsp)
    000001e8: 	movl	%ebx, %eax
    000001ea: 	leal	(%r14,%r12,2), %r9d
    000001ee: 	shll	$0x8, %eax
    000001f1: 	movl	%edx, %esi
    000001f3: 	movl	%edx, 0x18(%rsp)
    000001f7: 	orl	%ebx, %eax
    000001f9: 	movl	%r14d, %ebx
    000001fc: 	movd	%eax, %xmm7
    00000200: 	leal	(%rbx,%r13), %ebp
    00000204: 	movl	%esi, %ebx
    00000206: 	pshuflw	$0x0, %xmm7, %xmm2
    0000020b: 	subl	%edx, %ebp
    0000020d: 	addl	%r13d, %ebx
    00000210: 	paddb	%xmm4, %xmm2
    00000214: 	movsbl	%bpl, %ebp
    00000218: 	leal	(%rdx,%rbp,2), %r8d
    0000021c: 	movsbl	0x37(%rsp), %edx
    00000221: 	movdqa	%xmm2, %xmm1
    00000225: 	subl	%edx, %ebx
    00000227: 	movl	%edx, %ecx
    00000229: 	movl	%edx, 0x14(%rsp)
    0000022d: 	psubb	%xmm5, %xmm1
    00000231: 	movsbl	%bl, %ebx
    00000234: 	leal	(%rcx,%r13), %r11d
    00000238: 	leal	(%rdx,%rbx,2), %edi
    0000023b: 	movsbl	0x10(%rsp), %edx
    00000240: 	movdqa	%xmm1, %xmm0
    00000244: 	subl	%edx, %r11d
    00000247: 	movl	%edx, 0x1c(%rsp)
    0000024b: 	paddb	%xmm4, %xmm0
    0000024f: 	movsbl	%r11b, %r11d
    00000253: 	leal	(%rdx,%r11,2), %esi
    00000257: 	movzbl	0x10(%rsp), %edx
    0000025c: 	movl	%r11d, 0x20(%rsp)
    00000261: 	movzbl	0x11(%rsp), %r11d
    00000267: 	paddb	%xmm1, %xmm0
    0000026b: 	paddb	%xmm2, %xmm1
    0000026f: 	addl	%r13d, %edx
    00000272: 	subl	%r11d, %edx
    00000275: 	movsbl	%r11b, %ecx
    00000279: 	movsbl	%dl, %edx
    0000027c: 	movl	%ecx, 0x24(%rsp)
    00000280: 	paddb	%xmm0, %xmm0
    00000284: 	movdqa	%xmm1, %xmm2
    00000288: 	leal	(%rcx,%rdx,2), %ecx
    0000028b: 	movl	%edx, 0x28(%rsp)
    0000028f: 	paddb	%xmm1, %xmm2
    00000293: 	movzbl	0x11(%rsp), %edx
    00000298: 	paddb	%xmm0, %xmm0
    0000029c: 	addl	%r13d, %edx
    0000029f: 	subb	0x13(%rsp), %dl
    000002a3: 	movsbl	%dl, %edx
    000002a6: 	movl	%edx, %r11d
    000002a9: 	movsbl	0x13(%rsp), %edx
    000002ae: 	paddb	%xmm0, %xmm0
    000002b2: 	movl	%r11d, (%rsp)
    000002b6: 	leal	(%rdx,%r11,2), %edx
    000002ba: 	movzbl	0x12(%rsp), %r11d
    000002c0: 	psubb	%xmm1, %xmm0
    000002c4: 	paddb	%xmm2, %xmm1
    000002c8: 	paddb	%xmm2, %xmm2
    000002cc: 	paddb	%xmm2, %xmm1
    000002d0: 	psubb	%xmm1, %xmm0
    000002d4: 	pxor	%xmm1, %xmm1
    000002d8: 	movdqa	%xmm0, %xmm7
    000002dc: 	psadbw	%xmm1, %xmm7
    000002e0: 	movq	%xmm7, %rax
    000002e5: 	movq	%xmm7, 0x58(%rsp)
    000002eb: 	movb	%al, 0x2f(%rsp)
    000002ef: 	movzbl	0x12(%rsp), %eax
    000002f4: 	addl	%r13d, %eax
    000002f7: 	subl	%r15d, %eax
    000002fa: 	movsbl	%al, %eax
    000002fd: 	leal	(%r15,%rax,2), %r10d
    00000301: 	leal	(%r11,%rax,2), %eax
    00000305: 	movl	0x20(%rsp), %r11d
    0000030a: 	shll	$0x3, %eax
    0000030d: 	subl	%r10d, %eax
    00000310: 	subl	%r10d, %eax
    00000313: 	subl	%r10d, %eax
    00000316: 	subl	%r10d, %eax
    00000319: 	subl	%r10d, %eax
    0000031c: 	subl	%r10d, %eax
    0000031f: 	subl	%r10d, %eax
    00000322: 	subl	%r10d, %eax
    00000325: 	movzbl	0x2f(%rsp), %r10d
    0000032b: 	addb	0x2e(%rsp), %r10b
    00000330: 	addl	%r10d, %eax
    00000333: 	leal	(%r15,%r12,2), %r10d
    00000337: 	shll	$0x3, %r10d
    0000033b: 	subl	%r9d, %r10d
    0000033e: 	subl	%r9d, %r10d
    00000341: 	subl	%r9d, %r10d
    00000344: 	subl	%r9d, %r10d
    00000347: 	subl	%r9d, %r10d
    0000034a: 	subl	%r9d, %r10d
    0000034d: 	subl	%r9d, %r10d
    00000350: 	subl	%r9d, %r10d
    00000353: 	leal	(%r14,%rbp,2), %r9d
    00000357: 	movl	0x18(%rsp), %r14d
    0000035c: 	shll	$0x3, %r9d
    00000360: 	addl	%r10d, %eax
    00000363: 	subl	%r8d, %r9d
    00000366: 	subl	%r8d, %r9d
    00000369: 	subl	%r8d, %r9d
    0000036c: 	subl	%r8d, %r9d
    0000036f: 	subl	%r8d, %r9d
    00000372: 	subl	%r8d, %r9d
    00000375: 	subl	%r8d, %r9d
    00000378: 	subl	%r8d, %r9d
    0000037b: 	leal	(%r14,%rbx,2), %r8d
    0000037f: 	movl	0x14(%rsp), %ebx
    00000383: 	shll	$0x3, %r8d
    00000387: 	addl	%r9d, %eax
    0000038a: 	subl	%edi, %r8d
    0000038d: 	subl	%edi, %r8d
    00000390: 	subl	%edi, %r8d
    00000393: 	subl	%edi, %r8d
    00000396: 	subl	%edi, %r8d
    00000399: 	subl	%edi, %r8d
    0000039c: 	subl	%edi, %r8d
    0000039f: 	subl	%edi, %r8d
    000003a2: 	leal	(%rbx,%r11,2), %edi
    000003a6: 	movl	0x1c(%rsp), %ebx
    000003aa: 	movl	0x24(%rsp), %r11d
    000003af: 	shll	$0x3, %edi
    000003b2: 	addl	%r8d, %eax
    000003b5: 	subl	%esi, %edi
    000003b7: 	subl	%esi, %edi
    000003b9: 	subl	%esi, %edi
    000003bb: 	subl	%esi, %edi
    000003bd: 	subl	%esi, %edi
    000003bf: 	subl	%esi, %edi
    000003c1: 	subl	%esi, %edi
    000003c3: 	subl	%esi, %edi
    000003c5: 	addl	%edi, %eax
    000003c7: 	movl	0x28(%rsp), %edi
    000003cb: 	leal	(%rbx,%rdi,2), %esi
    000003ce: 	movl	(%rsp), %ebx
    000003d1: 	shll	$0x3, %esi
    000003d4: 	subl	%ecx, %esi
    000003d6: 	subl	%ecx, %esi
    000003d8: 	subl	%ecx, %esi
    000003da: 	subl	%ecx, %esi
    000003dc: 	subl	%ecx, %esi
    000003de: 	subl	%ecx, %esi
    000003e0: 	subl	%ecx, %esi
    000003e2: 	subl	%ecx, %esi
    000003e4: 	leal	(%r11,%rbx,2), %ecx
    000003e8: 	shll	$0x3, %ecx
    000003eb: 	addl	%esi, %eax
    000003ed: 	subl	%edx, %ecx
    000003ef: 	subl	%edx, %ecx
    000003f1: 	subl	%edx, %ecx
    000003f3: 	subl	%edx, %ecx
    000003f5: 	subl	%edx, %ecx
    000003f7: 	subl	%edx, %ecx
    000003f9: 	subl	%edx, %ecx
    000003fb: 	subl	%edx, %ecx
    000003fd: 	addb	%al, %cl
    000003ff: 	jne	.Ltmp1204 # Offset: 1023
    00000405: 	addl	$0x1, 0x30(%rsp)
    0000040a: 	movl	0x30(%rsp), %eax
    0000040e: 	cmpl	0x44(%rsp), %eax
    00000412: 	jl	.Ltmp1205 # Offset: 1042
.Ltmp1202:
    00000418: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000041f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000426: 	subq	$0x20, %rax
    0000042a: 	cmpq	%rax, %rbx
    0000042d: 	je	.Ltmp1206 # Offset: 1069
    00000433: 	movq	0x50(%rsp), %rax
    00000438: 	leaq	0x10(%rbx), %rdi
    0000043c: 	movq	%rdi, (%rbx)
    0000043f: 	movq	(%rax), %rbp
    00000442: 	movq	0x8(%rax), %r12
    00000446: 	movq	%rbp, %rax
    00000449: 	addq	%r12, %rax
    0000044c: 	je	.Ltmp1207 # Offset: 1100
    0000044e: 	testq	%rbp, %rbp
    00000451: 	je	.Ltmp1208 # Offset: 1105
.Ltmp1207:
    00000457: 	movq	%r12, 0x60(%rsp)
    0000045c: 	cmpq	$0xf, %r12
    00000460: 	ja	.Ltmp1209 # Offset: 1120
    00000466: 	cmpq	$0x1, %r12
    0000046a: 	jne	.Ltmp1210 # Offset: 1130
    00000470: 	movzbl	(%rbp), %eax
    00000474: 	movb	%al, 0x10(%rbx)
.Ltmp1213:
    00000477: 	movq	%r12, 0x8(%rbx)
    0000047b: 	movb	$0x0, (%rdi,%r12)
    00000480: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000487: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000048e: 	addq	$0x20, %rax
    00000492: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000499: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000004a0: 	je	.Ltmp1211 # Offset: 1184
.Ltmp1214:
    000004a6: 	movq	-0x20(%rax), %rbp
    000004aa: 	callq	clock@PLT # Offset: 1194
    000004af: 	movq	%rax, end_time(%rip)
    000004b6: 	movq	0x68(%rsp), %rdx
    000004bb: 	subq	%fs:0x28, %rdx
    000004c4: 	jne	.Ltmp1212 # Offset: 1220
    000004ca: 	subq	start_time(%rip), %rax
    000004d1: 	pxor	%xmm0, %xmm0
    000004d5: 	movq	%rbp, %rdi
    000004d8: 	cvtsi2sd	%rax, %xmm0
    000004dd: 	divsd	DATAat0x4d640(%rip), %xmm0
    000004e5: 	addq	$0x78, %rsp
    000004e9: 	popq	%rbx
    000004ea: 	popq	%rbp
    000004eb: 	popq	%r12
    000004ed: 	popq	%r13
    000004ef: 	popq	%r14
    000004f1: 	popq	%r15
    000004f3: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1267
    000004f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1204:
    00000500: 	movq	0x50(%rsp), %rax
    00000505: 	leaq	DATAat0x4d004(%rip), %rsi
    0000050c: 	movl	$0x1, %edi
    00000511: 	movaps	%xmm3, (%rsp)
    00000515: 	movq	(%rax), %rdx
    00000518: 	xorl	%eax, %eax
    0000051a: 	callq	__printf_chk@PLT # Offset: 1306
    0000051f: 	addl	$0x1, 0x30(%rsp)
    00000524: 	movl	iterations(%rip), %ebx
    0000052a: 	movl	0x30(%rsp), %eax
    0000052e: 	movl	%ebx, 0x44(%rsp)
    00000532: 	cmpl	%eax, %ebx
    00000534: 	jle	.Ltmp1202 # Offset: 1332
    0000053a: 	movq	0x38(%rsp), %rax
    0000053f: 	movdqa	(%rsp), %xmm3
    00000544: 	pxor	%xmm6, %xmm6
    00000548: 	movzbl	(%rax), %ebx
    0000054b: 	movzbl	0x1f38(%rax), %edi
    00000552: 	movq	0x1f30(%rax), %xmm4
    0000055a: 	movq	0x1f31(%rax), %xmm5
    00000562: 	movb	%bl, 0x43(%rsp)
    00000566: 	movzbl	0x1(%rax), %ebx
    0000056a: 	movb	%dil, 0x12(%rsp)
    0000056f: 	movzbl	0x1f3a(%rax), %edi
    00000576: 	movb	%bl, 0x42(%rsp)
    0000057a: 	movzbl	0x1f39(%rax), %ebx
    00000581: 	movb	%dil, 0x35(%rsp)
    00000586: 	movzbl	0x1f3c(%rax), %edi
    0000058d: 	movb	%bl, 0x34(%rsp)
    00000591: 	movzbl	0x1f3b(%rax), %ebx
    00000598: 	movb	%dil, 0x37(%rsp)
    0000059d: 	movzbl	0x1f3e(%rax), %edi
    000005a4: 	movb	%bl, 0x36(%rsp)
    000005a8: 	movzbl	0x1f3d(%rax), %ebx
    000005af: 	movzbl	0x1f3f(%rax), %eax
    000005b6: 	movb	%dil, 0x11(%rsp)
    000005bb: 	movb	%bl, 0x10(%rsp)
    000005bf: 	movb	%al, 0x13(%rsp)
    000005c3: 	jmp	.Ltmp1205 # Offset: 1475
.Ltmp1209:
    000005c8: 	movq	%rbx, %rdi
    000005cb: 	leaq	0x60(%rsp), %rsi
    000005d0: 	xorl	%edx, %edx
    000005d2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1490
    000005d7: 	movq	%rax, (%rbx)
    000005da: 	movq	%rax, %rdi
    000005dd: 	movq	0x60(%rsp), %rax
    000005e2: 	movq	%rax, 0x10(%rbx)
.Ltmp1215:
    000005e6: 	movq	%r12, %rdx
    000005e9: 	movq	%rbp, %rsi
    000005ec: 	callq	memcpy@PLT # Offset: 1516
    000005f1: 	movq	0x60(%rsp), %r12
    000005f6: 	movq	(%rbx), %rdi
    000005f9: 	jmp	.Ltmp1213 # Offset: 1529
.Ltmp1206:
    000005fe: 	movq	0x50(%rsp), %rsi
    00000603: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000060a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1546
    0000060f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000616: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000061d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000624: 	jne	.Ltmp1214 # Offset: 1572
.Ltmp1211:
    0000062a: 	movq	-0x8(%rdx), %rax
    0000062e: 	addq	$0x200, %rax
    00000634: 	jmp	.Ltmp1214 # Offset: 1588
.Ltmp1210:
    00000639: 	testq	%r12, %r12
    0000063c: 	je	.Ltmp1213 # Offset: 1596
    00000642: 	jmp	.Ltmp1215 # Offset: 1602
.Ltmp1212:
    00000644: 	callq	__stack_chk_fail@PLT # Offset: 1604
.Ltmp1208:
    00000649: 	leaq	DATAat0x4d018(%rip), %rdi
    00000650: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1616
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE8Ia14custom_cse_subIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z9test_CSE8Ih14custom_cse_divIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 111
  State       : disassembled
  Address     : 0x14020
  Size        : 0x2bc
  MaxSize     : 0x2c0
  Offset      : 0x14020
  Section     : .text
  Orc Section : .local.text._Z9test_CSE8Ih14custom_cse_divIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0110:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%esi, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movl	%edx, %ebx
    00000016: 	subq	$0x28, %rsp
    0000001a: 	movq	%rcx, 0x8(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x18(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r11d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r11d, %r11d
    00000045: 	jle	.Ltmp1216 # Offset: 69
    0000004b: 	leal	-0x2(%r13), %eax
    0000004f: 	movzbl	(%r12), %r10d
    00000054: 	movzbl	0x1(%r12), %r9d
    0000005a: 	xorl	%r14d, %r14d
    0000005d: 	leaq	0x2(%r12,%rax), %rbp
    00000062: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1220:
    00000068: 	movzbl	%r10b, %eax
    0000006c: 	movzbl	%r9b, %ecx
    00000070: 	movzbl	%r10b, %edi
    00000074: 	movl	%r10d, %edx
    00000077: 	divb	%r9b
    0000007a: 	addl	%ebx, %eax
    0000007c: 	movzbl	%al, %eax
    0000007f: 	leal	(%rcx,%rax,2), %esi
    00000082: 	leal	(%rdi,%rax,2), %eax
    00000085: 	leal	(,%rax,8), %ecx
    0000008c: 	subl	%eax, %ecx
    0000008e: 	movl	%r10d, %eax
    00000091: 	subl	%r9d, %eax
    00000094: 	addl	%eax, %ecx
    00000096: 	subl	%esi, %ecx
    00000098: 	subl	%esi, %ecx
    0000009a: 	subl	%esi, %ecx
    0000009c: 	subl	%esi, %ecx
    0000009e: 	subl	%esi, %ecx
    000000a0: 	subl	%esi, %ecx
    000000a2: 	subl	%esi, %ecx
    000000a4: 	cmpl	$0x1, %r13d
    000000a8: 	jle	.Ltmp1217 # Offset: 168
    000000aa: 	leaq	0x1(%r12), %rsi
    000000af: 	nop # Size: 1
.Ltmp1218:
    000000b0: 	movl	%edi, %r15d
    000000b3: 	movzbl	(%rsi), %edi
    000000b6: 	movzbl	%dl, %eax
    000000b9: 	addq	$0x1, %rsi
    000000bd: 	divb	%dil
    000000c0: 	movl	%edi, %edx
    000000c2: 	addl	%ebx, %eax
    000000c4: 	movzbl	%al, %eax
    000000c7: 	leal	(%rdi,%rax,2), %r8d
    000000cb: 	leal	(%r15,%rax,2), %eax
    000000cf: 	shll	$0x3, %eax
    000000d2: 	subl	%r8d, %eax
    000000d5: 	subl	%r8d, %eax
    000000d8: 	subl	%r8d, %eax
    000000db: 	subl	%r8d, %eax
    000000de: 	subl	%r8d, %eax
    000000e1: 	subl	%r8d, %eax
    000000e4: 	addl	%r8d, %r8d
    000000e7: 	subl	%r8d, %eax
    000000ea: 	addl	%eax, %ecx
    000000ec: 	cmpq	%rbp, %rsi
    000000ef: 	jne	.Ltmp1218 # Offset: 239
.Ltmp1217:
    000000f1: 	testb	%cl, %cl
    000000f3: 	jne	.Ltmp1219 # Offset: 243
    000000f9: 	addl	$0x1, %r14d
    000000fd: 	cmpl	%r11d, %r14d
    00000100: 	jl	.Ltmp1220 # Offset: 256
.Ltmp1216:
    00000106: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000010d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000114: 	subq	$0x20, %rax
    00000118: 	cmpq	%rax, %rbx
    0000011b: 	je	.Ltmp1221 # Offset: 283
    00000121: 	movq	0x8(%rsp), %rax
    00000126: 	leaq	0x10(%rbx), %rdi
    0000012a: 	movq	%rdi, (%rbx)
    0000012d: 	movq	(%rax), %rbp
    00000130: 	movq	0x8(%rax), %r12
    00000134: 	movq	%rbp, %rax
    00000137: 	addq	%r12, %rax
    0000013a: 	je	.Ltmp1222 # Offset: 314
    0000013c: 	testq	%rbp, %rbp
    0000013f: 	je	.Ltmp1223 # Offset: 319
.Ltmp1222:
    00000145: 	movq	%r12, 0x10(%rsp)
    0000014a: 	cmpq	$0xf, %r12
    0000014e: 	ja	.Ltmp1224 # Offset: 334
    00000154: 	cmpq	$0x1, %r12
    00000158: 	jne	.Ltmp1225 # Offset: 344
    0000015e: 	movzbl	(%rbp), %eax
    00000162: 	movb	%al, 0x10(%rbx)
.Ltmp1228:
    00000165: 	movq	%r12, 0x8(%rbx)
    00000169: 	movb	$0x0, (%rdi,%r12)
    0000016e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000175: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000017c: 	addq	$0x20, %rax
    00000180: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000187: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000018e: 	je	.Ltmp1226 # Offset: 398
.Ltmp1229:
    00000194: 	movq	-0x20(%rax), %rbp
    00000198: 	callq	clock@PLT # Offset: 408
    0000019d: 	movq	%rax, end_time(%rip)
    000001a4: 	movq	0x18(%rsp), %rdx
    000001a9: 	subq	%fs:0x28, %rdx
    000001b2: 	jne	.Ltmp1227 # Offset: 434
    000001b8: 	subq	start_time(%rip), %rax
    000001bf: 	pxor	%xmm0, %xmm0
    000001c3: 	movq	%rbp, %rdi
    000001c6: 	cvtsi2sd	%rax, %xmm0
    000001cb: 	divsd	DATAat0x4d640(%rip), %xmm0
    000001d3: 	addq	$0x28, %rsp
    000001d7: 	popq	%rbx
    000001d8: 	popq	%rbp
    000001d9: 	popq	%r12
    000001db: 	popq	%r13
    000001dd: 	popq	%r14
    000001df: 	popq	%r15
    000001e1: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 481
    000001e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1219:
    000001f0: 	movq	0x8(%rsp), %rax
    000001f5: 	leaq	DATAat0x4d004(%rip), %rsi
    000001fc: 	movl	$0x1, %edi
    00000201: 	addl	$0x1, %r14d
    00000205: 	movq	(%rax), %rdx
    00000208: 	xorl	%eax, %eax
    0000020a: 	callq	__printf_chk@PLT # Offset: 522
    0000020f: 	movl	iterations(%rip), %r11d
    00000216: 	cmpl	%r11d, %r14d
    00000219: 	jge	.Ltmp1216 # Offset: 537
    0000021f: 	movzbl	(%r12), %r10d
    00000224: 	movzbl	0x1(%r12), %r9d
    0000022a: 	jmp	.Ltmp1220 # Offset: 554
.Ltmp1224:
    0000022f: 	movq	%rbx, %rdi
    00000232: 	leaq	0x10(%rsp), %rsi
    00000237: 	xorl	%edx, %edx
    00000239: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 569
    0000023e: 	movq	%rax, (%rbx)
    00000241: 	movq	%rax, %rdi
    00000244: 	movq	0x10(%rsp), %rax
    00000249: 	movq	%rax, 0x10(%rbx)
.Ltmp1230:
    0000024d: 	movq	%r12, %rdx
    00000250: 	movq	%rbp, %rsi
    00000253: 	callq	memcpy@PLT # Offset: 595
    00000258: 	movq	0x10(%rsp), %r12
    0000025d: 	movq	(%rbx), %rdi
    00000260: 	jmp	.Ltmp1228 # Offset: 608
.Ltmp1221:
    00000265: 	movq	0x8(%rsp), %rsi
    0000026a: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000271: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 625
    00000276: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000027d: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000284: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000028b: 	jne	.Ltmp1229 # Offset: 651
.Ltmp1226:
    00000291: 	movq	-0x8(%rdx), %rax
    00000295: 	addq	$0x200, %rax
    0000029b: 	jmp	.Ltmp1229 # Offset: 667
.Ltmp1225:
    000002a0: 	testq	%r12, %r12
    000002a3: 	je	.Ltmp1228 # Offset: 675
    000002a9: 	jmp	.Ltmp1230 # Offset: 681
.Ltmp1227:
    000002ab: 	callq	__stack_chk_fail@PLT # Offset: 683
.Ltmp1223:
    000002b0: 	leaq	DATAat0x4d018(%rip), %rdi
    000002b7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 695
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE8Ih14custom_cse_divIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSE8Ij14custom_cse_subIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 112
  State       : disassembled
  Address     : 0x142e0
  Size        : 0x3ed
  MaxSize     : 0x3f0
  Offset      : 0x142e0
  Section     : .text
  Orc Section : .local.text._Z9test_CSE8Ij14custom_cse_subIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0111:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdi, %rbx
    00000016: 	subq	$0x38, %rsp
    0000001a: 	movq	%rcx, 0x18(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x28(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r10d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r10d, %r10d
    00000045: 	jle	.Ltmp1231 # Offset: 69
    0000004b: 	leal	-0x1(%r14), %r8d
    0000004f: 	leal	-0x2(%r14), %eax
    00000053: 	movl	(%rbx), %r9d
    00000056: 	movl	0x4(%rbx), %edi
    00000059: 	movl	%eax, 0xc(%rsp)
    0000005d: 	movl	%r8d, %eax
    00000060: 	movl	%r8d, %r15d
    00000063: 	xorl	%r13d, %r13d
    00000066: 	shrl	$0x2, %eax
    00000069: 	andl	$-0x4, %r15d
    0000006d: 	subl	$0x1, %eax
    00000070: 	shlq	$0x4, %rax
    00000074: 	leaq	0x10(%rbx,%rax), %r12
    00000079: 	leal	0x1(%r15), %eax
    0000007d: 	movl	%eax, 0x10(%rsp)
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp1237:
    00000088: 	movl	%r9d, %ecx
    0000008b: 	subl	%edi, %ecx
    0000008d: 	leal	(%rbp,%rcx), %esi
    00000091: 	addl	%esi, %esi
    00000093: 	leal	(%rdi,%rsi), %edx
    00000096: 	addl	%r9d, %esi
    00000099: 	leal	(,%rsi,8), %eax
    000000a0: 	subl	%esi, %eax
    000000a2: 	subl	%edx, %eax
    000000a4: 	addl	%ecx, %eax
    000000a6: 	subl	%edx, %eax
    000000a8: 	subl	%edx, %eax
    000000aa: 	subl	%edx, %eax
    000000ac: 	subl	%edx, %eax
    000000ae: 	subl	%edx, %eax
    000000b0: 	subl	%edx, %eax
    000000b2: 	cmpl	$0x1, %r14d
    000000b6: 	jle	.Ltmp1232 # Offset: 182
    000000bc: 	cmpl	$0x2, 0xc(%rsp)
    000000c1: 	jbe	.Ltmp1233 # Offset: 193
    000000c7: 	movd	%ebp, %xmm7
    000000cb: 	movq	%rbx, %rdx
    000000ce: 	pxor	%xmm2, %xmm2
    000000d2: 	pshufd	$0x0, %xmm7, %xmm4
    000000d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1234:
    000000e0: 	movdqu	(%rdx), %xmm0
    000000e4: 	movdqu	0x4(%rdx), %xmm5
    000000e9: 	addq	$0x10, %rdx
    000000ed: 	movdqu	-0x10(%rdx), %xmm6
    000000f2: 	paddd	%xmm4, %xmm0
    000000f6: 	movdqa	%xmm5, %xmm1
    000000fa: 	psubd	%xmm5, %xmm0
    000000fe: 	pslld	$0x1, %xmm0
    00000103: 	paddd	%xmm0, %xmm1
    00000107: 	paddd	%xmm6, %xmm0
    0000010b: 	movdqa	%xmm1, %xmm3
    0000010f: 	pslld	$0x3, %xmm0
    00000114: 	paddd	%xmm1, %xmm3
    00000118: 	psubd	%xmm1, %xmm0
    0000011c: 	psubd	%xmm3, %xmm0
    00000120: 	paddd	%xmm1, %xmm3
    00000124: 	pslld	$0x1, %xmm1
    00000129: 	psubd	%xmm3, %xmm0
    0000012d: 	psubd	%xmm1, %xmm2
    00000131: 	paddd	%xmm0, %xmm2
    00000135: 	cmpq	%rdx, %r12
    00000138: 	jne	.Ltmp1234 # Offset: 312
    0000013a: 	movdqa	%xmm2, %xmm0
    0000013e: 	psrldq	$0x8, %xmm0
    00000143: 	paddd	%xmm0, %xmm2
    00000147: 	movdqa	%xmm2, %xmm0
    0000014b: 	psrldq	$0x4, %xmm0
    00000150: 	paddd	%xmm0, %xmm2
    00000154: 	movd	%xmm2, %edx
    00000158: 	addl	%edx, %eax
    0000015a: 	cmpl	%r8d, %r15d
    0000015d: 	je	.Ltmp1232 # Offset: 349
    00000163: 	movl	0x10(%rsp), %edx
    00000167: 	movl	%r15d, %esi
.Ltmp1245:
    0000016a: 	movl	%r14d, %r11d
    0000016d: 	subl	%esi, %r11d
    00000170: 	leal	-0x1(%r11), %ecx
    00000174: 	cmpl	$0x2, %r11d
    00000178: 	je	.Ltmp1235 # Offset: 376
    0000017a: 	movq	(%rbx,%rsi,4), %xmm0
    0000017f: 	movd	%ebp, %xmm7
    00000183: 	movq	0x4(%rbx,%rsi,4), %xmm1
    00000189: 	pshufd	$0xe0, %xmm7, %xmm2
    0000018e: 	paddd	%xmm0, %xmm2
    00000192: 	psubd	%xmm1, %xmm2
    00000196: 	pslld	$0x1, %xmm2
    0000019b: 	paddd	%xmm2, %xmm1
    0000019f: 	paddd	%xmm2, %xmm0
    000001a3: 	movdqa	%xmm1, %xmm3
    000001a7: 	pslld	$0x3, %xmm0
    000001ac: 	movdqa	%xmm1, %xmm2
    000001b0: 	paddd	%xmm1, %xmm3
    000001b4: 	psubd	%xmm1, %xmm0
    000001b8: 	pslld	$0x1, %xmm2
    000001bd: 	paddd	%xmm2, %xmm1
    000001c1: 	psubd	%xmm3, %xmm0
    000001c5: 	psubd	%xmm3, %xmm0
    000001c9: 	psubd	%xmm1, %xmm0
    000001cd: 	movd	%xmm0, %r11d
    000001d2: 	pshufd	$0xe5, %xmm0, %xmm7
    000001d7: 	movd	%xmm7, %esi
    000001db: 	addl	%r11d, %esi
    000001de: 	addl	%esi, %eax
    000001e0: 	movl	%ecx, %esi
    000001e2: 	andl	$-0x2, %esi
    000001e5: 	addl	%esi, %edx
    000001e7: 	cmpl	%ecx, %esi
    000001e9: 	je	.Ltmp1232 # Offset: 489
.Ltmp1235:
    000001eb: 	movslq	%edx, %rdx
    000001ee: 	movl	-0x4(%rbx,%rdx,4), %esi
    000001f2: 	movl	(%rbx,%rdx,4), %edx
    000001f5: 	movl	%esi, %ecx
    000001f7: 	subl	%edx, %ecx
    000001f9: 	addl	%ebp, %ecx
    000001fb: 	addl	%ecx, %ecx
    000001fd: 	addl	%ecx, %edx
    000001ff: 	addl	%esi, %ecx
    00000201: 	leal	(%rax,%rcx,8), %eax
    00000204: 	subl	%edx, %eax
    00000206: 	subl	%edx, %eax
    00000208: 	subl	%edx, %eax
    0000020a: 	subl	%edx, %eax
    0000020c: 	subl	%edx, %eax
    0000020e: 	subl	%edx, %eax
    00000210: 	addl	%edx, %edx
    00000212: 	subl	%edx, %eax
.Ltmp1232:
    00000214: 	testl	%eax, %eax
    00000216: 	jne	.Ltmp1236 # Offset: 534
    0000021c: 	addl	$0x1, %r13d
    00000220: 	cmpl	%r10d, %r13d
    00000223: 	jl	.Ltmp1237 # Offset: 547
.Ltmp1231:
    00000229: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000230: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000237: 	subq	$0x20, %rax
    0000023b: 	cmpq	%rax, %rbx
    0000023e: 	je	.Ltmp1238 # Offset: 574
    00000244: 	movq	0x18(%rsp), %rax
    00000249: 	leaq	0x10(%rbx), %rdi
    0000024d: 	movq	%rdi, (%rbx)
    00000250: 	movq	(%rax), %rbp
    00000253: 	movq	0x8(%rax), %r12
    00000257: 	movq	%rbp, %rax
    0000025a: 	addq	%r12, %rax
    0000025d: 	je	.Ltmp1239 # Offset: 605
    0000025f: 	testq	%rbp, %rbp
    00000262: 	je	.Ltmp1240 # Offset: 610
.Ltmp1239:
    00000268: 	movq	%r12, 0x20(%rsp)
    0000026d: 	cmpq	$0xf, %r12
    00000271: 	ja	.Ltmp1241 # Offset: 625
    00000277: 	cmpq	$0x1, %r12
    0000027b: 	jne	.Ltmp1242 # Offset: 635
    00000281: 	movzbl	(%rbp), %eax
    00000285: 	movb	%al, 0x10(%rbx)
.Ltmp1246:
    00000288: 	movq	%r12, 0x8(%rbx)
    0000028c: 	movb	$0x0, (%rdi,%r12)
    00000291: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000298: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000029f: 	addq	$0x20, %rax
    000002a3: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002aa: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000002b1: 	je	.Ltmp1243 # Offset: 689
.Ltmp1247:
    000002b7: 	movq	-0x20(%rax), %rbp
    000002bb: 	callq	clock@PLT # Offset: 699
    000002c0: 	movq	%rax, end_time(%rip)
    000002c7: 	movq	0x28(%rsp), %rdx
    000002cc: 	subq	%fs:0x28, %rdx
    000002d5: 	jne	.Ltmp1244 # Offset: 725
    000002db: 	subq	start_time(%rip), %rax
    000002e2: 	pxor	%xmm0, %xmm0
    000002e6: 	movq	%rbp, %rdi
    000002e9: 	cvtsi2sd	%rax, %xmm0
    000002ee: 	divsd	DATAat0x4d640(%rip), %xmm0
    000002f6: 	addq	$0x38, %rsp
    000002fa: 	popq	%rbx
    000002fb: 	popq	%rbp
    000002fc: 	popq	%r12
    000002fe: 	popq	%r13
    00000300: 	popq	%r14
    00000302: 	popq	%r15
    00000304: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 772
    00000309: 	nopl	(%rax) # Size: 7
.Ltmp1236:
    00000310: 	movq	0x18(%rsp), %rax
    00000315: 	leaq	DATAat0x4d004(%rip), %rsi
    0000031c: 	movl	$0x1, %edi
    00000321: 	movl	%r8d, 0x14(%rsp)
    00000326: 	addl	$0x1, %r13d
    0000032a: 	movq	(%rax), %rdx
    0000032d: 	xorl	%eax, %eax
    0000032f: 	callq	__printf_chk@PLT # Offset: 815
    00000334: 	movl	iterations(%rip), %r10d
    0000033b: 	cmpl	%r10d, %r13d
    0000033e: 	jge	.Ltmp1231 # Offset: 830
    00000344: 	movl	(%rbx), %r9d
    00000347: 	movl	0x4(%rbx), %edi
    0000034a: 	movl	0x14(%rsp), %r8d
    0000034f: 	jmp	.Ltmp1237 # Offset: 847
.Ltmp1233:
    00000354: 	xorl	%esi, %esi
    00000356: 	movl	$0x1, %edx
    0000035b: 	jmp	.Ltmp1245 # Offset: 859
.Ltmp1241:
    00000360: 	movq	%rbx, %rdi
    00000363: 	leaq	0x20(%rsp), %rsi
    00000368: 	xorl	%edx, %edx
    0000036a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 874
    0000036f: 	movq	%rax, (%rbx)
    00000372: 	movq	%rax, %rdi
    00000375: 	movq	0x20(%rsp), %rax
    0000037a: 	movq	%rax, 0x10(%rbx)
.Ltmp1248:
    0000037e: 	movq	%r12, %rdx
    00000381: 	movq	%rbp, %rsi
    00000384: 	callq	memcpy@PLT # Offset: 900
    00000389: 	movq	0x20(%rsp), %r12
    0000038e: 	movq	(%rbx), %rdi
    00000391: 	jmp	.Ltmp1246 # Offset: 913
.Ltmp1238:
    00000396: 	movq	0x18(%rsp), %rsi
    0000039b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000003a2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 930
    000003a7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000003ae: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000003b5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003bc: 	jne	.Ltmp1247 # Offset: 956
.Ltmp1243:
    000003c2: 	movq	-0x8(%rdx), %rax
    000003c6: 	addq	$0x200, %rax
    000003cc: 	jmp	.Ltmp1247 # Offset: 972
.Ltmp1242:
    000003d1: 	testq	%r12, %r12
    000003d4: 	je	.Ltmp1246 # Offset: 980
    000003da: 	jmp	.Ltmp1248 # Offset: 986
.Ltmp1244:
    000003dc: 	callq	__stack_chk_fail@PLT # Offset: 988
.Ltmp1240:
    000003e1: 	leaq	DATAat0x4d018(%rip), %rdi
    000003e8: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1000
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE8Ij14custom_cse_subIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z28test_CSE8_add_inline_flippedIh14custom_cse_addIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 113
  State       : disassembled
  Address     : 0x146d0
  Size        : 0x588
  MaxSize     : 0x590
  Offset      : 0x146d0
  Section     : .text
  Orc Section : .local.text._Z28test_CSE8_add_inline_flippedIh14custom_cse_addIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0112:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movl	%esi, %r12d
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdi, %rbx
    00000016: 	subq	$0x48, %rsp
    0000001a: 	movq	%rcx, 0x20(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x38(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r9d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r9d, %r9d
    00000045: 	jle	.Ltmp1249 # Offset: 69
    0000004b: 	leal	-0x1(%r12), %edi
    00000050: 	leal	-0x2(%r12), %eax
    00000055: 	movd	%ebp, %xmm2
    00000059: 	xorl	%r14d, %r14d
    0000005c: 	movl	%eax, 0x4(%rsp)
    00000060: 	movl	%edi, %eax
    00000062: 	punpcklbw	%xmm2, %xmm2
    00000066: 	movzbl	(%rbx), %r8d
    0000006a: 	shrl	$0x4, %eax
    0000006d: 	movl	%edi, 0x8(%rsp)
    00000071: 	andl	$-0x10, %edi
    00000074: 	punpcklwd	%xmm2, %xmm2
    00000078: 	subl	$0x1, %eax
    0000007b: 	movl	%edi, %r15d
    0000007e: 	shlq	$0x4, %rax
    00000082: 	leaq	0x10(%rbx,%rax), %r13
    00000087: 	leal	0x1(%rdi), %eax
    0000008a: 	movzbl	0x1(%rbx), %edi
    0000008e: 	movl	%eax, 0xc(%rsp)
    00000092: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1255:
    00000098: 	leal	(%r8,%rdi), %ecx
    0000009c: 	addl	%ebp, %ecx
    0000009e: 	addl	%ecx, %ecx
    000000a0: 	leal	(%rdi,%rcx), %eax
    000000a3: 	addl	%r8d, %ecx
    000000a6: 	leal	(,%rcx,8), %edx
    000000ad: 	subl	%ecx, %edx
    000000af: 	movl	%r8d, %ecx
    000000b2: 	subl	%edi, %ecx
    000000b4: 	addl	%ecx, %edx
    000000b6: 	subl	%eax, %edx
    000000b8: 	subl	%eax, %edx
    000000ba: 	subl	%eax, %edx
    000000bc: 	subl	%eax, %edx
    000000be: 	subl	%eax, %edx
    000000c0: 	subl	%eax, %edx
    000000c2: 	subl	%eax, %edx
    000000c4: 	cmpl	$0x1, %r12d
    000000c8: 	jle	.Ltmp1250 # Offset: 200
    000000ce: 	cmpl	$0xe, 0x4(%rsp)
    000000d3: 	jbe	.Ltmp1251 # Offset: 211
    000000d9: 	pshufd	$0x0, %xmm2, %xmm5
    000000de: 	movq	%rbx, %rax
    000000e1: 	pxor	%xmm3, %xmm3
    000000e5: 	nopl	(%rax) # Size: 3
.Ltmp1252:
    000000e8: 	movdqu	(%rax), %xmm6
    000000ec: 	movdqu	0x1(%rax), %xmm0
    000000f1: 	addq	$0x10, %rax
    000000f5: 	movdqu	-0xf(%rax), %xmm1
    000000fa: 	paddb	%xmm6, %xmm0
    000000fe: 	paddb	%xmm5, %xmm0
    00000102: 	paddb	%xmm0, %xmm0
    00000106: 	paddb	%xmm0, %xmm1
    0000010a: 	paddb	%xmm6, %xmm0
    0000010e: 	paddb	%xmm0, %xmm0
    00000112: 	movdqa	%xmm1, %xmm4
    00000116: 	paddb	%xmm0, %xmm0
    0000011a: 	paddb	%xmm1, %xmm4
    0000011e: 	paddb	%xmm0, %xmm0
    00000122: 	psubb	%xmm4, %xmm3
    00000126: 	psubb	%xmm1, %xmm0
    0000012a: 	paddb	%xmm4, %xmm1
    0000012e: 	psubb	%xmm4, %xmm0
    00000132: 	psubb	%xmm1, %xmm0
    00000136: 	paddb	%xmm0, %xmm3
    0000013a: 	cmpq	%rax, %r13
    0000013d: 	jne	.Ltmp1252 # Offset: 317
    0000013f: 	movdqa	%xmm3, %xmm0
    00000143: 	psrldq	$0x8, %xmm0
    00000148: 	paddb	%xmm0, %xmm3
    0000014c: 	pxor	%xmm0, %xmm0
    00000150: 	psadbw	%xmm0, %xmm3
    00000154: 	movd	%xmm3, %eax
    00000158: 	addl	%eax, %edx
    0000015a: 	cmpl	0x8(%rsp), %r15d
    0000015f: 	je	.Ltmp1250 # Offset: 351
    00000165: 	movl	0xc(%rsp), %ecx
    00000169: 	movl	%r15d, %eax
.Ltmp1263:
    0000016c: 	movl	%r12d, %r10d
    0000016f: 	subl	%eax, %r10d
    00000172: 	leal	-0x1(%r10), %esi
    00000176: 	subl	$0x2, %r10d
    0000017a: 	cmpl	$0x6, %r10d
    0000017e: 	jbe	.Ltmp1253 # Offset: 382
    00000184: 	movq	0x1(%rbx,%rax), %xmm3
    0000018a: 	movq	(%rbx,%rax), %xmm1
    0000018f: 	movl	%ebp, %eax
    00000191: 	movzbl	%bpl, %r10d
    00000195: 	shll	$0x8, %eax
    00000198: 	orl	%r10d, %eax
    0000019b: 	movd	%eax, %xmm6
    0000019f: 	pshuflw	$0x0, %xmm6, %xmm0
    000001a4: 	paddb	%xmm1, %xmm0
    000001a8: 	paddb	%xmm3, %xmm0
    000001ac: 	paddb	%xmm0, %xmm0
    000001b0: 	paddb	%xmm0, %xmm1
    000001b4: 	paddb	%xmm3, %xmm0
    000001b8: 	paddb	%xmm1, %xmm1
    000001bc: 	movdqa	%xmm0, %xmm3
    000001c0: 	paddb	%xmm0, %xmm3
    000001c4: 	paddb	%xmm1, %xmm1
    000001c8: 	paddb	%xmm1, %xmm1
    000001cc: 	psubb	%xmm0, %xmm1
    000001d0: 	paddb	%xmm3, %xmm0
    000001d4: 	paddb	%xmm3, %xmm3
    000001d8: 	paddb	%xmm3, %xmm0
    000001dc: 	psubb	%xmm0, %xmm1
    000001e0: 	pxor	%xmm0, %xmm0
    000001e4: 	movdqa	%xmm1, %xmm5
    000001e8: 	psadbw	%xmm0, %xmm5
    000001ec: 	movq	%xmm5, %rax
    000001f1: 	movq	%xmm5, 0x28(%rsp)
    000001f7: 	movl	%eax, %r10d
    000001fa: 	movl	%esi, %eax
    000001fc: 	andl	$-0x8, %eax
    000001ff: 	addl	%r10d, %edx
    00000202: 	addl	%eax, %ecx
    00000204: 	cmpl	%esi, %eax
    00000206: 	je	.Ltmp1250 # Offset: 518
.Ltmp1253:
    0000020c: 	movslq	%ecx, %rax
    0000020f: 	addq	%rbx, %rax
    00000212: 	movzbl	-0x1(%rax), %esi
    00000216: 	movzbl	(%rax), %eax
    00000219: 	leal	(%rsi,%rax), %r11d
    0000021d: 	addl	%ebp, %r11d
    00000220: 	addl	%r11d, %r11d
    00000223: 	addl	%r11d, %esi
    00000226: 	leal	(%r11,%rax), %r10d
    0000022a: 	leal	(%rdx,%rsi,8), %edx
    0000022d: 	leal	0x1(%rcx), %esi
    00000230: 	subl	%r10d, %edx
    00000233: 	subl	%r10d, %edx
    00000236: 	subl	%r10d, %edx
    00000239: 	subl	%r10d, %edx
    0000023c: 	subl	%r10d, %edx
    0000023f: 	subl	%r10d, %edx
    00000242: 	addl	%r10d, %r10d
    00000245: 	subl	%r10d, %edx
    00000248: 	cmpl	%esi, %r12d
    0000024b: 	jle	.Ltmp1250 # Offset: 587
    00000251: 	movslq	%esi, %rsi
    00000254: 	leal	(%rbp,%rax), %r11d
    00000259: 	movzbl	(%rbx,%rsi), %esi
    0000025d: 	addl	%esi, %r11d
    00000260: 	addl	%r11d, %r11d
    00000263: 	addl	%r11d, %eax
    00000266: 	leal	(%r11,%rsi), %r10d
    0000026a: 	shll	$0x3, %eax
    0000026d: 	subl	%r10d, %eax
    00000270: 	subl	%r10d, %eax
    00000273: 	subl	%r10d, %eax
    00000276: 	subl	%r10d, %eax
    00000279: 	subl	%r10d, %eax
    0000027c: 	subl	%r10d, %eax
    0000027f: 	addl	%r10d, %r10d
    00000282: 	subl	%r10d, %eax
    00000285: 	addl	%eax, %edx
    00000287: 	leal	0x2(%rcx), %eax
    0000028a: 	cmpl	%eax, %r12d
    0000028d: 	jle	.Ltmp1250 # Offset: 653
    00000293: 	cltq
    00000295: 	movzbl	(%rbx,%rax), %r10d
    0000029a: 	leal	(%rbp,%rsi), %eax
    0000029e: 	addl	%r10d, %eax
    000002a1: 	addl	%eax, %eax
    000002a3: 	leal	(%r10,%rax), %r11d
    000002a7: 	addl	%esi, %eax
    000002a9: 	shll	$0x3, %eax
    000002ac: 	subl	%r11d, %eax
    000002af: 	subl	%r11d, %eax
    000002b2: 	subl	%r11d, %eax
    000002b5: 	subl	%r11d, %eax
    000002b8: 	subl	%r11d, %eax
    000002bb: 	subl	%r11d, %eax
    000002be: 	addl	%r11d, %r11d
    000002c1: 	subl	%r11d, %eax
    000002c4: 	addl	%eax, %edx
    000002c6: 	leal	0x3(%rcx), %eax
    000002c9: 	cmpl	%eax, %r12d
    000002cc: 	jle	.Ltmp1250 # Offset: 716
    000002d2: 	cltq
    000002d4: 	movzbl	(%rbx,%rax), %esi
    000002d8: 	leal	(%rbp,%r10), %eax
    000002dd: 	addl	%esi, %eax
    000002df: 	addl	%eax, %eax
    000002e1: 	leal	(%rsi,%rax), %r11d
    000002e5: 	addl	%r10d, %eax
    000002e8: 	shll	$0x3, %eax
    000002eb: 	subl	%r11d, %eax
    000002ee: 	subl	%r11d, %eax
    000002f1: 	subl	%r11d, %eax
    000002f4: 	subl	%r11d, %eax
    000002f7: 	subl	%r11d, %eax
    000002fa: 	subl	%r11d, %eax
    000002fd: 	addl	%r11d, %r11d
    00000300: 	subl	%r11d, %eax
    00000303: 	addl	%eax, %edx
    00000305: 	leal	0x4(%rcx), %eax
    00000308: 	cmpl	%eax, %r12d
    0000030b: 	jle	.Ltmp1250 # Offset: 779
    00000311: 	cltq
    00000313: 	movzbl	(%rbx,%rax), %r10d
    00000318: 	leal	(%rbp,%rsi), %eax
    0000031c: 	addl	%r10d, %eax
    0000031f: 	addl	%eax, %eax
    00000321: 	leal	(%r10,%rax), %r11d
    00000325: 	addl	%esi, %eax
    00000327: 	shll	$0x3, %eax
    0000032a: 	subl	%r11d, %eax
    0000032d: 	subl	%r11d, %eax
    00000330: 	subl	%r11d, %eax
    00000333: 	subl	%r11d, %eax
    00000336: 	subl	%r11d, %eax
    00000339: 	subl	%r11d, %eax
    0000033c: 	addl	%r11d, %r11d
    0000033f: 	subl	%r11d, %eax
    00000342: 	addl	%eax, %edx
    00000344: 	leal	0x5(%rcx), %eax
    00000347: 	cmpl	%eax, %r12d
    0000034a: 	jle	.Ltmp1250 # Offset: 842
    0000034c: 	cltq
    0000034e: 	leal	(%rbp,%r10), %esi
    00000353: 	addl	$0x6, %ecx
    00000356: 	movzbl	(%rbx,%rax), %eax
    0000035a: 	addl	%eax, %esi
    0000035c: 	addl	%esi, %esi
    0000035e: 	leal	(%rax,%rsi), %r11d
    00000362: 	addl	%r10d, %esi
    00000365: 	shll	$0x3, %esi
    00000368: 	subl	%r11d, %esi
    0000036b: 	subl	%r11d, %esi
    0000036e: 	subl	%r11d, %esi
    00000371: 	subl	%r11d, %esi
    00000374: 	subl	%r11d, %esi
    00000377: 	subl	%r11d, %esi
    0000037a: 	addl	%r11d, %r11d
    0000037d: 	subl	%r11d, %esi
    00000380: 	addl	%esi, %edx
    00000382: 	cmpl	%ecx, %r12d
    00000385: 	jle	.Ltmp1250 # Offset: 901
    00000387: 	movslq	%ecx, %rcx
    0000038a: 	movzbl	(%rbx,%rcx), %esi
    0000038e: 	leal	(%rbp,%rax), %ecx
    00000392: 	addl	%esi, %ecx
    00000394: 	addl	%ecx, %ecx
    00000396: 	addl	%ecx, %eax
    00000398: 	addl	%ecx, %esi
    0000039a: 	shll	$0x3, %eax
    0000039d: 	subl	%esi, %eax
    0000039f: 	subl	%esi, %eax
    000003a1: 	subl	%esi, %eax
    000003a3: 	subl	%esi, %eax
    000003a5: 	subl	%esi, %eax
    000003a7: 	subl	%esi, %eax
    000003a9: 	addl	%esi, %esi
    000003ab: 	subl	%esi, %eax
    000003ad: 	addl	%eax, %edx
.Ltmp1250:
    000003af: 	testb	%dl, %dl
    000003b1: 	jne	.Ltmp1254 # Offset: 945
    000003b7: 	addl	$0x1, %r14d
    000003bb: 	cmpl	%r9d, %r14d
    000003be: 	jl	.Ltmp1255 # Offset: 958
.Ltmp1249:
    000003c4: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000003cb: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000003d2: 	subq	$0x20, %rax
    000003d6: 	cmpq	%rax, %rbx
    000003d9: 	je	.Ltmp1256 # Offset: 985
    000003df: 	movq	0x20(%rsp), %rax
    000003e4: 	leaq	0x10(%rbx), %rdi
    000003e8: 	movq	%rdi, (%rbx)
    000003eb: 	movq	(%rax), %rbp
    000003ee: 	movq	0x8(%rax), %r12
    000003f2: 	movq	%rbp, %rax
    000003f5: 	addq	%r12, %rax
    000003f8: 	je	.Ltmp1257 # Offset: 1016
    000003fa: 	testq	%rbp, %rbp
    000003fd: 	je	.Ltmp1258 # Offset: 1021
.Ltmp1257:
    00000403: 	movq	%r12, 0x30(%rsp)
    00000408: 	cmpq	$0xf, %r12
    0000040c: 	ja	.Ltmp1259 # Offset: 1036
    00000412: 	cmpq	$0x1, %r12
    00000416: 	jne	.Ltmp1260 # Offset: 1046
    0000041c: 	movzbl	(%rbp), %eax
    00000420: 	movb	%al, 0x10(%rbx)
.Ltmp1264:
    00000423: 	movq	%r12, 0x8(%rbx)
    00000427: 	movb	$0x0, (%rdi,%r12)
    0000042c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000433: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000043a: 	addq	$0x20, %rax
    0000043e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000445: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000044c: 	je	.Ltmp1261 # Offset: 1100
.Ltmp1265:
    00000452: 	movq	-0x20(%rax), %rbp
    00000456: 	callq	clock@PLT # Offset: 1110
    0000045b: 	movq	%rax, end_time(%rip)
    00000462: 	movq	0x38(%rsp), %rdx
    00000467: 	subq	%fs:0x28, %rdx
    00000470: 	jne	.Ltmp1262 # Offset: 1136
    00000476: 	subq	start_time(%rip), %rax
    0000047d: 	pxor	%xmm0, %xmm0
    00000481: 	movq	%rbp, %rdi
    00000484: 	cvtsi2sd	%rax, %xmm0
    00000489: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000491: 	addq	$0x48, %rsp
    00000495: 	popq	%rbx
    00000496: 	popq	%rbp
    00000497: 	popq	%r12
    00000499: 	popq	%r13
    0000049b: 	popq	%r14
    0000049d: 	popq	%r15
    0000049f: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1183
    000004a4: 	nopl	(%rax) # Size: 4
.Ltmp1254:
    000004a8: 	movq	0x20(%rsp), %rax
    000004ad: 	leaq	DATAat0x4d004(%rip), %rsi
    000004b4: 	movl	$0x1, %edi
    000004b9: 	movaps	%xmm2, 0x10(%rsp)
    000004be: 	addl	$0x1, %r14d
    000004c2: 	movq	(%rax), %rdx
    000004c5: 	xorl	%eax, %eax
    000004c7: 	callq	__printf_chk@PLT # Offset: 1223
    000004cc: 	movl	iterations(%rip), %r9d
    000004d3: 	cmpl	%r14d, %r9d
    000004d6: 	jle	.Ltmp1249 # Offset: 1238
    000004dc: 	movzbl	(%rbx), %r8d
    000004e0: 	movzbl	0x1(%rbx), %edi
    000004e4: 	movdqa	0x10(%rsp), %xmm2
    000004ea: 	jmp	.Ltmp1255 # Offset: 1258
.Ltmp1251:
    000004ef: 	xorl	%eax, %eax
    000004f1: 	movl	$0x1, %ecx
    000004f6: 	jmp	.Ltmp1263 # Offset: 1270
.Ltmp1259:
    000004fb: 	movq	%rbx, %rdi
    000004fe: 	leaq	0x30(%rsp), %rsi
    00000503: 	xorl	%edx, %edx
    00000505: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1285
    0000050a: 	movq	%rax, (%rbx)
    0000050d: 	movq	%rax, %rdi
    00000510: 	movq	0x30(%rsp), %rax
    00000515: 	movq	%rax, 0x10(%rbx)
.Ltmp1266:
    00000519: 	movq	%r12, %rdx
    0000051c: 	movq	%rbp, %rsi
    0000051f: 	callq	memcpy@PLT # Offset: 1311
    00000524: 	movq	0x30(%rsp), %r12
    00000529: 	movq	(%rbx), %rdi
    0000052c: 	jmp	.Ltmp1264 # Offset: 1324
.Ltmp1256:
    00000531: 	movq	0x20(%rsp), %rsi
    00000536: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000053d: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1341
    00000542: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000549: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000550: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000557: 	jne	.Ltmp1265 # Offset: 1367
.Ltmp1261:
    0000055d: 	movq	-0x8(%rdx), %rax
    00000561: 	addq	$0x200, %rax
    00000567: 	jmp	.Ltmp1265 # Offset: 1383
.Ltmp1260:
    0000056c: 	testq	%r12, %r12
    0000056f: 	je	.Ltmp1264 # Offset: 1391
    00000575: 	jmp	.Ltmp1266 # Offset: 1397
.Ltmp1262:
    00000577: 	callq	__stack_chk_fail@PLT # Offset: 1399
.Ltmp1258:
    0000057c: 	leaq	DATAat0x4d018(%rip), %rdi
    00000583: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1411
DWARF CFI Instructions:
    <empty>
End of Function "_Z28test_CSE8_add_inline_flippedIh14custom_cse_addIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSE8Ia14custom_cse_addIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z9test_CSE8Ia14custom_cse_addIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z9test_CSE8Ia14custom_cse_addIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/simple_types_cse.cpp/1
  Number      : 114
  State       : disassembled
  Address     : 0x14c60
  Size        : 0x669
  MaxSize     : 0x670
  Offset      : 0x14c60
  Section     : .text
  Orc Section : .local.text._Z9test_CSE8Ia14custom_cse_addIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0113:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	movl	%esi, %r13d
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x78, %rsp
    00000011: 	movq	%rdi, 0x38(%rsp)
    00000016: 	movq	%rdx, 0x50(%rsp)
    0000001b: 	movq	%fs:0x28, %rax
    00000024: 	movq	%rax, 0x68(%rsp)
    00000029: 	xorl	%eax, %eax
    0000002b: 	callq	clock@PLT # Offset: 43
    00000030: 	movq	%rax, start_time(%rip)
    00000037: 	movl	iterations(%rip), %eax
    0000003d: 	movl	%eax, 0x44(%rsp)
    00000041: 	testl	%eax, %eax
    00000043: 	jle	.Ltmp1267 # Offset: 67
    00000049: 	movq	0x38(%rsp), %rax
    0000004e: 	movd	%r13d, %xmm3
    00000053: 	movl	$0x0, 0x2c(%rsp)
    0000005b: 	pxor	%xmm6, %xmm6
    0000005f: 	punpcklbw	%xmm3, %xmm3
    00000063: 	movq	0x1f30(%rax), %xmm5
    0000006b: 	movzbl	(%rax), %ebx
    0000006e: 	punpcklwd	%xmm3, %xmm3
    00000072: 	movq	0x1f31(%rax), %xmm4
    0000007a: 	pshufd	$0x0, %xmm3, %xmm3
    0000007f: 	movb	%bl, 0x42(%rsp)
    00000083: 	movzbl	0x1(%rax), %ebx
    00000087: 	movb	%bl, 0x43(%rsp)
    0000008b: 	leaq	0x1f30(%rax), %rbx
    00000092: 	movq	%rbx, 0x48(%rsp)
    00000097: 	movzbl	%r13b, %ebx
    0000009b: 	movw	%bx, 0x40(%rsp)
    000000a0: 	movzbl	0x1f38(%rax), %ebx
    000000a7: 	movb	%bl, 0x12(%rsp)
    000000ab: 	movzbl	0x1f39(%rax), %ebx
    000000b2: 	movb	%bl, 0x33(%rsp)
    000000b6: 	movzbl	0x1f3a(%rax), %ebx
    000000bd: 	movb	%bl, 0x34(%rsp)
    000000c1: 	movzbl	0x1f3b(%rax), %ebx
    000000c8: 	movb	%bl, 0x35(%rsp)
    000000cc: 	movzbl	0x1f3c(%rax), %ebx
    000000d3: 	movb	%bl, 0x36(%rsp)
    000000d7: 	movzbl	0x1f3d(%rax), %ebx
    000000de: 	movb	%bl, 0x11(%rsp)
    000000e2: 	movzbl	0x1f3e(%rax), %ebx
    000000e9: 	movzbl	0x1f3f(%rax), %eax
    000000f0: 	movb	%bl, 0x37(%rsp)
    000000f4: 	movb	%al, 0x13(%rsp)
    000000f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1270:
    00000100: 	movsbl	0x42(%rsp), %ecx
    00000105: 	movsbl	0x43(%rsp), %edx
    0000010a: 	pxor	%xmm7, %xmm7
    0000010e: 	movl	%ecx, %eax
    00000110: 	movl	%ecx, %ebx
    00000112: 	movl	%edx, %edi
    00000114: 	addl	%edx, %eax
    00000116: 	subl	%edi, %ebx
    00000118: 	addl	%r13d, %eax
    0000011b: 	movsbl	%al, %eax
    0000011e: 	leal	(%rcx,%rax,2), %ecx
    00000121: 	leal	(%rdx,%rax,2), %edx
    00000124: 	leal	(,%rcx,8), %eax
    0000012b: 	subl	%ecx, %eax
    0000012d: 	movl	%ebx, %ecx
    0000012f: 	addl	%ecx, %eax
    00000131: 	movq	0x48(%rsp), %rcx
    00000136: 	subl	%edx, %eax
    00000138: 	subl	%edx, %eax
    0000013a: 	subl	%edx, %eax
    0000013c: 	subl	%edx, %eax
    0000013e: 	subl	%edx, %eax
    00000140: 	subl	%edx, %eax
    00000142: 	subl	%edx, %eax
    00000144: 	movq	0x38(%rsp), %rdx
    00000149: 	nopl	(%rax) # Size: 7
.Ltmp1268:
    00000150: 	movdqu	(%rdx), %xmm1
    00000154: 	movdqu	0x1(%rdx), %xmm2
    00000159: 	addq	$0x10, %rdx
    0000015d: 	movdqu	-0x10(%rdx), %xmm0
    00000162: 	paddb	%xmm1, %xmm2
    00000166: 	movdqu	-0xf(%rdx), %xmm1
    0000016b: 	paddb	%xmm3, %xmm2
    0000016f: 	paddb	%xmm2, %xmm0
    00000173: 	paddb	%xmm2, %xmm1
    00000177: 	paddb	%xmm2, %xmm0
    0000017b: 	paddb	%xmm2, %xmm1
    0000017f: 	paddb	%xmm0, %xmm0
    00000183: 	movdqa	%xmm1, %xmm8
    00000188: 	paddb	%xmm0, %xmm0
    0000018c: 	paddb	%xmm1, %xmm8
    00000191: 	paddb	%xmm0, %xmm0
    00000195: 	psubb	%xmm8, %xmm7
    0000019a: 	psubb	%xmm1, %xmm0
    0000019e: 	paddb	%xmm8, %xmm1
    000001a3: 	psubb	%xmm8, %xmm0
    000001a8: 	paddb	%xmm7, %xmm0
    000001ac: 	movdqa	%xmm0, %xmm7
    000001b0: 	psubb	%xmm1, %xmm7
    000001b4: 	cmpq	%rdx, %rcx
    000001b7: 	jne	.Ltmp1268 # Offset: 439
    000001b9: 	movdqa	%xmm7, %xmm0
    000001bd: 	movzwl	0x40(%rsp), %ebx
    000001c2: 	movdqa	%xmm4, %xmm2
    000001c6: 	movsbl	0x34(%rsp), %r14d
    000001cc: 	psrldq	$0x8, %xmm0
    000001d1: 	paddb	%xmm5, %xmm2
    000001d5: 	movsbl	0x33(%rsp), %r15d
    000001db: 	paddb	%xmm0, %xmm7
    000001df: 	movl	%r14d, %edi
    000001e2: 	psadbw	%xmm6, %xmm7
    000001e6: 	movd	%xmm7, %edx
    000001ea: 	addl	%edx, %eax
    000001ec: 	movsbl	0x35(%rsp), %edx
    000001f1: 	movb	%al, 0x31(%rsp)
    000001f5: 	movl	%ebx, %eax
    000001f7: 	shll	$0x8, %eax
    000001fa: 	addl	%edx, %edi
    000001fc: 	movl	%edx, %ecx
    000001fe: 	movl	%edx, 0x18(%rsp)
    00000202: 	orl	%ebx, %eax
    00000204: 	movl	%edi, %ebp
    00000206: 	movl	%r15d, %ebx
    00000209: 	movd	%eax, %xmm7
    0000020d: 	addl	%r13d, %ebp
    00000210: 	addl	%r14d, %ebx
    00000213: 	pshuflw	$0x0, %xmm7, %xmm0
    00000218: 	movsbl	%bpl, %ebp
    0000021c: 	movl	%ebx, %r12d
    0000021f: 	paddb	%xmm0, %xmm2
    00000223: 	leal	(%rdx,%rbp,2), %r8d
    00000227: 	movsbl	0x36(%rsp), %edx
    0000022c: 	addl	%r13d, %r12d
    0000022f: 	movsbl	%r12b, %r12d
    00000233: 	movl	%edx, %ebx
    00000235: 	movl	%edx, 0x14(%rsp)
    00000239: 	movl	%edx, %esi
    0000023b: 	leal	(%r14,%r12,2), %r9d
    0000023f: 	movdqa	%xmm2, %xmm0
    00000243: 	movdqa	%xmm2, %xmm1
    00000247: 	addl	%ecx, %ebx
    00000249: 	paddb	%xmm5, %xmm0
    0000024d: 	paddb	%xmm4, %xmm1
    00000251: 	addl	%r13d, %ebx
    00000254: 	movsbl	%bl, %ebx
    00000257: 	leal	(%rdx,%rbx,2), %edi
    0000025a: 	movsbl	0x11(%rsp), %edx
    0000025f: 	paddb	%xmm2, %xmm0
    00000263: 	paddb	%xmm2, %xmm1
    00000267: 	addl	%edx, %esi
    00000269: 	movl	%edx, 0x1c(%rsp)
    0000026d: 	movl	%esi, %r11d
    00000270: 	paddb	%xmm0, %xmm0
    00000274: 	movdqa	%xmm1, %xmm2
    00000278: 	addl	%r13d, %r11d
    0000027b: 	paddb	%xmm1, %xmm2
    0000027f: 	movsbl	%r11b, %r11d
    00000283: 	leal	(%rdx,%r11,2), %esi
    00000287: 	movl	%r11d, 0x20(%rsp)
    0000028c: 	movzbl	0x11(%rsp), %edx
    00000291: 	paddb	%xmm0, %xmm0
    00000295: 	movzbl	0x37(%rsp), %r11d
    0000029b: 	addl	%r11d, %edx
    0000029e: 	movsbl	%r11b, %ecx
    000002a2: 	paddb	%xmm0, %xmm0
    000002a6: 	addl	%r13d, %edx
    000002a9: 	movl	%ecx, 0x24(%rsp)
    000002ad: 	movsbl	%dl, %edx
    000002b0: 	leal	(%rcx,%rdx,2), %ecx
    000002b3: 	movl	%edx, 0x28(%rsp)
    000002b7: 	movzbl	0x13(%rsp), %edx
    000002bc: 	psubb	%xmm1, %xmm0
    000002c0: 	paddb	%xmm2, %xmm1
    000002c4: 	paddb	%xmm2, %xmm2
    000002c8: 	addl	%r11d, %edx
    000002cb: 	addl	%r13d, %edx
    000002ce: 	movsbl	%dl, %r11d
    000002d2: 	movsbl	0x13(%rsp), %edx
    000002d7: 	paddb	%xmm2, %xmm1
    000002db: 	movl	%r11d, (%rsp)
    000002df: 	leal	(%rdx,%r11,2), %edx
    000002e3: 	movzbl	0x12(%rsp), %r11d
    000002e9: 	psubb	%xmm1, %xmm0
    000002ed: 	pxor	%xmm1, %xmm1
    000002f1: 	movdqa	%xmm0, %xmm7
    000002f5: 	psadbw	%xmm1, %xmm7
    000002f9: 	movq	%xmm7, %rax
    000002fe: 	movq	%xmm7, 0x58(%rsp)
    00000304: 	movb	%al, 0x32(%rsp)
    00000308: 	movzbl	0x12(%rsp), %eax
    0000030d: 	addl	%r13d, %eax
    00000310: 	addl	%r15d, %eax
    00000313: 	movsbl	%al, %eax
    00000316: 	leal	(%r15,%rax,2), %r10d
    0000031a: 	leal	(%r11,%rax,2), %eax
    0000031e: 	movl	0x20(%rsp), %r11d
    00000323: 	shll	$0x3, %eax
    00000326: 	subl	%r10d, %eax
    00000329: 	subl	%r10d, %eax
    0000032c: 	subl	%r10d, %eax
    0000032f: 	subl	%r10d, %eax
    00000332: 	subl	%r10d, %eax
    00000335: 	subl	%r10d, %eax
    00000338: 	subl	%r10d, %eax
    0000033b: 	subl	%r10d, %eax
    0000033e: 	movzbl	0x32(%rsp), %r10d
    00000344: 	addb	0x31(%rsp), %r10b
    00000349: 	addl	%r10d, %eax
    0000034c: 	leal	(%r15,%r12,2), %r10d
    00000350: 	shll	$0x3, %r10d
    00000354: 	subl	%r9d, %r10d
    00000357: 	subl	%r9d, %r10d
    0000035a: 	subl	%r9d, %r10d
    0000035d: 	subl	%r9d, %r10d
    00000360: 	subl	%r9d, %r10d
    00000363: 	subl	%r9d, %r10d
    00000366: 	subl	%r9d, %r10d
    00000369: 	subl	%r9d, %r10d
    0000036c: 	leal	(%r14,%rbp,2), %r9d
    00000370: 	movl	0x18(%rsp), %r14d
    00000375: 	shll	$0x3, %r9d
    00000379: 	addl	%r10d, %eax
    0000037c: 	subl	%r8d, %r9d
    0000037f: 	subl	%r8d, %r9d
    00000382: 	subl	%r8d, %r9d
    00000385: 	subl	%r8d, %r9d
    00000388: 	subl	%r8d, %r9d
    0000038b: 	subl	%r8d, %r9d
    0000038e: 	subl	%r8d, %r9d
    00000391: 	subl	%r8d, %r9d
    00000394: 	leal	(%r14,%rbx,2), %r8d
    00000398: 	movl	0x1c(%rsp), %ebx
    0000039c: 	shll	$0x3, %r8d
    000003a0: 	addl	%r9d, %eax
    000003a3: 	subl	%edi, %r8d
    000003a6: 	subl	%edi, %r8d
    000003a9: 	subl	%edi, %r8d
    000003ac: 	subl	%edi, %r8d
    000003af: 	subl	%edi, %r8d
    000003b2: 	subl	%edi, %r8d
    000003b5: 	subl	%edi, %r8d
    000003b8: 	subl	%edi, %r8d
    000003bb: 	movl	0x14(%rsp), %edi
    000003bf: 	addl	%r8d, %eax
    000003c2: 	leal	(%rdi,%r11,2), %edi
    000003c6: 	movl	(%rsp), %r11d
    000003ca: 	shll	$0x3, %edi
    000003cd: 	subl	%esi, %edi
    000003cf: 	subl	%esi, %edi
    000003d1: 	subl	%esi, %edi
    000003d3: 	subl	%esi, %edi
    000003d5: 	subl	%esi, %edi
    000003d7: 	subl	%esi, %edi
    000003d9: 	subl	%esi, %edi
    000003db: 	subl	%esi, %edi
    000003dd: 	movl	0x28(%rsp), %esi
    000003e1: 	addl	%edi, %eax
    000003e3: 	leal	(%rbx,%rsi,2), %esi
    000003e6: 	shll	$0x3, %esi
    000003e9: 	subl	%ecx, %esi
    000003eb: 	subl	%ecx, %esi
    000003ed: 	subl	%ecx, %esi
    000003ef: 	subl	%ecx, %esi
    000003f1: 	subl	%ecx, %esi
    000003f3: 	subl	%ecx, %esi
    000003f5: 	subl	%ecx, %esi
    000003f7: 	subl	%ecx, %esi
    000003f9: 	movl	0x24(%rsp), %ecx
    000003fd: 	addl	%esi, %eax
    000003ff: 	leal	(%rcx,%r11,2), %ecx
    00000403: 	shll	$0x3, %ecx
    00000406: 	subl	%edx, %ecx
    00000408: 	subl	%edx, %ecx
    0000040a: 	subl	%edx, %ecx
    0000040c: 	subl	%edx, %ecx
    0000040e: 	subl	%edx, %ecx
    00000410: 	subl	%edx, %ecx
    00000412: 	subl	%edx, %ecx
    00000414: 	subl	%edx, %ecx
    00000416: 	addb	%al, %cl
    00000418: 	jne	.Ltmp1269 # Offset: 1048
    0000041e: 	addl	$0x1, 0x2c(%rsp)
    00000423: 	movl	0x2c(%rsp), %eax
    00000427: 	cmpl	0x44(%rsp), %eax
    0000042b: 	jl	.Ltmp1270 # Offset: 1067
.Ltmp1267:
    00000431: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000438: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000043f: 	subq	$0x20, %rax
    00000443: 	cmpq	%rax, %rbx
    00000446: 	je	.Ltmp1271 # Offset: 1094
    0000044c: 	movq	0x50(%rsp), %rax
    00000451: 	leaq	0x10(%rbx), %rdi
    00000455: 	movq	%rdi, (%rbx)
    00000458: 	movq	(%rax), %rbp
    0000045b: 	movq	0x8(%rax), %r12
    0000045f: 	movq	%rbp, %rax
    00000462: 	addq	%r12, %rax
    00000465: 	je	.Ltmp1272 # Offset: 1125
    00000467: 	testq	%rbp, %rbp
    0000046a: 	je	.Ltmp1273 # Offset: 1130
.Ltmp1272:
    00000470: 	movq	%r12, 0x60(%rsp)
    00000475: 	cmpq	$0xf, %r12
    00000479: 	ja	.Ltmp1274 # Offset: 1145
    0000047f: 	cmpq	$0x1, %r12
    00000483: 	jne	.Ltmp1275 # Offset: 1155
    00000489: 	movzbl	(%rbp), %eax
    0000048d: 	movb	%al, 0x10(%rbx)
.Ltmp1278:
    00000490: 	movq	%r12, 0x8(%rbx)
    00000494: 	movb	$0x0, (%rdi,%r12)
    00000499: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000004a0: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000004a7: 	addq	$0x20, %rax
    000004ab: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000004b2: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000004b9: 	je	.Ltmp1276 # Offset: 1209
.Ltmp1279:
    000004bf: 	movq	-0x20(%rax), %rbp
    000004c3: 	callq	clock@PLT # Offset: 1219
    000004c8: 	movq	%rax, end_time(%rip)
    000004cf: 	movq	0x68(%rsp), %rdx
    000004d4: 	subq	%fs:0x28, %rdx
    000004dd: 	jne	.Ltmp1277 # Offset: 1245
    000004e3: 	subq	start_time(%rip), %rax
    000004ea: 	pxor	%xmm0, %xmm0
    000004ee: 	movq	%rbp, %rdi
    000004f1: 	cvtsi2sd	%rax, %xmm0
    000004f6: 	divsd	DATAat0x4d640(%rip), %xmm0
    000004fe: 	addq	$0x78, %rsp
    00000502: 	popq	%rbx
    00000503: 	popq	%rbp
    00000504: 	popq	%r12
    00000506: 	popq	%r13
    00000508: 	popq	%r14
    0000050a: 	popq	%r15
    0000050c: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1292
    00000511: 	nopl	(%rax) # Size: 7
.Ltmp1269:
    00000518: 	movq	0x50(%rsp), %rax
    0000051d: 	leaq	DATAat0x4d004(%rip), %rsi
    00000524: 	movl	$0x1, %edi
    00000529: 	movaps	%xmm3, (%rsp)
    0000052d: 	movq	(%rax), %rdx
    00000530: 	xorl	%eax, %eax
    00000532: 	callq	__printf_chk@PLT # Offset: 1330
    00000537: 	addl	$0x1, 0x2c(%rsp)
    0000053c: 	movl	iterations(%rip), %ebx
    00000542: 	movl	0x2c(%rsp), %eax
    00000546: 	movl	%ebx, 0x44(%rsp)
    0000054a: 	cmpl	%eax, %ebx
    0000054c: 	jle	.Ltmp1267 # Offset: 1356
    00000552: 	movq	0x38(%rsp), %rax
    00000557: 	movdqa	(%rsp), %xmm3
    0000055c: 	pxor	%xmm6, %xmm6
    00000560: 	movq	0x1f30(%rax), %xmm5
    00000568: 	movzbl	(%rax), %ebx
    0000056b: 	movq	0x1f31(%rax), %xmm4
    00000573: 	movb	%bl, 0x42(%rsp)
    00000577: 	movzbl	0x1(%rax), %ebx
    0000057b: 	movb	%bl, 0x43(%rsp)
    0000057f: 	movzbl	0x1f38(%rax), %ebx
    00000586: 	movb	%bl, 0x12(%rsp)
    0000058a: 	movzbl	0x1f39(%rax), %ebx
    00000591: 	movb	%bl, 0x33(%rsp)
    00000595: 	movzbl	0x1f3a(%rax), %ebx
    0000059c: 	movb	%bl, 0x34(%rsp)
    000005a0: 	movzbl	0x1f3b(%rax), %ebx
    000005a7: 	movb	%bl, 0x35(%rsp)
    000005ab: 	movzbl	0x1f3c(%rax), %ebx
    000005b2: 	movb	%bl, 0x36(%rsp)
    000005b6: 	movzbl	0x1f3d(%rax), %ebx
    000005bd: 	movb	%bl, 0x11(%rsp)
    000005c1: 	movzbl	0x1f3e(%rax), %ebx
    000005c8: 	movzbl	0x1f3f(%rax), %eax
    000005cf: 	movb	%bl, 0x37(%rsp)
    000005d3: 	movb	%al, 0x13(%rsp)
    000005d7: 	jmp	.Ltmp1270 # Offset: 1495
.Ltmp1274:
    000005dc: 	movq	%rbx, %rdi
    000005df: 	leaq	0x60(%rsp), %rsi
    000005e4: 	xorl	%edx, %edx
    000005e6: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1510
    000005eb: 	movq	%rax, (%rbx)
    000005ee: 	movq	%rax, %rdi
    000005f1: 	movq	0x60(%rsp), %rax
    000005f6: 	movq	%rax, 0x10(%rbx)
.Ltmp1280:
    000005fa: 	movq	%r12, %rdx
    000005fd: 	movq	%rbp, %rsi
    00000600: 	callq	memcpy@PLT # Offset: 1536
    00000605: 	movq	0x60(%rsp), %r12
    0000060a: 	movq	(%rbx), %rdi
    0000060d: 	jmp	.Ltmp1278 # Offset: 1549
.Ltmp1271:
    00000612: 	movq	0x50(%rsp), %rsi
    00000617: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000061e: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1566
    00000623: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000062a: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000631: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000638: 	jne	.Ltmp1279 # Offset: 1592
.Ltmp1276:
    0000063e: 	movq	-0x8(%rdx), %rax
    00000642: 	addq	$0x200, %rax
    00000648: 	jmp	.Ltmp1279 # Offset: 1608
.Ltmp1275:
    0000064d: 	testq	%r12, %r12
    00000650: 	je	.Ltmp1278 # Offset: 1616
    00000656: 	jmp	.Ltmp1280 # Offset: 1622
.Ltmp1277:
    00000658: 	callq	__stack_chk_fail@PLT # Offset: 1624
.Ltmp1273:
    0000065d: 	leaq	DATAat0x4d018(%rip), %rdi
    00000664: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1636
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE8Ia14custom_cse_addIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z20test_CSE8_add_inlineIh14custom_cse_addIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 115
  State       : disassembled
  Address     : 0x152d0
  Size        : 0x588
  MaxSize     : 0x590
  Offset      : 0x152d0
  Section     : .text
  Orc Section : .local.text._Z20test_CSE8_add_inlineIh14custom_cse_addIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0114:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movl	%esi, %r12d
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdi, %rbx
    00000016: 	subq	$0x48, %rsp
    0000001a: 	movq	%rcx, 0x20(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x38(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r9d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r9d, %r9d
    00000045: 	jle	.Ltmp1281 # Offset: 69
    0000004b: 	leal	-0x1(%r12), %edi
    00000050: 	leal	-0x2(%r12), %eax
    00000055: 	movd	%ebp, %xmm2
    00000059: 	xorl	%r14d, %r14d
    0000005c: 	movl	%eax, 0x4(%rsp)
    00000060: 	movl	%edi, %eax
    00000062: 	punpcklbw	%xmm2, %xmm2
    00000066: 	movzbl	(%rbx), %r8d
    0000006a: 	shrl	$0x4, %eax
    0000006d: 	movl	%edi, 0x8(%rsp)
    00000071: 	andl	$-0x10, %edi
    00000074: 	punpcklwd	%xmm2, %xmm2
    00000078: 	subl	$0x1, %eax
    0000007b: 	movl	%edi, %r15d
    0000007e: 	shlq	$0x4, %rax
    00000082: 	leaq	0x10(%rbx,%rax), %r13
    00000087: 	leal	0x1(%rdi), %eax
    0000008a: 	movzbl	0x1(%rbx), %edi
    0000008e: 	movl	%eax, 0xc(%rsp)
    00000092: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1287:
    00000098: 	leal	(%r8,%rdi), %ecx
    0000009c: 	addl	%ebp, %ecx
    0000009e: 	addl	%ecx, %ecx
    000000a0: 	leal	(%rdi,%rcx), %eax
    000000a3: 	addl	%r8d, %ecx
    000000a6: 	leal	(,%rcx,8), %edx
    000000ad: 	subl	%ecx, %edx
    000000af: 	movl	%r8d, %ecx
    000000b2: 	subl	%edi, %ecx
    000000b4: 	addl	%ecx, %edx
    000000b6: 	subl	%eax, %edx
    000000b8: 	subl	%eax, %edx
    000000ba: 	subl	%eax, %edx
    000000bc: 	subl	%eax, %edx
    000000be: 	subl	%eax, %edx
    000000c0: 	subl	%eax, %edx
    000000c2: 	subl	%eax, %edx
    000000c4: 	cmpl	$0x1, %r12d
    000000c8: 	jle	.Ltmp1282 # Offset: 200
    000000ce: 	cmpl	$0xe, 0x4(%rsp)
    000000d3: 	jbe	.Ltmp1283 # Offset: 211
    000000d9: 	pshufd	$0x0, %xmm2, %xmm5
    000000de: 	movq	%rbx, %rax
    000000e1: 	pxor	%xmm3, %xmm3
    000000e5: 	nopl	(%rax) # Size: 3
.Ltmp1284:
    000000e8: 	movdqu	(%rax), %xmm6
    000000ec: 	movdqu	0x1(%rax), %xmm0
    000000f1: 	addq	$0x10, %rax
    000000f5: 	movdqu	-0xf(%rax), %xmm1
    000000fa: 	paddb	%xmm6, %xmm0
    000000fe: 	paddb	%xmm5, %xmm0
    00000102: 	paddb	%xmm0, %xmm0
    00000106: 	paddb	%xmm0, %xmm1
    0000010a: 	paddb	%xmm6, %xmm0
    0000010e: 	paddb	%xmm0, %xmm0
    00000112: 	movdqa	%xmm1, %xmm4
    00000116: 	paddb	%xmm0, %xmm0
    0000011a: 	paddb	%xmm1, %xmm4
    0000011e: 	paddb	%xmm0, %xmm0
    00000122: 	psubb	%xmm4, %xmm3
    00000126: 	psubb	%xmm1, %xmm0
    0000012a: 	paddb	%xmm4, %xmm1
    0000012e: 	psubb	%xmm4, %xmm0
    00000132: 	psubb	%xmm1, %xmm0
    00000136: 	paddb	%xmm0, %xmm3
    0000013a: 	cmpq	%rax, %r13
    0000013d: 	jne	.Ltmp1284 # Offset: 317
    0000013f: 	movdqa	%xmm3, %xmm0
    00000143: 	psrldq	$0x8, %xmm0
    00000148: 	paddb	%xmm0, %xmm3
    0000014c: 	pxor	%xmm0, %xmm0
    00000150: 	psadbw	%xmm0, %xmm3
    00000154: 	movd	%xmm3, %eax
    00000158: 	addl	%eax, %edx
    0000015a: 	cmpl	0x8(%rsp), %r15d
    0000015f: 	je	.Ltmp1282 # Offset: 351
    00000165: 	movl	0xc(%rsp), %ecx
    00000169: 	movl	%r15d, %eax
.Ltmp1295:
    0000016c: 	movl	%r12d, %r10d
    0000016f: 	subl	%eax, %r10d
    00000172: 	leal	-0x1(%r10), %esi
    00000176: 	subl	$0x2, %r10d
    0000017a: 	cmpl	$0x6, %r10d
    0000017e: 	jbe	.Ltmp1285 # Offset: 382
    00000184: 	movq	0x1(%rbx,%rax), %xmm3
    0000018a: 	movq	(%rbx,%rax), %xmm1
    0000018f: 	movl	%ebp, %eax
    00000191: 	movzbl	%bpl, %r10d
    00000195: 	shll	$0x8, %eax
    00000198: 	orl	%r10d, %eax
    0000019b: 	movd	%eax, %xmm6
    0000019f: 	pshuflw	$0x0, %xmm6, %xmm0
    000001a4: 	paddb	%xmm1, %xmm0
    000001a8: 	paddb	%xmm3, %xmm0
    000001ac: 	paddb	%xmm0, %xmm0
    000001b0: 	paddb	%xmm0, %xmm1
    000001b4: 	paddb	%xmm3, %xmm0
    000001b8: 	paddb	%xmm1, %xmm1
    000001bc: 	movdqa	%xmm0, %xmm3
    000001c0: 	paddb	%xmm0, %xmm3
    000001c4: 	paddb	%xmm1, %xmm1
    000001c8: 	paddb	%xmm1, %xmm1
    000001cc: 	psubb	%xmm0, %xmm1
    000001d0: 	paddb	%xmm3, %xmm0
    000001d4: 	paddb	%xmm3, %xmm3
    000001d8: 	paddb	%xmm3, %xmm0
    000001dc: 	psubb	%xmm0, %xmm1
    000001e0: 	pxor	%xmm0, %xmm0
    000001e4: 	movdqa	%xmm1, %xmm5
    000001e8: 	psadbw	%xmm0, %xmm5
    000001ec: 	movq	%xmm5, %rax
    000001f1: 	movq	%xmm5, 0x28(%rsp)
    000001f7: 	movl	%eax, %r10d
    000001fa: 	movl	%esi, %eax
    000001fc: 	andl	$-0x8, %eax
    000001ff: 	addl	%r10d, %edx
    00000202: 	addl	%eax, %ecx
    00000204: 	cmpl	%esi, %eax
    00000206: 	je	.Ltmp1282 # Offset: 518
.Ltmp1285:
    0000020c: 	movslq	%ecx, %rax
    0000020f: 	addq	%rbx, %rax
    00000212: 	movzbl	-0x1(%rax), %esi
    00000216: 	movzbl	(%rax), %eax
    00000219: 	leal	(%rsi,%rax), %r11d
    0000021d: 	addl	%ebp, %r11d
    00000220: 	addl	%r11d, %r11d
    00000223: 	addl	%r11d, %esi
    00000226: 	leal	(%r11,%rax), %r10d
    0000022a: 	leal	(%rdx,%rsi,8), %edx
    0000022d: 	leal	0x1(%rcx), %esi
    00000230: 	subl	%r10d, %edx
    00000233: 	subl	%r10d, %edx
    00000236: 	subl	%r10d, %edx
    00000239: 	subl	%r10d, %edx
    0000023c: 	subl	%r10d, %edx
    0000023f: 	subl	%r10d, %edx
    00000242: 	addl	%r10d, %r10d
    00000245: 	subl	%r10d, %edx
    00000248: 	cmpl	%esi, %r12d
    0000024b: 	jle	.Ltmp1282 # Offset: 587
    00000251: 	movslq	%esi, %rsi
    00000254: 	leal	(%rbp,%rax), %r11d
    00000259: 	movzbl	(%rbx,%rsi), %esi
    0000025d: 	addl	%esi, %r11d
    00000260: 	addl	%r11d, %r11d
    00000263: 	addl	%r11d, %eax
    00000266: 	leal	(%r11,%rsi), %r10d
    0000026a: 	shll	$0x3, %eax
    0000026d: 	subl	%r10d, %eax
    00000270: 	subl	%r10d, %eax
    00000273: 	subl	%r10d, %eax
    00000276: 	subl	%r10d, %eax
    00000279: 	subl	%r10d, %eax
    0000027c: 	subl	%r10d, %eax
    0000027f: 	addl	%r10d, %r10d
    00000282: 	subl	%r10d, %eax
    00000285: 	addl	%eax, %edx
    00000287: 	leal	0x2(%rcx), %eax
    0000028a: 	cmpl	%eax, %r12d
    0000028d: 	jle	.Ltmp1282 # Offset: 653
    00000293: 	cltq
    00000295: 	movzbl	(%rbx,%rax), %r10d
    0000029a: 	leal	(%rbp,%rsi), %eax
    0000029e: 	addl	%r10d, %eax
    000002a1: 	addl	%eax, %eax
    000002a3: 	leal	(%r10,%rax), %r11d
    000002a7: 	addl	%esi, %eax
    000002a9: 	shll	$0x3, %eax
    000002ac: 	subl	%r11d, %eax
    000002af: 	subl	%r11d, %eax
    000002b2: 	subl	%r11d, %eax
    000002b5: 	subl	%r11d, %eax
    000002b8: 	subl	%r11d, %eax
    000002bb: 	subl	%r11d, %eax
    000002be: 	addl	%r11d, %r11d
    000002c1: 	subl	%r11d, %eax
    000002c4: 	addl	%eax, %edx
    000002c6: 	leal	0x3(%rcx), %eax
    000002c9: 	cmpl	%eax, %r12d
    000002cc: 	jle	.Ltmp1282 # Offset: 716
    000002d2: 	cltq
    000002d4: 	movzbl	(%rbx,%rax), %esi
    000002d8: 	leal	(%rbp,%r10), %eax
    000002dd: 	addl	%esi, %eax
    000002df: 	addl	%eax, %eax
    000002e1: 	leal	(%rsi,%rax), %r11d
    000002e5: 	addl	%r10d, %eax
    000002e8: 	shll	$0x3, %eax
    000002eb: 	subl	%r11d, %eax
    000002ee: 	subl	%r11d, %eax
    000002f1: 	subl	%r11d, %eax
    000002f4: 	subl	%r11d, %eax
    000002f7: 	subl	%r11d, %eax
    000002fa: 	subl	%r11d, %eax
    000002fd: 	addl	%r11d, %r11d
    00000300: 	subl	%r11d, %eax
    00000303: 	addl	%eax, %edx
    00000305: 	leal	0x4(%rcx), %eax
    00000308: 	cmpl	%eax, %r12d
    0000030b: 	jle	.Ltmp1282 # Offset: 779
    00000311: 	cltq
    00000313: 	movzbl	(%rbx,%rax), %r10d
    00000318: 	leal	(%rbp,%rsi), %eax
    0000031c: 	addl	%r10d, %eax
    0000031f: 	addl	%eax, %eax
    00000321: 	leal	(%r10,%rax), %r11d
    00000325: 	addl	%esi, %eax
    00000327: 	shll	$0x3, %eax
    0000032a: 	subl	%r11d, %eax
    0000032d: 	subl	%r11d, %eax
    00000330: 	subl	%r11d, %eax
    00000333: 	subl	%r11d, %eax
    00000336: 	subl	%r11d, %eax
    00000339: 	subl	%r11d, %eax
    0000033c: 	addl	%r11d, %r11d
    0000033f: 	subl	%r11d, %eax
    00000342: 	addl	%eax, %edx
    00000344: 	leal	0x5(%rcx), %eax
    00000347: 	cmpl	%eax, %r12d
    0000034a: 	jle	.Ltmp1282 # Offset: 842
    0000034c: 	cltq
    0000034e: 	leal	(%rbp,%r10), %esi
    00000353: 	addl	$0x6, %ecx
    00000356: 	movzbl	(%rbx,%rax), %eax
    0000035a: 	addl	%eax, %esi
    0000035c: 	addl	%esi, %esi
    0000035e: 	leal	(%rax,%rsi), %r11d
    00000362: 	addl	%r10d, %esi
    00000365: 	shll	$0x3, %esi
    00000368: 	subl	%r11d, %esi
    0000036b: 	subl	%r11d, %esi
    0000036e: 	subl	%r11d, %esi
    00000371: 	subl	%r11d, %esi
    00000374: 	subl	%r11d, %esi
    00000377: 	subl	%r11d, %esi
    0000037a: 	addl	%r11d, %r11d
    0000037d: 	subl	%r11d, %esi
    00000380: 	addl	%esi, %edx
    00000382: 	cmpl	%ecx, %r12d
    00000385: 	jle	.Ltmp1282 # Offset: 901
    00000387: 	movslq	%ecx, %rcx
    0000038a: 	movzbl	(%rbx,%rcx), %esi
    0000038e: 	leal	(%rbp,%rax), %ecx
    00000392: 	addl	%esi, %ecx
    00000394: 	addl	%ecx, %ecx
    00000396: 	addl	%ecx, %eax
    00000398: 	addl	%ecx, %esi
    0000039a: 	shll	$0x3, %eax
    0000039d: 	subl	%esi, %eax
    0000039f: 	subl	%esi, %eax
    000003a1: 	subl	%esi, %eax
    000003a3: 	subl	%esi, %eax
    000003a5: 	subl	%esi, %eax
    000003a7: 	subl	%esi, %eax
    000003a9: 	addl	%esi, %esi
    000003ab: 	subl	%esi, %eax
    000003ad: 	addl	%eax, %edx
.Ltmp1282:
    000003af: 	testb	%dl, %dl
    000003b1: 	jne	.Ltmp1286 # Offset: 945
    000003b7: 	addl	$0x1, %r14d
    000003bb: 	cmpl	%r9d, %r14d
    000003be: 	jl	.Ltmp1287 # Offset: 958
.Ltmp1281:
    000003c4: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000003cb: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000003d2: 	subq	$0x20, %rax
    000003d6: 	cmpq	%rax, %rbx
    000003d9: 	je	.Ltmp1288 # Offset: 985
    000003df: 	movq	0x20(%rsp), %rax
    000003e4: 	leaq	0x10(%rbx), %rdi
    000003e8: 	movq	%rdi, (%rbx)
    000003eb: 	movq	(%rax), %rbp
    000003ee: 	movq	0x8(%rax), %r12
    000003f2: 	movq	%rbp, %rax
    000003f5: 	addq	%r12, %rax
    000003f8: 	je	.Ltmp1289 # Offset: 1016
    000003fa: 	testq	%rbp, %rbp
    000003fd: 	je	.Ltmp1290 # Offset: 1021
.Ltmp1289:
    00000403: 	movq	%r12, 0x30(%rsp)
    00000408: 	cmpq	$0xf, %r12
    0000040c: 	ja	.Ltmp1291 # Offset: 1036
    00000412: 	cmpq	$0x1, %r12
    00000416: 	jne	.Ltmp1292 # Offset: 1046
    0000041c: 	movzbl	(%rbp), %eax
    00000420: 	movb	%al, 0x10(%rbx)
.Ltmp1296:
    00000423: 	movq	%r12, 0x8(%rbx)
    00000427: 	movb	$0x0, (%rdi,%r12)
    0000042c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000433: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000043a: 	addq	$0x20, %rax
    0000043e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000445: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000044c: 	je	.Ltmp1293 # Offset: 1100
.Ltmp1297:
    00000452: 	movq	-0x20(%rax), %rbp
    00000456: 	callq	clock@PLT # Offset: 1110
    0000045b: 	movq	%rax, end_time(%rip)
    00000462: 	movq	0x38(%rsp), %rdx
    00000467: 	subq	%fs:0x28, %rdx
    00000470: 	jne	.Ltmp1294 # Offset: 1136
    00000476: 	subq	start_time(%rip), %rax
    0000047d: 	pxor	%xmm0, %xmm0
    00000481: 	movq	%rbp, %rdi
    00000484: 	cvtsi2sd	%rax, %xmm0
    00000489: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000491: 	addq	$0x48, %rsp
    00000495: 	popq	%rbx
    00000496: 	popq	%rbp
    00000497: 	popq	%r12
    00000499: 	popq	%r13
    0000049b: 	popq	%r14
    0000049d: 	popq	%r15
    0000049f: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1183
    000004a4: 	nopl	(%rax) # Size: 4
.Ltmp1286:
    000004a8: 	movq	0x20(%rsp), %rax
    000004ad: 	leaq	DATAat0x4d004(%rip), %rsi
    000004b4: 	movl	$0x1, %edi
    000004b9: 	movaps	%xmm2, 0x10(%rsp)
    000004be: 	addl	$0x1, %r14d
    000004c2: 	movq	(%rax), %rdx
    000004c5: 	xorl	%eax, %eax
    000004c7: 	callq	__printf_chk@PLT # Offset: 1223
    000004cc: 	movl	iterations(%rip), %r9d
    000004d3: 	cmpl	%r14d, %r9d
    000004d6: 	jle	.Ltmp1281 # Offset: 1238
    000004dc: 	movzbl	(%rbx), %r8d
    000004e0: 	movzbl	0x1(%rbx), %edi
    000004e4: 	movdqa	0x10(%rsp), %xmm2
    000004ea: 	jmp	.Ltmp1287 # Offset: 1258
.Ltmp1283:
    000004ef: 	xorl	%eax, %eax
    000004f1: 	movl	$0x1, %ecx
    000004f6: 	jmp	.Ltmp1295 # Offset: 1270
.Ltmp1291:
    000004fb: 	movq	%rbx, %rdi
    000004fe: 	leaq	0x30(%rsp), %rsi
    00000503: 	xorl	%edx, %edx
    00000505: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1285
    0000050a: 	movq	%rax, (%rbx)
    0000050d: 	movq	%rax, %rdi
    00000510: 	movq	0x30(%rsp), %rax
    00000515: 	movq	%rax, 0x10(%rbx)
.Ltmp1298:
    00000519: 	movq	%r12, %rdx
    0000051c: 	movq	%rbp, %rsi
    0000051f: 	callq	memcpy@PLT # Offset: 1311
    00000524: 	movq	0x30(%rsp), %r12
    00000529: 	movq	(%rbx), %rdi
    0000052c: 	jmp	.Ltmp1296 # Offset: 1324
.Ltmp1288:
    00000531: 	movq	0x20(%rsp), %rsi
    00000536: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000053d: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1341
    00000542: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000549: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000550: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000557: 	jne	.Ltmp1297 # Offset: 1367
.Ltmp1293:
    0000055d: 	movq	-0x8(%rdx), %rax
    00000561: 	addq	$0x200, %rax
    00000567: 	jmp	.Ltmp1297 # Offset: 1383
.Ltmp1292:
    0000056c: 	testq	%r12, %r12
    0000056f: 	je	.Ltmp1296 # Offset: 1391
    00000575: 	jmp	.Ltmp1298 # Offset: 1397
.Ltmp1294:
    00000577: 	callq	__stack_chk_fail@PLT # Offset: 1399
.Ltmp1290:
    0000057c: 	leaq	DATAat0x4d018(%rip), %rdi
    00000583: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1411
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_CSE8_add_inlineIh14custom_cse_addIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSE8Ia14custom_cse_divIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z9test_CSE8Ia14custom_cse_divIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z9test_CSE8Ia14custom_cse_divIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/simple_types_cse.cpp/1
  Number      : 116
  State       : disassembled
  Address     : 0x15860
  Size        : 0x288
  MaxSize     : 0x290
  Offset      : 0x15860
  Section     : .text
  Orc Section : .local.text._Z9test_CSE8Ia14custom_cse_divIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0115:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	movq	%rdi, %r14
    00000007: 	pushq	%r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	movq	%rdx, %rbp
    0000000f: 	pushq	%rbx
    00000010: 	movl	%esi, %ebx
    00000012: 	subq	$0x18, %rsp
    00000016: 	movq	%fs:0x28, %rax
    0000001f: 	movq	%rax, 0x8(%rsp)
    00000024: 	xorl	%eax, %eax
    00000026: 	callq	clock@PLT # Offset: 38
    0000002b: 	movl	iterations(%rip), %r11d
    00000032: 	movq	%rax, start_time(%rip)
    00000039: 	testl	%r11d, %r11d
    0000003c: 	jle	.Ltmp1299 # Offset: 60
    00000042: 	movzbl	(%r14), %r10d
    00000046: 	movzbl	0x1(%r14), %r9d
    0000004b: 	xorl	%r13d, %r13d
    0000004e: 	leaq	0x1(%r14), %r15
    00000052: 	leaq	0x1f40(%r14), %r12
    00000059: 	nopl	(%rax) # Size: 7
.Ltmp1302:
    00000060: 	movsbl	%r10b, %esi
    00000064: 	movsbl	%r9b, %ecx
    00000068: 	movq	%r15, %rdi
    0000006b: 	movl	%esi, %eax
    0000006d: 	cltd
    0000006e: 	idivl	%ecx
    00000070: 	addl	%ebx, %eax
    00000072: 	movsbl	%al, %eax
    00000075: 	leal	(%rcx,%rax,2), %edx
    00000078: 	leal	(%rsi,%rax,2), %eax
    0000007b: 	leal	(,%rax,8), %ecx
    00000082: 	subl	%eax, %ecx
    00000084: 	movl	%r10d, %eax
    00000087: 	subl	%r9d, %eax
    0000008a: 	addl	%eax, %ecx
    0000008c: 	subl	%edx, %ecx
    0000008e: 	subl	%edx, %ecx
    00000090: 	subl	%edx, %ecx
    00000092: 	subl	%edx, %ecx
    00000094: 	subl	%edx, %ecx
    00000096: 	subl	%edx, %ecx
    00000098: 	subl	%edx, %ecx
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1300:
    000000a0: 	movl	%esi, %r8d
    000000a3: 	movsbl	(%rdi), %esi
    000000a6: 	addq	$0x1, %rdi
    000000aa: 	movl	%r8d, %eax
    000000ad: 	cltd
    000000ae: 	idivl	%esi
    000000b0: 	addl	%ebx, %eax
    000000b2: 	movsbl	%al, %eax
    000000b5: 	leal	(%rsi,%rax,2), %edx
    000000b8: 	leal	(%r8,%rax,2), %eax
    000000bc: 	leal	(%rcx,%rax,8), %ecx
    000000bf: 	subl	%edx, %ecx
    000000c1: 	subl	%edx, %ecx
    000000c3: 	subl	%edx, %ecx
    000000c5: 	subl	%edx, %ecx
    000000c7: 	subl	%edx, %ecx
    000000c9: 	subl	%edx, %ecx
    000000cb: 	subl	%edx, %ecx
    000000cd: 	subl	%edx, %ecx
    000000cf: 	cmpq	%r12, %rdi
    000000d2: 	jne	.Ltmp1300 # Offset: 210
    000000d4: 	testb	%cl, %cl
    000000d6: 	jne	.Ltmp1301 # Offset: 214
    000000dc: 	addl	$0x1, %r13d
    000000e0: 	cmpl	%r11d, %r13d
    000000e3: 	jl	.Ltmp1302 # Offset: 227
.Ltmp1299:
    000000e9: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000f0: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000f7: 	subq	$0x20, %rax
    000000fb: 	cmpq	%rax, %rbx
    000000fe: 	je	.Ltmp1303 # Offset: 254
    00000104: 	leaq	0x10(%rbx), %rdi
    00000108: 	movq	0x8(%rbp), %r12
    0000010c: 	movq	%rdi, (%rbx)
    0000010f: 	movq	(%rbp), %r13
    00000113: 	movq	%r13, %rax
    00000116: 	addq	%r12, %rax
    00000119: 	je	.Ltmp1304 # Offset: 281
    0000011b: 	testq	%r13, %r13
    0000011e: 	je	.Ltmp1305 # Offset: 286
.Ltmp1304:
    00000124: 	movq	%r12, (%rsp)
    00000128: 	cmpq	$0xf, %r12
    0000012c: 	ja	.Ltmp1306 # Offset: 300
    00000132: 	cmpq	$0x1, %r12
    00000136: 	jne	.Ltmp1307 # Offset: 310
    0000013c: 	movzbl	(%r13), %eax
    00000141: 	movb	%al, 0x10(%rbx)
.Ltmp1310:
    00000144: 	movq	%r12, 0x8(%rbx)
    00000148: 	movb	$0x0, (%rdi,%r12)
    0000014d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000154: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000015b: 	addq	$0x20, %rax
    0000015f: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000166: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000016d: 	je	.Ltmp1308 # Offset: 365
.Ltmp1311:
    00000173: 	movq	-0x20(%rax), %rbp
    00000177: 	callq	clock@PLT # Offset: 375
    0000017c: 	movq	%rax, end_time(%rip)
    00000183: 	movq	0x8(%rsp), %rdx
    00000188: 	subq	%fs:0x28, %rdx
    00000191: 	jne	.Ltmp1309 # Offset: 401
    00000197: 	subq	start_time(%rip), %rax
    0000019e: 	pxor	%xmm0, %xmm0
    000001a2: 	movq	%rbp, %rdi
    000001a5: 	cvtsi2sd	%rax, %xmm0
    000001aa: 	divsd	DATAat0x4d640(%rip), %xmm0
    000001b2: 	addq	$0x18, %rsp
    000001b6: 	popq	%rbx
    000001b7: 	popq	%rbp
    000001b8: 	popq	%r12
    000001ba: 	popq	%r13
    000001bc: 	popq	%r14
    000001be: 	popq	%r15
    000001c0: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 448
    000001c5: 	nopl	(%rax) # Size: 3
.Ltmp1301:
    000001c8: 	movq	(%rbp), %rdx
    000001cc: 	movl	$0x1, %edi
    000001d1: 	xorl	%eax, %eax
    000001d3: 	addl	$0x1, %r13d
    000001d7: 	leaq	DATAat0x4d004(%rip), %rsi
    000001de: 	callq	__printf_chk@PLT # Offset: 478
    000001e3: 	movl	iterations(%rip), %r11d
    000001ea: 	cmpl	%r11d, %r13d
    000001ed: 	jge	.Ltmp1299 # Offset: 493
    000001f3: 	movzbl	(%r14), %r10d
    000001f7: 	movzbl	0x1(%r14), %r9d
    000001fc: 	jmp	.Ltmp1302 # Offset: 508
.Ltmp1306:
    00000201: 	movq	%rbx, %rdi
    00000204: 	movq	%rsp, %rsi
    00000207: 	xorl	%edx, %edx
    00000209: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 521
    0000020e: 	movq	%rax, (%rbx)
    00000211: 	movq	%rax, %rdi
    00000214: 	movq	(%rsp), %rax
    00000218: 	movq	%rax, 0x10(%rbx)
.Ltmp1312:
    0000021c: 	movq	%r12, %rdx
    0000021f: 	movq	%r13, %rsi
    00000222: 	callq	memcpy@PLT # Offset: 546
    00000227: 	movq	(%rsp), %r12
    0000022b: 	movq	(%rbx), %rdi
    0000022e: 	jmp	.Ltmp1310 # Offset: 558
.Ltmp1303:
    00000233: 	movq	%rbp, %rsi
    00000236: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000023d: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 573
    00000242: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000249: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000250: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000257: 	jne	.Ltmp1311 # Offset: 599
.Ltmp1308:
    0000025d: 	movq	-0x8(%rdx), %rax
    00000261: 	addq	$0x200, %rax
    00000267: 	jmp	.Ltmp1311 # Offset: 615
.Ltmp1307:
    0000026c: 	testq	%r12, %r12
    0000026f: 	je	.Ltmp1310 # Offset: 623
    00000275: 	jmp	.Ltmp1312 # Offset: 629
.Ltmp1309:
    00000277: 	callq	__stack_chk_fail@PLT # Offset: 631
.Ltmp1305:
    0000027c: 	leaq	DATAat0x4d018(%rip), %rdi
    00000283: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 643
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE8Ia14custom_cse_divIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z9test_CSE8Ih14custom_cse_mulIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 117
  State       : disassembled
  Address     : 0x15af0
  Size        : 0x3e7
  MaxSize     : 0x3f0
  Offset      : 0x15af0
  Section     : .text
  Orc Section : .local.text._Z9test_CSE8Ih14custom_cse_mulIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0116:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movl	%edx, %r12d
    0000000f: 	pushq	%rbp
    00000010: 	movl	%esi, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdi, %rbx
    00000016: 	subq	$0x48, %rsp
    0000001a: 	movq	%rcx, 0x28(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x38(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r11d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r11d, %r11d
    00000045: 	jle	.Ltmp1313 # Offset: 69
    0000004b: 	leal	-0x1(%rbp), %edi
    0000004e: 	leal	-0x2(%rbp), %eax
    00000051: 	movd	%r12d, %xmm5
    00000056: 	movzbl	(%rbx), %r10d
    0000005a: 	movl	%eax, 0x8(%rsp)
    0000005e: 	movl	%edi, %eax
    00000060: 	movzbl	0x1(%rbx), %r9d
    00000065: 	xorl	%r14d, %r14d
    00000068: 	shrl	$0x4, %eax
    0000006b: 	movl	%edi, 0x20(%rsp)
    0000006f: 	andl	$-0x10, %edi
    00000072: 	punpcklbw	%xmm5, %xmm5
    00000076: 	subl	$0x1, %eax
    00000079: 	movl	%edi, 0xc(%rsp)
    0000007d: 	movdqa	DATAat0x4d5f0(%rip), %xmm3
    00000085: 	shlq	$0x4, %rax
    00000089: 	leaq	0x10(%rbx,%rax), %r13
    0000008e: 	leal	0x1(%rdi), %eax
    00000091: 	movl	%eax, 0x24(%rsp)
    00000095: 	nopl	(%rax) # Size: 3
.Ltmp1319:
    00000098: 	movl	%r10d, %eax
    0000009b: 	movzbl	%r9b, %edx
    0000009f: 	imull	%r9d, %eax
    000000a3: 	addl	%r12d, %eax
    000000a6: 	movzbl	%al, %eax
    000000a9: 	leal	(%rdx,%rax,2), %ecx
    000000ac: 	movzbl	%r10b, %edx
    000000b0: 	leal	(%rdx,%rax,2), %eax
    000000b3: 	leal	(,%rax,8), %edx
    000000ba: 	subl	%eax, %edx
    000000bc: 	movl	%r10d, %eax
    000000bf: 	subl	%r9d, %eax
    000000c2: 	addl	%eax, %edx
    000000c4: 	subl	%ecx, %edx
    000000c6: 	subl	%ecx, %edx
    000000c8: 	subl	%ecx, %edx
    000000ca: 	subl	%ecx, %edx
    000000cc: 	subl	%ecx, %edx
    000000ce: 	subl	%ecx, %edx
    000000d0: 	subl	%ecx, %edx
    000000d2: 	cmpl	$0x1, %ebp
    000000d5: 	jle	.Ltmp1314 # Offset: 213
    000000db: 	cmpl	$0xe, 0x8(%rsp)
    000000e0: 	jbe	.Ltmp1315 # Offset: 224
    000000e6: 	movdqa	%xmm5, %xmm4
    000000ea: 	movq	%rbx, %rax
    000000ed: 	pxor	%xmm2, %xmm2
    000000f1: 	punpcklwd	%xmm5, %xmm4
    000000f5: 	pshufd	$0x0, %xmm4, %xmm4
    000000fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1316:
    00000100: 	movdqu	(%rax), %xmm0
    00000104: 	movdqu	0x1(%rax), %xmm1
    00000109: 	addq	$0x10, %rax
    0000010d: 	movdqa	%xmm0, %xmm7
    00000111: 	movdqa	%xmm0, %xmm6
    00000115: 	movdqa	%xmm1, %xmm9
    0000011a: 	movdqa	%xmm1, %xmm8
    0000011f: 	punpcklbw	%xmm0, %xmm7
    00000123: 	punpckhbw	%xmm0, %xmm6
    00000127: 	punpcklbw	%xmm1, %xmm9
    0000012c: 	punpckhbw	%xmm1, %xmm8
    00000131: 	pmullw	%xmm9, %xmm7
    00000136: 	pmullw	%xmm8, %xmm6
    0000013b: 	pand	%xmm3, %xmm7
    0000013f: 	pand	%xmm3, %xmm6
    00000143: 	packuswb	%xmm6, %xmm7
    00000147: 	paddb	%xmm4, %xmm7
    0000014b: 	paddb	%xmm7, %xmm0
    0000014f: 	paddb	%xmm7, %xmm1
    00000153: 	paddb	%xmm7, %xmm0
    00000157: 	paddb	%xmm7, %xmm1
    0000015b: 	paddb	%xmm0, %xmm0
    0000015f: 	movdqa	%xmm1, %xmm6
    00000163: 	paddb	%xmm0, %xmm0
    00000167: 	paddb	%xmm1, %xmm6
    0000016b: 	paddb	%xmm0, %xmm0
    0000016f: 	psubb	%xmm6, %xmm2
    00000173: 	psubb	%xmm1, %xmm0
    00000177: 	paddb	%xmm6, %xmm1
    0000017b: 	psubb	%xmm6, %xmm0
    0000017f: 	psubb	%xmm1, %xmm0
    00000183: 	paddb	%xmm0, %xmm2
    00000187: 	cmpq	%rax, %r13
    0000018a: 	jne	.Ltmp1316 # Offset: 394
    00000190: 	movdqa	%xmm2, %xmm0
    00000194: 	movl	0x20(%rsp), %edi
    00000198: 	psrldq	$0x8, %xmm0
    0000019d: 	paddb	%xmm0, %xmm2
    000001a1: 	pxor	%xmm0, %xmm0
    000001a5: 	psadbw	%xmm0, %xmm2
    000001a9: 	movd	%xmm2, %eax
    000001ad: 	addl	%eax, %edx
    000001af: 	cmpl	%edi, 0xc(%rsp)
    000001b3: 	je	.Ltmp1314 # Offset: 435
    000001b5: 	movslq	0x24(%rsp), %rcx
.Ltmp1327:
    000001ba: 	movzbl	-0x1(%rbx,%rcx), %edi
    000001bf: 	movl	%edi, %esi
    000001c1: 	nopl	(%rax) # Size: 7
.Ltmp1317:
    000001c8: 	movl	%edi, %r15d
    000001cb: 	movzbl	(%rbx,%rcx), %edi
    000001cf: 	movl	%esi, %eax
    000001d1: 	addq	$0x1, %rcx
    000001d5: 	imull	%edi, %eax
    000001d8: 	movl	%edi, %esi
    000001da: 	addl	%r12d, %eax
    000001dd: 	movzbl	%al, %eax
    000001e0: 	leal	(%rdi,%rax,2), %r8d
    000001e4: 	leal	(%r15,%rax,2), %eax
    000001e8: 	shll	$0x3, %eax
    000001eb: 	subl	%r8d, %eax
    000001ee: 	subl	%r8d, %eax
    000001f1: 	subl	%r8d, %eax
    000001f4: 	subl	%r8d, %eax
    000001f7: 	subl	%r8d, %eax
    000001fa: 	subl	%r8d, %eax
    000001fd: 	addl	%r8d, %r8d
    00000200: 	subl	%r8d, %eax
    00000203: 	addl	%eax, %edx
    00000205: 	cmpl	%ecx, %ebp
    00000207: 	jg	.Ltmp1317 # Offset: 519
.Ltmp1314:
    00000209: 	testb	%dl, %dl
    0000020b: 	jne	.Ltmp1318 # Offset: 523
    00000211: 	addl	$0x1, %r14d
    00000215: 	cmpl	%r11d, %r14d
    00000218: 	jl	.Ltmp1319 # Offset: 536
.Ltmp1313:
    0000021e: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000225: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000022c: 	subq	$0x20, %rax
    00000230: 	cmpq	%rax, %rbx
    00000233: 	je	.Ltmp1320 # Offset: 563
    00000239: 	movq	0x28(%rsp), %rax
    0000023e: 	leaq	0x10(%rbx), %rdi
    00000242: 	movq	%rdi, (%rbx)
    00000245: 	movq	(%rax), %rbp
    00000248: 	movq	0x8(%rax), %r12
    0000024c: 	movq	%rbp, %rax
    0000024f: 	addq	%r12, %rax
    00000252: 	je	.Ltmp1321 # Offset: 594
    00000254: 	testq	%rbp, %rbp
    00000257: 	je	.Ltmp1322 # Offset: 599
.Ltmp1321:
    0000025d: 	movq	%r12, 0x30(%rsp)
    00000262: 	cmpq	$0xf, %r12
    00000266: 	ja	.Ltmp1323 # Offset: 614
    0000026c: 	cmpq	$0x1, %r12
    00000270: 	jne	.Ltmp1324 # Offset: 624
    00000276: 	movzbl	(%rbp), %eax
    0000027a: 	movb	%al, 0x10(%rbx)
.Ltmp1328:
    0000027d: 	movq	%r12, 0x8(%rbx)
    00000281: 	movb	$0x0, (%rdi,%r12)
    00000286: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000028d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000294: 	addq	$0x20, %rax
    00000298: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000029f: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000002a6: 	je	.Ltmp1325 # Offset: 678
.Ltmp1329:
    000002ac: 	movq	-0x20(%rax), %rbp
    000002b0: 	callq	clock@PLT # Offset: 688
    000002b5: 	movq	%rax, end_time(%rip)
    000002bc: 	movq	0x38(%rsp), %rdx
    000002c1: 	subq	%fs:0x28, %rdx
    000002ca: 	jne	.Ltmp1326 # Offset: 714
    000002d0: 	subq	start_time(%rip), %rax
    000002d7: 	pxor	%xmm0, %xmm0
    000002db: 	movq	%rbp, %rdi
    000002de: 	cvtsi2sd	%rax, %xmm0
    000002e3: 	divsd	DATAat0x4d640(%rip), %xmm0
    000002eb: 	addq	$0x48, %rsp
    000002ef: 	popq	%rbx
    000002f0: 	popq	%rbp
    000002f1: 	popq	%r12
    000002f3: 	popq	%r13
    000002f5: 	popq	%r14
    000002f7: 	popq	%r15
    000002f9: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 761
    000002fe: 	nop # Size: 2
.Ltmp1318:
    00000300: 	movq	0x28(%rsp), %rax
    00000305: 	leaq	DATAat0x4d004(%rip), %rsi
    0000030c: 	movl	$0x1, %edi
    00000311: 	movaps	%xmm5, 0x10(%rsp)
    00000316: 	addl	$0x1, %r14d
    0000031a: 	movq	(%rax), %rdx
    0000031d: 	xorl	%eax, %eax
    0000031f: 	callq	__printf_chk@PLT # Offset: 799
    00000324: 	movl	iterations(%rip), %r11d
    0000032b: 	cmpl	%r11d, %r14d
    0000032e: 	jge	.Ltmp1313 # Offset: 814
    00000334: 	movzbl	(%rbx), %r10d
    00000338: 	movzbl	0x1(%rbx), %r9d
    0000033d: 	movdqa	0x10(%rsp), %xmm5
    00000343: 	movdqa	DATAat0x4d5f0(%rip), %xmm3
    0000034b: 	jmp	.Ltmp1319 # Offset: 843
.Ltmp1315:
    00000350: 	movl	$0x1, %ecx
    00000355: 	jmp	.Ltmp1327 # Offset: 853
.Ltmp1323:
    0000035a: 	movq	%rbx, %rdi
    0000035d: 	leaq	0x30(%rsp), %rsi
    00000362: 	xorl	%edx, %edx
    00000364: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 868
    00000369: 	movq	%rax, (%rbx)
    0000036c: 	movq	%rax, %rdi
    0000036f: 	movq	0x30(%rsp), %rax
    00000374: 	movq	%rax, 0x10(%rbx)
.Ltmp1330:
    00000378: 	movq	%r12, %rdx
    0000037b: 	movq	%rbp, %rsi
    0000037e: 	callq	memcpy@PLT # Offset: 894
    00000383: 	movq	0x30(%rsp), %r12
    00000388: 	movq	(%rbx), %rdi
    0000038b: 	jmp	.Ltmp1328 # Offset: 907
.Ltmp1320:
    00000390: 	movq	0x28(%rsp), %rsi
    00000395: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000039c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 924
    000003a1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000003a8: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000003af: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003b6: 	jne	.Ltmp1329 # Offset: 950
.Ltmp1325:
    000003bc: 	movq	-0x8(%rdx), %rax
    000003c0: 	addq	$0x200, %rax
    000003c6: 	jmp	.Ltmp1329 # Offset: 966
.Ltmp1324:
    000003cb: 	testq	%r12, %r12
    000003ce: 	je	.Ltmp1328 # Offset: 974
    000003d4: 	jmp	.Ltmp1330 # Offset: 980
.Ltmp1326:
    000003d6: 	callq	__stack_chk_fail@PLT # Offset: 982
.Ltmp1322:
    000003db: 	leaq	DATAat0x4d018(%rip), %rdi
    000003e2: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 994
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE8Ih14custom_cse_mulIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z20test_CSE8_add_inlineIa14custom_cse_addIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z20test_CSE8_add_inlineIa14custom_cse_addIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z20test_CSE8_add_inlineIa14custom_cse_addIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/simple_types_cse.cpp/1
  Number      : 118
  State       : disassembled
  Address     : 0x15ee0
  Size        : 0x60b
  MaxSize     : 0x610
  Offset      : 0x15ee0
  Section     : .text
  Orc Section : .local.text._Z20test_CSE8_add_inlineIa14custom_cse_addIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0117:
    00000000: 	pushq	%r15
    00000002: 	movl	%esi, %r15d
    00000005: 	pushq	%r14
    00000007: 	pushq	%r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x68, %rsp
    00000011: 	movq	%rdi, 0x28(%rsp)
    00000016: 	movq	%rdx, 0x40(%rsp)
    0000001b: 	movq	%fs:0x28, %rax
    00000024: 	movq	%rax, 0x58(%rsp)
    00000029: 	xorl	%eax, %eax
    0000002b: 	callq	clock@PLT # Offset: 43
    00000030: 	movq	%rax, start_time(%rip)
    00000037: 	movl	iterations(%rip), %eax
    0000003d: 	movl	%eax, 0x34(%rsp)
    00000041: 	testl	%eax, %eax
    00000043: 	jle	.Ltmp1331 # Offset: 67
    00000049: 	movq	0x28(%rsp), %rax
    0000004e: 	movd	%r15d, %xmm2
    00000053: 	movl	$0x0, 0x24(%rsp)
    0000005b: 	pxor	%xmm5, %xmm5
    0000005f: 	punpcklbw	%xmm2, %xmm2
    00000063: 	movq	0x1f30(%rax), %xmm4
    0000006b: 	movzbl	(%rax), %ebx
    0000006e: 	punpcklwd	%xmm2, %xmm2
    00000072: 	movq	0x1f31(%rax), %xmm3
    0000007a: 	pshufd	$0x0, %xmm2, %xmm2
    0000007f: 	movb	%bl, 0x33(%rsp)
    00000083: 	movzbl	0x1(%rax), %ebx
    00000087: 	movb	%bl, 0x32(%rsp)
    0000008b: 	leaq	0x1f30(%rax), %rbx
    00000092: 	movq	%rbx, 0x38(%rsp)
    00000097: 	movzbl	%r15b, %ebx
    0000009b: 	movw	%bx, 0x30(%rsp)
    000000a0: 	movzbl	0x1f38(%rax), %ebx
    000000a7: 	movb	%bl, 0x20(%rsp)
    000000ab: 	movzbl	0x1f39(%rax), %ebx
    000000b2: 	movb	%bl, 0xc(%rsp)
    000000b6: 	movzbl	0x1f3a(%rax), %ebx
    000000bd: 	movb	%bl, 0xa(%rsp)
    000000c1: 	movzbl	0x1f3b(%rax), %ebx
    000000c8: 	movb	%bl, 0xd(%rsp)
    000000cc: 	movzbl	0x1f3c(%rax), %ebx
    000000d3: 	movb	%bl, 0xe(%rsp)
    000000d7: 	movzbl	0x1f3d(%rax), %ebx
    000000de: 	movb	%bl, 0xf(%rsp)
    000000e2: 	movzbl	0x1f3e(%rax), %ebx
    000000e9: 	movzbl	0x1f3f(%rax), %eax
    000000f0: 	movb	%bl, 0xb(%rsp)
    000000f4: 	movb	%al, 0x21(%rsp)
    000000f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1334:
    00000100: 	movzbl	0x33(%rsp), %ebx
    00000105: 	movzbl	0x32(%rsp), %edi
    0000010a: 	pxor	%xmm6, %xmm6
    0000010e: 	movl	%ebx, %edx
    00000110: 	addl	%edi, %edx
    00000112: 	addl	%r15d, %edx
    00000115: 	addl	%edx, %edx
    00000117: 	leal	(%rdi,%rdx), %ecx
    0000011a: 	addl	%ebx, %edx
    0000011c: 	subl	%edi, %ebx
    0000011e: 	leal	(,%rdx,8), %eax
    00000125: 	subl	%edx, %eax
    00000127: 	movl	%ebx, %edx
    00000129: 	addl	%edx, %eax
    0000012b: 	movq	0x28(%rsp), %rdx
    00000130: 	subl	%ecx, %eax
    00000132: 	subl	%ecx, %eax
    00000134: 	subl	%ecx, %eax
    00000136: 	subl	%ecx, %eax
    00000138: 	subl	%ecx, %eax
    0000013a: 	subl	%ecx, %eax
    0000013c: 	subl	%ecx, %eax
    0000013e: 	movq	0x38(%rsp), %rcx
    00000143: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1332:
    00000148: 	movdqu	(%rdx), %xmm7
    0000014c: 	movdqu	0x1(%rdx), %xmm0
    00000151: 	addq	$0x10, %rdx
    00000155: 	movdqu	-0xf(%rdx), %xmm1
    0000015a: 	movdqu	-0x10(%rdx), %xmm8
    00000160: 	paddb	%xmm7, %xmm0
    00000164: 	paddb	%xmm2, %xmm0
    00000168: 	paddb	%xmm0, %xmm0
    0000016c: 	paddb	%xmm0, %xmm1
    00000170: 	paddb	%xmm8, %xmm0
    00000175: 	paddb	%xmm0, %xmm0
    00000179: 	movdqa	%xmm1, %xmm7
    0000017d: 	paddb	%xmm0, %xmm0
    00000181: 	paddb	%xmm1, %xmm7
    00000185: 	paddb	%xmm0, %xmm0
    00000189: 	psubb	%xmm7, %xmm6
    0000018d: 	psubb	%xmm1, %xmm0
    00000191: 	paddb	%xmm7, %xmm1
    00000195: 	psubb	%xmm7, %xmm0
    00000199: 	paddb	%xmm6, %xmm0
    0000019d: 	movdqa	%xmm0, %xmm6
    000001a1: 	psubb	%xmm1, %xmm6
    000001a5: 	cmpq	%rdx, %rcx
    000001a8: 	jne	.Ltmp1332 # Offset: 424
    000001aa: 	movdqa	%xmm6, %xmm0
    000001ae: 	movzwl	0x30(%rsp), %ebx
    000001b3: 	movzbl	0xf(%rsp), %r10d
    000001b9: 	psrldq	$0x8, %xmm0
    000001be: 	movzbl	0x21(%rsp), %r14d
    000001c4: 	paddb	%xmm0, %xmm6
    000001c8: 	movdqa	%xmm3, %xmm0
    000001cc: 	movl	%r10d, %r9d
    000001cf: 	psadbw	%xmm5, %xmm6
    000001d3: 	paddb	%xmm4, %xmm0
    000001d7: 	movd	%xmm6, %edx
    000001db: 	addl	%edx, %eax
    000001dd: 	movzbl	0xe(%rsp), %edx
    000001e2: 	movb	%al, 0x22(%rsp)
    000001e6: 	movl	%ebx, %eax
    000001e8: 	shll	$0x8, %eax
    000001eb: 	orl	%ebx, %eax
    000001ed: 	movzbl	0xa(%rsp), %ebx
    000001f2: 	movd	%eax, %xmm7
    000001f6: 	pshuflw	$0x0, %xmm7, %xmm1
    000001fb: 	paddb	%xmm1, %xmm0
    000001ff: 	paddb	%xmm0, %xmm0
    00000203: 	movdqa	%xmm0, %xmm1
    00000207: 	paddb	%xmm3, %xmm0
    0000020b: 	paddb	%xmm4, %xmm1
    0000020f: 	movdqa	%xmm0, %xmm6
    00000213: 	paddb	%xmm1, %xmm1
    00000217: 	paddb	%xmm0, %xmm6
    0000021b: 	paddb	%xmm1, %xmm1
    0000021f: 	paddb	%xmm1, %xmm1
    00000223: 	psubb	%xmm0, %xmm1
    00000227: 	paddb	%xmm6, %xmm0
    0000022b: 	paddb	%xmm6, %xmm6
    0000022f: 	paddb	%xmm6, %xmm0
    00000233: 	psubb	%xmm0, %xmm1
    00000237: 	pxor	%xmm0, %xmm0
    0000023b: 	movdqa	%xmm1, %xmm7
    0000023f: 	psadbw	%xmm0, %xmm7
    00000243: 	movq	%xmm7, %rax
    00000248: 	movq	%xmm7, 0x48(%rsp)
    0000024e: 	movb	%al, 0x23(%rsp)
    00000252: 	movzbl	0x20(%rsp), %eax
    00000257: 	leal	(%rax,%r15), %r8d
    0000025b: 	movzbl	0xc(%rsp), %eax
    00000260: 	addl	%eax, %r8d
    00000263: 	movl	%eax, %edi
    00000265: 	addl	%r8d, %r8d
    00000268: 	addl	%ebx, %edi
    0000026a: 	leal	(%rax,%r8), %r13d
    0000026e: 	movzbl	0xd(%rsp), %eax
    00000273: 	addl	%r15d, %edi
    00000276: 	addb	0x20(%rsp), %r8b
    0000027b: 	addl	%edi, %edi
    0000027d: 	shll	$0x3, %r8d
    00000281: 	movl	%eax, %ecx
    00000283: 	movl	%eax, %esi
    00000285: 	leal	(%rdi,%rbx), %r12d
    00000289: 	subl	%r13d, %r8d
    0000028c: 	addl	%edx, %ecx
    0000028e: 	addl	%ebx, %esi
    00000290: 	subl	%r13d, %r8d
    00000293: 	addl	%r15d, %ecx
    00000296: 	addl	%r15d, %esi
    00000299: 	subl	%r13d, %r8d
    0000029c: 	addl	%ecx, %ecx
    0000029e: 	addl	%esi, %esi
    000002a0: 	subl	%r13d, %r8d
    000002a3: 	leal	(%rcx,%rdx), %ebx
    000002a6: 	addl	%r10d, %edx
    000002a9: 	leal	(%rsi,%rax), %ebp
    000002ac: 	subl	%r13d, %r8d
    000002af: 	addl	%r15d, %edx
    000002b2: 	subl	%r13d, %r8d
    000002b5: 	addl	%edx, %edx
    000002b7: 	leal	(%r10,%rdx), %r11d
    000002bb: 	movzbl	0xb(%rsp), %r10d
    000002c1: 	addl	%r10d, %r9d
    000002c4: 	movl	%r9d, %eax
    000002c7: 	movl	%r10d, %r9d
    000002ca: 	addl	%r15d, %eax
    000002cd: 	addl	%r9d, %r14d
    000002d0: 	addl	%eax, %eax
    000002d2: 	leal	(%r9,%rax), %r10d
    000002d6: 	movl	%r14d, %r9d
    000002d9: 	movzbl	0x23(%rsp), %r14d
    000002df: 	addl	%r15d, %r9d
    000002e2: 	addl	%r9d, %r9d
    000002e5: 	movb	%r9b, 0x10(%rsp)
    000002ea: 	addb	0x21(%rsp), %r9b
    000002ef: 	subl	%r13d, %r8d
    000002f2: 	addb	0xc(%rsp), %dil
    000002f7: 	addb	0xa(%rsp), %sil
    000002fc: 	subl	%r13d, %r8d
    000002ff: 	shll	$0x3, %edi
    00000302: 	shll	$0x3, %esi
    00000305: 	addb	0xd(%rsp), %cl
    00000309: 	addb	0x22(%rsp), %r14b
    0000030e: 	subl	%r12d, %edi
    00000311: 	subl	%ebp, %esi
    00000313: 	shll	$0x3, %ecx
    00000316: 	addl	%r8d, %r14d
    00000319: 	subl	%r12d, %edi
    0000031c: 	subl	%ebp, %esi
    0000031e: 	subl	%ebx, %ecx
    00000320: 	subl	%r12d, %edi
    00000323: 	subl	%ebp, %esi
    00000325: 	subl	%ebx, %ecx
    00000327: 	subl	%r12d, %edi
    0000032a: 	subl	%ebp, %esi
    0000032c: 	subl	%ebx, %ecx
    0000032e: 	subl	%r12d, %edi
    00000331: 	subl	%ebp, %esi
    00000333: 	subl	%ebx, %ecx
    00000335: 	subl	%r12d, %edi
    00000338: 	subl	%ebp, %esi
    0000033a: 	subl	%r12d, %edi
    0000033d: 	subl	%ebp, %esi
    0000033f: 	subl	%r12d, %edi
    00000342: 	subl	%ebp, %esi
    00000344: 	addl	%r14d, %edi
    00000347: 	addl	%edi, %esi
    00000349: 	subl	%ebx, %ecx
    0000034b: 	addb	0xe(%rsp), %dl
    0000034f: 	addb	0xf(%rsp), %al
    00000353: 	shll	$0x3, %edx
    00000356: 	shll	$0x3, %eax
    00000359: 	subl	%ebx, %ecx
    0000035b: 	subl	%r11d, %edx
    0000035e: 	subl	%r10d, %eax
    00000361: 	subl	%ebx, %ecx
    00000363: 	subl	%r11d, %edx
    00000366: 	subl	%r10d, %eax
    00000369: 	subl	%ebx, %ecx
    0000036b: 	subl	%r11d, %edx
    0000036e: 	subl	%r10d, %eax
    00000371: 	addl	%esi, %ecx
    00000373: 	subl	%r11d, %edx
    00000376: 	subl	%r10d, %eax
    00000379: 	subl	%r11d, %edx
    0000037c: 	subl	%r10d, %eax
    0000037f: 	subl	%r11d, %edx
    00000382: 	subl	%r10d, %eax
    00000385: 	subl	%r11d, %edx
    00000388: 	subl	%r10d, %eax
    0000038b: 	subl	%r11d, %edx
    0000038e: 	subl	%r10d, %eax
    00000391: 	addl	%ecx, %edx
    00000393: 	addl	%edx, %eax
    00000395: 	movzbl	0x10(%rsp), %edx
    0000039a: 	addb	0xb(%rsp), %dl
    0000039e: 	shll	$0x3, %edx
    000003a1: 	subl	%r9d, %edx
    000003a4: 	subl	%r9d, %edx
    000003a7: 	subl	%r9d, %edx
    000003aa: 	subl	%r9d, %edx
    000003ad: 	subl	%r9d, %edx
    000003b0: 	subl	%r9d, %edx
    000003b3: 	subl	%r9d, %edx
    000003b6: 	subl	%r9d, %edx
    000003b9: 	addb	%al, %dl
    000003bb: 	jne	.Ltmp1333 # Offset: 955
    000003c1: 	addl	$0x1, 0x24(%rsp)
    000003c6: 	movl	0x24(%rsp), %eax
    000003ca: 	cmpl	0x34(%rsp), %eax
    000003ce: 	jl	.Ltmp1334 # Offset: 974
.Ltmp1331:
    000003d4: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000003db: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000003e2: 	subq	$0x20, %rax
    000003e6: 	cmpq	%rax, %rbx
    000003e9: 	je	.Ltmp1335 # Offset: 1001
    000003ef: 	movq	0x40(%rsp), %rax
    000003f4: 	leaq	0x10(%rbx), %rdi
    000003f8: 	movq	%rdi, (%rbx)
    000003fb: 	movq	(%rax), %rbp
    000003fe: 	movq	0x8(%rax), %r12
    00000402: 	movq	%rbp, %rax
    00000405: 	addq	%r12, %rax
    00000408: 	je	.Ltmp1336 # Offset: 1032
    0000040a: 	testq	%rbp, %rbp
    0000040d: 	je	.Ltmp1337 # Offset: 1037
.Ltmp1336:
    00000413: 	movq	%r12, 0x50(%rsp)
    00000418: 	cmpq	$0xf, %r12
    0000041c: 	ja	.Ltmp1338 # Offset: 1052
    00000422: 	cmpq	$0x1, %r12
    00000426: 	jne	.Ltmp1339 # Offset: 1062
    0000042c: 	movzbl	(%rbp), %eax
    00000430: 	movb	%al, 0x10(%rbx)
.Ltmp1342:
    00000433: 	movq	%r12, 0x8(%rbx)
    00000437: 	movb	$0x0, (%rdi,%r12)
    0000043c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000443: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000044a: 	addq	$0x20, %rax
    0000044e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000455: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000045c: 	je	.Ltmp1340 # Offset: 1116
.Ltmp1343:
    00000462: 	movq	-0x20(%rax), %rbp
    00000466: 	callq	clock@PLT # Offset: 1126
    0000046b: 	movq	%rax, end_time(%rip)
    00000472: 	movq	0x58(%rsp), %rdx
    00000477: 	subq	%fs:0x28, %rdx
    00000480: 	jne	.Ltmp1341 # Offset: 1152
    00000486: 	subq	start_time(%rip), %rax
    0000048d: 	pxor	%xmm0, %xmm0
    00000491: 	movq	%rbp, %rdi
    00000494: 	cvtsi2sd	%rax, %xmm0
    00000499: 	divsd	DATAat0x4d640(%rip), %xmm0
    000004a1: 	addq	$0x68, %rsp
    000004a5: 	popq	%rbx
    000004a6: 	popq	%rbp
    000004a7: 	popq	%r12
    000004a9: 	popq	%r13
    000004ab: 	popq	%r14
    000004ad: 	popq	%r15
    000004af: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1199
    000004b4: 	nopl	(%rax) # Size: 4
.Ltmp1333:
    000004b8: 	movq	0x40(%rsp), %rax
    000004bd: 	movl	$0x1, %edi
    000004c2: 	movaps	%xmm2, 0x10(%rsp)
    000004c7: 	leaq	DATAat0x4d004(%rip), %rsi
    000004ce: 	movq	(%rax), %rdx
    000004d1: 	xorl	%eax, %eax
    000004d3: 	callq	__printf_chk@PLT # Offset: 1235
    000004d8: 	addl	$0x1, 0x24(%rsp)
    000004dd: 	movl	iterations(%rip), %ebx
    000004e3: 	movl	0x24(%rsp), %eax
    000004e7: 	movl	%ebx, 0x34(%rsp)
    000004eb: 	cmpl	%eax, %ebx
    000004ed: 	jle	.Ltmp1331 # Offset: 1261
    000004f3: 	movq	0x28(%rsp), %rax
    000004f8: 	movdqa	0x10(%rsp), %xmm2
    000004fe: 	pxor	%xmm5, %xmm5
    00000502: 	movq	0x1f30(%rax), %xmm4
    0000050a: 	movzbl	(%rax), %ebx
    0000050d: 	movq	0x1f31(%rax), %xmm3
    00000515: 	movb	%bl, 0x33(%rsp)
    00000519: 	movzbl	0x1(%rax), %ebx
    0000051d: 	movb	%bl, 0x32(%rsp)
    00000521: 	movzbl	0x1f38(%rax), %ebx
    00000528: 	movb	%bl, 0x20(%rsp)
    0000052c: 	movzbl	0x1f39(%rax), %ebx
    00000533: 	movb	%bl, 0xc(%rsp)
    00000537: 	movzbl	0x1f3a(%rax), %ebx
    0000053e: 	movb	%bl, 0xa(%rsp)
    00000542: 	movzbl	0x1f3b(%rax), %ebx
    00000549: 	movb	%bl, 0xd(%rsp)
    0000054d: 	movzbl	0x1f3c(%rax), %ebx
    00000554: 	movb	%bl, 0xe(%rsp)
    00000558: 	movzbl	0x1f3d(%rax), %ebx
    0000055f: 	movb	%bl, 0xf(%rsp)
    00000563: 	movzbl	0x1f3e(%rax), %ebx
    0000056a: 	movzbl	0x1f3f(%rax), %eax
    00000571: 	movb	%bl, 0xb(%rsp)
    00000575: 	movb	%al, 0x21(%rsp)
    00000579: 	jmp	.Ltmp1334 # Offset: 1401
.Ltmp1338:
    0000057e: 	movq	%rbx, %rdi
    00000581: 	leaq	0x50(%rsp), %rsi
    00000586: 	xorl	%edx, %edx
    00000588: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1416
    0000058d: 	movq	%rax, (%rbx)
    00000590: 	movq	%rax, %rdi
    00000593: 	movq	0x50(%rsp), %rax
    00000598: 	movq	%rax, 0x10(%rbx)
.Ltmp1344:
    0000059c: 	movq	%r12, %rdx
    0000059f: 	movq	%rbp, %rsi
    000005a2: 	callq	memcpy@PLT # Offset: 1442
    000005a7: 	movq	0x50(%rsp), %r12
    000005ac: 	movq	(%rbx), %rdi
    000005af: 	jmp	.Ltmp1342 # Offset: 1455
.Ltmp1335:
    000005b4: 	movq	0x40(%rsp), %rsi
    000005b9: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000005c0: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1472
    000005c5: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000005cc: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000005d3: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000005da: 	jne	.Ltmp1343 # Offset: 1498
.Ltmp1340:
    000005e0: 	movq	-0x8(%rdx), %rax
    000005e4: 	addq	$0x200, %rax
    000005ea: 	jmp	.Ltmp1343 # Offset: 1514
.Ltmp1339:
    000005ef: 	testq	%r12, %r12
    000005f2: 	je	.Ltmp1342 # Offset: 1522
    000005f8: 	jmp	.Ltmp1344 # Offset: 1528
.Ltmp1341:
    000005fa: 	callq	__stack_chk_fail@PLT # Offset: 1530
.Ltmp1337:
    000005ff: 	leaq	DATAat0x4d018(%rip), %rdi
    00000606: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1542
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_CSE8_add_inlineIa14custom_cse_addIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z9test_CSE8Ih14custom_cse_subIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 119
  State       : disassembled
  Address     : 0x164f0
  Size        : 0x593
  MaxSize     : 0x5a0
  Offset      : 0x164f0
  Section     : .text
  Orc Section : .local.text._Z9test_CSE8Ih14custom_cse_subIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0118:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movl	%esi, %r12d
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdi, %rbx
    00000016: 	subq	$0x48, %rsp
    0000001a: 	movq	%rcx, 0x20(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x38(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	movl	iterations(%rip), %eax
    00000041: 	movl	%eax, (%rsp)
    00000044: 	testl	%eax, %eax
    00000046: 	jle	.Ltmp1345 # Offset: 70
    0000004c: 	leal	-0x1(%r12), %ecx
    00000051: 	leal	-0x2(%r12), %eax
    00000056: 	movd	%ebp, %xmm2
    0000005a: 	xorl	%r14d, %r14d
    0000005d: 	movl	%eax, 0x4(%rsp)
    00000061: 	movl	%ecx, %eax
    00000063: 	punpcklbw	%xmm2, %xmm2
    00000067: 	movzbl	(%rbx), %r9d
    0000006b: 	shrl	$0x4, %eax
    0000006e: 	movl	%ecx, 0x8(%rsp)
    00000072: 	andl	$-0x10, %ecx
    00000075: 	movzbl	0x1(%rbx), %r8d
    0000007a: 	subl	$0x1, %eax
    0000007d: 	movl	%ecx, %r15d
    00000080: 	punpcklwd	%xmm2, %xmm2
    00000084: 	shlq	$0x4, %rax
    00000088: 	leaq	0x10(%rbx,%rax), %r13
    0000008d: 	leal	0x1(%rcx), %eax
    00000090: 	movl	%eax, 0xc(%rsp)
    00000094: 	nopl	(%rax) # Size: 4
.Ltmp1351:
    00000098: 	movl	%r9d, %ecx
    0000009b: 	movzbl	%r9b, %esi
    0000009f: 	movzbl	%r8b, %edx
    000000a3: 	subl	%r8d, %ecx
    000000a6: 	leal	(%rbp,%rcx), %eax
    000000aa: 	movzbl	%al, %eax
    000000ad: 	leal	(%rsi,%rax,2), %esi
    000000b0: 	leal	(%rdx,%rax,2), %edx
    000000b3: 	leal	(,%rsi,8), %eax
    000000ba: 	subl	%esi, %eax
    000000bc: 	subl	%edx, %eax
    000000be: 	addl	%ecx, %eax
    000000c0: 	subl	%edx, %eax
    000000c2: 	subl	%edx, %eax
    000000c4: 	subl	%edx, %eax
    000000c6: 	subl	%edx, %eax
    000000c8: 	subl	%edx, %eax
    000000ca: 	subl	%edx, %eax
    000000cc: 	cmpl	$0x1, %r12d
    000000d0: 	jle	.Ltmp1346 # Offset: 208
    000000d6: 	cmpl	$0xe, 0x4(%rsp)
    000000db: 	jbe	.Ltmp1347 # Offset: 219
    000000e1: 	pshufd	$0x0, %xmm2, %xmm6
    000000e6: 	movq	%rbx, %rdx
    000000e9: 	pxor	%xmm3, %xmm3
    000000ed: 	nopl	(%rax) # Size: 3
.Ltmp1348:
    000000f0: 	movdqu	(%rdx), %xmm1
    000000f4: 	movdqu	0x1(%rdx), %xmm7
    000000f9: 	addq	$0x10, %rdx
    000000fd: 	movdqu	-0x10(%rdx), %xmm0
    00000102: 	paddb	%xmm6, %xmm1
    00000106: 	movdqa	%xmm1, %xmm5
    0000010a: 	psubb	%xmm7, %xmm5
    0000010e: 	paddb	%xmm5, %xmm0
    00000112: 	paddb	%xmm5, %xmm1
    00000116: 	paddb	%xmm5, %xmm0
    0000011a: 	movdqa	%xmm1, %xmm4
    0000011e: 	paddb	%xmm0, %xmm0
    00000122: 	paddb	%xmm1, %xmm4
    00000126: 	paddb	%xmm0, %xmm0
    0000012a: 	psubb	%xmm4, %xmm3
    0000012e: 	paddb	%xmm0, %xmm0
    00000132: 	psubb	%xmm1, %xmm0
    00000136: 	paddb	%xmm4, %xmm1
    0000013a: 	psubb	%xmm4, %xmm0
    0000013e: 	psubb	%xmm1, %xmm0
    00000142: 	paddb	%xmm0, %xmm3
    00000146: 	cmpq	%rdx, %r13
    00000149: 	jne	.Ltmp1348 # Offset: 329
    0000014b: 	movdqa	%xmm3, %xmm0
    0000014f: 	psrldq	$0x8, %xmm0
    00000154: 	paddb	%xmm0, %xmm3
    00000158: 	pxor	%xmm0, %xmm0
    0000015c: 	psadbw	%xmm0, %xmm3
    00000160: 	movd	%xmm3, %edx
    00000164: 	addl	%edx, %eax
    00000166: 	cmpl	0x8(%rsp), %r15d
    0000016b: 	je	.Ltmp1346 # Offset: 363
    00000171: 	movl	0xc(%rsp), %ecx
    00000175: 	movl	%r15d, %edi
.Ltmp1359:
    00000178: 	movl	%r12d, %edx
    0000017b: 	subl	%edi, %edx
    0000017d: 	leal	-0x1(%rdx), %esi
    00000180: 	subl	$0x2, %edx
    00000183: 	cmpl	$0x6, %edx
    00000186: 	jbe	.Ltmp1349 # Offset: 390
    0000018c: 	movl	%ebp, %edx
    0000018e: 	movzbl	%bpl, %r10d
    00000192: 	movq	(%rbx,%rdi), %xmm0
    00000197: 	movq	0x1(%rbx,%rdi), %xmm4
    0000019d: 	shll	$0x8, %edx
    000001a0: 	orl	%r10d, %edx
    000001a3: 	movd	%edx, %xmm7
    000001a7: 	pshuflw	$0x0, %xmm7, %xmm3
    000001ac: 	paddb	%xmm0, %xmm3
    000001b0: 	movdqa	%xmm3, %xmm1
    000001b4: 	psubb	%xmm4, %xmm1
    000001b8: 	paddb	%xmm1, %xmm0
    000001bc: 	paddb	%xmm1, %xmm0
    000001c0: 	paddb	%xmm3, %xmm1
    000001c4: 	paddb	%xmm0, %xmm0
    000001c8: 	movdqa	%xmm1, %xmm3
    000001cc: 	paddb	%xmm1, %xmm3
    000001d0: 	paddb	%xmm0, %xmm0
    000001d4: 	paddb	%xmm0, %xmm0
    000001d8: 	psubb	%xmm1, %xmm0
    000001dc: 	paddb	%xmm3, %xmm1
    000001e0: 	paddb	%xmm3, %xmm3
    000001e4: 	paddb	%xmm3, %xmm1
    000001e8: 	psubb	%xmm1, %xmm0
    000001ec: 	pxor	%xmm1, %xmm1
    000001f0: 	movdqa	%xmm0, %xmm6
    000001f4: 	psadbw	%xmm1, %xmm6
    000001f8: 	movq	%xmm6, %rdx
    000001fd: 	movq	%xmm6, 0x28(%rsp)
    00000203: 	movl	%edx, %edi
    00000205: 	movl	%esi, %edx
    00000207: 	andl	$-0x8, %edx
    0000020a: 	addl	%edi, %eax
    0000020c: 	addl	%edx, %ecx
    0000020e: 	cmpl	%esi, %edx
    00000210: 	je	.Ltmp1346 # Offset: 528
.Ltmp1349:
    00000216: 	movslq	%ecx, %rdx
    00000219: 	addq	%rbx, %rdx
    0000021c: 	movzbl	-0x1(%rdx), %r11d
    00000221: 	movzbl	(%rdx), %r10d
    00000225: 	leal	(%r11,%rbp), %edx
    00000229: 	movl	%r10d, %esi
    0000022c: 	subl	%r10d, %edx
    0000022f: 	movzbl	%dl, %edx
    00000232: 	leal	(%r10,%rdx,2), %edi
    00000236: 	leal	(%r11,%rdx,2), %edx
    0000023a: 	leal	(%rax,%rdx,8), %eax
    0000023d: 	leal	0x1(%rcx), %edx
    00000240: 	subl	%edi, %eax
    00000242: 	subl	%edi, %eax
    00000244: 	subl	%edi, %eax
    00000246: 	subl	%edi, %eax
    00000248: 	subl	%edi, %eax
    0000024a: 	subl	%edi, %eax
    0000024c: 	addl	%edi, %edi
    0000024e: 	subl	%edi, %eax
    00000250: 	cmpl	%edx, %r12d
    00000253: 	jle	.Ltmp1346 # Offset: 595
    00000259: 	movslq	%edx, %rdx
    0000025c: 	addl	%ebp, %esi
    0000025e: 	movzbl	(%rbx,%rdx), %edi
    00000262: 	subl	%edi, %esi
    00000264: 	movl	%edi, %edx
    00000266: 	movzbl	%sil, %esi
    0000026a: 	leal	(%rdi,%rsi,2), %r11d
    0000026e: 	leal	(%r10,%rsi,2), %esi
    00000272: 	shll	$0x3, %esi
    00000275: 	subl	%r11d, %esi
    00000278: 	subl	%r11d, %esi
    0000027b: 	subl	%r11d, %esi
    0000027e: 	subl	%r11d, %esi
    00000281: 	subl	%r11d, %esi
    00000284: 	subl	%r11d, %esi
    00000287: 	addl	%r11d, %r11d
    0000028a: 	subl	%r11d, %esi
    0000028d: 	addl	%esi, %eax
    0000028f: 	leal	0x2(%rcx), %esi
    00000292: 	cmpl	%esi, %r12d
    00000295: 	jle	.Ltmp1346 # Offset: 661
    0000029b: 	movslq	%esi, %rsi
    0000029e: 	addl	%ebp, %edx
    000002a0: 	movzbl	(%rbx,%rsi), %r10d
    000002a5: 	subl	%r10d, %edx
    000002a8: 	movl	%r10d, %esi
    000002ab: 	movzbl	%dl, %edx
    000002ae: 	leal	(%r10,%rdx,2), %r11d
    000002b2: 	leal	(%rdi,%rdx,2), %edx
    000002b5: 	shll	$0x3, %edx
    000002b8: 	subl	%r11d, %edx
    000002bb: 	subl	%r11d, %edx
    000002be: 	subl	%r11d, %edx
    000002c1: 	subl	%r11d, %edx
    000002c4: 	subl	%r11d, %edx
    000002c7: 	subl	%r11d, %edx
    000002ca: 	addl	%r11d, %r11d
    000002cd: 	subl	%r11d, %edx
    000002d0: 	addl	%edx, %eax
    000002d2: 	leal	0x3(%rcx), %edx
    000002d5: 	cmpl	%edx, %r12d
    000002d8: 	jle	.Ltmp1346 # Offset: 728
    000002de: 	movslq	%edx, %rdx
    000002e1: 	addl	%ebp, %esi
    000002e3: 	movzbl	(%rbx,%rdx), %r11d
    000002e8: 	subl	%r11d, %esi
    000002eb: 	movl	%r11d, %edi
    000002ee: 	movzbl	%sil, %edx
    000002f2: 	leal	(%r11,%rdx,2), %esi
    000002f6: 	leal	(%r10,%rdx,2), %edx
    000002fa: 	shll	$0x3, %edx
    000002fd: 	subl	%esi, %edx
    000002ff: 	subl	%esi, %edx
    00000301: 	subl	%esi, %edx
    00000303: 	subl	%esi, %edx
    00000305: 	subl	%esi, %edx
    00000307: 	subl	%esi, %edx
    00000309: 	addl	%esi, %esi
    0000030b: 	subl	%esi, %edx
    0000030d: 	addl	%edx, %eax
    0000030f: 	leal	0x4(%rcx), %edx
    00000312: 	cmpl	%edx, %r12d
    00000315: 	jle	.Ltmp1346 # Offset: 789
    0000031b: 	movslq	%edx, %rdx
    0000031e: 	addl	%ebp, %edi
    00000320: 	movzbl	(%rbx,%rdx), %r10d
    00000325: 	subl	%r10d, %edi
    00000328: 	movl	%r10d, %esi
    0000032b: 	movzbl	%dil, %edx
    0000032f: 	leal	(%r10,%rdx,2), %edi
    00000333: 	leal	(%r11,%rdx,2), %edx
    00000337: 	shll	$0x3, %edx
    0000033a: 	subl	%edi, %edx
    0000033c: 	subl	%edi, %edx
    0000033e: 	subl	%edi, %edx
    00000340: 	subl	%edi, %edx
    00000342: 	subl	%edi, %edx
    00000344: 	subl	%edi, %edx
    00000346: 	addl	%edi, %edi
    00000348: 	subl	%edi, %edx
    0000034a: 	addl	%edx, %eax
    0000034c: 	leal	0x5(%rcx), %edx
    0000034f: 	cmpl	%edx, %r12d
    00000352: 	jle	.Ltmp1346 # Offset: 850
    00000354: 	movslq	%edx, %rdx
    00000357: 	addl	%ebp, %esi
    00000359: 	addl	$0x6, %ecx
    0000035c: 	movzbl	(%rbx,%rdx), %r11d
    00000361: 	subl	%r11d, %esi
    00000364: 	movl	%r11d, %edi
    00000367: 	movzbl	%sil, %edx
    0000036b: 	leal	(%r11,%rdx,2), %esi
    0000036f: 	leal	(%r10,%rdx,2), %edx
    00000373: 	shll	$0x3, %edx
    00000376: 	subl	%esi, %edx
    00000378: 	subl	%esi, %edx
    0000037a: 	subl	%esi, %edx
    0000037c: 	subl	%esi, %edx
    0000037e: 	subl	%esi, %edx
    00000380: 	subl	%esi, %edx
    00000382: 	addl	%esi, %esi
    00000384: 	subl	%esi, %edx
    00000386: 	addl	%edx, %eax
    00000388: 	cmpl	%ecx, %r12d
    0000038b: 	jle	.Ltmp1346 # Offset: 907
    0000038d: 	movslq	%ecx, %rcx
    00000390: 	addl	%ebp, %edi
    00000392: 	movzbl	(%rbx,%rcx), %ecx
    00000396: 	subl	%ecx, %edi
    00000398: 	movzbl	%dil, %edx
    0000039c: 	leal	(%rcx,%rdx,2), %ecx
    0000039f: 	leal	(%r11,%rdx,2), %edx
    000003a3: 	shll	$0x3, %edx
    000003a6: 	subl	%ecx, %edx
    000003a8: 	subl	%ecx, %edx
    000003aa: 	subl	%ecx, %edx
    000003ac: 	subl	%ecx, %edx
    000003ae: 	subl	%ecx, %edx
    000003b0: 	subl	%ecx, %edx
    000003b2: 	addl	%ecx, %ecx
    000003b4: 	subl	%ecx, %edx
    000003b6: 	addl	%edx, %eax
.Ltmp1346:
    000003b8: 	testb	%al, %al
    000003ba: 	jne	.Ltmp1350 # Offset: 954
    000003c0: 	addl	$0x1, %r14d
    000003c4: 	cmpl	(%rsp), %r14d
    000003c8: 	jl	.Ltmp1351 # Offset: 968
.Ltmp1345:
    000003ce: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000003d5: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000003dc: 	subq	$0x20, %rax
    000003e0: 	cmpq	%rax, %rbx
    000003e3: 	je	.Ltmp1352 # Offset: 995
    000003e9: 	movq	0x20(%rsp), %rax
    000003ee: 	leaq	0x10(%rbx), %rdi
    000003f2: 	movq	%rdi, (%rbx)
    000003f5: 	movq	(%rax), %rbp
    000003f8: 	movq	0x8(%rax), %r12
    000003fc: 	movq	%rbp, %rax
    000003ff: 	addq	%r12, %rax
    00000402: 	je	.Ltmp1353 # Offset: 1026
    00000404: 	testq	%rbp, %rbp
    00000407: 	je	.Ltmp1354 # Offset: 1031
.Ltmp1353:
    0000040d: 	movq	%r12, 0x30(%rsp)
    00000412: 	cmpq	$0xf, %r12
    00000416: 	ja	.Ltmp1355 # Offset: 1046
    0000041c: 	cmpq	$0x1, %r12
    00000420: 	jne	.Ltmp1356 # Offset: 1056
    00000426: 	movzbl	(%rbp), %eax
    0000042a: 	movb	%al, 0x10(%rbx)
.Ltmp1360:
    0000042d: 	movq	%r12, 0x8(%rbx)
    00000431: 	movb	$0x0, (%rdi,%r12)
    00000436: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000043d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000444: 	addq	$0x20, %rax
    00000448: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000044f: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000456: 	je	.Ltmp1357 # Offset: 1110
.Ltmp1361:
    0000045c: 	movq	-0x20(%rax), %rbp
    00000460: 	callq	clock@PLT # Offset: 1120
    00000465: 	movq	%rax, end_time(%rip)
    0000046c: 	movq	0x38(%rsp), %rdx
    00000471: 	subq	%fs:0x28, %rdx
    0000047a: 	jne	.Ltmp1358 # Offset: 1146
    00000480: 	subq	start_time(%rip), %rax
    00000487: 	pxor	%xmm0, %xmm0
    0000048b: 	movq	%rbp, %rdi
    0000048e: 	cvtsi2sd	%rax, %xmm0
    00000493: 	divsd	DATAat0x4d640(%rip), %xmm0
    0000049b: 	addq	$0x48, %rsp
    0000049f: 	popq	%rbx
    000004a0: 	popq	%rbp
    000004a1: 	popq	%r12
    000004a3: 	popq	%r13
    000004a5: 	popq	%r14
    000004a7: 	popq	%r15
    000004a9: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1193
    000004ae: 	nop # Size: 2
.Ltmp1350:
    000004b0: 	movq	0x20(%rsp), %rax
    000004b5: 	leaq	DATAat0x4d004(%rip), %rsi
    000004bc: 	movl	$0x1, %edi
    000004c1: 	movaps	%xmm2, 0x10(%rsp)
    000004c6: 	addl	$0x1, %r14d
    000004ca: 	movq	(%rax), %rdx
    000004cd: 	xorl	%eax, %eax
    000004cf: 	callq	__printf_chk@PLT # Offset: 1231
    000004d4: 	movl	iterations(%rip), %eax
    000004da: 	movl	%eax, (%rsp)
    000004dd: 	cmpl	%r14d, %eax
    000004e0: 	jle	.Ltmp1345 # Offset: 1248
    000004e6: 	movzbl	(%rbx), %r9d
    000004ea: 	movzbl	0x1(%rbx), %r8d
    000004ef: 	movdqa	0x10(%rsp), %xmm2
    000004f5: 	jmp	.Ltmp1351 # Offset: 1269
.Ltmp1347:
    000004fa: 	xorl	%edi, %edi
    000004fc: 	movl	$0x1, %ecx
    00000501: 	jmp	.Ltmp1359 # Offset: 1281
.Ltmp1355:
    00000506: 	movq	%rbx, %rdi
    00000509: 	leaq	0x30(%rsp), %rsi
    0000050e: 	xorl	%edx, %edx
    00000510: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1296
    00000515: 	movq	%rax, (%rbx)
    00000518: 	movq	%rax, %rdi
    0000051b: 	movq	0x30(%rsp), %rax
    00000520: 	movq	%rax, 0x10(%rbx)
.Ltmp1362:
    00000524: 	movq	%r12, %rdx
    00000527: 	movq	%rbp, %rsi
    0000052a: 	callq	memcpy@PLT # Offset: 1322
    0000052f: 	movq	0x30(%rsp), %r12
    00000534: 	movq	(%rbx), %rdi
    00000537: 	jmp	.Ltmp1360 # Offset: 1335
.Ltmp1352:
    0000053c: 	movq	0x20(%rsp), %rsi
    00000541: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000548: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1352
    0000054d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000554: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000055b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000562: 	jne	.Ltmp1361 # Offset: 1378
.Ltmp1357:
    00000568: 	movq	-0x8(%rdx), %rax
    0000056c: 	addq	$0x200, %rax
    00000572: 	jmp	.Ltmp1361 # Offset: 1394
.Ltmp1356:
    00000577: 	testq	%r12, %r12
    0000057a: 	je	.Ltmp1360 # Offset: 1402
    00000580: 	jmp	.Ltmp1362 # Offset: 1408
.Ltmp1358:
    00000582: 	callq	__stack_chk_fail@PLT # Offset: 1410
.Ltmp1354:
    00000587: 	leaq	DATAat0x4d018(%rip), %rdi
    0000058e: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1422
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE8Ih14custom_cse_subIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSE8Ii14custom_cse_divIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 120
  State       : disassembled
  Address     : 0x16a90
  Size        : 0x297
  MaxSize     : 0x2a0
  Offset      : 0x16a90
  Section     : .text
  Orc Section : .local.text._Z9test_CSE8Ii14custom_cse_divIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0119:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rcx, %rbp
    00000016: 	pushq	%rbx
    00000017: 	movl	%edx, %ebx
    00000019: 	subq	$0x18, %rsp
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x8(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	callq	clock@PLT # Offset: 45
    00000032: 	movl	iterations(%rip), %r10d
    00000039: 	movq	%rax, start_time(%rip)
    00000040: 	testl	%r10d, %r10d
    00000043: 	jle	.Ltmp1363 # Offset: 67
    00000049: 	leal	-0x2(%r14), %eax
    0000004d: 	xorl	%r15d, %r15d
    00000050: 	leaq	0x8(%r13,%rax,4), %r12
.Ltmp1375:
    00000055: 	movl	(%r13), %r8d
    00000059: 	movl	0x4(%r13), %r9d
.Ltmp1367:
    0000005d: 	movl	%r8d, %eax
    00000060: 	movl	%r8d, %ecx
    00000063: 	cltd
    00000064: 	idivl	%r9d
    00000067: 	addl	%ebx, %eax
    00000069: 	leal	(%r8,%rax,2), %edi
    0000006d: 	leal	(%r9,%rax,2), %esi
    00000071: 	movl	%r8d, %eax
    00000074: 	subl	%r9d, %eax
    00000077: 	addl	%edi, %eax
    00000079: 	subl	%esi, %eax
    0000007b: 	addl	%edi, %eax
    0000007d: 	subl	%esi, %eax
    0000007f: 	addl	%edi, %eax
    00000081: 	subl	%esi, %eax
    00000083: 	addl	%edi, %eax
    00000085: 	subl	%esi, %eax
    00000087: 	addl	%edi, %eax
    00000089: 	subl	%esi, %eax
    0000008b: 	addl	%edi, %eax
    0000008d: 	subl	%esi, %eax
    0000008f: 	addl	%eax, %edi
    00000091: 	subl	%esi, %edi
    00000093: 	cmpl	$0x1, %r14d
    00000097: 	jle	.Ltmp1364 # Offset: 151
    00000099: 	leaq	0x4(%r13), %rsi
    0000009d: 	nopl	(%rax) # Size: 3
.Ltmp1365:
    000000a0: 	movl	%ecx, %r11d
    000000a3: 	movl	(%rsi), %ecx
    000000a5: 	addq	$0x4, %rsi
    000000a9: 	movl	%r11d, %eax
    000000ac: 	cltd
    000000ad: 	idivl	%ecx
    000000af: 	addl	%ebx, %eax
    000000b1: 	leal	(%r11,%rax,2), %edx
    000000b5: 	leal	(%rcx,%rax,2), %r11d
    000000b9: 	addl	%edx, %edi
    000000bb: 	movl	%edi, %eax
    000000bd: 	subl	%r11d, %eax
    000000c0: 	addl	%edx, %eax
    000000c2: 	subl	%r11d, %eax
    000000c5: 	addl	%edx, %eax
    000000c7: 	subl	%r11d, %eax
    000000ca: 	addl	%edx, %eax
    000000cc: 	subl	%r11d, %eax
    000000cf: 	addl	%edx, %eax
    000000d1: 	subl	%r11d, %eax
    000000d4: 	addl	%edx, %eax
    000000d6: 	subl	%r11d, %eax
    000000d9: 	addl	%edx, %eax
    000000db: 	subl	%r11d, %eax
    000000de: 	addl	%eax, %edx
    000000e0: 	movl	%edx, %edi
    000000e2: 	subl	%r11d, %edi
    000000e5: 	cmpq	%rsi, %r12
    000000e8: 	jne	.Ltmp1365 # Offset: 232
.Ltmp1364:
    000000ea: 	testl	%edi, %edi
    000000ec: 	jne	.Ltmp1366 # Offset: 236
    000000f2: 	addl	$0x1, %r15d
    000000f6: 	cmpl	%r10d, %r15d
    000000f9: 	jl	.Ltmp1367 # Offset: 249
.Ltmp1363:
    000000ff: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000106: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000010d: 	subq	$0x20, %rax
    00000111: 	cmpq	%rax, %rbx
    00000114: 	je	.Ltmp1368 # Offset: 276
    0000011a: 	leaq	0x10(%rbx), %rdi
    0000011e: 	movq	0x8(%rbp), %r12
    00000122: 	movq	%rdi, (%rbx)
    00000125: 	movq	(%rbp), %r13
    00000129: 	movq	%r13, %rax
    0000012c: 	addq	%r12, %rax
    0000012f: 	je	.Ltmp1369 # Offset: 303
    00000131: 	testq	%r13, %r13
    00000134: 	je	.Ltmp1370 # Offset: 308
.Ltmp1369:
    0000013a: 	movq	%r12, (%rsp)
    0000013e: 	cmpq	$0xf, %r12
    00000142: 	ja	.Ltmp1371 # Offset: 322
    00000148: 	cmpq	$0x1, %r12
    0000014c: 	jne	.Ltmp1372 # Offset: 332
    00000152: 	movzbl	(%r13), %eax
    00000157: 	movb	%al, 0x10(%rbx)
.Ltmp1376:
    0000015a: 	movq	%r12, 0x8(%rbx)
    0000015e: 	movb	$0x0, (%rdi,%r12)
    00000163: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000016a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000171: 	addq	$0x20, %rax
    00000175: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000017c: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000183: 	je	.Ltmp1373 # Offset: 387
.Ltmp1377:
    00000189: 	movq	-0x20(%rax), %rbp
    0000018d: 	callq	clock@PLT # Offset: 397
    00000192: 	movq	%rax, end_time(%rip)
    00000199: 	movq	0x8(%rsp), %rdx
    0000019e: 	subq	%fs:0x28, %rdx
    000001a7: 	jne	.Ltmp1374 # Offset: 423
    000001ad: 	subq	start_time(%rip), %rax
    000001b4: 	pxor	%xmm0, %xmm0
    000001b8: 	movq	%rbp, %rdi
    000001bb: 	cvtsi2sd	%rax, %xmm0
    000001c0: 	divsd	DATAat0x4d640(%rip), %xmm0
    000001c8: 	addq	$0x18, %rsp
    000001cc: 	popq	%rbx
    000001cd: 	popq	%rbp
    000001ce: 	popq	%r12
    000001d0: 	popq	%r13
    000001d2: 	popq	%r14
    000001d4: 	popq	%r15
    000001d6: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 470
    000001db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1366:
    000001e0: 	movq	(%rbp), %rdx
    000001e4: 	movl	$0x1, %edi
    000001e9: 	xorl	%eax, %eax
    000001eb: 	addl	$0x1, %r15d
    000001ef: 	leaq	DATAat0x4d004(%rip), %rsi
    000001f6: 	callq	__printf_chk@PLT # Offset: 502
    000001fb: 	movl	iterations(%rip), %r10d
    00000202: 	cmpl	%r10d, %r15d
    00000205: 	jl	.Ltmp1375 # Offset: 517
    0000020b: 	jmp	.Ltmp1363 # Offset: 523
.Ltmp1371:
    00000210: 	movq	%rbx, %rdi
    00000213: 	movq	%rsp, %rsi
    00000216: 	xorl	%edx, %edx
    00000218: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 536
    0000021d: 	movq	%rax, (%rbx)
    00000220: 	movq	%rax, %rdi
    00000223: 	movq	(%rsp), %rax
    00000227: 	movq	%rax, 0x10(%rbx)
.Ltmp1378:
    0000022b: 	movq	%r12, %rdx
    0000022e: 	movq	%r13, %rsi
    00000231: 	callq	memcpy@PLT # Offset: 561
    00000236: 	movq	(%rsp), %r12
    0000023a: 	movq	(%rbx), %rdi
    0000023d: 	jmp	.Ltmp1376 # Offset: 573
.Ltmp1368:
    00000242: 	movq	%rbp, %rsi
    00000245: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000024c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 588
    00000251: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000258: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000025f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000266: 	jne	.Ltmp1377 # Offset: 614
.Ltmp1373:
    0000026c: 	movq	-0x8(%rdx), %rax
    00000270: 	addq	$0x200, %rax
    00000276: 	jmp	.Ltmp1377 # Offset: 630
.Ltmp1372:
    0000027b: 	testq	%r12, %r12
    0000027e: 	je	.Ltmp1376 # Offset: 638
    00000284: 	jmp	.Ltmp1378 # Offset: 644
.Ltmp1374:
    00000286: 	callq	__stack_chk_fail@PLT # Offset: 646
.Ltmp1370:
    0000028b: 	leaq	DATAat0x4d018(%rip), %rdi
    00000292: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 658
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE8Ii14custom_cse_divIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSE8Ij14custom_cse_addIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 121
  State       : disassembled
  Address     : 0x16d30
  Size        : 0x3dd
  MaxSize     : 0x3e0
  Offset      : 0x16d30
  Section     : .text
  Orc Section : .local.text._Z9test_CSE8Ij14custom_cse_addIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0120:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdi, %rbx
    00000016: 	subq	$0x38, %rsp
    0000001a: 	movq	%rcx, 0x18(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x28(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r10d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r10d, %r10d
    00000045: 	jle	.Ltmp1379 # Offset: 69
    0000004b: 	leal	-0x1(%r14), %r8d
    0000004f: 	leal	-0x2(%r14), %eax
    00000053: 	movl	(%rbx), %edi
    00000055: 	movl	0x4(%rbx), %esi
    00000058: 	movl	%eax, 0xc(%rsp)
    0000005c: 	movl	%r8d, %eax
    0000005f: 	movl	%r8d, %r15d
    00000062: 	xorl	%r13d, %r13d
    00000065: 	shrl	$0x2, %eax
    00000068: 	andl	$-0x4, %r15d
    0000006c: 	subl	$0x1, %eax
    0000006f: 	shlq	$0x4, %rax
    00000073: 	leaq	0x10(%rbx,%rax), %r12
    00000078: 	leal	0x1(%r15), %eax
    0000007c: 	movl	%eax, 0x10(%rsp)
.Ltmp1385:
    00000080: 	leal	(%rdi,%rsi), %ecx
    00000083: 	addl	%ebp, %ecx
    00000085: 	addl	%ecx, %ecx
    00000087: 	leal	(%rsi,%rcx), %edx
    0000008a: 	addl	%edi, %ecx
    0000008c: 	leal	(,%rcx,8), %eax
    00000093: 	subl	%ecx, %eax
    00000095: 	movl	%edi, %ecx
    00000097: 	subl	%esi, %ecx
    00000099: 	addl	%ecx, %eax
    0000009b: 	subl	%edx, %eax
    0000009d: 	subl	%edx, %eax
    0000009f: 	subl	%edx, %eax
    000000a1: 	subl	%edx, %eax
    000000a3: 	subl	%edx, %eax
    000000a5: 	subl	%edx, %eax
    000000a7: 	subl	%edx, %eax
    000000a9: 	cmpl	$0x1, %r14d
    000000ad: 	jle	.Ltmp1380 # Offset: 173
    000000b3: 	cmpl	$0x2, 0xc(%rsp)
    000000b8: 	jbe	.Ltmp1381 # Offset: 184
    000000be: 	movd	%ebp, %xmm7
    000000c2: 	movq	%rbx, %rdx
    000000c5: 	pxor	%xmm2, %xmm2
    000000c9: 	pshufd	$0x0, %xmm7, %xmm4
    000000ce: 	nop # Size: 2
.Ltmp1382:
    000000d0: 	movdqu	(%rdx), %xmm5
    000000d4: 	movdqu	0x4(%rdx), %xmm0
    000000d9: 	addq	$0x10, %rdx
    000000dd: 	movdqu	-0xc(%rdx), %xmm1
    000000e2: 	paddd	%xmm5, %xmm0
    000000e6: 	paddd	%xmm4, %xmm0
    000000ea: 	pslld	$0x1, %xmm0
    000000ef: 	paddd	%xmm0, %xmm1
    000000f3: 	paddd	%xmm5, %xmm0
    000000f7: 	movdqa	%xmm1, %xmm3
    000000fb: 	pslld	$0x3, %xmm0
    00000100: 	paddd	%xmm1, %xmm3
    00000104: 	psubd	%xmm1, %xmm0
    00000108: 	psubd	%xmm3, %xmm0
    0000010c: 	paddd	%xmm1, %xmm3
    00000110: 	pslld	$0x1, %xmm1
    00000115: 	psubd	%xmm3, %xmm0
    00000119: 	psubd	%xmm1, %xmm2
    0000011d: 	paddd	%xmm0, %xmm2
    00000121: 	cmpq	%rdx, %r12
    00000124: 	jne	.Ltmp1382 # Offset: 292
    00000126: 	movdqa	%xmm2, %xmm0
    0000012a: 	psrldq	$0x8, %xmm0
    0000012f: 	paddd	%xmm0, %xmm2
    00000133: 	movdqa	%xmm2, %xmm0
    00000137: 	psrldq	$0x4, %xmm0
    0000013c: 	paddd	%xmm0, %xmm2
    00000140: 	movd	%xmm2, %edx
    00000144: 	addl	%edx, %eax
    00000146: 	cmpl	%r8d, %r15d
    00000149: 	je	.Ltmp1380 # Offset: 329
    0000014f: 	movl	0x10(%rsp), %edx
    00000153: 	movl	%r15d, %r9d
.Ltmp1393:
    00000156: 	movl	%r14d, %r11d
    00000159: 	subl	%r9d, %r11d
    0000015c: 	leal	-0x1(%r11), %ecx
    00000160: 	cmpl	$0x2, %r11d
    00000164: 	je	.Ltmp1383 # Offset: 356
    00000166: 	movq	(%rbx,%r9,4), %xmm0
    0000016c: 	movd	%ebp, %xmm7
    00000170: 	movq	0x4(%rbx,%r9,4), %xmm1
    00000177: 	pshufd	$0xe0, %xmm7, %xmm2
    0000017c: 	paddd	%xmm0, %xmm2
    00000180: 	paddd	%xmm1, %xmm2
    00000184: 	pslld	$0x1, %xmm2
    00000189: 	paddd	%xmm2, %xmm1
    0000018d: 	paddd	%xmm2, %xmm0
    00000191: 	movdqa	%xmm1, %xmm3
    00000195: 	pslld	$0x3, %xmm0
    0000019a: 	movdqa	%xmm1, %xmm2
    0000019e: 	paddd	%xmm1, %xmm3
    000001a2: 	psubd	%xmm1, %xmm0
    000001a6: 	pslld	$0x1, %xmm2
    000001ab: 	paddd	%xmm2, %xmm1
    000001af: 	psubd	%xmm3, %xmm0
    000001b3: 	psubd	%xmm3, %xmm0
    000001b7: 	psubd	%xmm1, %xmm0
    000001bb: 	movd	%xmm0, %r11d
    000001c0: 	pshufd	$0xe5, %xmm0, %xmm7
    000001c5: 	movd	%xmm7, %r9d
    000001ca: 	addl	%r11d, %r9d
    000001cd: 	addl	%r9d, %eax
    000001d0: 	movl	%ecx, %r9d
    000001d3: 	andl	$-0x2, %r9d
    000001d7: 	addl	%r9d, %edx
    000001da: 	cmpl	%ecx, %r9d
    000001dd: 	je	.Ltmp1380 # Offset: 477
.Ltmp1383:
    000001df: 	movslq	%edx, %rdx
    000001e2: 	movl	-0x4(%rbx,%rdx,4), %r9d
    000001e7: 	movl	(%rbx,%rdx,4), %edx
    000001ea: 	leal	(%rbp,%rdx), %ecx
    000001ee: 	addl	%r9d, %ecx
    000001f1: 	addl	%ecx, %ecx
    000001f3: 	addl	%ecx, %edx
    000001f5: 	addl	%r9d, %ecx
    000001f8: 	leal	(%rax,%rcx,8), %eax
    000001fb: 	subl	%edx, %eax
    000001fd: 	subl	%edx, %eax
    000001ff: 	subl	%edx, %eax
    00000201: 	subl	%edx, %eax
    00000203: 	subl	%edx, %eax
    00000205: 	subl	%edx, %eax
    00000207: 	addl	%edx, %edx
    00000209: 	subl	%edx, %eax
.Ltmp1380:
    0000020b: 	testl	%eax, %eax
    0000020d: 	jne	.Ltmp1384 # Offset: 525
    00000213: 	addl	$0x1, %r13d
    00000217: 	cmpl	%r10d, %r13d
    0000021a: 	jl	.Ltmp1385 # Offset: 538
.Ltmp1379:
    00000220: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000227: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000022e: 	subq	$0x20, %rax
    00000232: 	cmpq	%rax, %rbx
    00000235: 	je	.Ltmp1386 # Offset: 565
    0000023b: 	movq	0x18(%rsp), %rax
    00000240: 	leaq	0x10(%rbx), %rdi
    00000244: 	movq	%rdi, (%rbx)
    00000247: 	movq	(%rax), %rbp
    0000024a: 	movq	0x8(%rax), %r12
    0000024e: 	movq	%rbp, %rax
    00000251: 	addq	%r12, %rax
    00000254: 	je	.Ltmp1387 # Offset: 596
    00000256: 	testq	%rbp, %rbp
    00000259: 	je	.Ltmp1388 # Offset: 601
.Ltmp1387:
    0000025f: 	movq	%r12, 0x20(%rsp)
    00000264: 	cmpq	$0xf, %r12
    00000268: 	ja	.Ltmp1389 # Offset: 616
    0000026e: 	cmpq	$0x1, %r12
    00000272: 	jne	.Ltmp1390 # Offset: 626
    00000278: 	movzbl	(%rbp), %eax
    0000027c: 	movb	%al, 0x10(%rbx)
.Ltmp1394:
    0000027f: 	movq	%r12, 0x8(%rbx)
    00000283: 	movb	$0x0, (%rdi,%r12)
    00000288: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000028f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000296: 	addq	$0x20, %rax
    0000029a: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002a1: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000002a8: 	je	.Ltmp1391 # Offset: 680
.Ltmp1395:
    000002ae: 	movq	-0x20(%rax), %rbp
    000002b2: 	callq	clock@PLT # Offset: 690
    000002b7: 	movq	%rax, end_time(%rip)
    000002be: 	movq	0x28(%rsp), %rdx
    000002c3: 	subq	%fs:0x28, %rdx
    000002cc: 	jne	.Ltmp1392 # Offset: 716
    000002d2: 	subq	start_time(%rip), %rax
    000002d9: 	pxor	%xmm0, %xmm0
    000002dd: 	movq	%rbp, %rdi
    000002e0: 	cvtsi2sd	%rax, %xmm0
    000002e5: 	divsd	DATAat0x4d640(%rip), %xmm0
    000002ed: 	addq	$0x38, %rsp
    000002f1: 	popq	%rbx
    000002f2: 	popq	%rbp
    000002f3: 	popq	%r12
    000002f5: 	popq	%r13
    000002f7: 	popq	%r14
    000002f9: 	popq	%r15
    000002fb: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 763
.Ltmp1384:
    00000300: 	movq	0x18(%rsp), %rax
    00000305: 	leaq	DATAat0x4d004(%rip), %rsi
    0000030c: 	movl	$0x1, %edi
    00000311: 	movl	%r8d, 0x14(%rsp)
    00000316: 	addl	$0x1, %r13d
    0000031a: 	movq	(%rax), %rdx
    0000031d: 	xorl	%eax, %eax
    0000031f: 	callq	__printf_chk@PLT # Offset: 799
    00000324: 	movl	iterations(%rip), %r10d
    0000032b: 	cmpl	%r10d, %r13d
    0000032e: 	jge	.Ltmp1379 # Offset: 814
    00000334: 	movl	(%rbx), %edi
    00000336: 	movl	0x4(%rbx), %esi
    00000339: 	movl	0x14(%rsp), %r8d
    0000033e: 	jmp	.Ltmp1385 # Offset: 830
.Ltmp1381:
    00000343: 	xorl	%r9d, %r9d
    00000346: 	movl	$0x1, %edx
    0000034b: 	jmp	.Ltmp1393 # Offset: 843
.Ltmp1389:
    00000350: 	movq	%rbx, %rdi
    00000353: 	leaq	0x20(%rsp), %rsi
    00000358: 	xorl	%edx, %edx
    0000035a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 858
    0000035f: 	movq	%rax, (%rbx)
    00000362: 	movq	%rax, %rdi
    00000365: 	movq	0x20(%rsp), %rax
    0000036a: 	movq	%rax, 0x10(%rbx)
.Ltmp1396:
    0000036e: 	movq	%r12, %rdx
    00000371: 	movq	%rbp, %rsi
    00000374: 	callq	memcpy@PLT # Offset: 884
    00000379: 	movq	0x20(%rsp), %r12
    0000037e: 	movq	(%rbx), %rdi
    00000381: 	jmp	.Ltmp1394 # Offset: 897
.Ltmp1386:
    00000386: 	movq	0x18(%rsp), %rsi
    0000038b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000392: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 914
    00000397: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000039e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000003a5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003ac: 	jne	.Ltmp1395 # Offset: 940
.Ltmp1391:
    000003b2: 	movq	-0x8(%rdx), %rax
    000003b6: 	addq	$0x200, %rax
    000003bc: 	jmp	.Ltmp1395 # Offset: 956
.Ltmp1390:
    000003c1: 	testq	%r12, %r12
    000003c4: 	je	.Ltmp1394 # Offset: 964
    000003ca: 	jmp	.Ltmp1396 # Offset: 970
.Ltmp1392:
    000003cc: 	callq	__stack_chk_fail@PLT # Offset: 972
.Ltmp1388:
    000003d1: 	leaq	DATAat0x4d018(%rip), %rdi
    000003d8: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 984
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE8Ij14custom_cse_addIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSE8Ii14custom_cse_addIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 122
  State       : disassembled
  Address     : 0x17110
  Size        : 0x42d
  MaxSize     : 0x430
  Offset      : 0x17110
  Section     : .text
  Orc Section : .local.text._Z9test_CSE8Ii14custom_cse_addIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0121:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdi, %rbx
    00000016: 	subq	$0x38, %rsp
    0000001a: 	movq	%rcx, 0x18(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x28(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r10d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r10d, %r10d
    00000045: 	jle	.Ltmp1397 # Offset: 69
    0000004b: 	leal	-0x1(%r14), %r8d
    0000004f: 	leal	-0x2(%r14), %eax
    00000053: 	movl	(%rbx), %edi
    00000055: 	movl	0x4(%rbx), %esi
    00000058: 	movl	%eax, 0xc(%rsp)
    0000005c: 	movl	%r8d, %eax
    0000005f: 	movl	%r8d, %r15d
    00000062: 	xorl	%r13d, %r13d
    00000065: 	shrl	$0x2, %eax
    00000068: 	andl	$-0x4, %r15d
    0000006c: 	subl	$0x1, %eax
    0000006f: 	shlq	$0x4, %rax
    00000073: 	leaq	0x10(%rbx,%rax), %r12
    00000078: 	leal	0x1(%r15), %eax
    0000007c: 	movl	%eax, 0x10(%rsp)
.Ltmp1403:
    00000080: 	leal	(%rdi,%rsi), %edx
    00000083: 	addl	%ebp, %edx
    00000085: 	leal	(%rdi,%rdx,2), %eax
    00000088: 	leal	(%rsi,%rdx,2), %ecx
    0000008b: 	movl	%edi, %edx
    0000008d: 	subl	%esi, %edx
    0000008f: 	addl	%eax, %edx
    00000091: 	subl	%ecx, %edx
    00000093: 	addl	%eax, %edx
    00000095: 	subl	%ecx, %edx
    00000097: 	addl	%eax, %edx
    00000099: 	subl	%ecx, %edx
    0000009b: 	addl	%eax, %edx
    0000009d: 	subl	%ecx, %edx
    0000009f: 	addl	%eax, %edx
    000000a1: 	subl	%ecx, %edx
    000000a3: 	addl	%eax, %edx
    000000a5: 	subl	%ecx, %edx
    000000a7: 	addl	%edx, %eax
    000000a9: 	subl	%ecx, %eax
    000000ab: 	cmpl	$0x1, %r14d
    000000af: 	jle	.Ltmp1398 # Offset: 175
    000000b5: 	cmpl	$0x2, 0xc(%rsp)
    000000ba: 	jbe	.Ltmp1399 # Offset: 186
    000000c0: 	movd	%ebp, %xmm5
    000000c4: 	movq	%rbx, %rdx
    000000c7: 	pxor	%xmm0, %xmm0
    000000cb: 	pshufd	$0x0, %xmm5, %xmm2
.Ltmp1400:
    000000d0: 	movdqu	(%rdx), %xmm6
    000000d4: 	movdqu	0x4(%rdx), %xmm4
    000000d9: 	addq	$0x10, %rdx
    000000dd: 	movdqu	-0xc(%rdx), %xmm1
    000000e2: 	paddd	%xmm6, %xmm4
    000000e6: 	movdqa	%xmm6, %xmm3
    000000ea: 	paddd	%xmm2, %xmm4
    000000ee: 	paddd	%xmm4, %xmm3
    000000f2: 	paddd	%xmm4, %xmm1
    000000f6: 	paddd	%xmm4, %xmm3
    000000fa: 	paddd	%xmm4, %xmm1
    000000fe: 	paddd	%xmm3, %xmm0
    00000102: 	psubd	%xmm1, %xmm0
    00000106: 	paddd	%xmm3, %xmm0
    0000010a: 	psubd	%xmm1, %xmm0
    0000010e: 	paddd	%xmm3, %xmm0
    00000112: 	psubd	%xmm1, %xmm0
    00000116: 	paddd	%xmm3, %xmm0
    0000011a: 	psubd	%xmm1, %xmm0
    0000011e: 	paddd	%xmm3, %xmm0
    00000122: 	psubd	%xmm1, %xmm0
    00000126: 	paddd	%xmm3, %xmm0
    0000012a: 	psubd	%xmm1, %xmm0
    0000012e: 	paddd	%xmm3, %xmm0
    00000132: 	psubd	%xmm1, %xmm0
    00000136: 	paddd	%xmm3, %xmm0
    0000013a: 	psubd	%xmm1, %xmm0
    0000013e: 	cmpq	%rdx, %r12
    00000141: 	jne	.Ltmp1400 # Offset: 321
    00000143: 	movdqa	%xmm0, %xmm1
    00000147: 	psrldq	$0x8, %xmm1
    0000014c: 	paddd	%xmm1, %xmm0
    00000150: 	movdqa	%xmm0, %xmm1
    00000154: 	psrldq	$0x4, %xmm1
    00000159: 	paddd	%xmm1, %xmm0
    0000015d: 	movd	%xmm0, %edx
    00000161: 	addl	%edx, %eax
    00000163: 	cmpl	%r8d, %r15d
    00000166: 	je	.Ltmp1398 # Offset: 358
    0000016c: 	movl	0x10(%rsp), %edx
    00000170: 	movl	%r15d, %r9d
.Ltmp1411:
    00000173: 	movl	%r14d, %r11d
    00000176: 	subl	%r9d, %r11d
    00000179: 	leal	-0x1(%r11), %ecx
    0000017d: 	cmpl	$0x2, %r11d
    00000181: 	je	.Ltmp1401 # Offset: 385
    00000187: 	movq	0x4(%rbx,%r9,4), %xmm5
    0000018e: 	movq	(%rbx,%r9,4), %xmm1
    00000194: 	movd	%ebp, %xmm7
    00000198: 	pshufd	$0xe0, %xmm7, %xmm0
    0000019d: 	movdqa	%xmm5, %xmm4
    000001a1: 	paddd	%xmm1, %xmm4
    000001a5: 	paddd	%xmm0, %xmm4
    000001a9: 	movdqa	%xmm4, %xmm3
    000001ad: 	movdqa	%xmm4, %xmm2
    000001b1: 	paddd	%xmm1, %xmm3
    000001b5: 	psubd	%xmm5, %xmm1
    000001b9: 	paddd	%xmm5, %xmm2
    000001bd: 	paddd	%xmm4, %xmm3
    000001c1: 	movdqa	%xmm1, %xmm0
    000001c5: 	paddd	%xmm4, %xmm2
    000001c9: 	paddd	%xmm3, %xmm0
    000001cd: 	psubd	%xmm2, %xmm0
    000001d1: 	paddd	%xmm3, %xmm0
    000001d5: 	psubd	%xmm2, %xmm0
    000001d9: 	paddd	%xmm3, %xmm0
    000001dd: 	psubd	%xmm2, %xmm0
    000001e1: 	paddd	%xmm3, %xmm0
    000001e5: 	psubd	%xmm2, %xmm0
    000001e9: 	paddd	%xmm3, %xmm0
    000001ed: 	psubd	%xmm2, %xmm0
    000001f1: 	paddd	%xmm3, %xmm0
    000001f5: 	psubd	%xmm2, %xmm0
    000001f9: 	paddd	%xmm3, %xmm0
    000001fd: 	psubd	%xmm2, %xmm0
    00000201: 	movd	%xmm0, %r9d
    00000206: 	pshufd	$0xe5, %xmm0, %xmm7
    0000020b: 	movd	%xmm7, %r11d
    00000210: 	addl	%r11d, %r9d
    00000213: 	addl	%r9d, %eax
    00000216: 	movl	%ecx, %r9d
    00000219: 	andl	$-0x2, %r9d
    0000021d: 	addl	%r9d, %edx
    00000220: 	cmpl	%ecx, %r9d
    00000223: 	je	.Ltmp1398 # Offset: 547
.Ltmp1401:
    00000225: 	movslq	%edx, %rdx
    00000228: 	movl	-0x4(%rbx,%rdx,4), %ecx
    0000022c: 	movl	(%rbx,%rdx,4), %r9d
    00000230: 	leal	(%r9,%rcx), %edx
    00000234: 	addl	%ebp, %edx
    00000236: 	leal	(%rcx,%rdx,2), %ecx
    00000239: 	leal	(%r9,%rdx,2), %edx
    0000023d: 	leal	(%rax,%rcx,2), %eax
    00000240: 	subl	%edx, %eax
    00000242: 	subl	%edx, %eax
    00000244: 	leal	(%rax,%rcx,2), %eax
    00000247: 	subl	%edx, %eax
    00000249: 	subl	%edx, %eax
    0000024b: 	leal	(%rax,%rcx,2), %eax
    0000024e: 	subl	%edx, %eax
    00000250: 	subl	%edx, %eax
    00000252: 	leal	(%rax,%rcx,2), %eax
    00000255: 	subl	%edx, %eax
    00000257: 	subl	%edx, %eax
.Ltmp1398:
    00000259: 	testl	%eax, %eax
    0000025b: 	jne	.Ltmp1402 # Offset: 603
    00000261: 	addl	$0x1, %r13d
    00000265: 	cmpl	%r10d, %r13d
    00000268: 	jl	.Ltmp1403 # Offset: 616
.Ltmp1397:
    0000026e: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000275: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000027c: 	subq	$0x20, %rax
    00000280: 	cmpq	%rax, %rbx
    00000283: 	je	.Ltmp1404 # Offset: 643
    00000289: 	movq	0x18(%rsp), %rax
    0000028e: 	leaq	0x10(%rbx), %rdi
    00000292: 	movq	%rdi, (%rbx)
    00000295: 	movq	(%rax), %rbp
    00000298: 	movq	0x8(%rax), %r12
    0000029c: 	movq	%rbp, %rax
    0000029f: 	addq	%r12, %rax
    000002a2: 	je	.Ltmp1405 # Offset: 674
    000002a4: 	testq	%rbp, %rbp
    000002a7: 	je	.Ltmp1406 # Offset: 679
.Ltmp1405:
    000002ad: 	movq	%r12, 0x20(%rsp)
    000002b2: 	cmpq	$0xf, %r12
    000002b6: 	ja	.Ltmp1407 # Offset: 694
    000002bc: 	cmpq	$0x1, %r12
    000002c0: 	jne	.Ltmp1408 # Offset: 704
    000002c6: 	movzbl	(%rbp), %eax
    000002ca: 	movb	%al, 0x10(%rbx)
.Ltmp1412:
    000002cd: 	movq	%r12, 0x8(%rbx)
    000002d1: 	movb	$0x0, (%rdi,%r12)
    000002d6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002dd: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002e4: 	addq	$0x20, %rax
    000002e8: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002ef: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000002f6: 	je	.Ltmp1409 # Offset: 758
.Ltmp1413:
    000002fc: 	movq	-0x20(%rax), %rbp
    00000300: 	callq	clock@PLT # Offset: 768
    00000305: 	movq	%rax, end_time(%rip)
    0000030c: 	movq	0x28(%rsp), %rdx
    00000311: 	subq	%fs:0x28, %rdx
    0000031a: 	jne	.Ltmp1410 # Offset: 794
    00000320: 	subq	start_time(%rip), %rax
    00000327: 	pxor	%xmm0, %xmm0
    0000032b: 	movq	%rbp, %rdi
    0000032e: 	cvtsi2sd	%rax, %xmm0
    00000333: 	divsd	DATAat0x4d640(%rip), %xmm0
    0000033b: 	addq	$0x38, %rsp
    0000033f: 	popq	%rbx
    00000340: 	popq	%rbp
    00000341: 	popq	%r12
    00000343: 	popq	%r13
    00000345: 	popq	%r14
    00000347: 	popq	%r15
    00000349: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 841
    0000034e: 	nop # Size: 2
.Ltmp1402:
    00000350: 	movq	0x18(%rsp), %rax
    00000355: 	leaq	DATAat0x4d004(%rip), %rsi
    0000035c: 	movl	$0x1, %edi
    00000361: 	movl	%r8d, 0x14(%rsp)
    00000366: 	addl	$0x1, %r13d
    0000036a: 	movq	(%rax), %rdx
    0000036d: 	xorl	%eax, %eax
    0000036f: 	callq	__printf_chk@PLT # Offset: 879
    00000374: 	movl	iterations(%rip), %r10d
    0000037b: 	cmpl	%r10d, %r13d
    0000037e: 	jge	.Ltmp1397 # Offset: 894
    00000384: 	movl	(%rbx), %edi
    00000386: 	movl	0x4(%rbx), %esi
    00000389: 	movl	0x14(%rsp), %r8d
    0000038e: 	jmp	.Ltmp1403 # Offset: 910
.Ltmp1399:
    00000393: 	xorl	%r9d, %r9d
    00000396: 	movl	$0x1, %edx
    0000039b: 	jmp	.Ltmp1411 # Offset: 923
.Ltmp1407:
    000003a0: 	movq	%rbx, %rdi
    000003a3: 	leaq	0x20(%rsp), %rsi
    000003a8: 	xorl	%edx, %edx
    000003aa: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 938
    000003af: 	movq	%rax, (%rbx)
    000003b2: 	movq	%rax, %rdi
    000003b5: 	movq	0x20(%rsp), %rax
    000003ba: 	movq	%rax, 0x10(%rbx)
.Ltmp1414:
    000003be: 	movq	%r12, %rdx
    000003c1: 	movq	%rbp, %rsi
    000003c4: 	callq	memcpy@PLT # Offset: 964
    000003c9: 	movq	0x20(%rsp), %r12
    000003ce: 	movq	(%rbx), %rdi
    000003d1: 	jmp	.Ltmp1412 # Offset: 977
.Ltmp1404:
    000003d6: 	movq	0x18(%rsp), %rsi
    000003db: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000003e2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 994
    000003e7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000003ee: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000003f5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003fc: 	jne	.Ltmp1413 # Offset: 1020
.Ltmp1409:
    00000402: 	movq	-0x8(%rdx), %rax
    00000406: 	addq	$0x200, %rax
    0000040c: 	jmp	.Ltmp1413 # Offset: 1036
.Ltmp1408:
    00000411: 	testq	%r12, %r12
    00000414: 	je	.Ltmp1412 # Offset: 1044
    0000041a: 	jmp	.Ltmp1414 # Offset: 1050
.Ltmp1410:
    0000041c: 	callq	__stack_chk_fail@PLT # Offset: 1052
.Ltmp1406:
    00000421: 	leaq	DATAat0x4d018(%rip), %rdi
    00000428: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1064
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE8Ii14custom_cse_addIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSE8Ij14custom_cse_divIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 123
  State       : disassembled
  Address     : 0x17540
  Size        : 0x27f
  MaxSize     : 0x280
  Offset      : 0x17540
  Section     : .text
  Orc Section : .local.text._Z9test_CSE8Ij14custom_cse_divIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0122:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rcx, %rbp
    00000016: 	pushq	%rbx
    00000017: 	movl	%edx, %ebx
    00000019: 	subq	$0x18, %rsp
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x8(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	callq	clock@PLT # Offset: 45
    00000032: 	movl	iterations(%rip), %r11d
    00000039: 	movq	%rax, start_time(%rip)
    00000040: 	testl	%r11d, %r11d
    00000043: 	jle	.Ltmp1415 # Offset: 67
    00000049: 	leal	-0x2(%r14), %eax
    0000004d: 	xorl	%r15d, %r15d
    00000050: 	leaq	0x8(%r13,%rax,4), %r12
.Ltmp1427:
    00000055: 	movl	(%r13), %r9d
    00000059: 	movl	0x4(%r13), %r10d
.Ltmp1419:
    0000005d: 	movl	%r9d, %eax
    00000060: 	xorl	%edx, %edx
    00000062: 	movl	%r9d, %ecx
    00000065: 	divl	%r10d
    00000068: 	addl	%ebx, %eax
    0000006a: 	addl	%eax, %eax
    0000006c: 	leal	(%r10,%rax), %edx
    00000070: 	addl	%r9d, %eax
    00000073: 	leal	(,%rax,8), %esi
    0000007a: 	subl	%eax, %esi
    0000007c: 	movl	%r9d, %eax
    0000007f: 	subl	%r10d, %eax
    00000082: 	addl	%eax, %esi
    00000084: 	subl	%edx, %esi
    00000086: 	subl	%edx, %esi
    00000088: 	subl	%edx, %esi
    0000008a: 	subl	%edx, %esi
    0000008c: 	subl	%edx, %esi
    0000008e: 	subl	%edx, %esi
    00000090: 	subl	%edx, %esi
    00000092: 	cmpl	$0x1, %r14d
    00000096: 	jle	.Ltmp1416 # Offset: 150
    00000098: 	leaq	0x4(%r13), %rdi
    0000009c: 	nopl	(%rax) # Size: 4
.Ltmp1417:
    000000a0: 	movl	%ecx, %r8d
    000000a3: 	movl	(%rdi), %ecx
    000000a5: 	xorl	%edx, %edx
    000000a7: 	addq	$0x4, %rdi
    000000ab: 	movl	%r8d, %eax
    000000ae: 	divl	%ecx
    000000b0: 	addl	%ebx, %eax
    000000b2: 	addl	%eax, %eax
    000000b4: 	leal	(%rcx,%rax), %edx
    000000b7: 	addl	%r8d, %eax
    000000ba: 	shll	$0x3, %eax
    000000bd: 	subl	%edx, %eax
    000000bf: 	subl	%edx, %eax
    000000c1: 	subl	%edx, %eax
    000000c3: 	subl	%edx, %eax
    000000c5: 	subl	%edx, %eax
    000000c7: 	subl	%edx, %eax
    000000c9: 	addl	%edx, %edx
    000000cb: 	subl	%edx, %eax
    000000cd: 	addl	%eax, %esi
    000000cf: 	cmpq	%rdi, %r12
    000000d2: 	jne	.Ltmp1417 # Offset: 210
.Ltmp1416:
    000000d4: 	testl	%esi, %esi
    000000d6: 	jne	.Ltmp1418 # Offset: 214
    000000dc: 	addl	$0x1, %r15d
    000000e0: 	cmpl	%r11d, %r15d
    000000e3: 	jl	.Ltmp1419 # Offset: 227
.Ltmp1415:
    000000e9: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000f0: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000f7: 	subq	$0x20, %rax
    000000fb: 	cmpq	%rax, %rbx
    000000fe: 	je	.Ltmp1420 # Offset: 254
    00000104: 	leaq	0x10(%rbx), %rdi
    00000108: 	movq	0x8(%rbp), %r12
    0000010c: 	movq	%rdi, (%rbx)
    0000010f: 	movq	(%rbp), %r13
    00000113: 	movq	%r13, %rax
    00000116: 	addq	%r12, %rax
    00000119: 	je	.Ltmp1421 # Offset: 281
    0000011b: 	testq	%r13, %r13
    0000011e: 	je	.Ltmp1422 # Offset: 286
.Ltmp1421:
    00000124: 	movq	%r12, (%rsp)
    00000128: 	cmpq	$0xf, %r12
    0000012c: 	ja	.Ltmp1423 # Offset: 300
    00000132: 	cmpq	$0x1, %r12
    00000136: 	jne	.Ltmp1424 # Offset: 310
    0000013c: 	movzbl	(%r13), %eax
    00000141: 	movb	%al, 0x10(%rbx)
.Ltmp1428:
    00000144: 	movq	%r12, 0x8(%rbx)
    00000148: 	movb	$0x0, (%rdi,%r12)
    0000014d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000154: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000015b: 	addq	$0x20, %rax
    0000015f: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000166: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000016d: 	je	.Ltmp1425 # Offset: 365
.Ltmp1429:
    00000173: 	movq	-0x20(%rax), %rbp
    00000177: 	callq	clock@PLT # Offset: 375
    0000017c: 	movq	%rax, end_time(%rip)
    00000183: 	movq	0x8(%rsp), %rdx
    00000188: 	subq	%fs:0x28, %rdx
    00000191: 	jne	.Ltmp1426 # Offset: 401
    00000197: 	subq	start_time(%rip), %rax
    0000019e: 	pxor	%xmm0, %xmm0
    000001a2: 	movq	%rbp, %rdi
    000001a5: 	cvtsi2sd	%rax, %xmm0
    000001aa: 	divsd	DATAat0x4d640(%rip), %xmm0
    000001b2: 	addq	$0x18, %rsp
    000001b6: 	popq	%rbx
    000001b7: 	popq	%rbp
    000001b8: 	popq	%r12
    000001ba: 	popq	%r13
    000001bc: 	popq	%r14
    000001be: 	popq	%r15
    000001c0: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 448
    000001c5: 	nopl	(%rax) # Size: 3
.Ltmp1418:
    000001c8: 	movq	(%rbp), %rdx
    000001cc: 	movl	$0x1, %edi
    000001d1: 	xorl	%eax, %eax
    000001d3: 	addl	$0x1, %r15d
    000001d7: 	leaq	DATAat0x4d004(%rip), %rsi
    000001de: 	callq	__printf_chk@PLT # Offset: 478
    000001e3: 	movl	iterations(%rip), %r11d
    000001ea: 	cmpl	%r11d, %r15d
    000001ed: 	jl	.Ltmp1427 # Offset: 493
    000001f3: 	jmp	.Ltmp1415 # Offset: 499
.Ltmp1423:
    000001f8: 	movq	%rbx, %rdi
    000001fb: 	movq	%rsp, %rsi
    000001fe: 	xorl	%edx, %edx
    00000200: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 512
    00000205: 	movq	%rax, (%rbx)
    00000208: 	movq	%rax, %rdi
    0000020b: 	movq	(%rsp), %rax
    0000020f: 	movq	%rax, 0x10(%rbx)
.Ltmp1430:
    00000213: 	movq	%r12, %rdx
    00000216: 	movq	%r13, %rsi
    00000219: 	callq	memcpy@PLT # Offset: 537
    0000021e: 	movq	(%rsp), %r12
    00000222: 	movq	(%rbx), %rdi
    00000225: 	jmp	.Ltmp1428 # Offset: 549
.Ltmp1420:
    0000022a: 	movq	%rbp, %rsi
    0000022d: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000234: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 564
    00000239: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000240: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000247: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000024e: 	jne	.Ltmp1429 # Offset: 590
.Ltmp1425:
    00000254: 	movq	-0x8(%rdx), %rax
    00000258: 	addq	$0x200, %rax
    0000025e: 	jmp	.Ltmp1429 # Offset: 606
.Ltmp1424:
    00000263: 	testq	%r12, %r12
    00000266: 	je	.Ltmp1428 # Offset: 614
    0000026c: 	jmp	.Ltmp1430 # Offset: 620
.Ltmp1426:
    0000026e: 	callq	__stack_chk_fail@PLT # Offset: 622
.Ltmp1422:
    00000273: 	leaq	DATAat0x4d018(%rip), %rdi
    0000027a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 634
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE8Ij14custom_cse_divIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSE8Ii14custom_cse_mulIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 124
  State       : disassembled
  Address     : 0x177c0
  Size        : 0x41b
  MaxSize     : 0x420
  Offset      : 0x177c0
  Section     : .text
  Orc Section : .local.text._Z9test_CSE8Ii14custom_cse_mulIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0123:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%esi, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	movl	%edx, %ebp
    00000015: 	pushq	%rbx
    00000016: 	subq	$0x38, %rsp
    0000001a: 	movq	%rcx, 0x18(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x28(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r11d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r11d, %r11d
    00000045: 	jle	.Ltmp1431 # Offset: 69
    0000004b: 	leal	-0x1(%r13), %r15d
    0000004f: 	leal	-0x2(%r13), %eax
    00000053: 	xorl	%r14d, %r14d
    00000056: 	movl	%eax, 0xc(%rsp)
    0000005a: 	movl	%r15d, %eax
    0000005d: 	shrl	$0x2, %eax
    00000060: 	subl	$0x1, %eax
    00000063: 	shlq	$0x4, %rax
    00000067: 	leaq	0x10(%r12,%rax), %rbx
    0000006c: 	movl	%r15d, %eax
    0000006f: 	andl	$-0x4, %eax
    00000072: 	movl	%eax, 0x10(%rsp)
    00000076: 	addl	$0x1, %eax
    00000079: 	movl	%eax, 0x14(%rsp)
.Ltmp1444:
    0000007d: 	movl	(%r12), %r9d
    00000081: 	movl	0x4(%r12), %r8d
.Ltmp1436:
    00000086: 	movl	%r9d, %edx
    00000089: 	imull	%r8d, %edx
    0000008d: 	addl	%ebp, %edx
    0000008f: 	leal	(%r9,%rdx,2), %eax
    00000093: 	leal	(%r8,%rdx,2), %ecx
    00000097: 	movl	%r9d, %edx
    0000009a: 	subl	%r8d, %edx
    0000009d: 	addl	%eax, %edx
    0000009f: 	subl	%ecx, %edx
    000000a1: 	addl	%eax, %edx
    000000a3: 	subl	%ecx, %edx
    000000a5: 	addl	%eax, %edx
    000000a7: 	subl	%ecx, %edx
    000000a9: 	addl	%eax, %edx
    000000ab: 	subl	%ecx, %edx
    000000ad: 	addl	%eax, %edx
    000000af: 	subl	%ecx, %edx
    000000b1: 	addl	%eax, %edx
    000000b3: 	subl	%ecx, %edx
    000000b5: 	addl	%edx, %eax
    000000b7: 	subl	%ecx, %eax
    000000b9: 	cmpl	$0x1, %r13d
    000000bd: 	jle	.Ltmp1432 # Offset: 189
    000000c3: 	cmpl	$0x2, 0xc(%rsp)
    000000c8: 	jbe	.Ltmp1433 # Offset: 200
    000000ce: 	movd	%ebp, %xmm7
    000000d2: 	movq	%r12, %rdx
    000000d5: 	pxor	%xmm0, %xmm0
    000000d9: 	pshufd	$0x0, %xmm7, %xmm2
    000000de: 	nop # Size: 2
.Ltmp1434:
    000000e0: 	movdqu	(%rdx), %xmm3
    000000e4: 	movdqu	0x4(%rdx), %xmm1
    000000e9: 	addq	$0x10, %rdx
    000000ed: 	movdqa	%xmm1, %xmm5
    000000f1: 	movdqa	%xmm3, %xmm6
    000000f5: 	movdqa	%xmm1, %xmm4
    000000f9: 	psrlq	$0x20, %xmm5
    000000fe: 	psrlq	$0x20, %xmm6
    00000103: 	pmuludq	%xmm3, %xmm4
    00000107: 	pmuludq	%xmm6, %xmm5
    0000010b: 	pshufd	$0x8, %xmm4, %xmm4
    00000110: 	pshufd	$0x8, %xmm5, %xmm5
    00000115: 	punpckldq	%xmm5, %xmm4
    00000119: 	paddd	%xmm2, %xmm4
    0000011d: 	paddd	%xmm4, %xmm3
    00000121: 	paddd	%xmm4, %xmm1
    00000125: 	paddd	%xmm4, %xmm3
    00000129: 	paddd	%xmm4, %xmm1
    0000012d: 	paddd	%xmm3, %xmm0
    00000131: 	psubd	%xmm1, %xmm0
    00000135: 	paddd	%xmm3, %xmm0
    00000139: 	psubd	%xmm1, %xmm0
    0000013d: 	paddd	%xmm3, %xmm0
    00000141: 	psubd	%xmm1, %xmm0
    00000145: 	paddd	%xmm3, %xmm0
    00000149: 	psubd	%xmm1, %xmm0
    0000014d: 	paddd	%xmm3, %xmm0
    00000151: 	psubd	%xmm1, %xmm0
    00000155: 	paddd	%xmm3, %xmm0
    00000159: 	psubd	%xmm1, %xmm0
    0000015d: 	paddd	%xmm3, %xmm0
    00000161: 	psubd	%xmm1, %xmm0
    00000165: 	paddd	%xmm3, %xmm0
    00000169: 	psubd	%xmm1, %xmm0
    0000016d: 	cmpq	%rbx, %rdx
    00000170: 	jne	.Ltmp1434 # Offset: 368
    00000176: 	movdqa	%xmm0, %xmm1
    0000017a: 	psrldq	$0x8, %xmm1
    0000017f: 	paddd	%xmm1, %xmm0
    00000183: 	movdqa	%xmm0, %xmm1
    00000187: 	psrldq	$0x4, %xmm1
    0000018c: 	paddd	%xmm1, %xmm0
    00000190: 	movd	%xmm0, %edx
    00000194: 	addl	%edx, %eax
    00000196: 	cmpl	%r15d, 0x10(%rsp)
    0000019b: 	je	.Ltmp1432 # Offset: 411
    000001a1: 	movl	0x14(%rsp), %edi
.Ltmp1445:
    000001a5: 	movslq	%edi, %rsi
    000001a8: 	shlq	$0x2, %rsi
    000001ac: 	leaq	(%r12,%rsi), %rcx
    000001b0: 	movl	-0x4(%rcx), %edx
    000001b3: 	movl	(%rcx), %r10d
    000001b6: 	movl	%edx, %ecx
    000001b8: 	imull	%r10d, %ecx
    000001bc: 	addl	%ebp, %ecx
    000001be: 	leal	(%rdx,%rcx,2), %edx
    000001c1: 	leal	(%r10,%rcx,2), %ecx
    000001c5: 	addl	%edx, %eax
    000001c7: 	subl	%ecx, %eax
    000001c9: 	addl	%edx, %eax
    000001cb: 	subl	%ecx, %eax
    000001cd: 	addl	%edx, %eax
    000001cf: 	subl	%ecx, %eax
    000001d1: 	addl	%edx, %eax
    000001d3: 	subl	%ecx, %eax
    000001d5: 	addl	%edx, %eax
    000001d7: 	subl	%ecx, %eax
    000001d9: 	addl	%edx, %eax
    000001db: 	subl	%ecx, %eax
    000001dd: 	addl	%edx, %eax
    000001df: 	subl	%ecx, %eax
    000001e1: 	addl	%eax, %edx
    000001e3: 	movl	%edx, %eax
    000001e5: 	leal	0x1(%rdi), %edx
    000001e8: 	subl	%ecx, %eax
    000001ea: 	cmpl	%edx, %r13d
    000001ed: 	jle	.Ltmp1432 # Offset: 493
    000001ef: 	movl	0x4(%r12,%rsi), %ecx
    000001f4: 	movl	%r10d, %edx
    000001f7: 	addl	$0x2, %edi
    000001fa: 	imull	%ecx, %edx
    000001fd: 	addl	%ebp, %edx
    000001ff: 	leal	(%r10,%rdx,2), %r10d
    00000203: 	leal	(%rcx,%rdx,2), %edx
    00000206: 	leal	(%rax,%r10,2), %eax
    0000020a: 	subl	%edx, %eax
    0000020c: 	subl	%edx, %eax
    0000020e: 	leal	(%rax,%r10,2), %eax
    00000212: 	subl	%edx, %eax
    00000214: 	subl	%edx, %eax
    00000216: 	leal	(%rax,%r10,2), %eax
    0000021a: 	subl	%edx, %eax
    0000021c: 	subl	%edx, %eax
    0000021e: 	leal	(%rax,%r10,2), %eax
    00000222: 	subl	%edx, %eax
    00000224: 	subl	%edx, %eax
    00000226: 	cmpl	%edi, %r13d
    00000229: 	jle	.Ltmp1432 # Offset: 553
    0000022b: 	movl	0x8(%r12,%rsi), %esi
    00000230: 	movl	%ecx, %edx
    00000232: 	imull	%esi, %edx
    00000235: 	addl	%ebp, %edx
    00000237: 	leal	(%rcx,%rdx,2), %ecx
    0000023a: 	leal	(%rsi,%rdx,2), %edx
    0000023d: 	leal	(%rax,%rcx,2), %eax
    00000240: 	subl	%edx, %eax
    00000242: 	subl	%edx, %eax
    00000244: 	leal	(%rax,%rcx,2), %eax
    00000247: 	subl	%edx, %eax
    00000249: 	subl	%edx, %eax
    0000024b: 	leal	(%rax,%rcx,2), %eax
    0000024e: 	subl	%edx, %eax
    00000250: 	subl	%edx, %eax
    00000252: 	leal	(%rax,%rcx,2), %eax
    00000255: 	subl	%edx, %eax
    00000257: 	subl	%edx, %eax
.Ltmp1432:
    00000259: 	testl	%eax, %eax
    0000025b: 	jne	.Ltmp1435 # Offset: 603
    00000261: 	addl	$0x1, %r14d
    00000265: 	cmpl	%r11d, %r14d
    00000268: 	jl	.Ltmp1436 # Offset: 616
.Ltmp1431:
    0000026e: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000275: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000027c: 	subq	$0x20, %rax
    00000280: 	cmpq	%rax, %rbx
    00000283: 	je	.Ltmp1437 # Offset: 643
    00000289: 	movq	0x18(%rsp), %rax
    0000028e: 	leaq	0x10(%rbx), %rdi
    00000292: 	movq	%rdi, (%rbx)
    00000295: 	movq	(%rax), %rbp
    00000298: 	movq	0x8(%rax), %r12
    0000029c: 	movq	%rbp, %rax
    0000029f: 	addq	%r12, %rax
    000002a2: 	je	.Ltmp1438 # Offset: 674
    000002a4: 	testq	%rbp, %rbp
    000002a7: 	je	.Ltmp1439 # Offset: 679
.Ltmp1438:
    000002ad: 	movq	%r12, 0x20(%rsp)
    000002b2: 	cmpq	$0xf, %r12
    000002b6: 	ja	.Ltmp1440 # Offset: 694
    000002bc: 	cmpq	$0x1, %r12
    000002c0: 	jne	.Ltmp1441 # Offset: 704
    000002c6: 	movzbl	(%rbp), %eax
    000002ca: 	movb	%al, 0x10(%rbx)
.Ltmp1446:
    000002cd: 	movq	%r12, 0x8(%rbx)
    000002d1: 	movb	$0x0, (%rdi,%r12)
    000002d6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002dd: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002e4: 	addq	$0x20, %rax
    000002e8: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002ef: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000002f6: 	je	.Ltmp1442 # Offset: 758
.Ltmp1447:
    000002fc: 	movq	-0x20(%rax), %rbp
    00000300: 	callq	clock@PLT # Offset: 768
    00000305: 	movq	%rax, end_time(%rip)
    0000030c: 	movq	0x28(%rsp), %rdx
    00000311: 	subq	%fs:0x28, %rdx
    0000031a: 	jne	.Ltmp1443 # Offset: 794
    00000320: 	subq	start_time(%rip), %rax
    00000327: 	pxor	%xmm0, %xmm0
    0000032b: 	movq	%rbp, %rdi
    0000032e: 	cvtsi2sd	%rax, %xmm0
    00000333: 	divsd	DATAat0x4d640(%rip), %xmm0
    0000033b: 	addq	$0x38, %rsp
    0000033f: 	popq	%rbx
    00000340: 	popq	%rbp
    00000341: 	popq	%r12
    00000343: 	popq	%r13
    00000345: 	popq	%r14
    00000347: 	popq	%r15
    00000349: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 841
    0000034e: 	nop # Size: 2
.Ltmp1435:
    00000350: 	movq	0x18(%rsp), %rax
    00000355: 	leaq	DATAat0x4d004(%rip), %rsi
    0000035c: 	movl	$0x1, %edi
    00000361: 	addl	$0x1, %r14d
    00000365: 	movq	(%rax), %rdx
    00000368: 	xorl	%eax, %eax
    0000036a: 	callq	__printf_chk@PLT # Offset: 874
    0000036f: 	movl	iterations(%rip), %r11d
    00000376: 	cmpl	%r11d, %r14d
    00000379: 	jl	.Ltmp1444 # Offset: 889
    0000037f: 	jmp	.Ltmp1431 # Offset: 895
.Ltmp1433:
    00000384: 	movl	$0x1, %edi
    00000389: 	jmp	.Ltmp1445 # Offset: 905
.Ltmp1440:
    0000038e: 	movq	%rbx, %rdi
    00000391: 	leaq	0x20(%rsp), %rsi
    00000396: 	xorl	%edx, %edx
    00000398: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 920
    0000039d: 	movq	%rax, (%rbx)
    000003a0: 	movq	%rax, %rdi
    000003a3: 	movq	0x20(%rsp), %rax
    000003a8: 	movq	%rax, 0x10(%rbx)
.Ltmp1448:
    000003ac: 	movq	%r12, %rdx
    000003af: 	movq	%rbp, %rsi
    000003b2: 	callq	memcpy@PLT # Offset: 946
    000003b7: 	movq	0x20(%rsp), %r12
    000003bc: 	movq	(%rbx), %rdi
    000003bf: 	jmp	.Ltmp1446 # Offset: 959
.Ltmp1437:
    000003c4: 	movq	0x18(%rsp), %rsi
    000003c9: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000003d0: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 976
    000003d5: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000003dc: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000003e3: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003ea: 	jne	.Ltmp1447 # Offset: 1002
.Ltmp1442:
    000003f0: 	movq	-0x8(%rdx), %rax
    000003f4: 	addq	$0x200, %rax
    000003fa: 	jmp	.Ltmp1447 # Offset: 1018
.Ltmp1441:
    000003ff: 	testq	%r12, %r12
    00000402: 	je	.Ltmp1446 # Offset: 1026
    00000408: 	jmp	.Ltmp1448 # Offset: 1032
.Ltmp1443:
    0000040a: 	callq	__stack_chk_fail@PLT # Offset: 1034
.Ltmp1439:
    0000040f: 	leaq	DATAat0x4d018(%rip), %rdi
    00000416: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1046
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE8Ii14custom_cse_mulIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z28test_CSE8_add_inline_flippedIi14custom_cse_addIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 125
  State       : disassembled
  Address     : 0x17be0
  Size        : 0x42d
  MaxSize     : 0x430
  Offset      : 0x17be0
  Section     : .text
  Orc Section : .local.text._Z28test_CSE8_add_inline_flippedIi14custom_cse_addIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0124:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdi, %rbx
    00000016: 	subq	$0x38, %rsp
    0000001a: 	movq	%rcx, 0x18(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x28(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r10d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r10d, %r10d
    00000045: 	jle	.Ltmp1449 # Offset: 69
    0000004b: 	leal	-0x1(%r14), %r8d
    0000004f: 	leal	-0x2(%r14), %eax
    00000053: 	movl	(%rbx), %edi
    00000055: 	movl	0x4(%rbx), %esi
    00000058: 	movl	%eax, 0xc(%rsp)
    0000005c: 	movl	%r8d, %eax
    0000005f: 	movl	%r8d, %r15d
    00000062: 	xorl	%r13d, %r13d
    00000065: 	shrl	$0x2, %eax
    00000068: 	andl	$-0x4, %r15d
    0000006c: 	subl	$0x1, %eax
    0000006f: 	shlq	$0x4, %rax
    00000073: 	leaq	0x10(%rbx,%rax), %r12
    00000078: 	leal	0x1(%r15), %eax
    0000007c: 	movl	%eax, 0x10(%rsp)
.Ltmp1455:
    00000080: 	leal	(%rdi,%rsi), %edx
    00000083: 	addl	%ebp, %edx
    00000085: 	leal	(%rdi,%rdx,2), %eax
    00000088: 	leal	(%rsi,%rdx,2), %ecx
    0000008b: 	movl	%edi, %edx
    0000008d: 	subl	%esi, %edx
    0000008f: 	addl	%eax, %edx
    00000091: 	subl	%ecx, %edx
    00000093: 	addl	%eax, %edx
    00000095: 	subl	%ecx, %edx
    00000097: 	addl	%eax, %edx
    00000099: 	subl	%ecx, %edx
    0000009b: 	addl	%eax, %edx
    0000009d: 	subl	%ecx, %edx
    0000009f: 	addl	%eax, %edx
    000000a1: 	subl	%ecx, %edx
    000000a3: 	addl	%eax, %edx
    000000a5: 	subl	%ecx, %edx
    000000a7: 	addl	%edx, %eax
    000000a9: 	subl	%ecx, %eax
    000000ab: 	cmpl	$0x1, %r14d
    000000af: 	jle	.Ltmp1450 # Offset: 175
    000000b5: 	cmpl	$0x2, 0xc(%rsp)
    000000ba: 	jbe	.Ltmp1451 # Offset: 186
    000000c0: 	movd	%ebp, %xmm5
    000000c4: 	movq	%rbx, %rdx
    000000c7: 	pxor	%xmm0, %xmm0
    000000cb: 	pshufd	$0x0, %xmm5, %xmm2
.Ltmp1452:
    000000d0: 	movdqu	(%rdx), %xmm6
    000000d4: 	movdqu	0x4(%rdx), %xmm4
    000000d9: 	addq	$0x10, %rdx
    000000dd: 	movdqu	-0xc(%rdx), %xmm1
    000000e2: 	paddd	%xmm6, %xmm4
    000000e6: 	movdqa	%xmm6, %xmm3
    000000ea: 	paddd	%xmm2, %xmm4
    000000ee: 	paddd	%xmm4, %xmm3
    000000f2: 	paddd	%xmm4, %xmm1
    000000f6: 	paddd	%xmm4, %xmm3
    000000fa: 	paddd	%xmm4, %xmm1
    000000fe: 	paddd	%xmm3, %xmm0
    00000102: 	psubd	%xmm1, %xmm0
    00000106: 	paddd	%xmm3, %xmm0
    0000010a: 	psubd	%xmm1, %xmm0
    0000010e: 	paddd	%xmm3, %xmm0
    00000112: 	psubd	%xmm1, %xmm0
    00000116: 	paddd	%xmm3, %xmm0
    0000011a: 	psubd	%xmm1, %xmm0
    0000011e: 	paddd	%xmm3, %xmm0
    00000122: 	psubd	%xmm1, %xmm0
    00000126: 	paddd	%xmm3, %xmm0
    0000012a: 	psubd	%xmm1, %xmm0
    0000012e: 	paddd	%xmm3, %xmm0
    00000132: 	psubd	%xmm1, %xmm0
    00000136: 	paddd	%xmm3, %xmm0
    0000013a: 	psubd	%xmm1, %xmm0
    0000013e: 	cmpq	%rdx, %r12
    00000141: 	jne	.Ltmp1452 # Offset: 321
    00000143: 	movdqa	%xmm0, %xmm1
    00000147: 	psrldq	$0x8, %xmm1
    0000014c: 	paddd	%xmm1, %xmm0
    00000150: 	movdqa	%xmm0, %xmm1
    00000154: 	psrldq	$0x4, %xmm1
    00000159: 	paddd	%xmm1, %xmm0
    0000015d: 	movd	%xmm0, %edx
    00000161: 	addl	%edx, %eax
    00000163: 	cmpl	%r8d, %r15d
    00000166: 	je	.Ltmp1450 # Offset: 358
    0000016c: 	movl	0x10(%rsp), %edx
    00000170: 	movl	%r15d, %r9d
.Ltmp1463:
    00000173: 	movl	%r14d, %r11d
    00000176: 	subl	%r9d, %r11d
    00000179: 	leal	-0x1(%r11), %ecx
    0000017d: 	cmpl	$0x2, %r11d
    00000181: 	je	.Ltmp1453 # Offset: 385
    00000187: 	movq	0x4(%rbx,%r9,4), %xmm5
    0000018e: 	movq	(%rbx,%r9,4), %xmm1
    00000194: 	movd	%ebp, %xmm7
    00000198: 	pshufd	$0xe0, %xmm7, %xmm0
    0000019d: 	movdqa	%xmm5, %xmm4
    000001a1: 	paddd	%xmm1, %xmm4
    000001a5: 	paddd	%xmm0, %xmm4
    000001a9: 	movdqa	%xmm4, %xmm3
    000001ad: 	movdqa	%xmm4, %xmm2
    000001b1: 	paddd	%xmm1, %xmm3
    000001b5: 	psubd	%xmm5, %xmm1
    000001b9: 	paddd	%xmm5, %xmm2
    000001bd: 	paddd	%xmm4, %xmm3
    000001c1: 	movdqa	%xmm1, %xmm0
    000001c5: 	paddd	%xmm4, %xmm2
    000001c9: 	paddd	%xmm3, %xmm0
    000001cd: 	psubd	%xmm2, %xmm0
    000001d1: 	paddd	%xmm3, %xmm0
    000001d5: 	psubd	%xmm2, %xmm0
    000001d9: 	paddd	%xmm3, %xmm0
    000001dd: 	psubd	%xmm2, %xmm0
    000001e1: 	paddd	%xmm3, %xmm0
    000001e5: 	psubd	%xmm2, %xmm0
    000001e9: 	paddd	%xmm3, %xmm0
    000001ed: 	psubd	%xmm2, %xmm0
    000001f1: 	paddd	%xmm3, %xmm0
    000001f5: 	psubd	%xmm2, %xmm0
    000001f9: 	paddd	%xmm3, %xmm0
    000001fd: 	psubd	%xmm2, %xmm0
    00000201: 	movd	%xmm0, %r9d
    00000206: 	pshufd	$0xe5, %xmm0, %xmm7
    0000020b: 	movd	%xmm7, %r11d
    00000210: 	addl	%r11d, %r9d
    00000213: 	addl	%r9d, %eax
    00000216: 	movl	%ecx, %r9d
    00000219: 	andl	$-0x2, %r9d
    0000021d: 	addl	%r9d, %edx
    00000220: 	cmpl	%ecx, %r9d
    00000223: 	je	.Ltmp1450 # Offset: 547
.Ltmp1453:
    00000225: 	movslq	%edx, %rdx
    00000228: 	movl	-0x4(%rbx,%rdx,4), %ecx
    0000022c: 	movl	(%rbx,%rdx,4), %r9d
    00000230: 	leal	(%r9,%rcx), %edx
    00000234: 	addl	%ebp, %edx
    00000236: 	leal	(%rcx,%rdx,2), %ecx
    00000239: 	leal	(%r9,%rdx,2), %edx
    0000023d: 	leal	(%rax,%rcx,2), %eax
    00000240: 	subl	%edx, %eax
    00000242: 	subl	%edx, %eax
    00000244: 	leal	(%rax,%rcx,2), %eax
    00000247: 	subl	%edx, %eax
    00000249: 	subl	%edx, %eax
    0000024b: 	leal	(%rax,%rcx,2), %eax
    0000024e: 	subl	%edx, %eax
    00000250: 	subl	%edx, %eax
    00000252: 	leal	(%rax,%rcx,2), %eax
    00000255: 	subl	%edx, %eax
    00000257: 	subl	%edx, %eax
.Ltmp1450:
    00000259: 	testl	%eax, %eax
    0000025b: 	jne	.Ltmp1454 # Offset: 603
    00000261: 	addl	$0x1, %r13d
    00000265: 	cmpl	%r10d, %r13d
    00000268: 	jl	.Ltmp1455 # Offset: 616
.Ltmp1449:
    0000026e: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000275: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000027c: 	subq	$0x20, %rax
    00000280: 	cmpq	%rax, %rbx
    00000283: 	je	.Ltmp1456 # Offset: 643
    00000289: 	movq	0x18(%rsp), %rax
    0000028e: 	leaq	0x10(%rbx), %rdi
    00000292: 	movq	%rdi, (%rbx)
    00000295: 	movq	(%rax), %rbp
    00000298: 	movq	0x8(%rax), %r12
    0000029c: 	movq	%rbp, %rax
    0000029f: 	addq	%r12, %rax
    000002a2: 	je	.Ltmp1457 # Offset: 674
    000002a4: 	testq	%rbp, %rbp
    000002a7: 	je	.Ltmp1458 # Offset: 679
.Ltmp1457:
    000002ad: 	movq	%r12, 0x20(%rsp)
    000002b2: 	cmpq	$0xf, %r12
    000002b6: 	ja	.Ltmp1459 # Offset: 694
    000002bc: 	cmpq	$0x1, %r12
    000002c0: 	jne	.Ltmp1460 # Offset: 704
    000002c6: 	movzbl	(%rbp), %eax
    000002ca: 	movb	%al, 0x10(%rbx)
.Ltmp1464:
    000002cd: 	movq	%r12, 0x8(%rbx)
    000002d1: 	movb	$0x0, (%rdi,%r12)
    000002d6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002dd: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002e4: 	addq	$0x20, %rax
    000002e8: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002ef: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000002f6: 	je	.Ltmp1461 # Offset: 758
.Ltmp1465:
    000002fc: 	movq	-0x20(%rax), %rbp
    00000300: 	callq	clock@PLT # Offset: 768
    00000305: 	movq	%rax, end_time(%rip)
    0000030c: 	movq	0x28(%rsp), %rdx
    00000311: 	subq	%fs:0x28, %rdx
    0000031a: 	jne	.Ltmp1462 # Offset: 794
    00000320: 	subq	start_time(%rip), %rax
    00000327: 	pxor	%xmm0, %xmm0
    0000032b: 	movq	%rbp, %rdi
    0000032e: 	cvtsi2sd	%rax, %xmm0
    00000333: 	divsd	DATAat0x4d640(%rip), %xmm0
    0000033b: 	addq	$0x38, %rsp
    0000033f: 	popq	%rbx
    00000340: 	popq	%rbp
    00000341: 	popq	%r12
    00000343: 	popq	%r13
    00000345: 	popq	%r14
    00000347: 	popq	%r15
    00000349: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 841
    0000034e: 	nop # Size: 2
.Ltmp1454:
    00000350: 	movq	0x18(%rsp), %rax
    00000355: 	leaq	DATAat0x4d004(%rip), %rsi
    0000035c: 	movl	$0x1, %edi
    00000361: 	movl	%r8d, 0x14(%rsp)
    00000366: 	addl	$0x1, %r13d
    0000036a: 	movq	(%rax), %rdx
    0000036d: 	xorl	%eax, %eax
    0000036f: 	callq	__printf_chk@PLT # Offset: 879
    00000374: 	movl	iterations(%rip), %r10d
    0000037b: 	cmpl	%r10d, %r13d
    0000037e: 	jge	.Ltmp1449 # Offset: 894
    00000384: 	movl	(%rbx), %edi
    00000386: 	movl	0x4(%rbx), %esi
    00000389: 	movl	0x14(%rsp), %r8d
    0000038e: 	jmp	.Ltmp1455 # Offset: 910
.Ltmp1451:
    00000393: 	xorl	%r9d, %r9d
    00000396: 	movl	$0x1, %edx
    0000039b: 	jmp	.Ltmp1463 # Offset: 923
.Ltmp1459:
    000003a0: 	movq	%rbx, %rdi
    000003a3: 	leaq	0x20(%rsp), %rsi
    000003a8: 	xorl	%edx, %edx
    000003aa: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 938
    000003af: 	movq	%rax, (%rbx)
    000003b2: 	movq	%rax, %rdi
    000003b5: 	movq	0x20(%rsp), %rax
    000003ba: 	movq	%rax, 0x10(%rbx)
.Ltmp1466:
    000003be: 	movq	%r12, %rdx
    000003c1: 	movq	%rbp, %rsi
    000003c4: 	callq	memcpy@PLT # Offset: 964
    000003c9: 	movq	0x20(%rsp), %r12
    000003ce: 	movq	(%rbx), %rdi
    000003d1: 	jmp	.Ltmp1464 # Offset: 977
.Ltmp1456:
    000003d6: 	movq	0x18(%rsp), %rsi
    000003db: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000003e2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 994
    000003e7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000003ee: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000003f5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003fc: 	jne	.Ltmp1465 # Offset: 1020
.Ltmp1461:
    00000402: 	movq	-0x8(%rdx), %rax
    00000406: 	addq	$0x200, %rax
    0000040c: 	jmp	.Ltmp1465 # Offset: 1036
.Ltmp1460:
    00000411: 	testq	%r12, %r12
    00000414: 	je	.Ltmp1464 # Offset: 1044
    0000041a: 	jmp	.Ltmp1466 # Offset: 1050
.Ltmp1462:
    0000041c: 	callq	__stack_chk_fail@PLT # Offset: 1052
.Ltmp1458:
    00000421: 	leaq	DATAat0x4d018(%rip), %rdi
    00000428: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1064
DWARF CFI Instructions:
    <empty>
End of Function "_Z28test_CSE8_add_inline_flippedIi14custom_cse_addIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z20test_CSE8_add_inlineIi14custom_cse_addIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 126
  State       : disassembled
  Address     : 0x18010
  Size        : 0x42d
  MaxSize     : 0x430
  Offset      : 0x18010
  Section     : .text
  Orc Section : .local.text._Z20test_CSE8_add_inlineIi14custom_cse_addIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0125:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdi, %rbx
    00000016: 	subq	$0x38, %rsp
    0000001a: 	movq	%rcx, 0x18(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x28(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r10d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r10d, %r10d
    00000045: 	jle	.Ltmp1467 # Offset: 69
    0000004b: 	leal	-0x1(%r14), %r8d
    0000004f: 	leal	-0x2(%r14), %eax
    00000053: 	movl	(%rbx), %edi
    00000055: 	movl	0x4(%rbx), %esi
    00000058: 	movl	%eax, 0xc(%rsp)
    0000005c: 	movl	%r8d, %eax
    0000005f: 	movl	%r8d, %r15d
    00000062: 	xorl	%r13d, %r13d
    00000065: 	shrl	$0x2, %eax
    00000068: 	andl	$-0x4, %r15d
    0000006c: 	subl	$0x1, %eax
    0000006f: 	shlq	$0x4, %rax
    00000073: 	leaq	0x10(%rbx,%rax), %r12
    00000078: 	leal	0x1(%r15), %eax
    0000007c: 	movl	%eax, 0x10(%rsp)
.Ltmp1473:
    00000080: 	leal	(%rdi,%rsi), %edx
    00000083: 	addl	%ebp, %edx
    00000085: 	leal	(%rdi,%rdx,2), %eax
    00000088: 	leal	(%rsi,%rdx,2), %ecx
    0000008b: 	movl	%edi, %edx
    0000008d: 	subl	%esi, %edx
    0000008f: 	addl	%eax, %edx
    00000091: 	subl	%ecx, %edx
    00000093: 	addl	%eax, %edx
    00000095: 	subl	%ecx, %edx
    00000097: 	addl	%eax, %edx
    00000099: 	subl	%ecx, %edx
    0000009b: 	addl	%eax, %edx
    0000009d: 	subl	%ecx, %edx
    0000009f: 	addl	%eax, %edx
    000000a1: 	subl	%ecx, %edx
    000000a3: 	addl	%eax, %edx
    000000a5: 	subl	%ecx, %edx
    000000a7: 	addl	%edx, %eax
    000000a9: 	subl	%ecx, %eax
    000000ab: 	cmpl	$0x1, %r14d
    000000af: 	jle	.Ltmp1468 # Offset: 175
    000000b5: 	cmpl	$0x2, 0xc(%rsp)
    000000ba: 	jbe	.Ltmp1469 # Offset: 186
    000000c0: 	movd	%ebp, %xmm5
    000000c4: 	movq	%rbx, %rdx
    000000c7: 	pxor	%xmm0, %xmm0
    000000cb: 	pshufd	$0x0, %xmm5, %xmm2
.Ltmp1470:
    000000d0: 	movdqu	(%rdx), %xmm6
    000000d4: 	movdqu	0x4(%rdx), %xmm4
    000000d9: 	addq	$0x10, %rdx
    000000dd: 	movdqu	-0xc(%rdx), %xmm1
    000000e2: 	paddd	%xmm6, %xmm4
    000000e6: 	movdqa	%xmm6, %xmm3
    000000ea: 	paddd	%xmm2, %xmm4
    000000ee: 	paddd	%xmm4, %xmm3
    000000f2: 	paddd	%xmm4, %xmm1
    000000f6: 	paddd	%xmm4, %xmm3
    000000fa: 	paddd	%xmm4, %xmm1
    000000fe: 	paddd	%xmm3, %xmm0
    00000102: 	psubd	%xmm1, %xmm0
    00000106: 	paddd	%xmm3, %xmm0
    0000010a: 	psubd	%xmm1, %xmm0
    0000010e: 	paddd	%xmm3, %xmm0
    00000112: 	psubd	%xmm1, %xmm0
    00000116: 	paddd	%xmm3, %xmm0
    0000011a: 	psubd	%xmm1, %xmm0
    0000011e: 	paddd	%xmm3, %xmm0
    00000122: 	psubd	%xmm1, %xmm0
    00000126: 	paddd	%xmm3, %xmm0
    0000012a: 	psubd	%xmm1, %xmm0
    0000012e: 	paddd	%xmm3, %xmm0
    00000132: 	psubd	%xmm1, %xmm0
    00000136: 	paddd	%xmm3, %xmm0
    0000013a: 	psubd	%xmm1, %xmm0
    0000013e: 	cmpq	%rdx, %r12
    00000141: 	jne	.Ltmp1470 # Offset: 321
    00000143: 	movdqa	%xmm0, %xmm1
    00000147: 	psrldq	$0x8, %xmm1
    0000014c: 	paddd	%xmm1, %xmm0
    00000150: 	movdqa	%xmm0, %xmm1
    00000154: 	psrldq	$0x4, %xmm1
    00000159: 	paddd	%xmm1, %xmm0
    0000015d: 	movd	%xmm0, %edx
    00000161: 	addl	%edx, %eax
    00000163: 	cmpl	%r8d, %r15d
    00000166: 	je	.Ltmp1468 # Offset: 358
    0000016c: 	movl	0x10(%rsp), %edx
    00000170: 	movl	%r15d, %r9d
.Ltmp1481:
    00000173: 	movl	%r14d, %r11d
    00000176: 	subl	%r9d, %r11d
    00000179: 	leal	-0x1(%r11), %ecx
    0000017d: 	cmpl	$0x2, %r11d
    00000181: 	je	.Ltmp1471 # Offset: 385
    00000187: 	movq	0x4(%rbx,%r9,4), %xmm5
    0000018e: 	movq	(%rbx,%r9,4), %xmm1
    00000194: 	movd	%ebp, %xmm7
    00000198: 	pshufd	$0xe0, %xmm7, %xmm0
    0000019d: 	movdqa	%xmm5, %xmm4
    000001a1: 	paddd	%xmm1, %xmm4
    000001a5: 	paddd	%xmm0, %xmm4
    000001a9: 	movdqa	%xmm4, %xmm3
    000001ad: 	movdqa	%xmm4, %xmm2
    000001b1: 	paddd	%xmm1, %xmm3
    000001b5: 	psubd	%xmm5, %xmm1
    000001b9: 	paddd	%xmm5, %xmm2
    000001bd: 	paddd	%xmm4, %xmm3
    000001c1: 	movdqa	%xmm1, %xmm0
    000001c5: 	paddd	%xmm4, %xmm2
    000001c9: 	paddd	%xmm3, %xmm0
    000001cd: 	psubd	%xmm2, %xmm0
    000001d1: 	paddd	%xmm3, %xmm0
    000001d5: 	psubd	%xmm2, %xmm0
    000001d9: 	paddd	%xmm3, %xmm0
    000001dd: 	psubd	%xmm2, %xmm0
    000001e1: 	paddd	%xmm3, %xmm0
    000001e5: 	psubd	%xmm2, %xmm0
    000001e9: 	paddd	%xmm3, %xmm0
    000001ed: 	psubd	%xmm2, %xmm0
    000001f1: 	paddd	%xmm3, %xmm0
    000001f5: 	psubd	%xmm2, %xmm0
    000001f9: 	paddd	%xmm3, %xmm0
    000001fd: 	psubd	%xmm2, %xmm0
    00000201: 	movd	%xmm0, %r9d
    00000206: 	pshufd	$0xe5, %xmm0, %xmm7
    0000020b: 	movd	%xmm7, %r11d
    00000210: 	addl	%r11d, %r9d
    00000213: 	addl	%r9d, %eax
    00000216: 	movl	%ecx, %r9d
    00000219: 	andl	$-0x2, %r9d
    0000021d: 	addl	%r9d, %edx
    00000220: 	cmpl	%ecx, %r9d
    00000223: 	je	.Ltmp1468 # Offset: 547
.Ltmp1471:
    00000225: 	movslq	%edx, %rdx
    00000228: 	movl	-0x4(%rbx,%rdx,4), %ecx
    0000022c: 	movl	(%rbx,%rdx,4), %r9d
    00000230: 	leal	(%r9,%rcx), %edx
    00000234: 	addl	%ebp, %edx
    00000236: 	leal	(%rcx,%rdx,2), %ecx
    00000239: 	leal	(%r9,%rdx,2), %edx
    0000023d: 	leal	(%rax,%rcx,2), %eax
    00000240: 	subl	%edx, %eax
    00000242: 	subl	%edx, %eax
    00000244: 	leal	(%rax,%rcx,2), %eax
    00000247: 	subl	%edx, %eax
    00000249: 	subl	%edx, %eax
    0000024b: 	leal	(%rax,%rcx,2), %eax
    0000024e: 	subl	%edx, %eax
    00000250: 	subl	%edx, %eax
    00000252: 	leal	(%rax,%rcx,2), %eax
    00000255: 	subl	%edx, %eax
    00000257: 	subl	%edx, %eax
.Ltmp1468:
    00000259: 	testl	%eax, %eax
    0000025b: 	jne	.Ltmp1472 # Offset: 603
    00000261: 	addl	$0x1, %r13d
    00000265: 	cmpl	%r10d, %r13d
    00000268: 	jl	.Ltmp1473 # Offset: 616
.Ltmp1467:
    0000026e: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000275: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000027c: 	subq	$0x20, %rax
    00000280: 	cmpq	%rax, %rbx
    00000283: 	je	.Ltmp1474 # Offset: 643
    00000289: 	movq	0x18(%rsp), %rax
    0000028e: 	leaq	0x10(%rbx), %rdi
    00000292: 	movq	%rdi, (%rbx)
    00000295: 	movq	(%rax), %rbp
    00000298: 	movq	0x8(%rax), %r12
    0000029c: 	movq	%rbp, %rax
    0000029f: 	addq	%r12, %rax
    000002a2: 	je	.Ltmp1475 # Offset: 674
    000002a4: 	testq	%rbp, %rbp
    000002a7: 	je	.Ltmp1476 # Offset: 679
.Ltmp1475:
    000002ad: 	movq	%r12, 0x20(%rsp)
    000002b2: 	cmpq	$0xf, %r12
    000002b6: 	ja	.Ltmp1477 # Offset: 694
    000002bc: 	cmpq	$0x1, %r12
    000002c0: 	jne	.Ltmp1478 # Offset: 704
    000002c6: 	movzbl	(%rbp), %eax
    000002ca: 	movb	%al, 0x10(%rbx)
.Ltmp1482:
    000002cd: 	movq	%r12, 0x8(%rbx)
    000002d1: 	movb	$0x0, (%rdi,%r12)
    000002d6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002dd: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002e4: 	addq	$0x20, %rax
    000002e8: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002ef: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000002f6: 	je	.Ltmp1479 # Offset: 758
.Ltmp1483:
    000002fc: 	movq	-0x20(%rax), %rbp
    00000300: 	callq	clock@PLT # Offset: 768
    00000305: 	movq	%rax, end_time(%rip)
    0000030c: 	movq	0x28(%rsp), %rdx
    00000311: 	subq	%fs:0x28, %rdx
    0000031a: 	jne	.Ltmp1480 # Offset: 794
    00000320: 	subq	start_time(%rip), %rax
    00000327: 	pxor	%xmm0, %xmm0
    0000032b: 	movq	%rbp, %rdi
    0000032e: 	cvtsi2sd	%rax, %xmm0
    00000333: 	divsd	DATAat0x4d640(%rip), %xmm0
    0000033b: 	addq	$0x38, %rsp
    0000033f: 	popq	%rbx
    00000340: 	popq	%rbp
    00000341: 	popq	%r12
    00000343: 	popq	%r13
    00000345: 	popq	%r14
    00000347: 	popq	%r15
    00000349: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 841
    0000034e: 	nop # Size: 2
.Ltmp1472:
    00000350: 	movq	0x18(%rsp), %rax
    00000355: 	leaq	DATAat0x4d004(%rip), %rsi
    0000035c: 	movl	$0x1, %edi
    00000361: 	movl	%r8d, 0x14(%rsp)
    00000366: 	addl	$0x1, %r13d
    0000036a: 	movq	(%rax), %rdx
    0000036d: 	xorl	%eax, %eax
    0000036f: 	callq	__printf_chk@PLT # Offset: 879
    00000374: 	movl	iterations(%rip), %r10d
    0000037b: 	cmpl	%r10d, %r13d
    0000037e: 	jge	.Ltmp1467 # Offset: 894
    00000384: 	movl	(%rbx), %edi
    00000386: 	movl	0x4(%rbx), %esi
    00000389: 	movl	0x14(%rsp), %r8d
    0000038e: 	jmp	.Ltmp1473 # Offset: 910
.Ltmp1469:
    00000393: 	xorl	%r9d, %r9d
    00000396: 	movl	$0x1, %edx
    0000039b: 	jmp	.Ltmp1481 # Offset: 923
.Ltmp1477:
    000003a0: 	movq	%rbx, %rdi
    000003a3: 	leaq	0x20(%rsp), %rsi
    000003a8: 	xorl	%edx, %edx
    000003aa: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 938
    000003af: 	movq	%rax, (%rbx)
    000003b2: 	movq	%rax, %rdi
    000003b5: 	movq	0x20(%rsp), %rax
    000003ba: 	movq	%rax, 0x10(%rbx)
.Ltmp1484:
    000003be: 	movq	%r12, %rdx
    000003c1: 	movq	%rbp, %rsi
    000003c4: 	callq	memcpy@PLT # Offset: 964
    000003c9: 	movq	0x20(%rsp), %r12
    000003ce: 	movq	(%rbx), %rdi
    000003d1: 	jmp	.Ltmp1482 # Offset: 977
.Ltmp1474:
    000003d6: 	movq	0x18(%rsp), %rsi
    000003db: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000003e2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 994
    000003e7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000003ee: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000003f5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003fc: 	jne	.Ltmp1483 # Offset: 1020
.Ltmp1479:
    00000402: 	movq	-0x8(%rdx), %rax
    00000406: 	addq	$0x200, %rax
    0000040c: 	jmp	.Ltmp1483 # Offset: 1036
.Ltmp1478:
    00000411: 	testq	%r12, %r12
    00000414: 	je	.Ltmp1482 # Offset: 1044
    0000041a: 	jmp	.Ltmp1484 # Offset: 1050
.Ltmp1480:
    0000041c: 	callq	__stack_chk_fail@PLT # Offset: 1052
.Ltmp1476:
    00000421: 	leaq	DATAat0x4d018(%rip), %rdi
    00000428: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1064
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_CSE8_add_inlineIi14custom_cse_addIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSE8Ij14custom_cse_mulIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 127
  State       : disassembled
  Address     : 0x18440
  Size        : 0x3f3
  MaxSize     : 0x400
  Offset      : 0x18440
  Section     : .text
  Orc Section : .local.text._Z9test_CSE8Ij14custom_cse_mulIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0126:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%esi, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	movl	%edx, %ebp
    00000015: 	pushq	%rbx
    00000016: 	subq	$0x38, %rsp
    0000001a: 	movq	%rcx, 0x18(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x28(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r11d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r11d, %r11d
    00000045: 	jle	.Ltmp1485 # Offset: 69
    0000004b: 	leal	-0x1(%r13), %edi
    0000004f: 	leal	-0x2(%r13), %eax
    00000053: 	xorl	%r14d, %r14d
    00000056: 	movl	%eax, 0x8(%rsp)
    0000005a: 	movl	%edi, %eax
    0000005c: 	shrl	$0x2, %eax
    0000005f: 	movl	%edi, 0x10(%rsp)
    00000063: 	andl	$-0x4, %edi
    00000066: 	subl	$0x1, %eax
    00000069: 	movl	%edi, 0xc(%rsp)
    0000006d: 	shlq	$0x4, %rax
    00000071: 	leaq	0x10(%r12,%rax), %rbx
    00000076: 	leal	0x1(%rdi), %eax
    00000079: 	movl	%eax, 0x14(%rsp)
.Ltmp1498:
    0000007d: 	movl	(%r12), %r9d
    00000081: 	movl	0x4(%r12), %r8d
.Ltmp1490:
    00000086: 	movl	%r9d, %ecx
    00000089: 	imull	%r8d, %ecx
    0000008d: 	addl	%ebp, %ecx
    0000008f: 	addl	%ecx, %ecx
    00000091: 	leal	(%r8,%rcx), %edx
    00000095: 	addl	%r9d, %ecx
    00000098: 	leal	(,%rcx,8), %eax
    0000009f: 	subl	%ecx, %eax
    000000a1: 	movl	%r9d, %ecx
    000000a4: 	subl	%r8d, %ecx
    000000a7: 	addl	%ecx, %eax
    000000a9: 	subl	%edx, %eax
    000000ab: 	subl	%edx, %eax
    000000ad: 	subl	%edx, %eax
    000000af: 	subl	%edx, %eax
    000000b1: 	subl	%edx, %eax
    000000b3: 	subl	%edx, %eax
    000000b5: 	subl	%edx, %eax
    000000b7: 	cmpl	$0x1, %r13d
    000000bb: 	jle	.Ltmp1486 # Offset: 187
    000000c1: 	cmpl	$0x2, 0x8(%rsp)
    000000c6: 	jbe	.Ltmp1487 # Offset: 198
    000000cc: 	movd	%ebp, %xmm7
    000000d0: 	movq	%r12, %rdx
    000000d3: 	pxor	%xmm3, %xmm3
    000000d7: 	pshufd	$0x0, %xmm7, %xmm4
    000000dc: 	nopl	(%rax) # Size: 4
.Ltmp1488:
    000000e0: 	movdqu	(%rdx), %xmm5
    000000e4: 	movdqu	0x4(%rdx), %xmm1
    000000e9: 	addq	$0x10, %rdx
    000000ed: 	movdqa	%xmm1, %xmm2
    000000f1: 	movdqa	%xmm5, %xmm6
    000000f5: 	movdqa	%xmm1, %xmm0
    000000f9: 	psrlq	$0x20, %xmm2
    000000fe: 	psrlq	$0x20, %xmm6
    00000103: 	pmuludq	%xmm5, %xmm0
    00000107: 	pmuludq	%xmm6, %xmm2
    0000010b: 	pshufd	$0x8, %xmm0, %xmm0
    00000110: 	pshufd	$0x8, %xmm2, %xmm2
    00000115: 	punpckldq	%xmm2, %xmm0
    00000119: 	paddd	%xmm4, %xmm0
    0000011d: 	pslld	$0x1, %xmm0
    00000122: 	paddd	%xmm0, %xmm1
    00000126: 	paddd	%xmm5, %xmm0
    0000012a: 	movdqa	%xmm1, %xmm2
    0000012e: 	pslld	$0x3, %xmm0
    00000133: 	paddd	%xmm1, %xmm2
    00000137: 	psubd	%xmm1, %xmm0
    0000013b: 	psubd	%xmm2, %xmm0
    0000013f: 	paddd	%xmm1, %xmm2
    00000143: 	pslld	$0x1, %xmm1
    00000148: 	psubd	%xmm2, %xmm0
    0000014c: 	psubd	%xmm1, %xmm3
    00000150: 	paddd	%xmm0, %xmm3
    00000154: 	cmpq	%rdx, %rbx
    00000157: 	jne	.Ltmp1488 # Offset: 343
    00000159: 	movdqa	%xmm3, %xmm0
    0000015d: 	movl	0x10(%rsp), %esi
    00000161: 	psrldq	$0x8, %xmm0
    00000166: 	paddd	%xmm0, %xmm3
    0000016a: 	movdqa	%xmm3, %xmm0
    0000016e: 	psrldq	$0x4, %xmm0
    00000173: 	paddd	%xmm0, %xmm3
    00000177: 	movd	%xmm3, %edx
    0000017b: 	addl	%edx, %eax
    0000017d: 	cmpl	%esi, 0xc(%rsp)
    00000181: 	je	.Ltmp1486 # Offset: 385
    00000187: 	movl	0x14(%rsp), %edi
.Ltmp1499:
    0000018b: 	movslq	%edi, %rsi
    0000018e: 	shlq	$0x2, %rsi
    00000192: 	leaq	(%r12,%rsi), %rdx
    00000196: 	movl	-0x4(%rdx), %r10d
    0000019a: 	movl	(%rdx), %r15d
    0000019d: 	movl	%r10d, %ecx
    000001a0: 	imull	%r15d, %ecx
    000001a4: 	addl	%ebp, %ecx
    000001a6: 	addl	%ecx, %ecx
    000001a8: 	addl	%ecx, %r10d
    000001ab: 	leal	(%r15,%rcx), %edx
    000001af: 	leal	(%rax,%r10,8), %eax
    000001b3: 	subl	%edx, %eax
    000001b5: 	subl	%edx, %eax
    000001b7: 	subl	%edx, %eax
    000001b9: 	subl	%edx, %eax
    000001bb: 	subl	%edx, %eax
    000001bd: 	subl	%edx, %eax
    000001bf: 	addl	%edx, %edx
    000001c1: 	subl	%edx, %eax
    000001c3: 	leal	0x1(%rdi), %edx
    000001c6: 	cmpl	%edx, %r13d
    000001c9: 	jle	.Ltmp1486 # Offset: 457
    000001cb: 	movl	0x4(%r12,%rsi), %ecx
    000001d0: 	addl	$0x2, %edi
    000001d3: 	movl	%ecx, %edx
    000001d5: 	imull	%r15d, %edx
    000001d9: 	addl	%ebp, %edx
    000001db: 	addl	%edx, %edx
    000001dd: 	leal	(%rdx,%rcx), %r10d
    000001e1: 	addl	%r15d, %edx
    000001e4: 	shll	$0x3, %edx
    000001e7: 	subl	%r10d, %edx
    000001ea: 	subl	%r10d, %edx
    000001ed: 	subl	%r10d, %edx
    000001f0: 	subl	%r10d, %edx
    000001f3: 	subl	%r10d, %edx
    000001f6: 	subl	%r10d, %edx
    000001f9: 	addl	%r10d, %r10d
    000001fc: 	subl	%r10d, %edx
    000001ff: 	addl	%edx, %eax
    00000201: 	cmpl	%edi, %r13d
    00000204: 	jle	.Ltmp1486 # Offset: 516
    00000206: 	movl	0x8(%r12,%rsi), %esi
    0000020b: 	movl	%ecx, %edx
    0000020d: 	imull	%esi, %edx
    00000210: 	addl	%ebp, %edx
    00000212: 	addl	%edx, %edx
    00000214: 	addl	%edx, %esi
    00000216: 	addl	%ecx, %edx
    00000218: 	shll	$0x3, %edx
    0000021b: 	subl	%esi, %edx
    0000021d: 	subl	%esi, %edx
    0000021f: 	subl	%esi, %edx
    00000221: 	subl	%esi, %edx
    00000223: 	subl	%esi, %edx
    00000225: 	subl	%esi, %edx
    00000227: 	addl	%esi, %esi
    00000229: 	subl	%esi, %edx
    0000022b: 	addl	%edx, %eax
.Ltmp1486:
    0000022d: 	testl	%eax, %eax
    0000022f: 	jne	.Ltmp1489 # Offset: 559
    00000235: 	addl	$0x1, %r14d
    00000239: 	cmpl	%r11d, %r14d
    0000023c: 	jl	.Ltmp1490 # Offset: 572
.Ltmp1485:
    00000242: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000249: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000250: 	subq	$0x20, %rax
    00000254: 	cmpq	%rax, %rbx
    00000257: 	je	.Ltmp1491 # Offset: 599
    0000025d: 	movq	0x18(%rsp), %rax
    00000262: 	leaq	0x10(%rbx), %rdi
    00000266: 	movq	%rdi, (%rbx)
    00000269: 	movq	(%rax), %rbp
    0000026c: 	movq	0x8(%rax), %r12
    00000270: 	movq	%rbp, %rax
    00000273: 	addq	%r12, %rax
    00000276: 	je	.Ltmp1492 # Offset: 630
    00000278: 	testq	%rbp, %rbp
    0000027b: 	je	.Ltmp1493 # Offset: 635
.Ltmp1492:
    00000281: 	movq	%r12, 0x20(%rsp)
    00000286: 	cmpq	$0xf, %r12
    0000028a: 	ja	.Ltmp1494 # Offset: 650
    00000290: 	cmpq	$0x1, %r12
    00000294: 	jne	.Ltmp1495 # Offset: 660
    0000029a: 	movzbl	(%rbp), %eax
    0000029e: 	movb	%al, 0x10(%rbx)
.Ltmp1500:
    000002a1: 	movq	%r12, 0x8(%rbx)
    000002a5: 	movb	$0x0, (%rdi,%r12)
    000002aa: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002b1: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002b8: 	addq	$0x20, %rax
    000002bc: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002c3: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000002ca: 	je	.Ltmp1496 # Offset: 714
.Ltmp1501:
    000002d0: 	movq	-0x20(%rax), %rbp
    000002d4: 	callq	clock@PLT # Offset: 724
    000002d9: 	movq	%rax, end_time(%rip)
    000002e0: 	movq	0x28(%rsp), %rdx
    000002e5: 	subq	%fs:0x28, %rdx
    000002ee: 	jne	.Ltmp1497 # Offset: 750
    000002f4: 	subq	start_time(%rip), %rax
    000002fb: 	pxor	%xmm0, %xmm0
    000002ff: 	movq	%rbp, %rdi
    00000302: 	cvtsi2sd	%rax, %xmm0
    00000307: 	divsd	DATAat0x4d640(%rip), %xmm0
    0000030f: 	addq	$0x38, %rsp
    00000313: 	popq	%rbx
    00000314: 	popq	%rbp
    00000315: 	popq	%r12
    00000317: 	popq	%r13
    00000319: 	popq	%r14
    0000031b: 	popq	%r15
    0000031d: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 797
    00000322: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1489:
    00000328: 	movq	0x18(%rsp), %rax
    0000032d: 	leaq	DATAat0x4d004(%rip), %rsi
    00000334: 	movl	$0x1, %edi
    00000339: 	addl	$0x1, %r14d
    0000033d: 	movq	(%rax), %rdx
    00000340: 	xorl	%eax, %eax
    00000342: 	callq	__printf_chk@PLT # Offset: 834
    00000347: 	movl	iterations(%rip), %r11d
    0000034e: 	cmpl	%r11d, %r14d
    00000351: 	jl	.Ltmp1498 # Offset: 849
    00000357: 	jmp	.Ltmp1485 # Offset: 855
.Ltmp1487:
    0000035c: 	movl	$0x1, %edi
    00000361: 	jmp	.Ltmp1499 # Offset: 865
.Ltmp1494:
    00000366: 	movq	%rbx, %rdi
    00000369: 	leaq	0x20(%rsp), %rsi
    0000036e: 	xorl	%edx, %edx
    00000370: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 880
    00000375: 	movq	%rax, (%rbx)
    00000378: 	movq	%rax, %rdi
    0000037b: 	movq	0x20(%rsp), %rax
    00000380: 	movq	%rax, 0x10(%rbx)
.Ltmp1502:
    00000384: 	movq	%r12, %rdx
    00000387: 	movq	%rbp, %rsi
    0000038a: 	callq	memcpy@PLT # Offset: 906
    0000038f: 	movq	0x20(%rsp), %r12
    00000394: 	movq	(%rbx), %rdi
    00000397: 	jmp	.Ltmp1500 # Offset: 919
.Ltmp1491:
    0000039c: 	movq	0x18(%rsp), %rsi
    000003a1: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000003a8: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 936
    000003ad: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000003b4: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000003bb: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003c2: 	jne	.Ltmp1501 # Offset: 962
.Ltmp1496:
    000003c8: 	movq	-0x8(%rdx), %rax
    000003cc: 	addq	$0x200, %rax
    000003d2: 	jmp	.Ltmp1501 # Offset: 978
.Ltmp1495:
    000003d7: 	testq	%r12, %r12
    000003da: 	je	.Ltmp1500 # Offset: 986
    000003e0: 	jmp	.Ltmp1502 # Offset: 992
.Ltmp1497:
    000003e2: 	callq	__stack_chk_fail@PLT # Offset: 994
.Ltmp1493:
    000003e7: 	leaq	DATAat0x4d018(%rip), %rdi
    000003ee: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1006
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE8Ij14custom_cse_mulIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z28test_CSE8_add_inline_flippedIj14custom_cse_addIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 128
  State       : disassembled
  Address     : 0x18840
  Size        : 0x3dd
  MaxSize     : 0x3e0
  Offset      : 0x18840
  Section     : .text
  Orc Section : .local.text._Z28test_CSE8_add_inline_flippedIj14custom_cse_addIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0127:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdi, %rbx
    00000016: 	subq	$0x38, %rsp
    0000001a: 	movq	%rcx, 0x18(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x28(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r10d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r10d, %r10d
    00000045: 	jle	.Ltmp1503 # Offset: 69
    0000004b: 	leal	-0x1(%r14), %r8d
    0000004f: 	leal	-0x2(%r14), %eax
    00000053: 	movl	(%rbx), %edi
    00000055: 	movl	0x4(%rbx), %esi
    00000058: 	movl	%eax, 0xc(%rsp)
    0000005c: 	movl	%r8d, %eax
    0000005f: 	movl	%r8d, %r15d
    00000062: 	xorl	%r13d, %r13d
    00000065: 	shrl	$0x2, %eax
    00000068: 	andl	$-0x4, %r15d
    0000006c: 	subl	$0x1, %eax
    0000006f: 	shlq	$0x4, %rax
    00000073: 	leaq	0x10(%rbx,%rax), %r12
    00000078: 	leal	0x1(%r15), %eax
    0000007c: 	movl	%eax, 0x10(%rsp)
.Ltmp1509:
    00000080: 	leal	(%rdi,%rsi), %ecx
    00000083: 	addl	%ebp, %ecx
    00000085: 	addl	%ecx, %ecx
    00000087: 	leal	(%rsi,%rcx), %edx
    0000008a: 	addl	%edi, %ecx
    0000008c: 	leal	(,%rcx,8), %eax
    00000093: 	subl	%ecx, %eax
    00000095: 	movl	%edi, %ecx
    00000097: 	subl	%esi, %ecx
    00000099: 	addl	%ecx, %eax
    0000009b: 	subl	%edx, %eax
    0000009d: 	subl	%edx, %eax
    0000009f: 	subl	%edx, %eax
    000000a1: 	subl	%edx, %eax
    000000a3: 	subl	%edx, %eax
    000000a5: 	subl	%edx, %eax
    000000a7: 	subl	%edx, %eax
    000000a9: 	cmpl	$0x1, %r14d
    000000ad: 	jle	.Ltmp1504 # Offset: 173
    000000b3: 	cmpl	$0x2, 0xc(%rsp)
    000000b8: 	jbe	.Ltmp1505 # Offset: 184
    000000be: 	movd	%ebp, %xmm7
    000000c2: 	movq	%rbx, %rdx
    000000c5: 	pxor	%xmm2, %xmm2
    000000c9: 	pshufd	$0x0, %xmm7, %xmm4
    000000ce: 	nop # Size: 2
.Ltmp1506:
    000000d0: 	movdqu	(%rdx), %xmm5
    000000d4: 	movdqu	0x4(%rdx), %xmm0
    000000d9: 	addq	$0x10, %rdx
    000000dd: 	movdqu	-0xc(%rdx), %xmm1
    000000e2: 	paddd	%xmm5, %xmm0
    000000e6: 	paddd	%xmm4, %xmm0
    000000ea: 	pslld	$0x1, %xmm0
    000000ef: 	paddd	%xmm0, %xmm1
    000000f3: 	paddd	%xmm5, %xmm0
    000000f7: 	movdqa	%xmm1, %xmm3
    000000fb: 	pslld	$0x3, %xmm0
    00000100: 	paddd	%xmm1, %xmm3
    00000104: 	psubd	%xmm1, %xmm0
    00000108: 	psubd	%xmm3, %xmm0
    0000010c: 	paddd	%xmm1, %xmm3
    00000110: 	pslld	$0x1, %xmm1
    00000115: 	psubd	%xmm3, %xmm0
    00000119: 	psubd	%xmm1, %xmm2
    0000011d: 	paddd	%xmm0, %xmm2
    00000121: 	cmpq	%rdx, %r12
    00000124: 	jne	.Ltmp1506 # Offset: 292
    00000126: 	movdqa	%xmm2, %xmm0
    0000012a: 	psrldq	$0x8, %xmm0
    0000012f: 	paddd	%xmm0, %xmm2
    00000133: 	movdqa	%xmm2, %xmm0
    00000137: 	psrldq	$0x4, %xmm0
    0000013c: 	paddd	%xmm0, %xmm2
    00000140: 	movd	%xmm2, %edx
    00000144: 	addl	%edx, %eax
    00000146: 	cmpl	%r8d, %r15d
    00000149: 	je	.Ltmp1504 # Offset: 329
    0000014f: 	movl	0x10(%rsp), %edx
    00000153: 	movl	%r15d, %r9d
.Ltmp1517:
    00000156: 	movl	%r14d, %r11d
    00000159: 	subl	%r9d, %r11d
    0000015c: 	leal	-0x1(%r11), %ecx
    00000160: 	cmpl	$0x2, %r11d
    00000164: 	je	.Ltmp1507 # Offset: 356
    00000166: 	movq	(%rbx,%r9,4), %xmm0
    0000016c: 	movd	%ebp, %xmm7
    00000170: 	movq	0x4(%rbx,%r9,4), %xmm1
    00000177: 	pshufd	$0xe0, %xmm7, %xmm2
    0000017c: 	paddd	%xmm0, %xmm2
    00000180: 	paddd	%xmm1, %xmm2
    00000184: 	pslld	$0x1, %xmm2
    00000189: 	paddd	%xmm2, %xmm1
    0000018d: 	paddd	%xmm2, %xmm0
    00000191: 	movdqa	%xmm1, %xmm3
    00000195: 	pslld	$0x3, %xmm0
    0000019a: 	movdqa	%xmm1, %xmm2
    0000019e: 	paddd	%xmm1, %xmm3
    000001a2: 	psubd	%xmm1, %xmm0
    000001a6: 	pslld	$0x1, %xmm2
    000001ab: 	paddd	%xmm2, %xmm1
    000001af: 	psubd	%xmm3, %xmm0
    000001b3: 	psubd	%xmm3, %xmm0
    000001b7: 	psubd	%xmm1, %xmm0
    000001bb: 	movd	%xmm0, %r11d
    000001c0: 	pshufd	$0xe5, %xmm0, %xmm7
    000001c5: 	movd	%xmm7, %r9d
    000001ca: 	addl	%r11d, %r9d
    000001cd: 	addl	%r9d, %eax
    000001d0: 	movl	%ecx, %r9d
    000001d3: 	andl	$-0x2, %r9d
    000001d7: 	addl	%r9d, %edx
    000001da: 	cmpl	%ecx, %r9d
    000001dd: 	je	.Ltmp1504 # Offset: 477
.Ltmp1507:
    000001df: 	movslq	%edx, %rdx
    000001e2: 	movl	-0x4(%rbx,%rdx,4), %r9d
    000001e7: 	movl	(%rbx,%rdx,4), %edx
    000001ea: 	leal	(%rbp,%rdx), %ecx
    000001ee: 	addl	%r9d, %ecx
    000001f1: 	addl	%ecx, %ecx
    000001f3: 	addl	%ecx, %edx
    000001f5: 	addl	%r9d, %ecx
    000001f8: 	leal	(%rax,%rcx,8), %eax
    000001fb: 	subl	%edx, %eax
    000001fd: 	subl	%edx, %eax
    000001ff: 	subl	%edx, %eax
    00000201: 	subl	%edx, %eax
    00000203: 	subl	%edx, %eax
    00000205: 	subl	%edx, %eax
    00000207: 	addl	%edx, %edx
    00000209: 	subl	%edx, %eax
.Ltmp1504:
    0000020b: 	testl	%eax, %eax
    0000020d: 	jne	.Ltmp1508 # Offset: 525
    00000213: 	addl	$0x1, %r13d
    00000217: 	cmpl	%r10d, %r13d
    0000021a: 	jl	.Ltmp1509 # Offset: 538
.Ltmp1503:
    00000220: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000227: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000022e: 	subq	$0x20, %rax
    00000232: 	cmpq	%rax, %rbx
    00000235: 	je	.Ltmp1510 # Offset: 565
    0000023b: 	movq	0x18(%rsp), %rax
    00000240: 	leaq	0x10(%rbx), %rdi
    00000244: 	movq	%rdi, (%rbx)
    00000247: 	movq	(%rax), %rbp
    0000024a: 	movq	0x8(%rax), %r12
    0000024e: 	movq	%rbp, %rax
    00000251: 	addq	%r12, %rax
    00000254: 	je	.Ltmp1511 # Offset: 596
    00000256: 	testq	%rbp, %rbp
    00000259: 	je	.Ltmp1512 # Offset: 601
.Ltmp1511:
    0000025f: 	movq	%r12, 0x20(%rsp)
    00000264: 	cmpq	$0xf, %r12
    00000268: 	ja	.Ltmp1513 # Offset: 616
    0000026e: 	cmpq	$0x1, %r12
    00000272: 	jne	.Ltmp1514 # Offset: 626
    00000278: 	movzbl	(%rbp), %eax
    0000027c: 	movb	%al, 0x10(%rbx)
.Ltmp1518:
    0000027f: 	movq	%r12, 0x8(%rbx)
    00000283: 	movb	$0x0, (%rdi,%r12)
    00000288: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000028f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000296: 	addq	$0x20, %rax
    0000029a: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002a1: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000002a8: 	je	.Ltmp1515 # Offset: 680
.Ltmp1519:
    000002ae: 	movq	-0x20(%rax), %rbp
    000002b2: 	callq	clock@PLT # Offset: 690
    000002b7: 	movq	%rax, end_time(%rip)
    000002be: 	movq	0x28(%rsp), %rdx
    000002c3: 	subq	%fs:0x28, %rdx
    000002cc: 	jne	.Ltmp1516 # Offset: 716
    000002d2: 	subq	start_time(%rip), %rax
    000002d9: 	pxor	%xmm0, %xmm0
    000002dd: 	movq	%rbp, %rdi
    000002e0: 	cvtsi2sd	%rax, %xmm0
    000002e5: 	divsd	DATAat0x4d640(%rip), %xmm0
    000002ed: 	addq	$0x38, %rsp
    000002f1: 	popq	%rbx
    000002f2: 	popq	%rbp
    000002f3: 	popq	%r12
    000002f5: 	popq	%r13
    000002f7: 	popq	%r14
    000002f9: 	popq	%r15
    000002fb: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 763
.Ltmp1508:
    00000300: 	movq	0x18(%rsp), %rax
    00000305: 	leaq	DATAat0x4d004(%rip), %rsi
    0000030c: 	movl	$0x1, %edi
    00000311: 	movl	%r8d, 0x14(%rsp)
    00000316: 	addl	$0x1, %r13d
    0000031a: 	movq	(%rax), %rdx
    0000031d: 	xorl	%eax, %eax
    0000031f: 	callq	__printf_chk@PLT # Offset: 799
    00000324: 	movl	iterations(%rip), %r10d
    0000032b: 	cmpl	%r10d, %r13d
    0000032e: 	jge	.Ltmp1503 # Offset: 814
    00000334: 	movl	(%rbx), %edi
    00000336: 	movl	0x4(%rbx), %esi
    00000339: 	movl	0x14(%rsp), %r8d
    0000033e: 	jmp	.Ltmp1509 # Offset: 830
.Ltmp1505:
    00000343: 	xorl	%r9d, %r9d
    00000346: 	movl	$0x1, %edx
    0000034b: 	jmp	.Ltmp1517 # Offset: 843
.Ltmp1513:
    00000350: 	movq	%rbx, %rdi
    00000353: 	leaq	0x20(%rsp), %rsi
    00000358: 	xorl	%edx, %edx
    0000035a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 858
    0000035f: 	movq	%rax, (%rbx)
    00000362: 	movq	%rax, %rdi
    00000365: 	movq	0x20(%rsp), %rax
    0000036a: 	movq	%rax, 0x10(%rbx)
.Ltmp1520:
    0000036e: 	movq	%r12, %rdx
    00000371: 	movq	%rbp, %rsi
    00000374: 	callq	memcpy@PLT # Offset: 884
    00000379: 	movq	0x20(%rsp), %r12
    0000037e: 	movq	(%rbx), %rdi
    00000381: 	jmp	.Ltmp1518 # Offset: 897
.Ltmp1510:
    00000386: 	movq	0x18(%rsp), %rsi
    0000038b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000392: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 914
    00000397: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000039e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000003a5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003ac: 	jne	.Ltmp1519 # Offset: 940
.Ltmp1515:
    000003b2: 	movq	-0x8(%rdx), %rax
    000003b6: 	addq	$0x200, %rax
    000003bc: 	jmp	.Ltmp1519 # Offset: 956
.Ltmp1514:
    000003c1: 	testq	%r12, %r12
    000003c4: 	je	.Ltmp1518 # Offset: 964
    000003ca: 	jmp	.Ltmp1520 # Offset: 970
.Ltmp1516:
    000003cc: 	callq	__stack_chk_fail@PLT # Offset: 972
.Ltmp1512:
    000003d1: 	leaq	DATAat0x4d018(%rip), %rdi
    000003d8: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 984
DWARF CFI Instructions:
    <empty>
End of Function "_Z28test_CSE8_add_inline_flippedIj14custom_cse_addIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z20test_CSE8_add_inlineIj14custom_cse_addIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 129
  State       : disassembled
  Address     : 0x18c20
  Size        : 0x3dd
  MaxSize     : 0x3e0
  Offset      : 0x18c20
  Section     : .text
  Orc Section : .local.text._Z20test_CSE8_add_inlineIj14custom_cse_addIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0128:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdi, %rbx
    00000016: 	subq	$0x38, %rsp
    0000001a: 	movq	%rcx, 0x18(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x28(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r10d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r10d, %r10d
    00000045: 	jle	.Ltmp1521 # Offset: 69
    0000004b: 	leal	-0x1(%r14), %r8d
    0000004f: 	leal	-0x2(%r14), %eax
    00000053: 	movl	(%rbx), %edi
    00000055: 	movl	0x4(%rbx), %esi
    00000058: 	movl	%eax, 0xc(%rsp)
    0000005c: 	movl	%r8d, %eax
    0000005f: 	movl	%r8d, %r15d
    00000062: 	xorl	%r13d, %r13d
    00000065: 	shrl	$0x2, %eax
    00000068: 	andl	$-0x4, %r15d
    0000006c: 	subl	$0x1, %eax
    0000006f: 	shlq	$0x4, %rax
    00000073: 	leaq	0x10(%rbx,%rax), %r12
    00000078: 	leal	0x1(%r15), %eax
    0000007c: 	movl	%eax, 0x10(%rsp)
.Ltmp1527:
    00000080: 	leal	(%rdi,%rsi), %ecx
    00000083: 	addl	%ebp, %ecx
    00000085: 	addl	%ecx, %ecx
    00000087: 	leal	(%rsi,%rcx), %edx
    0000008a: 	addl	%edi, %ecx
    0000008c: 	leal	(,%rcx,8), %eax
    00000093: 	subl	%ecx, %eax
    00000095: 	movl	%edi, %ecx
    00000097: 	subl	%esi, %ecx
    00000099: 	addl	%ecx, %eax
    0000009b: 	subl	%edx, %eax
    0000009d: 	subl	%edx, %eax
    0000009f: 	subl	%edx, %eax
    000000a1: 	subl	%edx, %eax
    000000a3: 	subl	%edx, %eax
    000000a5: 	subl	%edx, %eax
    000000a7: 	subl	%edx, %eax
    000000a9: 	cmpl	$0x1, %r14d
    000000ad: 	jle	.Ltmp1522 # Offset: 173
    000000b3: 	cmpl	$0x2, 0xc(%rsp)
    000000b8: 	jbe	.Ltmp1523 # Offset: 184
    000000be: 	movd	%ebp, %xmm7
    000000c2: 	movq	%rbx, %rdx
    000000c5: 	pxor	%xmm2, %xmm2
    000000c9: 	pshufd	$0x0, %xmm7, %xmm4
    000000ce: 	nop # Size: 2
.Ltmp1524:
    000000d0: 	movdqu	(%rdx), %xmm5
    000000d4: 	movdqu	0x4(%rdx), %xmm0
    000000d9: 	addq	$0x10, %rdx
    000000dd: 	movdqu	-0xc(%rdx), %xmm1
    000000e2: 	paddd	%xmm5, %xmm0
    000000e6: 	paddd	%xmm4, %xmm0
    000000ea: 	pslld	$0x1, %xmm0
    000000ef: 	paddd	%xmm0, %xmm1
    000000f3: 	paddd	%xmm5, %xmm0
    000000f7: 	movdqa	%xmm1, %xmm3
    000000fb: 	pslld	$0x3, %xmm0
    00000100: 	paddd	%xmm1, %xmm3
    00000104: 	psubd	%xmm1, %xmm0
    00000108: 	psubd	%xmm3, %xmm0
    0000010c: 	paddd	%xmm1, %xmm3
    00000110: 	pslld	$0x1, %xmm1
    00000115: 	psubd	%xmm3, %xmm0
    00000119: 	psubd	%xmm1, %xmm2
    0000011d: 	paddd	%xmm0, %xmm2
    00000121: 	cmpq	%rdx, %r12
    00000124: 	jne	.Ltmp1524 # Offset: 292
    00000126: 	movdqa	%xmm2, %xmm0
    0000012a: 	psrldq	$0x8, %xmm0
    0000012f: 	paddd	%xmm0, %xmm2
    00000133: 	movdqa	%xmm2, %xmm0
    00000137: 	psrldq	$0x4, %xmm0
    0000013c: 	paddd	%xmm0, %xmm2
    00000140: 	movd	%xmm2, %edx
    00000144: 	addl	%edx, %eax
    00000146: 	cmpl	%r8d, %r15d
    00000149: 	je	.Ltmp1522 # Offset: 329
    0000014f: 	movl	0x10(%rsp), %edx
    00000153: 	movl	%r15d, %r9d
.Ltmp1535:
    00000156: 	movl	%r14d, %r11d
    00000159: 	subl	%r9d, %r11d
    0000015c: 	leal	-0x1(%r11), %ecx
    00000160: 	cmpl	$0x2, %r11d
    00000164: 	je	.Ltmp1525 # Offset: 356
    00000166: 	movq	(%rbx,%r9,4), %xmm0
    0000016c: 	movd	%ebp, %xmm7
    00000170: 	movq	0x4(%rbx,%r9,4), %xmm1
    00000177: 	pshufd	$0xe0, %xmm7, %xmm2
    0000017c: 	paddd	%xmm0, %xmm2
    00000180: 	paddd	%xmm1, %xmm2
    00000184: 	pslld	$0x1, %xmm2
    00000189: 	paddd	%xmm2, %xmm1
    0000018d: 	paddd	%xmm2, %xmm0
    00000191: 	movdqa	%xmm1, %xmm3
    00000195: 	pslld	$0x3, %xmm0
    0000019a: 	movdqa	%xmm1, %xmm2
    0000019e: 	paddd	%xmm1, %xmm3
    000001a2: 	psubd	%xmm1, %xmm0
    000001a6: 	pslld	$0x1, %xmm2
    000001ab: 	paddd	%xmm2, %xmm1
    000001af: 	psubd	%xmm3, %xmm0
    000001b3: 	psubd	%xmm3, %xmm0
    000001b7: 	psubd	%xmm1, %xmm0
    000001bb: 	movd	%xmm0, %r11d
    000001c0: 	pshufd	$0xe5, %xmm0, %xmm7
    000001c5: 	movd	%xmm7, %r9d
    000001ca: 	addl	%r11d, %r9d
    000001cd: 	addl	%r9d, %eax
    000001d0: 	movl	%ecx, %r9d
    000001d3: 	andl	$-0x2, %r9d
    000001d7: 	addl	%r9d, %edx
    000001da: 	cmpl	%ecx, %r9d
    000001dd: 	je	.Ltmp1522 # Offset: 477
.Ltmp1525:
    000001df: 	movslq	%edx, %rdx
    000001e2: 	movl	-0x4(%rbx,%rdx,4), %r9d
    000001e7: 	movl	(%rbx,%rdx,4), %edx
    000001ea: 	leal	(%rbp,%rdx), %ecx
    000001ee: 	addl	%r9d, %ecx
    000001f1: 	addl	%ecx, %ecx
    000001f3: 	addl	%ecx, %edx
    000001f5: 	addl	%r9d, %ecx
    000001f8: 	leal	(%rax,%rcx,8), %eax
    000001fb: 	subl	%edx, %eax
    000001fd: 	subl	%edx, %eax
    000001ff: 	subl	%edx, %eax
    00000201: 	subl	%edx, %eax
    00000203: 	subl	%edx, %eax
    00000205: 	subl	%edx, %eax
    00000207: 	addl	%edx, %edx
    00000209: 	subl	%edx, %eax
.Ltmp1522:
    0000020b: 	testl	%eax, %eax
    0000020d: 	jne	.Ltmp1526 # Offset: 525
    00000213: 	addl	$0x1, %r13d
    00000217: 	cmpl	%r10d, %r13d
    0000021a: 	jl	.Ltmp1527 # Offset: 538
.Ltmp1521:
    00000220: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000227: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000022e: 	subq	$0x20, %rax
    00000232: 	cmpq	%rax, %rbx
    00000235: 	je	.Ltmp1528 # Offset: 565
    0000023b: 	movq	0x18(%rsp), %rax
    00000240: 	leaq	0x10(%rbx), %rdi
    00000244: 	movq	%rdi, (%rbx)
    00000247: 	movq	(%rax), %rbp
    0000024a: 	movq	0x8(%rax), %r12
    0000024e: 	movq	%rbp, %rax
    00000251: 	addq	%r12, %rax
    00000254: 	je	.Ltmp1529 # Offset: 596
    00000256: 	testq	%rbp, %rbp
    00000259: 	je	.Ltmp1530 # Offset: 601
.Ltmp1529:
    0000025f: 	movq	%r12, 0x20(%rsp)
    00000264: 	cmpq	$0xf, %r12
    00000268: 	ja	.Ltmp1531 # Offset: 616
    0000026e: 	cmpq	$0x1, %r12
    00000272: 	jne	.Ltmp1532 # Offset: 626
    00000278: 	movzbl	(%rbp), %eax
    0000027c: 	movb	%al, 0x10(%rbx)
.Ltmp1536:
    0000027f: 	movq	%r12, 0x8(%rbx)
    00000283: 	movb	$0x0, (%rdi,%r12)
    00000288: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000028f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000296: 	addq	$0x20, %rax
    0000029a: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002a1: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000002a8: 	je	.Ltmp1533 # Offset: 680
.Ltmp1537:
    000002ae: 	movq	-0x20(%rax), %rbp
    000002b2: 	callq	clock@PLT # Offset: 690
    000002b7: 	movq	%rax, end_time(%rip)
    000002be: 	movq	0x28(%rsp), %rdx
    000002c3: 	subq	%fs:0x28, %rdx
    000002cc: 	jne	.Ltmp1534 # Offset: 716
    000002d2: 	subq	start_time(%rip), %rax
    000002d9: 	pxor	%xmm0, %xmm0
    000002dd: 	movq	%rbp, %rdi
    000002e0: 	cvtsi2sd	%rax, %xmm0
    000002e5: 	divsd	DATAat0x4d640(%rip), %xmm0
    000002ed: 	addq	$0x38, %rsp
    000002f1: 	popq	%rbx
    000002f2: 	popq	%rbp
    000002f3: 	popq	%r12
    000002f5: 	popq	%r13
    000002f7: 	popq	%r14
    000002f9: 	popq	%r15
    000002fb: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 763
.Ltmp1526:
    00000300: 	movq	0x18(%rsp), %rax
    00000305: 	leaq	DATAat0x4d004(%rip), %rsi
    0000030c: 	movl	$0x1, %edi
    00000311: 	movl	%r8d, 0x14(%rsp)
    00000316: 	addl	$0x1, %r13d
    0000031a: 	movq	(%rax), %rdx
    0000031d: 	xorl	%eax, %eax
    0000031f: 	callq	__printf_chk@PLT # Offset: 799
    00000324: 	movl	iterations(%rip), %r10d
    0000032b: 	cmpl	%r10d, %r13d
    0000032e: 	jge	.Ltmp1521 # Offset: 814
    00000334: 	movl	(%rbx), %edi
    00000336: 	movl	0x4(%rbx), %esi
    00000339: 	movl	0x14(%rsp), %r8d
    0000033e: 	jmp	.Ltmp1527 # Offset: 830
.Ltmp1523:
    00000343: 	xorl	%r9d, %r9d
    00000346: 	movl	$0x1, %edx
    0000034b: 	jmp	.Ltmp1535 # Offset: 843
.Ltmp1531:
    00000350: 	movq	%rbx, %rdi
    00000353: 	leaq	0x20(%rsp), %rsi
    00000358: 	xorl	%edx, %edx
    0000035a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 858
    0000035f: 	movq	%rax, (%rbx)
    00000362: 	movq	%rax, %rdi
    00000365: 	movq	0x20(%rsp), %rax
    0000036a: 	movq	%rax, 0x10(%rbx)
.Ltmp1538:
    0000036e: 	movq	%r12, %rdx
    00000371: 	movq	%rbp, %rsi
    00000374: 	callq	memcpy@PLT # Offset: 884
    00000379: 	movq	0x20(%rsp), %r12
    0000037e: 	movq	(%rbx), %rdi
    00000381: 	jmp	.Ltmp1536 # Offset: 897
.Ltmp1528:
    00000386: 	movq	0x18(%rsp), %rsi
    0000038b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000392: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 914
    00000397: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000039e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000003a5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003ac: 	jne	.Ltmp1537 # Offset: 940
.Ltmp1533:
    000003b2: 	movq	-0x8(%rdx), %rax
    000003b6: 	addq	$0x200, %rax
    000003bc: 	jmp	.Ltmp1537 # Offset: 956
.Ltmp1532:
    000003c1: 	testq	%r12, %r12
    000003c4: 	je	.Ltmp1536 # Offset: 964
    000003ca: 	jmp	.Ltmp1538 # Offset: 970
.Ltmp1534:
    000003cc: 	callq	__stack_chk_fail@PLT # Offset: 972
.Ltmp1530:
    000003d1: 	leaq	DATAat0x4d018(%rip), %rdi
    000003d8: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 984
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_CSE8_add_inlineIj14custom_cse_addIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSE8Ia14custom_cse_mixIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z9test_CSE8Ia14custom_cse_mixIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z9test_CSE8Ia14custom_cse_mixIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/simple_types_cse.cpp/1
  Number      : 130
  State       : disassembled
  Address     : 0x19000
  Size        : 0x2ba
  MaxSize     : 0x2c0
  Offset      : 0x19000
  Section     : .text
  Orc Section : .local.text._Z9test_CSE8Ia14custom_cse_mixIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0129:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	movq	%rdi, %r14
    00000007: 	pushq	%r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	movl	%esi, %ebp
    0000000e: 	pushq	%rbx
    0000000f: 	subq	$0x28, %rsp
    00000013: 	movq	%rdx, 0x8(%rsp)
    00000018: 	movq	%fs:0x28, %rax
    00000021: 	movq	%rax, 0x18(%rsp)
    00000026: 	xorl	%eax, %eax
    00000028: 	callq	clock@PLT # Offset: 40
    0000002d: 	movl	iterations(%rip), %r11d
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	testl	%r11d, %r11d
    0000003e: 	jle	.Ltmp1539 # Offset: 62
    00000044: 	leaq	0x1(%r14), %rax
    00000048: 	movzbl	(%r14), %r15d
    0000004c: 	movsbl	0x1(%r14), %r10d
    00000051: 	xorl	%r13d, %r13d
    00000054: 	movq	%rax, (%rsp)
    00000058: 	movsbl	%bpl, %ebx
    0000005c: 	leaq	0x1f40(%r14), %r12
    00000063: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1542:
    00000068: 	movsbl	%r15b, %esi
    0000006c: 	movl	%ebp, %eax
    0000006e: 	movl	%esi, %edi
    00000070: 	subl	%r10d, %edi
    00000073: 	imull	%edi, %eax
    00000076: 	movl	%eax, %ecx
    00000078: 	movl	%esi, %eax
    0000007a: 	cltd
    0000007b: 	idivl	%ebx
    0000007d: 	addl	%ecx, %eax
    0000007f: 	movsbl	%al, %eax
    00000082: 	leal	(%r10,%rax,2), %edx
    00000086: 	leal	(%rsi,%rax,2), %eax
    00000089: 	leal	(,%rax,8), %ecx
    00000090: 	subl	%eax, %ecx
    00000092: 	subl	%edx, %ecx
    00000094: 	addl	%edi, %ecx
    00000096: 	movq	(%rsp), %rdi
    0000009a: 	subl	%edx, %ecx
    0000009c: 	subl	%edx, %ecx
    0000009e: 	subl	%edx, %ecx
    000000a0: 	subl	%edx, %ecx
    000000a2: 	subl	%edx, %ecx
    000000a4: 	subl	%edx, %ecx
    000000a6: 	movl	%ecx, %r8d
    000000a9: 	nopl	(%rax) # Size: 7
.Ltmp1540:
    000000b0: 	movl	%esi, %ecx
    000000b2: 	movsbl	(%rdi), %esi
    000000b5: 	addq	$0x1, %rdi
    000000b9: 	movl	%ecx, %r9d
    000000bc: 	subl	%esi, %r9d
    000000bf: 	movl	%r9d, %eax
    000000c2: 	imull	%ebp, %eax
    000000c5: 	movl	%eax, %r9d
    000000c8: 	movl	%ecx, %eax
    000000ca: 	cltd
    000000cb: 	idivl	%ebx
    000000cd: 	addl	%r9d, %eax
    000000d0: 	movsbl	%al, %eax
    000000d3: 	leal	(%rcx,%rax,2), %ecx
    000000d6: 	leal	(%rsi,%rax,2), %edx
    000000d9: 	leal	(%r8,%rcx,8), %ecx
    000000dd: 	subl	%edx, %ecx
    000000df: 	subl	%edx, %ecx
    000000e1: 	subl	%edx, %ecx
    000000e3: 	subl	%edx, %ecx
    000000e5: 	subl	%edx, %ecx
    000000e7: 	subl	%edx, %ecx
    000000e9: 	subl	%edx, %ecx
    000000eb: 	subl	%edx, %ecx
    000000ed: 	movl	%ecx, %r8d
    000000f0: 	cmpq	%r12, %rdi
    000000f3: 	jne	.Ltmp1540 # Offset: 243
    000000f5: 	testb	%cl, %cl
    000000f7: 	jne	.Ltmp1541 # Offset: 247
    000000fd: 	addl	$0x1, %r13d
    00000101: 	cmpl	%r11d, %r13d
    00000104: 	jl	.Ltmp1542 # Offset: 260
.Ltmp1539:
    0000010a: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000111: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000118: 	subq	$0x20, %rax
    0000011c: 	cmpq	%rax, %rbx
    0000011f: 	je	.Ltmp1543 # Offset: 287
    00000125: 	movq	0x8(%rsp), %rax
    0000012a: 	leaq	0x10(%rbx), %rdi
    0000012e: 	movq	%rdi, (%rbx)
    00000131: 	movq	(%rax), %rbp
    00000134: 	movq	0x8(%rax), %r12
    00000138: 	movq	%rbp, %rax
    0000013b: 	addq	%r12, %rax
    0000013e: 	je	.Ltmp1544 # Offset: 318
    00000140: 	testq	%rbp, %rbp
    00000143: 	je	.Ltmp1545 # Offset: 323
.Ltmp1544:
    00000149: 	movq	%r12, 0x10(%rsp)
    0000014e: 	cmpq	$0xf, %r12
    00000152: 	ja	.Ltmp1546 # Offset: 338
    00000158: 	cmpq	$0x1, %r12
    0000015c: 	jne	.Ltmp1547 # Offset: 348
    00000162: 	movzbl	(%rbp), %eax
    00000166: 	movb	%al, 0x10(%rbx)
.Ltmp1550:
    00000169: 	movq	%r12, 0x8(%rbx)
    0000016d: 	movb	$0x0, (%rdi,%r12)
    00000172: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000179: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000180: 	addq	$0x20, %rax
    00000184: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000018b: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000192: 	je	.Ltmp1548 # Offset: 402
.Ltmp1551:
    00000198: 	movq	-0x20(%rax), %rbp
    0000019c: 	callq	clock@PLT # Offset: 412
    000001a1: 	movq	%rax, end_time(%rip)
    000001a8: 	movq	0x18(%rsp), %rdx
    000001ad: 	subq	%fs:0x28, %rdx
    000001b6: 	jne	.Ltmp1549 # Offset: 438
    000001bc: 	subq	start_time(%rip), %rax
    000001c3: 	pxor	%xmm0, %xmm0
    000001c7: 	movq	%rbp, %rdi
    000001ca: 	cvtsi2sd	%rax, %xmm0
    000001cf: 	divsd	DATAat0x4d640(%rip), %xmm0
    000001d7: 	addq	$0x28, %rsp
    000001db: 	popq	%rbx
    000001dc: 	popq	%rbp
    000001dd: 	popq	%r12
    000001df: 	popq	%r13
    000001e1: 	popq	%r14
    000001e3: 	popq	%r15
    000001e5: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 485
    000001ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1541:
    000001f0: 	movq	0x8(%rsp), %rax
    000001f5: 	leaq	DATAat0x4d004(%rip), %rsi
    000001fc: 	movl	$0x1, %edi
    00000201: 	addl	$0x1, %r13d
    00000205: 	movq	(%rax), %rdx
    00000208: 	xorl	%eax, %eax
    0000020a: 	callq	__printf_chk@PLT # Offset: 522
    0000020f: 	movl	iterations(%rip), %r11d
    00000216: 	cmpl	%r11d, %r13d
    00000219: 	jge	.Ltmp1539 # Offset: 537
    0000021f: 	movzbl	(%r14), %r15d
    00000223: 	movsbl	0x1(%r14), %r10d
    00000228: 	jmp	.Ltmp1542 # Offset: 552
.Ltmp1546:
    0000022d: 	movq	%rbx, %rdi
    00000230: 	leaq	0x10(%rsp), %rsi
    00000235: 	xorl	%edx, %edx
    00000237: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 567
    0000023c: 	movq	%rax, (%rbx)
    0000023f: 	movq	%rax, %rdi
    00000242: 	movq	0x10(%rsp), %rax
    00000247: 	movq	%rax, 0x10(%rbx)
.Ltmp1552:
    0000024b: 	movq	%r12, %rdx
    0000024e: 	movq	%rbp, %rsi
    00000251: 	callq	memcpy@PLT # Offset: 593
    00000256: 	movq	0x10(%rsp), %r12
    0000025b: 	movq	(%rbx), %rdi
    0000025e: 	jmp	.Ltmp1550 # Offset: 606
.Ltmp1543:
    00000263: 	movq	0x8(%rsp), %rsi
    00000268: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000026f: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 623
    00000274: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000027b: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000282: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000289: 	jne	.Ltmp1551 # Offset: 649
.Ltmp1548:
    0000028f: 	movq	-0x8(%rdx), %rax
    00000293: 	addq	$0x200, %rax
    00000299: 	jmp	.Ltmp1551 # Offset: 665
.Ltmp1547:
    0000029e: 	testq	%r12, %r12
    000002a1: 	je	.Ltmp1550 # Offset: 673
    000002a7: 	jmp	.Ltmp1552 # Offset: 679
.Ltmp1549:
    000002a9: 	callq	__stack_chk_fail@PLT # Offset: 681
.Ltmp1545:
    000002ae: 	leaq	DATAat0x4d018(%rip), %rdi
    000002b5: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 693
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE8Ia14custom_cse_mixIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z9test_CSE8Ij14custom_cse_mixIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 131
  State       : disassembled
  Address     : 0x192c0
  Size        : 0x2a1
  MaxSize     : 0x2b0
  Offset      : 0x192c0
  Section     : .text
  Orc Section : .local.text._Z9test_CSE8Ij14custom_cse_mixIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0130:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%esi, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movl	%edx, %ebx
    00000016: 	subq	$0x28, %rsp
    0000001a: 	movq	%rcx, 0x8(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x18(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r15d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r15d, %r15d
    00000045: 	jle	.Ltmp1553 # Offset: 69
    0000004b: 	leal	-0x2(%r13), %eax
    0000004f: 	xorl	%r14d, %r14d
    00000052: 	leaq	0x8(%r12,%rax,4), %rbp
.Ltmp1565:
    00000057: 	movl	(%r12), %r10d
    0000005b: 	movl	0x4(%r12), %r11d
.Ltmp1557:
    00000060: 	movl	%r10d, %eax
    00000063: 	xorl	%edx, %edx
    00000065: 	movl	%r10d, %ecx
    00000068: 	movl	%ebx, %esi
    0000006a: 	divl	%ebx
    0000006c: 	subl	%r11d, %ecx
    0000006f: 	movl	%r10d, %edi
    00000072: 	imull	%ecx, %esi
    00000075: 	addl	%esi, %eax
    00000077: 	addl	%eax, %eax
    00000079: 	leal	(%r11,%rax), %edx
    0000007d: 	addl	%r10d, %eax
    00000080: 	leal	(,%rax,8), %esi
    00000087: 	subl	%eax, %esi
    00000089: 	subl	%edx, %esi
    0000008b: 	addl	%ecx, %esi
    0000008d: 	subl	%edx, %esi
    0000008f: 	subl	%edx, %esi
    00000091: 	subl	%edx, %esi
    00000093: 	subl	%edx, %esi
    00000095: 	subl	%edx, %esi
    00000097: 	subl	%edx, %esi
    00000099: 	cmpl	$0x1, %r13d
    0000009d: 	jle	.Ltmp1554 # Offset: 157
    0000009f: 	leaq	0x4(%r12), %r8
    000000a4: 	nopl	(%rax) # Size: 4
.Ltmp1555:
    000000a8: 	movl	%edi, %ecx
    000000aa: 	xorl	%edx, %edx
    000000ac: 	movl	(%r8), %edi
    000000af: 	addq	$0x4, %r8
    000000b3: 	movl	%ecx, %eax
    000000b5: 	movl	%ecx, %r9d
    000000b8: 	divl	%ebx
    000000ba: 	subl	%edi, %r9d
    000000bd: 	imull	%ebx, %r9d
    000000c1: 	addl	%r9d, %eax
    000000c4: 	addl	%eax, %eax
    000000c6: 	leal	(%rdi,%rax), %edx
    000000c9: 	addl	%ecx, %eax
    000000cb: 	shll	$0x3, %eax
    000000ce: 	subl	%edx, %eax
    000000d0: 	subl	%edx, %eax
    000000d2: 	subl	%edx, %eax
    000000d4: 	subl	%edx, %eax
    000000d6: 	subl	%edx, %eax
    000000d8: 	subl	%edx, %eax
    000000da: 	addl	%edx, %edx
    000000dc: 	subl	%edx, %eax
    000000de: 	addl	%eax, %esi
    000000e0: 	cmpq	%r8, %rbp
    000000e3: 	jne	.Ltmp1555 # Offset: 227
.Ltmp1554:
    000000e5: 	testl	%esi, %esi
    000000e7: 	jne	.Ltmp1556 # Offset: 231
    000000ed: 	addl	$0x1, %r14d
    000000f1: 	cmpl	%r15d, %r14d
    000000f4: 	jl	.Ltmp1557 # Offset: 244
.Ltmp1553:
    000000fa: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000101: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000108: 	subq	$0x20, %rax
    0000010c: 	cmpq	%rax, %rbx
    0000010f: 	je	.Ltmp1558 # Offset: 271
    00000115: 	movq	0x8(%rsp), %rax
    0000011a: 	leaq	0x10(%rbx), %rdi
    0000011e: 	movq	%rdi, (%rbx)
    00000121: 	movq	(%rax), %rbp
    00000124: 	movq	0x8(%rax), %r12
    00000128: 	movq	%rbp, %rax
    0000012b: 	addq	%r12, %rax
    0000012e: 	je	.Ltmp1559 # Offset: 302
    00000130: 	testq	%rbp, %rbp
    00000133: 	je	.Ltmp1560 # Offset: 307
.Ltmp1559:
    00000139: 	movq	%r12, 0x10(%rsp)
    0000013e: 	cmpq	$0xf, %r12
    00000142: 	ja	.Ltmp1561 # Offset: 322
    00000148: 	cmpq	$0x1, %r12
    0000014c: 	jne	.Ltmp1562 # Offset: 332
    00000152: 	movzbl	(%rbp), %eax
    00000156: 	movb	%al, 0x10(%rbx)
.Ltmp1566:
    00000159: 	movq	%r12, 0x8(%rbx)
    0000015d: 	movb	$0x0, (%rdi,%r12)
    00000162: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000169: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000170: 	addq	$0x20, %rax
    00000174: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000017b: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000182: 	je	.Ltmp1563 # Offset: 386
.Ltmp1567:
    00000188: 	movq	-0x20(%rax), %rbp
    0000018c: 	callq	clock@PLT # Offset: 396
    00000191: 	movq	%rax, end_time(%rip)
    00000198: 	movq	0x18(%rsp), %rdx
    0000019d: 	subq	%fs:0x28, %rdx
    000001a6: 	jne	.Ltmp1564 # Offset: 422
    000001ac: 	subq	start_time(%rip), %rax
    000001b3: 	pxor	%xmm0, %xmm0
    000001b7: 	movq	%rbp, %rdi
    000001ba: 	cvtsi2sd	%rax, %xmm0
    000001bf: 	divsd	DATAat0x4d640(%rip), %xmm0
    000001c7: 	addq	$0x28, %rsp
    000001cb: 	popq	%rbx
    000001cc: 	popq	%rbp
    000001cd: 	popq	%r12
    000001cf: 	popq	%r13
    000001d1: 	popq	%r14
    000001d3: 	popq	%r15
    000001d5: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 469
    000001da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1556:
    000001e0: 	movq	0x8(%rsp), %rax
    000001e5: 	leaq	DATAat0x4d004(%rip), %rsi
    000001ec: 	movl	$0x1, %edi
    000001f1: 	addl	$0x1, %r14d
    000001f5: 	movq	(%rax), %rdx
    000001f8: 	xorl	%eax, %eax
    000001fa: 	callq	__printf_chk@PLT # Offset: 506
    000001ff: 	movl	iterations(%rip), %r15d
    00000206: 	cmpl	%r15d, %r14d
    00000209: 	jl	.Ltmp1565 # Offset: 521
    0000020f: 	jmp	.Ltmp1553 # Offset: 527
.Ltmp1561:
    00000214: 	movq	%rbx, %rdi
    00000217: 	leaq	0x10(%rsp), %rsi
    0000021c: 	xorl	%edx, %edx
    0000021e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 542
    00000223: 	movq	%rax, (%rbx)
    00000226: 	movq	%rax, %rdi
    00000229: 	movq	0x10(%rsp), %rax
    0000022e: 	movq	%rax, 0x10(%rbx)
.Ltmp1568:
    00000232: 	movq	%r12, %rdx
    00000235: 	movq	%rbp, %rsi
    00000238: 	callq	memcpy@PLT # Offset: 568
    0000023d: 	movq	0x10(%rsp), %r12
    00000242: 	movq	(%rbx), %rdi
    00000245: 	jmp	.Ltmp1566 # Offset: 581
.Ltmp1558:
    0000024a: 	movq	0x8(%rsp), %rsi
    0000024f: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000256: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 598
    0000025b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000262: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000269: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000270: 	jne	.Ltmp1567 # Offset: 624
.Ltmp1563:
    00000276: 	movq	-0x8(%rdx), %rax
    0000027a: 	addq	$0x200, %rax
    00000280: 	jmp	.Ltmp1567 # Offset: 640
.Ltmp1562:
    00000285: 	testq	%r12, %r12
    00000288: 	je	.Ltmp1566 # Offset: 648
    0000028e: 	jmp	.Ltmp1568 # Offset: 654
.Ltmp1564:
    00000290: 	callq	__stack_chk_fail@PLT # Offset: 656
.Ltmp1560:
    00000295: 	leaq	DATAat0x4d018(%rip), %rdi
    0000029c: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 668
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE8Ij14custom_cse_mixIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSE8Ih14custom_cse_mixIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 132
  State       : disassembled
  Address     : 0x19570
  Size        : 0x2d4
  MaxSize     : 0x2e0
  Offset      : 0x19570
  Section     : .text
  Orc Section : .local.text._Z9test_CSE8Ih14custom_cse_mixIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0131:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%esi, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movl	%edx, %ebx
    00000016: 	subq	$0x28, %rsp
    0000001a: 	movq	%rcx, 0x8(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x18(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r11d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r11d, %r11d
    00000045: 	jle	.Ltmp1569 # Offset: 69
    0000004b: 	leal	-0x2(%r13), %eax
    0000004f: 	movzbl	(%r12), %r9d
    00000054: 	movzbl	0x1(%r12), %r10d
    0000005a: 	xorl	%r14d, %r14d
    0000005d: 	leaq	0x2(%r12,%rax), %rbp
    00000062: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1573:
    00000068: 	movl	%r9d, %r8d
    0000006b: 	movl	%ebx, %eax
    0000006d: 	movzbl	%r9b, %edi
    00000071: 	movl	%r9d, %ecx
    00000074: 	subl	%r10d, %r8d
    00000077: 	imull	%r8d, %eax
    0000007b: 	movl	%eax, %edx
    0000007d: 	movzbl	%r9b, %eax
    00000081: 	divb	%bl
    00000083: 	addl	%edx, %eax
    00000085: 	movzbl	%r10b, %edx
    00000089: 	movzbl	%al, %eax
    0000008c: 	leal	(%rdx,%rax,2), %esi
    0000008f: 	leal	(%rdi,%rax,2), %eax
    00000092: 	leal	(,%rax,8), %edx
    00000099: 	subl	%eax, %edx
    0000009b: 	subl	%esi, %edx
    0000009d: 	addl	%r8d, %edx
    000000a0: 	subl	%esi, %edx
    000000a2: 	subl	%esi, %edx
    000000a4: 	subl	%esi, %edx
    000000a6: 	subl	%esi, %edx
    000000a8: 	subl	%esi, %edx
    000000aa: 	subl	%esi, %edx
    000000ac: 	cmpl	$0x1, %r13d
    000000b0: 	jle	.Ltmp1570 # Offset: 176
    000000b2: 	leaq	0x1(%r12), %rsi
    000000b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1571:
    000000c0: 	movl	%ecx, %r8d
    000000c3: 	movzbl	(%rsi), %ecx
    000000c6: 	movl	%edi, %r15d
    000000c9: 	addq	$0x1, %rsi
    000000cd: 	movl	%r8d, %eax
    000000d0: 	subl	%ecx, %eax
    000000d2: 	imull	%ebx, %eax
    000000d5: 	movl	%eax, %edi
    000000d7: 	movzbl	%r8b, %eax
    000000db: 	divb	%bl
    000000dd: 	addl	%eax, %edi
    000000df: 	movzbl	%dil, %eax
    000000e3: 	movzbl	%cl, %edi
    000000e6: 	leal	(%rdi,%rax,2), %r8d
    000000ea: 	leal	(%r15,%rax,2), %eax
    000000ee: 	shll	$0x3, %eax
    000000f1: 	subl	%r8d, %eax
    000000f4: 	subl	%r8d, %eax
    000000f7: 	subl	%r8d, %eax
    000000fa: 	subl	%r8d, %eax
    000000fd: 	subl	%r8d, %eax
    00000100: 	subl	%r8d, %eax
    00000103: 	addl	%r8d, %r8d
    00000106: 	subl	%r8d, %eax
    00000109: 	addl	%eax, %edx
    0000010b: 	cmpq	%rbp, %rsi
    0000010e: 	jne	.Ltmp1571 # Offset: 270
.Ltmp1570:
    00000110: 	testb	%dl, %dl
    00000112: 	jne	.Ltmp1572 # Offset: 274
    00000118: 	addl	$0x1, %r14d
    0000011c: 	cmpl	%r11d, %r14d
    0000011f: 	jl	.Ltmp1573 # Offset: 287
.Ltmp1569:
    00000125: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000012c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000133: 	subq	$0x20, %rax
    00000137: 	cmpq	%rax, %rbx
    0000013a: 	je	.Ltmp1574 # Offset: 314
    00000140: 	movq	0x8(%rsp), %rax
    00000145: 	leaq	0x10(%rbx), %rdi
    00000149: 	movq	%rdi, (%rbx)
    0000014c: 	movq	(%rax), %rbp
    0000014f: 	movq	0x8(%rax), %r12
    00000153: 	movq	%rbp, %rax
    00000156: 	addq	%r12, %rax
    00000159: 	je	.Ltmp1575 # Offset: 345
    0000015b: 	testq	%rbp, %rbp
    0000015e: 	je	.Ltmp1576 # Offset: 350
.Ltmp1575:
    00000164: 	movq	%r12, 0x10(%rsp)
    00000169: 	cmpq	$0xf, %r12
    0000016d: 	ja	.Ltmp1577 # Offset: 365
    00000173: 	cmpq	$0x1, %r12
    00000177: 	jne	.Ltmp1578 # Offset: 375
    0000017d: 	movzbl	(%rbp), %eax
    00000181: 	movb	%al, 0x10(%rbx)
.Ltmp1581:
    00000184: 	movq	%r12, 0x8(%rbx)
    00000188: 	movb	$0x0, (%rdi,%r12)
    0000018d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000194: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000019b: 	addq	$0x20, %rax
    0000019f: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001a6: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000001ad: 	je	.Ltmp1579 # Offset: 429
.Ltmp1582:
    000001b3: 	movq	-0x20(%rax), %rbp
    000001b7: 	callq	clock@PLT # Offset: 439
    000001bc: 	movq	%rax, end_time(%rip)
    000001c3: 	movq	0x18(%rsp), %rdx
    000001c8: 	subq	%fs:0x28, %rdx
    000001d1: 	jne	.Ltmp1580 # Offset: 465
    000001d7: 	subq	start_time(%rip), %rax
    000001de: 	pxor	%xmm0, %xmm0
    000001e2: 	movq	%rbp, %rdi
    000001e5: 	cvtsi2sd	%rax, %xmm0
    000001ea: 	divsd	DATAat0x4d640(%rip), %xmm0
    000001f2: 	addq	$0x28, %rsp
    000001f6: 	popq	%rbx
    000001f7: 	popq	%rbp
    000001f8: 	popq	%r12
    000001fa: 	popq	%r13
    000001fc: 	popq	%r14
    000001fe: 	popq	%r15
    00000200: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 512
    00000205: 	nopl	(%rax) # Size: 3
.Ltmp1572:
    00000208: 	movq	0x8(%rsp), %rax
    0000020d: 	leaq	DATAat0x4d004(%rip), %rsi
    00000214: 	movl	$0x1, %edi
    00000219: 	addl	$0x1, %r14d
    0000021d: 	movq	(%rax), %rdx
    00000220: 	xorl	%eax, %eax
    00000222: 	callq	__printf_chk@PLT # Offset: 546
    00000227: 	movl	iterations(%rip), %r11d
    0000022e: 	cmpl	%r11d, %r14d
    00000231: 	jge	.Ltmp1569 # Offset: 561
    00000237: 	movzbl	(%r12), %r9d
    0000023c: 	movzbl	0x1(%r12), %r10d
    00000242: 	jmp	.Ltmp1573 # Offset: 578
.Ltmp1577:
    00000247: 	movq	%rbx, %rdi
    0000024a: 	leaq	0x10(%rsp), %rsi
    0000024f: 	xorl	%edx, %edx
    00000251: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 593
    00000256: 	movq	%rax, (%rbx)
    00000259: 	movq	%rax, %rdi
    0000025c: 	movq	0x10(%rsp), %rax
    00000261: 	movq	%rax, 0x10(%rbx)
.Ltmp1583:
    00000265: 	movq	%r12, %rdx
    00000268: 	movq	%rbp, %rsi
    0000026b: 	callq	memcpy@PLT # Offset: 619
    00000270: 	movq	0x10(%rsp), %r12
    00000275: 	movq	(%rbx), %rdi
    00000278: 	jmp	.Ltmp1581 # Offset: 632
.Ltmp1574:
    0000027d: 	movq	0x8(%rsp), %rsi
    00000282: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000289: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 649
    0000028e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000295: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000029c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002a3: 	jne	.Ltmp1582 # Offset: 675
.Ltmp1579:
    000002a9: 	movq	-0x8(%rdx), %rax
    000002ad: 	addq	$0x200, %rax
    000002b3: 	jmp	.Ltmp1582 # Offset: 691
.Ltmp1578:
    000002b8: 	testq	%r12, %r12
    000002bb: 	je	.Ltmp1581 # Offset: 699
    000002c1: 	jmp	.Ltmp1583 # Offset: 705
.Ltmp1580:
    000002c3: 	callq	__stack_chk_fail@PLT # Offset: 707
.Ltmp1576:
    000002c8: 	leaq	DATAat0x4d018(%rip), %rdi
    000002cf: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 719
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE8Ih14custom_cse_mixIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSE8Ii14custom_cse_mixIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 133
  State       : disassembled
  Address     : 0x19850
  Size        : 0x2b1
  MaxSize     : 0x2c0
  Offset      : 0x19850
  Section     : .text
  Orc Section : .local.text._Z9test_CSE8Ii14custom_cse_mixIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0132:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%esi, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movl	%edx, %ebx
    00000016: 	subq	$0x28, %rsp
    0000001a: 	movq	%rcx, 0x8(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x18(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r15d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r15d, %r15d
    00000045: 	jle	.Ltmp1584 # Offset: 69
    0000004b: 	leal	-0x2(%r13), %eax
    0000004f: 	xorl	%r14d, %r14d
    00000052: 	leaq	0x8(%r12,%rax,4), %rbp
.Ltmp1596:
    00000057: 	movl	(%r12), %r10d
    0000005b: 	movl	0x4(%r12), %r11d
.Ltmp1588:
    00000060: 	movl	%r10d, %eax
    00000063: 	movl	%r10d, %esi
    00000066: 	movl	%ebx, %edi
    00000068: 	movl	%r10d, %ecx
    0000006b: 	cltd
    0000006c: 	subl	%r11d, %esi
    0000006f: 	idivl	%ebx
    00000071: 	imull	%esi, %edi
    00000074: 	addl	%edi, %eax
    00000076: 	leal	(%r10,%rax,2), %r8d
    0000007a: 	leal	(%r11,%rax,2), %edi
    0000007e: 	leal	(%r8,%rsi), %eax
    00000082: 	subl	%edi, %eax
    00000084: 	addl	%r8d, %eax
    00000087: 	subl	%edi, %eax
    00000089: 	addl	%r8d, %eax
    0000008c: 	subl	%edi, %eax
    0000008e: 	addl	%r8d, %eax
    00000091: 	subl	%edi, %eax
    00000093: 	addl	%r8d, %eax
    00000096: 	subl	%edi, %eax
    00000098: 	addl	%r8d, %eax
    0000009b: 	subl	%edi, %eax
    0000009d: 	addl	%eax, %r8d
    000000a0: 	subl	%edi, %r8d
    000000a3: 	cmpl	$0x1, %r13d
    000000a7: 	jle	.Ltmp1585 # Offset: 167
    000000a9: 	leaq	0x4(%r12), %rsi
    000000ae: 	nop # Size: 2
.Ltmp1586:
    000000b0: 	movl	%ecx, %r9d
    000000b3: 	movl	(%rsi), %ecx
    000000b5: 	addq	$0x4, %rsi
    000000b9: 	movl	%r9d, %eax
    000000bc: 	movl	%r9d, %edi
    000000bf: 	cltd
    000000c0: 	subl	%ecx, %edi
    000000c2: 	idivl	%ebx
    000000c4: 	imull	%ebx, %edi
    000000c7: 	addl	%eax, %edi
    000000c9: 	leal	(%r9,%rdi,2), %edx
    000000cd: 	leal	(%rcx,%rdi,2), %edi
    000000d0: 	leal	(%rdx,%r8), %eax
    000000d4: 	subl	%edi, %eax
    000000d6: 	addl	%edx, %eax
    000000d8: 	subl	%edi, %eax
    000000da: 	addl	%edx, %eax
    000000dc: 	subl	%edi, %eax
    000000de: 	addl	%edx, %eax
    000000e0: 	subl	%edi, %eax
    000000e2: 	addl	%edx, %eax
    000000e4: 	subl	%edi, %eax
    000000e6: 	addl	%edx, %eax
    000000e8: 	subl	%edi, %eax
    000000ea: 	addl	%edx, %eax
    000000ec: 	subl	%edi, %eax
    000000ee: 	addl	%eax, %edx
    000000f0: 	subl	%edi, %edx
    000000f2: 	movl	%edx, %r8d
    000000f5: 	cmpq	%rsi, %rbp
    000000f8: 	jne	.Ltmp1586 # Offset: 248
.Ltmp1585:
    000000fa: 	testl	%r8d, %r8d
    000000fd: 	jne	.Ltmp1587 # Offset: 253
    00000103: 	addl	$0x1, %r14d
    00000107: 	cmpl	%r15d, %r14d
    0000010a: 	jl	.Ltmp1588 # Offset: 266
.Ltmp1584:
    00000110: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000117: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000011e: 	subq	$0x20, %rax
    00000122: 	cmpq	%rax, %rbx
    00000125: 	je	.Ltmp1589 # Offset: 293
    0000012b: 	movq	0x8(%rsp), %rax
    00000130: 	leaq	0x10(%rbx), %rdi
    00000134: 	movq	%rdi, (%rbx)
    00000137: 	movq	(%rax), %rbp
    0000013a: 	movq	0x8(%rax), %r12
    0000013e: 	movq	%rbp, %rax
    00000141: 	addq	%r12, %rax
    00000144: 	je	.Ltmp1590 # Offset: 324
    00000146: 	testq	%rbp, %rbp
    00000149: 	je	.Ltmp1591 # Offset: 329
.Ltmp1590:
    0000014f: 	movq	%r12, 0x10(%rsp)
    00000154: 	cmpq	$0xf, %r12
    00000158: 	ja	.Ltmp1592 # Offset: 344
    0000015e: 	cmpq	$0x1, %r12
    00000162: 	jne	.Ltmp1593 # Offset: 354
    00000168: 	movzbl	(%rbp), %eax
    0000016c: 	movb	%al, 0x10(%rbx)
.Ltmp1597:
    0000016f: 	movq	%r12, 0x8(%rbx)
    00000173: 	movb	$0x0, (%rdi,%r12)
    00000178: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000017f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000186: 	addq	$0x20, %rax
    0000018a: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000191: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000198: 	je	.Ltmp1594 # Offset: 408
.Ltmp1598:
    0000019e: 	movq	-0x20(%rax), %rbp
    000001a2: 	callq	clock@PLT # Offset: 418
    000001a7: 	movq	%rax, end_time(%rip)
    000001ae: 	movq	0x18(%rsp), %rdx
    000001b3: 	subq	%fs:0x28, %rdx
    000001bc: 	jne	.Ltmp1595 # Offset: 444
    000001c2: 	subq	start_time(%rip), %rax
    000001c9: 	pxor	%xmm0, %xmm0
    000001cd: 	movq	%rbp, %rdi
    000001d0: 	cvtsi2sd	%rax, %xmm0
    000001d5: 	divsd	DATAat0x4d640(%rip), %xmm0
    000001dd: 	addq	$0x28, %rsp
    000001e1: 	popq	%rbx
    000001e2: 	popq	%rbp
    000001e3: 	popq	%r12
    000001e5: 	popq	%r13
    000001e7: 	popq	%r14
    000001e9: 	popq	%r15
    000001eb: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 491
.Ltmp1587:
    000001f0: 	movq	0x8(%rsp), %rax
    000001f5: 	leaq	DATAat0x4d004(%rip), %rsi
    000001fc: 	movl	$0x1, %edi
    00000201: 	addl	$0x1, %r14d
    00000205: 	movq	(%rax), %rdx
    00000208: 	xorl	%eax, %eax
    0000020a: 	callq	__printf_chk@PLT # Offset: 522
    0000020f: 	movl	iterations(%rip), %r15d
    00000216: 	cmpl	%r15d, %r14d
    00000219: 	jl	.Ltmp1596 # Offset: 537
    0000021f: 	jmp	.Ltmp1584 # Offset: 543
.Ltmp1592:
    00000224: 	movq	%rbx, %rdi
    00000227: 	leaq	0x10(%rsp), %rsi
    0000022c: 	xorl	%edx, %edx
    0000022e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 558
    00000233: 	movq	%rax, (%rbx)
    00000236: 	movq	%rax, %rdi
    00000239: 	movq	0x10(%rsp), %rax
    0000023e: 	movq	%rax, 0x10(%rbx)
.Ltmp1599:
    00000242: 	movq	%r12, %rdx
    00000245: 	movq	%rbp, %rsi
    00000248: 	callq	memcpy@PLT # Offset: 584
    0000024d: 	movq	0x10(%rsp), %r12
    00000252: 	movq	(%rbx), %rdi
    00000255: 	jmp	.Ltmp1597 # Offset: 597
.Ltmp1589:
    0000025a: 	movq	0x8(%rsp), %rsi
    0000025f: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000266: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 614
    0000026b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000272: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000279: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000280: 	jne	.Ltmp1598 # Offset: 640
.Ltmp1594:
    00000286: 	movq	-0x8(%rdx), %rax
    0000028a: 	addq	$0x200, %rax
    00000290: 	jmp	.Ltmp1598 # Offset: 656
.Ltmp1593:
    00000295: 	testq	%r12, %r12
    00000298: 	je	.Ltmp1597 # Offset: 664
    0000029e: 	jmp	.Ltmp1599 # Offset: 670
.Ltmp1595:
    000002a0: 	callq	__stack_chk_fail@PLT # Offset: 672
.Ltmp1591:
    000002a5: 	leaq	DATAat0x4d018(%rip), %rdi
    000002ac: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 684
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE8Ii14custom_cse_mixIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z20test_CSE8_add_inlineIf14custom_cse_addIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 134
  State       : disassembled
  Address     : 0x19b10
  Size        : 0x3ad
  MaxSize     : 0x3b0
  Offset      : 0x19b10
  Section     : .text
  Orc Section : .local.text._Z20test_CSE8_add_inlineIf14custom_cse_addIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0133:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rdx, %rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movss	%xmm0, 0xc(%rsp)
    00000021: 	movq	%fs:0x28, %rax
    0000002a: 	movq	%rax, 0x18(%rsp)
    0000002f: 	xorl	%eax, %eax
    00000031: 	callq	clock@PLT # Offset: 49
    00000036: 	movl	iterations(%rip), %edx
    0000003c: 	movss	0xc(%rsp), %xmm4
    00000042: 	movq	%rax, start_time(%rip)
    00000049: 	testl	%edx, %edx
    0000004b: 	jle	.Ltmp1600 # Offset: 75
    00000051: 	leal	-0x2(%r14), %eax
    00000055: 	movss	(%r13), %xmm5
    0000005b: 	movss	0x4(%r13), %xmm6
    00000061: 	xorl	%r12d, %r12d
    00000064: 	movsd	DATAat0x4d620(%rip), %xmm9
    0000006d: 	leaq	0x8(%r13,%rax,4), %rbx
    00000072: 	movq	DATAat0x4d5e0(%rip), %xmm8
    0000007b: 	pxor	%xmm11, %xmm11
    00000080: 	movsd	DATAat0x4d628(%rip), %xmm7
    00000088: 	leaq	DATAat0x4d004(%rip), %r15
    0000008f: 	movss	DATAat0x4d5d0(%rip), %xmm10
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1605:
    000000a0: 	movaps	%xmm5, %xmm12
    000000a4: 	movaps	%xmm5, %xmm0
    000000a7: 	movaps	%xmm6, %xmm2
    000000aa: 	addss	%xmm6, %xmm12
    000000af: 	movaps	%xmm5, %xmm3
    000000b2: 	addss	%xmm4, %xmm12
    000000b7: 	addss	%xmm12, %xmm0
    000000bc: 	addss	%xmm12, %xmm2
    000000c1: 	addss	%xmm12, %xmm0
    000000c6: 	addss	%xmm12, %xmm2
    000000cb: 	movaps	%xmm0, %xmm1
    000000ce: 	addss	%xmm11, %xmm1
    000000d3: 	subss	%xmm2, %xmm1
    000000d7: 	addss	%xmm0, %xmm1
    000000db: 	subss	%xmm2, %xmm1
    000000df: 	addss	%xmm0, %xmm1
    000000e3: 	subss	%xmm2, %xmm1
    000000e7: 	addss	%xmm0, %xmm1
    000000eb: 	subss	%xmm2, %xmm1
    000000ef: 	addss	%xmm0, %xmm1
    000000f3: 	subss	%xmm2, %xmm1
    000000f7: 	addss	%xmm0, %xmm1
    000000fb: 	subss	%xmm2, %xmm1
    000000ff: 	addss	%xmm0, %xmm1
    00000103: 	subss	%xmm2, %xmm1
    00000107: 	addss	%xmm1, %xmm0
    0000010b: 	subss	%xmm2, %xmm0
    0000010f: 	cmpl	$0x1, %r14d
    00000113: 	jle	.Ltmp1601 # Offset: 275
    00000119: 	leaq	0x4(%r13), %rax
    0000011d: 	nopl	(%rax) # Size: 3
.Ltmp1602:
    00000120: 	movaps	%xmm3, %xmm1
    00000123: 	movss	(%rax), %xmm3
    00000127: 	addq	$0x4, %rax
    0000012b: 	movaps	%xmm3, %xmm12
    0000012f: 	movaps	%xmm3, %xmm2
    00000132: 	addss	%xmm1, %xmm12
    00000137: 	addss	%xmm4, %xmm12
    0000013c: 	addss	%xmm12, %xmm1
    00000141: 	addss	%xmm12, %xmm2
    00000146: 	addss	%xmm12, %xmm1
    0000014b: 	addss	%xmm12, %xmm2
    00000150: 	addss	%xmm1, %xmm0
    00000154: 	subss	%xmm2, %xmm0
    00000158: 	addss	%xmm1, %xmm0
    0000015c: 	subss	%xmm2, %xmm0
    00000160: 	addss	%xmm1, %xmm0
    00000164: 	subss	%xmm2, %xmm0
    00000168: 	addss	%xmm1, %xmm0
    0000016c: 	subss	%xmm2, %xmm0
    00000170: 	addss	%xmm1, %xmm0
    00000174: 	subss	%xmm2, %xmm0
    00000178: 	addss	%xmm1, %xmm0
    0000017c: 	subss	%xmm2, %xmm0
    00000180: 	addss	%xmm1, %xmm0
    00000184: 	subss	%xmm2, %xmm0
    00000188: 	addss	%xmm1, %xmm0
    0000018c: 	subss	%xmm2, %xmm0
    00000190: 	cmpq	%rax, %rbx
    00000193: 	jne	.Ltmp1602 # Offset: 403
.Ltmp1601:
    00000195: 	movaps	%xmm0, %xmm1
    00000198: 	andps	%xmm10, %xmm1
    0000019c: 	cvtss2sd	%xmm1, %xmm1
    000001a0: 	comisd	%xmm9, %xmm1
    000001a5: 	jbe	.Ltmp1603 # Offset: 421
    000001a7: 	divss	%xmm0, %xmm0
.Ltmp1603:
    000001ab: 	cvtss2sd	%xmm0, %xmm0
    000001af: 	andpd	%xmm8, %xmm0
    000001b4: 	comisd	%xmm0, %xmm7
    000001b8: 	jbe	.Ltmp1604 # Offset: 440
    000001be: 	addl	$0x1, %r12d
    000001c2: 	cmpl	%edx, %r12d
    000001c5: 	jl	.Ltmp1605 # Offset: 453
.Ltmp1600:
    000001cb: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001d2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001d9: 	subq	$0x20, %rax
    000001dd: 	cmpq	%rax, %rbx
    000001e0: 	je	.Ltmp1606 # Offset: 480
    000001e6: 	leaq	0x10(%rbx), %rdi
    000001ea: 	movq	0x8(%rbp), %r12
    000001ee: 	movq	%rdi, (%rbx)
    000001f1: 	movq	(%rbp), %r13
    000001f5: 	movq	%r13, %rax
    000001f8: 	addq	%r12, %rax
    000001fb: 	je	.Ltmp1607 # Offset: 507
    000001fd: 	testq	%r13, %r13
    00000200: 	je	.Ltmp1608 # Offset: 512
.Ltmp1607:
    00000206: 	movq	%r12, 0x10(%rsp)
    0000020b: 	cmpq	$0xf, %r12
    0000020f: 	ja	.Ltmp1609 # Offset: 527
    00000215: 	cmpq	$0x1, %r12
    00000219: 	jne	.Ltmp1610 # Offset: 537
    0000021f: 	movzbl	(%r13), %eax
    00000224: 	movb	%al, 0x10(%rbx)
.Ltmp1613:
    00000227: 	movq	%r12, 0x8(%rbx)
    0000022b: 	movb	$0x0, (%rdi,%r12)
    00000230: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000237: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000023e: 	addq	$0x20, %rax
    00000242: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000249: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000250: 	je	.Ltmp1611 # Offset: 592
.Ltmp1614:
    00000256: 	movq	-0x20(%rax), %rbp
    0000025a: 	callq	clock@PLT # Offset: 602
    0000025f: 	movq	%rax, end_time(%rip)
    00000266: 	movq	0x18(%rsp), %rdx
    0000026b: 	subq	%fs:0x28, %rdx
    00000274: 	jne	.Ltmp1612 # Offset: 628
    0000027a: 	subq	start_time(%rip), %rax
    00000281: 	pxor	%xmm0, %xmm0
    00000285: 	movq	%rbp, %rdi
    00000288: 	cvtsi2sd	%rax, %xmm0
    0000028d: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000295: 	addq	$0x28, %rsp
    00000299: 	popq	%rbx
    0000029a: 	popq	%rbp
    0000029b: 	popq	%r12
    0000029d: 	popq	%r13
    0000029f: 	popq	%r14
    000002a1: 	popq	%r15
    000002a3: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 675
    000002a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1604:
    000002b0: 	movq	(%rbp), %rdx
    000002b4: 	movq	%r15, %rsi
    000002b7: 	movl	$0x1, %edi
    000002bc: 	xorl	%eax, %eax
    000002be: 	movss	%xmm4, 0xc(%rsp)
    000002c4: 	addl	$0x1, %r12d
    000002c8: 	callq	__printf_chk@PLT # Offset: 712
    000002cd: 	movl	iterations(%rip), %edx
    000002d3: 	cmpl	%edx, %r12d
    000002d6: 	jge	.Ltmp1600 # Offset: 726
    000002dc: 	movq	DATAat0x4d620(%rip), %rax
    000002e3: 	movss	(%r13), %xmm5
    000002e9: 	pxor	%xmm11, %xmm11
    000002ee: 	movss	DATAat0x4d5d0(%rip), %xmm10
    000002f7: 	movss	0x4(%r13), %xmm6
    000002fd: 	movss	0xc(%rsp), %xmm4
    00000303: 	movq	DATAat0x4d5e0(%rip), %xmm8
    0000030c: 	movq	%rax, %xmm9
    00000311: 	movq	DATAat0x4d628(%rip), %rax
    00000318: 	movq	%rax, %xmm7
    0000031d: 	jmp	.Ltmp1605 # Offset: 797
.Ltmp1609:
    00000322: 	movq	%rbx, %rdi
    00000325: 	leaq	0x10(%rsp), %rsi
    0000032a: 	xorl	%edx, %edx
    0000032c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 812
    00000331: 	movq	%rax, (%rbx)
    00000334: 	movq	%rax, %rdi
    00000337: 	movq	0x10(%rsp), %rax
    0000033c: 	movq	%rax, 0x10(%rbx)
.Ltmp1615:
    00000340: 	movq	%r12, %rdx
    00000343: 	movq	%r13, %rsi
    00000346: 	callq	memcpy@PLT # Offset: 838
    0000034b: 	movq	0x10(%rsp), %r12
    00000350: 	movq	(%rbx), %rdi
    00000353: 	jmp	.Ltmp1613 # Offset: 851
.Ltmp1606:
    00000358: 	movq	%rbp, %rsi
    0000035b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000362: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 866
    00000367: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000036e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000375: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000037c: 	jne	.Ltmp1614 # Offset: 892
.Ltmp1611:
    00000382: 	movq	-0x8(%rdx), %rax
    00000386: 	addq	$0x200, %rax
    0000038c: 	jmp	.Ltmp1614 # Offset: 908
.Ltmp1610:
    00000391: 	testq	%r12, %r12
    00000394: 	je	.Ltmp1613 # Offset: 916
    0000039a: 	jmp	.Ltmp1615 # Offset: 922
.Ltmp1612:
    0000039c: 	callq	__stack_chk_fail@PLT # Offset: 924
.Ltmp1608:
    000003a1: 	leaq	DATAat0x4d018(%rip), %rdi
    000003a8: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 936
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_CSE8_add_inlineIf14custom_cse_addIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSE8If14custom_cse_mulIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 135
  State       : disassembled
  Address     : 0x19ec0
  Size        : 0x3ad
  MaxSize     : 0x3b0
  Offset      : 0x19ec0
  Section     : .text
  Orc Section : .local.text._Z9test_CSE8If14custom_cse_mulIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0134:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rdx, %rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movss	%xmm0, 0xc(%rsp)
    00000021: 	movq	%fs:0x28, %rax
    0000002a: 	movq	%rax, 0x18(%rsp)
    0000002f: 	xorl	%eax, %eax
    00000031: 	callq	clock@PLT # Offset: 49
    00000036: 	movl	iterations(%rip), %edx
    0000003c: 	movss	0xc(%rsp), %xmm4
    00000042: 	movq	%rax, start_time(%rip)
    00000049: 	testl	%edx, %edx
    0000004b: 	jle	.Ltmp1616 # Offset: 75
    00000051: 	leal	-0x2(%r14), %eax
    00000055: 	movss	(%r13), %xmm5
    0000005b: 	movss	0x4(%r13), %xmm6
    00000061: 	xorl	%r12d, %r12d
    00000064: 	movsd	DATAat0x4d620(%rip), %xmm9
    0000006d: 	leaq	0x8(%r13,%rax,4), %rbx
    00000072: 	movq	DATAat0x4d5e0(%rip), %xmm8
    0000007b: 	pxor	%xmm11, %xmm11
    00000080: 	movsd	DATAat0x4d628(%rip), %xmm7
    00000088: 	leaq	DATAat0x4d004(%rip), %r15
    0000008f: 	movss	DATAat0x4d5d0(%rip), %xmm10
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1621:
    000000a0: 	movaps	%xmm5, %xmm12
    000000a4: 	movaps	%xmm5, %xmm0
    000000a7: 	movaps	%xmm6, %xmm2
    000000aa: 	mulss	%xmm6, %xmm12
    000000af: 	movaps	%xmm5, %xmm3
    000000b2: 	addss	%xmm4, %xmm12
    000000b7: 	addss	%xmm12, %xmm0
    000000bc: 	addss	%xmm12, %xmm2
    000000c1: 	addss	%xmm12, %xmm0
    000000c6: 	addss	%xmm12, %xmm2
    000000cb: 	movaps	%xmm0, %xmm1
    000000ce: 	addss	%xmm11, %xmm1
    000000d3: 	subss	%xmm2, %xmm1
    000000d7: 	addss	%xmm0, %xmm1
    000000db: 	subss	%xmm2, %xmm1
    000000df: 	addss	%xmm0, %xmm1
    000000e3: 	subss	%xmm2, %xmm1
    000000e7: 	addss	%xmm0, %xmm1
    000000eb: 	subss	%xmm2, %xmm1
    000000ef: 	addss	%xmm0, %xmm1
    000000f3: 	subss	%xmm2, %xmm1
    000000f7: 	addss	%xmm0, %xmm1
    000000fb: 	subss	%xmm2, %xmm1
    000000ff: 	addss	%xmm0, %xmm1
    00000103: 	subss	%xmm2, %xmm1
    00000107: 	addss	%xmm1, %xmm0
    0000010b: 	subss	%xmm2, %xmm0
    0000010f: 	cmpl	$0x1, %r14d
    00000113: 	jle	.Ltmp1617 # Offset: 275
    00000119: 	leaq	0x4(%r13), %rax
    0000011d: 	nopl	(%rax) # Size: 3
.Ltmp1618:
    00000120: 	movaps	%xmm3, %xmm1
    00000123: 	movss	(%rax), %xmm3
    00000127: 	addq	$0x4, %rax
    0000012b: 	movaps	%xmm3, %xmm12
    0000012f: 	movaps	%xmm3, %xmm2
    00000132: 	mulss	%xmm1, %xmm12
    00000137: 	addss	%xmm4, %xmm12
    0000013c: 	addss	%xmm12, %xmm1
    00000141: 	addss	%xmm12, %xmm2
    00000146: 	addss	%xmm12, %xmm1
    0000014b: 	addss	%xmm12, %xmm2
    00000150: 	addss	%xmm1, %xmm0
    00000154: 	subss	%xmm2, %xmm0
    00000158: 	addss	%xmm1, %xmm0
    0000015c: 	subss	%xmm2, %xmm0
    00000160: 	addss	%xmm1, %xmm0
    00000164: 	subss	%xmm2, %xmm0
    00000168: 	addss	%xmm1, %xmm0
    0000016c: 	subss	%xmm2, %xmm0
    00000170: 	addss	%xmm1, %xmm0
    00000174: 	subss	%xmm2, %xmm0
    00000178: 	addss	%xmm1, %xmm0
    0000017c: 	subss	%xmm2, %xmm0
    00000180: 	addss	%xmm1, %xmm0
    00000184: 	subss	%xmm2, %xmm0
    00000188: 	addss	%xmm1, %xmm0
    0000018c: 	subss	%xmm2, %xmm0
    00000190: 	cmpq	%rax, %rbx
    00000193: 	jne	.Ltmp1618 # Offset: 403
.Ltmp1617:
    00000195: 	movaps	%xmm0, %xmm1
    00000198: 	andps	%xmm10, %xmm1
    0000019c: 	cvtss2sd	%xmm1, %xmm1
    000001a0: 	comisd	%xmm9, %xmm1
    000001a5: 	jbe	.Ltmp1619 # Offset: 421
    000001a7: 	divss	%xmm0, %xmm0
.Ltmp1619:
    000001ab: 	cvtss2sd	%xmm0, %xmm0
    000001af: 	andpd	%xmm8, %xmm0
    000001b4: 	comisd	%xmm0, %xmm7
    000001b8: 	jbe	.Ltmp1620 # Offset: 440
    000001be: 	addl	$0x1, %r12d
    000001c2: 	cmpl	%edx, %r12d
    000001c5: 	jl	.Ltmp1621 # Offset: 453
.Ltmp1616:
    000001cb: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001d2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001d9: 	subq	$0x20, %rax
    000001dd: 	cmpq	%rax, %rbx
    000001e0: 	je	.Ltmp1622 # Offset: 480
    000001e6: 	leaq	0x10(%rbx), %rdi
    000001ea: 	movq	0x8(%rbp), %r12
    000001ee: 	movq	%rdi, (%rbx)
    000001f1: 	movq	(%rbp), %r13
    000001f5: 	movq	%r13, %rax
    000001f8: 	addq	%r12, %rax
    000001fb: 	je	.Ltmp1623 # Offset: 507
    000001fd: 	testq	%r13, %r13
    00000200: 	je	.Ltmp1624 # Offset: 512
.Ltmp1623:
    00000206: 	movq	%r12, 0x10(%rsp)
    0000020b: 	cmpq	$0xf, %r12
    0000020f: 	ja	.Ltmp1625 # Offset: 527
    00000215: 	cmpq	$0x1, %r12
    00000219: 	jne	.Ltmp1626 # Offset: 537
    0000021f: 	movzbl	(%r13), %eax
    00000224: 	movb	%al, 0x10(%rbx)
.Ltmp1629:
    00000227: 	movq	%r12, 0x8(%rbx)
    0000022b: 	movb	$0x0, (%rdi,%r12)
    00000230: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000237: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000023e: 	addq	$0x20, %rax
    00000242: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000249: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000250: 	je	.Ltmp1627 # Offset: 592
.Ltmp1630:
    00000256: 	movq	-0x20(%rax), %rbp
    0000025a: 	callq	clock@PLT # Offset: 602
    0000025f: 	movq	%rax, end_time(%rip)
    00000266: 	movq	0x18(%rsp), %rdx
    0000026b: 	subq	%fs:0x28, %rdx
    00000274: 	jne	.Ltmp1628 # Offset: 628
    0000027a: 	subq	start_time(%rip), %rax
    00000281: 	pxor	%xmm0, %xmm0
    00000285: 	movq	%rbp, %rdi
    00000288: 	cvtsi2sd	%rax, %xmm0
    0000028d: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000295: 	addq	$0x28, %rsp
    00000299: 	popq	%rbx
    0000029a: 	popq	%rbp
    0000029b: 	popq	%r12
    0000029d: 	popq	%r13
    0000029f: 	popq	%r14
    000002a1: 	popq	%r15
    000002a3: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 675
    000002a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1620:
    000002b0: 	movq	(%rbp), %rdx
    000002b4: 	movq	%r15, %rsi
    000002b7: 	movl	$0x1, %edi
    000002bc: 	xorl	%eax, %eax
    000002be: 	movss	%xmm4, 0xc(%rsp)
    000002c4: 	addl	$0x1, %r12d
    000002c8: 	callq	__printf_chk@PLT # Offset: 712
    000002cd: 	movl	iterations(%rip), %edx
    000002d3: 	cmpl	%edx, %r12d
    000002d6: 	jge	.Ltmp1616 # Offset: 726
    000002dc: 	movq	DATAat0x4d620(%rip), %rax
    000002e3: 	movss	(%r13), %xmm5
    000002e9: 	pxor	%xmm11, %xmm11
    000002ee: 	movss	DATAat0x4d5d0(%rip), %xmm10
    000002f7: 	movss	0x4(%r13), %xmm6
    000002fd: 	movss	0xc(%rsp), %xmm4
    00000303: 	movq	DATAat0x4d5e0(%rip), %xmm8
    0000030c: 	movq	%rax, %xmm9
    00000311: 	movq	DATAat0x4d628(%rip), %rax
    00000318: 	movq	%rax, %xmm7
    0000031d: 	jmp	.Ltmp1621 # Offset: 797
.Ltmp1625:
    00000322: 	movq	%rbx, %rdi
    00000325: 	leaq	0x10(%rsp), %rsi
    0000032a: 	xorl	%edx, %edx
    0000032c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 812
    00000331: 	movq	%rax, (%rbx)
    00000334: 	movq	%rax, %rdi
    00000337: 	movq	0x10(%rsp), %rax
    0000033c: 	movq	%rax, 0x10(%rbx)
.Ltmp1631:
    00000340: 	movq	%r12, %rdx
    00000343: 	movq	%r13, %rsi
    00000346: 	callq	memcpy@PLT # Offset: 838
    0000034b: 	movq	0x10(%rsp), %r12
    00000350: 	movq	(%rbx), %rdi
    00000353: 	jmp	.Ltmp1629 # Offset: 851
.Ltmp1622:
    00000358: 	movq	%rbp, %rsi
    0000035b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000362: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 866
    00000367: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000036e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000375: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000037c: 	jne	.Ltmp1630 # Offset: 892
.Ltmp1627:
    00000382: 	movq	-0x8(%rdx), %rax
    00000386: 	addq	$0x200, %rax
    0000038c: 	jmp	.Ltmp1630 # Offset: 908
.Ltmp1626:
    00000391: 	testq	%r12, %r12
    00000394: 	je	.Ltmp1629 # Offset: 916
    0000039a: 	jmp	.Ltmp1631 # Offset: 922
.Ltmp1628:
    0000039c: 	callq	__stack_chk_fail@PLT # Offset: 924
.Ltmp1624:
    000003a1: 	leaq	DATAat0x4d018(%rip), %rdi
    000003a8: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 936
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE8If14custom_cse_mulIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSE8If14custom_cse_subIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 136
  State       : disassembled
  Address     : 0x1a270
  Size        : 0x3ad
  MaxSize     : 0x3b0
  Offset      : 0x1a270
  Section     : .text
  Orc Section : .local.text._Z9test_CSE8If14custom_cse_subIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0135:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rdx, %rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movss	%xmm0, 0xc(%rsp)
    00000021: 	movq	%fs:0x28, %rax
    0000002a: 	movq	%rax, 0x18(%rsp)
    0000002f: 	xorl	%eax, %eax
    00000031: 	callq	clock@PLT # Offset: 49
    00000036: 	movl	iterations(%rip), %edx
    0000003c: 	movss	0xc(%rsp), %xmm4
    00000042: 	movq	%rax, start_time(%rip)
    00000049: 	testl	%edx, %edx
    0000004b: 	jle	.Ltmp1632 # Offset: 75
    00000051: 	leal	-0x2(%r14), %eax
    00000055: 	movss	(%r13), %xmm5
    0000005b: 	movss	0x4(%r13), %xmm6
    00000061: 	xorl	%r12d, %r12d
    00000064: 	movsd	DATAat0x4d620(%rip), %xmm9
    0000006d: 	leaq	0x8(%r13,%rax,4), %rbx
    00000072: 	movq	DATAat0x4d5e0(%rip), %xmm8
    0000007b: 	pxor	%xmm11, %xmm11
    00000080: 	movsd	DATAat0x4d628(%rip), %xmm7
    00000088: 	leaq	DATAat0x4d004(%rip), %r15
    0000008f: 	movss	DATAat0x4d5d0(%rip), %xmm10
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1637:
    000000a0: 	movaps	%xmm5, %xmm12
    000000a4: 	movaps	%xmm5, %xmm0
    000000a7: 	movaps	%xmm6, %xmm2
    000000aa: 	subss	%xmm6, %xmm12
    000000af: 	movaps	%xmm5, %xmm3
    000000b2: 	addss	%xmm4, %xmm12
    000000b7: 	addss	%xmm12, %xmm0
    000000bc: 	addss	%xmm12, %xmm2
    000000c1: 	addss	%xmm12, %xmm0
    000000c6: 	addss	%xmm12, %xmm2
    000000cb: 	movaps	%xmm0, %xmm1
    000000ce: 	addss	%xmm11, %xmm1
    000000d3: 	subss	%xmm2, %xmm1
    000000d7: 	addss	%xmm0, %xmm1
    000000db: 	subss	%xmm2, %xmm1
    000000df: 	addss	%xmm0, %xmm1
    000000e3: 	subss	%xmm2, %xmm1
    000000e7: 	addss	%xmm0, %xmm1
    000000eb: 	subss	%xmm2, %xmm1
    000000ef: 	addss	%xmm0, %xmm1
    000000f3: 	subss	%xmm2, %xmm1
    000000f7: 	addss	%xmm0, %xmm1
    000000fb: 	subss	%xmm2, %xmm1
    000000ff: 	addss	%xmm0, %xmm1
    00000103: 	subss	%xmm2, %xmm1
    00000107: 	addss	%xmm1, %xmm0
    0000010b: 	subss	%xmm2, %xmm0
    0000010f: 	cmpl	$0x1, %r14d
    00000113: 	jle	.Ltmp1633 # Offset: 275
    00000119: 	leaq	0x4(%r13), %rax
    0000011d: 	nopl	(%rax) # Size: 3
.Ltmp1634:
    00000120: 	movaps	%xmm3, %xmm1
    00000123: 	movss	(%rax), %xmm3
    00000127: 	addq	$0x4, %rax
    0000012b: 	movaps	%xmm1, %xmm12
    0000012f: 	subss	%xmm3, %xmm12
    00000134: 	movaps	%xmm3, %xmm2
    00000137: 	addss	%xmm4, %xmm12
    0000013c: 	addss	%xmm12, %xmm1
    00000141: 	addss	%xmm12, %xmm2
    00000146: 	addss	%xmm12, %xmm1
    0000014b: 	addss	%xmm12, %xmm2
    00000150: 	addss	%xmm1, %xmm0
    00000154: 	subss	%xmm2, %xmm0
    00000158: 	addss	%xmm1, %xmm0
    0000015c: 	subss	%xmm2, %xmm0
    00000160: 	addss	%xmm1, %xmm0
    00000164: 	subss	%xmm2, %xmm0
    00000168: 	addss	%xmm1, %xmm0
    0000016c: 	subss	%xmm2, %xmm0
    00000170: 	addss	%xmm1, %xmm0
    00000174: 	subss	%xmm2, %xmm0
    00000178: 	addss	%xmm1, %xmm0
    0000017c: 	subss	%xmm2, %xmm0
    00000180: 	addss	%xmm1, %xmm0
    00000184: 	subss	%xmm2, %xmm0
    00000188: 	addss	%xmm1, %xmm0
    0000018c: 	subss	%xmm2, %xmm0
    00000190: 	cmpq	%rax, %rbx
    00000193: 	jne	.Ltmp1634 # Offset: 403
.Ltmp1633:
    00000195: 	movaps	%xmm0, %xmm1
    00000198: 	andps	%xmm10, %xmm1
    0000019c: 	cvtss2sd	%xmm1, %xmm1
    000001a0: 	comisd	%xmm9, %xmm1
    000001a5: 	jbe	.Ltmp1635 # Offset: 421
    000001a7: 	divss	%xmm0, %xmm0
.Ltmp1635:
    000001ab: 	cvtss2sd	%xmm0, %xmm0
    000001af: 	andpd	%xmm8, %xmm0
    000001b4: 	comisd	%xmm0, %xmm7
    000001b8: 	jbe	.Ltmp1636 # Offset: 440
    000001be: 	addl	$0x1, %r12d
    000001c2: 	cmpl	%edx, %r12d
    000001c5: 	jl	.Ltmp1637 # Offset: 453
.Ltmp1632:
    000001cb: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001d2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001d9: 	subq	$0x20, %rax
    000001dd: 	cmpq	%rax, %rbx
    000001e0: 	je	.Ltmp1638 # Offset: 480
    000001e6: 	leaq	0x10(%rbx), %rdi
    000001ea: 	movq	0x8(%rbp), %r12
    000001ee: 	movq	%rdi, (%rbx)
    000001f1: 	movq	(%rbp), %r13
    000001f5: 	movq	%r13, %rax
    000001f8: 	addq	%r12, %rax
    000001fb: 	je	.Ltmp1639 # Offset: 507
    000001fd: 	testq	%r13, %r13
    00000200: 	je	.Ltmp1640 # Offset: 512
.Ltmp1639:
    00000206: 	movq	%r12, 0x10(%rsp)
    0000020b: 	cmpq	$0xf, %r12
    0000020f: 	ja	.Ltmp1641 # Offset: 527
    00000215: 	cmpq	$0x1, %r12
    00000219: 	jne	.Ltmp1642 # Offset: 537
    0000021f: 	movzbl	(%r13), %eax
    00000224: 	movb	%al, 0x10(%rbx)
.Ltmp1645:
    00000227: 	movq	%r12, 0x8(%rbx)
    0000022b: 	movb	$0x0, (%rdi,%r12)
    00000230: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000237: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000023e: 	addq	$0x20, %rax
    00000242: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000249: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000250: 	je	.Ltmp1643 # Offset: 592
.Ltmp1646:
    00000256: 	movq	-0x20(%rax), %rbp
    0000025a: 	callq	clock@PLT # Offset: 602
    0000025f: 	movq	%rax, end_time(%rip)
    00000266: 	movq	0x18(%rsp), %rdx
    0000026b: 	subq	%fs:0x28, %rdx
    00000274: 	jne	.Ltmp1644 # Offset: 628
    0000027a: 	subq	start_time(%rip), %rax
    00000281: 	pxor	%xmm0, %xmm0
    00000285: 	movq	%rbp, %rdi
    00000288: 	cvtsi2sd	%rax, %xmm0
    0000028d: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000295: 	addq	$0x28, %rsp
    00000299: 	popq	%rbx
    0000029a: 	popq	%rbp
    0000029b: 	popq	%r12
    0000029d: 	popq	%r13
    0000029f: 	popq	%r14
    000002a1: 	popq	%r15
    000002a3: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 675
    000002a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1636:
    000002b0: 	movq	(%rbp), %rdx
    000002b4: 	movq	%r15, %rsi
    000002b7: 	movl	$0x1, %edi
    000002bc: 	xorl	%eax, %eax
    000002be: 	movss	%xmm4, 0xc(%rsp)
    000002c4: 	addl	$0x1, %r12d
    000002c8: 	callq	__printf_chk@PLT # Offset: 712
    000002cd: 	movl	iterations(%rip), %edx
    000002d3: 	cmpl	%edx, %r12d
    000002d6: 	jge	.Ltmp1632 # Offset: 726
    000002dc: 	movq	DATAat0x4d620(%rip), %rax
    000002e3: 	movss	(%r13), %xmm5
    000002e9: 	pxor	%xmm11, %xmm11
    000002ee: 	movss	DATAat0x4d5d0(%rip), %xmm10
    000002f7: 	movss	0x4(%r13), %xmm6
    000002fd: 	movss	0xc(%rsp), %xmm4
    00000303: 	movq	DATAat0x4d5e0(%rip), %xmm8
    0000030c: 	movq	%rax, %xmm9
    00000311: 	movq	DATAat0x4d628(%rip), %rax
    00000318: 	movq	%rax, %xmm7
    0000031d: 	jmp	.Ltmp1637 # Offset: 797
.Ltmp1641:
    00000322: 	movq	%rbx, %rdi
    00000325: 	leaq	0x10(%rsp), %rsi
    0000032a: 	xorl	%edx, %edx
    0000032c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 812
    00000331: 	movq	%rax, (%rbx)
    00000334: 	movq	%rax, %rdi
    00000337: 	movq	0x10(%rsp), %rax
    0000033c: 	movq	%rax, 0x10(%rbx)
.Ltmp1647:
    00000340: 	movq	%r12, %rdx
    00000343: 	movq	%r13, %rsi
    00000346: 	callq	memcpy@PLT # Offset: 838
    0000034b: 	movq	0x10(%rsp), %r12
    00000350: 	movq	(%rbx), %rdi
    00000353: 	jmp	.Ltmp1645 # Offset: 851
.Ltmp1638:
    00000358: 	movq	%rbp, %rsi
    0000035b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000362: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 866
    00000367: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000036e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000375: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000037c: 	jne	.Ltmp1646 # Offset: 892
.Ltmp1643:
    00000382: 	movq	-0x8(%rdx), %rax
    00000386: 	addq	$0x200, %rax
    0000038c: 	jmp	.Ltmp1646 # Offset: 908
.Ltmp1642:
    00000391: 	testq	%r12, %r12
    00000394: 	je	.Ltmp1645 # Offset: 916
    0000039a: 	jmp	.Ltmp1647 # Offset: 922
.Ltmp1644:
    0000039c: 	callq	__stack_chk_fail@PLT # Offset: 924
.Ltmp1640:
    000003a1: 	leaq	DATAat0x4d018(%rip), %rdi
    000003a8: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 936
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE8If14custom_cse_subIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSE8If14custom_cse_divIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 137
  State       : disassembled
  Address     : 0x1a620
  Size        : 0x3ad
  MaxSize     : 0x3b0
  Offset      : 0x1a620
  Section     : .text
  Orc Section : .local.text._Z9test_CSE8If14custom_cse_divIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0136:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rdx, %rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movss	%xmm0, 0xc(%rsp)
    00000021: 	movq	%fs:0x28, %rax
    0000002a: 	movq	%rax, 0x18(%rsp)
    0000002f: 	xorl	%eax, %eax
    00000031: 	callq	clock@PLT # Offset: 49
    00000036: 	movl	iterations(%rip), %edx
    0000003c: 	movss	0xc(%rsp), %xmm4
    00000042: 	movq	%rax, start_time(%rip)
    00000049: 	testl	%edx, %edx
    0000004b: 	jle	.Ltmp1648 # Offset: 75
    00000051: 	leal	-0x2(%r14), %eax
    00000055: 	movss	(%r13), %xmm5
    0000005b: 	movss	0x4(%r13), %xmm6
    00000061: 	xorl	%r12d, %r12d
    00000064: 	movsd	DATAat0x4d620(%rip), %xmm9
    0000006d: 	leaq	0x8(%r13,%rax,4), %rbx
    00000072: 	movq	DATAat0x4d5e0(%rip), %xmm8
    0000007b: 	pxor	%xmm11, %xmm11
    00000080: 	movsd	DATAat0x4d628(%rip), %xmm7
    00000088: 	leaq	DATAat0x4d004(%rip), %r15
    0000008f: 	movss	DATAat0x4d5d0(%rip), %xmm10
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1653:
    000000a0: 	movaps	%xmm5, %xmm12
    000000a4: 	movaps	%xmm5, %xmm0
    000000a7: 	movaps	%xmm6, %xmm2
    000000aa: 	divss	%xmm6, %xmm12
    000000af: 	movaps	%xmm5, %xmm3
    000000b2: 	addss	%xmm4, %xmm12
    000000b7: 	addss	%xmm12, %xmm0
    000000bc: 	addss	%xmm12, %xmm2
    000000c1: 	addss	%xmm12, %xmm0
    000000c6: 	addss	%xmm12, %xmm2
    000000cb: 	movaps	%xmm0, %xmm1
    000000ce: 	addss	%xmm11, %xmm1
    000000d3: 	subss	%xmm2, %xmm1
    000000d7: 	addss	%xmm0, %xmm1
    000000db: 	subss	%xmm2, %xmm1
    000000df: 	addss	%xmm0, %xmm1
    000000e3: 	subss	%xmm2, %xmm1
    000000e7: 	addss	%xmm0, %xmm1
    000000eb: 	subss	%xmm2, %xmm1
    000000ef: 	addss	%xmm0, %xmm1
    000000f3: 	subss	%xmm2, %xmm1
    000000f7: 	addss	%xmm0, %xmm1
    000000fb: 	subss	%xmm2, %xmm1
    000000ff: 	addss	%xmm0, %xmm1
    00000103: 	subss	%xmm2, %xmm1
    00000107: 	addss	%xmm1, %xmm0
    0000010b: 	subss	%xmm2, %xmm0
    0000010f: 	cmpl	$0x1, %r14d
    00000113: 	jle	.Ltmp1649 # Offset: 275
    00000119: 	leaq	0x4(%r13), %rax
    0000011d: 	nopl	(%rax) # Size: 3
.Ltmp1650:
    00000120: 	movaps	%xmm3, %xmm1
    00000123: 	movss	(%rax), %xmm3
    00000127: 	addq	$0x4, %rax
    0000012b: 	movaps	%xmm1, %xmm12
    0000012f: 	divss	%xmm3, %xmm12
    00000134: 	movaps	%xmm3, %xmm2
    00000137: 	addss	%xmm4, %xmm12
    0000013c: 	addss	%xmm12, %xmm1
    00000141: 	addss	%xmm12, %xmm2
    00000146: 	addss	%xmm12, %xmm1
    0000014b: 	addss	%xmm12, %xmm2
    00000150: 	addss	%xmm1, %xmm0
    00000154: 	subss	%xmm2, %xmm0
    00000158: 	addss	%xmm1, %xmm0
    0000015c: 	subss	%xmm2, %xmm0
    00000160: 	addss	%xmm1, %xmm0
    00000164: 	subss	%xmm2, %xmm0
    00000168: 	addss	%xmm1, %xmm0
    0000016c: 	subss	%xmm2, %xmm0
    00000170: 	addss	%xmm1, %xmm0
    00000174: 	subss	%xmm2, %xmm0
    00000178: 	addss	%xmm1, %xmm0
    0000017c: 	subss	%xmm2, %xmm0
    00000180: 	addss	%xmm1, %xmm0
    00000184: 	subss	%xmm2, %xmm0
    00000188: 	addss	%xmm1, %xmm0
    0000018c: 	subss	%xmm2, %xmm0
    00000190: 	cmpq	%rax, %rbx
    00000193: 	jne	.Ltmp1650 # Offset: 403
.Ltmp1649:
    00000195: 	movaps	%xmm0, %xmm1
    00000198: 	andps	%xmm10, %xmm1
    0000019c: 	cvtss2sd	%xmm1, %xmm1
    000001a0: 	comisd	%xmm9, %xmm1
    000001a5: 	jbe	.Ltmp1651 # Offset: 421
    000001a7: 	divss	%xmm0, %xmm0
.Ltmp1651:
    000001ab: 	cvtss2sd	%xmm0, %xmm0
    000001af: 	andpd	%xmm8, %xmm0
    000001b4: 	comisd	%xmm0, %xmm7
    000001b8: 	jbe	.Ltmp1652 # Offset: 440
    000001be: 	addl	$0x1, %r12d
    000001c2: 	cmpl	%edx, %r12d
    000001c5: 	jl	.Ltmp1653 # Offset: 453
.Ltmp1648:
    000001cb: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001d2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001d9: 	subq	$0x20, %rax
    000001dd: 	cmpq	%rax, %rbx
    000001e0: 	je	.Ltmp1654 # Offset: 480
    000001e6: 	leaq	0x10(%rbx), %rdi
    000001ea: 	movq	0x8(%rbp), %r12
    000001ee: 	movq	%rdi, (%rbx)
    000001f1: 	movq	(%rbp), %r13
    000001f5: 	movq	%r13, %rax
    000001f8: 	addq	%r12, %rax
    000001fb: 	je	.Ltmp1655 # Offset: 507
    000001fd: 	testq	%r13, %r13
    00000200: 	je	.Ltmp1656 # Offset: 512
.Ltmp1655:
    00000206: 	movq	%r12, 0x10(%rsp)
    0000020b: 	cmpq	$0xf, %r12
    0000020f: 	ja	.Ltmp1657 # Offset: 527
    00000215: 	cmpq	$0x1, %r12
    00000219: 	jne	.Ltmp1658 # Offset: 537
    0000021f: 	movzbl	(%r13), %eax
    00000224: 	movb	%al, 0x10(%rbx)
.Ltmp1661:
    00000227: 	movq	%r12, 0x8(%rbx)
    0000022b: 	movb	$0x0, (%rdi,%r12)
    00000230: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000237: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000023e: 	addq	$0x20, %rax
    00000242: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000249: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000250: 	je	.Ltmp1659 # Offset: 592
.Ltmp1662:
    00000256: 	movq	-0x20(%rax), %rbp
    0000025a: 	callq	clock@PLT # Offset: 602
    0000025f: 	movq	%rax, end_time(%rip)
    00000266: 	movq	0x18(%rsp), %rdx
    0000026b: 	subq	%fs:0x28, %rdx
    00000274: 	jne	.Ltmp1660 # Offset: 628
    0000027a: 	subq	start_time(%rip), %rax
    00000281: 	pxor	%xmm0, %xmm0
    00000285: 	movq	%rbp, %rdi
    00000288: 	cvtsi2sd	%rax, %xmm0
    0000028d: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000295: 	addq	$0x28, %rsp
    00000299: 	popq	%rbx
    0000029a: 	popq	%rbp
    0000029b: 	popq	%r12
    0000029d: 	popq	%r13
    0000029f: 	popq	%r14
    000002a1: 	popq	%r15
    000002a3: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 675
    000002a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1652:
    000002b0: 	movq	(%rbp), %rdx
    000002b4: 	movq	%r15, %rsi
    000002b7: 	movl	$0x1, %edi
    000002bc: 	xorl	%eax, %eax
    000002be: 	movss	%xmm4, 0xc(%rsp)
    000002c4: 	addl	$0x1, %r12d
    000002c8: 	callq	__printf_chk@PLT # Offset: 712
    000002cd: 	movl	iterations(%rip), %edx
    000002d3: 	cmpl	%edx, %r12d
    000002d6: 	jge	.Ltmp1648 # Offset: 726
    000002dc: 	movq	DATAat0x4d620(%rip), %rax
    000002e3: 	movss	(%r13), %xmm5
    000002e9: 	pxor	%xmm11, %xmm11
    000002ee: 	movss	DATAat0x4d5d0(%rip), %xmm10
    000002f7: 	movss	0x4(%r13), %xmm6
    000002fd: 	movss	0xc(%rsp), %xmm4
    00000303: 	movq	DATAat0x4d5e0(%rip), %xmm8
    0000030c: 	movq	%rax, %xmm9
    00000311: 	movq	DATAat0x4d628(%rip), %rax
    00000318: 	movq	%rax, %xmm7
    0000031d: 	jmp	.Ltmp1653 # Offset: 797
.Ltmp1657:
    00000322: 	movq	%rbx, %rdi
    00000325: 	leaq	0x10(%rsp), %rsi
    0000032a: 	xorl	%edx, %edx
    0000032c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 812
    00000331: 	movq	%rax, (%rbx)
    00000334: 	movq	%rax, %rdi
    00000337: 	movq	0x10(%rsp), %rax
    0000033c: 	movq	%rax, 0x10(%rbx)
.Ltmp1663:
    00000340: 	movq	%r12, %rdx
    00000343: 	movq	%r13, %rsi
    00000346: 	callq	memcpy@PLT # Offset: 838
    0000034b: 	movq	0x10(%rsp), %r12
    00000350: 	movq	(%rbx), %rdi
    00000353: 	jmp	.Ltmp1661 # Offset: 851
.Ltmp1654:
    00000358: 	movq	%rbp, %rsi
    0000035b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000362: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 866
    00000367: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000036e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000375: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000037c: 	jne	.Ltmp1662 # Offset: 892
.Ltmp1659:
    00000382: 	movq	-0x8(%rdx), %rax
    00000386: 	addq	$0x200, %rax
    0000038c: 	jmp	.Ltmp1662 # Offset: 908
.Ltmp1658:
    00000391: 	testq	%r12, %r12
    00000394: 	je	.Ltmp1661 # Offset: 916
    0000039a: 	jmp	.Ltmp1663 # Offset: 922
.Ltmp1660:
    0000039c: 	callq	__stack_chk_fail@PLT # Offset: 924
.Ltmp1656:
    000003a1: 	leaq	DATAat0x4d018(%rip), %rdi
    000003a8: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 936
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE8If14custom_cse_divIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z28test_CSE8_add_inline_flippedIf14custom_cse_addIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 138
  State       : disassembled
  Address     : 0x1a9d0
  Size        : 0x3ad
  MaxSize     : 0x3b0
  Offset      : 0x1a9d0
  Section     : .text
  Orc Section : .local.text._Z28test_CSE8_add_inline_flippedIf14custom_cse_addIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0137:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rdx, %rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movss	%xmm0, 0xc(%rsp)
    00000021: 	movq	%fs:0x28, %rax
    0000002a: 	movq	%rax, 0x18(%rsp)
    0000002f: 	xorl	%eax, %eax
    00000031: 	callq	clock@PLT # Offset: 49
    00000036: 	movl	iterations(%rip), %edx
    0000003c: 	movss	0xc(%rsp), %xmm4
    00000042: 	movq	%rax, start_time(%rip)
    00000049: 	testl	%edx, %edx
    0000004b: 	jle	.Ltmp1664 # Offset: 75
    00000051: 	leal	-0x2(%r14), %eax
    00000055: 	movss	(%r13), %xmm5
    0000005b: 	movss	0x4(%r13), %xmm6
    00000061: 	xorl	%r12d, %r12d
    00000064: 	movsd	DATAat0x4d620(%rip), %xmm9
    0000006d: 	leaq	0x8(%r13,%rax,4), %rbx
    00000072: 	movq	DATAat0x4d5e0(%rip), %xmm8
    0000007b: 	pxor	%xmm11, %xmm11
    00000080: 	movsd	DATAat0x4d628(%rip), %xmm7
    00000088: 	leaq	DATAat0x4d004(%rip), %r15
    0000008f: 	movss	DATAat0x4d5d0(%rip), %xmm10
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1669:
    000000a0: 	movaps	%xmm5, %xmm12
    000000a4: 	movaps	%xmm5, %xmm0
    000000a7: 	movaps	%xmm6, %xmm2
    000000aa: 	addss	%xmm6, %xmm12
    000000af: 	movaps	%xmm5, %xmm3
    000000b2: 	addss	%xmm4, %xmm12
    000000b7: 	addss	%xmm12, %xmm0
    000000bc: 	addss	%xmm12, %xmm2
    000000c1: 	addss	%xmm12, %xmm0
    000000c6: 	addss	%xmm12, %xmm2
    000000cb: 	movaps	%xmm0, %xmm1
    000000ce: 	addss	%xmm11, %xmm1
    000000d3: 	subss	%xmm2, %xmm1
    000000d7: 	addss	%xmm0, %xmm1
    000000db: 	subss	%xmm2, %xmm1
    000000df: 	addss	%xmm0, %xmm1
    000000e3: 	subss	%xmm2, %xmm1
    000000e7: 	addss	%xmm0, %xmm1
    000000eb: 	subss	%xmm2, %xmm1
    000000ef: 	addss	%xmm0, %xmm1
    000000f3: 	subss	%xmm2, %xmm1
    000000f7: 	addss	%xmm0, %xmm1
    000000fb: 	subss	%xmm2, %xmm1
    000000ff: 	addss	%xmm0, %xmm1
    00000103: 	subss	%xmm2, %xmm1
    00000107: 	addss	%xmm1, %xmm0
    0000010b: 	subss	%xmm2, %xmm0
    0000010f: 	cmpl	$0x1, %r14d
    00000113: 	jle	.Ltmp1665 # Offset: 275
    00000119: 	leaq	0x4(%r13), %rax
    0000011d: 	nopl	(%rax) # Size: 3
.Ltmp1666:
    00000120: 	movaps	%xmm3, %xmm1
    00000123: 	movss	(%rax), %xmm3
    00000127: 	addq	$0x4, %rax
    0000012b: 	movaps	%xmm3, %xmm12
    0000012f: 	movaps	%xmm3, %xmm2
    00000132: 	addss	%xmm1, %xmm12
    00000137: 	addss	%xmm4, %xmm12
    0000013c: 	addss	%xmm12, %xmm1
    00000141: 	addss	%xmm12, %xmm2
    00000146: 	addss	%xmm12, %xmm1
    0000014b: 	addss	%xmm12, %xmm2
    00000150: 	addss	%xmm1, %xmm0
    00000154: 	subss	%xmm2, %xmm0
    00000158: 	addss	%xmm1, %xmm0
    0000015c: 	subss	%xmm2, %xmm0
    00000160: 	addss	%xmm1, %xmm0
    00000164: 	subss	%xmm2, %xmm0
    00000168: 	addss	%xmm1, %xmm0
    0000016c: 	subss	%xmm2, %xmm0
    00000170: 	addss	%xmm1, %xmm0
    00000174: 	subss	%xmm2, %xmm0
    00000178: 	addss	%xmm1, %xmm0
    0000017c: 	subss	%xmm2, %xmm0
    00000180: 	addss	%xmm1, %xmm0
    00000184: 	subss	%xmm2, %xmm0
    00000188: 	addss	%xmm1, %xmm0
    0000018c: 	subss	%xmm2, %xmm0
    00000190: 	cmpq	%rax, %rbx
    00000193: 	jne	.Ltmp1666 # Offset: 403
.Ltmp1665:
    00000195: 	movaps	%xmm0, %xmm1
    00000198: 	andps	%xmm10, %xmm1
    0000019c: 	cvtss2sd	%xmm1, %xmm1
    000001a0: 	comisd	%xmm9, %xmm1
    000001a5: 	jbe	.Ltmp1667 # Offset: 421
    000001a7: 	divss	%xmm0, %xmm0
.Ltmp1667:
    000001ab: 	cvtss2sd	%xmm0, %xmm0
    000001af: 	andpd	%xmm8, %xmm0
    000001b4: 	comisd	%xmm0, %xmm7
    000001b8: 	jbe	.Ltmp1668 # Offset: 440
    000001be: 	addl	$0x1, %r12d
    000001c2: 	cmpl	%edx, %r12d
    000001c5: 	jl	.Ltmp1669 # Offset: 453
.Ltmp1664:
    000001cb: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001d2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001d9: 	subq	$0x20, %rax
    000001dd: 	cmpq	%rax, %rbx
    000001e0: 	je	.Ltmp1670 # Offset: 480
    000001e6: 	leaq	0x10(%rbx), %rdi
    000001ea: 	movq	0x8(%rbp), %r12
    000001ee: 	movq	%rdi, (%rbx)
    000001f1: 	movq	(%rbp), %r13
    000001f5: 	movq	%r13, %rax
    000001f8: 	addq	%r12, %rax
    000001fb: 	je	.Ltmp1671 # Offset: 507
    000001fd: 	testq	%r13, %r13
    00000200: 	je	.Ltmp1672 # Offset: 512
.Ltmp1671:
    00000206: 	movq	%r12, 0x10(%rsp)
    0000020b: 	cmpq	$0xf, %r12
    0000020f: 	ja	.Ltmp1673 # Offset: 527
    00000215: 	cmpq	$0x1, %r12
    00000219: 	jne	.Ltmp1674 # Offset: 537
    0000021f: 	movzbl	(%r13), %eax
    00000224: 	movb	%al, 0x10(%rbx)
.Ltmp1677:
    00000227: 	movq	%r12, 0x8(%rbx)
    0000022b: 	movb	$0x0, (%rdi,%r12)
    00000230: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000237: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000023e: 	addq	$0x20, %rax
    00000242: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000249: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000250: 	je	.Ltmp1675 # Offset: 592
.Ltmp1678:
    00000256: 	movq	-0x20(%rax), %rbp
    0000025a: 	callq	clock@PLT # Offset: 602
    0000025f: 	movq	%rax, end_time(%rip)
    00000266: 	movq	0x18(%rsp), %rdx
    0000026b: 	subq	%fs:0x28, %rdx
    00000274: 	jne	.Ltmp1676 # Offset: 628
    0000027a: 	subq	start_time(%rip), %rax
    00000281: 	pxor	%xmm0, %xmm0
    00000285: 	movq	%rbp, %rdi
    00000288: 	cvtsi2sd	%rax, %xmm0
    0000028d: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000295: 	addq	$0x28, %rsp
    00000299: 	popq	%rbx
    0000029a: 	popq	%rbp
    0000029b: 	popq	%r12
    0000029d: 	popq	%r13
    0000029f: 	popq	%r14
    000002a1: 	popq	%r15
    000002a3: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 675
    000002a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1668:
    000002b0: 	movq	(%rbp), %rdx
    000002b4: 	movq	%r15, %rsi
    000002b7: 	movl	$0x1, %edi
    000002bc: 	xorl	%eax, %eax
    000002be: 	movss	%xmm4, 0xc(%rsp)
    000002c4: 	addl	$0x1, %r12d
    000002c8: 	callq	__printf_chk@PLT # Offset: 712
    000002cd: 	movl	iterations(%rip), %edx
    000002d3: 	cmpl	%edx, %r12d
    000002d6: 	jge	.Ltmp1664 # Offset: 726
    000002dc: 	movq	DATAat0x4d620(%rip), %rax
    000002e3: 	movss	(%r13), %xmm5
    000002e9: 	pxor	%xmm11, %xmm11
    000002ee: 	movss	DATAat0x4d5d0(%rip), %xmm10
    000002f7: 	movss	0x4(%r13), %xmm6
    000002fd: 	movss	0xc(%rsp), %xmm4
    00000303: 	movq	DATAat0x4d5e0(%rip), %xmm8
    0000030c: 	movq	%rax, %xmm9
    00000311: 	movq	DATAat0x4d628(%rip), %rax
    00000318: 	movq	%rax, %xmm7
    0000031d: 	jmp	.Ltmp1669 # Offset: 797
.Ltmp1673:
    00000322: 	movq	%rbx, %rdi
    00000325: 	leaq	0x10(%rsp), %rsi
    0000032a: 	xorl	%edx, %edx
    0000032c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 812
    00000331: 	movq	%rax, (%rbx)
    00000334: 	movq	%rax, %rdi
    00000337: 	movq	0x10(%rsp), %rax
    0000033c: 	movq	%rax, 0x10(%rbx)
.Ltmp1679:
    00000340: 	movq	%r12, %rdx
    00000343: 	movq	%r13, %rsi
    00000346: 	callq	memcpy@PLT # Offset: 838
    0000034b: 	movq	0x10(%rsp), %r12
    00000350: 	movq	(%rbx), %rdi
    00000353: 	jmp	.Ltmp1677 # Offset: 851
.Ltmp1670:
    00000358: 	movq	%rbp, %rsi
    0000035b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000362: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 866
    00000367: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000036e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000375: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000037c: 	jne	.Ltmp1678 # Offset: 892
.Ltmp1675:
    00000382: 	movq	-0x8(%rdx), %rax
    00000386: 	addq	$0x200, %rax
    0000038c: 	jmp	.Ltmp1678 # Offset: 908
.Ltmp1674:
    00000391: 	testq	%r12, %r12
    00000394: 	je	.Ltmp1677 # Offset: 916
    0000039a: 	jmp	.Ltmp1679 # Offset: 922
.Ltmp1676:
    0000039c: 	callq	__stack_chk_fail@PLT # Offset: 924
.Ltmp1672:
    000003a1: 	leaq	DATAat0x4d018(%rip), %rdi
    000003a8: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 936
DWARF CFI Instructions:
    <empty>
End of Function "_Z28test_CSE8_add_inline_flippedIf14custom_cse_addIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSE8If14custom_cse_addIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 139
  State       : disassembled
  Address     : 0x1ad80
  Size        : 0x3ad
  MaxSize     : 0x3b0
  Offset      : 0x1ad80
  Section     : .text
  Orc Section : .local.text._Z9test_CSE8If14custom_cse_addIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0138:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rdx, %rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movss	%xmm0, 0xc(%rsp)
    00000021: 	movq	%fs:0x28, %rax
    0000002a: 	movq	%rax, 0x18(%rsp)
    0000002f: 	xorl	%eax, %eax
    00000031: 	callq	clock@PLT # Offset: 49
    00000036: 	movl	iterations(%rip), %edx
    0000003c: 	movss	0xc(%rsp), %xmm4
    00000042: 	movq	%rax, start_time(%rip)
    00000049: 	testl	%edx, %edx
    0000004b: 	jle	.Ltmp1680 # Offset: 75
    00000051: 	leal	-0x2(%r14), %eax
    00000055: 	movss	(%r13), %xmm5
    0000005b: 	movss	0x4(%r13), %xmm6
    00000061: 	xorl	%r12d, %r12d
    00000064: 	movsd	DATAat0x4d620(%rip), %xmm9
    0000006d: 	leaq	0x8(%r13,%rax,4), %rbx
    00000072: 	movq	DATAat0x4d5e0(%rip), %xmm8
    0000007b: 	pxor	%xmm11, %xmm11
    00000080: 	movsd	DATAat0x4d628(%rip), %xmm7
    00000088: 	leaq	DATAat0x4d004(%rip), %r15
    0000008f: 	movss	DATAat0x4d5d0(%rip), %xmm10
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1685:
    000000a0: 	movaps	%xmm5, %xmm12
    000000a4: 	movaps	%xmm5, %xmm0
    000000a7: 	movaps	%xmm6, %xmm2
    000000aa: 	addss	%xmm6, %xmm12
    000000af: 	movaps	%xmm5, %xmm3
    000000b2: 	addss	%xmm4, %xmm12
    000000b7: 	addss	%xmm12, %xmm0
    000000bc: 	addss	%xmm12, %xmm2
    000000c1: 	addss	%xmm12, %xmm0
    000000c6: 	addss	%xmm12, %xmm2
    000000cb: 	movaps	%xmm0, %xmm1
    000000ce: 	addss	%xmm11, %xmm1
    000000d3: 	subss	%xmm2, %xmm1
    000000d7: 	addss	%xmm0, %xmm1
    000000db: 	subss	%xmm2, %xmm1
    000000df: 	addss	%xmm0, %xmm1
    000000e3: 	subss	%xmm2, %xmm1
    000000e7: 	addss	%xmm0, %xmm1
    000000eb: 	subss	%xmm2, %xmm1
    000000ef: 	addss	%xmm0, %xmm1
    000000f3: 	subss	%xmm2, %xmm1
    000000f7: 	addss	%xmm0, %xmm1
    000000fb: 	subss	%xmm2, %xmm1
    000000ff: 	addss	%xmm0, %xmm1
    00000103: 	subss	%xmm2, %xmm1
    00000107: 	addss	%xmm1, %xmm0
    0000010b: 	subss	%xmm2, %xmm0
    0000010f: 	cmpl	$0x1, %r14d
    00000113: 	jle	.Ltmp1681 # Offset: 275
    00000119: 	leaq	0x4(%r13), %rax
    0000011d: 	nopl	(%rax) # Size: 3
.Ltmp1682:
    00000120: 	movaps	%xmm3, %xmm1
    00000123: 	movss	(%rax), %xmm3
    00000127: 	addq	$0x4, %rax
    0000012b: 	movaps	%xmm3, %xmm12
    0000012f: 	movaps	%xmm3, %xmm2
    00000132: 	addss	%xmm1, %xmm12
    00000137: 	addss	%xmm4, %xmm12
    0000013c: 	addss	%xmm12, %xmm1
    00000141: 	addss	%xmm12, %xmm2
    00000146: 	addss	%xmm12, %xmm1
    0000014b: 	addss	%xmm12, %xmm2
    00000150: 	addss	%xmm1, %xmm0
    00000154: 	subss	%xmm2, %xmm0
    00000158: 	addss	%xmm1, %xmm0
    0000015c: 	subss	%xmm2, %xmm0
    00000160: 	addss	%xmm1, %xmm0
    00000164: 	subss	%xmm2, %xmm0
    00000168: 	addss	%xmm1, %xmm0
    0000016c: 	subss	%xmm2, %xmm0
    00000170: 	addss	%xmm1, %xmm0
    00000174: 	subss	%xmm2, %xmm0
    00000178: 	addss	%xmm1, %xmm0
    0000017c: 	subss	%xmm2, %xmm0
    00000180: 	addss	%xmm1, %xmm0
    00000184: 	subss	%xmm2, %xmm0
    00000188: 	addss	%xmm1, %xmm0
    0000018c: 	subss	%xmm2, %xmm0
    00000190: 	cmpq	%rax, %rbx
    00000193: 	jne	.Ltmp1682 # Offset: 403
.Ltmp1681:
    00000195: 	movaps	%xmm0, %xmm1
    00000198: 	andps	%xmm10, %xmm1
    0000019c: 	cvtss2sd	%xmm1, %xmm1
    000001a0: 	comisd	%xmm9, %xmm1
    000001a5: 	jbe	.Ltmp1683 # Offset: 421
    000001a7: 	divss	%xmm0, %xmm0
.Ltmp1683:
    000001ab: 	cvtss2sd	%xmm0, %xmm0
    000001af: 	andpd	%xmm8, %xmm0
    000001b4: 	comisd	%xmm0, %xmm7
    000001b8: 	jbe	.Ltmp1684 # Offset: 440
    000001be: 	addl	$0x1, %r12d
    000001c2: 	cmpl	%edx, %r12d
    000001c5: 	jl	.Ltmp1685 # Offset: 453
.Ltmp1680:
    000001cb: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001d2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001d9: 	subq	$0x20, %rax
    000001dd: 	cmpq	%rax, %rbx
    000001e0: 	je	.Ltmp1686 # Offset: 480
    000001e6: 	leaq	0x10(%rbx), %rdi
    000001ea: 	movq	0x8(%rbp), %r12
    000001ee: 	movq	%rdi, (%rbx)
    000001f1: 	movq	(%rbp), %r13
    000001f5: 	movq	%r13, %rax
    000001f8: 	addq	%r12, %rax
    000001fb: 	je	.Ltmp1687 # Offset: 507
    000001fd: 	testq	%r13, %r13
    00000200: 	je	.Ltmp1688 # Offset: 512
.Ltmp1687:
    00000206: 	movq	%r12, 0x10(%rsp)
    0000020b: 	cmpq	$0xf, %r12
    0000020f: 	ja	.Ltmp1689 # Offset: 527
    00000215: 	cmpq	$0x1, %r12
    00000219: 	jne	.Ltmp1690 # Offset: 537
    0000021f: 	movzbl	(%r13), %eax
    00000224: 	movb	%al, 0x10(%rbx)
.Ltmp1693:
    00000227: 	movq	%r12, 0x8(%rbx)
    0000022b: 	movb	$0x0, (%rdi,%r12)
    00000230: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000237: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000023e: 	addq	$0x20, %rax
    00000242: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000249: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000250: 	je	.Ltmp1691 # Offset: 592
.Ltmp1694:
    00000256: 	movq	-0x20(%rax), %rbp
    0000025a: 	callq	clock@PLT # Offset: 602
    0000025f: 	movq	%rax, end_time(%rip)
    00000266: 	movq	0x18(%rsp), %rdx
    0000026b: 	subq	%fs:0x28, %rdx
    00000274: 	jne	.Ltmp1692 # Offset: 628
    0000027a: 	subq	start_time(%rip), %rax
    00000281: 	pxor	%xmm0, %xmm0
    00000285: 	movq	%rbp, %rdi
    00000288: 	cvtsi2sd	%rax, %xmm0
    0000028d: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000295: 	addq	$0x28, %rsp
    00000299: 	popq	%rbx
    0000029a: 	popq	%rbp
    0000029b: 	popq	%r12
    0000029d: 	popq	%r13
    0000029f: 	popq	%r14
    000002a1: 	popq	%r15
    000002a3: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 675
    000002a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1684:
    000002b0: 	movq	(%rbp), %rdx
    000002b4: 	movq	%r15, %rsi
    000002b7: 	movl	$0x1, %edi
    000002bc: 	xorl	%eax, %eax
    000002be: 	movss	%xmm4, 0xc(%rsp)
    000002c4: 	addl	$0x1, %r12d
    000002c8: 	callq	__printf_chk@PLT # Offset: 712
    000002cd: 	movl	iterations(%rip), %edx
    000002d3: 	cmpl	%edx, %r12d
    000002d6: 	jge	.Ltmp1680 # Offset: 726
    000002dc: 	movq	DATAat0x4d620(%rip), %rax
    000002e3: 	movss	(%r13), %xmm5
    000002e9: 	pxor	%xmm11, %xmm11
    000002ee: 	movss	DATAat0x4d5d0(%rip), %xmm10
    000002f7: 	movss	0x4(%r13), %xmm6
    000002fd: 	movss	0xc(%rsp), %xmm4
    00000303: 	movq	DATAat0x4d5e0(%rip), %xmm8
    0000030c: 	movq	%rax, %xmm9
    00000311: 	movq	DATAat0x4d628(%rip), %rax
    00000318: 	movq	%rax, %xmm7
    0000031d: 	jmp	.Ltmp1685 # Offset: 797
.Ltmp1689:
    00000322: 	movq	%rbx, %rdi
    00000325: 	leaq	0x10(%rsp), %rsi
    0000032a: 	xorl	%edx, %edx
    0000032c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 812
    00000331: 	movq	%rax, (%rbx)
    00000334: 	movq	%rax, %rdi
    00000337: 	movq	0x10(%rsp), %rax
    0000033c: 	movq	%rax, 0x10(%rbx)
.Ltmp1695:
    00000340: 	movq	%r12, %rdx
    00000343: 	movq	%r13, %rsi
    00000346: 	callq	memcpy@PLT # Offset: 838
    0000034b: 	movq	0x10(%rsp), %r12
    00000350: 	movq	(%rbx), %rdi
    00000353: 	jmp	.Ltmp1693 # Offset: 851
.Ltmp1686:
    00000358: 	movq	%rbp, %rsi
    0000035b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000362: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 866
    00000367: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000036e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000375: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000037c: 	jne	.Ltmp1694 # Offset: 892
.Ltmp1691:
    00000382: 	movq	-0x8(%rdx), %rax
    00000386: 	addq	$0x200, %rax
    0000038c: 	jmp	.Ltmp1694 # Offset: 908
.Ltmp1690:
    00000391: 	testq	%r12, %r12
    00000394: 	je	.Ltmp1693 # Offset: 916
    0000039a: 	jmp	.Ltmp1695 # Offset: 922
.Ltmp1692:
    0000039c: 	callq	__stack_chk_fail@PLT # Offset: 924
.Ltmp1688:
    000003a1: 	leaq	DATAat0x4d018(%rip), %rdi
    000003a8: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 936
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE8If14custom_cse_addIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSE8If14custom_cse_mixIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 140
  State       : disassembled
  Address     : 0x1b130
  Size        : 0x3cd
  MaxSize     : 0x3d0
  Offset      : 0x1b130
  Section     : .text
  Orc Section : .local.text._Z9test_CSE8If14custom_cse_mixIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0139:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rdx, %rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movss	%xmm0, 0xc(%rsp)
    00000021: 	movq	%fs:0x28, %rax
    0000002a: 	movq	%rax, 0x18(%rsp)
    0000002f: 	xorl	%eax, %eax
    00000031: 	callq	clock@PLT # Offset: 49
    00000036: 	movl	iterations(%rip), %edx
    0000003c: 	movss	0xc(%rsp), %xmm4
    00000042: 	movq	%rax, start_time(%rip)
    00000049: 	testl	%edx, %edx
    0000004b: 	jle	.Ltmp1696 # Offset: 75
    00000051: 	leal	-0x2(%r14), %eax
    00000055: 	movss	(%r13), %xmm5
    0000005b: 	movss	0x4(%r13), %xmm6
    00000061: 	xorl	%r12d, %r12d
    00000064: 	movsd	DATAat0x4d620(%rip), %xmm9
    0000006d: 	leaq	0x8(%r13,%rax,4), %rbx
    00000072: 	movq	DATAat0x4d5e0(%rip), %xmm8
    0000007b: 	pxor	%xmm11, %xmm11
    00000080: 	movsd	DATAat0x4d628(%rip), %xmm7
    00000088: 	leaq	DATAat0x4d004(%rip), %r15
    0000008f: 	movss	DATAat0x4d5d0(%rip), %xmm10
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1701:
    000000a0: 	movaps	%xmm5, %xmm0
    000000a3: 	movaps	%xmm5, %xmm12
    000000a7: 	movaps	%xmm6, %xmm2
    000000aa: 	divss	%xmm4, %xmm0
    000000ae: 	subss	%xmm6, %xmm12
    000000b3: 	movaps	%xmm5, %xmm3
    000000b6: 	mulss	%xmm4, %xmm12
    000000bb: 	addss	%xmm0, %xmm12
    000000c0: 	movaps	%xmm5, %xmm0
    000000c3: 	addss	%xmm12, %xmm0
    000000c8: 	addss	%xmm12, %xmm2
    000000cd: 	addss	%xmm12, %xmm0
    000000d2: 	addss	%xmm12, %xmm2
    000000d7: 	movaps	%xmm0, %xmm1
    000000da: 	addss	%xmm11, %xmm1
    000000df: 	subss	%xmm2, %xmm1
    000000e3: 	addss	%xmm0, %xmm1
    000000e7: 	subss	%xmm2, %xmm1
    000000eb: 	addss	%xmm0, %xmm1
    000000ef: 	subss	%xmm2, %xmm1
    000000f3: 	addss	%xmm0, %xmm1
    000000f7: 	subss	%xmm2, %xmm1
    000000fb: 	addss	%xmm0, %xmm1
    000000ff: 	subss	%xmm2, %xmm1
    00000103: 	addss	%xmm0, %xmm1
    00000107: 	subss	%xmm2, %xmm1
    0000010b: 	addss	%xmm0, %xmm1
    0000010f: 	subss	%xmm2, %xmm1
    00000113: 	addss	%xmm1, %xmm0
    00000117: 	subss	%xmm2, %xmm0
    0000011b: 	cmpl	$0x1, %r14d
    0000011f: 	jle	.Ltmp1697 # Offset: 287
    00000125: 	leaq	0x4(%r13), %rax
    00000129: 	nopl	(%rax) # Size: 7
.Ltmp1698:
    00000130: 	movaps	%xmm3, %xmm1
    00000133: 	movss	(%rax), %xmm3
    00000137: 	addq	$0x4, %rax
    0000013b: 	movaps	%xmm1, %xmm2
    0000013e: 	movaps	%xmm1, %xmm12
    00000142: 	divss	%xmm4, %xmm2
    00000146: 	subss	%xmm3, %xmm12
    0000014b: 	mulss	%xmm4, %xmm12
    00000150: 	addss	%xmm2, %xmm12
    00000155: 	movaps	%xmm3, %xmm2
    00000158: 	addss	%xmm12, %xmm1
    0000015d: 	addss	%xmm12, %xmm2
    00000162: 	addss	%xmm12, %xmm1
    00000167: 	addss	%xmm12, %xmm2
    0000016c: 	addss	%xmm1, %xmm0
    00000170: 	subss	%xmm2, %xmm0
    00000174: 	addss	%xmm1, %xmm0
    00000178: 	subss	%xmm2, %xmm0
    0000017c: 	addss	%xmm1, %xmm0
    00000180: 	subss	%xmm2, %xmm0
    00000184: 	addss	%xmm1, %xmm0
    00000188: 	subss	%xmm2, %xmm0
    0000018c: 	addss	%xmm1, %xmm0
    00000190: 	subss	%xmm2, %xmm0
    00000194: 	addss	%xmm1, %xmm0
    00000198: 	subss	%xmm2, %xmm0
    0000019c: 	addss	%xmm1, %xmm0
    000001a0: 	subss	%xmm2, %xmm0
    000001a4: 	addss	%xmm1, %xmm0
    000001a8: 	subss	%xmm2, %xmm0
    000001ac: 	cmpq	%rax, %rbx
    000001af: 	jne	.Ltmp1698 # Offset: 431
.Ltmp1697:
    000001b5: 	movaps	%xmm0, %xmm1
    000001b8: 	andps	%xmm10, %xmm1
    000001bc: 	cvtss2sd	%xmm1, %xmm1
    000001c0: 	comisd	%xmm9, %xmm1
    000001c5: 	jbe	.Ltmp1699 # Offset: 453
    000001c7: 	divss	%xmm0, %xmm0
.Ltmp1699:
    000001cb: 	cvtss2sd	%xmm0, %xmm0
    000001cf: 	andpd	%xmm8, %xmm0
    000001d4: 	comisd	%xmm0, %xmm7
    000001d8: 	jbe	.Ltmp1700 # Offset: 472
    000001de: 	addl	$0x1, %r12d
    000001e2: 	cmpl	%edx, %r12d
    000001e5: 	jl	.Ltmp1701 # Offset: 485
.Ltmp1696:
    000001eb: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001f2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001f9: 	subq	$0x20, %rax
    000001fd: 	cmpq	%rax, %rbx
    00000200: 	je	.Ltmp1702 # Offset: 512
    00000206: 	leaq	0x10(%rbx), %rdi
    0000020a: 	movq	0x8(%rbp), %r12
    0000020e: 	movq	%rdi, (%rbx)
    00000211: 	movq	(%rbp), %r13
    00000215: 	movq	%r13, %rax
    00000218: 	addq	%r12, %rax
    0000021b: 	je	.Ltmp1703 # Offset: 539
    0000021d: 	testq	%r13, %r13
    00000220: 	je	.Ltmp1704 # Offset: 544
.Ltmp1703:
    00000226: 	movq	%r12, 0x10(%rsp)
    0000022b: 	cmpq	$0xf, %r12
    0000022f: 	ja	.Ltmp1705 # Offset: 559
    00000235: 	cmpq	$0x1, %r12
    00000239: 	jne	.Ltmp1706 # Offset: 569
    0000023f: 	movzbl	(%r13), %eax
    00000244: 	movb	%al, 0x10(%rbx)
.Ltmp1709:
    00000247: 	movq	%r12, 0x8(%rbx)
    0000024b: 	movb	$0x0, (%rdi,%r12)
    00000250: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000257: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000025e: 	addq	$0x20, %rax
    00000262: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000269: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000270: 	je	.Ltmp1707 # Offset: 624
.Ltmp1710:
    00000276: 	movq	-0x20(%rax), %rbp
    0000027a: 	callq	clock@PLT # Offset: 634
    0000027f: 	movq	%rax, end_time(%rip)
    00000286: 	movq	0x18(%rsp), %rdx
    0000028b: 	subq	%fs:0x28, %rdx
    00000294: 	jne	.Ltmp1708 # Offset: 660
    0000029a: 	subq	start_time(%rip), %rax
    000002a1: 	pxor	%xmm0, %xmm0
    000002a5: 	movq	%rbp, %rdi
    000002a8: 	cvtsi2sd	%rax, %xmm0
    000002ad: 	divsd	DATAat0x4d640(%rip), %xmm0
    000002b5: 	addq	$0x28, %rsp
    000002b9: 	popq	%rbx
    000002ba: 	popq	%rbp
    000002bb: 	popq	%r12
    000002bd: 	popq	%r13
    000002bf: 	popq	%r14
    000002c1: 	popq	%r15
    000002c3: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 707
    000002c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1700:
    000002d0: 	movq	(%rbp), %rdx
    000002d4: 	movq	%r15, %rsi
    000002d7: 	movl	$0x1, %edi
    000002dc: 	xorl	%eax, %eax
    000002de: 	movss	%xmm4, 0xc(%rsp)
    000002e4: 	addl	$0x1, %r12d
    000002e8: 	callq	__printf_chk@PLT # Offset: 744
    000002ed: 	movl	iterations(%rip), %edx
    000002f3: 	cmpl	%edx, %r12d
    000002f6: 	jge	.Ltmp1696 # Offset: 758
    000002fc: 	movq	DATAat0x4d620(%rip), %rax
    00000303: 	movss	(%r13), %xmm5
    00000309: 	pxor	%xmm11, %xmm11
    0000030e: 	movss	DATAat0x4d5d0(%rip), %xmm10
    00000317: 	movss	0x4(%r13), %xmm6
    0000031d: 	movss	0xc(%rsp), %xmm4
    00000323: 	movq	DATAat0x4d5e0(%rip), %xmm8
    0000032c: 	movq	%rax, %xmm9
    00000331: 	movq	DATAat0x4d628(%rip), %rax
    00000338: 	movq	%rax, %xmm7
    0000033d: 	jmp	.Ltmp1701 # Offset: 829
.Ltmp1705:
    00000342: 	movq	%rbx, %rdi
    00000345: 	leaq	0x10(%rsp), %rsi
    0000034a: 	xorl	%edx, %edx
    0000034c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 844
    00000351: 	movq	%rax, (%rbx)
    00000354: 	movq	%rax, %rdi
    00000357: 	movq	0x10(%rsp), %rax
    0000035c: 	movq	%rax, 0x10(%rbx)
.Ltmp1711:
    00000360: 	movq	%r12, %rdx
    00000363: 	movq	%r13, %rsi
    00000366: 	callq	memcpy@PLT # Offset: 870
    0000036b: 	movq	0x10(%rsp), %r12
    00000370: 	movq	(%rbx), %rdi
    00000373: 	jmp	.Ltmp1709 # Offset: 883
.Ltmp1702:
    00000378: 	movq	%rbp, %rsi
    0000037b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000382: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 898
    00000387: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000038e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000395: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000039c: 	jne	.Ltmp1710 # Offset: 924
.Ltmp1707:
    000003a2: 	movq	-0x8(%rdx), %rax
    000003a6: 	addq	$0x200, %rax
    000003ac: 	jmp	.Ltmp1710 # Offset: 940
.Ltmp1706:
    000003b1: 	testq	%r12, %r12
    000003b4: 	je	.Ltmp1709 # Offset: 948
    000003ba: 	jmp	.Ltmp1711 # Offset: 954
.Ltmp1708:
    000003bc: 	callq	__stack_chk_fail@PLT # Offset: 956
.Ltmp1704:
    000003c1: 	leaq	DATAat0x4d018(%rip), %rdi
    000003c8: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 968
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSE8If14custom_cse_mixIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSENIi14custom_cse_mulIiELi4EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 141
  State       : disassembled
  Address     : 0x1b500
  Size        : 0x3bb
  MaxSize     : 0x3c0
  Offset      : 0x1b500
  Section     : .text
  Orc Section : .local.text._Z9test_CSENIi14custom_cse_mulIiELi4EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0140:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	movl	%edx, %ebp
    00000015: 	pushq	%rbx
    00000016: 	subq	$0x38, %rsp
    0000001a: 	movq	%rcx, 0x18(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x28(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r11d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r11d, %r11d
    00000045: 	jle	.Ltmp1712 # Offset: 69
    0000004b: 	leal	-0x1(%r14), %r15d
    0000004f: 	leal	-0x2(%r14), %eax
    00000053: 	xorl	%r13d, %r13d
    00000056: 	movl	%eax, 0xc(%rsp)
    0000005a: 	movl	%r15d, %eax
    0000005d: 	shrl	$0x2, %eax
    00000060: 	subl	$0x1, %eax
    00000063: 	shlq	$0x4, %rax
    00000067: 	leaq	0x10(%r12,%rax), %rbx
    0000006c: 	movl	%r15d, %eax
    0000006f: 	andl	$-0x4, %eax
    00000072: 	movl	%eax, 0x10(%rsp)
    00000076: 	addl	$0x1, %eax
    00000079: 	movl	%eax, 0x14(%rsp)
.Ltmp1725:
    0000007d: 	movl	(%r12), %r9d
    00000081: 	movl	0x4(%r12), %r8d
.Ltmp1717:
    00000086: 	movl	%r9d, %eax
    00000089: 	imull	%r8d, %eax
    0000008d: 	addl	%ebp, %eax
    0000008f: 	leal	(%r9,%rax,2), %ecx
    00000093: 	leal	(%r8,%rax,2), %edx
    00000097: 	movl	%r9d, %eax
    0000009a: 	subl	%r8d, %eax
    0000009d: 	addl	%ecx, %eax
    0000009f: 	subl	%edx, %eax
    000000a1: 	addl	%ecx, %eax
    000000a3: 	subl	%edx, %eax
    000000a5: 	addl	%ecx, %eax
    000000a7: 	subl	%edx, %eax
    000000a9: 	cmpl	$0x1, %r14d
    000000ad: 	jle	.Ltmp1713 # Offset: 173
    000000b3: 	cmpl	$0x2, 0xc(%rsp)
    000000b8: 	jbe	.Ltmp1714 # Offset: 184
    000000be: 	movd	%ebp, %xmm7
    000000c2: 	movq	%r12, %rdx
    000000c5: 	pxor	%xmm0, %xmm0
    000000c9: 	pshufd	$0x0, %xmm7, %xmm4
    000000ce: 	nop # Size: 2
.Ltmp1715:
    000000d0: 	movdqu	(%rdx), %xmm2
    000000d4: 	movdqu	0x4(%rdx), %xmm1
    000000d9: 	addq	$0x10, %rdx
    000000dd: 	movdqa	%xmm1, %xmm5
    000000e1: 	movdqa	%xmm2, %xmm6
    000000e5: 	movdqa	%xmm1, %xmm3
    000000e9: 	psrlq	$0x20, %xmm5
    000000ee: 	psrlq	$0x20, %xmm6
    000000f3: 	pmuludq	%xmm2, %xmm3
    000000f7: 	pmuludq	%xmm6, %xmm5
    000000fb: 	pshufd	$0x8, %xmm3, %xmm3
    00000100: 	pshufd	$0x8, %xmm5, %xmm5
    00000105: 	punpckldq	%xmm5, %xmm3
    00000109: 	paddd	%xmm4, %xmm3
    0000010d: 	paddd	%xmm3, %xmm2
    00000111: 	paddd	%xmm3, %xmm1
    00000115: 	paddd	%xmm3, %xmm2
    00000119: 	paddd	%xmm3, %xmm1
    0000011d: 	paddd	%xmm2, %xmm0
    00000121: 	psubd	%xmm1, %xmm0
    00000125: 	paddd	%xmm2, %xmm0
    00000129: 	psubd	%xmm1, %xmm0
    0000012d: 	paddd	%xmm2, %xmm0
    00000131: 	psubd	%xmm1, %xmm0
    00000135: 	paddd	%xmm2, %xmm0
    00000139: 	psubd	%xmm1, %xmm0
    0000013d: 	cmpq	%rdx, %rbx
    00000140: 	jne	.Ltmp1715 # Offset: 320
    00000142: 	movdqa	%xmm0, %xmm1
    00000146: 	psrldq	$0x8, %xmm1
    0000014b: 	paddd	%xmm1, %xmm0
    0000014f: 	movdqa	%xmm0, %xmm1
    00000153: 	psrldq	$0x4, %xmm1
    00000158: 	paddd	%xmm1, %xmm0
    0000015c: 	movd	%xmm0, %edx
    00000160: 	addl	%edx, %eax
    00000162: 	cmpl	%r15d, 0x10(%rsp)
    00000167: 	je	.Ltmp1713 # Offset: 359
    0000016d: 	movl	0x14(%rsp), %ecx
.Ltmp1726:
    00000171: 	movslq	%ecx, %rdx
    00000174: 	shlq	$0x2, %rdx
    00000178: 	leaq	(%r12,%rdx), %rsi
    0000017c: 	movl	-0x4(%rsi), %r10d
    00000180: 	movl	(%rsi), %edi
    00000182: 	movl	%r10d, %esi
    00000185: 	imull	%edi, %esi
    00000188: 	addl	%ebp, %esi
    0000018a: 	leal	(%r10,%rsi,2), %r10d
    0000018e: 	leal	(%rdi,%rsi,2), %esi
    00000191: 	addl	%r10d, %eax
    00000194: 	subl	%esi, %eax
    00000196: 	addl	%r10d, %eax
    00000199: 	subl	%esi, %eax
    0000019b: 	addl	%r10d, %eax
    0000019e: 	subl	%esi, %eax
    000001a0: 	addl	%r10d, %eax
    000001a3: 	subl	%esi, %eax
    000001a5: 	leal	0x1(%rcx), %esi
    000001a8: 	cmpl	%esi, %r14d
    000001ab: 	jle	.Ltmp1713 # Offset: 427
    000001ad: 	movl	0x4(%r12,%rdx), %r10d
    000001b2: 	addl	$0x2, %ecx
    000001b5: 	movl	%r10d, %esi
    000001b8: 	imull	%edi, %esi
    000001bb: 	addl	%ebp, %esi
    000001bd: 	leal	(%rdi,%rsi,2), %edi
    000001c0: 	leal	(%r10,%rsi,2), %esi
    000001c4: 	leal	(%rax,%rdi,2), %eax
    000001c7: 	subl	%esi, %eax
    000001c9: 	subl	%esi, %eax
    000001cb: 	addl	%edi, %eax
    000001cd: 	subl	%esi, %eax
    000001cf: 	addl	%edi, %eax
    000001d1: 	subl	%esi, %eax
    000001d3: 	cmpl	%ecx, %r14d
    000001d6: 	jle	.Ltmp1713 # Offset: 470
    000001d8: 	movl	0x8(%r12,%rdx), %esi
    000001dd: 	movl	%r10d, %edx
    000001e0: 	imull	%esi, %edx
    000001e3: 	addl	%ebp, %edx
    000001e5: 	leal	(%r10,%rdx,2), %ecx
    000001e9: 	leal	(%rsi,%rdx,2), %edx
    000001ec: 	leal	(%rax,%rcx,2), %eax
    000001ef: 	subl	%edx, %eax
    000001f1: 	subl	%edx, %eax
    000001f3: 	addl	%ecx, %eax
    000001f5: 	subl	%edx, %eax
    000001f7: 	addl	%ecx, %eax
    000001f9: 	subl	%edx, %eax
.Ltmp1713:
    000001fb: 	testl	%eax, %eax
    000001fd: 	jne	.Ltmp1716 # Offset: 509
    00000203: 	addl	$0x1, %r13d
    00000207: 	cmpl	%r11d, %r13d
    0000020a: 	jl	.Ltmp1717 # Offset: 522
.Ltmp1712:
    00000210: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000217: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000021e: 	subq	$0x20, %rax
    00000222: 	cmpq	%rax, %rbx
    00000225: 	je	.Ltmp1718 # Offset: 549
    0000022b: 	movq	0x18(%rsp), %rax
    00000230: 	leaq	0x10(%rbx), %rdi
    00000234: 	movq	%rdi, (%rbx)
    00000237: 	movq	(%rax), %rbp
    0000023a: 	movq	0x8(%rax), %r12
    0000023e: 	movq	%rbp, %rax
    00000241: 	addq	%r12, %rax
    00000244: 	je	.Ltmp1719 # Offset: 580
    00000246: 	testq	%rbp, %rbp
    00000249: 	je	.Ltmp1720 # Offset: 585
.Ltmp1719:
    0000024f: 	movq	%r12, 0x20(%rsp)
    00000254: 	cmpq	$0xf, %r12
    00000258: 	ja	.Ltmp1721 # Offset: 600
    0000025e: 	cmpq	$0x1, %r12
    00000262: 	jne	.Ltmp1722 # Offset: 610
    00000268: 	movzbl	(%rbp), %eax
    0000026c: 	movb	%al, 0x10(%rbx)
.Ltmp1727:
    0000026f: 	movq	%r12, 0x8(%rbx)
    00000273: 	movb	$0x0, (%rdi,%r12)
    00000278: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000027f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000286: 	addq	$0x20, %rax
    0000028a: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000291: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000298: 	je	.Ltmp1723 # Offset: 664
.Ltmp1728:
    0000029e: 	movq	-0x20(%rax), %rbp
    000002a2: 	callq	clock@PLT # Offset: 674
    000002a7: 	movq	%rax, end_time(%rip)
    000002ae: 	movq	0x28(%rsp), %rdx
    000002b3: 	subq	%fs:0x28, %rdx
    000002bc: 	jne	.Ltmp1724 # Offset: 700
    000002c2: 	subq	start_time(%rip), %rax
    000002c9: 	pxor	%xmm0, %xmm0
    000002cd: 	movq	%rbp, %rdi
    000002d0: 	cvtsi2sd	%rax, %xmm0
    000002d5: 	divsd	DATAat0x4d640(%rip), %xmm0
    000002dd: 	addq	$0x38, %rsp
    000002e1: 	popq	%rbx
    000002e2: 	popq	%rbp
    000002e3: 	popq	%r12
    000002e5: 	popq	%r13
    000002e7: 	popq	%r14
    000002e9: 	popq	%r15
    000002eb: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 747
.Ltmp1716:
    000002f0: 	movq	0x18(%rsp), %rax
    000002f5: 	leaq	DATAat0x4d004(%rip), %rsi
    000002fc: 	movl	$0x1, %edi
    00000301: 	addl	$0x1, %r13d
    00000305: 	movq	(%rax), %rdx
    00000308: 	xorl	%eax, %eax
    0000030a: 	callq	__printf_chk@PLT # Offset: 778
    0000030f: 	movl	iterations(%rip), %r11d
    00000316: 	cmpl	%r11d, %r13d
    00000319: 	jl	.Ltmp1725 # Offset: 793
    0000031f: 	jmp	.Ltmp1712 # Offset: 799
.Ltmp1714:
    00000324: 	movl	$0x1, %ecx
    00000329: 	jmp	.Ltmp1726 # Offset: 809
.Ltmp1721:
    0000032e: 	movq	%rbx, %rdi
    00000331: 	leaq	0x20(%rsp), %rsi
    00000336: 	xorl	%edx, %edx
    00000338: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 824
    0000033d: 	movq	%rax, (%rbx)
    00000340: 	movq	%rax, %rdi
    00000343: 	movq	0x20(%rsp), %rax
    00000348: 	movq	%rax, 0x10(%rbx)
.Ltmp1729:
    0000034c: 	movq	%r12, %rdx
    0000034f: 	movq	%rbp, %rsi
    00000352: 	callq	memcpy@PLT # Offset: 850
    00000357: 	movq	0x20(%rsp), %r12
    0000035c: 	movq	(%rbx), %rdi
    0000035f: 	jmp	.Ltmp1727 # Offset: 863
.Ltmp1718:
    00000364: 	movq	0x18(%rsp), %rsi
    00000369: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000370: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 880
    00000375: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000037c: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000383: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000038a: 	jne	.Ltmp1728 # Offset: 906
.Ltmp1723:
    00000390: 	movq	-0x8(%rdx), %rax
    00000394: 	addq	$0x200, %rax
    0000039a: 	jmp	.Ltmp1728 # Offset: 922
.Ltmp1722:
    0000039f: 	testq	%r12, %r12
    000003a2: 	je	.Ltmp1727 # Offset: 930
    000003a8: 	jmp	.Ltmp1729 # Offset: 936
.Ltmp1724:
    000003aa: 	callq	__stack_chk_fail@PLT # Offset: 938
.Ltmp1720:
    000003af: 	leaq	DATAat0x4d018(%rip), %rdi
    000003b6: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 950
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSENIi14custom_cse_mulIiELi4EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSENIj14custom_cse_divIjELi4EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 142
  State       : disassembled
  Address     : 0x1b8c0
  Size        : 0x267
  MaxSize     : 0x270
  Offset      : 0x1b8c0
  Section     : .text
  Orc Section : .local.text._Z9test_CSENIj14custom_cse_divIjELi4EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0141:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rcx, %rbp
    00000016: 	pushq	%rbx
    00000017: 	movl	%edx, %ebx
    00000019: 	subq	$0x18, %rsp
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x8(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	callq	clock@PLT # Offset: 45
    00000032: 	movl	iterations(%rip), %r11d
    00000039: 	movq	%rax, start_time(%rip)
    00000040: 	testl	%r11d, %r11d
    00000043: 	jle	.Ltmp1730 # Offset: 67
    00000049: 	leal	-0x2(%r14), %eax
    0000004d: 	xorl	%r15d, %r15d
    00000050: 	leaq	0x8(%r13,%rax,4), %r12
.Ltmp1742:
    00000055: 	movl	(%r13), %r9d
    00000059: 	movl	0x4(%r13), %r10d
.Ltmp1734:
    0000005d: 	movl	%r10d, %eax
    00000060: 	xorl	%edx, %edx
    00000062: 	movl	%r9d, %ecx
    00000065: 	divl	%r9d
    00000068: 	addl	%ebx, %eax
    0000006a: 	addl	%eax, %eax
    0000006c: 	leal	(%r9,%rax), %edi
    00000070: 	leal	(%r10,%rax), %edx
    00000074: 	shll	$0x2, %edi
    00000077: 	subl	%edx, %edi
    00000079: 	subl	%edx, %edi
    0000007b: 	addl	%edx, %edx
    0000007d: 	subl	%edx, %edi
    0000007f: 	cmpl	$0x1, %r14d
    00000083: 	jle	.Ltmp1731 # Offset: 131
    00000085: 	leaq	0x4(%r13), %rsi
    00000089: 	nopl	(%rax) # Size: 7
.Ltmp1732:
    00000090: 	movl	%ecx, %r8d
    00000093: 	movl	(%rsi), %ecx
    00000095: 	xorl	%edx, %edx
    00000097: 	addq	$0x4, %rsi
    0000009b: 	movl	%ecx, %eax
    0000009d: 	divl	%r8d
    000000a0: 	addl	%ebx, %eax
    000000a2: 	addl	%eax, %eax
    000000a4: 	leal	(%rax,%rcx), %edx
    000000a7: 	addl	%r8d, %eax
    000000aa: 	shll	$0x2, %eax
    000000ad: 	subl	%edx, %eax
    000000af: 	subl	%edx, %eax
    000000b1: 	addl	%edx, %edx
    000000b3: 	subl	%edx, %eax
    000000b5: 	addl	%eax, %edi
    000000b7: 	cmpq	%rsi, %r12
    000000ba: 	jne	.Ltmp1732 # Offset: 186
.Ltmp1731:
    000000bc: 	testl	%edi, %edi
    000000be: 	jne	.Ltmp1733 # Offset: 190
    000000c4: 	addl	$0x1, %r15d
    000000c8: 	cmpl	%r11d, %r15d
    000000cb: 	jl	.Ltmp1734 # Offset: 203
.Ltmp1730:
    000000cd: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000d4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000db: 	subq	$0x20, %rax
    000000df: 	cmpq	%rax, %rbx
    000000e2: 	je	.Ltmp1735 # Offset: 226
    000000e8: 	leaq	0x10(%rbx), %rdi
    000000ec: 	movq	0x8(%rbp), %r12
    000000f0: 	movq	%rdi, (%rbx)
    000000f3: 	movq	(%rbp), %r13
    000000f7: 	movq	%r13, %rax
    000000fa: 	addq	%r12, %rax
    000000fd: 	je	.Ltmp1736 # Offset: 253
    000000ff: 	testq	%r13, %r13
    00000102: 	je	.Ltmp1737 # Offset: 258
.Ltmp1736:
    00000108: 	movq	%r12, (%rsp)
    0000010c: 	cmpq	$0xf, %r12
    00000110: 	ja	.Ltmp1738 # Offset: 272
    00000116: 	cmpq	$0x1, %r12
    0000011a: 	jne	.Ltmp1739 # Offset: 282
    00000120: 	movzbl	(%r13), %eax
    00000125: 	movb	%al, 0x10(%rbx)
.Ltmp1743:
    00000128: 	movq	%r12, 0x8(%rbx)
    0000012c: 	movb	$0x0, (%rdi,%r12)
    00000131: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000138: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000013f: 	addq	$0x20, %rax
    00000143: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000014a: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000151: 	je	.Ltmp1740 # Offset: 337
.Ltmp1744:
    00000157: 	movq	-0x20(%rax), %rbp
    0000015b: 	callq	clock@PLT # Offset: 347
    00000160: 	movq	%rax, end_time(%rip)
    00000167: 	movq	0x8(%rsp), %rdx
    0000016c: 	subq	%fs:0x28, %rdx
    00000175: 	jne	.Ltmp1741 # Offset: 373
    0000017b: 	subq	start_time(%rip), %rax
    00000182: 	pxor	%xmm0, %xmm0
    00000186: 	movq	%rbp, %rdi
    00000189: 	cvtsi2sd	%rax, %xmm0
    0000018e: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000196: 	addq	$0x18, %rsp
    0000019a: 	popq	%rbx
    0000019b: 	popq	%rbp
    0000019c: 	popq	%r12
    0000019e: 	popq	%r13
    000001a0: 	popq	%r14
    000001a2: 	popq	%r15
    000001a4: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 420
    000001a9: 	nopl	(%rax) # Size: 7
.Ltmp1733:
    000001b0: 	movq	(%rbp), %rdx
    000001b4: 	movl	$0x1, %edi
    000001b9: 	xorl	%eax, %eax
    000001bb: 	addl	$0x1, %r15d
    000001bf: 	leaq	DATAat0x4d004(%rip), %rsi
    000001c6: 	callq	__printf_chk@PLT # Offset: 454
    000001cb: 	movl	iterations(%rip), %r11d
    000001d2: 	cmpl	%r11d, %r15d
    000001d5: 	jl	.Ltmp1742 # Offset: 469
    000001db: 	jmp	.Ltmp1730 # Offset: 475
.Ltmp1738:
    000001e0: 	movq	%rbx, %rdi
    000001e3: 	movq	%rsp, %rsi
    000001e6: 	xorl	%edx, %edx
    000001e8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 488
    000001ed: 	movq	%rax, (%rbx)
    000001f0: 	movq	%rax, %rdi
    000001f3: 	movq	(%rsp), %rax
    000001f7: 	movq	%rax, 0x10(%rbx)
.Ltmp1745:
    000001fb: 	movq	%r12, %rdx
    000001fe: 	movq	%r13, %rsi
    00000201: 	callq	memcpy@PLT # Offset: 513
    00000206: 	movq	(%rsp), %r12
    0000020a: 	movq	(%rbx), %rdi
    0000020d: 	jmp	.Ltmp1743 # Offset: 525
.Ltmp1735:
    00000212: 	movq	%rbp, %rsi
    00000215: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000021c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 540
    00000221: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000228: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000022f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000236: 	jne	.Ltmp1744 # Offset: 566
.Ltmp1740:
    0000023c: 	movq	-0x8(%rdx), %rax
    00000240: 	addq	$0x200, %rax
    00000246: 	jmp	.Ltmp1744 # Offset: 582
.Ltmp1739:
    0000024b: 	testq	%r12, %r12
    0000024e: 	je	.Ltmp1743 # Offset: 590
    00000254: 	jmp	.Ltmp1745 # Offset: 596
.Ltmp1741:
    00000256: 	callq	__stack_chk_fail@PLT # Offset: 598
.Ltmp1737:
    0000025b: 	leaq	DATAat0x4d018(%rip), %rdi
    00000262: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 610
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSENIj14custom_cse_divIjELi4EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSENIj14custom_cse_subIjELi4EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 143
  State       : disassembled
  Address     : 0x1bb30
  Size        : 0x3b5
  MaxSize     : 0x3c0
  Offset      : 0x1bb30
  Section     : .text
  Orc Section : .local.text._Z9test_CSENIj14custom_cse_subIjELi4EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0142:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdi, %rbx
    00000016: 	subq	$0x38, %rsp
    0000001a: 	movq	%rcx, 0x18(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x28(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r10d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r10d, %r10d
    00000045: 	jle	.Ltmp1746 # Offset: 69
    0000004b: 	leal	-0x1(%r14), %r8d
    0000004f: 	leal	-0x2(%r14), %eax
    00000053: 	movl	(%rbx), %r9d
    00000056: 	movl	0x4(%rbx), %edi
    00000059: 	movl	%eax, 0xc(%rsp)
    0000005d: 	movl	%r8d, %eax
    00000060: 	movl	%r8d, %r15d
    00000063: 	xorl	%r13d, %r13d
    00000066: 	shrl	$0x2, %eax
    00000069: 	andl	$-0x4, %r15d
    0000006d: 	subl	$0x1, %eax
    00000070: 	shlq	$0x4, %rax
    00000074: 	leaq	0x10(%rbx,%rax), %r12
    00000079: 	leal	0x1(%r15), %eax
    0000007d: 	movl	%eax, 0x10(%rsp)
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp1752:
    00000088: 	leal	(%rbp,%rdi), %eax
    0000008c: 	subl	%r9d, %eax
    0000008f: 	addl	%eax, %eax
    00000091: 	leal	(%rdi,%rax), %edx
    00000094: 	addl	%r9d, %eax
    00000097: 	shll	$0x2, %eax
    0000009a: 	subl	%edx, %eax
    0000009c: 	subl	%edx, %eax
    0000009e: 	addl	%edx, %edx
    000000a0: 	subl	%edx, %eax
    000000a2: 	cmpl	$0x1, %r14d
    000000a6: 	jle	.Ltmp1747 # Offset: 166
    000000ac: 	cmpl	$0x2, 0xc(%rsp)
    000000b1: 	jbe	.Ltmp1748 # Offset: 177
    000000b7: 	movd	%ebp, %xmm7
    000000bb: 	movq	%rbx, %rdx
    000000be: 	pxor	%xmm3, %xmm3
    000000c2: 	pshufd	$0x0, %xmm7, %xmm4
    000000c7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1749:
    000000d0: 	movdqu	0x4(%rdx), %xmm0
    000000d5: 	movdqu	(%rdx), %xmm5
    000000d9: 	addq	$0x10, %rdx
    000000dd: 	movdqu	-0xc(%rdx), %xmm1
    000000e2: 	paddd	%xmm4, %xmm0
    000000e6: 	psubd	%xmm5, %xmm0
    000000ea: 	pslld	$0x1, %xmm0
    000000ef: 	paddd	%xmm0, %xmm1
    000000f3: 	paddd	%xmm5, %xmm0
    000000f7: 	movdqa	%xmm1, %xmm2
    000000fb: 	pslld	$0x2, %xmm0
    00000100: 	pslld	$0x1, %xmm2
    00000105: 	psubd	%xmm1, %xmm0
    00000109: 	paddd	%xmm2, %xmm1
    0000010d: 	psubd	%xmm1, %xmm0
    00000111: 	paddd	%xmm0, %xmm3
    00000115: 	cmpq	%r12, %rdx
    00000118: 	jne	.Ltmp1749 # Offset: 280
    0000011a: 	movdqa	%xmm3, %xmm0
    0000011e: 	psrldq	$0x8, %xmm0
    00000123: 	paddd	%xmm0, %xmm3
    00000127: 	movdqa	%xmm3, %xmm0
    0000012b: 	psrldq	$0x4, %xmm0
    00000130: 	paddd	%xmm0, %xmm3
    00000134: 	movd	%xmm3, %edx
    00000138: 	addl	%edx, %eax
    0000013a: 	cmpl	%r8d, %r15d
    0000013d: 	je	.Ltmp1747 # Offset: 317
    00000143: 	movl	0x10(%rsp), %edx
    00000147: 	movl	%r15d, %esi
.Ltmp1760:
    0000014a: 	movl	%r14d, %r11d
    0000014d: 	subl	%esi, %r11d
    00000150: 	leal	-0x1(%r11), %ecx
    00000154: 	cmpl	$0x2, %r11d
    00000158: 	je	.Ltmp1750 # Offset: 344
    0000015a: 	movq	0x4(%rbx,%rsi,4), %xmm1
    00000160: 	movq	(%rbx,%rsi,4), %xmm2
    00000165: 	movd	%ebp, %xmm7
    00000169: 	pshufd	$0xe0, %xmm7, %xmm3
    0000016e: 	movdqa	%xmm1, %xmm0
    00000172: 	psubd	%xmm2, %xmm0
    00000176: 	paddd	%xmm3, %xmm0
    0000017a: 	pslld	$0x1, %xmm0
    0000017f: 	paddd	%xmm0, %xmm1
    00000183: 	paddd	%xmm2, %xmm0
    00000187: 	movdqa	%xmm1, %xmm2
    0000018b: 	pslld	$0x2, %xmm0
    00000190: 	pslld	$0x1, %xmm2
    00000195: 	psubd	%xmm1, %xmm0
    00000199: 	paddd	%xmm2, %xmm1
    0000019d: 	psubd	%xmm1, %xmm0
    000001a1: 	movd	%xmm0, %esi
    000001a5: 	pshufd	$0xe5, %xmm0, %xmm7
    000001aa: 	movd	%xmm7, %r11d
    000001af: 	addl	%r11d, %esi
    000001b2: 	addl	%esi, %eax
    000001b4: 	movl	%ecx, %esi
    000001b6: 	andl	$-0x2, %esi
    000001b9: 	addl	%esi, %edx
    000001bb: 	cmpl	%ecx, %esi
    000001bd: 	je	.Ltmp1747 # Offset: 445
.Ltmp1750:
    000001bf: 	movslq	%edx, %rdx
    000001c2: 	movl	-0x4(%rbx,%rdx,4), %esi
    000001c6: 	movl	(%rbx,%rdx,4), %edx
    000001c9: 	leal	(%rbp,%rdx), %ecx
    000001cd: 	subl	%esi, %ecx
    000001cf: 	addl	%ecx, %ecx
    000001d1: 	addl	%ecx, %edx
    000001d3: 	addl	%esi, %ecx
    000001d5: 	leal	(%rax,%rcx,4), %eax
    000001d8: 	subl	%edx, %eax
    000001da: 	subl	%edx, %eax
    000001dc: 	addl	%edx, %edx
    000001de: 	subl	%edx, %eax
.Ltmp1747:
    000001e0: 	testl	%eax, %eax
    000001e2: 	jne	.Ltmp1751 # Offset: 482
    000001e8: 	addl	$0x1, %r13d
    000001ec: 	cmpl	%r10d, %r13d
    000001ef: 	jl	.Ltmp1752 # Offset: 495
.Ltmp1746:
    000001f5: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001fc: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000203: 	subq	$0x20, %rax
    00000207: 	cmpq	%rax, %rbx
    0000020a: 	je	.Ltmp1753 # Offset: 522
    00000210: 	movq	0x18(%rsp), %rax
    00000215: 	leaq	0x10(%rbx), %rdi
    00000219: 	movq	%rdi, (%rbx)
    0000021c: 	movq	(%rax), %rbp
    0000021f: 	movq	0x8(%rax), %r12
    00000223: 	movq	%rbp, %rax
    00000226: 	addq	%r12, %rax
    00000229: 	je	.Ltmp1754 # Offset: 553
    0000022b: 	testq	%rbp, %rbp
    0000022e: 	je	.Ltmp1755 # Offset: 558
.Ltmp1754:
    00000234: 	movq	%r12, 0x20(%rsp)
    00000239: 	cmpq	$0xf, %r12
    0000023d: 	ja	.Ltmp1756 # Offset: 573
    00000243: 	cmpq	$0x1, %r12
    00000247: 	jne	.Ltmp1757 # Offset: 583
    0000024d: 	movzbl	(%rbp), %eax
    00000251: 	movb	%al, 0x10(%rbx)
.Ltmp1761:
    00000254: 	movq	%r12, 0x8(%rbx)
    00000258: 	movb	$0x0, (%rdi,%r12)
    0000025d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000264: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000026b: 	addq	$0x20, %rax
    0000026f: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000276: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000027d: 	je	.Ltmp1758 # Offset: 637
.Ltmp1762:
    00000283: 	movq	-0x20(%rax), %rbp
    00000287: 	callq	clock@PLT # Offset: 647
    0000028c: 	movq	%rax, end_time(%rip)
    00000293: 	movq	0x28(%rsp), %rdx
    00000298: 	subq	%fs:0x28, %rdx
    000002a1: 	jne	.Ltmp1759 # Offset: 673
    000002a7: 	subq	start_time(%rip), %rax
    000002ae: 	pxor	%xmm0, %xmm0
    000002b2: 	movq	%rbp, %rdi
    000002b5: 	cvtsi2sd	%rax, %xmm0
    000002ba: 	divsd	DATAat0x4d640(%rip), %xmm0
    000002c2: 	addq	$0x38, %rsp
    000002c6: 	popq	%rbx
    000002c7: 	popq	%rbp
    000002c8: 	popq	%r12
    000002ca: 	popq	%r13
    000002cc: 	popq	%r14
    000002ce: 	popq	%r15
    000002d0: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 720
    000002d5: 	nopl	(%rax) # Size: 3
.Ltmp1751:
    000002d8: 	movq	0x18(%rsp), %rax
    000002dd: 	leaq	DATAat0x4d004(%rip), %rsi
    000002e4: 	movl	$0x1, %edi
    000002e9: 	movl	%r8d, 0x14(%rsp)
    000002ee: 	addl	$0x1, %r13d
    000002f2: 	movq	(%rax), %rdx
    000002f5: 	xorl	%eax, %eax
    000002f7: 	callq	__printf_chk@PLT # Offset: 759
    000002fc: 	movl	iterations(%rip), %r10d
    00000303: 	cmpl	%r10d, %r13d
    00000306: 	jge	.Ltmp1746 # Offset: 774
    0000030c: 	movl	(%rbx), %r9d
    0000030f: 	movl	0x4(%rbx), %edi
    00000312: 	movl	0x14(%rsp), %r8d
    00000317: 	jmp	.Ltmp1752 # Offset: 791
.Ltmp1748:
    0000031c: 	xorl	%esi, %esi
    0000031e: 	movl	$0x1, %edx
    00000323: 	jmp	.Ltmp1760 # Offset: 803
.Ltmp1756:
    00000328: 	movq	%rbx, %rdi
    0000032b: 	leaq	0x20(%rsp), %rsi
    00000330: 	xorl	%edx, %edx
    00000332: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 818
    00000337: 	movq	%rax, (%rbx)
    0000033a: 	movq	%rax, %rdi
    0000033d: 	movq	0x20(%rsp), %rax
    00000342: 	movq	%rax, 0x10(%rbx)
.Ltmp1763:
    00000346: 	movq	%r12, %rdx
    00000349: 	movq	%rbp, %rsi
    0000034c: 	callq	memcpy@PLT # Offset: 844
    00000351: 	movq	0x20(%rsp), %r12
    00000356: 	movq	(%rbx), %rdi
    00000359: 	jmp	.Ltmp1761 # Offset: 857
.Ltmp1753:
    0000035e: 	movq	0x18(%rsp), %rsi
    00000363: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000036a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 874
    0000036f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000376: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000037d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000384: 	jne	.Ltmp1762 # Offset: 900
.Ltmp1758:
    0000038a: 	movq	-0x8(%rdx), %rax
    0000038e: 	addq	$0x200, %rax
    00000394: 	jmp	.Ltmp1762 # Offset: 916
.Ltmp1757:
    00000399: 	testq	%r12, %r12
    0000039c: 	je	.Ltmp1761 # Offset: 924
    000003a2: 	jmp	.Ltmp1763 # Offset: 930
.Ltmp1759:
    000003a4: 	callq	__stack_chk_fail@PLT # Offset: 932
.Ltmp1755:
    000003a9: 	leaq	DATAat0x4d018(%rip), %rdi
    000003b0: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 944
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSENIj14custom_cse_subIjELi4EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSENIj14custom_cse_addIjELi4EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 144
  State       : disassembled
  Address     : 0x1bef0
  Size        : 0x3b5
  MaxSize     : 0x3c0
  Offset      : 0x1bef0
  Section     : .text
  Orc Section : .local.text._Z9test_CSENIj14custom_cse_addIjELi4EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0143:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdi, %rbx
    00000016: 	subq	$0x38, %rsp
    0000001a: 	movq	%rcx, 0x18(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x28(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r10d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r10d, %r10d
    00000045: 	jle	.Ltmp1764 # Offset: 69
    0000004b: 	leal	-0x1(%r14), %r8d
    0000004f: 	leal	-0x2(%r14), %eax
    00000053: 	movl	(%rbx), %r9d
    00000056: 	movl	0x4(%rbx), %edi
    00000059: 	movl	%eax, 0xc(%rsp)
    0000005d: 	movl	%r8d, %eax
    00000060: 	movl	%r8d, %r15d
    00000063: 	xorl	%r13d, %r13d
    00000066: 	shrl	$0x2, %eax
    00000069: 	andl	$-0x4, %r15d
    0000006d: 	subl	$0x1, %eax
    00000070: 	shlq	$0x4, %rax
    00000074: 	leaq	0x10(%rbx,%rax), %r12
    00000079: 	leal	0x1(%r15), %eax
    0000007d: 	movl	%eax, 0x10(%rsp)
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp1770:
    00000088: 	leal	(%r9,%rdi), %eax
    0000008c: 	addl	%ebp, %eax
    0000008e: 	addl	%eax, %eax
    00000090: 	leal	(%rdi,%rax), %edx
    00000093: 	addl	%r9d, %eax
    00000096: 	shll	$0x2, %eax
    00000099: 	subl	%edx, %eax
    0000009b: 	subl	%edx, %eax
    0000009d: 	addl	%edx, %edx
    0000009f: 	subl	%edx, %eax
    000000a1: 	cmpl	$0x1, %r14d
    000000a5: 	jle	.Ltmp1765 # Offset: 165
    000000ab: 	cmpl	$0x2, 0xc(%rsp)
    000000b0: 	jbe	.Ltmp1766 # Offset: 176
    000000b6: 	movd	%ebp, %xmm7
    000000ba: 	movq	%rbx, %rdx
    000000bd: 	pxor	%xmm3, %xmm3
    000000c1: 	pshufd	$0x0, %xmm7, %xmm4
    000000c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1767:
    000000d0: 	movdqu	(%rdx), %xmm5
    000000d4: 	movdqu	0x4(%rdx), %xmm0
    000000d9: 	addq	$0x10, %rdx
    000000dd: 	movdqu	-0xc(%rdx), %xmm1
    000000e2: 	paddd	%xmm5, %xmm0
    000000e6: 	paddd	%xmm4, %xmm0
    000000ea: 	pslld	$0x1, %xmm0
    000000ef: 	paddd	%xmm0, %xmm1
    000000f3: 	paddd	%xmm5, %xmm0
    000000f7: 	movdqa	%xmm1, %xmm2
    000000fb: 	pslld	$0x2, %xmm0
    00000100: 	pslld	$0x1, %xmm2
    00000105: 	psubd	%xmm1, %xmm0
    00000109: 	paddd	%xmm2, %xmm1
    0000010d: 	psubd	%xmm1, %xmm0
    00000111: 	paddd	%xmm0, %xmm3
    00000115: 	cmpq	%r12, %rdx
    00000118: 	jne	.Ltmp1767 # Offset: 280
    0000011a: 	movdqa	%xmm3, %xmm0
    0000011e: 	psrldq	$0x8, %xmm0
    00000123: 	paddd	%xmm0, %xmm3
    00000127: 	movdqa	%xmm3, %xmm0
    0000012b: 	psrldq	$0x4, %xmm0
    00000130: 	paddd	%xmm0, %xmm3
    00000134: 	movd	%xmm3, %edx
    00000138: 	addl	%edx, %eax
    0000013a: 	cmpl	%r8d, %r15d
    0000013d: 	je	.Ltmp1765 # Offset: 317
    00000143: 	movl	0x10(%rsp), %edx
    00000147: 	movl	%r15d, %esi
.Ltmp1778:
    0000014a: 	movl	%r14d, %r11d
    0000014d: 	subl	%esi, %r11d
    00000150: 	leal	-0x1(%r11), %ecx
    00000154: 	cmpl	$0x2, %r11d
    00000158: 	je	.Ltmp1768 # Offset: 344
    0000015a: 	movq	(%rbx,%rsi,4), %xmm2
    0000015f: 	movd	%ebp, %xmm7
    00000163: 	movq	0x4(%rbx,%rsi,4), %xmm1
    00000169: 	pshufd	$0xe0, %xmm7, %xmm0
    0000016e: 	paddd	%xmm2, %xmm0
    00000172: 	paddd	%xmm1, %xmm0
    00000176: 	pslld	$0x1, %xmm0
    0000017b: 	paddd	%xmm0, %xmm1
    0000017f: 	paddd	%xmm2, %xmm0
    00000183: 	movdqa	%xmm1, %xmm2
    00000187: 	pslld	$0x2, %xmm0
    0000018c: 	pslld	$0x1, %xmm2
    00000191: 	psubd	%xmm1, %xmm0
    00000195: 	paddd	%xmm2, %xmm1
    00000199: 	psubd	%xmm1, %xmm0
    0000019d: 	movd	%xmm0, %esi
    000001a1: 	pshufd	$0xe5, %xmm0, %xmm7
    000001a6: 	movd	%xmm7, %r11d
    000001ab: 	addl	%r11d, %esi
    000001ae: 	addl	%esi, %eax
    000001b0: 	movl	%ecx, %esi
    000001b2: 	andl	$-0x2, %esi
    000001b5: 	addl	%esi, %edx
    000001b7: 	cmpl	%ecx, %esi
    000001b9: 	je	.Ltmp1765 # Offset: 441
.Ltmp1768:
    000001bb: 	movslq	%edx, %rdx
    000001be: 	movl	-0x4(%rbx,%rdx,4), %esi
    000001c2: 	movl	(%rbx,%rdx,4), %edx
    000001c5: 	leal	(%rbp,%rdx), %ecx
    000001c9: 	addl	%esi, %ecx
    000001cb: 	addl	%ecx, %ecx
    000001cd: 	addl	%ecx, %edx
    000001cf: 	addl	%esi, %ecx
    000001d1: 	leal	(%rax,%rcx,4), %eax
    000001d4: 	subl	%edx, %eax
    000001d6: 	subl	%edx, %eax
    000001d8: 	addl	%edx, %edx
    000001da: 	subl	%edx, %eax
.Ltmp1765:
    000001dc: 	testl	%eax, %eax
    000001de: 	jne	.Ltmp1769 # Offset: 478
    000001e4: 	addl	$0x1, %r13d
    000001e8: 	cmpl	%r10d, %r13d
    000001eb: 	jl	.Ltmp1770 # Offset: 491
.Ltmp1764:
    000001f1: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001f8: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001ff: 	subq	$0x20, %rax
    00000203: 	cmpq	%rax, %rbx
    00000206: 	je	.Ltmp1771 # Offset: 518
    0000020c: 	movq	0x18(%rsp), %rax
    00000211: 	leaq	0x10(%rbx), %rdi
    00000215: 	movq	%rdi, (%rbx)
    00000218: 	movq	(%rax), %rbp
    0000021b: 	movq	0x8(%rax), %r12
    0000021f: 	movq	%rbp, %rax
    00000222: 	addq	%r12, %rax
    00000225: 	je	.Ltmp1772 # Offset: 549
    00000227: 	testq	%rbp, %rbp
    0000022a: 	je	.Ltmp1773 # Offset: 554
.Ltmp1772:
    00000230: 	movq	%r12, 0x20(%rsp)
    00000235: 	cmpq	$0xf, %r12
    00000239: 	ja	.Ltmp1774 # Offset: 569
    0000023f: 	cmpq	$0x1, %r12
    00000243: 	jne	.Ltmp1775 # Offset: 579
    00000249: 	movzbl	(%rbp), %eax
    0000024d: 	movb	%al, 0x10(%rbx)
.Ltmp1779:
    00000250: 	movq	%r12, 0x8(%rbx)
    00000254: 	movb	$0x0, (%rdi,%r12)
    00000259: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000260: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000267: 	addq	$0x20, %rax
    0000026b: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000272: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000279: 	je	.Ltmp1776 # Offset: 633
.Ltmp1780:
    0000027f: 	movq	-0x20(%rax), %rbp
    00000283: 	callq	clock@PLT # Offset: 643
    00000288: 	movq	%rax, end_time(%rip)
    0000028f: 	movq	0x28(%rsp), %rdx
    00000294: 	subq	%fs:0x28, %rdx
    0000029d: 	jne	.Ltmp1777 # Offset: 669
    000002a3: 	subq	start_time(%rip), %rax
    000002aa: 	pxor	%xmm0, %xmm0
    000002ae: 	movq	%rbp, %rdi
    000002b1: 	cvtsi2sd	%rax, %xmm0
    000002b6: 	divsd	DATAat0x4d640(%rip), %xmm0
    000002be: 	addq	$0x38, %rsp
    000002c2: 	popq	%rbx
    000002c3: 	popq	%rbp
    000002c4: 	popq	%r12
    000002c6: 	popq	%r13
    000002c8: 	popq	%r14
    000002ca: 	popq	%r15
    000002cc: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 716
    000002d1: 	nopl	(%rax) # Size: 7
.Ltmp1769:
    000002d8: 	movq	0x18(%rsp), %rax
    000002dd: 	leaq	DATAat0x4d004(%rip), %rsi
    000002e4: 	movl	$0x1, %edi
    000002e9: 	movl	%r8d, 0x14(%rsp)
    000002ee: 	addl	$0x1, %r13d
    000002f2: 	movq	(%rax), %rdx
    000002f5: 	xorl	%eax, %eax
    000002f7: 	callq	__printf_chk@PLT # Offset: 759
    000002fc: 	movl	iterations(%rip), %r10d
    00000303: 	cmpl	%r10d, %r13d
    00000306: 	jge	.Ltmp1764 # Offset: 774
    0000030c: 	movl	(%rbx), %r9d
    0000030f: 	movl	0x4(%rbx), %edi
    00000312: 	movl	0x14(%rsp), %r8d
    00000317: 	jmp	.Ltmp1770 # Offset: 791
.Ltmp1766:
    0000031c: 	xorl	%esi, %esi
    0000031e: 	movl	$0x1, %edx
    00000323: 	jmp	.Ltmp1778 # Offset: 803
.Ltmp1774:
    00000328: 	movq	%rbx, %rdi
    0000032b: 	leaq	0x20(%rsp), %rsi
    00000330: 	xorl	%edx, %edx
    00000332: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 818
    00000337: 	movq	%rax, (%rbx)
    0000033a: 	movq	%rax, %rdi
    0000033d: 	movq	0x20(%rsp), %rax
    00000342: 	movq	%rax, 0x10(%rbx)
.Ltmp1781:
    00000346: 	movq	%r12, %rdx
    00000349: 	movq	%rbp, %rsi
    0000034c: 	callq	memcpy@PLT # Offset: 844
    00000351: 	movq	0x20(%rsp), %r12
    00000356: 	movq	(%rbx), %rdi
    00000359: 	jmp	.Ltmp1779 # Offset: 857
.Ltmp1771:
    0000035e: 	movq	0x18(%rsp), %rsi
    00000363: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000036a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 874
    0000036f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000376: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000037d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000384: 	jne	.Ltmp1780 # Offset: 900
.Ltmp1776:
    0000038a: 	movq	-0x8(%rdx), %rax
    0000038e: 	addq	$0x200, %rax
    00000394: 	jmp	.Ltmp1780 # Offset: 916
.Ltmp1775:
    00000399: 	testq	%r12, %r12
    0000039c: 	je	.Ltmp1779 # Offset: 924
    000003a2: 	jmp	.Ltmp1781 # Offset: 930
.Ltmp1777:
    000003a4: 	callq	__stack_chk_fail@PLT # Offset: 932
.Ltmp1773:
    000003a9: 	leaq	DATAat0x4d018(%rip), %rdi
    000003b0: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 944
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSENIj14custom_cse_addIjELi4EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSENIj14custom_cse_mulIjELi4EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 145
  State       : disassembled
  Address     : 0x1c2b0
  Size        : 0x3bb
  MaxSize     : 0x3c0
  Offset      : 0x1c2b0
  Section     : .text
  Orc Section : .local.text._Z9test_CSENIj14custom_cse_mulIjELi4EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0144:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%esi, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	movl	%edx, %ebp
    00000015: 	pushq	%rbx
    00000016: 	subq	$0x38, %rsp
    0000001a: 	movq	%rcx, 0x18(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x28(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r11d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r11d, %r11d
    00000045: 	jle	.Ltmp1782 # Offset: 69
    0000004b: 	leal	-0x1(%r13), %edi
    0000004f: 	leal	-0x2(%r13), %eax
    00000053: 	xorl	%r14d, %r14d
    00000056: 	movl	%eax, 0x8(%rsp)
    0000005a: 	movl	%edi, %eax
    0000005c: 	shrl	$0x2, %eax
    0000005f: 	movl	%edi, 0x10(%rsp)
    00000063: 	andl	$-0x4, %edi
    00000066: 	subl	$0x1, %eax
    00000069: 	movl	%edi, 0xc(%rsp)
    0000006d: 	shlq	$0x4, %rax
    00000071: 	leaq	0x10(%r12,%rax), %rbx
    00000076: 	leal	0x1(%rdi), %eax
    00000079: 	movl	%eax, 0x14(%rsp)
.Ltmp1795:
    0000007d: 	movl	(%r12), %r10d
    00000081: 	movl	0x4(%r12), %r9d
.Ltmp1787:
    00000086: 	movl	%r10d, %eax
    00000089: 	imull	%r9d, %eax
    0000008d: 	addl	%ebp, %eax
    0000008f: 	addl	%eax, %eax
    00000091: 	leal	(%r9,%rax), %edx
    00000095: 	addl	%r10d, %eax
    00000098: 	shll	$0x2, %eax
    0000009b: 	subl	%edx, %eax
    0000009d: 	subl	%edx, %eax
    0000009f: 	addl	%edx, %edx
    000000a1: 	subl	%edx, %eax
    000000a3: 	cmpl	$0x1, %r13d
    000000a7: 	jle	.Ltmp1783 # Offset: 167
    000000ad: 	cmpl	$0x2, 0x8(%rsp)
    000000b2: 	jbe	.Ltmp1784 # Offset: 178
    000000b8: 	movd	%ebp, %xmm7
    000000bc: 	movq	%r12, %rdx
    000000bf: 	pxor	%xmm3, %xmm3
    000000c3: 	pshufd	$0x0, %xmm7, %xmm4
    000000c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1785:
    000000d0: 	movdqu	(%rdx), %xmm5
    000000d4: 	movdqu	0x4(%rdx), %xmm1
    000000d9: 	addq	$0x10, %rdx
    000000dd: 	movdqa	%xmm1, %xmm2
    000000e1: 	movdqa	%xmm5, %xmm6
    000000e5: 	movdqa	%xmm1, %xmm0
    000000e9: 	psrlq	$0x20, %xmm2
    000000ee: 	psrlq	$0x20, %xmm6
    000000f3: 	pmuludq	%xmm5, %xmm0
    000000f7: 	pmuludq	%xmm6, %xmm2
    000000fb: 	pshufd	$0x8, %xmm0, %xmm0
    00000100: 	pshufd	$0x8, %xmm2, %xmm2
    00000105: 	punpckldq	%xmm2, %xmm0
    00000109: 	paddd	%xmm4, %xmm0
    0000010d: 	pslld	$0x1, %xmm0
    00000112: 	paddd	%xmm0, %xmm1
    00000116: 	paddd	%xmm5, %xmm0
    0000011a: 	movdqa	%xmm1, %xmm2
    0000011e: 	pslld	$0x2, %xmm0
    00000123: 	pslld	$0x1, %xmm2
    00000128: 	psubd	%xmm1, %xmm0
    0000012c: 	paddd	%xmm2, %xmm1
    00000130: 	psubd	%xmm1, %xmm0
    00000134: 	paddd	%xmm0, %xmm3
    00000138: 	cmpq	%rdx, %rbx
    0000013b: 	jne	.Ltmp1785 # Offset: 315
    0000013d: 	movdqa	%xmm3, %xmm0
    00000141: 	movl	0x10(%rsp), %esi
    00000145: 	psrldq	$0x8, %xmm0
    0000014a: 	paddd	%xmm0, %xmm3
    0000014e: 	movdqa	%xmm3, %xmm0
    00000152: 	psrldq	$0x4, %xmm0
    00000157: 	paddd	%xmm0, %xmm3
    0000015b: 	movd	%xmm3, %edx
    0000015f: 	addl	%edx, %eax
    00000161: 	cmpl	%esi, 0xc(%rsp)
    00000165: 	je	.Ltmp1783 # Offset: 357
    0000016b: 	movl	0x14(%rsp), %edi
.Ltmp1796:
    0000016f: 	movslq	%edi, %rsi
    00000172: 	shlq	$0x2, %rsi
    00000176: 	leaq	(%r12,%rsi), %rdx
    0000017a: 	movl	-0x4(%rdx), %r8d
    0000017e: 	movl	(%rdx), %edx
    00000180: 	movl	%edx, %ecx
    00000182: 	imull	%r8d, %ecx
    00000186: 	addl	%ebp, %ecx
    00000188: 	addl	%ecx, %ecx
    0000018a: 	addl	%ecx, %r8d
    0000018d: 	leal	(%rdx,%rcx), %r15d
    00000191: 	leal	0x1(%rdi), %ecx
    00000194: 	leal	(%rax,%r8,4), %eax
    00000198: 	subl	%r15d, %eax
    0000019b: 	subl	%r15d, %eax
    0000019e: 	addl	%r15d, %r15d
    000001a1: 	subl	%r15d, %eax
    000001a4: 	cmpl	%ecx, %r13d
    000001a7: 	jle	.Ltmp1783 # Offset: 423
    000001a9: 	movl	0x4(%r12,%rsi), %ecx
    000001ae: 	movl	%edx, %r15d
    000001b1: 	addl	$0x2, %edi
    000001b4: 	imull	%ecx, %r15d
    000001b8: 	addl	%ebp, %r15d
    000001bb: 	addl	%r15d, %r15d
    000001be: 	addl	%r15d, %edx
    000001c1: 	leal	(%r15,%rcx), %r8d
    000001c5: 	shll	$0x2, %edx
    000001c8: 	subl	%r8d, %edx
    000001cb: 	subl	%r8d, %edx
    000001ce: 	addl	%r8d, %r8d
    000001d1: 	subl	%r8d, %edx
    000001d4: 	addl	%edx, %eax
    000001d6: 	cmpl	%edi, %r13d
    000001d9: 	jle	.Ltmp1783 # Offset: 473
    000001db: 	movl	0x8(%r12,%rsi), %esi
    000001e0: 	movl	%ecx, %edx
    000001e2: 	imull	%esi, %edx
    000001e5: 	addl	%ebp, %edx
    000001e7: 	addl	%edx, %edx
    000001e9: 	addl	%edx, %esi
    000001eb: 	addl	%ecx, %edx
    000001ed: 	shll	$0x2, %edx
    000001f0: 	subl	%esi, %edx
    000001f2: 	subl	%esi, %edx
    000001f4: 	addl	%esi, %esi
    000001f6: 	subl	%esi, %edx
    000001f8: 	addl	%edx, %eax
.Ltmp1783:
    000001fa: 	testl	%eax, %eax
    000001fc: 	jne	.Ltmp1786 # Offset: 508
    00000202: 	addl	$0x1, %r14d
    00000206: 	cmpl	%r11d, %r14d
    00000209: 	jl	.Ltmp1787 # Offset: 521
.Ltmp1782:
    0000020f: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000216: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000021d: 	subq	$0x20, %rax
    00000221: 	cmpq	%rax, %rbx
    00000224: 	je	.Ltmp1788 # Offset: 548
    0000022a: 	movq	0x18(%rsp), %rax
    0000022f: 	leaq	0x10(%rbx), %rdi
    00000233: 	movq	%rdi, (%rbx)
    00000236: 	movq	(%rax), %rbp
    00000239: 	movq	0x8(%rax), %r12
    0000023d: 	movq	%rbp, %rax
    00000240: 	addq	%r12, %rax
    00000243: 	je	.Ltmp1789 # Offset: 579
    00000245: 	testq	%rbp, %rbp
    00000248: 	je	.Ltmp1790 # Offset: 584
.Ltmp1789:
    0000024e: 	movq	%r12, 0x20(%rsp)
    00000253: 	cmpq	$0xf, %r12
    00000257: 	ja	.Ltmp1791 # Offset: 599
    0000025d: 	cmpq	$0x1, %r12
    00000261: 	jne	.Ltmp1792 # Offset: 609
    00000267: 	movzbl	(%rbp), %eax
    0000026b: 	movb	%al, 0x10(%rbx)
.Ltmp1797:
    0000026e: 	movq	%r12, 0x8(%rbx)
    00000272: 	movb	$0x0, (%rdi,%r12)
    00000277: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000027e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000285: 	addq	$0x20, %rax
    00000289: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000290: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000297: 	je	.Ltmp1793 # Offset: 663
.Ltmp1798:
    0000029d: 	movq	-0x20(%rax), %rbp
    000002a1: 	callq	clock@PLT # Offset: 673
    000002a6: 	movq	%rax, end_time(%rip)
    000002ad: 	movq	0x28(%rsp), %rdx
    000002b2: 	subq	%fs:0x28, %rdx
    000002bb: 	jne	.Ltmp1794 # Offset: 699
    000002c1: 	subq	start_time(%rip), %rax
    000002c8: 	pxor	%xmm0, %xmm0
    000002cc: 	movq	%rbp, %rdi
    000002cf: 	cvtsi2sd	%rax, %xmm0
    000002d4: 	divsd	DATAat0x4d640(%rip), %xmm0
    000002dc: 	addq	$0x38, %rsp
    000002e0: 	popq	%rbx
    000002e1: 	popq	%rbp
    000002e2: 	popq	%r12
    000002e4: 	popq	%r13
    000002e6: 	popq	%r14
    000002e8: 	popq	%r15
    000002ea: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 746
    000002ef: 	nop # Size: 1
.Ltmp1786:
    000002f0: 	movq	0x18(%rsp), %rax
    000002f5: 	leaq	DATAat0x4d004(%rip), %rsi
    000002fc: 	movl	$0x1, %edi
    00000301: 	addl	$0x1, %r14d
    00000305: 	movq	(%rax), %rdx
    00000308: 	xorl	%eax, %eax
    0000030a: 	callq	__printf_chk@PLT # Offset: 778
    0000030f: 	movl	iterations(%rip), %r11d
    00000316: 	cmpl	%r11d, %r14d
    00000319: 	jl	.Ltmp1795 # Offset: 793
    0000031f: 	jmp	.Ltmp1782 # Offset: 799
.Ltmp1784:
    00000324: 	movl	$0x1, %edi
    00000329: 	jmp	.Ltmp1796 # Offset: 809
.Ltmp1791:
    0000032e: 	movq	%rbx, %rdi
    00000331: 	leaq	0x20(%rsp), %rsi
    00000336: 	xorl	%edx, %edx
    00000338: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 824
    0000033d: 	movq	%rax, (%rbx)
    00000340: 	movq	%rax, %rdi
    00000343: 	movq	0x20(%rsp), %rax
    00000348: 	movq	%rax, 0x10(%rbx)
.Ltmp1799:
    0000034c: 	movq	%r12, %rdx
    0000034f: 	movq	%rbp, %rsi
    00000352: 	callq	memcpy@PLT # Offset: 850
    00000357: 	movq	0x20(%rsp), %r12
    0000035c: 	movq	(%rbx), %rdi
    0000035f: 	jmp	.Ltmp1797 # Offset: 863
.Ltmp1788:
    00000364: 	movq	0x18(%rsp), %rsi
    00000369: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000370: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 880
    00000375: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000037c: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000383: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000038a: 	jne	.Ltmp1798 # Offset: 906
.Ltmp1793:
    00000390: 	movq	-0x8(%rdx), %rax
    00000394: 	addq	$0x200, %rax
    0000039a: 	jmp	.Ltmp1798 # Offset: 922
.Ltmp1792:
    0000039f: 	testq	%r12, %r12
    000003a2: 	je	.Ltmp1797 # Offset: 930
    000003a8: 	jmp	.Ltmp1799 # Offset: 936
.Ltmp1794:
    000003aa: 	callq	__stack_chk_fail@PLT # Offset: 938
.Ltmp1790:
    000003af: 	leaq	DATAat0x4d018(%rip), %rdi
    000003b6: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 950
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSENIj14custom_cse_mulIjELi4EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSENIi14custom_cse_subIiELi4EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 146
  State       : disassembled
  Address     : 0x1c670
  Size        : 0x3d5
  MaxSize     : 0x3e0
  Offset      : 0x1c670
  Section     : .text
  Orc Section : .local.text._Z9test_CSENIi14custom_cse_subIiELi4EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0145:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdi, %rbx
    00000016: 	subq	$0x38, %rsp
    0000001a: 	movq	%rcx, 0x18(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x28(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r10d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r10d, %r10d
    00000045: 	jle	.Ltmp1800 # Offset: 69
    0000004b: 	leal	-0x1(%r14), %r8d
    0000004f: 	leal	-0x2(%r14), %eax
    00000053: 	movl	(%rbx), %edi
    00000055: 	movl	0x4(%rbx), %esi
    00000058: 	movl	%eax, 0xc(%rsp)
    0000005c: 	movl	%r8d, %eax
    0000005f: 	movl	%r8d, %r15d
    00000062: 	xorl	%r13d, %r13d
    00000065: 	shrl	$0x2, %eax
    00000068: 	andl	$-0x4, %r15d
    0000006c: 	subl	$0x1, %eax
    0000006f: 	shlq	$0x4, %rax
    00000073: 	leaq	0x10(%rbx,%rax), %r12
    00000078: 	leal	0x1(%r15), %eax
    0000007c: 	movl	%eax, 0x10(%rsp)
.Ltmp1806:
    00000080: 	movl	%esi, %eax
    00000082: 	subl	%edi, %eax
    00000084: 	addl	%ebp, %eax
    00000086: 	leal	(%rdi,%rax,2), %ecx
    00000089: 	leal	(%rsi,%rax,2), %edx
    0000008c: 	movl	%edi, %eax
    0000008e: 	subl	%esi, %eax
    00000090: 	addl	%ecx, %eax
    00000092: 	subl	%edx, %eax
    00000094: 	addl	%ecx, %eax
    00000096: 	subl	%edx, %eax
    00000098: 	addl	%ecx, %eax
    0000009a: 	subl	%edx, %eax
    0000009c: 	cmpl	$0x1, %r14d
    000000a0: 	jle	.Ltmp1801 # Offset: 160
    000000a6: 	cmpl	$0x2, 0xc(%rsp)
    000000ab: 	jbe	.Ltmp1802 # Offset: 171
    000000b1: 	movd	%ebp, %xmm5
    000000b5: 	movq	%rbx, %rdx
    000000b8: 	pxor	%xmm0, %xmm0
    000000bc: 	pshufd	$0x0, %xmm5, %xmm4
    000000c1: 	nopl	(%rax) # Size: 7
.Ltmp1803:
    000000c8: 	movdqu	0x4(%rdx), %xmm1
    000000cd: 	movdqu	(%rdx), %xmm6
    000000d1: 	addq	$0x10, %rdx
    000000d5: 	movdqa	%xmm1, %xmm3
    000000d9: 	movdqa	%xmm6, %xmm2
    000000dd: 	psubd	%xmm6, %xmm3
    000000e1: 	paddd	%xmm4, %xmm3
    000000e5: 	paddd	%xmm3, %xmm2
    000000e9: 	paddd	%xmm3, %xmm1
    000000ed: 	paddd	%xmm3, %xmm2
    000000f1: 	paddd	%xmm3, %xmm1
    000000f5: 	paddd	%xmm2, %xmm0
    000000f9: 	psubd	%xmm1, %xmm0
    000000fd: 	paddd	%xmm2, %xmm0
    00000101: 	psubd	%xmm1, %xmm0
    00000105: 	paddd	%xmm2, %xmm0
    00000109: 	psubd	%xmm1, %xmm0
    0000010d: 	paddd	%xmm2, %xmm0
    00000111: 	psubd	%xmm1, %xmm0
    00000115: 	cmpq	%rdx, %r12
    00000118: 	jne	.Ltmp1803 # Offset: 280
    0000011a: 	movdqa	%xmm0, %xmm1
    0000011e: 	psrldq	$0x8, %xmm1
    00000123: 	paddd	%xmm1, %xmm0
    00000127: 	movdqa	%xmm0, %xmm1
    0000012b: 	psrldq	$0x4, %xmm1
    00000130: 	paddd	%xmm1, %xmm0
    00000134: 	movd	%xmm0, %edx
    00000138: 	addl	%edx, %eax
    0000013a: 	cmpl	%r8d, %r15d
    0000013d: 	je	.Ltmp1801 # Offset: 317
    00000143: 	movl	0x10(%rsp), %edx
    00000147: 	movl	%r15d, %r9d
.Ltmp1814:
    0000014a: 	movl	%r14d, %r11d
    0000014d: 	subl	%r9d, %r11d
    00000150: 	leal	-0x1(%r11), %ecx
    00000154: 	cmpl	$0x2, %r11d
    00000158: 	je	.Ltmp1804 # Offset: 344
    0000015a: 	movq	0x4(%rbx,%r9,4), %xmm5
    00000161: 	movq	(%rbx,%r9,4), %xmm1
    00000167: 	movd	%ebp, %xmm7
    0000016b: 	pshufd	$0xe0, %xmm7, %xmm0
    00000170: 	movdqa	%xmm5, %xmm2
    00000174: 	movdqa	%xmm5, %xmm3
    00000178: 	psubd	%xmm1, %xmm2
    0000017c: 	paddd	%xmm0, %xmm2
    00000180: 	movdqa	%xmm2, %xmm4
    00000184: 	paddd	%xmm2, %xmm3
    00000188: 	paddd	%xmm1, %xmm4
    0000018c: 	psubd	%xmm5, %xmm1
    00000190: 	paddd	%xmm2, %xmm4
    00000194: 	movdqa	%xmm1, %xmm0
    00000198: 	paddd	%xmm3, %xmm2
    0000019c: 	paddd	%xmm4, %xmm0
    000001a0: 	psubd	%xmm2, %xmm0
    000001a4: 	paddd	%xmm4, %xmm0
    000001a8: 	psubd	%xmm2, %xmm0
    000001ac: 	paddd	%xmm4, %xmm0
    000001b0: 	psubd	%xmm2, %xmm0
    000001b4: 	movd	%xmm0, %r9d
    000001b9: 	pshufd	$0xe5, %xmm0, %xmm7
    000001be: 	movd	%xmm7, %r11d
    000001c3: 	addl	%r11d, %r9d
    000001c6: 	addl	%r9d, %eax
    000001c9: 	movl	%ecx, %r9d
    000001cc: 	andl	$-0x2, %r9d
    000001d0: 	addl	%r9d, %edx
    000001d3: 	cmpl	%ecx, %r9d
    000001d6: 	je	.Ltmp1801 # Offset: 470
.Ltmp1804:
    000001d8: 	movslq	%edx, %rdx
    000001db: 	movl	(%rbx,%rdx,4), %r9d
    000001df: 	movl	-0x4(%rbx,%rdx,4), %ecx
    000001e3: 	movl	%r9d, %edx
    000001e6: 	subl	%ecx, %edx
    000001e8: 	addl	%ebp, %edx
    000001ea: 	leal	(%rcx,%rdx,2), %ecx
    000001ed: 	leal	(%r9,%rdx,2), %edx
    000001f1: 	leal	(%rax,%rcx,2), %eax
    000001f4: 	subl	%edx, %eax
    000001f6: 	subl	%edx, %eax
    000001f8: 	addl	%ecx, %eax
    000001fa: 	subl	%edx, %eax
    000001fc: 	addl	%ecx, %eax
    000001fe: 	subl	%edx, %eax
.Ltmp1801:
    00000200: 	testl	%eax, %eax
    00000202: 	jne	.Ltmp1805 # Offset: 514
    00000208: 	addl	$0x1, %r13d
    0000020c: 	cmpl	%r10d, %r13d
    0000020f: 	jl	.Ltmp1806 # Offset: 527
.Ltmp1800:
    00000215: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000021c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000223: 	subq	$0x20, %rax
    00000227: 	cmpq	%rax, %rbx
    0000022a: 	je	.Ltmp1807 # Offset: 554
    00000230: 	movq	0x18(%rsp), %rax
    00000235: 	leaq	0x10(%rbx), %rdi
    00000239: 	movq	%rdi, (%rbx)
    0000023c: 	movq	(%rax), %rbp
    0000023f: 	movq	0x8(%rax), %r12
    00000243: 	movq	%rbp, %rax
    00000246: 	addq	%r12, %rax
    00000249: 	je	.Ltmp1808 # Offset: 585
    0000024b: 	testq	%rbp, %rbp
    0000024e: 	je	.Ltmp1809 # Offset: 590
.Ltmp1808:
    00000254: 	movq	%r12, 0x20(%rsp)
    00000259: 	cmpq	$0xf, %r12
    0000025d: 	ja	.Ltmp1810 # Offset: 605
    00000263: 	cmpq	$0x1, %r12
    00000267: 	jne	.Ltmp1811 # Offset: 615
    0000026d: 	movzbl	(%rbp), %eax
    00000271: 	movb	%al, 0x10(%rbx)
.Ltmp1815:
    00000274: 	movq	%r12, 0x8(%rbx)
    00000278: 	movb	$0x0, (%rdi,%r12)
    0000027d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000284: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000028b: 	addq	$0x20, %rax
    0000028f: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000296: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000029d: 	je	.Ltmp1812 # Offset: 669
.Ltmp1816:
    000002a3: 	movq	-0x20(%rax), %rbp
    000002a7: 	callq	clock@PLT # Offset: 679
    000002ac: 	movq	%rax, end_time(%rip)
    000002b3: 	movq	0x28(%rsp), %rdx
    000002b8: 	subq	%fs:0x28, %rdx
    000002c1: 	jne	.Ltmp1813 # Offset: 705
    000002c7: 	subq	start_time(%rip), %rax
    000002ce: 	pxor	%xmm0, %xmm0
    000002d2: 	movq	%rbp, %rdi
    000002d5: 	cvtsi2sd	%rax, %xmm0
    000002da: 	divsd	DATAat0x4d640(%rip), %xmm0
    000002e2: 	addq	$0x38, %rsp
    000002e6: 	popq	%rbx
    000002e7: 	popq	%rbp
    000002e8: 	popq	%r12
    000002ea: 	popq	%r13
    000002ec: 	popq	%r14
    000002ee: 	popq	%r15
    000002f0: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 752
    000002f5: 	nopl	(%rax) # Size: 3
.Ltmp1805:
    000002f8: 	movq	0x18(%rsp), %rax
    000002fd: 	leaq	DATAat0x4d004(%rip), %rsi
    00000304: 	movl	$0x1, %edi
    00000309: 	movl	%r8d, 0x14(%rsp)
    0000030e: 	addl	$0x1, %r13d
    00000312: 	movq	(%rax), %rdx
    00000315: 	xorl	%eax, %eax
    00000317: 	callq	__printf_chk@PLT # Offset: 791
    0000031c: 	movl	iterations(%rip), %r10d
    00000323: 	cmpl	%r10d, %r13d
    00000326: 	jge	.Ltmp1800 # Offset: 806
    0000032c: 	movl	(%rbx), %edi
    0000032e: 	movl	0x4(%rbx), %esi
    00000331: 	movl	0x14(%rsp), %r8d
    00000336: 	jmp	.Ltmp1806 # Offset: 822
.Ltmp1802:
    0000033b: 	xorl	%r9d, %r9d
    0000033e: 	movl	$0x1, %edx
    00000343: 	jmp	.Ltmp1814 # Offset: 835
.Ltmp1810:
    00000348: 	movq	%rbx, %rdi
    0000034b: 	leaq	0x20(%rsp), %rsi
    00000350: 	xorl	%edx, %edx
    00000352: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 850
    00000357: 	movq	%rax, (%rbx)
    0000035a: 	movq	%rax, %rdi
    0000035d: 	movq	0x20(%rsp), %rax
    00000362: 	movq	%rax, 0x10(%rbx)
.Ltmp1817:
    00000366: 	movq	%r12, %rdx
    00000369: 	movq	%rbp, %rsi
    0000036c: 	callq	memcpy@PLT # Offset: 876
    00000371: 	movq	0x20(%rsp), %r12
    00000376: 	movq	(%rbx), %rdi
    00000379: 	jmp	.Ltmp1815 # Offset: 889
.Ltmp1807:
    0000037e: 	movq	0x18(%rsp), %rsi
    00000383: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000038a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 906
    0000038f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000396: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000039d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003a4: 	jne	.Ltmp1816 # Offset: 932
.Ltmp1812:
    000003aa: 	movq	-0x8(%rdx), %rax
    000003ae: 	addq	$0x200, %rax
    000003b4: 	jmp	.Ltmp1816 # Offset: 948
.Ltmp1811:
    000003b9: 	testq	%r12, %r12
    000003bc: 	je	.Ltmp1815 # Offset: 956
    000003c2: 	jmp	.Ltmp1817 # Offset: 962
.Ltmp1813:
    000003c4: 	callq	__stack_chk_fail@PLT # Offset: 964
.Ltmp1809:
    000003c9: 	leaq	DATAat0x4d018(%rip), %rdi
    000003d0: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 976
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSENIi14custom_cse_subIiELi4EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSENIi14custom_cse_divIiELi4EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 147
  State       : disassembled
  Address     : 0x1ca50
  Size        : 0x267
  MaxSize     : 0x270
  Offset      : 0x1ca50
  Section     : .text
  Orc Section : .local.text._Z9test_CSENIi14custom_cse_divIiELi4EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0146:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rcx, %rbp
    00000016: 	pushq	%rbx
    00000017: 	movl	%edx, %ebx
    00000019: 	subq	$0x18, %rsp
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x8(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	callq	clock@PLT # Offset: 45
    00000032: 	movl	iterations(%rip), %r11d
    00000039: 	movq	%rax, start_time(%rip)
    00000040: 	testl	%r11d, %r11d
    00000043: 	jle	.Ltmp1818 # Offset: 67
    00000049: 	leal	-0x2(%r14), %eax
    0000004d: 	xorl	%r15d, %r15d
    00000050: 	leaq	0x8(%r13,%rax,4), %r12
.Ltmp1830:
    00000055: 	movl	(%r13), %r9d
    00000059: 	movl	0x4(%r13), %r10d
.Ltmp1822:
    0000005d: 	movl	%r10d, %eax
    00000060: 	movl	%r9d, %ecx
    00000063: 	movl	%r9d, %esi
    00000066: 	cltd
    00000067: 	subl	%r10d, %ecx
    0000006a: 	idivl	%r9d
    0000006d: 	addl	%ebx, %eax
    0000006f: 	leal	(%r9,%rax,2), %edx
    00000073: 	leal	(%r10,%rax,2), %eax
    00000077: 	addl	%edx, %ecx
    00000079: 	subl	%eax, %ecx
    0000007b: 	addl	%edx, %ecx
    0000007d: 	subl	%eax, %ecx
    0000007f: 	addl	%edx, %ecx
    00000081: 	subl	%eax, %ecx
    00000083: 	cmpl	$0x1, %r14d
    00000087: 	jle	.Ltmp1819 # Offset: 135
    00000089: 	leaq	0x4(%r13), %rdi
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp1820:
    00000090: 	movl	%esi, %r8d
    00000093: 	movl	(%rdi), %esi
    00000095: 	addq	$0x4, %rdi
    00000099: 	movl	%esi, %eax
    0000009b: 	cltd
    0000009c: 	idivl	%r8d
    0000009f: 	addl	%ebx, %eax
    000000a1: 	leal	(%r8,%rax,2), %edx
    000000a5: 	leal	(%rsi,%rax,2), %eax
    000000a8: 	leal	(%rcx,%rdx,2), %ecx
    000000ab: 	subl	%eax, %ecx
    000000ad: 	subl	%eax, %ecx
    000000af: 	addl	%edx, %ecx
    000000b1: 	subl	%eax, %ecx
    000000b3: 	addl	%edx, %ecx
    000000b5: 	subl	%eax, %ecx
    000000b7: 	cmpq	%rdi, %r12
    000000ba: 	jne	.Ltmp1820 # Offset: 186
.Ltmp1819:
    000000bc: 	testl	%ecx, %ecx
    000000be: 	jne	.Ltmp1821 # Offset: 190
    000000c4: 	addl	$0x1, %r15d
    000000c8: 	cmpl	%r11d, %r15d
    000000cb: 	jl	.Ltmp1822 # Offset: 203
.Ltmp1818:
    000000cd: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000d4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000db: 	subq	$0x20, %rax
    000000df: 	cmpq	%rax, %rbx
    000000e2: 	je	.Ltmp1823 # Offset: 226
    000000e8: 	leaq	0x10(%rbx), %rdi
    000000ec: 	movq	0x8(%rbp), %r12
    000000f0: 	movq	%rdi, (%rbx)
    000000f3: 	movq	(%rbp), %r13
    000000f7: 	movq	%r13, %rax
    000000fa: 	addq	%r12, %rax
    000000fd: 	je	.Ltmp1824 # Offset: 253
    000000ff: 	testq	%r13, %r13
    00000102: 	je	.Ltmp1825 # Offset: 258
.Ltmp1824:
    00000108: 	movq	%r12, (%rsp)
    0000010c: 	cmpq	$0xf, %r12
    00000110: 	ja	.Ltmp1826 # Offset: 272
    00000116: 	cmpq	$0x1, %r12
    0000011a: 	jne	.Ltmp1827 # Offset: 282
    00000120: 	movzbl	(%r13), %eax
    00000125: 	movb	%al, 0x10(%rbx)
.Ltmp1831:
    00000128: 	movq	%r12, 0x8(%rbx)
    0000012c: 	movb	$0x0, (%rdi,%r12)
    00000131: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000138: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000013f: 	addq	$0x20, %rax
    00000143: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000014a: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000151: 	je	.Ltmp1828 # Offset: 337
.Ltmp1832:
    00000157: 	movq	-0x20(%rax), %rbp
    0000015b: 	callq	clock@PLT # Offset: 347
    00000160: 	movq	%rax, end_time(%rip)
    00000167: 	movq	0x8(%rsp), %rdx
    0000016c: 	subq	%fs:0x28, %rdx
    00000175: 	jne	.Ltmp1829 # Offset: 373
    0000017b: 	subq	start_time(%rip), %rax
    00000182: 	pxor	%xmm0, %xmm0
    00000186: 	movq	%rbp, %rdi
    00000189: 	cvtsi2sd	%rax, %xmm0
    0000018e: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000196: 	addq	$0x18, %rsp
    0000019a: 	popq	%rbx
    0000019b: 	popq	%rbp
    0000019c: 	popq	%r12
    0000019e: 	popq	%r13
    000001a0: 	popq	%r14
    000001a2: 	popq	%r15
    000001a4: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 420
    000001a9: 	nopl	(%rax) # Size: 7
.Ltmp1821:
    000001b0: 	movq	(%rbp), %rdx
    000001b4: 	movl	$0x1, %edi
    000001b9: 	xorl	%eax, %eax
    000001bb: 	addl	$0x1, %r15d
    000001bf: 	leaq	DATAat0x4d004(%rip), %rsi
    000001c6: 	callq	__printf_chk@PLT # Offset: 454
    000001cb: 	movl	iterations(%rip), %r11d
    000001d2: 	cmpl	%r11d, %r15d
    000001d5: 	jl	.Ltmp1830 # Offset: 469
    000001db: 	jmp	.Ltmp1818 # Offset: 475
.Ltmp1826:
    000001e0: 	movq	%rbx, %rdi
    000001e3: 	movq	%rsp, %rsi
    000001e6: 	xorl	%edx, %edx
    000001e8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 488
    000001ed: 	movq	%rax, (%rbx)
    000001f0: 	movq	%rax, %rdi
    000001f3: 	movq	(%rsp), %rax
    000001f7: 	movq	%rax, 0x10(%rbx)
.Ltmp1833:
    000001fb: 	movq	%r12, %rdx
    000001fe: 	movq	%r13, %rsi
    00000201: 	callq	memcpy@PLT # Offset: 513
    00000206: 	movq	(%rsp), %r12
    0000020a: 	movq	(%rbx), %rdi
    0000020d: 	jmp	.Ltmp1831 # Offset: 525
.Ltmp1823:
    00000212: 	movq	%rbp, %rsi
    00000215: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000021c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 540
    00000221: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000228: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000022f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000236: 	jne	.Ltmp1832 # Offset: 566
.Ltmp1828:
    0000023c: 	movq	-0x8(%rdx), %rax
    00000240: 	addq	$0x200, %rax
    00000246: 	jmp	.Ltmp1832 # Offset: 582
.Ltmp1827:
    0000024b: 	testq	%r12, %r12
    0000024e: 	je	.Ltmp1831 # Offset: 590
    00000254: 	jmp	.Ltmp1833 # Offset: 596
.Ltmp1829:
    00000256: 	callq	__stack_chk_fail@PLT # Offset: 598
.Ltmp1825:
    0000025b: 	leaq	DATAat0x4d018(%rip), %rdi
    00000262: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 610
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSENIi14custom_cse_divIiELi4EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSENIi14custom_cse_addIiELi4EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 148
  State       : disassembled
  Address     : 0x1ccc0
  Size        : 0x3cd
  MaxSize     : 0x3d0
  Offset      : 0x1ccc0
  Section     : .text
  Orc Section : .local.text._Z9test_CSENIi14custom_cse_addIiELi4EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0147:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdi, %rbx
    00000016: 	subq	$0x38, %rsp
    0000001a: 	movq	%rcx, 0x18(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x28(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r10d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r10d, %r10d
    00000045: 	jle	.Ltmp1834 # Offset: 69
    0000004b: 	leal	-0x1(%r14), %r8d
    0000004f: 	leal	-0x2(%r14), %eax
    00000053: 	movl	(%rbx), %edi
    00000055: 	movl	0x4(%rbx), %esi
    00000058: 	movl	%eax, 0xc(%rsp)
    0000005c: 	movl	%r8d, %eax
    0000005f: 	movl	%r8d, %r15d
    00000062: 	xorl	%r13d, %r13d
    00000065: 	shrl	$0x2, %eax
    00000068: 	andl	$-0x4, %r15d
    0000006c: 	subl	$0x1, %eax
    0000006f: 	shlq	$0x4, %rax
    00000073: 	leaq	0x10(%rbx,%rax), %r12
    00000078: 	leal	0x1(%r15), %eax
    0000007c: 	movl	%eax, 0x10(%rsp)
.Ltmp1840:
    00000080: 	leal	(%rdi,%rsi), %eax
    00000083: 	addl	%ebp, %eax
    00000085: 	leal	(%rdi,%rax,2), %ecx
    00000088: 	leal	(%rsi,%rax,2), %edx
    0000008b: 	movl	%edi, %eax
    0000008d: 	subl	%esi, %eax
    0000008f: 	addl	%ecx, %eax
    00000091: 	subl	%edx, %eax
    00000093: 	addl	%ecx, %eax
    00000095: 	subl	%edx, %eax
    00000097: 	addl	%ecx, %eax
    00000099: 	subl	%edx, %eax
    0000009b: 	cmpl	$0x1, %r14d
    0000009f: 	jle	.Ltmp1835 # Offset: 159
    000000a5: 	cmpl	$0x2, 0xc(%rsp)
    000000aa: 	jbe	.Ltmp1836 # Offset: 170
    000000b0: 	movd	%ebp, %xmm5
    000000b4: 	movq	%rbx, %rdx
    000000b7: 	pxor	%xmm0, %xmm0
    000000bb: 	pshufd	$0x0, %xmm5, %xmm4
.Ltmp1837:
    000000c0: 	movdqu	(%rdx), %xmm6
    000000c4: 	movdqu	0x4(%rdx), %xmm3
    000000c9: 	addq	$0x10, %rdx
    000000cd: 	movdqu	-0xc(%rdx), %xmm1
    000000d2: 	paddd	%xmm6, %xmm3
    000000d6: 	movdqa	%xmm6, %xmm2
    000000da: 	paddd	%xmm4, %xmm3
    000000de: 	paddd	%xmm3, %xmm2
    000000e2: 	paddd	%xmm3, %xmm1
    000000e6: 	paddd	%xmm3, %xmm2
    000000ea: 	paddd	%xmm3, %xmm1
    000000ee: 	paddd	%xmm2, %xmm0
    000000f2: 	psubd	%xmm1, %xmm0
    000000f6: 	paddd	%xmm2, %xmm0
    000000fa: 	psubd	%xmm1, %xmm0
    000000fe: 	paddd	%xmm2, %xmm0
    00000102: 	psubd	%xmm1, %xmm0
    00000106: 	paddd	%xmm2, %xmm0
    0000010a: 	psubd	%xmm1, %xmm0
    0000010e: 	cmpq	%rdx, %r12
    00000111: 	jne	.Ltmp1837 # Offset: 273
    00000113: 	movdqa	%xmm0, %xmm1
    00000117: 	psrldq	$0x8, %xmm1
    0000011c: 	paddd	%xmm1, %xmm0
    00000120: 	movdqa	%xmm0, %xmm1
    00000124: 	psrldq	$0x4, %xmm1
    00000129: 	paddd	%xmm1, %xmm0
    0000012d: 	movd	%xmm0, %edx
    00000131: 	addl	%edx, %eax
    00000133: 	cmpl	%r8d, %r15d
    00000136: 	je	.Ltmp1835 # Offset: 310
    0000013c: 	movl	0x10(%rsp), %edx
    00000140: 	movl	%r15d, %r9d
.Ltmp1848:
    00000143: 	movl	%r14d, %r11d
    00000146: 	subl	%r9d, %r11d
    00000149: 	leal	-0x1(%r11), %ecx
    0000014d: 	cmpl	$0x2, %r11d
    00000151: 	je	.Ltmp1838 # Offset: 337
    00000153: 	movq	0x4(%rbx,%r9,4), %xmm5
    0000015a: 	movq	(%rbx,%r9,4), %xmm1
    00000160: 	movd	%ebp, %xmm7
    00000164: 	pshufd	$0xe0, %xmm7, %xmm0
    00000169: 	movdqa	%xmm5, %xmm2
    0000016d: 	movdqa	%xmm5, %xmm3
    00000171: 	paddd	%xmm1, %xmm2
    00000175: 	paddd	%xmm0, %xmm2
    00000179: 	movdqa	%xmm2, %xmm4
    0000017d: 	paddd	%xmm2, %xmm3
    00000181: 	paddd	%xmm1, %xmm4
    00000185: 	psubd	%xmm5, %xmm1
    00000189: 	paddd	%xmm2, %xmm4
    0000018d: 	movdqa	%xmm1, %xmm0
    00000191: 	paddd	%xmm3, %xmm2
    00000195: 	paddd	%xmm4, %xmm0
    00000199: 	psubd	%xmm2, %xmm0
    0000019d: 	paddd	%xmm4, %xmm0
    000001a1: 	psubd	%xmm2, %xmm0
    000001a5: 	paddd	%xmm4, %xmm0
    000001a9: 	psubd	%xmm2, %xmm0
    000001ad: 	movd	%xmm0, %r9d
    000001b2: 	pshufd	$0xe5, %xmm0, %xmm7
    000001b7: 	movd	%xmm7, %r11d
    000001bc: 	addl	%r11d, %r9d
    000001bf: 	addl	%r9d, %eax
    000001c2: 	movl	%ecx, %r9d
    000001c5: 	andl	$-0x2, %r9d
    000001c9: 	addl	%r9d, %edx
    000001cc: 	cmpl	%ecx, %r9d
    000001cf: 	je	.Ltmp1835 # Offset: 463
.Ltmp1838:
    000001d1: 	movslq	%edx, %rdx
    000001d4: 	movl	-0x4(%rbx,%rdx,4), %ecx
    000001d8: 	movl	(%rbx,%rdx,4), %r9d
    000001dc: 	leal	(%r9,%rcx), %edx
    000001e0: 	addl	%ebp, %edx
    000001e2: 	leal	(%rcx,%rdx,2), %ecx
    000001e5: 	leal	(%r9,%rdx,2), %edx
    000001e9: 	leal	(%rax,%rcx,2), %eax
    000001ec: 	subl	%edx, %eax
    000001ee: 	subl	%edx, %eax
    000001f0: 	addl	%ecx, %eax
    000001f2: 	subl	%edx, %eax
    000001f4: 	addl	%ecx, %eax
    000001f6: 	subl	%edx, %eax
.Ltmp1835:
    000001f8: 	testl	%eax, %eax
    000001fa: 	jne	.Ltmp1839 # Offset: 506
    00000200: 	addl	$0x1, %r13d
    00000204: 	cmpl	%r10d, %r13d
    00000207: 	jl	.Ltmp1840 # Offset: 519
.Ltmp1834:
    0000020d: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000214: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000021b: 	subq	$0x20, %rax
    0000021f: 	cmpq	%rax, %rbx
    00000222: 	je	.Ltmp1841 # Offset: 546
    00000228: 	movq	0x18(%rsp), %rax
    0000022d: 	leaq	0x10(%rbx), %rdi
    00000231: 	movq	%rdi, (%rbx)
    00000234: 	movq	(%rax), %rbp
    00000237: 	movq	0x8(%rax), %r12
    0000023b: 	movq	%rbp, %rax
    0000023e: 	addq	%r12, %rax
    00000241: 	je	.Ltmp1842 # Offset: 577
    00000243: 	testq	%rbp, %rbp
    00000246: 	je	.Ltmp1843 # Offset: 582
.Ltmp1842:
    0000024c: 	movq	%r12, 0x20(%rsp)
    00000251: 	cmpq	$0xf, %r12
    00000255: 	ja	.Ltmp1844 # Offset: 597
    0000025b: 	cmpq	$0x1, %r12
    0000025f: 	jne	.Ltmp1845 # Offset: 607
    00000265: 	movzbl	(%rbp), %eax
    00000269: 	movb	%al, 0x10(%rbx)
.Ltmp1849:
    0000026c: 	movq	%r12, 0x8(%rbx)
    00000270: 	movb	$0x0, (%rdi,%r12)
    00000275: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000027c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000283: 	addq	$0x20, %rax
    00000287: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000028e: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000295: 	je	.Ltmp1846 # Offset: 661
.Ltmp1850:
    0000029b: 	movq	-0x20(%rax), %rbp
    0000029f: 	callq	clock@PLT # Offset: 671
    000002a4: 	movq	%rax, end_time(%rip)
    000002ab: 	movq	0x28(%rsp), %rdx
    000002b0: 	subq	%fs:0x28, %rdx
    000002b9: 	jne	.Ltmp1847 # Offset: 697
    000002bf: 	subq	start_time(%rip), %rax
    000002c6: 	pxor	%xmm0, %xmm0
    000002ca: 	movq	%rbp, %rdi
    000002cd: 	cvtsi2sd	%rax, %xmm0
    000002d2: 	divsd	DATAat0x4d640(%rip), %xmm0
    000002da: 	addq	$0x38, %rsp
    000002de: 	popq	%rbx
    000002df: 	popq	%rbp
    000002e0: 	popq	%r12
    000002e2: 	popq	%r13
    000002e4: 	popq	%r14
    000002e6: 	popq	%r15
    000002e8: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 744
    000002ed: 	nopl	(%rax) # Size: 3
.Ltmp1839:
    000002f0: 	movq	0x18(%rsp), %rax
    000002f5: 	leaq	DATAat0x4d004(%rip), %rsi
    000002fc: 	movl	$0x1, %edi
    00000301: 	movl	%r8d, 0x14(%rsp)
    00000306: 	addl	$0x1, %r13d
    0000030a: 	movq	(%rax), %rdx
    0000030d: 	xorl	%eax, %eax
    0000030f: 	callq	__printf_chk@PLT # Offset: 783
    00000314: 	movl	iterations(%rip), %r10d
    0000031b: 	cmpl	%r10d, %r13d
    0000031e: 	jge	.Ltmp1834 # Offset: 798
    00000324: 	movl	(%rbx), %edi
    00000326: 	movl	0x4(%rbx), %esi
    00000329: 	movl	0x14(%rsp), %r8d
    0000032e: 	jmp	.Ltmp1840 # Offset: 814
.Ltmp1836:
    00000333: 	xorl	%r9d, %r9d
    00000336: 	movl	$0x1, %edx
    0000033b: 	jmp	.Ltmp1848 # Offset: 827
.Ltmp1844:
    00000340: 	movq	%rbx, %rdi
    00000343: 	leaq	0x20(%rsp), %rsi
    00000348: 	xorl	%edx, %edx
    0000034a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 842
    0000034f: 	movq	%rax, (%rbx)
    00000352: 	movq	%rax, %rdi
    00000355: 	movq	0x20(%rsp), %rax
    0000035a: 	movq	%rax, 0x10(%rbx)
.Ltmp1851:
    0000035e: 	movq	%r12, %rdx
    00000361: 	movq	%rbp, %rsi
    00000364: 	callq	memcpy@PLT # Offset: 868
    00000369: 	movq	0x20(%rsp), %r12
    0000036e: 	movq	(%rbx), %rdi
    00000371: 	jmp	.Ltmp1849 # Offset: 881
.Ltmp1841:
    00000376: 	movq	0x18(%rsp), %rsi
    0000037b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000382: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 898
    00000387: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000038e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000395: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000039c: 	jne	.Ltmp1850 # Offset: 924
.Ltmp1846:
    000003a2: 	movq	-0x8(%rdx), %rax
    000003a6: 	addq	$0x200, %rax
    000003ac: 	jmp	.Ltmp1850 # Offset: 940
.Ltmp1845:
    000003b1: 	testq	%r12, %r12
    000003b4: 	je	.Ltmp1849 # Offset: 948
    000003ba: 	jmp	.Ltmp1851 # Offset: 954
.Ltmp1847:
    000003bc: 	callq	__stack_chk_fail@PLT # Offset: 956
.Ltmp1843:
    000003c1: 	leaq	DATAat0x4d018(%rip), %rdi
    000003c8: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 968
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSENIi14custom_cse_addIiELi4EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSENIf14custom_cse_mulIfELi4EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 149
  State       : disassembled
  Address     : 0x1d090
  Size        : 0x36c
  MaxSize     : 0x370
  Offset      : 0x1d090
  Section     : .text
  Orc Section : .local.text._Z9test_CSENIf14custom_cse_mulIfELi4EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0148:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rdx, %rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movss	%xmm0, 0xc(%rsp)
    00000021: 	movq	%fs:0x28, %rax
    0000002a: 	movq	%rax, 0x18(%rsp)
    0000002f: 	xorl	%eax, %eax
    00000031: 	callq	clock@PLT # Offset: 49
    00000036: 	movl	iterations(%rip), %edx
    0000003c: 	movss	0xc(%rsp), %xmm3
    00000042: 	movq	%rax, start_time(%rip)
    00000049: 	testl	%edx, %edx
    0000004b: 	jle	.Ltmp1852 # Offset: 75
    00000051: 	leal	-0x2(%r14), %eax
    00000055: 	movss	(%r13), %xmm4
    0000005b: 	movss	0x4(%r13), %xmm5
    00000061: 	xorl	%r12d, %r12d
    00000064: 	movsd	DATAat0x4d620(%rip), %xmm8
    0000006d: 	leaq	0x8(%r13,%rax,4), %rbx
    00000072: 	pxor	%xmm10, %xmm10
    00000077: 	movq	DATAat0x4d5e0(%rip), %xmm7
    0000007f: 	movsd	DATAat0x4d628(%rip), %xmm6
    00000087: 	leaq	DATAat0x4d004(%rip), %r15
    0000008e: 	movss	DATAat0x4d5d0(%rip), %xmm9
    00000097: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1857:
    000000a0: 	movaps	%xmm4, %xmm0
    000000a3: 	movaps	%xmm4, %xmm11
    000000a7: 	movaps	%xmm5, %xmm1
    000000aa: 	mulss	%xmm5, %xmm0
    000000ae: 	movaps	%xmm4, %xmm2
    000000b1: 	addss	%xmm3, %xmm0
    000000b5: 	addss	%xmm0, %xmm11
    000000ba: 	addss	%xmm0, %xmm1
    000000be: 	addss	%xmm0, %xmm11
    000000c3: 	addss	%xmm0, %xmm1
    000000c7: 	movaps	%xmm11, %xmm0
    000000cb: 	addss	%xmm10, %xmm0
    000000d0: 	subss	%xmm1, %xmm0
    000000d4: 	addss	%xmm11, %xmm0
    000000d9: 	subss	%xmm1, %xmm0
    000000dd: 	addss	%xmm11, %xmm0
    000000e2: 	subss	%xmm1, %xmm0
    000000e6: 	addss	%xmm11, %xmm0
    000000eb: 	subss	%xmm1, %xmm0
    000000ef: 	cmpl	$0x1, %r14d
    000000f3: 	jle	.Ltmp1853 # Offset: 243
    000000f5: 	leaq	0x4(%r13), %rax
    000000f9: 	nopl	(%rax) # Size: 7
.Ltmp1854:
    00000100: 	movaps	%xmm2, %xmm11
    00000104: 	movss	(%rax), %xmm2
    00000108: 	addq	$0x4, %rax
    0000010c: 	movaps	%xmm2, %xmm12
    00000110: 	movaps	%xmm2, %xmm1
    00000113: 	mulss	%xmm11, %xmm12
    00000118: 	addss	%xmm3, %xmm12
    0000011d: 	addss	%xmm12, %xmm11
    00000122: 	addss	%xmm12, %xmm1
    00000127: 	addss	%xmm12, %xmm11
    0000012c: 	addss	%xmm12, %xmm1
    00000131: 	addss	%xmm11, %xmm0
    00000136: 	subss	%xmm1, %xmm0
    0000013a: 	addss	%xmm11, %xmm0
    0000013f: 	subss	%xmm1, %xmm0
    00000143: 	addss	%xmm11, %xmm0
    00000148: 	subss	%xmm1, %xmm0
    0000014c: 	addss	%xmm11, %xmm0
    00000151: 	subss	%xmm1, %xmm0
    00000155: 	cmpq	%rax, %rbx
    00000158: 	jne	.Ltmp1854 # Offset: 344
.Ltmp1853:
    0000015a: 	movaps	%xmm0, %xmm1
    0000015d: 	andps	%xmm9, %xmm1
    00000161: 	cvtss2sd	%xmm1, %xmm1
    00000165: 	comisd	%xmm8, %xmm1
    0000016a: 	jbe	.Ltmp1855 # Offset: 362
    0000016c: 	divss	%xmm0, %xmm0
.Ltmp1855:
    00000170: 	cvtss2sd	%xmm0, %xmm0
    00000174: 	andpd	%xmm7, %xmm0
    00000178: 	comisd	%xmm0, %xmm6
    0000017c: 	jbe	.Ltmp1856 # Offset: 380
    00000182: 	addl	$0x1, %r12d
    00000186: 	cmpl	%edx, %r12d
    00000189: 	jl	.Ltmp1857 # Offset: 393
.Ltmp1852:
    0000018f: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000196: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000019d: 	subq	$0x20, %rax
    000001a1: 	cmpq	%rax, %rbx
    000001a4: 	je	.Ltmp1858 # Offset: 420
    000001aa: 	leaq	0x10(%rbx), %rdi
    000001ae: 	movq	0x8(%rbp), %r12
    000001b2: 	movq	%rdi, (%rbx)
    000001b5: 	movq	(%rbp), %r13
    000001b9: 	movq	%r13, %rax
    000001bc: 	addq	%r12, %rax
    000001bf: 	je	.Ltmp1859 # Offset: 447
    000001c1: 	testq	%r13, %r13
    000001c4: 	je	.Ltmp1860 # Offset: 452
.Ltmp1859:
    000001ca: 	movq	%r12, 0x10(%rsp)
    000001cf: 	cmpq	$0xf, %r12
    000001d3: 	ja	.Ltmp1861 # Offset: 467
    000001d9: 	cmpq	$0x1, %r12
    000001dd: 	jne	.Ltmp1862 # Offset: 477
    000001e3: 	movzbl	(%r13), %eax
    000001e8: 	movb	%al, 0x10(%rbx)
.Ltmp1865:
    000001eb: 	movq	%r12, 0x8(%rbx)
    000001ef: 	movb	$0x0, (%rdi,%r12)
    000001f4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001fb: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000202: 	addq	$0x20, %rax
    00000206: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000020d: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000214: 	je	.Ltmp1863 # Offset: 532
.Ltmp1866:
    0000021a: 	movq	-0x20(%rax), %rbp
    0000021e: 	callq	clock@PLT # Offset: 542
    00000223: 	movq	%rax, end_time(%rip)
    0000022a: 	movq	0x18(%rsp), %rdx
    0000022f: 	subq	%fs:0x28, %rdx
    00000238: 	jne	.Ltmp1864 # Offset: 568
    0000023e: 	subq	start_time(%rip), %rax
    00000245: 	pxor	%xmm0, %xmm0
    00000249: 	movq	%rbp, %rdi
    0000024c: 	cvtsi2sd	%rax, %xmm0
    00000251: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000259: 	addq	$0x28, %rsp
    0000025d: 	popq	%rbx
    0000025e: 	popq	%rbp
    0000025f: 	popq	%r12
    00000261: 	popq	%r13
    00000263: 	popq	%r14
    00000265: 	popq	%r15
    00000267: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 615
    0000026c: 	nopl	(%rax) # Size: 4
.Ltmp1856:
    00000270: 	movq	(%rbp), %rdx
    00000274: 	movq	%r15, %rsi
    00000277: 	movl	$0x1, %edi
    0000027c: 	xorl	%eax, %eax
    0000027e: 	movss	%xmm3, 0xc(%rsp)
    00000284: 	addl	$0x1, %r12d
    00000288: 	callq	__printf_chk@PLT # Offset: 648
    0000028d: 	movl	iterations(%rip), %edx
    00000293: 	cmpl	%edx, %r12d
    00000296: 	jge	.Ltmp1852 # Offset: 662
    0000029c: 	movq	DATAat0x4d620(%rip), %rax
    000002a3: 	movss	(%r13), %xmm4
    000002a9: 	pxor	%xmm10, %xmm10
    000002ae: 	movss	DATAat0x4d5d0(%rip), %xmm9
    000002b7: 	movss	0x4(%r13), %xmm5
    000002bd: 	movss	0xc(%rsp), %xmm3
    000002c3: 	movq	%rax, %xmm8
    000002c8: 	movq	DATAat0x4d628(%rip), %rax
    000002cf: 	movq	DATAat0x4d5e0(%rip), %xmm7
    000002d7: 	movq	%rax, %xmm6
    000002dc: 	jmp	.Ltmp1857 # Offset: 732
.Ltmp1861:
    000002e1: 	movq	%rbx, %rdi
    000002e4: 	leaq	0x10(%rsp), %rsi
    000002e9: 	xorl	%edx, %edx
    000002eb: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 747
    000002f0: 	movq	%rax, (%rbx)
    000002f3: 	movq	%rax, %rdi
    000002f6: 	movq	0x10(%rsp), %rax
    000002fb: 	movq	%rax, 0x10(%rbx)
.Ltmp1867:
    000002ff: 	movq	%r12, %rdx
    00000302: 	movq	%r13, %rsi
    00000305: 	callq	memcpy@PLT # Offset: 773
    0000030a: 	movq	0x10(%rsp), %r12
    0000030f: 	movq	(%rbx), %rdi
    00000312: 	jmp	.Ltmp1865 # Offset: 786
.Ltmp1858:
    00000317: 	movq	%rbp, %rsi
    0000031a: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000321: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 801
    00000326: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000032d: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000334: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000033b: 	jne	.Ltmp1866 # Offset: 827
.Ltmp1863:
    00000341: 	movq	-0x8(%rdx), %rax
    00000345: 	addq	$0x200, %rax
    0000034b: 	jmp	.Ltmp1866 # Offset: 843
.Ltmp1862:
    00000350: 	testq	%r12, %r12
    00000353: 	je	.Ltmp1865 # Offset: 851
    00000359: 	jmp	.Ltmp1867 # Offset: 857
.Ltmp1864:
    0000035b: 	callq	__stack_chk_fail@PLT # Offset: 859
.Ltmp1860:
    00000360: 	leaq	DATAat0x4d018(%rip), %rdi
    00000367: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 871
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSENIf14custom_cse_mulIfELi4EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSENIf14custom_cse_addIfELi4EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 150
  State       : disassembled
  Address     : 0x1d400
  Size        : 0x36c
  MaxSize     : 0x370
  Offset      : 0x1d400
  Section     : .text
  Orc Section : .local.text._Z9test_CSENIf14custom_cse_addIfELi4EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0149:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rdx, %rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movss	%xmm0, 0xc(%rsp)
    00000021: 	movq	%fs:0x28, %rax
    0000002a: 	movq	%rax, 0x18(%rsp)
    0000002f: 	xorl	%eax, %eax
    00000031: 	callq	clock@PLT # Offset: 49
    00000036: 	movl	iterations(%rip), %edx
    0000003c: 	movss	0xc(%rsp), %xmm3
    00000042: 	movq	%rax, start_time(%rip)
    00000049: 	testl	%edx, %edx
    0000004b: 	jle	.Ltmp1868 # Offset: 75
    00000051: 	leal	-0x2(%r14), %eax
    00000055: 	movss	(%r13), %xmm4
    0000005b: 	movss	0x4(%r13), %xmm5
    00000061: 	xorl	%r12d, %r12d
    00000064: 	movsd	DATAat0x4d620(%rip), %xmm8
    0000006d: 	leaq	0x8(%r13,%rax,4), %rbx
    00000072: 	pxor	%xmm10, %xmm10
    00000077: 	movq	DATAat0x4d5e0(%rip), %xmm7
    0000007f: 	movsd	DATAat0x4d628(%rip), %xmm6
    00000087: 	leaq	DATAat0x4d004(%rip), %r15
    0000008e: 	movss	DATAat0x4d5d0(%rip), %xmm9
    00000097: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1873:
    000000a0: 	movaps	%xmm4, %xmm0
    000000a3: 	movaps	%xmm4, %xmm11
    000000a7: 	movaps	%xmm5, %xmm1
    000000aa: 	addss	%xmm5, %xmm0
    000000ae: 	movaps	%xmm4, %xmm2
    000000b1: 	addss	%xmm3, %xmm0
    000000b5: 	addss	%xmm0, %xmm11
    000000ba: 	addss	%xmm0, %xmm1
    000000be: 	addss	%xmm0, %xmm11
    000000c3: 	addss	%xmm0, %xmm1
    000000c7: 	movaps	%xmm11, %xmm0
    000000cb: 	addss	%xmm10, %xmm0
    000000d0: 	subss	%xmm1, %xmm0
    000000d4: 	addss	%xmm11, %xmm0
    000000d9: 	subss	%xmm1, %xmm0
    000000dd: 	addss	%xmm11, %xmm0
    000000e2: 	subss	%xmm1, %xmm0
    000000e6: 	addss	%xmm11, %xmm0
    000000eb: 	subss	%xmm1, %xmm0
    000000ef: 	cmpl	$0x1, %r14d
    000000f3: 	jle	.Ltmp1869 # Offset: 243
    000000f5: 	leaq	0x4(%r13), %rax
    000000f9: 	nopl	(%rax) # Size: 7
.Ltmp1870:
    00000100: 	movaps	%xmm2, %xmm11
    00000104: 	movss	(%rax), %xmm2
    00000108: 	addq	$0x4, %rax
    0000010c: 	movaps	%xmm2, %xmm12
    00000110: 	movaps	%xmm2, %xmm1
    00000113: 	addss	%xmm11, %xmm12
    00000118: 	addss	%xmm3, %xmm12
    0000011d: 	addss	%xmm12, %xmm11
    00000122: 	addss	%xmm12, %xmm1
    00000127: 	addss	%xmm12, %xmm11
    0000012c: 	addss	%xmm12, %xmm1
    00000131: 	addss	%xmm11, %xmm0
    00000136: 	subss	%xmm1, %xmm0
    0000013a: 	addss	%xmm11, %xmm0
    0000013f: 	subss	%xmm1, %xmm0
    00000143: 	addss	%xmm11, %xmm0
    00000148: 	subss	%xmm1, %xmm0
    0000014c: 	addss	%xmm11, %xmm0
    00000151: 	subss	%xmm1, %xmm0
    00000155: 	cmpq	%rax, %rbx
    00000158: 	jne	.Ltmp1870 # Offset: 344
.Ltmp1869:
    0000015a: 	movaps	%xmm0, %xmm1
    0000015d: 	andps	%xmm9, %xmm1
    00000161: 	cvtss2sd	%xmm1, %xmm1
    00000165: 	comisd	%xmm8, %xmm1
    0000016a: 	jbe	.Ltmp1871 # Offset: 362
    0000016c: 	divss	%xmm0, %xmm0
.Ltmp1871:
    00000170: 	cvtss2sd	%xmm0, %xmm0
    00000174: 	andpd	%xmm7, %xmm0
    00000178: 	comisd	%xmm0, %xmm6
    0000017c: 	jbe	.Ltmp1872 # Offset: 380
    00000182: 	addl	$0x1, %r12d
    00000186: 	cmpl	%edx, %r12d
    00000189: 	jl	.Ltmp1873 # Offset: 393
.Ltmp1868:
    0000018f: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000196: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000019d: 	subq	$0x20, %rax
    000001a1: 	cmpq	%rax, %rbx
    000001a4: 	je	.Ltmp1874 # Offset: 420
    000001aa: 	leaq	0x10(%rbx), %rdi
    000001ae: 	movq	0x8(%rbp), %r12
    000001b2: 	movq	%rdi, (%rbx)
    000001b5: 	movq	(%rbp), %r13
    000001b9: 	movq	%r13, %rax
    000001bc: 	addq	%r12, %rax
    000001bf: 	je	.Ltmp1875 # Offset: 447
    000001c1: 	testq	%r13, %r13
    000001c4: 	je	.Ltmp1876 # Offset: 452
.Ltmp1875:
    000001ca: 	movq	%r12, 0x10(%rsp)
    000001cf: 	cmpq	$0xf, %r12
    000001d3: 	ja	.Ltmp1877 # Offset: 467
    000001d9: 	cmpq	$0x1, %r12
    000001dd: 	jne	.Ltmp1878 # Offset: 477
    000001e3: 	movzbl	(%r13), %eax
    000001e8: 	movb	%al, 0x10(%rbx)
.Ltmp1881:
    000001eb: 	movq	%r12, 0x8(%rbx)
    000001ef: 	movb	$0x0, (%rdi,%r12)
    000001f4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001fb: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000202: 	addq	$0x20, %rax
    00000206: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000020d: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000214: 	je	.Ltmp1879 # Offset: 532
.Ltmp1882:
    0000021a: 	movq	-0x20(%rax), %rbp
    0000021e: 	callq	clock@PLT # Offset: 542
    00000223: 	movq	%rax, end_time(%rip)
    0000022a: 	movq	0x18(%rsp), %rdx
    0000022f: 	subq	%fs:0x28, %rdx
    00000238: 	jne	.Ltmp1880 # Offset: 568
    0000023e: 	subq	start_time(%rip), %rax
    00000245: 	pxor	%xmm0, %xmm0
    00000249: 	movq	%rbp, %rdi
    0000024c: 	cvtsi2sd	%rax, %xmm0
    00000251: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000259: 	addq	$0x28, %rsp
    0000025d: 	popq	%rbx
    0000025e: 	popq	%rbp
    0000025f: 	popq	%r12
    00000261: 	popq	%r13
    00000263: 	popq	%r14
    00000265: 	popq	%r15
    00000267: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 615
    0000026c: 	nopl	(%rax) # Size: 4
.Ltmp1872:
    00000270: 	movq	(%rbp), %rdx
    00000274: 	movq	%r15, %rsi
    00000277: 	movl	$0x1, %edi
    0000027c: 	xorl	%eax, %eax
    0000027e: 	movss	%xmm3, 0xc(%rsp)
    00000284: 	addl	$0x1, %r12d
    00000288: 	callq	__printf_chk@PLT # Offset: 648
    0000028d: 	movl	iterations(%rip), %edx
    00000293: 	cmpl	%edx, %r12d
    00000296: 	jge	.Ltmp1868 # Offset: 662
    0000029c: 	movq	DATAat0x4d620(%rip), %rax
    000002a3: 	movss	(%r13), %xmm4
    000002a9: 	pxor	%xmm10, %xmm10
    000002ae: 	movss	DATAat0x4d5d0(%rip), %xmm9
    000002b7: 	movss	0x4(%r13), %xmm5
    000002bd: 	movss	0xc(%rsp), %xmm3
    000002c3: 	movq	%rax, %xmm8
    000002c8: 	movq	DATAat0x4d628(%rip), %rax
    000002cf: 	movq	DATAat0x4d5e0(%rip), %xmm7
    000002d7: 	movq	%rax, %xmm6
    000002dc: 	jmp	.Ltmp1873 # Offset: 732
.Ltmp1877:
    000002e1: 	movq	%rbx, %rdi
    000002e4: 	leaq	0x10(%rsp), %rsi
    000002e9: 	xorl	%edx, %edx
    000002eb: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 747
    000002f0: 	movq	%rax, (%rbx)
    000002f3: 	movq	%rax, %rdi
    000002f6: 	movq	0x10(%rsp), %rax
    000002fb: 	movq	%rax, 0x10(%rbx)
.Ltmp1883:
    000002ff: 	movq	%r12, %rdx
    00000302: 	movq	%r13, %rsi
    00000305: 	callq	memcpy@PLT # Offset: 773
    0000030a: 	movq	0x10(%rsp), %r12
    0000030f: 	movq	(%rbx), %rdi
    00000312: 	jmp	.Ltmp1881 # Offset: 786
.Ltmp1874:
    00000317: 	movq	%rbp, %rsi
    0000031a: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000321: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 801
    00000326: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000032d: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000334: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000033b: 	jne	.Ltmp1882 # Offset: 827
.Ltmp1879:
    00000341: 	movq	-0x8(%rdx), %rax
    00000345: 	addq	$0x200, %rax
    0000034b: 	jmp	.Ltmp1882 # Offset: 843
.Ltmp1878:
    00000350: 	testq	%r12, %r12
    00000353: 	je	.Ltmp1881 # Offset: 851
    00000359: 	jmp	.Ltmp1883 # Offset: 857
.Ltmp1880:
    0000035b: 	callq	__stack_chk_fail@PLT # Offset: 859
.Ltmp1876:
    00000360: 	leaq	DATAat0x4d018(%rip), %rdi
    00000367: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 871
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSENIf14custom_cse_addIfELi4EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSENIa14custom_cse_divIaELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 151
  State       : disassembled
  Address     : 0x1d770
  Size        : 0x281
  MaxSize     : 0x290
  Offset      : 0x1d770
  Section     : .text
  Orc Section : .local.text._Z9test_CSENIa14custom_cse_divIaELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0150:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rcx, %rbp
    00000016: 	pushq	%rbx
    00000017: 	movl	%edx, %ebx
    00000019: 	subq	$0x18, %rsp
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x8(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	callq	clock@PLT # Offset: 45
    00000032: 	movl	iterations(%rip), %r9d
    00000039: 	movq	%rax, start_time(%rip)
    00000040: 	testl	%r9d, %r9d
    00000043: 	jle	.Ltmp1884 # Offset: 67
    00000049: 	leal	-0x2(%r14), %eax
    0000004d: 	movzbl	(%r13), %r10d
    00000052: 	movsbl	0x1(%r13), %r8d
    00000057: 	xorl	%r15d, %r15d
    0000005a: 	leaq	0x2(%r13,%rax), %r12
    0000005f: 	nop # Size: 1
.Ltmp1888:
    00000060: 	movl	%r8d, %eax
    00000063: 	movsbl	%r10b, %ecx
    00000067: 	cltd
    00000068: 	idivl	%ecx
    0000006a: 	addl	%ebx, %eax
    0000006c: 	movsbl	%al, %eax
    0000006f: 	leal	(%rcx,%rax,2), %esi
    00000072: 	leal	(%r8,%rax,2), %edx
    00000076: 	shll	$0x3, %esi
    00000079: 	subl	%edx, %esi
    0000007b: 	subl	%edx, %esi
    0000007d: 	subl	%edx, %esi
    0000007f: 	subl	%edx, %esi
    00000081: 	subl	%edx, %esi
    00000083: 	subl	%edx, %esi
    00000085: 	addl	%edx, %edx
    00000087: 	subl	%edx, %esi
    00000089: 	cmpl	$0x1, %r14d
    0000008d: 	jle	.Ltmp1885 # Offset: 141
    0000008f: 	leaq	0x1(%r13), %rdi
    00000093: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1886:
    00000098: 	movl	%ecx, %r11d
    0000009b: 	movsbl	(%rdi), %ecx
    0000009e: 	addq	$0x1, %rdi
    000000a2: 	movl	%ecx, %eax
    000000a4: 	cltd
    000000a5: 	idivl	%r11d
    000000a8: 	addl	%ebx, %eax
    000000aa: 	movsbl	%al, %eax
    000000ad: 	leal	(%rcx,%rax,2), %edx
    000000b0: 	leal	(%r11,%rax,2), %eax
    000000b4: 	leal	(%rsi,%rax,8), %eax
    000000b7: 	subl	%edx, %eax
    000000b9: 	subl	%edx, %eax
    000000bb: 	subl	%edx, %eax
    000000bd: 	subl	%edx, %eax
    000000bf: 	subl	%edx, %eax
    000000c1: 	subl	%edx, %eax
    000000c3: 	subl	%edx, %eax
    000000c5: 	subl	%edx, %eax
    000000c7: 	movl	%eax, %esi
    000000c9: 	cmpq	%r12, %rdi
    000000cc: 	jne	.Ltmp1886 # Offset: 204
.Ltmp1885:
    000000ce: 	testb	%sil, %sil
    000000d1: 	jne	.Ltmp1887 # Offset: 209
    000000d7: 	addl	$0x1, %r15d
    000000db: 	cmpl	%r9d, %r15d
    000000de: 	jl	.Ltmp1888 # Offset: 222
.Ltmp1884:
    000000e0: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000e7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000ee: 	subq	$0x20, %rax
    000000f2: 	cmpq	%rax, %rbx
    000000f5: 	je	.Ltmp1889 # Offset: 245
    000000fb: 	leaq	0x10(%rbx), %rdi
    000000ff: 	movq	0x8(%rbp), %r12
    00000103: 	movq	%rdi, (%rbx)
    00000106: 	movq	(%rbp), %r13
    0000010a: 	movq	%r13, %rax
    0000010d: 	addq	%r12, %rax
    00000110: 	je	.Ltmp1890 # Offset: 272
    00000112: 	testq	%r13, %r13
    00000115: 	je	.Ltmp1891 # Offset: 277
.Ltmp1890:
    0000011b: 	movq	%r12, (%rsp)
    0000011f: 	cmpq	$0xf, %r12
    00000123: 	ja	.Ltmp1892 # Offset: 291
    00000129: 	cmpq	$0x1, %r12
    0000012d: 	jne	.Ltmp1893 # Offset: 301
    00000133: 	movzbl	(%r13), %eax
    00000138: 	movb	%al, 0x10(%rbx)
.Ltmp1896:
    0000013b: 	movq	%r12, 0x8(%rbx)
    0000013f: 	movb	$0x0, (%rdi,%r12)
    00000144: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000014b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000152: 	addq	$0x20, %rax
    00000156: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000015d: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000164: 	je	.Ltmp1894 # Offset: 356
.Ltmp1897:
    0000016a: 	movq	-0x20(%rax), %rbp
    0000016e: 	callq	clock@PLT # Offset: 366
    00000173: 	movq	%rax, end_time(%rip)
    0000017a: 	movq	0x8(%rsp), %rdx
    0000017f: 	subq	%fs:0x28, %rdx
    00000188: 	jne	.Ltmp1895 # Offset: 392
    0000018e: 	subq	start_time(%rip), %rax
    00000195: 	pxor	%xmm0, %xmm0
    00000199: 	movq	%rbp, %rdi
    0000019c: 	cvtsi2sd	%rax, %xmm0
    000001a1: 	divsd	DATAat0x4d640(%rip), %xmm0
    000001a9: 	addq	$0x18, %rsp
    000001ad: 	popq	%rbx
    000001ae: 	popq	%rbp
    000001af: 	popq	%r12
    000001b1: 	popq	%r13
    000001b3: 	popq	%r14
    000001b5: 	popq	%r15
    000001b7: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 439
    000001bc: 	nopl	(%rax) # Size: 4
.Ltmp1887:
    000001c0: 	movq	(%rbp), %rdx
    000001c4: 	movl	$0x1, %edi
    000001c9: 	xorl	%eax, %eax
    000001cb: 	addl	$0x1, %r15d
    000001cf: 	leaq	DATAat0x4d004(%rip), %rsi
    000001d6: 	callq	__printf_chk@PLT # Offset: 470
    000001db: 	movl	iterations(%rip), %r9d
    000001e2: 	cmpl	%r15d, %r9d
    000001e5: 	jle	.Ltmp1884 # Offset: 485
    000001eb: 	movzbl	(%r13), %r10d
    000001f0: 	movsbl	0x1(%r13), %r8d
    000001f5: 	jmp	.Ltmp1888 # Offset: 501
.Ltmp1892:
    000001fa: 	movq	%rbx, %rdi
    000001fd: 	movq	%rsp, %rsi
    00000200: 	xorl	%edx, %edx
    00000202: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 514
    00000207: 	movq	%rax, (%rbx)
    0000020a: 	movq	%rax, %rdi
    0000020d: 	movq	(%rsp), %rax
    00000211: 	movq	%rax, 0x10(%rbx)
.Ltmp1898:
    00000215: 	movq	%r12, %rdx
    00000218: 	movq	%r13, %rsi
    0000021b: 	callq	memcpy@PLT # Offset: 539
    00000220: 	movq	(%rsp), %r12
    00000224: 	movq	(%rbx), %rdi
    00000227: 	jmp	.Ltmp1896 # Offset: 551
.Ltmp1889:
    0000022c: 	movq	%rbp, %rsi
    0000022f: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000236: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 566
    0000023b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000242: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000249: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000250: 	jne	.Ltmp1897 # Offset: 592
.Ltmp1894:
    00000256: 	movq	-0x8(%rdx), %rax
    0000025a: 	addq	$0x200, %rax
    00000260: 	jmp	.Ltmp1897 # Offset: 608
.Ltmp1893:
    00000265: 	testq	%r12, %r12
    00000268: 	je	.Ltmp1896 # Offset: 616
    0000026e: 	jmp	.Ltmp1898 # Offset: 622
.Ltmp1895:
    00000270: 	callq	__stack_chk_fail@PLT # Offset: 624
.Ltmp1891:
    00000275: 	leaq	DATAat0x4d018(%rip), %rdi
    0000027c: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 636
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSENIa14custom_cse_divIaELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSENIa14custom_cse_addIaELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 152
  State       : disassembled
  Address     : 0x1da00
  Size        : 0x5c2
  MaxSize     : 0x5d0
  Offset      : 0x1da00
  Section     : .text
  Orc Section : .local.text._Z9test_CSENIa14custom_cse_addIaELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0151:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movl	%esi, %r12d
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdi, %rbx
    00000016: 	subq	$0x48, %rsp
    0000001a: 	movq	%rcx, 0x20(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x38(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	movl	iterations(%rip), %eax
    00000041: 	movl	%eax, (%rsp)
    00000044: 	testl	%eax, %eax
    00000046: 	jle	.Ltmp1899 # Offset: 70
    0000004c: 	leal	-0x1(%r12), %edi
    00000051: 	leal	-0x2(%r12), %eax
    00000056: 	movd	%ebp, %xmm3
    0000005a: 	xorl	%r14d, %r14d
    0000005d: 	movl	%eax, 0x4(%rsp)
    00000061: 	movl	%edi, %eax
    00000063: 	punpcklbw	%xmm3, %xmm3
    00000067: 	movzbl	(%rbx), %r8d
    0000006b: 	shrl	$0x4, %eax
    0000006e: 	movl	%edi, 0x8(%rsp)
    00000072: 	andl	$-0x10, %edi
    00000075: 	punpcklwd	%xmm3, %xmm3
    00000079: 	subl	$0x1, %eax
    0000007c: 	movl	%edi, %r15d
    0000007f: 	shlq	$0x4, %rax
    00000083: 	leaq	0x10(%rbx,%rax), %r13
    00000088: 	leal	0x1(%rdi), %eax
    0000008b: 	movzbl	0x1(%rbx), %edi
    0000008f: 	movl	%eax, 0xc(%rsp)
    00000093: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1905:
    00000098: 	leal	(%rdi,%rbp), %eax
    0000009b: 	movsbl	%dil, %edx
    0000009f: 	addl	%r8d, %eax
    000000a2: 	movsbl	%al, %eax
    000000a5: 	leal	(%rdx,%rax,2), %edx
    000000a8: 	leal	(%r8,%rax,2), %eax
    000000ac: 	shll	$0x3, %eax
    000000af: 	subl	%edx, %eax
    000000b1: 	subl	%edx, %eax
    000000b3: 	subl	%edx, %eax
    000000b5: 	subl	%edx, %eax
    000000b7: 	subl	%edx, %eax
    000000b9: 	subl	%edx, %eax
    000000bb: 	addl	%edx, %edx
    000000bd: 	subl	%edx, %eax
    000000bf: 	movl	%eax, %edx
    000000c1: 	cmpl	$0x1, %r12d
    000000c5: 	jle	.Ltmp1900 # Offset: 197
    000000cb: 	cmpl	$0xe, 0x4(%rsp)
    000000d0: 	jbe	.Ltmp1901 # Offset: 208
    000000d6: 	pshufd	$0x0, %xmm3, %xmm5
    000000db: 	movq	%rbx, %rdx
    000000de: 	pxor	%xmm4, %xmm4
    000000e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1902:
    000000e8: 	movdqu	0x1(%rdx), %xmm7
    000000ed: 	movdqu	(%rdx), %xmm2
    000000f1: 	addq	$0x10, %rdx
    000000f5: 	movdqu	-0x10(%rdx), %xmm0
    000000fa: 	paddb	%xmm7, %xmm2
    000000fe: 	movdqa	%xmm7, %xmm1
    00000102: 	paddb	%xmm5, %xmm2
    00000106: 	paddb	%xmm2, %xmm0
    0000010a: 	paddb	%xmm2, %xmm1
    0000010e: 	paddb	%xmm2, %xmm0
    00000112: 	paddb	%xmm2, %xmm1
    00000116: 	paddb	%xmm0, %xmm0
    0000011a: 	movdqa	%xmm1, %xmm6
    0000011e: 	paddb	%xmm0, %xmm0
    00000122: 	paddb	%xmm1, %xmm6
    00000126: 	paddb	%xmm0, %xmm0
    0000012a: 	psubb	%xmm6, %xmm4
    0000012e: 	psubb	%xmm1, %xmm0
    00000132: 	paddb	%xmm6, %xmm1
    00000136: 	psubb	%xmm6, %xmm0
    0000013a: 	paddb	%xmm4, %xmm0
    0000013e: 	movdqa	%xmm0, %xmm4
    00000142: 	psubb	%xmm1, %xmm4
    00000146: 	cmpq	%r13, %rdx
    00000149: 	jne	.Ltmp1902 # Offset: 329
    0000014b: 	movdqa	%xmm4, %xmm0
    0000014f: 	psrldq	$0x8, %xmm0
    00000154: 	paddb	%xmm0, %xmm4
    00000158: 	pxor	%xmm0, %xmm0
    0000015c: 	psadbw	%xmm0, %xmm4
    00000160: 	movd	%xmm4, %edx
    00000164: 	addl	%eax, %edx
    00000166: 	cmpl	0x8(%rsp), %r15d
    0000016b: 	je	.Ltmp1900 # Offset: 363
    00000171: 	movl	0xc(%rsp), %ecx
    00000175: 	movl	%r15d, %eax
.Ltmp1913:
    00000178: 	movl	%r12d, %r9d
    0000017b: 	subl	%eax, %r9d
    0000017e: 	leal	-0x1(%r9), %esi
    00000182: 	subl	$0x2, %r9d
    00000186: 	cmpl	$0x6, %r9d
    0000018a: 	jbe	.Ltmp1903 # Offset: 394
    00000190: 	movq	0x1(%rbx,%rax), %xmm2
    00000196: 	movq	(%rbx,%rax), %xmm0
    0000019b: 	movl	%ebp, %eax
    0000019d: 	movzbl	%bpl, %r9d
    000001a1: 	shll	$0x8, %eax
    000001a4: 	orl	%r9d, %eax
    000001a7: 	movd	%eax, %xmm7
    000001ab: 	pshuflw	$0x0, %xmm7, %xmm1
    000001b0: 	paddb	%xmm0, %xmm1
    000001b4: 	paddb	%xmm2, %xmm1
    000001b8: 	paddb	%xmm1, %xmm0
    000001bc: 	paddb	%xmm1, %xmm2
    000001c0: 	paddb	%xmm1, %xmm0
    000001c4: 	paddb	%xmm2, %xmm1
    000001c8: 	paddb	%xmm0, %xmm0
    000001cc: 	movdqa	%xmm1, %xmm2
    000001d0: 	paddb	%xmm1, %xmm2
    000001d4: 	paddb	%xmm0, %xmm0
    000001d8: 	movdqa	%xmm2, %xmm4
    000001dc: 	paddb	%xmm2, %xmm4
    000001e0: 	paddb	%xmm1, %xmm2
    000001e4: 	paddb	%xmm0, %xmm0
    000001e8: 	paddb	%xmm4, %xmm2
    000001ec: 	psubb	%xmm1, %xmm0
    000001f0: 	pxor	%xmm1, %xmm1
    000001f4: 	psubb	%xmm2, %xmm0
    000001f8: 	movdqa	%xmm0, %xmm5
    000001fc: 	psadbw	%xmm1, %xmm5
    00000200: 	movq	%xmm5, %rax
    00000205: 	movq	%xmm5, 0x28(%rsp)
    0000020b: 	movl	%eax, %r9d
    0000020e: 	movl	%esi, %eax
    00000210: 	andl	$-0x8, %eax
    00000213: 	addl	%r9d, %edx
    00000216: 	addl	%eax, %ecx
    00000218: 	cmpl	%eax, %esi
    0000021a: 	je	.Ltmp1900 # Offset: 538
.Ltmp1903:
    00000220: 	movslq	%ecx, %rax
    00000223: 	addq	%rbx, %rax
    00000226: 	movsbl	(%rax), %r9d
    0000022a: 	movzbl	-0x1(%rax), %r11d
    0000022f: 	leal	(%r11,%r9), %eax
    00000233: 	movl	%r9d, %esi
    00000236: 	addl	%ebp, %eax
    00000238: 	movsbl	%al, %eax
    0000023b: 	leal	(%r9,%rax,2), %r10d
    0000023f: 	leal	(%r11,%rax,2), %eax
    00000243: 	leal	(%rdx,%rax,8), %eax
    00000246: 	subl	%r10d, %eax
    00000249: 	subl	%r10d, %eax
    0000024c: 	subl	%r10d, %eax
    0000024f: 	subl	%r10d, %eax
    00000252: 	subl	%r10d, %eax
    00000255: 	subl	%r10d, %eax
    00000258: 	subl	%r10d, %eax
    0000025b: 	subl	%r10d, %eax
    0000025e: 	movl	%eax, %edx
    00000260: 	leal	0x1(%rcx), %eax
    00000263: 	cmpl	%eax, %r12d
    00000266: 	jle	.Ltmp1900 # Offset: 614
    0000026c: 	cltq
    0000026e: 	addl	%ebp, %esi
    00000270: 	movsbl	(%rbx,%rax), %r10d
    00000275: 	addl	%r10d, %esi
    00000278: 	movl	%r10d, %eax
    0000027b: 	movsbl	%sil, %esi
    0000027f: 	leal	(%r10,%rsi,2), %r11d
    00000283: 	leal	(%r9,%rsi,2), %esi
    00000287: 	shll	$0x3, %esi
    0000028a: 	subl	%r11d, %esi
    0000028d: 	subl	%r11d, %esi
    00000290: 	subl	%r11d, %esi
    00000293: 	subl	%r11d, %esi
    00000296: 	subl	%r11d, %esi
    00000299: 	subl	%r11d, %esi
    0000029c: 	subl	%r11d, %esi
    0000029f: 	subl	%r11d, %esi
    000002a2: 	addl	%esi, %edx
    000002a4: 	leal	0x2(%rcx), %esi
    000002a7: 	cmpl	%esi, %r12d
    000002aa: 	jle	.Ltmp1900 # Offset: 682
    000002b0: 	movslq	%esi, %rsi
    000002b3: 	addl	%ebp, %eax
    000002b5: 	movsbl	(%rbx,%rsi), %r9d
    000002ba: 	addl	%r9d, %eax
    000002bd: 	movsbl	%al, %eax
    000002c0: 	leal	(%r9,%rax,2), %r11d
    000002c4: 	leal	(%r10,%rax,2), %eax
    000002c8: 	shll	$0x3, %eax
    000002cb: 	subl	%r11d, %eax
    000002ce: 	subl	%r11d, %eax
    000002d1: 	subl	%r11d, %eax
    000002d4: 	subl	%r11d, %eax
    000002d7: 	subl	%r11d, %eax
    000002da: 	subl	%r11d, %eax
    000002dd: 	subl	%r11d, %eax
    000002e0: 	subl	%r11d, %eax
    000002e3: 	addl	%eax, %edx
    000002e5: 	leal	0x3(%rcx), %eax
    000002e8: 	cmpl	%eax, %r12d
    000002eb: 	jle	.Ltmp1900 # Offset: 747
    000002f1: 	cltq
    000002f3: 	movzbl	(%rbx,%rax), %r10d
    000002f8: 	leal	(%rbp,%r9), %eax
    000002fd: 	addl	%r10d, %eax
    00000300: 	movsbl	%r10b, %esi
    00000304: 	movsbl	%al, %eax
    00000307: 	leal	(%rsi,%rax,2), %r11d
    0000030b: 	leal	(%r9,%rax,2), %eax
    0000030f: 	shll	$0x3, %eax
    00000312: 	subl	%r11d, %eax
    00000315: 	subl	%r11d, %eax
    00000318: 	subl	%r11d, %eax
    0000031b: 	subl	%r11d, %eax
    0000031e: 	subl	%r11d, %eax
    00000321: 	subl	%r11d, %eax
    00000324: 	subl	%r11d, %eax
    00000327: 	subl	%r11d, %eax
    0000032a: 	addl	%eax, %edx
    0000032c: 	leal	0x4(%rcx), %eax
    0000032f: 	cmpl	%eax, %r12d
    00000332: 	jle	.Ltmp1900 # Offset: 818
    00000338: 	cltq
    0000033a: 	movzbl	(%rbx,%rax), %r9d
    0000033f: 	leal	(%rbp,%r10), %eax
    00000344: 	addl	%r9d, %eax
    00000347: 	movsbl	%r9b, %r10d
    0000034b: 	movsbl	%al, %eax
    0000034e: 	leal	(%r10,%rax,2), %r11d
    00000352: 	leal	(%rsi,%rax,2), %eax
    00000355: 	shll	$0x3, %eax
    00000358: 	subl	%r11d, %eax
    0000035b: 	subl	%r11d, %eax
    0000035e: 	subl	%r11d, %eax
    00000361: 	subl	%r11d, %eax
    00000364: 	subl	%r11d, %eax
    00000367: 	subl	%r11d, %eax
    0000036a: 	subl	%r11d, %eax
    0000036d: 	subl	%r11d, %eax
    00000370: 	addl	%eax, %edx
    00000372: 	leal	0x5(%rcx), %eax
    00000375: 	cmpl	%eax, %r12d
    00000378: 	jle	.Ltmp1900 # Offset: 888
    0000037a: 	cltq
    0000037c: 	addl	$0x6, %ecx
    0000037f: 	movsbl	(%rbx,%rax), %r11d
    00000384: 	leal	(%rbp,%r9), %eax
    00000389: 	addl	%r11d, %eax
    0000038c: 	movsbl	%al, %eax
    0000038f: 	leal	(%r11,%rax,2), %r9d
    00000393: 	leal	(%r10,%rax,2), %eax
    00000397: 	shll	$0x3, %eax
    0000039a: 	subl	%r9d, %eax
    0000039d: 	subl	%r9d, %eax
    000003a0: 	subl	%r9d, %eax
    000003a3: 	subl	%r9d, %eax
    000003a6: 	subl	%r9d, %eax
    000003a9: 	subl	%r9d, %eax
    000003ac: 	subl	%r9d, %eax
    000003af: 	subl	%r9d, %eax
    000003b2: 	addl	%eax, %edx
    000003b4: 	cmpl	%ecx, %r12d
    000003b7: 	jle	.Ltmp1900 # Offset: 951
    000003b9: 	movslq	%ecx, %rcx
    000003bc: 	leal	(%rbp,%r11), %eax
    000003c1: 	movsbl	(%rbx,%rcx), %ecx
    000003c5: 	addl	%ecx, %eax
    000003c7: 	movsbl	%al, %eax
    000003ca: 	leal	(%rcx,%rax,2), %ecx
    000003cd: 	leal	(%r11,%rax,2), %eax
    000003d1: 	shll	$0x3, %eax
    000003d4: 	subl	%ecx, %eax
    000003d6: 	subl	%ecx, %eax
    000003d8: 	subl	%ecx, %eax
    000003da: 	subl	%ecx, %eax
    000003dc: 	subl	%ecx, %eax
    000003de: 	subl	%ecx, %eax
    000003e0: 	subl	%ecx, %eax
    000003e2: 	subl	%ecx, %eax
    000003e4: 	addl	%eax, %edx
.Ltmp1900:
    000003e6: 	testb	%dl, %dl
    000003e8: 	jne	.Ltmp1904 # Offset: 1000
    000003ee: 	addl	$0x1, %r14d
    000003f2: 	cmpl	(%rsp), %r14d
    000003f6: 	jl	.Ltmp1905 # Offset: 1014
.Ltmp1899:
    000003fc: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000403: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000040a: 	subq	$0x20, %rax
    0000040e: 	cmpq	%rax, %rbx
    00000411: 	je	.Ltmp1906 # Offset: 1041
    00000417: 	movq	0x20(%rsp), %rax
    0000041c: 	leaq	0x10(%rbx), %rdi
    00000420: 	movq	%rdi, (%rbx)
    00000423: 	movq	(%rax), %rbp
    00000426: 	movq	0x8(%rax), %r12
    0000042a: 	movq	%rbp, %rax
    0000042d: 	addq	%r12, %rax
    00000430: 	je	.Ltmp1907 # Offset: 1072
    00000432: 	testq	%rbp, %rbp
    00000435: 	je	.Ltmp1908 # Offset: 1077
.Ltmp1907:
    0000043b: 	movq	%r12, 0x30(%rsp)
    00000440: 	cmpq	$0xf, %r12
    00000444: 	ja	.Ltmp1909 # Offset: 1092
    0000044a: 	cmpq	$0x1, %r12
    0000044e: 	jne	.Ltmp1910 # Offset: 1102
    00000454: 	movzbl	(%rbp), %eax
    00000458: 	movb	%al, 0x10(%rbx)
.Ltmp1914:
    0000045b: 	movq	%r12, 0x8(%rbx)
    0000045f: 	movb	$0x0, (%rdi,%r12)
    00000464: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000046b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000472: 	addq	$0x20, %rax
    00000476: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000047d: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000484: 	je	.Ltmp1911 # Offset: 1156
.Ltmp1915:
    0000048a: 	movq	-0x20(%rax), %rbp
    0000048e: 	callq	clock@PLT # Offset: 1166
    00000493: 	movq	%rax, end_time(%rip)
    0000049a: 	movq	0x38(%rsp), %rdx
    0000049f: 	subq	%fs:0x28, %rdx
    000004a8: 	jne	.Ltmp1912 # Offset: 1192
    000004ae: 	subq	start_time(%rip), %rax
    000004b5: 	pxor	%xmm0, %xmm0
    000004b9: 	movq	%rbp, %rdi
    000004bc: 	cvtsi2sd	%rax, %xmm0
    000004c1: 	divsd	DATAat0x4d640(%rip), %xmm0
    000004c9: 	addq	$0x48, %rsp
    000004cd: 	popq	%rbx
    000004ce: 	popq	%rbp
    000004cf: 	popq	%r12
    000004d1: 	popq	%r13
    000004d3: 	popq	%r14
    000004d5: 	popq	%r15
    000004d7: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1239
    000004dc: 	nopl	(%rax) # Size: 4
.Ltmp1904:
    000004e0: 	movq	0x20(%rsp), %rax
    000004e5: 	leaq	DATAat0x4d004(%rip), %rsi
    000004ec: 	movl	$0x1, %edi
    000004f1: 	movaps	%xmm3, 0x10(%rsp)
    000004f6: 	addl	$0x1, %r14d
    000004fa: 	movq	(%rax), %rdx
    000004fd: 	xorl	%eax, %eax
    000004ff: 	callq	__printf_chk@PLT # Offset: 1279
    00000504: 	movl	iterations(%rip), %eax
    0000050a: 	movl	%eax, (%rsp)
    0000050d: 	cmpl	%r14d, %eax
    00000510: 	jle	.Ltmp1899 # Offset: 1296
    00000516: 	movzbl	(%rbx), %r8d
    0000051a: 	movzbl	0x1(%rbx), %edi
    0000051e: 	movdqa	0x10(%rsp), %xmm3
    00000524: 	jmp	.Ltmp1905 # Offset: 1316
.Ltmp1901:
    00000529: 	xorl	%eax, %eax
    0000052b: 	movl	$0x1, %ecx
    00000530: 	jmp	.Ltmp1913 # Offset: 1328
.Ltmp1909:
    00000535: 	movq	%rbx, %rdi
    00000538: 	leaq	0x30(%rsp), %rsi
    0000053d: 	xorl	%edx, %edx
    0000053f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1343
    00000544: 	movq	%rax, (%rbx)
    00000547: 	movq	%rax, %rdi
    0000054a: 	movq	0x30(%rsp), %rax
    0000054f: 	movq	%rax, 0x10(%rbx)
.Ltmp1916:
    00000553: 	movq	%r12, %rdx
    00000556: 	movq	%rbp, %rsi
    00000559: 	callq	memcpy@PLT # Offset: 1369
    0000055e: 	movq	0x30(%rsp), %r12
    00000563: 	movq	(%rbx), %rdi
    00000566: 	jmp	.Ltmp1914 # Offset: 1382
.Ltmp1906:
    0000056b: 	movq	0x20(%rsp), %rsi
    00000570: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000577: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1399
    0000057c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000583: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000058a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000591: 	jne	.Ltmp1915 # Offset: 1425
.Ltmp1911:
    00000597: 	movq	-0x8(%rdx), %rax
    0000059b: 	addq	$0x200, %rax
    000005a1: 	jmp	.Ltmp1915 # Offset: 1441
.Ltmp1910:
    000005a6: 	testq	%r12, %r12
    000005a9: 	je	.Ltmp1914 # Offset: 1449
    000005af: 	jmp	.Ltmp1916 # Offset: 1455
.Ltmp1912:
    000005b1: 	callq	__stack_chk_fail@PLT # Offset: 1457
.Ltmp1908:
    000005b6: 	leaq	DATAat0x4d018(%rip), %rdi
    000005bd: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1469
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSENIa14custom_cse_addIaELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSENIh14custom_cse_addIhELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 153
  State       : disassembled
  Address     : 0x1dfd0
  Size        : 0x5ab
  MaxSize     : 0x5b0
  Offset      : 0x1dfd0
  Section     : .text
  Orc Section : .local.text._Z9test_CSENIh14custom_cse_addIhELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0152:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movl	%esi, %r12d
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdi, %rbx
    00000016: 	subq	$0x48, %rsp
    0000001a: 	movq	%rcx, 0x20(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x38(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	movl	iterations(%rip), %eax
    00000041: 	movl	%eax, (%rsp)
    00000044: 	testl	%eax, %eax
    00000046: 	jle	.Ltmp1917 # Offset: 70
    0000004c: 	leal	-0x1(%r12), %ecx
    00000051: 	leal	-0x2(%r12), %eax
    00000056: 	movd	%ebp, %xmm3
    0000005a: 	xorl	%r14d, %r14d
    0000005d: 	movl	%eax, 0x4(%rsp)
    00000061: 	movl	%ecx, %eax
    00000063: 	punpcklbw	%xmm3, %xmm3
    00000067: 	movzbl	(%rbx), %r9d
    0000006b: 	shrl	$0x4, %eax
    0000006e: 	movl	%ecx, 0x8(%rsp)
    00000072: 	andl	$-0x10, %ecx
    00000075: 	movzbl	0x1(%rbx), %r8d
    0000007a: 	subl	$0x1, %eax
    0000007d: 	movl	%ecx, %r15d
    00000080: 	punpcklwd	%xmm3, %xmm3
    00000084: 	shlq	$0x4, %rax
    00000088: 	leaq	0x10(%rbx,%rax), %r13
    0000008d: 	leal	0x1(%rcx), %eax
    00000090: 	movl	%eax, 0xc(%rsp)
    00000094: 	nopl	(%rax) # Size: 4
.Ltmp1923:
    00000098: 	leal	(%rbp,%r9), %eax
    0000009d: 	movzbl	%r8b, %edx
    000000a1: 	addl	%r8d, %eax
    000000a4: 	movzbl	%al, %eax
    000000a7: 	leal	(%rdx,%rax,2), %edx
    000000aa: 	leal	(%r9,%rax,2), %eax
    000000ae: 	shll	$0x3, %eax
    000000b1: 	subl	%edx, %eax
    000000b3: 	subl	%edx, %eax
    000000b5: 	subl	%edx, %eax
    000000b7: 	subl	%edx, %eax
    000000b9: 	subl	%edx, %eax
    000000bb: 	subl	%edx, %eax
    000000bd: 	addl	%edx, %edx
    000000bf: 	subl	%edx, %eax
    000000c1: 	cmpl	$0x1, %r12d
    000000c5: 	jle	.Ltmp1918 # Offset: 197
    000000cb: 	cmpl	$0xe, 0x4(%rsp)
    000000d0: 	jbe	.Ltmp1919 # Offset: 208
    000000d6: 	pshufd	$0x0, %xmm3, %xmm5
    000000db: 	movq	%rbx, %rdx
    000000de: 	pxor	%xmm4, %xmm4
    000000e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1920:
    000000e8: 	movdqu	(%rdx), %xmm7
    000000ec: 	movdqu	0x1(%rdx), %xmm2
    000000f1: 	addq	$0x10, %rdx
    000000f5: 	movdqu	-0xf(%rdx), %xmm1
    000000fa: 	paddb	%xmm7, %xmm2
    000000fe: 	movdqa	%xmm7, %xmm0
    00000102: 	paddb	%xmm5, %xmm2
    00000106: 	paddb	%xmm2, %xmm0
    0000010a: 	paddb	%xmm2, %xmm1
    0000010e: 	paddb	%xmm2, %xmm0
    00000112: 	paddb	%xmm2, %xmm1
    00000116: 	paddb	%xmm0, %xmm0
    0000011a: 	movdqa	%xmm1, %xmm6
    0000011e: 	paddb	%xmm0, %xmm0
    00000122: 	paddb	%xmm1, %xmm6
    00000126: 	paddb	%xmm0, %xmm0
    0000012a: 	psubb	%xmm6, %xmm4
    0000012e: 	psubb	%xmm1, %xmm0
    00000132: 	paddb	%xmm6, %xmm1
    00000136: 	psubb	%xmm6, %xmm0
    0000013a: 	psubb	%xmm1, %xmm0
    0000013e: 	paddb	%xmm0, %xmm4
    00000142: 	cmpq	%rdx, %r13
    00000145: 	jne	.Ltmp1920 # Offset: 325
    00000147: 	movdqa	%xmm4, %xmm0
    0000014b: 	psrldq	$0x8, %xmm0
    00000150: 	paddb	%xmm0, %xmm4
    00000154: 	pxor	%xmm0, %xmm0
    00000158: 	psadbw	%xmm0, %xmm4
    0000015c: 	movd	%xmm4, %edx
    00000160: 	addl	%edx, %eax
    00000162: 	cmpl	0x8(%rsp), %r15d
    00000167: 	je	.Ltmp1918 # Offset: 359
    0000016d: 	movl	0xc(%rsp), %ecx
    00000171: 	movl	%r15d, %edx
.Ltmp1931:
    00000174: 	movl	%r12d, %edi
    00000177: 	subl	%edx, %edi
    00000179: 	leal	-0x1(%rdi), %esi
    0000017c: 	subl	$0x2, %edi
    0000017f: 	cmpl	$0x6, %edi
    00000182: 	jbe	.Ltmp1921 # Offset: 386
    00000188: 	movq	(%rbx,%rdx), %xmm0
    0000018d: 	movq	0x1(%rbx,%rdx), %xmm2
    00000193: 	movl	%ebp, %edx
    00000195: 	movzbl	%bpl, %edi
    00000199: 	shll	$0x8, %edx
    0000019c: 	orl	%edi, %edx
    0000019e: 	movd	%edx, %xmm7
    000001a2: 	pshuflw	$0x0, %xmm7, %xmm1
    000001a7: 	paddb	%xmm0, %xmm1
    000001ab: 	paddb	%xmm2, %xmm1
    000001af: 	paddb	%xmm1, %xmm0
    000001b3: 	paddb	%xmm1, %xmm2
    000001b7: 	paddb	%xmm1, %xmm0
    000001bb: 	paddb	%xmm2, %xmm1
    000001bf: 	paddb	%xmm0, %xmm0
    000001c3: 	movdqa	%xmm1, %xmm4
    000001c7: 	paddb	%xmm1, %xmm4
    000001cb: 	paddb	%xmm0, %xmm0
    000001cf: 	movdqa	%xmm4, %xmm2
    000001d3: 	paddb	%xmm4, %xmm2
    000001d7: 	paddb	%xmm0, %xmm0
    000001db: 	psubb	%xmm1, %xmm0
    000001df: 	paddb	%xmm4, %xmm1
    000001e3: 	paddb	%xmm2, %xmm1
    000001e7: 	psubb	%xmm1, %xmm0
    000001eb: 	pxor	%xmm1, %xmm1
    000001ef: 	movdqa	%xmm0, %xmm5
    000001f3: 	psadbw	%xmm1, %xmm5
    000001f7: 	movq	%xmm5, %rdx
    000001fc: 	movq	%xmm5, 0x28(%rsp)
    00000202: 	movl	%edx, %edi
    00000204: 	movl	%esi, %edx
    00000206: 	andl	$-0x8, %edx
    00000209: 	addl	%edi, %eax
    0000020b: 	addl	%edx, %ecx
    0000020d: 	cmpl	%esi, %edx
    0000020f: 	je	.Ltmp1918 # Offset: 527
.Ltmp1921:
    00000215: 	movslq	%ecx, %rdx
    00000218: 	addq	%rbx, %rdx
    0000021b: 	movzbl	(%rdx), %r10d
    0000021f: 	movzbl	-0x1(%rdx), %r11d
    00000224: 	leal	(%r11,%r10), %edx
    00000228: 	movl	%r10d, %esi
    0000022b: 	addl	%ebp, %edx
    0000022d: 	movzbl	%dl, %edx
    00000230: 	leal	(%r10,%rdx,2), %edi
    00000234: 	leal	(%r11,%rdx,2), %edx
    00000238: 	leal	(%rax,%rdx,8), %eax
    0000023b: 	leal	0x1(%rcx), %edx
    0000023e: 	subl	%edi, %eax
    00000240: 	subl	%edi, %eax
    00000242: 	subl	%edi, %eax
    00000244: 	subl	%edi, %eax
    00000246: 	subl	%edi, %eax
    00000248: 	subl	%edi, %eax
    0000024a: 	addl	%edi, %edi
    0000024c: 	subl	%edi, %eax
    0000024e: 	cmpl	%edx, %r12d
    00000251: 	jle	.Ltmp1918 # Offset: 593
    00000257: 	movslq	%edx, %rdx
    0000025a: 	addl	%ebp, %esi
    0000025c: 	movzbl	(%rbx,%rdx), %edi
    00000260: 	addl	%edi, %esi
    00000262: 	movl	%edi, %edx
    00000264: 	movzbl	%sil, %esi
    00000268: 	leal	(%rdi,%rsi,2), %r11d
    0000026c: 	leal	(%r10,%rsi,2), %esi
    00000270: 	shll	$0x3, %esi
    00000273: 	subl	%r11d, %esi
    00000276: 	subl	%r11d, %esi
    00000279: 	subl	%r11d, %esi
    0000027c: 	subl	%r11d, %esi
    0000027f: 	subl	%r11d, %esi
    00000282: 	subl	%r11d, %esi
    00000285: 	addl	%r11d, %r11d
    00000288: 	subl	%r11d, %esi
    0000028b: 	addl	%esi, %eax
    0000028d: 	leal	0x2(%rcx), %esi
    00000290: 	cmpl	%esi, %r12d
    00000293: 	jle	.Ltmp1918 # Offset: 659
    00000299: 	movslq	%esi, %rsi
    0000029c: 	addl	%ebp, %edx
    0000029e: 	movzbl	(%rbx,%rsi), %r10d
    000002a3: 	addl	%r10d, %edx
    000002a6: 	movzbl	%dl, %edx
    000002a9: 	leal	(%r10,%rdx,2), %r11d
    000002ad: 	leal	(%rdi,%rdx,2), %edx
    000002b0: 	shll	$0x3, %edx
    000002b3: 	subl	%r11d, %edx
    000002b6: 	subl	%r11d, %edx
    000002b9: 	subl	%r11d, %edx
    000002bc: 	subl	%r11d, %edx
    000002bf: 	subl	%r11d, %edx
    000002c2: 	subl	%r11d, %edx
    000002c5: 	addl	%r11d, %r11d
    000002c8: 	subl	%r11d, %edx
    000002cb: 	addl	%edx, %eax
    000002cd: 	leal	0x3(%rcx), %edx
    000002d0: 	cmpl	%edx, %r12d
    000002d3: 	jle	.Ltmp1918 # Offset: 723
    000002d9: 	movslq	%edx, %rdx
    000002dc: 	movzbl	(%rbx,%rdx), %edi
    000002e0: 	leal	(%rbp,%r10), %edx
    000002e5: 	addl	%edi, %edx
    000002e7: 	movzbl	%dil, %esi
    000002eb: 	movzbl	%dl, %edx
    000002ee: 	leal	(%rsi,%rdx,2), %r11d
    000002f2: 	leal	(%r10,%rdx,2), %edx
    000002f6: 	shll	$0x3, %edx
    000002f9: 	subl	%r11d, %edx
    000002fc: 	subl	%r11d, %edx
    000002ff: 	subl	%r11d, %edx
    00000302: 	subl	%r11d, %edx
    00000305: 	subl	%r11d, %edx
    00000308: 	subl	%r11d, %edx
    0000030b: 	addl	%r11d, %r11d
    0000030e: 	subl	%r11d, %edx
    00000311: 	addl	%edx, %eax
    00000313: 	leal	0x4(%rcx), %edx
    00000316: 	cmpl	%edx, %r12d
    00000319: 	jle	.Ltmp1918 # Offset: 793
    0000031f: 	movslq	%edx, %rdx
    00000322: 	movzbl	(%rbx,%rdx), %r10d
    00000327: 	leal	(%rbp,%rdi), %edx
    0000032b: 	addl	%r10d, %edx
    0000032e: 	movzbl	%r10b, %edi
    00000332: 	movzbl	%dl, %edx
    00000335: 	leal	(%rdi,%rdx,2), %r11d
    00000339: 	leal	(%rsi,%rdx,2), %edx
    0000033c: 	shll	$0x3, %edx
    0000033f: 	subl	%r11d, %edx
    00000342: 	subl	%r11d, %edx
    00000345: 	subl	%r11d, %edx
    00000348: 	subl	%r11d, %edx
    0000034b: 	subl	%r11d, %edx
    0000034e: 	subl	%r11d, %edx
    00000351: 	addl	%r11d, %r11d
    00000354: 	subl	%r11d, %edx
    00000357: 	addl	%edx, %eax
    00000359: 	leal	0x5(%rcx), %edx
    0000035c: 	cmpl	%edx, %r12d
    0000035f: 	jle	.Ltmp1918 # Offset: 863
    00000361: 	movslq	%edx, %rdx
    00000364: 	addl	$0x6, %ecx
    00000367: 	movzbl	(%rbx,%rdx), %r11d
    0000036c: 	leal	(%rbp,%r10), %edx
    00000371: 	addl	%r11d, %edx
    00000374: 	movzbl	%dl, %edx
    00000377: 	leal	(%r11,%rdx,2), %r10d
    0000037b: 	leal	(%rdi,%rdx,2), %edx
    0000037e: 	shll	$0x3, %edx
    00000381: 	subl	%r10d, %edx
    00000384: 	subl	%r10d, %edx
    00000387: 	subl	%r10d, %edx
    0000038a: 	subl	%r10d, %edx
    0000038d: 	subl	%r10d, %edx
    00000390: 	subl	%r10d, %edx
    00000393: 	addl	%r10d, %r10d
    00000396: 	subl	%r10d, %edx
    00000399: 	addl	%edx, %eax
    0000039b: 	cmpl	%ecx, %r12d
    0000039e: 	jle	.Ltmp1918 # Offset: 926
    000003a0: 	movslq	%ecx, %rcx
    000003a3: 	leal	(%rbp,%r11), %edx
    000003a8: 	movzbl	(%rbx,%rcx), %ecx
    000003ac: 	addl	%ecx, %edx
    000003ae: 	movzbl	%dl, %edx
    000003b1: 	leal	(%rcx,%rdx,2), %ecx
    000003b4: 	leal	(%r11,%rdx,2), %edx
    000003b8: 	shll	$0x3, %edx
    000003bb: 	subl	%ecx, %edx
    000003bd: 	subl	%ecx, %edx
    000003bf: 	subl	%ecx, %edx
    000003c1: 	subl	%ecx, %edx
    000003c3: 	subl	%ecx, %edx
    000003c5: 	subl	%ecx, %edx
    000003c7: 	addl	%ecx, %ecx
    000003c9: 	subl	%ecx, %edx
    000003cb: 	addl	%edx, %eax
.Ltmp1918:
    000003cd: 	testb	%al, %al
    000003cf: 	jne	.Ltmp1922 # Offset: 975
    000003d5: 	addl	$0x1, %r14d
    000003d9: 	cmpl	(%rsp), %r14d
    000003dd: 	jl	.Ltmp1923 # Offset: 989
.Ltmp1917:
    000003e3: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000003ea: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000003f1: 	subq	$0x20, %rax
    000003f5: 	cmpq	%rax, %rbx
    000003f8: 	je	.Ltmp1924 # Offset: 1016
    000003fe: 	movq	0x20(%rsp), %rax
    00000403: 	leaq	0x10(%rbx), %rdi
    00000407: 	movq	%rdi, (%rbx)
    0000040a: 	movq	(%rax), %rbp
    0000040d: 	movq	0x8(%rax), %r12
    00000411: 	movq	%rbp, %rax
    00000414: 	addq	%r12, %rax
    00000417: 	je	.Ltmp1925 # Offset: 1047
    00000419: 	testq	%rbp, %rbp
    0000041c: 	je	.Ltmp1926 # Offset: 1052
.Ltmp1925:
    00000422: 	movq	%r12, 0x30(%rsp)
    00000427: 	cmpq	$0xf, %r12
    0000042b: 	ja	.Ltmp1927 # Offset: 1067
    00000431: 	cmpq	$0x1, %r12
    00000435: 	jne	.Ltmp1928 # Offset: 1077
    0000043b: 	movzbl	(%rbp), %eax
    0000043f: 	movb	%al, 0x10(%rbx)
.Ltmp1932:
    00000442: 	movq	%r12, 0x8(%rbx)
    00000446: 	movb	$0x0, (%rdi,%r12)
    0000044b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000452: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000459: 	addq	$0x20, %rax
    0000045d: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000464: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000046b: 	je	.Ltmp1929 # Offset: 1131
.Ltmp1933:
    00000471: 	movq	-0x20(%rax), %rbp
    00000475: 	callq	clock@PLT # Offset: 1141
    0000047a: 	movq	%rax, end_time(%rip)
    00000481: 	movq	0x38(%rsp), %rdx
    00000486: 	subq	%fs:0x28, %rdx
    0000048f: 	jne	.Ltmp1930 # Offset: 1167
    00000495: 	subq	start_time(%rip), %rax
    0000049c: 	pxor	%xmm0, %xmm0
    000004a0: 	movq	%rbp, %rdi
    000004a3: 	cvtsi2sd	%rax, %xmm0
    000004a8: 	divsd	DATAat0x4d640(%rip), %xmm0
    000004b0: 	addq	$0x48, %rsp
    000004b4: 	popq	%rbx
    000004b5: 	popq	%rbp
    000004b6: 	popq	%r12
    000004b8: 	popq	%r13
    000004ba: 	popq	%r14
    000004bc: 	popq	%r15
    000004be: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1214
    000004c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1922:
    000004c8: 	movq	0x20(%rsp), %rax
    000004cd: 	leaq	DATAat0x4d004(%rip), %rsi
    000004d4: 	movl	$0x1, %edi
    000004d9: 	movaps	%xmm3, 0x10(%rsp)
    000004de: 	addl	$0x1, %r14d
    000004e2: 	movq	(%rax), %rdx
    000004e5: 	xorl	%eax, %eax
    000004e7: 	callq	__printf_chk@PLT # Offset: 1255
    000004ec: 	movl	iterations(%rip), %eax
    000004f2: 	movl	%eax, (%rsp)
    000004f5: 	cmpl	%r14d, %eax
    000004f8: 	jle	.Ltmp1917 # Offset: 1272
    000004fe: 	movzbl	(%rbx), %r9d
    00000502: 	movzbl	0x1(%rbx), %r8d
    00000507: 	movdqa	0x10(%rsp), %xmm3
    0000050d: 	jmp	.Ltmp1923 # Offset: 1293
.Ltmp1919:
    00000512: 	xorl	%edx, %edx
    00000514: 	movl	$0x1, %ecx
    00000519: 	jmp	.Ltmp1931 # Offset: 1305
.Ltmp1927:
    0000051e: 	movq	%rbx, %rdi
    00000521: 	leaq	0x30(%rsp), %rsi
    00000526: 	xorl	%edx, %edx
    00000528: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1320
    0000052d: 	movq	%rax, (%rbx)
    00000530: 	movq	%rax, %rdi
    00000533: 	movq	0x30(%rsp), %rax
    00000538: 	movq	%rax, 0x10(%rbx)
.Ltmp1934:
    0000053c: 	movq	%r12, %rdx
    0000053f: 	movq	%rbp, %rsi
    00000542: 	callq	memcpy@PLT # Offset: 1346
    00000547: 	movq	0x30(%rsp), %r12
    0000054c: 	movq	(%rbx), %rdi
    0000054f: 	jmp	.Ltmp1932 # Offset: 1359
.Ltmp1924:
    00000554: 	movq	0x20(%rsp), %rsi
    00000559: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000560: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1376
    00000565: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000056c: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000573: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000057a: 	jne	.Ltmp1933 # Offset: 1402
.Ltmp1929:
    00000580: 	movq	-0x8(%rdx), %rax
    00000584: 	addq	$0x200, %rax
    0000058a: 	jmp	.Ltmp1933 # Offset: 1418
.Ltmp1928:
    0000058f: 	testq	%r12, %r12
    00000592: 	je	.Ltmp1932 # Offset: 1426
    00000598: 	jmp	.Ltmp1934 # Offset: 1432
.Ltmp1930:
    0000059a: 	callq	__stack_chk_fail@PLT # Offset: 1434
.Ltmp1926:
    0000059f: 	leaq	DATAat0x4d018(%rip), %rdi
    000005a6: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1446
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSENIh14custom_cse_addIhELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSENIa14custom_cse_mulIaELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 154
  State       : disassembled
  Address     : 0x1e580
  Size        : 0x3e7
  MaxSize     : 0x3f0
  Offset      : 0x1e580
  Section     : .text
  Orc Section : .local.text._Z9test_CSENIa14custom_cse_mulIaELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0153:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movl	%esi, %r12d
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdi, %rbx
    00000016: 	subq	$0x48, %rsp
    0000001a: 	movq	%rcx, 0x28(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x38(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r11d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r11d, %r11d
    00000045: 	jle	.Ltmp1935 # Offset: 69
    0000004b: 	leal	-0x1(%r12), %esi
    00000050: 	leal	-0x2(%r12), %eax
    00000055: 	movd	%ebp, %xmm4
    00000059: 	xorl	%r14d, %r14d
    0000005c: 	movl	%eax, 0x8(%rsp)
    00000060: 	movl	%esi, %eax
    00000062: 	movzbl	(%rbx), %r10d
    00000066: 	punpcklbw	%xmm4, %xmm4
    0000006a: 	shrl	$0x4, %eax
    0000006d: 	movl	%esi, 0x20(%rsp)
    00000071: 	andl	$-0x10, %esi
    00000074: 	movzbl	0x1(%rbx), %r9d
    00000079: 	subl	$0x1, %eax
    0000007c: 	movl	%esi, 0xc(%rsp)
    00000080: 	movdqa	DATAat0x4d5f0(%rip), %xmm2
    00000088: 	shlq	$0x4, %rax
    0000008c: 	leaq	0x10(%rbx,%rax), %r13
    00000091: 	leal	0x1(%rsi), %eax
    00000094: 	movl	%eax, 0x24(%rsp)
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1941:
    000000a0: 	movl	%r9d, %eax
    000000a3: 	movsbl	%r9b, %edx
    000000a7: 	imull	%r10d, %eax
    000000ab: 	addl	%ebp, %eax
    000000ad: 	movsbl	%al, %eax
    000000b0: 	leal	(%rdx,%rax,2), %edx
    000000b3: 	leal	(%r10,%rax,2), %eax
    000000b7: 	shll	$0x3, %eax
    000000ba: 	subl	%edx, %eax
    000000bc: 	subl	%edx, %eax
    000000be: 	subl	%edx, %eax
    000000c0: 	subl	%edx, %eax
    000000c2: 	subl	%edx, %eax
    000000c4: 	subl	%edx, %eax
    000000c6: 	addl	%edx, %edx
    000000c8: 	subl	%edx, %eax
    000000ca: 	movl	%eax, %edx
    000000cc: 	cmpl	$0x1, %r12d
    000000d0: 	jle	.Ltmp1936 # Offset: 208
    000000d6: 	cmpl	$0xe, 0x8(%rsp)
    000000db: 	jbe	.Ltmp1937 # Offset: 219
    000000e1: 	movdqa	%xmm4, %xmm3
    000000e5: 	movq	%rbx, %rdx
    000000e8: 	pxor	%xmm5, %xmm5
    000000ec: 	punpcklwd	%xmm4, %xmm3
    000000f0: 	pshufd	$0x0, %xmm3, %xmm3
    000000f5: 	nopl	(%rax) # Size: 3
.Ltmp1938:
    000000f8: 	movdqu	0x1(%rdx), %xmm6
    000000fd: 	movdqu	(%rdx), %xmm0
    00000101: 	addq	$0x10, %rdx
    00000105: 	movdqa	%xmm6, %xmm1
    00000109: 	movdqa	%xmm6, %xmm7
    0000010d: 	movdqa	%xmm0, %xmm9
    00000112: 	movdqa	%xmm0, %xmm8
    00000117: 	punpcklbw	%xmm6, %xmm1
    0000011b: 	punpckhbw	%xmm6, %xmm7
    0000011f: 	punpcklbw	%xmm0, %xmm9
    00000124: 	punpckhbw	%xmm0, %xmm8
    00000129: 	pmullw	%xmm9, %xmm1
    0000012e: 	pmullw	%xmm8, %xmm7
    00000133: 	pand	%xmm2, %xmm1
    00000137: 	pand	%xmm2, %xmm7
    0000013b: 	packuswb	%xmm7, %xmm1
    0000013f: 	paddb	%xmm3, %xmm1
    00000143: 	paddb	%xmm1, %xmm0
    00000147: 	paddb	%xmm1, %xmm6
    0000014b: 	paddb	%xmm1, %xmm0
    0000014f: 	paddb	%xmm1, %xmm6
    00000153: 	paddb	%xmm0, %xmm0
    00000157: 	movdqa	%xmm6, %xmm7
    0000015b: 	paddb	%xmm0, %xmm0
    0000015f: 	paddb	%xmm6, %xmm7
    00000163: 	paddb	%xmm0, %xmm0
    00000167: 	psubb	%xmm7, %xmm5
    0000016b: 	psubb	%xmm6, %xmm0
    0000016f: 	paddb	%xmm7, %xmm6
    00000173: 	psubb	%xmm7, %xmm0
    00000177: 	paddb	%xmm5, %xmm0
    0000017b: 	movdqa	%xmm0, %xmm5
    0000017f: 	psubb	%xmm6, %xmm5
    00000183: 	cmpq	%r13, %rdx
    00000186: 	jne	.Ltmp1938 # Offset: 390
    0000018c: 	movdqa	%xmm5, %xmm0
    00000190: 	movl	0x20(%rsp), %esi
    00000194: 	psrldq	$0x8, %xmm0
    00000199: 	paddb	%xmm0, %xmm5
    0000019d: 	pxor	%xmm0, %xmm0
    000001a1: 	psadbw	%xmm0, %xmm5
    000001a5: 	movd	%xmm5, %edx
    000001a9: 	addl	%eax, %edx
    000001ab: 	cmpl	%esi, 0xc(%rsp)
    000001af: 	je	.Ltmp1936 # Offset: 431
    000001b1: 	movslq	0x24(%rsp), %rsi
.Ltmp1949:
    000001b6: 	movsbl	-0x1(%rbx,%rsi), %r8d
    000001bc: 	movl	%edx, %r15d
    000001bf: 	movl	%r8d, %edi
    000001c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1939:
    000001c8: 	movl	%r8d, %edx
    000001cb: 	movsbl	(%rbx,%rsi), %r8d
    000001d0: 	movl	%edi, %eax
    000001d2: 	addq	$0x1, %rsi
    000001d6: 	imull	%r8d, %eax
    000001da: 	movl	%r8d, %edi
    000001dd: 	addl	%ebp, %eax
    000001df: 	movsbl	%al, %eax
    000001e2: 	leal	(%rdx,%rax,2), %edx
    000001e5: 	leal	(%r8,%rax,2), %ecx
    000001e9: 	leal	(%r15,%rdx,8), %edx
    000001ed: 	subl	%ecx, %edx
    000001ef: 	subl	%ecx, %edx
    000001f1: 	subl	%ecx, %edx
    000001f3: 	subl	%ecx, %edx
    000001f5: 	subl	%ecx, %edx
    000001f7: 	subl	%ecx, %edx
    000001f9: 	subl	%ecx, %edx
    000001fb: 	subl	%ecx, %edx
    000001fd: 	movl	%edx, %r15d
    00000200: 	cmpl	%esi, %r12d
    00000203: 	jg	.Ltmp1939 # Offset: 515
.Ltmp1936:
    00000205: 	testb	%dl, %dl
    00000207: 	jne	.Ltmp1940 # Offset: 519
    0000020d: 	addl	$0x1, %r14d
    00000211: 	cmpl	%r11d, %r14d
    00000214: 	jl	.Ltmp1941 # Offset: 532
.Ltmp1935:
    0000021a: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000221: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000228: 	subq	$0x20, %rax
    0000022c: 	cmpq	%rax, %rbx
    0000022f: 	je	.Ltmp1942 # Offset: 559
    00000235: 	movq	0x28(%rsp), %rax
    0000023a: 	leaq	0x10(%rbx), %rdi
    0000023e: 	movq	%rdi, (%rbx)
    00000241: 	movq	(%rax), %rbp
    00000244: 	movq	0x8(%rax), %r12
    00000248: 	movq	%rbp, %rax
    0000024b: 	addq	%r12, %rax
    0000024e: 	je	.Ltmp1943 # Offset: 590
    00000250: 	testq	%rbp, %rbp
    00000253: 	je	.Ltmp1944 # Offset: 595
.Ltmp1943:
    00000259: 	movq	%r12, 0x30(%rsp)
    0000025e: 	cmpq	$0xf, %r12
    00000262: 	ja	.Ltmp1945 # Offset: 610
    00000268: 	cmpq	$0x1, %r12
    0000026c: 	jne	.Ltmp1946 # Offset: 620
    00000272: 	movzbl	(%rbp), %eax
    00000276: 	movb	%al, 0x10(%rbx)
.Ltmp1950:
    00000279: 	movq	%r12, 0x8(%rbx)
    0000027d: 	movb	$0x0, (%rdi,%r12)
    00000282: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000289: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000290: 	addq	$0x20, %rax
    00000294: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000029b: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000002a2: 	je	.Ltmp1947 # Offset: 674
.Ltmp1951:
    000002a8: 	movq	-0x20(%rax), %rbp
    000002ac: 	callq	clock@PLT # Offset: 684
    000002b1: 	movq	%rax, end_time(%rip)
    000002b8: 	movq	0x38(%rsp), %rdx
    000002bd: 	subq	%fs:0x28, %rdx
    000002c6: 	jne	.Ltmp1948 # Offset: 710
    000002cc: 	subq	start_time(%rip), %rax
    000002d3: 	pxor	%xmm0, %xmm0
    000002d7: 	movq	%rbp, %rdi
    000002da: 	cvtsi2sd	%rax, %xmm0
    000002df: 	divsd	DATAat0x4d640(%rip), %xmm0
    000002e7: 	addq	$0x48, %rsp
    000002eb: 	popq	%rbx
    000002ec: 	popq	%rbp
    000002ed: 	popq	%r12
    000002ef: 	popq	%r13
    000002f1: 	popq	%r14
    000002f3: 	popq	%r15
    000002f5: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 757
    000002fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1940:
    00000300: 	movq	0x28(%rsp), %rax
    00000305: 	leaq	DATAat0x4d004(%rip), %rsi
    0000030c: 	movl	$0x1, %edi
    00000311: 	movaps	%xmm4, 0x10(%rsp)
    00000316: 	addl	$0x1, %r14d
    0000031a: 	movq	(%rax), %rdx
    0000031d: 	xorl	%eax, %eax
    0000031f: 	callq	__printf_chk@PLT # Offset: 799
    00000324: 	movl	iterations(%rip), %r11d
    0000032b: 	cmpl	%r14d, %r11d
    0000032e: 	jle	.Ltmp1935 # Offset: 814
    00000334: 	movzbl	(%rbx), %r10d
    00000338: 	movzbl	0x1(%rbx), %r9d
    0000033d: 	movdqa	0x10(%rsp), %xmm4
    00000343: 	movdqa	DATAat0x4d5f0(%rip), %xmm2
    0000034b: 	jmp	.Ltmp1941 # Offset: 843
.Ltmp1937:
    00000350: 	movl	$0x1, %esi
    00000355: 	jmp	.Ltmp1949 # Offset: 853
.Ltmp1945:
    0000035a: 	movq	%rbx, %rdi
    0000035d: 	leaq	0x30(%rsp), %rsi
    00000362: 	xorl	%edx, %edx
    00000364: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 868
    00000369: 	movq	%rax, (%rbx)
    0000036c: 	movq	%rax, %rdi
    0000036f: 	movq	0x30(%rsp), %rax
    00000374: 	movq	%rax, 0x10(%rbx)
.Ltmp1952:
    00000378: 	movq	%r12, %rdx
    0000037b: 	movq	%rbp, %rsi
    0000037e: 	callq	memcpy@PLT # Offset: 894
    00000383: 	movq	0x30(%rsp), %r12
    00000388: 	movq	(%rbx), %rdi
    0000038b: 	jmp	.Ltmp1950 # Offset: 907
.Ltmp1942:
    00000390: 	movq	0x28(%rsp), %rsi
    00000395: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000039c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 924
    000003a1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000003a8: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000003af: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003b6: 	jne	.Ltmp1951 # Offset: 950
.Ltmp1947:
    000003bc: 	movq	-0x8(%rdx), %rax
    000003c0: 	addq	$0x200, %rax
    000003c6: 	jmp	.Ltmp1951 # Offset: 966
.Ltmp1946:
    000003cb: 	testq	%r12, %r12
    000003ce: 	je	.Ltmp1950 # Offset: 974
    000003d4: 	jmp	.Ltmp1952 # Offset: 980
.Ltmp1948:
    000003d6: 	callq	__stack_chk_fail@PLT # Offset: 982
.Ltmp1944:
    000003db: 	leaq	DATAat0x4d018(%rip), %rdi
    000003e2: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 994
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSENIa14custom_cse_mulIaELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSENIh14custom_cse_subIhELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 155
  State       : disassembled
  Address     : 0x1e970
  Size        : 0x5ab
  MaxSize     : 0x5b0
  Offset      : 0x1e970
  Section     : .text
  Orc Section : .local.text._Z9test_CSENIh14custom_cse_subIhELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0154:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movl	%esi, %r12d
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdi, %rbx
    00000016: 	subq	$0x48, %rsp
    0000001a: 	movq	%rcx, 0x20(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x38(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	movl	iterations(%rip), %eax
    00000041: 	movl	%eax, (%rsp)
    00000044: 	testl	%eax, %eax
    00000046: 	jle	.Ltmp1953 # Offset: 70
    0000004c: 	leal	-0x1(%r12), %edi
    00000051: 	leal	-0x2(%r12), %eax
    00000056: 	movd	%ebp, %xmm2
    0000005a: 	xorl	%r14d, %r14d
    0000005d: 	movl	%eax, 0x4(%rsp)
    00000061: 	movl	%edi, %eax
    00000063: 	punpcklbw	%xmm2, %xmm2
    00000067: 	movzbl	(%rbx), %r8d
    0000006b: 	shrl	$0x4, %eax
    0000006e: 	movl	%edi, 0x8(%rsp)
    00000072: 	andl	$-0x10, %edi
    00000075: 	punpcklwd	%xmm2, %xmm2
    00000079: 	subl	$0x1, %eax
    0000007c: 	movl	%edi, %r15d
    0000007f: 	shlq	$0x4, %rax
    00000083: 	leaq	0x10(%rbx,%rax), %r13
    00000088: 	leal	0x1(%rdi), %eax
    0000008b: 	movzbl	0x1(%rbx), %edi
    0000008f: 	movl	%eax, 0xc(%rsp)
    00000093: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1959:
    00000098: 	leal	(%rbp,%rdi), %eax
    0000009c: 	movzbl	%dil, %edx
    000000a0: 	subl	%r8d, %eax
    000000a3: 	movzbl	%al, %eax
    000000a6: 	leal	(%rdx,%rax,2), %edx
    000000a9: 	leal	(%r8,%rax,2), %eax
    000000ad: 	shll	$0x3, %eax
    000000b0: 	subl	%edx, %eax
    000000b2: 	subl	%edx, %eax
    000000b4: 	subl	%edx, %eax
    000000b6: 	subl	%edx, %eax
    000000b8: 	subl	%edx, %eax
    000000ba: 	subl	%edx, %eax
    000000bc: 	addl	%edx, %edx
    000000be: 	subl	%edx, %eax
    000000c0: 	cmpl	$0x1, %r12d
    000000c4: 	jle	.Ltmp1954 # Offset: 196
    000000ca: 	cmpl	$0xe, 0x4(%rsp)
    000000cf: 	jbe	.Ltmp1955 # Offset: 207
    000000d5: 	pshufd	$0x0, %xmm2, %xmm5
    000000da: 	movq	%rbx, %rdx
    000000dd: 	pxor	%xmm3, %xmm3
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp1956:
    000000e8: 	movdqu	0x1(%rdx), %xmm4
    000000ed: 	movdqu	(%rdx), %xmm6
    000000f1: 	addq	$0x10, %rdx
    000000f5: 	movdqu	-0xf(%rdx), %xmm1
    000000fa: 	paddb	%xmm5, %xmm4
    000000fe: 	movdqa	%xmm4, %xmm0
    00000102: 	psubb	%xmm6, %xmm0
    00000106: 	paddb	%xmm0, %xmm1
    0000010a: 	paddb	%xmm0, %xmm1
    0000010e: 	paddb	%xmm4, %xmm0
    00000112: 	paddb	%xmm0, %xmm0
    00000116: 	paddb	%xmm1, %xmm1
    0000011a: 	paddb	%xmm0, %xmm0
    0000011e: 	movdqa	%xmm1, %xmm4
    00000122: 	psubb	%xmm1, %xmm3
    00000126: 	paddb	%xmm0, %xmm0
    0000012a: 	paddb	%xmm1, %xmm4
    0000012e: 	psubb	%xmm1, %xmm0
    00000132: 	psubb	%xmm4, %xmm0
    00000136: 	paddb	%xmm0, %xmm3
    0000013a: 	cmpq	%rdx, %r13
    0000013d: 	jne	.Ltmp1956 # Offset: 317
    0000013f: 	movdqa	%xmm3, %xmm0
    00000143: 	psrldq	$0x8, %xmm0
    00000148: 	paddb	%xmm0, %xmm3
    0000014c: 	pxor	%xmm0, %xmm0
    00000150: 	psadbw	%xmm0, %xmm3
    00000154: 	movd	%xmm3, %edx
    00000158: 	addl	%edx, %eax
    0000015a: 	cmpl	0x8(%rsp), %r15d
    0000015f: 	je	.Ltmp1954 # Offset: 351
    00000165: 	movl	0xc(%rsp), %ecx
    00000169: 	movl	%r15d, %r9d
.Ltmp1967:
    0000016c: 	movl	%r12d, %edx
    0000016f: 	subl	%r9d, %edx
    00000172: 	leal	-0x1(%rdx), %esi
    00000175: 	subl	$0x2, %edx
    00000178: 	cmpl	$0x6, %edx
    0000017b: 	jbe	.Ltmp1957 # Offset: 379
    00000181: 	movl	%ebp, %edx
    00000183: 	movzbl	%bpl, %r10d
    00000187: 	movq	0x1(%rbx,%r9), %xmm1
    0000018e: 	movq	(%rbx,%r9), %xmm4
    00000194: 	shll	$0x8, %edx
    00000197: 	orl	%r10d, %edx
    0000019a: 	movd	%edx, %xmm5
    0000019e: 	pshuflw	$0x0, %xmm5, %xmm0
    000001a3: 	paddb	%xmm1, %xmm0
    000001a7: 	movdqa	%xmm0, %xmm3
    000001ab: 	psubb	%xmm4, %xmm3
    000001af: 	paddb	%xmm3, %xmm0
    000001b3: 	paddb	%xmm3, %xmm1
    000001b7: 	paddb	%xmm0, %xmm0
    000001bb: 	paddb	%xmm3, %xmm1
    000001bf: 	paddb	%xmm0, %xmm0
    000001c3: 	movdqa	%xmm1, %xmm3
    000001c7: 	paddb	%xmm1, %xmm3
    000001cb: 	paddb	%xmm0, %xmm0
    000001cf: 	paddb	%xmm3, %xmm1
    000001d3: 	psubb	%xmm3, %xmm0
    000001d7: 	movdqa	%xmm0, %xmm3
    000001db: 	pxor	%xmm0, %xmm0
    000001df: 	psubb	%xmm1, %xmm3
    000001e3: 	psubb	%xmm1, %xmm3
    000001e7: 	movdqa	%xmm3, %xmm7
    000001eb: 	psadbw	%xmm0, %xmm7
    000001ef: 	movq	%xmm7, %rdx
    000001f4: 	movq	%xmm7, 0x28(%rsp)
    000001fa: 	movl	%edx, %r9d
    000001fd: 	movl	%esi, %edx
    000001ff: 	andl	$-0x8, %edx
    00000202: 	addl	%r9d, %eax
    00000205: 	addl	%edx, %ecx
    00000207: 	cmpl	%esi, %edx
    00000209: 	je	.Ltmp1954 # Offset: 521
.Ltmp1957:
    0000020f: 	movslq	%ecx, %rdx
    00000212: 	addq	%rbx, %rdx
    00000215: 	movzbl	(%rdx), %r9d
    00000219: 	movzbl	-0x1(%rdx), %r11d
    0000021e: 	leal	(%rbp,%r9), %edx
    00000223: 	subl	%r11d, %edx
    00000226: 	movzbl	%dl, %edx
    00000229: 	leal	(%r9,%rdx,2), %esi
    0000022d: 	leal	(%r11,%rdx,2), %edx
    00000231: 	leal	(%rax,%rdx,8), %eax
    00000234: 	leal	0x1(%rcx), %edx
    00000237: 	subl	%esi, %eax
    00000239: 	subl	%esi, %eax
    0000023b: 	subl	%esi, %eax
    0000023d: 	subl	%esi, %eax
    0000023f: 	subl	%esi, %eax
    00000241: 	subl	%esi, %eax
    00000243: 	addl	%esi, %esi
    00000245: 	subl	%esi, %eax
    00000247: 	cmpl	%edx, %r12d
    0000024a: 	jle	.Ltmp1954 # Offset: 586
    00000250: 	movslq	%edx, %rdx
    00000253: 	movzbl	(%rbx,%rdx), %r11d
    00000258: 	movl	%r11d, %esi
    0000025b: 	movzbl	%r11b, %r10d
    0000025f: 	subl	%r9d, %esi
    00000262: 	addl	%ebp, %esi
    00000264: 	movzbl	%sil, %esi
    00000268: 	leal	(%r10,%rsi,2), %edx
    0000026c: 	leal	(%r9,%rsi,2), %esi
    00000270: 	shll	$0x3, %esi
    00000273: 	subl	%edx, %esi
    00000275: 	subl	%edx, %esi
    00000277: 	subl	%edx, %esi
    00000279: 	subl	%edx, %esi
    0000027b: 	subl	%edx, %esi
    0000027d: 	subl	%edx, %esi
    0000027f: 	addl	%edx, %edx
    00000281: 	subl	%edx, %esi
    00000283: 	leal	0x2(%rcx), %edx
    00000286: 	addl	%esi, %eax
    00000288: 	cmpl	%edx, %r12d
    0000028b: 	jle	.Ltmp1954 # Offset: 651
    00000291: 	movslq	%edx, %rdx
    00000294: 	movzbl	(%rbx,%rdx), %r9d
    00000299: 	movl	%r9d, %edx
    0000029c: 	subl	%r11d, %edx
    0000029f: 	leal	(%rdx,%rbp), %r11d
    000002a3: 	movzbl	%r11b, %r11d
    000002a7: 	leal	(%r10,%r11,2), %r10d
    000002ab: 	leal	(%r9,%r11,2), %edx
    000002af: 	shll	$0x3, %r10d
    000002b3: 	subl	%edx, %r10d
    000002b6: 	subl	%edx, %r10d
    000002b9: 	subl	%edx, %r10d
    000002bc: 	subl	%edx, %r10d
    000002bf: 	subl	%edx, %r10d
    000002c2: 	subl	%edx, %r10d
    000002c5: 	addl	%edx, %edx
    000002c7: 	subl	%edx, %r10d
    000002ca: 	leal	0x3(%rcx), %edx
    000002cd: 	addl	%r10d, %eax
    000002d0: 	cmpl	%edx, %r12d
    000002d3: 	jle	.Ltmp1954 # Offset: 723
    000002d9: 	movslq	%edx, %rdx
    000002dc: 	movzbl	(%rbx,%rdx), %r10d
    000002e1: 	movl	%r10d, %r11d
    000002e4: 	movzbl	%r10b, %esi
    000002e8: 	subl	%r9d, %r11d
    000002eb: 	addl	%ebp, %r11d
    000002ee: 	movzbl	%r11b, %r11d
    000002f2: 	leal	(%r9,%r11,2), %r9d
    000002f6: 	leal	(%rsi,%r11,2), %edx
    000002fa: 	shll	$0x3, %r9d
    000002fe: 	subl	%edx, %r9d
    00000301: 	subl	%edx, %r9d
    00000304: 	subl	%edx, %r9d
    00000307: 	subl	%edx, %r9d
    0000030a: 	subl	%edx, %r9d
    0000030d: 	subl	%edx, %r9d
    00000310: 	addl	%edx, %edx
    00000312: 	subl	%edx, %r9d
    00000315: 	leal	0x4(%rcx), %edx
    00000318: 	addl	%r9d, %eax
    0000031b: 	cmpl	%edx, %r12d
    0000031e: 	jle	.Ltmp1954 # Offset: 798
    00000324: 	movslq	%edx, %rdx
    00000327: 	movzbl	(%rbx,%rdx), %r9d
    0000032c: 	movl	%r9d, %r11d
    0000032f: 	subl	%r10d, %r11d
    00000332: 	movzbl	%r9b, %r10d
    00000336: 	addl	%ebp, %r11d
    00000339: 	movzbl	%r11b, %r11d
    0000033d: 	leal	(%rsi,%r11,2), %esi
    00000341: 	leal	(%r10,%r11,2), %edx
    00000345: 	shll	$0x3, %esi
    00000348: 	subl	%edx, %esi
    0000034a: 	subl	%edx, %esi
    0000034c: 	subl	%edx, %esi
    0000034e: 	subl	%edx, %esi
    00000350: 	subl	%edx, %esi
    00000352: 	subl	%edx, %esi
    00000354: 	addl	%edx, %edx
    00000356: 	subl	%edx, %esi
    00000358: 	leal	0x5(%rcx), %edx
    0000035b: 	addl	%esi, %eax
    0000035d: 	cmpl	%edx, %r12d
    00000360: 	jle	.Ltmp1954 # Offset: 864
    00000362: 	movslq	%edx, %rdx
    00000365: 	addl	$0x6, %ecx
    00000368: 	movzbl	(%rbx,%rdx), %r11d
    0000036d: 	movl	%r11d, %esi
    00000370: 	subl	%r9d, %esi
    00000373: 	movzbl	%r11b, %r9d
    00000377: 	addl	%ebp, %esi
    00000379: 	movzbl	%sil, %esi
    0000037d: 	leal	(%r9,%rsi,2), %edx
    00000381: 	leal	(%r10,%rsi,2), %esi
    00000385: 	shll	$0x3, %esi
    00000388: 	subl	%edx, %esi
    0000038a: 	subl	%edx, %esi
    0000038c: 	subl	%edx, %esi
    0000038e: 	subl	%edx, %esi
    00000390: 	subl	%edx, %esi
    00000392: 	subl	%edx, %esi
    00000394: 	addl	%edx, %edx
    00000396: 	subl	%edx, %esi
    00000398: 	addl	%esi, %eax
    0000039a: 	cmpl	%ecx, %r12d
    0000039d: 	jle	.Ltmp1954 # Offset: 925
    0000039f: 	movslq	%ecx, %rcx
    000003a2: 	movzbl	(%rbx,%rcx), %ecx
    000003a6: 	movl	%ecx, %edx
    000003a8: 	subl	%r11d, %edx
    000003ab: 	addl	%ebp, %edx
    000003ad: 	movzbl	%dl, %edx
    000003b0: 	leal	(%rcx,%rdx,2), %ecx
    000003b3: 	leal	(%r9,%rdx,2), %edx
    000003b7: 	shll	$0x3, %edx
    000003ba: 	subl	%ecx, %edx
    000003bc: 	subl	%ecx, %edx
    000003be: 	subl	%ecx, %edx
    000003c0: 	subl	%ecx, %edx
    000003c2: 	subl	%ecx, %edx
    000003c4: 	subl	%ecx, %edx
    000003c6: 	addl	%ecx, %ecx
    000003c8: 	subl	%ecx, %edx
    000003ca: 	addl	%edx, %eax
.Ltmp1954:
    000003cc: 	testb	%al, %al
    000003ce: 	jne	.Ltmp1958 # Offset: 974
    000003d4: 	addl	$0x1, %r14d
    000003d8: 	cmpl	(%rsp), %r14d
    000003dc: 	jl	.Ltmp1959 # Offset: 988
.Ltmp1953:
    000003e2: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000003e9: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000003f0: 	subq	$0x20, %rax
    000003f4: 	cmpq	%rax, %rbx
    000003f7: 	je	.Ltmp1960 # Offset: 1015
    000003fd: 	movq	0x20(%rsp), %rax
    00000402: 	leaq	0x10(%rbx), %rdi
    00000406: 	movq	%rdi, (%rbx)
    00000409: 	movq	(%rax), %rbp
    0000040c: 	movq	0x8(%rax), %r12
    00000410: 	movq	%rbp, %rax
    00000413: 	addq	%r12, %rax
    00000416: 	je	.Ltmp1961 # Offset: 1046
    00000418: 	testq	%rbp, %rbp
    0000041b: 	je	.Ltmp1962 # Offset: 1051
.Ltmp1961:
    00000421: 	movq	%r12, 0x30(%rsp)
    00000426: 	cmpq	$0xf, %r12
    0000042a: 	ja	.Ltmp1963 # Offset: 1066
    00000430: 	cmpq	$0x1, %r12
    00000434: 	jne	.Ltmp1964 # Offset: 1076
    0000043a: 	movzbl	(%rbp), %eax
    0000043e: 	movb	%al, 0x10(%rbx)
.Ltmp1968:
    00000441: 	movq	%r12, 0x8(%rbx)
    00000445: 	movb	$0x0, (%rdi,%r12)
    0000044a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000451: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000458: 	addq	$0x20, %rax
    0000045c: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000463: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000046a: 	je	.Ltmp1965 # Offset: 1130
.Ltmp1969:
    00000470: 	movq	-0x20(%rax), %rbp
    00000474: 	callq	clock@PLT # Offset: 1140
    00000479: 	movq	%rax, end_time(%rip)
    00000480: 	movq	0x38(%rsp), %rdx
    00000485: 	subq	%fs:0x28, %rdx
    0000048e: 	jne	.Ltmp1966 # Offset: 1166
    00000494: 	subq	start_time(%rip), %rax
    0000049b: 	pxor	%xmm0, %xmm0
    0000049f: 	movq	%rbp, %rdi
    000004a2: 	cvtsi2sd	%rax, %xmm0
    000004a7: 	divsd	DATAat0x4d640(%rip), %xmm0
    000004af: 	addq	$0x48, %rsp
    000004b3: 	popq	%rbx
    000004b4: 	popq	%rbp
    000004b5: 	popq	%r12
    000004b7: 	popq	%r13
    000004b9: 	popq	%r14
    000004bb: 	popq	%r15
    000004bd: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1213
    000004c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1958:
    000004c8: 	movq	0x20(%rsp), %rax
    000004cd: 	leaq	DATAat0x4d004(%rip), %rsi
    000004d4: 	movl	$0x1, %edi
    000004d9: 	movaps	%xmm2, 0x10(%rsp)
    000004de: 	addl	$0x1, %r14d
    000004e2: 	movq	(%rax), %rdx
    000004e5: 	xorl	%eax, %eax
    000004e7: 	callq	__printf_chk@PLT # Offset: 1255
    000004ec: 	movl	iterations(%rip), %eax
    000004f2: 	movl	%eax, (%rsp)
    000004f5: 	cmpl	%eax, %r14d
    000004f8: 	jge	.Ltmp1953 # Offset: 1272
    000004fe: 	movzbl	(%rbx), %r8d
    00000502: 	movzbl	0x1(%rbx), %edi
    00000506: 	movdqa	0x10(%rsp), %xmm2
    0000050c: 	jmp	.Ltmp1959 # Offset: 1292
.Ltmp1955:
    00000511: 	xorl	%r9d, %r9d
    00000514: 	movl	$0x1, %ecx
    00000519: 	jmp	.Ltmp1967 # Offset: 1305
.Ltmp1963:
    0000051e: 	movq	%rbx, %rdi
    00000521: 	leaq	0x30(%rsp), %rsi
    00000526: 	xorl	%edx, %edx
    00000528: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1320
    0000052d: 	movq	%rax, (%rbx)
    00000530: 	movq	%rax, %rdi
    00000533: 	movq	0x30(%rsp), %rax
    00000538: 	movq	%rax, 0x10(%rbx)
.Ltmp1970:
    0000053c: 	movq	%r12, %rdx
    0000053f: 	movq	%rbp, %rsi
    00000542: 	callq	memcpy@PLT # Offset: 1346
    00000547: 	movq	0x30(%rsp), %r12
    0000054c: 	movq	(%rbx), %rdi
    0000054f: 	jmp	.Ltmp1968 # Offset: 1359
.Ltmp1960:
    00000554: 	movq	0x20(%rsp), %rsi
    00000559: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000560: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1376
    00000565: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000056c: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000573: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000057a: 	jne	.Ltmp1969 # Offset: 1402
.Ltmp1965:
    00000580: 	movq	-0x8(%rdx), %rax
    00000584: 	addq	$0x200, %rax
    0000058a: 	jmp	.Ltmp1969 # Offset: 1418
.Ltmp1964:
    0000058f: 	testq	%r12, %r12
    00000592: 	je	.Ltmp1968 # Offset: 1426
    00000598: 	jmp	.Ltmp1970 # Offset: 1432
.Ltmp1966:
    0000059a: 	callq	__stack_chk_fail@PLT # Offset: 1434
.Ltmp1962:
    0000059f: 	leaq	DATAat0x4d018(%rip), %rdi
    000005a6: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1446
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSENIh14custom_cse_subIhELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSENIh14custom_cse_mulIhELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 156
  State       : disassembled
  Address     : 0x1ef20
  Size        : 0x3d7
  MaxSize     : 0x3e0
  Offset      : 0x1ef20
  Section     : .text
  Orc Section : .local.text._Z9test_CSENIh14custom_cse_mulIhELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0155:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movl	%edx, %r12d
    0000000f: 	pushq	%rbp
    00000010: 	movl	%esi, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdi, %rbx
    00000016: 	subq	$0x48, %rsp
    0000001a: 	movq	%rcx, 0x28(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x38(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r11d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r11d, %r11d
    00000045: 	jle	.Ltmp1971 # Offset: 69
    0000004b: 	leal	-0x1(%rbp), %edi
    0000004e: 	leal	-0x2(%rbp), %eax
    00000051: 	movd	%r12d, %xmm5
    00000056: 	movzbl	(%rbx), %r10d
    0000005a: 	movl	%eax, 0x8(%rsp)
    0000005e: 	movl	%edi, %eax
    00000060: 	movzbl	0x1(%rbx), %r9d
    00000065: 	xorl	%r14d, %r14d
    00000068: 	shrl	$0x4, %eax
    0000006b: 	movl	%edi, 0x20(%rsp)
    0000006f: 	andl	$-0x10, %edi
    00000072: 	punpcklbw	%xmm5, %xmm5
    00000076: 	subl	$0x1, %eax
    00000079: 	movl	%edi, 0xc(%rsp)
    0000007d: 	movdqa	DATAat0x4d5f0(%rip), %xmm3
    00000085: 	shlq	$0x4, %rax
    00000089: 	leaq	0x10(%rbx,%rax), %r13
    0000008e: 	leal	0x1(%rdi), %eax
    00000091: 	movl	%eax, 0x24(%rsp)
    00000095: 	nopl	(%rax) # Size: 3
.Ltmp1977:
    00000098: 	movl	%r10d, %eax
    0000009b: 	movzbl	%r9b, %edx
    0000009f: 	imull	%r9d, %eax
    000000a3: 	addl	%r12d, %eax
    000000a6: 	movzbl	%al, %eax
    000000a9: 	leal	(%rdx,%rax,2), %ecx
    000000ac: 	leal	(%r10,%rax,2), %edx
    000000b0: 	shll	$0x3, %edx
    000000b3: 	subl	%ecx, %edx
    000000b5: 	subl	%ecx, %edx
    000000b7: 	subl	%ecx, %edx
    000000b9: 	subl	%ecx, %edx
    000000bb: 	subl	%ecx, %edx
    000000bd: 	subl	%ecx, %edx
    000000bf: 	addl	%ecx, %ecx
    000000c1: 	subl	%ecx, %edx
    000000c3: 	cmpl	$0x1, %ebp
    000000c6: 	jle	.Ltmp1972 # Offset: 198
    000000cc: 	cmpl	$0xe, 0x8(%rsp)
    000000d1: 	jbe	.Ltmp1973 # Offset: 209
    000000d7: 	movdqa	%xmm5, %xmm4
    000000db: 	movq	%rbx, %rax
    000000de: 	pxor	%xmm2, %xmm2
    000000e2: 	punpcklwd	%xmm5, %xmm4
    000000e6: 	pshufd	$0x0, %xmm4, %xmm4
    000000eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1974:
    000000f0: 	movdqu	(%rax), %xmm0
    000000f4: 	movdqu	0x1(%rax), %xmm1
    000000f9: 	addq	$0x10, %rax
    000000fd: 	movdqa	%xmm0, %xmm7
    00000101: 	movdqa	%xmm0, %xmm6
    00000105: 	movdqa	%xmm1, %xmm9
    0000010a: 	movdqa	%xmm1, %xmm8
    0000010f: 	punpcklbw	%xmm0, %xmm7
    00000113: 	punpckhbw	%xmm0, %xmm6
    00000117: 	punpcklbw	%xmm1, %xmm9
    0000011c: 	punpckhbw	%xmm1, %xmm8
    00000121: 	pmullw	%xmm9, %xmm7
    00000126: 	pmullw	%xmm8, %xmm6
    0000012b: 	pand	%xmm3, %xmm7
    0000012f: 	pand	%xmm3, %xmm6
    00000133: 	packuswb	%xmm6, %xmm7
    00000137: 	paddb	%xmm4, %xmm7
    0000013b: 	paddb	%xmm7, %xmm0
    0000013f: 	paddb	%xmm7, %xmm1
    00000143: 	paddb	%xmm7, %xmm0
    00000147: 	paddb	%xmm7, %xmm1
    0000014b: 	paddb	%xmm0, %xmm0
    0000014f: 	movdqa	%xmm1, %xmm6
    00000153: 	paddb	%xmm0, %xmm0
    00000157: 	paddb	%xmm1, %xmm6
    0000015b: 	paddb	%xmm0, %xmm0
    0000015f: 	psubb	%xmm6, %xmm2
    00000163: 	psubb	%xmm1, %xmm0
    00000167: 	paddb	%xmm6, %xmm1
    0000016b: 	psubb	%xmm6, %xmm0
    0000016f: 	psubb	%xmm1, %xmm0
    00000173: 	paddb	%xmm0, %xmm2
    00000177: 	cmpq	%r13, %rax
    0000017a: 	jne	.Ltmp1974 # Offset: 378
    00000180: 	movdqa	%xmm2, %xmm0
    00000184: 	movl	0x20(%rsp), %edi
    00000188: 	psrldq	$0x8, %xmm0
    0000018d: 	paddb	%xmm0, %xmm2
    00000191: 	pxor	%xmm0, %xmm0
    00000195: 	psadbw	%xmm0, %xmm2
    00000199: 	movd	%xmm2, %eax
    0000019d: 	addl	%eax, %edx
    0000019f: 	cmpl	%edi, 0xc(%rsp)
    000001a3: 	je	.Ltmp1972 # Offset: 419
    000001a5: 	movslq	0x24(%rsp), %rcx
.Ltmp1985:
    000001aa: 	movzbl	-0x1(%rbx,%rcx), %edi
    000001af: 	movl	%edi, %esi
    000001b1: 	nopl	(%rax) # Size: 7
.Ltmp1975:
    000001b8: 	movl	%edi, %r15d
    000001bb: 	movzbl	(%rbx,%rcx), %edi
    000001bf: 	movl	%esi, %eax
    000001c1: 	addq	$0x1, %rcx
    000001c5: 	imull	%edi, %eax
    000001c8: 	movl	%edi, %esi
    000001ca: 	addl	%r12d, %eax
    000001cd: 	movzbl	%al, %eax
    000001d0: 	leal	(%rdi,%rax,2), %r8d
    000001d4: 	leal	(%r15,%rax,2), %eax
    000001d8: 	shll	$0x3, %eax
    000001db: 	subl	%r8d, %eax
    000001de: 	subl	%r8d, %eax
    000001e1: 	subl	%r8d, %eax
    000001e4: 	subl	%r8d, %eax
    000001e7: 	subl	%r8d, %eax
    000001ea: 	subl	%r8d, %eax
    000001ed: 	addl	%r8d, %r8d
    000001f0: 	subl	%r8d, %eax
    000001f3: 	addl	%eax, %edx
    000001f5: 	cmpl	%ecx, %ebp
    000001f7: 	jg	.Ltmp1975 # Offset: 503
.Ltmp1972:
    000001f9: 	testb	%dl, %dl
    000001fb: 	jne	.Ltmp1976 # Offset: 507
    00000201: 	addl	$0x1, %r14d
    00000205: 	cmpl	%r11d, %r14d
    00000208: 	jl	.Ltmp1977 # Offset: 520
.Ltmp1971:
    0000020e: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000215: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000021c: 	subq	$0x20, %rax
    00000220: 	cmpq	%rax, %rbx
    00000223: 	je	.Ltmp1978 # Offset: 547
    00000229: 	movq	0x28(%rsp), %rax
    0000022e: 	leaq	0x10(%rbx), %rdi
    00000232: 	movq	%rdi, (%rbx)
    00000235: 	movq	(%rax), %rbp
    00000238: 	movq	0x8(%rax), %r12
    0000023c: 	movq	%rbp, %rax
    0000023f: 	addq	%r12, %rax
    00000242: 	je	.Ltmp1979 # Offset: 578
    00000244: 	testq	%rbp, %rbp
    00000247: 	je	.Ltmp1980 # Offset: 583
.Ltmp1979:
    0000024d: 	movq	%r12, 0x30(%rsp)
    00000252: 	cmpq	$0xf, %r12
    00000256: 	ja	.Ltmp1981 # Offset: 598
    0000025c: 	cmpq	$0x1, %r12
    00000260: 	jne	.Ltmp1982 # Offset: 608
    00000266: 	movzbl	(%rbp), %eax
    0000026a: 	movb	%al, 0x10(%rbx)
.Ltmp1986:
    0000026d: 	movq	%r12, 0x8(%rbx)
    00000271: 	movb	$0x0, (%rdi,%r12)
    00000276: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000027d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000284: 	addq	$0x20, %rax
    00000288: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000028f: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000296: 	je	.Ltmp1983 # Offset: 662
.Ltmp1987:
    0000029c: 	movq	-0x20(%rax), %rbp
    000002a0: 	callq	clock@PLT # Offset: 672
    000002a5: 	movq	%rax, end_time(%rip)
    000002ac: 	movq	0x38(%rsp), %rdx
    000002b1: 	subq	%fs:0x28, %rdx
    000002ba: 	jne	.Ltmp1984 # Offset: 698
    000002c0: 	subq	start_time(%rip), %rax
    000002c7: 	pxor	%xmm0, %xmm0
    000002cb: 	movq	%rbp, %rdi
    000002ce: 	cvtsi2sd	%rax, %xmm0
    000002d3: 	divsd	DATAat0x4d640(%rip), %xmm0
    000002db: 	addq	$0x48, %rsp
    000002df: 	popq	%rbx
    000002e0: 	popq	%rbp
    000002e1: 	popq	%r12
    000002e3: 	popq	%r13
    000002e5: 	popq	%r14
    000002e7: 	popq	%r15
    000002e9: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 745
    000002ee: 	nop # Size: 2
.Ltmp1976:
    000002f0: 	movq	0x28(%rsp), %rax
    000002f5: 	leaq	DATAat0x4d004(%rip), %rsi
    000002fc: 	movl	$0x1, %edi
    00000301: 	movaps	%xmm5, 0x10(%rsp)
    00000306: 	addl	$0x1, %r14d
    0000030a: 	movq	(%rax), %rdx
    0000030d: 	xorl	%eax, %eax
    0000030f: 	callq	__printf_chk@PLT # Offset: 783
    00000314: 	movl	iterations(%rip), %r11d
    0000031b: 	cmpl	%r11d, %r14d
    0000031e: 	jge	.Ltmp1971 # Offset: 798
    00000324: 	movzbl	(%rbx), %r10d
    00000328: 	movzbl	0x1(%rbx), %r9d
    0000032d: 	movdqa	0x10(%rsp), %xmm5
    00000333: 	movdqa	DATAat0x4d5f0(%rip), %xmm3
    0000033b: 	jmp	.Ltmp1977 # Offset: 827
.Ltmp1973:
    00000340: 	movl	$0x1, %ecx
    00000345: 	jmp	.Ltmp1985 # Offset: 837
.Ltmp1981:
    0000034a: 	movq	%rbx, %rdi
    0000034d: 	leaq	0x30(%rsp), %rsi
    00000352: 	xorl	%edx, %edx
    00000354: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 852
    00000359: 	movq	%rax, (%rbx)
    0000035c: 	movq	%rax, %rdi
    0000035f: 	movq	0x30(%rsp), %rax
    00000364: 	movq	%rax, 0x10(%rbx)
.Ltmp1988:
    00000368: 	movq	%r12, %rdx
    0000036b: 	movq	%rbp, %rsi
    0000036e: 	callq	memcpy@PLT # Offset: 878
    00000373: 	movq	0x30(%rsp), %r12
    00000378: 	movq	(%rbx), %rdi
    0000037b: 	jmp	.Ltmp1986 # Offset: 891
.Ltmp1978:
    00000380: 	movq	0x28(%rsp), %rsi
    00000385: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000038c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 908
    00000391: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000398: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000039f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003a6: 	jne	.Ltmp1987 # Offset: 934
.Ltmp1983:
    000003ac: 	movq	-0x8(%rdx), %rax
    000003b0: 	addq	$0x200, %rax
    000003b6: 	jmp	.Ltmp1987 # Offset: 950
.Ltmp1982:
    000003bb: 	testq	%r12, %r12
    000003be: 	je	.Ltmp1986 # Offset: 958
    000003c4: 	jmp	.Ltmp1988 # Offset: 964
.Ltmp1984:
    000003c6: 	callq	__stack_chk_fail@PLT # Offset: 966
.Ltmp1980:
    000003cb: 	leaq	DATAat0x4d018(%rip), %rdi
    000003d2: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 978
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSENIh14custom_cse_mulIhELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSENIh14custom_cse_divIhELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 157
  State       : disassembled
  Address     : 0x1f300
  Size        : 0x2ac
  MaxSize     : 0x2b0
  Offset      : 0x1f300
  Section     : .text
  Orc Section : .local.text._Z9test_CSENIh14custom_cse_divIhELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0156:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%esi, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movl	%edx, %ebx
    00000016: 	subq	$0x28, %rsp
    0000001a: 	movq	%rcx, 0x8(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x18(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r11d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r11d, %r11d
    00000045: 	jle	.Ltmp1989 # Offset: 69
    0000004b: 	leal	-0x2(%r13), %eax
    0000004f: 	movzbl	(%r12), %r9d
    00000054: 	movzbl	0x1(%r12), %r10d
    0000005a: 	xorl	%r14d, %r14d
    0000005d: 	leaq	0x2(%r12,%rax), %rbp
    00000062: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1993:
    00000068: 	movzbl	%r10b, %eax
    0000006c: 	movzbl	%r10b, %edx
    00000070: 	movzbl	%r9b, %edi
    00000074: 	movl	%r9d, %ecx
    00000077: 	divb	%r9b
    0000007a: 	addl	%ebx, %eax
    0000007c: 	movzbl	%al, %eax
    0000007f: 	leal	(%rdx,%rax,2), %esi
    00000082: 	leal	(%rdi,%rax,2), %edx
    00000085: 	shll	$0x3, %edx
    00000088: 	subl	%esi, %edx
    0000008a: 	subl	%esi, %edx
    0000008c: 	subl	%esi, %edx
    0000008e: 	subl	%esi, %edx
    00000090: 	subl	%esi, %edx
    00000092: 	subl	%esi, %edx
    00000094: 	addl	%esi, %esi
    00000096: 	subl	%esi, %edx
    00000098: 	cmpl	$0x1, %r13d
    0000009c: 	jle	.Ltmp1990 # Offset: 156
    0000009e: 	leaq	0x1(%r12), %rsi
    000000a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1991:
    000000a8: 	movzbl	(%rsi), %eax
    000000ab: 	movl	%edi, %r15d
    000000ae: 	movl	%ecx, %edi
    000000b0: 	addq	$0x1, %rsi
    000000b4: 	movl	%eax, %ecx
    000000b6: 	divb	%dil
    000000b9: 	movzbl	%cl, %edi
    000000bc: 	addl	%ebx, %eax
    000000be: 	movzbl	%al, %eax
    000000c1: 	leal	(%rdi,%rax,2), %r8d
    000000c5: 	leal	(%r15,%rax,2), %eax
    000000c9: 	shll	$0x3, %eax
    000000cc: 	subl	%r8d, %eax
    000000cf: 	subl	%r8d, %eax
    000000d2: 	subl	%r8d, %eax
    000000d5: 	subl	%r8d, %eax
    000000d8: 	subl	%r8d, %eax
    000000db: 	subl	%r8d, %eax
    000000de: 	addl	%r8d, %r8d
    000000e1: 	subl	%r8d, %eax
    000000e4: 	addl	%eax, %edx
    000000e6: 	cmpq	%rbp, %rsi
    000000e9: 	jne	.Ltmp1991 # Offset: 233
.Ltmp1990:
    000000eb: 	testb	%dl, %dl
    000000ed: 	jne	.Ltmp1992 # Offset: 237
    000000f3: 	addl	$0x1, %r14d
    000000f7: 	cmpl	%r11d, %r14d
    000000fa: 	jl	.Ltmp1993 # Offset: 250
.Ltmp1989:
    00000100: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000107: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000010e: 	subq	$0x20, %rax
    00000112: 	cmpq	%rax, %rbx
    00000115: 	je	.Ltmp1994 # Offset: 277
    0000011b: 	movq	0x8(%rsp), %rax
    00000120: 	leaq	0x10(%rbx), %rdi
    00000124: 	movq	%rdi, (%rbx)
    00000127: 	movq	(%rax), %rbp
    0000012a: 	movq	0x8(%rax), %r12
    0000012e: 	movq	%rbp, %rax
    00000131: 	addq	%r12, %rax
    00000134: 	je	.Ltmp1995 # Offset: 308
    00000136: 	testq	%rbp, %rbp
    00000139: 	je	.Ltmp1996 # Offset: 313
.Ltmp1995:
    0000013f: 	movq	%r12, 0x10(%rsp)
    00000144: 	cmpq	$0xf, %r12
    00000148: 	ja	.Ltmp1997 # Offset: 328
    0000014e: 	cmpq	$0x1, %r12
    00000152: 	jne	.Ltmp1998 # Offset: 338
    00000158: 	movzbl	(%rbp), %eax
    0000015c: 	movb	%al, 0x10(%rbx)
.Ltmp2001:
    0000015f: 	movq	%r12, 0x8(%rbx)
    00000163: 	movb	$0x0, (%rdi,%r12)
    00000168: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000016f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000176: 	addq	$0x20, %rax
    0000017a: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000181: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000188: 	je	.Ltmp1999 # Offset: 392
.Ltmp2002:
    0000018e: 	movq	-0x20(%rax), %rbp
    00000192: 	callq	clock@PLT # Offset: 402
    00000197: 	movq	%rax, end_time(%rip)
    0000019e: 	movq	0x18(%rsp), %rdx
    000001a3: 	subq	%fs:0x28, %rdx
    000001ac: 	jne	.Ltmp2000 # Offset: 428
    000001b2: 	subq	start_time(%rip), %rax
    000001b9: 	pxor	%xmm0, %xmm0
    000001bd: 	movq	%rbp, %rdi
    000001c0: 	cvtsi2sd	%rax, %xmm0
    000001c5: 	divsd	DATAat0x4d640(%rip), %xmm0
    000001cd: 	addq	$0x28, %rsp
    000001d1: 	popq	%rbx
    000001d2: 	popq	%rbp
    000001d3: 	popq	%r12
    000001d5: 	popq	%r13
    000001d7: 	popq	%r14
    000001d9: 	popq	%r15
    000001db: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 475
.Ltmp1992:
    000001e0: 	movq	0x8(%rsp), %rax
    000001e5: 	leaq	DATAat0x4d004(%rip), %rsi
    000001ec: 	movl	$0x1, %edi
    000001f1: 	addl	$0x1, %r14d
    000001f5: 	movq	(%rax), %rdx
    000001f8: 	xorl	%eax, %eax
    000001fa: 	callq	__printf_chk@PLT # Offset: 506
    000001ff: 	movl	iterations(%rip), %r11d
    00000206: 	cmpl	%r11d, %r14d
    00000209: 	jge	.Ltmp1989 # Offset: 521
    0000020f: 	movzbl	(%r12), %r9d
    00000214: 	movzbl	0x1(%r12), %r10d
    0000021a: 	jmp	.Ltmp1993 # Offset: 538
.Ltmp1997:
    0000021f: 	movq	%rbx, %rdi
    00000222: 	leaq	0x10(%rsp), %rsi
    00000227: 	xorl	%edx, %edx
    00000229: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 553
    0000022e: 	movq	%rax, (%rbx)
    00000231: 	movq	%rax, %rdi
    00000234: 	movq	0x10(%rsp), %rax
    00000239: 	movq	%rax, 0x10(%rbx)
.Ltmp2003:
    0000023d: 	movq	%r12, %rdx
    00000240: 	movq	%rbp, %rsi
    00000243: 	callq	memcpy@PLT # Offset: 579
    00000248: 	movq	0x10(%rsp), %r12
    0000024d: 	movq	(%rbx), %rdi
    00000250: 	jmp	.Ltmp2001 # Offset: 592
.Ltmp1994:
    00000255: 	movq	0x8(%rsp), %rsi
    0000025a: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000261: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 609
    00000266: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000026d: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000274: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000027b: 	jne	.Ltmp2002 # Offset: 635
.Ltmp1999:
    00000281: 	movq	-0x8(%rdx), %rax
    00000285: 	addq	$0x200, %rax
    0000028b: 	jmp	.Ltmp2002 # Offset: 651
.Ltmp1998:
    00000290: 	testq	%r12, %r12
    00000293: 	je	.Ltmp2001 # Offset: 659
    00000299: 	jmp	.Ltmp2003 # Offset: 665
.Ltmp2000:
    0000029b: 	callq	__stack_chk_fail@PLT # Offset: 667
.Ltmp1996:
    000002a0: 	leaq	DATAat0x4d018(%rip), %rdi
    000002a7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 679
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSENIh14custom_cse_divIhELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSENIa14custom_cse_subIaELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 158
  State       : disassembled
  Address     : 0x1f5b0
  Size        : 0x5ab
  MaxSize     : 0x5b0
  Offset      : 0x1f5b0
  Section     : .text
  Orc Section : .local.text._Z9test_CSENIa14custom_cse_subIaELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0157:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movl	%esi, %r12d
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdi, %rbx
    00000016: 	subq	$0x48, %rsp
    0000001a: 	movq	%rcx, 0x20(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x38(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	movl	iterations(%rip), %eax
    00000041: 	movl	%eax, (%rsp)
    00000044: 	testl	%eax, %eax
    00000046: 	jle	.Ltmp2004 # Offset: 70
    0000004c: 	leal	-0x1(%r12), %edi
    00000051: 	leal	-0x2(%r12), %eax
    00000056: 	movd	%ebp, %xmm3
    0000005a: 	xorl	%r14d, %r14d
    0000005d: 	movl	%eax, 0x4(%rsp)
    00000061: 	movl	%edi, %eax
    00000063: 	punpcklbw	%xmm3, %xmm3
    00000067: 	movzbl	(%rbx), %r8d
    0000006b: 	shrl	$0x4, %eax
    0000006e: 	movl	%edi, 0x8(%rsp)
    00000072: 	andl	$-0x10, %edi
    00000075: 	punpcklwd	%xmm3, %xmm3
    00000079: 	subl	$0x1, %eax
    0000007c: 	movl	%edi, %r15d
    0000007f: 	shlq	$0x4, %rax
    00000083: 	leaq	0x10(%rbx,%rax), %r13
    00000088: 	leal	0x1(%rdi), %eax
    0000008b: 	movzbl	0x1(%rbx), %edi
    0000008f: 	movl	%eax, 0xc(%rsp)
    00000093: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2010:
    00000098: 	leal	(%rdi,%rbp), %eax
    0000009b: 	movsbl	%dil, %edx
    0000009f: 	subl	%r8d, %eax
    000000a2: 	movsbl	%al, %eax
    000000a5: 	leal	(%rdx,%rax,2), %edx
    000000a8: 	leal	(%r8,%rax,2), %eax
    000000ac: 	shll	$0x3, %eax
    000000af: 	subl	%edx, %eax
    000000b1: 	subl	%edx, %eax
    000000b3: 	subl	%edx, %eax
    000000b5: 	subl	%edx, %eax
    000000b7: 	subl	%edx, %eax
    000000b9: 	subl	%edx, %eax
    000000bb: 	addl	%edx, %edx
    000000bd: 	subl	%edx, %eax
    000000bf: 	movl	%eax, %edx
    000000c1: 	cmpl	$0x1, %r12d
    000000c5: 	jle	.Ltmp2005 # Offset: 197
    000000cb: 	cmpl	$0xe, 0x4(%rsp)
    000000d0: 	jbe	.Ltmp2006 # Offset: 208
    000000d6: 	pshufd	$0x0, %xmm3, %xmm6
    000000db: 	movq	%rbx, %rdx
    000000de: 	pxor	%xmm1, %xmm1
    000000e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2007:
    000000e8: 	movdqu	0x1(%rdx), %xmm5
    000000ed: 	movdqu	(%rdx), %xmm7
    000000f1: 	addq	$0x10, %rdx
    000000f5: 	movdqu	-0xf(%rdx), %xmm2
    000000fa: 	paddb	%xmm6, %xmm5
    000000fe: 	movdqa	%xmm5, %xmm0
    00000102: 	psubb	%xmm7, %xmm0
    00000106: 	paddb	%xmm0, %xmm2
    0000010a: 	paddb	%xmm0, %xmm2
    0000010e: 	paddb	%xmm5, %xmm0
    00000112: 	paddb	%xmm0, %xmm0
    00000116: 	movdqa	%xmm2, %xmm4
    0000011a: 	paddb	%xmm0, %xmm0
    0000011e: 	paddb	%xmm2, %xmm4
    00000122: 	paddb	%xmm0, %xmm0
    00000126: 	paddb	%xmm4, %xmm2
    0000012a: 	paddb	%xmm0, %xmm1
    0000012e: 	psubb	%xmm4, %xmm1
    00000132: 	psubb	%xmm2, %xmm1
    00000136: 	psubb	%xmm2, %xmm1
    0000013a: 	cmpq	%r13, %rdx
    0000013d: 	jne	.Ltmp2007 # Offset: 317
    0000013f: 	movdqa	%xmm1, %xmm0
    00000143: 	psrldq	$0x8, %xmm0
    00000148: 	paddb	%xmm0, %xmm1
    0000014c: 	pxor	%xmm0, %xmm0
    00000150: 	psadbw	%xmm0, %xmm1
    00000154: 	movd	%xmm1, %edx
    00000158: 	addl	%eax, %edx
    0000015a: 	cmpl	0x8(%rsp), %r15d
    0000015f: 	je	.Ltmp2005 # Offset: 351
    00000165: 	movl	0xc(%rsp), %ecx
    00000169: 	movl	%r15d, %r9d
.Ltmp2018:
    0000016c: 	movl	%r12d, %eax
    0000016f: 	subl	%r9d, %eax
    00000172: 	leal	-0x1(%rax), %esi
    00000175: 	subl	$0x2, %eax
    00000178: 	cmpl	$0x6, %eax
    0000017b: 	jbe	.Ltmp2008 # Offset: 379
    00000181: 	movl	%ebp, %eax
    00000183: 	movzbl	%bpl, %r10d
    00000187: 	movq	0x1(%rbx,%r9), %xmm1
    0000018e: 	movq	(%rbx,%r9), %xmm4
    00000194: 	shll	$0x8, %eax
    00000197: 	orl	%r10d, %eax
    0000019a: 	movd	%eax, %xmm7
    0000019e: 	pshuflw	$0x0, %xmm7, %xmm0
    000001a3: 	paddb	%xmm1, %xmm0
    000001a7: 	movdqa	%xmm0, %xmm2
    000001ab: 	psubb	%xmm4, %xmm2
    000001af: 	paddb	%xmm2, %xmm0
    000001b3: 	paddb	%xmm2, %xmm1
    000001b7: 	paddb	%xmm0, %xmm0
    000001bb: 	paddb	%xmm2, %xmm1
    000001bf: 	paddb	%xmm0, %xmm0
    000001c3: 	movdqa	%xmm1, %xmm2
    000001c7: 	paddb	%xmm1, %xmm2
    000001cb: 	paddb	%xmm0, %xmm0
    000001cf: 	paddb	%xmm2, %xmm1
    000001d3: 	psubb	%xmm2, %xmm0
    000001d7: 	movdqa	%xmm0, %xmm2
    000001db: 	pxor	%xmm0, %xmm0
    000001df: 	psubb	%xmm1, %xmm2
    000001e3: 	psubb	%xmm1, %xmm2
    000001e7: 	movdqa	%xmm2, %xmm6
    000001eb: 	psadbw	%xmm0, %xmm6
    000001ef: 	movq	%xmm6, %rax
    000001f4: 	movq	%xmm6, 0x28(%rsp)
    000001fa: 	movl	%eax, %r9d
    000001fd: 	movl	%esi, %eax
    000001ff: 	andl	$-0x8, %eax
    00000202: 	addl	%r9d, %edx
    00000205: 	addl	%eax, %ecx
    00000207: 	cmpl	%eax, %esi
    00000209: 	je	.Ltmp2005 # Offset: 521
.Ltmp2008:
    0000020f: 	movslq	%ecx, %rax
    00000212: 	addq	%rbx, %rax
    00000215: 	movsbl	(%rax), %r9d
    00000219: 	movzbl	-0x1(%rax), %r11d
    0000021e: 	leal	(%rbp,%r9), %eax
    00000223: 	subl	%r11d, %eax
    00000226: 	movsbl	%al, %eax
    00000229: 	leal	(%r9,%rax,2), %esi
    0000022d: 	leal	(%r11,%rax,2), %eax
    00000231: 	leal	(%rdx,%rax,8), %eax
    00000234: 	subl	%esi, %eax
    00000236: 	subl	%esi, %eax
    00000238: 	subl	%esi, %eax
    0000023a: 	subl	%esi, %eax
    0000023c: 	subl	%esi, %eax
    0000023e: 	subl	%esi, %eax
    00000240: 	subl	%esi, %eax
    00000242: 	subl	%esi, %eax
    00000244: 	movl	%eax, %edx
    00000246: 	leal	0x1(%rcx), %eax
    00000249: 	cmpl	%eax, %r12d
    0000024c: 	jle	.Ltmp2005 # Offset: 588
    00000252: 	cltq
    00000254: 	movzbl	(%rbx,%rax), %r11d
    00000259: 	movl	%r11d, %esi
    0000025c: 	movsbl	%r11b, %r10d
    00000260: 	subl	%r9d, %esi
    00000263: 	addl	%ebp, %esi
    00000265: 	movsbl	%sil, %esi
    00000269: 	leal	(%r10,%rsi,2), %eax
    0000026d: 	leal	(%r9,%rsi,2), %esi
    00000271: 	shll	$0x3, %esi
    00000274: 	subl	%eax, %esi
    00000276: 	subl	%eax, %esi
    00000278: 	subl	%eax, %esi
    0000027a: 	subl	%eax, %esi
    0000027c: 	subl	%eax, %esi
    0000027e: 	subl	%eax, %esi
    00000280: 	subl	%eax, %esi
    00000282: 	subl	%eax, %esi
    00000284: 	leal	0x2(%rcx), %eax
    00000287: 	addl	%esi, %edx
    00000289: 	cmpl	%eax, %r12d
    0000028c: 	jle	.Ltmp2005 # Offset: 652
    00000292: 	cltq
    00000294: 	movsbl	(%rbx,%rax), %r9d
    00000299: 	movl	%r9d, %eax
    0000029c: 	subl	%r11d, %eax
    0000029f: 	leal	(%rax,%rbp), %r11d
    000002a3: 	movsbl	%r11b, %r11d
    000002a7: 	leal	(%r10,%r11,2), %r10d
    000002ab: 	leal	(%r9,%r11,2), %eax
    000002af: 	shll	$0x3, %r10d
    000002b3: 	subl	%eax, %r10d
    000002b6: 	subl	%eax, %r10d
    000002b9: 	subl	%eax, %r10d
    000002bc: 	subl	%eax, %r10d
    000002bf: 	subl	%eax, %r10d
    000002c2: 	subl	%eax, %r10d
    000002c5: 	subl	%eax, %r10d
    000002c8: 	subl	%eax, %r10d
    000002cb: 	leal	0x3(%rcx), %eax
    000002ce: 	addl	%r10d, %edx
    000002d1: 	cmpl	%eax, %r12d
    000002d4: 	jle	.Ltmp2005 # Offset: 724
    000002da: 	cltq
    000002dc: 	movzbl	(%rbx,%rax), %r10d
    000002e1: 	movl	%r10d, %r11d
    000002e4: 	movsbl	%r10b, %esi
    000002e8: 	subl	%r9d, %r11d
    000002eb: 	addl	%ebp, %r11d
    000002ee: 	movsbl	%r11b, %r11d
    000002f2: 	leal	(%r9,%r11,2), %r9d
    000002f6: 	leal	(%rsi,%r11,2), %eax
    000002fa: 	shll	$0x3, %r9d
    000002fe: 	subl	%eax, %r9d
    00000301: 	subl	%eax, %r9d
    00000304: 	subl	%eax, %r9d
    00000307: 	subl	%eax, %r9d
    0000030a: 	subl	%eax, %r9d
    0000030d: 	subl	%eax, %r9d
    00000310: 	subl	%eax, %r9d
    00000313: 	subl	%eax, %r9d
    00000316: 	leal	0x4(%rcx), %eax
    00000319: 	addl	%r9d, %edx
    0000031c: 	cmpl	%eax, %r12d
    0000031f: 	jle	.Ltmp2005 # Offset: 799
    00000325: 	cltq
    00000327: 	movzbl	(%rbx,%rax), %r9d
    0000032c: 	movl	%r9d, %r11d
    0000032f: 	subl	%r10d, %r11d
    00000332: 	movsbl	%r9b, %r10d
    00000336: 	addl	%ebp, %r11d
    00000339: 	movsbl	%r11b, %r11d
    0000033d: 	leal	(%rsi,%r11,2), %esi
    00000341: 	leal	(%r10,%r11,2), %eax
    00000345: 	shll	$0x3, %esi
    00000348: 	subl	%eax, %esi
    0000034a: 	subl	%eax, %esi
    0000034c: 	subl	%eax, %esi
    0000034e: 	subl	%eax, %esi
    00000350: 	subl	%eax, %esi
    00000352: 	subl	%eax, %esi
    00000354: 	subl	%eax, %esi
    00000356: 	subl	%eax, %esi
    00000358: 	leal	0x5(%rcx), %eax
    0000035b: 	addl	%esi, %edx
    0000035d: 	cmpl	%eax, %r12d
    00000360: 	jle	.Ltmp2005 # Offset: 864
    00000362: 	cltq
    00000364: 	addl	$0x6, %ecx
    00000367: 	movzbl	(%rbx,%rax), %r11d
    0000036c: 	movl	%r11d, %esi
    0000036f: 	subl	%r9d, %esi
    00000372: 	movsbl	%r11b, %r9d
    00000376: 	addl	%ebp, %esi
    00000378: 	movsbl	%sil, %esi
    0000037c: 	leal	(%r9,%rsi,2), %eax
    00000380: 	leal	(%r10,%rsi,2), %esi
    00000384: 	shll	$0x3, %esi
    00000387: 	subl	%eax, %esi
    00000389: 	subl	%eax, %esi
    0000038b: 	subl	%eax, %esi
    0000038d: 	subl	%eax, %esi
    0000038f: 	subl	%eax, %esi
    00000391: 	subl	%eax, %esi
    00000393: 	subl	%eax, %esi
    00000395: 	subl	%eax, %esi
    00000397: 	addl	%esi, %edx
    00000399: 	cmpl	%ecx, %r12d
    0000039c: 	jle	.Ltmp2005 # Offset: 924
    0000039e: 	movslq	%ecx, %rcx
    000003a1: 	movsbl	(%rbx,%rcx), %ecx
    000003a5: 	movl	%ecx, %eax
    000003a7: 	subl	%r11d, %eax
    000003aa: 	addl	%ebp, %eax
    000003ac: 	movsbl	%al, %eax
    000003af: 	leal	(%rcx,%rax,2), %ecx
    000003b2: 	leal	(%r9,%rax,2), %eax
    000003b6: 	shll	$0x3, %eax
    000003b9: 	subl	%ecx, %eax
    000003bb: 	subl	%ecx, %eax
    000003bd: 	subl	%ecx, %eax
    000003bf: 	subl	%ecx, %eax
    000003c1: 	subl	%ecx, %eax
    000003c3: 	subl	%ecx, %eax
    000003c5: 	subl	%ecx, %eax
    000003c7: 	subl	%ecx, %eax
    000003c9: 	addl	%eax, %edx
.Ltmp2005:
    000003cb: 	testb	%dl, %dl
    000003cd: 	jne	.Ltmp2009 # Offset: 973
    000003d3: 	addl	$0x1, %r14d
    000003d7: 	cmpl	(%rsp), %r14d
    000003db: 	jl	.Ltmp2010 # Offset: 987
.Ltmp2004:
    000003e1: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000003e8: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000003ef: 	subq	$0x20, %rax
    000003f3: 	cmpq	%rax, %rbx
    000003f6: 	je	.Ltmp2011 # Offset: 1014
    000003fc: 	movq	0x20(%rsp), %rax
    00000401: 	leaq	0x10(%rbx), %rdi
    00000405: 	movq	%rdi, (%rbx)
    00000408: 	movq	(%rax), %rbp
    0000040b: 	movq	0x8(%rax), %r12
    0000040f: 	movq	%rbp, %rax
    00000412: 	addq	%r12, %rax
    00000415: 	je	.Ltmp2012 # Offset: 1045
    00000417: 	testq	%rbp, %rbp
    0000041a: 	je	.Ltmp2013 # Offset: 1050
.Ltmp2012:
    00000420: 	movq	%r12, 0x30(%rsp)
    00000425: 	cmpq	$0xf, %r12
    00000429: 	ja	.Ltmp2014 # Offset: 1065
    0000042f: 	cmpq	$0x1, %r12
    00000433: 	jne	.Ltmp2015 # Offset: 1075
    00000439: 	movzbl	(%rbp), %eax
    0000043d: 	movb	%al, 0x10(%rbx)
.Ltmp2019:
    00000440: 	movq	%r12, 0x8(%rbx)
    00000444: 	movb	$0x0, (%rdi,%r12)
    00000449: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000450: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000457: 	addq	$0x20, %rax
    0000045b: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000462: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000469: 	je	.Ltmp2016 # Offset: 1129
.Ltmp2020:
    0000046f: 	movq	-0x20(%rax), %rbp
    00000473: 	callq	clock@PLT # Offset: 1139
    00000478: 	movq	%rax, end_time(%rip)
    0000047f: 	movq	0x38(%rsp), %rdx
    00000484: 	subq	%fs:0x28, %rdx
    0000048d: 	jne	.Ltmp2017 # Offset: 1165
    00000493: 	subq	start_time(%rip), %rax
    0000049a: 	pxor	%xmm0, %xmm0
    0000049e: 	movq	%rbp, %rdi
    000004a1: 	cvtsi2sd	%rax, %xmm0
    000004a6: 	divsd	DATAat0x4d640(%rip), %xmm0
    000004ae: 	addq	$0x48, %rsp
    000004b2: 	popq	%rbx
    000004b3: 	popq	%rbp
    000004b4: 	popq	%r12
    000004b6: 	popq	%r13
    000004b8: 	popq	%r14
    000004ba: 	popq	%r15
    000004bc: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 1212
    000004c1: 	nopl	(%rax) # Size: 7
.Ltmp2009:
    000004c8: 	movq	0x20(%rsp), %rax
    000004cd: 	leaq	DATAat0x4d004(%rip), %rsi
    000004d4: 	movl	$0x1, %edi
    000004d9: 	movaps	%xmm3, 0x10(%rsp)
    000004de: 	addl	$0x1, %r14d
    000004e2: 	movq	(%rax), %rdx
    000004e5: 	xorl	%eax, %eax
    000004e7: 	callq	__printf_chk@PLT # Offset: 1255
    000004ec: 	movl	iterations(%rip), %eax
    000004f2: 	movl	%eax, (%rsp)
    000004f5: 	cmpl	%r14d, %eax
    000004f8: 	jle	.Ltmp2004 # Offset: 1272
    000004fe: 	movzbl	(%rbx), %r8d
    00000502: 	movzbl	0x1(%rbx), %edi
    00000506: 	movdqa	0x10(%rsp), %xmm3
    0000050c: 	jmp	.Ltmp2010 # Offset: 1292
.Ltmp2006:
    00000511: 	xorl	%r9d, %r9d
    00000514: 	movl	$0x1, %ecx
    00000519: 	jmp	.Ltmp2018 # Offset: 1305
.Ltmp2014:
    0000051e: 	movq	%rbx, %rdi
    00000521: 	leaq	0x30(%rsp), %rsi
    00000526: 	xorl	%edx, %edx
    00000528: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1320
    0000052d: 	movq	%rax, (%rbx)
    00000530: 	movq	%rax, %rdi
    00000533: 	movq	0x30(%rsp), %rax
    00000538: 	movq	%rax, 0x10(%rbx)
.Ltmp2021:
    0000053c: 	movq	%r12, %rdx
    0000053f: 	movq	%rbp, %rsi
    00000542: 	callq	memcpy@PLT # Offset: 1346
    00000547: 	movq	0x30(%rsp), %r12
    0000054c: 	movq	(%rbx), %rdi
    0000054f: 	jmp	.Ltmp2019 # Offset: 1359
.Ltmp2011:
    00000554: 	movq	0x20(%rsp), %rsi
    00000559: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000560: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1376
    00000565: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000056c: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000573: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000057a: 	jne	.Ltmp2020 # Offset: 1402
.Ltmp2016:
    00000580: 	movq	-0x8(%rdx), %rax
    00000584: 	addq	$0x200, %rax
    0000058a: 	jmp	.Ltmp2020 # Offset: 1418
.Ltmp2015:
    0000058f: 	testq	%r12, %r12
    00000592: 	je	.Ltmp2019 # Offset: 1426
    00000598: 	jmp	.Ltmp2021 # Offset: 1432
.Ltmp2017:
    0000059a: 	callq	__stack_chk_fail@PLT # Offset: 1434
.Ltmp2013:
    0000059f: 	leaq	DATAat0x4d018(%rip), %rdi
    000005a6: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1446
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSENIa14custom_cse_subIaELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSENIi14custom_cse_divIiELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 159
  State       : disassembled
  Address     : 0x1fb60
  Size        : 0x287
  MaxSize     : 0x290
  Offset      : 0x1fb60
  Section     : .text
  Orc Section : .local.text._Z9test_CSENIi14custom_cse_divIiELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0158:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rcx, %rbp
    00000016: 	pushq	%rbx
    00000017: 	movl	%edx, %ebx
    00000019: 	subq	$0x18, %rsp
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x8(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	callq	clock@PLT # Offset: 45
    00000032: 	movl	iterations(%rip), %r11d
    00000039: 	movq	%rax, start_time(%rip)
    00000040: 	testl	%r11d, %r11d
    00000043: 	jle	.Ltmp2022 # Offset: 67
    00000049: 	leal	-0x2(%r14), %eax
    0000004d: 	xorl	%r15d, %r15d
    00000050: 	leaq	0x8(%r13,%rax,4), %r12
.Ltmp2034:
    00000055: 	movl	(%r13), %r9d
    00000059: 	movl	0x4(%r13), %r10d
.Ltmp2026:
    0000005d: 	movl	%r10d, %eax
    00000060: 	movl	%r9d, %ecx
    00000063: 	movl	%r9d, %esi
    00000066: 	cltd
    00000067: 	subl	%r10d, %ecx
    0000006a: 	idivl	%r9d
    0000006d: 	addl	%ebx, %eax
    0000006f: 	leal	(%r9,%rax,2), %edx
    00000073: 	leal	(%r10,%rax,2), %eax
    00000077: 	addl	%edx, %ecx
    00000079: 	subl	%eax, %ecx
    0000007b: 	addl	%edx, %ecx
    0000007d: 	subl	%eax, %ecx
    0000007f: 	addl	%edx, %ecx
    00000081: 	subl	%eax, %ecx
    00000083: 	addl	%edx, %ecx
    00000085: 	subl	%eax, %ecx
    00000087: 	addl	%edx, %ecx
    00000089: 	subl	%eax, %ecx
    0000008b: 	addl	%edx, %ecx
    0000008d: 	subl	%eax, %ecx
    0000008f: 	addl	%edx, %ecx
    00000091: 	subl	%eax, %ecx
    00000093: 	cmpl	$0x1, %r14d
    00000097: 	jle	.Ltmp2023 # Offset: 151
    00000099: 	leaq	0x4(%r13), %rdi
    0000009d: 	nopl	(%rax) # Size: 3
.Ltmp2024:
    000000a0: 	movl	%esi, %r8d
    000000a3: 	movl	(%rdi), %esi
    000000a5: 	addq	$0x4, %rdi
    000000a9: 	movl	%esi, %eax
    000000ab: 	cltd
    000000ac: 	idivl	%r8d
    000000af: 	addl	%ebx, %eax
    000000b1: 	leal	(%r8,%rax,2), %edx
    000000b5: 	leal	(%rsi,%rax,2), %eax
    000000b8: 	leal	(%rcx,%rdx,2), %ecx
    000000bb: 	subl	%eax, %ecx
    000000bd: 	subl	%eax, %ecx
    000000bf: 	addl	%edx, %ecx
    000000c1: 	subl	%eax, %ecx
    000000c3: 	addl	%edx, %ecx
    000000c5: 	subl	%eax, %ecx
    000000c7: 	addl	%edx, %ecx
    000000c9: 	subl	%eax, %ecx
    000000cb: 	addl	%edx, %ecx
    000000cd: 	subl	%eax, %ecx
    000000cf: 	addl	%edx, %ecx
    000000d1: 	subl	%eax, %ecx
    000000d3: 	addl	%edx, %ecx
    000000d5: 	subl	%eax, %ecx
    000000d7: 	cmpq	%rdi, %r12
    000000da: 	jne	.Ltmp2024 # Offset: 218
.Ltmp2023:
    000000dc: 	testl	%ecx, %ecx
    000000de: 	jne	.Ltmp2025 # Offset: 222
    000000e4: 	addl	$0x1, %r15d
    000000e8: 	cmpl	%r11d, %r15d
    000000eb: 	jl	.Ltmp2026 # Offset: 235
.Ltmp2022:
    000000f1: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000f8: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000ff: 	subq	$0x20, %rax
    00000103: 	cmpq	%rax, %rbx
    00000106: 	je	.Ltmp2027 # Offset: 262
    0000010c: 	leaq	0x10(%rbx), %rdi
    00000110: 	movq	0x8(%rbp), %r12
    00000114: 	movq	%rdi, (%rbx)
    00000117: 	movq	(%rbp), %r13
    0000011b: 	movq	%r13, %rax
    0000011e: 	addq	%r12, %rax
    00000121: 	je	.Ltmp2028 # Offset: 289
    00000123: 	testq	%r13, %r13
    00000126: 	je	.Ltmp2029 # Offset: 294
.Ltmp2028:
    0000012c: 	movq	%r12, (%rsp)
    00000130: 	cmpq	$0xf, %r12
    00000134: 	ja	.Ltmp2030 # Offset: 308
    0000013a: 	cmpq	$0x1, %r12
    0000013e: 	jne	.Ltmp2031 # Offset: 318
    00000144: 	movzbl	(%r13), %eax
    00000149: 	movb	%al, 0x10(%rbx)
.Ltmp2035:
    0000014c: 	movq	%r12, 0x8(%rbx)
    00000150: 	movb	$0x0, (%rdi,%r12)
    00000155: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000015c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000163: 	addq	$0x20, %rax
    00000167: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000016e: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000175: 	je	.Ltmp2032 # Offset: 373
.Ltmp2036:
    0000017b: 	movq	-0x20(%rax), %rbp
    0000017f: 	callq	clock@PLT # Offset: 383
    00000184: 	movq	%rax, end_time(%rip)
    0000018b: 	movq	0x8(%rsp), %rdx
    00000190: 	subq	%fs:0x28, %rdx
    00000199: 	jne	.Ltmp2033 # Offset: 409
    0000019f: 	subq	start_time(%rip), %rax
    000001a6: 	pxor	%xmm0, %xmm0
    000001aa: 	movq	%rbp, %rdi
    000001ad: 	cvtsi2sd	%rax, %xmm0
    000001b2: 	divsd	DATAat0x4d640(%rip), %xmm0
    000001ba: 	addq	$0x18, %rsp
    000001be: 	popq	%rbx
    000001bf: 	popq	%rbp
    000001c0: 	popq	%r12
    000001c2: 	popq	%r13
    000001c4: 	popq	%r14
    000001c6: 	popq	%r15
    000001c8: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 456
    000001cd: 	nopl	(%rax) # Size: 3
.Ltmp2025:
    000001d0: 	movq	(%rbp), %rdx
    000001d4: 	movl	$0x1, %edi
    000001d9: 	xorl	%eax, %eax
    000001db: 	addl	$0x1, %r15d
    000001df: 	leaq	DATAat0x4d004(%rip), %rsi
    000001e6: 	callq	__printf_chk@PLT # Offset: 486
    000001eb: 	movl	iterations(%rip), %r11d
    000001f2: 	cmpl	%r11d, %r15d
    000001f5: 	jl	.Ltmp2034 # Offset: 501
    000001fb: 	jmp	.Ltmp2022 # Offset: 507
.Ltmp2030:
    00000200: 	movq	%rbx, %rdi
    00000203: 	movq	%rsp, %rsi
    00000206: 	xorl	%edx, %edx
    00000208: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 520
    0000020d: 	movq	%rax, (%rbx)
    00000210: 	movq	%rax, %rdi
    00000213: 	movq	(%rsp), %rax
    00000217: 	movq	%rax, 0x10(%rbx)
.Ltmp2037:
    0000021b: 	movq	%r12, %rdx
    0000021e: 	movq	%r13, %rsi
    00000221: 	callq	memcpy@PLT # Offset: 545
    00000226: 	movq	(%rsp), %r12
    0000022a: 	movq	(%rbx), %rdi
    0000022d: 	jmp	.Ltmp2035 # Offset: 557
.Ltmp2027:
    00000232: 	movq	%rbp, %rsi
    00000235: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000023c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 572
    00000241: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000248: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000024f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000256: 	jne	.Ltmp2036 # Offset: 598
.Ltmp2032:
    0000025c: 	movq	-0x8(%rdx), %rax
    00000260: 	addq	$0x200, %rax
    00000266: 	jmp	.Ltmp2036 # Offset: 614
.Ltmp2031:
    0000026b: 	testq	%r12, %r12
    0000026e: 	je	.Ltmp2035 # Offset: 622
    00000274: 	jmp	.Ltmp2037 # Offset: 628
.Ltmp2033:
    00000276: 	callq	__stack_chk_fail@PLT # Offset: 630
.Ltmp2029:
    0000027b: 	leaq	DATAat0x4d018(%rip), %rdi
    00000282: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 642
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSENIi14custom_cse_divIiELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSENIi14custom_cse_mulIiELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 160
  State       : disassembled
  Address     : 0x1fdf0
  Size        : 0x42b
  MaxSize     : 0x430
  Offset      : 0x1fdf0
  Section     : .text
  Orc Section : .local.text._Z9test_CSENIi14custom_cse_mulIiELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0159:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	movl	%edx, %ebp
    00000015: 	pushq	%rbx
    00000016: 	subq	$0x38, %rsp
    0000001a: 	movq	%rcx, 0x18(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x28(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r11d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r11d, %r11d
    00000045: 	jle	.Ltmp2038 # Offset: 69
    0000004b: 	leal	-0x1(%r14), %r15d
    0000004f: 	leal	-0x2(%r14), %eax
    00000053: 	xorl	%r13d, %r13d
    00000056: 	movl	%eax, 0xc(%rsp)
    0000005a: 	movl	%r15d, %eax
    0000005d: 	shrl	$0x2, %eax
    00000060: 	subl	$0x1, %eax
    00000063: 	shlq	$0x4, %rax
    00000067: 	leaq	0x10(%r12,%rax), %rbx
    0000006c: 	movl	%r15d, %eax
    0000006f: 	andl	$-0x4, %eax
    00000072: 	movl	%eax, 0x10(%rsp)
    00000076: 	addl	$0x1, %eax
    00000079: 	movl	%eax, 0x14(%rsp)
.Ltmp2051:
    0000007d: 	movl	(%r12), %r9d
    00000081: 	movl	0x4(%r12), %r8d
.Ltmp2043:
    00000086: 	movl	%r9d, %eax
    00000089: 	imull	%r8d, %eax
    0000008d: 	addl	%ebp, %eax
    0000008f: 	leal	(%r9,%rax,2), %ecx
    00000093: 	leal	(%r8,%rax,2), %edx
    00000097: 	movl	%r9d, %eax
    0000009a: 	subl	%r8d, %eax
    0000009d: 	addl	%ecx, %eax
    0000009f: 	subl	%edx, %eax
    000000a1: 	addl	%ecx, %eax
    000000a3: 	subl	%edx, %eax
    000000a5: 	addl	%ecx, %eax
    000000a7: 	subl	%edx, %eax
    000000a9: 	addl	%ecx, %eax
    000000ab: 	subl	%edx, %eax
    000000ad: 	addl	%ecx, %eax
    000000af: 	subl	%edx, %eax
    000000b1: 	addl	%ecx, %eax
    000000b3: 	subl	%edx, %eax
    000000b5: 	addl	%ecx, %eax
    000000b7: 	subl	%edx, %eax
    000000b9: 	cmpl	$0x1, %r14d
    000000bd: 	jle	.Ltmp2039 # Offset: 189
    000000c3: 	cmpl	$0x2, 0xc(%rsp)
    000000c8: 	jbe	.Ltmp2040 # Offset: 200
    000000ce: 	movd	%ebp, %xmm7
    000000d2: 	movq	%r12, %rdx
    000000d5: 	pxor	%xmm0, %xmm0
    000000d9: 	pshufd	$0x0, %xmm7, %xmm2
    000000de: 	nop # Size: 2
.Ltmp2041:
    000000e0: 	movdqu	(%rdx), %xmm3
    000000e4: 	movdqu	0x4(%rdx), %xmm1
    000000e9: 	addq	$0x10, %rdx
    000000ed: 	movdqa	%xmm1, %xmm5
    000000f1: 	movdqa	%xmm3, %xmm6
    000000f5: 	movdqa	%xmm1, %xmm4
    000000f9: 	psrlq	$0x20, %xmm5
    000000fe: 	psrlq	$0x20, %xmm6
    00000103: 	pmuludq	%xmm3, %xmm4
    00000107: 	pmuludq	%xmm6, %xmm5
    0000010b: 	pshufd	$0x8, %xmm4, %xmm4
    00000110: 	pshufd	$0x8, %xmm5, %xmm5
    00000115: 	punpckldq	%xmm5, %xmm4
    00000119: 	paddd	%xmm2, %xmm4
    0000011d: 	paddd	%xmm4, %xmm3
    00000121: 	paddd	%xmm4, %xmm1
    00000125: 	paddd	%xmm4, %xmm3
    00000129: 	paddd	%xmm4, %xmm1
    0000012d: 	paddd	%xmm3, %xmm0
    00000131: 	psubd	%xmm1, %xmm0
    00000135: 	paddd	%xmm3, %xmm0
    00000139: 	psubd	%xmm1, %xmm0
    0000013d: 	paddd	%xmm3, %xmm0
    00000141: 	psubd	%xmm1, %xmm0
    00000145: 	paddd	%xmm3, %xmm0
    00000149: 	psubd	%xmm1, %xmm0
    0000014d: 	paddd	%xmm3, %xmm0
    00000151: 	psubd	%xmm1, %xmm0
    00000155: 	paddd	%xmm3, %xmm0
    00000159: 	psubd	%xmm1, %xmm0
    0000015d: 	paddd	%xmm3, %xmm0
    00000161: 	psubd	%xmm1, %xmm0
    00000165: 	paddd	%xmm3, %xmm0
    00000169: 	psubd	%xmm1, %xmm0
    0000016d: 	cmpq	%rbx, %rdx
    00000170: 	jne	.Ltmp2041 # Offset: 368
    00000176: 	movdqa	%xmm0, %xmm1
    0000017a: 	psrldq	$0x8, %xmm1
    0000017f: 	paddd	%xmm1, %xmm0
    00000183: 	movdqa	%xmm0, %xmm1
    00000187: 	psrldq	$0x4, %xmm1
    0000018c: 	paddd	%xmm1, %xmm0
    00000190: 	movd	%xmm0, %edx
    00000194: 	addl	%edx, %eax
    00000196: 	cmpl	%r15d, 0x10(%rsp)
    0000019b: 	je	.Ltmp2039 # Offset: 411
    000001a1: 	movl	0x14(%rsp), %esi
.Ltmp2052:
    000001a5: 	movslq	%esi, %rcx
    000001a8: 	shlq	$0x2, %rcx
    000001ac: 	leaq	(%r12,%rcx), %rdx
    000001b0: 	movl	-0x4(%rdx), %r10d
    000001b4: 	movl	(%rdx), %edi
    000001b6: 	movl	%r10d, %edx
    000001b9: 	imull	%edi, %edx
    000001bc: 	addl	%ebp, %edx
    000001be: 	leal	(%r10,%rdx,2), %r10d
    000001c2: 	leal	(%rdi,%rdx,2), %edx
    000001c5: 	leal	(%rax,%r10,2), %eax
    000001c9: 	subl	%edx, %eax
    000001cb: 	subl	%edx, %eax
    000001cd: 	addl	%r10d, %eax
    000001d0: 	subl	%edx, %eax
    000001d2: 	addl	%r10d, %eax
    000001d5: 	subl	%edx, %eax
    000001d7: 	addl	%r10d, %eax
    000001da: 	subl	%edx, %eax
    000001dc: 	addl	%r10d, %eax
    000001df: 	subl	%edx, %eax
    000001e1: 	addl	%r10d, %eax
    000001e4: 	subl	%edx, %eax
    000001e6: 	addl	%r10d, %eax
    000001e9: 	subl	%edx, %eax
    000001eb: 	leal	0x1(%rsi), %edx
    000001ee: 	cmpl	%edx, %r14d
    000001f1: 	jle	.Ltmp2039 # Offset: 497
    000001f3: 	movl	0x4(%r12,%rcx), %r10d
    000001f8: 	addl	$0x2, %esi
    000001fb: 	movl	%r10d, %edx
    000001fe: 	imull	%edi, %edx
    00000201: 	addl	%ebp, %edx
    00000203: 	leal	(%rdi,%rdx,2), %edi
    00000206: 	leal	(%r10,%rdx,2), %edx
    0000020a: 	leal	(%rax,%rdi,2), %eax
    0000020d: 	subl	%edx, %eax
    0000020f: 	subl	%edx, %eax
    00000211: 	addl	%edi, %eax
    00000213: 	subl	%edx, %eax
    00000215: 	addl	%edi, %eax
    00000217: 	subl	%edx, %eax
    00000219: 	addl	%edi, %eax
    0000021b: 	subl	%edx, %eax
    0000021d: 	addl	%edi, %eax
    0000021f: 	subl	%edx, %eax
    00000221: 	addl	%edi, %eax
    00000223: 	subl	%edx, %eax
    00000225: 	addl	%edi, %eax
    00000227: 	subl	%edx, %eax
    00000229: 	cmpl	%esi, %r14d
    0000022c: 	jle	.Ltmp2039 # Offset: 556
    0000022e: 	movl	0x8(%r12,%rcx), %esi
    00000233: 	movl	%r10d, %edx
    00000236: 	imull	%esi, %edx
    00000239: 	addl	%ebp, %edx
    0000023b: 	leal	(%r10,%rdx,2), %ecx
    0000023f: 	leal	(%rsi,%rdx,2), %edx
    00000242: 	leal	(%rax,%rcx,2), %eax
    00000245: 	subl	%edx, %eax
    00000247: 	subl	%edx, %eax
    00000249: 	addl	%ecx, %eax
    0000024b: 	subl	%edx, %eax
    0000024d: 	addl	%ecx, %eax
    0000024f: 	subl	%edx, %eax
    00000251: 	addl	%ecx, %eax
    00000253: 	subl	%edx, %eax
    00000255: 	addl	%ecx, %eax
    00000257: 	subl	%edx, %eax
    00000259: 	addl	%ecx, %eax
    0000025b: 	subl	%edx, %eax
    0000025d: 	addl	%ecx, %eax
    0000025f: 	subl	%edx, %eax
.Ltmp2039:
    00000261: 	testl	%eax, %eax
    00000263: 	jne	.Ltmp2042 # Offset: 611
    00000269: 	addl	$0x1, %r13d
    0000026d: 	cmpl	%r11d, %r13d
    00000270: 	jl	.Ltmp2043 # Offset: 624
.Ltmp2038:
    00000276: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000027d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000284: 	subq	$0x20, %rax
    00000288: 	cmpq	%rax, %rbx
    0000028b: 	je	.Ltmp2044 # Offset: 651
    00000291: 	movq	0x18(%rsp), %rax
    00000296: 	leaq	0x10(%rbx), %rdi
    0000029a: 	movq	%rdi, (%rbx)
    0000029d: 	movq	(%rax), %rbp
    000002a0: 	movq	0x8(%rax), %r12
    000002a4: 	movq	%rbp, %rax
    000002a7: 	addq	%r12, %rax
    000002aa: 	je	.Ltmp2045 # Offset: 682
    000002ac: 	testq	%rbp, %rbp
    000002af: 	je	.Ltmp2046 # Offset: 687
.Ltmp2045:
    000002b5: 	movq	%r12, 0x20(%rsp)
    000002ba: 	cmpq	$0xf, %r12
    000002be: 	ja	.Ltmp2047 # Offset: 702
    000002c4: 	cmpq	$0x1, %r12
    000002c8: 	jne	.Ltmp2048 # Offset: 712
    000002ce: 	movzbl	(%rbp), %eax
    000002d2: 	movb	%al, 0x10(%rbx)
.Ltmp2053:
    000002d5: 	movq	%r12, 0x8(%rbx)
    000002d9: 	movb	$0x0, (%rdi,%r12)
    000002de: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002e5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002ec: 	addq	$0x20, %rax
    000002f0: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002f7: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000002fe: 	je	.Ltmp2049 # Offset: 766
.Ltmp2054:
    00000304: 	movq	-0x20(%rax), %rbp
    00000308: 	callq	clock@PLT # Offset: 776
    0000030d: 	movq	%rax, end_time(%rip)
    00000314: 	movq	0x28(%rsp), %rdx
    00000319: 	subq	%fs:0x28, %rdx
    00000322: 	jne	.Ltmp2050 # Offset: 802
    00000328: 	subq	start_time(%rip), %rax
    0000032f: 	pxor	%xmm0, %xmm0
    00000333: 	movq	%rbp, %rdi
    00000336: 	cvtsi2sd	%rax, %xmm0
    0000033b: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000343: 	addq	$0x38, %rsp
    00000347: 	popq	%rbx
    00000348: 	popq	%rbp
    00000349: 	popq	%r12
    0000034b: 	popq	%r13
    0000034d: 	popq	%r14
    0000034f: 	popq	%r15
    00000351: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 849
    00000356: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2042:
    00000360: 	movq	0x18(%rsp), %rax
    00000365: 	leaq	DATAat0x4d004(%rip), %rsi
    0000036c: 	movl	$0x1, %edi
    00000371: 	addl	$0x1, %r13d
    00000375: 	movq	(%rax), %rdx
    00000378: 	xorl	%eax, %eax
    0000037a: 	callq	__printf_chk@PLT # Offset: 890
    0000037f: 	movl	iterations(%rip), %r11d
    00000386: 	cmpl	%r11d, %r13d
    00000389: 	jl	.Ltmp2051 # Offset: 905
    0000038f: 	jmp	.Ltmp2038 # Offset: 911
.Ltmp2040:
    00000394: 	movl	$0x1, %esi
    00000399: 	jmp	.Ltmp2052 # Offset: 921
.Ltmp2047:
    0000039e: 	movq	%rbx, %rdi
    000003a1: 	leaq	0x20(%rsp), %rsi
    000003a6: 	xorl	%edx, %edx
    000003a8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 936
    000003ad: 	movq	%rax, (%rbx)
    000003b0: 	movq	%rax, %rdi
    000003b3: 	movq	0x20(%rsp), %rax
    000003b8: 	movq	%rax, 0x10(%rbx)
.Ltmp2055:
    000003bc: 	movq	%r12, %rdx
    000003bf: 	movq	%rbp, %rsi
    000003c2: 	callq	memcpy@PLT # Offset: 962
    000003c7: 	movq	0x20(%rsp), %r12
    000003cc: 	movq	(%rbx), %rdi
    000003cf: 	jmp	.Ltmp2053 # Offset: 975
.Ltmp2044:
    000003d4: 	movq	0x18(%rsp), %rsi
    000003d9: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000003e0: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 992
    000003e5: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000003ec: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000003f3: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003fa: 	jne	.Ltmp2054 # Offset: 1018
.Ltmp2049:
    00000400: 	movq	-0x8(%rdx), %rax
    00000404: 	addq	$0x200, %rax
    0000040a: 	jmp	.Ltmp2054 # Offset: 1034
.Ltmp2048:
    0000040f: 	testq	%r12, %r12
    00000412: 	je	.Ltmp2053 # Offset: 1042
    00000418: 	jmp	.Ltmp2055 # Offset: 1048
.Ltmp2050:
    0000041a: 	callq	__stack_chk_fail@PLT # Offset: 1050
.Ltmp2046:
    0000041f: 	leaq	DATAat0x4d018(%rip), %rdi
    00000426: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1062
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSENIi14custom_cse_mulIiELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSENIi14custom_cse_subIiELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 161
  State       : disassembled
  Address     : 0x20220
  Size        : 0x43d
  MaxSize     : 0x440
  Offset      : 0x20220
  Section     : .text
  Orc Section : .local.text._Z9test_CSENIi14custom_cse_subIiELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0160:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdi, %rbx
    00000016: 	subq	$0x38, %rsp
    0000001a: 	movq	%rcx, 0x18(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x28(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r10d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r10d, %r10d
    00000045: 	jle	.Ltmp2056 # Offset: 69
    0000004b: 	leal	-0x1(%r14), %r8d
    0000004f: 	leal	-0x2(%r14), %eax
    00000053: 	movl	(%rbx), %edi
    00000055: 	movl	0x4(%rbx), %esi
    00000058: 	movl	%eax, 0xc(%rsp)
    0000005c: 	movl	%r8d, %eax
    0000005f: 	movl	%r8d, %r15d
    00000062: 	xorl	%r13d, %r13d
    00000065: 	shrl	$0x2, %eax
    00000068: 	andl	$-0x4, %r15d
    0000006c: 	subl	$0x1, %eax
    0000006f: 	shlq	$0x4, %rax
    00000073: 	leaq	0x10(%rbx,%rax), %r12
    00000078: 	leal	0x1(%r15), %eax
    0000007c: 	movl	%eax, 0x10(%rsp)
.Ltmp2062:
    00000080: 	movl	%esi, %eax
    00000082: 	subl	%edi, %eax
    00000084: 	addl	%ebp, %eax
    00000086: 	leal	(%rdi,%rax,2), %ecx
    00000089: 	leal	(%rsi,%rax,2), %edx
    0000008c: 	movl	%edi, %eax
    0000008e: 	subl	%esi, %eax
    00000090: 	addl	%ecx, %eax
    00000092: 	subl	%edx, %eax
    00000094: 	addl	%ecx, %eax
    00000096: 	subl	%edx, %eax
    00000098: 	addl	%ecx, %eax
    0000009a: 	subl	%edx, %eax
    0000009c: 	addl	%ecx, %eax
    0000009e: 	subl	%edx, %eax
    000000a0: 	addl	%ecx, %eax
    000000a2: 	subl	%edx, %eax
    000000a4: 	addl	%ecx, %eax
    000000a6: 	subl	%edx, %eax
    000000a8: 	addl	%ecx, %eax
    000000aa: 	subl	%edx, %eax
    000000ac: 	cmpl	$0x1, %r14d
    000000b0: 	jle	.Ltmp2057 # Offset: 176
    000000b6: 	cmpl	$0x2, 0xc(%rsp)
    000000bb: 	jbe	.Ltmp2058 # Offset: 187
    000000c1: 	movd	%ebp, %xmm5
    000000c5: 	movq	%rbx, %rdx
    000000c8: 	pxor	%xmm0, %xmm0
    000000cc: 	pshufd	$0x0, %xmm5, %xmm2
    000000d1: 	nopl	(%rax) # Size: 7
.Ltmp2059:
    000000d8: 	movdqu	0x4(%rdx), %xmm1
    000000dd: 	movdqu	(%rdx), %xmm6
    000000e1: 	addq	$0x10, %rdx
    000000e5: 	movdqa	%xmm1, %xmm4
    000000e9: 	movdqa	%xmm6, %xmm3
    000000ed: 	psubd	%xmm6, %xmm4
    000000f1: 	paddd	%xmm2, %xmm4
    000000f5: 	paddd	%xmm4, %xmm3
    000000f9: 	paddd	%xmm4, %xmm1
    000000fd: 	paddd	%xmm4, %xmm3
    00000101: 	paddd	%xmm4, %xmm1
    00000105: 	paddd	%xmm3, %xmm0
    00000109: 	psubd	%xmm1, %xmm0
    0000010d: 	paddd	%xmm3, %xmm0
    00000111: 	psubd	%xmm1, %xmm0
    00000115: 	paddd	%xmm3, %xmm0
    00000119: 	psubd	%xmm1, %xmm0
    0000011d: 	paddd	%xmm3, %xmm0
    00000121: 	psubd	%xmm1, %xmm0
    00000125: 	paddd	%xmm3, %xmm0
    00000129: 	psubd	%xmm1, %xmm0
    0000012d: 	paddd	%xmm3, %xmm0
    00000131: 	psubd	%xmm1, %xmm0
    00000135: 	paddd	%xmm3, %xmm0
    00000139: 	psubd	%xmm1, %xmm0
    0000013d: 	paddd	%xmm3, %xmm0
    00000141: 	psubd	%xmm1, %xmm0
    00000145: 	cmpq	%rdx, %r12
    00000148: 	jne	.Ltmp2059 # Offset: 328
    0000014a: 	movdqa	%xmm0, %xmm1
    0000014e: 	psrldq	$0x8, %xmm1
    00000153: 	paddd	%xmm1, %xmm0
    00000157: 	movdqa	%xmm0, %xmm1
    0000015b: 	psrldq	$0x4, %xmm1
    00000160: 	paddd	%xmm1, %xmm0
    00000164: 	movd	%xmm0, %edx
    00000168: 	addl	%edx, %eax
    0000016a: 	cmpl	%r8d, %r15d
    0000016d: 	je	.Ltmp2057 # Offset: 365
    00000173: 	movl	0x10(%rsp), %edx
    00000177: 	movl	%r15d, %r9d
.Ltmp2070:
    0000017a: 	movl	%r14d, %r11d
    0000017d: 	subl	%r9d, %r11d
    00000180: 	leal	-0x1(%r11), %ecx
    00000184: 	cmpl	$0x2, %r11d
    00000188: 	je	.Ltmp2060 # Offset: 392
    0000018e: 	movq	0x4(%rbx,%r9,4), %xmm5
    00000195: 	movq	(%rbx,%r9,4), %xmm1
    0000019b: 	movd	%ebp, %xmm7
    0000019f: 	pshufd	$0xe0, %xmm7, %xmm0
    000001a4: 	movdqa	%xmm5, %xmm4
    000001a8: 	psubd	%xmm1, %xmm4
    000001ac: 	paddd	%xmm0, %xmm4
    000001b0: 	movdqa	%xmm4, %xmm3
    000001b4: 	movdqa	%xmm4, %xmm2
    000001b8: 	paddd	%xmm1, %xmm3
    000001bc: 	psubd	%xmm5, %xmm1
    000001c0: 	paddd	%xmm5, %xmm2
    000001c4: 	paddd	%xmm4, %xmm3
    000001c8: 	movdqa	%xmm1, %xmm0
    000001cc: 	paddd	%xmm4, %xmm2
    000001d0: 	paddd	%xmm3, %xmm0
    000001d4: 	psubd	%xmm2, %xmm0
    000001d8: 	paddd	%xmm3, %xmm0
    000001dc: 	psubd	%xmm2, %xmm0
    000001e0: 	paddd	%xmm3, %xmm0
    000001e4: 	psubd	%xmm2, %xmm0
    000001e8: 	paddd	%xmm3, %xmm0
    000001ec: 	psubd	%xmm2, %xmm0
    000001f0: 	paddd	%xmm3, %xmm0
    000001f4: 	psubd	%xmm2, %xmm0
    000001f8: 	paddd	%xmm3, %xmm0
    000001fc: 	psubd	%xmm2, %xmm0
    00000200: 	paddd	%xmm3, %xmm0
    00000204: 	psubd	%xmm2, %xmm0
    00000208: 	movd	%xmm0, %r9d
    0000020d: 	pshufd	$0xe5, %xmm0, %xmm7
    00000212: 	movd	%xmm7, %r11d
    00000217: 	addl	%r11d, %r9d
    0000021a: 	addl	%r9d, %eax
    0000021d: 	movl	%ecx, %r9d
    00000220: 	andl	$-0x2, %r9d
    00000224: 	addl	%r9d, %edx
    00000227: 	cmpl	%ecx, %r9d
    0000022a: 	je	.Ltmp2057 # Offset: 554
.Ltmp2060:
    0000022c: 	movslq	%edx, %rdx
    0000022f: 	movl	(%rbx,%rdx,4), %r9d
    00000233: 	movl	-0x4(%rbx,%rdx,4), %ecx
    00000237: 	movl	%r9d, %edx
    0000023a: 	subl	%ecx, %edx
    0000023c: 	addl	%ebp, %edx
    0000023e: 	leal	(%rcx,%rdx,2), %ecx
    00000241: 	leal	(%r9,%rdx,2), %edx
    00000245: 	leal	(%rax,%rcx,2), %eax
    00000248: 	subl	%edx, %eax
    0000024a: 	subl	%edx, %eax
    0000024c: 	addl	%ecx, %eax
    0000024e: 	subl	%edx, %eax
    00000250: 	addl	%ecx, %eax
    00000252: 	subl	%edx, %eax
    00000254: 	addl	%ecx, %eax
    00000256: 	subl	%edx, %eax
    00000258: 	addl	%ecx, %eax
    0000025a: 	subl	%edx, %eax
    0000025c: 	addl	%ecx, %eax
    0000025e: 	subl	%edx, %eax
    00000260: 	addl	%ecx, %eax
    00000262: 	subl	%edx, %eax
.Ltmp2057:
    00000264: 	testl	%eax, %eax
    00000266: 	jne	.Ltmp2061 # Offset: 614
    0000026c: 	addl	$0x1, %r13d
    00000270: 	cmpl	%r10d, %r13d
    00000273: 	jl	.Ltmp2062 # Offset: 627
.Ltmp2056:
    00000279: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000280: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000287: 	subq	$0x20, %rax
    0000028b: 	cmpq	%rax, %rbx
    0000028e: 	je	.Ltmp2063 # Offset: 654
    00000294: 	movq	0x18(%rsp), %rax
    00000299: 	leaq	0x10(%rbx), %rdi
    0000029d: 	movq	%rdi, (%rbx)
    000002a0: 	movq	(%rax), %rbp
    000002a3: 	movq	0x8(%rax), %r12
    000002a7: 	movq	%rbp, %rax
    000002aa: 	addq	%r12, %rax
    000002ad: 	je	.Ltmp2064 # Offset: 685
    000002af: 	testq	%rbp, %rbp
    000002b2: 	je	.Ltmp2065 # Offset: 690
.Ltmp2064:
    000002b8: 	movq	%r12, 0x20(%rsp)
    000002bd: 	cmpq	$0xf, %r12
    000002c1: 	ja	.Ltmp2066 # Offset: 705
    000002c7: 	cmpq	$0x1, %r12
    000002cb: 	jne	.Ltmp2067 # Offset: 715
    000002d1: 	movzbl	(%rbp), %eax
    000002d5: 	movb	%al, 0x10(%rbx)
.Ltmp2071:
    000002d8: 	movq	%r12, 0x8(%rbx)
    000002dc: 	movb	$0x0, (%rdi,%r12)
    000002e1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002e8: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002ef: 	addq	$0x20, %rax
    000002f3: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002fa: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000301: 	je	.Ltmp2068 # Offset: 769
.Ltmp2072:
    00000307: 	movq	-0x20(%rax), %rbp
    0000030b: 	callq	clock@PLT # Offset: 779
    00000310: 	movq	%rax, end_time(%rip)
    00000317: 	movq	0x28(%rsp), %rdx
    0000031c: 	subq	%fs:0x28, %rdx
    00000325: 	jne	.Ltmp2069 # Offset: 805
    0000032b: 	subq	start_time(%rip), %rax
    00000332: 	pxor	%xmm0, %xmm0
    00000336: 	movq	%rbp, %rdi
    00000339: 	cvtsi2sd	%rax, %xmm0
    0000033e: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000346: 	addq	$0x38, %rsp
    0000034a: 	popq	%rbx
    0000034b: 	popq	%rbp
    0000034c: 	popq	%r12
    0000034e: 	popq	%r13
    00000350: 	popq	%r14
    00000352: 	popq	%r15
    00000354: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 852
    00000359: 	nopl	(%rax) # Size: 7
.Ltmp2061:
    00000360: 	movq	0x18(%rsp), %rax
    00000365: 	leaq	DATAat0x4d004(%rip), %rsi
    0000036c: 	movl	$0x1, %edi
    00000371: 	movl	%r8d, 0x14(%rsp)
    00000376: 	addl	$0x1, %r13d
    0000037a: 	movq	(%rax), %rdx
    0000037d: 	xorl	%eax, %eax
    0000037f: 	callq	__printf_chk@PLT # Offset: 895
    00000384: 	movl	iterations(%rip), %r10d
    0000038b: 	cmpl	%r10d, %r13d
    0000038e: 	jge	.Ltmp2056 # Offset: 910
    00000394: 	movl	(%rbx), %edi
    00000396: 	movl	0x4(%rbx), %esi
    00000399: 	movl	0x14(%rsp), %r8d
    0000039e: 	jmp	.Ltmp2062 # Offset: 926
.Ltmp2058:
    000003a3: 	xorl	%r9d, %r9d
    000003a6: 	movl	$0x1, %edx
    000003ab: 	jmp	.Ltmp2070 # Offset: 939
.Ltmp2066:
    000003b0: 	movq	%rbx, %rdi
    000003b3: 	leaq	0x20(%rsp), %rsi
    000003b8: 	xorl	%edx, %edx
    000003ba: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 954
    000003bf: 	movq	%rax, (%rbx)
    000003c2: 	movq	%rax, %rdi
    000003c5: 	movq	0x20(%rsp), %rax
    000003ca: 	movq	%rax, 0x10(%rbx)
.Ltmp2073:
    000003ce: 	movq	%r12, %rdx
    000003d1: 	movq	%rbp, %rsi
    000003d4: 	callq	memcpy@PLT # Offset: 980
    000003d9: 	movq	0x20(%rsp), %r12
    000003de: 	movq	(%rbx), %rdi
    000003e1: 	jmp	.Ltmp2071 # Offset: 993
.Ltmp2063:
    000003e6: 	movq	0x18(%rsp), %rsi
    000003eb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000003f2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1010
    000003f7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000003fe: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000405: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000040c: 	jne	.Ltmp2072 # Offset: 1036
.Ltmp2068:
    00000412: 	movq	-0x8(%rdx), %rax
    00000416: 	addq	$0x200, %rax
    0000041c: 	jmp	.Ltmp2072 # Offset: 1052
.Ltmp2067:
    00000421: 	testq	%r12, %r12
    00000424: 	je	.Ltmp2071 # Offset: 1060
    0000042a: 	jmp	.Ltmp2073 # Offset: 1066
.Ltmp2069:
    0000042c: 	callq	__stack_chk_fail@PLT # Offset: 1068
.Ltmp2065:
    00000431: 	leaq	DATAat0x4d018(%rip), %rdi
    00000438: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1080
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSENIi14custom_cse_subIiELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSENIi14custom_cse_addIiELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 162
  State       : disassembled
  Address     : 0x20660
  Size        : 0x435
  MaxSize     : 0x440
  Offset      : 0x20660
  Section     : .text
  Orc Section : .local.text._Z9test_CSENIi14custom_cse_addIiELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0161:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdi, %rbx
    00000016: 	subq	$0x38, %rsp
    0000001a: 	movq	%rcx, 0x18(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x28(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r10d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r10d, %r10d
    00000045: 	jle	.Ltmp2074 # Offset: 69
    0000004b: 	leal	-0x1(%r14), %r8d
    0000004f: 	leal	-0x2(%r14), %eax
    00000053: 	movl	(%rbx), %edi
    00000055: 	movl	0x4(%rbx), %esi
    00000058: 	movl	%eax, 0xc(%rsp)
    0000005c: 	movl	%r8d, %eax
    0000005f: 	movl	%r8d, %r15d
    00000062: 	xorl	%r13d, %r13d
    00000065: 	shrl	$0x2, %eax
    00000068: 	andl	$-0x4, %r15d
    0000006c: 	subl	$0x1, %eax
    0000006f: 	shlq	$0x4, %rax
    00000073: 	leaq	0x10(%rbx,%rax), %r12
    00000078: 	leal	0x1(%r15), %eax
    0000007c: 	movl	%eax, 0x10(%rsp)
.Ltmp2080:
    00000080: 	leal	(%rdi,%rsi), %eax
    00000083: 	addl	%ebp, %eax
    00000085: 	leal	(%rdi,%rax,2), %ecx
    00000088: 	leal	(%rsi,%rax,2), %edx
    0000008b: 	movl	%edi, %eax
    0000008d: 	subl	%esi, %eax
    0000008f: 	addl	%ecx, %eax
    00000091: 	subl	%edx, %eax
    00000093: 	addl	%ecx, %eax
    00000095: 	subl	%edx, %eax
    00000097: 	addl	%ecx, %eax
    00000099: 	subl	%edx, %eax
    0000009b: 	addl	%ecx, %eax
    0000009d: 	subl	%edx, %eax
    0000009f: 	addl	%ecx, %eax
    000000a1: 	subl	%edx, %eax
    000000a3: 	addl	%ecx, %eax
    000000a5: 	subl	%edx, %eax
    000000a7: 	addl	%ecx, %eax
    000000a9: 	subl	%edx, %eax
    000000ab: 	cmpl	$0x1, %r14d
    000000af: 	jle	.Ltmp2075 # Offset: 175
    000000b5: 	cmpl	$0x2, 0xc(%rsp)
    000000ba: 	jbe	.Ltmp2076 # Offset: 186
    000000c0: 	movd	%ebp, %xmm5
    000000c4: 	movq	%rbx, %rdx
    000000c7: 	pxor	%xmm0, %xmm0
    000000cb: 	pshufd	$0x0, %xmm5, %xmm2
.Ltmp2077:
    000000d0: 	movdqu	(%rdx), %xmm6
    000000d4: 	movdqu	0x4(%rdx), %xmm4
    000000d9: 	addq	$0x10, %rdx
    000000dd: 	movdqu	-0xc(%rdx), %xmm1
    000000e2: 	paddd	%xmm6, %xmm4
    000000e6: 	movdqa	%xmm6, %xmm3
    000000ea: 	paddd	%xmm2, %xmm4
    000000ee: 	paddd	%xmm4, %xmm3
    000000f2: 	paddd	%xmm4, %xmm1
    000000f6: 	paddd	%xmm4, %xmm3
    000000fa: 	paddd	%xmm4, %xmm1
    000000fe: 	paddd	%xmm3, %xmm0
    00000102: 	psubd	%xmm1, %xmm0
    00000106: 	paddd	%xmm3, %xmm0
    0000010a: 	psubd	%xmm1, %xmm0
    0000010e: 	paddd	%xmm3, %xmm0
    00000112: 	psubd	%xmm1, %xmm0
    00000116: 	paddd	%xmm3, %xmm0
    0000011a: 	psubd	%xmm1, %xmm0
    0000011e: 	paddd	%xmm3, %xmm0
    00000122: 	psubd	%xmm1, %xmm0
    00000126: 	paddd	%xmm3, %xmm0
    0000012a: 	psubd	%xmm1, %xmm0
    0000012e: 	paddd	%xmm3, %xmm0
    00000132: 	psubd	%xmm1, %xmm0
    00000136: 	paddd	%xmm3, %xmm0
    0000013a: 	psubd	%xmm1, %xmm0
    0000013e: 	cmpq	%rdx, %r12
    00000141: 	jne	.Ltmp2077 # Offset: 321
    00000143: 	movdqa	%xmm0, %xmm1
    00000147: 	psrldq	$0x8, %xmm1
    0000014c: 	paddd	%xmm1, %xmm0
    00000150: 	movdqa	%xmm0, %xmm1
    00000154: 	psrldq	$0x4, %xmm1
    00000159: 	paddd	%xmm1, %xmm0
    0000015d: 	movd	%xmm0, %edx
    00000161: 	addl	%edx, %eax
    00000163: 	cmpl	%r8d, %r15d
    00000166: 	je	.Ltmp2075 # Offset: 358
    0000016c: 	movl	0x10(%rsp), %edx
    00000170: 	movl	%r15d, %r9d
.Ltmp2088:
    00000173: 	movl	%r14d, %r11d
    00000176: 	subl	%r9d, %r11d
    00000179: 	leal	-0x1(%r11), %ecx
    0000017d: 	cmpl	$0x2, %r11d
    00000181: 	je	.Ltmp2078 # Offset: 385
    00000187: 	movq	0x4(%rbx,%r9,4), %xmm5
    0000018e: 	movq	(%rbx,%r9,4), %xmm1
    00000194: 	movd	%ebp, %xmm7
    00000198: 	pshufd	$0xe0, %xmm7, %xmm0
    0000019d: 	movdqa	%xmm5, %xmm4
    000001a1: 	paddd	%xmm1, %xmm4
    000001a5: 	paddd	%xmm0, %xmm4
    000001a9: 	movdqa	%xmm4, %xmm3
    000001ad: 	movdqa	%xmm4, %xmm2
    000001b1: 	paddd	%xmm1, %xmm3
    000001b5: 	psubd	%xmm5, %xmm1
    000001b9: 	paddd	%xmm5, %xmm2
    000001bd: 	paddd	%xmm4, %xmm3
    000001c1: 	movdqa	%xmm1, %xmm0
    000001c5: 	paddd	%xmm4, %xmm2
    000001c9: 	paddd	%xmm3, %xmm0
    000001cd: 	psubd	%xmm2, %xmm0
    000001d1: 	paddd	%xmm3, %xmm0
    000001d5: 	psubd	%xmm2, %xmm0
    000001d9: 	paddd	%xmm3, %xmm0
    000001dd: 	psubd	%xmm2, %xmm0
    000001e1: 	paddd	%xmm3, %xmm0
    000001e5: 	psubd	%xmm2, %xmm0
    000001e9: 	paddd	%xmm3, %xmm0
    000001ed: 	psubd	%xmm2, %xmm0
    000001f1: 	paddd	%xmm3, %xmm0
    000001f5: 	psubd	%xmm2, %xmm0
    000001f9: 	paddd	%xmm3, %xmm0
    000001fd: 	psubd	%xmm2, %xmm0
    00000201: 	movd	%xmm0, %r9d
    00000206: 	pshufd	$0xe5, %xmm0, %xmm7
    0000020b: 	movd	%xmm7, %r11d
    00000210: 	addl	%r11d, %r9d
    00000213: 	addl	%r9d, %eax
    00000216: 	movl	%ecx, %r9d
    00000219: 	andl	$-0x2, %r9d
    0000021d: 	addl	%r9d, %edx
    00000220: 	cmpl	%ecx, %r9d
    00000223: 	je	.Ltmp2075 # Offset: 547
.Ltmp2078:
    00000225: 	movslq	%edx, %rdx
    00000228: 	movl	-0x4(%rbx,%rdx,4), %ecx
    0000022c: 	movl	(%rbx,%rdx,4), %r9d
    00000230: 	leal	(%r9,%rcx), %edx
    00000234: 	addl	%ebp, %edx
    00000236: 	leal	(%rcx,%rdx,2), %ecx
    00000239: 	leal	(%r9,%rdx,2), %edx
    0000023d: 	leal	(%rax,%rcx,2), %eax
    00000240: 	subl	%edx, %eax
    00000242: 	subl	%edx, %eax
    00000244: 	addl	%ecx, %eax
    00000246: 	subl	%edx, %eax
    00000248: 	addl	%ecx, %eax
    0000024a: 	subl	%edx, %eax
    0000024c: 	addl	%ecx, %eax
    0000024e: 	subl	%edx, %eax
    00000250: 	addl	%ecx, %eax
    00000252: 	subl	%edx, %eax
    00000254: 	addl	%ecx, %eax
    00000256: 	subl	%edx, %eax
    00000258: 	addl	%ecx, %eax
    0000025a: 	subl	%edx, %eax
.Ltmp2075:
    0000025c: 	testl	%eax, %eax
    0000025e: 	jne	.Ltmp2079 # Offset: 606
    00000264: 	addl	$0x1, %r13d
    00000268: 	cmpl	%r10d, %r13d
    0000026b: 	jl	.Ltmp2080 # Offset: 619
.Ltmp2074:
    00000271: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000278: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000027f: 	subq	$0x20, %rax
    00000283: 	cmpq	%rax, %rbx
    00000286: 	je	.Ltmp2081 # Offset: 646
    0000028c: 	movq	0x18(%rsp), %rax
    00000291: 	leaq	0x10(%rbx), %rdi
    00000295: 	movq	%rdi, (%rbx)
    00000298: 	movq	(%rax), %rbp
    0000029b: 	movq	0x8(%rax), %r12
    0000029f: 	movq	%rbp, %rax
    000002a2: 	addq	%r12, %rax
    000002a5: 	je	.Ltmp2082 # Offset: 677
    000002a7: 	testq	%rbp, %rbp
    000002aa: 	je	.Ltmp2083 # Offset: 682
.Ltmp2082:
    000002b0: 	movq	%r12, 0x20(%rsp)
    000002b5: 	cmpq	$0xf, %r12
    000002b9: 	ja	.Ltmp2084 # Offset: 697
    000002bf: 	cmpq	$0x1, %r12
    000002c3: 	jne	.Ltmp2085 # Offset: 707
    000002c9: 	movzbl	(%rbp), %eax
    000002cd: 	movb	%al, 0x10(%rbx)
.Ltmp2089:
    000002d0: 	movq	%r12, 0x8(%rbx)
    000002d4: 	movb	$0x0, (%rdi,%r12)
    000002d9: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002e0: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002e7: 	addq	$0x20, %rax
    000002eb: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002f2: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000002f9: 	je	.Ltmp2086 # Offset: 761
.Ltmp2090:
    000002ff: 	movq	-0x20(%rax), %rbp
    00000303: 	callq	clock@PLT # Offset: 771
    00000308: 	movq	%rax, end_time(%rip)
    0000030f: 	movq	0x28(%rsp), %rdx
    00000314: 	subq	%fs:0x28, %rdx
    0000031d: 	jne	.Ltmp2087 # Offset: 797
    00000323: 	subq	start_time(%rip), %rax
    0000032a: 	pxor	%xmm0, %xmm0
    0000032e: 	movq	%rbp, %rdi
    00000331: 	cvtsi2sd	%rax, %xmm0
    00000336: 	divsd	DATAat0x4d640(%rip), %xmm0
    0000033e: 	addq	$0x38, %rsp
    00000342: 	popq	%rbx
    00000343: 	popq	%rbp
    00000344: 	popq	%r12
    00000346: 	popq	%r13
    00000348: 	popq	%r14
    0000034a: 	popq	%r15
    0000034c: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 844
    00000351: 	nopl	(%rax) # Size: 7
.Ltmp2079:
    00000358: 	movq	0x18(%rsp), %rax
    0000035d: 	leaq	DATAat0x4d004(%rip), %rsi
    00000364: 	movl	$0x1, %edi
    00000369: 	movl	%r8d, 0x14(%rsp)
    0000036e: 	addl	$0x1, %r13d
    00000372: 	movq	(%rax), %rdx
    00000375: 	xorl	%eax, %eax
    00000377: 	callq	__printf_chk@PLT # Offset: 887
    0000037c: 	movl	iterations(%rip), %r10d
    00000383: 	cmpl	%r10d, %r13d
    00000386: 	jge	.Ltmp2074 # Offset: 902
    0000038c: 	movl	(%rbx), %edi
    0000038e: 	movl	0x4(%rbx), %esi
    00000391: 	movl	0x14(%rsp), %r8d
    00000396: 	jmp	.Ltmp2080 # Offset: 918
.Ltmp2076:
    0000039b: 	xorl	%r9d, %r9d
    0000039e: 	movl	$0x1, %edx
    000003a3: 	jmp	.Ltmp2088 # Offset: 931
.Ltmp2084:
    000003a8: 	movq	%rbx, %rdi
    000003ab: 	leaq	0x20(%rsp), %rsi
    000003b0: 	xorl	%edx, %edx
    000003b2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 946
    000003b7: 	movq	%rax, (%rbx)
    000003ba: 	movq	%rax, %rdi
    000003bd: 	movq	0x20(%rsp), %rax
    000003c2: 	movq	%rax, 0x10(%rbx)
.Ltmp2091:
    000003c6: 	movq	%r12, %rdx
    000003c9: 	movq	%rbp, %rsi
    000003cc: 	callq	memcpy@PLT # Offset: 972
    000003d1: 	movq	0x20(%rsp), %r12
    000003d6: 	movq	(%rbx), %rdi
    000003d9: 	jmp	.Ltmp2089 # Offset: 985
.Ltmp2081:
    000003de: 	movq	0x18(%rsp), %rsi
    000003e3: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000003ea: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1002
    000003ef: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000003f6: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000003fd: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000404: 	jne	.Ltmp2090 # Offset: 1028
.Ltmp2086:
    0000040a: 	movq	-0x8(%rdx), %rax
    0000040e: 	addq	$0x200, %rax
    00000414: 	jmp	.Ltmp2090 # Offset: 1044
.Ltmp2085:
    00000419: 	testq	%r12, %r12
    0000041c: 	je	.Ltmp2089 # Offset: 1052
    00000422: 	jmp	.Ltmp2091 # Offset: 1058
.Ltmp2087:
    00000424: 	callq	__stack_chk_fail@PLT # Offset: 1060
.Ltmp2083:
    00000429: 	leaq	DATAat0x4d018(%rip), %rdi
    00000430: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1072
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSENIi14custom_cse_addIiELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSENIj14custom_cse_divIjELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 163
  State       : disassembled
  Address     : 0x20aa0
  Size        : 0x277
  MaxSize     : 0x280
  Offset      : 0x20aa0
  Section     : .text
  Orc Section : .local.text._Z9test_CSENIj14custom_cse_divIjELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0162:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rcx, %rbp
    00000016: 	pushq	%rbx
    00000017: 	movl	%edx, %ebx
    00000019: 	subq	$0x18, %rsp
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x8(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	callq	clock@PLT # Offset: 45
    00000032: 	movl	iterations(%rip), %r11d
    00000039: 	movq	%rax, start_time(%rip)
    00000040: 	testl	%r11d, %r11d
    00000043: 	jle	.Ltmp2092 # Offset: 67
    00000049: 	leal	-0x2(%r14), %eax
    0000004d: 	xorl	%r15d, %r15d
    00000050: 	leaq	0x8(%r13,%rax,4), %r12
.Ltmp2104:
    00000055: 	movl	(%r13), %r9d
    00000059: 	movl	0x4(%r13), %r10d
.Ltmp2096:
    0000005d: 	movl	%r10d, %eax
    00000060: 	xorl	%edx, %edx
    00000062: 	movl	%r9d, %ecx
    00000065: 	divl	%r9d
    00000068: 	addl	%ebx, %eax
    0000006a: 	addl	%eax, %eax
    0000006c: 	leal	(%r9,%rax), %esi
    00000070: 	leal	(%r10,%rax), %edx
    00000074: 	shll	$0x3, %esi
    00000077: 	subl	%edx, %esi
    00000079: 	subl	%edx, %esi
    0000007b: 	subl	%edx, %esi
    0000007d: 	subl	%edx, %esi
    0000007f: 	subl	%edx, %esi
    00000081: 	subl	%edx, %esi
    00000083: 	addl	%edx, %edx
    00000085: 	subl	%edx, %esi
    00000087: 	cmpl	$0x1, %r14d
    0000008b: 	jle	.Ltmp2093 # Offset: 139
    0000008d: 	leaq	0x4(%r13), %rdi
    00000091: 	nopl	(%rax) # Size: 7
.Ltmp2094:
    00000098: 	movl	%ecx, %r8d
    0000009b: 	movl	(%rdi), %ecx
    0000009d: 	xorl	%edx, %edx
    0000009f: 	addq	$0x4, %rdi
    000000a3: 	movl	%ecx, %eax
    000000a5: 	divl	%r8d
    000000a8: 	addl	%ebx, %eax
    000000aa: 	addl	%eax, %eax
    000000ac: 	leal	(%rax,%rcx), %edx
    000000af: 	addl	%r8d, %eax
    000000b2: 	shll	$0x3, %eax
    000000b5: 	subl	%edx, %eax
    000000b7: 	subl	%edx, %eax
    000000b9: 	subl	%edx, %eax
    000000bb: 	subl	%edx, %eax
    000000bd: 	subl	%edx, %eax
    000000bf: 	subl	%edx, %eax
    000000c1: 	addl	%edx, %edx
    000000c3: 	subl	%edx, %eax
    000000c5: 	addl	%eax, %esi
    000000c7: 	cmpq	%rdi, %r12
    000000ca: 	jne	.Ltmp2094 # Offset: 202
.Ltmp2093:
    000000cc: 	testl	%esi, %esi
    000000ce: 	jne	.Ltmp2095 # Offset: 206
    000000d4: 	addl	$0x1, %r15d
    000000d8: 	cmpl	%r11d, %r15d
    000000db: 	jl	.Ltmp2096 # Offset: 219
.Ltmp2092:
    000000dd: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000e4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000eb: 	subq	$0x20, %rax
    000000ef: 	cmpq	%rax, %rbx
    000000f2: 	je	.Ltmp2097 # Offset: 242
    000000f8: 	leaq	0x10(%rbx), %rdi
    000000fc: 	movq	0x8(%rbp), %r12
    00000100: 	movq	%rdi, (%rbx)
    00000103: 	movq	(%rbp), %r13
    00000107: 	movq	%r13, %rax
    0000010a: 	addq	%r12, %rax
    0000010d: 	je	.Ltmp2098 # Offset: 269
    0000010f: 	testq	%r13, %r13
    00000112: 	je	.Ltmp2099 # Offset: 274
.Ltmp2098:
    00000118: 	movq	%r12, (%rsp)
    0000011c: 	cmpq	$0xf, %r12
    00000120: 	ja	.Ltmp2100 # Offset: 288
    00000126: 	cmpq	$0x1, %r12
    0000012a: 	jne	.Ltmp2101 # Offset: 298
    00000130: 	movzbl	(%r13), %eax
    00000135: 	movb	%al, 0x10(%rbx)
.Ltmp2105:
    00000138: 	movq	%r12, 0x8(%rbx)
    0000013c: 	movb	$0x0, (%rdi,%r12)
    00000141: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000148: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000014f: 	addq	$0x20, %rax
    00000153: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000015a: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000161: 	je	.Ltmp2102 # Offset: 353
.Ltmp2106:
    00000167: 	movq	-0x20(%rax), %rbp
    0000016b: 	callq	clock@PLT # Offset: 363
    00000170: 	movq	%rax, end_time(%rip)
    00000177: 	movq	0x8(%rsp), %rdx
    0000017c: 	subq	%fs:0x28, %rdx
    00000185: 	jne	.Ltmp2103 # Offset: 389
    0000018b: 	subq	start_time(%rip), %rax
    00000192: 	pxor	%xmm0, %xmm0
    00000196: 	movq	%rbp, %rdi
    00000199: 	cvtsi2sd	%rax, %xmm0
    0000019e: 	divsd	DATAat0x4d640(%rip), %xmm0
    000001a6: 	addq	$0x18, %rsp
    000001aa: 	popq	%rbx
    000001ab: 	popq	%rbp
    000001ac: 	popq	%r12
    000001ae: 	popq	%r13
    000001b0: 	popq	%r14
    000001b2: 	popq	%r15
    000001b4: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 436
    000001b9: 	nopl	(%rax) # Size: 7
.Ltmp2095:
    000001c0: 	movq	(%rbp), %rdx
    000001c4: 	movl	$0x1, %edi
    000001c9: 	xorl	%eax, %eax
    000001cb: 	addl	$0x1, %r15d
    000001cf: 	leaq	DATAat0x4d004(%rip), %rsi
    000001d6: 	callq	__printf_chk@PLT # Offset: 470
    000001db: 	movl	iterations(%rip), %r11d
    000001e2: 	cmpl	%r11d, %r15d
    000001e5: 	jl	.Ltmp2104 # Offset: 485
    000001eb: 	jmp	.Ltmp2092 # Offset: 491
.Ltmp2100:
    000001f0: 	movq	%rbx, %rdi
    000001f3: 	movq	%rsp, %rsi
    000001f6: 	xorl	%edx, %edx
    000001f8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 504
    000001fd: 	movq	%rax, (%rbx)
    00000200: 	movq	%rax, %rdi
    00000203: 	movq	(%rsp), %rax
    00000207: 	movq	%rax, 0x10(%rbx)
.Ltmp2107:
    0000020b: 	movq	%r12, %rdx
    0000020e: 	movq	%r13, %rsi
    00000211: 	callq	memcpy@PLT # Offset: 529
    00000216: 	movq	(%rsp), %r12
    0000021a: 	movq	(%rbx), %rdi
    0000021d: 	jmp	.Ltmp2105 # Offset: 541
.Ltmp2097:
    00000222: 	movq	%rbp, %rsi
    00000225: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000022c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 556
    00000231: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000238: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000023f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000246: 	jne	.Ltmp2106 # Offset: 582
.Ltmp2102:
    0000024c: 	movq	-0x8(%rdx), %rax
    00000250: 	addq	$0x200, %rax
    00000256: 	jmp	.Ltmp2106 # Offset: 598
.Ltmp2101:
    0000025b: 	testq	%r12, %r12
    0000025e: 	je	.Ltmp2105 # Offset: 606
    00000264: 	jmp	.Ltmp2107 # Offset: 612
.Ltmp2103:
    00000266: 	callq	__stack_chk_fail@PLT # Offset: 614
.Ltmp2099:
    0000026b: 	leaq	DATAat0x4d018(%rip), %rdi
    00000272: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 626
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSENIj14custom_cse_divIjELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSENIj14custom_cse_addIjELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 164
  State       : disassembled
  Address     : 0x20d20
  Size        : 0x3d5
  MaxSize     : 0x3e0
  Offset      : 0x20d20
  Section     : .text
  Orc Section : .local.text._Z9test_CSENIj14custom_cse_addIjELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0163:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdi, %rbx
    00000016: 	subq	$0x38, %rsp
    0000001a: 	movq	%rcx, 0x18(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x28(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r10d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r10d, %r10d
    00000045: 	jle	.Ltmp2108 # Offset: 69
    0000004b: 	leal	-0x1(%r14), %r8d
    0000004f: 	leal	-0x2(%r14), %eax
    00000053: 	movl	(%rbx), %r9d
    00000056: 	movl	0x4(%rbx), %edi
    00000059: 	movl	%eax, 0xc(%rsp)
    0000005d: 	movl	%r8d, %eax
    00000060: 	movl	%r8d, %r15d
    00000063: 	xorl	%r13d, %r13d
    00000066: 	shrl	$0x2, %eax
    00000069: 	andl	$-0x4, %r15d
    0000006d: 	subl	$0x1, %eax
    00000070: 	shlq	$0x4, %rax
    00000074: 	leaq	0x10(%rbx,%rax), %r12
    00000079: 	leal	0x1(%r15), %eax
    0000007d: 	movl	%eax, 0x10(%rsp)
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp2114:
    00000088: 	leal	(%r9,%rdi), %eax
    0000008c: 	addl	%ebp, %eax
    0000008e: 	addl	%eax, %eax
    00000090: 	leal	(%rdi,%rax), %edx
    00000093: 	addl	%r9d, %eax
    00000096: 	shll	$0x3, %eax
    00000099: 	subl	%edx, %eax
    0000009b: 	subl	%edx, %eax
    0000009d: 	subl	%edx, %eax
    0000009f: 	subl	%edx, %eax
    000000a1: 	subl	%edx, %eax
    000000a3: 	subl	%edx, %eax
    000000a5: 	addl	%edx, %edx
    000000a7: 	subl	%edx, %eax
    000000a9: 	cmpl	$0x1, %r14d
    000000ad: 	jle	.Ltmp2109 # Offset: 173
    000000b3: 	cmpl	$0x2, 0xc(%rsp)
    000000b8: 	jbe	.Ltmp2110 # Offset: 184
    000000be: 	movd	%ebp, %xmm7
    000000c2: 	movq	%rbx, %rdx
    000000c5: 	pxor	%xmm2, %xmm2
    000000c9: 	pshufd	$0x0, %xmm7, %xmm4
    000000ce: 	nop # Size: 2
.Ltmp2111:
    000000d0: 	movdqu	(%rdx), %xmm5
    000000d4: 	movdqu	0x4(%rdx), %xmm0
    000000d9: 	addq	$0x10, %rdx
    000000dd: 	movdqu	-0xc(%rdx), %xmm1
    000000e2: 	paddd	%xmm5, %xmm0
    000000e6: 	paddd	%xmm4, %xmm0
    000000ea: 	pslld	$0x1, %xmm0
    000000ef: 	paddd	%xmm0, %xmm1
    000000f3: 	paddd	%xmm5, %xmm0
    000000f7: 	movdqa	%xmm1, %xmm3
    000000fb: 	pslld	$0x3, %xmm0
    00000100: 	paddd	%xmm1, %xmm3
    00000104: 	psubd	%xmm1, %xmm0
    00000108: 	psubd	%xmm3, %xmm0
    0000010c: 	paddd	%xmm1, %xmm3
    00000110: 	pslld	$0x1, %xmm1
    00000115: 	psubd	%xmm3, %xmm0
    00000119: 	psubd	%xmm1, %xmm2
    0000011d: 	paddd	%xmm0, %xmm2
    00000121: 	cmpq	%rdx, %r12
    00000124: 	jne	.Ltmp2111 # Offset: 292
    00000126: 	movdqa	%xmm2, %xmm0
    0000012a: 	psrldq	$0x8, %xmm0
    0000012f: 	paddd	%xmm0, %xmm2
    00000133: 	movdqa	%xmm2, %xmm0
    00000137: 	psrldq	$0x4, %xmm0
    0000013c: 	paddd	%xmm0, %xmm2
    00000140: 	movd	%xmm2, %edx
    00000144: 	addl	%edx, %eax
    00000146: 	cmpl	%r8d, %r15d
    00000149: 	je	.Ltmp2109 # Offset: 329
    0000014f: 	movl	0x10(%rsp), %edx
    00000153: 	movl	%r15d, %esi
.Ltmp2122:
    00000156: 	movl	%r14d, %r11d
    00000159: 	subl	%esi, %r11d
    0000015c: 	leal	-0x1(%r11), %ecx
    00000160: 	cmpl	$0x2, %r11d
    00000164: 	je	.Ltmp2112 # Offset: 356
    00000166: 	movq	(%rbx,%rsi,4), %xmm0
    0000016b: 	movd	%ebp, %xmm7
    0000016f: 	movq	0x4(%rbx,%rsi,4), %xmm1
    00000175: 	pshufd	$0xe0, %xmm7, %xmm2
    0000017a: 	paddd	%xmm0, %xmm2
    0000017e: 	paddd	%xmm1, %xmm2
    00000182: 	pslld	$0x1, %xmm2
    00000187: 	paddd	%xmm2, %xmm1
    0000018b: 	paddd	%xmm2, %xmm0
    0000018f: 	movdqa	%xmm1, %xmm3
    00000193: 	pslld	$0x3, %xmm0
    00000198: 	movdqa	%xmm1, %xmm2
    0000019c: 	paddd	%xmm1, %xmm3
    000001a0: 	psubd	%xmm1, %xmm0
    000001a4: 	pslld	$0x1, %xmm2
    000001a9: 	paddd	%xmm2, %xmm1
    000001ad: 	psubd	%xmm3, %xmm0
    000001b1: 	psubd	%xmm3, %xmm0
    000001b5: 	psubd	%xmm1, %xmm0
    000001b9: 	movd	%xmm0, %r11d
    000001be: 	pshufd	$0xe5, %xmm0, %xmm7
    000001c3: 	movd	%xmm7, %esi
    000001c7: 	addl	%r11d, %esi
    000001ca: 	addl	%esi, %eax
    000001cc: 	movl	%ecx, %esi
    000001ce: 	andl	$-0x2, %esi
    000001d1: 	addl	%esi, %edx
    000001d3: 	cmpl	%ecx, %esi
    000001d5: 	je	.Ltmp2109 # Offset: 469
.Ltmp2112:
    000001d7: 	movslq	%edx, %rdx
    000001da: 	movl	-0x4(%rbx,%rdx,4), %esi
    000001de: 	movl	(%rbx,%rdx,4), %edx
    000001e1: 	leal	(%rbp,%rdx), %ecx
    000001e5: 	addl	%esi, %ecx
    000001e7: 	addl	%ecx, %ecx
    000001e9: 	addl	%ecx, %edx
    000001eb: 	addl	%esi, %ecx
    000001ed: 	leal	(%rax,%rcx,8), %eax
    000001f0: 	subl	%edx, %eax
    000001f2: 	subl	%edx, %eax
    000001f4: 	subl	%edx, %eax
    000001f6: 	subl	%edx, %eax
    000001f8: 	subl	%edx, %eax
    000001fa: 	subl	%edx, %eax
    000001fc: 	addl	%edx, %edx
    000001fe: 	subl	%edx, %eax
.Ltmp2109:
    00000200: 	testl	%eax, %eax
    00000202: 	jne	.Ltmp2113 # Offset: 514
    00000208: 	addl	$0x1, %r13d
    0000020c: 	cmpl	%r10d, %r13d
    0000020f: 	jl	.Ltmp2114 # Offset: 527
.Ltmp2108:
    00000215: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000021c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000223: 	subq	$0x20, %rax
    00000227: 	cmpq	%rax, %rbx
    0000022a: 	je	.Ltmp2115 # Offset: 554
    00000230: 	movq	0x18(%rsp), %rax
    00000235: 	leaq	0x10(%rbx), %rdi
    00000239: 	movq	%rdi, (%rbx)
    0000023c: 	movq	(%rax), %rbp
    0000023f: 	movq	0x8(%rax), %r12
    00000243: 	movq	%rbp, %rax
    00000246: 	addq	%r12, %rax
    00000249: 	je	.Ltmp2116 # Offset: 585
    0000024b: 	testq	%rbp, %rbp
    0000024e: 	je	.Ltmp2117 # Offset: 590
.Ltmp2116:
    00000254: 	movq	%r12, 0x20(%rsp)
    00000259: 	cmpq	$0xf, %r12
    0000025d: 	ja	.Ltmp2118 # Offset: 605
    00000263: 	cmpq	$0x1, %r12
    00000267: 	jne	.Ltmp2119 # Offset: 615
    0000026d: 	movzbl	(%rbp), %eax
    00000271: 	movb	%al, 0x10(%rbx)
.Ltmp2123:
    00000274: 	movq	%r12, 0x8(%rbx)
    00000278: 	movb	$0x0, (%rdi,%r12)
    0000027d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000284: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000028b: 	addq	$0x20, %rax
    0000028f: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000296: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000029d: 	je	.Ltmp2120 # Offset: 669
.Ltmp2124:
    000002a3: 	movq	-0x20(%rax), %rbp
    000002a7: 	callq	clock@PLT # Offset: 679
    000002ac: 	movq	%rax, end_time(%rip)
    000002b3: 	movq	0x28(%rsp), %rdx
    000002b8: 	subq	%fs:0x28, %rdx
    000002c1: 	jne	.Ltmp2121 # Offset: 705
    000002c7: 	subq	start_time(%rip), %rax
    000002ce: 	pxor	%xmm0, %xmm0
    000002d2: 	movq	%rbp, %rdi
    000002d5: 	cvtsi2sd	%rax, %xmm0
    000002da: 	divsd	DATAat0x4d640(%rip), %xmm0
    000002e2: 	addq	$0x38, %rsp
    000002e6: 	popq	%rbx
    000002e7: 	popq	%rbp
    000002e8: 	popq	%r12
    000002ea: 	popq	%r13
    000002ec: 	popq	%r14
    000002ee: 	popq	%r15
    000002f0: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 752
    000002f5: 	nopl	(%rax) # Size: 3
.Ltmp2113:
    000002f8: 	movq	0x18(%rsp), %rax
    000002fd: 	leaq	DATAat0x4d004(%rip), %rsi
    00000304: 	movl	$0x1, %edi
    00000309: 	movl	%r8d, 0x14(%rsp)
    0000030e: 	addl	$0x1, %r13d
    00000312: 	movq	(%rax), %rdx
    00000315: 	xorl	%eax, %eax
    00000317: 	callq	__printf_chk@PLT # Offset: 791
    0000031c: 	movl	iterations(%rip), %r10d
    00000323: 	cmpl	%r10d, %r13d
    00000326: 	jge	.Ltmp2108 # Offset: 806
    0000032c: 	movl	(%rbx), %r9d
    0000032f: 	movl	0x4(%rbx), %edi
    00000332: 	movl	0x14(%rsp), %r8d
    00000337: 	jmp	.Ltmp2114 # Offset: 823
.Ltmp2110:
    0000033c: 	xorl	%esi, %esi
    0000033e: 	movl	$0x1, %edx
    00000343: 	jmp	.Ltmp2122 # Offset: 835
.Ltmp2118:
    00000348: 	movq	%rbx, %rdi
    0000034b: 	leaq	0x20(%rsp), %rsi
    00000350: 	xorl	%edx, %edx
    00000352: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 850
    00000357: 	movq	%rax, (%rbx)
    0000035a: 	movq	%rax, %rdi
    0000035d: 	movq	0x20(%rsp), %rax
    00000362: 	movq	%rax, 0x10(%rbx)
.Ltmp2125:
    00000366: 	movq	%r12, %rdx
    00000369: 	movq	%rbp, %rsi
    0000036c: 	callq	memcpy@PLT # Offset: 876
    00000371: 	movq	0x20(%rsp), %r12
    00000376: 	movq	(%rbx), %rdi
    00000379: 	jmp	.Ltmp2123 # Offset: 889
.Ltmp2115:
    0000037e: 	movq	0x18(%rsp), %rsi
    00000383: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000038a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 906
    0000038f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000396: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000039d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003a4: 	jne	.Ltmp2124 # Offset: 932
.Ltmp2120:
    000003aa: 	movq	-0x8(%rdx), %rax
    000003ae: 	addq	$0x200, %rax
    000003b4: 	jmp	.Ltmp2124 # Offset: 948
.Ltmp2119:
    000003b9: 	testq	%r12, %r12
    000003bc: 	je	.Ltmp2123 # Offset: 956
    000003c2: 	jmp	.Ltmp2125 # Offset: 962
.Ltmp2121:
    000003c4: 	callq	__stack_chk_fail@PLT # Offset: 964
.Ltmp2117:
    000003c9: 	leaq	DATAat0x4d018(%rip), %rdi
    000003d0: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 976
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSENIj14custom_cse_addIjELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSENIj14custom_cse_mulIjELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 165
  State       : disassembled
  Address     : 0x21100
  Size        : 0x3eb
  MaxSize     : 0x3f0
  Offset      : 0x21100
  Section     : .text
  Orc Section : .local.text._Z9test_CSENIj14custom_cse_mulIjELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0164:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%esi, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	movl	%edx, %ebp
    00000015: 	pushq	%rbx
    00000016: 	subq	$0x38, %rsp
    0000001a: 	movq	%rcx, 0x18(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x28(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r11d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r11d, %r11d
    00000045: 	jle	.Ltmp2126 # Offset: 69
    0000004b: 	leal	-0x1(%r13), %edi
    0000004f: 	leal	-0x2(%r13), %eax
    00000053: 	xorl	%r14d, %r14d
    00000056: 	movl	%eax, 0x8(%rsp)
    0000005a: 	movl	%edi, %eax
    0000005c: 	shrl	$0x2, %eax
    0000005f: 	movl	%edi, 0x10(%rsp)
    00000063: 	andl	$-0x4, %edi
    00000066: 	subl	$0x1, %eax
    00000069: 	movl	%edi, 0xc(%rsp)
    0000006d: 	shlq	$0x4, %rax
    00000071: 	leaq	0x10(%r12,%rax), %rbx
    00000076: 	leal	0x1(%rdi), %eax
    00000079: 	movl	%eax, 0x14(%rsp)
.Ltmp2139:
    0000007d: 	movl	(%r12), %r10d
    00000081: 	movl	0x4(%r12), %r9d
.Ltmp2131:
    00000086: 	movl	%r10d, %eax
    00000089: 	imull	%r9d, %eax
    0000008d: 	addl	%ebp, %eax
    0000008f: 	addl	%eax, %eax
    00000091: 	leal	(%r9,%rax), %edx
    00000095: 	addl	%r10d, %eax
    00000098: 	shll	$0x3, %eax
    0000009b: 	subl	%edx, %eax
    0000009d: 	subl	%edx, %eax
    0000009f: 	subl	%edx, %eax
    000000a1: 	subl	%edx, %eax
    000000a3: 	subl	%edx, %eax
    000000a5: 	subl	%edx, %eax
    000000a7: 	addl	%edx, %edx
    000000a9: 	subl	%edx, %eax
    000000ab: 	cmpl	$0x1, %r13d
    000000af: 	jle	.Ltmp2127 # Offset: 175
    000000b5: 	cmpl	$0x2, 0x8(%rsp)
    000000ba: 	jbe	.Ltmp2128 # Offset: 186
    000000c0: 	movd	%ebp, %xmm7
    000000c4: 	movq	%r12, %rdx
    000000c7: 	pxor	%xmm3, %xmm3
    000000cb: 	pshufd	$0x0, %xmm7, %xmm4
.Ltmp2129:
    000000d0: 	movdqu	(%rdx), %xmm5
    000000d4: 	movdqu	0x4(%rdx), %xmm1
    000000d9: 	addq	$0x10, %rdx
    000000dd: 	movdqa	%xmm1, %xmm2
    000000e1: 	movdqa	%xmm5, %xmm6
    000000e5: 	movdqa	%xmm1, %xmm0
    000000e9: 	psrlq	$0x20, %xmm2
    000000ee: 	psrlq	$0x20, %xmm6
    000000f3: 	pmuludq	%xmm5, %xmm0
    000000f7: 	pmuludq	%xmm6, %xmm2
    000000fb: 	pshufd	$0x8, %xmm0, %xmm0
    00000100: 	pshufd	$0x8, %xmm2, %xmm2
    00000105: 	punpckldq	%xmm2, %xmm0
    00000109: 	paddd	%xmm4, %xmm0
    0000010d: 	pslld	$0x1, %xmm0
    00000112: 	paddd	%xmm0, %xmm1
    00000116: 	paddd	%xmm5, %xmm0
    0000011a: 	movdqa	%xmm1, %xmm2
    0000011e: 	pslld	$0x3, %xmm0
    00000123: 	paddd	%xmm1, %xmm2
    00000127: 	psubd	%xmm1, %xmm0
    0000012b: 	psubd	%xmm2, %xmm0
    0000012f: 	paddd	%xmm1, %xmm2
    00000133: 	pslld	$0x1, %xmm1
    00000138: 	psubd	%xmm2, %xmm0
    0000013c: 	psubd	%xmm1, %xmm3
    00000140: 	paddd	%xmm0, %xmm3
    00000144: 	cmpq	%rbx, %rdx
    00000147: 	jne	.Ltmp2129 # Offset: 327
    00000149: 	movdqa	%xmm3, %xmm0
    0000014d: 	movl	0x10(%rsp), %ecx
    00000151: 	psrldq	$0x8, %xmm0
    00000156: 	paddd	%xmm0, %xmm3
    0000015a: 	movdqa	%xmm3, %xmm0
    0000015e: 	psrldq	$0x4, %xmm0
    00000163: 	paddd	%xmm0, %xmm3
    00000167: 	movd	%xmm3, %edx
    0000016b: 	addl	%edx, %eax
    0000016d: 	cmpl	%ecx, 0xc(%rsp)
    00000171: 	je	.Ltmp2127 # Offset: 369
    00000177: 	movl	0x14(%rsp), %edi
.Ltmp2140:
    0000017b: 	movslq	%edi, %rsi
    0000017e: 	shlq	$0x2, %rsi
    00000182: 	leaq	(%r12,%rsi), %rdx
    00000186: 	movl	-0x4(%rdx), %r15d
    0000018a: 	movl	(%rdx), %edx
    0000018c: 	movl	%edx, %r8d
    0000018f: 	imull	%r15d, %r8d
    00000193: 	addl	%ebp, %r8d
    00000196: 	addl	%r8d, %r8d
    00000199: 	leal	(%rdx,%r8), %ecx
    0000019d: 	addl	%r15d, %r8d
    000001a0: 	leal	(%rax,%r8,8), %eax
    000001a4: 	subl	%ecx, %eax
    000001a6: 	subl	%ecx, %eax
    000001a8: 	subl	%ecx, %eax
    000001aa: 	subl	%ecx, %eax
    000001ac: 	subl	%ecx, %eax
    000001ae: 	subl	%ecx, %eax
    000001b0: 	addl	%ecx, %ecx
    000001b2: 	subl	%ecx, %eax
    000001b4: 	leal	0x1(%rdi), %ecx
    000001b7: 	cmpl	%ecx, %r13d
    000001ba: 	jle	.Ltmp2127 # Offset: 442
    000001bc: 	movl	0x4(%r12,%rsi), %ecx
    000001c1: 	movl	%edx, %r15d
    000001c4: 	addl	$0x2, %edi
    000001c7: 	imull	%ecx, %r15d
    000001cb: 	addl	%ebp, %r15d
    000001ce: 	addl	%r15d, %r15d
    000001d1: 	addl	%r15d, %edx
    000001d4: 	leal	(%r15,%rcx), %r8d
    000001d8: 	shll	$0x3, %edx
    000001db: 	subl	%r8d, %edx
    000001de: 	subl	%r8d, %edx
    000001e1: 	subl	%r8d, %edx
    000001e4: 	subl	%r8d, %edx
    000001e7: 	subl	%r8d, %edx
    000001ea: 	subl	%r8d, %edx
    000001ed: 	addl	%r8d, %r8d
    000001f0: 	subl	%r8d, %edx
    000001f3: 	addl	%edx, %eax
    000001f5: 	cmpl	%edi, %r13d
    000001f8: 	jle	.Ltmp2127 # Offset: 504
    000001fa: 	movl	0x8(%r12,%rsi), %esi
    000001ff: 	movl	%ecx, %edx
    00000201: 	imull	%esi, %edx
    00000204: 	addl	%ebp, %edx
    00000206: 	addl	%edx, %edx
    00000208: 	addl	%edx, %esi
    0000020a: 	addl	%ecx, %edx
    0000020c: 	shll	$0x3, %edx
    0000020f: 	subl	%esi, %edx
    00000211: 	subl	%esi, %edx
    00000213: 	subl	%esi, %edx
    00000215: 	subl	%esi, %edx
    00000217: 	subl	%esi, %edx
    00000219: 	subl	%esi, %edx
    0000021b: 	addl	%esi, %esi
    0000021d: 	subl	%esi, %edx
    0000021f: 	addl	%edx, %eax
.Ltmp2127:
    00000221: 	testl	%eax, %eax
    00000223: 	jne	.Ltmp2130 # Offset: 547
    00000229: 	addl	$0x1, %r14d
    0000022d: 	cmpl	%r11d, %r14d
    00000230: 	jl	.Ltmp2131 # Offset: 560
.Ltmp2126:
    00000236: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000023d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000244: 	subq	$0x20, %rax
    00000248: 	cmpq	%rax, %rbx
    0000024b: 	je	.Ltmp2132 # Offset: 587
    00000251: 	movq	0x18(%rsp), %rax
    00000256: 	leaq	0x10(%rbx), %rdi
    0000025a: 	movq	%rdi, (%rbx)
    0000025d: 	movq	(%rax), %rbp
    00000260: 	movq	0x8(%rax), %r12
    00000264: 	movq	%rbp, %rax
    00000267: 	addq	%r12, %rax
    0000026a: 	je	.Ltmp2133 # Offset: 618
    0000026c: 	testq	%rbp, %rbp
    0000026f: 	je	.Ltmp2134 # Offset: 623
.Ltmp2133:
    00000275: 	movq	%r12, 0x20(%rsp)
    0000027a: 	cmpq	$0xf, %r12
    0000027e: 	ja	.Ltmp2135 # Offset: 638
    00000284: 	cmpq	$0x1, %r12
    00000288: 	jne	.Ltmp2136 # Offset: 648
    0000028e: 	movzbl	(%rbp), %eax
    00000292: 	movb	%al, 0x10(%rbx)
.Ltmp2141:
    00000295: 	movq	%r12, 0x8(%rbx)
    00000299: 	movb	$0x0, (%rdi,%r12)
    0000029e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002a5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002ac: 	addq	$0x20, %rax
    000002b0: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002b7: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000002be: 	je	.Ltmp2137 # Offset: 702
.Ltmp2142:
    000002c4: 	movq	-0x20(%rax), %rbp
    000002c8: 	callq	clock@PLT # Offset: 712
    000002cd: 	movq	%rax, end_time(%rip)
    000002d4: 	movq	0x28(%rsp), %rdx
    000002d9: 	subq	%fs:0x28, %rdx
    000002e2: 	jne	.Ltmp2138 # Offset: 738
    000002e8: 	subq	start_time(%rip), %rax
    000002ef: 	pxor	%xmm0, %xmm0
    000002f3: 	movq	%rbp, %rdi
    000002f6: 	cvtsi2sd	%rax, %xmm0
    000002fb: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000303: 	addq	$0x38, %rsp
    00000307: 	popq	%rbx
    00000308: 	popq	%rbp
    00000309: 	popq	%r12
    0000030b: 	popq	%r13
    0000030d: 	popq	%r14
    0000030f: 	popq	%r15
    00000311: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 785
    00000316: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2130:
    00000320: 	movq	0x18(%rsp), %rax
    00000325: 	leaq	DATAat0x4d004(%rip), %rsi
    0000032c: 	movl	$0x1, %edi
    00000331: 	addl	$0x1, %r14d
    00000335: 	movq	(%rax), %rdx
    00000338: 	xorl	%eax, %eax
    0000033a: 	callq	__printf_chk@PLT # Offset: 826
    0000033f: 	movl	iterations(%rip), %r11d
    00000346: 	cmpl	%r11d, %r14d
    00000349: 	jl	.Ltmp2139 # Offset: 841
    0000034f: 	jmp	.Ltmp2126 # Offset: 847
.Ltmp2128:
    00000354: 	movl	$0x1, %edi
    00000359: 	jmp	.Ltmp2140 # Offset: 857
.Ltmp2135:
    0000035e: 	movq	%rbx, %rdi
    00000361: 	leaq	0x20(%rsp), %rsi
    00000366: 	xorl	%edx, %edx
    00000368: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 872
    0000036d: 	movq	%rax, (%rbx)
    00000370: 	movq	%rax, %rdi
    00000373: 	movq	0x20(%rsp), %rax
    00000378: 	movq	%rax, 0x10(%rbx)
.Ltmp2143:
    0000037c: 	movq	%r12, %rdx
    0000037f: 	movq	%rbp, %rsi
    00000382: 	callq	memcpy@PLT # Offset: 898
    00000387: 	movq	0x20(%rsp), %r12
    0000038c: 	movq	(%rbx), %rdi
    0000038f: 	jmp	.Ltmp2141 # Offset: 911
.Ltmp2132:
    00000394: 	movq	0x18(%rsp), %rsi
    00000399: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000003a0: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 928
    000003a5: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000003ac: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000003b3: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003ba: 	jne	.Ltmp2142 # Offset: 954
.Ltmp2137:
    000003c0: 	movq	-0x8(%rdx), %rax
    000003c4: 	addq	$0x200, %rax
    000003ca: 	jmp	.Ltmp2142 # Offset: 970
.Ltmp2136:
    000003cf: 	testq	%r12, %r12
    000003d2: 	je	.Ltmp2141 # Offset: 978
    000003d8: 	jmp	.Ltmp2143 # Offset: 984
.Ltmp2138:
    000003da: 	callq	__stack_chk_fail@PLT # Offset: 986
.Ltmp2134:
    000003df: 	leaq	DATAat0x4d018(%rip), %rdi
    000003e6: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 998
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSENIj14custom_cse_mulIjELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSENIj14custom_cse_subIjELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 166
  State       : disassembled
  Address     : 0x214f0
  Size        : 0x3dd
  MaxSize     : 0x3e0
  Offset      : 0x214f0
  Section     : .text
  Orc Section : .local.text._Z9test_CSENIj14custom_cse_subIjELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0165:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdi, %rbx
    00000016: 	subq	$0x38, %rsp
    0000001a: 	movq	%rcx, 0x18(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x28(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r10d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r10d, %r10d
    00000045: 	jle	.Ltmp2144 # Offset: 69
    0000004b: 	leal	-0x1(%r14), %r8d
    0000004f: 	leal	-0x2(%r14), %eax
    00000053: 	movl	(%rbx), %r9d
    00000056: 	movl	0x4(%rbx), %edi
    00000059: 	movl	%eax, 0xc(%rsp)
    0000005d: 	movl	%r8d, %eax
    00000060: 	movl	%r8d, %r15d
    00000063: 	xorl	%r13d, %r13d
    00000066: 	shrl	$0x2, %eax
    00000069: 	andl	$-0x4, %r15d
    0000006d: 	subl	$0x1, %eax
    00000070: 	shlq	$0x4, %rax
    00000074: 	leaq	0x10(%rbx,%rax), %r12
    00000079: 	leal	0x1(%r15), %eax
    0000007d: 	movl	%eax, 0x10(%rsp)
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp2150:
    00000088: 	leal	(%rbp,%rdi), %eax
    0000008c: 	subl	%r9d, %eax
    0000008f: 	addl	%eax, %eax
    00000091: 	leal	(%rdi,%rax), %edx
    00000094: 	addl	%r9d, %eax
    00000097: 	shll	$0x3, %eax
    0000009a: 	subl	%edx, %eax
    0000009c: 	subl	%edx, %eax
    0000009e: 	subl	%edx, %eax
    000000a0: 	subl	%edx, %eax
    000000a2: 	subl	%edx, %eax
    000000a4: 	subl	%edx, %eax
    000000a6: 	addl	%edx, %edx
    000000a8: 	subl	%edx, %eax
    000000aa: 	cmpl	$0x1, %r14d
    000000ae: 	jle	.Ltmp2145 # Offset: 174
    000000b4: 	cmpl	$0x2, 0xc(%rsp)
    000000b9: 	jbe	.Ltmp2146 # Offset: 185
    000000bf: 	movd	%ebp, %xmm7
    000000c3: 	movq	%rbx, %rdx
    000000c6: 	pxor	%xmm2, %xmm2
    000000ca: 	pshufd	$0x0, %xmm7, %xmm4
    000000cf: 	nop # Size: 1
.Ltmp2147:
    000000d0: 	movdqu	0x4(%rdx), %xmm0
    000000d5: 	movdqu	(%rdx), %xmm5
    000000d9: 	addq	$0x10, %rdx
    000000dd: 	movdqu	-0xc(%rdx), %xmm1
    000000e2: 	paddd	%xmm4, %xmm0
    000000e6: 	psubd	%xmm5, %xmm0
    000000ea: 	pslld	$0x1, %xmm0
    000000ef: 	paddd	%xmm0, %xmm1
    000000f3: 	paddd	%xmm5, %xmm0
    000000f7: 	movdqa	%xmm1, %xmm3
    000000fb: 	pslld	$0x3, %xmm0
    00000100: 	paddd	%xmm1, %xmm3
    00000104: 	psubd	%xmm1, %xmm0
    00000108: 	psubd	%xmm3, %xmm0
    0000010c: 	paddd	%xmm1, %xmm3
    00000110: 	pslld	$0x1, %xmm1
    00000115: 	psubd	%xmm3, %xmm0
    00000119: 	psubd	%xmm1, %xmm2
    0000011d: 	paddd	%xmm0, %xmm2
    00000121: 	cmpq	%rdx, %r12
    00000124: 	jne	.Ltmp2147 # Offset: 292
    00000126: 	movdqa	%xmm2, %xmm0
    0000012a: 	psrldq	$0x8, %xmm0
    0000012f: 	paddd	%xmm0, %xmm2
    00000133: 	movdqa	%xmm2, %xmm0
    00000137: 	psrldq	$0x4, %xmm0
    0000013c: 	paddd	%xmm0, %xmm2
    00000140: 	movd	%xmm2, %edx
    00000144: 	addl	%edx, %eax
    00000146: 	cmpl	%r8d, %r15d
    00000149: 	je	.Ltmp2145 # Offset: 329
    0000014f: 	movl	0x10(%rsp), %edx
    00000153: 	movl	%r15d, %esi
.Ltmp2158:
    00000156: 	movl	%r14d, %r11d
    00000159: 	subl	%esi, %r11d
    0000015c: 	leal	-0x1(%r11), %ecx
    00000160: 	cmpl	$0x2, %r11d
    00000164: 	je	.Ltmp2148 # Offset: 356
    00000166: 	movq	0x4(%rbx,%rsi,4), %xmm1
    0000016c: 	movq	(%rbx,%rsi,4), %xmm0
    00000171: 	movd	%ebp, %xmm7
    00000175: 	pshufd	$0xe0, %xmm7, %xmm3
    0000017a: 	movdqa	%xmm1, %xmm2
    0000017e: 	psubd	%xmm0, %xmm2
    00000182: 	paddd	%xmm3, %xmm2
    00000186: 	pslld	$0x1, %xmm2
    0000018b: 	paddd	%xmm2, %xmm1
    0000018f: 	paddd	%xmm2, %xmm0
    00000193: 	movdqa	%xmm1, %xmm3
    00000197: 	pslld	$0x3, %xmm0
    0000019c: 	movdqa	%xmm1, %xmm2
    000001a0: 	paddd	%xmm1, %xmm3
    000001a4: 	psubd	%xmm1, %xmm0
    000001a8: 	pslld	$0x1, %xmm2
    000001ad: 	paddd	%xmm2, %xmm1
    000001b1: 	psubd	%xmm3, %xmm0
    000001b5: 	psubd	%xmm3, %xmm0
    000001b9: 	psubd	%xmm1, %xmm0
    000001bd: 	movd	%xmm0, %r11d
    000001c2: 	pshufd	$0xe5, %xmm0, %xmm7
    000001c7: 	movd	%xmm7, %esi
    000001cb: 	addl	%r11d, %esi
    000001ce: 	addl	%esi, %eax
    000001d0: 	movl	%ecx, %esi
    000001d2: 	andl	$-0x2, %esi
    000001d5: 	addl	%esi, %edx
    000001d7: 	cmpl	%ecx, %esi
    000001d9: 	je	.Ltmp2145 # Offset: 473
.Ltmp2148:
    000001db: 	movslq	%edx, %rdx
    000001de: 	movl	-0x4(%rbx,%rdx,4), %esi
    000001e2: 	movl	(%rbx,%rdx,4), %edx
    000001e5: 	leal	(%rbp,%rdx), %ecx
    000001e9: 	subl	%esi, %ecx
    000001eb: 	addl	%ecx, %ecx
    000001ed: 	addl	%ecx, %edx
    000001ef: 	addl	%esi, %ecx
    000001f1: 	leal	(%rax,%rcx,8), %eax
    000001f4: 	subl	%edx, %eax
    000001f6: 	subl	%edx, %eax
    000001f8: 	subl	%edx, %eax
    000001fa: 	subl	%edx, %eax
    000001fc: 	subl	%edx, %eax
    000001fe: 	subl	%edx, %eax
    00000200: 	addl	%edx, %edx
    00000202: 	subl	%edx, %eax
.Ltmp2145:
    00000204: 	testl	%eax, %eax
    00000206: 	jne	.Ltmp2149 # Offset: 518
    0000020c: 	addl	$0x1, %r13d
    00000210: 	cmpl	%r10d, %r13d
    00000213: 	jl	.Ltmp2150 # Offset: 531
.Ltmp2144:
    00000219: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000220: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000227: 	subq	$0x20, %rax
    0000022b: 	cmpq	%rax, %rbx
    0000022e: 	je	.Ltmp2151 # Offset: 558
    00000234: 	movq	0x18(%rsp), %rax
    00000239: 	leaq	0x10(%rbx), %rdi
    0000023d: 	movq	%rdi, (%rbx)
    00000240: 	movq	(%rax), %rbp
    00000243: 	movq	0x8(%rax), %r12
    00000247: 	movq	%rbp, %rax
    0000024a: 	addq	%r12, %rax
    0000024d: 	je	.Ltmp2152 # Offset: 589
    0000024f: 	testq	%rbp, %rbp
    00000252: 	je	.Ltmp2153 # Offset: 594
.Ltmp2152:
    00000258: 	movq	%r12, 0x20(%rsp)
    0000025d: 	cmpq	$0xf, %r12
    00000261: 	ja	.Ltmp2154 # Offset: 609
    00000267: 	cmpq	$0x1, %r12
    0000026b: 	jne	.Ltmp2155 # Offset: 619
    00000271: 	movzbl	(%rbp), %eax
    00000275: 	movb	%al, 0x10(%rbx)
.Ltmp2159:
    00000278: 	movq	%r12, 0x8(%rbx)
    0000027c: 	movb	$0x0, (%rdi,%r12)
    00000281: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000288: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000028f: 	addq	$0x20, %rax
    00000293: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000029a: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000002a1: 	je	.Ltmp2156 # Offset: 673
.Ltmp2160:
    000002a7: 	movq	-0x20(%rax), %rbp
    000002ab: 	callq	clock@PLT # Offset: 683
    000002b0: 	movq	%rax, end_time(%rip)
    000002b7: 	movq	0x28(%rsp), %rdx
    000002bc: 	subq	%fs:0x28, %rdx
    000002c5: 	jne	.Ltmp2157 # Offset: 709
    000002cb: 	subq	start_time(%rip), %rax
    000002d2: 	pxor	%xmm0, %xmm0
    000002d6: 	movq	%rbp, %rdi
    000002d9: 	cvtsi2sd	%rax, %xmm0
    000002de: 	divsd	DATAat0x4d640(%rip), %xmm0
    000002e6: 	addq	$0x38, %rsp
    000002ea: 	popq	%rbx
    000002eb: 	popq	%rbp
    000002ec: 	popq	%r12
    000002ee: 	popq	%r13
    000002f0: 	popq	%r14
    000002f2: 	popq	%r15
    000002f4: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 756
    000002f9: 	nopl	(%rax) # Size: 7
.Ltmp2149:
    00000300: 	movq	0x18(%rsp), %rax
    00000305: 	leaq	DATAat0x4d004(%rip), %rsi
    0000030c: 	movl	$0x1, %edi
    00000311: 	movl	%r8d, 0x14(%rsp)
    00000316: 	addl	$0x1, %r13d
    0000031a: 	movq	(%rax), %rdx
    0000031d: 	xorl	%eax, %eax
    0000031f: 	callq	__printf_chk@PLT # Offset: 799
    00000324: 	movl	iterations(%rip), %r10d
    0000032b: 	cmpl	%r10d, %r13d
    0000032e: 	jge	.Ltmp2144 # Offset: 814
    00000334: 	movl	(%rbx), %r9d
    00000337: 	movl	0x4(%rbx), %edi
    0000033a: 	movl	0x14(%rsp), %r8d
    0000033f: 	jmp	.Ltmp2150 # Offset: 831
.Ltmp2146:
    00000344: 	xorl	%esi, %esi
    00000346: 	movl	$0x1, %edx
    0000034b: 	jmp	.Ltmp2158 # Offset: 843
.Ltmp2154:
    00000350: 	movq	%rbx, %rdi
    00000353: 	leaq	0x20(%rsp), %rsi
    00000358: 	xorl	%edx, %edx
    0000035a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 858
    0000035f: 	movq	%rax, (%rbx)
    00000362: 	movq	%rax, %rdi
    00000365: 	movq	0x20(%rsp), %rax
    0000036a: 	movq	%rax, 0x10(%rbx)
.Ltmp2161:
    0000036e: 	movq	%r12, %rdx
    00000371: 	movq	%rbp, %rsi
    00000374: 	callq	memcpy@PLT # Offset: 884
    00000379: 	movq	0x20(%rsp), %r12
    0000037e: 	movq	(%rbx), %rdi
    00000381: 	jmp	.Ltmp2159 # Offset: 897
.Ltmp2151:
    00000386: 	movq	0x18(%rsp), %rsi
    0000038b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000392: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 914
    00000397: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000039e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000003a5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003ac: 	jne	.Ltmp2160 # Offset: 940
.Ltmp2156:
    000003b2: 	movq	-0x8(%rdx), %rax
    000003b6: 	addq	$0x200, %rax
    000003bc: 	jmp	.Ltmp2160 # Offset: 956
.Ltmp2155:
    000003c1: 	testq	%r12, %r12
    000003c4: 	je	.Ltmp2159 # Offset: 964
    000003ca: 	jmp	.Ltmp2161 # Offset: 970
.Ltmp2157:
    000003cc: 	callq	__stack_chk_fail@PLT # Offset: 972
.Ltmp2153:
    000003d1: 	leaq	DATAat0x4d018(%rip), %rdi
    000003d8: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 984
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSENIj14custom_cse_subIjELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSENIf14custom_cse_addIfELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 167
  State       : disassembled
  Address     : 0x218d0
  Size        : 0x3bc
  MaxSize     : 0x3c0
  Offset      : 0x218d0
  Section     : .text
  Orc Section : .local.text._Z9test_CSENIf14custom_cse_addIfELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0166:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rdx, %rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movss	%xmm0, 0xc(%rsp)
    00000021: 	movq	%fs:0x28, %rax
    0000002a: 	movq	%rax, 0x18(%rsp)
    0000002f: 	xorl	%eax, %eax
    00000031: 	callq	clock@PLT # Offset: 49
    00000036: 	movl	iterations(%rip), %edx
    0000003c: 	movss	0xc(%rsp), %xmm3
    00000042: 	movq	%rax, start_time(%rip)
    00000049: 	testl	%edx, %edx
    0000004b: 	jle	.Ltmp2162 # Offset: 75
    00000051: 	leal	-0x2(%r14), %eax
    00000055: 	movss	(%r13), %xmm4
    0000005b: 	movss	0x4(%r13), %xmm5
    00000061: 	xorl	%r12d, %r12d
    00000064: 	movsd	DATAat0x4d620(%rip), %xmm8
    0000006d: 	leaq	0x8(%r13,%rax,4), %rbx
    00000072: 	pxor	%xmm10, %xmm10
    00000077: 	movq	DATAat0x4d5e0(%rip), %xmm7
    0000007f: 	movsd	DATAat0x4d628(%rip), %xmm6
    00000087: 	leaq	DATAat0x4d004(%rip), %r15
    0000008e: 	movss	DATAat0x4d5d0(%rip), %xmm9
    00000097: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2167:
    000000a0: 	movaps	%xmm4, %xmm0
    000000a3: 	movaps	%xmm4, %xmm11
    000000a7: 	movaps	%xmm5, %xmm1
    000000aa: 	addss	%xmm5, %xmm0
    000000ae: 	movaps	%xmm4, %xmm2
    000000b1: 	addss	%xmm3, %xmm0
    000000b5: 	addss	%xmm0, %xmm11
    000000ba: 	addss	%xmm0, %xmm1
    000000be: 	addss	%xmm0, %xmm11
    000000c3: 	addss	%xmm0, %xmm1
    000000c7: 	movaps	%xmm11, %xmm0
    000000cb: 	addss	%xmm10, %xmm0
    000000d0: 	subss	%xmm1, %xmm0
    000000d4: 	addss	%xmm11, %xmm0
    000000d9: 	subss	%xmm1, %xmm0
    000000dd: 	addss	%xmm11, %xmm0
    000000e2: 	subss	%xmm1, %xmm0
    000000e6: 	addss	%xmm11, %xmm0
    000000eb: 	subss	%xmm1, %xmm0
    000000ef: 	addss	%xmm11, %xmm0
    000000f4: 	subss	%xmm1, %xmm0
    000000f8: 	addss	%xmm11, %xmm0
    000000fd: 	subss	%xmm1, %xmm0
    00000101: 	addss	%xmm11, %xmm0
    00000106: 	subss	%xmm1, %xmm0
    0000010a: 	addss	%xmm11, %xmm0
    0000010f: 	subss	%xmm1, %xmm0
    00000113: 	cmpl	$0x1, %r14d
    00000117: 	jle	.Ltmp2163 # Offset: 279
    0000011d: 	leaq	0x4(%r13), %rax
    00000121: 	nopl	(%rax) # Size: 7
.Ltmp2164:
    00000128: 	movaps	%xmm2, %xmm11
    0000012c: 	movss	(%rax), %xmm2
    00000130: 	addq	$0x4, %rax
    00000134: 	movaps	%xmm2, %xmm12
    00000138: 	movaps	%xmm2, %xmm1
    0000013b: 	addss	%xmm11, %xmm12
    00000140: 	addss	%xmm3, %xmm12
    00000145: 	addss	%xmm12, %xmm11
    0000014a: 	addss	%xmm12, %xmm1
    0000014f: 	addss	%xmm12, %xmm11
    00000154: 	addss	%xmm12, %xmm1
    00000159: 	addss	%xmm11, %xmm0
    0000015e: 	subss	%xmm1, %xmm0
    00000162: 	addss	%xmm11, %xmm0
    00000167: 	subss	%xmm1, %xmm0
    0000016b: 	addss	%xmm11, %xmm0
    00000170: 	subss	%xmm1, %xmm0
    00000174: 	addss	%xmm11, %xmm0
    00000179: 	subss	%xmm1, %xmm0
    0000017d: 	addss	%xmm11, %xmm0
    00000182: 	subss	%xmm1, %xmm0
    00000186: 	addss	%xmm11, %xmm0
    0000018b: 	subss	%xmm1, %xmm0
    0000018f: 	addss	%xmm11, %xmm0
    00000194: 	subss	%xmm1, %xmm0
    00000198: 	addss	%xmm11, %xmm0
    0000019d: 	subss	%xmm1, %xmm0
    000001a1: 	cmpq	%rax, %rbx
    000001a4: 	jne	.Ltmp2164 # Offset: 420
.Ltmp2163:
    000001a6: 	movaps	%xmm0, %xmm1
    000001a9: 	andps	%xmm9, %xmm1
    000001ad: 	cvtss2sd	%xmm1, %xmm1
    000001b1: 	comisd	%xmm8, %xmm1
    000001b6: 	jbe	.Ltmp2165 # Offset: 438
    000001b8: 	divss	%xmm0, %xmm0
.Ltmp2165:
    000001bc: 	cvtss2sd	%xmm0, %xmm0
    000001c0: 	andpd	%xmm7, %xmm0
    000001c4: 	comisd	%xmm0, %xmm6
    000001c8: 	jbe	.Ltmp2166 # Offset: 456
    000001ce: 	addl	$0x1, %r12d
    000001d2: 	cmpl	%edx, %r12d
    000001d5: 	jl	.Ltmp2167 # Offset: 469
.Ltmp2162:
    000001db: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001e2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001e9: 	subq	$0x20, %rax
    000001ed: 	cmpq	%rax, %rbx
    000001f0: 	je	.Ltmp2168 # Offset: 496
    000001f6: 	leaq	0x10(%rbx), %rdi
    000001fa: 	movq	0x8(%rbp), %r12
    000001fe: 	movq	%rdi, (%rbx)
    00000201: 	movq	(%rbp), %r13
    00000205: 	movq	%r13, %rax
    00000208: 	addq	%r12, %rax
    0000020b: 	je	.Ltmp2169 # Offset: 523
    0000020d: 	testq	%r13, %r13
    00000210: 	je	.Ltmp2170 # Offset: 528
.Ltmp2169:
    00000216: 	movq	%r12, 0x10(%rsp)
    0000021b: 	cmpq	$0xf, %r12
    0000021f: 	ja	.Ltmp2171 # Offset: 543
    00000225: 	cmpq	$0x1, %r12
    00000229: 	jne	.Ltmp2172 # Offset: 553
    0000022f: 	movzbl	(%r13), %eax
    00000234: 	movb	%al, 0x10(%rbx)
.Ltmp2175:
    00000237: 	movq	%r12, 0x8(%rbx)
    0000023b: 	movb	$0x0, (%rdi,%r12)
    00000240: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000247: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000024e: 	addq	$0x20, %rax
    00000252: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000259: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000260: 	je	.Ltmp2173 # Offset: 608
.Ltmp2176:
    00000266: 	movq	-0x20(%rax), %rbp
    0000026a: 	callq	clock@PLT # Offset: 618
    0000026f: 	movq	%rax, end_time(%rip)
    00000276: 	movq	0x18(%rsp), %rdx
    0000027b: 	subq	%fs:0x28, %rdx
    00000284: 	jne	.Ltmp2174 # Offset: 644
    0000028a: 	subq	start_time(%rip), %rax
    00000291: 	pxor	%xmm0, %xmm0
    00000295: 	movq	%rbp, %rdi
    00000298: 	cvtsi2sd	%rax, %xmm0
    0000029d: 	divsd	DATAat0x4d640(%rip), %xmm0
    000002a5: 	addq	$0x28, %rsp
    000002a9: 	popq	%rbx
    000002aa: 	popq	%rbp
    000002ab: 	popq	%r12
    000002ad: 	popq	%r13
    000002af: 	popq	%r14
    000002b1: 	popq	%r15
    000002b3: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 691
    000002b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2166:
    000002c0: 	movq	(%rbp), %rdx
    000002c4: 	movq	%r15, %rsi
    000002c7: 	movl	$0x1, %edi
    000002cc: 	xorl	%eax, %eax
    000002ce: 	movss	%xmm3, 0xc(%rsp)
    000002d4: 	addl	$0x1, %r12d
    000002d8: 	callq	__printf_chk@PLT # Offset: 728
    000002dd: 	movl	iterations(%rip), %edx
    000002e3: 	cmpl	%edx, %r12d
    000002e6: 	jge	.Ltmp2162 # Offset: 742
    000002ec: 	movq	DATAat0x4d620(%rip), %rax
    000002f3: 	movss	(%r13), %xmm4
    000002f9: 	movss	DATAat0x4d5d0(%rip), %xmm9
    00000302: 	pxor	%xmm10, %xmm10
    00000307: 	movss	0x4(%r13), %xmm5
    0000030d: 	movss	0xc(%rsp), %xmm3
    00000313: 	movq	%rax, %xmm8
    00000318: 	movq	DATAat0x4d628(%rip), %rax
    0000031f: 	movq	DATAat0x4d5e0(%rip), %xmm7
    00000327: 	movq	%rax, %xmm6
    0000032c: 	jmp	.Ltmp2167 # Offset: 812
.Ltmp2171:
    00000331: 	movq	%rbx, %rdi
    00000334: 	leaq	0x10(%rsp), %rsi
    00000339: 	xorl	%edx, %edx
    0000033b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 827
    00000340: 	movq	%rax, (%rbx)
    00000343: 	movq	%rax, %rdi
    00000346: 	movq	0x10(%rsp), %rax
    0000034b: 	movq	%rax, 0x10(%rbx)
.Ltmp2177:
    0000034f: 	movq	%r12, %rdx
    00000352: 	movq	%r13, %rsi
    00000355: 	callq	memcpy@PLT # Offset: 853
    0000035a: 	movq	0x10(%rsp), %r12
    0000035f: 	movq	(%rbx), %rdi
    00000362: 	jmp	.Ltmp2175 # Offset: 866
.Ltmp2168:
    00000367: 	movq	%rbp, %rsi
    0000036a: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000371: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 881
    00000376: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000037d: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000384: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000038b: 	jne	.Ltmp2176 # Offset: 907
.Ltmp2173:
    00000391: 	movq	-0x8(%rdx), %rax
    00000395: 	addq	$0x200, %rax
    0000039b: 	jmp	.Ltmp2176 # Offset: 923
.Ltmp2172:
    000003a0: 	testq	%r12, %r12
    000003a3: 	je	.Ltmp2175 # Offset: 931
    000003a9: 	jmp	.Ltmp2177 # Offset: 937
.Ltmp2174:
    000003ab: 	callq	__stack_chk_fail@PLT # Offset: 939
.Ltmp2170:
    000003b0: 	leaq	DATAat0x4d018(%rip), %rdi
    000003b7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 951
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSENIf14custom_cse_addIfELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSENIf14custom_cse_subIfELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 168
  State       : disassembled
  Address     : 0x21c90
  Size        : 0x3bc
  MaxSize     : 0x3c0
  Offset      : 0x21c90
  Section     : .text
  Orc Section : .local.text._Z9test_CSENIf14custom_cse_subIfELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0167:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rdx, %rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movss	%xmm0, 0xc(%rsp)
    00000021: 	movq	%fs:0x28, %rax
    0000002a: 	movq	%rax, 0x18(%rsp)
    0000002f: 	xorl	%eax, %eax
    00000031: 	callq	clock@PLT # Offset: 49
    00000036: 	movl	iterations(%rip), %edx
    0000003c: 	movss	0xc(%rsp), %xmm3
    00000042: 	movq	%rax, start_time(%rip)
    00000049: 	testl	%edx, %edx
    0000004b: 	jle	.Ltmp2178 # Offset: 75
    00000051: 	leal	-0x2(%r14), %eax
    00000055: 	movss	(%r13), %xmm4
    0000005b: 	movss	0x4(%r13), %xmm5
    00000061: 	xorl	%r12d, %r12d
    00000064: 	movsd	DATAat0x4d620(%rip), %xmm8
    0000006d: 	leaq	0x8(%r13,%rax,4), %rbx
    00000072: 	pxor	%xmm10, %xmm10
    00000077: 	movq	DATAat0x4d5e0(%rip), %xmm7
    0000007f: 	movsd	DATAat0x4d628(%rip), %xmm6
    00000087: 	leaq	DATAat0x4d004(%rip), %r15
    0000008e: 	movss	DATAat0x4d5d0(%rip), %xmm9
    00000097: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2183:
    000000a0: 	movaps	%xmm5, %xmm0
    000000a3: 	movaps	%xmm4, %xmm11
    000000a7: 	movaps	%xmm5, %xmm1
    000000aa: 	subss	%xmm4, %xmm0
    000000ae: 	movaps	%xmm4, %xmm2
    000000b1: 	addss	%xmm3, %xmm0
    000000b5: 	addss	%xmm0, %xmm11
    000000ba: 	addss	%xmm0, %xmm1
    000000be: 	addss	%xmm0, %xmm11
    000000c3: 	addss	%xmm0, %xmm1
    000000c7: 	movaps	%xmm11, %xmm0
    000000cb: 	addss	%xmm10, %xmm0
    000000d0: 	subss	%xmm1, %xmm0
    000000d4: 	addss	%xmm11, %xmm0
    000000d9: 	subss	%xmm1, %xmm0
    000000dd: 	addss	%xmm11, %xmm0
    000000e2: 	subss	%xmm1, %xmm0
    000000e6: 	addss	%xmm11, %xmm0
    000000eb: 	subss	%xmm1, %xmm0
    000000ef: 	addss	%xmm11, %xmm0
    000000f4: 	subss	%xmm1, %xmm0
    000000f8: 	addss	%xmm11, %xmm0
    000000fd: 	subss	%xmm1, %xmm0
    00000101: 	addss	%xmm11, %xmm0
    00000106: 	subss	%xmm1, %xmm0
    0000010a: 	addss	%xmm11, %xmm0
    0000010f: 	subss	%xmm1, %xmm0
    00000113: 	cmpl	$0x1, %r14d
    00000117: 	jle	.Ltmp2179 # Offset: 279
    0000011d: 	leaq	0x4(%r13), %rax
    00000121: 	nopl	(%rax) # Size: 7
.Ltmp2180:
    00000128: 	movaps	%xmm2, %xmm11
    0000012c: 	movss	(%rax), %xmm2
    00000130: 	addq	$0x4, %rax
    00000134: 	movaps	%xmm2, %xmm12
    00000138: 	movaps	%xmm2, %xmm1
    0000013b: 	subss	%xmm11, %xmm12
    00000140: 	addss	%xmm3, %xmm12
    00000145: 	addss	%xmm12, %xmm11
    0000014a: 	addss	%xmm12, %xmm1
    0000014f: 	addss	%xmm12, %xmm11
    00000154: 	addss	%xmm12, %xmm1
    00000159: 	addss	%xmm11, %xmm0
    0000015e: 	subss	%xmm1, %xmm0
    00000162: 	addss	%xmm11, %xmm0
    00000167: 	subss	%xmm1, %xmm0
    0000016b: 	addss	%xmm11, %xmm0
    00000170: 	subss	%xmm1, %xmm0
    00000174: 	addss	%xmm11, %xmm0
    00000179: 	subss	%xmm1, %xmm0
    0000017d: 	addss	%xmm11, %xmm0
    00000182: 	subss	%xmm1, %xmm0
    00000186: 	addss	%xmm11, %xmm0
    0000018b: 	subss	%xmm1, %xmm0
    0000018f: 	addss	%xmm11, %xmm0
    00000194: 	subss	%xmm1, %xmm0
    00000198: 	addss	%xmm11, %xmm0
    0000019d: 	subss	%xmm1, %xmm0
    000001a1: 	cmpq	%rax, %rbx
    000001a4: 	jne	.Ltmp2180 # Offset: 420
.Ltmp2179:
    000001a6: 	movaps	%xmm0, %xmm1
    000001a9: 	andps	%xmm9, %xmm1
    000001ad: 	cvtss2sd	%xmm1, %xmm1
    000001b1: 	comisd	%xmm8, %xmm1
    000001b6: 	jbe	.Ltmp2181 # Offset: 438
    000001b8: 	divss	%xmm0, %xmm0
.Ltmp2181:
    000001bc: 	cvtss2sd	%xmm0, %xmm0
    000001c0: 	andpd	%xmm7, %xmm0
    000001c4: 	comisd	%xmm0, %xmm6
    000001c8: 	jbe	.Ltmp2182 # Offset: 456
    000001ce: 	addl	$0x1, %r12d
    000001d2: 	cmpl	%edx, %r12d
    000001d5: 	jl	.Ltmp2183 # Offset: 469
.Ltmp2178:
    000001db: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001e2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001e9: 	subq	$0x20, %rax
    000001ed: 	cmpq	%rax, %rbx
    000001f0: 	je	.Ltmp2184 # Offset: 496
    000001f6: 	leaq	0x10(%rbx), %rdi
    000001fa: 	movq	0x8(%rbp), %r12
    000001fe: 	movq	%rdi, (%rbx)
    00000201: 	movq	(%rbp), %r13
    00000205: 	movq	%r13, %rax
    00000208: 	addq	%r12, %rax
    0000020b: 	je	.Ltmp2185 # Offset: 523
    0000020d: 	testq	%r13, %r13
    00000210: 	je	.Ltmp2186 # Offset: 528
.Ltmp2185:
    00000216: 	movq	%r12, 0x10(%rsp)
    0000021b: 	cmpq	$0xf, %r12
    0000021f: 	ja	.Ltmp2187 # Offset: 543
    00000225: 	cmpq	$0x1, %r12
    00000229: 	jne	.Ltmp2188 # Offset: 553
    0000022f: 	movzbl	(%r13), %eax
    00000234: 	movb	%al, 0x10(%rbx)
.Ltmp2191:
    00000237: 	movq	%r12, 0x8(%rbx)
    0000023b: 	movb	$0x0, (%rdi,%r12)
    00000240: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000247: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000024e: 	addq	$0x20, %rax
    00000252: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000259: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000260: 	je	.Ltmp2189 # Offset: 608
.Ltmp2192:
    00000266: 	movq	-0x20(%rax), %rbp
    0000026a: 	callq	clock@PLT # Offset: 618
    0000026f: 	movq	%rax, end_time(%rip)
    00000276: 	movq	0x18(%rsp), %rdx
    0000027b: 	subq	%fs:0x28, %rdx
    00000284: 	jne	.Ltmp2190 # Offset: 644
    0000028a: 	subq	start_time(%rip), %rax
    00000291: 	pxor	%xmm0, %xmm0
    00000295: 	movq	%rbp, %rdi
    00000298: 	cvtsi2sd	%rax, %xmm0
    0000029d: 	divsd	DATAat0x4d640(%rip), %xmm0
    000002a5: 	addq	$0x28, %rsp
    000002a9: 	popq	%rbx
    000002aa: 	popq	%rbp
    000002ab: 	popq	%r12
    000002ad: 	popq	%r13
    000002af: 	popq	%r14
    000002b1: 	popq	%r15
    000002b3: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 691
    000002b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2182:
    000002c0: 	movq	(%rbp), %rdx
    000002c4: 	movq	%r15, %rsi
    000002c7: 	movl	$0x1, %edi
    000002cc: 	xorl	%eax, %eax
    000002ce: 	movss	%xmm3, 0xc(%rsp)
    000002d4: 	addl	$0x1, %r12d
    000002d8: 	callq	__printf_chk@PLT # Offset: 728
    000002dd: 	movl	iterations(%rip), %edx
    000002e3: 	cmpl	%edx, %r12d
    000002e6: 	jge	.Ltmp2178 # Offset: 742
    000002ec: 	movq	DATAat0x4d620(%rip), %rax
    000002f3: 	movss	(%r13), %xmm4
    000002f9: 	movss	DATAat0x4d5d0(%rip), %xmm9
    00000302: 	pxor	%xmm10, %xmm10
    00000307: 	movss	0x4(%r13), %xmm5
    0000030d: 	movss	0xc(%rsp), %xmm3
    00000313: 	movq	%rax, %xmm8
    00000318: 	movq	DATAat0x4d628(%rip), %rax
    0000031f: 	movq	DATAat0x4d5e0(%rip), %xmm7
    00000327: 	movq	%rax, %xmm6
    0000032c: 	jmp	.Ltmp2183 # Offset: 812
.Ltmp2187:
    00000331: 	movq	%rbx, %rdi
    00000334: 	leaq	0x10(%rsp), %rsi
    00000339: 	xorl	%edx, %edx
    0000033b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 827
    00000340: 	movq	%rax, (%rbx)
    00000343: 	movq	%rax, %rdi
    00000346: 	movq	0x10(%rsp), %rax
    0000034b: 	movq	%rax, 0x10(%rbx)
.Ltmp2193:
    0000034f: 	movq	%r12, %rdx
    00000352: 	movq	%r13, %rsi
    00000355: 	callq	memcpy@PLT # Offset: 853
    0000035a: 	movq	0x10(%rsp), %r12
    0000035f: 	movq	(%rbx), %rdi
    00000362: 	jmp	.Ltmp2191 # Offset: 866
.Ltmp2184:
    00000367: 	movq	%rbp, %rsi
    0000036a: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000371: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 881
    00000376: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000037d: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000384: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000038b: 	jne	.Ltmp2192 # Offset: 907
.Ltmp2189:
    00000391: 	movq	-0x8(%rdx), %rax
    00000395: 	addq	$0x200, %rax
    0000039b: 	jmp	.Ltmp2192 # Offset: 923
.Ltmp2188:
    000003a0: 	testq	%r12, %r12
    000003a3: 	je	.Ltmp2191 # Offset: 931
    000003a9: 	jmp	.Ltmp2193 # Offset: 937
.Ltmp2190:
    000003ab: 	callq	__stack_chk_fail@PLT # Offset: 939
.Ltmp2186:
    000003b0: 	leaq	DATAat0x4d018(%rip), %rdi
    000003b7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 951
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSENIf14custom_cse_subIfELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSENIf14custom_cse_divIfELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 169
  State       : disassembled
  Address     : 0x22050
  Size        : 0x3bc
  MaxSize     : 0x3c0
  Offset      : 0x22050
  Section     : .text
  Orc Section : .local.text._Z9test_CSENIf14custom_cse_divIfELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0168:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rdx, %rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movss	%xmm0, 0xc(%rsp)
    00000021: 	movq	%fs:0x28, %rax
    0000002a: 	movq	%rax, 0x18(%rsp)
    0000002f: 	xorl	%eax, %eax
    00000031: 	callq	clock@PLT # Offset: 49
    00000036: 	movl	iterations(%rip), %edx
    0000003c: 	movss	0xc(%rsp), %xmm3
    00000042: 	movq	%rax, start_time(%rip)
    00000049: 	testl	%edx, %edx
    0000004b: 	jle	.Ltmp2194 # Offset: 75
    00000051: 	leal	-0x2(%r14), %eax
    00000055: 	movss	(%r13), %xmm4
    0000005b: 	movss	0x4(%r13), %xmm5
    00000061: 	xorl	%r12d, %r12d
    00000064: 	movsd	DATAat0x4d620(%rip), %xmm8
    0000006d: 	leaq	0x8(%r13,%rax,4), %rbx
    00000072: 	pxor	%xmm10, %xmm10
    00000077: 	movq	DATAat0x4d5e0(%rip), %xmm7
    0000007f: 	movsd	DATAat0x4d628(%rip), %xmm6
    00000087: 	leaq	DATAat0x4d004(%rip), %r15
    0000008e: 	movss	DATAat0x4d5d0(%rip), %xmm9
    00000097: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2199:
    000000a0: 	movaps	%xmm5, %xmm0
    000000a3: 	movaps	%xmm4, %xmm11
    000000a7: 	movaps	%xmm5, %xmm1
    000000aa: 	divss	%xmm4, %xmm0
    000000ae: 	movaps	%xmm4, %xmm2
    000000b1: 	addss	%xmm3, %xmm0
    000000b5: 	addss	%xmm0, %xmm11
    000000ba: 	addss	%xmm0, %xmm1
    000000be: 	addss	%xmm0, %xmm11
    000000c3: 	addss	%xmm0, %xmm1
    000000c7: 	movaps	%xmm11, %xmm0
    000000cb: 	addss	%xmm10, %xmm0
    000000d0: 	subss	%xmm1, %xmm0
    000000d4: 	addss	%xmm11, %xmm0
    000000d9: 	subss	%xmm1, %xmm0
    000000dd: 	addss	%xmm11, %xmm0
    000000e2: 	subss	%xmm1, %xmm0
    000000e6: 	addss	%xmm11, %xmm0
    000000eb: 	subss	%xmm1, %xmm0
    000000ef: 	addss	%xmm11, %xmm0
    000000f4: 	subss	%xmm1, %xmm0
    000000f8: 	addss	%xmm11, %xmm0
    000000fd: 	subss	%xmm1, %xmm0
    00000101: 	addss	%xmm11, %xmm0
    00000106: 	subss	%xmm1, %xmm0
    0000010a: 	addss	%xmm11, %xmm0
    0000010f: 	subss	%xmm1, %xmm0
    00000113: 	cmpl	$0x1, %r14d
    00000117: 	jle	.Ltmp2195 # Offset: 279
    0000011d: 	leaq	0x4(%r13), %rax
    00000121: 	nopl	(%rax) # Size: 7
.Ltmp2196:
    00000128: 	movaps	%xmm2, %xmm11
    0000012c: 	movss	(%rax), %xmm2
    00000130: 	addq	$0x4, %rax
    00000134: 	movaps	%xmm2, %xmm12
    00000138: 	movaps	%xmm2, %xmm1
    0000013b: 	divss	%xmm11, %xmm12
    00000140: 	addss	%xmm3, %xmm12
    00000145: 	addss	%xmm12, %xmm11
    0000014a: 	addss	%xmm12, %xmm1
    0000014f: 	addss	%xmm12, %xmm11
    00000154: 	addss	%xmm12, %xmm1
    00000159: 	addss	%xmm11, %xmm0
    0000015e: 	subss	%xmm1, %xmm0
    00000162: 	addss	%xmm11, %xmm0
    00000167: 	subss	%xmm1, %xmm0
    0000016b: 	addss	%xmm11, %xmm0
    00000170: 	subss	%xmm1, %xmm0
    00000174: 	addss	%xmm11, %xmm0
    00000179: 	subss	%xmm1, %xmm0
    0000017d: 	addss	%xmm11, %xmm0
    00000182: 	subss	%xmm1, %xmm0
    00000186: 	addss	%xmm11, %xmm0
    0000018b: 	subss	%xmm1, %xmm0
    0000018f: 	addss	%xmm11, %xmm0
    00000194: 	subss	%xmm1, %xmm0
    00000198: 	addss	%xmm11, %xmm0
    0000019d: 	subss	%xmm1, %xmm0
    000001a1: 	cmpq	%rax, %rbx
    000001a4: 	jne	.Ltmp2196 # Offset: 420
.Ltmp2195:
    000001a6: 	movaps	%xmm0, %xmm1
    000001a9: 	andps	%xmm9, %xmm1
    000001ad: 	cvtss2sd	%xmm1, %xmm1
    000001b1: 	comisd	%xmm8, %xmm1
    000001b6: 	jbe	.Ltmp2197 # Offset: 438
    000001b8: 	divss	%xmm0, %xmm0
.Ltmp2197:
    000001bc: 	cvtss2sd	%xmm0, %xmm0
    000001c0: 	andpd	%xmm7, %xmm0
    000001c4: 	comisd	%xmm0, %xmm6
    000001c8: 	jbe	.Ltmp2198 # Offset: 456
    000001ce: 	addl	$0x1, %r12d
    000001d2: 	cmpl	%edx, %r12d
    000001d5: 	jl	.Ltmp2199 # Offset: 469
.Ltmp2194:
    000001db: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001e2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001e9: 	subq	$0x20, %rax
    000001ed: 	cmpq	%rax, %rbx
    000001f0: 	je	.Ltmp2200 # Offset: 496
    000001f6: 	leaq	0x10(%rbx), %rdi
    000001fa: 	movq	0x8(%rbp), %r12
    000001fe: 	movq	%rdi, (%rbx)
    00000201: 	movq	(%rbp), %r13
    00000205: 	movq	%r13, %rax
    00000208: 	addq	%r12, %rax
    0000020b: 	je	.Ltmp2201 # Offset: 523
    0000020d: 	testq	%r13, %r13
    00000210: 	je	.Ltmp2202 # Offset: 528
.Ltmp2201:
    00000216: 	movq	%r12, 0x10(%rsp)
    0000021b: 	cmpq	$0xf, %r12
    0000021f: 	ja	.Ltmp2203 # Offset: 543
    00000225: 	cmpq	$0x1, %r12
    00000229: 	jne	.Ltmp2204 # Offset: 553
    0000022f: 	movzbl	(%r13), %eax
    00000234: 	movb	%al, 0x10(%rbx)
.Ltmp2207:
    00000237: 	movq	%r12, 0x8(%rbx)
    0000023b: 	movb	$0x0, (%rdi,%r12)
    00000240: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000247: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000024e: 	addq	$0x20, %rax
    00000252: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000259: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000260: 	je	.Ltmp2205 # Offset: 608
.Ltmp2208:
    00000266: 	movq	-0x20(%rax), %rbp
    0000026a: 	callq	clock@PLT # Offset: 618
    0000026f: 	movq	%rax, end_time(%rip)
    00000276: 	movq	0x18(%rsp), %rdx
    0000027b: 	subq	%fs:0x28, %rdx
    00000284: 	jne	.Ltmp2206 # Offset: 644
    0000028a: 	subq	start_time(%rip), %rax
    00000291: 	pxor	%xmm0, %xmm0
    00000295: 	movq	%rbp, %rdi
    00000298: 	cvtsi2sd	%rax, %xmm0
    0000029d: 	divsd	DATAat0x4d640(%rip), %xmm0
    000002a5: 	addq	$0x28, %rsp
    000002a9: 	popq	%rbx
    000002aa: 	popq	%rbp
    000002ab: 	popq	%r12
    000002ad: 	popq	%r13
    000002af: 	popq	%r14
    000002b1: 	popq	%r15
    000002b3: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 691
    000002b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2198:
    000002c0: 	movq	(%rbp), %rdx
    000002c4: 	movq	%r15, %rsi
    000002c7: 	movl	$0x1, %edi
    000002cc: 	xorl	%eax, %eax
    000002ce: 	movss	%xmm3, 0xc(%rsp)
    000002d4: 	addl	$0x1, %r12d
    000002d8: 	callq	__printf_chk@PLT # Offset: 728
    000002dd: 	movl	iterations(%rip), %edx
    000002e3: 	cmpl	%edx, %r12d
    000002e6: 	jge	.Ltmp2194 # Offset: 742
    000002ec: 	movq	DATAat0x4d620(%rip), %rax
    000002f3: 	movss	(%r13), %xmm4
    000002f9: 	movss	DATAat0x4d5d0(%rip), %xmm9
    00000302: 	pxor	%xmm10, %xmm10
    00000307: 	movss	0x4(%r13), %xmm5
    0000030d: 	movss	0xc(%rsp), %xmm3
    00000313: 	movq	%rax, %xmm8
    00000318: 	movq	DATAat0x4d628(%rip), %rax
    0000031f: 	movq	DATAat0x4d5e0(%rip), %xmm7
    00000327: 	movq	%rax, %xmm6
    0000032c: 	jmp	.Ltmp2199 # Offset: 812
.Ltmp2203:
    00000331: 	movq	%rbx, %rdi
    00000334: 	leaq	0x10(%rsp), %rsi
    00000339: 	xorl	%edx, %edx
    0000033b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 827
    00000340: 	movq	%rax, (%rbx)
    00000343: 	movq	%rax, %rdi
    00000346: 	movq	0x10(%rsp), %rax
    0000034b: 	movq	%rax, 0x10(%rbx)
.Ltmp2209:
    0000034f: 	movq	%r12, %rdx
    00000352: 	movq	%r13, %rsi
    00000355: 	callq	memcpy@PLT # Offset: 853
    0000035a: 	movq	0x10(%rsp), %r12
    0000035f: 	movq	(%rbx), %rdi
    00000362: 	jmp	.Ltmp2207 # Offset: 866
.Ltmp2200:
    00000367: 	movq	%rbp, %rsi
    0000036a: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000371: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 881
    00000376: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000037d: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000384: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000038b: 	jne	.Ltmp2208 # Offset: 907
.Ltmp2205:
    00000391: 	movq	-0x8(%rdx), %rax
    00000395: 	addq	$0x200, %rax
    0000039b: 	jmp	.Ltmp2208 # Offset: 923
.Ltmp2204:
    000003a0: 	testq	%r12, %r12
    000003a3: 	je	.Ltmp2207 # Offset: 931
    000003a9: 	jmp	.Ltmp2209 # Offset: 937
.Ltmp2206:
    000003ab: 	callq	__stack_chk_fail@PLT # Offset: 939
.Ltmp2202:
    000003b0: 	leaq	DATAat0x4d018(%rip), %rdi
    000003b7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 951
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSENIf14custom_cse_divIfELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSENIf14custom_cse_mulIfELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 170
  State       : disassembled
  Address     : 0x22410
  Size        : 0x3bc
  MaxSize     : 0x3c0
  Offset      : 0x22410
  Section     : .text
  Orc Section : .local.text._Z9test_CSENIf14custom_cse_mulIfELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0169:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rdx, %rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movss	%xmm0, 0xc(%rsp)
    00000021: 	movq	%fs:0x28, %rax
    0000002a: 	movq	%rax, 0x18(%rsp)
    0000002f: 	xorl	%eax, %eax
    00000031: 	callq	clock@PLT # Offset: 49
    00000036: 	movl	iterations(%rip), %edx
    0000003c: 	movss	0xc(%rsp), %xmm3
    00000042: 	movq	%rax, start_time(%rip)
    00000049: 	testl	%edx, %edx
    0000004b: 	jle	.Ltmp2210 # Offset: 75
    00000051: 	leal	-0x2(%r14), %eax
    00000055: 	movss	(%r13), %xmm4
    0000005b: 	movss	0x4(%r13), %xmm5
    00000061: 	xorl	%r12d, %r12d
    00000064: 	movsd	DATAat0x4d620(%rip), %xmm8
    0000006d: 	leaq	0x8(%r13,%rax,4), %rbx
    00000072: 	pxor	%xmm10, %xmm10
    00000077: 	movq	DATAat0x4d5e0(%rip), %xmm7
    0000007f: 	movsd	DATAat0x4d628(%rip), %xmm6
    00000087: 	leaq	DATAat0x4d004(%rip), %r15
    0000008e: 	movss	DATAat0x4d5d0(%rip), %xmm9
    00000097: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2215:
    000000a0: 	movaps	%xmm4, %xmm0
    000000a3: 	movaps	%xmm4, %xmm11
    000000a7: 	movaps	%xmm5, %xmm1
    000000aa: 	mulss	%xmm5, %xmm0
    000000ae: 	movaps	%xmm4, %xmm2
    000000b1: 	addss	%xmm3, %xmm0
    000000b5: 	addss	%xmm0, %xmm11
    000000ba: 	addss	%xmm0, %xmm1
    000000be: 	addss	%xmm0, %xmm11
    000000c3: 	addss	%xmm0, %xmm1
    000000c7: 	movaps	%xmm11, %xmm0
    000000cb: 	addss	%xmm10, %xmm0
    000000d0: 	subss	%xmm1, %xmm0
    000000d4: 	addss	%xmm11, %xmm0
    000000d9: 	subss	%xmm1, %xmm0
    000000dd: 	addss	%xmm11, %xmm0
    000000e2: 	subss	%xmm1, %xmm0
    000000e6: 	addss	%xmm11, %xmm0
    000000eb: 	subss	%xmm1, %xmm0
    000000ef: 	addss	%xmm11, %xmm0
    000000f4: 	subss	%xmm1, %xmm0
    000000f8: 	addss	%xmm11, %xmm0
    000000fd: 	subss	%xmm1, %xmm0
    00000101: 	addss	%xmm11, %xmm0
    00000106: 	subss	%xmm1, %xmm0
    0000010a: 	addss	%xmm11, %xmm0
    0000010f: 	subss	%xmm1, %xmm0
    00000113: 	cmpl	$0x1, %r14d
    00000117: 	jle	.Ltmp2211 # Offset: 279
    0000011d: 	leaq	0x4(%r13), %rax
    00000121: 	nopl	(%rax) # Size: 7
.Ltmp2212:
    00000128: 	movaps	%xmm2, %xmm11
    0000012c: 	movss	(%rax), %xmm2
    00000130: 	addq	$0x4, %rax
    00000134: 	movaps	%xmm2, %xmm12
    00000138: 	movaps	%xmm2, %xmm1
    0000013b: 	mulss	%xmm11, %xmm12
    00000140: 	addss	%xmm3, %xmm12
    00000145: 	addss	%xmm12, %xmm11
    0000014a: 	addss	%xmm12, %xmm1
    0000014f: 	addss	%xmm12, %xmm11
    00000154: 	addss	%xmm12, %xmm1
    00000159: 	addss	%xmm11, %xmm0
    0000015e: 	subss	%xmm1, %xmm0
    00000162: 	addss	%xmm11, %xmm0
    00000167: 	subss	%xmm1, %xmm0
    0000016b: 	addss	%xmm11, %xmm0
    00000170: 	subss	%xmm1, %xmm0
    00000174: 	addss	%xmm11, %xmm0
    00000179: 	subss	%xmm1, %xmm0
    0000017d: 	addss	%xmm11, %xmm0
    00000182: 	subss	%xmm1, %xmm0
    00000186: 	addss	%xmm11, %xmm0
    0000018b: 	subss	%xmm1, %xmm0
    0000018f: 	addss	%xmm11, %xmm0
    00000194: 	subss	%xmm1, %xmm0
    00000198: 	addss	%xmm11, %xmm0
    0000019d: 	subss	%xmm1, %xmm0
    000001a1: 	cmpq	%rax, %rbx
    000001a4: 	jne	.Ltmp2212 # Offset: 420
.Ltmp2211:
    000001a6: 	movaps	%xmm0, %xmm1
    000001a9: 	andps	%xmm9, %xmm1
    000001ad: 	cvtss2sd	%xmm1, %xmm1
    000001b1: 	comisd	%xmm8, %xmm1
    000001b6: 	jbe	.Ltmp2213 # Offset: 438
    000001b8: 	divss	%xmm0, %xmm0
.Ltmp2213:
    000001bc: 	cvtss2sd	%xmm0, %xmm0
    000001c0: 	andpd	%xmm7, %xmm0
    000001c4: 	comisd	%xmm0, %xmm6
    000001c8: 	jbe	.Ltmp2214 # Offset: 456
    000001ce: 	addl	$0x1, %r12d
    000001d2: 	cmpl	%edx, %r12d
    000001d5: 	jl	.Ltmp2215 # Offset: 469
.Ltmp2210:
    000001db: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001e2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001e9: 	subq	$0x20, %rax
    000001ed: 	cmpq	%rax, %rbx
    000001f0: 	je	.Ltmp2216 # Offset: 496
    000001f6: 	leaq	0x10(%rbx), %rdi
    000001fa: 	movq	0x8(%rbp), %r12
    000001fe: 	movq	%rdi, (%rbx)
    00000201: 	movq	(%rbp), %r13
    00000205: 	movq	%r13, %rax
    00000208: 	addq	%r12, %rax
    0000020b: 	je	.Ltmp2217 # Offset: 523
    0000020d: 	testq	%r13, %r13
    00000210: 	je	.Ltmp2218 # Offset: 528
.Ltmp2217:
    00000216: 	movq	%r12, 0x10(%rsp)
    0000021b: 	cmpq	$0xf, %r12
    0000021f: 	ja	.Ltmp2219 # Offset: 543
    00000225: 	cmpq	$0x1, %r12
    00000229: 	jne	.Ltmp2220 # Offset: 553
    0000022f: 	movzbl	(%r13), %eax
    00000234: 	movb	%al, 0x10(%rbx)
.Ltmp2223:
    00000237: 	movq	%r12, 0x8(%rbx)
    0000023b: 	movb	$0x0, (%rdi,%r12)
    00000240: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000247: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000024e: 	addq	$0x20, %rax
    00000252: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000259: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000260: 	je	.Ltmp2221 # Offset: 608
.Ltmp2224:
    00000266: 	movq	-0x20(%rax), %rbp
    0000026a: 	callq	clock@PLT # Offset: 618
    0000026f: 	movq	%rax, end_time(%rip)
    00000276: 	movq	0x18(%rsp), %rdx
    0000027b: 	subq	%fs:0x28, %rdx
    00000284: 	jne	.Ltmp2222 # Offset: 644
    0000028a: 	subq	start_time(%rip), %rax
    00000291: 	pxor	%xmm0, %xmm0
    00000295: 	movq	%rbp, %rdi
    00000298: 	cvtsi2sd	%rax, %xmm0
    0000029d: 	divsd	DATAat0x4d640(%rip), %xmm0
    000002a5: 	addq	$0x28, %rsp
    000002a9: 	popq	%rbx
    000002aa: 	popq	%rbp
    000002ab: 	popq	%r12
    000002ad: 	popq	%r13
    000002af: 	popq	%r14
    000002b1: 	popq	%r15
    000002b3: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 691
    000002b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2214:
    000002c0: 	movq	(%rbp), %rdx
    000002c4: 	movq	%r15, %rsi
    000002c7: 	movl	$0x1, %edi
    000002cc: 	xorl	%eax, %eax
    000002ce: 	movss	%xmm3, 0xc(%rsp)
    000002d4: 	addl	$0x1, %r12d
    000002d8: 	callq	__printf_chk@PLT # Offset: 728
    000002dd: 	movl	iterations(%rip), %edx
    000002e3: 	cmpl	%edx, %r12d
    000002e6: 	jge	.Ltmp2210 # Offset: 742
    000002ec: 	movq	DATAat0x4d620(%rip), %rax
    000002f3: 	movss	(%r13), %xmm4
    000002f9: 	movss	DATAat0x4d5d0(%rip), %xmm9
    00000302: 	pxor	%xmm10, %xmm10
    00000307: 	movss	0x4(%r13), %xmm5
    0000030d: 	movss	0xc(%rsp), %xmm3
    00000313: 	movq	%rax, %xmm8
    00000318: 	movq	DATAat0x4d628(%rip), %rax
    0000031f: 	movq	DATAat0x4d5e0(%rip), %xmm7
    00000327: 	movq	%rax, %xmm6
    0000032c: 	jmp	.Ltmp2215 # Offset: 812
.Ltmp2219:
    00000331: 	movq	%rbx, %rdi
    00000334: 	leaq	0x10(%rsp), %rsi
    00000339: 	xorl	%edx, %edx
    0000033b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 827
    00000340: 	movq	%rax, (%rbx)
    00000343: 	movq	%rax, %rdi
    00000346: 	movq	0x10(%rsp), %rax
    0000034b: 	movq	%rax, 0x10(%rbx)
.Ltmp2225:
    0000034f: 	movq	%r12, %rdx
    00000352: 	movq	%r13, %rsi
    00000355: 	callq	memcpy@PLT # Offset: 853
    0000035a: 	movq	0x10(%rsp), %r12
    0000035f: 	movq	(%rbx), %rdi
    00000362: 	jmp	.Ltmp2223 # Offset: 866
.Ltmp2216:
    00000367: 	movq	%rbp, %rsi
    0000036a: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000371: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 881
    00000376: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000037d: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000384: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000038b: 	jne	.Ltmp2224 # Offset: 907
.Ltmp2221:
    00000391: 	movq	-0x8(%rdx), %rax
    00000395: 	addq	$0x200, %rax
    0000039b: 	jmp	.Ltmp2224 # Offset: 923
.Ltmp2220:
    000003a0: 	testq	%r12, %r12
    000003a3: 	je	.Ltmp2223 # Offset: 931
    000003a9: 	jmp	.Ltmp2225 # Offset: 937
.Ltmp2222:
    000003ab: 	callq	__stack_chk_fail@PLT # Offset: 939
.Ltmp2218:
    000003b0: 	leaq	DATAat0x4d018(%rip), %rdi
    000003b7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 951
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSENIf14custom_cse_mulIfELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSENIh14custom_cse_mixIhELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 171
  State       : disassembled
  Address     : 0x227d0
  Size        : 0x2c4
  MaxSize     : 0x2d0
  Offset      : 0x227d0
  Section     : .text
  Orc Section : .local.text._Z9test_CSENIh14custom_cse_mixIhELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0170:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%esi, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movl	%edx, %ebx
    00000016: 	subq	$0x28, %rsp
    0000001a: 	movq	%rcx, 0x8(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x18(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r11d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r11d, %r11d
    00000045: 	jle	.Ltmp2226 # Offset: 69
    0000004b: 	leal	-0x2(%r13), %eax
    0000004f: 	movzbl	(%r12), %r10d
    00000054: 	movzbl	0x1(%r12), %r9d
    0000005a: 	xorl	%r14d, %r14d
    0000005d: 	leaq	0x2(%r12,%rax), %rbp
    00000062: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2230:
    00000068: 	movl	%r9d, %ecx
    0000006b: 	movzbl	%r10b, %edi
    0000006f: 	movl	%r10d, %edx
    00000072: 	subl	%r10d, %ecx
    00000075: 	movl	%ecx, %eax
    00000077: 	imull	%ebx, %eax
    0000007a: 	movl	%eax, %ecx
    0000007c: 	movzbl	%r9b, %eax
    00000080: 	divb	%bl
    00000082: 	addl	%eax, %ecx
    00000084: 	movzbl	%r9b, %eax
    00000088: 	movzbl	%cl, %ecx
    0000008b: 	leal	(%rax,%rcx,2), %eax
    0000008e: 	leal	(%rdi,%rcx,2), %ecx
    00000091: 	shll	$0x3, %ecx
    00000094: 	subl	%eax, %ecx
    00000096: 	subl	%eax, %ecx
    00000098: 	subl	%eax, %ecx
    0000009a: 	subl	%eax, %ecx
    0000009c: 	subl	%eax, %ecx
    0000009e: 	subl	%eax, %ecx
    000000a0: 	addl	%eax, %eax
    000000a2: 	subl	%eax, %ecx
    000000a4: 	cmpl	$0x1, %r13d
    000000a8: 	jle	.Ltmp2227 # Offset: 168
    000000aa: 	leaq	0x1(%r12), %rsi
    000000af: 	nop # Size: 1
.Ltmp2228:
    000000b0: 	movl	%edi, %r15d
    000000b3: 	movl	%edx, %edi
    000000b5: 	movzbl	(%rsi), %edx
    000000b8: 	addq	$0x1, %rsi
    000000bc: 	movl	%edx, %eax
    000000be: 	subl	%edi, %eax
    000000c0: 	imull	%ebx, %eax
    000000c3: 	movl	%eax, %edi
    000000c5: 	movzbl	%dl, %eax
    000000c8: 	divb	%bl
    000000ca: 	addl	%edi, %eax
    000000cc: 	movzbl	%dl, %edi
    000000cf: 	movzbl	%al, %eax
    000000d2: 	leal	(%rdi,%rax,2), %r8d
    000000d6: 	leal	(%r15,%rax,2), %eax
    000000da: 	shll	$0x3, %eax
    000000dd: 	subl	%r8d, %eax
    000000e0: 	subl	%r8d, %eax
    000000e3: 	subl	%r8d, %eax
    000000e6: 	subl	%r8d, %eax
    000000e9: 	subl	%r8d, %eax
    000000ec: 	subl	%r8d, %eax
    000000ef: 	addl	%r8d, %r8d
    000000f2: 	subl	%r8d, %eax
    000000f5: 	addl	%eax, %ecx
    000000f7: 	cmpq	%rbp, %rsi
    000000fa: 	jne	.Ltmp2228 # Offset: 250
.Ltmp2227:
    000000fc: 	testb	%cl, %cl
    000000fe: 	jne	.Ltmp2229 # Offset: 254
    00000104: 	addl	$0x1, %r14d
    00000108: 	cmpl	%r11d, %r14d
    0000010b: 	jl	.Ltmp2230 # Offset: 267
.Ltmp2226:
    00000111: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000118: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000011f: 	subq	$0x20, %rax
    00000123: 	cmpq	%rax, %rbx
    00000126: 	je	.Ltmp2231 # Offset: 294
    0000012c: 	movq	0x8(%rsp), %rax
    00000131: 	leaq	0x10(%rbx), %rdi
    00000135: 	movq	%rdi, (%rbx)
    00000138: 	movq	(%rax), %rbp
    0000013b: 	movq	0x8(%rax), %r12
    0000013f: 	movq	%rbp, %rax
    00000142: 	addq	%r12, %rax
    00000145: 	je	.Ltmp2232 # Offset: 325
    00000147: 	testq	%rbp, %rbp
    0000014a: 	je	.Ltmp2233 # Offset: 330
.Ltmp2232:
    00000150: 	movq	%r12, 0x10(%rsp)
    00000155: 	cmpq	$0xf, %r12
    00000159: 	ja	.Ltmp2234 # Offset: 345
    0000015f: 	cmpq	$0x1, %r12
    00000163: 	jne	.Ltmp2235 # Offset: 355
    00000169: 	movzbl	(%rbp), %eax
    0000016d: 	movb	%al, 0x10(%rbx)
.Ltmp2238:
    00000170: 	movq	%r12, 0x8(%rbx)
    00000174: 	movb	$0x0, (%rdi,%r12)
    00000179: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000180: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000187: 	addq	$0x20, %rax
    0000018b: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000192: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000199: 	je	.Ltmp2236 # Offset: 409
.Ltmp2239:
    0000019f: 	movq	-0x20(%rax), %rbp
    000001a3: 	callq	clock@PLT # Offset: 419
    000001a8: 	movq	%rax, end_time(%rip)
    000001af: 	movq	0x18(%rsp), %rdx
    000001b4: 	subq	%fs:0x28, %rdx
    000001bd: 	jne	.Ltmp2237 # Offset: 445
    000001c3: 	subq	start_time(%rip), %rax
    000001ca: 	pxor	%xmm0, %xmm0
    000001ce: 	movq	%rbp, %rdi
    000001d1: 	cvtsi2sd	%rax, %xmm0
    000001d6: 	divsd	DATAat0x4d640(%rip), %xmm0
    000001de: 	addq	$0x28, %rsp
    000001e2: 	popq	%rbx
    000001e3: 	popq	%rbp
    000001e4: 	popq	%r12
    000001e6: 	popq	%r13
    000001e8: 	popq	%r14
    000001ea: 	popq	%r15
    000001ec: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 492
    000001f1: 	nopl	(%rax) # Size: 7
.Ltmp2229:
    000001f8: 	movq	0x8(%rsp), %rax
    000001fd: 	leaq	DATAat0x4d004(%rip), %rsi
    00000204: 	movl	$0x1, %edi
    00000209: 	addl	$0x1, %r14d
    0000020d: 	movq	(%rax), %rdx
    00000210: 	xorl	%eax, %eax
    00000212: 	callq	__printf_chk@PLT # Offset: 530
    00000217: 	movl	iterations(%rip), %r11d
    0000021e: 	cmpl	%r11d, %r14d
    00000221: 	jge	.Ltmp2226 # Offset: 545
    00000227: 	movzbl	(%r12), %r10d
    0000022c: 	movzbl	0x1(%r12), %r9d
    00000232: 	jmp	.Ltmp2230 # Offset: 562
.Ltmp2234:
    00000237: 	movq	%rbx, %rdi
    0000023a: 	leaq	0x10(%rsp), %rsi
    0000023f: 	xorl	%edx, %edx
    00000241: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 577
    00000246: 	movq	%rax, (%rbx)
    00000249: 	movq	%rax, %rdi
    0000024c: 	movq	0x10(%rsp), %rax
    00000251: 	movq	%rax, 0x10(%rbx)
.Ltmp2240:
    00000255: 	movq	%r12, %rdx
    00000258: 	movq	%rbp, %rsi
    0000025b: 	callq	memcpy@PLT # Offset: 603
    00000260: 	movq	0x10(%rsp), %r12
    00000265: 	movq	(%rbx), %rdi
    00000268: 	jmp	.Ltmp2238 # Offset: 616
.Ltmp2231:
    0000026d: 	movq	0x8(%rsp), %rsi
    00000272: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000279: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 633
    0000027e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000285: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000028c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000293: 	jne	.Ltmp2239 # Offset: 659
.Ltmp2236:
    00000299: 	movq	-0x8(%rdx), %rax
    0000029d: 	addq	$0x200, %rax
    000002a3: 	jmp	.Ltmp2239 # Offset: 675
.Ltmp2235:
    000002a8: 	testq	%r12, %r12
    000002ab: 	je	.Ltmp2238 # Offset: 683
    000002b1: 	jmp	.Ltmp2240 # Offset: 689
.Ltmp2237:
    000002b3: 	callq	__stack_chk_fail@PLT # Offset: 691
.Ltmp2233:
    000002b8: 	leaq	DATAat0x4d018(%rip), %rdi
    000002bf: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 703
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSENIh14custom_cse_mixIhELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSENIa14custom_cse_mixIaELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 172
  State       : disassembled
  Address     : 0x22aa0
  Size        : 0x2c3
  MaxSize     : 0x2d0
  Offset      : 0x22aa0
  Section     : .text
  Orc Section : .local.text._Z9test_CSENIa14custom_cse_mixIaELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0171:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdi, %r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movl	%edx, %ebp
    00000012: 	pushq	%rbx
    00000013: 	subq	$0x28, %rsp
    00000017: 	movl	%esi, 0x4(%rsp)
    0000001b: 	movq	%rcx, 0x8(%rsp)
    00000020: 	movq	%fs:0x28, %rax
    00000029: 	movq	%rax, 0x18(%rsp)
    0000002e: 	xorl	%eax, %eax
    00000030: 	callq	clock@PLT # Offset: 48
    00000035: 	movl	iterations(%rip), %r11d
    0000003c: 	movq	%rax, start_time(%rip)
    00000043: 	testl	%r11d, %r11d
    00000046: 	jle	.Ltmp2241 # Offset: 70
    0000004c: 	movl	0x4(%rsp), %eax
    00000050: 	movzbl	(%r13), %r15d
    00000055: 	movsbl	%bpl, %ebx
    00000059: 	xorl	%r14d, %r14d
    0000005c: 	movsbl	0x1(%r13), %r10d
    00000061: 	subl	$0x2, %eax
    00000064: 	leaq	0x2(%r13,%rax), %r12
    00000069: 	nopl	(%rax) # Size: 7
.Ltmp2245:
    00000070: 	movsbl	%r15b, %esi
    00000074: 	movl	%r10d, %ecx
    00000077: 	subl	%esi, %ecx
    00000079: 	movl	%ecx, %eax
    0000007b: 	imull	%ebp, %eax
    0000007e: 	movl	%eax, %ecx
    00000080: 	movl	%r10d, %eax
    00000083: 	cltd
    00000084: 	idivl	%ebx
    00000086: 	addl	%ecx, %eax
    00000088: 	movsbl	%al, %eax
    0000008b: 	leal	(%rsi,%rax,2), %ecx
    0000008e: 	leal	(%r10,%rax,2), %edx
    00000092: 	shll	$0x3, %ecx
    00000095: 	subl	%edx, %ecx
    00000097: 	subl	%edx, %ecx
    00000099: 	subl	%edx, %ecx
    0000009b: 	subl	%edx, %ecx
    0000009d: 	subl	%edx, %ecx
    0000009f: 	subl	%edx, %ecx
    000000a1: 	addl	%edx, %edx
    000000a3: 	subl	%edx, %ecx
    000000a5: 	cmpl	$0x1, 0x4(%rsp)
    000000aa: 	jle	.Ltmp2242 # Offset: 170
    000000ac: 	leaq	0x1(%r13), %rdi
    000000b0: 	movl	%ecx, %r8d
    000000b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2243:
    000000b8: 	movl	%esi, %ecx
    000000ba: 	movsbl	(%rdi), %esi
    000000bd: 	addq	$0x1, %rdi
    000000c1: 	movl	%esi, %r9d
    000000c4: 	subl	%ecx, %r9d
    000000c7: 	movl	%r9d, %eax
    000000ca: 	imull	%ebp, %eax
    000000cd: 	movl	%eax, %r9d
    000000d0: 	movl	%esi, %eax
    000000d2: 	cltd
    000000d3: 	idivl	%ebx
    000000d5: 	addl	%r9d, %eax
    000000d8: 	movsbl	%al, %eax
    000000db: 	leal	(%rcx,%rax,2), %ecx
    000000de: 	leal	(%rsi,%rax,2), %edx
    000000e1: 	leal	(%r8,%rcx,8), %ecx
    000000e5: 	subl	%edx, %ecx
    000000e7: 	subl	%edx, %ecx
    000000e9: 	subl	%edx, %ecx
    000000eb: 	subl	%edx, %ecx
    000000ed: 	subl	%edx, %ecx
    000000ef: 	subl	%edx, %ecx
    000000f1: 	subl	%edx, %ecx
    000000f3: 	subl	%edx, %ecx
    000000f5: 	movl	%ecx, %r8d
    000000f8: 	cmpq	%r12, %rdi
    000000fb: 	jne	.Ltmp2243 # Offset: 251
.Ltmp2242:
    000000fd: 	testb	%cl, %cl
    000000ff: 	jne	.Ltmp2244 # Offset: 255
    00000105: 	addl	$0x1, %r14d
    00000109: 	cmpl	%r11d, %r14d
    0000010c: 	jl	.Ltmp2245 # Offset: 268
.Ltmp2241:
    00000112: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000119: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000120: 	subq	$0x20, %rax
    00000124: 	cmpq	%rax, %rbx
    00000127: 	je	.Ltmp2246 # Offset: 295
    0000012d: 	movq	0x8(%rsp), %rax
    00000132: 	leaq	0x10(%rbx), %rdi
    00000136: 	movq	%rdi, (%rbx)
    00000139: 	movq	(%rax), %rbp
    0000013c: 	movq	0x8(%rax), %r12
    00000140: 	movq	%rbp, %rax
    00000143: 	addq	%r12, %rax
    00000146: 	je	.Ltmp2247 # Offset: 326
    00000148: 	testq	%rbp, %rbp
    0000014b: 	je	.Ltmp2248 # Offset: 331
.Ltmp2247:
    00000151: 	movq	%r12, 0x10(%rsp)
    00000156: 	cmpq	$0xf, %r12
    0000015a: 	ja	.Ltmp2249 # Offset: 346
    00000160: 	cmpq	$0x1, %r12
    00000164: 	jne	.Ltmp2250 # Offset: 356
    0000016a: 	movzbl	(%rbp), %eax
    0000016e: 	movb	%al, 0x10(%rbx)
.Ltmp2253:
    00000171: 	movq	%r12, 0x8(%rbx)
    00000175: 	movb	$0x0, (%rdi,%r12)
    0000017a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000181: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000188: 	addq	$0x20, %rax
    0000018c: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000193: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000019a: 	je	.Ltmp2251 # Offset: 410
.Ltmp2254:
    000001a0: 	movq	-0x20(%rax), %rbp
    000001a4: 	callq	clock@PLT # Offset: 420
    000001a9: 	movq	%rax, end_time(%rip)
    000001b0: 	movq	0x18(%rsp), %rdx
    000001b5: 	subq	%fs:0x28, %rdx
    000001be: 	jne	.Ltmp2252 # Offset: 446
    000001c4: 	subq	start_time(%rip), %rax
    000001cb: 	pxor	%xmm0, %xmm0
    000001cf: 	movq	%rbp, %rdi
    000001d2: 	cvtsi2sd	%rax, %xmm0
    000001d7: 	divsd	DATAat0x4d640(%rip), %xmm0
    000001df: 	addq	$0x28, %rsp
    000001e3: 	popq	%rbx
    000001e4: 	popq	%rbp
    000001e5: 	popq	%r12
    000001e7: 	popq	%r13
    000001e9: 	popq	%r14
    000001eb: 	popq	%r15
    000001ed: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 493
    000001f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2244:
    000001f8: 	movq	0x8(%rsp), %rax
    000001fd: 	leaq	DATAat0x4d004(%rip), %rsi
    00000204: 	movl	$0x1, %edi
    00000209: 	addl	$0x1, %r14d
    0000020d: 	movq	(%rax), %rdx
    00000210: 	xorl	%eax, %eax
    00000212: 	callq	__printf_chk@PLT # Offset: 530
    00000217: 	movl	iterations(%rip), %r11d
    0000021e: 	cmpl	%r11d, %r14d
    00000221: 	jge	.Ltmp2241 # Offset: 545
    00000227: 	movzbl	(%r13), %r15d
    0000022c: 	movsbl	0x1(%r13), %r10d
    00000231: 	jmp	.Ltmp2245 # Offset: 561
.Ltmp2249:
    00000236: 	movq	%rbx, %rdi
    00000239: 	leaq	0x10(%rsp), %rsi
    0000023e: 	xorl	%edx, %edx
    00000240: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 576
    00000245: 	movq	%rax, (%rbx)
    00000248: 	movq	%rax, %rdi
    0000024b: 	movq	0x10(%rsp), %rax
    00000250: 	movq	%rax, 0x10(%rbx)
.Ltmp2255:
    00000254: 	movq	%r12, %rdx
    00000257: 	movq	%rbp, %rsi
    0000025a: 	callq	memcpy@PLT # Offset: 602
    0000025f: 	movq	0x10(%rsp), %r12
    00000264: 	movq	(%rbx), %rdi
    00000267: 	jmp	.Ltmp2253 # Offset: 615
.Ltmp2246:
    0000026c: 	movq	0x8(%rsp), %rsi
    00000271: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000278: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 632
    0000027d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000284: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000028b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000292: 	jne	.Ltmp2254 # Offset: 658
.Ltmp2251:
    00000298: 	movq	-0x8(%rdx), %rax
    0000029c: 	addq	$0x200, %rax
    000002a2: 	jmp	.Ltmp2254 # Offset: 674
.Ltmp2250:
    000002a7: 	testq	%r12, %r12
    000002aa: 	je	.Ltmp2253 # Offset: 682
    000002b0: 	jmp	.Ltmp2255 # Offset: 688
.Ltmp2252:
    000002b2: 	callq	__stack_chk_fail@PLT # Offset: 690
.Ltmp2248:
    000002b7: 	leaq	DATAat0x4d018(%rip), %rdi
    000002be: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 702
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSENIa14custom_cse_mixIaELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSENIj14custom_cse_mixIjELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 173
  State       : disassembled
  Address     : 0x22d70
  Size        : 0x299
  MaxSize     : 0x2a0
  Offset      : 0x22d70
  Section     : .text
  Orc Section : .local.text._Z9test_CSENIj14custom_cse_mixIjELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0172:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%esi, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movl	%edx, %ebx
    00000016: 	subq	$0x28, %rsp
    0000001a: 	movq	%rcx, 0x8(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x18(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r15d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r15d, %r15d
    00000045: 	jle	.Ltmp2256 # Offset: 69
    0000004b: 	leal	-0x2(%r13), %eax
    0000004f: 	xorl	%r14d, %r14d
    00000052: 	leaq	0x8(%r12,%rax,4), %rbp
.Ltmp2268:
    00000057: 	movl	(%r12), %r11d
    0000005b: 	movl	0x4(%r12), %r10d
.Ltmp2260:
    00000060: 	movl	%r10d, %eax
    00000063: 	xorl	%edx, %edx
    00000065: 	movl	%r10d, %esi
    00000068: 	movl	%r11d, %ecx
    0000006b: 	divl	%ebx
    0000006d: 	subl	%r11d, %esi
    00000070: 	imull	%ebx, %esi
    00000073: 	addl	%esi, %eax
    00000075: 	addl	%eax, %eax
    00000077: 	leal	(%r11,%rax), %esi
    0000007b: 	leal	(%r10,%rax), %edx
    0000007f: 	shll	$0x3, %esi
    00000082: 	subl	%edx, %esi
    00000084: 	subl	%edx, %esi
    00000086: 	subl	%edx, %esi
    00000088: 	subl	%edx, %esi
    0000008a: 	subl	%edx, %esi
    0000008c: 	subl	%edx, %esi
    0000008e: 	addl	%edx, %edx
    00000090: 	subl	%edx, %esi
    00000092: 	cmpl	$0x1, %r13d
    00000096: 	jle	.Ltmp2257 # Offset: 150
    00000098: 	leaq	0x4(%r12), %rdi
    0000009d: 	nopl	(%rax) # Size: 3
.Ltmp2258:
    000000a0: 	movl	%ecx, %r8d
    000000a3: 	movl	(%rdi), %ecx
    000000a5: 	xorl	%edx, %edx
    000000a7: 	addq	$0x4, %rdi
    000000ab: 	movl	%ecx, %eax
    000000ad: 	movl	%ecx, %r9d
    000000b0: 	divl	%ebx
    000000b2: 	subl	%r8d, %r9d
    000000b5: 	imull	%ebx, %r9d
    000000b9: 	addl	%r9d, %eax
    000000bc: 	addl	%eax, %eax
    000000be: 	leal	(%rax,%rcx), %edx
    000000c1: 	addl	%r8d, %eax
    000000c4: 	shll	$0x3, %eax
    000000c7: 	subl	%edx, %eax
    000000c9: 	subl	%edx, %eax
    000000cb: 	subl	%edx, %eax
    000000cd: 	subl	%edx, %eax
    000000cf: 	subl	%edx, %eax
    000000d1: 	subl	%edx, %eax
    000000d3: 	addl	%edx, %edx
    000000d5: 	subl	%edx, %eax
    000000d7: 	addl	%eax, %esi
    000000d9: 	cmpq	%rdi, %rbp
    000000dc: 	jne	.Ltmp2258 # Offset: 220
.Ltmp2257:
    000000de: 	testl	%esi, %esi
    000000e0: 	jne	.Ltmp2259 # Offset: 224
    000000e6: 	addl	$0x1, %r14d
    000000ea: 	cmpl	%r15d, %r14d
    000000ed: 	jl	.Ltmp2260 # Offset: 237
.Ltmp2256:
    000000f3: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000fa: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000101: 	subq	$0x20, %rax
    00000105: 	cmpq	%rax, %rbx
    00000108: 	je	.Ltmp2261 # Offset: 264
    0000010e: 	movq	0x8(%rsp), %rax
    00000113: 	leaq	0x10(%rbx), %rdi
    00000117: 	movq	%rdi, (%rbx)
    0000011a: 	movq	(%rax), %rbp
    0000011d: 	movq	0x8(%rax), %r12
    00000121: 	movq	%rbp, %rax
    00000124: 	addq	%r12, %rax
    00000127: 	je	.Ltmp2262 # Offset: 295
    00000129: 	testq	%rbp, %rbp
    0000012c: 	je	.Ltmp2263 # Offset: 300
.Ltmp2262:
    00000132: 	movq	%r12, 0x10(%rsp)
    00000137: 	cmpq	$0xf, %r12
    0000013b: 	ja	.Ltmp2264 # Offset: 315
    00000141: 	cmpq	$0x1, %r12
    00000145: 	jne	.Ltmp2265 # Offset: 325
    0000014b: 	movzbl	(%rbp), %eax
    0000014f: 	movb	%al, 0x10(%rbx)
.Ltmp2269:
    00000152: 	movq	%r12, 0x8(%rbx)
    00000156: 	movb	$0x0, (%rdi,%r12)
    0000015b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000162: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000169: 	addq	$0x20, %rax
    0000016d: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000174: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000017b: 	je	.Ltmp2266 # Offset: 379
.Ltmp2270:
    00000181: 	movq	-0x20(%rax), %rbp
    00000185: 	callq	clock@PLT # Offset: 389
    0000018a: 	movq	%rax, end_time(%rip)
    00000191: 	movq	0x18(%rsp), %rdx
    00000196: 	subq	%fs:0x28, %rdx
    0000019f: 	jne	.Ltmp2267 # Offset: 415
    000001a5: 	subq	start_time(%rip), %rax
    000001ac: 	pxor	%xmm0, %xmm0
    000001b0: 	movq	%rbp, %rdi
    000001b3: 	cvtsi2sd	%rax, %xmm0
    000001b8: 	divsd	DATAat0x4d640(%rip), %xmm0
    000001c0: 	addq	$0x28, %rsp
    000001c4: 	popq	%rbx
    000001c5: 	popq	%rbp
    000001c6: 	popq	%r12
    000001c8: 	popq	%r13
    000001ca: 	popq	%r14
    000001cc: 	popq	%r15
    000001ce: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 462
    000001d3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2259:
    000001d8: 	movq	0x8(%rsp), %rax
    000001dd: 	leaq	DATAat0x4d004(%rip), %rsi
    000001e4: 	movl	$0x1, %edi
    000001e9: 	addl	$0x1, %r14d
    000001ed: 	movq	(%rax), %rdx
    000001f0: 	xorl	%eax, %eax
    000001f2: 	callq	__printf_chk@PLT # Offset: 498
    000001f7: 	movl	iterations(%rip), %r15d
    000001fe: 	cmpl	%r15d, %r14d
    00000201: 	jl	.Ltmp2268 # Offset: 513
    00000207: 	jmp	.Ltmp2256 # Offset: 519
.Ltmp2264:
    0000020c: 	movq	%rbx, %rdi
    0000020f: 	leaq	0x10(%rsp), %rsi
    00000214: 	xorl	%edx, %edx
    00000216: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 534
    0000021b: 	movq	%rax, (%rbx)
    0000021e: 	movq	%rax, %rdi
    00000221: 	movq	0x10(%rsp), %rax
    00000226: 	movq	%rax, 0x10(%rbx)
.Ltmp2271:
    0000022a: 	movq	%r12, %rdx
    0000022d: 	movq	%rbp, %rsi
    00000230: 	callq	memcpy@PLT # Offset: 560
    00000235: 	movq	0x10(%rsp), %r12
    0000023a: 	movq	(%rbx), %rdi
    0000023d: 	jmp	.Ltmp2269 # Offset: 573
.Ltmp2261:
    00000242: 	movq	0x8(%rsp), %rsi
    00000247: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000024e: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 590
    00000253: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000025a: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000261: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000268: 	jne	.Ltmp2270 # Offset: 616
.Ltmp2266:
    0000026e: 	movq	-0x8(%rdx), %rax
    00000272: 	addq	$0x200, %rax
    00000278: 	jmp	.Ltmp2270 # Offset: 632
.Ltmp2265:
    0000027d: 	testq	%r12, %r12
    00000280: 	je	.Ltmp2269 # Offset: 640
    00000286: 	jmp	.Ltmp2271 # Offset: 646
.Ltmp2267:
    00000288: 	callq	__stack_chk_fail@PLT # Offset: 648
.Ltmp2263:
    0000028d: 	leaq	DATAat0x4d018(%rip), %rdi
    00000294: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 660
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSENIj14custom_cse_mixIjELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSENIi14custom_cse_mixIiELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 174
  State       : disassembled
  Address     : 0x23010
  Size        : 0x2b1
  MaxSize     : 0x2c0
  Offset      : 0x23010
  Section     : .text
  Orc Section : .local.text._Z9test_CSENIi14custom_cse_mixIiELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0173:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movl	%esi, %r13d
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movl	%edx, %ebx
    00000016: 	subq	$0x28, %rsp
    0000001a: 	movq	%rcx, 0x8(%rsp)
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x18(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movl	iterations(%rip), %r15d
    0000003b: 	movq	%rax, start_time(%rip)
    00000042: 	testl	%r15d, %r15d
    00000045: 	jle	.Ltmp2272 # Offset: 69
    0000004b: 	leal	-0x2(%r13), %eax
    0000004f: 	xorl	%r14d, %r14d
    00000052: 	leaq	0x8(%r12,%rax,4), %rbp
.Ltmp2284:
    00000057: 	movl	(%r12), %r11d
    0000005b: 	movl	0x4(%r12), %r10d
.Ltmp2276:
    00000060: 	movl	%r10d, %eax
    00000063: 	movl	%r11d, %esi
    00000066: 	subl	%r11d, %eax
    00000069: 	imull	%ebx, %eax
    0000006c: 	movl	%eax, %ecx
    0000006e: 	movl	%r10d, %eax
    00000071: 	cltd
    00000072: 	idivl	%ebx
    00000074: 	addl	%ecx, %eax
    00000076: 	movl	%r11d, %ecx
    00000079: 	leal	(%r11,%rax,2), %edx
    0000007d: 	subl	%r10d, %ecx
    00000080: 	leal	(%r10,%rax,2), %eax
    00000084: 	addl	%edx, %ecx
    00000086: 	subl	%eax, %ecx
    00000088: 	addl	%edx, %ecx
    0000008a: 	subl	%eax, %ecx
    0000008c: 	addl	%edx, %ecx
    0000008e: 	subl	%eax, %ecx
    00000090: 	addl	%edx, %ecx
    00000092: 	subl	%eax, %ecx
    00000094: 	addl	%edx, %ecx
    00000096: 	subl	%eax, %ecx
    00000098: 	addl	%edx, %ecx
    0000009a: 	subl	%eax, %ecx
    0000009c: 	addl	%edx, %ecx
    0000009e: 	subl	%eax, %ecx
    000000a0: 	cmpl	$0x1, %r13d
    000000a4: 	jle	.Ltmp2273 # Offset: 164
    000000a6: 	leaq	0x4(%r12), %rdi
    000000ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2274:
    000000b0: 	movl	%esi, %r8d
    000000b3: 	movl	(%rdi), %esi
    000000b5: 	addq	$0x4, %rdi
    000000b9: 	movl	%esi, %eax
    000000bb: 	subl	%r8d, %eax
    000000be: 	imull	%ebx, %eax
    000000c1: 	movl	%eax, %r9d
    000000c4: 	movl	%esi, %eax
    000000c6: 	cltd
    000000c7: 	idivl	%ebx
    000000c9: 	addl	%r9d, %eax
    000000cc: 	leal	(%r8,%rax,2), %edx
    000000d0: 	leal	(%rsi,%rax,2), %eax
    000000d3: 	leal	(%rcx,%rdx,2), %ecx
    000000d6: 	subl	%eax, %ecx
    000000d8: 	subl	%eax, %ecx
    000000da: 	addl	%edx, %ecx
    000000dc: 	subl	%eax, %ecx
    000000de: 	addl	%edx, %ecx
    000000e0: 	subl	%eax, %ecx
    000000e2: 	addl	%edx, %ecx
    000000e4: 	subl	%eax, %ecx
    000000e6: 	addl	%edx, %ecx
    000000e8: 	subl	%eax, %ecx
    000000ea: 	addl	%edx, %ecx
    000000ec: 	subl	%eax, %ecx
    000000ee: 	addl	%edx, %ecx
    000000f0: 	subl	%eax, %ecx
    000000f2: 	cmpq	%rdi, %rbp
    000000f5: 	jne	.Ltmp2274 # Offset: 245
.Ltmp2273:
    000000f7: 	testl	%ecx, %ecx
    000000f9: 	jne	.Ltmp2275 # Offset: 249
    000000ff: 	addl	$0x1, %r14d
    00000103: 	cmpl	%r15d, %r14d
    00000106: 	jl	.Ltmp2276 # Offset: 262
.Ltmp2272:
    0000010c: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000113: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000011a: 	subq	$0x20, %rax
    0000011e: 	cmpq	%rax, %rbx
    00000121: 	je	.Ltmp2277 # Offset: 289
    00000127: 	movq	0x8(%rsp), %rax
    0000012c: 	leaq	0x10(%rbx), %rdi
    00000130: 	movq	%rdi, (%rbx)
    00000133: 	movq	(%rax), %rbp
    00000136: 	movq	0x8(%rax), %r12
    0000013a: 	movq	%rbp, %rax
    0000013d: 	addq	%r12, %rax
    00000140: 	je	.Ltmp2278 # Offset: 320
    00000142: 	testq	%rbp, %rbp
    00000145: 	je	.Ltmp2279 # Offset: 325
.Ltmp2278:
    0000014b: 	movq	%r12, 0x10(%rsp)
    00000150: 	cmpq	$0xf, %r12
    00000154: 	ja	.Ltmp2280 # Offset: 340
    0000015a: 	cmpq	$0x1, %r12
    0000015e: 	jne	.Ltmp2281 # Offset: 350
    00000164: 	movzbl	(%rbp), %eax
    00000168: 	movb	%al, 0x10(%rbx)
.Ltmp2285:
    0000016b: 	movq	%r12, 0x8(%rbx)
    0000016f: 	movb	$0x0, (%rdi,%r12)
    00000174: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000017b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000182: 	addq	$0x20, %rax
    00000186: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000018d: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000194: 	je	.Ltmp2282 # Offset: 404
.Ltmp2286:
    0000019a: 	movq	-0x20(%rax), %rbp
    0000019e: 	callq	clock@PLT # Offset: 414
    000001a3: 	movq	%rax, end_time(%rip)
    000001aa: 	movq	0x18(%rsp), %rdx
    000001af: 	subq	%fs:0x28, %rdx
    000001b8: 	jne	.Ltmp2283 # Offset: 440
    000001be: 	subq	start_time(%rip), %rax
    000001c5: 	pxor	%xmm0, %xmm0
    000001c9: 	movq	%rbp, %rdi
    000001cc: 	cvtsi2sd	%rax, %xmm0
    000001d1: 	divsd	DATAat0x4d640(%rip), %xmm0
    000001d9: 	addq	$0x28, %rsp
    000001dd: 	popq	%rbx
    000001de: 	popq	%rbp
    000001df: 	popq	%r12
    000001e1: 	popq	%r13
    000001e3: 	popq	%r14
    000001e5: 	popq	%r15
    000001e7: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 487
    000001ec: 	nopl	(%rax) # Size: 4
.Ltmp2275:
    000001f0: 	movq	0x8(%rsp), %rax
    000001f5: 	leaq	DATAat0x4d004(%rip), %rsi
    000001fc: 	movl	$0x1, %edi
    00000201: 	addl	$0x1, %r14d
    00000205: 	movq	(%rax), %rdx
    00000208: 	xorl	%eax, %eax
    0000020a: 	callq	__printf_chk@PLT # Offset: 522
    0000020f: 	movl	iterations(%rip), %r15d
    00000216: 	cmpl	%r15d, %r14d
    00000219: 	jl	.Ltmp2284 # Offset: 537
    0000021f: 	jmp	.Ltmp2272 # Offset: 543
.Ltmp2280:
    00000224: 	movq	%rbx, %rdi
    00000227: 	leaq	0x10(%rsp), %rsi
    0000022c: 	xorl	%edx, %edx
    0000022e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 558
    00000233: 	movq	%rax, (%rbx)
    00000236: 	movq	%rax, %rdi
    00000239: 	movq	0x10(%rsp), %rax
    0000023e: 	movq	%rax, 0x10(%rbx)
.Ltmp2287:
    00000242: 	movq	%r12, %rdx
    00000245: 	movq	%rbp, %rsi
    00000248: 	callq	memcpy@PLT # Offset: 584
    0000024d: 	movq	0x10(%rsp), %r12
    00000252: 	movq	(%rbx), %rdi
    00000255: 	jmp	.Ltmp2285 # Offset: 597
.Ltmp2277:
    0000025a: 	movq	0x8(%rsp), %rsi
    0000025f: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000266: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 614
    0000026b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000272: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000279: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000280: 	jne	.Ltmp2286 # Offset: 640
.Ltmp2282:
    00000286: 	movq	-0x8(%rdx), %rax
    0000028a: 	addq	$0x200, %rax
    00000290: 	jmp	.Ltmp2286 # Offset: 656
.Ltmp2281:
    00000295: 	testq	%r12, %r12
    00000298: 	je	.Ltmp2285 # Offset: 664
    0000029e: 	jmp	.Ltmp2287 # Offset: 670
.Ltmp2283:
    000002a0: 	callq	__stack_chk_fail@PLT # Offset: 672
.Ltmp2279:
    000002a5: 	leaq	DATAat0x4d018(%rip), %rdi
    000002ac: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 684
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSENIi14custom_cse_mixIiELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9test_CSENIf14custom_cse_mixIfELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 175
  State       : disassembled
  Address     : 0x232d0
  Size        : 0x3cc
  MaxSize     : 0x3d0
  Offset      : 0x232d0
  Section     : .text
  Orc Section : .local.text._Z9test_CSENIf14custom_cse_mixIfELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0174:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%esi, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rdx, %rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x28, %rsp
    0000001b: 	movss	%xmm0, 0xc(%rsp)
    00000021: 	movq	%fs:0x28, %rax
    0000002a: 	movq	%rax, 0x18(%rsp)
    0000002f: 	xorl	%eax, %eax
    00000031: 	callq	clock@PLT # Offset: 49
    00000036: 	movl	iterations(%rip), %edx
    0000003c: 	movss	0xc(%rsp), %xmm3
    00000042: 	movq	%rax, start_time(%rip)
    00000049: 	testl	%edx, %edx
    0000004b: 	jle	.Ltmp2288 # Offset: 75
    00000051: 	leal	-0x2(%r14), %eax
    00000055: 	movss	(%r13), %xmm5
    0000005b: 	movss	0x4(%r13), %xmm4
    00000061: 	xorl	%r12d, %r12d
    00000064: 	movsd	DATAat0x4d620(%rip), %xmm8
    0000006d: 	leaq	0x8(%r13,%rax,4), %rbx
    00000072: 	pxor	%xmm10, %xmm10
    00000077: 	movq	DATAat0x4d5e0(%rip), %xmm7
    0000007f: 	movsd	DATAat0x4d628(%rip), %xmm6
    00000087: 	leaq	DATAat0x4d004(%rip), %r15
    0000008e: 	movss	DATAat0x4d5d0(%rip), %xmm9
    00000097: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2293:
    000000a0: 	movaps	%xmm4, %xmm1
    000000a3: 	movaps	%xmm4, %xmm0
    000000a6: 	movaps	%xmm5, %xmm11
    000000aa: 	divss	%xmm3, %xmm1
    000000ae: 	subss	%xmm5, %xmm0
    000000b2: 	movaps	%xmm5, %xmm2
    000000b5: 	mulss	%xmm3, %xmm0
    000000b9: 	addss	%xmm1, %xmm0
    000000bd: 	movaps	%xmm4, %xmm1
    000000c0: 	addss	%xmm0, %xmm11
    000000c5: 	addss	%xmm0, %xmm1
    000000c9: 	addss	%xmm0, %xmm11
    000000ce: 	addss	%xmm0, %xmm1
    000000d2: 	movaps	%xmm11, %xmm0
    000000d6: 	addss	%xmm10, %xmm0
    000000db: 	subss	%xmm1, %xmm0
    000000df: 	addss	%xmm11, %xmm0
    000000e4: 	subss	%xmm1, %xmm0
    000000e8: 	addss	%xmm11, %xmm0
    000000ed: 	subss	%xmm1, %xmm0
    000000f1: 	addss	%xmm11, %xmm0
    000000f6: 	subss	%xmm1, %xmm0
    000000fa: 	addss	%xmm11, %xmm0
    000000ff: 	subss	%xmm1, %xmm0
    00000103: 	addss	%xmm11, %xmm0
    00000108: 	subss	%xmm1, %xmm0
    0000010c: 	addss	%xmm11, %xmm0
    00000111: 	subss	%xmm1, %xmm0
    00000115: 	addss	%xmm11, %xmm0
    0000011a: 	subss	%xmm1, %xmm0
    0000011e: 	cmpl	$0x1, %r14d
    00000122: 	jle	.Ltmp2289 # Offset: 290
    00000128: 	leaq	0x4(%r13), %rax
    0000012c: 	nopl	(%rax) # Size: 4
.Ltmp2290:
    00000130: 	movaps	%xmm2, %xmm11
    00000134: 	movss	(%rax), %xmm2
    00000138: 	addq	$0x4, %rax
    0000013c: 	movaps	%xmm2, %xmm1
    0000013f: 	movaps	%xmm2, %xmm12
    00000143: 	divss	%xmm3, %xmm1
    00000147: 	subss	%xmm11, %xmm12
    0000014c: 	mulss	%xmm3, %xmm12
    00000151: 	addss	%xmm1, %xmm12
    00000156: 	movaps	%xmm2, %xmm1
    00000159: 	addss	%xmm12, %xmm11
    0000015e: 	addss	%xmm12, %xmm1
    00000163: 	addss	%xmm12, %xmm11
    00000168: 	addss	%xmm12, %xmm1
    0000016d: 	addss	%xmm11, %xmm0
    00000172: 	subss	%xmm1, %xmm0
    00000176: 	addss	%xmm11, %xmm0
    0000017b: 	subss	%xmm1, %xmm0
    0000017f: 	addss	%xmm11, %xmm0
    00000184: 	subss	%xmm1, %xmm0
    00000188: 	addss	%xmm11, %xmm0
    0000018d: 	subss	%xmm1, %xmm0
    00000191: 	addss	%xmm11, %xmm0
    00000196: 	subss	%xmm1, %xmm0
    0000019a: 	addss	%xmm11, %xmm0
    0000019f: 	subss	%xmm1, %xmm0
    000001a3: 	addss	%xmm11, %xmm0
    000001a8: 	subss	%xmm1, %xmm0
    000001ac: 	addss	%xmm11, %xmm0
    000001b1: 	subss	%xmm1, %xmm0
    000001b5: 	cmpq	%rax, %rbx
    000001b8: 	jne	.Ltmp2290 # Offset: 440
.Ltmp2289:
    000001be: 	movaps	%xmm0, %xmm1
    000001c1: 	andps	%xmm9, %xmm1
    000001c5: 	cvtss2sd	%xmm1, %xmm1
    000001c9: 	comisd	%xmm8, %xmm1
    000001ce: 	jbe	.Ltmp2291 # Offset: 462
    000001d0: 	divss	%xmm0, %xmm0
.Ltmp2291:
    000001d4: 	cvtss2sd	%xmm0, %xmm0
    000001d8: 	andpd	%xmm7, %xmm0
    000001dc: 	comisd	%xmm0, %xmm6
    000001e0: 	jbe	.Ltmp2292 # Offset: 480
    000001e6: 	addl	$0x1, %r12d
    000001ea: 	cmpl	%edx, %r12d
    000001ed: 	jl	.Ltmp2293 # Offset: 493
.Ltmp2288:
    000001f3: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001fa: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000201: 	subq	$0x20, %rax
    00000205: 	cmpq	%rax, %rbx
    00000208: 	je	.Ltmp2294 # Offset: 520
    0000020e: 	leaq	0x10(%rbx), %rdi
    00000212: 	movq	0x8(%rbp), %r12
    00000216: 	movq	%rdi, (%rbx)
    00000219: 	movq	(%rbp), %r13
    0000021d: 	movq	%r13, %rax
    00000220: 	addq	%r12, %rax
    00000223: 	je	.Ltmp2295 # Offset: 547
    00000225: 	testq	%r13, %r13
    00000228: 	je	.Ltmp2296 # Offset: 552
.Ltmp2295:
    0000022e: 	movq	%r12, 0x10(%rsp)
    00000233: 	cmpq	$0xf, %r12
    00000237: 	ja	.Ltmp2297 # Offset: 567
    0000023d: 	cmpq	$0x1, %r12
    00000241: 	jne	.Ltmp2298 # Offset: 577
    00000247: 	movzbl	(%r13), %eax
    0000024c: 	movb	%al, 0x10(%rbx)
.Ltmp2301:
    0000024f: 	movq	%r12, 0x8(%rbx)
    00000253: 	movb	$0x0, (%rdi,%r12)
    00000258: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000025f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000266: 	addq	$0x20, %rax
    0000026a: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000271: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000278: 	je	.Ltmp2299 # Offset: 632
.Ltmp2302:
    0000027e: 	movq	-0x20(%rax), %rbp
    00000282: 	callq	clock@PLT # Offset: 642
    00000287: 	movq	%rax, end_time(%rip)
    0000028e: 	movq	0x18(%rsp), %rdx
    00000293: 	subq	%fs:0x28, %rdx
    0000029c: 	jne	.Ltmp2300 # Offset: 668
    000002a2: 	subq	start_time(%rip), %rax
    000002a9: 	pxor	%xmm0, %xmm0
    000002ad: 	movq	%rbp, %rdi
    000002b0: 	cvtsi2sd	%rax, %xmm0
    000002b5: 	divsd	DATAat0x4d640(%rip), %xmm0
    000002bd: 	addq	$0x28, %rsp
    000002c1: 	popq	%rbx
    000002c2: 	popq	%rbp
    000002c3: 	popq	%r12
    000002c5: 	popq	%r13
    000002c7: 	popq	%r14
    000002c9: 	popq	%r15
    000002cb: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 715
.Ltmp2292:
    000002d0: 	movq	(%rbp), %rdx
    000002d4: 	movq	%r15, %rsi
    000002d7: 	movl	$0x1, %edi
    000002dc: 	xorl	%eax, %eax
    000002de: 	movss	%xmm3, 0xc(%rsp)
    000002e4: 	addl	$0x1, %r12d
    000002e8: 	callq	__printf_chk@PLT # Offset: 744
    000002ed: 	movl	iterations(%rip), %edx
    000002f3: 	cmpl	%edx, %r12d
    000002f6: 	jge	.Ltmp2288 # Offset: 758
    000002fc: 	movq	DATAat0x4d620(%rip), %rax
    00000303: 	movss	(%r13), %xmm5
    00000309: 	movss	DATAat0x4d5d0(%rip), %xmm9
    00000312: 	pxor	%xmm10, %xmm10
    00000317: 	movss	0x4(%r13), %xmm4
    0000031d: 	movss	0xc(%rsp), %xmm3
    00000323: 	movq	%rax, %xmm8
    00000328: 	movq	DATAat0x4d628(%rip), %rax
    0000032f: 	movq	DATAat0x4d5e0(%rip), %xmm7
    00000337: 	movq	%rax, %xmm6
    0000033c: 	jmp	.Ltmp2293 # Offset: 828
.Ltmp2297:
    00000341: 	movq	%rbx, %rdi
    00000344: 	leaq	0x10(%rsp), %rsi
    00000349: 	xorl	%edx, %edx
    0000034b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 843
    00000350: 	movq	%rax, (%rbx)
    00000353: 	movq	%rax, %rdi
    00000356: 	movq	0x10(%rsp), %rax
    0000035b: 	movq	%rax, 0x10(%rbx)
.Ltmp2303:
    0000035f: 	movq	%r12, %rdx
    00000362: 	movq	%r13, %rsi
    00000365: 	callq	memcpy@PLT # Offset: 869
    0000036a: 	movq	0x10(%rsp), %r12
    0000036f: 	movq	(%rbx), %rdi
    00000372: 	jmp	.Ltmp2301 # Offset: 882
.Ltmp2294:
    00000377: 	movq	%rbp, %rsi
    0000037a: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000381: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 897
    00000386: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000038d: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000394: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000039b: 	jne	.Ltmp2302 # Offset: 923
.Ltmp2299:
    000003a1: 	movq	-0x8(%rdx), %rax
    000003a5: 	addq	$0x200, %rax
    000003ab: 	jmp	.Ltmp2302 # Offset: 939
.Ltmp2298:
    000003b0: 	testq	%r12, %r12
    000003b3: 	je	.Ltmp2301 # Offset: 947
    000003b9: 	jmp	.Ltmp2303 # Offset: 953
.Ltmp2300:
    000003bb: 	callq	__stack_chk_fail@PLT # Offset: 955
.Ltmp2296:
    000003c0: 	leaq	DATAat0x4d018(%rip), %rdi
    000003c7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 967
DWARF CFI Instructions:
    <empty>
End of Function "_Z9test_CSENIf14custom_cse_mixIfELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z16TestUnrolledTypeIaLi8EEvPT_S0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 176
  State       : disassembled
  Address     : 0x236a0
  Size        : 0x1bab
  MaxSize     : 0x1bb0
  Offset      : 0x236a0
  Section     : .text
  Orc Section : .local.text._Z16TestUnrolledTypeIaLi8EEvPT_S0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0175:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	leaq	DATAat0x4d004(%rip), %r14
    0000000f: 	pushq	%r13
    00000011: 	movq	%rdx, %r13
    00000014: 	leaq	DATAat0x4d1e4(%rip), %rdx
    0000001b: 	pushq	%r12
    0000001d: 	xorl	%r12d, %r12d
    00000020: 	pushq	%rbp
    00000021: 	movq	%rdi, %rbp
    00000024: 	pushq	%rbx
    00000025: 	movl	%esi, %ebx
    00000027: 	movq	%r13, %rsi
    0000002a: 	subq	$0x168, %rsp
    00000031: 	movq	%fs:0x28, %rax
    0000003a: 	movq	%rax, 0x158(%rsp)
    00000042: 	xorl	%eax, %eax
    00000044: 	leaq	0x130(%rsp), %rax
    0000004c: 	movq	%rax, %rdi
    0000004f: 	movq	%rax, 0x8(%rsp)
    00000054: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 84
    00000059: 	movsbl	%bl, %eax
    0000005c: 	leaq	0x1f30(%rbp), %rbx
    00000063: 	movl	%eax, 0x1c(%rsp)
    00000067: 	callq	clock@PLT # Offset: 103
    0000006c: 	movl	iterations(%rip), %r15d
    00000073: 	movq	%rax, start_time(%rip)
    0000007a: 	testl	%r15d, %r15d
    0000007d: 	jle	.Ltmp2304 # Offset: 125
    00000083: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2307:
    00000088: 	movsbl	(%rbp), %eax
    0000008c: 	subb	0x1(%rbp), %al
    0000008f: 	movq	%rbp, %rdx
    00000092: 	pxor	%xmm1, %xmm1
    00000096: 	shll	$0x3, %eax
    00000099: 	nopl	(%rax) # Size: 7
.Ltmp2305:
    000000a0: 	movdqu	(%rdx), %xmm0
    000000a4: 	movdqu	0x1(%rdx), %xmm2
    000000a9: 	addq	$0x10, %rdx
    000000ad: 	psubb	%xmm2, %xmm0
    000000b1: 	paddb	%xmm0, %xmm0
    000000b5: 	paddb	%xmm0, %xmm0
    000000b9: 	paddb	%xmm0, %xmm0
    000000bd: 	paddb	%xmm0, %xmm1
    000000c1: 	cmpq	%rbx, %rdx
    000000c4: 	jne	.Ltmp2305 # Offset: 196
    000000c6: 	movdqa	%xmm1, %xmm0
    000000ca: 	psrldq	$0x8, %xmm0
    000000cf: 	paddb	%xmm0, %xmm1
    000000d3: 	pxor	%xmm0, %xmm0
    000000d7: 	psadbw	%xmm0, %xmm1
    000000db: 	movq	0x1f30(%rbp), %xmm0
    000000e3: 	movd	%xmm1, %edx
    000000e7: 	movq	0x1f31(%rbp), %xmm1
    000000ef: 	addl	%edx, %eax
    000000f1: 	psubb	%xmm1, %xmm0
    000000f5: 	pxor	%xmm1, %xmm1
    000000f9: 	paddb	%xmm0, %xmm0
    000000fd: 	paddb	%xmm0, %xmm0
    00000101: 	paddb	%xmm0, %xmm0
    00000105: 	movdqa	%xmm0, %xmm7
    00000109: 	psadbw	%xmm1, %xmm7
    0000010d: 	movq	%xmm7, 0x58(%rsp)
    00000113: 	movq	%xmm7, %rdx
    00000118: 	movsbl	0x1f39(%rbp), %r9d
    00000120: 	movsbl	0x1f38(%rbp), %r10d
    00000128: 	movsbl	0x1f3a(%rbp), %r8d
    00000130: 	movl	%edx, %r11d
    00000133: 	movsbl	0x1f3b(%rbp), %edi
    0000013a: 	subl	%r9d, %r10d
    0000013d: 	addl	%r11d, %eax
    00000140: 	movsbl	0x1f3c(%rbp), %esi
    00000147: 	movsbl	0x1f3d(%rbp), %ecx
    0000014e: 	subl	%r8d, %r9d
    00000151: 	leal	(%rax,%r10,8), %r10d
    00000155: 	subl	%edi, %r8d
    00000158: 	movsbl	0x1f3e(%rbp), %edx
    0000015f: 	leal	(%r10,%r9,8), %r9d
    00000163: 	subl	%esi, %edi
    00000165: 	subl	%ecx, %esi
    00000167: 	leal	(%r9,%r8,8), %r8d
    0000016b: 	subl	%edx, %ecx
    0000016d: 	subb	0x1f3f(%rbp), %dl
    00000173: 	leal	(%r8,%rdi,8), %edi
    00000177: 	leal	(%rdi,%rsi,8), %esi
    0000017a: 	leal	(%rsi,%rcx,8), %ecx
    0000017d: 	leal	(%rcx,%rdx,8), %edx
    00000180: 	testb	%dl, %dl
    00000182: 	jne	.Ltmp2306 # Offset: 386
.Ltmp2405:
    00000188: 	addl	$0x1, %r12d
    0000018c: 	cmpl	%r15d, %r12d
    0000018f: 	jl	.Ltmp2307 # Offset: 399
.Ltmp2304:
    00000195: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000019c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001a3: 	subq	$0x20, %rax
    000001a7: 	cmpq	%rax, %rbx
    000001aa: 	je	.Ltmp2308 # Offset: 426
    000001b0: 	leaq	0x10(%rbx), %rdi
    000001b4: 	movq	0x138(%rsp), %r12
    000001bc: 	movq	%rdi, (%rbx)
    000001bf: 	movq	0x130(%rsp), %r14
    000001c7: 	movq	%r14, %rax
    000001ca: 	addq	%r12, %rax
    000001cd: 	je	.Ltmp2309 # Offset: 461
    000001cf: 	testq	%r14, %r14
    000001d2: 	je	.Ltmp2310 # Offset: 466
.Ltmp2309:
    000001d8: 	movq	%r12, 0x68(%rsp)
    000001dd: 	cmpq	$0xf, %r12
    000001e1: 	ja	.Ltmp2311 # Offset: 481
    000001e7: 	cmpq	$0x1, %r12
    000001eb: 	jne	.Ltmp2312 # Offset: 491
    000001f1: 	movzbl	(%r14), %eax
    000001f5: 	movb	%al, 0x10(%rbx)
.Ltmp2406:
    000001f8: 	movq	%r12, 0x8(%rbx)
    000001fc: 	movb	$0x0, (%rdi,%r12)
    00000201: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000208: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000020f: 	addq	$0x20, %rax
    00000213: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000021a: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000221: 	je	.Ltmp2313 # Offset: 545
.Ltmp2428:
    00000227: 	movq	-0x20(%rax), %r12
    0000022b: 	callq	clock@PLT # Offset: 555
    00000230: 	pxor	%xmm0, %xmm0
    00000234: 	movq	%rax, end_time(%rip)
    0000023b: 	movq	%r12, %rdi
    0000023e: 	subq	start_time(%rip), %rax
    00000245: 	cvtsi2sd	%rax, %xmm0
    0000024a: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000252: 	callq	_Z13record_resultdPKc # Offset: 594
    00000257: 	movq	0x130(%rsp), %rdi
    0000025f: 	leaq	0x140(%rsp), %rax
    00000267: 	movq	%rax, 0x10(%rsp)
    0000026c: 	cmpq	%rax, %rdi
    0000026f: 	je	.Ltmp2314 # Offset: 623
    00000271: 	movq	0x140(%rsp), %rax
    00000279: 	leaq	0x1(%rax), %rsi
    0000027d: 	callq	_ZdlPvm@PLT # Offset: 637
.Ltmp2314:
    00000282: 	movq	(%r13), %r14
    00000286: 	leaq	0x80(%rsp), %rax
    0000028e: 	movq	0x8(%r13), %r12
    00000292: 	movq	%rax, 0x20(%rsp)
    00000297: 	movq	%rax, 0x70(%rsp)
    0000029c: 	movq	%r14, %rax
    0000029f: 	addq	%r12, %rax
    000002a2: 	je	.Ltmp2315 # Offset: 674
    000002a4: 	testq	%r14, %r14
    000002a7: 	je	.Ltmp2316 # Offset: 679
.Ltmp2315:
    000002ad: 	movq	%r12, 0x68(%rsp)
    000002b2: 	cmpq	$0xf, %r12
    000002b6: 	ja	.Ltmp2317 # Offset: 694
    000002bc: 	cmpq	$0x1, %r12
    000002c0: 	jne	.Ltmp2318 # Offset: 704
    000002c6: 	movzbl	(%r14), %eax
    000002ca: 	movb	%al, 0x80(%rsp)
    000002d1: 	movq	0x20(%rsp), %rax
.Ltmp2423:
    000002d6: 	movq	%r12, 0x78(%rsp)
    000002db: 	movb	$0x0, (%rax,%r12)
    000002e0: 	movabsq	$0x3fffffffffffffff, %rax
    000002ea: 	subq	0x78(%rsp), %rax
    000002ef: 	cmpq	$0xc, %rax
    000002f3: 	jbe	.Ltmp2319 # Offset: 755
    000002f9: 	leaq	0x70(%rsp), %rax
    000002fe: 	movl	$0xd, %edx
    00000303: 	leaq	DATAat0x4d1f1(%rip), %rsi
    0000030a: 	movq	%rax, %rdi
    0000030d: 	movq	%rax, 0x28(%rsp)
    00000312: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 786
    00000317: 	callq	clock@PLT # Offset: 791
    0000031c: 	movl	iterations(%rip), %r15d
    00000323: 	xorl	%r12d, %r12d
    00000326: 	leaq	0x1f30(%rbp), %rbx
    0000032d: 	movq	%rax, start_time(%rip)
    00000334: 	leaq	DATAat0x4d004(%rip), %r14
    0000033b: 	testl	%r15d, %r15d
    0000033e: 	jle	.Ltmp2320 # Offset: 830
    00000344: 	nopl	(%rax) # Size: 4
.Ltmp2323:
    00000348: 	movzbl	(%rbp), %r10d
    0000034d: 	subb	0x1(%rbp), %r10b
    00000351: 	movq	%rbp, %rax
    00000354: 	pxor	%xmm1, %xmm1
    00000358: 	shll	$0x3, %r10d
    0000035c: 	nopl	(%rax) # Size: 4
.Ltmp2321:
    00000360: 	movdqu	(%rax), %xmm0
    00000364: 	movdqu	0x1(%rax), %xmm3
    00000369: 	addq	$0x10, %rax
    0000036d: 	psubb	%xmm3, %xmm0
    00000371: 	paddb	%xmm0, %xmm0
    00000375: 	paddb	%xmm0, %xmm0
    00000379: 	paddb	%xmm0, %xmm0
    0000037d: 	paddb	%xmm0, %xmm1
    00000381: 	cmpq	%rbx, %rax
    00000384: 	jne	.Ltmp2321 # Offset: 900
    00000386: 	movdqa	%xmm1, %xmm0
    0000038a: 	psrldq	$0x8, %xmm0
    0000038f: 	paddb	%xmm0, %xmm1
    00000393: 	pxor	%xmm0, %xmm0
    00000397: 	psadbw	%xmm0, %xmm1
    0000039b: 	movq	0x1f30(%rbp), %xmm0
    000003a3: 	movd	%xmm1, %eax
    000003a7: 	movq	0x1f31(%rbp), %xmm1
    000003af: 	addl	%eax, %r10d
    000003b2: 	psubb	%xmm1, %xmm0
    000003b6: 	pxor	%xmm1, %xmm1
    000003ba: 	paddb	%xmm0, %xmm0
    000003be: 	paddb	%xmm0, %xmm0
    000003c2: 	paddb	%xmm0, %xmm0
    000003c6: 	movdqa	%xmm0, %xmm4
    000003ca: 	psadbw	%xmm1, %xmm4
    000003ce: 	movq	%xmm4, 0x50(%rsp)
    000003d4: 	movq	%xmm4, %rax
    000003d9: 	movzbl	0x1f39(%rbp), %r8d
    000003e1: 	movzbl	0x1f38(%rbp), %r9d
    000003e9: 	movzbl	0x1f3a(%rbp), %edi
    000003f0: 	movl	%eax, %r11d
    000003f3: 	movzbl	0x1f3b(%rbp), %esi
    000003fa: 	subl	%r8d, %r9d
    000003fd: 	addl	%r10d, %r11d
    00000400: 	movzbl	0x1f3c(%rbp), %ecx
    00000407: 	movzbl	0x1f3d(%rbp), %edx
    0000040e: 	subl	%edi, %r8d
    00000411: 	leal	(%r11,%r9,8), %r9d
    00000415: 	subl	%esi, %edi
    00000417: 	movzbl	0x1f3e(%rbp), %eax
    0000041e: 	leal	(%r9,%r8,8), %r8d
    00000422: 	subl	%ecx, %esi
    00000424: 	subl	%edx, %ecx
    00000426: 	leal	(%r8,%rdi,8), %edi
    0000042a: 	subl	%eax, %edx
    0000042c: 	subb	0x1f3f(%rbp), %al
    00000432: 	leal	(%rdi,%rsi,8), %esi
    00000435: 	leal	(%rsi,%rcx,8), %ecx
    00000438: 	leal	(%rcx,%rdx,8), %edx
    0000043b: 	leal	(%rdx,%rax,8), %eax
    0000043e: 	testb	%al, %al
    00000440: 	jne	.Ltmp2322 # Offset: 1088
.Ltmp2407:
    00000446: 	addl	$0x1, %r12d
    0000044a: 	cmpl	%r15d, %r12d
    0000044d: 	jl	.Ltmp2323 # Offset: 1101
.Ltmp2320:
    00000453: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000045a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000461: 	subq	$0x20, %rax
    00000465: 	cmpq	%rax, %rbx
    00000468: 	je	.Ltmp2324 # Offset: 1128
    0000046e: 	leaq	0x10(%rbx), %rdi
    00000472: 	movq	0x78(%rsp), %r12
    00000477: 	movq	%rdi, (%rbx)
    0000047a: 	movq	0x70(%rsp), %r14
    0000047f: 	movq	%r14, %rax
    00000482: 	addq	%r12, %rax
    00000485: 	je	.Ltmp2325 # Offset: 1157
    00000487: 	testq	%r14, %r14
    0000048a: 	je	.Ltmp2326 # Offset: 1162
.Ltmp2325:
    00000490: 	movq	%r12, 0x68(%rsp)
    00000495: 	cmpq	$0xf, %r12
    00000499: 	ja	.Ltmp2327 # Offset: 1177
    0000049f: 	cmpq	$0x1, %r12
    000004a3: 	jne	.Ltmp2328 # Offset: 1187
    000004a9: 	movzbl	(%r14), %eax
    000004ad: 	movb	%al, 0x10(%rbx)
.Ltmp2435:
    000004b0: 	movq	%r12, 0x8(%rbx)
    000004b4: 	movb	$0x0, (%rdi,%r12)
    000004b9: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000004c0: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000004c7: 	addq	$0x20, %rax
    000004cb: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000004d2: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000004d9: 	je	.Ltmp2329 # Offset: 1241
.Ltmp2429:
    000004df: 	movq	-0x20(%rax), %r12
    000004e3: 	callq	clock@PLT # Offset: 1251
    000004e8: 	pxor	%xmm0, %xmm0
    000004ec: 	movq	%rax, end_time(%rip)
    000004f3: 	movq	%r12, %rdi
    000004f6: 	subq	start_time(%rip), %rax
    000004fd: 	cvtsi2sd	%rax, %xmm0
    00000502: 	divsd	DATAat0x4d640(%rip), %xmm0
    0000050a: 	callq	_Z13record_resultdPKc # Offset: 1290
    0000050f: 	movq	0x70(%rsp), %rdi
    00000514: 	cmpq	0x20(%rsp), %rdi
    00000519: 	je	.Ltmp2330 # Offset: 1305
    0000051b: 	movq	0x80(%rsp), %rax
    00000523: 	leaq	0x1(%rax), %rsi
    00000527: 	callq	_ZdlPvm@PLT # Offset: 1319
.Ltmp2330:
    0000052c: 	movq	(%r13), %r14
    00000530: 	movq	0x8(%r13), %r12
    00000534: 	leaq	0xa0(%rsp), %rbx
    0000053c: 	movq	%rbx, 0x90(%rsp)
    00000544: 	movq	%r14, %rax
    00000547: 	addq	%r12, %rax
    0000054a: 	je	.Ltmp2331 # Offset: 1354
    0000054c: 	testq	%r14, %r14
    0000054f: 	je	.Ltmp2316 # Offset: 1359
.Ltmp2331:
    00000555: 	movq	%r12, 0x68(%rsp)
    0000055a: 	cmpq	$0xf, %r12
    0000055e: 	ja	.Ltmp2332 # Offset: 1374
    00000564: 	cmpq	$0x1, %r12
    00000568: 	jne	.Ltmp2333 # Offset: 1384
    0000056e: 	movzbl	(%r14), %eax
    00000572: 	movb	%al, 0xa0(%rsp)
    00000579: 	movq	%rbx, %rax
.Ltmp2421:
    0000057c: 	movq	%r12, 0x98(%rsp)
    00000584: 	movb	$0x0, (%rax,%r12)
    00000589: 	movabsq	$0x3fffffffffffffff, %rax
    00000593: 	subq	0x98(%rsp), %rax
    0000059b: 	cmpq	$0x3, %rax
    0000059f: 	jbe	.Ltmp2334 # Offset: 1439
    000005a5: 	leaq	0x90(%rsp), %r12
    000005ad: 	movl	$0x4, %edx
    000005b2: 	leaq	DATAat0x4d22b(%rip), %rsi
    000005b9: 	movq	%r12, %rdi
    000005bc: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1468
    000005c1: 	movl	0x1c(%rsp), %edx
    000005c5: 	movq	%r12, %rcx
    000005c8: 	movl	$0x1f40, %esi
    000005cd: 	movq	%rbp, %rdi
    000005d0: 	callq	_Z9test_CSENIa14custom_cse_addIaELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1488
    000005d5: 	movq	0x90(%rsp), %rdi
    000005dd: 	cmpq	%rbx, %rdi
    000005e0: 	je	.Ltmp2335 # Offset: 1504
    000005e2: 	movq	0xa0(%rsp), %rax
    000005ea: 	leaq	0x1(%rax), %rsi
    000005ee: 	callq	_ZdlPvm@PLT # Offset: 1518
.Ltmp2335:
    000005f3: 	movq	(%r13), %r14
    000005f7: 	leaq	0xc0(%rsp), %rax
    000005ff: 	movq	0x8(%r13), %r12
    00000603: 	movq	%rax, 0x20(%rsp)
    00000608: 	movq	%rax, 0xb0(%rsp)
    00000610: 	movq	%r14, %rax
    00000613: 	addq	%r12, %rax
    00000616: 	je	.Ltmp2336 # Offset: 1558
    00000618: 	testq	%r14, %r14
    0000061b: 	je	.Ltmp2316 # Offset: 1563
.Ltmp2336:
    00000621: 	movq	%r12, 0x68(%rsp)
    00000626: 	cmpq	$0xf, %r12
    0000062a: 	ja	.Ltmp2337 # Offset: 1578
    00000630: 	cmpq	$0x1, %r12
    00000634: 	jne	.Ltmp2338 # Offset: 1588
    0000063a: 	movzbl	(%r14), %eax
    0000063e: 	movb	%al, 0xc0(%rsp)
    00000645: 	movq	0x20(%rsp), %rax
.Ltmp2415:
    0000064a: 	movq	%r12, 0xb8(%rsp)
    00000652: 	movb	$0x0, (%rax,%r12)
    00000657: 	movabsq	$0x3fffffffffffffff, %rax
    00000661: 	subq	0xb8(%rsp), %rax
    00000669: 	cmpq	$0x11, %rax
    0000066d: 	jbe	.Ltmp2339 # Offset: 1645
    00000673: 	leaq	0xb0(%rsp), %rax
    0000067b: 	movl	$0x12, %edx
    00000680: 	leaq	DATAat0x4d234(%rip), %rsi
    00000687: 	movq	%rax, %rdi
    0000068a: 	movq	%rax, 0x28(%rsp)
    0000068f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1679
    00000694: 	callq	clock@PLT # Offset: 1684
    00000699: 	movl	iterations(%rip), %r15d
    000006a0: 	xorl	%r12d, %r12d
    000006a3: 	leaq	0x1f30(%rbp), %rbx
    000006aa: 	movq	%rax, start_time(%rip)
    000006b1: 	leaq	DATAat0x4d004(%rip), %r14
    000006b8: 	testl	%r15d, %r15d
    000006bb: 	jle	.Ltmp2340 # Offset: 1723
    000006c1: 	nopl	(%rax) # Size: 7
.Ltmp2343:
    000006c8: 	movzbl	(%rbp), %r10d
    000006cd: 	subb	0x1(%rbp), %r10b
    000006d1: 	movq	%rbp, %rax
    000006d4: 	pxor	%xmm1, %xmm1
    000006d8: 	shll	$0x3, %r10d
    000006dc: 	nopl	(%rax) # Size: 4
.Ltmp2341:
    000006e0: 	movdqu	(%rax), %xmm0
    000006e4: 	movdqu	0x1(%rax), %xmm4
    000006e9: 	addq	$0x10, %rax
    000006ed: 	psubb	%xmm4, %xmm0
    000006f1: 	paddb	%xmm0, %xmm0
    000006f5: 	paddb	%xmm0, %xmm0
    000006f9: 	paddb	%xmm0, %xmm0
    000006fd: 	paddb	%xmm0, %xmm1
    00000701: 	cmpq	%rax, %rbx
    00000704: 	jne	.Ltmp2341 # Offset: 1796
    00000706: 	movdqa	%xmm1, %xmm0
    0000070a: 	psrldq	$0x8, %xmm0
    0000070f: 	paddb	%xmm0, %xmm1
    00000713: 	pxor	%xmm0, %xmm0
    00000717: 	psadbw	%xmm0, %xmm1
    0000071b: 	movq	0x1f30(%rbp), %xmm0
    00000723: 	movd	%xmm1, %eax
    00000727: 	movq	0x1f31(%rbp), %xmm1
    0000072f: 	addl	%eax, %r10d
    00000732: 	psubb	%xmm1, %xmm0
    00000736: 	pxor	%xmm1, %xmm1
    0000073a: 	paddb	%xmm0, %xmm0
    0000073e: 	paddb	%xmm0, %xmm0
    00000742: 	paddb	%xmm0, %xmm0
    00000746: 	movdqa	%xmm0, %xmm5
    0000074a: 	psadbw	%xmm1, %xmm5
    0000074e: 	movq	%xmm5, 0x48(%rsp)
    00000754: 	movq	%xmm5, %rax
    00000759: 	movzbl	0x1f39(%rbp), %r8d
    00000761: 	movzbl	0x1f38(%rbp), %r9d
    00000769: 	movzbl	0x1f3a(%rbp), %edi
    00000770: 	movl	%eax, %r11d
    00000773: 	movzbl	0x1f3b(%rbp), %esi
    0000077a: 	subl	%r8d, %r9d
    0000077d: 	addl	%r10d, %r11d
    00000780: 	movzbl	0x1f3c(%rbp), %ecx
    00000787: 	movzbl	0x1f3d(%rbp), %edx
    0000078e: 	subl	%edi, %r8d
    00000791: 	leal	(%r11,%r9,8), %r9d
    00000795: 	subl	%esi, %edi
    00000797: 	movzbl	0x1f3e(%rbp), %eax
    0000079e: 	leal	(%r9,%r8,8), %r8d
    000007a2: 	subl	%ecx, %esi
    000007a4: 	subl	%edx, %ecx
    000007a6: 	leal	(%r8,%rdi,8), %edi
    000007aa: 	subl	%eax, %edx
    000007ac: 	subb	0x1f3f(%rbp), %al
    000007b2: 	leal	(%rdi,%rsi,8), %esi
    000007b5: 	leal	(%rsi,%rcx,8), %ecx
    000007b8: 	leal	(%rcx,%rdx,8), %edx
    000007bb: 	leal	(%rdx,%rax,8), %eax
    000007be: 	testb	%al, %al
    000007c0: 	jne	.Ltmp2342 # Offset: 1984
.Ltmp2411:
    000007c6: 	addl	$0x1, %r12d
    000007ca: 	cmpl	%r15d, %r12d
    000007cd: 	jl	.Ltmp2343 # Offset: 1997
.Ltmp2340:
    000007d3: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000007da: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000007e1: 	subq	$0x20, %rax
    000007e5: 	cmpq	%rax, %rbx
    000007e8: 	je	.Ltmp2344 # Offset: 2024
    000007ee: 	leaq	0x10(%rbx), %rdi
    000007f2: 	movq	0xb8(%rsp), %r12
    000007fa: 	movq	%rdi, (%rbx)
    000007fd: 	movq	0xb0(%rsp), %r14
    00000805: 	movq	%r14, %rax
    00000808: 	addq	%r12, %rax
    0000080b: 	je	.Ltmp2345 # Offset: 2059
    0000080d: 	testq	%r14, %r14
    00000810: 	je	.Ltmp2346 # Offset: 2064
.Ltmp2345:
    00000816: 	movq	%r12, 0x68(%rsp)
    0000081b: 	cmpq	$0xf, %r12
    0000081f: 	ja	.Ltmp2347 # Offset: 2079
    00000825: 	cmpq	$0x1, %r12
    00000829: 	jne	.Ltmp2348 # Offset: 2089
    0000082f: 	movzbl	(%r14), %eax
    00000833: 	movb	%al, 0x10(%rbx)
.Ltmp2434:
    00000836: 	movq	%r12, 0x8(%rbx)
    0000083a: 	movb	$0x0, (%rdi,%r12)
    0000083f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000846: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000084d: 	addq	$0x20, %rax
    00000851: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000858: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000085f: 	je	.Ltmp2349 # Offset: 2143
.Ltmp2430:
    00000865: 	movq	-0x20(%rax), %r12
    00000869: 	callq	clock@PLT # Offset: 2153
    0000086e: 	pxor	%xmm0, %xmm0
    00000872: 	movq	%rax, end_time(%rip)
    00000879: 	movq	%r12, %rdi
    0000087c: 	subq	start_time(%rip), %rax
    00000883: 	cvtsi2sd	%rax, %xmm0
    00000888: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000890: 	callq	_Z13record_resultdPKc # Offset: 2192
    00000895: 	movq	0xb0(%rsp), %rdi
    0000089d: 	cmpq	0x20(%rsp), %rdi
    000008a2: 	je	.Ltmp2350 # Offset: 2210
    000008a4: 	movq	0xc0(%rsp), %rax
    000008ac: 	leaq	0x1(%rax), %rsi
    000008b0: 	callq	_ZdlPvm@PLT # Offset: 2224
.Ltmp2350:
    000008b5: 	movq	(%r13), %r14
    000008b9: 	movq	0x8(%r13), %r12
    000008bd: 	leaq	0xe0(%rsp), %rbx
    000008c5: 	movq	%rbx, 0xd0(%rsp)
    000008cd: 	movq	%r14, %rax
    000008d0: 	addq	%r12, %rax
    000008d3: 	je	.Ltmp2351 # Offset: 2259
    000008d5: 	testq	%r14, %r14
    000008d8: 	je	.Ltmp2316 # Offset: 2264
.Ltmp2351:
    000008de: 	movq	%r12, 0x68(%rsp)
    000008e3: 	cmpq	$0xf, %r12
    000008e7: 	ja	.Ltmp2352 # Offset: 2279
    000008ed: 	cmpq	$0x1, %r12
    000008f1: 	jne	.Ltmp2353 # Offset: 2289
    000008f7: 	movzbl	(%r14), %eax
    000008fb: 	movb	%al, 0xe0(%rsp)
    00000902: 	movq	%rbx, %rax
.Ltmp2417:
    00000905: 	movq	%r12, 0xd8(%rsp)
    0000090d: 	movb	$0x0, (%rax,%r12)
    00000912: 	movabsq	$0x3fffffffffffffff, %rax
    0000091c: 	subq	0xd8(%rsp), %rax
    00000924: 	cmpq	$0x8, %rax
    00000928: 	jbe	.Ltmp2354 # Offset: 2344
    0000092e: 	leaq	0xd0(%rsp), %r12
    00000936: 	movl	$0x9, %edx
    0000093b: 	leaq	DATAat0x4d24b(%rip), %rsi
    00000942: 	movq	%r12, %rdi
    00000945: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2373
    0000094a: 	movl	0x1c(%rsp), %edx
    0000094e: 	movq	%r12, %rcx
    00000951: 	movl	$0x1f40, %esi
    00000956: 	movq	%rbp, %rdi
    00000959: 	callq	_Z9test_CSENIa14custom_cse_subIaELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2393
    0000095e: 	movq	0xd0(%rsp), %rdi
    00000966: 	cmpq	%rbx, %rdi
    00000969: 	je	.Ltmp2355 # Offset: 2409
    0000096b: 	movq	0xe0(%rsp), %rax
    00000973: 	leaq	0x1(%rax), %rsi
    00000977: 	callq	_ZdlPvm@PLT # Offset: 2423
.Ltmp2355:
    0000097c: 	movq	0x8(%rsp), %rdi
    00000981: 	leaq	DATAat0x4d259(%rip), %rdx
    00000988: 	movq	%r13, %rsi
    0000098b: 	xorl	%r12d, %r12d
    0000098e: 	leaq	0x1f30(%rbp), %rbx
    00000995: 	leaq	DATAat0x4d004(%rip), %r14
    0000099c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2460
    000009a1: 	callq	clock@PLT # Offset: 2465
    000009a6: 	movl	iterations(%rip), %r15d
    000009ad: 	movq	%rax, start_time(%rip)
    000009b4: 	testl	%r15d, %r15d
    000009b7: 	jle	.Ltmp2356 # Offset: 2487
    000009bd: 	nopl	(%rax) # Size: 3
.Ltmp2359:
    000009c0: 	movzbl	(%rbp), %r10d
    000009c5: 	subb	0x1(%rbp), %r10b
    000009c9: 	movq	%rbp, %rax
    000009cc: 	pxor	%xmm1, %xmm1
    000009d0: 	shll	$0x3, %r10d
    000009d4: 	nopl	(%rax) # Size: 4
.Ltmp2357:
    000009d8: 	movdqu	(%rax), %xmm0
    000009dc: 	movdqu	0x1(%rax), %xmm5
    000009e1: 	addq	$0x10, %rax
    000009e5: 	psubb	%xmm5, %xmm0
    000009e9: 	paddb	%xmm0, %xmm0
    000009ed: 	paddb	%xmm0, %xmm0
    000009f1: 	paddb	%xmm0, %xmm0
    000009f5: 	paddb	%xmm0, %xmm1
    000009f9: 	cmpq	%rbx, %rax
    000009fc: 	jne	.Ltmp2357 # Offset: 2556
    000009fe: 	movdqa	%xmm1, %xmm0
    00000a02: 	psrldq	$0x8, %xmm0
    00000a07: 	paddb	%xmm0, %xmm1
    00000a0b: 	pxor	%xmm0, %xmm0
    00000a0f: 	psadbw	%xmm0, %xmm1
    00000a13: 	movq	0x1f30(%rbp), %xmm0
    00000a1b: 	movd	%xmm1, %eax
    00000a1f: 	movq	0x1f31(%rbp), %xmm1
    00000a27: 	addl	%eax, %r10d
    00000a2a: 	psubb	%xmm1, %xmm0
    00000a2e: 	pxor	%xmm1, %xmm1
    00000a32: 	paddb	%xmm0, %xmm0
    00000a36: 	paddb	%xmm0, %xmm0
    00000a3a: 	paddb	%xmm0, %xmm0
    00000a3e: 	movdqa	%xmm0, %xmm6
    00000a42: 	psadbw	%xmm1, %xmm6
    00000a46: 	movq	%xmm6, 0x40(%rsp)
    00000a4c: 	movq	%xmm6, %rax
    00000a51: 	movzbl	0x1f39(%rbp), %r8d
    00000a59: 	movzbl	0x1f38(%rbp), %r9d
    00000a61: 	movzbl	0x1f3a(%rbp), %edi
    00000a68: 	movl	%eax, %r11d
    00000a6b: 	movzbl	0x1f3b(%rbp), %esi
    00000a72: 	subl	%r8d, %r9d
    00000a75: 	addl	%r10d, %r11d
    00000a78: 	movzbl	0x1f3c(%rbp), %ecx
    00000a7f: 	movzbl	0x1f3d(%rbp), %edx
    00000a86: 	subl	%edi, %r8d
    00000a89: 	leal	(%r11,%r9,8), %r9d
    00000a8d: 	subl	%esi, %edi
    00000a8f: 	movzbl	0x1f3e(%rbp), %eax
    00000a96: 	leal	(%r9,%r8,8), %r8d
    00000a9a: 	subl	%ecx, %esi
    00000a9c: 	subl	%edx, %ecx
    00000a9e: 	leal	(%r8,%rdi,8), %edi
    00000aa2: 	subl	%eax, %edx
    00000aa4: 	subb	0x1f3f(%rbp), %al
    00000aaa: 	leal	(%rdi,%rsi,8), %esi
    00000aad: 	leal	(%rsi,%rcx,8), %ecx
    00000ab0: 	leal	(%rcx,%rdx,8), %edx
    00000ab3: 	leal	(%rdx,%rax,8), %eax
    00000ab6: 	testb	%al, %al
    00000ab8: 	jne	.Ltmp2358 # Offset: 2744
.Ltmp2408:
    00000abe: 	addl	$0x1, %r12d
    00000ac2: 	cmpl	%r15d, %r12d
    00000ac5: 	jl	.Ltmp2359 # Offset: 2757
.Ltmp2356:
    00000acb: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000ad2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000ad9: 	subq	$0x20, %rax
    00000add: 	cmpq	%rax, %rbx
    00000ae0: 	je	.Ltmp2360 # Offset: 2784
    00000ae6: 	leaq	0x10(%rbx), %rdi
    00000aea: 	movq	0x138(%rsp), %r12
    00000af2: 	movq	%rdi, (%rbx)
    00000af5: 	movq	0x130(%rsp), %r14
    00000afd: 	movq	%r14, %rax
    00000b00: 	addq	%r12, %rax
    00000b03: 	je	.Ltmp2361 # Offset: 2819
    00000b05: 	testq	%r14, %r14
    00000b08: 	je	.Ltmp2362 # Offset: 2824
.Ltmp2361:
    00000b0e: 	movq	%r12, 0x68(%rsp)
    00000b13: 	cmpq	$0xf, %r12
    00000b17: 	ja	.Ltmp2363 # Offset: 2839
    00000b1d: 	cmpq	$0x1, %r12
    00000b21: 	jne	.Ltmp2364 # Offset: 2849
    00000b27: 	movzbl	(%r14), %eax
    00000b2b: 	movb	%al, 0x10(%rbx)
.Ltmp2441:
    00000b2e: 	movq	%r12, 0x8(%rbx)
    00000b32: 	movb	$0x0, (%rdi,%r12)
    00000b37: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000b3e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000b45: 	addq	$0x20, %rax
    00000b49: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000b50: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000b57: 	je	.Ltmp2365 # Offset: 2903
.Ltmp2426:
    00000b5d: 	movq	-0x20(%rax), %r12
    00000b61: 	callq	clock@PLT # Offset: 2913
    00000b66: 	pxor	%xmm0, %xmm0
    00000b6a: 	movq	%rax, end_time(%rip)
    00000b71: 	movq	%r12, %rdi
    00000b74: 	subq	start_time(%rip), %rax
    00000b7b: 	cvtsi2sd	%rax, %xmm0
    00000b80: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000b88: 	callq	_Z13record_resultdPKc # Offset: 2952
    00000b8d: 	movq	0x130(%rsp), %rdi
    00000b95: 	cmpq	0x10(%rsp), %rdi
    00000b9a: 	je	.Ltmp2366 # Offset: 2970
    00000b9c: 	movq	0x140(%rsp), %rax
    00000ba4: 	leaq	0x1(%rax), %rsi
    00000ba8: 	callq	_ZdlPvm@PLT # Offset: 2984
.Ltmp2366:
    00000bad: 	movq	(%r13), %r14
    00000bb1: 	movq	0x8(%r13), %r12
    00000bb5: 	leaq	0x100(%rsp), %rbx
    00000bbd: 	movq	%rbx, 0xf0(%rsp)
    00000bc5: 	movq	%r14, %rax
    00000bc8: 	addq	%r12, %rax
    00000bcb: 	je	.Ltmp2367 # Offset: 3019
    00000bcd: 	testq	%r14, %r14
    00000bd0: 	je	.Ltmp2316 # Offset: 3024
.Ltmp2367:
    00000bd6: 	movq	%r12, 0x68(%rsp)
    00000bdb: 	cmpq	$0xf, %r12
    00000bdf: 	ja	.Ltmp2368 # Offset: 3039
    00000be5: 	cmpq	$0x1, %r12
    00000be9: 	jne	.Ltmp2369 # Offset: 3049
    00000bef: 	movzbl	(%r14), %eax
    00000bf3: 	movb	%al, 0x100(%rsp)
    00000bfa: 	movq	%rbx, %rax
.Ltmp2413:
    00000bfd: 	movq	%r12, 0xf8(%rsp)
    00000c05: 	movb	$0x0, (%rax,%r12)
    00000c0a: 	movabsq	$0x3fffffffffffffff, %rax
    00000c14: 	subq	0xf8(%rsp), %rax
    00000c1c: 	cmpq	$0x8, %rax
    00000c20: 	jbe	.Ltmp2370 # Offset: 3104
    00000c26: 	leaq	0xf0(%rsp), %r12
    00000c2e: 	movl	$0x9, %edx
    00000c33: 	leaq	DATAat0x4d270(%rip), %rsi
    00000c3a: 	movq	%r12, %rdi
    00000c3d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3133
    00000c42: 	movl	0x1c(%rsp), %edx
    00000c46: 	movq	%r12, %rcx
    00000c49: 	movl	$0x1f40, %esi
    00000c4e: 	movq	%rbp, %rdi
    00000c51: 	callq	_Z9test_CSENIa14custom_cse_mulIaELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3153
    00000c56: 	movq	0xf0(%rsp), %rdi
    00000c5e: 	cmpq	%rbx, %rdi
    00000c61: 	je	.Ltmp2371 # Offset: 3169
    00000c63: 	movq	0x100(%rsp), %rax
    00000c6b: 	leaq	0x1(%rax), %rsi
    00000c6f: 	callq	_ZdlPvm@PLT # Offset: 3183
.Ltmp2371:
    00000c74: 	movq	0x8(%rsp), %rdi
    00000c79: 	leaq	DATAat0x4d27e(%rip), %rdx
    00000c80: 	movq	%r13, %rsi
    00000c83: 	xorl	%r12d, %r12d
    00000c86: 	leaq	0x1f30(%rbp), %rbx
    00000c8d: 	leaq	DATAat0x4d004(%rip), %r14
    00000c94: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3220
    00000c99: 	callq	clock@PLT # Offset: 3225
    00000c9e: 	movl	iterations(%rip), %r15d
    00000ca5: 	movq	%rax, start_time(%rip)
    00000cac: 	testl	%r15d, %r15d
    00000caf: 	jle	.Ltmp2372 # Offset: 3247
    00000cb5: 	nopl	(%rax) # Size: 3
.Ltmp2375:
    00000cb8: 	movzbl	(%rbp), %r10d
    00000cbd: 	subb	0x1(%rbp), %r10b
    00000cc1: 	movq	%rbp, %rax
    00000cc4: 	pxor	%xmm1, %xmm1
    00000cc8: 	shll	$0x3, %r10d
    00000ccc: 	nopl	(%rax) # Size: 4
.Ltmp2373:
    00000cd0: 	movdqu	(%rax), %xmm0
    00000cd4: 	movdqu	0x1(%rax), %xmm6
    00000cd9: 	addq	$0x10, %rax
    00000cdd: 	psubb	%xmm6, %xmm0
    00000ce1: 	paddb	%xmm0, %xmm0
    00000ce5: 	paddb	%xmm0, %xmm0
    00000ce9: 	paddb	%xmm0, %xmm0
    00000ced: 	paddb	%xmm0, %xmm1
    00000cf1: 	cmpq	%rbx, %rax
    00000cf4: 	jne	.Ltmp2373 # Offset: 3316
    00000cf6: 	movdqa	%xmm1, %xmm0
    00000cfa: 	psrldq	$0x8, %xmm0
    00000cff: 	paddb	%xmm0, %xmm1
    00000d03: 	pxor	%xmm0, %xmm0
    00000d07: 	psadbw	%xmm0, %xmm1
    00000d0b: 	movq	0x1f30(%rbp), %xmm0
    00000d13: 	movd	%xmm1, %eax
    00000d17: 	movq	0x1f31(%rbp), %xmm1
    00000d1f: 	addl	%eax, %r10d
    00000d22: 	psubb	%xmm1, %xmm0
    00000d26: 	pxor	%xmm1, %xmm1
    00000d2a: 	paddb	%xmm0, %xmm0
    00000d2e: 	paddb	%xmm0, %xmm0
    00000d32: 	paddb	%xmm0, %xmm0
    00000d36: 	movdqa	%xmm0, %xmm3
    00000d3a: 	psadbw	%xmm1, %xmm3
    00000d3e: 	movq	%xmm3, 0x38(%rsp)
    00000d44: 	movq	%xmm3, %rax
    00000d49: 	movzbl	0x1f39(%rbp), %r8d
    00000d51: 	movzbl	0x1f38(%rbp), %r9d
    00000d59: 	movzbl	0x1f3a(%rbp), %edi
    00000d60: 	movl	%eax, %r11d
    00000d63: 	movzbl	0x1f3b(%rbp), %esi
    00000d6a: 	subl	%r8d, %r9d
    00000d6d: 	addl	%r10d, %r11d
    00000d70: 	movzbl	0x1f3c(%rbp), %ecx
    00000d77: 	movzbl	0x1f3d(%rbp), %edx
    00000d7e: 	subl	%edi, %r8d
    00000d81: 	leal	(%r11,%r9,8), %r9d
    00000d85: 	subl	%esi, %edi
    00000d87: 	movzbl	0x1f3e(%rbp), %eax
    00000d8e: 	leal	(%r9,%r8,8), %r8d
    00000d92: 	subl	%ecx, %esi
    00000d94: 	subl	%edx, %ecx
    00000d96: 	leal	(%r8,%rdi,8), %edi
    00000d9a: 	subl	%eax, %edx
    00000d9c: 	subb	0x1f3f(%rbp), %al
    00000da2: 	leal	(%rdi,%rsi,8), %esi
    00000da5: 	leal	(%rsi,%rcx,8), %ecx
    00000da8: 	leal	(%rcx,%rdx,8), %edx
    00000dab: 	leal	(%rdx,%rax,8), %eax
    00000dae: 	testb	%al, %al
    00000db0: 	jne	.Ltmp2374 # Offset: 3504
.Ltmp2410:
    00000db6: 	addl	$0x1, %r12d
    00000dba: 	cmpl	%r15d, %r12d
    00000dbd: 	jl	.Ltmp2375 # Offset: 3517
.Ltmp2372:
    00000dc3: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000dca: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000dd1: 	subq	$0x20, %rax
    00000dd5: 	cmpq	%rax, %rbx
    00000dd8: 	je	.Ltmp2376 # Offset: 3544
    00000dde: 	leaq	0x10(%rbx), %rdi
    00000de2: 	movq	0x138(%rsp), %r12
    00000dea: 	movq	%rdi, (%rbx)
    00000ded: 	movq	0x130(%rsp), %r14
    00000df5: 	movq	%r14, %rax
    00000df8: 	addq	%r12, %rax
    00000dfb: 	je	.Ltmp2377 # Offset: 3579
    00000dfd: 	testq	%r14, %r14
    00000e00: 	je	.Ltmp2378 # Offset: 3584
.Ltmp2377:
    00000e06: 	movq	%r12, 0x68(%rsp)
    00000e0b: 	cmpq	$0xf, %r12
    00000e0f: 	ja	.Ltmp2379 # Offset: 3599
    00000e15: 	cmpq	$0x1, %r12
    00000e19: 	jne	.Ltmp2380 # Offset: 3609
    00000e1f: 	movzbl	(%r14), %eax
    00000e23: 	movb	%al, 0x10(%rbx)
.Ltmp2437:
    00000e26: 	movq	%r12, 0x8(%rbx)
    00000e2a: 	movb	$0x0, (%rdi,%r12)
    00000e2f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000e36: 	addq	$0x20, %rax
    00000e3a: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp2432:
    00000e41: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000e48: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000e4f: 	je	.Ltmp2381 # Offset: 3663
.Ltmp2431:
    00000e55: 	movq	-0x20(%rax), %r12
    00000e59: 	callq	clock@PLT # Offset: 3673
    00000e5e: 	pxor	%xmm0, %xmm0
    00000e62: 	movq	%rax, end_time(%rip)
    00000e69: 	movq	%r12, %rdi
    00000e6c: 	subq	start_time(%rip), %rax
    00000e73: 	cvtsi2sd	%rax, %xmm0
    00000e78: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000e80: 	callq	_Z13record_resultdPKc # Offset: 3712
    00000e85: 	movq	0x130(%rsp), %rdi
    00000e8d: 	cmpq	0x10(%rsp), %rdi
    00000e92: 	je	.Ltmp2382 # Offset: 3730
    00000e94: 	movq	0x140(%rsp), %rax
    00000e9c: 	leaq	0x1(%rax), %rsi
    00000ea0: 	callq	_ZdlPvm@PLT # Offset: 3744
.Ltmp2382:
    00000ea5: 	movq	0x8(%rsp), %rbx
    00000eaa: 	leaq	DATAat0x4d293(%rip), %rdx
    00000eb1: 	movq	%r13, %rsi
    00000eb4: 	movq	%rbx, %rdi
    00000eb7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3767
    00000ebc: 	movl	0x1c(%rsp), %edx
    00000ec0: 	movq	%rbx, %rcx
    00000ec3: 	movq	%rbp, %rdi
    00000ec6: 	movl	$0x1f40, %esi
    00000ecb: 	callq	_Z9test_CSENIa14custom_cse_divIaELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3787
    00000ed0: 	movq	0x130(%rsp), %rdi
    00000ed8: 	cmpq	0x10(%rsp), %rdi
    00000edd: 	je	.Ltmp2383 # Offset: 3805
    00000edf: 	movq	0x140(%rsp), %rax
    00000ee7: 	leaq	0x1(%rax), %rsi
    00000eeb: 	callq	_ZdlPvm@PLT # Offset: 3819
.Ltmp2383:
    00000ef0: 	movq	(%r13), %r14
    00000ef4: 	leaq	0x120(%rsp), %rax
    00000efc: 	movq	0x8(%r13), %r12
    00000f00: 	movq	%rax, 0x20(%rsp)
    00000f05: 	movq	%rax, 0x110(%rsp)
    00000f0d: 	movq	%r14, %rax
    00000f10: 	addq	%r12, %rax
    00000f13: 	je	.Ltmp2384 # Offset: 3859
    00000f15: 	testq	%r14, %r14
    00000f18: 	je	.Ltmp2316 # Offset: 3864
.Ltmp2384:
    00000f1e: 	movq	%r12, 0x68(%rsp)
    00000f23: 	cmpq	$0xf, %r12
    00000f27: 	ja	.Ltmp2385 # Offset: 3879
    00000f2d: 	cmpq	$0x1, %r12
    00000f31: 	jne	.Ltmp2386 # Offset: 3889
    00000f37: 	movzbl	(%r14), %eax
    00000f3b: 	movb	%al, 0x120(%rsp)
    00000f42: 	movq	0x20(%rsp), %rax
.Ltmp2425:
    00000f47: 	movq	%r12, 0x118(%rsp)
    00000f4f: 	movb	$0x0, (%rax,%r12)
    00000f54: 	movabsq	$0x3fffffffffffffff, %rax
    00000f5e: 	subq	0x118(%rsp), %rax
    00000f66: 	cmpq	$0xc, %rax
    00000f6a: 	jbe	.Ltmp2387 # Offset: 3946
    00000f70: 	leaq	0x110(%rsp), %rax
    00000f78: 	movl	$0xd, %edx
    00000f7d: 	leaq	DATAat0x4d29f(%rip), %rsi
    00000f84: 	movq	%rax, %rdi
    00000f87: 	movq	%rax, 0x28(%rsp)
    00000f8c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3980
    00000f91: 	callq	clock@PLT # Offset: 3985
    00000f96: 	movl	iterations(%rip), %r15d
    00000f9d: 	xorl	%r12d, %r12d
    00000fa0: 	leaq	0x1f30(%rbp), %rbx
    00000fa7: 	movq	%rax, start_time(%rip)
    00000fae: 	leaq	DATAat0x4d004(%rip), %r14
    00000fb5: 	testl	%r15d, %r15d
    00000fb8: 	jle	.Ltmp2388 # Offset: 4024
    00000fbe: 	nop # Size: 2
.Ltmp2391:
    00000fc0: 	movzbl	(%rbp), %r10d
    00000fc5: 	subb	0x1(%rbp), %r10b
    00000fc9: 	movq	%rbp, %rax
    00000fcc: 	pxor	%xmm1, %xmm1
    00000fd0: 	shll	$0x3, %r10d
    00000fd4: 	nopl	(%rax) # Size: 4
.Ltmp2389:
    00000fd8: 	movdqu	(%rax), %xmm0
    00000fdc: 	movdqu	0x1(%rax), %xmm7
    00000fe1: 	addq	$0x10, %rax
    00000fe5: 	psubb	%xmm7, %xmm0
    00000fe9: 	paddb	%xmm0, %xmm0
    00000fed: 	paddb	%xmm0, %xmm0
    00000ff1: 	paddb	%xmm0, %xmm0
    00000ff5: 	paddb	%xmm0, %xmm1
    00000ff9: 	cmpq	%rbx, %rax
    00000ffc: 	jne	.Ltmp2389 # Offset: 4092
    00000ffe: 	movdqa	%xmm1, %xmm0
    00001002: 	psrldq	$0x8, %xmm0
    00001007: 	paddb	%xmm0, %xmm1
    0000100b: 	pxor	%xmm0, %xmm0
    0000100f: 	psadbw	%xmm0, %xmm1
    00001013: 	movq	0x1f30(%rbp), %xmm0
    0000101b: 	movd	%xmm1, %eax
    0000101f: 	movq	0x1f31(%rbp), %xmm1
    00001027: 	addl	%eax, %r10d
    0000102a: 	psubb	%xmm1, %xmm0
    0000102e: 	pxor	%xmm1, %xmm1
    00001032: 	paddb	%xmm0, %xmm0
    00001036: 	paddb	%xmm0, %xmm0
    0000103a: 	paddb	%xmm0, %xmm0
    0000103e: 	movdqa	%xmm0, %xmm2
    00001042: 	psadbw	%xmm1, %xmm2
    00001046: 	movq	%xmm2, 0x30(%rsp)
    0000104c: 	movq	%xmm2, %rax
    00001051: 	movzbl	0x1f39(%rbp), %r8d
    00001059: 	movzbl	0x1f38(%rbp), %r9d
    00001061: 	movzbl	0x1f3a(%rbp), %edi
    00001068: 	movl	%eax, %r11d
    0000106b: 	movzbl	0x1f3b(%rbp), %esi
    00001072: 	subl	%r8d, %r9d
    00001075: 	addl	%r10d, %r11d
    00001078: 	movzbl	0x1f3c(%rbp), %ecx
    0000107f: 	movzbl	0x1f3d(%rbp), %edx
    00001086: 	subl	%edi, %r8d
    00001089: 	leal	(%r11,%r9,8), %r9d
    0000108d: 	subl	%esi, %edi
    0000108f: 	movzbl	0x1f3e(%rbp), %eax
    00001096: 	leal	(%r9,%r8,8), %r8d
    0000109a: 	subl	%ecx, %esi
    0000109c: 	subl	%edx, %ecx
    0000109e: 	leal	(%r8,%rdi,8), %edi
    000010a2: 	subl	%eax, %edx
    000010a4: 	subb	0x1f3f(%rbp), %al
    000010aa: 	leal	(%rdi,%rsi,8), %esi
    000010ad: 	leal	(%rsi,%rcx,8), %ecx
    000010b0: 	leal	(%rcx,%rdx,8), %edx
    000010b3: 	leal	(%rdx,%rax,8), %eax
    000010b6: 	testb	%al, %al
    000010b8: 	jne	.Ltmp2390 # Offset: 4280
.Ltmp2409:
    000010be: 	addl	$0x1, %r12d
    000010c2: 	cmpl	%r15d, %r12d
    000010c5: 	jl	.Ltmp2391 # Offset: 4293
.Ltmp2388:
    000010cb: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000010d2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000010d9: 	subq	$0x20, %rax
    000010dd: 	cmpq	%rax, %rbx
    000010e0: 	je	.Ltmp2392 # Offset: 4320
    000010e6: 	leaq	0x10(%rbx), %rdi
    000010ea: 	movq	0x118(%rsp), %r12
    000010f2: 	movq	%rdi, (%rbx)
    000010f5: 	movq	0x110(%rsp), %r14
    000010fd: 	movq	%r14, %rax
    00001100: 	addq	%r12, %rax
    00001103: 	je	.Ltmp2393 # Offset: 4355
    00001105: 	testq	%r14, %r14
    00001108: 	je	.Ltmp2394 # Offset: 4360
.Ltmp2393:
    0000110e: 	movq	%r12, 0x68(%rsp)
    00001113: 	cmpq	$0xf, %r12
    00001117: 	ja	.Ltmp2395 # Offset: 4375
    0000111d: 	cmpq	$0x1, %r12
    00001121: 	jne	.Ltmp2396 # Offset: 4385
    00001127: 	movzbl	(%r14), %eax
    0000112b: 	movb	%al, 0x10(%rbx)
.Ltmp2439:
    0000112e: 	movq	%r12, 0x8(%rbx)
    00001132: 	movb	$0x0, (%rdi,%r12)
    00001137: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000113e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001145: 	addq	$0x20, %rax
    00001149: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00001150: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00001157: 	je	.Ltmp2397 # Offset: 4439
.Ltmp2427:
    0000115d: 	movq	-0x20(%rax), %r12
    00001161: 	callq	clock@PLT # Offset: 4449
    00001166: 	pxor	%xmm0, %xmm0
    0000116a: 	movq	%rax, end_time(%rip)
    00001171: 	movq	%r12, %rdi
    00001174: 	subq	start_time(%rip), %rax
    0000117b: 	cvtsi2sd	%rax, %xmm0
    00001180: 	divsd	DATAat0x4d640(%rip), %xmm0
    00001188: 	callq	_Z13record_resultdPKc # Offset: 4488
    0000118d: 	movq	0x110(%rsp), %rdi
    00001195: 	cmpq	0x20(%rsp), %rdi
    0000119a: 	je	.Ltmp2398 # Offset: 4506
    0000119c: 	movq	0x120(%rsp), %rax
    000011a4: 	leaq	0x1(%rax), %rsi
    000011a8: 	callq	_ZdlPvm@PLT # Offset: 4520
.Ltmp2398:
    000011ad: 	movq	0x10(%rsp), %rax
    000011b2: 	movq	(%r13), %r14
    000011b6: 	movq	0x8(%r13), %r12
    000011ba: 	movq	%rax, 0x130(%rsp)
    000011c2: 	movq	%r14, %rax
    000011c5: 	addq	%r12, %rax
    000011c8: 	je	.Ltmp2399 # Offset: 4552
    000011ca: 	testq	%r14, %r14
    000011cd: 	je	.Ltmp2316 # Offset: 4557
.Ltmp2399:
    000011d3: 	movq	%r12, 0x68(%rsp)
    000011d8: 	cmpq	$0xf, %r12
    000011dc: 	ja	.Ltmp2400 # Offset: 4572
    000011e2: 	cmpq	$0x1, %r12
    000011e6: 	jne	.Ltmp2401 # Offset: 4582
    000011ec: 	movzbl	(%r14), %eax
    000011f0: 	movb	%al, 0x140(%rsp)
    000011f7: 	movq	0x10(%rsp), %rax
.Ltmp2419:
    000011fc: 	movq	%r12, 0x138(%rsp)
    00001204: 	movb	$0x0, (%rax,%r12)
    00001209: 	movabsq	$0x3fffffffffffffff, %rax
    00001213: 	subq	0x138(%rsp), %rax
    0000121b: 	cmpq	$0x3, %rax
    0000121f: 	jbe	.Ltmp2402 # Offset: 4639
    00001225: 	movq	0x8(%rsp), %rdi
    0000122a: 	movl	$0x4, %edx
    0000122f: 	leaq	DATAat0x4d2b1(%rip), %rsi
    00001236: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4662
    0000123b: 	movq	0x8(%rsp), %rcx
    00001240: 	movl	0x1c(%rsp), %edx
    00001244: 	movl	$0x1f40, %esi
    00001249: 	movq	%rbp, %rdi
    0000124c: 	callq	_Z9test_CSENIa14custom_cse_mixIaELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4684
    00001251: 	movq	0x130(%rsp), %rdi
    00001259: 	cmpq	0x10(%rsp), %rdi
    0000125e: 	je	.Ltmp2403 # Offset: 4702
    00001260: 	movq	0x140(%rsp), %rax
    00001268: 	leaq	0x1(%rax), %rsi
    0000126c: 	callq	_ZdlPvm@PLT # Offset: 4716
.Ltmp2403:
    00001271: 	movq	0x158(%rsp), %rax
    00001279: 	subq	%fs:0x28, %rax
    00001282: 	jne	.Ltmp2404 # Offset: 4738
    00001288: 	movq	(%r13), %rdi
    0000128c: 	movl	iterations(%rip), %edx
    00001292: 	xorl	%r8d, %r8d
    00001295: 	xorl	%ecx, %ecx
    00001297: 	addq	$0x168, %rsp
    0000129e: 	movl	$0x1f40, %esi
    000012a3: 	popq	%rbx
    000012a4: 	popq	%rbp
    000012a5: 	popq	%r12
    000012a7: 	popq	%r13
    000012a9: 	popq	%r14
    000012ab: 	popq	%r15
    000012ad: 	jmp	_Z9summarizePKciiii # TAILCALL  # Offset: 4781
    000012b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2306:
    000012b8: 	movq	0x130(%rsp), %rdx
    000012c0: 	movq	%r14, %rsi
    000012c3: 	movl	$0x1, %edi
    000012c8: 	xorl	%eax, %eax
    000012ca: 	callq	__printf_chk@PLT # Offset: 4810
    000012cf: 	movl	iterations(%rip), %r15d
    000012d6: 	jmp	.Ltmp2405 # Offset: 4822
.Ltmp2311:
    000012db: 	leaq	0x68(%rsp), %rsi
    000012e0: 	xorl	%edx, %edx
    000012e2: 	movq	%rbx, %rdi
    000012e5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4837
    000012ea: 	movq	%rax, (%rbx)
    000012ed: 	movq	%rax, %rdi
    000012f0: 	movq	0x68(%rsp), %rax
    000012f5: 	movq	%rax, 0x10(%rbx)
.Ltmp2433:
    000012f9: 	movq	%r12, %rdx
    000012fc: 	movq	%r14, %rsi
    000012ff: 	callq	memcpy@PLT # Offset: 4863
    00001304: 	movq	0x68(%rsp), %r12
    00001309: 	movq	(%rbx), %rdi
    0000130c: 	jmp	.Ltmp2406 # Offset: 4876
    00001311: 	nopl	(%rax) # Size: 7
.Ltmp2322:
    00001318: 	movq	0x70(%rsp), %rdx
    0000131d: 	movq	%r14, %rsi
    00001320: 	movl	$0x1, %edi
    00001325: 	xorl	%eax, %eax
    00001327: 	callq	__printf_chk@PLT # Offset: 4903
    0000132c: 	movl	iterations(%rip), %r15d
    00001333: 	jmp	.Ltmp2407 # Offset: 4915
    00001338: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2358:
    00001340: 	movq	0x130(%rsp), %rdx
    00001348: 	movq	%r14, %rsi
    0000134b: 	movl	$0x1, %edi
    00001350: 	xorl	%eax, %eax
    00001352: 	callq	__printf_chk@PLT # Offset: 4946
    00001357: 	movl	iterations(%rip), %r15d
    0000135e: 	jmp	.Ltmp2408 # Offset: 4958
    00001363: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2390:
    00001368: 	movq	0x110(%rsp), %rdx
    00001370: 	movq	%r14, %rsi
    00001373: 	movl	$0x1, %edi
    00001378: 	xorl	%eax, %eax
    0000137a: 	callq	__printf_chk@PLT # Offset: 4986
    0000137f: 	movl	iterations(%rip), %r15d
    00001386: 	jmp	.Ltmp2409 # Offset: 4998
    0000138b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2374:
    00001390: 	movq	0x130(%rsp), %rdx
    00001398: 	movq	%r14, %rsi
    0000139b: 	movl	$0x1, %edi
    000013a0: 	xorl	%eax, %eax
    000013a2: 	callq	__printf_chk@PLT # Offset: 5026
    000013a7: 	movl	iterations(%rip), %r15d
    000013ae: 	jmp	.Ltmp2410 # Offset: 5038
    000013b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2342:
    000013b8: 	movq	0xb0(%rsp), %rdx
    000013c0: 	movq	%r14, %rsi
    000013c3: 	movl	$0x1, %edi
    000013c8: 	xorl	%eax, %eax
    000013ca: 	callq	__printf_chk@PLT # Offset: 5066
    000013cf: 	movl	iterations(%rip), %r15d
    000013d6: 	jmp	.Ltmp2411 # Offset: 5078
.Ltmp2369:
    000013db: 	testq	%r12, %r12
    000013de: 	jne	.Ltmp2412 # Offset: 5086
    000013e4: 	movq	%rbx, %rax
    000013e7: 	jmp	.Ltmp2413 # Offset: 5095
.Ltmp2338:
    000013ec: 	testq	%r12, %r12
    000013ef: 	jne	.Ltmp2414 # Offset: 5103
    000013f5: 	movq	0x20(%rsp), %rax
    000013fa: 	jmp	.Ltmp2415 # Offset: 5114
.Ltmp2353:
    000013ff: 	testq	%r12, %r12
    00001402: 	jne	.Ltmp2416 # Offset: 5122
    00001408: 	movq	%rbx, %rax
    0000140b: 	jmp	.Ltmp2417 # Offset: 5131
.Ltmp2401:
    00001410: 	testq	%r12, %r12
    00001413: 	jne	.Ltmp2418 # Offset: 5139
    00001419: 	movq	0x10(%rsp), %rax
    0000141e: 	jmp	.Ltmp2419 # Offset: 5150
.Ltmp2333:
    00001423: 	testq	%r12, %r12
    00001426: 	jne	.Ltmp2420 # Offset: 5158
    0000142c: 	movq	%rbx, %rax
    0000142f: 	jmp	.Ltmp2421 # Offset: 5167
.Ltmp2318:
    00001434: 	testq	%r12, %r12
    00001437: 	jne	.Ltmp2422 # Offset: 5175
    0000143d: 	movq	0x20(%rsp), %rax
    00001442: 	jmp	.Ltmp2423 # Offset: 5186
.Ltmp2386:
    00001447: 	testq	%r12, %r12
    0000144a: 	jne	.Ltmp2424 # Offset: 5194
    00001450: 	movq	0x20(%rsp), %rax
    00001455: 	jmp	.Ltmp2425 # Offset: 5205
.Ltmp2385:
    0000145a: 	leaq	0x110(%rsp), %rdi
    00001462: 	leaq	0x68(%rsp), %rsi
    00001467: 	xorl	%edx, %edx
    00001469: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5225
    0000146e: 	movq	%rax, 0x110(%rsp)
    00001476: 	movq	%rax, %rdi
    00001479: 	movq	0x68(%rsp), %rax
    0000147e: 	movq	%rax, 0x120(%rsp)
.Ltmp2450:
    00001486: 	movq	%r12, %rdx
    00001489: 	movq	%r14, %rsi
    0000148c: 	callq	memcpy@PLT # Offset: 5260
    00001491: 	movq	0x68(%rsp), %r12
    00001496: 	movq	0x110(%rsp), %rax
    0000149e: 	jmp	.Ltmp2425 # Offset: 5278
.Ltmp2400:
    000014a3: 	movq	0x8(%rsp), %rdi
    000014a8: 	leaq	0x68(%rsp), %rsi
    000014ad: 	xorl	%edx, %edx
    000014af: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5295
    000014b4: 	movq	%rax, 0x130(%rsp)
    000014bc: 	movq	%rax, %rdi
    000014bf: 	movq	0x68(%rsp), %rax
    000014c4: 	movq	%rax, 0x140(%rsp)
.Ltmp2447:
    000014cc: 	movq	%r12, %rdx
    000014cf: 	movq	%r14, %rsi
    000014d2: 	callq	memcpy@PLT # Offset: 5330
    000014d7: 	movq	0x68(%rsp), %r12
    000014dc: 	movq	0x130(%rsp), %rax
    000014e4: 	jmp	.Ltmp2419 # Offset: 5348
.Ltmp2337:
    000014e9: 	leaq	0xb0(%rsp), %rdi
    000014f1: 	leaq	0x68(%rsp), %rsi
    000014f6: 	xorl	%edx, %edx
    000014f8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5368
    000014fd: 	movq	%rax, 0xb0(%rsp)
    00001505: 	movq	%rax, %rdi
    00001508: 	movq	0x68(%rsp), %rax
    0000150d: 	movq	%rax, 0xc0(%rsp)
.Ltmp2445:
    00001515: 	movq	%r12, %rdx
    00001518: 	movq	%r14, %rsi
    0000151b: 	callq	memcpy@PLT # Offset: 5403
    00001520: 	movq	0x68(%rsp), %r12
    00001525: 	movq	0xb0(%rsp), %rax
    0000152d: 	jmp	.Ltmp2415 # Offset: 5421
.Ltmp2317:
    00001532: 	leaq	0x70(%rsp), %rdi
    00001537: 	leaq	0x68(%rsp), %rsi
    0000153c: 	xorl	%edx, %edx
    0000153e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5438
    00001543: 	movq	%rax, 0x70(%rsp)
    00001548: 	movq	%rax, %rdi
    0000154b: 	movq	0x68(%rsp), %rax
    00001550: 	movq	%rax, 0x80(%rsp)
.Ltmp2449:
    00001558: 	movq	%r12, %rdx
    0000155b: 	movq	%r14, %rsi
    0000155e: 	callq	memcpy@PLT # Offset: 5470
    00001563: 	movq	0x68(%rsp), %r12
    00001568: 	movq	0x70(%rsp), %rax
    0000156d: 	jmp	.Ltmp2423 # Offset: 5485
.Ltmp2332:
    00001572: 	leaq	0x90(%rsp), %rdi
    0000157a: 	leaq	0x68(%rsp), %rsi
    0000157f: 	xorl	%edx, %edx
    00001581: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5505
    00001586: 	movq	%rax, 0x90(%rsp)
    0000158e: 	movq	%rax, %rdi
    00001591: 	movq	0x68(%rsp), %rax
    00001596: 	movq	%rax, 0xa0(%rsp)
.Ltmp2448:
    0000159e: 	movq	%r12, %rdx
    000015a1: 	movq	%r14, %rsi
    000015a4: 	callq	memcpy@PLT # Offset: 5540
    000015a9: 	movq	0x68(%rsp), %r12
    000015ae: 	movq	0x90(%rsp), %rax
    000015b6: 	jmp	.Ltmp2421 # Offset: 5558
.Ltmp2352:
    000015bb: 	leaq	0xd0(%rsp), %rdi
    000015c3: 	leaq	0x68(%rsp), %rsi
    000015c8: 	xorl	%edx, %edx
    000015ca: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5578
    000015cf: 	movq	%rax, 0xd0(%rsp)
    000015d7: 	movq	%rax, %rdi
    000015da: 	movq	0x68(%rsp), %rax
    000015df: 	movq	%rax, 0xe0(%rsp)
.Ltmp2446:
    000015e7: 	movq	%r12, %rdx
    000015ea: 	movq	%r14, %rsi
    000015ed: 	callq	memcpy@PLT # Offset: 5613
    000015f2: 	movq	0x68(%rsp), %r12
    000015f7: 	movq	0xd0(%rsp), %rax
    000015ff: 	jmp	.Ltmp2417 # Offset: 5631
.Ltmp2368:
    00001604: 	leaq	0xf0(%rsp), %rdi
    0000160c: 	leaq	0x68(%rsp), %rsi
    00001611: 	xorl	%edx, %edx
    00001613: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5651
    00001618: 	movq	%rax, 0xf0(%rsp)
    00001620: 	movq	%rax, %rdi
    00001623: 	movq	0x68(%rsp), %rax
    00001628: 	movq	%rax, 0x100(%rsp)
.Ltmp2444:
    00001630: 	movq	%r12, %rdx
    00001633: 	movq	%r14, %rsi
    00001636: 	callq	memcpy@PLT # Offset: 5686
    0000163b: 	movq	0x68(%rsp), %r12
    00001640: 	movq	0xf0(%rsp), %rax
    00001648: 	jmp	.Ltmp2413 # Offset: 5704
.Ltmp2360:
    0000164d: 	movq	0x8(%rsp), %rsi
    00001652: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001659: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 5721
    0000165e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001665: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000166c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001673: 	jne	.Ltmp2426 # Offset: 5747
.Ltmp2365:
    00001679: 	movq	-0x8(%rdx), %rax
    0000167d: 	addq	$0x200, %rax
    00001683: 	jmp	.Ltmp2426 # Offset: 5763
.Ltmp2392:
    00001688: 	movq	0x28(%rsp), %rsi
    0000168d: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001694: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 5780
    00001699: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000016a0: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000016a7: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000016ae: 	jne	.Ltmp2427 # Offset: 5806
.Ltmp2397:
    000016b4: 	movq	-0x8(%rdx), %rax
    000016b8: 	addq	$0x200, %rax
    000016be: 	jmp	.Ltmp2427 # Offset: 5822
.Ltmp2308:
    000016c3: 	movq	0x8(%rsp), %rsi
    000016c8: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000016cf: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 5839
    000016d4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000016db: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000016e2: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000016e9: 	jne	.Ltmp2428 # Offset: 5865
.Ltmp2313:
    000016ef: 	movq	-0x8(%rdx), %rax
    000016f3: 	addq	$0x200, %rax
    000016f9: 	jmp	.Ltmp2428 # Offset: 5881
.Ltmp2324:
    000016fe: 	movq	0x28(%rsp), %rsi
    00001703: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000170a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 5898
    0000170f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001716: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000171d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001724: 	jne	.Ltmp2429 # Offset: 5924
.Ltmp2329:
    0000172a: 	movq	-0x8(%rdx), %rax
    0000172e: 	addq	$0x200, %rax
    00001734: 	jmp	.Ltmp2429 # Offset: 5940
.Ltmp2344:
    00001739: 	movq	0x28(%rsp), %rsi
    0000173e: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001745: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 5957
    0000174a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001751: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00001758: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000175f: 	jne	.Ltmp2430 # Offset: 5983
.Ltmp2349:
    00001765: 	movq	-0x8(%rdx), %rax
    00001769: 	addq	$0x200, %rax
    0000176f: 	jmp	.Ltmp2430 # Offset: 5999
.Ltmp2381:
    00001774: 	movq	-0x8(%rdx), %rax
    00001778: 	addq	$0x200, %rax
    0000177e: 	jmp	.Ltmp2431 # Offset: 6014
.Ltmp2376:
    00001783: 	movq	0x8(%rsp), %rsi
    00001788: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000178f: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6031
    00001794: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000179b: 	jmp	.Ltmp2432 # Offset: 6043
.Ltmp2312:
    000017a0: 	testq	%r12, %r12
    000017a3: 	je	.Ltmp2406 # Offset: 6051
    000017a9: 	jmp	.Ltmp2433 # Offset: 6057
    000017ae: 	nop # Size: 2
.Ltmp2348:
    000017b0: 	testq	%r12, %r12
    000017b3: 	je	.Ltmp2434 # Offset: 6067
.Ltmp2442:
    000017b9: 	movq	%r12, %rdx
    000017bc: 	movq	%r14, %rsi
    000017bf: 	callq	memcpy@PLT # Offset: 6079
    000017c4: 	movq	0x68(%rsp), %r12
    000017c9: 	movq	(%rbx), %rdi
    000017cc: 	jmp	.Ltmp2434 # Offset: 6092
.Ltmp2328:
    000017d1: 	testq	%r12, %r12
    000017d4: 	je	.Ltmp2435 # Offset: 6100
    000017da: 	jmp	.Ltmp2436 # Offset: 6106
    000017dc: 	nopl	(%rax) # Size: 4
.Ltmp2380:
    000017e0: 	testq	%r12, %r12
    000017e3: 	je	.Ltmp2437 # Offset: 6115
    000017e9: 	jmp	.Ltmp2438 # Offset: 6121
    000017ee: 	nop # Size: 2
.Ltmp2396:
    000017f0: 	testq	%r12, %r12
    000017f3: 	je	.Ltmp2439 # Offset: 6131
    000017f9: 	jmp	.Ltmp2440 # Offset: 6137
    000017fe: 	nop # Size: 2
.Ltmp2364:
    00001800: 	testq	%r12, %r12
    00001803: 	je	.Ltmp2441 # Offset: 6147
.Ltmp2443:
    00001809: 	movq	%r12, %rdx
    0000180c: 	movq	%r14, %rsi
    0000180f: 	callq	memcpy@PLT # Offset: 6159
    00001814: 	movq	0x68(%rsp), %r12
    00001819: 	movq	(%rbx), %rdi
    0000181c: 	jmp	.Ltmp2441 # Offset: 6172
.Ltmp2327:
    00001821: 	leaq	0x68(%rsp), %rsi
    00001826: 	xorl	%edx, %edx
    00001828: 	movq	%rbx, %rdi
    0000182b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6187
    00001830: 	movq	%rax, (%rbx)
    00001833: 	movq	%rax, %rdi
    00001836: 	movq	0x68(%rsp), %rax
    0000183b: 	movq	%rax, 0x10(%rbx)
.Ltmp2436:
    0000183f: 	movq	%r12, %rdx
    00001842: 	movq	%r14, %rsi
    00001845: 	callq	memcpy@PLT # Offset: 6213
    0000184a: 	movq	0x68(%rsp), %r12
    0000184f: 	movq	(%rbx), %rdi
    00001852: 	jmp	.Ltmp2435 # Offset: 6226
.Ltmp2347:
    00001857: 	leaq	0x68(%rsp), %rsi
    0000185c: 	xorl	%edx, %edx
    0000185e: 	movq	%rbx, %rdi
    00001861: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6241
    00001866: 	movq	%rax, (%rbx)
    00001869: 	movq	%rax, %rdi
    0000186c: 	movq	0x68(%rsp), %rax
    00001871: 	movq	%rax, 0x10(%rbx)
    00001875: 	jmp	.Ltmp2442 # Offset: 6261
.Ltmp2379:
    0000187a: 	leaq	0x68(%rsp), %rsi
    0000187f: 	xorl	%edx, %edx
    00001881: 	movq	%rbx, %rdi
    00001884: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6276
    00001889: 	movq	%rax, (%rbx)
    0000188c: 	movq	%rax, %rdi
    0000188f: 	movq	0x68(%rsp), %rax
    00001894: 	movq	%rax, 0x10(%rbx)
.Ltmp2438:
    00001898: 	movq	%r12, %rdx
    0000189b: 	movq	%r14, %rsi
    0000189e: 	callq	memcpy@PLT # Offset: 6302
    000018a3: 	movq	0x68(%rsp), %r12
    000018a8: 	movq	(%rbx), %rdi
    000018ab: 	jmp	.Ltmp2437 # Offset: 6315
.Ltmp2395:
    000018b0: 	leaq	0x68(%rsp), %rsi
    000018b5: 	xorl	%edx, %edx
    000018b7: 	movq	%rbx, %rdi
    000018ba: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6330
    000018bf: 	movq	%rax, (%rbx)
    000018c2: 	movq	%rax, %rdi
    000018c5: 	movq	0x68(%rsp), %rax
    000018ca: 	movq	%rax, 0x10(%rbx)
.Ltmp2440:
    000018ce: 	movq	%r12, %rdx
    000018d1: 	movq	%r14, %rsi
    000018d4: 	callq	memcpy@PLT # Offset: 6356
    000018d9: 	movq	0x68(%rsp), %r12
    000018de: 	movq	(%rbx), %rdi
    000018e1: 	jmp	.Ltmp2439 # Offset: 6369
.Ltmp2363:
    000018e6: 	leaq	0x68(%rsp), %rsi
    000018eb: 	xorl	%edx, %edx
    000018ed: 	movq	%rbx, %rdi
    000018f0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6384
    000018f5: 	movq	%rax, (%rbx)
    000018f8: 	movq	%rax, %rdi
    000018fb: 	movq	0x68(%rsp), %rax
    00001900: 	movq	%rax, 0x10(%rbx)
    00001904: 	jmp	.Ltmp2443 # Offset: 6404
.Ltmp2316:
    00001909: 	leaq	DATAat0x4d018(%rip), %rdi
    00001910: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6416
.Ltmp2319:
    00001915: 	leaq	DATAat0x4d194(%rip), %rdi
    0000191c: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6428
.Ltmp2326:
    00001921: 	leaq	DATAat0x4d018(%rip), %rdi
    00001928: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6440
.Ltmp2334:
    0000192d: 	leaq	DATAat0x4d194(%rip), %rdi
    00001934: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6452
.Ltmp2339:
    00001939: 	leaq	DATAat0x4d194(%rip), %rdi
    00001940: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6464
.Ltmp2346:
    00001945: 	leaq	DATAat0x4d018(%rip), %rdi
    0000194c: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6476
.Ltmp2354:
    00001951: 	leaq	DATAat0x4d194(%rip), %rdi
    00001958: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6488
.Ltmp2362:
    0000195d: 	leaq	DATAat0x4d018(%rip), %rdi
    00001964: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6500
.Ltmp2370:
    00001969: 	leaq	DATAat0x4d194(%rip), %rdi
    00001970: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6512
.Ltmp2378:
    00001975: 	leaq	DATAat0x4d018(%rip), %rdi
    0000197c: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6524
.Ltmp2387:
    00001981: 	leaq	DATAat0x4d194(%rip), %rdi
    00001988: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6536
.Ltmp2394:
    0000198d: 	leaq	DATAat0x4d018(%rip), %rdi
    00001994: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6548
.Ltmp2402:
    00001999: 	leaq	DATAat0x4d194(%rip), %rdi
    000019a0: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6560
.Ltmp2404:
    000019a5: 	callq	__stack_chk_fail@PLT # Offset: 6565
.Ltmp2310:
    000019aa: 	leaq	DATAat0x4d018(%rip), %rdi
    000019b1: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6577
.Ltmp2412:
    000019b6: 	movq	%rbx, %rdi
    000019b9: 	jmp	.Ltmp2444 # Offset: 6585
.Ltmp2414:
    000019be: 	movq	0x20(%rsp), %rdi
    000019c3: 	jmp	.Ltmp2445 # Offset: 6595
.Ltmp2416:
    000019c8: 	movq	%rbx, %rdi
    000019cb: 	jmp	.Ltmp2446 # Offset: 6603
.Ltmp2418:
    000019d0: 	movq	0x10(%rsp), %rdi
    000019d5: 	jmp	.Ltmp2447 # Offset: 6613
.Ltmp2420:
    000019da: 	movq	%rbx, %rdi
    000019dd: 	jmp	.Ltmp2448 # Offset: 6621
.Ltmp2422:
    000019e2: 	movq	0x20(%rsp), %rdi
    000019e7: 	jmp	.Ltmp2449 # Offset: 6631
.Ltmp2424:
    000019ec: 	movq	0x20(%rsp), %rdi
    000019f1: 	jmp	.Ltmp2450 # Offset: 6641
    000019f6: 	endbr64
    000019fa: 	movq	%rax, %rbp
    000019fd: 	jmp	.Ltmp2451 # Offset: 6653
    000019ff: 	endbr64
.Ltmp2459:
    00001a03: 	movq	%rax, %rbp
    00001a06: 	jmp	.Ltmp2452 # Offset: 6662
.Ltmp2451:
    00001a08: 	movq	0x130(%rsp), %rdi
    00001a10: 	leaq	0x140(%rsp), %rax
    00001a18: 	cmpq	%rax, %rdi
    00001a1b: 	je	.Ltmp2453 # Offset: 6683
.Ltmp2467:
    00001a1d: 	movq	0x140(%rsp), %rax
    00001a25: 	leaq	0x1(%rax), %rsi
    00001a29: 	callq	_ZdlPvm@PLT # Offset: 6697
.Ltmp2453:
    00001a2e: 	movq	%rbp, %rdi
    00001a31: 	callq	_Unwind_Resume@PLT # Offset: 6705
.Ltmp2452:
    00001a36: 	movq	0x110(%rsp), %rdi
    00001a3e: 	cmpq	0x20(%rsp), %rdi
    00001a43: 	je	.Ltmp2453 # Offset: 6723
    00001a45: 	movq	0x120(%rsp), %rax
    00001a4d: 	leaq	0x1(%rax), %rsi
    00001a51: 	callq	_ZdlPvm@PLT # Offset: 6737
    00001a56: 	jmp	.Ltmp2453 # Offset: 6742
    00001a58: 	endbr64
.Ltmp2455:
    00001a5c: 	movq	%rax, %rbp
    00001a5f: 	jmp	.Ltmp2454 # Offset: 6751
    00001a64: 	endbr64
    00001a68: 	jmp	.Ltmp2455 # Offset: 6760
    00001a6a: 	endbr64
    00001a6e: 	jmp	.Ltmp2455 # Offset: 6766
    00001a70: 	endbr64
.Ltmp2458:
    00001a74: 	movq	%rax, %rbp
    00001a77: 	jmp	.Ltmp2456 # Offset: 6775
    00001a79: 	endbr64
.Ltmp2460:
    00001a7d: 	movq	%rax, %rbp
    00001a80: 	jmp	.Ltmp2457 # Offset: 6784
    00001a82: 	endbr64
    00001a86: 	jmp	.Ltmp2458 # Offset: 6790
.Ltmp2456:
    00001a88: 	movq	0x70(%rsp), %rdi
    00001a8d: 	cmpq	0x20(%rsp), %rdi
    00001a92: 	je	.Ltmp2453 # Offset: 6802
    00001a94: 	movq	0x80(%rsp), %rax
    00001a9c: 	leaq	0x1(%rax), %rsi
    00001aa0: 	callq	_ZdlPvm@PLT # Offset: 6816
    00001aa5: 	jmp	.Ltmp2453 # Offset: 6821
.Ltmp2457:
    00001aa7: 	movq	0xf0(%rsp), %rdi
    00001aaf: 	cmpq	%rbx, %rdi
    00001ab2: 	je	.Ltmp2453 # Offset: 6834
    00001ab8: 	movq	0x100(%rsp), %rax
    00001ac0: 	leaq	0x1(%rax), %rsi
    00001ac4: 	callq	_ZdlPvm@PLT # Offset: 6852
    00001ac9: 	jmp	.Ltmp2453 # Offset: 6857
    00001ace: 	endbr64
    00001ad2: 	jmp	.Ltmp2459 # Offset: 6866
    00001ad7: 	endbr64
    00001adb: 	jmp	.Ltmp2455 # Offset: 6875
    00001ae0: 	endbr64
    00001ae4: 	jmp	.Ltmp2460 # Offset: 6884
    00001ae6: 	endbr64
.Ltmp2465:
    00001aea: 	movq	%rax, %rbp
    00001aed: 	jmp	.Ltmp2461 # Offset: 6893
    00001aef: 	endbr64
.Ltmp2463:
    00001af3: 	movq	%rax, %rbp
    00001af6: 	jmp	.Ltmp2462 # Offset: 6902
.Ltmp2461:
    00001af8: 	movq	0x90(%rsp), %rdi
    00001b00: 	cmpq	%rbx, %rdi
    00001b03: 	je	.Ltmp2453 # Offset: 6915
    00001b09: 	movq	0xa0(%rsp), %rax
    00001b11: 	leaq	0x1(%rax), %rsi
    00001b15: 	callq	_ZdlPvm@PLT # Offset: 6933
    00001b1a: 	jmp	.Ltmp2453 # Offset: 6938
.Ltmp2462:
    00001b1f: 	movq	0xd0(%rsp), %rdi
    00001b27: 	cmpq	%rbx, %rdi
    00001b2a: 	je	.Ltmp2453 # Offset: 6954
    00001b30: 	movq	0xe0(%rsp), %rax
    00001b38: 	leaq	0x1(%rax), %rsi
    00001b3c: 	callq	_ZdlPvm@PLT # Offset: 6972
    00001b41: 	jmp	.Ltmp2453 # Offset: 6977
    00001b46: 	endbr64
    00001b4a: 	jmp	.Ltmp2463 # Offset: 6986
    00001b4c: 	endbr64
    00001b50: 	jmp	.Ltmp2455 # Offset: 6992
    00001b55: 	endbr64
.Ltmp2466:
    00001b59: 	movq	%rax, %rbp
    00001b5c: 	jmp	.Ltmp2464 # Offset: 7004
    00001b5e: 	endbr64
    00001b62: 	jmp	.Ltmp2465 # Offset: 7010
    00001b64: 	endbr64
    00001b68: 	jmp	.Ltmp2466 # Offset: 7016
.Ltmp2464:
    00001b6a: 	movq	0xb0(%rsp), %rdi
    00001b72: 	cmpq	0x20(%rsp), %rdi
    00001b77: 	je	.Ltmp2453 # Offset: 7031
    00001b7d: 	movq	0xc0(%rsp), %rax
    00001b85: 	leaq	0x1(%rax), %rsi
    00001b89: 	callq	_ZdlPvm@PLT # Offset: 7049
    00001b8e: 	jmp	.Ltmp2453 # Offset: 7054
.Ltmp2454:
    00001b93: 	movq	0x130(%rsp), %rdi
    00001b9b: 	cmpq	0x10(%rsp), %rdi
    00001ba0: 	jne	.Ltmp2467 # Offset: 7072
    00001ba6: 	jmp	.Ltmp2453 # Offset: 7078
DWARF CFI Instructions:
    <empty>
End of Function "_Z16TestUnrolledTypeIaLi8EEvPT_S0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z16TestUnrolledTypeIhLi8EEvPT_S0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 177
  State       : disassembled
  Address     : 0x25250
  Size        : 0x1cc1
  MaxSize     : 0x1cd0
  Offset      : 0x25250
  Section     : .text
  Orc Section : .local.text._Z16TestUnrolledTypeIhLi8EEvPT_S0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0176:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rdi, %rbp
    00000010: 	pushq	%rbx
    00000011: 	movl	%esi, %ebx
    00000013: 	subq	$0x188, %rsp
    0000001a: 	movq	(%rdx), %r14
    0000001d: 	movq	0x8(%rdx), %r12
    00000021: 	movq	%rdx, 0x8(%rsp)
    00000026: 	leaq	0x80(%rsp), %r13
    0000002e: 	movq	%fs:0x28, %rax
    00000037: 	movq	%rax, 0x178(%rsp)
    0000003f: 	xorl	%eax, %eax
    00000041: 	movq	%r14, %rax
    00000044: 	movq	%r13, 0x70(%rsp)
    00000049: 	addq	%r12, %rax
    0000004c: 	je	.Ltmp2468 # Offset: 76
    0000004e: 	testq	%r14, %r14
    00000051: 	je	.Ltmp2469 # Offset: 81
.Ltmp2468:
    00000057: 	movq	%r12, 0x68(%rsp)
    0000005c: 	cmpq	$0xf, %r12
    00000060: 	ja	.Ltmp2470 # Offset: 96
    00000066: 	cmpq	$0x1, %r12
    0000006a: 	jne	.Ltmp2471 # Offset: 106
    00000070: 	movzbl	(%r14), %eax
    00000074: 	movb	%al, 0x80(%rsp)
    0000007b: 	movq	%r13, %rax
.Ltmp2574:
    0000007e: 	movq	%r12, 0x78(%rsp)
    00000083: 	movb	$0x0, (%rax,%r12)
    00000088: 	movabsq	$0x3fffffffffffffff, %rax
    00000092: 	subq	0x78(%rsp), %rax
    00000097: 	cmpq	$0x7, %rax
    0000009b: 	jbe	.Ltmp2472 # Offset: 155
    000000a1: 	leaq	0x70(%rsp), %rax
    000000a6: 	movl	$0x8, %edx
    000000ab: 	leaq	DATAat0x4d1e4(%rip), %rsi
    000000b2: 	movq	%rax, %rdi
    000000b5: 	movq	%rax, 0x18(%rsp)
    000000ba: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 186
    000000bf: 	movzbl	%bl, %eax
    000000c2: 	xorl	%r12d, %r12d
    000000c5: 	leaq	0x1f30(%rbp), %rbx
    000000cc: 	movl	%eax, 0x14(%rsp)
    000000d0: 	leaq	DATAat0x4d004(%rip), %r14
    000000d7: 	callq	clock@PLT # Offset: 215
    000000dc: 	movl	iterations(%rip), %r15d
    000000e3: 	movq	%rax, start_time(%rip)
    000000ea: 	testl	%r15d, %r15d
    000000ed: 	jle	.Ltmp2473 # Offset: 237
    000000f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2476:
    000000f8: 	movzbl	(%rbp), %ecx
    000000fc: 	movq	%rbp, %rax
    000000ff: 	subb	0x1(%rbp), %cl
    00000102: 	pxor	%xmm1, %xmm1
    00000106: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2474:
    00000110: 	movdqu	(%rax), %xmm0
    00000114: 	movdqu	0x1(%rax), %xmm2
    00000119: 	addq	$0x10, %rax
    0000011d: 	psubb	%xmm2, %xmm0
    00000121: 	paddb	%xmm0, %xmm0
    00000125: 	paddb	%xmm0, %xmm0
    00000129: 	paddb	%xmm0, %xmm0
    0000012d: 	paddb	%xmm0, %xmm1
    00000131: 	cmpq	%rbx, %rax
    00000134: 	jne	.Ltmp2474 # Offset: 308
    00000136: 	movdqa	%xmm1, %xmm0
    0000013a: 	psrldq	$0x8, %xmm0
    0000013f: 	paddb	%xmm0, %xmm1
    00000143: 	pxor	%xmm0, %xmm0
    00000147: 	psadbw	%xmm0, %xmm1
    0000014b: 	movq	0x1f30(%rbp), %xmm0
    00000153: 	movd	%xmm1, %edx
    00000157: 	movq	0x1f31(%rbp), %xmm1
    0000015f: 	psubb	%xmm1, %xmm0
    00000163: 	pxor	%xmm1, %xmm1
    00000167: 	paddb	%xmm0, %xmm0
    0000016b: 	paddb	%xmm0, %xmm0
    0000016f: 	paddb	%xmm0, %xmm0
    00000173: 	movdqa	%xmm0, %xmm7
    00000177: 	psadbw	%xmm1, %xmm7
    0000017b: 	movq	%xmm7, %rax
    00000180: 	movq	%xmm7, 0x58(%rsp)
    00000186: 	movzbl	0x1f39(%rbp), %r10d
    0000018e: 	movzbl	0x1f3a(%rbp), %r9d
    00000196: 	movl	%eax, %r11d
    00000199: 	movzbl	0x1f38(%rbp), %eax
    000001a0: 	movzbl	0x1f3b(%rbp), %r8d
    000001a8: 	subb	0x1f3f(%rbp), %cl
    000001ae: 	addb	0x1f3e(%rbp), %cl
    000001b4: 	addl	%edx, %r11d
    000001b7: 	subl	%r10d, %eax
    000001ba: 	movzbl	0x1f3c(%rbp), %edi
    000001c1: 	subl	%r9d, %r10d
    000001c4: 	movzbl	0x1f3d(%rbp), %esi
    000001cb: 	addl	%ecx, %eax
    000001cd: 	subl	%r8d, %r9d
    000001d0: 	addl	%r10d, %eax
    000001d3: 	subl	%edi, %r8d
    000001d6: 	subl	%esi, %edi
    000001d8: 	subb	0x1f3e(%rbp), %sil
    000001df: 	addl	%eax, %r9d
    000001e2: 	addl	%r9d, %r8d
    000001e5: 	addl	%r8d, %edi
    000001e8: 	addl	%edi, %esi
    000001ea: 	leal	(%r11,%rsi,8), %esi
    000001ee: 	testb	%sil, %sil
    000001f1: 	jne	.Ltmp2475 # Offset: 497
.Ltmp2575:
    000001f7: 	addl	$0x1, %r12d
    000001fb: 	cmpl	%r15d, %r12d
    000001fe: 	jl	.Ltmp2476 # Offset: 510
.Ltmp2473:
    00000204: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000020b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000212: 	subq	$0x20, %rax
    00000216: 	cmpq	%rax, %rbx
    00000219: 	je	.Ltmp2477 # Offset: 537
    0000021f: 	leaq	0x10(%rbx), %rdi
    00000223: 	movq	0x78(%rsp), %r12
    00000228: 	movq	%rdi, (%rbx)
    0000022b: 	movq	0x70(%rsp), %r14
    00000230: 	movq	%r14, %rax
    00000233: 	addq	%r12, %rax
    00000236: 	je	.Ltmp2478 # Offset: 566
    00000238: 	testq	%r14, %r14
    0000023b: 	je	.Ltmp2479 # Offset: 571
.Ltmp2478:
    00000241: 	movq	%r12, 0x68(%rsp)
    00000246: 	cmpq	$0xf, %r12
    0000024a: 	ja	.Ltmp2480 # Offset: 586
    00000250: 	cmpq	$0x1, %r12
    00000254: 	jne	.Ltmp2481 # Offset: 596
    0000025a: 	movzbl	(%r14), %eax
    0000025e: 	movb	%al, 0x10(%rbx)
.Ltmp2611:
    00000261: 	movq	%r12, 0x8(%rbx)
    00000265: 	movb	$0x0, (%rdi,%r12)
    0000026a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000271: 	addq	$0x20, %rax
    00000275: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp2599:
    0000027c: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000283: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000028a: 	je	.Ltmp2482 # Offset: 650
.Ltmp2598:
    00000290: 	movq	-0x20(%rax), %r12
    00000294: 	callq	clock@PLT # Offset: 660
    00000299: 	pxor	%xmm0, %xmm0
    0000029d: 	movq	%rax, end_time(%rip)
    000002a4: 	movq	%r12, %rdi
    000002a7: 	subq	start_time(%rip), %rax
    000002ae: 	cvtsi2sd	%rax, %xmm0
    000002b3: 	divsd	DATAat0x4d640(%rip), %xmm0
    000002bb: 	callq	_Z13record_resultdPKc # Offset: 699
    000002c0: 	movq	0x70(%rsp), %rdi
    000002c5: 	cmpq	%r13, %rdi
    000002c8: 	je	.Ltmp2483 # Offset: 712
    000002ca: 	movq	0x80(%rsp), %rax
    000002d2: 	leaq	0x1(%rax), %rsi
    000002d6: 	callq	_ZdlPvm@PLT # Offset: 726
.Ltmp2483:
    000002db: 	movq	0x8(%rsp), %rax
    000002e0: 	leaq	0xa0(%rsp), %r13
    000002e8: 	movq	%r13, 0x90(%rsp)
    000002f0: 	movq	(%rax), %r14
    000002f3: 	movq	0x8(%rax), %r12
    000002f7: 	movq	%r14, %rax
    000002fa: 	addq	%r12, %rax
    000002fd: 	je	.Ltmp2484 # Offset: 765
    000002ff: 	testq	%r14, %r14
    00000302: 	je	.Ltmp2469 # Offset: 770
.Ltmp2484:
    00000308: 	movq	%r12, 0x68(%rsp)
    0000030d: 	cmpq	$0xf, %r12
    00000311: 	ja	.Ltmp2485 # Offset: 785
    00000317: 	cmpq	$0x1, %r12
    0000031b: 	jne	.Ltmp2486 # Offset: 795
    00000321: 	movzbl	(%r14), %eax
    00000325: 	movb	%al, 0xa0(%rsp)
    0000032c: 	movq	%r13, %rax
.Ltmp2592:
    0000032f: 	movq	%r12, 0x98(%rsp)
    00000337: 	movb	$0x0, (%rax,%r12)
    0000033c: 	movabsq	$0x3fffffffffffffff, %rax
    00000346: 	subq	0x98(%rsp), %rax
    0000034e: 	cmpq	$0xc, %rax
    00000352: 	jbe	.Ltmp2487 # Offset: 850
    00000358: 	leaq	0x90(%rsp), %rax
    00000360: 	movl	$0xd, %edx
    00000365: 	leaq	DATAat0x4d1f1(%rip), %rsi
    0000036c: 	movq	%rax, %rdi
    0000036f: 	movq	%rax, 0x18(%rsp)
    00000374: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 884
    00000379: 	callq	clock@PLT # Offset: 889
    0000037e: 	movl	iterations(%rip), %r15d
    00000385: 	xorl	%r12d, %r12d
    00000388: 	leaq	0x1f30(%rbp), %rbx
    0000038f: 	movq	%rax, start_time(%rip)
    00000396: 	leaq	DATAat0x4d004(%rip), %r14
    0000039d: 	testl	%r15d, %r15d
    000003a0: 	jle	.Ltmp2488 # Offset: 928
    000003a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2491:
    000003b0: 	movzbl	(%rbp), %ecx
    000003b4: 	movq	%rbp, %rax
    000003b7: 	subb	0x1(%rbp), %cl
    000003ba: 	pxor	%xmm1, %xmm1
    000003be: 	nop # Size: 2
.Ltmp2489:
    000003c0: 	movdqu	(%rax), %xmm0
    000003c4: 	movdqu	0x1(%rax), %xmm3
    000003c9: 	addq	$0x10, %rax
    000003cd: 	psubb	%xmm3, %xmm0
    000003d1: 	paddb	%xmm0, %xmm0
    000003d5: 	paddb	%xmm0, %xmm0
    000003d9: 	paddb	%xmm0, %xmm0
    000003dd: 	paddb	%xmm0, %xmm1
    000003e1: 	cmpq	%rax, %rbx
    000003e4: 	jne	.Ltmp2489 # Offset: 996
    000003e6: 	movdqa	%xmm1, %xmm0
    000003ea: 	psrldq	$0x8, %xmm0
    000003ef: 	paddb	%xmm0, %xmm1
    000003f3: 	pxor	%xmm0, %xmm0
    000003f7: 	psadbw	%xmm0, %xmm1
    000003fb: 	movq	0x1f30(%rbp), %xmm0
    00000403: 	movd	%xmm1, %edx
    00000407: 	movq	0x1f31(%rbp), %xmm1
    0000040f: 	psubb	%xmm1, %xmm0
    00000413: 	pxor	%xmm1, %xmm1
    00000417: 	paddb	%xmm0, %xmm0
    0000041b: 	paddb	%xmm0, %xmm0
    0000041f: 	paddb	%xmm0, %xmm0
    00000423: 	movdqa	%xmm0, %xmm5
    00000427: 	psadbw	%xmm1, %xmm5
    0000042b: 	movq	%xmm5, %rax
    00000430: 	movq	%xmm5, 0x50(%rsp)
    00000436: 	movzbl	0x1f39(%rbp), %r10d
    0000043e: 	movzbl	0x1f3a(%rbp), %r9d
    00000446: 	movl	%eax, %r11d
    00000449: 	movzbl	0x1f38(%rbp), %eax
    00000450: 	movzbl	0x1f3b(%rbp), %r8d
    00000458: 	subb	0x1f3f(%rbp), %cl
    0000045e: 	addb	0x1f3e(%rbp), %cl
    00000464: 	addl	%edx, %r11d
    00000467: 	subl	%r10d, %eax
    0000046a: 	movzbl	0x1f3c(%rbp), %edi
    00000471: 	subl	%r9d, %r10d
    00000474: 	movzbl	0x1f3d(%rbp), %esi
    0000047b: 	addl	%ecx, %eax
    0000047d: 	subl	%r8d, %r9d
    00000480: 	addl	%r10d, %eax
    00000483: 	subl	%edi, %r8d
    00000486: 	subl	%esi, %edi
    00000488: 	subb	0x1f3e(%rbp), %sil
    0000048f: 	addl	%eax, %r9d
    00000492: 	addl	%r9d, %r8d
    00000495: 	addl	%r8d, %edi
    00000498: 	addl	%edi, %esi
    0000049a: 	leal	(%r11,%rsi,8), %esi
    0000049e: 	testb	%sil, %sil
    000004a1: 	jne	.Ltmp2490 # Offset: 1185
.Ltmp2576:
    000004a7: 	addl	$0x1, %r12d
    000004ab: 	cmpl	%r15d, %r12d
    000004ae: 	jl	.Ltmp2491 # Offset: 1198
.Ltmp2488:
    000004b4: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000004bb: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000004c2: 	subq	$0x20, %rax
    000004c6: 	cmpq	%rax, %rbx
    000004c9: 	je	.Ltmp2492 # Offset: 1225
    000004cf: 	leaq	0x10(%rbx), %rdi
    000004d3: 	movq	0x98(%rsp), %r12
    000004db: 	movq	%rdi, (%rbx)
    000004de: 	movq	0x90(%rsp), %r14
    000004e6: 	movq	%r14, %rax
    000004e9: 	addq	%r12, %rax
    000004ec: 	je	.Ltmp2493 # Offset: 1260
    000004ee: 	testq	%r14, %r14
    000004f1: 	je	.Ltmp2494 # Offset: 1265
.Ltmp2493:
    000004f7: 	movq	%r12, 0x68(%rsp)
    000004fc: 	cmpq	$0xf, %r12
    00000500: 	ja	.Ltmp2495 # Offset: 1280
    00000506: 	cmpq	$0x1, %r12
    0000050a: 	jne	.Ltmp2496 # Offset: 1290
    00000510: 	movzbl	(%r14), %eax
    00000514: 	movb	%al, 0x10(%rbx)
.Ltmp2613:
    00000517: 	movq	%r12, 0x8(%rbx)
    0000051b: 	movb	$0x0, (%rdi,%r12)
    00000520: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000527: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000052e: 	addq	$0x20, %rax
    00000532: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000539: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000540: 	je	.Ltmp2497 # Offset: 1344
.Ltmp2602:
    00000546: 	movq	-0x20(%rax), %r12
    0000054a: 	callq	clock@PLT # Offset: 1354
    0000054f: 	pxor	%xmm0, %xmm0
    00000553: 	movq	%rax, end_time(%rip)
    0000055a: 	movq	%r12, %rdi
    0000055d: 	subq	start_time(%rip), %rax
    00000564: 	cvtsi2sd	%rax, %xmm0
    00000569: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000571: 	callq	_Z13record_resultdPKc # Offset: 1393
    00000576: 	movq	0x90(%rsp), %rdi
    0000057e: 	cmpq	%r13, %rdi
    00000581: 	je	.Ltmp2498 # Offset: 1409
    00000583: 	movq	0xa0(%rsp), %rax
    0000058b: 	leaq	0x1(%rax), %rsi
    0000058f: 	callq	_ZdlPvm@PLT # Offset: 1423
.Ltmp2498:
    00000594: 	movq	0x8(%rsp), %rsi
    00000599: 	leaq	0x150(%rsp), %r15
    000005a1: 	leaq	DATAat0x4d22b(%rip), %rdx
    000005a8: 	movq	%r15, %rdi
    000005ab: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1451
    000005b0: 	movl	0x14(%rsp), %edx
    000005b4: 	movq	%r15, %rcx
    000005b7: 	movq	%rbp, %rdi
    000005ba: 	movl	$0x1f40, %esi
    000005bf: 	callq	_Z9test_CSENIh14custom_cse_addIhELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1471
    000005c4: 	movq	0x150(%rsp), %rdi
    000005cc: 	leaq	0x160(%rsp), %rax
    000005d4: 	movq	%rax, 0x18(%rsp)
    000005d9: 	cmpq	%rax, %rdi
    000005dc: 	je	.Ltmp2499 # Offset: 1500
    000005de: 	movq	0x160(%rsp), %rax
    000005e6: 	leaq	0x1(%rax), %rsi
    000005ea: 	callq	_ZdlPvm@PLT # Offset: 1514
.Ltmp2499:
    000005ef: 	leaq	0xc0(%rsp), %rax
    000005f7: 	movq	%rax, 0x20(%rsp)
    000005fc: 	movq	%rax, 0xb0(%rsp)
    00000604: 	movq	0x8(%rsp), %rax
    00000609: 	movq	(%rax), %r13
    0000060c: 	movq	0x8(%rax), %r12
    00000610: 	movq	%r13, %rax
    00000613: 	addq	%r12, %rax
    00000616: 	je	.Ltmp2500 # Offset: 1558
    00000618: 	testq	%r13, %r13
    0000061b: 	je	.Ltmp2469 # Offset: 1563
.Ltmp2500:
    00000621: 	movq	%r12, 0x68(%rsp)
    00000626: 	cmpq	$0xf, %r12
    0000062a: 	ja	.Ltmp2501 # Offset: 1578
    00000630: 	cmpq	$0x1, %r12
    00000634: 	jne	.Ltmp2502 # Offset: 1588
    0000063a: 	movzbl	(%r13), %eax
    0000063f: 	movb	%al, 0xc0(%rsp)
    00000646: 	movq	0x20(%rsp), %rax
.Ltmp2582:
    0000064b: 	movq	%r12, 0xb8(%rsp)
    00000653: 	movb	$0x0, (%rax,%r12)
    00000658: 	movabsq	$0x3fffffffffffffff, %rax
    00000662: 	subq	0xb8(%rsp), %rax
    0000066a: 	cmpq	$0x11, %rax
    0000066e: 	jbe	.Ltmp2503 # Offset: 1646
    00000674: 	leaq	0xb0(%rsp), %rax
    0000067c: 	movl	$0x12, %edx
    00000681: 	leaq	DATAat0x4d234(%rip), %rsi
    00000688: 	movq	%rax, %rdi
    0000068b: 	movq	%rax, 0x28(%rsp)
    00000690: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1680
    00000695: 	callq	clock@PLT # Offset: 1685
    0000069a: 	movl	iterations(%rip), %r14d
    000006a1: 	xorl	%r12d, %r12d
    000006a4: 	leaq	0x1f30(%rbp), %rbx
    000006ab: 	movq	%rax, start_time(%rip)
    000006b2: 	leaq	DATAat0x4d004(%rip), %r13
    000006b9: 	testl	%r14d, %r14d
    000006bc: 	jle	.Ltmp2504 # Offset: 1724
    000006c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2507:
    000006c8: 	movzbl	(%rbp), %ecx
    000006cc: 	movq	%rbp, %rax
    000006cf: 	subb	0x1(%rbp), %cl
    000006d2: 	pxor	%xmm1, %xmm1
    000006d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2505:
    000006e0: 	movdqu	(%rax), %xmm0
    000006e4: 	movdqu	0x1(%rax), %xmm4
    000006e9: 	addq	$0x10, %rax
    000006ed: 	psubb	%xmm4, %xmm0
    000006f1: 	paddb	%xmm0, %xmm0
    000006f5: 	paddb	%xmm0, %xmm0
    000006f9: 	paddb	%xmm0, %xmm0
    000006fd: 	paddb	%xmm0, %xmm1
    00000701: 	cmpq	%rbx, %rax
    00000704: 	jne	.Ltmp2505 # Offset: 1796
    00000706: 	movdqa	%xmm1, %xmm0
    0000070a: 	psrldq	$0x8, %xmm0
    0000070f: 	paddb	%xmm0, %xmm1
    00000713: 	pxor	%xmm0, %xmm0
    00000717: 	psadbw	%xmm0, %xmm1
    0000071b: 	movq	0x1f30(%rbp), %xmm0
    00000723: 	movd	%xmm1, %edx
    00000727: 	movq	0x1f31(%rbp), %xmm1
    0000072f: 	psubb	%xmm1, %xmm0
    00000733: 	pxor	%xmm1, %xmm1
    00000737: 	paddb	%xmm0, %xmm0
    0000073b: 	paddb	%xmm0, %xmm0
    0000073f: 	paddb	%xmm0, %xmm0
    00000743: 	movdqa	%xmm0, %xmm6
    00000747: 	psadbw	%xmm1, %xmm6
    0000074b: 	movq	%xmm6, %rax
    00000750: 	movq	%xmm6, 0x48(%rsp)
    00000756: 	movzbl	0x1f39(%rbp), %r10d
    0000075e: 	movzbl	0x1f3a(%rbp), %r9d
    00000766: 	movl	%eax, %r11d
    00000769: 	movzbl	0x1f38(%rbp), %eax
    00000770: 	movzbl	0x1f3b(%rbp), %r8d
    00000778: 	subb	0x1f3f(%rbp), %cl
    0000077e: 	addb	0x1f3e(%rbp), %cl
    00000784: 	addl	%edx, %r11d
    00000787: 	subl	%r10d, %eax
    0000078a: 	movzbl	0x1f3c(%rbp), %edi
    00000791: 	subl	%r9d, %r10d
    00000794: 	movzbl	0x1f3d(%rbp), %esi
    0000079b: 	addl	%ecx, %eax
    0000079d: 	subl	%r8d, %r9d
    000007a0: 	addl	%r10d, %eax
    000007a3: 	subl	%edi, %r8d
    000007a6: 	subl	%esi, %edi
    000007a8: 	subb	0x1f3e(%rbp), %sil
    000007af: 	addl	%eax, %r9d
    000007b2: 	addl	%r9d, %r8d
    000007b5: 	addl	%r8d, %edi
    000007b8: 	addl	%edi, %esi
    000007ba: 	leal	(%r11,%rsi,8), %esi
    000007be: 	testb	%sil, %sil
    000007c1: 	jne	.Ltmp2506 # Offset: 1985
.Ltmp2577:
    000007c7: 	addl	$0x1, %r12d
    000007cb: 	cmpl	%r14d, %r12d
    000007ce: 	jl	.Ltmp2507 # Offset: 1998
.Ltmp2504:
    000007d4: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000007db: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000007e2: 	subq	$0x20, %rax
    000007e6: 	cmpq	%rax, %rbx
    000007e9: 	je	.Ltmp2508 # Offset: 2025
    000007ef: 	leaq	0x10(%rbx), %rdi
    000007f3: 	movq	0xb8(%rsp), %r12
    000007fb: 	movq	%rdi, (%rbx)
    000007fe: 	movq	0xb0(%rsp), %r13
    00000806: 	movq	%r13, %rax
    00000809: 	addq	%r12, %rax
    0000080c: 	je	.Ltmp2509 # Offset: 2060
    0000080e: 	testq	%r13, %r13
    00000811: 	je	.Ltmp2510 # Offset: 2065
.Ltmp2509:
    00000817: 	movq	%r12, 0x68(%rsp)
    0000081c: 	cmpq	$0xf, %r12
    00000820: 	ja	.Ltmp2511 # Offset: 2080
    00000826: 	cmpq	$0x1, %r12
    0000082a: 	jne	.Ltmp2512 # Offset: 2090
    00000830: 	movzbl	(%r13), %eax
    00000835: 	movb	%al, 0x10(%rbx)
.Ltmp2615:
    00000838: 	movq	%r12, 0x8(%rbx)
    0000083c: 	movb	$0x0, (%rdi,%r12)
    00000841: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000848: 	addq	$0x20, %rax
    0000084c: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp2604:
    00000853: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000085a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000861: 	je	.Ltmp2513 # Offset: 2145
.Ltmp2597:
    00000867: 	movq	-0x20(%rax), %r12
    0000086b: 	callq	clock@PLT # Offset: 2155
    00000870: 	pxor	%xmm0, %xmm0
    00000874: 	movq	%rax, end_time(%rip)
    0000087b: 	movq	%r12, %rdi
    0000087e: 	subq	start_time(%rip), %rax
    00000885: 	cvtsi2sd	%rax, %xmm0
    0000088a: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000892: 	callq	_Z13record_resultdPKc # Offset: 2194
    00000897: 	movq	0xb0(%rsp), %rdi
    0000089f: 	cmpq	0x20(%rsp), %rdi
    000008a4: 	je	.Ltmp2514 # Offset: 2212
    000008a6: 	movq	0xc0(%rsp), %rax
    000008ae: 	leaq	0x1(%rax), %rsi
    000008b2: 	callq	_ZdlPvm@PLT # Offset: 2226
.Ltmp2514:
    000008b7: 	movq	0x8(%rsp), %rax
    000008bc: 	leaq	0xe0(%rsp), %rbx
    000008c4: 	movq	%rbx, 0xd0(%rsp)
    000008cc: 	movq	(%rax), %r13
    000008cf: 	movq	0x8(%rax), %r12
    000008d3: 	movq	%r13, %rax
    000008d6: 	addq	%r12, %rax
    000008d9: 	je	.Ltmp2515 # Offset: 2265
    000008db: 	testq	%r13, %r13
    000008de: 	je	.Ltmp2469 # Offset: 2270
.Ltmp2515:
    000008e4: 	movq	%r12, 0x68(%rsp)
    000008e9: 	cmpq	$0xf, %r12
    000008ed: 	ja	.Ltmp2516 # Offset: 2285
    000008f3: 	cmpq	$0x1, %r12
    000008f7: 	jne	.Ltmp2517 # Offset: 2295
    000008fd: 	movzbl	(%r13), %eax
    00000902: 	movb	%al, 0xe0(%rsp)
    00000909: 	movq	%rbx, %rax
.Ltmp2590:
    0000090c: 	movq	%r12, 0xd8(%rsp)
    00000914: 	movb	$0x0, (%rax,%r12)
    00000919: 	movabsq	$0x3fffffffffffffff, %rax
    00000923: 	subq	0xd8(%rsp), %rax
    0000092b: 	cmpq	$0x8, %rax
    0000092f: 	jbe	.Ltmp2518 # Offset: 2351
    00000935: 	leaq	0xd0(%rsp), %r12
    0000093d: 	movl	$0x9, %edx
    00000942: 	leaq	DATAat0x4d24b(%rip), %rsi
    00000949: 	movq	%r12, %rdi
    0000094c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2380
    00000951: 	movl	0x14(%rsp), %edx
    00000955: 	movq	%r12, %rcx
    00000958: 	movl	$0x1f40, %esi
    0000095d: 	movq	%rbp, %rdi
    00000960: 	callq	_Z9test_CSENIh14custom_cse_subIhELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2400
    00000965: 	movq	0xd0(%rsp), %rdi
    0000096d: 	cmpq	%rbx, %rdi
    00000970: 	je	.Ltmp2519 # Offset: 2416
    00000972: 	movq	0xe0(%rsp), %rax
    0000097a: 	leaq	0x1(%rax), %rsi
    0000097e: 	callq	_ZdlPvm@PLT # Offset: 2430
.Ltmp2519:
    00000983: 	leaq	0x100(%rsp), %rax
    0000098b: 	movq	%rax, 0x20(%rsp)
    00000990: 	movq	%rax, 0xf0(%rsp)
    00000998: 	movq	0x8(%rsp), %rax
    0000099d: 	movq	(%rax), %r13
    000009a0: 	movq	0x8(%rax), %r12
    000009a4: 	movq	%r13, %rax
    000009a7: 	addq	%r12, %rax
    000009aa: 	je	.Ltmp2520 # Offset: 2474
    000009ac: 	testq	%r13, %r13
    000009af: 	je	.Ltmp2469 # Offset: 2479
.Ltmp2520:
    000009b5: 	movq	%r12, 0x68(%rsp)
    000009ba: 	cmpq	$0xf, %r12
    000009be: 	ja	.Ltmp2521 # Offset: 2494
    000009c4: 	cmpq	$0x1, %r12
    000009c8: 	jne	.Ltmp2522 # Offset: 2504
    000009ce: 	movzbl	(%r13), %eax
    000009d3: 	movb	%al, 0x100(%rsp)
    000009da: 	movq	0x20(%rsp), %rax
.Ltmp2588:
    000009df: 	movq	%r12, 0xf8(%rsp)
    000009e7: 	movb	$0x0, (%rax,%r12)
    000009ec: 	movabsq	$0x3fffffffffffffff, %rax
    000009f6: 	subq	0xf8(%rsp), %rax
    000009fe: 	cmpq	$0x11, %rax
    00000a02: 	jbe	.Ltmp2523 # Offset: 2562
    00000a08: 	leaq	0xf0(%rsp), %rax
    00000a10: 	movl	$0x12, %edx
    00000a15: 	leaq	DATAat0x4d259(%rip), %rsi
    00000a1c: 	movq	%rax, %rdi
    00000a1f: 	movq	%rax, 0x28(%rsp)
    00000a24: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2596
    00000a29: 	callq	clock@PLT # Offset: 2601
    00000a2e: 	movl	iterations(%rip), %r14d
    00000a35: 	xorl	%r12d, %r12d
    00000a38: 	leaq	0x1f30(%rbp), %rbx
    00000a3f: 	movq	%rax, start_time(%rip)
    00000a46: 	leaq	DATAat0x4d004(%rip), %r13
    00000a4d: 	testl	%r14d, %r14d
    00000a50: 	jle	.Ltmp2524 # Offset: 2640
    00000a56: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2527:
    00000a60: 	movzbl	(%rbp), %ecx
    00000a64: 	movq	%rbp, %rax
    00000a67: 	subb	0x1(%rbp), %cl
    00000a6a: 	pxor	%xmm1, %xmm1
    00000a6e: 	nop # Size: 2
.Ltmp2525:
    00000a70: 	movdqu	(%rax), %xmm0
    00000a74: 	movdqu	0x1(%rax), %xmm5
    00000a79: 	addq	$0x10, %rax
    00000a7d: 	psubb	%xmm5, %xmm0
    00000a81: 	paddb	%xmm0, %xmm0
    00000a85: 	paddb	%xmm0, %xmm0
    00000a89: 	paddb	%xmm0, %xmm0
    00000a8d: 	paddb	%xmm0, %xmm1
    00000a91: 	cmpq	%rax, %rbx
    00000a94: 	jne	.Ltmp2525 # Offset: 2708
    00000a96: 	movdqa	%xmm1, %xmm0
    00000a9a: 	psrldq	$0x8, %xmm0
    00000a9f: 	paddb	%xmm0, %xmm1
    00000aa3: 	pxor	%xmm0, %xmm0
    00000aa7: 	psadbw	%xmm0, %xmm1
    00000aab: 	movq	0x1f30(%rbp), %xmm0
    00000ab3: 	movd	%xmm1, %edx
    00000ab7: 	movq	0x1f31(%rbp), %xmm1
    00000abf: 	psubb	%xmm1, %xmm0
    00000ac3: 	pxor	%xmm1, %xmm1
    00000ac7: 	paddb	%xmm0, %xmm0
    00000acb: 	paddb	%xmm0, %xmm0
    00000acf: 	paddb	%xmm0, %xmm0
    00000ad3: 	movdqa	%xmm0, %xmm3
    00000ad7: 	psadbw	%xmm1, %xmm3
    00000adb: 	movq	%xmm3, %rax
    00000ae0: 	movq	%xmm3, 0x40(%rsp)
    00000ae6: 	movzbl	0x1f39(%rbp), %r10d
    00000aee: 	movzbl	0x1f3a(%rbp), %r9d
    00000af6: 	movl	%eax, %r11d
    00000af9: 	movzbl	0x1f38(%rbp), %eax
    00000b00: 	movzbl	0x1f3b(%rbp), %r8d
    00000b08: 	subb	0x1f3f(%rbp), %cl
    00000b0e: 	addb	0x1f3e(%rbp), %cl
    00000b14: 	addl	%edx, %r11d
    00000b17: 	subl	%r10d, %eax
    00000b1a: 	movzbl	0x1f3c(%rbp), %edi
    00000b21: 	subl	%r9d, %r10d
    00000b24: 	movzbl	0x1f3d(%rbp), %esi
    00000b2b: 	addl	%ecx, %eax
    00000b2d: 	subl	%r8d, %r9d
    00000b30: 	addl	%r10d, %eax
    00000b33: 	subl	%edi, %r8d
    00000b36: 	subl	%esi, %edi
    00000b38: 	subb	0x1f3e(%rbp), %sil
    00000b3f: 	addl	%eax, %r9d
    00000b42: 	addl	%r9d, %r8d
    00000b45: 	addl	%r8d, %edi
    00000b48: 	addl	%edi, %esi
    00000b4a: 	leal	(%r11,%rsi,8), %esi
    00000b4e: 	testb	%sil, %sil
    00000b51: 	jne	.Ltmp2526 # Offset: 2897
.Ltmp2580:
    00000b57: 	addl	$0x1, %r12d
    00000b5b: 	cmpl	%r14d, %r12d
    00000b5e: 	jl	.Ltmp2527 # Offset: 2910
.Ltmp2524:
    00000b64: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000b6b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000b72: 	subq	$0x20, %rax
    00000b76: 	cmpq	%rax, %rbx
    00000b79: 	je	.Ltmp2528 # Offset: 2937
    00000b7f: 	leaq	0x10(%rbx), %rdi
    00000b83: 	movq	0xf8(%rsp), %r12
    00000b8b: 	movq	%rdi, (%rbx)
    00000b8e: 	movq	0xf0(%rsp), %r13
    00000b96: 	movq	%r13, %rax
    00000b99: 	addq	%r12, %rax
    00000b9c: 	je	.Ltmp2529 # Offset: 2972
    00000b9e: 	testq	%r13, %r13
    00000ba1: 	je	.Ltmp2530 # Offset: 2977
.Ltmp2529:
    00000ba7: 	movq	%r12, 0x68(%rsp)
    00000bac: 	cmpq	$0xf, %r12
    00000bb0: 	ja	.Ltmp2531 # Offset: 2992
    00000bb6: 	cmpq	$0x1, %r12
    00000bba: 	jne	.Ltmp2532 # Offset: 3002
    00000bc0: 	movzbl	(%r13), %eax
    00000bc5: 	movb	%al, 0x10(%rbx)
.Ltmp2609:
    00000bc8: 	movq	%r12, 0x8(%rbx)
    00000bcc: 	movb	$0x0, (%rdi,%r12)
    00000bd1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000bd8: 	addq	$0x20, %rax
    00000bdc: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp2601:
    00000be3: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000bea: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000bf1: 	je	.Ltmp2533 # Offset: 3057
.Ltmp2595:
    00000bf7: 	movq	-0x20(%rax), %r12
    00000bfb: 	callq	clock@PLT # Offset: 3067
    00000c00: 	pxor	%xmm0, %xmm0
    00000c04: 	movq	%rax, end_time(%rip)
    00000c0b: 	movq	%r12, %rdi
    00000c0e: 	subq	start_time(%rip), %rax
    00000c15: 	cvtsi2sd	%rax, %xmm0
    00000c1a: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000c22: 	callq	_Z13record_resultdPKc # Offset: 3106
    00000c27: 	movq	0xf0(%rsp), %rdi
    00000c2f: 	cmpq	0x20(%rsp), %rdi
    00000c34: 	je	.Ltmp2534 # Offset: 3124
    00000c36: 	movq	0x100(%rsp), %rax
    00000c3e: 	leaq	0x1(%rax), %rsi
    00000c42: 	callq	_ZdlPvm@PLT # Offset: 3138
.Ltmp2534:
    00000c47: 	movq	0x8(%rsp), %rsi
    00000c4c: 	leaq	DATAat0x4d270(%rip), %rdx
    00000c53: 	movq	%r15, %rdi
    00000c56: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3158
    00000c5b: 	movl	0x14(%rsp), %edx
    00000c5f: 	movq	%r15, %rcx
    00000c62: 	movq	%rbp, %rdi
    00000c65: 	movl	$0x1f40, %esi
    00000c6a: 	callq	_Z9test_CSENIh14custom_cse_mulIhELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3178
    00000c6f: 	movq	0x150(%rsp), %rdi
    00000c77: 	cmpq	0x18(%rsp), %rdi
    00000c7c: 	je	.Ltmp2535 # Offset: 3196
    00000c7e: 	movq	0x160(%rsp), %rax
    00000c86: 	leaq	0x1(%rax), %rsi
    00000c8a: 	callq	_ZdlPvm@PLT # Offset: 3210
.Ltmp2535:
    00000c8f: 	leaq	0x120(%rsp), %rax
    00000c97: 	movq	%rax, 0x20(%rsp)
    00000c9c: 	movq	%rax, 0x110(%rsp)
    00000ca4: 	movq	0x8(%rsp), %rax
    00000ca9: 	movq	(%rax), %r13
    00000cac: 	movq	0x8(%rax), %r12
    00000cb0: 	movq	%r13, %rax
    00000cb3: 	addq	%r12, %rax
    00000cb6: 	je	.Ltmp2536 # Offset: 3254
    00000cb8: 	testq	%r13, %r13
    00000cbb: 	je	.Ltmp2469 # Offset: 3259
.Ltmp2536:
    00000cc1: 	movq	%r12, 0x68(%rsp)
    00000cc6: 	cmpq	$0xf, %r12
    00000cca: 	ja	.Ltmp2537 # Offset: 3274
    00000cd0: 	cmpq	$0x1, %r12
    00000cd4: 	jne	.Ltmp2538 # Offset: 3284
    00000cda: 	movzbl	(%r13), %eax
    00000cdf: 	movb	%al, 0x120(%rsp)
    00000ce6: 	movq	0x20(%rsp), %rax
.Ltmp2584:
    00000ceb: 	movq	%r12, 0x118(%rsp)
    00000cf3: 	movb	$0x0, (%rax,%r12)
    00000cf8: 	movabsq	$0x3fffffffffffffff, %rax
    00000d02: 	subq	0x118(%rsp), %rax
    00000d0a: 	cmpq	$0xf, %rax
    00000d0e: 	jbe	.Ltmp2539 # Offset: 3342
    00000d14: 	leaq	0x110(%rsp), %rax
    00000d1c: 	movl	$0x10, %edx
    00000d21: 	leaq	DATAat0x4d27e(%rip), %rsi
    00000d28: 	movq	%rax, %rdi
    00000d2b: 	movq	%rax, 0x28(%rsp)
    00000d30: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3376
    00000d35: 	callq	clock@PLT # Offset: 3381
    00000d3a: 	movl	iterations(%rip), %r14d
    00000d41: 	xorl	%r12d, %r12d
    00000d44: 	leaq	0x1f30(%rbp), %rbx
    00000d4b: 	movq	%rax, start_time(%rip)
    00000d52: 	leaq	DATAat0x4d004(%rip), %r13
    00000d59: 	testl	%r14d, %r14d
    00000d5c: 	jle	.Ltmp2540 # Offset: 3420
    00000d62: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2543:
    00000d68: 	movzbl	(%rbp), %ecx
    00000d6c: 	movq	%rbp, %rax
    00000d6f: 	subb	0x1(%rbp), %cl
    00000d72: 	pxor	%xmm1, %xmm1
    00000d76: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2541:
    00000d80: 	movdqu	(%rax), %xmm0
    00000d84: 	movdqu	0x1(%rax), %xmm6
    00000d89: 	addq	$0x10, %rax
    00000d8d: 	psubb	%xmm6, %xmm0
    00000d91: 	paddb	%xmm0, %xmm0
    00000d95: 	paddb	%xmm0, %xmm0
    00000d99: 	paddb	%xmm0, %xmm0
    00000d9d: 	paddb	%xmm0, %xmm1
    00000da1: 	cmpq	%rbx, %rax
    00000da4: 	jne	.Ltmp2541 # Offset: 3492
    00000da6: 	movdqa	%xmm1, %xmm0
    00000daa: 	psrldq	$0x8, %xmm0
    00000daf: 	paddb	%xmm0, %xmm1
    00000db3: 	pxor	%xmm0, %xmm0
    00000db7: 	psadbw	%xmm0, %xmm1
    00000dbb: 	movq	0x1f30(%rbp), %xmm0
    00000dc3: 	movd	%xmm1, %edx
    00000dc7: 	movq	0x1f31(%rbp), %xmm1
    00000dcf: 	psubb	%xmm1, %xmm0
    00000dd3: 	pxor	%xmm1, %xmm1
    00000dd7: 	paddb	%xmm0, %xmm0
    00000ddb: 	paddb	%xmm0, %xmm0
    00000ddf: 	paddb	%xmm0, %xmm0
    00000de3: 	movdqa	%xmm0, %xmm4
    00000de7: 	psadbw	%xmm1, %xmm4
    00000deb: 	movq	%xmm4, %rax
    00000df0: 	movq	%xmm4, 0x38(%rsp)
    00000df6: 	movzbl	0x1f39(%rbp), %r10d
    00000dfe: 	movzbl	0x1f3a(%rbp), %r9d
    00000e06: 	movl	%eax, %r11d
    00000e09: 	movzbl	0x1f38(%rbp), %eax
    00000e10: 	movzbl	0x1f3b(%rbp), %r8d
    00000e18: 	subb	0x1f3f(%rbp), %cl
    00000e1e: 	addb	0x1f3e(%rbp), %cl
    00000e24: 	addl	%edx, %r11d
    00000e27: 	subl	%r10d, %eax
    00000e2a: 	movzbl	0x1f3c(%rbp), %edi
    00000e31: 	subl	%r9d, %r10d
    00000e34: 	movzbl	0x1f3d(%rbp), %esi
    00000e3b: 	addl	%ecx, %eax
    00000e3d: 	subl	%r8d, %r9d
    00000e40: 	addl	%r10d, %eax
    00000e43: 	subl	%edi, %r8d
    00000e46: 	subl	%esi, %edi
    00000e48: 	subb	0x1f3e(%rbp), %sil
    00000e4f: 	addl	%eax, %r9d
    00000e52: 	addl	%r9d, %r8d
    00000e55: 	addl	%r8d, %edi
    00000e58: 	addl	%edi, %esi
    00000e5a: 	leal	(%r11,%rsi,8), %esi
    00000e5e: 	testb	%sil, %sil
    00000e61: 	jne	.Ltmp2542 # Offset: 3681
.Ltmp2578:
    00000e67: 	addl	$0x1, %r12d
    00000e6b: 	cmpl	%r14d, %r12d
    00000e6e: 	jl	.Ltmp2543 # Offset: 3694
.Ltmp2540:
    00000e74: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000e7b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000e82: 	subq	$0x20, %rax
    00000e86: 	cmpq	%rax, %rbx
    00000e89: 	je	.Ltmp2544 # Offset: 3721
    00000e8f: 	leaq	0x10(%rbx), %rdi
    00000e93: 	movq	0x118(%rsp), %r12
    00000e9b: 	movq	%rdi, (%rbx)
    00000e9e: 	movq	0x110(%rsp), %r13
    00000ea6: 	movq	%r13, %rax
    00000ea9: 	addq	%r12, %rax
    00000eac: 	je	.Ltmp2545 # Offset: 3756
    00000eae: 	testq	%r13, %r13
    00000eb1: 	je	.Ltmp2546 # Offset: 3761
.Ltmp2545:
    00000eb7: 	movq	%r12, 0x68(%rsp)
    00000ebc: 	cmpq	$0xf, %r12
    00000ec0: 	ja	.Ltmp2547 # Offset: 3776
    00000ec6: 	cmpq	$0x1, %r12
    00000eca: 	jne	.Ltmp2548 # Offset: 3786
    00000ed0: 	movzbl	(%r13), %eax
    00000ed5: 	movb	%al, 0x10(%rbx)
.Ltmp2605:
    00000ed8: 	movq	%r12, 0x8(%rbx)
    00000edc: 	movb	$0x0, (%rdi,%r12)
    00000ee1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000ee8: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000eef: 	addq	$0x20, %rax
    00000ef3: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000efa: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000f01: 	je	.Ltmp2549 # Offset: 3841
.Ltmp2603:
    00000f07: 	movq	-0x20(%rax), %r12
    00000f0b: 	callq	clock@PLT # Offset: 3851
    00000f10: 	pxor	%xmm0, %xmm0
    00000f14: 	movq	%rax, end_time(%rip)
    00000f1b: 	movq	%r12, %rdi
    00000f1e: 	subq	start_time(%rip), %rax
    00000f25: 	cvtsi2sd	%rax, %xmm0
    00000f2a: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000f32: 	callq	_Z13record_resultdPKc # Offset: 3890
    00000f37: 	movq	0x110(%rsp), %rdi
    00000f3f: 	cmpq	0x20(%rsp), %rdi
    00000f44: 	je	.Ltmp2550 # Offset: 3908
    00000f46: 	movq	0x120(%rsp), %rax
    00000f4e: 	leaq	0x1(%rax), %rsi
    00000f52: 	callq	_ZdlPvm@PLT # Offset: 3922
.Ltmp2550:
    00000f57: 	movq	0x8(%rsp), %rax
    00000f5c: 	leaq	0x140(%rsp), %rbx
    00000f64: 	movq	%rbx, 0x130(%rsp)
    00000f6c: 	movq	(%rax), %r13
    00000f6f: 	movq	0x8(%rax), %r12
    00000f73: 	movq	%r13, %rax
    00000f76: 	addq	%r12, %rax
    00000f79: 	je	.Ltmp2551 # Offset: 3961
    00000f7b: 	testq	%r13, %r13
    00000f7e: 	je	.Ltmp2469 # Offset: 3966
.Ltmp2551:
    00000f84: 	movq	%r12, 0x68(%rsp)
    00000f89: 	cmpq	$0xf, %r12
    00000f8d: 	ja	.Ltmp2552 # Offset: 3981
    00000f93: 	cmpq	$0x1, %r12
    00000f97: 	jne	.Ltmp2553 # Offset: 3991
    00000f9d: 	movzbl	(%r13), %eax
    00000fa2: 	movb	%al, 0x140(%rsp)
    00000fa9: 	movq	%rbx, %rax
.Ltmp2586:
    00000fac: 	movq	%r12, 0x138(%rsp)
    00000fb4: 	movb	$0x0, (%rax,%r12)
    00000fb9: 	movabsq	$0x3fffffffffffffff, %rax
    00000fc3: 	subq	0x138(%rsp), %rax
    00000fcb: 	cmpq	$0x6, %rax
    00000fcf: 	jbe	.Ltmp2554 # Offset: 4047
    00000fd5: 	leaq	0x130(%rsp), %r12
    00000fdd: 	movl	$0x7, %edx
    00000fe2: 	leaq	DATAat0x4d293(%rip), %rsi
    00000fe9: 	movq	%r12, %rdi
    00000fec: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4076
    00000ff1: 	movl	0x14(%rsp), %edx
    00000ff5: 	movq	%r12, %rcx
    00000ff8: 	movl	$0x1f40, %esi
    00000ffd: 	movq	%rbp, %rdi
    00001000: 	callq	_Z9test_CSENIh14custom_cse_divIhELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4096
    00001005: 	movq	0x130(%rsp), %rdi
    0000100d: 	cmpq	%rbx, %rdi
    00001010: 	je	.Ltmp2555 # Offset: 4112
    00001012: 	movq	0x140(%rsp), %rax
    0000101a: 	leaq	0x1(%rax), %rsi
    0000101e: 	callq	_ZdlPvm@PLT # Offset: 4126
.Ltmp2555:
    00001023: 	movq	0x8(%rsp), %rsi
    00001028: 	leaq	DATAat0x4d29f(%rip), %rdx
    0000102f: 	movq	%r15, %rdi
    00001032: 	xorl	%r12d, %r12d
    00001035: 	leaq	0x1f30(%rbp), %rbx
    0000103c: 	leaq	DATAat0x4d004(%rip), %r13
    00001043: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4163
    00001048: 	callq	clock@PLT # Offset: 4168
    0000104d: 	movl	iterations(%rip), %r14d
    00001054: 	movq	%rax, start_time(%rip)
    0000105b: 	testl	%r14d, %r14d
    0000105e: 	jle	.Ltmp2556 # Offset: 4190
    00001064: 	nopl	(%rax) # Size: 4
.Ltmp2559:
    00001068: 	movzbl	(%rbp), %ecx
    0000106c: 	movq	%rbp, %rax
    0000106f: 	subb	0x1(%rbp), %cl
    00001072: 	pxor	%xmm1, %xmm1
    00001076: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2557:
    00001080: 	movdqu	(%rax), %xmm0
    00001084: 	movdqu	0x1(%rax), %xmm7
    00001089: 	addq	$0x10, %rax
    0000108d: 	psubb	%xmm7, %xmm0
    00001091: 	paddb	%xmm0, %xmm0
    00001095: 	paddb	%xmm0, %xmm0
    00001099: 	paddb	%xmm0, %xmm0
    0000109d: 	paddb	%xmm0, %xmm1
    000010a1: 	cmpq	%rbx, %rax
    000010a4: 	jne	.Ltmp2557 # Offset: 4260
    000010a6: 	movdqa	%xmm1, %xmm0
    000010aa: 	psrldq	$0x8, %xmm0
    000010af: 	paddb	%xmm0, %xmm1
    000010b3: 	pxor	%xmm0, %xmm0
    000010b7: 	psadbw	%xmm0, %xmm1
    000010bb: 	movq	0x1f30(%rbp), %xmm0
    000010c3: 	movd	%xmm1, %edx
    000010c7: 	movq	0x1f31(%rbp), %xmm1
    000010cf: 	psubb	%xmm1, %xmm0
    000010d3: 	pxor	%xmm1, %xmm1
    000010d7: 	paddb	%xmm0, %xmm0
    000010db: 	paddb	%xmm0, %xmm0
    000010df: 	paddb	%xmm0, %xmm0
    000010e3: 	movdqa	%xmm0, %xmm2
    000010e7: 	psadbw	%xmm1, %xmm2
    000010eb: 	movq	%xmm2, %rax
    000010f0: 	movq	%xmm2, 0x30(%rsp)
    000010f6: 	movzbl	0x1f39(%rbp), %r10d
    000010fe: 	movzbl	0x1f3a(%rbp), %r9d
    00001106: 	movl	%eax, %r11d
    00001109: 	movzbl	0x1f38(%rbp), %eax
    00001110: 	movzbl	0x1f3b(%rbp), %r8d
    00001118: 	subb	0x1f3f(%rbp), %cl
    0000111e: 	addb	0x1f3e(%rbp), %cl
    00001124: 	addl	%edx, %r11d
    00001127: 	subl	%r10d, %eax
    0000112a: 	movzbl	0x1f3c(%rbp), %edi
    00001131: 	subl	%r9d, %r10d
    00001134: 	movzbl	0x1f3d(%rbp), %esi
    0000113b: 	addl	%ecx, %eax
    0000113d: 	subl	%r8d, %r9d
    00001140: 	addl	%r10d, %eax
    00001143: 	subl	%edi, %r8d
    00001146: 	subl	%esi, %edi
    00001148: 	subb	0x1f3e(%rbp), %sil
    0000114f: 	addl	%eax, %r9d
    00001152: 	addl	%r9d, %r8d
    00001155: 	addl	%r8d, %edi
    00001158: 	addl	%edi, %esi
    0000115a: 	leal	(%r11,%rsi,8), %esi
    0000115e: 	testb	%sil, %sil
    00001161: 	jne	.Ltmp2558 # Offset: 4449
.Ltmp2579:
    00001167: 	addl	$0x1, %r12d
    0000116b: 	cmpl	%r14d, %r12d
    0000116e: 	jl	.Ltmp2559 # Offset: 4462
.Ltmp2556:
    00001174: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000117b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00001182: 	subq	$0x20, %rax
    00001186: 	cmpq	%rax, %rbx
    00001189: 	je	.Ltmp2560 # Offset: 4489
    0000118f: 	leaq	0x10(%rbx), %rdi
    00001193: 	movq	0x158(%rsp), %r12
    0000119b: 	movq	%rdi, (%rbx)
    0000119e: 	movq	0x150(%rsp), %r13
    000011a6: 	movq	%r13, %rax
    000011a9: 	addq	%r12, %rax
    000011ac: 	je	.Ltmp2561 # Offset: 4524
    000011ae: 	testq	%r13, %r13
    000011b1: 	je	.Ltmp2562 # Offset: 4529
.Ltmp2561:
    000011b7: 	movq	%r12, 0x68(%rsp)
    000011bc: 	cmpq	$0xf, %r12
    000011c0: 	ja	.Ltmp2563 # Offset: 4544
    000011c6: 	cmpq	$0x1, %r12
    000011ca: 	jne	.Ltmp2564 # Offset: 4554
    000011d0: 	movzbl	(%r13), %eax
    000011d5: 	movb	%al, 0x10(%rbx)
.Ltmp2607:
    000011d8: 	movq	%r12, 0x8(%rbx)
    000011dc: 	movb	$0x0, (%rdi,%r12)
    000011e1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000011e8: 	addq	$0x20, %rax
    000011ec: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp2600:
    000011f3: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000011fa: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001201: 	je	.Ltmp2565 # Offset: 4609
.Ltmp2596:
    00001207: 	movq	-0x20(%rax), %r12
    0000120b: 	callq	clock@PLT # Offset: 4619
    00001210: 	pxor	%xmm0, %xmm0
    00001214: 	movq	%rax, end_time(%rip)
    0000121b: 	movq	%r12, %rdi
    0000121e: 	subq	start_time(%rip), %rax
    00001225: 	cvtsi2sd	%rax, %xmm0
    0000122a: 	divsd	DATAat0x4d640(%rip), %xmm0
    00001232: 	callq	_Z13record_resultdPKc # Offset: 4658
    00001237: 	movq	0x150(%rsp), %rdi
    0000123f: 	cmpq	0x18(%rsp), %rdi
    00001244: 	je	.Ltmp2566 # Offset: 4676
    00001246: 	movq	0x160(%rsp), %rax
    0000124e: 	leaq	0x1(%rax), %rsi
    00001252: 	callq	_ZdlPvm@PLT # Offset: 4690
.Ltmp2566:
    00001257: 	movq	0x18(%rsp), %rax
    0000125c: 	movq	%rax, 0x150(%rsp)
    00001264: 	movq	0x8(%rsp), %rax
    00001269: 	movq	(%rax), %r13
    0000126c: 	movq	0x8(%rax), %r12
    00001270: 	movq	%r13, %rax
    00001273: 	addq	%r12, %rax
    00001276: 	je	.Ltmp2567 # Offset: 4726
    00001278: 	testq	%r13, %r13
    0000127b: 	je	.Ltmp2469 # Offset: 4731
.Ltmp2567:
    00001281: 	movq	%r12, 0x68(%rsp)
    00001286: 	cmpq	$0xf, %r12
    0000128a: 	ja	.Ltmp2568 # Offset: 4746
    00001290: 	cmpq	$0x1, %r12
    00001294: 	jne	.Ltmp2569 # Offset: 4756
    0000129a: 	movzbl	(%r13), %eax
    0000129f: 	movb	%al, 0x160(%rsp)
    000012a6: 	movq	0x18(%rsp), %rax
.Ltmp2594:
    000012ab: 	movq	%r12, 0x158(%rsp)
    000012b3: 	movb	$0x0, (%rax,%r12)
    000012b8: 	movabsq	$0x3fffffffffffffff, %rax
    000012c2: 	subq	0x158(%rsp), %rax
    000012ca: 	cmpq	$0x3, %rax
    000012ce: 	jbe	.Ltmp2570 # Offset: 4814
    000012d4: 	movl	$0x4, %edx
    000012d9: 	leaq	DATAat0x4d2b1(%rip), %rsi
    000012e0: 	movq	%r15, %rdi
    000012e3: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4835
    000012e8: 	movl	0x14(%rsp), %edx
    000012ec: 	movq	%r15, %rcx
    000012ef: 	movl	$0x1f40, %esi
    000012f4: 	movq	%rbp, %rdi
    000012f7: 	callq	_Z9test_CSENIh14custom_cse_mixIhELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4855
    000012fc: 	movq	0x150(%rsp), %rdi
    00001304: 	cmpq	0x18(%rsp), %rdi
    00001309: 	je	.Ltmp2571 # Offset: 4873
    0000130b: 	movq	0x160(%rsp), %rax
    00001313: 	leaq	0x1(%rax), %rsi
    00001317: 	callq	_ZdlPvm@PLT # Offset: 4887
.Ltmp2571:
    0000131c: 	movq	0x178(%rsp), %rax
    00001324: 	subq	%fs:0x28, %rax
    0000132d: 	jne	.Ltmp2572 # Offset: 4909
    00001333: 	movq	0x8(%rsp), %rax
    00001338: 	movl	iterations(%rip), %edx
    0000133e: 	xorl	%r8d, %r8d
    00001341: 	xorl	%ecx, %ecx
    00001343: 	movl	$0x1f40, %esi
    00001348: 	movq	(%rax), %rdi
    0000134b: 	addq	$0x188, %rsp
    00001352: 	popq	%rbx
    00001353: 	popq	%rbp
    00001354: 	popq	%r12
    00001356: 	popq	%r13
    00001358: 	popq	%r14
    0000135a: 	popq	%r15
    0000135c: 	jmp	_Z9summarizePKciiii # TAILCALL  # Offset: 4956
.Ltmp2471:
    00001361: 	testq	%r12, %r12
    00001364: 	jne	.Ltmp2573 # Offset: 4964
    0000136a: 	movq	%r13, %rax
    0000136d: 	jmp	.Ltmp2574 # Offset: 4973
    00001372: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2475:
    00001378: 	movq	0x70(%rsp), %rdx
    0000137d: 	movq	%r14, %rsi
    00001380: 	movl	$0x1, %edi
    00001385: 	xorl	%eax, %eax
    00001387: 	callq	__printf_chk@PLT # Offset: 4999
    0000138c: 	movl	iterations(%rip), %r15d
    00001393: 	jmp	.Ltmp2575 # Offset: 5011
    00001398: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2490:
    000013a0: 	movq	0x90(%rsp), %rdx
    000013a8: 	movq	%r14, %rsi
    000013ab: 	movl	$0x1, %edi
    000013b0: 	xorl	%eax, %eax
    000013b2: 	callq	__printf_chk@PLT # Offset: 5042
    000013b7: 	movl	iterations(%rip), %r15d
    000013be: 	jmp	.Ltmp2576 # Offset: 5054
    000013c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2506:
    000013c8: 	movq	0xb0(%rsp), %rdx
    000013d0: 	movq	%r13, %rsi
    000013d3: 	movl	$0x1, %edi
    000013d8: 	xorl	%eax, %eax
    000013da: 	callq	__printf_chk@PLT # Offset: 5082
    000013df: 	movl	iterations(%rip), %r14d
    000013e6: 	jmp	.Ltmp2577 # Offset: 5094
    000013eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2542:
    000013f0: 	movq	0x110(%rsp), %rdx
    000013f8: 	movq	%r13, %rsi
    000013fb: 	movl	$0x1, %edi
    00001400: 	xorl	%eax, %eax
    00001402: 	callq	__printf_chk@PLT # Offset: 5122
    00001407: 	movl	iterations(%rip), %r14d
    0000140e: 	jmp	.Ltmp2578 # Offset: 5134
    00001413: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2558:
    00001418: 	movq	0x150(%rsp), %rdx
    00001420: 	movq	%r13, %rsi
    00001423: 	movl	$0x1, %edi
    00001428: 	xorl	%eax, %eax
    0000142a: 	callq	__printf_chk@PLT # Offset: 5162
    0000142f: 	movl	iterations(%rip), %r14d
    00001436: 	jmp	.Ltmp2579 # Offset: 5174
    0000143b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2526:
    00001440: 	movq	0xf0(%rsp), %rdx
    00001448: 	movq	%r13, %rsi
    0000144b: 	movl	$0x1, %edi
    00001450: 	xorl	%eax, %eax
    00001452: 	callq	__printf_chk@PLT # Offset: 5202
    00001457: 	movl	iterations(%rip), %r14d
    0000145e: 	jmp	.Ltmp2580 # Offset: 5214
.Ltmp2502:
    00001463: 	testq	%r12, %r12
    00001466: 	jne	.Ltmp2581 # Offset: 5222
    0000146c: 	movq	0x20(%rsp), %rax
    00001471: 	jmp	.Ltmp2582 # Offset: 5233
.Ltmp2538:
    00001476: 	testq	%r12, %r12
    00001479: 	jne	.Ltmp2583 # Offset: 5241
    0000147f: 	movq	0x20(%rsp), %rax
    00001484: 	jmp	.Ltmp2584 # Offset: 5252
.Ltmp2553:
    00001489: 	testq	%r12, %r12
    0000148c: 	jne	.Ltmp2585 # Offset: 5260
    00001492: 	movq	%rbx, %rax
    00001495: 	jmp	.Ltmp2586 # Offset: 5269
.Ltmp2522:
    0000149a: 	testq	%r12, %r12
    0000149d: 	jne	.Ltmp2587 # Offset: 5277
    000014a3: 	movq	0x20(%rsp), %rax
    000014a8: 	jmp	.Ltmp2588 # Offset: 5288
.Ltmp2517:
    000014ad: 	testq	%r12, %r12
    000014b0: 	jne	.Ltmp2589 # Offset: 5296
    000014b6: 	movq	%rbx, %rax
    000014b9: 	jmp	.Ltmp2590 # Offset: 5305
.Ltmp2486:
    000014be: 	testq	%r12, %r12
    000014c1: 	jne	.Ltmp2591 # Offset: 5313
    000014c7: 	movq	%r13, %rax
    000014ca: 	jmp	.Ltmp2592 # Offset: 5322
.Ltmp2569:
    000014cf: 	testq	%r12, %r12
    000014d2: 	jne	.Ltmp2593 # Offset: 5330
    000014d8: 	movq	0x18(%rsp), %rax
    000014dd: 	jmp	.Ltmp2594 # Offset: 5341
.Ltmp2568:
    000014e2: 	movq	%r15, %rdi
    000014e5: 	leaq	0x68(%rsp), %rsi
    000014ea: 	xorl	%edx, %edx
    000014ec: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5356
    000014f1: 	movq	%rax, 0x150(%rsp)
    000014f9: 	movq	%rax, %rdi
    000014fc: 	movq	0x68(%rsp), %rax
    00001501: 	movq	%rax, 0x160(%rsp)
.Ltmp2624:
    00001509: 	movq	%r12, %rdx
    0000150c: 	movq	%r13, %rsi
    0000150f: 	callq	memcpy@PLT # Offset: 5391
    00001514: 	movq	0x68(%rsp), %r12
    00001519: 	movq	0x150(%rsp), %rax
    00001521: 	jmp	.Ltmp2594 # Offset: 5409
.Ltmp2516:
    00001526: 	leaq	0xd0(%rsp), %rdi
    0000152e: 	leaq	0x68(%rsp), %rsi
    00001533: 	xorl	%edx, %edx
    00001535: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5429
    0000153a: 	movq	%rax, 0xd0(%rsp)
    00001542: 	movq	%rax, %rdi
    00001545: 	movq	0x68(%rsp), %rax
    0000154a: 	movq	%rax, 0xe0(%rsp)
.Ltmp2622:
    00001552: 	movq	%r12, %rdx
    00001555: 	movq	%r13, %rsi
    00001558: 	callq	memcpy@PLT # Offset: 5464
    0000155d: 	movq	0x68(%rsp), %r12
    00001562: 	movq	0xd0(%rsp), %rax
    0000156a: 	jmp	.Ltmp2590 # Offset: 5482
.Ltmp2485:
    0000156f: 	leaq	0x90(%rsp), %rdi
    00001577: 	leaq	0x68(%rsp), %rsi
    0000157c: 	xorl	%edx, %edx
    0000157e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5502
    00001583: 	movq	%rax, 0x90(%rsp)
    0000158b: 	movq	%rax, %rdi
    0000158e: 	movq	0x68(%rsp), %rax
    00001593: 	movq	%rax, 0xa0(%rsp)
.Ltmp2623:
    0000159b: 	movq	%r12, %rdx
    0000159e: 	movq	%r14, %rsi
    000015a1: 	callq	memcpy@PLT # Offset: 5537
    000015a6: 	movq	0x68(%rsp), %r12
    000015ab: 	movq	0x90(%rsp), %rax
    000015b3: 	jmp	.Ltmp2592 # Offset: 5555
.Ltmp2470:
    000015b8: 	leaq	0x70(%rsp), %rdi
    000015bd: 	leaq	0x68(%rsp), %rsi
    000015c2: 	xorl	%edx, %edx
    000015c4: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5572
    000015c9: 	movq	%rax, 0x70(%rsp)
    000015ce: 	movq	%rax, %rdi
    000015d1: 	movq	0x68(%rsp), %rax
    000015d6: 	movq	%rax, 0x80(%rsp)
.Ltmp2617:
    000015de: 	movq	%r12, %rdx
    000015e1: 	movq	%r14, %rsi
    000015e4: 	callq	memcpy@PLT # Offset: 5604
    000015e9: 	movq	0x68(%rsp), %r12
    000015ee: 	movq	0x70(%rsp), %rax
    000015f3: 	jmp	.Ltmp2574 # Offset: 5619
.Ltmp2501:
    000015f8: 	leaq	0xb0(%rsp), %rdi
    00001600: 	leaq	0x68(%rsp), %rsi
    00001605: 	xorl	%edx, %edx
    00001607: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5639
    0000160c: 	movq	%rax, 0xb0(%rsp)
    00001614: 	movq	%rax, %rdi
    00001617: 	movq	0x68(%rsp), %rax
    0000161c: 	movq	%rax, 0xc0(%rsp)
.Ltmp2618:
    00001624: 	movq	%r12, %rdx
    00001627: 	movq	%r13, %rsi
    0000162a: 	callq	memcpy@PLT # Offset: 5674
    0000162f: 	movq	0x68(%rsp), %r12
    00001634: 	movq	0xb0(%rsp), %rax
    0000163c: 	jmp	.Ltmp2582 # Offset: 5692
.Ltmp2552:
    00001641: 	leaq	0x130(%rsp), %rdi
    00001649: 	leaq	0x68(%rsp), %rsi
    0000164e: 	xorl	%edx, %edx
    00001650: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5712
    00001655: 	movq	%rax, 0x130(%rsp)
    0000165d: 	movq	%rax, %rdi
    00001660: 	movq	0x68(%rsp), %rax
    00001665: 	movq	%rax, 0x140(%rsp)
.Ltmp2620:
    0000166d: 	movq	%r12, %rdx
    00001670: 	movq	%r13, %rsi
    00001673: 	callq	memcpy@PLT # Offset: 5747
    00001678: 	movq	0x68(%rsp), %r12
    0000167d: 	movq	0x130(%rsp), %rax
    00001685: 	jmp	.Ltmp2586 # Offset: 5765
.Ltmp2521:
    0000168a: 	leaq	0xf0(%rsp), %rdi
    00001692: 	leaq	0x68(%rsp), %rsi
    00001697: 	xorl	%edx, %edx
    00001699: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5785
    0000169e: 	movq	%rax, 0xf0(%rsp)
    000016a6: 	movq	%rax, %rdi
    000016a9: 	movq	0x68(%rsp), %rax
    000016ae: 	movq	%rax, 0x100(%rsp)
.Ltmp2621:
    000016b6: 	movq	%r12, %rdx
    000016b9: 	movq	%r13, %rsi
    000016bc: 	callq	memcpy@PLT # Offset: 5820
    000016c1: 	movq	0x68(%rsp), %r12
    000016c6: 	movq	0xf0(%rsp), %rax
    000016ce: 	jmp	.Ltmp2588 # Offset: 5838
.Ltmp2537:
    000016d3: 	leaq	0x110(%rsp), %rdi
    000016db: 	leaq	0x68(%rsp), %rsi
    000016e0: 	xorl	%edx, %edx
    000016e2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5858
    000016e7: 	movq	%rax, 0x110(%rsp)
    000016ef: 	movq	%rax, %rdi
    000016f2: 	movq	0x68(%rsp), %rax
    000016f7: 	movq	%rax, 0x120(%rsp)
.Ltmp2619:
    000016ff: 	movq	%r12, %rdx
    00001702: 	movq	%r13, %rsi
    00001705: 	callq	memcpy@PLT # Offset: 5893
    0000170a: 	movq	0x68(%rsp), %r12
    0000170f: 	movq	0x110(%rsp), %rax
    00001717: 	jmp	.Ltmp2584 # Offset: 5911
.Ltmp2533:
    0000171c: 	movq	-0x8(%rdx), %rax
    00001720: 	addq	$0x200, %rax
    00001726: 	jmp	.Ltmp2595 # Offset: 5926
.Ltmp2565:
    0000172b: 	movq	-0x8(%rdx), %rax
    0000172f: 	addq	$0x200, %rax
    00001735: 	jmp	.Ltmp2596 # Offset: 5941
.Ltmp2513:
    0000173a: 	movq	-0x8(%rdx), %rax
    0000173e: 	addq	$0x200, %rax
    00001744: 	jmp	.Ltmp2597 # Offset: 5956
.Ltmp2482:
    00001749: 	movq	-0x8(%rdx), %rax
    0000174d: 	addq	$0x200, %rax
    00001753: 	jmp	.Ltmp2598 # Offset: 5971
.Ltmp2477:
    00001758: 	movq	0x18(%rsp), %rsi
    0000175d: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001764: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 5988
    00001769: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001770: 	jmp	.Ltmp2599 # Offset: 6000
.Ltmp2560:
    00001775: 	movq	%r15, %rsi
    00001778: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000177f: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6015
    00001784: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000178b: 	jmp	.Ltmp2600 # Offset: 6027
.Ltmp2528:
    00001790: 	movq	0x28(%rsp), %rsi
    00001795: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000179c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6044
    000017a1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000017a8: 	jmp	.Ltmp2601 # Offset: 6056
.Ltmp2492:
    000017ad: 	movq	0x18(%rsp), %rsi
    000017b2: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000017b9: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6073
    000017be: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000017c5: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000017cc: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000017d3: 	jne	.Ltmp2602 # Offset: 6099
.Ltmp2497:
    000017d9: 	movq	-0x8(%rdx), %rax
    000017dd: 	addq	$0x200, %rax
    000017e3: 	jmp	.Ltmp2602 # Offset: 6115
.Ltmp2544:
    000017e8: 	movq	0x28(%rsp), %rsi
    000017ed: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000017f4: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6132
    000017f9: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001800: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00001807: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000180e: 	jne	.Ltmp2603 # Offset: 6158
.Ltmp2549:
    00001814: 	movq	-0x8(%rdx), %rax
    00001818: 	addq	$0x200, %rax
    0000181e: 	jmp	.Ltmp2603 # Offset: 6174
.Ltmp2508:
    00001823: 	movq	0x28(%rsp), %rsi
    00001828: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000182f: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6191
    00001834: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000183b: 	jmp	.Ltmp2604 # Offset: 6203
.Ltmp2548:
    00001840: 	testq	%r12, %r12
    00001843: 	je	.Ltmp2605 # Offset: 6211
    00001849: 	jmp	.Ltmp2606 # Offset: 6217
    0000184e: 	nop # Size: 2
.Ltmp2564:
    00001850: 	testq	%r12, %r12
    00001853: 	je	.Ltmp2607 # Offset: 6227
    00001859: 	jmp	.Ltmp2608 # Offset: 6233
    0000185e: 	nop # Size: 2
.Ltmp2532:
    00001860: 	testq	%r12, %r12
    00001863: 	je	.Ltmp2609 # Offset: 6243
    00001869: 	jmp	.Ltmp2610 # Offset: 6249
    0000186e: 	nop # Size: 2
.Ltmp2481:
    00001870: 	testq	%r12, %r12
    00001873: 	je	.Ltmp2611 # Offset: 6259
    00001879: 	jmp	.Ltmp2612 # Offset: 6265
    0000187e: 	nop # Size: 2
.Ltmp2496:
    00001880: 	testq	%r12, %r12
    00001883: 	je	.Ltmp2613 # Offset: 6275
    00001889: 	jmp	.Ltmp2614 # Offset: 6281
    0000188e: 	nop # Size: 2
.Ltmp2512:
    00001890: 	testq	%r12, %r12
    00001893: 	je	.Ltmp2615 # Offset: 6291
    00001899: 	jmp	.Ltmp2616 # Offset: 6297
    0000189b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2511:
    000018a0: 	leaq	0x68(%rsp), %rsi
    000018a5: 	xorl	%edx, %edx
    000018a7: 	movq	%rbx, %rdi
    000018aa: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6314
    000018af: 	movq	%rax, (%rbx)
    000018b2: 	movq	%rax, %rdi
    000018b5: 	movq	0x68(%rsp), %rax
    000018ba: 	movq	%rax, 0x10(%rbx)
.Ltmp2616:
    000018be: 	movq	%r12, %rdx
    000018c1: 	movq	%r13, %rsi
    000018c4: 	callq	memcpy@PLT # Offset: 6340
    000018c9: 	movq	0x68(%rsp), %r12
    000018ce: 	movq	(%rbx), %rdi
    000018d1: 	jmp	.Ltmp2615 # Offset: 6353
.Ltmp2563:
    000018d6: 	leaq	0x68(%rsp), %rsi
    000018db: 	xorl	%edx, %edx
    000018dd: 	movq	%rbx, %rdi
    000018e0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6368
    000018e5: 	movq	%rax, (%rbx)
    000018e8: 	movq	%rax, %rdi
    000018eb: 	movq	0x68(%rsp), %rax
    000018f0: 	movq	%rax, 0x10(%rbx)
.Ltmp2608:
    000018f4: 	movq	%r12, %rdx
    000018f7: 	movq	%r13, %rsi
    000018fa: 	callq	memcpy@PLT # Offset: 6394
    000018ff: 	movq	0x68(%rsp), %r12
    00001904: 	movq	(%rbx), %rdi
    00001907: 	jmp	.Ltmp2607 # Offset: 6407
.Ltmp2547:
    0000190c: 	leaq	0x68(%rsp), %rsi
    00001911: 	xorl	%edx, %edx
    00001913: 	movq	%rbx, %rdi
    00001916: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6422
    0000191b: 	movq	%rax, (%rbx)
    0000191e: 	movq	%rax, %rdi
    00001921: 	movq	0x68(%rsp), %rax
    00001926: 	movq	%rax, 0x10(%rbx)
.Ltmp2606:
    0000192a: 	movq	%r12, %rdx
    0000192d: 	movq	%r13, %rsi
    00001930: 	callq	memcpy@PLT # Offset: 6448
    00001935: 	movq	0x68(%rsp), %r12
    0000193a: 	movq	(%rbx), %rdi
    0000193d: 	jmp	.Ltmp2605 # Offset: 6461
.Ltmp2531:
    00001942: 	leaq	0x68(%rsp), %rsi
    00001947: 	xorl	%edx, %edx
    00001949: 	movq	%rbx, %rdi
    0000194c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6476
    00001951: 	movq	%rax, (%rbx)
    00001954: 	movq	%rax, %rdi
    00001957: 	movq	0x68(%rsp), %rax
    0000195c: 	movq	%rax, 0x10(%rbx)
.Ltmp2610:
    00001960: 	movq	%r12, %rdx
    00001963: 	movq	%r13, %rsi
    00001966: 	callq	memcpy@PLT # Offset: 6502
    0000196b: 	movq	0x68(%rsp), %r12
    00001970: 	movq	(%rbx), %rdi
    00001973: 	jmp	.Ltmp2609 # Offset: 6515
.Ltmp2480:
    00001978: 	leaq	0x68(%rsp), %rsi
    0000197d: 	xorl	%edx, %edx
    0000197f: 	movq	%rbx, %rdi
    00001982: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6530
    00001987: 	movq	%rax, (%rbx)
    0000198a: 	movq	%rax, %rdi
    0000198d: 	movq	0x68(%rsp), %rax
    00001992: 	movq	%rax, 0x10(%rbx)
.Ltmp2612:
    00001996: 	movq	%r12, %rdx
    00001999: 	movq	%r14, %rsi
    0000199c: 	callq	memcpy@PLT # Offset: 6556
    000019a1: 	movq	0x68(%rsp), %r12
    000019a6: 	movq	(%rbx), %rdi
    000019a9: 	jmp	.Ltmp2611 # Offset: 6569
.Ltmp2495:
    000019ae: 	leaq	0x68(%rsp), %rsi
    000019b3: 	xorl	%edx, %edx
    000019b5: 	movq	%rbx, %rdi
    000019b8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6584
    000019bd: 	movq	%rax, (%rbx)
    000019c0: 	movq	%rax, %rdi
    000019c3: 	movq	0x68(%rsp), %rax
    000019c8: 	movq	%rax, 0x10(%rbx)
.Ltmp2614:
    000019cc: 	movq	%r12, %rdx
    000019cf: 	movq	%r14, %rsi
    000019d2: 	callq	memcpy@PLT # Offset: 6610
    000019d7: 	movq	0x68(%rsp), %r12
    000019dc: 	movq	(%rbx), %rdi
    000019df: 	jmp	.Ltmp2613 # Offset: 6623
.Ltmp2472:
    000019e4: 	leaq	DATAat0x4d194(%rip), %rdi
    000019eb: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6635
.Ltmp2479:
    000019f0: 	leaq	DATAat0x4d018(%rip), %rdi
    000019f7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6647
.Ltmp2487:
    000019fc: 	leaq	DATAat0x4d194(%rip), %rdi
    00001a03: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6659
.Ltmp2494:
    00001a08: 	leaq	DATAat0x4d018(%rip), %rdi
    00001a0f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6671
.Ltmp2503:
    00001a14: 	leaq	DATAat0x4d194(%rip), %rdi
    00001a1b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6683
.Ltmp2510:
    00001a20: 	leaq	DATAat0x4d018(%rip), %rdi
    00001a27: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6695
.Ltmp2518:
    00001a2c: 	leaq	DATAat0x4d194(%rip), %rdi
    00001a33: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6707
.Ltmp2523:
    00001a38: 	leaq	DATAat0x4d194(%rip), %rdi
    00001a3f: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6719
.Ltmp2530:
    00001a44: 	leaq	DATAat0x4d018(%rip), %rdi
    00001a4b: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6731
.Ltmp2539:
    00001a50: 	leaq	DATAat0x4d194(%rip), %rdi
    00001a57: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6743
.Ltmp2546:
    00001a5c: 	leaq	DATAat0x4d018(%rip), %rdi
    00001a63: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6755
.Ltmp2554:
    00001a68: 	leaq	DATAat0x4d194(%rip), %rdi
    00001a6f: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6767
.Ltmp2562:
    00001a74: 	leaq	DATAat0x4d018(%rip), %rdi
    00001a7b: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6779
.Ltmp2570:
    00001a80: 	leaq	DATAat0x4d194(%rip), %rdi
    00001a87: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6791
.Ltmp2572:
    00001a8c: 	callq	__stack_chk_fail@PLT # Offset: 6796
.Ltmp2573:
    00001a91: 	movq	%r13, %rdi
    00001a94: 	jmp	.Ltmp2617 # Offset: 6804
.Ltmp2581:
    00001a99: 	movq	0x20(%rsp), %rdi
    00001a9e: 	jmp	.Ltmp2618 # Offset: 6814
.Ltmp2583:
    00001aa3: 	movq	0x20(%rsp), %rdi
    00001aa8: 	jmp	.Ltmp2619 # Offset: 6824
.Ltmp2585:
    00001aad: 	movq	%rbx, %rdi
    00001ab0: 	jmp	.Ltmp2620 # Offset: 6832
.Ltmp2587:
    00001ab5: 	movq	0x20(%rsp), %rdi
    00001aba: 	jmp	.Ltmp2621 # Offset: 6842
.Ltmp2589:
    00001abf: 	movq	%rbx, %rdi
    00001ac2: 	jmp	.Ltmp2622 # Offset: 6850
.Ltmp2591:
    00001ac7: 	movq	%r13, %rdi
    00001aca: 	jmp	.Ltmp2623 # Offset: 6858
.Ltmp2593:
    00001acf: 	movq	0x18(%rsp), %rdi
    00001ad4: 	jmp	.Ltmp2624 # Offset: 6868
.Ltmp2469:
    00001ad9: 	leaq	DATAat0x4d018(%rip), %rdi
    00001ae0: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6880
    00001ae5: 	endbr64
.Ltmp2638:
    00001ae9: 	movq	%rax, %rbp
    00001aec: 	jmp	.Ltmp2625 # Offset: 6892
    00001aee: 	endbr64
.Ltmp2642:
    00001af2: 	movq	%rax, %rbp
    00001af5: 	jmp	.Ltmp2626 # Offset: 6901
    00001af7: 	endbr64
.Ltmp2629:
    00001afb: 	movq	%rax, %rbp
    00001afe: 	jmp	.Ltmp2627 # Offset: 6910
.Ltmp2625:
    00001b00: 	movq	0x70(%rsp), %rdi
    00001b05: 	cmpq	%r13, %rdi
    00001b08: 	je	.Ltmp2628 # Offset: 6920
    00001b0a: 	movq	0x80(%rsp), %rax
    00001b12: 	leaq	0x1(%rax), %rsi
    00001b16: 	callq	_ZdlPvm@PLT # Offset: 6934
    00001b1b: 	jmp	.Ltmp2628 # Offset: 6939
.Ltmp2626:
    00001b1d: 	movq	0x130(%rsp), %rdi
    00001b25: 	cmpq	%rbx, %rdi
    00001b28: 	je	.Ltmp2628 # Offset: 6952
    00001b2a: 	movq	0x140(%rsp), %rax
    00001b32: 	leaq	0x1(%rax), %rsi
    00001b36: 	callq	_ZdlPvm@PLT # Offset: 6966
.Ltmp2628:
    00001b3b: 	movq	%rbp, %rdi
    00001b3e: 	callq	_Unwind_Resume@PLT # Offset: 6974
.Ltmp2627:
    00001b43: 	movq	0x150(%rsp), %rdi
    00001b4b: 	cmpq	0x18(%rsp), %rdi
    00001b50: 	je	.Ltmp2628 # Offset: 6992
.Ltmp2633:
    00001b52: 	movq	0x160(%rsp), %rax
    00001b5a: 	leaq	0x1(%rax), %rsi
    00001b5e: 	callq	_ZdlPvm@PLT # Offset: 7006
    00001b63: 	jmp	.Ltmp2628 # Offset: 7011
    00001b65: 	endbr64
    00001b69: 	jmp	.Ltmp2629 # Offset: 7017
    00001b6b: 	endbr64
    00001b6f: 	jmp	.Ltmp2629 # Offset: 7023
    00001b71: 	endbr64
.Ltmp2631:
    00001b75: 	movq	%rax, %rbp
    00001b78: 	jmp	.Ltmp2630 # Offset: 7032
    00001b7a: 	endbr64
    00001b7e: 	jmp	.Ltmp2629 # Offset: 7038
    00001b83: 	endbr64
    00001b87: 	jmp	.Ltmp2631 # Offset: 7047
    00001b89: 	endbr64
.Ltmp2639:
    00001b8d: 	movq	%rax, %rbp
    00001b90: 	jmp	.Ltmp2632 # Offset: 7056
    00001b92: 	endbr64
    00001b96: 	movq	%rax, %rbp
    00001b99: 	movq	0x150(%rsp), %rdi
    00001ba1: 	leaq	0x160(%rsp), %rax
    00001ba9: 	cmpq	%rax, %rdi
    00001bac: 	jne	.Ltmp2633 # Offset: 7084
    00001bae: 	jmp	.Ltmp2628 # Offset: 7086
.Ltmp2632:
    00001bb0: 	movq	0x90(%rsp), %rdi
    00001bb8: 	cmpq	%r13, %rdi
    00001bbb: 	je	.Ltmp2628 # Offset: 7099
    00001bc1: 	movq	0xa0(%rsp), %rax
    00001bc9: 	leaq	0x1(%rax), %rsi
    00001bcd: 	callq	_ZdlPvm@PLT # Offset: 7117
    00001bd2: 	jmp	.Ltmp2628 # Offset: 7122
    00001bd7: 	endbr64
.Ltmp2637:
    00001bdb: 	movq	%rax, %rbp
    00001bde: 	jmp	.Ltmp2634 # Offset: 7134
.Ltmp2630:
    00001be0: 	movq	0xf0(%rsp), %rdi
    00001be8: 	cmpq	0x20(%rsp), %rdi
    00001bed: 	je	.Ltmp2628 # Offset: 7149
    00001bf3: 	movq	0x100(%rsp), %rax
    00001bfb: 	leaq	0x1(%rax), %rsi
    00001bff: 	callq	_ZdlPvm@PLT # Offset: 7167
    00001c04: 	jmp	.Ltmp2628 # Offset: 7172
.Ltmp2634:
    00001c09: 	movq	0x110(%rsp), %rdi
    00001c11: 	cmpq	0x20(%rsp), %rdi
    00001c16: 	je	.Ltmp2628 # Offset: 7190
    00001c1c: 	movq	0x120(%rsp), %rax
    00001c24: 	leaq	0x1(%rax), %rsi
    00001c28: 	callq	_ZdlPvm@PLT # Offset: 7208
    00001c2d: 	jmp	.Ltmp2628 # Offset: 7213
    00001c32: 	endbr64
.Ltmp2641:
    00001c36: 	movq	%rax, %rbp
    00001c39: 	jmp	.Ltmp2635 # Offset: 7225
    00001c3b: 	endbr64
.Ltmp2640:
    00001c3f: 	movq	%rax, %rbp
    00001c42: 	jmp	.Ltmp2636 # Offset: 7234
    00001c44: 	endbr64
    00001c48: 	jmp	.Ltmp2637 # Offset: 7240
    00001c4a: 	endbr64
    00001c4e: 	jmp	.Ltmp2638 # Offset: 7246
    00001c53: 	endbr64
    00001c57: 	jmp	.Ltmp2639 # Offset: 7255
    00001c5c: 	endbr64
    00001c60: 	jmp	.Ltmp2640 # Offset: 7264
    00001c62: 	endbr64
    00001c66: 	jmp	.Ltmp2641 # Offset: 7270
    00001c68: 	endbr64
    00001c6c: 	jmp	.Ltmp2642 # Offset: 7276
.Ltmp2635:
    00001c71: 	movq	0xb0(%rsp), %rdi
    00001c79: 	cmpq	0x20(%rsp), %rdi
    00001c7e: 	je	.Ltmp2628 # Offset: 7294
    00001c84: 	movq	0xc0(%rsp), %rax
    00001c8c: 	leaq	0x1(%rax), %rsi
    00001c90: 	callq	_ZdlPvm@PLT # Offset: 7312
    00001c95: 	jmp	.Ltmp2628 # Offset: 7317
.Ltmp2636:
    00001c9a: 	movq	0xd0(%rsp), %rdi
    00001ca2: 	cmpq	%rbx, %rdi
    00001ca5: 	je	.Ltmp2628 # Offset: 7333
    00001cab: 	movq	0xe0(%rsp), %rax
    00001cb3: 	leaq	0x1(%rax), %rsi
    00001cb7: 	callq	_ZdlPvm@PLT # Offset: 7351
    00001cbc: 	jmp	.Ltmp2628 # Offset: 7356
DWARF CFI Instructions:
    <empty>
End of Function "_Z16TestUnrolledTypeIhLi8EEvPT_S0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z16TestUnrolledTypeIjLi8EEvPT_S0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 178
  State       : disassembled
  Address     : 0x26f20
  Size        : 0x183a
  MaxSize     : 0x1840
  Offset      : 0x26f20
  Section     : .text
  Orc Section : .local.text._Z16TestUnrolledTypeIjLi8EEvPT_S0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0177:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdx, %r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rdi, %rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x118, %rsp
    0000001e: 	movq	(%rdx), %r14
    00000021: 	movq	0x8(%rdx), %r12
    00000025: 	movq	%fs:0x28, %rax
    0000002e: 	movq	%rax, 0x108(%rsp)
    00000036: 	xorl	%eax, %eax
    00000038: 	leaq	0x30(%rsp), %rax
    0000003d: 	movq	%rax, (%rsp)
    00000041: 	movq	%rax, 0x20(%rsp)
    00000046: 	movq	%r14, %rax
    00000049: 	addq	%r12, %rax
    0000004c: 	je	.Ltmp2643 # Offset: 76
    0000004e: 	testq	%r14, %r14
    00000051: 	je	.Ltmp2644 # Offset: 81
.Ltmp2643:
    00000057: 	movq	%r12, 0x18(%rsp)
    0000005c: 	cmpq	$0xf, %r12
    00000060: 	ja	.Ltmp2645 # Offset: 96
    00000066: 	cmpq	$0x1, %r12
    0000006a: 	jne	.Ltmp2646 # Offset: 106
    00000070: 	movzbl	(%r14), %eax
    00000074: 	movb	%al, 0x30(%rsp)
    00000078: 	movq	(%rsp), %rax
.Ltmp2745:
    0000007c: 	movq	%r12, 0x28(%rsp)
    00000081: 	movb	$0x0, (%rax,%r12)
    00000086: 	movabsq	$0x3fffffffffffffff, %rax
    00000090: 	subq	0x28(%rsp), %rax
    00000095: 	cmpq	$0x7, %rax
    00000099: 	jbe	.Ltmp2647 # Offset: 153
    0000009f: 	leaq	0x20(%rsp), %rax
    000000a4: 	movl	$0x8, %edx
    000000a9: 	leaq	DATAat0x4d1e4(%rip), %rsi
    000000b0: 	movq	%rax, %rdi
    000000b3: 	movq	%rax, 0x8(%rsp)
    000000b8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 184
    000000bd: 	callq	clock@PLT # Offset: 189
    000000c2: 	movl	iterations(%rip), %ecx
    000000c8: 	xorl	%r12d, %r12d
    000000cb: 	leaq	0x7cf0(%rbp), %rbx
    000000d2: 	movq	%rax, start_time(%rip)
    000000d9: 	leaq	DATAat0x4d004(%rip), %r14
    000000e0: 	testl	%ecx, %ecx
    000000e2: 	jle	.Ltmp2648 # Offset: 226
    000000e8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2651:
    000000f0: 	movl	(%rbp), %edx
    000000f3: 	movq	%rbp, %rax
    000000f6: 	subl	0x4(%rbp), %edx
    000000f9: 	pxor	%xmm0, %xmm0
    000000fd: 	nopl	(%rax) # Size: 3
.Ltmp2649:
    00000100: 	movdqu	(%rax), %xmm1
    00000104: 	movdqu	0x4(%rax), %xmm7
    00000109: 	addq	$0x10, %rax
    0000010d: 	psubd	%xmm7, %xmm1
    00000111: 	pslld	$0x3, %xmm1
    00000116: 	paddd	%xmm1, %xmm0
    0000011a: 	cmpq	%rax, %rbx
    0000011d: 	jne	.Ltmp2649 # Offset: 285
    0000011f: 	movdqa	%xmm0, %xmm1
    00000123: 	subl	0x7cfc(%rbp), %edx
    00000129: 	movq	0x7cf4(%rbp), %xmm2
    00000131: 	psrldq	$0x8, %xmm1
    00000136: 	addl	0x7cf8(%rbp), %edx
    0000013c: 	paddd	%xmm1, %xmm0
    00000140: 	movq	0x7cf0(%rbp), %xmm1
    00000148: 	psubd	%xmm2, %xmm1
    0000014c: 	pslld	$0x3, %xmm1
    00000151: 	movd	%xmm1, %esi
    00000155: 	pshufd	$0xe5, %xmm1, %xmm3
    0000015a: 	movdqa	%xmm0, %xmm1
    0000015e: 	movd	%xmm3, %eax
    00000162: 	psrldq	$0x4, %xmm1
    00000167: 	addl	%esi, %eax
    00000169: 	paddd	%xmm1, %xmm0
    0000016d: 	leal	(%rax,%rdx,8), %edx
    00000170: 	movd	%xmm0, %eax
    00000174: 	addl	%eax, %edx
    00000176: 	jne	.Ltmp2650 # Offset: 374
.Ltmp2746:
    0000017c: 	addl	$0x1, %r12d
    00000180: 	cmpl	%ecx, %r12d
    00000183: 	jl	.Ltmp2651 # Offset: 387
.Ltmp2648:
    00000189: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000190: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000197: 	subq	$0x20, %rax
    0000019b: 	cmpq	%rax, %rbx
    0000019e: 	je	.Ltmp2652 # Offset: 414
    000001a4: 	leaq	0x10(%rbx), %rdi
    000001a8: 	movq	0x28(%rsp), %r12
    000001ad: 	movq	%rdi, (%rbx)
    000001b0: 	movq	0x20(%rsp), %r14
    000001b5: 	movq	%r14, %rax
    000001b8: 	addq	%r12, %rax
    000001bb: 	je	.Ltmp2653 # Offset: 443
    000001bd: 	testq	%r14, %r14
    000001c0: 	je	.Ltmp2654 # Offset: 448
.Ltmp2653:
    000001c6: 	movq	%r12, 0x18(%rsp)
    000001cb: 	cmpq	$0xf, %r12
    000001cf: 	ja	.Ltmp2655 # Offset: 463
    000001d5: 	cmpq	$0x1, %r12
    000001d9: 	jne	.Ltmp2656 # Offset: 473
    000001df: 	movzbl	(%r14), %eax
    000001e3: 	movb	%al, 0x10(%rbx)
.Ltmp2779:
    000001e6: 	movq	%r12, 0x8(%rbx)
    000001ea: 	movb	$0x0, (%rdi,%r12)
    000001ef: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001f6: 	addq	$0x20, %rax
    000001fa: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp2768:
    00000201: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000208: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000020f: 	je	.Ltmp2657 # Offset: 527
.Ltmp2767:
    00000215: 	movq	-0x20(%rax), %r12
    00000219: 	callq	clock@PLT # Offset: 537
    0000021e: 	pxor	%xmm0, %xmm0
    00000222: 	movq	%rax, end_time(%rip)
    00000229: 	movq	%r12, %rdi
    0000022c: 	subq	start_time(%rip), %rax
    00000233: 	cvtsi2sd	%rax, %xmm0
    00000238: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000240: 	callq	_Z13record_resultdPKc # Offset: 576
    00000245: 	movq	0x20(%rsp), %rdi
    0000024a: 	cmpq	(%rsp), %rdi
    0000024e: 	je	.Ltmp2658 # Offset: 590
    00000250: 	movq	0x30(%rsp), %rax
    00000255: 	leaq	0x1(%rax), %rsi
    00000259: 	callq	_ZdlPvm@PLT # Offset: 601
.Ltmp2658:
    0000025e: 	movq	(%r13), %r14
    00000262: 	leaq	0x50(%rsp), %rax
    00000267: 	movq	0x8(%r13), %r12
    0000026b: 	movq	%rax, (%rsp)
    0000026f: 	movq	%rax, 0x40(%rsp)
    00000274: 	movq	%r14, %rax
    00000277: 	addq	%r12, %rax
    0000027a: 	je	.Ltmp2659 # Offset: 634
    0000027c: 	testq	%r14, %r14
    0000027f: 	je	.Ltmp2644 # Offset: 639
.Ltmp2659:
    00000285: 	movq	%r12, 0x18(%rsp)
    0000028a: 	cmpq	$0xf, %r12
    0000028e: 	ja	.Ltmp2660 # Offset: 654
    00000294: 	cmpq	$0x1, %r12
    00000298: 	jne	.Ltmp2661 # Offset: 664
    0000029e: 	movzbl	(%r14), %eax
    000002a2: 	movb	%al, 0x50(%rsp)
    000002a6: 	movq	(%rsp), %rax
.Ltmp2763:
    000002aa: 	movq	%r12, 0x48(%rsp)
    000002af: 	movb	$0x0, (%rax,%r12)
    000002b4: 	movabsq	$0x3fffffffffffffff, %rax
    000002be: 	subq	0x48(%rsp), %rax
    000002c3: 	cmpq	$0xc, %rax
    000002c7: 	jbe	.Ltmp2662 # Offset: 711
    000002cd: 	leaq	0x40(%rsp), %rax
    000002d2: 	movl	$0xd, %edx
    000002d7: 	leaq	DATAat0x4d1f1(%rip), %rsi
    000002de: 	movq	%rax, %rdi
    000002e1: 	movq	%rax, 0x8(%rsp)
    000002e6: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 742
    000002eb: 	callq	clock@PLT # Offset: 747
    000002f0: 	movl	iterations(%rip), %ecx
    000002f6: 	xorl	%r12d, %r12d
    000002f9: 	leaq	0x7cf0(%rbp), %rbx
    00000300: 	movq	%rax, start_time(%rip)
    00000307: 	leaq	DATAat0x4d004(%rip), %r14
    0000030e: 	testl	%ecx, %ecx
    00000310: 	jle	.Ltmp2663 # Offset: 784
    00000316: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2666:
    00000320: 	movl	(%rbp), %edx
    00000323: 	movq	%rbp, %rax
    00000326: 	subl	0x4(%rbp), %edx
    00000329: 	pxor	%xmm0, %xmm0
    0000032d: 	nopl	(%rax) # Size: 3
.Ltmp2664:
    00000330: 	movdqu	(%rax), %xmm1
    00000334: 	movdqu	0x4(%rax), %xmm5
    00000339: 	addq	$0x10, %rax
    0000033d: 	psubd	%xmm5, %xmm1
    00000341: 	pslld	$0x3, %xmm1
    00000346: 	paddd	%xmm1, %xmm0
    0000034a: 	cmpq	%rax, %rbx
    0000034d: 	jne	.Ltmp2664 # Offset: 845
    0000034f: 	movdqa	%xmm0, %xmm1
    00000353: 	subl	0x7cfc(%rbp), %edx
    00000359: 	movq	0x7cf4(%rbp), %xmm2
    00000361: 	psrldq	$0x8, %xmm1
    00000366: 	addl	0x7cf8(%rbp), %edx
    0000036c: 	paddd	%xmm1, %xmm0
    00000370: 	movq	0x7cf0(%rbp), %xmm1
    00000378: 	psubd	%xmm2, %xmm1
    0000037c: 	pslld	$0x3, %xmm1
    00000381: 	movd	%xmm1, %eax
    00000385: 	pshufd	$0xe5, %xmm1, %xmm4
    0000038a: 	movdqa	%xmm0, %xmm1
    0000038e: 	movd	%xmm4, %esi
    00000392: 	psrldq	$0x4, %xmm1
    00000397: 	addl	%esi, %eax
    00000399: 	paddd	%xmm1, %xmm0
    0000039d: 	leal	(%rax,%rdx,8), %edx
    000003a0: 	movd	%xmm0, %eax
    000003a4: 	addl	%eax, %edx
    000003a6: 	jne	.Ltmp2665 # Offset: 934
.Ltmp2747:
    000003ac: 	addl	$0x1, %r12d
    000003b0: 	cmpl	%ecx, %r12d
    000003b3: 	jl	.Ltmp2666 # Offset: 947
.Ltmp2663:
    000003b9: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000003c0: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000003c7: 	subq	$0x20, %rax
    000003cb: 	cmpq	%rax, %rbx
    000003ce: 	je	.Ltmp2667 # Offset: 974
    000003d4: 	leaq	0x10(%rbx), %rdi
    000003d8: 	movq	0x48(%rsp), %r12
    000003dd: 	movq	%rdi, (%rbx)
    000003e0: 	movq	0x40(%rsp), %r14
    000003e5: 	movq	%r14, %rax
    000003e8: 	addq	%r12, %rax
    000003eb: 	je	.Ltmp2668 # Offset: 1003
    000003ed: 	testq	%r14, %r14
    000003f0: 	je	.Ltmp2669 # Offset: 1008
.Ltmp2668:
    000003f6: 	movq	%r12, 0x18(%rsp)
    000003fb: 	cmpq	$0xf, %r12
    000003ff: 	ja	.Ltmp2670 # Offset: 1023
    00000405: 	cmpq	$0x1, %r12
    00000409: 	jne	.Ltmp2671 # Offset: 1033
    0000040f: 	movzbl	(%r14), %eax
    00000413: 	movb	%al, 0x10(%rbx)
.Ltmp2775:
    00000416: 	movq	%r12, 0x8(%rbx)
    0000041a: 	movb	$0x0, (%rdi,%r12)
    0000041f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000426: 	addq	$0x20, %rax
    0000042a: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp2773:
    00000431: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000438: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000043f: 	je	.Ltmp2672 # Offset: 1087
.Ltmp2765:
    00000445: 	movq	-0x20(%rax), %r12
    00000449: 	callq	clock@PLT # Offset: 1097
    0000044e: 	pxor	%xmm0, %xmm0
    00000452: 	movq	%rax, end_time(%rip)
    00000459: 	movq	%r12, %rdi
    0000045c: 	subq	start_time(%rip), %rax
    00000463: 	cvtsi2sd	%rax, %xmm0
    00000468: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000470: 	callq	_Z13record_resultdPKc # Offset: 1136
    00000475: 	movq	0x40(%rsp), %rdi
    0000047a: 	cmpq	(%rsp), %rdi
    0000047e: 	je	.Ltmp2673 # Offset: 1150
    00000480: 	movq	0x50(%rsp), %rax
    00000485: 	leaq	0x1(%rax), %rsi
    00000489: 	callq	_ZdlPvm@PLT # Offset: 1161
.Ltmp2673:
    0000048e: 	movq	(%r13), %r14
    00000492: 	movq	0x8(%r13), %r12
    00000496: 	leaq	0x70(%rsp), %rbx
    0000049b: 	movq	%rbx, 0x60(%rsp)
    000004a0: 	movq	%r14, %rax
    000004a3: 	addq	%r12, %rax
    000004a6: 	je	.Ltmp2674 # Offset: 1190
    000004a8: 	testq	%r14, %r14
    000004ab: 	je	.Ltmp2644 # Offset: 1195
.Ltmp2674:
    000004b1: 	movq	%r12, 0x18(%rsp)
    000004b6: 	cmpq	$0xf, %r12
    000004ba: 	ja	.Ltmp2675 # Offset: 1210
    000004c0: 	cmpq	$0x1, %r12
    000004c4: 	jne	.Ltmp2676 # Offset: 1220
    000004ca: 	movzbl	(%r14), %eax
    000004ce: 	movb	%al, 0x70(%rsp)
    000004d2: 	movq	%rbx, %rax
.Ltmp2757:
    000004d5: 	movq	%r12, 0x68(%rsp)
    000004da: 	movb	$0x0, (%rax,%r12)
    000004df: 	movabsq	$0x3fffffffffffffff, %rax
    000004e9: 	subq	0x68(%rsp), %rax
    000004ee: 	cmpq	$0x3, %rax
    000004f2: 	jbe	.Ltmp2677 # Offset: 1266
    000004f8: 	leaq	0x60(%rsp), %r12
    000004fd: 	movl	$0x4, %edx
    00000502: 	leaq	DATAat0x4d22b(%rip), %rsi
    00000509: 	movq	%r12, %rdi
    0000050c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1292
    00000511: 	movq	%r12, %rcx
    00000514: 	movl	%r15d, %edx
    00000517: 	movl	$0x1f40, %esi
    0000051c: 	movq	%rbp, %rdi
    0000051f: 	callq	_Z9test_CSENIj14custom_cse_addIjELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1311
    00000524: 	movq	0x60(%rsp), %rdi
    00000529: 	cmpq	%rbx, %rdi
    0000052c: 	je	.Ltmp2678 # Offset: 1324
    0000052e: 	movq	0x70(%rsp), %rax
    00000533: 	leaq	0x1(%rax), %rsi
    00000537: 	callq	_ZdlPvm@PLT # Offset: 1335
.Ltmp2678:
    0000053c: 	movq	(%r13), %r14
    00000540: 	leaq	0x90(%rsp), %rax
    00000548: 	movq	0x8(%r13), %r12
    0000054c: 	movq	%rax, (%rsp)
    00000550: 	movq	%rax, 0x80(%rsp)
    00000558: 	movq	%r14, %rax
    0000055b: 	addq	%r12, %rax
    0000055e: 	je	.Ltmp2679 # Offset: 1374
    00000560: 	testq	%r14, %r14
    00000563: 	je	.Ltmp2644 # Offset: 1379
.Ltmp2679:
    00000569: 	movq	%r12, 0x18(%rsp)
    0000056e: 	cmpq	$0xf, %r12
    00000572: 	ja	.Ltmp2680 # Offset: 1394
    00000578: 	cmpq	$0x1, %r12
    0000057c: 	jne	.Ltmp2681 # Offset: 1404
    00000582: 	movzbl	(%r14), %eax
    00000586: 	movb	%al, 0x90(%rsp)
    0000058d: 	movq	(%rsp), %rax
.Ltmp2755:
    00000591: 	movq	%r12, 0x88(%rsp)
    00000599: 	movb	$0x0, (%rax,%r12)
    0000059e: 	movabsq	$0x3fffffffffffffff, %rax
    000005a8: 	subq	0x88(%rsp), %rax
    000005b0: 	cmpq	$0x11, %rax
    000005b4: 	jbe	.Ltmp2682 # Offset: 1460
    000005ba: 	leaq	0x80(%rsp), %rax
    000005c2: 	movl	$0x12, %edx
    000005c7: 	leaq	DATAat0x4d234(%rip), %rsi
    000005ce: 	movq	%rax, %rdi
    000005d1: 	movq	%rax, 0x8(%rsp)
    000005d6: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1494
    000005db: 	callq	clock@PLT # Offset: 1499
    000005e0: 	movl	iterations(%rip), %ecx
    000005e6: 	xorl	%r12d, %r12d
    000005e9: 	leaq	0x7cf0(%rbp), %rbx
    000005f0: 	movq	%rax, start_time(%rip)
    000005f7: 	leaq	DATAat0x4d004(%rip), %r14
    000005fe: 	testl	%ecx, %ecx
    00000600: 	jle	.Ltmp2683 # Offset: 1536
    00000606: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2686:
    00000610: 	movl	(%rbp), %edx
    00000613: 	movq	%rbp, %rax
    00000616: 	subl	0x4(%rbp), %edx
    00000619: 	pxor	%xmm0, %xmm0
    0000061d: 	nopl	(%rax) # Size: 3
.Ltmp2684:
    00000620: 	movdqu	(%rax), %xmm1
    00000624: 	movdqu	0x4(%rax), %xmm4
    00000629: 	addq	$0x10, %rax
    0000062d: 	psubd	%xmm4, %xmm1
    00000631: 	pslld	$0x3, %xmm1
    00000636: 	paddd	%xmm1, %xmm0
    0000063a: 	cmpq	%rbx, %rax
    0000063d: 	jne	.Ltmp2684 # Offset: 1597
    0000063f: 	movdqa	%xmm0, %xmm1
    00000643: 	subl	0x7cfc(%rbp), %edx
    00000649: 	movq	0x7cf4(%rbp), %xmm2
    00000651: 	psrldq	$0x8, %xmm1
    00000656: 	addl	0x7cf8(%rbp), %edx
    0000065c: 	paddd	%xmm1, %xmm0
    00000660: 	movq	0x7cf0(%rbp), %xmm1
    00000668: 	psubd	%xmm2, %xmm1
    0000066c: 	pslld	$0x3, %xmm1
    00000671: 	movd	%xmm1, %eax
    00000675: 	pshufd	$0xe5, %xmm1, %xmm5
    0000067a: 	movdqa	%xmm0, %xmm1
    0000067e: 	movd	%xmm5, %esi
    00000682: 	psrldq	$0x4, %xmm1
    00000687: 	addl	%esi, %eax
    00000689: 	paddd	%xmm1, %xmm0
    0000068d: 	leal	(%rax,%rdx,8), %edx
    00000690: 	movd	%xmm0, %eax
    00000694: 	addl	%eax, %edx
    00000696: 	jne	.Ltmp2685 # Offset: 1686
.Ltmp2751:
    0000069c: 	addl	$0x1, %r12d
    000006a0: 	cmpl	%ecx, %r12d
    000006a3: 	jl	.Ltmp2686 # Offset: 1699
.Ltmp2683:
    000006a9: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000006b0: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000006b7: 	subq	$0x20, %rax
    000006bb: 	cmpq	%rax, %rbx
    000006be: 	je	.Ltmp2687 # Offset: 1726
    000006c4: 	leaq	0x10(%rbx), %rdi
    000006c8: 	movq	0x88(%rsp), %r12
    000006d0: 	movq	%rdi, (%rbx)
    000006d3: 	movq	0x80(%rsp), %r14
    000006db: 	movq	%r14, %rax
    000006de: 	addq	%r12, %rax
    000006e1: 	je	.Ltmp2688 # Offset: 1761
    000006e3: 	testq	%r14, %r14
    000006e6: 	je	.Ltmp2689 # Offset: 1766
.Ltmp2688:
    000006ec: 	movq	%r12, 0x18(%rsp)
    000006f1: 	cmpq	$0xf, %r12
    000006f5: 	ja	.Ltmp2690 # Offset: 1781
    000006fb: 	cmpq	$0x1, %r12
    000006ff: 	jne	.Ltmp2691 # Offset: 1791
    00000705: 	movzbl	(%r14), %eax
    00000709: 	movb	%al, 0x10(%rbx)
.Ltmp2784:
    0000070c: 	movq	%r12, 0x8(%rbx)
    00000710: 	movb	$0x0, (%rdi,%r12)
    00000715: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000071c: 	addq	$0x20, %rax
    00000720: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp2771:
    00000727: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000072e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000735: 	je	.Ltmp2692 # Offset: 1845
.Ltmp2770:
    0000073b: 	movq	-0x20(%rax), %r12
    0000073f: 	callq	clock@PLT # Offset: 1855
    00000744: 	pxor	%xmm0, %xmm0
    00000748: 	movq	%rax, end_time(%rip)
    0000074f: 	movq	%r12, %rdi
    00000752: 	subq	start_time(%rip), %rax
    00000759: 	cvtsi2sd	%rax, %xmm0
    0000075e: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000766: 	callq	_Z13record_resultdPKc # Offset: 1894
    0000076b: 	movq	0x80(%rsp), %rdi
    00000773: 	cmpq	(%rsp), %rdi
    00000777: 	je	.Ltmp2693 # Offset: 1911
    00000779: 	movq	0x90(%rsp), %rax
    00000781: 	leaq	0x1(%rax), %rsi
    00000785: 	callq	_ZdlPvm@PLT # Offset: 1925
.Ltmp2693:
    0000078a: 	movq	(%r13), %r14
    0000078e: 	movq	0x8(%r13), %r12
    00000792: 	leaq	0xb0(%rsp), %rbx
    0000079a: 	movq	%rbx, 0xa0(%rsp)
    000007a2: 	movq	%r14, %rax
    000007a5: 	addq	%r12, %rax
    000007a8: 	je	.Ltmp2694 # Offset: 1960
    000007aa: 	testq	%r14, %r14
    000007ad: 	je	.Ltmp2644 # Offset: 1965
.Ltmp2694:
    000007b3: 	movq	%r12, 0x18(%rsp)
    000007b8: 	cmpq	$0xf, %r12
    000007bc: 	ja	.Ltmp2695 # Offset: 1980
    000007c2: 	cmpq	$0x1, %r12
    000007c6: 	jne	.Ltmp2696 # Offset: 1990
    000007cc: 	movzbl	(%r14), %eax
    000007d0: 	movb	%al, 0xb0(%rsp)
    000007d7: 	movq	%rbx, %rax
.Ltmp2753:
    000007da: 	movq	%r12, 0xa8(%rsp)
    000007e2: 	movb	$0x0, (%rax,%r12)
    000007e7: 	movabsq	$0x3fffffffffffffff, %rax
    000007f1: 	subq	0xa8(%rsp), %rax
    000007f9: 	cmpq	$0x8, %rax
    000007fd: 	jbe	.Ltmp2697 # Offset: 2045
    00000803: 	leaq	0xa0(%rsp), %r12
    0000080b: 	movl	$0x9, %edx
    00000810: 	leaq	DATAat0x4d24b(%rip), %rsi
    00000817: 	movq	%r12, %rdi
    0000081a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2074
    0000081f: 	movq	%r12, %rcx
    00000822: 	movl	%r15d, %edx
    00000825: 	movl	$0x1f40, %esi
    0000082a: 	movq	%rbp, %rdi
    0000082d: 	callq	_Z9test_CSENIj14custom_cse_subIjELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2093
    00000832: 	movq	0xa0(%rsp), %rdi
    0000083a: 	cmpq	%rbx, %rdi
    0000083d: 	je	.Ltmp2698 # Offset: 2109
    0000083f: 	movq	0xb0(%rsp), %rax
    00000847: 	leaq	0x1(%rax), %rsi
    0000084b: 	callq	_ZdlPvm@PLT # Offset: 2123
.Ltmp2698:
    00000850: 	leaq	0xe0(%rsp), %r14
    00000858: 	leaq	DATAat0x4d259(%rip), %rdx
    0000085f: 	movq	%r13, %rsi
    00000862: 	xorl	%r12d, %r12d
    00000865: 	movq	%r14, %rdi
    00000868: 	leaq	0x7cf0(%rbp), %rbx
    0000086f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2159
    00000874: 	callq	clock@PLT # Offset: 2164
    00000879: 	movl	iterations(%rip), %ecx
    0000087f: 	movq	%rax, start_time(%rip)
    00000886: 	testl	%ecx, %ecx
    00000888: 	jle	.Ltmp2699 # Offset: 2184
    0000088e: 	nop # Size: 2
.Ltmp2702:
    00000890: 	movl	(%rbp), %edx
    00000893: 	movq	%rbp, %rax
    00000896: 	subl	0x4(%rbp), %edx
    00000899: 	pxor	%xmm0, %xmm0
    0000089d: 	nopl	(%rax) # Size: 3
.Ltmp2700:
    000008a0: 	movdqu	(%rax), %xmm1
    000008a4: 	movdqu	0x4(%rax), %xmm3
    000008a9: 	addq	$0x10, %rax
    000008ad: 	psubd	%xmm3, %xmm1
    000008b1: 	pslld	$0x3, %xmm1
    000008b6: 	paddd	%xmm1, %xmm0
    000008ba: 	cmpq	%rax, %rbx
    000008bd: 	jne	.Ltmp2700 # Offset: 2237
    000008bf: 	movdqa	%xmm0, %xmm1
    000008c3: 	subl	0x7cfc(%rbp), %edx
    000008c9: 	movq	0x7cf4(%rbp), %xmm2
    000008d1: 	psrldq	$0x8, %xmm1
    000008d6: 	addl	0x7cf8(%rbp), %edx
    000008dc: 	paddd	%xmm1, %xmm0
    000008e0: 	movq	0x7cf0(%rbp), %xmm1
    000008e8: 	psubd	%xmm2, %xmm1
    000008ec: 	pslld	$0x3, %xmm1
    000008f1: 	movd	%xmm1, %eax
    000008f5: 	pshufd	$0xe5, %xmm1, %xmm6
    000008fa: 	movdqa	%xmm0, %xmm1
    000008fe: 	movd	%xmm6, %esi
    00000902: 	psrldq	$0x4, %xmm1
    00000907: 	addl	%esi, %eax
    00000909: 	paddd	%xmm1, %xmm0
    0000090d: 	leal	(%rax,%rdx,8), %edx
    00000910: 	movd	%xmm0, %eax
    00000914: 	addl	%eax, %edx
    00000916: 	jne	.Ltmp2701 # Offset: 2326
.Ltmp2750:
    0000091c: 	addl	$0x1, %r12d
    00000920: 	cmpl	%ecx, %r12d
    00000923: 	jl	.Ltmp2702 # Offset: 2339
.Ltmp2699:
    00000929: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000930: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000937: 	subq	$0x20, %rax
    0000093b: 	cmpq	%rax, %rbx
    0000093e: 	je	.Ltmp2703 # Offset: 2366
    00000944: 	leaq	0x10(%rbx), %rdi
    00000948: 	movq	0xe8(%rsp), %r12
    00000950: 	movq	%rdi, (%rbx)
    00000953: 	movq	0xe0(%rsp), %rax
    0000095b: 	movq	%rax, %rcx
    0000095e: 	movq	%rax, (%rsp)
    00000962: 	addq	%r12, %rcx
    00000965: 	je	.Ltmp2704 # Offset: 2405
    00000967: 	testq	%rax, %rax
    0000096a: 	je	.Ltmp2705 # Offset: 2410
.Ltmp2704:
    00000970: 	movq	%r12, 0x18(%rsp)
    00000975: 	cmpq	$0xf, %r12
    00000979: 	ja	.Ltmp2706 # Offset: 2425
    0000097f: 	cmpq	$0x1, %r12
    00000983: 	jne	.Ltmp2707 # Offset: 2435
    00000989: 	movq	(%rsp), %rax
    0000098d: 	movzbl	(%rax), %eax
    00000990: 	movb	%al, 0x10(%rbx)
.Ltmp2777:
    00000993: 	movq	%r12, 0x8(%rbx)
    00000997: 	movb	$0x0, (%rdi,%r12)
    0000099c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000009a3: 	addq	$0x20, %rax
    000009a7: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp2766:
    000009ae: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000009b5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000009bc: 	je	.Ltmp2708 # Offset: 2492
.Ltmp2764:
    000009c2: 	movq	-0x20(%rax), %r12
    000009c6: 	callq	clock@PLT # Offset: 2502
    000009cb: 	pxor	%xmm0, %xmm0
    000009cf: 	movq	%rax, end_time(%rip)
    000009d6: 	movq	%r12, %rdi
    000009d9: 	subq	start_time(%rip), %rax
    000009e0: 	cvtsi2sd	%rax, %xmm0
    000009e5: 	divsd	DATAat0x4d640(%rip), %xmm0
    000009ed: 	callq	_Z13record_resultdPKc # Offset: 2541
    000009f2: 	movq	0xe0(%rsp), %rdi
    000009fa: 	leaq	0xf0(%rsp), %rax
    00000a02: 	movq	%rax, (%rsp)
    00000a06: 	cmpq	%rax, %rdi
    00000a09: 	je	.Ltmp2709 # Offset: 2569
    00000a0b: 	movq	0xf0(%rsp), %rax
    00000a13: 	leaq	0x1(%rax), %rsi
    00000a17: 	callq	_ZdlPvm@PLT # Offset: 2583
.Ltmp2709:
    00000a1c: 	movq	(%r13), %r8
    00000a20: 	movq	0x8(%r13), %r12
    00000a24: 	leaq	0xd0(%rsp), %rbx
    00000a2c: 	movq	%rbx, 0xc0(%rsp)
    00000a34: 	movq	%r8, %rax
    00000a37: 	addq	%r12, %rax
    00000a3a: 	je	.Ltmp2710 # Offset: 2618
    00000a3c: 	testq	%r8, %r8
    00000a3f: 	je	.Ltmp2644 # Offset: 2623
.Ltmp2710:
    00000a45: 	movq	%r12, 0x18(%rsp)
    00000a4a: 	cmpq	$0xf, %r12
    00000a4e: 	ja	.Ltmp2711 # Offset: 2638
    00000a54: 	cmpq	$0x1, %r12
    00000a58: 	jne	.Ltmp2712 # Offset: 2648
    00000a5e: 	movzbl	(%r8), %eax
    00000a62: 	movb	%al, 0xd0(%rsp)
    00000a69: 	movq	%rbx, %rax
.Ltmp2761:
    00000a6c: 	movq	%r12, 0xc8(%rsp)
    00000a74: 	movb	$0x0, (%rax,%r12)
    00000a79: 	movabsq	$0x3fffffffffffffff, %rax
    00000a83: 	subq	0xc8(%rsp), %rax
    00000a8b: 	cmpq	$0x8, %rax
    00000a8f: 	jbe	.Ltmp2713 # Offset: 2703
    00000a95: 	leaq	0xc0(%rsp), %r12
    00000a9d: 	movl	$0x9, %edx
    00000aa2: 	leaq	DATAat0x4d270(%rip), %rsi
    00000aa9: 	movq	%r12, %rdi
    00000aac: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2732
    00000ab1: 	movq	%r12, %rcx
    00000ab4: 	movl	%r15d, %edx
    00000ab7: 	movl	$0x1f40, %esi
    00000abc: 	movq	%rbp, %rdi
    00000abf: 	callq	_Z9test_CSENIj14custom_cse_mulIjELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2751
    00000ac4: 	movq	0xc0(%rsp), %rdi
    00000acc: 	cmpq	%rbx, %rdi
    00000acf: 	je	.Ltmp2714 # Offset: 2767
    00000ad1: 	movq	0xd0(%rsp), %rax
    00000ad9: 	leaq	0x1(%rax), %rsi
    00000add: 	callq	_ZdlPvm@PLT # Offset: 2781
.Ltmp2714:
    00000ae2: 	leaq	DATAat0x4d27e(%rip), %rdx
    00000ae9: 	movq	%r13, %rsi
    00000aec: 	movq	%r14, %rdi
    00000aef: 	xorl	%r12d, %r12d
    00000af2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2802
    00000af7: 	leaq	0x7cf0(%rbp), %rbx
    00000afe: 	callq	clock@PLT # Offset: 2814
    00000b03: 	movl	iterations(%rip), %ecx
    00000b09: 	movq	%rax, start_time(%rip)
    00000b10: 	testl	%ecx, %ecx
    00000b12: 	jle	.Ltmp2715 # Offset: 2834
    00000b18: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2718:
    00000b20: 	movl	(%rbp), %edx
    00000b23: 	movq	%rbp, %rax
    00000b26: 	subl	0x4(%rbp), %edx
    00000b29: 	pxor	%xmm0, %xmm0
    00000b2d: 	nopl	(%rax) # Size: 3
.Ltmp2716:
    00000b30: 	movdqu	(%rax), %xmm1
    00000b34: 	movdqu	0x4(%rax), %xmm4
    00000b39: 	addq	$0x10, %rax
    00000b3d: 	psubd	%xmm4, %xmm1
    00000b41: 	pslld	$0x3, %xmm1
    00000b46: 	paddd	%xmm1, %xmm0
    00000b4a: 	cmpq	%rax, %rbx
    00000b4d: 	jne	.Ltmp2716 # Offset: 2893
    00000b4f: 	movdqa	%xmm0, %xmm1
    00000b53: 	subl	0x7cfc(%rbp), %edx
    00000b59: 	movq	0x7cf4(%rbp), %xmm2
    00000b61: 	psrldq	$0x8, %xmm1
    00000b66: 	addl	0x7cf8(%rbp), %edx
    00000b6c: 	paddd	%xmm1, %xmm0
    00000b70: 	movq	0x7cf0(%rbp), %xmm1
    00000b78: 	psubd	%xmm2, %xmm1
    00000b7c: 	pslld	$0x3, %xmm1
    00000b81: 	movd	%xmm1, %eax
    00000b85: 	pshufd	$0xe5, %xmm1, %xmm7
    00000b8a: 	movdqa	%xmm0, %xmm1
    00000b8e: 	movd	%xmm7, %esi
    00000b92: 	psrldq	$0x4, %xmm1
    00000b97: 	addl	%esi, %eax
    00000b99: 	paddd	%xmm1, %xmm0
    00000b9d: 	leal	(%rax,%rdx,8), %edx
    00000ba0: 	movd	%xmm0, %eax
    00000ba4: 	addl	%eax, %edx
    00000ba6: 	jne	.Ltmp2717 # Offset: 2982
.Ltmp2748:
    00000bac: 	addl	$0x1, %r12d
    00000bb0: 	cmpl	%ecx, %r12d
    00000bb3: 	jl	.Ltmp2718 # Offset: 2995
.Ltmp2715:
    00000bb9: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000bc0: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000bc7: 	subq	$0x20, %rax
    00000bcb: 	cmpq	%rax, %rbx
    00000bce: 	je	.Ltmp2719 # Offset: 3022
    00000bd4: 	leaq	0x10(%rbx), %rdi
    00000bd8: 	movq	0xe8(%rsp), %r12
    00000be0: 	movq	%rdi, (%rbx)
    00000be3: 	movq	0xe0(%rsp), %rax
    00000beb: 	movq	%rax, %rcx
    00000bee: 	movq	%rax, 0x8(%rsp)
    00000bf3: 	addq	%r12, %rcx
    00000bf6: 	je	.Ltmp2720 # Offset: 3062
    00000bf8: 	testq	%rax, %rax
    00000bfb: 	je	.Ltmp2721 # Offset: 3067
.Ltmp2720:
    00000c01: 	movq	%r12, 0x18(%rsp)
    00000c06: 	cmpq	$0xf, %r12
    00000c0a: 	ja	.Ltmp2722 # Offset: 3082
    00000c10: 	cmpq	$0x1, %r12
    00000c14: 	jne	.Ltmp2723 # Offset: 3092
    00000c1a: 	movq	0x8(%rsp), %rax
    00000c1f: 	movzbl	(%rax), %eax
    00000c22: 	movb	%al, 0x10(%rbx)
.Ltmp2781:
    00000c25: 	movq	%r12, 0x8(%rbx)
    00000c29: 	movb	$0x0, (%rdi,%r12)
    00000c2e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000c35: 	addq	$0x20, %rax
    00000c39: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp2774:
    00000c40: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000c47: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000c4e: 	je	.Ltmp2724 # Offset: 3150
.Ltmp2769:
    00000c54: 	movq	-0x20(%rax), %r12
    00000c58: 	callq	clock@PLT # Offset: 3160
    00000c5d: 	pxor	%xmm0, %xmm0
    00000c61: 	movq	%rax, end_time(%rip)
    00000c68: 	movq	%r12, %rdi
    00000c6b: 	subq	start_time(%rip), %rax
    00000c72: 	cvtsi2sd	%rax, %xmm0
    00000c77: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000c7f: 	callq	_Z13record_resultdPKc # Offset: 3199
    00000c84: 	movq	0xe0(%rsp), %rdi
    00000c8c: 	cmpq	(%rsp), %rdi
    00000c90: 	je	.Ltmp2725 # Offset: 3216
    00000c92: 	movq	0xf0(%rsp), %rax
    00000c9a: 	leaq	0x1(%rax), %rsi
    00000c9e: 	callq	_ZdlPvm@PLT # Offset: 3230
.Ltmp2725:
    00000ca3: 	leaq	DATAat0x4d293(%rip), %rdx
    00000caa: 	movq	%r13, %rsi
    00000cad: 	movq	%r14, %rdi
    00000cb0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3248
    00000cb5: 	movq	%r14, %rcx
    00000cb8: 	movl	%r15d, %edx
    00000cbb: 	movl	$0x1f40, %esi
    00000cc0: 	movq	%rbp, %rdi
    00000cc3: 	callq	_Z9test_CSENIj14custom_cse_divIjELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3267
    00000cc8: 	movq	0xe0(%rsp), %rdi
    00000cd0: 	cmpq	(%rsp), %rdi
    00000cd4: 	je	.Ltmp2726 # Offset: 3284
    00000cd6: 	movq	0xf0(%rsp), %rax
    00000cde: 	leaq	0x1(%rax), %rsi
    00000ce2: 	callq	_ZdlPvm@PLT # Offset: 3298
.Ltmp2726:
    00000ce7: 	movq	(%rsp), %rax
    00000ceb: 	movq	(%r13), %rbx
    00000cef: 	movq	0x8(%r13), %r12
    00000cf3: 	movq	%rax, 0xe0(%rsp)
    00000cfb: 	movq	%rbx, %rax
    00000cfe: 	addq	%r12, %rax
    00000d01: 	je	.Ltmp2727 # Offset: 3329
    00000d03: 	testq	%rbx, %rbx
    00000d06: 	je	.Ltmp2644 # Offset: 3334
.Ltmp2727:
    00000d0c: 	movq	%r12, 0x18(%rsp)
    00000d11: 	cmpq	$0xf, %r12
    00000d15: 	ja	.Ltmp2728 # Offset: 3349
    00000d1b: 	cmpq	$0x1, %r12
    00000d1f: 	jne	.Ltmp2729 # Offset: 3359
    00000d25: 	movzbl	(%rbx), %eax
    00000d28: 	movb	%al, 0xf0(%rsp)
    00000d2f: 	movq	(%rsp), %rax
.Ltmp2759:
    00000d33: 	movq	%r12, 0xe8(%rsp)
    00000d3b: 	movb	$0x0, (%rax,%r12)
    00000d40: 	movabsq	$0x3fffffffffffffff, %rax
    00000d4a: 	subq	0xe8(%rsp), %rax
    00000d52: 	cmpq	$0xc, %rax
    00000d56: 	jbe	.Ltmp2730 # Offset: 3414
    00000d5c: 	movl	$0xd, %edx
    00000d61: 	leaq	DATAat0x4d29f(%rip), %rsi
    00000d68: 	movq	%r14, %rdi
    00000d6b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3435
    00000d70: 	callq	clock@PLT # Offset: 3440
    00000d75: 	movl	iterations(%rip), %ecx
    00000d7b: 	xorl	%r12d, %r12d
    00000d7e: 	leaq	0x7cf0(%rbp), %rbx
    00000d85: 	movq	%rax, start_time(%rip)
    00000d8c: 	testl	%ecx, %ecx
    00000d8e: 	jle	.Ltmp2731 # Offset: 3470
    00000d94: 	nopl	(%rax) # Size: 4
.Ltmp2734:
    00000d98: 	movl	(%rbp), %edx
    00000d9b: 	movq	%rbp, %rax
    00000d9e: 	subl	0x4(%rbp), %edx
    00000da1: 	pxor	%xmm0, %xmm0
    00000da5: 	nopl	(%rax) # Size: 3
.Ltmp2732:
    00000da8: 	movdqu	(%rax), %xmm1
    00000dac: 	movdqu	0x4(%rax), %xmm5
    00000db1: 	addq	$0x10, %rax
    00000db5: 	psubd	%xmm5, %xmm1
    00000db9: 	pslld	$0x3, %xmm1
    00000dbe: 	paddd	%xmm1, %xmm0
    00000dc2: 	cmpq	%rax, %rbx
    00000dc5: 	jne	.Ltmp2732 # Offset: 3525
    00000dc7: 	movdqa	%xmm0, %xmm1
    00000dcb: 	subl	0x7cfc(%rbp), %edx
    00000dd1: 	movq	0x7cf4(%rbp), %xmm2
    00000dd9: 	psrldq	$0x8, %xmm1
    00000dde: 	addl	0x7cf8(%rbp), %edx
    00000de4: 	paddd	%xmm1, %xmm0
    00000de8: 	movq	0x7cf0(%rbp), %xmm1
    00000df0: 	psubd	%xmm2, %xmm1
    00000df4: 	pslld	$0x3, %xmm1
    00000df9: 	movd	%xmm1, %eax
    00000dfd: 	pshufd	$0xe5, %xmm1, %xmm6
    00000e02: 	movdqa	%xmm0, %xmm1
    00000e06: 	movd	%xmm6, %esi
    00000e0a: 	psrldq	$0x4, %xmm1
    00000e0f: 	addl	%esi, %eax
    00000e11: 	paddd	%xmm1, %xmm0
    00000e15: 	leal	(%rax,%rdx,8), %edx
    00000e18: 	movd	%xmm0, %eax
    00000e1c: 	addl	%eax, %edx
    00000e1e: 	jne	.Ltmp2733 # Offset: 3614
.Ltmp2749:
    00000e24: 	addl	$0x1, %r12d
    00000e28: 	cmpl	%ecx, %r12d
    00000e2b: 	jl	.Ltmp2734 # Offset: 3627
.Ltmp2731:
    00000e31: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000e38: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000e3f: 	subq	$0x20, %rax
    00000e43: 	cmpq	%rax, %rbx
    00000e46: 	je	.Ltmp2735 # Offset: 3654
    00000e4c: 	leaq	0x10(%rbx), %rdi
    00000e50: 	movq	0xe8(%rsp), %r12
    00000e58: 	movq	%rdi, (%rbx)
    00000e5b: 	movq	0xe0(%rsp), %rax
    00000e63: 	movq	%rax, %rcx
    00000e66: 	movq	%rax, 0x8(%rsp)
    00000e6b: 	addq	%r12, %rcx
    00000e6e: 	je	.Ltmp2736 # Offset: 3694
    00000e70: 	testq	%rax, %rax
    00000e73: 	je	.Ltmp2737 # Offset: 3699
.Ltmp2736:
    00000e79: 	movq	%r12, 0x18(%rsp)
    00000e7e: 	cmpq	$0xf, %r12
    00000e82: 	ja	.Ltmp2738 # Offset: 3714
    00000e88: 	cmpq	$0x1, %r12
    00000e8c: 	jne	.Ltmp2739 # Offset: 3724
    00000e92: 	movq	0x8(%rsp), %rax
    00000e97: 	movzbl	(%rax), %eax
    00000e9a: 	movb	%al, 0x10(%rbx)
.Ltmp2783:
    00000e9d: 	movq	%r12, 0x8(%rbx)
    00000ea1: 	movb	$0x0, (%rdi,%r12)
    00000ea6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000ead: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000eb4: 	addq	$0x20, %rax
    00000eb8: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000ebf: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000ec6: 	je	.Ltmp2740 # Offset: 3782
.Ltmp2772:
    00000ecc: 	movq	-0x20(%rax), %r12
    00000ed0: 	callq	clock@PLT # Offset: 3792
    00000ed5: 	pxor	%xmm0, %xmm0
    00000ed9: 	movq	%rax, end_time(%rip)
    00000ee0: 	movq	%r12, %rdi
    00000ee3: 	subq	start_time(%rip), %rax
    00000eea: 	cvtsi2sd	%rax, %xmm0
    00000eef: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000ef7: 	callq	_Z13record_resultdPKc # Offset: 3831
    00000efc: 	movq	0xe0(%rsp), %rdi
    00000f04: 	cmpq	(%rsp), %rdi
    00000f08: 	je	.Ltmp2741 # Offset: 3848
    00000f0a: 	movq	0xf0(%rsp), %rax
    00000f12: 	leaq	0x1(%rax), %rsi
    00000f16: 	callq	_ZdlPvm@PLT # Offset: 3862
.Ltmp2741:
    00000f1b: 	leaq	DATAat0x4d2b1(%rip), %rdx
    00000f22: 	movq	%r13, %rsi
    00000f25: 	movq	%r14, %rdi
    00000f28: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3880
    00000f2d: 	movq	%r14, %rcx
    00000f30: 	movl	%r15d, %edx
    00000f33: 	movl	$0x1f40, %esi
    00000f38: 	movq	%rbp, %rdi
    00000f3b: 	callq	_Z9test_CSENIj14custom_cse_mixIjELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3899
    00000f40: 	movq	0xe0(%rsp), %rdi
    00000f48: 	cmpq	(%rsp), %rdi
    00000f4c: 	je	.Ltmp2742 # Offset: 3916
    00000f4e: 	movq	0xf0(%rsp), %rax
    00000f56: 	leaq	0x1(%rax), %rsi
    00000f5a: 	callq	_ZdlPvm@PLT # Offset: 3930
.Ltmp2742:
    00000f5f: 	movq	0x108(%rsp), %rax
    00000f67: 	subq	%fs:0x28, %rax
    00000f70: 	jne	.Ltmp2743 # Offset: 3952
    00000f76: 	movq	(%r13), %rdi
    00000f7a: 	movl	iterations(%rip), %edx
    00000f80: 	xorl	%r8d, %r8d
    00000f83: 	xorl	%ecx, %ecx
    00000f85: 	addq	$0x118, %rsp
    00000f8c: 	movl	$0x1f40, %esi
    00000f91: 	popq	%rbx
    00000f92: 	popq	%rbp
    00000f93: 	popq	%r12
    00000f95: 	popq	%r13
    00000f97: 	popq	%r14
    00000f99: 	popq	%r15
    00000f9b: 	jmp	_Z9summarizePKciiii # TAILCALL  # Offset: 3995
.Ltmp2646:
    00000fa0: 	testq	%r12, %r12
    00000fa3: 	jne	.Ltmp2744 # Offset: 4003
    00000fa9: 	movq	(%rsp), %rax
    00000fad: 	jmp	.Ltmp2745 # Offset: 4013
    00000fb2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2650:
    00000fb8: 	movq	0x20(%rsp), %rdx
    00000fbd: 	movq	%r14, %rsi
    00000fc0: 	movl	$0x1, %edi
    00000fc5: 	xorl	%eax, %eax
    00000fc7: 	callq	__printf_chk@PLT # Offset: 4039
    00000fcc: 	movl	iterations(%rip), %ecx
    00000fd2: 	jmp	.Ltmp2746 # Offset: 4050
    00000fd7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2665:
    00000fe0: 	movq	0x40(%rsp), %rdx
    00000fe5: 	movq	%r14, %rsi
    00000fe8: 	movl	$0x1, %edi
    00000fed: 	xorl	%eax, %eax
    00000fef: 	callq	__printf_chk@PLT # Offset: 4079
    00000ff4: 	movl	iterations(%rip), %ecx
    00000ffa: 	jmp	.Ltmp2747 # Offset: 4090
    00000fff: 	nop # Size: 1
.Ltmp2717:
    00001000: 	movq	0xe0(%rsp), %rdx
    00001008: 	leaq	DATAat0x4d004(%rip), %rsi
    0000100f: 	movl	$0x1, %edi
    00001014: 	xorl	%eax, %eax
    00001016: 	callq	__printf_chk@PLT # Offset: 4118
    0000101b: 	movl	iterations(%rip), %ecx
    00001021: 	jmp	.Ltmp2748 # Offset: 4129
    00001026: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2733:
    00001030: 	movq	0xe0(%rsp), %rdx
    00001038: 	leaq	DATAat0x4d004(%rip), %rsi
    0000103f: 	movl	$0x1, %edi
    00001044: 	xorl	%eax, %eax
    00001046: 	callq	__printf_chk@PLT # Offset: 4166
    0000104b: 	movl	iterations(%rip), %ecx
    00001051: 	jmp	.Ltmp2749 # Offset: 4177
    00001056: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2701:
    00001060: 	movq	0xe0(%rsp), %rdx
    00001068: 	leaq	DATAat0x4d004(%rip), %rsi
    0000106f: 	movl	$0x1, %edi
    00001074: 	xorl	%eax, %eax
    00001076: 	callq	__printf_chk@PLT # Offset: 4214
    0000107b: 	movl	iterations(%rip), %ecx
    00001081: 	jmp	.Ltmp2750 # Offset: 4225
    00001086: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2685:
    00001090: 	movq	0x80(%rsp), %rdx
    00001098: 	movq	%r14, %rsi
    0000109b: 	movl	$0x1, %edi
    000010a0: 	xorl	%eax, %eax
    000010a2: 	callq	__printf_chk@PLT # Offset: 4258
    000010a7: 	movl	iterations(%rip), %ecx
    000010ad: 	jmp	.Ltmp2751 # Offset: 4269
.Ltmp2696:
    000010b2: 	testq	%r12, %r12
    000010b5: 	jne	.Ltmp2752 # Offset: 4277
    000010bb: 	movq	%rbx, %rax
    000010be: 	jmp	.Ltmp2753 # Offset: 4286
.Ltmp2681:
    000010c3: 	testq	%r12, %r12
    000010c6: 	jne	.Ltmp2754 # Offset: 4294
    000010cc: 	movq	(%rsp), %rax
    000010d0: 	jmp	.Ltmp2755 # Offset: 4304
.Ltmp2676:
    000010d5: 	testq	%r12, %r12
    000010d8: 	jne	.Ltmp2756 # Offset: 4312
    000010de: 	movq	%rbx, %rax
    000010e1: 	jmp	.Ltmp2757 # Offset: 4321
.Ltmp2729:
    000010e6: 	testq	%r12, %r12
    000010e9: 	jne	.Ltmp2758 # Offset: 4329
    000010ef: 	movq	(%rsp), %rax
    000010f3: 	jmp	.Ltmp2759 # Offset: 4339
.Ltmp2712:
    000010f8: 	testq	%r12, %r12
    000010fb: 	jne	.Ltmp2760 # Offset: 4347
    00001101: 	movq	%rbx, %rax
    00001104: 	jmp	.Ltmp2761 # Offset: 4356
.Ltmp2661:
    00001109: 	testq	%r12, %r12
    0000110c: 	jne	.Ltmp2762 # Offset: 4364
    00001112: 	movq	(%rsp), %rax
    00001116: 	jmp	.Ltmp2763 # Offset: 4374
.Ltmp2660:
    0000111b: 	leaq	0x40(%rsp), %rdi
    00001120: 	leaq	0x18(%rsp), %rsi
    00001125: 	xorl	%edx, %edx
    00001127: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4391
    0000112c: 	movq	%rax, 0x40(%rsp)
    00001131: 	movq	%rax, %rdi
    00001134: 	movq	0x18(%rsp), %rax
    00001139: 	movq	%rax, 0x50(%rsp)
.Ltmp2793:
    0000113e: 	movq	%r12, %rdx
    00001141: 	movq	%r14, %rsi
    00001144: 	callq	memcpy@PLT # Offset: 4420
    00001149: 	movq	0x18(%rsp), %r12
    0000114e: 	movq	0x40(%rsp), %rax
    00001153: 	jmp	.Ltmp2763 # Offset: 4435
.Ltmp2645:
    00001158: 	leaq	0x20(%rsp), %rdi
    0000115d: 	leaq	0x18(%rsp), %rsi
    00001162: 	xorl	%edx, %edx
    00001164: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4452
    00001169: 	movq	%rax, 0x20(%rsp)
    0000116e: 	movq	%rax, %rdi
    00001171: 	movq	0x18(%rsp), %rax
    00001176: 	movq	%rax, 0x30(%rsp)
.Ltmp2787:
    0000117b: 	movq	%r12, %rdx
    0000117e: 	movq	%r14, %rsi
    00001181: 	callq	memcpy@PLT # Offset: 4481
    00001186: 	movq	0x18(%rsp), %r12
    0000118b: 	movq	0x20(%rsp), %rax
    00001190: 	jmp	.Ltmp2745 # Offset: 4496
.Ltmp2675:
    00001195: 	leaq	0x60(%rsp), %rdi
    0000119a: 	leaq	0x18(%rsp), %rsi
    0000119f: 	xorl	%edx, %edx
    000011a1: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4513
    000011a6: 	movq	%rax, 0x60(%rsp)
    000011ab: 	movq	%rax, %rdi
    000011ae: 	movq	0x18(%rsp), %rax
    000011b3: 	movq	%rax, 0x70(%rsp)
.Ltmp2790:
    000011b8: 	movq	%r12, %rdx
    000011bb: 	movq	%r14, %rsi
    000011be: 	callq	memcpy@PLT # Offset: 4542
    000011c3: 	movq	0x18(%rsp), %r12
    000011c8: 	movq	0x60(%rsp), %rax
    000011cd: 	jmp	.Ltmp2757 # Offset: 4557
.Ltmp2695:
    000011d2: 	leaq	0xa0(%rsp), %rdi
    000011da: 	leaq	0x18(%rsp), %rsi
    000011df: 	xorl	%edx, %edx
    000011e1: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4577
    000011e6: 	movq	%rax, 0xa0(%rsp)
    000011ee: 	movq	%rax, %rdi
    000011f1: 	movq	0x18(%rsp), %rax
    000011f6: 	movq	%rax, 0xb0(%rsp)
.Ltmp2788:
    000011fe: 	movq	%r12, %rdx
    00001201: 	movq	%r14, %rsi
    00001204: 	callq	memcpy@PLT # Offset: 4612
    00001209: 	movq	0x18(%rsp), %r12
    0000120e: 	movq	0xa0(%rsp), %rax
    00001216: 	jmp	.Ltmp2753 # Offset: 4630
.Ltmp2680:
    0000121b: 	leaq	0x80(%rsp), %rdi
    00001223: 	leaq	0x18(%rsp), %rsi
    00001228: 	xorl	%edx, %edx
    0000122a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4650
    0000122f: 	movq	%rax, 0x80(%rsp)
    00001237: 	movq	%rax, %rdi
    0000123a: 	movq	0x18(%rsp), %rax
    0000123f: 	movq	%rax, 0x90(%rsp)
.Ltmp2789:
    00001247: 	movq	%r12, %rdx
    0000124a: 	movq	%r14, %rsi
    0000124d: 	callq	memcpy@PLT # Offset: 4685
    00001252: 	movq	0x18(%rsp), %r12
    00001257: 	movq	0x80(%rsp), %rax
    0000125f: 	jmp	.Ltmp2755 # Offset: 4703
.Ltmp2728:
    00001264: 	movq	%r14, %rdi
    00001267: 	leaq	0x18(%rsp), %rsi
    0000126c: 	xorl	%edx, %edx
    0000126e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4718
    00001273: 	movq	%rax, 0xe0(%rsp)
    0000127b: 	movq	%rax, %rdi
    0000127e: 	movq	0x18(%rsp), %rax
    00001283: 	movq	%rax, 0xf0(%rsp)
.Ltmp2791:
    0000128b: 	movq	%r12, %rdx
    0000128e: 	movq	%rbx, %rsi
    00001291: 	callq	memcpy@PLT # Offset: 4753
    00001296: 	movq	0x18(%rsp), %r12
    0000129b: 	movq	0xe0(%rsp), %rax
    000012a3: 	jmp	.Ltmp2759 # Offset: 4771
.Ltmp2711:
    000012a8: 	leaq	0xc0(%rsp), %rdi
    000012b0: 	leaq	0x18(%rsp), %rsi
    000012b5: 	xorl	%edx, %edx
    000012b7: 	movq	%r8, 0x8(%rsp)
    000012bc: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4796
    000012c1: 	movq	0x8(%rsp), %r8
    000012c6: 	movq	%rax, 0xc0(%rsp)
    000012ce: 	movq	%rax, %rdi
    000012d1: 	movq	0x18(%rsp), %rax
    000012d6: 	movq	%rax, 0xd0(%rsp)
.Ltmp2792:
    000012de: 	movq	%r12, %rdx
    000012e1: 	movq	%r8, %rsi
    000012e4: 	callq	memcpy@PLT # Offset: 4836
    000012e9: 	movq	0x18(%rsp), %r12
    000012ee: 	movq	0xc0(%rsp), %rax
    000012f6: 	jmp	.Ltmp2761 # Offset: 4854
.Ltmp2708:
    000012fb: 	movq	-0x8(%rdx), %rax
    000012ff: 	addq	$0x200, %rax
    00001305: 	jmp	.Ltmp2764 # Offset: 4869
.Ltmp2672:
    0000130a: 	movq	-0x8(%rdx), %rax
    0000130e: 	addq	$0x200, %rax
    00001314: 	jmp	.Ltmp2765 # Offset: 4884
.Ltmp2703:
    00001319: 	movq	%r14, %rsi
    0000131c: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001323: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 4899
    00001328: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000132f: 	jmp	.Ltmp2766 # Offset: 4911
.Ltmp2657:
    00001334: 	movq	-0x8(%rdx), %rax
    00001338: 	addq	$0x200, %rax
    0000133e: 	jmp	.Ltmp2767 # Offset: 4926
.Ltmp2652:
    00001343: 	movq	0x8(%rsp), %rsi
    00001348: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000134f: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 4943
    00001354: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000135b: 	jmp	.Ltmp2768 # Offset: 4955
.Ltmp2724:
    00001360: 	movq	-0x8(%rdx), %rax
    00001364: 	addq	$0x200, %rax
    0000136a: 	jmp	.Ltmp2769 # Offset: 4970
.Ltmp2692:
    0000136f: 	movq	-0x8(%rdx), %rax
    00001373: 	addq	$0x200, %rax
    00001379: 	jmp	.Ltmp2770 # Offset: 4985
.Ltmp2687:
    0000137e: 	movq	0x8(%rsp), %rsi
    00001383: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000138a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 5002
    0000138f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001396: 	jmp	.Ltmp2771 # Offset: 5014
.Ltmp2735:
    0000139b: 	movq	%r14, %rsi
    0000139e: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000013a5: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 5029
    000013aa: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000013b1: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000013b8: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000013bf: 	jne	.Ltmp2772 # Offset: 5055
.Ltmp2740:
    000013c5: 	movq	-0x8(%rdx), %rax
    000013c9: 	addq	$0x200, %rax
    000013cf: 	jmp	.Ltmp2772 # Offset: 5071
.Ltmp2667:
    000013d4: 	movq	0x8(%rsp), %rsi
    000013d9: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000013e0: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 5088
    000013e5: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000013ec: 	jmp	.Ltmp2773 # Offset: 5100
.Ltmp2719:
    000013f1: 	movq	%r14, %rsi
    000013f4: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000013fb: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 5115
    00001400: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001407: 	jmp	.Ltmp2774 # Offset: 5127
.Ltmp2671:
    0000140c: 	testq	%r12, %r12
    0000140f: 	je	.Ltmp2775 # Offset: 5135
    00001415: 	jmp	.Ltmp2776 # Offset: 5141
    0000141a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2707:
    00001420: 	testq	%r12, %r12
    00001423: 	je	.Ltmp2777 # Offset: 5155
    00001429: 	jmp	.Ltmp2778 # Offset: 5161
    0000142e: 	nop # Size: 2
.Ltmp2656:
    00001430: 	testq	%r12, %r12
    00001433: 	je	.Ltmp2779 # Offset: 5171
    00001439: 	jmp	.Ltmp2780 # Offset: 5177
    0000143e: 	nop # Size: 2
.Ltmp2723:
    00001440: 	testq	%r12, %r12
    00001443: 	je	.Ltmp2781 # Offset: 5187
    00001449: 	jmp	.Ltmp2782 # Offset: 5193
    0000144b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2739:
    00001450: 	testq	%r12, %r12
    00001453: 	je	.Ltmp2783 # Offset: 5203
.Ltmp2786:
    00001459: 	movq	0x8(%rsp), %rsi
    0000145e: 	movq	%r12, %rdx
    00001461: 	callq	memcpy@PLT # Offset: 5217
    00001466: 	movq	0x18(%rsp), %r12
    0000146b: 	movq	(%rbx), %rdi
    0000146e: 	jmp	.Ltmp2783 # Offset: 5230
.Ltmp2691:
    00001473: 	testq	%r12, %r12
    00001476: 	je	.Ltmp2784 # Offset: 5238
    0000147c: 	jmp	.Ltmp2785 # Offset: 5244
    0000147e: 	nop # Size: 2
.Ltmp2722:
    00001480: 	leaq	0x18(%rsp), %rsi
    00001485: 	xorl	%edx, %edx
    00001487: 	movq	%rbx, %rdi
    0000148a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5258
    0000148f: 	movq	%rax, (%rbx)
    00001492: 	movq	%rax, %rdi
    00001495: 	movq	0x18(%rsp), %rax
    0000149a: 	movq	%rax, 0x10(%rbx)
.Ltmp2782:
    0000149e: 	movq	0x8(%rsp), %rsi
    000014a3: 	movq	%r12, %rdx
    000014a6: 	callq	memcpy@PLT # Offset: 5286
    000014ab: 	movq	0x18(%rsp), %r12
    000014b0: 	movq	(%rbx), %rdi
    000014b3: 	jmp	.Ltmp2781 # Offset: 5299
.Ltmp2690:
    000014b8: 	leaq	0x18(%rsp), %rsi
    000014bd: 	xorl	%edx, %edx
    000014bf: 	movq	%rbx, %rdi
    000014c2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5314
    000014c7: 	movq	%rax, (%rbx)
    000014ca: 	movq	%rax, %rdi
    000014cd: 	movq	0x18(%rsp), %rax
    000014d2: 	movq	%rax, 0x10(%rbx)
.Ltmp2785:
    000014d6: 	movq	%r12, %rdx
    000014d9: 	movq	%r14, %rsi
    000014dc: 	callq	memcpy@PLT # Offset: 5340
    000014e1: 	movq	0x18(%rsp), %r12
    000014e6: 	movq	(%rbx), %rdi
    000014e9: 	jmp	.Ltmp2784 # Offset: 5353
.Ltmp2670:
    000014ee: 	leaq	0x18(%rsp), %rsi
    000014f3: 	xorl	%edx, %edx
    000014f5: 	movq	%rbx, %rdi
    000014f8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5368
    000014fd: 	movq	%rax, (%rbx)
    00001500: 	movq	%rax, %rdi
    00001503: 	movq	0x18(%rsp), %rax
    00001508: 	movq	%rax, 0x10(%rbx)
.Ltmp2776:
    0000150c: 	movq	%r12, %rdx
    0000150f: 	movq	%r14, %rsi
    00001512: 	callq	memcpy@PLT # Offset: 5394
    00001517: 	movq	0x18(%rsp), %r12
    0000151c: 	movq	(%rbx), %rdi
    0000151f: 	jmp	.Ltmp2775 # Offset: 5407
.Ltmp2655:
    00001524: 	leaq	0x18(%rsp), %rsi
    00001529: 	xorl	%edx, %edx
    0000152b: 	movq	%rbx, %rdi
    0000152e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5422
    00001533: 	movq	%rax, (%rbx)
    00001536: 	movq	%rax, %rdi
    00001539: 	movq	0x18(%rsp), %rax
    0000153e: 	movq	%rax, 0x10(%rbx)
.Ltmp2780:
    00001542: 	movq	%r12, %rdx
    00001545: 	movq	%r14, %rsi
    00001548: 	callq	memcpy@PLT # Offset: 5448
    0000154d: 	movq	0x18(%rsp), %r12
    00001552: 	movq	(%rbx), %rdi
    00001555: 	jmp	.Ltmp2779 # Offset: 5461
.Ltmp2706:
    0000155a: 	leaq	0x18(%rsp), %rsi
    0000155f: 	xorl	%edx, %edx
    00001561: 	movq	%rbx, %rdi
    00001564: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5476
    00001569: 	movq	%rax, (%rbx)
    0000156c: 	movq	%rax, %rdi
    0000156f: 	movq	0x18(%rsp), %rax
    00001574: 	movq	%rax, 0x10(%rbx)
.Ltmp2778:
    00001578: 	movq	(%rsp), %rsi
    0000157c: 	movq	%r12, %rdx
    0000157f: 	callq	memcpy@PLT # Offset: 5503
    00001584: 	movq	0x18(%rsp), %r12
    00001589: 	movq	(%rbx), %rdi
    0000158c: 	jmp	.Ltmp2777 # Offset: 5516
.Ltmp2738:
    00001591: 	leaq	0x18(%rsp), %rsi
    00001596: 	xorl	%edx, %edx
    00001598: 	movq	%rbx, %rdi
    0000159b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5531
    000015a0: 	movq	%rax, (%rbx)
    000015a3: 	movq	%rax, %rdi
    000015a6: 	movq	0x18(%rsp), %rax
    000015ab: 	movq	%rax, 0x10(%rbx)
    000015af: 	jmp	.Ltmp2786 # Offset: 5551
.Ltmp2647:
    000015b4: 	leaq	DATAat0x4d194(%rip), %rdi
    000015bb: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 5563
.Ltmp2654:
    000015c0: 	leaq	DATAat0x4d018(%rip), %rdi
    000015c7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 5575
.Ltmp2662:
    000015cc: 	leaq	DATAat0x4d194(%rip), %rdi
    000015d3: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 5587
.Ltmp2669:
    000015d8: 	leaq	DATAat0x4d018(%rip), %rdi
    000015df: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 5599
.Ltmp2677:
    000015e4: 	leaq	DATAat0x4d194(%rip), %rdi
    000015eb: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 5611
.Ltmp2682:
    000015f0: 	leaq	DATAat0x4d194(%rip), %rdi
    000015f7: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 5623
.Ltmp2689:
    000015fc: 	leaq	DATAat0x4d018(%rip), %rdi
    00001603: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 5635
.Ltmp2697:
    00001608: 	leaq	DATAat0x4d194(%rip), %rdi
    0000160f: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 5647
.Ltmp2705:
    00001614: 	leaq	DATAat0x4d018(%rip), %rdi
    0000161b: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 5659
.Ltmp2713:
    00001620: 	leaq	DATAat0x4d194(%rip), %rdi
    00001627: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 5671
.Ltmp2721:
    0000162c: 	leaq	DATAat0x4d018(%rip), %rdi
    00001633: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 5683
.Ltmp2730:
    00001638: 	leaq	DATAat0x4d194(%rip), %rdi
    0000163f: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 5695
.Ltmp2737:
    00001644: 	leaq	DATAat0x4d018(%rip), %rdi
    0000164b: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 5707
.Ltmp2743:
    00001650: 	callq	__stack_chk_fail@PLT # Offset: 5712
.Ltmp2744:
    00001655: 	movq	(%rsp), %rdi
    00001659: 	jmp	.Ltmp2787 # Offset: 5721
.Ltmp2752:
    0000165e: 	movq	%rbx, %rdi
    00001661: 	jmp	.Ltmp2788 # Offset: 5729
.Ltmp2754:
    00001666: 	movq	(%rsp), %rdi
    0000166a: 	jmp	.Ltmp2789 # Offset: 5738
.Ltmp2756:
    0000166f: 	movq	%rbx, %rdi
    00001672: 	jmp	.Ltmp2790 # Offset: 5746
.Ltmp2758:
    00001677: 	movq	(%rsp), %rdi
    0000167b: 	jmp	.Ltmp2791 # Offset: 5755
.Ltmp2760:
    00001680: 	movq	%rbx, %rdi
    00001683: 	jmp	.Ltmp2792 # Offset: 5763
.Ltmp2762:
    00001688: 	movq	(%rsp), %rdi
    0000168c: 	jmp	.Ltmp2793 # Offset: 5772
.Ltmp2644:
    00001691: 	leaq	DATAat0x4d018(%rip), %rdi
    00001698: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 5784
    0000169d: 	endbr64
.Ltmp2795:
    000016a1: 	movq	%rax, %rbp
    000016a4: 	jmp	.Ltmp2794 # Offset: 5796
    000016a9: 	endbr64
    000016ad: 	jmp	.Ltmp2795 # Offset: 5805
    000016af: 	endbr64
    000016b3: 	jmp	.Ltmp2795 # Offset: 5811
    000016b5: 	endbr64
.Ltmp2802:
    000016b9: 	movq	%rax, %rbp
    000016bc: 	jmp	.Ltmp2796 # Offset: 5820
    000016be: 	endbr64
.Ltmp2809:
    000016c2: 	movq	%rax, %rbp
    000016c5: 	jmp	.Ltmp2797 # Offset: 5829
.Ltmp2796:
    000016c7: 	movq	0xc0(%rsp), %rdi
    000016cf: 	cmpq	%rbx, %rdi
    000016d2: 	je	.Ltmp2798 # Offset: 5842
    000016d4: 	movq	0xd0(%rsp), %rax
    000016dc: 	leaq	0x1(%rax), %rsi
    000016e0: 	callq	_ZdlPvm@PLT # Offset: 5856
.Ltmp2798:
    000016e5: 	movq	%rbp, %rdi
    000016e8: 	callq	_Unwind_Resume@PLT # Offset: 5864
.Ltmp2797:
    000016ed: 	movq	0xa0(%rsp), %rdi
    000016f5: 	cmpq	%rbx, %rdi
    000016f8: 	je	.Ltmp2798 # Offset: 5880
    000016fa: 	movq	0xb0(%rsp), %rax
    00001702: 	leaq	0x1(%rax), %rsi
    00001706: 	callq	_ZdlPvm@PLT # Offset: 5894
    0000170b: 	jmp	.Ltmp2798 # Offset: 5899
    0000170d: 	endbr64
    00001711: 	jmp	.Ltmp2795 # Offset: 5905
    00001713: 	endbr64
.Ltmp2801:
    00001717: 	movq	%rax, %rbp
    0000171a: 	jmp	.Ltmp2799 # Offset: 5914
    0000171c: 	endbr64
.Ltmp2808:
    00001720: 	movq	%rax, %rbp
    00001723: 	jmp	.Ltmp2800 # Offset: 5923
    00001725: 	endbr64
    00001729: 	jmp	.Ltmp2801 # Offset: 5929
.Ltmp2799:
    0000172b: 	movq	0x20(%rsp), %rdi
    00001730: 	cmpq	(%rsp), %rdi
    00001734: 	je	.Ltmp2798 # Offset: 5940
    00001736: 	movq	0x30(%rsp), %rax
    0000173b: 	leaq	0x1(%rax), %rsi
    0000173f: 	callq	_ZdlPvm@PLT # Offset: 5951
    00001744: 	jmp	.Ltmp2798 # Offset: 5956
.Ltmp2800:
    00001746: 	movq	0x80(%rsp), %rdi
    0000174e: 	cmpq	(%rsp), %rdi
    00001752: 	je	.Ltmp2798 # Offset: 5970
    00001754: 	movq	0x90(%rsp), %rax
    0000175c: 	leaq	0x1(%rax), %rsi
    00001760: 	callq	_ZdlPvm@PLT # Offset: 5984
    00001765: 	jmp	.Ltmp2798 # Offset: 5989
    0000176a: 	endbr64
    0000176e: 	jmp	.Ltmp2795 # Offset: 5998
    00001773: 	endbr64
    00001777: 	jmp	.Ltmp2802 # Offset: 6007
    0000177c: 	endbr64
    00001780: 	movq	%rax, %rbp
    00001783: 	jmp	.Ltmp2803 # Offset: 6019
.Ltmp2794:
    00001785: 	movq	0xe0(%rsp), %rdi
    0000178d: 	cmpq	(%rsp), %rdi
    00001791: 	je	.Ltmp2798 # Offset: 6033
.Ltmp2804:
    00001797: 	movq	0xf0(%rsp), %rax
    0000179f: 	leaq	0x1(%rax), %rsi
    000017a3: 	callq	_ZdlPvm@PLT # Offset: 6051
    000017a8: 	jmp	.Ltmp2798 # Offset: 6056
.Ltmp2803:
    000017ad: 	movq	0xe0(%rsp), %rdi
    000017b5: 	leaq	0xf0(%rsp), %rax
    000017bd: 	cmpq	%rax, %rdi
    000017c0: 	jne	.Ltmp2804 # Offset: 6080
    000017c2: 	jmp	.Ltmp2798 # Offset: 6082
    000017c7: 	endbr64
.Ltmp2810:
    000017cb: 	movq	%rax, %rbp
    000017ce: 	jmp	.Ltmp2805 # Offset: 6094
    000017d0: 	endbr64
.Ltmp2807:
    000017d4: 	movq	%rax, %rbp
    000017d7: 	jmp	.Ltmp2806 # Offset: 6103
.Ltmp2805:
    000017d9: 	movq	0x40(%rsp), %rdi
    000017de: 	cmpq	(%rsp), %rdi
    000017e2: 	je	.Ltmp2798 # Offset: 6114
    000017e8: 	movq	0x50(%rsp), %rax
    000017ed: 	leaq	0x1(%rax), %rsi
    000017f1: 	callq	_ZdlPvm@PLT # Offset: 6129
    000017f6: 	jmp	.Ltmp2798 # Offset: 6134
.Ltmp2806:
    000017fb: 	movq	0x60(%rsp), %rdi
    00001800: 	cmpq	%rbx, %rdi
    00001803: 	je	.Ltmp2798 # Offset: 6147
    00001809: 	movq	0x70(%rsp), %rax
    0000180e: 	leaq	0x1(%rax), %rsi
    00001812: 	callq	_ZdlPvm@PLT # Offset: 6162
    00001817: 	jmp	.Ltmp2798 # Offset: 6167
    0000181c: 	endbr64
    00001820: 	jmp	.Ltmp2807 # Offset: 6176
    00001822: 	endbr64
    00001826: 	jmp	.Ltmp2808 # Offset: 6182
    0000182b: 	endbr64
    0000182f: 	jmp	.Ltmp2809 # Offset: 6191
    00001834: 	endbr64
    00001838: 	jmp	.Ltmp2810 # Offset: 6200
DWARF CFI Instructions:
    <empty>
End of Function "_Z16TestUnrolledTypeIjLi8EEvPT_S0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z16TestUnrolledTypeIiLi8EEvPT_S0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 179
  State       : disassembled
  Address     : 0x28760
  Size        : 0x184a
  MaxSize     : 0x1850
  Offset      : 0x28760
  Section     : .text
  Orc Section : .local.text._Z16TestUnrolledTypeIiLi8EEvPT_S0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0178:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdx, %r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdi, %rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x128, %rsp
    0000001b: 	movq	(%rdx), %r15
    0000001e: 	movq	0x8(%rdx), %r12
    00000022: 	movl	%esi, 0xc(%rsp)
    00000026: 	leaq	0x40(%rsp), %r14
    0000002b: 	movq	%fs:0x28, %rax
    00000034: 	movq	%rax, 0x118(%rsp)
    0000003c: 	xorl	%eax, %eax
    0000003e: 	movq	%r15, %rax
    00000041: 	movq	%r14, 0x30(%rsp)
    00000046: 	addq	%r12, %rax
    00000049: 	je	.Ltmp2811 # Offset: 73
    0000004b: 	testq	%r15, %r15
    0000004e: 	je	.Ltmp2812 # Offset: 78
.Ltmp2811:
    00000054: 	movq	%r12, 0x28(%rsp)
    00000059: 	cmpq	$0xf, %r12
    0000005d: 	ja	.Ltmp2813 # Offset: 93
    00000063: 	cmpq	$0x1, %r12
    00000067: 	jne	.Ltmp2814 # Offset: 103
    0000006d: 	movzbl	(%r15), %eax
    00000071: 	movb	%al, 0x40(%rsp)
    00000075: 	movq	%r14, %rax
.Ltmp2913:
    00000078: 	movq	%r12, 0x38(%rsp)
    0000007d: 	movb	$0x0, (%rax,%r12)
    00000082: 	movabsq	$0x3fffffffffffffff, %rax
    0000008c: 	subq	0x38(%rsp), %rax
    00000091: 	cmpq	$0x7, %rax
    00000095: 	jbe	.Ltmp2815 # Offset: 149
    0000009b: 	leaq	0x30(%rsp), %rax
    000000a0: 	movl	$0x8, %edx
    000000a5: 	leaq	DATAat0x4d1e4(%rip), %rsi
    000000ac: 	movq	%rax, %rdi
    000000af: 	movq	%rax, (%rsp)
    000000b3: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 179
    000000b8: 	callq	clock@PLT # Offset: 184
    000000bd: 	movl	iterations(%rip), %ecx
    000000c3: 	xorl	%r12d, %r12d
    000000c6: 	leaq	0x7cf0(%rbp), %rbx
    000000cd: 	movq	%rax, start_time(%rip)
    000000d4: 	leaq	DATAat0x4d004(%rip), %r15
    000000db: 	testl	%ecx, %ecx
    000000dd: 	jle	.Ltmp2816 # Offset: 221
    000000e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2819:
    000000e8: 	movl	(%rbp), %edx
    000000eb: 	subl	0x4(%rbp), %edx
    000000ee: 	movq	%rbp, %rax
    000000f1: 	pxor	%xmm0, %xmm0
    000000f5: 	shll	$0x3, %edx
    000000f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2817:
    00000100: 	movdqu	(%rax), %xmm1
    00000104: 	movdqu	0x4(%rax), %xmm6
    00000109: 	addq	$0x10, %rax
    0000010d: 	psubd	%xmm6, %xmm1
    00000111: 	pslld	$0x3, %xmm1
    00000116: 	paddd	%xmm1, %xmm0
    0000011a: 	cmpq	%rax, %rbx
    0000011d: 	jne	.Ltmp2817 # Offset: 285
    0000011f: 	movq	0x7cf4(%rbp), %xmm2
    00000127: 	movdqa	%xmm0, %xmm1
    0000012b: 	psrldq	$0x8, %xmm1
    00000130: 	paddd	%xmm1, %xmm0
    00000134: 	movq	0x7cf0(%rbp), %xmm1
    0000013c: 	psubd	%xmm2, %xmm1
    00000140: 	movdqa	%xmm0, %xmm2
    00000144: 	psrldq	$0x4, %xmm2
    00000149: 	paddd	%xmm2, %xmm0
    0000014d: 	pslld	$0x3, %xmm1
    00000152: 	movd	%xmm0, %eax
    00000156: 	addl	%edx, %eax
    00000158: 	pshufd	$0xe5, %xmm1, %xmm3
    0000015d: 	movd	%xmm1, %edx
    00000161: 	movd	%xmm3, %esi
    00000165: 	addl	%esi, %edx
    00000167: 	addl	%edx, %eax
    00000169: 	movl	0x7cf8(%rbp), %edx
    0000016f: 	subl	0x7cfc(%rbp), %edx
    00000175: 	leal	(%rax,%rdx,8), %eax
    00000178: 	testl	%eax, %eax
    0000017a: 	jne	.Ltmp2818 # Offset: 378
.Ltmp2914:
    00000180: 	addl	$0x1, %r12d
    00000184: 	cmpl	%ecx, %r12d
    00000187: 	jl	.Ltmp2819 # Offset: 391
.Ltmp2816:
    0000018d: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000194: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000019b: 	subq	$0x20, %rax
    0000019f: 	cmpq	%rax, %rbx
    000001a2: 	je	.Ltmp2820 # Offset: 418
    000001a8: 	leaq	0x10(%rbx), %rdi
    000001ac: 	movq	0x38(%rsp), %r12
    000001b1: 	movq	%rdi, (%rbx)
    000001b4: 	movq	0x30(%rsp), %r15
    000001b9: 	movq	%r15, %rax
    000001bc: 	addq	%r12, %rax
    000001bf: 	je	.Ltmp2821 # Offset: 447
    000001c1: 	testq	%r15, %r15
    000001c4: 	je	.Ltmp2822 # Offset: 452
.Ltmp2821:
    000001ca: 	movq	%r12, 0x28(%rsp)
    000001cf: 	cmpq	$0xf, %r12
    000001d3: 	ja	.Ltmp2823 # Offset: 467
    000001d9: 	cmpq	$0x1, %r12
    000001dd: 	jne	.Ltmp2824 # Offset: 477
    000001e3: 	movzbl	(%r15), %eax
    000001e7: 	movb	%al, 0x10(%rbx)
.Ltmp2944:
    000001ea: 	movq	%r12, 0x8(%rbx)
    000001ee: 	movb	$0x0, (%rdi,%r12)
    000001f3: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001fa: 	addq	$0x20, %rax
    000001fe: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp2942:
    00000205: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000020c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000213: 	je	.Ltmp2825 # Offset: 531
.Ltmp2941:
    00000219: 	movq	-0x20(%rax), %r12
    0000021d: 	callq	clock@PLT # Offset: 541
    00000222: 	pxor	%xmm0, %xmm0
    00000226: 	movq	%rax, end_time(%rip)
    0000022d: 	movq	%r12, %rdi
    00000230: 	subq	start_time(%rip), %rax
    00000237: 	cvtsi2sd	%rax, %xmm0
    0000023c: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000244: 	callq	_Z13record_resultdPKc # Offset: 580
    00000249: 	movq	0x30(%rsp), %rdi
    0000024e: 	cmpq	%r14, %rdi
    00000251: 	je	.Ltmp2826 # Offset: 593
    00000253: 	movq	0x40(%rsp), %rax
    00000258: 	leaq	0x1(%rax), %rsi
    0000025c: 	callq	_ZdlPvm@PLT # Offset: 604
.Ltmp2826:
    00000261: 	movq	(%r13), %r15
    00000265: 	movq	0x8(%r13), %r12
    00000269: 	leaq	0x60(%rsp), %r14
    0000026e: 	movq	%r14, 0x50(%rsp)
    00000273: 	movq	%r15, %rax
    00000276: 	addq	%r12, %rax
    00000279: 	je	.Ltmp2827 # Offset: 633
    0000027b: 	testq	%r15, %r15
    0000027e: 	je	.Ltmp2812 # Offset: 638
.Ltmp2827:
    00000284: 	movq	%r12, 0x28(%rsp)
    00000289: 	cmpq	$0xf, %r12
    0000028d: 	ja	.Ltmp2828 # Offset: 653
    00000293: 	cmpq	$0x1, %r12
    00000297: 	jne	.Ltmp2829 # Offset: 663
    0000029d: 	movzbl	(%r15), %eax
    000002a1: 	movb	%al, 0x60(%rsp)
    000002a5: 	movq	%r14, %rax
.Ltmp2927:
    000002a8: 	movq	%r12, 0x58(%rsp)
    000002ad: 	movb	$0x0, (%rax,%r12)
    000002b2: 	movabsq	$0x3fffffffffffffff, %rax
    000002bc: 	subq	0x58(%rsp), %rax
    000002c1: 	cmpq	$0xc, %rax
    000002c5: 	jbe	.Ltmp2830 # Offset: 709
    000002cb: 	leaq	0x50(%rsp), %rax
    000002d0: 	movl	$0xd, %edx
    000002d5: 	leaq	DATAat0x4d1f1(%rip), %rsi
    000002dc: 	movq	%rax, %rdi
    000002df: 	movq	%rax, (%rsp)
    000002e3: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 739
    000002e8: 	callq	clock@PLT # Offset: 744
    000002ed: 	movl	iterations(%rip), %esi
    000002f3: 	xorl	%r12d, %r12d
    000002f6: 	leaq	0x7cf0(%rbp), %rbx
    000002fd: 	movq	%rax, start_time(%rip)
    00000304: 	leaq	DATAat0x4d004(%rip), %r15
    0000030b: 	testl	%esi, %esi
    0000030d: 	jle	.Ltmp2831 # Offset: 781
    00000313: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2834:
    00000318: 	movl	(%rbp), %edx
    0000031b: 	subl	0x4(%rbp), %edx
    0000031e: 	movq	%rbp, %rax
    00000321: 	pxor	%xmm0, %xmm0
    00000325: 	shll	$0x3, %edx
    00000328: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2832:
    00000330: 	movdqu	(%rax), %xmm1
    00000334: 	movdqu	0x4(%rax), %xmm4
    00000339: 	addq	$0x10, %rax
    0000033d: 	psubd	%xmm4, %xmm1
    00000341: 	pslld	$0x3, %xmm1
    00000346: 	paddd	%xmm1, %xmm0
    0000034a: 	cmpq	%rax, %rbx
    0000034d: 	jne	.Ltmp2832 # Offset: 845
    0000034f: 	movdqa	%xmm0, %xmm1
    00000353: 	movl	0x7cf8(%rbp), %ecx
    00000359: 	movq	0x7cf4(%rbp), %xmm2
    00000361: 	psrldq	$0x8, %xmm1
    00000366: 	subl	0x7cfc(%rbp), %ecx
    0000036c: 	paddd	%xmm1, %xmm0
    00000370: 	movq	0x7cf0(%rbp), %xmm1
    00000378: 	psubd	%xmm2, %xmm1
    0000037c: 	movdqa	%xmm0, %xmm2
    00000380: 	psrldq	$0x4, %xmm2
    00000385: 	paddd	%xmm2, %xmm0
    00000389: 	pslld	$0x3, %xmm1
    0000038e: 	movd	%xmm0, %eax
    00000392: 	addl	%edx, %eax
    00000394: 	pshufd	$0xe5, %xmm1, %xmm4
    00000399: 	movd	%xmm1, %edx
    0000039d: 	movd	%xmm4, %edi
    000003a1: 	addl	%edi, %edx
    000003a3: 	addl	%edx, %eax
    000003a5: 	leal	(%rax,%rcx,8), %eax
    000003a8: 	testl	%eax, %eax
    000003aa: 	jne	.Ltmp2833 # Offset: 938
.Ltmp2915:
    000003b0: 	addl	$0x1, %r12d
    000003b4: 	cmpl	%esi, %r12d
    000003b7: 	jl	.Ltmp2834 # Offset: 951
.Ltmp2831:
    000003bd: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000003c4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000003cb: 	subq	$0x20, %rax
    000003cf: 	cmpq	%rax, %rbx
    000003d2: 	je	.Ltmp2835 # Offset: 978
    000003d8: 	leaq	0x10(%rbx), %rdi
    000003dc: 	movq	0x58(%rsp), %r12
    000003e1: 	movq	%rdi, (%rbx)
    000003e4: 	movq	0x50(%rsp), %r15
    000003e9: 	movq	%r15, %rax
    000003ec: 	addq	%r12, %rax
    000003ef: 	je	.Ltmp2836 # Offset: 1007
    000003f1: 	testq	%r15, %r15
    000003f4: 	je	.Ltmp2837 # Offset: 1012
.Ltmp2836:
    000003fa: 	movq	%r12, 0x28(%rsp)
    000003ff: 	cmpq	$0xf, %r12
    00000403: 	ja	.Ltmp2838 # Offset: 1027
    00000409: 	cmpq	$0x1, %r12
    0000040d: 	jne	.Ltmp2839 # Offset: 1037
    00000413: 	movzbl	(%r15), %eax
    00000417: 	movb	%al, 0x10(%rbx)
.Ltmp2951:
    0000041a: 	movq	%r12, 0x8(%rbx)
    0000041e: 	movb	$0x0, (%rdi,%r12)
    00000423: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000042a: 	addq	$0x20, %rax
    0000042e: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp2937:
    00000435: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000043c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000443: 	je	.Ltmp2840 # Offset: 1091
.Ltmp2934:
    00000449: 	movq	-0x20(%rax), %r12
    0000044d: 	callq	clock@PLT # Offset: 1101
    00000452: 	pxor	%xmm0, %xmm0
    00000456: 	movq	%rax, end_time(%rip)
    0000045d: 	movq	%r12, %rdi
    00000460: 	subq	start_time(%rip), %rax
    00000467: 	cvtsi2sd	%rax, %xmm0
    0000046c: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000474: 	callq	_Z13record_resultdPKc # Offset: 1140
    00000479: 	movq	0x50(%rsp), %rdi
    0000047e: 	cmpq	%r14, %rdi
    00000481: 	je	.Ltmp2841 # Offset: 1153
    00000483: 	movq	0x60(%rsp), %rax
    00000488: 	leaq	0x1(%rax), %rsi
    0000048c: 	callq	_ZdlPvm@PLT # Offset: 1164
.Ltmp2841:
    00000491: 	leaq	0xf0(%rsp), %r14
    00000499: 	leaq	DATAat0x4d22b(%rip), %rdx
    000004a0: 	movq	%r13, %rsi
    000004a3: 	movq	%r14, %rdi
    000004a6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1190
    000004ab: 	movl	0xc(%rsp), %edx
    000004af: 	movq	%r14, %rcx
    000004b2: 	movq	%rbp, %rdi
    000004b5: 	movl	$0x1f40, %esi
    000004ba: 	callq	_Z9test_CSENIi14custom_cse_addIiELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1210
    000004bf: 	movq	0xf0(%rsp), %rdi
    000004c7: 	leaq	0x100(%rsp), %rax
    000004cf: 	movq	%rax, (%rsp)
    000004d3: 	cmpq	%rax, %rdi
    000004d6: 	je	.Ltmp2842 # Offset: 1238
    000004d8: 	movq	0x100(%rsp), %rax
    000004e0: 	leaq	0x1(%rax), %rsi
    000004e4: 	callq	_ZdlPvm@PLT # Offset: 1252
.Ltmp2842:
    000004e9: 	leaq	DATAat0x4d234(%rip), %rdx
    000004f0: 	movq	%r13, %rsi
    000004f3: 	movq	%r14, %rdi
    000004f6: 	xorl	%r12d, %r12d
    000004f9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1273
    000004fe: 	leaq	0x7cf0(%rbp), %rbx
    00000505: 	leaq	DATAat0x4d004(%rip), %r15
    0000050c: 	callq	clock@PLT # Offset: 1292
    00000511: 	movl	iterations(%rip), %ecx
    00000517: 	movq	%rax, start_time(%rip)
    0000051e: 	testl	%ecx, %ecx
    00000520: 	jle	.Ltmp2843 # Offset: 1312
    00000526: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2846:
    00000530: 	movl	(%rbp), %edx
    00000533: 	subl	0x4(%rbp), %edx
    00000536: 	movq	%rbp, %rax
    00000539: 	pxor	%xmm0, %xmm0
    0000053d: 	shll	$0x3, %edx
.Ltmp2844:
    00000540: 	movdqu	(%rax), %xmm1
    00000544: 	movdqu	0x4(%rax), %xmm5
    00000549: 	addq	$0x10, %rax
    0000054d: 	psubd	%xmm5, %xmm1
    00000551: 	pslld	$0x3, %xmm1
    00000556: 	paddd	%xmm1, %xmm0
    0000055a: 	cmpq	%rax, %rbx
    0000055d: 	jne	.Ltmp2844 # Offset: 1373
    0000055f: 	movq	0x7cf4(%rbp), %xmm2
    00000567: 	movdqa	%xmm0, %xmm1
    0000056b: 	psrldq	$0x8, %xmm1
    00000570: 	paddd	%xmm1, %xmm0
    00000574: 	movq	0x7cf0(%rbp), %xmm1
    0000057c: 	psubd	%xmm2, %xmm1
    00000580: 	movdqa	%xmm0, %xmm2
    00000584: 	psrldq	$0x4, %xmm2
    00000589: 	paddd	%xmm2, %xmm0
    0000058d: 	pslld	$0x3, %xmm1
    00000592: 	movd	%xmm0, %eax
    00000596: 	addl	%edx, %eax
    00000598: 	pshufd	$0xe5, %xmm1, %xmm5
    0000059d: 	movd	%xmm1, %edx
    000005a1: 	movd	%xmm5, %esi
    000005a5: 	addl	%esi, %edx
    000005a7: 	addl	%edx, %eax
    000005a9: 	movl	0x7cf8(%rbp), %edx
    000005af: 	subl	0x7cfc(%rbp), %edx
    000005b5: 	leal	(%rax,%rdx,8), %eax
    000005b8: 	testl	%eax, %eax
    000005ba: 	jne	.Ltmp2845 # Offset: 1466
.Ltmp2917:
    000005c0: 	addl	$0x1, %r12d
    000005c4: 	cmpl	%ecx, %r12d
    000005c7: 	jl	.Ltmp2846 # Offset: 1479
.Ltmp2843:
    000005cd: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000005d4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000005db: 	subq	$0x20, %rax
    000005df: 	cmpq	%rax, %rbx
    000005e2: 	je	.Ltmp2847 # Offset: 1506
    000005e8: 	leaq	0x10(%rbx), %rdi
    000005ec: 	movq	0xf8(%rsp), %r12
    000005f4: 	movq	%rdi, (%rbx)
    000005f7: 	movq	0xf0(%rsp), %r15
    000005ff: 	movq	%r15, %rax
    00000602: 	addq	%r12, %rax
    00000605: 	je	.Ltmp2848 # Offset: 1541
    00000607: 	testq	%r15, %r15
    0000060a: 	je	.Ltmp2849 # Offset: 1546
.Ltmp2848:
    00000610: 	movq	%r12, 0x28(%rsp)
    00000615: 	cmpq	$0xf, %r12
    00000619: 	ja	.Ltmp2850 # Offset: 1561
    0000061f: 	cmpq	$0x1, %r12
    00000623: 	jne	.Ltmp2851 # Offset: 1571
    00000629: 	movzbl	(%r15), %eax
    0000062d: 	movb	%al, 0x10(%rbx)
.Ltmp2948:
    00000630: 	movq	%r12, 0x8(%rbx)
    00000634: 	movb	$0x0, (%rdi,%r12)
    00000639: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000640: 	addq	$0x20, %rax
    00000644: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp2936:
    0000064b: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000652: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000659: 	je	.Ltmp2852 # Offset: 1625
.Ltmp2935:
    0000065f: 	movq	-0x20(%rax), %r12
    00000663: 	callq	clock@PLT # Offset: 1635
    00000668: 	pxor	%xmm0, %xmm0
    0000066c: 	movq	%rax, end_time(%rip)
    00000673: 	movq	%r12, %rdi
    00000676: 	subq	start_time(%rip), %rax
    0000067d: 	cvtsi2sd	%rax, %xmm0
    00000682: 	divsd	DATAat0x4d640(%rip), %xmm0
    0000068a: 	callq	_Z13record_resultdPKc # Offset: 1674
    0000068f: 	movq	0xf0(%rsp), %rdi
    00000697: 	cmpq	(%rsp), %rdi
    0000069b: 	je	.Ltmp2853 # Offset: 1691
    0000069d: 	movq	0x100(%rsp), %rax
    000006a5: 	leaq	0x1(%rax), %rsi
    000006a9: 	callq	_ZdlPvm@PLT # Offset: 1705
.Ltmp2853:
    000006ae: 	movq	(%r13), %r15
    000006b2: 	movq	0x8(%r13), %r12
    000006b6: 	leaq	0x80(%rsp), %rbx
    000006be: 	movq	%rbx, 0x70(%rsp)
    000006c3: 	movq	%r15, %rax
    000006c6: 	addq	%r12, %rax
    000006c9: 	je	.Ltmp2854 # Offset: 1737
    000006cb: 	testq	%r15, %r15
    000006ce: 	je	.Ltmp2812 # Offset: 1742
.Ltmp2854:
    000006d4: 	movq	%r12, 0x28(%rsp)
    000006d9: 	cmpq	$0xf, %r12
    000006dd: 	ja	.Ltmp2855 # Offset: 1757
    000006e3: 	cmpq	$0x1, %r12
    000006e7: 	jne	.Ltmp2856 # Offset: 1767
    000006ed: 	movzbl	(%r15), %eax
    000006f1: 	movb	%al, 0x80(%rsp)
    000006f8: 	movq	%rbx, %rax
.Ltmp2931:
    000006fb: 	movq	%r12, 0x78(%rsp)
    00000700: 	movb	$0x0, (%rax,%r12)
    00000705: 	movabsq	$0x3fffffffffffffff, %rax
    0000070f: 	subq	0x78(%rsp), %rax
    00000714: 	cmpq	$0x8, %rax
    00000718: 	jbe	.Ltmp2857 # Offset: 1816
    0000071e: 	leaq	0x70(%rsp), %r12
    00000723: 	movl	$0x9, %edx
    00000728: 	leaq	DATAat0x4d24b(%rip), %rsi
    0000072f: 	movq	%r12, %rdi
    00000732: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1842
    00000737: 	movl	0xc(%rsp), %edx
    0000073b: 	movq	%r12, %rcx
    0000073e: 	movl	$0x1f40, %esi
    00000743: 	movq	%rbp, %rdi
    00000746: 	callq	_Z9test_CSENIi14custom_cse_subIiELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1862
    0000074b: 	movq	0x70(%rsp), %rdi
    00000750: 	cmpq	%rbx, %rdi
    00000753: 	je	.Ltmp2858 # Offset: 1875
    00000755: 	movq	0x80(%rsp), %rax
    0000075d: 	leaq	0x1(%rax), %rsi
    00000761: 	callq	_ZdlPvm@PLT # Offset: 1889
.Ltmp2858:
    00000766: 	movq	%r13, %rsi
    00000769: 	leaq	DATAat0x4d259(%rip), %rdx
    00000770: 	movq	%r14, %rdi
    00000773: 	xorl	%r12d, %r12d
    00000776: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1910
    0000077b: 	leaq	0x7cf0(%rbp), %rbx
    00000782: 	leaq	DATAat0x4d004(%rip), %r15
    00000789: 	callq	clock@PLT # Offset: 1929
    0000078e: 	movl	iterations(%rip), %esi
    00000794: 	movq	%rax, start_time(%rip)
    0000079b: 	testl	%esi, %esi
    0000079d: 	jle	.Ltmp2859 # Offset: 1949
    000007a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2862:
    000007a8: 	movl	(%rbp), %edx
    000007ab: 	subl	0x4(%rbp), %edx
    000007ae: 	movq	%rbp, %rax
    000007b1: 	pxor	%xmm0, %xmm0
    000007b5: 	shll	$0x3, %edx
    000007b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2860:
    000007c0: 	movdqu	(%rax), %xmm1
    000007c4: 	movdqu	0x4(%rax), %xmm3
    000007c9: 	addq	$0x10, %rax
    000007cd: 	psubd	%xmm3, %xmm1
    000007d1: 	pslld	$0x3, %xmm1
    000007d6: 	paddd	%xmm1, %xmm0
    000007da: 	cmpq	%rax, %rbx
    000007dd: 	jne	.Ltmp2860 # Offset: 2013
    000007df: 	movdqa	%xmm0, %xmm1
    000007e3: 	movl	0x7cf8(%rbp), %ecx
    000007e9: 	movq	0x7cf4(%rbp), %xmm2
    000007f1: 	psrldq	$0x8, %xmm1
    000007f6: 	subl	0x7cfc(%rbp), %ecx
    000007fc: 	paddd	%xmm1, %xmm0
    00000800: 	movq	0x7cf0(%rbp), %xmm1
    00000808: 	psubd	%xmm2, %xmm1
    0000080c: 	movdqa	%xmm0, %xmm2
    00000810: 	psrldq	$0x4, %xmm2
    00000815: 	paddd	%xmm2, %xmm0
    00000819: 	pslld	$0x3, %xmm1
    0000081e: 	movd	%xmm0, %eax
    00000822: 	addl	%edx, %eax
    00000824: 	pshufd	$0xe5, %xmm1, %xmm6
    00000829: 	movd	%xmm1, %edx
    0000082d: 	movd	%xmm6, %edi
    00000831: 	addl	%edi, %edx
    00000833: 	addl	%edx, %eax
    00000835: 	leal	(%rax,%rcx,8), %eax
    00000838: 	testl	%eax, %eax
    0000083a: 	jne	.Ltmp2861 # Offset: 2106
.Ltmp2916:
    00000840: 	addl	$0x1, %r12d
    00000844: 	cmpl	%esi, %r12d
    00000847: 	jl	.Ltmp2862 # Offset: 2119
.Ltmp2859:
    0000084d: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000854: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000085b: 	subq	$0x20, %rax
    0000085f: 	cmpq	%rax, %rbx
    00000862: 	je	.Ltmp2863 # Offset: 2146
    00000868: 	leaq	0x10(%rbx), %rdi
    0000086c: 	movq	0xf8(%rsp), %r12
    00000874: 	movq	%rdi, (%rbx)
    00000877: 	movq	0xf0(%rsp), %r15
    0000087f: 	movq	%r15, %rax
    00000882: 	addq	%r12, %rax
    00000885: 	je	.Ltmp2864 # Offset: 2181
    00000887: 	testq	%r15, %r15
    0000088a: 	je	.Ltmp2865 # Offset: 2186
.Ltmp2864:
    00000890: 	movq	%r12, 0x28(%rsp)
    00000895: 	cmpq	$0xf, %r12
    00000899: 	ja	.Ltmp2866 # Offset: 2201
    0000089f: 	cmpq	$0x1, %r12
    000008a3: 	jne	.Ltmp2867 # Offset: 2211
    000008a9: 	movzbl	(%r15), %eax
    000008ad: 	movb	%al, 0x10(%rbx)
.Ltmp2943:
    000008b0: 	movq	%r12, 0x8(%rbx)
    000008b4: 	movb	$0x0, (%rdi,%r12)
    000008b9: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000008c0: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000008c7: 	addq	$0x20, %rax
    000008cb: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000008d2: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000008d9: 	je	.Ltmp2868 # Offset: 2265
.Ltmp2933:
    000008df: 	movq	-0x20(%rax), %r12
    000008e3: 	callq	clock@PLT # Offset: 2275
    000008e8: 	pxor	%xmm0, %xmm0
    000008ec: 	movq	%rax, end_time(%rip)
    000008f3: 	movq	%r12, %rdi
    000008f6: 	subq	start_time(%rip), %rax
    000008fd: 	cvtsi2sd	%rax, %xmm0
    00000902: 	divsd	DATAat0x4d640(%rip), %xmm0
    0000090a: 	callq	_Z13record_resultdPKc # Offset: 2314
    0000090f: 	movq	0xf0(%rsp), %rdi
    00000917: 	cmpq	(%rsp), %rdi
    0000091b: 	je	.Ltmp2869 # Offset: 2331
    0000091d: 	movq	0x100(%rsp), %rax
    00000925: 	leaq	0x1(%rax), %rsi
    00000929: 	callq	_ZdlPvm@PLT # Offset: 2345
.Ltmp2869:
    0000092e: 	movq	(%r13), %r15
    00000932: 	movq	0x8(%r13), %r12
    00000936: 	leaq	0xa0(%rsp), %rbx
    0000093e: 	movq	%rbx, 0x90(%rsp)
    00000946: 	movq	%r15, %rax
    00000949: 	addq	%r12, %rax
    0000094c: 	je	.Ltmp2870 # Offset: 2380
    0000094e: 	testq	%r15, %r15
    00000951: 	je	.Ltmp2812 # Offset: 2385
.Ltmp2870:
    00000957: 	movq	%r12, 0x28(%rsp)
    0000095c: 	cmpq	$0xf, %r12
    00000960: 	ja	.Ltmp2871 # Offset: 2400
    00000966: 	cmpq	$0x1, %r12
    0000096a: 	jne	.Ltmp2872 # Offset: 2410
    00000970: 	movzbl	(%r15), %eax
    00000974: 	movb	%al, 0xa0(%rsp)
    0000097b: 	movq	%rbx, %rax
.Ltmp2925:
    0000097e: 	movq	%r12, 0x98(%rsp)
    00000986: 	movb	$0x0, (%rax,%r12)
    0000098b: 	movabsq	$0x3fffffffffffffff, %rax
    00000995: 	subq	0x98(%rsp), %rax
    0000099d: 	cmpq	$0x8, %rax
    000009a1: 	jbe	.Ltmp2873 # Offset: 2465
    000009a7: 	leaq	0x90(%rsp), %r12
    000009af: 	movl	$0x9, %edx
    000009b4: 	leaq	DATAat0x4d270(%rip), %rsi
    000009bb: 	movq	%r12, %rdi
    000009be: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2494
    000009c3: 	movl	0xc(%rsp), %edx
    000009c7: 	movq	%r12, %rcx
    000009ca: 	movl	$0x1f40, %esi
    000009cf: 	movq	%rbp, %rdi
    000009d2: 	callq	_Z9test_CSENIi14custom_cse_mulIiELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2514
    000009d7: 	movq	0x90(%rsp), %rdi
    000009df: 	cmpq	%rbx, %rdi
    000009e2: 	je	.Ltmp2874 # Offset: 2530
    000009e4: 	movq	0xa0(%rsp), %rax
    000009ec: 	leaq	0x1(%rax), %rsi
    000009f0: 	callq	_ZdlPvm@PLT # Offset: 2544
.Ltmp2874:
    000009f5: 	movq	(%r13), %r15
    000009f9: 	leaq	0xc0(%rsp), %rax
    00000a01: 	movq	0x8(%r13), %r12
    00000a05: 	movq	%rax, 0x10(%rsp)
    00000a0a: 	movq	%rax, 0xb0(%rsp)
    00000a12: 	movq	%r15, %rax
    00000a15: 	addq	%r12, %rax
    00000a18: 	je	.Ltmp2875 # Offset: 2584
    00000a1a: 	testq	%r15, %r15
    00000a1d: 	je	.Ltmp2812 # Offset: 2589
.Ltmp2875:
    00000a23: 	movq	%r12, 0x28(%rsp)
    00000a28: 	cmpq	$0xf, %r12
    00000a2c: 	ja	.Ltmp2876 # Offset: 2604
    00000a32: 	cmpq	$0x1, %r12
    00000a36: 	jne	.Ltmp2877 # Offset: 2614
    00000a3c: 	movzbl	(%r15), %eax
    00000a40: 	movb	%al, 0xc0(%rsp)
    00000a47: 	movq	0x10(%rsp), %rax
.Ltmp2923:
    00000a4c: 	movq	%r12, 0xb8(%rsp)
    00000a54: 	movb	$0x0, (%rax,%r12)
    00000a59: 	movabsq	$0x3fffffffffffffff, %rax
    00000a63: 	subq	0xb8(%rsp), %rax
    00000a6b: 	cmpq	$0xf, %rax
    00000a6f: 	jbe	.Ltmp2878 # Offset: 2671
    00000a75: 	leaq	0xb0(%rsp), %rax
    00000a7d: 	movl	$0x10, %edx
    00000a82: 	leaq	DATAat0x4d27e(%rip), %rsi
    00000a89: 	movq	%rax, %rdi
    00000a8c: 	movq	%rax, 0x18(%rsp)
    00000a91: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2705
    00000a96: 	callq	clock@PLT # Offset: 2710
    00000a9b: 	movl	iterations(%rip), %esi
    00000aa1: 	xorl	%r12d, %r12d
    00000aa4: 	leaq	0x7cf0(%rbp), %rbx
    00000aab: 	movq	%rax, start_time(%rip)
    00000ab2: 	leaq	DATAat0x4d004(%rip), %r15
    00000ab9: 	testl	%esi, %esi
    00000abb: 	jle	.Ltmp2879 # Offset: 2747
    00000ac1: 	nopl	(%rax) # Size: 7
.Ltmp2882:
    00000ac8: 	movl	(%rbp), %edx
    00000acb: 	subl	0x4(%rbp), %edx
    00000ace: 	movq	%rbp, %rax
    00000ad1: 	pxor	%xmm0, %xmm0
    00000ad5: 	shll	$0x3, %edx
    00000ad8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2880:
    00000ae0: 	movdqu	(%rax), %xmm1
    00000ae4: 	movdqu	0x4(%rax), %xmm4
    00000ae9: 	addq	$0x10, %rax
    00000aed: 	psubd	%xmm4, %xmm1
    00000af1: 	pslld	$0x3, %xmm1
    00000af6: 	paddd	%xmm1, %xmm0
    00000afa: 	cmpq	%rbx, %rax
    00000afd: 	jne	.Ltmp2880 # Offset: 2813
    00000aff: 	movdqa	%xmm0, %xmm1
    00000b03: 	movl	0x7cf8(%rbp), %ecx
    00000b09: 	movq	0x7cf4(%rbp), %xmm2
    00000b11: 	psrldq	$0x8, %xmm1
    00000b16: 	subl	0x7cfc(%rbp), %ecx
    00000b1c: 	paddd	%xmm1, %xmm0
    00000b20: 	movq	0x7cf0(%rbp), %xmm1
    00000b28: 	psubd	%xmm2, %xmm1
    00000b2c: 	movdqa	%xmm0, %xmm2
    00000b30: 	psrldq	$0x4, %xmm2
    00000b35: 	paddd	%xmm2, %xmm0
    00000b39: 	pslld	$0x3, %xmm1
    00000b3e: 	movd	%xmm0, %eax
    00000b42: 	addl	%edx, %eax
    00000b44: 	pshufd	$0xe5, %xmm1, %xmm7
    00000b49: 	movd	%xmm1, %edx
    00000b4d: 	movd	%xmm7, %edi
    00000b51: 	addl	%edi, %edx
    00000b53: 	addl	%edx, %eax
    00000b55: 	leal	(%rax,%rcx,8), %eax
    00000b58: 	testl	%eax, %eax
    00000b5a: 	jne	.Ltmp2881 # Offset: 2906
.Ltmp2919:
    00000b60: 	addl	$0x1, %r12d
    00000b64: 	cmpl	%esi, %r12d
    00000b67: 	jl	.Ltmp2882 # Offset: 2919
.Ltmp2879:
    00000b6d: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000b74: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000b7b: 	subq	$0x20, %rax
    00000b7f: 	cmpq	%rax, %rbx
    00000b82: 	je	.Ltmp2883 # Offset: 2946
    00000b88: 	leaq	0x10(%rbx), %rdi
    00000b8c: 	movq	0xb8(%rsp), %r12
    00000b94: 	movq	%rdi, (%rbx)
    00000b97: 	movq	0xb0(%rsp), %r15
    00000b9f: 	movq	%r15, %rax
    00000ba2: 	addq	%r12, %rax
    00000ba5: 	je	.Ltmp2884 # Offset: 2981
    00000ba7: 	testq	%r15, %r15
    00000baa: 	je	.Ltmp2885 # Offset: 2986
.Ltmp2884:
    00000bb0: 	movq	%r12, 0x28(%rsp)
    00000bb5: 	cmpq	$0xf, %r12
    00000bb9: 	ja	.Ltmp2886 # Offset: 3001
    00000bbf: 	cmpq	$0x1, %r12
    00000bc3: 	jne	.Ltmp2887 # Offset: 3011
    00000bc9: 	movzbl	(%r15), %eax
    00000bcd: 	movb	%al, 0x10(%rbx)
.Ltmp2946:
    00000bd0: 	movq	%r12, 0x8(%rbx)
    00000bd4: 	movb	$0x0, (%rdi,%r12)
    00000bd9: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000be0: 	addq	$0x20, %rax
    00000be4: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp2939:
    00000beb: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000bf2: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000bf9: 	je	.Ltmp2888 # Offset: 3065
.Ltmp2938:
    00000bff: 	movq	-0x20(%rax), %r12
    00000c03: 	callq	clock@PLT # Offset: 3075
    00000c08: 	pxor	%xmm0, %xmm0
    00000c0c: 	movq	%rax, end_time(%rip)
    00000c13: 	movq	%r12, %rdi
    00000c16: 	subq	start_time(%rip), %rax
    00000c1d: 	cvtsi2sd	%rax, %xmm0
    00000c22: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000c2a: 	callq	_Z13record_resultdPKc # Offset: 3114
    00000c2f: 	movq	0xb0(%rsp), %rdi
    00000c37: 	cmpq	0x10(%rsp), %rdi
    00000c3c: 	je	.Ltmp2889 # Offset: 3132
    00000c3e: 	movq	0xc0(%rsp), %rax
    00000c46: 	leaq	0x1(%rax), %rsi
    00000c4a: 	callq	_ZdlPvm@PLT # Offset: 3146
.Ltmp2889:
    00000c4f: 	leaq	DATAat0x4d293(%rip), %rdx
    00000c56: 	movq	%r13, %rsi
    00000c59: 	movq	%r14, %rdi
    00000c5c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3164
    00000c61: 	movl	0xc(%rsp), %edx
    00000c65: 	movq	%r14, %rcx
    00000c68: 	movq	%rbp, %rdi
    00000c6b: 	movl	$0x1f40, %esi
    00000c70: 	callq	_Z9test_CSENIi14custom_cse_divIiELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3184
    00000c75: 	movq	0xf0(%rsp), %rdi
    00000c7d: 	cmpq	(%rsp), %rdi
    00000c81: 	je	.Ltmp2890 # Offset: 3201
    00000c83: 	movq	0x100(%rsp), %rax
    00000c8b: 	leaq	0x1(%rax), %rsi
    00000c8f: 	callq	_ZdlPvm@PLT # Offset: 3215
.Ltmp2890:
    00000c94: 	movq	(%r13), %r15
    00000c98: 	leaq	0xe0(%rsp), %rax
    00000ca0: 	movq	0x8(%r13), %r12
    00000ca4: 	movq	%rax, 0x10(%rsp)
    00000ca9: 	movq	%rax, 0xd0(%rsp)
    00000cb1: 	movq	%r15, %rax
    00000cb4: 	addq	%r12, %rax
    00000cb7: 	je	.Ltmp2891 # Offset: 3255
    00000cb9: 	testq	%r15, %r15
    00000cbc: 	je	.Ltmp2812 # Offset: 3260
.Ltmp2891:
    00000cc2: 	movq	%r12, 0x28(%rsp)
    00000cc7: 	cmpq	$0xf, %r12
    00000ccb: 	ja	.Ltmp2892 # Offset: 3275
    00000cd1: 	cmpq	$0x1, %r12
    00000cd5: 	jne	.Ltmp2893 # Offset: 3285
    00000cdb: 	movzbl	(%r15), %eax
    00000cdf: 	movb	%al, 0xe0(%rsp)
    00000ce6: 	movq	0x10(%rsp), %rax
.Ltmp2921:
    00000ceb: 	movq	%r12, 0xd8(%rsp)
    00000cf3: 	movb	$0x0, (%rax,%r12)
    00000cf8: 	movabsq	$0x3fffffffffffffff, %rax
    00000d02: 	subq	0xd8(%rsp), %rax
    00000d0a: 	cmpq	$0xc, %rax
    00000d0e: 	jbe	.Ltmp2894 # Offset: 3342
    00000d14: 	leaq	0xd0(%rsp), %rax
    00000d1c: 	movl	$0xd, %edx
    00000d21: 	leaq	DATAat0x4d29f(%rip), %rsi
    00000d28: 	movq	%rax, %rdi
    00000d2b: 	movq	%rax, 0x18(%rsp)
    00000d30: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3376
    00000d35: 	callq	clock@PLT # Offset: 3381
    00000d3a: 	movl	iterations(%rip), %ecx
    00000d40: 	xorl	%r12d, %r12d
    00000d43: 	leaq	0x7cf0(%rbp), %rbx
    00000d4a: 	movq	%rax, start_time(%rip)
    00000d51: 	leaq	DATAat0x4d004(%rip), %r15
    00000d58: 	testl	%ecx, %ecx
    00000d5a: 	jle	.Ltmp2895 # Offset: 3418
.Ltmp2898:
    00000d60: 	movl	(%rbp), %edx
    00000d63: 	subl	0x4(%rbp), %edx
    00000d66: 	movq	%rbp, %rax
    00000d69: 	pxor	%xmm0, %xmm0
    00000d6d: 	shll	$0x3, %edx
.Ltmp2896:
    00000d70: 	movdqu	(%rax), %xmm1
    00000d74: 	movdqu	0x4(%rax), %xmm5
    00000d79: 	addq	$0x10, %rax
    00000d7d: 	psubd	%xmm5, %xmm1
    00000d81: 	pslld	$0x3, %xmm1
    00000d86: 	paddd	%xmm1, %xmm0
    00000d8a: 	cmpq	%rax, %rbx
    00000d8d: 	jne	.Ltmp2896 # Offset: 3469
    00000d8f: 	movq	0x7cf4(%rbp), %xmm2
    00000d97: 	movdqa	%xmm0, %xmm1
    00000d9b: 	psrldq	$0x8, %xmm1
    00000da0: 	paddd	%xmm1, %xmm0
    00000da4: 	movq	0x7cf0(%rbp), %xmm1
    00000dac: 	psubd	%xmm2, %xmm1
    00000db0: 	movdqa	%xmm0, %xmm2
    00000db4: 	psrldq	$0x4, %xmm2
    00000db9: 	paddd	%xmm2, %xmm0
    00000dbd: 	pslld	$0x3, %xmm1
    00000dc2: 	movd	%xmm0, %eax
    00000dc6: 	addl	%edx, %eax
    00000dc8: 	pshufd	$0xe5, %xmm1, %xmm7
    00000dcd: 	movd	%xmm1, %edx
    00000dd1: 	movd	%xmm7, %esi
    00000dd5: 	addl	%esi, %edx
    00000dd7: 	addl	%edx, %eax
    00000dd9: 	movl	0x7cf8(%rbp), %edx
    00000ddf: 	subl	0x7cfc(%rbp), %edx
    00000de5: 	leal	(%rax,%rdx,8), %eax
    00000de8: 	testl	%eax, %eax
    00000dea: 	jne	.Ltmp2897 # Offset: 3562
.Ltmp2918:
    00000df0: 	addl	$0x1, %r12d
    00000df4: 	cmpl	%ecx, %r12d
    00000df7: 	jl	.Ltmp2898 # Offset: 3575
.Ltmp2895:
    00000dfd: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000e04: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000e0b: 	subq	$0x20, %rax
    00000e0f: 	cmpq	%rax, %rbx
    00000e12: 	je	.Ltmp2899 # Offset: 3602
    00000e18: 	leaq	0x10(%rbx), %rdi
    00000e1c: 	movq	0xd8(%rsp), %r12
    00000e24: 	movq	%rdi, (%rbx)
    00000e27: 	movq	0xd0(%rsp), %r15
    00000e2f: 	movq	%r15, %rax
    00000e32: 	addq	%r12, %rax
    00000e35: 	je	.Ltmp2900 # Offset: 3637
    00000e37: 	testq	%r15, %r15
    00000e3a: 	je	.Ltmp2901 # Offset: 3642
.Ltmp2900:
    00000e40: 	movq	%r12, 0x28(%rsp)
    00000e45: 	cmpq	$0xf, %r12
    00000e49: 	ja	.Ltmp2902 # Offset: 3657
    00000e4f: 	cmpq	$0x1, %r12
    00000e53: 	jne	.Ltmp2903 # Offset: 3667
    00000e59: 	movzbl	(%r15), %eax
    00000e5d: 	movb	%al, 0x10(%rbx)
.Ltmp2949:
    00000e60: 	movq	%r12, 0x8(%rbx)
    00000e64: 	movb	$0x0, (%rdi,%r12)
    00000e69: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000e70: 	addq	$0x20, %rax
    00000e74: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp2940:
    00000e7b: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000e82: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000e89: 	je	.Ltmp2904 # Offset: 3721
.Ltmp2932:
    00000e8f: 	movq	-0x20(%rax), %r12
    00000e93: 	callq	clock@PLT # Offset: 3731
    00000e98: 	pxor	%xmm0, %xmm0
    00000e9c: 	movq	%rax, end_time(%rip)
    00000ea3: 	movq	%r12, %rdi
    00000ea6: 	subq	start_time(%rip), %rax
    00000ead: 	cvtsi2sd	%rax, %xmm0
    00000eb2: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000eba: 	callq	_Z13record_resultdPKc # Offset: 3770
    00000ebf: 	movq	0xd0(%rsp), %rdi
    00000ec7: 	cmpq	0x10(%rsp), %rdi
    00000ecc: 	je	.Ltmp2905 # Offset: 3788
    00000ece: 	movq	0xe0(%rsp), %rax
    00000ed6: 	leaq	0x1(%rax), %rsi
    00000eda: 	callq	_ZdlPvm@PLT # Offset: 3802
.Ltmp2905:
    00000edf: 	movq	(%rsp), %rax
    00000ee3: 	movq	(%r13), %r15
    00000ee7: 	movq	0x8(%r13), %r12
    00000eeb: 	movq	%rax, 0xf0(%rsp)
    00000ef3: 	movq	%r15, %rax
    00000ef6: 	addq	%r12, %rax
    00000ef9: 	je	.Ltmp2906 # Offset: 3833
    00000efb: 	testq	%r15, %r15
    00000efe: 	je	.Ltmp2812 # Offset: 3838
.Ltmp2906:
    00000f04: 	movq	%r12, 0x28(%rsp)
    00000f09: 	cmpq	$0xf, %r12
    00000f0d: 	ja	.Ltmp2907 # Offset: 3853
    00000f13: 	cmpq	$0x1, %r12
    00000f17: 	jne	.Ltmp2908 # Offset: 3863
    00000f1d: 	movzbl	(%r15), %eax
    00000f21: 	movb	%al, 0x100(%rsp)
    00000f28: 	movq	(%rsp), %rax
.Ltmp2929:
    00000f2c: 	movq	%r12, 0xf8(%rsp)
    00000f34: 	movb	$0x0, (%rax,%r12)
    00000f39: 	movabsq	$0x3fffffffffffffff, %rax
    00000f43: 	subq	0xf8(%rsp), %rax
    00000f4b: 	cmpq	$0x3, %rax
    00000f4f: 	jbe	.Ltmp2909 # Offset: 3919
    00000f55: 	movl	$0x4, %edx
    00000f5a: 	leaq	DATAat0x4d2b1(%rip), %rsi
    00000f61: 	movq	%r14, %rdi
    00000f64: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3940
    00000f69: 	movl	0xc(%rsp), %edx
    00000f6d: 	movq	%r14, %rcx
    00000f70: 	movl	$0x1f40, %esi
    00000f75: 	movq	%rbp, %rdi
    00000f78: 	callq	_Z9test_CSENIi14custom_cse_mixIiELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3960
    00000f7d: 	movq	0xf0(%rsp), %rdi
    00000f85: 	cmpq	(%rsp), %rdi
    00000f89: 	je	.Ltmp2910 # Offset: 3977
    00000f8b: 	movq	0x100(%rsp), %rax
    00000f93: 	leaq	0x1(%rax), %rsi
    00000f97: 	callq	_ZdlPvm@PLT # Offset: 3991
.Ltmp2910:
    00000f9c: 	movq	0x118(%rsp), %rax
    00000fa4: 	subq	%fs:0x28, %rax
    00000fad: 	jne	.Ltmp2911 # Offset: 4013
    00000fb3: 	movq	(%r13), %rdi
    00000fb7: 	movl	iterations(%rip), %edx
    00000fbd: 	xorl	%r8d, %r8d
    00000fc0: 	xorl	%ecx, %ecx
    00000fc2: 	addq	$0x128, %rsp
    00000fc9: 	movl	$0x1f40, %esi
    00000fce: 	popq	%rbx
    00000fcf: 	popq	%rbp
    00000fd0: 	popq	%r12
    00000fd2: 	popq	%r13
    00000fd4: 	popq	%r14
    00000fd6: 	popq	%r15
    00000fd8: 	jmp	_Z9summarizePKciiii # TAILCALL  # Offset: 4056
.Ltmp2814:
    00000fdd: 	testq	%r12, %r12
    00000fe0: 	jne	.Ltmp2912 # Offset: 4064
    00000fe6: 	movq	%r14, %rax
    00000fe9: 	jmp	.Ltmp2913 # Offset: 4073
    00000fee: 	nop # Size: 2
.Ltmp2818:
    00000ff0: 	movq	0x30(%rsp), %rdx
    00000ff5: 	movq	%r15, %rsi
    00000ff8: 	movl	$0x1, %edi
    00000ffd: 	xorl	%eax, %eax
    00000fff: 	callq	__printf_chk@PLT # Offset: 4095
    00001004: 	movl	iterations(%rip), %ecx
    0000100a: 	jmp	.Ltmp2914 # Offset: 4106
    0000100f: 	nop # Size: 1
.Ltmp2833:
    00001010: 	movq	0x50(%rsp), %rdx
    00001015: 	movq	%r15, %rsi
    00001018: 	movl	$0x1, %edi
    0000101d: 	xorl	%eax, %eax
    0000101f: 	callq	__printf_chk@PLT # Offset: 4127
    00001024: 	movl	iterations(%rip), %esi
    0000102a: 	jmp	.Ltmp2915 # Offset: 4138
    0000102f: 	nop # Size: 1
.Ltmp2861:
    00001030: 	movq	0xf0(%rsp), %rdx
    00001038: 	movq	%r15, %rsi
    0000103b: 	movl	$0x1, %edi
    00001040: 	xorl	%eax, %eax
    00001042: 	callq	__printf_chk@PLT # Offset: 4162
    00001047: 	movl	iterations(%rip), %esi
    0000104d: 	jmp	.Ltmp2916 # Offset: 4173
    00001052: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2845:
    00001058: 	movq	0xf0(%rsp), %rdx
    00001060: 	movq	%r15, %rsi
    00001063: 	movl	$0x1, %edi
    00001068: 	xorl	%eax, %eax
    0000106a: 	callq	__printf_chk@PLT # Offset: 4202
    0000106f: 	movl	iterations(%rip), %ecx
    00001075: 	jmp	.Ltmp2917 # Offset: 4213
    0000107a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2897:
    00001080: 	movq	0xd0(%rsp), %rdx
    00001088: 	movq	%r15, %rsi
    0000108b: 	movl	$0x1, %edi
    00001090: 	xorl	%eax, %eax
    00001092: 	callq	__printf_chk@PLT # Offset: 4242
    00001097: 	movl	iterations(%rip), %ecx
    0000109d: 	jmp	.Ltmp2918 # Offset: 4253
    000010a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2881:
    000010a8: 	movq	0xb0(%rsp), %rdx
    000010b0: 	movq	%r15, %rsi
    000010b3: 	movl	$0x1, %edi
    000010b8: 	xorl	%eax, %eax
    000010ba: 	callq	__printf_chk@PLT # Offset: 4282
    000010bf: 	movl	iterations(%rip), %esi
    000010c5: 	jmp	.Ltmp2919 # Offset: 4293
.Ltmp2893:
    000010ca: 	testq	%r12, %r12
    000010cd: 	jne	.Ltmp2920 # Offset: 4301
    000010d3: 	movq	0x10(%rsp), %rax
    000010d8: 	jmp	.Ltmp2921 # Offset: 4312
.Ltmp2877:
    000010dd: 	testq	%r12, %r12
    000010e0: 	jne	.Ltmp2922 # Offset: 4320
    000010e6: 	movq	0x10(%rsp), %rax
    000010eb: 	jmp	.Ltmp2923 # Offset: 4331
.Ltmp2872:
    000010f0: 	testq	%r12, %r12
    000010f3: 	jne	.Ltmp2924 # Offset: 4339
    000010f9: 	movq	%rbx, %rax
    000010fc: 	jmp	.Ltmp2925 # Offset: 4348
.Ltmp2829:
    00001101: 	testq	%r12, %r12
    00001104: 	jne	.Ltmp2926 # Offset: 4356
    0000110a: 	movq	%r14, %rax
    0000110d: 	jmp	.Ltmp2927 # Offset: 4365
.Ltmp2908:
    00001112: 	testq	%r12, %r12
    00001115: 	jne	.Ltmp2928 # Offset: 4373
    0000111b: 	movq	(%rsp), %rax
    0000111f: 	jmp	.Ltmp2929 # Offset: 4383
.Ltmp2856:
    00001124: 	testq	%r12, %r12
    00001127: 	jne	.Ltmp2930 # Offset: 4391
    0000112d: 	movq	%rbx, %rax
    00001130: 	jmp	.Ltmp2931 # Offset: 4400
.Ltmp2855:
    00001135: 	leaq	0x70(%rsp), %rdi
    0000113a: 	leaq	0x28(%rsp), %rsi
    0000113f: 	xorl	%edx, %edx
    00001141: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4417
    00001146: 	movq	%rax, 0x70(%rsp)
    0000114b: 	movq	%rax, %rdi
    0000114e: 	movq	0x28(%rsp), %rax
    00001153: 	movq	%rax, 0x80(%rsp)
.Ltmp2961:
    0000115b: 	movq	%r12, %rdx
    0000115e: 	movq	%r15, %rsi
    00001161: 	callq	memcpy@PLT # Offset: 4449
    00001166: 	movq	0x28(%rsp), %r12
    0000116b: 	movq	0x70(%rsp), %rax
    00001170: 	jmp	.Ltmp2931 # Offset: 4464
.Ltmp2892:
    00001175: 	leaq	0xd0(%rsp), %rdi
    0000117d: 	leaq	0x28(%rsp), %rsi
    00001182: 	xorl	%edx, %edx
    00001184: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4484
    00001189: 	movq	%rax, 0xd0(%rsp)
    00001191: 	movq	%rax, %rdi
    00001194: 	movq	0x28(%rsp), %rax
    00001199: 	movq	%rax, 0xe0(%rsp)
.Ltmp2956:
    000011a1: 	movq	%r12, %rdx
    000011a4: 	movq	%r15, %rsi
    000011a7: 	callq	memcpy@PLT # Offset: 4519
    000011ac: 	movq	0x28(%rsp), %r12
    000011b1: 	movq	0xd0(%rsp), %rax
    000011b9: 	jmp	.Ltmp2921 # Offset: 4537
.Ltmp2871:
    000011be: 	leaq	0x90(%rsp), %rdi
    000011c6: 	leaq	0x28(%rsp), %rsi
    000011cb: 	xorl	%edx, %edx
    000011cd: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4557
    000011d2: 	movq	%rax, 0x90(%rsp)
    000011da: 	movq	%rax, %rdi
    000011dd: 	movq	0x28(%rsp), %rax
    000011e2: 	movq	%rax, 0xa0(%rsp)
.Ltmp2958:
    000011ea: 	movq	%r12, %rdx
    000011ed: 	movq	%r15, %rsi
    000011f0: 	callq	memcpy@PLT # Offset: 4592
    000011f5: 	movq	0x28(%rsp), %r12
    000011fa: 	movq	0x90(%rsp), %rax
    00001202: 	jmp	.Ltmp2925 # Offset: 4610
.Ltmp2876:
    00001207: 	leaq	0xb0(%rsp), %rdi
    0000120f: 	leaq	0x28(%rsp), %rsi
    00001214: 	xorl	%edx, %edx
    00001216: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4630
    0000121b: 	movq	%rax, 0xb0(%rsp)
    00001223: 	movq	%rax, %rdi
    00001226: 	movq	0x28(%rsp), %rax
    0000122b: 	movq	%rax, 0xc0(%rsp)
.Ltmp2957:
    00001233: 	movq	%r12, %rdx
    00001236: 	movq	%r15, %rsi
    00001239: 	callq	memcpy@PLT # Offset: 4665
    0000123e: 	movq	0x28(%rsp), %r12
    00001243: 	movq	0xb0(%rsp), %rax
    0000124b: 	jmp	.Ltmp2923 # Offset: 4683
.Ltmp2828:
    00001250: 	leaq	0x50(%rsp), %rdi
    00001255: 	leaq	0x28(%rsp), %rsi
    0000125a: 	xorl	%edx, %edx
    0000125c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4700
    00001261: 	movq	%rax, 0x50(%rsp)
    00001266: 	movq	%rax, %rdi
    00001269: 	movq	0x28(%rsp), %rax
    0000126e: 	movq	%rax, 0x60(%rsp)
.Ltmp2959:
    00001273: 	movq	%r12, %rdx
    00001276: 	movq	%r15, %rsi
    00001279: 	callq	memcpy@PLT # Offset: 4729
    0000127e: 	movq	0x28(%rsp), %r12
    00001283: 	movq	0x50(%rsp), %rax
    00001288: 	jmp	.Ltmp2927 # Offset: 4744
.Ltmp2813:
    0000128d: 	leaq	0x30(%rsp), %rdi
    00001292: 	leaq	0x28(%rsp), %rsi
    00001297: 	xorl	%edx, %edx
    00001299: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4761
    0000129e: 	movq	%rax, 0x30(%rsp)
    000012a3: 	movq	%rax, %rdi
    000012a6: 	movq	0x28(%rsp), %rax
    000012ab: 	movq	%rax, 0x40(%rsp)
.Ltmp2955:
    000012b0: 	movq	%r12, %rdx
    000012b3: 	movq	%r15, %rsi
    000012b6: 	callq	memcpy@PLT # Offset: 4790
    000012bb: 	movq	0x28(%rsp), %r12
    000012c0: 	movq	0x30(%rsp), %rax
    000012c5: 	jmp	.Ltmp2913 # Offset: 4805
.Ltmp2907:
    000012ca: 	movq	%r14, %rdi
    000012cd: 	leaq	0x28(%rsp), %rsi
    000012d2: 	xorl	%edx, %edx
    000012d4: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4820
    000012d9: 	movq	%rax, 0xf0(%rsp)
    000012e1: 	movq	%rax, %rdi
    000012e4: 	movq	0x28(%rsp), %rax
    000012e9: 	movq	%rax, 0x100(%rsp)
.Ltmp2960:
    000012f1: 	movq	%r12, %rdx
    000012f4: 	movq	%r15, %rsi
    000012f7: 	callq	memcpy@PLT # Offset: 4855
    000012fc: 	movq	0x28(%rsp), %r12
    00001301: 	movq	0xf0(%rsp), %rax
    00001309: 	jmp	.Ltmp2929 # Offset: 4873
.Ltmp2904:
    0000130e: 	movq	-0x8(%rdx), %rax
    00001312: 	addq	$0x200, %rax
    00001318: 	jmp	.Ltmp2932 # Offset: 4888
.Ltmp2863:
    0000131d: 	movq	%r14, %rsi
    00001320: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001327: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 4903
    0000132c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001333: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000133a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001341: 	jne	.Ltmp2933 # Offset: 4929
.Ltmp2868:
    00001347: 	movq	-0x8(%rdx), %rax
    0000134b: 	addq	$0x200, %rax
    00001351: 	jmp	.Ltmp2933 # Offset: 4945
.Ltmp2840:
    00001356: 	movq	-0x8(%rdx), %rax
    0000135a: 	addq	$0x200, %rax
    00001360: 	jmp	.Ltmp2934 # Offset: 4960
.Ltmp2852:
    00001365: 	movq	-0x8(%rdx), %rax
    00001369: 	addq	$0x200, %rax
    0000136f: 	jmp	.Ltmp2935 # Offset: 4975
.Ltmp2847:
    00001374: 	movq	%r14, %rsi
    00001377: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000137e: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 4990
    00001383: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000138a: 	jmp	.Ltmp2936 # Offset: 5002
.Ltmp2835:
    0000138f: 	movq	(%rsp), %rsi
    00001393: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000139a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 5018
    0000139f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000013a6: 	jmp	.Ltmp2937 # Offset: 5030
.Ltmp2888:
    000013ab: 	movq	-0x8(%rdx), %rax
    000013af: 	addq	$0x200, %rax
    000013b5: 	jmp	.Ltmp2938 # Offset: 5045
.Ltmp2883:
    000013ba: 	movq	0x18(%rsp), %rsi
    000013bf: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000013c6: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 5062
    000013cb: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000013d2: 	jmp	.Ltmp2939 # Offset: 5074
.Ltmp2899:
    000013d7: 	movq	0x18(%rsp), %rsi
    000013dc: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000013e3: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 5091
    000013e8: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000013ef: 	jmp	.Ltmp2940 # Offset: 5103
.Ltmp2825:
    000013f4: 	movq	-0x8(%rdx), %rax
    000013f8: 	addq	$0x200, %rax
    000013fe: 	jmp	.Ltmp2941 # Offset: 5118
.Ltmp2820:
    00001403: 	movq	(%rsp), %rsi
    00001407: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000140e: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 5134
    00001413: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000141a: 	jmp	.Ltmp2942 # Offset: 5146
.Ltmp2867:
    0000141f: 	testq	%r12, %r12
    00001422: 	je	.Ltmp2943 # Offset: 5154
.Ltmp2954:
    00001428: 	movq	%r12, %rdx
    0000142b: 	movq	%r15, %rsi
    0000142e: 	callq	memcpy@PLT # Offset: 5166
    00001433: 	movq	0x28(%rsp), %r12
    00001438: 	movq	(%rbx), %rdi
    0000143b: 	jmp	.Ltmp2943 # Offset: 5179
.Ltmp2824:
    00001440: 	testq	%r12, %r12
    00001443: 	je	.Ltmp2944 # Offset: 5187
    00001449: 	jmp	.Ltmp2945 # Offset: 5193
    0000144b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2887:
    00001450: 	testq	%r12, %r12
    00001453: 	je	.Ltmp2946 # Offset: 5203
    00001459: 	jmp	.Ltmp2947 # Offset: 5209
    0000145e: 	nop # Size: 2
.Ltmp2851:
    00001460: 	testq	%r12, %r12
    00001463: 	je	.Ltmp2948 # Offset: 5219
.Ltmp2953:
    00001469: 	movq	%r12, %rdx
    0000146c: 	movq	%r15, %rsi
    0000146f: 	callq	memcpy@PLT # Offset: 5231
    00001474: 	movq	0x28(%rsp), %r12
    00001479: 	movq	(%rbx), %rdi
    0000147c: 	jmp	.Ltmp2948 # Offset: 5244
.Ltmp2903:
    00001481: 	testq	%r12, %r12
    00001484: 	je	.Ltmp2949 # Offset: 5252
    0000148a: 	jmp	.Ltmp2950 # Offset: 5258
    0000148f: 	nop # Size: 1
.Ltmp2839:
    00001490: 	testq	%r12, %r12
    00001493: 	je	.Ltmp2951 # Offset: 5267
    00001499: 	jmp	.Ltmp2952 # Offset: 5273
    0000149e: 	nop # Size: 2
.Ltmp2823:
    000014a0: 	leaq	0x28(%rsp), %rsi
    000014a5: 	xorl	%edx, %edx
    000014a7: 	movq	%rbx, %rdi
    000014aa: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5290
    000014af: 	movq	%rax, (%rbx)
    000014b2: 	movq	%rax, %rdi
    000014b5: 	movq	0x28(%rsp), %rax
    000014ba: 	movq	%rax, 0x10(%rbx)
.Ltmp2945:
    000014be: 	movq	%r12, %rdx
    000014c1: 	movq	%r15, %rsi
    000014c4: 	callq	memcpy@PLT # Offset: 5316
    000014c9: 	movq	0x28(%rsp), %r12
    000014ce: 	movq	(%rbx), %rdi
    000014d1: 	jmp	.Ltmp2944 # Offset: 5329
.Ltmp2886:
    000014d6: 	leaq	0x28(%rsp), %rsi
    000014db: 	xorl	%edx, %edx
    000014dd: 	movq	%rbx, %rdi
    000014e0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5344
    000014e5: 	movq	%rax, (%rbx)
    000014e8: 	movq	%rax, %rdi
    000014eb: 	movq	0x28(%rsp), %rax
    000014f0: 	movq	%rax, 0x10(%rbx)
.Ltmp2947:
    000014f4: 	movq	%r12, %rdx
    000014f7: 	movq	%r15, %rsi
    000014fa: 	callq	memcpy@PLT # Offset: 5370
    000014ff: 	movq	0x28(%rsp), %r12
    00001504: 	movq	(%rbx), %rdi
    00001507: 	jmp	.Ltmp2946 # Offset: 5383
.Ltmp2902:
    0000150c: 	leaq	0x28(%rsp), %rsi
    00001511: 	xorl	%edx, %edx
    00001513: 	movq	%rbx, %rdi
    00001516: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5398
    0000151b: 	movq	%rax, (%rbx)
    0000151e: 	movq	%rax, %rdi
    00001521: 	movq	0x28(%rsp), %rax
    00001526: 	movq	%rax, 0x10(%rbx)
.Ltmp2950:
    0000152a: 	movq	%r12, %rdx
    0000152d: 	movq	%r15, %rsi
    00001530: 	callq	memcpy@PLT # Offset: 5424
    00001535: 	movq	0x28(%rsp), %r12
    0000153a: 	movq	(%rbx), %rdi
    0000153d: 	jmp	.Ltmp2949 # Offset: 5437
.Ltmp2850:
    00001542: 	leaq	0x28(%rsp), %rsi
    00001547: 	xorl	%edx, %edx
    00001549: 	movq	%rbx, %rdi
    0000154c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5452
    00001551: 	movq	%rax, (%rbx)
    00001554: 	movq	%rax, %rdi
    00001557: 	movq	0x28(%rsp), %rax
    0000155c: 	movq	%rax, 0x10(%rbx)
    00001560: 	jmp	.Ltmp2953 # Offset: 5472
.Ltmp2838:
    00001565: 	leaq	0x28(%rsp), %rsi
    0000156a: 	xorl	%edx, %edx
    0000156c: 	movq	%rbx, %rdi
    0000156f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5487
    00001574: 	movq	%rax, (%rbx)
    00001577: 	movq	%rax, %rdi
    0000157a: 	movq	0x28(%rsp), %rax
    0000157f: 	movq	%rax, 0x10(%rbx)
.Ltmp2952:
    00001583: 	movq	%r12, %rdx
    00001586: 	movq	%r15, %rsi
    00001589: 	callq	memcpy@PLT # Offset: 5513
    0000158e: 	movq	0x28(%rsp), %r12
    00001593: 	movq	(%rbx), %rdi
    00001596: 	jmp	.Ltmp2951 # Offset: 5526
.Ltmp2866:
    0000159b: 	leaq	0x28(%rsp), %rsi
    000015a0: 	xorl	%edx, %edx
    000015a2: 	movq	%rbx, %rdi
    000015a5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5541
    000015aa: 	movq	%rax, (%rbx)
    000015ad: 	movq	%rax, %rdi
    000015b0: 	movq	0x28(%rsp), %rax
    000015b5: 	movq	%rax, 0x10(%rbx)
    000015b9: 	jmp	.Ltmp2954 # Offset: 5561
.Ltmp2815:
    000015be: 	leaq	DATAat0x4d194(%rip), %rdi
    000015c5: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 5573
.Ltmp2822:
    000015ca: 	leaq	DATAat0x4d018(%rip), %rdi
    000015d1: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 5585
.Ltmp2830:
    000015d6: 	leaq	DATAat0x4d194(%rip), %rdi
    000015dd: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 5597
.Ltmp2837:
    000015e2: 	leaq	DATAat0x4d018(%rip), %rdi
    000015e9: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 5609
.Ltmp2849:
    000015ee: 	leaq	DATAat0x4d018(%rip), %rdi
    000015f5: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 5621
.Ltmp2857:
    000015fa: 	leaq	DATAat0x4d194(%rip), %rdi
    00001601: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 5633
.Ltmp2865:
    00001606: 	leaq	DATAat0x4d018(%rip), %rdi
    0000160d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 5645
.Ltmp2873:
    00001612: 	leaq	DATAat0x4d194(%rip), %rdi
    00001619: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 5657
.Ltmp2878:
    0000161e: 	leaq	DATAat0x4d194(%rip), %rdi
    00001625: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 5669
.Ltmp2885:
    0000162a: 	leaq	DATAat0x4d018(%rip), %rdi
    00001631: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 5681
.Ltmp2894:
    00001636: 	leaq	DATAat0x4d194(%rip), %rdi
    0000163d: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 5693
.Ltmp2901:
    00001642: 	leaq	DATAat0x4d018(%rip), %rdi
    00001649: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 5705
.Ltmp2909:
    0000164e: 	leaq	DATAat0x4d194(%rip), %rdi
    00001655: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 5717
.Ltmp2911:
    0000165a: 	callq	__stack_chk_fail@PLT # Offset: 5722
.Ltmp2912:
    0000165f: 	movq	%r14, %rdi
    00001662: 	jmp	.Ltmp2955 # Offset: 5730
.Ltmp2920:
    00001667: 	movq	0x10(%rsp), %rdi
    0000166c: 	jmp	.Ltmp2956 # Offset: 5740
.Ltmp2922:
    00001671: 	movq	0x10(%rsp), %rdi
    00001676: 	jmp	.Ltmp2957 # Offset: 5750
.Ltmp2924:
    0000167b: 	movq	%rbx, %rdi
    0000167e: 	jmp	.Ltmp2958 # Offset: 5758
.Ltmp2926:
    00001683: 	movq	%r14, %rdi
    00001686: 	jmp	.Ltmp2959 # Offset: 5766
.Ltmp2928:
    0000168b: 	movq	(%rsp), %rdi
    0000168f: 	jmp	.Ltmp2960 # Offset: 5775
.Ltmp2930:
    00001694: 	movq	%rbx, %rdi
    00001697: 	jmp	.Ltmp2961 # Offset: 5783
.Ltmp2812:
    0000169c: 	leaq	DATAat0x4d018(%rip), %rdi
    000016a3: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 5795
    000016a8: 	endbr64
.Ltmp2969:
    000016ac: 	movq	%rax, %rbp
    000016af: 	jmp	.Ltmp2962 # Offset: 5807
    000016b1: 	endbr64
.Ltmp2965:
    000016b5: 	movq	%rax, %rbp
    000016b8: 	jmp	.Ltmp2963 # Offset: 5816
.Ltmp2962:
    000016ba: 	movq	0xf0(%rsp), %rdi
    000016c2: 	cmpq	(%rsp), %rdi
    000016c6: 	je	.Ltmp2964 # Offset: 5830
.Ltmp2978:
    000016c8: 	movq	0x100(%rsp), %rax
    000016d0: 	leaq	0x1(%rax), %rsi
    000016d4: 	callq	_ZdlPvm@PLT # Offset: 5844
.Ltmp2964:
    000016d9: 	movq	%rbp, %rdi
    000016dc: 	callq	_Unwind_Resume@PLT # Offset: 5852
.Ltmp2963:
    000016e1: 	movq	0xd0(%rsp), %rdi
    000016e9: 	cmpq	0x10(%rsp), %rdi
    000016ee: 	je	.Ltmp2964 # Offset: 5870
    000016f0: 	movq	0xe0(%rsp), %rax
    000016f8: 	leaq	0x1(%rax), %rsi
    000016fc: 	callq	_ZdlPvm@PLT # Offset: 5884
    00001701: 	jmp	.Ltmp2964 # Offset: 5889
    00001703: 	endbr64
    00001707: 	jmp	.Ltmp2965 # Offset: 5895
    00001709: 	endbr64
.Ltmp2967:
    0000170d: 	movq	%rax, %rbp
    00001710: 	jmp	.Ltmp2966 # Offset: 5904
    00001712: 	endbr64
    00001716: 	jmp	.Ltmp2967 # Offset: 5910
    00001718: 	endbr64
.Ltmp2971:
    0000171c: 	movq	%rax, %rbp
    0000171f: 	jmp	.Ltmp2968 # Offset: 5919
.Ltmp2966:
    00001721: 	movq	0x90(%rsp), %rdi
    00001729: 	cmpq	%rbx, %rdi
    0000172c: 	je	.Ltmp2964 # Offset: 5932
    0000172e: 	movq	0xa0(%rsp), %rax
    00001736: 	leaq	0x1(%rax), %rsi
    0000173a: 	callq	_ZdlPvm@PLT # Offset: 5946
    0000173f: 	jmp	.Ltmp2964 # Offset: 5951
.Ltmp2968:
    00001741: 	movq	0xb0(%rsp), %rdi
    00001749: 	cmpq	0x10(%rsp), %rdi
    0000174e: 	je	.Ltmp2964 # Offset: 5966
    00001750: 	movq	0xc0(%rsp), %rax
    00001758: 	leaq	0x1(%rax), %rsi
    0000175c: 	callq	_ZdlPvm@PLT # Offset: 5980
    00001761: 	jmp	.Ltmp2964 # Offset: 5985
    00001766: 	endbr64
    0000176a: 	jmp	.Ltmp2969 # Offset: 5994
    0000176f: 	endbr64
.Ltmp2972:
    00001773: 	movq	%rax, %rbp
    00001776: 	jmp	.Ltmp2970 # Offset: 6006
    00001778: 	endbr64
    0000177c: 	jmp	.Ltmp2971 # Offset: 6012
    0000177e: 	endbr64
    00001782: 	jmp	.Ltmp2972 # Offset: 6018
    00001784: 	endbr64
    00001788: 	jmp	.Ltmp2969 # Offset: 6024
    0000178d: 	endbr64
    00001791: 	jmp	.Ltmp2969 # Offset: 6033
    00001796: 	endbr64
.Ltmp2974:
    0000179a: 	movq	%rax, %rbp
    0000179d: 	jmp	.Ltmp2973 # Offset: 6045
    0000179f: 	endbr64
    000017a3: 	jmp	.Ltmp2974 # Offset: 6051
    000017a5: 	endbr64
    000017a9: 	jmp	.Ltmp2969 # Offset: 6057
    000017ae: 	endbr64
    000017b2: 	movq	%rax, %rbp
    000017b5: 	jmp	.Ltmp2975 # Offset: 6069
    000017b7: 	endbr64
.Ltmp2977:
    000017bb: 	movq	%rax, %rbp
    000017be: 	jmp	.Ltmp2976 # Offset: 6078
    000017c0: 	endbr64
    000017c4: 	jmp	.Ltmp2977 # Offset: 6084
.Ltmp2970:
    000017c6: 	movq	0x30(%rsp), %rdi
    000017cb: 	cmpq	%r14, %rdi
    000017ce: 	je	.Ltmp2964 # Offset: 6094
    000017d4: 	movq	0x40(%rsp), %rax
    000017d9: 	leaq	0x1(%rax), %rsi
    000017dd: 	callq	_ZdlPvm@PLT # Offset: 6109
    000017e2: 	jmp	.Ltmp2964 # Offset: 6114
.Ltmp2975:
    000017e7: 	movq	0xf0(%rsp), %rdi
    000017ef: 	leaq	0x100(%rsp), %rax
    000017f7: 	cmpq	%rax, %rdi
    000017fa: 	jne	.Ltmp2978 # Offset: 6138
    00001800: 	jmp	.Ltmp2964 # Offset: 6144
.Ltmp2973:
    00001805: 	movq	0x70(%rsp), %rdi
    0000180a: 	cmpq	%rbx, %rdi
    0000180d: 	je	.Ltmp2964 # Offset: 6157
    00001813: 	movq	0x80(%rsp), %rax
    0000181b: 	leaq	0x1(%rax), %rsi
    0000181f: 	callq	_ZdlPvm@PLT # Offset: 6175
    00001824: 	jmp	.Ltmp2964 # Offset: 6180
.Ltmp2976:
    00001829: 	movq	0x50(%rsp), %rdi
    0000182e: 	cmpq	%r14, %rdi
    00001831: 	je	.Ltmp2964 # Offset: 6193
    00001837: 	movq	0x60(%rsp), %rax
    0000183c: 	leaq	0x1(%rax), %rsi
    00001840: 	callq	_ZdlPvm@PLT # Offset: 6208
    00001845: 	jmp	.Ltmp2964 # Offset: 6213
DWARF CFI Instructions:
    <empty>
End of Function "_Z16TestUnrolledTypeIiLi8EEvPT_S0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z16TestUnrolledTypeIfLi8EEvPT_S0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 180
  State       : disassembled
  Address     : 0x29fb0
  Size        : 0x1f21
  MaxSize     : 0x1f30
  Offset      : 0x29fb0
  Section     : .text
  Orc Section : .local.text._Z16TestUnrolledTypeIfLi8EEvPT_S0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0179:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rsi, %r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rdi, %rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x168, %rsp
    0000001b: 	movq	(%rsi), %r15
    0000001e: 	movq	0x8(%rsi), %r12
    00000022: 	movss	%xmm0, 0x58(%rsp)
    00000028: 	leaq	0xa0(%rsp), %r14
    00000030: 	movq	%fs:0x28, %rax
    00000039: 	movq	%rax, 0x158(%rsp)
    00000041: 	xorl	%eax, %eax
    00000043: 	movq	%r15, %rax
    00000046: 	movq	%r14, 0x90(%rsp)
    0000004e: 	addq	%r12, %rax
    00000051: 	je	.Ltmp2979 # Offset: 81
    00000053: 	testq	%r15, %r15
    00000056: 	je	.Ltmp2980 # Offset: 86
.Ltmp2979:
    0000005c: 	movq	%r12, 0x88(%rsp)
    00000064: 	cmpq	$0xf, %r12
    00000068: 	ja	.Ltmp2981 # Offset: 104
    0000006e: 	cmpq	$0x1, %r12
    00000072: 	jne	.Ltmp2982 # Offset: 114
    00000078: 	movzbl	(%r15), %eax
    0000007c: 	movb	%al, 0xa0(%rsp)
    00000083: 	movq	%r14, %rax
.Ltmp3083:
    00000086: 	movq	%r12, 0x98(%rsp)
    0000008e: 	movb	$0x0, (%rax,%r12)
    00000093: 	movabsq	$0x3fffffffffffffff, %rax
    0000009d: 	subq	0x98(%rsp), %rax
    000000a5: 	cmpq	$0x7, %rax
    000000a9: 	jbe	.Ltmp2983 # Offset: 169
    000000af: 	leaq	0x90(%rsp), %rax
    000000b7: 	movl	$0x8, %edx
    000000bc: 	leaq	DATAat0x4d1e4(%rip), %rsi
    000000c3: 	movq	%rax, %rdi
    000000c6: 	movq	%rax, 0x40(%rsp)
    000000cb: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 203
    000000d0: 	callq	clock@PLT # Offset: 208
    000000d5: 	movl	iterations(%rip), %edx
    000000db: 	movq	%rax, start_time(%rip)
    000000e2: 	testl	%edx, %edx
    000000e4: 	jle	.Ltmp2984 # Offset: 228
    000000ea: 	movss	DATAat0x4d600(%rip), %xmm7
    000000f2: 	movaps	DATAat0x4d600(%rip), %xmm5
    000000f9: 	pxor	%xmm4, %xmm4
    000000fd: 	movss	DATAat0x4d5d0(%rip), %xmm6
    00000105: 	movq	DATAat0x4d600(%rip), %rax
    0000010c: 	movss	%xmm4, 0x5c(%rsp)
    00000112: 	xorl	%r12d, %r12d
    00000115: 	movq	DATAat0x4d5e0(%rip), %xmm4
    0000011d: 	movss	%xmm7, 0x8(%rsp)
    00000123: 	movsd	DATAat0x4d620(%rip), %xmm7
    0000012b: 	leaq	0x7cf0(%rbp), %rbx
    00000132: 	leaq	DATAat0x4d004(%rip), %r15
    00000139: 	movaps	%xmm5, 0x10(%rsp)
    0000013e: 	movsd	DATAat0x4d628(%rip), %xmm5
    00000146: 	movq	%rax, 0x38(%rsp)
    0000014b: 	movaps	%xmm6, 0x20(%rsp)
    00000150: 	movsd	%xmm7, 0x30(%rsp)
    00000156: 	movaps	%xmm4, 0x60(%rsp)
    0000015b: 	movsd	%xmm5, 0x70(%rsp)
    00000161: 	nopl	(%rax) # Size: 7
.Ltmp2988:
    00000168: 	movss	(%rbp), %xmm1
    0000016d: 	subss	0x4(%rbp), %xmm1
    00000172: 	movq	%rbp, %rax
    00000175: 	mulss	0x8(%rsp), %xmm1
    0000017b: 	addss	0x5c(%rsp), %xmm1
    00000181: 	nopl	(%rax) # Size: 7
.Ltmp2985:
    00000188: 	movups	(%rax), %xmm0
    0000018b: 	movups	0x4(%rax), %xmm6
    0000018f: 	addq	$0x10, %rax
    00000193: 	subps	%xmm6, %xmm0
    00000196: 	mulps	0x10(%rsp), %xmm0
    0000019b: 	addss	%xmm0, %xmm1
    0000019f: 	movaps	%xmm0, %xmm2
    000001a2: 	shufps	$0x55, %xmm0, %xmm2
    000001a6: 	addss	%xmm1, %xmm2
    000001aa: 	movaps	%xmm0, %xmm1
    000001ad: 	unpckhps	%xmm0, %xmm1
    000001b0: 	shufps	$0xff, %xmm0, %xmm0
    000001b4: 	addss	%xmm2, %xmm1
    000001b8: 	addss	%xmm0, %xmm1
    000001bc: 	cmpq	%rax, %rbx
    000001bf: 	jne	.Ltmp2985 # Offset: 447
    000001c1: 	movq	0x7cf0(%rbp), %xmm0
    000001c9: 	movq	0x38(%rsp), %xmm6
    000001cf: 	movq	0x7cf4(%rbp), %xmm2
    000001d7: 	movaps	0x20(%rsp), %xmm5
    000001dc: 	subps	%xmm2, %xmm0
    000001df: 	mulps	%xmm6, %xmm0
    000001e2: 	addss	%xmm0, %xmm1
    000001e6: 	shufps	$0xe5, %xmm0, %xmm0
    000001ea: 	addss	%xmm1, %xmm0
    000001ee: 	movss	0x7cf8(%rbp), %xmm1
    000001f6: 	subss	0x7cfc(%rbp), %xmm1
    000001fe: 	mulss	0x8(%rsp), %xmm1
    00000204: 	addss	%xmm1, %xmm0
    00000208: 	pxor	%xmm1, %xmm1
    0000020c: 	andps	%xmm0, %xmm5
    0000020f: 	cvtss2sd	%xmm5, %xmm1
    00000213: 	comisd	0x30(%rsp), %xmm1
    00000219: 	jbe	.Ltmp2986 # Offset: 537
    0000021b: 	divss	%xmm0, %xmm0
    0000021f: 	nop # Size: 1
.Ltmp2986:
    00000220: 	movsd	0x70(%rsp), %xmm5
    00000226: 	cvtss2sd	%xmm0, %xmm0
    0000022a: 	andpd	0x60(%rsp), %xmm0
    00000230: 	comisd	%xmm0, %xmm5
    00000234: 	jbe	.Ltmp2987 # Offset: 564
.Ltmp3084:
    0000023a: 	addl	$0x1, %r12d
    0000023e: 	cmpl	%edx, %r12d
    00000241: 	jl	.Ltmp2988 # Offset: 577
.Ltmp2984:
    00000247: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000024e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000255: 	subq	$0x20, %rax
    00000259: 	cmpq	%rax, %rbx
    0000025c: 	je	.Ltmp2989 # Offset: 604
    00000262: 	leaq	0x10(%rbx), %rdi
    00000266: 	movq	0x98(%rsp), %r12
    0000026e: 	movq	%rdi, (%rbx)
    00000271: 	movq	0x90(%rsp), %r15
    00000279: 	movq	%r15, %rax
    0000027c: 	addq	%r12, %rax
    0000027f: 	je	.Ltmp2990 # Offset: 639
    00000281: 	testq	%r15, %r15
    00000284: 	je	.Ltmp2991 # Offset: 644
.Ltmp2990:
    0000028a: 	movq	%r12, 0x88(%rsp)
    00000292: 	cmpq	$0xf, %r12
    00000296: 	ja	.Ltmp2992 # Offset: 662
    0000029c: 	cmpq	$0x1, %r12
    000002a0: 	jne	.Ltmp2993 # Offset: 672
    000002a6: 	movzbl	(%r15), %eax
    000002aa: 	movb	%al, 0x10(%rbx)
.Ltmp3121:
    000002ad: 	movq	%r12, 0x8(%rbx)
    000002b1: 	movb	$0x0, (%rdi,%r12)
    000002b6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002bd: 	addq	$0x20, %rax
    000002c1: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp3103:
    000002c8: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002cf: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002d6: 	je	.Ltmp2994 # Offset: 726
.Ltmp3102:
    000002dc: 	movq	-0x20(%rax), %r12
    000002e0: 	callq	clock@PLT # Offset: 736
    000002e5: 	pxor	%xmm0, %xmm0
    000002e9: 	movq	%rax, end_time(%rip)
    000002f0: 	movq	%r12, %rdi
    000002f3: 	subq	start_time(%rip), %rax
    000002fa: 	cvtsi2sd	%rax, %xmm0
    000002ff: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000307: 	callq	_Z13record_resultdPKc # Offset: 775
    0000030c: 	movq	0x90(%rsp), %rdi
    00000314: 	cmpq	%r14, %rdi
    00000317: 	je	.Ltmp2995 # Offset: 791
    00000319: 	movq	0xa0(%rsp), %rax
    00000321: 	leaq	0x1(%rax), %rsi
    00000325: 	callq	_ZdlPvm@PLT # Offset: 805
.Ltmp2995:
    0000032a: 	movq	(%r13), %r14
    0000032e: 	movq	0x8(%r13), %r12
    00000332: 	leaq	0xc0(%rsp), %r15
    0000033a: 	movq	%r15, 0xb0(%rsp)
    00000342: 	movq	%r14, %rax
    00000345: 	addq	%r12, %rax
    00000348: 	je	.Ltmp2996 # Offset: 840
    0000034a: 	testq	%r14, %r14
    0000034d: 	je	.Ltmp2980 # Offset: 845
.Ltmp2996:
    00000353: 	movq	%r12, 0x88(%rsp)
    0000035b: 	cmpq	$0xf, %r12
    0000035f: 	ja	.Ltmp2997 # Offset: 863
    00000365: 	cmpq	$0x1, %r12
    00000369: 	jne	.Ltmp2998 # Offset: 873
    0000036f: 	movzbl	(%r14), %eax
    00000373: 	movb	%al, 0xc0(%rsp)
    0000037a: 	movq	%r15, %rax
.Ltmp3097:
    0000037d: 	movq	%r12, 0xb8(%rsp)
    00000385: 	movb	$0x0, (%rax,%r12)
    0000038a: 	movabsq	$0x3fffffffffffffff, %rax
    00000394: 	subq	0xb8(%rsp), %rax
    0000039c: 	cmpq	$0xc, %rax
    000003a0: 	jbe	.Ltmp2999 # Offset: 928
    000003a6: 	leaq	0xb0(%rsp), %rax
    000003ae: 	movl	$0xd, %edx
    000003b3: 	leaq	DATAat0x4d1f1(%rip), %rsi
    000003ba: 	movq	%rax, %rdi
    000003bd: 	movq	%rax, 0x78(%rsp)
    000003c2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 962
    000003c7: 	callq	clock@PLT # Offset: 967
    000003cc: 	movq	%rax, start_time(%rip)
    000003d3: 	movl	iterations(%rip), %eax
    000003d9: 	testl	%eax, %eax
    000003db: 	jle	.Ltmp3000 # Offset: 987
    000003e1: 	pxor	%xmm7, %xmm7
    000003e5: 	movss	DATAat0x4d600(%rip), %xmm6
    000003ed: 	movaps	DATAat0x4d600(%rip), %xmm4
    000003f4: 	movss	DATAat0x4d5d0(%rip), %xmm5
    000003fc: 	movss	%xmm7, 0x5c(%rsp)
    00000402: 	movq	DATAat0x4d5e0(%rip), %xmm7
    0000040a: 	movq	DATAat0x4d600(%rip), %rcx
    00000411: 	xorl	%r12d, %r12d
    00000414: 	movss	%xmm6, 0x8(%rsp)
    0000041a: 	movsd	DATAat0x4d620(%rip), %xmm6
    00000422: 	leaq	0x7cf0(%rbp), %rbx
    00000429: 	leaq	DATAat0x4d004(%rip), %r14
    00000430: 	movaps	%xmm4, 0x10(%rsp)
    00000435: 	movsd	DATAat0x4d628(%rip), %xmm4
    0000043d: 	movaps	%xmm7, 0x60(%rsp)
    00000442: 	movss	0x58(%rsp), %xmm7
    00000448: 	movq	%rcx, 0x38(%rsp)
    0000044d: 	movsd	%xmm6, 0x30(%rsp)
    00000453: 	movaps	%xmm7, %xmm6
    00000456: 	movsd	%xmm4, 0x70(%rsp)
    0000045c: 	movaps	%xmm7, %xmm4
    0000045f: 	shufps	$0xe0, %xmm6, %xmm6
    00000463: 	shufps	$0x0, %xmm4, %xmm4
    00000467: 	movaps	%xmm5, 0x20(%rsp)
    0000046c: 	movaps	%xmm4, 0x40(%rsp)
    00000471: 	movlps	%xmm6, 0x50(%rsp)
    00000476: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3004:
    00000480: 	movss	0x4(%rbp), %xmm2
    00000485: 	movss	(%rbp), %xmm1
    0000048a: 	movq	%rbp, %rdx
    0000048d: 	movaps	%xmm2, %xmm0
    00000490: 	addss	%xmm1, %xmm0
    00000494: 	addss	0x58(%rsp), %xmm0
    0000049a: 	addss	%xmm0, %xmm0
    0000049e: 	addss	%xmm0, %xmm1
    000004a2: 	addss	%xmm0, %xmm2
    000004a6: 	subss	%xmm2, %xmm1
    000004aa: 	mulss	0x8(%rsp), %xmm1
    000004b0: 	addss	0x5c(%rsp), %xmm1
    000004b6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3001:
    000004c0: 	movups	0x4(%rdx), %xmm4
    000004c4: 	movups	(%rdx), %xmm2
    000004c7: 	addq	$0x10, %rdx
    000004cb: 	movups	-0x10(%rdx), %xmm0
    000004cf: 	addps	%xmm4, %xmm2
    000004d2: 	addps	0x40(%rsp), %xmm2
    000004d7: 	addps	%xmm2, %xmm2
    000004da: 	addps	%xmm2, %xmm0
    000004dd: 	addps	%xmm4, %xmm2
    000004e0: 	subps	%xmm2, %xmm0
    000004e3: 	mulps	0x10(%rsp), %xmm0
    000004e8: 	addss	%xmm0, %xmm1
    000004ec: 	movaps	%xmm0, %xmm2
    000004ef: 	shufps	$0x55, %xmm0, %xmm2
    000004f3: 	addss	%xmm1, %xmm2
    000004f7: 	movaps	%xmm0, %xmm1
    000004fa: 	unpckhps	%xmm0, %xmm1
    000004fd: 	shufps	$0xff, %xmm0, %xmm0
    00000501: 	addss	%xmm2, %xmm1
    00000505: 	addss	%xmm0, %xmm1
    00000509: 	cmpq	%rdx, %rbx
    0000050c: 	jne	.Ltmp3001 # Offset: 1292
    0000050e: 	movq	0x7cf0(%rbp), %xmm0
    00000516: 	movq	0x50(%rsp), %xmm6
    0000051c: 	movq	0x7cf4(%rbp), %xmm3
    00000524: 	movq	0x38(%rsp), %xmm5
    0000052a: 	movaps	%xmm0, %xmm2
    0000052d: 	addps	%xmm3, %xmm2
    00000530: 	addps	%xmm6, %xmm2
    00000533: 	movaps	0x20(%rsp), %xmm6
    00000538: 	addps	%xmm2, %xmm2
    0000053b: 	addps	%xmm2, %xmm0
    0000053e: 	addps	%xmm3, %xmm2
    00000541: 	movss	0x7cfc(%rbp), %xmm3
    00000549: 	subps	%xmm2, %xmm0
    0000054c: 	mulps	%xmm5, %xmm0
    0000054f: 	addss	%xmm0, %xmm1
    00000553: 	shufps	$0xe5, %xmm0, %xmm0
    00000557: 	addss	%xmm1, %xmm0
    0000055b: 	movss	0x7cf8(%rbp), %xmm1
    00000563: 	movaps	%xmm1, %xmm2
    00000566: 	addss	%xmm3, %xmm2
    0000056a: 	addss	0x58(%rsp), %xmm2
    00000570: 	addss	%xmm2, %xmm2
    00000574: 	addss	%xmm2, %xmm1
    00000578: 	addss	%xmm3, %xmm2
    0000057c: 	subss	%xmm2, %xmm1
    00000580: 	mulss	0x8(%rsp), %xmm1
    00000586: 	addss	%xmm0, %xmm1
    0000058a: 	pxor	%xmm0, %xmm0
    0000058e: 	andps	%xmm1, %xmm6
    00000591: 	cvtss2sd	%xmm6, %xmm0
    00000595: 	comisd	0x30(%rsp), %xmm0
    0000059b: 	jbe	.Ltmp3002 # Offset: 1435
    0000059d: 	divss	%xmm1, %xmm1
    000005a1: 	nopl	(%rax) # Size: 7
.Ltmp3002:
    000005a8: 	movsd	0x70(%rsp), %xmm6
    000005ae: 	cvtss2sd	%xmm1, %xmm1
    000005b2: 	andpd	0x60(%rsp), %xmm1
    000005b8: 	comisd	%xmm1, %xmm6
    000005bc: 	jbe	.Ltmp3003 # Offset: 1468
.Ltmp3085:
    000005c2: 	addl	$0x1, %r12d
    000005c6: 	cmpl	%eax, %r12d
    000005c9: 	jl	.Ltmp3004 # Offset: 1481
.Ltmp3000:
    000005cf: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000005d6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000005dd: 	subq	$0x20, %rax
    000005e1: 	cmpq	%rax, %rbx
    000005e4: 	je	.Ltmp3005 # Offset: 1508
    000005ea: 	leaq	0x10(%rbx), %rdi
    000005ee: 	movq	0xb8(%rsp), %r12
    000005f6: 	movq	%rdi, (%rbx)
    000005f9: 	movq	0xb0(%rsp), %r14
    00000601: 	movq	%r14, %rax
    00000604: 	addq	%r12, %rax
    00000607: 	je	.Ltmp3006 # Offset: 1543
    00000609: 	testq	%r14, %r14
    0000060c: 	je	.Ltmp3007 # Offset: 1548
.Ltmp3006:
    00000612: 	movq	%r12, 0x88(%rsp)
    0000061a: 	cmpq	$0xf, %r12
    0000061e: 	ja	.Ltmp3008 # Offset: 1566
    00000624: 	cmpq	$0x1, %r12
    00000628: 	jne	.Ltmp3009 # Offset: 1576
    0000062e: 	movzbl	(%r14), %eax
    00000632: 	movb	%al, 0x10(%rbx)
.Ltmp3116:
    00000635: 	movq	%r12, 0x8(%rbx)
    00000639: 	movb	$0x0, (%rdi,%r12)
    0000063e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000645: 	addq	$0x20, %rax
    00000649: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp3105:
    00000650: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000657: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000065e: 	je	.Ltmp3010 # Offset: 1630
.Ltmp3100:
    00000664: 	movq	-0x20(%rax), %r12
    00000668: 	callq	clock@PLT # Offset: 1640
    0000066d: 	pxor	%xmm0, %xmm0
    00000671: 	movq	%rax, end_time(%rip)
    00000678: 	movq	%r12, %rdi
    0000067b: 	subq	start_time(%rip), %rax
    00000682: 	cvtsi2sd	%rax, %xmm0
    00000687: 	divsd	DATAat0x4d640(%rip), %xmm0
    0000068f: 	callq	_Z13record_resultdPKc # Offset: 1679
    00000694: 	movq	0xb0(%rsp), %rdi
    0000069c: 	cmpq	%r15, %rdi
    0000069f: 	je	.Ltmp3011 # Offset: 1695
    000006a1: 	movq	0xc0(%rsp), %rax
    000006a9: 	leaq	0x1(%rax), %rsi
    000006ad: 	callq	_ZdlPvm@PLT # Offset: 1709
.Ltmp3011:
    000006b2: 	movq	(%r13), %r14
    000006b6: 	movq	0x8(%r13), %r12
    000006ba: 	leaq	0xe0(%rsp), %rbx
    000006c2: 	movq	%rbx, 0xd0(%rsp)
    000006ca: 	movq	%r14, %rax
    000006cd: 	addq	%r12, %rax
    000006d0: 	je	.Ltmp3012 # Offset: 1744
    000006d2: 	testq	%r14, %r14
    000006d5: 	je	.Ltmp2980 # Offset: 1749
.Ltmp3012:
    000006db: 	movq	%r12, 0x88(%rsp)
    000006e3: 	cmpq	$0xf, %r12
    000006e7: 	ja	.Ltmp3013 # Offset: 1767
    000006ed: 	cmpq	$0x1, %r12
    000006f1: 	jne	.Ltmp3014 # Offset: 1777
    000006f7: 	movzbl	(%r14), %eax
    000006fb: 	movb	%al, 0xe0(%rsp)
    00000702: 	movq	%rbx, %rax
.Ltmp3095:
    00000705: 	movq	%r12, 0xd8(%rsp)
    0000070d: 	movb	$0x0, (%rax,%r12)
    00000712: 	movabsq	$0x3fffffffffffffff, %rax
    0000071c: 	subq	0xd8(%rsp), %rax
    00000724: 	cmpq	$0x3, %rax
    00000728: 	jbe	.Ltmp3015 # Offset: 1832
    0000072e: 	leaq	0xd0(%rsp), %r12
    00000736: 	movl	$0x4, %edx
    0000073b: 	leaq	DATAat0x4d22b(%rip), %rsi
    00000742: 	movq	%r12, %rdi
    00000745: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1861
    0000074a: 	movss	0x58(%rsp), %xmm0
    00000750: 	movq	%r12, %rdx
    00000753: 	movl	$0x1f40, %esi
    00000758: 	movq	%rbp, %rdi
    0000075b: 	callq	_Z9test_CSENIf14custom_cse_addIfELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1883
    00000760: 	movq	0xd0(%rsp), %rdi
    00000768: 	cmpq	%rbx, %rdi
    0000076b: 	je	.Ltmp3016 # Offset: 1899
    0000076d: 	movq	0xe0(%rsp), %rax
    00000775: 	leaq	0x1(%rax), %rsi
    00000779: 	callq	_ZdlPvm@PLT # Offset: 1913
.Ltmp3016:
    0000077e: 	movq	(%r13), %r14
    00000782: 	movq	0x8(%r13), %r12
    00000786: 	leaq	0x100(%rsp), %r15
    0000078e: 	movq	%r15, 0xf0(%rsp)
    00000796: 	movq	%r14, %rax
    00000799: 	addq	%r12, %rax
    0000079c: 	je	.Ltmp3017 # Offset: 1948
    0000079e: 	testq	%r14, %r14
    000007a1: 	je	.Ltmp2980 # Offset: 1953
.Ltmp3017:
    000007a7: 	movq	%r12, 0x88(%rsp)
    000007af: 	cmpq	$0xf, %r12
    000007b3: 	ja	.Ltmp3018 # Offset: 1971
    000007b9: 	cmpq	$0x1, %r12
    000007bd: 	jne	.Ltmp3019 # Offset: 1981
    000007c3: 	movzbl	(%r14), %eax
    000007c7: 	movb	%al, 0x100(%rsp)
    000007ce: 	movq	%r15, %rax
.Ltmp3093:
    000007d1: 	movq	%r12, 0xf8(%rsp)
    000007d9: 	movb	$0x0, (%rax,%r12)
    000007de: 	movabsq	$0x3fffffffffffffff, %rax
    000007e8: 	subq	0xf8(%rsp), %rax
    000007f0: 	cmpq	$0x11, %rax
    000007f4: 	jbe	.Ltmp3020 # Offset: 2036
    000007fa: 	leaq	0xf0(%rsp), %rax
    00000802: 	movl	$0x12, %edx
    00000807: 	leaq	DATAat0x4d234(%rip), %rsi
    0000080e: 	movq	%rax, %rdi
    00000811: 	movq	%rax, 0x78(%rsp)
    00000816: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2070
    0000081b: 	callq	clock@PLT # Offset: 2075
    00000820: 	movq	%rax, start_time(%rip)
    00000827: 	movl	iterations(%rip), %eax
    0000082d: 	testl	%eax, %eax
    0000082f: 	jle	.Ltmp3021 # Offset: 2095
    00000835: 	movss	DATAat0x4d600(%rip), %xmm5
    0000083d: 	pxor	%xmm6, %xmm6
    00000841: 	xorl	%r12d, %r12d
    00000844: 	movss	DATAat0x4d5d0(%rip), %xmm4
    0000084c: 	movaps	DATAat0x4d600(%rip), %xmm7
    00000853: 	movq	DATAat0x4d600(%rip), %rcx
    0000085a: 	movaps	%xmm4, 0x20(%rsp)
    0000085f: 	leaq	0x7cf0(%rbp), %rbx
    00000866: 	movss	0x58(%rsp), %xmm4
    0000086c: 	movss	%xmm5, 0x8(%rsp)
    00000872: 	movsd	DATAat0x4d620(%rip), %xmm5
    0000087a: 	leaq	DATAat0x4d004(%rip), %r14
    00000881: 	movss	%xmm6, 0x5c(%rsp)
    00000887: 	movq	DATAat0x4d5e0(%rip), %xmm6
    0000088f: 	movaps	%xmm7, 0x10(%rsp)
    00000894: 	movsd	DATAat0x4d628(%rip), %xmm7
    0000089c: 	movsd	%xmm5, 0x30(%rsp)
    000008a2: 	movaps	%xmm4, %xmm5
    000008a5: 	movq	%rcx, 0x38(%rsp)
    000008aa: 	shufps	$0x0, %xmm5, %xmm5
    000008ae: 	movaps	%xmm5, 0x40(%rsp)
    000008b3: 	movaps	%xmm4, %xmm5
    000008b6: 	shufps	$0xe0, %xmm5, %xmm5
    000008ba: 	movaps	%xmm6, 0x60(%rsp)
    000008bf: 	movsd	%xmm7, 0x70(%rsp)
    000008c5: 	movlps	%xmm5, 0x50(%rsp)
    000008ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3025:
    000008d0: 	movss	(%rbp), %xmm1
    000008d5: 	movss	0x4(%rbp), %xmm2
    000008da: 	movq	%rbp, %rdx
    000008dd: 	movaps	%xmm1, %xmm0
    000008e0: 	subss	%xmm2, %xmm0
    000008e4: 	addss	0x58(%rsp), %xmm0
    000008ea: 	addss	%xmm0, %xmm0
    000008ee: 	addss	%xmm0, %xmm1
    000008f2: 	addss	%xmm0, %xmm2
    000008f6: 	subss	%xmm2, %xmm1
    000008fa: 	mulss	0x8(%rsp), %xmm1
    00000900: 	addss	0x5c(%rsp), %xmm1
    00000906: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3022:
    00000910: 	movups	(%rdx), %xmm0
    00000913: 	movups	0x4(%rdx), %xmm4
    00000917: 	addq	$0x10, %rdx
    0000091b: 	movaps	%xmm0, %xmm2
    0000091e: 	subps	%xmm4, %xmm2
    00000921: 	addps	0x40(%rsp), %xmm2
    00000926: 	addps	%xmm2, %xmm2
    00000929: 	addps	%xmm2, %xmm0
    0000092c: 	addps	%xmm4, %xmm2
    0000092f: 	subps	%xmm2, %xmm0
    00000932: 	mulps	0x10(%rsp), %xmm0
    00000937: 	addss	%xmm0, %xmm1
    0000093b: 	movaps	%xmm0, %xmm2
    0000093e: 	shufps	$0x55, %xmm0, %xmm2
    00000942: 	addss	%xmm1, %xmm2
    00000946: 	movaps	%xmm0, %xmm1
    00000949: 	unpckhps	%xmm0, %xmm1
    0000094c: 	shufps	$0xff, %xmm0, %xmm0
    00000950: 	addss	%xmm2, %xmm1
    00000954: 	addss	%xmm0, %xmm1
    00000958: 	cmpq	%rdx, %rbx
    0000095b: 	jne	.Ltmp3022 # Offset: 2395
    0000095d: 	movq	0x7cf0(%rbp), %xmm0
    00000965: 	movq	0x50(%rsp), %xmm4
    0000096b: 	movq	0x7cf4(%rbp), %xmm3
    00000973: 	movq	0x38(%rsp), %xmm7
    00000979: 	movaps	%xmm0, %xmm2
    0000097c: 	subps	%xmm3, %xmm2
    0000097f: 	addps	%xmm4, %xmm2
    00000982: 	addps	%xmm2, %xmm2
    00000985: 	addps	%xmm2, %xmm0
    00000988: 	addps	%xmm3, %xmm2
    0000098b: 	movss	0x7cfc(%rbp), %xmm3
    00000993: 	subps	%xmm2, %xmm0
    00000996: 	mulps	%xmm7, %xmm0
    00000999: 	movaps	0x20(%rsp), %xmm7
    0000099e: 	addss	%xmm0, %xmm1
    000009a2: 	shufps	$0xe5, %xmm0, %xmm0
    000009a6: 	addss	%xmm1, %xmm0
    000009aa: 	movss	0x7cf8(%rbp), %xmm1
    000009b2: 	movaps	%xmm1, %xmm2
    000009b5: 	subss	%xmm3, %xmm2
    000009b9: 	addss	0x58(%rsp), %xmm2
    000009bf: 	addss	%xmm2, %xmm2
    000009c3: 	addss	%xmm2, %xmm1
    000009c7: 	addss	%xmm3, %xmm2
    000009cb: 	subss	%xmm2, %xmm1
    000009cf: 	mulss	0x8(%rsp), %xmm1
    000009d5: 	addss	%xmm0, %xmm1
    000009d9: 	pxor	%xmm0, %xmm0
    000009dd: 	andps	%xmm1, %xmm7
    000009e0: 	cvtss2sd	%xmm7, %xmm0
    000009e4: 	comisd	0x30(%rsp), %xmm0
    000009ea: 	jbe	.Ltmp3023 # Offset: 2538
    000009ec: 	divss	%xmm1, %xmm1
.Ltmp3023:
    000009f0: 	movsd	0x70(%rsp), %xmm7
    000009f6: 	cvtss2sd	%xmm1, %xmm1
    000009fa: 	andpd	0x60(%rsp), %xmm1
    00000a00: 	comisd	%xmm1, %xmm7
    00000a04: 	jbe	.Ltmp3024 # Offset: 2564
.Ltmp3089:
    00000a0a: 	addl	$0x1, %r12d
    00000a0e: 	cmpl	%eax, %r12d
    00000a11: 	jl	.Ltmp3025 # Offset: 2577
.Ltmp3021:
    00000a17: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000a1e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000a25: 	subq	$0x20, %rax
    00000a29: 	cmpq	%rax, %rbx
    00000a2c: 	je	.Ltmp3026 # Offset: 2604
    00000a32: 	leaq	0x10(%rbx), %rdi
    00000a36: 	movq	0xf8(%rsp), %r12
    00000a3e: 	movq	%rdi, (%rbx)
    00000a41: 	movq	0xf0(%rsp), %r14
    00000a49: 	movq	%r14, %rax
    00000a4c: 	addq	%r12, %rax
    00000a4f: 	je	.Ltmp3027 # Offset: 2639
    00000a51: 	testq	%r14, %r14
    00000a54: 	je	.Ltmp3028 # Offset: 2644
.Ltmp3027:
    00000a5a: 	movq	%r12, 0x88(%rsp)
    00000a62: 	cmpq	$0xf, %r12
    00000a66: 	ja	.Ltmp3029 # Offset: 2662
    00000a6c: 	cmpq	$0x1, %r12
    00000a70: 	jne	.Ltmp3030 # Offset: 2672
    00000a76: 	movzbl	(%r14), %eax
    00000a7a: 	movb	%al, 0x10(%rbx)
.Ltmp3114:
    00000a7d: 	movq	%r12, 0x8(%rbx)
    00000a81: 	movb	$0x0, (%rdi,%r12)
    00000a86: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000a8d: 	addq	$0x20, %rax
    00000a91: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp3111:
    00000a98: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000a9f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000aa6: 	je	.Ltmp3031 # Offset: 2726
.Ltmp3110:
    00000aac: 	movq	-0x20(%rax), %r12
    00000ab0: 	callq	clock@PLT # Offset: 2736
    00000ab5: 	pxor	%xmm0, %xmm0
    00000ab9: 	movq	%rax, end_time(%rip)
    00000ac0: 	movq	%r12, %rdi
    00000ac3: 	subq	start_time(%rip), %rax
    00000aca: 	cvtsi2sd	%rax, %xmm0
    00000acf: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000ad7: 	callq	_Z13record_resultdPKc # Offset: 2775
    00000adc: 	movq	0xf0(%rsp), %rdi
    00000ae4: 	cmpq	%r15, %rdi
    00000ae7: 	je	.Ltmp3032 # Offset: 2791
    00000ae9: 	movq	0x100(%rsp), %rax
    00000af1: 	leaq	0x1(%rax), %rsi
    00000af5: 	callq	_ZdlPvm@PLT # Offset: 2805
.Ltmp3032:
    00000afa: 	leaq	0x130(%rsp), %r14
    00000b02: 	leaq	DATAat0x4d24b(%rip), %rdx
    00000b09: 	movq	%r13, %rsi
    00000b0c: 	movq	%r14, %rdi
    00000b0f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2831
    00000b14: 	movq	%r14, %rdx
    00000b17: 	movl	$0x1f40, %esi
    00000b1c: 	movq	%rbp, %rdi
    00000b1f: 	movss	0x58(%rsp), %xmm0
    00000b25: 	callq	_Z9test_CSENIf14custom_cse_subIfELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2853
    00000b2a: 	movq	0x130(%rsp), %rdi
    00000b32: 	leaq	0x140(%rsp), %r15
    00000b3a: 	cmpq	%r15, %rdi
    00000b3d: 	je	.Ltmp3033 # Offset: 2877
    00000b3f: 	movq	0x140(%rsp), %rax
    00000b47: 	leaq	0x1(%rax), %rsi
    00000b4b: 	callq	_ZdlPvm@PLT # Offset: 2891
.Ltmp3033:
    00000b50: 	leaq	DATAat0x4d259(%rip), %rdx
    00000b57: 	movq	%r13, %rsi
    00000b5a: 	movq	%r14, %rdi
    00000b5d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2909
    00000b62: 	callq	clock@PLT # Offset: 2914
    00000b67: 	movq	%rax, start_time(%rip)
    00000b6e: 	movl	iterations(%rip), %eax
    00000b74: 	testl	%eax, %eax
    00000b76: 	jle	.Ltmp3034 # Offset: 2934
    00000b7c: 	pxor	%xmm5, %xmm5
    00000b80: 	movss	DATAat0x4d600(%rip), %xmm4
    00000b88: 	movaps	DATAat0x4d600(%rip), %xmm6
    00000b8f: 	movss	DATAat0x4d5d0(%rip), %xmm7
    00000b97: 	movss	%xmm5, 0x5c(%rsp)
    00000b9d: 	movq	DATAat0x4d5e0(%rip), %xmm5
    00000ba5: 	movq	DATAat0x4d600(%rip), %rcx
    00000bac: 	xorl	%r12d, %r12d
    00000baf: 	movss	%xmm4, 0x8(%rsp)
    00000bb5: 	movsd	DATAat0x4d620(%rip), %xmm4
    00000bbd: 	leaq	0x7cf0(%rbp), %rbx
    00000bc4: 	movaps	%xmm6, 0x10(%rsp)
    00000bc9: 	movsd	DATAat0x4d628(%rip), %xmm6
    00000bd1: 	movaps	%xmm5, 0x60(%rsp)
    00000bd6: 	movss	0x58(%rsp), %xmm5
    00000bdc: 	movq	%rcx, 0x38(%rsp)
    00000be1: 	movsd	%xmm4, 0x30(%rsp)
    00000be7: 	movaps	%xmm5, %xmm4
    00000bea: 	movsd	%xmm6, 0x70(%rsp)
    00000bf0: 	movaps	%xmm5, %xmm6
    00000bf3: 	shufps	$0x0, %xmm4, %xmm4
    00000bf7: 	shufps	$0xe0, %xmm6, %xmm6
    00000bfb: 	movaps	%xmm7, 0x20(%rsp)
    00000c00: 	movaps	%xmm4, 0x40(%rsp)
    00000c05: 	movlps	%xmm6, 0x50(%rsp)
    00000c0a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3038:
    00000c10: 	movss	0x4(%rbp), %xmm2
    00000c15: 	movss	(%rbp), %xmm1
    00000c1a: 	movq	%rbp, %rdx
    00000c1d: 	movaps	%xmm2, %xmm0
    00000c20: 	mulss	%xmm1, %xmm0
    00000c24: 	addss	0x58(%rsp), %xmm0
    00000c2a: 	addss	%xmm0, %xmm0
    00000c2e: 	addss	%xmm0, %xmm1
    00000c32: 	addss	%xmm0, %xmm2
    00000c36: 	subss	%xmm2, %xmm1
    00000c3a: 	mulss	0x8(%rsp), %xmm1
    00000c40: 	addss	0x5c(%rsp), %xmm1
    00000c46: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3035:
    00000c50: 	movups	0x4(%rdx), %xmm4
    00000c54: 	movups	(%rdx), %xmm2
    00000c57: 	addq	$0x10, %rdx
    00000c5b: 	movups	-0x10(%rdx), %xmm0
    00000c5f: 	mulps	%xmm4, %xmm2
    00000c62: 	addps	0x40(%rsp), %xmm2
    00000c67: 	addps	%xmm2, %xmm2
    00000c6a: 	addps	%xmm2, %xmm0
    00000c6d: 	addps	%xmm4, %xmm2
    00000c70: 	subps	%xmm2, %xmm0
    00000c73: 	mulps	0x10(%rsp), %xmm0
    00000c78: 	addss	%xmm0, %xmm1
    00000c7c: 	movaps	%xmm0, %xmm2
    00000c7f: 	shufps	$0x55, %xmm0, %xmm2
    00000c83: 	addss	%xmm1, %xmm2
    00000c87: 	movaps	%xmm0, %xmm1
    00000c8a: 	unpckhps	%xmm0, %xmm1
    00000c8d: 	shufps	$0xff, %xmm0, %xmm0
    00000c91: 	addss	%xmm2, %xmm1
    00000c95: 	addss	%xmm0, %xmm1
    00000c99: 	cmpq	%rdx, %rbx
    00000c9c: 	jne	.Ltmp3035 # Offset: 3228
    00000c9e: 	movq	0x7cf0(%rbp), %xmm0
    00000ca6: 	movq	0x50(%rsp), %xmm7
    00000cac: 	movq	0x7cf4(%rbp), %xmm3
    00000cb4: 	movq	0x38(%rsp), %xmm6
    00000cba: 	movaps	%xmm0, %xmm2
    00000cbd: 	movaps	0x20(%rsp), %xmm4
    00000cc2: 	mulps	%xmm3, %xmm2
    00000cc5: 	addps	%xmm7, %xmm2
    00000cc8: 	addps	%xmm2, %xmm2
    00000ccb: 	addps	%xmm2, %xmm0
    00000cce: 	addps	%xmm3, %xmm2
    00000cd1: 	movss	0x7cfc(%rbp), %xmm3
    00000cd9: 	subps	%xmm2, %xmm0
    00000cdc: 	mulps	%xmm6, %xmm0
    00000cdf: 	addss	%xmm0, %xmm1
    00000ce3: 	shufps	$0xe5, %xmm0, %xmm0
    00000ce7: 	addss	%xmm1, %xmm0
    00000ceb: 	movss	0x7cf8(%rbp), %xmm1
    00000cf3: 	movaps	%xmm1, %xmm2
    00000cf6: 	mulss	%xmm3, %xmm2
    00000cfa: 	addss	0x58(%rsp), %xmm2
    00000d00: 	addss	%xmm2, %xmm2
    00000d04: 	addss	%xmm2, %xmm1
    00000d08: 	addss	%xmm3, %xmm2
    00000d0c: 	subss	%xmm2, %xmm1
    00000d10: 	mulss	0x8(%rsp), %xmm1
    00000d16: 	addss	%xmm0, %xmm1
    00000d1a: 	pxor	%xmm0, %xmm0
    00000d1e: 	andps	%xmm1, %xmm4
    00000d21: 	cvtss2sd	%xmm4, %xmm0
    00000d25: 	comisd	0x30(%rsp), %xmm0
    00000d2b: 	jbe	.Ltmp3036 # Offset: 3371
    00000d2d: 	divss	%xmm1, %xmm1
    00000d31: 	nopl	(%rax) # Size: 7
.Ltmp3036:
    00000d38: 	movsd	0x70(%rsp), %xmm4
    00000d3e: 	cvtss2sd	%xmm1, %xmm1
    00000d42: 	andpd	0x60(%rsp), %xmm1
    00000d48: 	comisd	%xmm1, %xmm4
    00000d4c: 	jbe	.Ltmp3037 # Offset: 3404
.Ltmp3087:
    00000d52: 	addl	$0x1, %r12d
    00000d56: 	cmpl	%eax, %r12d
    00000d59: 	jl	.Ltmp3038 # Offset: 3417
.Ltmp3034:
    00000d5f: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000d66: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000d6d: 	subq	$0x20, %rax
    00000d71: 	cmpq	%rax, %rbx
    00000d74: 	je	.Ltmp3039 # Offset: 3444
    00000d7a: 	leaq	0x10(%rbx), %rdi
    00000d7e: 	movq	0x138(%rsp), %r12
    00000d86: 	movq	%rdi, (%rbx)
    00000d89: 	movq	0x130(%rsp), %rax
    00000d91: 	movq	%rax, %rcx
    00000d94: 	movq	%rax, 0x8(%rsp)
    00000d99: 	addq	%r12, %rcx
    00000d9c: 	je	.Ltmp3040 # Offset: 3484
    00000d9e: 	testq	%rax, %rax
    00000da1: 	je	.Ltmp3041 # Offset: 3489
.Ltmp3040:
    00000da7: 	movq	%r12, 0x88(%rsp)
    00000daf: 	cmpq	$0xf, %r12
    00000db3: 	ja	.Ltmp3042 # Offset: 3507
    00000db9: 	cmpq	$0x1, %r12
    00000dbd: 	jne	.Ltmp3043 # Offset: 3517
    00000dc3: 	movq	0x8(%rsp), %rax
    00000dc8: 	movzbl	(%rax), %eax
    00000dcb: 	movb	%al, 0x10(%rbx)
.Ltmp3112:
    00000dce: 	movq	%r12, 0x8(%rbx)
    00000dd2: 	movb	$0x0, (%rdi,%r12)
    00000dd7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000dde: 	addq	$0x20, %rax
    00000de2: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp3109:
    00000de9: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000df0: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000df7: 	je	.Ltmp3044 # Offset: 3575
.Ltmp3104:
    00000dfd: 	movq	-0x20(%rax), %r12
    00000e01: 	callq	clock@PLT # Offset: 3585
    00000e06: 	pxor	%xmm0, %xmm0
    00000e0a: 	movq	%rax, end_time(%rip)
    00000e11: 	movq	%r12, %rdi
    00000e14: 	subq	start_time(%rip), %rax
    00000e1b: 	cvtsi2sd	%rax, %xmm0
    00000e20: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000e28: 	callq	_Z13record_resultdPKc # Offset: 3624
    00000e2d: 	movq	0x130(%rsp), %rdi
    00000e35: 	cmpq	%r15, %rdi
    00000e38: 	je	.Ltmp3045 # Offset: 3640
    00000e3a: 	movq	0x140(%rsp), %rax
    00000e42: 	leaq	0x1(%rax), %rsi
    00000e46: 	callq	_ZdlPvm@PLT # Offset: 3654
.Ltmp3045:
    00000e4b: 	leaq	DATAat0x4d270(%rip), %rdx
    00000e52: 	movq	%r13, %rsi
    00000e55: 	movq	%r14, %rdi
    00000e58: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3672
    00000e5d: 	movq	%r14, %rdx
    00000e60: 	movl	$0x1f40, %esi
    00000e65: 	movq	%rbp, %rdi
    00000e68: 	movss	0x58(%rsp), %xmm0
    00000e6e: 	callq	_Z9test_CSENIf14custom_cse_mulIfELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3694
    00000e73: 	movq	0x130(%rsp), %rdi
    00000e7b: 	cmpq	%r15, %rdi
    00000e7e: 	je	.Ltmp3046 # Offset: 3710
    00000e80: 	movq	0x140(%rsp), %rax
    00000e88: 	leaq	0x1(%rax), %rsi
    00000e8c: 	callq	_ZdlPvm@PLT # Offset: 3724
.Ltmp3046:
    00000e91: 	movq	(%r13), %rbx
    00000e95: 	leaq	0x120(%rsp), %rax
    00000e9d: 	movq	0x8(%r13), %r12
    00000ea1: 	movq	%rax, 0x38(%rsp)
    00000ea6: 	movq	%rax, 0x110(%rsp)
    00000eae: 	movq	%rbx, %rax
    00000eb1: 	addq	%r12, %rax
    00000eb4: 	je	.Ltmp3047 # Offset: 3764
    00000eb6: 	testq	%rbx, %rbx
    00000eb9: 	je	.Ltmp2980 # Offset: 3769
.Ltmp3047:
    00000ebf: 	movq	%r12, 0x88(%rsp)
    00000ec7: 	cmpq	$0xf, %r12
    00000ecb: 	ja	.Ltmp3048 # Offset: 3787
    00000ed1: 	cmpq	$0x1, %r12
    00000ed5: 	jne	.Ltmp3049 # Offset: 3797
    00000edb: 	movzbl	(%rbx), %eax
    00000ede: 	movb	%al, 0x120(%rsp)
    00000ee5: 	movq	0x38(%rsp), %rax
.Ltmp3091:
    00000eea: 	movq	%r12, 0x118(%rsp)
    00000ef2: 	movb	$0x0, (%rax,%r12)
    00000ef7: 	movabsq	$0x3fffffffffffffff, %rax
    00000f01: 	subq	0x118(%rsp), %rax
    00000f09: 	cmpq	$0xf, %rax
    00000f0d: 	jbe	.Ltmp3050 # Offset: 3853
    00000f13: 	leaq	0x110(%rsp), %rax
    00000f1b: 	movl	$0x10, %edx
    00000f20: 	leaq	DATAat0x4d27e(%rip), %rsi
    00000f27: 	movq	%rax, %rdi
    00000f2a: 	movq	%rax, 0x50(%rsp)
    00000f2f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3887
    00000f34: 	callq	clock@PLT # Offset: 3892
    00000f39: 	movl	iterations(%rip), %edx
    00000f3f: 	movq	%rax, start_time(%rip)
    00000f46: 	testl	%edx, %edx
    00000f48: 	jle	.Ltmp3051 # Offset: 3912
    00000f4e: 	movaps	DATAat0x4d600(%rip), %xmm5
    00000f55: 	pxor	%xmm4, %xmm4
    00000f59: 	xorl	%r12d, %r12d
    00000f5c: 	movss	DATAat0x4d600(%rip), %xmm7
    00000f64: 	movss	%xmm4, 0x5c(%rsp)
    00000f6a: 	movq	DATAat0x4d5e0(%rip), %xmm4
    00000f72: 	movss	DATAat0x4d5d0(%rip), %xmm6
    00000f7a: 	leaq	0x7cf0(%rbp), %rbx
    00000f81: 	movaps	%xmm5, 0x10(%rsp)
    00000f86: 	movsd	DATAat0x4d628(%rip), %xmm5
    00000f8e: 	movss	%xmm7, 0x8(%rsp)
    00000f94: 	movsd	DATAat0x4d620(%rip), %xmm7
    00000f9c: 	movsd	%xmm5, 0x70(%rsp)
    00000fa2: 	movss	0x58(%rsp), %xmm5
    00000fa8: 	movaps	%xmm6, 0x20(%rsp)
    00000fad: 	shufps	$0x0, %xmm5, %xmm5
    00000fb1: 	movsd	%xmm7, 0x30(%rsp)
    00000fb7: 	movaps	%xmm4, 0x60(%rsp)
    00000fbc: 	movaps	%xmm5, 0x40(%rsp)
    00000fc1: 	nopl	(%rax) # Size: 7
.Ltmp3055:
    00000fc8: 	movss	(%rbp), %xmm2
    00000fcd: 	movss	0x4(%rbp), %xmm1
    00000fd2: 	movq	%rbp, %rax
    00000fd5: 	movaps	%xmm2, %xmm0
    00000fd8: 	divss	%xmm1, %xmm0
    00000fdc: 	addss	0x58(%rsp), %xmm0
    00000fe2: 	addss	%xmm0, %xmm0
    00000fe6: 	addss	%xmm0, %xmm2
    00000fea: 	addss	%xmm0, %xmm1
    00000fee: 	subss	%xmm1, %xmm2
    00000ff2: 	mulss	0x8(%rsp), %xmm2
    00000ff8: 	addss	0x5c(%rsp), %xmm2
    00000ffe: 	nop # Size: 2
.Ltmp3052:
    00001000: 	movups	(%rax), %xmm0
    00001003: 	movups	0x4(%rax), %xmm4
    00001007: 	addq	$0x10, %rax
    0000100b: 	movaps	%xmm0, %xmm1
    0000100e: 	divps	%xmm4, %xmm1
    00001011: 	addps	0x40(%rsp), %xmm1
    00001016: 	addps	%xmm1, %xmm1
    00001019: 	addps	%xmm1, %xmm0
    0000101c: 	addps	%xmm4, %xmm1
    0000101f: 	subps	%xmm1, %xmm0
    00001022: 	mulps	0x10(%rsp), %xmm0
    00001027: 	addss	%xmm0, %xmm2
    0000102b: 	movaps	%xmm0, %xmm1
    0000102e: 	shufps	$0x55, %xmm0, %xmm1
    00001032: 	addss	%xmm2, %xmm1
    00001036: 	movaps	%xmm0, %xmm2
    00001039: 	unpckhps	%xmm0, %xmm2
    0000103c: 	shufps	$0xff, %xmm0, %xmm0
    00001040: 	addss	%xmm1, %xmm2
    00001044: 	addss	%xmm0, %xmm2
    00001048: 	cmpq	%rbx, %rax
    0000104b: 	jne	.Ltmp3052 # Offset: 4171
    0000104d: 	movss	0x7cf0(%rbp), %xmm0
    00001055: 	movss	0x7cf4(%rbp), %xmm1
    0000105d: 	movss	0x58(%rsp), %xmm4
    00001063: 	movss	0x8(%rsp), %xmm7
    00001069: 	movaps	%xmm0, %xmm3
    0000106c: 	movaps	0x20(%rsp), %xmm6
    00001071: 	divss	%xmm1, %xmm3
    00001075: 	addss	%xmm4, %xmm3
    00001079: 	addss	%xmm3, %xmm3
    0000107d: 	addss	%xmm3, %xmm0
    00001081: 	addss	%xmm1, %xmm3
    00001085: 	subss	%xmm3, %xmm0
    00001089: 	movaps	%xmm1, %xmm3
    0000108c: 	mulss	%xmm7, %xmm0
    00001090: 	addss	%xmm0, %xmm2
    00001094: 	movss	0x7cf8(%rbp), %xmm0
    0000109c: 	divss	%xmm0, %xmm3
    000010a0: 	addss	%xmm4, %xmm3
    000010a4: 	addss	%xmm3, %xmm3
    000010a8: 	addss	%xmm3, %xmm1
    000010ac: 	addss	%xmm0, %xmm3
    000010b0: 	subss	%xmm3, %xmm1
    000010b4: 	movss	0x7cfc(%rbp), %xmm3
    000010bc: 	mulss	%xmm7, %xmm1
    000010c0: 	addss	%xmm2, %xmm1
    000010c4: 	movaps	%xmm0, %xmm2
    000010c7: 	divss	%xmm3, %xmm2
    000010cb: 	addss	%xmm4, %xmm2
    000010cf: 	addss	%xmm2, %xmm2
    000010d3: 	addss	%xmm2, %xmm0
    000010d7: 	addss	%xmm2, %xmm3
    000010db: 	subss	%xmm3, %xmm0
    000010df: 	mulss	%xmm7, %xmm0
    000010e3: 	addss	%xmm1, %xmm0
    000010e7: 	pxor	%xmm1, %xmm1
    000010eb: 	andps	%xmm0, %xmm6
    000010ee: 	cvtss2sd	%xmm6, %xmm1
    000010f2: 	comisd	0x30(%rsp), %xmm1
    000010f8: 	jbe	.Ltmp3053 # Offset: 4344
    000010fa: 	divss	%xmm0, %xmm0
.Ltmp3053:
    000010fe: 	movsd	0x70(%rsp), %xmm6
    00001104: 	cvtss2sd	%xmm0, %xmm0
    00001108: 	andpd	0x60(%rsp), %xmm0
    0000110e: 	comisd	%xmm0, %xmm6
    00001112: 	jbe	.Ltmp3054 # Offset: 4370
.Ltmp3088:
    00001118: 	addl	$0x1, %r12d
    0000111c: 	cmpl	%edx, %r12d
    0000111f: 	jl	.Ltmp3055 # Offset: 4383
.Ltmp3051:
    00001125: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000112c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00001133: 	subq	$0x20, %rax
    00001137: 	cmpq	%rax, %rbx
    0000113a: 	je	.Ltmp3056 # Offset: 4410
    00001140: 	leaq	0x10(%rbx), %rdi
    00001144: 	movq	0x118(%rsp), %r12
    0000114c: 	movq	%rdi, (%rbx)
    0000114f: 	movq	0x110(%rsp), %rax
    00001157: 	movq	%rax, %rcx
    0000115a: 	movq	%rax, 0x8(%rsp)
    0000115f: 	addq	%r12, %rcx
    00001162: 	je	.Ltmp3057 # Offset: 4450
    00001164: 	testq	%rax, %rax
    00001167: 	je	.Ltmp3058 # Offset: 4455
.Ltmp3057:
    0000116d: 	movq	%r12, 0x88(%rsp)
    00001175: 	cmpq	$0xf, %r12
    00001179: 	ja	.Ltmp3059 # Offset: 4473
    0000117f: 	cmpq	$0x1, %r12
    00001183: 	jne	.Ltmp3060 # Offset: 4483
    00001189: 	movq	0x8(%rsp), %rax
    0000118e: 	movzbl	(%rax), %eax
    00001191: 	movb	%al, 0x10(%rbx)
.Ltmp3119:
    00001194: 	movq	%r12, 0x8(%rbx)
    00001198: 	movb	$0x0, (%rdi,%r12)
    0000119d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000011a4: 	addq	$0x20, %rax
    000011a8: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp3107:
    000011af: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000011b6: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000011bd: 	je	.Ltmp3061 # Offset: 4541
.Ltmp3106:
    000011c3: 	movq	-0x20(%rax), %r12
    000011c7: 	callq	clock@PLT # Offset: 4551
    000011cc: 	pxor	%xmm0, %xmm0
    000011d0: 	movq	%rax, end_time(%rip)
    000011d7: 	movq	%r12, %rdi
    000011da: 	subq	start_time(%rip), %rax
    000011e1: 	cvtsi2sd	%rax, %xmm0
    000011e6: 	divsd	DATAat0x4d640(%rip), %xmm0
    000011ee: 	callq	_Z13record_resultdPKc # Offset: 4590
    000011f3: 	movq	0x110(%rsp), %rdi
    000011fb: 	cmpq	0x38(%rsp), %rdi
    00001200: 	je	.Ltmp3062 # Offset: 4608
    00001202: 	movq	0x120(%rsp), %rax
    0000120a: 	leaq	0x1(%rax), %rsi
    0000120e: 	callq	_ZdlPvm@PLT # Offset: 4622
.Ltmp3062:
    00001213: 	movq	(%r13), %rbx
    00001217: 	movq	0x8(%r13), %r12
    0000121b: 	movq	%r15, 0x130(%rsp)
    00001223: 	movq	%rbx, %rax
    00001226: 	addq	%r12, %rax
    00001229: 	je	.Ltmp3063 # Offset: 4649
    0000122b: 	testq	%rbx, %rbx
    0000122e: 	je	.Ltmp2980 # Offset: 4654
.Ltmp3063:
    00001234: 	movq	%r12, 0x88(%rsp)
    0000123c: 	cmpq	$0xf, %r12
    00001240: 	ja	.Ltmp3064 # Offset: 4672
    00001246: 	cmpq	$0x1, %r12
    0000124a: 	jne	.Ltmp3065 # Offset: 4682
    00001250: 	movzbl	(%rbx), %eax
    00001253: 	movb	%al, 0x140(%rsp)
    0000125a: 	movq	%r15, %rax
.Ltmp3099:
    0000125d: 	movq	%r12, 0x138(%rsp)
    00001265: 	movb	$0x0, (%rax,%r12)
    0000126a: 	movabsq	$0x3fffffffffffffff, %rax
    00001274: 	subq	0x138(%rsp), %rax
    0000127c: 	cmpq	$0x6, %rax
    00001280: 	jbe	.Ltmp3066 # Offset: 4736
    00001286: 	movl	$0x7, %edx
    0000128b: 	leaq	DATAat0x4d293(%rip), %rsi
    00001292: 	movq	%r14, %rdi
    00001295: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4757
    0000129a: 	movss	0x58(%rsp), %xmm0
    000012a0: 	movq	%r14, %rdx
    000012a3: 	movl	$0x1f40, %esi
    000012a8: 	movq	%rbp, %rdi
    000012ab: 	callq	_Z9test_CSENIf14custom_cse_divIfELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4779
    000012b0: 	movq	0x130(%rsp), %rdi
    000012b8: 	cmpq	%r15, %rdi
    000012bb: 	je	.Ltmp3067 # Offset: 4795
    000012bd: 	movq	0x140(%rsp), %rax
    000012c5: 	leaq	0x1(%rax), %rsi
    000012c9: 	callq	_ZdlPvm@PLT # Offset: 4809
.Ltmp3067:
    000012ce: 	leaq	DATAat0x4d29f(%rip), %rdx
    000012d5: 	movq	%r13, %rsi
    000012d8: 	movq	%r14, %rdi
    000012db: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4827
    000012e0: 	callq	clock@PLT # Offset: 4832
    000012e5: 	movl	iterations(%rip), %edx
    000012eb: 	movq	%rax, start_time(%rip)
    000012f2: 	testl	%edx, %edx
    000012f4: 	jle	.Ltmp3068 # Offset: 4852
    000012fa: 	movaps	DATAat0x4d600(%rip), %xmm4
    00001301: 	pxor	%xmm7, %xmm7
    00001305: 	xorl	%r12d, %r12d
    00001308: 	movss	DATAat0x4d600(%rip), %xmm6
    00001310: 	movss	%xmm7, 0x5c(%rsp)
    00001316: 	movq	DATAat0x4d5e0(%rip), %xmm7
    0000131e: 	movss	DATAat0x4d5d0(%rip), %xmm5
    00001326: 	leaq	0x7cf0(%rbp), %rbx
    0000132d: 	movaps	%xmm4, 0x10(%rsp)
    00001332: 	movsd	DATAat0x4d628(%rip), %xmm4
    0000133a: 	movss	%xmm6, 0x8(%rsp)
    00001340: 	movsd	DATAat0x4d620(%rip), %xmm6
    00001348: 	movsd	%xmm4, 0x70(%rsp)
    0000134e: 	movss	0x58(%rsp), %xmm4
    00001354: 	movaps	%xmm5, 0x20(%rsp)
    00001359: 	shufps	$0x0, %xmm4, %xmm4
    0000135d: 	movsd	%xmm6, 0x30(%rsp)
    00001363: 	movaps	%xmm7, 0x60(%rsp)
    00001368: 	movaps	%xmm4, 0x40(%rsp)
    0000136d: 	nopl	(%rax) # Size: 3
.Ltmp3072:
    00001370: 	movss	(%rbp), %xmm2
    00001375: 	movss	0x58(%rsp), %xmm7
    0000137b: 	movq	%rbp, %rax
    0000137e: 	movss	0x4(%rbp), %xmm1
    00001383: 	movaps	%xmm2, %xmm3
    00001386: 	movaps	%xmm2, %xmm0
    00001389: 	divss	%xmm7, %xmm3
    0000138d: 	subss	%xmm1, %xmm0
    00001391: 	mulss	%xmm7, %xmm0
    00001395: 	addss	%xmm3, %xmm0
    00001399: 	addss	%xmm0, %xmm0
    0000139d: 	addss	%xmm0, %xmm2
    000013a1: 	addss	%xmm0, %xmm1
    000013a5: 	subss	%xmm1, %xmm2
    000013a9: 	mulss	0x8(%rsp), %xmm2
    000013af: 	addss	0x5c(%rsp), %xmm2
    000013b5: 	nopl	(%rax) # Size: 3
.Ltmp3069:
    000013b8: 	movups	(%rax), %xmm0
    000013bb: 	movaps	0x40(%rsp), %xmm7
    000013c0: 	addq	$0x10, %rax
    000013c4: 	movups	-0xc(%rax), %xmm4
    000013c8: 	movaps	%xmm0, %xmm3
    000013cb: 	movaps	%xmm0, %xmm1
    000013ce: 	divps	%xmm7, %xmm3
    000013d1: 	subps	%xmm4, %xmm1
    000013d4: 	mulps	%xmm7, %xmm1
    000013d7: 	addps	%xmm3, %xmm1
    000013da: 	addps	%xmm1, %xmm1
    000013dd: 	addps	%xmm1, %xmm0
    000013e0: 	addps	%xmm4, %xmm1
    000013e3: 	subps	%xmm1, %xmm0
    000013e6: 	mulps	0x10(%rsp), %xmm0
    000013eb: 	addss	%xmm0, %xmm2
    000013ef: 	movaps	%xmm0, %xmm1
    000013f2: 	shufps	$0x55, %xmm0, %xmm1
    000013f6: 	addss	%xmm2, %xmm1
    000013fa: 	movaps	%xmm0, %xmm2
    000013fd: 	unpckhps	%xmm0, %xmm2
    00001400: 	shufps	$0xff, %xmm0, %xmm0
    00001404: 	addss	%xmm1, %xmm2
    00001408: 	addss	%xmm0, %xmm2
    0000140c: 	cmpq	%rax, %rbx
    0000140f: 	jne	.Ltmp3069 # Offset: 5135
    00001411: 	movss	0x7cf0(%rbp), %xmm0
    00001419: 	movss	0x58(%rsp), %xmm5
    0000141f: 	movss	0x7cf4(%rbp), %xmm1
    00001427: 	movss	0x8(%rsp), %xmm6
    0000142d: 	movaps	%xmm0, %xmm4
    00001430: 	movaps	%xmm0, %xmm3
    00001433: 	divss	%xmm5, %xmm4
    00001437: 	subss	%xmm1, %xmm3
    0000143b: 	mulss	%xmm5, %xmm3
    0000143f: 	addss	%xmm4, %xmm3
    00001443: 	movaps	%xmm1, %xmm4
    00001446: 	divss	%xmm5, %xmm4
    0000144a: 	addss	%xmm3, %xmm3
    0000144e: 	addss	%xmm3, %xmm0
    00001452: 	addss	%xmm1, %xmm3
    00001456: 	subss	%xmm3, %xmm0
    0000145a: 	movaps	%xmm1, %xmm3
    0000145d: 	mulss	%xmm6, %xmm0
    00001461: 	addss	%xmm0, %xmm2
    00001465: 	movss	0x7cf8(%rbp), %xmm0
    0000146d: 	subss	%xmm0, %xmm3
    00001471: 	mulss	%xmm5, %xmm3
    00001475: 	addss	%xmm4, %xmm3
    00001479: 	movaps	%xmm0, %xmm4
    0000147c: 	divss	%xmm5, %xmm4
    00001480: 	addss	%xmm3, %xmm3
    00001484: 	addss	%xmm3, %xmm1
    00001488: 	addss	%xmm0, %xmm3
    0000148c: 	subss	%xmm3, %xmm1
    00001490: 	movss	0x7cfc(%rbp), %xmm3
    00001498: 	mulss	%xmm6, %xmm1
    0000149c: 	addss	%xmm2, %xmm1
    000014a0: 	movaps	%xmm0, %xmm2
    000014a3: 	subss	%xmm3, %xmm2
    000014a7: 	mulss	%xmm5, %xmm2
    000014ab: 	addss	%xmm4, %xmm2
    000014af: 	movaps	0x20(%rsp), %xmm4
    000014b4: 	addss	%xmm2, %xmm2
    000014b8: 	addss	%xmm2, %xmm0
    000014bc: 	addss	%xmm2, %xmm3
    000014c0: 	subss	%xmm3, %xmm0
    000014c4: 	mulss	%xmm6, %xmm0
    000014c8: 	addss	%xmm1, %xmm0
    000014cc: 	pxor	%xmm1, %xmm1
    000014d0: 	andps	%xmm0, %xmm4
    000014d3: 	cvtss2sd	%xmm4, %xmm1
    000014d7: 	comisd	0x30(%rsp), %xmm1
    000014dd: 	jbe	.Ltmp3070 # Offset: 5341
    000014df: 	divss	%xmm0, %xmm0
.Ltmp3070:
    000014e3: 	movsd	0x70(%rsp), %xmm7
    000014e9: 	cvtss2sd	%xmm0, %xmm0
    000014ed: 	andpd	0x60(%rsp), %xmm0
    000014f3: 	comisd	%xmm0, %xmm7
    000014f7: 	jbe	.Ltmp3071 # Offset: 5367
.Ltmp3086:
    000014fd: 	addl	$0x1, %r12d
    00001501: 	cmpl	%edx, %r12d
    00001504: 	jl	.Ltmp3072 # Offset: 5380
.Ltmp3068:
    0000150a: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00001511: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00001518: 	subq	$0x20, %rax
    0000151c: 	cmpq	%rax, %rbx
    0000151f: 	je	.Ltmp3073 # Offset: 5407
    00001525: 	leaq	0x10(%rbx), %rdi
    00001529: 	movq	0x138(%rsp), %r12
    00001531: 	movq	%rdi, (%rbx)
    00001534: 	movq	0x130(%rsp), %rax
    0000153c: 	movq	%rax, %rcx
    0000153f: 	movq	%rax, 0x8(%rsp)
    00001544: 	addq	%r12, %rcx
    00001547: 	je	.Ltmp3074 # Offset: 5447
    00001549: 	testq	%rax, %rax
    0000154c: 	je	.Ltmp3075 # Offset: 5452
.Ltmp3074:
    00001552: 	movq	%r12, 0x88(%rsp)
    0000155a: 	cmpq	$0xf, %r12
    0000155e: 	ja	.Ltmp3076 # Offset: 5470
    00001564: 	cmpq	$0x1, %r12
    00001568: 	jne	.Ltmp3077 # Offset: 5480
    0000156e: 	movq	0x8(%rsp), %rax
    00001573: 	movzbl	(%rax), %eax
    00001576: 	movb	%al, 0x10(%rbx)
.Ltmp3118:
    00001579: 	movq	%r12, 0x8(%rbx)
    0000157d: 	movb	$0x0, (%rdi,%r12)
    00001582: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001589: 	addq	$0x20, %rax
    0000158d: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp3108:
    00001594: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000159b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000015a2: 	je	.Ltmp3078 # Offset: 5538
.Ltmp3101:
    000015a8: 	movq	-0x20(%rax), %r12
    000015ac: 	callq	clock@PLT # Offset: 5548
    000015b1: 	pxor	%xmm0, %xmm0
    000015b5: 	movq	%rax, end_time(%rip)
    000015bc: 	movq	%r12, %rdi
    000015bf: 	subq	start_time(%rip), %rax
    000015c6: 	cvtsi2sd	%rax, %xmm0
    000015cb: 	divsd	DATAat0x4d640(%rip), %xmm0
    000015d3: 	callq	_Z13record_resultdPKc # Offset: 5587
    000015d8: 	movq	0x130(%rsp), %rdi
    000015e0: 	cmpq	%r15, %rdi
    000015e3: 	je	.Ltmp3079 # Offset: 5603
    000015e5: 	movq	0x140(%rsp), %rax
    000015ed: 	leaq	0x1(%rax), %rsi
    000015f1: 	callq	_ZdlPvm@PLT # Offset: 5617
.Ltmp3079:
    000015f6: 	leaq	DATAat0x4d2b1(%rip), %rdx
    000015fd: 	movq	%r13, %rsi
    00001600: 	movq	%r14, %rdi
    00001603: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5635
    00001608: 	movq	%r14, %rdx
    0000160b: 	movl	$0x1f40, %esi
    00001610: 	movq	%rbp, %rdi
    00001613: 	movss	0x58(%rsp), %xmm0
    00001619: 	callq	_Z9test_CSENIf14custom_cse_mixIfELi8EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5657
    0000161e: 	movq	0x130(%rsp), %rdi
    00001626: 	cmpq	%r15, %rdi
    00001629: 	je	.Ltmp3080 # Offset: 5673
    0000162b: 	movq	0x140(%rsp), %rax
    00001633: 	leaq	0x1(%rax), %rsi
    00001637: 	callq	_ZdlPvm@PLT # Offset: 5687
.Ltmp3080:
    0000163c: 	movq	0x158(%rsp), %rax
    00001644: 	subq	%fs:0x28, %rax
    0000164d: 	jne	.Ltmp3081 # Offset: 5709
    00001653: 	movq	(%r13), %rdi
    00001657: 	movl	iterations(%rip), %edx
    0000165d: 	xorl	%r8d, %r8d
    00001660: 	xorl	%ecx, %ecx
    00001662: 	addq	$0x168, %rsp
    00001669: 	movl	$0x1f40, %esi
    0000166e: 	popq	%rbx
    0000166f: 	popq	%rbp
    00001670: 	popq	%r12
    00001672: 	popq	%r13
    00001674: 	popq	%r14
    00001676: 	popq	%r15
    00001678: 	jmp	_Z9summarizePKciiii # TAILCALL  # Offset: 5752
.Ltmp2982:
    0000167d: 	testq	%r12, %r12
    00001680: 	jne	.Ltmp3082 # Offset: 5760
    00001686: 	movq	%r14, %rax
    00001689: 	jmp	.Ltmp3083 # Offset: 5769
    0000168e: 	nop # Size: 2
.Ltmp2987:
    00001690: 	movq	0x90(%rsp), %rdx
    00001698: 	movq	%r15, %rsi
    0000169b: 	movl	$0x1, %edi
    000016a0: 	xorl	%eax, %eax
    000016a2: 	callq	__printf_chk@PLT # Offset: 5794
    000016a7: 	movl	iterations(%rip), %edx
    000016ad: 	jmp	.Ltmp3084 # Offset: 5805
    000016b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3003:
    000016b8: 	movq	0xb0(%rsp), %rdx
    000016c0: 	movq	%r14, %rsi
    000016c3: 	movl	$0x1, %edi
    000016c8: 	xorl	%eax, %eax
    000016ca: 	callq	__printf_chk@PLT # Offset: 5834
    000016cf: 	movl	iterations(%rip), %eax
    000016d5: 	jmp	.Ltmp3085 # Offset: 5845
    000016da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3071:
    000016e0: 	movq	0x130(%rsp), %rdx
    000016e8: 	leaq	DATAat0x4d004(%rip), %rsi
    000016ef: 	movl	$0x1, %edi
    000016f4: 	xorl	%eax, %eax
    000016f6: 	callq	__printf_chk@PLT # Offset: 5878
    000016fb: 	movl	iterations(%rip), %edx
    00001701: 	jmp	.Ltmp3086 # Offset: 5889
    00001706: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3037:
    00001710: 	movq	0x130(%rsp), %rdx
    00001718: 	leaq	DATAat0x4d004(%rip), %rsi
    0000171f: 	movl	$0x1, %edi
    00001724: 	xorl	%eax, %eax
    00001726: 	callq	__printf_chk@PLT # Offset: 5926
    0000172b: 	movl	iterations(%rip), %eax
    00001731: 	jmp	.Ltmp3087 # Offset: 5937
    00001736: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3054:
    00001740: 	movq	0x110(%rsp), %rdx
    00001748: 	leaq	DATAat0x4d004(%rip), %rsi
    0000174f: 	movl	$0x1, %edi
    00001754: 	xorl	%eax, %eax
    00001756: 	callq	__printf_chk@PLT # Offset: 5974
    0000175b: 	movl	iterations(%rip), %edx
    00001761: 	jmp	.Ltmp3088 # Offset: 5985
    00001766: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3024:
    00001770: 	movq	0xf0(%rsp), %rdx
    00001778: 	movq	%r14, %rsi
    0000177b: 	movl	$0x1, %edi
    00001780: 	xorl	%eax, %eax
    00001782: 	callq	__printf_chk@PLT # Offset: 6018
    00001787: 	movl	iterations(%rip), %eax
    0000178d: 	jmp	.Ltmp3089 # Offset: 6029
.Ltmp3049:
    00001792: 	testq	%r12, %r12
    00001795: 	jne	.Ltmp3090 # Offset: 6037
    0000179b: 	movq	0x38(%rsp), %rax
    000017a0: 	jmp	.Ltmp3091 # Offset: 6048
.Ltmp3019:
    000017a5: 	testq	%r12, %r12
    000017a8: 	jne	.Ltmp3092 # Offset: 6056
    000017ae: 	movq	%r15, %rax
    000017b1: 	jmp	.Ltmp3093 # Offset: 6065
.Ltmp3014:
    000017b6: 	testq	%r12, %r12
    000017b9: 	jne	.Ltmp3094 # Offset: 6073
    000017bf: 	movq	%rbx, %rax
    000017c2: 	jmp	.Ltmp3095 # Offset: 6082
.Ltmp2998:
    000017c7: 	testq	%r12, %r12
    000017ca: 	jne	.Ltmp3096 # Offset: 6090
    000017d0: 	movq	%r15, %rax
    000017d3: 	jmp	.Ltmp3097 # Offset: 6099
.Ltmp3065:
    000017d8: 	testq	%r12, %r12
    000017db: 	jne	.Ltmp3098 # Offset: 6107
    000017e1: 	movq	%r15, %rax
    000017e4: 	jmp	.Ltmp3099 # Offset: 6116
.Ltmp3064:
    000017e9: 	movq	%r14, %rdi
    000017ec: 	leaq	0x88(%rsp), %rsi
    000017f4: 	xorl	%edx, %edx
    000017f6: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6134
    000017fb: 	movq	%rax, 0x130(%rsp)
    00001803: 	movq	%rax, %rdi
    00001806: 	movq	0x88(%rsp), %rax
    0000180e: 	movq	%rax, 0x140(%rsp)
.Ltmp3129:
    00001816: 	movq	%r12, %rdx
    00001819: 	movq	%rbx, %rsi
    0000181c: 	callq	memcpy@PLT # Offset: 6172
    00001821: 	movq	0x88(%rsp), %r12
    00001829: 	movq	0x130(%rsp), %rax
    00001831: 	jmp	.Ltmp3099 # Offset: 6193
.Ltmp3048:
    00001836: 	leaq	0x110(%rsp), %rdi
    0000183e: 	leaq	0x88(%rsp), %rsi
    00001846: 	xorl	%edx, %edx
    00001848: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6216
    0000184d: 	movq	%rax, 0x110(%rsp)
    00001855: 	movq	%rax, %rdi
    00001858: 	movq	0x88(%rsp), %rax
    00001860: 	movq	%rax, 0x120(%rsp)
.Ltmp3125:
    00001868: 	movq	%r12, %rdx
    0000186b: 	movq	%rbx, %rsi
    0000186e: 	callq	memcpy@PLT # Offset: 6254
    00001873: 	movq	0x88(%rsp), %r12
    0000187b: 	movq	0x110(%rsp), %rax
    00001883: 	jmp	.Ltmp3091 # Offset: 6275
.Ltmp3018:
    00001888: 	leaq	0xf0(%rsp), %rdi
    00001890: 	leaq	0x88(%rsp), %rsi
    00001898: 	xorl	%edx, %edx
    0000189a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6298
    0000189f: 	movq	%rax, 0xf0(%rsp)
    000018a7: 	movq	%rax, %rdi
    000018aa: 	movq	0x88(%rsp), %rax
    000018b2: 	movq	%rax, 0x100(%rsp)
.Ltmp3126:
    000018ba: 	movq	%r12, %rdx
    000018bd: 	movq	%r14, %rsi
    000018c0: 	callq	memcpy@PLT # Offset: 6336
    000018c5: 	movq	0x88(%rsp), %r12
    000018cd: 	movq	0xf0(%rsp), %rax
    000018d5: 	jmp	.Ltmp3093 # Offset: 6357
.Ltmp2997:
    000018da: 	leaq	0xb0(%rsp), %rdi
    000018e2: 	leaq	0x88(%rsp), %rsi
    000018ea: 	xorl	%edx, %edx
    000018ec: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6380
    000018f1: 	movq	%rax, 0xb0(%rsp)
    000018f9: 	movq	%rax, %rdi
    000018fc: 	movq	0x88(%rsp), %rax
    00001904: 	movq	%rax, 0xc0(%rsp)
.Ltmp3128:
    0000190c: 	movq	%r12, %rdx
    0000190f: 	movq	%r14, %rsi
    00001912: 	callq	memcpy@PLT # Offset: 6418
    00001917: 	movq	0x88(%rsp), %r12
    0000191f: 	movq	0xb0(%rsp), %rax
    00001927: 	jmp	.Ltmp3097 # Offset: 6439
.Ltmp2981:
    0000192c: 	leaq	0x90(%rsp), %rdi
    00001934: 	leaq	0x88(%rsp), %rsi
    0000193c: 	xorl	%edx, %edx
    0000193e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6462
    00001943: 	movq	%rax, 0x90(%rsp)
    0000194b: 	movq	%rax, %rdi
    0000194e: 	movq	0x88(%rsp), %rax
    00001956: 	movq	%rax, 0xa0(%rsp)
.Ltmp3124:
    0000195e: 	movq	%r12, %rdx
    00001961: 	movq	%r15, %rsi
    00001964: 	callq	memcpy@PLT # Offset: 6500
    00001969: 	movq	0x88(%rsp), %r12
    00001971: 	movq	0x90(%rsp), %rax
    00001979: 	jmp	.Ltmp3083 # Offset: 6521
.Ltmp3013:
    0000197e: 	leaq	0xd0(%rsp), %rdi
    00001986: 	leaq	0x88(%rsp), %rsi
    0000198e: 	xorl	%edx, %edx
    00001990: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6544
    00001995: 	movq	%rax, 0xd0(%rsp)
    0000199d: 	movq	%rax, %rdi
    000019a0: 	movq	0x88(%rsp), %rax
    000019a8: 	movq	%rax, 0xe0(%rsp)
.Ltmp3127:
    000019b0: 	movq	%r12, %rdx
    000019b3: 	movq	%r14, %rsi
    000019b6: 	callq	memcpy@PLT # Offset: 6582
    000019bb: 	movq	0x88(%rsp), %r12
    000019c3: 	movq	0xd0(%rsp), %rax
    000019cb: 	jmp	.Ltmp3095 # Offset: 6603
.Ltmp3010:
    000019d0: 	movq	-0x8(%rdx), %rax
    000019d4: 	addq	$0x200, %rax
    000019da: 	jmp	.Ltmp3100 # Offset: 6618
.Ltmp3078:
    000019df: 	movq	-0x8(%rdx), %rax
    000019e3: 	addq	$0x200, %rax
    000019e9: 	jmp	.Ltmp3101 # Offset: 6633
.Ltmp2994:
    000019ee: 	movq	-0x8(%rdx), %rax
    000019f2: 	addq	$0x200, %rax
    000019f8: 	jmp	.Ltmp3102 # Offset: 6648
.Ltmp2989:
    000019fd: 	movq	0x40(%rsp), %rsi
    00001a02: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001a09: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6665
    00001a0e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001a15: 	jmp	.Ltmp3103 # Offset: 6677
.Ltmp3044:
    00001a1a: 	movq	-0x8(%rdx), %rax
    00001a1e: 	addq	$0x200, %rax
    00001a24: 	jmp	.Ltmp3104 # Offset: 6692
.Ltmp3005:
    00001a29: 	movq	0x78(%rsp), %rsi
    00001a2e: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001a35: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6709
    00001a3a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001a41: 	jmp	.Ltmp3105 # Offset: 6721
.Ltmp3061:
    00001a46: 	movq	-0x8(%rdx), %rax
    00001a4a: 	addq	$0x200, %rax
    00001a50: 	jmp	.Ltmp3106 # Offset: 6736
.Ltmp3056:
    00001a55: 	movq	0x50(%rsp), %rsi
    00001a5a: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001a61: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6753
    00001a66: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001a6d: 	jmp	.Ltmp3107 # Offset: 6765
.Ltmp3073:
    00001a72: 	movq	%r14, %rsi
    00001a75: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001a7c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6780
    00001a81: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001a88: 	jmp	.Ltmp3108 # Offset: 6792
.Ltmp3039:
    00001a8d: 	movq	%r14, %rsi
    00001a90: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001a97: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6807
    00001a9c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001aa3: 	jmp	.Ltmp3109 # Offset: 6819
.Ltmp3031:
    00001aa8: 	movq	-0x8(%rdx), %rax
    00001aac: 	addq	$0x200, %rax
    00001ab2: 	jmp	.Ltmp3110 # Offset: 6834
.Ltmp3026:
    00001ab7: 	movq	0x78(%rsp), %rsi
    00001abc: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001ac3: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 6851
    00001ac8: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001acf: 	jmp	.Ltmp3111 # Offset: 6863
.Ltmp3043:
    00001ad4: 	testq	%r12, %r12
    00001ad7: 	je	.Ltmp3112 # Offset: 6871
    00001add: 	jmp	.Ltmp3113 # Offset: 6877
    00001ae2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3030:
    00001ae8: 	testq	%r12, %r12
    00001aeb: 	je	.Ltmp3114 # Offset: 6891
    00001af1: 	jmp	.Ltmp3115 # Offset: 6897
    00001af6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3009:
    00001b00: 	testq	%r12, %r12
    00001b03: 	je	.Ltmp3116 # Offset: 6915
    00001b09: 	jmp	.Ltmp3117 # Offset: 6921
    00001b0e: 	nop # Size: 2
.Ltmp3077:
    00001b10: 	testq	%r12, %r12
    00001b13: 	je	.Ltmp3118 # Offset: 6931
.Ltmp3123:
    00001b19: 	movq	0x8(%rsp), %rsi
    00001b1e: 	movq	%r12, %rdx
    00001b21: 	callq	memcpy@PLT # Offset: 6945
    00001b26: 	movq	0x88(%rsp), %r12
    00001b2e: 	movq	(%rbx), %rdi
    00001b31: 	jmp	.Ltmp3118 # Offset: 6961
.Ltmp3060:
    00001b36: 	testq	%r12, %r12
    00001b39: 	je	.Ltmp3119 # Offset: 6969
    00001b3f: 	jmp	.Ltmp3120 # Offset: 6975
    00001b44: 	nopl	(%rax) # Size: 4
.Ltmp2993:
    00001b48: 	testq	%r12, %r12
    00001b4b: 	je	.Ltmp3121 # Offset: 6987
    00001b51: 	jmp	.Ltmp3122 # Offset: 6993
    00001b56: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3029:
    00001b60: 	leaq	0x88(%rsp), %rsi
    00001b68: 	xorl	%edx, %edx
    00001b6a: 	movq	%rbx, %rdi
    00001b6d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7021
    00001b72: 	movq	%rax, (%rbx)
    00001b75: 	movq	%rax, %rdi
    00001b78: 	movq	0x88(%rsp), %rax
    00001b80: 	movq	%rax, 0x10(%rbx)
.Ltmp3115:
    00001b84: 	movq	%r12, %rdx
    00001b87: 	movq	%r14, %rsi
    00001b8a: 	callq	memcpy@PLT # Offset: 7050
    00001b8f: 	movq	0x88(%rsp), %r12
    00001b97: 	movq	(%rbx), %rdi
    00001b9a: 	jmp	.Ltmp3114 # Offset: 7066
.Ltmp3008:
    00001b9f: 	leaq	0x88(%rsp), %rsi
    00001ba7: 	xorl	%edx, %edx
    00001ba9: 	movq	%rbx, %rdi
    00001bac: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7084
    00001bb1: 	movq	%rax, (%rbx)
    00001bb4: 	movq	%rax, %rdi
    00001bb7: 	movq	0x88(%rsp), %rax
    00001bbf: 	movq	%rax, 0x10(%rbx)
.Ltmp3117:
    00001bc3: 	movq	%r12, %rdx
    00001bc6: 	movq	%r14, %rsi
    00001bc9: 	callq	memcpy@PLT # Offset: 7113
    00001bce: 	movq	0x88(%rsp), %r12
    00001bd6: 	movq	(%rbx), %rdi
    00001bd9: 	jmp	.Ltmp3116 # Offset: 7129
.Ltmp2992:
    00001bde: 	leaq	0x88(%rsp), %rsi
    00001be6: 	xorl	%edx, %edx
    00001be8: 	movq	%rbx, %rdi
    00001beb: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7147
    00001bf0: 	movq	%rax, (%rbx)
    00001bf3: 	movq	%rax, %rdi
    00001bf6: 	movq	0x88(%rsp), %rax
    00001bfe: 	movq	%rax, 0x10(%rbx)
.Ltmp3122:
    00001c02: 	movq	%r12, %rdx
    00001c05: 	movq	%r15, %rsi
    00001c08: 	callq	memcpy@PLT # Offset: 7176
    00001c0d: 	movq	0x88(%rsp), %r12
    00001c15: 	movq	(%rbx), %rdi
    00001c18: 	jmp	.Ltmp3121 # Offset: 7192
.Ltmp3059:
    00001c1d: 	leaq	0x88(%rsp), %rsi
    00001c25: 	xorl	%edx, %edx
    00001c27: 	movq	%rbx, %rdi
    00001c2a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7210
    00001c2f: 	movq	%rax, (%rbx)
    00001c32: 	movq	%rax, %rdi
    00001c35: 	movq	0x88(%rsp), %rax
    00001c3d: 	movq	%rax, 0x10(%rbx)
.Ltmp3120:
    00001c41: 	movq	0x8(%rsp), %rsi
    00001c46: 	movq	%r12, %rdx
    00001c49: 	callq	memcpy@PLT # Offset: 7241
    00001c4e: 	movq	0x88(%rsp), %r12
    00001c56: 	movq	(%rbx), %rdi
    00001c59: 	jmp	.Ltmp3119 # Offset: 7257
.Ltmp3076:
    00001c5e: 	leaq	0x88(%rsp), %rsi
    00001c66: 	xorl	%edx, %edx
    00001c68: 	movq	%rbx, %rdi
    00001c6b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7275
    00001c70: 	movq	%rax, (%rbx)
    00001c73: 	movq	%rax, %rdi
    00001c76: 	movq	0x88(%rsp), %rax
    00001c7e: 	movq	%rax, 0x10(%rbx)
    00001c82: 	jmp	.Ltmp3123 # Offset: 7298
.Ltmp3042:
    00001c87: 	leaq	0x88(%rsp), %rsi
    00001c8f: 	xorl	%edx, %edx
    00001c91: 	movq	%rbx, %rdi
    00001c94: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7316
    00001c99: 	movq	%rax, (%rbx)
    00001c9c: 	movq	%rax, %rdi
    00001c9f: 	movq	0x88(%rsp), %rax
    00001ca7: 	movq	%rax, 0x10(%rbx)
.Ltmp3113:
    00001cab: 	movq	0x8(%rsp), %rsi
    00001cb0: 	movq	%r12, %rdx
    00001cb3: 	callq	memcpy@PLT # Offset: 7347
    00001cb8: 	movq	0x88(%rsp), %r12
    00001cc0: 	movq	(%rbx), %rdi
    00001cc3: 	jmp	.Ltmp3112 # Offset: 7363
.Ltmp2983:
    00001cc8: 	leaq	DATAat0x4d194(%rip), %rdi
    00001ccf: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7375
.Ltmp2991:
    00001cd4: 	leaq	DATAat0x4d018(%rip), %rdi
    00001cdb: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7387
.Ltmp2999:
    00001ce0: 	leaq	DATAat0x4d194(%rip), %rdi
    00001ce7: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7399
.Ltmp3007:
    00001cec: 	leaq	DATAat0x4d018(%rip), %rdi
    00001cf3: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7411
.Ltmp3015:
    00001cf8: 	leaq	DATAat0x4d194(%rip), %rdi
    00001cff: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7423
.Ltmp3020:
    00001d04: 	leaq	DATAat0x4d194(%rip), %rdi
    00001d0b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7435
.Ltmp3028:
    00001d10: 	leaq	DATAat0x4d018(%rip), %rdi
    00001d17: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7447
.Ltmp3041:
    00001d1c: 	leaq	DATAat0x4d018(%rip), %rdi
    00001d23: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7459
.Ltmp3050:
    00001d28: 	leaq	DATAat0x4d194(%rip), %rdi
    00001d2f: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7471
.Ltmp3058:
    00001d34: 	leaq	DATAat0x4d018(%rip), %rdi
    00001d3b: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7483
.Ltmp3066:
    00001d40: 	leaq	DATAat0x4d194(%rip), %rdi
    00001d47: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 7495
.Ltmp3075:
    00001d4c: 	leaq	DATAat0x4d018(%rip), %rdi
    00001d53: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7507
.Ltmp3081:
    00001d58: 	callq	__stack_chk_fail@PLT # Offset: 7512
.Ltmp3082:
    00001d5d: 	movq	%r14, %rdi
    00001d60: 	jmp	.Ltmp3124 # Offset: 7520
.Ltmp3090:
    00001d65: 	movq	0x38(%rsp), %rdi
    00001d6a: 	jmp	.Ltmp3125 # Offset: 7530
.Ltmp3092:
    00001d6f: 	movq	%r15, %rdi
    00001d72: 	jmp	.Ltmp3126 # Offset: 7538
.Ltmp3094:
    00001d77: 	movq	%rbx, %rdi
    00001d7a: 	jmp	.Ltmp3127 # Offset: 7546
.Ltmp3096:
    00001d7f: 	movq	%r15, %rdi
    00001d82: 	jmp	.Ltmp3128 # Offset: 7554
.Ltmp3098:
    00001d87: 	movq	%r15, %rdi
    00001d8a: 	jmp	.Ltmp3129 # Offset: 7562
.Ltmp2980:
    00001d8f: 	leaq	DATAat0x4d018(%rip), %rdi
    00001d96: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 7574
    00001d9b: 	endbr64
.Ltmp3133:
    00001d9f: 	movq	%rax, %rbp
    00001da2: 	jmp	.Ltmp3130 # Offset: 7586
    00001da7: 	endbr64
.Ltmp3132:
    00001dab: 	movq	%rax, %rbp
    00001dae: 	jmp	.Ltmp3131 # Offset: 7598
    00001db3: 	endbr64
    00001db7: 	jmp	.Ltmp3132 # Offset: 7607
    00001db9: 	endbr64
    00001dbd: 	jmp	.Ltmp3133 # Offset: 7613
    00001dbf: 	endbr64
.Ltmp3135:
    00001dc3: 	movq	%rax, %rbp
    00001dc6: 	jmp	.Ltmp3134 # Offset: 7622
    00001dc8: 	endbr64
    00001dcc: 	jmp	.Ltmp3135 # Offset: 7628
    00001dce: 	endbr64
.Ltmp3140:
    00001dd2: 	movq	%rax, %rbp
    00001dd5: 	jmp	.Ltmp3136 # Offset: 7637
.Ltmp3134:
    00001dd7: 	movq	0xb0(%rsp), %rdi
    00001ddf: 	cmpq	%r15, %rdi
    00001de2: 	je	.Ltmp3137 # Offset: 7650
    00001de4: 	movq	0xc0(%rsp), %rax
    00001dec: 	leaq	0x1(%rax), %rsi
    00001df0: 	callq	_ZdlPvm@PLT # Offset: 7664
.Ltmp3137:
    00001df5: 	movq	%rbp, %rdi
    00001df8: 	callq	_Unwind_Resume@PLT # Offset: 7672
.Ltmp3136:
    00001dfd: 	movq	0xf0(%rsp), %rdi
    00001e05: 	cmpq	%r15, %rdi
    00001e08: 	je	.Ltmp3137 # Offset: 7688
    00001e0a: 	movq	0x100(%rsp), %rax
    00001e12: 	leaq	0x1(%rax), %rsi
    00001e16: 	callq	_ZdlPvm@PLT # Offset: 7702
    00001e1b: 	jmp	.Ltmp3137 # Offset: 7707
    00001e1d: 	endbr64
    00001e21: 	jmp	.Ltmp3132 # Offset: 7713
    00001e23: 	endbr64
    00001e27: 	jmp	.Ltmp3132 # Offset: 7719
    00001e29: 	endbr64
    00001e2d: 	jmp	.Ltmp3132 # Offset: 7725
    00001e32: 	endbr64
.Ltmp3142:
    00001e36: 	movq	%rax, %rbp
    00001e39: 	jmp	.Ltmp3138 # Offset: 7737
    00001e3b: 	endbr64
.Ltmp3141:
    00001e3f: 	movq	%rax, %rbp
    00001e42: 	jmp	.Ltmp3139 # Offset: 7746
    00001e47: 	endbr64
    00001e4b: 	jmp	.Ltmp3140 # Offset: 7755
    00001e4d: 	endbr64
    00001e51: 	jmp	.Ltmp3132 # Offset: 7761
    00001e56: 	endbr64
    00001e5a: 	jmp	.Ltmp3141 # Offset: 7770
.Ltmp3131:
    00001e5c: 	movq	0x130(%rsp), %rdi
    00001e64: 	cmpq	%r15, %rdi
    00001e67: 	je	.Ltmp3137 # Offset: 7783
.Ltmp3143:
    00001e69: 	movq	0x140(%rsp), %rax
    00001e71: 	leaq	0x1(%rax), %rsi
    00001e75: 	callq	_ZdlPvm@PLT # Offset: 7797
    00001e7a: 	jmp	.Ltmp3137 # Offset: 7802
.Ltmp3138:
    00001e7f: 	movq	0xd0(%rsp), %rdi
    00001e87: 	cmpq	%rbx, %rdi
    00001e8a: 	je	.Ltmp3137 # Offset: 7818
    00001e90: 	movq	0xe0(%rsp), %rax
    00001e98: 	leaq	0x1(%rax), %rsi
    00001e9c: 	callq	_ZdlPvm@PLT # Offset: 7836
    00001ea1: 	jmp	.Ltmp3137 # Offset: 7841
    00001ea6: 	endbr64
    00001eaa: 	jmp	.Ltmp3142 # Offset: 7850
.Ltmp3130:
    00001eac: 	movq	0x90(%rsp), %rdi
    00001eb4: 	cmpq	%r14, %rdi
    00001eb7: 	je	.Ltmp3137 # Offset: 7863
    00001ebd: 	movq	0xa0(%rsp), %rax
    00001ec5: 	leaq	0x1(%rax), %rsi
    00001ec9: 	callq	_ZdlPvm@PLT # Offset: 7881
    00001ece: 	jmp	.Ltmp3137 # Offset: 7886
    00001ed3: 	endbr64
    00001ed7: 	movq	%rax, %rbp
    00001eda: 	movq	0x130(%rsp), %rdi
    00001ee2: 	leaq	0x140(%rsp), %rax
    00001eea: 	cmpq	%rax, %rdi
    00001eed: 	jne	.Ltmp3143 # Offset: 7917
    00001ef3: 	jmp	.Ltmp3137 # Offset: 7923
.Ltmp3139:
    00001ef8: 	movq	0x110(%rsp), %rdi
    00001f00: 	cmpq	0x38(%rsp), %rdi
    00001f05: 	je	.Ltmp3137 # Offset: 7941
    00001f0b: 	movq	0x120(%rsp), %rax
    00001f13: 	leaq	0x1(%rax), %rsi
    00001f17: 	callq	_ZdlPvm@PLT # Offset: 7959
    00001f1c: 	jmp	.Ltmp3137 # Offset: 7964
DWARF CFI Instructions:
    <empty>
End of Function "_Z16TestUnrolledTypeIfLi8EEvPT_S0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z16TestUnrolledTypeIiLi4EEvPT_S0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 181
  State       : disassembled
  Address     : 0x2bee0
  Size        : 0x1587
  MaxSize     : 0x1590
  Offset      : 0x2bee0
  Section     : .text
  Orc Section : .local.text._Z16TestUnrolledTypeIiLi4EEvPT_S0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0180:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movl	%esi, %r12d
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	%rdi, %rbx
    00000014: 	subq	$0x98, %rsp
    0000001b: 	movq	(%rdx), %rbp
    0000001e: 	movq	0x8(%rdx), %r13
    00000022: 	movq	%rdx, (%rsp)
    00000026: 	leaq	0x30(%rsp), %r14
    0000002b: 	movq	%fs:0x28, %rax
    00000034: 	movq	%rax, 0x88(%rsp)
    0000003c: 	xorl	%eax, %eax
    0000003e: 	movq	%rbp, %rax
    00000041: 	movq	%r14, 0x20(%rsp)
    00000046: 	addq	%r13, %rax
    00000049: 	je	.Ltmp3144 # Offset: 73
    0000004b: 	testq	%rbp, %rbp
    0000004e: 	je	.Ltmp3145 # Offset: 78
.Ltmp3144:
    00000054: 	movq	%r13, 0x18(%rsp)
    00000059: 	cmpq	$0xf, %r13
    0000005d: 	ja	.Ltmp3146 # Offset: 93
    00000063: 	cmpq	$0x1, %r13
    00000067: 	jne	.Ltmp3147 # Offset: 103
    0000006d: 	movzbl	(%rbp), %eax
    00000071: 	movb	%al, 0x30(%rsp)
    00000075: 	movq	%r14, %rax
.Ltmp3240:
    00000078: 	movq	%r13, 0x28(%rsp)
    0000007d: 	movb	$0x0, (%rax,%r13)
    00000082: 	movabsq	$0x3fffffffffffffff, %rax
    0000008c: 	subq	0x28(%rsp), %rax
    00000091: 	cmpq	$0x7, %rax
    00000095: 	jbe	.Ltmp3148 # Offset: 149
    0000009b: 	leaq	0x20(%rsp), %rax
    000000a0: 	movl	$0x8, %edx
    000000a5: 	leaq	DATAat0x4d1e4(%rip), %rsi
    000000ac: 	movq	%rax, %rdi
    000000af: 	movq	%rax, 0x8(%rsp)
    000000b4: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 180
    000000b9: 	callq	clock@PLT # Offset: 185
    000000be: 	movl	iterations(%rip), %ecx
    000000c4: 	xorl	%r13d, %r13d
    000000c7: 	leaq	0x7cf0(%rbx), %rbp
    000000ce: 	movq	%rax, start_time(%rip)
    000000d5: 	leaq	DATAat0x4d004(%rip), %r15
    000000dc: 	testl	%ecx, %ecx
    000000de: 	jle	.Ltmp3149 # Offset: 222
    000000e4: 	nopl	(%rax) # Size: 4
.Ltmp3152:
    000000e8: 	movl	(%rbx), %edx
    000000ea: 	subl	0x4(%rbx), %edx
    000000ed: 	movq	%rbx, %rax
    000000f0: 	pxor	%xmm0, %xmm0
    000000f4: 	shll	$0x2, %edx
    000000f7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3150:
    00000100: 	movdqu	(%rax), %xmm1
    00000104: 	movdqu	0x4(%rax), %xmm5
    00000109: 	addq	$0x10, %rax
    0000010d: 	psubd	%xmm5, %xmm1
    00000111: 	pslld	$0x2, %xmm1
    00000116: 	paddd	%xmm1, %xmm0
    0000011a: 	cmpq	%rax, %rbp
    0000011d: 	jne	.Ltmp3150 # Offset: 285
    0000011f: 	movq	0x7cf4(%rbx), %xmm2
    00000127: 	movdqa	%xmm0, %xmm1
    0000012b: 	psrldq	$0x8, %xmm1
    00000130: 	paddd	%xmm1, %xmm0
    00000134: 	movq	0x7cf0(%rbx), %xmm1
    0000013c: 	psubd	%xmm2, %xmm1
    00000140: 	movdqa	%xmm0, %xmm2
    00000144: 	psrldq	$0x4, %xmm2
    00000149: 	paddd	%xmm2, %xmm0
    0000014d: 	pslld	$0x2, %xmm1
    00000152: 	movd	%xmm0, %eax
    00000156: 	addl	%edx, %eax
    00000158: 	pshufd	$0xe5, %xmm1, %xmm3
    0000015d: 	movd	%xmm1, %edx
    00000161: 	movd	%xmm3, %esi
    00000165: 	addl	%esi, %edx
    00000167: 	addl	%edx, %eax
    00000169: 	movl	0x7cf8(%rbx), %edx
    0000016f: 	subl	0x7cfc(%rbx), %edx
    00000175: 	leal	(%rax,%rdx,4), %eax
    00000178: 	testl	%eax, %eax
    0000017a: 	jne	.Ltmp3151 # Offset: 378
.Ltmp3241:
    00000180: 	addl	$0x1, %r13d
    00000184: 	cmpl	%ecx, %r13d
    00000187: 	jl	.Ltmp3152 # Offset: 391
.Ltmp3149:
    0000018d: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000194: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbp
    0000019b: 	subq	$0x20, %rax
    0000019f: 	cmpq	%rax, %rbp
    000001a2: 	je	.Ltmp3153 # Offset: 418
    000001a8: 	leaq	0x10(%rbp), %rdi
    000001ac: 	movq	0x28(%rsp), %r13
    000001b1: 	movq	%rdi, (%rbp)
    000001b5: 	movq	0x20(%rsp), %r15
    000001ba: 	movq	%r15, %rax
    000001bd: 	addq	%r13, %rax
    000001c0: 	je	.Ltmp3154 # Offset: 448
    000001c2: 	testq	%r15, %r15
    000001c5: 	je	.Ltmp3155 # Offset: 453
.Ltmp3154:
    000001cb: 	movq	%r13, 0x18(%rsp)
    000001d0: 	cmpq	$0xf, %r13
    000001d4: 	ja	.Ltmp3156 # Offset: 468
    000001da: 	cmpq	$0x1, %r13
    000001de: 	jne	.Ltmp3157 # Offset: 478
    000001e4: 	movzbl	(%r15), %eax
    000001e8: 	movb	%al, 0x10(%rbp)
.Ltmp3267:
    000001eb: 	movq	%r13, 0x8(%rbp)
    000001ef: 	movb	$0x0, (%rdi,%r13)
    000001f4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001fb: 	addq	$0x20, %rax
    000001ff: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp3257:
    00000206: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000020d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000214: 	je	.Ltmp3158 # Offset: 532
.Ltmp3256:
    0000021a: 	movq	-0x20(%rax), %rbp
    0000021e: 	callq	clock@PLT # Offset: 542
    00000223: 	pxor	%xmm0, %xmm0
    00000227: 	movq	%rax, end_time(%rip)
    0000022e: 	movq	%rbp, %rdi
    00000231: 	subq	start_time(%rip), %rax
    00000238: 	cvtsi2sd	%rax, %xmm0
    0000023d: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000245: 	callq	_Z13record_resultdPKc # Offset: 581
    0000024a: 	movq	0x20(%rsp), %rdi
    0000024f: 	cmpq	%r14, %rdi
    00000252: 	je	.Ltmp3159 # Offset: 594
    00000254: 	movq	0x30(%rsp), %rax
    00000259: 	leaq	0x1(%rax), %rsi
    0000025d: 	callq	_ZdlPvm@PLT # Offset: 605
.Ltmp3159:
    00000262: 	movq	(%rsp), %rsi
    00000266: 	leaq	0x60(%rsp), %r14
    0000026b: 	xorl	%r13d, %r13d
    0000026e: 	leaq	DATAat0x4d1f1(%rip), %rdx
    00000275: 	movq	%r14, %rdi
    00000278: 	leaq	0x7cf0(%rbx), %rbp
    0000027f: 	leaq	DATAat0x4d004(%rip), %r15
    00000286: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 646
    0000028b: 	callq	clock@PLT # Offset: 651
    00000290: 	movl	iterations(%rip), %esi
    00000296: 	movq	%rax, start_time(%rip)
    0000029d: 	testl	%esi, %esi
    0000029f: 	jle	.Ltmp3160 # Offset: 671
    000002a5: 	nopl	(%rax) # Size: 3
.Ltmp3163:
    000002a8: 	movl	(%rbx), %edx
    000002aa: 	subl	0x4(%rbx), %edx
    000002ad: 	movq	%rbx, %rax
    000002b0: 	pxor	%xmm0, %xmm0
    000002b4: 	shll	$0x2, %edx
    000002b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3161:
    000002c0: 	movdqu	(%rax), %xmm1
    000002c4: 	movdqu	0x4(%rax), %xmm6
    000002c9: 	addq	$0x10, %rax
    000002cd: 	psubd	%xmm6, %xmm1
    000002d1: 	pslld	$0x2, %xmm1
    000002d6: 	paddd	%xmm1, %xmm0
    000002da: 	cmpq	%rax, %rbp
    000002dd: 	jne	.Ltmp3161 # Offset: 733
    000002df: 	movdqa	%xmm0, %xmm1
    000002e3: 	movl	0x7cf8(%rbx), %ecx
    000002e9: 	movq	0x7cf4(%rbx), %xmm2
    000002f1: 	psrldq	$0x8, %xmm1
    000002f6: 	subl	0x7cfc(%rbx), %ecx
    000002fc: 	paddd	%xmm1, %xmm0
    00000300: 	movq	0x7cf0(%rbx), %xmm1
    00000308: 	psubd	%xmm2, %xmm1
    0000030c: 	movdqa	%xmm0, %xmm2
    00000310: 	psrldq	$0x4, %xmm2
    00000315: 	paddd	%xmm2, %xmm0
    00000319: 	pslld	$0x2, %xmm1
    0000031e: 	movd	%xmm0, %eax
    00000322: 	addl	%edx, %eax
    00000324: 	pshufd	$0xe5, %xmm1, %xmm4
    00000329: 	movd	%xmm1, %edx
    0000032d: 	movd	%xmm4, %edi
    00000331: 	addl	%edi, %edx
    00000333: 	addl	%edx, %eax
    00000335: 	leal	(%rax,%rcx,4), %eax
    00000338: 	testl	%eax, %eax
    0000033a: 	jne	.Ltmp3162 # Offset: 826
.Ltmp3243:
    00000340: 	addl	$0x1, %r13d
    00000344: 	cmpl	%esi, %r13d
    00000347: 	jl	.Ltmp3163 # Offset: 839
.Ltmp3160:
    0000034d: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000354: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbp
    0000035b: 	subq	$0x20, %rax
    0000035f: 	cmpq	%rax, %rbp
    00000362: 	je	.Ltmp3164 # Offset: 866
    00000368: 	leaq	0x10(%rbp), %rdi
    0000036c: 	movq	0x68(%rsp), %r13
    00000371: 	movq	%rdi, (%rbp)
    00000375: 	movq	0x60(%rsp), %r15
    0000037a: 	movq	%r15, %rax
    0000037d: 	addq	%r13, %rax
    00000380: 	je	.Ltmp3165 # Offset: 896
    00000382: 	testq	%r15, %r15
    00000385: 	je	.Ltmp3166 # Offset: 901
.Ltmp3165:
    0000038b: 	movq	%r13, 0x18(%rsp)
    00000390: 	cmpq	$0xf, %r13
    00000394: 	ja	.Ltmp3167 # Offset: 916
    0000039a: 	cmpq	$0x1, %r13
    0000039e: 	jne	.Ltmp3168 # Offset: 926
    000003a4: 	movzbl	(%r15), %eax
    000003a8: 	movb	%al, 0x10(%rbp)
.Ltmp3262:
    000003ab: 	movq	%r13, 0x8(%rbp)
    000003af: 	movb	$0x0, (%rdi,%r13)
    000003b4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000003bb: 	addq	$0x20, %rax
    000003bf: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp3261:
    000003c6: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000003cd: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003d4: 	je	.Ltmp3169 # Offset: 980
.Ltmp3260:
    000003da: 	movq	-0x20(%rax), %rbp
    000003de: 	callq	clock@PLT # Offset: 990
    000003e3: 	pxor	%xmm0, %xmm0
    000003e7: 	movq	%rax, end_time(%rip)
    000003ee: 	movq	%rbp, %rdi
    000003f1: 	subq	start_time(%rip), %rax
    000003f8: 	cvtsi2sd	%rax, %xmm0
    000003fd: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000405: 	callq	_Z13record_resultdPKc # Offset: 1029
    0000040a: 	movq	0x60(%rsp), %rdi
    0000040f: 	leaq	0x70(%rsp), %rax
    00000414: 	movq	%rax, 0x8(%rsp)
    00000419: 	cmpq	%rax, %rdi
    0000041c: 	je	.Ltmp3170 # Offset: 1052
    0000041e: 	movq	0x70(%rsp), %rax
    00000423: 	leaq	0x1(%rax), %rsi
    00000427: 	callq	_ZdlPvm@PLT # Offset: 1063
.Ltmp3170:
    0000042c: 	movq	(%rsp), %rsi
    00000430: 	leaq	DATAat0x4d22b(%rip), %rdx
    00000437: 	movq	%r14, %rdi
    0000043a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1082
    0000043f: 	movq	%r14, %rcx
    00000442: 	movl	%r12d, %edx
    00000445: 	movl	$0x1f40, %esi
    0000044a: 	movq	%rbx, %rdi
    0000044d: 	callq	_Z9test_CSENIi14custom_cse_addIiELi4EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1101
    00000452: 	movq	0x60(%rsp), %rdi
    00000457: 	cmpq	0x8(%rsp), %rdi
    0000045c: 	je	.Ltmp3171 # Offset: 1116
    0000045e: 	movq	0x70(%rsp), %rax
    00000463: 	leaq	0x1(%rax), %rsi
    00000467: 	callq	_ZdlPvm@PLT # Offset: 1127
.Ltmp3171:
    0000046c: 	movq	(%rsp), %rsi
    00000470: 	leaq	DATAat0x4d234(%rip), %rdx
    00000477: 	movq	%r14, %rdi
    0000047a: 	xorl	%r13d, %r13d
    0000047d: 	leaq	0x7cf0(%rbx), %rbp
    00000484: 	leaq	DATAat0x4d004(%rip), %r15
    0000048b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1163
    00000490: 	callq	clock@PLT # Offset: 1168
    00000495: 	movl	iterations(%rip), %ecx
    0000049b: 	movq	%rax, start_time(%rip)
    000004a2: 	testl	%ecx, %ecx
    000004a4: 	jle	.Ltmp3172 # Offset: 1188
    000004aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3175:
    000004b0: 	movl	(%rbx), %edx
    000004b2: 	subl	0x4(%rbx), %edx
    000004b5: 	movq	%rbx, %rax
    000004b8: 	pxor	%xmm0, %xmm0
    000004bc: 	shll	$0x2, %edx
    000004bf: 	nop # Size: 1
.Ltmp3173:
    000004c0: 	movdqu	(%rax), %xmm1
    000004c4: 	movdqu	0x4(%rax), %xmm7
    000004c9: 	addq	$0x10, %rax
    000004cd: 	psubd	%xmm7, %xmm1
    000004d1: 	pslld	$0x2, %xmm1
    000004d6: 	paddd	%xmm1, %xmm0
    000004da: 	cmpq	%rax, %rbp
    000004dd: 	jne	.Ltmp3173 # Offset: 1245
    000004df: 	movq	0x7cf4(%rbx), %xmm2
    000004e7: 	movdqa	%xmm0, %xmm1
    000004eb: 	psrldq	$0x8, %xmm1
    000004f0: 	paddd	%xmm1, %xmm0
    000004f4: 	movq	0x7cf0(%rbx), %xmm1
    000004fc: 	psubd	%xmm2, %xmm1
    00000500: 	movdqa	%xmm0, %xmm2
    00000504: 	psrldq	$0x4, %xmm2
    00000509: 	paddd	%xmm2, %xmm0
    0000050d: 	pslld	$0x2, %xmm1
    00000512: 	movd	%xmm0, %eax
    00000516: 	addl	%edx, %eax
    00000518: 	pshufd	$0xe5, %xmm1, %xmm5
    0000051d: 	movd	%xmm1, %edx
    00000521: 	movd	%xmm5, %esi
    00000525: 	addl	%esi, %edx
    00000527: 	addl	%edx, %eax
    00000529: 	movl	0x7cf8(%rbx), %edx
    0000052f: 	subl	0x7cfc(%rbx), %edx
    00000535: 	leal	(%rax,%rdx,4), %eax
    00000538: 	testl	%eax, %eax
    0000053a: 	jne	.Ltmp3174 # Offset: 1338
.Ltmp3242:
    00000540: 	addl	$0x1, %r13d
    00000544: 	cmpl	%ecx, %r13d
    00000547: 	jl	.Ltmp3175 # Offset: 1351
.Ltmp3172:
    0000054d: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000554: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbp
    0000055b: 	subq	$0x20, %rax
    0000055f: 	cmpq	%rax, %rbp
    00000562: 	je	.Ltmp3176 # Offset: 1378
    00000568: 	leaq	0x10(%rbp), %rdi
    0000056c: 	movq	0x68(%rsp), %r13
    00000571: 	movq	%rdi, (%rbp)
    00000575: 	movq	0x60(%rsp), %r15
    0000057a: 	movq	%r15, %rax
    0000057d: 	addq	%r13, %rax
    00000580: 	je	.Ltmp3177 # Offset: 1408
    00000582: 	testq	%r15, %r15
    00000585: 	je	.Ltmp3178 # Offset: 1413
.Ltmp3177:
    0000058b: 	movq	%r13, 0x18(%rsp)
    00000590: 	cmpq	$0xf, %r13
    00000594: 	ja	.Ltmp3179 # Offset: 1428
    0000059a: 	cmpq	$0x1, %r13
    0000059e: 	jne	.Ltmp3180 # Offset: 1438
    000005a4: 	movzbl	(%r15), %eax
    000005a8: 	movb	%al, 0x10(%rbp)
.Ltmp3271:
    000005ab: 	movq	%r13, 0x8(%rbp)
    000005af: 	movb	$0x0, (%rdi,%r13)
    000005b4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000005bb: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000005c2: 	addq	$0x20, %rax
    000005c6: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000005cd: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000005d4: 	je	.Ltmp3181 # Offset: 1492
.Ltmp3252:
    000005da: 	movq	-0x20(%rax), %rbp
    000005de: 	callq	clock@PLT # Offset: 1502
    000005e3: 	pxor	%xmm0, %xmm0
    000005e7: 	movq	%rax, end_time(%rip)
    000005ee: 	movq	%rbp, %rdi
    000005f1: 	subq	start_time(%rip), %rax
    000005f8: 	cvtsi2sd	%rax, %xmm0
    000005fd: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000605: 	callq	_Z13record_resultdPKc # Offset: 1541
    0000060a: 	movq	0x60(%rsp), %rdi
    0000060f: 	cmpq	0x8(%rsp), %rdi
    00000614: 	je	.Ltmp3182 # Offset: 1556
    00000616: 	movq	0x70(%rsp), %rax
    0000061b: 	leaq	0x1(%rax), %rsi
    0000061f: 	callq	_ZdlPvm@PLT # Offset: 1567
.Ltmp3182:
    00000624: 	movq	(%rsp), %rsi
    00000628: 	leaq	DATAat0x4d24b(%rip), %rdx
    0000062f: 	movq	%r14, %rdi
    00000632: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1586
    00000637: 	movq	%r14, %rcx
    0000063a: 	movl	%r12d, %edx
    0000063d: 	movl	$0x1f40, %esi
    00000642: 	movq	%rbx, %rdi
    00000645: 	callq	_Z9test_CSENIi14custom_cse_subIiELi4EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1605
    0000064a: 	movq	0x60(%rsp), %rdi
    0000064f: 	cmpq	0x8(%rsp), %rdi
    00000654: 	je	.Ltmp3183 # Offset: 1620
    00000656: 	movq	0x70(%rsp), %rax
    0000065b: 	leaq	0x1(%rax), %rsi
    0000065f: 	callq	_ZdlPvm@PLT # Offset: 1631
.Ltmp3183:
    00000664: 	movq	(%rsp), %rsi
    00000668: 	leaq	DATAat0x4d259(%rip), %rdx
    0000066f: 	movq	%r14, %rdi
    00000672: 	xorl	%r13d, %r13d
    00000675: 	leaq	0x7cf0(%rbx), %rbp
    0000067c: 	leaq	DATAat0x4d004(%rip), %r15
    00000683: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1667
    00000688: 	callq	clock@PLT # Offset: 1672
    0000068d: 	movl	iterations(%rip), %esi
    00000693: 	movq	%rax, start_time(%rip)
    0000069a: 	testl	%esi, %esi
    0000069c: 	jle	.Ltmp3184 # Offset: 1692
    000006a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3187:
    000006a8: 	movl	(%rbx), %edx
    000006aa: 	subl	0x4(%rbx), %edx
    000006ad: 	movq	%rbx, %rax
    000006b0: 	pxor	%xmm0, %xmm0
    000006b4: 	shll	$0x2, %edx
    000006b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3185:
    000006c0: 	movdqu	(%rax), %xmm1
    000006c4: 	movdqu	0x4(%rax), %xmm3
    000006c9: 	addq	$0x10, %rax
    000006cd: 	psubd	%xmm3, %xmm1
    000006d1: 	pslld	$0x2, %xmm1
    000006d6: 	paddd	%xmm1, %xmm0
    000006da: 	cmpq	%rax, %rbp
    000006dd: 	jne	.Ltmp3185 # Offset: 1757
    000006df: 	movdqa	%xmm0, %xmm1
    000006e3: 	movl	0x7cf8(%rbx), %ecx
    000006e9: 	movq	0x7cf4(%rbx), %xmm2
    000006f1: 	psrldq	$0x8, %xmm1
    000006f6: 	subl	0x7cfc(%rbx), %ecx
    000006fc: 	paddd	%xmm1, %xmm0
    00000700: 	movq	0x7cf0(%rbx), %xmm1
    00000708: 	psubd	%xmm2, %xmm1
    0000070c: 	movdqa	%xmm0, %xmm2
    00000710: 	psrldq	$0x4, %xmm2
    00000715: 	paddd	%xmm2, %xmm0
    00000719: 	pslld	$0x2, %xmm1
    0000071e: 	movd	%xmm0, %eax
    00000722: 	addl	%edx, %eax
    00000724: 	pshufd	$0xe5, %xmm1, %xmm6
    00000729: 	movd	%xmm1, %edx
    0000072d: 	movd	%xmm6, %edi
    00000731: 	addl	%edi, %edx
    00000733: 	addl	%edx, %eax
    00000735: 	leal	(%rax,%rcx,4), %eax
    00000738: 	testl	%eax, %eax
    0000073a: 	jne	.Ltmp3186 # Offset: 1850
.Ltmp3245:
    00000740: 	addl	$0x1, %r13d
    00000744: 	cmpl	%esi, %r13d
    00000747: 	jl	.Ltmp3187 # Offset: 1863
.Ltmp3184:
    0000074d: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000754: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbp
    0000075b: 	subq	$0x20, %rax
    0000075f: 	cmpq	%rax, %rbp
    00000762: 	je	.Ltmp3188 # Offset: 1890
    00000768: 	leaq	0x10(%rbp), %rdi
    0000076c: 	movq	0x68(%rsp), %r13
    00000771: 	movq	%rdi, (%rbp)
    00000775: 	movq	0x60(%rsp), %r15
    0000077a: 	movq	%r15, %rax
    0000077d: 	addq	%r13, %rax
    00000780: 	je	.Ltmp3189 # Offset: 1920
    00000782: 	testq	%r15, %r15
    00000785: 	je	.Ltmp3190 # Offset: 1925
.Ltmp3189:
    0000078b: 	movq	%r13, 0x18(%rsp)
    00000790: 	cmpq	$0xf, %r13
    00000794: 	ja	.Ltmp3191 # Offset: 1940
    0000079a: 	cmpq	$0x1, %r13
    0000079e: 	jne	.Ltmp3192 # Offset: 1950
    000007a4: 	movzbl	(%r15), %eax
    000007a8: 	movb	%al, 0x10(%rbp)
.Ltmp3269:
    000007ab: 	movq	%r13, 0x8(%rbp)
    000007af: 	movb	$0x0, (%rdi,%r13)
    000007b4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000007bb: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000007c2: 	addq	$0x20, %rax
    000007c6: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000007cd: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000007d4: 	je	.Ltmp3193 # Offset: 2004
.Ltmp3254:
    000007da: 	movq	-0x20(%rax), %rbp
    000007de: 	callq	clock@PLT # Offset: 2014
    000007e3: 	pxor	%xmm0, %xmm0
    000007e7: 	movq	%rax, end_time(%rip)
    000007ee: 	movq	%rbp, %rdi
    000007f1: 	subq	start_time(%rip), %rax
    000007f8: 	cvtsi2sd	%rax, %xmm0
    000007fd: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000805: 	callq	_Z13record_resultdPKc # Offset: 2053
    0000080a: 	movq	0x60(%rsp), %rdi
    0000080f: 	cmpq	0x8(%rsp), %rdi
    00000814: 	je	.Ltmp3194 # Offset: 2068
    00000816: 	movq	0x70(%rsp), %rax
    0000081b: 	leaq	0x1(%rax), %rsi
    0000081f: 	callq	_ZdlPvm@PLT # Offset: 2079
.Ltmp3194:
    00000824: 	movq	(%rsp), %rax
    00000828: 	leaq	0x50(%rsp), %rbp
    0000082d: 	movq	%rbp, 0x40(%rsp)
    00000832: 	movq	(%rax), %r15
    00000835: 	movq	0x8(%rax), %r13
    00000839: 	movq	%r15, %rax
    0000083c: 	addq	%r13, %rax
    0000083f: 	je	.Ltmp3195 # Offset: 2111
    00000841: 	testq	%r15, %r15
    00000844: 	je	.Ltmp3145 # Offset: 2116
.Ltmp3195:
    0000084a: 	movq	%r13, 0x18(%rsp)
    0000084f: 	cmpq	$0xf, %r13
    00000853: 	ja	.Ltmp3196 # Offset: 2131
    00000859: 	cmpq	$0x1, %r13
    0000085d: 	jne	.Ltmp3197 # Offset: 2141
    00000863: 	movzbl	(%r15), %eax
    00000867: 	movb	%al, 0x50(%rsp)
    0000086b: 	movq	%rbp, %rax
.Ltmp3249:
    0000086e: 	movq	%r13, 0x48(%rsp)
    00000873: 	movb	$0x0, (%rax,%r13)
    00000878: 	movabsq	$0x3fffffffffffffff, %rax
    00000882: 	subq	0x48(%rsp), %rax
    00000887: 	cmpq	$0x8, %rax
    0000088b: 	jbe	.Ltmp3198 # Offset: 2187
    00000891: 	leaq	0x40(%rsp), %r13
    00000896: 	movl	$0x9, %edx
    0000089b: 	leaq	DATAat0x4d270(%rip), %rsi
    000008a2: 	movq	%r13, %rdi
    000008a5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2213
    000008aa: 	movq	%r13, %rcx
    000008ad: 	movl	%r12d, %edx
    000008b0: 	movl	$0x1f40, %esi
    000008b5: 	movq	%rbx, %rdi
    000008b8: 	callq	_Z9test_CSENIi14custom_cse_mulIiELi4EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2232
    000008bd: 	movq	0x40(%rsp), %rdi
    000008c2: 	cmpq	%rbp, %rdi
    000008c5: 	je	.Ltmp3199 # Offset: 2245
    000008c7: 	movq	0x50(%rsp), %rax
    000008cc: 	leaq	0x1(%rax), %rsi
    000008d0: 	callq	_ZdlPvm@PLT # Offset: 2256
.Ltmp3199:
    000008d5: 	movq	(%rsp), %rsi
    000008d9: 	leaq	DATAat0x4d27e(%rip), %rdx
    000008e0: 	movq	%r14, %rdi
    000008e3: 	xorl	%r13d, %r13d
    000008e6: 	leaq	0x7cf0(%rbx), %rbp
    000008ed: 	leaq	DATAat0x4d004(%rip), %r15
    000008f4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2292
    000008f9: 	callq	clock@PLT # Offset: 2297
    000008fe: 	movl	iterations(%rip), %esi
    00000904: 	movq	%rax, start_time(%rip)
    0000090b: 	testl	%esi, %esi
    0000090d: 	jle	.Ltmp3200 # Offset: 2317
    00000913: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3203:
    00000918: 	movl	(%rbx), %edx
    0000091a: 	subl	0x4(%rbx), %edx
    0000091d: 	movq	%rbx, %rax
    00000920: 	pxor	%xmm0, %xmm0
    00000924: 	shll	$0x2, %edx
    00000927: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3201:
    00000930: 	movdqu	(%rax), %xmm1
    00000934: 	movdqu	0x4(%rax), %xmm6
    00000939: 	addq	$0x10, %rax
    0000093d: 	psubd	%xmm6, %xmm1
    00000941: 	pslld	$0x2, %xmm1
    00000946: 	paddd	%xmm1, %xmm0
    0000094a: 	cmpq	%rax, %rbp
    0000094d: 	jne	.Ltmp3201 # Offset: 2381
    0000094f: 	movdqa	%xmm0, %xmm1
    00000953: 	movl	0x7cf8(%rbx), %ecx
    00000959: 	movq	0x7cf4(%rbx), %xmm2
    00000961: 	psrldq	$0x8, %xmm1
    00000966: 	subl	0x7cfc(%rbx), %ecx
    0000096c: 	paddd	%xmm1, %xmm0
    00000970: 	movq	0x7cf0(%rbx), %xmm1
    00000978: 	psubd	%xmm2, %xmm1
    0000097c: 	movdqa	%xmm0, %xmm2
    00000980: 	psrldq	$0x4, %xmm2
    00000985: 	paddd	%xmm2, %xmm0
    00000989: 	pslld	$0x2, %xmm1
    0000098e: 	movd	%xmm0, %eax
    00000992: 	addl	%edx, %eax
    00000994: 	pshufd	$0xe5, %xmm1, %xmm7
    00000999: 	movd	%xmm1, %edx
    0000099d: 	movd	%xmm7, %edi
    000009a1: 	addl	%edi, %edx
    000009a3: 	addl	%edx, %eax
    000009a5: 	leal	(%rax,%rcx,4), %eax
    000009a8: 	testl	%eax, %eax
    000009aa: 	jne	.Ltmp3202 # Offset: 2474
.Ltmp3244:
    000009b0: 	addl	$0x1, %r13d
    000009b4: 	cmpl	%esi, %r13d
    000009b7: 	jl	.Ltmp3203 # Offset: 2487
.Ltmp3200:
    000009bd: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000009c4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbp
    000009cb: 	subq	$0x20, %rax
    000009cf: 	cmpq	%rax, %rbp
    000009d2: 	je	.Ltmp3204 # Offset: 2514
    000009d8: 	leaq	0x10(%rbp), %rdi
    000009dc: 	movq	0x68(%rsp), %r13
    000009e1: 	movq	%rdi, (%rbp)
    000009e5: 	movq	0x60(%rsp), %r15
    000009ea: 	movq	%r15, %rax
    000009ed: 	addq	%r13, %rax
    000009f0: 	je	.Ltmp3205 # Offset: 2544
    000009f2: 	testq	%r15, %r15
    000009f5: 	je	.Ltmp3206 # Offset: 2549
.Ltmp3205:
    000009fb: 	movq	%r13, 0x18(%rsp)
    00000a00: 	cmpq	$0xf, %r13
    00000a04: 	ja	.Ltmp3207 # Offset: 2564
    00000a0a: 	cmpq	$0x1, %r13
    00000a0e: 	jne	.Ltmp3208 # Offset: 2574
    00000a14: 	movzbl	(%r15), %eax
    00000a18: 	movb	%al, 0x10(%rbp)
.Ltmp3273:
    00000a1b: 	movq	%r13, 0x8(%rbp)
    00000a1f: 	movb	$0x0, (%rdi,%r13)
    00000a24: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000a2b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000a32: 	addq	$0x20, %rax
    00000a36: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000a3d: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000a44: 	je	.Ltmp3209 # Offset: 2628
.Ltmp3253:
    00000a4a: 	movq	-0x20(%rax), %rbp
    00000a4e: 	callq	clock@PLT # Offset: 2638
    00000a53: 	pxor	%xmm0, %xmm0
    00000a57: 	movq	%rax, end_time(%rip)
    00000a5e: 	movq	%rbp, %rdi
    00000a61: 	subq	start_time(%rip), %rax
    00000a68: 	cvtsi2sd	%rax, %xmm0
    00000a6d: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000a75: 	callq	_Z13record_resultdPKc # Offset: 2677
    00000a7a: 	movq	0x60(%rsp), %rdi
    00000a7f: 	cmpq	0x8(%rsp), %rdi
    00000a84: 	je	.Ltmp3210 # Offset: 2692
    00000a86: 	movq	0x70(%rsp), %rax
    00000a8b: 	leaq	0x1(%rax), %rsi
    00000a8f: 	callq	_ZdlPvm@PLT # Offset: 2703
.Ltmp3210:
    00000a94: 	movq	(%rsp), %rsi
    00000a98: 	leaq	DATAat0x4d293(%rip), %rdx
    00000a9f: 	movq	%r14, %rdi
    00000aa2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2722
    00000aa7: 	movq	%r14, %rcx
    00000aaa: 	movl	%r12d, %edx
    00000aad: 	movl	$0x1f40, %esi
    00000ab2: 	movq	%rbx, %rdi
    00000ab5: 	callq	_Z9test_CSENIi14custom_cse_divIiELi4EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2741
    00000aba: 	movq	0x60(%rsp), %rdi
    00000abf: 	cmpq	0x8(%rsp), %rdi
    00000ac4: 	je	.Ltmp3211 # Offset: 2756
    00000ac6: 	movq	0x70(%rsp), %rax
    00000acb: 	leaq	0x1(%rax), %rsi
    00000acf: 	callq	_ZdlPvm@PLT # Offset: 2767
.Ltmp3211:
    00000ad4: 	movq	0x8(%rsp), %rax
    00000ad9: 	movq	%rax, 0x60(%rsp)
    00000ade: 	movq	(%rsp), %rax
    00000ae2: 	movq	(%rax), %rbp
    00000ae5: 	movq	0x8(%rax), %r13
    00000ae9: 	movq	%rbp, %rax
    00000aec: 	addq	%r13, %rax
    00000aef: 	je	.Ltmp3212 # Offset: 2799
    00000af1: 	testq	%rbp, %rbp
    00000af4: 	je	.Ltmp3145 # Offset: 2804
.Ltmp3212:
    00000afa: 	movq	%r13, 0x18(%rsp)
    00000aff: 	cmpq	$0xf, %r13
    00000b03: 	ja	.Ltmp3213 # Offset: 2819
    00000b09: 	cmpq	$0x1, %r13
    00000b0d: 	jne	.Ltmp3214 # Offset: 2829
    00000b13: 	movzbl	(%rbp), %eax
    00000b17: 	movb	%al, 0x70(%rsp)
    00000b1b: 	movq	0x8(%rsp), %rax
.Ltmp3251:
    00000b20: 	movq	%r13, 0x68(%rsp)
    00000b25: 	movb	$0x0, (%rax,%r13)
    00000b2a: 	movabsq	$0x3fffffffffffffff, %rax
    00000b34: 	subq	0x68(%rsp), %rax
    00000b39: 	cmpq	$0xc, %rax
    00000b3d: 	jbe	.Ltmp3215 # Offset: 2877
    00000b43: 	movl	$0xd, %edx
    00000b48: 	leaq	DATAat0x4d29f(%rip), %rsi
    00000b4f: 	movq	%r14, %rdi
    00000b52: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2898
    00000b57: 	callq	clock@PLT # Offset: 2903
    00000b5c: 	movl	iterations(%rip), %ecx
    00000b62: 	xorl	%r13d, %r13d
    00000b65: 	leaq	0x7cf0(%rbx), %rbp
    00000b6c: 	movq	%rax, start_time(%rip)
    00000b73: 	leaq	DATAat0x4d004(%rip), %r15
    00000b7a: 	testl	%ecx, %ecx
    00000b7c: 	jle	.Ltmp3216 # Offset: 2940
    00000b82: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3219:
    00000b88: 	movl	(%rbx), %edx
    00000b8a: 	subl	0x4(%rbx), %edx
    00000b8d: 	movq	%rbx, %rax
    00000b90: 	pxor	%xmm0, %xmm0
    00000b94: 	shll	$0x2, %edx
    00000b97: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3217:
    00000ba0: 	movdqu	(%rax), %xmm1
    00000ba4: 	movdqu	0x4(%rax), %xmm7
    00000ba9: 	addq	$0x10, %rax
    00000bad: 	psubd	%xmm7, %xmm1
    00000bb1: 	pslld	$0x2, %xmm1
    00000bb6: 	paddd	%xmm1, %xmm0
    00000bba: 	cmpq	%rbp, %rax
    00000bbd: 	jne	.Ltmp3217 # Offset: 3005
    00000bbf: 	movq	0x7cf4(%rbx), %xmm2
    00000bc7: 	movdqa	%xmm0, %xmm1
    00000bcb: 	psrldq	$0x8, %xmm1
    00000bd0: 	paddd	%xmm1, %xmm0
    00000bd4: 	movq	0x7cf0(%rbx), %xmm1
    00000bdc: 	psubd	%xmm2, %xmm1
    00000be0: 	movdqa	%xmm0, %xmm2
    00000be4: 	psrldq	$0x4, %xmm2
    00000be9: 	paddd	%xmm2, %xmm0
    00000bed: 	pslld	$0x2, %xmm1
    00000bf2: 	movd	%xmm0, %eax
    00000bf6: 	addl	%edx, %eax
    00000bf8: 	pshufd	$0xe5, %xmm1, %xmm4
    00000bfd: 	movd	%xmm1, %edx
    00000c01: 	movd	%xmm4, %esi
    00000c05: 	addl	%esi, %edx
    00000c07: 	addl	%edx, %eax
    00000c09: 	movl	0x7cf8(%rbx), %edx
    00000c0f: 	subl	0x7cfc(%rbx), %edx
    00000c15: 	leal	(%rax,%rdx,4), %eax
    00000c18: 	testl	%eax, %eax
    00000c1a: 	jne	.Ltmp3218 # Offset: 3098
.Ltmp3247:
    00000c20: 	addl	$0x1, %r13d
    00000c24: 	cmpl	%ecx, %r13d
    00000c27: 	jl	.Ltmp3219 # Offset: 3111
.Ltmp3216:
    00000c2d: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000c34: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbp
    00000c3b: 	subq	$0x20, %rax
    00000c3f: 	cmpq	%rax, %rbp
    00000c42: 	je	.Ltmp3220 # Offset: 3138
    00000c48: 	leaq	0x10(%rbp), %rdi
    00000c4c: 	movq	0x68(%rsp), %r13
    00000c51: 	movq	%rdi, (%rbp)
    00000c55: 	movq	0x60(%rsp), %r15
    00000c5a: 	movq	%r15, %rax
    00000c5d: 	addq	%r13, %rax
    00000c60: 	je	.Ltmp3221 # Offset: 3168
    00000c62: 	testq	%r15, %r15
    00000c65: 	je	.Ltmp3222 # Offset: 3173
.Ltmp3221:
    00000c6b: 	movq	%r13, 0x18(%rsp)
    00000c70: 	cmpq	$0xf, %r13
    00000c74: 	ja	.Ltmp3223 # Offset: 3188
    00000c7a: 	cmpq	$0x1, %r13
    00000c7e: 	jne	.Ltmp3224 # Offset: 3198
    00000c84: 	movzbl	(%r15), %eax
    00000c88: 	movb	%al, 0x10(%rbp)
.Ltmp3265:
    00000c8b: 	movq	%r13, 0x8(%rbp)
    00000c8f: 	movb	$0x0, (%rdi,%r13)
    00000c94: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000c9b: 	addq	$0x20, %rax
    00000c9f: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp3259:
    00000ca6: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000cad: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000cb4: 	je	.Ltmp3225 # Offset: 3252
.Ltmp3258:
    00000cba: 	movq	-0x20(%rax), %rbp
    00000cbe: 	callq	clock@PLT # Offset: 3262
    00000cc3: 	pxor	%xmm0, %xmm0
    00000cc7: 	movq	%rax, end_time(%rip)
    00000cce: 	movq	%rbp, %rdi
    00000cd1: 	subq	start_time(%rip), %rax
    00000cd8: 	cvtsi2sd	%rax, %xmm0
    00000cdd: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000ce5: 	callq	_Z13record_resultdPKc # Offset: 3301
    00000cea: 	movq	0x60(%rsp), %rdi
    00000cef: 	cmpq	0x8(%rsp), %rdi
    00000cf4: 	je	.Ltmp3226 # Offset: 3316
    00000cf6: 	movq	0x70(%rsp), %rax
    00000cfb: 	leaq	0x1(%rax), %rsi
    00000cff: 	callq	_ZdlPvm@PLT # Offset: 3327
.Ltmp3226:
    00000d04: 	movq	(%rsp), %rsi
    00000d08: 	movq	%r14, %rdi
    00000d0b: 	xorl	%r13d, %r13d
    00000d0e: 	leaq	0x4(%rbx), %r15
    00000d12: 	leaq	DATAat0x4d2b1(%rip), %rdx
    00000d19: 	leaq	0x7d00(%rbx), %rbp
    00000d20: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3360
    00000d25: 	callq	clock@PLT # Offset: 3365
    00000d2a: 	movl	iterations(%rip), %r8d
    00000d31: 	movq	%rax, start_time(%rip)
    00000d38: 	testl	%r8d, %r8d
    00000d3b: 	jle	.Ltmp3227 # Offset: 3387
    00000d3d: 	nopl	(%rax) # Size: 3
.Ltmp3230:
    00000d40: 	movl	0x4(%rbx), %edi
    00000d43: 	movl	(%rbx), %esi
    00000d45: 	movl	%edi, %eax
    00000d47: 	subl	%esi, %eax
    00000d49: 	imull	%r12d, %eax
    00000d4d: 	movl	%eax, %ecx
    00000d4f: 	movl	%edi, %eax
    00000d51: 	cltd
    00000d52: 	idivl	%r12d
    00000d55: 	addl	%ecx, %eax
    00000d57: 	movl	%esi, %ecx
    00000d59: 	leal	(%rsi,%rax,2), %edx
    00000d5c: 	subl	%edi, %ecx
    00000d5e: 	leal	(%rdi,%rax,2), %eax
    00000d61: 	movq	%r15, %rdi
    00000d64: 	addl	%edx, %ecx
    00000d66: 	subl	%eax, %ecx
    00000d68: 	addl	%edx, %ecx
    00000d6a: 	subl	%eax, %ecx
    00000d6c: 	addl	%edx, %ecx
    00000d6e: 	subl	%eax, %ecx
.Ltmp3228:
    00000d70: 	movl	%esi, %r10d
    00000d73: 	movl	(%rdi), %esi
    00000d75: 	addq	$0x4, %rdi
    00000d79: 	movl	%esi, %eax
    00000d7b: 	subl	%r10d, %eax
    00000d7e: 	imull	%r12d, %eax
    00000d82: 	movl	%eax, %r9d
    00000d85: 	movl	%esi, %eax
    00000d87: 	cltd
    00000d88: 	idivl	%r12d
    00000d8b: 	addl	%r9d, %eax
    00000d8e: 	leal	(%r10,%rax,2), %edx
    00000d92: 	leal	(%rsi,%rax,2), %eax
    00000d95: 	addl	%edx, %ecx
    00000d97: 	subl	%eax, %ecx
    00000d99: 	addl	%edx, %ecx
    00000d9b: 	subl	%eax, %ecx
    00000d9d: 	addl	%edx, %ecx
    00000d9f: 	subl	%eax, %ecx
    00000da1: 	addl	%edx, %ecx
    00000da3: 	subl	%eax, %ecx
    00000da5: 	cmpq	%rdi, %rbp
    00000da8: 	jne	.Ltmp3228 # Offset: 3496
    00000daa: 	testl	%ecx, %ecx
    00000dac: 	jne	.Ltmp3229 # Offset: 3500
.Ltmp3246:
    00000db2: 	addl	$0x1, %r13d
    00000db6: 	cmpl	%r8d, %r13d
    00000db9: 	jl	.Ltmp3230 # Offset: 3513
.Ltmp3227:
    00000dbb: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000dc2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000dc9: 	subq	$0x20, %rax
    00000dcd: 	cmpq	%rax, %rbx
    00000dd0: 	je	.Ltmp3231 # Offset: 3536
    00000dd6: 	leaq	0x10(%rbx), %rdi
    00000dda: 	movq	0x68(%rsp), %r12
    00000ddf: 	movq	%rdi, (%rbx)
    00000de2: 	movq	0x60(%rsp), %rbp
    00000de7: 	movq	%rbp, %rax
    00000dea: 	addq	%r12, %rax
    00000ded: 	je	.Ltmp3232 # Offset: 3565
    00000def: 	testq	%rbp, %rbp
    00000df2: 	je	.Ltmp3233 # Offset: 3570
.Ltmp3232:
    00000df8: 	movq	%r12, 0x18(%rsp)
    00000dfd: 	cmpq	$0xf, %r12
    00000e01: 	ja	.Ltmp3234 # Offset: 3585
    00000e07: 	cmpq	$0x1, %r12
    00000e0b: 	jne	.Ltmp3235 # Offset: 3595
    00000e11: 	movzbl	(%rbp), %eax
    00000e15: 	movb	%al, 0x10(%rbx)
.Ltmp3264:
    00000e18: 	movq	%r12, 0x8(%rbx)
    00000e1c: 	movb	$0x0, (%rdi,%r12)
    00000e21: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000e28: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000e2f: 	addq	$0x20, %rax
    00000e33: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000e3a: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000e41: 	je	.Ltmp3236 # Offset: 3649
.Ltmp3255:
    00000e47: 	movq	-0x20(%rax), %rbp
    00000e4b: 	callq	clock@PLT # Offset: 3659
    00000e50: 	pxor	%xmm0, %xmm0
    00000e54: 	movq	%rax, end_time(%rip)
    00000e5b: 	movq	%rbp, %rdi
    00000e5e: 	subq	start_time(%rip), %rax
    00000e65: 	cvtsi2sd	%rax, %xmm0
    00000e6a: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000e72: 	callq	_Z13record_resultdPKc # Offset: 3698
    00000e77: 	movq	0x60(%rsp), %rdi
    00000e7c: 	cmpq	0x8(%rsp), %rdi
    00000e81: 	je	.Ltmp3237 # Offset: 3713
    00000e83: 	movq	0x70(%rsp), %rax
    00000e88: 	leaq	0x1(%rax), %rsi
    00000e8c: 	callq	_ZdlPvm@PLT # Offset: 3724
.Ltmp3237:
    00000e91: 	movq	0x88(%rsp), %rax
    00000e99: 	subq	%fs:0x28, %rax
    00000ea2: 	jne	.Ltmp3238 # Offset: 3746
    00000ea8: 	movq	(%rsp), %rax
    00000eac: 	movl	iterations(%rip), %edx
    00000eb2: 	xorl	%r8d, %r8d
    00000eb5: 	xorl	%ecx, %ecx
    00000eb7: 	movl	$0x1f40, %esi
    00000ebc: 	movq	(%rax), %rdi
    00000ebf: 	addq	$0x98, %rsp
    00000ec6: 	popq	%rbx
    00000ec7: 	popq	%rbp
    00000ec8: 	popq	%r12
    00000eca: 	popq	%r13
    00000ecc: 	popq	%r14
    00000ece: 	popq	%r15
    00000ed0: 	jmp	_Z9summarizePKciiii # TAILCALL  # Offset: 3792
.Ltmp3147:
    00000ed5: 	testq	%r13, %r13
    00000ed8: 	jne	.Ltmp3239 # Offset: 3800
    00000ede: 	movq	%r14, %rax
    00000ee1: 	jmp	.Ltmp3240 # Offset: 3809
    00000ee6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3151:
    00000ef0: 	movq	0x20(%rsp), %rdx
    00000ef5: 	movq	%r15, %rsi
    00000ef8: 	movl	$0x1, %edi
    00000efd: 	xorl	%eax, %eax
    00000eff: 	callq	__printf_chk@PLT # Offset: 3839
    00000f04: 	movl	iterations(%rip), %ecx
    00000f0a: 	jmp	.Ltmp3241 # Offset: 3850
    00000f0f: 	nop # Size: 1
.Ltmp3174:
    00000f10: 	movq	0x60(%rsp), %rdx
    00000f15: 	movq	%r15, %rsi
    00000f18: 	movl	$0x1, %edi
    00000f1d: 	xorl	%eax, %eax
    00000f1f: 	callq	__printf_chk@PLT # Offset: 3871
    00000f24: 	movl	iterations(%rip), %ecx
    00000f2a: 	jmp	.Ltmp3242 # Offset: 3882
    00000f2f: 	nop # Size: 1
.Ltmp3162:
    00000f30: 	movq	0x60(%rsp), %rdx
    00000f35: 	movq	%r15, %rsi
    00000f38: 	movl	$0x1, %edi
    00000f3d: 	xorl	%eax, %eax
    00000f3f: 	callq	__printf_chk@PLT # Offset: 3903
    00000f44: 	movl	iterations(%rip), %esi
    00000f4a: 	jmp	.Ltmp3243 # Offset: 3914
    00000f4f: 	nop # Size: 1
.Ltmp3202:
    00000f50: 	movq	0x60(%rsp), %rdx
    00000f55: 	movq	%r15, %rsi
    00000f58: 	movl	$0x1, %edi
    00000f5d: 	xorl	%eax, %eax
    00000f5f: 	callq	__printf_chk@PLT # Offset: 3935
    00000f64: 	movl	iterations(%rip), %esi
    00000f6a: 	jmp	.Ltmp3244 # Offset: 3946
    00000f6f: 	nop # Size: 1
.Ltmp3186:
    00000f70: 	movq	0x60(%rsp), %rdx
    00000f75: 	movq	%r15, %rsi
    00000f78: 	movl	$0x1, %edi
    00000f7d: 	xorl	%eax, %eax
    00000f7f: 	callq	__printf_chk@PLT # Offset: 3967
    00000f84: 	movl	iterations(%rip), %esi
    00000f8a: 	jmp	.Ltmp3245 # Offset: 3978
    00000f8f: 	nop # Size: 1
.Ltmp3229:
    00000f90: 	movq	0x60(%rsp), %rdx
    00000f95: 	leaq	DATAat0x4d004(%rip), %rsi
    00000f9c: 	movl	$0x1, %edi
    00000fa1: 	xorl	%eax, %eax
    00000fa3: 	callq	__printf_chk@PLT # Offset: 4003
    00000fa8: 	movl	iterations(%rip), %r8d
    00000faf: 	jmp	.Ltmp3246 # Offset: 4015
    00000fb4: 	nopl	(%rax) # Size: 4
.Ltmp3218:
    00000fb8: 	movq	0x60(%rsp), %rdx
    00000fbd: 	movq	%r15, %rsi
    00000fc0: 	movl	$0x1, %edi
    00000fc5: 	xorl	%eax, %eax
    00000fc7: 	callq	__printf_chk@PLT # Offset: 4039
    00000fcc: 	movl	iterations(%rip), %ecx
    00000fd2: 	jmp	.Ltmp3247 # Offset: 4050
.Ltmp3197:
    00000fd7: 	testq	%r13, %r13
    00000fda: 	jne	.Ltmp3248 # Offset: 4058
    00000fe0: 	movq	%rbp, %rax
    00000fe3: 	jmp	.Ltmp3249 # Offset: 4067
.Ltmp3214:
    00000fe8: 	testq	%r13, %r13
    00000feb: 	jne	.Ltmp3250 # Offset: 4075
    00000ff1: 	movq	0x8(%rsp), %rax
    00000ff6: 	jmp	.Ltmp3251 # Offset: 4086
.Ltmp3213:
    00000ffb: 	movq	%r14, %rdi
    00000ffe: 	leaq	0x18(%rsp), %rsi
    00001003: 	xorl	%edx, %edx
    00001005: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4101
    0000100a: 	movq	%rax, 0x60(%rsp)
    0000100f: 	movq	%rax, %rdi
    00001012: 	movq	0x18(%rsp), %rax
    00001017: 	movq	%rax, 0x70(%rsp)
.Ltmp3278:
    0000101c: 	movq	%r13, %rdx
    0000101f: 	movq	%rbp, %rsi
    00001022: 	callq	memcpy@PLT # Offset: 4130
    00001027: 	movq	0x18(%rsp), %r13
    0000102c: 	movq	0x60(%rsp), %rax
    00001031: 	jmp	.Ltmp3251 # Offset: 4145
.Ltmp3196:
    00001036: 	leaq	0x40(%rsp), %rdi
    0000103b: 	leaq	0x18(%rsp), %rsi
    00001040: 	xorl	%edx, %edx
    00001042: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4162
    00001047: 	movq	%rax, 0x40(%rsp)
    0000104c: 	movq	%rax, %rdi
    0000104f: 	movq	0x18(%rsp), %rax
    00001054: 	movq	%rax, 0x50(%rsp)
.Ltmp3277:
    00001059: 	movq	%r13, %rdx
    0000105c: 	movq	%r15, %rsi
    0000105f: 	callq	memcpy@PLT # Offset: 4191
    00001064: 	movq	0x18(%rsp), %r13
    00001069: 	movq	0x40(%rsp), %rax
    0000106e: 	jmp	.Ltmp3249 # Offset: 4206
.Ltmp3146:
    00001073: 	leaq	0x20(%rsp), %rdi
    00001078: 	leaq	0x18(%rsp), %rsi
    0000107d: 	xorl	%edx, %edx
    0000107f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4223
    00001084: 	movq	%rax, 0x20(%rsp)
    00001089: 	movq	%rax, %rdi
    0000108c: 	movq	0x18(%rsp), %rax
    00001091: 	movq	%rax, 0x30(%rsp)
.Ltmp3276:
    00001096: 	movq	%r13, %rdx
    00001099: 	movq	%rbp, %rsi
    0000109c: 	callq	memcpy@PLT # Offset: 4252
    000010a1: 	movq	0x18(%rsp), %r13
    000010a6: 	movq	0x20(%rsp), %rax
    000010ab: 	jmp	.Ltmp3240 # Offset: 4267
.Ltmp3176:
    000010b0: 	movq	%r14, %rsi
    000010b3: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000010ba: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 4282
    000010bf: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000010c6: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000010cd: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000010d4: 	jne	.Ltmp3252 # Offset: 4308
.Ltmp3181:
    000010da: 	movq	-0x8(%rdx), %rax
    000010de: 	addq	$0x200, %rax
    000010e4: 	jmp	.Ltmp3252 # Offset: 4324
.Ltmp3204:
    000010e9: 	movq	%r14, %rsi
    000010ec: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000010f3: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 4339
    000010f8: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000010ff: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00001106: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000110d: 	jne	.Ltmp3253 # Offset: 4365
.Ltmp3209:
    00001113: 	movq	-0x8(%rdx), %rax
    00001117: 	addq	$0x200, %rax
    0000111d: 	jmp	.Ltmp3253 # Offset: 4381
.Ltmp3188:
    00001122: 	movq	%r14, %rsi
    00001125: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000112c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 4396
    00001131: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001138: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000113f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001146: 	jne	.Ltmp3254 # Offset: 4422
.Ltmp3193:
    0000114c: 	movq	-0x8(%rdx), %rax
    00001150: 	addq	$0x200, %rax
    00001156: 	jmp	.Ltmp3254 # Offset: 4438
.Ltmp3231:
    0000115b: 	movq	%r14, %rsi
    0000115e: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001165: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 4453
    0000116a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001171: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00001178: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000117f: 	jne	.Ltmp3255 # Offset: 4479
.Ltmp3236:
    00001185: 	movq	-0x8(%rdx), %rax
    00001189: 	addq	$0x200, %rax
    0000118f: 	jmp	.Ltmp3255 # Offset: 4495
.Ltmp3158:
    00001194: 	movq	-0x8(%rdx), %rax
    00001198: 	addq	$0x200, %rax
    0000119e: 	jmp	.Ltmp3256 # Offset: 4510
.Ltmp3153:
    000011a3: 	movq	0x8(%rsp), %rsi
    000011a8: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000011af: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 4527
    000011b4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000011bb: 	jmp	.Ltmp3257 # Offset: 4539
.Ltmp3225:
    000011c0: 	movq	-0x8(%rdx), %rax
    000011c4: 	addq	$0x200, %rax
    000011ca: 	jmp	.Ltmp3258 # Offset: 4554
.Ltmp3220:
    000011cf: 	movq	%r14, %rsi
    000011d2: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000011d9: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 4569
    000011de: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000011e5: 	jmp	.Ltmp3259 # Offset: 4581
.Ltmp3169:
    000011ea: 	movq	-0x8(%rdx), %rax
    000011ee: 	addq	$0x200, %rax
    000011f4: 	jmp	.Ltmp3260 # Offset: 4596
.Ltmp3164:
    000011f9: 	movq	%r14, %rsi
    000011fc: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001203: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 4611
    00001208: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000120f: 	jmp	.Ltmp3261 # Offset: 4623
.Ltmp3168:
    00001214: 	testq	%r13, %r13
    00001217: 	je	.Ltmp3262 # Offset: 4631
    0000121d: 	jmp	.Ltmp3263 # Offset: 4637
    00001222: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3235:
    00001228: 	testq	%r12, %r12
    0000122b: 	je	.Ltmp3264 # Offset: 4651
.Ltmp3275:
    00001231: 	movq	%r12, %rdx
    00001234: 	movq	%rbp, %rsi
    00001237: 	callq	memcpy@PLT # Offset: 4663
    0000123c: 	movq	0x18(%rsp), %r12
    00001241: 	movq	(%rbx), %rdi
    00001244: 	jmp	.Ltmp3264 # Offset: 4676
.Ltmp3224:
    00001249: 	testq	%r13, %r13
    0000124c: 	je	.Ltmp3265 # Offset: 4684
    00001252: 	jmp	.Ltmp3266 # Offset: 4690
    00001257: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3157:
    00001260: 	testq	%r13, %r13
    00001263: 	je	.Ltmp3267 # Offset: 4707
    00001269: 	jmp	.Ltmp3268 # Offset: 4713
    0000126b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3192:
    00001270: 	testq	%r13, %r13
    00001273: 	je	.Ltmp3269 # Offset: 4723
    00001279: 	jmp	.Ltmp3270 # Offset: 4729
    0000127e: 	nop # Size: 2
.Ltmp3180:
    00001280: 	testq	%r13, %r13
    00001283: 	je	.Ltmp3271 # Offset: 4739
    00001289: 	jmp	.Ltmp3272 # Offset: 4745
    0000128e: 	nop # Size: 2
.Ltmp3208:
    00001290: 	testq	%r13, %r13
    00001293: 	je	.Ltmp3273 # Offset: 4755
.Ltmp3274:
    00001299: 	movq	%r13, %rdx
    0000129c: 	movq	%r15, %rsi
    0000129f: 	callq	memcpy@PLT # Offset: 4767
    000012a4: 	movq	0x18(%rsp), %r13
    000012a9: 	movq	(%rbp), %rdi
    000012ad: 	jmp	.Ltmp3273 # Offset: 4781
.Ltmp3156:
    000012b2: 	leaq	0x18(%rsp), %rsi
    000012b7: 	xorl	%edx, %edx
    000012b9: 	movq	%rbp, %rdi
    000012bc: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4796
    000012c1: 	movq	%rax, (%rbp)
    000012c5: 	movq	%rax, %rdi
    000012c8: 	movq	0x18(%rsp), %rax
    000012cd: 	movq	%rax, 0x10(%rbp)
.Ltmp3268:
    000012d1: 	movq	%r13, %rdx
    000012d4: 	movq	%r15, %rsi
    000012d7: 	callq	memcpy@PLT # Offset: 4823
    000012dc: 	movq	0x18(%rsp), %r13
    000012e1: 	movq	(%rbp), %rdi
    000012e5: 	jmp	.Ltmp3267 # Offset: 4837
.Ltmp3167:
    000012ea: 	leaq	0x18(%rsp), %rsi
    000012ef: 	xorl	%edx, %edx
    000012f1: 	movq	%rbp, %rdi
    000012f4: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4852
    000012f9: 	movq	%rax, (%rbp)
    000012fd: 	movq	%rax, %rdi
    00001300: 	movq	0x18(%rsp), %rax
    00001305: 	movq	%rax, 0x10(%rbp)
.Ltmp3263:
    00001309: 	movq	%r13, %rdx
    0000130c: 	movq	%r15, %rsi
    0000130f: 	callq	memcpy@PLT # Offset: 4879
    00001314: 	movq	0x18(%rsp), %r13
    00001319: 	movq	(%rbp), %rdi
    0000131d: 	jmp	.Ltmp3262 # Offset: 4893
.Ltmp3223:
    00001322: 	leaq	0x18(%rsp), %rsi
    00001327: 	xorl	%edx, %edx
    00001329: 	movq	%rbp, %rdi
    0000132c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4908
    00001331: 	movq	%rax, (%rbp)
    00001335: 	movq	%rax, %rdi
    00001338: 	movq	0x18(%rsp), %rax
    0000133d: 	movq	%rax, 0x10(%rbp)
.Ltmp3266:
    00001341: 	movq	%r13, %rdx
    00001344: 	movq	%r15, %rsi
    00001347: 	callq	memcpy@PLT # Offset: 4935
    0000134c: 	movq	0x18(%rsp), %r13
    00001351: 	movq	(%rbp), %rdi
    00001355: 	jmp	.Ltmp3265 # Offset: 4949
.Ltmp3179:
    0000135a: 	leaq	0x18(%rsp), %rsi
    0000135f: 	xorl	%edx, %edx
    00001361: 	movq	%rbp, %rdi
    00001364: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4964
    00001369: 	movq	%rax, (%rbp)
    0000136d: 	movq	%rax, %rdi
    00001370: 	movq	0x18(%rsp), %rax
    00001375: 	movq	%rax, 0x10(%rbp)
.Ltmp3272:
    00001379: 	movq	%r13, %rdx
    0000137c: 	movq	%r15, %rsi
    0000137f: 	callq	memcpy@PLT # Offset: 4991
    00001384: 	movq	0x18(%rsp), %r13
    00001389: 	movq	(%rbp), %rdi
    0000138d: 	jmp	.Ltmp3271 # Offset: 5005
.Ltmp3191:
    00001392: 	leaq	0x18(%rsp), %rsi
    00001397: 	xorl	%edx, %edx
    00001399: 	movq	%rbp, %rdi
    0000139c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5020
    000013a1: 	movq	%rax, (%rbp)
    000013a5: 	movq	%rax, %rdi
    000013a8: 	movq	0x18(%rsp), %rax
    000013ad: 	movq	%rax, 0x10(%rbp)
.Ltmp3270:
    000013b1: 	movq	%r13, %rdx
    000013b4: 	movq	%r15, %rsi
    000013b7: 	callq	memcpy@PLT # Offset: 5047
    000013bc: 	movq	0x18(%rsp), %r13
    000013c1: 	movq	(%rbp), %rdi
    000013c5: 	jmp	.Ltmp3269 # Offset: 5061
.Ltmp3207:
    000013ca: 	leaq	0x18(%rsp), %rsi
    000013cf: 	xorl	%edx, %edx
    000013d1: 	movq	%rbp, %rdi
    000013d4: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5076
    000013d9: 	movq	%rax, (%rbp)
    000013dd: 	movq	%rax, %rdi
    000013e0: 	movq	0x18(%rsp), %rax
    000013e5: 	movq	%rax, 0x10(%rbp)
    000013e9: 	jmp	.Ltmp3274 # Offset: 5097
.Ltmp3234:
    000013ee: 	leaq	0x18(%rsp), %rsi
    000013f3: 	xorl	%edx, %edx
    000013f5: 	movq	%rbx, %rdi
    000013f8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5112
    000013fd: 	movq	%rax, (%rbx)
    00001400: 	movq	%rax, %rdi
    00001403: 	movq	0x18(%rsp), %rax
    00001408: 	movq	%rax, 0x10(%rbx)
    0000140c: 	jmp	.Ltmp3275 # Offset: 5132
.Ltmp3148:
    00001411: 	leaq	DATAat0x4d194(%rip), %rdi
    00001418: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 5144
.Ltmp3155:
    0000141d: 	leaq	DATAat0x4d018(%rip), %rdi
    00001424: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 5156
.Ltmp3166:
    00001429: 	leaq	DATAat0x4d018(%rip), %rdi
    00001430: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 5168
.Ltmp3178:
    00001435: 	leaq	DATAat0x4d018(%rip), %rdi
    0000143c: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 5180
.Ltmp3190:
    00001441: 	leaq	DATAat0x4d018(%rip), %rdi
    00001448: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 5192
.Ltmp3198:
    0000144d: 	leaq	DATAat0x4d194(%rip), %rdi
    00001454: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 5204
.Ltmp3206:
    00001459: 	leaq	DATAat0x4d018(%rip), %rdi
    00001460: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 5216
.Ltmp3215:
    00001465: 	leaq	DATAat0x4d194(%rip), %rdi
    0000146c: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 5228
.Ltmp3222:
    00001471: 	leaq	DATAat0x4d018(%rip), %rdi
    00001478: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 5240
.Ltmp3233:
    0000147d: 	leaq	DATAat0x4d018(%rip), %rdi
    00001484: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 5252
.Ltmp3238:
    00001489: 	callq	__stack_chk_fail@PLT # Offset: 5257
.Ltmp3239:
    0000148e: 	movq	%r14, %rdi
    00001491: 	jmp	.Ltmp3276 # Offset: 5265
.Ltmp3248:
    00001496: 	movq	%rbp, %rdi
    00001499: 	jmp	.Ltmp3277 # Offset: 5273
.Ltmp3250:
    0000149e: 	movq	0x8(%rsp), %rdi
    000014a3: 	jmp	.Ltmp3278 # Offset: 5283
.Ltmp3145:
    000014a8: 	leaq	DATAat0x4d018(%rip), %rdi
    000014af: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 5295
    000014b4: 	endbr64
.Ltmp3280:
    000014b8: 	movq	%rax, %rbp
    000014bb: 	jmp	.Ltmp3279 # Offset: 5307
    000014bd: 	endbr64
    000014c1: 	jmp	.Ltmp3280 # Offset: 5313
    000014c3: 	endbr64
.Ltmp3282:
    000014c7: 	movq	%rax, %rbp
    000014ca: 	jmp	.Ltmp3281 # Offset: 5322
    000014cc: 	endbr64
    000014d0: 	jmp	.Ltmp3282 # Offset: 5328
    000014d2: 	endbr64
    000014d6: 	jmp	.Ltmp3282 # Offset: 5334
.Ltmp3279:
    000014d8: 	movq	0x20(%rsp), %rdi
    000014dd: 	cmpq	%r14, %rdi
    000014e0: 	je	.Ltmp3283 # Offset: 5344
    000014e2: 	movq	0x30(%rsp), %rax
    000014e7: 	leaq	0x1(%rax), %rsi
    000014eb: 	callq	_ZdlPvm@PLT # Offset: 5355
.Ltmp3283:
    000014f0: 	movq	%rbp, %rdi
    000014f3: 	callq	_Unwind_Resume@PLT # Offset: 5363
    000014f8: 	endbr64
    000014fc: 	jmp	.Ltmp3282 # Offset: 5372
.Ltmp3281:
    000014fe: 	movq	0x60(%rsp), %rdi
    00001503: 	cmpq	0x8(%rsp), %rdi
    00001508: 	je	.Ltmp3283 # Offset: 5384
.Ltmp3285:
    0000150a: 	movq	0x70(%rsp), %rax
    0000150f: 	leaq	0x1(%rax), %rsi
    00001513: 	callq	_ZdlPvm@PLT # Offset: 5395
    00001518: 	jmp	.Ltmp3283 # Offset: 5400
    0000151a: 	endbr64
    0000151e: 	jmp	.Ltmp3282 # Offset: 5406
    00001520: 	endbr64
    00001524: 	movq	%rax, %rbp
    00001527: 	jmp	.Ltmp3284 # Offset: 5415
    00001529: 	endbr64
    0000152d: 	jmp	.Ltmp3282 # Offset: 5421
.Ltmp3284:
    0000152f: 	movq	0x60(%rsp), %rdi
    00001534: 	leaq	0x70(%rsp), %rax
    00001539: 	cmpq	%rax, %rdi
    0000153c: 	jne	.Ltmp3285 # Offset: 5436
    0000153e: 	jmp	.Ltmp3283 # Offset: 5438
    00001540: 	endbr64
    00001544: 	jmp	.Ltmp3282 # Offset: 5444
    00001546: 	endbr64
    0000154a: 	jmp	.Ltmp3282 # Offset: 5450
    0000154f: 	endbr64
.Ltmp3287:
    00001553: 	movq	%rax, %r12
    00001556: 	jmp	.Ltmp3286 # Offset: 5462
    00001558: 	endbr64
    0000155c: 	jmp	.Ltmp3287 # Offset: 5468
    0000155e: 	endbr64
    00001562: 	jmp	.Ltmp3282 # Offset: 5474
.Ltmp3286:
    00001567: 	movq	0x40(%rsp), %rdi
    0000156c: 	cmpq	%rbp, %rdi
    0000156f: 	je	.Ltmp3288 # Offset: 5487
    00001571: 	movq	0x50(%rsp), %rax
    00001576: 	leaq	0x1(%rax), %rsi
    0000157a: 	callq	_ZdlPvm@PLT # Offset: 5498
.Ltmp3288:
    0000157f: 	movq	%r12, %rdi
    00001582: 	callq	_Unwind_Resume@PLT # Offset: 5506
DWARF CFI Instructions:
    <empty>
End of Function "_Z16TestUnrolledTypeIiLi4EEvPT_S0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z11TestOneTypeIiEvd" after disassembly {
  Number      : 182
  State       : disassembled
  Address     : 0x2d470
  Size        : 0x44c9
  MaxSize     : 0x44d0
  Offset      : 0x2d470
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIiEvd
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0181:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0x7000(%rsp), %r11
.Ltmp3289:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp3289 # Offset: 37
    00000027: 	subq	$0xe28, %rsp
    0000002e: 	movq	%fs:0x28, %rax
    00000037: 	movq	%rax, 0x7e18(%rsp)
    0000003f: 	xorl	%eax, %eax
    00000041: 	cvttsd2si	init_value(%rip), %eax
    00000049: 	leaq	0x110(%rsp), %r12
    00000051: 	leaq	0x7e10(%rsp), %r15
    00000059: 	movd	%eax, %xmm1
    0000005d: 	movq	%r12, %rax
    00000060: 	pshufd	$0x0, %xmm1, %xmm1
    00000065: 	nopl	(%rax) # Size: 3
.Ltmp3290:
    00000068: 	movaps	%xmm1, (%rax)
    0000006b: 	addq	$0x10, %rax
    0000006f: 	cmpq	%r15, %rax
    00000072: 	jne	.Ltmp3290 # Offset: 114
    00000074: 	leaq	0x60(%rsp), %rax
    00000079: 	leaq	0x50(%rsp), %rbx
    0000007e: 	movdqa	_Z7gLabelsB5cxx11+16(%rip), %xmm4
    00000086: 	movsd	%xmm0, (%rsp)
    0000008b: 	movq	%rax, 0x28(%rsp)
    00000090: 	leaq	0x30(%rsp), %rsi
    00000095: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000009c: 	movaps	%xmm4, 0x30(%rsp)
    000000a1: 	movdqa	_Z7gLabelsB5cxx11+32(%rip), %xmm4
    000000a9: 	leaq	0xf0(%rsp), %r13
    000000b1: 	movq	%rax, 0x50(%rsp)
    000000b6: 	movl	$0x5f32, %eax
    000000bb: 	movq	%rbx, 0x20(%rsp)
    000000c0: 	movl	$0x33746e69, 0x60(%rsp)
    000000c8: 	movw	%ax, 0x64(%rsp)
    000000cd: 	movb	$0x74, 0x66(%rsp)
    000000d2: 	movq	$0x7, 0x58(%rsp)
    000000db: 	movb	$0x0, 0x67(%rsp)
    000000e0: 	movaps	%xmm4, 0x40(%rsp)
    000000e5: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E # Offset: 229
    000000ea: 	movsd	(%rsp), %xmm0
    000000ef: 	movq	%rbx, %rsi
    000000f2: 	movq	%r13, %rdi
    000000f5: 	addsd	DATAat0x4d638(%rip), %xmm0
    000000fd: 	leaq	DATAat0x4d1e0(%rip), %rdx
    00000104: 	cvttsd2si	%xmm0, %ebp
    00000108: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 264
    0000010d: 	callq	clock@PLT # Offset: 269
    00000112: 	movl	iterations(%rip), %esi
    00000118: 	xorl	%r14d, %r14d
    0000011b: 	leaq	0x7cf0(%r12), %rbx
    00000123: 	movq	%rax, start_time(%rip)
    0000012a: 	testl	%esi, %esi
    0000012c: 	jle	.Ltmp3291 # Offset: 300
    00000132: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3294:
    00000138: 	movl	0x110(%rsp), %edx
    0000013f: 	movq	%r12, %rax
    00000142: 	subl	0x114(%rsp), %edx
    00000149: 	pxor	%xmm0, %xmm0
    0000014d: 	nopl	(%rax) # Size: 3
.Ltmp3292:
    00000150: 	paddd	(%rax), %xmm0
    00000154: 	movdqu	0x4(%rax), %xmm7
    00000159: 	addq	$0x10, %rax
    0000015d: 	psubd	%xmm7, %xmm0
    00000161: 	cmpq	%rax, %rbx
    00000164: 	jne	.Ltmp3292 # Offset: 356
    00000166: 	movq	0x7e04(%rsp), %xmm2
    0000016f: 	movdqa	%xmm0, %xmm1
    00000173: 	psrldq	$0x8, %xmm1
    00000178: 	paddd	%xmm1, %xmm0
    0000017c: 	movq	0x7e00(%rsp), %xmm1
    00000185: 	psubd	%xmm2, %xmm1
    00000189: 	movdqa	%xmm0, %xmm2
    0000018d: 	psrldq	$0x4, %xmm2
    00000192: 	paddd	%xmm2, %xmm0
    00000196: 	movd	%xmm0, %eax
    0000019a: 	pshufd	$0xe5, %xmm1, %xmm6
    0000019f: 	movd	%xmm6, %ecx
    000001a3: 	addl	%edx, %eax
    000001a5: 	movd	%xmm1, %edx
    000001a9: 	addl	%ecx, %edx
    000001ab: 	addl	%edx, %eax
    000001ad: 	addl	0x7e08(%rsp), %eax
    000001b4: 	cmpl	0x7e0c(%rsp), %eax
    000001bb: 	jne	.Ltmp3293 # Offset: 443
.Ltmp3554:
    000001c1: 	addl	$0x1, %r14d
    000001c5: 	cmpl	%esi, %r14d
    000001c8: 	jl	.Ltmp3294 # Offset: 456
.Ltmp3291:
    000001ce: 	movq	%r13, %rsi
    000001d1: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001d8: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 472
    000001dd: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001e4: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000001eb: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001f2: 	je	.Ltmp3295 # Offset: 498
.Ltmp3555:
    000001f8: 	movq	-0x20(%rax), %r14
    000001fc: 	callq	clock@PLT # Offset: 508
    00000201: 	pxor	%xmm0, %xmm0
    00000205: 	movq	%rax, end_time(%rip)
    0000020c: 	movq	%r14, %rdi
    0000020f: 	subq	start_time(%rip), %rax
    00000216: 	cvtsi2sd	%rax, %xmm0
    0000021b: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000223: 	callq	_Z13record_resultdPKc # Offset: 547
    00000228: 	movq	0xf0(%rsp), %rdi
    00000230: 	leaq	0x100(%rsp), %rax
    00000238: 	movq	%rax, 0x18(%rsp)
    0000023d: 	cmpq	%rax, %rdi
    00000240: 	je	.Ltmp3296 # Offset: 576
    00000242: 	movq	0x100(%rsp), %rax
    0000024a: 	leaq	0x1(%rax), %rsi
    0000024e: 	callq	_ZdlPvm@PLT # Offset: 590
.Ltmp3296:
    00000253: 	movq	0x20(%rsp), %rsi
    00000258: 	leaq	DATAat0x4d1ed(%rip), %rdx
    0000025f: 	movq	%r13, %rdi
    00000262: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 610
    00000267: 	callq	clock@PLT # Offset: 615
    0000026c: 	movl	iterations(%rip), %esi
    00000272: 	xorl	%r14d, %r14d
    00000275: 	leaq	0x7cf0(%r12), %rbx
    0000027d: 	movq	%rax, start_time(%rip)
    00000284: 	testl	%esi, %esi
    00000286: 	jle	.Ltmp3297 # Offset: 646
    0000028c: 	nopl	(%rax) # Size: 4
.Ltmp3300:
    00000290: 	movl	0x110(%rsp), %edx
    00000297: 	movq	%r12, %rax
    0000029a: 	subl	0x114(%rsp), %edx
    000002a1: 	pxor	%xmm0, %xmm0
    000002a5: 	nopl	(%rax) # Size: 3
.Ltmp3298:
    000002a8: 	paddd	(%rax), %xmm0
    000002ac: 	movdqu	0x4(%rax), %xmm4
    000002b1: 	addq	$0x10, %rax
    000002b5: 	psubd	%xmm4, %xmm0
    000002b9: 	cmpq	%rax, %rbx
    000002bc: 	jne	.Ltmp3298 # Offset: 700
    000002be: 	movq	0x7e04(%rsp), %xmm2
    000002c7: 	movdqa	%xmm0, %xmm1
    000002cb: 	psrldq	$0x8, %xmm1
    000002d0: 	paddd	%xmm1, %xmm0
    000002d4: 	movq	0x7e00(%rsp), %xmm1
    000002dd: 	psubd	%xmm2, %xmm1
    000002e1: 	movdqa	%xmm0, %xmm2
    000002e5: 	psrldq	$0x4, %xmm2
    000002ea: 	paddd	%xmm2, %xmm0
    000002ee: 	movd	%xmm0, %eax
    000002f2: 	pshufd	$0xe5, %xmm1, %xmm7
    000002f7: 	movd	%xmm7, %ecx
    000002fb: 	addl	%edx, %eax
    000002fd: 	movd	%xmm1, %edx
    00000301: 	addl	%ecx, %edx
    00000303: 	addl	%edx, %eax
    00000305: 	addl	0x7e08(%rsp), %eax
    0000030c: 	cmpl	0x7e0c(%rsp), %eax
    00000313: 	jne	.Ltmp3299 # Offset: 787
.Ltmp3553:
    00000319: 	addl	$0x1, %r14d
    0000031d: 	cmpl	%esi, %r14d
    00000320: 	jl	.Ltmp3300 # Offset: 800
.Ltmp3297:
    00000326: 	movq	%r13, %rsi
    00000329: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000330: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 816
    00000335: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000033c: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000343: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000034a: 	je	.Ltmp3301 # Offset: 842
.Ltmp3588:
    00000350: 	movq	-0x20(%rax), %r14
    00000354: 	callq	clock@PLT # Offset: 852
    00000359: 	pxor	%xmm0, %xmm0
    0000035d: 	movq	%rax, end_time(%rip)
    00000364: 	movq	%r14, %rdi
    00000367: 	subq	start_time(%rip), %rax
    0000036e: 	cvtsi2sd	%rax, %xmm0
    00000373: 	divsd	DATAat0x4d640(%rip), %xmm0
    0000037b: 	callq	_Z13record_resultdPKc # Offset: 891
    00000380: 	movq	0xf0(%rsp), %rdi
    00000388: 	cmpq	0x18(%rsp), %rdi
    0000038d: 	je	.Ltmp3302 # Offset: 909
    0000038f: 	movq	0x100(%rsp), %rax
    00000397: 	leaq	0x1(%rax), %rsi
    0000039b: 	callq	_ZdlPvm@PLT # Offset: 923
.Ltmp3302:
    000003a0: 	movq	0x20(%rsp), %rsi
    000003a5: 	leaq	DATAat0x4d1ff(%rip), %rdx
    000003ac: 	movq	%r13, %rdi
    000003af: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 943
    000003b4: 	callq	clock@PLT # Offset: 948
    000003b9: 	movd	%ebp, %xmm4
    000003bd: 	xorl	%r14d, %r14d
    000003c0: 	movl	iterations(%rip), %ecx
    000003c6: 	pshufd	$0x0, %xmm4, %xmm4
    000003cb: 	movq	%rax, start_time(%rip)
    000003d2: 	leaq	0x7cf0(%r12), %rbx
    000003da: 	movaps	%xmm4, (%rsp)
    000003de: 	testl	%ecx, %ecx
    000003e0: 	jle	.Ltmp3303 # Offset: 992
    000003e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3306:
    000003f0: 	movl	0x110(%rsp), %edx
    000003f7: 	movq	%r12, %rax
    000003fa: 	subl	0x114(%rsp), %edx
    00000401: 	pxor	%xmm0, %xmm0
    00000405: 	nopl	(%rax) # Size: 3
.Ltmp3304:
    00000408: 	movdqu	0x4(%rax), %xmm2
    0000040d: 	movdqa	(%rax), %xmm1
    00000411: 	addq	$0x10, %rax
    00000415: 	paddd	-0x10(%rax), %xmm2
    0000041a: 	paddd	(%rsp), %xmm2
    0000041f: 	paddd	%xmm2, %xmm1
    00000423: 	paddd	%xmm2, %xmm1
    00000427: 	paddd	%xmm1, %xmm0
    0000042b: 	movdqu	-0xc(%rax), %xmm1
    00000430: 	paddd	%xmm2, %xmm1
    00000434: 	paddd	%xmm2, %xmm1
    00000438: 	psubd	%xmm1, %xmm0
    0000043c: 	cmpq	%rax, %rbx
    0000043f: 	jne	.Ltmp3304 # Offset: 1087
    00000441: 	movdqa	%xmm0, %xmm1
    00000445: 	movl	0x7e0c(%rsp), %edi
    0000044c: 	movq	0x7e04(%rsp), %xmm2
    00000455: 	psrldq	$0x8, %xmm1
    0000045a: 	paddd	%xmm1, %xmm0
    0000045e: 	movq	0x7e00(%rsp), %xmm1
    00000467: 	psubd	%xmm2, %xmm1
    0000046b: 	movdqa	%xmm0, %xmm2
    0000046f: 	psrldq	$0x4, %xmm2
    00000474: 	paddd	%xmm2, %xmm0
    00000478: 	movd	%xmm0, %eax
    0000047c: 	pshufd	$0xe5, %xmm1, %xmm6
    00000481: 	movd	%xmm6, %esi
    00000485: 	addl	%edx, %eax
    00000487: 	movd	%xmm1, %edx
    0000048b: 	addl	%esi, %edx
    0000048d: 	movl	0x7e08(%rsp), %esi
    00000494: 	addl	%edx, %eax
    00000496: 	leal	(%rdi,%rsi), %edx
    00000499: 	addl	%ebp, %edx
    0000049b: 	leal	(%rdi,%rdx,2), %edi
    0000049e: 	leal	(%rsi,%rdx,2), %edx
    000004a1: 	addl	%edx, %eax
    000004a3: 	cmpl	%eax, %edi
    000004a5: 	jne	.Ltmp3305 # Offset: 1189
.Ltmp3552:
    000004ab: 	addl	$0x1, %r14d
    000004af: 	cmpl	%ecx, %r14d
    000004b2: 	jl	.Ltmp3306 # Offset: 1202
.Ltmp3303:
    000004b8: 	movq	%r13, %rsi
    000004bb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000004c2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 1218
    000004c7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000004ce: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000004d5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000004dc: 	je	.Ltmp3307 # Offset: 1244
.Ltmp3587:
    000004e2: 	movq	-0x20(%rax), %r14
    000004e6: 	callq	clock@PLT # Offset: 1254
    000004eb: 	pxor	%xmm0, %xmm0
    000004ef: 	movq	%rax, end_time(%rip)
    000004f6: 	movq	%r14, %rdi
    000004f9: 	subq	start_time(%rip), %rax
    00000500: 	cvtsi2sd	%rax, %xmm0
    00000505: 	divsd	DATAat0x4d640(%rip), %xmm0
    0000050d: 	callq	_Z13record_resultdPKc # Offset: 1293
    00000512: 	movq	0xf0(%rsp), %rdi
    0000051a: 	cmpq	0x18(%rsp), %rdi
    0000051f: 	je	.Ltmp3308 # Offset: 1311
    00000521: 	movq	0x100(%rsp), %rax
    00000529: 	leaq	0x1(%rax), %rsi
    0000052d: 	callq	_ZdlPvm@PLT # Offset: 1325
.Ltmp3308:
    00000532: 	movq	0x20(%rsp), %rsi
    00000537: 	leaq	DATAat0x4d20f(%rip), %rdx
    0000053e: 	movq	%r13, %rdi
    00000541: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1345
    00000546: 	callq	clock@PLT # Offset: 1350
    0000054b: 	movd	%ebp, %xmm4
    0000054f: 	xorl	%r14d, %r14d
    00000552: 	movl	iterations(%rip), %ecx
    00000558: 	pshufd	$0x0, %xmm4, %xmm4
    0000055d: 	movq	%rax, start_time(%rip)
    00000564: 	leaq	0x7cf0(%r12), %rbx
    0000056c: 	movaps	%xmm4, (%rsp)
    00000570: 	testl	%ecx, %ecx
    00000572: 	jle	.Ltmp3309 # Offset: 1394
    00000578: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3312:
    00000580: 	movl	0x110(%rsp), %edx
    00000587: 	movq	%r12, %rax
    0000058a: 	subl	0x114(%rsp), %edx
    00000591: 	pxor	%xmm0, %xmm0
    00000595: 	nopl	(%rax) # Size: 3
.Ltmp3310:
    00000598: 	movdqu	0x4(%rax), %xmm2
    0000059d: 	movdqa	(%rax), %xmm1
    000005a1: 	addq	$0x10, %rax
    000005a5: 	paddd	-0x10(%rax), %xmm2
    000005aa: 	paddd	(%rsp), %xmm2
    000005af: 	paddd	%xmm2, %xmm1
    000005b3: 	paddd	%xmm2, %xmm1
    000005b7: 	paddd	%xmm1, %xmm0
    000005bb: 	movdqu	-0xc(%rax), %xmm1
    000005c0: 	paddd	%xmm2, %xmm1
    000005c4: 	paddd	%xmm2, %xmm1
    000005c8: 	psubd	%xmm1, %xmm0
    000005cc: 	cmpq	%rax, %rbx
    000005cf: 	jne	.Ltmp3310 # Offset: 1487
    000005d1: 	movdqa	%xmm0, %xmm1
    000005d5: 	movl	0x7e0c(%rsp), %edi
    000005dc: 	movq	0x7e04(%rsp), %xmm2
    000005e5: 	psrldq	$0x8, %xmm1
    000005ea: 	paddd	%xmm1, %xmm0
    000005ee: 	movq	0x7e00(%rsp), %xmm1
    000005f7: 	psubd	%xmm2, %xmm1
    000005fb: 	movdqa	%xmm0, %xmm2
    000005ff: 	psrldq	$0x4, %xmm2
    00000604: 	paddd	%xmm2, %xmm0
    00000608: 	movd	%xmm0, %eax
    0000060c: 	pshufd	$0xe5, %xmm1, %xmm7
    00000611: 	movd	%xmm7, %esi
    00000615: 	addl	%edx, %eax
    00000617: 	movd	%xmm1, %edx
    0000061b: 	addl	%esi, %edx
    0000061d: 	movl	0x7e08(%rsp), %esi
    00000624: 	addl	%edx, %eax
    00000626: 	leal	(%rdi,%rsi), %edx
    00000629: 	addl	%ebp, %edx
    0000062b: 	leal	(%rdi,%rdx,2), %edi
    0000062e: 	leal	(%rsi,%rdx,2), %edx
    00000631: 	addl	%edx, %eax
    00000633: 	cmpl	%eax, %edi
    00000635: 	jne	.Ltmp3311 # Offset: 1589
.Ltmp3551:
    0000063b: 	addl	$0x1, %r14d
    0000063f: 	cmpl	%ecx, %r14d
    00000642: 	jl	.Ltmp3312 # Offset: 1602
.Ltmp3309:
    00000648: 	movq	%r13, %rsi
    0000064b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000652: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 1618
    00000657: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000065e: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000665: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000066c: 	je	.Ltmp3313 # Offset: 1644
.Ltmp3586:
    00000672: 	movq	-0x20(%rax), %r14
    00000676: 	callq	clock@PLT # Offset: 1654
    0000067b: 	pxor	%xmm0, %xmm0
    0000067f: 	movq	%rax, end_time(%rip)
    00000686: 	movq	%r14, %rdi
    00000689: 	subq	start_time(%rip), %rax
    00000690: 	cvtsi2sd	%rax, %xmm0
    00000695: 	divsd	DATAat0x4d640(%rip), %xmm0
    0000069d: 	callq	_Z13record_resultdPKc # Offset: 1693
    000006a2: 	movq	0xf0(%rsp), %rdi
    000006aa: 	cmpq	0x18(%rsp), %rdi
    000006af: 	je	.Ltmp3314 # Offset: 1711
    000006b1: 	movq	0x100(%rsp), %rax
    000006b9: 	leaq	0x1(%rax), %rsi
    000006bd: 	callq	_ZdlPvm@PLT # Offset: 1725
.Ltmp3314:
    000006c2: 	movq	0x20(%rsp), %rsi
    000006c7: 	leaq	DATAat0x4d227(%rip), %rdx
    000006ce: 	movq	%r13, %rdi
    000006d1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1745
    000006d6: 	callq	clock@PLT # Offset: 1750
    000006db: 	movd	%ebp, %xmm4
    000006df: 	xorl	%r14d, %r14d
    000006e2: 	movl	iterations(%rip), %ecx
    000006e8: 	pshufd	$0x0, %xmm4, %xmm4
    000006ed: 	movq	%rax, start_time(%rip)
    000006f4: 	leaq	0x7cf0(%r12), %rbx
    000006fc: 	movaps	%xmm4, (%rsp)
    00000700: 	testl	%ecx, %ecx
    00000702: 	jle	.Ltmp3315 # Offset: 1794
    00000708: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3318:
    00000710: 	movl	0x110(%rsp), %edx
    00000717: 	movq	%r12, %rax
    0000071a: 	subl	0x114(%rsp), %edx
    00000721: 	pxor	%xmm0, %xmm0
    00000725: 	nopl	(%rax) # Size: 3
.Ltmp3316:
    00000728: 	movdqu	0x4(%rax), %xmm2
    0000072d: 	movdqa	(%rax), %xmm1
    00000731: 	addq	$0x10, %rax
    00000735: 	paddd	-0x10(%rax), %xmm2
    0000073a: 	paddd	(%rsp), %xmm2
    0000073f: 	paddd	%xmm2, %xmm1
    00000743: 	paddd	%xmm2, %xmm1
    00000747: 	paddd	%xmm1, %xmm0
    0000074b: 	movdqu	-0xc(%rax), %xmm1
    00000750: 	paddd	%xmm2, %xmm1
    00000754: 	paddd	%xmm2, %xmm1
    00000758: 	psubd	%xmm1, %xmm0
    0000075c: 	cmpq	%rbx, %rax
    0000075f: 	jne	.Ltmp3316 # Offset: 1887
    00000761: 	movdqa	%xmm0, %xmm1
    00000765: 	movl	0x7e0c(%rsp), %edi
    0000076c: 	movq	0x7e04(%rsp), %xmm2
    00000775: 	psrldq	$0x8, %xmm1
    0000077a: 	paddd	%xmm1, %xmm0
    0000077e: 	movq	0x7e00(%rsp), %xmm1
    00000787: 	psubd	%xmm2, %xmm1
    0000078b: 	movdqa	%xmm0, %xmm2
    0000078f: 	psrldq	$0x4, %xmm2
    00000794: 	paddd	%xmm2, %xmm0
    00000798: 	movd	%xmm0, %eax
    0000079c: 	pshufd	$0xe5, %xmm1, %xmm6
    000007a1: 	movd	%xmm6, %esi
    000007a5: 	addl	%edx, %eax
    000007a7: 	movd	%xmm1, %edx
    000007ab: 	addl	%esi, %edx
    000007ad: 	movl	0x7e08(%rsp), %esi
    000007b4: 	addl	%edx, %eax
    000007b6: 	leal	(%rdi,%rsi), %edx
    000007b9: 	addl	%ebp, %edx
    000007bb: 	leal	(%rdi,%rdx,2), %edi
    000007be: 	leal	(%rsi,%rdx,2), %edx
    000007c1: 	addl	%edx, %eax
    000007c3: 	cmpl	%eax, %edi
    000007c5: 	jne	.Ltmp3317 # Offset: 1989
.Ltmp3550:
    000007cb: 	addl	$0x1, %r14d
    000007cf: 	cmpl	%ecx, %r14d
    000007d2: 	jl	.Ltmp3318 # Offset: 2002
.Ltmp3315:
    000007d8: 	movq	%r13, %rsi
    000007db: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000007e2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 2018
    000007e7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000007ee: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000007f5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000007fc: 	je	.Ltmp3319 # Offset: 2044
.Ltmp3585:
    00000802: 	movq	-0x20(%rax), %r14
    00000806: 	callq	clock@PLT # Offset: 2054
    0000080b: 	pxor	%xmm0, %xmm0
    0000080f: 	movq	%rax, end_time(%rip)
    00000816: 	movq	%r14, %rdi
    00000819: 	subq	start_time(%rip), %rax
    00000820: 	cvtsi2sd	%rax, %xmm0
    00000825: 	divsd	DATAat0x4d640(%rip), %xmm0
    0000082d: 	callq	_Z13record_resultdPKc # Offset: 2093
    00000832: 	movq	0xf0(%rsp), %rdi
    0000083a: 	cmpq	0x18(%rsp), %rdi
    0000083f: 	je	.Ltmp3320 # Offset: 2111
    00000841: 	movq	0x100(%rsp), %rax
    00000849: 	leaq	0x1(%rax), %rsi
    0000084d: 	callq	_ZdlPvm@PLT # Offset: 2125
.Ltmp3320:
    00000852: 	movq	0x20(%rsp), %rsi
    00000857: 	leaq	DATAat0x4d230(%rip), %rdx
    0000085e: 	movq	%r13, %rdi
    00000861: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2145
    00000866: 	callq	clock@PLT # Offset: 2150
    0000086b: 	movl	iterations(%rip), %esi
    00000871: 	xorl	%r14d, %r14d
    00000874: 	leaq	0x7cf0(%r12), %rbx
    0000087c: 	movq	%rax, start_time(%rip)
    00000883: 	testl	%esi, %esi
    00000885: 	jle	.Ltmp3321 # Offset: 2181
    0000088b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3324:
    00000890: 	movl	0x110(%rsp), %edx
    00000897: 	movq	%r12, %rax
    0000089a: 	subl	0x114(%rsp), %edx
    000008a1: 	pxor	%xmm0, %xmm0
    000008a5: 	nopl	(%rax) # Size: 3
.Ltmp3322:
    000008a8: 	paddd	(%rax), %xmm0
    000008ac: 	movdqu	0x4(%rax), %xmm4
    000008b1: 	addq	$0x10, %rax
    000008b5: 	psubd	%xmm4, %xmm0
    000008b9: 	cmpq	%rax, %rbx
    000008bc: 	jne	.Ltmp3322 # Offset: 2236
    000008be: 	movq	0x7e04(%rsp), %xmm2
    000008c7: 	movdqa	%xmm0, %xmm1
    000008cb: 	psrldq	$0x8, %xmm1
    000008d0: 	paddd	%xmm1, %xmm0
    000008d4: 	movq	0x7e00(%rsp), %xmm1
    000008dd: 	psubd	%xmm2, %xmm1
    000008e1: 	movdqa	%xmm0, %xmm2
    000008e5: 	psrldq	$0x4, %xmm2
    000008ea: 	paddd	%xmm2, %xmm0
    000008ee: 	movd	%xmm0, %eax
    000008f2: 	pshufd	$0xe5, %xmm1, %xmm7
    000008f7: 	movd	%xmm7, %ecx
    000008fb: 	addl	%edx, %eax
    000008fd: 	movd	%xmm1, %edx
    00000901: 	addl	%ecx, %edx
    00000903: 	addl	%edx, %eax
    00000905: 	addl	0x7e08(%rsp), %eax
    0000090c: 	cmpl	0x7e0c(%rsp), %eax
    00000913: 	jne	.Ltmp3323 # Offset: 2323
.Ltmp3549:
    00000919: 	addl	$0x1, %r14d
    0000091d: 	cmpl	%esi, %r14d
    00000920: 	jl	.Ltmp3324 # Offset: 2336
.Ltmp3321:
    00000926: 	movq	%r13, %rsi
    00000929: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000930: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 2352
    00000935: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000093c: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000943: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000094a: 	je	.Ltmp3325 # Offset: 2378
.Ltmp3584:
    00000950: 	movq	-0x20(%rax), %r14
    00000954: 	callq	clock@PLT # Offset: 2388
    00000959: 	pxor	%xmm0, %xmm0
    0000095d: 	movq	%rax, end_time(%rip)
    00000964: 	movq	%r14, %rdi
    00000967: 	subq	start_time(%rip), %rax
    0000096e: 	cvtsi2sd	%rax, %xmm0
    00000973: 	divsd	DATAat0x4d640(%rip), %xmm0
    0000097b: 	callq	_Z13record_resultdPKc # Offset: 2427
    00000980: 	movq	0xf0(%rsp), %rdi
    00000988: 	cmpq	0x18(%rsp), %rdi
    0000098d: 	je	.Ltmp3326 # Offset: 2445
    0000098f: 	movq	0x100(%rsp), %rax
    00000997: 	leaq	0x1(%rax), %rsi
    0000099b: 	callq	_ZdlPvm@PLT # Offset: 2459
.Ltmp3326:
    000009a0: 	movq	0x20(%rsp), %rsi
    000009a5: 	leaq	DATAat0x4d247(%rip), %rdx
    000009ac: 	movq	%r13, %rdi
    000009af: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2479
    000009b4: 	callq	clock@PLT # Offset: 2484
    000009b9: 	movd	%ebp, %xmm4
    000009bd: 	xorl	%r14d, %r14d
    000009c0: 	movl	iterations(%rip), %edi
    000009c6: 	pshufd	$0x0, %xmm4, %xmm4
    000009cb: 	movq	%rax, start_time(%rip)
    000009d2: 	leaq	0x7cf0(%r12), %rbx
    000009da: 	movaps	%xmm4, (%rsp)
    000009de: 	testl	%edi, %edi
    000009e0: 	jle	.Ltmp3327 # Offset: 2528
    000009e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3330:
    000009f0: 	movl	0x110(%rsp), %edx
    000009f7: 	movq	%r12, %rax
    000009fa: 	subl	0x114(%rsp), %edx
    00000a01: 	pxor	%xmm0, %xmm0
    00000a05: 	nopl	(%rax) # Size: 3
.Ltmp3328:
    00000a08: 	movdqa	(%rax), %xmm1
    00000a0c: 	movdqu	0x4(%rax), %xmm7
    00000a11: 	addq	$0x10, %rax
    00000a15: 	movdqa	%xmm1, %xmm2
    00000a19: 	psubd	%xmm7, %xmm2
    00000a1d: 	paddd	(%rsp), %xmm2
    00000a22: 	paddd	%xmm2, %xmm1
    00000a26: 	paddd	%xmm2, %xmm1
    00000a2a: 	paddd	%xmm1, %xmm0
    00000a2e: 	movdqa	%xmm7, %xmm1
    00000a32: 	paddd	%xmm2, %xmm1
    00000a36: 	paddd	%xmm2, %xmm1
    00000a3a: 	psubd	%xmm1, %xmm0
    00000a3e: 	cmpq	%rbx, %rax
    00000a41: 	jne	.Ltmp3328 # Offset: 2625
    00000a43: 	movdqa	%xmm0, %xmm1
    00000a47: 	movl	0x7e08(%rsp), %r8d
    00000a4f: 	movq	0x7e04(%rsp), %xmm2
    00000a58: 	psrldq	$0x8, %xmm1
    00000a5d: 	movl	0x7e0c(%rsp), %eax
    00000a64: 	paddd	%xmm1, %xmm0
    00000a68: 	movl	%r8d, %ecx
    00000a6b: 	movq	0x7e00(%rsp), %xmm1
    00000a74: 	subl	%eax, %ecx
    00000a76: 	psubd	%xmm2, %xmm1
    00000a7a: 	movdqa	%xmm0, %xmm2
    00000a7e: 	addl	%ebp, %ecx
    00000a80: 	psrldq	$0x4, %xmm2
    00000a85: 	leal	(%rax,%rcx,2), %esi
    00000a88: 	paddd	%xmm2, %xmm0
    00000a8c: 	movd	%xmm0, %eax
    00000a90: 	pshufd	$0xe5, %xmm1, %xmm6
    00000a95: 	movd	%xmm6, %r9d
    00000a9a: 	addl	%edx, %eax
    00000a9c: 	movd	%xmm1, %edx
    00000aa0: 	addl	%r9d, %edx
    00000aa3: 	addl	%edx, %eax
    00000aa5: 	leal	(%r8,%rcx,2), %edx
    00000aa9: 	addl	%edx, %eax
    00000aab: 	cmpl	%eax, %esi
    00000aad: 	jne	.Ltmp3329 # Offset: 2733
.Ltmp3548:
    00000ab3: 	addl	$0x1, %r14d
    00000ab7: 	cmpl	%edi, %r14d
    00000aba: 	jl	.Ltmp3330 # Offset: 2746
.Ltmp3327:
    00000ac0: 	movq	%r13, %rsi
    00000ac3: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000aca: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 2762
    00000acf: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000ad6: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000add: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000ae4: 	je	.Ltmp3331 # Offset: 2788
.Ltmp3583:
    00000aea: 	movq	-0x20(%rax), %r14
    00000aee: 	callq	clock@PLT # Offset: 2798
    00000af3: 	pxor	%xmm0, %xmm0
    00000af7: 	movq	%rax, end_time(%rip)
    00000afe: 	movq	%r14, %rdi
    00000b01: 	subq	start_time(%rip), %rax
    00000b08: 	cvtsi2sd	%rax, %xmm0
    00000b0d: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000b15: 	callq	_Z13record_resultdPKc # Offset: 2837
    00000b1a: 	movq	0xf0(%rsp), %rdi
    00000b22: 	cmpq	0x18(%rsp), %rdi
    00000b27: 	je	.Ltmp3332 # Offset: 2855
    00000b29: 	movq	0x100(%rsp), %rax
    00000b31: 	leaq	0x1(%rax), %rsi
    00000b35: 	callq	_ZdlPvm@PLT # Offset: 2869
.Ltmp3332:
    00000b3a: 	movq	0x20(%rsp), %rsi
    00000b3f: 	leaq	DATAat0x4d255(%rip), %rdx
    00000b46: 	movq	%r13, %rdi
    00000b49: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2889
    00000b4e: 	callq	clock@PLT # Offset: 2894
    00000b53: 	movl	iterations(%rip), %esi
    00000b59: 	xorl	%r14d, %r14d
    00000b5c: 	leaq	0x7cf0(%r12), %rbx
    00000b64: 	movq	%rax, start_time(%rip)
    00000b6b: 	testl	%esi, %esi
    00000b6d: 	jle	.Ltmp3333 # Offset: 2925
    00000b73: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3336:
    00000b78: 	movl	0x110(%rsp), %edx
    00000b7f: 	movq	%r12, %rax
    00000b82: 	subl	0x114(%rsp), %edx
    00000b89: 	pxor	%xmm0, %xmm0
    00000b8d: 	nopl	(%rax) # Size: 3
.Ltmp3334:
    00000b90: 	paddd	(%rax), %xmm0
    00000b94: 	movdqu	0x4(%rax), %xmm6
    00000b99: 	addq	$0x10, %rax
    00000b9d: 	psubd	%xmm6, %xmm0
    00000ba1: 	cmpq	%rax, %rbx
    00000ba4: 	jne	.Ltmp3334 # Offset: 2980
    00000ba6: 	movq	0x7e04(%rsp), %xmm2
    00000baf: 	movdqa	%xmm0, %xmm1
    00000bb3: 	psrldq	$0x8, %xmm1
    00000bb8: 	paddd	%xmm1, %xmm0
    00000bbc: 	movq	0x7e00(%rsp), %xmm1
    00000bc5: 	psubd	%xmm2, %xmm1
    00000bc9: 	movdqa	%xmm0, %xmm2
    00000bcd: 	psrldq	$0x4, %xmm2
    00000bd2: 	paddd	%xmm2, %xmm0
    00000bd6: 	movd	%xmm0, %eax
    00000bda: 	pshufd	$0xe5, %xmm1, %xmm7
    00000bdf: 	movd	%xmm7, %ecx
    00000be3: 	addl	%edx, %eax
    00000be5: 	movd	%xmm1, %edx
    00000be9: 	addl	%ecx, %edx
    00000beb: 	addl	%edx, %eax
    00000bed: 	addl	0x7e08(%rsp), %eax
    00000bf4: 	cmpl	0x7e0c(%rsp), %eax
    00000bfb: 	jne	.Ltmp3335 # Offset: 3067
.Ltmp3547:
    00000c01: 	addl	$0x1, %r14d
    00000c05: 	cmpl	%esi, %r14d
    00000c08: 	jl	.Ltmp3336 # Offset: 3080
.Ltmp3333:
    00000c0e: 	movq	%r13, %rsi
    00000c11: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000c18: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 3096
    00000c1d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000c24: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000c2b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000c32: 	je	.Ltmp3337 # Offset: 3122
.Ltmp3582:
    00000c38: 	movq	-0x20(%rax), %r14
    00000c3c: 	callq	clock@PLT # Offset: 3132
    00000c41: 	pxor	%xmm0, %xmm0
    00000c45: 	movq	%rax, end_time(%rip)
    00000c4c: 	movq	%r14, %rdi
    00000c4f: 	subq	start_time(%rip), %rax
    00000c56: 	cvtsi2sd	%rax, %xmm0
    00000c5b: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000c63: 	callq	_Z13record_resultdPKc # Offset: 3171
    00000c68: 	movq	0xf0(%rsp), %rdi
    00000c70: 	cmpq	0x18(%rsp), %rdi
    00000c75: 	je	.Ltmp3338 # Offset: 3189
    00000c77: 	movq	0x100(%rsp), %rax
    00000c7f: 	leaq	0x1(%rax), %rsi
    00000c83: 	callq	_ZdlPvm@PLT # Offset: 3203
.Ltmp3338:
    00000c88: 	movq	0x20(%rsp), %rsi
    00000c8d: 	leaq	DATAat0x4d26c(%rip), %rdx
    00000c94: 	movq	%r13, %rdi
    00000c97: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3223
    00000c9c: 	callq	clock@PLT # Offset: 3228
    00000ca1: 	movd	%ebp, %xmm4
    00000ca5: 	xorl	%r14d, %r14d
    00000ca8: 	movl	iterations(%rip), %ecx
    00000cae: 	pshufd	$0x0, %xmm4, %xmm4
    00000cb3: 	movq	%rax, start_time(%rip)
    00000cba: 	leaq	0x7cf0(%r12), %rbx
    00000cc2: 	movaps	%xmm4, (%rsp)
    00000cc6: 	testl	%ecx, %ecx
    00000cc8: 	jle	.Ltmp3339 # Offset: 3272
    00000cce: 	nop # Size: 2
.Ltmp3342:
    00000cd0: 	movl	0x110(%rsp), %edx
    00000cd7: 	movq	%r12, %rax
    00000cda: 	subl	0x114(%rsp), %edx
    00000ce1: 	pxor	%xmm1, %xmm1
    00000ce5: 	nopl	(%rax) # Size: 3
.Ltmp3340:
    00000ce8: 	movdqa	(%rax), %xmm0
    00000cec: 	movdqu	0x4(%rax), %xmm3
    00000cf1: 	addq	$0x10, %rax
    00000cf5: 	movdqa	%xmm3, %xmm4
    00000cf9: 	movdqa	%xmm0, %xmm5
    00000cfd: 	movdqa	%xmm3, %xmm2
    00000d01: 	psrlq	$0x20, %xmm4
    00000d06: 	psrlq	$0x20, %xmm5
    00000d0b: 	pmuludq	%xmm0, %xmm2
    00000d0f: 	pmuludq	%xmm5, %xmm4
    00000d13: 	pshufd	$0x8, %xmm2, %xmm2
    00000d18: 	pshufd	$0x8, %xmm4, %xmm4
    00000d1d: 	punpckldq	%xmm4, %xmm2
    00000d21: 	paddd	(%rsp), %xmm2
    00000d26: 	paddd	%xmm2, %xmm0
    00000d2a: 	paddd	%xmm2, %xmm3
    00000d2e: 	paddd	%xmm2, %xmm0
    00000d32: 	paddd	%xmm2, %xmm3
    00000d36: 	paddd	%xmm0, %xmm1
    00000d3a: 	psubd	%xmm3, %xmm1
    00000d3e: 	cmpq	%rax, %rbx
    00000d41: 	jne	.Ltmp3340 # Offset: 3393
    00000d43: 	movdqa	%xmm1, %xmm0
    00000d47: 	movl	0x7e04(%rsp), %r8d
    00000d4f: 	psrldq	$0x8, %xmm0
    00000d54: 	paddd	%xmm0, %xmm1
    00000d58: 	movdqa	%xmm1, %xmm0
    00000d5c: 	psrldq	$0x4, %xmm0
    00000d61: 	paddd	%xmm0, %xmm1
    00000d65: 	movd	%xmm1, %eax
    00000d69: 	addl	%edx, %eax
    00000d6b: 	movl	0x7e00(%rsp), %edx
    00000d72: 	movl	%edx, %esi
    00000d74: 	imull	%r8d, %esi
    00000d78: 	addl	%ebp, %esi
    00000d7a: 	leal	(%rdx,%rsi,2), %edx
    00000d7d: 	addl	%eax, %edx
    00000d7f: 	leal	(%r8,%rsi,2), %eax
    00000d83: 	movl	0x7e08(%rsp), %esi
    00000d8a: 	subl	%eax, %edx
    00000d8c: 	movl	%esi, %edi
    00000d8e: 	imull	%r8d, %edi
    00000d92: 	addl	%ebp, %edi
    00000d94: 	leal	(%r8,%rdi,2), %eax
    00000d98: 	addl	%edx, %eax
    00000d9a: 	leal	(%rsi,%rdi,2), %edx
    00000d9d: 	movl	0x7e0c(%rsp), %edi
    00000da4: 	subl	%edx, %eax
    00000da6: 	movl	%esi, %edx
    00000da8: 	imull	%edi, %edx
    00000dab: 	addl	%ebp, %edx
    00000dad: 	leal	(%rdi,%rdx,2), %edi
    00000db0: 	leal	(%rsi,%rdx,2), %edx
    00000db3: 	addl	%edx, %eax
    00000db5: 	cmpl	%eax, %edi
    00000db7: 	jne	.Ltmp3341 # Offset: 3511
.Ltmp3546:
    00000dbd: 	addl	$0x1, %r14d
    00000dc1: 	cmpl	%ecx, %r14d
    00000dc4: 	jl	.Ltmp3342 # Offset: 3524
.Ltmp3339:
    00000dca: 	movq	%r13, %rsi
    00000dcd: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000dd4: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 3540
    00000dd9: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000de0: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000de7: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000dee: 	je	.Ltmp3343 # Offset: 3566
.Ltmp3581:
    00000df4: 	movq	-0x20(%rax), %r14
    00000df8: 	callq	clock@PLT # Offset: 3576
    00000dfd: 	pxor	%xmm0, %xmm0
    00000e01: 	movq	%rax, end_time(%rip)
    00000e08: 	movq	%r14, %rdi
    00000e0b: 	subq	start_time(%rip), %rax
    00000e12: 	cvtsi2sd	%rax, %xmm0
    00000e17: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000e1f: 	callq	_Z13record_resultdPKc # Offset: 3615
    00000e24: 	movq	0xf0(%rsp), %rdi
    00000e2c: 	cmpq	0x18(%rsp), %rdi
    00000e31: 	je	.Ltmp3344 # Offset: 3633
    00000e33: 	movq	0x100(%rsp), %rax
    00000e3b: 	leaq	0x1(%rax), %rsi
    00000e3f: 	callq	_ZdlPvm@PLT # Offset: 3647
.Ltmp3344:
    00000e44: 	movq	0x20(%rsp), %rsi
    00000e49: 	leaq	DATAat0x4d27a(%rip), %rdx
    00000e50: 	movq	%r13, %rdi
    00000e53: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3667
    00000e58: 	callq	clock@PLT # Offset: 3672
    00000e5d: 	movl	iterations(%rip), %esi
    00000e63: 	xorl	%r14d, %r14d
    00000e66: 	leaq	0x7cf0(%r12), %rbx
    00000e6e: 	movq	%rax, start_time(%rip)
    00000e75: 	testl	%esi, %esi
    00000e77: 	jle	.Ltmp3345 # Offset: 3703
    00000e7d: 	nopl	(%rax) # Size: 3
.Ltmp3348:
    00000e80: 	movl	0x110(%rsp), %edx
    00000e87: 	movq	%r12, %rax
    00000e8a: 	subl	0x114(%rsp), %edx
    00000e91: 	pxor	%xmm0, %xmm0
    00000e95: 	nopl	(%rax) # Size: 3
.Ltmp3346:
    00000e98: 	paddd	(%rax), %xmm0
    00000e9c: 	movdqu	0x4(%rax), %xmm7
    00000ea1: 	addq	$0x10, %rax
    00000ea5: 	psubd	%xmm7, %xmm0
    00000ea9: 	cmpq	%rbx, %rax
    00000eac: 	jne	.Ltmp3346 # Offset: 3756
    00000eae: 	movq	0x7e04(%rsp), %xmm2
    00000eb7: 	movdqa	%xmm0, %xmm1
    00000ebb: 	psrldq	$0x8, %xmm1
    00000ec0: 	paddd	%xmm1, %xmm0
    00000ec4: 	movq	0x7e00(%rsp), %xmm1
    00000ecd: 	psubd	%xmm2, %xmm1
    00000ed1: 	movdqa	%xmm0, %xmm2
    00000ed5: 	psrldq	$0x4, %xmm2
    00000eda: 	paddd	%xmm2, %xmm0
    00000ede: 	movd	%xmm0, %eax
    00000ee2: 	pshufd	$0xe5, %xmm1, %xmm6
    00000ee7: 	movd	%xmm6, %ecx
    00000eeb: 	addl	%edx, %eax
    00000eed: 	movd	%xmm1, %edx
    00000ef1: 	addl	%ecx, %edx
    00000ef3: 	addl	%edx, %eax
    00000ef5: 	addl	0x7e08(%rsp), %eax
    00000efc: 	cmpl	0x7e0c(%rsp), %eax
    00000f03: 	jne	.Ltmp3347 # Offset: 3843
.Ltmp3545:
    00000f09: 	addl	$0x1, %r14d
    00000f0d: 	cmpl	%esi, %r14d
    00000f10: 	jl	.Ltmp3348 # Offset: 3856
.Ltmp3345:
    00000f16: 	movq	%r13, %rsi
    00000f19: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000f20: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 3872
    00000f25: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000f2c: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000f33: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000f3a: 	je	.Ltmp3349 # Offset: 3898
.Ltmp3580:
    00000f40: 	movq	-0x20(%rax), %r14
    00000f44: 	callq	clock@PLT # Offset: 3908
    00000f49: 	pxor	%xmm0, %xmm0
    00000f4d: 	movq	%rax, end_time(%rip)
    00000f54: 	movq	%r14, %rdi
    00000f57: 	subq	start_time(%rip), %rax
    00000f5e: 	cvtsi2sd	%rax, %xmm0
    00000f63: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000f6b: 	callq	_Z13record_resultdPKc # Offset: 3947
    00000f70: 	movq	0xf0(%rsp), %rdi
    00000f78: 	cmpq	0x18(%rsp), %rdi
    00000f7d: 	je	.Ltmp3350 # Offset: 3965
    00000f7f: 	movq	0x100(%rsp), %rax
    00000f87: 	leaq	0x1(%rax), %rsi
    00000f8b: 	callq	_ZdlPvm@PLT # Offset: 3979
.Ltmp3350:
    00000f90: 	movq	0x20(%rsp), %rsi
    00000f95: 	leaq	DATAat0x4d28f(%rip), %rdx
    00000f9c: 	movq	%r13, %rdi
    00000f9f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3999
    00000fa4: 	callq	clock@PLT # Offset: 4004
    00000fa9: 	movl	iterations(%rip), %r8d
    00000fb0: 	xorl	%ebx, %ebx
    00000fb2: 	leaq	0x114(%rsp), %r14
    00000fba: 	movq	%rax, start_time(%rip)
    00000fc1: 	testl	%r8d, %r8d
    00000fc4: 	jle	.Ltmp3351 # Offset: 4036
    00000fc6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3354:
    00000fd0: 	movl	0x110(%rsp), %esi
    00000fd7: 	movq	%r14, %rdi
    00000fda: 	movl	%esi, %ecx
    00000fdc: 	subl	0x114(%rsp), %ecx
    00000fe3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3352:
    00000fe8: 	movl	%esi, %r9d
    00000feb: 	movl	(%rdi), %esi
    00000fed: 	addq	$0x4, %rdi
    00000ff1: 	movl	%r9d, %eax
    00000ff4: 	cltd
    00000ff5: 	idivl	%esi
    00000ff7: 	addl	%ebp, %eax
    00000ff9: 	leal	(%r9,%rax,2), %edx
    00000ffd: 	leal	(%rsi,%rax,2), %eax
    00001000: 	addl	%edx, %ecx
    00001002: 	subl	%eax, %ecx
    00001004: 	cmpq	%rdi, %r15
    00001007: 	jne	.Ltmp3352 # Offset: 4103
    00001009: 	testl	%ecx, %ecx
    0000100b: 	jne	.Ltmp3353 # Offset: 4107
.Ltmp3544:
    00001011: 	addl	$0x1, %ebx
    00001014: 	cmpl	%r8d, %ebx
    00001017: 	jl	.Ltmp3354 # Offset: 4119
.Ltmp3351:
    00001019: 	movq	%r13, %rsi
    0000101c: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001023: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 4131
    00001028: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000102f: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001036: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000103d: 	je	.Ltmp3355 # Offset: 4157
.Ltmp3579:
    00001043: 	movq	-0x20(%rax), %r14
    00001047: 	callq	clock@PLT # Offset: 4167
    0000104c: 	pxor	%xmm0, %xmm0
    00001050: 	movq	%rax, end_time(%rip)
    00001057: 	movq	%r14, %rdi
    0000105a: 	subq	start_time(%rip), %rax
    00001061: 	cvtsi2sd	%rax, %xmm0
    00001066: 	divsd	DATAat0x4d640(%rip), %xmm0
    0000106e: 	callq	_Z13record_resultdPKc # Offset: 4206
    00001073: 	movq	0xf0(%rsp), %rdi
    0000107b: 	cmpq	0x18(%rsp), %rdi
    00001080: 	je	.Ltmp3356 # Offset: 4224
    00001082: 	movq	0x100(%rsp), %rax
    0000108a: 	leaq	0x1(%rax), %rsi
    0000108e: 	callq	_ZdlPvm@PLT # Offset: 4238
.Ltmp3356:
    00001093: 	movq	0x20(%rsp), %rsi
    00001098: 	leaq	DATAat0x4d29b(%rip), %rdx
    0000109f: 	movq	%r13, %rdi
    000010a2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4258
    000010a7: 	callq	clock@PLT # Offset: 4263
    000010ac: 	movl	iterations(%rip), %esi
    000010b2: 	xorl	%r14d, %r14d
    000010b5: 	leaq	0x7cf0(%r12), %rbx
    000010bd: 	movq	%rax, start_time(%rip)
    000010c4: 	testl	%esi, %esi
    000010c6: 	jle	.Ltmp3357 # Offset: 4294
    000010cc: 	nopl	(%rax) # Size: 4
.Ltmp3360:
    000010d0: 	movl	0x110(%rsp), %edx
    000010d7: 	movq	%r12, %rax
    000010da: 	subl	0x114(%rsp), %edx
    000010e1: 	pxor	%xmm0, %xmm0
    000010e5: 	nopl	(%rax) # Size: 3
.Ltmp3358:
    000010e8: 	paddd	(%rax), %xmm0
    000010ec: 	movdqu	0x4(%rax), %xmm5
    000010f1: 	addq	$0x10, %rax
    000010f5: 	psubd	%xmm5, %xmm0
    000010f9: 	cmpq	%rax, %rbx
    000010fc: 	jne	.Ltmp3358 # Offset: 4348
    000010fe: 	movq	0x7e04(%rsp), %xmm2
    00001107: 	movdqa	%xmm0, %xmm1
    0000110b: 	psrldq	$0x8, %xmm1
    00001110: 	paddd	%xmm1, %xmm0
    00001114: 	movq	0x7e00(%rsp), %xmm1
    0000111d: 	psubd	%xmm2, %xmm1
    00001121: 	movdqa	%xmm0, %xmm2
    00001125: 	psrldq	$0x4, %xmm2
    0000112a: 	paddd	%xmm2, %xmm0
    0000112e: 	movd	%xmm0, %eax
    00001132: 	pshufd	$0xe5, %xmm1, %xmm7
    00001137: 	movd	%xmm7, %ecx
    0000113b: 	addl	%edx, %eax
    0000113d: 	movd	%xmm1, %edx
    00001141: 	addl	%ecx, %edx
    00001143: 	addl	%edx, %eax
    00001145: 	addl	0x7e08(%rsp), %eax
    0000114c: 	cmpl	0x7e0c(%rsp), %eax
    00001153: 	jne	.Ltmp3359 # Offset: 4435
.Ltmp3543:
    00001159: 	addl	$0x1, %r14d
    0000115d: 	cmpl	%esi, %r14d
    00001160: 	jl	.Ltmp3360 # Offset: 4448
.Ltmp3357:
    00001166: 	movq	%r13, %rsi
    00001169: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001170: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 4464
    00001175: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000117c: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001183: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000118a: 	je	.Ltmp3361 # Offset: 4490
.Ltmp3578:
    00001190: 	movq	-0x20(%rax), %r14
    00001194: 	callq	clock@PLT # Offset: 4500
    00001199: 	pxor	%xmm0, %xmm0
    0000119d: 	movq	%rax, end_time(%rip)
    000011a4: 	movq	%r14, %rdi
    000011a7: 	subq	start_time(%rip), %rax
    000011ae: 	cvtsi2sd	%rax, %xmm0
    000011b3: 	divsd	DATAat0x4d640(%rip), %xmm0
    000011bb: 	callq	_Z13record_resultdPKc # Offset: 4539
    000011c0: 	movq	0xf0(%rsp), %rdi
    000011c8: 	cmpq	0x18(%rsp), %rdi
    000011cd: 	je	.Ltmp3362 # Offset: 4557
    000011cf: 	movq	0x100(%rsp), %rax
    000011d7: 	leaq	0x1(%rax), %rsi
    000011db: 	callq	_ZdlPvm@PLT # Offset: 4571
.Ltmp3362:
    000011e0: 	movq	0x20(%rsp), %rsi
    000011e5: 	leaq	DATAat0x4d2ad(%rip), %rdx
    000011ec: 	movq	%r13, %rdi
    000011ef: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4591
    000011f4: 	callq	clock@PLT # Offset: 4596
    000011f9: 	movl	iterations(%rip), %r10d
    00001200: 	xorl	%ebx, %ebx
    00001202: 	leaq	0x114(%rsp), %r14
    0000120a: 	movq	%rax, start_time(%rip)
    00001211: 	testl	%r10d, %r10d
    00001214: 	jle	.Ltmp3363 # Offset: 4628
    00001216: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3366:
    00001220: 	movl	0x110(%rsp), %r8d
    00001228: 	movq	%r14, %r9
    0000122b: 	movl	%r8d, %esi
    0000122e: 	subl	0x114(%rsp), %esi
    00001235: 	nopl	(%rax) # Size: 3
.Ltmp3364:
    00001238: 	movl	%r8d, %edi
    0000123b: 	movl	(%r9), %r8d
    0000123e: 	addq	$0x4, %r9
    00001242: 	movl	%edi, %eax
    00001244: 	subl	%r8d, %eax
    00001247: 	imull	%ebp, %eax
    0000124a: 	movl	%eax, %ecx
    0000124c: 	movl	%edi, %eax
    0000124e: 	cltd
    0000124f: 	idivl	%ebp
    00001251: 	addl	%ecx, %eax
    00001253: 	leal	(%rdi,%rax,2), %edx
    00001256: 	leal	(%r8,%rax,2), %eax
    0000125a: 	addl	%edx, %esi
    0000125c: 	subl	%eax, %esi
    0000125e: 	cmpq	%r9, %r15
    00001261: 	jne	.Ltmp3364 # Offset: 4705
    00001263: 	testl	%esi, %esi
    00001265: 	jne	.Ltmp3365 # Offset: 4709
.Ltmp3542:
    0000126b: 	addl	$0x1, %ebx
    0000126e: 	cmpl	%r10d, %ebx
    00001271: 	jl	.Ltmp3366 # Offset: 4721
.Ltmp3363:
    00001273: 	movq	%r13, %rsi
    00001276: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000127d: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 4733
    00001282: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001289: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001290: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001297: 	je	.Ltmp3367 # Offset: 4759
.Ltmp3577:
    0000129d: 	movq	-0x20(%rax), %r14
    000012a1: 	callq	clock@PLT # Offset: 4769
    000012a6: 	pxor	%xmm0, %xmm0
    000012aa: 	movq	%rax, end_time(%rip)
    000012b1: 	movq	%r14, %rdi
    000012b4: 	subq	start_time(%rip), %rax
    000012bb: 	cvtsi2sd	%rax, %xmm0
    000012c0: 	divsd	DATAat0x4d640(%rip), %xmm0
    000012c8: 	callq	_Z13record_resultdPKc # Offset: 4808
    000012cd: 	movq	0xf0(%rsp), %rdi
    000012d5: 	cmpq	0x18(%rsp), %rdi
    000012da: 	je	.Ltmp3368 # Offset: 4826
    000012dc: 	movq	0x100(%rsp), %rax
    000012e4: 	leaq	0x1(%rax), %rsi
    000012e8: 	callq	_ZdlPvm@PLT # Offset: 4840
.Ltmp3368:
    000012ed: 	movq	0x20(%rsp), %rbx
    000012f2: 	leaq	0x70(%rsp), %rdi
    000012f7: 	leaq	DATAat0x4d2b6(%rip), %rdx
    000012fe: 	movq	%rbx, %rsi
    00001301: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4865
    00001306: 	movl	iterations(%rip), %edx
    0000130c: 	movq	0x70(%rsp), %rdi
    00001311: 	xorl	%r8d, %r8d
    00001314: 	xorl	%ecx, %ecx
    00001316: 	movl	$0x1f40, %esi
    0000131b: 	callq	_Z9summarizePKciiii # Offset: 4891
    00001320: 	leaq	DATAat0x4d2bb(%rip), %rdx
    00001327: 	movq	%rbx, %rsi
    0000132a: 	movq	%r13, %rdi
    0000132d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4909
    00001332: 	callq	clock@PLT # Offset: 4914
    00001337: 	movl	iterations(%rip), %ecx
    0000133d: 	xorl	%r14d, %r14d
    00001340: 	leaq	0x7cf0(%r12), %rbx
    00001348: 	movq	%rax, start_time(%rip)
    0000134f: 	testl	%ecx, %ecx
    00001351: 	jle	.Ltmp3369 # Offset: 4945
    00001357: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3372:
    00001360: 	movl	0x110(%rsp), %edx
    00001367: 	movq	%r12, %rax
    0000136a: 	pxor	%xmm0, %xmm0
    0000136e: 	subl	0x114(%rsp), %edx
    00001375: 	addl	%edx, %edx
    00001377: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3370:
    00001380: 	movdqa	(%rax), %xmm1
    00001384: 	movdqu	0x4(%rax), %xmm6
    00001389: 	addq	$0x10, %rax
    0000138d: 	psubd	%xmm6, %xmm1
    00001391: 	paddd	%xmm1, %xmm0
    00001395: 	paddd	%xmm1, %xmm0
    00001399: 	cmpq	%rax, %rbx
    0000139c: 	jne	.Ltmp3370 # Offset: 5020
    0000139e: 	movq	0x7e04(%rsp), %xmm2
    000013a7: 	movdqa	%xmm0, %xmm1
    000013ab: 	psrldq	$0x8, %xmm1
    000013b0: 	paddd	%xmm1, %xmm0
    000013b4: 	movq	0x7e00(%rsp), %xmm1
    000013bd: 	psubd	%xmm2, %xmm1
    000013c1: 	movdqa	%xmm0, %xmm2
    000013c5: 	psrldq	$0x4, %xmm2
    000013ca: 	paddd	%xmm2, %xmm0
    000013ce: 	paddd	%xmm1, %xmm1
    000013d2: 	movd	%xmm0, %eax
    000013d6: 	addl	%edx, %eax
    000013d8: 	pshufd	$0xe5, %xmm1, %xmm5
    000013dd: 	movd	%xmm1, %edx
    000013e1: 	movd	%xmm5, %esi
    000013e5: 	addl	%esi, %edx
    000013e7: 	addl	%edx, %eax
    000013e9: 	movl	0x7e08(%rsp), %edx
    000013f0: 	subl	0x7e0c(%rsp), %edx
    000013f7: 	leal	(%rax,%rdx,2), %eax
    000013fa: 	testl	%eax, %eax
    000013fc: 	jne	.Ltmp3371 # Offset: 5116
.Ltmp3541:
    00001402: 	addl	$0x1, %r14d
    00001406: 	cmpl	%ecx, %r14d
    00001409: 	jl	.Ltmp3372 # Offset: 5129
.Ltmp3369:
    0000140f: 	movq	%r13, %rsi
    00001412: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001419: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 5145
    0000141e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001425: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000142c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001433: 	je	.Ltmp3373 # Offset: 5171
.Ltmp3576:
    00001439: 	movq	-0x20(%rax), %r14
    0000143d: 	callq	clock@PLT # Offset: 5181
    00001442: 	pxor	%xmm0, %xmm0
    00001446: 	movq	%rax, end_time(%rip)
    0000144d: 	movq	%r14, %rdi
    00001450: 	subq	start_time(%rip), %rax
    00001457: 	cvtsi2sd	%rax, %xmm0
    0000145c: 	divsd	DATAat0x4d640(%rip), %xmm0
    00001464: 	callq	_Z13record_resultdPKc # Offset: 5220
    00001469: 	movq	0xf0(%rsp), %rdi
    00001471: 	cmpq	0x18(%rsp), %rdi
    00001476: 	je	.Ltmp3374 # Offset: 5238
    00001478: 	movq	0x100(%rsp), %rax
    00001480: 	leaq	0x1(%rax), %rsi
    00001484: 	callq	_ZdlPvm@PLT # Offset: 5252
.Ltmp3374:
    00001489: 	movq	0x20(%rsp), %rsi
    0000148e: 	leaq	DATAat0x4d2ca(%rip), %rdx
    00001495: 	movq	%r13, %rdi
    00001498: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5272
    0000149d: 	callq	clock@PLT # Offset: 5277
    000014a2: 	movl	iterations(%rip), %ecx
    000014a8: 	xorl	%r14d, %r14d
    000014ab: 	leaq	0x7cf0(%r12), %rbx
    000014b3: 	movq	%rax, start_time(%rip)
    000014ba: 	testl	%ecx, %ecx
    000014bc: 	jle	.Ltmp3375 # Offset: 5308
    000014c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3378:
    000014c8: 	movl	0x110(%rsp), %edx
    000014cf: 	movq	%r12, %rax
    000014d2: 	pxor	%xmm0, %xmm0
    000014d6: 	subl	0x114(%rsp), %edx
    000014dd: 	addl	%edx, %edx
    000014df: 	nop # Size: 1
.Ltmp3376:
    000014e0: 	movdqa	(%rax), %xmm1
    000014e4: 	movdqu	0x4(%rax), %xmm4
    000014e9: 	addq	$0x10, %rax
    000014ed: 	psubd	%xmm4, %xmm1
    000014f1: 	paddd	%xmm1, %xmm0
    000014f5: 	paddd	%xmm1, %xmm0
    000014f9: 	cmpq	%rax, %rbx
    000014fc: 	jne	.Ltmp3376 # Offset: 5372
    000014fe: 	movq	0x7e04(%rsp), %xmm2
    00001507: 	movdqa	%xmm0, %xmm1
    0000150b: 	psrldq	$0x8, %xmm1
    00001510: 	paddd	%xmm1, %xmm0
    00001514: 	movq	0x7e00(%rsp), %xmm1
    0000151d: 	psubd	%xmm2, %xmm1
    00001521: 	movdqa	%xmm0, %xmm2
    00001525: 	psrldq	$0x4, %xmm2
    0000152a: 	paddd	%xmm2, %xmm0
    0000152e: 	paddd	%xmm1, %xmm1
    00001532: 	movd	%xmm0, %eax
    00001536: 	addl	%edx, %eax
    00001538: 	pshufd	$0xe5, %xmm1, %xmm6
    0000153d: 	movd	%xmm1, %edx
    00001541: 	movd	%xmm6, %esi
    00001545: 	addl	%esi, %edx
    00001547: 	addl	%edx, %eax
    00001549: 	movl	0x7e08(%rsp), %edx
    00001550: 	subl	0x7e0c(%rsp), %edx
    00001557: 	leal	(%rax,%rdx,2), %eax
    0000155a: 	testl	%eax, %eax
    0000155c: 	jne	.Ltmp3377 # Offset: 5468
.Ltmp3540:
    00001562: 	addl	$0x1, %r14d
    00001566: 	cmpl	%ecx, %r14d
    00001569: 	jl	.Ltmp3378 # Offset: 5481
.Ltmp3375:
    0000156f: 	movq	%r13, %rsi
    00001572: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001579: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 5497
    0000157e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001585: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000158c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001593: 	je	.Ltmp3379 # Offset: 5523
.Ltmp3575:
    00001599: 	movq	-0x20(%rax), %r14
    0000159d: 	callq	clock@PLT # Offset: 5533
    000015a2: 	pxor	%xmm0, %xmm0
    000015a6: 	movq	%rax, end_time(%rip)
    000015ad: 	movq	%r14, %rdi
    000015b0: 	subq	start_time(%rip), %rax
    000015b7: 	cvtsi2sd	%rax, %xmm0
    000015bc: 	divsd	DATAat0x4d640(%rip), %xmm0
    000015c4: 	callq	_Z13record_resultdPKc # Offset: 5572
    000015c9: 	movq	0xf0(%rsp), %rdi
    000015d1: 	cmpq	0x18(%rsp), %rdi
    000015d6: 	je	.Ltmp3380 # Offset: 5590
    000015d8: 	movq	0x100(%rsp), %rax
    000015e0: 	leaq	0x1(%rax), %rsi
    000015e4: 	callq	_ZdlPvm@PLT # Offset: 5604
.Ltmp3380:
    000015e9: 	movq	0x20(%rsp), %rsi
    000015ee: 	leaq	DATAat0x4d2de(%rip), %rdx
    000015f5: 	movq	%r13, %rdi
    000015f8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5624
    000015fd: 	movq	%r13, %rcx
    00001600: 	movl	%ebp, %edx
    00001602: 	movl	$0x1f40, %esi
    00001607: 	movq	%r12, %rdi
    0000160a: 	callq	_Z20test_CSE2_add_inlineIi14custom_cse_addIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5642
    0000160f: 	movq	0xf0(%rsp), %rdi
    00001617: 	cmpq	0x18(%rsp), %rdi
    0000161c: 	je	.Ltmp3381 # Offset: 5660
    0000161e: 	movq	0x100(%rsp), %rax
    00001626: 	leaq	0x1(%rax), %rsi
    0000162a: 	callq	_ZdlPvm@PLT # Offset: 5674
.Ltmp3381:
    0000162f: 	movq	0x20(%rsp), %rsi
    00001634: 	leaq	DATAat0x4d2f0(%rip), %rdx
    0000163b: 	movq	%r13, %rdi
    0000163e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5694
    00001643: 	callq	clock@PLT # Offset: 5699
    00001648: 	movl	iterations(%rip), %ecx
    0000164e: 	movq	%rax, start_time(%rip)
    00001655: 	testl	%ecx, %ecx
    00001657: 	jle	.Ltmp3382 # Offset: 5719
    0000165d: 	movd	%ebp, %xmm4
    00001661: 	xorl	%r14d, %r14d
    00001664: 	leaq	0x7cf0(%r12), %rbx
    0000166c: 	pshufd	$0x0, %xmm4, %xmm4
    00001671: 	movaps	%xmm4, (%rsp)
    00001675: 	movd	%ebp, %xmm4
    00001679: 	pshufd	$0xe0, %xmm4, %xmm4
    0000167e: 	movq	%xmm4, 0x10(%rsp)
    00001684: 	nopl	(%rax) # Size: 4
.Ltmp3385:
    00001688: 	movl	0x110(%rsp), %edx
    0000168f: 	movl	0x114(%rsp), %esi
    00001696: 	pxor	%xmm0, %xmm0
    0000169a: 	leal	(%rdx,%rsi), %eax
    0000169d: 	movl	%edx, %edi
    0000169f: 	addl	%ebp, %eax
    000016a1: 	subl	%esi, %edi
    000016a3: 	leal	(%rdx,%rax,2), %edx
    000016a6: 	leal	(%rsi,%rax,2), %eax
    000016a9: 	addl	%edi, %edx
    000016ab: 	subl	%eax, %edx
    000016ad: 	movq	%r12, %rax
.Ltmp3383:
    000016b0: 	movdqu	0x4(%rax), %xmm3
    000016b5: 	movdqa	(%rax), %xmm2
    000016b9: 	addq	$0x10, %rax
    000016bd: 	paddd	-0x10(%rax), %xmm3
    000016c2: 	paddd	(%rsp), %xmm3
    000016c7: 	movdqu	-0xc(%rax), %xmm1
    000016cc: 	paddd	%xmm3, %xmm2
    000016d0: 	paddd	%xmm3, %xmm2
    000016d4: 	paddd	%xmm3, %xmm1
    000016d8: 	paddd	%xmm3, %xmm1
    000016dc: 	paddd	%xmm2, %xmm0
    000016e0: 	psubd	%xmm1, %xmm0
    000016e4: 	paddd	%xmm2, %xmm0
    000016e8: 	psubd	%xmm1, %xmm0
    000016ec: 	cmpq	%rax, %rbx
    000016ef: 	jne	.Ltmp3383 # Offset: 5871
    000016f1: 	movq	0x7e04(%rsp), %xmm2
    000016fa: 	movq	0x10(%rsp), %xmm7
    00001700: 	movdqa	%xmm0, %xmm1
    00001704: 	movq	0x7e00(%rsp), %xmm4
    0000170d: 	psrldq	$0x8, %xmm1
    00001712: 	movl	0x7e08(%rsp), %edi
    00001719: 	movdqa	%xmm2, %xmm3
    0000171d: 	paddd	%xmm1, %xmm0
    00001721: 	paddd	%xmm4, %xmm3
    00001725: 	paddd	%xmm7, %xmm3
    00001729: 	movdqa	%xmm3, %xmm1
    0000172d: 	paddd	%xmm4, %xmm1
    00001731: 	psubd	%xmm2, %xmm4
    00001735: 	paddd	%xmm3, %xmm2
    00001739: 	paddd	%xmm3, %xmm1
    0000173d: 	paddd	%xmm3, %xmm2
    00001741: 	paddd	%xmm4, %xmm1
    00001745: 	psubd	%xmm2, %xmm1
    00001749: 	movdqa	%xmm0, %xmm2
    0000174d: 	psrldq	$0x4, %xmm2
    00001752: 	paddd	%xmm2, %xmm0
    00001756: 	movd	%xmm0, %eax
    0000175a: 	pshufd	$0xe5, %xmm1, %xmm5
    0000175f: 	movd	%xmm5, %esi
    00001763: 	addl	%edx, %eax
    00001765: 	movd	%xmm1, %edx
    00001769: 	addl	%esi, %edx
    0000176b: 	movl	0x7e0c(%rsp), %esi
    00001772: 	addl	%edx, %eax
    00001774: 	leal	(%rsi,%rdi), %edx
    00001777: 	addl	%ebp, %edx
    00001779: 	leal	(%rdi,%rdx,2), %edi
    0000177c: 	leal	(%rsi,%rdx,2), %edx
    0000177f: 	leal	(%rax,%rdi,2), %eax
    00001782: 	subl	%edx, %eax
    00001784: 	cmpl	%edx, %eax
    00001786: 	jne	.Ltmp3384 # Offset: 6022
.Ltmp3539:
    0000178c: 	addl	$0x1, %r14d
    00001790: 	cmpl	%ecx, %r14d
    00001793: 	jl	.Ltmp3385 # Offset: 6035
.Ltmp3382:
    00001799: 	movq	%r13, %rsi
    0000179c: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000017a3: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 6051
    000017a8: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000017af: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000017b6: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000017bd: 	je	.Ltmp3386 # Offset: 6077
.Ltmp3574:
    000017c3: 	movq	-0x20(%rax), %r14
    000017c7: 	callq	clock@PLT # Offset: 6087
    000017cc: 	pxor	%xmm0, %xmm0
    000017d0: 	movq	%rax, end_time(%rip)
    000017d7: 	movq	%r14, %rdi
    000017da: 	subq	start_time(%rip), %rax
    000017e1: 	cvtsi2sd	%rax, %xmm0
    000017e6: 	divsd	DATAat0x4d640(%rip), %xmm0
    000017ee: 	callq	_Z13record_resultdPKc # Offset: 6126
    000017f3: 	movq	0xf0(%rsp), %rdi
    000017fb: 	cmpq	0x18(%rsp), %rdi
    00001800: 	je	.Ltmp3387 # Offset: 6144
    00001802: 	movq	0x100(%rsp), %rax
    0000180a: 	leaq	0x1(%rax), %rsi
    0000180e: 	callq	_ZdlPvm@PLT # Offset: 6158
.Ltmp3387:
    00001813: 	movq	0x20(%rsp), %rsi
    00001818: 	leaq	DATAat0x4d30a(%rip), %rdx
    0000181f: 	movq	%r13, %rdi
    00001822: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6178
    00001827: 	movq	%r13, %rcx
    0000182a: 	movl	%ebp, %edx
    0000182c: 	movl	$0x1f40, %esi
    00001831: 	movq	%r12, %rdi
    00001834: 	callq	_Z9test_CSE2Ii14custom_cse_addIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6196
    00001839: 	movq	0xf0(%rsp), %rdi
    00001841: 	cmpq	0x18(%rsp), %rdi
    00001846: 	je	.Ltmp3388 # Offset: 6214
    00001848: 	movq	0x100(%rsp), %rax
    00001850: 	leaq	0x1(%rax), %rsi
    00001854: 	callq	_ZdlPvm@PLT # Offset: 6228
.Ltmp3388:
    00001859: 	movq	0x20(%rsp), %rsi
    0000185e: 	leaq	DATAat0x4d315(%rip), %rdx
    00001865: 	movq	%r13, %rdi
    00001868: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6248
    0000186d: 	callq	clock@PLT # Offset: 6253
    00001872: 	movl	iterations(%rip), %ecx
    00001878: 	xorl	%r14d, %r14d
    0000187b: 	leaq	0x7cf0(%r12), %rbx
    00001883: 	movq	%rax, start_time(%rip)
    0000188a: 	testl	%ecx, %ecx
    0000188c: 	jle	.Ltmp3389 # Offset: 6284
    00001892: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3392:
    00001898: 	movl	0x110(%rsp), %edx
    0000189f: 	movq	%r12, %rax
    000018a2: 	pxor	%xmm0, %xmm0
    000018a6: 	subl	0x114(%rsp), %edx
    000018ad: 	addl	%edx, %edx
    000018af: 	nop # Size: 1
.Ltmp3390:
    000018b0: 	movdqa	(%rax), %xmm1
    000018b4: 	movdqu	0x4(%rax), %xmm5
    000018b9: 	addq	$0x10, %rax
    000018bd: 	psubd	%xmm5, %xmm1
    000018c1: 	paddd	%xmm1, %xmm0
    000018c5: 	paddd	%xmm1, %xmm0
    000018c9: 	cmpq	%rax, %rbx
    000018cc: 	jne	.Ltmp3390 # Offset: 6348
    000018ce: 	movq	0x7e04(%rsp), %xmm2
    000018d7: 	movdqa	%xmm0, %xmm1
    000018db: 	psrldq	$0x8, %xmm1
    000018e0: 	paddd	%xmm1, %xmm0
    000018e4: 	movq	0x7e00(%rsp), %xmm1
    000018ed: 	psubd	%xmm2, %xmm1
    000018f1: 	movdqa	%xmm0, %xmm2
    000018f5: 	psrldq	$0x4, %xmm2
    000018fa: 	paddd	%xmm2, %xmm0
    000018fe: 	paddd	%xmm1, %xmm1
    00001902: 	movd	%xmm0, %eax
    00001906: 	addl	%edx, %eax
    00001908: 	pshufd	$0xe5, %xmm1, %xmm6
    0000190d: 	movd	%xmm1, %edx
    00001911: 	movd	%xmm6, %esi
    00001915: 	addl	%esi, %edx
    00001917: 	addl	%edx, %eax
    00001919: 	movl	0x7e08(%rsp), %edx
    00001920: 	subl	0x7e0c(%rsp), %edx
    00001927: 	leal	(%rax,%rdx,2), %eax
    0000192a: 	testl	%eax, %eax
    0000192c: 	jne	.Ltmp3391 # Offset: 6444
.Ltmp3538:
    00001932: 	addl	$0x1, %r14d
    00001936: 	cmpl	%ecx, %r14d
    00001939: 	jl	.Ltmp3392 # Offset: 6457
.Ltmp3389:
    0000193f: 	movq	%r13, %rsi
    00001942: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001949: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 6473
    0000194e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001955: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000195c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001963: 	je	.Ltmp3393 # Offset: 6499
.Ltmp3573:
    00001969: 	movq	-0x20(%rax), %r14
    0000196d: 	callq	clock@PLT # Offset: 6509
    00001972: 	pxor	%xmm0, %xmm0
    00001976: 	movq	%rax, end_time(%rip)
    0000197d: 	movq	%r14, %rdi
    00001980: 	subq	start_time(%rip), %rax
    00001987: 	cvtsi2sd	%rax, %xmm0
    0000198c: 	divsd	DATAat0x4d640(%rip), %xmm0
    00001994: 	callq	_Z13record_resultdPKc # Offset: 6548
    00001999: 	movq	0xf0(%rsp), %rdi
    000019a1: 	cmpq	0x18(%rsp), %rdi
    000019a6: 	je	.Ltmp3394 # Offset: 6566
    000019a8: 	movq	0x100(%rsp), %rax
    000019b0: 	leaq	0x1(%rax), %rsi
    000019b4: 	callq	_ZdlPvm@PLT # Offset: 6580
.Ltmp3394:
    000019b9: 	movq	0x20(%rsp), %rsi
    000019be: 	leaq	DATAat0x4d32e(%rip), %rdx
    000019c5: 	movq	%r13, %rdi
    000019c8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6600
    000019cd: 	callq	clock@PLT # Offset: 6605
    000019d2: 	movl	iterations(%rip), %ecx
    000019d8: 	movq	%rax, start_time(%rip)
    000019df: 	testl	%ecx, %ecx
    000019e1: 	jle	.Ltmp3395 # Offset: 6625
    000019e7: 	movd	%ebp, %xmm4
    000019eb: 	xorl	%r14d, %r14d
    000019ee: 	leaq	0x7cf0(%r12), %rbx
    000019f6: 	pshufd	$0x0, %xmm4, %xmm4
    000019fb: 	movaps	%xmm4, (%rsp)
    000019ff: 	movd	%ebp, %xmm4
    00001a03: 	pshufd	$0xe0, %xmm4, %xmm4
    00001a08: 	movq	%xmm4, 0x10(%rsp)
    00001a0e: 	nop # Size: 2
.Ltmp3398:
    00001a10: 	movl	0x110(%rsp), %edx
    00001a17: 	movl	0x114(%rsp), %eax
    00001a1e: 	pxor	%xmm0, %xmm0
    00001a22: 	movl	%edx, %edi
    00001a24: 	subl	%eax, %edi
    00001a26: 	leal	(%rbp,%rdi), %esi
    00001a2a: 	leal	(%rdx,%rsi,2), %edx
    00001a2d: 	leal	(%rax,%rsi,2), %eax
    00001a30: 	addl	%edi, %edx
    00001a32: 	subl	%eax, %edx
    00001a34: 	movq	%r12, %rax
    00001a37: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3396:
    00001a40: 	movdqa	(%rax), %xmm2
    00001a44: 	movdqu	0x4(%rax), %xmm6
    00001a49: 	addq	$0x10, %rax
    00001a4d: 	movdqa	%xmm2, %xmm3
    00001a51: 	movdqa	%xmm6, %xmm1
    00001a55: 	psubd	%xmm6, %xmm3
    00001a59: 	paddd	(%rsp), %xmm3
    00001a5e: 	paddd	%xmm3, %xmm2
    00001a62: 	paddd	%xmm3, %xmm1
    00001a66: 	paddd	%xmm3, %xmm2
    00001a6a: 	paddd	%xmm3, %xmm1
    00001a6e: 	paddd	%xmm2, %xmm0
    00001a72: 	psubd	%xmm1, %xmm0
    00001a76: 	paddd	%xmm2, %xmm0
    00001a7a: 	psubd	%xmm1, %xmm0
    00001a7e: 	cmpq	%rax, %rbx
    00001a81: 	jne	.Ltmp3396 # Offset: 6785
    00001a83: 	movq	0x7e00(%rsp), %xmm2
    00001a8c: 	movq	0x10(%rsp), %xmm4
    00001a92: 	movdqa	%xmm0, %xmm1
    00001a96: 	movq	0x7e04(%rsp), %xmm3
    00001a9f: 	psrldq	$0x8, %xmm1
    00001aa4: 	movl	0x7e08(%rsp), %edi
    00001aab: 	movdqa	%xmm2, %xmm5
    00001aaf: 	paddd	%xmm1, %xmm0
    00001ab3: 	psubd	%xmm3, %xmm5
    00001ab7: 	paddd	%xmm5, %xmm4
    00001abb: 	paddd	%xmm4, %xmm2
    00001abf: 	paddd	%xmm4, %xmm3
    00001ac3: 	movdqa	%xmm2, %xmm1
    00001ac7: 	paddd	%xmm4, %xmm3
    00001acb: 	movdqa	%xmm0, %xmm2
    00001acf: 	paddd	%xmm4, %xmm1
    00001ad3: 	psrldq	$0x4, %xmm2
    00001ad8: 	paddd	%xmm2, %xmm0
    00001adc: 	movd	%xmm0, %eax
    00001ae0: 	paddd	%xmm5, %xmm1
    00001ae4: 	addl	%edx, %eax
    00001ae6: 	psubd	%xmm3, %xmm1
    00001aea: 	movd	%xmm1, %edx
    00001aee: 	pshufd	$0xe5, %xmm1, %xmm7
    00001af3: 	movd	%xmm7, %esi
    00001af7: 	addl	%esi, %edx
    00001af9: 	movl	0x7e0c(%rsp), %esi
    00001b00: 	addl	%edx, %eax
    00001b02: 	movl	%edi, %edx
    00001b04: 	subl	%esi, %edx
    00001b06: 	addl	%ebp, %edx
    00001b08: 	leal	(%rdi,%rdx,2), %edi
    00001b0b: 	leal	(%rsi,%rdx,2), %edx
    00001b0e: 	leal	(%rax,%rdi,2), %eax
    00001b11: 	subl	%edx, %eax
    00001b13: 	cmpl	%edx, %eax
    00001b15: 	jne	.Ltmp3397 # Offset: 6933
.Ltmp3537:
    00001b1b: 	addl	$0x1, %r14d
    00001b1f: 	cmpl	%ecx, %r14d
    00001b22: 	jl	.Ltmp3398 # Offset: 6946
.Ltmp3395:
    00001b28: 	movq	%r13, %rsi
    00001b2b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001b32: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 6962
    00001b37: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001b3e: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001b45: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001b4c: 	je	.Ltmp3399 # Offset: 6988
.Ltmp3572:
    00001b52: 	movq	-0x20(%rax), %r14
    00001b56: 	callq	clock@PLT # Offset: 6998
    00001b5b: 	pxor	%xmm0, %xmm0
    00001b5f: 	movq	%rax, end_time(%rip)
    00001b66: 	movq	%r14, %rdi
    00001b69: 	subq	start_time(%rip), %rax
    00001b70: 	cvtsi2sd	%rax, %xmm0
    00001b75: 	divsd	DATAat0x4d640(%rip), %xmm0
    00001b7d: 	callq	_Z13record_resultdPKc # Offset: 7037
    00001b82: 	movq	0xf0(%rsp), %rdi
    00001b8a: 	cmpq	0x18(%rsp), %rdi
    00001b8f: 	je	.Ltmp3400 # Offset: 7055
    00001b91: 	movq	0x100(%rsp), %rax
    00001b99: 	leaq	0x1(%rax), %rsi
    00001b9d: 	callq	_ZdlPvm@PLT # Offset: 7069
.Ltmp3400:
    00001ba2: 	movq	0x20(%rsp), %rsi
    00001ba7: 	leaq	DATAat0x4d33e(%rip), %rdx
    00001bae: 	movq	%r13, %rdi
    00001bb1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7089
    00001bb6: 	callq	clock@PLT # Offset: 7094
    00001bbb: 	movl	iterations(%rip), %ecx
    00001bc1: 	xorl	%r14d, %r14d
    00001bc4: 	leaq	0x7cf0(%r12), %rbx
    00001bcc: 	movq	%rax, start_time(%rip)
    00001bd3: 	testl	%ecx, %ecx
    00001bd5: 	jle	.Ltmp3401 # Offset: 7125
    00001bdb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3404:
    00001be0: 	movl	0x110(%rsp), %edx
    00001be7: 	movq	%r12, %rax
    00001bea: 	pxor	%xmm0, %xmm0
    00001bee: 	subl	0x114(%rsp), %edx
    00001bf5: 	addl	%edx, %edx
    00001bf7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3402:
    00001c00: 	movdqa	(%rax), %xmm1
    00001c04: 	movdqu	0x4(%rax), %xmm7
    00001c09: 	addq	$0x10, %rax
    00001c0d: 	psubd	%xmm7, %xmm1
    00001c11: 	paddd	%xmm1, %xmm0
    00001c15: 	paddd	%xmm1, %xmm0
    00001c19: 	cmpq	%rax, %rbx
    00001c1c: 	jne	.Ltmp3402 # Offset: 7196
    00001c1e: 	movq	0x7e04(%rsp), %xmm2
    00001c27: 	movdqa	%xmm0, %xmm1
    00001c2b: 	psrldq	$0x8, %xmm1
    00001c30: 	paddd	%xmm1, %xmm0
    00001c34: 	movq	0x7e00(%rsp), %xmm1
    00001c3d: 	psubd	%xmm2, %xmm1
    00001c41: 	movdqa	%xmm0, %xmm2
    00001c45: 	psrldq	$0x4, %xmm2
    00001c4a: 	paddd	%xmm2, %xmm0
    00001c4e: 	paddd	%xmm1, %xmm1
    00001c52: 	movd	%xmm0, %eax
    00001c56: 	addl	%edx, %eax
    00001c58: 	pshufd	$0xe5, %xmm1, %xmm5
    00001c5d: 	movd	%xmm1, %edx
    00001c61: 	movd	%xmm5, %esi
    00001c65: 	addl	%esi, %edx
    00001c67: 	addl	%edx, %eax
    00001c69: 	movl	0x7e08(%rsp), %edx
    00001c70: 	subl	0x7e0c(%rsp), %edx
    00001c77: 	leal	(%rax,%rdx,2), %eax
    00001c7a: 	testl	%eax, %eax
    00001c7c: 	jne	.Ltmp3403 # Offset: 7292
.Ltmp3536:
    00001c82: 	addl	$0x1, %r14d
    00001c86: 	cmpl	%ecx, %r14d
    00001c89: 	jl	.Ltmp3404 # Offset: 7305
.Ltmp3401:
    00001c8f: 	movq	%r13, %rsi
    00001c92: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001c99: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 7321
    00001c9e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001ca5: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001cac: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001cb3: 	je	.Ltmp3405 # Offset: 7347
.Ltmp3571:
    00001cb9: 	movq	-0x20(%rax), %r14
    00001cbd: 	callq	clock@PLT # Offset: 7357
    00001cc2: 	pxor	%xmm0, %xmm0
    00001cc6: 	movq	%rax, end_time(%rip)
    00001ccd: 	movq	%r14, %rdi
    00001cd0: 	subq	start_time(%rip), %rax
    00001cd7: 	cvtsi2sd	%rax, %xmm0
    00001cdc: 	divsd	DATAat0x4d640(%rip), %xmm0
    00001ce4: 	callq	_Z13record_resultdPKc # Offset: 7396
    00001ce9: 	movq	0xf0(%rsp), %rdi
    00001cf1: 	cmpq	0x18(%rsp), %rdi
    00001cf6: 	je	.Ltmp3406 # Offset: 7414
    00001cf8: 	movq	0x100(%rsp), %rax
    00001d00: 	leaq	0x1(%rax), %rsi
    00001d04: 	callq	_ZdlPvm@PLT # Offset: 7428
.Ltmp3406:
    00001d09: 	movq	0x20(%rsp), %rsi
    00001d0e: 	leaq	DATAat0x4d357(%rip), %rdx
    00001d15: 	movq	%r13, %rdi
    00001d18: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7448
    00001d1d: 	movq	%r13, %rcx
    00001d20: 	movl	%ebp, %edx
    00001d22: 	movl	$0x1f40, %esi
    00001d27: 	movq	%r12, %rdi
    00001d2a: 	callq	_Z9test_CSE2Ii14custom_cse_mulIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7466
    00001d2f: 	movq	0xf0(%rsp), %rdi
    00001d37: 	cmpq	0x18(%rsp), %rdi
    00001d3c: 	je	.Ltmp3407 # Offset: 7484
    00001d3e: 	movq	0x100(%rsp), %rax
    00001d46: 	leaq	0x1(%rax), %rsi
    00001d4a: 	callq	_ZdlPvm@PLT # Offset: 7498
.Ltmp3407:
    00001d4f: 	movq	0x20(%rsp), %rsi
    00001d54: 	leaq	DATAat0x4d367(%rip), %rdx
    00001d5b: 	movq	%r13, %rdi
    00001d5e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7518
    00001d63: 	callq	clock@PLT # Offset: 7523
    00001d68: 	movl	iterations(%rip), %ecx
    00001d6e: 	xorl	%r14d, %r14d
    00001d71: 	leaq	0x7cf0(%r12), %rbx
    00001d79: 	movq	%rax, start_time(%rip)
    00001d80: 	testl	%ecx, %ecx
    00001d82: 	jle	.Ltmp3408 # Offset: 7554
    00001d88: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3411:
    00001d90: 	movl	0x110(%rsp), %edx
    00001d97: 	movq	%r12, %rax
    00001d9a: 	pxor	%xmm0, %xmm0
    00001d9e: 	subl	0x114(%rsp), %edx
    00001da5: 	addl	%edx, %edx
    00001da7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3409:
    00001db0: 	movdqa	(%rax), %xmm1
    00001db4: 	movdqu	0x4(%rax), %xmm5
    00001db9: 	addq	$0x10, %rax
    00001dbd: 	psubd	%xmm5, %xmm1
    00001dc1: 	paddd	%xmm1, %xmm0
    00001dc5: 	paddd	%xmm1, %xmm0
    00001dc9: 	cmpq	%rbx, %rax
    00001dcc: 	jne	.Ltmp3409 # Offset: 7628
    00001dce: 	movq	0x7e04(%rsp), %xmm2
    00001dd7: 	movdqa	%xmm0, %xmm1
    00001ddb: 	psrldq	$0x8, %xmm1
    00001de0: 	paddd	%xmm1, %xmm0
    00001de4: 	movq	0x7e00(%rsp), %xmm1
    00001ded: 	psubd	%xmm2, %xmm1
    00001df1: 	movdqa	%xmm0, %xmm2
    00001df5: 	psrldq	$0x4, %xmm2
    00001dfa: 	paddd	%xmm2, %xmm0
    00001dfe: 	paddd	%xmm1, %xmm1
    00001e02: 	movd	%xmm0, %eax
    00001e06: 	addl	%edx, %eax
    00001e08: 	pshufd	$0xe5, %xmm1, %xmm6
    00001e0d: 	movd	%xmm1, %edx
    00001e11: 	movd	%xmm6, %esi
    00001e15: 	addl	%esi, %edx
    00001e17: 	addl	%edx, %eax
    00001e19: 	movl	0x7e08(%rsp), %edx
    00001e20: 	subl	0x7e0c(%rsp), %edx
    00001e27: 	leal	(%rax,%rdx,2), %eax
    00001e2a: 	testl	%eax, %eax
    00001e2c: 	jne	.Ltmp3410 # Offset: 7724
.Ltmp3535:
    00001e32: 	addl	$0x1, %r14d
    00001e36: 	cmpl	%ecx, %r14d
    00001e39: 	jl	.Ltmp3411 # Offset: 7737
.Ltmp3408:
    00001e3f: 	movq	%r13, %rsi
    00001e42: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001e49: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 7753
    00001e4e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001e55: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001e5c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001e63: 	je	.Ltmp3412 # Offset: 7779
.Ltmp3570:
    00001e69: 	movq	-0x20(%rax), %r14
    00001e6d: 	callq	clock@PLT # Offset: 7789
    00001e72: 	pxor	%xmm0, %xmm0
    00001e76: 	movq	%rax, end_time(%rip)
    00001e7d: 	movq	%r14, %rdi
    00001e80: 	subq	start_time(%rip), %rax
    00001e87: 	cvtsi2sd	%rax, %xmm0
    00001e8c: 	divsd	DATAat0x4d640(%rip), %xmm0
    00001e94: 	callq	_Z13record_resultdPKc # Offset: 7828
    00001e99: 	movq	0xf0(%rsp), %rdi
    00001ea1: 	cmpq	0x18(%rsp), %rdi
    00001ea6: 	je	.Ltmp3413 # Offset: 7846
    00001ea8: 	movq	0x100(%rsp), %rax
    00001eb0: 	leaq	0x1(%rax), %rsi
    00001eb4: 	callq	_ZdlPvm@PLT # Offset: 7860
.Ltmp3413:
    00001eb9: 	movq	0x20(%rsp), %rsi
    00001ebe: 	leaq	DATAat0x4d37e(%rip), %rdx
    00001ec5: 	movq	%r13, %rdi
    00001ec8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7880
    00001ecd: 	callq	clock@PLT # Offset: 7885
    00001ed2: 	movl	iterations(%rip), %r8d
    00001ed9: 	xorl	%ebx, %ebx
    00001edb: 	leaq	0x114(%rsp), %r14
    00001ee3: 	movq	%rax, start_time(%rip)
    00001eea: 	testl	%r8d, %r8d
    00001eed: 	jle	.Ltmp3414 # Offset: 7917
    00001eef: 	nop # Size: 1
.Ltmp3417:
    00001ef0: 	movl	0x110(%rsp), %esi
    00001ef7: 	movl	0x114(%rsp), %edi
    00001efe: 	movl	%esi, %eax
    00001f00: 	cltd
    00001f01: 	idivl	%edi
    00001f03: 	movl	%esi, %edx
    00001f05: 	subl	%edi, %edx
    00001f07: 	addl	%ebp, %eax
    00001f09: 	leal	(%rsi,%rax,2), %ecx
    00001f0c: 	leal	(%rdi,%rax,2), %eax
    00001f0f: 	movq	%r14, %rdi
    00001f12: 	addl	%edx, %ecx
    00001f14: 	subl	%eax, %ecx
    00001f16: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3415:
    00001f20: 	movl	%esi, %r9d
    00001f23: 	movl	(%rdi), %esi
    00001f25: 	addq	$0x4, %rdi
    00001f29: 	movl	%r9d, %eax
    00001f2c: 	cltd
    00001f2d: 	idivl	%esi
    00001f2f: 	addl	%ebp, %eax
    00001f31: 	leal	(%r9,%rax,2), %edx
    00001f35: 	leal	(%rsi,%rax,2), %eax
    00001f38: 	addl	%edx, %ecx
    00001f3a: 	subl	%eax, %ecx
    00001f3c: 	addl	%ecx, %edx
    00001f3e: 	movl	%edx, %ecx
    00001f40: 	subl	%eax, %ecx
    00001f42: 	cmpq	%rdi, %r15
    00001f45: 	jne	.Ltmp3415 # Offset: 8005
    00001f47: 	testl	%ecx, %ecx
    00001f49: 	jne	.Ltmp3416 # Offset: 8009
.Ltmp3534:
    00001f4f: 	addl	$0x1, %ebx
    00001f52: 	cmpl	%r8d, %ebx
    00001f55: 	jl	.Ltmp3417 # Offset: 8021
.Ltmp3414:
    00001f57: 	movq	%r13, %rsi
    00001f5a: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001f61: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 8033
    00001f66: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001f6d: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001f74: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001f7b: 	je	.Ltmp3418 # Offset: 8059
.Ltmp3569:
    00001f81: 	movq	-0x20(%rax), %r14
    00001f85: 	callq	clock@PLT # Offset: 8069
    00001f8a: 	pxor	%xmm0, %xmm0
    00001f8e: 	movq	%rax, end_time(%rip)
    00001f95: 	movq	%r14, %rdi
    00001f98: 	subq	start_time(%rip), %rax
    00001f9f: 	cvtsi2sd	%rax, %xmm0
    00001fa4: 	divsd	DATAat0x4d640(%rip), %xmm0
    00001fac: 	callq	_Z13record_resultdPKc # Offset: 8108
    00001fb1: 	movq	0xf0(%rsp), %rdi
    00001fb9: 	cmpq	0x18(%rsp), %rdi
    00001fbe: 	je	.Ltmp3419 # Offset: 8126
    00001fc0: 	movq	0x100(%rsp), %rax
    00001fc8: 	leaq	0x1(%rax), %rsi
    00001fcc: 	callq	_ZdlPvm@PLT # Offset: 8140
.Ltmp3419:
    00001fd1: 	movq	0x20(%rsp), %rsi
    00001fd6: 	leaq	DATAat0x4d38c(%rip), %rdx
    00001fdd: 	movq	%r13, %rdi
    00001fe0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8160
    00001fe5: 	callq	clock@PLT # Offset: 8165
    00001fea: 	movl	iterations(%rip), %ecx
    00001ff0: 	xorl	%r14d, %r14d
    00001ff3: 	leaq	0x7cf0(%r12), %rbx
    00001ffb: 	movq	%rax, start_time(%rip)
    00002002: 	leaq	DATAat0x4d004(%rip), %r15
    00002009: 	testl	%ecx, %ecx
    0000200b: 	jle	.Ltmp3420 # Offset: 8203
    00002011: 	nopl	(%rax) # Size: 7
.Ltmp3423:
    00002018: 	movl	0x110(%rsp), %edx
    0000201f: 	movq	%r12, %rax
    00002022: 	pxor	%xmm0, %xmm0
    00002026: 	subl	0x114(%rsp), %edx
    0000202d: 	addl	%edx, %edx
    0000202f: 	nop # Size: 1
.Ltmp3421:
    00002030: 	movdqa	(%rax), %xmm1
    00002034: 	movdqu	0x4(%rax), %xmm6
    00002039: 	addq	$0x10, %rax
    0000203d: 	psubd	%xmm6, %xmm1
    00002041: 	paddd	%xmm1, %xmm0
    00002045: 	paddd	%xmm1, %xmm0
    00002049: 	cmpq	%rax, %rbx
    0000204c: 	jne	.Ltmp3421 # Offset: 8268
    0000204e: 	movq	0x7e04(%rsp), %xmm2
    00002057: 	movdqa	%xmm0, %xmm1
    0000205b: 	psrldq	$0x8, %xmm1
    00002060: 	paddd	%xmm1, %xmm0
    00002064: 	movq	0x7e00(%rsp), %xmm1
    0000206d: 	psubd	%xmm2, %xmm1
    00002071: 	movdqa	%xmm0, %xmm2
    00002075: 	psrldq	$0x4, %xmm2
    0000207a: 	paddd	%xmm2, %xmm0
    0000207e: 	paddd	%xmm1, %xmm1
    00002082: 	movd	%xmm0, %eax
    00002086: 	addl	%edx, %eax
    00002088: 	pshufd	$0xe5, %xmm1, %xmm7
    0000208d: 	movd	%xmm1, %edx
    00002091: 	movd	%xmm7, %esi
    00002095: 	addl	%esi, %edx
    00002097: 	addl	%edx, %eax
    00002099: 	movl	0x7e08(%rsp), %edx
    000020a0: 	subl	0x7e0c(%rsp), %edx
    000020a7: 	leal	(%rax,%rdx,2), %eax
    000020aa: 	testl	%eax, %eax
    000020ac: 	jne	.Ltmp3422 # Offset: 8364
.Ltmp3533:
    000020b2: 	addl	$0x1, %r14d
    000020b6: 	cmpl	%ecx, %r14d
    000020b9: 	jl	.Ltmp3423 # Offset: 8377
.Ltmp3420:
    000020bf: 	movq	%r13, %rsi
    000020c2: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000020c9: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 8393
    000020ce: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000020d5: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000020dc: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000020e3: 	je	.Ltmp3424 # Offset: 8419
.Ltmp3568:
    000020e9: 	movq	-0x20(%rax), %r14
    000020ed: 	callq	clock@PLT # Offset: 8429
    000020f2: 	pxor	%xmm0, %xmm0
    000020f6: 	movq	%rax, end_time(%rip)
    000020fd: 	movq	%r14, %rdi
    00002100: 	subq	start_time(%rip), %rax
    00002107: 	cvtsi2sd	%rax, %xmm0
    0000210c: 	divsd	DATAat0x4d640(%rip), %xmm0
    00002114: 	callq	_Z13record_resultdPKc # Offset: 8468
    00002119: 	movq	0xf0(%rsp), %rdi
    00002121: 	cmpq	0x18(%rsp), %rdi
    00002126: 	je	.Ltmp3425 # Offset: 8486
    00002128: 	movq	0x100(%rsp), %rax
    00002130: 	leaq	0x1(%rax), %rsi
    00002134: 	callq	_ZdlPvm@PLT # Offset: 8500
.Ltmp3425:
    00002139: 	movq	0x20(%rsp), %rsi
    0000213e: 	leaq	DATAat0x4d3a0(%rip), %rdx
    00002145: 	movq	%r13, %rdi
    00002148: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8520
    0000214d: 	movq	%r13, %rcx
    00002150: 	movl	%ebp, %edx
    00002152: 	movl	$0x1f40, %esi
    00002157: 	movq	%r12, %rdi
    0000215a: 	callq	_Z9test_CSE2Ii14custom_cse_mixIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 8538
    0000215f: 	movq	0xf0(%rsp), %rdi
    00002167: 	cmpq	0x18(%rsp), %rdi
    0000216c: 	je	.Ltmp3426 # Offset: 8556
    0000216e: 	movq	0x100(%rsp), %rax
    00002176: 	leaq	0x1(%rax), %rsi
    0000217a: 	callq	_ZdlPvm@PLT # Offset: 8570
.Ltmp3426:
    0000217f: 	movq	0x20(%rsp), %rbx
    00002184: 	leaq	0x90(%rsp), %rdi
    0000218c: 	leaq	DATAat0x4d3ab(%rip), %rdx
    00002193: 	movq	%rbx, %rsi
    00002196: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8598
    0000219b: 	movl	iterations(%rip), %edx
    000021a1: 	xorl	%r8d, %r8d
    000021a4: 	xorl	%ecx, %ecx
    000021a6: 	movl	$0x1f40, %esi
    000021ab: 	movq	0x90(%rsp), %rdi
    000021b3: 	callq	_Z9summarizePKciiii # Offset: 8627
    000021b8: 	leaq	DATAat0x4d3b2(%rip), %rdx
    000021bf: 	movq	%rbx, %rsi
    000021c2: 	movq	%r13, %rdi
    000021c5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8645
    000021ca: 	callq	clock@PLT # Offset: 8650
    000021cf: 	movl	iterations(%rip), %ecx
    000021d5: 	xorl	%r14d, %r14d
    000021d8: 	leaq	0x7cf0(%r12), %rbx
    000021e0: 	movq	%rax, start_time(%rip)
    000021e7: 	leaq	DATAat0x4d004(%rip), %r15
    000021ee: 	testl	%ecx, %ecx
    000021f0: 	jle	.Ltmp3427 # Offset: 8688
    000021f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3430:
    00002200: 	movl	0x110(%rsp), %edx
    00002207: 	movq	%r12, %rax
    0000220a: 	pxor	%xmm0, %xmm0
    0000220e: 	subl	0x114(%rsp), %edx
    00002215: 	shll	$0x2, %edx
    00002218: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3428:
    00002220: 	movdqa	(%rax), %xmm1
    00002224: 	movdqu	0x4(%rax), %xmm4
    00002229: 	addq	$0x10, %rax
    0000222d: 	psubd	%xmm4, %xmm1
    00002231: 	paddd	%xmm1, %xmm0
    00002235: 	paddd	%xmm1, %xmm0
    00002239: 	paddd	%xmm1, %xmm0
    0000223d: 	paddd	%xmm1, %xmm0
    00002241: 	cmpq	%rbx, %rax
    00002244: 	jne	.Ltmp3428 # Offset: 8772
    00002246: 	movq	0x7e04(%rsp), %xmm2
    0000224f: 	movdqa	%xmm0, %xmm1
    00002253: 	psrldq	$0x8, %xmm1
    00002258: 	paddd	%xmm1, %xmm0
    0000225c: 	movq	0x7e00(%rsp), %xmm1
    00002265: 	psubd	%xmm2, %xmm1
    00002269: 	movdqa	%xmm0, %xmm2
    0000226d: 	psrldq	$0x4, %xmm2
    00002272: 	paddd	%xmm2, %xmm0
    00002276: 	paddd	%xmm1, %xmm1
    0000227a: 	movd	%xmm0, %eax
    0000227e: 	addl	%edx, %eax
    00002280: 	paddd	%xmm1, %xmm1
    00002284: 	movd	%xmm1, %edx
    00002288: 	pshufd	$0xe5, %xmm1, %xmm5
    0000228d: 	movd	%xmm5, %esi
    00002291: 	addl	%esi, %edx
    00002293: 	addl	%edx, %eax
    00002295: 	movl	0x7e08(%rsp), %edx
    0000229c: 	subl	0x7e0c(%rsp), %edx
    000022a3: 	leal	(%rax,%rdx,4), %eax
    000022a6: 	testl	%eax, %eax
    000022a8: 	jne	.Ltmp3429 # Offset: 8872
.Ltmp3532:
    000022ae: 	addl	$0x1, %r14d
    000022b2: 	cmpl	%ecx, %r14d
    000022b5: 	jl	.Ltmp3430 # Offset: 8885
.Ltmp3427:
    000022bb: 	movq	%r13, %rsi
    000022be: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000022c5: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 8901
    000022ca: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000022d1: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000022d8: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000022df: 	je	.Ltmp3431 # Offset: 8927
.Ltmp3567:
    000022e5: 	movq	-0x20(%rax), %r14
    000022e9: 	callq	clock@PLT # Offset: 8937
    000022ee: 	pxor	%xmm0, %xmm0
    000022f2: 	movq	%rax, end_time(%rip)
    000022f9: 	movq	%r14, %rdi
    000022fc: 	subq	start_time(%rip), %rax
    00002303: 	cvtsi2sd	%rax, %xmm0
    00002308: 	divsd	DATAat0x4d640(%rip), %xmm0
    00002310: 	callq	_Z13record_resultdPKc # Offset: 8976
    00002315: 	movq	0xf0(%rsp), %rdi
    0000231d: 	cmpq	0x18(%rsp), %rdi
    00002322: 	je	.Ltmp3432 # Offset: 8994
    00002324: 	movq	0x100(%rsp), %rax
    0000232c: 	leaq	0x1(%rax), %rsi
    00002330: 	callq	_ZdlPvm@PLT # Offset: 9008
.Ltmp3432:
    00002335: 	movq	0x20(%rsp), %rsi
    0000233a: 	leaq	DATAat0x4d3c1(%rip), %rdx
    00002341: 	movq	%r13, %rdi
    00002344: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9028
    00002349: 	callq	clock@PLT # Offset: 9033
    0000234e: 	movl	iterations(%rip), %ecx
    00002354: 	xorl	%r14d, %r14d
    00002357: 	leaq	0x7cf0(%r12), %rbx
    0000235f: 	movq	%rax, start_time(%rip)
    00002366: 	leaq	DATAat0x4d004(%rip), %r15
    0000236d: 	testl	%ecx, %ecx
    0000236f: 	jle	.Ltmp3433 # Offset: 9071
    00002375: 	nopl	(%rax) # Size: 3
.Ltmp3436:
    00002378: 	movl	0x110(%rsp), %edx
    0000237f: 	movq	%r12, %rax
    00002382: 	pxor	%xmm0, %xmm0
    00002386: 	subl	0x114(%rsp), %edx
    0000238d: 	shll	$0x2, %edx
.Ltmp3434:
    00002390: 	movdqa	(%rax), %xmm1
    00002394: 	movdqu	0x4(%rax), %xmm7
    00002399: 	addq	$0x10, %rax
    0000239d: 	psubd	%xmm7, %xmm1
    000023a1: 	paddd	%xmm1, %xmm0
    000023a5: 	paddd	%xmm1, %xmm0
    000023a9: 	paddd	%xmm1, %xmm0
    000023ad: 	paddd	%xmm1, %xmm0
    000023b1: 	cmpq	%rax, %rbx
    000023b4: 	jne	.Ltmp3434 # Offset: 9140
    000023b6: 	movq	0x7e04(%rsp), %xmm2
    000023bf: 	movdqa	%xmm0, %xmm1
    000023c3: 	psrldq	$0x8, %xmm1
    000023c8: 	paddd	%xmm1, %xmm0
    000023cc: 	movq	0x7e00(%rsp), %xmm1
    000023d5: 	psubd	%xmm2, %xmm1
    000023d9: 	movdqa	%xmm0, %xmm2
    000023dd: 	psrldq	$0x4, %xmm2
    000023e2: 	paddd	%xmm2, %xmm0
    000023e6: 	paddd	%xmm1, %xmm1
    000023ea: 	movd	%xmm0, %eax
    000023ee: 	addl	%edx, %eax
    000023f0: 	paddd	%xmm1, %xmm1
    000023f4: 	movd	%xmm1, %edx
    000023f8: 	pshufd	$0xe5, %xmm1, %xmm6
    000023fd: 	movd	%xmm6, %esi
    00002401: 	addl	%esi, %edx
    00002403: 	addl	%edx, %eax
    00002405: 	movl	0x7e08(%rsp), %edx
    0000240c: 	subl	0x7e0c(%rsp), %edx
    00002413: 	leal	(%rax,%rdx,4), %eax
    00002416: 	testl	%eax, %eax
    00002418: 	jne	.Ltmp3435 # Offset: 9240
.Ltmp3531:
    0000241e: 	addl	$0x1, %r14d
    00002422: 	cmpl	%ecx, %r14d
    00002425: 	jl	.Ltmp3436 # Offset: 9253
.Ltmp3433:
    0000242b: 	movq	%r13, %rsi
    0000242e: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002435: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 9269
    0000243a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002441: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00002448: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000244f: 	je	.Ltmp3437 # Offset: 9295
.Ltmp3566:
    00002455: 	movq	-0x20(%rax), %r14
    00002459: 	callq	clock@PLT # Offset: 9305
    0000245e: 	pxor	%xmm0, %xmm0
    00002462: 	movq	%rax, end_time(%rip)
    00002469: 	movq	%r14, %rdi
    0000246c: 	subq	start_time(%rip), %rax
    00002473: 	cvtsi2sd	%rax, %xmm0
    00002478: 	divsd	DATAat0x4d640(%rip), %xmm0
    00002480: 	callq	_Z13record_resultdPKc # Offset: 9344
    00002485: 	movq	0xf0(%rsp), %rdi
    0000248d: 	cmpq	0x18(%rsp), %rdi
    00002492: 	je	.Ltmp3438 # Offset: 9362
    00002494: 	movq	0x100(%rsp), %rax
    0000249c: 	leaq	0x1(%rax), %rsi
    000024a0: 	callq	_ZdlPvm@PLT # Offset: 9376
.Ltmp3438:
    000024a5: 	movq	0x20(%rsp), %rsi
    000024aa: 	leaq	DATAat0x4d3d5(%rip), %rdx
    000024b1: 	movq	%r13, %rdi
    000024b4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9396
    000024b9: 	movq	%r13, %rcx
    000024bc: 	movl	%ebp, %edx
    000024be: 	movl	$0x1f40, %esi
    000024c3: 	movq	%r12, %rdi
    000024c6: 	callq	_Z20test_CSE4_add_inlineIi14custom_cse_addIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9414
    000024cb: 	movq	0xf0(%rsp), %rdi
    000024d3: 	cmpq	0x18(%rsp), %rdi
    000024d8: 	je	.Ltmp3439 # Offset: 9432
    000024da: 	movq	0x100(%rsp), %rax
    000024e2: 	leaq	0x1(%rax), %rsi
    000024e6: 	callq	_ZdlPvm@PLT # Offset: 9446
.Ltmp3439:
    000024eb: 	movq	0x20(%rsp), %rsi
    000024f0: 	leaq	DATAat0x4d3e7(%rip), %rdx
    000024f7: 	movq	%r13, %rdi
    000024fa: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9466
    000024ff: 	movq	%r13, %rcx
    00002502: 	movl	%ebp, %edx
    00002504: 	movl	$0x1f40, %esi
    00002509: 	movq	%r12, %rdi
    0000250c: 	callq	_Z28test_CSE4_add_inline_flippedIi14custom_cse_addIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9484
    00002511: 	movq	0xf0(%rsp), %rdi
    00002519: 	cmpq	0x18(%rsp), %rdi
    0000251e: 	je	.Ltmp3440 # Offset: 9502
    00002520: 	movq	0x100(%rsp), %rax
    00002528: 	leaq	0x1(%rax), %rsi
    0000252c: 	callq	_ZdlPvm@PLT # Offset: 9516
.Ltmp3440:
    00002531: 	movq	0x20(%rsp), %rsi
    00002536: 	leaq	DATAat0x4d401(%rip), %rdx
    0000253d: 	movq	%r13, %rdi
    00002540: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9536
    00002545: 	movq	%r13, %rcx
    00002548: 	movl	%ebp, %edx
    0000254a: 	movl	$0x1f40, %esi
    0000254f: 	movq	%r12, %rdi
    00002552: 	callq	_Z9test_CSE4Ii14custom_cse_addIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9554
    00002557: 	movq	0xf0(%rsp), %rdi
    0000255f: 	cmpq	0x18(%rsp), %rdi
    00002564: 	je	.Ltmp3441 # Offset: 9572
    00002566: 	movq	0x100(%rsp), %rax
    0000256e: 	leaq	0x1(%rax), %rsi
    00002572: 	callq	_ZdlPvm@PLT # Offset: 9586
.Ltmp3441:
    00002577: 	movq	0x20(%rsp), %rsi
    0000257c: 	leaq	DATAat0x4d40c(%rip), %rdx
    00002583: 	movq	%r13, %rdi
    00002586: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9606
    0000258b: 	callq	clock@PLT # Offset: 9611
    00002590: 	movl	iterations(%rip), %ecx
    00002596: 	xorl	%r14d, %r14d
    00002599: 	leaq	0x7cf0(%r12), %rbx
    000025a1: 	movq	%rax, start_time(%rip)
    000025a8: 	leaq	DATAat0x4d004(%rip), %r15
    000025af: 	testl	%ecx, %ecx
    000025b1: 	jle	.Ltmp3442 # Offset: 9649
    000025b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3445:
    000025c0: 	movl	0x110(%rsp), %edx
    000025c7: 	movq	%r12, %rax
    000025ca: 	pxor	%xmm0, %xmm0
    000025ce: 	subl	0x114(%rsp), %edx
    000025d5: 	shll	$0x2, %edx
    000025d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3443:
    000025e0: 	movdqa	(%rax), %xmm1
    000025e4: 	movdqu	0x4(%rax), %xmm5
    000025e9: 	addq	$0x10, %rax
    000025ed: 	psubd	%xmm5, %xmm1
    000025f1: 	paddd	%xmm1, %xmm0
    000025f5: 	paddd	%xmm1, %xmm0
    000025f9: 	paddd	%xmm1, %xmm0
    000025fd: 	paddd	%xmm1, %xmm0
    00002601: 	cmpq	%rax, %rbx
    00002604: 	jne	.Ltmp3443 # Offset: 9732
    00002606: 	movq	0x7e04(%rsp), %xmm2
    0000260f: 	movdqa	%xmm0, %xmm1
    00002613: 	psrldq	$0x8, %xmm1
    00002618: 	paddd	%xmm1, %xmm0
    0000261c: 	movq	0x7e00(%rsp), %xmm1
    00002625: 	psubd	%xmm2, %xmm1
    00002629: 	movdqa	%xmm0, %xmm2
    0000262d: 	psrldq	$0x4, %xmm2
    00002632: 	paddd	%xmm2, %xmm0
    00002636: 	paddd	%xmm1, %xmm1
    0000263a: 	movd	%xmm0, %eax
    0000263e: 	addl	%edx, %eax
    00002640: 	paddd	%xmm1, %xmm1
    00002644: 	movd	%xmm1, %edx
    00002648: 	pshufd	$0xe5, %xmm1, %xmm7
    0000264d: 	movd	%xmm7, %esi
    00002651: 	addl	%esi, %edx
    00002653: 	addl	%edx, %eax
    00002655: 	movl	0x7e08(%rsp), %edx
    0000265c: 	subl	0x7e0c(%rsp), %edx
    00002663: 	leal	(%rax,%rdx,4), %eax
    00002666: 	testl	%eax, %eax
    00002668: 	jne	.Ltmp3444 # Offset: 9832
.Ltmp3530:
    0000266e: 	addl	$0x1, %r14d
    00002672: 	cmpl	%ecx, %r14d
    00002675: 	jl	.Ltmp3445 # Offset: 9845
.Ltmp3442:
    0000267b: 	movq	%r13, %rsi
    0000267e: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002685: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 9861
    0000268a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002691: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00002698: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000269f: 	je	.Ltmp3446 # Offset: 9887
.Ltmp3565:
    000026a5: 	movq	-0x20(%rax), %r14
    000026a9: 	callq	clock@PLT # Offset: 9897
    000026ae: 	pxor	%xmm0, %xmm0
    000026b2: 	movq	%rax, end_time(%rip)
    000026b9: 	movq	%r14, %rdi
    000026bc: 	subq	start_time(%rip), %rax
    000026c3: 	cvtsi2sd	%rax, %xmm0
    000026c8: 	divsd	DATAat0x4d640(%rip), %xmm0
    000026d0: 	callq	_Z13record_resultdPKc # Offset: 9936
    000026d5: 	movq	0xf0(%rsp), %rdi
    000026dd: 	cmpq	0x18(%rsp), %rdi
    000026e2: 	je	.Ltmp3447 # Offset: 9954
    000026e4: 	movq	0x100(%rsp), %rax
    000026ec: 	leaq	0x1(%rax), %rsi
    000026f0: 	callq	_ZdlPvm@PLT # Offset: 9968
.Ltmp3447:
    000026f5: 	movq	0x20(%rsp), %rsi
    000026fa: 	leaq	DATAat0x4d425(%rip), %rdx
    00002701: 	movq	%r13, %rdi
    00002704: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9988
    00002709: 	movq	%r13, %rcx
    0000270c: 	movl	%ebp, %edx
    0000270e: 	movl	$0x1f40, %esi
    00002713: 	movq	%r12, %rdi
    00002716: 	callq	_Z9test_CSE4Ii14custom_cse_subIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 10006
    0000271b: 	movq	0xf0(%rsp), %rdi
    00002723: 	cmpq	0x18(%rsp), %rdi
    00002728: 	je	.Ltmp3448 # Offset: 10024
    0000272a: 	movq	0x100(%rsp), %rax
    00002732: 	leaq	0x1(%rax), %rsi
    00002736: 	callq	_ZdlPvm@PLT # Offset: 10038
.Ltmp3448:
    0000273b: 	movq	0x20(%rsp), %rsi
    00002740: 	leaq	DATAat0x4d435(%rip), %rdx
    00002747: 	movq	%r13, %rdi
    0000274a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10058
    0000274f: 	callq	clock@PLT # Offset: 10063
    00002754: 	movl	iterations(%rip), %ecx
    0000275a: 	xorl	%r14d, %r14d
    0000275d: 	leaq	0x7cf0(%r12), %rbx
    00002765: 	movq	%rax, start_time(%rip)
    0000276c: 	leaq	DATAat0x4d004(%rip), %r15
    00002773: 	testl	%ecx, %ecx
    00002775: 	jle	.Ltmp3449 # Offset: 10101
    0000277b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3452:
    00002780: 	movl	0x110(%rsp), %edx
    00002787: 	movq	%r12, %rax
    0000278a: 	pxor	%xmm0, %xmm0
    0000278e: 	subl	0x114(%rsp), %edx
    00002795: 	shll	$0x2, %edx
    00002798: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3450:
    000027a0: 	movdqa	(%rax), %xmm1
    000027a4: 	movdqu	0x4(%rax), %xmm6
    000027a9: 	addq	$0x10, %rax
    000027ad: 	psubd	%xmm6, %xmm1
    000027b1: 	paddd	%xmm1, %xmm0
    000027b5: 	paddd	%xmm1, %xmm0
    000027b9: 	paddd	%xmm1, %xmm0
    000027bd: 	paddd	%xmm1, %xmm0
    000027c1: 	cmpq	%rax, %rbx
    000027c4: 	jne	.Ltmp3450 # Offset: 10180
    000027c6: 	movq	0x7e04(%rsp), %xmm2
    000027cf: 	movdqa	%xmm0, %xmm1
    000027d3: 	psrldq	$0x8, %xmm1
    000027d8: 	paddd	%xmm1, %xmm0
    000027dc: 	movq	0x7e00(%rsp), %xmm1
    000027e5: 	psubd	%xmm2, %xmm1
    000027e9: 	movdqa	%xmm0, %xmm2
    000027ed: 	psrldq	$0x4, %xmm2
    000027f2: 	paddd	%xmm2, %xmm0
    000027f6: 	paddd	%xmm1, %xmm1
    000027fa: 	movd	%xmm0, %eax
    000027fe: 	addl	%edx, %eax
    00002800: 	paddd	%xmm1, %xmm1
    00002804: 	movd	%xmm1, %edx
    00002808: 	pshufd	$0xe5, %xmm1, %xmm5
    0000280d: 	movd	%xmm5, %esi
    00002811: 	addl	%esi, %edx
    00002813: 	addl	%edx, %eax
    00002815: 	movl	0x7e08(%rsp), %edx
    0000281c: 	subl	0x7e0c(%rsp), %edx
    00002823: 	leal	(%rax,%rdx,4), %eax
    00002826: 	testl	%eax, %eax
    00002828: 	jne	.Ltmp3451 # Offset: 10280
.Ltmp3529:
    0000282e: 	addl	$0x1, %r14d
    00002832: 	cmpl	%ecx, %r14d
    00002835: 	jl	.Ltmp3452 # Offset: 10293
.Ltmp3449:
    0000283b: 	movq	%r13, %rsi
    0000283e: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002845: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 10309
    0000284a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002851: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00002858: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000285f: 	je	.Ltmp3453 # Offset: 10335
.Ltmp3564:
    00002865: 	movq	-0x20(%rax), %r14
    00002869: 	callq	clock@PLT # Offset: 10345
    0000286e: 	pxor	%xmm0, %xmm0
    00002872: 	movq	%rax, end_time(%rip)
    00002879: 	movq	%r14, %rdi
    0000287c: 	subq	start_time(%rip), %rax
    00002883: 	cvtsi2sd	%rax, %xmm0
    00002888: 	divsd	DATAat0x4d640(%rip), %xmm0
    00002890: 	callq	_Z13record_resultdPKc # Offset: 10384
    00002895: 	movq	0xf0(%rsp), %rdi
    0000289d: 	cmpq	0x18(%rsp), %rdi
    000028a2: 	je	.Ltmp3454 # Offset: 10402
    000028a4: 	movq	0x100(%rsp), %rax
    000028ac: 	leaq	0x1(%rax), %rsi
    000028b0: 	callq	_ZdlPvm@PLT # Offset: 10416
.Ltmp3454:
    000028b5: 	movq	0x20(%rsp), %rsi
    000028ba: 	leaq	DATAat0x4d44e(%rip), %rdx
    000028c1: 	movq	%r13, %rdi
    000028c4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10436
    000028c9: 	movq	%r13, %rcx
    000028cc: 	movl	%ebp, %edx
    000028ce: 	movl	$0x1f40, %esi
    000028d3: 	movq	%r12, %rdi
    000028d6: 	callq	_Z9test_CSE4Ii14custom_cse_mulIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 10454
    000028db: 	movq	0xf0(%rsp), %rdi
    000028e3: 	cmpq	0x18(%rsp), %rdi
    000028e8: 	je	.Ltmp3455 # Offset: 10472
    000028ea: 	movq	0x100(%rsp), %rax
    000028f2: 	leaq	0x1(%rax), %rsi
    000028f6: 	callq	_ZdlPvm@PLT # Offset: 10486
.Ltmp3455:
    000028fb: 	movq	0x20(%rsp), %rsi
    00002900: 	leaq	DATAat0x4d45e(%rip), %rdx
    00002907: 	movq	%r13, %rdi
    0000290a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10506
    0000290f: 	callq	clock@PLT # Offset: 10511
    00002914: 	movl	iterations(%rip), %ecx
    0000291a: 	xorl	%r14d, %r14d
    0000291d: 	leaq	0x7cf0(%r12), %rbx
    00002925: 	movq	%rax, start_time(%rip)
    0000292c: 	leaq	DATAat0x4d004(%rip), %r15
    00002933: 	testl	%ecx, %ecx
    00002935: 	jle	.Ltmp3456 # Offset: 10549
    0000293b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3459:
    00002940: 	movl	0x110(%rsp), %edx
    00002947: 	movq	%r12, %rax
    0000294a: 	pxor	%xmm0, %xmm0
    0000294e: 	subl	0x114(%rsp), %edx
    00002955: 	shll	$0x2, %edx
    00002958: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3457:
    00002960: 	movdqa	(%rax), %xmm1
    00002964: 	movdqu	0x4(%rax), %xmm4
    00002969: 	addq	$0x10, %rax
    0000296d: 	psubd	%xmm4, %xmm1
    00002971: 	paddd	%xmm1, %xmm0
    00002975: 	paddd	%xmm1, %xmm0
    00002979: 	paddd	%xmm1, %xmm0
    0000297d: 	paddd	%xmm1, %xmm0
    00002981: 	cmpq	%rax, %rbx
    00002984: 	jne	.Ltmp3457 # Offset: 10628
    00002986: 	movq	0x7e04(%rsp), %xmm2
    0000298f: 	movdqa	%xmm0, %xmm1
    00002993: 	psrldq	$0x8, %xmm1
    00002998: 	paddd	%xmm1, %xmm0
    0000299c: 	movq	0x7e00(%rsp), %xmm1
    000029a5: 	psubd	%xmm2, %xmm1
    000029a9: 	movdqa	%xmm0, %xmm2
    000029ad: 	psrldq	$0x4, %xmm2
    000029b2: 	paddd	%xmm2, %xmm0
    000029b6: 	paddd	%xmm1, %xmm1
    000029ba: 	movd	%xmm0, %eax
    000029be: 	addl	%edx, %eax
    000029c0: 	paddd	%xmm1, %xmm1
    000029c4: 	movd	%xmm1, %edx
    000029c8: 	pshufd	$0xe5, %xmm1, %xmm6
    000029cd: 	movd	%xmm6, %esi
    000029d1: 	addl	%esi, %edx
    000029d3: 	addl	%edx, %eax
    000029d5: 	movl	0x7e08(%rsp), %edx
    000029dc: 	subl	0x7e0c(%rsp), %edx
    000029e3: 	leal	(%rax,%rdx,4), %eax
    000029e6: 	testl	%eax, %eax
    000029e8: 	jne	.Ltmp3458 # Offset: 10728
.Ltmp3528:
    000029ee: 	addl	$0x1, %r14d
    000029f2: 	cmpl	%ecx, %r14d
    000029f5: 	jl	.Ltmp3459 # Offset: 10741
.Ltmp3456:
    000029fb: 	movq	%r13, %rsi
    000029fe: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002a05: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 10757
    00002a0a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002a11: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00002a18: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002a1f: 	je	.Ltmp3460 # Offset: 10783
.Ltmp3563:
    00002a25: 	movq	-0x20(%rax), %r14
    00002a29: 	callq	clock@PLT # Offset: 10793
    00002a2e: 	pxor	%xmm0, %xmm0
    00002a32: 	movq	%rax, end_time(%rip)
    00002a39: 	movq	%r14, %rdi
    00002a3c: 	subq	start_time(%rip), %rax
    00002a43: 	cvtsi2sd	%rax, %xmm0
    00002a48: 	divsd	DATAat0x4d640(%rip), %xmm0
    00002a50: 	callq	_Z13record_resultdPKc # Offset: 10832
    00002a55: 	movq	0xf0(%rsp), %rdi
    00002a5d: 	cmpq	0x18(%rsp), %rdi
    00002a62: 	je	.Ltmp3461 # Offset: 10850
    00002a64: 	movq	0x100(%rsp), %rax
    00002a6c: 	leaq	0x1(%rax), %rsi
    00002a70: 	callq	_ZdlPvm@PLT # Offset: 10864
.Ltmp3461:
    00002a75: 	movq	0x20(%rsp), %rsi
    00002a7a: 	leaq	DATAat0x4d475(%rip), %rdx
    00002a81: 	movq	%r13, %rdi
    00002a84: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10884
    00002a89: 	movq	%r13, %rcx
    00002a8c: 	movl	%ebp, %edx
    00002a8e: 	movl	$0x1f40, %esi
    00002a93: 	movq	%r12, %rdi
    00002a96: 	callq	_Z9test_CSE4Ii14custom_cse_divIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 10902
    00002a9b: 	movq	0xf0(%rsp), %rdi
    00002aa3: 	cmpq	0x18(%rsp), %rdi
    00002aa8: 	je	.Ltmp3462 # Offset: 10920
    00002aaa: 	movq	0x100(%rsp), %rax
    00002ab2: 	leaq	0x1(%rax), %rsi
    00002ab6: 	callq	_ZdlPvm@PLT # Offset: 10934
.Ltmp3462:
    00002abb: 	movq	0x20(%rsp), %rsi
    00002ac0: 	leaq	DATAat0x4d483(%rip), %rdx
    00002ac7: 	movq	%r13, %rdi
    00002aca: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10954
    00002acf: 	callq	clock@PLT # Offset: 10959
    00002ad4: 	movl	iterations(%rip), %ecx
    00002ada: 	xorl	%r14d, %r14d
    00002add: 	leaq	0x7cf0(%r12), %rbx
    00002ae5: 	movq	%rax, start_time(%rip)
    00002aec: 	leaq	DATAat0x4d004(%rip), %r15
    00002af3: 	testl	%ecx, %ecx
    00002af5: 	jle	.Ltmp3463 # Offset: 10997
    00002afb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3466:
    00002b00: 	movl	0x110(%rsp), %edx
    00002b07: 	movq	%r12, %rax
    00002b0a: 	pxor	%xmm0, %xmm0
    00002b0e: 	subl	0x114(%rsp), %edx
    00002b15: 	shll	$0x2, %edx
    00002b18: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3464:
    00002b20: 	movdqa	(%rax), %xmm1
    00002b24: 	movdqu	0x4(%rax), %xmm7
    00002b29: 	addq	$0x10, %rax
    00002b2d: 	psubd	%xmm7, %xmm1
    00002b31: 	paddd	%xmm1, %xmm0
    00002b35: 	paddd	%xmm1, %xmm0
    00002b39: 	paddd	%xmm1, %xmm0
    00002b3d: 	paddd	%xmm1, %xmm0
    00002b41: 	cmpq	%rbx, %rax
    00002b44: 	jne	.Ltmp3464 # Offset: 11076
    00002b46: 	movq	0x7e04(%rsp), %xmm2
    00002b4f: 	movdqa	%xmm0, %xmm1
    00002b53: 	psrldq	$0x8, %xmm1
    00002b58: 	paddd	%xmm1, %xmm0
    00002b5c: 	movq	0x7e00(%rsp), %xmm1
    00002b65: 	psubd	%xmm2, %xmm1
    00002b69: 	movdqa	%xmm0, %xmm2
    00002b6d: 	psrldq	$0x4, %xmm2
    00002b72: 	paddd	%xmm2, %xmm0
    00002b76: 	paddd	%xmm1, %xmm1
    00002b7a: 	movd	%xmm0, %eax
    00002b7e: 	addl	%edx, %eax
    00002b80: 	paddd	%xmm1, %xmm1
    00002b84: 	movd	%xmm1, %edx
    00002b88: 	pshufd	$0xe5, %xmm1, %xmm7
    00002b8d: 	movd	%xmm7, %esi
    00002b91: 	addl	%esi, %edx
    00002b93: 	addl	%edx, %eax
    00002b95: 	movl	0x7e08(%rsp), %edx
    00002b9c: 	subl	0x7e0c(%rsp), %edx
    00002ba3: 	leal	(%rax,%rdx,4), %eax
    00002ba6: 	testl	%eax, %eax
    00002ba8: 	jne	.Ltmp3465 # Offset: 11176
.Ltmp3527:
    00002bae: 	addl	$0x1, %r14d
    00002bb2: 	cmpl	%ecx, %r14d
    00002bb5: 	jl	.Ltmp3466 # Offset: 11189
.Ltmp3463:
    00002bbb: 	movq	%r13, %rsi
    00002bbe: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002bc5: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 11205
    00002bca: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002bd1: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00002bd8: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002bdf: 	je	.Ltmp3467 # Offset: 11231
.Ltmp3562:
    00002be5: 	movq	-0x20(%rax), %r14
    00002be9: 	callq	clock@PLT # Offset: 11241
    00002bee: 	pxor	%xmm0, %xmm0
    00002bf2: 	movq	%rax, end_time(%rip)
    00002bf9: 	movq	%r14, %rdi
    00002bfc: 	subq	start_time(%rip), %rax
    00002c03: 	cvtsi2sd	%rax, %xmm0
    00002c08: 	divsd	DATAat0x4d640(%rip), %xmm0
    00002c10: 	callq	_Z13record_resultdPKc # Offset: 11280
    00002c15: 	movq	0xf0(%rsp), %rdi
    00002c1d: 	cmpq	0x18(%rsp), %rdi
    00002c22: 	je	.Ltmp3468 # Offset: 11298
    00002c24: 	movq	0x100(%rsp), %rax
    00002c2c: 	leaq	0x1(%rax), %rsi
    00002c30: 	callq	_ZdlPvm@PLT # Offset: 11312
.Ltmp3468:
    00002c35: 	movq	0x20(%rsp), %rsi
    00002c3a: 	leaq	DATAat0x4d497(%rip), %rdx
    00002c41: 	movq	%r13, %rdi
    00002c44: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11332
    00002c49: 	movq	%r13, %rcx
    00002c4c: 	movl	%ebp, %edx
    00002c4e: 	movl	$0x1f40, %esi
    00002c53: 	movq	%r12, %rdi
    00002c56: 	callq	_Z9test_CSE4Ii14custom_cse_mixIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 11350
    00002c5b: 	movq	0xf0(%rsp), %rdi
    00002c63: 	cmpq	0x18(%rsp), %rdi
    00002c68: 	je	.Ltmp3469 # Offset: 11368
    00002c6a: 	movq	0x100(%rsp), %rax
    00002c72: 	leaq	0x1(%rax), %rsi
    00002c76: 	callq	_ZdlPvm@PLT # Offset: 11382
.Ltmp3469:
    00002c7b: 	movq	0x20(%rsp), %rbx
    00002c80: 	leaq	0xb0(%rsp), %rdi
    00002c88: 	leaq	DATAat0x4d4a2(%rip), %rdx
    00002c8f: 	movq	%rbx, %rsi
    00002c92: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11410
    00002c97: 	movl	iterations(%rip), %edx
    00002c9d: 	xorl	%r8d, %r8d
    00002ca0: 	xorl	%ecx, %ecx
    00002ca2: 	movl	$0x1f40, %esi
    00002ca7: 	movq	0xb0(%rsp), %rdi
    00002caf: 	callq	_Z9summarizePKciiii # Offset: 11439
    00002cb4: 	leaq	DATAat0x4d4a9(%rip), %rdx
    00002cbb: 	movq	%rbx, %rsi
    00002cbe: 	movq	%r13, %rdi
    00002cc1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11457
    00002cc6: 	callq	clock@PLT # Offset: 11462
    00002ccb: 	movl	iterations(%rip), %ecx
    00002cd1: 	xorl	%r14d, %r14d
    00002cd4: 	leaq	0x7cf0(%r12), %rbx
    00002cdc: 	movq	%rax, start_time(%rip)
    00002ce3: 	leaq	DATAat0x4d004(%rip), %r15
    00002cea: 	testl	%ecx, %ecx
    00002cec: 	jle	.Ltmp3470 # Offset: 11500
    00002cf2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3473:
    00002cf8: 	movl	0x110(%rsp), %edx
    00002cff: 	movq	%r12, %rax
    00002d02: 	pxor	%xmm0, %xmm0
    00002d06: 	subl	0x114(%rsp), %edx
    00002d0d: 	shll	$0x3, %edx
.Ltmp3471:
    00002d10: 	movdqa	(%rax), %xmm1
    00002d14: 	movdqu	0x4(%rax), %xmm5
    00002d19: 	addq	$0x10, %rax
    00002d1d: 	psubd	%xmm5, %xmm1
    00002d21: 	paddd	%xmm1, %xmm0
    00002d25: 	paddd	%xmm1, %xmm0
    00002d29: 	paddd	%xmm1, %xmm0
    00002d2d: 	paddd	%xmm1, %xmm0
    00002d31: 	paddd	%xmm1, %xmm0
    00002d35: 	paddd	%xmm1, %xmm0
    00002d39: 	paddd	%xmm1, %xmm0
    00002d3d: 	paddd	%xmm1, %xmm0
    00002d41: 	cmpq	%rax, %rbx
    00002d44: 	jne	.Ltmp3471 # Offset: 11588
    00002d46: 	movq	0x7e04(%rsp), %xmm2
    00002d4f: 	movdqa	%xmm0, %xmm1
    00002d53: 	psrldq	$0x8, %xmm1
    00002d58: 	paddd	%xmm1, %xmm0
    00002d5c: 	movq	0x7e00(%rsp), %xmm1
    00002d65: 	psubd	%xmm2, %xmm1
    00002d69: 	movdqa	%xmm0, %xmm2
    00002d6d: 	psrldq	$0x4, %xmm2
    00002d72: 	paddd	%xmm2, %xmm0
    00002d76: 	paddd	%xmm1, %xmm1
    00002d7a: 	movd	%xmm0, %eax
    00002d7e: 	addl	%edx, %eax
    00002d80: 	paddd	%xmm1, %xmm1
    00002d84: 	paddd	%xmm1, %xmm1
    00002d88: 	movd	%xmm1, %edx
    00002d8c: 	pshufd	$0xe5, %xmm1, %xmm5
    00002d91: 	movd	%xmm5, %esi
    00002d95: 	addl	%esi, %edx
    00002d97: 	addl	%edx, %eax
    00002d99: 	movl	0x7e08(%rsp), %edx
    00002da0: 	subl	0x7e0c(%rsp), %edx
    00002da7: 	leal	(%rax,%rdx,8), %eax
    00002daa: 	testl	%eax, %eax
    00002dac: 	jne	.Ltmp3472 # Offset: 11692
.Ltmp3526:
    00002db2: 	addl	$0x1, %r14d
    00002db6: 	cmpl	%ecx, %r14d
    00002db9: 	jl	.Ltmp3473 # Offset: 11705
.Ltmp3470:
    00002dbf: 	movq	%r13, %rsi
    00002dc2: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002dc9: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 11721
    00002dce: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002dd5: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00002ddc: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002de3: 	je	.Ltmp3474 # Offset: 11747
.Ltmp3561:
    00002de9: 	movq	-0x20(%rax), %r14
    00002ded: 	callq	clock@PLT # Offset: 11757
    00002df2: 	pxor	%xmm0, %xmm0
    00002df6: 	movq	%rax, end_time(%rip)
    00002dfd: 	movq	%r14, %rdi
    00002e00: 	subq	start_time(%rip), %rax
    00002e07: 	cvtsi2sd	%rax, %xmm0
    00002e0c: 	divsd	DATAat0x4d640(%rip), %xmm0
    00002e14: 	callq	_Z13record_resultdPKc # Offset: 11796
    00002e19: 	movq	0xf0(%rsp), %rdi
    00002e21: 	cmpq	0x18(%rsp), %rdi
    00002e26: 	je	.Ltmp3475 # Offset: 11814
    00002e28: 	movq	0x100(%rsp), %rax
    00002e30: 	leaq	0x1(%rax), %rsi
    00002e34: 	callq	_ZdlPvm@PLT # Offset: 11828
.Ltmp3475:
    00002e39: 	movq	0x20(%rsp), %rsi
    00002e3e: 	leaq	DATAat0x4d4b8(%rip), %rdx
    00002e45: 	movq	%r13, %rdi
    00002e48: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11848
    00002e4d: 	callq	clock@PLT # Offset: 11853
    00002e52: 	movl	iterations(%rip), %ecx
    00002e58: 	xorl	%r14d, %r14d
    00002e5b: 	leaq	0x7cf0(%r12), %rbx
    00002e63: 	movq	%rax, start_time(%rip)
    00002e6a: 	leaq	DATAat0x4d004(%rip), %r15
    00002e71: 	testl	%ecx, %ecx
    00002e73: 	jle	.Ltmp3476 # Offset: 11891
    00002e79: 	nopl	(%rax) # Size: 7
.Ltmp3479:
    00002e80: 	movl	0x110(%rsp), %edx
    00002e87: 	movq	%r12, %rax
    00002e8a: 	pxor	%xmm0, %xmm0
    00002e8e: 	subl	0x114(%rsp), %edx
    00002e95: 	shll	$0x3, %edx
    00002e98: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3477:
    00002ea0: 	movdqa	(%rax), %xmm1
    00002ea4: 	movdqu	0x4(%rax), %xmm6
    00002ea9: 	addq	$0x10, %rax
    00002ead: 	psubd	%xmm6, %xmm1
    00002eb1: 	paddd	%xmm1, %xmm0
    00002eb5: 	paddd	%xmm1, %xmm0
    00002eb9: 	paddd	%xmm1, %xmm0
    00002ebd: 	paddd	%xmm1, %xmm0
    00002ec1: 	paddd	%xmm1, %xmm0
    00002ec5: 	paddd	%xmm1, %xmm0
    00002ec9: 	paddd	%xmm1, %xmm0
    00002ecd: 	paddd	%xmm1, %xmm0
    00002ed1: 	cmpq	%rbx, %rax
    00002ed4: 	jne	.Ltmp3477 # Offset: 11988
    00002ed6: 	movq	0x7e04(%rsp), %xmm2
    00002edf: 	movdqa	%xmm0, %xmm1
    00002ee3: 	psrldq	$0x8, %xmm1
    00002ee8: 	paddd	%xmm1, %xmm0
    00002eec: 	movq	0x7e00(%rsp), %xmm1
    00002ef5: 	psubd	%xmm2, %xmm1
    00002ef9: 	movdqa	%xmm0, %xmm2
    00002efd: 	psrldq	$0x4, %xmm2
    00002f02: 	paddd	%xmm2, %xmm0
    00002f06: 	paddd	%xmm1, %xmm1
    00002f0a: 	movd	%xmm0, %eax
    00002f0e: 	addl	%edx, %eax
    00002f10: 	paddd	%xmm1, %xmm1
    00002f14: 	paddd	%xmm1, %xmm1
    00002f18: 	movd	%xmm1, %edx
    00002f1c: 	pshufd	$0xe5, %xmm1, %xmm6
    00002f21: 	movd	%xmm6, %esi
    00002f25: 	addl	%esi, %edx
    00002f27: 	addl	%edx, %eax
    00002f29: 	movl	0x7e08(%rsp), %edx
    00002f30: 	subl	0x7e0c(%rsp), %edx
    00002f37: 	leal	(%rax,%rdx,8), %eax
    00002f3a: 	testl	%eax, %eax
    00002f3c: 	jne	.Ltmp3478 # Offset: 12092
.Ltmp3525:
    00002f42: 	addl	$0x1, %r14d
    00002f46: 	cmpl	%ecx, %r14d
    00002f49: 	jl	.Ltmp3479 # Offset: 12105
.Ltmp3476:
    00002f4f: 	movq	%r13, %rsi
    00002f52: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002f59: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 12121
    00002f5e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002f65: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00002f6c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002f73: 	je	.Ltmp3480 # Offset: 12147
.Ltmp3560:
    00002f79: 	movq	-0x20(%rax), %r14
    00002f7d: 	callq	clock@PLT # Offset: 12157
    00002f82: 	pxor	%xmm0, %xmm0
    00002f86: 	movq	%rax, end_time(%rip)
    00002f8d: 	movq	%r14, %rdi
    00002f90: 	subq	start_time(%rip), %rax
    00002f97: 	cvtsi2sd	%rax, %xmm0
    00002f9c: 	divsd	DATAat0x4d640(%rip), %xmm0
    00002fa4: 	callq	_Z13record_resultdPKc # Offset: 12196
    00002fa9: 	movq	0xf0(%rsp), %rdi
    00002fb1: 	cmpq	0x18(%rsp), %rdi
    00002fb6: 	je	.Ltmp3481 # Offset: 12214
    00002fb8: 	movq	0x100(%rsp), %rax
    00002fc0: 	leaq	0x1(%rax), %rsi
    00002fc4: 	callq	_ZdlPvm@PLT # Offset: 12228
.Ltmp3481:
    00002fc9: 	movq	0x20(%rsp), %rsi
    00002fce: 	leaq	DATAat0x4d4cc(%rip), %rdx
    00002fd5: 	movq	%r13, %rdi
    00002fd8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12248
    00002fdd: 	movq	%r13, %rcx
    00002fe0: 	movl	%ebp, %edx
    00002fe2: 	movl	$0x1f40, %esi
    00002fe7: 	movq	%r12, %rdi
    00002fea: 	callq	_Z20test_CSE8_add_inlineIi14custom_cse_addIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 12266
    00002fef: 	movq	0xf0(%rsp), %rdi
    00002ff7: 	cmpq	0x18(%rsp), %rdi
    00002ffc: 	je	.Ltmp3482 # Offset: 12284
    00002ffe: 	movq	0x100(%rsp), %rax
    00003006: 	leaq	0x1(%rax), %rsi
    0000300a: 	callq	_ZdlPvm@PLT # Offset: 12298
.Ltmp3482:
    0000300f: 	movq	0x20(%rsp), %rsi
    00003014: 	leaq	DATAat0x4d4de(%rip), %rdx
    0000301b: 	movq	%r13, %rdi
    0000301e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12318
    00003023: 	movq	%r13, %rcx
    00003026: 	movl	%ebp, %edx
    00003028: 	movl	$0x1f40, %esi
    0000302d: 	movq	%r12, %rdi
    00003030: 	callq	_Z28test_CSE8_add_inline_flippedIi14custom_cse_addIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 12336
    00003035: 	movq	0xf0(%rsp), %rdi
    0000303d: 	cmpq	0x18(%rsp), %rdi
    00003042: 	je	.Ltmp3483 # Offset: 12354
    00003044: 	movq	0x100(%rsp), %rax
    0000304c: 	leaq	0x1(%rax), %rsi
    00003050: 	callq	_ZdlPvm@PLT # Offset: 12368
.Ltmp3483:
    00003055: 	movq	0x20(%rsp), %rsi
    0000305a: 	leaq	DATAat0x4d4f8(%rip), %rdx
    00003061: 	movq	%r13, %rdi
    00003064: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12388
    00003069: 	movq	%r13, %rcx
    0000306c: 	movl	%ebp, %edx
    0000306e: 	movl	$0x1f40, %esi
    00003073: 	movq	%r12, %rdi
    00003076: 	callq	_Z9test_CSE8Ii14custom_cse_addIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 12406
    0000307b: 	movq	0xf0(%rsp), %rdi
    00003083: 	cmpq	0x18(%rsp), %rdi
    00003088: 	je	.Ltmp3484 # Offset: 12424
    0000308a: 	movq	0x100(%rsp), %rax
    00003092: 	leaq	0x1(%rax), %rsi
    00003096: 	callq	_ZdlPvm@PLT # Offset: 12438
.Ltmp3484:
    0000309b: 	movq	0x20(%rsp), %rsi
    000030a0: 	leaq	DATAat0x4d503(%rip), %rdx
    000030a7: 	movq	%r13, %rdi
    000030aa: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12458
    000030af: 	callq	clock@PLT # Offset: 12463
    000030b4: 	movl	iterations(%rip), %ecx
    000030ba: 	xorl	%r14d, %r14d
    000030bd: 	leaq	0x7cf0(%r12), %rbx
    000030c5: 	movq	%rax, start_time(%rip)
    000030cc: 	leaq	DATAat0x4d004(%rip), %r15
    000030d3: 	testl	%ecx, %ecx
    000030d5: 	jle	.Ltmp3485 # Offset: 12501
    000030db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3488:
    000030e0: 	movl	0x110(%rsp), %edx
    000030e7: 	movq	%r12, %rax
    000030ea: 	pxor	%xmm0, %xmm0
    000030ee: 	subl	0x114(%rsp), %edx
    000030f5: 	shll	$0x3, %edx
    000030f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3486:
    00003100: 	movdqa	(%rax), %xmm1
    00003104: 	movdqu	0x4(%rax), %xmm4
    00003109: 	addq	$0x10, %rax
    0000310d: 	psubd	%xmm4, %xmm1
    00003111: 	paddd	%xmm1, %xmm0
    00003115: 	paddd	%xmm1, %xmm0
    00003119: 	paddd	%xmm1, %xmm0
    0000311d: 	paddd	%xmm1, %xmm0
    00003121: 	paddd	%xmm1, %xmm0
    00003125: 	paddd	%xmm1, %xmm0
    00003129: 	paddd	%xmm1, %xmm0
    0000312d: 	paddd	%xmm1, %xmm0
    00003131: 	cmpq	%rax, %rbx
    00003134: 	jne	.Ltmp3486 # Offset: 12596
    00003136: 	movq	0x7e04(%rsp), %xmm2
    0000313f: 	movdqa	%xmm0, %xmm1
    00003143: 	psrldq	$0x8, %xmm1
    00003148: 	paddd	%xmm1, %xmm0
    0000314c: 	movq	0x7e00(%rsp), %xmm1
    00003155: 	psubd	%xmm2, %xmm1
    00003159: 	movdqa	%xmm0, %xmm2
    0000315d: 	psrldq	$0x4, %xmm2
    00003162: 	paddd	%xmm2, %xmm0
    00003166: 	paddd	%xmm1, %xmm1
    0000316a: 	movd	%xmm0, %eax
    0000316e: 	addl	%edx, %eax
    00003170: 	paddd	%xmm1, %xmm1
    00003174: 	paddd	%xmm1, %xmm1
    00003178: 	movd	%xmm1, %edx
    0000317c: 	pshufd	$0xe5, %xmm1, %xmm7
    00003181: 	movd	%xmm7, %esi
    00003185: 	addl	%esi, %edx
    00003187: 	addl	%edx, %eax
    00003189: 	movl	0x7e08(%rsp), %edx
    00003190: 	subl	0x7e0c(%rsp), %edx
    00003197: 	leal	(%rax,%rdx,8), %eax
    0000319a: 	testl	%eax, %eax
    0000319c: 	jne	.Ltmp3487 # Offset: 12700
.Ltmp3524:
    000031a2: 	addl	$0x1, %r14d
    000031a6: 	cmpl	%ecx, %r14d
    000031a9: 	jl	.Ltmp3488 # Offset: 12713
.Ltmp3485:
    000031af: 	movq	%r13, %rsi
    000031b2: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000031b9: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 12729
    000031be: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000031c5: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000031cc: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000031d3: 	je	.Ltmp3489 # Offset: 12755
.Ltmp3559:
    000031d9: 	movq	-0x20(%rax), %r14
    000031dd: 	callq	clock@PLT # Offset: 12765
    000031e2: 	pxor	%xmm0, %xmm0
    000031e6: 	movq	%rax, end_time(%rip)
    000031ed: 	movq	%r14, %rdi
    000031f0: 	subq	start_time(%rip), %rax
    000031f7: 	cvtsi2sd	%rax, %xmm0
    000031fc: 	divsd	DATAat0x4d640(%rip), %xmm0
    00003204: 	callq	_Z13record_resultdPKc # Offset: 12804
    00003209: 	movq	0xf0(%rsp), %rdi
    00003211: 	cmpq	0x18(%rsp), %rdi
    00003216: 	je	.Ltmp3490 # Offset: 12822
    00003218: 	movq	0x100(%rsp), %rax
    00003220: 	leaq	0x1(%rax), %rsi
    00003224: 	callq	_ZdlPvm@PLT # Offset: 12836
.Ltmp3490:
    00003229: 	movq	0x20(%rsp), %rsi
    0000322e: 	leaq	DATAat0x4d51c(%rip), %rdx
    00003235: 	movq	%r13, %rdi
    00003238: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12856
    0000323d: 	movq	%r13, %rcx
    00003240: 	movl	%ebp, %edx
    00003242: 	movl	$0x1f40, %esi
    00003247: 	movq	%r12, %rdi
    0000324a: 	callq	_Z9test_CSE8Ii14custom_cse_subIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 12874
    0000324f: 	movq	0xf0(%rsp), %rdi
    00003257: 	cmpq	0x18(%rsp), %rdi
    0000325c: 	je	.Ltmp3491 # Offset: 12892
    0000325e: 	movq	0x100(%rsp), %rax
    00003266: 	leaq	0x1(%rax), %rsi
    0000326a: 	callq	_ZdlPvm@PLT # Offset: 12906
.Ltmp3491:
    0000326f: 	movq	0x20(%rsp), %rsi
    00003274: 	leaq	DATAat0x4d52c(%rip), %rdx
    0000327b: 	movq	%r13, %rdi
    0000327e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12926
    00003283: 	callq	clock@PLT # Offset: 12931
    00003288: 	movl	iterations(%rip), %ecx
    0000328e: 	xorl	%r14d, %r14d
    00003291: 	leaq	0x7cf0(%r12), %rbx
    00003299: 	movq	%rax, start_time(%rip)
    000032a0: 	leaq	DATAat0x4d004(%rip), %r15
    000032a7: 	testl	%ecx, %ecx
    000032a9: 	jle	.Ltmp3492 # Offset: 12969
    000032af: 	nop # Size: 1
.Ltmp3495:
    000032b0: 	movl	0x110(%rsp), %edx
    000032b7: 	movq	%r12, %rax
    000032ba: 	pxor	%xmm0, %xmm0
    000032be: 	subl	0x114(%rsp), %edx
    000032c5: 	shll	$0x3, %edx
    000032c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3493:
    000032d0: 	movdqa	(%rax), %xmm1
    000032d4: 	movdqu	0x4(%rax), %xmm7
    000032d9: 	addq	$0x10, %rax
    000032dd: 	psubd	%xmm7, %xmm1
    000032e1: 	paddd	%xmm1, %xmm0
    000032e5: 	paddd	%xmm1, %xmm0
    000032e9: 	paddd	%xmm1, %xmm0
    000032ed: 	paddd	%xmm1, %xmm0
    000032f1: 	paddd	%xmm1, %xmm0
    000032f5: 	paddd	%xmm1, %xmm0
    000032f9: 	paddd	%xmm1, %xmm0
    000032fd: 	paddd	%xmm1, %xmm0
    00003301: 	cmpq	%rax, %rbx
    00003304: 	jne	.Ltmp3493 # Offset: 13060
    00003306: 	movq	0x7e04(%rsp), %xmm2
    0000330f: 	movdqa	%xmm0, %xmm1
    00003313: 	psrldq	$0x8, %xmm1
    00003318: 	paddd	%xmm1, %xmm0
    0000331c: 	movq	0x7e00(%rsp), %xmm1
    00003325: 	psubd	%xmm2, %xmm1
    00003329: 	movdqa	%xmm0, %xmm2
    0000332d: 	psrldq	$0x4, %xmm2
    00003332: 	paddd	%xmm2, %xmm0
    00003336: 	paddd	%xmm1, %xmm1
    0000333a: 	movd	%xmm0, %eax
    0000333e: 	addl	%edx, %eax
    00003340: 	paddd	%xmm1, %xmm1
    00003344: 	paddd	%xmm1, %xmm1
    00003348: 	movd	%xmm1, %edx
    0000334c: 	pshufd	$0xe5, %xmm1, %xmm4
    00003351: 	movd	%xmm4, %esi
    00003355: 	addl	%esi, %edx
    00003357: 	addl	%edx, %eax
    00003359: 	movl	0x7e08(%rsp), %edx
    00003360: 	subl	0x7e0c(%rsp), %edx
    00003367: 	leal	(%rax,%rdx,8), %eax
    0000336a: 	testl	%eax, %eax
    0000336c: 	jne	.Ltmp3494 # Offset: 13164
.Ltmp3523:
    00003372: 	addl	$0x1, %r14d
    00003376: 	cmpl	%ecx, %r14d
    00003379: 	jl	.Ltmp3495 # Offset: 13177
.Ltmp3492:
    0000337f: 	movq	%r13, %rsi
    00003382: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00003389: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 13193
    0000338e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00003395: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000339c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000033a3: 	je	.Ltmp3496 # Offset: 13219
.Ltmp3558:
    000033a9: 	movq	-0x20(%rax), %r14
    000033ad: 	callq	clock@PLT # Offset: 13229
    000033b2: 	pxor	%xmm0, %xmm0
    000033b6: 	movq	%rax, end_time(%rip)
    000033bd: 	movq	%r14, %rdi
    000033c0: 	subq	start_time(%rip), %rax
    000033c7: 	cvtsi2sd	%rax, %xmm0
    000033cc: 	divsd	DATAat0x4d640(%rip), %xmm0
    000033d4: 	callq	_Z13record_resultdPKc # Offset: 13268
    000033d9: 	movq	0xf0(%rsp), %rdi
    000033e1: 	cmpq	0x18(%rsp), %rdi
    000033e6: 	je	.Ltmp3497 # Offset: 13286
    000033e8: 	movq	0x100(%rsp), %rax
    000033f0: 	leaq	0x1(%rax), %rsi
    000033f4: 	callq	_ZdlPvm@PLT # Offset: 13300
.Ltmp3497:
    000033f9: 	movq	0x20(%rsp), %rsi
    000033fe: 	leaq	DATAat0x4d545(%rip), %rdx
    00003405: 	movq	%r13, %rdi
    00003408: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13320
    0000340d: 	movq	%r13, %rcx
    00003410: 	movl	%ebp, %edx
    00003412: 	movl	$0x1f40, %esi
    00003417: 	movq	%r12, %rdi
    0000341a: 	callq	_Z9test_CSE8Ii14custom_cse_mulIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 13338
    0000341f: 	movq	0xf0(%rsp), %rdi
    00003427: 	cmpq	0x18(%rsp), %rdi
    0000342c: 	je	.Ltmp3498 # Offset: 13356
    0000342e: 	movq	0x100(%rsp), %rax
    00003436: 	leaq	0x1(%rax), %rsi
    0000343a: 	callq	_ZdlPvm@PLT # Offset: 13370
.Ltmp3498:
    0000343f: 	movq	0x20(%rsp), %rsi
    00003444: 	leaq	DATAat0x4d555(%rip), %rdx
    0000344b: 	movq	%r13, %rdi
    0000344e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13390
    00003453: 	callq	clock@PLT # Offset: 13395
    00003458: 	movl	iterations(%rip), %ecx
    0000345e: 	xorl	%r14d, %r14d
    00003461: 	leaq	0x7cf0(%r12), %rbx
    00003469: 	movq	%rax, start_time(%rip)
    00003470: 	leaq	DATAat0x4d004(%rip), %r15
    00003477: 	testl	%ecx, %ecx
    00003479: 	jle	.Ltmp3499 # Offset: 13433
    0000347f: 	nop # Size: 1
.Ltmp3502:
    00003480: 	movl	0x110(%rsp), %edx
    00003487: 	movq	%r12, %rax
    0000348a: 	pxor	%xmm0, %xmm0
    0000348e: 	subl	0x114(%rsp), %edx
    00003495: 	shll	$0x3, %edx
    00003498: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3500:
    000034a0: 	movdqa	(%rax), %xmm1
    000034a4: 	movdqu	0x4(%rax), %xmm5
    000034a9: 	addq	$0x10, %rax
    000034ad: 	psubd	%xmm5, %xmm1
    000034b1: 	paddd	%xmm1, %xmm0
    000034b5: 	paddd	%xmm1, %xmm0
    000034b9: 	paddd	%xmm1, %xmm0
    000034bd: 	paddd	%xmm1, %xmm0
    000034c1: 	paddd	%xmm1, %xmm0
    000034c5: 	paddd	%xmm1, %xmm0
    000034c9: 	paddd	%xmm1, %xmm0
    000034cd: 	paddd	%xmm1, %xmm0
    000034d1: 	cmpq	%rbx, %rax
    000034d4: 	jne	.Ltmp3500 # Offset: 13524
    000034d6: 	movq	0x7e04(%rsp), %xmm2
    000034df: 	movdqa	%xmm0, %xmm1
    000034e3: 	psrldq	$0x8, %xmm1
    000034e8: 	paddd	%xmm1, %xmm0
    000034ec: 	movq	0x7e00(%rsp), %xmm1
    000034f5: 	psubd	%xmm2, %xmm1
    000034f9: 	movdqa	%xmm0, %xmm2
    000034fd: 	psrldq	$0x4, %xmm2
    00003502: 	paddd	%xmm2, %xmm0
    00003506: 	paddd	%xmm1, %xmm1
    0000350a: 	movd	%xmm0, %eax
    0000350e: 	addl	%edx, %eax
    00003510: 	paddd	%xmm1, %xmm1
    00003514: 	paddd	%xmm1, %xmm1
    00003518: 	movd	%xmm1, %edx
    0000351c: 	pshufd	$0xe5, %xmm1, %xmm5
    00003521: 	movd	%xmm5, %esi
    00003525: 	addl	%esi, %edx
    00003527: 	addl	%edx, %eax
    00003529: 	movl	0x7e08(%rsp), %edx
    00003530: 	subl	0x7e0c(%rsp), %edx
    00003537: 	leal	(%rax,%rdx,8), %eax
    0000353a: 	testl	%eax, %eax
    0000353c: 	jne	.Ltmp3501 # Offset: 13628
.Ltmp3522:
    00003542: 	addl	$0x1, %r14d
    00003546: 	cmpl	%ecx, %r14d
    00003549: 	jl	.Ltmp3502 # Offset: 13641
.Ltmp3499:
    0000354f: 	movq	%r13, %rsi
    00003552: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00003559: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 13657
    0000355e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00003565: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000356c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00003573: 	je	.Ltmp3503 # Offset: 13683
.Ltmp3557:
    00003579: 	movq	-0x20(%rax), %r14
    0000357d: 	callq	clock@PLT # Offset: 13693
    00003582: 	pxor	%xmm0, %xmm0
    00003586: 	movq	%rax, end_time(%rip)
    0000358d: 	movq	%r14, %rdi
    00003590: 	subq	start_time(%rip), %rax
    00003597: 	cvtsi2sd	%rax, %xmm0
    0000359c: 	divsd	DATAat0x4d640(%rip), %xmm0
    000035a4: 	callq	_Z13record_resultdPKc # Offset: 13732
    000035a9: 	movq	0xf0(%rsp), %rdi
    000035b1: 	cmpq	0x18(%rsp), %rdi
    000035b6: 	je	.Ltmp3504 # Offset: 13750
    000035b8: 	movq	0x100(%rsp), %rax
    000035c0: 	leaq	0x1(%rax), %rsi
    000035c4: 	callq	_ZdlPvm@PLT # Offset: 13764
.Ltmp3504:
    000035c9: 	movq	0x20(%rsp), %rsi
    000035ce: 	leaq	DATAat0x4d56c(%rip), %rdx
    000035d5: 	movq	%r13, %rdi
    000035d8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13784
    000035dd: 	movq	%r13, %rcx
    000035e0: 	movl	%ebp, %edx
    000035e2: 	movl	$0x1f40, %esi
    000035e7: 	movq	%r12, %rdi
    000035ea: 	callq	_Z9test_CSE8Ii14custom_cse_divIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 13802
    000035ef: 	movq	0xf0(%rsp), %rdi
    000035f7: 	cmpq	0x18(%rsp), %rdi
    000035fc: 	je	.Ltmp3505 # Offset: 13820
    000035fe: 	movq	0x100(%rsp), %rax
    00003606: 	leaq	0x1(%rax), %rsi
    0000360a: 	callq	_ZdlPvm@PLT # Offset: 13834
.Ltmp3505:
    0000360f: 	movq	0x20(%rsp), %rsi
    00003614: 	leaq	DATAat0x4d57a(%rip), %rdx
    0000361b: 	movq	%r13, %rdi
    0000361e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13854
    00003623: 	callq	clock@PLT # Offset: 13859
    00003628: 	movl	iterations(%rip), %ecx
    0000362e: 	xorl	%r14d, %r14d
    00003631: 	leaq	0x7cf0(%r12), %rbx
    00003639: 	movq	%rax, start_time(%rip)
    00003640: 	leaq	DATAat0x4d004(%rip), %r15
    00003647: 	testl	%ecx, %ecx
    00003649: 	jle	.Ltmp3506 # Offset: 13897
    0000364f: 	nop # Size: 1
.Ltmp3509:
    00003650: 	movl	0x110(%rsp), %edx
    00003657: 	movq	%r12, %rax
    0000365a: 	pxor	%xmm0, %xmm0
    0000365e: 	subl	0x114(%rsp), %edx
    00003665: 	shll	$0x3, %edx
    00003668: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3507:
    00003670: 	movdqa	(%rax), %xmm1
    00003674: 	movdqu	0x4(%rax), %xmm6
    00003679: 	addq	$0x10, %rax
    0000367d: 	psubd	%xmm6, %xmm1
    00003681: 	paddd	%xmm1, %xmm0
    00003685: 	paddd	%xmm1, %xmm0
    00003689: 	paddd	%xmm1, %xmm0
    0000368d: 	paddd	%xmm1, %xmm0
    00003691: 	paddd	%xmm1, %xmm0
    00003695: 	paddd	%xmm1, %xmm0
    00003699: 	paddd	%xmm1, %xmm0
    0000369d: 	paddd	%xmm1, %xmm0
    000036a1: 	cmpq	%rbx, %rax
    000036a4: 	jne	.Ltmp3507 # Offset: 13988
    000036a6: 	movq	0x7e04(%rsp), %xmm2
    000036af: 	movdqa	%xmm0, %xmm1
    000036b3: 	psrldq	$0x8, %xmm1
    000036b8: 	paddd	%xmm1, %xmm0
    000036bc: 	movq	0x7e00(%rsp), %xmm1
    000036c5: 	psubd	%xmm2, %xmm1
    000036c9: 	movdqa	%xmm0, %xmm2
    000036cd: 	psrldq	$0x4, %xmm2
    000036d2: 	paddd	%xmm2, %xmm0
    000036d6: 	paddd	%xmm1, %xmm1
    000036da: 	movd	%xmm0, %eax
    000036de: 	addl	%edx, %eax
    000036e0: 	paddd	%xmm1, %xmm1
    000036e4: 	paddd	%xmm1, %xmm1
    000036e8: 	movd	%xmm1, %edx
    000036ec: 	pshufd	$0xe5, %xmm1, %xmm6
    000036f1: 	movd	%xmm6, %esi
    000036f5: 	addl	%esi, %edx
    000036f7: 	addl	%edx, %eax
    000036f9: 	movl	0x7e08(%rsp), %edx
    00003700: 	subl	0x7e0c(%rsp), %edx
    00003707: 	leal	(%rax,%rdx,8), %eax
    0000370a: 	testl	%eax, %eax
    0000370c: 	jne	.Ltmp3508 # Offset: 14092
.Ltmp3521:
    00003712: 	addl	$0x1, %r14d
    00003716: 	cmpl	%ecx, %r14d
    00003719: 	jl	.Ltmp3509 # Offset: 14105
.Ltmp3506:
    0000371f: 	movq	%r13, %rsi
    00003722: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00003729: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 14121
    0000372e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00003735: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000373c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00003743: 	je	.Ltmp3510 # Offset: 14147
.Ltmp3556:
    00003749: 	movq	-0x20(%rax), %r14
    0000374d: 	callq	clock@PLT # Offset: 14157
    00003752: 	pxor	%xmm0, %xmm0
    00003756: 	movq	%rax, end_time(%rip)
    0000375d: 	movq	%r14, %rdi
    00003760: 	subq	start_time(%rip), %rax
    00003767: 	cvtsi2sd	%rax, %xmm0
    0000376c: 	divsd	DATAat0x4d640(%rip), %xmm0
    00003774: 	callq	_Z13record_resultdPKc # Offset: 14196
    00003779: 	movq	0xf0(%rsp), %rdi
    00003781: 	cmpq	0x18(%rsp), %rdi
    00003786: 	je	.Ltmp3511 # Offset: 14214
    00003788: 	movq	0x100(%rsp), %rax
    00003790: 	leaq	0x1(%rax), %rsi
    00003794: 	callq	_ZdlPvm@PLT # Offset: 14228
.Ltmp3511:
    00003799: 	movq	0x20(%rsp), %rsi
    0000379e: 	leaq	DATAat0x4d58e(%rip), %rdx
    000037a5: 	movq	%r13, %rdi
    000037a8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 14248
    000037ad: 	movq	%r13, %rcx
    000037b0: 	movl	%ebp, %edx
    000037b2: 	movl	$0x1f40, %esi
    000037b7: 	movq	%r12, %rdi
    000037ba: 	callq	_Z9test_CSE8Ii14custom_cse_mixIiEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 14266
    000037bf: 	movq	0xf0(%rsp), %rdi
    000037c7: 	cmpq	0x18(%rsp), %rdi
    000037cc: 	je	.Ltmp3512 # Offset: 14284
    000037ce: 	movq	0x100(%rsp), %rax
    000037d6: 	leaq	0x1(%rax), %rsi
    000037da: 	callq	_ZdlPvm@PLT # Offset: 14298
.Ltmp3512:
    000037df: 	movq	0x20(%rsp), %rbx
    000037e4: 	leaq	0xd0(%rsp), %rdi
    000037ec: 	leaq	DATAat0x4d599(%rip), %rdx
    000037f3: 	movq	%rbx, %rsi
    000037f6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 14326
    000037fb: 	movl	iterations(%rip), %edx
    00003801: 	xorl	%r8d, %r8d
    00003804: 	xorl	%ecx, %ecx
    00003806: 	movl	$0x1f40, %esi
    0000380b: 	movq	0xd0(%rsp), %rdi
    00003813: 	callq	_Z9summarizePKciiii # Offset: 14355
    00003818: 	leaq	DATAat0x4d5a0(%rip), %rdx
    0000381f: 	movq	%rbx, %rsi
    00003822: 	movq	%r13, %rdi
    00003825: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 14373
    0000382a: 	movq	%r13, %rdx
    0000382d: 	movl	%ebp, %esi
    0000382f: 	movq	%r12, %rdi
    00003832: 	callq	_Z16TestUnrolledTypeIiLi4EEvPT_S0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 14386
    00003837: 	movq	0xf0(%rsp), %rdi
    0000383f: 	cmpq	0x18(%rsp), %rdi
    00003844: 	je	.Ltmp3513 # Offset: 14404
    00003846: 	movq	0x100(%rsp), %rax
    0000384e: 	leaq	0x1(%rax), %rsi
    00003852: 	callq	_ZdlPvm@PLT # Offset: 14418
.Ltmp3513:
    00003857: 	movq	0x20(%rsp), %rsi
    0000385c: 	leaq	DATAat0x4d5ae(%rip), %rdx
    00003863: 	movq	%r13, %rdi
    00003866: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 14438
    0000386b: 	movq	%r13, %rdx
    0000386e: 	movl	%ebp, %esi
    00003870: 	movq	%r12, %rdi
    00003873: 	callq	_Z16TestUnrolledTypeIiLi8EEvPT_S0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 14451
    00003878: 	movq	0xf0(%rsp), %rdi
    00003880: 	cmpq	0x18(%rsp), %rdi
    00003885: 	je	.Ltmp3514 # Offset: 14469
    00003887: 	movq	0x100(%rsp), %rax
    0000388f: 	leaq	0x1(%rax), %rsi
    00003893: 	callq	_ZdlPvm@PLT # Offset: 14483
.Ltmp3514:
    00003898: 	movq	0xd0(%rsp), %rdi
    000038a0: 	leaq	0xe0(%rsp), %rax
    000038a8: 	cmpq	%rax, %rdi
    000038ab: 	je	.Ltmp3515 # Offset: 14507
    000038ad: 	movq	0xe0(%rsp), %rax
    000038b5: 	leaq	0x1(%rax), %rsi
    000038b9: 	callq	_ZdlPvm@PLT # Offset: 14521
.Ltmp3515:
    000038be: 	movq	0xb0(%rsp), %rdi
    000038c6: 	leaq	0xc0(%rsp), %rax
    000038ce: 	cmpq	%rax, %rdi
    000038d1: 	je	.Ltmp3516 # Offset: 14545
    000038d3: 	movq	0xc0(%rsp), %rax
    000038db: 	leaq	0x1(%rax), %rsi
    000038df: 	callq	_ZdlPvm@PLT # Offset: 14559
.Ltmp3516:
    000038e4: 	movq	0x90(%rsp), %rdi
    000038ec: 	leaq	0xa0(%rsp), %rax
    000038f4: 	cmpq	%rax, %rdi
    000038f7: 	je	.Ltmp3517 # Offset: 14583
    000038f9: 	movq	0xa0(%rsp), %rax
    00003901: 	leaq	0x1(%rax), %rsi
    00003905: 	callq	_ZdlPvm@PLT # Offset: 14597
.Ltmp3517:
    0000390a: 	movq	0x70(%rsp), %rdi
    0000390f: 	leaq	0x80(%rsp), %rax
    00003917: 	cmpq	%rax, %rdi
    0000391a: 	je	.Ltmp3518 # Offset: 14618
    0000391c: 	movq	0x80(%rsp), %rax
    00003924: 	leaq	0x1(%rax), %rsi
    00003928: 	callq	_ZdlPvm@PLT # Offset: 14632
.Ltmp3518:
    0000392d: 	movq	0x50(%rsp), %rdi
    00003932: 	cmpq	0x28(%rsp), %rdi
    00003937: 	je	.Ltmp3519 # Offset: 14647
    00003939: 	movq	0x60(%rsp), %rax
    0000393e: 	leaq	0x1(%rax), %rsi
    00003942: 	callq	_ZdlPvm@PLT # Offset: 14658
.Ltmp3519:
    00003947: 	movq	0x7e18(%rsp), %rax
    0000394f: 	subq	%fs:0x28, %rax
    00003958: 	jne	.Ltmp3520 # Offset: 14680
    0000395e: 	addq	$0x7e28, %rsp
    00003965: 	popq	%rbx
    00003966: 	popq	%rbp
    00003967: 	popq	%r12
    00003969: 	popq	%r13
    0000396b: 	popq	%r14
    0000396d: 	popq	%r15
    0000396f: 	retq # Offset: 14703
.Ltmp3508:
    00003970: 	movq	0xf0(%rsp), %rdx
    00003978: 	movq	%r15, %rsi
    0000397b: 	movl	$0x1, %edi
    00003980: 	xorl	%eax, %eax
    00003982: 	callq	__printf_chk@PLT # Offset: 14722
    00003987: 	movl	iterations(%rip), %ecx
    0000398d: 	jmp	.Ltmp3521 # Offset: 14733
    00003992: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3501:
    00003998: 	movq	0xf0(%rsp), %rdx
    000039a0: 	movq	%r15, %rsi
    000039a3: 	movl	$0x1, %edi
    000039a8: 	xorl	%eax, %eax
    000039aa: 	callq	__printf_chk@PLT # Offset: 14762
    000039af: 	movl	iterations(%rip), %ecx
    000039b5: 	jmp	.Ltmp3522 # Offset: 14773
    000039ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3494:
    000039c0: 	movq	0xf0(%rsp), %rdx
    000039c8: 	movq	%r15, %rsi
    000039cb: 	movl	$0x1, %edi
    000039d0: 	xorl	%eax, %eax
    000039d2: 	callq	__printf_chk@PLT # Offset: 14802
    000039d7: 	movl	iterations(%rip), %ecx
    000039dd: 	jmp	.Ltmp3523 # Offset: 14813
    000039e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3487:
    000039e8: 	movq	0xf0(%rsp), %rdx
    000039f0: 	movq	%r15, %rsi
    000039f3: 	movl	$0x1, %edi
    000039f8: 	xorl	%eax, %eax
    000039fa: 	callq	__printf_chk@PLT # Offset: 14842
    000039ff: 	movl	iterations(%rip), %ecx
    00003a05: 	jmp	.Ltmp3524 # Offset: 14853
    00003a0a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3478:
    00003a10: 	movq	0xf0(%rsp), %rdx
    00003a18: 	movq	%r15, %rsi
    00003a1b: 	movl	$0x1, %edi
    00003a20: 	xorl	%eax, %eax
    00003a22: 	callq	__printf_chk@PLT # Offset: 14882
    00003a27: 	movl	iterations(%rip), %ecx
    00003a2d: 	jmp	.Ltmp3525 # Offset: 14893
    00003a32: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3472:
    00003a38: 	movq	0xf0(%rsp), %rdx
    00003a40: 	movq	%r15, %rsi
    00003a43: 	movl	$0x1, %edi
    00003a48: 	xorl	%eax, %eax
    00003a4a: 	callq	__printf_chk@PLT # Offset: 14922
    00003a4f: 	movl	iterations(%rip), %ecx
    00003a55: 	jmp	.Ltmp3526 # Offset: 14933
    00003a5a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3465:
    00003a60: 	movq	0xf0(%rsp), %rdx
    00003a68: 	movq	%r15, %rsi
    00003a6b: 	movl	$0x1, %edi
    00003a70: 	xorl	%eax, %eax
    00003a72: 	callq	__printf_chk@PLT # Offset: 14962
    00003a77: 	movl	iterations(%rip), %ecx
    00003a7d: 	jmp	.Ltmp3527 # Offset: 14973
    00003a82: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3458:
    00003a88: 	movq	0xf0(%rsp), %rdx
    00003a90: 	movq	%r15, %rsi
    00003a93: 	movl	$0x1, %edi
    00003a98: 	xorl	%eax, %eax
    00003a9a: 	callq	__printf_chk@PLT # Offset: 15002
    00003a9f: 	movl	iterations(%rip), %ecx
    00003aa5: 	jmp	.Ltmp3528 # Offset: 15013
    00003aaa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3451:
    00003ab0: 	movq	0xf0(%rsp), %rdx
    00003ab8: 	movq	%r15, %rsi
    00003abb: 	movl	$0x1, %edi
    00003ac0: 	xorl	%eax, %eax
    00003ac2: 	callq	__printf_chk@PLT # Offset: 15042
    00003ac7: 	movl	iterations(%rip), %ecx
    00003acd: 	jmp	.Ltmp3529 # Offset: 15053
    00003ad2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3444:
    00003ad8: 	movq	0xf0(%rsp), %rdx
    00003ae0: 	movq	%r15, %rsi
    00003ae3: 	movl	$0x1, %edi
    00003ae8: 	xorl	%eax, %eax
    00003aea: 	callq	__printf_chk@PLT # Offset: 15082
    00003aef: 	movl	iterations(%rip), %ecx
    00003af5: 	jmp	.Ltmp3530 # Offset: 15093
    00003afa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3435:
    00003b00: 	movq	0xf0(%rsp), %rdx
    00003b08: 	movq	%r15, %rsi
    00003b0b: 	movl	$0x1, %edi
    00003b10: 	xorl	%eax, %eax
    00003b12: 	callq	__printf_chk@PLT # Offset: 15122
    00003b17: 	movl	iterations(%rip), %ecx
    00003b1d: 	jmp	.Ltmp3531 # Offset: 15133
    00003b22: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3429:
    00003b28: 	movq	0xf0(%rsp), %rdx
    00003b30: 	movq	%r15, %rsi
    00003b33: 	movl	$0x1, %edi
    00003b38: 	xorl	%eax, %eax
    00003b3a: 	callq	__printf_chk@PLT # Offset: 15162
    00003b3f: 	movl	iterations(%rip), %ecx
    00003b45: 	jmp	.Ltmp3532 # Offset: 15173
    00003b4a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3422:
    00003b50: 	movq	0xf0(%rsp), %rdx
    00003b58: 	movq	%r15, %rsi
    00003b5b: 	movl	$0x1, %edi
    00003b60: 	xorl	%eax, %eax
    00003b62: 	callq	__printf_chk@PLT # Offset: 15202
    00003b67: 	movl	iterations(%rip), %ecx
    00003b6d: 	jmp	.Ltmp3533 # Offset: 15213
    00003b72: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3416:
    00003b78: 	movq	0xf0(%rsp), %rdx
    00003b80: 	leaq	DATAat0x4d004(%rip), %rsi
    00003b87: 	movl	$0x1, %edi
    00003b8c: 	xorl	%eax, %eax
    00003b8e: 	callq	__printf_chk@PLT # Offset: 15246
    00003b93: 	movl	iterations(%rip), %r8d
    00003b9a: 	jmp	.Ltmp3534 # Offset: 15258
    00003b9f: 	nop # Size: 1
.Ltmp3410:
    00003ba0: 	movq	0xf0(%rsp), %rdx
    00003ba8: 	leaq	DATAat0x4d004(%rip), %rsi
    00003baf: 	movl	$0x1, %edi
    00003bb4: 	xorl	%eax, %eax
    00003bb6: 	callq	__printf_chk@PLT # Offset: 15286
    00003bbb: 	movl	iterations(%rip), %ecx
    00003bc1: 	jmp	.Ltmp3535 # Offset: 15297
    00003bc6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3403:
    00003bd0: 	movq	0xf0(%rsp), %rdx
    00003bd8: 	leaq	DATAat0x4d004(%rip), %rsi
    00003bdf: 	movl	$0x1, %edi
    00003be4: 	xorl	%eax, %eax
    00003be6: 	callq	__printf_chk@PLT # Offset: 15334
    00003beb: 	movl	iterations(%rip), %ecx
    00003bf1: 	jmp	.Ltmp3536 # Offset: 15345
    00003bf6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3397:
    00003c00: 	movq	0xf0(%rsp), %rdx
    00003c08: 	leaq	DATAat0x4d004(%rip), %rsi
    00003c0f: 	movl	$0x1, %edi
    00003c14: 	xorl	%eax, %eax
    00003c16: 	callq	__printf_chk@PLT # Offset: 15382
    00003c1b: 	movl	iterations(%rip), %ecx
    00003c21: 	jmp	.Ltmp3537 # Offset: 15393
    00003c26: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3391:
    00003c30: 	movq	0xf0(%rsp), %rdx
    00003c38: 	leaq	DATAat0x4d004(%rip), %rsi
    00003c3f: 	movl	$0x1, %edi
    00003c44: 	xorl	%eax, %eax
    00003c46: 	callq	__printf_chk@PLT # Offset: 15430
    00003c4b: 	movl	iterations(%rip), %ecx
    00003c51: 	jmp	.Ltmp3538 # Offset: 15441
    00003c56: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3384:
    00003c60: 	movq	0xf0(%rsp), %rdx
    00003c68: 	leaq	DATAat0x4d004(%rip), %rsi
    00003c6f: 	movl	$0x1, %edi
    00003c74: 	xorl	%eax, %eax
    00003c76: 	callq	__printf_chk@PLT # Offset: 15478
    00003c7b: 	movl	iterations(%rip), %ecx
    00003c81: 	jmp	.Ltmp3539 # Offset: 15489
    00003c86: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3377:
    00003c90: 	movq	0xf0(%rsp), %rdx
    00003c98: 	leaq	DATAat0x4d004(%rip), %rsi
    00003c9f: 	movl	$0x1, %edi
    00003ca4: 	xorl	%eax, %eax
    00003ca6: 	callq	__printf_chk@PLT # Offset: 15526
    00003cab: 	movl	iterations(%rip), %ecx
    00003cb1: 	jmp	.Ltmp3540 # Offset: 15537
    00003cb6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3371:
    00003cc0: 	movq	0xf0(%rsp), %rdx
    00003cc8: 	leaq	DATAat0x4d004(%rip), %rsi
    00003ccf: 	movl	$0x1, %edi
    00003cd4: 	xorl	%eax, %eax
    00003cd6: 	callq	__printf_chk@PLT # Offset: 15574
    00003cdb: 	movl	iterations(%rip), %ecx
    00003ce1: 	jmp	.Ltmp3541 # Offset: 15585
    00003ce6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3365:
    00003cf0: 	movq	0xf0(%rsp), %rdx
    00003cf8: 	leaq	DATAat0x4d004(%rip), %rsi
    00003cff: 	movl	$0x1, %edi
    00003d04: 	xorl	%eax, %eax
    00003d06: 	callq	__printf_chk@PLT # Offset: 15622
    00003d0b: 	movl	iterations(%rip), %r10d
    00003d12: 	jmp	.Ltmp3542 # Offset: 15634
    00003d17: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3359:
    00003d20: 	movq	0xf0(%rsp), %rdx
    00003d28: 	leaq	DATAat0x4d004(%rip), %rsi
    00003d2f: 	movl	$0x1, %edi
    00003d34: 	xorl	%eax, %eax
    00003d36: 	callq	__printf_chk@PLT # Offset: 15670
    00003d3b: 	movl	iterations(%rip), %esi
    00003d41: 	jmp	.Ltmp3543 # Offset: 15681
    00003d46: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3353:
    00003d50: 	movq	0xf0(%rsp), %rdx
    00003d58: 	leaq	DATAat0x4d004(%rip), %rsi
    00003d5f: 	movl	$0x1, %edi
    00003d64: 	xorl	%eax, %eax
    00003d66: 	callq	__printf_chk@PLT # Offset: 15718
    00003d6b: 	movl	iterations(%rip), %r8d
    00003d72: 	jmp	.Ltmp3544 # Offset: 15730
    00003d77: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3347:
    00003d80: 	movq	0xf0(%rsp), %rdx
    00003d88: 	leaq	DATAat0x4d004(%rip), %rsi
    00003d8f: 	movl	$0x1, %edi
    00003d94: 	xorl	%eax, %eax
    00003d96: 	callq	__printf_chk@PLT # Offset: 15766
    00003d9b: 	movl	iterations(%rip), %esi
    00003da1: 	jmp	.Ltmp3545 # Offset: 15777
    00003da6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3341:
    00003db0: 	movq	0xf0(%rsp), %rdx
    00003db8: 	leaq	DATAat0x4d004(%rip), %rsi
    00003dbf: 	movl	$0x1, %edi
    00003dc4: 	xorl	%eax, %eax
    00003dc6: 	callq	__printf_chk@PLT # Offset: 15814
    00003dcb: 	movl	iterations(%rip), %ecx
    00003dd1: 	jmp	.Ltmp3546 # Offset: 15825
    00003dd6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3335:
    00003de0: 	movq	0xf0(%rsp), %rdx
    00003de8: 	leaq	DATAat0x4d004(%rip), %rsi
    00003def: 	movl	$0x1, %edi
    00003df4: 	xorl	%eax, %eax
    00003df6: 	callq	__printf_chk@PLT # Offset: 15862
    00003dfb: 	movl	iterations(%rip), %esi
    00003e01: 	jmp	.Ltmp3547 # Offset: 15873
    00003e06: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3329:
    00003e10: 	movq	0xf0(%rsp), %rdx
    00003e18: 	leaq	DATAat0x4d004(%rip), %rsi
    00003e1f: 	movl	$0x1, %edi
    00003e24: 	xorl	%eax, %eax
    00003e26: 	callq	__printf_chk@PLT # Offset: 15910
    00003e2b: 	movl	iterations(%rip), %edi
    00003e31: 	jmp	.Ltmp3548 # Offset: 15921
    00003e36: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3323:
    00003e40: 	movq	0xf0(%rsp), %rdx
    00003e48: 	leaq	DATAat0x4d004(%rip), %rsi
    00003e4f: 	movl	$0x1, %edi
    00003e54: 	xorl	%eax, %eax
    00003e56: 	callq	__printf_chk@PLT # Offset: 15958
    00003e5b: 	movl	iterations(%rip), %esi
    00003e61: 	jmp	.Ltmp3549 # Offset: 15969
    00003e66: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3317:
    00003e70: 	movq	0xf0(%rsp), %rdx
    00003e78: 	leaq	DATAat0x4d004(%rip), %rsi
    00003e7f: 	movl	$0x1, %edi
    00003e84: 	xorl	%eax, %eax
    00003e86: 	callq	__printf_chk@PLT # Offset: 16006
    00003e8b: 	movl	iterations(%rip), %ecx
    00003e91: 	jmp	.Ltmp3550 # Offset: 16017
    00003e96: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3311:
    00003ea0: 	movq	0xf0(%rsp), %rdx
    00003ea8: 	leaq	DATAat0x4d004(%rip), %rsi
    00003eaf: 	movl	$0x1, %edi
    00003eb4: 	xorl	%eax, %eax
    00003eb6: 	callq	__printf_chk@PLT # Offset: 16054
    00003ebb: 	movl	iterations(%rip), %ecx
    00003ec1: 	jmp	.Ltmp3551 # Offset: 16065
    00003ec6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3305:
    00003ed0: 	movq	0xf0(%rsp), %rdx
    00003ed8: 	leaq	DATAat0x4d004(%rip), %rsi
    00003edf: 	movl	$0x1, %edi
    00003ee4: 	xorl	%eax, %eax
    00003ee6: 	callq	__printf_chk@PLT # Offset: 16102
    00003eeb: 	movl	iterations(%rip), %ecx
    00003ef1: 	jmp	.Ltmp3552 # Offset: 16113
    00003ef6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3299:
    00003f00: 	movq	0xf0(%rsp), %rdx
    00003f08: 	leaq	DATAat0x4d004(%rip), %rsi
    00003f0f: 	movl	$0x1, %edi
    00003f14: 	xorl	%eax, %eax
    00003f16: 	callq	__printf_chk@PLT # Offset: 16150
    00003f1b: 	movl	iterations(%rip), %esi
    00003f21: 	jmp	.Ltmp3553 # Offset: 16161
    00003f26: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3293:
    00003f30: 	movq	0xf0(%rsp), %rdx
    00003f38: 	leaq	DATAat0x4d004(%rip), %rsi
    00003f3f: 	movl	$0x1, %edi
    00003f44: 	xorl	%eax, %eax
    00003f46: 	callq	__printf_chk@PLT # Offset: 16198
    00003f4b: 	movl	iterations(%rip), %esi
    00003f51: 	jmp	.Ltmp3554 # Offset: 16209
.Ltmp3295:
    00003f56: 	movq	-0x8(%rdx), %rax
    00003f5a: 	addq	$0x200, %rax
    00003f60: 	jmp	.Ltmp3555 # Offset: 16224
.Ltmp3510:
    00003f65: 	movq	-0x8(%rdx), %rax
    00003f69: 	addq	$0x200, %rax
    00003f6f: 	jmp	.Ltmp3556 # Offset: 16239
.Ltmp3503:
    00003f74: 	movq	-0x8(%rdx), %rax
    00003f78: 	addq	$0x200, %rax
    00003f7e: 	jmp	.Ltmp3557 # Offset: 16254
.Ltmp3496:
    00003f83: 	movq	-0x8(%rdx), %rax
    00003f87: 	addq	$0x200, %rax
    00003f8d: 	jmp	.Ltmp3558 # Offset: 16269
.Ltmp3489:
    00003f92: 	movq	-0x8(%rdx), %rax
    00003f96: 	addq	$0x200, %rax
    00003f9c: 	jmp	.Ltmp3559 # Offset: 16284
.Ltmp3480:
    00003fa1: 	movq	-0x8(%rdx), %rax
    00003fa5: 	addq	$0x200, %rax
    00003fab: 	jmp	.Ltmp3560 # Offset: 16299
.Ltmp3474:
    00003fb0: 	movq	-0x8(%rdx), %rax
    00003fb4: 	addq	$0x200, %rax
    00003fba: 	jmp	.Ltmp3561 # Offset: 16314
.Ltmp3467:
    00003fbf: 	movq	-0x8(%rdx), %rax
    00003fc3: 	addq	$0x200, %rax
    00003fc9: 	jmp	.Ltmp3562 # Offset: 16329
.Ltmp3460:
    00003fce: 	movq	-0x8(%rdx), %rax
    00003fd2: 	addq	$0x200, %rax
    00003fd8: 	jmp	.Ltmp3563 # Offset: 16344
.Ltmp3453:
    00003fdd: 	movq	-0x8(%rdx), %rax
    00003fe1: 	addq	$0x200, %rax
    00003fe7: 	jmp	.Ltmp3564 # Offset: 16359
.Ltmp3446:
    00003fec: 	movq	-0x8(%rdx), %rax
    00003ff0: 	addq	$0x200, %rax
    00003ff6: 	jmp	.Ltmp3565 # Offset: 16374
.Ltmp3437:
    00003ffb: 	movq	-0x8(%rdx), %rax
    00003fff: 	addq	$0x200, %rax
    00004005: 	jmp	.Ltmp3566 # Offset: 16389
.Ltmp3431:
    0000400a: 	movq	-0x8(%rdx), %rax
    0000400e: 	addq	$0x200, %rax
    00004014: 	jmp	.Ltmp3567 # Offset: 16404
.Ltmp3424:
    00004019: 	movq	-0x8(%rdx), %rax
    0000401d: 	addq	$0x200, %rax
    00004023: 	jmp	.Ltmp3568 # Offset: 16419
.Ltmp3418:
    00004028: 	movq	-0x8(%rdx), %rax
    0000402c: 	addq	$0x200, %rax
    00004032: 	jmp	.Ltmp3569 # Offset: 16434
.Ltmp3412:
    00004037: 	movq	-0x8(%rdx), %rax
    0000403b: 	addq	$0x200, %rax
    00004041: 	jmp	.Ltmp3570 # Offset: 16449
.Ltmp3405:
    00004046: 	movq	-0x8(%rdx), %rax
    0000404a: 	addq	$0x200, %rax
    00004050: 	jmp	.Ltmp3571 # Offset: 16464
.Ltmp3399:
    00004055: 	movq	-0x8(%rdx), %rax
    00004059: 	addq	$0x200, %rax
    0000405f: 	jmp	.Ltmp3572 # Offset: 16479
.Ltmp3393:
    00004064: 	movq	-0x8(%rdx), %rax
    00004068: 	addq	$0x200, %rax
    0000406e: 	jmp	.Ltmp3573 # Offset: 16494
.Ltmp3386:
    00004073: 	movq	-0x8(%rdx), %rax
    00004077: 	addq	$0x200, %rax
    0000407d: 	jmp	.Ltmp3574 # Offset: 16509
.Ltmp3379:
    00004082: 	movq	-0x8(%rdx), %rax
    00004086: 	addq	$0x200, %rax
    0000408c: 	jmp	.Ltmp3575 # Offset: 16524
.Ltmp3373:
    00004091: 	movq	-0x8(%rdx), %rax
    00004095: 	addq	$0x200, %rax
    0000409b: 	jmp	.Ltmp3576 # Offset: 16539
.Ltmp3367:
    000040a0: 	movq	-0x8(%rdx), %rax
    000040a4: 	addq	$0x200, %rax
    000040aa: 	jmp	.Ltmp3577 # Offset: 16554
.Ltmp3361:
    000040af: 	movq	-0x8(%rdx), %rax
    000040b3: 	addq	$0x200, %rax
    000040b9: 	jmp	.Ltmp3578 # Offset: 16569
.Ltmp3355:
    000040be: 	movq	-0x8(%rdx), %rax
    000040c2: 	addq	$0x200, %rax
    000040c8: 	jmp	.Ltmp3579 # Offset: 16584
.Ltmp3349:
    000040cd: 	movq	-0x8(%rdx), %rax
    000040d1: 	addq	$0x200, %rax
    000040d7: 	jmp	.Ltmp3580 # Offset: 16599
.Ltmp3343:
    000040dc: 	movq	-0x8(%rdx), %rax
    000040e0: 	addq	$0x200, %rax
    000040e6: 	jmp	.Ltmp3581 # Offset: 16614
.Ltmp3337:
    000040eb: 	movq	-0x8(%rdx), %rax
    000040ef: 	addq	$0x200, %rax
    000040f5: 	jmp	.Ltmp3582 # Offset: 16629
.Ltmp3331:
    000040fa: 	movq	-0x8(%rdx), %rax
    000040fe: 	addq	$0x200, %rax
    00004104: 	jmp	.Ltmp3583 # Offset: 16644
.Ltmp3325:
    00004109: 	movq	-0x8(%rdx), %rax
    0000410d: 	addq	$0x200, %rax
    00004113: 	jmp	.Ltmp3584 # Offset: 16659
.Ltmp3319:
    00004118: 	movq	-0x8(%rdx), %rax
    0000411c: 	addq	$0x200, %rax
    00004122: 	jmp	.Ltmp3585 # Offset: 16674
.Ltmp3313:
    00004127: 	movq	-0x8(%rdx), %rax
    0000412b: 	addq	$0x200, %rax
    00004131: 	jmp	.Ltmp3586 # Offset: 16689
.Ltmp3307:
    00004136: 	movq	-0x8(%rdx), %rax
    0000413a: 	addq	$0x200, %rax
    00004140: 	jmp	.Ltmp3587 # Offset: 16704
.Ltmp3301:
    00004145: 	movq	-0x8(%rdx), %rax
    00004149: 	addq	$0x200, %rax
    0000414f: 	jmp	.Ltmp3588 # Offset: 16719
.Ltmp3520:
    00004154: 	callq	__stack_chk_fail@PLT # Offset: 16724
    00004159: 	endbr64
    0000415d: 	movq	%rax, %rbp
    00004160: 	jmp	.Ltmp3589 # Offset: 16736
    00004162: 	endbr64
.Ltmp3591:
    00004166: 	movq	%rax, %rbp
    00004169: 	jmp	.Ltmp3590 # Offset: 16745
    0000416b: 	endbr64
    0000416f: 	jmp	.Ltmp3591 # Offset: 16751
.Ltmp3597:
    00004171: 	movq	0xf0(%rsp), %rdi
    00004179: 	cmpq	0x18(%rsp), %rdi
    0000417e: 	je	.Ltmp3589 # Offset: 16766
.Ltmp3604:
    00004180: 	movq	0x100(%rsp), %rax
    00004188: 	leaq	0x1(%rax), %rsi
    0000418c: 	callq	_ZdlPvm@PLT # Offset: 16780
.Ltmp3589:
    00004191: 	movq	0x50(%rsp), %rdi
    00004196: 	cmpq	0x28(%rsp), %rdi
    0000419b: 	je	.Ltmp3592 # Offset: 16795
    0000419d: 	movq	0x60(%rsp), %rax
    000041a2: 	leaq	0x1(%rax), %rsi
    000041a6: 	callq	_ZdlPvm@PLT # Offset: 16806
.Ltmp3592:
    000041ab: 	movq	%rbp, %rdi
    000041ae: 	callq	_Unwind_Resume@PLT # Offset: 16814
.Ltmp3590:
    000041b3: 	movq	0xf0(%rsp), %rdi
    000041bb: 	cmpq	0x18(%rsp), %rdi
    000041c0: 	je	.Ltmp3593 # Offset: 16832
    000041c2: 	movq	0x100(%rsp), %rax
    000041ca: 	leaq	0x1(%rax), %rsi
    000041ce: 	callq	_ZdlPvm@PLT # Offset: 16846
.Ltmp3593:
    000041d3: 	movq	0xd0(%rsp), %rdi
    000041db: 	leaq	0xe0(%rsp), %rax
    000041e3: 	cmpq	%rax, %rdi
    000041e6: 	je	.Ltmp3594 # Offset: 16870
    000041e8: 	movq	0xe0(%rsp), %rax
    000041f0: 	leaq	0x1(%rax), %rsi
    000041f4: 	callq	_ZdlPvm@PLT # Offset: 16884
.Ltmp3594:
    000041f9: 	movq	0xb0(%rsp), %rdi
    00004201: 	leaq	0xc0(%rsp), %rax
    00004209: 	cmpq	%rax, %rdi
    0000420c: 	je	.Ltmp3595 # Offset: 16908
    0000420e: 	movq	0xc0(%rsp), %rax
    00004216: 	leaq	0x1(%rax), %rsi
    0000421a: 	callq	_ZdlPvm@PLT # Offset: 16922
.Ltmp3595:
    0000421f: 	movq	0x90(%rsp), %rdi
    00004227: 	leaq	0xa0(%rsp), %rax
    0000422f: 	cmpq	%rax, %rdi
    00004232: 	je	.Ltmp3596 # Offset: 16946
    00004234: 	movq	0xa0(%rsp), %rax
    0000423c: 	leaq	0x1(%rax), %rsi
    00004240: 	callq	_ZdlPvm@PLT # Offset: 16960
.Ltmp3596:
    00004245: 	movq	0x70(%rsp), %rdi
    0000424a: 	leaq	0x80(%rsp), %rax
    00004252: 	cmpq	%rax, %rdi
    00004255: 	je	.Ltmp3589 # Offset: 16981
    0000425b: 	movq	0x80(%rsp), %rax
    00004263: 	leaq	0x1(%rax), %rsi
    00004267: 	callq	_ZdlPvm@PLT # Offset: 16999
    0000426c: 	jmp	.Ltmp3589 # Offset: 17004
    00004271: 	endbr64
.Ltmp3598:
    00004275: 	movq	%rax, %rbp
    00004278: 	jmp	.Ltmp3597 # Offset: 17016
    0000427d: 	endbr64
    00004281: 	jmp	.Ltmp3598 # Offset: 17025
    00004283: 	endbr64
    00004287: 	jmp	.Ltmp3598 # Offset: 17031
    00004289: 	endbr64
    0000428d: 	jmp	.Ltmp3598 # Offset: 17037
    0000428f: 	endbr64
    00004293: 	jmp	.Ltmp3598 # Offset: 17043
    00004295: 	endbr64
    00004299: 	jmp	.Ltmp3598 # Offset: 17049
    0000429b: 	endbr64
    0000429f: 	jmp	.Ltmp3598 # Offset: 17055
    000042a1: 	endbr64
    000042a5: 	jmp	.Ltmp3598 # Offset: 17061
    000042a7: 	endbr64
.Ltmp3606:
    000042ab: 	movq	%rax, %rbp
    000042ae: 	jmp	.Ltmp3599 # Offset: 17070
    000042b0: 	endbr64
.Ltmp3601:
    000042b4: 	movq	%rax, %rbp
    000042b7: 	jmp	.Ltmp3600 # Offset: 17079
    000042bc: 	endbr64
    000042c0: 	jmp	.Ltmp3601 # Offset: 17088
    000042c2: 	endbr64
    000042c6: 	jmp	.Ltmp3601 # Offset: 17094
    000042c8: 	endbr64
    000042cc: 	jmp	.Ltmp3601 # Offset: 17100
    000042ce: 	endbr64
    000042d2: 	jmp	.Ltmp3601 # Offset: 17106
    000042d4: 	endbr64
    000042d8: 	jmp	.Ltmp3601 # Offset: 17112
    000042da: 	endbr64
    000042de: 	jmp	.Ltmp3601 # Offset: 17118
    000042e0: 	endbr64
    000042e4: 	movq	%rax, %rbp
    000042e7: 	jmp	.Ltmp3596 # Offset: 17127
    000042ec: 	endbr64
    000042f0: 	jmp	.Ltmp3601 # Offset: 17136
    000042f2: 	endbr64
    000042f6: 	movq	%rax, %rbp
    000042f9: 	jmp	.Ltmp3595 # Offset: 17145
    000042fe: 	endbr64
    00004302: 	jmp	.Ltmp3601 # Offset: 17154
    00004304: 	endbr64
    00004308: 	jmp	.Ltmp3601 # Offset: 17160
    0000430a: 	endbr64
    0000430e: 	jmp	.Ltmp3601 # Offset: 17166
    00004310: 	endbr64
    00004314: 	jmp	.Ltmp3601 # Offset: 17172
    00004316: 	endbr64
    0000431a: 	jmp	.Ltmp3601 # Offset: 17178
.Ltmp3599:
    0000431c: 	movq	0xf0(%rsp), %rdi
    00004324: 	cmpq	0x18(%rsp), %rdi
    00004329: 	je	.Ltmp3595 # Offset: 17193
    0000432f: 	movq	0x100(%rsp), %rax
    00004337: 	leaq	0x1(%rax), %rsi
    0000433b: 	callq	_ZdlPvm@PLT # Offset: 17211
    00004340: 	jmp	.Ltmp3595 # Offset: 17216
.Ltmp3600:
    00004345: 	movq	0xf0(%rsp), %rdi
    0000434d: 	cmpq	0x18(%rsp), %rdi
    00004352: 	je	.Ltmp3596 # Offset: 17234
    00004358: 	movq	0x100(%rsp), %rax
    00004360: 	leaq	0x1(%rax), %rsi
    00004364: 	callq	_ZdlPvm@PLT # Offset: 17252
    00004369: 	jmp	.Ltmp3596 # Offset: 17257
    0000436e: 	endbr64
    00004372: 	jmp	.Ltmp3598 # Offset: 17266
    00004377: 	endbr64
    0000437b: 	jmp	.Ltmp3598 # Offset: 17275
    00004380: 	endbr64
    00004384: 	jmp	.Ltmp3598 # Offset: 17284
    00004389: 	endbr64
    0000438d: 	jmp	.Ltmp3598 # Offset: 17293
    00004392: 	endbr64
    00004396: 	movq	%rax, %rbp
    00004399: 	jmp	.Ltmp3602 # Offset: 17305
    0000439b: 	endbr64
.Ltmp3605:
    0000439f: 	movq	%rax, %rbp
    000043a2: 	jmp	.Ltmp3603 # Offset: 17314
.Ltmp3602:
    000043a4: 	movq	0xf0(%rsp), %rdi
    000043ac: 	leaq	0x100(%rsp), %rax
    000043b4: 	cmpq	%rax, %rdi
    000043b7: 	jne	.Ltmp3604 # Offset: 17335
    000043bd: 	jmp	.Ltmp3589 # Offset: 17341
    000043c2: 	endbr64
    000043c6: 	movq	%rax, %rbp
    000043c9: 	jmp	.Ltmp3593 # Offset: 17353
    000043ce: 	endbr64
    000043d2: 	jmp	.Ltmp3605 # Offset: 17362
.Ltmp3603:
    000043d4: 	movq	0xf0(%rsp), %rdi
    000043dc: 	cmpq	0x18(%rsp), %rdi
    000043e1: 	je	.Ltmp3594 # Offset: 17377
    000043e7: 	movq	0x100(%rsp), %rax
    000043ef: 	leaq	0x1(%rax), %rsi
    000043f3: 	callq	_ZdlPvm@PLT # Offset: 17395
    000043f8: 	jmp	.Ltmp3594 # Offset: 17400
    000043fd: 	endbr64
    00004401: 	jmp	.Ltmp3605 # Offset: 17409
    00004403: 	endbr64
    00004407: 	jmp	.Ltmp3605 # Offset: 17415
    00004409: 	endbr64
    0000440d: 	jmp	.Ltmp3605 # Offset: 17421
    0000440f: 	endbr64
    00004413: 	jmp	.Ltmp3605 # Offset: 17427
    00004415: 	endbr64
    00004419: 	jmp	.Ltmp3605 # Offset: 17433
    0000441b: 	endbr64
    0000441f: 	jmp	.Ltmp3605 # Offset: 17439
    00004424: 	endbr64
    00004428: 	jmp	.Ltmp3605 # Offset: 17448
    0000442d: 	endbr64
    00004431: 	jmp	.Ltmp3605 # Offset: 17457
    00004436: 	endbr64
    0000443a: 	jmp	.Ltmp3606 # Offset: 17466
    0000443f: 	endbr64
    00004443: 	jmp	.Ltmp3606 # Offset: 17475
    00004448: 	endbr64
    0000444c: 	jmp	.Ltmp3606 # Offset: 17484
    00004451: 	endbr64
    00004455: 	jmp	.Ltmp3606 # Offset: 17493
    0000445a: 	endbr64
    0000445e: 	jmp	.Ltmp3606 # Offset: 17502
    00004463: 	endbr64
    00004467: 	jmp	.Ltmp3606 # Offset: 17511
    0000446c: 	endbr64
    00004470: 	jmp	.Ltmp3606 # Offset: 17520
    00004475: 	endbr64
    00004479: 	jmp	.Ltmp3606 # Offset: 17529
    0000447e: 	endbr64
    00004482: 	jmp	.Ltmp3605 # Offset: 17538
    00004487: 	endbr64
    0000448b: 	jmp	.Ltmp3606 # Offset: 17547
    00004490: 	endbr64
    00004494: 	movq	%rax, %rbp
    00004497: 	jmp	.Ltmp3594 # Offset: 17559
    0000449c: 	endbr64
    000044a0: 	jmp	.Ltmp3606 # Offset: 17568
    000044a5: 	endbr64
    000044a9: 	jmp	.Ltmp3605 # Offset: 17577
    000044ae: 	endbr64
    000044b2: 	jmp	.Ltmp3605 # Offset: 17586
    000044b7: 	endbr64
    000044bb: 	jmp	.Ltmp3606 # Offset: 17595
    000044c0: 	endbr64
    000044c4: 	jmp	.Ltmp3606 # Offset: 17604
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIiEvd"

Binary Function "_Z16TestUnrolledTypeIjLi4EEvPT_S0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 183
  State       : disassembled
  Address     : 0x31940
  Size        : 0x1553
  MaxSize     : 0x1560
  Offset      : 0x31940
  Section     : .text
  Orc Section : .local.text._Z16TestUnrolledTypeIjLi4EEvPT_S0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0182:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	leaq	DATAat0x4d004(%rip), %r14
    0000000f: 	pushq	%r13
    00000011: 	xorl	%r13d, %r13d
    00000014: 	pushq	%r12
    00000016: 	movl	%esi, %r12d
    00000019: 	movq	%rdx, %rsi
    0000001c: 	pushq	%rbp
    0000001d: 	pushq	%rbx
    0000001e: 	movq	%rdi, %rbx
    00000021: 	leaq	0x7cf0(%rbx), %rbp
    00000028: 	subq	$0xa8, %rsp
    0000002f: 	movq	%rdx, (%rsp)
    00000033: 	leaq	0x70(%rsp), %r15
    00000038: 	leaq	DATAat0x4d1e4(%rip), %rdx
    0000003f: 	movq	%r15, %rdi
    00000042: 	movq	%fs:0x28, %rax
    0000004b: 	movq	%rax, 0x98(%rsp)
    00000053: 	xorl	%eax, %eax
    00000055: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 85
    0000005a: 	callq	clock@PLT # Offset: 90
    0000005f: 	movl	iterations(%rip), %ecx
    00000065: 	movq	%rax, start_time(%rip)
    0000006c: 	testl	%ecx, %ecx
    0000006e: 	jle	.Ltmp3607 # Offset: 110
    00000074: 	nopl	(%rax) # Size: 4
.Ltmp3610:
    00000078: 	movl	(%rbx), %edx
    0000007a: 	movq	%rbx, %rax
    0000007d: 	subl	0x4(%rbx), %edx
    00000080: 	pxor	%xmm0, %xmm0
    00000084: 	nopl	(%rax) # Size: 4
.Ltmp3608:
    00000088: 	movdqu	(%rax), %xmm1
    0000008c: 	movdqu	0x4(%rax), %xmm7
    00000091: 	addq	$0x10, %rax
    00000095: 	psubd	%xmm7, %xmm1
    00000099: 	pslld	$0x2, %xmm1
    0000009e: 	paddd	%xmm1, %xmm0
    000000a2: 	cmpq	%rax, %rbp
    000000a5: 	jne	.Ltmp3608 # Offset: 165
    000000a7: 	movdqa	%xmm0, %xmm1
    000000ab: 	subl	0x7cfc(%rbx), %edx
    000000b1: 	movq	0x7cf4(%rbx), %xmm2
    000000b9: 	psrldq	$0x8, %xmm1
    000000be: 	addl	0x7cf8(%rbx), %edx
    000000c4: 	paddd	%xmm1, %xmm0
    000000c8: 	movq	0x7cf0(%rbx), %xmm1
    000000d0: 	psubd	%xmm2, %xmm1
    000000d4: 	pslld	$0x2, %xmm1
    000000d9: 	movd	%xmm1, %eax
    000000dd: 	pshufd	$0xe5, %xmm1, %xmm3
    000000e2: 	movdqa	%xmm0, %xmm1
    000000e6: 	movd	%xmm3, %esi
    000000ea: 	psrldq	$0x4, %xmm1
    000000ef: 	addl	%esi, %eax
    000000f1: 	paddd	%xmm1, %xmm0
    000000f5: 	leal	(%rax,%rdx,4), %edx
    000000f8: 	movd	%xmm0, %eax
    000000fc: 	addl	%eax, %edx
    000000fe: 	jne	.Ltmp3609 # Offset: 254
.Ltmp3702:
    00000104: 	addl	$0x1, %r13d
    00000108: 	cmpl	%ecx, %r13d
    0000010b: 	jl	.Ltmp3610 # Offset: 267
.Ltmp3607:
    00000111: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000118: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbp
    0000011f: 	subq	$0x20, %rax
    00000123: 	cmpq	%rax, %rbp
    00000126: 	je	.Ltmp3611 # Offset: 294
    0000012c: 	leaq	0x10(%rbp), %rdi
    00000130: 	movq	0x78(%rsp), %r13
    00000135: 	movq	%rdi, (%rbp)
    00000139: 	movq	0x70(%rsp), %r14
    0000013e: 	movq	%r14, %rax
    00000141: 	addq	%r13, %rax
    00000144: 	je	.Ltmp3612 # Offset: 324
    00000146: 	testq	%r14, %r14
    00000149: 	je	.Ltmp3613 # Offset: 329
.Ltmp3612:
    0000014f: 	movq	%r13, 0x28(%rsp)
    00000154: 	cmpq	$0xf, %r13
    00000158: 	ja	.Ltmp3614 # Offset: 344
    0000015e: 	cmpq	$0x1, %r13
    00000162: 	jne	.Ltmp3615 # Offset: 354
    00000168: 	movzbl	(%r14), %eax
    0000016c: 	movb	%al, 0x10(%rbp)
.Ltmp3703:
    0000016f: 	movq	%r13, 0x8(%rbp)
    00000173: 	movb	$0x0, (%rdi,%r13)
    00000178: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000017f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000186: 	addq	$0x20, %rax
    0000018a: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000191: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000198: 	je	.Ltmp3616 # Offset: 408
.Ltmp3719:
    0000019e: 	movq	-0x20(%rax), %rbp
    000001a2: 	callq	clock@PLT # Offset: 418
    000001a7: 	pxor	%xmm0, %xmm0
    000001ab: 	movq	%rax, end_time(%rip)
    000001b2: 	movq	%rbp, %rdi
    000001b5: 	subq	start_time(%rip), %rax
    000001bc: 	cvtsi2sd	%rax, %xmm0
    000001c1: 	divsd	DATAat0x4d640(%rip), %xmm0
    000001c9: 	callq	_Z13record_resultdPKc # Offset: 457
    000001ce: 	movq	0x70(%rsp), %rdi
    000001d3: 	leaq	0x80(%rsp), %rax
    000001db: 	movq	%rax, 0x8(%rsp)
    000001e0: 	cmpq	%rax, %rdi
    000001e3: 	je	.Ltmp3617 # Offset: 483
    000001e5: 	movq	0x80(%rsp), %rax
    000001ed: 	leaq	0x1(%rax), %rsi
    000001f1: 	callq	_ZdlPvm@PLT # Offset: 497
.Ltmp3617:
    000001f6: 	movq	(%rsp), %rsi
    000001fa: 	leaq	DATAat0x4d1f1(%rip), %rdx
    00000201: 	movq	%r15, %rdi
    00000204: 	xorl	%r13d, %r13d
    00000207: 	leaq	0x7cf0(%rbx), %rbp
    0000020e: 	leaq	DATAat0x4d004(%rip), %r14
    00000215: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 533
    0000021a: 	callq	clock@PLT # Offset: 538
    0000021f: 	movl	iterations(%rip), %ecx
    00000225: 	movq	%rax, start_time(%rip)
    0000022c: 	testl	%ecx, %ecx
    0000022e: 	jle	.Ltmp3618 # Offset: 558
    00000234: 	nopl	(%rax) # Size: 4
.Ltmp3621:
    00000238: 	movl	(%rbx), %edx
    0000023a: 	movq	%rbx, %rax
    0000023d: 	subl	0x4(%rbx), %edx
    00000240: 	pxor	%xmm0, %xmm0
    00000244: 	nopl	(%rax) # Size: 4
.Ltmp3619:
    00000248: 	movdqu	(%rax), %xmm1
    0000024c: 	movdqu	0x4(%rax), %xmm4
    00000251: 	addq	$0x10, %rax
    00000255: 	psubd	%xmm4, %xmm1
    00000259: 	pslld	$0x2, %xmm1
    0000025e: 	paddd	%xmm1, %xmm0
    00000262: 	cmpq	%rax, %rbp
    00000265: 	jne	.Ltmp3619 # Offset: 613
    00000267: 	movdqa	%xmm0, %xmm1
    0000026b: 	subl	0x7cfc(%rbx), %edx
    00000271: 	movq	0x7cf4(%rbx), %xmm2
    00000279: 	psrldq	$0x8, %xmm1
    0000027e: 	addl	0x7cf8(%rbx), %edx
    00000284: 	paddd	%xmm1, %xmm0
    00000288: 	movq	0x7cf0(%rbx), %xmm1
    00000290: 	psubd	%xmm2, %xmm1
    00000294: 	pslld	$0x2, %xmm1
    00000299: 	movd	%xmm1, %eax
    0000029d: 	pshufd	$0xe5, %xmm1, %xmm4
    000002a2: 	movdqa	%xmm0, %xmm1
    000002a6: 	movd	%xmm4, %esi
    000002aa: 	psrldq	$0x4, %xmm1
    000002af: 	addl	%esi, %eax
    000002b1: 	paddd	%xmm1, %xmm0
    000002b5: 	leal	(%rax,%rdx,4), %edx
    000002b8: 	movd	%xmm0, %eax
    000002bc: 	addl	%eax, %edx
    000002be: 	jne	.Ltmp3620 # Offset: 702
.Ltmp3704:
    000002c4: 	addl	$0x1, %r13d
    000002c8: 	cmpl	%ecx, %r13d
    000002cb: 	jl	.Ltmp3621 # Offset: 715
.Ltmp3618:
    000002d1: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000002d8: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbp
    000002df: 	subq	$0x20, %rax
    000002e3: 	cmpq	%rax, %rbp
    000002e6: 	je	.Ltmp3622 # Offset: 742
    000002ec: 	leaq	0x10(%rbp), %rdi
    000002f0: 	movq	0x78(%rsp), %r13
    000002f5: 	movq	%rdi, (%rbp)
    000002f9: 	movq	0x70(%rsp), %r14
    000002fe: 	movq	%r14, %rax
    00000301: 	addq	%r13, %rax
    00000304: 	je	.Ltmp3623 # Offset: 772
    00000306: 	testq	%r14, %r14
    00000309: 	je	.Ltmp3624 # Offset: 777
.Ltmp3623:
    0000030f: 	movq	%r13, 0x28(%rsp)
    00000314: 	cmpq	$0xf, %r13
    00000318: 	ja	.Ltmp3625 # Offset: 792
    0000031e: 	cmpq	$0x1, %r13
    00000322: 	jne	.Ltmp3626 # Offset: 802
    00000328: 	movzbl	(%r14), %eax
    0000032c: 	movb	%al, 0x10(%rbp)
.Ltmp3732:
    0000032f: 	movq	%r13, 0x8(%rbp)
    00000333: 	movb	$0x0, (%rdi,%r13)
    00000338: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000033f: 	addq	$0x20, %rax
    00000343: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp3726:
    0000034a: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000351: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000358: 	je	.Ltmp3627 # Offset: 856
.Ltmp3721:
    0000035e: 	movq	-0x20(%rax), %rbp
    00000362: 	callq	clock@PLT # Offset: 866
    00000367: 	pxor	%xmm0, %xmm0
    0000036b: 	movq	%rax, end_time(%rip)
    00000372: 	movq	%rbp, %rdi
    00000375: 	subq	start_time(%rip), %rax
    0000037c: 	cvtsi2sd	%rax, %xmm0
    00000381: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000389: 	callq	_Z13record_resultdPKc # Offset: 905
    0000038e: 	movq	0x70(%rsp), %rdi
    00000393: 	cmpq	0x8(%rsp), %rdi
    00000398: 	je	.Ltmp3628 # Offset: 920
    0000039a: 	movq	0x80(%rsp), %rax
    000003a2: 	leaq	0x1(%rax), %rsi
    000003a6: 	callq	_ZdlPvm@PLT # Offset: 934
.Ltmp3628:
    000003ab: 	movq	(%rsp), %rsi
    000003af: 	leaq	DATAat0x4d22b(%rip), %rdx
    000003b6: 	movq	%r15, %rdi
    000003b9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 953
    000003be: 	movq	%r15, %rcx
    000003c1: 	movl	%r12d, %edx
    000003c4: 	movl	$0x1f40, %esi
    000003c9: 	movq	%rbx, %rdi
    000003cc: 	callq	_Z9test_CSENIj14custom_cse_addIjELi4EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 972
    000003d1: 	movq	0x70(%rsp), %rdi
    000003d6: 	cmpq	0x8(%rsp), %rdi
    000003db: 	je	.Ltmp3629 # Offset: 987
    000003dd: 	movq	0x80(%rsp), %rax
    000003e5: 	leaq	0x1(%rax), %rsi
    000003e9: 	callq	_ZdlPvm@PLT # Offset: 1001
.Ltmp3629:
    000003ee: 	leaq	0x40(%rsp), %rax
    000003f3: 	movq	%rax, 0x10(%rsp)
    000003f8: 	movq	%rax, 0x30(%rsp)
    000003fd: 	movq	(%rsp), %rax
    00000401: 	movq	(%rax), %rbp
    00000404: 	movq	0x8(%rax), %r13
    00000408: 	movq	%rbp, %rax
    0000040b: 	addq	%r13, %rax
    0000040e: 	je	.Ltmp3630 # Offset: 1038
    00000410: 	testq	%rbp, %rbp
    00000413: 	je	.Ltmp3631 # Offset: 1043
.Ltmp3630:
    00000419: 	movq	%r13, 0x28(%rsp)
    0000041e: 	cmpq	$0xf, %r13
    00000422: 	ja	.Ltmp3632 # Offset: 1058
    00000428: 	cmpq	$0x1, %r13
    0000042c: 	jne	.Ltmp3633 # Offset: 1068
    00000432: 	movzbl	(%rbp), %eax
    00000436: 	movb	%al, 0x40(%rsp)
    0000043a: 	movq	0x10(%rsp), %rax
.Ltmp3713:
    0000043f: 	movq	%r13, 0x38(%rsp)
    00000444: 	movb	$0x0, (%rax,%r13)
    00000449: 	movabsq	$0x3fffffffffffffff, %rax
    00000453: 	subq	0x38(%rsp), %rax
    00000458: 	cmpq	$0x11, %rax
    0000045c: 	jbe	.Ltmp3634 # Offset: 1116
    00000462: 	leaq	0x30(%rsp), %rax
    00000467: 	movl	$0x12, %edx
    0000046c: 	leaq	DATAat0x4d234(%rip), %rsi
    00000473: 	movq	%rax, %rdi
    00000476: 	movq	%rax, 0x18(%rsp)
    0000047b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1147
    00000480: 	callq	clock@PLT # Offset: 1152
    00000485: 	movl	iterations(%rip), %ecx
    0000048b: 	xorl	%r13d, %r13d
    0000048e: 	leaq	0x7cf0(%rbx), %rbp
    00000495: 	movq	%rax, start_time(%rip)
    0000049c: 	leaq	DATAat0x4d004(%rip), %r14
    000004a3: 	testl	%ecx, %ecx
    000004a5: 	jle	.Ltmp3635 # Offset: 1189
    000004ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3638:
    000004b0: 	movl	(%rbx), %edx
    000004b2: 	movq	%rbx, %rax
    000004b5: 	subl	0x4(%rbx), %edx
    000004b8: 	pxor	%xmm0, %xmm0
    000004bc: 	nopl	(%rax) # Size: 4
.Ltmp3636:
    000004c0: 	movdqu	(%rax), %xmm1
    000004c4: 	movdqu	0x4(%rax), %xmm5
    000004c9: 	addq	$0x10, %rax
    000004cd: 	psubd	%xmm5, %xmm1
    000004d1: 	pslld	$0x2, %xmm1
    000004d6: 	paddd	%xmm1, %xmm0
    000004da: 	cmpq	%rax, %rbp
    000004dd: 	jne	.Ltmp3636 # Offset: 1245
    000004df: 	movdqa	%xmm0, %xmm1
    000004e3: 	subl	0x7cfc(%rbx), %edx
    000004e9: 	movq	0x7cf4(%rbx), %xmm2
    000004f1: 	psrldq	$0x8, %xmm1
    000004f6: 	addl	0x7cf8(%rbx), %edx
    000004fc: 	paddd	%xmm1, %xmm0
    00000500: 	movq	0x7cf0(%rbx), %xmm1
    00000508: 	psubd	%xmm2, %xmm1
    0000050c: 	pslld	$0x2, %xmm1
    00000511: 	movd	%xmm1, %eax
    00000515: 	pshufd	$0xe5, %xmm1, %xmm5
    0000051a: 	movdqa	%xmm0, %xmm1
    0000051e: 	movd	%xmm5, %esi
    00000522: 	psrldq	$0x4, %xmm1
    00000527: 	addl	%esi, %eax
    00000529: 	paddd	%xmm1, %xmm0
    0000052d: 	leal	(%rax,%rdx,4), %edx
    00000530: 	movd	%xmm0, %eax
    00000534: 	addl	%eax, %edx
    00000536: 	jne	.Ltmp3637 # Offset: 1334
.Ltmp3705:
    0000053c: 	addl	$0x1, %r13d
    00000540: 	cmpl	%ecx, %r13d
    00000543: 	jl	.Ltmp3638 # Offset: 1347
.Ltmp3635:
    00000549: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000550: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbp
    00000557: 	subq	$0x20, %rax
    0000055b: 	cmpq	%rax, %rbp
    0000055e: 	je	.Ltmp3639 # Offset: 1374
    00000564: 	leaq	0x10(%rbp), %rdi
    00000568: 	movq	0x38(%rsp), %r13
    0000056d: 	movq	%rdi, (%rbp)
    00000571: 	movq	0x30(%rsp), %r14
    00000576: 	movq	%r14, %rax
    00000579: 	addq	%r13, %rax
    0000057c: 	je	.Ltmp3640 # Offset: 1404
    0000057e: 	testq	%r14, %r14
    00000581: 	je	.Ltmp3641 # Offset: 1409
.Ltmp3640:
    00000587: 	movq	%r13, 0x28(%rsp)
    0000058c: 	cmpq	$0xf, %r13
    00000590: 	ja	.Ltmp3642 # Offset: 1424
    00000596: 	cmpq	$0x1, %r13
    0000059a: 	jne	.Ltmp3643 # Offset: 1434
    000005a0: 	movzbl	(%r14), %eax
    000005a4: 	movb	%al, 0x10(%rbp)
.Ltmp3728:
    000005a7: 	movq	%r13, 0x8(%rbp)
    000005ab: 	movb	$0x0, (%rdi,%r13)
    000005b0: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000005b7: 	addq	$0x20, %rax
    000005bb: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp3727:
    000005c2: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000005c9: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000005d0: 	je	.Ltmp3644 # Offset: 1488
.Ltmp3724:
    000005d6: 	movq	-0x20(%rax), %rbp
    000005da: 	callq	clock@PLT # Offset: 1498
    000005df: 	pxor	%xmm0, %xmm0
    000005e3: 	movq	%rax, end_time(%rip)
    000005ea: 	movq	%rbp, %rdi
    000005ed: 	subq	start_time(%rip), %rax
    000005f4: 	cvtsi2sd	%rax, %xmm0
    000005f9: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000601: 	callq	_Z13record_resultdPKc # Offset: 1537
    00000606: 	movq	0x30(%rsp), %rdi
    0000060b: 	cmpq	0x10(%rsp), %rdi
    00000610: 	je	.Ltmp3645 # Offset: 1552
    00000612: 	movq	0x40(%rsp), %rax
    00000617: 	leaq	0x1(%rax), %rsi
    0000061b: 	callq	_ZdlPvm@PLT # Offset: 1563
.Ltmp3645:
    00000620: 	movq	(%rsp), %rax
    00000624: 	leaq	0x60(%rsp), %rbp
    00000629: 	movq	%rbp, 0x50(%rsp)
    0000062e: 	movq	(%rax), %r14
    00000631: 	movq	0x8(%rax), %r13
    00000635: 	movq	%r14, %rax
    00000638: 	addq	%r13, %rax
    0000063b: 	je	.Ltmp3646 # Offset: 1595
    0000063d: 	testq	%r14, %r14
    00000640: 	je	.Ltmp3631 # Offset: 1600
.Ltmp3646:
    00000646: 	movq	%r13, 0x28(%rsp)
    0000064b: 	cmpq	$0xf, %r13
    0000064f: 	ja	.Ltmp3647 # Offset: 1615
    00000655: 	cmpq	$0x1, %r13
    00000659: 	jne	.Ltmp3648 # Offset: 1625
    0000065f: 	movzbl	(%r14), %eax
    00000663: 	movb	%al, 0x60(%rsp)
    00000667: 	movq	%rbp, %rax
.Ltmp3715:
    0000066a: 	movq	%r13, 0x58(%rsp)
    0000066f: 	movb	$0x0, (%rax,%r13)
    00000674: 	movabsq	$0x3fffffffffffffff, %rax
    0000067e: 	subq	0x58(%rsp), %rax
    00000683: 	cmpq	$0x8, %rax
    00000687: 	jbe	.Ltmp3649 # Offset: 1671
    0000068d: 	leaq	0x50(%rsp), %r13
    00000692: 	movl	$0x9, %edx
    00000697: 	leaq	DATAat0x4d24b(%rip), %rsi
    0000069e: 	movq	%r13, %rdi
    000006a1: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1697
    000006a6: 	movq	%r13, %rcx
    000006a9: 	movl	%r12d, %edx
    000006ac: 	movl	$0x1f40, %esi
    000006b1: 	movq	%rbx, %rdi
    000006b4: 	callq	_Z9test_CSENIj14custom_cse_subIjELi4EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1716
    000006b9: 	movq	0x50(%rsp), %rdi
    000006be: 	cmpq	%rbp, %rdi
    000006c1: 	je	.Ltmp3650 # Offset: 1729
    000006c3: 	movq	0x60(%rsp), %rax
    000006c8: 	leaq	0x1(%rax), %rsi
    000006cc: 	callq	_ZdlPvm@PLT # Offset: 1740
.Ltmp3650:
    000006d1: 	movq	(%rsp), %rsi
    000006d5: 	leaq	DATAat0x4d259(%rip), %rdx
    000006dc: 	movq	%r15, %rdi
    000006df: 	xorl	%r13d, %r13d
    000006e2: 	leaq	0x7cf0(%rbx), %rbp
    000006e9: 	leaq	DATAat0x4d004(%rip), %r14
    000006f0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1776
    000006f5: 	callq	clock@PLT # Offset: 1781
    000006fa: 	movl	iterations(%rip), %ecx
    00000700: 	movq	%rax, start_time(%rip)
    00000707: 	testl	%ecx, %ecx
    00000709: 	jle	.Ltmp3651 # Offset: 1801
    0000070f: 	nop # Size: 1
.Ltmp3654:
    00000710: 	movl	(%rbx), %edx
    00000712: 	movq	%rbx, %rax
    00000715: 	subl	0x4(%rbx), %edx
    00000718: 	pxor	%xmm0, %xmm0
    0000071c: 	nopl	(%rax) # Size: 4
.Ltmp3652:
    00000720: 	movdqu	(%rax), %xmm1
    00000724: 	movdqu	0x4(%rax), %xmm3
    00000729: 	addq	$0x10, %rax
    0000072d: 	psubd	%xmm3, %xmm1
    00000731: 	pslld	$0x2, %xmm1
    00000736: 	paddd	%xmm1, %xmm0
    0000073a: 	cmpq	%rbp, %rax
    0000073d: 	jne	.Ltmp3652 # Offset: 1853
    0000073f: 	movdqa	%xmm0, %xmm1
    00000743: 	subl	0x7cfc(%rbx), %edx
    00000749: 	movq	0x7cf4(%rbx), %xmm2
    00000751: 	psrldq	$0x8, %xmm1
    00000756: 	addl	0x7cf8(%rbx), %edx
    0000075c: 	paddd	%xmm1, %xmm0
    00000760: 	movq	0x7cf0(%rbx), %xmm1
    00000768: 	psubd	%xmm2, %xmm1
    0000076c: 	pslld	$0x2, %xmm1
    00000771: 	movd	%xmm1, %eax
    00000775: 	pshufd	$0xe5, %xmm1, %xmm6
    0000077a: 	movdqa	%xmm0, %xmm1
    0000077e: 	movd	%xmm6, %esi
    00000782: 	psrldq	$0x4, %xmm1
    00000787: 	addl	%esi, %eax
    00000789: 	paddd	%xmm1, %xmm0
    0000078d: 	leal	(%rax,%rdx,4), %edx
    00000790: 	movd	%xmm0, %eax
    00000794: 	addl	%eax, %edx
    00000796: 	jne	.Ltmp3653 # Offset: 1942
.Ltmp3707:
    0000079c: 	addl	$0x1, %r13d
    000007a0: 	cmpl	%ecx, %r13d
    000007a3: 	jl	.Ltmp3654 # Offset: 1955
.Ltmp3651:
    000007a9: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000007b0: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbp
    000007b7: 	subq	$0x20, %rax
    000007bb: 	cmpq	%rax, %rbp
    000007be: 	je	.Ltmp3655 # Offset: 1982
    000007c4: 	leaq	0x10(%rbp), %rdi
    000007c8: 	movq	0x78(%rsp), %r13
    000007cd: 	movq	%rdi, (%rbp)
    000007d1: 	movq	0x70(%rsp), %r14
    000007d6: 	movq	%r14, %rax
    000007d9: 	addq	%r13, %rax
    000007dc: 	je	.Ltmp3656 # Offset: 2012
    000007de: 	testq	%r14, %r14
    000007e1: 	je	.Ltmp3657 # Offset: 2017
.Ltmp3656:
    000007e7: 	movq	%r13, 0x28(%rsp)
    000007ec: 	cmpq	$0xf, %r13
    000007f0: 	ja	.Ltmp3658 # Offset: 2032
    000007f6: 	cmpq	$0x1, %r13
    000007fa: 	jne	.Ltmp3659 # Offset: 2042
    00000800: 	movzbl	(%r14), %eax
    00000804: 	movb	%al, 0x10(%rbp)
.Ltmp3737:
    00000807: 	movq	%r13, 0x8(%rbp)
    0000080b: 	movb	$0x0, (%rdi,%r13)
    00000810: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000817: 	addq	$0x20, %rax
    0000081b: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp3717:
    00000822: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000829: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000830: 	je	.Ltmp3660 # Offset: 2096
.Ltmp3716:
    00000836: 	movq	-0x20(%rax), %rbp
    0000083a: 	callq	clock@PLT # Offset: 2106
    0000083f: 	pxor	%xmm0, %xmm0
    00000843: 	movq	%rax, end_time(%rip)
    0000084a: 	movq	%rbp, %rdi
    0000084d: 	subq	start_time(%rip), %rax
    00000854: 	cvtsi2sd	%rax, %xmm0
    00000859: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000861: 	callq	_Z13record_resultdPKc # Offset: 2145
    00000866: 	movq	0x70(%rsp), %rdi
    0000086b: 	cmpq	0x8(%rsp), %rdi
    00000870: 	je	.Ltmp3661 # Offset: 2160
    00000872: 	movq	0x80(%rsp), %rax
    0000087a: 	leaq	0x1(%rax), %rsi
    0000087e: 	callq	_ZdlPvm@PLT # Offset: 2174
.Ltmp3661:
    00000883: 	movq	(%rsp), %rsi
    00000887: 	leaq	DATAat0x4d270(%rip), %rdx
    0000088e: 	movq	%r15, %rdi
    00000891: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2193
    00000896: 	movq	%r15, %rcx
    00000899: 	movl	%r12d, %edx
    0000089c: 	movl	$0x1f40, %esi
    000008a1: 	movq	%rbx, %rdi
    000008a4: 	callq	_Z9test_CSENIj14custom_cse_mulIjELi4EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2212
    000008a9: 	movq	0x70(%rsp), %rdi
    000008ae: 	cmpq	0x8(%rsp), %rdi
    000008b3: 	je	.Ltmp3662 # Offset: 2227
    000008b5: 	movq	0x80(%rsp), %rax
    000008bd: 	leaq	0x1(%rax), %rsi
    000008c1: 	callq	_ZdlPvm@PLT # Offset: 2241
.Ltmp3662:
    000008c6: 	movq	(%rsp), %rsi
    000008ca: 	leaq	DATAat0x4d27e(%rip), %rdx
    000008d1: 	movq	%r15, %rdi
    000008d4: 	xorl	%r13d, %r13d
    000008d7: 	leaq	0x7cf0(%rbx), %rbp
    000008de: 	leaq	DATAat0x4d004(%rip), %r14
    000008e5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2277
    000008ea: 	callq	clock@PLT # Offset: 2282
    000008ef: 	movl	iterations(%rip), %ecx
    000008f5: 	movq	%rax, start_time(%rip)
    000008fc: 	testl	%ecx, %ecx
    000008fe: 	jle	.Ltmp3663 # Offset: 2302
    00000904: 	nopl	(%rax) # Size: 4
.Ltmp3666:
    00000908: 	movl	(%rbx), %edx
    0000090a: 	movq	%rbx, %rax
    0000090d: 	subl	0x4(%rbx), %edx
    00000910: 	pxor	%xmm0, %xmm0
    00000914: 	nopl	(%rax) # Size: 4
.Ltmp3664:
    00000918: 	movdqu	(%rax), %xmm1
    0000091c: 	movdqu	0x4(%rax), %xmm4
    00000921: 	addq	$0x10, %rax
    00000925: 	psubd	%xmm4, %xmm1
    00000929: 	pslld	$0x2, %xmm1
    0000092e: 	paddd	%xmm1, %xmm0
    00000932: 	cmpq	%rax, %rbp
    00000935: 	jne	.Ltmp3664 # Offset: 2357
    00000937: 	movdqa	%xmm0, %xmm1
    0000093b: 	subl	0x7cfc(%rbx), %edx
    00000941: 	movq	0x7cf4(%rbx), %xmm2
    00000949: 	psrldq	$0x8, %xmm1
    0000094e: 	addl	0x7cf8(%rbx), %edx
    00000954: 	paddd	%xmm1, %xmm0
    00000958: 	movq	0x7cf0(%rbx), %xmm1
    00000960: 	psubd	%xmm2, %xmm1
    00000964: 	pslld	$0x2, %xmm1
    00000969: 	movd	%xmm1, %eax
    0000096d: 	pshufd	$0xe5, %xmm1, %xmm7
    00000972: 	movdqa	%xmm0, %xmm1
    00000976: 	movd	%xmm7, %esi
    0000097a: 	psrldq	$0x4, %xmm1
    0000097f: 	addl	%esi, %eax
    00000981: 	paddd	%xmm1, %xmm0
    00000985: 	leal	(%rax,%rdx,4), %edx
    00000988: 	movd	%xmm0, %eax
    0000098c: 	addl	%eax, %edx
    0000098e: 	jne	.Ltmp3665 # Offset: 2446
.Ltmp3706:
    00000994: 	addl	$0x1, %r13d
    00000998: 	cmpl	%ecx, %r13d
    0000099b: 	jl	.Ltmp3666 # Offset: 2459
.Ltmp3663:
    000009a1: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000009a8: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbp
    000009af: 	subq	$0x20, %rax
    000009b3: 	cmpq	%rax, %rbp
    000009b6: 	je	.Ltmp3667 # Offset: 2486
    000009bc: 	leaq	0x10(%rbp), %rdi
    000009c0: 	movq	0x78(%rsp), %r13
    000009c5: 	movq	%rdi, (%rbp)
    000009c9: 	movq	0x70(%rsp), %r14
    000009ce: 	movq	%r14, %rax
    000009d1: 	addq	%r13, %rax
    000009d4: 	je	.Ltmp3668 # Offset: 2516
    000009d6: 	testq	%r14, %r14
    000009d9: 	je	.Ltmp3669 # Offset: 2521
.Ltmp3668:
    000009df: 	movq	%r13, 0x28(%rsp)
    000009e4: 	cmpq	$0xf, %r13
    000009e8: 	ja	.Ltmp3670 # Offset: 2536
    000009ee: 	cmpq	$0x1, %r13
    000009f2: 	jne	.Ltmp3671 # Offset: 2546
    000009f8: 	movzbl	(%r14), %eax
    000009fc: 	movb	%al, 0x10(%rbp)
.Ltmp3730:
    000009ff: 	movq	%r13, 0x8(%rbp)
    00000a03: 	movb	$0x0, (%rdi,%r13)
    00000a08: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000a0f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000a16: 	addq	$0x20, %rax
    00000a1a: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000a21: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000a28: 	je	.Ltmp3672 # Offset: 2600
.Ltmp3720:
    00000a2e: 	movq	-0x20(%rax), %rbp
    00000a32: 	callq	clock@PLT # Offset: 2610
    00000a37: 	pxor	%xmm0, %xmm0
    00000a3b: 	movq	%rax, end_time(%rip)
    00000a42: 	movq	%rbp, %rdi
    00000a45: 	subq	start_time(%rip), %rax
    00000a4c: 	cvtsi2sd	%rax, %xmm0
    00000a51: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000a59: 	callq	_Z13record_resultdPKc # Offset: 2649
    00000a5e: 	movq	0x70(%rsp), %rdi
    00000a63: 	cmpq	0x8(%rsp), %rdi
    00000a68: 	je	.Ltmp3673 # Offset: 2664
    00000a6a: 	movq	0x80(%rsp), %rax
    00000a72: 	leaq	0x1(%rax), %rsi
    00000a76: 	callq	_ZdlPvm@PLT # Offset: 2678
.Ltmp3673:
    00000a7b: 	movq	(%rsp), %rsi
    00000a7f: 	leaq	DATAat0x4d293(%rip), %rdx
    00000a86: 	movq	%r15, %rdi
    00000a89: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2697
    00000a8e: 	movq	%r15, %rcx
    00000a91: 	movl	%r12d, %edx
    00000a94: 	movl	$0x1f40, %esi
    00000a99: 	movq	%rbx, %rdi
    00000a9c: 	callq	_Z9test_CSENIj14custom_cse_divIjELi4EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2716
    00000aa1: 	movq	0x70(%rsp), %rdi
    00000aa6: 	cmpq	0x8(%rsp), %rdi
    00000aab: 	je	.Ltmp3674 # Offset: 2731
    00000aad: 	movq	0x80(%rsp), %rax
    00000ab5: 	leaq	0x1(%rax), %rsi
    00000ab9: 	callq	_ZdlPvm@PLT # Offset: 2745
.Ltmp3674:
    00000abe: 	movq	(%rsp), %rsi
    00000ac2: 	leaq	DATAat0x4d29f(%rip), %rdx
    00000ac9: 	movq	%r15, %rdi
    00000acc: 	xorl	%r13d, %r13d
    00000acf: 	leaq	0x7cf0(%rbx), %rbp
    00000ad6: 	leaq	DATAat0x4d004(%rip), %r14
    00000add: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2781
    00000ae2: 	callq	clock@PLT # Offset: 2786
    00000ae7: 	movl	iterations(%rip), %ecx
    00000aed: 	movq	%rax, start_time(%rip)
    00000af4: 	testl	%ecx, %ecx
    00000af6: 	jle	.Ltmp3675 # Offset: 2806
    00000afc: 	nopl	(%rax) # Size: 4
.Ltmp3678:
    00000b00: 	movl	(%rbx), %edx
    00000b02: 	movq	%rbx, %rax
    00000b05: 	subl	0x4(%rbx), %edx
    00000b08: 	pxor	%xmm0, %xmm0
    00000b0c: 	nopl	(%rax) # Size: 4
.Ltmp3676:
    00000b10: 	movdqu	(%rax), %xmm1
    00000b14: 	movdqu	0x4(%rax), %xmm5
    00000b19: 	addq	$0x10, %rax
    00000b1d: 	psubd	%xmm5, %xmm1
    00000b21: 	pslld	$0x2, %xmm1
    00000b26: 	paddd	%xmm1, %xmm0
    00000b2a: 	cmpq	%rax, %rbp
    00000b2d: 	jne	.Ltmp3676 # Offset: 2861
    00000b2f: 	movdqa	%xmm0, %xmm1
    00000b33: 	subl	0x7cfc(%rbx), %edx
    00000b39: 	movq	0x7cf4(%rbx), %xmm2
    00000b41: 	psrldq	$0x8, %xmm1
    00000b46: 	addl	0x7cf8(%rbx), %edx
    00000b4c: 	paddd	%xmm1, %xmm0
    00000b50: 	movq	0x7cf0(%rbx), %xmm1
    00000b58: 	psubd	%xmm2, %xmm1
    00000b5c: 	pslld	$0x2, %xmm1
    00000b61: 	movd	%xmm1, %eax
    00000b65: 	pshufd	$0xe5, %xmm1, %xmm6
    00000b6a: 	movdqa	%xmm0, %xmm1
    00000b6e: 	movd	%xmm6, %esi
    00000b72: 	psrldq	$0x4, %xmm1
    00000b77: 	addl	%esi, %eax
    00000b79: 	paddd	%xmm1, %xmm0
    00000b7d: 	leal	(%rax,%rdx,4), %edx
    00000b80: 	movd	%xmm0, %eax
    00000b84: 	addl	%eax, %edx
    00000b86: 	jne	.Ltmp3677 # Offset: 2950
.Ltmp3708:
    00000b8c: 	addl	$0x1, %r13d
    00000b90: 	cmpl	%ecx, %r13d
    00000b93: 	jl	.Ltmp3678 # Offset: 2963
.Ltmp3675:
    00000b99: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000ba0: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbp
    00000ba7: 	subq	$0x20, %rax
    00000bab: 	cmpq	%rax, %rbp
    00000bae: 	je	.Ltmp3679 # Offset: 2990
    00000bb4: 	leaq	0x10(%rbp), %rdi
    00000bb8: 	movq	0x78(%rsp), %r13
    00000bbd: 	movq	%rdi, (%rbp)
    00000bc1: 	movq	0x70(%rsp), %r14
    00000bc6: 	movq	%r14, %rax
    00000bc9: 	addq	%r13, %rax
    00000bcc: 	je	.Ltmp3680 # Offset: 3020
    00000bce: 	testq	%r14, %r14
    00000bd1: 	je	.Ltmp3681 # Offset: 3025
.Ltmp3680:
    00000bd7: 	movq	%r13, 0x28(%rsp)
    00000bdc: 	cmpq	$0xf, %r13
    00000be0: 	ja	.Ltmp3682 # Offset: 3040
    00000be6: 	cmpq	$0x1, %r13
    00000bea: 	jne	.Ltmp3683 # Offset: 3050
    00000bf0: 	movzbl	(%r14), %eax
    00000bf4: 	movb	%al, 0x10(%rbp)
.Ltmp3739:
    00000bf7: 	movq	%r13, 0x8(%rbp)
    00000bfb: 	movb	$0x0, (%rdi,%r13)
    00000c00: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000c07: 	addq	$0x20, %rax
    00000c0b: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp3725:
    00000c12: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000c19: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000c20: 	je	.Ltmp3684 # Offset: 3104
.Ltmp3722:
    00000c26: 	movq	-0x20(%rax), %rbp
    00000c2a: 	callq	clock@PLT # Offset: 3114
    00000c2f: 	pxor	%xmm0, %xmm0
    00000c33: 	movq	%rax, end_time(%rip)
    00000c3a: 	movq	%rbp, %rdi
    00000c3d: 	subq	start_time(%rip), %rax
    00000c44: 	cvtsi2sd	%rax, %xmm0
    00000c49: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000c51: 	callq	_Z13record_resultdPKc # Offset: 3153
    00000c56: 	movq	0x70(%rsp), %rdi
    00000c5b: 	cmpq	0x8(%rsp), %rdi
    00000c60: 	je	.Ltmp3685 # Offset: 3168
    00000c62: 	movq	0x80(%rsp), %rax
    00000c6a: 	leaq	0x1(%rax), %rsi
    00000c6e: 	callq	_ZdlPvm@PLT # Offset: 3182
.Ltmp3685:
    00000c73: 	movq	0x8(%rsp), %rax
    00000c78: 	movq	%rax, 0x70(%rsp)
    00000c7d: 	movq	(%rsp), %rax
    00000c81: 	movq	(%rax), %rbp
    00000c84: 	movq	0x8(%rax), %r13
    00000c88: 	movq	%rbp, %rax
    00000c8b: 	addq	%r13, %rax
    00000c8e: 	je	.Ltmp3686 # Offset: 3214
    00000c90: 	testq	%rbp, %rbp
    00000c93: 	je	.Ltmp3631 # Offset: 3219
.Ltmp3686:
    00000c99: 	movq	%r13, 0x28(%rsp)
    00000c9e: 	cmpq	$0xf, %r13
    00000ca2: 	ja	.Ltmp3687 # Offset: 3234
    00000ca8: 	cmpq	$0x1, %r13
    00000cac: 	jne	.Ltmp3688 # Offset: 3244
    00000cb2: 	movzbl	(%rbp), %eax
    00000cb6: 	movb	%al, 0x80(%rsp)
    00000cbd: 	movq	0x8(%rsp), %rax
.Ltmp3711:
    00000cc2: 	movq	%r13, 0x78(%rsp)
    00000cc7: 	movb	$0x0, (%rax,%r13)
    00000ccc: 	movabsq	$0x3fffffffffffffff, %rax
    00000cd6: 	subq	0x78(%rsp), %rax
    00000cdb: 	cmpq	$0x3, %rax
    00000cdf: 	jbe	.Ltmp3689 # Offset: 3295
    00000ce5: 	movl	$0x4, %edx
    00000cea: 	leaq	DATAat0x4d2b1(%rip), %rsi
    00000cf1: 	movq	%r15, %rdi
    00000cf4: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3316
    00000cf9: 	callq	clock@PLT # Offset: 3321
    00000cfe: 	xorl	%r13d, %r13d
    00000d01: 	movl	iterations(%rip), %r9d
    00000d08: 	leaq	0x4(%rbx), %r14
    00000d0c: 	movq	%rax, start_time(%rip)
    00000d13: 	leaq	0x7d00(%rbx), %rbp
    00000d1a: 	testl	%r9d, %r9d
    00000d1d: 	jle	.Ltmp3690 # Offset: 3357
    00000d1f: 	nop # Size: 1
.Ltmp3693:
    00000d20: 	movl	0x4(%rbx), %edi
    00000d23: 	xorl	%edx, %edx
    00000d25: 	movl	(%rbx), %esi
    00000d27: 	movq	%r14, %r8
    00000d2a: 	movl	%edi, %eax
    00000d2c: 	movl	%edi, %ecx
    00000d2e: 	divl	%r12d
    00000d31: 	subl	%esi, %ecx
    00000d33: 	imull	%r12d, %ecx
    00000d37: 	leal	(%rcx,%rax), %edx
    00000d3a: 	addl	%edx, %edx
    00000d3c: 	leal	(%rdx,%rdi), %eax
    00000d3f: 	leal	(%rdx,%rsi), %edi
    00000d42: 	shll	$0x2, %edi
    00000d45: 	subl	%eax, %edi
    00000d47: 	subl	%eax, %edi
    00000d49: 	addl	%eax, %eax
    00000d4b: 	subl	%eax, %edi
    00000d4d: 	nopl	(%rax) # Size: 3
.Ltmp3691:
    00000d50: 	movl	%esi, %r10d
    00000d53: 	movl	(%r8), %esi
    00000d56: 	xorl	%edx, %edx
    00000d58: 	addq	$0x4, %r8
    00000d5c: 	movl	%esi, %eax
    00000d5e: 	movl	%esi, %ecx
    00000d60: 	divl	%r12d
    00000d63: 	subl	%r10d, %ecx
    00000d66: 	imull	%r12d, %ecx
    00000d6a: 	addl	%ecx, %eax
    00000d6c: 	addl	%eax, %eax
    00000d6e: 	leal	(%rsi,%rax), %edx
    00000d71: 	addl	%r10d, %eax
    00000d74: 	shll	$0x2, %eax
    00000d77: 	subl	%edx, %eax
    00000d79: 	subl	%edx, %eax
    00000d7b: 	addl	%edx, %edx
    00000d7d: 	subl	%edx, %eax
    00000d7f: 	addl	%eax, %edi
    00000d81: 	cmpq	%r8, %rbp
    00000d84: 	jne	.Ltmp3691 # Offset: 3460
    00000d86: 	testl	%edi, %edi
    00000d88: 	jne	.Ltmp3692 # Offset: 3464
.Ltmp3709:
    00000d8e: 	addl	$0x1, %r13d
    00000d92: 	cmpl	%r9d, %r13d
    00000d95: 	jl	.Ltmp3693 # Offset: 3477
.Ltmp3690:
    00000d97: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000d9e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000da5: 	subq	$0x20, %rax
    00000da9: 	cmpq	%rax, %rbx
    00000dac: 	je	.Ltmp3694 # Offset: 3500
    00000db2: 	leaq	0x10(%rbx), %rdi
    00000db6: 	movq	0x78(%rsp), %r12
    00000dbb: 	movq	%rdi, (%rbx)
    00000dbe: 	movq	0x70(%rsp), %rbp
    00000dc3: 	movq	%rbp, %rax
    00000dc6: 	addq	%r12, %rax
    00000dc9: 	je	.Ltmp3695 # Offset: 3529
    00000dcb: 	testq	%rbp, %rbp
    00000dce: 	je	.Ltmp3696 # Offset: 3534
.Ltmp3695:
    00000dd4: 	movq	%r12, 0x28(%rsp)
    00000dd9: 	cmpq	$0xf, %r12
    00000ddd: 	ja	.Ltmp3697 # Offset: 3549
    00000de3: 	cmpq	$0x1, %r12
    00000de7: 	jne	.Ltmp3698 # Offset: 3559
    00000ded: 	movzbl	(%rbp), %eax
    00000df1: 	movb	%al, 0x10(%rbx)
.Ltmp3734:
    00000df4: 	movq	%r12, 0x8(%rbx)
    00000df8: 	movb	$0x0, (%rdi,%r12)
    00000dfd: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000e04: 	addq	$0x20, %rax
    00000e08: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp3723:
    00000e0f: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000e16: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000e1d: 	je	.Ltmp3699 # Offset: 3613
.Ltmp3718:
    00000e23: 	movq	-0x20(%rax), %rbp
    00000e27: 	callq	clock@PLT # Offset: 3623
    00000e2c: 	pxor	%xmm0, %xmm0
    00000e30: 	movq	%rax, end_time(%rip)
    00000e37: 	movq	%rbp, %rdi
    00000e3a: 	subq	start_time(%rip), %rax
    00000e41: 	cvtsi2sd	%rax, %xmm0
    00000e46: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000e4e: 	callq	_Z13record_resultdPKc # Offset: 3662
    00000e53: 	movq	0x70(%rsp), %rdi
    00000e58: 	cmpq	0x8(%rsp), %rdi
    00000e5d: 	je	.Ltmp3700 # Offset: 3677
    00000e5f: 	movq	0x80(%rsp), %rax
    00000e67: 	leaq	0x1(%rax), %rsi
    00000e6b: 	callq	_ZdlPvm@PLT # Offset: 3691
.Ltmp3700:
    00000e70: 	movq	0x98(%rsp), %rax
    00000e78: 	subq	%fs:0x28, %rax
    00000e81: 	jne	.Ltmp3701 # Offset: 3713
    00000e87: 	movq	(%rsp), %rax
    00000e8b: 	movl	iterations(%rip), %edx
    00000e91: 	xorl	%r8d, %r8d
    00000e94: 	xorl	%ecx, %ecx
    00000e96: 	movl	$0x1f40, %esi
    00000e9b: 	movq	(%rax), %rdi
    00000e9e: 	addq	$0xa8, %rsp
    00000ea5: 	popq	%rbx
    00000ea6: 	popq	%rbp
    00000ea7: 	popq	%r12
    00000ea9: 	popq	%r13
    00000eab: 	popq	%r14
    00000ead: 	popq	%r15
    00000eaf: 	jmp	_Z9summarizePKciiii # TAILCALL  # Offset: 3759
    00000eb4: 	nopl	(%rax) # Size: 4
.Ltmp3609:
    00000eb8: 	movq	0x70(%rsp), %rdx
    00000ebd: 	movq	%r14, %rsi
    00000ec0: 	movl	$0x1, %edi
    00000ec5: 	xorl	%eax, %eax
    00000ec7: 	callq	__printf_chk@PLT # Offset: 3783
    00000ecc: 	movl	iterations(%rip), %ecx
    00000ed2: 	jmp	.Ltmp3702 # Offset: 3794
.Ltmp3614:
    00000ed7: 	leaq	0x28(%rsp), %rsi
    00000edc: 	xorl	%edx, %edx
    00000ede: 	movq	%rbp, %rdi
    00000ee1: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 3809
    00000ee6: 	movq	%rax, (%rbp)
    00000eea: 	movq	%rax, %rdi
    00000eed: 	movq	0x28(%rsp), %rax
    00000ef2: 	movq	%rax, 0x10(%rbp)
.Ltmp3736:
    00000ef6: 	movq	%r13, %rdx
    00000ef9: 	movq	%r14, %rsi
    00000efc: 	callq	memcpy@PLT # Offset: 3836
    00000f01: 	movq	0x28(%rsp), %r13
    00000f06: 	movq	(%rbp), %rdi
    00000f0a: 	jmp	.Ltmp3703 # Offset: 3850
    00000f0f: 	nop # Size: 1
.Ltmp3620:
    00000f10: 	movq	0x70(%rsp), %rdx
    00000f15: 	movq	%r14, %rsi
    00000f18: 	movl	$0x1, %edi
    00000f1d: 	xorl	%eax, %eax
    00000f1f: 	callq	__printf_chk@PLT # Offset: 3871
    00000f24: 	movl	iterations(%rip), %ecx
    00000f2a: 	jmp	.Ltmp3704 # Offset: 3882
    00000f2f: 	nop # Size: 1
.Ltmp3637:
    00000f30: 	movq	0x30(%rsp), %rdx
    00000f35: 	movq	%r14, %rsi
    00000f38: 	movl	$0x1, %edi
    00000f3d: 	xorl	%eax, %eax
    00000f3f: 	callq	__printf_chk@PLT # Offset: 3903
    00000f44: 	movl	iterations(%rip), %ecx
    00000f4a: 	jmp	.Ltmp3705 # Offset: 3914
    00000f4f: 	nop # Size: 1
.Ltmp3665:
    00000f50: 	movq	0x70(%rsp), %rdx
    00000f55: 	movq	%r14, %rsi
    00000f58: 	movl	$0x1, %edi
    00000f5d: 	xorl	%eax, %eax
    00000f5f: 	callq	__printf_chk@PLT # Offset: 3935
    00000f64: 	movl	iterations(%rip), %ecx
    00000f6a: 	jmp	.Ltmp3706 # Offset: 3946
    00000f6f: 	nop # Size: 1
.Ltmp3653:
    00000f70: 	movq	0x70(%rsp), %rdx
    00000f75: 	movq	%r14, %rsi
    00000f78: 	movl	$0x1, %edi
    00000f7d: 	xorl	%eax, %eax
    00000f7f: 	callq	__printf_chk@PLT # Offset: 3967
    00000f84: 	movl	iterations(%rip), %ecx
    00000f8a: 	jmp	.Ltmp3707 # Offset: 3978
    00000f8f: 	nop # Size: 1
.Ltmp3677:
    00000f90: 	movq	0x70(%rsp), %rdx
    00000f95: 	movq	%r14, %rsi
    00000f98: 	movl	$0x1, %edi
    00000f9d: 	xorl	%eax, %eax
    00000f9f: 	callq	__printf_chk@PLT # Offset: 3999
    00000fa4: 	movl	iterations(%rip), %ecx
    00000faa: 	jmp	.Ltmp3708 # Offset: 4010
    00000faf: 	nop # Size: 1
.Ltmp3692:
    00000fb0: 	movq	0x70(%rsp), %rdx
    00000fb5: 	leaq	DATAat0x4d004(%rip), %rsi
    00000fbc: 	movl	$0x1, %edi
    00000fc1: 	xorl	%eax, %eax
    00000fc3: 	callq	__printf_chk@PLT # Offset: 4035
    00000fc8: 	movl	iterations(%rip), %r9d
    00000fcf: 	jmp	.Ltmp3709 # Offset: 4047
.Ltmp3688:
    00000fd4: 	testq	%r13, %r13
    00000fd7: 	jne	.Ltmp3710 # Offset: 4055
    00000fdd: 	movq	0x8(%rsp), %rax
    00000fe2: 	jmp	.Ltmp3711 # Offset: 4066
.Ltmp3633:
    00000fe7: 	testq	%r13, %r13
    00000fea: 	jne	.Ltmp3712 # Offset: 4074
    00000ff0: 	movq	0x10(%rsp), %rax
    00000ff5: 	jmp	.Ltmp3713 # Offset: 4085
.Ltmp3648:
    00000ffa: 	testq	%r13, %r13
    00000ffd: 	jne	.Ltmp3714 # Offset: 4093
    00001003: 	movq	%rbp, %rax
    00001006: 	jmp	.Ltmp3715 # Offset: 4102
.Ltmp3647:
    0000100b: 	leaq	0x50(%rsp), %rdi
    00001010: 	leaq	0x28(%rsp), %rsi
    00001015: 	xorl	%edx, %edx
    00001017: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4119
    0000101c: 	movq	%rax, 0x50(%rsp)
    00001021: 	movq	%rax, %rdi
    00001024: 	movq	0x28(%rsp), %rax
    00001029: 	movq	%rax, 0x60(%rsp)
.Ltmp3743:
    0000102e: 	movq	%r13, %rdx
    00001031: 	movq	%r14, %rsi
    00001034: 	callq	memcpy@PLT # Offset: 4148
    00001039: 	movq	0x28(%rsp), %r13
    0000103e: 	movq	0x50(%rsp), %rax
    00001043: 	jmp	.Ltmp3715 # Offset: 4163
.Ltmp3632:
    00001048: 	leaq	0x30(%rsp), %rdi
    0000104d: 	leaq	0x28(%rsp), %rsi
    00001052: 	xorl	%edx, %edx
    00001054: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4180
    00001059: 	movq	%rax, 0x30(%rsp)
    0000105e: 	movq	%rax, %rdi
    00001061: 	movq	0x28(%rsp), %rax
    00001066: 	movq	%rax, 0x40(%rsp)
.Ltmp3742:
    0000106b: 	movq	%r13, %rdx
    0000106e: 	movq	%rbp, %rsi
    00001071: 	callq	memcpy@PLT # Offset: 4209
    00001076: 	movq	0x28(%rsp), %r13
    0000107b: 	movq	0x30(%rsp), %rax
    00001080: 	jmp	.Ltmp3713 # Offset: 4224
.Ltmp3687:
    00001085: 	movq	%r15, %rdi
    00001088: 	leaq	0x28(%rsp), %rsi
    0000108d: 	xorl	%edx, %edx
    0000108f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4239
    00001094: 	movq	%rax, 0x70(%rsp)
    00001099: 	movq	%rax, %rdi
    0000109c: 	movq	0x28(%rsp), %rax
    000010a1: 	movq	%rax, 0x80(%rsp)
.Ltmp3741:
    000010a9: 	movq	%r13, %rdx
    000010ac: 	movq	%rbp, %rsi
    000010af: 	callq	memcpy@PLT # Offset: 4271
    000010b4: 	movq	0x28(%rsp), %r13
    000010b9: 	movq	0x70(%rsp), %rax
    000010be: 	jmp	.Ltmp3711 # Offset: 4286
.Ltmp3660:
    000010c3: 	movq	-0x8(%rdx), %rax
    000010c7: 	addq	$0x200, %rax
    000010cd: 	jmp	.Ltmp3716 # Offset: 4301
.Ltmp3655:
    000010d2: 	movq	%r15, %rsi
    000010d5: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000010dc: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 4316
    000010e1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000010e8: 	jmp	.Ltmp3717 # Offset: 4328
.Ltmp3699:
    000010ed: 	movq	-0x8(%rdx), %rax
    000010f1: 	addq	$0x200, %rax
    000010f7: 	jmp	.Ltmp3718 # Offset: 4343
.Ltmp3611:
    000010fc: 	movq	%r15, %rsi
    000010ff: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001106: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 4358
    0000110b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001112: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00001119: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001120: 	jne	.Ltmp3719 # Offset: 4384
.Ltmp3616:
    00001126: 	movq	-0x8(%rdx), %rax
    0000112a: 	addq	$0x200, %rax
    00001130: 	jmp	.Ltmp3719 # Offset: 4400
.Ltmp3667:
    00001135: 	movq	%r15, %rsi
    00001138: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000113f: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 4415
    00001144: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000114b: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00001152: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001159: 	jne	.Ltmp3720 # Offset: 4441
.Ltmp3672:
    0000115f: 	movq	-0x8(%rdx), %rax
    00001163: 	addq	$0x200, %rax
    00001169: 	jmp	.Ltmp3720 # Offset: 4457
.Ltmp3627:
    0000116e: 	movq	-0x8(%rdx), %rax
    00001172: 	addq	$0x200, %rax
    00001178: 	jmp	.Ltmp3721 # Offset: 4472
.Ltmp3684:
    0000117d: 	movq	-0x8(%rdx), %rax
    00001181: 	addq	$0x200, %rax
    00001187: 	jmp	.Ltmp3722 # Offset: 4487
.Ltmp3694:
    0000118c: 	movq	%r15, %rsi
    0000118f: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001196: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 4502
    0000119b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000011a2: 	jmp	.Ltmp3723 # Offset: 4514
.Ltmp3644:
    000011a7: 	movq	-0x8(%rdx), %rax
    000011ab: 	addq	$0x200, %rax
    000011b1: 	jmp	.Ltmp3724 # Offset: 4529
.Ltmp3679:
    000011b6: 	movq	%r15, %rsi
    000011b9: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000011c0: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 4544
    000011c5: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000011cc: 	jmp	.Ltmp3725 # Offset: 4556
.Ltmp3622:
    000011d1: 	movq	%r15, %rsi
    000011d4: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000011db: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 4571
    000011e0: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000011e7: 	jmp	.Ltmp3726 # Offset: 4583
.Ltmp3639:
    000011ec: 	movq	0x18(%rsp), %rsi
    000011f1: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000011f8: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 4600
    000011fd: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001204: 	jmp	.Ltmp3727 # Offset: 4612
.Ltmp3643:
    00001209: 	testq	%r13, %r13
    0000120c: 	je	.Ltmp3728 # Offset: 4620
    00001212: 	jmp	.Ltmp3729 # Offset: 4626
    00001217: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3671:
    00001220: 	testq	%r13, %r13
    00001223: 	je	.Ltmp3730 # Offset: 4643
    00001229: 	jmp	.Ltmp3731 # Offset: 4649
    0000122e: 	nop # Size: 2
.Ltmp3626:
    00001230: 	testq	%r13, %r13
    00001233: 	je	.Ltmp3732 # Offset: 4659
    00001239: 	jmp	.Ltmp3733 # Offset: 4665
    0000123e: 	nop # Size: 2
.Ltmp3698:
    00001240: 	testq	%r12, %r12
    00001243: 	je	.Ltmp3734 # Offset: 4675
    00001249: 	jmp	.Ltmp3735 # Offset: 4681
    0000124b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3615:
    00001250: 	testq	%r13, %r13
    00001253: 	je	.Ltmp3703 # Offset: 4691
    00001259: 	jmp	.Ltmp3736 # Offset: 4697
    0000125e: 	nop # Size: 2
.Ltmp3659:
    00001260: 	testq	%r13, %r13
    00001263: 	je	.Ltmp3737 # Offset: 4707
    00001269: 	jmp	.Ltmp3738 # Offset: 4713
    0000126e: 	nop # Size: 2
.Ltmp3683:
    00001270: 	testq	%r13, %r13
    00001273: 	je	.Ltmp3739 # Offset: 4723
.Ltmp3740:
    00001279: 	movq	%r13, %rdx
    0000127c: 	movq	%r14, %rsi
    0000127f: 	callq	memcpy@PLT # Offset: 4735
    00001284: 	movq	0x28(%rsp), %r13
    00001289: 	movq	(%rbp), %rdi
    0000128d: 	jmp	.Ltmp3739 # Offset: 4749
.Ltmp3697:
    00001292: 	leaq	0x28(%rsp), %rsi
    00001297: 	xorl	%edx, %edx
    00001299: 	movq	%rbx, %rdi
    0000129c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4764
    000012a1: 	movq	%rax, (%rbx)
    000012a4: 	movq	%rax, %rdi
    000012a7: 	movq	0x28(%rsp), %rax
    000012ac: 	movq	%rax, 0x10(%rbx)
.Ltmp3735:
    000012b0: 	movq	%r12, %rdx
    000012b3: 	movq	%rbp, %rsi
    000012b6: 	callq	memcpy@PLT # Offset: 4790
    000012bb: 	movq	0x28(%rsp), %r12
    000012c0: 	movq	(%rbx), %rdi
    000012c3: 	jmp	.Ltmp3734 # Offset: 4803
.Ltmp3625:
    000012c8: 	leaq	0x28(%rsp), %rsi
    000012cd: 	xorl	%edx, %edx
    000012cf: 	movq	%rbp, %rdi
    000012d2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4818
    000012d7: 	movq	%rax, (%rbp)
    000012db: 	movq	%rax, %rdi
    000012de: 	movq	0x28(%rsp), %rax
    000012e3: 	movq	%rax, 0x10(%rbp)
.Ltmp3733:
    000012e7: 	movq	%r13, %rdx
    000012ea: 	movq	%r14, %rsi
    000012ed: 	callq	memcpy@PLT # Offset: 4845
    000012f2: 	movq	0x28(%rsp), %r13
    000012f7: 	movq	(%rbp), %rdi
    000012fb: 	jmp	.Ltmp3732 # Offset: 4859
.Ltmp3642:
    00001300: 	leaq	0x28(%rsp), %rsi
    00001305: 	xorl	%edx, %edx
    00001307: 	movq	%rbp, %rdi
    0000130a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4874
    0000130f: 	movq	%rax, (%rbp)
    00001313: 	movq	%rax, %rdi
    00001316: 	movq	0x28(%rsp), %rax
    0000131b: 	movq	%rax, 0x10(%rbp)
.Ltmp3729:
    0000131f: 	movq	%r13, %rdx
    00001322: 	movq	%r14, %rsi
    00001325: 	callq	memcpy@PLT # Offset: 4901
    0000132a: 	movq	0x28(%rsp), %r13
    0000132f: 	movq	(%rbp), %rdi
    00001333: 	jmp	.Ltmp3728 # Offset: 4915
.Ltmp3670:
    00001338: 	leaq	0x28(%rsp), %rsi
    0000133d: 	xorl	%edx, %edx
    0000133f: 	movq	%rbp, %rdi
    00001342: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4930
    00001347: 	movq	%rax, (%rbp)
    0000134b: 	movq	%rax, %rdi
    0000134e: 	movq	0x28(%rsp), %rax
    00001353: 	movq	%rax, 0x10(%rbp)
.Ltmp3731:
    00001357: 	movq	%r13, %rdx
    0000135a: 	movq	%r14, %rsi
    0000135d: 	callq	memcpy@PLT # Offset: 4957
    00001362: 	movq	0x28(%rsp), %r13
    00001367: 	movq	(%rbp), %rdi
    0000136b: 	jmp	.Ltmp3730 # Offset: 4971
.Ltmp3658:
    00001370: 	leaq	0x28(%rsp), %rsi
    00001375: 	xorl	%edx, %edx
    00001377: 	movq	%rbp, %rdi
    0000137a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4986
    0000137f: 	movq	%rax, (%rbp)
    00001383: 	movq	%rax, %rdi
    00001386: 	movq	0x28(%rsp), %rax
    0000138b: 	movq	%rax, 0x10(%rbp)
.Ltmp3738:
    0000138f: 	movq	%r13, %rdx
    00001392: 	movq	%r14, %rsi
    00001395: 	callq	memcpy@PLT # Offset: 5013
    0000139a: 	movq	0x28(%rsp), %r13
    0000139f: 	movq	(%rbp), %rdi
    000013a3: 	jmp	.Ltmp3737 # Offset: 5027
.Ltmp3682:
    000013a8: 	leaq	0x28(%rsp), %rsi
    000013ad: 	xorl	%edx, %edx
    000013af: 	movq	%rbp, %rdi
    000013b2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5042
    000013b7: 	movq	%rax, (%rbp)
    000013bb: 	movq	%rax, %rdi
    000013be: 	movq	0x28(%rsp), %rax
    000013c3: 	movq	%rax, 0x10(%rbp)
    000013c7: 	jmp	.Ltmp3740 # Offset: 5063
.Ltmp3624:
    000013cc: 	leaq	DATAat0x4d018(%rip), %rdi
    000013d3: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 5075
.Ltmp3631:
    000013d8: 	leaq	DATAat0x4d018(%rip), %rdi
    000013df: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 5087
.Ltmp3634:
    000013e4: 	leaq	DATAat0x4d194(%rip), %rdi
    000013eb: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 5099
.Ltmp3641:
    000013f0: 	leaq	DATAat0x4d018(%rip), %rdi
    000013f7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 5111
.Ltmp3649:
    000013fc: 	leaq	DATAat0x4d194(%rip), %rdi
    00001403: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 5123
.Ltmp3657:
    00001408: 	leaq	DATAat0x4d018(%rip), %rdi
    0000140f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 5135
.Ltmp3669:
    00001414: 	leaq	DATAat0x4d018(%rip), %rdi
    0000141b: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 5147
.Ltmp3681:
    00001420: 	leaq	DATAat0x4d018(%rip), %rdi
    00001427: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 5159
.Ltmp3689:
    0000142c: 	leaq	DATAat0x4d194(%rip), %rdi
    00001433: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 5171
.Ltmp3696:
    00001438: 	leaq	DATAat0x4d018(%rip), %rdi
    0000143f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 5183
.Ltmp3701:
    00001444: 	callq	__stack_chk_fail@PLT # Offset: 5188
.Ltmp3613:
    00001449: 	leaq	DATAat0x4d018(%rip), %rdi
    00001450: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 5200
.Ltmp3710:
    00001455: 	movq	0x8(%rsp), %rdi
    0000145a: 	jmp	.Ltmp3741 # Offset: 5210
.Ltmp3712:
    0000145f: 	movq	0x10(%rsp), %rdi
    00001464: 	jmp	.Ltmp3742 # Offset: 5220
.Ltmp3714:
    00001469: 	movq	%rbp, %rdi
    0000146c: 	jmp	.Ltmp3743 # Offset: 5228
    00001471: 	endbr64
.Ltmp3745:
    00001475: 	movq	%rax, %rbp
    00001478: 	jmp	.Ltmp3744 # Offset: 5240
    0000147a: 	endbr64
    0000147e: 	jmp	.Ltmp3745 # Offset: 5246
    00001480: 	endbr64
    00001484: 	jmp	.Ltmp3745 # Offset: 5252
    00001486: 	endbr64
    0000148a: 	jmp	.Ltmp3745 # Offset: 5258
    0000148c: 	endbr64
    00001490: 	jmp	.Ltmp3745 # Offset: 5264
    00001492: 	endbr64
    00001496: 	movq	%rax, %rbp
    00001499: 	jmp	.Ltmp3746 # Offset: 5273
.Ltmp3744:
    0000149b: 	movq	0x70(%rsp), %rdi
    000014a0: 	cmpq	0x8(%rsp), %rdi
    000014a5: 	je	.Ltmp3747 # Offset: 5285
.Ltmp3748:
    000014a7: 	movq	0x80(%rsp), %rax
    000014af: 	leaq	0x1(%rax), %rsi
    000014b3: 	callq	_ZdlPvm@PLT # Offset: 5299
.Ltmp3747:
    000014b8: 	movq	%rbp, %rdi
    000014bb: 	callq	_Unwind_Resume@PLT # Offset: 5307
.Ltmp3746:
    000014c0: 	movq	0x70(%rsp), %rdi
    000014c5: 	leaq	0x80(%rsp), %rax
    000014cd: 	cmpq	%rax, %rdi
    000014d0: 	jne	.Ltmp3748 # Offset: 5328
    000014d2: 	jmp	.Ltmp3747 # Offset: 5330
    000014d4: 	endbr64
.Ltmp3750:
    000014d8: 	movq	%rax, %r12
    000014db: 	jmp	.Ltmp3749 # Offset: 5339
    000014dd: 	endbr64
    000014e1: 	jmp	.Ltmp3750 # Offset: 5345
    000014e3: 	endbr64
    000014e7: 	jmp	.Ltmp3745 # Offset: 5351
    000014e9: 	endbr64
    000014ed: 	jmp	.Ltmp3745 # Offset: 5357
.Ltmp3749:
    000014ef: 	movq	0x50(%rsp), %rdi
    000014f4: 	cmpq	%rbp, %rdi
    000014f7: 	je	.Ltmp3751 # Offset: 5367
    000014f9: 	movq	0x60(%rsp), %rax
    000014fe: 	leaq	0x1(%rax), %rsi
    00001502: 	callq	_ZdlPvm@PLT # Offset: 5378
.Ltmp3751:
    00001507: 	movq	%r12, %rdi
    0000150a: 	callq	_Unwind_Resume@PLT # Offset: 5386
    0000150f: 	endbr64
    00001513: 	jmp	.Ltmp3745 # Offset: 5395
    00001518: 	endbr64
    0000151c: 	jmp	.Ltmp3745 # Offset: 5404
    00001521: 	endbr64
.Ltmp3753:
    00001525: 	movq	%rax, %rbp
    00001528: 	jmp	.Ltmp3752 # Offset: 5416
    0000152a: 	endbr64
    0000152e: 	jmp	.Ltmp3753 # Offset: 5422
.Ltmp3752:
    00001530: 	movq	0x30(%rsp), %rdi
    00001535: 	cmpq	0x10(%rsp), %rdi
    0000153a: 	je	.Ltmp3747 # Offset: 5434
    00001540: 	movq	0x40(%rsp), %rax
    00001545: 	leaq	0x1(%rax), %rsi
    00001549: 	callq	_ZdlPvm@PLT # Offset: 5449
    0000154e: 	jmp	.Ltmp3747 # Offset: 5454
DWARF CFI Instructions:
    <empty>
End of Function "_Z16TestUnrolledTypeIjLi4EEvPT_S0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z11TestOneTypeIjEvd" after disassembly {
  Number      : 184
  State       : disassembled
  Address     : 0x32ea0
  Size        : 0x40a3
  MaxSize     : 0x40b0
  Offset      : 0x32ea0
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIjEvd
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0183:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0x7000(%rsp), %r11
.Ltmp3754:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp3754 # Offset: 37
    00000027: 	subq	$0xe18, %rsp
    0000002e: 	movq	%fs:0x28, %rax
    00000037: 	movq	%rax, 0x7e08(%rsp)
    0000003f: 	xorl	%eax, %eax
    00000041: 	leaq	0x100(%rsp), %rbp
    00000049: 	leaq	0x7e00(%rsp), %r13
    00000051: 	cvttsd2si	init_value(%rip), %rax
    0000005a: 	movq	%rax, %xmm1
    0000005f: 	movq	%rbp, %rax
    00000062: 	pshufd	$0x0, %xmm1, %xmm1
    00000067: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3755:
    00000070: 	movaps	%xmm1, (%rax)
    00000073: 	addq	$0x10, %rax
    00000077: 	cmpq	%rax, %r13
    0000007a: 	jne	.Ltmp3755 # Offset: 122
    0000007c: 	leaq	0x50(%rsp), %rax
    00000081: 	leaq	0x20(%rsp), %rsi
    00000086: 	movdqa	_Z7gLabelsB5cxx11+16(%rip), %xmm5
    0000008e: 	movdqa	_Z7gLabelsB5cxx11+32(%rip), %xmm6
    00000096: 	movq	%rax, 0x18(%rsp)
    0000009b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000000a2: 	leaq	0x40(%rsp), %r14
    000000a7: 	movq	%rax, 0x40(%rsp)
    000000ac: 	leaq	0xe0(%rsp), %r12
    000000b4: 	movabsq	$0x745f3233746e6975, %rax
    000000be: 	movq	%rax, 0x50(%rsp)
    000000c3: 	movsd	%xmm0, 0x8(%rsp)
    000000c9: 	movq	$0x8, 0x48(%rsp)
    000000d2: 	movb	$0x0, 0x58(%rsp)
    000000d7: 	movaps	%xmm5, 0x20(%rsp)
    000000dc: 	movaps	%xmm6, 0x30(%rsp)
    000000e1: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E # Offset: 225
    000000e6: 	movsd	0x8(%rsp), %xmm0
    000000ec: 	movq	%r14, %rsi
    000000ef: 	movq	%r12, %rdi
    000000f2: 	addsd	DATAat0x4d638(%rip), %xmm0
    000000fa: 	leaq	DATAat0x4d1e0(%rip), %rdx
    00000101: 	cvttsd2si	%xmm0, %rax
    00000106: 	movq	%rax, 0x10(%rsp)
    0000010b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 267
    00000110: 	callq	clock@PLT # Offset: 272
    00000115: 	movl	iterations(%rip), %ecx
    0000011b: 	xorl	%r15d, %r15d
    0000011e: 	leaq	0x7cf0(%rbp), %rbx
    00000125: 	movq	%rax, start_time(%rip)
    0000012c: 	testl	%ecx, %ecx
    0000012e: 	jle	.Ltmp3756 # Offset: 302
    00000134: 	nopl	(%rax) # Size: 4
.Ltmp3759:
    00000138: 	movl	0x100(%rsp), %eax
    0000013f: 	movl	0x104(%rsp), %esi
    00000146: 	movq	%rbp, %rdx
    00000149: 	pxor	%xmm0, %xmm0
    0000014d: 	nopl	(%rax) # Size: 3
.Ltmp3757:
    00000150: 	paddd	(%rdx), %xmm0
    00000154: 	movdqu	0x4(%rdx), %xmm5
    00000159: 	addq	$0x10, %rdx
    0000015d: 	psubd	%xmm5, %xmm0
    00000161: 	cmpq	%rdx, %rbx
    00000164: 	jne	.Ltmp3757 # Offset: 356
    00000166: 	movdqa	%xmm0, %xmm1
    0000016a: 	addl	0x7df8(%rsp), %eax
    00000171: 	movq	0x7df4(%rsp), %xmm2
    0000017a: 	psrldq	$0x8, %xmm1
    0000017f: 	subl	%esi, %eax
    00000181: 	subl	0x7dfc(%rsp), %eax
    00000188: 	paddd	%xmm1, %xmm0
    0000018c: 	movq	0x7df0(%rsp), %xmm1
    00000195: 	psubd	%xmm2, %xmm1
    00000199: 	movd	%xmm1, %edx
    0000019d: 	pshufd	$0xe5, %xmm1, %xmm3
    000001a2: 	movdqa	%xmm0, %xmm1
    000001a6: 	psrldq	$0x4, %xmm1
    000001ab: 	addl	%edx, %eax
    000001ad: 	movd	%xmm3, %edx
    000001b1: 	paddd	%xmm1, %xmm0
    000001b5: 	addl	%edx, %eax
    000001b7: 	movd	%xmm0, %edx
    000001bb: 	addl	%edx, %eax
    000001bd: 	jne	.Ltmp3758 # Offset: 445
.Ltmp4019:
    000001c3: 	addl	$0x1, %r15d
    000001c7: 	cmpl	%ecx, %r15d
    000001ca: 	jl	.Ltmp3759 # Offset: 458
.Ltmp3756:
    000001d0: 	movq	%r12, %rsi
    000001d3: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001da: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 474
    000001df: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001e6: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000001ed: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001f4: 	je	.Ltmp3760 # Offset: 500
.Ltmp4020:
    000001fa: 	movq	-0x20(%rax), %r15
    000001fe: 	callq	clock@PLT # Offset: 510
    00000203: 	pxor	%xmm0, %xmm0
    00000207: 	movq	%rax, end_time(%rip)
    0000020e: 	movq	%r15, %rdi
    00000211: 	subq	start_time(%rip), %rax
    00000218: 	cvtsi2sd	%rax, %xmm0
    0000021d: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000225: 	callq	_Z13record_resultdPKc # Offset: 549
    0000022a: 	movq	0xe0(%rsp), %rdi
    00000232: 	leaq	0xf0(%rsp), %rax
    0000023a: 	movq	%rax, 0x8(%rsp)
    0000023f: 	cmpq	%rax, %rdi
    00000242: 	je	.Ltmp3761 # Offset: 578
    00000244: 	movq	0xf0(%rsp), %rax
    0000024c: 	leaq	0x1(%rax), %rsi
    00000250: 	callq	_ZdlPvm@PLT # Offset: 592
.Ltmp3761:
    00000255: 	leaq	DATAat0x4d1ed(%rip), %rdx
    0000025c: 	movq	%r14, %rsi
    0000025f: 	movq	%r12, %rdi
    00000262: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 610
    00000267: 	callq	clock@PLT # Offset: 615
    0000026c: 	movl	iterations(%rip), %ecx
    00000272: 	xorl	%r15d, %r15d
    00000275: 	leaq	0x7cf0(%rbp), %rbx
    0000027c: 	movq	%rax, start_time(%rip)
    00000283: 	testl	%ecx, %ecx
    00000285: 	jle	.Ltmp3762 # Offset: 645
    0000028b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3765:
    00000290: 	movl	0x104(%rsp), %esi
    00000297: 	movl	0x100(%rsp), %eax
    0000029e: 	movq	%rbp, %rdx
    000002a1: 	pxor	%xmm0, %xmm0
    000002a5: 	nopl	(%rax) # Size: 3
.Ltmp3763:
    000002a8: 	paddd	(%rdx), %xmm0
    000002ac: 	movdqu	0x4(%rdx), %xmm6
    000002b1: 	addq	$0x10, %rdx
    000002b5: 	psubd	%xmm6, %xmm0
    000002b9: 	cmpq	%rbx, %rdx
    000002bc: 	jne	.Ltmp3763 # Offset: 700
    000002be: 	movdqa	%xmm0, %xmm1
    000002c2: 	addl	0x7df8(%rsp), %eax
    000002c9: 	movq	0x7df4(%rsp), %xmm2
    000002d2: 	psrldq	$0x8, %xmm1
    000002d7: 	subl	%esi, %eax
    000002d9: 	subl	0x7dfc(%rsp), %eax
    000002e0: 	paddd	%xmm1, %xmm0
    000002e4: 	movq	0x7df0(%rsp), %xmm1
    000002ed: 	psubd	%xmm2, %xmm1
    000002f1: 	movd	%xmm1, %edx
    000002f5: 	pshufd	$0xe5, %xmm1, %xmm4
    000002fa: 	movdqa	%xmm0, %xmm1
    000002fe: 	psrldq	$0x4, %xmm1
    00000303: 	addl	%edx, %eax
    00000305: 	movd	%xmm4, %edx
    00000309: 	paddd	%xmm1, %xmm0
    0000030d: 	addl	%edx, %eax
    0000030f: 	movd	%xmm0, %edx
    00000313: 	addl	%edx, %eax
    00000315: 	jne	.Ltmp3764 # Offset: 789
.Ltmp4018:
    0000031b: 	addl	$0x1, %r15d
    0000031f: 	cmpl	%ecx, %r15d
    00000322: 	jl	.Ltmp3765 # Offset: 802
.Ltmp3762:
    00000328: 	movq	%r12, %rsi
    0000032b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000332: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 818
    00000337: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000033e: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000345: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000034c: 	je	.Ltmp3766 # Offset: 844
.Ltmp4053:
    00000352: 	movq	-0x20(%rax), %r15
    00000356: 	callq	clock@PLT # Offset: 854
    0000035b: 	pxor	%xmm0, %xmm0
    0000035f: 	movq	%rax, end_time(%rip)
    00000366: 	movq	%r15, %rdi
    00000369: 	subq	start_time(%rip), %rax
    00000370: 	cvtsi2sd	%rax, %xmm0
    00000375: 	divsd	DATAat0x4d640(%rip), %xmm0
    0000037d: 	callq	_Z13record_resultdPKc # Offset: 893
    00000382: 	movq	0xe0(%rsp), %rdi
    0000038a: 	cmpq	0x8(%rsp), %rdi
    0000038f: 	je	.Ltmp3767 # Offset: 911
    00000391: 	movq	0xf0(%rsp), %rax
    00000399: 	leaq	0x1(%rax), %rsi
    0000039d: 	callq	_ZdlPvm@PLT # Offset: 925
.Ltmp3767:
    000003a2: 	leaq	DATAat0x4d1ff(%rip), %rdx
    000003a9: 	movq	%r14, %rsi
    000003ac: 	movq	%r12, %rdi
    000003af: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 943
    000003b4: 	callq	clock@PLT # Offset: 948
    000003b9: 	movl	iterations(%rip), %ecx
    000003bf: 	xorl	%r15d, %r15d
    000003c2: 	leaq	0x7cf0(%rbp), %rbx
    000003c9: 	movq	%rax, start_time(%rip)
    000003d0: 	testl	%ecx, %ecx
    000003d2: 	jle	.Ltmp3768 # Offset: 978
    000003d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3771:
    000003e0: 	movl	0x100(%rsp), %eax
    000003e7: 	movl	0x104(%rsp), %esi
    000003ee: 	movq	%rbp, %rdx
    000003f1: 	pxor	%xmm0, %xmm0
    000003f5: 	nopl	(%rax) # Size: 3
.Ltmp3769:
    000003f8: 	paddd	(%rdx), %xmm0
    000003fc: 	movdqu	0x4(%rdx), %xmm7
    00000401: 	addq	$0x10, %rdx
    00000405: 	psubd	%xmm7, %xmm0
    00000409: 	cmpq	%rdx, %rbx
    0000040c: 	jne	.Ltmp3769 # Offset: 1036
    0000040e: 	movdqa	%xmm0, %xmm1
    00000412: 	addl	0x7df8(%rsp), %eax
    00000419: 	movq	0x7df4(%rsp), %xmm2
    00000422: 	psrldq	$0x8, %xmm1
    00000427: 	subl	%esi, %eax
    00000429: 	subl	0x7dfc(%rsp), %eax
    00000430: 	paddd	%xmm1, %xmm0
    00000434: 	movq	0x7df0(%rsp), %xmm1
    0000043d: 	psubd	%xmm2, %xmm1
    00000441: 	movd	%xmm1, %edx
    00000445: 	pshufd	$0xe5, %xmm1, %xmm5
    0000044a: 	movdqa	%xmm0, %xmm1
    0000044e: 	psrldq	$0x4, %xmm1
    00000453: 	addl	%edx, %eax
    00000455: 	movd	%xmm5, %edx
    00000459: 	paddd	%xmm1, %xmm0
    0000045d: 	addl	%edx, %eax
    0000045f: 	movd	%xmm0, %edx
    00000463: 	addl	%edx, %eax
    00000465: 	jne	.Ltmp3770 # Offset: 1125
.Ltmp4017:
    0000046b: 	addl	$0x1, %r15d
    0000046f: 	cmpl	%ecx, %r15d
    00000472: 	jl	.Ltmp3771 # Offset: 1138
.Ltmp3768:
    00000478: 	movq	%r12, %rsi
    0000047b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000482: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 1154
    00000487: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000048e: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000495: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000049c: 	je	.Ltmp3772 # Offset: 1180
.Ltmp4052:
    000004a2: 	movq	-0x20(%rax), %r15
    000004a6: 	callq	clock@PLT # Offset: 1190
    000004ab: 	pxor	%xmm0, %xmm0
    000004af: 	movq	%rax, end_time(%rip)
    000004b6: 	movq	%r15, %rdi
    000004b9: 	subq	start_time(%rip), %rax
    000004c0: 	cvtsi2sd	%rax, %xmm0
    000004c5: 	divsd	DATAat0x4d640(%rip), %xmm0
    000004cd: 	callq	_Z13record_resultdPKc # Offset: 1229
    000004d2: 	movq	0xe0(%rsp), %rdi
    000004da: 	cmpq	0x8(%rsp), %rdi
    000004df: 	je	.Ltmp3773 # Offset: 1247
    000004e1: 	movq	0xf0(%rsp), %rax
    000004e9: 	leaq	0x1(%rax), %rsi
    000004ed: 	callq	_ZdlPvm@PLT # Offset: 1261
.Ltmp3773:
    000004f2: 	leaq	DATAat0x4d20f(%rip), %rdx
    000004f9: 	movq	%r14, %rsi
    000004fc: 	movq	%r12, %rdi
    000004ff: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1279
    00000504: 	callq	clock@PLT # Offset: 1284
    00000509: 	movl	iterations(%rip), %ecx
    0000050f: 	xorl	%r15d, %r15d
    00000512: 	leaq	0x7cf0(%rbp), %rbx
    00000519: 	movq	%rax, start_time(%rip)
    00000520: 	testl	%ecx, %ecx
    00000522: 	jle	.Ltmp3774 # Offset: 1314
    00000528: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3777:
    00000530: 	movl	0x100(%rsp), %eax
    00000537: 	movl	0x104(%rsp), %esi
    0000053e: 	movq	%rbp, %rdx
    00000541: 	pxor	%xmm0, %xmm0
    00000545: 	nopl	(%rax) # Size: 3
.Ltmp3775:
    00000548: 	paddd	(%rdx), %xmm0
    0000054c: 	movdqu	0x4(%rdx), %xmm5
    00000551: 	addq	$0x10, %rdx
    00000555: 	psubd	%xmm5, %xmm0
    00000559: 	cmpq	%rdx, %rbx
    0000055c: 	jne	.Ltmp3775 # Offset: 1372
    0000055e: 	movdqa	%xmm0, %xmm1
    00000562: 	addl	0x7df8(%rsp), %eax
    00000569: 	movq	0x7df4(%rsp), %xmm2
    00000572: 	psrldq	$0x8, %xmm1
    00000577: 	subl	%esi, %eax
    00000579: 	subl	0x7dfc(%rsp), %eax
    00000580: 	paddd	%xmm1, %xmm0
    00000584: 	movq	0x7df0(%rsp), %xmm1
    0000058d: 	psubd	%xmm2, %xmm1
    00000591: 	movd	%xmm1, %edx
    00000595: 	pshufd	$0xe5, %xmm1, %xmm6
    0000059a: 	movdqa	%xmm0, %xmm1
    0000059e: 	psrldq	$0x4, %xmm1
    000005a3: 	addl	%edx, %eax
    000005a5: 	movd	%xmm6, %edx
    000005a9: 	paddd	%xmm1, %xmm0
    000005ad: 	addl	%edx, %eax
    000005af: 	movd	%xmm0, %edx
    000005b3: 	addl	%edx, %eax
    000005b5: 	jne	.Ltmp3776 # Offset: 1461
.Ltmp4016:
    000005bb: 	addl	$0x1, %r15d
    000005bf: 	cmpl	%ecx, %r15d
    000005c2: 	jl	.Ltmp3777 # Offset: 1474
.Ltmp3774:
    000005c8: 	movq	%r12, %rsi
    000005cb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000005d2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 1490
    000005d7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000005de: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000005e5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000005ec: 	je	.Ltmp3778 # Offset: 1516
.Ltmp4051:
    000005f2: 	movq	-0x20(%rax), %r15
    000005f6: 	callq	clock@PLT # Offset: 1526
    000005fb: 	pxor	%xmm0, %xmm0
    000005ff: 	movq	%rax, end_time(%rip)
    00000606: 	movq	%r15, %rdi
    00000609: 	subq	start_time(%rip), %rax
    00000610: 	cvtsi2sd	%rax, %xmm0
    00000615: 	divsd	DATAat0x4d640(%rip), %xmm0
    0000061d: 	callq	_Z13record_resultdPKc # Offset: 1565
    00000622: 	movq	0xe0(%rsp), %rdi
    0000062a: 	cmpq	0x8(%rsp), %rdi
    0000062f: 	je	.Ltmp3779 # Offset: 1583
    00000631: 	movq	0xf0(%rsp), %rax
    00000639: 	leaq	0x1(%rax), %rsi
    0000063d: 	callq	_ZdlPvm@PLT # Offset: 1597
.Ltmp3779:
    00000642: 	leaq	DATAat0x4d227(%rip), %rdx
    00000649: 	movq	%r14, %rsi
    0000064c: 	movq	%r12, %rdi
    0000064f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1615
    00000654: 	callq	clock@PLT # Offset: 1620
    00000659: 	movl	iterations(%rip), %ecx
    0000065f: 	xorl	%r15d, %r15d
    00000662: 	leaq	0x7cf0(%rbp), %rbx
    00000669: 	movq	%rax, start_time(%rip)
    00000670: 	testl	%ecx, %ecx
    00000672: 	jle	.Ltmp3780 # Offset: 1650
    00000678: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3783:
    00000680: 	movl	0x100(%rsp), %eax
    00000687: 	movl	0x104(%rsp), %esi
    0000068e: 	movq	%rbp, %rdx
    00000691: 	pxor	%xmm0, %xmm0
    00000695: 	nopl	(%rax) # Size: 3
.Ltmp3781:
    00000698: 	paddd	(%rdx), %xmm0
    0000069c: 	movdqu	0x4(%rdx), %xmm6
    000006a1: 	addq	$0x10, %rdx
    000006a5: 	psubd	%xmm6, %xmm0
    000006a9: 	cmpq	%rdx, %rbx
    000006ac: 	jne	.Ltmp3781 # Offset: 1708
    000006ae: 	movdqa	%xmm0, %xmm1
    000006b2: 	addl	0x7df8(%rsp), %eax
    000006b9: 	movq	0x7df4(%rsp), %xmm2
    000006c2: 	psrldq	$0x8, %xmm1
    000006c7: 	subl	%esi, %eax
    000006c9: 	subl	0x7dfc(%rsp), %eax
    000006d0: 	paddd	%xmm1, %xmm0
    000006d4: 	movq	0x7df0(%rsp), %xmm1
    000006dd: 	psubd	%xmm2, %xmm1
    000006e1: 	movd	%xmm1, %edx
    000006e5: 	pshufd	$0xe5, %xmm1, %xmm7
    000006ea: 	movdqa	%xmm0, %xmm1
    000006ee: 	psrldq	$0x4, %xmm1
    000006f3: 	addl	%edx, %eax
    000006f5: 	movd	%xmm7, %edx
    000006f9: 	paddd	%xmm1, %xmm0
    000006fd: 	addl	%edx, %eax
    000006ff: 	movd	%xmm0, %edx
    00000703: 	addl	%edx, %eax
    00000705: 	jne	.Ltmp3782 # Offset: 1797
.Ltmp4015:
    0000070b: 	addl	$0x1, %r15d
    0000070f: 	cmpl	%ecx, %r15d
    00000712: 	jl	.Ltmp3783 # Offset: 1810
.Ltmp3780:
    00000718: 	movq	%r12, %rsi
    0000071b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000722: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 1826
    00000727: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000072e: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000735: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000073c: 	je	.Ltmp3784 # Offset: 1852
.Ltmp4050:
    00000742: 	movq	-0x20(%rax), %r15
    00000746: 	callq	clock@PLT # Offset: 1862
    0000074b: 	pxor	%xmm0, %xmm0
    0000074f: 	movq	%rax, end_time(%rip)
    00000756: 	movq	%r15, %rdi
    00000759: 	subq	start_time(%rip), %rax
    00000760: 	cvtsi2sd	%rax, %xmm0
    00000765: 	divsd	DATAat0x4d640(%rip), %xmm0
    0000076d: 	callq	_Z13record_resultdPKc # Offset: 1901
    00000772: 	movq	0xe0(%rsp), %rdi
    0000077a: 	cmpq	0x8(%rsp), %rdi
    0000077f: 	je	.Ltmp3785 # Offset: 1919
    00000781: 	movq	0xf0(%rsp), %rax
    00000789: 	leaq	0x1(%rax), %rsi
    0000078d: 	callq	_ZdlPvm@PLT # Offset: 1933
.Ltmp3785:
    00000792: 	leaq	DATAat0x4d230(%rip), %rdx
    00000799: 	movq	%r14, %rsi
    0000079c: 	movq	%r12, %rdi
    0000079f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1951
    000007a4: 	callq	clock@PLT # Offset: 1956
    000007a9: 	movl	iterations(%rip), %ecx
    000007af: 	xorl	%r15d, %r15d
    000007b2: 	leaq	0x7cf0(%rbp), %rbx
    000007b9: 	movq	%rax, start_time(%rip)
    000007c0: 	testl	%ecx, %ecx
    000007c2: 	jle	.Ltmp3786 # Offset: 1986
    000007c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3789:
    000007d0: 	movl	0x104(%rsp), %esi
    000007d7: 	movl	0x100(%rsp), %eax
    000007de: 	movq	%rbp, %rdx
    000007e1: 	pxor	%xmm0, %xmm0
    000007e5: 	nopl	(%rax) # Size: 3
.Ltmp3787:
    000007e8: 	paddd	(%rdx), %xmm0
    000007ec: 	movdqu	0x4(%rdx), %xmm7
    000007f1: 	addq	$0x10, %rdx
    000007f5: 	psubd	%xmm7, %xmm0
    000007f9: 	cmpq	%rdx, %rbx
    000007fc: 	jne	.Ltmp3787 # Offset: 2044
    000007fe: 	movdqa	%xmm0, %xmm1
    00000802: 	addl	0x7df8(%rsp), %eax
    00000809: 	movq	0x7df4(%rsp), %xmm2
    00000812: 	psrldq	$0x8, %xmm1
    00000817: 	subl	%esi, %eax
    00000819: 	subl	0x7dfc(%rsp), %eax
    00000820: 	paddd	%xmm1, %xmm0
    00000824: 	movq	0x7df0(%rsp), %xmm1
    0000082d: 	psubd	%xmm2, %xmm1
    00000831: 	movd	%xmm1, %edx
    00000835: 	pshufd	$0xe5, %xmm1, %xmm3
    0000083a: 	movdqa	%xmm0, %xmm1
    0000083e: 	psrldq	$0x4, %xmm1
    00000843: 	addl	%edx, %eax
    00000845: 	movd	%xmm3, %edx
    00000849: 	paddd	%xmm1, %xmm0
    0000084d: 	addl	%edx, %eax
    0000084f: 	movd	%xmm0, %edx
    00000853: 	addl	%edx, %eax
    00000855: 	jne	.Ltmp3788 # Offset: 2133
.Ltmp4014:
    0000085b: 	addl	$0x1, %r15d
    0000085f: 	cmpl	%ecx, %r15d
    00000862: 	jl	.Ltmp3789 # Offset: 2146
.Ltmp3786:
    00000868: 	movq	%r12, %rsi
    0000086b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000872: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 2162
    00000877: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000087e: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000885: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000088c: 	je	.Ltmp3790 # Offset: 2188
.Ltmp4049:
    00000892: 	movq	-0x20(%rax), %r15
    00000896: 	callq	clock@PLT # Offset: 2198
    0000089b: 	pxor	%xmm0, %xmm0
    0000089f: 	movq	%rax, end_time(%rip)
    000008a6: 	movq	%r15, %rdi
    000008a9: 	subq	start_time(%rip), %rax
    000008b0: 	cvtsi2sd	%rax, %xmm0
    000008b5: 	divsd	DATAat0x4d640(%rip), %xmm0
    000008bd: 	callq	_Z13record_resultdPKc # Offset: 2237
    000008c2: 	movq	0xe0(%rsp), %rdi
    000008ca: 	cmpq	0x8(%rsp), %rdi
    000008cf: 	je	.Ltmp3791 # Offset: 2255
    000008d1: 	movq	0xf0(%rsp), %rax
    000008d9: 	leaq	0x1(%rax), %rsi
    000008dd: 	callq	_ZdlPvm@PLT # Offset: 2269
.Ltmp3791:
    000008e2: 	leaq	DATAat0x4d247(%rip), %rdx
    000008e9: 	movq	%r14, %rsi
    000008ec: 	movq	%r12, %rdi
    000008ef: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2287
    000008f4: 	callq	clock@PLT # Offset: 2292
    000008f9: 	movl	iterations(%rip), %ecx
    000008ff: 	xorl	%r15d, %r15d
    00000902: 	leaq	0x7cf0(%rbp), %rbx
    00000909: 	movq	%rax, start_time(%rip)
    00000910: 	testl	%ecx, %ecx
    00000912: 	jle	.Ltmp3792 # Offset: 2322
    00000918: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3795:
    00000920: 	movl	0x100(%rsp), %eax
    00000927: 	movl	0x104(%rsp), %esi
    0000092e: 	movq	%rbp, %rdx
    00000931: 	pxor	%xmm0, %xmm0
    00000935: 	nopl	(%rax) # Size: 3
.Ltmp3793:
    00000938: 	paddd	(%rdx), %xmm0
    0000093c: 	movdqu	0x4(%rdx), %xmm3
    00000941: 	addq	$0x10, %rdx
    00000945: 	psubd	%xmm3, %xmm0
    00000949: 	cmpq	%rdx, %rbx
    0000094c: 	jne	.Ltmp3793 # Offset: 2380
    0000094e: 	movdqa	%xmm0, %xmm1
    00000952: 	addl	0x7df8(%rsp), %eax
    00000959: 	movq	0x7df4(%rsp), %xmm2
    00000962: 	psrldq	$0x8, %xmm1
    00000967: 	subl	%esi, %eax
    00000969: 	subl	0x7dfc(%rsp), %eax
    00000970: 	paddd	%xmm1, %xmm0
    00000974: 	movq	0x7df0(%rsp), %xmm1
    0000097d: 	psubd	%xmm2, %xmm1
    00000981: 	movd	%xmm1, %edx
    00000985: 	pshufd	$0xe5, %xmm1, %xmm4
    0000098a: 	movdqa	%xmm0, %xmm1
    0000098e: 	psrldq	$0x4, %xmm1
    00000993: 	addl	%edx, %eax
    00000995: 	movd	%xmm4, %edx
    00000999: 	paddd	%xmm1, %xmm0
    0000099d: 	addl	%edx, %eax
    0000099f: 	movd	%xmm0, %edx
    000009a3: 	addl	%edx, %eax
    000009a5: 	jne	.Ltmp3794 # Offset: 2469
.Ltmp4013:
    000009ab: 	addl	$0x1, %r15d
    000009af: 	cmpl	%ecx, %r15d
    000009b2: 	jl	.Ltmp3795 # Offset: 2482
.Ltmp3792:
    000009b8: 	movq	%r12, %rsi
    000009bb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000009c2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 2498
    000009c7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000009ce: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000009d5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000009dc: 	je	.Ltmp3796 # Offset: 2524
.Ltmp4048:
    000009e2: 	movq	-0x20(%rax), %r15
    000009e6: 	callq	clock@PLT # Offset: 2534
    000009eb: 	pxor	%xmm0, %xmm0
    000009ef: 	movq	%rax, end_time(%rip)
    000009f6: 	movq	%r15, %rdi
    000009f9: 	subq	start_time(%rip), %rax
    00000a00: 	cvtsi2sd	%rax, %xmm0
    00000a05: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000a0d: 	callq	_Z13record_resultdPKc # Offset: 2573
    00000a12: 	movq	0xe0(%rsp), %rdi
    00000a1a: 	cmpq	0x8(%rsp), %rdi
    00000a1f: 	je	.Ltmp3797 # Offset: 2591
    00000a21: 	movq	0xf0(%rsp), %rax
    00000a29: 	leaq	0x1(%rax), %rsi
    00000a2d: 	callq	_ZdlPvm@PLT # Offset: 2605
.Ltmp3797:
    00000a32: 	leaq	DATAat0x4d255(%rip), %rdx
    00000a39: 	movq	%r14, %rsi
    00000a3c: 	movq	%r12, %rdi
    00000a3f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2623
    00000a44: 	callq	clock@PLT # Offset: 2628
    00000a49: 	movl	iterations(%rip), %ecx
    00000a4f: 	xorl	%r15d, %r15d
    00000a52: 	leaq	0x7cf0(%rbp), %rbx
    00000a59: 	movq	%rax, start_time(%rip)
    00000a60: 	testl	%ecx, %ecx
    00000a62: 	jle	.Ltmp3798 # Offset: 2658
    00000a68: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3801:
    00000a70: 	movl	0x104(%rsp), %esi
    00000a77: 	movl	0x100(%rsp), %eax
    00000a7e: 	movq	%rbp, %rdx
    00000a81: 	pxor	%xmm0, %xmm0
    00000a85: 	nopl	(%rax) # Size: 3
.Ltmp3799:
    00000a88: 	paddd	(%rdx), %xmm0
    00000a8c: 	movdqu	0x4(%rdx), %xmm4
    00000a91: 	addq	$0x10, %rdx
    00000a95: 	psubd	%xmm4, %xmm0
    00000a99: 	cmpq	%rdx, %rbx
    00000a9c: 	jne	.Ltmp3799 # Offset: 2716
    00000a9e: 	movdqa	%xmm0, %xmm1
    00000aa2: 	addl	0x7df8(%rsp), %eax
    00000aa9: 	movq	0x7df4(%rsp), %xmm2
    00000ab2: 	psrldq	$0x8, %xmm1
    00000ab7: 	subl	%esi, %eax
    00000ab9: 	subl	0x7dfc(%rsp), %eax
    00000ac0: 	paddd	%xmm1, %xmm0
    00000ac4: 	movq	0x7df0(%rsp), %xmm1
    00000acd: 	psubd	%xmm2, %xmm1
    00000ad1: 	movd	%xmm1, %edx
    00000ad5: 	pshufd	$0xe5, %xmm1, %xmm5
    00000ada: 	movdqa	%xmm0, %xmm1
    00000ade: 	psrldq	$0x4, %xmm1
    00000ae3: 	addl	%edx, %eax
    00000ae5: 	movd	%xmm5, %edx
    00000ae9: 	paddd	%xmm1, %xmm0
    00000aed: 	addl	%edx, %eax
    00000aef: 	movd	%xmm0, %edx
    00000af3: 	addl	%edx, %eax
    00000af5: 	jne	.Ltmp3800 # Offset: 2805
.Ltmp4012:
    00000afb: 	addl	$0x1, %r15d
    00000aff: 	cmpl	%ecx, %r15d
    00000b02: 	jl	.Ltmp3801 # Offset: 2818
.Ltmp3798:
    00000b08: 	movq	%r12, %rsi
    00000b0b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000b12: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 2834
    00000b17: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000b1e: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000b25: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000b2c: 	je	.Ltmp3802 # Offset: 2860
.Ltmp4047:
    00000b32: 	movq	-0x20(%rax), %r15
    00000b36: 	callq	clock@PLT # Offset: 2870
    00000b3b: 	pxor	%xmm0, %xmm0
    00000b3f: 	movq	%rax, end_time(%rip)
    00000b46: 	movq	%r15, %rdi
    00000b49: 	subq	start_time(%rip), %rax
    00000b50: 	cvtsi2sd	%rax, %xmm0
    00000b55: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000b5d: 	callq	_Z13record_resultdPKc # Offset: 2909
    00000b62: 	movq	0xe0(%rsp), %rdi
    00000b6a: 	cmpq	0x8(%rsp), %rdi
    00000b6f: 	je	.Ltmp3803 # Offset: 2927
    00000b71: 	movq	0xf0(%rsp), %rax
    00000b79: 	leaq	0x1(%rax), %rsi
    00000b7d: 	callq	_ZdlPvm@PLT # Offset: 2941
.Ltmp3803:
    00000b82: 	leaq	DATAat0x4d26c(%rip), %rdx
    00000b89: 	movq	%r14, %rsi
    00000b8c: 	movq	%r12, %rdi
    00000b8f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2959
    00000b94: 	callq	clock@PLT # Offset: 2964
    00000b99: 	movl	iterations(%rip), %ecx
    00000b9f: 	xorl	%r15d, %r15d
    00000ba2: 	leaq	0x7cf0(%rbp), %rbx
    00000ba9: 	movq	%rax, start_time(%rip)
    00000bb0: 	testl	%ecx, %ecx
    00000bb2: 	jle	.Ltmp3804 # Offset: 2994
    00000bb8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3807:
    00000bc0: 	movl	0x100(%rsp), %eax
    00000bc7: 	movl	0x104(%rsp), %esi
    00000bce: 	movq	%rbp, %rdx
    00000bd1: 	pxor	%xmm0, %xmm0
    00000bd5: 	nopl	(%rax) # Size: 3
.Ltmp3805:
    00000bd8: 	paddd	(%rdx), %xmm0
    00000bdc: 	movdqu	0x4(%rdx), %xmm5
    00000be1: 	addq	$0x10, %rdx
    00000be5: 	psubd	%xmm5, %xmm0
    00000be9: 	cmpq	%rbx, %rdx
    00000bec: 	jne	.Ltmp3805 # Offset: 3052
    00000bee: 	movdqa	%xmm0, %xmm1
    00000bf2: 	addl	0x7df8(%rsp), %eax
    00000bf9: 	movq	0x7df4(%rsp), %xmm2
    00000c02: 	psrldq	$0x8, %xmm1
    00000c07: 	subl	%esi, %eax
    00000c09: 	subl	0x7dfc(%rsp), %eax
    00000c10: 	paddd	%xmm1, %xmm0
    00000c14: 	movq	0x7df0(%rsp), %xmm1
    00000c1d: 	psubd	%xmm2, %xmm1
    00000c21: 	movd	%xmm1, %edx
    00000c25: 	pshufd	$0xe5, %xmm1, %xmm6
    00000c2a: 	movdqa	%xmm0, %xmm1
    00000c2e: 	psrldq	$0x4, %xmm1
    00000c33: 	addl	%edx, %eax
    00000c35: 	movd	%xmm6, %edx
    00000c39: 	paddd	%xmm1, %xmm0
    00000c3d: 	addl	%edx, %eax
    00000c3f: 	movd	%xmm0, %edx
    00000c43: 	addl	%edx, %eax
    00000c45: 	jne	.Ltmp3806 # Offset: 3141
.Ltmp4011:
    00000c4b: 	addl	$0x1, %r15d
    00000c4f: 	cmpl	%ecx, %r15d
    00000c52: 	jl	.Ltmp3807 # Offset: 3154
.Ltmp3804:
    00000c58: 	movq	%r12, %rsi
    00000c5b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000c62: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 3170
    00000c67: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000c6e: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000c75: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000c7c: 	je	.Ltmp3808 # Offset: 3196
.Ltmp4046:
    00000c82: 	movq	-0x20(%rax), %r15
    00000c86: 	callq	clock@PLT # Offset: 3206
    00000c8b: 	pxor	%xmm0, %xmm0
    00000c8f: 	movq	%rax, end_time(%rip)
    00000c96: 	movq	%r15, %rdi
    00000c99: 	subq	start_time(%rip), %rax
    00000ca0: 	cvtsi2sd	%rax, %xmm0
    00000ca5: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000cad: 	callq	_Z13record_resultdPKc # Offset: 3245
    00000cb2: 	movq	0xe0(%rsp), %rdi
    00000cba: 	cmpq	0x8(%rsp), %rdi
    00000cbf: 	je	.Ltmp3809 # Offset: 3263
    00000cc1: 	movq	0xf0(%rsp), %rax
    00000cc9: 	leaq	0x1(%rax), %rsi
    00000ccd: 	callq	_ZdlPvm@PLT # Offset: 3277
.Ltmp3809:
    00000cd2: 	leaq	DATAat0x4d27a(%rip), %rdx
    00000cd9: 	movq	%r14, %rsi
    00000cdc: 	movq	%r12, %rdi
    00000cdf: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3295
    00000ce4: 	callq	clock@PLT # Offset: 3300
    00000ce9: 	movl	iterations(%rip), %ecx
    00000cef: 	xorl	%r15d, %r15d
    00000cf2: 	leaq	0x7cf0(%rbp), %rbx
    00000cf9: 	movq	%rax, start_time(%rip)
    00000d00: 	testl	%ecx, %ecx
    00000d02: 	jle	.Ltmp3810 # Offset: 3330
    00000d08: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3813:
    00000d10: 	movl	0x104(%rsp), %esi
    00000d17: 	movl	0x100(%rsp), %eax
    00000d1e: 	movq	%rbp, %rdx
    00000d21: 	pxor	%xmm0, %xmm0
    00000d25: 	nopl	(%rax) # Size: 3
.Ltmp3811:
    00000d28: 	paddd	(%rdx), %xmm0
    00000d2c: 	movdqu	0x4(%rdx), %xmm6
    00000d31: 	addq	$0x10, %rdx
    00000d35: 	psubd	%xmm6, %xmm0
    00000d39: 	cmpq	%rdx, %rbx
    00000d3c: 	jne	.Ltmp3811 # Offset: 3388
    00000d3e: 	movdqa	%xmm0, %xmm1
    00000d42: 	addl	0x7df8(%rsp), %eax
    00000d49: 	movq	0x7df4(%rsp), %xmm2
    00000d52: 	psrldq	$0x8, %xmm1
    00000d57: 	subl	%esi, %eax
    00000d59: 	subl	0x7dfc(%rsp), %eax
    00000d60: 	paddd	%xmm1, %xmm0
    00000d64: 	movq	0x7df0(%rsp), %xmm1
    00000d6d: 	psubd	%xmm2, %xmm1
    00000d71: 	movd	%xmm1, %edx
    00000d75: 	pshufd	$0xe5, %xmm1, %xmm7
    00000d7a: 	movdqa	%xmm0, %xmm1
    00000d7e: 	psrldq	$0x4, %xmm1
    00000d83: 	addl	%edx, %eax
    00000d85: 	movd	%xmm7, %edx
    00000d89: 	paddd	%xmm1, %xmm0
    00000d8d: 	addl	%edx, %eax
    00000d8f: 	movd	%xmm0, %edx
    00000d93: 	addl	%edx, %eax
    00000d95: 	jne	.Ltmp3812 # Offset: 3477
.Ltmp4010:
    00000d9b: 	addl	$0x1, %r15d
    00000d9f: 	cmpl	%ecx, %r15d
    00000da2: 	jl	.Ltmp3813 # Offset: 3490
.Ltmp3810:
    00000da8: 	movq	%r12, %rsi
    00000dab: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000db2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 3506
    00000db7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000dbe: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000dc5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000dcc: 	je	.Ltmp3814 # Offset: 3532
.Ltmp4045:
    00000dd2: 	movq	-0x20(%rax), %r15
    00000dd6: 	callq	clock@PLT # Offset: 3542
    00000ddb: 	pxor	%xmm0, %xmm0
    00000ddf: 	movq	%rax, end_time(%rip)
    00000de6: 	movq	%r15, %rdi
    00000de9: 	subq	start_time(%rip), %rax
    00000df0: 	cvtsi2sd	%rax, %xmm0
    00000df5: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000dfd: 	callq	_Z13record_resultdPKc # Offset: 3581
    00000e02: 	movq	0xe0(%rsp), %rdi
    00000e0a: 	cmpq	0x8(%rsp), %rdi
    00000e0f: 	je	.Ltmp3815 # Offset: 3599
    00000e11: 	movq	0xf0(%rsp), %rax
    00000e19: 	leaq	0x1(%rax), %rsi
    00000e1d: 	callq	_ZdlPvm@PLT # Offset: 3613
.Ltmp3815:
    00000e22: 	leaq	DATAat0x4d28f(%rip), %rdx
    00000e29: 	movq	%r14, %rsi
    00000e2c: 	movq	%r12, %rdi
    00000e2f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3631
    00000e34: 	callq	clock@PLT # Offset: 3636
    00000e39: 	movl	iterations(%rip), %ecx
    00000e3f: 	xorl	%r15d, %r15d
    00000e42: 	leaq	0x7cf0(%rbp), %rbx
    00000e49: 	movq	%rax, start_time(%rip)
    00000e50: 	testl	%ecx, %ecx
    00000e52: 	jle	.Ltmp3816 # Offset: 3666
    00000e58: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3819:
    00000e60: 	movl	0x100(%rsp), %eax
    00000e67: 	movl	0x104(%rsp), %esi
    00000e6e: 	movq	%rbp, %rdx
    00000e71: 	pxor	%xmm0, %xmm0
    00000e75: 	nopl	(%rax) # Size: 3
.Ltmp3817:
    00000e78: 	paddd	(%rdx), %xmm0
    00000e7c: 	movdqu	0x4(%rdx), %xmm7
    00000e81: 	addq	$0x10, %rdx
    00000e85: 	psubd	%xmm7, %xmm0
    00000e89: 	cmpq	%rdx, %rbx
    00000e8c: 	jne	.Ltmp3817 # Offset: 3724
    00000e8e: 	movdqa	%xmm0, %xmm1
    00000e92: 	addl	0x7df8(%rsp), %eax
    00000e99: 	movq	0x7df4(%rsp), %xmm2
    00000ea2: 	psrldq	$0x8, %xmm1
    00000ea7: 	subl	%esi, %eax
    00000ea9: 	subl	0x7dfc(%rsp), %eax
    00000eb0: 	paddd	%xmm1, %xmm0
    00000eb4: 	movq	0x7df0(%rsp), %xmm1
    00000ebd: 	psubd	%xmm2, %xmm1
    00000ec1: 	movd	%xmm1, %edx
    00000ec5: 	pshufd	$0xe5, %xmm1, %xmm3
    00000eca: 	movdqa	%xmm0, %xmm1
    00000ece: 	psrldq	$0x4, %xmm1
    00000ed3: 	addl	%edx, %eax
    00000ed5: 	movd	%xmm3, %edx
    00000ed9: 	paddd	%xmm1, %xmm0
    00000edd: 	addl	%edx, %eax
    00000edf: 	movd	%xmm0, %edx
    00000ee3: 	addl	%edx, %eax
    00000ee5: 	jne	.Ltmp3818 # Offset: 3813
.Ltmp4009:
    00000eeb: 	addl	$0x1, %r15d
    00000eef: 	cmpl	%ecx, %r15d
    00000ef2: 	jl	.Ltmp3819 # Offset: 3826
.Ltmp3816:
    00000ef8: 	movq	%r12, %rsi
    00000efb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000f02: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 3842
    00000f07: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000f0e: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000f15: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000f1c: 	je	.Ltmp3820 # Offset: 3868
.Ltmp4044:
    00000f22: 	movq	-0x20(%rax), %r15
    00000f26: 	callq	clock@PLT # Offset: 3878
    00000f2b: 	pxor	%xmm0, %xmm0
    00000f2f: 	movq	%rax, end_time(%rip)
    00000f36: 	movq	%r15, %rdi
    00000f39: 	subq	start_time(%rip), %rax
    00000f40: 	cvtsi2sd	%rax, %xmm0
    00000f45: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000f4d: 	callq	_Z13record_resultdPKc # Offset: 3917
    00000f52: 	movq	0xe0(%rsp), %rdi
    00000f5a: 	cmpq	0x8(%rsp), %rdi
    00000f5f: 	je	.Ltmp3821 # Offset: 3935
    00000f61: 	movq	0xf0(%rsp), %rax
    00000f69: 	leaq	0x1(%rax), %rsi
    00000f6d: 	callq	_ZdlPvm@PLT # Offset: 3949
.Ltmp3821:
    00000f72: 	leaq	DATAat0x4d29b(%rip), %rdx
    00000f79: 	movq	%r14, %rsi
    00000f7c: 	movq	%r12, %rdi
    00000f7f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3967
    00000f84: 	callq	clock@PLT # Offset: 3972
    00000f89: 	movl	iterations(%rip), %ecx
    00000f8f: 	xorl	%r15d, %r15d
    00000f92: 	leaq	0x7cf0(%rbp), %rbx
    00000f99: 	movq	%rax, start_time(%rip)
    00000fa0: 	testl	%ecx, %ecx
    00000fa2: 	jle	.Ltmp3822 # Offset: 4002
    00000fa8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3825:
    00000fb0: 	movl	0x104(%rsp), %esi
    00000fb7: 	movl	0x100(%rsp), %eax
    00000fbe: 	movq	%rbp, %rdx
    00000fc1: 	pxor	%xmm0, %xmm0
    00000fc5: 	nopl	(%rax) # Size: 3
.Ltmp3823:
    00000fc8: 	paddd	(%rdx), %xmm0
    00000fcc: 	movdqu	0x4(%rdx), %xmm3
    00000fd1: 	addq	$0x10, %rdx
    00000fd5: 	psubd	%xmm3, %xmm0
    00000fd9: 	cmpq	%rdx, %rbx
    00000fdc: 	jne	.Ltmp3823 # Offset: 4060
    00000fde: 	movdqa	%xmm0, %xmm1
    00000fe2: 	addl	0x7df8(%rsp), %eax
    00000fe9: 	movq	0x7df4(%rsp), %xmm2
    00000ff2: 	psrldq	$0x8, %xmm1
    00000ff7: 	subl	%esi, %eax
    00000ff9: 	subl	0x7dfc(%rsp), %eax
    00001000: 	paddd	%xmm1, %xmm0
    00001004: 	movq	0x7df0(%rsp), %xmm1
    0000100d: 	psubd	%xmm2, %xmm1
    00001011: 	movd	%xmm1, %edx
    00001015: 	pshufd	$0xe5, %xmm1, %xmm4
    0000101a: 	movdqa	%xmm0, %xmm1
    0000101e: 	psrldq	$0x4, %xmm1
    00001023: 	addl	%edx, %eax
    00001025: 	movd	%xmm4, %edx
    00001029: 	paddd	%xmm1, %xmm0
    0000102d: 	addl	%edx, %eax
    0000102f: 	movd	%xmm0, %edx
    00001033: 	addl	%edx, %eax
    00001035: 	jne	.Ltmp3824 # Offset: 4149
.Ltmp4008:
    0000103b: 	addl	$0x1, %r15d
    0000103f: 	cmpl	%ecx, %r15d
    00001042: 	jl	.Ltmp3825 # Offset: 4162
.Ltmp3822:
    00001048: 	movq	%r12, %rsi
    0000104b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001052: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 4178
    00001057: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000105e: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001065: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000106c: 	je	.Ltmp3826 # Offset: 4204
.Ltmp4043:
    00001072: 	movq	-0x20(%rax), %r15
    00001076: 	callq	clock@PLT # Offset: 4214
    0000107b: 	pxor	%xmm0, %xmm0
    0000107f: 	movq	%rax, end_time(%rip)
    00001086: 	movq	%r15, %rdi
    00001089: 	subq	start_time(%rip), %rax
    00001090: 	cvtsi2sd	%rax, %xmm0
    00001095: 	divsd	DATAat0x4d640(%rip), %xmm0
    0000109d: 	callq	_Z13record_resultdPKc # Offset: 4253
    000010a2: 	movq	0xe0(%rsp), %rdi
    000010aa: 	cmpq	0x8(%rsp), %rdi
    000010af: 	je	.Ltmp3827 # Offset: 4271
    000010b1: 	movq	0xf0(%rsp), %rax
    000010b9: 	leaq	0x1(%rax), %rsi
    000010bd: 	callq	_ZdlPvm@PLT # Offset: 4285
.Ltmp3827:
    000010c2: 	leaq	DATAat0x4d2ad(%rip), %rdx
    000010c9: 	movq	%r14, %rsi
    000010cc: 	movq	%r12, %rdi
    000010cf: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4303
    000010d4: 	callq	clock@PLT # Offset: 4308
    000010d9: 	movl	iterations(%rip), %ecx
    000010df: 	xorl	%r15d, %r15d
    000010e2: 	leaq	0x7cf0(%rbp), %rbx
    000010e9: 	movq	%rax, start_time(%rip)
    000010f0: 	testl	%ecx, %ecx
    000010f2: 	jle	.Ltmp3828 # Offset: 4338
    000010f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3831:
    00001100: 	movl	0x100(%rsp), %eax
    00001107: 	movl	0x104(%rsp), %esi
    0000110e: 	movq	%rbp, %rdx
    00001111: 	pxor	%xmm0, %xmm0
    00001115: 	nopl	(%rax) # Size: 3
.Ltmp3829:
    00001118: 	paddd	(%rdx), %xmm0
    0000111c: 	movdqu	0x4(%rdx), %xmm4
    00001121: 	addq	$0x10, %rdx
    00001125: 	psubd	%xmm4, %xmm0
    00001129: 	cmpq	%rdx, %rbx
    0000112c: 	jne	.Ltmp3829 # Offset: 4396
    0000112e: 	movdqa	%xmm0, %xmm1
    00001132: 	addl	0x7df8(%rsp), %eax
    00001139: 	movq	0x7df4(%rsp), %xmm2
    00001142: 	psrldq	$0x8, %xmm1
    00001147: 	subl	%esi, %eax
    00001149: 	subl	0x7dfc(%rsp), %eax
    00001150: 	paddd	%xmm1, %xmm0
    00001154: 	movq	0x7df0(%rsp), %xmm1
    0000115d: 	psubd	%xmm2, %xmm1
    00001161: 	movd	%xmm1, %edx
    00001165: 	pshufd	$0xe5, %xmm1, %xmm5
    0000116a: 	movdqa	%xmm0, %xmm1
    0000116e: 	psrldq	$0x4, %xmm1
    00001173: 	addl	%edx, %eax
    00001175: 	movd	%xmm5, %edx
    00001179: 	paddd	%xmm1, %xmm0
    0000117d: 	addl	%edx, %eax
    0000117f: 	movd	%xmm0, %edx
    00001183: 	addl	%edx, %eax
    00001185: 	jne	.Ltmp3830 # Offset: 4485
.Ltmp4007:
    0000118b: 	addl	$0x1, %r15d
    0000118f: 	cmpl	%ecx, %r15d
    00001192: 	jl	.Ltmp3831 # Offset: 4498
.Ltmp3828:
    00001198: 	movq	%r12, %rsi
    0000119b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000011a2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 4514
    000011a7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000011ae: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000011b5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000011bc: 	je	.Ltmp3832 # Offset: 4540
.Ltmp4042:
    000011c2: 	movq	-0x20(%rax), %r15
    000011c6: 	callq	clock@PLT # Offset: 4550
    000011cb: 	pxor	%xmm0, %xmm0
    000011cf: 	movq	%rax, end_time(%rip)
    000011d6: 	movq	%r15, %rdi
    000011d9: 	subq	start_time(%rip), %rax
    000011e0: 	cvtsi2sd	%rax, %xmm0
    000011e5: 	divsd	DATAat0x4d640(%rip), %xmm0
    000011ed: 	callq	_Z13record_resultdPKc # Offset: 4589
    000011f2: 	movq	0xe0(%rsp), %rdi
    000011fa: 	cmpq	0x8(%rsp), %rdi
    000011ff: 	je	.Ltmp3833 # Offset: 4607
    00001201: 	movq	0xf0(%rsp), %rax
    00001209: 	leaq	0x1(%rax), %rsi
    0000120d: 	callq	_ZdlPvm@PLT # Offset: 4621
.Ltmp3833:
    00001212: 	leaq	0x60(%rsp), %rdi
    00001217: 	leaq	DATAat0x4d2b6(%rip), %rdx
    0000121e: 	movq	%r14, %rsi
    00001221: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4641
    00001226: 	movl	iterations(%rip), %edx
    0000122c: 	movq	0x60(%rsp), %rdi
    00001231: 	xorl	%r8d, %r8d
    00001234: 	xorl	%ecx, %ecx
    00001236: 	movl	$0x1f40, %esi
    0000123b: 	callq	_Z9summarizePKciiii # Offset: 4667
    00001240: 	leaq	DATAat0x4d2bb(%rip), %rdx
    00001247: 	movq	%r14, %rsi
    0000124a: 	movq	%r12, %rdi
    0000124d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4685
    00001252: 	callq	clock@PLT # Offset: 4690
    00001257: 	movl	iterations(%rip), %ecx
    0000125d: 	xorl	%r15d, %r15d
    00001260: 	leaq	0x7cf0(%rbp), %rbx
    00001267: 	movq	%rax, start_time(%rip)
    0000126e: 	testl	%ecx, %ecx
    00001270: 	jle	.Ltmp3834 # Offset: 4720
    00001276: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3837:
    00001280: 	movl	0x100(%rsp), %edx
    00001287: 	movq	%rbp, %rax
    0000128a: 	subl	0x104(%rsp), %edx
    00001291: 	pxor	%xmm0, %xmm0
    00001295: 	nopl	(%rax) # Size: 3
.Ltmp3835:
    00001298: 	movdqa	(%rax), %xmm1
    0000129c: 	movdqu	0x4(%rax), %xmm5
    000012a1: 	addq	$0x10, %rax
    000012a5: 	psubd	%xmm5, %xmm1
    000012a9: 	pslld	$0x1, %xmm1
    000012ae: 	paddd	%xmm1, %xmm0
    000012b2: 	cmpq	%rbx, %rax
    000012b5: 	jne	.Ltmp3835 # Offset: 4789
    000012b7: 	movdqa	%xmm0, %xmm1
    000012bb: 	addl	0x7df8(%rsp), %edx
    000012c2: 	movq	0x7df4(%rsp), %xmm2
    000012cb: 	psrldq	$0x8, %xmm1
    000012d0: 	subl	0x7dfc(%rsp), %edx
    000012d7: 	paddd	%xmm1, %xmm0
    000012db: 	movq	0x7df0(%rsp), %xmm1
    000012e4: 	psubd	%xmm2, %xmm1
    000012e8: 	pslld	$0x1, %xmm1
    000012ed: 	movd	%xmm1, %eax
    000012f1: 	pshufd	$0xe5, %xmm1, %xmm6
    000012f6: 	movdqa	%xmm0, %xmm1
    000012fa: 	movd	%xmm6, %esi
    000012fe: 	psrldq	$0x4, %xmm1
    00001303: 	addl	%esi, %eax
    00001305: 	paddd	%xmm1, %xmm0
    00001309: 	leal	(%rax,%rdx,2), %edx
    0000130c: 	movd	%xmm0, %eax
    00001310: 	addl	%eax, %edx
    00001312: 	jne	.Ltmp3836 # Offset: 4882
.Ltmp4006:
    00001318: 	addl	$0x1, %r15d
    0000131c: 	cmpl	%ecx, %r15d
    0000131f: 	jl	.Ltmp3837 # Offset: 4895
.Ltmp3834:
    00001325: 	movq	%r12, %rsi
    00001328: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000132f: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 4911
    00001334: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000133b: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001342: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001349: 	je	.Ltmp3838 # Offset: 4937
.Ltmp4041:
    0000134f: 	movq	-0x20(%rax), %r15
    00001353: 	callq	clock@PLT # Offset: 4947
    00001358: 	pxor	%xmm0, %xmm0
    0000135c: 	movq	%rax, end_time(%rip)
    00001363: 	movq	%r15, %rdi
    00001366: 	subq	start_time(%rip), %rax
    0000136d: 	cvtsi2sd	%rax, %xmm0
    00001372: 	divsd	DATAat0x4d640(%rip), %xmm0
    0000137a: 	callq	_Z13record_resultdPKc # Offset: 4986
    0000137f: 	movq	0xe0(%rsp), %rdi
    00001387: 	cmpq	0x8(%rsp), %rdi
    0000138c: 	je	.Ltmp3839 # Offset: 5004
    0000138e: 	movq	0xf0(%rsp), %rax
    00001396: 	leaq	0x1(%rax), %rsi
    0000139a: 	callq	_ZdlPvm@PLT # Offset: 5018
.Ltmp3839:
    0000139f: 	leaq	DATAat0x4d2ca(%rip), %rdx
    000013a6: 	movq	%r14, %rsi
    000013a9: 	movq	%r12, %rdi
    000013ac: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5036
    000013b1: 	callq	clock@PLT # Offset: 5041
    000013b6: 	movl	iterations(%rip), %ecx
    000013bc: 	xorl	%r15d, %r15d
    000013bf: 	leaq	0x7cf0(%rbp), %rbx
    000013c6: 	movq	%rax, start_time(%rip)
    000013cd: 	testl	%ecx, %ecx
    000013cf: 	jle	.Ltmp3840 # Offset: 5071
    000013d5: 	nopl	(%rax) # Size: 3
.Ltmp3843:
    000013d8: 	movl	0x100(%rsp), %edx
    000013df: 	movq	%rbp, %rax
    000013e2: 	subl	0x104(%rsp), %edx
    000013e9: 	pxor	%xmm0, %xmm0
    000013ed: 	nopl	(%rax) # Size: 3
.Ltmp3841:
    000013f0: 	movdqa	(%rax), %xmm1
    000013f4: 	movdqu	0x4(%rax), %xmm6
    000013f9: 	addq	$0x10, %rax
    000013fd: 	psubd	%xmm6, %xmm1
    00001401: 	pslld	$0x1, %xmm1
    00001406: 	paddd	%xmm1, %xmm0
    0000140a: 	cmpq	%rax, %rbx
    0000140d: 	jne	.Ltmp3841 # Offset: 5133
    0000140f: 	movdqa	%xmm0, %xmm1
    00001413: 	addl	0x7df8(%rsp), %edx
    0000141a: 	movq	0x7df4(%rsp), %xmm2
    00001423: 	psrldq	$0x8, %xmm1
    00001428: 	subl	0x7dfc(%rsp), %edx
    0000142f: 	paddd	%xmm1, %xmm0
    00001433: 	movq	0x7df0(%rsp), %xmm1
    0000143c: 	psubd	%xmm2, %xmm1
    00001440: 	pslld	$0x1, %xmm1
    00001445: 	movd	%xmm1, %eax
    00001449: 	pshufd	$0xe5, %xmm1, %xmm7
    0000144e: 	movdqa	%xmm0, %xmm1
    00001452: 	movd	%xmm7, %esi
    00001456: 	psrldq	$0x4, %xmm1
    0000145b: 	addl	%esi, %eax
    0000145d: 	paddd	%xmm1, %xmm0
    00001461: 	leal	(%rax,%rdx,2), %edx
    00001464: 	movd	%xmm0, %eax
    00001468: 	addl	%eax, %edx
    0000146a: 	jne	.Ltmp3842 # Offset: 5226
.Ltmp4005:
    00001470: 	addl	$0x1, %r15d
    00001474: 	cmpl	%ecx, %r15d
    00001477: 	jl	.Ltmp3843 # Offset: 5239
.Ltmp3840:
    0000147d: 	movq	%r12, %rsi
    00001480: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001487: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 5255
    0000148c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001493: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000149a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000014a1: 	je	.Ltmp3844 # Offset: 5281
.Ltmp4040:
    000014a7: 	movq	-0x20(%rax), %r15
    000014ab: 	callq	clock@PLT # Offset: 5291
    000014b0: 	pxor	%xmm0, %xmm0
    000014b4: 	movq	%rax, end_time(%rip)
    000014bb: 	movq	%r15, %rdi
    000014be: 	subq	start_time(%rip), %rax
    000014c5: 	cvtsi2sd	%rax, %xmm0
    000014ca: 	divsd	DATAat0x4d640(%rip), %xmm0
    000014d2: 	callq	_Z13record_resultdPKc # Offset: 5330
    000014d7: 	movq	0xe0(%rsp), %rdi
    000014df: 	cmpq	0x8(%rsp), %rdi
    000014e4: 	je	.Ltmp3845 # Offset: 5348
    000014e6: 	movq	0xf0(%rsp), %rax
    000014ee: 	leaq	0x1(%rax), %rsi
    000014f2: 	callq	_ZdlPvm@PLT # Offset: 5362
.Ltmp3845:
    000014f7: 	leaq	DATAat0x4d2de(%rip), %rdx
    000014fe: 	movq	%r14, %rsi
    00001501: 	movq	%r12, %rdi
    00001504: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5380
    00001509: 	movl	0x10(%rsp), %edx
    0000150d: 	movq	%r12, %rcx
    00001510: 	movl	$0x1f40, %esi
    00001515: 	movq	%rbp, %rdi
    00001518: 	callq	_Z20test_CSE2_add_inlineIj14custom_cse_addIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5400
    0000151d: 	movq	0xe0(%rsp), %rdi
    00001525: 	cmpq	0x8(%rsp), %rdi
    0000152a: 	je	.Ltmp3846 # Offset: 5418
    0000152c: 	movq	0xf0(%rsp), %rax
    00001534: 	leaq	0x1(%rax), %rsi
    00001538: 	callq	_ZdlPvm@PLT # Offset: 5432
.Ltmp3846:
    0000153d: 	leaq	DATAat0x4d2f0(%rip), %rdx
    00001544: 	movq	%r14, %rsi
    00001547: 	movq	%r12, %rdi
    0000154a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5450
    0000154f: 	movl	0x10(%rsp), %edx
    00001553: 	movq	%r12, %rcx
    00001556: 	movl	$0x1f40, %esi
    0000155b: 	movq	%rbp, %rdi
    0000155e: 	callq	_Z28test_CSE2_add_inline_flippedIj14custom_cse_addIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5470
    00001563: 	movq	0xe0(%rsp), %rdi
    0000156b: 	cmpq	0x8(%rsp), %rdi
    00001570: 	je	.Ltmp3847 # Offset: 5488
    00001572: 	movq	0xf0(%rsp), %rax
    0000157a: 	leaq	0x1(%rax), %rsi
    0000157e: 	callq	_ZdlPvm@PLT # Offset: 5502
.Ltmp3847:
    00001583: 	leaq	DATAat0x4d30a(%rip), %rdx
    0000158a: 	movq	%r14, %rsi
    0000158d: 	movq	%r12, %rdi
    00001590: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5520
    00001595: 	movl	0x10(%rsp), %edx
    00001599: 	movq	%r12, %rcx
    0000159c: 	movl	$0x1f40, %esi
    000015a1: 	movq	%rbp, %rdi
    000015a4: 	callq	_Z9test_CSE2Ij14custom_cse_addIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5540
    000015a9: 	movq	0xe0(%rsp), %rdi
    000015b1: 	cmpq	0x8(%rsp), %rdi
    000015b6: 	je	.Ltmp3848 # Offset: 5558
    000015b8: 	movq	0xf0(%rsp), %rax
    000015c0: 	leaq	0x1(%rax), %rsi
    000015c4: 	callq	_ZdlPvm@PLT # Offset: 5572
.Ltmp3848:
    000015c9: 	leaq	DATAat0x4d315(%rip), %rdx
    000015d0: 	movq	%r14, %rsi
    000015d3: 	movq	%r12, %rdi
    000015d6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5590
    000015db: 	callq	clock@PLT # Offset: 5595
    000015e0: 	movl	iterations(%rip), %ecx
    000015e6: 	xorl	%r15d, %r15d
    000015e9: 	leaq	0x7cf0(%rbp), %rbx
    000015f0: 	movq	%rax, start_time(%rip)
    000015f7: 	testl	%ecx, %ecx
    000015f9: 	jle	.Ltmp3849 # Offset: 5625
    000015ff: 	nop # Size: 1
.Ltmp3852:
    00001600: 	movl	0x100(%rsp), %edx
    00001607: 	movq	%rbp, %rax
    0000160a: 	subl	0x104(%rsp), %edx
    00001611: 	pxor	%xmm0, %xmm0
    00001615: 	nopl	(%rax) # Size: 3
.Ltmp3850:
    00001618: 	movdqa	(%rax), %xmm1
    0000161c: 	movdqu	0x4(%rax), %xmm7
    00001621: 	addq	$0x10, %rax
    00001625: 	psubd	%xmm7, %xmm1
    00001629: 	pslld	$0x1, %xmm1
    0000162e: 	paddd	%xmm1, %xmm0
    00001632: 	cmpq	%rbx, %rax
    00001635: 	jne	.Ltmp3850 # Offset: 5685
    00001637: 	movdqa	%xmm0, %xmm1
    0000163b: 	addl	0x7df8(%rsp), %edx
    00001642: 	movq	0x7df4(%rsp), %xmm2
    0000164b: 	psrldq	$0x8, %xmm1
    00001650: 	subl	0x7dfc(%rsp), %edx
    00001657: 	paddd	%xmm1, %xmm0
    0000165b: 	movq	0x7df0(%rsp), %xmm1
    00001664: 	psubd	%xmm2, %xmm1
    00001668: 	pslld	$0x1, %xmm1
    0000166d: 	movd	%xmm1, %eax
    00001671: 	pshufd	$0xe5, %xmm1, %xmm3
    00001676: 	movdqa	%xmm0, %xmm1
    0000167a: 	movd	%xmm3, %esi
    0000167e: 	psrldq	$0x4, %xmm1
    00001683: 	addl	%esi, %eax
    00001685: 	paddd	%xmm1, %xmm0
    00001689: 	leal	(%rax,%rdx,2), %edx
    0000168c: 	movd	%xmm0, %eax
    00001690: 	addl	%eax, %edx
    00001692: 	jne	.Ltmp3851 # Offset: 5778
.Ltmp4004:
    00001698: 	addl	$0x1, %r15d
    0000169c: 	cmpl	%ecx, %r15d
    0000169f: 	jl	.Ltmp3852 # Offset: 5791
.Ltmp3849:
    000016a5: 	movq	%r12, %rsi
    000016a8: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000016af: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 5807
    000016b4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000016bb: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000016c2: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000016c9: 	je	.Ltmp3853 # Offset: 5833
.Ltmp4039:
    000016cf: 	movq	-0x20(%rax), %r15
    000016d3: 	callq	clock@PLT # Offset: 5843
    000016d8: 	pxor	%xmm0, %xmm0
    000016dc: 	movq	%rax, end_time(%rip)
    000016e3: 	movq	%r15, %rdi
    000016e6: 	subq	start_time(%rip), %rax
    000016ed: 	cvtsi2sd	%rax, %xmm0
    000016f2: 	divsd	DATAat0x4d640(%rip), %xmm0
    000016fa: 	callq	_Z13record_resultdPKc # Offset: 5882
    000016ff: 	movq	0xe0(%rsp), %rdi
    00001707: 	cmpq	0x8(%rsp), %rdi
    0000170c: 	je	.Ltmp3854 # Offset: 5900
    0000170e: 	movq	0xf0(%rsp), %rax
    00001716: 	leaq	0x1(%rax), %rsi
    0000171a: 	callq	_ZdlPvm@PLT # Offset: 5914
.Ltmp3854:
    0000171f: 	leaq	DATAat0x4d32e(%rip), %rdx
    00001726: 	movq	%r14, %rsi
    00001729: 	movq	%r12, %rdi
    0000172c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5932
    00001731: 	callq	clock@PLT # Offset: 5937
    00001736: 	movl	iterations(%rip), %esi
    0000173c: 	xorl	%r15d, %r15d
    0000173f: 	leaq	0x7cf0(%rbp), %rbx
    00001746: 	movq	%rax, start_time(%rip)
    0000174d: 	testl	%esi, %esi
    0000174f: 	jle	.Ltmp3855 # Offset: 5967
    00001755: 	nopl	(%rax) # Size: 3
.Ltmp3858:
    00001758: 	movl	0x100(%rsp), %edx
    0000175f: 	movl	0x104(%rsp), %edi
    00001766: 	movq	%rbp, %rax
    00001769: 	pxor	%xmm0, %xmm0
    0000176d: 	nopl	(%rax) # Size: 3
.Ltmp3856:
    00001770: 	movdqa	(%rax), %xmm1
    00001774: 	movdqu	0x4(%rax), %xmm3
    00001779: 	addq	$0x10, %rax
    0000177d: 	psubd	%xmm3, %xmm1
    00001781: 	pslld	$0x1, %xmm1
    00001786: 	paddd	%xmm1, %xmm0
    0000178a: 	cmpq	%rax, %rbx
    0000178d: 	jne	.Ltmp3856 # Offset: 6029
    0000178f: 	movdqa	%xmm0, %xmm1
    00001793: 	movl	%edx, %eax
    00001795: 	movl	0x7df8(%rsp), %ecx
    0000179c: 	movq	0x7df4(%rsp), %xmm2
    000017a5: 	psrldq	$0x8, %xmm1
    000017aa: 	subl	%edi, %eax
    000017ac: 	subl	0x7dfc(%rsp), %ecx
    000017b3: 	paddd	%xmm1, %xmm0
    000017b7: 	movq	0x7df0(%rsp), %xmm1
    000017c0: 	psubd	%xmm2, %xmm1
    000017c4: 	pslld	$0x1, %xmm1
    000017c9: 	movd	%xmm1, %edx
    000017cd: 	pshufd	$0xe5, %xmm1, %xmm4
    000017d2: 	movdqa	%xmm0, %xmm1
    000017d6: 	leal	(%rdx,%rax,2), %edx
    000017d9: 	psrldq	$0x4, %xmm1
    000017de: 	movd	%xmm4, %eax
    000017e2: 	addl	%edx, %eax
    000017e4: 	paddd	%xmm1, %xmm0
    000017e8: 	leal	(%rax,%rcx,2), %edx
    000017eb: 	movd	%xmm0, %eax
    000017ef: 	addl	%eax, %edx
    000017f1: 	jne	.Ltmp3857 # Offset: 6129
.Ltmp4003:
    000017f7: 	addl	$0x1, %r15d
    000017fb: 	cmpl	%esi, %r15d
    000017fe: 	jl	.Ltmp3858 # Offset: 6142
.Ltmp3855:
    00001804: 	movq	%r12, %rsi
    00001807: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000180e: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 6158
    00001813: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000181a: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001821: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001828: 	je	.Ltmp3859 # Offset: 6184
.Ltmp4038:
    0000182e: 	movq	-0x20(%rax), %r15
    00001832: 	callq	clock@PLT # Offset: 6194
    00001837: 	pxor	%xmm0, %xmm0
    0000183b: 	movq	%rax, end_time(%rip)
    00001842: 	movq	%r15, %rdi
    00001845: 	subq	start_time(%rip), %rax
    0000184c: 	cvtsi2sd	%rax, %xmm0
    00001851: 	divsd	DATAat0x4d640(%rip), %xmm0
    00001859: 	callq	_Z13record_resultdPKc # Offset: 6233
    0000185e: 	movq	0xe0(%rsp), %rdi
    00001866: 	cmpq	0x8(%rsp), %rdi
    0000186b: 	je	.Ltmp3860 # Offset: 6251
    0000186d: 	movq	0xf0(%rsp), %rax
    00001875: 	leaq	0x1(%rax), %rsi
    00001879: 	callq	_ZdlPvm@PLT # Offset: 6265
.Ltmp3860:
    0000187e: 	leaq	DATAat0x4d33e(%rip), %rdx
    00001885: 	movq	%r14, %rsi
    00001888: 	movq	%r12, %rdi
    0000188b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6283
    00001890: 	callq	clock@PLT # Offset: 6288
    00001895: 	movl	iterations(%rip), %ecx
    0000189b: 	xorl	%r15d, %r15d
    0000189e: 	leaq	0x7cf0(%rbp), %rbx
    000018a5: 	movq	%rax, start_time(%rip)
    000018ac: 	testl	%ecx, %ecx
    000018ae: 	jle	.Ltmp3861 # Offset: 6318
    000018b4: 	nopl	(%rax) # Size: 4
.Ltmp3864:
    000018b8: 	movl	0x100(%rsp), %edx
    000018bf: 	movq	%rbp, %rax
    000018c2: 	subl	0x104(%rsp), %edx
    000018c9: 	pxor	%xmm0, %xmm0
    000018cd: 	nopl	(%rax) # Size: 3
.Ltmp3862:
    000018d0: 	movdqa	(%rax), %xmm1
    000018d4: 	movdqu	0x4(%rax), %xmm4
    000018d9: 	addq	$0x10, %rax
    000018dd: 	psubd	%xmm4, %xmm1
    000018e1: 	pslld	$0x1, %xmm1
    000018e6: 	paddd	%xmm1, %xmm0
    000018ea: 	cmpq	%rax, %rbx
    000018ed: 	jne	.Ltmp3862 # Offset: 6381
    000018ef: 	movdqa	%xmm0, %xmm1
    000018f3: 	addl	0x7df8(%rsp), %edx
    000018fa: 	movq	0x7df4(%rsp), %xmm2
    00001903: 	psrldq	$0x8, %xmm1
    00001908: 	subl	0x7dfc(%rsp), %edx
    0000190f: 	paddd	%xmm1, %xmm0
    00001913: 	movq	0x7df0(%rsp), %xmm1
    0000191c: 	psubd	%xmm2, %xmm1
    00001920: 	pslld	$0x1, %xmm1
    00001925: 	movd	%xmm1, %eax
    00001929: 	pshufd	$0xe5, %xmm1, %xmm5
    0000192e: 	movdqa	%xmm0, %xmm1
    00001932: 	movd	%xmm5, %esi
    00001936: 	psrldq	$0x4, %xmm1
    0000193b: 	addl	%esi, %eax
    0000193d: 	paddd	%xmm1, %xmm0
    00001941: 	leal	(%rax,%rdx,2), %edx
    00001944: 	movd	%xmm0, %eax
    00001948: 	addl	%eax, %edx
    0000194a: 	jne	.Ltmp3863 # Offset: 6474
.Ltmp4002:
    00001950: 	addl	$0x1, %r15d
    00001954: 	cmpl	%ecx, %r15d
    00001957: 	jl	.Ltmp3864 # Offset: 6487
.Ltmp3861:
    0000195d: 	movq	%r12, %rsi
    00001960: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001967: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 6503
    0000196c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001973: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000197a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001981: 	je	.Ltmp3865 # Offset: 6529
.Ltmp4037:
    00001987: 	movq	-0x20(%rax), %r15
    0000198b: 	callq	clock@PLT # Offset: 6539
    00001990: 	pxor	%xmm0, %xmm0
    00001994: 	movq	%rax, end_time(%rip)
    0000199b: 	movq	%r15, %rdi
    0000199e: 	subq	start_time(%rip), %rax
    000019a5: 	cvtsi2sd	%rax, %xmm0
    000019aa: 	divsd	DATAat0x4d640(%rip), %xmm0
    000019b2: 	callq	_Z13record_resultdPKc # Offset: 6578
    000019b7: 	movq	0xe0(%rsp), %rdi
    000019bf: 	cmpq	0x8(%rsp), %rdi
    000019c4: 	je	.Ltmp3866 # Offset: 6596
    000019c6: 	movq	0xf0(%rsp), %rax
    000019ce: 	leaq	0x1(%rax), %rsi
    000019d2: 	callq	_ZdlPvm@PLT # Offset: 6610
.Ltmp3866:
    000019d7: 	leaq	DATAat0x4d357(%rip), %rdx
    000019de: 	movq	%r14, %rsi
    000019e1: 	movq	%r12, %rdi
    000019e4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6628
    000019e9: 	callq	clock@PLT # Offset: 6633
    000019ee: 	movl	iterations(%rip), %esi
    000019f4: 	xorl	%r15d, %r15d
    000019f7: 	leaq	0x7cf0(%rbp), %rbx
    000019fe: 	movq	%rax, start_time(%rip)
    00001a05: 	testl	%esi, %esi
    00001a07: 	jle	.Ltmp3867 # Offset: 6663
    00001a0d: 	nopl	(%rax) # Size: 3
.Ltmp3870:
    00001a10: 	movl	0x100(%rsp), %edx
    00001a17: 	movl	0x104(%rsp), %ecx
    00001a1e: 	movq	%rbp, %rax
    00001a21: 	pxor	%xmm1, %xmm1
    00001a25: 	nopl	(%rax) # Size: 3
.Ltmp3868:
    00001a28: 	movdqa	(%rax), %xmm0
    00001a2c: 	movdqu	0x4(%rax), %xmm5
    00001a31: 	addq	$0x10, %rax
    00001a35: 	psubd	%xmm5, %xmm0
    00001a39: 	pslld	$0x1, %xmm0
    00001a3e: 	paddd	%xmm0, %xmm1
    00001a42: 	cmpq	%rbx, %rax
    00001a45: 	jne	.Ltmp3868 # Offset: 6725
    00001a47: 	movdqa	%xmm1, %xmm0
    00001a4b: 	addl	0x7df0(%rsp), %edx
    00001a52: 	psrldq	$0x8, %xmm0
    00001a57: 	subl	%ecx, %edx
    00001a59: 	subl	0x7dfc(%rsp), %edx
    00001a60: 	paddd	%xmm0, %xmm1
    00001a64: 	movdqa	%xmm1, %xmm0
    00001a68: 	psrldq	$0x4, %xmm0
    00001a6d: 	paddd	%xmm0, %xmm1
    00001a71: 	movd	%xmm1, %eax
    00001a75: 	leal	(%rax,%rdx,2), %eax
    00001a78: 	testl	%eax, %eax
    00001a7a: 	jne	.Ltmp3869 # Offset: 6778
.Ltmp4001:
    00001a80: 	addl	$0x1, %r15d
    00001a84: 	cmpl	%esi, %r15d
    00001a87: 	jl	.Ltmp3870 # Offset: 6791
.Ltmp3867:
    00001a89: 	movq	%r12, %rsi
    00001a8c: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001a93: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 6803
    00001a98: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001a9f: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001aa6: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001aad: 	je	.Ltmp3871 # Offset: 6829
.Ltmp4036:
    00001ab3: 	movq	-0x20(%rax), %r15
    00001ab7: 	callq	clock@PLT # Offset: 6839
    00001abc: 	pxor	%xmm0, %xmm0
    00001ac0: 	movq	%rax, end_time(%rip)
    00001ac7: 	movq	%r15, %rdi
    00001aca: 	subq	start_time(%rip), %rax
    00001ad1: 	cvtsi2sd	%rax, %xmm0
    00001ad6: 	divsd	DATAat0x4d640(%rip), %xmm0
    00001ade: 	callq	_Z13record_resultdPKc # Offset: 6878
    00001ae3: 	movq	0xe0(%rsp), %rdi
    00001aeb: 	cmpq	0x8(%rsp), %rdi
    00001af0: 	je	.Ltmp3872 # Offset: 6896
    00001af2: 	movq	0xf0(%rsp), %rax
    00001afa: 	leaq	0x1(%rax), %rsi
    00001afe: 	callq	_ZdlPvm@PLT # Offset: 6910
.Ltmp3872:
    00001b03: 	leaq	DATAat0x4d367(%rip), %rdx
    00001b0a: 	movq	%r14, %rsi
    00001b0d: 	movq	%r12, %rdi
    00001b10: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6928
    00001b15: 	callq	clock@PLT # Offset: 6933
    00001b1a: 	movl	iterations(%rip), %ecx
    00001b20: 	xorl	%r15d, %r15d
    00001b23: 	leaq	0x7cf0(%rbp), %rbx
    00001b2a: 	movq	%rax, start_time(%rip)
    00001b31: 	testl	%ecx, %ecx
    00001b33: 	jle	.Ltmp3873 # Offset: 6963
    00001b39: 	nopl	(%rax) # Size: 7
.Ltmp3876:
    00001b40: 	movl	0x100(%rsp), %edx
    00001b47: 	movq	%rbp, %rax
    00001b4a: 	subl	0x104(%rsp), %edx
    00001b51: 	pxor	%xmm0, %xmm0
    00001b55: 	nopl	(%rax) # Size: 3
.Ltmp3874:
    00001b58: 	movdqa	(%rax), %xmm1
    00001b5c: 	movdqu	0x4(%rax), %xmm6
    00001b61: 	addq	$0x10, %rax
    00001b65: 	psubd	%xmm6, %xmm1
    00001b69: 	pslld	$0x1, %xmm1
    00001b6e: 	paddd	%xmm1, %xmm0
    00001b72: 	cmpq	%rax, %rbx
    00001b75: 	jne	.Ltmp3874 # Offset: 7029
    00001b77: 	movdqa	%xmm0, %xmm1
    00001b7b: 	addl	0x7df8(%rsp), %edx
    00001b82: 	movq	0x7df4(%rsp), %xmm2
    00001b8b: 	psrldq	$0x8, %xmm1
    00001b90: 	subl	0x7dfc(%rsp), %edx
    00001b97: 	paddd	%xmm1, %xmm0
    00001b9b: 	movq	0x7df0(%rsp), %xmm1
    00001ba4: 	psubd	%xmm2, %xmm1
    00001ba8: 	pslld	$0x1, %xmm1
    00001bad: 	movd	%xmm1, %eax
    00001bb1: 	pshufd	$0xe5, %xmm1, %xmm6
    00001bb6: 	movdqa	%xmm0, %xmm1
    00001bba: 	movd	%xmm6, %esi
    00001bbe: 	psrldq	$0x4, %xmm1
    00001bc3: 	addl	%esi, %eax
    00001bc5: 	paddd	%xmm1, %xmm0
    00001bc9: 	leal	(%rax,%rdx,2), %edx
    00001bcc: 	movd	%xmm0, %eax
    00001bd0: 	addl	%eax, %edx
    00001bd2: 	jne	.Ltmp3875 # Offset: 7122
.Ltmp4000:
    00001bd8: 	addl	$0x1, %r15d
    00001bdc: 	cmpl	%ecx, %r15d
    00001bdf: 	jl	.Ltmp3876 # Offset: 7135
.Ltmp3873:
    00001be5: 	movq	%r12, %rsi
    00001be8: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001bef: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 7151
    00001bf4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001bfb: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001c02: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001c09: 	je	.Ltmp3877 # Offset: 7177
.Ltmp4035:
    00001c0f: 	movq	-0x20(%rax), %r15
    00001c13: 	callq	clock@PLT # Offset: 7187
    00001c18: 	pxor	%xmm0, %xmm0
    00001c1c: 	movq	%rax, end_time(%rip)
    00001c23: 	movq	%r15, %rdi
    00001c26: 	subq	start_time(%rip), %rax
    00001c2d: 	cvtsi2sd	%rax, %xmm0
    00001c32: 	divsd	DATAat0x4d640(%rip), %xmm0
    00001c3a: 	callq	_Z13record_resultdPKc # Offset: 7226
    00001c3f: 	movq	0xe0(%rsp), %rdi
    00001c47: 	cmpq	0x8(%rsp), %rdi
    00001c4c: 	je	.Ltmp3878 # Offset: 7244
    00001c4e: 	movq	0xf0(%rsp), %rax
    00001c56: 	leaq	0x1(%rax), %rsi
    00001c5a: 	callq	_ZdlPvm@PLT # Offset: 7258
.Ltmp3878:
    00001c5f: 	leaq	DATAat0x4d37e(%rip), %rdx
    00001c66: 	movq	%r14, %rsi
    00001c69: 	movq	%r12, %rdi
    00001c6c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7276
    00001c71: 	callq	clock@PLT # Offset: 7281
    00001c76: 	movl	iterations(%rip), %edi
    00001c7c: 	xorl	%ebx, %ebx
    00001c7e: 	leaq	0x104(%rsp), %r15
    00001c86: 	movq	%rax, start_time(%rip)
    00001c8d: 	testl	%edi, %edi
    00001c8f: 	jle	.Ltmp3879 # Offset: 7311
    00001c91: 	nopl	(%rax) # Size: 7
.Ltmp3882:
    00001c98: 	movl	0x100(%rsp), %ecx
    00001c9f: 	movq	%r15, %rax
    00001ca2: 	movl	%ecx, %esi
    00001ca4: 	subl	0x104(%rsp), %esi
    00001cab: 	addl	%esi, %esi
    00001cad: 	nopl	(%rax) # Size: 3
.Ltmp3880:
    00001cb0: 	movl	%ecx, %edx
    00001cb2: 	movl	(%rax), %ecx
    00001cb4: 	addq	$0x4, %rax
    00001cb8: 	subl	%ecx, %edx
    00001cba: 	leal	(%rsi,%rdx,2), %esi
    00001cbd: 	cmpq	%rax, %r13
    00001cc0: 	jne	.Ltmp3880 # Offset: 7360
    00001cc2: 	testl	%esi, %esi
    00001cc4: 	jne	.Ltmp3881 # Offset: 7364
.Ltmp3999:
    00001cca: 	addl	$0x1, %ebx
    00001ccd: 	cmpl	%edi, %ebx
    00001ccf: 	jl	.Ltmp3882 # Offset: 7375
.Ltmp3879:
    00001cd1: 	movq	%r12, %rsi
    00001cd4: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001cdb: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 7387
    00001ce0: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001ce7: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001cee: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001cf5: 	je	.Ltmp3883 # Offset: 7413
.Ltmp4034:
    00001cfb: 	movq	-0x20(%rax), %r13
    00001cff: 	callq	clock@PLT # Offset: 7423
    00001d04: 	pxor	%xmm0, %xmm0
    00001d08: 	movq	%rax, end_time(%rip)
    00001d0f: 	movq	%r13, %rdi
    00001d12: 	subq	start_time(%rip), %rax
    00001d19: 	cvtsi2sd	%rax, %xmm0
    00001d1e: 	divsd	DATAat0x4d640(%rip), %xmm0
    00001d26: 	callq	_Z13record_resultdPKc # Offset: 7462
    00001d2b: 	movq	0xe0(%rsp), %rdi
    00001d33: 	cmpq	0x8(%rsp), %rdi
    00001d38: 	je	.Ltmp3884 # Offset: 7480
    00001d3a: 	movq	0xf0(%rsp), %rax
    00001d42: 	leaq	0x1(%rax), %rsi
    00001d46: 	callq	_ZdlPvm@PLT # Offset: 7494
.Ltmp3884:
    00001d4b: 	leaq	DATAat0x4d38c(%rip), %rdx
    00001d52: 	movq	%r14, %rsi
    00001d55: 	movq	%r12, %rdi
    00001d58: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7512
    00001d5d: 	callq	clock@PLT # Offset: 7517
    00001d62: 	movl	iterations(%rip), %ecx
    00001d68: 	xorl	%r13d, %r13d
    00001d6b: 	leaq	0x7cf0(%rbp), %rbx
    00001d72: 	movq	%rax, start_time(%rip)
    00001d79: 	leaq	DATAat0x4d004(%rip), %r15
    00001d80: 	testl	%ecx, %ecx
    00001d82: 	jle	.Ltmp3885 # Offset: 7554
    00001d88: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3888:
    00001d90: 	movl	0x100(%rsp), %edx
    00001d97: 	movq	%rbp, %rax
    00001d9a: 	subl	0x104(%rsp), %edx
    00001da1: 	pxor	%xmm0, %xmm0
    00001da5: 	nopl	(%rax) # Size: 3
.Ltmp3886:
    00001da8: 	movdqa	(%rax), %xmm1
    00001dac: 	movdqu	0x4(%rax), %xmm7
    00001db1: 	addq	$0x10, %rax
    00001db5: 	psubd	%xmm7, %xmm1
    00001db9: 	pslld	$0x1, %xmm1
    00001dbe: 	paddd	%xmm1, %xmm0
    00001dc2: 	cmpq	%rax, %rbx
    00001dc5: 	jne	.Ltmp3886 # Offset: 7621
    00001dc7: 	movdqa	%xmm0, %xmm1
    00001dcb: 	addl	0x7df8(%rsp), %edx
    00001dd2: 	movq	0x7df4(%rsp), %xmm2
    00001ddb: 	psrldq	$0x8, %xmm1
    00001de0: 	subl	0x7dfc(%rsp), %edx
    00001de7: 	paddd	%xmm1, %xmm0
    00001deb: 	movq	0x7df0(%rsp), %xmm1
    00001df4: 	psubd	%xmm2, %xmm1
    00001df8: 	pslld	$0x1, %xmm1
    00001dfd: 	movd	%xmm1, %eax
    00001e01: 	pshufd	$0xe5, %xmm1, %xmm7
    00001e06: 	movdqa	%xmm0, %xmm1
    00001e0a: 	movd	%xmm7, %esi
    00001e0e: 	psrldq	$0x4, %xmm1
    00001e13: 	addl	%esi, %eax
    00001e15: 	paddd	%xmm1, %xmm0
    00001e19: 	leal	(%rax,%rdx,2), %edx
    00001e1c: 	movd	%xmm0, %eax
    00001e20: 	addl	%eax, %edx
    00001e22: 	jne	.Ltmp3887 # Offset: 7714
.Ltmp3998:
    00001e28: 	addl	$0x1, %r13d
    00001e2c: 	cmpl	%ecx, %r13d
    00001e2f: 	jl	.Ltmp3888 # Offset: 7727
.Ltmp3885:
    00001e35: 	movq	%r12, %rsi
    00001e38: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001e3f: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 7743
    00001e44: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001e4b: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001e52: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001e59: 	je	.Ltmp3889 # Offset: 7769
.Ltmp4033:
    00001e5f: 	movq	-0x20(%rax), %r13
    00001e63: 	callq	clock@PLT # Offset: 7779
    00001e68: 	pxor	%xmm0, %xmm0
    00001e6c: 	movq	%rax, end_time(%rip)
    00001e73: 	movq	%r13, %rdi
    00001e76: 	subq	start_time(%rip), %rax
    00001e7d: 	cvtsi2sd	%rax, %xmm0
    00001e82: 	divsd	DATAat0x4d640(%rip), %xmm0
    00001e8a: 	callq	_Z13record_resultdPKc # Offset: 7818
    00001e8f: 	movq	0xe0(%rsp), %rdi
    00001e97: 	cmpq	0x8(%rsp), %rdi
    00001e9c: 	je	.Ltmp3890 # Offset: 7836
    00001e9e: 	movq	0xf0(%rsp), %rax
    00001ea6: 	leaq	0x1(%rax), %rsi
    00001eaa: 	callq	_ZdlPvm@PLT # Offset: 7850
.Ltmp3890:
    00001eaf: 	leaq	DATAat0x4d3a0(%rip), %rdx
    00001eb6: 	movq	%r14, %rsi
    00001eb9: 	movq	%r12, %rdi
    00001ebc: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7868
    00001ec1: 	movl	0x10(%rsp), %edx
    00001ec5: 	movq	%r12, %rcx
    00001ec8: 	movl	$0x1f40, %esi
    00001ecd: 	movq	%rbp, %rdi
    00001ed0: 	callq	_Z9test_CSE2Ij14custom_cse_mixIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7888
    00001ed5: 	movq	0xe0(%rsp), %rdi
    00001edd: 	cmpq	0x8(%rsp), %rdi
    00001ee2: 	je	.Ltmp3891 # Offset: 7906
    00001ee4: 	movq	0xf0(%rsp), %rax
    00001eec: 	leaq	0x1(%rax), %rsi
    00001ef0: 	callq	_ZdlPvm@PLT # Offset: 7920
.Ltmp3891:
    00001ef5: 	leaq	0x80(%rsp), %rdi
    00001efd: 	leaq	DATAat0x4d3ab(%rip), %rdx
    00001f04: 	movq	%r14, %rsi
    00001f07: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7943
    00001f0c: 	movl	iterations(%rip), %edx
    00001f12: 	xorl	%r8d, %r8d
    00001f15: 	xorl	%ecx, %ecx
    00001f17: 	movl	$0x1f40, %esi
    00001f1c: 	movq	0x80(%rsp), %rdi
    00001f24: 	callq	_Z9summarizePKciiii # Offset: 7972
    00001f29: 	leaq	DATAat0x4d3b2(%rip), %rdx
    00001f30: 	movq	%r14, %rsi
    00001f33: 	movq	%r12, %rdi
    00001f36: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7990
    00001f3b: 	callq	clock@PLT # Offset: 7995
    00001f40: 	movl	iterations(%rip), %ecx
    00001f46: 	xorl	%r13d, %r13d
    00001f49: 	leaq	0x7cf0(%rbp), %rbx
    00001f50: 	movq	%rax, start_time(%rip)
    00001f57: 	leaq	DATAat0x4d004(%rip), %r15
    00001f5e: 	testl	%ecx, %ecx
    00001f60: 	jle	.Ltmp3892 # Offset: 8032
    00001f66: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3895:
    00001f70: 	movl	0x100(%rsp), %edx
    00001f77: 	movq	%rbp, %rax
    00001f7a: 	subl	0x104(%rsp), %edx
    00001f81: 	pxor	%xmm0, %xmm0
    00001f85: 	nopl	(%rax) # Size: 3
.Ltmp3893:
    00001f88: 	movdqa	(%rax), %xmm1
    00001f8c: 	movdqu	0x4(%rax), %xmm3
    00001f91: 	addq	$0x10, %rax
    00001f95: 	psubd	%xmm3, %xmm1
    00001f99: 	pslld	$0x2, %xmm1
    00001f9e: 	paddd	%xmm1, %xmm0
    00001fa2: 	cmpq	%rax, %rbx
    00001fa5: 	jne	.Ltmp3893 # Offset: 8101
    00001fa7: 	movdqa	%xmm0, %xmm1
    00001fab: 	addl	0x7df8(%rsp), %edx
    00001fb2: 	movq	0x7df4(%rsp), %xmm2
    00001fbb: 	psrldq	$0x8, %xmm1
    00001fc0: 	subl	0x7dfc(%rsp), %edx
    00001fc7: 	paddd	%xmm1, %xmm0
    00001fcb: 	movq	0x7df0(%rsp), %xmm1
    00001fd4: 	psubd	%xmm2, %xmm1
    00001fd8: 	pslld	$0x2, %xmm1
    00001fdd: 	movd	%xmm1, %eax
    00001fe1: 	pshufd	$0xe5, %xmm1, %xmm3
    00001fe6: 	movdqa	%xmm0, %xmm1
    00001fea: 	movd	%xmm3, %esi
    00001fee: 	psrldq	$0x4, %xmm1
    00001ff3: 	addl	%esi, %eax
    00001ff5: 	paddd	%xmm1, %xmm0
    00001ff9: 	leal	(%rax,%rdx,4), %edx
    00001ffc: 	movd	%xmm0, %eax
    00002000: 	addl	%eax, %edx
    00002002: 	jne	.Ltmp3894 # Offset: 8194
.Ltmp3997:
    00002008: 	addl	$0x1, %r13d
    0000200c: 	cmpl	%ecx, %r13d
    0000200f: 	jl	.Ltmp3895 # Offset: 8207
.Ltmp3892:
    00002015: 	movq	%r12, %rsi
    00002018: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000201f: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 8223
    00002024: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000202b: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00002032: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002039: 	je	.Ltmp3896 # Offset: 8249
.Ltmp4032:
    0000203f: 	movq	-0x20(%rax), %r13
    00002043: 	callq	clock@PLT # Offset: 8259
    00002048: 	pxor	%xmm0, %xmm0
    0000204c: 	movq	%rax, end_time(%rip)
    00002053: 	movq	%r13, %rdi
    00002056: 	subq	start_time(%rip), %rax
    0000205d: 	cvtsi2sd	%rax, %xmm0
    00002062: 	divsd	DATAat0x4d640(%rip), %xmm0
    0000206a: 	callq	_Z13record_resultdPKc # Offset: 8298
    0000206f: 	movq	0xe0(%rsp), %rdi
    00002077: 	cmpq	0x8(%rsp), %rdi
    0000207c: 	je	.Ltmp3897 # Offset: 8316
    0000207e: 	movq	0xf0(%rsp), %rax
    00002086: 	leaq	0x1(%rax), %rsi
    0000208a: 	callq	_ZdlPvm@PLT # Offset: 8330
.Ltmp3897:
    0000208f: 	leaq	DATAat0x4d3c1(%rip), %rdx
    00002096: 	movq	%r14, %rsi
    00002099: 	movq	%r12, %rdi
    0000209c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8348
    000020a1: 	callq	clock@PLT # Offset: 8353
    000020a6: 	movl	iterations(%rip), %ecx
    000020ac: 	xorl	%r13d, %r13d
    000020af: 	leaq	0x7cf0(%rbp), %rbx
    000020b6: 	movq	%rax, start_time(%rip)
    000020bd: 	leaq	DATAat0x4d004(%rip), %r15
    000020c4: 	testl	%ecx, %ecx
    000020c6: 	jle	.Ltmp3898 # Offset: 8390
    000020cc: 	nopl	(%rax) # Size: 4
.Ltmp3901:
    000020d0: 	movl	0x100(%rsp), %edx
    000020d7: 	movq	%rbp, %rax
    000020da: 	subl	0x104(%rsp), %edx
    000020e1: 	pxor	%xmm0, %xmm0
    000020e5: 	nopl	(%rax) # Size: 3
.Ltmp3899:
    000020e8: 	movdqa	(%rax), %xmm1
    000020ec: 	movdqu	0x4(%rax), %xmm4
    000020f1: 	addq	$0x10, %rax
    000020f5: 	psubd	%xmm4, %xmm1
    000020f9: 	pslld	$0x2, %xmm1
    000020fe: 	paddd	%xmm1, %xmm0
    00002102: 	cmpq	%rax, %rbx
    00002105: 	jne	.Ltmp3899 # Offset: 8453
    00002107: 	movdqa	%xmm0, %xmm1
    0000210b: 	addl	0x7df8(%rsp), %edx
    00002112: 	movq	0x7df4(%rsp), %xmm2
    0000211b: 	psrldq	$0x8, %xmm1
    00002120: 	subl	0x7dfc(%rsp), %edx
    00002127: 	paddd	%xmm1, %xmm0
    0000212b: 	movq	0x7df0(%rsp), %xmm1
    00002134: 	psubd	%xmm2, %xmm1
    00002138: 	pslld	$0x2, %xmm1
    0000213d: 	movd	%xmm1, %eax
    00002141: 	pshufd	$0xe5, %xmm1, %xmm4
    00002146: 	movdqa	%xmm0, %xmm1
    0000214a: 	movd	%xmm4, %esi
    0000214e: 	psrldq	$0x4, %xmm1
    00002153: 	addl	%esi, %eax
    00002155: 	paddd	%xmm1, %xmm0
    00002159: 	leal	(%rax,%rdx,4), %edx
    0000215c: 	movd	%xmm0, %eax
    00002160: 	addl	%eax, %edx
    00002162: 	jne	.Ltmp3900 # Offset: 8546
.Ltmp3996:
    00002168: 	addl	$0x1, %r13d
    0000216c: 	cmpl	%ecx, %r13d
    0000216f: 	jl	.Ltmp3901 # Offset: 8559
.Ltmp3898:
    00002175: 	movq	%r12, %rsi
    00002178: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000217f: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 8575
    00002184: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000218b: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00002192: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002199: 	je	.Ltmp3902 # Offset: 8601
.Ltmp4031:
    0000219f: 	movq	-0x20(%rax), %r13
    000021a3: 	callq	clock@PLT # Offset: 8611
    000021a8: 	pxor	%xmm0, %xmm0
    000021ac: 	movq	%rax, end_time(%rip)
    000021b3: 	movq	%r13, %rdi
    000021b6: 	subq	start_time(%rip), %rax
    000021bd: 	cvtsi2sd	%rax, %xmm0
    000021c2: 	divsd	DATAat0x4d640(%rip), %xmm0
    000021ca: 	callq	_Z13record_resultdPKc # Offset: 8650
    000021cf: 	movq	0xe0(%rsp), %rdi
    000021d7: 	cmpq	0x8(%rsp), %rdi
    000021dc: 	je	.Ltmp3903 # Offset: 8668
    000021de: 	movq	0xf0(%rsp), %rax
    000021e6: 	leaq	0x1(%rax), %rsi
    000021ea: 	callq	_ZdlPvm@PLT # Offset: 8682
.Ltmp3903:
    000021ef: 	leaq	DATAat0x4d3d5(%rip), %rdx
    000021f6: 	movq	%r14, %rsi
    000021f9: 	movq	%r12, %rdi
    000021fc: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8700
    00002201: 	movl	0x10(%rsp), %edx
    00002205: 	movq	%r12, %rcx
    00002208: 	movl	$0x1f40, %esi
    0000220d: 	movq	%rbp, %rdi
    00002210: 	callq	_Z20test_CSE4_add_inlineIj14custom_cse_addIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 8720
    00002215: 	movq	0xe0(%rsp), %rdi
    0000221d: 	cmpq	0x8(%rsp), %rdi
    00002222: 	je	.Ltmp3904 # Offset: 8738
    00002224: 	movq	0xf0(%rsp), %rax
    0000222c: 	leaq	0x1(%rax), %rsi
    00002230: 	callq	_ZdlPvm@PLT # Offset: 8752
.Ltmp3904:
    00002235: 	leaq	DATAat0x4d3e7(%rip), %rdx
    0000223c: 	movq	%r14, %rsi
    0000223f: 	movq	%r12, %rdi
    00002242: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8770
    00002247: 	movl	0x10(%rsp), %edx
    0000224b: 	movq	%r12, %rcx
    0000224e: 	movl	$0x1f40, %esi
    00002253: 	movq	%rbp, %rdi
    00002256: 	callq	_Z28test_CSE4_add_inline_flippedIj14custom_cse_addIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 8790
    0000225b: 	movq	0xe0(%rsp), %rdi
    00002263: 	cmpq	0x8(%rsp), %rdi
    00002268: 	je	.Ltmp3905 # Offset: 8808
    0000226a: 	movq	0xf0(%rsp), %rax
    00002272: 	leaq	0x1(%rax), %rsi
    00002276: 	callq	_ZdlPvm@PLT # Offset: 8822
.Ltmp3905:
    0000227b: 	leaq	DATAat0x4d401(%rip), %rdx
    00002282: 	movq	%r14, %rsi
    00002285: 	movq	%r12, %rdi
    00002288: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8840
    0000228d: 	movl	0x10(%rsp), %edx
    00002291: 	movq	%r12, %rcx
    00002294: 	movl	$0x1f40, %esi
    00002299: 	movq	%rbp, %rdi
    0000229c: 	callq	_Z9test_CSE4Ij14custom_cse_addIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 8860
    000022a1: 	movq	0xe0(%rsp), %rdi
    000022a9: 	cmpq	0x8(%rsp), %rdi
    000022ae: 	je	.Ltmp3906 # Offset: 8878
    000022b0: 	movq	0xf0(%rsp), %rax
    000022b8: 	leaq	0x1(%rax), %rsi
    000022bc: 	callq	_ZdlPvm@PLT # Offset: 8892
.Ltmp3906:
    000022c1: 	leaq	DATAat0x4d40c(%rip), %rdx
    000022c8: 	movq	%r14, %rsi
    000022cb: 	movq	%r12, %rdi
    000022ce: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8910
    000022d3: 	callq	clock@PLT # Offset: 8915
    000022d8: 	movl	iterations(%rip), %ecx
    000022de: 	xorl	%r13d, %r13d
    000022e1: 	leaq	0x7cf0(%rbp), %rbx
    000022e8: 	movq	%rax, start_time(%rip)
    000022ef: 	leaq	DATAat0x4d004(%rip), %r15
    000022f6: 	testl	%ecx, %ecx
    000022f8: 	jle	.Ltmp3907 # Offset: 8952
    000022fe: 	nop # Size: 2
.Ltmp3910:
    00002300: 	movl	0x100(%rsp), %edx
    00002307: 	movq	%rbp, %rax
    0000230a: 	subl	0x104(%rsp), %edx
    00002311: 	pxor	%xmm0, %xmm0
    00002315: 	nopl	(%rax) # Size: 3
.Ltmp3908:
    00002318: 	movdqa	(%rax), %xmm1
    0000231c: 	movdqu	0x4(%rax), %xmm5
    00002321: 	addq	$0x10, %rax
    00002325: 	psubd	%xmm5, %xmm1
    00002329: 	pslld	$0x2, %xmm1
    0000232e: 	paddd	%xmm1, %xmm0
    00002332: 	cmpq	%rax, %rbx
    00002335: 	jne	.Ltmp3908 # Offset: 9013
    00002337: 	movdqa	%xmm0, %xmm1
    0000233b: 	addl	0x7df8(%rsp), %edx
    00002342: 	movq	0x7df4(%rsp), %xmm2
    0000234b: 	psrldq	$0x8, %xmm1
    00002350: 	subl	0x7dfc(%rsp), %edx
    00002357: 	paddd	%xmm1, %xmm0
    0000235b: 	movq	0x7df0(%rsp), %xmm1
    00002364: 	psubd	%xmm2, %xmm1
    00002368: 	pslld	$0x2, %xmm1
    0000236d: 	movd	%xmm1, %eax
    00002371: 	pshufd	$0xe5, %xmm1, %xmm5
    00002376: 	movdqa	%xmm0, %xmm1
    0000237a: 	movd	%xmm5, %esi
    0000237e: 	psrldq	$0x4, %xmm1
    00002383: 	addl	%esi, %eax
    00002385: 	paddd	%xmm1, %xmm0
    00002389: 	leal	(%rax,%rdx,4), %edx
    0000238c: 	movd	%xmm0, %eax
    00002390: 	addl	%eax, %edx
    00002392: 	jne	.Ltmp3909 # Offset: 9106
.Ltmp3995:
    00002398: 	addl	$0x1, %r13d
    0000239c: 	cmpl	%ecx, %r13d
    0000239f: 	jl	.Ltmp3910 # Offset: 9119
.Ltmp3907:
    000023a5: 	movq	%r12, %rsi
    000023a8: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000023af: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 9135
    000023b4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000023bb: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000023c2: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000023c9: 	je	.Ltmp3911 # Offset: 9161
.Ltmp4030:
    000023cf: 	movq	-0x20(%rax), %r13
    000023d3: 	callq	clock@PLT # Offset: 9171
    000023d8: 	pxor	%xmm0, %xmm0
    000023dc: 	movq	%rax, end_time(%rip)
    000023e3: 	movq	%r13, %rdi
    000023e6: 	subq	start_time(%rip), %rax
    000023ed: 	cvtsi2sd	%rax, %xmm0
    000023f2: 	divsd	DATAat0x4d640(%rip), %xmm0
    000023fa: 	callq	_Z13record_resultdPKc # Offset: 9210
    000023ff: 	movq	0xe0(%rsp), %rdi
    00002407: 	cmpq	0x8(%rsp), %rdi
    0000240c: 	je	.Ltmp3912 # Offset: 9228
    0000240e: 	movq	0xf0(%rsp), %rax
    00002416: 	leaq	0x1(%rax), %rsi
    0000241a: 	callq	_ZdlPvm@PLT # Offset: 9242
.Ltmp3912:
    0000241f: 	leaq	DATAat0x4d425(%rip), %rdx
    00002426: 	movq	%r14, %rsi
    00002429: 	movq	%r12, %rdi
    0000242c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9260
    00002431: 	movl	0x10(%rsp), %edx
    00002435: 	movq	%r12, %rcx
    00002438: 	movl	$0x1f40, %esi
    0000243d: 	movq	%rbp, %rdi
    00002440: 	callq	_Z9test_CSE4Ij14custom_cse_subIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9280
    00002445: 	movq	0xe0(%rsp), %rdi
    0000244d: 	cmpq	0x8(%rsp), %rdi
    00002452: 	je	.Ltmp3913 # Offset: 9298
    00002454: 	movq	0xf0(%rsp), %rax
    0000245c: 	leaq	0x1(%rax), %rsi
    00002460: 	callq	_ZdlPvm@PLT # Offset: 9312
.Ltmp3913:
    00002465: 	leaq	DATAat0x4d435(%rip), %rdx
    0000246c: 	movq	%r14, %rsi
    0000246f: 	movq	%r12, %rdi
    00002472: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9330
    00002477: 	callq	clock@PLT # Offset: 9335
    0000247c: 	movl	iterations(%rip), %ecx
    00002482: 	xorl	%r13d, %r13d
    00002485: 	leaq	0x7cf0(%rbp), %rbx
    0000248c: 	movq	%rax, start_time(%rip)
    00002493: 	leaq	DATAat0x4d004(%rip), %r15
    0000249a: 	testl	%ecx, %ecx
    0000249c: 	jle	.Ltmp3914 # Offset: 9372
    000024a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3917:
    000024a8: 	movl	0x100(%rsp), %edx
    000024af: 	movq	%rbp, %rax
    000024b2: 	subl	0x104(%rsp), %edx
    000024b9: 	pxor	%xmm0, %xmm0
    000024bd: 	nopl	(%rax) # Size: 3
.Ltmp3915:
    000024c0: 	movdqa	(%rax), %xmm1
    000024c4: 	movdqu	0x4(%rax), %xmm6
    000024c9: 	addq	$0x10, %rax
    000024cd: 	psubd	%xmm6, %xmm1
    000024d1: 	pslld	$0x2, %xmm1
    000024d6: 	paddd	%xmm1, %xmm0
    000024da: 	cmpq	%rbx, %rax
    000024dd: 	jne	.Ltmp3915 # Offset: 9437
    000024df: 	movdqa	%xmm0, %xmm1
    000024e3: 	addl	0x7df8(%rsp), %edx
    000024ea: 	movq	0x7df4(%rsp), %xmm2
    000024f3: 	psrldq	$0x8, %xmm1
    000024f8: 	subl	0x7dfc(%rsp), %edx
    000024ff: 	paddd	%xmm1, %xmm0
    00002503: 	movq	0x7df0(%rsp), %xmm1
    0000250c: 	psubd	%xmm2, %xmm1
    00002510: 	pslld	$0x2, %xmm1
    00002515: 	movd	%xmm1, %eax
    00002519: 	pshufd	$0xe5, %xmm1, %xmm6
    0000251e: 	movdqa	%xmm0, %xmm1
    00002522: 	movd	%xmm6, %esi
    00002526: 	psrldq	$0x4, %xmm1
    0000252b: 	addl	%esi, %eax
    0000252d: 	paddd	%xmm1, %xmm0
    00002531: 	leal	(%rax,%rdx,4), %edx
    00002534: 	movd	%xmm0, %eax
    00002538: 	addl	%eax, %edx
    0000253a: 	jne	.Ltmp3916 # Offset: 9530
.Ltmp3994:
    00002540: 	addl	$0x1, %r13d
    00002544: 	cmpl	%ecx, %r13d
    00002547: 	jl	.Ltmp3917 # Offset: 9543
.Ltmp3914:
    0000254d: 	movq	%r12, %rsi
    00002550: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002557: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 9559
    0000255c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002563: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000256a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002571: 	je	.Ltmp3918 # Offset: 9585
.Ltmp4029:
    00002577: 	movq	-0x20(%rax), %r13
    0000257b: 	callq	clock@PLT # Offset: 9595
    00002580: 	pxor	%xmm0, %xmm0
    00002584: 	movq	%rax, end_time(%rip)
    0000258b: 	movq	%r13, %rdi
    0000258e: 	subq	start_time(%rip), %rax
    00002595: 	cvtsi2sd	%rax, %xmm0
    0000259a: 	divsd	DATAat0x4d640(%rip), %xmm0
    000025a2: 	callq	_Z13record_resultdPKc # Offset: 9634
    000025a7: 	movq	0xe0(%rsp), %rdi
    000025af: 	cmpq	0x8(%rsp), %rdi
    000025b4: 	je	.Ltmp3919 # Offset: 9652
    000025b6: 	movq	0xf0(%rsp), %rax
    000025be: 	leaq	0x1(%rax), %rsi
    000025c2: 	callq	_ZdlPvm@PLT # Offset: 9666
.Ltmp3919:
    000025c7: 	leaq	DATAat0x4d44e(%rip), %rdx
    000025ce: 	movq	%r14, %rsi
    000025d1: 	movq	%r12, %rdi
    000025d4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9684
    000025d9: 	movl	0x10(%rsp), %edx
    000025dd: 	movq	%r12, %rcx
    000025e0: 	movl	$0x1f40, %esi
    000025e5: 	movq	%rbp, %rdi
    000025e8: 	callq	_Z9test_CSE4Ij14custom_cse_mulIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9704
    000025ed: 	movq	0xe0(%rsp), %rdi
    000025f5: 	cmpq	0x8(%rsp), %rdi
    000025fa: 	je	.Ltmp3920 # Offset: 9722
    000025fc: 	movq	0xf0(%rsp), %rax
    00002604: 	leaq	0x1(%rax), %rsi
    00002608: 	callq	_ZdlPvm@PLT # Offset: 9736
.Ltmp3920:
    0000260d: 	leaq	DATAat0x4d45e(%rip), %rdx
    00002614: 	movq	%r14, %rsi
    00002617: 	movq	%r12, %rdi
    0000261a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9754
    0000261f: 	callq	clock@PLT # Offset: 9759
    00002624: 	movl	iterations(%rip), %ecx
    0000262a: 	xorl	%r13d, %r13d
    0000262d: 	leaq	0x7cf0(%rbp), %rbx
    00002634: 	movq	%rax, start_time(%rip)
    0000263b: 	leaq	DATAat0x4d004(%rip), %r15
    00002642: 	testl	%ecx, %ecx
    00002644: 	jle	.Ltmp3921 # Offset: 9796
    0000264a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3924:
    00002650: 	movl	0x100(%rsp), %edx
    00002657: 	movq	%rbp, %rax
    0000265a: 	subl	0x104(%rsp), %edx
    00002661: 	pxor	%xmm0, %xmm0
    00002665: 	nopl	(%rax) # Size: 3
.Ltmp3922:
    00002668: 	movdqa	(%rax), %xmm1
    0000266c: 	movdqu	0x4(%rax), %xmm7
    00002671: 	addq	$0x10, %rax
    00002675: 	psubd	%xmm7, %xmm1
    00002679: 	pslld	$0x2, %xmm1
    0000267e: 	paddd	%xmm1, %xmm0
    00002682: 	cmpq	%rax, %rbx
    00002685: 	jne	.Ltmp3922 # Offset: 9861
    00002687: 	movdqa	%xmm0, %xmm1
    0000268b: 	addl	0x7df8(%rsp), %edx
    00002692: 	movq	0x7df4(%rsp), %xmm2
    0000269b: 	psrldq	$0x8, %xmm1
    000026a0: 	subl	0x7dfc(%rsp), %edx
    000026a7: 	paddd	%xmm1, %xmm0
    000026ab: 	movq	0x7df0(%rsp), %xmm1
    000026b4: 	psubd	%xmm2, %xmm1
    000026b8: 	pslld	$0x2, %xmm1
    000026bd: 	movd	%xmm1, %eax
    000026c1: 	pshufd	$0xe5, %xmm1, %xmm7
    000026c6: 	movdqa	%xmm0, %xmm1
    000026ca: 	movd	%xmm7, %esi
    000026ce: 	psrldq	$0x4, %xmm1
    000026d3: 	addl	%esi, %eax
    000026d5: 	paddd	%xmm1, %xmm0
    000026d9: 	leal	(%rax,%rdx,4), %edx
    000026dc: 	movd	%xmm0, %eax
    000026e0: 	addl	%eax, %edx
    000026e2: 	jne	.Ltmp3923 # Offset: 9954
.Ltmp3993:
    000026e8: 	addl	$0x1, %r13d
    000026ec: 	cmpl	%ecx, %r13d
    000026ef: 	jl	.Ltmp3924 # Offset: 9967
.Ltmp3921:
    000026f5: 	movq	%r12, %rsi
    000026f8: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000026ff: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 9983
    00002704: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000270b: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00002712: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002719: 	je	.Ltmp3925 # Offset: 10009
.Ltmp4028:
    0000271f: 	movq	-0x20(%rax), %r13
    00002723: 	callq	clock@PLT # Offset: 10019
    00002728: 	pxor	%xmm0, %xmm0
    0000272c: 	movq	%rax, end_time(%rip)
    00002733: 	movq	%r13, %rdi
    00002736: 	subq	start_time(%rip), %rax
    0000273d: 	cvtsi2sd	%rax, %xmm0
    00002742: 	divsd	DATAat0x4d640(%rip), %xmm0
    0000274a: 	callq	_Z13record_resultdPKc # Offset: 10058
    0000274f: 	movq	0xe0(%rsp), %rdi
    00002757: 	cmpq	0x8(%rsp), %rdi
    0000275c: 	je	.Ltmp3926 # Offset: 10076
    0000275e: 	movq	0xf0(%rsp), %rax
    00002766: 	leaq	0x1(%rax), %rsi
    0000276a: 	callq	_ZdlPvm@PLT # Offset: 10090
.Ltmp3926:
    0000276f: 	leaq	DATAat0x4d475(%rip), %rdx
    00002776: 	movq	%r14, %rsi
    00002779: 	movq	%r12, %rdi
    0000277c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10108
    00002781: 	movl	0x10(%rsp), %edx
    00002785: 	movq	%r12, %rcx
    00002788: 	movl	$0x1f40, %esi
    0000278d: 	movq	%rbp, %rdi
    00002790: 	callq	_Z9test_CSE4Ij14custom_cse_divIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 10128
    00002795: 	movq	0xe0(%rsp), %rdi
    0000279d: 	cmpq	0x8(%rsp), %rdi
    000027a2: 	je	.Ltmp3927 # Offset: 10146
    000027a4: 	movq	0xf0(%rsp), %rax
    000027ac: 	leaq	0x1(%rax), %rsi
    000027b0: 	callq	_ZdlPvm@PLT # Offset: 10160
.Ltmp3927:
    000027b5: 	leaq	DATAat0x4d483(%rip), %rdx
    000027bc: 	movq	%r14, %rsi
    000027bf: 	movq	%r12, %rdi
    000027c2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10178
    000027c7: 	callq	clock@PLT # Offset: 10183
    000027cc: 	movl	iterations(%rip), %ecx
    000027d2: 	xorl	%r13d, %r13d
    000027d5: 	leaq	0x7cf0(%rbp), %rbx
    000027dc: 	movq	%rax, start_time(%rip)
    000027e3: 	leaq	DATAat0x4d004(%rip), %r15
    000027ea: 	testl	%ecx, %ecx
    000027ec: 	jle	.Ltmp3928 # Offset: 10220
    000027f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3931:
    000027f8: 	movl	0x100(%rsp), %edx
    000027ff: 	movq	%rbp, %rax
    00002802: 	subl	0x104(%rsp), %edx
    00002809: 	pxor	%xmm0, %xmm0
    0000280d: 	nopl	(%rax) # Size: 3
.Ltmp3929:
    00002810: 	movdqa	(%rax), %xmm1
    00002814: 	movdqu	0x4(%rax), %xmm3
    00002819: 	addq	$0x10, %rax
    0000281d: 	psubd	%xmm3, %xmm1
    00002821: 	pslld	$0x2, %xmm1
    00002826: 	paddd	%xmm1, %xmm0
    0000282a: 	cmpq	%rax, %rbx
    0000282d: 	jne	.Ltmp3929 # Offset: 10285
    0000282f: 	movdqa	%xmm0, %xmm1
    00002833: 	addl	0x7df8(%rsp), %edx
    0000283a: 	movq	0x7df4(%rsp), %xmm2
    00002843: 	psrldq	$0x8, %xmm1
    00002848: 	subl	0x7dfc(%rsp), %edx
    0000284f: 	paddd	%xmm1, %xmm0
    00002853: 	movq	0x7df0(%rsp), %xmm1
    0000285c: 	psubd	%xmm2, %xmm1
    00002860: 	pslld	$0x2, %xmm1
    00002865: 	movd	%xmm1, %eax
    00002869: 	pshufd	$0xe5, %xmm1, %xmm3
    0000286e: 	movdqa	%xmm0, %xmm1
    00002872: 	movd	%xmm3, %esi
    00002876: 	psrldq	$0x4, %xmm1
    0000287b: 	addl	%esi, %eax
    0000287d: 	paddd	%xmm1, %xmm0
    00002881: 	leal	(%rax,%rdx,4), %edx
    00002884: 	movd	%xmm0, %eax
    00002888: 	addl	%eax, %edx
    0000288a: 	jne	.Ltmp3930 # Offset: 10378
.Ltmp3992:
    00002890: 	addl	$0x1, %r13d
    00002894: 	cmpl	%ecx, %r13d
    00002897: 	jl	.Ltmp3931 # Offset: 10391
.Ltmp3928:
    0000289d: 	movq	%r12, %rsi
    000028a0: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000028a7: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 10407
    000028ac: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000028b3: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000028ba: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000028c1: 	je	.Ltmp3932 # Offset: 10433
.Ltmp4027:
    000028c7: 	movq	-0x20(%rax), %r13
    000028cb: 	callq	clock@PLT # Offset: 10443
    000028d0: 	pxor	%xmm0, %xmm0
    000028d4: 	movq	%rax, end_time(%rip)
    000028db: 	movq	%r13, %rdi
    000028de: 	subq	start_time(%rip), %rax
    000028e5: 	cvtsi2sd	%rax, %xmm0
    000028ea: 	divsd	DATAat0x4d640(%rip), %xmm0
    000028f2: 	callq	_Z13record_resultdPKc # Offset: 10482
    000028f7: 	movq	0xe0(%rsp), %rdi
    000028ff: 	cmpq	0x8(%rsp), %rdi
    00002904: 	je	.Ltmp3933 # Offset: 10500
    00002906: 	movq	0xf0(%rsp), %rax
    0000290e: 	leaq	0x1(%rax), %rsi
    00002912: 	callq	_ZdlPvm@PLT # Offset: 10514
.Ltmp3933:
    00002917: 	leaq	DATAat0x4d497(%rip), %rdx
    0000291e: 	movq	%r14, %rsi
    00002921: 	movq	%r12, %rdi
    00002924: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10532
    00002929: 	movl	0x10(%rsp), %edx
    0000292d: 	movq	%r12, %rcx
    00002930: 	movl	$0x1f40, %esi
    00002935: 	movq	%rbp, %rdi
    00002938: 	callq	_Z9test_CSE4Ij14custom_cse_mixIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 10552
    0000293d: 	movq	0xe0(%rsp), %rdi
    00002945: 	cmpq	0x8(%rsp), %rdi
    0000294a: 	je	.Ltmp3934 # Offset: 10570
    0000294c: 	movq	0xf0(%rsp), %rax
    00002954: 	leaq	0x1(%rax), %rsi
    00002958: 	callq	_ZdlPvm@PLT # Offset: 10584
.Ltmp3934:
    0000295d: 	leaq	0xa0(%rsp), %rdi
    00002965: 	leaq	DATAat0x4d4a2(%rip), %rdx
    0000296c: 	movq	%r14, %rsi
    0000296f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10607
    00002974: 	movl	iterations(%rip), %edx
    0000297a: 	xorl	%r8d, %r8d
    0000297d: 	xorl	%ecx, %ecx
    0000297f: 	movl	$0x1f40, %esi
    00002984: 	movq	0xa0(%rsp), %rdi
    0000298c: 	callq	_Z9summarizePKciiii # Offset: 10636
    00002991: 	leaq	DATAat0x4d4a9(%rip), %rdx
    00002998: 	movq	%r14, %rsi
    0000299b: 	movq	%r12, %rdi
    0000299e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10654
    000029a3: 	callq	clock@PLT # Offset: 10659
    000029a8: 	movl	iterations(%rip), %ecx
    000029ae: 	xorl	%r13d, %r13d
    000029b1: 	leaq	0x7cf0(%rbp), %rbx
    000029b8: 	movq	%rax, start_time(%rip)
    000029bf: 	leaq	DATAat0x4d004(%rip), %r15
    000029c6: 	testl	%ecx, %ecx
    000029c8: 	jle	.Ltmp3935 # Offset: 10696
    000029ce: 	nop # Size: 2
.Ltmp3938:
    000029d0: 	movl	0x100(%rsp), %edx
    000029d7: 	movq	%rbp, %rax
    000029da: 	subl	0x104(%rsp), %edx
    000029e1: 	pxor	%xmm0, %xmm0
    000029e5: 	nopl	(%rax) # Size: 3
.Ltmp3936:
    000029e8: 	movdqa	(%rax), %xmm1
    000029ec: 	movdqu	0x4(%rax), %xmm4
    000029f1: 	addq	$0x10, %rax
    000029f5: 	psubd	%xmm4, %xmm1
    000029f9: 	pslld	$0x3, %xmm1
    000029fe: 	paddd	%xmm1, %xmm0
    00002a02: 	cmpq	%rax, %rbx
    00002a05: 	jne	.Ltmp3936 # Offset: 10757
    00002a07: 	movdqa	%xmm0, %xmm1
    00002a0b: 	addl	0x7df8(%rsp), %edx
    00002a12: 	movq	0x7df4(%rsp), %xmm2
    00002a1b: 	psrldq	$0x8, %xmm1
    00002a20: 	subl	0x7dfc(%rsp), %edx
    00002a27: 	paddd	%xmm1, %xmm0
    00002a2b: 	movq	0x7df0(%rsp), %xmm1
    00002a34: 	psubd	%xmm2, %xmm1
    00002a38: 	pslld	$0x3, %xmm1
    00002a3d: 	movd	%xmm1, %eax
    00002a41: 	pshufd	$0xe5, %xmm1, %xmm4
    00002a46: 	movdqa	%xmm0, %xmm1
    00002a4a: 	movd	%xmm4, %esi
    00002a4e: 	psrldq	$0x4, %xmm1
    00002a53: 	addl	%esi, %eax
    00002a55: 	paddd	%xmm1, %xmm0
    00002a59: 	leal	(%rax,%rdx,8), %edx
    00002a5c: 	movd	%xmm0, %eax
    00002a60: 	addl	%eax, %edx
    00002a62: 	jne	.Ltmp3937 # Offset: 10850
.Ltmp3991:
    00002a68: 	addl	$0x1, %r13d
    00002a6c: 	cmpl	%ecx, %r13d
    00002a6f: 	jl	.Ltmp3938 # Offset: 10863
.Ltmp3935:
    00002a75: 	movq	%r12, %rsi
    00002a78: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002a7f: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 10879
    00002a84: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002a8b: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00002a92: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002a99: 	je	.Ltmp3939 # Offset: 10905
.Ltmp4026:
    00002a9f: 	movq	-0x20(%rax), %r13
    00002aa3: 	callq	clock@PLT # Offset: 10915
    00002aa8: 	pxor	%xmm0, %xmm0
    00002aac: 	movq	%rax, end_time(%rip)
    00002ab3: 	movq	%r13, %rdi
    00002ab6: 	subq	start_time(%rip), %rax
    00002abd: 	cvtsi2sd	%rax, %xmm0
    00002ac2: 	divsd	DATAat0x4d640(%rip), %xmm0
    00002aca: 	callq	_Z13record_resultdPKc # Offset: 10954
    00002acf: 	movq	0xe0(%rsp), %rdi
    00002ad7: 	cmpq	0x8(%rsp), %rdi
    00002adc: 	je	.Ltmp3940 # Offset: 10972
    00002ade: 	movq	0xf0(%rsp), %rax
    00002ae6: 	leaq	0x1(%rax), %rsi
    00002aea: 	callq	_ZdlPvm@PLT # Offset: 10986
.Ltmp3940:
    00002aef: 	leaq	DATAat0x4d4b8(%rip), %rdx
    00002af6: 	movq	%r14, %rsi
    00002af9: 	movq	%r12, %rdi
    00002afc: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11004
    00002b01: 	callq	clock@PLT # Offset: 11009
    00002b06: 	movl	iterations(%rip), %ecx
    00002b0c: 	xorl	%r13d, %r13d
    00002b0f: 	leaq	0x7cf0(%rbp), %rbx
    00002b16: 	movq	%rax, start_time(%rip)
    00002b1d: 	leaq	DATAat0x4d004(%rip), %r15
    00002b24: 	testl	%ecx, %ecx
    00002b26: 	jle	.Ltmp3941 # Offset: 11046
    00002b2c: 	nopl	(%rax) # Size: 4
.Ltmp3944:
    00002b30: 	movl	0x100(%rsp), %edx
    00002b37: 	movq	%rbp, %rax
    00002b3a: 	subl	0x104(%rsp), %edx
    00002b41: 	pxor	%xmm0, %xmm0
    00002b45: 	nopl	(%rax) # Size: 3
.Ltmp3942:
    00002b48: 	movdqa	(%rax), %xmm1
    00002b4c: 	movdqu	0x4(%rax), %xmm5
    00002b51: 	addq	$0x10, %rax
    00002b55: 	psubd	%xmm5, %xmm1
    00002b59: 	pslld	$0x3, %xmm1
    00002b5e: 	paddd	%xmm1, %xmm0
    00002b62: 	cmpq	%rax, %rbx
    00002b65: 	jne	.Ltmp3942 # Offset: 11109
    00002b67: 	movdqa	%xmm0, %xmm1
    00002b6b: 	addl	0x7df8(%rsp), %edx
    00002b72: 	movq	0x7df4(%rsp), %xmm2
    00002b7b: 	psrldq	$0x8, %xmm1
    00002b80: 	subl	0x7dfc(%rsp), %edx
    00002b87: 	paddd	%xmm1, %xmm0
    00002b8b: 	movq	0x7df0(%rsp), %xmm1
    00002b94: 	psubd	%xmm2, %xmm1
    00002b98: 	pslld	$0x3, %xmm1
    00002b9d: 	movd	%xmm1, %eax
    00002ba1: 	pshufd	$0xe5, %xmm1, %xmm5
    00002ba6: 	movdqa	%xmm0, %xmm1
    00002baa: 	movd	%xmm5, %esi
    00002bae: 	psrldq	$0x4, %xmm1
    00002bb3: 	addl	%esi, %eax
    00002bb5: 	paddd	%xmm1, %xmm0
    00002bb9: 	leal	(%rax,%rdx,8), %edx
    00002bbc: 	movd	%xmm0, %eax
    00002bc0: 	addl	%eax, %edx
    00002bc2: 	jne	.Ltmp3943 # Offset: 11202
.Ltmp3990:
    00002bc8: 	addl	$0x1, %r13d
    00002bcc: 	cmpl	%ecx, %r13d
    00002bcf: 	jl	.Ltmp3944 # Offset: 11215
.Ltmp3941:
    00002bd5: 	movq	%r12, %rsi
    00002bd8: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002bdf: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 11231
    00002be4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002beb: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00002bf2: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002bf9: 	je	.Ltmp3945 # Offset: 11257
.Ltmp4025:
    00002bff: 	movq	-0x20(%rax), %r13
    00002c03: 	callq	clock@PLT # Offset: 11267
    00002c08: 	pxor	%xmm0, %xmm0
    00002c0c: 	movq	%rax, end_time(%rip)
    00002c13: 	movq	%r13, %rdi
    00002c16: 	subq	start_time(%rip), %rax
    00002c1d: 	cvtsi2sd	%rax, %xmm0
    00002c22: 	divsd	DATAat0x4d640(%rip), %xmm0
    00002c2a: 	callq	_Z13record_resultdPKc # Offset: 11306
    00002c2f: 	movq	0xe0(%rsp), %rdi
    00002c37: 	cmpq	0x8(%rsp), %rdi
    00002c3c: 	je	.Ltmp3946 # Offset: 11324
    00002c3e: 	movq	0xf0(%rsp), %rax
    00002c46: 	leaq	0x1(%rax), %rsi
    00002c4a: 	callq	_ZdlPvm@PLT # Offset: 11338
.Ltmp3946:
    00002c4f: 	leaq	DATAat0x4d4cc(%rip), %rdx
    00002c56: 	movq	%r14, %rsi
    00002c59: 	movq	%r12, %rdi
    00002c5c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11356
    00002c61: 	movl	0x10(%rsp), %edx
    00002c65: 	movq	%r12, %rcx
    00002c68: 	movl	$0x1f40, %esi
    00002c6d: 	movq	%rbp, %rdi
    00002c70: 	callq	_Z20test_CSE8_add_inlineIj14custom_cse_addIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 11376
    00002c75: 	movq	0xe0(%rsp), %rdi
    00002c7d: 	cmpq	0x8(%rsp), %rdi
    00002c82: 	je	.Ltmp3947 # Offset: 11394
    00002c84: 	movq	0xf0(%rsp), %rax
    00002c8c: 	leaq	0x1(%rax), %rsi
    00002c90: 	callq	_ZdlPvm@PLT # Offset: 11408
.Ltmp3947:
    00002c95: 	leaq	DATAat0x4d4de(%rip), %rdx
    00002c9c: 	movq	%r14, %rsi
    00002c9f: 	movq	%r12, %rdi
    00002ca2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11426
    00002ca7: 	movl	0x10(%rsp), %edx
    00002cab: 	movq	%r12, %rcx
    00002cae: 	movl	$0x1f40, %esi
    00002cb3: 	movq	%rbp, %rdi
    00002cb6: 	callq	_Z28test_CSE8_add_inline_flippedIj14custom_cse_addIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 11446
    00002cbb: 	movq	0xe0(%rsp), %rdi
    00002cc3: 	cmpq	0x8(%rsp), %rdi
    00002cc8: 	je	.Ltmp3948 # Offset: 11464
    00002cca: 	movq	0xf0(%rsp), %rax
    00002cd2: 	leaq	0x1(%rax), %rsi
    00002cd6: 	callq	_ZdlPvm@PLT # Offset: 11478
.Ltmp3948:
    00002cdb: 	leaq	DATAat0x4d4f8(%rip), %rdx
    00002ce2: 	movq	%r14, %rsi
    00002ce5: 	movq	%r12, %rdi
    00002ce8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11496
    00002ced: 	movl	0x10(%rsp), %edx
    00002cf1: 	movq	%r12, %rcx
    00002cf4: 	movl	$0x1f40, %esi
    00002cf9: 	movq	%rbp, %rdi
    00002cfc: 	callq	_Z9test_CSE8Ij14custom_cse_addIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 11516
    00002d01: 	movq	0xe0(%rsp), %rdi
    00002d09: 	cmpq	0x8(%rsp), %rdi
    00002d0e: 	je	.Ltmp3949 # Offset: 11534
    00002d10: 	movq	0xf0(%rsp), %rax
    00002d18: 	leaq	0x1(%rax), %rsi
    00002d1c: 	callq	_ZdlPvm@PLT # Offset: 11548
.Ltmp3949:
    00002d21: 	leaq	DATAat0x4d503(%rip), %rdx
    00002d28: 	movq	%r14, %rsi
    00002d2b: 	movq	%r12, %rdi
    00002d2e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11566
    00002d33: 	callq	clock@PLT # Offset: 11571
    00002d38: 	movl	iterations(%rip), %ecx
    00002d3e: 	xorl	%r13d, %r13d
    00002d41: 	leaq	0x7cf0(%rbp), %rbx
    00002d48: 	movq	%rax, start_time(%rip)
    00002d4f: 	leaq	DATAat0x4d004(%rip), %r15
    00002d56: 	testl	%ecx, %ecx
    00002d58: 	jle	.Ltmp3950 # Offset: 11608
    00002d5e: 	nop # Size: 2
.Ltmp3953:
    00002d60: 	movl	0x100(%rsp), %edx
    00002d67: 	movq	%rbp, %rax
    00002d6a: 	subl	0x104(%rsp), %edx
    00002d71: 	pxor	%xmm0, %xmm0
    00002d75: 	nopl	(%rax) # Size: 3
.Ltmp3951:
    00002d78: 	movdqa	(%rax), %xmm1
    00002d7c: 	movdqu	0x4(%rax), %xmm6
    00002d81: 	addq	$0x10, %rax
    00002d85: 	psubd	%xmm6, %xmm1
    00002d89: 	pslld	$0x3, %xmm1
    00002d8e: 	paddd	%xmm1, %xmm0
    00002d92: 	cmpq	%rax, %rbx
    00002d95: 	jne	.Ltmp3951 # Offset: 11669
    00002d97: 	movdqa	%xmm0, %xmm1
    00002d9b: 	addl	0x7df8(%rsp), %edx
    00002da2: 	movq	0x7df4(%rsp), %xmm2
    00002dab: 	psrldq	$0x8, %xmm1
    00002db0: 	subl	0x7dfc(%rsp), %edx
    00002db7: 	paddd	%xmm1, %xmm0
    00002dbb: 	movq	0x7df0(%rsp), %xmm1
    00002dc4: 	psubd	%xmm2, %xmm1
    00002dc8: 	pslld	$0x3, %xmm1
    00002dcd: 	movd	%xmm1, %eax
    00002dd1: 	pshufd	$0xe5, %xmm1, %xmm6
    00002dd6: 	movdqa	%xmm0, %xmm1
    00002dda: 	movd	%xmm6, %esi
    00002dde: 	psrldq	$0x4, %xmm1
    00002de3: 	addl	%esi, %eax
    00002de5: 	paddd	%xmm1, %xmm0
    00002de9: 	leal	(%rax,%rdx,8), %edx
    00002dec: 	movd	%xmm0, %eax
    00002df0: 	addl	%eax, %edx
    00002df2: 	jne	.Ltmp3952 # Offset: 11762
.Ltmp3989:
    00002df8: 	addl	$0x1, %r13d
    00002dfc: 	cmpl	%ecx, %r13d
    00002dff: 	jl	.Ltmp3953 # Offset: 11775
.Ltmp3950:
    00002e05: 	movq	%r12, %rsi
    00002e08: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002e0f: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 11791
    00002e14: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002e1b: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00002e22: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002e29: 	je	.Ltmp3954 # Offset: 11817
.Ltmp4024:
    00002e2f: 	movq	-0x20(%rax), %r13
    00002e33: 	callq	clock@PLT # Offset: 11827
    00002e38: 	pxor	%xmm0, %xmm0
    00002e3c: 	movq	%rax, end_time(%rip)
    00002e43: 	movq	%r13, %rdi
    00002e46: 	subq	start_time(%rip), %rax
    00002e4d: 	cvtsi2sd	%rax, %xmm0
    00002e52: 	divsd	DATAat0x4d640(%rip), %xmm0
    00002e5a: 	callq	_Z13record_resultdPKc # Offset: 11866
    00002e5f: 	movq	0xe0(%rsp), %rdi
    00002e67: 	cmpq	0x8(%rsp), %rdi
    00002e6c: 	je	.Ltmp3955 # Offset: 11884
    00002e6e: 	movq	0xf0(%rsp), %rax
    00002e76: 	leaq	0x1(%rax), %rsi
    00002e7a: 	callq	_ZdlPvm@PLT # Offset: 11898
.Ltmp3955:
    00002e7f: 	leaq	DATAat0x4d51c(%rip), %rdx
    00002e86: 	movq	%r14, %rsi
    00002e89: 	movq	%r12, %rdi
    00002e8c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11916
    00002e91: 	movl	0x10(%rsp), %edx
    00002e95: 	movq	%r12, %rcx
    00002e98: 	movl	$0x1f40, %esi
    00002e9d: 	movq	%rbp, %rdi
    00002ea0: 	callq	_Z9test_CSE8Ij14custom_cse_subIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 11936
    00002ea5: 	movq	0xe0(%rsp), %rdi
    00002ead: 	cmpq	0x8(%rsp), %rdi
    00002eb2: 	je	.Ltmp3956 # Offset: 11954
    00002eb4: 	movq	0xf0(%rsp), %rax
    00002ebc: 	leaq	0x1(%rax), %rsi
    00002ec0: 	callq	_ZdlPvm@PLT # Offset: 11968
.Ltmp3956:
    00002ec5: 	leaq	DATAat0x4d52c(%rip), %rdx
    00002ecc: 	movq	%r14, %rsi
    00002ecf: 	movq	%r12, %rdi
    00002ed2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11986
    00002ed7: 	callq	clock@PLT # Offset: 11991
    00002edc: 	movl	iterations(%rip), %ecx
    00002ee2: 	xorl	%r13d, %r13d
    00002ee5: 	leaq	0x7cf0(%rbp), %rbx
    00002eec: 	movq	%rax, start_time(%rip)
    00002ef3: 	leaq	DATAat0x4d004(%rip), %r15
    00002efa: 	testl	%ecx, %ecx
    00002efc: 	jle	.Ltmp3957 # Offset: 12028
    00002f02: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3960:
    00002f08: 	movl	0x100(%rsp), %edx
    00002f0f: 	movq	%rbp, %rax
    00002f12: 	subl	0x104(%rsp), %edx
    00002f19: 	pxor	%xmm0, %xmm0
    00002f1d: 	nopl	(%rax) # Size: 3
.Ltmp3958:
    00002f20: 	movdqa	(%rax), %xmm1
    00002f24: 	movdqu	0x4(%rax), %xmm7
    00002f29: 	addq	$0x10, %rax
    00002f2d: 	psubd	%xmm7, %xmm1
    00002f31: 	pslld	$0x3, %xmm1
    00002f36: 	paddd	%xmm1, %xmm0
    00002f3a: 	cmpq	%rax, %rbx
    00002f3d: 	jne	.Ltmp3958 # Offset: 12093
    00002f3f: 	movdqa	%xmm0, %xmm1
    00002f43: 	addl	0x7df8(%rsp), %edx
    00002f4a: 	movq	0x7df4(%rsp), %xmm2
    00002f53: 	psrldq	$0x8, %xmm1
    00002f58: 	subl	0x7dfc(%rsp), %edx
    00002f5f: 	paddd	%xmm1, %xmm0
    00002f63: 	movq	0x7df0(%rsp), %xmm1
    00002f6c: 	psubd	%xmm2, %xmm1
    00002f70: 	pslld	$0x3, %xmm1
    00002f75: 	movd	%xmm1, %eax
    00002f79: 	pshufd	$0xe5, %xmm1, %xmm7
    00002f7e: 	movdqa	%xmm0, %xmm1
    00002f82: 	movd	%xmm7, %esi
    00002f86: 	psrldq	$0x4, %xmm1
    00002f8b: 	addl	%esi, %eax
    00002f8d: 	paddd	%xmm1, %xmm0
    00002f91: 	leal	(%rax,%rdx,8), %edx
    00002f94: 	movd	%xmm0, %eax
    00002f98: 	addl	%eax, %edx
    00002f9a: 	jne	.Ltmp3959 # Offset: 12186
.Ltmp3988:
    00002fa0: 	addl	$0x1, %r13d
    00002fa4: 	cmpl	%ecx, %r13d
    00002fa7: 	jl	.Ltmp3960 # Offset: 12199
.Ltmp3957:
    00002fad: 	movq	%r12, %rsi
    00002fb0: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002fb7: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 12215
    00002fbc: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002fc3: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00002fca: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002fd1: 	je	.Ltmp3961 # Offset: 12241
.Ltmp4023:
    00002fd7: 	movq	-0x20(%rax), %r13
    00002fdb: 	callq	clock@PLT # Offset: 12251
    00002fe0: 	pxor	%xmm0, %xmm0
    00002fe4: 	movq	%rax, end_time(%rip)
    00002feb: 	movq	%r13, %rdi
    00002fee: 	subq	start_time(%rip), %rax
    00002ff5: 	cvtsi2sd	%rax, %xmm0
    00002ffa: 	divsd	DATAat0x4d640(%rip), %xmm0
    00003002: 	callq	_Z13record_resultdPKc # Offset: 12290
    00003007: 	movq	0xe0(%rsp), %rdi
    0000300f: 	cmpq	0x8(%rsp), %rdi
    00003014: 	je	.Ltmp3962 # Offset: 12308
    00003016: 	movq	0xf0(%rsp), %rax
    0000301e: 	leaq	0x1(%rax), %rsi
    00003022: 	callq	_ZdlPvm@PLT # Offset: 12322
.Ltmp3962:
    00003027: 	leaq	DATAat0x4d545(%rip), %rdx
    0000302e: 	movq	%r14, %rsi
    00003031: 	movq	%r12, %rdi
    00003034: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12340
    00003039: 	movl	0x10(%rsp), %edx
    0000303d: 	movq	%r12, %rcx
    00003040: 	movl	$0x1f40, %esi
    00003045: 	movq	%rbp, %rdi
    00003048: 	callq	_Z9test_CSE8Ij14custom_cse_mulIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 12360
    0000304d: 	movq	0xe0(%rsp), %rdi
    00003055: 	cmpq	0x8(%rsp), %rdi
    0000305a: 	je	.Ltmp3963 # Offset: 12378
    0000305c: 	movq	0xf0(%rsp), %rax
    00003064: 	leaq	0x1(%rax), %rsi
    00003068: 	callq	_ZdlPvm@PLT # Offset: 12392
.Ltmp3963:
    0000306d: 	leaq	DATAat0x4d555(%rip), %rdx
    00003074: 	movq	%r14, %rsi
    00003077: 	movq	%r12, %rdi
    0000307a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12410
    0000307f: 	callq	clock@PLT # Offset: 12415
    00003084: 	movl	iterations(%rip), %ecx
    0000308a: 	xorl	%r13d, %r13d
    0000308d: 	leaq	0x7cf0(%rbp), %rbx
    00003094: 	movq	%rax, start_time(%rip)
    0000309b: 	leaq	DATAat0x4d004(%rip), %r15
    000030a2: 	testl	%ecx, %ecx
    000030a4: 	jle	.Ltmp3964 # Offset: 12452
    000030aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3967:
    000030b0: 	movl	0x100(%rsp), %edx
    000030b7: 	movq	%rbp, %rax
    000030ba: 	subl	0x104(%rsp), %edx
    000030c1: 	pxor	%xmm0, %xmm0
    000030c5: 	nopl	(%rax) # Size: 3
.Ltmp3965:
    000030c8: 	movdqa	(%rax), %xmm1
    000030cc: 	movdqu	0x4(%rax), %xmm3
    000030d1: 	addq	$0x10, %rax
    000030d5: 	psubd	%xmm3, %xmm1
    000030d9: 	pslld	$0x3, %xmm1
    000030de: 	paddd	%xmm1, %xmm0
    000030e2: 	cmpq	%rbx, %rax
    000030e5: 	jne	.Ltmp3965 # Offset: 12517
    000030e7: 	movdqa	%xmm0, %xmm1
    000030eb: 	addl	0x7df8(%rsp), %edx
    000030f2: 	movq	0x7df4(%rsp), %xmm2
    000030fb: 	psrldq	$0x8, %xmm1
    00003100: 	subl	0x7dfc(%rsp), %edx
    00003107: 	paddd	%xmm1, %xmm0
    0000310b: 	movq	0x7df0(%rsp), %xmm1
    00003114: 	psubd	%xmm2, %xmm1
    00003118: 	pslld	$0x3, %xmm1
    0000311d: 	movd	%xmm1, %eax
    00003121: 	pshufd	$0xe5, %xmm1, %xmm3
    00003126: 	movdqa	%xmm0, %xmm1
    0000312a: 	movd	%xmm3, %esi
    0000312e: 	psrldq	$0x4, %xmm1
    00003133: 	addl	%esi, %eax
    00003135: 	paddd	%xmm1, %xmm0
    00003139: 	leal	(%rax,%rdx,8), %edx
    0000313c: 	movd	%xmm0, %eax
    00003140: 	addl	%eax, %edx
    00003142: 	jne	.Ltmp3966 # Offset: 12610
.Ltmp3987:
    00003148: 	addl	$0x1, %r13d
    0000314c: 	cmpl	%ecx, %r13d
    0000314f: 	jl	.Ltmp3967 # Offset: 12623
.Ltmp3964:
    00003155: 	movq	%r12, %rsi
    00003158: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000315f: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 12639
    00003164: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000316b: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00003172: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00003179: 	je	.Ltmp3968 # Offset: 12665
.Ltmp4022:
    0000317f: 	movq	-0x20(%rax), %r13
    00003183: 	callq	clock@PLT # Offset: 12675
    00003188: 	pxor	%xmm0, %xmm0
    0000318c: 	movq	%rax, end_time(%rip)
    00003193: 	movq	%r13, %rdi
    00003196: 	subq	start_time(%rip), %rax
    0000319d: 	cvtsi2sd	%rax, %xmm0
    000031a2: 	divsd	DATAat0x4d640(%rip), %xmm0
    000031aa: 	callq	_Z13record_resultdPKc # Offset: 12714
    000031af: 	movq	0xe0(%rsp), %rdi
    000031b7: 	cmpq	0x8(%rsp), %rdi
    000031bc: 	je	.Ltmp3969 # Offset: 12732
    000031be: 	movq	0xf0(%rsp), %rax
    000031c6: 	leaq	0x1(%rax), %rsi
    000031ca: 	callq	_ZdlPvm@PLT # Offset: 12746
.Ltmp3969:
    000031cf: 	leaq	DATAat0x4d56c(%rip), %rdx
    000031d6: 	movq	%r14, %rsi
    000031d9: 	movq	%r12, %rdi
    000031dc: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12764
    000031e1: 	movl	0x10(%rsp), %edx
    000031e5: 	movq	%r12, %rcx
    000031e8: 	movl	$0x1f40, %esi
    000031ed: 	movq	%rbp, %rdi
    000031f0: 	callq	_Z9test_CSE8Ij14custom_cse_divIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 12784
    000031f5: 	movq	0xe0(%rsp), %rdi
    000031fd: 	cmpq	0x8(%rsp), %rdi
    00003202: 	je	.Ltmp3970 # Offset: 12802
    00003204: 	movq	0xf0(%rsp), %rax
    0000320c: 	leaq	0x1(%rax), %rsi
    00003210: 	callq	_ZdlPvm@PLT # Offset: 12816
.Ltmp3970:
    00003215: 	leaq	DATAat0x4d57a(%rip), %rdx
    0000321c: 	movq	%r14, %rsi
    0000321f: 	movq	%r12, %rdi
    00003222: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12834
    00003227: 	callq	clock@PLT # Offset: 12839
    0000322c: 	movl	iterations(%rip), %ecx
    00003232: 	xorl	%r13d, %r13d
    00003235: 	leaq	0x7cf0(%rbp), %rbx
    0000323c: 	movq	%rax, start_time(%rip)
    00003243: 	leaq	DATAat0x4d004(%rip), %r15
    0000324a: 	testl	%ecx, %ecx
    0000324c: 	jle	.Ltmp3971 # Offset: 12876
    00003252: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3974:
    00003258: 	movl	0x100(%rsp), %edx
    0000325f: 	movq	%rbp, %rax
    00003262: 	subl	0x104(%rsp), %edx
    00003269: 	pxor	%xmm0, %xmm0
    0000326d: 	nopl	(%rax) # Size: 3
.Ltmp3972:
    00003270: 	movdqa	(%rax), %xmm1
    00003274: 	movdqu	0x4(%rax), %xmm4
    00003279: 	addq	$0x10, %rax
    0000327d: 	psubd	%xmm4, %xmm1
    00003281: 	pslld	$0x3, %xmm1
    00003286: 	paddd	%xmm1, %xmm0
    0000328a: 	cmpq	%rbx, %rax
    0000328d: 	jne	.Ltmp3972 # Offset: 12941
    0000328f: 	movdqa	%xmm0, %xmm1
    00003293: 	addl	0x7df8(%rsp), %edx
    0000329a: 	movq	0x7df4(%rsp), %xmm2
    000032a3: 	psrldq	$0x8, %xmm1
    000032a8: 	subl	0x7dfc(%rsp), %edx
    000032af: 	paddd	%xmm1, %xmm0
    000032b3: 	movq	0x7df0(%rsp), %xmm1
    000032bc: 	psubd	%xmm2, %xmm1
    000032c0: 	pslld	$0x3, %xmm1
    000032c5: 	movd	%xmm1, %eax
    000032c9: 	pshufd	$0xe5, %xmm1, %xmm4
    000032ce: 	movdqa	%xmm0, %xmm1
    000032d2: 	movd	%xmm4, %esi
    000032d6: 	psrldq	$0x4, %xmm1
    000032db: 	addl	%esi, %eax
    000032dd: 	paddd	%xmm1, %xmm0
    000032e1: 	leal	(%rax,%rdx,8), %edx
    000032e4: 	movd	%xmm0, %eax
    000032e8: 	addl	%eax, %edx
    000032ea: 	jne	.Ltmp3973 # Offset: 13034
.Ltmp3986:
    000032f0: 	addl	$0x1, %r13d
    000032f4: 	cmpl	%ecx, %r13d
    000032f7: 	jl	.Ltmp3974 # Offset: 13047
.Ltmp3971:
    000032fd: 	movq	%r12, %rsi
    00003300: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00003307: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 13063
    0000330c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00003313: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000331a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00003321: 	je	.Ltmp3975 # Offset: 13089
.Ltmp4021:
    00003327: 	movq	-0x20(%rax), %r13
    0000332b: 	callq	clock@PLT # Offset: 13099
    00003330: 	pxor	%xmm0, %xmm0
    00003334: 	movq	%rax, end_time(%rip)
    0000333b: 	movq	%r13, %rdi
    0000333e: 	subq	start_time(%rip), %rax
    00003345: 	cvtsi2sd	%rax, %xmm0
    0000334a: 	divsd	DATAat0x4d640(%rip), %xmm0
    00003352: 	callq	_Z13record_resultdPKc # Offset: 13138
    00003357: 	movq	0xe0(%rsp), %rdi
    0000335f: 	cmpq	0x8(%rsp), %rdi
    00003364: 	je	.Ltmp3976 # Offset: 13156
    00003366: 	movq	0xf0(%rsp), %rax
    0000336e: 	leaq	0x1(%rax), %rsi
    00003372: 	callq	_ZdlPvm@PLT # Offset: 13170
.Ltmp3976:
    00003377: 	leaq	DATAat0x4d58e(%rip), %rdx
    0000337e: 	movq	%r14, %rsi
    00003381: 	movq	%r12, %rdi
    00003384: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13188
    00003389: 	movl	0x10(%rsp), %edx
    0000338d: 	movq	%r12, %rcx
    00003390: 	movl	$0x1f40, %esi
    00003395: 	movq	%rbp, %rdi
    00003398: 	callq	_Z9test_CSE8Ij14custom_cse_mixIjEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 13208
    0000339d: 	movq	0xe0(%rsp), %rdi
    000033a5: 	cmpq	0x8(%rsp), %rdi
    000033aa: 	je	.Ltmp3977 # Offset: 13226
    000033ac: 	movq	0xf0(%rsp), %rax
    000033b4: 	leaq	0x1(%rax), %rsi
    000033b8: 	callq	_ZdlPvm@PLT # Offset: 13240
.Ltmp3977:
    000033bd: 	leaq	0xc0(%rsp), %rdi
    000033c5: 	leaq	DATAat0x4d599(%rip), %rdx
    000033cc: 	movq	%r14, %rsi
    000033cf: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13263
    000033d4: 	movl	iterations(%rip), %edx
    000033da: 	xorl	%r8d, %r8d
    000033dd: 	xorl	%ecx, %ecx
    000033df: 	movl	$0x1f40, %esi
    000033e4: 	movq	0xc0(%rsp), %rdi
    000033ec: 	callq	_Z9summarizePKciiii # Offset: 13292
    000033f1: 	leaq	DATAat0x4d5a0(%rip), %rdx
    000033f8: 	movq	%r14, %rsi
    000033fb: 	movq	%r12, %rdi
    000033fe: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13310
    00003403: 	movl	0x10(%rsp), %esi
    00003407: 	movq	%r12, %rdx
    0000340a: 	movq	%rbp, %rdi
    0000340d: 	callq	_Z16TestUnrolledTypeIjLi4EEvPT_S0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 13325
    00003412: 	movq	0xe0(%rsp), %rdi
    0000341a: 	cmpq	0x8(%rsp), %rdi
    0000341f: 	je	.Ltmp3978 # Offset: 13343
    00003421: 	movq	0xf0(%rsp), %rax
    00003429: 	leaq	0x1(%rax), %rsi
    0000342d: 	callq	_ZdlPvm@PLT # Offset: 13357
.Ltmp3978:
    00003432: 	leaq	DATAat0x4d5ae(%rip), %rdx
    00003439: 	movq	%r14, %rsi
    0000343c: 	movq	%r12, %rdi
    0000343f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13375
    00003444: 	movl	0x10(%rsp), %esi
    00003448: 	movq	%r12, %rdx
    0000344b: 	movq	%rbp, %rdi
    0000344e: 	callq	_Z16TestUnrolledTypeIjLi8EEvPT_S0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 13390
    00003453: 	movq	0xe0(%rsp), %rdi
    0000345b: 	cmpq	0x8(%rsp), %rdi
    00003460: 	je	.Ltmp3979 # Offset: 13408
    00003462: 	movq	0xf0(%rsp), %rax
    0000346a: 	leaq	0x1(%rax), %rsi
    0000346e: 	callq	_ZdlPvm@PLT # Offset: 13422
.Ltmp3979:
    00003473: 	movq	0xc0(%rsp), %rdi
    0000347b: 	leaq	0xd0(%rsp), %rax
    00003483: 	cmpq	%rax, %rdi
    00003486: 	je	.Ltmp3980 # Offset: 13446
    00003488: 	movq	0xd0(%rsp), %rax
    00003490: 	leaq	0x1(%rax), %rsi
    00003494: 	callq	_ZdlPvm@PLT # Offset: 13460
.Ltmp3980:
    00003499: 	movq	0xa0(%rsp), %rdi
    000034a1: 	leaq	0xb0(%rsp), %rax
    000034a9: 	cmpq	%rax, %rdi
    000034ac: 	je	.Ltmp3981 # Offset: 13484
    000034ae: 	movq	0xb0(%rsp), %rax
    000034b6: 	leaq	0x1(%rax), %rsi
    000034ba: 	callq	_ZdlPvm@PLT # Offset: 13498
.Ltmp3981:
    000034bf: 	movq	0x80(%rsp), %rdi
    000034c7: 	leaq	0x90(%rsp), %rax
    000034cf: 	cmpq	%rax, %rdi
    000034d2: 	je	.Ltmp3982 # Offset: 13522
    000034d4: 	movq	0x90(%rsp), %rax
    000034dc: 	leaq	0x1(%rax), %rsi
    000034e0: 	callq	_ZdlPvm@PLT # Offset: 13536
.Ltmp3982:
    000034e5: 	movq	0x60(%rsp), %rdi
    000034ea: 	leaq	0x70(%rsp), %rax
    000034ef: 	cmpq	%rax, %rdi
    000034f2: 	je	.Ltmp3983 # Offset: 13554
    000034f4: 	movq	0x70(%rsp), %rax
    000034f9: 	leaq	0x1(%rax), %rsi
    000034fd: 	callq	_ZdlPvm@PLT # Offset: 13565
.Ltmp3983:
    00003502: 	movq	0x40(%rsp), %rdi
    00003507: 	cmpq	0x18(%rsp), %rdi
    0000350c: 	je	.Ltmp3984 # Offset: 13580
    0000350e: 	movq	0x50(%rsp), %rax
    00003513: 	leaq	0x1(%rax), %rsi
    00003517: 	callq	_ZdlPvm@PLT # Offset: 13591
.Ltmp3984:
    0000351c: 	movq	0x7e08(%rsp), %rax
    00003524: 	subq	%fs:0x28, %rax
    0000352d: 	jne	.Ltmp3985 # Offset: 13613
    00003533: 	addq	$0x7e18, %rsp
    0000353a: 	popq	%rbx
    0000353b: 	popq	%rbp
    0000353c: 	popq	%r12
    0000353e: 	popq	%r13
    00003540: 	popq	%r14
    00003542: 	popq	%r15
    00003544: 	retq # Offset: 13636
    00003545: 	nopl	(%rax) # Size: 3
.Ltmp3973:
    00003548: 	movq	0xe0(%rsp), %rdx
    00003550: 	movq	%r15, %rsi
    00003553: 	movl	$0x1, %edi
    00003558: 	xorl	%eax, %eax
    0000355a: 	callq	__printf_chk@PLT # Offset: 13658
    0000355f: 	movl	iterations(%rip), %ecx
    00003565: 	jmp	.Ltmp3986 # Offset: 13669
    0000356a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3966:
    00003570: 	movq	0xe0(%rsp), %rdx
    00003578: 	movq	%r15, %rsi
    0000357b: 	movl	$0x1, %edi
    00003580: 	xorl	%eax, %eax
    00003582: 	callq	__printf_chk@PLT # Offset: 13698
    00003587: 	movl	iterations(%rip), %ecx
    0000358d: 	jmp	.Ltmp3987 # Offset: 13709
    00003592: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3959:
    00003598: 	movq	0xe0(%rsp), %rdx
    000035a0: 	movq	%r15, %rsi
    000035a3: 	movl	$0x1, %edi
    000035a8: 	xorl	%eax, %eax
    000035aa: 	callq	__printf_chk@PLT # Offset: 13738
    000035af: 	movl	iterations(%rip), %ecx
    000035b5: 	jmp	.Ltmp3988 # Offset: 13749
    000035ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3952:
    000035c0: 	movq	0xe0(%rsp), %rdx
    000035c8: 	movq	%r15, %rsi
    000035cb: 	movl	$0x1, %edi
    000035d0: 	xorl	%eax, %eax
    000035d2: 	callq	__printf_chk@PLT # Offset: 13778
    000035d7: 	movl	iterations(%rip), %ecx
    000035dd: 	jmp	.Ltmp3989 # Offset: 13789
    000035e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3943:
    000035e8: 	movq	0xe0(%rsp), %rdx
    000035f0: 	movq	%r15, %rsi
    000035f3: 	movl	$0x1, %edi
    000035f8: 	xorl	%eax, %eax
    000035fa: 	callq	__printf_chk@PLT # Offset: 13818
    000035ff: 	movl	iterations(%rip), %ecx
    00003605: 	jmp	.Ltmp3990 # Offset: 13829
    0000360a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3937:
    00003610: 	movq	0xe0(%rsp), %rdx
    00003618: 	movq	%r15, %rsi
    0000361b: 	movl	$0x1, %edi
    00003620: 	xorl	%eax, %eax
    00003622: 	callq	__printf_chk@PLT # Offset: 13858
    00003627: 	movl	iterations(%rip), %ecx
    0000362d: 	jmp	.Ltmp3991 # Offset: 13869
    00003632: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3930:
    00003638: 	movq	0xe0(%rsp), %rdx
    00003640: 	movq	%r15, %rsi
    00003643: 	movl	$0x1, %edi
    00003648: 	xorl	%eax, %eax
    0000364a: 	callq	__printf_chk@PLT # Offset: 13898
    0000364f: 	movl	iterations(%rip), %ecx
    00003655: 	jmp	.Ltmp3992 # Offset: 13909
    0000365a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3923:
    00003660: 	movq	0xe0(%rsp), %rdx
    00003668: 	movq	%r15, %rsi
    0000366b: 	movl	$0x1, %edi
    00003670: 	xorl	%eax, %eax
    00003672: 	callq	__printf_chk@PLT # Offset: 13938
    00003677: 	movl	iterations(%rip), %ecx
    0000367d: 	jmp	.Ltmp3993 # Offset: 13949
    00003682: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3916:
    00003688: 	movq	0xe0(%rsp), %rdx
    00003690: 	movq	%r15, %rsi
    00003693: 	movl	$0x1, %edi
    00003698: 	xorl	%eax, %eax
    0000369a: 	callq	__printf_chk@PLT # Offset: 13978
    0000369f: 	movl	iterations(%rip), %ecx
    000036a5: 	jmp	.Ltmp3994 # Offset: 13989
    000036aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3909:
    000036b0: 	movq	0xe0(%rsp), %rdx
    000036b8: 	movq	%r15, %rsi
    000036bb: 	movl	$0x1, %edi
    000036c0: 	xorl	%eax, %eax
    000036c2: 	callq	__printf_chk@PLT # Offset: 14018
    000036c7: 	movl	iterations(%rip), %ecx
    000036cd: 	jmp	.Ltmp3995 # Offset: 14029
    000036d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3900:
    000036d8: 	movq	0xe0(%rsp), %rdx
    000036e0: 	movq	%r15, %rsi
    000036e3: 	movl	$0x1, %edi
    000036e8: 	xorl	%eax, %eax
    000036ea: 	callq	__printf_chk@PLT # Offset: 14058
    000036ef: 	movl	iterations(%rip), %ecx
    000036f5: 	jmp	.Ltmp3996 # Offset: 14069
    000036fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3894:
    00003700: 	movq	0xe0(%rsp), %rdx
    00003708: 	movq	%r15, %rsi
    0000370b: 	movl	$0x1, %edi
    00003710: 	xorl	%eax, %eax
    00003712: 	callq	__printf_chk@PLT # Offset: 14098
    00003717: 	movl	iterations(%rip), %ecx
    0000371d: 	jmp	.Ltmp3997 # Offset: 14109
    00003722: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3887:
    00003728: 	movq	0xe0(%rsp), %rdx
    00003730: 	movq	%r15, %rsi
    00003733: 	movl	$0x1, %edi
    00003738: 	xorl	%eax, %eax
    0000373a: 	callq	__printf_chk@PLT # Offset: 14138
    0000373f: 	movl	iterations(%rip), %ecx
    00003745: 	jmp	.Ltmp3998 # Offset: 14149
    0000374a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3881:
    00003750: 	movq	0xe0(%rsp), %rdx
    00003758: 	leaq	DATAat0x4d004(%rip), %rsi
    0000375f: 	movl	$0x1, %edi
    00003764: 	xorl	%eax, %eax
    00003766: 	callq	__printf_chk@PLT # Offset: 14182
    0000376b: 	movl	iterations(%rip), %edi
    00003771: 	jmp	.Ltmp3999 # Offset: 14193
    00003776: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3875:
    00003780: 	movq	0xe0(%rsp), %rdx
    00003788: 	leaq	DATAat0x4d004(%rip), %rsi
    0000378f: 	movl	$0x1, %edi
    00003794: 	xorl	%eax, %eax
    00003796: 	callq	__printf_chk@PLT # Offset: 14230
    0000379b: 	movl	iterations(%rip), %ecx
    000037a1: 	jmp	.Ltmp4000 # Offset: 14241
    000037a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3869:
    000037b0: 	movq	0xe0(%rsp), %rdx
    000037b8: 	leaq	DATAat0x4d004(%rip), %rsi
    000037bf: 	movl	$0x1, %edi
    000037c4: 	xorl	%eax, %eax
    000037c6: 	callq	__printf_chk@PLT # Offset: 14278
    000037cb: 	movl	iterations(%rip), %esi
    000037d1: 	jmp	.Ltmp4001 # Offset: 14289
    000037d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3863:
    000037e0: 	movq	0xe0(%rsp), %rdx
    000037e8: 	leaq	DATAat0x4d004(%rip), %rsi
    000037ef: 	movl	$0x1, %edi
    000037f4: 	xorl	%eax, %eax
    000037f6: 	callq	__printf_chk@PLT # Offset: 14326
    000037fb: 	movl	iterations(%rip), %ecx
    00003801: 	jmp	.Ltmp4002 # Offset: 14337
    00003806: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3857:
    00003810: 	movq	0xe0(%rsp), %rdx
    00003818: 	leaq	DATAat0x4d004(%rip), %rsi
    0000381f: 	movl	$0x1, %edi
    00003824: 	xorl	%eax, %eax
    00003826: 	callq	__printf_chk@PLT # Offset: 14374
    0000382b: 	movl	iterations(%rip), %esi
    00003831: 	jmp	.Ltmp4003 # Offset: 14385
    00003836: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3851:
    00003840: 	movq	0xe0(%rsp), %rdx
    00003848: 	leaq	DATAat0x4d004(%rip), %rsi
    0000384f: 	movl	$0x1, %edi
    00003854: 	xorl	%eax, %eax
    00003856: 	callq	__printf_chk@PLT # Offset: 14422
    0000385b: 	movl	iterations(%rip), %ecx
    00003861: 	jmp	.Ltmp4004 # Offset: 14433
    00003866: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3842:
    00003870: 	movq	0xe0(%rsp), %rdx
    00003878: 	leaq	DATAat0x4d004(%rip), %rsi
    0000387f: 	movl	$0x1, %edi
    00003884: 	xorl	%eax, %eax
    00003886: 	callq	__printf_chk@PLT # Offset: 14470
    0000388b: 	movl	iterations(%rip), %ecx
    00003891: 	jmp	.Ltmp4005 # Offset: 14481
    00003896: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3836:
    000038a0: 	movq	0xe0(%rsp), %rdx
    000038a8: 	leaq	DATAat0x4d004(%rip), %rsi
    000038af: 	movl	$0x1, %edi
    000038b4: 	xorl	%eax, %eax
    000038b6: 	callq	__printf_chk@PLT # Offset: 14518
    000038bb: 	movl	iterations(%rip), %ecx
    000038c1: 	jmp	.Ltmp4006 # Offset: 14529
    000038c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3830:
    000038d0: 	movq	0xe0(%rsp), %rdx
    000038d8: 	leaq	DATAat0x4d004(%rip), %rsi
    000038df: 	movl	$0x1, %edi
    000038e4: 	xorl	%eax, %eax
    000038e6: 	callq	__printf_chk@PLT # Offset: 14566
    000038eb: 	movl	iterations(%rip), %ecx
    000038f1: 	jmp	.Ltmp4007 # Offset: 14577
    000038f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3824:
    00003900: 	movq	0xe0(%rsp), %rdx
    00003908: 	leaq	DATAat0x4d004(%rip), %rsi
    0000390f: 	movl	$0x1, %edi
    00003914: 	xorl	%eax, %eax
    00003916: 	callq	__printf_chk@PLT # Offset: 14614
    0000391b: 	movl	iterations(%rip), %ecx
    00003921: 	jmp	.Ltmp4008 # Offset: 14625
    00003926: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3818:
    00003930: 	movq	0xe0(%rsp), %rdx
    00003938: 	leaq	DATAat0x4d004(%rip), %rsi
    0000393f: 	movl	$0x1, %edi
    00003944: 	xorl	%eax, %eax
    00003946: 	callq	__printf_chk@PLT # Offset: 14662
    0000394b: 	movl	iterations(%rip), %ecx
    00003951: 	jmp	.Ltmp4009 # Offset: 14673
    00003956: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3812:
    00003960: 	movq	0xe0(%rsp), %rdx
    00003968: 	leaq	DATAat0x4d004(%rip), %rsi
    0000396f: 	movl	$0x1, %edi
    00003974: 	xorl	%eax, %eax
    00003976: 	callq	__printf_chk@PLT # Offset: 14710
    0000397b: 	movl	iterations(%rip), %ecx
    00003981: 	jmp	.Ltmp4010 # Offset: 14721
    00003986: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3806:
    00003990: 	movq	0xe0(%rsp), %rdx
    00003998: 	leaq	DATAat0x4d004(%rip), %rsi
    0000399f: 	movl	$0x1, %edi
    000039a4: 	xorl	%eax, %eax
    000039a6: 	callq	__printf_chk@PLT # Offset: 14758
    000039ab: 	movl	iterations(%rip), %ecx
    000039b1: 	jmp	.Ltmp4011 # Offset: 14769
    000039b6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3800:
    000039c0: 	movq	0xe0(%rsp), %rdx
    000039c8: 	leaq	DATAat0x4d004(%rip), %rsi
    000039cf: 	movl	$0x1, %edi
    000039d4: 	xorl	%eax, %eax
    000039d6: 	callq	__printf_chk@PLT # Offset: 14806
    000039db: 	movl	iterations(%rip), %ecx
    000039e1: 	jmp	.Ltmp4012 # Offset: 14817
    000039e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3794:
    000039f0: 	movq	0xe0(%rsp), %rdx
    000039f8: 	leaq	DATAat0x4d004(%rip), %rsi
    000039ff: 	movl	$0x1, %edi
    00003a04: 	xorl	%eax, %eax
    00003a06: 	callq	__printf_chk@PLT # Offset: 14854
    00003a0b: 	movl	iterations(%rip), %ecx
    00003a11: 	jmp	.Ltmp4013 # Offset: 14865
    00003a16: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3788:
    00003a20: 	movq	0xe0(%rsp), %rdx
    00003a28: 	leaq	DATAat0x4d004(%rip), %rsi
    00003a2f: 	movl	$0x1, %edi
    00003a34: 	xorl	%eax, %eax
    00003a36: 	callq	__printf_chk@PLT # Offset: 14902
    00003a3b: 	movl	iterations(%rip), %ecx
    00003a41: 	jmp	.Ltmp4014 # Offset: 14913
    00003a46: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3782:
    00003a50: 	movq	0xe0(%rsp), %rdx
    00003a58: 	leaq	DATAat0x4d004(%rip), %rsi
    00003a5f: 	movl	$0x1, %edi
    00003a64: 	xorl	%eax, %eax
    00003a66: 	callq	__printf_chk@PLT # Offset: 14950
    00003a6b: 	movl	iterations(%rip), %ecx
    00003a71: 	jmp	.Ltmp4015 # Offset: 14961
    00003a76: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3776:
    00003a80: 	movq	0xe0(%rsp), %rdx
    00003a88: 	leaq	DATAat0x4d004(%rip), %rsi
    00003a8f: 	movl	$0x1, %edi
    00003a94: 	xorl	%eax, %eax
    00003a96: 	callq	__printf_chk@PLT # Offset: 14998
    00003a9b: 	movl	iterations(%rip), %ecx
    00003aa1: 	jmp	.Ltmp4016 # Offset: 15009
    00003aa6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3770:
    00003ab0: 	movq	0xe0(%rsp), %rdx
    00003ab8: 	leaq	DATAat0x4d004(%rip), %rsi
    00003abf: 	movl	$0x1, %edi
    00003ac4: 	xorl	%eax, %eax
    00003ac6: 	callq	__printf_chk@PLT # Offset: 15046
    00003acb: 	movl	iterations(%rip), %ecx
    00003ad1: 	jmp	.Ltmp4017 # Offset: 15057
    00003ad6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3764:
    00003ae0: 	movq	0xe0(%rsp), %rdx
    00003ae8: 	leaq	DATAat0x4d004(%rip), %rsi
    00003aef: 	movl	$0x1, %edi
    00003af4: 	xorl	%eax, %eax
    00003af6: 	callq	__printf_chk@PLT # Offset: 15094
    00003afb: 	movl	iterations(%rip), %ecx
    00003b01: 	jmp	.Ltmp4018 # Offset: 15105
    00003b06: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3758:
    00003b10: 	movq	0xe0(%rsp), %rdx
    00003b18: 	leaq	DATAat0x4d004(%rip), %rsi
    00003b1f: 	movl	$0x1, %edi
    00003b24: 	xorl	%eax, %eax
    00003b26: 	callq	__printf_chk@PLT # Offset: 15142
    00003b2b: 	movl	iterations(%rip), %ecx
    00003b31: 	jmp	.Ltmp4019 # Offset: 15153
.Ltmp3760:
    00003b36: 	movq	-0x8(%rdx), %rax
    00003b3a: 	addq	$0x200, %rax
    00003b40: 	jmp	.Ltmp4020 # Offset: 15168
.Ltmp3975:
    00003b45: 	movq	-0x8(%rdx), %rax
    00003b49: 	addq	$0x200, %rax
    00003b4f: 	jmp	.Ltmp4021 # Offset: 15183
.Ltmp3968:
    00003b54: 	movq	-0x8(%rdx), %rax
    00003b58: 	addq	$0x200, %rax
    00003b5e: 	jmp	.Ltmp4022 # Offset: 15198
.Ltmp3961:
    00003b63: 	movq	-0x8(%rdx), %rax
    00003b67: 	addq	$0x200, %rax
    00003b6d: 	jmp	.Ltmp4023 # Offset: 15213
.Ltmp3954:
    00003b72: 	movq	-0x8(%rdx), %rax
    00003b76: 	addq	$0x200, %rax
    00003b7c: 	jmp	.Ltmp4024 # Offset: 15228
.Ltmp3945:
    00003b81: 	movq	-0x8(%rdx), %rax
    00003b85: 	addq	$0x200, %rax
    00003b8b: 	jmp	.Ltmp4025 # Offset: 15243
.Ltmp3939:
    00003b90: 	movq	-0x8(%rdx), %rax
    00003b94: 	addq	$0x200, %rax
    00003b9a: 	jmp	.Ltmp4026 # Offset: 15258
.Ltmp3932:
    00003b9f: 	movq	-0x8(%rdx), %rax
    00003ba3: 	addq	$0x200, %rax
    00003ba9: 	jmp	.Ltmp4027 # Offset: 15273
.Ltmp3925:
    00003bae: 	movq	-0x8(%rdx), %rax
    00003bb2: 	addq	$0x200, %rax
    00003bb8: 	jmp	.Ltmp4028 # Offset: 15288
.Ltmp3918:
    00003bbd: 	movq	-0x8(%rdx), %rax
    00003bc1: 	addq	$0x200, %rax
    00003bc7: 	jmp	.Ltmp4029 # Offset: 15303
.Ltmp3911:
    00003bcc: 	movq	-0x8(%rdx), %rax
    00003bd0: 	addq	$0x200, %rax
    00003bd6: 	jmp	.Ltmp4030 # Offset: 15318
.Ltmp3902:
    00003bdb: 	movq	-0x8(%rdx), %rax
    00003bdf: 	addq	$0x200, %rax
    00003be5: 	jmp	.Ltmp4031 # Offset: 15333
.Ltmp3896:
    00003bea: 	movq	-0x8(%rdx), %rax
    00003bee: 	addq	$0x200, %rax
    00003bf4: 	jmp	.Ltmp4032 # Offset: 15348
.Ltmp3889:
    00003bf9: 	movq	-0x8(%rdx), %rax
    00003bfd: 	addq	$0x200, %rax
    00003c03: 	jmp	.Ltmp4033 # Offset: 15363
.Ltmp3883:
    00003c08: 	movq	-0x8(%rdx), %rax
    00003c0c: 	addq	$0x200, %rax
    00003c12: 	jmp	.Ltmp4034 # Offset: 15378
.Ltmp3877:
    00003c17: 	movq	-0x8(%rdx), %rax
    00003c1b: 	addq	$0x200, %rax
    00003c21: 	jmp	.Ltmp4035 # Offset: 15393
.Ltmp3871:
    00003c26: 	movq	-0x8(%rdx), %rax
    00003c2a: 	addq	$0x200, %rax
    00003c30: 	jmp	.Ltmp4036 # Offset: 15408
.Ltmp3865:
    00003c35: 	movq	-0x8(%rdx), %rax
    00003c39: 	addq	$0x200, %rax
    00003c3f: 	jmp	.Ltmp4037 # Offset: 15423
.Ltmp3859:
    00003c44: 	movq	-0x8(%rdx), %rax
    00003c48: 	addq	$0x200, %rax
    00003c4e: 	jmp	.Ltmp4038 # Offset: 15438
.Ltmp3853:
    00003c53: 	movq	-0x8(%rdx), %rax
    00003c57: 	addq	$0x200, %rax
    00003c5d: 	jmp	.Ltmp4039 # Offset: 15453
.Ltmp3844:
    00003c62: 	movq	-0x8(%rdx), %rax
    00003c66: 	addq	$0x200, %rax
    00003c6c: 	jmp	.Ltmp4040 # Offset: 15468
.Ltmp3838:
    00003c71: 	movq	-0x8(%rdx), %rax
    00003c75: 	addq	$0x200, %rax
    00003c7b: 	jmp	.Ltmp4041 # Offset: 15483
.Ltmp3832:
    00003c80: 	movq	-0x8(%rdx), %rax
    00003c84: 	addq	$0x200, %rax
    00003c8a: 	jmp	.Ltmp4042 # Offset: 15498
.Ltmp3826:
    00003c8f: 	movq	-0x8(%rdx), %rax
    00003c93: 	addq	$0x200, %rax
    00003c99: 	jmp	.Ltmp4043 # Offset: 15513
.Ltmp3820:
    00003c9e: 	movq	-0x8(%rdx), %rax
    00003ca2: 	addq	$0x200, %rax
    00003ca8: 	jmp	.Ltmp4044 # Offset: 15528
.Ltmp3814:
    00003cad: 	movq	-0x8(%rdx), %rax
    00003cb1: 	addq	$0x200, %rax
    00003cb7: 	jmp	.Ltmp4045 # Offset: 15543
.Ltmp3808:
    00003cbc: 	movq	-0x8(%rdx), %rax
    00003cc0: 	addq	$0x200, %rax
    00003cc6: 	jmp	.Ltmp4046 # Offset: 15558
.Ltmp3802:
    00003ccb: 	movq	-0x8(%rdx), %rax
    00003ccf: 	addq	$0x200, %rax
    00003cd5: 	jmp	.Ltmp4047 # Offset: 15573
.Ltmp3796:
    00003cda: 	movq	-0x8(%rdx), %rax
    00003cde: 	addq	$0x200, %rax
    00003ce4: 	jmp	.Ltmp4048 # Offset: 15588
.Ltmp3790:
    00003ce9: 	movq	-0x8(%rdx), %rax
    00003ced: 	addq	$0x200, %rax
    00003cf3: 	jmp	.Ltmp4049 # Offset: 15603
.Ltmp3784:
    00003cf8: 	movq	-0x8(%rdx), %rax
    00003cfc: 	addq	$0x200, %rax
    00003d02: 	jmp	.Ltmp4050 # Offset: 15618
.Ltmp3778:
    00003d07: 	movq	-0x8(%rdx), %rax
    00003d0b: 	addq	$0x200, %rax
    00003d11: 	jmp	.Ltmp4051 # Offset: 15633
.Ltmp3772:
    00003d16: 	movq	-0x8(%rdx), %rax
    00003d1a: 	addq	$0x200, %rax
    00003d20: 	jmp	.Ltmp4052 # Offset: 15648
.Ltmp3766:
    00003d25: 	movq	-0x8(%rdx), %rax
    00003d29: 	addq	$0x200, %rax
    00003d2f: 	jmp	.Ltmp4053 # Offset: 15663
.Ltmp3985:
    00003d34: 	callq	__stack_chk_fail@PLT # Offset: 15668
    00003d39: 	endbr64
    00003d3d: 	movq	%rax, %rbp
    00003d40: 	jmp	.Ltmp4054 # Offset: 15680
    00003d42: 	endbr64
.Ltmp4056:
    00003d46: 	movq	%rax, %rbp
    00003d49: 	jmp	.Ltmp4055 # Offset: 15689
    00003d4b: 	endbr64
    00003d4f: 	jmp	.Ltmp4056 # Offset: 15695
.Ltmp4062:
    00003d51: 	movq	0xe0(%rsp), %rdi
    00003d59: 	cmpq	0x8(%rsp), %rdi
    00003d5e: 	je	.Ltmp4054 # Offset: 15710
.Ltmp4069:
    00003d60: 	movq	0xf0(%rsp), %rax
    00003d68: 	leaq	0x1(%rax), %rsi
    00003d6c: 	callq	_ZdlPvm@PLT # Offset: 15724
.Ltmp4054:
    00003d71: 	movq	0x40(%rsp), %rdi
    00003d76: 	cmpq	0x18(%rsp), %rdi
    00003d7b: 	je	.Ltmp4057 # Offset: 15739
    00003d7d: 	movq	0x50(%rsp), %rax
    00003d82: 	leaq	0x1(%rax), %rsi
    00003d86: 	callq	_ZdlPvm@PLT # Offset: 15750
.Ltmp4057:
    00003d8b: 	movq	%rbp, %rdi
    00003d8e: 	callq	_Unwind_Resume@PLT # Offset: 15758
.Ltmp4055:
    00003d93: 	movq	0xe0(%rsp), %rdi
    00003d9b: 	cmpq	0x8(%rsp), %rdi
    00003da0: 	je	.Ltmp4058 # Offset: 15776
    00003da2: 	movq	0xf0(%rsp), %rax
    00003daa: 	leaq	0x1(%rax), %rsi
    00003dae: 	callq	_ZdlPvm@PLT # Offset: 15790
.Ltmp4058:
    00003db3: 	movq	0xc0(%rsp), %rdi
    00003dbb: 	leaq	0xd0(%rsp), %rax
    00003dc3: 	cmpq	%rax, %rdi
    00003dc6: 	je	.Ltmp4059 # Offset: 15814
    00003dc8: 	movq	0xd0(%rsp), %rax
    00003dd0: 	leaq	0x1(%rax), %rsi
    00003dd4: 	callq	_ZdlPvm@PLT # Offset: 15828
.Ltmp4059:
    00003dd9: 	movq	0xa0(%rsp), %rdi
    00003de1: 	leaq	0xb0(%rsp), %rax
    00003de9: 	cmpq	%rax, %rdi
    00003dec: 	je	.Ltmp4060 # Offset: 15852
    00003dee: 	movq	0xb0(%rsp), %rax
    00003df6: 	leaq	0x1(%rax), %rsi
    00003dfa: 	callq	_ZdlPvm@PLT # Offset: 15866
.Ltmp4060:
    00003dff: 	movq	0x80(%rsp), %rdi
    00003e07: 	leaq	0x90(%rsp), %rax
    00003e0f: 	cmpq	%rax, %rdi
    00003e12: 	je	.Ltmp4061 # Offset: 15890
    00003e14: 	movq	0x90(%rsp), %rax
    00003e1c: 	leaq	0x1(%rax), %rsi
    00003e20: 	callq	_ZdlPvm@PLT # Offset: 15904
.Ltmp4061:
    00003e25: 	movq	0x60(%rsp), %rdi
    00003e2a: 	leaq	0x70(%rsp), %rax
    00003e2f: 	cmpq	%rax, %rdi
    00003e32: 	je	.Ltmp4054 # Offset: 15922
    00003e38: 	movq	0x70(%rsp), %rax
    00003e3d: 	leaq	0x1(%rax), %rsi
    00003e41: 	callq	_ZdlPvm@PLT # Offset: 15937
    00003e46: 	jmp	.Ltmp4054 # Offset: 15942
    00003e4b: 	endbr64
.Ltmp4063:
    00003e4f: 	movq	%rax, %rbp
    00003e52: 	jmp	.Ltmp4062 # Offset: 15954
    00003e57: 	endbr64
    00003e5b: 	jmp	.Ltmp4063 # Offset: 15963
    00003e5d: 	endbr64
    00003e61: 	jmp	.Ltmp4063 # Offset: 15969
    00003e63: 	endbr64
    00003e67: 	jmp	.Ltmp4063 # Offset: 15975
    00003e69: 	endbr64
    00003e6d: 	jmp	.Ltmp4063 # Offset: 15981
    00003e6f: 	endbr64
    00003e73: 	jmp	.Ltmp4063 # Offset: 15987
    00003e75: 	endbr64
    00003e79: 	jmp	.Ltmp4063 # Offset: 15993
    00003e7b: 	endbr64
    00003e7f: 	jmp	.Ltmp4063 # Offset: 15999
    00003e81: 	endbr64
.Ltmp4071:
    00003e85: 	movq	%rax, %rbp
    00003e88: 	jmp	.Ltmp4064 # Offset: 16008
    00003e8a: 	endbr64
.Ltmp4066:
    00003e8e: 	movq	%rax, %rbp
    00003e91: 	jmp	.Ltmp4065 # Offset: 16017
    00003e96: 	endbr64
    00003e9a: 	jmp	.Ltmp4066 # Offset: 16026
    00003e9c: 	endbr64
    00003ea0: 	jmp	.Ltmp4066 # Offset: 16032
    00003ea2: 	endbr64
    00003ea6: 	jmp	.Ltmp4066 # Offset: 16038
    00003ea8: 	endbr64
    00003eac: 	jmp	.Ltmp4066 # Offset: 16044
    00003eae: 	endbr64
    00003eb2: 	jmp	.Ltmp4066 # Offset: 16050
    00003eb4: 	endbr64
    00003eb8: 	jmp	.Ltmp4066 # Offset: 16056
    00003eba: 	endbr64
    00003ebe: 	movq	%rax, %rbp
    00003ec1: 	jmp	.Ltmp4061 # Offset: 16065
    00003ec6: 	endbr64
    00003eca: 	jmp	.Ltmp4066 # Offset: 16074
    00003ecc: 	endbr64
    00003ed0: 	movq	%rax, %rbp
    00003ed3: 	jmp	.Ltmp4060 # Offset: 16083
    00003ed8: 	endbr64
    00003edc: 	jmp	.Ltmp4066 # Offset: 16092
    00003ede: 	endbr64
    00003ee2: 	jmp	.Ltmp4066 # Offset: 16098
    00003ee4: 	endbr64
    00003ee8: 	jmp	.Ltmp4066 # Offset: 16104
    00003eea: 	endbr64
    00003eee: 	jmp	.Ltmp4066 # Offset: 16110
    00003ef0: 	endbr64
    00003ef4: 	jmp	.Ltmp4066 # Offset: 16116
.Ltmp4064:
    00003ef6: 	movq	0xe0(%rsp), %rdi
    00003efe: 	cmpq	0x8(%rsp), %rdi
    00003f03: 	je	.Ltmp4060 # Offset: 16131
    00003f09: 	movq	0xf0(%rsp), %rax
    00003f11: 	leaq	0x1(%rax), %rsi
    00003f15: 	callq	_ZdlPvm@PLT # Offset: 16149
    00003f1a: 	jmp	.Ltmp4060 # Offset: 16154
.Ltmp4065:
    00003f1f: 	movq	0xe0(%rsp), %rdi
    00003f27: 	cmpq	0x8(%rsp), %rdi
    00003f2c: 	je	.Ltmp4061 # Offset: 16172
    00003f32: 	movq	0xf0(%rsp), %rax
    00003f3a: 	leaq	0x1(%rax), %rsi
    00003f3e: 	callq	_ZdlPvm@PLT # Offset: 16190
    00003f43: 	jmp	.Ltmp4061 # Offset: 16195
    00003f48: 	endbr64
    00003f4c: 	jmp	.Ltmp4063 # Offset: 16204
    00003f51: 	endbr64
    00003f55: 	jmp	.Ltmp4063 # Offset: 16213
    00003f5a: 	endbr64
    00003f5e: 	jmp	.Ltmp4063 # Offset: 16222
    00003f63: 	endbr64
    00003f67: 	jmp	.Ltmp4063 # Offset: 16231
    00003f6c: 	endbr64
    00003f70: 	movq	%rax, %rbp
    00003f73: 	jmp	.Ltmp4067 # Offset: 16243
    00003f75: 	endbr64
.Ltmp4070:
    00003f79: 	movq	%rax, %rbp
    00003f7c: 	jmp	.Ltmp4068 # Offset: 16252
.Ltmp4067:
    00003f7e: 	movq	0xe0(%rsp), %rdi
    00003f86: 	leaq	0xf0(%rsp), %rax
    00003f8e: 	cmpq	%rax, %rdi
    00003f91: 	jne	.Ltmp4069 # Offset: 16273
    00003f97: 	jmp	.Ltmp4054 # Offset: 16279
    00003f9c: 	endbr64
    00003fa0: 	movq	%rax, %rbp
    00003fa3: 	jmp	.Ltmp4058 # Offset: 16291
    00003fa8: 	endbr64
    00003fac: 	jmp	.Ltmp4070 # Offset: 16300
.Ltmp4068:
    00003fae: 	movq	0xe0(%rsp), %rdi
    00003fb6: 	cmpq	0x8(%rsp), %rdi
    00003fbb: 	je	.Ltmp4059 # Offset: 16315
    00003fc1: 	movq	0xf0(%rsp), %rax
    00003fc9: 	leaq	0x1(%rax), %rsi
    00003fcd: 	callq	_ZdlPvm@PLT # Offset: 16333
    00003fd2: 	jmp	.Ltmp4059 # Offset: 16338
    00003fd7: 	endbr64
    00003fdb: 	jmp	.Ltmp4070 # Offset: 16347
    00003fdd: 	endbr64
    00003fe1: 	jmp	.Ltmp4070 # Offset: 16353
    00003fe3: 	endbr64
    00003fe7: 	jmp	.Ltmp4070 # Offset: 16359
    00003fe9: 	endbr64
    00003fed: 	jmp	.Ltmp4070 # Offset: 16365
    00003fef: 	endbr64
    00003ff3: 	jmp	.Ltmp4070 # Offset: 16371
    00003ff5: 	endbr64
    00003ff9: 	jmp	.Ltmp4070 # Offset: 16377
    00003ffe: 	endbr64
    00004002: 	jmp	.Ltmp4070 # Offset: 16386
    00004007: 	endbr64
    0000400b: 	jmp	.Ltmp4070 # Offset: 16395
    00004010: 	endbr64
    00004014: 	jmp	.Ltmp4071 # Offset: 16404
    00004019: 	endbr64
    0000401d: 	jmp	.Ltmp4071 # Offset: 16413
    00004022: 	endbr64
    00004026: 	jmp	.Ltmp4071 # Offset: 16422
    0000402b: 	endbr64
    0000402f: 	jmp	.Ltmp4071 # Offset: 16431
    00004034: 	endbr64
    00004038: 	jmp	.Ltmp4071 # Offset: 16440
    0000403d: 	endbr64
    00004041: 	jmp	.Ltmp4071 # Offset: 16449
    00004046: 	endbr64
    0000404a: 	jmp	.Ltmp4071 # Offset: 16458
    0000404f: 	endbr64
    00004053: 	jmp	.Ltmp4071 # Offset: 16467
    00004058: 	endbr64
    0000405c: 	jmp	.Ltmp4070 # Offset: 16476
    00004061: 	endbr64
    00004065: 	jmp	.Ltmp4071 # Offset: 16485
    0000406a: 	endbr64
    0000406e: 	movq	%rax, %rbp
    00004071: 	jmp	.Ltmp4059 # Offset: 16497
    00004076: 	endbr64
    0000407a: 	jmp	.Ltmp4071 # Offset: 16506
    0000407f: 	endbr64
    00004083: 	jmp	.Ltmp4070 # Offset: 16515
    00004088: 	endbr64
    0000408c: 	jmp	.Ltmp4070 # Offset: 16524
    00004091: 	endbr64
    00004095: 	jmp	.Ltmp4071 # Offset: 16533
    0000409a: 	endbr64
    0000409e: 	jmp	.Ltmp4071 # Offset: 16542
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIjEvd"

Binary Function "_Z16TestUnrolledTypeIfLi4EEvPT_S0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 185
  State       : disassembled
  Address     : 0x36f50
  Size        : 0x2099
  MaxSize     : 0x20a0
  Offset      : 0x36f50
  Section     : .text
  Orc Section : .local.text._Z16TestUnrolledTypeIfLi4EEvPT_S0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0184:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	leaq	DATAat0x4d1e4(%rip), %rdx
    0000000d: 	movq	%rsi, %r15
    00000010: 	pushq	%r14
    00000012: 	pushq	%r13
    00000014: 	pushq	%r12
    00000016: 	pushq	%rbp
    00000017: 	pushq	%rbx
    00000018: 	movq	%rdi, %rbx
    0000001b: 	subq	$0xc8, %rsp
    00000022: 	leaq	0x90(%rsp), %r14
    0000002a: 	movss	%xmm0, 0xc(%rsp)
    00000030: 	movq	%fs:0x28, %rax
    00000039: 	movq	%rax, 0xb8(%rsp)
    00000041: 	xorl	%eax, %eax
    00000043: 	movq	%r14, %rdi
    00000046: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 70
    0000004b: 	callq	clock@PLT # Offset: 75
    00000050: 	movl	iterations(%rip), %edx
    00000056: 	movq	%rax, start_time(%rip)
    0000005d: 	testl	%edx, %edx
    0000005f: 	jle	.Ltmp4072 # Offset: 95
    00000065: 	movss	DATAat0x4d610(%rip), %xmm6
    0000006d: 	movaps	DATAat0x4d610(%rip), %xmm4
    00000074: 	movss	DATAat0x4d5d0(%rip), %xmm7
    0000007c: 	xorl	%r12d, %r12d
    0000007f: 	movq	DATAat0x4d610(%rip), %rax
    00000086: 	movsd	DATAat0x4d620(%rip), %xmm5
    0000008e: 	leaq	0x7cf0(%rbx), %rbp
    00000095: 	movaps	%xmm7, 0x10(%rsp)
    0000009a: 	movss	%xmm6, 0x70(%rsp)
    000000a0: 	pxor	%xmm6, %xmm6
    000000a4: 	leaq	DATAat0x4d004(%rip), %r13
    000000ab: 	movss	%xmm6, 0x74(%rsp)
    000000b1: 	movq	DATAat0x4d5e0(%rip), %xmm6
    000000b9: 	movaps	%xmm4, 0x20(%rsp)
    000000be: 	movsd	DATAat0x4d628(%rip), %xmm4
    000000c6: 	movq	%rax, 0x38(%rsp)
    000000cb: 	movsd	%xmm5, 0x30(%rsp)
    000000d1: 	movaps	%xmm6, 0x50(%rsp)
    000000d6: 	movsd	%xmm4, 0x68(%rsp)
    000000dc: 	nopl	(%rax) # Size: 4
.Ltmp4076:
    000000e0: 	movss	(%rbx), %xmm1
    000000e4: 	subss	0x4(%rbx), %xmm1
    000000e9: 	movq	%rbx, %rax
    000000ec: 	mulss	0x70(%rsp), %xmm1
    000000f2: 	addss	0x74(%rsp), %xmm1
    000000f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp4073:
    00000100: 	movups	(%rax), %xmm0
    00000103: 	movups	0x4(%rax), %xmm6
    00000107: 	addq	$0x10, %rax
    0000010b: 	subps	%xmm6, %xmm0
    0000010e: 	mulps	0x20(%rsp), %xmm0
    00000113: 	addss	%xmm0, %xmm1
    00000117: 	movaps	%xmm0, %xmm2
    0000011a: 	shufps	$0x55, %xmm0, %xmm2
    0000011e: 	addss	%xmm1, %xmm2
    00000122: 	movaps	%xmm0, %xmm1
    00000125: 	unpckhps	%xmm0, %xmm1
    00000128: 	shufps	$0xff, %xmm0, %xmm0
    0000012c: 	addss	%xmm2, %xmm1
    00000130: 	addss	%xmm0, %xmm1
    00000134: 	cmpq	%rbp, %rax
    00000137: 	jne	.Ltmp4073 # Offset: 311
    00000139: 	movq	0x7cf0(%rbx), %xmm0
    00000141: 	movq	0x38(%rsp), %xmm6
    00000147: 	movq	0x7cf4(%rbx), %xmm2
    0000014f: 	movaps	0x10(%rsp), %xmm5
    00000154: 	subps	%xmm2, %xmm0
    00000157: 	mulps	%xmm6, %xmm0
    0000015a: 	addss	%xmm0, %xmm1
    0000015e: 	shufps	$0xe5, %xmm0, %xmm0
    00000162: 	addss	%xmm1, %xmm0
    00000166: 	movss	0x7cf8(%rbx), %xmm1
    0000016e: 	subss	0x7cfc(%rbx), %xmm1
    00000176: 	mulss	0x70(%rsp), %xmm1
    0000017c: 	addss	%xmm1, %xmm0
    00000180: 	pxor	%xmm1, %xmm1
    00000184: 	andps	%xmm0, %xmm5
    00000187: 	cvtss2sd	%xmm5, %xmm1
    0000018b: 	comisd	0x30(%rsp), %xmm1
    00000191: 	jbe	.Ltmp4074 # Offset: 401
    00000193: 	divss	%xmm0, %xmm0
    00000197: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4074:
    000001a0: 	movsd	0x68(%rsp), %xmm5
    000001a6: 	cvtss2sd	%xmm0, %xmm0
    000001aa: 	andpd	0x50(%rsp), %xmm0
    000001b0: 	comisd	%xmm0, %xmm5
    000001b4: 	jbe	.Ltmp4075 # Offset: 436
.Ltmp4183:
    000001ba: 	addl	$0x1, %r12d
    000001be: 	cmpl	%edx, %r12d
    000001c1: 	jl	.Ltmp4076 # Offset: 449
.Ltmp4072:
    000001c7: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001ce: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbp
    000001d5: 	subq	$0x20, %rax
    000001d9: 	cmpq	%rax, %rbp
    000001dc: 	je	.Ltmp4077 # Offset: 476
    000001e2: 	leaq	0x10(%rbp), %rdi
    000001e6: 	movq	0x98(%rsp), %r12
    000001ee: 	movq	%rdi, (%rbp)
    000001f2: 	movq	0x90(%rsp), %r13
    000001fa: 	movq	%r13, %rax
    000001fd: 	addq	%r12, %rax
    00000200: 	je	.Ltmp4078 # Offset: 512
    00000202: 	testq	%r13, %r13
    00000205: 	je	.Ltmp4079 # Offset: 517
.Ltmp4078:
    0000020b: 	movq	%r12, 0x88(%rsp)
    00000213: 	cmpq	$0xf, %r12
    00000217: 	ja	.Ltmp4080 # Offset: 535
    0000021d: 	cmpq	$0x1, %r12
    00000221: 	jne	.Ltmp4081 # Offset: 545
    00000227: 	movzbl	(%r13), %eax
    0000022c: 	movb	%al, 0x10(%rbp)
.Ltmp4184:
    0000022f: 	movq	%r12, 0x8(%rbp)
    00000233: 	movb	$0x0, (%rdi,%r12)
    00000238: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000023f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000246: 	addq	$0x20, %rax
    0000024a: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000251: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000258: 	je	.Ltmp4082 # Offset: 600
.Ltmp4194:
    0000025e: 	movq	-0x20(%rax), %rbp
    00000262: 	callq	clock@PLT # Offset: 610
    00000267: 	pxor	%xmm0, %xmm0
    0000026b: 	movq	%rax, end_time(%rip)
    00000272: 	movq	%rbp, %rdi
    00000275: 	subq	start_time(%rip), %rax
    0000027c: 	cvtsi2sd	%rax, %xmm0
    00000281: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000289: 	callq	_Z13record_resultdPKc # Offset: 649
    0000028e: 	movq	0x90(%rsp), %rdi
    00000296: 	leaq	0xa0(%rsp), %rax
    0000029e: 	movq	%rax, 0x78(%rsp)
    000002a3: 	cmpq	%rax, %rdi
    000002a6: 	je	.Ltmp4083 # Offset: 678
    000002a8: 	movq	0xa0(%rsp), %rax
    000002b0: 	leaq	0x1(%rax), %rsi
    000002b4: 	callq	_ZdlPvm@PLT # Offset: 692
.Ltmp4083:
    000002b9: 	leaq	DATAat0x4d1f1(%rip), %rdx
    000002c0: 	movq	%r15, %rsi
    000002c3: 	movq	%r14, %rdi
    000002c6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 710
    000002cb: 	callq	clock@PLT # Offset: 715
    000002d0: 	movq	%rax, start_time(%rip)
    000002d7: 	movl	iterations(%rip), %eax
    000002dd: 	testl	%eax, %eax
    000002df: 	jle	.Ltmp4084 # Offset: 735
    000002e5: 	movss	DATAat0x4d610(%rip), %xmm7
    000002ed: 	movaps	DATAat0x4d610(%rip), %xmm6
    000002f4: 	pxor	%xmm5, %xmm5
    000002f8: 	movss	DATAat0x4d5d0(%rip), %xmm4
    00000300: 	movq	DATAat0x4d610(%rip), %rcx
    00000307: 	movss	%xmm5, 0x74(%rsp)
    0000030d: 	xorl	%r12d, %r12d
    00000310: 	movq	DATAat0x4d5e0(%rip), %xmm5
    00000318: 	movss	%xmm7, 0x70(%rsp)
    0000031e: 	movsd	DATAat0x4d620(%rip), %xmm7
    00000326: 	leaq	0x7cf0(%rbx), %rbp
    0000032d: 	leaq	DATAat0x4d004(%rip), %r13
    00000334: 	movaps	%xmm6, 0x20(%rsp)
    00000339: 	movsd	DATAat0x4d628(%rip), %xmm6
    00000341: 	movsd	%xmm7, 0x30(%rsp)
    00000347: 	movss	0xc(%rsp), %xmm7
    0000034d: 	movq	%rcx, 0x38(%rsp)
    00000352: 	movaps	%xmm4, 0x10(%rsp)
    00000357: 	movaps	%xmm7, %xmm4
    0000035a: 	movsd	%xmm6, 0x68(%rsp)
    00000360: 	movaps	%xmm7, %xmm6
    00000363: 	shufps	$0xe0, %xmm4, %xmm4
    00000367: 	shufps	$0x0, %xmm6, %xmm6
    0000036b: 	movaps	%xmm5, 0x50(%rsp)
    00000370: 	movaps	%xmm6, 0x40(%rsp)
    00000375: 	movlps	%xmm4, 0x60(%rsp)
    0000037a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4088:
    00000380: 	movss	0x4(%rbx), %xmm2
    00000385: 	movss	(%rbx), %xmm1
    00000389: 	movq	%rbx, %rdx
    0000038c: 	movaps	%xmm2, %xmm0
    0000038f: 	addss	%xmm1, %xmm0
    00000393: 	addss	0xc(%rsp), %xmm0
    00000399: 	addss	%xmm0, %xmm0
    0000039d: 	addss	%xmm0, %xmm1
    000003a1: 	addss	%xmm0, %xmm2
    000003a5: 	subss	%xmm2, %xmm1
    000003a9: 	mulss	0x70(%rsp), %xmm1
    000003af: 	addss	0x74(%rsp), %xmm1
    000003b5: 	nopl	(%rax) # Size: 3
.Ltmp4085:
    000003b8: 	movups	0x4(%rdx), %xmm5
    000003bc: 	movups	(%rdx), %xmm2
    000003bf: 	addq	$0x10, %rdx
    000003c3: 	movups	-0x10(%rdx), %xmm0
    000003c7: 	addps	%xmm5, %xmm2
    000003ca: 	addps	0x40(%rsp), %xmm2
    000003cf: 	addps	%xmm2, %xmm2
    000003d2: 	addps	%xmm2, %xmm0
    000003d5: 	addps	%xmm5, %xmm2
    000003d8: 	subps	%xmm2, %xmm0
    000003db: 	mulps	0x20(%rsp), %xmm0
    000003e0: 	addss	%xmm0, %xmm1
    000003e4: 	movaps	%xmm0, %xmm2
    000003e7: 	shufps	$0x55, %xmm0, %xmm2
    000003eb: 	addss	%xmm1, %xmm2
    000003ef: 	movaps	%xmm0, %xmm1
    000003f2: 	unpckhps	%xmm0, %xmm1
    000003f5: 	shufps	$0xff, %xmm0, %xmm0
    000003f9: 	addss	%xmm2, %xmm1
    000003fd: 	addss	%xmm0, %xmm1
    00000401: 	cmpq	%rbp, %rdx
    00000404: 	jne	.Ltmp4085 # Offset: 1028
    00000406: 	movq	0x7cf0(%rbx), %xmm0
    0000040e: 	movq	0x60(%rsp), %xmm7
    00000414: 	movq	0x7cf4(%rbx), %xmm3
    0000041c: 	movq	0x38(%rsp), %xmm5
    00000422: 	movaps	%xmm0, %xmm2
    00000425: 	movaps	0x10(%rsp), %xmm6
    0000042a: 	addps	%xmm3, %xmm2
    0000042d: 	addps	%xmm7, %xmm2
    00000430: 	addps	%xmm2, %xmm2
    00000433: 	addps	%xmm2, %xmm0
    00000436: 	addps	%xmm3, %xmm2
    00000439: 	movss	0x7cfc(%rbx), %xmm3
    00000441: 	subps	%xmm2, %xmm0
    00000444: 	mulps	%xmm5, %xmm0
    00000447: 	addss	%xmm0, %xmm1
    0000044b: 	shufps	$0xe5, %xmm0, %xmm0
    0000044f: 	addss	%xmm1, %xmm0
    00000453: 	movss	0x7cf8(%rbx), %xmm1
    0000045b: 	movaps	%xmm1, %xmm2
    0000045e: 	addss	%xmm3, %xmm2
    00000462: 	addss	0xc(%rsp), %xmm2
    00000468: 	addss	%xmm2, %xmm2
    0000046c: 	addss	%xmm2, %xmm1
    00000470: 	addss	%xmm3, %xmm2
    00000474: 	subss	%xmm2, %xmm1
    00000478: 	mulss	0x70(%rsp), %xmm1
    0000047e: 	addss	%xmm0, %xmm1
    00000482: 	pxor	%xmm0, %xmm0
    00000486: 	andps	%xmm1, %xmm6
    00000489: 	cvtss2sd	%xmm6, %xmm0
    0000048d: 	comisd	0x30(%rsp), %xmm0
    00000493: 	jbe	.Ltmp4086 # Offset: 1171
    00000495: 	divss	%xmm1, %xmm1
    00000499: 	nopl	(%rax) # Size: 7
.Ltmp4086:
    000004a0: 	movsd	0x68(%rsp), %xmm7
    000004a6: 	cvtss2sd	%xmm1, %xmm1
    000004aa: 	andpd	0x50(%rsp), %xmm1
    000004b0: 	comisd	%xmm1, %xmm7
    000004b4: 	jbe	.Ltmp4087 # Offset: 1204
.Ltmp4185:
    000004ba: 	addl	$0x1, %r12d
    000004be: 	cmpl	%eax, %r12d
    000004c1: 	jl	.Ltmp4088 # Offset: 1217
.Ltmp4084:
    000004c7: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000004ce: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbp
    000004d5: 	subq	$0x20, %rax
    000004d9: 	cmpq	%rax, %rbp
    000004dc: 	je	.Ltmp4089 # Offset: 1244
    000004e2: 	leaq	0x10(%rbp), %rdi
    000004e6: 	movq	0x98(%rsp), %r12
    000004ee: 	movq	%rdi, (%rbp)
    000004f2: 	movq	0x90(%rsp), %r13
    000004fa: 	movq	%r13, %rax
    000004fd: 	addq	%r12, %rax
    00000500: 	je	.Ltmp4090 # Offset: 1280
    00000502: 	testq	%r13, %r13
    00000505: 	je	.Ltmp4091 # Offset: 1285
.Ltmp4090:
    0000050b: 	movq	%r12, 0x88(%rsp)
    00000513: 	cmpq	$0xf, %r12
    00000517: 	ja	.Ltmp4092 # Offset: 1303
    0000051d: 	cmpq	$0x1, %r12
    00000521: 	jne	.Ltmp4093 # Offset: 1313
    00000527: 	movzbl	(%r13), %eax
    0000052c: 	movb	%al, 0x10(%rbp)
.Ltmp4220:
    0000052f: 	movq	%r12, 0x8(%rbp)
    00000533: 	movb	$0x0, (%rdi,%r12)
    00000538: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000053f: 	addq	$0x20, %rax
    00000543: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp4206:
    0000054a: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000551: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000558: 	je	.Ltmp4094 # Offset: 1368
.Ltmp4200:
    0000055e: 	movq	-0x20(%rax), %rbp
    00000562: 	callq	clock@PLT # Offset: 1378
    00000567: 	pxor	%xmm0, %xmm0
    0000056b: 	movq	%rax, end_time(%rip)
    00000572: 	movq	%rbp, %rdi
    00000575: 	subq	start_time(%rip), %rax
    0000057c: 	cvtsi2sd	%rax, %xmm0
    00000581: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000589: 	callq	_Z13record_resultdPKc # Offset: 1417
    0000058e: 	movq	0x90(%rsp), %rdi
    00000596: 	cmpq	0x78(%rsp), %rdi
    0000059b: 	je	.Ltmp4095 # Offset: 1435
    0000059d: 	movq	0xa0(%rsp), %rax
    000005a5: 	leaq	0x1(%rax), %rsi
    000005a9: 	callq	_ZdlPvm@PLT # Offset: 1449
.Ltmp4095:
    000005ae: 	leaq	DATAat0x4d22b(%rip), %rdx
    000005b5: 	movq	%r15, %rsi
    000005b8: 	movq	%r14, %rdi
    000005bb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1467
    000005c0: 	movq	%r14, %rdx
    000005c3: 	movl	$0x1f40, %esi
    000005c8: 	movq	%rbx, %rdi
    000005cb: 	movss	0xc(%rsp), %xmm0
    000005d1: 	callq	_Z9test_CSENIf14custom_cse_addIfELi4EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1489
    000005d6: 	movq	0x90(%rsp), %rdi
    000005de: 	cmpq	0x78(%rsp), %rdi
    000005e3: 	je	.Ltmp4096 # Offset: 1507
    000005e5: 	movq	0xa0(%rsp), %rax
    000005ed: 	leaq	0x1(%rax), %rsi
    000005f1: 	callq	_ZdlPvm@PLT # Offset: 1521
.Ltmp4096:
    000005f6: 	leaq	DATAat0x4d234(%rip), %rdx
    000005fd: 	movq	%r15, %rsi
    00000600: 	movq	%r14, %rdi
    00000603: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1539
    00000608: 	callq	clock@PLT # Offset: 1544
    0000060d: 	movq	%rax, start_time(%rip)
    00000614: 	movl	iterations(%rip), %eax
    0000061a: 	testl	%eax, %eax
    0000061c: 	jle	.Ltmp4097 # Offset: 1564
    00000622: 	movss	DATAat0x4d610(%rip), %xmm4
    0000062a: 	pxor	%xmm7, %xmm7
    0000062e: 	movaps	DATAat0x4d610(%rip), %xmm5
    00000635: 	movss	DATAat0x4d5d0(%rip), %xmm6
    0000063d: 	movq	DATAat0x4d610(%rip), %rcx
    00000644: 	movss	%xmm7, 0x74(%rsp)
    0000064a: 	xorl	%r12d, %r12d
    0000064d: 	movq	DATAat0x4d5e0(%rip), %xmm7
    00000655: 	movss	%xmm4, 0x70(%rsp)
    0000065b: 	movsd	DATAat0x4d620(%rip), %xmm4
    00000663: 	leaq	0x7cf0(%rbx), %rbp
    0000066a: 	leaq	DATAat0x4d004(%rip), %r13
    00000671: 	movaps	%xmm5, 0x20(%rsp)
    00000676: 	movsd	DATAat0x4d628(%rip), %xmm5
    0000067e: 	movsd	%xmm4, 0x30(%rsp)
    00000684: 	movss	0xc(%rsp), %xmm4
    0000068a: 	movq	%rcx, 0x38(%rsp)
    0000068f: 	movaps	%xmm6, 0x10(%rsp)
    00000694: 	movaps	%xmm4, %xmm6
    00000697: 	movaps	%xmm7, 0x50(%rsp)
    0000069c: 	movaps	%xmm4, %xmm7
    0000069f: 	shufps	$0x0, %xmm6, %xmm6
    000006a3: 	shufps	$0xe0, %xmm7, %xmm7
    000006a7: 	movsd	%xmm5, 0x68(%rsp)
    000006ad: 	movaps	%xmm6, 0x40(%rsp)
    000006b2: 	movlps	%xmm7, 0x60(%rsp)
    000006b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4101:
    000006c0: 	movss	(%rbx), %xmm1
    000006c4: 	movss	0x4(%rbx), %xmm2
    000006c9: 	movq	%rbx, %rdx
    000006cc: 	movaps	%xmm1, %xmm0
    000006cf: 	subss	%xmm2, %xmm0
    000006d3: 	addss	0xc(%rsp), %xmm0
    000006d9: 	addss	%xmm0, %xmm0
    000006dd: 	addss	%xmm0, %xmm1
    000006e1: 	addss	%xmm0, %xmm2
    000006e5: 	subss	%xmm2, %xmm1
    000006e9: 	mulss	0x70(%rsp), %xmm1
    000006ef: 	addss	0x74(%rsp), %xmm1
    000006f5: 	nopl	(%rax) # Size: 3
.Ltmp4098:
    000006f8: 	movups	(%rdx), %xmm0
    000006fb: 	movups	0x4(%rdx), %xmm6
    000006ff: 	addq	$0x10, %rdx
    00000703: 	movaps	%xmm0, %xmm2
    00000706: 	subps	%xmm6, %xmm2
    00000709: 	addps	0x40(%rsp), %xmm2
    0000070e: 	addps	%xmm2, %xmm2
    00000711: 	addps	%xmm2, %xmm0
    00000714: 	addps	%xmm6, %xmm2
    00000717: 	subps	%xmm2, %xmm0
    0000071a: 	mulps	0x20(%rsp), %xmm0
    0000071f: 	addss	%xmm0, %xmm1
    00000723: 	movaps	%xmm0, %xmm2
    00000726: 	shufps	$0x55, %xmm0, %xmm2
    0000072a: 	addss	%xmm1, %xmm2
    0000072e: 	movaps	%xmm0, %xmm1
    00000731: 	unpckhps	%xmm0, %xmm1
    00000734: 	shufps	$0xff, %xmm0, %xmm0
    00000738: 	addss	%xmm2, %xmm1
    0000073c: 	addss	%xmm0, %xmm1
    00000740: 	cmpq	%rdx, %rbp
    00000743: 	jne	.Ltmp4098 # Offset: 1859
    00000745: 	movq	0x7cf0(%rbx), %xmm0
    0000074d: 	movq	0x60(%rsp), %xmm6
    00000753: 	movq	0x7cf4(%rbx), %xmm3
    0000075b: 	movq	0x38(%rsp), %xmm7
    00000761: 	movaps	%xmm0, %xmm2
    00000764: 	subps	%xmm3, %xmm2
    00000767: 	addps	%xmm6, %xmm2
    0000076a: 	addps	%xmm2, %xmm2
    0000076d: 	addps	%xmm2, %xmm0
    00000770: 	addps	%xmm3, %xmm2
    00000773: 	movss	0x7cfc(%rbx), %xmm3
    0000077b: 	subps	%xmm2, %xmm0
    0000077e: 	mulps	%xmm7, %xmm0
    00000781: 	movaps	0x10(%rsp), %xmm7
    00000786: 	addss	%xmm0, %xmm1
    0000078a: 	shufps	$0xe5, %xmm0, %xmm0
    0000078e: 	addss	%xmm1, %xmm0
    00000792: 	movss	0x7cf8(%rbx), %xmm1
    0000079a: 	movaps	%xmm1, %xmm2
    0000079d: 	subss	%xmm3, %xmm2
    000007a1: 	addss	0xc(%rsp), %xmm2
    000007a7: 	addss	%xmm2, %xmm2
    000007ab: 	addss	%xmm2, %xmm1
    000007af: 	addss	%xmm3, %xmm2
    000007b3: 	subss	%xmm2, %xmm1
    000007b7: 	mulss	0x70(%rsp), %xmm1
    000007bd: 	addss	%xmm0, %xmm1
    000007c1: 	pxor	%xmm0, %xmm0
    000007c5: 	andps	%xmm1, %xmm7
    000007c8: 	cvtss2sd	%xmm7, %xmm0
    000007cc: 	comisd	0x30(%rsp), %xmm0
    000007d2: 	jbe	.Ltmp4099 # Offset: 2002
    000007d4: 	divss	%xmm1, %xmm1
    000007d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp4099:
    000007e0: 	movsd	0x68(%rsp), %xmm6
    000007e6: 	cvtss2sd	%xmm1, %xmm1
    000007ea: 	andpd	0x50(%rsp), %xmm1
    000007f0: 	comisd	%xmm1, %xmm6
    000007f4: 	jbe	.Ltmp4100 # Offset: 2036
.Ltmp4190:
    000007fa: 	addl	$0x1, %r12d
    000007fe: 	cmpl	%eax, %r12d
    00000801: 	jl	.Ltmp4101 # Offset: 2049
.Ltmp4097:
    00000807: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000080e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbp
    00000815: 	subq	$0x20, %rax
    00000819: 	cmpq	%rax, %rbp
    0000081c: 	je	.Ltmp4102 # Offset: 2076
    00000822: 	leaq	0x10(%rbp), %rdi
    00000826: 	movq	0x98(%rsp), %r12
    0000082e: 	movq	%rdi, (%rbp)
    00000832: 	movq	0x90(%rsp), %r13
    0000083a: 	movq	%r13, %rax
    0000083d: 	addq	%r12, %rax
    00000840: 	je	.Ltmp4103 # Offset: 2112
    00000842: 	testq	%r13, %r13
    00000845: 	je	.Ltmp4104 # Offset: 2117
.Ltmp4103:
    0000084b: 	movq	%r12, 0x88(%rsp)
    00000853: 	cmpq	$0xf, %r12
    00000857: 	ja	.Ltmp4105 # Offset: 2135
    0000085d: 	cmpq	$0x1, %r12
    00000861: 	jne	.Ltmp4106 # Offset: 2145
    00000867: 	movzbl	(%r13), %eax
    0000086c: 	movb	%al, 0x10(%rbp)
.Ltmp4209:
    0000086f: 	movq	%r12, 0x8(%rbp)
    00000873: 	movb	$0x0, (%rdi,%r12)
    00000878: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000087f: 	addq	$0x20, %rax
    00000883: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp4202:
    0000088a: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000891: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000898: 	je	.Ltmp4107 # Offset: 2200
.Ltmp4201:
    0000089e: 	movq	-0x20(%rax), %rbp
    000008a2: 	callq	clock@PLT # Offset: 2210
    000008a7: 	pxor	%xmm0, %xmm0
    000008ab: 	movq	%rax, end_time(%rip)
    000008b2: 	movq	%rbp, %rdi
    000008b5: 	subq	start_time(%rip), %rax
    000008bc: 	cvtsi2sd	%rax, %xmm0
    000008c1: 	divsd	DATAat0x4d640(%rip), %xmm0
    000008c9: 	callq	_Z13record_resultdPKc # Offset: 2249
    000008ce: 	movq	0x90(%rsp), %rdi
    000008d6: 	cmpq	0x78(%rsp), %rdi
    000008db: 	je	.Ltmp4108 # Offset: 2267
    000008dd: 	movq	0xa0(%rsp), %rax
    000008e5: 	leaq	0x1(%rax), %rsi
    000008e9: 	callq	_ZdlPvm@PLT # Offset: 2281
.Ltmp4108:
    000008ee: 	leaq	DATAat0x4d24b(%rip), %rdx
    000008f5: 	movq	%r15, %rsi
    000008f8: 	movq	%r14, %rdi
    000008fb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2299
    00000900: 	callq	clock@PLT # Offset: 2304
    00000905: 	movq	%rax, start_time(%rip)
    0000090c: 	movl	iterations(%rip), %eax
    00000912: 	testl	%eax, %eax
    00000914: 	jle	.Ltmp4109 # Offset: 2324
    0000091a: 	pxor	%xmm6, %xmm6
    0000091e: 	xorl	%r13d, %r13d
    00000921: 	leaq	0x4(%rbx), %r12
    00000925: 	movsd	DATAat0x4d620(%rip), %xmm7
    0000092d: 	movq	DATAat0x4d5e0(%rip), %xmm5
    00000935: 	movss	%xmm6, 0x74(%rsp)
    0000093b: 	movsd	DATAat0x4d628(%rip), %xmm6
    00000943: 	movss	DATAat0x4d5d0(%rip), %xmm4
    0000094b: 	movaps	%xmm4, 0x10(%rsp)
    00000950: 	leaq	0x7d00(%rbx), %rbp
    00000957: 	movsd	%xmm7, 0x30(%rsp)
    0000095d: 	movaps	%xmm5, 0x50(%rsp)
    00000962: 	movsd	%xmm6, 0x68(%rsp)
    00000968: 	nopl	(%rax,%rax) # Size: 8
.Ltmp4113:
    00000970: 	movss	0x4(%rbx), %xmm2
    00000975: 	movss	(%rbx), %xmm1
    00000979: 	movq	%r12, %rdx
    0000097c: 	movaps	%xmm2, %xmm0
    0000097f: 	movaps	%xmm1, %xmm3
    00000982: 	subss	%xmm1, %xmm0
    00000986: 	addss	0xc(%rsp), %xmm0
    0000098c: 	addss	%xmm0, %xmm3
    00000990: 	addss	%xmm0, %xmm2
    00000994: 	addss	%xmm0, %xmm3
    00000998: 	addss	%xmm0, %xmm2
    0000099c: 	movss	0x74(%rsp), %xmm0
    000009a2: 	addss	%xmm3, %xmm0
    000009a6: 	subss	%xmm2, %xmm0
    000009aa: 	addss	%xmm3, %xmm0
    000009ae: 	subss	%xmm2, %xmm0
    000009b2: 	addss	%xmm3, %xmm0
    000009b6: 	subss	%xmm2, %xmm0
    000009ba: 	addss	%xmm3, %xmm0
    000009be: 	subss	%xmm2, %xmm0
    000009c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4110:
    000009c8: 	movaps	%xmm1, %xmm2
    000009cb: 	movss	(%rdx), %xmm1
    000009cf: 	addq	$0x4, %rdx
    000009d3: 	movaps	%xmm1, %xmm4
    000009d6: 	movaps	%xmm1, %xmm3
    000009d9: 	subss	%xmm2, %xmm4
    000009dd: 	addss	0xc(%rsp), %xmm4
    000009e3: 	addss	%xmm4, %xmm2
    000009e7: 	addss	%xmm4, %xmm3
    000009eb: 	addss	%xmm4, %xmm2
    000009ef: 	addss	%xmm4, %xmm3
    000009f3: 	addss	%xmm2, %xmm0
    000009f7: 	subss	%xmm3, %xmm0
    000009fb: 	addss	%xmm2, %xmm0
    000009ff: 	subss	%xmm3, %xmm0
    00000a03: 	addss	%xmm2, %xmm0
    00000a07: 	subss	%xmm3, %xmm0
    00000a0b: 	addss	%xmm2, %xmm0
    00000a0f: 	subss	%xmm3, %xmm0
    00000a13: 	cmpq	%rbp, %rdx
    00000a16: 	jne	.Ltmp4110 # Offset: 2582
    00000a18: 	movaps	0x10(%rsp), %xmm4
    00000a1d: 	pxor	%xmm1, %xmm1
    00000a21: 	andps	%xmm0, %xmm4
    00000a24: 	cvtss2sd	%xmm4, %xmm1
    00000a28: 	comisd	0x30(%rsp), %xmm1
    00000a2e: 	jbe	.Ltmp4111 # Offset: 2606
    00000a30: 	divss	%xmm0, %xmm0
.Ltmp4111:
    00000a34: 	movsd	0x68(%rsp), %xmm6
    00000a3a: 	cvtss2sd	%xmm0, %xmm0
    00000a3e: 	andpd	0x50(%rsp), %xmm0
    00000a44: 	comisd	%xmm0, %xmm6
    00000a48: 	jbe	.Ltmp4112 # Offset: 2632
.Ltmp4192:
    00000a4e: 	addl	$0x1, %r13d
    00000a52: 	cmpl	%eax, %r13d
    00000a55: 	jl	.Ltmp4113 # Offset: 2645
.Ltmp4109:
    00000a5b: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000a62: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbp
    00000a69: 	subq	$0x20, %rax
    00000a6d: 	cmpq	%rax, %rbp
    00000a70: 	je	.Ltmp4114 # Offset: 2672
    00000a76: 	leaq	0x10(%rbp), %rdi
    00000a7a: 	movq	0x98(%rsp), %r12
    00000a82: 	movq	%rdi, (%rbp)
    00000a86: 	movq	0x90(%rsp), %r13
    00000a8e: 	movq	%r13, %rax
    00000a91: 	addq	%r12, %rax
    00000a94: 	je	.Ltmp4115 # Offset: 2708
    00000a96: 	testq	%r13, %r13
    00000a99: 	je	.Ltmp4116 # Offset: 2713
.Ltmp4115:
    00000a9f: 	movq	%r12, 0x88(%rsp)
    00000aa7: 	cmpq	$0xf, %r12
    00000aab: 	ja	.Ltmp4117 # Offset: 2731
    00000ab1: 	cmpq	$0x1, %r12
    00000ab5: 	jne	.Ltmp4118 # Offset: 2741
    00000abb: 	movzbl	(%r13), %eax
    00000ac0: 	movb	%al, 0x10(%rbp)
.Ltmp4218:
    00000ac3: 	movq	%r12, 0x8(%rbp)
    00000ac7: 	movb	$0x0, (%rdi,%r12)
    00000acc: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000ad3: 	addq	$0x20, %rax
    00000ad7: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp4196:
    00000ade: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000ae5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000aec: 	je	.Ltmp4119 # Offset: 2796
.Ltmp4195:
    00000af2: 	movq	-0x20(%rax), %rbp
    00000af6: 	callq	clock@PLT # Offset: 2806
    00000afb: 	pxor	%xmm0, %xmm0
    00000aff: 	movq	%rax, end_time(%rip)
    00000b06: 	movq	%rbp, %rdi
    00000b09: 	subq	start_time(%rip), %rax
    00000b10: 	cvtsi2sd	%rax, %xmm0
    00000b15: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000b1d: 	callq	_Z13record_resultdPKc # Offset: 2845
    00000b22: 	movq	0x90(%rsp), %rdi
    00000b2a: 	cmpq	0x78(%rsp), %rdi
    00000b2f: 	je	.Ltmp4120 # Offset: 2863
    00000b31: 	movq	0xa0(%rsp), %rax
    00000b39: 	leaq	0x1(%rax), %rsi
    00000b3d: 	callq	_ZdlPvm@PLT # Offset: 2877
.Ltmp4120:
    00000b42: 	leaq	DATAat0x4d259(%rip), %rdx
    00000b49: 	movq	%r15, %rsi
    00000b4c: 	movq	%r14, %rdi
    00000b4f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2895
    00000b54: 	callq	clock@PLT # Offset: 2900
    00000b59: 	movq	%rax, start_time(%rip)
    00000b60: 	movl	iterations(%rip), %eax
    00000b66: 	testl	%eax, %eax
    00000b68: 	jle	.Ltmp4121 # Offset: 2920
    00000b6e: 	movaps	DATAat0x4d610(%rip), %xmm5
    00000b75: 	pxor	%xmm7, %xmm7
    00000b79: 	movss	DATAat0x4d610(%rip), %xmm4
    00000b81: 	movss	DATAat0x4d5d0(%rip), %xmm6
    00000b89: 	movq	DATAat0x4d610(%rip), %rcx
    00000b90: 	movss	%xmm7, 0x74(%rsp)
    00000b96: 	xorl	%r12d, %r12d
    00000b99: 	movq	DATAat0x4d5e0(%rip), %xmm7
    00000ba1: 	movaps	%xmm5, 0x20(%rsp)
    00000ba6: 	movsd	DATAat0x4d628(%rip), %xmm5
    00000bae: 	leaq	0x7cf0(%rbx), %rbp
    00000bb5: 	leaq	DATAat0x4d004(%rip), %r13
    00000bbc: 	movss	%xmm4, 0x70(%rsp)
    00000bc2: 	movsd	DATAat0x4d620(%rip), %xmm4
    00000bca: 	movsd	%xmm5, 0x68(%rsp)
    00000bd0: 	movss	0xc(%rsp), %xmm5
    00000bd6: 	movq	%rcx, 0x38(%rsp)
    00000bdb: 	movaps	%xmm6, 0x10(%rsp)
    00000be0: 	movaps	%xmm5, %xmm6
    00000be3: 	movaps	%xmm7, 0x50(%rsp)
    00000be8: 	movaps	%xmm5, %xmm7
    00000beb: 	shufps	$0xe0, %xmm6, %xmm6
    00000bef: 	shufps	$0x0, %xmm7, %xmm7
    00000bf3: 	movsd	%xmm4, 0x30(%rsp)
    00000bf9: 	movaps	%xmm7, 0x40(%rsp)
    00000bfe: 	movlps	%xmm6, 0x60(%rsp)
    00000c03: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4125:
    00000c08: 	movss	0x4(%rbx), %xmm2
    00000c0d: 	movss	(%rbx), %xmm1
    00000c11: 	movq	%rbx, %rdx
    00000c14: 	movaps	%xmm2, %xmm0
    00000c17: 	mulss	%xmm1, %xmm0
    00000c1b: 	addss	0xc(%rsp), %xmm0
    00000c21: 	addss	%xmm0, %xmm0
    00000c25: 	addss	%xmm0, %xmm1
    00000c29: 	addss	%xmm0, %xmm2
    00000c2d: 	subss	%xmm2, %xmm1
    00000c31: 	mulss	0x70(%rsp), %xmm1
    00000c37: 	addss	0x74(%rsp), %xmm1
    00000c3d: 	nopl	(%rax) # Size: 3
.Ltmp4122:
    00000c40: 	movups	0x4(%rdx), %xmm7
    00000c44: 	movups	(%rdx), %xmm2
    00000c47: 	addq	$0x10, %rdx
    00000c4b: 	movups	-0x10(%rdx), %xmm0
    00000c4f: 	mulps	%xmm7, %xmm2
    00000c52: 	addps	0x40(%rsp), %xmm2
    00000c57: 	addps	%xmm2, %xmm2
    00000c5a: 	addps	%xmm2, %xmm0
    00000c5d: 	addps	%xmm7, %xmm2
    00000c60: 	subps	%xmm2, %xmm0
    00000c63: 	mulps	0x20(%rsp), %xmm0
    00000c68: 	addss	%xmm0, %xmm1
    00000c6c: 	movaps	%xmm0, %xmm2
    00000c6f: 	shufps	$0x55, %xmm0, %xmm2
    00000c73: 	addss	%xmm1, %xmm2
    00000c77: 	movaps	%xmm0, %xmm1
    00000c7a: 	unpckhps	%xmm0, %xmm1
    00000c7d: 	shufps	$0xff, %xmm0, %xmm0
    00000c81: 	addss	%xmm2, %xmm1
    00000c85: 	addss	%xmm0, %xmm1
    00000c89: 	cmpq	%rdx, %rbp
    00000c8c: 	jne	.Ltmp4122 # Offset: 3212
    00000c8e: 	movq	0x7cf0(%rbx), %xmm0
    00000c96: 	movq	0x60(%rsp), %xmm6
    00000c9c: 	movq	0x7cf4(%rbx), %xmm3
    00000ca4: 	movq	0x38(%rsp), %xmm7
    00000caa: 	movaps	%xmm0, %xmm2
    00000cad: 	mulps	%xmm3, %xmm2
    00000cb0: 	addps	%xmm6, %xmm2
    00000cb3: 	movaps	0x10(%rsp), %xmm6
    00000cb8: 	addps	%xmm2, %xmm2
    00000cbb: 	addps	%xmm2, %xmm0
    00000cbe: 	addps	%xmm3, %xmm2
    00000cc1: 	movss	0x7cfc(%rbx), %xmm3
    00000cc9: 	subps	%xmm2, %xmm0
    00000ccc: 	mulps	%xmm7, %xmm0
    00000ccf: 	addss	%xmm0, %xmm1
    00000cd3: 	shufps	$0xe5, %xmm0, %xmm0
    00000cd7: 	addss	%xmm1, %xmm0
    00000cdb: 	movss	0x7cf8(%rbx), %xmm1
    00000ce3: 	movaps	%xmm1, %xmm2
    00000ce6: 	mulss	%xmm3, %xmm2
    00000cea: 	addss	0xc(%rsp), %xmm2
    00000cf0: 	addss	%xmm2, %xmm2
    00000cf4: 	addss	%xmm2, %xmm1
    00000cf8: 	addss	%xmm3, %xmm2
    00000cfc: 	subss	%xmm2, %xmm1
    00000d00: 	mulss	0x70(%rsp), %xmm1
    00000d06: 	addss	%xmm0, %xmm1
    00000d0a: 	pxor	%xmm0, %xmm0
    00000d0e: 	andps	%xmm1, %xmm6
    00000d11: 	cvtss2sd	%xmm6, %xmm0
    00000d15: 	comisd	0x30(%rsp), %xmm0
    00000d1b: 	jbe	.Ltmp4123 # Offset: 3355
    00000d1d: 	divss	%xmm1, %xmm1
    00000d21: 	nopl	(%rax) # Size: 7
.Ltmp4123:
    00000d28: 	movsd	0x68(%rsp), %xmm7
    00000d2e: 	cvtss2sd	%xmm1, %xmm1
    00000d32: 	andpd	0x50(%rsp), %xmm1
    00000d38: 	comisd	%xmm1, %xmm7
    00000d3c: 	jbe	.Ltmp4124 # Offset: 3388
.Ltmp4191:
    00000d42: 	addl	$0x1, %r12d
    00000d46: 	cmpl	%eax, %r12d
    00000d49: 	jl	.Ltmp4125 # Offset: 3401
.Ltmp4121:
    00000d4f: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000d56: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbp
    00000d5d: 	subq	$0x20, %rax
    00000d61: 	cmpq	%rax, %rbp
    00000d64: 	je	.Ltmp4126 # Offset: 3428
    00000d6a: 	leaq	0x10(%rbp), %rdi
    00000d6e: 	movq	0x98(%rsp), %r12
    00000d76: 	movq	%rdi, (%rbp)
    00000d7a: 	movq	0x90(%rsp), %r13
    00000d82: 	movq	%r13, %rax
    00000d85: 	addq	%r12, %rax
    00000d88: 	je	.Ltmp4127 # Offset: 3464
    00000d8a: 	testq	%r13, %r13
    00000d8d: 	je	.Ltmp4128 # Offset: 3469
.Ltmp4127:
    00000d93: 	movq	%r12, 0x88(%rsp)
    00000d9b: 	cmpq	$0xf, %r12
    00000d9f: 	ja	.Ltmp4129 # Offset: 3487
    00000da5: 	cmpq	$0x1, %r12
    00000da9: 	jne	.Ltmp4130 # Offset: 3497
    00000daf: 	movzbl	(%r13), %eax
    00000db4: 	movb	%al, 0x10(%rbp)
.Ltmp4216:
    00000db7: 	movq	%r12, 0x8(%rbp)
    00000dbb: 	movb	$0x0, (%rdi,%r12)
    00000dc0: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000dc7: 	addq	$0x20, %rax
    00000dcb: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp4198:
    00000dd2: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000dd9: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000de0: 	je	.Ltmp4131 # Offset: 3552
.Ltmp4197:
    00000de6: 	movq	-0x20(%rax), %rbp
    00000dea: 	callq	clock@PLT # Offset: 3562
    00000def: 	pxor	%xmm0, %xmm0
    00000df3: 	movq	%rax, end_time(%rip)
    00000dfa: 	movq	%rbp, %rdi
    00000dfd: 	subq	start_time(%rip), %rax
    00000e04: 	cvtsi2sd	%rax, %xmm0
    00000e09: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000e11: 	callq	_Z13record_resultdPKc # Offset: 3601
    00000e16: 	movq	0x90(%rsp), %rdi
    00000e1e: 	cmpq	0x78(%rsp), %rdi
    00000e23: 	je	.Ltmp4132 # Offset: 3619
    00000e25: 	movq	0xa0(%rsp), %rax
    00000e2d: 	leaq	0x1(%rax), %rsi
    00000e31: 	callq	_ZdlPvm@PLT # Offset: 3633
.Ltmp4132:
    00000e36: 	leaq	DATAat0x4d270(%rip), %rdx
    00000e3d: 	movq	%r15, %rsi
    00000e40: 	movq	%r14, %rdi
    00000e43: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3651
    00000e48: 	movq	%r14, %rdx
    00000e4b: 	movl	$0x1f40, %esi
    00000e50: 	movq	%rbx, %rdi
    00000e53: 	movss	0xc(%rsp), %xmm0
    00000e59: 	callq	_Z9test_CSENIf14custom_cse_mulIfELi4EEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3673
    00000e5e: 	movq	0x90(%rsp), %rdi
    00000e66: 	cmpq	0x78(%rsp), %rdi
    00000e6b: 	je	.Ltmp4133 # Offset: 3691
    00000e6d: 	movq	0xa0(%rsp), %rax
    00000e75: 	leaq	0x1(%rax), %rsi
    00000e79: 	callq	_ZdlPvm@PLT # Offset: 3705
.Ltmp4133:
    00000e7e: 	leaq	DATAat0x4d27e(%rip), %rdx
    00000e85: 	movq	%r15, %rsi
    00000e88: 	movq	%r14, %rdi
    00000e8b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3723
    00000e90: 	callq	clock@PLT # Offset: 3728
    00000e95: 	movl	iterations(%rip), %edx
    00000e9b: 	movq	%rax, start_time(%rip)
    00000ea2: 	testl	%edx, %edx
    00000ea4: 	jle	.Ltmp4134 # Offset: 3748
    00000eaa: 	movss	DATAat0x4d610(%rip), %xmm6
    00000eb2: 	pxor	%xmm4, %xmm4
    00000eb6: 	xorl	%r12d, %r12d
    00000eb9: 	movaps	DATAat0x4d610(%rip), %xmm7
    00000ec0: 	movss	%xmm4, 0x74(%rsp)
    00000ec6: 	movq	DATAat0x4d5e0(%rip), %xmm4
    00000ece: 	movss	DATAat0x4d5d0(%rip), %xmm5
    00000ed6: 	leaq	0x7cf0(%rbx), %rbp
    00000edd: 	movss	%xmm6, 0x70(%rsp)
    00000ee3: 	movsd	DATAat0x4d620(%rip), %xmm6
    00000eeb: 	leaq	DATAat0x4d004(%rip), %r13
    00000ef2: 	movaps	%xmm7, 0x20(%rsp)
    00000ef7: 	movsd	DATAat0x4d628(%rip), %xmm7
    00000eff: 	movsd	%xmm6, 0x30(%rsp)
    00000f05: 	movss	0xc(%rsp), %xmm6
    00000f0b: 	movaps	%xmm5, 0x10(%rsp)
    00000f10: 	shufps	$0x0, %xmm6, %xmm6
    00000f14: 	movaps	%xmm4, 0x50(%rsp)
    00000f19: 	movsd	%xmm7, 0x68(%rsp)
    00000f1f: 	movaps	%xmm6, 0x40(%rsp)
    00000f24: 	nopl	(%rax) # Size: 4
.Ltmp4138:
    00000f28: 	movss	(%rbx), %xmm2
    00000f2c: 	movss	0x4(%rbx), %xmm1
    00000f31: 	movq	%rbx, %rax
    00000f34: 	movaps	%xmm2, %xmm0
    00000f37: 	divss	%xmm1, %xmm0
    00000f3b: 	addss	0xc(%rsp), %xmm0
    00000f41: 	addss	%xmm0, %xmm0
    00000f45: 	addss	%xmm0, %xmm2
    00000f49: 	addss	%xmm0, %xmm1
    00000f4d: 	subss	%xmm1, %xmm2
    00000f51: 	mulss	0x70(%rsp), %xmm2
    00000f57: 	addss	0x74(%rsp), %xmm2
    00000f5d: 	nopl	(%rax) # Size: 3
.Ltmp4135:
    00000f60: 	movups	(%rax), %xmm0
    00000f63: 	movups	0x4(%rax), %xmm5
    00000f67: 	addq	$0x10, %rax
    00000f6b: 	movaps	%xmm0, %xmm1
    00000f6e: 	divps	%xmm5, %xmm1
    00000f71: 	addps	0x40(%rsp), %xmm1
    00000f76: 	addps	%xmm1, %xmm1
    00000f79: 	addps	%xmm1, %xmm0
    00000f7c: 	addps	%xmm5, %xmm1
    00000f7f: 	subps	%xmm1, %xmm0
    00000f82: 	mulps	0x20(%rsp), %xmm0
    00000f87: 	addss	%xmm0, %xmm2
    00000f8b: 	movaps	%xmm0, %xmm1
    00000f8e: 	shufps	$0x55, %xmm0, %xmm1
    00000f92: 	addss	%xmm2, %xmm1
    00000f96: 	movaps	%xmm0, %xmm2
    00000f99: 	unpckhps	%xmm0, %xmm2
    00000f9c: 	shufps	$0xff, %xmm0, %xmm0
    00000fa0: 	addss	%xmm1, %xmm2
    00000fa4: 	addss	%xmm0, %xmm2
    00000fa8: 	cmpq	%rax, %rbp
    00000fab: 	jne	.Ltmp4135 # Offset: 4011
    00000fad: 	movss	0x7cf0(%rbx), %xmm0
    00000fb5: 	movss	0x7cf4(%rbx), %xmm1
    00000fbd: 	movss	0xc(%rsp), %xmm6
    00000fc3: 	movss	0x70(%rsp), %xmm4
    00000fc9: 	movaps	%xmm0, %xmm3
    00000fcc: 	movaps	0x10(%rsp), %xmm7
    00000fd1: 	divss	%xmm1, %xmm3
    00000fd5: 	addss	%xmm6, %xmm3
    00000fd9: 	addss	%xmm3, %xmm3
    00000fdd: 	addss	%xmm3, %xmm0
    00000fe1: 	addss	%xmm1, %xmm3
    00000fe5: 	subss	%xmm3, %xmm0
    00000fe9: 	movaps	%xmm1, %xmm3
    00000fec: 	mulss	%xmm4, %xmm0
    00000ff0: 	addss	%xmm0, %xmm2
    00000ff4: 	movss	0x7cf8(%rbx), %xmm0
    00000ffc: 	divss	%xmm0, %xmm3
    00001000: 	addss	%xmm6, %xmm3
    00001004: 	addss	%xmm3, %xmm3
    00001008: 	addss	%xmm3, %xmm1
    0000100c: 	addss	%xmm0, %xmm3
    00001010: 	subss	%xmm3, %xmm1
    00001014: 	movss	0x7cfc(%rbx), %xmm3
    0000101c: 	mulss	%xmm4, %xmm1
    00001020: 	addss	%xmm2, %xmm1
    00001024: 	movaps	%xmm0, %xmm2
    00001027: 	divss	%xmm3, %xmm2
    0000102b: 	addss	%xmm6, %xmm2
    0000102f: 	addss	%xmm2, %xmm2
    00001033: 	addss	%xmm2, %xmm0
    00001037: 	addss	%xmm2, %xmm3
    0000103b: 	subss	%xmm3, %xmm0
    0000103f: 	mulss	%xmm4, %xmm0
    00001043: 	addss	%xmm1, %xmm0
    00001047: 	pxor	%xmm1, %xmm1
    0000104b: 	andps	%xmm0, %xmm7
    0000104e: 	cvtss2sd	%xmm7, %xmm1
    00001052: 	comisd	0x30(%rsp), %xmm1
    00001058: 	jbe	.Ltmp4136 # Offset: 4184
    0000105a: 	divss	%xmm0, %xmm0
.Ltmp4136:
    0000105e: 	movsd	0x68(%rsp), %xmm4
    00001064: 	cvtss2sd	%xmm0, %xmm0
    00001068: 	andpd	0x50(%rsp), %xmm0
    0000106e: 	comisd	%xmm0, %xmm4
    00001072: 	jbe	.Ltmp4137 # Offset: 4210
.Ltmp4189:
    00001078: 	addl	$0x1, %r12d
    0000107c: 	cmpl	%edx, %r12d
    0000107f: 	jl	.Ltmp4138 # Offset: 4223
.Ltmp4134:
    00001085: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000108c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbp
    00001093: 	subq	$0x20, %rax
    00001097: 	cmpq	%rax, %rbp
    0000109a: 	je	.Ltmp4139 # Offset: 4250
    000010a0: 	leaq	0x10(%rbp), %rdi
    000010a4: 	movq	0x98(%rsp), %r12
    000010ac: 	movq	%rdi, (%rbp)
    000010b0: 	movq	0x90(%rsp), %r13
    000010b8: 	movq	%r13, %rax
    000010bb: 	addq	%r12, %rax
    000010be: 	je	.Ltmp4140 # Offset: 4286
    000010c0: 	testq	%r13, %r13
    000010c3: 	je	.Ltmp4141 # Offset: 4291
.Ltmp4140:
    000010c9: 	movq	%r12, 0x88(%rsp)
    000010d1: 	cmpq	$0xf, %r12
    000010d5: 	ja	.Ltmp4142 # Offset: 4309
    000010db: 	cmpq	$0x1, %r12
    000010df: 	jne	.Ltmp4143 # Offset: 4319
    000010e5: 	movzbl	(%r13), %eax
    000010ea: 	movb	%al, 0x10(%rbp)
.Ltmp4211:
    000010ed: 	movq	%r12, 0x8(%rbp)
    000010f1: 	movb	$0x0, (%rdi,%r12)
    000010f6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000010fd: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001104: 	addq	$0x20, %rax
    00001108: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000110f: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00001116: 	je	.Ltmp4144 # Offset: 4374
.Ltmp4199:
    0000111c: 	movq	-0x20(%rax), %rbp
    00001120: 	callq	clock@PLT # Offset: 4384
    00001125: 	pxor	%xmm0, %xmm0
    00001129: 	movq	%rax, end_time(%rip)
    00001130: 	movq	%rbp, %rdi
    00001133: 	subq	start_time(%rip), %rax
    0000113a: 	cvtsi2sd	%rax, %xmm0
    0000113f: 	divsd	DATAat0x4d640(%rip), %xmm0
    00001147: 	callq	_Z13record_resultdPKc # Offset: 4423
    0000114c: 	movq	0x90(%rsp), %rdi
    00001154: 	cmpq	0x78(%rsp), %rdi
    00001159: 	je	.Ltmp4145 # Offset: 4441
    0000115b: 	movq	0xa0(%rsp), %rax
    00001163: 	leaq	0x1(%rax), %rsi
    00001167: 	callq	_ZdlPvm@PLT # Offset: 4455
.Ltmp4145:
    0000116c: 	leaq	DATAat0x4d293(%rip), %rdx
    00001173: 	movq	%r15, %rsi
    00001176: 	movq	%r14, %rdi
    00001179: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4473
    0000117e: 	callq	clock@PLT # Offset: 4478
    00001183: 	movq	%rax, start_time(%rip)
    0000118a: 	movl	iterations(%rip), %eax
    00001190: 	testl	%eax, %eax
    00001192: 	jle	.Ltmp4146 # Offset: 4498
    00001198: 	pxor	%xmm5, %xmm5
    0000119c: 	xorl	%r13d, %r13d
    0000119f: 	leaq	0x4(%rbx), %r12
    000011a3: 	movsd	DATAat0x4d620(%rip), %xmm4
    000011ab: 	movq	DATAat0x4d5e0(%rip), %xmm7
    000011b3: 	movss	%xmm5, 0x74(%rsp)
    000011b9: 	movsd	DATAat0x4d628(%rip), %xmm5
    000011c1: 	movss	DATAat0x4d5d0(%rip), %xmm6
    000011c9: 	movaps	%xmm6, 0x10(%rsp)
    000011ce: 	leaq	0x7d00(%rbx), %rbp
    000011d5: 	movsd	%xmm4, 0x30(%rsp)
    000011db: 	movaps	%xmm7, 0x50(%rsp)
    000011e0: 	movsd	%xmm5, 0x68(%rsp)
    000011e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp4150:
    000011f0: 	movss	0x4(%rbx), %xmm2
    000011f5: 	movss	(%rbx), %xmm1
    000011f9: 	movq	%r12, %rdx
    000011fc: 	movaps	%xmm2, %xmm0
    000011ff: 	movaps	%xmm1, %xmm3
    00001202: 	divss	%xmm1, %xmm0
    00001206: 	addss	0xc(%rsp), %xmm0
    0000120c: 	addss	%xmm0, %xmm3
    00001210: 	addss	%xmm0, %xmm2
    00001214: 	addss	%xmm0, %xmm3
    00001218: 	addss	%xmm0, %xmm2
    0000121c: 	movss	0x74(%rsp), %xmm0
    00001222: 	addss	%xmm3, %xmm0
    00001226: 	subss	%xmm2, %xmm0
    0000122a: 	addss	%xmm3, %xmm0
    0000122e: 	subss	%xmm2, %xmm0
    00001232: 	addss	%xmm3, %xmm0
    00001236: 	subss	%xmm2, %xmm0
    0000123a: 	addss	%xmm3, %xmm0
    0000123e: 	subss	%xmm2, %xmm0
    00001242: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4147:
    00001248: 	movaps	%xmm1, %xmm2
    0000124b: 	movss	(%rdx), %xmm1
    0000124f: 	addq	$0x4, %rdx
    00001253: 	movaps	%xmm1, %xmm4
    00001256: 	movaps	%xmm1, %xmm3
    00001259: 	divss	%xmm2, %xmm4
    0000125d: 	addss	0xc(%rsp), %xmm4
    00001263: 	addss	%xmm4, %xmm2
    00001267: 	addss	%xmm4, %xmm3
    0000126b: 	addss	%xmm4, %xmm2
    0000126f: 	addss	%xmm4, %xmm3
    00001273: 	addss	%xmm2, %xmm0
    00001277: 	subss	%xmm3, %xmm0
    0000127b: 	addss	%xmm2, %xmm0
    0000127f: 	subss	%xmm3, %xmm0
    00001283: 	addss	%xmm2, %xmm0
    00001287: 	subss	%xmm3, %xmm0
    0000128b: 	addss	%xmm2, %xmm0
    0000128f: 	subss	%xmm3, %xmm0
    00001293: 	cmpq	%rbp, %rdx
    00001296: 	jne	.Ltmp4147 # Offset: 4758
    00001298: 	movaps	0x10(%rsp), %xmm6
    0000129d: 	pxor	%xmm1, %xmm1
    000012a1: 	andps	%xmm0, %xmm6
    000012a4: 	cvtss2sd	%xmm6, %xmm1
    000012a8: 	comisd	0x30(%rsp), %xmm1
    000012ae: 	jbe	.Ltmp4148 # Offset: 4782
    000012b0: 	divss	%xmm0, %xmm0
.Ltmp4148:
    000012b4: 	movsd	0x68(%rsp), %xmm4
    000012ba: 	cvtss2sd	%xmm0, %xmm0
    000012be: 	andpd	0x50(%rsp), %xmm0
    000012c4: 	comisd	%xmm0, %xmm4
    000012c8: 	jbe	.Ltmp4149 # Offset: 4808
.Ltmp4188:
    000012ce: 	addl	$0x1, %r13d
    000012d2: 	cmpl	%eax, %r13d
    000012d5: 	jl	.Ltmp4150 # Offset: 4821
.Ltmp4146:
    000012db: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000012e2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbp
    000012e9: 	subq	$0x20, %rax
    000012ed: 	cmpq	%rax, %rbp
    000012f0: 	je	.Ltmp4151 # Offset: 4848
    000012f6: 	leaq	0x10(%rbp), %rdi
    000012fa: 	movq	0x98(%rsp), %r12
    00001302: 	movq	%rdi, (%rbp)
    00001306: 	movq	0x90(%rsp), %r13
    0000130e: 	movq	%r13, %rax
    00001311: 	addq	%r12, %rax
    00001314: 	je	.Ltmp4152 # Offset: 4884
    00001316: 	testq	%r13, %r13
    00001319: 	je	.Ltmp4153 # Offset: 4889
.Ltmp4152:
    0000131f: 	movq	%r12, 0x88(%rsp)
    00001327: 	cmpq	$0xf, %r12
    0000132b: 	ja	.Ltmp4154 # Offset: 4907
    00001331: 	cmpq	$0x1, %r12
    00001335: 	jne	.Ltmp4155 # Offset: 4917
    0000133b: 	movzbl	(%r13), %eax
    00001340: 	movb	%al, 0x10(%rbp)
.Ltmp4214:
    00001343: 	movq	%r12, 0x8(%rbp)
    00001347: 	movb	$0x0, (%rdi,%r12)
    0000134c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001353: 	addq	$0x20, %rax
    00001357: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp4205:
    0000135e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00001365: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000136c: 	je	.Ltmp4156 # Offset: 4972
.Ltmp4204:
    00001372: 	movq	-0x20(%rax), %rbp
    00001376: 	callq	clock@PLT # Offset: 4982
    0000137b: 	pxor	%xmm0, %xmm0
    0000137f: 	movq	%rax, end_time(%rip)
    00001386: 	movq	%rbp, %rdi
    00001389: 	subq	start_time(%rip), %rax
    00001390: 	cvtsi2sd	%rax, %xmm0
    00001395: 	divsd	DATAat0x4d640(%rip), %xmm0
    0000139d: 	callq	_Z13record_resultdPKc # Offset: 5021
    000013a2: 	movq	0x90(%rsp), %rdi
    000013aa: 	cmpq	0x78(%rsp), %rdi
    000013af: 	je	.Ltmp4157 # Offset: 5039
    000013b1: 	movq	0xa0(%rsp), %rax
    000013b9: 	leaq	0x1(%rax), %rsi
    000013bd: 	callq	_ZdlPvm@PLT # Offset: 5053
.Ltmp4157:
    000013c2: 	leaq	DATAat0x4d29f(%rip), %rdx
    000013c9: 	movq	%r15, %rsi
    000013cc: 	movq	%r14, %rdi
    000013cf: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5071
    000013d4: 	callq	clock@PLT # Offset: 5076
    000013d9: 	movl	iterations(%rip), %edx
    000013df: 	movq	%rax, start_time(%rip)
    000013e6: 	testl	%edx, %edx
    000013e8: 	jle	.Ltmp4158 # Offset: 5096
    000013ee: 	movss	DATAat0x4d610(%rip), %xmm6
    000013f6: 	pxor	%xmm4, %xmm4
    000013fa: 	xorl	%r12d, %r12d
    000013fd: 	movaps	DATAat0x4d610(%rip), %xmm7
    00001404: 	movss	DATAat0x4d5d0(%rip), %xmm5
    0000140c: 	movss	%xmm4, 0x74(%rsp)
    00001412: 	movq	DATAat0x4d5e0(%rip), %xmm4
    0000141a: 	leaq	0x7cf0(%rbx), %rbp
    00001421: 	movss	%xmm6, 0x70(%rsp)
    00001427: 	movsd	DATAat0x4d620(%rip), %xmm6
    0000142f: 	leaq	DATAat0x4d004(%rip), %r13
    00001436: 	movaps	%xmm7, 0x20(%rsp)
    0000143b: 	movsd	DATAat0x4d628(%rip), %xmm7
    00001443: 	movaps	%xmm5, 0x10(%rsp)
    00001448: 	movss	0xc(%rsp), %xmm5
    0000144e: 	movsd	%xmm6, 0x30(%rsp)
    00001454: 	shufps	$0x0, %xmm5, %xmm5
    00001458: 	movaps	%xmm4, 0x50(%rsp)
    0000145d: 	movsd	%xmm7, 0x68(%rsp)
    00001463: 	movaps	%xmm5, 0x40(%rsp)
    00001468: 	nopl	(%rax,%rax) # Size: 8
.Ltmp4162:
    00001470: 	movss	(%rbx), %xmm2
    00001474: 	movss	0xc(%rsp), %xmm4
    0000147a: 	movq	%rbx, %rax
    0000147d: 	movss	0x4(%rbx), %xmm1
    00001482: 	movaps	%xmm2, %xmm3
    00001485: 	movaps	%xmm2, %xmm0
    00001488: 	divss	%xmm4, %xmm3
    0000148c: 	subss	%xmm1, %xmm0
    00001490: 	mulss	%xmm4, %xmm0
    00001494: 	addss	%xmm3, %xmm0
    00001498: 	addss	%xmm0, %xmm0
    0000149c: 	addss	%xmm0, %xmm2
    000014a0: 	addss	%xmm0, %xmm1
    000014a4: 	subss	%xmm1, %xmm2
    000014a8: 	mulss	0x70(%rsp), %xmm2
    000014ae: 	addss	0x74(%rsp), %xmm2
    000014b4: 	nopl	(%rax) # Size: 4
.Ltmp4159:
    000014b8: 	movups	(%rax), %xmm0
    000014bb: 	movaps	0x40(%rsp), %xmm5
    000014c0: 	addq	$0x10, %rax
    000014c4: 	movups	-0xc(%rax), %xmm4
    000014c8: 	movaps	%xmm0, %xmm3
    000014cb: 	movaps	%xmm0, %xmm1
    000014ce: 	divps	%xmm5, %xmm3
    000014d1: 	subps	%xmm4, %xmm1
    000014d4: 	mulps	%xmm5, %xmm1
    000014d7: 	addps	%xmm3, %xmm1
    000014da: 	addps	%xmm1, %xmm1
    000014dd: 	addps	%xmm1, %xmm0
    000014e0: 	addps	%xmm4, %xmm1
    000014e3: 	subps	%xmm1, %xmm0
    000014e6: 	mulps	0x20(%rsp), %xmm0
    000014eb: 	addss	%xmm0, %xmm2
    000014ef: 	movaps	%xmm0, %xmm1
    000014f2: 	shufps	$0x55, %xmm0, %xmm1
    000014f6: 	addss	%xmm2, %xmm1
    000014fa: 	movaps	%xmm0, %xmm2
    000014fd: 	unpckhps	%xmm0, %xmm2
    00001500: 	shufps	$0xff, %xmm0, %xmm0
    00001504: 	addss	%xmm1, %xmm2
    00001508: 	addss	%xmm0, %xmm2
    0000150c: 	cmpq	%rax, %rbp
    0000150f: 	jne	.Ltmp4159 # Offset: 5391
    00001511: 	movss	0x7cf0(%rbx), %xmm0
    00001519: 	movss	0xc(%rsp), %xmm5
    0000151f: 	movss	0x7cf4(%rbx), %xmm1
    00001527: 	movss	0x70(%rsp), %xmm7
    0000152d: 	movaps	%xmm0, %xmm4
    00001530: 	movaps	%xmm0, %xmm3
    00001533: 	divss	%xmm5, %xmm4
    00001537: 	subss	%xmm1, %xmm3
    0000153b: 	mulss	%xmm5, %xmm3
    0000153f: 	addss	%xmm4, %xmm3
    00001543: 	movaps	%xmm1, %xmm4
    00001546: 	divss	%xmm5, %xmm4
    0000154a: 	addss	%xmm3, %xmm3
    0000154e: 	addss	%xmm3, %xmm0
    00001552: 	addss	%xmm1, %xmm3
    00001556: 	subss	%xmm3, %xmm0
    0000155a: 	movaps	%xmm1, %xmm3
    0000155d: 	mulss	%xmm7, %xmm0
    00001561: 	addss	%xmm0, %xmm2
    00001565: 	movss	0x7cf8(%rbx), %xmm0
    0000156d: 	subss	%xmm0, %xmm3
    00001571: 	mulss	%xmm5, %xmm3
    00001575: 	addss	%xmm4, %xmm3
    00001579: 	movaps	%xmm0, %xmm4
    0000157c: 	divss	%xmm5, %xmm4
    00001580: 	addss	%xmm3, %xmm3
    00001584: 	addss	%xmm3, %xmm1
    00001588: 	addss	%xmm0, %xmm3
    0000158c: 	subss	%xmm3, %xmm1
    00001590: 	movss	0x7cfc(%rbx), %xmm3
    00001598: 	mulss	%xmm7, %xmm1
    0000159c: 	addss	%xmm2, %xmm1
    000015a0: 	movaps	%xmm0, %xmm2
    000015a3: 	subss	%xmm3, %xmm2
    000015a7: 	mulss	%xmm5, %xmm2
    000015ab: 	addss	%xmm4, %xmm2
    000015af: 	movaps	0x10(%rsp), %xmm4
    000015b4: 	addss	%xmm2, %xmm2
    000015b8: 	addss	%xmm2, %xmm0
    000015bc: 	addss	%xmm2, %xmm3
    000015c0: 	subss	%xmm3, %xmm0
    000015c4: 	mulss	%xmm7, %xmm0
    000015c8: 	addss	%xmm1, %xmm0
    000015cc: 	pxor	%xmm1, %xmm1
    000015d0: 	andps	%xmm0, %xmm4
    000015d3: 	cvtss2sd	%xmm4, %xmm1
    000015d7: 	comisd	0x30(%rsp), %xmm1
    000015dd: 	jbe	.Ltmp4160 # Offset: 5597
    000015df: 	divss	%xmm0, %xmm0
.Ltmp4160:
    000015e3: 	movsd	0x68(%rsp), %xmm6
    000015e9: 	cvtss2sd	%xmm0, %xmm0
    000015ed: 	andpd	0x50(%rsp), %xmm0
    000015f3: 	comisd	%xmm0, %xmm6
    000015f7: 	jbe	.Ltmp4161 # Offset: 5623
.Ltmp4187:
    000015fd: 	addl	$0x1, %r12d
    00001601: 	cmpl	%edx, %r12d
    00001604: 	jl	.Ltmp4162 # Offset: 5636
.Ltmp4158:
    0000160a: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00001611: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbp
    00001618: 	subq	$0x20, %rax
    0000161c: 	cmpq	%rax, %rbp
    0000161f: 	je	.Ltmp4163 # Offset: 5663
    00001625: 	leaq	0x10(%rbp), %rdi
    00001629: 	movq	0x98(%rsp), %r12
    00001631: 	movq	%rdi, (%rbp)
    00001635: 	movq	0x90(%rsp), %r13
    0000163d: 	movq	%r13, %rax
    00001640: 	addq	%r12, %rax
    00001643: 	je	.Ltmp4164 # Offset: 5699
    00001645: 	testq	%r13, %r13
    00001648: 	je	.Ltmp4165 # Offset: 5704
.Ltmp4164:
    0000164e: 	movq	%r12, 0x88(%rsp)
    00001656: 	cmpq	$0xf, %r12
    0000165a: 	ja	.Ltmp4166 # Offset: 5722
    00001660: 	cmpq	$0x1, %r12
    00001664: 	jne	.Ltmp4167 # Offset: 5732
    0000166a: 	movzbl	(%r13), %eax
    0000166f: 	movb	%al, 0x10(%rbp)
.Ltmp4217:
    00001672: 	movq	%r12, 0x8(%rbp)
    00001676: 	movb	$0x0, (%rdi,%r12)
    0000167b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001682: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001689: 	addq	$0x20, %rax
    0000168d: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00001694: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000169b: 	je	.Ltmp4168 # Offset: 5787
.Ltmp4203:
    000016a1: 	movq	-0x20(%rax), %rbp
    000016a5: 	callq	clock@PLT # Offset: 5797
    000016aa: 	pxor	%xmm0, %xmm0
    000016ae: 	movq	%rax, end_time(%rip)
    000016b5: 	movq	%rbp, %rdi
    000016b8: 	subq	start_time(%rip), %rax
    000016bf: 	cvtsi2sd	%rax, %xmm0
    000016c4: 	divsd	DATAat0x4d640(%rip), %xmm0
    000016cc: 	callq	_Z13record_resultdPKc # Offset: 5836
    000016d1: 	movq	0x90(%rsp), %rdi
    000016d9: 	cmpq	0x78(%rsp), %rdi
    000016de: 	je	.Ltmp4169 # Offset: 5854
    000016e0: 	movq	0xa0(%rsp), %rax
    000016e8: 	leaq	0x1(%rax), %rsi
    000016ec: 	callq	_ZdlPvm@PLT # Offset: 5868
.Ltmp4169:
    000016f1: 	leaq	DATAat0x4d2b1(%rip), %rdx
    000016f8: 	movq	%r15, %rsi
    000016fb: 	movq	%r14, %rdi
    000016fe: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5886
    00001703: 	callq	clock@PLT # Offset: 5891
    00001708: 	movq	%rax, start_time(%rip)
    0000170f: 	movl	iterations(%rip), %eax
    00001715: 	testl	%eax, %eax
    00001717: 	jle	.Ltmp4170 # Offset: 5911
    0000171d: 	pxor	%xmm5, %xmm5
    00001721: 	xorl	%r13d, %r13d
    00001724: 	leaq	0x4(%rbx), %r12
    00001728: 	movsd	DATAat0x4d620(%rip), %xmm4
    00001730: 	movq	DATAat0x4d5e0(%rip), %xmm7
    00001738: 	movss	%xmm5, 0x74(%rsp)
    0000173e: 	movsd	DATAat0x4d628(%rip), %xmm5
    00001746: 	movss	DATAat0x4d5d0(%rip), %xmm6
    0000174e: 	movaps	%xmm6, 0x10(%rsp)
    00001753: 	leaq	0x7d00(%rbx), %rbp
    0000175a: 	movsd	%xmm4, 0x30(%rsp)
    00001760: 	movaps	%xmm7, 0x50(%rsp)
    00001765: 	movsd	%xmm5, 0x68(%rsp)
    0000176b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4174:
    00001770: 	movss	0x4(%rbx), %xmm2
    00001775: 	movss	0xc(%rsp), %xmm6
    0000177b: 	movq	%r12, %rdx
    0000177e: 	movss	(%rbx), %xmm1
    00001782: 	movaps	%xmm2, %xmm3
    00001785: 	movaps	%xmm2, %xmm0
    00001788: 	divss	%xmm6, %xmm3
    0000178c: 	subss	%xmm1, %xmm0
    00001790: 	mulss	%xmm6, %xmm0
    00001794: 	addss	%xmm3, %xmm0
    00001798: 	movaps	%xmm1, %xmm3
    0000179b: 	addss	%xmm0, %xmm3
    0000179f: 	addss	%xmm0, %xmm2
    000017a3: 	addss	%xmm0, %xmm3
    000017a7: 	addss	%xmm0, %xmm2
    000017ab: 	movss	0x74(%rsp), %xmm0
    000017b1: 	addss	%xmm3, %xmm0
    000017b5: 	subss	%xmm2, %xmm0
    000017b9: 	addss	%xmm3, %xmm0
    000017bd: 	subss	%xmm2, %xmm0
    000017c1: 	addss	%xmm3, %xmm0
    000017c5: 	subss	%xmm2, %xmm0
    000017c9: 	addss	%xmm3, %xmm0
    000017cd: 	subss	%xmm2, %xmm0
    000017d1: 	nopl	(%rax) # Size: 7
.Ltmp4171:
    000017d8: 	movaps	%xmm1, %xmm2
    000017db: 	movss	(%rdx), %xmm1
    000017df: 	movss	0xc(%rsp), %xmm7
    000017e5: 	addq	$0x4, %rdx
    000017e9: 	movaps	%xmm1, %xmm4
    000017ec: 	movaps	%xmm1, %xmm3
    000017ef: 	divss	%xmm7, %xmm4
    000017f3: 	subss	%xmm2, %xmm3
    000017f7: 	mulss	%xmm7, %xmm3
    000017fb: 	addss	%xmm4, %xmm3
    000017ff: 	movaps	%xmm1, %xmm4
    00001802: 	addss	%xmm3, %xmm2
    00001806: 	addss	%xmm3, %xmm4
    0000180a: 	addss	%xmm3, %xmm2
    0000180e: 	addss	%xmm4, %xmm3
    00001812: 	addss	%xmm2, %xmm0
    00001816: 	subss	%xmm3, %xmm0
    0000181a: 	addss	%xmm2, %xmm0
    0000181e: 	subss	%xmm3, %xmm0
    00001822: 	addss	%xmm2, %xmm0
    00001826: 	subss	%xmm3, %xmm0
    0000182a: 	addss	%xmm2, %xmm0
    0000182e: 	subss	%xmm3, %xmm0
    00001832: 	cmpq	%rbp, %rdx
    00001835: 	jne	.Ltmp4171 # Offset: 6197
    00001837: 	movaps	0x10(%rsp), %xmm6
    0000183c: 	pxor	%xmm1, %xmm1
    00001840: 	andps	%xmm0, %xmm6
    00001843: 	cvtss2sd	%xmm6, %xmm1
    00001847: 	comisd	0x30(%rsp), %xmm1
    0000184d: 	jbe	.Ltmp4172 # Offset: 6221
    0000184f: 	divss	%xmm0, %xmm0
.Ltmp4172:
    00001853: 	movsd	0x68(%rsp), %xmm4
    00001859: 	cvtss2sd	%xmm0, %xmm0
    0000185d: 	andpd	0x50(%rsp), %xmm0
    00001863: 	comisd	%xmm0, %xmm4
    00001867: 	jbe	.Ltmp4173 # Offset: 6247
.Ltmp4186:
    0000186d: 	addl	$0x1, %r13d
    00001871: 	cmpl	%eax, %r13d
    00001874: 	jl	.Ltmp4174 # Offset: 6260
.Ltmp4170:
    0000187a: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00001881: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00001888: 	subq	$0x20, %rax
    0000188c: 	cmpq	%rax, %rbx
    0000188f: 	je	.Ltmp4175 # Offset: 6287
    00001895: 	leaq	0x10(%rbx), %rdi
    00001899: 	movq	0x98(%rsp), %r12
    000018a1: 	movq	%rdi, (%rbx)
    000018a4: 	movq	0x90(%rsp), %rbp
    000018ac: 	movq	%rbp, %rax
    000018af: 	addq	%r12, %rax
    000018b2: 	je	.Ltmp4176 # Offset: 6322
    000018b4: 	testq	%rbp, %rbp
    000018b7: 	je	.Ltmp4177 # Offset: 6327
.Ltmp4176:
    000018bd: 	movq	%r12, 0x88(%rsp)
    000018c5: 	cmpq	$0xf, %r12
    000018c9: 	ja	.Ltmp4178 # Offset: 6345
    000018cf: 	cmpq	$0x1, %r12
    000018d3: 	jne	.Ltmp4179 # Offset: 6355
    000018d9: 	movzbl	(%rbp), %eax
    000018dd: 	movb	%al, 0x10(%rbx)
.Ltmp4212:
    000018e0: 	movq	%r12, 0x8(%rbx)
    000018e4: 	movb	$0x0, (%rdi,%r12)
    000018e9: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000018f0: 	addq	$0x20, %rax
    000018f4: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp4207:
    000018fb: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00001902: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001909: 	je	.Ltmp4180 # Offset: 6409
.Ltmp4193:
    0000190f: 	movq	-0x20(%rax), %rbp
    00001913: 	callq	clock@PLT # Offset: 6419
    00001918: 	pxor	%xmm0, %xmm0
    0000191c: 	movq	%rax, end_time(%rip)
    00001923: 	movq	%rbp, %rdi
    00001926: 	subq	start_time(%rip), %rax
    0000192d: 	cvtsi2sd	%rax, %xmm0
    00001932: 	divsd	DATAat0x4d640(%rip), %xmm0
    0000193a: 	callq	_Z13record_resultdPKc # Offset: 6458
    0000193f: 	movq	0x90(%rsp), %rdi
    00001947: 	cmpq	0x78(%rsp), %rdi
    0000194c: 	je	.Ltmp4181 # Offset: 6476
    0000194e: 	movq	0xa0(%rsp), %rax
    00001956: 	leaq	0x1(%rax), %rsi
    0000195a: 	callq	_ZdlPvm@PLT # Offset: 6490
.Ltmp4181:
    0000195f: 	movq	0xb8(%rsp), %rax
    00001967: 	subq	%fs:0x28, %rax
    00001970: 	jne	.Ltmp4182 # Offset: 6512
    00001976: 	movq	(%r15), %rdi
    00001979: 	movl	iterations(%rip), %edx
    0000197f: 	xorl	%r8d, %r8d
    00001982: 	xorl	%ecx, %ecx
    00001984: 	addq	$0xc8, %rsp
    0000198b: 	movl	$0x1f40, %esi
    00001990: 	popq	%rbx
    00001991: 	popq	%rbp
    00001992: 	popq	%r12
    00001994: 	popq	%r13
    00001996: 	popq	%r14
    00001998: 	popq	%r15
    0000199a: 	jmp	_Z9summarizePKciiii # TAILCALL  # Offset: 6554
    0000199f: 	nop # Size: 1
.Ltmp4075:
    000019a0: 	movq	0x90(%rsp), %rdx
    000019a8: 	movq	%r13, %rsi
    000019ab: 	movl	$0x1, %edi
    000019b0: 	xorl	%eax, %eax
    000019b2: 	callq	__printf_chk@PLT # Offset: 6578
    000019b7: 	movl	iterations(%rip), %edx
    000019bd: 	jmp	.Ltmp4183 # Offset: 6589
.Ltmp4080:
    000019c2: 	leaq	0x88(%rsp), %rsi
    000019ca: 	xorl	%edx, %edx
    000019cc: 	movq	%rbp, %rdi
    000019cf: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6607
    000019d4: 	movq	%rax, (%rbp)
    000019d8: 	movq	%rax, %rdi
    000019db: 	movq	0x88(%rsp), %rax
    000019e3: 	movq	%rax, 0x10(%rbp)
.Ltmp4208:
    000019e7: 	movq	%r12, %rdx
    000019ea: 	movq	%r13, %rsi
    000019ed: 	callq	memcpy@PLT # Offset: 6637
    000019f2: 	movq	0x88(%rsp), %r12
    000019fa: 	movq	(%rbp), %rdi
    000019fe: 	jmp	.Ltmp4184 # Offset: 6654
    00001a03: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4087:
    00001a08: 	movq	0x90(%rsp), %rdx
    00001a10: 	movq	%r13, %rsi
    00001a13: 	movl	$0x1, %edi
    00001a18: 	xorl	%eax, %eax
    00001a1a: 	callq	__printf_chk@PLT # Offset: 6682
    00001a1f: 	movl	iterations(%rip), %eax
    00001a25: 	jmp	.Ltmp4185 # Offset: 6693
    00001a2a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4173:
    00001a30: 	movq	0x90(%rsp), %rdx
    00001a38: 	leaq	DATAat0x4d004(%rip), %rsi
    00001a3f: 	movl	$0x1, %edi
    00001a44: 	xorl	%eax, %eax
    00001a46: 	callq	__printf_chk@PLT # Offset: 6726
    00001a4b: 	movl	iterations(%rip), %eax
    00001a51: 	jmp	.Ltmp4186 # Offset: 6737
    00001a56: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp4161:
    00001a60: 	movq	0x90(%rsp), %rdx
    00001a68: 	movq	%r13, %rsi
    00001a6b: 	movl	$0x1, %edi
    00001a70: 	xorl	%eax, %eax
    00001a72: 	callq	__printf_chk@PLT # Offset: 6770
    00001a77: 	movl	iterations(%rip), %edx
    00001a7d: 	jmp	.Ltmp4187 # Offset: 6781
    00001a82: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4149:
    00001a88: 	movq	0x90(%rsp), %rdx
    00001a90: 	leaq	DATAat0x4d004(%rip), %rsi
    00001a97: 	movl	$0x1, %edi
    00001a9c: 	xorl	%eax, %eax
    00001a9e: 	callq	__printf_chk@PLT # Offset: 6814
    00001aa3: 	movl	iterations(%rip), %eax
    00001aa9: 	jmp	.Ltmp4188 # Offset: 6825
    00001aae: 	nop # Size: 2
.Ltmp4137:
    00001ab0: 	movq	0x90(%rsp), %rdx
    00001ab8: 	movq	%r13, %rsi
    00001abb: 	movl	$0x1, %edi
    00001ac0: 	xorl	%eax, %eax
    00001ac2: 	callq	__printf_chk@PLT # Offset: 6850
    00001ac7: 	movl	iterations(%rip), %edx
    00001acd: 	jmp	.Ltmp4189 # Offset: 6861
    00001ad2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4100:
    00001ad8: 	movq	0x90(%rsp), %rdx
    00001ae0: 	movq	%r13, %rsi
    00001ae3: 	movl	$0x1, %edi
    00001ae8: 	xorl	%eax, %eax
    00001aea: 	callq	__printf_chk@PLT # Offset: 6890
    00001aef: 	movl	iterations(%rip), %eax
    00001af5: 	jmp	.Ltmp4190 # Offset: 6901
    00001afa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4124:
    00001b00: 	movq	0x90(%rsp), %rdx
    00001b08: 	movq	%r13, %rsi
    00001b0b: 	movl	$0x1, %edi
    00001b10: 	xorl	%eax, %eax
    00001b12: 	callq	__printf_chk@PLT # Offset: 6930
    00001b17: 	movl	iterations(%rip), %eax
    00001b1d: 	jmp	.Ltmp4191 # Offset: 6941
    00001b22: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4112:
    00001b28: 	movq	0x90(%rsp), %rdx
    00001b30: 	leaq	DATAat0x4d004(%rip), %rsi
    00001b37: 	movl	$0x1, %edi
    00001b3c: 	xorl	%eax, %eax
    00001b3e: 	callq	__printf_chk@PLT # Offset: 6974
    00001b43: 	movl	iterations(%rip), %eax
    00001b49: 	jmp	.Ltmp4192 # Offset: 6985
.Ltmp4180:
    00001b4e: 	movq	-0x8(%rdx), %rax
    00001b52: 	addq	$0x200, %rax
    00001b58: 	jmp	.Ltmp4193 # Offset: 7000
.Ltmp4077:
    00001b5d: 	movq	%r14, %rsi
    00001b60: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001b67: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 7015
    00001b6c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001b73: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00001b7a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001b81: 	jne	.Ltmp4194 # Offset: 7041
.Ltmp4082:
    00001b87: 	movq	-0x8(%rdx), %rax
    00001b8b: 	addq	$0x200, %rax
    00001b91: 	jmp	.Ltmp4194 # Offset: 7057
.Ltmp4119:
    00001b96: 	movq	-0x8(%rdx), %rax
    00001b9a: 	addq	$0x200, %rax
    00001ba0: 	jmp	.Ltmp4195 # Offset: 7072
.Ltmp4114:
    00001ba5: 	movq	%r14, %rsi
    00001ba8: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001baf: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 7087
    00001bb4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001bbb: 	jmp	.Ltmp4196 # Offset: 7099
.Ltmp4131:
    00001bc0: 	movq	-0x8(%rdx), %rax
    00001bc4: 	addq	$0x200, %rax
    00001bca: 	jmp	.Ltmp4197 # Offset: 7114
.Ltmp4126:
    00001bcf: 	movq	%r14, %rsi
    00001bd2: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001bd9: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 7129
    00001bde: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001be5: 	jmp	.Ltmp4198 # Offset: 7141
.Ltmp4139:
    00001bea: 	movq	%r14, %rsi
    00001bed: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001bf4: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 7156
    00001bf9: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001c00: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00001c07: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001c0e: 	jne	.Ltmp4199 # Offset: 7182
.Ltmp4144:
    00001c14: 	movq	-0x8(%rdx), %rax
    00001c18: 	addq	$0x200, %rax
    00001c1e: 	jmp	.Ltmp4199 # Offset: 7198
.Ltmp4094:
    00001c23: 	movq	-0x8(%rdx), %rax
    00001c27: 	addq	$0x200, %rax
    00001c2d: 	jmp	.Ltmp4200 # Offset: 7213
.Ltmp4107:
    00001c32: 	movq	-0x8(%rdx), %rax
    00001c36: 	addq	$0x200, %rax
    00001c3c: 	jmp	.Ltmp4201 # Offset: 7228
.Ltmp4102:
    00001c41: 	movq	%r14, %rsi
    00001c44: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001c4b: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 7243
    00001c50: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001c57: 	jmp	.Ltmp4202 # Offset: 7255
.Ltmp4163:
    00001c5c: 	movq	%r14, %rsi
    00001c5f: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001c66: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 7270
    00001c6b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001c72: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00001c79: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001c80: 	jne	.Ltmp4203 # Offset: 7296
.Ltmp4168:
    00001c86: 	movq	-0x8(%rdx), %rax
    00001c8a: 	addq	$0x200, %rax
    00001c90: 	jmp	.Ltmp4203 # Offset: 7312
.Ltmp4156:
    00001c95: 	movq	-0x8(%rdx), %rax
    00001c99: 	addq	$0x200, %rax
    00001c9f: 	jmp	.Ltmp4204 # Offset: 7327
.Ltmp4151:
    00001ca4: 	movq	%r14, %rsi
    00001ca7: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001cae: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 7342
    00001cb3: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001cba: 	jmp	.Ltmp4205 # Offset: 7354
.Ltmp4089:
    00001cbf: 	movq	%r14, %rsi
    00001cc2: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001cc9: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 7369
    00001cce: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001cd5: 	jmp	.Ltmp4206 # Offset: 7381
.Ltmp4175:
    00001cda: 	movq	%r14, %rsi
    00001cdd: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001ce4: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 7396
    00001ce9: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001cf0: 	jmp	.Ltmp4207 # Offset: 7408
.Ltmp4081:
    00001cf5: 	testq	%r12, %r12
    00001cf8: 	je	.Ltmp4184 # Offset: 7416
    00001cfe: 	jmp	.Ltmp4208 # Offset: 7422
    00001d03: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4106:
    00001d08: 	testq	%r12, %r12
    00001d0b: 	je	.Ltmp4209 # Offset: 7435
    00001d11: 	jmp	.Ltmp4210 # Offset: 7441
    00001d16: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp4143:
    00001d20: 	testq	%r12, %r12
    00001d23: 	je	.Ltmp4211 # Offset: 7459
.Ltmp4224:
    00001d29: 	movq	%r12, %rdx
    00001d2c: 	movq	%r13, %rsi
    00001d2f: 	callq	memcpy@PLT # Offset: 7471
    00001d34: 	movq	0x88(%rsp), %r12
    00001d3c: 	movq	(%rbp), %rdi
    00001d40: 	jmp	.Ltmp4211 # Offset: 7488
.Ltmp4179:
    00001d45: 	testq	%r12, %r12
    00001d48: 	je	.Ltmp4212 # Offset: 7496
    00001d4e: 	jmp	.Ltmp4213 # Offset: 7502
    00001d53: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4155:
    00001d58: 	testq	%r12, %r12
    00001d5b: 	je	.Ltmp4214 # Offset: 7515
    00001d61: 	jmp	.Ltmp4215 # Offset: 7521
    00001d66: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp4130:
    00001d70: 	testq	%r12, %r12
    00001d73: 	je	.Ltmp4216 # Offset: 7539
.Ltmp4223:
    00001d79: 	movq	%r12, %rdx
    00001d7c: 	movq	%r13, %rsi
    00001d7f: 	callq	memcpy@PLT # Offset: 7551
    00001d84: 	movq	0x88(%rsp), %r12
    00001d8c: 	movq	(%rbp), %rdi
    00001d90: 	jmp	.Ltmp4216 # Offset: 7568
.Ltmp4167:
    00001d95: 	testq	%r12, %r12
    00001d98: 	je	.Ltmp4217 # Offset: 7576
.Ltmp4222:
    00001d9e: 	movq	%r12, %rdx
    00001da1: 	movq	%r13, %rsi
    00001da4: 	callq	memcpy@PLT # Offset: 7588
    00001da9: 	movq	0x88(%rsp), %r12
    00001db1: 	movq	(%rbp), %rdi
    00001db5: 	jmp	.Ltmp4217 # Offset: 7605
.Ltmp4118:
    00001dba: 	testq	%r12, %r12
    00001dbd: 	je	.Ltmp4218 # Offset: 7613
    00001dc3: 	jmp	.Ltmp4219 # Offset: 7619
    00001dc5: 	nopl	(%rax) # Size: 3
.Ltmp4093:
    00001dc8: 	testq	%r12, %r12
    00001dcb: 	je	.Ltmp4220 # Offset: 7627
    00001dd1: 	jmp	.Ltmp4221 # Offset: 7633
    00001dd6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp4178:
    00001de0: 	leaq	0x88(%rsp), %rsi
    00001de8: 	xorl	%edx, %edx
    00001dea: 	movq	%rbx, %rdi
    00001ded: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7661
    00001df2: 	movq	%rax, (%rbx)
    00001df5: 	movq	%rax, %rdi
    00001df8: 	movq	0x88(%rsp), %rax
    00001e00: 	movq	%rax, 0x10(%rbx)
.Ltmp4213:
    00001e04: 	movq	%r12, %rdx
    00001e07: 	movq	%rbp, %rsi
    00001e0a: 	callq	memcpy@PLT # Offset: 7690
    00001e0f: 	movq	0x88(%rsp), %r12
    00001e17: 	movq	(%rbx), %rdi
    00001e1a: 	jmp	.Ltmp4212 # Offset: 7706
.Ltmp4117:
    00001e1f: 	leaq	0x88(%rsp), %rsi
    00001e27: 	xorl	%edx, %edx
    00001e29: 	movq	%rbp, %rdi
    00001e2c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7724
    00001e31: 	movq	%rax, (%rbp)
    00001e35: 	movq	%rax, %rdi
    00001e38: 	movq	0x88(%rsp), %rax
    00001e40: 	movq	%rax, 0x10(%rbp)
.Ltmp4219:
    00001e44: 	movq	%r12, %rdx
    00001e47: 	movq	%r13, %rsi
    00001e4a: 	callq	memcpy@PLT # Offset: 7754
    00001e4f: 	movq	0x88(%rsp), %r12
    00001e57: 	movq	(%rbp), %rdi
    00001e5b: 	jmp	.Ltmp4218 # Offset: 7771
.Ltmp4154:
    00001e60: 	leaq	0x88(%rsp), %rsi
    00001e68: 	xorl	%edx, %edx
    00001e6a: 	movq	%rbp, %rdi
    00001e6d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7789
    00001e72: 	movq	%rax, (%rbp)
    00001e76: 	movq	%rax, %rdi
    00001e79: 	movq	0x88(%rsp), %rax
    00001e81: 	movq	%rax, 0x10(%rbp)
.Ltmp4215:
    00001e85: 	movq	%r12, %rdx
    00001e88: 	movq	%r13, %rsi
    00001e8b: 	callq	memcpy@PLT # Offset: 7819
    00001e90: 	movq	0x88(%rsp), %r12
    00001e98: 	movq	(%rbp), %rdi
    00001e9c: 	jmp	.Ltmp4214 # Offset: 7836
.Ltmp4166:
    00001ea1: 	leaq	0x88(%rsp), %rsi
    00001ea9: 	xorl	%edx, %edx
    00001eab: 	movq	%rbp, %rdi
    00001eae: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7854
    00001eb3: 	movq	%rax, (%rbp)
    00001eb7: 	movq	%rax, %rdi
    00001eba: 	movq	0x88(%rsp), %rax
    00001ec2: 	movq	%rax, 0x10(%rbp)
    00001ec6: 	jmp	.Ltmp4222 # Offset: 7878
.Ltmp4129:
    00001ecb: 	leaq	0x88(%rsp), %rsi
    00001ed3: 	xorl	%edx, %edx
    00001ed5: 	movq	%rbp, %rdi
    00001ed8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7896
    00001edd: 	movq	%rax, (%rbp)
    00001ee1: 	movq	%rax, %rdi
    00001ee4: 	movq	0x88(%rsp), %rax
    00001eec: 	movq	%rax, 0x10(%rbp)
    00001ef0: 	jmp	.Ltmp4223 # Offset: 7920
.Ltmp4092:
    00001ef5: 	leaq	0x88(%rsp), %rsi
    00001efd: 	xorl	%edx, %edx
    00001eff: 	movq	%rbp, %rdi
    00001f02: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7938
    00001f07: 	movq	%rax, (%rbp)
    00001f0b: 	movq	%rax, %rdi
    00001f0e: 	movq	0x88(%rsp), %rax
    00001f16: 	movq	%rax, 0x10(%rbp)
.Ltmp4221:
    00001f1a: 	movq	%r12, %rdx
    00001f1d: 	movq	%r13, %rsi
    00001f20: 	callq	memcpy@PLT # Offset: 7968
    00001f25: 	movq	0x88(%rsp), %r12
    00001f2d: 	movq	(%rbp), %rdi
    00001f31: 	jmp	.Ltmp4220 # Offset: 7985
.Ltmp4142:
    00001f36: 	leaq	0x88(%rsp), %rsi
    00001f3e: 	xorl	%edx, %edx
    00001f40: 	movq	%rbp, %rdi
    00001f43: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8003
    00001f48: 	movq	%rax, (%rbp)
    00001f4c: 	movq	%rax, %rdi
    00001f4f: 	movq	0x88(%rsp), %rax
    00001f57: 	movq	%rax, 0x10(%rbp)
    00001f5b: 	jmp	.Ltmp4224 # Offset: 8027
.Ltmp4105:
    00001f60: 	leaq	0x88(%rsp), %rsi
    00001f68: 	xorl	%edx, %edx
    00001f6a: 	movq	%rbp, %rdi
    00001f6d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8045
    00001f72: 	movq	%rax, (%rbp)
    00001f76: 	movq	%rax, %rdi
    00001f79: 	movq	0x88(%rsp), %rax
    00001f81: 	movq	%rax, 0x10(%rbp)
.Ltmp4210:
    00001f85: 	movq	%r12, %rdx
    00001f88: 	movq	%r13, %rsi
    00001f8b: 	callq	memcpy@PLT # Offset: 8075
    00001f90: 	movq	0x88(%rsp), %r12
    00001f98: 	movq	(%rbp), %rdi
    00001f9c: 	jmp	.Ltmp4209 # Offset: 8092
.Ltmp4091:
    00001fa1: 	leaq	DATAat0x4d018(%rip), %rdi
    00001fa8: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8104
.Ltmp4104:
    00001fad: 	leaq	DATAat0x4d018(%rip), %rdi
    00001fb4: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8116
.Ltmp4116:
    00001fb9: 	leaq	DATAat0x4d018(%rip), %rdi
    00001fc0: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8128
.Ltmp4128:
    00001fc5: 	leaq	DATAat0x4d018(%rip), %rdi
    00001fcc: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8140
.Ltmp4141:
    00001fd1: 	leaq	DATAat0x4d018(%rip), %rdi
    00001fd8: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8152
.Ltmp4153:
    00001fdd: 	leaq	DATAat0x4d018(%rip), %rdi
    00001fe4: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8164
.Ltmp4165:
    00001fe9: 	leaq	DATAat0x4d018(%rip), %rdi
    00001ff0: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8176
.Ltmp4177:
    00001ff5: 	leaq	DATAat0x4d018(%rip), %rdi
    00001ffc: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8188
.Ltmp4182:
    00002001: 	callq	__stack_chk_fail@PLT # Offset: 8193
.Ltmp4079:
    00002006: 	leaq	DATAat0x4d018(%rip), %rdi
    0000200d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8205
    00002012: 	endbr64
.Ltmp4226:
    00002016: 	movq	%rax, %rbp
    00002019: 	jmp	.Ltmp4225 # Offset: 8217
    0000201b: 	endbr64
    0000201f: 	jmp	.Ltmp4226 # Offset: 8223
    00002021: 	endbr64
    00002025: 	jmp	.Ltmp4226 # Offset: 8229
    00002027: 	endbr64
    0000202b: 	jmp	.Ltmp4226 # Offset: 8235
    0000202d: 	endbr64
    00002031: 	jmp	.Ltmp4226 # Offset: 8241
    00002033: 	endbr64
    00002037: 	movq	%rax, %rbp
    0000203a: 	jmp	.Ltmp4227 # Offset: 8250
    0000203c: 	endbr64
    00002040: 	jmp	.Ltmp4226 # Offset: 8256
    00002042: 	endbr64
    00002046: 	jmp	.Ltmp4226 # Offset: 8262
.Ltmp4227:
    00002048: 	movq	0x90(%rsp), %rdi
    00002050: 	leaq	0xa0(%rsp), %rax
    00002058: 	cmpq	%rax, %rdi
    0000205b: 	je	.Ltmp4228 # Offset: 8283
.Ltmp4229:
    0000205d: 	movq	0xa0(%rsp), %rax
    00002065: 	leaq	0x1(%rax), %rsi
    00002069: 	callq	_ZdlPvm@PLT # Offset: 8297
.Ltmp4228:
    0000206e: 	movq	%rbp, %rdi
    00002071: 	callq	_Unwind_Resume@PLT # Offset: 8305
    00002076: 	endbr64
    0000207a: 	jmp	.Ltmp4226 # Offset: 8314
    0000207c: 	endbr64
    00002080: 	jmp	.Ltmp4226 # Offset: 8320
    00002082: 	endbr64
    00002086: 	jmp	.Ltmp4226 # Offset: 8326
.Ltmp4225:
    00002088: 	movq	0x90(%rsp), %rdi
    00002090: 	cmpq	0x78(%rsp), %rdi
    00002095: 	jne	.Ltmp4229 # Offset: 8341
    00002097: 	jmp	.Ltmp4228 # Offset: 8343
DWARF CFI Instructions:
    <empty>
End of Function "_Z16TestUnrolledTypeIfLi4EEvPT_S0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z11TestOneTypeIfEvd" after disassembly {
  Number      : 186
  State       : disassembled
  Address     : 0x38ff0
  Size        : 0x4a97
  MaxSize     : 0x4aa0
  Offset      : 0x38ff0
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIfEvd
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0185:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0x7000(%rsp), %r11
.Ltmp4230:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp4230 # Offset: 37
    00000027: 	subq	$0xe68, %rsp
    0000002e: 	pxor	%xmm1, %xmm1
    00000032: 	cvtsd2ss	init_value(%rip), %xmm1
    0000003a: 	shufps	$0x0, %xmm1, %xmm1
    0000003e: 	leaq	0x150(%rsp), %r14
    00000046: 	leaq	0x7e50(%rsp), %rbx
    0000004e: 	movq	%fs:0x28, %rax
    00000057: 	movq	%rax, 0x7e58(%rsp)
    0000005f: 	xorl	%eax, %eax
    00000061: 	movq	%r14, %rax
    00000064: 	nopl	(%rax) # Size: 4
.Ltmp4231:
    00000068: 	movaps	%xmm1, (%rax)
    0000006b: 	addq	$0x10, %rax
    0000006f: 	cmpq	%rax, %rbx
    00000072: 	jne	.Ltmp4231 # Offset: 114
    00000074: 	leaq	0x90(%rsp), %r15
    0000007c: 	leaq	DATAat0x4d5bc(%rip), %rsi
    00000083: 	movsd	%xmm0, 0x8(%rsp)
    00000089: 	movq	%r15, %rdi
    0000008c: 	movq	%r15, 0x68(%rsp)
    00000091: 	leaq	0x130(%rsp), %r13
    00000099: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1" # Offset: 153
    0000009e: 	movdqa	_Z7gLabelsB5cxx11+16(%rip), %xmm6
    000000a6: 	leaq	0x70(%rsp), %rsi
    000000ab: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000000b2: 	movaps	%xmm6, 0x70(%rsp)
    000000b7: 	movdqa	_Z7gLabelsB5cxx11+32(%rip), %xmm6
    000000bf: 	movaps	%xmm6, 0x80(%rsp)
    000000c7: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E # Offset: 199
    000000cc: 	pxor	%xmm4, %xmm4
    000000d0: 	movq	%r15, %rsi
    000000d3: 	movq	%r13, %rdi
    000000d6: 	movsd	0x8(%rsp), %xmm0
    000000dc: 	addsd	DATAat0x4d638(%rip), %xmm0
    000000e4: 	leaq	DATAat0x4d1e0(%rip), %rdx
    000000eb: 	cvtsd2ss	%xmm0, %xmm4
    000000ef: 	movss	%xmm4, 0x8(%rsp)
    000000f5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 245
    000000fa: 	callq	clock@PLT # Offset: 250
    000000ff: 	movl	iterations(%rip), %edx
    00000105: 	movq	%rax, start_time(%rip)
    0000010c: 	testl	%edx, %edx
    0000010e: 	jle	.Ltmp4232 # Offset: 270
    00000114: 	pxor	%xmm6, %xmm6
    00000118: 	movsd	DATAat0x4d620(%rip), %xmm7
    00000120: 	xorl	%r12d, %r12d
    00000123: 	movq	DATAat0x4d5e0(%rip), %xmm4
    0000012b: 	movss	%xmm6, 0x2c(%rsp)
    00000131: 	movsd	DATAat0x4d628(%rip), %xmm6
    00000139: 	movss	DATAat0x4d5d0(%rip), %xmm5
    00000141: 	leaq	0x7cf0(%r14), %rbp
    00000148: 	movaps	%xmm5, 0x10(%rsp)
    0000014d: 	leaq	DATAat0x4d004(%rip), %r15
    00000154: 	movsd	%xmm7, 0x20(%rsp)
    0000015a: 	movaps	%xmm4, 0x40(%rsp)
    0000015f: 	movsd	%xmm6, 0x50(%rsp)
    00000165: 	nopl	(%rax) # Size: 3
.Ltmp4236:
    00000168: 	movss	0x150(%rsp), %xmm0
    00000171: 	movq	%r14, %rax
    00000174: 	subss	0x154(%rsp), %xmm0
    0000017d: 	addss	0x2c(%rsp), %xmm0
    00000183: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4233:
    00000188: 	movaps	(%rax), %xmm2
    0000018b: 	movups	0x4(%rax), %xmm7
    0000018f: 	addq	$0x10, %rax
    00000193: 	subps	%xmm7, %xmm2
    00000196: 	addss	%xmm2, %xmm0
    0000019a: 	movaps	%xmm2, %xmm1
    0000019d: 	shufps	$0x55, %xmm2, %xmm1
    000001a1: 	addss	%xmm0, %xmm1
    000001a5: 	movaps	%xmm2, %xmm0
    000001a8: 	unpckhps	%xmm2, %xmm0
    000001ab: 	shufps	$0xff, %xmm2, %xmm2
    000001af: 	addss	%xmm1, %xmm0
    000001b3: 	addss	%xmm2, %xmm0
    000001b7: 	cmpq	%rax, %rbp
    000001ba: 	jne	.Ltmp4233 # Offset: 442
    000001bc: 	movq	0x7e44(%rsp), %xmm2
    000001c5: 	movaps	0x10(%rsp), %xmm5
    000001ca: 	movq	0x7e40(%rsp), %xmm1
    000001d3: 	subps	%xmm2, %xmm1
    000001d6: 	addss	%xmm1, %xmm0
    000001da: 	shufps	$0xe5, %xmm1, %xmm1
    000001de: 	addss	%xmm0, %xmm1
    000001e2: 	movss	0x7e48(%rsp), %xmm0
    000001eb: 	subss	0x7e4c(%rsp), %xmm0
    000001f4: 	addss	%xmm1, %xmm0
    000001f8: 	pxor	%xmm1, %xmm1
    000001fc: 	andps	%xmm0, %xmm5
    000001ff: 	cvtss2sd	%xmm5, %xmm1
    00000203: 	comisd	0x20(%rsp), %xmm1
    00000209: 	jbe	.Ltmp4234 # Offset: 521
    0000020b: 	divss	%xmm0, %xmm0
    0000020f: 	nop # Size: 1
.Ltmp4234:
    00000210: 	movsd	0x50(%rsp), %xmm4
    00000216: 	cvtss2sd	%xmm0, %xmm0
    0000021a: 	andpd	0x40(%rsp), %xmm0
    00000220: 	comisd	%xmm0, %xmm4
    00000224: 	jbe	.Ltmp4235 # Offset: 548
.Ltmp4486:
    0000022a: 	addl	$0x1, %r12d
    0000022e: 	cmpl	%edx, %r12d
    00000231: 	jl	.Ltmp4236 # Offset: 561
.Ltmp4232:
    00000237: 	movq	%r13, %rsi
    0000023a: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000241: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 577
    00000246: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000024d: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000254: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000025b: 	je	.Ltmp4237 # Offset: 603
.Ltmp4487:
    00000261: 	movq	-0x20(%rax), %rbp
    00000265: 	callq	clock@PLT # Offset: 613
    0000026a: 	pxor	%xmm0, %xmm0
    0000026e: 	movq	%rax, end_time(%rip)
    00000275: 	movq	%rbp, %rdi
    00000278: 	subq	start_time(%rip), %rax
    0000027f: 	cvtsi2sd	%rax, %xmm0
    00000284: 	divsd	DATAat0x4d640(%rip), %xmm0
    0000028c: 	callq	_Z13record_resultdPKc # Offset: 652
    00000291: 	movq	0x130(%rsp), %rdi
    00000299: 	leaq	0x140(%rsp), %rax
    000002a1: 	movq	%rax, 0x60(%rsp)
    000002a6: 	cmpq	%rax, %rdi
    000002a9: 	je	.Ltmp4238 # Offset: 681
    000002ab: 	movq	0x140(%rsp), %rax
    000002b3: 	leaq	0x1(%rax), %rsi
    000002b7: 	callq	_ZdlPvm@PLT # Offset: 695
.Ltmp4238:
    000002bc: 	movq	0x68(%rsp), %rsi
    000002c1: 	leaq	DATAat0x4d1ed(%rip), %rdx
    000002c8: 	movq	%r13, %rdi
    000002cb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 715
    000002d0: 	callq	clock@PLT # Offset: 720
    000002d5: 	movq	%rax, start_time(%rip)
    000002dc: 	movl	iterations(%rip), %eax
    000002e2: 	testl	%eax, %eax
    000002e4: 	jle	.Ltmp4239 # Offset: 740
    000002ea: 	movsd	DATAat0x4d620(%rip), %xmm4
    000002f2: 	pxor	%xmm5, %xmm5
    000002f6: 	xorl	%r12d, %r12d
    000002f9: 	movq	DATAat0x4d5e0(%rip), %xmm6
    00000301: 	movss	%xmm5, 0x2c(%rsp)
    00000307: 	movsd	DATAat0x4d628(%rip), %xmm5
    0000030f: 	movss	DATAat0x4d5d0(%rip), %xmm7
    00000317: 	leaq	0x7cf0(%r14), %rbp
    0000031e: 	movsd	%xmm4, 0x20(%rsp)
    00000324: 	movss	0x8(%rsp), %xmm4
    0000032a: 	leaq	DATAat0x4d004(%rip), %r15
    00000331: 	movaps	%xmm6, 0x40(%rsp)
    00000336: 	movaps	%xmm4, %xmm6
    00000339: 	movaps	%xmm7, 0x10(%rsp)
    0000033e: 	shufps	$0x0, %xmm6, %xmm6
    00000342: 	movaps	%xmm6, 0x30(%rsp)
    00000347: 	movaps	%xmm4, %xmm6
    0000034a: 	shufps	$0xe0, %xmm6, %xmm6
    0000034e: 	movsd	%xmm5, 0x50(%rsp)
    00000354: 	movlps	%xmm6, 0x58(%rsp)
    00000359: 	nopl	(%rax) # Size: 7
.Ltmp4243:
    00000360: 	movss	0x154(%rsp), %xmm2
    00000369: 	movq	%r14, %rdx
    0000036c: 	movss	0x150(%rsp), %xmm0
    00000375: 	movaps	%xmm2, %xmm1
    00000378: 	addss	%xmm0, %xmm1
    0000037c: 	addss	0x8(%rsp), %xmm1
    00000382: 	addss	%xmm1, %xmm1
    00000386: 	addss	%xmm1, %xmm0
    0000038a: 	addss	%xmm1, %xmm2
    0000038e: 	subss	%xmm2, %xmm0
    00000392: 	addss	0x2c(%rsp), %xmm0
    00000398: 	nopl	(%rax,%rax) # Size: 8
.Ltmp4240:
    000003a0: 	movups	0x4(%rdx), %xmm2
    000003a4: 	addps	(%rdx), %xmm2
    000003a7: 	addq	$0x10, %rdx
    000003ab: 	addps	0x30(%rsp), %xmm2
    000003b0: 	movaps	-0x10(%rdx), %xmm1
    000003b4: 	movups	-0xc(%rdx), %xmm5
    000003b8: 	addps	%xmm2, %xmm2
    000003bb: 	addps	%xmm2, %xmm1
    000003be: 	addps	%xmm5, %xmm2
    000003c1: 	subps	%xmm2, %xmm1
    000003c4: 	addss	%xmm1, %xmm0
    000003c8: 	movaps	%xmm1, %xmm2
    000003cb: 	shufps	$0x55, %xmm1, %xmm2
    000003cf: 	addss	%xmm0, %xmm2
    000003d3: 	movaps	%xmm1, %xmm0
    000003d6: 	unpckhps	%xmm1, %xmm0
    000003d9: 	shufps	$0xff, %xmm1, %xmm1
    000003dd: 	addss	%xmm2, %xmm0
    000003e1: 	addss	%xmm1, %xmm0
    000003e5: 	cmpq	%rdx, %rbp
    000003e8: 	jne	.Ltmp4240 # Offset: 1000
    000003ea: 	movq	0x7e40(%rsp), %xmm1
    000003f3: 	movq	0x58(%rsp), %xmm7
    000003f9: 	movq	0x7e44(%rsp), %xmm3
    00000402: 	movaps	0x10(%rsp), %xmm6
    00000407: 	movaps	%xmm1, %xmm2
    0000040a: 	addps	%xmm3, %xmm2
    0000040d: 	addps	%xmm7, %xmm2
    00000410: 	addps	%xmm2, %xmm2
    00000413: 	addps	%xmm2, %xmm1
    00000416: 	addps	%xmm3, %xmm2
    00000419: 	movss	0x7e4c(%rsp), %xmm3
    00000422: 	subps	%xmm2, %xmm1
    00000425: 	movss	0x7e48(%rsp), %xmm2
    0000042e: 	addss	%xmm1, %xmm0
    00000432: 	shufps	$0xe5, %xmm1, %xmm1
    00000436: 	addss	%xmm0, %xmm1
    0000043a: 	movaps	%xmm2, %xmm0
    0000043d: 	addss	%xmm3, %xmm0
    00000441: 	addss	0x8(%rsp), %xmm0
    00000447: 	addss	%xmm0, %xmm0
    0000044b: 	addss	%xmm0, %xmm2
    0000044f: 	addss	%xmm3, %xmm0
    00000453: 	subss	%xmm0, %xmm2
    00000457: 	pxor	%xmm0, %xmm0
    0000045b: 	addss	%xmm1, %xmm2
    0000045f: 	andps	%xmm2, %xmm6
    00000462: 	cvtss2sd	%xmm6, %xmm0
    00000466: 	comisd	0x20(%rsp), %xmm0
    0000046c: 	jbe	.Ltmp4241 # Offset: 1132
    0000046e: 	divss	%xmm2, %xmm2
    00000472: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4241:
    00000478: 	movsd	0x50(%rsp), %xmm6
    0000047e: 	cvtss2sd	%xmm2, %xmm2
    00000482: 	andpd	0x40(%rsp), %xmm2
    00000488: 	comisd	%xmm2, %xmm6
    0000048c: 	jbe	.Ltmp4242 # Offset: 1164
.Ltmp4485:
    00000492: 	addl	$0x1, %r12d
    00000496: 	cmpl	%eax, %r12d
    00000499: 	jl	.Ltmp4243 # Offset: 1177
.Ltmp4239:
    0000049f: 	movq	%r13, %rsi
    000004a2: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000004a9: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 1193
    000004ae: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000004b5: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000004bc: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000004c3: 	je	.Ltmp4244 # Offset: 1219
.Ltmp4514:
    000004c9: 	movq	-0x20(%rax), %rbp
    000004cd: 	callq	clock@PLT # Offset: 1229
    000004d2: 	pxor	%xmm0, %xmm0
    000004d6: 	movq	%rax, end_time(%rip)
    000004dd: 	movq	%rbp, %rdi
    000004e0: 	subq	start_time(%rip), %rax
    000004e7: 	cvtsi2sd	%rax, %xmm0
    000004ec: 	divsd	DATAat0x4d640(%rip), %xmm0
    000004f4: 	callq	_Z13record_resultdPKc # Offset: 1268
    000004f9: 	movq	0x130(%rsp), %rdi
    00000501: 	cmpq	0x60(%rsp), %rdi
    00000506: 	je	.Ltmp4245 # Offset: 1286
    00000508: 	movq	0x140(%rsp), %rax
    00000510: 	leaq	0x1(%rax), %rsi
    00000514: 	callq	_ZdlPvm@PLT # Offset: 1300
.Ltmp4245:
    00000519: 	movq	0x68(%rsp), %rsi
    0000051e: 	leaq	DATAat0x4d1ff(%rip), %rdx
    00000525: 	movq	%r13, %rdi
    00000528: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1320
    0000052d: 	callq	clock@PLT # Offset: 1325
    00000532: 	movl	iterations(%rip), %edx
    00000538: 	movq	%rax, start_time(%rip)
    0000053f: 	testl	%edx, %edx
    00000541: 	jle	.Ltmp4246 # Offset: 1345
    00000547: 	pxor	%xmm7, %xmm7
    0000054b: 	movsd	DATAat0x4d620(%rip), %xmm6
    00000553: 	xorl	%ebp, %ebp
    00000555: 	movq	DATAat0x4d5e0(%rip), %xmm5
    0000055d: 	movss	%xmm7, 0x2c(%rsp)
    00000563: 	movsd	DATAat0x4d628(%rip), %xmm7
    0000056b: 	movss	DATAat0x4d5d0(%rip), %xmm4
    00000573: 	leaq	0x154(%rsp), %r12
    0000057b: 	movaps	%xmm4, 0x10(%rsp)
    00000580: 	leaq	DATAat0x4d004(%rip), %r15
    00000587: 	movsd	%xmm6, 0x20(%rsp)
    0000058d: 	movaps	%xmm5, 0x40(%rsp)
    00000592: 	movsd	%xmm7, 0x50(%rsp)
    00000598: 	nopl	(%rax,%rax) # Size: 8
.Ltmp4250:
    000005a0: 	movss	0x150(%rsp), %xmm3
    000005a9: 	movq	%r12, %rax
    000005ac: 	movss	0x154(%rsp), %xmm0
    000005b5: 	movaps	%xmm3, %xmm2
    000005b8: 	movaps	%xmm3, %xmm1
    000005bb: 	addss	%xmm0, %xmm2
    000005bf: 	addss	0x8(%rsp), %xmm2
    000005c5: 	addss	%xmm2, %xmm1
    000005c9: 	addss	%xmm2, %xmm0
    000005cd: 	addss	%xmm2, %xmm1
    000005d1: 	addss	%xmm2, %xmm0
    000005d5: 	addss	0x2c(%rsp), %xmm1
    000005db: 	subss	%xmm0, %xmm1
    000005df: 	nop # Size: 1
.Ltmp4247:
    000005e0: 	movaps	%xmm3, %xmm0
    000005e3: 	movss	(%rax), %xmm3
    000005e7: 	addq	$0x4, %rax
    000005eb: 	movaps	%xmm3, %xmm2
    000005ee: 	addss	%xmm0, %xmm2
    000005f2: 	addss	0x8(%rsp), %xmm2
    000005f8: 	addss	%xmm2, %xmm0
    000005fc: 	addss	%xmm2, %xmm0
    00000600: 	addss	%xmm0, %xmm1
    00000604: 	movaps	%xmm3, %xmm0
    00000607: 	addss	%xmm2, %xmm0
    0000060b: 	addss	%xmm2, %xmm0
    0000060f: 	subss	%xmm0, %xmm1
    00000613: 	cmpq	%rax, %rbx
    00000616: 	jne	.Ltmp4247 # Offset: 1558
    00000618: 	movaps	0x10(%rsp), %xmm4
    0000061d: 	pxor	%xmm0, %xmm0
    00000621: 	andps	%xmm1, %xmm4
    00000624: 	cvtss2sd	%xmm4, %xmm0
    00000628: 	comisd	0x20(%rsp), %xmm0
    0000062e: 	jbe	.Ltmp4248 # Offset: 1582
    00000630: 	divss	%xmm1, %xmm1
.Ltmp4248:
    00000634: 	movsd	0x50(%rsp), %xmm7
    0000063a: 	cvtss2sd	%xmm1, %xmm1
    0000063e: 	andpd	0x40(%rsp), %xmm1
    00000644: 	comisd	%xmm1, %xmm7
    00000648: 	jbe	.Ltmp4249 # Offset: 1608
.Ltmp4484:
    0000064e: 	addl	$0x1, %ebp
    00000651: 	cmpl	%edx, %ebp
    00000653: 	jl	.Ltmp4250 # Offset: 1619
.Ltmp4246:
    00000659: 	movq	%r13, %rsi
    0000065c: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000663: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 1635
    00000668: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000066f: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000676: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000067d: 	je	.Ltmp4251 # Offset: 1661
.Ltmp4513:
    00000683: 	movq	-0x20(%rax), %rbp
    00000687: 	callq	clock@PLT # Offset: 1671
    0000068c: 	pxor	%xmm0, %xmm0
    00000690: 	movq	%rax, end_time(%rip)
    00000697: 	movq	%rbp, %rdi
    0000069a: 	subq	start_time(%rip), %rax
    000006a1: 	cvtsi2sd	%rax, %xmm0
    000006a6: 	divsd	DATAat0x4d640(%rip), %xmm0
    000006ae: 	callq	_Z13record_resultdPKc # Offset: 1710
    000006b3: 	movq	0x130(%rsp), %rdi
    000006bb: 	cmpq	0x60(%rsp), %rdi
    000006c0: 	je	.Ltmp4252 # Offset: 1728
    000006c2: 	movq	0x140(%rsp), %rax
    000006ca: 	leaq	0x1(%rax), %rsi
    000006ce: 	callq	_ZdlPvm@PLT # Offset: 1742
.Ltmp4252:
    000006d3: 	movq	0x68(%rsp), %rsi
    000006d8: 	leaq	DATAat0x4d20f(%rip), %rdx
    000006df: 	movq	%r13, %rdi
    000006e2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1762
    000006e7: 	callq	clock@PLT # Offset: 1767
    000006ec: 	movl	iterations(%rip), %edx
    000006f2: 	movq	%rax, start_time(%rip)
    000006f9: 	testl	%edx, %edx
    000006fb: 	jle	.Ltmp4253 # Offset: 1787
    00000701: 	pxor	%xmm4, %xmm4
    00000705: 	movsd	DATAat0x4d620(%rip), %xmm5
    0000070d: 	xorl	%ebp, %ebp
    0000070f: 	movq	DATAat0x4d5e0(%rip), %xmm7
    00000717: 	movss	%xmm4, 0x2c(%rsp)
    0000071d: 	movsd	DATAat0x4d628(%rip), %xmm4
    00000725: 	movss	DATAat0x4d5d0(%rip), %xmm6
    0000072d: 	leaq	0x154(%rsp), %r12
    00000735: 	movaps	%xmm6, 0x10(%rsp)
    0000073a: 	leaq	DATAat0x4d004(%rip), %r15
    00000741: 	movsd	%xmm5, 0x20(%rsp)
    00000747: 	movaps	%xmm7, 0x40(%rsp)
    0000074c: 	movsd	%xmm4, 0x50(%rsp)
    00000752: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4257:
    00000758: 	movss	0x150(%rsp), %xmm3
    00000761: 	movq	%r12, %rax
    00000764: 	movss	0x154(%rsp), %xmm0
    0000076d: 	movaps	%xmm3, %xmm2
    00000770: 	movaps	%xmm3, %xmm1
    00000773: 	addss	%xmm0, %xmm2
    00000777: 	addss	0x8(%rsp), %xmm2
    0000077d: 	addss	%xmm2, %xmm1
    00000781: 	addss	%xmm2, %xmm0
    00000785: 	addss	%xmm2, %xmm1
    00000789: 	addss	%xmm2, %xmm0
    0000078d: 	addss	0x2c(%rsp), %xmm1
    00000793: 	subss	%xmm0, %xmm1
    00000797: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4254:
    000007a0: 	movaps	%xmm3, %xmm0
    000007a3: 	movss	(%rax), %xmm3
    000007a7: 	addq	$0x4, %rax
    000007ab: 	movaps	%xmm3, %xmm2
    000007ae: 	addss	%xmm0, %xmm2
    000007b2: 	addss	0x8(%rsp), %xmm2
    000007b8: 	addss	%xmm2, %xmm0
    000007bc: 	addss	%xmm2, %xmm0
    000007c0: 	addss	%xmm0, %xmm1
    000007c4: 	movaps	%xmm3, %xmm0
    000007c7: 	addss	%xmm2, %xmm0
    000007cb: 	addss	%xmm2, %xmm0
    000007cf: 	subss	%xmm0, %xmm1
    000007d3: 	cmpq	%rax, %rbx
    000007d6: 	jne	.Ltmp4254 # Offset: 2006
    000007d8: 	movaps	0x10(%rsp), %xmm4
    000007dd: 	pxor	%xmm0, %xmm0
    000007e1: 	andps	%xmm1, %xmm4
    000007e4: 	cvtss2sd	%xmm4, %xmm0
    000007e8: 	comisd	0x20(%rsp), %xmm0
    000007ee: 	jbe	.Ltmp4255 # Offset: 2030
    000007f0: 	divss	%xmm1, %xmm1
.Ltmp4255:
    000007f4: 	movsd	0x50(%rsp), %xmm4
    000007fa: 	cvtss2sd	%xmm1, %xmm1
    000007fe: 	andpd	0x40(%rsp), %xmm1
    00000804: 	comisd	%xmm1, %xmm4
    00000808: 	jbe	.Ltmp4256 # Offset: 2056
.Ltmp4483:
    0000080e: 	addl	$0x1, %ebp
    00000811: 	cmpl	%edx, %ebp
    00000813: 	jl	.Ltmp4257 # Offset: 2067
.Ltmp4253:
    00000819: 	movq	%r13, %rsi
    0000081c: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000823: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 2083
    00000828: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000082f: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000836: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000083d: 	je	.Ltmp4258 # Offset: 2109
.Ltmp4512:
    00000843: 	movq	-0x20(%rax), %rbp
    00000847: 	callq	clock@PLT # Offset: 2119
    0000084c: 	pxor	%xmm0, %xmm0
    00000850: 	movq	%rax, end_time(%rip)
    00000857: 	movq	%rbp, %rdi
    0000085a: 	subq	start_time(%rip), %rax
    00000861: 	cvtsi2sd	%rax, %xmm0
    00000866: 	divsd	DATAat0x4d640(%rip), %xmm0
    0000086e: 	callq	_Z13record_resultdPKc # Offset: 2158
    00000873: 	movq	0x130(%rsp), %rdi
    0000087b: 	cmpq	0x60(%rsp), %rdi
    00000880: 	je	.Ltmp4259 # Offset: 2176
    00000882: 	movq	0x140(%rsp), %rax
    0000088a: 	leaq	0x1(%rax), %rsi
    0000088e: 	callq	_ZdlPvm@PLT # Offset: 2190
.Ltmp4259:
    00000893: 	movq	0x68(%rsp), %rsi
    00000898: 	leaq	DATAat0x4d227(%rip), %rdx
    0000089f: 	movq	%r13, %rdi
    000008a2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2210
    000008a7: 	callq	clock@PLT # Offset: 2215
    000008ac: 	movl	iterations(%rip), %ecx
    000008b2: 	movq	%rax, start_time(%rip)
    000008b9: 	testl	%ecx, %ecx
    000008bb: 	jle	.Ltmp4260 # Offset: 2235
    000008c1: 	pxor	%xmm6, %xmm6
    000008c5: 	xorl	%ebp, %ebp
    000008c7: 	leaq	0x154(%rsp), %r12
    000008cf: 	movss	%xmm6, 0x2c(%rsp)
    000008d5: 	nopl	(%rax) # Size: 3
.Ltmp4262:
    000008d8: 	movss	0x150(%rsp), %xmm3
    000008e1: 	movq	%r12, %rax
    000008e4: 	movss	0x154(%rsp), %xmm1
    000008ed: 	movaps	%xmm3, %xmm2
    000008f0: 	movaps	%xmm3, %xmm0
    000008f3: 	addss	%xmm1, %xmm2
    000008f7: 	addss	0x8(%rsp), %xmm2
    000008fd: 	addss	%xmm2, %xmm0
    00000901: 	addss	%xmm2, %xmm1
    00000905: 	addss	%xmm2, %xmm0
    00000909: 	addss	%xmm2, %xmm1
    0000090d: 	addss	0x2c(%rsp), %xmm0
    00000913: 	subss	%xmm1, %xmm0
    00000917: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4261:
    00000920: 	movaps	%xmm3, %xmm1
    00000923: 	movss	(%rax), %xmm3
    00000927: 	addq	$0x4, %rax
    0000092b: 	movaps	%xmm1, %xmm2
    0000092e: 	addss	%xmm3, %xmm2
    00000932: 	addss	0x8(%rsp), %xmm2
    00000938: 	addss	%xmm2, %xmm1
    0000093c: 	addss	%xmm2, %xmm1
    00000940: 	addss	%xmm1, %xmm0
    00000944: 	movaps	%xmm3, %xmm1
    00000947: 	addss	%xmm2, %xmm1
    0000094b: 	addss	%xmm2, %xmm1
    0000094f: 	subss	%xmm1, %xmm0
    00000953: 	cmpq	%rax, %rbx
    00000956: 	jne	.Ltmp4261 # Offset: 2390
    00000958: 	movq	%r13, %rdi
    0000095b: 	callq	"_Z30check_shifted_variable_sum_CSEIf14custom_cse_addIfEEvT_S2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2395
    00000960: 	addl	$0x1, %ebp
    00000963: 	cmpl	iterations(%rip), %ebp
    00000969: 	jl	.Ltmp4262 # Offset: 2409
.Ltmp4260:
    0000096f: 	movq	%r13, %rsi
    00000972: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000979: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 2425
    0000097e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000985: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000098c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000993: 	je	.Ltmp4263 # Offset: 2451
.Ltmp4511:
    00000999: 	movq	-0x20(%rax), %rbp
    0000099d: 	callq	clock@PLT # Offset: 2461
    000009a2: 	pxor	%xmm0, %xmm0
    000009a6: 	movq	%rax, end_time(%rip)
    000009ad: 	movq	%rbp, %rdi
    000009b0: 	subq	start_time(%rip), %rax
    000009b7: 	cvtsi2sd	%rax, %xmm0
    000009bc: 	divsd	DATAat0x4d640(%rip), %xmm0
    000009c4: 	callq	_Z13record_resultdPKc # Offset: 2500
    000009c9: 	movq	0x130(%rsp), %rdi
    000009d1: 	cmpq	0x60(%rsp), %rdi
    000009d6: 	je	.Ltmp4264 # Offset: 2518
    000009d8: 	movq	0x140(%rsp), %rax
    000009e0: 	leaq	0x1(%rax), %rsi
    000009e4: 	callq	_ZdlPvm@PLT # Offset: 2532
.Ltmp4264:
    000009e9: 	movq	0x68(%rsp), %rsi
    000009ee: 	leaq	DATAat0x4d230(%rip), %rdx
    000009f5: 	movq	%r13, %rdi
    000009f8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2552
    000009fd: 	callq	clock@PLT # Offset: 2557
    00000a02: 	movq	%rax, start_time(%rip)
    00000a09: 	movl	iterations(%rip), %eax
    00000a0f: 	testl	%eax, %eax
    00000a11: 	jle	.Ltmp4265 # Offset: 2577
    00000a17: 	pxor	%xmm5, %xmm5
    00000a1b: 	movss	DATAat0x4d5d0(%rip), %xmm7
    00000a23: 	xorl	%r12d, %r12d
    00000a26: 	movq	DATAat0x4d5e0(%rip), %xmm6
    00000a2e: 	movss	%xmm5, 0x2c(%rsp)
    00000a34: 	movsd	DATAat0x4d628(%rip), %xmm5
    00000a3c: 	movsd	DATAat0x4d620(%rip), %xmm4
    00000a44: 	leaq	0x7cf0(%r14), %rbp
    00000a4b: 	movaps	%xmm7, 0x10(%rsp)
    00000a50: 	movss	0x8(%rsp), %xmm7
    00000a56: 	leaq	DATAat0x4d004(%rip), %r15
    00000a5d: 	movaps	%xmm6, 0x40(%rsp)
    00000a62: 	movsd	%xmm5, 0x50(%rsp)
    00000a68: 	movaps	%xmm7, %xmm6
    00000a6b: 	movaps	%xmm7, %xmm5
    00000a6e: 	shufps	$0x0, %xmm6, %xmm6
    00000a72: 	shufps	$0xe0, %xmm5, %xmm5
    00000a76: 	movsd	%xmm4, 0x20(%rsp)
    00000a7c: 	movaps	%xmm6, 0x30(%rsp)
    00000a81: 	movlps	%xmm5, 0x58(%rsp)
    00000a86: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp4269:
    00000a90: 	movss	0x150(%rsp), %xmm1
    00000a99: 	movss	0x2c(%rsp), %xmm3
    00000a9f: 	movq	%r14, %rdx
    00000aa2: 	movss	0x154(%rsp), %xmm2
    00000aab: 	movaps	%xmm1, %xmm0
    00000aae: 	subss	%xmm2, %xmm0
    00000ab2: 	addss	0x8(%rsp), %xmm0
    00000ab8: 	addss	%xmm0, %xmm0
    00000abc: 	addss	%xmm0, %xmm1
    00000ac0: 	addss	%xmm0, %xmm2
    00000ac4: 	subss	%xmm2, %xmm1
    00000ac8: 	addss	%xmm1, %xmm3
    00000acc: 	nopl	(%rax) # Size: 4
.Ltmp4266:
    00000ad0: 	movaps	(%rdx), %xmm0
    00000ad3: 	movups	0x4(%rdx), %xmm7
    00000ad7: 	addq	$0x10, %rdx
    00000adb: 	movaps	%xmm0, %xmm1
    00000ade: 	subps	%xmm7, %xmm1
    00000ae1: 	addps	0x30(%rsp), %xmm1
    00000ae6: 	addps	%xmm1, %xmm1
    00000ae9: 	addps	%xmm1, %xmm0
    00000aec: 	addps	%xmm7, %xmm1
    00000aef: 	subps	%xmm1, %xmm0
    00000af2: 	movaps	%xmm0, %xmm1
    00000af5: 	movaps	%xmm0, %xmm2
    00000af8: 	addss	%xmm3, %xmm1
    00000afc: 	shufps	$0x55, %xmm0, %xmm2
    00000b00: 	addss	%xmm1, %xmm2
    00000b04: 	movaps	%xmm0, %xmm1
    00000b07: 	unpckhps	%xmm0, %xmm1
    00000b0a: 	shufps	$0xff, %xmm0, %xmm0
    00000b0e: 	addss	%xmm2, %xmm1
    00000b12: 	movaps	%xmm1, %xmm3
    00000b15: 	addss	%xmm0, %xmm3
    00000b19: 	cmpq	%rdx, %rbp
    00000b1c: 	jne	.Ltmp4266 # Offset: 2844
    00000b1e: 	movq	0x7e40(%rsp), %xmm0
    00000b27: 	movq	0x58(%rsp), %xmm7
    00000b2d: 	movq	0x7e44(%rsp), %xmm2
    00000b36: 	movaps	%xmm0, %xmm1
    00000b39: 	subps	%xmm2, %xmm1
    00000b3c: 	addps	%xmm7, %xmm1
    00000b3f: 	movaps	0x10(%rsp), %xmm7
    00000b44: 	addps	%xmm1, %xmm1
    00000b47: 	addps	%xmm1, %xmm0
    00000b4a: 	addps	%xmm2, %xmm1
    00000b4d: 	movss	0x7e48(%rsp), %xmm2
    00000b56: 	subps	%xmm1, %xmm0
    00000b59: 	movaps	%xmm0, %xmm1
    00000b5c: 	shufps	$0xe5, %xmm0, %xmm0
    00000b60: 	addss	%xmm3, %xmm1
    00000b64: 	movss	0x7e4c(%rsp), %xmm3
    00000b6d: 	addss	%xmm1, %xmm0
    00000b71: 	movaps	%xmm2, %xmm1
    00000b74: 	subss	%xmm3, %xmm1
    00000b78: 	addss	0x8(%rsp), %xmm1
    00000b7e: 	addss	%xmm1, %xmm1
    00000b82: 	addss	%xmm1, %xmm2
    00000b86: 	addss	%xmm3, %xmm1
    00000b8a: 	subss	%xmm1, %xmm2
    00000b8e: 	addss	%xmm0, %xmm2
    00000b92: 	pxor	%xmm0, %xmm0
    00000b96: 	andps	%xmm2, %xmm7
    00000b99: 	cvtss2sd	%xmm7, %xmm0
    00000b9d: 	comisd	0x20(%rsp), %xmm0
    00000ba3: 	jbe	.Ltmp4267 # Offset: 2979
    00000ba5: 	divss	%xmm2, %xmm2
    00000ba9: 	nopl	(%rax) # Size: 7
.Ltmp4267:
    00000bb0: 	movsd	0x50(%rsp), %xmm6
    00000bb6: 	cvtss2sd	%xmm2, %xmm2
    00000bba: 	andpd	0x40(%rsp), %xmm2
    00000bc0: 	comisd	%xmm2, %xmm6
    00000bc4: 	jbe	.Ltmp4268 # Offset: 3012
.Ltmp4482:
    00000bca: 	addl	$0x1, %r12d
    00000bce: 	cmpl	%eax, %r12d
    00000bd1: 	jl	.Ltmp4269 # Offset: 3025
.Ltmp4265:
    00000bd7: 	movq	%r13, %rsi
    00000bda: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000be1: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 3041
    00000be6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000bed: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000bf4: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000bfb: 	je	.Ltmp4270 # Offset: 3067
.Ltmp4510:
    00000c01: 	movq	-0x20(%rax), %rbp
    00000c05: 	callq	clock@PLT # Offset: 3077
    00000c0a: 	pxor	%xmm0, %xmm0
    00000c0e: 	movq	%rax, end_time(%rip)
    00000c15: 	movq	%rbp, %rdi
    00000c18: 	subq	start_time(%rip), %rax
    00000c1f: 	cvtsi2sd	%rax, %xmm0
    00000c24: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000c2c: 	callq	_Z13record_resultdPKc # Offset: 3116
    00000c31: 	movq	0x130(%rsp), %rdi
    00000c39: 	cmpq	0x60(%rsp), %rdi
    00000c3e: 	je	.Ltmp4271 # Offset: 3134
    00000c40: 	movq	0x140(%rsp), %rax
    00000c48: 	leaq	0x1(%rax), %rsi
    00000c4c: 	callq	_ZdlPvm@PLT # Offset: 3148
.Ltmp4271:
    00000c51: 	movq	0x68(%rsp), %rsi
    00000c56: 	leaq	DATAat0x4d247(%rip), %rdx
    00000c5d: 	movq	%r13, %rdi
    00000c60: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3168
    00000c65: 	callq	clock@PLT # Offset: 3173
    00000c6a: 	movq	%rax, start_time(%rip)
    00000c71: 	movl	iterations(%rip), %eax
    00000c77: 	testl	%eax, %eax
    00000c79: 	jle	.Ltmp4272 # Offset: 3193
    00000c7f: 	pxor	%xmm7, %xmm7
    00000c83: 	movsd	DATAat0x4d620(%rip), %xmm6
    00000c8b: 	xorl	%ebp, %ebp
    00000c8d: 	movq	DATAat0x4d5e0(%rip), %xmm5
    00000c95: 	movss	%xmm7, 0x2c(%rsp)
    00000c9b: 	movsd	DATAat0x4d628(%rip), %xmm7
    00000ca3: 	movss	DATAat0x4d5d0(%rip), %xmm4
    00000cab: 	leaq	0x154(%rsp), %r12
    00000cb3: 	movaps	%xmm4, 0x10(%rsp)
    00000cb8: 	leaq	DATAat0x4d004(%rip), %r15
    00000cbf: 	movsd	%xmm6, 0x20(%rsp)
    00000cc5: 	movaps	%xmm5, 0x40(%rsp)
    00000cca: 	movsd	%xmm7, 0x50(%rsp)
.Ltmp4276:
    00000cd0: 	movss	0x150(%rsp), %xmm3
    00000cd9: 	movq	%r12, %rdx
    00000cdc: 	movss	0x154(%rsp), %xmm0
    00000ce5: 	movaps	%xmm3, %xmm2
    00000ce8: 	movaps	%xmm3, %xmm1
    00000ceb: 	subss	%xmm0, %xmm2
    00000cef: 	addss	0x8(%rsp), %xmm2
    00000cf5: 	addss	%xmm2, %xmm1
    00000cf9: 	addss	%xmm2, %xmm0
    00000cfd: 	addss	%xmm2, %xmm1
    00000d01: 	addss	%xmm2, %xmm0
    00000d05: 	addss	0x2c(%rsp), %xmm1
    00000d0b: 	subss	%xmm0, %xmm1
    00000d0f: 	nop # Size: 1
.Ltmp4273:
    00000d10: 	movaps	%xmm3, %xmm0
    00000d13: 	movss	(%rdx), %xmm3
    00000d17: 	addq	$0x4, %rdx
    00000d1b: 	movaps	%xmm0, %xmm2
    00000d1e: 	subss	%xmm3, %xmm2
    00000d22: 	addss	0x8(%rsp), %xmm2
    00000d28: 	addss	%xmm2, %xmm0
    00000d2c: 	addss	%xmm2, %xmm0
    00000d30: 	addss	%xmm0, %xmm1
    00000d34: 	movaps	%xmm3, %xmm0
    00000d37: 	addss	%xmm2, %xmm0
    00000d3b: 	addss	%xmm2, %xmm0
    00000d3f: 	subss	%xmm0, %xmm1
    00000d43: 	cmpq	%rdx, %rbx
    00000d46: 	jne	.Ltmp4273 # Offset: 3398
    00000d48: 	movaps	0x10(%rsp), %xmm4
    00000d4d: 	pxor	%xmm0, %xmm0
    00000d51: 	andps	%xmm1, %xmm4
    00000d54: 	cvtss2sd	%xmm4, %xmm0
    00000d58: 	comisd	0x20(%rsp), %xmm0
    00000d5e: 	jbe	.Ltmp4274 # Offset: 3422
    00000d60: 	divss	%xmm1, %xmm1
.Ltmp4274:
    00000d64: 	movsd	0x50(%rsp), %xmm7
    00000d6a: 	cvtss2sd	%xmm1, %xmm1
    00000d6e: 	andpd	0x40(%rsp), %xmm1
    00000d74: 	comisd	%xmm1, %xmm7
    00000d78: 	jbe	.Ltmp4275 # Offset: 3448
.Ltmp4481:
    00000d7e: 	addl	$0x1, %ebp
    00000d81: 	cmpl	%eax, %ebp
    00000d83: 	jl	.Ltmp4276 # Offset: 3459
.Ltmp4272:
    00000d89: 	movq	%r13, %rsi
    00000d8c: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000d93: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 3475
    00000d98: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000d9f: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000da6: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000dad: 	je	.Ltmp4277 # Offset: 3501
.Ltmp4509:
    00000db3: 	movq	-0x20(%rax), %rbp
    00000db7: 	callq	clock@PLT # Offset: 3511
    00000dbc: 	pxor	%xmm0, %xmm0
    00000dc0: 	movq	%rax, end_time(%rip)
    00000dc7: 	movq	%rbp, %rdi
    00000dca: 	subq	start_time(%rip), %rax
    00000dd1: 	cvtsi2sd	%rax, %xmm0
    00000dd6: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000dde: 	callq	_Z13record_resultdPKc # Offset: 3550
    00000de3: 	movq	0x130(%rsp), %rdi
    00000deb: 	cmpq	0x60(%rsp), %rdi
    00000df0: 	je	.Ltmp4278 # Offset: 3568
    00000df2: 	movq	0x140(%rsp), %rax
    00000dfa: 	leaq	0x1(%rax), %rsi
    00000dfe: 	callq	_ZdlPvm@PLT # Offset: 3582
.Ltmp4278:
    00000e03: 	movq	0x68(%rsp), %rsi
    00000e08: 	leaq	DATAat0x4d255(%rip), %rdx
    00000e0f: 	movq	%r13, %rdi
    00000e12: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3602
    00000e17: 	callq	clock@PLT # Offset: 3607
    00000e1c: 	movq	%rax, start_time(%rip)
    00000e23: 	movl	iterations(%rip), %eax
    00000e29: 	testl	%eax, %eax
    00000e2b: 	jle	.Ltmp4279 # Offset: 3627
    00000e31: 	movsd	DATAat0x4d620(%rip), %xmm5
    00000e39: 	pxor	%xmm4, %xmm4
    00000e3d: 	xorl	%r12d, %r12d
    00000e40: 	movq	DATAat0x4d5e0(%rip), %xmm7
    00000e48: 	movss	DATAat0x4d5d0(%rip), %xmm6
    00000e50: 	movss	%xmm4, 0x2c(%rsp)
    00000e56: 	movsd	DATAat0x4d628(%rip), %xmm4
    00000e5e: 	leaq	0x7cf0(%r14), %rbp
    00000e65: 	movsd	%xmm5, 0x20(%rsp)
    00000e6b: 	movss	0x8(%rsp), %xmm5
    00000e71: 	leaq	DATAat0x4d004(%rip), %r15
    00000e78: 	movaps	%xmm6, 0x10(%rsp)
    00000e7d: 	movaps	%xmm7, 0x40(%rsp)
    00000e82: 	movaps	%xmm5, %xmm6
    00000e85: 	movaps	%xmm5, %xmm7
    00000e88: 	shufps	$0x0, %xmm6, %xmm6
    00000e8c: 	shufps	$0xe0, %xmm7, %xmm7
    00000e90: 	movsd	%xmm4, 0x50(%rsp)
    00000e96: 	movaps	%xmm6, 0x30(%rsp)
    00000e9b: 	movlps	%xmm7, 0x58(%rsp)
.Ltmp4283:
    00000ea0: 	movss	0x154(%rsp), %xmm2
    00000ea9: 	movq	%r14, %rdx
    00000eac: 	movss	0x150(%rsp), %xmm0
    00000eb5: 	movaps	%xmm2, %xmm1
    00000eb8: 	mulss	%xmm0, %xmm1
    00000ebc: 	addss	0x8(%rsp), %xmm1
    00000ec2: 	addss	%xmm1, %xmm1
    00000ec6: 	addss	%xmm1, %xmm0
    00000eca: 	addss	%xmm1, %xmm2
    00000ece: 	subss	%xmm2, %xmm0
    00000ed2: 	addss	0x2c(%rsp), %xmm0
    00000ed8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp4280:
    00000ee0: 	movups	0x4(%rdx), %xmm2
    00000ee4: 	mulps	(%rdx), %xmm2
    00000ee7: 	addq	$0x10, %rdx
    00000eeb: 	addps	0x30(%rsp), %xmm2
    00000ef0: 	movaps	-0x10(%rdx), %xmm1
    00000ef4: 	movups	-0xc(%rdx), %xmm7
    00000ef8: 	addps	%xmm2, %xmm2
    00000efb: 	addps	%xmm2, %xmm1
    00000efe: 	addps	%xmm7, %xmm2
    00000f01: 	subps	%xmm2, %xmm1
    00000f04: 	addss	%xmm1, %xmm0
    00000f08: 	movaps	%xmm1, %xmm2
    00000f0b: 	shufps	$0x55, %xmm1, %xmm2
    00000f0f: 	addss	%xmm0, %xmm2
    00000f13: 	movaps	%xmm1, %xmm0
    00000f16: 	unpckhps	%xmm1, %xmm0
    00000f19: 	shufps	$0xff, %xmm1, %xmm1
    00000f1d: 	addss	%xmm2, %xmm0
    00000f21: 	addss	%xmm1, %xmm0
    00000f25: 	cmpq	%rdx, %rbp
    00000f28: 	jne	.Ltmp4280 # Offset: 3880
    00000f2a: 	movq	0x7e40(%rsp), %xmm1
    00000f33: 	movq	0x58(%rsp), %xmm5
    00000f39: 	movq	0x7e44(%rsp), %xmm3
    00000f42: 	movaps	%xmm1, %xmm2
    00000f45: 	mulps	%xmm3, %xmm2
    00000f48: 	addps	%xmm5, %xmm2
    00000f4b: 	movaps	0x10(%rsp), %xmm5
    00000f50: 	addps	%xmm2, %xmm2
    00000f53: 	addps	%xmm2, %xmm1
    00000f56: 	addps	%xmm3, %xmm2
    00000f59: 	movss	0x7e4c(%rsp), %xmm3
    00000f62: 	subps	%xmm2, %xmm1
    00000f65: 	movss	0x7e48(%rsp), %xmm2
    00000f6e: 	addss	%xmm1, %xmm0
    00000f72: 	shufps	$0xe5, %xmm1, %xmm1
    00000f76: 	addss	%xmm0, %xmm1
    00000f7a: 	movaps	%xmm2, %xmm0
    00000f7d: 	mulss	%xmm3, %xmm0
    00000f81: 	addss	0x8(%rsp), %xmm0
    00000f87: 	addss	%xmm0, %xmm0
    00000f8b: 	addss	%xmm0, %xmm2
    00000f8f: 	addss	%xmm3, %xmm0
    00000f93: 	subss	%xmm0, %xmm2
    00000f97: 	pxor	%xmm0, %xmm0
    00000f9b: 	addss	%xmm1, %xmm2
    00000f9f: 	andps	%xmm2, %xmm5
    00000fa2: 	cvtss2sd	%xmm5, %xmm0
    00000fa6: 	comisd	0x20(%rsp), %xmm0
    00000fac: 	jbe	.Ltmp4281 # Offset: 4012
    00000fae: 	divss	%xmm2, %xmm2
    00000fb2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4281:
    00000fb8: 	movsd	0x50(%rsp), %xmm7
    00000fbe: 	cvtss2sd	%xmm2, %xmm2
    00000fc2: 	andpd	0x40(%rsp), %xmm2
    00000fc8: 	comisd	%xmm2, %xmm7
    00000fcc: 	jbe	.Ltmp4282 # Offset: 4044
.Ltmp4480:
    00000fd2: 	addl	$0x1, %r12d
    00000fd6: 	cmpl	%eax, %r12d
    00000fd9: 	jl	.Ltmp4283 # Offset: 4057
.Ltmp4279:
    00000fdf: 	movq	%r13, %rsi
    00000fe2: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000fe9: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 4073
    00000fee: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000ff5: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000ffc: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001003: 	je	.Ltmp4284 # Offset: 4099
.Ltmp4508:
    00001009: 	movq	-0x20(%rax), %rbp
    0000100d: 	callq	clock@PLT # Offset: 4109
    00001012: 	pxor	%xmm0, %xmm0
    00001016: 	movq	%rax, end_time(%rip)
    0000101d: 	movq	%rbp, %rdi
    00001020: 	subq	start_time(%rip), %rax
    00001027: 	cvtsi2sd	%rax, %xmm0
    0000102c: 	divsd	DATAat0x4d640(%rip), %xmm0
    00001034: 	callq	_Z13record_resultdPKc # Offset: 4148
    00001039: 	movq	0x130(%rsp), %rdi
    00001041: 	cmpq	0x60(%rsp), %rdi
    00001046: 	je	.Ltmp4285 # Offset: 4166
    00001048: 	movq	0x140(%rsp), %rax
    00001050: 	leaq	0x1(%rax), %rsi
    00001054: 	callq	_ZdlPvm@PLT # Offset: 4180
.Ltmp4285:
    00001059: 	movq	0x68(%rsp), %rsi
    0000105e: 	leaq	DATAat0x4d26c(%rip), %rdx
    00001065: 	movq	%r13, %rdi
    00001068: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4200
    0000106d: 	callq	clock@PLT # Offset: 4205
    00001072: 	movl	iterations(%rip), %edx
    00001078: 	movq	%rax, start_time(%rip)
    0000107f: 	testl	%edx, %edx
    00001081: 	jle	.Ltmp4286 # Offset: 4225
    00001087: 	pxor	%xmm6, %xmm6
    0000108b: 	movsd	DATAat0x4d620(%rip), %xmm7
    00001093: 	xorl	%ebp, %ebp
    00001095: 	movq	DATAat0x4d5e0(%rip), %xmm4
    0000109d: 	movss	%xmm6, 0x2c(%rsp)
    000010a3: 	movsd	DATAat0x4d628(%rip), %xmm6
    000010ab: 	movss	DATAat0x4d5d0(%rip), %xmm5
    000010b3: 	leaq	0x154(%rsp), %r12
    000010bb: 	movaps	%xmm5, 0x10(%rsp)
    000010c0: 	leaq	DATAat0x4d004(%rip), %r15
    000010c7: 	movsd	%xmm7, 0x20(%rsp)
    000010cd: 	movaps	%xmm4, 0x40(%rsp)
    000010d2: 	movsd	%xmm6, 0x50(%rsp)
    000010d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp4290:
    000010e0: 	movss	0x150(%rsp), %xmm3
    000010e9: 	movq	%r12, %rax
    000010ec: 	movss	0x154(%rsp), %xmm0
    000010f5: 	movaps	%xmm3, %xmm2
    000010f8: 	movaps	%xmm3, %xmm1
    000010fb: 	mulss	%xmm0, %xmm2
    000010ff: 	addss	0x8(%rsp), %xmm2
    00001105: 	addss	%xmm2, %xmm1
    00001109: 	addss	%xmm2, %xmm0
    0000110d: 	addss	%xmm2, %xmm1
    00001111: 	addss	%xmm2, %xmm0
    00001115: 	addss	0x2c(%rsp), %xmm1
    0000111b: 	subss	%xmm0, %xmm1
    0000111f: 	nop # Size: 1
.Ltmp4287:
    00001120: 	movaps	%xmm3, %xmm0
    00001123: 	movss	(%rax), %xmm3
    00001127: 	addq	$0x4, %rax
    0000112b: 	movaps	%xmm0, %xmm2
    0000112e: 	mulss	%xmm3, %xmm2
    00001132: 	addss	0x8(%rsp), %xmm2
    00001138: 	addss	%xmm2, %xmm0
    0000113c: 	addss	%xmm2, %xmm0
    00001140: 	addss	%xmm0, %xmm1
    00001144: 	movaps	%xmm3, %xmm0
    00001147: 	addss	%xmm2, %xmm0
    0000114b: 	addss	%xmm2, %xmm0
    0000114f: 	subss	%xmm0, %xmm1
    00001153: 	cmpq	%rax, %rbx
    00001156: 	jne	.Ltmp4287 # Offset: 4438
    00001158: 	movaps	0x10(%rsp), %xmm7
    0000115d: 	pxor	%xmm0, %xmm0
    00001161: 	andps	%xmm1, %xmm7
    00001164: 	cvtss2sd	%xmm7, %xmm0
    00001168: 	comisd	0x20(%rsp), %xmm0
    0000116e: 	jbe	.Ltmp4288 # Offset: 4462
    00001170: 	divss	%xmm1, %xmm1
.Ltmp4288:
    00001174: 	movsd	0x50(%rsp), %xmm4
    0000117a: 	cvtss2sd	%xmm1, %xmm1
    0000117e: 	andpd	0x40(%rsp), %xmm1
    00001184: 	comisd	%xmm1, %xmm4
    00001188: 	jbe	.Ltmp4289 # Offset: 4488
.Ltmp4479:
    0000118e: 	addl	$0x1, %ebp
    00001191: 	cmpl	%edx, %ebp
    00001193: 	jl	.Ltmp4290 # Offset: 4499
.Ltmp4286:
    00001199: 	movq	%r13, %rsi
    0000119c: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000011a3: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 4515
    000011a8: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000011af: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000011b6: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000011bd: 	je	.Ltmp4291 # Offset: 4541
.Ltmp4507:
    000011c3: 	movq	-0x20(%rax), %rbp
    000011c7: 	callq	clock@PLT # Offset: 4551
    000011cc: 	pxor	%xmm0, %xmm0
    000011d0: 	movq	%rax, end_time(%rip)
    000011d7: 	movq	%rbp, %rdi
    000011da: 	subq	start_time(%rip), %rax
    000011e1: 	cvtsi2sd	%rax, %xmm0
    000011e6: 	divsd	DATAat0x4d640(%rip), %xmm0
    000011ee: 	callq	_Z13record_resultdPKc # Offset: 4590
    000011f3: 	movq	0x130(%rsp), %rdi
    000011fb: 	cmpq	0x60(%rsp), %rdi
    00001200: 	je	.Ltmp4292 # Offset: 4608
    00001202: 	movq	0x140(%rsp), %rax
    0000120a: 	leaq	0x1(%rax), %rsi
    0000120e: 	callq	_ZdlPvm@PLT # Offset: 4622
.Ltmp4292:
    00001213: 	movq	0x68(%rsp), %rsi
    00001218: 	leaq	DATAat0x4d27a(%rip), %rdx
    0000121f: 	movq	%r13, %rdi
    00001222: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4642
    00001227: 	callq	clock@PLT # Offset: 4647
    0000122c: 	movl	iterations(%rip), %edx
    00001232: 	movq	%rax, start_time(%rip)
    00001239: 	testl	%edx, %edx
    0000123b: 	jle	.Ltmp4293 # Offset: 4667
    00001241: 	pxor	%xmm5, %xmm5
    00001245: 	movss	DATAat0x4d5d0(%rip), %xmm7
    0000124d: 	xorl	%r12d, %r12d
    00001250: 	movsd	DATAat0x4d620(%rip), %xmm4
    00001258: 	movq	DATAat0x4d5e0(%rip), %xmm6
    00001260: 	movss	%xmm5, 0x2c(%rsp)
    00001266: 	movsd	DATAat0x4d628(%rip), %xmm5
    0000126e: 	leaq	0x7cf0(%r14), %rbp
    00001275: 	movaps	%xmm7, 0x10(%rsp)
    0000127a: 	movss	0x8(%rsp), %xmm7
    00001280: 	leaq	DATAat0x4d004(%rip), %r15
    00001287: 	movsd	%xmm4, 0x20(%rsp)
    0000128d: 	shufps	$0x0, %xmm7, %xmm7
    00001291: 	movaps	%xmm6, 0x40(%rsp)
    00001296: 	movsd	%xmm5, 0x50(%rsp)
    0000129c: 	movaps	%xmm7, 0x30(%rsp)
    000012a1: 	nopl	(%rax) # Size: 7
.Ltmp4297:
    000012a8: 	movss	0x150(%rsp), %xmm1
    000012b1: 	movq	%r14, %rax
    000012b4: 	movss	0x154(%rsp), %xmm2
    000012bd: 	movaps	%xmm1, %xmm0
    000012c0: 	divss	%xmm2, %xmm0
    000012c4: 	addss	0x8(%rsp), %xmm0
    000012ca: 	addss	%xmm0, %xmm0
    000012ce: 	addss	%xmm0, %xmm1
    000012d2: 	addss	%xmm0, %xmm2
    000012d6: 	subss	%xmm2, %xmm1
    000012da: 	addss	0x2c(%rsp), %xmm1
.Ltmp4294:
    000012e0: 	movaps	(%rax), %xmm0
    000012e3: 	movups	0x4(%rax), %xmm6
    000012e7: 	addq	$0x10, %rax
    000012eb: 	movaps	%xmm0, %xmm2
    000012ee: 	divps	%xmm6, %xmm2
    000012f1: 	addps	0x30(%rsp), %xmm2
    000012f6: 	addps	%xmm2, %xmm2
    000012f9: 	addps	%xmm2, %xmm0
    000012fc: 	addps	%xmm6, %xmm2
    000012ff: 	subps	%xmm2, %xmm0
    00001302: 	addss	%xmm0, %xmm1
    00001306: 	movaps	%xmm0, %xmm2
    00001309: 	shufps	$0x55, %xmm0, %xmm2
    0000130d: 	addss	%xmm1, %xmm2
    00001311: 	movaps	%xmm0, %xmm1
    00001314: 	unpckhps	%xmm0, %xmm1
    00001317: 	shufps	$0xff, %xmm0, %xmm0
    0000131b: 	addss	%xmm2, %xmm1
    0000131f: 	addss	%xmm0, %xmm1
    00001323: 	cmpq	%rax, %rbp
    00001326: 	jne	.Ltmp4294 # Offset: 4902
    00001328: 	movss	0x7e40(%rsp), %xmm3
    00001331: 	movss	0x8(%rsp), %xmm6
    00001337: 	movss	0x7e44(%rsp), %xmm2
    00001340: 	movaps	0x10(%rsp), %xmm4
    00001345: 	movaps	%xmm3, %xmm0
    00001348: 	divss	%xmm2, %xmm0
    0000134c: 	addss	%xmm6, %xmm0
    00001350: 	addss	%xmm0, %xmm0
    00001354: 	addss	%xmm0, %xmm3
    00001358: 	addss	%xmm2, %xmm0
    0000135c: 	subss	%xmm0, %xmm3
    00001360: 	movss	0x7e48(%rsp), %xmm0
    00001369: 	addss	%xmm1, %xmm3
    0000136d: 	movaps	%xmm2, %xmm1
    00001370: 	divss	%xmm0, %xmm1
    00001374: 	addss	%xmm6, %xmm1
    00001378: 	addss	%xmm1, %xmm1
    0000137c: 	addss	%xmm1, %xmm2
    00001380: 	addss	%xmm0, %xmm1
    00001384: 	subss	%xmm1, %xmm2
    00001388: 	movaps	%xmm0, %xmm1
    0000138b: 	addss	%xmm3, %xmm2
    0000138f: 	movss	0x7e4c(%rsp), %xmm3
    00001398: 	divss	%xmm3, %xmm1
    0000139c: 	addss	%xmm6, %xmm1
    000013a0: 	addss	%xmm1, %xmm1
    000013a4: 	addss	%xmm1, %xmm0
    000013a8: 	addss	%xmm3, %xmm1
    000013ac: 	subss	%xmm1, %xmm0
    000013b0: 	pxor	%xmm1, %xmm1
    000013b4: 	addss	%xmm2, %xmm0
    000013b8: 	andps	%xmm0, %xmm4
    000013bb: 	cvtss2sd	%xmm4, %xmm1
    000013bf: 	comisd	0x20(%rsp), %xmm1
    000013c5: 	jbe	.Ltmp4295 # Offset: 5061
    000013c7: 	divss	%xmm0, %xmm0
.Ltmp4295:
    000013cb: 	movsd	0x50(%rsp), %xmm5
    000013d1: 	cvtss2sd	%xmm0, %xmm0
    000013d5: 	andpd	0x40(%rsp), %xmm0
    000013db: 	comisd	%xmm0, %xmm5
    000013df: 	jbe	.Ltmp4296 # Offset: 5087
.Ltmp4478:
    000013e5: 	addl	$0x1, %r12d
    000013e9: 	cmpl	%edx, %r12d
    000013ec: 	jl	.Ltmp4297 # Offset: 5100
.Ltmp4293:
    000013f2: 	movq	%r13, %rsi
    000013f5: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000013fc: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 5116
    00001401: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001408: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000140f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001416: 	je	.Ltmp4298 # Offset: 5142
.Ltmp4506:
    0000141c: 	movq	-0x20(%rax), %rbp
    00001420: 	callq	clock@PLT # Offset: 5152
    00001425: 	pxor	%xmm0, %xmm0
    00001429: 	movq	%rax, end_time(%rip)
    00001430: 	movq	%rbp, %rdi
    00001433: 	subq	start_time(%rip), %rax
    0000143a: 	cvtsi2sd	%rax, %xmm0
    0000143f: 	divsd	DATAat0x4d640(%rip), %xmm0
    00001447: 	callq	_Z13record_resultdPKc # Offset: 5191
    0000144c: 	movq	0x130(%rsp), %rdi
    00001454: 	cmpq	0x60(%rsp), %rdi
    00001459: 	je	.Ltmp4299 # Offset: 5209
    0000145b: 	movq	0x140(%rsp), %rax
    00001463: 	leaq	0x1(%rax), %rsi
    00001467: 	callq	_ZdlPvm@PLT # Offset: 5223
.Ltmp4299:
    0000146c: 	movq	0x68(%rsp), %rsi
    00001471: 	leaq	DATAat0x4d28f(%rip), %rdx
    00001478: 	movq	%r13, %rdi
    0000147b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5243
    00001480: 	callq	clock@PLT # Offset: 5248
    00001485: 	movq	%rax, start_time(%rip)
    0000148c: 	movl	iterations(%rip), %eax
    00001492: 	testl	%eax, %eax
    00001494: 	jle	.Ltmp4300 # Offset: 5268
    0000149a: 	pxor	%xmm7, %xmm7
    0000149e: 	movsd	DATAat0x4d620(%rip), %xmm6
    000014a6: 	xorl	%ebp, %ebp
    000014a8: 	movq	DATAat0x4d5e0(%rip), %xmm5
    000014b0: 	movss	%xmm7, 0x2c(%rsp)
    000014b6: 	movsd	DATAat0x4d628(%rip), %xmm7
    000014be: 	movss	DATAat0x4d5d0(%rip), %xmm4
    000014c6: 	leaq	0x154(%rsp), %r12
    000014ce: 	movaps	%xmm4, 0x10(%rsp)
    000014d3: 	leaq	DATAat0x4d004(%rip), %r15
    000014da: 	movsd	%xmm6, 0x20(%rsp)
    000014e0: 	movaps	%xmm5, 0x40(%rsp)
    000014e5: 	movsd	%xmm7, 0x50(%rsp)
    000014eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4304:
    000014f0: 	movss	0x150(%rsp), %xmm3
    000014f9: 	movq	%r12, %rdx
    000014fc: 	movss	0x154(%rsp), %xmm0
    00001505: 	movaps	%xmm3, %xmm2
    00001508: 	movaps	%xmm3, %xmm1
    0000150b: 	divss	%xmm0, %xmm2
    0000150f: 	addss	0x8(%rsp), %xmm2
    00001515: 	addss	%xmm2, %xmm1
    00001519: 	addss	%xmm2, %xmm0
    0000151d: 	addss	%xmm2, %xmm1
    00001521: 	addss	%xmm2, %xmm0
    00001525: 	addss	0x2c(%rsp), %xmm1
    0000152b: 	subss	%xmm0, %xmm1
    0000152f: 	nop # Size: 1
.Ltmp4301:
    00001530: 	movaps	%xmm3, %xmm0
    00001533: 	movss	(%rdx), %xmm3
    00001537: 	addq	$0x4, %rdx
    0000153b: 	movaps	%xmm0, %xmm2
    0000153e: 	divss	%xmm3, %xmm2
    00001542: 	addss	0x8(%rsp), %xmm2
    00001548: 	addss	%xmm2, %xmm0
    0000154c: 	addss	%xmm2, %xmm0
    00001550: 	addss	%xmm0, %xmm1
    00001554: 	movaps	%xmm3, %xmm0
    00001557: 	addss	%xmm2, %xmm0
    0000155b: 	addss	%xmm2, %xmm0
    0000155f: 	subss	%xmm0, %xmm1
    00001563: 	cmpq	%rdx, %rbx
    00001566: 	jne	.Ltmp4301 # Offset: 5478
    00001568: 	movaps	0x10(%rsp), %xmm7
    0000156d: 	pxor	%xmm0, %xmm0
    00001571: 	andps	%xmm1, %xmm7
    00001574: 	cvtss2sd	%xmm7, %xmm0
    00001578: 	comisd	0x20(%rsp), %xmm0
    0000157e: 	jbe	.Ltmp4302 # Offset: 5502
    00001580: 	divss	%xmm1, %xmm1
.Ltmp4302:
    00001584: 	movsd	0x50(%rsp), %xmm6
    0000158a: 	cvtss2sd	%xmm1, %xmm1
    0000158e: 	andpd	0x40(%rsp), %xmm1
    00001594: 	comisd	%xmm1, %xmm6
    00001598: 	jbe	.Ltmp4303 # Offset: 5528
.Ltmp4477:
    0000159e: 	addl	$0x1, %ebp
    000015a1: 	cmpl	%eax, %ebp
    000015a3: 	jl	.Ltmp4304 # Offset: 5539
.Ltmp4300:
    000015a9: 	movq	%r13, %rsi
    000015ac: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000015b3: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 5555
    000015b8: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000015bf: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000015c6: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000015cd: 	je	.Ltmp4305 # Offset: 5581
.Ltmp4505:
    000015d3: 	movq	-0x20(%rax), %rbp
    000015d7: 	callq	clock@PLT # Offset: 5591
    000015dc: 	pxor	%xmm0, %xmm0
    000015e0: 	movq	%rax, end_time(%rip)
    000015e7: 	movq	%rbp, %rdi
    000015ea: 	subq	start_time(%rip), %rax
    000015f1: 	cvtsi2sd	%rax, %xmm0
    000015f6: 	divsd	DATAat0x4d640(%rip), %xmm0
    000015fe: 	callq	_Z13record_resultdPKc # Offset: 5630
    00001603: 	movq	0x130(%rsp), %rdi
    0000160b: 	cmpq	0x60(%rsp), %rdi
    00001610: 	je	.Ltmp4306 # Offset: 5648
    00001612: 	movq	0x140(%rsp), %rax
    0000161a: 	leaq	0x1(%rax), %rsi
    0000161e: 	callq	_ZdlPvm@PLT # Offset: 5662
.Ltmp4306:
    00001623: 	movq	0x68(%rsp), %rsi
    00001628: 	leaq	DATAat0x4d29b(%rip), %rdx
    0000162f: 	movq	%r13, %rdi
    00001632: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5682
    00001637: 	callq	clock@PLT # Offset: 5687
    0000163c: 	movl	iterations(%rip), %edx
    00001642: 	movq	%rax, start_time(%rip)
    00001649: 	testl	%edx, %edx
    0000164b: 	jle	.Ltmp4307 # Offset: 5707
    00001651: 	pxor	%xmm4, %xmm4
    00001655: 	movsd	DATAat0x4d620(%rip), %xmm5
    0000165d: 	xorl	%r12d, %r12d
    00001660: 	movq	DATAat0x4d5e0(%rip), %xmm7
    00001668: 	movss	%xmm4, 0x2c(%rsp)
    0000166e: 	movsd	DATAat0x4d628(%rip), %xmm4
    00001676: 	movss	DATAat0x4d5d0(%rip), %xmm6
    0000167e: 	leaq	0x7cf0(%r14), %rbp
    00001685: 	movaps	%xmm6, 0x10(%rsp)
    0000168a: 	leaq	DATAat0x4d004(%rip), %r15
    00001691: 	movsd	%xmm4, 0x50(%rsp)
    00001697: 	movss	0x8(%rsp), %xmm4
    0000169d: 	movsd	%xmm5, 0x20(%rsp)
    000016a3: 	shufps	$0x0, %xmm4, %xmm4
    000016a7: 	movaps	%xmm7, 0x40(%rsp)
    000016ac: 	movaps	%xmm4, 0x30(%rsp)
    000016b1: 	nopl	(%rax) # Size: 7
.Ltmp4311:
    000016b8: 	movss	0x150(%rsp), %xmm1
    000016c1: 	movss	0x8(%rsp), %xmm6
    000016c7: 	movq	%r14, %rax
    000016ca: 	movss	0x154(%rsp), %xmm2
    000016d3: 	movaps	%xmm1, %xmm3
    000016d6: 	movaps	%xmm1, %xmm0
    000016d9: 	divss	%xmm6, %xmm3
    000016dd: 	subss	%xmm2, %xmm0
    000016e1: 	mulss	%xmm6, %xmm0
    000016e5: 	addss	%xmm3, %xmm0
    000016e9: 	addss	%xmm0, %xmm0
    000016ed: 	addss	%xmm0, %xmm2
    000016f1: 	addss	%xmm0, %xmm1
    000016f5: 	subss	%xmm2, %xmm1
    000016f9: 	addss	0x2c(%rsp), %xmm1
    000016ff: 	movaps	%xmm1, %xmm2
    00001702: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4308:
    00001708: 	movaps	(%rax), %xmm0
    0000170b: 	movups	0x4(%rax), %xmm7
    0000170f: 	addq	$0x10, %rax
    00001713: 	movups	-0xc(%rax), %xmm6
    00001717: 	movaps	%xmm0, %xmm1
    0000171a: 	movaps	%xmm0, %xmm3
    0000171d: 	subps	%xmm7, %xmm1
    00001720: 	movaps	0x30(%rsp), %xmm7
    00001725: 	divps	%xmm7, %xmm3
    00001728: 	mulps	%xmm7, %xmm1
    0000172b: 	addps	%xmm3, %xmm1
    0000172e: 	addps	%xmm1, %xmm1
    00001731: 	addps	%xmm1, %xmm0
    00001734: 	addps	%xmm6, %xmm1
    00001737: 	subps	%xmm1, %xmm0
    0000173a: 	movaps	%xmm0, %xmm1
    0000173d: 	addss	%xmm2, %xmm1
    00001741: 	movaps	%xmm0, %xmm2
    00001744: 	shufps	$0x55, %xmm0, %xmm2
    00001748: 	addss	%xmm1, %xmm2
    0000174c: 	movaps	%xmm0, %xmm1
    0000174f: 	unpckhps	%xmm0, %xmm1
    00001752: 	shufps	$0xff, %xmm0, %xmm0
    00001756: 	addss	%xmm2, %xmm1
    0000175a: 	addss	%xmm0, %xmm1
    0000175e: 	movaps	%xmm1, %xmm2
    00001761: 	cmpq	%rax, %rbp
    00001764: 	jne	.Ltmp4308 # Offset: 5988
    00001766: 	movss	0x7e40(%rsp), %xmm3
    0000176f: 	movss	0x8(%rsp), %xmm5
    00001775: 	movss	0x7e44(%rsp), %xmm1
    0000177e: 	movaps	%xmm3, %xmm4
    00001781: 	movaps	%xmm3, %xmm0
    00001784: 	divss	%xmm5, %xmm4
    00001788: 	subss	%xmm1, %xmm0
    0000178c: 	mulss	%xmm5, %xmm0
    00001790: 	addss	%xmm4, %xmm0
    00001794: 	movaps	%xmm1, %xmm4
    00001797: 	divss	%xmm5, %xmm4
    0000179b: 	addss	%xmm0, %xmm0
    0000179f: 	addss	%xmm0, %xmm3
    000017a3: 	addss	%xmm1, %xmm0
    000017a7: 	subss	%xmm0, %xmm3
    000017ab: 	movss	0x7e48(%rsp), %xmm0
    000017b4: 	addss	%xmm2, %xmm3
    000017b8: 	movaps	%xmm1, %xmm2
    000017bb: 	subss	%xmm0, %xmm2
    000017bf: 	mulss	%xmm5, %xmm2
    000017c3: 	addss	%xmm4, %xmm2
    000017c7: 	movaps	%xmm0, %xmm4
    000017ca: 	divss	%xmm5, %xmm4
    000017ce: 	addss	%xmm2, %xmm2
    000017d2: 	addss	%xmm2, %xmm1
    000017d6: 	addss	%xmm0, %xmm2
    000017da: 	subss	%xmm2, %xmm1
    000017de: 	movaps	%xmm0, %xmm2
    000017e1: 	addss	%xmm3, %xmm1
    000017e5: 	movss	0x7e4c(%rsp), %xmm3
    000017ee: 	subss	%xmm3, %xmm2
    000017f2: 	mulss	%xmm5, %xmm2
    000017f6: 	addss	%xmm4, %xmm2
    000017fa: 	movaps	0x10(%rsp), %xmm4
    000017ff: 	addss	%xmm2, %xmm2
    00001803: 	addss	%xmm2, %xmm0
    00001807: 	addss	%xmm2, %xmm3
    0000180b: 	subss	%xmm3, %xmm0
    0000180f: 	addss	%xmm1, %xmm0
    00001813: 	pxor	%xmm1, %xmm1
    00001817: 	andps	%xmm0, %xmm4
    0000181a: 	cvtss2sd	%xmm4, %xmm1
    0000181e: 	comisd	0x20(%rsp), %xmm1
    00001824: 	jbe	.Ltmp4309 # Offset: 6180
    00001826: 	divss	%xmm0, %xmm0
.Ltmp4309:
    0000182a: 	movsd	0x50(%rsp), %xmm6
    00001830: 	cvtss2sd	%xmm0, %xmm0
    00001834: 	andpd	0x40(%rsp), %xmm0
    0000183a: 	comisd	%xmm0, %xmm6
    0000183e: 	jbe	.Ltmp4310 # Offset: 6206
.Ltmp4476:
    00001844: 	addl	$0x1, %r12d
    00001848: 	cmpl	%edx, %r12d
    0000184b: 	jl	.Ltmp4311 # Offset: 6219
.Ltmp4307:
    00001851: 	movq	%r13, %rsi
    00001854: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000185b: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 6235
    00001860: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001867: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000186e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001875: 	je	.Ltmp4312 # Offset: 6261
.Ltmp4504:
    0000187b: 	movq	-0x20(%rax), %rbp
    0000187f: 	callq	clock@PLT # Offset: 6271
    00001884: 	pxor	%xmm0, %xmm0
    00001888: 	movq	%rax, end_time(%rip)
    0000188f: 	movq	%rbp, %rdi
    00001892: 	subq	start_time(%rip), %rax
    00001899: 	cvtsi2sd	%rax, %xmm0
    0000189e: 	divsd	DATAat0x4d640(%rip), %xmm0
    000018a6: 	callq	_Z13record_resultdPKc # Offset: 6310
    000018ab: 	movq	0x130(%rsp), %rdi
    000018b3: 	cmpq	0x60(%rsp), %rdi
    000018b8: 	je	.Ltmp4313 # Offset: 6328
    000018ba: 	movq	0x140(%rsp), %rax
    000018c2: 	leaq	0x1(%rax), %rsi
    000018c6: 	callq	_ZdlPvm@PLT # Offset: 6342
.Ltmp4313:
    000018cb: 	movq	0x68(%rsp), %rsi
    000018d0: 	leaq	DATAat0x4d2ad(%rip), %rdx
    000018d7: 	movq	%r13, %rdi
    000018da: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6362
    000018df: 	callq	clock@PLT # Offset: 6367
    000018e4: 	movq	%rax, start_time(%rip)
    000018eb: 	movl	iterations(%rip), %eax
    000018f1: 	testl	%eax, %eax
    000018f3: 	jle	.Ltmp4314 # Offset: 6387
    000018f9: 	pxor	%xmm6, %xmm6
    000018fd: 	movsd	DATAat0x4d620(%rip), %xmm7
    00001905: 	xorl	%ebp, %ebp
    00001907: 	movq	DATAat0x4d5e0(%rip), %xmm4
    0000190f: 	movss	%xmm6, 0x2c(%rsp)
    00001915: 	movsd	DATAat0x4d628(%rip), %xmm6
    0000191d: 	movss	DATAat0x4d5d0(%rip), %xmm5
    00001925: 	leaq	0x154(%rsp), %r12
    0000192d: 	movaps	%xmm5, 0x10(%rsp)
    00001932: 	leaq	DATAat0x4d004(%rip), %r15
    00001939: 	movsd	%xmm7, 0x20(%rsp)
    0000193f: 	movaps	%xmm4, 0x40(%rsp)
    00001944: 	movsd	%xmm6, 0x50(%rsp)
    0000194a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4318:
    00001950: 	movss	0x150(%rsp), %xmm3
    00001959: 	movss	0x8(%rsp), %xmm7
    0000195f: 	movq	%r12, %rdx
    00001962: 	movss	0x154(%rsp), %xmm2
    0000196b: 	movaps	%xmm3, %xmm1
    0000196e: 	movaps	%xmm3, %xmm0
    00001971: 	divss	%xmm7, %xmm1
    00001975: 	subss	%xmm2, %xmm0
    00001979: 	mulss	%xmm7, %xmm0
    0000197d: 	addss	%xmm1, %xmm0
    00001981: 	movaps	%xmm3, %xmm1
    00001984: 	addss	%xmm0, %xmm1
    00001988: 	addss	%xmm0, %xmm2
    0000198c: 	addss	%xmm0, %xmm1
    00001990: 	addss	%xmm0, %xmm2
    00001994: 	addss	0x2c(%rsp), %xmm1
    0000199a: 	subss	%xmm2, %xmm1
    0000199e: 	nop # Size: 2
.Ltmp4315:
    000019a0: 	movaps	%xmm3, %xmm0
    000019a3: 	movss	0x8(%rsp), %xmm6
    000019a9: 	movss	(%rdx), %xmm3
    000019ad: 	addq	$0x4, %rdx
    000019b1: 	movaps	%xmm0, %xmm4
    000019b4: 	movaps	%xmm0, %xmm2
    000019b7: 	divss	%xmm6, %xmm4
    000019bb: 	subss	%xmm3, %xmm2
    000019bf: 	mulss	%xmm6, %xmm2
    000019c3: 	addss	%xmm4, %xmm2
    000019c7: 	addss	%xmm2, %xmm0
    000019cb: 	addss	%xmm2, %xmm0
    000019cf: 	addss	%xmm0, %xmm1
    000019d3: 	movaps	%xmm3, %xmm0
    000019d6: 	addss	%xmm2, %xmm0
    000019da: 	addss	%xmm2, %xmm0
    000019de: 	subss	%xmm0, %xmm1
    000019e2: 	cmpq	%rdx, %rbx
    000019e5: 	jne	.Ltmp4315 # Offset: 6629
    000019e7: 	movaps	0x10(%rsp), %xmm7
    000019ec: 	pxor	%xmm0, %xmm0
    000019f0: 	andps	%xmm1, %xmm7
    000019f3: 	cvtss2sd	%xmm7, %xmm0
    000019f7: 	comisd	0x20(%rsp), %xmm0
    000019fd: 	jbe	.Ltmp4316 # Offset: 6653
    000019ff: 	divss	%xmm1, %xmm1
.Ltmp4316:
    00001a03: 	movsd	0x50(%rsp), %xmm6
    00001a09: 	cvtss2sd	%xmm1, %xmm1
    00001a0d: 	andpd	0x40(%rsp), %xmm1
    00001a13: 	comisd	%xmm1, %xmm6
    00001a17: 	jbe	.Ltmp4317 # Offset: 6679
.Ltmp4475:
    00001a1d: 	addl	$0x1, %ebp
    00001a20: 	cmpl	%eax, %ebp
    00001a22: 	jl	.Ltmp4318 # Offset: 6690
.Ltmp4314:
    00001a28: 	movq	%r13, %rsi
    00001a2b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001a32: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 6706
    00001a37: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001a3e: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001a45: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001a4c: 	je	.Ltmp4319 # Offset: 6732
.Ltmp4503:
    00001a52: 	movq	-0x20(%rax), %rbp
    00001a56: 	callq	clock@PLT # Offset: 6742
    00001a5b: 	pxor	%xmm0, %xmm0
    00001a5f: 	movq	%rax, end_time(%rip)
    00001a66: 	movq	%rbp, %rdi
    00001a69: 	subq	start_time(%rip), %rax
    00001a70: 	cvtsi2sd	%rax, %xmm0
    00001a75: 	divsd	DATAat0x4d640(%rip), %xmm0
    00001a7d: 	callq	_Z13record_resultdPKc # Offset: 6781
    00001a82: 	movq	0x130(%rsp), %rdi
    00001a8a: 	cmpq	0x60(%rsp), %rdi
    00001a8f: 	je	.Ltmp4320 # Offset: 6799
    00001a91: 	movq	0x140(%rsp), %rax
    00001a99: 	leaq	0x1(%rax), %rsi
    00001a9d: 	callq	_ZdlPvm@PLT # Offset: 6813
.Ltmp4320:
    00001aa2: 	movq	0x68(%rsp), %r15
    00001aa7: 	leaq	0xb0(%rsp), %rdi
    00001aaf: 	leaq	DATAat0x4d2b6(%rip), %rdx
    00001ab6: 	movq	%r15, %rsi
    00001ab9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6841
    00001abe: 	movl	iterations(%rip), %edx
    00001ac4: 	xorl	%r8d, %r8d
    00001ac7: 	xorl	%ecx, %ecx
    00001ac9: 	movl	$0x1f40, %esi
    00001ace: 	movq	0xb0(%rsp), %rdi
    00001ad6: 	callq	_Z9summarizePKciiii # Offset: 6870
    00001adb: 	leaq	DATAat0x4d2bb(%rip), %rdx
    00001ae2: 	movq	%r15, %rsi
    00001ae5: 	movq	%r13, %rdi
    00001ae8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6888
    00001aed: 	callq	clock@PLT # Offset: 6893
    00001af2: 	movl	iterations(%rip), %edx
    00001af8: 	movq	%rax, start_time(%rip)
    00001aff: 	testl	%edx, %edx
    00001b01: 	jle	.Ltmp4321 # Offset: 6913
    00001b03: 	pxor	%xmm5, %xmm5
    00001b07: 	xorl	%ebp, %ebp
    00001b09: 	leaq	0x154(%rsp), %r12
    00001b11: 	movss	%xmm5, 0x2c(%rsp)
    00001b17: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4323:
    00001b20: 	movss	0x150(%rsp), %xmm2
    00001b29: 	movss	0x2c(%rsp), %xmm1
    00001b2f: 	movq	%r12, %rax
    00001b32: 	movaps	%xmm2, %xmm0
    00001b35: 	subss	0x154(%rsp), %xmm0
    00001b3e: 	addss	%xmm0, %xmm1
    00001b42: 	addss	%xmm1, %xmm0
    00001b46: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp4322:
    00001b50: 	movaps	%xmm2, %xmm1
    00001b53: 	movss	(%rax), %xmm2
    00001b57: 	addq	$0x4, %rax
    00001b5b: 	subss	%xmm2, %xmm1
    00001b5f: 	addss	%xmm1, %xmm0
    00001b63: 	addss	%xmm1, %xmm0
    00001b67: 	cmpq	%rax, %rbx
    00001b6a: 	jne	.Ltmp4322 # Offset: 7018
    00001b6c: 	movq	%r13, %rdi
    00001b6f: 	callq	"_Z30check_shifted_variable_sum_CSEIf14custom_cse_addIfEEvT_S2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 7023
    00001b74: 	addl	$0x1, %ebp
    00001b77: 	cmpl	iterations(%rip), %ebp
    00001b7d: 	jl	.Ltmp4323 # Offset: 7037
.Ltmp4321:
    00001b7f: 	movq	%r13, %rsi
    00001b82: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001b89: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 7049
    00001b8e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001b95: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001b9c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001ba3: 	je	.Ltmp4324 # Offset: 7075
.Ltmp4502:
    00001ba9: 	movq	-0x20(%rax), %rbp
    00001bad: 	callq	clock@PLT # Offset: 7085
    00001bb2: 	pxor	%xmm0, %xmm0
    00001bb6: 	movq	%rax, end_time(%rip)
    00001bbd: 	movq	%rbp, %rdi
    00001bc0: 	subq	start_time(%rip), %rax
    00001bc7: 	cvtsi2sd	%rax, %xmm0
    00001bcc: 	divsd	DATAat0x4d640(%rip), %xmm0
    00001bd4: 	callq	_Z13record_resultdPKc # Offset: 7124
    00001bd9: 	movq	0x130(%rsp), %rdi
    00001be1: 	cmpq	0x60(%rsp), %rdi
    00001be6: 	je	.Ltmp4325 # Offset: 7142
    00001be8: 	movq	0x140(%rsp), %rax
    00001bf0: 	leaq	0x1(%rax), %rsi
    00001bf4: 	callq	_ZdlPvm@PLT # Offset: 7156
.Ltmp4325:
    00001bf9: 	movq	0x68(%rsp), %rsi
    00001bfe: 	leaq	DATAat0x4d2ca(%rip), %rdx
    00001c05: 	movq	%r13, %rdi
    00001c08: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7176
    00001c0d: 	callq	clock@PLT # Offset: 7181
    00001c12: 	movl	iterations(%rip), %edx
    00001c18: 	movq	%rax, start_time(%rip)
    00001c1f: 	testl	%edx, %edx
    00001c21: 	jle	.Ltmp4326 # Offset: 7201
    00001c27: 	pxor	%xmm7, %xmm7
    00001c2b: 	leaq	0x7e4c(%rsp), %rax
    00001c33: 	movsd	DATAat0x4d620(%rip), %xmm6
    00001c3b: 	movq	DATAat0x4d5e0(%rip), %xmm5
    00001c43: 	movss	%xmm7, 0x2c(%rsp)
    00001c49: 	movsd	DATAat0x4d628(%rip), %xmm7
    00001c51: 	xorl	%r15d, %r15d
    00001c54: 	movss	DATAat0x4d5d0(%rip), %xmm4
    00001c5c: 	movq	%rax, 0x30(%rsp)
    00001c61: 	leaq	0x154(%rsp), %r12
    00001c69: 	leaq	0x7d00(%r14), %rbp
    00001c70: 	movaps	%xmm4, 0x10(%rsp)
    00001c75: 	movsd	%xmm6, 0x20(%rsp)
    00001c7b: 	movaps	%xmm5, 0x40(%rsp)
    00001c80: 	movsd	%xmm7, 0x50(%rsp)
    00001c86: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp4331:
    00001c90: 	movss	0x154(%rsp), %xmm3
    00001c99: 	movq	%r12, %rax
    00001c9c: 	movl	$0x1, %ecx
    00001ca1: 	movss	0x150(%rsp), %xmm0
    00001caa: 	movaps	%xmm3, %xmm1
    00001cad: 	movaps	%xmm0, %xmm2
    00001cb0: 	addss	%xmm0, %xmm1
    00001cb4: 	addss	0x8(%rsp), %xmm1
    00001cba: 	addss	%xmm1, %xmm1
    00001cbe: 	addss	%xmm1, %xmm2
    00001cc2: 	addss	%xmm1, %xmm3
    00001cc6: 	movss	0x2c(%rsp), %xmm1
    00001ccc: 	subss	%xmm3, %xmm2
    00001cd0: 	addss	%xmm2, %xmm1
    00001cd4: 	addss	%xmm1, %xmm2
.Ltmp4327:
    00001cd8: 	movss	(%rax), %xmm1
    00001cdc: 	movss	0x8(%rsp), %xmm5
    00001ce2: 	addl	$0x2, %ecx
    00001ce5: 	addq	$0x8, %rax
    00001ce9: 	movaps	%xmm1, %xmm3
    00001cec: 	addss	%xmm0, %xmm3
    00001cf0: 	addss	%xmm5, %xmm3
    00001cf4: 	addss	%xmm3, %xmm3
    00001cf8: 	addss	%xmm3, %xmm0
    00001cfc: 	addss	%xmm1, %xmm3
    00001d00: 	subss	%xmm3, %xmm0
    00001d04: 	movaps	%xmm1, %xmm3
    00001d07: 	addss	%xmm0, %xmm2
    00001d0b: 	addss	%xmm0, %xmm2
    00001d0f: 	movss	-0x4(%rax), %xmm0
    00001d14: 	addss	%xmm0, %xmm3
    00001d18: 	addss	%xmm5, %xmm3
    00001d1c: 	addss	%xmm3, %xmm3
    00001d20: 	addss	%xmm3, %xmm1
    00001d24: 	addss	%xmm0, %xmm3
    00001d28: 	subss	%xmm3, %xmm1
    00001d2c: 	addss	%xmm1, %xmm2
    00001d30: 	addss	%xmm1, %xmm2
    00001d34: 	cmpl	$0x1f3f, %ecx
    00001d3a: 	jne	.Ltmp4327 # Offset: 7482
    00001d3c: 	movq	0x30(%rsp), %rax
    00001d41: 	nopl	(%rax) # Size: 7
.Ltmp4328:
    00001d48: 	movss	(%rax), %xmm3
    00001d4c: 	movss	-0x4(%rax), %xmm0
    00001d51: 	addq	$0x4, %rax
    00001d55: 	movaps	%xmm3, %xmm1
    00001d58: 	addss	%xmm0, %xmm1
    00001d5c: 	addss	0x8(%rsp), %xmm1
    00001d62: 	addss	%xmm1, %xmm1
    00001d66: 	addss	%xmm1, %xmm0
    00001d6a: 	addss	%xmm1, %xmm3
    00001d6e: 	subss	%xmm3, %xmm0
    00001d72: 	addss	%xmm0, %xmm2
    00001d76: 	addss	%xmm0, %xmm2
    00001d7a: 	cmpq	%rax, %rbp
    00001d7d: 	jne	.Ltmp4328 # Offset: 7549
    00001d7f: 	movaps	0x10(%rsp), %xmm4
    00001d84: 	pxor	%xmm0, %xmm0
    00001d88: 	andps	%xmm2, %xmm4
    00001d8b: 	cvtss2sd	%xmm4, %xmm0
    00001d8f: 	comisd	0x20(%rsp), %xmm0
    00001d95: 	jbe	.Ltmp4329 # Offset: 7573
    00001d97: 	divss	%xmm2, %xmm2
.Ltmp4329:
    00001d9b: 	movsd	0x50(%rsp), %xmm6
    00001da1: 	cvtss2sd	%xmm2, %xmm2
    00001da5: 	andpd	0x40(%rsp), %xmm2
    00001dab: 	comisd	%xmm2, %xmm6
    00001daf: 	jbe	.Ltmp4330 # Offset: 7599
.Ltmp4474:
    00001db5: 	addl	$0x1, %r15d
    00001db9: 	cmpl	%edx, %r15d
    00001dbc: 	jl	.Ltmp4331 # Offset: 7612
.Ltmp4326:
    00001dc2: 	movq	%r13, %rsi
    00001dc5: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001dcc: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 7628
    00001dd1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001dd8: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001ddf: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001de6: 	je	.Ltmp4332 # Offset: 7654
.Ltmp4501:
    00001dec: 	movq	-0x20(%rax), %rbp
    00001df0: 	callq	clock@PLT # Offset: 7664
    00001df5: 	pxor	%xmm0, %xmm0
    00001df9: 	movq	%rax, end_time(%rip)
    00001e00: 	movq	%rbp, %rdi
    00001e03: 	subq	start_time(%rip), %rax
    00001e0a: 	cvtsi2sd	%rax, %xmm0
    00001e0f: 	divsd	DATAat0x4d640(%rip), %xmm0
    00001e17: 	callq	_Z13record_resultdPKc # Offset: 7703
    00001e1c: 	movq	0x130(%rsp), %rdi
    00001e24: 	cmpq	0x60(%rsp), %rdi
    00001e29: 	je	.Ltmp4333 # Offset: 7721
    00001e2b: 	movq	0x140(%rsp), %rax
    00001e33: 	leaq	0x1(%rax), %rsi
    00001e37: 	callq	_ZdlPvm@PLT # Offset: 7735
.Ltmp4333:
    00001e3c: 	movq	0x68(%rsp), %rsi
    00001e41: 	leaq	DATAat0x4d2de(%rip), %rdx
    00001e48: 	movq	%r13, %rdi
    00001e4b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7755
    00001e50: 	callq	clock@PLT # Offset: 7760
    00001e55: 	movl	iterations(%rip), %edx
    00001e5b: 	movq	%rax, start_time(%rip)
    00001e62: 	testl	%edx, %edx
    00001e64: 	jle	.Ltmp4334 # Offset: 7780
    00001e6a: 	pxor	%xmm4, %xmm4
    00001e6e: 	movsd	DATAat0x4d620(%rip), %xmm5
    00001e76: 	xorl	%ebp, %ebp
    00001e78: 	movq	DATAat0x4d5e0(%rip), %xmm7
    00001e80: 	movss	%xmm4, 0x2c(%rsp)
    00001e86: 	movsd	DATAat0x4d628(%rip), %xmm4
    00001e8e: 	movss	DATAat0x4d5d0(%rip), %xmm6
    00001e96: 	leaq	0x154(%rsp), %r12
    00001e9e: 	movaps	%xmm6, 0x10(%rsp)
    00001ea3: 	leaq	DATAat0x4d004(%rip), %r15
    00001eaa: 	movsd	%xmm5, 0x20(%rsp)
    00001eb0: 	movaps	%xmm7, 0x40(%rsp)
    00001eb5: 	movsd	%xmm4, 0x50(%rsp)
    00001ebb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4338:
    00001ec0: 	movss	0x150(%rsp), %xmm4
    00001ec9: 	movss	0x2c(%rsp), %xmm3
    00001ecf: 	movq	%r12, %rax
    00001ed2: 	movss	0x154(%rsp), %xmm0
    00001edb: 	movaps	%xmm4, %xmm2
    00001ede: 	movaps	%xmm4, %xmm1
    00001ee1: 	addss	%xmm0, %xmm2
    00001ee5: 	addss	0x8(%rsp), %xmm2
    00001eeb: 	addss	%xmm2, %xmm1
    00001eef: 	addss	%xmm2, %xmm0
    00001ef3: 	addss	%xmm2, %xmm1
    00001ef7: 	addss	%xmm2, %xmm0
    00001efb: 	addss	%xmm1, %xmm3
    00001eff: 	subss	%xmm0, %xmm3
    00001f03: 	addss	%xmm3, %xmm1
    00001f07: 	subss	%xmm0, %xmm1
    00001f0b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4335:
    00001f10: 	movaps	%xmm4, %xmm0
    00001f13: 	movss	(%rax), %xmm4
    00001f17: 	addq	$0x4, %rax
    00001f1b: 	movaps	%xmm0, %xmm2
    00001f1e: 	addss	%xmm4, %xmm2
    00001f22: 	addss	0x8(%rsp), %xmm2
    00001f28: 	movaps	%xmm4, %xmm3
    00001f2b: 	addss	%xmm2, %xmm0
    00001f2f: 	addss	%xmm2, %xmm3
    00001f33: 	addss	%xmm2, %xmm0
    00001f37: 	addss	%xmm3, %xmm2
    00001f3b: 	addss	%xmm0, %xmm1
    00001f3f: 	subss	%xmm2, %xmm1
    00001f43: 	addss	%xmm0, %xmm1
    00001f47: 	subss	%xmm2, %xmm1
    00001f4b: 	cmpq	%rax, %rbx
    00001f4e: 	jne	.Ltmp4335 # Offset: 8014
    00001f50: 	movaps	0x10(%rsp), %xmm7
    00001f55: 	pxor	%xmm0, %xmm0
    00001f59: 	andps	%xmm1, %xmm7
    00001f5c: 	cvtss2sd	%xmm7, %xmm0
    00001f60: 	comisd	0x20(%rsp), %xmm0
    00001f66: 	jbe	.Ltmp4336 # Offset: 8038
    00001f68: 	divss	%xmm1, %xmm1
.Ltmp4336:
    00001f6c: 	movsd	0x50(%rsp), %xmm6
    00001f72: 	cvtss2sd	%xmm1, %xmm1
    00001f76: 	andpd	0x40(%rsp), %xmm1
    00001f7c: 	comisd	%xmm1, %xmm6
    00001f80: 	jbe	.Ltmp4337 # Offset: 8064
.Ltmp4473:
    00001f86: 	addl	$0x1, %ebp
    00001f89: 	cmpl	%edx, %ebp
    00001f8b: 	jl	.Ltmp4338 # Offset: 8075
.Ltmp4334:
    00001f91: 	movq	%r13, %rsi
    00001f94: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001f9b: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 8091
    00001fa0: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001fa7: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001fae: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001fb5: 	je	.Ltmp4339 # Offset: 8117
.Ltmp4500:
    00001fbb: 	movq	-0x20(%rax), %rbp
    00001fbf: 	callq	clock@PLT # Offset: 8127
    00001fc4: 	pxor	%xmm0, %xmm0
    00001fc8: 	movq	%rax, end_time(%rip)
    00001fcf: 	movq	%rbp, %rdi
    00001fd2: 	subq	start_time(%rip), %rax
    00001fd9: 	cvtsi2sd	%rax, %xmm0
    00001fde: 	divsd	DATAat0x4d640(%rip), %xmm0
    00001fe6: 	callq	_Z13record_resultdPKc # Offset: 8166
    00001feb: 	movq	0x130(%rsp), %rdi
    00001ff3: 	cmpq	0x60(%rsp), %rdi
    00001ff8: 	je	.Ltmp4340 # Offset: 8184
    00001ffa: 	movq	0x140(%rsp), %rax
    00002002: 	leaq	0x1(%rax), %rsi
    00002006: 	callq	_ZdlPvm@PLT # Offset: 8198
.Ltmp4340:
    0000200b: 	movq	0x68(%rsp), %rsi
    00002010: 	leaq	DATAat0x4d2f0(%rip), %rdx
    00002017: 	movq	%r13, %rdi
    0000201a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8218
    0000201f: 	callq	clock@PLT # Offset: 8223
    00002024: 	movl	iterations(%rip), %edx
    0000202a: 	movq	%rax, start_time(%rip)
    00002031: 	testl	%edx, %edx
    00002033: 	jle	.Ltmp4341 # Offset: 8243
    00002039: 	pxor	%xmm6, %xmm6
    0000203d: 	movsd	DATAat0x4d620(%rip), %xmm7
    00002045: 	xorl	%ebp, %ebp
    00002047: 	movq	DATAat0x4d5e0(%rip), %xmm4
    0000204f: 	movss	%xmm6, 0x2c(%rsp)
    00002055: 	movsd	DATAat0x4d628(%rip), %xmm6
    0000205d: 	movss	DATAat0x4d5d0(%rip), %xmm5
    00002065: 	leaq	0x154(%rsp), %r12
    0000206d: 	movaps	%xmm5, 0x10(%rsp)
    00002072: 	leaq	DATAat0x4d004(%rip), %r15
    00002079: 	movsd	%xmm7, 0x20(%rsp)
    0000207f: 	movaps	%xmm4, 0x40(%rsp)
    00002084: 	movsd	%xmm6, 0x50(%rsp)
    0000208a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4345:
    00002090: 	movss	0x150(%rsp), %xmm4
    00002099: 	movss	0x2c(%rsp), %xmm3
    0000209f: 	movq	%r12, %rax
    000020a2: 	movss	0x154(%rsp), %xmm0
    000020ab: 	movaps	%xmm4, %xmm2
    000020ae: 	movaps	%xmm4, %xmm1
    000020b1: 	addss	%xmm0, %xmm2
    000020b5: 	addss	0x8(%rsp), %xmm2
    000020bb: 	addss	%xmm2, %xmm1
    000020bf: 	addss	%xmm2, %xmm0
    000020c3: 	addss	%xmm2, %xmm1
    000020c7: 	addss	%xmm2, %xmm0
    000020cb: 	addss	%xmm1, %xmm3
    000020cf: 	subss	%xmm0, %xmm3
    000020d3: 	addss	%xmm3, %xmm1
    000020d7: 	subss	%xmm0, %xmm1
    000020db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4342:
    000020e0: 	movaps	%xmm4, %xmm0
    000020e3: 	movss	(%rax), %xmm4
    000020e7: 	addq	$0x4, %rax
    000020eb: 	movaps	%xmm0, %xmm2
    000020ee: 	addss	%xmm4, %xmm2
    000020f2: 	addss	0x8(%rsp), %xmm2
    000020f8: 	movaps	%xmm4, %xmm3
    000020fb: 	addss	%xmm2, %xmm0
    000020ff: 	addss	%xmm2, %xmm3
    00002103: 	addss	%xmm2, %xmm0
    00002107: 	addss	%xmm3, %xmm2
    0000210b: 	addss	%xmm0, %xmm1
    0000210f: 	subss	%xmm2, %xmm1
    00002113: 	addss	%xmm0, %xmm1
    00002117: 	subss	%xmm2, %xmm1
    0000211b: 	cmpq	%rax, %rbx
    0000211e: 	jne	.Ltmp4342 # Offset: 8478
    00002120: 	movaps	0x10(%rsp), %xmm6
    00002125: 	pxor	%xmm0, %xmm0
    00002129: 	andps	%xmm1, %xmm6
    0000212c: 	cvtss2sd	%xmm6, %xmm0
    00002130: 	comisd	0x20(%rsp), %xmm0
    00002136: 	jbe	.Ltmp4343 # Offset: 8502
    00002138: 	divss	%xmm1, %xmm1
.Ltmp4343:
    0000213c: 	movsd	0x50(%rsp), %xmm6
    00002142: 	cvtss2sd	%xmm1, %xmm1
    00002146: 	andpd	0x40(%rsp), %xmm1
    0000214c: 	comisd	%xmm1, %xmm6
    00002150: 	jbe	.Ltmp4344 # Offset: 8528
.Ltmp4472:
    00002156: 	addl	$0x1, %ebp
    00002159: 	cmpl	%edx, %ebp
    0000215b: 	jl	.Ltmp4345 # Offset: 8539
.Ltmp4341:
    00002161: 	movq	%r13, %rsi
    00002164: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000216b: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 8555
    00002170: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002177: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000217e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002185: 	je	.Ltmp4346 # Offset: 8581
.Ltmp4499:
    0000218b: 	movq	-0x20(%rax), %rbp
    0000218f: 	callq	clock@PLT # Offset: 8591
    00002194: 	pxor	%xmm0, %xmm0
    00002198: 	movq	%rax, end_time(%rip)
    0000219f: 	movq	%rbp, %rdi
    000021a2: 	subq	start_time(%rip), %rax
    000021a9: 	cvtsi2sd	%rax, %xmm0
    000021ae: 	divsd	DATAat0x4d640(%rip), %xmm0
    000021b6: 	callq	_Z13record_resultdPKc # Offset: 8630
    000021bb: 	movq	0x130(%rsp), %rdi
    000021c3: 	cmpq	0x60(%rsp), %rdi
    000021c8: 	je	.Ltmp4347 # Offset: 8648
    000021ca: 	movq	0x140(%rsp), %rax
    000021d2: 	leaq	0x1(%rax), %rsi
    000021d6: 	callq	_ZdlPvm@PLT # Offset: 8662
.Ltmp4347:
    000021db: 	movq	0x68(%rsp), %rsi
    000021e0: 	leaq	DATAat0x4d30a(%rip), %rdx
    000021e7: 	movq	%r13, %rdi
    000021ea: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8682
    000021ef: 	callq	clock@PLT # Offset: 8687
    000021f4: 	movl	iterations(%rip), %edx
    000021fa: 	movq	%rax, start_time(%rip)
    00002201: 	testl	%edx, %edx
    00002203: 	jle	.Ltmp4348 # Offset: 8707
    00002209: 	pxor	%xmm5, %xmm5
    0000220d: 	movsd	DATAat0x4d620(%rip), %xmm4
    00002215: 	xorl	%ebp, %ebp
    00002217: 	movq	DATAat0x4d5e0(%rip), %xmm6
    0000221f: 	movss	%xmm5, 0x2c(%rsp)
    00002225: 	movsd	DATAat0x4d628(%rip), %xmm5
    0000222d: 	movss	DATAat0x4d5d0(%rip), %xmm7
    00002235: 	leaq	0x154(%rsp), %r12
    0000223d: 	movaps	%xmm7, 0x10(%rsp)
    00002242: 	leaq	DATAat0x4d004(%rip), %r15
    00002249: 	movsd	%xmm4, 0x20(%rsp)
    0000224f: 	movaps	%xmm6, 0x40(%rsp)
    00002254: 	movsd	%xmm5, 0x50(%rsp)
    0000225a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4352:
    00002260: 	movss	0x150(%rsp), %xmm4
    00002269: 	movss	0x2c(%rsp), %xmm3
    0000226f: 	movq	%r12, %rax
    00002272: 	movss	0x154(%rsp), %xmm0
    0000227b: 	movaps	%xmm4, %xmm2
    0000227e: 	movaps	%xmm4, %xmm1
    00002281: 	addss	%xmm0, %xmm2
    00002285: 	addss	0x8(%rsp), %xmm2
    0000228b: 	addss	%xmm2, %xmm1
    0000228f: 	addss	%xmm2, %xmm0
    00002293: 	addss	%xmm2, %xmm1
    00002297: 	addss	%xmm2, %xmm0
    0000229b: 	addss	%xmm1, %xmm3
    0000229f: 	subss	%xmm0, %xmm3
    000022a3: 	addss	%xmm3, %xmm1
    000022a7: 	subss	%xmm0, %xmm1
    000022ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4349:
    000022b0: 	movaps	%xmm4, %xmm0
    000022b3: 	movss	(%rax), %xmm4
    000022b7: 	addq	$0x4, %rax
    000022bb: 	movaps	%xmm4, %xmm2
    000022be: 	movaps	%xmm4, %xmm3
    000022c1: 	addss	%xmm0, %xmm2
    000022c5: 	addss	0x8(%rsp), %xmm2
    000022cb: 	addss	%xmm2, %xmm0
    000022cf: 	addss	%xmm2, %xmm3
    000022d3: 	addss	%xmm2, %xmm0
    000022d7: 	addss	%xmm3, %xmm2
    000022db: 	addss	%xmm0, %xmm1
    000022df: 	subss	%xmm2, %xmm1
    000022e3: 	addss	%xmm0, %xmm1
    000022e7: 	subss	%xmm2, %xmm1
    000022eb: 	cmpq	%rax, %rbx
    000022ee: 	jne	.Ltmp4349 # Offset: 8942
    000022f0: 	movaps	0x10(%rsp), %xmm4
    000022f5: 	pxor	%xmm0, %xmm0
    000022f9: 	andps	%xmm1, %xmm4
    000022fc: 	cvtss2sd	%xmm4, %xmm0
    00002300: 	comisd	0x20(%rsp), %xmm0
    00002306: 	jbe	.Ltmp4350 # Offset: 8966
    00002308: 	divss	%xmm1, %xmm1
.Ltmp4350:
    0000230c: 	movsd	0x50(%rsp), %xmm6
    00002312: 	cvtss2sd	%xmm1, %xmm1
    00002316: 	andpd	0x40(%rsp), %xmm1
    0000231c: 	comisd	%xmm1, %xmm6
    00002320: 	jbe	.Ltmp4351 # Offset: 8992
.Ltmp4471:
    00002326: 	addl	$0x1, %ebp
    00002329: 	cmpl	%edx, %ebp
    0000232b: 	jl	.Ltmp4352 # Offset: 9003
.Ltmp4348:
    00002331: 	movq	%r13, %rsi
    00002334: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000233b: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 9019
    00002340: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002347: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000234e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002355: 	je	.Ltmp4353 # Offset: 9045
.Ltmp4498:
    0000235b: 	movq	-0x20(%rax), %rbp
    0000235f: 	callq	clock@PLT # Offset: 9055
    00002364: 	pxor	%xmm0, %xmm0
    00002368: 	movq	%rax, end_time(%rip)
    0000236f: 	movq	%rbp, %rdi
    00002372: 	subq	start_time(%rip), %rax
    00002379: 	cvtsi2sd	%rax, %xmm0
    0000237e: 	divsd	DATAat0x4d640(%rip), %xmm0
    00002386: 	callq	_Z13record_resultdPKc # Offset: 9094
    0000238b: 	movq	0x130(%rsp), %rdi
    00002393: 	cmpq	0x60(%rsp), %rdi
    00002398: 	je	.Ltmp4354 # Offset: 9112
    0000239a: 	movq	0x140(%rsp), %rax
    000023a2: 	leaq	0x1(%rax), %rsi
    000023a6: 	callq	_ZdlPvm@PLT # Offset: 9126
.Ltmp4354:
    000023ab: 	movq	0x68(%rsp), %rsi
    000023b0: 	leaq	DATAat0x4d315(%rip), %rdx
    000023b7: 	movq	%r13, %rdi
    000023ba: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9146
    000023bf: 	callq	clock@PLT # Offset: 9151
    000023c4: 	movl	iterations(%rip), %edx
    000023ca: 	movq	%rax, start_time(%rip)
    000023d1: 	testl	%edx, %edx
    000023d3: 	jle	.Ltmp4355 # Offset: 9171
    000023d9: 	pxor	%xmm7, %xmm7
    000023dd: 	leaq	0x7e4c(%rsp), %rax
    000023e5: 	movsd	DATAat0x4d620(%rip), %xmm6
    000023ed: 	movq	DATAat0x4d5e0(%rip), %xmm5
    000023f5: 	movss	%xmm7, 0x2c(%rsp)
    000023fb: 	movsd	DATAat0x4d628(%rip), %xmm7
    00002403: 	xorl	%r15d, %r15d
    00002406: 	movss	DATAat0x4d5d0(%rip), %xmm4
    0000240e: 	movq	%rax, 0x30(%rsp)
    00002413: 	leaq	0x154(%rsp), %r12
    0000241b: 	leaq	0x7d00(%r14), %rbp
    00002422: 	movaps	%xmm4, 0x10(%rsp)
    00002427: 	movsd	%xmm6, 0x20(%rsp)
    0000242d: 	movaps	%xmm5, 0x40(%rsp)
    00002432: 	movsd	%xmm7, 0x50(%rsp)
    00002438: 	nopl	(%rax,%rax) # Size: 8
.Ltmp4360:
    00002440: 	movss	0x150(%rsp), %xmm0
    00002449: 	movq	%r12, %rax
    0000244c: 	movl	$0x1, %ecx
    00002451: 	movss	0x154(%rsp), %xmm3
    0000245a: 	movaps	%xmm0, %xmm1
    0000245d: 	movaps	%xmm0, %xmm2
    00002460: 	subss	%xmm3, %xmm1
    00002464: 	addss	0x8(%rsp), %xmm1
    0000246a: 	addss	%xmm1, %xmm1
    0000246e: 	addss	%xmm1, %xmm2
    00002472: 	addss	%xmm1, %xmm3
    00002476: 	movss	0x2c(%rsp), %xmm1
    0000247c: 	subss	%xmm3, %xmm2
    00002480: 	addss	%xmm2, %xmm1
    00002484: 	addss	%xmm1, %xmm2
.Ltmp4356:
    00002488: 	movss	(%rax), %xmm1
    0000248c: 	movaps	%xmm0, %xmm3
    0000248f: 	movss	0x8(%rsp), %xmm6
    00002495: 	addl	$0x2, %ecx
    00002498: 	addq	$0x8, %rax
    0000249c: 	subss	%xmm1, %xmm3
    000024a0: 	addss	%xmm6, %xmm3
    000024a4: 	addss	%xmm3, %xmm3
    000024a8: 	addss	%xmm3, %xmm0
    000024ac: 	addss	%xmm1, %xmm3
    000024b0: 	subss	%xmm3, %xmm0
    000024b4: 	movaps	%xmm1, %xmm3
    000024b7: 	addss	%xmm0, %xmm2
    000024bb: 	addss	%xmm0, %xmm2
    000024bf: 	movss	-0x4(%rax), %xmm0
    000024c4: 	subss	%xmm0, %xmm3
    000024c8: 	addss	%xmm6, %xmm3
    000024cc: 	addss	%xmm3, %xmm3
    000024d0: 	addss	%xmm3, %xmm1
    000024d4: 	addss	%xmm0, %xmm3
    000024d8: 	subss	%xmm3, %xmm1
    000024dc: 	addss	%xmm1, %xmm2
    000024e0: 	addss	%xmm1, %xmm2
    000024e4: 	cmpl	$0x1f3f, %ecx
    000024ea: 	jne	.Ltmp4356 # Offset: 9450
    000024ec: 	movq	0x30(%rsp), %rax
    000024f1: 	nopl	(%rax) # Size: 7
.Ltmp4357:
    000024f8: 	movss	-0x4(%rax), %xmm1
    000024fd: 	movss	(%rax), %xmm3
    00002501: 	addq	$0x4, %rax
    00002505: 	movaps	%xmm1, %xmm0
    00002508: 	subss	%xmm3, %xmm0
    0000250c: 	addss	0x8(%rsp), %xmm0
    00002512: 	addss	%xmm0, %xmm0
    00002516: 	addss	%xmm0, %xmm1
    0000251a: 	addss	%xmm3, %xmm0
    0000251e: 	subss	%xmm0, %xmm1
    00002522: 	addss	%xmm1, %xmm2
    00002526: 	addss	%xmm1, %xmm2
    0000252a: 	cmpq	%rbp, %rax
    0000252d: 	jne	.Ltmp4357 # Offset: 9517
    0000252f: 	movaps	0x10(%rsp), %xmm7
    00002534: 	pxor	%xmm0, %xmm0
    00002538: 	andps	%xmm2, %xmm7
    0000253b: 	cvtss2sd	%xmm7, %xmm0
    0000253f: 	comisd	0x20(%rsp), %xmm0
    00002545: 	jbe	.Ltmp4358 # Offset: 9541
    00002547: 	divss	%xmm2, %xmm2
.Ltmp4358:
    0000254b: 	movsd	0x50(%rsp), %xmm6
    00002551: 	cvtss2sd	%xmm2, %xmm2
    00002555: 	andpd	0x40(%rsp), %xmm2
    0000255b: 	comisd	%xmm2, %xmm6
    0000255f: 	jbe	.Ltmp4359 # Offset: 9567
.Ltmp4470:
    00002565: 	addl	$0x1, %r15d
    00002569: 	cmpl	%edx, %r15d
    0000256c: 	jl	.Ltmp4360 # Offset: 9580
.Ltmp4355:
    00002572: 	movq	%r13, %rsi
    00002575: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000257c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 9596
    00002581: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002588: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000258f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002596: 	je	.Ltmp4361 # Offset: 9622
.Ltmp4497:
    0000259c: 	movq	-0x20(%rax), %rbp
    000025a0: 	callq	clock@PLT # Offset: 9632
    000025a5: 	pxor	%xmm0, %xmm0
    000025a9: 	movq	%rax, end_time(%rip)
    000025b0: 	movq	%rbp, %rdi
    000025b3: 	subq	start_time(%rip), %rax
    000025ba: 	cvtsi2sd	%rax, %xmm0
    000025bf: 	divsd	DATAat0x4d640(%rip), %xmm0
    000025c7: 	callq	_Z13record_resultdPKc # Offset: 9671
    000025cc: 	movq	0x130(%rsp), %rdi
    000025d4: 	cmpq	0x60(%rsp), %rdi
    000025d9: 	je	.Ltmp4362 # Offset: 9689
    000025db: 	movq	0x140(%rsp), %rax
    000025e3: 	leaq	0x1(%rax), %rsi
    000025e7: 	callq	_ZdlPvm@PLT # Offset: 9703
.Ltmp4362:
    000025ec: 	movq	0x68(%rsp), %rsi
    000025f1: 	leaq	DATAat0x4d32e(%rip), %rdx
    000025f8: 	movq	%r13, %rdi
    000025fb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9723
    00002600: 	callq	clock@PLT # Offset: 9728
    00002605: 	movq	%rax, start_time(%rip)
    0000260c: 	movl	iterations(%rip), %eax
    00002612: 	testl	%eax, %eax
    00002614: 	jle	.Ltmp4363 # Offset: 9748
    0000261a: 	pxor	%xmm4, %xmm4
    0000261e: 	movsd	DATAat0x4d620(%rip), %xmm5
    00002626: 	xorl	%ebp, %ebp
    00002628: 	movq	DATAat0x4d5e0(%rip), %xmm7
    00002630: 	movss	%xmm4, 0x2c(%rsp)
    00002636: 	movsd	DATAat0x4d628(%rip), %xmm4
    0000263e: 	movss	DATAat0x4d5d0(%rip), %xmm6
    00002646: 	leaq	0x154(%rsp), %r12
    0000264e: 	movaps	%xmm6, 0x10(%rsp)
    00002653: 	leaq	DATAat0x4d004(%rip), %r15
    0000265a: 	movsd	%xmm5, 0x20(%rsp)
    00002660: 	movaps	%xmm7, 0x40(%rsp)
    00002665: 	movsd	%xmm4, 0x50(%rsp)
    0000266b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4367:
    00002670: 	movss	0x150(%rsp), %xmm4
    00002679: 	movss	0x2c(%rsp), %xmm3
    0000267f: 	movq	%r12, %rdx
    00002682: 	movss	0x154(%rsp), %xmm0
    0000268b: 	movaps	%xmm4, %xmm2
    0000268e: 	movaps	%xmm4, %xmm1
    00002691: 	subss	%xmm0, %xmm2
    00002695: 	addss	0x8(%rsp), %xmm2
    0000269b: 	addss	%xmm2, %xmm1
    0000269f: 	addss	%xmm2, %xmm0
    000026a3: 	addss	%xmm2, %xmm1
    000026a7: 	addss	%xmm2, %xmm0
    000026ab: 	addss	%xmm1, %xmm3
    000026af: 	subss	%xmm0, %xmm3
    000026b3: 	addss	%xmm3, %xmm1
    000026b7: 	subss	%xmm0, %xmm1
    000026bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4364:
    000026c0: 	movaps	%xmm4, %xmm0
    000026c3: 	movss	(%rdx), %xmm4
    000026c7: 	addq	$0x4, %rdx
    000026cb: 	movaps	%xmm0, %xmm2
    000026ce: 	subss	%xmm4, %xmm2
    000026d2: 	addss	0x8(%rsp), %xmm2
    000026d8: 	movaps	%xmm4, %xmm3
    000026db: 	addss	%xmm2, %xmm0
    000026df: 	addss	%xmm2, %xmm3
    000026e3: 	addss	%xmm2, %xmm0
    000026e7: 	addss	%xmm3, %xmm2
    000026eb: 	addss	%xmm0, %xmm1
    000026ef: 	subss	%xmm2, %xmm1
    000026f3: 	addss	%xmm0, %xmm1
    000026f7: 	subss	%xmm2, %xmm1
    000026fb: 	cmpq	%rdx, %rbx
    000026fe: 	jne	.Ltmp4364 # Offset: 9982
    00002700: 	movaps	0x10(%rsp), %xmm6
    00002705: 	pxor	%xmm0, %xmm0
    00002709: 	andps	%xmm1, %xmm6
    0000270c: 	cvtss2sd	%xmm6, %xmm0
    00002710: 	comisd	0x20(%rsp), %xmm0
    00002716: 	jbe	.Ltmp4365 # Offset: 10006
    00002718: 	divss	%xmm1, %xmm1
.Ltmp4365:
    0000271c: 	movsd	0x50(%rsp), %xmm6
    00002722: 	cvtss2sd	%xmm1, %xmm1
    00002726: 	andpd	0x40(%rsp), %xmm1
    0000272c: 	comisd	%xmm1, %xmm6
    00002730: 	jbe	.Ltmp4366 # Offset: 10032
.Ltmp4469:
    00002736: 	addl	$0x1, %ebp
    00002739: 	cmpl	%eax, %ebp
    0000273b: 	jl	.Ltmp4367 # Offset: 10043
.Ltmp4363:
    00002741: 	movq	%r13, %rsi
    00002744: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000274b: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 10059
    00002750: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002757: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000275e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002765: 	je	.Ltmp4368 # Offset: 10085
.Ltmp4496:
    0000276b: 	movq	-0x20(%rax), %rbp
    0000276f: 	callq	clock@PLT # Offset: 10095
    00002774: 	pxor	%xmm0, %xmm0
    00002778: 	movq	%rax, end_time(%rip)
    0000277f: 	movq	%rbp, %rdi
    00002782: 	subq	start_time(%rip), %rax
    00002789: 	cvtsi2sd	%rax, %xmm0
    0000278e: 	divsd	DATAat0x4d640(%rip), %xmm0
    00002796: 	callq	_Z13record_resultdPKc # Offset: 10134
    0000279b: 	movq	0x130(%rsp), %rdi
    000027a3: 	cmpq	0x60(%rsp), %rdi
    000027a8: 	je	.Ltmp4369 # Offset: 10152
    000027aa: 	movq	0x140(%rsp), %rax
    000027b2: 	leaq	0x1(%rax), %rsi
    000027b6: 	callq	_ZdlPvm@PLT # Offset: 10166
.Ltmp4369:
    000027bb: 	movq	0x68(%rsp), %rsi
    000027c0: 	leaq	DATAat0x4d33e(%rip), %rdx
    000027c7: 	movq	%r13, %rdi
    000027ca: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10186
    000027cf: 	callq	clock@PLT # Offset: 10191
    000027d4: 	movl	iterations(%rip), %edx
    000027da: 	movq	%rax, start_time(%rip)
    000027e1: 	testl	%edx, %edx
    000027e3: 	jle	.Ltmp4370 # Offset: 10211
    000027e9: 	pxor	%xmm6, %xmm6
    000027ed: 	leaq	0x7e4c(%rsp), %rax
    000027f5: 	movsd	DATAat0x4d620(%rip), %xmm7
    000027fd: 	movq	DATAat0x4d5e0(%rip), %xmm4
    00002805: 	movss	%xmm6, 0x2c(%rsp)
    0000280b: 	movsd	DATAat0x4d628(%rip), %xmm6
    00002813: 	xorl	%r15d, %r15d
    00002816: 	movss	DATAat0x4d5d0(%rip), %xmm5
    0000281e: 	movq	%rax, 0x30(%rsp)
    00002823: 	leaq	0x154(%rsp), %r12
    0000282b: 	leaq	0x7d00(%r14), %rbp
    00002832: 	movaps	%xmm5, 0x10(%rsp)
    00002837: 	movsd	%xmm7, 0x20(%rsp)
    0000283d: 	movaps	%xmm4, 0x40(%rsp)
    00002842: 	movsd	%xmm6, 0x50(%rsp)
    00002848: 	nopl	(%rax,%rax) # Size: 8
.Ltmp4375:
    00002850: 	movss	0x154(%rsp), %xmm3
    00002859: 	movq	%r12, %rax
    0000285c: 	movl	$0x1, %ecx
    00002861: 	movss	0x150(%rsp), %xmm0
    0000286a: 	movaps	%xmm3, %xmm1
    0000286d: 	movaps	%xmm0, %xmm2
    00002870: 	mulss	%xmm0, %xmm1
    00002874: 	addss	0x8(%rsp), %xmm1
    0000287a: 	addss	%xmm1, %xmm1
    0000287e: 	addss	%xmm1, %xmm2
    00002882: 	addss	%xmm1, %xmm3
    00002886: 	movss	0x2c(%rsp), %xmm1
    0000288c: 	subss	%xmm3, %xmm2
    00002890: 	addss	%xmm2, %xmm1
    00002894: 	addss	%xmm1, %xmm2
.Ltmp4371:
    00002898: 	movss	(%rax), %xmm1
    0000289c: 	movaps	%xmm0, %xmm3
    0000289f: 	movss	0x8(%rsp), %xmm7
    000028a5: 	addl	$0x2, %ecx
    000028a8: 	addq	$0x8, %rax
    000028ac: 	mulss	%xmm1, %xmm3
    000028b0: 	addss	%xmm7, %xmm3
    000028b4: 	addss	%xmm3, %xmm3
    000028b8: 	addss	%xmm3, %xmm0
    000028bc: 	addss	%xmm1, %xmm3
    000028c0: 	subss	%xmm3, %xmm0
    000028c4: 	movaps	%xmm1, %xmm3
    000028c7: 	addss	%xmm0, %xmm2
    000028cb: 	addss	%xmm0, %xmm2
    000028cf: 	movss	-0x4(%rax), %xmm0
    000028d4: 	mulss	%xmm0, %xmm3
    000028d8: 	addss	%xmm7, %xmm3
    000028dc: 	addss	%xmm3, %xmm3
    000028e0: 	addss	%xmm3, %xmm1
    000028e4: 	addss	%xmm0, %xmm3
    000028e8: 	subss	%xmm3, %xmm1
    000028ec: 	addss	%xmm1, %xmm2
    000028f0: 	addss	%xmm1, %xmm2
    000028f4: 	cmpl	$0x1f3f, %ecx
    000028fa: 	jne	.Ltmp4371 # Offset: 10490
    000028fc: 	movq	0x30(%rsp), %rax
    00002901: 	nopl	(%rax) # Size: 7
.Ltmp4372:
    00002908: 	movss	(%rax), %xmm3
    0000290c: 	movss	-0x4(%rax), %xmm0
    00002911: 	addq	$0x4, %rax
    00002915: 	movaps	%xmm3, %xmm1
    00002918: 	mulss	%xmm0, %xmm1
    0000291c: 	addss	0x8(%rsp), %xmm1
    00002922: 	addss	%xmm1, %xmm1
    00002926: 	addss	%xmm1, %xmm0
    0000292a: 	addss	%xmm1, %xmm3
    0000292e: 	subss	%xmm3, %xmm0
    00002932: 	addss	%xmm0, %xmm2
    00002936: 	addss	%xmm0, %xmm2
    0000293a: 	cmpq	%rbp, %rax
    0000293d: 	jne	.Ltmp4372 # Offset: 10557
    0000293f: 	movaps	0x10(%rsp), %xmm4
    00002944: 	pxor	%xmm0, %xmm0
    00002948: 	andps	%xmm2, %xmm4
    0000294b: 	cvtss2sd	%xmm4, %xmm0
    0000294f: 	comisd	0x20(%rsp), %xmm0
    00002955: 	jbe	.Ltmp4373 # Offset: 10581
    00002957: 	divss	%xmm2, %xmm2
.Ltmp4373:
    0000295b: 	movsd	0x50(%rsp), %xmm6
    00002961: 	cvtss2sd	%xmm2, %xmm2
    00002965: 	andpd	0x40(%rsp), %xmm2
    0000296b: 	comisd	%xmm2, %xmm6
    0000296f: 	jbe	.Ltmp4374 # Offset: 10607
.Ltmp4468:
    00002975: 	addl	$0x1, %r15d
    00002979: 	cmpl	%edx, %r15d
    0000297c: 	jl	.Ltmp4375 # Offset: 10620
.Ltmp4370:
    00002982: 	movq	%r13, %rsi
    00002985: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000298c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 10636
    00002991: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002998: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000299f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000029a6: 	je	.Ltmp4376 # Offset: 10662
.Ltmp4495:
    000029ac: 	movq	-0x20(%rax), %rbp
    000029b0: 	callq	clock@PLT # Offset: 10672
    000029b5: 	pxor	%xmm0, %xmm0
    000029b9: 	movq	%rax, end_time(%rip)
    000029c0: 	movq	%rbp, %rdi
    000029c3: 	subq	start_time(%rip), %rax
    000029ca: 	cvtsi2sd	%rax, %xmm0
    000029cf: 	divsd	DATAat0x4d640(%rip), %xmm0
    000029d7: 	callq	_Z13record_resultdPKc # Offset: 10711
    000029dc: 	movq	0x130(%rsp), %rdi
    000029e4: 	cmpq	0x60(%rsp), %rdi
    000029e9: 	je	.Ltmp4377 # Offset: 10729
    000029eb: 	movq	0x140(%rsp), %rax
    000029f3: 	leaq	0x1(%rax), %rsi
    000029f7: 	callq	_ZdlPvm@PLT # Offset: 10743
.Ltmp4377:
    000029fc: 	movq	0x68(%rsp), %rsi
    00002a01: 	leaq	DATAat0x4d357(%rip), %rdx
    00002a08: 	movq	%r13, %rdi
    00002a0b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10763
    00002a10: 	callq	clock@PLT # Offset: 10768
    00002a15: 	movl	iterations(%rip), %edx
    00002a1b: 	movq	%rax, start_time(%rip)
    00002a22: 	testl	%edx, %edx
    00002a24: 	jle	.Ltmp4378 # Offset: 10788
    00002a2a: 	pxor	%xmm5, %xmm5
    00002a2e: 	movsd	DATAat0x4d620(%rip), %xmm4
    00002a36: 	xorl	%ebp, %ebp
    00002a38: 	movq	DATAat0x4d5e0(%rip), %xmm6
    00002a40: 	movss	%xmm5, 0x2c(%rsp)
    00002a46: 	movsd	DATAat0x4d628(%rip), %xmm5
    00002a4e: 	movss	DATAat0x4d5d0(%rip), %xmm7
    00002a56: 	leaq	0x154(%rsp), %r12
    00002a5e: 	movaps	%xmm7, 0x10(%rsp)
    00002a63: 	leaq	DATAat0x4d004(%rip), %r15
    00002a6a: 	movsd	%xmm4, 0x20(%rsp)
    00002a70: 	movaps	%xmm6, 0x40(%rsp)
    00002a75: 	movsd	%xmm5, 0x50(%rsp)
    00002a7b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4382:
    00002a80: 	movss	0x150(%rsp), %xmm4
    00002a89: 	movss	0x2c(%rsp), %xmm3
    00002a8f: 	movq	%r12, %rax
    00002a92: 	movss	0x154(%rsp), %xmm0
    00002a9b: 	movaps	%xmm4, %xmm2
    00002a9e: 	movaps	%xmm4, %xmm1
    00002aa1: 	mulss	%xmm0, %xmm2
    00002aa5: 	addss	0x8(%rsp), %xmm2
    00002aab: 	addss	%xmm2, %xmm1
    00002aaf: 	addss	%xmm2, %xmm0
    00002ab3: 	addss	%xmm2, %xmm1
    00002ab7: 	addss	%xmm2, %xmm0
    00002abb: 	addss	%xmm1, %xmm3
    00002abf: 	subss	%xmm0, %xmm3
    00002ac3: 	addss	%xmm3, %xmm1
    00002ac7: 	subss	%xmm0, %xmm1
    00002acb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4379:
    00002ad0: 	movaps	%xmm4, %xmm0
    00002ad3: 	movss	(%rax), %xmm4
    00002ad7: 	addq	$0x4, %rax
    00002adb: 	movaps	%xmm4, %xmm2
    00002ade: 	movaps	%xmm4, %xmm3
    00002ae1: 	mulss	%xmm0, %xmm2
    00002ae5: 	addss	0x8(%rsp), %xmm2
    00002aeb: 	addss	%xmm2, %xmm0
    00002aef: 	addss	%xmm2, %xmm3
    00002af3: 	addss	%xmm2, %xmm0
    00002af7: 	addss	%xmm3, %xmm2
    00002afb: 	addss	%xmm0, %xmm1
    00002aff: 	subss	%xmm2, %xmm1
    00002b03: 	addss	%xmm0, %xmm1
    00002b07: 	subss	%xmm2, %xmm1
    00002b0b: 	cmpq	%rax, %rbx
    00002b0e: 	jne	.Ltmp4379 # Offset: 11022
    00002b10: 	movaps	0x10(%rsp), %xmm7
    00002b15: 	pxor	%xmm0, %xmm0
    00002b19: 	andps	%xmm1, %xmm7
    00002b1c: 	cvtss2sd	%xmm7, %xmm0
    00002b20: 	comisd	0x20(%rsp), %xmm0
    00002b26: 	jbe	.Ltmp4380 # Offset: 11046
    00002b28: 	divss	%xmm1, %xmm1
.Ltmp4380:
    00002b2c: 	movsd	0x50(%rsp), %xmm6
    00002b32: 	cvtss2sd	%xmm1, %xmm1
    00002b36: 	andpd	0x40(%rsp), %xmm1
    00002b3c: 	comisd	%xmm1, %xmm6
    00002b40: 	jbe	.Ltmp4381 # Offset: 11072
.Ltmp4467:
    00002b46: 	addl	$0x1, %ebp
    00002b49: 	cmpl	%edx, %ebp
    00002b4b: 	jl	.Ltmp4382 # Offset: 11083
.Ltmp4378:
    00002b51: 	movq	%r13, %rsi
    00002b54: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002b5b: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 11099
    00002b60: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002b67: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00002b6e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002b75: 	je	.Ltmp4383 # Offset: 11125
.Ltmp4494:
    00002b7b: 	movq	-0x20(%rax), %rbp
    00002b7f: 	callq	clock@PLT # Offset: 11135
    00002b84: 	pxor	%xmm0, %xmm0
    00002b88: 	movq	%rax, end_time(%rip)
    00002b8f: 	movq	%rbp, %rdi
    00002b92: 	subq	start_time(%rip), %rax
    00002b99: 	cvtsi2sd	%rax, %xmm0
    00002b9e: 	divsd	DATAat0x4d640(%rip), %xmm0
    00002ba6: 	callq	_Z13record_resultdPKc # Offset: 11174
    00002bab: 	movq	0x130(%rsp), %rdi
    00002bb3: 	cmpq	0x60(%rsp), %rdi
    00002bb8: 	je	.Ltmp4384 # Offset: 11192
    00002bba: 	movq	0x140(%rsp), %rax
    00002bc2: 	leaq	0x1(%rax), %rsi
    00002bc6: 	callq	_ZdlPvm@PLT # Offset: 11206
.Ltmp4384:
    00002bcb: 	movq	0x68(%rsp), %rsi
    00002bd0: 	leaq	DATAat0x4d367(%rip), %rdx
    00002bd7: 	movq	%r13, %rdi
    00002bda: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11226
    00002bdf: 	callq	clock@PLT # Offset: 11231
    00002be4: 	movl	iterations(%rip), %edx
    00002bea: 	movq	%rax, start_time(%rip)
    00002bf1: 	testl	%edx, %edx
    00002bf3: 	jle	.Ltmp4385 # Offset: 11251
    00002bf9: 	pxor	%xmm7, %xmm7
    00002bfd: 	leaq	0x7e4c(%rsp), %rax
    00002c05: 	movsd	DATAat0x4d620(%rip), %xmm6
    00002c0d: 	movq	DATAat0x4d5e0(%rip), %xmm5
    00002c15: 	movss	%xmm7, 0x2c(%rsp)
    00002c1b: 	movsd	DATAat0x4d628(%rip), %xmm7
    00002c23: 	xorl	%r15d, %r15d
    00002c26: 	movss	DATAat0x4d5d0(%rip), %xmm4
    00002c2e: 	movq	%rax, 0x30(%rsp)
    00002c33: 	leaq	0x154(%rsp), %r12
    00002c3b: 	leaq	0x7d00(%r14), %rbp
    00002c42: 	movaps	%xmm4, 0x10(%rsp)
    00002c47: 	movsd	%xmm6, 0x20(%rsp)
    00002c4d: 	movaps	%xmm5, 0x40(%rsp)
    00002c52: 	movsd	%xmm7, 0x50(%rsp)
    00002c58: 	nopl	(%rax,%rax) # Size: 8
.Ltmp4390:
    00002c60: 	movss	0x150(%rsp), %xmm0
    00002c69: 	movq	%r12, %rax
    00002c6c: 	movl	$0x1, %ecx
    00002c71: 	movss	0x154(%rsp), %xmm3
    00002c7a: 	movaps	%xmm0, %xmm1
    00002c7d: 	movaps	%xmm0, %xmm2
    00002c80: 	divss	%xmm3, %xmm1
    00002c84: 	addss	0x8(%rsp), %xmm1
    00002c8a: 	addss	%xmm1, %xmm1
    00002c8e: 	addss	%xmm1, %xmm2
    00002c92: 	addss	%xmm1, %xmm3
    00002c96: 	movss	0x2c(%rsp), %xmm1
    00002c9c: 	subss	%xmm3, %xmm2
    00002ca0: 	addss	%xmm2, %xmm1
    00002ca4: 	addss	%xmm1, %xmm2
.Ltmp4386:
    00002ca8: 	movss	(%rax), %xmm1
    00002cac: 	movaps	%xmm0, %xmm3
    00002caf: 	movss	0x8(%rsp), %xmm4
    00002cb5: 	addl	$0x2, %ecx
    00002cb8: 	addq	$0x8, %rax
    00002cbc: 	divss	%xmm1, %xmm3
    00002cc0: 	addss	%xmm4, %xmm3
    00002cc4: 	addss	%xmm3, %xmm3
    00002cc8: 	addss	%xmm3, %xmm0
    00002ccc: 	addss	%xmm1, %xmm3
    00002cd0: 	subss	%xmm3, %xmm0
    00002cd4: 	movaps	%xmm1, %xmm3
    00002cd7: 	addss	%xmm0, %xmm2
    00002cdb: 	addss	%xmm0, %xmm2
    00002cdf: 	movss	-0x4(%rax), %xmm0
    00002ce4: 	divss	%xmm0, %xmm3
    00002ce8: 	addss	%xmm4, %xmm3
    00002cec: 	addss	%xmm3, %xmm3
    00002cf0: 	addss	%xmm3, %xmm1
    00002cf4: 	addss	%xmm0, %xmm3
    00002cf8: 	subss	%xmm3, %xmm1
    00002cfc: 	addss	%xmm1, %xmm2
    00002d00: 	addss	%xmm1, %xmm2
    00002d04: 	cmpl	$0x1f3f, %ecx
    00002d0a: 	jne	.Ltmp4386 # Offset: 11530
    00002d0c: 	movq	0x30(%rsp), %rax
    00002d11: 	nopl	(%rax) # Size: 7
.Ltmp4387:
    00002d18: 	movss	-0x4(%rax), %xmm0
    00002d1d: 	movss	(%rax), %xmm3
    00002d21: 	addq	$0x4, %rax
    00002d25: 	movaps	%xmm0, %xmm1
    00002d28: 	divss	%xmm3, %xmm1
    00002d2c: 	addss	0x8(%rsp), %xmm1
    00002d32: 	addss	%xmm1, %xmm1
    00002d36: 	addss	%xmm1, %xmm0
    00002d3a: 	addss	%xmm1, %xmm3
    00002d3e: 	subss	%xmm3, %xmm0
    00002d42: 	addss	%xmm0, %xmm2
    00002d46: 	addss	%xmm0, %xmm2
    00002d4a: 	cmpq	%rax, %rbp
    00002d4d: 	jne	.Ltmp4387 # Offset: 11597
    00002d4f: 	movaps	0x10(%rsp), %xmm5
    00002d54: 	pxor	%xmm0, %xmm0
    00002d58: 	andps	%xmm2, %xmm5
    00002d5b: 	cvtss2sd	%xmm5, %xmm0
    00002d5f: 	comisd	0x20(%rsp), %xmm0
    00002d65: 	jbe	.Ltmp4388 # Offset: 11621
    00002d67: 	divss	%xmm2, %xmm2
.Ltmp4388:
    00002d6b: 	movsd	0x50(%rsp), %xmm6
    00002d71: 	cvtss2sd	%xmm2, %xmm2
    00002d75: 	andpd	0x40(%rsp), %xmm2
    00002d7b: 	comisd	%xmm2, %xmm6
    00002d7f: 	jbe	.Ltmp4389 # Offset: 11647
.Ltmp4466:
    00002d85: 	addl	$0x1, %r15d
    00002d89: 	cmpl	%edx, %r15d
    00002d8c: 	jl	.Ltmp4390 # Offset: 11660
.Ltmp4385:
    00002d92: 	movq	%r13, %rsi
    00002d95: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002d9c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 11676
    00002da1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002da8: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00002daf: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002db6: 	je	.Ltmp4391 # Offset: 11702
.Ltmp4493:
    00002dbc: 	movq	-0x20(%rax), %rbp
    00002dc0: 	callq	clock@PLT # Offset: 11712
    00002dc5: 	pxor	%xmm0, %xmm0
    00002dc9: 	movq	%rax, end_time(%rip)
    00002dd0: 	movq	%rbp, %rdi
    00002dd3: 	subq	start_time(%rip), %rax
    00002dda: 	cvtsi2sd	%rax, %xmm0
    00002ddf: 	divsd	DATAat0x4d640(%rip), %xmm0
    00002de7: 	callq	_Z13record_resultdPKc # Offset: 11751
    00002dec: 	movq	0x130(%rsp), %rdi
    00002df4: 	cmpq	0x60(%rsp), %rdi
    00002df9: 	je	.Ltmp4392 # Offset: 11769
    00002dfb: 	movq	0x140(%rsp), %rax
    00002e03: 	leaq	0x1(%rax), %rsi
    00002e07: 	callq	_ZdlPvm@PLT # Offset: 11783
.Ltmp4392:
    00002e0c: 	movq	0x68(%rsp), %rsi
    00002e11: 	leaq	DATAat0x4d37e(%rip), %rdx
    00002e18: 	movq	%r13, %rdi
    00002e1b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11803
    00002e20: 	movss	0x8(%rsp), %xmm0
    00002e26: 	movq	%r13, %rdx
    00002e29: 	movl	$0x1f40, %esi
    00002e2e: 	movq	%r14, %rdi
    00002e31: 	callq	_Z9test_CSE2If14custom_cse_divIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 11825
    00002e36: 	movq	0x130(%rsp), %rdi
    00002e3e: 	cmpq	0x60(%rsp), %rdi
    00002e43: 	je	.Ltmp4393 # Offset: 11843
    00002e45: 	movq	0x140(%rsp), %rax
    00002e4d: 	leaq	0x1(%rax), %rsi
    00002e51: 	callq	_ZdlPvm@PLT # Offset: 11857
.Ltmp4393:
    00002e56: 	movq	0x68(%rsp), %rsi
    00002e5b: 	leaq	DATAat0x4d38c(%rip), %rdx
    00002e62: 	movq	%r13, %rdi
    00002e65: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11877
    00002e6a: 	movss	0x8(%rsp), %xmm0
    00002e70: 	movq	%r13, %rdx
    00002e73: 	movl	$0x1f40, %esi
    00002e78: 	movq	%r14, %rdi
    00002e7b: 	callq	_Z17test_CSE2_halfoptIf14custom_cse_mixIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 11899
    00002e80: 	movq	0x130(%rsp), %rdi
    00002e88: 	cmpq	0x60(%rsp), %rdi
    00002e8d: 	je	.Ltmp4394 # Offset: 11917
    00002e8f: 	movq	0x140(%rsp), %rax
    00002e97: 	leaq	0x1(%rax), %rsi
    00002e9b: 	callq	_ZdlPvm@PLT # Offset: 11931
.Ltmp4394:
    00002ea0: 	movq	0x68(%rsp), %rsi
    00002ea5: 	leaq	DATAat0x4d3a0(%rip), %rdx
    00002eac: 	movq	%r13, %rdi
    00002eaf: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11951
    00002eb4: 	movss	0x8(%rsp), %xmm0
    00002eba: 	movq	%r13, %rdx
    00002ebd: 	movl	$0x1f40, %esi
    00002ec2: 	movq	%r14, %rdi
    00002ec5: 	callq	_Z9test_CSE2If14custom_cse_mixIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 11973
    00002eca: 	movq	0x130(%rsp), %rdi
    00002ed2: 	cmpq	0x60(%rsp), %rdi
    00002ed7: 	je	.Ltmp4395 # Offset: 11991
    00002ed9: 	movq	0x140(%rsp), %rax
    00002ee1: 	leaq	0x1(%rax), %rsi
    00002ee5: 	callq	_ZdlPvm@PLT # Offset: 12005
.Ltmp4395:
    00002eea: 	movq	0x68(%rsp), %r15
    00002eef: 	leaq	0xd0(%rsp), %rdi
    00002ef7: 	leaq	DATAat0x4d3ab(%rip), %rdx
    00002efe: 	movq	%r15, %rsi
    00002f01: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12033
    00002f06: 	movl	iterations(%rip), %edx
    00002f0c: 	xorl	%r8d, %r8d
    00002f0f: 	xorl	%ecx, %ecx
    00002f11: 	movl	$0x1f40, %esi
    00002f16: 	movq	0xd0(%rsp), %rdi
    00002f1e: 	callq	_Z9summarizePKciiii # Offset: 12062
    00002f23: 	leaq	DATAat0x4d3b2(%rip), %rdx
    00002f2a: 	movq	%r15, %rsi
    00002f2d: 	movq	%r13, %rdi
    00002f30: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12080
    00002f35: 	callq	clock@PLT # Offset: 12085
    00002f3a: 	movl	iterations(%rip), %edx
    00002f40: 	movq	%rax, start_time(%rip)
    00002f47: 	testl	%edx, %edx
    00002f49: 	jle	.Ltmp4396 # Offset: 12105
    00002f4f: 	pxor	%xmm4, %xmm4
    00002f53: 	leaq	0x7e4c(%rsp), %rax
    00002f5b: 	movsd	DATAat0x4d620(%rip), %xmm5
    00002f63: 	movq	DATAat0x4d5e0(%rip), %xmm7
    00002f6b: 	movss	%xmm4, 0x2c(%rsp)
    00002f71: 	movsd	DATAat0x4d628(%rip), %xmm4
    00002f79: 	xorl	%r15d, %r15d
    00002f7c: 	movss	DATAat0x4d5d0(%rip), %xmm6
    00002f84: 	movq	%rax, 0x30(%rsp)
    00002f89: 	leaq	0x154(%rsp), %r12
    00002f91: 	leaq	0x7d00(%r14), %rbp
    00002f98: 	movaps	%xmm6, 0x10(%rsp)
    00002f9d: 	movsd	%xmm5, 0x20(%rsp)
    00002fa3: 	movaps	%xmm7, 0x40(%rsp)
    00002fa8: 	movsd	%xmm4, 0x50(%rsp)
    00002fae: 	nop # Size: 2
.Ltmp4401:
    00002fb0: 	movss	0x2c(%rsp), %xmm2
    00002fb6: 	movq	%r12, %rax
    00002fb9: 	movl	$0x1, %ecx
    00002fbe: 	movss	0x150(%rsp), %xmm1
    00002fc7: 	movaps	%xmm1, %xmm0
    00002fca: 	subss	0x154(%rsp), %xmm0
    00002fd3: 	addss	%xmm0, %xmm2
    00002fd7: 	addss	%xmm0, %xmm2
    00002fdb: 	addss	%xmm0, %xmm2
    00002fdf: 	addss	%xmm2, %xmm0
.Ltmp4397:
    00002fe3: 	movss	(%rax), %xmm2
    00002fe7: 	addl	$0x2, %ecx
    00002fea: 	addq	$0x8, %rax
    00002fee: 	subss	%xmm2, %xmm1
    00002ff2: 	addss	%xmm1, %xmm0
    00002ff6: 	addss	%xmm1, %xmm0
    00002ffa: 	addss	%xmm1, %xmm0
    00002ffe: 	addss	%xmm1, %xmm0
    00003002: 	movss	-0x4(%rax), %xmm1
    00003007: 	subss	%xmm1, %xmm2
    0000300b: 	addss	%xmm2, %xmm0
    0000300f: 	addss	%xmm2, %xmm0
    00003013: 	addss	%xmm2, %xmm0
    00003017: 	addss	%xmm2, %xmm0
    0000301b: 	cmpl	$0x1f3f, %ecx
    00003021: 	jne	.Ltmp4397 # Offset: 12321
    00003023: 	movq	0x30(%rsp), %rax
    00003028: 	nopl	(%rax,%rax) # Size: 8
.Ltmp4398:
    00003030: 	movss	-0x4(%rax), %xmm1
    00003035: 	subss	(%rax), %xmm1
    00003039: 	addq	$0x4, %rax
    0000303d: 	addss	%xmm1, %xmm0
    00003041: 	addss	%xmm1, %xmm0
    00003045: 	addss	%xmm1, %xmm0
    00003049: 	addss	%xmm1, %xmm0
    0000304d: 	cmpq	%rax, %rbp
    00003050: 	jne	.Ltmp4398 # Offset: 12368
    00003052: 	movaps	0x10(%rsp), %xmm6
    00003057: 	pxor	%xmm1, %xmm1
    0000305b: 	andps	%xmm0, %xmm6
    0000305e: 	cvtss2sd	%xmm6, %xmm1
    00003062: 	comisd	0x20(%rsp), %xmm1
    00003068: 	jbe	.Ltmp4399 # Offset: 12392
    0000306a: 	divss	%xmm0, %xmm0
.Ltmp4399:
    0000306e: 	movsd	0x50(%rsp), %xmm5
    00003074: 	cvtss2sd	%xmm0, %xmm0
    00003078: 	andpd	0x40(%rsp), %xmm0
    0000307e: 	comisd	%xmm0, %xmm5
    00003082: 	jbe	.Ltmp4400 # Offset: 12418
.Ltmp4465:
    00003088: 	addl	$0x1, %r15d
    0000308c: 	cmpl	%edx, %r15d
    0000308f: 	jl	.Ltmp4401 # Offset: 12431
.Ltmp4396:
    00003095: 	movq	%r13, %rsi
    00003098: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000309f: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 12447
    000030a4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000030ab: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000030b2: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000030b9: 	je	.Ltmp4402 # Offset: 12473
.Ltmp4492:
    000030bf: 	movq	-0x20(%rax), %rbp
    000030c3: 	callq	clock@PLT # Offset: 12483
    000030c8: 	pxor	%xmm0, %xmm0
    000030cc: 	movq	%rax, end_time(%rip)
    000030d3: 	movq	%rbp, %rdi
    000030d6: 	subq	start_time(%rip), %rax
    000030dd: 	cvtsi2sd	%rax, %xmm0
    000030e2: 	divsd	DATAat0x4d640(%rip), %xmm0
    000030ea: 	callq	_Z13record_resultdPKc # Offset: 12522
    000030ef: 	movq	0x130(%rsp), %rdi
    000030f7: 	cmpq	0x60(%rsp), %rdi
    000030fc: 	je	.Ltmp4403 # Offset: 12540
    000030fe: 	movq	0x140(%rsp), %rax
    00003106: 	leaq	0x1(%rax), %rsi
    0000310a: 	callq	_ZdlPvm@PLT # Offset: 12554
.Ltmp4403:
    0000310f: 	movq	0x68(%rsp), %rsi
    00003114: 	leaq	DATAat0x4d3c1(%rip), %rdx
    0000311b: 	movq	%r13, %rdi
    0000311e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12574
    00003123: 	callq	clock@PLT # Offset: 12579
    00003128: 	movl	iterations(%rip), %edx
    0000312e: 	movq	%rax, start_time(%rip)
    00003135: 	testl	%edx, %edx
    00003137: 	jle	.Ltmp4404 # Offset: 12599
    0000313d: 	pxor	%xmm6, %xmm6
    00003141: 	leaq	0x7e4c(%rsp), %rax
    00003149: 	movsd	DATAat0x4d620(%rip), %xmm7
    00003151: 	movq	DATAat0x4d5e0(%rip), %xmm4
    00003159: 	movss	%xmm6, 0x2c(%rsp)
    0000315f: 	movsd	DATAat0x4d628(%rip), %xmm6
    00003167: 	xorl	%r15d, %r15d
    0000316a: 	movss	DATAat0x4d5d0(%rip), %xmm5
    00003172: 	movq	%rax, 0x30(%rsp)
    00003177: 	leaq	0x154(%rsp), %r12
    0000317f: 	leaq	0x7d00(%r14), %rbp
    00003186: 	movaps	%xmm5, 0x10(%rsp)
    0000318b: 	movsd	%xmm7, 0x20(%rsp)
    00003191: 	movaps	%xmm4, 0x40(%rsp)
    00003196: 	movsd	%xmm6, 0x50(%rsp)
    0000319c: 	nopl	(%rax) # Size: 4
.Ltmp4409:
    000031a0: 	movss	0x154(%rsp), %xmm3
    000031a9: 	movq	%r12, %rax
    000031ac: 	movl	$0x1, %ecx
    000031b1: 	movss	0x150(%rsp), %xmm1
    000031ba: 	movaps	%xmm3, %xmm2
    000031bd: 	movaps	%xmm1, %xmm0
    000031c0: 	addss	%xmm1, %xmm2
    000031c4: 	addss	0x8(%rsp), %xmm2
    000031ca: 	addss	%xmm2, %xmm2
    000031ce: 	addss	%xmm2, %xmm0
    000031d2: 	addss	%xmm2, %xmm3
    000031d6: 	movss	0x2c(%rsp), %xmm2
    000031dc: 	subss	%xmm3, %xmm0
    000031e0: 	addss	%xmm0, %xmm2
    000031e4: 	addss	%xmm0, %xmm2
    000031e8: 	addss	%xmm0, %xmm2
    000031ec: 	addss	%xmm2, %xmm0
.Ltmp4405:
    000031f0: 	movss	(%rax), %xmm2
    000031f4: 	movss	0x8(%rsp), %xmm5
    000031fa: 	addl	$0x2, %ecx
    000031fd: 	addq	$0x8, %rax
    00003201: 	movaps	%xmm2, %xmm3
    00003204: 	addss	%xmm1, %xmm3
    00003208: 	addss	%xmm5, %xmm3
    0000320c: 	addss	%xmm3, %xmm3
    00003210: 	addss	%xmm3, %xmm1
    00003214: 	addss	%xmm2, %xmm3
    00003218: 	subss	%xmm3, %xmm1
    0000321c: 	movaps	%xmm2, %xmm3
    0000321f: 	addss	%xmm1, %xmm0
    00003223: 	addss	%xmm1, %xmm0
    00003227: 	addss	%xmm1, %xmm0
    0000322b: 	addss	%xmm1, %xmm0
    0000322f: 	movss	-0x4(%rax), %xmm1
    00003234: 	addss	%xmm1, %xmm3
    00003238: 	addss	%xmm5, %xmm3
    0000323c: 	addss	%xmm3, %xmm3
    00003240: 	addss	%xmm3, %xmm2
    00003244: 	addss	%xmm1, %xmm3
    00003248: 	subss	%xmm3, %xmm2
    0000324c: 	addss	%xmm2, %xmm0
    00003250: 	addss	%xmm2, %xmm0
    00003254: 	addss	%xmm2, %xmm0
    00003258: 	addss	%xmm2, %xmm0
    0000325c: 	cmpl	$0x1f3f, %ecx
    00003262: 	jne	.Ltmp4405 # Offset: 12898
    00003264: 	movq	0x30(%rsp), %rax
    00003269: 	nopl	(%rax) # Size: 7
.Ltmp4406:
    00003270: 	movss	-0x4(%rax), %xmm1
    00003275: 	movss	(%rax), %xmm3
    00003279: 	addq	$0x4, %rax
    0000327d: 	movaps	%xmm1, %xmm2
    00003280: 	addss	%xmm3, %xmm2
    00003284: 	addss	0x8(%rsp), %xmm2
    0000328a: 	addss	%xmm2, %xmm2
    0000328e: 	addss	%xmm2, %xmm1
    00003292: 	addss	%xmm3, %xmm2
    00003296: 	subss	%xmm2, %xmm1
    0000329a: 	addss	%xmm1, %xmm0
    0000329e: 	addss	%xmm1, %xmm0
    000032a2: 	addss	%xmm1, %xmm0
    000032a6: 	addss	%xmm1, %xmm0
    000032aa: 	cmpq	%rax, %rbp
    000032ad: 	jne	.Ltmp4406 # Offset: 12973
    000032af: 	movaps	0x10(%rsp), %xmm4
    000032b4: 	pxor	%xmm1, %xmm1
    000032b8: 	andps	%xmm0, %xmm4
    000032bb: 	cvtss2sd	%xmm4, %xmm1
    000032bf: 	comisd	0x20(%rsp), %xmm1
    000032c5: 	jbe	.Ltmp4407 # Offset: 12997
    000032c7: 	divss	%xmm0, %xmm0
.Ltmp4407:
    000032cb: 	movsd	0x50(%rsp), %xmm5
    000032d1: 	cvtss2sd	%xmm0, %xmm0
    000032d5: 	andpd	0x40(%rsp), %xmm0
    000032db: 	comisd	%xmm0, %xmm5
    000032df: 	jbe	.Ltmp4408 # Offset: 13023
.Ltmp4464:
    000032e5: 	addl	$0x1, %r15d
    000032e9: 	cmpl	%edx, %r15d
    000032ec: 	jl	.Ltmp4409 # Offset: 13036
.Ltmp4404:
    000032f2: 	movq	%r13, %rsi
    000032f5: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000032fc: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 13052
    00003301: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00003308: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000330f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00003316: 	je	.Ltmp4410 # Offset: 13078
.Ltmp4491:
    0000331c: 	movq	-0x20(%rax), %rbp
    00003320: 	callq	clock@PLT # Offset: 13088
    00003325: 	pxor	%xmm0, %xmm0
    00003329: 	movq	%rax, end_time(%rip)
    00003330: 	movq	%rbp, %rdi
    00003333: 	subq	start_time(%rip), %rax
    0000333a: 	cvtsi2sd	%rax, %xmm0
    0000333f: 	divsd	DATAat0x4d640(%rip), %xmm0
    00003347: 	callq	_Z13record_resultdPKc # Offset: 13127
    0000334c: 	movq	0x130(%rsp), %rdi
    00003354: 	cmpq	0x60(%rsp), %rdi
    00003359: 	je	.Ltmp4411 # Offset: 13145
    0000335b: 	movq	0x140(%rsp), %rax
    00003363: 	leaq	0x1(%rax), %rsi
    00003367: 	callq	_ZdlPvm@PLT # Offset: 13159
.Ltmp4411:
    0000336c: 	movq	0x68(%rsp), %rsi
    00003371: 	leaq	DATAat0x4d3d5(%rip), %rdx
    00003378: 	movq	%r13, %rdi
    0000337b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13179
    00003380: 	movss	0x8(%rsp), %xmm0
    00003386: 	movq	%r13, %rdx
    00003389: 	movl	$0x1f40, %esi
    0000338e: 	movq	%r14, %rdi
    00003391: 	callq	_Z20test_CSE4_add_inlineIf14custom_cse_addIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 13201
    00003396: 	movq	0x130(%rsp), %rdi
    0000339e: 	cmpq	0x60(%rsp), %rdi
    000033a3: 	je	.Ltmp4412 # Offset: 13219
    000033a5: 	movq	0x140(%rsp), %rax
    000033ad: 	leaq	0x1(%rax), %rsi
    000033b1: 	callq	_ZdlPvm@PLT # Offset: 13233
.Ltmp4412:
    000033b6: 	movq	0x68(%rsp), %rsi
    000033bb: 	leaq	DATAat0x4d3e7(%rip), %rdx
    000033c2: 	movq	%r13, %rdi
    000033c5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13253
    000033ca: 	movss	0x8(%rsp), %xmm0
    000033d0: 	movq	%r13, %rdx
    000033d3: 	movl	$0x1f40, %esi
    000033d8: 	movq	%r14, %rdi
    000033db: 	callq	_Z28test_CSE4_add_inline_flippedIf14custom_cse_addIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 13275
    000033e0: 	movq	0x130(%rsp), %rdi
    000033e8: 	cmpq	0x60(%rsp), %rdi
    000033ed: 	je	.Ltmp4413 # Offset: 13293
    000033ef: 	movq	0x140(%rsp), %rax
    000033f7: 	leaq	0x1(%rax), %rsi
    000033fb: 	callq	_ZdlPvm@PLT # Offset: 13307
.Ltmp4413:
    00003400: 	movq	0x68(%rsp), %rsi
    00003405: 	leaq	DATAat0x4d401(%rip), %rdx
    0000340c: 	movq	%r13, %rdi
    0000340f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13327
    00003414: 	movss	0x8(%rsp), %xmm0
    0000341a: 	movq	%r13, %rdx
    0000341d: 	movl	$0x1f40, %esi
    00003422: 	movq	%r14, %rdi
    00003425: 	callq	_Z9test_CSE4If14custom_cse_addIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 13349
    0000342a: 	movq	0x130(%rsp), %rdi
    00003432: 	cmpq	0x60(%rsp), %rdi
    00003437: 	je	.Ltmp4414 # Offset: 13367
    00003439: 	movq	0x140(%rsp), %rax
    00003441: 	leaq	0x1(%rax), %rsi
    00003445: 	callq	_ZdlPvm@PLT # Offset: 13381
.Ltmp4414:
    0000344a: 	movq	0x68(%rsp), %rsi
    0000344f: 	leaq	DATAat0x4d40c(%rip), %rdx
    00003456: 	movq	%r13, %rdi
    00003459: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13401
    0000345e: 	callq	clock@PLT # Offset: 13406
    00003463: 	movl	iterations(%rip), %edx
    00003469: 	movq	%rax, start_time(%rip)
    00003470: 	testl	%edx, %edx
    00003472: 	jle	.Ltmp4415 # Offset: 13426
    00003478: 	pxor	%xmm5, %xmm5
    0000347c: 	leaq	0x7e4c(%rsp), %rax
    00003484: 	movsd	DATAat0x4d620(%rip), %xmm4
    0000348c: 	movq	DATAat0x4d5e0(%rip), %xmm6
    00003494: 	movss	%xmm5, 0x2c(%rsp)
    0000349a: 	movsd	DATAat0x4d628(%rip), %xmm5
    000034a2: 	xorl	%r15d, %r15d
    000034a5: 	movss	DATAat0x4d5d0(%rip), %xmm7
    000034ad: 	movq	%rax, 0x30(%rsp)
    000034b2: 	leaq	0x154(%rsp), %r12
    000034ba: 	leaq	0x7d00(%r14), %rbp
    000034c1: 	movaps	%xmm7, 0x10(%rsp)
    000034c6: 	movsd	%xmm4, 0x20(%rsp)
    000034cc: 	movaps	%xmm6, 0x40(%rsp)
    000034d1: 	movsd	%xmm5, 0x50(%rsp)
    000034d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4420:
    000034e0: 	movss	0x150(%rsp), %xmm1
    000034e9: 	movq	%r12, %rax
    000034ec: 	movl	$0x1, %ecx
    000034f1: 	movss	0x154(%rsp), %xmm3
    000034fa: 	movaps	%xmm1, %xmm2
    000034fd: 	movaps	%xmm1, %xmm0
    00003500: 	subss	%xmm3, %xmm2
    00003504: 	addss	0x8(%rsp), %xmm2
    0000350a: 	addss	%xmm2, %xmm2
    0000350e: 	addss	%xmm2, %xmm0
    00003512: 	addss	%xmm2, %xmm3
    00003516: 	movss	0x2c(%rsp), %xmm2
    0000351c: 	subss	%xmm3, %xmm0
    00003520: 	addss	%xmm0, %xmm2
    00003524: 	addss	%xmm0, %xmm2
    00003528: 	addss	%xmm0, %xmm2
    0000352c: 	addss	%xmm2, %xmm0
.Ltmp4416:
    00003530: 	movss	(%rax), %xmm2
    00003534: 	movaps	%xmm1, %xmm3
    00003537: 	movss	0x8(%rsp), %xmm6
    0000353d: 	addl	$0x2, %ecx
    00003540: 	addq	$0x8, %rax
    00003544: 	subss	%xmm2, %xmm3
    00003548: 	addss	%xmm6, %xmm3
    0000354c: 	addss	%xmm3, %xmm3
    00003550: 	addss	%xmm3, %xmm1
    00003554: 	addss	%xmm2, %xmm3
    00003558: 	subss	%xmm3, %xmm1
    0000355c: 	movaps	%xmm2, %xmm3
    0000355f: 	addss	%xmm1, %xmm0
    00003563: 	addss	%xmm1, %xmm0
    00003567: 	addss	%xmm1, %xmm0
    0000356b: 	addss	%xmm1, %xmm0
    0000356f: 	movss	-0x4(%rax), %xmm1
    00003574: 	subss	%xmm1, %xmm3
    00003578: 	addss	%xmm6, %xmm3
    0000357c: 	addss	%xmm3, %xmm3
    00003580: 	addss	%xmm3, %xmm2
    00003584: 	addss	%xmm1, %xmm3
    00003588: 	subss	%xmm3, %xmm2
    0000358c: 	addss	%xmm2, %xmm0
    00003590: 	addss	%xmm2, %xmm0
    00003594: 	addss	%xmm2, %xmm0
    00003598: 	addss	%xmm2, %xmm0
    0000359c: 	cmpl	$0x1f3f, %ecx
    000035a2: 	jne	.Ltmp4416 # Offset: 13730
    000035a4: 	movq	0x30(%rsp), %rax
    000035a9: 	nopl	(%rax) # Size: 7
.Ltmp4417:
    000035b0: 	movss	-0x4(%rax), %xmm1
    000035b5: 	movss	(%rax), %xmm3
    000035b9: 	addq	$0x4, %rax
    000035bd: 	movaps	%xmm1, %xmm2
    000035c0: 	subss	%xmm3, %xmm2
    000035c4: 	addss	0x8(%rsp), %xmm2
    000035ca: 	addss	%xmm2, %xmm2
    000035ce: 	addss	%xmm2, %xmm1
    000035d2: 	addss	%xmm3, %xmm2
    000035d6: 	subss	%xmm2, %xmm1
    000035da: 	addss	%xmm1, %xmm0
    000035de: 	addss	%xmm1, %xmm0
    000035e2: 	addss	%xmm1, %xmm0
    000035e6: 	addss	%xmm1, %xmm0
    000035ea: 	cmpq	%rax, %rbp
    000035ed: 	jne	.Ltmp4417 # Offset: 13805
    000035ef: 	movaps	0x10(%rsp), %xmm7
    000035f4: 	pxor	%xmm1, %xmm1
    000035f8: 	andps	%xmm0, %xmm7
    000035fb: 	cvtss2sd	%xmm7, %xmm1
    000035ff: 	comisd	0x20(%rsp), %xmm1
    00003605: 	jbe	.Ltmp4418 # Offset: 13829
    00003607: 	divss	%xmm0, %xmm0
.Ltmp4418:
    0000360b: 	movsd	0x50(%rsp), %xmm5
    00003611: 	cvtss2sd	%xmm0, %xmm0
    00003615: 	andpd	0x40(%rsp), %xmm0
    0000361b: 	comisd	%xmm0, %xmm5
    0000361f: 	jbe	.Ltmp4419 # Offset: 13855
.Ltmp4463:
    00003625: 	addl	$0x1, %r15d
    00003629: 	cmpl	%edx, %r15d
    0000362c: 	jl	.Ltmp4420 # Offset: 13868
.Ltmp4415:
    00003632: 	movq	%r13, %rsi
    00003635: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000363c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 13884
    00003641: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00003648: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000364f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00003656: 	je	.Ltmp4421 # Offset: 13910
.Ltmp4490:
    0000365c: 	movq	-0x20(%rax), %rbp
    00003660: 	callq	clock@PLT # Offset: 13920
    00003665: 	pxor	%xmm0, %xmm0
    00003669: 	movq	%rax, end_time(%rip)
    00003670: 	movq	%rbp, %rdi
    00003673: 	subq	start_time(%rip), %rax
    0000367a: 	cvtsi2sd	%rax, %xmm0
    0000367f: 	divsd	DATAat0x4d640(%rip), %xmm0
    00003687: 	callq	_Z13record_resultdPKc # Offset: 13959
    0000368c: 	movq	0x130(%rsp), %rdi
    00003694: 	cmpq	0x60(%rsp), %rdi
    00003699: 	je	.Ltmp4422 # Offset: 13977
    0000369b: 	movq	0x140(%rsp), %rax
    000036a3: 	leaq	0x1(%rax), %rsi
    000036a7: 	callq	_ZdlPvm@PLT # Offset: 13991
.Ltmp4422:
    000036ac: 	movq	0x68(%rsp), %rsi
    000036b1: 	leaq	DATAat0x4d425(%rip), %rdx
    000036b8: 	movq	%r13, %rdi
    000036bb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 14011
    000036c0: 	movss	0x8(%rsp), %xmm0
    000036c6: 	movq	%r13, %rdx
    000036c9: 	movl	$0x1f40, %esi
    000036ce: 	movq	%r14, %rdi
    000036d1: 	callq	_Z9test_CSE4If14custom_cse_subIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 14033
    000036d6: 	movq	0x130(%rsp), %rdi
    000036de: 	cmpq	0x60(%rsp), %rdi
    000036e3: 	je	.Ltmp4423 # Offset: 14051
    000036e5: 	movq	0x140(%rsp), %rax
    000036ed: 	leaq	0x1(%rax), %rsi
    000036f1: 	callq	_ZdlPvm@PLT # Offset: 14065
.Ltmp4423:
    000036f6: 	movq	0x68(%rsp), %rsi
    000036fb: 	leaq	DATAat0x4d435(%rip), %rdx
    00003702: 	movq	%r13, %rdi
    00003705: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 14085
    0000370a: 	callq	clock@PLT # Offset: 14090
    0000370f: 	movl	iterations(%rip), %edx
    00003715: 	movq	%rax, start_time(%rip)
    0000371c: 	testl	%edx, %edx
    0000371e: 	jle	.Ltmp4424 # Offset: 14110
    00003724: 	pxor	%xmm7, %xmm7
    00003728: 	leaq	0x7e4c(%rsp), %rax
    00003730: 	movsd	DATAat0x4d620(%rip), %xmm6
    00003738: 	movq	DATAat0x4d5e0(%rip), %xmm5
    00003740: 	movss	%xmm7, 0x2c(%rsp)
    00003746: 	movsd	DATAat0x4d628(%rip), %xmm7
    0000374e: 	xorl	%r15d, %r15d
    00003751: 	movss	DATAat0x4d5d0(%rip), %xmm4
    00003759: 	movq	%rax, 0x30(%rsp)
    0000375e: 	leaq	0x154(%rsp), %r12
    00003766: 	leaq	0x7d00(%r14), %rbp
    0000376d: 	movaps	%xmm4, 0x10(%rsp)
    00003772: 	movsd	%xmm6, 0x20(%rsp)
    00003778: 	movaps	%xmm5, 0x40(%rsp)
    0000377d: 	movsd	%xmm7, 0x50(%rsp)
    00003783: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4429:
    00003788: 	movss	0x154(%rsp), %xmm3
    00003791: 	movq	%r12, %rax
    00003794: 	movl	$0x1, %ecx
    00003799: 	movss	0x150(%rsp), %xmm1
    000037a2: 	movaps	%xmm3, %xmm2
    000037a5: 	movaps	%xmm1, %xmm0
    000037a8: 	mulss	%xmm1, %xmm2
    000037ac: 	addss	0x8(%rsp), %xmm2
    000037b2: 	addss	%xmm2, %xmm2
    000037b6: 	addss	%xmm2, %xmm0
    000037ba: 	addss	%xmm2, %xmm3
    000037be: 	movss	0x2c(%rsp), %xmm2
    000037c4: 	subss	%xmm3, %xmm0
    000037c8: 	addss	%xmm0, %xmm2
    000037cc: 	addss	%xmm0, %xmm2
    000037d0: 	addss	%xmm0, %xmm2
    000037d4: 	addss	%xmm2, %xmm0
.Ltmp4425:
    000037d8: 	movss	(%rax), %xmm2
    000037dc: 	movss	0x8(%rsp), %xmm7
    000037e2: 	addl	$0x2, %ecx
    000037e5: 	addq	$0x8, %rax
    000037e9: 	movaps	%xmm2, %xmm3
    000037ec: 	mulss	%xmm1, %xmm3
    000037f0: 	addss	%xmm7, %xmm3
    000037f4: 	addss	%xmm3, %xmm3
    000037f8: 	addss	%xmm3, %xmm1
    000037fc: 	addss	%xmm2, %xmm3
    00003800: 	subss	%xmm3, %xmm1
    00003804: 	movaps	%xmm2, %xmm3
    00003807: 	addss	%xmm1, %xmm0
    0000380b: 	addss	%xmm1, %xmm0
    0000380f: 	addss	%xmm1, %xmm0
    00003813: 	addss	%xmm1, %xmm0
    00003817: 	movss	-0x4(%rax), %xmm1
    0000381c: 	mulss	%xmm1, %xmm3
    00003820: 	addss	%xmm7, %xmm3
    00003824: 	addss	%xmm3, %xmm3
    00003828: 	addss	%xmm3, %xmm2
    0000382c: 	addss	%xmm1, %xmm3
    00003830: 	subss	%xmm3, %xmm2
    00003834: 	addss	%xmm2, %xmm0
    00003838: 	addss	%xmm2, %xmm0
    0000383c: 	addss	%xmm2, %xmm0
    00003840: 	addss	%xmm2, %xmm0
    00003844: 	cmpl	$0x1f3f, %ecx
    0000384a: 	jne	.Ltmp4425 # Offset: 14410
    0000384c: 	movq	0x30(%rsp), %rax
    00003851: 	nopl	(%rax) # Size: 7
.Ltmp4426:
    00003858: 	movss	-0x4(%rax), %xmm1
    0000385d: 	movss	(%rax), %xmm3
    00003861: 	addq	$0x4, %rax
    00003865: 	movaps	%xmm1, %xmm2
    00003868: 	mulss	%xmm3, %xmm2
    0000386c: 	addss	0x8(%rsp), %xmm2
    00003872: 	addss	%xmm2, %xmm2
    00003876: 	addss	%xmm2, %xmm1
    0000387a: 	addss	%xmm3, %xmm2
    0000387e: 	subss	%xmm2, %xmm1
    00003882: 	addss	%xmm1, %xmm0
    00003886: 	addss	%xmm1, %xmm0
    0000388a: 	addss	%xmm1, %xmm0
    0000388e: 	addss	%xmm1, %xmm0
    00003892: 	cmpq	%rbp, %rax
    00003895: 	jne	.Ltmp4426 # Offset: 14485
    00003897: 	movaps	0x10(%rsp), %xmm5
    0000389c: 	pxor	%xmm1, %xmm1
    000038a0: 	andps	%xmm0, %xmm5
    000038a3: 	cvtss2sd	%xmm5, %xmm1
    000038a7: 	comisd	0x20(%rsp), %xmm1
    000038ad: 	jbe	.Ltmp4427 # Offset: 14509
    000038af: 	divss	%xmm0, %xmm0
.Ltmp4427:
    000038b3: 	movsd	0x50(%rsp), %xmm5
    000038b9: 	cvtss2sd	%xmm0, %xmm0
    000038bd: 	andpd	0x40(%rsp), %xmm0
    000038c3: 	comisd	%xmm0, %xmm5
    000038c7: 	jbe	.Ltmp4428 # Offset: 14535
.Ltmp4462:
    000038cd: 	addl	$0x1, %r15d
    000038d1: 	cmpl	%edx, %r15d
    000038d4: 	jl	.Ltmp4429 # Offset: 14548
.Ltmp4424:
    000038da: 	movq	%r13, %rsi
    000038dd: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000038e4: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 14564
    000038e9: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000038f0: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000038f7: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000038fe: 	je	.Ltmp4430 # Offset: 14590
.Ltmp4489:
    00003904: 	movq	-0x20(%rax), %rbp
    00003908: 	callq	clock@PLT # Offset: 14600
    0000390d: 	pxor	%xmm0, %xmm0
    00003911: 	movq	%rax, end_time(%rip)
    00003918: 	movq	%rbp, %rdi
    0000391b: 	subq	start_time(%rip), %rax
    00003922: 	cvtsi2sd	%rax, %xmm0
    00003927: 	divsd	DATAat0x4d640(%rip), %xmm0
    0000392f: 	callq	_Z13record_resultdPKc # Offset: 14639
    00003934: 	movq	0x130(%rsp), %rdi
    0000393c: 	cmpq	0x60(%rsp), %rdi
    00003941: 	je	.Ltmp4431 # Offset: 14657
    00003943: 	movq	0x140(%rsp), %rax
    0000394b: 	leaq	0x1(%rax), %rsi
    0000394f: 	callq	_ZdlPvm@PLT # Offset: 14671
.Ltmp4431:
    00003954: 	movq	0x68(%rsp), %rsi
    00003959: 	leaq	DATAat0x4d44e(%rip), %rdx
    00003960: 	movq	%r13, %rdi
    00003963: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 14691
    00003968: 	movss	0x8(%rsp), %xmm0
    0000396e: 	movq	%r13, %rdx
    00003971: 	movl	$0x1f40, %esi
    00003976: 	movq	%r14, %rdi
    00003979: 	callq	_Z9test_CSE4If14custom_cse_mulIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 14713
    0000397e: 	movq	0x130(%rsp), %rdi
    00003986: 	cmpq	0x60(%rsp), %rdi
    0000398b: 	je	.Ltmp4432 # Offset: 14731
    0000398d: 	movq	0x140(%rsp), %rax
    00003995: 	leaq	0x1(%rax), %rsi
    00003999: 	callq	_ZdlPvm@PLT # Offset: 14745
.Ltmp4432:
    0000399e: 	movq	0x68(%rsp), %rsi
    000039a3: 	leaq	DATAat0x4d45e(%rip), %rdx
    000039aa: 	movq	%r13, %rdi
    000039ad: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 14765
    000039b2: 	movss	0x8(%rsp), %xmm0
    000039b8: 	movq	%r13, %rdx
    000039bb: 	movl	$0x1f40, %esi
    000039c0: 	movq	%r14, %rdi
    000039c3: 	callq	_Z17test_CSE4_halfoptIf14custom_cse_divIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 14787
    000039c8: 	movq	0x130(%rsp), %rdi
    000039d0: 	cmpq	0x60(%rsp), %rdi
    000039d5: 	je	.Ltmp4433 # Offset: 14805
    000039d7: 	movq	0x140(%rsp), %rax
    000039df: 	leaq	0x1(%rax), %rsi
    000039e3: 	callq	_ZdlPvm@PLT # Offset: 14819
.Ltmp4433:
    000039e8: 	movq	0x68(%rsp), %rsi
    000039ed: 	leaq	DATAat0x4d475(%rip), %rdx
    000039f4: 	movq	%r13, %rdi
    000039f7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 14839
    000039fc: 	movss	0x8(%rsp), %xmm0
    00003a02: 	movq	%r13, %rdx
    00003a05: 	movl	$0x1f40, %esi
    00003a0a: 	movq	%r14, %rdi
    00003a0d: 	callq	_Z9test_CSE4If14custom_cse_divIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 14861
    00003a12: 	movq	0x130(%rsp), %rdi
    00003a1a: 	cmpq	0x60(%rsp), %rdi
    00003a1f: 	je	.Ltmp4434 # Offset: 14879
    00003a21: 	movq	0x140(%rsp), %rax
    00003a29: 	leaq	0x1(%rax), %rsi
    00003a2d: 	callq	_ZdlPvm@PLT # Offset: 14893
.Ltmp4434:
    00003a32: 	movq	0x68(%rsp), %rsi
    00003a37: 	leaq	DATAat0x4d483(%rip), %rdx
    00003a3e: 	movq	%r13, %rdi
    00003a41: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 14913
    00003a46: 	movss	0x8(%rsp), %xmm0
    00003a4c: 	movq	%r13, %rdx
    00003a4f: 	movl	$0x1f40, %esi
    00003a54: 	movq	%r14, %rdi
    00003a57: 	callq	_Z17test_CSE4_halfoptIf14custom_cse_mixIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 14935
    00003a5c: 	movq	0x130(%rsp), %rdi
    00003a64: 	cmpq	0x60(%rsp), %rdi
    00003a69: 	je	.Ltmp4435 # Offset: 14953
    00003a6b: 	movq	0x140(%rsp), %rax
    00003a73: 	leaq	0x1(%rax), %rsi
    00003a77: 	callq	_ZdlPvm@PLT # Offset: 14967
.Ltmp4435:
    00003a7c: 	movq	0x68(%rsp), %rsi
    00003a81: 	leaq	DATAat0x4d497(%rip), %rdx
    00003a88: 	movq	%r13, %rdi
    00003a8b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 14987
    00003a90: 	movss	0x8(%rsp), %xmm0
    00003a96: 	movq	%r13, %rdx
    00003a99: 	movl	$0x1f40, %esi
    00003a9e: 	movq	%r14, %rdi
    00003aa1: 	callq	_Z9test_CSE4If14custom_cse_mixIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 15009
    00003aa6: 	movq	0x130(%rsp), %rdi
    00003aae: 	cmpq	0x60(%rsp), %rdi
    00003ab3: 	je	.Ltmp4436 # Offset: 15027
    00003ab5: 	movq	0x140(%rsp), %rax
    00003abd: 	leaq	0x1(%rax), %rsi
    00003ac1: 	callq	_ZdlPvm@PLT # Offset: 15041
.Ltmp4436:
    00003ac6: 	movq	0x68(%rsp), %r15
    00003acb: 	leaq	0xf0(%rsp), %rdi
    00003ad3: 	leaq	DATAat0x4d4a2(%rip), %rdx
    00003ada: 	movq	%r15, %rsi
    00003add: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 15069
    00003ae2: 	movl	iterations(%rip), %edx
    00003ae8: 	xorl	%r8d, %r8d
    00003aeb: 	xorl	%ecx, %ecx
    00003aed: 	movl	$0x1f40, %esi
    00003af2: 	movq	0xf0(%rsp), %rdi
    00003afa: 	callq	_Z9summarizePKciiii # Offset: 15098
    00003aff: 	leaq	DATAat0x4d4a9(%rip), %rdx
    00003b06: 	movq	%r15, %rsi
    00003b09: 	movq	%r13, %rdi
    00003b0c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 15116
    00003b11: 	callq	clock@PLT # Offset: 15121
    00003b16: 	movq	%rax, start_time(%rip)
    00003b1d: 	movl	iterations(%rip), %eax
    00003b23: 	testl	%eax, %eax
    00003b25: 	jle	.Ltmp4437 # Offset: 15141
    00003b2b: 	pxor	%xmm4, %xmm4
    00003b2f: 	xorl	%ebp, %ebp
    00003b31: 	leaq	0x154(%rsp), %r12
    00003b39: 	movss	%xmm4, 0x2c(%rsp)
    00003b3f: 	nop # Size: 1
.Ltmp4439:
    00003b40: 	movss	0x150(%rsp), %xmm2
    00003b49: 	movss	0x2c(%rsp), %xmm1
    00003b4f: 	movq	%r12, %rax
    00003b52: 	movaps	%xmm2, %xmm0
    00003b55: 	subss	0x154(%rsp), %xmm0
    00003b5e: 	addss	%xmm0, %xmm1
    00003b62: 	addss	%xmm0, %xmm1
    00003b66: 	addss	%xmm0, %xmm1
    00003b6a: 	addss	%xmm0, %xmm1
    00003b6e: 	addss	%xmm0, %xmm1
    00003b72: 	addss	%xmm0, %xmm1
    00003b76: 	addss	%xmm0, %xmm1
    00003b7a: 	addss	%xmm1, %xmm0
    00003b7e: 	nop # Size: 2
.Ltmp4438:
    00003b80: 	movaps	%xmm2, %xmm1
    00003b83: 	movss	(%rax), %xmm2
    00003b87: 	addq	$0x4, %rax
    00003b8b: 	subss	%xmm2, %xmm1
    00003b8f: 	addss	%xmm1, %xmm0
    00003b93: 	addss	%xmm1, %xmm0
    00003b97: 	addss	%xmm1, %xmm0
    00003b9b: 	addss	%xmm1, %xmm0
    00003b9f: 	addss	%xmm1, %xmm0
    00003ba3: 	addss	%xmm1, %xmm0
    00003ba7: 	addss	%xmm1, %xmm0
    00003bab: 	addss	%xmm1, %xmm0
    00003baf: 	cmpq	%rbx, %rax
    00003bb2: 	jne	.Ltmp4438 # Offset: 15282
    00003bb4: 	movq	%r13, %rdi
    00003bb7: 	callq	"_Z30check_shifted_variable_sum_CSEIf14custom_cse_addIfEEvT_S2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 15287
    00003bbc: 	addl	$0x1, %ebp
    00003bbf: 	cmpl	iterations(%rip), %ebp
    00003bc5: 	jl	.Ltmp4439 # Offset: 15301
.Ltmp4437:
    00003bcb: 	movq	%r13, %rsi
    00003bce: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00003bd5: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 15317
    00003bda: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00003be1: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00003be8: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00003bef: 	je	.Ltmp4440 # Offset: 15343
.Ltmp4488:
    00003bf5: 	movq	-0x20(%rax), %rbp
    00003bf9: 	callq	clock@PLT # Offset: 15353
    00003bfe: 	pxor	%xmm0, %xmm0
    00003c02: 	movq	%rax, end_time(%rip)
    00003c09: 	movq	%rbp, %rdi
    00003c0c: 	subq	start_time(%rip), %rax
    00003c13: 	cvtsi2sd	%rax, %xmm0
    00003c18: 	divsd	DATAat0x4d640(%rip), %xmm0
    00003c20: 	callq	_Z13record_resultdPKc # Offset: 15392
    00003c25: 	movq	0x130(%rsp), %rdi
    00003c2d: 	cmpq	0x60(%rsp), %rdi
    00003c32: 	je	.Ltmp4441 # Offset: 15410
    00003c34: 	movq	0x140(%rsp), %rax
    00003c3c: 	leaq	0x1(%rax), %rsi
    00003c40: 	callq	_ZdlPvm@PLT # Offset: 15424
.Ltmp4441:
    00003c45: 	movq	0x68(%rsp), %rsi
    00003c4a: 	leaq	DATAat0x4d4b8(%rip), %rdx
    00003c51: 	movq	%r13, %rdi
    00003c54: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 15444
    00003c59: 	movss	0x8(%rsp), %xmm0
    00003c5f: 	movq	%r13, %rdx
    00003c62: 	movl	$0x1f40, %esi
    00003c67: 	movq	%r14, %rdi
    00003c6a: 	callq	_Z17test_CSE8_halfoptIf14custom_cse_addIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 15466
    00003c6f: 	movq	0x130(%rsp), %rdi
    00003c77: 	cmpq	0x60(%rsp), %rdi
    00003c7c: 	je	.Ltmp4442 # Offset: 15484
    00003c7e: 	movq	0x140(%rsp), %rax
    00003c86: 	leaq	0x1(%rax), %rsi
    00003c8a: 	callq	_ZdlPvm@PLT # Offset: 15498
.Ltmp4442:
    00003c8f: 	movq	0x68(%rsp), %rsi
    00003c94: 	leaq	DATAat0x4d4cc(%rip), %rdx
    00003c9b: 	movq	%r13, %rdi
    00003c9e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 15518
    00003ca3: 	movss	0x8(%rsp), %xmm0
    00003ca9: 	movq	%r13, %rdx
    00003cac: 	movl	$0x1f40, %esi
    00003cb1: 	movq	%r14, %rdi
    00003cb4: 	callq	_Z20test_CSE8_add_inlineIf14custom_cse_addIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 15540
    00003cb9: 	movq	0x130(%rsp), %rdi
    00003cc1: 	cmpq	0x60(%rsp), %rdi
    00003cc6: 	je	.Ltmp4443 # Offset: 15558
    00003cc8: 	movq	0x140(%rsp), %rax
    00003cd0: 	leaq	0x1(%rax), %rsi
    00003cd4: 	callq	_ZdlPvm@PLT # Offset: 15572
.Ltmp4443:
    00003cd9: 	movq	0x68(%rsp), %rsi
    00003cde: 	leaq	DATAat0x4d4de(%rip), %rdx
    00003ce5: 	movq	%r13, %rdi
    00003ce8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 15592
    00003ced: 	movss	0x8(%rsp), %xmm0
    00003cf3: 	movq	%r13, %rdx
    00003cf6: 	movl	$0x1f40, %esi
    00003cfb: 	movq	%r14, %rdi
    00003cfe: 	callq	_Z28test_CSE8_add_inline_flippedIf14custom_cse_addIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 15614
    00003d03: 	movq	0x130(%rsp), %rdi
    00003d0b: 	cmpq	0x60(%rsp), %rdi
    00003d10: 	je	.Ltmp4444 # Offset: 15632
    00003d12: 	movq	0x140(%rsp), %rax
    00003d1a: 	leaq	0x1(%rax), %rsi
    00003d1e: 	callq	_ZdlPvm@PLT # Offset: 15646
.Ltmp4444:
    00003d23: 	movq	0x68(%rsp), %rsi
    00003d28: 	leaq	DATAat0x4d4f8(%rip), %rdx
    00003d2f: 	movq	%r13, %rdi
    00003d32: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 15666
    00003d37: 	movss	0x8(%rsp), %xmm0
    00003d3d: 	movq	%r13, %rdx
    00003d40: 	movl	$0x1f40, %esi
    00003d45: 	movq	%r14, %rdi
    00003d48: 	callq	_Z9test_CSE8If14custom_cse_addIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 15688
    00003d4d: 	movq	0x130(%rsp), %rdi
    00003d55: 	cmpq	0x60(%rsp), %rdi
    00003d5a: 	je	.Ltmp4445 # Offset: 15706
    00003d5c: 	movq	0x140(%rsp), %rax
    00003d64: 	leaq	0x1(%rax), %rsi
    00003d68: 	callq	_ZdlPvm@PLT # Offset: 15720
.Ltmp4445:
    00003d6d: 	movq	0x68(%rsp), %rsi
    00003d72: 	leaq	DATAat0x4d503(%rip), %rdx
    00003d79: 	movq	%r13, %rdi
    00003d7c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 15740
    00003d81: 	movss	0x8(%rsp), %xmm0
    00003d87: 	movq	%r13, %rdx
    00003d8a: 	movl	$0x1f40, %esi
    00003d8f: 	movq	%r14, %rdi
    00003d92: 	callq	_Z17test_CSE8_halfoptIf14custom_cse_subIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 15762
    00003d97: 	movq	0x130(%rsp), %rdi
    00003d9f: 	cmpq	0x60(%rsp), %rdi
    00003da4: 	je	.Ltmp4446 # Offset: 15780
    00003da6: 	movq	0x140(%rsp), %rax
    00003dae: 	leaq	0x1(%rax), %rsi
    00003db2: 	callq	_ZdlPvm@PLT # Offset: 15794
.Ltmp4446:
    00003db7: 	movq	0x68(%rsp), %rsi
    00003dbc: 	leaq	DATAat0x4d51c(%rip), %rdx
    00003dc3: 	movq	%r13, %rdi
    00003dc6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 15814
    00003dcb: 	movss	0x8(%rsp), %xmm0
    00003dd1: 	movq	%r13, %rdx
    00003dd4: 	movl	$0x1f40, %esi
    00003dd9: 	movq	%r14, %rdi
    00003ddc: 	callq	_Z9test_CSE8If14custom_cse_subIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 15836
    00003de1: 	movq	0x130(%rsp), %rdi
    00003de9: 	cmpq	0x60(%rsp), %rdi
    00003dee: 	je	.Ltmp4447 # Offset: 15854
    00003df0: 	movq	0x140(%rsp), %rax
    00003df8: 	leaq	0x1(%rax), %rsi
    00003dfc: 	callq	_ZdlPvm@PLT # Offset: 15868
.Ltmp4447:
    00003e01: 	movq	0x68(%rsp), %rsi
    00003e06: 	leaq	DATAat0x4d52c(%rip), %rdx
    00003e0d: 	movq	%r13, %rdi
    00003e10: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 15888
    00003e15: 	movss	0x8(%rsp), %xmm0
    00003e1b: 	movq	%r13, %rdx
    00003e1e: 	movl	$0x1f40, %esi
    00003e23: 	movq	%r14, %rdi
    00003e26: 	callq	_Z17test_CSE8_halfoptIf14custom_cse_mulIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 15910
    00003e2b: 	movq	0x130(%rsp), %rdi
    00003e33: 	cmpq	0x60(%rsp), %rdi
    00003e38: 	je	.Ltmp4448 # Offset: 15928
    00003e3a: 	movq	0x140(%rsp), %rax
    00003e42: 	leaq	0x1(%rax), %rsi
    00003e46: 	callq	_ZdlPvm@PLT # Offset: 15942
.Ltmp4448:
    00003e4b: 	movq	0x68(%rsp), %rsi
    00003e50: 	leaq	DATAat0x4d545(%rip), %rdx
    00003e57: 	movq	%r13, %rdi
    00003e5a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 15962
    00003e5f: 	movss	0x8(%rsp), %xmm0
    00003e65: 	movq	%r13, %rdx
    00003e68: 	movl	$0x1f40, %esi
    00003e6d: 	movq	%r14, %rdi
    00003e70: 	callq	_Z9test_CSE8If14custom_cse_mulIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 15984
    00003e75: 	movq	0x130(%rsp), %rdi
    00003e7d: 	cmpq	0x60(%rsp), %rdi
    00003e82: 	je	.Ltmp4449 # Offset: 16002
    00003e84: 	movq	0x140(%rsp), %rax
    00003e8c: 	leaq	0x1(%rax), %rsi
    00003e90: 	callq	_ZdlPvm@PLT # Offset: 16016
.Ltmp4449:
    00003e95: 	movq	0x68(%rsp), %rsi
    00003e9a: 	leaq	DATAat0x4d555(%rip), %rdx
    00003ea1: 	movq	%r13, %rdi
    00003ea4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 16036
    00003ea9: 	movss	0x8(%rsp), %xmm0
    00003eaf: 	movq	%r13, %rdx
    00003eb2: 	movl	$0x1f40, %esi
    00003eb7: 	movq	%r14, %rdi
    00003eba: 	callq	_Z17test_CSE8_halfoptIf14custom_cse_divIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 16058
    00003ebf: 	movq	0x130(%rsp), %rdi
    00003ec7: 	cmpq	0x60(%rsp), %rdi
    00003ecc: 	je	.Ltmp4450 # Offset: 16076
    00003ece: 	movq	0x140(%rsp), %rax
    00003ed6: 	leaq	0x1(%rax), %rsi
    00003eda: 	callq	_ZdlPvm@PLT # Offset: 16090
.Ltmp4450:
    00003edf: 	movq	0x68(%rsp), %rsi
    00003ee4: 	leaq	DATAat0x4d56c(%rip), %rdx
    00003eeb: 	movq	%r13, %rdi
    00003eee: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 16110
    00003ef3: 	movss	0x8(%rsp), %xmm0
    00003ef9: 	movq	%r13, %rdx
    00003efc: 	movl	$0x1f40, %esi
    00003f01: 	movq	%r14, %rdi
    00003f04: 	callq	_Z9test_CSE8If14custom_cse_divIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 16132
    00003f09: 	movq	0x130(%rsp), %rdi
    00003f11: 	cmpq	0x60(%rsp), %rdi
    00003f16: 	je	.Ltmp4451 # Offset: 16150
    00003f18: 	movq	0x140(%rsp), %rax
    00003f20: 	leaq	0x1(%rax), %rsi
    00003f24: 	callq	_ZdlPvm@PLT # Offset: 16164
.Ltmp4451:
    00003f29: 	movq	0x68(%rsp), %rsi
    00003f2e: 	leaq	DATAat0x4d57a(%rip), %rdx
    00003f35: 	movq	%r13, %rdi
    00003f38: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 16184
    00003f3d: 	movss	0x8(%rsp), %xmm0
    00003f43: 	movq	%r13, %rdx
    00003f46: 	movl	$0x1f40, %esi
    00003f4b: 	movq	%r14, %rdi
    00003f4e: 	callq	_Z17test_CSE8_halfoptIf14custom_cse_mixIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 16206
    00003f53: 	movq	0x130(%rsp), %rdi
    00003f5b: 	cmpq	0x60(%rsp), %rdi
    00003f60: 	je	.Ltmp4452 # Offset: 16224
    00003f62: 	movq	0x140(%rsp), %rax
    00003f6a: 	leaq	0x1(%rax), %rsi
    00003f6e: 	callq	_ZdlPvm@PLT # Offset: 16238
.Ltmp4452:
    00003f73: 	movq	0x68(%rsp), %rsi
    00003f78: 	leaq	DATAat0x4d58e(%rip), %rdx
    00003f7f: 	movq	%r13, %rdi
    00003f82: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 16258
    00003f87: 	movss	0x8(%rsp), %xmm0
    00003f8d: 	movq	%r13, %rdx
    00003f90: 	movl	$0x1f40, %esi
    00003f95: 	movq	%r14, %rdi
    00003f98: 	callq	_Z9test_CSE8If14custom_cse_mixIfEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 16280
    00003f9d: 	movq	0x130(%rsp), %rdi
    00003fa5: 	cmpq	0x60(%rsp), %rdi
    00003faa: 	je	.Ltmp4453 # Offset: 16298
    00003fac: 	movq	0x140(%rsp), %rax
    00003fb4: 	leaq	0x1(%rax), %rsi
    00003fb8: 	callq	_ZdlPvm@PLT # Offset: 16312
.Ltmp4453:
    00003fbd: 	movq	0x68(%rsp), %rbx
    00003fc2: 	leaq	0x110(%rsp), %rdi
    00003fca: 	leaq	DATAat0x4d599(%rip), %rdx
    00003fd1: 	movq	%rbx, %rsi
    00003fd4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 16340
    00003fd9: 	movl	iterations(%rip), %edx
    00003fdf: 	xorl	%r8d, %r8d
    00003fe2: 	xorl	%ecx, %ecx
    00003fe4: 	movl	$0x1f40, %esi
    00003fe9: 	movq	0x110(%rsp), %rdi
    00003ff1: 	callq	_Z9summarizePKciiii # Offset: 16369
    00003ff6: 	leaq	DATAat0x4d5a0(%rip), %rdx
    00003ffd: 	movq	%rbx, %rsi
    00004000: 	movq	%r13, %rdi
    00004003: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 16387
    00004008: 	movss	0x8(%rsp), %xmm0
    0000400e: 	movq	%r13, %rsi
    00004011: 	movq	%r14, %rdi
    00004014: 	callq	_Z16TestUnrolledTypeIfLi4EEvPT_S0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 16404
    00004019: 	movq	0x130(%rsp), %rdi
    00004021: 	cmpq	0x60(%rsp), %rdi
    00004026: 	je	.Ltmp4454 # Offset: 16422
    00004028: 	movq	0x140(%rsp), %rax
    00004030: 	leaq	0x1(%rax), %rsi
    00004034: 	callq	_ZdlPvm@PLT # Offset: 16436
.Ltmp4454:
    00004039: 	movq	0x68(%rsp), %rsi
    0000403e: 	leaq	DATAat0x4d5ae(%rip), %rdx
    00004045: 	movq	%r13, %rdi
    00004048: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 16456
    0000404d: 	movss	0x8(%rsp), %xmm0
    00004053: 	movq	%r13, %rsi
    00004056: 	movq	%r14, %rdi
    00004059: 	callq	_Z16TestUnrolledTypeIfLi8EEvPT_S0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 16473
    0000405e: 	movq	0x130(%rsp), %rdi
    00004066: 	cmpq	0x60(%rsp), %rdi
    0000406b: 	je	.Ltmp4455 # Offset: 16491
    0000406d: 	movq	0x140(%rsp), %rax
    00004075: 	leaq	0x1(%rax), %rsi
    00004079: 	callq	_ZdlPvm@PLT # Offset: 16505
.Ltmp4455:
    0000407e: 	movq	0x110(%rsp), %rdi
    00004086: 	leaq	0x120(%rsp), %rax
    0000408e: 	cmpq	%rax, %rdi
    00004091: 	je	.Ltmp4456 # Offset: 16529
    00004093: 	movq	0x120(%rsp), %rax
    0000409b: 	leaq	0x1(%rax), %rsi
    0000409f: 	callq	_ZdlPvm@PLT # Offset: 16543
.Ltmp4456:
    000040a4: 	movq	0xf0(%rsp), %rdi
    000040ac: 	leaq	0x100(%rsp), %rax
    000040b4: 	cmpq	%rax, %rdi
    000040b7: 	je	.Ltmp4457 # Offset: 16567
    000040b9: 	movq	0x100(%rsp), %rax
    000040c1: 	leaq	0x1(%rax), %rsi
    000040c5: 	callq	_ZdlPvm@PLT # Offset: 16581
.Ltmp4457:
    000040ca: 	movq	0xd0(%rsp), %rdi
    000040d2: 	leaq	0xe0(%rsp), %rax
    000040da: 	cmpq	%rax, %rdi
    000040dd: 	je	.Ltmp4458 # Offset: 16605
    000040df: 	movq	0xe0(%rsp), %rax
    000040e7: 	leaq	0x1(%rax), %rsi
    000040eb: 	callq	_ZdlPvm@PLT # Offset: 16619
.Ltmp4458:
    000040f0: 	movq	0xb0(%rsp), %rdi
    000040f8: 	leaq	0xc0(%rsp), %rax
    00004100: 	cmpq	%rax, %rdi
    00004103: 	je	.Ltmp4459 # Offset: 16643
    00004105: 	movq	0xc0(%rsp), %rax
    0000410d: 	leaq	0x1(%rax), %rsi
    00004111: 	callq	_ZdlPvm@PLT # Offset: 16657
.Ltmp4459:
    00004116: 	movq	0x90(%rsp), %rdi
    0000411e: 	leaq	0xa0(%rsp), %rax
    00004126: 	cmpq	%rax, %rdi
    00004129: 	je	.Ltmp4460 # Offset: 16681
    0000412b: 	movq	0xa0(%rsp), %rax
    00004133: 	leaq	0x1(%rax), %rsi
    00004137: 	callq	_ZdlPvm@PLT # Offset: 16695
.Ltmp4460:
    0000413c: 	movq	0x7e58(%rsp), %rax
    00004144: 	subq	%fs:0x28, %rax
    0000414d: 	jne	.Ltmp4461 # Offset: 16717
    00004153: 	addq	$0x7e68, %rsp
    0000415a: 	popq	%rbx
    0000415b: 	popq	%rbp
    0000415c: 	popq	%r12
    0000415e: 	popq	%r13
    00004160: 	popq	%r14
    00004162: 	popq	%r15
    00004164: 	retq # Offset: 16740
    00004165: 	nopl	(%rax) # Size: 3
.Ltmp4428:
    00004168: 	movq	0x130(%rsp), %rdx
    00004170: 	leaq	DATAat0x4d004(%rip), %rsi
    00004177: 	movl	$0x1, %edi
    0000417c: 	xorl	%eax, %eax
    0000417e: 	callq	__printf_chk@PLT # Offset: 16766
    00004183: 	movl	iterations(%rip), %edx
    00004189: 	jmp	.Ltmp4462 # Offset: 16777
    0000418e: 	nop # Size: 2
.Ltmp4419:
    00004190: 	movq	0x130(%rsp), %rdx
    00004198: 	leaq	DATAat0x4d004(%rip), %rsi
    0000419f: 	movl	$0x1, %edi
    000041a4: 	xorl	%eax, %eax
    000041a6: 	callq	__printf_chk@PLT # Offset: 16806
    000041ab: 	movl	iterations(%rip), %edx
    000041b1: 	jmp	.Ltmp4463 # Offset: 16817
    000041b6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp4408:
    000041c0: 	movq	0x130(%rsp), %rdx
    000041c8: 	leaq	DATAat0x4d004(%rip), %rsi
    000041cf: 	movl	$0x1, %edi
    000041d4: 	xorl	%eax, %eax
    000041d6: 	callq	__printf_chk@PLT # Offset: 16854
    000041db: 	movl	iterations(%rip), %edx
    000041e1: 	jmp	.Ltmp4464 # Offset: 16865
    000041e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp4400:
    000041f0: 	movq	0x130(%rsp), %rdx
    000041f8: 	leaq	DATAat0x4d004(%rip), %rsi
    000041ff: 	movl	$0x1, %edi
    00004204: 	xorl	%eax, %eax
    00004206: 	callq	__printf_chk@PLT # Offset: 16902
    0000420b: 	movl	iterations(%rip), %edx
    00004211: 	jmp	.Ltmp4465 # Offset: 16913
    00004216: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp4389:
    00004220: 	movq	0x130(%rsp), %rdx
    00004228: 	leaq	DATAat0x4d004(%rip), %rsi
    0000422f: 	movl	$0x1, %edi
    00004234: 	xorl	%eax, %eax
    00004236: 	callq	__printf_chk@PLT # Offset: 16950
    0000423b: 	movl	iterations(%rip), %edx
    00004241: 	jmp	.Ltmp4466 # Offset: 16961
    00004246: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp4381:
    00004250: 	movq	0x130(%rsp), %rdx
    00004258: 	movq	%r15, %rsi
    0000425b: 	movl	$0x1, %edi
    00004260: 	xorl	%eax, %eax
    00004262: 	callq	__printf_chk@PLT # Offset: 16994
    00004267: 	movl	iterations(%rip), %edx
    0000426d: 	jmp	.Ltmp4467 # Offset: 17005
    00004272: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4374:
    00004278: 	movq	0x130(%rsp), %rdx
    00004280: 	leaq	DATAat0x4d004(%rip), %rsi
    00004287: 	movl	$0x1, %edi
    0000428c: 	xorl	%eax, %eax
    0000428e: 	callq	__printf_chk@PLT # Offset: 17038
    00004293: 	movl	iterations(%rip), %edx
    00004299: 	jmp	.Ltmp4468 # Offset: 17049
    0000429e: 	nop # Size: 2
.Ltmp4366:
    000042a0: 	movq	0x130(%rsp), %rdx
    000042a8: 	movq	%r15, %rsi
    000042ab: 	movl	$0x1, %edi
    000042b0: 	xorl	%eax, %eax
    000042b2: 	callq	__printf_chk@PLT # Offset: 17074
    000042b7: 	movl	iterations(%rip), %eax
    000042bd: 	jmp	.Ltmp4469 # Offset: 17085
    000042c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4359:
    000042c8: 	movq	0x130(%rsp), %rdx
    000042d0: 	leaq	DATAat0x4d004(%rip), %rsi
    000042d7: 	movl	$0x1, %edi
    000042dc: 	xorl	%eax, %eax
    000042de: 	callq	__printf_chk@PLT # Offset: 17118
    000042e3: 	movl	iterations(%rip), %edx
    000042e9: 	jmp	.Ltmp4470 # Offset: 17129
    000042ee: 	nop # Size: 2
.Ltmp4351:
    000042f0: 	movq	0x130(%rsp), %rdx
    000042f8: 	movq	%r15, %rsi
    000042fb: 	movl	$0x1, %edi
    00004300: 	xorl	%eax, %eax
    00004302: 	callq	__printf_chk@PLT # Offset: 17154
    00004307: 	movl	iterations(%rip), %edx
    0000430d: 	jmp	.Ltmp4471 # Offset: 17165
    00004312: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4344:
    00004318: 	movq	0x130(%rsp), %rdx
    00004320: 	movq	%r15, %rsi
    00004323: 	movl	$0x1, %edi
    00004328: 	xorl	%eax, %eax
    0000432a: 	callq	__printf_chk@PLT # Offset: 17194
    0000432f: 	movl	iterations(%rip), %edx
    00004335: 	jmp	.Ltmp4472 # Offset: 17205
    0000433a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4337:
    00004340: 	movq	0x130(%rsp), %rdx
    00004348: 	movq	%r15, %rsi
    0000434b: 	movl	$0x1, %edi
    00004350: 	xorl	%eax, %eax
    00004352: 	callq	__printf_chk@PLT # Offset: 17234
    00004357: 	movl	iterations(%rip), %edx
    0000435d: 	jmp	.Ltmp4473 # Offset: 17245
    00004362: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4330:
    00004368: 	movq	0x130(%rsp), %rdx
    00004370: 	leaq	DATAat0x4d004(%rip), %rsi
    00004377: 	movl	$0x1, %edi
    0000437c: 	xorl	%eax, %eax
    0000437e: 	callq	__printf_chk@PLT # Offset: 17278
    00004383: 	movl	iterations(%rip), %edx
    00004389: 	jmp	.Ltmp4474 # Offset: 17289
    0000438e: 	nop # Size: 2
.Ltmp4317:
    00004390: 	movq	0x130(%rsp), %rdx
    00004398: 	movq	%r15, %rsi
    0000439b: 	movl	$0x1, %edi
    000043a0: 	xorl	%eax, %eax
    000043a2: 	callq	__printf_chk@PLT # Offset: 17314
    000043a7: 	movl	iterations(%rip), %eax
    000043ad: 	jmp	.Ltmp4475 # Offset: 17325
    000043b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4310:
    000043b8: 	movq	0x130(%rsp), %rdx
    000043c0: 	movq	%r15, %rsi
    000043c3: 	movl	$0x1, %edi
    000043c8: 	xorl	%eax, %eax
    000043ca: 	callq	__printf_chk@PLT # Offset: 17354
    000043cf: 	movl	iterations(%rip), %edx
    000043d5: 	jmp	.Ltmp4476 # Offset: 17365
    000043da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4303:
    000043e0: 	movq	0x130(%rsp), %rdx
    000043e8: 	movq	%r15, %rsi
    000043eb: 	movl	$0x1, %edi
    000043f0: 	xorl	%eax, %eax
    000043f2: 	callq	__printf_chk@PLT # Offset: 17394
    000043f7: 	movl	iterations(%rip), %eax
    000043fd: 	jmp	.Ltmp4477 # Offset: 17405
    00004402: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4296:
    00004408: 	movq	0x130(%rsp), %rdx
    00004410: 	movq	%r15, %rsi
    00004413: 	movl	$0x1, %edi
    00004418: 	xorl	%eax, %eax
    0000441a: 	callq	__printf_chk@PLT # Offset: 17434
    0000441f: 	movl	iterations(%rip), %edx
    00004425: 	jmp	.Ltmp4478 # Offset: 17445
    0000442a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4289:
    00004430: 	movq	0x130(%rsp), %rdx
    00004438: 	movq	%r15, %rsi
    0000443b: 	movl	$0x1, %edi
    00004440: 	xorl	%eax, %eax
    00004442: 	callq	__printf_chk@PLT # Offset: 17474
    00004447: 	movl	iterations(%rip), %edx
    0000444d: 	jmp	.Ltmp4479 # Offset: 17485
    00004452: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4282:
    00004458: 	movq	0x130(%rsp), %rdx
    00004460: 	movq	%r15, %rsi
    00004463: 	movl	$0x1, %edi
    00004468: 	xorl	%eax, %eax
    0000446a: 	callq	__printf_chk@PLT # Offset: 17514
    0000446f: 	movl	iterations(%rip), %eax
    00004475: 	jmp	.Ltmp4480 # Offset: 17525
    0000447a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4275:
    00004480: 	movq	0x130(%rsp), %rdx
    00004488: 	movq	%r15, %rsi
    0000448b: 	movl	$0x1, %edi
    00004490: 	xorl	%eax, %eax
    00004492: 	callq	__printf_chk@PLT # Offset: 17554
    00004497: 	movl	iterations(%rip), %eax
    0000449d: 	jmp	.Ltmp4481 # Offset: 17565
    000044a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4268:
    000044a8: 	movq	0x130(%rsp), %rdx
    000044b0: 	movq	%r15, %rsi
    000044b3: 	movl	$0x1, %edi
    000044b8: 	xorl	%eax, %eax
    000044ba: 	callq	__printf_chk@PLT # Offset: 17594
    000044bf: 	movl	iterations(%rip), %eax
    000044c5: 	jmp	.Ltmp4482 # Offset: 17605
    000044ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4256:
    000044d0: 	movq	0x130(%rsp), %rdx
    000044d8: 	movq	%r15, %rsi
    000044db: 	movl	$0x1, %edi
    000044e0: 	xorl	%eax, %eax
    000044e2: 	callq	__printf_chk@PLT # Offset: 17634
    000044e7: 	movl	iterations(%rip), %edx
    000044ed: 	jmp	.Ltmp4483 # Offset: 17645
    000044f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4249:
    000044f8: 	movq	0x130(%rsp), %rdx
    00004500: 	movq	%r15, %rsi
    00004503: 	movl	$0x1, %edi
    00004508: 	xorl	%eax, %eax
    0000450a: 	callq	__printf_chk@PLT # Offset: 17674
    0000450f: 	movl	iterations(%rip), %edx
    00004515: 	jmp	.Ltmp4484 # Offset: 17685
    0000451a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4242:
    00004520: 	movq	0x130(%rsp), %rdx
    00004528: 	movq	%r15, %rsi
    0000452b: 	movl	$0x1, %edi
    00004530: 	xorl	%eax, %eax
    00004532: 	callq	__printf_chk@PLT # Offset: 17714
    00004537: 	movl	iterations(%rip), %eax
    0000453d: 	jmp	.Ltmp4485 # Offset: 17725
    00004542: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4235:
    00004548: 	movq	0x130(%rsp), %rdx
    00004550: 	movq	%r15, %rsi
    00004553: 	movl	$0x1, %edi
    00004558: 	xorl	%eax, %eax
    0000455a: 	callq	__printf_chk@PLT # Offset: 17754
    0000455f: 	movl	iterations(%rip), %edx
    00004565: 	jmp	.Ltmp4486 # Offset: 17765
.Ltmp4237:
    0000456a: 	movq	-0x8(%rdx), %rax
    0000456e: 	addq	$0x200, %rax
    00004574: 	jmp	.Ltmp4487 # Offset: 17780
.Ltmp4440:
    00004579: 	movq	-0x8(%rdx), %rax
    0000457d: 	addq	$0x200, %rax
    00004583: 	jmp	.Ltmp4488 # Offset: 17795
.Ltmp4430:
    00004588: 	movq	-0x8(%rdx), %rax
    0000458c: 	addq	$0x200, %rax
    00004592: 	jmp	.Ltmp4489 # Offset: 17810
.Ltmp4421:
    00004597: 	movq	-0x8(%rdx), %rax
    0000459b: 	addq	$0x200, %rax
    000045a1: 	jmp	.Ltmp4490 # Offset: 17825
.Ltmp4410:
    000045a6: 	movq	-0x8(%rdx), %rax
    000045aa: 	addq	$0x200, %rax
    000045b0: 	jmp	.Ltmp4491 # Offset: 17840
.Ltmp4402:
    000045b5: 	movq	-0x8(%rdx), %rax
    000045b9: 	addq	$0x200, %rax
    000045bf: 	jmp	.Ltmp4492 # Offset: 17855
.Ltmp4391:
    000045c4: 	movq	-0x8(%rdx), %rax
    000045c8: 	addq	$0x200, %rax
    000045ce: 	jmp	.Ltmp4493 # Offset: 17870
.Ltmp4383:
    000045d3: 	movq	-0x8(%rdx), %rax
    000045d7: 	addq	$0x200, %rax
    000045dd: 	jmp	.Ltmp4494 # Offset: 17885
.Ltmp4376:
    000045e2: 	movq	-0x8(%rdx), %rax
    000045e6: 	addq	$0x200, %rax
    000045ec: 	jmp	.Ltmp4495 # Offset: 17900
.Ltmp4368:
    000045f1: 	movq	-0x8(%rdx), %rax
    000045f5: 	addq	$0x200, %rax
    000045fb: 	jmp	.Ltmp4496 # Offset: 17915
.Ltmp4361:
    00004600: 	movq	-0x8(%rdx), %rax
    00004604: 	addq	$0x200, %rax
    0000460a: 	jmp	.Ltmp4497 # Offset: 17930
.Ltmp4353:
    0000460f: 	movq	-0x8(%rdx), %rax
    00004613: 	addq	$0x200, %rax
    00004619: 	jmp	.Ltmp4498 # Offset: 17945
.Ltmp4346:
    0000461e: 	movq	-0x8(%rdx), %rax
    00004622: 	addq	$0x200, %rax
    00004628: 	jmp	.Ltmp4499 # Offset: 17960
.Ltmp4339:
    0000462d: 	movq	-0x8(%rdx), %rax
    00004631: 	addq	$0x200, %rax
    00004637: 	jmp	.Ltmp4500 # Offset: 17975
.Ltmp4332:
    0000463c: 	movq	-0x8(%rdx), %rax
    00004640: 	addq	$0x200, %rax
    00004646: 	jmp	.Ltmp4501 # Offset: 17990
.Ltmp4324:
    0000464b: 	movq	-0x8(%rdx), %rax
    0000464f: 	addq	$0x200, %rax
    00004655: 	jmp	.Ltmp4502 # Offset: 18005
.Ltmp4319:
    0000465a: 	movq	-0x8(%rdx), %rax
    0000465e: 	addq	$0x200, %rax
    00004664: 	jmp	.Ltmp4503 # Offset: 18020
.Ltmp4312:
    00004669: 	movq	-0x8(%rdx), %rax
    0000466d: 	addq	$0x200, %rax
    00004673: 	jmp	.Ltmp4504 # Offset: 18035
.Ltmp4305:
    00004678: 	movq	-0x8(%rdx), %rax
    0000467c: 	addq	$0x200, %rax
    00004682: 	jmp	.Ltmp4505 # Offset: 18050
.Ltmp4298:
    00004687: 	movq	-0x8(%rdx), %rax
    0000468b: 	addq	$0x200, %rax
    00004691: 	jmp	.Ltmp4506 # Offset: 18065
.Ltmp4291:
    00004696: 	movq	-0x8(%rdx), %rax
    0000469a: 	addq	$0x200, %rax
    000046a0: 	jmp	.Ltmp4507 # Offset: 18080
.Ltmp4284:
    000046a5: 	movq	-0x8(%rdx), %rax
    000046a9: 	addq	$0x200, %rax
    000046af: 	jmp	.Ltmp4508 # Offset: 18095
.Ltmp4277:
    000046b4: 	movq	-0x8(%rdx), %rax
    000046b8: 	addq	$0x200, %rax
    000046be: 	jmp	.Ltmp4509 # Offset: 18110
.Ltmp4270:
    000046c3: 	movq	-0x8(%rdx), %rax
    000046c7: 	addq	$0x200, %rax
    000046cd: 	jmp	.Ltmp4510 # Offset: 18125
.Ltmp4263:
    000046d2: 	movq	-0x8(%rdx), %rax
    000046d6: 	addq	$0x200, %rax
    000046dc: 	jmp	.Ltmp4511 # Offset: 18140
.Ltmp4258:
    000046e1: 	movq	-0x8(%rdx), %rax
    000046e5: 	addq	$0x200, %rax
    000046eb: 	jmp	.Ltmp4512 # Offset: 18155
.Ltmp4251:
    000046f0: 	movq	-0x8(%rdx), %rax
    000046f4: 	addq	$0x200, %rax
    000046fa: 	jmp	.Ltmp4513 # Offset: 18170
.Ltmp4244:
    000046ff: 	movq	-0x8(%rdx), %rax
    00004703: 	addq	$0x200, %rax
    00004709: 	jmp	.Ltmp4514 # Offset: 18185
.Ltmp4461:
    0000470e: 	callq	__stack_chk_fail@PLT # Offset: 18190
    00004713: 	endbr64
    00004717: 	movq	%rax, %rbp
    0000471a: 	jmp	.Ltmp4515 # Offset: 18202
    0000471c: 	endbr64
.Ltmp4517:
    00004720: 	movq	%rax, %rbp
    00004723: 	jmp	.Ltmp4516 # Offset: 18211
    00004725: 	endbr64
    00004729: 	jmp	.Ltmp4517 # Offset: 18217
.Ltmp4521:
    0000472b: 	movq	0x130(%rsp), %rdi
    00004733: 	cmpq	0x60(%rsp), %rdi
    00004738: 	je	.Ltmp4515 # Offset: 18232
.Ltmp4532:
    0000473a: 	movq	0x140(%rsp), %rax
    00004742: 	leaq	0x1(%rax), %rsi
    00004746: 	callq	_ZdlPvm@PLT # Offset: 18246
.Ltmp4515:
    0000474b: 	movq	0x90(%rsp), %rdi
    00004753: 	leaq	0xa0(%rsp), %rax
    0000475b: 	cmpq	%rax, %rdi
    0000475e: 	je	.Ltmp4518 # Offset: 18270
    00004760: 	movq	0xa0(%rsp), %rax
    00004768: 	leaq	0x1(%rax), %rsi
    0000476c: 	callq	_ZdlPvm@PLT # Offset: 18284
.Ltmp4518:
    00004771: 	movq	%rbp, %rdi
    00004774: 	callq	_Unwind_Resume@PLT # Offset: 18292
.Ltmp4516:
    00004779: 	movq	0x130(%rsp), %rdi
    00004781: 	cmpq	0x60(%rsp), %rdi
    00004786: 	je	.Ltmp4519 # Offset: 18310
    00004788: 	movq	0x140(%rsp), %rax
    00004790: 	leaq	0x1(%rax), %rsi
    00004794: 	callq	_ZdlPvm@PLT # Offset: 18324
.Ltmp4519:
    00004799: 	movq	0xd0(%rsp), %rdi
    000047a1: 	leaq	0xe0(%rsp), %rax
    000047a9: 	cmpq	%rax, %rdi
    000047ac: 	je	.Ltmp4520 # Offset: 18348
    000047ae: 	movq	0xe0(%rsp), %rax
    000047b6: 	leaq	0x1(%rax), %rsi
    000047ba: 	callq	_ZdlPvm@PLT # Offset: 18362
.Ltmp4520:
    000047bf: 	movq	0xb0(%rsp), %rdi
    000047c7: 	leaq	0xc0(%rsp), %rax
    000047cf: 	cmpq	%rax, %rdi
    000047d2: 	je	.Ltmp4515 # Offset: 18386
    000047d8: 	movq	0xc0(%rsp), %rax
    000047e0: 	leaq	0x1(%rax), %rsi
    000047e4: 	callq	_ZdlPvm@PLT # Offset: 18404
    000047e9: 	jmp	.Ltmp4515 # Offset: 18409
    000047ee: 	endbr64
.Ltmp4522:
    000047f2: 	movq	%rax, %rbp
    000047f5: 	jmp	.Ltmp4521 # Offset: 18421
    000047fa: 	endbr64
    000047fe: 	jmp	.Ltmp4522 # Offset: 18430
    00004800: 	endbr64
    00004804: 	jmp	.Ltmp4522 # Offset: 18436
    00004806: 	endbr64
    0000480a: 	jmp	.Ltmp4522 # Offset: 18442
    0000480c: 	endbr64
    00004810: 	jmp	.Ltmp4522 # Offset: 18448
    00004812: 	endbr64
    00004816: 	jmp	.Ltmp4522 # Offset: 18454
    00004818: 	endbr64
    0000481c: 	jmp	.Ltmp4522 # Offset: 18460
    0000481e: 	endbr64
    00004822: 	jmp	.Ltmp4522 # Offset: 18466
    00004824: 	endbr64
    00004828: 	jmp	.Ltmp4517 # Offset: 18472
    0000482d: 	endbr64
.Ltmp4524:
    00004831: 	movq	%rax, %rbp
    00004834: 	jmp	.Ltmp4523 # Offset: 18484
    00004836: 	endbr64
    0000483a: 	jmp	.Ltmp4524 # Offset: 18490
    0000483c: 	endbr64
    00004840: 	jmp	.Ltmp4524 # Offset: 18496
    00004842: 	endbr64
    00004846: 	movq	%rax, %rbp
    00004849: 	jmp	.Ltmp4520 # Offset: 18505
.Ltmp4523:
    0000484e: 	movq	0x130(%rsp), %rdi
    00004856: 	cmpq	0x60(%rsp), %rdi
    0000485b: 	je	.Ltmp4520 # Offset: 18523
    00004861: 	movq	0x140(%rsp), %rax
    00004869: 	leaq	0x1(%rax), %rsi
    0000486d: 	callq	_ZdlPvm@PLT # Offset: 18541
    00004872: 	jmp	.Ltmp4520 # Offset: 18546
    00004877: 	endbr64
    0000487b: 	jmp	.Ltmp4524 # Offset: 18555
    0000487d: 	endbr64
    00004881: 	jmp	.Ltmp4524 # Offset: 18561
    00004883: 	endbr64
    00004887: 	jmp	.Ltmp4524 # Offset: 18567
    00004889: 	endbr64
    0000488d: 	jmp	.Ltmp4524 # Offset: 18573
    0000488f: 	endbr64
    00004893: 	jmp	.Ltmp4524 # Offset: 18579
    00004895: 	endbr64
    00004899: 	jmp	.Ltmp4524 # Offset: 18585
    0000489b: 	endbr64
    0000489f: 	jmp	.Ltmp4524 # Offset: 18591
    000048a1: 	endbr64
    000048a5: 	jmp	.Ltmp4524 # Offset: 18597
    000048a7: 	endbr64
    000048ab: 	jmp	.Ltmp4524 # Offset: 18603
    000048ad: 	endbr64
    000048b1: 	jmp	.Ltmp4524 # Offset: 18609
    000048b6: 	endbr64
    000048ba: 	jmp	.Ltmp4517 # Offset: 18618
    000048bf: 	endbr64
    000048c3: 	jmp	.Ltmp4522 # Offset: 18627
    000048c8: 	endbr64
    000048cc: 	jmp	.Ltmp4522 # Offset: 18636
    000048d1: 	endbr64
    000048d5: 	jmp	.Ltmp4522 # Offset: 18645
    000048da: 	endbr64
    000048de: 	jmp	.Ltmp4522 # Offset: 18654
    000048e3: 	endbr64
    000048e7: 	jmp	.Ltmp4517 # Offset: 18663
    000048ec: 	endbr64
    000048f0: 	jmp	.Ltmp4517 # Offset: 18672
    000048f5: 	endbr64
    000048f9: 	jmp	.Ltmp4517 # Offset: 18681
    000048fe: 	endbr64
    00004902: 	jmp	.Ltmp4517 # Offset: 18690
    00004907: 	endbr64
    0000490b: 	jmp	.Ltmp4517 # Offset: 18699
    00004910: 	endbr64
    00004914: 	jmp	.Ltmp4517 # Offset: 18708
    00004919: 	endbr64
    0000491d: 	jmp	.Ltmp4517 # Offset: 18717
    00004922: 	endbr64
    00004926: 	movq	%rax, %rbp
    00004929: 	jmp	.Ltmp4519 # Offset: 18729
    0000492e: 	endbr64
.Ltmp4526:
    00004932: 	movq	%rax, %rbp
    00004935: 	jmp	.Ltmp4525 # Offset: 18741
    00004937: 	endbr64
    0000493b: 	jmp	.Ltmp4526 # Offset: 18747
    0000493d: 	endbr64
    00004941: 	movq	%rax, %rbp
    00004944: 	jmp	.Ltmp4527 # Offset: 18756
    00004946: 	endbr64
.Ltmp4531:
    0000494a: 	movq	%rax, %rbp
    0000494d: 	jmp	.Ltmp4528 # Offset: 18765
.Ltmp4525:
    0000494f: 	movq	0x130(%rsp), %rdi
    00004957: 	cmpq	0x60(%rsp), %rdi
    0000495c: 	je	.Ltmp4527 # Offset: 18780
    0000495e: 	movq	0x140(%rsp), %rax
    00004966: 	leaq	0x1(%rax), %rsi
    0000496a: 	callq	_ZdlPvm@PLT # Offset: 18794
.Ltmp4527:
    0000496f: 	movq	0x110(%rsp), %rdi
    00004977: 	leaq	0x120(%rsp), %rax
    0000497f: 	cmpq	%rax, %rdi
    00004982: 	je	.Ltmp4529 # Offset: 18818
    00004984: 	movq	0x120(%rsp), %rax
    0000498c: 	leaq	0x1(%rax), %rsi
    00004990: 	callq	_ZdlPvm@PLT # Offset: 18832
.Ltmp4529:
    00004995: 	movq	0xf0(%rsp), %rdi
    0000499d: 	leaq	0x100(%rsp), %rax
    000049a5: 	cmpq	%rax, %rdi
    000049a8: 	je	.Ltmp4519 # Offset: 18856
    000049ae: 	movq	0x100(%rsp), %rax
    000049b6: 	leaq	0x1(%rax), %rsi
    000049ba: 	callq	_ZdlPvm@PLT # Offset: 18874
    000049bf: 	jmp	.Ltmp4519 # Offset: 18879
.Ltmp4528:
    000049c4: 	movq	0x130(%rsp), %rdi
    000049cc: 	cmpq	0x60(%rsp), %rdi
    000049d1: 	je	.Ltmp4529 # Offset: 18897
    000049d3: 	movq	0x140(%rsp), %rax
    000049db: 	leaq	0x1(%rax), %rsi
    000049df: 	callq	_ZdlPvm@PLT # Offset: 18911
    000049e4: 	jmp	.Ltmp4529 # Offset: 18916
    000049e6: 	endbr64
    000049ea: 	movq	%rax, %rbp
    000049ed: 	jmp	.Ltmp4530 # Offset: 18925
    000049ef: 	endbr64
    000049f3: 	jmp	.Ltmp4531 # Offset: 18931
.Ltmp4530:
    000049f8: 	movq	0x130(%rsp), %rdi
    00004a00: 	leaq	0x140(%rsp), %rax
    00004a08: 	cmpq	%rax, %rdi
    00004a0b: 	jne	.Ltmp4532 # Offset: 18955
    00004a11: 	jmp	.Ltmp4515 # Offset: 18961
    00004a16: 	endbr64
    00004a1a: 	jmp	.Ltmp4531 # Offset: 18970
    00004a1f: 	endbr64
    00004a23: 	jmp	.Ltmp4531 # Offset: 18979
    00004a28: 	endbr64
    00004a2c: 	jmp	.Ltmp4531 # Offset: 18988
    00004a31: 	endbr64
    00004a35: 	movq	%rax, %rbp
    00004a38: 	jmp	.Ltmp4529 # Offset: 19000
    00004a3d: 	endbr64
    00004a41: 	jmp	.Ltmp4517 # Offset: 19009
    00004a46: 	endbr64
    00004a4a: 	jmp	.Ltmp4517 # Offset: 19018
    00004a4f: 	endbr64
    00004a53: 	jmp	.Ltmp4531 # Offset: 19027
    00004a58: 	endbr64
    00004a5c: 	jmp	.Ltmp4531 # Offset: 19036
    00004a61: 	endbr64
    00004a65: 	jmp	.Ltmp4531 # Offset: 19045
    00004a6a: 	endbr64
    00004a6e: 	jmp	.Ltmp4531 # Offset: 19054
    00004a73: 	endbr64
    00004a77: 	jmp	.Ltmp4531 # Offset: 19063
    00004a7c: 	endbr64
    00004a80: 	jmp	.Ltmp4531 # Offset: 19072
    00004a85: 	endbr64
    00004a89: 	jmp	.Ltmp4531 # Offset: 19081
    00004a8e: 	endbr64
    00004a92: 	jmp	.Ltmp4531 # Offset: 19090
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIfEvd"

Binary Function "_Z16TestUnrolledTypeIaLi4EEvPT_S0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 187
  State       : disassembled
  Address     : 0x3da90
  Size        : 0x27c5
  MaxSize     : 0x27d0
  Offset      : 0x3da90
  Section     : .text
  Orc Section : .local.text._Z16TestUnrolledTypeIaLi4EEvPT_S0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0186:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	leaq	DATAat0x4d004(%rip), %r12
    00000016: 	pushq	%rbp
    00000017: 	xorl	%ebp, %ebp
    00000019: 	pushq	%rbx
    0000001a: 	movq	%rdi, %rbx
    0000001d: 	movq	%rdx, %rdi
    00000020: 	leaq	0x1f30(%rbx), %r14
    00000027: 	subq	$0x158, %rsp
    0000002e: 	movl	%esi, 0xcc(%rsp)
    00000035: 	movq	%rdi, %rsi
    00000038: 	movq	%rdx, 0xb8(%rsp)
    00000040: 	leaq	DATAat0x4d1e4(%rip), %rdx
    00000047: 	movq	%fs:0x28, %rax
    00000050: 	movq	%rax, 0x148(%rsp)
    00000058: 	xorl	%eax, %eax
    0000005a: 	leaq	0x120(%rsp), %rax
    00000062: 	movq	%rax, %rdi
    00000065: 	movq	%rax, 0xa8(%rsp)
    0000006d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 109
    00000072: 	movsbl	%r15b, %eax
    00000076: 	movl	%eax, 0xc8(%rsp)
    0000007d: 	callq	clock@PLT # Offset: 125
    00000082: 	movl	iterations(%rip), %r13d
    00000089: 	movq	%rax, start_time(%rip)
    00000090: 	testl	%r13d, %r13d
    00000093: 	jle	.Ltmp4533 # Offset: 147
    00000099: 	nopl	(%rax) # Size: 7
.Ltmp4536:
    000000a0: 	movsbl	(%rbx), %r10d
    000000a4: 	subb	0x1(%rbx), %r10b
    000000a8: 	movq	%rbx, %rax
    000000ab: 	pxor	%xmm1, %xmm1
    000000af: 	shll	$0x2, %r10d
    000000b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4534:
    000000b8: 	movdqu	(%rax), %xmm0
    000000bc: 	movdqu	0x1(%rax), %xmm7
    000000c1: 	addq	$0x10, %rax
    000000c5: 	psubb	%xmm7, %xmm0
    000000c9: 	paddb	%xmm0, %xmm0
    000000cd: 	paddb	%xmm0, %xmm0
    000000d1: 	paddb	%xmm0, %xmm1
    000000d5: 	cmpq	%r14, %rax
    000000d8: 	jne	.Ltmp4534 # Offset: 216
    000000da: 	movdqa	%xmm1, %xmm0
    000000de: 	psrldq	$0x8, %xmm0
    000000e3: 	paddb	%xmm0, %xmm1
    000000e7: 	pxor	%xmm0, %xmm0
    000000eb: 	psadbw	%xmm0, %xmm1
    000000ef: 	movq	0x1f30(%rbx), %xmm0
    000000f7: 	movd	%xmm1, %eax
    000000fb: 	movq	0x1f31(%rbx), %xmm1
    00000103: 	addl	%eax, %r10d
    00000106: 	psubb	%xmm1, %xmm0
    0000010a: 	pxor	%xmm1, %xmm1
    0000010e: 	paddb	%xmm0, %xmm0
    00000112: 	paddb	%xmm0, %xmm0
    00000116: 	movdqa	%xmm0, %xmm6
    0000011a: 	psadbw	%xmm1, %xmm6
    0000011e: 	movq	%xmm6, 0x108(%rsp)
    00000127: 	movq	%xmm6, %rax
    0000012c: 	movsbl	0x1f39(%rbx), %r8d
    00000134: 	movsbl	0x1f38(%rbx), %r9d
    0000013c: 	movsbl	0x1f3a(%rbx), %edi
    00000143: 	movl	%eax, %r11d
    00000146: 	movsbl	0x1f3b(%rbx), %esi
    0000014d: 	subl	%r8d, %r9d
    00000150: 	addl	%r10d, %r11d
    00000153: 	movsbl	0x1f3c(%rbx), %ecx
    0000015a: 	movsbl	0x1f3d(%rbx), %edx
    00000161: 	subl	%edi, %r8d
    00000164: 	leal	(%r11,%r9,4), %r9d
    00000168: 	subl	%esi, %edi
    0000016a: 	movsbl	0x1f3e(%rbx), %eax
    00000171: 	leal	(%r9,%r8,4), %r8d
    00000175: 	subl	%ecx, %esi
    00000177: 	subl	%edx, %ecx
    00000179: 	leal	(%r8,%rdi,4), %edi
    0000017d: 	subl	%eax, %edx
    0000017f: 	subb	0x1f3f(%rbx), %al
    00000185: 	leal	(%rdi,%rsi,4), %esi
    00000188: 	leal	(%rsi,%rcx,4), %ecx
    0000018b: 	leal	(%rcx,%rdx,4), %edx
    0000018e: 	leal	(%rdx,%rax,4), %eax
    00000191: 	testb	%al, %al
    00000193: 	jne	.Ltmp4535 # Offset: 403
.Ltmp4650:
    00000199: 	addl	$0x1, %ebp
    0000019c: 	cmpl	%r13d, %ebp
    0000019f: 	jl	.Ltmp4536 # Offset: 415
.Ltmp4533:
    000001a5: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001ac: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbp
    000001b3: 	subq	$0x20, %rax
    000001b7: 	cmpq	%rax, %rbp
    000001ba: 	je	.Ltmp4537 # Offset: 442
    000001c0: 	leaq	0x10(%rbp), %rdi
    000001c4: 	movq	0x128(%rsp), %r12
    000001cc: 	movq	%rdi, (%rbp)
    000001d0: 	movq	0x120(%rsp), %r13
    000001d8: 	movq	%r13, %rax
    000001db: 	addq	%r12, %rax
    000001de: 	je	.Ltmp4538 # Offset: 478
    000001e0: 	testq	%r13, %r13
    000001e3: 	je	.Ltmp4539 # Offset: 483
.Ltmp4538:
    000001e9: 	movq	%r12, 0x118(%rsp)
    000001f1: 	cmpq	$0xf, %r12
    000001f5: 	ja	.Ltmp4540 # Offset: 501
    000001fb: 	cmpq	$0x1, %r12
    000001ff: 	jne	.Ltmp4541 # Offset: 511
    00000205: 	movzbl	(%r13), %eax
    0000020a: 	movb	%al, 0x10(%rbp)
.Ltmp4651:
    0000020d: 	movq	%r12, 0x8(%rbp)
    00000211: 	movb	$0x0, (%rdi,%r12)
    00000216: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000021d: 	addq	$0x20, %rax
    00000221: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp4677:
    00000228: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000022f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000236: 	je	.Ltmp4542 # Offset: 566
.Ltmp4676:
    0000023c: 	movq	-0x20(%rax), %rbp
    00000240: 	callq	clock@PLT # Offset: 576
    00000245: 	pxor	%xmm0, %xmm0
    00000249: 	movq	%rax, end_time(%rip)
    00000250: 	movq	%rbp, %rdi
    00000253: 	subq	start_time(%rip), %rax
    0000025a: 	cvtsi2sd	%rax, %xmm0
    0000025f: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000267: 	callq	_Z13record_resultdPKc # Offset: 615
    0000026c: 	movq	0x120(%rsp), %rdi
    00000274: 	leaq	0x130(%rsp), %rax
    0000027c: 	movq	%rax, 0xc0(%rsp)
    00000284: 	cmpq	%rax, %rdi
    00000287: 	je	.Ltmp4543 # Offset: 647
    00000289: 	movq	0x130(%rsp), %rax
    00000291: 	leaq	0x1(%rax), %rsi
    00000295: 	callq	_ZdlPvm@PLT # Offset: 661
.Ltmp4543:
    0000029a: 	leaq	DATAat0x4d1f1(%rip), %rdx
    000002a1: 	movq	0xb8(%rsp), %rsi
    000002a9: 	xorl	%ebp, %ebp
    000002ab: 	movq	0xa8(%rsp), %rdi
    000002b3: 	leaq	0x1f30(%rbx), %r14
    000002ba: 	leaq	DATAat0x4d004(%rip), %r12
    000002c1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 705
    000002c6: 	callq	clock@PLT # Offset: 710
    000002cb: 	movl	iterations(%rip), %r13d
    000002d2: 	movq	%rax, start_time(%rip)
    000002d9: 	testl	%r13d, %r13d
    000002dc: 	jle	.Ltmp4544 # Offset: 732
    000002e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4547:
    000002e8: 	movzbl	(%rbx), %r10d
    000002ec: 	subb	0x1(%rbx), %r10b
    000002f0: 	movq	%rbx, %rax
    000002f3: 	pxor	%xmm1, %xmm1
    000002f7: 	shll	$0x2, %r10d
    000002fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4545:
    00000300: 	movdqu	(%rax), %xmm0
    00000304: 	movdqu	0x1(%rax), %xmm7
    00000309: 	addq	$0x10, %rax
    0000030d: 	psubb	%xmm7, %xmm0
    00000311: 	paddb	%xmm0, %xmm0
    00000315: 	paddb	%xmm0, %xmm0
    00000319: 	paddb	%xmm0, %xmm1
    0000031d: 	cmpq	%r14, %rax
    00000320: 	jne	.Ltmp4545 # Offset: 800
    00000322: 	movdqa	%xmm1, %xmm0
    00000326: 	psrldq	$0x8, %xmm0
    0000032b: 	paddb	%xmm0, %xmm1
    0000032f: 	pxor	%xmm0, %xmm0
    00000333: 	psadbw	%xmm0, %xmm1
    00000337: 	movq	0x1f30(%rbx), %xmm0
    0000033f: 	movd	%xmm1, %eax
    00000343: 	movq	0x1f31(%rbx), %xmm1
    0000034b: 	addl	%eax, %r10d
    0000034e: 	psubb	%xmm1, %xmm0
    00000352: 	pxor	%xmm1, %xmm1
    00000356: 	paddb	%xmm0, %xmm0
    0000035a: 	paddb	%xmm0, %xmm0
    0000035e: 	movdqa	%xmm0, %xmm7
    00000362: 	psadbw	%xmm1, %xmm7
    00000366: 	movq	%xmm7, 0x100(%rsp)
    0000036f: 	movq	%xmm7, %rax
    00000374: 	movzbl	0x1f39(%rbx), %r8d
    0000037c: 	movzbl	0x1f38(%rbx), %r9d
    00000384: 	movzbl	0x1f3a(%rbx), %edi
    0000038b: 	movl	%eax, %r11d
    0000038e: 	movzbl	0x1f3b(%rbx), %esi
    00000395: 	subl	%r8d, %r9d
    00000398: 	addl	%r10d, %r11d
    0000039b: 	movzbl	0x1f3c(%rbx), %ecx
    000003a2: 	movzbl	0x1f3d(%rbx), %edx
    000003a9: 	subl	%edi, %r8d
    000003ac: 	leal	(%r11,%r9,4), %r9d
    000003b0: 	subl	%esi, %edi
    000003b2: 	movzbl	0x1f3e(%rbx), %eax
    000003b9: 	leal	(%r9,%r8,4), %r8d
    000003bd: 	subl	%ecx, %esi
    000003bf: 	subl	%edx, %ecx
    000003c1: 	leal	(%r8,%rdi,4), %edi
    000003c5: 	subl	%eax, %edx
    000003c7: 	subb	0x1f3f(%rbx), %al
    000003cd: 	leal	(%rdi,%rsi,4), %esi
    000003d0: 	leal	(%rsi,%rcx,4), %ecx
    000003d3: 	leal	(%rcx,%rdx,4), %edx
    000003d6: 	leal	(%rdx,%rax,4), %eax
    000003d9: 	testb	%al, %al
    000003db: 	jne	.Ltmp4546 # Offset: 987
.Ltmp4652:
    000003e1: 	addl	$0x1, %ebp
    000003e4: 	cmpl	%r13d, %ebp
    000003e7: 	jl	.Ltmp4547 # Offset: 999
.Ltmp4544:
    000003ed: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000003f4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbp
    000003fb: 	subq	$0x20, %rax
    000003ff: 	cmpq	%rax, %rbp
    00000402: 	je	.Ltmp4548 # Offset: 1026
    00000408: 	leaq	0x10(%rbp), %rdi
    0000040c: 	movq	0x128(%rsp), %r12
    00000414: 	movq	%rdi, (%rbp)
    00000418: 	movq	0x120(%rsp), %r13
    00000420: 	movq	%r13, %rax
    00000423: 	addq	%r12, %rax
    00000426: 	je	.Ltmp4549 # Offset: 1062
    00000428: 	testq	%r13, %r13
    0000042b: 	je	.Ltmp4550 # Offset: 1067
.Ltmp4549:
    00000431: 	movq	%r12, 0x118(%rsp)
    00000439: 	cmpq	$0xf, %r12
    0000043d: 	ja	.Ltmp4551 # Offset: 1085
    00000443: 	cmpq	$0x1, %r12
    00000447: 	jne	.Ltmp4552 # Offset: 1095
    0000044d: 	movzbl	(%r13), %eax
    00000452: 	movb	%al, 0x10(%rbp)
.Ltmp4685:
    00000455: 	movq	%r12, 0x8(%rbp)
    00000459: 	movb	$0x0, (%rdi,%r12)
    0000045e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000465: 	addq	$0x20, %rax
    00000469: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp4675:
    00000470: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000477: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000047e: 	je	.Ltmp4553 # Offset: 1150
.Ltmp4668:
    00000484: 	movq	-0x20(%rax), %rbp
    00000488: 	callq	clock@PLT # Offset: 1160
    0000048d: 	pxor	%xmm0, %xmm0
    00000491: 	movq	%rax, end_time(%rip)
    00000498: 	movq	%rbp, %rdi
    0000049b: 	subq	start_time(%rip), %rax
    000004a2: 	cvtsi2sd	%rax, %xmm0
    000004a7: 	divsd	DATAat0x4d640(%rip), %xmm0
    000004af: 	callq	_Z13record_resultdPKc # Offset: 1199
    000004b4: 	movq	0x120(%rsp), %rdi
    000004bc: 	cmpq	0xc0(%rsp), %rdi
    000004c4: 	je	.Ltmp4554 # Offset: 1220
    000004c6: 	movq	0x130(%rsp), %rax
    000004ce: 	leaq	0x1(%rax), %rsi
    000004d2: 	callq	_ZdlPvm@PLT # Offset: 1234
.Ltmp4554:
    000004d7: 	movq	0xb8(%rsp), %rsi
    000004df: 	movq	0xa8(%rsp), %rdi
    000004e7: 	leaq	DATAat0x4d22b(%rip), %rdx
    000004ee: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1262
    000004f3: 	callq	clock@PLT # Offset: 1267
    000004f8: 	movq	%rax, start_time(%rip)
    000004ff: 	movl	iterations(%rip), %eax
    00000505: 	movl	%eax, 0x48(%rsp)
    00000509: 	testl	%eax, %eax
    0000050b: 	jle	.Ltmp4555 # Offset: 1291
    00000511: 	movzbl	0xcc(%rsp), %eax
    00000519: 	movl	$0x0, 0x40(%rsp)
    00000521: 	leaq	0x1f30(%rbx), %r14
    00000528: 	movl	%eax, %ebp
    0000052a: 	movw	%ax, 0x44(%rsp)
    0000052f: 	movd	%ebp, %xmm0
    00000533: 	punpcklbw	%xmm0, %xmm0
    00000537: 	punpcklwd	%xmm0, %xmm0
    0000053b: 	pshufd	$0x0, %xmm0, %xmm6
    00000540: 	movaps	%xmm6, (%rsp)
    00000544: 	nopl	(%rax) # Size: 4
.Ltmp4558:
    00000548: 	movsbl	0x1(%rbx), %edx
    0000054c: 	movzbl	(%rbx), %esi
    0000054f: 	pxor	%xmm3, %xmm3
    00000553: 	leal	(%rdx,%rbp), %eax
    00000556: 	addl	%esi, %eax
    00000558: 	movsbl	%al, %eax
    0000055b: 	leal	(%rdx,%rax,2), %ecx
    0000055e: 	leal	(%rsi,%rax,2), %edx
    00000561: 	movq	%rbx, %rax
    00000564: 	shll	$0x2, %edx
    00000567: 	subl	%ecx, %edx
    00000569: 	subl	%ecx, %edx
    0000056b: 	addl	%ecx, %ecx
    0000056d: 	subl	%ecx, %edx
    0000056f: 	nop # Size: 1
.Ltmp4556:
    00000570: 	movdqu	0x1(%rax), %xmm7
    00000575: 	movdqu	(%rax), %xmm2
    00000579: 	addq	$0x10, %rax
    0000057d: 	movdqu	-0x10(%rax), %xmm0
    00000582: 	paddb	%xmm7, %xmm2
    00000586: 	paddb	(%rsp), %xmm2
    0000058b: 	movdqa	%xmm7, %xmm1
    0000058f: 	paddb	%xmm2, %xmm0
    00000593: 	paddb	%xmm2, %xmm1
    00000597: 	paddb	%xmm2, %xmm0
    0000059b: 	paddb	%xmm2, %xmm1
    0000059f: 	paddb	%xmm0, %xmm0
    000005a3: 	movdqa	%xmm1, %xmm2
    000005a7: 	psubb	%xmm1, %xmm3
    000005ab: 	paddb	%xmm0, %xmm0
    000005af: 	paddb	%xmm1, %xmm2
    000005b3: 	psubb	%xmm1, %xmm0
    000005b7: 	psubb	%xmm2, %xmm0
    000005bb: 	paddb	%xmm0, %xmm3
    000005bf: 	cmpq	%rax, %r14
    000005c2: 	jne	.Ltmp4556 # Offset: 1474
    000005c4: 	movdqa	%xmm3, %xmm0
    000005c8: 	pxor	%xmm5, %xmm5
    000005cc: 	movzwl	0x44(%rsp), %edi
    000005d1: 	movq	0x1f31(%rbx), %xmm2
    000005d9: 	psrldq	$0x8, %xmm0
    000005de: 	paddb	%xmm0, %xmm3
    000005e2: 	movq	0x1f30(%rbx), %xmm0
    000005ea: 	psadbw	%xmm5, %xmm3
    000005ee: 	movd	%xmm3, %eax
    000005f2: 	addl	%edx, %eax
    000005f4: 	movb	%al, 0x18(%rsp)
    000005f8: 	movl	%edi, %eax
    000005fa: 	shll	$0x8, %eax
    000005fd: 	orl	%edi, %eax
    000005ff: 	movd	%eax, %xmm5
    00000603: 	pshuflw	$0x0, %xmm5, %xmm1
    00000608: 	paddb	%xmm2, %xmm1
    0000060c: 	paddb	%xmm0, %xmm1
    00000610: 	paddb	%xmm1, %xmm0
    00000614: 	paddb	%xmm1, %xmm2
    00000618: 	paddb	%xmm1, %xmm0
    0000061c: 	paddb	%xmm1, %xmm2
    00000620: 	pxor	%xmm1, %xmm1
    00000624: 	paddb	%xmm0, %xmm0
    00000628: 	paddb	%xmm2, %xmm2
    0000062c: 	paddb	%xmm0, %xmm0
    00000630: 	psubb	%xmm2, %xmm0
    00000634: 	psubb	%xmm2, %xmm0
    00000638: 	movdqa	%xmm0, %xmm6
    0000063c: 	psadbw	%xmm1, %xmm6
    00000640: 	movq	%xmm6, 0xf8(%rsp)
    00000649: 	movq	%xmm6, %rax
    0000064e: 	movsbl	0x1f3a(%rbx), %edi
    00000655: 	movsbl	0x1f3b(%rbx), %r9d
    0000065d: 	movsbl	0x1f39(%rbx), %r15d
    00000665: 	movsbl	0x1f3c(%rbx), %r8d
    0000066d: 	movb	%al, 0x3c(%rsp)
    00000671: 	movl	%edi, %ecx
    00000673: 	movl	%r9d, %edx
    00000676: 	movl	%edi, 0x1c(%rsp)
    0000067a: 	movzbl	0x1f38(%rbx), %eax
    00000681: 	addl	%r9d, %ecx
    00000684: 	movl	%r15d, %esi
    00000687: 	addl	%r8d, %edx
    0000068a: 	movl	%r9d, 0x20(%rsp)
    0000068f: 	addl	%edi, %esi
    00000691: 	addl	%ebp, %ecx
    00000693: 	addl	%ebp, %edx
    00000695: 	movl	%r8d, 0x28(%rsp)
    0000069a: 	addl	%ebp, %esi
    0000069c: 	movsbl	%cl, %ecx
    0000069f: 	movsbl	%dl, %edx
    000006a2: 	addl	%ebp, %eax
    000006a4: 	leal	(%r9,%rcx,2), %r11d
    000006a8: 	movsbl	%sil, %esi
    000006ac: 	leal	(%r8,%rdx,2), %r10d
    000006b0: 	movl	%edx, 0x24(%rsp)
    000006b4: 	movsbl	0x1f3d(%rbx), %r9d
    000006bc: 	leal	(%rdi,%rsi,2), %r12d
    000006c0: 	movl	%r8d, %edi
    000006c3: 	movsbl	0x1f3e(%rbx), %edx
    000006ca: 	addl	%r15d, %eax
    000006cd: 	leal	(%r15,%rsi,2), %esi
    000006d1: 	addl	%r9d, %edi
    000006d4: 	movl	%r9d, %r8d
    000006d7: 	movl	%r9d, 0x30(%rsp)
    000006dc: 	movsbl	%al, %eax
    000006df: 	addl	%ebp, %edi
    000006e1: 	addl	%edx, %r8d
    000006e4: 	movl	%edx, 0x38(%rsp)
    000006e8: 	leal	(%r15,%rax,2), %r13d
    000006ec: 	movsbl	%dil, %edi
    000006f0: 	addl	%ebp, %r8d
    000006f3: 	shll	$0x2, %esi
    000006f6: 	leal	(%r9,%rdi,2), %r9d
    000006fa: 	movl	%edi, 0x2c(%rsp)
    000006fe: 	movl	%edx, %edi
    00000700: 	movsbl	%r8b, %r8d
    00000704: 	addb	0x1f3f(%rbx), %dil
    0000070b: 	movl	%r8d, 0x34(%rsp)
    00000710: 	leal	(%rdx,%r8,2), %r8d
    00000714: 	subl	%r12d, %esi
    00000717: 	addl	%ebp, %edi
    00000719: 	subl	%r12d, %esi
    0000071c: 	movsbl	%dil, %edx
    00000720: 	movsbl	0x1f3f(%rbx), %edi
    00000727: 	subl	%r12d, %esi
    0000072a: 	movl	%edx, 0x14(%rsp)
    0000072e: 	subl	%r12d, %esi
    00000731: 	leal	(%rdi,%rdx,2), %edi
    00000734: 	movzbl	0x1f38(%rbx), %edx
    0000073b: 	leal	(%rdx,%rax,2), %eax
    0000073e: 	movl	0x24(%rsp), %edx
    00000742: 	shll	$0x2, %eax
    00000745: 	subl	%r13d, %eax
    00000748: 	subl	%r13d, %eax
    0000074b: 	subl	%r13d, %eax
    0000074e: 	subl	%r13d, %eax
    00000751: 	movzbl	0x3c(%rsp), %r13d
    00000757: 	addb	0x18(%rsp), %r13b
    0000075c: 	addl	%r13d, %eax
    0000075f: 	addl	%esi, %eax
    00000761: 	movl	0x1c(%rsp), %esi
    00000765: 	leal	(%rsi,%rcx,2), %ecx
    00000768: 	movl	0x20(%rsp), %esi
    0000076c: 	shll	$0x2, %ecx
    0000076f: 	leal	(%rsi,%rdx,2), %edx
    00000772: 	subl	%r11d, %ecx
    00000775: 	movl	0x28(%rsp), %esi
    00000779: 	subl	%r11d, %ecx
    0000077c: 	shll	$0x2, %edx
    0000077f: 	subl	%r11d, %ecx
    00000782: 	subl	%r10d, %edx
    00000785: 	subl	%r11d, %ecx
    00000788: 	subl	%r10d, %edx
    0000078b: 	addl	%ecx, %eax
    0000078d: 	subl	%r10d, %edx
    00000790: 	movl	0x2c(%rsp), %ecx
    00000794: 	subl	%r10d, %edx
    00000797: 	addl	%edx, %eax
    00000799: 	leal	(%rsi,%rcx,2), %edx
    0000079c: 	shll	$0x2, %edx
    0000079f: 	subl	%r9d, %edx
    000007a2: 	subl	%r9d, %edx
    000007a5: 	subl	%r9d, %edx
    000007a8: 	subl	%r9d, %edx
    000007ab: 	movl	0x30(%rsp), %r9d
    000007b0: 	movl	0x14(%rsp), %esi
    000007b4: 	addl	%eax, %edx
    000007b6: 	movl	0x34(%rsp), %eax
    000007ba: 	leal	(%r9,%rax,2), %eax
    000007be: 	shll	$0x2, %eax
    000007c1: 	subl	%r8d, %eax
    000007c4: 	subl	%r8d, %eax
    000007c7: 	subl	%r8d, %eax
    000007ca: 	subl	%r8d, %eax
    000007cd: 	addl	%eax, %edx
    000007cf: 	movl	0x38(%rsp), %eax
    000007d3: 	leal	(%rax,%rsi,2), %eax
    000007d6: 	shll	$0x2, %eax
    000007d9: 	subl	%edi, %eax
    000007db: 	subl	%edi, %eax
    000007dd: 	subl	%edi, %eax
    000007df: 	subl	%edi, %eax
    000007e1: 	addb	%dl, %al
    000007e3: 	jne	.Ltmp4557 # Offset: 2019
.Ltmp4659:
    000007e9: 	addl	$0x1, 0x40(%rsp)
    000007ee: 	movl	0x40(%rsp), %eax
    000007f2: 	cmpl	%eax, 0x48(%rsp)
    000007f6: 	jg	.Ltmp4558 # Offset: 2038
.Ltmp4555:
    000007fc: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000803: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbp
    0000080a: 	subq	$0x20, %rax
    0000080e: 	cmpq	%rax, %rbp
    00000811: 	je	.Ltmp4559 # Offset: 2065
    00000817: 	leaq	0x10(%rbp), %rdi
    0000081b: 	movq	0x128(%rsp), %r12
    00000823: 	movq	%rdi, (%rbp)
    00000827: 	movq	0x120(%rsp), %r13
    0000082f: 	movq	%r13, %rax
    00000832: 	addq	%r12, %rax
    00000835: 	je	.Ltmp4560 # Offset: 2101
    00000837: 	testq	%r13, %r13
    0000083a: 	je	.Ltmp4561 # Offset: 2106
.Ltmp4560:
    00000840: 	movq	%r12, 0x118(%rsp)
    00000848: 	cmpq	$0xf, %r12
    0000084c: 	ja	.Ltmp4562 # Offset: 2124
    00000852: 	cmpq	$0x1, %r12
    00000856: 	jne	.Ltmp4563 # Offset: 2134
    0000085c: 	movzbl	(%r13), %eax
    00000861: 	movb	%al, 0x10(%rbp)
.Ltmp4687:
    00000864: 	movq	%r12, 0x8(%rbp)
    00000868: 	movb	$0x0, (%rdi,%r12)
    0000086d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000874: 	addq	$0x20, %rax
    00000878: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp4671:
    0000087f: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000886: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000088d: 	je	.Ltmp4564 # Offset: 2189
.Ltmp4670:
    00000893: 	movq	-0x20(%rax), %rbp
    00000897: 	callq	clock@PLT # Offset: 2199
    0000089c: 	pxor	%xmm0, %xmm0
    000008a0: 	movq	%rax, end_time(%rip)
    000008a7: 	movq	%rbp, %rdi
    000008aa: 	subq	start_time(%rip), %rax
    000008b1: 	cvtsi2sd	%rax, %xmm0
    000008b6: 	divsd	DATAat0x4d640(%rip), %xmm0
    000008be: 	callq	_Z13record_resultdPKc # Offset: 2238
    000008c3: 	movq	0x120(%rsp), %rdi
    000008cb: 	cmpq	0xc0(%rsp), %rdi
    000008d3: 	je	.Ltmp4565 # Offset: 2259
    000008d5: 	movq	0x130(%rsp), %rax
    000008dd: 	leaq	0x1(%rax), %rsi
    000008e1: 	callq	_ZdlPvm@PLT # Offset: 2273
.Ltmp4565:
    000008e6: 	leaq	DATAat0x4d234(%rip), %rdx
    000008ed: 	movq	0xb8(%rsp), %rsi
    000008f5: 	xorl	%ebp, %ebp
    000008f7: 	movq	0xa8(%rsp), %rdi
    000008ff: 	leaq	0x1f30(%rbx), %r14
    00000906: 	leaq	DATAat0x4d004(%rip), %r12
    0000090d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2317
    00000912: 	callq	clock@PLT # Offset: 2322
    00000917: 	movl	iterations(%rip), %r13d
    0000091e: 	movq	%rax, start_time(%rip)
    00000925: 	testl	%r13d, %r13d
    00000928: 	jle	.Ltmp4566 # Offset: 2344
    0000092e: 	nop # Size: 2
.Ltmp4569:
    00000930: 	movzbl	(%rbx), %r10d
    00000934: 	subb	0x1(%rbx), %r10b
    00000938: 	movq	%rbx, %rax
    0000093b: 	pxor	%xmm1, %xmm1
    0000093f: 	shll	$0x2, %r10d
    00000943: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4567:
    00000948: 	movdqu	(%rax), %xmm0
    0000094c: 	movdqu	0x1(%rax), %xmm6
    00000951: 	addq	$0x10, %rax
    00000955: 	psubb	%xmm6, %xmm0
    00000959: 	paddb	%xmm0, %xmm0
    0000095d: 	paddb	%xmm0, %xmm0
    00000961: 	paddb	%xmm0, %xmm1
    00000965: 	cmpq	%r14, %rax
    00000968: 	jne	.Ltmp4567 # Offset: 2408
    0000096a: 	movdqa	%xmm1, %xmm0
    0000096e: 	psrldq	$0x8, %xmm0
    00000973: 	paddb	%xmm0, %xmm1
    00000977: 	pxor	%xmm0, %xmm0
    0000097b: 	psadbw	%xmm0, %xmm1
    0000097f: 	movq	0x1f30(%rbx), %xmm0
    00000987: 	movd	%xmm1, %eax
    0000098b: 	movq	0x1f31(%rbx), %xmm1
    00000993: 	addl	%eax, %r10d
    00000996: 	psubb	%xmm1, %xmm0
    0000099a: 	pxor	%xmm1, %xmm1
    0000099e: 	paddb	%xmm0, %xmm0
    000009a2: 	paddb	%xmm0, %xmm0
    000009a6: 	movdqa	%xmm0, %xmm4
    000009aa: 	psadbw	%xmm1, %xmm4
    000009ae: 	movq	%xmm4, 0xf0(%rsp)
    000009b7: 	movq	%xmm4, %rax
    000009bc: 	movzbl	0x1f39(%rbx), %r8d
    000009c4: 	movzbl	0x1f38(%rbx), %r9d
    000009cc: 	movzbl	0x1f3a(%rbx), %edi
    000009d3: 	movl	%eax, %r11d
    000009d6: 	movzbl	0x1f3b(%rbx), %esi
    000009dd: 	subl	%r8d, %r9d
    000009e0: 	addl	%r10d, %r11d
    000009e3: 	movzbl	0x1f3c(%rbx), %ecx
    000009ea: 	movzbl	0x1f3d(%rbx), %edx
    000009f1: 	subl	%edi, %r8d
    000009f4: 	leal	(%r11,%r9,4), %r9d
    000009f8: 	subl	%esi, %edi
    000009fa: 	movzbl	0x1f3e(%rbx), %eax
    00000a01: 	leal	(%r9,%r8,4), %r8d
    00000a05: 	subl	%ecx, %esi
    00000a07: 	subl	%edx, %ecx
    00000a09: 	leal	(%r8,%rdi,4), %edi
    00000a0d: 	subl	%eax, %edx
    00000a0f: 	subb	0x1f3f(%rbx), %al
    00000a15: 	leal	(%rdi,%rsi,4), %esi
    00000a18: 	leal	(%rsi,%rcx,4), %ecx
    00000a1b: 	leal	(%rcx,%rdx,4), %edx
    00000a1e: 	leal	(%rdx,%rax,4), %eax
    00000a21: 	testb	%al, %al
    00000a23: 	jne	.Ltmp4568 # Offset: 2595
.Ltmp4661:
    00000a29: 	addl	$0x1, %ebp
    00000a2c: 	cmpl	%r13d, %ebp
    00000a2f: 	jl	.Ltmp4569 # Offset: 2607
.Ltmp4566:
    00000a35: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000a3c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbp
    00000a43: 	subq	$0x20, %rax
    00000a47: 	cmpq	%rax, %rbp
    00000a4a: 	je	.Ltmp4570 # Offset: 2634
    00000a50: 	leaq	0x10(%rbp), %rdi
    00000a54: 	movq	0x128(%rsp), %r12
    00000a5c: 	movq	%rdi, (%rbp)
    00000a60: 	movq	0x120(%rsp), %r13
    00000a68: 	movq	%r13, %rax
    00000a6b: 	addq	%r12, %rax
    00000a6e: 	je	.Ltmp4571 # Offset: 2670
    00000a70: 	testq	%r13, %r13
    00000a73: 	je	.Ltmp4572 # Offset: 2675
.Ltmp4571:
    00000a79: 	movq	%r12, 0x118(%rsp)
    00000a81: 	cmpq	$0xf, %r12
    00000a85: 	ja	.Ltmp4573 # Offset: 2693
    00000a8b: 	cmpq	$0x1, %r12
    00000a8f: 	jne	.Ltmp4574 # Offset: 2703
    00000a95: 	movzbl	(%r13), %eax
    00000a9a: 	movb	%al, 0x10(%rbp)
.Ltmp4689:
    00000a9d: 	movq	%r12, 0x8(%rbp)
    00000aa1: 	movb	$0x0, (%rdi,%r12)
    00000aa6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000aad: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000ab4: 	addq	$0x20, %rax
    00000ab8: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000abf: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000ac6: 	je	.Ltmp4575 # Offset: 2758
.Ltmp4662:
    00000acc: 	movq	-0x20(%rax), %rbp
    00000ad0: 	callq	clock@PLT # Offset: 2768
    00000ad5: 	pxor	%xmm0, %xmm0
    00000ad9: 	movq	%rax, end_time(%rip)
    00000ae0: 	movq	%rbp, %rdi
    00000ae3: 	subq	start_time(%rip), %rax
    00000aea: 	cvtsi2sd	%rax, %xmm0
    00000aef: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000af7: 	callq	_Z13record_resultdPKc # Offset: 2807
    00000afc: 	movq	0x120(%rsp), %rdi
    00000b04: 	cmpq	0xc0(%rsp), %rdi
    00000b0c: 	je	.Ltmp4576 # Offset: 2828
    00000b0e: 	movq	0x130(%rsp), %rax
    00000b16: 	leaq	0x1(%rax), %rsi
    00000b1a: 	callq	_ZdlPvm@PLT # Offset: 2842
.Ltmp4576:
    00000b1f: 	movq	0xb8(%rsp), %rsi
    00000b27: 	movq	0xa8(%rsp), %rdi
    00000b2f: 	leaq	DATAat0x4d24b(%rip), %rdx
    00000b36: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2870
    00000b3b: 	callq	clock@PLT # Offset: 2875
    00000b40: 	movq	%rax, start_time(%rip)
    00000b47: 	movl	iterations(%rip), %eax
    00000b4d: 	movl	%eax, 0x48(%rsp)
    00000b51: 	testl	%eax, %eax
    00000b53: 	jle	.Ltmp4577 # Offset: 2899
    00000b59: 	movzbl	0xcc(%rsp), %eax
    00000b61: 	movl	$0x0, 0x40(%rsp)
    00000b69: 	leaq	0x1f30(%rbx), %r14
    00000b70: 	movl	%eax, %ebp
    00000b72: 	movw	%ax, 0x44(%rsp)
    00000b77: 	movd	%ebp, %xmm0
    00000b7b: 	punpcklbw	%xmm0, %xmm0
    00000b7f: 	punpcklwd	%xmm0, %xmm0
    00000b83: 	pshufd	$0x0, %xmm0, %xmm6
    00000b88: 	movaps	%xmm6, (%rsp)
    00000b8c: 	nopl	(%rax) # Size: 4
.Ltmp4580:
    00000b90: 	movsbl	0x1(%rbx), %edx
    00000b94: 	movzbl	(%rbx), %esi
    00000b97: 	pxor	%xmm1, %xmm1
    00000b9b: 	leal	(%rdx,%rbp), %eax
    00000b9e: 	subl	%esi, %eax
    00000ba0: 	movsbl	%al, %eax
    00000ba3: 	leal	(%rdx,%rax,2), %ecx
    00000ba6: 	leal	(%rsi,%rax,2), %edx
    00000ba9: 	movq	%rbx, %rax
    00000bac: 	shll	$0x2, %edx
    00000baf: 	subl	%ecx, %edx
    00000bb1: 	subl	%ecx, %edx
    00000bb3: 	addl	%ecx, %ecx
    00000bb5: 	subl	%ecx, %edx
    00000bb7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4578:
    00000bc0: 	movdqu	0x1(%rax), %xmm3
    00000bc5: 	paddb	(%rsp), %xmm3
    00000bca: 	addq	$0x10, %rax
    00000bce: 	movdqu	-0x10(%rax), %xmm5
    00000bd3: 	movdqu	-0xf(%rax), %xmm2
    00000bd8: 	movdqa	%xmm3, %xmm0
    00000bdc: 	psubb	%xmm5, %xmm0
    00000be0: 	paddb	%xmm0, %xmm2
    00000be4: 	paddb	%xmm0, %xmm2
    00000be8: 	paddb	%xmm3, %xmm0
    00000bec: 	paddb	%xmm0, %xmm0
    00000bf0: 	paddb	%xmm2, %xmm2
    00000bf4: 	paddb	%xmm0, %xmm0
    00000bf8: 	paddb	%xmm0, %xmm1
    00000bfc: 	psubb	%xmm2, %xmm1
    00000c00: 	psubb	%xmm2, %xmm1
    00000c04: 	cmpq	%r14, %rax
    00000c07: 	jne	.Ltmp4578 # Offset: 3079
    00000c09: 	movdqa	%xmm1, %xmm0
    00000c0d: 	pxor	%xmm7, %xmm7
    00000c11: 	movzwl	0x44(%rsp), %edi
    00000c16: 	movq	0x1f30(%rbx), %xmm3
    00000c1e: 	psrldq	$0x8, %xmm0
    00000c23: 	paddb	%xmm0, %xmm1
    00000c27: 	psadbw	%xmm7, %xmm1
    00000c2b: 	movd	%xmm1, %eax
    00000c2f: 	movq	0x1f31(%rbx), %xmm1
    00000c37: 	addl	%edx, %eax
    00000c39: 	movb	%al, 0x14(%rsp)
    00000c3d: 	movl	%edi, %eax
    00000c3f: 	shll	$0x8, %eax
    00000c42: 	orl	%edi, %eax
    00000c44: 	movd	%eax, %xmm5
    00000c48: 	pshuflw	$0x0, %xmm5, %xmm0
    00000c4d: 	paddb	%xmm1, %xmm0
    00000c51: 	movdqa	%xmm0, %xmm2
    00000c55: 	psubb	%xmm3, %xmm2
    00000c59: 	paddb	%xmm2, %xmm0
    00000c5d: 	paddb	%xmm2, %xmm1
    00000c61: 	paddb	%xmm0, %xmm0
    00000c65: 	paddb	%xmm2, %xmm1
    00000c69: 	paddb	%xmm0, %xmm0
    00000c6d: 	paddb	%xmm1, %xmm1
    00000c71: 	psubb	%xmm1, %xmm0
    00000c75: 	psubb	%xmm1, %xmm0
    00000c79: 	pxor	%xmm1, %xmm1
    00000c7d: 	movdqa	%xmm0, %xmm5
    00000c81: 	psadbw	%xmm1, %xmm5
    00000c85: 	movq	%xmm5, 0xe8(%rsp)
    00000c8e: 	movq	%xmm5, %rax
    00000c93: 	movsbl	0x1f39(%rbx), %r15d
    00000c9b: 	movsbl	0x1f3a(%rbx), %edi
    00000ca2: 	movb	%al, 0x3c(%rsp)
    00000ca6: 	movzbl	0x1f3b(%rbx), %r8d
    00000cae: 	movl	%r15d, %eax
    00000cb1: 	leal	(%rbp,%rdi), %ecx
    00000cb5: 	subb	0x1f38(%rbx), %al
    00000cbb: 	movl	%r15d, 0x18(%rsp)
    00000cc0: 	addl	%ebp, %eax
    00000cc2: 	subl	%r15d, %ecx
    00000cc5: 	leal	(%rbp,%r8), %edx
    00000cca: 	movsbl	%r8b, %esi
    00000cce: 	movsbl	%al, %eax
    00000cd1: 	movsbl	%cl, %ecx
    00000cd4: 	movsbl	0x1f3c(%rbx), %r12d
    00000cdc: 	subl	%edi, %edx
    00000cde: 	leal	(%r15,%rax,2), %r11d
    00000ce2: 	leal	(%rdi,%rcx,2), %r10d
    00000ce6: 	movsbl	%dl, %edx
    00000ce9: 	movl	%esi, 0x20(%rsp)
    00000ced: 	movzbl	0x1f38(%rbx), %r15d
    00000cf5: 	leal	(%rsi,%rdx,2), %r9d
    00000cf9: 	leal	(%rbp,%r12), %esi
    00000cfe: 	movl	%edi, 0x1c(%rsp)
    00000d02: 	subl	%r8d, %esi
    00000d05: 	movl	%r12d, %edi
    00000d08: 	movl	%r12d, 0x28(%rsp)
    00000d0d: 	leal	(%r15,%rax,2), %eax
    00000d11: 	movl	0x18(%rsp), %r15d
    00000d16: 	movsbl	%sil, %r8d
    00000d1a: 	shll	$0x2, %eax
    00000d1d: 	movl	%r8d, 0x24(%rsp)
    00000d22: 	leal	(%r12,%r8,2), %r8d
    00000d26: 	movzbl	0x1f3d(%rbx), %r12d
    00000d2e: 	leal	(%r15,%rcx,2), %ecx
    00000d32: 	subl	%r11d, %eax
    00000d35: 	shll	$0x2, %ecx
    00000d38: 	subl	%r11d, %eax
    00000d3b: 	leal	(%rbp,%r12), %esi
    00000d40: 	subl	%r10d, %ecx
    00000d43: 	subl	%r11d, %eax
    00000d46: 	subl	%edi, %esi
    00000d48: 	movsbl	%r12b, %edi
    00000d4c: 	subl	%r10d, %ecx
    00000d4f: 	subl	%r11d, %eax
    00000d52: 	movzbl	0x3c(%rsp), %r11d
    00000d58: 	movsbl	%sil, %r13d
    00000d5c: 	addb	0x14(%rsp), %r11b
    00000d61: 	subl	%r10d, %ecx
    00000d64: 	movzbl	0x1f3e(%rbx), %esi
    00000d6b: 	movl	%edi, 0x30(%rsp)
    00000d6f: 	subl	%r10d, %ecx
    00000d72: 	addl	%r11d, %eax
    00000d75: 	leal	(%rdi,%r13,2), %edi
    00000d79: 	movl	%r13d, 0x2c(%rsp)
    00000d7e: 	addl	%ecx, %eax
    00000d80: 	movl	0x1c(%rsp), %ecx
    00000d84: 	addl	%ebp, %esi
    00000d86: 	subl	%r12d, %esi
    00000d89: 	movsbl	0x1f3f(%rbx), %r12d
    00000d91: 	leal	(%rcx,%rdx,2), %edx
    00000d94: 	movl	0x20(%rsp), %ecx
    00000d98: 	movsbl	%sil, %r13d
    00000d9c: 	movsbl	0x1f3e(%rbx), %esi
    00000da3: 	shll	$0x2, %edx
    00000da6: 	movl	%r13d, 0x34(%rsp)
    00000dab: 	subl	%r9d, %edx
    00000dae: 	movl	%esi, 0x38(%rsp)
    00000db2: 	leal	(%rsi,%r13,2), %esi
    00000db6: 	leal	(%r12,%rbp), %r13d
    00000dba: 	subl	%r9d, %edx
    00000dbd: 	subb	0x1f3e(%rbx), %r13b
    00000dc4: 	subl	%r9d, %edx
    00000dc7: 	movsbl	%r13b, %r13d
    00000dcb: 	subl	%r9d, %edx
    00000dce: 	leal	(%r12,%r13,2), %r12d
    00000dd2: 	addl	%edx, %eax
    00000dd4: 	movl	0x24(%rsp), %edx
    00000dd8: 	leal	(%rcx,%rdx,2), %edx
    00000ddb: 	movl	0x28(%rsp), %ecx
    00000ddf: 	shll	$0x2, %edx
    00000de2: 	subl	%r8d, %edx
    00000de5: 	subl	%r8d, %edx
    00000de8: 	subl	%r8d, %edx
    00000deb: 	subl	%r8d, %edx
    00000dee: 	addl	%edx, %eax
    00000df0: 	movl	0x2c(%rsp), %edx
    00000df4: 	leal	(%rcx,%rdx,2), %edx
    00000df7: 	shll	$0x2, %edx
    00000dfa: 	subl	%edi, %edx
    00000dfc: 	subl	%edi, %edx
    00000dfe: 	subl	%edi, %edx
    00000e00: 	subl	%edi, %edx
    00000e02: 	movl	0x30(%rsp), %edi
    00000e06: 	addl	%eax, %edx
    00000e08: 	movl	0x34(%rsp), %eax
    00000e0c: 	leal	(%rdi,%rax,2), %eax
    00000e0f: 	shll	$0x2, %eax
    00000e12: 	subl	%esi, %eax
    00000e14: 	subl	%esi, %eax
    00000e16: 	subl	%esi, %eax
    00000e18: 	subl	%esi, %eax
    00000e1a: 	movl	0x38(%rsp), %esi
    00000e1e: 	addl	%eax, %edx
    00000e20: 	leal	(%rsi,%r13,2), %eax
    00000e24: 	shll	$0x2, %eax
    00000e27: 	subl	%r12d, %eax
    00000e2a: 	subl	%r12d, %eax
    00000e2d: 	subl	%r12d, %eax
    00000e30: 	subl	%r12d, %eax
    00000e33: 	addb	%dl, %al
    00000e35: 	jne	.Ltmp4579 # Offset: 3637
.Ltmp4660:
    00000e3b: 	addl	$0x1, 0x40(%rsp)
    00000e40: 	movl	0x40(%rsp), %eax
    00000e44: 	cmpl	0x48(%rsp), %eax
    00000e48: 	jl	.Ltmp4580 # Offset: 3656
.Ltmp4577:
    00000e4e: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000e55: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbp
    00000e5c: 	subq	$0x20, %rax
    00000e60: 	cmpq	%rax, %rbp
    00000e63: 	je	.Ltmp4581 # Offset: 3683
    00000e69: 	leaq	0x10(%rbp), %rdi
    00000e6d: 	movq	0x128(%rsp), %r12
    00000e75: 	movq	%rdi, (%rbp)
    00000e79: 	movq	0x120(%rsp), %r13
    00000e81: 	movq	%r13, %rax
    00000e84: 	addq	%r12, %rax
    00000e87: 	je	.Ltmp4582 # Offset: 3719
    00000e89: 	testq	%r13, %r13
    00000e8c: 	je	.Ltmp4583 # Offset: 3724
.Ltmp4582:
    00000e92: 	movq	%r12, 0x118(%rsp)
    00000e9a: 	cmpq	$0xf, %r12
    00000e9e: 	ja	.Ltmp4584 # Offset: 3742
    00000ea4: 	cmpq	$0x1, %r12
    00000ea8: 	jne	.Ltmp4585 # Offset: 3752
    00000eae: 	movzbl	(%r13), %eax
    00000eb3: 	movb	%al, 0x10(%rbp)
.Ltmp4694:
    00000eb6: 	movq	%r12, 0x8(%rbp)
    00000eba: 	movb	$0x0, (%rdi,%r12)
    00000ebf: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000ec6: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000ecd: 	addq	$0x20, %rax
    00000ed1: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000ed8: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000edf: 	je	.Ltmp4586 # Offset: 3807
.Ltmp4669:
    00000ee5: 	movq	-0x20(%rax), %rbp
    00000ee9: 	callq	clock@PLT # Offset: 3817
    00000eee: 	pxor	%xmm0, %xmm0
    00000ef2: 	movq	%rax, end_time(%rip)
    00000ef9: 	movq	%rbp, %rdi
    00000efc: 	subq	start_time(%rip), %rax
    00000f03: 	cvtsi2sd	%rax, %xmm0
    00000f08: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000f10: 	callq	_Z13record_resultdPKc # Offset: 3856
    00000f15: 	movq	0x120(%rsp), %rdi
    00000f1d: 	cmpq	0xc0(%rsp), %rdi
    00000f25: 	je	.Ltmp4587 # Offset: 3877
    00000f27: 	movq	0x130(%rsp), %rax
    00000f2f: 	leaq	0x1(%rax), %rsi
    00000f33: 	callq	_ZdlPvm@PLT # Offset: 3891
.Ltmp4587:
    00000f38: 	leaq	DATAat0x4d259(%rip), %rdx
    00000f3f: 	movq	0xb8(%rsp), %rsi
    00000f47: 	xorl	%ebp, %ebp
    00000f49: 	movq	0xa8(%rsp), %rdi
    00000f51: 	leaq	0x1f30(%rbx), %r14
    00000f58: 	leaq	DATAat0x4d004(%rip), %r12
    00000f5f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3935
    00000f64: 	callq	clock@PLT # Offset: 3940
    00000f69: 	movl	iterations(%rip), %r13d
    00000f70: 	movq	%rax, start_time(%rip)
    00000f77: 	testl	%r13d, %r13d
    00000f7a: 	jle	.Ltmp4588 # Offset: 3962
.Ltmp4591:
    00000f80: 	movzbl	(%rbx), %r10d
    00000f84: 	subb	0x1(%rbx), %r10b
    00000f88: 	movq	%rbx, %rax
    00000f8b: 	pxor	%xmm1, %xmm1
    00000f8f: 	shll	$0x2, %r10d
    00000f93: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4589:
    00000f98: 	movdqu	(%rax), %xmm0
    00000f9c: 	movdqu	0x1(%rax), %xmm6
    00000fa1: 	addq	$0x10, %rax
    00000fa5: 	psubb	%xmm6, %xmm0
    00000fa9: 	paddb	%xmm0, %xmm0
    00000fad: 	paddb	%xmm0, %xmm0
    00000fb1: 	paddb	%xmm0, %xmm1
    00000fb5: 	cmpq	%r14, %rax
    00000fb8: 	jne	.Ltmp4589 # Offset: 4024
    00000fba: 	movdqa	%xmm1, %xmm0
    00000fbe: 	psrldq	$0x8, %xmm0
    00000fc3: 	paddb	%xmm0, %xmm1
    00000fc7: 	pxor	%xmm0, %xmm0
    00000fcb: 	psadbw	%xmm0, %xmm1
    00000fcf: 	movq	0x1f30(%rbx), %xmm0
    00000fd7: 	movd	%xmm1, %eax
    00000fdb: 	movq	0x1f31(%rbx), %xmm1
    00000fe3: 	addl	%eax, %r10d
    00000fe6: 	psubb	%xmm1, %xmm0
    00000fea: 	pxor	%xmm1, %xmm1
    00000fee: 	paddb	%xmm0, %xmm0
    00000ff2: 	paddb	%xmm0, %xmm0
    00000ff6: 	movdqa	%xmm0, %xmm7
    00000ffa: 	psadbw	%xmm1, %xmm7
    00000ffe: 	movq	%xmm7, 0xe0(%rsp)
    00001007: 	movq	%xmm7, %rax
    0000100c: 	movzbl	0x1f39(%rbx), %r8d
    00001014: 	movzbl	0x1f38(%rbx), %r9d
    0000101c: 	movzbl	0x1f3a(%rbx), %edi
    00001023: 	movl	%eax, %r11d
    00001026: 	movzbl	0x1f3b(%rbx), %esi
    0000102d: 	subl	%r8d, %r9d
    00001030: 	addl	%r10d, %r11d
    00001033: 	movzbl	0x1f3c(%rbx), %ecx
    0000103a: 	movzbl	0x1f3d(%rbx), %edx
    00001041: 	subl	%edi, %r8d
    00001044: 	leal	(%r11,%r9,4), %r9d
    00001048: 	subl	%esi, %edi
    0000104a: 	movzbl	0x1f3e(%rbx), %eax
    00001051: 	leal	(%r9,%r8,4), %r8d
    00001055: 	subl	%ecx, %esi
    00001057: 	subl	%edx, %ecx
    00001059: 	leal	(%r8,%rdi,4), %edi
    0000105d: 	subl	%eax, %edx
    0000105f: 	subb	0x1f3f(%rbx), %al
    00001065: 	leal	(%rdi,%rsi,4), %esi
    00001068: 	leal	(%rsi,%rcx,4), %ecx
    0000106b: 	leal	(%rcx,%rdx,4), %edx
    0000106e: 	leal	(%rdx,%rax,4), %eax
    00001071: 	testb	%al, %al
    00001073: 	jne	.Ltmp4590 # Offset: 4211
.Ltmp4657:
    00001079: 	addl	$0x1, %ebp
    0000107c: 	cmpl	%r13d, %ebp
    0000107f: 	jl	.Ltmp4591 # Offset: 4223
.Ltmp4588:
    00001085: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000108c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbp
    00001093: 	subq	$0x20, %rax
    00001097: 	cmpq	%rax, %rbp
    0000109a: 	je	.Ltmp4592 # Offset: 4250
    000010a0: 	leaq	0x10(%rbp), %rdi
    000010a4: 	movq	0x128(%rsp), %r12
    000010ac: 	movq	%rdi, (%rbp)
    000010b0: 	movq	0x120(%rsp), %r13
    000010b8: 	movq	%r13, %rax
    000010bb: 	addq	%r12, %rax
    000010be: 	je	.Ltmp4593 # Offset: 4286
    000010c0: 	testq	%r13, %r13
    000010c3: 	je	.Ltmp4594 # Offset: 4291
.Ltmp4593:
    000010c9: 	movq	%r12, 0x118(%rsp)
    000010d1: 	cmpq	$0xf, %r12
    000010d5: 	ja	.Ltmp4595 # Offset: 4309
    000010db: 	cmpq	$0x1, %r12
    000010df: 	jne	.Ltmp4596 # Offset: 4319
    000010e5: 	movzbl	(%r13), %eax
    000010ea: 	movb	%al, 0x10(%rbp)
.Ltmp4690:
    000010ed: 	movq	%r12, 0x8(%rbp)
    000010f1: 	movb	$0x0, (%rdi,%r12)
    000010f6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000010fd: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001104: 	addq	$0x20, %rax
    00001108: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000110f: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00001116: 	je	.Ltmp4597 # Offset: 4374
.Ltmp4672:
    0000111c: 	movq	-0x20(%rax), %rbp
    00001120: 	callq	clock@PLT # Offset: 4384
    00001125: 	pxor	%xmm0, %xmm0
    00001129: 	movq	%rax, end_time(%rip)
    00001130: 	movq	%rbp, %rdi
    00001133: 	subq	start_time(%rip), %rax
    0000113a: 	cvtsi2sd	%rax, %xmm0
    0000113f: 	divsd	DATAat0x4d640(%rip), %xmm0
    00001147: 	callq	_Z13record_resultdPKc # Offset: 4423
    0000114c: 	movq	0x120(%rsp), %rdi
    00001154: 	cmpq	0xc0(%rsp), %rdi
    0000115c: 	je	.Ltmp4598 # Offset: 4444
    0000115e: 	movq	0x130(%rsp), %rax
    00001166: 	leaq	0x1(%rax), %rsi
    0000116a: 	callq	_ZdlPvm@PLT # Offset: 4458
.Ltmp4598:
    0000116f: 	movq	0xb8(%rsp), %rsi
    00001177: 	movq	0xa8(%rsp), %rdi
    0000117f: 	leaq	DATAat0x4d270(%rip), %rdx
    00001186: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4486
    0000118b: 	callq	clock@PLT # Offset: 4491
    00001190: 	movq	%rax, start_time(%rip)
    00001197: 	movl	iterations(%rip), %eax
    0000119d: 	movl	%eax, 0xb4(%rsp)
    000011a4: 	testl	%eax, %eax
    000011a6: 	jle	.Ltmp4599 # Offset: 4518
    000011ac: 	movzbl	0xcc(%rsp), %ebp
    000011b4: 	movl	$0x0, 0x14(%rsp)
    000011bc: 	leaq	0x1f30(%rbx), %r14
    000011c3: 	movd	%ebp, %xmm0
    000011c7: 	punpcklbw	%xmm0, %xmm0
    000011cb: 	punpcklwd	%xmm0, %xmm0
    000011cf: 	pshufd	$0x0, %xmm0, %xmm6
    000011d4: 	movaps	%xmm6, (%rsp)
    000011d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp4602:
    000011e0: 	movsbl	0x1(%rbx), %ecx
    000011e4: 	movzbl	(%rbx), %esi
    000011e7: 	pxor	%xmm3, %xmm3
    000011eb: 	movl	%ecx, %eax
    000011ed: 	imull	%esi, %eax
    000011f0: 	leal	(%rax,%rbp), %edx
    000011f3: 	movsbl	%dl, %edx
    000011f6: 	leal	(%rcx,%rdx,2), %eax
    000011f9: 	leal	(%rsi,%rdx,2), %edx
    000011fc: 	shll	$0x2, %edx
    000011ff: 	subl	%eax, %edx
    00001201: 	subl	%eax, %edx
    00001203: 	addl	%eax, %eax
    00001205: 	subl	%eax, %edx
    00001207: 	movq	%rbx, %rax
    0000120a: 	movb	%dl, 0x53(%rsp)
    0000120e: 	nop # Size: 2
.Ltmp4600:
    00001210: 	movdqu	0x1(%rax), %xmm1
    00001215: 	movdqu	(%rax), %xmm0
    00001219: 	addq	$0x10, %rax
    0000121d: 	movdqa	%xmm1, %xmm2
    00001221: 	movdqa	%xmm1, %xmm4
    00001225: 	movdqa	%xmm0, %xmm6
    00001229: 	movdqa	%xmm0, %xmm5
    0000122d: 	punpcklbw	%xmm1, %xmm2
    00001231: 	punpckhbw	%xmm1, %xmm4
    00001235: 	punpcklbw	%xmm0, %xmm6
    00001239: 	punpckhbw	%xmm0, %xmm5
    0000123d: 	pmullw	%xmm6, %xmm2
    00001241: 	pmullw	%xmm5, %xmm4
    00001245: 	pand	DATAat0x4d5f0(%rip), %xmm2
    0000124d: 	pand	DATAat0x4d5f0(%rip), %xmm4
    00001255: 	packuswb	%xmm4, %xmm2
    00001259: 	paddb	(%rsp), %xmm2
    0000125e: 	paddb	%xmm2, %xmm0
    00001262: 	paddb	%xmm2, %xmm1
    00001266: 	paddb	%xmm2, %xmm0
    0000126a: 	paddb	%xmm2, %xmm1
    0000126e: 	paddb	%xmm0, %xmm0
    00001272: 	movdqa	%xmm1, %xmm2
    00001276: 	psubb	%xmm1, %xmm3
    0000127a: 	paddb	%xmm0, %xmm0
    0000127e: 	paddb	%xmm1, %xmm2
    00001282: 	psubb	%xmm1, %xmm0
    00001286: 	psubb	%xmm2, %xmm0
    0000128a: 	paddb	%xmm0, %xmm3
    0000128e: 	cmpq	%r14, %rax
    00001291: 	jne	.Ltmp4600 # Offset: 4753
    00001297: 	movsbl	0x1f31(%rbx), %edi
    0000129e: 	movdqa	%xmm3, %xmm0
    000012a2: 	pxor	%xmm7, %xmm7
    000012a6: 	movzbl	0x1f30(%rbx), %eax
    000012ad: 	movsbl	0x1f33(%rbx), %r11d
    000012b5: 	movsbl	0x1f34(%rbx), %r9d
    000012bd: 	psrldq	$0x8, %xmm0
    000012c2: 	imull	%edi, %eax
    000012c5: 	movl	%edi, 0x64(%rsp)
    000012c9: 	paddb	%xmm0, %xmm3
    000012cd: 	movl	%r11d, 0x7c(%rsp)
    000012d2: 	psadbw	%xmm7, %xmm3
    000012d6: 	movl	%r9d, 0x40(%rsp)
    000012db: 	movd	%xmm3, 0x90(%rsp)
    000012e4: 	addl	%ebp, %eax
    000012e6: 	movsbl	%al, %eax
    000012e9: 	leal	(%rdi,%rax,2), %edx
    000012ec: 	movl	%eax, 0x5c(%rsp)
    000012f0: 	movl	%edi, %eax
    000012f2: 	movl	%edx, 0x94(%rsp)
    000012f9: 	movzbl	0x1f32(%rbx), %edx
    00001300: 	imull	%edx, %eax
    00001303: 	movsbl	%dl, %ecx
    00001306: 	movl	%ecx, 0x6c(%rsp)
    0000130a: 	addl	%ebp, %eax
    0000130c: 	movsbl	%al, %esi
    0000130f: 	movl	%edx, %eax
    00001311: 	movzbl	0x1f38(%rbx), %edx
    00001318: 	imull	%r11d, %eax
    0000131c: 	leal	(%rcx,%rsi,2), %r13d
    00001320: 	movzbl	0x1f35(%rbx), %ecx
    00001327: 	movl	%esi, 0x68(%rsp)
    0000132b: 	addl	%ebp, %eax
    0000132d: 	movsbl	%al, %r15d
    00001331: 	movl	%r11d, %eax
    00001334: 	imull	%r9d, %eax
    00001338: 	leal	(%r11,%r15,2), %r12d
    0000133c: 	movl	%r15d, 0x78(%rsp)
    00001341: 	addl	%ebp, %eax
    00001343: 	movsbl	%al, %r10d
    00001347: 	movl	%r9d, %eax
    0000134a: 	imull	%ecx, %eax
    0000134d: 	leal	(%r9,%r10,2), %r11d
    00001351: 	movl	%r10d, 0x44(%rsp)
    00001356: 	addl	%ebp, %eax
    00001358: 	movsbl	%al, %r8d
    0000135c: 	movsbl	%cl, %eax
    0000135f: 	leal	(%rax,%r8,2), %r10d
    00001363: 	movl	%r8d, 0x3c(%rsp)
    00001368: 	movsbl	0x1f36(%rbx), %r8d
    00001370: 	movl	%eax, 0x38(%rsp)
    00001374: 	movl	%ecx, %eax
    00001376: 	imull	%r8d, %eax
    0000137a: 	movl	%r8d, 0x30(%rsp)
    0000137f: 	addl	%ebp, %eax
    00001381: 	movsbl	%al, %r15d
    00001385: 	movl	%r8d, %eax
    00001388: 	leal	(%r8,%r15,2), %r9d
    0000138c: 	movl	%r15d, 0x34(%rsp)
    00001391: 	movsbl	0x1f37(%rbx), %r15d
    00001399: 	imull	%r15d, %eax
    0000139d: 	movl	%r15d, 0x28(%rsp)
    000013a2: 	addl	%ebp, %eax
    000013a4: 	movsbl	%al, %edi
    000013a7: 	movl	%r15d, %eax
    000013aa: 	imull	%edx, %eax
    000013ad: 	leal	(%r15,%rdi,2), %r8d
    000013b1: 	movsbl	0x1f39(%rbx), %r15d
    000013b9: 	movl	%edi, 0x2c(%rsp)
    000013bd: 	movl	%r15d, 0x18(%rsp)
    000013c2: 	addl	%ebp, %eax
    000013c4: 	movsbl	%al, %ecx
    000013c7: 	movsbl	%dl, %eax
    000013ca: 	leal	(%rax,%rcx,2), %edi
    000013cd: 	movl	%eax, 0x20(%rsp)
    000013d1: 	movl	%edx, %eax
    000013d3: 	imull	%r15d, %eax
    000013d7: 	movl	%ecx, 0x24(%rsp)
    000013db: 	addl	%ebp, %eax
    000013dd: 	movsbl	%al, %edx
    000013e0: 	leal	(%r15,%rdx,2), %eax
    000013e4: 	movl	%edx, 0x1c(%rsp)
    000013e8: 	movzbl	0x1f3a(%rbx), %edx
    000013ef: 	movl	%eax, 0x98(%rsp)
    000013f6: 	movl	%r15d, %eax
    000013f9: 	imull	%edx, %eax
    000013fc: 	addl	%ebp, %eax
    000013fe: 	movsbl	%al, %ecx
    00001401: 	movsbl	%dl, %eax
    00001404: 	movl	%eax, 0x70(%rsp)
    00001408: 	leal	(%rax,%rcx,2), %r15d
    0000140c: 	movl	%edx, %eax
    0000140e: 	movsbl	0x1f3d(%rbx), %esi
    00001415: 	movl	%ecx, 0x74(%rsp)
    00001419: 	movzbl	0x1f3b(%rbx), %ecx
    00001420: 	movl	%esi, 0x84(%rsp)
    00001427: 	imull	%ecx, %eax
    0000142a: 	addl	%ebp, %eax
    0000142c: 	movsbl	%al, %edx
    0000142f: 	movsbl	%cl, %eax
    00001432: 	movl	%eax, 0x58(%rsp)
    00001436: 	leal	(%rax,%rdx,2), %eax
    00001439: 	movl	%edx, 0x60(%rsp)
    0000143d: 	movzbl	0x1f3c(%rbx), %edx
    00001444: 	movl	%eax, 0x9c(%rsp)
    0000144b: 	movl	%ecx, %eax
    0000144d: 	imull	%edx, %eax
    00001450: 	addl	%ebp, %eax
    00001452: 	movsbl	%al, %ecx
    00001455: 	movsbl	%dl, %eax
    00001458: 	movl	%eax, 0x4c(%rsp)
    0000145c: 	movl	%ecx, 0x48(%rsp)
    00001460: 	leal	(%rax,%rcx,2), %ecx
    00001463: 	movl	%edx, %eax
    00001465: 	imull	%esi, %eax
    00001468: 	movl	%ecx, 0xa0(%rsp)
    0000146f: 	addl	%ebp, %eax
    00001471: 	movsbl	%al, %edx
    00001474: 	leal	(%rsi,%rdx,2), %eax
    00001477: 	movl	%edx, 0x80(%rsp)
    0000147e: 	movzbl	0x1f3e(%rbx), %edx
    00001485: 	movl	%eax, 0xa4(%rsp)
    0000148c: 	movl	%esi, %eax
    0000148e: 	movl	0x68(%rsp), %esi
    00001492: 	imull	%edx, %eax
    00001495: 	addl	%ebp, %eax
    00001497: 	movsbl	%al, %ecx
    0000149a: 	movsbl	%dl, %eax
    0000149d: 	movl	%ecx, 0x88(%rsp)
    000014a4: 	leal	(%rax,%rcx,2), %ecx
    000014a7: 	movl	%ecx, 0xb0(%rsp)
    000014ae: 	movsbl	0x1f3f(%rbx), %ecx
    000014b5: 	movl	%eax, 0x8c(%rsp)
    000014bc: 	movl	%edx, %eax
    000014be: 	imull	%ecx, %eax
    000014c1: 	addl	%ebp, %eax
    000014c3: 	movsbl	%al, %edx
    000014c6: 	movzbl	0x1f30(%rbx), %eax
    000014cd: 	leal	(%rcx,%rdx,2), %ecx
    000014d0: 	movl	%edx, 0x54(%rsp)
    000014d4: 	movzbl	0x5c(%rsp), %edx
    000014d9: 	leal	(%rax,%rdx,2), %eax
    000014dc: 	movl	0x94(%rsp), %edx
    000014e3: 	shll	$0x2, %eax
    000014e6: 	subl	%edx, %eax
    000014e8: 	subl	%edx, %eax
    000014ea: 	subl	%edx, %eax
    000014ec: 	subl	%edx, %eax
    000014ee: 	movzbl	0x53(%rsp), %edx
    000014f3: 	addb	0x90(%rsp), %dl
    000014fa: 	addl	%edx, %eax
    000014fc: 	movl	0x64(%rsp), %edx
    00001500: 	leal	(%rdx,%rsi,2), %edx
    00001503: 	movl	0x6c(%rsp), %esi
    00001507: 	shll	$0x2, %edx
    0000150a: 	subl	%r13d, %edx
    0000150d: 	subl	%r13d, %edx
    00001510: 	subl	%r13d, %edx
    00001513: 	subl	%r13d, %edx
    00001516: 	movl	0x78(%rsp), %r13d
    0000151b: 	addl	%eax, %edx
    0000151d: 	leal	(%rsi,%r13,2), %eax
    00001521: 	movl	0x7c(%rsp), %esi
    00001525: 	shll	$0x2, %eax
    00001528: 	subl	%r12d, %eax
    0000152b: 	subl	%r12d, %eax
    0000152e: 	subl	%r12d, %eax
    00001531: 	subl	%r12d, %eax
    00001534: 	addl	%edx, %eax
    00001536: 	movl	0x44(%rsp), %edx
    0000153a: 	leal	(%rsi,%rdx,2), %edx
    0000153d: 	movl	0x40(%rsp), %esi
    00001541: 	shll	$0x2, %edx
    00001544: 	subl	%r11d, %edx
    00001547: 	subl	%r11d, %edx
    0000154a: 	subl	%r11d, %edx
    0000154d: 	subl	%r11d, %edx
    00001550: 	movl	0x3c(%rsp), %r11d
    00001555: 	addl	%eax, %edx
    00001557: 	leal	(%rsi,%r11,2), %eax
    0000155b: 	movl	0x38(%rsp), %esi
    0000155f: 	movl	0x34(%rsp), %r11d
    00001564: 	shll	$0x2, %eax
    00001567: 	subl	%r10d, %eax
    0000156a: 	subl	%r10d, %eax
    0000156d: 	subl	%r10d, %eax
    00001570: 	subl	%r10d, %eax
    00001573: 	movl	0x24(%rsp), %r10d
    00001578: 	addl	%eax, %edx
    0000157a: 	leal	(%rsi,%r11,2), %eax
    0000157e: 	movl	0x30(%rsp), %esi
    00001582: 	movl	0x2c(%rsp), %r11d
    00001587: 	shll	$0x2, %eax
    0000158a: 	subl	%r9d, %eax
    0000158d: 	subl	%r9d, %eax
    00001590: 	subl	%r9d, %eax
    00001593: 	subl	%r9d, %eax
    00001596: 	addl	%eax, %edx
    00001598: 	leal	(%rsi,%r11,2), %eax
    0000159c: 	movl	0x28(%rsp), %esi
    000015a0: 	movl	0x1c(%rsp), %r11d
    000015a5: 	shll	$0x2, %eax
    000015a8: 	subl	%r8d, %eax
    000015ab: 	subl	%r8d, %eax
    000015ae: 	subl	%r8d, %eax
    000015b1: 	subl	%r8d, %eax
    000015b4: 	addl	%eax, %edx
    000015b6: 	leal	(%rsi,%r10,2), %eax
    000015ba: 	movl	0x20(%rsp), %esi
    000015be: 	movl	0x74(%rsp), %r10d
    000015c3: 	shll	$0x2, %eax
    000015c6: 	subl	%edi, %eax
    000015c8: 	subl	%edi, %eax
    000015ca: 	subl	%edi, %eax
    000015cc: 	subl	%edi, %eax
    000015ce: 	movl	0x98(%rsp), %edi
    000015d5: 	addl	%eax, %edx
    000015d7: 	leal	(%rsi,%r11,2), %eax
    000015db: 	movl	0x18(%rsp), %esi
    000015df: 	shll	$0x2, %eax
    000015e2: 	subl	%edi, %eax
    000015e4: 	subl	%edi, %eax
    000015e6: 	subl	%edi, %eax
    000015e8: 	subl	%edi, %eax
    000015ea: 	movl	0x9c(%rsp), %edi
    000015f1: 	addl	%eax, %edx
    000015f3: 	leal	(%rsi,%r10,2), %eax
    000015f7: 	movl	0x70(%rsp), %esi
    000015fb: 	shll	$0x2, %eax
    000015fe: 	subl	%r15d, %eax
    00001601: 	subl	%r15d, %eax
    00001604: 	subl	%r15d, %eax
    00001607: 	subl	%r15d, %eax
    0000160a: 	movl	0x60(%rsp), %r15d
    0000160f: 	addl	%eax, %edx
    00001611: 	leal	(%rsi,%r15,2), %eax
    00001615: 	movl	0x58(%rsp), %esi
    00001619: 	movl	0x48(%rsp), %r15d
    0000161e: 	shll	$0x2, %eax
    00001621: 	subl	%edi, %eax
    00001623: 	subl	%edi, %eax
    00001625: 	subl	%edi, %eax
    00001627: 	subl	%edi, %eax
    00001629: 	movl	0xa0(%rsp), %edi
    00001630: 	addl	%eax, %edx
    00001632: 	leal	(%rsi,%r15,2), %eax
    00001636: 	movl	0x4c(%rsp), %esi
    0000163a: 	movl	0x80(%rsp), %r15d
    00001642: 	shll	$0x2, %eax
    00001645: 	subl	%edi, %eax
    00001647: 	subl	%edi, %eax
    00001649: 	subl	%edi, %eax
    0000164b: 	subl	%edi, %eax
    0000164d: 	movl	0xa4(%rsp), %edi
    00001654: 	addl	%eax, %edx
    00001656: 	leal	(%rsi,%r15,2), %eax
    0000165a: 	movl	0x84(%rsp), %esi
    00001661: 	shll	$0x2, %eax
    00001664: 	subl	%edi, %eax
    00001666: 	subl	%edi, %eax
    00001668: 	subl	%edi, %eax
    0000166a: 	subl	%edi, %eax
    0000166c: 	movl	0xb0(%rsp), %edi
    00001673: 	addl	%edx, %eax
    00001675: 	movl	0x88(%rsp), %edx
    0000167c: 	leal	(%rsi,%rdx,2), %edx
    0000167f: 	shll	$0x2, %edx
    00001682: 	subl	%edi, %edx
    00001684: 	subl	%edi, %edx
    00001686: 	subl	%edi, %edx
    00001688: 	subl	%edi, %edx
    0000168a: 	movl	0x8c(%rsp), %edi
    00001691: 	addl	%edx, %eax
    00001693: 	movl	0x54(%rsp), %edx
    00001697: 	leal	(%rdi,%rdx,2), %edx
    0000169a: 	shll	$0x2, %edx
    0000169d: 	subl	%ecx, %edx
    0000169f: 	subl	%ecx, %edx
    000016a1: 	subl	%ecx, %edx
    000016a3: 	subl	%ecx, %edx
    000016a5: 	addb	%al, %dl
    000016a7: 	jne	.Ltmp4601 # Offset: 5799
.Ltmp4658:
    000016ad: 	addl	$0x1, 0x14(%rsp)
    000016b2: 	movl	0x14(%rsp), %eax
    000016b6: 	cmpl	0xb4(%rsp), %eax
    000016bd: 	jl	.Ltmp4602 # Offset: 5821
.Ltmp4599:
    000016c3: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000016ca: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbp
    000016d1: 	subq	$0x20, %rax
    000016d5: 	cmpq	%rax, %rbp
    000016d8: 	je	.Ltmp4603 # Offset: 5848
    000016de: 	leaq	0x10(%rbp), %rdi
    000016e2: 	movq	0x128(%rsp), %r12
    000016ea: 	movq	%rdi, (%rbp)
    000016ee: 	movq	0x120(%rsp), %r13
    000016f6: 	movq	%r13, %rax
    000016f9: 	addq	%r12, %rax
    000016fc: 	je	.Ltmp4604 # Offset: 5884
    000016fe: 	testq	%r13, %r13
    00001701: 	je	.Ltmp4605 # Offset: 5889
.Ltmp4604:
    00001707: 	movq	%r12, 0x118(%rsp)
    0000170f: 	cmpq	$0xf, %r12
    00001713: 	ja	.Ltmp4606 # Offset: 5907
    00001719: 	cmpq	$0x1, %r12
    0000171d: 	jne	.Ltmp4607 # Offset: 5917
    00001723: 	movzbl	(%r13), %eax
    00001728: 	movb	%al, 0x10(%rbp)
.Ltmp4683:
    0000172b: 	movq	%r12, 0x8(%rbp)
    0000172f: 	movb	$0x0, (%rdi,%r12)
    00001734: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000173b: 	addq	$0x20, %rax
    0000173f: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp4674:
    00001746: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000174d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001754: 	je	.Ltmp4608 # Offset: 5972
.Ltmp4673:
    0000175a: 	movq	-0x20(%rax), %rbp
    0000175e: 	callq	clock@PLT # Offset: 5982
    00001763: 	pxor	%xmm0, %xmm0
    00001767: 	movq	%rax, end_time(%rip)
    0000176e: 	movq	%rbp, %rdi
    00001771: 	subq	start_time(%rip), %rax
    00001778: 	cvtsi2sd	%rax, %xmm0
    0000177d: 	divsd	DATAat0x4d640(%rip), %xmm0
    00001785: 	callq	_Z13record_resultdPKc # Offset: 6021
    0000178a: 	movq	0x120(%rsp), %rdi
    00001792: 	cmpq	0xc0(%rsp), %rdi
    0000179a: 	je	.Ltmp4609 # Offset: 6042
    0000179c: 	movq	0x130(%rsp), %rax
    000017a4: 	leaq	0x1(%rax), %rsi
    000017a8: 	callq	_ZdlPvm@PLT # Offset: 6056
.Ltmp4609:
    000017ad: 	leaq	DATAat0x4d27e(%rip), %rdx
    000017b4: 	movq	0xb8(%rsp), %rsi
    000017bc: 	xorl	%ebp, %ebp
    000017be: 	movq	0xa8(%rsp), %rdi
    000017c6: 	leaq	0x1f30(%rbx), %r14
    000017cd: 	leaq	DATAat0x4d004(%rip), %r12
    000017d4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6100
    000017d9: 	callq	clock@PLT # Offset: 6105
    000017de: 	movl	iterations(%rip), %r13d
    000017e5: 	movq	%rax, start_time(%rip)
    000017ec: 	testl	%r13d, %r13d
    000017ef: 	jle	.Ltmp4610 # Offset: 6127
    000017f5: 	nopl	(%rax) # Size: 3
.Ltmp4613:
    000017f8: 	movzbl	(%rbx), %r10d
    000017fc: 	subb	0x1(%rbx), %r10b
    00001800: 	movq	%rbx, %rax
    00001803: 	pxor	%xmm1, %xmm1
    00001807: 	shll	$0x2, %r10d
    0000180b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4611:
    00001810: 	movdqu	(%rax), %xmm0
    00001814: 	movdqu	0x1(%rax), %xmm4
    00001819: 	addq	$0x10, %rax
    0000181d: 	psubb	%xmm4, %xmm0
    00001821: 	paddb	%xmm0, %xmm0
    00001825: 	paddb	%xmm0, %xmm0
    00001829: 	paddb	%xmm0, %xmm1
    0000182d: 	cmpq	%rax, %r14
    00001830: 	jne	.Ltmp4611 # Offset: 6192
    00001832: 	movdqa	%xmm1, %xmm0
    00001836: 	psrldq	$0x8, %xmm0
    0000183b: 	paddb	%xmm0, %xmm1
    0000183f: 	pxor	%xmm0, %xmm0
    00001843: 	psadbw	%xmm0, %xmm1
    00001847: 	movq	0x1f30(%rbx), %xmm0
    0000184f: 	movd	%xmm1, %eax
    00001853: 	movq	0x1f31(%rbx), %xmm1
    0000185b: 	addl	%eax, %r10d
    0000185e: 	psubb	%xmm1, %xmm0
    00001862: 	pxor	%xmm1, %xmm1
    00001866: 	paddb	%xmm0, %xmm0
    0000186a: 	paddb	%xmm0, %xmm0
    0000186e: 	movdqa	%xmm0, %xmm6
    00001872: 	psadbw	%xmm1, %xmm6
    00001876: 	movq	%xmm6, 0xd8(%rsp)
    0000187f: 	movq	%xmm6, %rax
    00001884: 	movzbl	0x1f39(%rbx), %r8d
    0000188c: 	movzbl	0x1f38(%rbx), %r9d
    00001894: 	movzbl	0x1f3a(%rbx), %edi
    0000189b: 	movl	%eax, %r11d
    0000189e: 	movzbl	0x1f3b(%rbx), %esi
    000018a5: 	subl	%r8d, %r9d
    000018a8: 	addl	%r10d, %r11d
    000018ab: 	movzbl	0x1f3c(%rbx), %ecx
    000018b2: 	movzbl	0x1f3d(%rbx), %edx
    000018b9: 	subl	%edi, %r8d
    000018bc: 	leal	(%r11,%r9,4), %r9d
    000018c0: 	subl	%esi, %edi
    000018c2: 	movzbl	0x1f3e(%rbx), %eax
    000018c9: 	leal	(%r9,%r8,4), %r8d
    000018cd: 	subl	%ecx, %esi
    000018cf: 	subl	%edx, %ecx
    000018d1: 	leal	(%r8,%rdi,4), %edi
    000018d5: 	subl	%eax, %edx
    000018d7: 	subb	0x1f3f(%rbx), %al
    000018dd: 	leal	(%rdi,%rsi,4), %esi
    000018e0: 	leal	(%rsi,%rcx,4), %ecx
    000018e3: 	leal	(%rcx,%rdx,4), %edx
    000018e6: 	leal	(%rdx,%rax,4), %eax
    000018e9: 	testb	%al, %al
    000018eb: 	jne	.Ltmp4612 # Offset: 6379
.Ltmp4656:
    000018f1: 	addl	$0x1, %ebp
    000018f4: 	cmpl	%r13d, %ebp
    000018f7: 	jl	.Ltmp4613 # Offset: 6391
.Ltmp4610:
    000018fd: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00001904: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbp
    0000190b: 	subq	$0x20, %rax
    0000190f: 	cmpq	%rax, %rbp
    00001912: 	je	.Ltmp4614 # Offset: 6418
    00001918: 	leaq	0x10(%rbp), %rdi
    0000191c: 	movq	0x128(%rsp), %r12
    00001924: 	movq	%rdi, (%rbp)
    00001928: 	movq	0x120(%rsp), %r13
    00001930: 	movq	%r13, %rax
    00001933: 	addq	%r12, %rax
    00001936: 	je	.Ltmp4615 # Offset: 6454
    00001938: 	testq	%r13, %r13
    0000193b: 	je	.Ltmp4616 # Offset: 6459
.Ltmp4615:
    00001941: 	movq	%r12, 0x118(%rsp)
    00001949: 	cmpq	$0xf, %r12
    0000194d: 	ja	.Ltmp4617 # Offset: 6477
    00001953: 	cmpq	$0x1, %r12
    00001957: 	jne	.Ltmp4618 # Offset: 6487
    0000195d: 	movzbl	(%r13), %eax
    00001962: 	movb	%al, 0x10(%rbp)
.Ltmp4681:
    00001965: 	movq	%r12, 0x8(%rbp)
    00001969: 	movb	$0x0, (%rdi,%r12)
    0000196e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001975: 	addq	$0x20, %rax
    00001979: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp4664:
    00001980: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00001987: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000198e: 	je	.Ltmp4619 # Offset: 6542
.Ltmp4663:
    00001994: 	movq	-0x20(%rax), %rbp
    00001998: 	callq	clock@PLT # Offset: 6552
    0000199d: 	pxor	%xmm0, %xmm0
    000019a1: 	movq	%rax, end_time(%rip)
    000019a8: 	movq	%rbp, %rdi
    000019ab: 	subq	start_time(%rip), %rax
    000019b2: 	cvtsi2sd	%rax, %xmm0
    000019b7: 	divsd	DATAat0x4d640(%rip), %xmm0
    000019bf: 	callq	_Z13record_resultdPKc # Offset: 6591
    000019c4: 	movq	0x120(%rsp), %rdi
    000019cc: 	cmpq	0xc0(%rsp), %rdi
    000019d4: 	je	.Ltmp4620 # Offset: 6612
    000019d6: 	movq	0x130(%rsp), %rax
    000019de: 	leaq	0x1(%rax), %rsi
    000019e2: 	callq	_ZdlPvm@PLT # Offset: 6626
.Ltmp4620:
    000019e7: 	movq	0xb8(%rsp), %rsi
    000019ef: 	movq	0xa8(%rsp), %rdi
    000019f7: 	leaq	DATAat0x4d293(%rip), %rdx
    000019fe: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6654
    00001a03: 	callq	clock@PLT # Offset: 6659
    00001a08: 	movl	iterations(%rip), %r8d
    00001a0f: 	movq	%rax, start_time(%rip)
    00001a16: 	testl	%r8d, %r8d
    00001a19: 	jle	.Ltmp4621 # Offset: 6681
    00001a1f: 	movzbl	0xcc(%rsp), %r12d
    00001a28: 	xorl	%r13d, %r13d
    00001a2b: 	leaq	0x1(%rbx), %r14
    00001a2f: 	leaq	0x1f40(%rbx), %rbp
    00001a36: 	leaq	DATAat0x4d004(%rip), %r15
    00001a3d: 	nopl	(%rax) # Size: 3
.Ltmp4624:
    00001a40: 	movsbl	0x1(%rbx), %ecx
    00001a44: 	movsbl	(%rbx), %esi
    00001a47: 	movq	%r14, %rdi
    00001a4a: 	movl	%ecx, %eax
    00001a4c: 	cltd
    00001a4d: 	idivl	%esi
    00001a4f: 	addl	%r12d, %eax
    00001a52: 	movsbl	%al, %eax
    00001a55: 	leal	(%rcx,%rax,2), %edx
    00001a58: 	leal	(%rsi,%rax,2), %ecx
    00001a5b: 	shll	$0x2, %ecx
    00001a5e: 	subl	%edx, %ecx
    00001a60: 	subl	%edx, %ecx
    00001a62: 	addl	%edx, %edx
    00001a64: 	subl	%edx, %ecx
    00001a66: 	movl	%ecx, %r9d
    00001a69: 	nopl	(%rax) # Size: 7
.Ltmp4622:
    00001a70: 	movl	%esi, %ecx
    00001a72: 	movsbl	(%rdi), %esi
    00001a75: 	addq	$0x1, %rdi
    00001a79: 	movl	%esi, %eax
    00001a7b: 	cltd
    00001a7c: 	idivl	%ecx
    00001a7e: 	addl	%r12d, %eax
    00001a81: 	movsbl	%al, %eax
    00001a84: 	leal	(%rcx,%rax,2), %ecx
    00001a87: 	leal	(%rsi,%rax,2), %edx
    00001a8a: 	leal	(%r9,%rcx,4), %ecx
    00001a8e: 	subl	%edx, %ecx
    00001a90: 	subl	%edx, %ecx
    00001a92: 	subl	%edx, %ecx
    00001a94: 	subl	%edx, %ecx
    00001a96: 	movl	%ecx, %r9d
    00001a99: 	cmpq	%rbp, %rdi
    00001a9c: 	jne	.Ltmp4622 # Offset: 6812
    00001a9e: 	testb	%cl, %cl
    00001aa0: 	jne	.Ltmp4623 # Offset: 6816
.Ltmp4655:
    00001aa6: 	addl	$0x1, %r13d
    00001aaa: 	cmpl	%r8d, %r13d
    00001aad: 	jl	.Ltmp4624 # Offset: 6829
.Ltmp4621:
    00001aaf: 	movq	0xa8(%rsp), %rsi
    00001ab7: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001abe: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 6846
    00001ac3: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001aca: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001ad1: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001ad8: 	je	.Ltmp4625 # Offset: 6872
.Ltmp4666:
    00001ade: 	movq	-0x20(%rax), %rbp
    00001ae2: 	callq	clock@PLT # Offset: 6882
    00001ae7: 	pxor	%xmm0, %xmm0
    00001aeb: 	movq	%rax, end_time(%rip)
    00001af2: 	movq	%rbp, %rdi
    00001af5: 	subq	start_time(%rip), %rax
    00001afc: 	cvtsi2sd	%rax, %xmm0
    00001b01: 	divsd	DATAat0x4d640(%rip), %xmm0
    00001b09: 	callq	_Z13record_resultdPKc # Offset: 6921
    00001b0e: 	movq	0x120(%rsp), %rdi
    00001b16: 	cmpq	0xc0(%rsp), %rdi
    00001b1e: 	je	.Ltmp4626 # Offset: 6942
    00001b20: 	movq	0x130(%rsp), %rax
    00001b28: 	leaq	0x1(%rax), %rsi
    00001b2c: 	callq	_ZdlPvm@PLT # Offset: 6956
.Ltmp4626:
    00001b31: 	leaq	DATAat0x4d29f(%rip), %rdx
    00001b38: 	movq	0xb8(%rsp), %rsi
    00001b40: 	xorl	%ebp, %ebp
    00001b42: 	movq	0xa8(%rsp), %rdi
    00001b4a: 	leaq	0x1f30(%rbx), %r14
    00001b51: 	leaq	DATAat0x4d004(%rip), %r12
    00001b58: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7000
    00001b5d: 	callq	clock@PLT # Offset: 7005
    00001b62: 	movl	iterations(%rip), %r13d
    00001b69: 	movq	%rax, start_time(%rip)
    00001b70: 	testl	%r13d, %r13d
    00001b73: 	jle	.Ltmp4627 # Offset: 7027
    00001b79: 	nopl	(%rax) # Size: 7
.Ltmp4630:
    00001b80: 	movzbl	(%rbx), %r10d
    00001b84: 	subb	0x1(%rbx), %r10b
    00001b88: 	movq	%rbx, %rax
    00001b8b: 	pxor	%xmm1, %xmm1
    00001b8f: 	shll	$0x2, %r10d
    00001b93: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4628:
    00001b98: 	movdqu	(%rax), %xmm0
    00001b9c: 	movdqu	0x1(%rax), %xmm5
    00001ba1: 	addq	$0x10, %rax
    00001ba5: 	psubb	%xmm5, %xmm0
    00001ba9: 	paddb	%xmm0, %xmm0
    00001bad: 	paddb	%xmm0, %xmm0
    00001bb1: 	paddb	%xmm0, %xmm1
    00001bb5: 	cmpq	%r14, %rax
    00001bb8: 	jne	.Ltmp4628 # Offset: 7096
    00001bba: 	movdqa	%xmm1, %xmm0
    00001bbe: 	psrldq	$0x8, %xmm0
    00001bc3: 	paddb	%xmm0, %xmm1
    00001bc7: 	pxor	%xmm0, %xmm0
    00001bcb: 	psadbw	%xmm0, %xmm1
    00001bcf: 	movq	0x1f30(%rbx), %xmm0
    00001bd7: 	movd	%xmm1, %eax
    00001bdb: 	movq	0x1f31(%rbx), %xmm1
    00001be3: 	addl	%eax, %r10d
    00001be6: 	psubb	%xmm1, %xmm0
    00001bea: 	pxor	%xmm1, %xmm1
    00001bee: 	paddb	%xmm0, %xmm0
    00001bf2: 	paddb	%xmm0, %xmm0
    00001bf6: 	movdqa	%xmm0, %xmm4
    00001bfa: 	psadbw	%xmm1, %xmm4
    00001bfe: 	movq	%xmm4, 0xd0(%rsp)
    00001c07: 	movq	%xmm4, %rax
    00001c0c: 	movzbl	0x1f39(%rbx), %r8d
    00001c14: 	movzbl	0x1f38(%rbx), %r9d
    00001c1c: 	movzbl	0x1f3a(%rbx), %edi
    00001c23: 	movl	%eax, %r11d
    00001c26: 	movzbl	0x1f3b(%rbx), %esi
    00001c2d: 	subl	%r8d, %r9d
    00001c30: 	addl	%r10d, %r11d
    00001c33: 	movzbl	0x1f3c(%rbx), %ecx
    00001c3a: 	movzbl	0x1f3d(%rbx), %edx
    00001c41: 	subl	%edi, %r8d
    00001c44: 	leal	(%r11,%r9,4), %r9d
    00001c48: 	subl	%esi, %edi
    00001c4a: 	movzbl	0x1f3e(%rbx), %eax
    00001c51: 	leal	(%r9,%r8,4), %r8d
    00001c55: 	subl	%ecx, %esi
    00001c57: 	subl	%edx, %ecx
    00001c59: 	leal	(%r8,%rdi,4), %edi
    00001c5d: 	subl	%eax, %edx
    00001c5f: 	subb	0x1f3f(%rbx), %al
    00001c65: 	leal	(%rdi,%rsi,4), %esi
    00001c68: 	leal	(%rsi,%rcx,4), %ecx
    00001c6b: 	leal	(%rcx,%rdx,4), %edx
    00001c6e: 	leal	(%rdx,%rax,4), %eax
    00001c71: 	testb	%al, %al
    00001c73: 	jne	.Ltmp4629 # Offset: 7283
.Ltmp4654:
    00001c79: 	addl	$0x1, %ebp
    00001c7c: 	cmpl	%r13d, %ebp
    00001c7f: 	jl	.Ltmp4630 # Offset: 7295
.Ltmp4627:
    00001c85: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00001c8c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbp
    00001c93: 	subq	$0x20, %rax
    00001c97: 	cmpq	%rax, %rbp
    00001c9a: 	je	.Ltmp4631 # Offset: 7322
    00001ca0: 	leaq	0x10(%rbp), %rdi
    00001ca4: 	movq	0x128(%rsp), %r12
    00001cac: 	movq	%rdi, (%rbp)
    00001cb0: 	movq	0x120(%rsp), %r13
    00001cb8: 	movq	%r13, %rax
    00001cbb: 	addq	%r12, %rax
    00001cbe: 	je	.Ltmp4632 # Offset: 7358
    00001cc0: 	testq	%r13, %r13
    00001cc3: 	je	.Ltmp4633 # Offset: 7363
.Ltmp4632:
    00001cc9: 	movq	%r12, 0x118(%rsp)
    00001cd1: 	cmpq	$0xf, %r12
    00001cd5: 	ja	.Ltmp4634 # Offset: 7381
    00001cdb: 	cmpq	$0x1, %r12
    00001cdf: 	jne	.Ltmp4635 # Offset: 7391
    00001ce5: 	movzbl	(%r13), %eax
    00001cea: 	movb	%al, 0x10(%rbp)
.Ltmp4692:
    00001ced: 	movq	%r12, 0x8(%rbp)
    00001cf1: 	movb	$0x0, (%rdi,%r12)
    00001cf6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001cfd: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001d04: 	addq	$0x20, %rax
    00001d08: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00001d0f: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00001d16: 	je	.Ltmp4636 # Offset: 7446
.Ltmp4667:
    00001d1c: 	movq	-0x20(%rax), %rbp
    00001d20: 	callq	clock@PLT # Offset: 7456
    00001d25: 	pxor	%xmm0, %xmm0
    00001d29: 	movq	%rax, end_time(%rip)
    00001d30: 	movq	%rbp, %rdi
    00001d33: 	subq	start_time(%rip), %rax
    00001d3a: 	cvtsi2sd	%rax, %xmm0
    00001d3f: 	divsd	DATAat0x4d640(%rip), %xmm0
    00001d47: 	callq	_Z13record_resultdPKc # Offset: 7495
    00001d4c: 	movq	0x120(%rsp), %rdi
    00001d54: 	cmpq	0xc0(%rsp), %rdi
    00001d5c: 	je	.Ltmp4637 # Offset: 7516
    00001d5e: 	movq	0x130(%rsp), %rax
    00001d66: 	leaq	0x1(%rax), %rsi
    00001d6a: 	callq	_ZdlPvm@PLT # Offset: 7530
.Ltmp4637:
    00001d6f: 	movq	0xb8(%rsp), %rsi
    00001d77: 	movq	0xa8(%rsp), %rdi
    00001d7f: 	leaq	DATAat0x4d2b1(%rip), %rdx
    00001d86: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7558
    00001d8b: 	callq	clock@PLT # Offset: 7563
    00001d90: 	movl	iterations(%rip), %r8d
    00001d97: 	movq	%rax, start_time(%rip)
    00001d9e: 	testl	%r8d, %r8d
    00001da1: 	jle	.Ltmp4638 # Offset: 7585
    00001da7: 	movzbl	0xcc(%rsp), %r12d
    00001db0: 	xorl	%r13d, %r13d
    00001db3: 	leaq	0x1(%rbx), %r14
    00001db7: 	leaq	0x1f40(%rbx), %rbp
    00001dbe: 	leaq	DATAat0x4d004(%rip), %r15
    00001dc5: 	nopl	(%rax) # Size: 3
.Ltmp4641:
    00001dc8: 	movsbl	0x1(%rbx), %edi
    00001dcc: 	movsbl	(%rbx), %esi
    00001dcf: 	movl	0xc8(%rsp), %r9d
    00001dd7: 	movl	%edi, %ecx
    00001dd9: 	subl	%esi, %ecx
    00001ddb: 	movl	%ecx, %eax
    00001ddd: 	imull	%r12d, %eax
    00001de1: 	movl	%eax, %ecx
    00001de3: 	movl	%edi, %eax
    00001de5: 	cltd
    00001de6: 	idivl	%r9d
    00001de9: 	addl	%ecx, %eax
    00001deb: 	movsbl	%al, %eax
    00001dee: 	leal	(%rsi,%rax,2), %ecx
    00001df1: 	leal	(%rdi,%rax,2), %edx
    00001df4: 	movq	%r14, %rdi
    00001df7: 	shll	$0x2, %ecx
    00001dfa: 	subl	%edx, %ecx
    00001dfc: 	subl	%edx, %ecx
    00001dfe: 	addl	%edx, %edx
    00001e00: 	subl	%edx, %ecx
    00001e02: 	movl	%ecx, %r10d
    00001e05: 	nopl	(%rax) # Size: 3
.Ltmp4639:
    00001e08: 	movl	%esi, %ecx
    00001e0a: 	movsbl	(%rdi), %esi
    00001e0d: 	addq	$0x1, %rdi
    00001e11: 	movl	%esi, %r11d
    00001e14: 	subl	%ecx, %r11d
    00001e17: 	movl	%r11d, %eax
    00001e1a: 	imull	%r12d, %eax
    00001e1e: 	movl	%eax, %r11d
    00001e21: 	movl	%esi, %eax
    00001e23: 	cltd
    00001e24: 	idivl	%r9d
    00001e27: 	addl	%r11d, %eax
    00001e2a: 	movsbl	%al, %eax
    00001e2d: 	leal	(%rcx,%rax,2), %ecx
    00001e30: 	leal	(%rsi,%rax,2), %edx
    00001e33: 	leal	(%r10,%rcx,4), %ecx
    00001e37: 	subl	%edx, %ecx
    00001e39: 	subl	%edx, %ecx
    00001e3b: 	subl	%edx, %ecx
    00001e3d: 	subl	%edx, %ecx
    00001e3f: 	movl	%ecx, %r10d
    00001e42: 	cmpq	%rbp, %rdi
    00001e45: 	jne	.Ltmp4639 # Offset: 7749
    00001e47: 	testb	%cl, %cl
    00001e49: 	jne	.Ltmp4640 # Offset: 7753
.Ltmp4653:
    00001e4f: 	addl	$0x1, %r13d
    00001e53: 	cmpl	%r8d, %r13d
    00001e56: 	jl	.Ltmp4641 # Offset: 7766
.Ltmp4638:
    00001e5c: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00001e63: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00001e6a: 	subq	$0x20, %rax
    00001e6e: 	cmpq	%rax, %rbx
    00001e71: 	je	.Ltmp4642 # Offset: 7793
    00001e77: 	leaq	0x10(%rbx), %rdi
    00001e7b: 	movq	0x128(%rsp), %r12
    00001e83: 	movq	%rdi, (%rbx)
    00001e86: 	movq	0x120(%rsp), %rbp
    00001e8e: 	movq	%rbp, %rax
    00001e91: 	addq	%r12, %rax
    00001e94: 	je	.Ltmp4643 # Offset: 7828
    00001e96: 	testq	%rbp, %rbp
    00001e99: 	je	.Ltmp4644 # Offset: 7833
.Ltmp4643:
    00001e9f: 	movq	%r12, 0x118(%rsp)
    00001ea7: 	cmpq	$0xf, %r12
    00001eab: 	ja	.Ltmp4645 # Offset: 7851
    00001eb1: 	cmpq	$0x1, %r12
    00001eb5: 	jne	.Ltmp4646 # Offset: 7861
    00001ebb: 	movzbl	(%rbp), %eax
    00001ebf: 	movb	%al, 0x10(%rbx)
.Ltmp4679:
    00001ec2: 	movq	%r12, 0x8(%rbx)
    00001ec6: 	movb	$0x0, (%rdi,%r12)
    00001ecb: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001ed2: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001ed9: 	addq	$0x20, %rax
    00001edd: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00001ee4: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00001eeb: 	je	.Ltmp4647 # Offset: 7915
.Ltmp4665:
    00001ef1: 	movq	-0x20(%rax), %rbp
    00001ef5: 	callq	clock@PLT # Offset: 7925
    00001efa: 	pxor	%xmm0, %xmm0
    00001efe: 	movq	%rax, end_time(%rip)
    00001f05: 	movq	%rbp, %rdi
    00001f08: 	subq	start_time(%rip), %rax
    00001f0f: 	cvtsi2sd	%rax, %xmm0
    00001f14: 	divsd	DATAat0x4d640(%rip), %xmm0
    00001f1c: 	callq	_Z13record_resultdPKc # Offset: 7964
    00001f21: 	movq	0x120(%rsp), %rdi
    00001f29: 	cmpq	0xc0(%rsp), %rdi
    00001f31: 	je	.Ltmp4648 # Offset: 7985
    00001f33: 	movq	0x130(%rsp), %rax
    00001f3b: 	leaq	0x1(%rax), %rsi
    00001f3f: 	callq	_ZdlPvm@PLT # Offset: 7999
.Ltmp4648:
    00001f44: 	movq	0x148(%rsp), %rax
    00001f4c: 	subq	%fs:0x28, %rax
    00001f55: 	jne	.Ltmp4649 # Offset: 8021
    00001f5b: 	movl	iterations(%rip), %edx
    00001f61: 	xorl	%r8d, %r8d
    00001f64: 	xorl	%ecx, %ecx
    00001f66: 	movl	$0x1f40, %esi
    00001f6b: 	movq	0xb8(%rsp), %rax
    00001f73: 	movq	(%rax), %rdi
    00001f76: 	addq	$0x158, %rsp
    00001f7d: 	popq	%rbx
    00001f7e: 	popq	%rbp
    00001f7f: 	popq	%r12
    00001f81: 	popq	%r13
    00001f83: 	popq	%r14
    00001f85: 	popq	%r15
    00001f87: 	jmp	_Z9summarizePKciiii # TAILCALL  # Offset: 8071
    00001f8c: 	nopl	(%rax) # Size: 4
.Ltmp4535:
    00001f90: 	movq	0x120(%rsp), %rdx
    00001f98: 	movq	%r12, %rsi
    00001f9b: 	movl	$0x1, %edi
    00001fa0: 	xorl	%eax, %eax
    00001fa2: 	callq	__printf_chk@PLT # Offset: 8098
    00001fa7: 	movl	iterations(%rip), %r13d
    00001fae: 	jmp	.Ltmp4650 # Offset: 8110
.Ltmp4540:
    00001fb3: 	leaq	0x118(%rsp), %rsi
    00001fbb: 	xorl	%edx, %edx
    00001fbd: 	movq	%rbp, %rdi
    00001fc0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8128
    00001fc5: 	movq	%rax, (%rbp)
    00001fc9: 	movq	%rax, %rdi
    00001fcc: 	movq	0x118(%rsp), %rax
    00001fd4: 	movq	%rax, 0x10(%rbp)
.Ltmp4678:
    00001fd8: 	movq	%r12, %rdx
    00001fdb: 	movq	%r13, %rsi
    00001fde: 	callq	memcpy@PLT # Offset: 8158
    00001fe3: 	movq	0x118(%rsp), %r12
    00001feb: 	movq	(%rbp), %rdi
    00001fef: 	jmp	.Ltmp4651 # Offset: 8175
    00001ff4: 	nopl	(%rax) # Size: 4
.Ltmp4546:
    00001ff8: 	movq	0x120(%rsp), %rdx
    00002000: 	movq	%r12, %rsi
    00002003: 	movl	$0x1, %edi
    00002008: 	xorl	%eax, %eax
    0000200a: 	callq	__printf_chk@PLT # Offset: 8202
    0000200f: 	movl	iterations(%rip), %r13d
    00002016: 	jmp	.Ltmp4652 # Offset: 8214
    0000201b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4640:
    00002020: 	movq	0x120(%rsp), %rdx
    00002028: 	movq	%r15, %rsi
    0000202b: 	movl	$0x1, %edi
    00002030: 	xorl	%eax, %eax
    00002032: 	callq	__printf_chk@PLT # Offset: 8242
    00002037: 	movl	iterations(%rip), %r8d
    0000203e: 	jmp	.Ltmp4653 # Offset: 8254
    00002043: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4629:
    00002048: 	movq	0x120(%rsp), %rdx
    00002050: 	movq	%r12, %rsi
    00002053: 	movl	$0x1, %edi
    00002058: 	xorl	%eax, %eax
    0000205a: 	callq	__printf_chk@PLT # Offset: 8282
    0000205f: 	movl	iterations(%rip), %r13d
    00002066: 	jmp	.Ltmp4654 # Offset: 8294
    0000206b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4623:
    00002070: 	movq	0x120(%rsp), %rdx
    00002078: 	movq	%r15, %rsi
    0000207b: 	movl	$0x1, %edi
    00002080: 	xorl	%eax, %eax
    00002082: 	callq	__printf_chk@PLT # Offset: 8322
    00002087: 	movl	iterations(%rip), %r8d
    0000208e: 	jmp	.Ltmp4655 # Offset: 8334
    00002093: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4612:
    00002098: 	movq	0x120(%rsp), %rdx
    000020a0: 	movq	%r12, %rsi
    000020a3: 	movl	$0x1, %edi
    000020a8: 	xorl	%eax, %eax
    000020aa: 	callq	__printf_chk@PLT # Offset: 8362
    000020af: 	movl	iterations(%rip), %r13d
    000020b6: 	jmp	.Ltmp4656 # Offset: 8374
    000020bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4590:
    000020c0: 	movq	0x120(%rsp), %rdx
    000020c8: 	movq	%r12, %rsi
    000020cb: 	movl	$0x1, %edi
    000020d0: 	xorl	%eax, %eax
    000020d2: 	callq	__printf_chk@PLT # Offset: 8402
    000020d7: 	movl	iterations(%rip), %r13d
    000020de: 	jmp	.Ltmp4657 # Offset: 8414
    000020e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4601:
    000020e8: 	movq	0x120(%rsp), %rdx
    000020f0: 	leaq	DATAat0x4d004(%rip), %rsi
    000020f7: 	movl	$0x1, %edi
    000020fc: 	xorl	%eax, %eax
    000020fe: 	callq	__printf_chk@PLT # Offset: 8446
    00002103: 	movl	iterations(%rip), %eax
    00002109: 	movl	%eax, 0xb4(%rsp)
    00002110: 	jmp	.Ltmp4658 # Offset: 8464
    00002115: 	nopl	(%rax) # Size: 3
.Ltmp4557:
    00002118: 	movq	0x120(%rsp), %rdx
    00002120: 	leaq	DATAat0x4d004(%rip), %rsi
    00002127: 	movl	$0x1, %edi
    0000212c: 	xorl	%eax, %eax
    0000212e: 	callq	__printf_chk@PLT # Offset: 8494
    00002133: 	movl	iterations(%rip), %eax
    00002139: 	movl	%eax, 0x48(%rsp)
    0000213d: 	jmp	.Ltmp4659 # Offset: 8509
    00002142: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4579:
    00002148: 	movq	0x120(%rsp), %rdx
    00002150: 	leaq	DATAat0x4d004(%rip), %rsi
    00002157: 	movl	$0x1, %edi
    0000215c: 	xorl	%eax, %eax
    0000215e: 	callq	__printf_chk@PLT # Offset: 8542
    00002163: 	movl	iterations(%rip), %eax
    00002169: 	movl	%eax, 0x48(%rsp)
    0000216d: 	jmp	.Ltmp4660 # Offset: 8557
    00002172: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4568:
    00002178: 	movq	0x120(%rsp), %rdx
    00002180: 	movq	%r12, %rsi
    00002183: 	movl	$0x1, %edi
    00002188: 	xorl	%eax, %eax
    0000218a: 	callq	__printf_chk@PLT # Offset: 8586
    0000218f: 	movl	iterations(%rip), %r13d
    00002196: 	jmp	.Ltmp4661 # Offset: 8598
.Ltmp4570:
    0000219b: 	movq	0xa8(%rsp), %rsi
    000021a3: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000021aa: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8618
    000021af: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000021b6: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000021bd: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000021c4: 	jne	.Ltmp4662 # Offset: 8644
.Ltmp4575:
    000021ca: 	movq	-0x8(%rdx), %rax
    000021ce: 	addq	$0x200, %rax
    000021d4: 	jmp	.Ltmp4662 # Offset: 8660
.Ltmp4619:
    000021d9: 	movq	-0x8(%rdx), %rax
    000021dd: 	addq	$0x200, %rax
    000021e3: 	jmp	.Ltmp4663 # Offset: 8675
.Ltmp4614:
    000021e8: 	movq	0xa8(%rsp), %rsi
    000021f0: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000021f7: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8695
    000021fc: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002203: 	jmp	.Ltmp4664 # Offset: 8707
.Ltmp4642:
    00002208: 	movq	0xa8(%rsp), %rsi
    00002210: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002217: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8727
    0000221c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002223: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000222a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002231: 	jne	.Ltmp4665 # Offset: 8753
.Ltmp4647:
    00002237: 	movq	-0x8(%rdx), %rax
    0000223b: 	addq	$0x200, %rax
    00002241: 	jmp	.Ltmp4665 # Offset: 8769
.Ltmp4625:
    00002246: 	movq	-0x8(%rdx), %rax
    0000224a: 	addq	$0x200, %rax
    00002250: 	jmp	.Ltmp4666 # Offset: 8784
.Ltmp4631:
    00002255: 	movq	0xa8(%rsp), %rsi
    0000225d: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002264: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8804
    00002269: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002270: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00002277: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000227e: 	jne	.Ltmp4667 # Offset: 8830
.Ltmp4636:
    00002284: 	movq	-0x8(%rdx), %rax
    00002288: 	addq	$0x200, %rax
    0000228e: 	jmp	.Ltmp4667 # Offset: 8846
.Ltmp4553:
    00002293: 	movq	-0x8(%rdx), %rax
    00002297: 	addq	$0x200, %rax
    0000229d: 	jmp	.Ltmp4668 # Offset: 8861
.Ltmp4581:
    000022a2: 	movq	0xa8(%rsp), %rsi
    000022aa: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000022b1: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8881
    000022b6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000022bd: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000022c4: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000022cb: 	jne	.Ltmp4669 # Offset: 8907
.Ltmp4586:
    000022d1: 	movq	-0x8(%rdx), %rax
    000022d5: 	addq	$0x200, %rax
    000022db: 	jmp	.Ltmp4669 # Offset: 8923
.Ltmp4564:
    000022e0: 	movq	-0x8(%rdx), %rax
    000022e4: 	addq	$0x200, %rax
    000022ea: 	jmp	.Ltmp4670 # Offset: 8938
.Ltmp4559:
    000022ef: 	movq	0xa8(%rsp), %rsi
    000022f7: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000022fe: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8958
    00002303: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000230a: 	jmp	.Ltmp4671 # Offset: 8970
.Ltmp4592:
    0000230f: 	movq	0xa8(%rsp), %rsi
    00002317: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000231e: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8990
    00002323: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000232a: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00002331: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002338: 	jne	.Ltmp4672 # Offset: 9016
.Ltmp4597:
    0000233e: 	movq	-0x8(%rdx), %rax
    00002342: 	addq	$0x200, %rax
    00002348: 	jmp	.Ltmp4672 # Offset: 9032
.Ltmp4608:
    0000234d: 	movq	-0x8(%rdx), %rax
    00002351: 	addq	$0x200, %rax
    00002357: 	jmp	.Ltmp4673 # Offset: 9047
.Ltmp4603:
    0000235c: 	movq	0xa8(%rsp), %rsi
    00002364: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000236b: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 9067
    00002370: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002377: 	jmp	.Ltmp4674 # Offset: 9079
.Ltmp4548:
    0000237c: 	movq	0xa8(%rsp), %rsi
    00002384: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000238b: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 9099
    00002390: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002397: 	jmp	.Ltmp4675 # Offset: 9111
.Ltmp4542:
    0000239c: 	movq	-0x8(%rdx), %rax
    000023a0: 	addq	$0x200, %rax
    000023a6: 	jmp	.Ltmp4676 # Offset: 9126
.Ltmp4537:
    000023ab: 	movq	0xa8(%rsp), %rsi
    000023b3: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000023ba: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 9146
    000023bf: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000023c6: 	jmp	.Ltmp4677 # Offset: 9158
.Ltmp4541:
    000023cb: 	testq	%r12, %r12
    000023ce: 	je	.Ltmp4651 # Offset: 9166
    000023d4: 	jmp	.Ltmp4678 # Offset: 9172
    000023d9: 	nopl	(%rax) # Size: 7
.Ltmp4646:
    000023e0: 	testq	%r12, %r12
    000023e3: 	je	.Ltmp4679 # Offset: 9187
    000023e9: 	jmp	.Ltmp4680 # Offset: 9193
    000023ee: 	nop # Size: 2
.Ltmp4618:
    000023f0: 	testq	%r12, %r12
    000023f3: 	je	.Ltmp4681 # Offset: 9203
    000023f9: 	jmp	.Ltmp4682 # Offset: 9209
    000023fe: 	nop # Size: 2
.Ltmp4607:
    00002400: 	testq	%r12, %r12
    00002403: 	je	.Ltmp4683 # Offset: 9219
    00002409: 	jmp	.Ltmp4684 # Offset: 9225
    0000240e: 	nop # Size: 2
.Ltmp4552:
    00002410: 	testq	%r12, %r12
    00002413: 	je	.Ltmp4685 # Offset: 9235
    00002419: 	jmp	.Ltmp4686 # Offset: 9241
    0000241e: 	nop # Size: 2
.Ltmp4563:
    00002420: 	testq	%r12, %r12
    00002423: 	je	.Ltmp4687 # Offset: 9251
    00002429: 	jmp	.Ltmp4688 # Offset: 9257
    0000242e: 	nop # Size: 2
.Ltmp4574:
    00002430: 	testq	%r12, %r12
    00002433: 	je	.Ltmp4689 # Offset: 9267
.Ltmp4696:
    00002439: 	movq	%r12, %rdx
    0000243c: 	movq	%r13, %rsi
    0000243f: 	callq	memcpy@PLT # Offset: 9279
    00002444: 	movq	0x118(%rsp), %r12
    0000244c: 	movq	(%rbp), %rdi
    00002450: 	jmp	.Ltmp4689 # Offset: 9296
.Ltmp4596:
    00002455: 	testq	%r12, %r12
    00002458: 	je	.Ltmp4690 # Offset: 9304
    0000245e: 	jmp	.Ltmp4691 # Offset: 9310
    00002463: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4635:
    00002468: 	testq	%r12, %r12
    0000246b: 	je	.Ltmp4692 # Offset: 9323
    00002471: 	jmp	.Ltmp4693 # Offset: 9329
    00002476: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp4585:
    00002480: 	testq	%r12, %r12
    00002483: 	je	.Ltmp4694 # Offset: 9347
.Ltmp4695:
    00002489: 	movq	%r12, %rdx
    0000248c: 	movq	%r13, %rsi
    0000248f: 	callq	memcpy@PLT # Offset: 9359
    00002494: 	movq	0x118(%rsp), %r12
    0000249c: 	movq	(%rbp), %rdi
    000024a0: 	jmp	.Ltmp4694 # Offset: 9376
.Ltmp4645:
    000024a5: 	leaq	0x118(%rsp), %rsi
    000024ad: 	xorl	%edx, %edx
    000024af: 	movq	%rbx, %rdi
    000024b2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9394
    000024b7: 	movq	%rax, (%rbx)
    000024ba: 	movq	%rax, %rdi
    000024bd: 	movq	0x118(%rsp), %rax
    000024c5: 	movq	%rax, 0x10(%rbx)
.Ltmp4680:
    000024c9: 	movq	%r12, %rdx
    000024cc: 	movq	%rbp, %rsi
    000024cf: 	callq	memcpy@PLT # Offset: 9423
    000024d4: 	movq	0x118(%rsp), %r12
    000024dc: 	movq	(%rbx), %rdi
    000024df: 	jmp	.Ltmp4679 # Offset: 9439
.Ltmp4634:
    000024e4: 	leaq	0x118(%rsp), %rsi
    000024ec: 	xorl	%edx, %edx
    000024ee: 	movq	%rbp, %rdi
    000024f1: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9457
    000024f6: 	movq	%rax, (%rbp)
    000024fa: 	movq	%rax, %rdi
    000024fd: 	movq	0x118(%rsp), %rax
    00002505: 	movq	%rax, 0x10(%rbp)
.Ltmp4693:
    00002509: 	movq	%r12, %rdx
    0000250c: 	movq	%r13, %rsi
    0000250f: 	callq	memcpy@PLT # Offset: 9487
    00002514: 	movq	0x118(%rsp), %r12
    0000251c: 	movq	(%rbp), %rdi
    00002520: 	jmp	.Ltmp4692 # Offset: 9504
.Ltmp4617:
    00002525: 	leaq	0x118(%rsp), %rsi
    0000252d: 	xorl	%edx, %edx
    0000252f: 	movq	%rbp, %rdi
    00002532: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9522
    00002537: 	movq	%rax, (%rbp)
    0000253b: 	movq	%rax, %rdi
    0000253e: 	movq	0x118(%rsp), %rax
    00002546: 	movq	%rax, 0x10(%rbp)
.Ltmp4682:
    0000254a: 	movq	%r12, %rdx
    0000254d: 	movq	%r13, %rsi
    00002550: 	callq	memcpy@PLT # Offset: 9552
    00002555: 	movq	0x118(%rsp), %r12
    0000255d: 	movq	(%rbp), %rdi
    00002561: 	jmp	.Ltmp4681 # Offset: 9569
.Ltmp4584:
    00002566: 	leaq	0x118(%rsp), %rsi
    0000256e: 	xorl	%edx, %edx
    00002570: 	movq	%rbp, %rdi
    00002573: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9587
    00002578: 	movq	%rax, (%rbp)
    0000257c: 	movq	%rax, %rdi
    0000257f: 	movq	0x118(%rsp), %rax
    00002587: 	movq	%rax, 0x10(%rbp)
    0000258b: 	jmp	.Ltmp4695 # Offset: 9611
.Ltmp4606:
    00002590: 	leaq	0x118(%rsp), %rsi
    00002598: 	xorl	%edx, %edx
    0000259a: 	movq	%rbp, %rdi
    0000259d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9629
    000025a2: 	movq	%rax, (%rbp)
    000025a6: 	movq	%rax, %rdi
    000025a9: 	movq	0x118(%rsp), %rax
    000025b1: 	movq	%rax, 0x10(%rbp)
.Ltmp4684:
    000025b5: 	movq	%r12, %rdx
    000025b8: 	movq	%r13, %rsi
    000025bb: 	callq	memcpy@PLT # Offset: 9659
    000025c0: 	movq	0x118(%rsp), %r12
    000025c8: 	movq	(%rbp), %rdi
    000025cc: 	jmp	.Ltmp4683 # Offset: 9676
.Ltmp4595:
    000025d1: 	leaq	0x118(%rsp), %rsi
    000025d9: 	xorl	%edx, %edx
    000025db: 	movq	%rbp, %rdi
    000025de: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9694
    000025e3: 	movq	%rax, (%rbp)
    000025e7: 	movq	%rax, %rdi
    000025ea: 	movq	0x118(%rsp), %rax
    000025f2: 	movq	%rax, 0x10(%rbp)
.Ltmp4691:
    000025f6: 	movq	%r12, %rdx
    000025f9: 	movq	%r13, %rsi
    000025fc: 	callq	memcpy@PLT # Offset: 9724
    00002601: 	movq	0x118(%rsp), %r12
    00002609: 	movq	(%rbp), %rdi
    0000260d: 	jmp	.Ltmp4690 # Offset: 9741
.Ltmp4551:
    00002612: 	leaq	0x118(%rsp), %rsi
    0000261a: 	xorl	%edx, %edx
    0000261c: 	movq	%rbp, %rdi
    0000261f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9759
    00002624: 	movq	%rax, (%rbp)
    00002628: 	movq	%rax, %rdi
    0000262b: 	movq	0x118(%rsp), %rax
    00002633: 	movq	%rax, 0x10(%rbp)
.Ltmp4686:
    00002637: 	movq	%r12, %rdx
    0000263a: 	movq	%r13, %rsi
    0000263d: 	callq	memcpy@PLT # Offset: 9789
    00002642: 	movq	0x118(%rsp), %r12
    0000264a: 	movq	(%rbp), %rdi
    0000264e: 	jmp	.Ltmp4685 # Offset: 9806
.Ltmp4573:
    00002653: 	leaq	0x118(%rsp), %rsi
    0000265b: 	xorl	%edx, %edx
    0000265d: 	movq	%rbp, %rdi
    00002660: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9824
    00002665: 	movq	%rax, (%rbp)
    00002669: 	movq	%rax, %rdi
    0000266c: 	movq	0x118(%rsp), %rax
    00002674: 	movq	%rax, 0x10(%rbp)
    00002678: 	jmp	.Ltmp4696 # Offset: 9848
.Ltmp4562:
    0000267d: 	leaq	0x118(%rsp), %rsi
    00002685: 	xorl	%edx, %edx
    00002687: 	movq	%rbp, %rdi
    0000268a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9866
    0000268f: 	movq	%rax, (%rbp)
    00002693: 	movq	%rax, %rdi
    00002696: 	movq	0x118(%rsp), %rax
    0000269e: 	movq	%rax, 0x10(%rbp)
.Ltmp4688:
    000026a2: 	movq	%r12, %rdx
    000026a5: 	movq	%r13, %rsi
    000026a8: 	callq	memcpy@PLT # Offset: 9896
    000026ad: 	movq	0x118(%rsp), %r12
    000026b5: 	movq	(%rbp), %rdi
    000026b9: 	jmp	.Ltmp4687 # Offset: 9913
.Ltmp4550:
    000026be: 	leaq	DATAat0x4d018(%rip), %rdi
    000026c5: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9925
.Ltmp4561:
    000026ca: 	leaq	DATAat0x4d018(%rip), %rdi
    000026d1: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9937
.Ltmp4572:
    000026d6: 	leaq	DATAat0x4d018(%rip), %rdi
    000026dd: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9949
.Ltmp4583:
    000026e2: 	leaq	DATAat0x4d018(%rip), %rdi
    000026e9: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9961
.Ltmp4594:
    000026ee: 	leaq	DATAat0x4d018(%rip), %rdi
    000026f5: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9973
.Ltmp4605:
    000026fa: 	leaq	DATAat0x4d018(%rip), %rdi
    00002701: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9985
.Ltmp4616:
    00002706: 	leaq	DATAat0x4d018(%rip), %rdi
    0000270d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9997
.Ltmp4633:
    00002712: 	leaq	DATAat0x4d018(%rip), %rdi
    00002719: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10009
.Ltmp4644:
    0000271e: 	leaq	DATAat0x4d018(%rip), %rdi
    00002725: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10021
.Ltmp4649:
    0000272a: 	callq	__stack_chk_fail@PLT # Offset: 10026
.Ltmp4539:
    0000272f: 	leaq	DATAat0x4d018(%rip), %rdi
    00002736: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10038
    0000273b: 	endbr64
.Ltmp4698:
    0000273f: 	movq	%rax, %rbp
    00002742: 	jmp	.Ltmp4697 # Offset: 10050
    00002744: 	endbr64
    00002748: 	jmp	.Ltmp4698 # Offset: 10056
    0000274a: 	endbr64
    0000274e: 	jmp	.Ltmp4698 # Offset: 10062
    00002750: 	endbr64
    00002754: 	jmp	.Ltmp4698 # Offset: 10068
    00002756: 	endbr64
    0000275a: 	jmp	.Ltmp4698 # Offset: 10074
    0000275c: 	endbr64
    00002760: 	jmp	.Ltmp4698 # Offset: 10080
    00002762: 	endbr64
    00002766: 	movq	%rax, %rbp
    00002769: 	jmp	.Ltmp4699 # Offset: 10089
    0000276b: 	endbr64
    0000276f: 	jmp	.Ltmp4698 # Offset: 10095
.Ltmp4699:
    00002771: 	movq	0x120(%rsp), %rdi
    00002779: 	leaq	0x130(%rsp), %rax
    00002781: 	cmpq	%rax, %rdi
    00002784: 	je	.Ltmp4700 # Offset: 10116
.Ltmp4701:
    00002786: 	movq	0x130(%rsp), %rax
    0000278e: 	leaq	0x1(%rax), %rsi
    00002792: 	callq	_ZdlPvm@PLT # Offset: 10130
.Ltmp4700:
    00002797: 	movq	%rbp, %rdi
    0000279a: 	callq	_Unwind_Resume@PLT # Offset: 10138
    0000279f: 	endbr64
    000027a3: 	jmp	.Ltmp4698 # Offset: 10147
    000027a5: 	endbr64
    000027a9: 	jmp	.Ltmp4698 # Offset: 10153
    000027ab: 	endbr64
    000027af: 	jmp	.Ltmp4698 # Offset: 10159
.Ltmp4697:
    000027b1: 	movq	0x120(%rsp), %rdi
    000027b9: 	cmpq	0xc0(%rsp), %rdi
    000027c1: 	jne	.Ltmp4701 # Offset: 10177
    000027c3: 	jmp	.Ltmp4700 # Offset: 10179
DWARF CFI Instructions:
    <empty>
End of Function "_Z16TestUnrolledTypeIaLi4EEvPT_S0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z11TestOneTypeIaEvd" after disassembly {
  Number      : 188
  State       : disassembled
  Address     : 0x40260
  Size        : 0x5124
  MaxSize     : 0x5130
  Offset      : 0x40260
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIaEvd
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0187:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x1000, %rsp
    00000015: 	orq	$0x0, (%rsp)
    0000001a: 	subq	$0x1000, %rsp
    00000021: 	orq	$0x0, (%rsp)
    00000026: 	subq	$0x188, %rsp
    0000002d: 	movl	$0x3e8, %ecx
    00000032: 	leaq	DATAat0x4d5c2(%rip), %rsi
    00000039: 	movabsq	$0x101010101010101, %rdx
    00000043: 	movsd	%xmm0, (%rsp)
    00000048: 	leaq	0x230(%rsp), %r14
    00000050: 	leaq	0x170(%rsp), %rbx
    00000058: 	movq	%fs:0x28, %rax
    00000061: 	movq	%rax, 0x2178(%rsp)
    00000069: 	xorl	%eax, %eax
    0000006b: 	cvttsd2si	init_value(%rip), %eax
    00000073: 	movq	%r14, %rdi
    00000076: 	movq	%rbx, 0x8(%rsp)
    0000007b: 	leaq	0x210(%rsp), %r15
    00000083: 	movzbl	%al, %eax
    00000086: 	imulq	%rdx, %rax
    0000008a: 	rep		stosq	%rax, %es:(%rdi)
    0000008d: 	movq	%rbx, %rdi
    00000090: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1" # Offset: 144
    00000095: 	movdqa	_Z7gLabelsB5cxx11+16(%rip), %xmm3
    0000009d: 	movdqa	_Z7gLabelsB5cxx11+32(%rip), %xmm4
    000000a5: 	leaq	0x150(%rsp), %rsi
    000000ad: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000000b4: 	movaps	%xmm3, 0x150(%rsp)
    000000bc: 	movaps	%xmm4, 0x160(%rsp)
    000000c4: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E # Offset: 196
    000000c9: 	movsd	(%rsp), %xmm0
    000000ce: 	movq	%rbx, %rsi
    000000d1: 	movq	%r15, %rdi
    000000d4: 	addsd	DATAat0x4d638(%rip), %xmm0
    000000dc: 	leaq	DATAat0x4d1e0(%rip), %rdx
    000000e3: 	cvttsd2si	%xmm0, %eax
    000000e7: 	movl	%eax, 0x5c(%rsp)
    000000eb: 	movl	%eax, %ebp
    000000ed: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 237
    000000f2: 	movsbl	%bpl, %eax
    000000f6: 	leaq	0x2160(%rsp), %rbx
    000000fe: 	xorl	%ebp, %ebp
    00000100: 	movl	%eax, 0x4c(%rsp)
    00000104: 	callq	clock@PLT # Offset: 260
    00000109: 	movl	iterations(%rip), %r12d
    00000110: 	movq	%rax, start_time(%rip)
    00000117: 	testl	%r12d, %r12d
    0000011a: 	jle	.Ltmp4702 # Offset: 282
.Ltmp4705:
    00000120: 	movzbl	0x230(%rsp), %r10d
    00000129: 	movq	%r14, %rax
    0000012c: 	pxor	%xmm0, %xmm0
    00000130: 	subb	0x231(%rsp), %r10b
    00000138: 	nopl	(%rax,%rax) # Size: 8
.Ltmp4703:
    00000140: 	paddb	(%rax), %xmm0
    00000144: 	movdqu	0x1(%rax), %xmm7
    00000149: 	addq	$0x10, %rax
    0000014d: 	psubb	%xmm7, %xmm0
    00000151: 	cmpq	%rbx, %rax
    00000154: 	jne	.Ltmp4703 # Offset: 340
    00000156: 	movdqa	%xmm0, %xmm1
    0000015a: 	pxor	%xmm6, %xmm6
    0000015e: 	movzbl	0x2169(%rsp), %r9d
    00000167: 	movzbl	0x216a(%rsp), %r8d
    00000170: 	psrldq	$0x8, %xmm1
    00000175: 	movzbl	0x216b(%rsp), %edi
    0000017d: 	movzbl	0x216c(%rsp), %esi
    00000185: 	paddb	%xmm1, %xmm0
    00000189: 	movzbl	0x216d(%rsp), %ecx
    00000191: 	movq	0x2161(%rsp), %xmm1
    0000019a: 	psadbw	%xmm6, %xmm0
    0000019e: 	movzbl	0x216e(%rsp), %edx
    000001a6: 	movd	%xmm0, %eax
    000001aa: 	movq	0x2160(%rsp), %xmm0
    000001b3: 	addl	%eax, %r10d
    000001b6: 	psubb	%xmm1, %xmm0
    000001ba: 	pxor	%xmm1, %xmm1
    000001be: 	movdqa	%xmm0, %xmm6
    000001c2: 	psadbw	%xmm1, %xmm6
    000001c6: 	movq	%xmm6, 0x148(%rsp)
    000001cf: 	movq	%xmm6, %rax
    000001d4: 	movl	%eax, %r11d
    000001d7: 	movzbl	0x2168(%rsp), %eax
    000001df: 	addl	%r10d, %r11d
    000001e2: 	subl	%r9d, %eax
    000001e5: 	subl	%r8d, %r9d
    000001e8: 	subl	%edi, %r8d
    000001eb: 	subl	%esi, %edi
    000001ed: 	addl	%r11d, %eax
    000001f0: 	subl	%ecx, %esi
    000001f2: 	subl	%edx, %ecx
    000001f4: 	subb	0x216f(%rsp), %dl
    000001fb: 	addl	%r9d, %eax
    000001fe: 	addl	%eax, %r8d
    00000201: 	addl	%r8d, %edi
    00000204: 	addl	%edi, %esi
    00000206: 	addl	%esi, %ecx
    00000208: 	addb	%dl, %cl
    0000020a: 	jne	.Ltmp4704 # Offset: 522
.Ltmp4965:
    00000210: 	addl	$0x1, %ebp
    00000213: 	cmpl	%r12d, %ebp
    00000216: 	jl	.Ltmp4705 # Offset: 534
.Ltmp4702:
    0000021c: 	movq	%r15, %rsi
    0000021f: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000226: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 550
    0000022b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000232: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000239: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000240: 	je	.Ltmp4706 # Offset: 576
.Ltmp4966:
    00000246: 	movq	-0x20(%rax), %rbp
    0000024a: 	callq	clock@PLT # Offset: 586
    0000024f: 	pxor	%xmm0, %xmm0
    00000253: 	movq	%rax, end_time(%rip)
    0000025a: 	movq	%rbp, %rdi
    0000025d: 	subq	start_time(%rip), %rax
    00000264: 	cvtsi2sd	%rax, %xmm0
    00000269: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000271: 	callq	_Z13record_resultdPKc # Offset: 625
    00000276: 	movq	0x210(%rsp), %rdi
    0000027e: 	leaq	0x220(%rsp), %rax
    00000286: 	movq	%rax, (%rsp)
    0000028a: 	cmpq	%rax, %rdi
    0000028d: 	je	.Ltmp4707 # Offset: 653
    0000028f: 	movq	0x220(%rsp), %rax
    00000297: 	leaq	0x1(%rax), %rsi
    0000029b: 	callq	_ZdlPvm@PLT # Offset: 667
.Ltmp4707:
    000002a0: 	movq	0x8(%rsp), %rsi
    000002a5: 	leaq	DATAat0x4d1ed(%rip), %rdx
    000002ac: 	movq	%r15, %rdi
    000002af: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 687
    000002b4: 	callq	clock@PLT # Offset: 692
    000002b9: 	movl	iterations(%rip), %r12d
    000002c0: 	xorl	%ebp, %ebp
    000002c2: 	leaq	0x2160(%rsp), %rbx
    000002ca: 	movq	%rax, start_time(%rip)
    000002d1: 	testl	%r12d, %r12d
    000002d4: 	jle	.Ltmp4708 # Offset: 724
    000002da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4711:
    000002e0: 	movzbl	0x230(%rsp), %r10d
    000002e9: 	movq	%r14, %rax
    000002ec: 	pxor	%xmm0, %xmm0
    000002f0: 	subb	0x231(%rsp), %r10b
    000002f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp4709:
    00000300: 	paddb	(%rax), %xmm0
    00000304: 	movdqu	0x1(%rax), %xmm7
    00000309: 	addq	$0x10, %rax
    0000030d: 	psubb	%xmm7, %xmm0
    00000311: 	cmpq	%rbx, %rax
    00000314: 	jne	.Ltmp4709 # Offset: 788
    00000316: 	movdqa	%xmm0, %xmm1
    0000031a: 	pxor	%xmm3, %xmm3
    0000031e: 	movzbl	0x2169(%rsp), %r9d
    00000327: 	movzbl	0x216a(%rsp), %r8d
    00000330: 	psrldq	$0x8, %xmm1
    00000335: 	movzbl	0x216b(%rsp), %edi
    0000033d: 	movzbl	0x216c(%rsp), %esi
    00000345: 	paddb	%xmm1, %xmm0
    00000349: 	movzbl	0x216d(%rsp), %ecx
    00000351: 	movq	0x2161(%rsp), %xmm1
    0000035a: 	psadbw	%xmm3, %xmm0
    0000035e: 	movzbl	0x216e(%rsp), %edx
    00000366: 	movd	%xmm0, %eax
    0000036a: 	movq	0x2160(%rsp), %xmm0
    00000373: 	addl	%eax, %r10d
    00000376: 	psubb	%xmm1, %xmm0
    0000037a: 	pxor	%xmm1, %xmm1
    0000037e: 	movdqa	%xmm0, %xmm7
    00000382: 	psadbw	%xmm1, %xmm7
    00000386: 	movq	%xmm7, 0x140(%rsp)
    0000038f: 	movq	%xmm7, %rax
    00000394: 	movl	%eax, %r11d
    00000397: 	movzbl	0x2168(%rsp), %eax
    0000039f: 	addl	%r10d, %r11d
    000003a2: 	subl	%r9d, %eax
    000003a5: 	subl	%r8d, %r9d
    000003a8: 	subl	%edi, %r8d
    000003ab: 	subl	%esi, %edi
    000003ad: 	addl	%r11d, %eax
    000003b0: 	subl	%ecx, %esi
    000003b2: 	subl	%edx, %ecx
    000003b4: 	subb	0x216f(%rsp), %dl
    000003bb: 	addl	%r9d, %eax
    000003be: 	addl	%eax, %r8d
    000003c1: 	addl	%r8d, %edi
    000003c4: 	addl	%edi, %esi
    000003c6: 	addl	%esi, %ecx
    000003c8: 	addb	%dl, %cl
    000003ca: 	jne	.Ltmp4710 # Offset: 970
.Ltmp4964:
    000003d0: 	addl	$0x1, %ebp
    000003d3: 	cmpl	%r12d, %ebp
    000003d6: 	jl	.Ltmp4711 # Offset: 982
.Ltmp4708:
    000003dc: 	movq	%r15, %rsi
    000003df: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000003e6: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 998
    000003eb: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000003f2: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000003f9: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000400: 	je	.Ltmp4712 # Offset: 1024
.Ltmp4999:
    00000406: 	movq	-0x20(%rax), %rbp
    0000040a: 	callq	clock@PLT # Offset: 1034
    0000040f: 	pxor	%xmm0, %xmm0
    00000413: 	movq	%rax, end_time(%rip)
    0000041a: 	movq	%rbp, %rdi
    0000041d: 	subq	start_time(%rip), %rax
    00000424: 	cvtsi2sd	%rax, %xmm0
    00000429: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000431: 	callq	_Z13record_resultdPKc # Offset: 1073
    00000436: 	movq	0x210(%rsp), %rdi
    0000043e: 	cmpq	(%rsp), %rdi
    00000442: 	je	.Ltmp4713 # Offset: 1090
    00000444: 	movq	0x220(%rsp), %rax
    0000044c: 	leaq	0x1(%rax), %rsi
    00000450: 	callq	_ZdlPvm@PLT # Offset: 1104
.Ltmp4713:
    00000455: 	movq	0x8(%rsp), %rsi
    0000045a: 	leaq	DATAat0x4d1ff(%rip), %rdx
    00000461: 	movq	%r15, %rdi
    00000464: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1124
    00000469: 	callq	clock@PLT # Offset: 1129
    0000046e: 	movl	iterations(%rip), %r12d
    00000475: 	xorl	%ebp, %ebp
    00000477: 	leaq	0x2160(%rsp), %rbx
    0000047f: 	movq	%rax, start_time(%rip)
    00000486: 	testl	%r12d, %r12d
    00000489: 	jle	.Ltmp4714 # Offset: 1161
    0000048f: 	nop # Size: 1
.Ltmp4717:
    00000490: 	movzbl	0x230(%rsp), %r10d
    00000499: 	movq	%r14, %rax
    0000049c: 	pxor	%xmm0, %xmm0
    000004a0: 	subb	0x231(%rsp), %r10b
    000004a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp4715:
    000004b0: 	paddb	(%rax), %xmm0
    000004b4: 	movdqu	0x1(%rax), %xmm7
    000004b9: 	addq	$0x10, %rax
    000004bd: 	psubb	%xmm7, %xmm0
    000004c1: 	cmpq	%rbx, %rax
    000004c4: 	jne	.Ltmp4715 # Offset: 1220
    000004c6: 	movdqa	%xmm0, %xmm1
    000004ca: 	pxor	%xmm4, %xmm4
    000004ce: 	movzbl	0x2169(%rsp), %r9d
    000004d7: 	movzbl	0x216a(%rsp), %r8d
    000004e0: 	psrldq	$0x8, %xmm1
    000004e5: 	movzbl	0x216b(%rsp), %edi
    000004ed: 	movzbl	0x216c(%rsp), %esi
    000004f5: 	paddb	%xmm1, %xmm0
    000004f9: 	movzbl	0x216d(%rsp), %ecx
    00000501: 	movq	0x2161(%rsp), %xmm1
    0000050a: 	psadbw	%xmm4, %xmm0
    0000050e: 	movzbl	0x216e(%rsp), %edx
    00000516: 	movd	%xmm0, %eax
    0000051a: 	movq	0x2160(%rsp), %xmm0
    00000523: 	addl	%eax, %r10d
    00000526: 	psubb	%xmm1, %xmm0
    0000052a: 	pxor	%xmm1, %xmm1
    0000052e: 	movdqa	%xmm0, %xmm6
    00000532: 	psadbw	%xmm1, %xmm6
    00000536: 	movq	%xmm6, 0x138(%rsp)
    0000053f: 	movq	%xmm6, %rax
    00000544: 	movl	%eax, %r11d
    00000547: 	movzbl	0x2168(%rsp), %eax
    0000054f: 	addl	%r10d, %r11d
    00000552: 	subl	%r9d, %eax
    00000555: 	subl	%r8d, %r9d
    00000558: 	subl	%edi, %r8d
    0000055b: 	subl	%esi, %edi
    0000055d: 	addl	%r11d, %eax
    00000560: 	subl	%ecx, %esi
    00000562: 	subl	%edx, %ecx
    00000564: 	subb	0x216f(%rsp), %dl
    0000056b: 	addl	%r9d, %eax
    0000056e: 	addl	%eax, %r8d
    00000571: 	addl	%r8d, %edi
    00000574: 	addl	%edi, %esi
    00000576: 	addl	%esi, %ecx
    00000578: 	addb	%dl, %cl
    0000057a: 	jne	.Ltmp4716 # Offset: 1402
.Ltmp4963:
    00000580: 	addl	$0x1, %ebp
    00000583: 	cmpl	%r12d, %ebp
    00000586: 	jl	.Ltmp4717 # Offset: 1414
.Ltmp4714:
    0000058c: 	movq	%r15, %rsi
    0000058f: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000596: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 1430
    0000059b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000005a2: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000005a9: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000005b0: 	je	.Ltmp4718 # Offset: 1456
.Ltmp4998:
    000005b6: 	movq	-0x20(%rax), %rbp
    000005ba: 	callq	clock@PLT # Offset: 1466
    000005bf: 	pxor	%xmm0, %xmm0
    000005c3: 	movq	%rax, end_time(%rip)
    000005ca: 	movq	%rbp, %rdi
    000005cd: 	subq	start_time(%rip), %rax
    000005d4: 	cvtsi2sd	%rax, %xmm0
    000005d9: 	divsd	DATAat0x4d640(%rip), %xmm0
    000005e1: 	callq	_Z13record_resultdPKc # Offset: 1505
    000005e6: 	movq	0x210(%rsp), %rdi
    000005ee: 	cmpq	(%rsp), %rdi
    000005f2: 	je	.Ltmp4719 # Offset: 1522
    000005f4: 	movq	0x220(%rsp), %rax
    000005fc: 	leaq	0x1(%rax), %rsi
    00000600: 	callq	_ZdlPvm@PLT # Offset: 1536
.Ltmp4719:
    00000605: 	movq	0x8(%rsp), %rsi
    0000060a: 	leaq	DATAat0x4d20f(%rip), %rdx
    00000611: 	movq	%r15, %rdi
    00000614: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1556
    00000619: 	callq	clock@PLT # Offset: 1561
    0000061e: 	movl	iterations(%rip), %r12d
    00000625: 	xorl	%ebp, %ebp
    00000627: 	leaq	0x2160(%rsp), %rbx
    0000062f: 	movq	%rax, start_time(%rip)
    00000636: 	testl	%r12d, %r12d
    00000639: 	jle	.Ltmp4720 # Offset: 1593
    0000063f: 	nop # Size: 1
.Ltmp4723:
    00000640: 	movzbl	0x230(%rsp), %r10d
    00000649: 	movq	%r14, %rax
    0000064c: 	pxor	%xmm0, %xmm0
    00000650: 	subb	0x231(%rsp), %r10b
    00000658: 	nopl	(%rax,%rax) # Size: 8
.Ltmp4721:
    00000660: 	paddb	(%rax), %xmm0
    00000664: 	movdqu	0x1(%rax), %xmm5
    00000669: 	addq	$0x10, %rax
    0000066d: 	psubb	%xmm5, %xmm0
    00000671: 	cmpq	%rbx, %rax
    00000674: 	jne	.Ltmp4721 # Offset: 1652
    00000676: 	movdqa	%xmm0, %xmm1
    0000067a: 	pxor	%xmm5, %xmm5
    0000067e: 	movzbl	0x2169(%rsp), %r9d
    00000687: 	movzbl	0x216a(%rsp), %r8d
    00000690: 	psrldq	$0x8, %xmm1
    00000695: 	movzbl	0x216b(%rsp), %edi
    0000069d: 	movzbl	0x216c(%rsp), %esi
    000006a5: 	paddb	%xmm1, %xmm0
    000006a9: 	movzbl	0x216d(%rsp), %ecx
    000006b1: 	movq	0x2161(%rsp), %xmm1
    000006ba: 	psadbw	%xmm5, %xmm0
    000006be: 	movzbl	0x216e(%rsp), %edx
    000006c6: 	movd	%xmm0, %eax
    000006ca: 	movq	0x2160(%rsp), %xmm0
    000006d3: 	addl	%eax, %r10d
    000006d6: 	psubb	%xmm1, %xmm0
    000006da: 	pxor	%xmm1, %xmm1
    000006de: 	movdqa	%xmm0, %xmm4
    000006e2: 	psadbw	%xmm1, %xmm4
    000006e6: 	movq	%xmm4, 0x130(%rsp)
    000006ef: 	movq	%xmm4, %rax
    000006f4: 	movl	%eax, %r11d
    000006f7: 	movzbl	0x2168(%rsp), %eax
    000006ff: 	addl	%r10d, %r11d
    00000702: 	subl	%r9d, %eax
    00000705: 	subl	%r8d, %r9d
    00000708: 	subl	%edi, %r8d
    0000070b: 	subl	%esi, %edi
    0000070d: 	addl	%r11d, %eax
    00000710: 	subl	%ecx, %esi
    00000712: 	subl	%edx, %ecx
    00000714: 	subb	0x216f(%rsp), %dl
    0000071b: 	addl	%r9d, %eax
    0000071e: 	addl	%eax, %r8d
    00000721: 	addl	%r8d, %edi
    00000724: 	addl	%edi, %esi
    00000726: 	addl	%esi, %ecx
    00000728: 	addb	%dl, %cl
    0000072a: 	jne	.Ltmp4722 # Offset: 1834
.Ltmp4962:
    00000730: 	addl	$0x1, %ebp
    00000733: 	cmpl	%r12d, %ebp
    00000736: 	jl	.Ltmp4723 # Offset: 1846
.Ltmp4720:
    0000073c: 	movq	%r15, %rsi
    0000073f: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000746: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 1862
    0000074b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000752: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000759: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000760: 	je	.Ltmp4724 # Offset: 1888
.Ltmp4997:
    00000766: 	movq	-0x20(%rax), %rbp
    0000076a: 	callq	clock@PLT # Offset: 1898
    0000076f: 	pxor	%xmm0, %xmm0
    00000773: 	movq	%rax, end_time(%rip)
    0000077a: 	movq	%rbp, %rdi
    0000077d: 	subq	start_time(%rip), %rax
    00000784: 	cvtsi2sd	%rax, %xmm0
    00000789: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000791: 	callq	_Z13record_resultdPKc # Offset: 1937
    00000796: 	movq	0x210(%rsp), %rdi
    0000079e: 	cmpq	(%rsp), %rdi
    000007a2: 	je	.Ltmp4725 # Offset: 1954
    000007a4: 	movq	0x220(%rsp), %rax
    000007ac: 	leaq	0x1(%rax), %rsi
    000007b0: 	callq	_ZdlPvm@PLT # Offset: 1968
.Ltmp4725:
    000007b5: 	movq	0x8(%rsp), %rsi
    000007ba: 	leaq	DATAat0x4d227(%rip), %rdx
    000007c1: 	movq	%r15, %rdi
    000007c4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1988
    000007c9: 	callq	clock@PLT # Offset: 1993
    000007ce: 	movl	iterations(%rip), %r12d
    000007d5: 	xorl	%ebp, %ebp
    000007d7: 	leaq	0x2160(%rsp), %rbx
    000007df: 	movq	%rax, start_time(%rip)
    000007e6: 	movzbl	0x5c(%rsp), %eax
    000007eb: 	testl	%r12d, %r12d
    000007ee: 	jle	.Ltmp4726 # Offset: 2030
    000007f4: 	movd	%eax, %xmm0
    000007f8: 	punpcklbw	%xmm0, %xmm0
    000007fc: 	punpcklwd	%xmm0, %xmm0
    00000800: 	pshufd	$0x0, %xmm0, %xmm5
    00000805: 	movaps	%xmm5, 0x10(%rsp)
    0000080a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4729:
    00000810: 	movzbl	0x230(%rsp), %r10d
    00000819: 	movq	%r14, %rax
    0000081c: 	pxor	%xmm0, %xmm0
    00000820: 	subb	0x231(%rsp), %r10b
    00000828: 	nopl	(%rax,%rax) # Size: 8
.Ltmp4727:
    00000830: 	movdqu	0x1(%rax), %xmm2
    00000835: 	movdqa	(%rax), %xmm1
    00000839: 	addq	$0x10, %rax
    0000083d: 	paddb	-0x10(%rax), %xmm2
    00000842: 	paddb	0x10(%rsp), %xmm2
    00000848: 	paddb	%xmm2, %xmm1
    0000084c: 	paddb	%xmm2, %xmm1
    00000850: 	paddb	%xmm1, %xmm0
    00000854: 	movdqu	-0xf(%rax), %xmm1
    00000859: 	paddb	%xmm2, %xmm1
    0000085d: 	paddb	%xmm2, %xmm1
    00000861: 	psubb	%xmm1, %xmm0
    00000865: 	cmpq	%rax, %rbx
    00000868: 	jne	.Ltmp4727 # Offset: 2152
    0000086a: 	movdqa	%xmm0, %xmm1
    0000086e: 	pxor	%xmm6, %xmm6
    00000872: 	movzbl	0x2169(%rsp), %r9d
    0000087b: 	movzbl	0x216a(%rsp), %r8d
    00000884: 	psrldq	$0x8, %xmm1
    00000889: 	movzbl	0x216b(%rsp), %edi
    00000891: 	movzbl	0x216c(%rsp), %esi
    00000899: 	paddb	%xmm1, %xmm0
    0000089d: 	movzbl	0x216d(%rsp), %ecx
    000008a5: 	movq	0x2161(%rsp), %xmm1
    000008ae: 	psadbw	%xmm6, %xmm0
    000008b2: 	movzbl	0x216e(%rsp), %edx
    000008ba: 	movd	%xmm0, %eax
    000008be: 	movq	0x2160(%rsp), %xmm0
    000008c7: 	addl	%eax, %r10d
    000008ca: 	psubb	%xmm1, %xmm0
    000008ce: 	pxor	%xmm1, %xmm1
    000008d2: 	movdqa	%xmm0, %xmm5
    000008d6: 	psadbw	%xmm1, %xmm5
    000008da: 	movq	%xmm5, 0x128(%rsp)
    000008e3: 	movq	%xmm5, %rax
    000008e8: 	movl	%eax, %r11d
    000008eb: 	movzbl	0x2168(%rsp), %eax
    000008f3: 	addl	%r10d, %r11d
    000008f6: 	subl	%r9d, %eax
    000008f9: 	subl	%r8d, %r9d
    000008fc: 	subl	%edi, %r8d
    000008ff: 	subl	%esi, %edi
    00000901: 	addl	%r11d, %eax
    00000904: 	subl	%ecx, %esi
    00000906: 	subl	%edx, %ecx
    00000908: 	subb	0x216f(%rsp), %dl
    0000090f: 	addl	%r9d, %eax
    00000912: 	addl	%eax, %r8d
    00000915: 	addl	%r8d, %edi
    00000918: 	addl	%edi, %esi
    0000091a: 	addl	%esi, %ecx
    0000091c: 	addb	%dl, %cl
    0000091e: 	jne	.Ltmp4728 # Offset: 2334
.Ltmp4961:
    00000924: 	addl	$0x1, %ebp
    00000927: 	cmpl	%r12d, %ebp
    0000092a: 	jl	.Ltmp4729 # Offset: 2346
.Ltmp4726:
    00000930: 	movq	%r15, %rsi
    00000933: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000093a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 2362
    0000093f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000946: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000094d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000954: 	je	.Ltmp4730 # Offset: 2388
.Ltmp4996:
    0000095a: 	movq	-0x20(%rax), %rbp
    0000095e: 	callq	clock@PLT # Offset: 2398
    00000963: 	pxor	%xmm0, %xmm0
    00000967: 	movq	%rax, end_time(%rip)
    0000096e: 	movq	%rbp, %rdi
    00000971: 	subq	start_time(%rip), %rax
    00000978: 	cvtsi2sd	%rax, %xmm0
    0000097d: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000985: 	callq	_Z13record_resultdPKc # Offset: 2437
    0000098a: 	movq	0x210(%rsp), %rdi
    00000992: 	cmpq	(%rsp), %rdi
    00000996: 	je	.Ltmp4731 # Offset: 2454
    00000998: 	movq	0x220(%rsp), %rax
    000009a0: 	leaq	0x1(%rax), %rsi
    000009a4: 	callq	_ZdlPvm@PLT # Offset: 2468
.Ltmp4731:
    000009a9: 	movq	0x8(%rsp), %rsi
    000009ae: 	leaq	DATAat0x4d230(%rip), %rdx
    000009b5: 	movq	%r15, %rdi
    000009b8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2488
    000009bd: 	callq	clock@PLT # Offset: 2493
    000009c2: 	movl	iterations(%rip), %r12d
    000009c9: 	xorl	%ebp, %ebp
    000009cb: 	leaq	0x2160(%rsp), %rbx
    000009d3: 	movq	%rax, start_time(%rip)
    000009da: 	testl	%r12d, %r12d
    000009dd: 	jle	.Ltmp4732 # Offset: 2525
    000009e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4735:
    000009e8: 	movzbl	0x230(%rsp), %r10d
    000009f1: 	movq	%r14, %rax
    000009f4: 	pxor	%xmm0, %xmm0
    000009f8: 	subb	0x231(%rsp), %r10b
.Ltmp4733:
    00000a00: 	paddb	(%rax), %xmm0
    00000a04: 	movdqu	0x1(%rax), %xmm7
    00000a09: 	addq	$0x10, %rax
    00000a0d: 	psubb	%xmm7, %xmm0
    00000a11: 	cmpq	%rbx, %rax
    00000a14: 	jne	.Ltmp4733 # Offset: 2580
    00000a16: 	movdqa	%xmm0, %xmm1
    00000a1a: 	pxor	%xmm3, %xmm3
    00000a1e: 	movzbl	0x2169(%rsp), %r9d
    00000a27: 	movzbl	0x216a(%rsp), %r8d
    00000a30: 	psrldq	$0x8, %xmm1
    00000a35: 	movzbl	0x216b(%rsp), %edi
    00000a3d: 	movzbl	0x216c(%rsp), %esi
    00000a45: 	paddb	%xmm1, %xmm0
    00000a49: 	movzbl	0x216d(%rsp), %ecx
    00000a51: 	movq	0x2161(%rsp), %xmm1
    00000a5a: 	psadbw	%xmm3, %xmm0
    00000a5e: 	movzbl	0x216e(%rsp), %edx
    00000a66: 	movd	%xmm0, %eax
    00000a6a: 	movq	0x2160(%rsp), %xmm0
    00000a73: 	addl	%eax, %r10d
    00000a76: 	psubb	%xmm1, %xmm0
    00000a7a: 	pxor	%xmm1, %xmm1
    00000a7e: 	movdqa	%xmm0, %xmm7
    00000a82: 	psadbw	%xmm1, %xmm7
    00000a86: 	movq	%xmm7, 0x120(%rsp)
    00000a8f: 	movq	%xmm7, %rax
    00000a94: 	movl	%eax, %r11d
    00000a97: 	movzbl	0x2168(%rsp), %eax
    00000a9f: 	addl	%r10d, %r11d
    00000aa2: 	subl	%r9d, %eax
    00000aa5: 	subl	%r8d, %r9d
    00000aa8: 	subl	%edi, %r8d
    00000aab: 	subl	%esi, %edi
    00000aad: 	addl	%r11d, %eax
    00000ab0: 	subl	%ecx, %esi
    00000ab2: 	subl	%edx, %ecx
    00000ab4: 	subb	0x216f(%rsp), %dl
    00000abb: 	addl	%r9d, %eax
    00000abe: 	addl	%eax, %r8d
    00000ac1: 	addl	%r8d, %edi
    00000ac4: 	addl	%edi, %esi
    00000ac6: 	addl	%esi, %ecx
    00000ac8: 	addb	%dl, %cl
    00000aca: 	jne	.Ltmp4734 # Offset: 2762
.Ltmp4960:
    00000ad0: 	addl	$0x1, %ebp
    00000ad3: 	cmpl	%r12d, %ebp
    00000ad6: 	jl	.Ltmp4735 # Offset: 2774
.Ltmp4732:
    00000adc: 	movq	%r15, %rsi
    00000adf: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000ae6: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 2790
    00000aeb: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000af2: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000af9: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000b00: 	je	.Ltmp4736 # Offset: 2816
.Ltmp4995:
    00000b06: 	movq	-0x20(%rax), %rbp
    00000b0a: 	callq	clock@PLT # Offset: 2826
    00000b0f: 	pxor	%xmm0, %xmm0
    00000b13: 	movq	%rax, end_time(%rip)
    00000b1a: 	movq	%rbp, %rdi
    00000b1d: 	subq	start_time(%rip), %rax
    00000b24: 	cvtsi2sd	%rax, %xmm0
    00000b29: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000b31: 	callq	_Z13record_resultdPKc # Offset: 2865
    00000b36: 	movq	0x210(%rsp), %rdi
    00000b3e: 	cmpq	(%rsp), %rdi
    00000b42: 	je	.Ltmp4737 # Offset: 2882
    00000b44: 	movq	0x220(%rsp), %rax
    00000b4c: 	leaq	0x1(%rax), %rsi
    00000b50: 	callq	_ZdlPvm@PLT # Offset: 2896
.Ltmp4737:
    00000b55: 	movq	0x8(%rsp), %rsi
    00000b5a: 	leaq	DATAat0x4d247(%rip), %rdx
    00000b61: 	movq	%r15, %rdi
    00000b64: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2916
    00000b69: 	callq	clock@PLT # Offset: 2921
    00000b6e: 	movl	iterations(%rip), %r12d
    00000b75: 	xorl	%ebp, %ebp
    00000b77: 	leaq	0x2160(%rsp), %rbx
    00000b7f: 	movq	%rax, start_time(%rip)
    00000b86: 	movzbl	0x5c(%rsp), %eax
    00000b8b: 	testl	%r12d, %r12d
    00000b8e: 	jle	.Ltmp4738 # Offset: 2958
    00000b94: 	movd	%eax, %xmm0
    00000b98: 	punpcklbw	%xmm0, %xmm0
    00000b9c: 	punpcklwd	%xmm0, %xmm0
    00000ba0: 	pshufd	$0x0, %xmm0, %xmm6
    00000ba5: 	movaps	%xmm6, 0x10(%rsp)
    00000baa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4741:
    00000bb0: 	movzbl	0x230(%rsp), %r10d
    00000bb9: 	movq	%r14, %rax
    00000bbc: 	pxor	%xmm0, %xmm0
    00000bc0: 	subb	0x231(%rsp), %r10b
    00000bc8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp4739:
    00000bd0: 	movdqa	0x10(%rsp), %xmm3
    00000bd6: 	paddb	(%rax), %xmm3
    00000bda: 	addq	$0x10, %rax
    00000bde: 	movdqu	-0xf(%rax), %xmm5
    00000be3: 	movdqa	-0x10(%rax), %xmm1
    00000be8: 	movdqa	%xmm3, %xmm2
    00000bec: 	psubb	%xmm5, %xmm2
    00000bf0: 	paddb	%xmm2, %xmm1
    00000bf4: 	paddb	%xmm2, %xmm1
    00000bf8: 	paddb	%xmm3, %xmm2
    00000bfc: 	paddb	%xmm1, %xmm0
    00000c00: 	psubb	%xmm2, %xmm0
    00000c04: 	cmpq	%rbx, %rax
    00000c07: 	jne	.Ltmp4739 # Offset: 3079
    00000c09: 	movdqa	%xmm0, %xmm1
    00000c0d: 	pxor	%xmm4, %xmm4
    00000c11: 	movzbl	0x2169(%rsp), %r9d
    00000c1a: 	movzbl	0x216a(%rsp), %r8d
    00000c23: 	psrldq	$0x8, %xmm1
    00000c28: 	movzbl	0x216b(%rsp), %edi
    00000c30: 	movzbl	0x216c(%rsp), %esi
    00000c38: 	paddb	%xmm1, %xmm0
    00000c3c: 	movzbl	0x216d(%rsp), %ecx
    00000c44: 	movq	0x2161(%rsp), %xmm1
    00000c4d: 	psadbw	%xmm4, %xmm0
    00000c51: 	movzbl	0x216e(%rsp), %edx
    00000c59: 	movd	%xmm0, %eax
    00000c5d: 	movq	0x2160(%rsp), %xmm0
    00000c66: 	addl	%eax, %r10d
    00000c69: 	psubb	%xmm1, %xmm0
    00000c6d: 	pxor	%xmm1, %xmm1
    00000c71: 	movdqa	%xmm0, %xmm6
    00000c75: 	psadbw	%xmm1, %xmm6
    00000c79: 	movq	%xmm6, 0x118(%rsp)
    00000c82: 	movq	%xmm6, %rax
    00000c87: 	movl	%eax, %r11d
    00000c8a: 	movzbl	0x2168(%rsp), %eax
    00000c92: 	addl	%r10d, %r11d
    00000c95: 	subl	%r9d, %eax
    00000c98: 	subl	%r8d, %r9d
    00000c9b: 	subl	%edi, %r8d
    00000c9e: 	subl	%esi, %edi
    00000ca0: 	addl	%r11d, %eax
    00000ca3: 	subl	%ecx, %esi
    00000ca5: 	subl	%edx, %ecx
    00000ca7: 	subb	0x216f(%rsp), %dl
    00000cae: 	addl	%r9d, %eax
    00000cb1: 	addl	%eax, %r8d
    00000cb4: 	addl	%r8d, %edi
    00000cb7: 	addl	%edi, %esi
    00000cb9: 	addl	%esi, %ecx
    00000cbb: 	addb	%dl, %cl
    00000cbd: 	jne	.Ltmp4740 # Offset: 3261
.Ltmp4959:
    00000cc3: 	addl	$0x1, %ebp
    00000cc6: 	cmpl	%r12d, %ebp
    00000cc9: 	jl	.Ltmp4741 # Offset: 3273
.Ltmp4738:
    00000ccf: 	movq	%r15, %rsi
    00000cd2: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000cd9: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 3289
    00000cde: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000ce5: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000cec: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000cf3: 	je	.Ltmp4742 # Offset: 3315
.Ltmp4994:
    00000cf9: 	movq	-0x20(%rax), %rbp
    00000cfd: 	callq	clock@PLT # Offset: 3325
    00000d02: 	pxor	%xmm0, %xmm0
    00000d06: 	movq	%rax, end_time(%rip)
    00000d0d: 	movq	%rbp, %rdi
    00000d10: 	subq	start_time(%rip), %rax
    00000d17: 	cvtsi2sd	%rax, %xmm0
    00000d1c: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000d24: 	callq	_Z13record_resultdPKc # Offset: 3364
    00000d29: 	movq	0x210(%rsp), %rdi
    00000d31: 	cmpq	(%rsp), %rdi
    00000d35: 	je	.Ltmp4743 # Offset: 3381
    00000d37: 	movq	0x220(%rsp), %rax
    00000d3f: 	leaq	0x1(%rax), %rsi
    00000d43: 	callq	_ZdlPvm@PLT # Offset: 3395
.Ltmp4743:
    00000d48: 	movq	0x8(%rsp), %rsi
    00000d4d: 	leaq	DATAat0x4d255(%rip), %rdx
    00000d54: 	movq	%r15, %rdi
    00000d57: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3415
    00000d5c: 	callq	clock@PLT # Offset: 3420
    00000d61: 	movl	iterations(%rip), %r12d
    00000d68: 	xorl	%ebp, %ebp
    00000d6a: 	leaq	0x2160(%rsp), %rbx
    00000d72: 	movq	%rax, start_time(%rip)
    00000d79: 	testl	%r12d, %r12d
    00000d7c: 	jle	.Ltmp4744 # Offset: 3452
    00000d82: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4747:
    00000d88: 	movzbl	0x230(%rsp), %r10d
    00000d91: 	movq	%r14, %rax
    00000d94: 	pxor	%xmm0, %xmm0
    00000d98: 	subb	0x231(%rsp), %r10b
.Ltmp4745:
    00000da0: 	paddb	(%rax), %xmm0
    00000da4: 	movdqu	0x1(%rax), %xmm6
    00000da9: 	addq	$0x10, %rax
    00000dad: 	psubb	%xmm6, %xmm0
    00000db1: 	cmpq	%rbx, %rax
    00000db4: 	jne	.Ltmp4745 # Offset: 3508
    00000db6: 	movdqa	%xmm0, %xmm1
    00000dba: 	pxor	%xmm5, %xmm5
    00000dbe: 	movzbl	0x2169(%rsp), %r9d
    00000dc7: 	movzbl	0x216a(%rsp), %r8d
    00000dd0: 	psrldq	$0x8, %xmm1
    00000dd5: 	movzbl	0x216b(%rsp), %edi
    00000ddd: 	movzbl	0x216c(%rsp), %esi
    00000de5: 	paddb	%xmm1, %xmm0
    00000de9: 	movzbl	0x216d(%rsp), %ecx
    00000df1: 	movq	0x2161(%rsp), %xmm1
    00000dfa: 	psadbw	%xmm5, %xmm0
    00000dfe: 	movzbl	0x216e(%rsp), %edx
    00000e06: 	movd	%xmm0, %eax
    00000e0a: 	movq	0x2160(%rsp), %xmm0
    00000e13: 	addl	%eax, %r10d
    00000e16: 	psubb	%xmm1, %xmm0
    00000e1a: 	pxor	%xmm1, %xmm1
    00000e1e: 	movdqa	%xmm0, %xmm4
    00000e22: 	psadbw	%xmm1, %xmm4
    00000e26: 	movq	%xmm4, 0x110(%rsp)
    00000e2f: 	movq	%xmm4, %rax
    00000e34: 	movl	%eax, %r11d
    00000e37: 	movzbl	0x2168(%rsp), %eax
    00000e3f: 	addl	%r10d, %r11d
    00000e42: 	subl	%r9d, %eax
    00000e45: 	subl	%r8d, %r9d
    00000e48: 	subl	%edi, %r8d
    00000e4b: 	subl	%esi, %edi
    00000e4d: 	addl	%r11d, %eax
    00000e50: 	subl	%ecx, %esi
    00000e52: 	subl	%edx, %ecx
    00000e54: 	subb	0x216f(%rsp), %dl
    00000e5b: 	addl	%r9d, %eax
    00000e5e: 	addl	%eax, %r8d
    00000e61: 	addl	%r8d, %edi
    00000e64: 	addl	%edi, %esi
    00000e66: 	addl	%esi, %ecx
    00000e68: 	addb	%dl, %cl
    00000e6a: 	jne	.Ltmp4746 # Offset: 3690
.Ltmp4958:
    00000e70: 	addl	$0x1, %ebp
    00000e73: 	cmpl	%r12d, %ebp
    00000e76: 	jl	.Ltmp4747 # Offset: 3702
.Ltmp4744:
    00000e7c: 	movq	%r15, %rsi
    00000e7f: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000e86: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 3718
    00000e8b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000e92: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000e99: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000ea0: 	je	.Ltmp4748 # Offset: 3744
.Ltmp4993:
    00000ea6: 	movq	-0x20(%rax), %rbp
    00000eaa: 	callq	clock@PLT # Offset: 3754
    00000eaf: 	pxor	%xmm0, %xmm0
    00000eb3: 	movq	%rax, end_time(%rip)
    00000eba: 	movq	%rbp, %rdi
    00000ebd: 	subq	start_time(%rip), %rax
    00000ec4: 	cvtsi2sd	%rax, %xmm0
    00000ec9: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000ed1: 	callq	_Z13record_resultdPKc # Offset: 3793
    00000ed6: 	movq	0x210(%rsp), %rdi
    00000ede: 	cmpq	(%rsp), %rdi
    00000ee2: 	je	.Ltmp4749 # Offset: 3810
    00000ee4: 	movq	0x220(%rsp), %rax
    00000eec: 	leaq	0x1(%rax), %rsi
    00000ef0: 	callq	_ZdlPvm@PLT # Offset: 3824
.Ltmp4749:
    00000ef5: 	movq	0x8(%rsp), %rsi
    00000efa: 	leaq	DATAat0x4d26c(%rip), %rdx
    00000f01: 	movq	%r15, %rdi
    00000f04: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3844
    00000f09: 	callq	clock@PLT # Offset: 3849
    00000f0e: 	movl	iterations(%rip), %r13d
    00000f15: 	movq	%rax, start_time(%rip)
    00000f1c: 	testl	%r13d, %r13d
    00000f1f: 	jle	.Ltmp4750 # Offset: 3871
    00000f25: 	movd	0x5c(%rsp), %xmm0
    00000f2b: 	xorl	%ebp, %ebp
    00000f2d: 	leaq	0x2160(%rsp), %rbx
    00000f35: 	punpcklbw	%xmm0, %xmm0
    00000f39: 	punpcklwd	%xmm0, %xmm0
    00000f3d: 	pshufd	$0x0, %xmm0, %xmm7
    00000f42: 	movaps	%xmm7, 0x10(%rsp)
    00000f47: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4753:
    00000f50: 	movzbl	0x230(%rsp), %edx
    00000f58: 	movq	%r14, %rax
    00000f5b: 	subb	0x231(%rsp), %dl
    00000f62: 	pxor	%xmm2, %xmm2
    00000f66: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp4751:
    00000f70: 	movdqa	(%rax), %xmm1
    00000f74: 	movdqu	0x1(%rax), %xmm3
    00000f79: 	addq	$0x10, %rax
    00000f7d: 	movdqa	%xmm1, %xmm0
    00000f81: 	movdqa	%xmm1, %xmm4
    00000f85: 	movdqa	%xmm3, %xmm6
    00000f89: 	movdqa	%xmm3, %xmm5
    00000f8d: 	punpcklbw	%xmm1, %xmm0
    00000f91: 	punpckhbw	%xmm1, %xmm4
    00000f95: 	punpcklbw	%xmm3, %xmm6
    00000f99: 	punpckhbw	%xmm3, %xmm5
    00000f9d: 	pmullw	%xmm6, %xmm0
    00000fa1: 	pmullw	%xmm5, %xmm4
    00000fa5: 	pand	DATAat0x4d5f0(%rip), %xmm0
    00000fad: 	pand	DATAat0x4d5f0(%rip), %xmm4
    00000fb5: 	packuswb	%xmm4, %xmm0
    00000fb9: 	paddb	0x10(%rsp), %xmm0
    00000fbf: 	paddb	%xmm0, %xmm1
    00000fc3: 	paddb	%xmm0, %xmm3
    00000fc7: 	paddb	%xmm0, %xmm1
    00000fcb: 	paddb	%xmm0, %xmm3
    00000fcf: 	paddb	%xmm1, %xmm2
    00000fd3: 	psubb	%xmm3, %xmm2
    00000fd7: 	cmpq	%rbx, %rax
    00000fda: 	jne	.Ltmp4751 # Offset: 4058
    00000fdc: 	movdqa	%xmm2, %xmm0
    00000fe0: 	pxor	%xmm6, %xmm6
    00000fe4: 	movzbl	0x2161(%rsp), %r10d
    00000fed: 	movzbl	0x2160(%rsp), %r12d
    00000ff6: 	psrldq	$0x8, %xmm0
    00000ffb: 	movzbl	0x2164(%rsp), %edi
    00001003: 	movzbl	0x2162(%rsp), %r9d
    0000100c: 	paddb	%xmm0, %xmm2
    00001010: 	subl	%r10d, %r12d
    00001013: 	movzbl	0x2163(%rsp), %r8d
    0000101c: 	movzbl	0x2165(%rsp), %esi
    00001024: 	psadbw	%xmm6, %xmm2
    00001028: 	subl	%r9d, %r10d
    0000102b: 	movzbl	0x2166(%rsp), %ecx
    00001033: 	movzbl	0x216e(%rsp), %r11d
    0000103c: 	movd	%xmm2, %eax
    00001040: 	subl	%r8d, %r9d
    00001043: 	subl	%edi, %r8d
    00001046: 	subl	%esi, %edi
    00001048: 	addl	%eax, %edx
    0000104a: 	subl	%ecx, %esi
    0000104c: 	subb	0x2167(%rsp), %cl
    00001053: 	movzbl	0x2167(%rsp), %eax
    0000105b: 	addl	%r12d, %edx
    0000105e: 	subb	0x2168(%rsp), %al
    00001065: 	addl	%edx, %r10d
    00001068: 	movzbl	0x2168(%rsp), %edx
    00001070: 	subb	0x2169(%rsp), %dl
    00001077: 	addl	%r10d, %r9d
    0000107a: 	addl	%r9d, %r8d
    0000107d: 	addl	%r8d, %edi
    00001080: 	addl	%edi, %esi
    00001082: 	addl	%esi, %ecx
    00001084: 	addl	%ecx, %eax
    00001086: 	addl	%edx, %eax
    00001088: 	movzbl	0x2169(%rsp), %edx
    00001090: 	subb	0x216a(%rsp), %dl
    00001097: 	addl	%edx, %eax
    00001099: 	movzbl	0x216a(%rsp), %edx
    000010a1: 	subb	0x216b(%rsp), %dl
    000010a8: 	addl	%edx, %eax
    000010aa: 	movzbl	0x216b(%rsp), %edx
    000010b2: 	subb	0x216c(%rsp), %dl
    000010b9: 	addl	%edx, %eax
    000010bb: 	movzbl	0x216c(%rsp), %edx
    000010c3: 	subb	0x216d(%rsp), %dl
    000010ca: 	addl	%edx, %eax
    000010cc: 	movzbl	0x216d(%rsp), %edx
    000010d4: 	subl	%r11d, %edx
    000010d7: 	subb	0x216f(%rsp), %r11b
    000010df: 	addl	%edx, %eax
    000010e1: 	addb	%r11b, %al
    000010e4: 	jne	.Ltmp4752 # Offset: 4324
.Ltmp4957:
    000010ea: 	addl	$0x1, %ebp
    000010ed: 	cmpl	%r13d, %ebp
    000010f0: 	jl	.Ltmp4753 # Offset: 4336
.Ltmp4750:
    000010f6: 	movq	%r15, %rsi
    000010f9: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001100: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 4352
    00001105: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000110c: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001113: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000111a: 	je	.Ltmp4754 # Offset: 4378
.Ltmp4992:
    00001120: 	movq	-0x20(%rax), %rbp
    00001124: 	callq	clock@PLT # Offset: 4388
    00001129: 	pxor	%xmm0, %xmm0
    0000112d: 	movq	%rax, end_time(%rip)
    00001134: 	movq	%rbp, %rdi
    00001137: 	subq	start_time(%rip), %rax
    0000113e: 	cvtsi2sd	%rax, %xmm0
    00001143: 	divsd	DATAat0x4d640(%rip), %xmm0
    0000114b: 	callq	_Z13record_resultdPKc # Offset: 4427
    00001150: 	movq	0x210(%rsp), %rdi
    00001158: 	cmpq	(%rsp), %rdi
    0000115c: 	je	.Ltmp4755 # Offset: 4444
    0000115e: 	movq	0x220(%rsp), %rax
    00001166: 	leaq	0x1(%rax), %rsi
    0000116a: 	callq	_ZdlPvm@PLT # Offset: 4458
.Ltmp4755:
    0000116f: 	movq	0x8(%rsp), %rsi
    00001174: 	leaq	DATAat0x4d27a(%rip), %rdx
    0000117b: 	movq	%r15, %rdi
    0000117e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4478
    00001183: 	callq	clock@PLT # Offset: 4483
    00001188: 	movl	iterations(%rip), %r12d
    0000118f: 	xorl	%ebp, %ebp
    00001191: 	leaq	0x2160(%rsp), %rbx
    00001199: 	movq	%rax, start_time(%rip)
    000011a0: 	testl	%r12d, %r12d
    000011a3: 	jle	.Ltmp4756 # Offset: 4515
    000011a9: 	nopl	(%rax) # Size: 7
.Ltmp4759:
    000011b0: 	movzbl	0x230(%rsp), %r10d
    000011b9: 	movq	%r14, %rax
    000011bc: 	pxor	%xmm0, %xmm0
    000011c0: 	subb	0x231(%rsp), %r10b
    000011c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp4757:
    000011d0: 	paddb	(%rax), %xmm0
    000011d4: 	movdqu	0x1(%rax), %xmm4
    000011d9: 	addq	$0x10, %rax
    000011dd: 	psubb	%xmm4, %xmm0
    000011e1: 	cmpq	%rax, %rbx
    000011e4: 	jne	.Ltmp4757 # Offset: 4580
    000011e6: 	movdqa	%xmm0, %xmm1
    000011ea: 	pxor	%xmm7, %xmm7
    000011ee: 	movzbl	0x2169(%rsp), %r9d
    000011f7: 	movzbl	0x216a(%rsp), %r8d
    00001200: 	psrldq	$0x8, %xmm1
    00001205: 	movzbl	0x216b(%rsp), %edi
    0000120d: 	movzbl	0x216c(%rsp), %esi
    00001215: 	paddb	%xmm1, %xmm0
    00001219: 	movzbl	0x216d(%rsp), %ecx
    00001221: 	movq	0x2161(%rsp), %xmm1
    0000122a: 	psadbw	%xmm7, %xmm0
    0000122e: 	movzbl	0x216e(%rsp), %edx
    00001236: 	movd	%xmm0, %eax
    0000123a: 	movq	0x2160(%rsp), %xmm0
    00001243: 	addl	%eax, %r10d
    00001246: 	psubb	%xmm1, %xmm0
    0000124a: 	pxor	%xmm1, %xmm1
    0000124e: 	movdqa	%xmm0, %xmm5
    00001252: 	psadbw	%xmm1, %xmm5
    00001256: 	movq	%xmm5, 0x108(%rsp)
    0000125f: 	movq	%xmm5, %rax
    00001264: 	movl	%eax, %r11d
    00001267: 	movzbl	0x2168(%rsp), %eax
    0000126f: 	addl	%r10d, %r11d
    00001272: 	subl	%r9d, %eax
    00001275: 	subl	%r8d, %r9d
    00001278: 	subl	%edi, %r8d
    0000127b: 	subl	%esi, %edi
    0000127d: 	addl	%r11d, %eax
    00001280: 	subl	%ecx, %esi
    00001282: 	subl	%edx, %ecx
    00001284: 	subb	0x216f(%rsp), %dl
    0000128b: 	addl	%r9d, %eax
    0000128e: 	addl	%eax, %r8d
    00001291: 	addl	%r8d, %edi
    00001294: 	addl	%edi, %esi
    00001296: 	addl	%esi, %ecx
    00001298: 	addb	%dl, %cl
    0000129a: 	jne	.Ltmp4758 # Offset: 4762
.Ltmp4956:
    000012a0: 	addl	$0x1, %ebp
    000012a3: 	cmpl	%r12d, %ebp
    000012a6: 	jl	.Ltmp4759 # Offset: 4774
.Ltmp4756:
    000012ac: 	movq	%r15, %rsi
    000012af: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000012b6: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 4790
    000012bb: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000012c2: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000012c9: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000012d0: 	je	.Ltmp4760 # Offset: 4816
.Ltmp4991:
    000012d6: 	movq	-0x20(%rax), %rbp
    000012da: 	callq	clock@PLT # Offset: 4826
    000012df: 	pxor	%xmm0, %xmm0
    000012e3: 	movq	%rax, end_time(%rip)
    000012ea: 	movq	%rbp, %rdi
    000012ed: 	subq	start_time(%rip), %rax
    000012f4: 	cvtsi2sd	%rax, %xmm0
    000012f9: 	divsd	DATAat0x4d640(%rip), %xmm0
    00001301: 	callq	_Z13record_resultdPKc # Offset: 4865
    00001306: 	movq	0x210(%rsp), %rdi
    0000130e: 	cmpq	(%rsp), %rdi
    00001312: 	je	.Ltmp4761 # Offset: 4882
    00001314: 	movq	0x220(%rsp), %rax
    0000131c: 	leaq	0x1(%rax), %rsi
    00001320: 	callq	_ZdlPvm@PLT # Offset: 4896
.Ltmp4761:
    00001325: 	movq	0x8(%rsp), %rsi
    0000132a: 	leaq	DATAat0x4d28f(%rip), %rdx
    00001331: 	movq	%r15, %rdi
    00001334: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4916
    00001339: 	callq	clock@PLT # Offset: 4921
    0000133e: 	movl	iterations(%rip), %r9d
    00001345: 	movq	%rax, start_time(%rip)
    0000134c: 	testl	%r9d, %r9d
    0000134f: 	jle	.Ltmp4762 # Offset: 4943
    00001351: 	movzbl	0x5c(%rsp), %ebp
    00001356: 	xorl	%r13d, %r13d
    00001359: 	leaq	0x231(%rsp), %r12
    00001361: 	leaq	0x2170(%rsp), %rbx
    00001369: 	nopl	(%rax) # Size: 7
.Ltmp4765:
    00001370: 	movsbl	0x230(%rsp), %esi
    00001378: 	movq	%r12, %rdi
    0000137b: 	movl	%esi, %ecx
    0000137d: 	subb	0x231(%rsp), %cl
    00001384: 	nopl	(%rax) # Size: 4
.Ltmp4763:
    00001388: 	movl	%esi, %r8d
    0000138b: 	movsbl	(%rdi), %esi
    0000138e: 	addq	$0x1, %rdi
    00001392: 	movl	%r8d, %eax
    00001395: 	cltd
    00001396: 	idivl	%esi
    00001398: 	addl	%ebp, %eax
    0000139a: 	movsbl	%al, %eax
    0000139d: 	leal	(%r8,%rax,2), %edx
    000013a1: 	leal	(%rsi,%rax,2), %eax
    000013a4: 	addl	%ecx, %edx
    000013a6: 	movl	%edx, %ecx
    000013a8: 	subl	%eax, %ecx
    000013aa: 	cmpq	%rbx, %rdi
    000013ad: 	jne	.Ltmp4763 # Offset: 5037
    000013af: 	testb	%cl, %cl
    000013b1: 	jne	.Ltmp4764 # Offset: 5041
.Ltmp4955:
    000013b7: 	addl	$0x1, %r13d
    000013bb: 	cmpl	%r9d, %r13d
    000013be: 	jl	.Ltmp4765 # Offset: 5054
.Ltmp4762:
    000013c0: 	movq	%r15, %rsi
    000013c3: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000013ca: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 5066
    000013cf: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000013d6: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000013dd: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000013e4: 	je	.Ltmp4766 # Offset: 5092
.Ltmp4990:
    000013ea: 	movq	-0x20(%rax), %rbp
    000013ee: 	callq	clock@PLT # Offset: 5102
    000013f3: 	pxor	%xmm0, %xmm0
    000013f7: 	movq	%rax, end_time(%rip)
    000013fe: 	movq	%rbp, %rdi
    00001401: 	subq	start_time(%rip), %rax
    00001408: 	cvtsi2sd	%rax, %xmm0
    0000140d: 	divsd	DATAat0x4d640(%rip), %xmm0
    00001415: 	callq	_Z13record_resultdPKc # Offset: 5141
    0000141a: 	movq	0x210(%rsp), %rdi
    00001422: 	cmpq	(%rsp), %rdi
    00001426: 	je	.Ltmp4767 # Offset: 5158
    00001428: 	movq	0x220(%rsp), %rax
    00001430: 	leaq	0x1(%rax), %rsi
    00001434: 	callq	_ZdlPvm@PLT # Offset: 5172
.Ltmp4767:
    00001439: 	movq	0x8(%rsp), %rsi
    0000143e: 	leaq	DATAat0x4d29b(%rip), %rdx
    00001445: 	movq	%r15, %rdi
    00001448: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5192
    0000144d: 	callq	clock@PLT # Offset: 5197
    00001452: 	movl	iterations(%rip), %r12d
    00001459: 	xorl	%ebp, %ebp
    0000145b: 	leaq	0x2160(%rsp), %rbx
    00001463: 	movq	%rax, start_time(%rip)
    0000146a: 	testl	%r12d, %r12d
    0000146d: 	jle	.Ltmp4768 # Offset: 5229
    00001473: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4771:
    00001478: 	movzbl	0x230(%rsp), %r10d
    00001481: 	movq	%r14, %rax
    00001484: 	pxor	%xmm0, %xmm0
    00001488: 	subb	0x231(%rsp), %r10b
.Ltmp4769:
    00001490: 	paddb	(%rax), %xmm0
    00001494: 	movdqu	0x1(%rax), %xmm5
    00001499: 	addq	$0x10, %rax
    0000149d: 	psubb	%xmm5, %xmm0
    000014a1: 	cmpq	%rbx, %rax
    000014a4: 	jne	.Ltmp4769 # Offset: 5284
    000014a6: 	movdqa	%xmm0, %xmm1
    000014aa: 	pxor	%xmm6, %xmm6
    000014ae: 	movzbl	0x2169(%rsp), %r9d
    000014b7: 	movzbl	0x216a(%rsp), %r8d
    000014c0: 	psrldq	$0x8, %xmm1
    000014c5: 	movzbl	0x216b(%rsp), %edi
    000014cd: 	movzbl	0x216c(%rsp), %esi
    000014d5: 	paddb	%xmm1, %xmm0
    000014d9: 	movzbl	0x216d(%rsp), %ecx
    000014e1: 	movq	0x2161(%rsp), %xmm1
    000014ea: 	psadbw	%xmm6, %xmm0
    000014ee: 	movzbl	0x216e(%rsp), %edx
    000014f6: 	movd	%xmm0, %eax
    000014fa: 	movq	0x2160(%rsp), %xmm0
    00001503: 	addl	%eax, %r10d
    00001506: 	psubb	%xmm1, %xmm0
    0000150a: 	pxor	%xmm1, %xmm1
    0000150e: 	movdqa	%xmm0, %xmm7
    00001512: 	psadbw	%xmm1, %xmm7
    00001516: 	movq	%xmm7, 0x100(%rsp)
    0000151f: 	movq	%xmm7, %rax
    00001524: 	movl	%eax, %r11d
    00001527: 	movzbl	0x2168(%rsp), %eax
    0000152f: 	addl	%r10d, %r11d
    00001532: 	subl	%r9d, %eax
    00001535: 	subl	%r8d, %r9d
    00001538: 	subl	%edi, %r8d
    0000153b: 	subl	%esi, %edi
    0000153d: 	addl	%r11d, %eax
    00001540: 	subl	%ecx, %esi
    00001542: 	subl	%edx, %ecx
    00001544: 	subb	0x216f(%rsp), %dl
    0000154b: 	addl	%r9d, %eax
    0000154e: 	addl	%eax, %r8d
    00001551: 	addl	%r8d, %edi
    00001554: 	addl	%edi, %esi
    00001556: 	addl	%esi, %ecx
    00001558: 	addb	%dl, %cl
    0000155a: 	jne	.Ltmp4770 # Offset: 5466
.Ltmp4954:
    00001560: 	addl	$0x1, %ebp
    00001563: 	cmpl	%r12d, %ebp
    00001566: 	jl	.Ltmp4771 # Offset: 5478
.Ltmp4768:
    0000156c: 	movq	%r15, %rsi
    0000156f: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001576: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 5494
    0000157b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001582: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001589: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001590: 	je	.Ltmp4772 # Offset: 5520
.Ltmp4989:
    00001596: 	movq	-0x20(%rax), %rbp
    0000159a: 	callq	clock@PLT # Offset: 5530
    0000159f: 	pxor	%xmm0, %xmm0
    000015a3: 	movq	%rax, end_time(%rip)
    000015aa: 	movq	%rbp, %rdi
    000015ad: 	subq	start_time(%rip), %rax
    000015b4: 	cvtsi2sd	%rax, %xmm0
    000015b9: 	divsd	DATAat0x4d640(%rip), %xmm0
    000015c1: 	callq	_Z13record_resultdPKc # Offset: 5569
    000015c6: 	movq	0x210(%rsp), %rdi
    000015ce: 	cmpq	(%rsp), %rdi
    000015d2: 	je	.Ltmp4773 # Offset: 5586
    000015d4: 	movq	0x220(%rsp), %rax
    000015dc: 	leaq	0x1(%rax), %rsi
    000015e0: 	callq	_ZdlPvm@PLT # Offset: 5600
.Ltmp4773:
    000015e5: 	movq	0x8(%rsp), %rsi
    000015ea: 	leaq	DATAat0x4d2ad(%rip), %rdx
    000015f1: 	movq	%r15, %rdi
    000015f4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5620
    000015f9: 	callq	clock@PLT # Offset: 5625
    000015fe: 	movl	iterations(%rip), %edi
    00001604: 	movq	%rax, start_time(%rip)
    0000160b: 	testl	%edi, %edi
    0000160d: 	jle	.Ltmp4774 # Offset: 5645
    00001613: 	movzbl	0x5c(%rsp), %ebp
    00001618: 	xorl	%r13d, %r13d
    0000161b: 	leaq	0x231(%rsp), %r12
    00001623: 	leaq	0x2170(%rsp), %rbx
    0000162b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4777:
    00001630: 	movsbl	0x230(%rsp), %ecx
    00001638: 	movl	0x4c(%rsp), %r10d
    0000163d: 	movq	%r12, %rsi
    00001640: 	movl	%ecx, %r8d
    00001643: 	subb	0x231(%rsp), %r8b
    0000164b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4775:
    00001650: 	movl	%ecx, %r9d
    00001653: 	movsbl	(%rsi), %ecx
    00001656: 	addq	$0x1, %rsi
    0000165a: 	movl	%r9d, %r11d
    0000165d: 	subl	%ecx, %r11d
    00001660: 	movl	%r11d, %eax
    00001663: 	imull	%ebp, %eax
    00001666: 	movl	%eax, %r11d
    00001669: 	movl	%r9d, %eax
    0000166c: 	cltd
    0000166d: 	idivl	%r10d
    00001670: 	addl	%r11d, %eax
    00001673: 	movsbl	%al, %eax
    00001676: 	leal	(%r9,%rax,2), %edx
    0000167a: 	leal	(%rcx,%rax,2), %eax
    0000167d: 	addl	%r8d, %edx
    00001680: 	subl	%eax, %edx
    00001682: 	movl	%edx, %r8d
    00001685: 	cmpq	%rbx, %rsi
    00001688: 	jne	.Ltmp4775 # Offset: 5768
    0000168a: 	testb	%dl, %dl
    0000168c: 	jne	.Ltmp4776 # Offset: 5772
.Ltmp4953:
    00001692: 	addl	$0x1, %r13d
    00001696: 	cmpl	%edi, %r13d
    00001699: 	jl	.Ltmp4777 # Offset: 5785
.Ltmp4774:
    0000169b: 	movq	%r15, %rsi
    0000169e: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000016a5: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 5797
    000016aa: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000016b1: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000016b8: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000016bf: 	je	.Ltmp4778 # Offset: 5823
.Ltmp4988:
    000016c5: 	movq	-0x20(%rax), %rbp
    000016c9: 	callq	clock@PLT # Offset: 5833
    000016ce: 	pxor	%xmm0, %xmm0
    000016d2: 	movq	%rax, end_time(%rip)
    000016d9: 	movq	%rbp, %rdi
    000016dc: 	subq	start_time(%rip), %rax
    000016e3: 	cvtsi2sd	%rax, %xmm0
    000016e8: 	divsd	DATAat0x4d640(%rip), %xmm0
    000016f0: 	callq	_Z13record_resultdPKc # Offset: 5872
    000016f5: 	movq	0x210(%rsp), %rdi
    000016fd: 	cmpq	(%rsp), %rdi
    00001701: 	je	.Ltmp4779 # Offset: 5889
    00001703: 	movq	0x220(%rsp), %rax
    0000170b: 	leaq	0x1(%rax), %rsi
    0000170f: 	callq	_ZdlPvm@PLT # Offset: 5903
.Ltmp4779:
    00001714: 	movq	0x8(%rsp), %rbx
    00001719: 	leaq	0x190(%rsp), %rdi
    00001721: 	leaq	DATAat0x4d2b6(%rip), %rdx
    00001728: 	movq	%rbx, %rsi
    0000172b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5931
    00001730: 	movl	iterations(%rip), %edx
    00001736: 	xorl	%r8d, %r8d
    00001739: 	xorl	%ecx, %ecx
    0000173b: 	movl	$0x1f40, %esi
    00001740: 	movq	0x190(%rsp), %rdi
    00001748: 	callq	_Z9summarizePKciiii # Offset: 5960
    0000174d: 	leaq	DATAat0x4d2bb(%rip), %rdx
    00001754: 	movq	%rbx, %rsi
    00001757: 	movq	%r15, %rdi
    0000175a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5978
    0000175f: 	callq	clock@PLT # Offset: 5983
    00001764: 	movl	iterations(%rip), %r13d
    0000176b: 	xorl	%ebp, %ebp
    0000176d: 	leaq	0x2160(%rsp), %rbx
    00001775: 	movq	%rax, start_time(%rip)
    0000177c: 	leaq	DATAat0x4d004(%rip), %r12
    00001783: 	testl	%r13d, %r13d
    00001786: 	jle	.Ltmp4780 # Offset: 6022
    0000178c: 	nopl	(%rax) # Size: 4
.Ltmp4783:
    00001790: 	movzbl	0x230(%rsp), %r10d
    00001799: 	movq	%r14, %rax
    0000179c: 	pxor	%xmm1, %xmm1
    000017a0: 	subb	0x231(%rsp), %r10b
    000017a8: 	addl	%r10d, %r10d
    000017ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4781:
    000017b0: 	movdqa	(%rax), %xmm0
    000017b4: 	movdqu	0x1(%rax), %xmm6
    000017b9: 	addq	$0x10, %rax
    000017bd: 	psubb	%xmm6, %xmm0
    000017c1: 	paddb	%xmm0, %xmm0
    000017c5: 	paddb	%xmm0, %xmm1
    000017c9: 	cmpq	%rbx, %rax
    000017cc: 	jne	.Ltmp4781 # Offset: 6092
    000017ce: 	movdqa	%xmm1, %xmm0
    000017d2: 	movzbl	0x216a(%rsp), %edi
    000017da: 	movzbl	0x2169(%rsp), %r8d
    000017e3: 	psrldq	$0x8, %xmm0
    000017e8: 	movzbl	0x216b(%rsp), %esi
    000017f0: 	movzbl	0x2168(%rsp), %r9d
    000017f9: 	paddb	%xmm0, %xmm1
    000017fd: 	pxor	%xmm0, %xmm0
    00001801: 	movzbl	0x216c(%rsp), %ecx
    00001809: 	movzbl	0x216d(%rsp), %edx
    00001811: 	psadbw	%xmm0, %xmm1
    00001815: 	subl	%r8d, %r9d
    00001818: 	subl	%edi, %r8d
    0000181b: 	subl	%esi, %edi
    0000181d: 	movq	0x2160(%rsp), %xmm0
    00001826: 	movd	%xmm1, %eax
    0000182a: 	subl	%ecx, %esi
    0000182c: 	movq	0x2161(%rsp), %xmm1
    00001835: 	addl	%eax, %r10d
    00001838: 	subl	%edx, %ecx
    0000183a: 	psubb	%xmm1, %xmm0
    0000183e: 	pxor	%xmm1, %xmm1
    00001842: 	paddb	%xmm0, %xmm0
    00001846: 	movdqa	%xmm0, %xmm6
    0000184a: 	psadbw	%xmm1, %xmm6
    0000184e: 	movq	%xmm6, 0xf8(%rsp)
    00001857: 	movq	%xmm6, %rax
    0000185c: 	movl	%eax, %r11d
    0000185f: 	movzbl	0x216e(%rsp), %eax
    00001867: 	addl	%r10d, %r11d
    0000186a: 	leal	(%r11,%r9,2), %r9d
    0000186e: 	subl	%eax, %edx
    00001870: 	subb	0x216f(%rsp), %al
    00001877: 	leal	(%r9,%r8,2), %r8d
    0000187b: 	leal	(%r8,%rdi,2), %edi
    0000187f: 	leal	(%rdi,%rsi,2), %esi
    00001882: 	leal	(%rsi,%rcx,2), %ecx
    00001885: 	leal	(%rcx,%rdx,2), %edx
    00001888: 	leal	(%rdx,%rax,2), %eax
    0000188b: 	testb	%al, %al
    0000188d: 	jne	.Ltmp4782 # Offset: 6285
.Ltmp4952:
    00001893: 	addl	$0x1, %ebp
    00001896: 	cmpl	%r13d, %ebp
    00001899: 	jl	.Ltmp4783 # Offset: 6297
.Ltmp4780:
    0000189f: 	movq	%r15, %rsi
    000018a2: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000018a9: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 6313
    000018ae: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000018b5: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000018bc: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000018c3: 	je	.Ltmp4784 # Offset: 6339
.Ltmp4987:
    000018c9: 	movq	-0x20(%rax), %rbp
    000018cd: 	callq	clock@PLT # Offset: 6349
    000018d2: 	pxor	%xmm0, %xmm0
    000018d6: 	movq	%rax, end_time(%rip)
    000018dd: 	movq	%rbp, %rdi
    000018e0: 	subq	start_time(%rip), %rax
    000018e7: 	cvtsi2sd	%rax, %xmm0
    000018ec: 	divsd	DATAat0x4d640(%rip), %xmm0
    000018f4: 	callq	_Z13record_resultdPKc # Offset: 6388
    000018f9: 	movq	0x210(%rsp), %rdi
    00001901: 	cmpq	(%rsp), %rdi
    00001905: 	je	.Ltmp4785 # Offset: 6405
    00001907: 	movq	0x220(%rsp), %rax
    0000190f: 	leaq	0x1(%rax), %rsi
    00001913: 	callq	_ZdlPvm@PLT # Offset: 6419
.Ltmp4785:
    00001918: 	movq	0x8(%rsp), %rsi
    0000191d: 	leaq	DATAat0x4d2ca(%rip), %rdx
    00001924: 	movq	%r15, %rdi
    00001927: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6439
    0000192c: 	callq	clock@PLT # Offset: 6444
    00001931: 	movl	iterations(%rip), %r13d
    00001938: 	xorl	%ebp, %ebp
    0000193a: 	leaq	0x2160(%rsp), %rbx
    00001942: 	movq	%rax, start_time(%rip)
    00001949: 	leaq	DATAat0x4d004(%rip), %r12
    00001950: 	testl	%r13d, %r13d
    00001953: 	jle	.Ltmp4786 # Offset: 6483
    00001959: 	nopl	(%rax) # Size: 7
.Ltmp4789:
    00001960: 	movzbl	0x230(%rsp), %r10d
    00001969: 	movq	%r14, %rax
    0000196c: 	pxor	%xmm1, %xmm1
    00001970: 	subb	0x231(%rsp), %r10b
    00001978: 	addl	%r10d, %r10d
    0000197b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4787:
    00001980: 	movdqa	(%rax), %xmm0
    00001984: 	movdqu	0x1(%rax), %xmm7
    00001989: 	addq	$0x10, %rax
    0000198d: 	psubb	%xmm7, %xmm0
    00001991: 	paddb	%xmm0, %xmm0
    00001995: 	paddb	%xmm0, %xmm1
    00001999: 	cmpq	%rax, %rbx
    0000199c: 	jne	.Ltmp4787 # Offset: 6556
    0000199e: 	movdqa	%xmm1, %xmm0
    000019a2: 	movzbl	0x216a(%rsp), %edi
    000019aa: 	movzbl	0x2169(%rsp), %r8d
    000019b3: 	psrldq	$0x8, %xmm0
    000019b8: 	movzbl	0x216b(%rsp), %esi
    000019c0: 	movzbl	0x2168(%rsp), %r9d
    000019c9: 	paddb	%xmm0, %xmm1
    000019cd: 	pxor	%xmm0, %xmm0
    000019d1: 	movzbl	0x216c(%rsp), %ecx
    000019d9: 	movzbl	0x216d(%rsp), %edx
    000019e1: 	psadbw	%xmm0, %xmm1
    000019e5: 	subl	%r8d, %r9d
    000019e8: 	subl	%edi, %r8d
    000019eb: 	subl	%esi, %edi
    000019ed: 	movq	0x2160(%rsp), %xmm0
    000019f6: 	movd	%xmm1, %eax
    000019fa: 	subl	%ecx, %esi
    000019fc: 	movq	0x2161(%rsp), %xmm1
    00001a05: 	addl	%eax, %r10d
    00001a08: 	subl	%edx, %ecx
    00001a0a: 	psubb	%xmm1, %xmm0
    00001a0e: 	pxor	%xmm1, %xmm1
    00001a12: 	paddb	%xmm0, %xmm0
    00001a16: 	movdqa	%xmm0, %xmm3
    00001a1a: 	psadbw	%xmm1, %xmm3
    00001a1e: 	movq	%xmm3, 0xf0(%rsp)
    00001a27: 	movq	%xmm3, %rax
    00001a2c: 	movl	%eax, %r11d
    00001a2f: 	movzbl	0x216e(%rsp), %eax
    00001a37: 	addl	%r10d, %r11d
    00001a3a: 	leal	(%r11,%r9,2), %r9d
    00001a3e: 	subl	%eax, %edx
    00001a40: 	subb	0x216f(%rsp), %al
    00001a47: 	leal	(%r9,%r8,2), %r8d
    00001a4b: 	leal	(%r8,%rdi,2), %edi
    00001a4f: 	leal	(%rdi,%rsi,2), %esi
    00001a52: 	leal	(%rsi,%rcx,2), %ecx
    00001a55: 	leal	(%rcx,%rdx,2), %edx
    00001a58: 	leal	(%rdx,%rax,2), %eax
    00001a5b: 	testb	%al, %al
    00001a5d: 	jne	.Ltmp4788 # Offset: 6749
.Ltmp4951:
    00001a63: 	addl	$0x1, %ebp
    00001a66: 	cmpl	%r13d, %ebp
    00001a69: 	jl	.Ltmp4789 # Offset: 6761
.Ltmp4786:
    00001a6f: 	movq	%r15, %rsi
    00001a72: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001a79: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 6777
    00001a7e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001a85: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001a8c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001a93: 	je	.Ltmp4790 # Offset: 6803
.Ltmp4986:
    00001a99: 	movq	-0x20(%rax), %rbp
    00001a9d: 	callq	clock@PLT # Offset: 6813
    00001aa2: 	pxor	%xmm0, %xmm0
    00001aa6: 	movq	%rax, end_time(%rip)
    00001aad: 	movq	%rbp, %rdi
    00001ab0: 	subq	start_time(%rip), %rax
    00001ab7: 	cvtsi2sd	%rax, %xmm0
    00001abc: 	divsd	DATAat0x4d640(%rip), %xmm0
    00001ac4: 	callq	_Z13record_resultdPKc # Offset: 6852
    00001ac9: 	movq	0x210(%rsp), %rdi
    00001ad1: 	cmpq	(%rsp), %rdi
    00001ad5: 	je	.Ltmp4791 # Offset: 6869
    00001ad7: 	movq	0x220(%rsp), %rax
    00001adf: 	leaq	0x1(%rax), %rsi
    00001ae3: 	callq	_ZdlPvm@PLT # Offset: 6883
.Ltmp4791:
    00001ae8: 	movq	0x8(%rsp), %rsi
    00001aed: 	leaq	DATAat0x4d2de(%rip), %rdx
    00001af4: 	movq	%r15, %rdi
    00001af7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6903
    00001afc: 	movl	0x4c(%rsp), %esi
    00001b00: 	movq	%r15, %rdx
    00001b03: 	movq	%r14, %rdi
    00001b06: 	callq	"_Z20test_CSE2_add_inlineIa14custom_cse_addIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 6918
    00001b0b: 	movq	0x210(%rsp), %rdi
    00001b13: 	cmpq	(%rsp), %rdi
    00001b17: 	je	.Ltmp4792 # Offset: 6935
    00001b19: 	movq	0x220(%rsp), %rax
    00001b21: 	leaq	0x1(%rax), %rsi
    00001b25: 	callq	_ZdlPvm@PLT # Offset: 6949
.Ltmp4792:
    00001b2a: 	movq	0x8(%rsp), %rsi
    00001b2f: 	leaq	DATAat0x4d2f0(%rip), %rdx
    00001b36: 	movq	%r15, %rdi
    00001b39: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6969
    00001b3e: 	callq	clock@PLT # Offset: 6974
    00001b43: 	movl	iterations(%rip), %r13d
    00001b4a: 	movq	%rax, start_time(%rip)
    00001b51: 	testl	%r13d, %r13d
    00001b54: 	jle	.Ltmp4793 # Offset: 6996
    00001b5a: 	movzbl	0x5c(%rsp), %ebp
    00001b5f: 	xorl	%r12d, %r12d
    00001b62: 	leaq	0x2160(%rsp), %rbx
    00001b6a: 	movl	%ebp, %eax
    00001b6c: 	movd	%eax, %xmm0
    00001b70: 	punpcklbw	%xmm0, %xmm0
    00001b74: 	punpcklwd	%xmm0, %xmm0
    00001b78: 	pshufd	$0x0, %xmm0, %xmm5
    00001b7d: 	movaps	%xmm5, 0x10(%rsp)
    00001b82: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4796:
    00001b88: 	movzbl	0x230(%rsp), %r10d
    00001b91: 	movq	%r14, %rax
    00001b94: 	pxor	%xmm1, %xmm1
    00001b98: 	subb	0x231(%rsp), %r10b
    00001ba0: 	addl	%r10d, %r10d
    00001ba3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4794:
    00001ba8: 	movdqu	0x1(%rax), %xmm0
    00001bad: 	paddb	(%rax), %xmm0
    00001bb1: 	addq	$0x10, %rax
    00001bb5: 	paddb	0x10(%rsp), %xmm0
    00001bbb: 	movdqu	-0xf(%rax), %xmm2
    00001bc0: 	paddb	%xmm0, %xmm0
    00001bc4: 	paddb	%xmm0, %xmm2
    00001bc8: 	paddb	-0x10(%rax), %xmm0
    00001bcd: 	psubb	%xmm2, %xmm1
    00001bd1: 	paddb	%xmm0, %xmm0
    00001bd5: 	psubb	%xmm2, %xmm0
    00001bd9: 	paddb	%xmm0, %xmm1
    00001bdd: 	cmpq	%rbx, %rax
    00001be0: 	jne	.Ltmp4794 # Offset: 7136
    00001be2: 	movdqa	%xmm1, %xmm0
    00001be6: 	pxor	%xmm3, %xmm3
    00001bea: 	movq	0x2161(%rsp), %xmm2
    00001bf3: 	movzbl	0x2169(%rsp), %r8d
    00001bfc: 	psrldq	$0x8, %xmm0
    00001c01: 	movzbl	0x216a(%rsp), %edi
    00001c09: 	movzbl	0x2168(%rsp), %r9d
    00001c12: 	paddb	%xmm0, %xmm1
    00001c16: 	movzbl	0x216b(%rsp), %esi
    00001c1e: 	movq	0x2160(%rsp), %xmm0
    00001c27: 	psadbw	%xmm3, %xmm1
    00001c2b: 	subl	%r8d, %r9d
    00001c2e: 	movzbl	0x216c(%rsp), %ecx
    00001c36: 	subl	%edi, %r8d
    00001c39: 	movd	%xmm1, %eax
    00001c3d: 	movdqa	%xmm2, %xmm1
    00001c41: 	movzbl	0x216d(%rsp), %edx
    00001c49: 	subl	%esi, %edi
    00001c4b: 	addl	%eax, %r10d
    00001c4e: 	movl	%ebp, %eax
    00001c50: 	paddb	%xmm0, %xmm1
    00001c54: 	subl	%ecx, %esi
    00001c56: 	shll	$0x8, %eax
    00001c59: 	subl	%edx, %ecx
    00001c5b: 	orl	%ebp, %eax
    00001c5d: 	movd	%eax, %xmm4
    00001c61: 	pshuflw	$0x0, %xmm4, %xmm3
    00001c66: 	paddb	%xmm3, %xmm1
    00001c6a: 	paddb	%xmm1, %xmm1
    00001c6e: 	paddb	%xmm1, %xmm0
    00001c72: 	paddb	%xmm2, %xmm1
    00001c76: 	paddb	%xmm0, %xmm0
    00001c7a: 	paddb	%xmm1, %xmm1
    00001c7e: 	psubb	%xmm1, %xmm0
    00001c82: 	pxor	%xmm1, %xmm1
    00001c86: 	movdqa	%xmm0, %xmm4
    00001c8a: 	psadbw	%xmm1, %xmm4
    00001c8e: 	movq	%xmm4, 0xe8(%rsp)
    00001c97: 	movq	%xmm4, %rax
    00001c9c: 	movl	%eax, %r11d
    00001c9f: 	movzbl	0x216e(%rsp), %eax
    00001ca7: 	addl	%r10d, %r11d
    00001caa: 	leal	(%r11,%r9,2), %r9d
    00001cae: 	subl	%eax, %edx
    00001cb0: 	subb	0x216f(%rsp), %al
    00001cb7: 	leal	(%r9,%r8,2), %r8d
    00001cbb: 	leal	(%r8,%rdi,2), %edi
    00001cbf: 	leal	(%rdi,%rsi,2), %esi
    00001cc2: 	leal	(%rsi,%rcx,2), %ecx
    00001cc5: 	leal	(%rcx,%rdx,2), %edx
    00001cc8: 	leal	(%rdx,%rax,2), %eax
    00001ccb: 	testb	%al, %al
    00001ccd: 	jne	.Ltmp4795 # Offset: 7373
.Ltmp4950:
    00001cd3: 	addl	$0x1, %r12d
    00001cd7: 	cmpl	%r13d, %r12d
    00001cda: 	jl	.Ltmp4796 # Offset: 7386
.Ltmp4793:
    00001ce0: 	movq	%r15, %rsi
    00001ce3: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001cea: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 7402
    00001cef: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001cf6: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001cfd: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001d04: 	je	.Ltmp4797 # Offset: 7428
.Ltmp4985:
    00001d0a: 	movq	-0x20(%rax), %rbp
    00001d0e: 	callq	clock@PLT # Offset: 7438
    00001d13: 	pxor	%xmm0, %xmm0
    00001d17: 	movq	%rax, end_time(%rip)
    00001d1e: 	movq	%rbp, %rdi
    00001d21: 	subq	start_time(%rip), %rax
    00001d28: 	cvtsi2sd	%rax, %xmm0
    00001d2d: 	divsd	DATAat0x4d640(%rip), %xmm0
    00001d35: 	callq	_Z13record_resultdPKc # Offset: 7477
    00001d3a: 	movq	0x210(%rsp), %rdi
    00001d42: 	cmpq	(%rsp), %rdi
    00001d46: 	je	.Ltmp4798 # Offset: 7494
    00001d48: 	movq	0x220(%rsp), %rax
    00001d50: 	leaq	0x1(%rax), %rsi
    00001d54: 	callq	_ZdlPvm@PLT # Offset: 7508
.Ltmp4798:
    00001d59: 	movq	0x8(%rsp), %rsi
    00001d5e: 	leaq	DATAat0x4d30a(%rip), %rdx
    00001d65: 	movq	%r15, %rdi
    00001d68: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7528
    00001d6d: 	movl	0x4c(%rsp), %esi
    00001d71: 	movq	%r15, %rdx
    00001d74: 	movq	%r14, %rdi
    00001d77: 	callq	"_Z9test_CSE2Ia14custom_cse_addIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 7543
    00001d7c: 	movq	0x210(%rsp), %rdi
    00001d84: 	cmpq	(%rsp), %rdi
    00001d88: 	je	.Ltmp4799 # Offset: 7560
    00001d8a: 	movq	0x220(%rsp), %rax
    00001d92: 	leaq	0x1(%rax), %rsi
    00001d96: 	callq	_ZdlPvm@PLT # Offset: 7574
.Ltmp4799:
    00001d9b: 	movq	0x8(%rsp), %rsi
    00001da0: 	leaq	DATAat0x4d315(%rip), %rdx
    00001da7: 	movq	%r15, %rdi
    00001daa: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7594
    00001daf: 	callq	clock@PLT # Offset: 7599
    00001db4: 	movl	iterations(%rip), %r13d
    00001dbb: 	xorl	%ebp, %ebp
    00001dbd: 	leaq	0x2160(%rsp), %rbx
    00001dc5: 	movq	%rax, start_time(%rip)
    00001dcc: 	leaq	DATAat0x4d004(%rip), %r12
    00001dd3: 	testl	%r13d, %r13d
    00001dd6: 	jle	.Ltmp4800 # Offset: 7638
    00001ddc: 	nopl	(%rax) # Size: 4
.Ltmp4803:
    00001de0: 	movzbl	0x230(%rsp), %r10d
    00001de9: 	movq	%r14, %rax
    00001dec: 	pxor	%xmm1, %xmm1
    00001df0: 	subb	0x231(%rsp), %r10b
    00001df8: 	addl	%r10d, %r10d
    00001dfb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4801:
    00001e00: 	movdqa	(%rax), %xmm0
    00001e04: 	movdqu	0x1(%rax), %xmm5
    00001e09: 	addq	$0x10, %rax
    00001e0d: 	psubb	%xmm5, %xmm0
    00001e11: 	paddb	%xmm0, %xmm0
    00001e15: 	paddb	%xmm0, %xmm1
    00001e19: 	cmpq	%rax, %rbx
    00001e1c: 	jne	.Ltmp4801 # Offset: 7708
    00001e1e: 	movdqa	%xmm1, %xmm0
    00001e22: 	movzbl	0x216a(%rsp), %edi
    00001e2a: 	movzbl	0x2169(%rsp), %r8d
    00001e33: 	psrldq	$0x8, %xmm0
    00001e38: 	movzbl	0x216b(%rsp), %esi
    00001e40: 	movzbl	0x2168(%rsp), %r9d
    00001e49: 	paddb	%xmm0, %xmm1
    00001e4d: 	pxor	%xmm0, %xmm0
    00001e51: 	movzbl	0x216c(%rsp), %ecx
    00001e59: 	movzbl	0x216d(%rsp), %edx
    00001e61: 	psadbw	%xmm0, %xmm1
    00001e65: 	subl	%r8d, %r9d
    00001e68: 	subl	%edi, %r8d
    00001e6b: 	subl	%esi, %edi
    00001e6d: 	movq	0x2160(%rsp), %xmm0
    00001e76: 	movd	%xmm1, %eax
    00001e7a: 	subl	%ecx, %esi
    00001e7c: 	movq	0x2161(%rsp), %xmm1
    00001e85: 	addl	%eax, %r10d
    00001e88: 	subl	%edx, %ecx
    00001e8a: 	psubb	%xmm1, %xmm0
    00001e8e: 	pxor	%xmm1, %xmm1
    00001e92: 	paddb	%xmm0, %xmm0
    00001e96: 	movdqa	%xmm0, %xmm5
    00001e9a: 	psadbw	%xmm1, %xmm5
    00001e9e: 	movq	%xmm5, 0xe0(%rsp)
    00001ea7: 	movq	%xmm5, %rax
    00001eac: 	movl	%eax, %r11d
    00001eaf: 	movzbl	0x216e(%rsp), %eax
    00001eb7: 	addl	%r10d, %r11d
    00001eba: 	leal	(%r11,%r9,2), %r9d
    00001ebe: 	subl	%eax, %edx
    00001ec0: 	subb	0x216f(%rsp), %al
    00001ec7: 	leal	(%r9,%r8,2), %r8d
    00001ecb: 	leal	(%r8,%rdi,2), %edi
    00001ecf: 	leal	(%rdi,%rsi,2), %esi
    00001ed2: 	leal	(%rsi,%rcx,2), %ecx
    00001ed5: 	leal	(%rcx,%rdx,2), %edx
    00001ed8: 	leal	(%rdx,%rax,2), %eax
    00001edb: 	testb	%al, %al
    00001edd: 	jne	.Ltmp4802 # Offset: 7901
.Ltmp4949:
    00001ee3: 	addl	$0x1, %ebp
    00001ee6: 	cmpl	%r13d, %ebp
    00001ee9: 	jl	.Ltmp4803 # Offset: 7913
.Ltmp4800:
    00001eef: 	movq	%r15, %rsi
    00001ef2: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001ef9: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 7929
    00001efe: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001f05: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001f0c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001f13: 	je	.Ltmp4804 # Offset: 7955
.Ltmp4984:
    00001f19: 	movq	-0x20(%rax), %rbp
    00001f1d: 	callq	clock@PLT # Offset: 7965
    00001f22: 	pxor	%xmm0, %xmm0
    00001f26: 	movq	%rax, end_time(%rip)
    00001f2d: 	movq	%rbp, %rdi
    00001f30: 	subq	start_time(%rip), %rax
    00001f37: 	cvtsi2sd	%rax, %xmm0
    00001f3c: 	divsd	DATAat0x4d640(%rip), %xmm0
    00001f44: 	callq	_Z13record_resultdPKc # Offset: 8004
    00001f49: 	movq	0x210(%rsp), %rdi
    00001f51: 	cmpq	(%rsp), %rdi
    00001f55: 	je	.Ltmp4805 # Offset: 8021
    00001f57: 	movq	0x220(%rsp), %rax
    00001f5f: 	leaq	0x1(%rax), %rsi
    00001f63: 	callq	_ZdlPvm@PLT # Offset: 8035
.Ltmp4805:
    00001f68: 	movq	0x8(%rsp), %rsi
    00001f6d: 	leaq	DATAat0x4d32e(%rip), %rdx
    00001f74: 	movq	%r15, %rdi
    00001f77: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8055
    00001f7c: 	callq	clock@PLT # Offset: 8060
    00001f81: 	movq	%rax, start_time(%rip)
    00001f88: 	movl	iterations(%rip), %eax
    00001f8e: 	movl	%eax, 0x58(%rsp)
    00001f92: 	testl	%eax, %eax
    00001f94: 	jle	.Ltmp4806 # Offset: 8084
    00001f9a: 	movzbl	0x5c(%rsp), %eax
    00001f9f: 	movl	$0x0, 0x50(%rsp)
    00001fa7: 	leaq	0x2160(%rsp), %rbx
    00001faf: 	movl	%eax, %ebp
    00001fb1: 	movw	%ax, 0x56(%rsp)
    00001fb6: 	movd	%ebp, %xmm0
    00001fba: 	punpcklbw	%xmm0, %xmm0
    00001fbe: 	punpcklwd	%xmm0, %xmm0
    00001fc2: 	pshufd	$0x0, %xmm0, %xmm6
    00001fc7: 	movaps	%xmm6, 0x10(%rsp)
    00001fcc: 	nopl	(%rax) # Size: 4
.Ltmp4809:
    00001fd0: 	movzbl	0x230(%rsp), %edx
    00001fd8: 	movsbl	0x231(%rsp), %ecx
    00001fe0: 	pxor	%xmm1, %xmm1
    00001fe4: 	movl	%edx, %esi
    00001fe6: 	subl	%ecx, %esi
    00001fe8: 	leal	(%rsi,%rbp), %eax
    00001feb: 	leal	(%rdx,%rax,2), %edx
    00001fee: 	movsbl	%al, %edi
    00001ff1: 	leal	(%rcx,%rdi,2), %eax
    00001ff4: 	addl	%esi, %edx
    00001ff6: 	subl	%eax, %edx
    00001ff8: 	movq	%r14, %rax
    00001ffb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4807:
    00002000: 	movdqa	0x10(%rsp), %xmm2
    00002006: 	paddb	(%rax), %xmm2
    0000200a: 	addq	$0x10, %rax
    0000200e: 	movdqu	-0xf(%rax), %xmm6
    00002013: 	movdqa	-0x10(%rax), %xmm0
    00002018: 	movdqa	%xmm2, %xmm3
    0000201c: 	psubb	%xmm6, %xmm3
    00002020: 	paddb	%xmm3, %xmm0
    00002024: 	paddb	%xmm3, %xmm2
    00002028: 	paddb	%xmm3, %xmm0
    0000202c: 	psubb	%xmm2, %xmm1
    00002030: 	paddb	%xmm0, %xmm0
    00002034: 	psubb	%xmm2, %xmm0
    00002038: 	paddb	%xmm0, %xmm1
    0000203c: 	cmpq	%rbx, %rax
    0000203f: 	jne	.Ltmp4807 # Offset: 8255
    00002041: 	movdqa	%xmm1, %xmm0
    00002045: 	pxor	%xmm5, %xmm5
    00002049: 	movzwl	0x56(%rsp), %edi
    0000204e: 	movsbl	0x2169(%rsp), %ecx
    00002056: 	movsbl	0x216b(%rsp), %r11d
    0000205f: 	psrldq	$0x8, %xmm0
    00002064: 	movsbl	0x216c(%rsp), %r12d
    0000206d: 	paddb	%xmm0, %xmm1
    00002071: 	movl	%ecx, 0x24(%rsp)
    00002075: 	movl	%ecx, %r9d
    00002078: 	movq	0x2160(%rsp), %xmm0
    00002081: 	psadbw	%xmm5, %xmm1
    00002085: 	movl	%r11d, 0x2c(%rsp)
    0000208a: 	movd	%xmm1, %eax
    0000208e: 	movdqa	%xmm0, %xmm2
    00002092: 	movl	%r12d, 0x34(%rsp)
    00002097: 	movq	0x2161(%rsp), %xmm1
    000020a0: 	addl	%edx, %eax
    000020a2: 	movsbl	0x216a(%rsp), %edx
    000020aa: 	movb	%al, 0x54(%rsp)
    000020ae: 	movl	%edi, %eax
    000020b0: 	psubb	%xmm1, %xmm2
    000020b4: 	shll	$0x8, %eax
    000020b7: 	movl	%edx, %r8d
    000020ba: 	subl	%edx, %r9d
    000020bd: 	movl	%edx, 0x28(%rsp)
    000020c1: 	orl	%edi, %eax
    000020c3: 	subl	%r11d, %r8d
    000020c6: 	addl	%ebp, %r9d
    000020c9: 	movd	%eax, %xmm7
    000020cd: 	addl	%ebp, %r8d
    000020d0: 	movsbl	%r9b, %r9d
    000020d4: 	pshuflw	$0x0, %xmm7, %xmm3
    000020d9: 	leal	(%rdx,%r9,2), %esi
    000020dd: 	paddb	%xmm3, %xmm2
    000020e1: 	movl	%esi, 0x44(%rsp)
    000020e5: 	movl	%r12d, %esi
    000020e8: 	paddb	%xmm2, %xmm0
    000020ec: 	paddb	%xmm2, %xmm1
    000020f0: 	paddb	%xmm2, %xmm0
    000020f4: 	paddb	%xmm2, %xmm1
    000020f8: 	paddb	%xmm0, %xmm0
    000020fc: 	paddb	%xmm1, %xmm1
    00002100: 	psubb	%xmm1, %xmm0
    00002104: 	pxor	%xmm1, %xmm1
    00002108: 	movdqa	%xmm0, %xmm7
    0000210c: 	psadbw	%xmm1, %xmm7
    00002110: 	movq	%xmm7, 0xd8(%rsp)
    00002119: 	movq	%xmm7, %rax
    0000211e: 	movb	%al, 0x55(%rsp)
    00002122: 	movzbl	0x2168(%rsp), %eax
    0000212a: 	subl	%ecx, %eax
    0000212c: 	addl	%ebp, %eax
    0000212e: 	movsbl	%al, %eax
    00002131: 	leal	(%rcx,%rax,2), %edi
    00002134: 	movsbl	%r8b, %ecx
    00002138: 	movzbl	0x2168(%rsp), %r8d
    00002141: 	movl	%edi, 0x40(%rsp)
    00002145: 	leal	(%r11,%rcx,2), %r10d
    00002149: 	movl	%r11d, %edi
    0000214c: 	movsbl	0x216e(%rsp), %r11d
    00002155: 	leal	(%r8,%rax,2), %eax
    00002159: 	movl	0x40(%rsp), %r8d
    0000215e: 	subl	%r12d, %edi
    00002161: 	movl	%ecx, 0x30(%rsp)
    00002165: 	addl	%eax, %eax
    00002167: 	movl	%r10d, 0x48(%rsp)
    0000216c: 	addl	%ebp, %edi
    0000216e: 	movl	%r11d, %edx
    00002171: 	subl	%r8d, %eax
    00002174: 	movsbl	%dil, %edi
    00002178: 	movl	%r11d, 0x3c(%rsp)
    0000217d: 	movsbl	0x216d(%rsp), %r10d
    00002186: 	subl	%r8d, %eax
    00002189: 	movzbl	0x55(%rsp), %r8d
    0000218f: 	addb	0x54(%rsp), %r8b
    00002194: 	leal	(%r12,%rdi,2), %r13d
    00002198: 	movb	%r8b, 0x54(%rsp)
    0000219d: 	movzbl	0x54(%rsp), %r8d
    000021a3: 	subl	%r10d, %esi
    000021a6: 	movl	%r10d, %ecx
    000021a9: 	addl	%ebp, %esi
    000021ab: 	movl	%r10d, 0x38(%rsp)
    000021b0: 	subl	%r11d, %ecx
    000021b3: 	addl	%eax, %r8d
    000021b6: 	movl	0x24(%rsp), %eax
    000021ba: 	movsbl	%sil, %esi
    000021be: 	addl	%ebp, %ecx
    000021c0: 	leal	(%r10,%rsi,2), %r12d
    000021c4: 	movsbl	%cl, %ecx
    000021c7: 	movsbl	0x216f(%rsp), %r10d
    000021d0: 	leal	(%rax,%r9,2), %eax
    000021d4: 	movl	0x44(%rsp), %r9d
    000021d9: 	leal	(%r11,%rcx,2), %r11d
    000021dd: 	addl	%eax, %eax
    000021df: 	subl	%r10d, %edx
    000021e2: 	subl	%r9d, %eax
    000021e5: 	addl	%ebp, %edx
    000021e7: 	subl	%r9d, %eax
    000021ea: 	movl	0x28(%rsp), %r9d
    000021ef: 	movsbl	%dl, %edx
    000021f2: 	addl	%r8d, %eax
    000021f5: 	movl	0x30(%rsp), %r8d
    000021fa: 	leal	(%r10,%rdx,2), %r10d
    000021fe: 	leal	(%r9,%r8,2), %r8d
    00002202: 	movl	0x48(%rsp), %r9d
    00002207: 	addl	%r8d, %r8d
    0000220a: 	subl	%r9d, %r8d
    0000220d: 	subl	%r9d, %r8d
    00002210: 	movl	0x2c(%rsp), %r9d
    00002215: 	addl	%r8d, %eax
    00002218: 	leal	(%r9,%rdi,2), %edi
    0000221c: 	addl	%edi, %edi
    0000221e: 	subl	%r13d, %edi
    00002221: 	subl	%r13d, %edi
    00002224: 	addl	%edi, %eax
    00002226: 	movl	0x34(%rsp), %edi
    0000222a: 	leal	(%rdi,%rsi,2), %esi
    0000222d: 	addl	%esi, %esi
    0000222f: 	subl	%r12d, %esi
    00002232: 	subl	%r12d, %esi
    00002235: 	addl	%eax, %esi
    00002237: 	movl	0x38(%rsp), %eax
    0000223b: 	leal	(%rax,%rcx,2), %eax
    0000223e: 	addl	%eax, %eax
    00002240: 	subl	%r11d, %eax
    00002243: 	subl	%r11d, %eax
    00002246: 	movl	0x3c(%rsp), %r11d
    0000224b: 	addl	%eax, %esi
    0000224d: 	leal	(%r11,%rdx,2), %eax
    00002251: 	addl	%eax, %eax
    00002253: 	subl	%r10d, %eax
    00002256: 	subl	%r10d, %eax
    00002259: 	addb	%al, %sil
    0000225c: 	jne	.Ltmp4808 # Offset: 8796
.Ltmp4948:
    00002262: 	addl	$0x1, 0x50(%rsp)
    00002267: 	movl	0x50(%rsp), %eax
    0000226b: 	cmpl	0x58(%rsp), %eax
    0000226f: 	jl	.Ltmp4809 # Offset: 8815
.Ltmp4806:
    00002275: 	movq	%r15, %rsi
    00002278: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000227f: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 8831
    00002284: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000228b: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00002292: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002299: 	je	.Ltmp4810 # Offset: 8857
.Ltmp4983:
    0000229f: 	movq	-0x20(%rax), %rbp
    000022a3: 	callq	clock@PLT # Offset: 8867
    000022a8: 	pxor	%xmm0, %xmm0
    000022ac: 	movq	%rax, end_time(%rip)
    000022b3: 	movq	%rbp, %rdi
    000022b6: 	subq	start_time(%rip), %rax
    000022bd: 	cvtsi2sd	%rax, %xmm0
    000022c2: 	divsd	DATAat0x4d640(%rip), %xmm0
    000022ca: 	callq	_Z13record_resultdPKc # Offset: 8906
    000022cf: 	movq	0x210(%rsp), %rdi
    000022d7: 	cmpq	(%rsp), %rdi
    000022db: 	je	.Ltmp4811 # Offset: 8923
    000022dd: 	movq	0x220(%rsp), %rax
    000022e5: 	leaq	0x1(%rax), %rsi
    000022e9: 	callq	_ZdlPvm@PLT # Offset: 8937
.Ltmp4811:
    000022ee: 	movq	0x8(%rsp), %rsi
    000022f3: 	leaq	DATAat0x4d33e(%rip), %rdx
    000022fa: 	movq	%r15, %rdi
    000022fd: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8957
    00002302: 	callq	clock@PLT # Offset: 8962
    00002307: 	movl	iterations(%rip), %r13d
    0000230e: 	xorl	%ebp, %ebp
    00002310: 	leaq	0x2160(%rsp), %rbx
    00002318: 	movq	%rax, start_time(%rip)
    0000231f: 	leaq	DATAat0x4d004(%rip), %r12
    00002326: 	testl	%r13d, %r13d
    00002329: 	jle	.Ltmp4812 # Offset: 9001
    0000232f: 	nop # Size: 1
.Ltmp4815:
    00002330: 	movzbl	0x230(%rsp), %r10d
    00002339: 	movq	%r14, %rax
    0000233c: 	pxor	%xmm1, %xmm1
    00002340: 	subb	0x231(%rsp), %r10b
    00002348: 	addl	%r10d, %r10d
    0000234b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4813:
    00002350: 	movdqa	(%rax), %xmm0
    00002354: 	movdqu	0x1(%rax), %xmm7
    00002359: 	addq	$0x10, %rax
    0000235d: 	psubb	%xmm7, %xmm0
    00002361: 	paddb	%xmm0, %xmm0
    00002365: 	paddb	%xmm0, %xmm1
    00002369: 	cmpq	%rbx, %rax
    0000236c: 	jne	.Ltmp4813 # Offset: 9068
    0000236e: 	movdqa	%xmm1, %xmm0
    00002372: 	movzbl	0x216a(%rsp), %edi
    0000237a: 	movzbl	0x2169(%rsp), %r8d
    00002383: 	psrldq	$0x8, %xmm0
    00002388: 	movzbl	0x216b(%rsp), %esi
    00002390: 	movzbl	0x2168(%rsp), %r9d
    00002399: 	paddb	%xmm0, %xmm1
    0000239d: 	pxor	%xmm0, %xmm0
    000023a1: 	movzbl	0x216c(%rsp), %ecx
    000023a9: 	movzbl	0x216d(%rsp), %edx
    000023b1: 	psadbw	%xmm0, %xmm1
    000023b5: 	subl	%r8d, %r9d
    000023b8: 	subl	%edi, %r8d
    000023bb: 	subl	%esi, %edi
    000023bd: 	movq	0x2160(%rsp), %xmm0
    000023c6: 	movd	%xmm1, %eax
    000023ca: 	subl	%ecx, %esi
    000023cc: 	movq	0x2161(%rsp), %xmm1
    000023d5: 	addl	%eax, %r10d
    000023d8: 	subl	%edx, %ecx
    000023da: 	psubb	%xmm1, %xmm0
    000023de: 	pxor	%xmm1, %xmm1
    000023e2: 	paddb	%xmm0, %xmm0
    000023e6: 	movdqa	%xmm0, %xmm6
    000023ea: 	psadbw	%xmm1, %xmm6
    000023ee: 	movq	%xmm6, 0xd0(%rsp)
    000023f7: 	movq	%xmm6, %rax
    000023fc: 	movl	%eax, %r11d
    000023ff: 	movzbl	0x216e(%rsp), %eax
    00002407: 	addl	%r10d, %r11d
    0000240a: 	leal	(%r11,%r9,2), %r9d
    0000240e: 	subl	%eax, %edx
    00002410: 	subb	0x216f(%rsp), %al
    00002417: 	leal	(%r9,%r8,2), %r8d
    0000241b: 	leal	(%r8,%rdi,2), %edi
    0000241f: 	leal	(%rdi,%rsi,2), %esi
    00002422: 	leal	(%rsi,%rcx,2), %ecx
    00002425: 	leal	(%rcx,%rdx,2), %edx
    00002428: 	leal	(%rdx,%rax,2), %eax
    0000242b: 	testb	%al, %al
    0000242d: 	jne	.Ltmp4814 # Offset: 9261
.Ltmp4947:
    00002433: 	addl	$0x1, %ebp
    00002436: 	cmpl	%r13d, %ebp
    00002439: 	jl	.Ltmp4815 # Offset: 9273
.Ltmp4812:
    0000243f: 	movq	%r15, %rsi
    00002442: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002449: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 9289
    0000244e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002455: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000245c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002463: 	je	.Ltmp4816 # Offset: 9315
.Ltmp4982:
    00002469: 	movq	-0x20(%rax), %rbp
    0000246d: 	callq	clock@PLT # Offset: 9325
    00002472: 	pxor	%xmm0, %xmm0
    00002476: 	movq	%rax, end_time(%rip)
    0000247d: 	movq	%rbp, %rdi
    00002480: 	subq	start_time(%rip), %rax
    00002487: 	cvtsi2sd	%rax, %xmm0
    0000248c: 	divsd	DATAat0x4d640(%rip), %xmm0
    00002494: 	callq	_Z13record_resultdPKc # Offset: 9364
    00002499: 	movq	0x210(%rsp), %rdi
    000024a1: 	cmpq	(%rsp), %rdi
    000024a5: 	je	.Ltmp4817 # Offset: 9381
    000024a7: 	movq	0x220(%rsp), %rax
    000024af: 	leaq	0x1(%rax), %rsi
    000024b3: 	callq	_ZdlPvm@PLT # Offset: 9395
.Ltmp4817:
    000024b8: 	movq	0x8(%rsp), %rsi
    000024bd: 	leaq	DATAat0x4d357(%rip), %rdx
    000024c4: 	movq	%r15, %rdi
    000024c7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9415
    000024cc: 	movl	0x4c(%rsp), %esi
    000024d0: 	movq	%r15, %rdx
    000024d3: 	movq	%r14, %rdi
    000024d6: 	callq	"_Z9test_CSE2Ia14custom_cse_mulIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 9430
    000024db: 	movq	0x210(%rsp), %rdi
    000024e3: 	cmpq	(%rsp), %rdi
    000024e7: 	je	.Ltmp4818 # Offset: 9447
    000024e9: 	movq	0x220(%rsp), %rax
    000024f1: 	leaq	0x1(%rax), %rsi
    000024f5: 	callq	_ZdlPvm@PLT # Offset: 9461
.Ltmp4818:
    000024fa: 	movq	0x8(%rsp), %rsi
    000024ff: 	leaq	DATAat0x4d367(%rip), %rdx
    00002506: 	movq	%r15, %rdi
    00002509: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9481
    0000250e: 	callq	clock@PLT # Offset: 9486
    00002513: 	movl	iterations(%rip), %r13d
    0000251a: 	xorl	%ebp, %ebp
    0000251c: 	leaq	0x2160(%rsp), %rbx
    00002524: 	movq	%rax, start_time(%rip)
    0000252b: 	leaq	DATAat0x4d004(%rip), %r12
    00002532: 	testl	%r13d, %r13d
    00002535: 	jle	.Ltmp4819 # Offset: 9525
    0000253b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4822:
    00002540: 	movzbl	0x230(%rsp), %r10d
    00002549: 	movq	%r14, %rax
    0000254c: 	pxor	%xmm1, %xmm1
    00002550: 	subb	0x231(%rsp), %r10b
    00002558: 	addl	%r10d, %r10d
    0000255b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4820:
    00002560: 	movdqa	(%rax), %xmm0
    00002564: 	movdqu	0x1(%rax), %xmm4
    00002569: 	addq	$0x10, %rax
    0000256d: 	psubb	%xmm4, %xmm0
    00002571: 	paddb	%xmm0, %xmm0
    00002575: 	paddb	%xmm0, %xmm1
    00002579: 	cmpq	%rbx, %rax
    0000257c: 	jne	.Ltmp4820 # Offset: 9596
    0000257e: 	movdqa	%xmm1, %xmm0
    00002582: 	movzbl	0x216a(%rsp), %edi
    0000258a: 	movzbl	0x2169(%rsp), %r8d
    00002593: 	psrldq	$0x8, %xmm0
    00002598: 	movzbl	0x216b(%rsp), %esi
    000025a0: 	movzbl	0x2168(%rsp), %r9d
    000025a9: 	paddb	%xmm0, %xmm1
    000025ad: 	pxor	%xmm0, %xmm0
    000025b1: 	movzbl	0x216c(%rsp), %ecx
    000025b9: 	movzbl	0x216d(%rsp), %edx
    000025c1: 	psadbw	%xmm0, %xmm1
    000025c5: 	subl	%r8d, %r9d
    000025c8: 	subl	%edi, %r8d
    000025cb: 	subl	%esi, %edi
    000025cd: 	movq	0x2160(%rsp), %xmm0
    000025d6: 	movd	%xmm1, %eax
    000025da: 	subl	%ecx, %esi
    000025dc: 	movq	0x2161(%rsp), %xmm1
    000025e5: 	addl	%eax, %r10d
    000025e8: 	subl	%edx, %ecx
    000025ea: 	psubb	%xmm1, %xmm0
    000025ee: 	pxor	%xmm1, %xmm1
    000025f2: 	paddb	%xmm0, %xmm0
    000025f6: 	movdqa	%xmm0, %xmm3
    000025fa: 	psadbw	%xmm1, %xmm3
    000025fe: 	movq	%xmm3, 0xc8(%rsp)
    00002607: 	movq	%xmm3, %rax
    0000260c: 	movl	%eax, %r11d
    0000260f: 	movzbl	0x216e(%rsp), %eax
    00002617: 	addl	%r10d, %r11d
    0000261a: 	leal	(%r11,%r9,2), %r9d
    0000261e: 	subl	%eax, %edx
    00002620: 	subb	0x216f(%rsp), %al
    00002627: 	leal	(%r9,%r8,2), %r8d
    0000262b: 	leal	(%r8,%rdi,2), %edi
    0000262f: 	leal	(%rdi,%rsi,2), %esi
    00002632: 	leal	(%rsi,%rcx,2), %ecx
    00002635: 	leal	(%rcx,%rdx,2), %edx
    00002638: 	leal	(%rdx,%rax,2), %eax
    0000263b: 	testb	%al, %al
    0000263d: 	jne	.Ltmp4821 # Offset: 9789
.Ltmp4946:
    00002643: 	addl	$0x1, %ebp
    00002646: 	cmpl	%r13d, %ebp
    00002649: 	jl	.Ltmp4822 # Offset: 9801
.Ltmp4819:
    0000264f: 	movq	%r15, %rsi
    00002652: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002659: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 9817
    0000265e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002665: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000266c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002673: 	je	.Ltmp4823 # Offset: 9843
.Ltmp4981:
    00002679: 	movq	-0x20(%rax), %rbp
    0000267d: 	callq	clock@PLT # Offset: 9853
    00002682: 	pxor	%xmm0, %xmm0
    00002686: 	movq	%rax, end_time(%rip)
    0000268d: 	movq	%rbp, %rdi
    00002690: 	subq	start_time(%rip), %rax
    00002697: 	cvtsi2sd	%rax, %xmm0
    0000269c: 	divsd	DATAat0x4d640(%rip), %xmm0
    000026a4: 	callq	_Z13record_resultdPKc # Offset: 9892
    000026a9: 	movq	0x210(%rsp), %rdi
    000026b1: 	cmpq	(%rsp), %rdi
    000026b5: 	je	.Ltmp4824 # Offset: 9909
    000026b7: 	movq	0x220(%rsp), %rax
    000026bf: 	leaq	0x1(%rax), %rsi
    000026c3: 	callq	_ZdlPvm@PLT # Offset: 9923
.Ltmp4824:
    000026c8: 	movq	0x8(%rsp), %rsi
    000026cd: 	leaq	DATAat0x4d37e(%rip), %rdx
    000026d4: 	movq	%r15, %rdi
    000026d7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9943
    000026dc: 	callq	clock@PLT # Offset: 9948
    000026e1: 	movl	iterations(%rip), %r9d
    000026e8: 	movq	%rax, start_time(%rip)
    000026ef: 	testl	%r9d, %r9d
    000026f2: 	jle	.Ltmp4825 # Offset: 9970
    000026f8: 	movzbl	0x5c(%rsp), %ebp
    000026fd: 	xorl	%r13d, %r13d
    00002700: 	leaq	0x231(%rsp), %r12
    00002708: 	leaq	0x2170(%rsp), %rbx
.Ltmp4828:
    00002710: 	movsbl	0x230(%rsp), %esi
    00002718: 	movsbl	0x231(%rsp), %edi
    00002720: 	movl	%esi, %eax
    00002722: 	movl	%esi, %ecx
    00002724: 	cltd
    00002725: 	subl	%edi, %ecx
    00002727: 	idivl	%edi
    00002729: 	addl	%ebp, %eax
    0000272b: 	movsbl	%al, %eax
    0000272e: 	leal	(%rsi,%rax,2), %edx
    00002731: 	leal	(%rdi,%rax,2), %eax
    00002734: 	movq	%r12, %rdi
    00002737: 	addl	%edx, %ecx
    00002739: 	subl	%eax, %ecx
    0000273b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4826:
    00002740: 	movl	%esi, %r8d
    00002743: 	movsbl	(%rdi), %esi
    00002746: 	addq	$0x1, %rdi
    0000274a: 	movl	%r8d, %eax
    0000274d: 	cltd
    0000274e: 	idivl	%esi
    00002750: 	addl	%ebp, %eax
    00002752: 	movsbl	%al, %eax
    00002755: 	leal	(%rsi,%rax,2), %edx
    00002758: 	leal	(%r8,%rax,2), %eax
    0000275c: 	leal	(%rcx,%rax,2), %eax
    0000275f: 	subl	%edx, %eax
    00002761: 	subl	%edx, %eax
    00002763: 	movl	%eax, %ecx
    00002765: 	cmpq	%rbx, %rdi
    00002768: 	jne	.Ltmp4826 # Offset: 10088
    0000276a: 	testb	%al, %al
    0000276c: 	jne	.Ltmp4827 # Offset: 10092
.Ltmp4945:
    00002772: 	addl	$0x1, %r13d
    00002776: 	cmpl	%r9d, %r13d
    00002779: 	jl	.Ltmp4828 # Offset: 10105
.Ltmp4825:
    0000277b: 	movq	%r15, %rsi
    0000277e: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002785: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 10117
    0000278a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002791: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00002798: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000279f: 	je	.Ltmp4829 # Offset: 10143
.Ltmp4980:
    000027a5: 	movq	-0x20(%rax), %rbp
    000027a9: 	callq	clock@PLT # Offset: 10153
    000027ae: 	pxor	%xmm0, %xmm0
    000027b2: 	movq	%rax, end_time(%rip)
    000027b9: 	movq	%rbp, %rdi
    000027bc: 	subq	start_time(%rip), %rax
    000027c3: 	cvtsi2sd	%rax, %xmm0
    000027c8: 	divsd	DATAat0x4d640(%rip), %xmm0
    000027d0: 	callq	_Z13record_resultdPKc # Offset: 10192
    000027d5: 	movq	0x210(%rsp), %rdi
    000027dd: 	cmpq	(%rsp), %rdi
    000027e1: 	je	.Ltmp4830 # Offset: 10209
    000027e3: 	movq	0x220(%rsp), %rax
    000027eb: 	leaq	0x1(%rax), %rsi
    000027ef: 	callq	_ZdlPvm@PLT # Offset: 10223
.Ltmp4830:
    000027f4: 	movq	0x8(%rsp), %rsi
    000027f9: 	leaq	DATAat0x4d38c(%rip), %rdx
    00002800: 	movq	%r15, %rdi
    00002803: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10243
    00002808: 	callq	clock@PLT # Offset: 10248
    0000280d: 	movl	iterations(%rip), %r13d
    00002814: 	xorl	%ebp, %ebp
    00002816: 	leaq	0x2160(%rsp), %rbx
    0000281e: 	movq	%rax, start_time(%rip)
    00002825: 	leaq	DATAat0x4d004(%rip), %r12
    0000282c: 	testl	%r13d, %r13d
    0000282f: 	jle	.Ltmp4831 # Offset: 10287
    00002835: 	nopl	(%rax) # Size: 3
.Ltmp4834:
    00002838: 	movzbl	0x230(%rsp), %r10d
    00002841: 	movq	%r14, %rax
    00002844: 	pxor	%xmm1, %xmm1
    00002848: 	subb	0x231(%rsp), %r10b
    00002850: 	addl	%r10d, %r10d
    00002853: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4832:
    00002858: 	movdqa	(%rax), %xmm0
    0000285c: 	movdqu	0x1(%rax), %xmm5
    00002861: 	addq	$0x10, %rax
    00002865: 	psubb	%xmm5, %xmm0
    00002869: 	paddb	%xmm0, %xmm0
    0000286d: 	paddb	%xmm0, %xmm1
    00002871: 	cmpq	%rax, %rbx
    00002874: 	jne	.Ltmp4832 # Offset: 10356
    00002876: 	movdqa	%xmm1, %xmm0
    0000287a: 	movzbl	0x216a(%rsp), %edi
    00002882: 	movzbl	0x2169(%rsp), %r8d
    0000288b: 	psrldq	$0x8, %xmm0
    00002890: 	movzbl	0x216b(%rsp), %esi
    00002898: 	movzbl	0x2168(%rsp), %r9d
    000028a1: 	paddb	%xmm0, %xmm1
    000028a5: 	pxor	%xmm0, %xmm0
    000028a9: 	movzbl	0x216c(%rsp), %ecx
    000028b1: 	movzbl	0x216d(%rsp), %edx
    000028b9: 	psadbw	%xmm0, %xmm1
    000028bd: 	subl	%r8d, %r9d
    000028c0: 	subl	%edi, %r8d
    000028c3: 	subl	%esi, %edi
    000028c5: 	movq	0x2160(%rsp), %xmm0
    000028ce: 	movd	%xmm1, %eax
    000028d2: 	subl	%ecx, %esi
    000028d4: 	movq	0x2161(%rsp), %xmm1
    000028dd: 	addl	%eax, %r10d
    000028e0: 	subl	%edx, %ecx
    000028e2: 	psubb	%xmm1, %xmm0
    000028e6: 	pxor	%xmm1, %xmm1
    000028ea: 	paddb	%xmm0, %xmm0
    000028ee: 	movdqa	%xmm0, %xmm4
    000028f2: 	psadbw	%xmm1, %xmm4
    000028f6: 	movq	%xmm4, 0xc0(%rsp)
    000028ff: 	movq	%xmm4, %rax
    00002904: 	movl	%eax, %r11d
    00002907: 	movzbl	0x216e(%rsp), %eax
    0000290f: 	addl	%r10d, %r11d
    00002912: 	leal	(%r11,%r9,2), %r9d
    00002916: 	subl	%eax, %edx
    00002918: 	subb	0x216f(%rsp), %al
    0000291f: 	leal	(%r9,%r8,2), %r8d
    00002923: 	leal	(%r8,%rdi,2), %edi
    00002927: 	leal	(%rdi,%rsi,2), %esi
    0000292a: 	leal	(%rsi,%rcx,2), %ecx
    0000292d: 	leal	(%rcx,%rdx,2), %edx
    00002930: 	leal	(%rdx,%rax,2), %eax
    00002933: 	testb	%al, %al
    00002935: 	jne	.Ltmp4833 # Offset: 10549
.Ltmp4944:
    0000293b: 	addl	$0x1, %ebp
    0000293e: 	cmpl	%r13d, %ebp
    00002941: 	jl	.Ltmp4834 # Offset: 10561
.Ltmp4831:
    00002947: 	movq	%r15, %rsi
    0000294a: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002951: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 10577
    00002956: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000295d: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00002964: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000296b: 	je	.Ltmp4835 # Offset: 10603
.Ltmp4979:
    00002971: 	movq	-0x20(%rax), %rbp
    00002975: 	callq	clock@PLT # Offset: 10613
    0000297a: 	pxor	%xmm0, %xmm0
    0000297e: 	movq	%rax, end_time(%rip)
    00002985: 	movq	%rbp, %rdi
    00002988: 	subq	start_time(%rip), %rax
    0000298f: 	cvtsi2sd	%rax, %xmm0
    00002994: 	divsd	DATAat0x4d640(%rip), %xmm0
    0000299c: 	callq	_Z13record_resultdPKc # Offset: 10652
    000029a1: 	movq	0x210(%rsp), %rdi
    000029a9: 	cmpq	(%rsp), %rdi
    000029ad: 	je	.Ltmp4836 # Offset: 10669
    000029af: 	movq	0x220(%rsp), %rax
    000029b7: 	leaq	0x1(%rax), %rsi
    000029bb: 	callq	_ZdlPvm@PLT # Offset: 10683
.Ltmp4836:
    000029c0: 	movq	0x8(%rsp), %rsi
    000029c5: 	leaq	DATAat0x4d3a0(%rip), %rdx
    000029cc: 	movq	%r15, %rdi
    000029cf: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10703
    000029d4: 	movl	0x4c(%rsp), %esi
    000029d8: 	movq	%r15, %rdx
    000029db: 	movq	%r14, %rdi
    000029de: 	callq	"_Z9test_CSE2Ia14custom_cse_mixIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 10718
    000029e3: 	movq	0x210(%rsp), %rdi
    000029eb: 	cmpq	(%rsp), %rdi
    000029ef: 	je	.Ltmp4837 # Offset: 10735
    000029f1: 	movq	0x220(%rsp), %rax
    000029f9: 	leaq	0x1(%rax), %rsi
    000029fd: 	callq	_ZdlPvm@PLT # Offset: 10749
.Ltmp4837:
    00002a02: 	movq	0x8(%rsp), %rbx
    00002a07: 	leaq	0x1b0(%rsp), %rdi
    00002a0f: 	leaq	DATAat0x4d3ab(%rip), %rdx
    00002a16: 	movq	%rbx, %rsi
    00002a19: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10777
    00002a1e: 	movl	iterations(%rip), %edx
    00002a24: 	xorl	%r8d, %r8d
    00002a27: 	xorl	%ecx, %ecx
    00002a29: 	movl	$0x1f40, %esi
    00002a2e: 	movq	0x1b0(%rsp), %rdi
    00002a36: 	callq	_Z9summarizePKciiii # Offset: 10806
    00002a3b: 	leaq	DATAat0x4d3b2(%rip), %rdx
    00002a42: 	movq	%rbx, %rsi
    00002a45: 	movq	%r15, %rdi
    00002a48: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10824
    00002a4d: 	callq	clock@PLT # Offset: 10829
    00002a52: 	movl	iterations(%rip), %r13d
    00002a59: 	xorl	%ebp, %ebp
    00002a5b: 	leaq	0x2160(%rsp), %rbx
    00002a63: 	movq	%rax, start_time(%rip)
    00002a6a: 	leaq	DATAat0x4d004(%rip), %r12
    00002a71: 	testl	%r13d, %r13d
    00002a74: 	jle	.Ltmp4838 # Offset: 10868
    00002a7a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4841:
    00002a80: 	movzbl	0x230(%rsp), %r10d
    00002a89: 	movq	%r14, %rax
    00002a8c: 	pxor	%xmm1, %xmm1
    00002a90: 	subb	0x231(%rsp), %r10b
    00002a98: 	shll	$0x2, %r10d
    00002a9c: 	nopl	(%rax) # Size: 4
.Ltmp4839:
    00002aa0: 	movdqa	(%rax), %xmm0
    00002aa4: 	movdqu	0x1(%rax), %xmm6
    00002aa9: 	addq	$0x10, %rax
    00002aad: 	psubb	%xmm6, %xmm0
    00002ab1: 	paddb	%xmm0, %xmm0
    00002ab5: 	paddb	%xmm0, %xmm0
    00002ab9: 	paddb	%xmm0, %xmm1
    00002abd: 	cmpq	%rbx, %rax
    00002ac0: 	jne	.Ltmp4839 # Offset: 10944
    00002ac2: 	movdqa	%xmm1, %xmm0
    00002ac6: 	movzbl	0x216a(%rsp), %edi
    00002ace: 	movzbl	0x2169(%rsp), %r8d
    00002ad7: 	psrldq	$0x8, %xmm0
    00002adc: 	movzbl	0x216b(%rsp), %esi
    00002ae4: 	movzbl	0x2168(%rsp), %r9d
    00002aed: 	paddb	%xmm0, %xmm1
    00002af1: 	pxor	%xmm0, %xmm0
    00002af5: 	movzbl	0x216c(%rsp), %ecx
    00002afd: 	movzbl	0x216d(%rsp), %edx
    00002b05: 	psadbw	%xmm0, %xmm1
    00002b09: 	subl	%r8d, %r9d
    00002b0c: 	subl	%edi, %r8d
    00002b0f: 	subl	%esi, %edi
    00002b11: 	movq	0x2160(%rsp), %xmm0
    00002b1a: 	movd	%xmm1, %eax
    00002b1e: 	subl	%ecx, %esi
    00002b20: 	movq	0x2161(%rsp), %xmm1
    00002b29: 	addl	%eax, %r10d
    00002b2c: 	subl	%edx, %ecx
    00002b2e: 	psubb	%xmm1, %xmm0
    00002b32: 	pxor	%xmm1, %xmm1
    00002b36: 	paddb	%xmm0, %xmm0
    00002b3a: 	paddb	%xmm0, %xmm0
    00002b3e: 	movdqa	%xmm0, %xmm5
    00002b42: 	psadbw	%xmm1, %xmm5
    00002b46: 	movq	%xmm5, 0xb8(%rsp)
    00002b4f: 	movq	%xmm5, %rax
    00002b54: 	movl	%eax, %r11d
    00002b57: 	movzbl	0x216e(%rsp), %eax
    00002b5f: 	addl	%r10d, %r11d
    00002b62: 	leal	(%r11,%r9,4), %r9d
    00002b66: 	subl	%eax, %edx
    00002b68: 	subb	0x216f(%rsp), %al
    00002b6f: 	leal	(%r9,%r8,4), %r8d
    00002b73: 	leal	(%r8,%rdi,4), %edi
    00002b77: 	leal	(%rdi,%rsi,4), %esi
    00002b7a: 	leal	(%rsi,%rcx,4), %ecx
    00002b7d: 	leal	(%rcx,%rdx,4), %edx
    00002b80: 	leal	(%rdx,%rax,4), %eax
    00002b83: 	testb	%al, %al
    00002b85: 	jne	.Ltmp4840 # Offset: 11141
.Ltmp4943:
    00002b8b: 	addl	$0x1, %ebp
    00002b8e: 	cmpl	%r13d, %ebp
    00002b91: 	jl	.Ltmp4841 # Offset: 11153
.Ltmp4838:
    00002b97: 	movq	%r15, %rsi
    00002b9a: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002ba1: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 11169
    00002ba6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002bad: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00002bb4: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002bbb: 	je	.Ltmp4842 # Offset: 11195
.Ltmp4978:
    00002bc1: 	movq	-0x20(%rax), %rbp
    00002bc5: 	callq	clock@PLT # Offset: 11205
    00002bca: 	pxor	%xmm0, %xmm0
    00002bce: 	movq	%rax, end_time(%rip)
    00002bd5: 	movq	%rbp, %rdi
    00002bd8: 	subq	start_time(%rip), %rax
    00002bdf: 	cvtsi2sd	%rax, %xmm0
    00002be4: 	divsd	DATAat0x4d640(%rip), %xmm0
    00002bec: 	callq	_Z13record_resultdPKc # Offset: 11244
    00002bf1: 	movq	0x210(%rsp), %rdi
    00002bf9: 	cmpq	(%rsp), %rdi
    00002bfd: 	je	.Ltmp4843 # Offset: 11261
    00002bff: 	movq	0x220(%rsp), %rax
    00002c07: 	leaq	0x1(%rax), %rsi
    00002c0b: 	callq	_ZdlPvm@PLT # Offset: 11275
.Ltmp4843:
    00002c10: 	movq	0x8(%rsp), %rsi
    00002c15: 	leaq	DATAat0x4d3c1(%rip), %rdx
    00002c1c: 	movq	%r15, %rdi
    00002c1f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11295
    00002c24: 	callq	clock@PLT # Offset: 11300
    00002c29: 	movl	iterations(%rip), %r13d
    00002c30: 	xorl	%ebp, %ebp
    00002c32: 	leaq	0x2160(%rsp), %rbx
    00002c3a: 	movq	%rax, start_time(%rip)
    00002c41: 	leaq	DATAat0x4d004(%rip), %r12
    00002c48: 	testl	%r13d, %r13d
    00002c4b: 	jle	.Ltmp4844 # Offset: 11339
    00002c51: 	nopl	(%rax) # Size: 7
.Ltmp4847:
    00002c58: 	movzbl	0x230(%rsp), %r10d
    00002c61: 	movq	%r14, %rax
    00002c64: 	pxor	%xmm1, %xmm1
    00002c68: 	subb	0x231(%rsp), %r10b
    00002c70: 	shll	$0x2, %r10d
    00002c74: 	nopl	(%rax) # Size: 4
.Ltmp4845:
    00002c78: 	movdqa	(%rax), %xmm0
    00002c7c: 	movdqu	0x1(%rax), %xmm7
    00002c81: 	addq	$0x10, %rax
    00002c85: 	psubb	%xmm7, %xmm0
    00002c89: 	paddb	%xmm0, %xmm0
    00002c8d: 	paddb	%xmm0, %xmm0
    00002c91: 	paddb	%xmm0, %xmm1
    00002c95: 	cmpq	%rbx, %rax
    00002c98: 	jne	.Ltmp4845 # Offset: 11416
    00002c9a: 	movdqa	%xmm1, %xmm0
    00002c9e: 	movzbl	0x216a(%rsp), %edi
    00002ca6: 	movzbl	0x2169(%rsp), %r8d
    00002caf: 	psrldq	$0x8, %xmm0
    00002cb4: 	movzbl	0x216b(%rsp), %esi
    00002cbc: 	movzbl	0x2168(%rsp), %r9d
    00002cc5: 	paddb	%xmm0, %xmm1
    00002cc9: 	pxor	%xmm0, %xmm0
    00002ccd: 	movzbl	0x216c(%rsp), %ecx
    00002cd5: 	movzbl	0x216d(%rsp), %edx
    00002cdd: 	psadbw	%xmm0, %xmm1
    00002ce1: 	subl	%r8d, %r9d
    00002ce4: 	subl	%edi, %r8d
    00002ce7: 	subl	%esi, %edi
    00002ce9: 	movq	0x2160(%rsp), %xmm0
    00002cf2: 	movd	%xmm1, %eax
    00002cf6: 	subl	%ecx, %esi
    00002cf8: 	movq	0x2161(%rsp), %xmm1
    00002d01: 	addl	%eax, %r10d
    00002d04: 	subl	%edx, %ecx
    00002d06: 	psubb	%xmm1, %xmm0
    00002d0a: 	pxor	%xmm1, %xmm1
    00002d0e: 	paddb	%xmm0, %xmm0
    00002d12: 	paddb	%xmm0, %xmm0
    00002d16: 	movdqa	%xmm0, %xmm7
    00002d1a: 	psadbw	%xmm1, %xmm7
    00002d1e: 	movq	%xmm7, 0xb0(%rsp)
    00002d27: 	movq	%xmm7, %rax
    00002d2c: 	movl	%eax, %r11d
    00002d2f: 	movzbl	0x216e(%rsp), %eax
    00002d37: 	addl	%r10d, %r11d
    00002d3a: 	leal	(%r11,%r9,4), %r9d
    00002d3e: 	subl	%eax, %edx
    00002d40: 	subb	0x216f(%rsp), %al
    00002d47: 	leal	(%r9,%r8,4), %r8d
    00002d4b: 	leal	(%r8,%rdi,4), %edi
    00002d4f: 	leal	(%rdi,%rsi,4), %esi
    00002d52: 	leal	(%rsi,%rcx,4), %ecx
    00002d55: 	leal	(%rcx,%rdx,4), %edx
    00002d58: 	leal	(%rdx,%rax,4), %eax
    00002d5b: 	testb	%al, %al
    00002d5d: 	jne	.Ltmp4846 # Offset: 11613
.Ltmp4942:
    00002d63: 	addl	$0x1, %ebp
    00002d66: 	cmpl	%r13d, %ebp
    00002d69: 	jl	.Ltmp4847 # Offset: 11625
.Ltmp4844:
    00002d6f: 	movq	%r15, %rsi
    00002d72: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002d79: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 11641
    00002d7e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002d85: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00002d8c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002d93: 	je	.Ltmp4848 # Offset: 11667
.Ltmp4977:
    00002d99: 	movq	-0x20(%rax), %rbp
    00002d9d: 	callq	clock@PLT # Offset: 11677
    00002da2: 	pxor	%xmm0, %xmm0
    00002da6: 	movq	%rax, end_time(%rip)
    00002dad: 	movq	%rbp, %rdi
    00002db0: 	subq	start_time(%rip), %rax
    00002db7: 	cvtsi2sd	%rax, %xmm0
    00002dbc: 	divsd	DATAat0x4d640(%rip), %xmm0
    00002dc4: 	callq	_Z13record_resultdPKc # Offset: 11716
    00002dc9: 	movq	0x210(%rsp), %rdi
    00002dd1: 	cmpq	(%rsp), %rdi
    00002dd5: 	je	.Ltmp4849 # Offset: 11733
    00002dd7: 	movq	0x220(%rsp), %rax
    00002ddf: 	leaq	0x1(%rax), %rsi
    00002de3: 	callq	_ZdlPvm@PLT # Offset: 11747
.Ltmp4849:
    00002de8: 	movq	0x8(%rsp), %rsi
    00002ded: 	leaq	DATAat0x4d3d5(%rip), %rdx
    00002df4: 	movq	%r15, %rdi
    00002df7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11767
    00002dfc: 	movl	0x4c(%rsp), %esi
    00002e00: 	movq	%r15, %rdx
    00002e03: 	movq	%r14, %rdi
    00002e06: 	callq	"_Z20test_CSE4_add_inlineIa14custom_cse_addIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 11782
    00002e0b: 	movq	0x210(%rsp), %rdi
    00002e13: 	cmpq	(%rsp), %rdi
    00002e17: 	je	.Ltmp4850 # Offset: 11799
    00002e19: 	movq	0x220(%rsp), %rax
    00002e21: 	leaq	0x1(%rax), %rsi
    00002e25: 	callq	_ZdlPvm@PLT # Offset: 11813
.Ltmp4850:
    00002e2a: 	movq	0x8(%rsp), %rsi
    00002e2f: 	leaq	DATAat0x4d3e7(%rip), %rdx
    00002e36: 	movq	%r15, %rdi
    00002e39: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11833
    00002e3e: 	movl	0x4c(%rsp), %esi
    00002e42: 	movq	%r15, %rdx
    00002e45: 	movq	%r14, %rdi
    00002e48: 	callq	"_Z28test_CSE4_add_inline_flippedIa14custom_cse_addIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 11848
    00002e4d: 	movq	0x210(%rsp), %rdi
    00002e55: 	cmpq	(%rsp), %rdi
    00002e59: 	je	.Ltmp4851 # Offset: 11865
    00002e5b: 	movq	0x220(%rsp), %rax
    00002e63: 	leaq	0x1(%rax), %rsi
    00002e67: 	callq	_ZdlPvm@PLT # Offset: 11879
.Ltmp4851:
    00002e6c: 	movq	0x8(%rsp), %rsi
    00002e71: 	leaq	DATAat0x4d401(%rip), %rdx
    00002e78: 	movq	%r15, %rdi
    00002e7b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11899
    00002e80: 	movl	0x4c(%rsp), %esi
    00002e84: 	movq	%r15, %rdx
    00002e87: 	movq	%r14, %rdi
    00002e8a: 	callq	"_Z9test_CSE4Ia14custom_cse_addIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 11914
    00002e8f: 	movq	0x210(%rsp), %rdi
    00002e97: 	cmpq	(%rsp), %rdi
    00002e9b: 	je	.Ltmp4852 # Offset: 11931
    00002e9d: 	movq	0x220(%rsp), %rax
    00002ea5: 	leaq	0x1(%rax), %rsi
    00002ea9: 	callq	_ZdlPvm@PLT # Offset: 11945
.Ltmp4852:
    00002eae: 	movq	0x8(%rsp), %rsi
    00002eb3: 	leaq	DATAat0x4d40c(%rip), %rdx
    00002eba: 	movq	%r15, %rdi
    00002ebd: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11965
    00002ec2: 	callq	clock@PLT # Offset: 11970
    00002ec7: 	movl	iterations(%rip), %r13d
    00002ece: 	xorl	%ebp, %ebp
    00002ed0: 	leaq	0x2160(%rsp), %rbx
    00002ed8: 	movq	%rax, start_time(%rip)
    00002edf: 	leaq	DATAat0x4d004(%rip), %r12
    00002ee6: 	testl	%r13d, %r13d
    00002ee9: 	jle	.Ltmp4853 # Offset: 12009
    00002eef: 	nop # Size: 1
.Ltmp4856:
    00002ef0: 	movzbl	0x230(%rsp), %r10d
    00002ef9: 	movq	%r14, %rax
    00002efc: 	pxor	%xmm1, %xmm1
    00002f00: 	subb	0x231(%rsp), %r10b
    00002f08: 	shll	$0x2, %r10d
    00002f0c: 	nopl	(%rax) # Size: 4
.Ltmp4854:
    00002f10: 	movdqa	(%rax), %xmm0
    00002f14: 	movdqu	0x1(%rax), %xmm4
    00002f19: 	addq	$0x10, %rax
    00002f1d: 	psubb	%xmm4, %xmm0
    00002f21: 	paddb	%xmm0, %xmm0
    00002f25: 	paddb	%xmm0, %xmm0
    00002f29: 	paddb	%xmm0, %xmm1
    00002f2d: 	cmpq	%rbx, %rax
    00002f30: 	jne	.Ltmp4854 # Offset: 12080
    00002f32: 	movdqa	%xmm1, %xmm0
    00002f36: 	movzbl	0x216a(%rsp), %edi
    00002f3e: 	movzbl	0x2169(%rsp), %r8d
    00002f47: 	psrldq	$0x8, %xmm0
    00002f4c: 	movzbl	0x216b(%rsp), %esi
    00002f54: 	movzbl	0x2168(%rsp), %r9d
    00002f5d: 	paddb	%xmm0, %xmm1
    00002f61: 	pxor	%xmm0, %xmm0
    00002f65: 	movzbl	0x216c(%rsp), %ecx
    00002f6d: 	movzbl	0x216d(%rsp), %edx
    00002f75: 	psadbw	%xmm0, %xmm1
    00002f79: 	subl	%r8d, %r9d
    00002f7c: 	subl	%edi, %r8d
    00002f7f: 	subl	%esi, %edi
    00002f81: 	movq	0x2160(%rsp), %xmm0
    00002f8a: 	movd	%xmm1, %eax
    00002f8e: 	subl	%ecx, %esi
    00002f90: 	movq	0x2161(%rsp), %xmm1
    00002f99: 	addl	%eax, %r10d
    00002f9c: 	subl	%edx, %ecx
    00002f9e: 	psubb	%xmm1, %xmm0
    00002fa2: 	pxor	%xmm1, %xmm1
    00002fa6: 	paddb	%xmm0, %xmm0
    00002faa: 	paddb	%xmm0, %xmm0
    00002fae: 	movdqa	%xmm0, %xmm6
    00002fb2: 	psadbw	%xmm1, %xmm6
    00002fb6: 	movq	%xmm6, 0xa8(%rsp)
    00002fbf: 	movq	%xmm6, %rax
    00002fc4: 	movl	%eax, %r11d
    00002fc7: 	movzbl	0x216e(%rsp), %eax
    00002fcf: 	addl	%r10d, %r11d
    00002fd2: 	leal	(%r11,%r9,4), %r9d
    00002fd6: 	subl	%eax, %edx
    00002fd8: 	subb	0x216f(%rsp), %al
    00002fdf: 	leal	(%r9,%r8,4), %r8d
    00002fe3: 	leal	(%r8,%rdi,4), %edi
    00002fe7: 	leal	(%rdi,%rsi,4), %esi
    00002fea: 	leal	(%rsi,%rcx,4), %ecx
    00002fed: 	leal	(%rcx,%rdx,4), %edx
    00002ff0: 	leal	(%rdx,%rax,4), %eax
    00002ff3: 	testb	%al, %al
    00002ff5: 	jne	.Ltmp4855 # Offset: 12277
.Ltmp4941:
    00002ffb: 	addl	$0x1, %ebp
    00002ffe: 	cmpl	%r13d, %ebp
    00003001: 	jl	.Ltmp4856 # Offset: 12289
.Ltmp4853:
    00003007: 	movq	%r15, %rsi
    0000300a: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00003011: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 12305
    00003016: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000301d: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00003024: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000302b: 	je	.Ltmp4857 # Offset: 12331
.Ltmp4976:
    00003031: 	movq	-0x20(%rax), %rbp
    00003035: 	callq	clock@PLT # Offset: 12341
    0000303a: 	pxor	%xmm0, %xmm0
    0000303e: 	movq	%rax, end_time(%rip)
    00003045: 	movq	%rbp, %rdi
    00003048: 	subq	start_time(%rip), %rax
    0000304f: 	cvtsi2sd	%rax, %xmm0
    00003054: 	divsd	DATAat0x4d640(%rip), %xmm0
    0000305c: 	callq	_Z13record_resultdPKc # Offset: 12380
    00003061: 	movq	0x210(%rsp), %rdi
    00003069: 	cmpq	(%rsp), %rdi
    0000306d: 	je	.Ltmp4858 # Offset: 12397
    0000306f: 	movq	0x220(%rsp), %rax
    00003077: 	leaq	0x1(%rax), %rsi
    0000307b: 	callq	_ZdlPvm@PLT # Offset: 12411
.Ltmp4858:
    00003080: 	movq	0x8(%rsp), %rsi
    00003085: 	leaq	DATAat0x4d425(%rip), %rdx
    0000308c: 	movq	%r15, %rdi
    0000308f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12431
    00003094: 	movl	0x4c(%rsp), %esi
    00003098: 	movq	%r15, %rdx
    0000309b: 	movq	%r14, %rdi
    0000309e: 	callq	"_Z9test_CSE4Ia14custom_cse_subIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 12446
    000030a3: 	movq	0x210(%rsp), %rdi
    000030ab: 	cmpq	(%rsp), %rdi
    000030af: 	je	.Ltmp4859 # Offset: 12463
    000030b1: 	movq	0x220(%rsp), %rax
    000030b9: 	leaq	0x1(%rax), %rsi
    000030bd: 	callq	_ZdlPvm@PLT # Offset: 12477
.Ltmp4859:
    000030c2: 	movq	0x8(%rsp), %rsi
    000030c7: 	leaq	DATAat0x4d435(%rip), %rdx
    000030ce: 	movq	%r15, %rdi
    000030d1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12497
    000030d6: 	callq	clock@PLT # Offset: 12502
    000030db: 	movl	iterations(%rip), %r13d
    000030e2: 	xorl	%ebp, %ebp
    000030e4: 	leaq	0x2160(%rsp), %rbx
    000030ec: 	movq	%rax, start_time(%rip)
    000030f3: 	leaq	DATAat0x4d004(%rip), %r12
    000030fa: 	testl	%r13d, %r13d
    000030fd: 	jle	.Ltmp4860 # Offset: 12541
    00003103: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4863:
    00003108: 	movzbl	0x230(%rsp), %r10d
    00003111: 	movq	%r14, %rax
    00003114: 	pxor	%xmm1, %xmm1
    00003118: 	subb	0x231(%rsp), %r10b
    00003120: 	shll	$0x2, %r10d
    00003124: 	nopl	(%rax) # Size: 4
.Ltmp4861:
    00003128: 	movdqa	(%rax), %xmm0
    0000312c: 	movdqu	0x1(%rax), %xmm5
    00003131: 	addq	$0x10, %rax
    00003135: 	psubb	%xmm5, %xmm0
    00003139: 	paddb	%xmm0, %xmm0
    0000313d: 	paddb	%xmm0, %xmm0
    00003141: 	paddb	%xmm0, %xmm1
    00003145: 	cmpq	%rbx, %rax
    00003148: 	jne	.Ltmp4861 # Offset: 12616
    0000314a: 	movdqa	%xmm1, %xmm0
    0000314e: 	movzbl	0x216a(%rsp), %edi
    00003156: 	movzbl	0x2169(%rsp), %r8d
    0000315f: 	psrldq	$0x8, %xmm0
    00003164: 	movzbl	0x216b(%rsp), %esi
    0000316c: 	movzbl	0x2168(%rsp), %r9d
    00003175: 	paddb	%xmm0, %xmm1
    00003179: 	pxor	%xmm0, %xmm0
    0000317d: 	movzbl	0x216c(%rsp), %ecx
    00003185: 	movzbl	0x216d(%rsp), %edx
    0000318d: 	psadbw	%xmm0, %xmm1
    00003191: 	subl	%r8d, %r9d
    00003194: 	subl	%edi, %r8d
    00003197: 	subl	%esi, %edi
    00003199: 	movq	0x2160(%rsp), %xmm0
    000031a2: 	movd	%xmm1, %eax
    000031a6: 	subl	%ecx, %esi
    000031a8: 	movq	0x2161(%rsp), %xmm1
    000031b1: 	addl	%eax, %r10d
    000031b4: 	subl	%edx, %ecx
    000031b6: 	psubb	%xmm1, %xmm0
    000031ba: 	pxor	%xmm1, %xmm1
    000031be: 	paddb	%xmm0, %xmm0
    000031c2: 	paddb	%xmm0, %xmm0
    000031c6: 	movdqa	%xmm0, %xmm3
    000031ca: 	psadbw	%xmm1, %xmm3
    000031ce: 	movq	%xmm3, 0xa0(%rsp)
    000031d7: 	movq	%xmm3, %rax
    000031dc: 	movl	%eax, %r11d
    000031df: 	movzbl	0x216e(%rsp), %eax
    000031e7: 	addl	%r10d, %r11d
    000031ea: 	leal	(%r11,%r9,4), %r9d
    000031ee: 	subl	%eax, %edx
    000031f0: 	subb	0x216f(%rsp), %al
    000031f7: 	leal	(%r9,%r8,4), %r8d
    000031fb: 	leal	(%r8,%rdi,4), %edi
    000031ff: 	leal	(%rdi,%rsi,4), %esi
    00003202: 	leal	(%rsi,%rcx,4), %ecx
    00003205: 	leal	(%rcx,%rdx,4), %edx
    00003208: 	leal	(%rdx,%rax,4), %eax
    0000320b: 	testb	%al, %al
    0000320d: 	jne	.Ltmp4862 # Offset: 12813
.Ltmp4940:
    00003213: 	addl	$0x1, %ebp
    00003216: 	cmpl	%r13d, %ebp
    00003219: 	jl	.Ltmp4863 # Offset: 12825
.Ltmp4860:
    0000321f: 	movq	%r15, %rsi
    00003222: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00003229: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 12841
    0000322e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00003235: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000323c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00003243: 	je	.Ltmp4864 # Offset: 12867
.Ltmp4975:
    00003249: 	movq	-0x20(%rax), %rbp
    0000324d: 	callq	clock@PLT # Offset: 12877
    00003252: 	pxor	%xmm0, %xmm0
    00003256: 	movq	%rax, end_time(%rip)
    0000325d: 	movq	%rbp, %rdi
    00003260: 	subq	start_time(%rip), %rax
    00003267: 	cvtsi2sd	%rax, %xmm0
    0000326c: 	divsd	DATAat0x4d640(%rip), %xmm0
    00003274: 	callq	_Z13record_resultdPKc # Offset: 12916
    00003279: 	movq	0x210(%rsp), %rdi
    00003281: 	cmpq	(%rsp), %rdi
    00003285: 	je	.Ltmp4865 # Offset: 12933
    00003287: 	movq	0x220(%rsp), %rax
    0000328f: 	leaq	0x1(%rax), %rsi
    00003293: 	callq	_ZdlPvm@PLT # Offset: 12947
.Ltmp4865:
    00003298: 	movq	0x8(%rsp), %rsi
    0000329d: 	leaq	DATAat0x4d44e(%rip), %rdx
    000032a4: 	movq	%r15, %rdi
    000032a7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12967
    000032ac: 	movl	0x4c(%rsp), %esi
    000032b0: 	movq	%r15, %rdx
    000032b3: 	movq	%r14, %rdi
    000032b6: 	callq	"_Z9test_CSE4Ia14custom_cse_mulIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 12982
    000032bb: 	movq	0x210(%rsp), %rdi
    000032c3: 	cmpq	(%rsp), %rdi
    000032c7: 	je	.Ltmp4866 # Offset: 12999
    000032c9: 	movq	0x220(%rsp), %rax
    000032d1: 	leaq	0x1(%rax), %rsi
    000032d5: 	callq	_ZdlPvm@PLT # Offset: 13013
.Ltmp4866:
    000032da: 	movq	0x8(%rsp), %rsi
    000032df: 	leaq	DATAat0x4d45e(%rip), %rdx
    000032e6: 	movq	%r15, %rdi
    000032e9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13033
    000032ee: 	callq	clock@PLT # Offset: 13038
    000032f3: 	movl	iterations(%rip), %r13d
    000032fa: 	xorl	%ebp, %ebp
    000032fc: 	leaq	0x2160(%rsp), %rbx
    00003304: 	movq	%rax, start_time(%rip)
    0000330b: 	leaq	DATAat0x4d004(%rip), %r12
    00003312: 	testl	%r13d, %r13d
    00003315: 	jle	.Ltmp4867 # Offset: 13077
    0000331b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4870:
    00003320: 	movzbl	0x230(%rsp), %r10d
    00003329: 	movq	%r14, %rax
    0000332c: 	pxor	%xmm1, %xmm1
    00003330: 	subb	0x231(%rsp), %r10b
    00003338: 	shll	$0x2, %r10d
    0000333c: 	nopl	(%rax) # Size: 4
.Ltmp4868:
    00003340: 	movdqa	(%rax), %xmm0
    00003344: 	movdqu	0x1(%rax), %xmm6
    00003349: 	addq	$0x10, %rax
    0000334d: 	psubb	%xmm6, %xmm0
    00003351: 	paddb	%xmm0, %xmm0
    00003355: 	paddb	%xmm0, %xmm0
    00003359: 	paddb	%xmm0, %xmm1
    0000335d: 	cmpq	%rax, %rbx
    00003360: 	jne	.Ltmp4868 # Offset: 13152
    00003362: 	movdqa	%xmm1, %xmm0
    00003366: 	movzbl	0x216a(%rsp), %edi
    0000336e: 	movzbl	0x2169(%rsp), %r8d
    00003377: 	psrldq	$0x8, %xmm0
    0000337c: 	movzbl	0x216b(%rsp), %esi
    00003384: 	movzbl	0x2168(%rsp), %r9d
    0000338d: 	paddb	%xmm0, %xmm1
    00003391: 	pxor	%xmm0, %xmm0
    00003395: 	movzbl	0x216c(%rsp), %ecx
    0000339d: 	movzbl	0x216d(%rsp), %edx
    000033a5: 	psadbw	%xmm0, %xmm1
    000033a9: 	subl	%r8d, %r9d
    000033ac: 	subl	%edi, %r8d
    000033af: 	subl	%esi, %edi
    000033b1: 	movq	0x2160(%rsp), %xmm0
    000033ba: 	movd	%xmm1, %eax
    000033be: 	subl	%ecx, %esi
    000033c0: 	movq	0x2161(%rsp), %xmm1
    000033c9: 	addl	%eax, %r10d
    000033cc: 	subl	%edx, %ecx
    000033ce: 	psubb	%xmm1, %xmm0
    000033d2: 	pxor	%xmm1, %xmm1
    000033d6: 	paddb	%xmm0, %xmm0
    000033da: 	paddb	%xmm0, %xmm0
    000033de: 	movdqa	%xmm0, %xmm4
    000033e2: 	psadbw	%xmm1, %xmm4
    000033e6: 	movq	%xmm4, 0x98(%rsp)
    000033ef: 	movq	%xmm4, %rax
    000033f4: 	movl	%eax, %r11d
    000033f7: 	movzbl	0x216e(%rsp), %eax
    000033ff: 	addl	%r10d, %r11d
    00003402: 	leal	(%r11,%r9,4), %r9d
    00003406: 	subl	%eax, %edx
    00003408: 	subb	0x216f(%rsp), %al
    0000340f: 	leal	(%r9,%r8,4), %r8d
    00003413: 	leal	(%r8,%rdi,4), %edi
    00003417: 	leal	(%rdi,%rsi,4), %esi
    0000341a: 	leal	(%rsi,%rcx,4), %ecx
    0000341d: 	leal	(%rcx,%rdx,4), %edx
    00003420: 	leal	(%rdx,%rax,4), %eax
    00003423: 	testb	%al, %al
    00003425: 	jne	.Ltmp4869 # Offset: 13349
.Ltmp4939:
    0000342b: 	addl	$0x1, %ebp
    0000342e: 	cmpl	%r13d, %ebp
    00003431: 	jl	.Ltmp4870 # Offset: 13361
.Ltmp4867:
    00003437: 	movq	%r15, %rsi
    0000343a: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00003441: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 13377
    00003446: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000344d: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00003454: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000345b: 	je	.Ltmp4871 # Offset: 13403
.Ltmp4974:
    00003461: 	movq	-0x20(%rax), %rbp
    00003465: 	callq	clock@PLT # Offset: 13413
    0000346a: 	pxor	%xmm0, %xmm0
    0000346e: 	movq	%rax, end_time(%rip)
    00003475: 	movq	%rbp, %rdi
    00003478: 	subq	start_time(%rip), %rax
    0000347f: 	cvtsi2sd	%rax, %xmm0
    00003484: 	divsd	DATAat0x4d640(%rip), %xmm0
    0000348c: 	callq	_Z13record_resultdPKc # Offset: 13452
    00003491: 	movq	0x210(%rsp), %rdi
    00003499: 	cmpq	(%rsp), %rdi
    0000349d: 	je	.Ltmp4872 # Offset: 13469
    0000349f: 	movq	0x220(%rsp), %rax
    000034a7: 	leaq	0x1(%rax), %rsi
    000034ab: 	callq	_ZdlPvm@PLT # Offset: 13483
.Ltmp4872:
    000034b0: 	movq	0x8(%rsp), %rsi
    000034b5: 	leaq	DATAat0x4d475(%rip), %rdx
    000034bc: 	movq	%r15, %rdi
    000034bf: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13503
    000034c4: 	movl	0x4c(%rsp), %esi
    000034c8: 	movq	%r15, %rdx
    000034cb: 	movq	%r14, %rdi
    000034ce: 	callq	"_Z9test_CSE4Ia14custom_cse_divIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 13518
    000034d3: 	movq	0x210(%rsp), %rdi
    000034db: 	cmpq	(%rsp), %rdi
    000034df: 	je	.Ltmp4873 # Offset: 13535
    000034e1: 	movq	0x220(%rsp), %rax
    000034e9: 	leaq	0x1(%rax), %rsi
    000034ed: 	callq	_ZdlPvm@PLT # Offset: 13549
.Ltmp4873:
    000034f2: 	movq	0x8(%rsp), %rsi
    000034f7: 	leaq	DATAat0x4d483(%rip), %rdx
    000034fe: 	movq	%r15, %rdi
    00003501: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13569
    00003506: 	callq	clock@PLT # Offset: 13574
    0000350b: 	movl	iterations(%rip), %r13d
    00003512: 	xorl	%ebp, %ebp
    00003514: 	leaq	0x2160(%rsp), %rbx
    0000351c: 	movq	%rax, start_time(%rip)
    00003523: 	leaq	DATAat0x4d004(%rip), %r12
    0000352a: 	testl	%r13d, %r13d
    0000352d: 	jle	.Ltmp4874 # Offset: 13613
    00003533: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4877:
    00003538: 	movzbl	0x230(%rsp), %r10d
    00003541: 	movq	%r14, %rax
    00003544: 	pxor	%xmm1, %xmm1
    00003548: 	subb	0x231(%rsp), %r10b
    00003550: 	shll	$0x2, %r10d
    00003554: 	nopl	(%rax) # Size: 4
.Ltmp4875:
    00003558: 	movdqa	(%rax), %xmm0
    0000355c: 	movdqu	0x1(%rax), %xmm7
    00003561: 	addq	$0x10, %rax
    00003565: 	psubb	%xmm7, %xmm0
    00003569: 	paddb	%xmm0, %xmm0
    0000356d: 	paddb	%xmm0, %xmm0
    00003571: 	paddb	%xmm0, %xmm1
    00003575: 	cmpq	%rbx, %rax
    00003578: 	jne	.Ltmp4875 # Offset: 13688
    0000357a: 	movdqa	%xmm1, %xmm0
    0000357e: 	movzbl	0x216a(%rsp), %edi
    00003586: 	movzbl	0x2169(%rsp), %r8d
    0000358f: 	psrldq	$0x8, %xmm0
    00003594: 	movzbl	0x216b(%rsp), %esi
    0000359c: 	movzbl	0x2168(%rsp), %r9d
    000035a5: 	paddb	%xmm0, %xmm1
    000035a9: 	pxor	%xmm0, %xmm0
    000035ad: 	movzbl	0x216c(%rsp), %ecx
    000035b5: 	movzbl	0x216d(%rsp), %edx
    000035bd: 	psadbw	%xmm0, %xmm1
    000035c1: 	subl	%r8d, %r9d
    000035c4: 	subl	%edi, %r8d
    000035c7: 	subl	%esi, %edi
    000035c9: 	movq	0x2160(%rsp), %xmm0
    000035d2: 	movd	%xmm1, %eax
    000035d6: 	subl	%ecx, %esi
    000035d8: 	movq	0x2161(%rsp), %xmm1
    000035e1: 	addl	%eax, %r10d
    000035e4: 	subl	%edx, %ecx
    000035e6: 	psubb	%xmm1, %xmm0
    000035ea: 	pxor	%xmm1, %xmm1
    000035ee: 	paddb	%xmm0, %xmm0
    000035f2: 	paddb	%xmm0, %xmm0
    000035f6: 	movdqa	%xmm0, %xmm5
    000035fa: 	psadbw	%xmm1, %xmm5
    000035fe: 	movq	%xmm5, 0x90(%rsp)
    00003607: 	movq	%xmm5, %rax
    0000360c: 	movl	%eax, %r11d
    0000360f: 	movzbl	0x216e(%rsp), %eax
    00003617: 	addl	%r10d, %r11d
    0000361a: 	leal	(%r11,%r9,4), %r9d
    0000361e: 	subl	%eax, %edx
    00003620: 	subb	0x216f(%rsp), %al
    00003627: 	leal	(%r9,%r8,4), %r8d
    0000362b: 	leal	(%r8,%rdi,4), %edi
    0000362f: 	leal	(%rdi,%rsi,4), %esi
    00003632: 	leal	(%rsi,%rcx,4), %ecx
    00003635: 	leal	(%rcx,%rdx,4), %edx
    00003638: 	leal	(%rdx,%rax,4), %eax
    0000363b: 	testb	%al, %al
    0000363d: 	jne	.Ltmp4876 # Offset: 13885
.Ltmp4938:
    00003643: 	addl	$0x1, %ebp
    00003646: 	cmpl	%r13d, %ebp
    00003649: 	jl	.Ltmp4877 # Offset: 13897
.Ltmp4874:
    0000364f: 	movq	%r15, %rsi
    00003652: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00003659: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 13913
    0000365e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00003665: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000366c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00003673: 	je	.Ltmp4878 # Offset: 13939
.Ltmp4973:
    00003679: 	movq	-0x20(%rax), %rbp
    0000367d: 	callq	clock@PLT # Offset: 13949
    00003682: 	pxor	%xmm0, %xmm0
    00003686: 	movq	%rax, end_time(%rip)
    0000368d: 	movq	%rbp, %rdi
    00003690: 	subq	start_time(%rip), %rax
    00003697: 	cvtsi2sd	%rax, %xmm0
    0000369c: 	divsd	DATAat0x4d640(%rip), %xmm0
    000036a4: 	callq	_Z13record_resultdPKc # Offset: 13988
    000036a9: 	movq	0x210(%rsp), %rdi
    000036b1: 	cmpq	(%rsp), %rdi
    000036b5: 	je	.Ltmp4879 # Offset: 14005
    000036b7: 	movq	0x220(%rsp), %rax
    000036bf: 	leaq	0x1(%rax), %rsi
    000036c3: 	callq	_ZdlPvm@PLT # Offset: 14019
.Ltmp4879:
    000036c8: 	movq	0x8(%rsp), %rsi
    000036cd: 	leaq	DATAat0x4d497(%rip), %rdx
    000036d4: 	movq	%r15, %rdi
    000036d7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 14039
    000036dc: 	movl	0x4c(%rsp), %esi
    000036e0: 	movq	%r15, %rdx
    000036e3: 	movq	%r14, %rdi
    000036e6: 	callq	"_Z9test_CSE4Ia14custom_cse_mixIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 14054
    000036eb: 	movq	0x210(%rsp), %rdi
    000036f3: 	cmpq	(%rsp), %rdi
    000036f7: 	je	.Ltmp4880 # Offset: 14071
    000036f9: 	movq	0x220(%rsp), %rax
    00003701: 	leaq	0x1(%rax), %rsi
    00003705: 	callq	_ZdlPvm@PLT # Offset: 14085
.Ltmp4880:
    0000370a: 	movq	0x8(%rsp), %rbx
    0000370f: 	leaq	0x1d0(%rsp), %rdi
    00003717: 	leaq	DATAat0x4d4a2(%rip), %rdx
    0000371e: 	movq	%rbx, %rsi
    00003721: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 14113
    00003726: 	movl	iterations(%rip), %edx
    0000372c: 	xorl	%r8d, %r8d
    0000372f: 	xorl	%ecx, %ecx
    00003731: 	movl	$0x1f40, %esi
    00003736: 	movq	0x1d0(%rsp), %rdi
    0000373e: 	callq	_Z9summarizePKciiii # Offset: 14142
    00003743: 	leaq	DATAat0x4d4a9(%rip), %rdx
    0000374a: 	movq	%rbx, %rsi
    0000374d: 	movq	%r15, %rdi
    00003750: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 14160
    00003755: 	callq	clock@PLT # Offset: 14165
    0000375a: 	movl	iterations(%rip), %r13d
    00003761: 	xorl	%ebp, %ebp
    00003763: 	leaq	0x2160(%rsp), %rbx
    0000376b: 	movq	%rax, start_time(%rip)
    00003772: 	leaq	DATAat0x4d004(%rip), %r12
    00003779: 	testl	%r13d, %r13d
    0000377c: 	jle	.Ltmp4881 # Offset: 14204
    00003782: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4884:
    00003788: 	movzbl	0x230(%rsp), %r10d
    00003791: 	movq	%r14, %rax
    00003794: 	pxor	%xmm1, %xmm1
    00003798: 	subb	0x231(%rsp), %r10b
    000037a0: 	shll	$0x3, %r10d
    000037a4: 	nopl	(%rax) # Size: 4
.Ltmp4882:
    000037a8: 	movdqa	(%rax), %xmm0
    000037ac: 	movdqu	0x1(%rax), %xmm4
    000037b1: 	addq	$0x10, %rax
    000037b5: 	psubb	%xmm4, %xmm0
    000037b9: 	paddb	%xmm0, %xmm0
    000037bd: 	paddb	%xmm0, %xmm0
    000037c1: 	paddb	%xmm0, %xmm0
    000037c5: 	paddb	%xmm0, %xmm1
    000037c9: 	cmpq	%rbx, %rax
    000037cc: 	jne	.Ltmp4882 # Offset: 14284
    000037ce: 	movdqa	%xmm1, %xmm0
    000037d2: 	movzbl	0x216a(%rsp), %edi
    000037da: 	movzbl	0x2169(%rsp), %r8d
    000037e3: 	psrldq	$0x8, %xmm0
    000037e8: 	movzbl	0x216b(%rsp), %esi
    000037f0: 	movzbl	0x2168(%rsp), %r9d
    000037f9: 	paddb	%xmm0, %xmm1
    000037fd: 	pxor	%xmm0, %xmm0
    00003801: 	movzbl	0x216c(%rsp), %ecx
    00003809: 	movzbl	0x216d(%rsp), %edx
    00003811: 	psadbw	%xmm0, %xmm1
    00003815: 	subl	%r8d, %r9d
    00003818: 	subl	%edi, %r8d
    0000381b: 	subl	%esi, %edi
    0000381d: 	movq	0x2160(%rsp), %xmm0
    00003826: 	movd	%xmm1, %eax
    0000382a: 	subl	%ecx, %esi
    0000382c: 	movq	0x2161(%rsp), %xmm1
    00003835: 	addl	%eax, %r10d
    00003838: 	subl	%edx, %ecx
    0000383a: 	psubb	%xmm1, %xmm0
    0000383e: 	pxor	%xmm1, %xmm1
    00003842: 	paddb	%xmm0, %xmm0
    00003846: 	paddb	%xmm0, %xmm0
    0000384a: 	paddb	%xmm0, %xmm0
    0000384e: 	movdqa	%xmm0, %xmm7
    00003852: 	psadbw	%xmm1, %xmm7
    00003856: 	movq	%xmm7, 0x88(%rsp)
    0000385f: 	movq	%xmm7, %rax
    00003864: 	movl	%eax, %r11d
    00003867: 	movzbl	0x216e(%rsp), %eax
    0000386f: 	addl	%r10d, %r11d
    00003872: 	leal	(%r11,%r9,8), %r9d
    00003876: 	subl	%eax, %edx
    00003878: 	subb	0x216f(%rsp), %al
    0000387f: 	leal	(%r9,%r8,8), %r8d
    00003883: 	leal	(%r8,%rdi,8), %edi
    00003887: 	leal	(%rdi,%rsi,8), %esi
    0000388a: 	leal	(%rsi,%rcx,8), %ecx
    0000388d: 	leal	(%rcx,%rdx,8), %edx
    00003890: 	leal	(%rdx,%rax,8), %eax
    00003893: 	testb	%al, %al
    00003895: 	jne	.Ltmp4883 # Offset: 14485
.Ltmp4937:
    0000389b: 	addl	$0x1, %ebp
    0000389e: 	cmpl	%r13d, %ebp
    000038a1: 	jl	.Ltmp4884 # Offset: 14497
.Ltmp4881:
    000038a7: 	movq	%r15, %rsi
    000038aa: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000038b1: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 14513
    000038b6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000038bd: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000038c4: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000038cb: 	je	.Ltmp4885 # Offset: 14539
.Ltmp4972:
    000038d1: 	movq	-0x20(%rax), %rbp
    000038d5: 	callq	clock@PLT # Offset: 14549
    000038da: 	pxor	%xmm0, %xmm0
    000038de: 	movq	%rax, end_time(%rip)
    000038e5: 	movq	%rbp, %rdi
    000038e8: 	subq	start_time(%rip), %rax
    000038ef: 	cvtsi2sd	%rax, %xmm0
    000038f4: 	divsd	DATAat0x4d640(%rip), %xmm0
    000038fc: 	callq	_Z13record_resultdPKc # Offset: 14588
    00003901: 	movq	0x210(%rsp), %rdi
    00003909: 	cmpq	(%rsp), %rdi
    0000390d: 	je	.Ltmp4886 # Offset: 14605
    0000390f: 	movq	0x220(%rsp), %rax
    00003917: 	leaq	0x1(%rax), %rsi
    0000391b: 	callq	_ZdlPvm@PLT # Offset: 14619
.Ltmp4886:
    00003920: 	movq	0x8(%rsp), %rsi
    00003925: 	leaq	DATAat0x4d4b8(%rip), %rdx
    0000392c: 	movq	%r15, %rdi
    0000392f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 14639
    00003934: 	callq	clock@PLT # Offset: 14644
    00003939: 	movl	iterations(%rip), %r13d
    00003940: 	xorl	%ebp, %ebp
    00003942: 	leaq	0x2160(%rsp), %rbx
    0000394a: 	movq	%rax, start_time(%rip)
    00003951: 	leaq	DATAat0x4d004(%rip), %r12
    00003958: 	testl	%r13d, %r13d
    0000395b: 	jle	.Ltmp4887 # Offset: 14683
    00003961: 	nopl	(%rax) # Size: 7
.Ltmp4890:
    00003968: 	movzbl	0x230(%rsp), %r10d
    00003971: 	movq	%r14, %rax
    00003974: 	pxor	%xmm1, %xmm1
    00003978: 	subb	0x231(%rsp), %r10b
    00003980: 	shll	$0x3, %r10d
    00003984: 	nopl	(%rax) # Size: 4
.Ltmp4888:
    00003988: 	movdqa	(%rax), %xmm0
    0000398c: 	movdqu	0x1(%rax), %xmm5
    00003991: 	addq	$0x10, %rax
    00003995: 	psubb	%xmm5, %xmm0
    00003999: 	paddb	%xmm0, %xmm0
    0000399d: 	paddb	%xmm0, %xmm0
    000039a1: 	paddb	%xmm0, %xmm0
    000039a5: 	paddb	%xmm0, %xmm1
    000039a9: 	cmpq	%rbx, %rax
    000039ac: 	jne	.Ltmp4888 # Offset: 14764
    000039ae: 	movdqa	%xmm1, %xmm0
    000039b2: 	movzbl	0x216a(%rsp), %edi
    000039ba: 	movzbl	0x2169(%rsp), %r8d
    000039c3: 	psrldq	$0x8, %xmm0
    000039c8: 	movzbl	0x216b(%rsp), %esi
    000039d0: 	movzbl	0x2168(%rsp), %r9d
    000039d9: 	paddb	%xmm0, %xmm1
    000039dd: 	pxor	%xmm0, %xmm0
    000039e1: 	movzbl	0x216c(%rsp), %ecx
    000039e9: 	movzbl	0x216d(%rsp), %edx
    000039f1: 	psadbw	%xmm0, %xmm1
    000039f5: 	subl	%r8d, %r9d
    000039f8: 	subl	%edi, %r8d
    000039fb: 	subl	%esi, %edi
    000039fd: 	movq	0x2160(%rsp), %xmm0
    00003a06: 	movd	%xmm1, %eax
    00003a0a: 	subl	%ecx, %esi
    00003a0c: 	movq	0x2161(%rsp), %xmm1
    00003a15: 	addl	%eax, %r10d
    00003a18: 	subl	%edx, %ecx
    00003a1a: 	psubb	%xmm1, %xmm0
    00003a1e: 	pxor	%xmm1, %xmm1
    00003a22: 	paddb	%xmm0, %xmm0
    00003a26: 	paddb	%xmm0, %xmm0
    00003a2a: 	paddb	%xmm0, %xmm0
    00003a2e: 	movdqa	%xmm0, %xmm6
    00003a32: 	psadbw	%xmm1, %xmm6
    00003a36: 	movq	%xmm6, 0x80(%rsp)
    00003a3f: 	movq	%xmm6, %rax
    00003a44: 	movl	%eax, %r11d
    00003a47: 	movzbl	0x216e(%rsp), %eax
    00003a4f: 	addl	%r10d, %r11d
    00003a52: 	leal	(%r11,%r9,8), %r9d
    00003a56: 	subl	%eax, %edx
    00003a58: 	subb	0x216f(%rsp), %al
    00003a5f: 	leal	(%r9,%r8,8), %r8d
    00003a63: 	leal	(%r8,%rdi,8), %edi
    00003a67: 	leal	(%rdi,%rsi,8), %esi
    00003a6a: 	leal	(%rsi,%rcx,8), %ecx
    00003a6d: 	leal	(%rcx,%rdx,8), %edx
    00003a70: 	leal	(%rdx,%rax,8), %eax
    00003a73: 	testb	%al, %al
    00003a75: 	jne	.Ltmp4889 # Offset: 14965
.Ltmp4936:
    00003a7b: 	addl	$0x1, %ebp
    00003a7e: 	cmpl	%r13d, %ebp
    00003a81: 	jl	.Ltmp4890 # Offset: 14977
.Ltmp4887:
    00003a87: 	movq	%r15, %rsi
    00003a8a: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00003a91: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 14993
    00003a96: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00003a9d: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00003aa4: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00003aab: 	je	.Ltmp4891 # Offset: 15019
.Ltmp4971:
    00003ab1: 	movq	-0x20(%rax), %rbp
    00003ab5: 	callq	clock@PLT # Offset: 15029
    00003aba: 	pxor	%xmm0, %xmm0
    00003abe: 	movq	%rax, end_time(%rip)
    00003ac5: 	movq	%rbp, %rdi
    00003ac8: 	subq	start_time(%rip), %rax
    00003acf: 	cvtsi2sd	%rax, %xmm0
    00003ad4: 	divsd	DATAat0x4d640(%rip), %xmm0
    00003adc: 	callq	_Z13record_resultdPKc # Offset: 15068
    00003ae1: 	movq	0x210(%rsp), %rdi
    00003ae9: 	cmpq	(%rsp), %rdi
    00003aed: 	je	.Ltmp4892 # Offset: 15085
    00003aef: 	movq	0x220(%rsp), %rax
    00003af7: 	leaq	0x1(%rax), %rsi
    00003afb: 	callq	_ZdlPvm@PLT # Offset: 15099
.Ltmp4892:
    00003b00: 	movq	0x8(%rsp), %rsi
    00003b05: 	leaq	DATAat0x4d4cc(%rip), %rdx
    00003b0c: 	movq	%r15, %rdi
    00003b0f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 15119
    00003b14: 	movl	0x4c(%rsp), %esi
    00003b18: 	movq	%r15, %rdx
    00003b1b: 	movq	%r14, %rdi
    00003b1e: 	callq	"_Z20test_CSE8_add_inlineIa14custom_cse_addIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 15134
    00003b23: 	movq	0x210(%rsp), %rdi
    00003b2b: 	cmpq	(%rsp), %rdi
    00003b2f: 	je	.Ltmp4893 # Offset: 15151
    00003b31: 	movq	0x220(%rsp), %rax
    00003b39: 	leaq	0x1(%rax), %rsi
    00003b3d: 	callq	_ZdlPvm@PLT # Offset: 15165
.Ltmp4893:
    00003b42: 	movq	0x8(%rsp), %rsi
    00003b47: 	leaq	DATAat0x4d4de(%rip), %rdx
    00003b4e: 	movq	%r15, %rdi
    00003b51: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 15185
    00003b56: 	movl	0x4c(%rsp), %esi
    00003b5a: 	movq	%r15, %rdx
    00003b5d: 	movq	%r14, %rdi
    00003b60: 	callq	"_Z28test_CSE8_add_inline_flippedIa14custom_cse_addIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 15200
    00003b65: 	movq	0x210(%rsp), %rdi
    00003b6d: 	cmpq	(%rsp), %rdi
    00003b71: 	je	.Ltmp4894 # Offset: 15217
    00003b73: 	movq	0x220(%rsp), %rax
    00003b7b: 	leaq	0x1(%rax), %rsi
    00003b7f: 	callq	_ZdlPvm@PLT # Offset: 15231
.Ltmp4894:
    00003b84: 	movq	0x8(%rsp), %rsi
    00003b89: 	leaq	DATAat0x4d4f8(%rip), %rdx
    00003b90: 	movq	%r15, %rdi
    00003b93: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 15251
    00003b98: 	movl	0x4c(%rsp), %esi
    00003b9c: 	movq	%r15, %rdx
    00003b9f: 	movq	%r14, %rdi
    00003ba2: 	callq	"_Z9test_CSE8Ia14custom_cse_addIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 15266
    00003ba7: 	movq	0x210(%rsp), %rdi
    00003baf: 	cmpq	(%rsp), %rdi
    00003bb3: 	je	.Ltmp4895 # Offset: 15283
    00003bb5: 	movq	0x220(%rsp), %rax
    00003bbd: 	leaq	0x1(%rax), %rsi
    00003bc1: 	callq	_ZdlPvm@PLT # Offset: 15297
.Ltmp4895:
    00003bc6: 	movq	0x8(%rsp), %rsi
    00003bcb: 	leaq	DATAat0x4d503(%rip), %rdx
    00003bd2: 	movq	%r15, %rdi
    00003bd5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 15317
    00003bda: 	callq	clock@PLT # Offset: 15322
    00003bdf: 	movl	iterations(%rip), %r13d
    00003be6: 	xorl	%ebp, %ebp
    00003be8: 	leaq	0x2160(%rsp), %rbx
    00003bf0: 	movq	%rax, start_time(%rip)
    00003bf7: 	leaq	DATAat0x4d004(%rip), %r12
    00003bfe: 	testl	%r13d, %r13d
    00003c01: 	jle	.Ltmp4896 # Offset: 15361
    00003c07: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4899:
    00003c10: 	movzbl	0x230(%rsp), %r10d
    00003c19: 	movq	%r14, %rax
    00003c1c: 	pxor	%xmm1, %xmm1
    00003c20: 	subb	0x231(%rsp), %r10b
    00003c28: 	shll	$0x3, %r10d
    00003c2c: 	nopl	(%rax) # Size: 4
.Ltmp4897:
    00003c30: 	movdqa	(%rax), %xmm0
    00003c34: 	movdqu	0x1(%rax), %xmm6
    00003c39: 	addq	$0x10, %rax
    00003c3d: 	psubb	%xmm6, %xmm0
    00003c41: 	paddb	%xmm0, %xmm0
    00003c45: 	paddb	%xmm0, %xmm0
    00003c49: 	paddb	%xmm0, %xmm0
    00003c4d: 	paddb	%xmm0, %xmm1
    00003c51: 	cmpq	%rbx, %rax
    00003c54: 	jne	.Ltmp4897 # Offset: 15444
    00003c56: 	movdqa	%xmm1, %xmm0
    00003c5a: 	movzbl	0x216a(%rsp), %edi
    00003c62: 	movzbl	0x2169(%rsp), %r8d
    00003c6b: 	psrldq	$0x8, %xmm0
    00003c70: 	movzbl	0x216b(%rsp), %esi
    00003c78: 	movzbl	0x2168(%rsp), %r9d
    00003c81: 	paddb	%xmm0, %xmm1
    00003c85: 	pxor	%xmm0, %xmm0
    00003c89: 	movzbl	0x216c(%rsp), %ecx
    00003c91: 	movzbl	0x216d(%rsp), %edx
    00003c99: 	psadbw	%xmm0, %xmm1
    00003c9d: 	subl	%r8d, %r9d
    00003ca0: 	subl	%edi, %r8d
    00003ca3: 	subl	%esi, %edi
    00003ca5: 	movq	0x2160(%rsp), %xmm0
    00003cae: 	movd	%xmm1, %eax
    00003cb2: 	subl	%ecx, %esi
    00003cb4: 	movq	0x2161(%rsp), %xmm1
    00003cbd: 	addl	%eax, %r10d
    00003cc0: 	subl	%edx, %ecx
    00003cc2: 	psubb	%xmm1, %xmm0
    00003cc6: 	pxor	%xmm1, %xmm1
    00003cca: 	paddb	%xmm0, %xmm0
    00003cce: 	paddb	%xmm0, %xmm0
    00003cd2: 	paddb	%xmm0, %xmm0
    00003cd6: 	movdqa	%xmm0, %xmm3
    00003cda: 	psadbw	%xmm1, %xmm3
    00003cde: 	movq	%xmm3, %rax
    00003ce3: 	movq	%xmm3, 0x78(%rsp)
    00003ce9: 	movl	%eax, %r11d
    00003cec: 	movzbl	0x216e(%rsp), %eax
    00003cf4: 	addl	%r10d, %r11d
    00003cf7: 	leal	(%r11,%r9,8), %r9d
    00003cfb: 	subl	%eax, %edx
    00003cfd: 	subb	0x216f(%rsp), %al
    00003d04: 	leal	(%r9,%r8,8), %r8d
    00003d08: 	leal	(%r8,%rdi,8), %edi
    00003d0c: 	leal	(%rdi,%rsi,8), %esi
    00003d0f: 	leal	(%rsi,%rcx,8), %ecx
    00003d12: 	leal	(%rcx,%rdx,8), %edx
    00003d15: 	leal	(%rdx,%rax,8), %eax
    00003d18: 	testb	%al, %al
    00003d1a: 	jne	.Ltmp4898 # Offset: 15642
.Ltmp4935:
    00003d20: 	addl	$0x1, %ebp
    00003d23: 	cmpl	%r13d, %ebp
    00003d26: 	jl	.Ltmp4899 # Offset: 15654
.Ltmp4896:
    00003d2c: 	movq	%r15, %rsi
    00003d2f: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00003d36: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 15670
    00003d3b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00003d42: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00003d49: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00003d50: 	je	.Ltmp4900 # Offset: 15696
.Ltmp4970:
    00003d56: 	movq	-0x20(%rax), %rbp
    00003d5a: 	callq	clock@PLT # Offset: 15706
    00003d5f: 	pxor	%xmm0, %xmm0
    00003d63: 	movq	%rax, end_time(%rip)
    00003d6a: 	movq	%rbp, %rdi
    00003d6d: 	subq	start_time(%rip), %rax
    00003d74: 	cvtsi2sd	%rax, %xmm0
    00003d79: 	divsd	DATAat0x4d640(%rip), %xmm0
    00003d81: 	callq	_Z13record_resultdPKc # Offset: 15745
    00003d86: 	movq	0x210(%rsp), %rdi
    00003d8e: 	cmpq	(%rsp), %rdi
    00003d92: 	je	.Ltmp4901 # Offset: 15762
    00003d94: 	movq	0x220(%rsp), %rax
    00003d9c: 	leaq	0x1(%rax), %rsi
    00003da0: 	callq	_ZdlPvm@PLT # Offset: 15776
.Ltmp4901:
    00003da5: 	movq	0x8(%rsp), %rsi
    00003daa: 	leaq	DATAat0x4d51c(%rip), %rdx
    00003db1: 	movq	%r15, %rdi
    00003db4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 15796
    00003db9: 	movl	0x4c(%rsp), %esi
    00003dbd: 	movq	%r15, %rdx
    00003dc0: 	movq	%r14, %rdi
    00003dc3: 	callq	"_Z9test_CSE8Ia14custom_cse_subIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 15811
    00003dc8: 	movq	0x210(%rsp), %rdi
    00003dd0: 	cmpq	(%rsp), %rdi
    00003dd4: 	je	.Ltmp4902 # Offset: 15828
    00003dd6: 	movq	0x220(%rsp), %rax
    00003dde: 	leaq	0x1(%rax), %rsi
    00003de2: 	callq	_ZdlPvm@PLT # Offset: 15842
.Ltmp4902:
    00003de7: 	movq	0x8(%rsp), %rsi
    00003dec: 	leaq	DATAat0x4d52c(%rip), %rdx
    00003df3: 	movq	%r15, %rdi
    00003df6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 15862
    00003dfb: 	callq	clock@PLT # Offset: 15867
    00003e00: 	movl	iterations(%rip), %r13d
    00003e07: 	xorl	%ebp, %ebp
    00003e09: 	leaq	0x2160(%rsp), %rbx
    00003e11: 	movq	%rax, start_time(%rip)
    00003e18: 	leaq	DATAat0x4d004(%rip), %r12
    00003e1f: 	testl	%r13d, %r13d
    00003e22: 	jle	.Ltmp4903 # Offset: 15906
    00003e28: 	nopl	(%rax,%rax) # Size: 8
.Ltmp4906:
    00003e30: 	movzbl	0x230(%rsp), %r10d
    00003e39: 	movq	%r14, %rax
    00003e3c: 	pxor	%xmm1, %xmm1
    00003e40: 	subb	0x231(%rsp), %r10b
    00003e48: 	shll	$0x3, %r10d
    00003e4c: 	nopl	(%rax) # Size: 4
.Ltmp4904:
    00003e50: 	movdqa	(%rax), %xmm0
    00003e54: 	movdqu	0x1(%rax), %xmm7
    00003e59: 	addq	$0x10, %rax
    00003e5d: 	psubb	%xmm7, %xmm0
    00003e61: 	paddb	%xmm0, %xmm0
    00003e65: 	paddb	%xmm0, %xmm0
    00003e69: 	paddb	%xmm0, %xmm0
    00003e6d: 	paddb	%xmm0, %xmm1
    00003e71: 	cmpq	%rbx, %rax
    00003e74: 	jne	.Ltmp4904 # Offset: 15988
    00003e76: 	movdqa	%xmm1, %xmm0
    00003e7a: 	movzbl	0x216a(%rsp), %edi
    00003e82: 	movzbl	0x2169(%rsp), %r8d
    00003e8b: 	psrldq	$0x8, %xmm0
    00003e90: 	movzbl	0x216b(%rsp), %esi
    00003e98: 	movzbl	0x2168(%rsp), %r9d
    00003ea1: 	paddb	%xmm0, %xmm1
    00003ea5: 	pxor	%xmm0, %xmm0
    00003ea9: 	movzbl	0x216c(%rsp), %ecx
    00003eb1: 	movzbl	0x216d(%rsp), %edx
    00003eb9: 	psadbw	%xmm0, %xmm1
    00003ebd: 	subl	%r8d, %r9d
    00003ec0: 	subl	%edi, %r8d
    00003ec3: 	subl	%esi, %edi
    00003ec5: 	movq	0x2160(%rsp), %xmm0
    00003ece: 	movd	%xmm1, %eax
    00003ed2: 	subl	%ecx, %esi
    00003ed4: 	movq	0x2161(%rsp), %xmm1
    00003edd: 	addl	%eax, %r10d
    00003ee0: 	subl	%edx, %ecx
    00003ee2: 	psubb	%xmm1, %xmm0
    00003ee6: 	pxor	%xmm1, %xmm1
    00003eea: 	paddb	%xmm0, %xmm0
    00003eee: 	paddb	%xmm0, %xmm0
    00003ef2: 	paddb	%xmm0, %xmm0
    00003ef6: 	movdqa	%xmm0, %xmm4
    00003efa: 	psadbw	%xmm1, %xmm4
    00003efe: 	movq	%xmm4, %rax
    00003f03: 	movq	%xmm4, 0x70(%rsp)
    00003f09: 	movl	%eax, %r11d
    00003f0c: 	movzbl	0x216e(%rsp), %eax
    00003f14: 	addl	%r10d, %r11d
    00003f17: 	leal	(%r11,%r9,8), %r9d
    00003f1b: 	subl	%eax, %edx
    00003f1d: 	subb	0x216f(%rsp), %al
    00003f24: 	leal	(%r9,%r8,8), %r8d
    00003f28: 	leal	(%r8,%rdi,8), %edi
    00003f2c: 	leal	(%rdi,%rsi,8), %esi
    00003f2f: 	leal	(%rsi,%rcx,8), %ecx
    00003f32: 	leal	(%rcx,%rdx,8), %edx
    00003f35: 	leal	(%rdx,%rax,8), %eax
    00003f38: 	testb	%al, %al
    00003f3a: 	jne	.Ltmp4905 # Offset: 16186
.Ltmp4934:
    00003f40: 	addl	$0x1, %ebp
    00003f43: 	cmpl	%r13d, %ebp
    00003f46: 	jl	.Ltmp4906 # Offset: 16198
.Ltmp4903:
    00003f4c: 	movq	%r15, %rsi
    00003f4f: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00003f56: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 16214
    00003f5b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00003f62: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00003f69: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00003f70: 	je	.Ltmp4907 # Offset: 16240
.Ltmp4969:
    00003f76: 	movq	-0x20(%rax), %rbp
    00003f7a: 	callq	clock@PLT # Offset: 16250
    00003f7f: 	pxor	%xmm0, %xmm0
    00003f83: 	movq	%rax, end_time(%rip)
    00003f8a: 	movq	%rbp, %rdi
    00003f8d: 	subq	start_time(%rip), %rax
    00003f94: 	cvtsi2sd	%rax, %xmm0
    00003f99: 	divsd	DATAat0x4d640(%rip), %xmm0
    00003fa1: 	callq	_Z13record_resultdPKc # Offset: 16289
    00003fa6: 	movq	0x210(%rsp), %rdi
    00003fae: 	cmpq	(%rsp), %rdi
    00003fb2: 	je	.Ltmp4908 # Offset: 16306
    00003fb4: 	movq	0x220(%rsp), %rax
    00003fbc: 	leaq	0x1(%rax), %rsi
    00003fc0: 	callq	_ZdlPvm@PLT # Offset: 16320
.Ltmp4908:
    00003fc5: 	movq	0x8(%rsp), %rsi
    00003fca: 	leaq	DATAat0x4d545(%rip), %rdx
    00003fd1: 	movq	%r15, %rdi
    00003fd4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 16340
    00003fd9: 	movl	0x4c(%rsp), %esi
    00003fdd: 	movq	%r15, %rdx
    00003fe0: 	movq	%r14, %rdi
    00003fe3: 	callq	"_Z9test_CSE8Ia14custom_cse_mulIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 16355
    00003fe8: 	movq	0x210(%rsp), %rdi
    00003ff0: 	cmpq	(%rsp), %rdi
    00003ff4: 	je	.Ltmp4909 # Offset: 16372
    00003ff6: 	movq	0x220(%rsp), %rax
    00003ffe: 	leaq	0x1(%rax), %rsi
    00004002: 	callq	_ZdlPvm@PLT # Offset: 16386
.Ltmp4909:
    00004007: 	movq	0x8(%rsp), %rsi
    0000400c: 	leaq	DATAat0x4d555(%rip), %rdx
    00004013: 	movq	%r15, %rdi
    00004016: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 16406
    0000401b: 	callq	clock@PLT # Offset: 16411
    00004020: 	movl	iterations(%rip), %r13d
    00004027: 	xorl	%ebp, %ebp
    00004029: 	leaq	0x2160(%rsp), %rbx
    00004031: 	movq	%rax, start_time(%rip)
    00004038: 	leaq	DATAat0x4d004(%rip), %r12
    0000403f: 	testl	%r13d, %r13d
    00004042: 	jle	.Ltmp4910 # Offset: 16450
    00004048: 	nopl	(%rax,%rax) # Size: 8
.Ltmp4913:
    00004050: 	movzbl	0x230(%rsp), %r10d
    00004059: 	movq	%r14, %rax
    0000405c: 	pxor	%xmm1, %xmm1
    00004060: 	subb	0x231(%rsp), %r10b
    00004068: 	shll	$0x3, %r10d
    0000406c: 	nopl	(%rax) # Size: 4
.Ltmp4911:
    00004070: 	movdqa	(%rax), %xmm0
    00004074: 	movdqu	0x1(%rax), %xmm4
    00004079: 	addq	$0x10, %rax
    0000407d: 	psubb	%xmm4, %xmm0
    00004081: 	paddb	%xmm0, %xmm0
    00004085: 	paddb	%xmm0, %xmm0
    00004089: 	paddb	%xmm0, %xmm0
    0000408d: 	paddb	%xmm0, %xmm1
    00004091: 	cmpq	%rbx, %rax
    00004094: 	jne	.Ltmp4911 # Offset: 16532
    00004096: 	movdqa	%xmm1, %xmm0
    0000409a: 	movzbl	0x216a(%rsp), %edi
    000040a2: 	movzbl	0x2169(%rsp), %r8d
    000040ab: 	psrldq	$0x8, %xmm0
    000040b0: 	movzbl	0x216b(%rsp), %esi
    000040b8: 	movzbl	0x2168(%rsp), %r9d
    000040c1: 	paddb	%xmm0, %xmm1
    000040c5: 	pxor	%xmm0, %xmm0
    000040c9: 	movzbl	0x216c(%rsp), %ecx
    000040d1: 	movzbl	0x216d(%rsp), %edx
    000040d9: 	psadbw	%xmm0, %xmm1
    000040dd: 	subl	%r8d, %r9d
    000040e0: 	subl	%edi, %r8d
    000040e3: 	subl	%esi, %edi
    000040e5: 	movq	0x2160(%rsp), %xmm0
    000040ee: 	movd	%xmm1, %eax
    000040f2: 	subl	%ecx, %esi
    000040f4: 	movq	0x2161(%rsp), %xmm1
    000040fd: 	addl	%eax, %r10d
    00004100: 	subl	%edx, %ecx
    00004102: 	psubb	%xmm1, %xmm0
    00004106: 	pxor	%xmm1, %xmm1
    0000410a: 	paddb	%xmm0, %xmm0
    0000410e: 	paddb	%xmm0, %xmm0
    00004112: 	paddb	%xmm0, %xmm0
    00004116: 	movdqa	%xmm0, %xmm5
    0000411a: 	psadbw	%xmm1, %xmm5
    0000411e: 	movq	%xmm5, %rax
    00004123: 	movq	%xmm5, 0x68(%rsp)
    00004129: 	movl	%eax, %r11d
    0000412c: 	movzbl	0x216e(%rsp), %eax
    00004134: 	addl	%r10d, %r11d
    00004137: 	leal	(%r11,%r9,8), %r9d
    0000413b: 	subl	%eax, %edx
    0000413d: 	subb	0x216f(%rsp), %al
    00004144: 	leal	(%r9,%r8,8), %r8d
    00004148: 	leal	(%r8,%rdi,8), %edi
    0000414c: 	leal	(%rdi,%rsi,8), %esi
    0000414f: 	leal	(%rsi,%rcx,8), %ecx
    00004152: 	leal	(%rcx,%rdx,8), %edx
    00004155: 	leal	(%rdx,%rax,8), %eax
    00004158: 	testb	%al, %al
    0000415a: 	jne	.Ltmp4912 # Offset: 16730
.Ltmp4933:
    00004160: 	addl	$0x1, %ebp
    00004163: 	cmpl	%r13d, %ebp
    00004166: 	jl	.Ltmp4913 # Offset: 16742
.Ltmp4910:
    0000416c: 	movq	%r15, %rsi
    0000416f: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00004176: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 16758
    0000417b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00004182: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00004189: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00004190: 	je	.Ltmp4914 # Offset: 16784
.Ltmp4968:
    00004196: 	movq	-0x20(%rax), %rbp
    0000419a: 	callq	clock@PLT # Offset: 16794
    0000419f: 	pxor	%xmm0, %xmm0
    000041a3: 	movq	%rax, end_time(%rip)
    000041aa: 	movq	%rbp, %rdi
    000041ad: 	subq	start_time(%rip), %rax
    000041b4: 	cvtsi2sd	%rax, %xmm0
    000041b9: 	divsd	DATAat0x4d640(%rip), %xmm0
    000041c1: 	callq	_Z13record_resultdPKc # Offset: 16833
    000041c6: 	movq	0x210(%rsp), %rdi
    000041ce: 	cmpq	(%rsp), %rdi
    000041d2: 	je	.Ltmp4915 # Offset: 16850
    000041d4: 	movq	0x220(%rsp), %rax
    000041dc: 	leaq	0x1(%rax), %rsi
    000041e0: 	callq	_ZdlPvm@PLT # Offset: 16864
.Ltmp4915:
    000041e5: 	movq	0x8(%rsp), %rsi
    000041ea: 	leaq	DATAat0x4d56c(%rip), %rdx
    000041f1: 	movq	%r15, %rdi
    000041f4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 16884
    000041f9: 	movl	0x4c(%rsp), %esi
    000041fd: 	movq	%r15, %rdx
    00004200: 	movq	%r14, %rdi
    00004203: 	callq	"_Z9test_CSE8Ia14custom_cse_divIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 16899
    00004208: 	movq	0x210(%rsp), %rdi
    00004210: 	cmpq	(%rsp), %rdi
    00004214: 	je	.Ltmp4916 # Offset: 16916
    00004216: 	movq	0x220(%rsp), %rax
    0000421e: 	leaq	0x1(%rax), %rsi
    00004222: 	callq	_ZdlPvm@PLT # Offset: 16930
.Ltmp4916:
    00004227: 	movq	0x8(%rsp), %rsi
    0000422c: 	leaq	DATAat0x4d57a(%rip), %rdx
    00004233: 	movq	%r15, %rdi
    00004236: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 16950
    0000423b: 	callq	clock@PLT # Offset: 16955
    00004240: 	movl	iterations(%rip), %r13d
    00004247: 	xorl	%ebp, %ebp
    00004249: 	leaq	0x2160(%rsp), %rbx
    00004251: 	movq	%rax, start_time(%rip)
    00004258: 	leaq	DATAat0x4d004(%rip), %r12
    0000425f: 	testl	%r13d, %r13d
    00004262: 	jle	.Ltmp4917 # Offset: 16994
    00004268: 	nopl	(%rax,%rax) # Size: 8
.Ltmp4920:
    00004270: 	movzbl	0x230(%rsp), %r10d
    00004279: 	movq	%r14, %rax
    0000427c: 	pxor	%xmm1, %xmm1
    00004280: 	subb	0x231(%rsp), %r10b
    00004288: 	shll	$0x3, %r10d
    0000428c: 	nopl	(%rax) # Size: 4
.Ltmp4918:
    00004290: 	movdqa	(%rax), %xmm0
    00004294: 	movdqu	0x1(%rax), %xmm5
    00004299: 	addq	$0x10, %rax
    0000429d: 	psubb	%xmm5, %xmm0
    000042a1: 	paddb	%xmm0, %xmm0
    000042a5: 	paddb	%xmm0, %xmm0
    000042a9: 	paddb	%xmm0, %xmm0
    000042ad: 	paddb	%xmm0, %xmm1
    000042b1: 	cmpq	%rbx, %rax
    000042b4: 	jne	.Ltmp4918 # Offset: 17076
    000042b6: 	movdqa	%xmm1, %xmm0
    000042ba: 	movzbl	0x216a(%rsp), %edi
    000042c2: 	movzbl	0x2169(%rsp), %r8d
    000042cb: 	psrldq	$0x8, %xmm0
    000042d0: 	movzbl	0x216b(%rsp), %esi
    000042d8: 	movzbl	0x2168(%rsp), %r9d
    000042e1: 	paddb	%xmm0, %xmm1
    000042e5: 	pxor	%xmm0, %xmm0
    000042e9: 	movzbl	0x216c(%rsp), %ecx
    000042f1: 	movzbl	0x216d(%rsp), %edx
    000042f9: 	psadbw	%xmm0, %xmm1
    000042fd: 	subl	%r8d, %r9d
    00004300: 	subl	%edi, %r8d
    00004303: 	subl	%esi, %edi
    00004305: 	movq	0x2160(%rsp), %xmm0
    0000430e: 	movd	%xmm1, %eax
    00004312: 	subl	%ecx, %esi
    00004314: 	movq	0x2161(%rsp), %xmm1
    0000431d: 	addl	%eax, %r10d
    00004320: 	subl	%edx, %ecx
    00004322: 	psubb	%xmm1, %xmm0
    00004326: 	pxor	%xmm1, %xmm1
    0000432a: 	paddb	%xmm0, %xmm0
    0000432e: 	paddb	%xmm0, %xmm0
    00004332: 	paddb	%xmm0, %xmm0
    00004336: 	movdqa	%xmm0, %xmm7
    0000433a: 	psadbw	%xmm1, %xmm7
    0000433e: 	movq	%xmm7, %rax
    00004343: 	movq	%xmm7, 0x60(%rsp)
    00004349: 	movl	%eax, %r11d
    0000434c: 	movzbl	0x216e(%rsp), %eax
    00004354: 	addl	%r10d, %r11d
    00004357: 	leal	(%r11,%r9,8), %r9d
    0000435b: 	subl	%eax, %edx
    0000435d: 	subb	0x216f(%rsp), %al
    00004364: 	leal	(%r9,%r8,8), %r8d
    00004368: 	leal	(%r8,%rdi,8), %edi
    0000436c: 	leal	(%rdi,%rsi,8), %esi
    0000436f: 	leal	(%rsi,%rcx,8), %ecx
    00004372: 	leal	(%rcx,%rdx,8), %edx
    00004375: 	leal	(%rdx,%rax,8), %eax
    00004378: 	testb	%al, %al
    0000437a: 	jne	.Ltmp4919 # Offset: 17274
.Ltmp4932:
    00004380: 	addl	$0x1, %ebp
    00004383: 	cmpl	%r13d, %ebp
    00004386: 	jl	.Ltmp4920 # Offset: 17286
.Ltmp4917:
    0000438c: 	movq	%r15, %rsi
    0000438f: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00004396: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 17302
    0000439b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000043a2: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000043a9: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000043b0: 	je	.Ltmp4921 # Offset: 17328
.Ltmp4967:
    000043b6: 	movq	-0x20(%rax), %rbp
    000043ba: 	callq	clock@PLT # Offset: 17338
    000043bf: 	pxor	%xmm0, %xmm0
    000043c3: 	movq	%rax, end_time(%rip)
    000043ca: 	movq	%rbp, %rdi
    000043cd: 	subq	start_time(%rip), %rax
    000043d4: 	cvtsi2sd	%rax, %xmm0
    000043d9: 	divsd	DATAat0x4d640(%rip), %xmm0
    000043e1: 	callq	_Z13record_resultdPKc # Offset: 17377
    000043e6: 	movq	0x210(%rsp), %rdi
    000043ee: 	cmpq	(%rsp), %rdi
    000043f2: 	je	.Ltmp4922 # Offset: 17394
    000043f4: 	movq	0x220(%rsp), %rax
    000043fc: 	leaq	0x1(%rax), %rsi
    00004400: 	callq	_ZdlPvm@PLT # Offset: 17408
.Ltmp4922:
    00004405: 	movq	0x8(%rsp), %rsi
    0000440a: 	leaq	DATAat0x4d58e(%rip), %rdx
    00004411: 	movq	%r15, %rdi
    00004414: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 17428
    00004419: 	movl	0x4c(%rsp), %esi
    0000441d: 	movq	%r15, %rdx
    00004420: 	movq	%r14, %rdi
    00004423: 	callq	"_Z9test_CSE8Ia14custom_cse_mixIaEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 17443
    00004428: 	movq	0x210(%rsp), %rdi
    00004430: 	cmpq	(%rsp), %rdi
    00004434: 	je	.Ltmp4923 # Offset: 17460
    00004436: 	movq	0x220(%rsp), %rax
    0000443e: 	leaq	0x1(%rax), %rsi
    00004442: 	callq	_ZdlPvm@PLT # Offset: 17474
.Ltmp4923:
    00004447: 	movq	0x8(%rsp), %rbx
    0000444c: 	leaq	0x1f0(%rsp), %rdi
    00004454: 	leaq	DATAat0x4d599(%rip), %rdx
    0000445b: 	movq	%rbx, %rsi
    0000445e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 17502
    00004463: 	movl	iterations(%rip), %edx
    00004469: 	xorl	%r8d, %r8d
    0000446c: 	xorl	%ecx, %ecx
    0000446e: 	movl	$0x1f40, %esi
    00004473: 	movq	0x1f0(%rsp), %rdi
    0000447b: 	callq	_Z9summarizePKciiii # Offset: 17531
    00004480: 	leaq	DATAat0x4d5a0(%rip), %rdx
    00004487: 	movq	%rbx, %rsi
    0000448a: 	movq	%r15, %rdi
    0000448d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 17549
    00004492: 	movl	0x4c(%rsp), %esi
    00004496: 	movq	%r15, %rdx
    00004499: 	movq	%r14, %rdi
    0000449c: 	callq	_Z16TestUnrolledTypeIaLi4EEvPT_S0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 17564
    000044a1: 	movq	0x210(%rsp), %rdi
    000044a9: 	cmpq	(%rsp), %rdi
    000044ad: 	je	.Ltmp4924 # Offset: 17581
    000044af: 	movq	0x220(%rsp), %rax
    000044b7: 	leaq	0x1(%rax), %rsi
    000044bb: 	callq	_ZdlPvm@PLT # Offset: 17595
.Ltmp4924:
    000044c0: 	movq	0x8(%rsp), %rsi
    000044c5: 	leaq	DATAat0x4d5ae(%rip), %rdx
    000044cc: 	movq	%r15, %rdi
    000044cf: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 17615
    000044d4: 	movl	0x4c(%rsp), %esi
    000044d8: 	movq	%r15, %rdx
    000044db: 	movq	%r14, %rdi
    000044de: 	callq	_Z16TestUnrolledTypeIaLi8EEvPT_S0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 17630
    000044e3: 	movq	0x210(%rsp), %rdi
    000044eb: 	cmpq	(%rsp), %rdi
    000044ef: 	je	.Ltmp4925 # Offset: 17647
    000044f1: 	movq	0x220(%rsp), %rax
    000044f9: 	leaq	0x1(%rax), %rsi
    000044fd: 	callq	_ZdlPvm@PLT # Offset: 17661
.Ltmp4925:
    00004502: 	movq	0x1f0(%rsp), %rdi
    0000450a: 	leaq	0x200(%rsp), %rax
    00004512: 	cmpq	%rax, %rdi
    00004515: 	je	.Ltmp4926 # Offset: 17685
    00004517: 	movq	0x200(%rsp), %rax
    0000451f: 	leaq	0x1(%rax), %rsi
    00004523: 	callq	_ZdlPvm@PLT # Offset: 17699
.Ltmp4926:
    00004528: 	movq	0x1d0(%rsp), %rdi
    00004530: 	leaq	0x1e0(%rsp), %rax
    00004538: 	cmpq	%rax, %rdi
    0000453b: 	je	.Ltmp4927 # Offset: 17723
    0000453d: 	movq	0x1e0(%rsp), %rax
    00004545: 	leaq	0x1(%rax), %rsi
    00004549: 	callq	_ZdlPvm@PLT # Offset: 17737
.Ltmp4927:
    0000454e: 	movq	0x1b0(%rsp), %rdi
    00004556: 	leaq	0x1c0(%rsp), %rax
    0000455e: 	cmpq	%rax, %rdi
    00004561: 	je	.Ltmp4928 # Offset: 17761
    00004563: 	movq	0x1c0(%rsp), %rax
    0000456b: 	leaq	0x1(%rax), %rsi
    0000456f: 	callq	_ZdlPvm@PLT # Offset: 17775
.Ltmp4928:
    00004574: 	movq	0x190(%rsp), %rdi
    0000457c: 	leaq	0x1a0(%rsp), %rax
    00004584: 	cmpq	%rax, %rdi
    00004587: 	je	.Ltmp4929 # Offset: 17799
    00004589: 	movq	0x1a0(%rsp), %rax
    00004591: 	leaq	0x1(%rax), %rsi
    00004595: 	callq	_ZdlPvm@PLT # Offset: 17813
.Ltmp4929:
    0000459a: 	movq	0x170(%rsp), %rdi
    000045a2: 	leaq	0x180(%rsp), %rax
    000045aa: 	cmpq	%rax, %rdi
    000045ad: 	je	.Ltmp4930 # Offset: 17837
    000045af: 	movq	0x180(%rsp), %rax
    000045b7: 	leaq	0x1(%rax), %rsi
    000045bb: 	callq	_ZdlPvm@PLT # Offset: 17851
.Ltmp4930:
    000045c0: 	movq	0x2178(%rsp), %rax
    000045c8: 	subq	%fs:0x28, %rax
    000045d1: 	jne	.Ltmp4931 # Offset: 17873
    000045d7: 	addq	$0x2188, %rsp
    000045de: 	popq	%rbx
    000045df: 	popq	%rbp
    000045e0: 	popq	%r12
    000045e2: 	popq	%r13
    000045e4: 	popq	%r14
    000045e6: 	popq	%r15
    000045e8: 	retq # Offset: 17896
    000045e9: 	nopl	(%rax) # Size: 7
.Ltmp4919:
    000045f0: 	movq	0x210(%rsp), %rdx
    000045f8: 	movq	%r12, %rsi
    000045fb: 	movl	$0x1, %edi
    00004600: 	xorl	%eax, %eax
    00004602: 	callq	__printf_chk@PLT # Offset: 17922
    00004607: 	movl	iterations(%rip), %r13d
    0000460e: 	jmp	.Ltmp4932 # Offset: 17934
    00004613: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4912:
    00004618: 	movq	0x210(%rsp), %rdx
    00004620: 	movq	%r12, %rsi
    00004623: 	movl	$0x1, %edi
    00004628: 	xorl	%eax, %eax
    0000462a: 	callq	__printf_chk@PLT # Offset: 17962
    0000462f: 	movl	iterations(%rip), %r13d
    00004636: 	jmp	.Ltmp4933 # Offset: 17974
    0000463b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4905:
    00004640: 	movq	0x210(%rsp), %rdx
    00004648: 	movq	%r12, %rsi
    0000464b: 	movl	$0x1, %edi
    00004650: 	xorl	%eax, %eax
    00004652: 	callq	__printf_chk@PLT # Offset: 18002
    00004657: 	movl	iterations(%rip), %r13d
    0000465e: 	jmp	.Ltmp4934 # Offset: 18014
    00004663: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4898:
    00004668: 	movq	0x210(%rsp), %rdx
    00004670: 	movq	%r12, %rsi
    00004673: 	movl	$0x1, %edi
    00004678: 	xorl	%eax, %eax
    0000467a: 	callq	__printf_chk@PLT # Offset: 18042
    0000467f: 	movl	iterations(%rip), %r13d
    00004686: 	jmp	.Ltmp4935 # Offset: 18054
    0000468b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4889:
    00004690: 	movq	0x210(%rsp), %rdx
    00004698: 	movq	%r12, %rsi
    0000469b: 	movl	$0x1, %edi
    000046a0: 	xorl	%eax, %eax
    000046a2: 	callq	__printf_chk@PLT # Offset: 18082
    000046a7: 	movl	iterations(%rip), %r13d
    000046ae: 	jmp	.Ltmp4936 # Offset: 18094
    000046b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4883:
    000046b8: 	movq	0x210(%rsp), %rdx
    000046c0: 	movq	%r12, %rsi
    000046c3: 	movl	$0x1, %edi
    000046c8: 	xorl	%eax, %eax
    000046ca: 	callq	__printf_chk@PLT # Offset: 18122
    000046cf: 	movl	iterations(%rip), %r13d
    000046d6: 	jmp	.Ltmp4937 # Offset: 18134
    000046db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4876:
    000046e0: 	movq	0x210(%rsp), %rdx
    000046e8: 	movq	%r12, %rsi
    000046eb: 	movl	$0x1, %edi
    000046f0: 	xorl	%eax, %eax
    000046f2: 	callq	__printf_chk@PLT # Offset: 18162
    000046f7: 	movl	iterations(%rip), %r13d
    000046fe: 	jmp	.Ltmp4938 # Offset: 18174
    00004703: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4869:
    00004708: 	movq	0x210(%rsp), %rdx
    00004710: 	movq	%r12, %rsi
    00004713: 	movl	$0x1, %edi
    00004718: 	xorl	%eax, %eax
    0000471a: 	callq	__printf_chk@PLT # Offset: 18202
    0000471f: 	movl	iterations(%rip), %r13d
    00004726: 	jmp	.Ltmp4939 # Offset: 18214
    0000472b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4862:
    00004730: 	movq	0x210(%rsp), %rdx
    00004738: 	movq	%r12, %rsi
    0000473b: 	movl	$0x1, %edi
    00004740: 	xorl	%eax, %eax
    00004742: 	callq	__printf_chk@PLT # Offset: 18242
    00004747: 	movl	iterations(%rip), %r13d
    0000474e: 	jmp	.Ltmp4940 # Offset: 18254
    00004753: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4855:
    00004758: 	movq	0x210(%rsp), %rdx
    00004760: 	movq	%r12, %rsi
    00004763: 	movl	$0x1, %edi
    00004768: 	xorl	%eax, %eax
    0000476a: 	callq	__printf_chk@PLT # Offset: 18282
    0000476f: 	movl	iterations(%rip), %r13d
    00004776: 	jmp	.Ltmp4941 # Offset: 18294
    0000477b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4846:
    00004780: 	movq	0x210(%rsp), %rdx
    00004788: 	movq	%r12, %rsi
    0000478b: 	movl	$0x1, %edi
    00004790: 	xorl	%eax, %eax
    00004792: 	callq	__printf_chk@PLT # Offset: 18322
    00004797: 	movl	iterations(%rip), %r13d
    0000479e: 	jmp	.Ltmp4942 # Offset: 18334
    000047a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4840:
    000047a8: 	movq	0x210(%rsp), %rdx
    000047b0: 	movq	%r12, %rsi
    000047b3: 	movl	$0x1, %edi
    000047b8: 	xorl	%eax, %eax
    000047ba: 	callq	__printf_chk@PLT # Offset: 18362
    000047bf: 	movl	iterations(%rip), %r13d
    000047c6: 	jmp	.Ltmp4943 # Offset: 18374
    000047cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4833:
    000047d0: 	movq	0x210(%rsp), %rdx
    000047d8: 	movq	%r12, %rsi
    000047db: 	movl	$0x1, %edi
    000047e0: 	xorl	%eax, %eax
    000047e2: 	callq	__printf_chk@PLT # Offset: 18402
    000047e7: 	movl	iterations(%rip), %r13d
    000047ee: 	jmp	.Ltmp4944 # Offset: 18414
    000047f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4827:
    000047f8: 	movq	0x210(%rsp), %rdx
    00004800: 	leaq	DATAat0x4d004(%rip), %rsi
    00004807: 	movl	$0x1, %edi
    0000480c: 	xorl	%eax, %eax
    0000480e: 	callq	__printf_chk@PLT # Offset: 18446
    00004813: 	movl	iterations(%rip), %r9d
    0000481a: 	jmp	.Ltmp4945 # Offset: 18458
    0000481f: 	nop # Size: 1
.Ltmp4821:
    00004820: 	movq	0x210(%rsp), %rdx
    00004828: 	movq	%r12, %rsi
    0000482b: 	movl	$0x1, %edi
    00004830: 	xorl	%eax, %eax
    00004832: 	callq	__printf_chk@PLT # Offset: 18482
    00004837: 	movl	iterations(%rip), %r13d
    0000483e: 	jmp	.Ltmp4946 # Offset: 18494
    00004843: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4814:
    00004848: 	movq	0x210(%rsp), %rdx
    00004850: 	movq	%r12, %rsi
    00004853: 	movl	$0x1, %edi
    00004858: 	xorl	%eax, %eax
    0000485a: 	callq	__printf_chk@PLT # Offset: 18522
    0000485f: 	movl	iterations(%rip), %r13d
    00004866: 	jmp	.Ltmp4947 # Offset: 18534
    0000486b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4808:
    00004870: 	movq	0x210(%rsp), %rdx
    00004878: 	leaq	DATAat0x4d004(%rip), %rsi
    0000487f: 	movl	$0x1, %edi
    00004884: 	xorl	%eax, %eax
    00004886: 	callq	__printf_chk@PLT # Offset: 18566
    0000488b: 	movl	iterations(%rip), %eax
    00004891: 	movl	%eax, 0x58(%rsp)
    00004895: 	jmp	.Ltmp4948 # Offset: 18581
    0000489a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4802:
    000048a0: 	movq	0x210(%rsp), %rdx
    000048a8: 	movq	%r12, %rsi
    000048ab: 	movl	$0x1, %edi
    000048b0: 	xorl	%eax, %eax
    000048b2: 	callq	__printf_chk@PLT # Offset: 18610
    000048b7: 	movl	iterations(%rip), %r13d
    000048be: 	jmp	.Ltmp4949 # Offset: 18622
    000048c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4795:
    000048c8: 	movq	0x210(%rsp), %rdx
    000048d0: 	leaq	DATAat0x4d004(%rip), %rsi
    000048d7: 	movl	$0x1, %edi
    000048dc: 	xorl	%eax, %eax
    000048de: 	callq	__printf_chk@PLT # Offset: 18654
    000048e3: 	movl	iterations(%rip), %r13d
    000048ea: 	jmp	.Ltmp4950 # Offset: 18666
    000048ef: 	nop # Size: 1
.Ltmp4788:
    000048f0: 	movq	0x210(%rsp), %rdx
    000048f8: 	movq	%r12, %rsi
    000048fb: 	movl	$0x1, %edi
    00004900: 	xorl	%eax, %eax
    00004902: 	callq	__printf_chk@PLT # Offset: 18690
    00004907: 	movl	iterations(%rip), %r13d
    0000490e: 	jmp	.Ltmp4951 # Offset: 18702
    00004913: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4782:
    00004918: 	movq	0x210(%rsp), %rdx
    00004920: 	movq	%r12, %rsi
    00004923: 	movl	$0x1, %edi
    00004928: 	xorl	%eax, %eax
    0000492a: 	callq	__printf_chk@PLT # Offset: 18730
    0000492f: 	movl	iterations(%rip), %r13d
    00004936: 	jmp	.Ltmp4952 # Offset: 18742
    0000493b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4776:
    00004940: 	movq	0x210(%rsp), %rdx
    00004948: 	leaq	DATAat0x4d004(%rip), %rsi
    0000494f: 	movl	$0x1, %edi
    00004954: 	xorl	%eax, %eax
    00004956: 	callq	__printf_chk@PLT # Offset: 18774
    0000495b: 	movl	iterations(%rip), %edi
    00004961: 	jmp	.Ltmp4953 # Offset: 18785
    00004966: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp4770:
    00004970: 	movq	0x210(%rsp), %rdx
    00004978: 	leaq	DATAat0x4d004(%rip), %rsi
    0000497f: 	movl	$0x1, %edi
    00004984: 	xorl	%eax, %eax
    00004986: 	callq	__printf_chk@PLT # Offset: 18822
    0000498b: 	movl	iterations(%rip), %r12d
    00004992: 	jmp	.Ltmp4954 # Offset: 18834
    00004997: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4764:
    000049a0: 	movq	0x210(%rsp), %rdx
    000049a8: 	leaq	DATAat0x4d004(%rip), %rsi
    000049af: 	movl	$0x1, %edi
    000049b4: 	xorl	%eax, %eax
    000049b6: 	callq	__printf_chk@PLT # Offset: 18870
    000049bb: 	movl	iterations(%rip), %r9d
    000049c2: 	jmp	.Ltmp4955 # Offset: 18882
    000049c7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4758:
    000049d0: 	movq	0x210(%rsp), %rdx
    000049d8: 	leaq	DATAat0x4d004(%rip), %rsi
    000049df: 	movl	$0x1, %edi
    000049e4: 	xorl	%eax, %eax
    000049e6: 	callq	__printf_chk@PLT # Offset: 18918
    000049eb: 	movl	iterations(%rip), %r12d
    000049f2: 	jmp	.Ltmp4956 # Offset: 18930
    000049f7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4752:
    00004a00: 	movq	0x210(%rsp), %rdx
    00004a08: 	leaq	DATAat0x4d004(%rip), %rsi
    00004a0f: 	movl	$0x1, %edi
    00004a14: 	xorl	%eax, %eax
    00004a16: 	callq	__printf_chk@PLT # Offset: 18966
    00004a1b: 	movl	iterations(%rip), %r13d
    00004a22: 	jmp	.Ltmp4957 # Offset: 18978
    00004a27: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4746:
    00004a30: 	movq	0x210(%rsp), %rdx
    00004a38: 	leaq	DATAat0x4d004(%rip), %rsi
    00004a3f: 	movl	$0x1, %edi
    00004a44: 	xorl	%eax, %eax
    00004a46: 	callq	__printf_chk@PLT # Offset: 19014
    00004a4b: 	movl	iterations(%rip), %r12d
    00004a52: 	jmp	.Ltmp4958 # Offset: 19026
    00004a57: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4740:
    00004a60: 	movq	0x210(%rsp), %rdx
    00004a68: 	leaq	DATAat0x4d004(%rip), %rsi
    00004a6f: 	movl	$0x1, %edi
    00004a74: 	xorl	%eax, %eax
    00004a76: 	callq	__printf_chk@PLT # Offset: 19062
    00004a7b: 	movl	iterations(%rip), %r12d
    00004a82: 	jmp	.Ltmp4959 # Offset: 19074
    00004a87: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4734:
    00004a90: 	movq	0x210(%rsp), %rdx
    00004a98: 	leaq	DATAat0x4d004(%rip), %rsi
    00004a9f: 	movl	$0x1, %edi
    00004aa4: 	xorl	%eax, %eax
    00004aa6: 	callq	__printf_chk@PLT # Offset: 19110
    00004aab: 	movl	iterations(%rip), %r12d
    00004ab2: 	jmp	.Ltmp4960 # Offset: 19122
    00004ab7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4728:
    00004ac0: 	movq	0x210(%rsp), %rdx
    00004ac8: 	leaq	DATAat0x4d004(%rip), %rsi
    00004acf: 	movl	$0x1, %edi
    00004ad4: 	xorl	%eax, %eax
    00004ad6: 	callq	__printf_chk@PLT # Offset: 19158
    00004adb: 	movl	iterations(%rip), %r12d
    00004ae2: 	jmp	.Ltmp4961 # Offset: 19170
    00004ae7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4722:
    00004af0: 	movq	0x210(%rsp), %rdx
    00004af8: 	leaq	DATAat0x4d004(%rip), %rsi
    00004aff: 	movl	$0x1, %edi
    00004b04: 	xorl	%eax, %eax
    00004b06: 	callq	__printf_chk@PLT # Offset: 19206
    00004b0b: 	movl	iterations(%rip), %r12d
    00004b12: 	jmp	.Ltmp4962 # Offset: 19218
    00004b17: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4716:
    00004b20: 	movq	0x210(%rsp), %rdx
    00004b28: 	leaq	DATAat0x4d004(%rip), %rsi
    00004b2f: 	movl	$0x1, %edi
    00004b34: 	xorl	%eax, %eax
    00004b36: 	callq	__printf_chk@PLT # Offset: 19254
    00004b3b: 	movl	iterations(%rip), %r12d
    00004b42: 	jmp	.Ltmp4963 # Offset: 19266
    00004b47: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4710:
    00004b50: 	movq	0x210(%rsp), %rdx
    00004b58: 	leaq	DATAat0x4d004(%rip), %rsi
    00004b5f: 	movl	$0x1, %edi
    00004b64: 	xorl	%eax, %eax
    00004b66: 	callq	__printf_chk@PLT # Offset: 19302
    00004b6b: 	movl	iterations(%rip), %r12d
    00004b72: 	jmp	.Ltmp4964 # Offset: 19314
    00004b77: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4704:
    00004b80: 	movq	0x210(%rsp), %rdx
    00004b88: 	leaq	DATAat0x4d004(%rip), %rsi
    00004b8f: 	movl	$0x1, %edi
    00004b94: 	xorl	%eax, %eax
    00004b96: 	callq	__printf_chk@PLT # Offset: 19350
    00004b9b: 	movl	iterations(%rip), %r12d
    00004ba2: 	jmp	.Ltmp4965 # Offset: 19362
.Ltmp4706:
    00004ba7: 	movq	-0x8(%rdx), %rax
    00004bab: 	addq	$0x200, %rax
    00004bb1: 	jmp	.Ltmp4966 # Offset: 19377
.Ltmp4921:
    00004bb6: 	movq	-0x8(%rdx), %rax
    00004bba: 	addq	$0x200, %rax
    00004bc0: 	jmp	.Ltmp4967 # Offset: 19392
.Ltmp4914:
    00004bc5: 	movq	-0x8(%rdx), %rax
    00004bc9: 	addq	$0x200, %rax
    00004bcf: 	jmp	.Ltmp4968 # Offset: 19407
.Ltmp4907:
    00004bd4: 	movq	-0x8(%rdx), %rax
    00004bd8: 	addq	$0x200, %rax
    00004bde: 	jmp	.Ltmp4969 # Offset: 19422
.Ltmp4900:
    00004be3: 	movq	-0x8(%rdx), %rax
    00004be7: 	addq	$0x200, %rax
    00004bed: 	jmp	.Ltmp4970 # Offset: 19437
.Ltmp4891:
    00004bf2: 	movq	-0x8(%rdx), %rax
    00004bf6: 	addq	$0x200, %rax
    00004bfc: 	jmp	.Ltmp4971 # Offset: 19452
.Ltmp4885:
    00004c01: 	movq	-0x8(%rdx), %rax
    00004c05: 	addq	$0x200, %rax
    00004c0b: 	jmp	.Ltmp4972 # Offset: 19467
.Ltmp4878:
    00004c10: 	movq	-0x8(%rdx), %rax
    00004c14: 	addq	$0x200, %rax
    00004c1a: 	jmp	.Ltmp4973 # Offset: 19482
.Ltmp4871:
    00004c1f: 	movq	-0x8(%rdx), %rax
    00004c23: 	addq	$0x200, %rax
    00004c29: 	jmp	.Ltmp4974 # Offset: 19497
.Ltmp4864:
    00004c2e: 	movq	-0x8(%rdx), %rax
    00004c32: 	addq	$0x200, %rax
    00004c38: 	jmp	.Ltmp4975 # Offset: 19512
.Ltmp4857:
    00004c3d: 	movq	-0x8(%rdx), %rax
    00004c41: 	addq	$0x200, %rax
    00004c47: 	jmp	.Ltmp4976 # Offset: 19527
.Ltmp4848:
    00004c4c: 	movq	-0x8(%rdx), %rax
    00004c50: 	addq	$0x200, %rax
    00004c56: 	jmp	.Ltmp4977 # Offset: 19542
.Ltmp4842:
    00004c5b: 	movq	-0x8(%rdx), %rax
    00004c5f: 	addq	$0x200, %rax
    00004c65: 	jmp	.Ltmp4978 # Offset: 19557
.Ltmp4835:
    00004c6a: 	movq	-0x8(%rdx), %rax
    00004c6e: 	addq	$0x200, %rax
    00004c74: 	jmp	.Ltmp4979 # Offset: 19572
.Ltmp4829:
    00004c79: 	movq	-0x8(%rdx), %rax
    00004c7d: 	addq	$0x200, %rax
    00004c83: 	jmp	.Ltmp4980 # Offset: 19587
.Ltmp4823:
    00004c88: 	movq	-0x8(%rdx), %rax
    00004c8c: 	addq	$0x200, %rax
    00004c92: 	jmp	.Ltmp4981 # Offset: 19602
.Ltmp4816:
    00004c97: 	movq	-0x8(%rdx), %rax
    00004c9b: 	addq	$0x200, %rax
    00004ca1: 	jmp	.Ltmp4982 # Offset: 19617
.Ltmp4810:
    00004ca6: 	movq	-0x8(%rdx), %rax
    00004caa: 	addq	$0x200, %rax
    00004cb0: 	jmp	.Ltmp4983 # Offset: 19632
.Ltmp4804:
    00004cb5: 	movq	-0x8(%rdx), %rax
    00004cb9: 	addq	$0x200, %rax
    00004cbf: 	jmp	.Ltmp4984 # Offset: 19647
.Ltmp4797:
    00004cc4: 	movq	-0x8(%rdx), %rax
    00004cc8: 	addq	$0x200, %rax
    00004cce: 	jmp	.Ltmp4985 # Offset: 19662
.Ltmp4790:
    00004cd3: 	movq	-0x8(%rdx), %rax
    00004cd7: 	addq	$0x200, %rax
    00004cdd: 	jmp	.Ltmp4986 # Offset: 19677
.Ltmp4784:
    00004ce2: 	movq	-0x8(%rdx), %rax
    00004ce6: 	addq	$0x200, %rax
    00004cec: 	jmp	.Ltmp4987 # Offset: 19692
.Ltmp4778:
    00004cf1: 	movq	-0x8(%rdx), %rax
    00004cf5: 	addq	$0x200, %rax
    00004cfb: 	jmp	.Ltmp4988 # Offset: 19707
.Ltmp4772:
    00004d00: 	movq	-0x8(%rdx), %rax
    00004d04: 	addq	$0x200, %rax
    00004d0a: 	jmp	.Ltmp4989 # Offset: 19722
.Ltmp4766:
    00004d0f: 	movq	-0x8(%rdx), %rax
    00004d13: 	addq	$0x200, %rax
    00004d19: 	jmp	.Ltmp4990 # Offset: 19737
.Ltmp4760:
    00004d1e: 	movq	-0x8(%rdx), %rax
    00004d22: 	addq	$0x200, %rax
    00004d28: 	jmp	.Ltmp4991 # Offset: 19752
.Ltmp4754:
    00004d2d: 	movq	-0x8(%rdx), %rax
    00004d31: 	addq	$0x200, %rax
    00004d37: 	jmp	.Ltmp4992 # Offset: 19767
.Ltmp4748:
    00004d3c: 	movq	-0x8(%rdx), %rax
    00004d40: 	addq	$0x200, %rax
    00004d46: 	jmp	.Ltmp4993 # Offset: 19782
.Ltmp4742:
    00004d4b: 	movq	-0x8(%rdx), %rax
    00004d4f: 	addq	$0x200, %rax
    00004d55: 	jmp	.Ltmp4994 # Offset: 19797
.Ltmp4736:
    00004d5a: 	movq	-0x8(%rdx), %rax
    00004d5e: 	addq	$0x200, %rax
    00004d64: 	jmp	.Ltmp4995 # Offset: 19812
.Ltmp4730:
    00004d69: 	movq	-0x8(%rdx), %rax
    00004d6d: 	addq	$0x200, %rax
    00004d73: 	jmp	.Ltmp4996 # Offset: 19827
.Ltmp4724:
    00004d78: 	movq	-0x8(%rdx), %rax
    00004d7c: 	addq	$0x200, %rax
    00004d82: 	jmp	.Ltmp4997 # Offset: 19842
.Ltmp4718:
    00004d87: 	movq	-0x8(%rdx), %rax
    00004d8b: 	addq	$0x200, %rax
    00004d91: 	jmp	.Ltmp4998 # Offset: 19857
.Ltmp4712:
    00004d96: 	movq	-0x8(%rdx), %rax
    00004d9a: 	addq	$0x200, %rax
    00004da0: 	jmp	.Ltmp4999 # Offset: 19872
.Ltmp4931:
    00004da5: 	callq	__stack_chk_fail@PLT # Offset: 19877
    00004daa: 	endbr64
    00004dae: 	movq	%rax, %rbp
    00004db1: 	jmp	.Ltmp5000 # Offset: 19889
    00004db3: 	endbr64
.Ltmp5002:
    00004db7: 	movq	%rax, %rbp
    00004dba: 	jmp	.Ltmp5001 # Offset: 19898
    00004dbc: 	endbr64
    00004dc0: 	jmp	.Ltmp5002 # Offset: 19904
.Ltmp5008:
    00004dc2: 	movq	0x210(%rsp), %rdi
    00004dca: 	cmpq	(%rsp), %rdi
    00004dce: 	je	.Ltmp5000 # Offset: 19918
.Ltmp5015:
    00004dd0: 	movq	0x220(%rsp), %rax
    00004dd8: 	leaq	0x1(%rax), %rsi
    00004ddc: 	callq	_ZdlPvm@PLT # Offset: 19932
.Ltmp5000:
    00004de1: 	movq	0x170(%rsp), %rdi
    00004de9: 	leaq	0x180(%rsp), %rax
    00004df1: 	cmpq	%rax, %rdi
    00004df4: 	je	.Ltmp5003 # Offset: 19956
    00004df6: 	movq	0x180(%rsp), %rax
    00004dfe: 	leaq	0x1(%rax), %rsi
    00004e02: 	callq	_ZdlPvm@PLT # Offset: 19970
.Ltmp5003:
    00004e07: 	movq	%rbp, %rdi
    00004e0a: 	callq	_Unwind_Resume@PLT # Offset: 19978
.Ltmp5001:
    00004e0f: 	movq	0x210(%rsp), %rdi
    00004e17: 	cmpq	(%rsp), %rdi
    00004e1b: 	je	.Ltmp5004 # Offset: 19995
    00004e1d: 	movq	0x220(%rsp), %rax
    00004e25: 	leaq	0x1(%rax), %rsi
    00004e29: 	callq	_ZdlPvm@PLT # Offset: 20009
.Ltmp5004:
    00004e2e: 	movq	0x1f0(%rsp), %rdi
    00004e36: 	leaq	0x200(%rsp), %rax
    00004e3e: 	cmpq	%rax, %rdi
    00004e41: 	je	.Ltmp5005 # Offset: 20033
    00004e43: 	movq	0x200(%rsp), %rax
    00004e4b: 	leaq	0x1(%rax), %rsi
    00004e4f: 	callq	_ZdlPvm@PLT # Offset: 20047
.Ltmp5005:
    00004e54: 	movq	0x1d0(%rsp), %rdi
    00004e5c: 	leaq	0x1e0(%rsp), %rax
    00004e64: 	cmpq	%rax, %rdi
    00004e67: 	je	.Ltmp5006 # Offset: 20071
    00004e69: 	movq	0x1e0(%rsp), %rax
    00004e71: 	leaq	0x1(%rax), %rsi
    00004e75: 	callq	_ZdlPvm@PLT # Offset: 20085
.Ltmp5006:
    00004e7a: 	movq	0x1b0(%rsp), %rdi
    00004e82: 	leaq	0x1c0(%rsp), %rax
    00004e8a: 	cmpq	%rax, %rdi
    00004e8d: 	je	.Ltmp5007 # Offset: 20109
    00004e8f: 	movq	0x1c0(%rsp), %rax
    00004e97: 	leaq	0x1(%rax), %rsi
    00004e9b: 	callq	_ZdlPvm@PLT # Offset: 20123
.Ltmp5007:
    00004ea0: 	movq	0x190(%rsp), %rdi
    00004ea8: 	leaq	0x1a0(%rsp), %rax
    00004eb0: 	cmpq	%rax, %rdi
    00004eb3: 	je	.Ltmp5000 # Offset: 20147
    00004eb9: 	movq	0x1a0(%rsp), %rax
    00004ec1: 	leaq	0x1(%rax), %rsi
    00004ec5: 	callq	_ZdlPvm@PLT # Offset: 20165
    00004eca: 	jmp	.Ltmp5000 # Offset: 20170
    00004ecf: 	endbr64
.Ltmp5009:
    00004ed3: 	movq	%rax, %rbp
    00004ed6: 	jmp	.Ltmp5008 # Offset: 20182
    00004edb: 	endbr64
    00004edf: 	jmp	.Ltmp5009 # Offset: 20191
    00004ee1: 	endbr64
    00004ee5: 	jmp	.Ltmp5009 # Offset: 20197
    00004ee7: 	endbr64
    00004eeb: 	jmp	.Ltmp5009 # Offset: 20203
    00004eed: 	endbr64
    00004ef1: 	jmp	.Ltmp5009 # Offset: 20209
    00004ef3: 	endbr64
    00004ef7: 	jmp	.Ltmp5009 # Offset: 20215
    00004ef9: 	endbr64
    00004efd: 	jmp	.Ltmp5009 # Offset: 20221
    00004eff: 	endbr64
    00004f03: 	jmp	.Ltmp5009 # Offset: 20227
    00004f05: 	endbr64
.Ltmp5017:
    00004f09: 	movq	%rax, %rbp
    00004f0c: 	jmp	.Ltmp5010 # Offset: 20236
    00004f0e: 	endbr64
.Ltmp5012:
    00004f12: 	movq	%rax, %rbp
    00004f15: 	jmp	.Ltmp5011 # Offset: 20245
    00004f1a: 	endbr64
    00004f1e: 	jmp	.Ltmp5012 # Offset: 20254
    00004f20: 	endbr64
    00004f24: 	jmp	.Ltmp5012 # Offset: 20260
    00004f26: 	endbr64
    00004f2a: 	jmp	.Ltmp5012 # Offset: 20266
    00004f2c: 	endbr64
    00004f30: 	jmp	.Ltmp5012 # Offset: 20272
    00004f32: 	endbr64
    00004f36: 	jmp	.Ltmp5012 # Offset: 20278
    00004f38: 	endbr64
    00004f3c: 	jmp	.Ltmp5012 # Offset: 20284
    00004f3e: 	endbr64
    00004f42: 	movq	%rax, %rbp
    00004f45: 	jmp	.Ltmp5007 # Offset: 20293
    00004f4a: 	endbr64
    00004f4e: 	jmp	.Ltmp5012 # Offset: 20302
    00004f50: 	endbr64
    00004f54: 	movq	%rax, %rbp
    00004f57: 	jmp	.Ltmp5006 # Offset: 20311
    00004f5c: 	endbr64
    00004f60: 	jmp	.Ltmp5012 # Offset: 20320
    00004f62: 	endbr64
    00004f66: 	jmp	.Ltmp5012 # Offset: 20326
    00004f68: 	endbr64
    00004f6c: 	jmp	.Ltmp5012 # Offset: 20332
    00004f6e: 	endbr64
    00004f72: 	jmp	.Ltmp5012 # Offset: 20338
    00004f74: 	endbr64
    00004f78: 	jmp	.Ltmp5012 # Offset: 20344
.Ltmp5010:
    00004f7a: 	movq	0x210(%rsp), %rdi
    00004f82: 	cmpq	(%rsp), %rdi
    00004f86: 	je	.Ltmp5006 # Offset: 20358
    00004f8c: 	movq	0x220(%rsp), %rax
    00004f94: 	leaq	0x1(%rax), %rsi
    00004f98: 	callq	_ZdlPvm@PLT # Offset: 20376
    00004f9d: 	jmp	.Ltmp5006 # Offset: 20381
.Ltmp5011:
    00004fa2: 	movq	0x210(%rsp), %rdi
    00004faa: 	cmpq	(%rsp), %rdi
    00004fae: 	je	.Ltmp5007 # Offset: 20398
    00004fb4: 	movq	0x220(%rsp), %rax
    00004fbc: 	leaq	0x1(%rax), %rsi
    00004fc0: 	callq	_ZdlPvm@PLT # Offset: 20416
    00004fc5: 	jmp	.Ltmp5007 # Offset: 20421
    00004fca: 	endbr64
    00004fce: 	jmp	.Ltmp5009 # Offset: 20430
    00004fd3: 	endbr64
    00004fd7: 	jmp	.Ltmp5009 # Offset: 20439
    00004fdc: 	endbr64
    00004fe0: 	jmp	.Ltmp5009 # Offset: 20448
    00004fe5: 	endbr64
    00004fe9: 	jmp	.Ltmp5009 # Offset: 20457
    00004fee: 	endbr64
    00004ff2: 	movq	%rax, %rbp
    00004ff5: 	jmp	.Ltmp5013 # Offset: 20469
    00004ff7: 	endbr64
.Ltmp5016:
    00004ffb: 	movq	%rax, %rbp
    00004ffe: 	jmp	.Ltmp5014 # Offset: 20478
.Ltmp5013:
    00005000: 	movq	0x210(%rsp), %rdi
    00005008: 	leaq	0x220(%rsp), %rax
    00005010: 	cmpq	%rax, %rdi
    00005013: 	jne	.Ltmp5015 # Offset: 20499
    00005019: 	jmp	.Ltmp5000 # Offset: 20505
    0000501e: 	endbr64
    00005022: 	movq	%rax, %rbp
    00005025: 	jmp	.Ltmp5004 # Offset: 20517
    0000502a: 	endbr64
    0000502e: 	jmp	.Ltmp5016 # Offset: 20526
.Ltmp5014:
    00005030: 	movq	0x210(%rsp), %rdi
    00005038: 	cmpq	(%rsp), %rdi
    0000503c: 	je	.Ltmp5005 # Offset: 20540
    00005042: 	movq	0x220(%rsp), %rax
    0000504a: 	leaq	0x1(%rax), %rsi
    0000504e: 	callq	_ZdlPvm@PLT # Offset: 20558
    00005053: 	jmp	.Ltmp5005 # Offset: 20563
    00005058: 	endbr64
    0000505c: 	jmp	.Ltmp5016 # Offset: 20572
    0000505e: 	endbr64
    00005062: 	jmp	.Ltmp5016 # Offset: 20578
    00005064: 	endbr64
    00005068: 	jmp	.Ltmp5016 # Offset: 20584
    0000506a: 	endbr64
    0000506e: 	jmp	.Ltmp5016 # Offset: 20590
    00005070: 	endbr64
    00005074: 	jmp	.Ltmp5016 # Offset: 20596
    00005076: 	endbr64
    0000507a: 	jmp	.Ltmp5016 # Offset: 20602
    0000507f: 	endbr64
    00005083: 	jmp	.Ltmp5016 # Offset: 20611
    00005088: 	endbr64
    0000508c: 	jmp	.Ltmp5016 # Offset: 20620
    00005091: 	endbr64
    00005095: 	jmp	.Ltmp5017 # Offset: 20629
    0000509a: 	endbr64
    0000509e: 	jmp	.Ltmp5017 # Offset: 20638
    000050a3: 	endbr64
    000050a7: 	jmp	.Ltmp5017 # Offset: 20647
    000050ac: 	endbr64
    000050b0: 	jmp	.Ltmp5017 # Offset: 20656
    000050b5: 	endbr64
    000050b9: 	jmp	.Ltmp5017 # Offset: 20665
    000050be: 	endbr64
    000050c2: 	jmp	.Ltmp5017 # Offset: 20674
    000050c7: 	endbr64
    000050cb: 	jmp	.Ltmp5017 # Offset: 20683
    000050d0: 	endbr64
    000050d4: 	jmp	.Ltmp5017 # Offset: 20692
    000050d9: 	endbr64
    000050dd: 	jmp	.Ltmp5016 # Offset: 20701
    000050e2: 	endbr64
    000050e6: 	jmp	.Ltmp5017 # Offset: 20710
    000050eb: 	endbr64
    000050ef: 	movq	%rax, %rbp
    000050f2: 	jmp	.Ltmp5005 # Offset: 20722
    000050f7: 	endbr64
    000050fb: 	jmp	.Ltmp5017 # Offset: 20731
    00005100: 	endbr64
    00005104: 	jmp	.Ltmp5016 # Offset: 20740
    00005109: 	endbr64
    0000510d: 	jmp	.Ltmp5016 # Offset: 20749
    00005112: 	endbr64
    00005116: 	jmp	.Ltmp5017 # Offset: 20758
    0000511b: 	endbr64
    0000511f: 	jmp	.Ltmp5017 # Offset: 20767
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIaEvd"

Binary Function "_Z16TestUnrolledTypeIhLi4EEvPT_S0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 189
  State       : disassembled
  Address     : 0x45390
  Size        : 0x27bf
  MaxSize     : 0x27c0
  Offset      : 0x45390
  Section     : .text
  Orc Section : .local.text._Z16TestUnrolledTypeIhLi4EEvPT_S0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0188:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r15d
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	leaq	DATAat0x4d004(%rip), %r12
    00000016: 	pushq	%rbp
    00000017: 	xorl	%ebp, %ebp
    00000019: 	pushq	%rbx
    0000001a: 	movq	%rdi, %rbx
    0000001d: 	movq	%rdx, %rdi
    00000020: 	movq	%rdi, %rsi
    00000023: 	leaq	0x1f30(%rbx), %r14
    0000002a: 	subq	$0x158, %rsp
    00000031: 	movq	%rdx, 0xc0(%rsp)
    00000039: 	leaq	DATAat0x4d1e4(%rip), %rdx
    00000040: 	movq	%fs:0x28, %rax
    00000049: 	movq	%rax, 0x148(%rsp)
    00000051: 	xorl	%eax, %eax
    00000053: 	leaq	0x120(%rsp), %rax
    0000005b: 	movq	%rax, %rdi
    0000005e: 	movq	%rax, 0xb0(%rsp)
    00000066: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 102
    0000006b: 	callq	clock@PLT # Offset: 107
    00000070: 	movl	iterations(%rip), %r13d
    00000077: 	movq	%rax, start_time(%rip)
    0000007e: 	testl	%r13d, %r13d
    00000081: 	jle	.Ltmp5018 # Offset: 129
    00000087: 	nopw	(%rax,%rax) # Size: 9
.Ltmp5021:
    00000090: 	movzbl	(%rbx), %ecx
    00000093: 	movq	%rbx, %rax
    00000096: 	subb	0x1(%rbx), %cl
    00000099: 	pxor	%xmm1, %xmm1
    0000009d: 	nopl	(%rax) # Size: 3
.Ltmp5019:
    000000a0: 	movdqu	(%rax), %xmm0
    000000a4: 	movdqu	0x1(%rax), %xmm7
    000000a9: 	addq	$0x10, %rax
    000000ad: 	psubb	%xmm7, %xmm0
    000000b1: 	paddb	%xmm0, %xmm0
    000000b5: 	paddb	%xmm0, %xmm0
    000000b9: 	paddb	%xmm0, %xmm1
    000000bd: 	cmpq	%rax, %r14
    000000c0: 	jne	.Ltmp5019 # Offset: 192
    000000c2: 	movdqa	%xmm1, %xmm0
    000000c6: 	psrldq	$0x8, %xmm0
    000000cb: 	paddb	%xmm0, %xmm1
    000000cf: 	pxor	%xmm0, %xmm0
    000000d3: 	psadbw	%xmm0, %xmm1
    000000d7: 	movq	0x1f30(%rbx), %xmm0
    000000df: 	movd	%xmm1, %edx
    000000e3: 	movq	0x1f31(%rbx), %xmm1
    000000eb: 	psubb	%xmm1, %xmm0
    000000ef: 	pxor	%xmm1, %xmm1
    000000f3: 	paddb	%xmm0, %xmm0
    000000f7: 	paddb	%xmm0, %xmm0
    000000fb: 	movdqa	%xmm0, %xmm6
    000000ff: 	psadbw	%xmm1, %xmm6
    00000103: 	movq	%xmm6, 0x108(%rsp)
    0000010c: 	movq	%xmm6, %rax
    00000111: 	movzbl	0x1f39(%rbx), %r10d
    00000119: 	movzbl	0x1f3a(%rbx), %r9d
    00000121: 	movl	%eax, %r11d
    00000124: 	movzbl	0x1f38(%rbx), %eax
    0000012b: 	movzbl	0x1f3b(%rbx), %r8d
    00000133: 	subb	0x1f3f(%rbx), %cl
    00000139: 	addb	0x1f3e(%rbx), %cl
    0000013f: 	addl	%edx, %r11d
    00000142: 	subl	%r10d, %eax
    00000145: 	movzbl	0x1f3c(%rbx), %edi
    0000014c: 	subl	%r9d, %r10d
    0000014f: 	movzbl	0x1f3d(%rbx), %esi
    00000156: 	addl	%ecx, %eax
    00000158: 	subl	%r8d, %r9d
    0000015b: 	addl	%r10d, %eax
    0000015e: 	subl	%edi, %r8d
    00000161: 	subl	%esi, %edi
    00000163: 	subb	0x1f3e(%rbx), %sil
    0000016a: 	addl	%eax, %r9d
    0000016d: 	addl	%r9d, %r8d
    00000170: 	addl	%r8d, %edi
    00000173: 	addl	%edi, %esi
    00000175: 	leal	(%r11,%rsi,4), %esi
    00000179: 	testb	%sil, %sil
    0000017c: 	jne	.Ltmp5020 # Offset: 380
.Ltmp5135:
    00000182: 	addl	$0x1, %ebp
    00000185: 	cmpl	%r13d, %ebp
    00000188: 	jl	.Ltmp5021 # Offset: 392
.Ltmp5018:
    0000018e: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000195: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbp
    0000019c: 	subq	$0x20, %rax
    000001a0: 	cmpq	%rax, %rbp
    000001a3: 	je	.Ltmp5022 # Offset: 419
    000001a9: 	leaq	0x10(%rbp), %rdi
    000001ad: 	movq	0x128(%rsp), %r12
    000001b5: 	movq	%rdi, (%rbp)
    000001b9: 	movq	0x120(%rsp), %r13
    000001c1: 	movq	%r13, %rax
    000001c4: 	addq	%r12, %rax
    000001c7: 	je	.Ltmp5023 # Offset: 455
    000001c9: 	testq	%r13, %r13
    000001cc: 	je	.Ltmp5024 # Offset: 460
.Ltmp5023:
    000001d2: 	movq	%r12, 0x118(%rsp)
    000001da: 	cmpq	$0xf, %r12
    000001de: 	ja	.Ltmp5025 # Offset: 478
    000001e4: 	cmpq	$0x1, %r12
    000001e8: 	jne	.Ltmp5026 # Offset: 488
    000001ee: 	movzbl	(%r13), %eax
    000001f3: 	movb	%al, 0x10(%rbp)
.Ltmp5136:
    000001f6: 	movq	%r12, 0x8(%rbp)
    000001fa: 	movb	$0x0, (%rdi,%r12)
    000001ff: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000206: 	addq	$0x20, %rax
    0000020a: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp5159:
    00000211: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000218: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000021f: 	je	.Ltmp5027 # Offset: 543
.Ltmp5154:
    00000225: 	movq	-0x20(%rax), %rbp
    00000229: 	callq	clock@PLT # Offset: 553
    0000022e: 	pxor	%xmm0, %xmm0
    00000232: 	movq	%rax, end_time(%rip)
    00000239: 	movq	%rbp, %rdi
    0000023c: 	subq	start_time(%rip), %rax
    00000243: 	cvtsi2sd	%rax, %xmm0
    00000248: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000250: 	callq	_Z13record_resultdPKc # Offset: 592
    00000255: 	movq	0x120(%rsp), %rdi
    0000025d: 	leaq	0x130(%rsp), %rax
    00000265: 	movq	%rax, 0xc8(%rsp)
    0000026d: 	cmpq	%rax, %rdi
    00000270: 	je	.Ltmp5028 # Offset: 624
    00000272: 	movq	0x130(%rsp), %rax
    0000027a: 	leaq	0x1(%rax), %rsi
    0000027e: 	callq	_ZdlPvm@PLT # Offset: 638
.Ltmp5028:
    00000283: 	leaq	DATAat0x4d1f1(%rip), %rdx
    0000028a: 	movq	0xc0(%rsp), %rsi
    00000292: 	xorl	%ebp, %ebp
    00000294: 	movq	0xb0(%rsp), %rdi
    0000029c: 	leaq	0x1f30(%rbx), %r14
    000002a3: 	leaq	DATAat0x4d004(%rip), %r12
    000002aa: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 682
    000002af: 	callq	clock@PLT # Offset: 687
    000002b4: 	movl	iterations(%rip), %r13d
    000002bb: 	movq	%rax, start_time(%rip)
    000002c2: 	testl	%r13d, %r13d
    000002c5: 	jle	.Ltmp5029 # Offset: 709
    000002cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5032:
    000002d0: 	movzbl	(%rbx), %ecx
    000002d3: 	movq	%rbx, %rax
    000002d6: 	subb	0x1(%rbx), %cl
    000002d9: 	pxor	%xmm1, %xmm1
    000002dd: 	nopl	(%rax) # Size: 3
.Ltmp5030:
    000002e0: 	movdqu	(%rax), %xmm0
    000002e4: 	movdqu	0x1(%rax), %xmm7
    000002e9: 	addq	$0x10, %rax
    000002ed: 	psubb	%xmm7, %xmm0
    000002f1: 	paddb	%xmm0, %xmm0
    000002f5: 	paddb	%xmm0, %xmm0
    000002f9: 	paddb	%xmm0, %xmm1
    000002fd: 	cmpq	%r14, %rax
    00000300: 	jne	.Ltmp5030 # Offset: 768
    00000302: 	movdqa	%xmm1, %xmm0
    00000306: 	psrldq	$0x8, %xmm0
    0000030b: 	paddb	%xmm0, %xmm1
    0000030f: 	pxor	%xmm0, %xmm0
    00000313: 	psadbw	%xmm0, %xmm1
    00000317: 	movq	0x1f30(%rbx), %xmm0
    0000031f: 	movd	%xmm1, %edx
    00000323: 	movq	0x1f31(%rbx), %xmm1
    0000032b: 	psubb	%xmm1, %xmm0
    0000032f: 	pxor	%xmm1, %xmm1
    00000333: 	paddb	%xmm0, %xmm0
    00000337: 	paddb	%xmm0, %xmm0
    0000033b: 	movdqa	%xmm0, %xmm7
    0000033f: 	psadbw	%xmm1, %xmm7
    00000343: 	movq	%xmm7, 0x100(%rsp)
    0000034c: 	movq	%xmm7, %rax
    00000351: 	movzbl	0x1f39(%rbx), %r10d
    00000359: 	movzbl	0x1f3a(%rbx), %r9d
    00000361: 	movl	%eax, %r11d
    00000364: 	movzbl	0x1f38(%rbx), %eax
    0000036b: 	movzbl	0x1f3b(%rbx), %r8d
    00000373: 	subb	0x1f3f(%rbx), %cl
    00000379: 	addb	0x1f3e(%rbx), %cl
    0000037f: 	addl	%edx, %r11d
    00000382: 	subl	%r10d, %eax
    00000385: 	movzbl	0x1f3c(%rbx), %edi
    0000038c: 	subl	%r9d, %r10d
    0000038f: 	movzbl	0x1f3d(%rbx), %esi
    00000396: 	addl	%ecx, %eax
    00000398: 	subl	%r8d, %r9d
    0000039b: 	addl	%r10d, %eax
    0000039e: 	subl	%edi, %r8d
    000003a1: 	subl	%esi, %edi
    000003a3: 	subb	0x1f3e(%rbx), %sil
    000003aa: 	addl	%eax, %r9d
    000003ad: 	addl	%r9d, %r8d
    000003b0: 	addl	%r8d, %edi
    000003b3: 	addl	%edi, %esi
    000003b5: 	leal	(%r11,%rsi,4), %esi
    000003b9: 	testb	%sil, %sil
    000003bc: 	jne	.Ltmp5031 # Offset: 956
.Ltmp5141:
    000003c2: 	addl	$0x1, %ebp
    000003c5: 	cmpl	%r13d, %ebp
    000003c8: 	jl	.Ltmp5032 # Offset: 968
.Ltmp5029:
    000003ce: 	movq	0xb0(%rsp), %rsi
    000003d6: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000003dd: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 989
    000003e2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000003e9: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000003f0: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000003f7: 	je	.Ltmp5033 # Offset: 1015
.Ltmp5153:
    000003fd: 	movq	-0x20(%rax), %rbp
    00000401: 	callq	clock@PLT # Offset: 1025
    00000406: 	pxor	%xmm0, %xmm0
    0000040a: 	movq	%rax, end_time(%rip)
    00000411: 	movq	%rbp, %rdi
    00000414: 	subq	start_time(%rip), %rax
    0000041b: 	cvtsi2sd	%rax, %xmm0
    00000420: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000428: 	callq	_Z13record_resultdPKc # Offset: 1064
    0000042d: 	movq	0x120(%rsp), %rdi
    00000435: 	cmpq	0xc8(%rsp), %rdi
    0000043d: 	je	.Ltmp5034 # Offset: 1085
    0000043f: 	movq	0x130(%rsp), %rax
    00000447: 	leaq	0x1(%rax), %rsi
    0000044b: 	callq	_ZdlPvm@PLT # Offset: 1099
.Ltmp5034:
    00000450: 	movq	0xb0(%rsp), %rdi
    00000458: 	movq	0xc0(%rsp), %rsi
    00000460: 	leaq	DATAat0x4d22b(%rip), %rdx
    00000467: 	leaq	0x1f30(%rbx), %r14
    0000046e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1134
    00000473: 	callq	clock@PLT # Offset: 1139
    00000478: 	movzbl	%r15b, %edi
    0000047c: 	movl	$0x0, 0x4c(%rsp)
    00000484: 	movq	%rax, start_time(%rip)
    0000048b: 	movl	iterations(%rip), %eax
    00000491: 	movw	%di, 0x1c(%rsp)
    00000496: 	movl	%eax, 0x58(%rsp)
    0000049a: 	testl	%eax, %eax
    0000049c: 	jle	.Ltmp5035 # Offset: 1180
    000004a2: 	movd	%r15d, %xmm0
    000004a7: 	punpcklbw	%xmm0, %xmm0
    000004ab: 	punpcklwd	%xmm0, %xmm0
    000004af: 	pshufd	$0x0, %xmm0, %xmm5
    000004b4: 	movaps	%xmm5, (%rsp)
    000004b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp5038:
    000004c0: 	movzbl	(%rbx), %ecx
    000004c3: 	movzbl	0x1(%rbx), %edx
    000004c7: 	pxor	%xmm3, %xmm3
    000004cb: 	leal	(%r15,%rcx), %eax
    000004cf: 	addl	%edx, %eax
    000004d1: 	movzbl	%al, %eax
    000004d4: 	leal	(%rcx,%rax,2), %edi
    000004d7: 	leal	(%rdx,%rax,2), %eax
    000004da: 	movl	%edi, 0x50(%rsp)
    000004de: 	movl	%eax, 0x54(%rsp)
    000004e2: 	movq	%rbx, %rax
    000004e5: 	nopl	(%rax) # Size: 3
.Ltmp5036:
    000004e8: 	movdqu	(%rax), %xmm7
    000004ec: 	movdqu	0x1(%rax), %xmm2
    000004f1: 	addq	$0x10, %rax
    000004f5: 	movdqu	-0xf(%rax), %xmm1
    000004fa: 	paddb	%xmm7, %xmm2
    000004fe: 	paddb	(%rsp), %xmm2
    00000503: 	movdqa	%xmm7, %xmm0
    00000507: 	paddb	%xmm2, %xmm1
    0000050b: 	paddb	%xmm2, %xmm0
    0000050f: 	paddb	%xmm2, %xmm1
    00000513: 	paddb	%xmm2, %xmm0
    00000517: 	paddb	%xmm0, %xmm0
    0000051b: 	movdqa	%xmm1, %xmm2
    0000051f: 	paddb	%xmm0, %xmm0
    00000523: 	paddb	%xmm1, %xmm2
    00000527: 	psubb	%xmm1, %xmm0
    0000052b: 	paddb	%xmm2, %xmm1
    0000052f: 	psubb	%xmm1, %xmm0
    00000533: 	paddb	%xmm0, %xmm3
    00000537: 	cmpq	%rax, %r14
    0000053a: 	jne	.Ltmp5036 # Offset: 1338
    0000053c: 	movzwl	0x1c(%rsp), %edi
    00000541: 	movdqa	%xmm3, %xmm0
    00000545: 	movq	0x1f31(%rbx), %xmm2
    0000054d: 	psrldq	$0x8, %xmm0
    00000552: 	movl	%edi, %eax
    00000554: 	paddb	%xmm0, %xmm3
    00000558: 	pxor	%xmm0, %xmm0
    0000055c: 	shll	$0x8, %eax
    0000055f: 	psadbw	%xmm0, %xmm3
    00000563: 	movq	0x1f30(%rbx), %xmm0
    0000056b: 	orl	%edi, %eax
    0000056d: 	movd	%xmm3, 0x30(%rsp)
    00000573: 	movd	%eax, %xmm5
    00000577: 	pshuflw	$0x0, %xmm5, %xmm1
    0000057c: 	paddb	%xmm0, %xmm1
    00000580: 	paddb	%xmm2, %xmm1
    00000584: 	paddb	%xmm1, %xmm0
    00000588: 	paddb	%xmm1, %xmm2
    0000058c: 	paddb	%xmm1, %xmm0
    00000590: 	paddb	%xmm1, %xmm2
    00000594: 	pxor	%xmm1, %xmm1
    00000598: 	paddb	%xmm0, %xmm0
    0000059c: 	paddb	%xmm2, %xmm2
    000005a0: 	paddb	%xmm0, %xmm0
    000005a4: 	psubb	%xmm2, %xmm0
    000005a8: 	psubb	%xmm2, %xmm0
    000005ac: 	movdqa	%xmm0, %xmm6
    000005b0: 	psadbw	%xmm1, %xmm6
    000005b4: 	movq	%xmm6, 0xf8(%rsp)
    000005bd: 	movq	%xmm6, %rax
    000005c2: 	movzbl	0x1f39(%rbx), %edi
    000005c9: 	movzbl	0x1f3b(%rbx), %edx
    000005d0: 	movb	%al, 0x48(%rsp)
    000005d4: 	movzbl	0x1f38(%rbx), %eax
    000005db: 	movzbl	0x1f3c(%rbx), %r13d
    000005e3: 	movl	%edi, 0x20(%rsp)
    000005e7: 	movl	%edi, %r9d
    000005ea: 	addl	%r15d, %eax
    000005ed: 	movzbl	0x1f3a(%rbx), %esi
    000005f4: 	movl	%edx, 0x28(%rsp)
    000005f8: 	addl	%edi, %eax
    000005fa: 	movzbl	%al, %eax
    000005fd: 	addl	%esi, %r9d
    00000600: 	movl	%esi, %r8d
    00000603: 	movl	%esi, 0x24(%rsp)
    00000607: 	leal	(%rdi,%rax,2), %ebp
    0000060a: 	movl	%edx, %edi
    0000060c: 	addl	%r15d, %r9d
    0000060f: 	addl	%edx, %r8d
    00000612: 	addl	%r13d, %edi
    00000615: 	movzbl	%r9b, %r9d
    00000619: 	addl	%r15d, %r8d
    0000061c: 	addl	%r15d, %edi
    0000061f: 	leal	(%rsi,%r9,2), %ecx
    00000623: 	movl	%r13d, %esi
    00000626: 	movzbl	%r8b, %r8d
    0000062a: 	movzbl	%dil, %edi
    0000062e: 	leal	(%rdx,%r8,2), %r10d
    00000632: 	movl	%ecx, 0x34(%rsp)
    00000636: 	leal	(%r13,%rdi,2), %r12d
    0000063b: 	movl	%r10d, 0x38(%rsp)
    00000640: 	movl	%r12d, 0x3c(%rsp)
    00000645: 	movzbl	0x1f3d(%rbx), %r12d
    0000064d: 	addl	%r12d, %esi
    00000650: 	movl	%r12d, %ecx
    00000653: 	addl	%r15d, %esi
    00000656: 	movzbl	%sil, %esi
    0000065a: 	leal	(%r12,%rsi,2), %r10d
    0000065e: 	leal	(%r13,%rsi,2), %esi
    00000663: 	movl	%r10d, 0x40(%rsp)
    00000668: 	movzbl	0x1f3e(%rbx), %r10d
    00000670: 	addl	%r10d, %ecx
    00000673: 	movl	%r10d, 0x2c(%rsp)
    00000678: 	movl	%r10d, %edx
    0000067b: 	addl	%r15d, %ecx
    0000067e: 	movzbl	%cl, %ecx
    00000681: 	leal	(%r10,%rcx,2), %r11d
    00000685: 	movzbl	0x1f3f(%rbx), %r10d
    0000068d: 	leal	(%r12,%rcx,2), %ecx
    00000691: 	movl	%r11d, 0x44(%rsp)
    00000696: 	movzbl	0x1f38(%rbx), %r11d
    0000069e: 	addl	%r10d, %edx
    000006a1: 	leal	(%r11,%rax,2), %eax
    000006a5: 	movl	0x20(%rsp), %r11d
    000006aa: 	addl	%r15d, %edx
    000006ad: 	movzbl	%dl, %edx
    000006b0: 	leal	(%r11,%r9,2), %r9d
    000006b4: 	movl	0x24(%rsp), %r11d
    000006b9: 	leal	(%r10,%rdx,2), %r10d
    000006bd: 	addl	%r9d, %eax
    000006c0: 	addb	0x50(%rsp), %al
    000006c4: 	movl	0x2c(%rsp), %r9d
    000006c9: 	leal	(%r11,%r8,2), %r8d
    000006cd: 	movl	0x28(%rsp), %r11d
    000006d2: 	addl	%r8d, %eax
    000006d5: 	leal	(%r9,%rdx,2), %edx
    000006d9: 	leal	(%r11,%rdi,2), %edi
    000006dd: 	addl	%edi, %eax
    000006df: 	movl	0x34(%rsp), %edi
    000006e3: 	addl	%esi, %eax
    000006e5: 	movl	0x38(%rsp), %esi
    000006e9: 	addl	%ecx, %eax
    000006eb: 	movl	%edi, %r9d
    000006ee: 	addl	%edx, %eax
    000006f0: 	movzbl	0x54(%rsp), %edx
    000006f5: 	movl	0x3c(%rsp), %ecx
    000006f9: 	movl	0x40(%rsp), %r11d
    000006fe: 	shll	$0x2, %eax
    00000701: 	leal	(%rbp,%rdx,4), %edx
    00000705: 	addl	%ebp, %edx
    00000707: 	movl	%r11d, %r8d
    0000070a: 	leal	(%rdx,%r9,2), %edx
    0000070e: 	movl	%esi, %r9d
    00000711: 	leal	(%rdx,%r9,2), %edx
    00000715: 	movl	%ecx, %r9d
    00000718: 	leal	(%rdx,%r9,2), %edx
    0000071c: 	movl	0x44(%rsp), %r9d
    00000721: 	leal	(%rdx,%r8,2), %edx
    00000725: 	movl	%r9d, %r8d
    00000728: 	leal	(%rdx,%r8,2), %edx
    0000072c: 	leal	(%rdx,%r10,2), %edx
    00000730: 	leal	(%rdx,%rbp,2), %edx
    00000733: 	leal	(%rdx,%rdi,2), %edx
    00000736: 	movl	%esi, %edi
    00000738: 	movl	%r9d, %esi
    0000073b: 	leal	(%rdx,%rdi,2), %edx
    0000073e: 	movl	%ecx, %edi
    00000740: 	leal	(%rdx,%rdi,2), %edx
    00000743: 	movl	%r11d, %edi
    00000746: 	leal	(%rdx,%rdi,2), %edx
    00000749: 	leal	(%rdx,%rsi,2), %r11d
    0000074d: 	leal	(%r11,%r10,2), %r10d
    00000751: 	subl	%r10d, %eax
    00000754: 	addb	0x30(%rsp), %al
    00000758: 	addb	0x48(%rsp), %al
    0000075c: 	jne	.Ltmp5037 # Offset: 1884
.Ltmp5143:
    00000762: 	addl	$0x1, 0x4c(%rsp)
    00000767: 	movl	0x4c(%rsp), %eax
    0000076b: 	cmpl	0x58(%rsp), %eax
    0000076f: 	jl	.Ltmp5038 # Offset: 1903
.Ltmp5035:
    00000775: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000077c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbp
    00000783: 	subq	$0x20, %rax
    00000787: 	cmpq	%rax, %rbp
    0000078a: 	je	.Ltmp5039 # Offset: 1930
    00000790: 	leaq	0x10(%rbp), %rdi
    00000794: 	movq	0x128(%rsp), %r12
    0000079c: 	movq	%rdi, (%rbp)
    000007a0: 	movq	0x120(%rsp), %r13
    000007a8: 	movq	%r13, %rax
    000007ab: 	addq	%r12, %rax
    000007ae: 	je	.Ltmp5040 # Offset: 1966
    000007b0: 	testq	%r13, %r13
    000007b3: 	je	.Ltmp5041 # Offset: 1971
.Ltmp5040:
    000007b9: 	movq	%r12, 0x118(%rsp)
    000007c1: 	cmpq	$0xf, %r12
    000007c5: 	ja	.Ltmp5042 # Offset: 1989
    000007cb: 	cmpq	$0x1, %r12
    000007cf: 	jne	.Ltmp5043 # Offset: 1999
    000007d5: 	movzbl	(%r13), %eax
    000007da: 	movb	%al, 0x10(%rbp)
.Ltmp5165:
    000007dd: 	movq	%r12, 0x8(%rbp)
    000007e1: 	movb	$0x0, (%rdi,%r12)
    000007e6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000007ed: 	addq	$0x20, %rax
    000007f1: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp5149:
    000007f8: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000007ff: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000806: 	je	.Ltmp5044 # Offset: 2054
.Ltmp5148:
    0000080c: 	movq	-0x20(%rax), %rbp
    00000810: 	callq	clock@PLT # Offset: 2064
    00000815: 	pxor	%xmm0, %xmm0
    00000819: 	movq	%rax, end_time(%rip)
    00000820: 	movq	%rbp, %rdi
    00000823: 	subq	start_time(%rip), %rax
    0000082a: 	cvtsi2sd	%rax, %xmm0
    0000082f: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000837: 	callq	_Z13record_resultdPKc # Offset: 2103
    0000083c: 	movq	0x120(%rsp), %rdi
    00000844: 	cmpq	0xc8(%rsp), %rdi
    0000084c: 	je	.Ltmp5045 # Offset: 2124
    0000084e: 	movq	0x130(%rsp), %rax
    00000856: 	leaq	0x1(%rax), %rsi
    0000085a: 	callq	_ZdlPvm@PLT # Offset: 2138
.Ltmp5045:
    0000085f: 	leaq	DATAat0x4d234(%rip), %rdx
    00000866: 	movq	0xc0(%rsp), %rsi
    0000086e: 	xorl	%ebp, %ebp
    00000870: 	movq	0xb0(%rsp), %rdi
    00000878: 	leaq	0x1f30(%rbx), %r14
    0000087f: 	leaq	DATAat0x4d004(%rip), %r12
    00000886: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2182
    0000088b: 	callq	clock@PLT # Offset: 2187
    00000890: 	movl	iterations(%rip), %r13d
    00000897: 	movq	%rax, start_time(%rip)
    0000089e: 	testl	%r13d, %r13d
    000008a1: 	jle	.Ltmp5046 # Offset: 2209
    000008a7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp5049:
    000008b0: 	movzbl	(%rbx), %ecx
    000008b3: 	movq	%rbx, %rax
    000008b6: 	subb	0x1(%rbx), %cl
    000008b9: 	pxor	%xmm1, %xmm1
    000008bd: 	nopl	(%rax) # Size: 3
.Ltmp5047:
    000008c0: 	movdqu	(%rax), %xmm0
    000008c4: 	movdqu	0x1(%rax), %xmm6
    000008c9: 	addq	$0x10, %rax
    000008cd: 	psubb	%xmm6, %xmm0
    000008d1: 	paddb	%xmm0, %xmm0
    000008d5: 	paddb	%xmm0, %xmm0
    000008d9: 	paddb	%xmm0, %xmm1
    000008dd: 	cmpq	%r14, %rax
    000008e0: 	jne	.Ltmp5047 # Offset: 2272
    000008e2: 	movdqa	%xmm1, %xmm0
    000008e6: 	psrldq	$0x8, %xmm0
    000008eb: 	paddb	%xmm0, %xmm1
    000008ef: 	pxor	%xmm0, %xmm0
    000008f3: 	psadbw	%xmm0, %xmm1
    000008f7: 	movq	0x1f30(%rbx), %xmm0
    000008ff: 	movd	%xmm1, %edx
    00000903: 	movq	0x1f31(%rbx), %xmm1
    0000090b: 	psubb	%xmm1, %xmm0
    0000090f: 	pxor	%xmm1, %xmm1
    00000913: 	paddb	%xmm0, %xmm0
    00000917: 	paddb	%xmm0, %xmm0
    0000091b: 	movdqa	%xmm0, %xmm4
    0000091f: 	psadbw	%xmm1, %xmm4
    00000923: 	movq	%xmm4, 0xf0(%rsp)
    0000092c: 	movq	%xmm4, %rax
    00000931: 	movzbl	0x1f39(%rbx), %r10d
    00000939: 	movzbl	0x1f3a(%rbx), %r9d
    00000941: 	movl	%eax, %r11d
    00000944: 	movzbl	0x1f38(%rbx), %eax
    0000094b: 	movzbl	0x1f3b(%rbx), %r8d
    00000953: 	subb	0x1f3f(%rbx), %cl
    00000959: 	addb	0x1f3e(%rbx), %cl
    0000095f: 	addl	%edx, %r11d
    00000962: 	subl	%r10d, %eax
    00000965: 	movzbl	0x1f3c(%rbx), %edi
    0000096c: 	subl	%r9d, %r10d
    0000096f: 	movzbl	0x1f3d(%rbx), %esi
    00000976: 	addl	%ecx, %eax
    00000978: 	subl	%r8d, %r9d
    0000097b: 	addl	%r10d, %eax
    0000097e: 	subl	%edi, %r8d
    00000981: 	subl	%esi, %edi
    00000983: 	subb	0x1f3e(%rbx), %sil
    0000098a: 	addl	%eax, %r9d
    0000098d: 	addl	%r9d, %r8d
    00000990: 	addl	%r8d, %edi
    00000993: 	addl	%edi, %esi
    00000995: 	leal	(%r11,%rsi,4), %esi
    00000999: 	testb	%sil, %sil
    0000099c: 	jne	.Ltmp5048 # Offset: 2460
.Ltmp5142:
    000009a2: 	addl	$0x1, %ebp
    000009a5: 	cmpl	%r13d, %ebp
    000009a8: 	jl	.Ltmp5049 # Offset: 2472
.Ltmp5046:
    000009ae: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000009b5: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbp
    000009bc: 	subq	$0x20, %rax
    000009c0: 	cmpq	%rax, %rbp
    000009c3: 	je	.Ltmp5050 # Offset: 2499
    000009c9: 	leaq	0x10(%rbp), %rdi
    000009cd: 	movq	0x128(%rsp), %r12
    000009d5: 	movq	%rdi, (%rbp)
    000009d9: 	movq	0x120(%rsp), %r13
    000009e1: 	movq	%r13, %rax
    000009e4: 	addq	%r12, %rax
    000009e7: 	je	.Ltmp5051 # Offset: 2535
    000009e9: 	testq	%r13, %r13
    000009ec: 	je	.Ltmp5052 # Offset: 2540
.Ltmp5051:
    000009f2: 	movq	%r12, 0x118(%rsp)
    000009fa: 	cmpq	$0xf, %r12
    000009fe: 	ja	.Ltmp5053 # Offset: 2558
    00000a04: 	cmpq	$0x1, %r12
    00000a08: 	jne	.Ltmp5054 # Offset: 2568
    00000a0e: 	movzbl	(%r13), %eax
    00000a13: 	movb	%al, 0x10(%rbp)
.Ltmp5169:
    00000a16: 	movq	%r12, 0x8(%rbp)
    00000a1a: 	movb	$0x0, (%rdi,%r12)
    00000a1f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000a26: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000a2d: 	addq	$0x20, %rax
    00000a31: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000a38: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000a3f: 	je	.Ltmp5055 # Offset: 2623
.Ltmp5150:
    00000a45: 	movq	-0x20(%rax), %rbp
    00000a49: 	callq	clock@PLT # Offset: 2633
    00000a4e: 	pxor	%xmm0, %xmm0
    00000a52: 	movq	%rax, end_time(%rip)
    00000a59: 	movq	%rbp, %rdi
    00000a5c: 	subq	start_time(%rip), %rax
    00000a63: 	cvtsi2sd	%rax, %xmm0
    00000a68: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000a70: 	callq	_Z13record_resultdPKc # Offset: 2672
    00000a75: 	movq	0x120(%rsp), %rdi
    00000a7d: 	cmpq	0xc8(%rsp), %rdi
    00000a85: 	je	.Ltmp5056 # Offset: 2693
    00000a87: 	movq	0x130(%rsp), %rax
    00000a8f: 	leaq	0x1(%rax), %rsi
    00000a93: 	callq	_ZdlPvm@PLT # Offset: 2707
.Ltmp5056:
    00000a98: 	movq	0xb0(%rsp), %rdi
    00000aa0: 	movq	0xc0(%rsp), %rsi
    00000aa8: 	leaq	DATAat0x4d24b(%rip), %rdx
    00000aaf: 	leaq	0x1f30(%rbx), %r14
    00000ab6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2742
    00000abb: 	callq	clock@PLT # Offset: 2747
    00000ac0: 	movzbl	%r15b, %edi
    00000ac4: 	movl	$0x0, 0x4c(%rsp)
    00000acc: 	movq	%rax, start_time(%rip)
    00000ad3: 	movl	iterations(%rip), %eax
    00000ad9: 	movw	%di, 0x1c(%rsp)
    00000ade: 	movl	%eax, 0x58(%rsp)
    00000ae2: 	testl	%eax, %eax
    00000ae4: 	jle	.Ltmp5057 # Offset: 2788
    00000aea: 	movd	%r15d, %xmm0
    00000aef: 	punpcklbw	%xmm0, %xmm0
    00000af3: 	punpcklwd	%xmm0, %xmm0
    00000af7: 	pshufd	$0x0, %xmm0, %xmm4
    00000afc: 	movaps	%xmm4, (%rsp)
.Ltmp5060:
    00000b00: 	movzbl	0x1(%rbx), %edx
    00000b04: 	movzbl	(%rbx), %ecx
    00000b07: 	pxor	%xmm2, %xmm2
    00000b0b: 	leal	(%r15,%rdx), %eax
    00000b0f: 	subl	%ecx, %eax
    00000b11: 	movzbl	%al, %eax
    00000b14: 	leal	(%rcx,%rax,2), %edi
    00000b17: 	leal	(%rdx,%rax,2), %eax
    00000b1a: 	movl	%edi, 0x50(%rsp)
    00000b1e: 	movl	%eax, 0x54(%rsp)
    00000b22: 	movq	%rbx, %rax
    00000b25: 	nopl	(%rax) # Size: 3
.Ltmp5058:
    00000b28: 	movdqu	0x1(%rax), %xmm3
    00000b2d: 	paddb	(%rsp), %xmm3
    00000b32: 	addq	$0x10, %rax
    00000b36: 	movdqu	-0x10(%rax), %xmm5
    00000b3b: 	movdqu	-0xf(%rax), %xmm1
    00000b40: 	movdqa	%xmm3, %xmm0
    00000b44: 	psubb	%xmm5, %xmm0
    00000b48: 	paddb	%xmm0, %xmm1
    00000b4c: 	paddb	%xmm0, %xmm1
    00000b50: 	paddb	%xmm3, %xmm0
    00000b54: 	paddb	%xmm0, %xmm0
    00000b58: 	paddb	%xmm1, %xmm1
    00000b5c: 	paddb	%xmm0, %xmm0
    00000b60: 	psubb	%xmm1, %xmm0
    00000b64: 	psubb	%xmm1, %xmm0
    00000b68: 	paddb	%xmm0, %xmm2
    00000b6c: 	cmpq	%rax, %r14
    00000b6f: 	jne	.Ltmp5058 # Offset: 2927
    00000b71: 	movzwl	0x1c(%rsp), %edi
    00000b76: 	movdqa	%xmm2, %xmm0
    00000b7a: 	movq	0x1f31(%rbx), %xmm1
    00000b82: 	movq	0x1f30(%rbx), %xmm3
    00000b8a: 	psrldq	$0x8, %xmm0
    00000b8f: 	movl	%edi, %eax
    00000b91: 	paddb	%xmm0, %xmm2
    00000b95: 	pxor	%xmm0, %xmm0
    00000b99: 	shll	$0x8, %eax
    00000b9c: 	psadbw	%xmm0, %xmm2
    00000ba0: 	orl	%edi, %eax
    00000ba2: 	movd	%xmm2, 0x30(%rsp)
    00000ba8: 	movd	%eax, %xmm4
    00000bac: 	pshuflw	$0x0, %xmm4, %xmm0
    00000bb1: 	paddb	%xmm1, %xmm0
    00000bb5: 	movdqa	%xmm0, %xmm2
    00000bb9: 	psubb	%xmm3, %xmm2
    00000bbd: 	paddb	%xmm2, %xmm0
    00000bc1: 	paddb	%xmm2, %xmm1
    00000bc5: 	paddb	%xmm0, %xmm0
    00000bc9: 	paddb	%xmm2, %xmm1
    00000bcd: 	paddb	%xmm0, %xmm0
    00000bd1: 	paddb	%xmm1, %xmm1
    00000bd5: 	psubb	%xmm1, %xmm0
    00000bd9: 	psubb	%xmm1, %xmm0
    00000bdd: 	pxor	%xmm1, %xmm1
    00000be1: 	movdqa	%xmm0, %xmm5
    00000be5: 	psadbw	%xmm1, %xmm5
    00000be9: 	movq	%xmm5, 0xe8(%rsp)
    00000bf2: 	movq	%xmm5, %rax
    00000bf7: 	movzbl	0x1f39(%rbx), %esi
    00000bfe: 	movzbl	0x1f3c(%rbx), %r13d
    00000c06: 	movb	%al, 0x48(%rsp)
    00000c0a: 	movl	%esi, %edx
    00000c0c: 	subb	0x1f38(%rbx), %dl
    00000c12: 	movl	%esi, 0x20(%rsp)
    00000c16: 	addl	%r15d, %edx
    00000c19: 	movzbl	%dl, %edi
    00000c1c: 	movzbl	0x1f3a(%rbx), %edx
    00000c23: 	leal	(%rsi,%rdi,2), %ebp
    00000c26: 	movl	%edi, %r11d
    00000c29: 	leal	(%r15,%r13), %edi
    00000c2d: 	leal	(%r15,%rdx), %r9d
    00000c31: 	movzbl	%dl, %eax
    00000c34: 	subl	%esi, %r9d
    00000c37: 	movl	%eax, 0x24(%rsp)
    00000c3b: 	movzbl	%r9b, %r9d
    00000c3f: 	leal	(%rax,%r9,2), %ecx
    00000c43: 	movzbl	0x1f3b(%rbx), %eax
    00000c4a: 	movl	%ecx, 0x34(%rsp)
    00000c4e: 	subl	%eax, %edi
    00000c50: 	leal	(%r15,%rax), %r8d
    00000c54: 	movzbl	%dil, %edi
    00000c58: 	subl	%edx, %r8d
    00000c5b: 	movzbl	%al, %edx
    00000c5e: 	leal	(%r13,%rdi,2), %r12d
    00000c63: 	movzbl	%r8b, %r8d
    00000c67: 	movl	%edx, 0x28(%rsp)
    00000c6b: 	movl	%r12d, 0x3c(%rsp)
    00000c70: 	movzbl	0x1f3d(%rbx), %r12d
    00000c78: 	leal	(%rdx,%r8,2), %r10d
    00000c7c: 	movl	%r10d, 0x38(%rsp)
    00000c81: 	leal	(%r15,%r12), %esi
    00000c85: 	subl	%r13d, %esi
    00000c88: 	movzbl	%sil, %esi
    00000c8c: 	leal	(%r12,%rsi,2), %r10d
    00000c90: 	leal	(%r13,%rsi,2), %esi
    00000c95: 	movl	%r10d, 0x40(%rsp)
    00000c9a: 	movzbl	0x1f3e(%rbx), %r10d
    00000ca2: 	leal	(%r15,%r10), %ecx
    00000ca6: 	movzbl	%r10b, %eax
    00000caa: 	subl	%r12d, %ecx
    00000cad: 	movl	%eax, 0x2c(%rsp)
    00000cb1: 	movzbl	%cl, %ecx
    00000cb4: 	leal	(%rax,%rcx,2), %eax
    00000cb7: 	leal	(%r12,%rcx,2), %ecx
    00000cbb: 	movl	%eax, 0x44(%rsp)
    00000cbf: 	movzbl	0x1f3f(%rbx), %eax
    00000cc6: 	leal	(%r15,%rax), %edx
    00000cca: 	subl	%r10d, %edx
    00000ccd: 	movzbl	%dl, %edx
    00000cd0: 	leal	(%rax,%rdx,2), %r10d
    00000cd4: 	movzbl	0x1f38(%rbx), %eax
    00000cdb: 	leal	(%rax,%r11,2), %eax
    00000cdf: 	movl	0x20(%rsp), %r11d
    00000ce4: 	leal	(%r11,%r9,2), %r9d
    00000ce8: 	movl	0x24(%rsp), %r11d
    00000ced: 	addl	%r9d, %eax
    00000cf0: 	addb	0x50(%rsp), %al
    00000cf4: 	movl	0x2c(%rsp), %r9d
    00000cf9: 	leal	(%r11,%r8,2), %r8d
    00000cfd: 	movl	0x28(%rsp), %r11d
    00000d02: 	addl	%r8d, %eax
    00000d05: 	leal	(%r9,%rdx,2), %edx
    00000d09: 	leal	(%r11,%rdi,2), %edi
    00000d0d: 	addl	%edi, %eax
    00000d0f: 	movl	0x34(%rsp), %edi
    00000d13: 	addl	%esi, %eax
    00000d15: 	movl	0x38(%rsp), %esi
    00000d19: 	addl	%ecx, %eax
    00000d1b: 	movl	%edi, %r9d
    00000d1e: 	addl	%edx, %eax
    00000d20: 	movzbl	0x54(%rsp), %edx
    00000d25: 	movl	0x3c(%rsp), %ecx
    00000d29: 	movl	%esi, %r8d
    00000d2c: 	movl	0x40(%rsp), %r11d
    00000d31: 	shll	$0x2, %eax
    00000d34: 	leal	(%rbp,%rdx,4), %edx
    00000d38: 	addl	%ebp, %edx
    00000d3a: 	leal	(%rdx,%r9,2), %edx
    00000d3e: 	movl	%ecx, %r9d
    00000d41: 	leal	(%rdx,%r8,2), %edx
    00000d45: 	movl	%r11d, %r8d
    00000d48: 	leal	(%rdx,%r9,2), %edx
    00000d4c: 	movl	0x44(%rsp), %r9d
    00000d51: 	leal	(%rdx,%r8,2), %edx
    00000d55: 	movl	%r9d, %r8d
    00000d58: 	leal	(%rdx,%r8,2), %edx
    00000d5c: 	leal	(%rdx,%r10,2), %edx
    00000d60: 	leal	(%rdx,%rbp,2), %edx
    00000d63: 	leal	(%rdx,%rdi,2), %edx
    00000d66: 	movl	%esi, %edi
    00000d68: 	movl	%r9d, %esi
    00000d6b: 	leal	(%rdx,%rdi,2), %edx
    00000d6e: 	movl	%ecx, %edi
    00000d70: 	leal	(%rdx,%rdi,2), %edx
    00000d73: 	movl	%r11d, %edi
    00000d76: 	leal	(%rdx,%rdi,2), %edx
    00000d79: 	leal	(%rdx,%rsi,2), %r11d
    00000d7d: 	leal	(%r11,%r10,2), %r10d
    00000d81: 	subl	%r10d, %eax
    00000d84: 	addb	0x30(%rsp), %al
    00000d88: 	addb	0x48(%rsp), %al
    00000d8c: 	jne	.Ltmp5059 # Offset: 3468
.Ltmp5146:
    00000d92: 	addl	$0x1, 0x4c(%rsp)
    00000d97: 	movl	0x4c(%rsp), %eax
    00000d9b: 	cmpl	0x58(%rsp), %eax
    00000d9f: 	jl	.Ltmp5060 # Offset: 3487
.Ltmp5057:
    00000da5: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000dac: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbp
    00000db3: 	subq	$0x20, %rax
    00000db7: 	cmpq	%rax, %rbp
    00000dba: 	je	.Ltmp5061 # Offset: 3514
    00000dc0: 	leaq	0x10(%rbp), %rdi
    00000dc4: 	movq	0x128(%rsp), %r12
    00000dcc: 	movq	%rdi, (%rbp)
    00000dd0: 	movq	0x120(%rsp), %r13
    00000dd8: 	movq	%r13, %rax
    00000ddb: 	addq	%r12, %rax
    00000dde: 	je	.Ltmp5062 # Offset: 3550
    00000de0: 	testq	%r13, %r13
    00000de3: 	je	.Ltmp5063 # Offset: 3555
.Ltmp5062:
    00000de9: 	movq	%r12, 0x118(%rsp)
    00000df1: 	cmpq	$0xf, %r12
    00000df5: 	ja	.Ltmp5064 # Offset: 3573
    00000dfb: 	cmpq	$0x1, %r12
    00000dff: 	jne	.Ltmp5065 # Offset: 3583
    00000e05: 	movzbl	(%r13), %eax
    00000e0a: 	movb	%al, 0x10(%rbp)
.Ltmp5171:
    00000e0d: 	movq	%r12, 0x8(%rbp)
    00000e11: 	movb	$0x0, (%rdi,%r12)
    00000e16: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000e1d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000e24: 	addq	$0x20, %rax
    00000e28: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000e2f: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000e36: 	je	.Ltmp5066 # Offset: 3638
.Ltmp5147:
    00000e3c: 	movq	-0x20(%rax), %rbp
    00000e40: 	callq	clock@PLT # Offset: 3648
    00000e45: 	pxor	%xmm0, %xmm0
    00000e49: 	movq	%rax, end_time(%rip)
    00000e50: 	movq	%rbp, %rdi
    00000e53: 	subq	start_time(%rip), %rax
    00000e5a: 	cvtsi2sd	%rax, %xmm0
    00000e5f: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000e67: 	callq	_Z13record_resultdPKc # Offset: 3687
    00000e6c: 	movq	0x120(%rsp), %rdi
    00000e74: 	cmpq	0xc8(%rsp), %rdi
    00000e7c: 	je	.Ltmp5067 # Offset: 3708
    00000e7e: 	movq	0x130(%rsp), %rax
    00000e86: 	leaq	0x1(%rax), %rsi
    00000e8a: 	callq	_ZdlPvm@PLT # Offset: 3722
.Ltmp5067:
    00000e8f: 	leaq	DATAat0x4d259(%rip), %rdx
    00000e96: 	movq	0xc0(%rsp), %rsi
    00000e9e: 	xorl	%ebp, %ebp
    00000ea0: 	movq	0xb0(%rsp), %rdi
    00000ea8: 	leaq	0x1f30(%rbx), %r14
    00000eaf: 	leaq	DATAat0x4d004(%rip), %r12
    00000eb6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3766
    00000ebb: 	callq	clock@PLT # Offset: 3771
    00000ec0: 	movl	iterations(%rip), %r13d
    00000ec7: 	movq	%rax, start_time(%rip)
    00000ece: 	testl	%r13d, %r13d
    00000ed1: 	jle	.Ltmp5068 # Offset: 3793
    00000ed7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp5071:
    00000ee0: 	movzbl	(%rbx), %ecx
    00000ee3: 	movq	%rbx, %rax
    00000ee6: 	subb	0x1(%rbx), %cl
    00000ee9: 	pxor	%xmm1, %xmm1
    00000eed: 	nopl	(%rax) # Size: 3
.Ltmp5069:
    00000ef0: 	movdqu	(%rax), %xmm0
    00000ef4: 	movdqu	0x1(%rax), %xmm6
    00000ef9: 	addq	$0x10, %rax
    00000efd: 	psubb	%xmm6, %xmm0
    00000f01: 	paddb	%xmm0, %xmm0
    00000f05: 	paddb	%xmm0, %xmm0
    00000f09: 	paddb	%xmm0, %xmm1
    00000f0d: 	cmpq	%r14, %rax
    00000f10: 	jne	.Ltmp5069 # Offset: 3856
    00000f12: 	movdqa	%xmm1, %xmm0
    00000f16: 	psrldq	$0x8, %xmm0
    00000f1b: 	paddb	%xmm0, %xmm1
    00000f1f: 	pxor	%xmm0, %xmm0
    00000f23: 	psadbw	%xmm0, %xmm1
    00000f27: 	movq	0x1f30(%rbx), %xmm0
    00000f2f: 	movd	%xmm1, %edx
    00000f33: 	movq	0x1f31(%rbx), %xmm1
    00000f3b: 	psubb	%xmm1, %xmm0
    00000f3f: 	pxor	%xmm1, %xmm1
    00000f43: 	paddb	%xmm0, %xmm0
    00000f47: 	paddb	%xmm0, %xmm0
    00000f4b: 	movdqa	%xmm0, %xmm7
    00000f4f: 	psadbw	%xmm1, %xmm7
    00000f53: 	movq	%xmm7, 0xe0(%rsp)
    00000f5c: 	movq	%xmm7, %rax
    00000f61: 	movzbl	0x1f39(%rbx), %r10d
    00000f69: 	movzbl	0x1f3a(%rbx), %r9d
    00000f71: 	movl	%eax, %r11d
    00000f74: 	movzbl	0x1f38(%rbx), %eax
    00000f7b: 	movzbl	0x1f3b(%rbx), %r8d
    00000f83: 	subb	0x1f3f(%rbx), %cl
    00000f89: 	addb	0x1f3e(%rbx), %cl
    00000f8f: 	addl	%edx, %r11d
    00000f92: 	subl	%r10d, %eax
    00000f95: 	movzbl	0x1f3c(%rbx), %edi
    00000f9c: 	subl	%r9d, %r10d
    00000f9f: 	movzbl	0x1f3d(%rbx), %esi
    00000fa6: 	addl	%ecx, %eax
    00000fa8: 	subl	%r8d, %r9d
    00000fab: 	addl	%r10d, %eax
    00000fae: 	subl	%edi, %r8d
    00000fb1: 	subl	%esi, %edi
    00000fb3: 	subb	0x1f3e(%rbx), %sil
    00000fba: 	addl	%eax, %r9d
    00000fbd: 	addl	%r9d, %r8d
    00000fc0: 	addl	%r8d, %edi
    00000fc3: 	addl	%edi, %esi
    00000fc5: 	leal	(%r11,%rsi,4), %esi
    00000fc9: 	testb	%sil, %sil
    00000fcc: 	jne	.Ltmp5070 # Offset: 4044
.Ltmp5145:
    00000fd2: 	addl	$0x1, %ebp
    00000fd5: 	cmpl	%r13d, %ebp
    00000fd8: 	jl	.Ltmp5071 # Offset: 4056
.Ltmp5068:
    00000fde: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000fe5: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbp
    00000fec: 	subq	$0x20, %rax
    00000ff0: 	cmpq	%rax, %rbp
    00000ff3: 	je	.Ltmp5072 # Offset: 4083
    00000ff9: 	leaq	0x10(%rbp), %rdi
    00000ffd: 	movq	0x128(%rsp), %r12
    00001005: 	movq	%rdi, (%rbp)
    00001009: 	movq	0x120(%rsp), %r13
    00001011: 	movq	%r13, %rax
    00001014: 	addq	%r12, %rax
    00001017: 	je	.Ltmp5073 # Offset: 4119
    00001019: 	testq	%r13, %r13
    0000101c: 	je	.Ltmp5074 # Offset: 4124
.Ltmp5073:
    00001022: 	movq	%r12, 0x118(%rsp)
    0000102a: 	cmpq	$0xf, %r12
    0000102e: 	ja	.Ltmp5075 # Offset: 4142
    00001034: 	cmpq	$0x1, %r12
    00001038: 	jne	.Ltmp5076 # Offset: 4152
    0000103e: 	movzbl	(%r13), %eax
    00001043: 	movb	%al, 0x10(%rbp)
.Ltmp5177:
    00001046: 	movq	%r12, 0x8(%rbp)
    0000104a: 	movb	$0x0, (%rdi,%r12)
    0000104f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001056: 	addq	$0x20, %rax
    0000105a: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp5156:
    00001061: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00001068: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000106f: 	je	.Ltmp5077 # Offset: 4207
.Ltmp5155:
    00001075: 	movq	-0x20(%rax), %rbp
    00001079: 	callq	clock@PLT # Offset: 4217
    0000107e: 	pxor	%xmm0, %xmm0
    00001082: 	movq	%rax, end_time(%rip)
    00001089: 	movq	%rbp, %rdi
    0000108c: 	subq	start_time(%rip), %rax
    00001093: 	cvtsi2sd	%rax, %xmm0
    00001098: 	divsd	DATAat0x4d640(%rip), %xmm0
    000010a0: 	callq	_Z13record_resultdPKc # Offset: 4256
    000010a5: 	movq	0x120(%rsp), %rdi
    000010ad: 	cmpq	0xc8(%rsp), %rdi
    000010b5: 	je	.Ltmp5078 # Offset: 4277
    000010b7: 	movq	0x130(%rsp), %rax
    000010bf: 	leaq	0x1(%rax), %rsi
    000010c3: 	callq	_ZdlPvm@PLT # Offset: 4291
.Ltmp5078:
    000010c8: 	movq	0xc0(%rsp), %rsi
    000010d0: 	movq	0xb0(%rsp), %rdi
    000010d8: 	leaq	DATAat0x4d270(%rip), %rdx
    000010df: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4319
    000010e4: 	callq	clock@PLT # Offset: 4324
    000010e9: 	movq	%rax, start_time(%rip)
    000010f0: 	movl	iterations(%rip), %eax
    000010f6: 	movl	%eax, 0xbc(%rsp)
    000010fd: 	testl	%eax, %eax
    000010ff: 	jle	.Ltmp5079 # Offset: 4351
    00001105: 	movd	%r15d, %xmm0
    0000110a: 	movl	$0x0, 0x20(%rsp)
    00001112: 	leaq	0x1f30(%rbx), %r14
    00001119: 	punpcklbw	%xmm0, %xmm0
    0000111d: 	punpcklwd	%xmm0, %xmm0
    00001121: 	pshufd	$0x0, %xmm0, %xmm7
    00001126: 	movaps	%xmm7, (%rsp)
    0000112a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5082:
    00001130: 	movzbl	(%rbx), %esi
    00001133: 	movzbl	0x1(%rbx), %ecx
    00001137: 	pxor	%xmm3, %xmm3
    0000113b: 	movl	%esi, %eax
    0000113d: 	imull	%ecx, %eax
    00001140: 	leal	(%rax,%r15), %edx
    00001144: 	movzbl	%dl, %edx
    00001147: 	leal	(%rsi,%rdx,2), %eax
    0000114a: 	movl	%eax, 0x84(%rsp)
    00001151: 	leal	(%rcx,%rdx,2), %eax
    00001154: 	movl	%eax, 0x88(%rsp)
    0000115b: 	movq	%rbx, %rax
    0000115e: 	nop # Size: 2
.Ltmp5080:
    00001160: 	movdqu	(%rax), %xmm0
    00001164: 	movdqu	0x1(%rax), %xmm1
    00001169: 	addq	$0x10, %rax
    0000116d: 	movdqa	%xmm0, %xmm2
    00001171: 	movdqa	%xmm0, %xmm4
    00001175: 	movdqa	%xmm1, %xmm6
    00001179: 	movdqa	%xmm1, %xmm5
    0000117d: 	punpcklbw	%xmm0, %xmm2
    00001181: 	punpckhbw	%xmm0, %xmm4
    00001185: 	punpcklbw	%xmm1, %xmm6
    00001189: 	punpckhbw	%xmm1, %xmm5
    0000118d: 	pmullw	%xmm6, %xmm2
    00001191: 	pmullw	%xmm5, %xmm4
    00001195: 	pand	DATAat0x4d5f0(%rip), %xmm2
    0000119d: 	pand	DATAat0x4d5f0(%rip), %xmm4
    000011a5: 	packuswb	%xmm4, %xmm2
    000011a9: 	paddb	(%rsp), %xmm2
    000011ae: 	paddb	%xmm2, %xmm1
    000011b2: 	paddb	%xmm2, %xmm0
    000011b6: 	paddb	%xmm2, %xmm1
    000011ba: 	paddb	%xmm2, %xmm0
    000011be: 	paddb	%xmm0, %xmm0
    000011c2: 	movdqa	%xmm1, %xmm2
    000011c6: 	paddb	%xmm0, %xmm0
    000011ca: 	paddb	%xmm1, %xmm2
    000011ce: 	psubb	%xmm1, %xmm0
    000011d2: 	paddb	%xmm2, %xmm1
    000011d6: 	psubb	%xmm1, %xmm0
    000011da: 	paddb	%xmm0, %xmm3
    000011de: 	cmpq	%rax, %r14
    000011e1: 	jne	.Ltmp5080 # Offset: 4577
    000011e7: 	movzbl	0x1f31(%rbx), %r13d
    000011ef: 	movzbl	0x1f30(%rbx), %eax
    000011f6: 	movdqa	%xmm3, %xmm0
    000011fa: 	movzbl	0x1f32(%rbx), %esi
    00001201: 	movzbl	0x1f33(%rbx), %r11d
    00001209: 	psrldq	$0x8, %xmm0
    0000120e: 	imull	%r13d, %eax
    00001212: 	movzbl	0x1f34(%rbx), %r12d
    0000121a: 	paddb	%xmm0, %xmm3
    0000121e: 	pxor	%xmm0, %xmm0
    00001222: 	movl	%esi, 0x78(%rsp)
    00001226: 	psadbw	%xmm0, %xmm3
    0000122a: 	movl	%r12d, 0x68(%rsp)
    0000122f: 	addl	%r15d, %eax
    00001232: 	movl	%r11d, 0x70(%rsp)
    00001237: 	movd	%xmm3, 0x8c(%rsp)
    00001240: 	movzbl	%al, %eax
    00001243: 	leal	(%r13,%rax,2), %edi
    00001248: 	movl	%eax, 0x80(%rsp)
    0000124f: 	movl	%r13d, %eax
    00001252: 	imull	%esi, %eax
    00001255: 	movl	%edi, 0x1c(%rsp)
    00001259: 	addl	%r15d, %eax
    0000125c: 	movzbl	%al, %edi
    0000125f: 	movl	%esi, %eax
    00001261: 	imull	%r11d, %eax
    00001265: 	leal	(%rsi,%rdi,2), %ecx
    00001268: 	movzbl	0x1f37(%rbx), %esi
    0000126f: 	movl	%edi, 0x7c(%rsp)
    00001273: 	movl	%ecx, 0x90(%rsp)
    0000127a: 	movl	%esi, 0x4c(%rsp)
    0000127e: 	addl	%r15d, %eax
    00001281: 	movzbl	%al, %edx
    00001284: 	movl	%r11d, %eax
    00001287: 	imull	%r12d, %eax
    0000128b: 	leal	(%r11,%rdx,2), %r8d
    0000128f: 	movl	%edx, 0x74(%rsp)
    00001293: 	movl	%r8d, 0x94(%rsp)
    0000129b: 	addl	%r15d, %eax
    0000129e: 	movzbl	%al, %ebp
    000012a1: 	movl	%r12d, %eax
    000012a4: 	leal	(%r12,%rbp,2), %ecx
    000012a8: 	movzbl	0x1f36(%rbx), %r12d
    000012b0: 	movl	%ebp, 0x6c(%rsp)
    000012b4: 	movl	%ecx, 0x98(%rsp)
    000012bb: 	movzbl	0x1f35(%rbx), %ecx
    000012c2: 	movl	%r12d, 0x54(%rsp)
    000012c7: 	imull	%ecx, %eax
    000012ca: 	movzbl	%cl, %edx
    000012cd: 	movl	%edx, 0x60(%rsp)
    000012d1: 	addl	%r15d, %eax
    000012d4: 	movzbl	%al, %r8d
    000012d8: 	movl	%ecx, %eax
    000012da: 	imull	%r12d, %eax
    000012de: 	leal	(%rdx,%r8,2), %r11d
    000012e2: 	movl	%r8d, 0x64(%rsp)
    000012e7: 	movl	%r11d, 0x9c(%rsp)
    000012ef: 	addl	%r15d, %eax
    000012f2: 	movzbl	%al, %ebp
    000012f5: 	movl	%r12d, %eax
    000012f8: 	imull	%esi, %eax
    000012fb: 	leal	(%r12,%rbp,2), %edi
    000012ff: 	movl	%ebp, 0x58(%rsp)
    00001303: 	movzbl	0x1f38(%rbx), %ebp
    0000130a: 	movl	%edi, 0xa0(%rsp)
    00001311: 	movl	%ebp, 0x44(%rsp)
    00001315: 	addl	%r15d, %eax
    00001318: 	movzbl	%al, %r8d
    0000131c: 	movl	%esi, %eax
    0000131e: 	imull	%ebp, %eax
    00001321: 	leal	(%rsi,%r8,2), %edi
    00001325: 	movl	%r8d, 0x50(%rsp)
    0000132a: 	movl	%edi, 0xa4(%rsp)
    00001331: 	addl	%r15d, %eax
    00001334: 	movzbl	%al, %ecx
    00001337: 	movl	%ebp, %eax
    00001339: 	leal	(%rbp,%rcx,2), %r11d
    0000133e: 	movl	%ecx, 0x48(%rsp)
    00001342: 	movl	%r11d, 0xa8(%rsp)
    0000134a: 	movzbl	0x1f39(%rbx), %edi
    00001351: 	movzbl	0x1f3a(%rbx), %ecx
    00001358: 	movzbl	0x1f3b(%rbx), %ebp
    0000135f: 	imull	%edi, %eax
    00001362: 	movl	%edi, 0x3c(%rsp)
    00001366: 	movzbl	0x1f3d(%rbx), %r9d
    0000136e: 	movl	%ecx, 0x38(%rsp)
    00001372: 	addl	%r15d, %eax
    00001375: 	movzbl	%al, %edx
    00001378: 	movl	%edi, %eax
    0000137a: 	imull	%ecx, %eax
    0000137d: 	leal	(%rdi,%rdx,2), %r12d
    00001381: 	movl	%edx, 0x40(%rsp)
    00001385: 	movl	%r12d, 0xac(%rsp)
    0000138d: 	movl	%eax, %r8d
    00001390: 	movl	%ecx, %eax
    00001392: 	imull	%ebp, %eax
    00001395: 	addl	%r15d, %r8d
    00001398: 	movzbl	%r8b, %r8d
    0000139c: 	leal	(%rcx,%r8,2), %r11d
    000013a0: 	movl	%eax, %edi
    000013a2: 	movl	%r11d, 0xb8(%rsp)
    000013aa: 	movzbl	0x1f3c(%rbx), %r11d
    000013b2: 	addl	%r15d, %edi
    000013b5: 	movzbl	%dil, %edi
    000013b9: 	leal	(%rbp,%rdi,2), %eax
    000013bd: 	movl	%eax, 0x24(%rsp)
    000013c1: 	movl	%ebp, %eax
    000013c3: 	imull	%r11d, %eax
    000013c7: 	movl	%eax, %esi
    000013c9: 	movl	%r11d, %eax
    000013cc: 	imull	%r9d, %eax
    000013d0: 	addl	%r15d, %esi
    000013d3: 	movzbl	%sil, %esi
    000013d7: 	leal	(%r11,%rsi,2), %edx
    000013db: 	leal	(%rbp,%rsi,2), %esi
    000013df: 	movl	%eax, %ecx
    000013e1: 	movl	%r9d, %eax
    000013e4: 	movl	%edx, 0x28(%rsp)
    000013e8: 	addl	%r15d, %ecx
    000013eb: 	movzbl	%cl, %ecx
    000013ee: 	leal	(%r9,%rcx,2), %r12d
    000013f2: 	leal	(%r11,%rcx,2), %ecx
    000013f6: 	movl	%r12d, 0x2c(%rsp)
    000013fb: 	movzbl	0x1f3e(%rbx), %r12d
    00001403: 	imull	%r12d, %eax
    00001407: 	movl	%eax, %edx
    00001409: 	movzbl	%r12b, %eax
    0000140d: 	addl	%r15d, %edx
    00001410: 	movl	%eax, 0x5c(%rsp)
    00001414: 	movzbl	%dl, %edx
    00001417: 	leal	(%rax,%rdx,2), %r10d
    0000141b: 	movzbl	0x1f3f(%rbx), %eax
    00001422: 	leal	(%r9,%rdx,2), %edx
    00001426: 	movl	%r10d, 0x30(%rsp)
    0000142b: 	imull	%r12d, %eax
    0000142f: 	movl	%eax, %r12d
    00001432: 	movzbl	0x1f3f(%rbx), %eax
    00001439: 	addl	%r15d, %r12d
    0000143c: 	movzbl	%r12b, %r12d
    00001440: 	leal	(%rax,%r12,2), %r10d
    00001444: 	movl	0x7c(%rsp), %eax
    00001448: 	movl	%r10d, 0x34(%rsp)
    0000144d: 	movzbl	0x1f30(%rbx), %r10d
    00001455: 	leal	(%r13,%rax,2), %r13d
    0000145a: 	movzbl	0x80(%rsp), %eax
    00001462: 	leal	(%r10,%rax,2), %eax
    00001466: 	movl	0x74(%rsp), %r10d
    0000146b: 	addl	%r13d, %eax
    0000146e: 	movl	0x78(%rsp), %r13d
    00001473: 	addb	0x84(%rsp), %al
    0000147a: 	leal	(%r13,%r10,2), %r13d
    0000147f: 	movl	0x6c(%rsp), %r10d
    00001484: 	addl	%eax, %r13d
    00001487: 	movl	0x70(%rsp), %eax
    0000148b: 	leal	(%rax,%r10,2), %eax
    0000148f: 	movl	0x68(%rsp), %r10d
    00001494: 	addl	%r13d, %eax
    00001497: 	movl	0x64(%rsp), %r13d
    0000149c: 	leal	(%r10,%r13,2), %r13d
    000014a0: 	movl	0x58(%rsp), %r10d
    000014a5: 	addl	%eax, %r13d
    000014a8: 	movl	0x60(%rsp), %eax
    000014ac: 	leal	(%rax,%r10,2), %eax
    000014b0: 	movl	0x54(%rsp), %r10d
    000014b5: 	addl	%r13d, %eax
    000014b8: 	movl	0x50(%rsp), %r13d
    000014bd: 	movl	0x9c(%rsp), %r11d
    000014c5: 	leal	(%r10,%r13,2), %r13d
    000014c9: 	movl	0x48(%rsp), %r10d
    000014ce: 	addl	%eax, %r13d
    000014d1: 	movl	0x4c(%rsp), %eax
    000014d5: 	leal	(%rax,%r10,2), %eax
    000014d9: 	movl	0x40(%rsp), %r10d
    000014de: 	addl	%r13d, %eax
    000014e1: 	movl	0x44(%rsp), %r13d
    000014e6: 	leal	(%r13,%r10,2), %r13d
    000014eb: 	movl	0xa0(%rsp), %r10d
    000014f3: 	addl	%r13d, %eax
    000014f6: 	movl	0x3c(%rsp), %r13d
    000014fb: 	leal	(%r13,%r8,2), %r8d
    00001500: 	movl	0x38(%rsp), %r13d
    00001505: 	addl	%r8d, %eax
    00001508: 	leal	(%r13,%rdi,2), %edi
    0000150d: 	addl	%edi, %eax
    0000150f: 	movl	0x1c(%rsp), %edi
    00001513: 	addl	%esi, %eax
    00001515: 	movl	0x5c(%rsp), %esi
    00001519: 	addl	%ecx, %eax
    0000151b: 	movl	%edi, %ecx
    0000151d: 	movl	0x90(%rsp), %edi
    00001524: 	addl	%edx, %eax
    00001526: 	leal	(%rsi,%r12,2), %edx
    0000152a: 	movzbl	0x88(%rsp), %esi
    00001532: 	movl	0xac(%rsp), %r12d
    0000153a: 	addl	%edx, %eax
    0000153c: 	leal	(%rcx,%rsi,4), %edx
    0000153f: 	movl	%edi, %esi
    00001541: 	addb	0x1c(%rsp), %dl
    00001545: 	movl	0x98(%rsp), %ecx
    0000154c: 	leal	(%rdx,%rsi,2), %edx
    0000154f: 	movl	0x94(%rsp), %esi
    00001556: 	shll	$0x2, %eax
    00001559: 	movl	%esi, %r8d
    0000155c: 	leal	(%rdx,%r8,2), %edx
    00001560: 	movl	%ecx, %r8d
    00001563: 	leal	(%rdx,%r8,2), %edx
    00001567: 	movl	%r11d, %r8d
    0000156a: 	leal	(%rdx,%r8,2), %edx
    0000156e: 	movl	%r10d, %r8d
    00001571: 	leal	(%rdx,%r8,2), %edx
    00001575: 	movl	0xa4(%rsp), %r8d
    0000157d: 	movl	%r8d, %ebp
    00001580: 	leal	(%rdx,%rbp,2), %edx
    00001583: 	movl	0xa8(%rsp), %ebp
    0000158a: 	movl	%ebp, %r13d
    0000158d: 	leal	(%rdx,%r13,2), %edx
    00001591: 	movl	%r12d, %r13d
    00001594: 	leal	(%rdx,%r13,2), %edx
    00001598: 	movl	0xb8(%rsp), %r13d
    000015a0: 	movl	%r13d, %r9d
    000015a3: 	leal	(%rdx,%r9,2), %edx
    000015a7: 	movzbl	0x24(%rsp), %r9d
    000015ad: 	leal	(%rdx,%r9,2), %edx
    000015b1: 	movzbl	0x28(%rsp), %r9d
    000015b7: 	leal	(%rdx,%r9,2), %edx
    000015bb: 	movzbl	0x2c(%rsp), %r9d
    000015c1: 	leal	(%rdx,%r9,2), %edx
    000015c5: 	movzbl	0x30(%rsp), %r9d
    000015cb: 	leal	(%rdx,%r9,2), %edx
    000015cf: 	movzbl	0x34(%rsp), %r9d
    000015d5: 	leal	(%rdx,%r9,2), %edx
    000015d9: 	movzbl	0x1c(%rsp), %r9d
    000015df: 	leal	(%rdx,%r9,2), %edx
    000015e3: 	leal	(%rdx,%rdi,2), %edx
    000015e6: 	movl	%esi, %edi
    000015e8: 	movl	%ecx, %esi
    000015ea: 	leal	(%rdx,%rdi,2), %edx
    000015ed: 	movl	%r11d, %edi
    000015f0: 	leal	(%rdx,%rsi,2), %edx
    000015f3: 	movl	%r10d, %esi
    000015f6: 	leal	(%rdx,%rdi,2), %edx
    000015f9: 	movl	%r8d, %edi
    000015fc: 	leal	(%rdx,%rsi,2), %edx
    000015ff: 	movl	%ebp, %esi
    00001601: 	leal	(%rdx,%rdi,2), %edx
    00001604: 	movl	%r12d, %edi
    00001607: 	leal	(%rdx,%rsi,2), %edx
    0000160a: 	movl	%r13d, %esi
    0000160d: 	leal	(%rdx,%rdi,2), %edx
    00001610: 	movzbl	0x24(%rsp), %edi
    00001615: 	leal	(%rdx,%rsi,2), %edx
    00001618: 	movzbl	0x28(%rsp), %esi
    0000161d: 	leal	(%rdx,%rdi,2), %edx
    00001620: 	movzbl	0x2c(%rsp), %edi
    00001625: 	leal	(%rdx,%rsi,2), %edx
    00001628: 	movzbl	0x30(%rsp), %esi
    0000162d: 	leal	(%rdx,%rdi,2), %edx
    00001630: 	movzbl	0x34(%rsp), %edi
    00001635: 	leal	(%rdx,%rsi,2), %edx
    00001638: 	leal	(%rdx,%rdi,2), %edx
    0000163b: 	subl	%edx, %eax
    0000163d: 	addb	0x8c(%rsp), %al
    00001644: 	jne	.Ltmp5081 # Offset: 5700
.Ltmp5144:
    0000164a: 	addl	$0x1, 0x20(%rsp)
    0000164f: 	movl	0x20(%rsp), %eax
    00001653: 	cmpl	0xbc(%rsp), %eax
    0000165a: 	jl	.Ltmp5082 # Offset: 5722
.Ltmp5079:
    00001660: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00001667: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbp
    0000166e: 	subq	$0x20, %rax
    00001672: 	cmpq	%rax, %rbp
    00001675: 	je	.Ltmp5083 # Offset: 5749
    0000167b: 	leaq	0x10(%rbp), %rdi
    0000167f: 	movq	0x128(%rsp), %r12
    00001687: 	movq	%rdi, (%rbp)
    0000168b: 	movq	0x120(%rsp), %r13
    00001693: 	movq	%r13, %rax
    00001696: 	addq	%r12, %rax
    00001699: 	je	.Ltmp5084 # Offset: 5785
    0000169b: 	testq	%r13, %r13
    0000169e: 	je	.Ltmp5085 # Offset: 5790
.Ltmp5084:
    000016a4: 	movq	%r12, 0x118(%rsp)
    000016ac: 	cmpq	$0xf, %r12
    000016b0: 	ja	.Ltmp5086 # Offset: 5808
    000016b6: 	cmpq	$0x1, %r12
    000016ba: 	jne	.Ltmp5087 # Offset: 5818
    000016c0: 	movzbl	(%r13), %eax
    000016c5: 	movb	%al, 0x10(%rbp)
.Ltmp5175:
    000016c8: 	movq	%r12, 0x8(%rbp)
    000016cc: 	movb	$0x0, (%rdi,%r12)
    000016d1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000016d8: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000016df: 	addq	$0x20, %rax
    000016e3: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000016ea: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000016f1: 	je	.Ltmp5088 # Offset: 5873
.Ltmp5151:
    000016f7: 	movq	-0x20(%rax), %rbp
    000016fb: 	callq	clock@PLT # Offset: 5883
    00001700: 	pxor	%xmm0, %xmm0
    00001704: 	movq	%rax, end_time(%rip)
    0000170b: 	movq	%rbp, %rdi
    0000170e: 	subq	start_time(%rip), %rax
    00001715: 	cvtsi2sd	%rax, %xmm0
    0000171a: 	divsd	DATAat0x4d640(%rip), %xmm0
    00001722: 	callq	_Z13record_resultdPKc # Offset: 5922
    00001727: 	movq	0x120(%rsp), %rdi
    0000172f: 	cmpq	0xc8(%rsp), %rdi
    00001737: 	je	.Ltmp5089 # Offset: 5943
    00001739: 	movq	0x130(%rsp), %rax
    00001741: 	leaq	0x1(%rax), %rsi
    00001745: 	callq	_ZdlPvm@PLT # Offset: 5957
.Ltmp5089:
    0000174a: 	leaq	DATAat0x4d27e(%rip), %rdx
    00001751: 	movq	0xc0(%rsp), %rsi
    00001759: 	xorl	%ebp, %ebp
    0000175b: 	movq	0xb0(%rsp), %rdi
    00001763: 	leaq	0x1f30(%rbx), %r14
    0000176a: 	leaq	DATAat0x4d004(%rip), %r12
    00001771: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6001
    00001776: 	callq	clock@PLT # Offset: 6006
    0000177b: 	movl	iterations(%rip), %r13d
    00001782: 	movq	%rax, start_time(%rip)
    00001789: 	testl	%r13d, %r13d
    0000178c: 	jle	.Ltmp5090 # Offset: 6028
    00001792: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5093:
    00001798: 	movzbl	(%rbx), %ecx
    0000179b: 	movq	%rbx, %rax
    0000179e: 	subb	0x1(%rbx), %cl
    000017a1: 	pxor	%xmm1, %xmm1
    000017a5: 	nopl	(%rax) # Size: 3
.Ltmp5091:
    000017a8: 	movdqu	(%rax), %xmm0
    000017ac: 	movdqu	0x1(%rax), %xmm4
    000017b1: 	addq	$0x10, %rax
    000017b5: 	psubb	%xmm4, %xmm0
    000017b9: 	paddb	%xmm0, %xmm0
    000017bd: 	paddb	%xmm0, %xmm0
    000017c1: 	paddb	%xmm0, %xmm1
    000017c5: 	cmpq	%r14, %rax
    000017c8: 	jne	.Ltmp5091 # Offset: 6088
    000017ca: 	movdqa	%xmm1, %xmm0
    000017ce: 	psrldq	$0x8, %xmm0
    000017d3: 	paddb	%xmm0, %xmm1
    000017d7: 	pxor	%xmm0, %xmm0
    000017db: 	psadbw	%xmm0, %xmm1
    000017df: 	movq	0x1f30(%rbx), %xmm0
    000017e7: 	movd	%xmm1, %edx
    000017eb: 	movq	0x1f31(%rbx), %xmm1
    000017f3: 	psubb	%xmm1, %xmm0
    000017f7: 	pxor	%xmm1, %xmm1
    000017fb: 	paddb	%xmm0, %xmm0
    000017ff: 	paddb	%xmm0, %xmm0
    00001803: 	movdqa	%xmm0, %xmm3
    00001807: 	psadbw	%xmm1, %xmm3
    0000180b: 	movq	%xmm3, 0xd8(%rsp)
    00001814: 	movq	%xmm3, %rax
    00001819: 	movzbl	0x1f39(%rbx), %r10d
    00001821: 	movzbl	0x1f3a(%rbx), %r9d
    00001829: 	movl	%eax, %r11d
    0000182c: 	movzbl	0x1f38(%rbx), %eax
    00001833: 	movzbl	0x1f3b(%rbx), %r8d
    0000183b: 	subb	0x1f3f(%rbx), %cl
    00001841: 	addb	0x1f3e(%rbx), %cl
    00001847: 	addl	%edx, %r11d
    0000184a: 	subl	%r10d, %eax
    0000184d: 	movzbl	0x1f3c(%rbx), %edi
    00001854: 	subl	%r9d, %r10d
    00001857: 	movzbl	0x1f3d(%rbx), %esi
    0000185e: 	addl	%ecx, %eax
    00001860: 	subl	%r8d, %r9d
    00001863: 	addl	%r10d, %eax
    00001866: 	subl	%edi, %r8d
    00001869: 	subl	%esi, %edi
    0000186b: 	subb	0x1f3e(%rbx), %sil
    00001872: 	addl	%eax, %r9d
    00001875: 	addl	%r9d, %r8d
    00001878: 	addl	%r8d, %edi
    0000187b: 	addl	%edi, %esi
    0000187d: 	leal	(%r11,%rsi,4), %esi
    00001881: 	testb	%sil, %sil
    00001884: 	jne	.Ltmp5092 # Offset: 6276
.Ltmp5139:
    0000188a: 	addl	$0x1, %ebp
    0000188d: 	cmpl	%r13d, %ebp
    00001890: 	jl	.Ltmp5093 # Offset: 6288
.Ltmp5090:
    00001896: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000189d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbp
    000018a4: 	subq	$0x20, %rax
    000018a8: 	cmpq	%rax, %rbp
    000018ab: 	je	.Ltmp5094 # Offset: 6315
    000018b1: 	leaq	0x10(%rbp), %rdi
    000018b5: 	movq	0x128(%rsp), %r12
    000018bd: 	movq	%rdi, (%rbp)
    000018c1: 	movq	0x120(%rsp), %r13
    000018c9: 	movq	%r13, %rax
    000018cc: 	addq	%r12, %rax
    000018cf: 	je	.Ltmp5095 # Offset: 6351
    000018d1: 	testq	%r13, %r13
    000018d4: 	je	.Ltmp5096 # Offset: 6356
.Ltmp5095:
    000018da: 	movq	%r12, 0x118(%rsp)
    000018e2: 	cmpq	$0xf, %r12
    000018e6: 	ja	.Ltmp5097 # Offset: 6374
    000018ec: 	cmpq	$0x1, %r12
    000018f0: 	jne	.Ltmp5098 # Offset: 6384
    000018f6: 	movzbl	(%r13), %eax
    000018fb: 	movb	%al, 0x10(%rbp)
.Ltmp5167:
    000018fe: 	movq	%r12, 0x8(%rbp)
    00001902: 	movb	$0x0, (%rdi,%r12)
    00001907: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000190e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001915: 	addq	$0x20, %rax
    00001919: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00001920: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00001927: 	je	.Ltmp5099 # Offset: 6439
.Ltmp5158:
    0000192d: 	movq	-0x20(%rax), %rbp
    00001931: 	callq	clock@PLT # Offset: 6449
    00001936: 	pxor	%xmm0, %xmm0
    0000193a: 	movq	%rax, end_time(%rip)
    00001941: 	movq	%rbp, %rdi
    00001944: 	subq	start_time(%rip), %rax
    0000194b: 	cvtsi2sd	%rax, %xmm0
    00001950: 	divsd	DATAat0x4d640(%rip), %xmm0
    00001958: 	callq	_Z13record_resultdPKc # Offset: 6488
    0000195d: 	movq	0x120(%rsp), %rdi
    00001965: 	cmpq	0xc8(%rsp), %rdi
    0000196d: 	je	.Ltmp5100 # Offset: 6509
    0000196f: 	movq	0x130(%rsp), %rax
    00001977: 	leaq	0x1(%rax), %rsi
    0000197b: 	callq	_ZdlPvm@PLT # Offset: 6523
.Ltmp5100:
    00001980: 	movq	0xb0(%rsp), %rdi
    00001988: 	movq	0xc0(%rsp), %rsi
    00001990: 	xorl	%r12d, %r12d
    00001993: 	leaq	0x1(%rbx), %r13
    00001997: 	leaq	DATAat0x4d293(%rip), %rdx
    0000199e: 	leaq	0x1f40(%rbx), %rbp
    000019a5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6565
    000019aa: 	leaq	DATAat0x4d004(%rip), %r14
    000019b1: 	callq	clock@PLT # Offset: 6577
    000019b6: 	movl	iterations(%rip), %edi
    000019bc: 	movq	%rax, start_time(%rip)
    000019c3: 	testl	%edi, %edi
    000019c5: 	jle	.Ltmp5101 # Offset: 6597
    000019cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5104:
    000019d0: 	movzbl	(%rbx), %r8d
    000019d4: 	movzbl	0x1(%rbx), %eax
    000019d8: 	movl	%eax, %ecx
    000019da: 	movl	%r8d, %edx
    000019dd: 	divb	%r8b
    000019e0: 	addl	%r15d, %eax
    000019e3: 	movzbl	%al, %eax
    000019e6: 	leal	(%r8,%rax,2), %esi
    000019ea: 	leal	(%rcx,%rax,2), %ecx
    000019ed: 	shll	$0x2, %esi
    000019f0: 	subl	%ecx, %esi
    000019f2: 	subl	%ecx, %esi
    000019f4: 	addl	%ecx, %ecx
    000019f6: 	subl	%ecx, %esi
    000019f8: 	movq	%r13, %rcx
    000019fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5102:
    00001a00: 	movzbl	(%rcx), %eax
    00001a03: 	movl	%r8d, %r10d
    00001a06: 	movl	%edx, %r8d
    00001a09: 	addq	$0x1, %rcx
    00001a0d: 	movl	%eax, %edx
    00001a0f: 	divb	%r8b
    00001a12: 	movzbl	%dl, %r8d
    00001a16: 	addl	%r15d, %eax
    00001a19: 	movzbl	%al, %eax
    00001a1c: 	leal	(%r8,%rax,2), %r9d
    00001a20: 	leal	(%r10,%rax,2), %eax
    00001a24: 	shll	$0x2, %eax
    00001a27: 	subl	%r9d, %eax
    00001a2a: 	subl	%r9d, %eax
    00001a2d: 	addl	%r9d, %r9d
    00001a30: 	subl	%r9d, %eax
    00001a33: 	addl	%eax, %esi
    00001a35: 	cmpq	%rcx, %rbp
    00001a38: 	jne	.Ltmp5102 # Offset: 6712
    00001a3a: 	testb	%sil, %sil
    00001a3d: 	jne	.Ltmp5103 # Offset: 6717
.Ltmp5138:
    00001a43: 	addl	$0x1, %r12d
    00001a47: 	cmpl	%edi, %r12d
    00001a4a: 	jl	.Ltmp5104 # Offset: 6730
.Ltmp5101:
    00001a4c: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00001a53: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbp
    00001a5a: 	subq	$0x20, %rax
    00001a5e: 	cmpq	%rax, %rbp
    00001a61: 	je	.Ltmp5105 # Offset: 6753
    00001a67: 	leaq	0x10(%rbp), %rdi
    00001a6b: 	movq	0x128(%rsp), %r12
    00001a73: 	movq	%rdi, (%rbp)
    00001a77: 	movq	0x120(%rsp), %r13
    00001a7f: 	movq	%r13, %rax
    00001a82: 	addq	%r12, %rax
    00001a85: 	je	.Ltmp5106 # Offset: 6789
    00001a87: 	testq	%r13, %r13
    00001a8a: 	je	.Ltmp5107 # Offset: 6794
.Ltmp5106:
    00001a90: 	movq	%r12, 0x118(%rsp)
    00001a98: 	cmpq	$0xf, %r12
    00001a9c: 	ja	.Ltmp5108 # Offset: 6812
    00001aa2: 	cmpq	$0x1, %r12
    00001aa6: 	jne	.Ltmp5109 # Offset: 6822
    00001aac: 	movzbl	(%r13), %eax
    00001ab1: 	movb	%al, 0x10(%rbp)
.Ltmp5163:
    00001ab4: 	movq	%r12, 0x8(%rbp)
    00001ab8: 	movb	$0x0, (%rdi,%r12)
    00001abd: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001ac4: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001acb: 	addq	$0x20, %rax
    00001acf: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00001ad6: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00001add: 	je	.Ltmp5110 # Offset: 6877
.Ltmp5157:
    00001ae3: 	movq	-0x20(%rax), %rbp
    00001ae7: 	callq	clock@PLT # Offset: 6887
    00001aec: 	pxor	%xmm0, %xmm0
    00001af0: 	movq	%rax, end_time(%rip)
    00001af7: 	movq	%rbp, %rdi
    00001afa: 	subq	start_time(%rip), %rax
    00001b01: 	cvtsi2sd	%rax, %xmm0
    00001b06: 	divsd	DATAat0x4d640(%rip), %xmm0
    00001b0e: 	callq	_Z13record_resultdPKc # Offset: 6926
    00001b13: 	movq	0x120(%rsp), %rdi
    00001b1b: 	cmpq	0xc8(%rsp), %rdi
    00001b23: 	je	.Ltmp5111 # Offset: 6947
    00001b25: 	movq	0x130(%rsp), %rax
    00001b2d: 	leaq	0x1(%rax), %rsi
    00001b31: 	callq	_ZdlPvm@PLT # Offset: 6961
.Ltmp5111:
    00001b36: 	leaq	DATAat0x4d29f(%rip), %rdx
    00001b3d: 	movq	0xc0(%rsp), %rsi
    00001b45: 	xorl	%ebp, %ebp
    00001b47: 	movq	0xb0(%rsp), %rdi
    00001b4f: 	leaq	0x1f30(%rbx), %r14
    00001b56: 	leaq	DATAat0x4d004(%rip), %r12
    00001b5d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7005
    00001b62: 	callq	clock@PLT # Offset: 7010
    00001b67: 	movl	iterations(%rip), %r13d
    00001b6e: 	movq	%rax, start_time(%rip)
    00001b75: 	testl	%r13d, %r13d
    00001b78: 	jle	.Ltmp5112 # Offset: 7032
    00001b7e: 	nop # Size: 2
.Ltmp5115:
    00001b80: 	movzbl	(%rbx), %ecx
    00001b83: 	movq	%rbx, %rax
    00001b86: 	subb	0x1(%rbx), %cl
    00001b89: 	pxor	%xmm1, %xmm1
    00001b8d: 	nopl	(%rax) # Size: 3
.Ltmp5113:
    00001b90: 	movdqu	(%rax), %xmm0
    00001b94: 	movdqu	0x1(%rax), %xmm5
    00001b99: 	addq	$0x10, %rax
    00001b9d: 	psubb	%xmm5, %xmm0
    00001ba1: 	paddb	%xmm0, %xmm0
    00001ba5: 	paddb	%xmm0, %xmm0
    00001ba9: 	paddb	%xmm0, %xmm1
    00001bad: 	cmpq	%r14, %rax
    00001bb0: 	jne	.Ltmp5113 # Offset: 7088
    00001bb2: 	movdqa	%xmm1, %xmm0
    00001bb6: 	psrldq	$0x8, %xmm0
    00001bbb: 	paddb	%xmm0, %xmm1
    00001bbf: 	pxor	%xmm0, %xmm0
    00001bc3: 	psadbw	%xmm0, %xmm1
    00001bc7: 	movq	0x1f30(%rbx), %xmm0
    00001bcf: 	movd	%xmm1, %edx
    00001bd3: 	movq	0x1f31(%rbx), %xmm1
    00001bdb: 	psubb	%xmm1, %xmm0
    00001bdf: 	pxor	%xmm1, %xmm1
    00001be3: 	paddb	%xmm0, %xmm0
    00001be7: 	paddb	%xmm0, %xmm0
    00001beb: 	movdqa	%xmm0, %xmm6
    00001bef: 	psadbw	%xmm1, %xmm6
    00001bf3: 	movq	%xmm6, 0xd0(%rsp)
    00001bfc: 	movq	%xmm6, %rax
    00001c01: 	movzbl	0x1f39(%rbx), %r10d
    00001c09: 	movzbl	0x1f3a(%rbx), %r9d
    00001c11: 	movl	%eax, %r11d
    00001c14: 	movzbl	0x1f38(%rbx), %eax
    00001c1b: 	movzbl	0x1f3b(%rbx), %r8d
    00001c23: 	subb	0x1f3f(%rbx), %cl
    00001c29: 	addb	0x1f3e(%rbx), %cl
    00001c2f: 	addl	%edx, %r11d
    00001c32: 	subl	%r10d, %eax
    00001c35: 	movzbl	0x1f3c(%rbx), %edi
    00001c3c: 	subl	%r9d, %r10d
    00001c3f: 	movzbl	0x1f3d(%rbx), %esi
    00001c46: 	addl	%ecx, %eax
    00001c48: 	subl	%r8d, %r9d
    00001c4b: 	addl	%r10d, %eax
    00001c4e: 	subl	%edi, %r8d
    00001c51: 	subl	%esi, %edi
    00001c53: 	subb	0x1f3e(%rbx), %sil
    00001c5a: 	addl	%eax, %r9d
    00001c5d: 	addl	%r9d, %r8d
    00001c60: 	addl	%r8d, %edi
    00001c63: 	addl	%edi, %esi
    00001c65: 	leal	(%r11,%rsi,4), %esi
    00001c69: 	testb	%sil, %sil
    00001c6c: 	jne	.Ltmp5114 # Offset: 7276
.Ltmp5137:
    00001c72: 	addl	$0x1, %ebp
    00001c75: 	cmpl	%r13d, %ebp
    00001c78: 	jl	.Ltmp5115 # Offset: 7288
.Ltmp5112:
    00001c7e: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00001c85: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbp
    00001c8c: 	subq	$0x20, %rax
    00001c90: 	cmpq	%rax, %rbp
    00001c93: 	je	.Ltmp5116 # Offset: 7315
    00001c99: 	leaq	0x10(%rbp), %rdi
    00001c9d: 	movq	0x128(%rsp), %r12
    00001ca5: 	movq	%rdi, (%rbp)
    00001ca9: 	movq	0x120(%rsp), %r13
    00001cb1: 	movq	%r13, %rax
    00001cb4: 	addq	%r12, %rax
    00001cb7: 	je	.Ltmp5117 # Offset: 7351
    00001cb9: 	testq	%r13, %r13
    00001cbc: 	je	.Ltmp5118 # Offset: 7356
.Ltmp5117:
    00001cc2: 	movq	%r12, 0x118(%rsp)
    00001cca: 	cmpq	$0xf, %r12
    00001cce: 	ja	.Ltmp5119 # Offset: 7374
    00001cd4: 	cmpq	$0x1, %r12
    00001cd8: 	jne	.Ltmp5120 # Offset: 7384
    00001cde: 	movzbl	(%r13), %eax
    00001ce3: 	movb	%al, 0x10(%rbp)
.Ltmp5162:
    00001ce6: 	movq	%r12, 0x8(%rbp)
    00001cea: 	movb	$0x0, (%rdi,%r12)
    00001cef: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001cf6: 	addq	$0x20, %rax
    00001cfa: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
.Ltmp5161:
    00001d01: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00001d08: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001d0f: 	je	.Ltmp5121 # Offset: 7439
.Ltmp5160:
    00001d15: 	movq	-0x20(%rax), %rbp
    00001d19: 	callq	clock@PLT # Offset: 7449
    00001d1e: 	pxor	%xmm0, %xmm0
    00001d22: 	movq	%rax, end_time(%rip)
    00001d29: 	movq	%rbp, %rdi
    00001d2c: 	subq	start_time(%rip), %rax
    00001d33: 	cvtsi2sd	%rax, %xmm0
    00001d38: 	divsd	DATAat0x4d640(%rip), %xmm0
    00001d40: 	callq	_Z13record_resultdPKc # Offset: 7488
    00001d45: 	movq	0x120(%rsp), %rdi
    00001d4d: 	cmpq	0xc8(%rsp), %rdi
    00001d55: 	je	.Ltmp5122 # Offset: 7509
    00001d57: 	movq	0x130(%rsp), %rax
    00001d5f: 	leaq	0x1(%rax), %rsi
    00001d63: 	callq	_ZdlPvm@PLT # Offset: 7523
.Ltmp5122:
    00001d68: 	movq	0xb0(%rsp), %rdi
    00001d70: 	movq	0xc0(%rsp), %rsi
    00001d78: 	xorl	%r12d, %r12d
    00001d7b: 	leaq	0x1(%rbx), %r13
    00001d7f: 	leaq	DATAat0x4d2b1(%rip), %rdx
    00001d86: 	leaq	0x1f40(%rbx), %rbp
    00001d8d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7565
    00001d92: 	leaq	DATAat0x4d004(%rip), %r14
    00001d99: 	callq	clock@PLT # Offset: 7577
    00001d9e: 	movl	iterations(%rip), %edi
    00001da4: 	movq	%rax, start_time(%rip)
    00001dab: 	testl	%edi, %edi
    00001dad: 	jle	.Ltmp5123 # Offset: 7597
    00001db3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5126:
    00001db8: 	movzbl	0x1(%rbx), %esi
    00001dbc: 	movzbl	(%rbx), %r8d
    00001dc0: 	movl	%esi, %eax
    00001dc2: 	movl	%r8d, %edx
    00001dc5: 	subl	%r8d, %eax
    00001dc8: 	imull	%r15d, %eax
    00001dcc: 	movl	%eax, %ecx
    00001dce: 	movzbl	%sil, %eax
    00001dd2: 	divb	%r15b
    00001dd5: 	addl	%ecx, %eax
    00001dd7: 	movzbl	%al, %eax
    00001dda: 	leal	(%rsi,%rax,2), %ecx
    00001ddd: 	leal	(%r8,%rax,2), %esi
    00001de1: 	shll	$0x2, %esi
    00001de4: 	subl	%ecx, %esi
    00001de6: 	subl	%ecx, %esi
    00001de8: 	addl	%ecx, %ecx
    00001dea: 	subl	%ecx, %esi
    00001dec: 	movq	%r13, %rcx
    00001def: 	nop # Size: 1
.Ltmp5124:
    00001df0: 	movl	%r8d, %r10d
    00001df3: 	movl	%edx, %r8d
    00001df6: 	movzbl	(%rcx), %edx
    00001df9: 	addq	$0x1, %rcx
    00001dfd: 	movl	%edx, %eax
    00001dff: 	subl	%r8d, %eax
    00001e02: 	imull	%r15d, %eax
    00001e06: 	movl	%eax, %r8d
    00001e09: 	movzbl	%dl, %eax
    00001e0c: 	divb	%r15b
    00001e0f: 	addl	%r8d, %eax
    00001e12: 	movzbl	%dl, %r8d
    00001e16: 	movzbl	%al, %eax
    00001e19: 	leal	(%r8,%rax,2), %r9d
    00001e1d: 	leal	(%r10,%rax,2), %eax
    00001e21: 	shll	$0x2, %eax
    00001e24: 	subl	%r9d, %eax
    00001e27: 	subl	%r9d, %eax
    00001e2a: 	addl	%r9d, %r9d
    00001e2d: 	subl	%r9d, %eax
    00001e30: 	addl	%eax, %esi
    00001e32: 	cmpq	%rbp, %rcx
    00001e35: 	jne	.Ltmp5124 # Offset: 7733
    00001e37: 	testb	%sil, %sil
    00001e3a: 	jne	.Ltmp5125 # Offset: 7738
.Ltmp5140:
    00001e40: 	addl	$0x1, %r12d
    00001e44: 	cmpl	%edi, %r12d
    00001e47: 	jl	.Ltmp5126 # Offset: 7751
.Ltmp5123:
    00001e4d: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00001e54: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00001e5b: 	subq	$0x20, %rax
    00001e5f: 	cmpq	%rax, %rbx
    00001e62: 	je	.Ltmp5127 # Offset: 7778
    00001e68: 	leaq	0x10(%rbx), %rdi
    00001e6c: 	movq	0x128(%rsp), %r12
    00001e74: 	movq	%rdi, (%rbx)
    00001e77: 	movq	0x120(%rsp), %rbp
    00001e7f: 	movq	%rbp, %rax
    00001e82: 	addq	%r12, %rax
    00001e85: 	je	.Ltmp5128 # Offset: 7813
    00001e87: 	testq	%rbp, %rbp
    00001e8a: 	je	.Ltmp5129 # Offset: 7818
.Ltmp5128:
    00001e90: 	movq	%r12, 0x118(%rsp)
    00001e98: 	cmpq	$0xf, %r12
    00001e9c: 	ja	.Ltmp5130 # Offset: 7836
    00001ea2: 	cmpq	$0x1, %r12
    00001ea6: 	jne	.Ltmp5131 # Offset: 7846
    00001eac: 	movzbl	(%rbp), %eax
    00001eb0: 	movb	%al, 0x10(%rbx)
.Ltmp5173:
    00001eb3: 	movq	%r12, 0x8(%rbx)
    00001eb7: 	movb	$0x0, (%rdi,%r12)
    00001ebc: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001ec3: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001eca: 	addq	$0x20, %rax
    00001ece: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00001ed5: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00001edc: 	je	.Ltmp5132 # Offset: 7900
.Ltmp5152:
    00001ee2: 	movq	-0x20(%rax), %rbp
    00001ee6: 	callq	clock@PLT # Offset: 7910
    00001eeb: 	pxor	%xmm0, %xmm0
    00001eef: 	movq	%rax, end_time(%rip)
    00001ef6: 	movq	%rbp, %rdi
    00001ef9: 	subq	start_time(%rip), %rax
    00001f00: 	cvtsi2sd	%rax, %xmm0
    00001f05: 	divsd	DATAat0x4d640(%rip), %xmm0
    00001f0d: 	callq	_Z13record_resultdPKc # Offset: 7949
    00001f12: 	movq	0x120(%rsp), %rdi
    00001f1a: 	cmpq	0xc8(%rsp), %rdi
    00001f22: 	je	.Ltmp5133 # Offset: 7970
    00001f24: 	movq	0x130(%rsp), %rax
    00001f2c: 	leaq	0x1(%rax), %rsi
    00001f30: 	callq	_ZdlPvm@PLT # Offset: 7984
.Ltmp5133:
    00001f35: 	movq	0x148(%rsp), %rax
    00001f3d: 	subq	%fs:0x28, %rax
    00001f46: 	jne	.Ltmp5134 # Offset: 8006
    00001f4c: 	movl	iterations(%rip), %edx
    00001f52: 	xorl	%r8d, %r8d
    00001f55: 	xorl	%ecx, %ecx
    00001f57: 	movl	$0x1f40, %esi
    00001f5c: 	movq	0xc0(%rsp), %rax
    00001f64: 	movq	(%rax), %rdi
    00001f67: 	addq	$0x158, %rsp
    00001f6e: 	popq	%rbx
    00001f6f: 	popq	%rbp
    00001f70: 	popq	%r12
    00001f72: 	popq	%r13
    00001f74: 	popq	%r14
    00001f76: 	popq	%r15
    00001f78: 	jmp	_Z9summarizePKciiii # TAILCALL  # Offset: 8056
    00001f7d: 	nopl	(%rax) # Size: 3
.Ltmp5020:
    00001f80: 	movq	0x120(%rsp), %rdx
    00001f88: 	movq	%r12, %rsi
    00001f8b: 	movl	$0x1, %edi
    00001f90: 	xorl	%eax, %eax
    00001f92: 	callq	__printf_chk@PLT # Offset: 8082
    00001f97: 	movl	iterations(%rip), %r13d
    00001f9e: 	jmp	.Ltmp5135 # Offset: 8094
.Ltmp5025:
    00001fa3: 	leaq	0x118(%rsp), %rsi
    00001fab: 	xorl	%edx, %edx
    00001fad: 	movq	%rbp, %rdi
    00001fb0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8112
    00001fb5: 	movq	%rax, (%rbp)
    00001fb9: 	movq	%rax, %rdi
    00001fbc: 	movq	0x118(%rsp), %rax
    00001fc4: 	movq	%rax, 0x10(%rbp)
.Ltmp5174:
    00001fc8: 	movq	%r12, %rdx
    00001fcb: 	movq	%r13, %rsi
    00001fce: 	callq	memcpy@PLT # Offset: 8142
    00001fd3: 	movq	0x118(%rsp), %r12
    00001fdb: 	movq	(%rbp), %rdi
    00001fdf: 	jmp	.Ltmp5136 # Offset: 8159
    00001fe4: 	nopl	(%rax) # Size: 4
.Ltmp5114:
    00001fe8: 	movq	0x120(%rsp), %rdx
    00001ff0: 	movq	%r12, %rsi
    00001ff3: 	movl	$0x1, %edi
    00001ff8: 	xorl	%eax, %eax
    00001ffa: 	callq	__printf_chk@PLT # Offset: 8186
    00001fff: 	movl	iterations(%rip), %r13d
    00002006: 	jmp	.Ltmp5137 # Offset: 8198
    0000200b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5103:
    00002010: 	movq	0x120(%rsp), %rdx
    00002018: 	movq	%r14, %rsi
    0000201b: 	movl	$0x1, %edi
    00002020: 	xorl	%eax, %eax
    00002022: 	callq	__printf_chk@PLT # Offset: 8226
    00002027: 	movl	iterations(%rip), %edi
    0000202d: 	jmp	.Ltmp5138 # Offset: 8237
    00002032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5092:
    00002038: 	movq	0x120(%rsp), %rdx
    00002040: 	movq	%r12, %rsi
    00002043: 	movl	$0x1, %edi
    00002048: 	xorl	%eax, %eax
    0000204a: 	callq	__printf_chk@PLT # Offset: 8266
    0000204f: 	movl	iterations(%rip), %r13d
    00002056: 	jmp	.Ltmp5139 # Offset: 8278
    0000205b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5125:
    00002060: 	movq	0x120(%rsp), %rdx
    00002068: 	movq	%r14, %rsi
    0000206b: 	movl	$0x1, %edi
    00002070: 	xorl	%eax, %eax
    00002072: 	callq	__printf_chk@PLT # Offset: 8306
    00002077: 	movl	iterations(%rip), %edi
    0000207d: 	jmp	.Ltmp5140 # Offset: 8317
    00002082: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5031:
    00002088: 	movq	0x120(%rsp), %rdx
    00002090: 	movq	%r12, %rsi
    00002093: 	movl	$0x1, %edi
    00002098: 	xorl	%eax, %eax
    0000209a: 	callq	__printf_chk@PLT # Offset: 8346
    0000209f: 	movl	iterations(%rip), %r13d
    000020a6: 	jmp	.Ltmp5141 # Offset: 8358
    000020ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5048:
    000020b0: 	movq	0x120(%rsp), %rdx
    000020b8: 	movq	%r12, %rsi
    000020bb: 	movl	$0x1, %edi
    000020c0: 	xorl	%eax, %eax
    000020c2: 	callq	__printf_chk@PLT # Offset: 8386
    000020c7: 	movl	iterations(%rip), %r13d
    000020ce: 	jmp	.Ltmp5142 # Offset: 8398
    000020d3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5037:
    000020d8: 	movq	0x120(%rsp), %rdx
    000020e0: 	leaq	DATAat0x4d004(%rip), %rsi
    000020e7: 	movl	$0x1, %edi
    000020ec: 	xorl	%eax, %eax
    000020ee: 	callq	__printf_chk@PLT # Offset: 8430
    000020f3: 	movl	iterations(%rip), %eax
    000020f9: 	movl	%eax, 0x58(%rsp)
    000020fd: 	jmp	.Ltmp5143 # Offset: 8445
    00002102: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5081:
    00002108: 	movq	0x120(%rsp), %rdx
    00002110: 	leaq	DATAat0x4d004(%rip), %rsi
    00002117: 	movl	$0x1, %edi
    0000211c: 	xorl	%eax, %eax
    0000211e: 	callq	__printf_chk@PLT # Offset: 8478
    00002123: 	movl	iterations(%rip), %eax
    00002129: 	movl	%eax, 0xbc(%rsp)
    00002130: 	jmp	.Ltmp5144 # Offset: 8496
    00002135: 	nopl	(%rax) # Size: 3
.Ltmp5070:
    00002138: 	movq	0x120(%rsp), %rdx
    00002140: 	movq	%r12, %rsi
    00002143: 	movl	$0x1, %edi
    00002148: 	xorl	%eax, %eax
    0000214a: 	callq	__printf_chk@PLT # Offset: 8522
    0000214f: 	movl	iterations(%rip), %r13d
    00002156: 	jmp	.Ltmp5145 # Offset: 8534
    0000215b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5059:
    00002160: 	movq	0x120(%rsp), %rdx
    00002168: 	leaq	DATAat0x4d004(%rip), %rsi
    0000216f: 	movl	$0x1, %edi
    00002174: 	xorl	%eax, %eax
    00002176: 	callq	__printf_chk@PLT # Offset: 8566
    0000217b: 	movl	iterations(%rip), %eax
    00002181: 	movl	%eax, 0x58(%rsp)
    00002185: 	jmp	.Ltmp5146 # Offset: 8581
.Ltmp5061:
    0000218a: 	movq	0xb0(%rsp), %rsi
    00002192: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002199: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8601
    0000219e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000021a5: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000021ac: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000021b3: 	jne	.Ltmp5147 # Offset: 8627
.Ltmp5066:
    000021b9: 	movq	-0x8(%rdx), %rax
    000021bd: 	addq	$0x200, %rax
    000021c3: 	jmp	.Ltmp5147 # Offset: 8643
.Ltmp5044:
    000021c8: 	movq	-0x8(%rdx), %rax
    000021cc: 	addq	$0x200, %rax
    000021d2: 	jmp	.Ltmp5148 # Offset: 8658
.Ltmp5039:
    000021d7: 	movq	0xb0(%rsp), %rsi
    000021df: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000021e6: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8678
    000021eb: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000021f2: 	jmp	.Ltmp5149 # Offset: 8690
.Ltmp5050:
    000021f7: 	movq	0xb0(%rsp), %rsi
    000021ff: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002206: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8710
    0000220b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002212: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00002219: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002220: 	jne	.Ltmp5150 # Offset: 8736
.Ltmp5055:
    00002226: 	movq	-0x8(%rdx), %rax
    0000222a: 	addq	$0x200, %rax
    00002230: 	jmp	.Ltmp5150 # Offset: 8752
.Ltmp5083:
    00002235: 	movq	0xb0(%rsp), %rsi
    0000223d: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002244: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8772
    00002249: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002250: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00002257: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000225e: 	jne	.Ltmp5151 # Offset: 8798
.Ltmp5088:
    00002264: 	movq	-0x8(%rdx), %rax
    00002268: 	addq	$0x200, %rax
    0000226e: 	jmp	.Ltmp5151 # Offset: 8814
.Ltmp5127:
    00002273: 	movq	0xb0(%rsp), %rsi
    0000227b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002282: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8834
    00002287: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000228e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00002295: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000229c: 	jne	.Ltmp5152 # Offset: 8860
.Ltmp5132:
    000022a2: 	movq	-0x8(%rdx), %rax
    000022a6: 	addq	$0x200, %rax
    000022ac: 	jmp	.Ltmp5152 # Offset: 8876
.Ltmp5033:
    000022b1: 	movq	-0x8(%rdx), %rax
    000022b5: 	addq	$0x200, %rax
    000022bb: 	jmp	.Ltmp5153 # Offset: 8891
.Ltmp5027:
    000022c0: 	movq	-0x8(%rdx), %rax
    000022c4: 	addq	$0x200, %rax
    000022ca: 	jmp	.Ltmp5154 # Offset: 8906
.Ltmp5077:
    000022cf: 	movq	-0x8(%rdx), %rax
    000022d3: 	addq	$0x200, %rax
    000022d9: 	jmp	.Ltmp5155 # Offset: 8921
.Ltmp5072:
    000022de: 	movq	0xb0(%rsp), %rsi
    000022e6: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000022ed: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8941
    000022f2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000022f9: 	jmp	.Ltmp5156 # Offset: 8953
.Ltmp5105:
    000022fe: 	movq	0xb0(%rsp), %rsi
    00002306: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000230d: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8973
    00002312: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002319: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00002320: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002327: 	jne	.Ltmp5157 # Offset: 8999
.Ltmp5110:
    0000232d: 	movq	-0x8(%rdx), %rax
    00002331: 	addq	$0x200, %rax
    00002337: 	jmp	.Ltmp5157 # Offset: 9015
.Ltmp5094:
    0000233c: 	movq	0xb0(%rsp), %rsi
    00002344: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000234b: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 9035
    00002350: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002357: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000235e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002365: 	jne	.Ltmp5158 # Offset: 9061
.Ltmp5099:
    0000236b: 	movq	-0x8(%rdx), %rax
    0000236f: 	addq	$0x200, %rax
    00002375: 	jmp	.Ltmp5158 # Offset: 9077
.Ltmp5022:
    0000237a: 	movq	0xb0(%rsp), %rsi
    00002382: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002389: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 9097
    0000238e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002395: 	jmp	.Ltmp5159 # Offset: 9109
.Ltmp5121:
    0000239a: 	movq	-0x8(%rdx), %rax
    0000239e: 	addq	$0x200, %rax
    000023a4: 	jmp	.Ltmp5160 # Offset: 9124
.Ltmp5116:
    000023a9: 	movq	0xb0(%rsp), %rsi
    000023b1: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000023b8: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 9144
    000023bd: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000023c4: 	jmp	.Ltmp5161 # Offset: 9156
.Ltmp5120:
    000023c9: 	testq	%r12, %r12
    000023cc: 	je	.Ltmp5162 # Offset: 9164
.Ltmp5178:
    000023d2: 	movq	%r12, %rdx
    000023d5: 	movq	%r13, %rsi
    000023d8: 	callq	memcpy@PLT # Offset: 9176
    000023dd: 	movq	0x118(%rsp), %r12
    000023e5: 	movq	(%rbp), %rdi
    000023e9: 	jmp	.Ltmp5162 # Offset: 9193
.Ltmp5109:
    000023ee: 	testq	%r12, %r12
    000023f1: 	je	.Ltmp5163 # Offset: 9201
    000023f7: 	jmp	.Ltmp5164 # Offset: 9207
    000023fc: 	nopl	(%rax) # Size: 4
.Ltmp5043:
    00002400: 	testq	%r12, %r12
    00002403: 	je	.Ltmp5165 # Offset: 9219
    00002409: 	jmp	.Ltmp5166 # Offset: 9225
    0000240e: 	nop # Size: 2
.Ltmp5098:
    00002410: 	testq	%r12, %r12
    00002413: 	je	.Ltmp5167 # Offset: 9235
    00002419: 	jmp	.Ltmp5168 # Offset: 9241
    0000241e: 	nop # Size: 2
.Ltmp5054:
    00002420: 	testq	%r12, %r12
    00002423: 	je	.Ltmp5169 # Offset: 9251
    00002429: 	jmp	.Ltmp5170 # Offset: 9257
    0000242e: 	nop # Size: 2
.Ltmp5065:
    00002430: 	testq	%r12, %r12
    00002433: 	je	.Ltmp5171 # Offset: 9267
    00002439: 	jmp	.Ltmp5172 # Offset: 9273
    0000243e: 	nop # Size: 2
.Ltmp5131:
    00002440: 	testq	%r12, %r12
    00002443: 	je	.Ltmp5173 # Offset: 9283
.Ltmp5180:
    00002449: 	movq	%r12, %rdx
    0000244c: 	movq	%rbp, %rsi
    0000244f: 	callq	memcpy@PLT # Offset: 9295
    00002454: 	movq	0x118(%rsp), %r12
    0000245c: 	movq	(%rbx), %rdi
    0000245f: 	jmp	.Ltmp5173 # Offset: 9311
.Ltmp5026:
    00002464: 	testq	%r12, %r12
    00002467: 	je	.Ltmp5136 # Offset: 9319
    0000246d: 	jmp	.Ltmp5174 # Offset: 9325
    00002472: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5087:
    00002478: 	testq	%r12, %r12
    0000247b: 	je	.Ltmp5175 # Offset: 9339
    00002481: 	jmp	.Ltmp5176 # Offset: 9345
    00002486: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp5076:
    00002490: 	testq	%r12, %r12
    00002493: 	je	.Ltmp5177 # Offset: 9363
.Ltmp5179:
    00002499: 	movq	%r12, %rdx
    0000249c: 	movq	%r13, %rsi
    0000249f: 	callq	memcpy@PLT # Offset: 9375
    000024a4: 	movq	0x118(%rsp), %r12
    000024ac: 	movq	(%rbp), %rdi
    000024b0: 	jmp	.Ltmp5177 # Offset: 9392
.Ltmp5108:
    000024b5: 	leaq	0x118(%rsp), %rsi
    000024bd: 	xorl	%edx, %edx
    000024bf: 	movq	%rbp, %rdi
    000024c2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9410
    000024c7: 	movq	%rax, (%rbp)
    000024cb: 	movq	%rax, %rdi
    000024ce: 	movq	0x118(%rsp), %rax
    000024d6: 	movq	%rax, 0x10(%rbp)
.Ltmp5164:
    000024da: 	movq	%r12, %rdx
    000024dd: 	movq	%r13, %rsi
    000024e0: 	callq	memcpy@PLT # Offset: 9440
    000024e5: 	movq	0x118(%rsp), %r12
    000024ed: 	movq	(%rbp), %rdi
    000024f1: 	jmp	.Ltmp5163 # Offset: 9457
.Ltmp5119:
    000024f6: 	leaq	0x118(%rsp), %rsi
    000024fe: 	xorl	%edx, %edx
    00002500: 	movq	%rbp, %rdi
    00002503: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9475
    00002508: 	movq	%rax, (%rbp)
    0000250c: 	movq	%rax, %rdi
    0000250f: 	movq	0x118(%rsp), %rax
    00002517: 	movq	%rax, 0x10(%rbp)
    0000251b: 	jmp	.Ltmp5178 # Offset: 9499
.Ltmp5086:
    00002520: 	leaq	0x118(%rsp), %rsi
    00002528: 	xorl	%edx, %edx
    0000252a: 	movq	%rbp, %rdi
    0000252d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9517
    00002532: 	movq	%rax, (%rbp)
    00002536: 	movq	%rax, %rdi
    00002539: 	movq	0x118(%rsp), %rax
    00002541: 	movq	%rax, 0x10(%rbp)
.Ltmp5176:
    00002545: 	movq	%r12, %rdx
    00002548: 	movq	%r13, %rsi
    0000254b: 	callq	memcpy@PLT # Offset: 9547
    00002550: 	movq	0x118(%rsp), %r12
    00002558: 	movq	(%rbp), %rdi
    0000255c: 	jmp	.Ltmp5175 # Offset: 9564
.Ltmp5042:
    00002561: 	leaq	0x118(%rsp), %rsi
    00002569: 	xorl	%edx, %edx
    0000256b: 	movq	%rbp, %rdi
    0000256e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9582
    00002573: 	movq	%rax, (%rbp)
    00002577: 	movq	%rax, %rdi
    0000257a: 	movq	0x118(%rsp), %rax
    00002582: 	movq	%rax, 0x10(%rbp)
.Ltmp5166:
    00002586: 	movq	%r12, %rdx
    00002589: 	movq	%r13, %rsi
    0000258c: 	callq	memcpy@PLT # Offset: 9612
    00002591: 	movq	0x118(%rsp), %r12
    00002599: 	movq	(%rbp), %rdi
    0000259d: 	jmp	.Ltmp5165 # Offset: 9629
.Ltmp5075:
    000025a2: 	leaq	0x118(%rsp), %rsi
    000025aa: 	xorl	%edx, %edx
    000025ac: 	movq	%rbp, %rdi
    000025af: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9647
    000025b4: 	movq	%rax, (%rbp)
    000025b8: 	movq	%rax, %rdi
    000025bb: 	movq	0x118(%rsp), %rax
    000025c3: 	movq	%rax, 0x10(%rbp)
    000025c7: 	jmp	.Ltmp5179 # Offset: 9671
.Ltmp5097:
    000025cc: 	leaq	0x118(%rsp), %rsi
    000025d4: 	xorl	%edx, %edx
    000025d6: 	movq	%rbp, %rdi
    000025d9: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9689
    000025de: 	movq	%rax, (%rbp)
    000025e2: 	movq	%rax, %rdi
    000025e5: 	movq	0x118(%rsp), %rax
    000025ed: 	movq	%rax, 0x10(%rbp)
.Ltmp5168:
    000025f1: 	movq	%r12, %rdx
    000025f4: 	movq	%r13, %rsi
    000025f7: 	callq	memcpy@PLT # Offset: 9719
    000025fc: 	movq	0x118(%rsp), %r12
    00002604: 	movq	(%rbp), %rdi
    00002608: 	jmp	.Ltmp5167 # Offset: 9736
.Ltmp5053:
    0000260d: 	leaq	0x118(%rsp), %rsi
    00002615: 	xorl	%edx, %edx
    00002617: 	movq	%rbp, %rdi
    0000261a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9754
    0000261f: 	movq	%rax, (%rbp)
    00002623: 	movq	%rax, %rdi
    00002626: 	movq	0x118(%rsp), %rax
    0000262e: 	movq	%rax, 0x10(%rbp)
.Ltmp5170:
    00002632: 	movq	%r12, %rdx
    00002635: 	movq	%r13, %rsi
    00002638: 	callq	memcpy@PLT # Offset: 9784
    0000263d: 	movq	0x118(%rsp), %r12
    00002645: 	movq	(%rbp), %rdi
    00002649: 	jmp	.Ltmp5169 # Offset: 9801
.Ltmp5064:
    0000264e: 	leaq	0x118(%rsp), %rsi
    00002656: 	xorl	%edx, %edx
    00002658: 	movq	%rbp, %rdi
    0000265b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9819
    00002660: 	movq	%rax, (%rbp)
    00002664: 	movq	%rax, %rdi
    00002667: 	movq	0x118(%rsp), %rax
    0000266f: 	movq	%rax, 0x10(%rbp)
.Ltmp5172:
    00002673: 	movq	%r12, %rdx
    00002676: 	movq	%r13, %rsi
    00002679: 	callq	memcpy@PLT # Offset: 9849
    0000267e: 	movq	0x118(%rsp), %r12
    00002686: 	movq	(%rbp), %rdi
    0000268a: 	jmp	.Ltmp5171 # Offset: 9866
.Ltmp5130:
    0000268f: 	leaq	0x118(%rsp), %rsi
    00002697: 	xorl	%edx, %edx
    00002699: 	movq	%rbx, %rdi
    0000269c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9884
    000026a1: 	movq	%rax, (%rbx)
    000026a4: 	movq	%rax, %rdi
    000026a7: 	movq	0x118(%rsp), %rax
    000026af: 	movq	%rax, 0x10(%rbx)
    000026b3: 	jmp	.Ltmp5180 # Offset: 9907
.Ltmp5041:
    000026b8: 	leaq	DATAat0x4d018(%rip), %rdi
    000026bf: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9919
.Ltmp5052:
    000026c4: 	leaq	DATAat0x4d018(%rip), %rdi
    000026cb: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9931
.Ltmp5063:
    000026d0: 	leaq	DATAat0x4d018(%rip), %rdi
    000026d7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9943
.Ltmp5074:
    000026dc: 	leaq	DATAat0x4d018(%rip), %rdi
    000026e3: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9955
.Ltmp5085:
    000026e8: 	leaq	DATAat0x4d018(%rip), %rdi
    000026ef: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9967
.Ltmp5096:
    000026f4: 	leaq	DATAat0x4d018(%rip), %rdi
    000026fb: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9979
.Ltmp5107:
    00002700: 	leaq	DATAat0x4d018(%rip), %rdi
    00002707: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9991
.Ltmp5118:
    0000270c: 	leaq	DATAat0x4d018(%rip), %rdi
    00002713: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10003
.Ltmp5129:
    00002718: 	leaq	DATAat0x4d018(%rip), %rdi
    0000271f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10015
.Ltmp5134:
    00002724: 	callq	__stack_chk_fail@PLT # Offset: 10020
.Ltmp5024:
    00002729: 	leaq	DATAat0x4d018(%rip), %rdi
    00002730: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10032
    00002735: 	endbr64
.Ltmp5182:
    00002739: 	movq	%rax, %rbp
    0000273c: 	jmp	.Ltmp5181 # Offset: 10044
    0000273e: 	endbr64
    00002742: 	jmp	.Ltmp5182 # Offset: 10050
    00002744: 	endbr64
    00002748: 	jmp	.Ltmp5182 # Offset: 10056
    0000274a: 	endbr64
    0000274e: 	jmp	.Ltmp5182 # Offset: 10062
    00002750: 	endbr64
    00002754: 	jmp	.Ltmp5182 # Offset: 10068
    00002756: 	endbr64
    0000275a: 	movq	%rax, %rbp
    0000275d: 	jmp	.Ltmp5183 # Offset: 10077
    0000275f: 	endbr64
    00002763: 	jmp	.Ltmp5182 # Offset: 10083
    00002765: 	endbr64
    00002769: 	jmp	.Ltmp5182 # Offset: 10089
.Ltmp5183:
    0000276b: 	movq	0x120(%rsp), %rdi
    00002773: 	leaq	0x130(%rsp), %rax
    0000277b: 	cmpq	%rax, %rdi
    0000277e: 	je	.Ltmp5184 # Offset: 10110
.Ltmp5185:
    00002780: 	movq	0x130(%rsp), %rax
    00002788: 	leaq	0x1(%rax), %rsi
    0000278c: 	callq	_ZdlPvm@PLT # Offset: 10124
.Ltmp5184:
    00002791: 	movq	%rbp, %rdi
    00002794: 	callq	_Unwind_Resume@PLT # Offset: 10132
    00002799: 	endbr64
    0000279d: 	jmp	.Ltmp5182 # Offset: 10141
    0000279f: 	endbr64
    000027a3: 	jmp	.Ltmp5182 # Offset: 10147
    000027a5: 	endbr64
    000027a9: 	jmp	.Ltmp5182 # Offset: 10153
.Ltmp5181:
    000027ab: 	movq	0x120(%rsp), %rdi
    000027b3: 	cmpq	0xc8(%rsp), %rdi
    000027bb: 	jne	.Ltmp5185 # Offset: 10171
    000027bd: 	jmp	.Ltmp5184 # Offset: 10173
DWARF CFI Instructions:
    <empty>
End of Function "_Z16TestUnrolledTypeIhLi4EEvPT_S0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z11TestOneTypeIhEvd" after disassembly {
  Number      : 190
  State       : disassembled
  Address     : 0x47b50
  Size        : 0x4bf9
  MaxSize     : 0x4bf9
  Offset      : 0x47b50
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIhEvd
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0189:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x1000, %rsp
    00000015: 	orq	$0x0, (%rsp)
    0000001a: 	subq	$0x1000, %rsp
    00000021: 	orq	$0x0, (%rsp)
    00000026: 	subq	$0x178, %rsp
    0000002d: 	movl	$0x3e8, %ecx
    00000032: 	movabsq	$0x101010101010101, %rdx
    0000003c: 	movdqa	_Z7gLabelsB5cxx11+16(%rip), %xmm2
    00000044: 	movdqa	_Z7gLabelsB5cxx11+32(%rip), %xmm3
    0000004c: 	movsd	%xmm0, (%rsp)
    00000051: 	leaq	0x220(%rsp), %rbp
    00000059: 	leaq	0x160(%rsp), %r14
    00000061: 	movq	%fs:0x28, %rax
    0000006a: 	movq	%rax, 0x2168(%rsp)
    00000072: 	xorl	%eax, %eax
    00000074: 	movq	%rbp, %rdi
    00000077: 	cvttsd2si	init_value(%rip), %eax
    0000007f: 	leaq	0x140(%rsp), %rsi
    00000087: 	movq	%r14, 0x8(%rsp)
    0000008c: 	leaq	0x200(%rsp), %r15
    00000094: 	movl	$0x746e6975, 0x170(%rsp)
    0000009f: 	movb	$0x74, 0x176(%rsp)
    000000a7: 	movzbl	%al, %eax
    000000aa: 	movb	$0x0, 0x177(%rsp)
    000000b2: 	imulq	%rdx, %rax
    000000b6: 	movaps	%xmm2, 0x140(%rsp)
    000000be: 	movq	$0x7, 0x168(%rsp)
    000000ca: 	movaps	%xmm3, 0x150(%rsp)
    000000d2: 	rep		stosq	%rax, %es:(%rdi)
    000000d5: 	leaq	0x170(%rsp), %rax
    000000dd: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000000e4: 	movq	%rax, 0x28(%rsp)
    000000e9: 	movq	%rax, 0x160(%rsp)
    000000f1: 	movl	$0x5f38, %eax
    000000f6: 	movw	%ax, 0x174(%rsp)
    000000fe: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E # Offset: 254
    00000103: 	movsd	(%rsp), %xmm0
    00000108: 	movq	%r14, %rsi
    0000010b: 	movq	%r15, %rdi
    0000010e: 	addsd	DATAat0x4d638(%rip), %xmm0
    00000116: 	leaq	DATAat0x4d1e0(%rip), %rdx
    0000011d: 	cvttsd2si	%xmm0, %ebx
    00000121: 	movb	%bl, 0x23(%rsp)
    00000125: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 293
    0000012a: 	movzbl	%bl, %eax
    0000012d: 	xorl	%r12d, %r12d
    00000130: 	leaq	0x2150(%rsp), %rbx
    00000138: 	movl	%eax, 0x1c(%rsp)
    0000013c: 	leaq	DATAat0x4d004(%rip), %r13
    00000143: 	callq	clock@PLT # Offset: 323
    00000148: 	movl	iterations(%rip), %ecx
    0000014e: 	movq	%rax, start_time(%rip)
    00000155: 	testl	%ecx, %ecx
    00000157: 	jle	.Ltmp5186 # Offset: 343
    0000015d: 	nopl	(%rax) # Size: 3
.Ltmp5189:
    00000160: 	movzbl	0x220(%rsp), %edx
    00000168: 	movq	%rbp, %rax
    0000016b: 	pxor	%xmm0, %xmm0
    0000016f: 	movzbl	0x221(%rsp), %r8d
    00000178: 	nopl	(%rax,%rax) # Size: 8
.Ltmp5187:
    00000180: 	paddb	(%rax), %xmm0
    00000184: 	movdqu	0x1(%rax), %xmm2
    00000189: 	addq	$0x10, %rax
    0000018d: 	psubb	%xmm2, %xmm0
    00000191: 	cmpq	%rbx, %rax
    00000194: 	jne	.Ltmp5187 # Offset: 404
    00000196: 	movdqa	%xmm0, %xmm1
    0000019a: 	addb	0x2158(%rsp), %dl
    000001a1: 	psrldq	$0x8, %xmm1
    000001a6: 	subl	%r8d, %edx
    000001a9: 	subb	0x215f(%rsp), %dl
    000001b0: 	paddb	%xmm1, %xmm0
    000001b4: 	pxor	%xmm1, %xmm1
    000001b8: 	psadbw	%xmm1, %xmm0
    000001bc: 	movq	0x2151(%rsp), %xmm1
    000001c5: 	movd	%xmm0, %eax
    000001c9: 	movq	0x2150(%rsp), %xmm0
    000001d2: 	addl	%edx, %eax
    000001d4: 	psubb	%xmm1, %xmm0
    000001d8: 	pxor	%xmm1, %xmm1
    000001dc: 	movdqa	%xmm0, %xmm6
    000001e0: 	psadbw	%xmm1, %xmm6
    000001e4: 	movq	%xmm6, 0x138(%rsp)
    000001ed: 	movq	%xmm6, %rsi
    000001f2: 	addb	%sil, %al
    000001f5: 	jne	.Ltmp5188 # Offset: 501
.Ltmp5449:
    000001fb: 	addl	$0x1, %r12d
    000001ff: 	cmpl	%ecx, %r12d
    00000202: 	jl	.Ltmp5189 # Offset: 514
.Ltmp5186:
    00000208: 	movq	%r15, %rsi
    0000020b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000212: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 530
    00000217: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000021e: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000225: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000022c: 	je	.Ltmp5190 # Offset: 556
.Ltmp5450:
    00000232: 	movq	-0x20(%rax), %r12
    00000236: 	callq	clock@PLT # Offset: 566
    0000023b: 	pxor	%xmm0, %xmm0
    0000023f: 	movq	%rax, end_time(%rip)
    00000246: 	movq	%r12, %rdi
    00000249: 	subq	start_time(%rip), %rax
    00000250: 	cvtsi2sd	%rax, %xmm0
    00000255: 	divsd	DATAat0x4d640(%rip), %xmm0
    0000025d: 	callq	_Z13record_resultdPKc # Offset: 605
    00000262: 	movq	0x200(%rsp), %rdi
    0000026a: 	leaq	0x210(%rsp), %rax
    00000272: 	movq	%rax, (%rsp)
    00000276: 	cmpq	%rax, %rdi
    00000279: 	je	.Ltmp5191 # Offset: 633
    0000027b: 	movq	0x210(%rsp), %rax
    00000283: 	leaq	0x1(%rax), %rsi
    00000287: 	callq	_ZdlPvm@PLT # Offset: 647
.Ltmp5191:
    0000028c: 	movq	0x8(%rsp), %rsi
    00000291: 	leaq	DATAat0x4d1ed(%rip), %rdx
    00000298: 	movq	%r15, %rdi
    0000029b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 667
    000002a0: 	callq	clock@PLT # Offset: 672
    000002a5: 	movl	iterations(%rip), %ecx
    000002ab: 	xorl	%r12d, %r12d
    000002ae: 	leaq	0x2150(%rsp), %rbx
    000002b6: 	movq	%rax, start_time(%rip)
    000002bd: 	leaq	DATAat0x4d004(%rip), %r13
    000002c4: 	testl	%ecx, %ecx
    000002c6: 	jle	.Ltmp5192 # Offset: 710
    000002cc: 	nopl	(%rax) # Size: 4
.Ltmp5195:
    000002d0: 	movzbl	0x221(%rsp), %r8d
    000002d9: 	movzbl	0x220(%rsp), %edx
    000002e1: 	movq	%rbp, %rax
    000002e4: 	pxor	%xmm0, %xmm0
    000002e8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp5193:
    000002f0: 	paddb	(%rax), %xmm0
    000002f4: 	movdqu	0x1(%rax), %xmm3
    000002f9: 	addq	$0x10, %rax
    000002fd: 	psubb	%xmm3, %xmm0
    00000301: 	cmpq	%rax, %rbx
    00000304: 	jne	.Ltmp5193 # Offset: 772
    00000306: 	movdqa	%xmm0, %xmm1
    0000030a: 	addb	0x2158(%rsp), %dl
    00000311: 	psrldq	$0x8, %xmm1
    00000316: 	subl	%r8d, %edx
    00000319: 	subb	0x215f(%rsp), %dl
    00000320: 	paddb	%xmm1, %xmm0
    00000324: 	pxor	%xmm1, %xmm1
    00000328: 	psadbw	%xmm1, %xmm0
    0000032c: 	movq	0x2151(%rsp), %xmm1
    00000335: 	movd	%xmm0, %eax
    00000339: 	movq	0x2150(%rsp), %xmm0
    00000342: 	addl	%edx, %eax
    00000344: 	psubb	%xmm1, %xmm0
    00000348: 	pxor	%xmm1, %xmm1
    0000034c: 	movdqa	%xmm0, %xmm7
    00000350: 	psadbw	%xmm1, %xmm7
    00000354: 	movq	%xmm7, 0x130(%rsp)
    0000035d: 	movq	%xmm7, %rsi
    00000362: 	addb	%sil, %al
    00000365: 	jne	.Ltmp5194 # Offset: 869
.Ltmp5448:
    0000036b: 	addl	$0x1, %r12d
    0000036f: 	cmpl	%ecx, %r12d
    00000372: 	jl	.Ltmp5195 # Offset: 882
.Ltmp5192:
    00000378: 	movq	%r15, %rsi
    0000037b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000382: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 898
    00000387: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000038e: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000395: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000039c: 	je	.Ltmp5196 # Offset: 924
.Ltmp5483:
    000003a2: 	movq	-0x20(%rax), %r12
    000003a6: 	callq	clock@PLT # Offset: 934
    000003ab: 	pxor	%xmm0, %xmm0
    000003af: 	movq	%rax, end_time(%rip)
    000003b6: 	movq	%r12, %rdi
    000003b9: 	subq	start_time(%rip), %rax
    000003c0: 	cvtsi2sd	%rax, %xmm0
    000003c5: 	divsd	DATAat0x4d640(%rip), %xmm0
    000003cd: 	callq	_Z13record_resultdPKc # Offset: 973
    000003d2: 	movq	0x200(%rsp), %rdi
    000003da: 	cmpq	(%rsp), %rdi
    000003de: 	je	.Ltmp5197 # Offset: 990
    000003e0: 	movq	0x210(%rsp), %rax
    000003e8: 	leaq	0x1(%rax), %rsi
    000003ec: 	callq	_ZdlPvm@PLT # Offset: 1004
.Ltmp5197:
    000003f1: 	movq	0x8(%rsp), %rsi
    000003f6: 	leaq	DATAat0x4d1ff(%rip), %rdx
    000003fd: 	movq	%r15, %rdi
    00000400: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1024
    00000405: 	callq	clock@PLT # Offset: 1029
    0000040a: 	movl	iterations(%rip), %ecx
    00000410: 	xorl	%r12d, %r12d
    00000413: 	leaq	0x2150(%rsp), %rbx
    0000041b: 	movq	%rax, start_time(%rip)
    00000422: 	leaq	DATAat0x4d004(%rip), %r13
    00000429: 	testl	%ecx, %ecx
    0000042b: 	jle	.Ltmp5198 # Offset: 1067
    00000431: 	nopl	(%rax) # Size: 7
.Ltmp5201:
    00000438: 	movzbl	0x220(%rsp), %edx
    00000440: 	movq	%rbp, %rax
    00000443: 	pxor	%xmm0, %xmm0
    00000447: 	movzbl	0x221(%rsp), %r8d
.Ltmp5199:
    00000450: 	paddb	(%rax), %xmm0
    00000454: 	movdqu	0x1(%rax), %xmm4
    00000459: 	addq	$0x10, %rax
    0000045d: 	psubb	%xmm4, %xmm0
    00000461: 	cmpq	%rbx, %rax
    00000464: 	jne	.Ltmp5199 # Offset: 1124
    00000466: 	movdqa	%xmm0, %xmm1
    0000046a: 	addb	0x2158(%rsp), %dl
    00000471: 	psrldq	$0x8, %xmm1
    00000476: 	subl	%r8d, %edx
    00000479: 	subb	0x215f(%rsp), %dl
    00000480: 	paddb	%xmm1, %xmm0
    00000484: 	pxor	%xmm1, %xmm1
    00000488: 	psadbw	%xmm1, %xmm0
    0000048c: 	movq	0x2151(%rsp), %xmm1
    00000495: 	movd	%xmm0, %eax
    00000499: 	movq	0x2150(%rsp), %xmm0
    000004a2: 	addl	%edx, %eax
    000004a4: 	psubb	%xmm1, %xmm0
    000004a8: 	pxor	%xmm1, %xmm1
    000004ac: 	movdqa	%xmm0, %xmm6
    000004b0: 	psadbw	%xmm1, %xmm6
    000004b4: 	movq	%xmm6, 0x128(%rsp)
    000004bd: 	movq	%xmm6, %rsi
    000004c2: 	addb	%sil, %al
    000004c5: 	jne	.Ltmp5200 # Offset: 1221
.Ltmp5447:
    000004cb: 	addl	$0x1, %r12d
    000004cf: 	cmpl	%ecx, %r12d
    000004d2: 	jl	.Ltmp5201 # Offset: 1234
.Ltmp5198:
    000004d8: 	movq	%r15, %rsi
    000004db: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000004e2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 1250
    000004e7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000004ee: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000004f5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000004fc: 	je	.Ltmp5202 # Offset: 1276
.Ltmp5482:
    00000502: 	movq	-0x20(%rax), %r12
    00000506: 	callq	clock@PLT # Offset: 1286
    0000050b: 	pxor	%xmm0, %xmm0
    0000050f: 	movq	%rax, end_time(%rip)
    00000516: 	movq	%r12, %rdi
    00000519: 	subq	start_time(%rip), %rax
    00000520: 	cvtsi2sd	%rax, %xmm0
    00000525: 	divsd	DATAat0x4d640(%rip), %xmm0
    0000052d: 	callq	_Z13record_resultdPKc # Offset: 1325
    00000532: 	movq	0x200(%rsp), %rdi
    0000053a: 	cmpq	(%rsp), %rdi
    0000053e: 	je	.Ltmp5203 # Offset: 1342
    00000540: 	movq	0x210(%rsp), %rax
    00000548: 	leaq	0x1(%rax), %rsi
    0000054c: 	callq	_ZdlPvm@PLT # Offset: 1356
.Ltmp5203:
    00000551: 	movq	0x8(%rsp), %rsi
    00000556: 	leaq	DATAat0x4d20f(%rip), %rdx
    0000055d: 	movq	%r15, %rdi
    00000560: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1376
    00000565: 	callq	clock@PLT # Offset: 1381
    0000056a: 	movl	iterations(%rip), %ecx
    00000570: 	xorl	%r12d, %r12d
    00000573: 	leaq	0x2150(%rsp), %rbx
    0000057b: 	movq	%rax, start_time(%rip)
    00000582: 	leaq	DATAat0x4d004(%rip), %r13
    00000589: 	testl	%ecx, %ecx
    0000058b: 	jle	.Ltmp5204 # Offset: 1419
    00000591: 	nopl	(%rax) # Size: 7
.Ltmp5207:
    00000598: 	movzbl	0x220(%rsp), %edx
    000005a0: 	movq	%rbp, %rax
    000005a3: 	pxor	%xmm0, %xmm0
    000005a7: 	movzbl	0x221(%rsp), %r8d
.Ltmp5205:
    000005b0: 	paddb	(%rax), %xmm0
    000005b4: 	movdqu	0x1(%rax), %xmm5
    000005b9: 	addq	$0x10, %rax
    000005bd: 	psubb	%xmm5, %xmm0
    000005c1: 	cmpq	%rax, %rbx
    000005c4: 	jne	.Ltmp5205 # Offset: 1476
    000005c6: 	movdqa	%xmm0, %xmm1
    000005ca: 	addb	0x2158(%rsp), %dl
    000005d1: 	psrldq	$0x8, %xmm1
    000005d6: 	subl	%r8d, %edx
    000005d9: 	subb	0x215f(%rsp), %dl
    000005e0: 	paddb	%xmm1, %xmm0
    000005e4: 	pxor	%xmm1, %xmm1
    000005e8: 	psadbw	%xmm1, %xmm0
    000005ec: 	movq	0x2151(%rsp), %xmm1
    000005f5: 	movd	%xmm0, %eax
    000005f9: 	movq	0x2150(%rsp), %xmm0
    00000602: 	addl	%edx, %eax
    00000604: 	psubb	%xmm1, %xmm0
    00000608: 	pxor	%xmm1, %xmm1
    0000060c: 	movdqa	%xmm0, %xmm7
    00000610: 	psadbw	%xmm1, %xmm7
    00000614: 	movq	%xmm7, 0x120(%rsp)
    0000061d: 	movq	%xmm7, %rsi
    00000622: 	addb	%sil, %al
    00000625: 	jne	.Ltmp5206 # Offset: 1573
.Ltmp5446:
    0000062b: 	addl	$0x1, %r12d
    0000062f: 	cmpl	%ecx, %r12d
    00000632: 	jl	.Ltmp5207 # Offset: 1586
.Ltmp5204:
    00000638: 	movq	%r15, %rsi
    0000063b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000642: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 1602
    00000647: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000064e: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000655: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000065c: 	je	.Ltmp5208 # Offset: 1628
.Ltmp5481:
    00000662: 	movq	-0x20(%rax), %r12
    00000666: 	callq	clock@PLT # Offset: 1638
    0000066b: 	pxor	%xmm0, %xmm0
    0000066f: 	movq	%rax, end_time(%rip)
    00000676: 	movq	%r12, %rdi
    00000679: 	subq	start_time(%rip), %rax
    00000680: 	cvtsi2sd	%rax, %xmm0
    00000685: 	divsd	DATAat0x4d640(%rip), %xmm0
    0000068d: 	callq	_Z13record_resultdPKc # Offset: 1677
    00000692: 	movq	0x200(%rsp), %rdi
    0000069a: 	cmpq	(%rsp), %rdi
    0000069e: 	je	.Ltmp5209 # Offset: 1694
    000006a0: 	movq	0x210(%rsp), %rax
    000006a8: 	leaq	0x1(%rax), %rsi
    000006ac: 	callq	_ZdlPvm@PLT # Offset: 1708
.Ltmp5209:
    000006b1: 	movq	0x8(%rsp), %rsi
    000006b6: 	leaq	DATAat0x4d227(%rip), %rdx
    000006bd: 	movq	%r15, %rdi
    000006c0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1728
    000006c5: 	callq	clock@PLT # Offset: 1733
    000006ca: 	movl	iterations(%rip), %ecx
    000006d0: 	xorl	%r12d, %r12d
    000006d3: 	leaq	0x2150(%rsp), %rbx
    000006db: 	movq	%rax, start_time(%rip)
    000006e2: 	leaq	DATAat0x4d004(%rip), %r13
    000006e9: 	testl	%ecx, %ecx
    000006eb: 	jle	.Ltmp5210 # Offset: 1771
    000006f1: 	nopl	(%rax) # Size: 7
.Ltmp5213:
    000006f8: 	movzbl	0x220(%rsp), %edx
    00000700: 	movq	%rbp, %rax
    00000703: 	pxor	%xmm0, %xmm0
    00000707: 	movzbl	0x221(%rsp), %r8d
.Ltmp5211:
    00000710: 	paddb	(%rax), %xmm0
    00000714: 	movdqu	0x1(%rax), %xmm6
    00000719: 	addq	$0x10, %rax
    0000071d: 	psubb	%xmm6, %xmm0
    00000721: 	cmpq	%rbx, %rax
    00000724: 	jne	.Ltmp5211 # Offset: 1828
    00000726: 	movdqa	%xmm0, %xmm1
    0000072a: 	addb	0x2158(%rsp), %dl
    00000731: 	psrldq	$0x8, %xmm1
    00000736: 	subl	%r8d, %edx
    00000739: 	subb	0x215f(%rsp), %dl
    00000740: 	paddb	%xmm1, %xmm0
    00000744: 	pxor	%xmm1, %xmm1
    00000748: 	psadbw	%xmm1, %xmm0
    0000074c: 	movq	0x2151(%rsp), %xmm1
    00000755: 	movd	%xmm0, %eax
    00000759: 	movq	0x2150(%rsp), %xmm0
    00000762: 	addl	%edx, %eax
    00000764: 	psubb	%xmm1, %xmm0
    00000768: 	pxor	%xmm1, %xmm1
    0000076c: 	movdqa	%xmm0, %xmm2
    00000770: 	psadbw	%xmm1, %xmm2
    00000774: 	movq	%xmm2, 0x118(%rsp)
    0000077d: 	movq	%xmm2, %rsi
    00000782: 	addb	%sil, %al
    00000785: 	jne	.Ltmp5212 # Offset: 1925
.Ltmp5445:
    0000078b: 	addl	$0x1, %r12d
    0000078f: 	cmpl	%ecx, %r12d
    00000792: 	jl	.Ltmp5213 # Offset: 1938
.Ltmp5210:
    00000798: 	movq	%r15, %rsi
    0000079b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000007a2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 1954
    000007a7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000007ae: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000007b5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000007bc: 	je	.Ltmp5214 # Offset: 1980
.Ltmp5480:
    000007c2: 	movq	-0x20(%rax), %r12
    000007c6: 	callq	clock@PLT # Offset: 1990
    000007cb: 	pxor	%xmm0, %xmm0
    000007cf: 	movq	%rax, end_time(%rip)
    000007d6: 	movq	%r12, %rdi
    000007d9: 	subq	start_time(%rip), %rax
    000007e0: 	cvtsi2sd	%rax, %xmm0
    000007e5: 	divsd	DATAat0x4d640(%rip), %xmm0
    000007ed: 	callq	_Z13record_resultdPKc # Offset: 2029
    000007f2: 	movq	0x200(%rsp), %rdi
    000007fa: 	cmpq	(%rsp), %rdi
    000007fe: 	je	.Ltmp5215 # Offset: 2046
    00000800: 	movq	0x210(%rsp), %rax
    00000808: 	leaq	0x1(%rax), %rsi
    0000080c: 	callq	_ZdlPvm@PLT # Offset: 2060
.Ltmp5215:
    00000811: 	movq	0x8(%rsp), %rsi
    00000816: 	leaq	DATAat0x4d230(%rip), %rdx
    0000081d: 	movq	%r15, %rdi
    00000820: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2080
    00000825: 	callq	clock@PLT # Offset: 2085
    0000082a: 	movl	iterations(%rip), %ecx
    00000830: 	xorl	%r12d, %r12d
    00000833: 	leaq	0x2150(%rsp), %rbx
    0000083b: 	movq	%rax, start_time(%rip)
    00000842: 	leaq	DATAat0x4d004(%rip), %r13
    00000849: 	testl	%ecx, %ecx
    0000084b: 	jle	.Ltmp5216 # Offset: 2123
    00000851: 	nopl	(%rax) # Size: 7
.Ltmp5219:
    00000858: 	movzbl	0x221(%rsp), %r8d
    00000861: 	movzbl	0x220(%rsp), %edx
    00000869: 	movq	%rbp, %rax
    0000086c: 	pxor	%xmm0, %xmm0
.Ltmp5217:
    00000870: 	paddb	(%rax), %xmm0
    00000874: 	movdqu	0x1(%rax), %xmm7
    00000879: 	addq	$0x10, %rax
    0000087d: 	psubb	%xmm7, %xmm0
    00000881: 	cmpq	%rax, %rbx
    00000884: 	jne	.Ltmp5217 # Offset: 2180
    00000886: 	movdqa	%xmm0, %xmm1
    0000088a: 	addb	0x2158(%rsp), %dl
    00000891: 	psrldq	$0x8, %xmm1
    00000896: 	subl	%r8d, %edx
    00000899: 	subb	0x215f(%rsp), %dl
    000008a0: 	paddb	%xmm1, %xmm0
    000008a4: 	pxor	%xmm1, %xmm1
    000008a8: 	psadbw	%xmm1, %xmm0
    000008ac: 	movq	0x2151(%rsp), %xmm1
    000008b5: 	movd	%xmm0, %eax
    000008b9: 	movq	0x2150(%rsp), %xmm0
    000008c2: 	addl	%edx, %eax
    000008c4: 	psubb	%xmm1, %xmm0
    000008c8: 	pxor	%xmm1, %xmm1
    000008cc: 	movdqa	%xmm0, %xmm3
    000008d0: 	psadbw	%xmm1, %xmm3
    000008d4: 	movq	%xmm3, 0x110(%rsp)
    000008dd: 	movq	%xmm3, %rsi
    000008e2: 	addb	%sil, %al
    000008e5: 	jne	.Ltmp5218 # Offset: 2277
.Ltmp5444:
    000008eb: 	addl	$0x1, %r12d
    000008ef: 	cmpl	%ecx, %r12d
    000008f2: 	jl	.Ltmp5219 # Offset: 2290
.Ltmp5216:
    000008f8: 	movq	%r15, %rsi
    000008fb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000902: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 2306
    00000907: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000090e: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000915: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000091c: 	je	.Ltmp5220 # Offset: 2332
.Ltmp5479:
    00000922: 	movq	-0x20(%rax), %r12
    00000926: 	callq	clock@PLT # Offset: 2342
    0000092b: 	pxor	%xmm0, %xmm0
    0000092f: 	movq	%rax, end_time(%rip)
    00000936: 	movq	%r12, %rdi
    00000939: 	subq	start_time(%rip), %rax
    00000940: 	cvtsi2sd	%rax, %xmm0
    00000945: 	divsd	DATAat0x4d640(%rip), %xmm0
    0000094d: 	callq	_Z13record_resultdPKc # Offset: 2381
    00000952: 	movq	0x200(%rsp), %rdi
    0000095a: 	cmpq	(%rsp), %rdi
    0000095e: 	je	.Ltmp5221 # Offset: 2398
    00000960: 	movq	0x210(%rsp), %rax
    00000968: 	leaq	0x1(%rax), %rsi
    0000096c: 	callq	_ZdlPvm@PLT # Offset: 2412
.Ltmp5221:
    00000971: 	movq	0x8(%rsp), %rsi
    00000976: 	leaq	DATAat0x4d247(%rip), %rdx
    0000097d: 	movq	%r15, %rdi
    00000980: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2432
    00000985: 	callq	clock@PLT # Offset: 2437
    0000098a: 	movl	iterations(%rip), %ecx
    00000990: 	xorl	%r12d, %r12d
    00000993: 	leaq	0x2150(%rsp), %rbx
    0000099b: 	movq	%rax, start_time(%rip)
    000009a2: 	leaq	DATAat0x4d004(%rip), %r13
    000009a9: 	testl	%ecx, %ecx
    000009ab: 	jle	.Ltmp5222 # Offset: 2475
    000009b1: 	nopl	(%rax) # Size: 7
.Ltmp5225:
    000009b8: 	movzbl	0x220(%rsp), %edx
    000009c0: 	movq	%rbp, %rax
    000009c3: 	pxor	%xmm0, %xmm0
    000009c7: 	movzbl	0x221(%rsp), %r8d
.Ltmp5223:
    000009d0: 	paddb	(%rax), %xmm0
    000009d4: 	movdqu	0x1(%rax), %xmm2
    000009d9: 	addq	$0x10, %rax
    000009dd: 	psubb	%xmm2, %xmm0
    000009e1: 	cmpq	%rbx, %rax
    000009e4: 	jne	.Ltmp5223 # Offset: 2532
    000009e6: 	movdqa	%xmm0, %xmm1
    000009ea: 	addb	0x2158(%rsp), %dl
    000009f1: 	psrldq	$0x8, %xmm1
    000009f6: 	subl	%r8d, %edx
    000009f9: 	subb	0x215f(%rsp), %dl
    00000a00: 	paddb	%xmm1, %xmm0
    00000a04: 	pxor	%xmm1, %xmm1
    00000a08: 	psadbw	%xmm1, %xmm0
    00000a0c: 	movq	0x2151(%rsp), %xmm1
    00000a15: 	movd	%xmm0, %eax
    00000a19: 	movq	0x2150(%rsp), %xmm0
    00000a22: 	addl	%edx, %eax
    00000a24: 	psubb	%xmm1, %xmm0
    00000a28: 	pxor	%xmm1, %xmm1
    00000a2c: 	movdqa	%xmm0, %xmm4
    00000a30: 	psadbw	%xmm1, %xmm4
    00000a34: 	movq	%xmm4, 0x108(%rsp)
    00000a3d: 	movq	%xmm4, %rsi
    00000a42: 	addb	%sil, %al
    00000a45: 	jne	.Ltmp5224 # Offset: 2629
.Ltmp5443:
    00000a4b: 	addl	$0x1, %r12d
    00000a4f: 	cmpl	%ecx, %r12d
    00000a52: 	jl	.Ltmp5225 # Offset: 2642
.Ltmp5222:
    00000a58: 	movq	%r15, %rsi
    00000a5b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000a62: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 2658
    00000a67: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000a6e: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000a75: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000a7c: 	je	.Ltmp5226 # Offset: 2684
.Ltmp5478:
    00000a82: 	movq	-0x20(%rax), %r12
    00000a86: 	callq	clock@PLT # Offset: 2694
    00000a8b: 	pxor	%xmm0, %xmm0
    00000a8f: 	movq	%rax, end_time(%rip)
    00000a96: 	movq	%r12, %rdi
    00000a99: 	subq	start_time(%rip), %rax
    00000aa0: 	cvtsi2sd	%rax, %xmm0
    00000aa5: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000aad: 	callq	_Z13record_resultdPKc # Offset: 2733
    00000ab2: 	movq	0x200(%rsp), %rdi
    00000aba: 	cmpq	(%rsp), %rdi
    00000abe: 	je	.Ltmp5227 # Offset: 2750
    00000ac0: 	movq	0x210(%rsp), %rax
    00000ac8: 	leaq	0x1(%rax), %rsi
    00000acc: 	callq	_ZdlPvm@PLT # Offset: 2764
.Ltmp5227:
    00000ad1: 	movq	0x8(%rsp), %rsi
    00000ad6: 	leaq	DATAat0x4d255(%rip), %rdx
    00000add: 	movq	%r15, %rdi
    00000ae0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2784
    00000ae5: 	callq	clock@PLT # Offset: 2789
    00000aea: 	movl	iterations(%rip), %ecx
    00000af0: 	xorl	%r12d, %r12d
    00000af3: 	leaq	0x2150(%rsp), %rbx
    00000afb: 	movq	%rax, start_time(%rip)
    00000b02: 	leaq	DATAat0x4d004(%rip), %r13
    00000b09: 	testl	%ecx, %ecx
    00000b0b: 	jle	.Ltmp5228 # Offset: 2827
    00000b11: 	nopl	(%rax) # Size: 7
.Ltmp5231:
    00000b18: 	movzbl	0x221(%rsp), %r8d
    00000b21: 	movzbl	0x220(%rsp), %edx
    00000b29: 	movq	%rbp, %rax
    00000b2c: 	pxor	%xmm0, %xmm0
.Ltmp5229:
    00000b30: 	paddb	(%rax), %xmm0
    00000b34: 	movdqu	0x1(%rax), %xmm3
    00000b39: 	addq	$0x10, %rax
    00000b3d: 	psubb	%xmm3, %xmm0
    00000b41: 	cmpq	%rbx, %rax
    00000b44: 	jne	.Ltmp5229 # Offset: 2884
    00000b46: 	movdqa	%xmm0, %xmm1
    00000b4a: 	addb	0x2158(%rsp), %dl
    00000b51: 	psrldq	$0x8, %xmm1
    00000b56: 	subl	%r8d, %edx
    00000b59: 	subb	0x215f(%rsp), %dl
    00000b60: 	paddb	%xmm1, %xmm0
    00000b64: 	pxor	%xmm1, %xmm1
    00000b68: 	psadbw	%xmm1, %xmm0
    00000b6c: 	movq	0x2151(%rsp), %xmm1
    00000b75: 	movd	%xmm0, %eax
    00000b79: 	movq	0x2150(%rsp), %xmm0
    00000b82: 	addl	%edx, %eax
    00000b84: 	psubb	%xmm1, %xmm0
    00000b88: 	pxor	%xmm1, %xmm1
    00000b8c: 	movdqa	%xmm0, %xmm5
    00000b90: 	psadbw	%xmm1, %xmm5
    00000b94: 	movq	%xmm5, 0x100(%rsp)
    00000b9d: 	movq	%xmm5, %rsi
    00000ba2: 	addb	%sil, %al
    00000ba5: 	jne	.Ltmp5230 # Offset: 2981
.Ltmp5442:
    00000bab: 	addl	$0x1, %r12d
    00000baf: 	cmpl	%ecx, %r12d
    00000bb2: 	jl	.Ltmp5231 # Offset: 2994
.Ltmp5228:
    00000bb8: 	movq	%r15, %rsi
    00000bbb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000bc2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 3010
    00000bc7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000bce: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000bd5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000bdc: 	je	.Ltmp5232 # Offset: 3036
.Ltmp5477:
    00000be2: 	movq	-0x20(%rax), %r12
    00000be6: 	callq	clock@PLT # Offset: 3046
    00000beb: 	pxor	%xmm0, %xmm0
    00000bef: 	movq	%rax, end_time(%rip)
    00000bf6: 	movq	%r12, %rdi
    00000bf9: 	subq	start_time(%rip), %rax
    00000c00: 	cvtsi2sd	%rax, %xmm0
    00000c05: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000c0d: 	callq	_Z13record_resultdPKc # Offset: 3085
    00000c12: 	movq	0x200(%rsp), %rdi
    00000c1a: 	cmpq	(%rsp), %rdi
    00000c1e: 	je	.Ltmp5233 # Offset: 3102
    00000c20: 	movq	0x210(%rsp), %rax
    00000c28: 	leaq	0x1(%rax), %rsi
    00000c2c: 	callq	_ZdlPvm@PLT # Offset: 3116
.Ltmp5233:
    00000c31: 	movq	0x8(%rsp), %rsi
    00000c36: 	leaq	DATAat0x4d26c(%rip), %rdx
    00000c3d: 	movq	%r15, %rdi
    00000c40: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3136
    00000c45: 	callq	clock@PLT # Offset: 3141
    00000c4a: 	movl	iterations(%rip), %ecx
    00000c50: 	xorl	%r12d, %r12d
    00000c53: 	leaq	0x2150(%rsp), %rbx
    00000c5b: 	movq	%rax, start_time(%rip)
    00000c62: 	leaq	DATAat0x4d004(%rip), %r13
    00000c69: 	testl	%ecx, %ecx
    00000c6b: 	jle	.Ltmp5234 # Offset: 3179
    00000c71: 	nopl	(%rax) # Size: 7
.Ltmp5237:
    00000c78: 	movzbl	0x220(%rsp), %edx
    00000c80: 	movq	%rbp, %rax
    00000c83: 	pxor	%xmm0, %xmm0
    00000c87: 	movzbl	0x221(%rsp), %r8d
.Ltmp5235:
    00000c90: 	paddb	(%rax), %xmm0
    00000c94: 	movdqu	0x1(%rax), %xmm4
    00000c99: 	addq	$0x10, %rax
    00000c9d: 	psubb	%xmm4, %xmm0
    00000ca1: 	cmpq	%rbx, %rax
    00000ca4: 	jne	.Ltmp5235 # Offset: 3236
    00000ca6: 	movdqa	%xmm0, %xmm1
    00000caa: 	addb	0x2158(%rsp), %dl
    00000cb1: 	psrldq	$0x8, %xmm1
    00000cb6: 	subl	%r8d, %edx
    00000cb9: 	subb	0x215f(%rsp), %dl
    00000cc0: 	paddb	%xmm1, %xmm0
    00000cc4: 	pxor	%xmm1, %xmm1
    00000cc8: 	psadbw	%xmm1, %xmm0
    00000ccc: 	movq	0x2151(%rsp), %xmm1
    00000cd5: 	movd	%xmm0, %eax
    00000cd9: 	movq	0x2150(%rsp), %xmm0
    00000ce2: 	addl	%edx, %eax
    00000ce4: 	psubb	%xmm1, %xmm0
    00000ce8: 	pxor	%xmm1, %xmm1
    00000cec: 	movdqa	%xmm0, %xmm6
    00000cf0: 	psadbw	%xmm1, %xmm6
    00000cf4: 	movq	%xmm6, 0xf8(%rsp)
    00000cfd: 	movq	%xmm6, %rsi
    00000d02: 	addb	%sil, %al
    00000d05: 	jne	.Ltmp5236 # Offset: 3333
.Ltmp5441:
    00000d0b: 	addl	$0x1, %r12d
    00000d0f: 	cmpl	%ecx, %r12d
    00000d12: 	jl	.Ltmp5237 # Offset: 3346
.Ltmp5234:
    00000d18: 	movq	%r15, %rsi
    00000d1b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000d22: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 3362
    00000d27: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000d2e: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000d35: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000d3c: 	je	.Ltmp5238 # Offset: 3388
.Ltmp5476:
    00000d42: 	movq	-0x20(%rax), %r12
    00000d46: 	callq	clock@PLT # Offset: 3398
    00000d4b: 	pxor	%xmm0, %xmm0
    00000d4f: 	movq	%rax, end_time(%rip)
    00000d56: 	movq	%r12, %rdi
    00000d59: 	subq	start_time(%rip), %rax
    00000d60: 	cvtsi2sd	%rax, %xmm0
    00000d65: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000d6d: 	callq	_Z13record_resultdPKc # Offset: 3437
    00000d72: 	movq	0x200(%rsp), %rdi
    00000d7a: 	cmpq	(%rsp), %rdi
    00000d7e: 	je	.Ltmp5239 # Offset: 3454
    00000d80: 	movq	0x210(%rsp), %rax
    00000d88: 	leaq	0x1(%rax), %rsi
    00000d8c: 	callq	_ZdlPvm@PLT # Offset: 3468
.Ltmp5239:
    00000d91: 	movq	0x8(%rsp), %rsi
    00000d96: 	leaq	DATAat0x4d27a(%rip), %rdx
    00000d9d: 	movq	%r15, %rdi
    00000da0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3488
    00000da5: 	callq	clock@PLT # Offset: 3493
    00000daa: 	movl	iterations(%rip), %ecx
    00000db0: 	xorl	%r12d, %r12d
    00000db3: 	leaq	0x2150(%rsp), %rbx
    00000dbb: 	movq	%rax, start_time(%rip)
    00000dc2: 	leaq	DATAat0x4d004(%rip), %r13
    00000dc9: 	testl	%ecx, %ecx
    00000dcb: 	jle	.Ltmp5240 # Offset: 3531
    00000dd1: 	nopl	(%rax) # Size: 7
.Ltmp5243:
    00000dd8: 	movzbl	0x221(%rsp), %r8d
    00000de1: 	movzbl	0x220(%rsp), %edx
    00000de9: 	movq	%rbp, %rax
    00000dec: 	pxor	%xmm0, %xmm0
.Ltmp5241:
    00000df0: 	paddb	(%rax), %xmm0
    00000df4: 	movdqu	0x1(%rax), %xmm5
    00000df9: 	addq	$0x10, %rax
    00000dfd: 	psubb	%xmm5, %xmm0
    00000e01: 	cmpq	%rbx, %rax
    00000e04: 	jne	.Ltmp5241 # Offset: 3588
    00000e06: 	movdqa	%xmm0, %xmm1
    00000e0a: 	addb	0x2158(%rsp), %dl
    00000e11: 	psrldq	$0x8, %xmm1
    00000e16: 	subl	%r8d, %edx
    00000e19: 	subb	0x215f(%rsp), %dl
    00000e20: 	paddb	%xmm1, %xmm0
    00000e24: 	pxor	%xmm1, %xmm1
    00000e28: 	psadbw	%xmm1, %xmm0
    00000e2c: 	movq	0x2151(%rsp), %xmm1
    00000e35: 	movd	%xmm0, %eax
    00000e39: 	movq	0x2150(%rsp), %xmm0
    00000e42: 	addl	%edx, %eax
    00000e44: 	psubb	%xmm1, %xmm0
    00000e48: 	pxor	%xmm1, %xmm1
    00000e4c: 	movdqa	%xmm0, %xmm7
    00000e50: 	psadbw	%xmm1, %xmm7
    00000e54: 	movq	%xmm7, 0xf0(%rsp)
    00000e5d: 	movq	%xmm7, %rsi
    00000e62: 	addb	%sil, %al
    00000e65: 	jne	.Ltmp5242 # Offset: 3685
.Ltmp5440:
    00000e6b: 	addl	$0x1, %r12d
    00000e6f: 	cmpl	%ecx, %r12d
    00000e72: 	jl	.Ltmp5243 # Offset: 3698
.Ltmp5240:
    00000e78: 	movq	%r15, %rsi
    00000e7b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000e82: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 3714
    00000e87: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000e8e: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000e95: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000e9c: 	je	.Ltmp5244 # Offset: 3740
.Ltmp5475:
    00000ea2: 	movq	-0x20(%rax), %r12
    00000ea6: 	callq	clock@PLT # Offset: 3750
    00000eab: 	pxor	%xmm0, %xmm0
    00000eaf: 	movq	%rax, end_time(%rip)
    00000eb6: 	movq	%r12, %rdi
    00000eb9: 	subq	start_time(%rip), %rax
    00000ec0: 	cvtsi2sd	%rax, %xmm0
    00000ec5: 	divsd	DATAat0x4d640(%rip), %xmm0
    00000ecd: 	callq	_Z13record_resultdPKc # Offset: 3789
    00000ed2: 	movq	0x200(%rsp), %rdi
    00000eda: 	cmpq	(%rsp), %rdi
    00000ede: 	je	.Ltmp5245 # Offset: 3806
    00000ee0: 	movq	0x210(%rsp), %rax
    00000ee8: 	leaq	0x1(%rax), %rsi
    00000eec: 	callq	_ZdlPvm@PLT # Offset: 3820
.Ltmp5245:
    00000ef1: 	movq	0x8(%rsp), %rsi
    00000ef6: 	leaq	DATAat0x4d28f(%rip), %rdx
    00000efd: 	movq	%r15, %rdi
    00000f00: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3840
    00000f05: 	callq	clock@PLT # Offset: 3845
    00000f0a: 	movl	iterations(%rip), %ecx
    00000f10: 	xorl	%r12d, %r12d
    00000f13: 	leaq	0x2150(%rsp), %rbx
    00000f1b: 	movq	%rax, start_time(%rip)
    00000f22: 	leaq	DATAat0x4d004(%rip), %r13
    00000f29: 	testl	%ecx, %ecx
    00000f2b: 	jle	.Ltmp5246 # Offset: 3883
    00000f31: 	nopl	(%rax) # Size: 7
.Ltmp5249:
    00000f38: 	movzbl	0x220(%rsp), %edx
    00000f40: 	movq	%rbp, %rax
    00000f43: 	pxor	%xmm0, %xmm0
    00000f47: 	movzbl	0x221(%rsp), %r8d
.Ltmp5247:
    00000f50: 	paddb	(%rax), %xmm0
    00000f54: 	movdqu	0x1(%rax), %xmm6
    00000f59: 	addq	$0x10, %rax
    00000f5d: 	psubb	%xmm6, %xmm0
    00000f61: 	cmpq	%rbx, %rax
    00000f64: 	jne	.Ltmp5247 # Offset: 3940
    00000f66: 	movdqa	%xmm0, %xmm1
    00000f6a: 	addb	0x2158(%rsp), %dl
    00000f71: 	psrldq	$0x8, %xmm1
    00000f76: 	subl	%r8d, %edx
    00000f79: 	subb	0x215f(%rsp), %dl
    00000f80: 	paddb	%xmm1, %xmm0
    00000f84: 	pxor	%xmm1, %xmm1
    00000f88: 	psadbw	%xmm1, %xmm0
    00000f8c: 	movq	0x2151(%rsp), %xmm1
    00000f95: 	movd	%xmm0, %eax
    00000f99: 	movq	0x2150(%rsp), %xmm0
    00000fa2: 	addl	%edx, %eax
    00000fa4: 	psubb	%xmm1, %xmm0
    00000fa8: 	pxor	%xmm1, %xmm1
    00000fac: 	movdqa	%xmm0, %xmm2
    00000fb0: 	psadbw	%xmm1, %xmm2
    00000fb4: 	movq	%xmm2, 0xe8(%rsp)
    00000fbd: 	movq	%xmm2, %rsi
    00000fc2: 	addb	%sil, %al
    00000fc5: 	jne	.Ltmp5248 # Offset: 4037
.Ltmp5439:
    00000fcb: 	addl	$0x1, %r12d
    00000fcf: 	cmpl	%ecx, %r12d
    00000fd2: 	jl	.Ltmp5249 # Offset: 4050
.Ltmp5246:
    00000fd8: 	movq	%r15, %rsi
    00000fdb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000fe2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 4066
    00000fe7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000fee: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000ff5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000ffc: 	je	.Ltmp5250 # Offset: 4092
.Ltmp5474:
    00001002: 	movq	-0x20(%rax), %r12
    00001006: 	callq	clock@PLT # Offset: 4102
    0000100b: 	pxor	%xmm0, %xmm0
    0000100f: 	movq	%rax, end_time(%rip)
    00001016: 	movq	%r12, %rdi
    00001019: 	subq	start_time(%rip), %rax
    00001020: 	cvtsi2sd	%rax, %xmm0
    00001025: 	divsd	DATAat0x4d640(%rip), %xmm0
    0000102d: 	callq	_Z13record_resultdPKc # Offset: 4141
    00001032: 	movq	0x200(%rsp), %rdi
    0000103a: 	cmpq	(%rsp), %rdi
    0000103e: 	je	.Ltmp5251 # Offset: 4158
    00001040: 	movq	0x210(%rsp), %rax
    00001048: 	leaq	0x1(%rax), %rsi
    0000104c: 	callq	_ZdlPvm@PLT # Offset: 4172
.Ltmp5251:
    00001051: 	movq	0x8(%rsp), %rsi
    00001056: 	leaq	DATAat0x4d29b(%rip), %rdx
    0000105d: 	movq	%r15, %rdi
    00001060: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4192
    00001065: 	callq	clock@PLT # Offset: 4197
    0000106a: 	movl	iterations(%rip), %ecx
    00001070: 	xorl	%r12d, %r12d
    00001073: 	leaq	0x2150(%rsp), %rbx
    0000107b: 	movq	%rax, start_time(%rip)
    00001082: 	leaq	DATAat0x4d004(%rip), %r13
    00001089: 	testl	%ecx, %ecx
    0000108b: 	jle	.Ltmp5252 # Offset: 4235
    00001091: 	nopl	(%rax) # Size: 7
.Ltmp5255:
    00001098: 	movzbl	0x221(%rsp), %r8d
    000010a1: 	movzbl	0x220(%rsp), %edx
    000010a9: 	movq	%rbp, %rax
    000010ac: 	pxor	%xmm0, %xmm0
.Ltmp5253:
    000010b0: 	paddb	(%rax), %xmm0
    000010b4: 	movdqu	0x1(%rax), %xmm7
    000010b9: 	addq	$0x10, %rax
    000010bd: 	psubb	%xmm7, %xmm0
    000010c1: 	cmpq	%rbx, %rax
    000010c4: 	jne	.Ltmp5253 # Offset: 4292
    000010c6: 	movdqa	%xmm0, %xmm1
    000010ca: 	addb	0x2158(%rsp), %dl
    000010d1: 	psrldq	$0x8, %xmm1
    000010d6: 	subl	%r8d, %edx
    000010d9: 	subb	0x215f(%rsp), %dl
    000010e0: 	paddb	%xmm1, %xmm0
    000010e4: 	pxor	%xmm1, %xmm1
    000010e8: 	psadbw	%xmm1, %xmm0
    000010ec: 	movq	0x2151(%rsp), %xmm1
    000010f5: 	movd	%xmm0, %eax
    000010f9: 	movq	0x2150(%rsp), %xmm0
    00001102: 	addl	%edx, %eax
    00001104: 	psubb	%xmm1, %xmm0
    00001108: 	pxor	%xmm1, %xmm1
    0000110c: 	movdqa	%xmm0, %xmm3
    00001110: 	psadbw	%xmm1, %xmm3
    00001114: 	movq	%xmm3, 0xe0(%rsp)
    0000111d: 	movq	%xmm3, %rsi
    00001122: 	addb	%sil, %al
    00001125: 	jne	.Ltmp5254 # Offset: 4389
.Ltmp5438:
    0000112b: 	addl	$0x1, %r12d
    0000112f: 	cmpl	%ecx, %r12d
    00001132: 	jl	.Ltmp5255 # Offset: 4402
.Ltmp5252:
    00001138: 	movq	%r15, %rsi
    0000113b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001142: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 4418
    00001147: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000114e: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001155: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000115c: 	je	.Ltmp5256 # Offset: 4444
.Ltmp5473:
    00001162: 	movq	-0x20(%rax), %r12
    00001166: 	callq	clock@PLT # Offset: 4454
    0000116b: 	pxor	%xmm0, %xmm0
    0000116f: 	movq	%rax, end_time(%rip)
    00001176: 	movq	%r12, %rdi
    00001179: 	subq	start_time(%rip), %rax
    00001180: 	cvtsi2sd	%rax, %xmm0
    00001185: 	divsd	DATAat0x4d640(%rip), %xmm0
    0000118d: 	callq	_Z13record_resultdPKc # Offset: 4493
    00001192: 	movq	0x200(%rsp), %rdi
    0000119a: 	cmpq	(%rsp), %rdi
    0000119e: 	je	.Ltmp5257 # Offset: 4510
    000011a0: 	movq	0x210(%rsp), %rax
    000011a8: 	leaq	0x1(%rax), %rsi
    000011ac: 	callq	_ZdlPvm@PLT # Offset: 4524
.Ltmp5257:
    000011b1: 	movq	0x8(%rsp), %rsi
    000011b6: 	leaq	DATAat0x4d2ad(%rip), %rdx
    000011bd: 	movq	%r15, %rdi
    000011c0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4544
    000011c5: 	callq	clock@PLT # Offset: 4549
    000011ca: 	movl	iterations(%rip), %ecx
    000011d0: 	xorl	%r12d, %r12d
    000011d3: 	leaq	0x2150(%rsp), %rbx
    000011db: 	movq	%rax, start_time(%rip)
    000011e2: 	leaq	DATAat0x4d004(%rip), %r13
    000011e9: 	testl	%ecx, %ecx
    000011eb: 	jle	.Ltmp5258 # Offset: 4587
    000011f1: 	nopl	(%rax) # Size: 7
.Ltmp5261:
    000011f8: 	movzbl	0x220(%rsp), %edx
    00001200: 	movq	%rbp, %rax
    00001203: 	pxor	%xmm0, %xmm0
    00001207: 	movzbl	0x221(%rsp), %r8d
.Ltmp5259:
    00001210: 	paddb	(%rax), %xmm0
    00001214: 	movdqu	0x1(%rax), %xmm2
    00001219: 	addq	$0x10, %rax
    0000121d: 	psubb	%xmm2, %xmm0
    00001221: 	cmpq	%rax, %rbx
    00001224: 	jne	.Ltmp5259 # Offset: 4644
    00001226: 	movdqa	%xmm0, %xmm1
    0000122a: 	addb	0x2158(%rsp), %dl
    00001231: 	psrldq	$0x8, %xmm1
    00001236: 	subl	%r8d, %edx
    00001239: 	subb	0x215f(%rsp), %dl
    00001240: 	paddb	%xmm1, %xmm0
    00001244: 	pxor	%xmm1, %xmm1
    00001248: 	psadbw	%xmm1, %xmm0
    0000124c: 	movq	0x2151(%rsp), %xmm1
    00001255: 	movd	%xmm0, %eax
    00001259: 	movq	0x2150(%rsp), %xmm0
    00001262: 	addl	%edx, %eax
    00001264: 	psubb	%xmm1, %xmm0
    00001268: 	pxor	%xmm1, %xmm1
    0000126c: 	movdqa	%xmm0, %xmm4
    00001270: 	psadbw	%xmm1, %xmm4
    00001274: 	movq	%xmm4, 0xd8(%rsp)
    0000127d: 	movq	%xmm4, %rsi
    00001282: 	addb	%sil, %al
    00001285: 	jne	.Ltmp5260 # Offset: 4741
.Ltmp5437:
    0000128b: 	addl	$0x1, %r12d
    0000128f: 	cmpl	%ecx, %r12d
    00001292: 	jl	.Ltmp5261 # Offset: 4754
.Ltmp5258:
    00001298: 	movq	%r15, %rsi
    0000129b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000012a2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 4770
    000012a7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000012ae: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000012b5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000012bc: 	je	.Ltmp5262 # Offset: 4796
.Ltmp5472:
    000012c2: 	movq	-0x20(%rax), %r12
    000012c6: 	callq	clock@PLT # Offset: 4806
    000012cb: 	pxor	%xmm0, %xmm0
    000012cf: 	movq	%rax, end_time(%rip)
    000012d6: 	movq	%r12, %rdi
    000012d9: 	subq	start_time(%rip), %rax
    000012e0: 	cvtsi2sd	%rax, %xmm0
    000012e5: 	divsd	DATAat0x4d640(%rip), %xmm0
    000012ed: 	callq	_Z13record_resultdPKc # Offset: 4845
    000012f2: 	movq	0x200(%rsp), %rdi
    000012fa: 	cmpq	(%rsp), %rdi
    000012fe: 	je	.Ltmp5263 # Offset: 4862
    00001300: 	movq	0x210(%rsp), %rax
    00001308: 	leaq	0x1(%rax), %rsi
    0000130c: 	callq	_ZdlPvm@PLT # Offset: 4876
.Ltmp5263:
    00001311: 	movq	0x8(%rsp), %rbx
    00001316: 	leaq	0x180(%rsp), %rdi
    0000131e: 	leaq	DATAat0x4d2b6(%rip), %rdx
    00001325: 	movq	%rbx, %rsi
    00001328: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4904
    0000132d: 	movl	iterations(%rip), %edx
    00001333: 	xorl	%r8d, %r8d
    00001336: 	xorl	%ecx, %ecx
    00001338: 	movl	$0x1f40, %esi
    0000133d: 	movq	0x180(%rsp), %rdi
    00001345: 	callq	_Z9summarizePKciiii # Offset: 4933
    0000134a: 	leaq	DATAat0x4d2bb(%rip), %rdx
    00001351: 	movq	%rbx, %rsi
    00001354: 	movq	%r15, %rdi
    00001357: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4951
    0000135c: 	callq	clock@PLT # Offset: 4956
    00001361: 	movl	iterations(%rip), %r14d
    00001368: 	xorl	%r12d, %r12d
    0000136b: 	leaq	0x2150(%rsp), %rbx
    00001373: 	movq	%rax, start_time(%rip)
    0000137a: 	testl	%r14d, %r14d
    0000137d: 	jle	.Ltmp5264 # Offset: 4989
    00001383: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5267:
    00001388: 	movzbl	0x220(%rsp), %r10d
    00001391: 	movq	%rbp, %rax
    00001394: 	pxor	%xmm1, %xmm1
    00001398: 	subb	0x221(%rsp), %r10b
.Ltmp5265:
    000013a0: 	movdqa	(%rax), %xmm0
    000013a4: 	movdqu	0x1(%rax), %xmm3
    000013a9: 	addq	$0x10, %rax
    000013ad: 	psubb	%xmm3, %xmm0
    000013b1: 	paddb	%xmm0, %xmm0
    000013b5: 	paddb	%xmm0, %xmm1
    000013b9: 	cmpq	%rbx, %rax
    000013bc: 	jne	.Ltmp5265 # Offset: 5052
    000013be: 	movdqa	%xmm1, %xmm0
    000013c2: 	movzbl	0x215e(%rsp), %r13d
    000013cb: 	movzbl	0x215a(%rsp), %r9d
    000013d4: 	psrldq	$0x8, %xmm0
    000013d9: 	movzbl	0x215c(%rsp), %edi
    000013e1: 	movzbl	0x215b(%rsp), %r8d
    000013ea: 	paddb	%xmm0, %xmm1
    000013ee: 	pxor	%xmm0, %xmm0
    000013f2: 	movl	%r13d, %ecx
    000013f5: 	subb	0x215f(%rsp), %cl
    000013fc: 	psadbw	%xmm0, %xmm1
    00001400: 	addl	%ecx, %r10d
    00001403: 	movzbl	0x2158(%rsp), %ecx
    0000140b: 	movq	0x2150(%rsp), %xmm0
    00001414: 	movd	%xmm1, %edx
    00001418: 	movzbl	0x215d(%rsp), %esi
    00001420: 	movq	0x2151(%rsp), %xmm1
    00001429: 	psubb	%xmm1, %xmm0
    0000142d: 	pxor	%xmm1, %xmm1
    00001431: 	paddb	%xmm0, %xmm0
    00001435: 	movdqa	%xmm0, %xmm5
    00001439: 	psadbw	%xmm1, %xmm5
    0000143d: 	movq	%xmm5, 0xd0(%rsp)
    00001446: 	movq	%xmm5, %rax
    0000144b: 	movl	%eax, %r11d
    0000144e: 	movzbl	0x2159(%rsp), %eax
    00001456: 	addl	%edx, %r11d
    00001459: 	subl	%eax, %ecx
    0000145b: 	subl	%r9d, %eax
    0000145e: 	subl	%r8d, %r9d
    00001461: 	subl	%edi, %r8d
    00001464: 	addl	%r10d, %ecx
    00001467: 	subl	%esi, %edi
    00001469: 	subl	%r13d, %esi
    0000146c: 	addl	%ecx, %eax
    0000146e: 	addl	%r9d, %eax
    00001471: 	addl	%r8d, %eax
    00001474: 	addl	%eax, %edi
    00001476: 	addl	%edi, %esi
    00001478: 	leal	(%r11,%rsi,2), %esi
    0000147c: 	testb	%sil, %sil
    0000147f: 	jne	.Ltmp5266 # Offset: 5247
.Ltmp5436:
    00001485: 	addl	$0x1, %r12d
    00001489: 	cmpl	%r14d, %r12d
    0000148c: 	jl	.Ltmp5267 # Offset: 5260
.Ltmp5264:
    00001492: 	movq	%r15, %rsi
    00001495: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000149c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 5276
    000014a1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000014a8: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000014af: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000014b6: 	je	.Ltmp5268 # Offset: 5302
.Ltmp5471:
    000014bc: 	movq	-0x20(%rax), %r12
    000014c0: 	callq	clock@PLT # Offset: 5312
    000014c5: 	pxor	%xmm0, %xmm0
    000014c9: 	movq	%rax, end_time(%rip)
    000014d0: 	movq	%r12, %rdi
    000014d3: 	subq	start_time(%rip), %rax
    000014da: 	cvtsi2sd	%rax, %xmm0
    000014df: 	divsd	DATAat0x4d640(%rip), %xmm0
    000014e7: 	callq	_Z13record_resultdPKc # Offset: 5351
    000014ec: 	movq	0x200(%rsp), %rdi
    000014f4: 	cmpq	(%rsp), %rdi
    000014f8: 	je	.Ltmp5269 # Offset: 5368
    000014fa: 	movq	0x210(%rsp), %rax
    00001502: 	leaq	0x1(%rax), %rsi
    00001506: 	callq	_ZdlPvm@PLT # Offset: 5382
.Ltmp5269:
    0000150b: 	movq	0x8(%rsp), %rsi
    00001510: 	leaq	DATAat0x4d2ca(%rip), %rdx
    00001517: 	movq	%r15, %rdi
    0000151a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5402
    0000151f: 	callq	clock@PLT # Offset: 5407
    00001524: 	movl	iterations(%rip), %r14d
    0000152b: 	xorl	%r12d, %r12d
    0000152e: 	leaq	0x2150(%rsp), %rbx
    00001536: 	movq	%rax, start_time(%rip)
    0000153d: 	testl	%r14d, %r14d
    00001540: 	jle	.Ltmp5270 # Offset: 5440
    00001546: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp5273:
    00001550: 	movzbl	0x220(%rsp), %r10d
    00001559: 	movq	%rbp, %rax
    0000155c: 	pxor	%xmm1, %xmm1
    00001560: 	subb	0x221(%rsp), %r10b
    00001568: 	nopl	(%rax,%rax) # Size: 8
.Ltmp5271:
    00001570: 	movdqa	(%rax), %xmm0
    00001574: 	movdqu	0x1(%rax), %xmm4
    00001579: 	addq	$0x10, %rax
    0000157d: 	psubb	%xmm4, %xmm0
    00001581: 	paddb	%xmm0, %xmm0
    00001585: 	paddb	%xmm0, %xmm1
    00001589: 	cmpq	%rax, %rbx
    0000158c: 	jne	.Ltmp5271 # Offset: 5516
    0000158e: 	movdqa	%xmm1, %xmm0
    00001592: 	movzbl	0x215e(%rsp), %r13d
    0000159b: 	movzbl	0x215a(%rsp), %r9d
    000015a4: 	psrldq	$0x8, %xmm0
    000015a9: 	movzbl	0x215c(%rsp), %edi
    000015b1: 	movzbl	0x215b(%rsp), %r8d
    000015ba: 	paddb	%xmm0, %xmm1
    000015be: 	pxor	%xmm0, %xmm0
    000015c2: 	movl	%r13d, %ecx
    000015c5: 	subb	0x215f(%rsp), %cl
    000015cc: 	psadbw	%xmm0, %xmm1
    000015d0: 	addl	%ecx, %r10d
    000015d3: 	movzbl	0x2158(%rsp), %ecx
    000015db: 	movq	0x2150(%rsp), %xmm0
    000015e4: 	movd	%xmm1, %edx
    000015e8: 	movzbl	0x215d(%rsp), %esi
    000015f0: 	movq	0x2151(%rsp), %xmm1
    000015f9: 	psubb	%xmm1, %xmm0
    000015fd: 	pxor	%xmm1, %xmm1
    00001601: 	paddb	%xmm0, %xmm0
    00001605: 	movdqa	%xmm0, %xmm6
    00001609: 	psadbw	%xmm1, %xmm6
    0000160d: 	movq	%xmm6, 0xc8(%rsp)
    00001616: 	movq	%xmm6, %rax
    0000161b: 	movl	%eax, %r11d
    0000161e: 	movzbl	0x2159(%rsp), %eax
    00001626: 	addl	%edx, %r11d
    00001629: 	subl	%eax, %ecx
    0000162b: 	subl	%r9d, %eax
    0000162e: 	subl	%r8d, %r9d
    00001631: 	subl	%edi, %r8d
    00001634: 	addl	%r10d, %ecx
    00001637: 	subl	%esi, %edi
    00001639: 	subl	%r13d, %esi
    0000163c: 	addl	%ecx, %eax
    0000163e: 	addl	%r9d, %eax
    00001641: 	addl	%r8d, %eax
    00001644: 	addl	%eax, %edi
    00001646: 	addl	%edi, %esi
    00001648: 	leal	(%r11,%rsi,2), %esi
    0000164c: 	testb	%sil, %sil
    0000164f: 	jne	.Ltmp5272 # Offset: 5711
.Ltmp5435:
    00001655: 	addl	$0x1, %r12d
    00001659: 	cmpl	%r14d, %r12d
    0000165c: 	jl	.Ltmp5273 # Offset: 5724
.Ltmp5270:
    00001662: 	movq	%r15, %rsi
    00001665: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000166c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 5740
    00001671: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001678: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000167f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001686: 	je	.Ltmp5274 # Offset: 5766
.Ltmp5470:
    0000168c: 	movq	-0x20(%rax), %r12
    00001690: 	callq	clock@PLT # Offset: 5776
    00001695: 	pxor	%xmm0, %xmm0
    00001699: 	movq	%rax, end_time(%rip)
    000016a0: 	movq	%r12, %rdi
    000016a3: 	subq	start_time(%rip), %rax
    000016aa: 	cvtsi2sd	%rax, %xmm0
    000016af: 	divsd	DATAat0x4d640(%rip), %xmm0
    000016b7: 	callq	_Z13record_resultdPKc # Offset: 5815
    000016bc: 	movq	0x200(%rsp), %rdi
    000016c4: 	cmpq	(%rsp), %rdi
    000016c8: 	je	.Ltmp5275 # Offset: 5832
    000016ca: 	movq	0x210(%rsp), %rax
    000016d2: 	leaq	0x1(%rax), %rsi
    000016d6: 	callq	_ZdlPvm@PLT # Offset: 5846
.Ltmp5275:
    000016db: 	movq	0x8(%rsp), %rsi
    000016e0: 	leaq	DATAat0x4d2de(%rip), %rdx
    000016e7: 	movq	%r15, %rdi
    000016ea: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5866
    000016ef: 	callq	clock@PLT # Offset: 5871
    000016f4: 	movl	iterations(%rip), %r14d
    000016fb: 	xorl	%r12d, %r12d
    000016fe: 	leaq	0x2150(%rsp), %rbx
    00001706: 	movq	%rax, start_time(%rip)
    0000170d: 	testl	%r14d, %r14d
    00001710: 	jle	.Ltmp5276 # Offset: 5904
    00001716: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp5279:
    00001720: 	movzbl	0x220(%rsp), %r10d
    00001729: 	movq	%rbp, %rax
    0000172c: 	pxor	%xmm1, %xmm1
    00001730: 	subb	0x221(%rsp), %r10b
    00001738: 	nopl	(%rax,%rax) # Size: 8
.Ltmp5277:
    00001740: 	movdqa	(%rax), %xmm0
    00001744: 	movdqu	0x1(%rax), %xmm5
    00001749: 	addq	$0x10, %rax
    0000174d: 	psubb	%xmm5, %xmm0
    00001751: 	paddb	%xmm0, %xmm0
    00001755: 	paddb	%xmm0, %xmm1
    00001759: 	cmpq	%rbx, %rax
    0000175c: 	jne	.Ltmp5277 # Offset: 5980
    0000175e: 	movdqa	%xmm1, %xmm0
    00001762: 	movzbl	0x215e(%rsp), %r13d
    0000176b: 	movzbl	0x215a(%rsp), %r9d
    00001774: 	psrldq	$0x8, %xmm0
    00001779: 	movzbl	0x215c(%rsp), %edi
    00001781: 	movzbl	0x215b(%rsp), %r8d
    0000178a: 	paddb	%xmm0, %xmm1
    0000178e: 	pxor	%xmm0, %xmm0
    00001792: 	movl	%r13d, %ecx
    00001795: 	subb	0x215f(%rsp), %cl
    0000179c: 	psadbw	%xmm0, %xmm1
    000017a0: 	addl	%ecx, %r10d
    000017a3: 	movzbl	0x2158(%rsp), %ecx
    000017ab: 	movq	0x2150(%rsp), %xmm0
    000017b4: 	movd	%xmm1, %edx
    000017b8: 	movzbl	0x215d(%rsp), %esi
    000017c0: 	movq	0x2151(%rsp), %xmm1
    000017c9: 	psubb	%xmm1, %xmm0
    000017cd: 	pxor	%xmm1, %xmm1
    000017d1: 	paddb	%xmm0, %xmm0
    000017d5: 	movdqa	%xmm0, %xmm7
    000017d9: 	psadbw	%xmm1, %xmm7
    000017dd: 	movq	%xmm7, 0xc0(%rsp)
    000017e6: 	movq	%xmm7, %rax
    000017eb: 	movl	%eax, %r11d
    000017ee: 	movzbl	0x2159(%rsp), %eax
    000017f6: 	addl	%edx, %r11d
    000017f9: 	subl	%eax, %ecx
    000017fb: 	subl	%r9d, %eax
    000017fe: 	subl	%r8d, %r9d
    00001801: 	subl	%edi, %r8d
    00001804: 	addl	%r10d, %ecx
    00001807: 	subl	%esi, %edi
    00001809: 	subl	%r13d, %esi
    0000180c: 	addl	%ecx, %eax
    0000180e: 	addl	%r9d, %eax
    00001811: 	addl	%r8d, %eax
    00001814: 	addl	%eax, %edi
    00001816: 	addl	%edi, %esi
    00001818: 	leal	(%r11,%rsi,2), %esi
    0000181c: 	testb	%sil, %sil
    0000181f: 	jne	.Ltmp5278 # Offset: 6175
.Ltmp5434:
    00001825: 	addl	$0x1, %r12d
    00001829: 	cmpl	%r14d, %r12d
    0000182c: 	jl	.Ltmp5279 # Offset: 6188
.Ltmp5276:
    00001832: 	movq	%r15, %rsi
    00001835: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000183c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 6204
    00001841: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001848: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000184f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001856: 	je	.Ltmp5280 # Offset: 6230
.Ltmp5469:
    0000185c: 	movq	-0x20(%rax), %r12
    00001860: 	callq	clock@PLT # Offset: 6240
    00001865: 	pxor	%xmm0, %xmm0
    00001869: 	movq	%rax, end_time(%rip)
    00001870: 	movq	%r12, %rdi
    00001873: 	subq	start_time(%rip), %rax
    0000187a: 	cvtsi2sd	%rax, %xmm0
    0000187f: 	divsd	DATAat0x4d640(%rip), %xmm0
    00001887: 	callq	_Z13record_resultdPKc # Offset: 6279
    0000188c: 	movq	0x200(%rsp), %rdi
    00001894: 	cmpq	(%rsp), %rdi
    00001898: 	je	.Ltmp5281 # Offset: 6296
    0000189a: 	movq	0x210(%rsp), %rax
    000018a2: 	leaq	0x1(%rax), %rsi
    000018a6: 	callq	_ZdlPvm@PLT # Offset: 6310
.Ltmp5281:
    000018ab: 	movq	0x8(%rsp), %rsi
    000018b0: 	leaq	DATAat0x4d2f0(%rip), %rdx
    000018b7: 	movq	%r15, %rdi
    000018ba: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6330
    000018bf: 	movl	0x1c(%rsp), %edx
    000018c3: 	movq	%r15, %rcx
    000018c6: 	movl	$0x1f40, %esi
    000018cb: 	movq	%rbp, %rdi
    000018ce: 	callq	_Z28test_CSE2_add_inline_flippedIh14custom_cse_addIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6350
    000018d3: 	movq	0x200(%rsp), %rdi
    000018db: 	cmpq	(%rsp), %rdi
    000018df: 	je	.Ltmp5282 # Offset: 6367
    000018e1: 	movq	0x210(%rsp), %rax
    000018e9: 	leaq	0x1(%rax), %rsi
    000018ed: 	callq	_ZdlPvm@PLT # Offset: 6381
.Ltmp5282:
    000018f2: 	movq	0x8(%rsp), %rsi
    000018f7: 	leaq	DATAat0x4d30a(%rip), %rdx
    000018fe: 	movq	%r15, %rdi
    00001901: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6401
    00001906: 	callq	clock@PLT # Offset: 6406
    0000190b: 	leaq	0x2150(%rsp), %rbx
    00001913: 	movl	$0x0, 0x14(%rsp)
    0000191b: 	movq	%rax, start_time(%rip)
    00001922: 	movl	iterations(%rip), %eax
    00001928: 	movl	%eax, 0x24(%rsp)
    0000192c: 	testl	%eax, %eax
    0000192e: 	jle	.Ltmp5283 # Offset: 6446
    00001934: 	nopl	(%rax) # Size: 4
.Ltmp5286:
    00001938: 	movzbl	0x220(%rsp), %edx
    00001940: 	pxor	%xmm1, %xmm1
    00001944: 	movzbl	0x221(%rsp), %r12d
    0000194d: 	leal	(%rdx,%r12), %eax
    00001951: 	addb	0x23(%rsp), %al
    00001955: 	movl	%edx, %r10d
    00001958: 	movzbl	%al, %eax
    0000195b: 	leal	(%rdx,%rax,2), %edi
    0000195e: 	movzbl	%r12b, %edx
    00001962: 	movl	%edi, 0x18(%rsp)
    00001966: 	leal	(%rdx,%rax,2), %r11d
    0000196a: 	movq	%rbp, %rax
    0000196d: 	nopl	(%rax) # Size: 3
.Ltmp5284:
    00001970: 	movdqa	(%rax), %xmm0
    00001974: 	movdqu	0x1(%rax), %xmm6
    00001979: 	addq	$0x10, %rax
    0000197d: 	psubb	%xmm6, %xmm0
    00001981: 	paddb	%xmm0, %xmm0
    00001985: 	paddb	%xmm0, %xmm1
    00001989: 	cmpq	%rax, %rbx
    0000198c: 	jne	.Ltmp5284 # Offset: 6540
    0000198e: 	movdqa	%xmm1, %xmm0
    00001992: 	movzbl	0x2159(%rsp), %edi
    0000199a: 	subl	%r12d, %r10d
    0000199d: 	movzbl	0x2158(%rsp), %r8d
    000019a6: 	psrldq	$0x8, %xmm0
    000019ab: 	movzbl	0x215a(%rsp), %esi
    000019b3: 	movzbl	0x215b(%rsp), %ecx
    000019bb: 	movzbl	0x215e(%rsp), %r14d
    000019c4: 	paddb	%xmm0, %xmm1
    000019c8: 	subl	%edi, %r8d
    000019cb: 	pxor	%xmm0, %xmm0
    000019cf: 	psadbw	%xmm0, %xmm1
    000019d3: 	subl	%esi, %edi
    000019d5: 	subl	%ecx, %esi
    000019d7: 	movq	0x2150(%rsp), %xmm0
    000019e0: 	movd	%xmm1, %edx
    000019e4: 	movq	0x2151(%rsp), %xmm1
    000019ed: 	subb	0x215f(%rsp), %r14b
    000019f5: 	movzbl	0x215d(%rsp), %r9d
    000019fe: 	addl	%r14d, %r8d
    00001a01: 	psubb	%xmm1, %xmm0
    00001a05: 	pxor	%xmm1, %xmm1
    00001a09: 	addl	%r8d, %edi
    00001a0c: 	addl	%edi, %esi
    00001a0e: 	paddb	%xmm0, %xmm0
    00001a12: 	movdqa	%xmm0, %xmm2
    00001a16: 	psadbw	%xmm1, %xmm2
    00001a1a: 	movq	%xmm2, 0xb8(%rsp)
    00001a23: 	movq	%xmm2, %rax
    00001a28: 	movl	%eax, %r13d
    00001a2b: 	movzbl	0x215c(%rsp), %eax
    00001a33: 	subl	%eax, %ecx
    00001a35: 	subl	%r9d, %eax
    00001a38: 	subb	0x215e(%rsp), %r9b
    00001a40: 	addl	%esi, %ecx
    00001a42: 	addl	%ecx, %eax
    00001a44: 	addl	%r9d, %eax
    00001a47: 	leal	(%r10,%rax,2), %eax
    00001a4b: 	addb	0x18(%rsp), %al
    00001a4f: 	subl	%r11d, %eax
    00001a52: 	addl	%edx, %eax
    00001a54: 	addb	%r13b, %al
    00001a57: 	jne	.Ltmp5285 # Offset: 6743
.Ltmp5433:
    00001a5d: 	addl	$0x1, 0x14(%rsp)
    00001a62: 	movl	0x14(%rsp), %eax
    00001a66: 	cmpl	0x24(%rsp), %eax
    00001a6a: 	jl	.Ltmp5286 # Offset: 6762
.Ltmp5283:
    00001a70: 	movq	%r15, %rsi
    00001a73: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001a7a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 6778
    00001a7f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001a86: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001a8d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001a94: 	je	.Ltmp5287 # Offset: 6804
.Ltmp5468:
    00001a9a: 	movq	-0x20(%rax), %r12
    00001a9e: 	callq	clock@PLT # Offset: 6814
    00001aa3: 	pxor	%xmm0, %xmm0
    00001aa7: 	movq	%rax, end_time(%rip)
    00001aae: 	movq	%r12, %rdi
    00001ab1: 	subq	start_time(%rip), %rax
    00001ab8: 	cvtsi2sd	%rax, %xmm0
    00001abd: 	divsd	DATAat0x4d640(%rip), %xmm0
    00001ac5: 	callq	_Z13record_resultdPKc # Offset: 6853
    00001aca: 	movq	0x200(%rsp), %rdi
    00001ad2: 	cmpq	(%rsp), %rdi
    00001ad6: 	je	.Ltmp5288 # Offset: 6870
    00001ad8: 	movq	0x210(%rsp), %rax
    00001ae0: 	leaq	0x1(%rax), %rsi
    00001ae4: 	callq	_ZdlPvm@PLT # Offset: 6884
.Ltmp5288:
    00001ae9: 	movq	0x8(%rsp), %rsi
    00001aee: 	leaq	DATAat0x4d315(%rip), %rdx
    00001af5: 	movq	%r15, %rdi
    00001af8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6904
    00001afd: 	callq	clock@PLT # Offset: 6909
    00001b02: 	movl	iterations(%rip), %r14d
    00001b09: 	xorl	%r12d, %r12d
    00001b0c: 	leaq	0x2150(%rsp), %rbx
    00001b14: 	movq	%rax, start_time(%rip)
    00001b1b: 	testl	%r14d, %r14d
    00001b1e: 	jle	.Ltmp5289 # Offset: 6942
    00001b24: 	nopl	(%rax) # Size: 4
.Ltmp5292:
    00001b28: 	movzbl	0x220(%rsp), %r10d
    00001b31: 	movq	%rbp, %rax
    00001b34: 	pxor	%xmm1, %xmm1
    00001b38: 	subb	0x221(%rsp), %r10b
.Ltmp5290:
    00001b40: 	movdqa	(%rax), %xmm0
    00001b44: 	movdqu	0x1(%rax), %xmm7
    00001b49: 	addq	$0x10, %rax
    00001b4d: 	psubb	%xmm7, %xmm0
    00001b51: 	paddb	%xmm0, %xmm0
    00001b55: 	paddb	%xmm0, %xmm1
    00001b59: 	cmpq	%rbx, %rax
    00001b5c: 	jne	.Ltmp5290 # Offset: 7004
    00001b5e: 	movdqa	%xmm1, %xmm0
    00001b62: 	movzbl	0x215e(%rsp), %r13d
    00001b6b: 	movzbl	0x215a(%rsp), %r9d
    00001b74: 	psrldq	$0x8, %xmm0
    00001b79: 	movzbl	0x215c(%rsp), %edi
    00001b81: 	movzbl	0x215b(%rsp), %r8d
    00001b8a: 	paddb	%xmm0, %xmm1
    00001b8e: 	pxor	%xmm0, %xmm0
    00001b92: 	movl	%r13d, %ecx
    00001b95: 	subb	0x215f(%rsp), %cl
    00001b9c: 	psadbw	%xmm0, %xmm1
    00001ba0: 	addl	%ecx, %r10d
    00001ba3: 	movzbl	0x2158(%rsp), %ecx
    00001bab: 	movq	0x2150(%rsp), %xmm0
    00001bb4: 	movd	%xmm1, %edx
    00001bb8: 	movzbl	0x215d(%rsp), %esi
    00001bc0: 	movq	0x2151(%rsp), %xmm1
    00001bc9: 	psubb	%xmm1, %xmm0
    00001bcd: 	pxor	%xmm1, %xmm1
    00001bd1: 	paddb	%xmm0, %xmm0
    00001bd5: 	movdqa	%xmm0, %xmm3
    00001bd9: 	psadbw	%xmm1, %xmm3
    00001bdd: 	movq	%xmm3, 0xb0(%rsp)
    00001be6: 	movq	%xmm3, %rax
    00001beb: 	movl	%eax, %r11d
    00001bee: 	movzbl	0x2159(%rsp), %eax
    00001bf6: 	addl	%edx, %r11d
    00001bf9: 	subl	%eax, %ecx
    00001bfb: 	subl	%r9d, %eax
    00001bfe: 	subl	%r8d, %r9d
    00001c01: 	subl	%edi, %r8d
    00001c04: 	addl	%r10d, %ecx
    00001c07: 	subl	%esi, %edi
    00001c09: 	subl	%r13d, %esi
    00001c0c: 	addl	%ecx, %eax
    00001c0e: 	addl	%r9d, %eax
    00001c11: 	addl	%r8d, %eax
    00001c14: 	addl	%eax, %edi
    00001c16: 	addl	%edi, %esi
    00001c18: 	leal	(%r11,%rsi,2), %esi
    00001c1c: 	testb	%sil, %sil
    00001c1f: 	jne	.Ltmp5291 # Offset: 7199
.Ltmp5432:
    00001c25: 	addl	$0x1, %r12d
    00001c29: 	cmpl	%r14d, %r12d
    00001c2c: 	jl	.Ltmp5292 # Offset: 7212
.Ltmp5289:
    00001c32: 	movq	%r15, %rsi
    00001c35: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001c3c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 7228
    00001c41: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001c48: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001c4f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001c56: 	je	.Ltmp5293 # Offset: 7254
.Ltmp5467:
    00001c5c: 	movq	-0x20(%rax), %r12
    00001c60: 	callq	clock@PLT # Offset: 7264
    00001c65: 	pxor	%xmm0, %xmm0
    00001c69: 	movq	%rax, end_time(%rip)
    00001c70: 	movq	%r12, %rdi
    00001c73: 	subq	start_time(%rip), %rax
    00001c7a: 	cvtsi2sd	%rax, %xmm0
    00001c7f: 	divsd	DATAat0x4d640(%rip), %xmm0
    00001c87: 	callq	_Z13record_resultdPKc # Offset: 7303
    00001c8c: 	movq	0x200(%rsp), %rdi
    00001c94: 	cmpq	(%rsp), %rdi
    00001c98: 	je	.Ltmp5294 # Offset: 7320
    00001c9a: 	movq	0x210(%rsp), %rax
    00001ca2: 	leaq	0x1(%rax), %rsi
    00001ca6: 	callq	_ZdlPvm@PLT # Offset: 7334
.Ltmp5294:
    00001cab: 	movq	0x8(%rsp), %rsi
    00001cb0: 	leaq	DATAat0x4d32e(%rip), %rdx
    00001cb7: 	movq	%r15, %rdi
    00001cba: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7354
    00001cbf: 	movl	0x1c(%rsp), %edx
    00001cc3: 	movq	%r15, %rcx
    00001cc6: 	movl	$0x1f40, %esi
    00001ccb: 	movq	%rbp, %rdi
    00001cce: 	callq	_Z9test_CSE2Ih14custom_cse_subIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7374
    00001cd3: 	movq	0x200(%rsp), %rdi
    00001cdb: 	cmpq	(%rsp), %rdi
    00001cdf: 	je	.Ltmp5295 # Offset: 7391
    00001ce1: 	movq	0x210(%rsp), %rax
    00001ce9: 	leaq	0x1(%rax), %rsi
    00001ced: 	callq	_ZdlPvm@PLT # Offset: 7405
.Ltmp5295:
    00001cf2: 	movq	0x8(%rsp), %rsi
    00001cf7: 	leaq	DATAat0x4d33e(%rip), %rdx
    00001cfe: 	movq	%r15, %rdi
    00001d01: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7425
    00001d06: 	callq	clock@PLT # Offset: 7430
    00001d0b: 	movl	iterations(%rip), %r14d
    00001d12: 	xorl	%r12d, %r12d
    00001d15: 	leaq	0x2150(%rsp), %rbx
    00001d1d: 	movq	%rax, start_time(%rip)
    00001d24: 	testl	%r14d, %r14d
    00001d27: 	jle	.Ltmp5296 # Offset: 7463
    00001d2d: 	nopl	(%rax) # Size: 3
.Ltmp5299:
    00001d30: 	movzbl	0x220(%rsp), %r10d
    00001d39: 	movq	%rbp, %rax
    00001d3c: 	pxor	%xmm1, %xmm1
    00001d40: 	subb	0x221(%rsp), %r10b
    00001d48: 	nopl	(%rax,%rax) # Size: 8
.Ltmp5297:
    00001d50: 	movdqa	(%rax), %xmm0
    00001d54: 	movdqu	0x1(%rax), %xmm2
    00001d59: 	addq	$0x10, %rax
    00001d5d: 	psubb	%xmm2, %xmm0
    00001d61: 	paddb	%xmm0, %xmm0
    00001d65: 	paddb	%xmm0, %xmm1
    00001d69: 	cmpq	%rax, %rbx
    00001d6c: 	jne	.Ltmp5297 # Offset: 7532
    00001d6e: 	movdqa	%xmm1, %xmm0
    00001d72: 	movzbl	0x215e(%rsp), %r13d
    00001d7b: 	movzbl	0x215a(%rsp), %r9d
    00001d84: 	psrldq	$0x8, %xmm0
    00001d89: 	movzbl	0x215c(%rsp), %edi
    00001d91: 	movzbl	0x215b(%rsp), %r8d
    00001d9a: 	paddb	%xmm0, %xmm1
    00001d9e: 	pxor	%xmm0, %xmm0
    00001da2: 	movl	%r13d, %ecx
    00001da5: 	subb	0x215f(%rsp), %cl
    00001dac: 	psadbw	%xmm0, %xmm1
    00001db0: 	addl	%ecx, %r10d
    00001db3: 	movzbl	0x2158(%rsp), %ecx
    00001dbb: 	movq	0x2150(%rsp), %xmm0
    00001dc4: 	movd	%xmm1, %edx
    00001dc8: 	movzbl	0x215d(%rsp), %esi
    00001dd0: 	movq	0x2151(%rsp), %xmm1
    00001dd9: 	psubb	%xmm1, %xmm0
    00001ddd: 	pxor	%xmm1, %xmm1
    00001de1: 	paddb	%xmm0, %xmm0
    00001de5: 	movdqa	%xmm0, %xmm4
    00001de9: 	psadbw	%xmm1, %xmm4
    00001ded: 	movq	%xmm4, 0xa8(%rsp)
    00001df6: 	movq	%xmm4, %rax
    00001dfb: 	movl	%eax, %r11d
    00001dfe: 	movzbl	0x2159(%rsp), %eax
    00001e06: 	addl	%edx, %r11d
    00001e09: 	subl	%eax, %ecx
    00001e0b: 	subl	%r9d, %eax
    00001e0e: 	subl	%r8d, %r9d
    00001e11: 	subl	%edi, %r8d
    00001e14: 	addl	%r10d, %ecx
    00001e17: 	subl	%esi, %edi
    00001e19: 	subl	%r13d, %esi
    00001e1c: 	addl	%ecx, %eax
    00001e1e: 	addl	%r9d, %eax
    00001e21: 	addl	%r8d, %eax
    00001e24: 	addl	%eax, %edi
    00001e26: 	addl	%edi, %esi
    00001e28: 	leal	(%r11,%rsi,2), %esi
    00001e2c: 	testb	%sil, %sil
    00001e2f: 	jne	.Ltmp5298 # Offset: 7727
.Ltmp5431:
    00001e35: 	addl	$0x1, %r12d
    00001e39: 	cmpl	%r14d, %r12d
    00001e3c: 	jl	.Ltmp5299 # Offset: 7740
.Ltmp5296:
    00001e42: 	movq	%r15, %rsi
    00001e45: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00001e4c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 7756
    00001e51: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00001e58: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00001e5f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00001e66: 	je	.Ltmp5300 # Offset: 7782
.Ltmp5466:
    00001e6c: 	movq	-0x20(%rax), %r12
    00001e70: 	callq	clock@PLT # Offset: 7792
    00001e75: 	pxor	%xmm0, %xmm0
    00001e79: 	movq	%rax, end_time(%rip)
    00001e80: 	movq	%r12, %rdi
    00001e83: 	subq	start_time(%rip), %rax
    00001e8a: 	cvtsi2sd	%rax, %xmm0
    00001e8f: 	divsd	DATAat0x4d640(%rip), %xmm0
    00001e97: 	callq	_Z13record_resultdPKc # Offset: 7831
    00001e9c: 	movq	0x200(%rsp), %rdi
    00001ea4: 	cmpq	(%rsp), %rdi
    00001ea8: 	je	.Ltmp5301 # Offset: 7848
    00001eaa: 	movq	0x210(%rsp), %rax
    00001eb2: 	leaq	0x1(%rax), %rsi
    00001eb6: 	callq	_ZdlPvm@PLT # Offset: 7862
.Ltmp5301:
    00001ebb: 	movq	0x8(%rsp), %rsi
    00001ec0: 	leaq	DATAat0x4d357(%rip), %rdx
    00001ec7: 	movq	%r15, %rdi
    00001eca: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7882
    00001ecf: 	movl	0x1c(%rsp), %edx
    00001ed3: 	movq	%r15, %rcx
    00001ed6: 	movl	$0x1f40, %esi
    00001edb: 	movq	%rbp, %rdi
    00001ede: 	callq	_Z9test_CSE2Ih14custom_cse_mulIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7902
    00001ee3: 	movq	0x200(%rsp), %rdi
    00001eeb: 	cmpq	(%rsp), %rdi
    00001eef: 	je	.Ltmp5302 # Offset: 7919
    00001ef1: 	movq	0x210(%rsp), %rax
    00001ef9: 	leaq	0x1(%rax), %rsi
    00001efd: 	callq	_ZdlPvm@PLT # Offset: 7933
.Ltmp5302:
    00001f02: 	movq	0x8(%rsp), %rsi
    00001f07: 	leaq	DATAat0x4d367(%rip), %rdx
    00001f0e: 	movq	%r15, %rdi
    00001f11: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7953
    00001f16: 	callq	clock@PLT # Offset: 7958
    00001f1b: 	movl	iterations(%rip), %r14d
    00001f22: 	xorl	%r12d, %r12d
    00001f25: 	leaq	0x2150(%rsp), %rbx
    00001f2d: 	movq	%rax, start_time(%rip)
    00001f34: 	testl	%r14d, %r14d
    00001f37: 	jle	.Ltmp5303 # Offset: 7991
    00001f3d: 	nopl	(%rax) # Size: 3
.Ltmp5306:
    00001f40: 	movzbl	0x220(%rsp), %r10d
    00001f49: 	movq	%rbp, %rax
    00001f4c: 	pxor	%xmm1, %xmm1
    00001f50: 	subb	0x221(%rsp), %r10b
    00001f58: 	nopl	(%rax,%rax) # Size: 8
.Ltmp5304:
    00001f60: 	movdqa	(%rax), %xmm0
    00001f64: 	movdqu	0x1(%rax), %xmm3
    00001f69: 	addq	$0x10, %rax
    00001f6d: 	psubb	%xmm3, %xmm0
    00001f71: 	paddb	%xmm0, %xmm0
    00001f75: 	paddb	%xmm0, %xmm1
    00001f79: 	cmpq	%rbx, %rax
    00001f7c: 	jne	.Ltmp5304 # Offset: 8060
    00001f7e: 	movdqa	%xmm1, %xmm0
    00001f82: 	movzbl	0x215e(%rsp), %r13d
    00001f8b: 	movzbl	0x215a(%rsp), %r9d
    00001f94: 	psrldq	$0x8, %xmm0
    00001f99: 	movzbl	0x215c(%rsp), %edi
    00001fa1: 	movzbl	0x215b(%rsp), %r8d
    00001faa: 	paddb	%xmm0, %xmm1
    00001fae: 	pxor	%xmm0, %xmm0
    00001fb2: 	movl	%r13d, %ecx
    00001fb5: 	subb	0x215f(%rsp), %cl
    00001fbc: 	psadbw	%xmm0, %xmm1
    00001fc0: 	addl	%ecx, %r10d
    00001fc3: 	movzbl	0x2158(%rsp), %ecx
    00001fcb: 	movq	0x2150(%rsp), %xmm0
    00001fd4: 	movd	%xmm1, %edx
    00001fd8: 	movzbl	0x215d(%rsp), %esi
    00001fe0: 	movq	0x2151(%rsp), %xmm1
    00001fe9: 	psubb	%xmm1, %xmm0
    00001fed: 	pxor	%xmm1, %xmm1
    00001ff1: 	paddb	%xmm0, %xmm0
    00001ff5: 	movdqa	%xmm0, %xmm5
    00001ff9: 	psadbw	%xmm1, %xmm5
    00001ffd: 	movq	%xmm5, 0xa0(%rsp)
    00002006: 	movq	%xmm5, %rax
    0000200b: 	movl	%eax, %r11d
    0000200e: 	movzbl	0x2159(%rsp), %eax
    00002016: 	addl	%edx, %r11d
    00002019: 	subl	%eax, %ecx
    0000201b: 	subl	%r9d, %eax
    0000201e: 	subl	%r8d, %r9d
    00002021: 	subl	%edi, %r8d
    00002024: 	addl	%r10d, %ecx
    00002027: 	subl	%esi, %edi
    00002029: 	subl	%r13d, %esi
    0000202c: 	addl	%ecx, %eax
    0000202e: 	addl	%r9d, %eax
    00002031: 	addl	%r8d, %eax
    00002034: 	addl	%eax, %edi
    00002036: 	addl	%edi, %esi
    00002038: 	leal	(%r11,%rsi,2), %esi
    0000203c: 	testb	%sil, %sil
    0000203f: 	jne	.Ltmp5305 # Offset: 8255
.Ltmp5430:
    00002045: 	addl	$0x1, %r12d
    00002049: 	cmpl	%r14d, %r12d
    0000204c: 	jl	.Ltmp5306 # Offset: 8268
.Ltmp5303:
    00002052: 	movq	%r15, %rsi
    00002055: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000205c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 8284
    00002061: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002068: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000206f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002076: 	je	.Ltmp5307 # Offset: 8310
.Ltmp5465:
    0000207c: 	movq	-0x20(%rax), %r12
    00002080: 	callq	clock@PLT # Offset: 8320
    00002085: 	pxor	%xmm0, %xmm0
    00002089: 	movq	%rax, end_time(%rip)
    00002090: 	movq	%r12, %rdi
    00002093: 	subq	start_time(%rip), %rax
    0000209a: 	cvtsi2sd	%rax, %xmm0
    0000209f: 	divsd	DATAat0x4d640(%rip), %xmm0
    000020a7: 	callq	_Z13record_resultdPKc # Offset: 8359
    000020ac: 	movq	0x200(%rsp), %rdi
    000020b4: 	cmpq	(%rsp), %rdi
    000020b8: 	je	.Ltmp5308 # Offset: 8376
    000020ba: 	movq	0x210(%rsp), %rax
    000020c2: 	leaq	0x1(%rax), %rsi
    000020c6: 	callq	_ZdlPvm@PLT # Offset: 8390
.Ltmp5308:
    000020cb: 	movq	0x8(%rsp), %rsi
    000020d0: 	leaq	DATAat0x4d37e(%rip), %rdx
    000020d7: 	movq	%r15, %rdi
    000020da: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8410
    000020df: 	callq	clock@PLT # Offset: 8415
    000020e4: 	leaq	0x2150(%rsp), %rbx
    000020ec: 	movl	$0x0, 0x14(%rsp)
    000020f4: 	movq	%rax, start_time(%rip)
    000020fb: 	movl	iterations(%rip), %eax
    00002101: 	movl	%eax, 0x24(%rsp)
    00002105: 	testl	%eax, %eax
    00002107: 	jle	.Ltmp5309 # Offset: 8455
    0000210d: 	nopl	(%rax) # Size: 3
.Ltmp5312:
    00002110: 	movzbl	0x220(%rsp), %eax
    00002118: 	pxor	%xmm1, %xmm1
    0000211c: 	movzbl	0x221(%rsp), %r12d
    00002125: 	movl	%eax, %r9d
    00002128: 	divb	%r12b
    0000212b: 	movzbl	%r9b, %edx
    0000212f: 	addb	0x23(%rsp), %al
    00002133: 	movzbl	%al, %eax
    00002136: 	leal	(%rdx,%rax,2), %edi
    00002139: 	movzbl	%r12b, %edx
    0000213d: 	movl	%edi, 0x18(%rsp)
    00002141: 	leal	(%rdx,%rax,2), %r13d
    00002145: 	movq	%rbp, %rax
    00002148: 	nopl	(%rax,%rax) # Size: 8
.Ltmp5310:
    00002150: 	movdqa	(%rax), %xmm0
    00002154: 	movdqu	0x1(%rax), %xmm4
    00002159: 	addq	$0x10, %rax
    0000215d: 	psubb	%xmm4, %xmm0
    00002161: 	paddb	%xmm0, %xmm0
    00002165: 	paddb	%xmm0, %xmm1
    00002169: 	cmpq	%rbx, %rax
    0000216c: 	jne	.Ltmp5310 # Offset: 8556
    0000216e: 	movdqa	%xmm1, %xmm0
    00002172: 	movzbl	0x2159(%rsp), %edi
    0000217a: 	subl	%r12d, %r9d
    0000217d: 	movzbl	0x2158(%rsp), %r11d
    00002186: 	psrldq	$0x8, %xmm0
    0000218b: 	movzbl	0x215a(%rsp), %esi
    00002193: 	movzbl	0x215b(%rsp), %ecx
    0000219b: 	movzbl	0x215e(%rsp), %r10d
    000021a4: 	paddb	%xmm0, %xmm1
    000021a8: 	subl	%edi, %r11d
    000021ab: 	pxor	%xmm0, %xmm0
    000021af: 	psadbw	%xmm0, %xmm1
    000021b3: 	subl	%esi, %edi
    000021b5: 	subl	%ecx, %esi
    000021b7: 	movq	0x2150(%rsp), %xmm0
    000021c0: 	movd	%xmm1, %edx
    000021c4: 	movq	0x2151(%rsp), %xmm1
    000021cd: 	subb	0x215f(%rsp), %r10b
    000021d5: 	movzbl	0x215d(%rsp), %r8d
    000021de: 	addl	%r11d, %r10d
    000021e1: 	psubb	%xmm1, %xmm0
    000021e5: 	pxor	%xmm1, %xmm1
    000021e9: 	addl	%r10d, %edi
    000021ec: 	addl	%edi, %esi
    000021ee: 	paddb	%xmm0, %xmm0
    000021f2: 	movdqa	%xmm0, %xmm6
    000021f6: 	psadbw	%xmm1, %xmm6
    000021fa: 	movq	%xmm6, 0x98(%rsp)
    00002203: 	movq	%xmm6, %rax
    00002208: 	movl	%eax, %r14d
    0000220b: 	movzbl	0x215c(%rsp), %eax
    00002213: 	subl	%eax, %ecx
    00002215: 	subl	%r8d, %eax
    00002218: 	subb	0x215e(%rsp), %r8b
    00002220: 	addl	%esi, %ecx
    00002222: 	addl	%ecx, %eax
    00002224: 	addl	%r8d, %eax
    00002227: 	leal	(%r9,%rax,2), %eax
    0000222b: 	addb	0x18(%rsp), %al
    0000222f: 	subl	%r13d, %eax
    00002232: 	addl	%edx, %eax
    00002234: 	addb	%r14b, %al
    00002237: 	jne	.Ltmp5311 # Offset: 8759
.Ltmp5429:
    0000223d: 	addl	$0x1, 0x14(%rsp)
    00002242: 	movl	0x14(%rsp), %eax
    00002246: 	cmpl	0x24(%rsp), %eax
    0000224a: 	jl	.Ltmp5312 # Offset: 8778
.Ltmp5309:
    00002250: 	movq	%r15, %rsi
    00002253: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000225a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 8794
    0000225f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002266: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000226d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002274: 	je	.Ltmp5313 # Offset: 8820
.Ltmp5464:
    0000227a: 	movq	-0x20(%rax), %r12
    0000227e: 	callq	clock@PLT # Offset: 8830
    00002283: 	pxor	%xmm0, %xmm0
    00002287: 	movq	%rax, end_time(%rip)
    0000228e: 	movq	%r12, %rdi
    00002291: 	subq	start_time(%rip), %rax
    00002298: 	cvtsi2sd	%rax, %xmm0
    0000229d: 	divsd	DATAat0x4d640(%rip), %xmm0
    000022a5: 	callq	_Z13record_resultdPKc # Offset: 8869
    000022aa: 	movq	0x200(%rsp), %rdi
    000022b2: 	cmpq	(%rsp), %rdi
    000022b6: 	je	.Ltmp5314 # Offset: 8886
    000022b8: 	movq	0x210(%rsp), %rax
    000022c0: 	leaq	0x1(%rax), %rsi
    000022c4: 	callq	_ZdlPvm@PLT # Offset: 8900
.Ltmp5314:
    000022c9: 	movq	0x8(%rsp), %rsi
    000022ce: 	leaq	DATAat0x4d38c(%rip), %rdx
    000022d5: 	movq	%r15, %rdi
    000022d8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8920
    000022dd: 	callq	clock@PLT # Offset: 8925
    000022e2: 	movl	iterations(%rip), %r14d
    000022e9: 	xorl	%r12d, %r12d
    000022ec: 	leaq	0x2150(%rsp), %rbx
    000022f4: 	movq	%rax, start_time(%rip)
    000022fb: 	testl	%r14d, %r14d
    000022fe: 	jle	.Ltmp5315 # Offset: 8958
    00002304: 	nopl	(%rax) # Size: 4
.Ltmp5318:
    00002308: 	movzbl	0x220(%rsp), %r10d
    00002311: 	movq	%rbp, %rax
    00002314: 	pxor	%xmm1, %xmm1
    00002318: 	subb	0x221(%rsp), %r10b
.Ltmp5316:
    00002320: 	movdqa	(%rax), %xmm0
    00002324: 	movdqu	0x1(%rax), %xmm5
    00002329: 	addq	$0x10, %rax
    0000232d: 	psubb	%xmm5, %xmm0
    00002331: 	paddb	%xmm0, %xmm0
    00002335: 	paddb	%xmm0, %xmm1
    00002339: 	cmpq	%rbx, %rax
    0000233c: 	jne	.Ltmp5316 # Offset: 9020
    0000233e: 	movdqa	%xmm1, %xmm0
    00002342: 	movzbl	0x215e(%rsp), %r13d
    0000234b: 	movzbl	0x215a(%rsp), %r9d
    00002354: 	psrldq	$0x8, %xmm0
    00002359: 	movzbl	0x215c(%rsp), %edi
    00002361: 	movzbl	0x215b(%rsp), %r8d
    0000236a: 	paddb	%xmm0, %xmm1
    0000236e: 	pxor	%xmm0, %xmm0
    00002372: 	movl	%r13d, %ecx
    00002375: 	subb	0x215f(%rsp), %cl
    0000237c: 	psadbw	%xmm0, %xmm1
    00002380: 	addl	%ecx, %r10d
    00002383: 	movzbl	0x2158(%rsp), %ecx
    0000238b: 	movq	0x2150(%rsp), %xmm0
    00002394: 	movd	%xmm1, %edx
    00002398: 	movzbl	0x215d(%rsp), %esi
    000023a0: 	movq	0x2151(%rsp), %xmm1
    000023a9: 	psubb	%xmm1, %xmm0
    000023ad: 	pxor	%xmm1, %xmm1
    000023b1: 	paddb	%xmm0, %xmm0
    000023b5: 	movdqa	%xmm0, %xmm7
    000023b9: 	psadbw	%xmm1, %xmm7
    000023bd: 	movq	%xmm7, 0x90(%rsp)
    000023c6: 	movq	%xmm7, %rax
    000023cb: 	movl	%eax, %r11d
    000023ce: 	movzbl	0x2159(%rsp), %eax
    000023d6: 	addl	%edx, %r11d
    000023d9: 	subl	%eax, %ecx
    000023db: 	subl	%r9d, %eax
    000023de: 	subl	%r8d, %r9d
    000023e1: 	subl	%edi, %r8d
    000023e4: 	addl	%r10d, %ecx
    000023e7: 	subl	%esi, %edi
    000023e9: 	subl	%r13d, %esi
    000023ec: 	addl	%ecx, %eax
    000023ee: 	addl	%r9d, %eax
    000023f1: 	addl	%r8d, %eax
    000023f4: 	addl	%eax, %edi
    000023f6: 	addl	%edi, %esi
    000023f8: 	leal	(%r11,%rsi,2), %esi
    000023fc: 	testb	%sil, %sil
    000023ff: 	jne	.Ltmp5317 # Offset: 9215
.Ltmp5428:
    00002405: 	addl	$0x1, %r12d
    00002409: 	cmpl	%r14d, %r12d
    0000240c: 	jl	.Ltmp5318 # Offset: 9228
.Ltmp5315:
    00002412: 	movq	%r15, %rsi
    00002415: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000241c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 9244
    00002421: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002428: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000242f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002436: 	je	.Ltmp5319 # Offset: 9270
.Ltmp5463:
    0000243c: 	movq	-0x20(%rax), %r12
    00002440: 	callq	clock@PLT # Offset: 9280
    00002445: 	pxor	%xmm0, %xmm0
    00002449: 	movq	%rax, end_time(%rip)
    00002450: 	movq	%r12, %rdi
    00002453: 	subq	start_time(%rip), %rax
    0000245a: 	cvtsi2sd	%rax, %xmm0
    0000245f: 	divsd	DATAat0x4d640(%rip), %xmm0
    00002467: 	callq	_Z13record_resultdPKc # Offset: 9319
    0000246c: 	movq	0x200(%rsp), %rdi
    00002474: 	cmpq	(%rsp), %rdi
    00002478: 	je	.Ltmp5320 # Offset: 9336
    0000247a: 	movq	0x210(%rsp), %rax
    00002482: 	leaq	0x1(%rax), %rsi
    00002486: 	callq	_ZdlPvm@PLT # Offset: 9350
.Ltmp5320:
    0000248b: 	movq	0x8(%rsp), %rsi
    00002490: 	leaq	DATAat0x4d3a0(%rip), %rdx
    00002497: 	movq	%r15, %rdi
    0000249a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9370
    0000249f: 	movl	0x1c(%rsp), %edx
    000024a3: 	movq	%r15, %rcx
    000024a6: 	movl	$0x1f40, %esi
    000024ab: 	movq	%rbp, %rdi
    000024ae: 	callq	_Z9test_CSE2Ih14custom_cse_mixIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9390
    000024b3: 	movq	0x200(%rsp), %rdi
    000024bb: 	cmpq	(%rsp), %rdi
    000024bf: 	je	.Ltmp5321 # Offset: 9407
    000024c1: 	movq	0x210(%rsp), %rax
    000024c9: 	leaq	0x1(%rax), %rsi
    000024cd: 	callq	_ZdlPvm@PLT # Offset: 9421
.Ltmp5321:
    000024d2: 	movq	0x8(%rsp), %rbx
    000024d7: 	leaq	0x1a0(%rsp), %rdi
    000024df: 	leaq	DATAat0x4d3ab(%rip), %rdx
    000024e6: 	movq	%rbx, %rsi
    000024e9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9449
    000024ee: 	movl	iterations(%rip), %edx
    000024f4: 	xorl	%r8d, %r8d
    000024f7: 	xorl	%ecx, %ecx
    000024f9: 	movl	$0x1f40, %esi
    000024fe: 	movq	0x1a0(%rsp), %rdi
    00002506: 	callq	_Z9summarizePKciiii # Offset: 9478
    0000250b: 	leaq	DATAat0x4d3b2(%rip), %rdx
    00002512: 	movq	%rbx, %rsi
    00002515: 	movq	%r15, %rdi
    00002518: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9496
    0000251d: 	callq	clock@PLT # Offset: 9501
    00002522: 	movl	iterations(%rip), %r14d
    00002529: 	xorl	%r12d, %r12d
    0000252c: 	leaq	0x2150(%rsp), %rbx
    00002534: 	movq	%rax, start_time(%rip)
    0000253b: 	testl	%r14d, %r14d
    0000253e: 	jle	.Ltmp5322 # Offset: 9534
    00002544: 	nopl	(%rax) # Size: 4
.Ltmp5325:
    00002548: 	movzbl	0x220(%rsp), %r10d
    00002551: 	movq	%rbp, %rax
    00002554: 	pxor	%xmm1, %xmm1
    00002558: 	subb	0x221(%rsp), %r10b
.Ltmp5323:
    00002560: 	movdqa	(%rax), %xmm0
    00002564: 	movdqu	0x1(%rax), %xmm6
    00002569: 	addq	$0x10, %rax
    0000256d: 	psubb	%xmm6, %xmm0
    00002571: 	paddb	%xmm0, %xmm0
    00002575: 	paddb	%xmm0, %xmm0
    00002579: 	paddb	%xmm0, %xmm1
    0000257d: 	cmpq	%rbx, %rax
    00002580: 	jne	.Ltmp5323 # Offset: 9600
    00002582: 	movdqa	%xmm1, %xmm0
    00002586: 	movzbl	0x215e(%rsp), %r13d
    0000258f: 	movzbl	0x215a(%rsp), %r9d
    00002598: 	psrldq	$0x8, %xmm0
    0000259d: 	movzbl	0x215c(%rsp), %edi
    000025a5: 	movzbl	0x215b(%rsp), %r8d
    000025ae: 	paddb	%xmm0, %xmm1
    000025b2: 	pxor	%xmm0, %xmm0
    000025b6: 	movl	%r13d, %ecx
    000025b9: 	subb	0x215f(%rsp), %cl
    000025c0: 	psadbw	%xmm0, %xmm1
    000025c4: 	addl	%ecx, %r10d
    000025c7: 	movzbl	0x2158(%rsp), %ecx
    000025cf: 	movq	0x2150(%rsp), %xmm0
    000025d8: 	movd	%xmm1, %edx
    000025dc: 	movzbl	0x215d(%rsp), %esi
    000025e4: 	movq	0x2151(%rsp), %xmm1
    000025ed: 	psubb	%xmm1, %xmm0
    000025f1: 	pxor	%xmm1, %xmm1
    000025f5: 	paddb	%xmm0, %xmm0
    000025f9: 	paddb	%xmm0, %xmm0
    000025fd: 	movdqa	%xmm0, %xmm2
    00002601: 	psadbw	%xmm1, %xmm2
    00002605: 	movq	%xmm2, 0x88(%rsp)
    0000260e: 	movq	%xmm2, %rax
    00002613: 	movl	%eax, %r11d
    00002616: 	movzbl	0x2159(%rsp), %eax
    0000261e: 	addl	%edx, %r11d
    00002621: 	subl	%eax, %ecx
    00002623: 	subl	%r9d, %eax
    00002626: 	subl	%r8d, %r9d
    00002629: 	subl	%edi, %r8d
    0000262c: 	addl	%r10d, %ecx
    0000262f: 	subl	%esi, %edi
    00002631: 	subl	%r13d, %esi
    00002634: 	addl	%ecx, %eax
    00002636: 	addl	%r9d, %eax
    00002639: 	addl	%r8d, %eax
    0000263c: 	addl	%eax, %edi
    0000263e: 	addl	%edi, %esi
    00002640: 	leal	(%r11,%rsi,4), %esi
    00002644: 	testb	%sil, %sil
    00002647: 	jne	.Ltmp5324 # Offset: 9799
.Ltmp5427:
    0000264d: 	addl	$0x1, %r12d
    00002651: 	cmpl	%r14d, %r12d
    00002654: 	jl	.Ltmp5325 # Offset: 9812
.Ltmp5322:
    0000265a: 	movq	%r15, %rsi
    0000265d: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002664: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 9828
    00002669: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002670: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00002677: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000267e: 	je	.Ltmp5326 # Offset: 9854
.Ltmp5462:
    00002684: 	movq	-0x20(%rax), %r12
    00002688: 	callq	clock@PLT # Offset: 9864
    0000268d: 	pxor	%xmm0, %xmm0
    00002691: 	movq	%rax, end_time(%rip)
    00002698: 	movq	%r12, %rdi
    0000269b: 	subq	start_time(%rip), %rax
    000026a2: 	cvtsi2sd	%rax, %xmm0
    000026a7: 	divsd	DATAat0x4d640(%rip), %xmm0
    000026af: 	callq	_Z13record_resultdPKc # Offset: 9903
    000026b4: 	movq	0x200(%rsp), %rdi
    000026bc: 	cmpq	(%rsp), %rdi
    000026c0: 	je	.Ltmp5327 # Offset: 9920
    000026c2: 	movq	0x210(%rsp), %rax
    000026ca: 	leaq	0x1(%rax), %rsi
    000026ce: 	callq	_ZdlPvm@PLT # Offset: 9934
.Ltmp5327:
    000026d3: 	movq	0x8(%rsp), %rsi
    000026d8: 	leaq	DATAat0x4d3c1(%rip), %rdx
    000026df: 	movq	%r15, %rdi
    000026e2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9954
    000026e7: 	callq	clock@PLT # Offset: 9959
    000026ec: 	movl	iterations(%rip), %r14d
    000026f3: 	xorl	%r12d, %r12d
    000026f6: 	leaq	0x2150(%rsp), %rbx
    000026fe: 	movq	%rax, start_time(%rip)
    00002705: 	testl	%r14d, %r14d
    00002708: 	jle	.Ltmp5328 # Offset: 9992
    0000270e: 	nop # Size: 2
.Ltmp5331:
    00002710: 	movzbl	0x220(%rsp), %r10d
    00002719: 	movq	%rbp, %rax
    0000271c: 	pxor	%xmm1, %xmm1
    00002720: 	subb	0x221(%rsp), %r10b
    00002728: 	nopl	(%rax,%rax) # Size: 8
.Ltmp5329:
    00002730: 	movdqa	(%rax), %xmm0
    00002734: 	movdqu	0x1(%rax), %xmm7
    00002739: 	addq	$0x10, %rax
    0000273d: 	psubb	%xmm7, %xmm0
    00002741: 	paddb	%xmm0, %xmm0
    00002745: 	paddb	%xmm0, %xmm0
    00002749: 	paddb	%xmm0, %xmm1
    0000274d: 	cmpq	%rbx, %rax
    00002750: 	jne	.Ltmp5329 # Offset: 10064
    00002752: 	movdqa	%xmm1, %xmm0
    00002756: 	movzbl	0x215e(%rsp), %r13d
    0000275f: 	movzbl	0x215a(%rsp), %r9d
    00002768: 	psrldq	$0x8, %xmm0
    0000276d: 	movzbl	0x215c(%rsp), %edi
    00002775: 	movzbl	0x215b(%rsp), %r8d
    0000277e: 	paddb	%xmm0, %xmm1
    00002782: 	pxor	%xmm0, %xmm0
    00002786: 	movl	%r13d, %ecx
    00002789: 	subb	0x215f(%rsp), %cl
    00002790: 	psadbw	%xmm0, %xmm1
    00002794: 	addl	%ecx, %r10d
    00002797: 	movzbl	0x2158(%rsp), %ecx
    0000279f: 	movq	0x2150(%rsp), %xmm0
    000027a8: 	movd	%xmm1, %edx
    000027ac: 	movzbl	0x215d(%rsp), %esi
    000027b4: 	movq	0x2151(%rsp), %xmm1
    000027bd: 	psubb	%xmm1, %xmm0
    000027c1: 	pxor	%xmm1, %xmm1
    000027c5: 	paddb	%xmm0, %xmm0
    000027c9: 	paddb	%xmm0, %xmm0
    000027cd: 	movdqa	%xmm0, %xmm3
    000027d1: 	psadbw	%xmm1, %xmm3
    000027d5: 	movq	%xmm3, 0x80(%rsp)
    000027de: 	movq	%xmm3, %rax
    000027e3: 	movl	%eax, %r11d
    000027e6: 	movzbl	0x2159(%rsp), %eax
    000027ee: 	addl	%edx, %r11d
    000027f1: 	subl	%eax, %ecx
    000027f3: 	subl	%r9d, %eax
    000027f6: 	subl	%r8d, %r9d
    000027f9: 	subl	%edi, %r8d
    000027fc: 	addl	%r10d, %ecx
    000027ff: 	subl	%esi, %edi
    00002801: 	subl	%r13d, %esi
    00002804: 	addl	%ecx, %eax
    00002806: 	addl	%r9d, %eax
    00002809: 	addl	%r8d, %eax
    0000280c: 	addl	%eax, %edi
    0000280e: 	addl	%edi, %esi
    00002810: 	leal	(%r11,%rsi,4), %esi
    00002814: 	testb	%sil, %sil
    00002817: 	jne	.Ltmp5330 # Offset: 10263
.Ltmp5426:
    0000281d: 	addl	$0x1, %r12d
    00002821: 	cmpl	%r14d, %r12d
    00002824: 	jl	.Ltmp5331 # Offset: 10276
.Ltmp5328:
    0000282a: 	movq	%r15, %rsi
    0000282d: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002834: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 10292
    00002839: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002840: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00002847: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000284e: 	je	.Ltmp5332 # Offset: 10318
.Ltmp5461:
    00002854: 	movq	-0x20(%rax), %r12
    00002858: 	callq	clock@PLT # Offset: 10328
    0000285d: 	pxor	%xmm0, %xmm0
    00002861: 	movq	%rax, end_time(%rip)
    00002868: 	movq	%r12, %rdi
    0000286b: 	subq	start_time(%rip), %rax
    00002872: 	cvtsi2sd	%rax, %xmm0
    00002877: 	divsd	DATAat0x4d640(%rip), %xmm0
    0000287f: 	callq	_Z13record_resultdPKc # Offset: 10367
    00002884: 	movq	0x200(%rsp), %rdi
    0000288c: 	cmpq	(%rsp), %rdi
    00002890: 	je	.Ltmp5333 # Offset: 10384
    00002892: 	movq	0x210(%rsp), %rax
    0000289a: 	leaq	0x1(%rax), %rsi
    0000289e: 	callq	_ZdlPvm@PLT # Offset: 10398
.Ltmp5333:
    000028a3: 	movq	0x8(%rsp), %rsi
    000028a8: 	leaq	DATAat0x4d3d5(%rip), %rdx
    000028af: 	movq	%r15, %rdi
    000028b2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10418
    000028b7: 	movl	0x1c(%rsp), %edx
    000028bb: 	movq	%r15, %rcx
    000028be: 	movl	$0x1f40, %esi
    000028c3: 	movq	%rbp, %rdi
    000028c6: 	callq	_Z20test_CSE4_add_inlineIh14custom_cse_addIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 10438
    000028cb: 	movq	0x200(%rsp), %rdi
    000028d3: 	cmpq	(%rsp), %rdi
    000028d7: 	je	.Ltmp5334 # Offset: 10455
    000028d9: 	movq	0x210(%rsp), %rax
    000028e1: 	leaq	0x1(%rax), %rsi
    000028e5: 	callq	_ZdlPvm@PLT # Offset: 10469
.Ltmp5334:
    000028ea: 	movq	0x8(%rsp), %rsi
    000028ef: 	leaq	DATAat0x4d3e7(%rip), %rdx
    000028f6: 	movq	%r15, %rdi
    000028f9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10489
    000028fe: 	movl	0x1c(%rsp), %edx
    00002902: 	movq	%r15, %rcx
    00002905: 	movl	$0x1f40, %esi
    0000290a: 	movq	%rbp, %rdi
    0000290d: 	callq	_Z28test_CSE4_add_inline_flippedIh14custom_cse_addIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 10509
    00002912: 	movq	0x200(%rsp), %rdi
    0000291a: 	cmpq	(%rsp), %rdi
    0000291e: 	je	.Ltmp5335 # Offset: 10526
    00002920: 	movq	0x210(%rsp), %rax
    00002928: 	leaq	0x1(%rax), %rsi
    0000292c: 	callq	_ZdlPvm@PLT # Offset: 10540
.Ltmp5335:
    00002931: 	movq	0x8(%rsp), %rsi
    00002936: 	leaq	DATAat0x4d401(%rip), %rdx
    0000293d: 	movq	%r15, %rdi
    00002940: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10560
    00002945: 	movl	0x1c(%rsp), %edx
    00002949: 	movq	%r15, %rcx
    0000294c: 	movl	$0x1f40, %esi
    00002951: 	movq	%rbp, %rdi
    00002954: 	callq	_Z9test_CSE4Ih14custom_cse_addIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 10580
    00002959: 	movq	0x200(%rsp), %rdi
    00002961: 	cmpq	(%rsp), %rdi
    00002965: 	je	.Ltmp5336 # Offset: 10597
    00002967: 	movq	0x210(%rsp), %rax
    0000296f: 	leaq	0x1(%rax), %rsi
    00002973: 	callq	_ZdlPvm@PLT # Offset: 10611
.Ltmp5336:
    00002978: 	movq	0x8(%rsp), %rsi
    0000297d: 	leaq	DATAat0x4d40c(%rip), %rdx
    00002984: 	movq	%r15, %rdi
    00002987: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10631
    0000298c: 	callq	clock@PLT # Offset: 10636
    00002991: 	movl	iterations(%rip), %r14d
    00002998: 	xorl	%r12d, %r12d
    0000299b: 	leaq	0x2150(%rsp), %rbx
    000029a3: 	movq	%rax, start_time(%rip)
    000029aa: 	testl	%r14d, %r14d
    000029ad: 	jle	.Ltmp5337 # Offset: 10669
    000029b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5340:
    000029b8: 	movzbl	0x220(%rsp), %r10d
    000029c1: 	movq	%rbp, %rax
    000029c4: 	pxor	%xmm1, %xmm1
    000029c8: 	subb	0x221(%rsp), %r10b
.Ltmp5338:
    000029d0: 	movdqa	(%rax), %xmm0
    000029d4: 	movdqu	0x1(%rax), %xmm2
    000029d9: 	addq	$0x10, %rax
    000029dd: 	psubb	%xmm2, %xmm0
    000029e1: 	paddb	%xmm0, %xmm0
    000029e5: 	paddb	%xmm0, %xmm0
    000029e9: 	paddb	%xmm0, %xmm1
    000029ed: 	cmpq	%rbx, %rax
    000029f0: 	jne	.Ltmp5338 # Offset: 10736
    000029f2: 	movdqa	%xmm1, %xmm0
    000029f6: 	movzbl	0x215e(%rsp), %r13d
    000029ff: 	movzbl	0x215a(%rsp), %r9d
    00002a08: 	psrldq	$0x8, %xmm0
    00002a0d: 	movzbl	0x215c(%rsp), %edi
    00002a15: 	movzbl	0x215b(%rsp), %r8d
    00002a1e: 	paddb	%xmm0, %xmm1
    00002a22: 	pxor	%xmm0, %xmm0
    00002a26: 	movl	%r13d, %ecx
    00002a29: 	subb	0x215f(%rsp), %cl
    00002a30: 	psadbw	%xmm0, %xmm1
    00002a34: 	addl	%ecx, %r10d
    00002a37: 	movzbl	0x2158(%rsp), %ecx
    00002a3f: 	movq	0x2150(%rsp), %xmm0
    00002a48: 	movd	%xmm1, %edx
    00002a4c: 	movzbl	0x215d(%rsp), %esi
    00002a54: 	movq	0x2151(%rsp), %xmm1
    00002a5d: 	psubb	%xmm1, %xmm0
    00002a61: 	pxor	%xmm1, %xmm1
    00002a65: 	paddb	%xmm0, %xmm0
    00002a69: 	paddb	%xmm0, %xmm0
    00002a6d: 	movdqa	%xmm0, %xmm4
    00002a71: 	psadbw	%xmm1, %xmm4
    00002a75: 	movq	%xmm4, %rax
    00002a7a: 	movq	%xmm4, 0x78(%rsp)
    00002a80: 	movl	%eax, %r11d
    00002a83: 	movzbl	0x2159(%rsp), %eax
    00002a8b: 	addl	%edx, %r11d
    00002a8e: 	subl	%eax, %ecx
    00002a90: 	subl	%r9d, %eax
    00002a93: 	subl	%r8d, %r9d
    00002a96: 	subl	%edi, %r8d
    00002a99: 	addl	%r10d, %ecx
    00002a9c: 	subl	%esi, %edi
    00002a9e: 	subl	%r13d, %esi
    00002aa1: 	addl	%ecx, %eax
    00002aa3: 	addl	%r9d, %eax
    00002aa6: 	addl	%r8d, %eax
    00002aa9: 	addl	%eax, %edi
    00002aab: 	addl	%edi, %esi
    00002aad: 	leal	(%r11,%rsi,4), %esi
    00002ab1: 	testb	%sil, %sil
    00002ab4: 	jne	.Ltmp5339 # Offset: 10932
.Ltmp5425:
    00002aba: 	addl	$0x1, %r12d
    00002abe: 	cmpl	%r14d, %r12d
    00002ac1: 	jl	.Ltmp5340 # Offset: 10945
.Ltmp5337:
    00002ac7: 	movq	%r15, %rsi
    00002aca: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002ad1: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 10961
    00002ad6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002add: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00002ae4: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002aeb: 	je	.Ltmp5341 # Offset: 10987
.Ltmp5460:
    00002af1: 	movq	-0x20(%rax), %r12
    00002af5: 	callq	clock@PLT # Offset: 10997
    00002afa: 	pxor	%xmm0, %xmm0
    00002afe: 	movq	%rax, end_time(%rip)
    00002b05: 	movq	%r12, %rdi
    00002b08: 	subq	start_time(%rip), %rax
    00002b0f: 	cvtsi2sd	%rax, %xmm0
    00002b14: 	divsd	DATAat0x4d640(%rip), %xmm0
    00002b1c: 	callq	_Z13record_resultdPKc # Offset: 11036
    00002b21: 	movq	0x200(%rsp), %rdi
    00002b29: 	cmpq	(%rsp), %rdi
    00002b2d: 	je	.Ltmp5342 # Offset: 11053
    00002b2f: 	movq	0x210(%rsp), %rax
    00002b37: 	leaq	0x1(%rax), %rsi
    00002b3b: 	callq	_ZdlPvm@PLT # Offset: 11067
.Ltmp5342:
    00002b40: 	movq	0x8(%rsp), %rsi
    00002b45: 	leaq	DATAat0x4d425(%rip), %rdx
    00002b4c: 	movq	%r15, %rdi
    00002b4f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11087
    00002b54: 	movl	0x1c(%rsp), %edx
    00002b58: 	movq	%r15, %rcx
    00002b5b: 	movl	$0x1f40, %esi
    00002b60: 	movq	%rbp, %rdi
    00002b63: 	callq	_Z9test_CSE4Ih14custom_cse_subIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 11107
    00002b68: 	movq	0x200(%rsp), %rdi
    00002b70: 	cmpq	(%rsp), %rdi
    00002b74: 	je	.Ltmp5343 # Offset: 11124
    00002b76: 	movq	0x210(%rsp), %rax
    00002b7e: 	leaq	0x1(%rax), %rsi
    00002b82: 	callq	_ZdlPvm@PLT # Offset: 11138
.Ltmp5343:
    00002b87: 	movq	0x8(%rsp), %rsi
    00002b8c: 	leaq	DATAat0x4d435(%rip), %rdx
    00002b93: 	movq	%r15, %rdi
    00002b96: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11158
    00002b9b: 	callq	clock@PLT # Offset: 11163
    00002ba0: 	movl	iterations(%rip), %r14d
    00002ba7: 	xorl	%r12d, %r12d
    00002baa: 	leaq	0x2150(%rsp), %rbx
    00002bb2: 	movq	%rax, start_time(%rip)
    00002bb9: 	testl	%r14d, %r14d
    00002bbc: 	jle	.Ltmp5344 # Offset: 11196
    00002bc2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5347:
    00002bc8: 	movzbl	0x220(%rsp), %r10d
    00002bd1: 	movq	%rbp, %rax
    00002bd4: 	pxor	%xmm1, %xmm1
    00002bd8: 	subb	0x221(%rsp), %r10b
.Ltmp5345:
    00002be0: 	movdqa	(%rax), %xmm0
    00002be4: 	movdqu	0x1(%rax), %xmm3
    00002be9: 	addq	$0x10, %rax
    00002bed: 	psubb	%xmm3, %xmm0
    00002bf1: 	paddb	%xmm0, %xmm0
    00002bf5: 	paddb	%xmm0, %xmm0
    00002bf9: 	paddb	%xmm0, %xmm1
    00002bfd: 	cmpq	%rax, %rbx
    00002c00: 	jne	.Ltmp5345 # Offset: 11264
    00002c02: 	movdqa	%xmm1, %xmm0
    00002c06: 	movzbl	0x215e(%rsp), %r13d
    00002c0f: 	movzbl	0x215a(%rsp), %r9d
    00002c18: 	psrldq	$0x8, %xmm0
    00002c1d: 	movzbl	0x215c(%rsp), %edi
    00002c25: 	movzbl	0x215b(%rsp), %r8d
    00002c2e: 	paddb	%xmm0, %xmm1
    00002c32: 	pxor	%xmm0, %xmm0
    00002c36: 	movl	%r13d, %ecx
    00002c39: 	subb	0x215f(%rsp), %cl
    00002c40: 	psadbw	%xmm0, %xmm1
    00002c44: 	addl	%ecx, %r10d
    00002c47: 	movzbl	0x2158(%rsp), %ecx
    00002c4f: 	movq	0x2150(%rsp), %xmm0
    00002c58: 	movd	%xmm1, %edx
    00002c5c: 	movzbl	0x215d(%rsp), %esi
    00002c64: 	movq	0x2151(%rsp), %xmm1
    00002c6d: 	psubb	%xmm1, %xmm0
    00002c71: 	pxor	%xmm1, %xmm1
    00002c75: 	paddb	%xmm0, %xmm0
    00002c79: 	paddb	%xmm0, %xmm0
    00002c7d: 	movdqa	%xmm0, %xmm5
    00002c81: 	psadbw	%xmm1, %xmm5
    00002c85: 	movq	%xmm5, %rax
    00002c8a: 	movq	%xmm5, 0x70(%rsp)
    00002c90: 	movl	%eax, %r11d
    00002c93: 	movzbl	0x2159(%rsp), %eax
    00002c9b: 	addl	%edx, %r11d
    00002c9e: 	subl	%eax, %ecx
    00002ca0: 	subl	%r9d, %eax
    00002ca3: 	subl	%r8d, %r9d
    00002ca6: 	subl	%edi, %r8d
    00002ca9: 	addl	%r10d, %ecx
    00002cac: 	subl	%esi, %edi
    00002cae: 	subl	%r13d, %esi
    00002cb1: 	addl	%ecx, %eax
    00002cb3: 	addl	%r9d, %eax
    00002cb6: 	addl	%r8d, %eax
    00002cb9: 	addl	%eax, %edi
    00002cbb: 	addl	%edi, %esi
    00002cbd: 	leal	(%r11,%rsi,4), %esi
    00002cc1: 	testb	%sil, %sil
    00002cc4: 	jne	.Ltmp5346 # Offset: 11460
.Ltmp5424:
    00002cca: 	addl	$0x1, %r12d
    00002cce: 	cmpl	%r14d, %r12d
    00002cd1: 	jl	.Ltmp5347 # Offset: 11473
.Ltmp5344:
    00002cd7: 	movq	%r15, %rsi
    00002cda: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002ce1: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 11489
    00002ce6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002ced: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00002cf4: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002cfb: 	je	.Ltmp5348 # Offset: 11515
.Ltmp5459:
    00002d01: 	movq	-0x20(%rax), %r12
    00002d05: 	callq	clock@PLT # Offset: 11525
    00002d0a: 	pxor	%xmm0, %xmm0
    00002d0e: 	movq	%rax, end_time(%rip)
    00002d15: 	movq	%r12, %rdi
    00002d18: 	subq	start_time(%rip), %rax
    00002d1f: 	cvtsi2sd	%rax, %xmm0
    00002d24: 	divsd	DATAat0x4d640(%rip), %xmm0
    00002d2c: 	callq	_Z13record_resultdPKc # Offset: 11564
    00002d31: 	movq	0x200(%rsp), %rdi
    00002d39: 	cmpq	(%rsp), %rdi
    00002d3d: 	je	.Ltmp5349 # Offset: 11581
    00002d3f: 	movq	0x210(%rsp), %rax
    00002d47: 	leaq	0x1(%rax), %rsi
    00002d4b: 	callq	_ZdlPvm@PLT # Offset: 11595
.Ltmp5349:
    00002d50: 	movq	0x8(%rsp), %rsi
    00002d55: 	leaq	DATAat0x4d44e(%rip), %rdx
    00002d5c: 	movq	%r15, %rdi
    00002d5f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11615
    00002d64: 	movl	0x1c(%rsp), %edx
    00002d68: 	movq	%r15, %rcx
    00002d6b: 	movl	$0x1f40, %esi
    00002d70: 	movq	%rbp, %rdi
    00002d73: 	callq	_Z9test_CSE4Ih14custom_cse_mulIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 11635
    00002d78: 	movq	0x200(%rsp), %rdi
    00002d80: 	cmpq	(%rsp), %rdi
    00002d84: 	je	.Ltmp5350 # Offset: 11652
    00002d86: 	movq	0x210(%rsp), %rax
    00002d8e: 	leaq	0x1(%rax), %rsi
    00002d92: 	callq	_ZdlPvm@PLT # Offset: 11666
.Ltmp5350:
    00002d97: 	movq	0x8(%rsp), %rsi
    00002d9c: 	leaq	DATAat0x4d45e(%rip), %rdx
    00002da3: 	movq	%r15, %rdi
    00002da6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11686
    00002dab: 	callq	clock@PLT # Offset: 11691
    00002db0: 	movl	iterations(%rip), %r14d
    00002db7: 	xorl	%r12d, %r12d
    00002dba: 	leaq	0x2150(%rsp), %rbx
    00002dc2: 	movq	%rax, start_time(%rip)
    00002dc9: 	testl	%r14d, %r14d
    00002dcc: 	jle	.Ltmp5351 # Offset: 11724
    00002dd2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5354:
    00002dd8: 	movzbl	0x220(%rsp), %r10d
    00002de1: 	movq	%rbp, %rax
    00002de4: 	pxor	%xmm1, %xmm1
    00002de8: 	subb	0x221(%rsp), %r10b
.Ltmp5352:
    00002df0: 	movdqa	(%rax), %xmm0
    00002df4: 	movdqu	0x1(%rax), %xmm4
    00002df9: 	addq	$0x10, %rax
    00002dfd: 	psubb	%xmm4, %xmm0
    00002e01: 	paddb	%xmm0, %xmm0
    00002e05: 	paddb	%xmm0, %xmm0
    00002e09: 	paddb	%xmm0, %xmm1
    00002e0d: 	cmpq	%rbx, %rax
    00002e10: 	jne	.Ltmp5352 # Offset: 11792
    00002e12: 	movdqa	%xmm1, %xmm0
    00002e16: 	movzbl	0x215e(%rsp), %r13d
    00002e1f: 	movzbl	0x215a(%rsp), %r9d
    00002e28: 	psrldq	$0x8, %xmm0
    00002e2d: 	movzbl	0x215c(%rsp), %edi
    00002e35: 	movzbl	0x215b(%rsp), %r8d
    00002e3e: 	paddb	%xmm0, %xmm1
    00002e42: 	pxor	%xmm0, %xmm0
    00002e46: 	movl	%r13d, %ecx
    00002e49: 	subb	0x215f(%rsp), %cl
    00002e50: 	psadbw	%xmm0, %xmm1
    00002e54: 	addl	%ecx, %r10d
    00002e57: 	movzbl	0x2158(%rsp), %ecx
    00002e5f: 	movq	0x2150(%rsp), %xmm0
    00002e68: 	movd	%xmm1, %edx
    00002e6c: 	movzbl	0x215d(%rsp), %esi
    00002e74: 	movq	0x2151(%rsp), %xmm1
    00002e7d: 	psubb	%xmm1, %xmm0
    00002e81: 	pxor	%xmm1, %xmm1
    00002e85: 	paddb	%xmm0, %xmm0
    00002e89: 	paddb	%xmm0, %xmm0
    00002e8d: 	movdqa	%xmm0, %xmm6
    00002e91: 	psadbw	%xmm1, %xmm6
    00002e95: 	movq	%xmm6, %rax
    00002e9a: 	movq	%xmm6, 0x68(%rsp)
    00002ea0: 	movl	%eax, %r11d
    00002ea3: 	movzbl	0x2159(%rsp), %eax
    00002eab: 	addl	%edx, %r11d
    00002eae: 	subl	%eax, %ecx
    00002eb0: 	subl	%r9d, %eax
    00002eb3: 	subl	%r8d, %r9d
    00002eb6: 	subl	%edi, %r8d
    00002eb9: 	addl	%r10d, %ecx
    00002ebc: 	subl	%esi, %edi
    00002ebe: 	subl	%r13d, %esi
    00002ec1: 	addl	%ecx, %eax
    00002ec3: 	addl	%r9d, %eax
    00002ec6: 	addl	%r8d, %eax
    00002ec9: 	addl	%eax, %edi
    00002ecb: 	addl	%edi, %esi
    00002ecd: 	leal	(%r11,%rsi,4), %esi
    00002ed1: 	testb	%sil, %sil
    00002ed4: 	jne	.Ltmp5353 # Offset: 11988
.Ltmp5423:
    00002eda: 	addl	$0x1, %r12d
    00002ede: 	cmpl	%r14d, %r12d
    00002ee1: 	jl	.Ltmp5354 # Offset: 12001
.Ltmp5351:
    00002ee7: 	movq	%r15, %rsi
    00002eea: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00002ef1: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 12017
    00002ef6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00002efd: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00002f04: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00002f0b: 	je	.Ltmp5355 # Offset: 12043
.Ltmp5458:
    00002f11: 	movq	-0x20(%rax), %r12
    00002f15: 	callq	clock@PLT # Offset: 12053
    00002f1a: 	pxor	%xmm0, %xmm0
    00002f1e: 	movq	%rax, end_time(%rip)
    00002f25: 	movq	%r12, %rdi
    00002f28: 	subq	start_time(%rip), %rax
    00002f2f: 	cvtsi2sd	%rax, %xmm0
    00002f34: 	divsd	DATAat0x4d640(%rip), %xmm0
    00002f3c: 	callq	_Z13record_resultdPKc # Offset: 12092
    00002f41: 	movq	0x200(%rsp), %rdi
    00002f49: 	cmpq	(%rsp), %rdi
    00002f4d: 	je	.Ltmp5356 # Offset: 12109
    00002f4f: 	movq	0x210(%rsp), %rax
    00002f57: 	leaq	0x1(%rax), %rsi
    00002f5b: 	callq	_ZdlPvm@PLT # Offset: 12123
.Ltmp5356:
    00002f60: 	movq	0x8(%rsp), %rsi
    00002f65: 	leaq	DATAat0x4d475(%rip), %rdx
    00002f6c: 	movq	%r15, %rdi
    00002f6f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12143
    00002f74: 	movl	0x1c(%rsp), %edx
    00002f78: 	movq	%r15, %rcx
    00002f7b: 	movl	$0x1f40, %esi
    00002f80: 	movq	%rbp, %rdi
    00002f83: 	callq	_Z9test_CSE4Ih14custom_cse_divIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 12163
    00002f88: 	movq	0x200(%rsp), %rdi
    00002f90: 	cmpq	(%rsp), %rdi
    00002f94: 	je	.Ltmp5357 # Offset: 12180
    00002f96: 	movq	0x210(%rsp), %rax
    00002f9e: 	leaq	0x1(%rax), %rsi
    00002fa2: 	callq	_ZdlPvm@PLT # Offset: 12194
.Ltmp5357:
    00002fa7: 	movq	0x8(%rsp), %rsi
    00002fac: 	leaq	DATAat0x4d483(%rip), %rdx
    00002fb3: 	movq	%r15, %rdi
    00002fb6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12214
    00002fbb: 	callq	clock@PLT # Offset: 12219
    00002fc0: 	movl	iterations(%rip), %r14d
    00002fc7: 	xorl	%r12d, %r12d
    00002fca: 	leaq	0x2150(%rsp), %rbx
    00002fd2: 	movq	%rax, start_time(%rip)
    00002fd9: 	testl	%r14d, %r14d
    00002fdc: 	jle	.Ltmp5358 # Offset: 12252
    00002fe2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5361:
    00002fe8: 	movzbl	0x220(%rsp), %r10d
    00002ff1: 	movq	%rbp, %rax
    00002ff4: 	pxor	%xmm1, %xmm1
    00002ff8: 	subb	0x221(%rsp), %r10b
.Ltmp5359:
    00003000: 	movdqa	(%rax), %xmm0
    00003004: 	movdqu	0x1(%rax), %xmm5
    00003009: 	addq	$0x10, %rax
    0000300d: 	psubb	%xmm5, %xmm0
    00003011: 	paddb	%xmm0, %xmm0
    00003015: 	paddb	%xmm0, %xmm0
    00003019: 	paddb	%xmm0, %xmm1
    0000301d: 	cmpq	%rax, %rbx
    00003020: 	jne	.Ltmp5359 # Offset: 12320
    00003022: 	movdqa	%xmm1, %xmm0
    00003026: 	movzbl	0x215e(%rsp), %r13d
    0000302f: 	movzbl	0x215a(%rsp), %r9d
    00003038: 	psrldq	$0x8, %xmm0
    0000303d: 	movzbl	0x215c(%rsp), %edi
    00003045: 	movzbl	0x215b(%rsp), %r8d
    0000304e: 	paddb	%xmm0, %xmm1
    00003052: 	pxor	%xmm0, %xmm0
    00003056: 	movl	%r13d, %ecx
    00003059: 	subb	0x215f(%rsp), %cl
    00003060: 	psadbw	%xmm0, %xmm1
    00003064: 	addl	%ecx, %r10d
    00003067: 	movzbl	0x2158(%rsp), %ecx
    0000306f: 	movq	0x2150(%rsp), %xmm0
    00003078: 	movd	%xmm1, %edx
    0000307c: 	movzbl	0x215d(%rsp), %esi
    00003084: 	movq	0x2151(%rsp), %xmm1
    0000308d: 	psubb	%xmm1, %xmm0
    00003091: 	pxor	%xmm1, %xmm1
    00003095: 	paddb	%xmm0, %xmm0
    00003099: 	paddb	%xmm0, %xmm0
    0000309d: 	movdqa	%xmm0, %xmm7
    000030a1: 	psadbw	%xmm1, %xmm7
    000030a5: 	movq	%xmm7, %rax
    000030aa: 	movq	%xmm7, 0x60(%rsp)
    000030b0: 	movl	%eax, %r11d
    000030b3: 	movzbl	0x2159(%rsp), %eax
    000030bb: 	addl	%edx, %r11d
    000030be: 	subl	%eax, %ecx
    000030c0: 	subl	%r9d, %eax
    000030c3: 	subl	%r8d, %r9d
    000030c6: 	subl	%edi, %r8d
    000030c9: 	addl	%r10d, %ecx
    000030cc: 	subl	%esi, %edi
    000030ce: 	subl	%r13d, %esi
    000030d1: 	addl	%ecx, %eax
    000030d3: 	addl	%r9d, %eax
    000030d6: 	addl	%r8d, %eax
    000030d9: 	addl	%eax, %edi
    000030db: 	addl	%edi, %esi
    000030dd: 	leal	(%r11,%rsi,4), %esi
    000030e1: 	testb	%sil, %sil
    000030e4: 	jne	.Ltmp5360 # Offset: 12516
.Ltmp5422:
    000030ea: 	addl	$0x1, %r12d
    000030ee: 	cmpl	%r14d, %r12d
    000030f1: 	jl	.Ltmp5361 # Offset: 12529
.Ltmp5358:
    000030f7: 	movq	%r15, %rsi
    000030fa: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00003101: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 12545
    00003106: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000310d: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00003114: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000311b: 	je	.Ltmp5362 # Offset: 12571
.Ltmp5457:
    00003121: 	movq	-0x20(%rax), %r12
    00003125: 	callq	clock@PLT # Offset: 12581
    0000312a: 	pxor	%xmm0, %xmm0
    0000312e: 	movq	%rax, end_time(%rip)
    00003135: 	movq	%r12, %rdi
    00003138: 	subq	start_time(%rip), %rax
    0000313f: 	cvtsi2sd	%rax, %xmm0
    00003144: 	divsd	DATAat0x4d640(%rip), %xmm0
    0000314c: 	callq	_Z13record_resultdPKc # Offset: 12620
    00003151: 	movq	0x200(%rsp), %rdi
    00003159: 	cmpq	(%rsp), %rdi
    0000315d: 	je	.Ltmp5363 # Offset: 12637
    0000315f: 	movq	0x210(%rsp), %rax
    00003167: 	leaq	0x1(%rax), %rsi
    0000316b: 	callq	_ZdlPvm@PLT # Offset: 12651
.Ltmp5363:
    00003170: 	movq	0x8(%rsp), %rsi
    00003175: 	leaq	DATAat0x4d497(%rip), %rdx
    0000317c: 	movq	%r15, %rdi
    0000317f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12671
    00003184: 	movl	0x1c(%rsp), %edx
    00003188: 	movq	%r15, %rcx
    0000318b: 	movl	$0x1f40, %esi
    00003190: 	movq	%rbp, %rdi
    00003193: 	callq	_Z9test_CSE4Ih14custom_cse_mixIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 12691
    00003198: 	movq	0x200(%rsp), %rdi
    000031a0: 	cmpq	(%rsp), %rdi
    000031a4: 	je	.Ltmp5364 # Offset: 12708
    000031a6: 	movq	0x210(%rsp), %rax
    000031ae: 	leaq	0x1(%rax), %rsi
    000031b2: 	callq	_ZdlPvm@PLT # Offset: 12722
.Ltmp5364:
    000031b7: 	movq	0x8(%rsp), %rbx
    000031bc: 	leaq	0x1c0(%rsp), %rdi
    000031c4: 	leaq	DATAat0x4d4a2(%rip), %rdx
    000031cb: 	movq	%rbx, %rsi
    000031ce: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12750
    000031d3: 	movl	iterations(%rip), %edx
    000031d9: 	xorl	%r8d, %r8d
    000031dc: 	xorl	%ecx, %ecx
    000031de: 	movl	$0x1f40, %esi
    000031e3: 	movq	0x1c0(%rsp), %rdi
    000031eb: 	callq	_Z9summarizePKciiii # Offset: 12779
    000031f0: 	leaq	DATAat0x4d4a9(%rip), %rdx
    000031f7: 	movq	%rbx, %rsi
    000031fa: 	movq	%r15, %rdi
    000031fd: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12797
    00003202: 	callq	clock@PLT # Offset: 12802
    00003207: 	movl	iterations(%rip), %r14d
    0000320e: 	xorl	%r12d, %r12d
    00003211: 	leaq	0x2150(%rsp), %rbx
    00003219: 	movq	%rax, start_time(%rip)
    00003220: 	testl	%r14d, %r14d
    00003223: 	jle	.Ltmp5365 # Offset: 12835
    00003229: 	nopl	(%rax) # Size: 7
.Ltmp5368:
    00003230: 	movzbl	0x220(%rsp), %r10d
    00003239: 	movq	%rbp, %rax
    0000323c: 	pxor	%xmm1, %xmm1
    00003240: 	subb	0x221(%rsp), %r10b
    00003248: 	nopl	(%rax,%rax) # Size: 8
.Ltmp5366:
    00003250: 	movdqa	(%rax), %xmm0
    00003254: 	movdqu	0x1(%rax), %xmm6
    00003259: 	addq	$0x10, %rax
    0000325d: 	psubb	%xmm6, %xmm0
    00003261: 	paddb	%xmm0, %xmm0
    00003265: 	paddb	%xmm0, %xmm0
    00003269: 	paddb	%xmm0, %xmm0
    0000326d: 	paddb	%xmm0, %xmm1
    00003271: 	cmpq	%rbx, %rax
    00003274: 	jne	.Ltmp5366 # Offset: 12916
    00003276: 	movdqa	%xmm1, %xmm0
    0000327a: 	movzbl	0x215e(%rsp), %r13d
    00003283: 	movzbl	0x215a(%rsp), %r9d
    0000328c: 	psrldq	$0x8, %xmm0
    00003291: 	movzbl	0x215c(%rsp), %edi
    00003299: 	movzbl	0x215b(%rsp), %r8d
    000032a2: 	paddb	%xmm0, %xmm1
    000032a6: 	pxor	%xmm0, %xmm0
    000032aa: 	movl	%r13d, %ecx
    000032ad: 	subb	0x215f(%rsp), %cl
    000032b4: 	psadbw	%xmm0, %xmm1
    000032b8: 	addl	%ecx, %r10d
    000032bb: 	movzbl	0x2158(%rsp), %ecx
    000032c3: 	movq	0x2150(%rsp), %xmm0
    000032cc: 	movd	%xmm1, %edx
    000032d0: 	movzbl	0x215d(%rsp), %esi
    000032d8: 	movq	0x2151(%rsp), %xmm1
    000032e1: 	psubb	%xmm1, %xmm0
    000032e5: 	pxor	%xmm1, %xmm1
    000032e9: 	paddb	%xmm0, %xmm0
    000032ed: 	paddb	%xmm0, %xmm0
    000032f1: 	paddb	%xmm0, %xmm0
    000032f5: 	movdqa	%xmm0, %xmm2
    000032f9: 	psadbw	%xmm1, %xmm2
    000032fd: 	movq	%xmm2, %rax
    00003302: 	movq	%xmm2, 0x58(%rsp)
    00003308: 	movl	%eax, %r11d
    0000330b: 	movzbl	0x2159(%rsp), %eax
    00003313: 	addl	%edx, %r11d
    00003316: 	subl	%eax, %ecx
    00003318: 	subl	%r9d, %eax
    0000331b: 	subl	%r8d, %r9d
    0000331e: 	subl	%edi, %r8d
    00003321: 	addl	%r10d, %ecx
    00003324: 	subl	%esi, %edi
    00003326: 	subl	%r13d, %esi
    00003329: 	addl	%ecx, %eax
    0000332b: 	addl	%r9d, %eax
    0000332e: 	addl	%r8d, %eax
    00003331: 	addl	%eax, %edi
    00003333: 	addl	%edi, %esi
    00003335: 	leal	(%r11,%rsi,8), %esi
    00003339: 	testb	%sil, %sil
    0000333c: 	jne	.Ltmp5367 # Offset: 13116
.Ltmp5421:
    00003342: 	addl	$0x1, %r12d
    00003346: 	cmpl	%r14d, %r12d
    00003349: 	jl	.Ltmp5368 # Offset: 13129
.Ltmp5365:
    0000334f: 	movq	%r15, %rsi
    00003352: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00003359: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 13145
    0000335e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00003365: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000336c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00003373: 	je	.Ltmp5369 # Offset: 13171
.Ltmp5456:
    00003379: 	movq	-0x20(%rax), %r12
    0000337d: 	callq	clock@PLT # Offset: 13181
    00003382: 	pxor	%xmm0, %xmm0
    00003386: 	movq	%rax, end_time(%rip)
    0000338d: 	movq	%r12, %rdi
    00003390: 	subq	start_time(%rip), %rax
    00003397: 	cvtsi2sd	%rax, %xmm0
    0000339c: 	divsd	DATAat0x4d640(%rip), %xmm0
    000033a4: 	callq	_Z13record_resultdPKc # Offset: 13220
    000033a9: 	movq	0x200(%rsp), %rdi
    000033b1: 	cmpq	(%rsp), %rdi
    000033b5: 	je	.Ltmp5370 # Offset: 13237
    000033b7: 	movq	0x210(%rsp), %rax
    000033bf: 	leaq	0x1(%rax), %rsi
    000033c3: 	callq	_ZdlPvm@PLT # Offset: 13251
.Ltmp5370:
    000033c8: 	movq	0x8(%rsp), %rsi
    000033cd: 	leaq	DATAat0x4d4b8(%rip), %rdx
    000033d4: 	movq	%r15, %rdi
    000033d7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13271
    000033dc: 	callq	clock@PLT # Offset: 13276
    000033e1: 	movl	iterations(%rip), %r14d
    000033e8: 	xorl	%r12d, %r12d
    000033eb: 	leaq	0x2150(%rsp), %rbx
    000033f3: 	movq	%rax, start_time(%rip)
    000033fa: 	testl	%r14d, %r14d
    000033fd: 	jle	.Ltmp5371 # Offset: 13309
    00003403: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5374:
    00003408: 	movzbl	0x220(%rsp), %r10d
    00003411: 	movq	%rbp, %rax
    00003414: 	pxor	%xmm1, %xmm1
    00003418: 	subb	0x221(%rsp), %r10b
.Ltmp5372:
    00003420: 	movdqa	(%rax), %xmm0
    00003424: 	movdqu	0x1(%rax), %xmm7
    00003429: 	addq	$0x10, %rax
    0000342d: 	psubb	%xmm7, %xmm0
    00003431: 	paddb	%xmm0, %xmm0
    00003435: 	paddb	%xmm0, %xmm0
    00003439: 	paddb	%xmm0, %xmm0
    0000343d: 	paddb	%xmm0, %xmm1
    00003441: 	cmpq	%rax, %rbx
    00003444: 	jne	.Ltmp5372 # Offset: 13380
    00003446: 	movdqa	%xmm1, %xmm0
    0000344a: 	movzbl	0x215e(%rsp), %r13d
    00003453: 	movzbl	0x215a(%rsp), %r9d
    0000345c: 	psrldq	$0x8, %xmm0
    00003461: 	movzbl	0x215c(%rsp), %edi
    00003469: 	movzbl	0x215b(%rsp), %r8d
    00003472: 	paddb	%xmm0, %xmm1
    00003476: 	pxor	%xmm0, %xmm0
    0000347a: 	movl	%r13d, %ecx
    0000347d: 	subb	0x215f(%rsp), %cl
    00003484: 	psadbw	%xmm0, %xmm1
    00003488: 	addl	%ecx, %r10d
    0000348b: 	movzbl	0x2158(%rsp), %ecx
    00003493: 	movq	0x2150(%rsp), %xmm0
    0000349c: 	movd	%xmm1, %edx
    000034a0: 	movzbl	0x215d(%rsp), %esi
    000034a8: 	movq	0x2151(%rsp), %xmm1
    000034b1: 	psubb	%xmm1, %xmm0
    000034b5: 	pxor	%xmm1, %xmm1
    000034b9: 	paddb	%xmm0, %xmm0
    000034bd: 	paddb	%xmm0, %xmm0
    000034c1: 	paddb	%xmm0, %xmm0
    000034c5: 	movdqa	%xmm0, %xmm3
    000034c9: 	psadbw	%xmm1, %xmm3
    000034cd: 	movq	%xmm3, %rax
    000034d2: 	movq	%xmm3, 0x50(%rsp)
    000034d8: 	movl	%eax, %r11d
    000034db: 	movzbl	0x2159(%rsp), %eax
    000034e3: 	addl	%edx, %r11d
    000034e6: 	subl	%eax, %ecx
    000034e8: 	subl	%r9d, %eax
    000034eb: 	subl	%r8d, %r9d
    000034ee: 	subl	%edi, %r8d
    000034f1: 	addl	%r10d, %ecx
    000034f4: 	subl	%esi, %edi
    000034f6: 	subl	%r13d, %esi
    000034f9: 	addl	%ecx, %eax
    000034fb: 	addl	%r9d, %eax
    000034fe: 	addl	%r8d, %eax
    00003501: 	addl	%eax, %edi
    00003503: 	addl	%edi, %esi
    00003505: 	leal	(%r11,%rsi,8), %esi
    00003509: 	testb	%sil, %sil
    0000350c: 	jne	.Ltmp5373 # Offset: 13580
.Ltmp5420:
    00003512: 	addl	$0x1, %r12d
    00003516: 	cmpl	%r14d, %r12d
    00003519: 	jl	.Ltmp5374 # Offset: 13593
.Ltmp5371:
    0000351f: 	movq	%r15, %rsi
    00003522: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00003529: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 13609
    0000352e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00003535: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000353c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00003543: 	je	.Ltmp5375 # Offset: 13635
.Ltmp5455:
    00003549: 	movq	-0x20(%rax), %r12
    0000354d: 	callq	clock@PLT # Offset: 13645
    00003552: 	pxor	%xmm0, %xmm0
    00003556: 	movq	%rax, end_time(%rip)
    0000355d: 	movq	%r12, %rdi
    00003560: 	subq	start_time(%rip), %rax
    00003567: 	cvtsi2sd	%rax, %xmm0
    0000356c: 	divsd	DATAat0x4d640(%rip), %xmm0
    00003574: 	callq	_Z13record_resultdPKc # Offset: 13684
    00003579: 	movq	0x200(%rsp), %rdi
    00003581: 	cmpq	(%rsp), %rdi
    00003585: 	je	.Ltmp5376 # Offset: 13701
    00003587: 	movq	0x210(%rsp), %rax
    0000358f: 	leaq	0x1(%rax), %rsi
    00003593: 	callq	_ZdlPvm@PLT # Offset: 13715
.Ltmp5376:
    00003598: 	movq	0x8(%rsp), %rsi
    0000359d: 	leaq	DATAat0x4d4cc(%rip), %rdx
    000035a4: 	movq	%r15, %rdi
    000035a7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13735
    000035ac: 	movl	0x1c(%rsp), %edx
    000035b0: 	movq	%r15, %rcx
    000035b3: 	movl	$0x1f40, %esi
    000035b8: 	movq	%rbp, %rdi
    000035bb: 	callq	_Z20test_CSE8_add_inlineIh14custom_cse_addIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 13755
    000035c0: 	movq	0x200(%rsp), %rdi
    000035c8: 	cmpq	(%rsp), %rdi
    000035cc: 	je	.Ltmp5377 # Offset: 13772
    000035ce: 	movq	0x210(%rsp), %rax
    000035d6: 	leaq	0x1(%rax), %rsi
    000035da: 	callq	_ZdlPvm@PLT # Offset: 13786
.Ltmp5377:
    000035df: 	movq	0x8(%rsp), %rsi
    000035e4: 	leaq	DATAat0x4d4de(%rip), %rdx
    000035eb: 	movq	%r15, %rdi
    000035ee: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13806
    000035f3: 	movl	0x1c(%rsp), %edx
    000035f7: 	movq	%r15, %rcx
    000035fa: 	movl	$0x1f40, %esi
    000035ff: 	movq	%rbp, %rdi
    00003602: 	callq	_Z28test_CSE8_add_inline_flippedIh14custom_cse_addIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 13826
    00003607: 	movq	0x200(%rsp), %rdi
    0000360f: 	cmpq	(%rsp), %rdi
    00003613: 	je	.Ltmp5378 # Offset: 13843
    00003615: 	movq	0x210(%rsp), %rax
    0000361d: 	leaq	0x1(%rax), %rsi
    00003621: 	callq	_ZdlPvm@PLT # Offset: 13857
.Ltmp5378:
    00003626: 	movq	0x8(%rsp), %rsi
    0000362b: 	leaq	DATAat0x4d4f8(%rip), %rdx
    00003632: 	movq	%r15, %rdi
    00003635: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13877
    0000363a: 	movl	0x1c(%rsp), %edx
    0000363e: 	movq	%r15, %rcx
    00003641: 	movl	$0x1f40, %esi
    00003646: 	movq	%rbp, %rdi
    00003649: 	callq	_Z9test_CSE8Ih14custom_cse_addIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 13897
    0000364e: 	movq	0x200(%rsp), %rdi
    00003656: 	cmpq	(%rsp), %rdi
    0000365a: 	je	.Ltmp5379 # Offset: 13914
    0000365c: 	movq	0x210(%rsp), %rax
    00003664: 	leaq	0x1(%rax), %rsi
    00003668: 	callq	_ZdlPvm@PLT # Offset: 13928
.Ltmp5379:
    0000366d: 	movq	0x8(%rsp), %rsi
    00003672: 	leaq	DATAat0x4d503(%rip), %rdx
    00003679: 	movq	%r15, %rdi
    0000367c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13948
    00003681: 	callq	clock@PLT # Offset: 13953
    00003686: 	movl	iterations(%rip), %r14d
    0000368d: 	xorl	%r12d, %r12d
    00003690: 	leaq	0x2150(%rsp), %rbx
    00003698: 	movq	%rax, start_time(%rip)
    0000369f: 	testl	%r14d, %r14d
    000036a2: 	jle	.Ltmp5380 # Offset: 13986
    000036a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp5383:
    000036b0: 	movzbl	0x220(%rsp), %r10d
    000036b9: 	movq	%rbp, %rax
    000036bc: 	pxor	%xmm1, %xmm1
    000036c0: 	subb	0x221(%rsp), %r10b
    000036c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp5381:
    000036d0: 	movdqa	(%rax), %xmm0
    000036d4: 	movdqu	0x1(%rax), %xmm2
    000036d9: 	addq	$0x10, %rax
    000036dd: 	psubb	%xmm2, %xmm0
    000036e1: 	paddb	%xmm0, %xmm0
    000036e5: 	paddb	%xmm0, %xmm0
    000036e9: 	paddb	%xmm0, %xmm0
    000036ed: 	paddb	%xmm0, %xmm1
    000036f1: 	cmpq	%rbx, %rax
    000036f4: 	jne	.Ltmp5381 # Offset: 14068
    000036f6: 	movdqa	%xmm1, %xmm0
    000036fa: 	movzbl	0x215e(%rsp), %r13d
    00003703: 	movzbl	0x215a(%rsp), %r9d
    0000370c: 	psrldq	$0x8, %xmm0
    00003711: 	movzbl	0x215c(%rsp), %edi
    00003719: 	movzbl	0x215b(%rsp), %r8d
    00003722: 	paddb	%xmm0, %xmm1
    00003726: 	pxor	%xmm0, %xmm0
    0000372a: 	movl	%r13d, %ecx
    0000372d: 	subb	0x215f(%rsp), %cl
    00003734: 	psadbw	%xmm0, %xmm1
    00003738: 	addl	%ecx, %r10d
    0000373b: 	movzbl	0x2158(%rsp), %ecx
    00003743: 	movq	0x2150(%rsp), %xmm0
    0000374c: 	movd	%xmm1, %edx
    00003750: 	movzbl	0x215d(%rsp), %esi
    00003758: 	movq	0x2151(%rsp), %xmm1
    00003761: 	psubb	%xmm1, %xmm0
    00003765: 	pxor	%xmm1, %xmm1
    00003769: 	paddb	%xmm0, %xmm0
    0000376d: 	paddb	%xmm0, %xmm0
    00003771: 	paddb	%xmm0, %xmm0
    00003775: 	movdqa	%xmm0, %xmm4
    00003779: 	psadbw	%xmm1, %xmm4
    0000377d: 	movq	%xmm4, %rax
    00003782: 	movq	%xmm4, 0x48(%rsp)
    00003788: 	movl	%eax, %r11d
    0000378b: 	movzbl	0x2159(%rsp), %eax
    00003793: 	addl	%edx, %r11d
    00003796: 	subl	%eax, %ecx
    00003798: 	subl	%r9d, %eax
    0000379b: 	subl	%r8d, %r9d
    0000379e: 	subl	%edi, %r8d
    000037a1: 	addl	%r10d, %ecx
    000037a4: 	subl	%esi, %edi
    000037a6: 	subl	%r13d, %esi
    000037a9: 	addl	%ecx, %eax
    000037ab: 	addl	%r9d, %eax
    000037ae: 	addl	%r8d, %eax
    000037b1: 	addl	%eax, %edi
    000037b3: 	addl	%edi, %esi
    000037b5: 	leal	(%r11,%rsi,8), %esi
    000037b9: 	testb	%sil, %sil
    000037bc: 	jne	.Ltmp5382 # Offset: 14268
.Ltmp5419:
    000037c2: 	addl	$0x1, %r12d
    000037c6: 	cmpl	%r14d, %r12d
    000037c9: 	jl	.Ltmp5383 # Offset: 14281
.Ltmp5380:
    000037cf: 	movq	%r15, %rsi
    000037d2: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000037d9: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 14297
    000037de: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000037e5: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000037ec: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000037f3: 	je	.Ltmp5384 # Offset: 14323
.Ltmp5454:
    000037f9: 	movq	-0x20(%rax), %r12
    000037fd: 	callq	clock@PLT # Offset: 14333
    00003802: 	pxor	%xmm0, %xmm0
    00003806: 	movq	%rax, end_time(%rip)
    0000380d: 	movq	%r12, %rdi
    00003810: 	subq	start_time(%rip), %rax
    00003817: 	cvtsi2sd	%rax, %xmm0
    0000381c: 	divsd	DATAat0x4d640(%rip), %xmm0
    00003824: 	callq	_Z13record_resultdPKc # Offset: 14372
    00003829: 	movq	0x200(%rsp), %rdi
    00003831: 	cmpq	(%rsp), %rdi
    00003835: 	je	.Ltmp5385 # Offset: 14389
    00003837: 	movq	0x210(%rsp), %rax
    0000383f: 	leaq	0x1(%rax), %rsi
    00003843: 	callq	_ZdlPvm@PLT # Offset: 14403
.Ltmp5385:
    00003848: 	movq	0x8(%rsp), %rsi
    0000384d: 	leaq	DATAat0x4d51c(%rip), %rdx
    00003854: 	movq	%r15, %rdi
    00003857: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 14423
    0000385c: 	movl	0x1c(%rsp), %edx
    00003860: 	movq	%r15, %rcx
    00003863: 	movl	$0x1f40, %esi
    00003868: 	movq	%rbp, %rdi
    0000386b: 	callq	_Z9test_CSE8Ih14custom_cse_subIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 14443
    00003870: 	movq	0x200(%rsp), %rdi
    00003878: 	cmpq	(%rsp), %rdi
    0000387c: 	je	.Ltmp5386 # Offset: 14460
    0000387e: 	movq	0x210(%rsp), %rax
    00003886: 	leaq	0x1(%rax), %rsi
    0000388a: 	callq	_ZdlPvm@PLT # Offset: 14474
.Ltmp5386:
    0000388f: 	movq	0x8(%rsp), %rsi
    00003894: 	leaq	DATAat0x4d52c(%rip), %rdx
    0000389b: 	movq	%r15, %rdi
    0000389e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 14494
    000038a3: 	callq	clock@PLT # Offset: 14499
    000038a8: 	movl	iterations(%rip), %r14d
    000038af: 	xorl	%r12d, %r12d
    000038b2: 	leaq	0x2150(%rsp), %rbx
    000038ba: 	movq	%rax, start_time(%rip)
    000038c1: 	testl	%r14d, %r14d
    000038c4: 	jle	.Ltmp5387 # Offset: 14532
    000038ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5390:
    000038d0: 	movzbl	0x220(%rsp), %r10d
    000038d9: 	movq	%rbp, %rax
    000038dc: 	pxor	%xmm1, %xmm1
    000038e0: 	subb	0x221(%rsp), %r10b
    000038e8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp5388:
    000038f0: 	movdqa	(%rax), %xmm0
    000038f4: 	movdqu	0x1(%rax), %xmm3
    000038f9: 	addq	$0x10, %rax
    000038fd: 	psubb	%xmm3, %xmm0
    00003901: 	paddb	%xmm0, %xmm0
    00003905: 	paddb	%xmm0, %xmm0
    00003909: 	paddb	%xmm0, %xmm0
    0000390d: 	paddb	%xmm0, %xmm1
    00003911: 	cmpq	%rbx, %rax
    00003914: 	jne	.Ltmp5388 # Offset: 14612
    00003916: 	movdqa	%xmm1, %xmm0
    0000391a: 	movzbl	0x215e(%rsp), %r13d
    00003923: 	movzbl	0x215a(%rsp), %r9d
    0000392c: 	psrldq	$0x8, %xmm0
    00003931: 	movzbl	0x215c(%rsp), %edi
    00003939: 	movzbl	0x215b(%rsp), %r8d
    00003942: 	paddb	%xmm0, %xmm1
    00003946: 	pxor	%xmm0, %xmm0
    0000394a: 	movl	%r13d, %ecx
    0000394d: 	subb	0x215f(%rsp), %cl
    00003954: 	psadbw	%xmm0, %xmm1
    00003958: 	addl	%ecx, %r10d
    0000395b: 	movzbl	0x2158(%rsp), %ecx
    00003963: 	movq	0x2150(%rsp), %xmm0
    0000396c: 	movd	%xmm1, %edx
    00003970: 	movzbl	0x215d(%rsp), %esi
    00003978: 	movq	0x2151(%rsp), %xmm1
    00003981: 	psubb	%xmm1, %xmm0
    00003985: 	pxor	%xmm1, %xmm1
    00003989: 	paddb	%xmm0, %xmm0
    0000398d: 	paddb	%xmm0, %xmm0
    00003991: 	paddb	%xmm0, %xmm0
    00003995: 	movdqa	%xmm0, %xmm5
    00003999: 	psadbw	%xmm1, %xmm5
    0000399d: 	movq	%xmm5, %rax
    000039a2: 	movq	%xmm5, 0x40(%rsp)
    000039a8: 	movl	%eax, %r11d
    000039ab: 	movzbl	0x2159(%rsp), %eax
    000039b3: 	addl	%edx, %r11d
    000039b6: 	subl	%eax, %ecx
    000039b8: 	subl	%r9d, %eax
    000039bb: 	subl	%r8d, %r9d
    000039be: 	subl	%edi, %r8d
    000039c1: 	addl	%r10d, %ecx
    000039c4: 	subl	%esi, %edi
    000039c6: 	subl	%r13d, %esi
    000039c9: 	addl	%ecx, %eax
    000039cb: 	addl	%r9d, %eax
    000039ce: 	addl	%r8d, %eax
    000039d1: 	addl	%eax, %edi
    000039d3: 	addl	%edi, %esi
    000039d5: 	leal	(%r11,%rsi,8), %esi
    000039d9: 	testb	%sil, %sil
    000039dc: 	jne	.Ltmp5389 # Offset: 14812
.Ltmp5418:
    000039e2: 	addl	$0x1, %r12d
    000039e6: 	cmpl	%r14d, %r12d
    000039e9: 	jl	.Ltmp5390 # Offset: 14825
.Ltmp5387:
    000039ef: 	movq	%r15, %rsi
    000039f2: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000039f9: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 14841
    000039fe: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00003a05: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00003a0c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00003a13: 	je	.Ltmp5391 # Offset: 14867
.Ltmp5453:
    00003a19: 	movq	-0x20(%rax), %r12
    00003a1d: 	callq	clock@PLT # Offset: 14877
    00003a22: 	pxor	%xmm0, %xmm0
    00003a26: 	movq	%rax, end_time(%rip)
    00003a2d: 	movq	%r12, %rdi
    00003a30: 	subq	start_time(%rip), %rax
    00003a37: 	cvtsi2sd	%rax, %xmm0
    00003a3c: 	divsd	DATAat0x4d640(%rip), %xmm0
    00003a44: 	callq	_Z13record_resultdPKc # Offset: 14916
    00003a49: 	movq	0x200(%rsp), %rdi
    00003a51: 	cmpq	(%rsp), %rdi
    00003a55: 	je	.Ltmp5392 # Offset: 14933
    00003a57: 	movq	0x210(%rsp), %rax
    00003a5f: 	leaq	0x1(%rax), %rsi
    00003a63: 	callq	_ZdlPvm@PLT # Offset: 14947
.Ltmp5392:
    00003a68: 	movq	0x8(%rsp), %rsi
    00003a6d: 	leaq	DATAat0x4d545(%rip), %rdx
    00003a74: 	movq	%r15, %rdi
    00003a77: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 14967
    00003a7c: 	movl	0x1c(%rsp), %edx
    00003a80: 	movq	%r15, %rcx
    00003a83: 	movl	$0x1f40, %esi
    00003a88: 	movq	%rbp, %rdi
    00003a8b: 	callq	_Z9test_CSE8Ih14custom_cse_mulIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 14987
    00003a90: 	movq	0x200(%rsp), %rdi
    00003a98: 	cmpq	(%rsp), %rdi
    00003a9c: 	je	.Ltmp5393 # Offset: 15004
    00003a9e: 	movq	0x210(%rsp), %rax
    00003aa6: 	leaq	0x1(%rax), %rsi
    00003aaa: 	callq	_ZdlPvm@PLT # Offset: 15018
.Ltmp5393:
    00003aaf: 	movq	0x8(%rsp), %rsi
    00003ab4: 	leaq	DATAat0x4d555(%rip), %rdx
    00003abb: 	movq	%r15, %rdi
    00003abe: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 15038
    00003ac3: 	callq	clock@PLT # Offset: 15043
    00003ac8: 	movl	iterations(%rip), %r14d
    00003acf: 	xorl	%r12d, %r12d
    00003ad2: 	leaq	0x2150(%rsp), %rbx
    00003ada: 	movq	%rax, start_time(%rip)
    00003ae1: 	testl	%r14d, %r14d
    00003ae4: 	jle	.Ltmp5394 # Offset: 15076
    00003aea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5397:
    00003af0: 	movzbl	0x220(%rsp), %r10d
    00003af9: 	movq	%rbp, %rax
    00003afc: 	pxor	%xmm1, %xmm1
    00003b00: 	subb	0x221(%rsp), %r10b
    00003b08: 	nopl	(%rax,%rax) # Size: 8
.Ltmp5395:
    00003b10: 	movdqa	(%rax), %xmm0
    00003b14: 	movdqu	0x1(%rax), %xmm4
    00003b19: 	addq	$0x10, %rax
    00003b1d: 	psubb	%xmm4, %xmm0
    00003b21: 	paddb	%xmm0, %xmm0
    00003b25: 	paddb	%xmm0, %xmm0
    00003b29: 	paddb	%xmm0, %xmm0
    00003b2d: 	paddb	%xmm0, %xmm1
    00003b31: 	cmpq	%rbx, %rax
    00003b34: 	jne	.Ltmp5395 # Offset: 15156
    00003b36: 	movdqa	%xmm1, %xmm0
    00003b3a: 	movzbl	0x215e(%rsp), %r13d
    00003b43: 	movzbl	0x215a(%rsp), %r9d
    00003b4c: 	psrldq	$0x8, %xmm0
    00003b51: 	movzbl	0x215c(%rsp), %edi
    00003b59: 	movzbl	0x215b(%rsp), %r8d
    00003b62: 	paddb	%xmm0, %xmm1
    00003b66: 	pxor	%xmm0, %xmm0
    00003b6a: 	movl	%r13d, %ecx
    00003b6d: 	subb	0x215f(%rsp), %cl
    00003b74: 	psadbw	%xmm0, %xmm1
    00003b78: 	addl	%ecx, %r10d
    00003b7b: 	movzbl	0x2158(%rsp), %ecx
    00003b83: 	movq	0x2150(%rsp), %xmm0
    00003b8c: 	movd	%xmm1, %edx
    00003b90: 	movzbl	0x215d(%rsp), %esi
    00003b98: 	movq	0x2151(%rsp), %xmm1
    00003ba1: 	psubb	%xmm1, %xmm0
    00003ba5: 	pxor	%xmm1, %xmm1
    00003ba9: 	paddb	%xmm0, %xmm0
    00003bad: 	paddb	%xmm0, %xmm0
    00003bb1: 	paddb	%xmm0, %xmm0
    00003bb5: 	movdqa	%xmm0, %xmm6
    00003bb9: 	psadbw	%xmm1, %xmm6
    00003bbd: 	movq	%xmm6, %rax
    00003bc2: 	movq	%xmm6, 0x38(%rsp)
    00003bc8: 	movl	%eax, %r11d
    00003bcb: 	movzbl	0x2159(%rsp), %eax
    00003bd3: 	addl	%edx, %r11d
    00003bd6: 	subl	%eax, %ecx
    00003bd8: 	subl	%r9d, %eax
    00003bdb: 	subl	%r8d, %r9d
    00003bde: 	subl	%edi, %r8d
    00003be1: 	addl	%r10d, %ecx
    00003be4: 	subl	%esi, %edi
    00003be6: 	subl	%r13d, %esi
    00003be9: 	addl	%ecx, %eax
    00003beb: 	addl	%r9d, %eax
    00003bee: 	addl	%r8d, %eax
    00003bf1: 	addl	%eax, %edi
    00003bf3: 	addl	%edi, %esi
    00003bf5: 	leal	(%r11,%rsi,8), %esi
    00003bf9: 	testb	%sil, %sil
    00003bfc: 	jne	.Ltmp5396 # Offset: 15356
.Ltmp5417:
    00003c02: 	addl	$0x1, %r12d
    00003c06: 	cmpl	%r14d, %r12d
    00003c09: 	jl	.Ltmp5397 # Offset: 15369
.Ltmp5394:
    00003c0f: 	movq	%r15, %rsi
    00003c12: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00003c19: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 15385
    00003c1e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00003c25: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00003c2c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00003c33: 	je	.Ltmp5398 # Offset: 15411
.Ltmp5452:
    00003c39: 	movq	-0x20(%rax), %r12
    00003c3d: 	callq	clock@PLT # Offset: 15421
    00003c42: 	pxor	%xmm0, %xmm0
    00003c46: 	movq	%rax, end_time(%rip)
    00003c4d: 	movq	%r12, %rdi
    00003c50: 	subq	start_time(%rip), %rax
    00003c57: 	cvtsi2sd	%rax, %xmm0
    00003c5c: 	divsd	DATAat0x4d640(%rip), %xmm0
    00003c64: 	callq	_Z13record_resultdPKc # Offset: 15460
    00003c69: 	movq	0x200(%rsp), %rdi
    00003c71: 	cmpq	(%rsp), %rdi
    00003c75: 	je	.Ltmp5399 # Offset: 15477
    00003c77: 	movq	0x210(%rsp), %rax
    00003c7f: 	leaq	0x1(%rax), %rsi
    00003c83: 	callq	_ZdlPvm@PLT # Offset: 15491
.Ltmp5399:
    00003c88: 	movq	0x8(%rsp), %rsi
    00003c8d: 	leaq	DATAat0x4d56c(%rip), %rdx
    00003c94: 	movq	%r15, %rdi
    00003c97: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 15511
    00003c9c: 	movl	0x1c(%rsp), %edx
    00003ca0: 	movq	%r15, %rcx
    00003ca3: 	movl	$0x1f40, %esi
    00003ca8: 	movq	%rbp, %rdi
    00003cab: 	callq	_Z9test_CSE8Ih14custom_cse_divIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 15531
    00003cb0: 	movq	0x200(%rsp), %rdi
    00003cb8: 	cmpq	(%rsp), %rdi
    00003cbc: 	je	.Ltmp5400 # Offset: 15548
    00003cbe: 	movq	0x210(%rsp), %rax
    00003cc6: 	leaq	0x1(%rax), %rsi
    00003cca: 	callq	_ZdlPvm@PLT # Offset: 15562
.Ltmp5400:
    00003ccf: 	movq	0x8(%rsp), %rsi
    00003cd4: 	leaq	DATAat0x4d57a(%rip), %rdx
    00003cdb: 	movq	%r15, %rdi
    00003cde: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 15582
    00003ce3: 	callq	clock@PLT # Offset: 15587
    00003ce8: 	movl	iterations(%rip), %r14d
    00003cef: 	xorl	%r12d, %r12d
    00003cf2: 	leaq	0x2150(%rsp), %rbx
    00003cfa: 	movq	%rax, start_time(%rip)
    00003d01: 	testl	%r14d, %r14d
    00003d04: 	jle	.Ltmp5401 # Offset: 15620
    00003d0a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5404:
    00003d10: 	movzbl	0x220(%rsp), %r10d
    00003d19: 	movq	%rbp, %rax
    00003d1c: 	pxor	%xmm1, %xmm1
    00003d20: 	subb	0x221(%rsp), %r10b
    00003d28: 	nopl	(%rax,%rax) # Size: 8
.Ltmp5402:
    00003d30: 	movdqa	(%rax), %xmm0
    00003d34: 	movdqu	0x1(%rax), %xmm5
    00003d39: 	addq	$0x10, %rax
    00003d3d: 	psubb	%xmm5, %xmm0
    00003d41: 	paddb	%xmm0, %xmm0
    00003d45: 	paddb	%xmm0, %xmm0
    00003d49: 	paddb	%xmm0, %xmm0
    00003d4d: 	paddb	%xmm0, %xmm1
    00003d51: 	cmpq	%rbx, %rax
    00003d54: 	jne	.Ltmp5402 # Offset: 15700
    00003d56: 	movdqa	%xmm1, %xmm0
    00003d5a: 	movzbl	0x215e(%rsp), %r13d
    00003d63: 	movzbl	0x215a(%rsp), %r9d
    00003d6c: 	psrldq	$0x8, %xmm0
    00003d71: 	movzbl	0x215c(%rsp), %edi
    00003d79: 	movzbl	0x215b(%rsp), %r8d
    00003d82: 	paddb	%xmm0, %xmm1
    00003d86: 	pxor	%xmm0, %xmm0
    00003d8a: 	movl	%r13d, %ecx
    00003d8d: 	subb	0x215f(%rsp), %cl
    00003d94: 	psadbw	%xmm0, %xmm1
    00003d98: 	addl	%ecx, %r10d
    00003d9b: 	movzbl	0x2158(%rsp), %ecx
    00003da3: 	movq	0x2150(%rsp), %xmm0
    00003dac: 	movd	%xmm1, %edx
    00003db0: 	movzbl	0x215d(%rsp), %esi
    00003db8: 	movq	0x2151(%rsp), %xmm1
    00003dc1: 	psubb	%xmm1, %xmm0
    00003dc5: 	pxor	%xmm1, %xmm1
    00003dc9: 	paddb	%xmm0, %xmm0
    00003dcd: 	paddb	%xmm0, %xmm0
    00003dd1: 	paddb	%xmm0, %xmm0
    00003dd5: 	movdqa	%xmm0, %xmm7
    00003dd9: 	psadbw	%xmm1, %xmm7
    00003ddd: 	movq	%xmm7, %rax
    00003de2: 	movq	%xmm7, 0x30(%rsp)
    00003de8: 	movl	%eax, %r11d
    00003deb: 	movzbl	0x2159(%rsp), %eax
    00003df3: 	addl	%edx, %r11d
    00003df6: 	subl	%eax, %ecx
    00003df8: 	subl	%r9d, %eax
    00003dfb: 	subl	%r8d, %r9d
    00003dfe: 	subl	%edi, %r8d
    00003e01: 	addl	%r10d, %ecx
    00003e04: 	subl	%esi, %edi
    00003e06: 	subl	%r13d, %esi
    00003e09: 	addl	%ecx, %eax
    00003e0b: 	addl	%r9d, %eax
    00003e0e: 	addl	%r8d, %eax
    00003e11: 	addl	%eax, %edi
    00003e13: 	addl	%edi, %esi
    00003e15: 	leal	(%r11,%rsi,8), %esi
    00003e19: 	testb	%sil, %sil
    00003e1c: 	jne	.Ltmp5403 # Offset: 15900
.Ltmp5416:
    00003e22: 	addl	$0x1, %r12d
    00003e26: 	cmpl	%r14d, %r12d
    00003e29: 	jl	.Ltmp5404 # Offset: 15913
.Ltmp5401:
    00003e2f: 	movq	%r15, %rsi
    00003e32: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00003e39: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_ # Offset: 15929
    00003e3e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00003e45: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00003e4c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00003e53: 	je	.Ltmp5405 # Offset: 15955
.Ltmp5451:
    00003e59: 	movq	-0x20(%rax), %r12
    00003e5d: 	callq	clock@PLT # Offset: 15965
    00003e62: 	pxor	%xmm0, %xmm0
    00003e66: 	movq	%rax, end_time(%rip)
    00003e6d: 	movq	%r12, %rdi
    00003e70: 	subq	start_time(%rip), %rax
    00003e77: 	cvtsi2sd	%rax, %xmm0
    00003e7c: 	divsd	DATAat0x4d640(%rip), %xmm0
    00003e84: 	callq	_Z13record_resultdPKc # Offset: 16004
    00003e89: 	movq	0x200(%rsp), %rdi
    00003e91: 	cmpq	(%rsp), %rdi
    00003e95: 	je	.Ltmp5406 # Offset: 16021
    00003e97: 	movq	0x210(%rsp), %rax
    00003e9f: 	leaq	0x1(%rax), %rsi
    00003ea3: 	callq	_ZdlPvm@PLT # Offset: 16035
.Ltmp5406:
    00003ea8: 	movq	0x8(%rsp), %rsi
    00003ead: 	leaq	DATAat0x4d58e(%rip), %rdx
    00003eb4: 	movq	%r15, %rdi
    00003eb7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 16055
    00003ebc: 	movl	0x1c(%rsp), %edx
    00003ec0: 	movq	%r15, %rcx
    00003ec3: 	movl	$0x1f40, %esi
    00003ec8: 	movq	%rbp, %rdi
    00003ecb: 	callq	_Z9test_CSE8Ih14custom_cse_mixIhEEvPKT_iS2_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 16075
    00003ed0: 	movq	0x200(%rsp), %rdi
    00003ed8: 	cmpq	(%rsp), %rdi
    00003edc: 	je	.Ltmp5407 # Offset: 16092
    00003ede: 	movq	0x210(%rsp), %rax
    00003ee6: 	leaq	0x1(%rax), %rsi
    00003eea: 	callq	_ZdlPvm@PLT # Offset: 16106
.Ltmp5407:
    00003eef: 	movq	0x8(%rsp), %rbx
    00003ef4: 	leaq	0x1e0(%rsp), %rdi
    00003efc: 	leaq	DATAat0x4d599(%rip), %rdx
    00003f03: 	movq	%rbx, %rsi
    00003f06: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 16134
    00003f0b: 	movl	iterations(%rip), %edx
    00003f11: 	xorl	%r8d, %r8d
    00003f14: 	xorl	%ecx, %ecx
    00003f16: 	movl	$0x1f40, %esi
    00003f1b: 	movq	0x1e0(%rsp), %rdi
    00003f23: 	callq	_Z9summarizePKciiii # Offset: 16163
    00003f28: 	leaq	DATAat0x4d5a0(%rip), %rdx
    00003f2f: 	movq	%rbx, %rsi
    00003f32: 	movq	%r15, %rdi
    00003f35: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 16181
    00003f3a: 	movl	0x1c(%rsp), %esi
    00003f3e: 	movq	%r15, %rdx
    00003f41: 	movq	%rbp, %rdi
    00003f44: 	callq	_Z16TestUnrolledTypeIhLi4EEvPT_S0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 16196
    00003f49: 	movq	0x200(%rsp), %rdi
    00003f51: 	cmpq	(%rsp), %rdi
    00003f55: 	je	.Ltmp5408 # Offset: 16213
    00003f57: 	movq	0x210(%rsp), %rax
    00003f5f: 	leaq	0x1(%rax), %rsi
    00003f63: 	callq	_ZdlPvm@PLT # Offset: 16227
.Ltmp5408:
    00003f68: 	movq	0x8(%rsp), %rsi
    00003f6d: 	leaq	DATAat0x4d5ae(%rip), %rdx
    00003f74: 	movq	%r15, %rdi
    00003f77: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 16247
    00003f7c: 	movl	0x1c(%rsp), %esi
    00003f80: 	movq	%r15, %rdx
    00003f83: 	movq	%rbp, %rdi
    00003f86: 	callq	_Z16TestUnrolledTypeIhLi8EEvPT_S0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 16262
    00003f8b: 	movq	0x200(%rsp), %rdi
    00003f93: 	cmpq	(%rsp), %rdi
    00003f97: 	je	.Ltmp5409 # Offset: 16279
    00003f99: 	movq	0x210(%rsp), %rax
    00003fa1: 	leaq	0x1(%rax), %rsi
    00003fa5: 	callq	_ZdlPvm@PLT # Offset: 16293
.Ltmp5409:
    00003faa: 	movq	0x1e0(%rsp), %rdi
    00003fb2: 	leaq	0x1f0(%rsp), %rax
    00003fba: 	cmpq	%rax, %rdi
    00003fbd: 	je	.Ltmp5410 # Offset: 16317
    00003fbf: 	movq	0x1f0(%rsp), %rax
    00003fc7: 	leaq	0x1(%rax), %rsi
    00003fcb: 	callq	_ZdlPvm@PLT # Offset: 16331
.Ltmp5410:
    00003fd0: 	movq	0x1c0(%rsp), %rdi
    00003fd8: 	leaq	0x1d0(%rsp), %rax
    00003fe0: 	cmpq	%rax, %rdi
    00003fe3: 	je	.Ltmp5411 # Offset: 16355
    00003fe5: 	movq	0x1d0(%rsp), %rax
    00003fed: 	leaq	0x1(%rax), %rsi
    00003ff1: 	callq	_ZdlPvm@PLT # Offset: 16369
.Ltmp5411:
    00003ff6: 	movq	0x1a0(%rsp), %rdi
    00003ffe: 	leaq	0x1b0(%rsp), %rax
    00004006: 	cmpq	%rax, %rdi
    00004009: 	je	.Ltmp5412 # Offset: 16393
    0000400b: 	movq	0x1b0(%rsp), %rax
    00004013: 	leaq	0x1(%rax), %rsi
    00004017: 	callq	_ZdlPvm@PLT # Offset: 16407
.Ltmp5412:
    0000401c: 	movq	0x180(%rsp), %rdi
    00004024: 	leaq	0x190(%rsp), %rax
    0000402c: 	cmpq	%rax, %rdi
    0000402f: 	je	.Ltmp5413 # Offset: 16431
    00004031: 	movq	0x190(%rsp), %rax
    00004039: 	leaq	0x1(%rax), %rsi
    0000403d: 	callq	_ZdlPvm@PLT # Offset: 16445
.Ltmp5413:
    00004042: 	movq	0x160(%rsp), %rdi
    0000404a: 	cmpq	0x28(%rsp), %rdi
    0000404f: 	je	.Ltmp5414 # Offset: 16463
    00004051: 	movq	0x170(%rsp), %rax
    00004059: 	leaq	0x1(%rax), %rsi
    0000405d: 	callq	_ZdlPvm@PLT # Offset: 16477
.Ltmp5414:
    00004062: 	movq	0x2168(%rsp), %rax
    0000406a: 	subq	%fs:0x28, %rax
    00004073: 	jne	.Ltmp5415 # Offset: 16499
    00004079: 	addq	$0x2178, %rsp
    00004080: 	popq	%rbx
    00004081: 	popq	%rbp
    00004082: 	popq	%r12
    00004084: 	popq	%r13
    00004086: 	popq	%r14
    00004088: 	popq	%r15
    0000408a: 	retq # Offset: 16522
    0000408b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5403:
    00004090: 	movq	0x200(%rsp), %rdx
    00004098: 	leaq	DATAat0x4d004(%rip), %rsi
    0000409f: 	movl	$0x1, %edi
    000040a4: 	xorl	%eax, %eax
    000040a6: 	callq	__printf_chk@PLT # Offset: 16550
    000040ab: 	movl	iterations(%rip), %r14d
    000040b2: 	jmp	.Ltmp5416 # Offset: 16562
    000040b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp5396:
    000040c0: 	movq	0x200(%rsp), %rdx
    000040c8: 	leaq	DATAat0x4d004(%rip), %rsi
    000040cf: 	movl	$0x1, %edi
    000040d4: 	xorl	%eax, %eax
    000040d6: 	callq	__printf_chk@PLT # Offset: 16598
    000040db: 	movl	iterations(%rip), %r14d
    000040e2: 	jmp	.Ltmp5417 # Offset: 16610
    000040e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp5389:
    000040f0: 	movq	0x200(%rsp), %rdx
    000040f8: 	leaq	DATAat0x4d004(%rip), %rsi
    000040ff: 	movl	$0x1, %edi
    00004104: 	xorl	%eax, %eax
    00004106: 	callq	__printf_chk@PLT # Offset: 16646
    0000410b: 	movl	iterations(%rip), %r14d
    00004112: 	jmp	.Ltmp5418 # Offset: 16658
    00004117: 	nopw	(%rax,%rax) # Size: 9
.Ltmp5382:
    00004120: 	movq	0x200(%rsp), %rdx
    00004128: 	leaq	DATAat0x4d004(%rip), %rsi
    0000412f: 	movl	$0x1, %edi
    00004134: 	xorl	%eax, %eax
    00004136: 	callq	__printf_chk@PLT # Offset: 16694
    0000413b: 	movl	iterations(%rip), %r14d
    00004142: 	jmp	.Ltmp5419 # Offset: 16706
    00004147: 	nopw	(%rax,%rax) # Size: 9
.Ltmp5373:
    00004150: 	movq	0x200(%rsp), %rdx
    00004158: 	leaq	DATAat0x4d004(%rip), %rsi
    0000415f: 	movl	$0x1, %edi
    00004164: 	xorl	%eax, %eax
    00004166: 	callq	__printf_chk@PLT # Offset: 16742
    0000416b: 	movl	iterations(%rip), %r14d
    00004172: 	jmp	.Ltmp5420 # Offset: 16754
    00004177: 	nopw	(%rax,%rax) # Size: 9
.Ltmp5367:
    00004180: 	movq	0x200(%rsp), %rdx
    00004188: 	leaq	DATAat0x4d004(%rip), %rsi
    0000418f: 	movl	$0x1, %edi
    00004194: 	xorl	%eax, %eax
    00004196: 	callq	__printf_chk@PLT # Offset: 16790
    0000419b: 	movl	iterations(%rip), %r14d
    000041a2: 	jmp	.Ltmp5421 # Offset: 16802
    000041a7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp5360:
    000041b0: 	movq	0x200(%rsp), %rdx
    000041b8: 	leaq	DATAat0x4d004(%rip), %rsi
    000041bf: 	movl	$0x1, %edi
    000041c4: 	xorl	%eax, %eax
    000041c6: 	callq	__printf_chk@PLT # Offset: 16838
    000041cb: 	movl	iterations(%rip), %r14d
    000041d2: 	jmp	.Ltmp5422 # Offset: 16850
    000041d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp5353:
    000041e0: 	movq	0x200(%rsp), %rdx
    000041e8: 	leaq	DATAat0x4d004(%rip), %rsi
    000041ef: 	movl	$0x1, %edi
    000041f4: 	xorl	%eax, %eax
    000041f6: 	callq	__printf_chk@PLT # Offset: 16886
    000041fb: 	movl	iterations(%rip), %r14d
    00004202: 	jmp	.Ltmp5423 # Offset: 16898
    00004207: 	nopw	(%rax,%rax) # Size: 9
.Ltmp5346:
    00004210: 	movq	0x200(%rsp), %rdx
    00004218: 	leaq	DATAat0x4d004(%rip), %rsi
    0000421f: 	movl	$0x1, %edi
    00004224: 	xorl	%eax, %eax
    00004226: 	callq	__printf_chk@PLT # Offset: 16934
    0000422b: 	movl	iterations(%rip), %r14d
    00004232: 	jmp	.Ltmp5424 # Offset: 16946
    00004237: 	nopw	(%rax,%rax) # Size: 9
.Ltmp5339:
    00004240: 	movq	0x200(%rsp), %rdx
    00004248: 	leaq	DATAat0x4d004(%rip), %rsi
    0000424f: 	movl	$0x1, %edi
    00004254: 	xorl	%eax, %eax
    00004256: 	callq	__printf_chk@PLT # Offset: 16982
    0000425b: 	movl	iterations(%rip), %r14d
    00004262: 	jmp	.Ltmp5425 # Offset: 16994
    00004267: 	nopw	(%rax,%rax) # Size: 9
.Ltmp5330:
    00004270: 	movq	0x200(%rsp), %rdx
    00004278: 	leaq	DATAat0x4d004(%rip), %rsi
    0000427f: 	movl	$0x1, %edi
    00004284: 	xorl	%eax, %eax
    00004286: 	callq	__printf_chk@PLT # Offset: 17030
    0000428b: 	movl	iterations(%rip), %r14d
    00004292: 	jmp	.Ltmp5426 # Offset: 17042
    00004297: 	nopw	(%rax,%rax) # Size: 9
.Ltmp5324:
    000042a0: 	movq	0x200(%rsp), %rdx
    000042a8: 	leaq	DATAat0x4d004(%rip), %rsi
    000042af: 	movl	$0x1, %edi
    000042b4: 	xorl	%eax, %eax
    000042b6: 	callq	__printf_chk@PLT # Offset: 17078
    000042bb: 	movl	iterations(%rip), %r14d
    000042c2: 	jmp	.Ltmp5427 # Offset: 17090
    000042c7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp5317:
    000042d0: 	movq	0x200(%rsp), %rdx
    000042d8: 	leaq	DATAat0x4d004(%rip), %rsi
    000042df: 	movl	$0x1, %edi
    000042e4: 	xorl	%eax, %eax
    000042e6: 	callq	__printf_chk@PLT # Offset: 17126
    000042eb: 	movl	iterations(%rip), %r14d
    000042f2: 	jmp	.Ltmp5428 # Offset: 17138
    000042f7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp5311:
    00004300: 	movq	0x200(%rsp), %rdx
    00004308: 	leaq	DATAat0x4d004(%rip), %rsi
    0000430f: 	movl	$0x1, %edi
    00004314: 	xorl	%eax, %eax
    00004316: 	callq	__printf_chk@PLT # Offset: 17174
    0000431b: 	movl	iterations(%rip), %eax
    00004321: 	movl	%eax, 0x24(%rsp)
    00004325: 	jmp	.Ltmp5429 # Offset: 17189
    0000432a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5305:
    00004330: 	movq	0x200(%rsp), %rdx
    00004338: 	leaq	DATAat0x4d004(%rip), %rsi
    0000433f: 	movl	$0x1, %edi
    00004344: 	xorl	%eax, %eax
    00004346: 	callq	__printf_chk@PLT # Offset: 17222
    0000434b: 	movl	iterations(%rip), %r14d
    00004352: 	jmp	.Ltmp5430 # Offset: 17234
    00004357: 	nopw	(%rax,%rax) # Size: 9
.Ltmp5298:
    00004360: 	movq	0x200(%rsp), %rdx
    00004368: 	leaq	DATAat0x4d004(%rip), %rsi
    0000436f: 	movl	$0x1, %edi
    00004374: 	xorl	%eax, %eax
    00004376: 	callq	__printf_chk@PLT # Offset: 17270
    0000437b: 	movl	iterations(%rip), %r14d
    00004382: 	jmp	.Ltmp5431 # Offset: 17282
    00004387: 	nopw	(%rax,%rax) # Size: 9
.Ltmp5291:
    00004390: 	movq	0x200(%rsp), %rdx
    00004398: 	leaq	DATAat0x4d004(%rip), %rsi
    0000439f: 	movl	$0x1, %edi
    000043a4: 	xorl	%eax, %eax
    000043a6: 	callq	__printf_chk@PLT # Offset: 17318
    000043ab: 	movl	iterations(%rip), %r14d
    000043b2: 	jmp	.Ltmp5432 # Offset: 17330
    000043b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp5285:
    000043c0: 	movq	0x200(%rsp), %rdx
    000043c8: 	leaq	DATAat0x4d004(%rip), %rsi
    000043cf: 	movl	$0x1, %edi
    000043d4: 	xorl	%eax, %eax
    000043d6: 	callq	__printf_chk@PLT # Offset: 17366
    000043db: 	movl	iterations(%rip), %eax
    000043e1: 	movl	%eax, 0x24(%rsp)
    000043e5: 	jmp	.Ltmp5433 # Offset: 17381
    000043ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5278:
    000043f0: 	movq	0x200(%rsp), %rdx
    000043f8: 	leaq	DATAat0x4d004(%rip), %rsi
    000043ff: 	movl	$0x1, %edi
    00004404: 	xorl	%eax, %eax
    00004406: 	callq	__printf_chk@PLT # Offset: 17414
    0000440b: 	movl	iterations(%rip), %r14d
    00004412: 	jmp	.Ltmp5434 # Offset: 17426
    00004417: 	nopw	(%rax,%rax) # Size: 9
.Ltmp5272:
    00004420: 	movq	0x200(%rsp), %rdx
    00004428: 	leaq	DATAat0x4d004(%rip), %rsi
    0000442f: 	movl	$0x1, %edi
    00004434: 	xorl	%eax, %eax
    00004436: 	callq	__printf_chk@PLT # Offset: 17462
    0000443b: 	movl	iterations(%rip), %r14d
    00004442: 	jmp	.Ltmp5435 # Offset: 17474
    00004447: 	nopw	(%rax,%rax) # Size: 9
.Ltmp5266:
    00004450: 	movq	0x200(%rsp), %rdx
    00004458: 	leaq	DATAat0x4d004(%rip), %rsi
    0000445f: 	movl	$0x1, %edi
    00004464: 	xorl	%eax, %eax
    00004466: 	callq	__printf_chk@PLT # Offset: 17510
    0000446b: 	movl	iterations(%rip), %r14d
    00004472: 	jmp	.Ltmp5436 # Offset: 17522
    00004477: 	nopw	(%rax,%rax) # Size: 9
.Ltmp5260:
    00004480: 	movq	0x200(%rsp), %rdx
    00004488: 	movq	%r13, %rsi
    0000448b: 	movl	$0x1, %edi
    00004490: 	xorl	%eax, %eax
    00004492: 	callq	__printf_chk@PLT # Offset: 17554
    00004497: 	movl	iterations(%rip), %ecx
    0000449d: 	jmp	.Ltmp5437 # Offset: 17565
    000044a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5254:
    000044a8: 	movq	0x200(%rsp), %rdx
    000044b0: 	movq	%r13, %rsi
    000044b3: 	movl	$0x1, %edi
    000044b8: 	xorl	%eax, %eax
    000044ba: 	callq	__printf_chk@PLT # Offset: 17594
    000044bf: 	movl	iterations(%rip), %ecx
    000044c5: 	jmp	.Ltmp5438 # Offset: 17605
    000044ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5248:
    000044d0: 	movq	0x200(%rsp), %rdx
    000044d8: 	movq	%r13, %rsi
    000044db: 	movl	$0x1, %edi
    000044e0: 	xorl	%eax, %eax
    000044e2: 	callq	__printf_chk@PLT # Offset: 17634
    000044e7: 	movl	iterations(%rip), %ecx
    000044ed: 	jmp	.Ltmp5439 # Offset: 17645
    000044f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5242:
    000044f8: 	movq	0x200(%rsp), %rdx
    00004500: 	movq	%r13, %rsi
    00004503: 	movl	$0x1, %edi
    00004508: 	xorl	%eax, %eax
    0000450a: 	callq	__printf_chk@PLT # Offset: 17674
    0000450f: 	movl	iterations(%rip), %ecx
    00004515: 	jmp	.Ltmp5440 # Offset: 17685
    0000451a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5236:
    00004520: 	movq	0x200(%rsp), %rdx
    00004528: 	movq	%r13, %rsi
    0000452b: 	movl	$0x1, %edi
    00004530: 	xorl	%eax, %eax
    00004532: 	callq	__printf_chk@PLT # Offset: 17714
    00004537: 	movl	iterations(%rip), %ecx
    0000453d: 	jmp	.Ltmp5441 # Offset: 17725
    00004542: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5230:
    00004548: 	movq	0x200(%rsp), %rdx
    00004550: 	movq	%r13, %rsi
    00004553: 	movl	$0x1, %edi
    00004558: 	xorl	%eax, %eax
    0000455a: 	callq	__printf_chk@PLT # Offset: 17754
    0000455f: 	movl	iterations(%rip), %ecx
    00004565: 	jmp	.Ltmp5442 # Offset: 17765
    0000456a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5224:
    00004570: 	movq	0x200(%rsp), %rdx
    00004578: 	movq	%r13, %rsi
    0000457b: 	movl	$0x1, %edi
    00004580: 	xorl	%eax, %eax
    00004582: 	callq	__printf_chk@PLT # Offset: 17794
    00004587: 	movl	iterations(%rip), %ecx
    0000458d: 	jmp	.Ltmp5443 # Offset: 17805
    00004592: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5218:
    00004598: 	movq	0x200(%rsp), %rdx
    000045a0: 	movq	%r13, %rsi
    000045a3: 	movl	$0x1, %edi
    000045a8: 	xorl	%eax, %eax
    000045aa: 	callq	__printf_chk@PLT # Offset: 17834
    000045af: 	movl	iterations(%rip), %ecx
    000045b5: 	jmp	.Ltmp5444 # Offset: 17845
    000045ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5212:
    000045c0: 	movq	0x200(%rsp), %rdx
    000045c8: 	movq	%r13, %rsi
    000045cb: 	movl	$0x1, %edi
    000045d0: 	xorl	%eax, %eax
    000045d2: 	callq	__printf_chk@PLT # Offset: 17874
    000045d7: 	movl	iterations(%rip), %ecx
    000045dd: 	jmp	.Ltmp5445 # Offset: 17885
    000045e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5206:
    000045e8: 	movq	0x200(%rsp), %rdx
    000045f0: 	movq	%r13, %rsi
    000045f3: 	movl	$0x1, %edi
    000045f8: 	xorl	%eax, %eax
    000045fa: 	callq	__printf_chk@PLT # Offset: 17914
    000045ff: 	movl	iterations(%rip), %ecx
    00004605: 	jmp	.Ltmp5446 # Offset: 17925
    0000460a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5200:
    00004610: 	movq	0x200(%rsp), %rdx
    00004618: 	movq	%r13, %rsi
    0000461b: 	movl	$0x1, %edi
    00004620: 	xorl	%eax, %eax
    00004622: 	callq	__printf_chk@PLT # Offset: 17954
    00004627: 	movl	iterations(%rip), %ecx
    0000462d: 	jmp	.Ltmp5447 # Offset: 17965
    00004632: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5194:
    00004638: 	movq	0x200(%rsp), %rdx
    00004640: 	movq	%r13, %rsi
    00004643: 	movl	$0x1, %edi
    00004648: 	xorl	%eax, %eax
    0000464a: 	callq	__printf_chk@PLT # Offset: 17994
    0000464f: 	movl	iterations(%rip), %ecx
    00004655: 	jmp	.Ltmp5448 # Offset: 18005
    0000465a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5188:
    00004660: 	movq	0x200(%rsp), %rdx
    00004668: 	movq	%r13, %rsi
    0000466b: 	movl	$0x1, %edi
    00004670: 	xorl	%eax, %eax
    00004672: 	callq	__printf_chk@PLT # Offset: 18034
    00004677: 	movl	iterations(%rip), %ecx
    0000467d: 	jmp	.Ltmp5449 # Offset: 18045
.Ltmp5190:
    00004682: 	movq	-0x8(%rdx), %rax
    00004686: 	addq	$0x200, %rax
    0000468c: 	jmp	.Ltmp5450 # Offset: 18060
.Ltmp5405:
    00004691: 	movq	-0x8(%rdx), %rax
    00004695: 	addq	$0x200, %rax
    0000469b: 	jmp	.Ltmp5451 # Offset: 18075
.Ltmp5398:
    000046a0: 	movq	-0x8(%rdx), %rax
    000046a4: 	addq	$0x200, %rax
    000046aa: 	jmp	.Ltmp5452 # Offset: 18090
.Ltmp5391:
    000046af: 	movq	-0x8(%rdx), %rax
    000046b3: 	addq	$0x200, %rax
    000046b9: 	jmp	.Ltmp5453 # Offset: 18105
.Ltmp5384:
    000046be: 	movq	-0x8(%rdx), %rax
    000046c2: 	addq	$0x200, %rax
    000046c8: 	jmp	.Ltmp5454 # Offset: 18120
.Ltmp5375:
    000046cd: 	movq	-0x8(%rdx), %rax
    000046d1: 	addq	$0x200, %rax
    000046d7: 	jmp	.Ltmp5455 # Offset: 18135
.Ltmp5369:
    000046dc: 	movq	-0x8(%rdx), %rax
    000046e0: 	addq	$0x200, %rax
    000046e6: 	jmp	.Ltmp5456 # Offset: 18150
.Ltmp5362:
    000046eb: 	movq	-0x8(%rdx), %rax
    000046ef: 	addq	$0x200, %rax
    000046f5: 	jmp	.Ltmp5457 # Offset: 18165
.Ltmp5355:
    000046fa: 	movq	-0x8(%rdx), %rax
    000046fe: 	addq	$0x200, %rax
    00004704: 	jmp	.Ltmp5458 # Offset: 18180
.Ltmp5348:
    00004709: 	movq	-0x8(%rdx), %rax
    0000470d: 	addq	$0x200, %rax
    00004713: 	jmp	.Ltmp5459 # Offset: 18195
.Ltmp5341:
    00004718: 	movq	-0x8(%rdx), %rax
    0000471c: 	addq	$0x200, %rax
    00004722: 	jmp	.Ltmp5460 # Offset: 18210
.Ltmp5332:
    00004727: 	movq	-0x8(%rdx), %rax
    0000472b: 	addq	$0x200, %rax
    00004731: 	jmp	.Ltmp5461 # Offset: 18225
.Ltmp5326:
    00004736: 	movq	-0x8(%rdx), %rax
    0000473a: 	addq	$0x200, %rax
    00004740: 	jmp	.Ltmp5462 # Offset: 18240
.Ltmp5319:
    00004745: 	movq	-0x8(%rdx), %rax
    00004749: 	addq	$0x200, %rax
    0000474f: 	jmp	.Ltmp5463 # Offset: 18255
.Ltmp5313:
    00004754: 	movq	-0x8(%rdx), %rax
    00004758: 	addq	$0x200, %rax
    0000475e: 	jmp	.Ltmp5464 # Offset: 18270
.Ltmp5307:
    00004763: 	movq	-0x8(%rdx), %rax
    00004767: 	addq	$0x200, %rax
    0000476d: 	jmp	.Ltmp5465 # Offset: 18285
.Ltmp5300:
    00004772: 	movq	-0x8(%rdx), %rax
    00004776: 	addq	$0x200, %rax
    0000477c: 	jmp	.Ltmp5466 # Offset: 18300
.Ltmp5293:
    00004781: 	movq	-0x8(%rdx), %rax
    00004785: 	addq	$0x200, %rax
    0000478b: 	jmp	.Ltmp5467 # Offset: 18315
.Ltmp5287:
    00004790: 	movq	-0x8(%rdx), %rax
    00004794: 	addq	$0x200, %rax
    0000479a: 	jmp	.Ltmp5468 # Offset: 18330
.Ltmp5280:
    0000479f: 	movq	-0x8(%rdx), %rax
    000047a3: 	addq	$0x200, %rax
    000047a9: 	jmp	.Ltmp5469 # Offset: 18345
.Ltmp5274:
    000047ae: 	movq	-0x8(%rdx), %rax
    000047b2: 	addq	$0x200, %rax
    000047b8: 	jmp	.Ltmp5470 # Offset: 18360
.Ltmp5268:
    000047bd: 	movq	-0x8(%rdx), %rax
    000047c1: 	addq	$0x200, %rax
    000047c7: 	jmp	.Ltmp5471 # Offset: 18375
.Ltmp5262:
    000047cc: 	movq	-0x8(%rdx), %rax
    000047d0: 	addq	$0x200, %rax
    000047d6: 	jmp	.Ltmp5472 # Offset: 18390
.Ltmp5256:
    000047db: 	movq	-0x8(%rdx), %rax
    000047df: 	addq	$0x200, %rax
    000047e5: 	jmp	.Ltmp5473 # Offset: 18405
.Ltmp5250:
    000047ea: 	movq	-0x8(%rdx), %rax
    000047ee: 	addq	$0x200, %rax
    000047f4: 	jmp	.Ltmp5474 # Offset: 18420
.Ltmp5244:
    000047f9: 	movq	-0x8(%rdx), %rax
    000047fd: 	addq	$0x200, %rax
    00004803: 	jmp	.Ltmp5475 # Offset: 18435
.Ltmp5238:
    00004808: 	movq	-0x8(%rdx), %rax
    0000480c: 	addq	$0x200, %rax
    00004812: 	jmp	.Ltmp5476 # Offset: 18450
.Ltmp5232:
    00004817: 	movq	-0x8(%rdx), %rax
    0000481b: 	addq	$0x200, %rax
    00004821: 	jmp	.Ltmp5477 # Offset: 18465
.Ltmp5226:
    00004826: 	movq	-0x8(%rdx), %rax
    0000482a: 	addq	$0x200, %rax
    00004830: 	jmp	.Ltmp5478 # Offset: 18480
.Ltmp5220:
    00004835: 	movq	-0x8(%rdx), %rax
    00004839: 	addq	$0x200, %rax
    0000483f: 	jmp	.Ltmp5479 # Offset: 18495
.Ltmp5214:
    00004844: 	movq	-0x8(%rdx), %rax
    00004848: 	addq	$0x200, %rax
    0000484e: 	jmp	.Ltmp5480 # Offset: 18510
.Ltmp5208:
    00004853: 	movq	-0x8(%rdx), %rax
    00004857: 	addq	$0x200, %rax
    0000485d: 	jmp	.Ltmp5481 # Offset: 18525
.Ltmp5202:
    00004862: 	movq	-0x8(%rdx), %rax
    00004866: 	addq	$0x200, %rax
    0000486c: 	jmp	.Ltmp5482 # Offset: 18540
.Ltmp5196:
    00004871: 	movq	-0x8(%rdx), %rax
    00004875: 	addq	$0x200, %rax
    0000487b: 	jmp	.Ltmp5483 # Offset: 18555
.Ltmp5415:
    00004880: 	callq	__stack_chk_fail@PLT # Offset: 18560
    00004885: 	endbr64
    00004889: 	movq	%rax, %rbp
    0000488c: 	jmp	.Ltmp5484 # Offset: 18572
    0000488e: 	endbr64
.Ltmp5486:
    00004892: 	movq	%rax, %rbp
    00004895: 	jmp	.Ltmp5485 # Offset: 18581
    00004897: 	endbr64
    0000489b: 	jmp	.Ltmp5486 # Offset: 18587
.Ltmp5492:
    0000489d: 	movq	0x200(%rsp), %rdi
    000048a5: 	cmpq	(%rsp), %rdi
    000048a9: 	je	.Ltmp5484 # Offset: 18601
.Ltmp5499:
    000048ab: 	movq	0x210(%rsp), %rax
    000048b3: 	leaq	0x1(%rax), %rsi
    000048b7: 	callq	_ZdlPvm@PLT # Offset: 18615
.Ltmp5484:
    000048bc: 	movq	0x160(%rsp), %rdi
    000048c4: 	cmpq	0x28(%rsp), %rdi
    000048c9: 	je	.Ltmp5487 # Offset: 18633
    000048cb: 	movq	0x170(%rsp), %rax
    000048d3: 	leaq	0x1(%rax), %rsi
    000048d7: 	callq	_ZdlPvm@PLT # Offset: 18647
.Ltmp5487:
    000048dc: 	movq	%rbp, %rdi
    000048df: 	callq	_Unwind_Resume@PLT # Offset: 18655
.Ltmp5485:
    000048e4: 	movq	0x200(%rsp), %rdi
    000048ec: 	cmpq	(%rsp), %rdi
    000048f0: 	je	.Ltmp5488 # Offset: 18672
    000048f2: 	movq	0x210(%rsp), %rax
    000048fa: 	leaq	0x1(%rax), %rsi
    000048fe: 	callq	_ZdlPvm@PLT # Offset: 18686
.Ltmp5488:
    00004903: 	movq	0x1e0(%rsp), %rdi
    0000490b: 	leaq	0x1f0(%rsp), %rax
    00004913: 	cmpq	%rax, %rdi
    00004916: 	je	.Ltmp5489 # Offset: 18710
    00004918: 	movq	0x1f0(%rsp), %rax
    00004920: 	leaq	0x1(%rax), %rsi
    00004924: 	callq	_ZdlPvm@PLT # Offset: 18724
.Ltmp5489:
    00004929: 	movq	0x1c0(%rsp), %rdi
    00004931: 	leaq	0x1d0(%rsp), %rax
    00004939: 	cmpq	%rax, %rdi
    0000493c: 	je	.Ltmp5490 # Offset: 18748
    0000493e: 	movq	0x1d0(%rsp), %rax
    00004946: 	leaq	0x1(%rax), %rsi
    0000494a: 	callq	_ZdlPvm@PLT # Offset: 18762
.Ltmp5490:
    0000494f: 	movq	0x1a0(%rsp), %rdi
    00004957: 	leaq	0x1b0(%rsp), %rax
    0000495f: 	cmpq	%rax, %rdi
    00004962: 	je	.Ltmp5491 # Offset: 18786
    00004964: 	movq	0x1b0(%rsp), %rax
    0000496c: 	leaq	0x1(%rax), %rsi
    00004970: 	callq	_ZdlPvm@PLT # Offset: 18800
.Ltmp5491:
    00004975: 	movq	0x180(%rsp), %rdi
    0000497d: 	leaq	0x190(%rsp), %rax
    00004985: 	cmpq	%rax, %rdi
    00004988: 	je	.Ltmp5484 # Offset: 18824
    0000498e: 	movq	0x190(%rsp), %rax
    00004996: 	leaq	0x1(%rax), %rsi
    0000499a: 	callq	_ZdlPvm@PLT # Offset: 18842
    0000499f: 	jmp	.Ltmp5484 # Offset: 18847
    000049a4: 	endbr64
.Ltmp5493:
    000049a8: 	movq	%rax, %rbp
    000049ab: 	jmp	.Ltmp5492 # Offset: 18859
    000049b0: 	endbr64
    000049b4: 	jmp	.Ltmp5493 # Offset: 18868
    000049b6: 	endbr64
    000049ba: 	jmp	.Ltmp5493 # Offset: 18874
    000049bc: 	endbr64
    000049c0: 	jmp	.Ltmp5493 # Offset: 18880
    000049c2: 	endbr64
    000049c6: 	jmp	.Ltmp5493 # Offset: 18886
    000049c8: 	endbr64
    000049cc: 	jmp	.Ltmp5493 # Offset: 18892
    000049ce: 	endbr64
    000049d2: 	jmp	.Ltmp5493 # Offset: 18898
    000049d4: 	endbr64
    000049d8: 	jmp	.Ltmp5493 # Offset: 18904
    000049da: 	endbr64
.Ltmp5501:
    000049de: 	movq	%rax, %rbp
    000049e1: 	jmp	.Ltmp5494 # Offset: 18913
    000049e3: 	endbr64
.Ltmp5496:
    000049e7: 	movq	%rax, %rbp
    000049ea: 	jmp	.Ltmp5495 # Offset: 18922
    000049ef: 	endbr64
    000049f3: 	jmp	.Ltmp5496 # Offset: 18931
    000049f5: 	endbr64
    000049f9: 	jmp	.Ltmp5496 # Offset: 18937
    000049fb: 	endbr64
    000049ff: 	jmp	.Ltmp5496 # Offset: 18943
    00004a01: 	endbr64
    00004a05: 	jmp	.Ltmp5496 # Offset: 18949
    00004a07: 	endbr64
    00004a0b: 	jmp	.Ltmp5496 # Offset: 18955
    00004a0d: 	endbr64
    00004a11: 	jmp	.Ltmp5496 # Offset: 18961
    00004a13: 	endbr64
    00004a17: 	movq	%rax, %rbp
    00004a1a: 	jmp	.Ltmp5491 # Offset: 18970
    00004a1f: 	endbr64
    00004a23: 	jmp	.Ltmp5496 # Offset: 18979
    00004a25: 	endbr64
    00004a29: 	movq	%rax, %rbp
    00004a2c: 	jmp	.Ltmp5490 # Offset: 18988
    00004a31: 	endbr64
    00004a35: 	jmp	.Ltmp5496 # Offset: 18997
    00004a37: 	endbr64
    00004a3b: 	jmp	.Ltmp5496 # Offset: 19003
    00004a3d: 	endbr64
    00004a41: 	jmp	.Ltmp5496 # Offset: 19009
    00004a43: 	endbr64
    00004a47: 	jmp	.Ltmp5496 # Offset: 19015
    00004a49: 	endbr64
    00004a4d: 	jmp	.Ltmp5496 # Offset: 19021
.Ltmp5494:
    00004a4f: 	movq	0x200(%rsp), %rdi
    00004a57: 	cmpq	(%rsp), %rdi
    00004a5b: 	je	.Ltmp5490 # Offset: 19035
    00004a61: 	movq	0x210(%rsp), %rax
    00004a69: 	leaq	0x1(%rax), %rsi
    00004a6d: 	callq	_ZdlPvm@PLT # Offset: 19053
    00004a72: 	jmp	.Ltmp5490 # Offset: 19058
.Ltmp5495:
    00004a77: 	movq	0x200(%rsp), %rdi
    00004a7f: 	cmpq	(%rsp), %rdi
    00004a83: 	je	.Ltmp5491 # Offset: 19075
    00004a89: 	movq	0x210(%rsp), %rax
    00004a91: 	leaq	0x1(%rax), %rsi
    00004a95: 	callq	_ZdlPvm@PLT # Offset: 19093
    00004a9a: 	jmp	.Ltmp5491 # Offset: 19098
    00004a9f: 	endbr64
    00004aa3: 	jmp	.Ltmp5493 # Offset: 19107
    00004aa8: 	endbr64
    00004aac: 	jmp	.Ltmp5493 # Offset: 19116
    00004ab1: 	endbr64
    00004ab5: 	jmp	.Ltmp5493 # Offset: 19125
    00004aba: 	endbr64
    00004abe: 	jmp	.Ltmp5493 # Offset: 19134
    00004ac3: 	endbr64
    00004ac7: 	movq	%rax, %rbp
    00004aca: 	jmp	.Ltmp5497 # Offset: 19146
    00004acc: 	endbr64
.Ltmp5500:
    00004ad0: 	movq	%rax, %rbp
    00004ad3: 	jmp	.Ltmp5498 # Offset: 19155
.Ltmp5497:
    00004ad5: 	movq	0x200(%rsp), %rdi
    00004add: 	leaq	0x210(%rsp), %rax
    00004ae5: 	cmpq	%rax, %rdi
    00004ae8: 	jne	.Ltmp5499 # Offset: 19176
    00004aee: 	jmp	.Ltmp5484 # Offset: 19182
    00004af3: 	endbr64
    00004af7: 	movq	%rax, %rbp
    00004afa: 	jmp	.Ltmp5488 # Offset: 19194
    00004aff: 	endbr64
    00004b03: 	jmp	.Ltmp5500 # Offset: 19203
.Ltmp5498:
    00004b05: 	movq	0x200(%rsp), %rdi
    00004b0d: 	cmpq	(%rsp), %rdi
    00004b11: 	je	.Ltmp5489 # Offset: 19217
    00004b17: 	movq	0x210(%rsp), %rax
    00004b1f: 	leaq	0x1(%rax), %rsi
    00004b23: 	callq	_ZdlPvm@PLT # Offset: 19235
    00004b28: 	jmp	.Ltmp5489 # Offset: 19240
    00004b2d: 	endbr64
    00004b31: 	jmp	.Ltmp5500 # Offset: 19249
    00004b33: 	endbr64
    00004b37: 	jmp	.Ltmp5500 # Offset: 19255
    00004b39: 	endbr64
    00004b3d: 	jmp	.Ltmp5500 # Offset: 19261
    00004b3f: 	endbr64
    00004b43: 	jmp	.Ltmp5500 # Offset: 19267
    00004b45: 	endbr64
    00004b49: 	jmp	.Ltmp5500 # Offset: 19273
    00004b4b: 	endbr64
    00004b4f: 	jmp	.Ltmp5500 # Offset: 19279
    00004b54: 	endbr64
    00004b58: 	jmp	.Ltmp5500 # Offset: 19288
    00004b5d: 	endbr64
    00004b61: 	jmp	.Ltmp5500 # Offset: 19297
    00004b66: 	endbr64
    00004b6a: 	jmp	.Ltmp5501 # Offset: 19306
    00004b6f: 	endbr64
    00004b73: 	jmp	.Ltmp5501 # Offset: 19315
    00004b78: 	endbr64
    00004b7c: 	jmp	.Ltmp5501 # Offset: 19324
    00004b81: 	endbr64
    00004b85: 	jmp	.Ltmp5501 # Offset: 19333
    00004b8a: 	endbr64
    00004b8e: 	jmp	.Ltmp5501 # Offset: 19342
    00004b93: 	endbr64
    00004b97: 	jmp	.Ltmp5501 # Offset: 19351
    00004b9c: 	endbr64
    00004ba0: 	jmp	.Ltmp5501 # Offset: 19360
    00004ba5: 	endbr64
    00004ba9: 	jmp	.Ltmp5501 # Offset: 19369
    00004bae: 	endbr64
    00004bb2: 	jmp	.Ltmp5500 # Offset: 19378
    00004bb7: 	endbr64
    00004bbb: 	jmp	.Ltmp5501 # Offset: 19387
    00004bc0: 	endbr64
    00004bc4: 	movq	%rax, %rbp
    00004bc7: 	jmp	.Ltmp5489 # Offset: 19399
    00004bcc: 	endbr64
    00004bd0: 	jmp	.Ltmp5501 # Offset: 19408
    00004bd5: 	endbr64
    00004bd9: 	jmp	.Ltmp5500 # Offset: 19417
    00004bde: 	endbr64
    00004be2: 	jmp	.Ltmp5500 # Offset: 19426
    00004be7: 	endbr64
    00004beb: 	jmp	.Ltmp5501 # Offset: 19435
    00004bf0: 	endbr64
    00004bf4: 	jmp	.Ltmp5501 # Offset: 19444
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIhEvd"

Binary Function "_fini" after disassembly {
  Number      : 191
  State       : disassembled
  Address     : 0x4c74c
  Size        : 0xd
  MaxSize     : 0xd
  Offset      : 0x4c74c
  Section     : .fini
  Orc Section : .local.text._fini
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0190:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	addq	$0x8, %rsp
    0000000c: 	retq # Offset: 12
DWARF CFI Instructions:
    <empty>
End of Function "_fini"

BOLT-INFO: 0 out of 192 functions in the binary (0.0%) have non-empty execution profile
BOLT-INFO: 4984 instructions were shortened
BOLT-INFO: removed 636 empty blocks
BOLT-INFO: patched build-id (flipped last bit)
BOLT: 187 out of 219 functions were overwritten.
BOLT-INFO: rewriting .eh_frame_hdr in-place
BOLT-INFO: setting _end to 0x208a90
