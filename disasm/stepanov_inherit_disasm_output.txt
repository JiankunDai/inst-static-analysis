BOLT-INFO: shared object or position-independent executable detected
BOLT-INFO: Target architecture: x86_64
BOLT-INFO: BOLT version: <unknown>
BOLT-INFO: first alloc address is 0x0
BOLT-INFO: creating new program header table at address 0x200000, offset 0x200000
BOLT-INFO: enabling lite mode
BOLT-WARNING: ignoring symbol __bss_start at 0x23030, which lies outside .bss
BOLT-WARNING: split function detected on input : _Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.cold
Binary Function "_init" after disassembly {
  Number      : 1
  State       : disassembled
  Address     : 0x2000
  Size        : 0x1b
  MaxSize     : 0x1b
  Offset      : 0x2000
  Section     : .init
  Orc Section : .local.text._init
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB00:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	movq	DATAat0x22ff0(%rip), %rax
    0000000f: 	testq	%rax, %rax
    00000012: 	je	.Ltmp0 # Offset: 18
    00000014: 	callq	*%rax # Offset: 20
.Ltmp0:
    00000016: 	addq	$0x8, %rsp
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_init"

Binary Function "main" after disassembly {
  Number      : 4
  State       : disassembled
  Address     : 0x2420
  Size        : 0xcb
  MaxSize     : 0xd0
  Offset      : 0x2420
  Section     : .text
  Orc Section : .local.text.main
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB03:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	pushq	%rbp
    0000000b: 	pushq	%rbx
    0000000c: 	testl	%edi, %edi
    0000000e: 	jle	.Ltmp1 # Offset: 14
    00000014: 	leal	-0x1(%rdi), %eax
    00000017: 	movl	%edi, %r13d
    0000001a: 	movq	%rsi, %r14
    0000001d: 	movq	%rsi, %rbx
    00000020: 	leaq	0x8(%rsi,%rax,8), %r12
    00000025: 	leaq	DATAat0x1d1b6(%rip), %rbp
    0000002c: 	nopl	(%rax) # Size: 4
.Ltmp2:
    00000030: 	movq	(%rbx), %rdx
    00000033: 	movq	%rbp, %rsi
    00000036: 	movl	$0x1, %edi
    0000003b: 	xorl	%eax, %eax
    0000003d: 	addq	$0x8, %rbx
    00000041: 	callq	__printf_chk@PLT # Offset: 65
    00000046: 	cmpq	%r12, %rbx
    00000049: 	jne	.Ltmp2 # Offset: 73
    0000004b: 	xorl	%eax, %eax
    0000004d: 	leaq	DATAat0x1d19c(%rip), %rsi
    00000054: 	movl	$0x1, %edi
    00000059: 	callq	__printf_chk@PLT # Offset: 89
    0000005e: 	cmpl	$0x1, %r13d
    00000062: 	jg	.Ltmp3 # Offset: 98
.Ltmp4:
    00000064: 	callq	_Z11TestOneTypeIdEvv # Offset: 100
    00000069: 	shll	$0x2, iterations(%rip)
    00000070: 	callq	_Z11TestOneTypeIiEvv # Offset: 112
    00000075: 	callq	_Z11TestOneTypeImEvv # Offset: 117
    0000007a: 	popq	%rbx
    0000007b: 	xorl	%eax, %eax
    0000007d: 	popq	%rbp
    0000007e: 	popq	%r12
    00000080: 	popq	%r13
    00000082: 	popq	%r14
    00000084: 	retq # Offset: 132
.Ltmp3:
    00000085: 	movq	0x8(%r14), %rdi
    00000089: 	movl	$0xa, %edx
    0000008e: 	xorl	%esi, %esi
    00000090: 	callq	strtol@PLT # Offset: 144
    00000095: 	movl	%eax, iterations(%rip)
    0000009b: 	cmpl	$0x2, %r13d
    0000009f: 	jle	.Ltmp4 # Offset: 159
    000000a1: 	movq	0x10(%r14), %rdi
    000000a5: 	xorl	%esi, %esi
    000000a7: 	callq	strtod@PLT # Offset: 167
    000000ac: 	movsd	%xmm0, init_value(%rip)
    000000b4: 	jmp	.Ltmp4 # Offset: 180
.Ltmp1:
    000000b6: 	leaq	DATAat0x1d19c(%rip), %rsi
    000000bd: 	movl	$0x1, %edi
    000000c2: 	xorl	%eax, %eax
    000000c4: 	callq	__printf_chk@PLT # Offset: 196
    000000c9: 	jmp	.Ltmp4 # Offset: 201
DWARF CFI Instructions:
    <empty>
End of Function "main"

Binary Function "_start" after disassembly {
  Number      : 6
  State       : disassembled
  Address     : 0x25d0
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x25d0
  Section     : .text
  Orc Section : .local.text._start
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB05:
    00000000: 	endbr64
    00000004: 	xorl	%ebp, %ebp
    00000006: 	movq	%rdx, %r9
    00000009: 	popq	%rsi
    0000000a: 	movq	%rsp, %rdx
    0000000d: 	andq	$-0x10, %rsp
    00000011: 	pushq	%rax
    00000012: 	pushq	%rsp
    00000013: 	xorl	%r8d, %r8d
    00000016: 	xorl	%ecx, %ecx
    00000018: 	leaq	main(%rip), %rdi
    0000001f: 	callq	*DATAat0x22fe0(%rip) # Offset: 31
    00000025: 	hlt
DWARF CFI Instructions:
    <empty>
End of Function "_start"

Binary Function "deregister_tm_clones/1(*2)" after disassembly {
  All names   : deregister_tm_clones/1
                deregister_tm_clones/crtstuff.c/1
  Number      : 7
  State       : disassembled
  Address     : 0x2600
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x2600
  Section     : .text
  Orc Section : .local.text.deregister_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB06:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rax
    0000000e: 	cmpq	%rdi, %rax
    00000011: 	je	.Ltmp5 # Offset: 17
    00000013: 	movq	DATAat0x22fe8(%rip), %rax
    0000001a: 	testq	%rax, %rax
    0000001d: 	je	.Ltmp5 # Offset: 29
    0000001f: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 31
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp5:
    00000028: 	retq # Offset: 40
    00000029: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "deregister_tm_clones/1(*2)"

Binary Function "register_tm_clones/1(*2)" after disassembly {
  All names   : register_tm_clones/1
                register_tm_clones/crtstuff.c/1
  Number      : 8
  State       : disassembled
  Address     : 0x2630
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x2630
  Section     : .text
  Orc Section : .local.text.register_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB07:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rsi
    0000000e: 	subq	%rdi, %rsi
    00000011: 	movq	%rsi, %rax
    00000014: 	shrq	$0x3f, %rsi
    00000018: 	sarq	$0x3, %rax
    0000001c: 	addq	%rax, %rsi
    0000001f: 	sarq	%rsi
    00000022: 	je	.Ltmp6 # Offset: 34
    00000024: 	movq	DATAat0x22ff8(%rip), %rax
    0000002b: 	testq	%rax, %rax
    0000002e: 	je	.Ltmp6 # Offset: 46
    00000030: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 48
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp6:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "register_tm_clones/1(*2)"

Binary Function "__do_global_dtors_aux/1(*2)" after disassembly {
  All names   : __do_global_dtors_aux/1
                __do_global_dtors_aux/crtstuff.c/1
  Number      : 9
  State       : disassembled
  Address     : 0x2670
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x2670
  Section     : .text
  Orc Section : .local.text.__do_global_dtors_aux/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB08:
    00000000: 	endbr64
    00000004: 	cmpb	$0x0, "completed.0/1"(%rip)
    0000000b: 	jne	.Ltmp7 # Offset: 11
    0000000d: 	pushq	%rbp
    0000000e: 	cmpq	$0x0, __cxa_finalize@GOT(%rip)
    00000016: 	movq	%rsp, %rbp
    00000019: 	je	.Ltmp8 # Offset: 25
    0000001b: 	movq	__dso_handle(%rip), %rdi
    00000022: 	callq	__cxa_finalize@PLT # Offset: 34
.Ltmp8:
    00000027: 	callq	"deregister_tm_clones/1" # Offset: 39
    0000002c: 	movb	$0x1, "completed.0/1"(%rip)
    00000033: 	popq	%rbp
    00000034: 	retq # Offset: 52
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp7:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "__do_global_dtors_aux/1(*2)"

Binary Function "frame_dummy/1(*2)" after disassembly {
  All names   : frame_dummy/1
                frame_dummy/crtstuff.c/1
  Number      : 10
  State       : disassembled
  Address     : 0x26b0
  Size        : 0x10
  MaxSize     : 0x10
  Offset      : 0x26b0
  Section     : .text
  Orc Section : .local.text.frame_dummy/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB09:
    00000000: 	endbr64
    00000004: 	jmp	"register_tm_clones/1" # TAILCALL  # Offset: 4
    00000009: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "frame_dummy/1(*2)"

Binary Function "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1(*2)" after disassembly {
  All names   : _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1
                _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/stepanov_inherit.cpp/1
  Number      : 11
  State       : disassembled
  Address     : 0x26c0
  Size        : 0xd3
  MaxSize     : 0xe0
  Offset      : 0x26c0
  Section     : .text
  Orc Section : .local.text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB010:
    00000000: 	pushq	%r13
    00000002: 	pushq	%r12
    00000004: 	leaq	0x10(%rdi), %r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	subq	$0x18, %rsp
    0000000e: 	movq	%fs:0x28, %rax
    00000017: 	movq	%rax, 0x8(%rsp)
    0000001c: 	xorl	%eax, %eax
    0000001e: 	movq	%r12, (%rdi)
    00000021: 	testq	%rsi, %rsi
    00000024: 	je	.Ltmp9 # Offset: 36
    0000002a: 	movq	%rdi, %rbx
    0000002d: 	movq	%rsi, %rdi
    00000030: 	movq	%rsi, %rbp
    00000033: 	callq	strlen@PLT # Offset: 51
    00000038: 	movq	%rax, (%rsp)
    0000003c: 	movq	%rax, %r13
    0000003f: 	cmpq	$0xf, %rax
    00000043: 	ja	.Ltmp10 # Offset: 67
    00000045: 	cmpq	$0x1, %rax
    00000049: 	jne	.Ltmp11 # Offset: 73
    0000004b: 	movzbl	(%rbp), %edx
    0000004f: 	movb	%dl, 0x10(%rbx)
.Ltmp13:
    00000052: 	movq	%rax, 0x8(%rbx)
    00000056: 	movb	$0x0, (%r12,%rax)
    0000005b: 	movq	0x8(%rsp), %rax
    00000060: 	subq	%fs:0x28, %rax
    00000069: 	jne	.Ltmp12 # Offset: 105
    0000006b: 	addq	$0x18, %rsp
    0000006f: 	popq	%rbx
    00000070: 	popq	%rbp
    00000071: 	popq	%r12
    00000073: 	popq	%r13
    00000075: 	retq # Offset: 117
    00000076: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp11:
    00000080: 	testq	%rax, %rax
    00000083: 	je	.Ltmp13 # Offset: 131
    00000085: 	jmp	.Ltmp14 # Offset: 133
    00000087: 	nopw	(%rax,%rax) # Size: 9
.Ltmp10:
    00000090: 	movq	%rsp, %rsi
    00000093: 	xorl	%edx, %edx
    00000095: 	movq	%rbx, %rdi
    00000098: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 152
    0000009d: 	movq	%rax, (%rbx)
    000000a0: 	movq	%rax, %r12
    000000a3: 	movq	(%rsp), %rax
    000000a7: 	movq	%rax, 0x10(%rbx)
.Ltmp14:
    000000ab: 	movq	%r12, %rdi
    000000ae: 	movq	%r13, %rdx
    000000b1: 	movq	%rbp, %rsi
    000000b4: 	callq	memcpy@PLT # Offset: 180
    000000b9: 	movq	(%rsp), %rax
    000000bd: 	movq	(%rbx), %r12
    000000c0: 	jmp	.Ltmp13 # Offset: 192
.Ltmp12:
    000000c2: 	callq	__stack_chk_fail@PLT # Offset: 194
.Ltmp9:
    000000c7: 	leaq	DATAat0x1d008(%rip), %rdi
    000000ce: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 206
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1(*2)"

Binary Function "_Z13record_resultdPKc" after disassembly {
  Number      : 12
  State       : disassembled
  Address     : 0x27a0
  Size        : 0xa0
  MaxSize     : 0xa0
  Offset      : 0x27a0
  Section     : .text
  Orc Section : .local.text._Z13record_resultdPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB011:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %rbx
    00000008: 	subq	$0x10, %rsp
    0000000c: 	movq	results(%rip), %rdi
    00000013: 	movl	allocated_results(%rip), %esi
    00000019: 	testq	%rdi, %rdi
    0000001c: 	je	.Ltmp15 # Offset: 28
    0000001e: 	movl	current_test(%rip), %eax
    00000024: 	cmpl	%esi, %eax
    00000026: 	jl	.Ltmp16 # Offset: 38
.Ltmp15:
    00000028: 	addl	$0xa, %esi
    0000002b: 	movsd	%xmm0, 0x8(%rsp)
    00000031: 	movl	%esi, allocated_results(%rip)
    00000037: 	movslq	%esi, %rsi
    0000003a: 	shlq	$0x4, %rsi
    0000003e: 	callq	realloc@PLT # Offset: 62
    00000043: 	movq	%rax, results(%rip)
    0000004a: 	movq	%rax, %rdi
    0000004d: 	testq	%rax, %rax
    00000050: 	je	.Ltmp17 # Offset: 80
    00000052: 	movl	current_test(%rip), %eax
    00000058: 	movsd	0x8(%rsp), %xmm0
.Ltmp16:
    0000005e: 	movslq	%eax, %rdx
    00000061: 	addl	$0x1, %eax
    00000064: 	shlq	$0x4, %rdx
    00000068: 	addq	%rdx, %rdi
    0000006b: 	movsd	%xmm0, (%rdi)
    0000006f: 	movq	%rbx, 0x8(%rdi)
    00000073: 	movl	%eax, current_test(%rip)
    00000079: 	addq	$0x10, %rsp
    0000007d: 	popq	%rbx
    0000007e: 	retq # Offset: 126
.Ltmp17:
    0000007f: 	movl	allocated_results(%rip), %edx
    00000085: 	movl	$0x1, %edi
    0000008a: 	leaq	DATAat0x1d038(%rip), %rsi
    00000091: 	xorl	%eax, %eax
    00000093: 	callq	__printf_chk@PLT # Offset: 147
    00000098: 	orl	$-0x1, %edi
    0000009b: 	callq	exit@PLT # Offset: 155
DWARF CFI Instructions:
    <empty>
End of Function "_Z13record_resultdPKc"

Binary Function "_Z9summarizePKciiii" after disassembly {
  Number      : 13
  State       : disassembled
  Address     : 0x2840
  Size        : 0x325
  MaxSize     : 0x330
  Offset      : 0x2840
  Section     : .text
  Orc Section : .local.text._Z9summarizePKciiii
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB012:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x38, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movl	%r8d, 0x2c(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp18 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	movl	%esi, %r15d
    0000002b: 	movl	%edx, %r13d
    0000002e: 	jle	.Ltmp19 # Offset: 46
    00000034: 	movq	results(%rip), %rcx
    0000003b: 	subl	$0x1, %eax
    0000003e: 	movl	$0xc, %ebx
    00000043: 	shlq	$0x4, %rax
    00000047: 	leaq	0x8(%rcx), %r14
    0000004b: 	leaq	0x18(%rcx,%rax), %rbp
.Ltmp20:
    00000050: 	movq	(%r14), %rdi
    00000053: 	callq	strlen@PLT # Offset: 83
    00000058: 	cmpl	%eax, %ebx
    0000005a: 	cmovll	%eax, %ebx
    0000005d: 	addq	$0x10, %r14
    00000061: 	cmpq	%r14, %rbp
    00000064: 	jne	.Ltmp20 # Offset: 100
    00000066: 	leal	-0xc(%rbx), %edx
.Ltmp33:
    00000069: 	leaq	DATAat0x1d1b8(%rip), %rbp
    00000070: 	leaq	DATAat0x1d058(%rip), %rsi
    00000077: 	movl	$0x1, %edi
    0000007c: 	xorl	%eax, %eax
    0000007e: 	movq	%rbp, %rcx
    00000081: 	callq	__printf_chk@PLT # Offset: 129
    00000086: 	movl	%ebx, %edx
    00000088: 	movq	%rbp, %rcx
    0000008b: 	movl	$0x1, %edi
    00000090: 	leaq	DATAat0x1d098(%rip), %rsi
    00000097: 	xorl	%eax, %eax
    00000099: 	callq	__printf_chk@PLT # Offset: 153
    0000009e: 	movl	current_test(%rip), %edx
    000000a4: 	testl	%edx, %edx
    000000a6: 	jle	.Ltmp21 # Offset: 166
    000000ac: 	pxor	%xmm0, %xmm0
    000000b0: 	pxor	%xmm1, %xmm1
    000000b4: 	xorl	%r14d, %r14d
    000000b7: 	movsd	DATAat0x1dec8(%rip), %xmm3
    000000bf: 	cvtsi2sd	%r15d, %xmm0
    000000c4: 	leaq	DATAat0x1d0c8(%rip), %rbp
    000000cb: 	cvtsi2sd	%r13d, %xmm1
    000000d0: 	mulsd	%xmm1, %xmm0
    000000d4: 	divsd	DATAat0x1dec0(%rip), %xmm0
    000000dc: 	movsd	%xmm0, 0x20(%rsp)
    000000e2: 	jmp	.Ltmp22 # Offset: 226
    000000e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp26:
    000000f0: 	comisd	%xmm0, %xmm3
    000000f4: 	ja	.Ltmp23 # Offset: 244
    000000fa: 	movq	DATAat0x1dea8(%rip), %rdi
    00000101: 	movq	%rdi, %xmm2
.Ltmp27:
    00000106: 	comisd	%xmm0, %xmm3
    0000010a: 	movq	DATAat0x1dea8(%rip), %rsi
    00000111: 	movq	%rsi, %xmm1
    00000116: 	ja	.Ltmp24 # Offset: 278
    00000118: 	movsd	0x20(%rsp), %xmm1
    0000011e: 	divsd	%xmm0, %xmm1
.Ltmp24:
    00000122: 	movq	0x8(%rax), %r15
    00000126: 	movsd	%xmm0, 0x18(%rsp)
    0000012c: 	addq	$0x1, %r14
    00000130: 	movsd	%xmm1, 0x10(%rsp)
    00000136: 	movq	%r15, %rdi
    00000139: 	movsd	%xmm2, 0x8(%rsp)
    0000013f: 	callq	strlen@PLT # Offset: 319
    00000144: 	movsd	0x8(%rsp), %xmm2
    0000014a: 	movl	%ebx, %ecx
    0000014c: 	movq	%r15, %r9
    0000014f: 	movsd	0x10(%rsp), %xmm1
    00000155: 	subl	%eax, %ecx
    00000157: 	movl	$0x1, %edi
    0000015c: 	movl	%r13d, %edx
    0000015f: 	movsd	0x18(%rsp), %xmm0
    00000165: 	leaq	DATAat0x1d19d(%rip), %r8
    0000016c: 	movq	%rbp, %rsi
    0000016f: 	movl	$0x3, %eax
    00000174: 	callq	__printf_chk@PLT # Offset: 372
    00000179: 	movl	current_test(%rip), %eax
    0000017f: 	movq	DATAat0x1dec8(%rip), %rdi
    00000186: 	cmpl	%r14d, %eax
    00000189: 	movq	%rdi, %xmm3
    0000018e: 	jle	.Ltmp25 # Offset: 398
.Ltmp22:
    00000190: 	movq	results(%rip), %rax
    00000197: 	movq	%r14, %rcx
    0000019a: 	movl	%r14d, %r13d
    0000019d: 	shlq	$0x4, %rcx
    000001a1: 	movsd	(%rax), %xmm1
    000001a5: 	addq	%rcx, %rax
    000001a8: 	movsd	(%rax), %xmm0
    000001ac: 	comisd	%xmm1, %xmm3
    000001b0: 	ja	.Ltmp26 # Offset: 432
    000001b6: 	movapd	%xmm0, %xmm2
    000001ba: 	divsd	%xmm1, %xmm2
    000001be: 	jmp	.Ltmp27 # Offset: 446
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp23:
    000001c8: 	movq	DATAat0x1deb0(%rip), %rsi
    000001cf: 	movq	DATAat0x1dea8(%rip), %rdx
    000001d6: 	movq	%rsi, %xmm2
    000001db: 	movq	%rdx, %xmm1
    000001e0: 	jmp	.Ltmp24 # Offset: 480
    000001e5: 	nopl	(%rax) # Size: 3
.Ltmp25:
    000001e8: 	testl	%eax, %eax
    000001ea: 	jle	.Ltmp21 # Offset: 490
    000001f0: 	movq	results(%rip), %rdx
    000001f7: 	leal	-0x1(%rax), %ecx
    000001fa: 	pxor	%xmm1, %xmm1
    000001fe: 	shlq	$0x4, %rcx
    00000202: 	movapd	%xmm1, %xmm0
    00000206: 	leaq	0x10(%rdx), %rax
    0000020a: 	addq	%rax, %rcx
    0000020d: 	jmp	.Ltmp28 # Offset: 525
    0000020f: 	nop # Size: 1
.Ltmp29:
    00000210: 	addq	$0x10, %rax
.Ltmp28:
    00000214: 	addsd	(%rdx), %xmm0
    00000218: 	movq	%rax, %rdx
    0000021b: 	cmpq	%rax, %rcx
    0000021e: 	jne	.Ltmp29 # Offset: 542
.Ltmp34:
    00000220: 	movq	%r12, %rdx
    00000223: 	movl	$0x1, %edi
    00000228: 	movl	$0x1, %eax
    0000022d: 	movsd	%xmm1, 0x8(%rsp)
    00000233: 	leaq	DATAat0x1d0f8(%rip), %rsi
    0000023a: 	callq	__printf_chk@PLT # Offset: 570
    0000023f: 	movl	0x2c(%rsp), %eax
    00000243: 	movl	current_test(%rip), %ebp
    00000249: 	testl	%eax, %eax
    0000024b: 	je	.Ltmp30 # Offset: 587
    0000024d: 	cmpl	$0x1, %ebp
    00000250: 	jg	.Ltmp31 # Offset: 592
.Ltmp30:
    00000252: 	movl	$0x0, current_test(%rip)
.Ltmp18:
    0000025c: 	addq	$0x38, %rsp
    00000260: 	popq	%rbx
    00000261: 	popq	%rbp
    00000262: 	popq	%r12
    00000264: 	popq	%r13
    00000266: 	popq	%r14
    00000268: 	popq	%r15
    0000026a: 	retq # Offset: 618
    0000026b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp31:
    00000270: 	movq	results(%rip), %rbx
    00000277: 	movsd	0x8(%rsp), %xmm1
    0000027d: 	movl	$0x1, %r13d
    00000283: 	movsd	(%rbx), %xmm5
    00000287: 	addq	$0x10, %rbx
    0000028b: 	movsd	%xmm5, 0x10(%rsp)
    00000291: 	nopl	(%rax) # Size: 7
.Ltmp32:
    00000298: 	movsd	(%rbx), %xmm0
    0000029c: 	movsd	%xmm1, 0x8(%rsp)
    000002a2: 	addl	$0x1, %r13d
    000002a6: 	addq	$0x10, %rbx
    000002aa: 	divsd	0x10(%rsp), %xmm0
    000002b0: 	callq	log@PLT # Offset: 688
    000002b5: 	movsd	0x8(%rsp), %xmm1
    000002bb: 	addsd	%xmm0, %xmm1
    000002bf: 	cmpl	%r13d, %ebp
    000002c2: 	jg	.Ltmp32 # Offset: 706
    000002c4: 	subl	$0x1, %ebp
    000002c7: 	pxor	%xmm0, %xmm0
    000002cb: 	cvtsi2sd	%ebp, %xmm0
    000002cf: 	divsd	%xmm0, %xmm1
    000002d3: 	movapd	%xmm1, %xmm0
    000002d7: 	callq	exp@PLT # Offset: 727
    000002dc: 	movq	%r12, %rdx
    000002df: 	movl	$0x1, %edi
    000002e4: 	leaq	DATAat0x1d178(%rip), %rsi
    000002eb: 	movl	$0x1, %eax
    000002f0: 	callq	__printf_chk@PLT # Offset: 752
    000002f5: 	movl	$0x0, current_test(%rip)
    000002ff: 	jmp	.Ltmp18 # Offset: 767
    00000304: 	nopl	(%rax) # Size: 4
.Ltmp19:
    00000308: 	xorl	%edx, %edx
    0000030a: 	movl	$0xc, %ebx
    0000030f: 	jmp	.Ltmp33 # Offset: 783
    00000314: 	nopl	(%rax) # Size: 4
.Ltmp21:
    00000318: 	pxor	%xmm1, %xmm1
    0000031c: 	movapd	%xmm1, %xmm0
    00000320: 	jmp	.Ltmp34 # Offset: 800
DWARF CFI Instructions:
    <empty>
End of Function "_Z9summarizePKciiii"

Binary Function "_Z17summarize_simplefP8_IO_FILEPKc" after disassembly {
  Number      : 14
  State       : disassembled
  Address     : 0x2b70
  Size        : 0x1a6
  MaxSize     : 0x1b0
  Offset      : 0x2b70
  Section     : .text
  Orc Section : .local.text._Z17summarize_simplefP8_IO_FILEPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB013:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x18, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movq	%rsi, 0x8(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp35 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	jle	.Ltmp36 # Offset: 40
    0000002e: 	movq	results(%rip), %rdx
    00000035: 	subl	$0x1, %eax
    00000038: 	movl	$0xc, %ebp
    0000003d: 	shlq	$0x4, %rax
    00000041: 	leaq	0x8(%rdx), %r13
    00000045: 	leaq	0x18(%rdx,%rax), %rbx
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp37:
    00000050: 	movq	(%r13), %rdi
    00000054: 	callq	strlen@PLT # Offset: 84
    00000059: 	cmpl	%eax, %ebp
    0000005b: 	cmovll	%eax, %ebp
    0000005e: 	addq	$0x10, %r13
    00000062: 	cmpq	%r13, %rbx
    00000065: 	jne	.Ltmp37 # Offset: 101
    00000067: 	leal	-0xc(%rbp), %ecx
.Ltmp42:
    0000006a: 	leaq	DATAat0x1d1b8(%rip), %r8
    00000071: 	movl	$0x1, %esi
    00000076: 	xorl	%eax, %eax
    00000078: 	xorl	%ebx, %ebx
    0000007a: 	leaq	DATAat0x1d120(%rip), %rdx
    00000081: 	movq	%r12, %rdi
    00000084: 	leaq	DATAat0x1d19e(%rip), %r14
    0000008b: 	callq	__fprintf_chk@PLT # Offset: 139
    00000090: 	movl	$0x1, %esi
    00000095: 	movl	%ebp, %ecx
    00000097: 	movq	%r12, %rdi
    0000009a: 	leaq	DATAat0x1d1b8(%rip), %r8
    000000a1: 	leaq	DATAat0x1d18c(%rip), %rdx
    000000a8: 	xorl	%eax, %eax
    000000aa: 	callq	__fprintf_chk@PLT # Offset: 170
    000000af: 	movl	current_test(%rip), %esi
    000000b5: 	testl	%esi, %esi
    000000b7: 	jle	.Ltmp38 # Offset: 183
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp39:
    000000c0: 	movq	%rbx, %rdx
    000000c3: 	shlq	$0x4, %rdx
    000000c7: 	addq	results(%rip), %rdx
    000000ce: 	movq	0x8(%rdx), %r13
    000000d2: 	movq	%rdx, %r15
    000000d5: 	movq	%r13, %rdi
    000000d8: 	callq	strlen@PLT # Offset: 216
    000000dd: 	subq	$0x8, %rsp
    000000e1: 	movsd	(%r15), %xmm0
    000000e6: 	movl	%ebx, %ecx
    000000e8: 	pushq	%r13
    000000ea: 	movl	%ebp, %r8d
    000000ed: 	movq	%r14, %rdx
    000000f0: 	leaq	DATAat0x1d19d(%rip), %r9
    000000f7: 	subl	%eax, %r8d
    000000fa: 	movl	$0x1, %esi
    000000ff: 	movq	%r12, %rdi
    00000102: 	movl	$0x1, %eax
    00000107: 	addq	$0x1, %rbx
    0000010b: 	callq	__fprintf_chk@PLT # Offset: 267
    00000110: 	movl	current_test(%rip), %eax
    00000116: 	popq	%rdx
    00000117: 	popq	%rcx
    00000118: 	cmpl	%ebx, %eax
    0000011a: 	jg	.Ltmp39 # Offset: 282
    0000011c: 	testl	%eax, %eax
    0000011e: 	jle	.Ltmp38 # Offset: 286
    00000124: 	movq	results(%rip), %rdx
    0000012b: 	leal	-0x1(%rax), %ecx
    0000012e: 	pxor	%xmm0, %xmm0
    00000132: 	shlq	$0x4, %rcx
    00000136: 	leaq	0x10(%rdx), %rax
    0000013a: 	addq	%rax, %rcx
    0000013d: 	jmp	.Ltmp40 # Offset: 317
    0000013f: 	nop # Size: 1
.Ltmp41:
    00000140: 	addq	$0x10, %rax
.Ltmp40:
    00000144: 	addsd	(%rdx), %xmm0
    00000148: 	movq	%rax, %rdx
    0000014b: 	cmpq	%rax, %rcx
    0000014e: 	jne	.Ltmp41 # Offset: 334
.Ltmp43:
    00000150: 	movq	0x8(%rsp), %rcx
    00000155: 	movl	$0x1, %esi
    0000015a: 	movq	%r12, %rdi
    0000015d: 	movl	$0x1, %eax
    00000162: 	leaq	DATAat0x1d0f8(%rip), %rdx
    00000169: 	callq	__fprintf_chk@PLT # Offset: 361
    0000016e: 	movl	$0x0, current_test(%rip)
.Ltmp35:
    00000178: 	addq	$0x18, %rsp
    0000017c: 	popq	%rbx
    0000017d: 	popq	%rbp
    0000017e: 	popq	%r12
    00000180: 	popq	%r13
    00000182: 	popq	%r14
    00000184: 	popq	%r15
    00000186: 	retq # Offset: 390
    00000187: 	nopw	(%rax,%rax) # Size: 9
.Ltmp36:
    00000190: 	xorl	%ecx, %ecx
    00000192: 	movl	$0xc, %ebp
    00000197: 	jmp	.Ltmp42 # Offset: 407
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp38:
    000001a0: 	pxor	%xmm0, %xmm0
    000001a4: 	jmp	.Ltmp43 # Offset: 420
DWARF CFI Instructions:
    <empty>
End of Function "_Z17summarize_simplefP8_IO_FILEPKc"

Binary Function "_Z11start_timerv" after disassembly {
  Number      : 15
  State       : disassembled
  Address     : 0x2d20
  Size        : 0x19
  MaxSize     : 0x20
  Offset      : 0x2d20
  Section     : .text
  Orc Section : .local.text._Z11start_timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB014:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	movq	%rax, start_time(%rip)
    00000014: 	addq	$0x8, %rsp
    00000018: 	retq # Offset: 24
DWARF CFI Instructions:
    <empty>
End of Function "_Z11start_timerv"

Binary Function "_Z5timerv" after disassembly {
  Number      : 16
  State       : disassembled
  Address     : 0x2d40
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x2d40
  Section     : .text
  Orc Section : .local.text._Z5timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB015:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	pxor	%xmm0, %xmm0
    00000011: 	movq	%rax, end_time(%rip)
    00000018: 	subq	start_time(%rip), %rax
    0000001f: 	cvtsi2sd	%rax, %xmm0
    00000024: 	divsd	DATAat0x1dec0(%rip), %xmm0
    0000002c: 	addq	$0x8, %rsp
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z5timerv"

Binary Function "_ZN9benchmark6scrandEm" after disassembly {
  Number      : 17
  State       : disassembled
  Address     : 0x2d80
  Size        : 0xc
  MaxSize     : 0x10
  Offset      : 0x2d80
  Section     : .text
  Orc Section : .local.text._ZN9benchmark6scrandEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB016:
    00000000: 	endbr64
    00000004: 	movq	%rdi, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    0000000b: 	retq # Offset: 11
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark6scrandEm"

Binary Function "_ZN9benchmark7crand64Ev" after disassembly {
  Number      : 18
  State       : disassembled
  Address     : 0x2d90
  Size        : 0x42
  MaxSize     : 0x50
  Offset      : 0x2d90
  Section     : .text
  Orc Section : .local.text._ZN9benchmark7crand64Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB017:
    00000000: 	endbr64
    00000004: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rdx
    0000000b: 	movabsq	$0x5851f42d4c957f2d, %rax
    00000015: 	imulq	%rax, %rdx
    00000019: 	movabsq	$0x14057b7ef767814f, %rax
    00000023: 	addq	%rax, %rdx
    00000026: 	movq	%rdx, %rax
    00000029: 	movq	%rdx, %rcx
    0000002c: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000033: 	shrq	$0x14, %rax
    00000037: 	shlq	$0x17, %rcx
    0000003b: 	xorq	%rcx, %rax
    0000003e: 	xorq	%rdx, %rax
    00000041: 	retq # Offset: 65
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark7crand64Ev"

Binary Function "_ZN9benchmark7crand32Ev" after disassembly {
  Number      : 19
  State       : disassembled
  Address     : 0x2de0
  Size        : 0x41
  MaxSize     : 0x50
  Offset      : 0x2de0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark7crand32Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB018:
    00000000: 	endbr64
    00000004: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    0000000b: 	movabsq	$0x5851f42d4c957f2d, %rdx
    00000015: 	imulq	%rdx, %rax
    00000019: 	movabsq	$0x14057b7ef767814f, %rdx
    00000023: 	addq	%rdx, %rax
    00000026: 	movq	%rax, %rdx
    00000029: 	movq	%rax, %rcx
    0000002c: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000033: 	shrq	$0x14, %rdx
    00000037: 	shlq	$0x17, %rcx
    0000003b: 	xorq	%rcx, %rdx
    0000003e: 	xorl	%edx, %eax
    00000040: 	retq # Offset: 64
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark7crand32Ev"

Binary Function "_ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 20
  State       : disassembled
  Address     : 0x2e30
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x2e30
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB019:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f38, %edx
    00000017: 	movl	$0x746e6975, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 21
  State       : disassembled
  Address     : 0x2e60
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x2e60
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB020:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3631746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 22
  State       : disassembled
  Address     : 0x2e90
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x2e90
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB021:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3233746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 23
  State       : disassembled
  Address     : 0x2ec0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x2ec0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB022:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3436746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 24
  State       : disassembled
  Address     : 0x2ef0
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x2ef0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB023:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x38746e69, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x745f, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 25
  State       : disassembled
  Address     : 0x2f20
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x2f20
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB024:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x38746e69, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x745f, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 26
  State       : disassembled
  Address     : 0x2f50
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x2f50
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB025:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f36, %edx
    00000017: 	movl	$0x31746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 27
  State       : disassembled
  Address     : 0x2f80
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x2f80
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB026:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f32, %edx
    00000017: 	movl	$0x33746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 28
  State       : disassembled
  Address     : 0x2fb0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x2fb0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB027:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f34, %edx
    00000017: 	movl	$0x36746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 29
  State       : disassembled
  Address     : 0x2fe0
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x2fe0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB028:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x14(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x616f6c66, 0x10(%rdi)
    00000019: 	movq	$0x5, 0x8(%rdi)
    00000021: 	movb	$0x0, 0x15(%rdi)
    00000025: 	retq # Offset: 37
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 30
  State       : disassembled
  Address     : 0x3010
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x3010
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB029:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x62756f64, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x656c, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 31
  State       : disassembled
  Address     : 0x3040
  Size        : 0x36
  MaxSize     : 0x40
  Offset      : 0x3040
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB030:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x65, 0x1a(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x756f6420676e6f6c, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movl	$0x6c62, %edx
    00000021: 	movq	%rcx, 0x10(%rdi)
    00000025: 	movw	%dx, 0x18(%rdi)
    00000029: 	movq	$0xb, 0x8(%rdi)
    00000031: 	movb	$0x0, 0x1b(%rdi)
    00000035: 	retq # Offset: 53
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 32
  State       : disassembled
  Address     : 0x3080
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x3080
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB031:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f38746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 33
  State       : disassembled
  Address     : 0x30b0
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x30b0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB032:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3631746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 34
  State       : disassembled
  Address     : 0x30e0
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x30e0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB033:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3233746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 35
  State       : disassembled
  Address     : 0x3110
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x3110
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB034:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3436746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 36
  State       : disassembled
  Address     : 0x3140
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x3140
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB035:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x745f, %edx
    00000017: 	movl	$0x38746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 37
  State       : disassembled
  Address     : 0x3170
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x3170
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB036:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3631746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 38
  State       : disassembled
  Address     : 0x31a0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x31a0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB037:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3233746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 39
  State       : disassembled
  Address     : 0x31d0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x31d0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB038:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3436746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 40
  State       : disassembled
  Address     : 0x3200
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x3200
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB039:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x616f6c66, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x2a74, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 41
  State       : disassembled
  Address     : 0x3230
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x3230
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB040:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x656c, %edx
    00000017: 	movl	$0x62756f64, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 42
  State       : disassembled
  Address     : 0x3260
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x3260
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB041:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x0, 0x1c(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x756f6420676e6f6c, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movl	$0x2a656c62, 0x18(%rdi)
    00000027: 	movq	$0xc, 0x8(%rdi)
    0000002f: 	retq # Offset: 47
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN16TypeVirtualClassIdEcvdEv" after disassembly {
  Number      : 44
  State       : disassembled
  Address     : 0x3760
  Size        : 0xa
  MaxSize     : 0x10
  Offset      : 0x3760
  Section     : .text
  Orc Section : .local.text._ZN16TypeVirtualClassIdEcvdEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB043:
    00000000: 	endbr64
    00000004: 	movsd	0x8(%rdi), %xmm0
    00000009: 	retq # Offset: 9
DWARF CFI Instructions:
    <empty>
End of Function "_ZN16TypeVirtualClassIdEcvdEv"

Binary Function "_ZN19TypeVirtualSubClassIdEcvdEv" after disassembly {
  Number      : 45
  State       : disassembled
  Address     : 0x3770
  Size        : 0xa
  MaxSize     : 0x10
  Offset      : 0x3770
  Section     : .text
  Orc Section : .local.text._ZN19TypeVirtualSubClassIdEcvdEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB044:
    00000000: 	endbr64
    00000004: 	movsd	0x8(%rdi), %xmm0
    00000009: 	retq # Offset: 9
DWARF CFI Instructions:
    <empty>
End of Function "_ZN19TypeVirtualSubClassIdEcvdEv"

Binary Function "_ZN14WorkerSubClassIdEcvdEv" after disassembly {
  Number      : 46
  State       : disassembled
  Address     : 0x3780
  Size        : 0xa
  MaxSize     : 0x10
  Offset      : 0x3780
  Section     : .text
  Orc Section : .local.text._ZN14WorkerSubClassIdEcvdEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB045:
    00000000: 	endbr64
    00000004: 	movsd	0x8(%rdi), %xmm0
    00000009: 	retq # Offset: 9
DWARF CFI Instructions:
    <empty>
End of Function "_ZN14WorkerSubClassIdEcvdEv"

Binary Function "_ZN18WorkerDeepSubClassIdEcvdEv" after disassembly {
  Number      : 47
  State       : disassembled
  Address     : 0x3790
  Size        : 0xa
  MaxSize     : 0x10
  Offset      : 0x3790
  Section     : .text
  Orc Section : .local.text._ZN18WorkerDeepSubClassIdEcvdEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB046:
    00000000: 	endbr64
    00000004: 	movsd	0x8(%rdi), %xmm0
    00000009: 	retq # Offset: 9
DWARF CFI Instructions:
    <empty>
End of Function "_ZN18WorkerDeepSubClassIdEcvdEv"

Binary Function "_ZN15WorkerSubClass2IdEcvdEv" after disassembly {
  Number      : 48
  State       : disassembled
  Address     : 0x37a0
  Size        : 0xa
  MaxSize     : 0x10
  Offset      : 0x37a0
  Section     : .text
  Orc Section : .local.text._ZN15WorkerSubClass2IdEcvdEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB047:
    00000000: 	endbr64
    00000004: 	movsd	0x8(%rdi), %xmm0
    00000009: 	retq # Offset: 9
DWARF CFI Instructions:
    <empty>
End of Function "_ZN15WorkerSubClass2IdEcvdEv"

Binary Function "_ZN15WorkerSubClass3IdEcvdEv" after disassembly {
  Number      : 49
  State       : disassembled
  Address     : 0x37b0
  Size        : 0xa
  MaxSize     : 0x10
  Offset      : 0x37b0
  Section     : .text
  Orc Section : .local.text._ZN15WorkerSubClass3IdEcvdEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB048:
    00000000: 	endbr64
    00000004: 	movsd	0x8(%rdi), %xmm0
    00000009: 	retq # Offset: 9
DWARF CFI Instructions:
    <empty>
End of Function "_ZN15WorkerSubClass3IdEcvdEv"

Binary Function "_ZN16TypeVirtualClassIiEcviEv" after disassembly {
  Number      : 50
  State       : disassembled
  Address     : 0x37c0
  Size        : 0x8
  MaxSize     : 0x10
  Offset      : 0x37c0
  Section     : .text
  Orc Section : .local.text._ZN16TypeVirtualClassIiEcviEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB049:
    00000000: 	endbr64
    00000004: 	movl	0x8(%rdi), %eax
    00000007: 	retq # Offset: 7
DWARF CFI Instructions:
    <empty>
End of Function "_ZN16TypeVirtualClassIiEcviEv"

Binary Function "_ZN19TypeVirtualSubClassIiEcviEv" after disassembly {
  Number      : 51
  State       : disassembled
  Address     : 0x37d0
  Size        : 0x8
  MaxSize     : 0x10
  Offset      : 0x37d0
  Section     : .text
  Orc Section : .local.text._ZN19TypeVirtualSubClassIiEcviEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB050:
    00000000: 	endbr64
    00000004: 	movl	0x8(%rdi), %eax
    00000007: 	retq # Offset: 7
DWARF CFI Instructions:
    <empty>
End of Function "_ZN19TypeVirtualSubClassIiEcviEv"

Binary Function "_ZN14WorkerSubClassIiEcviEv" after disassembly {
  Number      : 52
  State       : disassembled
  Address     : 0x37e0
  Size        : 0x8
  MaxSize     : 0x10
  Offset      : 0x37e0
  Section     : .text
  Orc Section : .local.text._ZN14WorkerSubClassIiEcviEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB051:
    00000000: 	endbr64
    00000004: 	movl	0x8(%rdi), %eax
    00000007: 	retq # Offset: 7
DWARF CFI Instructions:
    <empty>
End of Function "_ZN14WorkerSubClassIiEcviEv"

Binary Function "_ZN18WorkerDeepSubClassIiEcviEv" after disassembly {
  Number      : 53
  State       : disassembled
  Address     : 0x37f0
  Size        : 0x8
  MaxSize     : 0x10
  Offset      : 0x37f0
  Section     : .text
  Orc Section : .local.text._ZN18WorkerDeepSubClassIiEcviEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB052:
    00000000: 	endbr64
    00000004: 	movl	0x8(%rdi), %eax
    00000007: 	retq # Offset: 7
DWARF CFI Instructions:
    <empty>
End of Function "_ZN18WorkerDeepSubClassIiEcviEv"

Binary Function "_ZN15WorkerSubClass2IiEcviEv" after disassembly {
  Number      : 54
  State       : disassembled
  Address     : 0x3800
  Size        : 0x8
  MaxSize     : 0x10
  Offset      : 0x3800
  Section     : .text
  Orc Section : .local.text._ZN15WorkerSubClass2IiEcviEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB053:
    00000000: 	endbr64
    00000004: 	movl	0x8(%rdi), %eax
    00000007: 	retq # Offset: 7
DWARF CFI Instructions:
    <empty>
End of Function "_ZN15WorkerSubClass2IiEcviEv"

Binary Function "_ZN15WorkerSubClass3IiEcviEv" after disassembly {
  Number      : 55
  State       : disassembled
  Address     : 0x3810
  Size        : 0x8
  MaxSize     : 0x10
  Offset      : 0x3810
  Section     : .text
  Orc Section : .local.text._ZN15WorkerSubClass3IiEcviEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB054:
    00000000: 	endbr64
    00000004: 	movl	0x8(%rdi), %eax
    00000007: 	retq # Offset: 7
DWARF CFI Instructions:
    <empty>
End of Function "_ZN15WorkerSubClass3IiEcviEv"

Binary Function "_ZN16TypeVirtualClassImEcvmEv" after disassembly {
  Number      : 56
  State       : disassembled
  Address     : 0x3820
  Size        : 0x9
  MaxSize     : 0x10
  Offset      : 0x3820
  Section     : .text
  Orc Section : .local.text._ZN16TypeVirtualClassImEcvmEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB055:
    00000000: 	endbr64
    00000004: 	movq	0x8(%rdi), %rax
    00000008: 	retq # Offset: 8
DWARF CFI Instructions:
    <empty>
End of Function "_ZN16TypeVirtualClassImEcvmEv"

Binary Function "_ZN19TypeVirtualSubClassImEcvmEv" after disassembly {
  Number      : 57
  State       : disassembled
  Address     : 0x3830
  Size        : 0x9
  MaxSize     : 0x10
  Offset      : 0x3830
  Section     : .text
  Orc Section : .local.text._ZN19TypeVirtualSubClassImEcvmEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB056:
    00000000: 	endbr64
    00000004: 	movq	0x8(%rdi), %rax
    00000008: 	retq # Offset: 8
DWARF CFI Instructions:
    <empty>
End of Function "_ZN19TypeVirtualSubClassImEcvmEv"

Binary Function "_ZN14WorkerSubClassImEcvmEv" after disassembly {
  Number      : 58
  State       : disassembled
  Address     : 0x3840
  Size        : 0x9
  MaxSize     : 0x10
  Offset      : 0x3840
  Section     : .text
  Orc Section : .local.text._ZN14WorkerSubClassImEcvmEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB057:
    00000000: 	endbr64
    00000004: 	movq	0x8(%rdi), %rax
    00000008: 	retq # Offset: 8
DWARF CFI Instructions:
    <empty>
End of Function "_ZN14WorkerSubClassImEcvmEv"

Binary Function "_ZN18WorkerDeepSubClassImEcvmEv" after disassembly {
  Number      : 59
  State       : disassembled
  Address     : 0x3850
  Size        : 0x9
  MaxSize     : 0x10
  Offset      : 0x3850
  Section     : .text
  Orc Section : .local.text._ZN18WorkerDeepSubClassImEcvmEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB058:
    00000000: 	endbr64
    00000004: 	movq	0x8(%rdi), %rax
    00000008: 	retq # Offset: 8
DWARF CFI Instructions:
    <empty>
End of Function "_ZN18WorkerDeepSubClassImEcvmEv"

Binary Function "_ZN15WorkerSubClass2ImEcvmEv" after disassembly {
  Number      : 60
  State       : disassembled
  Address     : 0x3860
  Size        : 0x9
  MaxSize     : 0x10
  Offset      : 0x3860
  Section     : .text
  Orc Section : .local.text._ZN15WorkerSubClass2ImEcvmEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB059:
    00000000: 	endbr64
    00000004: 	movq	0x8(%rdi), %rax
    00000008: 	retq # Offset: 8
DWARF CFI Instructions:
    <empty>
End of Function "_ZN15WorkerSubClass2ImEcvmEv"

Binary Function "_ZN15WorkerSubClass3ImEcvmEv" after disassembly {
  Number      : 61
  State       : disassembled
  Address     : 0x3870
  Size        : 0x9
  MaxSize     : 0x10
  Offset      : 0x3870
  Section     : .text
  Orc Section : .local.text._ZN15WorkerSubClass3ImEcvmEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB060:
    00000000: 	endbr64
    00000004: 	movq	0x8(%rdi), %rax
    00000008: 	retq # Offset: 8
DWARF CFI Instructions:
    <empty>
End of Function "_ZN15WorkerSubClass3ImEcvmEv"

Binary Function "_ZN15WorkerSubClass3ImE11do_nothing3Ev" after disassembly {
  Number      : 62
  State       : disassembled
  Address     : 0x3880
  Size        : 0xa
  MaxSize     : 0x10
  Offset      : 0x3880
  Section     : .text
  Orc Section : .local.text._ZN15WorkerSubClass3ImE11do_nothing3Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB061:
    00000000: 	endbr64
    00000004: 	movl	$0x3, %eax
    00000009: 	retq # Offset: 9
DWARF CFI Instructions:
    <empty>
End of Function "_ZN15WorkerSubClass3ImE11do_nothing3Ev"

Binary Function "_ZN19TypeVirtualSubClassImE7do_multERKS0_S2_" after disassembly {
  Number      : 63
  State       : disassembled
  Address     : 0x3890
  Size        : 0x1f
  MaxSize     : 0x20
  Offset      : 0x3890
  Section     : .text
  Orc Section : .local.text._ZN19TypeVirtualSubClassImE7do_multERKS0_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB062:
    00000000: 	endbr64
    00000004: 	movq	0x8(%rdx), %rdx
    00000008: 	imulq	0x8(%rcx), %rdx
    0000000d: 	leaq	_ZTV19TypeVirtualSubClassImE+16(%rip), %rsi
    00000014: 	movq	%rdi, %rax
    00000017: 	movq	%rsi, (%rdi)
    0000001a: 	movq	%rdx, 0x8(%rdi)
    0000001e: 	retq # Offset: 30
DWARF CFI Instructions:
    <empty>
End of Function "_ZN19TypeVirtualSubClassImE7do_multERKS0_S2_"

Binary Function "_ZN15WorkerSubClass3IiE11do_nothing3Ev" after disassembly {
  Number      : 64
  State       : disassembled
  Address     : 0x38b0
  Size        : 0xa
  MaxSize     : 0x10
  Offset      : 0x38b0
  Section     : .text
  Orc Section : .local.text._ZN15WorkerSubClass3IiE11do_nothing3Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB063:
    00000000: 	endbr64
    00000004: 	movl	$0x3, %eax
    00000009: 	retq # Offset: 9
DWARF CFI Instructions:
    <empty>
End of Function "_ZN15WorkerSubClass3IiE11do_nothing3Ev"

Binary Function "_ZN19TypeVirtualSubClassIiE7do_multERKS0_S2_" after disassembly {
  Number      : 65
  State       : disassembled
  Address     : 0x38c0
  Size        : 0x1c
  MaxSize     : 0x20
  Offset      : 0x38c0
  Section     : .text
  Orc Section : .local.text._ZN19TypeVirtualSubClassIiE7do_multERKS0_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB064:
    00000000: 	endbr64
    00000004: 	movl	0x8(%rdx), %edx
    00000007: 	imull	0x8(%rcx), %edx
    0000000b: 	leaq	_ZTV19TypeVirtualSubClassIiE+16(%rip), %rsi
    00000012: 	movq	%rdi, %rax
    00000015: 	movq	%rsi, (%rdi)
    00000018: 	movl	%edx, 0x8(%rdi)
    0000001b: 	retq # Offset: 27
DWARF CFI Instructions:
    <empty>
End of Function "_ZN19TypeVirtualSubClassIiE7do_multERKS0_S2_"

Binary Function "_ZN15WorkerSubClass3IdE11do_nothing3Ev" after disassembly {
  Number      : 66
  State       : disassembled
  Address     : 0x38e0
  Size        : 0xa
  MaxSize     : 0x10
  Offset      : 0x38e0
  Section     : .text
  Orc Section : .local.text._ZN15WorkerSubClass3IdE11do_nothing3Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB065:
    00000000: 	endbr64
    00000004: 	movl	$0x3, %eax
    00000009: 	retq # Offset: 9
DWARF CFI Instructions:
    <empty>
End of Function "_ZN15WorkerSubClass3IdE11do_nothing3Ev"

Binary Function "_ZN19TypeVirtualSubClassIdE7do_multERKS0_S2_" after disassembly {
  Number      : 67
  State       : disassembled
  Address     : 0x38f0
  Size        : 0x21
  MaxSize     : 0x30
  Offset      : 0x38f0
  Section     : .text
  Orc Section : .local.text._ZN19TypeVirtualSubClassIdE7do_multERKS0_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB066:
    00000000: 	endbr64
    00000004: 	movsd	0x8(%rdx), %xmm0
    00000009: 	mulsd	0x8(%rcx), %xmm0
    0000000e: 	leaq	_ZTV19TypeVirtualSubClassIdE+16(%rip), %rsi
    00000015: 	movq	%rdi, %rax
    00000018: 	movq	%rsi, (%rdi)
    0000001b: 	movsd	%xmm0, 0x8(%rdi)
    00000020: 	retq # Offset: 32
DWARF CFI Instructions:
    <empty>
End of Function "_ZN19TypeVirtualSubClassIdE7do_multERKS0_S2_"

Binary Function "_ZN9benchmark9quicksortIP19TypeVirtualSubClassIdEEEvT_S4_.part.0/1(*2)" after disassembly {
  All names   : _ZN9benchmark9quicksortIP19TypeVirtualSubClassIdEEEvT_S4_.part.0/1
                _ZN9benchmark9quicksortIP19TypeVirtualSubClassIdEEEvT_S4_.part.0/stepanov_inherit.cpp/1
  Number      : 68
  State       : disassembled
  Address     : 0x3920
  Size        : 0x10a
  MaxSize     : 0x110
  Offset      : 0x3920
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIP19TypeVirtualSubClassIdEEEvT_S4_.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB067:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	movq	%rsi, %r13
    00000009: 	pushq	%r12
    0000000b: 	movq	%rdi, %r12
    0000000e: 	pushq	%rbp
    0000000f: 	leaq	_ZN19TypeVirtualSubClassIdEcvdEv(%rip), %rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x18, %rsp
.Ltmp84:
    0000001b: 	movq	%r13, %r15
    0000001e: 	movsd	0x8(%r12), %xmm1
    00000025: 	movq	%r12, %rbx
    00000028: 	movq	-0x10(%r15), %rax
    0000002c: 	leaq	-0x10(%r15), %r14
    00000030: 	movq	(%rax), %rax
    00000033: 	cmpq	%rbp, %rax
    00000036: 	jne	.Ltmp73 # Offset: 54
    00000038: 	nopl	(%rax,%rax) # Size: 8
.Ltmp80:
    00000040: 	movsd	0x8(%r14), %xmm0
.Ltmp81:
    00000046: 	comisd	%xmm1, %xmm0
    0000004a: 	ja	.Ltmp74 # Offset: 74
    0000004c: 	cmpq	%rbx, %r14
    0000004f: 	ja	.Ltmp75 # Offset: 79
    00000051: 	jmp	.Ltmp76 # Offset: 81
    00000053: 	nopl	(%rax,%rax) # Size: 5
.Ltmp78:
    00000058: 	comisd	0x8(%rbx), %xmm1
    0000005d: 	jbe	.Ltmp77 # Offset: 93
.Ltmp79:
    0000005f: 	addq	$0x10, %rbx
.Ltmp75:
    00000063: 	movq	(%rbx), %rax
    00000066: 	movq	(%rax), %rax
    00000069: 	cmpq	%rbp, %rax
    0000006c: 	je	.Ltmp78 # Offset: 108
    0000006e: 	movsd	%xmm1, 0x8(%rsp)
    00000074: 	movq	%rbx, %rdi
    00000077: 	callq	*%rax # Offset: 119
    00000079: 	movsd	0x8(%rsp), %xmm1
    0000007f: 	comisd	%xmm0, %xmm1
    00000083: 	ja	.Ltmp79 # Offset: 131
.Ltmp77:
    00000085: 	cmpq	%rbx, %r14
    00000088: 	jbe	.Ltmp76 # Offset: 136
    0000008a: 	movsd	0x8(%r14), %xmm0
    00000090: 	movsd	0x8(%rbx), %xmm2
    00000095: 	movsd	%xmm2, 0x8(%r14)
    0000009b: 	movsd	%xmm0, 0x8(%rbx)
.Ltmp74:
    000000a0: 	movq	%r14, %r15
    000000a3: 	movq	-0x10(%r15), %rax
    000000a7: 	leaq	-0x10(%r15), %r14
    000000ab: 	movq	(%rax), %rax
    000000ae: 	cmpq	%rbp, %rax
    000000b1: 	je	.Ltmp80 # Offset: 177
.Ltmp73:
    000000b3: 	movsd	%xmm1, 0x8(%rsp)
    000000b9: 	movq	%r14, %rdi
    000000bc: 	callq	*%rax # Offset: 188
    000000be: 	movsd	0x8(%rsp), %xmm1
    000000c4: 	jmp	.Ltmp81 # Offset: 196
    000000c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp76:
    000000d0: 	movq	%r15, %rax
    000000d3: 	subq	%r12, %rax
    000000d6: 	cmpq	$0x10, %rax
    000000da: 	jle	.Ltmp82 # Offset: 218
    000000dc: 	movq	%r15, %rsi
    000000df: 	movq	%r12, %rdi
    000000e2: 	callq	"_ZN9benchmark9quicksortIP19TypeVirtualSubClassIdEEEvT_S4_.part.0/1" # Offset: 226
.Ltmp82:
    000000e7: 	movq	%r13, %rax
    000000ea: 	subq	%r15, %rax
    000000ed: 	cmpq	$0x10, %rax
    000000f1: 	jg	.Ltmp83 # Offset: 241
    000000f3: 	addq	$0x18, %rsp
    000000f7: 	popq	%rbx
    000000f8: 	popq	%rbp
    000000f9: 	popq	%r12
    000000fb: 	popq	%r13
    000000fd: 	popq	%r14
    000000ff: 	popq	%r15
    00000101: 	retq # Offset: 257
.Ltmp83:
    00000102: 	movq	%r15, %r12
    00000105: 	jmp	.Ltmp84 # Offset: 261
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIP19TypeVirtualSubClassIdEEEvT_S4_.part.0/1(*2)"

Binary Function "_ZN9benchmark9quicksortIP15WorkerSubClass3IiEEEvT_S4_.part.0/1(*2)" after disassembly {
  All names   : _ZN9benchmark9quicksortIP15WorkerSubClass3IiEEEvT_S4_.part.0/1
                _ZN9benchmark9quicksortIP15WorkerSubClass3IiEEEvT_S4_.part.0/stepanov_inherit.cpp/1
  Number      : 69
  State       : disassembled
  Address     : 0x3a30
  Size        : 0xdc
  MaxSize     : 0xe0
  Offset      : 0x3a30
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIP15WorkerSubClass3IiEEEvT_S4_.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB068:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	leaq	_ZN15WorkerSubClass3IiEcviEv(%rip), %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rsi, 0x8(%rsp)
.Ltmp96:
    0000001d: 	movq	0x8(%rsp), %r13
    00000022: 	movl	0x8(%r12), %ebp
    00000027: 	movq	%r12, %rbx
    0000002a: 	movq	-0x10(%r13), %rax
    0000002e: 	leaq	-0x10(%r13), %r15
    00000032: 	movq	(%rax), %rax
    00000035: 	cmpq	%r14, %rax
    00000038: 	jne	.Ltmp85 # Offset: 56
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp92:
    00000040: 	movl	0x8(%r15), %eax
.Ltmp93:
    00000044: 	cmpl	%eax, %ebp
    00000046: 	jl	.Ltmp86 # Offset: 70
    00000048: 	cmpq	%rbx, %r15
    0000004b: 	ja	.Ltmp87 # Offset: 75
    0000004d: 	jmp	.Ltmp88 # Offset: 77
    0000004f: 	nop # Size: 1
.Ltmp90:
    00000050: 	cmpl	0x8(%rbx), %ebp
    00000053: 	jle	.Ltmp89 # Offset: 83
.Ltmp91:
    00000055: 	addq	$0x10, %rbx
.Ltmp87:
    00000059: 	movq	(%rbx), %rax
    0000005c: 	movq	(%rax), %rax
    0000005f: 	cmpq	%r14, %rax
    00000062: 	je	.Ltmp90 # Offset: 98
    00000064: 	movq	%rbx, %rdi
    00000067: 	callq	*%rax # Offset: 103
    00000069: 	cmpl	%eax, %ebp
    0000006b: 	jg	.Ltmp91 # Offset: 107
.Ltmp89:
    0000006d: 	cmpq	%rbx, %r15
    00000070: 	jbe	.Ltmp88 # Offset: 112
    00000072: 	movl	0x8(%r15), %eax
    00000076: 	movl	0x8(%rbx), %edx
    00000079: 	movl	%edx, 0x8(%r15)
    0000007d: 	movl	%eax, 0x8(%rbx)
.Ltmp86:
    00000080: 	movq	%r15, %r13
    00000083: 	movq	-0x10(%r13), %rax
    00000087: 	leaq	-0x10(%r13), %r15
    0000008b: 	movq	(%rax), %rax
    0000008e: 	cmpq	%r14, %rax
    00000091: 	je	.Ltmp92 # Offset: 145
.Ltmp85:
    00000093: 	movq	%r15, %rdi
    00000096: 	callq	*%rax # Offset: 150
    00000098: 	jmp	.Ltmp93 # Offset: 152
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp88:
    000000a0: 	movq	%r13, %rax
    000000a3: 	subq	%r12, %rax
    000000a6: 	cmpq	$0x10, %rax
    000000aa: 	jle	.Ltmp94 # Offset: 170
    000000ac: 	movq	%r13, %rsi
    000000af: 	movq	%r12, %rdi
    000000b2: 	callq	"_ZN9benchmark9quicksortIP15WorkerSubClass3IiEEEvT_S4_.part.0/1" # Offset: 178
.Ltmp94:
    000000b7: 	movq	0x8(%rsp), %rax
    000000bc: 	subq	%r13, %rax
    000000bf: 	cmpq	$0x10, %rax
    000000c3: 	jg	.Ltmp95 # Offset: 195
    000000c5: 	addq	$0x18, %rsp
    000000c9: 	popq	%rbx
    000000ca: 	popq	%rbp
    000000cb: 	popq	%r12
    000000cd: 	popq	%r13
    000000cf: 	popq	%r14
    000000d1: 	popq	%r15
    000000d3: 	retq # Offset: 211
.Ltmp95:
    000000d4: 	movq	%r13, %r12
    000000d7: 	jmp	.Ltmp96 # Offset: 215
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIP15WorkerSubClass3IiEEEvT_S4_.part.0/1(*2)"

Binary Function "_ZN9benchmark9quicksortIP15WorkerSubClass2IiEEEvT_S4_.part.0/1(*2)" after disassembly {
  All names   : _ZN9benchmark9quicksortIP15WorkerSubClass2IiEEEvT_S4_.part.0/1
                _ZN9benchmark9quicksortIP15WorkerSubClass2IiEEEvT_S4_.part.0/stepanov_inherit.cpp/1
  Number      : 70
  State       : disassembled
  Address     : 0x3b10
  Size        : 0xdc
  MaxSize     : 0xe0
  Offset      : 0x3b10
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIP15WorkerSubClass2IiEEEvT_S4_.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB069:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	leaq	_ZN15WorkerSubClass2IiEcviEv(%rip), %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rsi, 0x8(%rsp)
.Ltmp108:
    0000001d: 	movq	0x8(%rsp), %r13
    00000022: 	movl	0x8(%r12), %ebp
    00000027: 	movq	%r12, %rbx
    0000002a: 	movq	-0x10(%r13), %rax
    0000002e: 	leaq	-0x10(%r13), %r15
    00000032: 	movq	(%rax), %rax
    00000035: 	cmpq	%r14, %rax
    00000038: 	jne	.Ltmp97 # Offset: 56
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp104:
    00000040: 	movl	0x8(%r15), %eax
.Ltmp105:
    00000044: 	cmpl	%eax, %ebp
    00000046: 	jl	.Ltmp98 # Offset: 70
    00000048: 	cmpq	%rbx, %r15
    0000004b: 	ja	.Ltmp99 # Offset: 75
    0000004d: 	jmp	.Ltmp100 # Offset: 77
    0000004f: 	nop # Size: 1
.Ltmp102:
    00000050: 	cmpl	0x8(%rbx), %ebp
    00000053: 	jle	.Ltmp101 # Offset: 83
.Ltmp103:
    00000055: 	addq	$0x10, %rbx
.Ltmp99:
    00000059: 	movq	(%rbx), %rax
    0000005c: 	movq	(%rax), %rax
    0000005f: 	cmpq	%r14, %rax
    00000062: 	je	.Ltmp102 # Offset: 98
    00000064: 	movq	%rbx, %rdi
    00000067: 	callq	*%rax # Offset: 103
    00000069: 	cmpl	%eax, %ebp
    0000006b: 	jg	.Ltmp103 # Offset: 107
.Ltmp101:
    0000006d: 	cmpq	%rbx, %r15
    00000070: 	jbe	.Ltmp100 # Offset: 112
    00000072: 	movl	0x8(%r15), %eax
    00000076: 	movl	0x8(%rbx), %edx
    00000079: 	movl	%edx, 0x8(%r15)
    0000007d: 	movl	%eax, 0x8(%rbx)
.Ltmp98:
    00000080: 	movq	%r15, %r13
    00000083: 	movq	-0x10(%r13), %rax
    00000087: 	leaq	-0x10(%r13), %r15
    0000008b: 	movq	(%rax), %rax
    0000008e: 	cmpq	%r14, %rax
    00000091: 	je	.Ltmp104 # Offset: 145
.Ltmp97:
    00000093: 	movq	%r15, %rdi
    00000096: 	callq	*%rax # Offset: 150
    00000098: 	jmp	.Ltmp105 # Offset: 152
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp100:
    000000a0: 	movq	%r13, %rax
    000000a3: 	subq	%r12, %rax
    000000a6: 	cmpq	$0x10, %rax
    000000aa: 	jle	.Ltmp106 # Offset: 170
    000000ac: 	movq	%r13, %rsi
    000000af: 	movq	%r12, %rdi
    000000b2: 	callq	"_ZN9benchmark9quicksortIP15WorkerSubClass2IiEEEvT_S4_.part.0/1" # Offset: 178
.Ltmp106:
    000000b7: 	movq	0x8(%rsp), %rax
    000000bc: 	subq	%r13, %rax
    000000bf: 	cmpq	$0x10, %rax
    000000c3: 	jg	.Ltmp107 # Offset: 195
    000000c5: 	addq	$0x18, %rsp
    000000c9: 	popq	%rbx
    000000ca: 	popq	%rbp
    000000cb: 	popq	%r12
    000000cd: 	popq	%r13
    000000cf: 	popq	%r14
    000000d1: 	popq	%r15
    000000d3: 	retq # Offset: 211
.Ltmp107:
    000000d4: 	movq	%r13, %r12
    000000d7: 	jmp	.Ltmp108 # Offset: 215
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIP15WorkerSubClass2IiEEEvT_S4_.part.0/1(*2)"

Binary Function "_ZN9benchmark9quicksortIP16TypeVirtualClassIdEEEvT_S4_.part.0/1(*2)" after disassembly {
  All names   : _ZN9benchmark9quicksortIP16TypeVirtualClassIdEEEvT_S4_.part.0/1
                _ZN9benchmark9quicksortIP16TypeVirtualClassIdEEEvT_S4_.part.0/stepanov_inherit.cpp/1
  Number      : 71
  State       : disassembled
  Address     : 0x3bf0
  Size        : 0x10a
  MaxSize     : 0x110
  Offset      : 0x3bf0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIP16TypeVirtualClassIdEEEvT_S4_.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB070:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	movq	%rsi, %r13
    00000009: 	pushq	%r12
    0000000b: 	movq	%rdi, %r12
    0000000e: 	pushq	%rbp
    0000000f: 	leaq	_ZN16TypeVirtualClassIdEcvdEv(%rip), %rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x18, %rsp
.Ltmp120:
    0000001b: 	movq	%r13, %r15
    0000001e: 	movsd	0x8(%r12), %xmm1
    00000025: 	movq	%r12, %rbx
    00000028: 	movq	-0x10(%r15), %rax
    0000002c: 	leaq	-0x10(%r15), %r14
    00000030: 	movq	(%rax), %rax
    00000033: 	cmpq	%rbp, %rax
    00000036: 	jne	.Ltmp109 # Offset: 54
    00000038: 	nopl	(%rax,%rax) # Size: 8
.Ltmp116:
    00000040: 	movsd	0x8(%r14), %xmm0
.Ltmp117:
    00000046: 	comisd	%xmm1, %xmm0
    0000004a: 	ja	.Ltmp110 # Offset: 74
    0000004c: 	cmpq	%rbx, %r14
    0000004f: 	ja	.Ltmp111 # Offset: 79
    00000051: 	jmp	.Ltmp112 # Offset: 81
    00000053: 	nopl	(%rax,%rax) # Size: 5
.Ltmp114:
    00000058: 	comisd	0x8(%rbx), %xmm1
    0000005d: 	jbe	.Ltmp113 # Offset: 93
.Ltmp115:
    0000005f: 	addq	$0x10, %rbx
.Ltmp111:
    00000063: 	movq	(%rbx), %rax
    00000066: 	movq	(%rax), %rax
    00000069: 	cmpq	%rbp, %rax
    0000006c: 	je	.Ltmp114 # Offset: 108
    0000006e: 	movsd	%xmm1, 0x8(%rsp)
    00000074: 	movq	%rbx, %rdi
    00000077: 	callq	*%rax # Offset: 119
    00000079: 	movsd	0x8(%rsp), %xmm1
    0000007f: 	comisd	%xmm0, %xmm1
    00000083: 	ja	.Ltmp115 # Offset: 131
.Ltmp113:
    00000085: 	cmpq	%rbx, %r14
    00000088: 	jbe	.Ltmp112 # Offset: 136
    0000008a: 	movsd	0x8(%r14), %xmm0
    00000090: 	movsd	0x8(%rbx), %xmm2
    00000095: 	movsd	%xmm2, 0x8(%r14)
    0000009b: 	movsd	%xmm0, 0x8(%rbx)
.Ltmp110:
    000000a0: 	movq	%r14, %r15
    000000a3: 	movq	-0x10(%r15), %rax
    000000a7: 	leaq	-0x10(%r15), %r14
    000000ab: 	movq	(%rax), %rax
    000000ae: 	cmpq	%rbp, %rax
    000000b1: 	je	.Ltmp116 # Offset: 177
.Ltmp109:
    000000b3: 	movsd	%xmm1, 0x8(%rsp)
    000000b9: 	movq	%r14, %rdi
    000000bc: 	callq	*%rax # Offset: 188
    000000be: 	movsd	0x8(%rsp), %xmm1
    000000c4: 	jmp	.Ltmp117 # Offset: 196
    000000c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp112:
    000000d0: 	movq	%r15, %rax
    000000d3: 	subq	%r12, %rax
    000000d6: 	cmpq	$0x10, %rax
    000000da: 	jle	.Ltmp118 # Offset: 218
    000000dc: 	movq	%r15, %rsi
    000000df: 	movq	%r12, %rdi
    000000e2: 	callq	"_ZN9benchmark9quicksortIP16TypeVirtualClassIdEEEvT_S4_.part.0/1" # Offset: 226
.Ltmp118:
    000000e7: 	movq	%r13, %rax
    000000ea: 	subq	%r15, %rax
    000000ed: 	cmpq	$0x10, %rax
    000000f1: 	jg	.Ltmp119 # Offset: 241
    000000f3: 	addq	$0x18, %rsp
    000000f7: 	popq	%rbx
    000000f8: 	popq	%rbp
    000000f9: 	popq	%r12
    000000fb: 	popq	%r13
    000000fd: 	popq	%r14
    000000ff: 	popq	%r15
    00000101: 	retq # Offset: 257
.Ltmp119:
    00000102: 	movq	%r15, %r12
    00000105: 	jmp	.Ltmp120 # Offset: 261
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIP16TypeVirtualClassIdEEEvT_S4_.part.0/1(*2)"

Binary Function "_ZN9benchmark9quicksortIP19TypeVirtualSubClassImEEEvT_S4_.part.0/1(*2)" after disassembly {
  All names   : _ZN9benchmark9quicksortIP19TypeVirtualSubClassImEEEvT_S4_.part.0/1
                _ZN9benchmark9quicksortIP19TypeVirtualSubClassImEEEvT_S4_.part.0/stepanov_inherit.cpp/1
  Number      : 72
  State       : disassembled
  Address     : 0x3d00
  Size        : 0xdc
  MaxSize     : 0xe0
  Offset      : 0x3d00
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIP19TypeVirtualSubClassImEEEvT_S4_.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB071:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	leaq	_ZN19TypeVirtualSubClassImEcvmEv(%rip), %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rsi, 0x8(%rsp)
.Ltmp132:
    0000001d: 	movq	0x8(%rsp), %r13
    00000022: 	movq	0x8(%r12), %rbp
    00000027: 	movq	%r12, %rbx
    0000002a: 	movq	-0x10(%r13), %rax
    0000002e: 	leaq	-0x10(%r13), %r15
    00000032: 	movq	(%rax), %rax
    00000035: 	cmpq	%r14, %rax
    00000038: 	jne	.Ltmp121 # Offset: 56
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp128:
    00000040: 	movq	0x8(%r15), %rax
.Ltmp129:
    00000044: 	cmpq	%rax, %rbp
    00000047: 	jb	.Ltmp122 # Offset: 71
    00000049: 	cmpq	%rbx, %r15
    0000004c: 	ja	.Ltmp123 # Offset: 76
    0000004e: 	jmp	.Ltmp124 # Offset: 78
.Ltmp126:
    00000050: 	cmpq	0x8(%rbx), %rbp
    00000054: 	jbe	.Ltmp125 # Offset: 84
.Ltmp127:
    00000056: 	addq	$0x10, %rbx
.Ltmp123:
    0000005a: 	movq	(%rbx), %rax
    0000005d: 	movq	(%rax), %rax
    00000060: 	cmpq	%r14, %rax
    00000063: 	je	.Ltmp126 # Offset: 99
    00000065: 	movq	%rbx, %rdi
    00000068: 	callq	*%rax # Offset: 104
    0000006a: 	cmpq	%rax, %rbp
    0000006d: 	ja	.Ltmp127 # Offset: 109
.Ltmp125:
    0000006f: 	cmpq	%rbx, %r15
    00000072: 	jbe	.Ltmp124 # Offset: 114
    00000074: 	movq	0x8(%r15), %rax
    00000078: 	movq	0x8(%rbx), %rdx
    0000007c: 	movq	%rdx, 0x8(%r15)
    00000080: 	movq	%rax, 0x8(%rbx)
.Ltmp122:
    00000084: 	movq	%r15, %r13
    00000087: 	movq	-0x10(%r13), %rax
    0000008b: 	leaq	-0x10(%r13), %r15
    0000008f: 	movq	(%rax), %rax
    00000092: 	cmpq	%r14, %rax
    00000095: 	je	.Ltmp128 # Offset: 149
.Ltmp121:
    00000097: 	movq	%r15, %rdi
    0000009a: 	callq	*%rax # Offset: 154
    0000009c: 	jmp	.Ltmp129 # Offset: 156
    0000009e: 	nop # Size: 2
.Ltmp124:
    000000a0: 	movq	%r13, %rax
    000000a3: 	subq	%r12, %rax
    000000a6: 	cmpq	$0x10, %rax
    000000aa: 	jle	.Ltmp130 # Offset: 170
    000000ac: 	movq	%r13, %rsi
    000000af: 	movq	%r12, %rdi
    000000b2: 	callq	"_ZN9benchmark9quicksortIP19TypeVirtualSubClassImEEEvT_S4_.part.0/1" # Offset: 178
.Ltmp130:
    000000b7: 	movq	0x8(%rsp), %rax
    000000bc: 	subq	%r13, %rax
    000000bf: 	cmpq	$0x10, %rax
    000000c3: 	jg	.Ltmp131 # Offset: 195
    000000c5: 	addq	$0x18, %rsp
    000000c9: 	popq	%rbx
    000000ca: 	popq	%rbp
    000000cb: 	popq	%r12
    000000cd: 	popq	%r13
    000000cf: 	popq	%r14
    000000d1: 	popq	%r15
    000000d3: 	retq # Offset: 211
.Ltmp131:
    000000d4: 	movq	%r13, %r12
    000000d7: 	jmp	.Ltmp132 # Offset: 215
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIP19TypeVirtualSubClassImEEEvT_S4_.part.0/1(*2)"

Binary Function "_ZN9benchmark9quicksortIP18WorkerDeepSubClassIiEEEvT_S4_.part.0/1(*2)" after disassembly {
  All names   : _ZN9benchmark9quicksortIP18WorkerDeepSubClassIiEEEvT_S4_.part.0/1
                _ZN9benchmark9quicksortIP18WorkerDeepSubClassIiEEEvT_S4_.part.0/stepanov_inherit.cpp/1
  Number      : 73
  State       : disassembled
  Address     : 0x3de0
  Size        : 0xdc
  MaxSize     : 0xe0
  Offset      : 0x3de0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIP18WorkerDeepSubClassIiEEEvT_S4_.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB072:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	leaq	_ZN18WorkerDeepSubClassIiEcviEv(%rip), %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rsi, 0x8(%rsp)
.Ltmp144:
    0000001d: 	movq	0x8(%rsp), %r13
    00000022: 	movl	0x8(%r12), %ebp
    00000027: 	movq	%r12, %rbx
    0000002a: 	movq	-0x10(%r13), %rax
    0000002e: 	leaq	-0x10(%r13), %r15
    00000032: 	movq	(%rax), %rax
    00000035: 	cmpq	%r14, %rax
    00000038: 	jne	.Ltmp133 # Offset: 56
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp140:
    00000040: 	movl	0x8(%r15), %eax
.Ltmp141:
    00000044: 	cmpl	%eax, %ebp
    00000046: 	jl	.Ltmp134 # Offset: 70
    00000048: 	cmpq	%rbx, %r15
    0000004b: 	ja	.Ltmp135 # Offset: 75
    0000004d: 	jmp	.Ltmp136 # Offset: 77
    0000004f: 	nop # Size: 1
.Ltmp138:
    00000050: 	cmpl	0x8(%rbx), %ebp
    00000053: 	jle	.Ltmp137 # Offset: 83
.Ltmp139:
    00000055: 	addq	$0x10, %rbx
.Ltmp135:
    00000059: 	movq	(%rbx), %rax
    0000005c: 	movq	(%rax), %rax
    0000005f: 	cmpq	%r14, %rax
    00000062: 	je	.Ltmp138 # Offset: 98
    00000064: 	movq	%rbx, %rdi
    00000067: 	callq	*%rax # Offset: 103
    00000069: 	cmpl	%eax, %ebp
    0000006b: 	jg	.Ltmp139 # Offset: 107
.Ltmp137:
    0000006d: 	cmpq	%rbx, %r15
    00000070: 	jbe	.Ltmp136 # Offset: 112
    00000072: 	movl	0x8(%r15), %eax
    00000076: 	movl	0x8(%rbx), %edx
    00000079: 	movl	%edx, 0x8(%r15)
    0000007d: 	movl	%eax, 0x8(%rbx)
.Ltmp134:
    00000080: 	movq	%r15, %r13
    00000083: 	movq	-0x10(%r13), %rax
    00000087: 	leaq	-0x10(%r13), %r15
    0000008b: 	movq	(%rax), %rax
    0000008e: 	cmpq	%r14, %rax
    00000091: 	je	.Ltmp140 # Offset: 145
.Ltmp133:
    00000093: 	movq	%r15, %rdi
    00000096: 	callq	*%rax # Offset: 150
    00000098: 	jmp	.Ltmp141 # Offset: 152
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp136:
    000000a0: 	movq	%r13, %rax
    000000a3: 	subq	%r12, %rax
    000000a6: 	cmpq	$0x10, %rax
    000000aa: 	jle	.Ltmp142 # Offset: 170
    000000ac: 	movq	%r13, %rsi
    000000af: 	movq	%r12, %rdi
    000000b2: 	callq	"_ZN9benchmark9quicksortIP18WorkerDeepSubClassIiEEEvT_S4_.part.0/1" # Offset: 178
.Ltmp142:
    000000b7: 	movq	0x8(%rsp), %rax
    000000bc: 	subq	%r13, %rax
    000000bf: 	cmpq	$0x10, %rax
    000000c3: 	jg	.Ltmp143 # Offset: 195
    000000c5: 	addq	$0x18, %rsp
    000000c9: 	popq	%rbx
    000000ca: 	popq	%rbp
    000000cb: 	popq	%r12
    000000cd: 	popq	%r13
    000000cf: 	popq	%r14
    000000d1: 	popq	%r15
    000000d3: 	retq # Offset: 211
.Ltmp143:
    000000d4: 	movq	%r13, %r12
    000000d7: 	jmp	.Ltmp144 # Offset: 215
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIP18WorkerDeepSubClassIiEEEvT_S4_.part.0/1(*2)"

Binary Function "_ZN9benchmark9quicksortIP18WorkerDeepSubClassImEEEvT_S4_.part.0/1(*2)" after disassembly {
  All names   : _ZN9benchmark9quicksortIP18WorkerDeepSubClassImEEEvT_S4_.part.0/1
                _ZN9benchmark9quicksortIP18WorkerDeepSubClassImEEEvT_S4_.part.0/stepanov_inherit.cpp/1
  Number      : 74
  State       : disassembled
  Address     : 0x3ec0
  Size        : 0xdc
  MaxSize     : 0xe0
  Offset      : 0x3ec0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIP18WorkerDeepSubClassImEEEvT_S4_.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB073:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	leaq	_ZN18WorkerDeepSubClassImEcvmEv(%rip), %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rsi, 0x8(%rsp)
.Ltmp156:
    0000001d: 	movq	0x8(%rsp), %r13
    00000022: 	movq	0x8(%r12), %rbp
    00000027: 	movq	%r12, %rbx
    0000002a: 	movq	-0x10(%r13), %rax
    0000002e: 	leaq	-0x10(%r13), %r15
    00000032: 	movq	(%rax), %rax
    00000035: 	cmpq	%r14, %rax
    00000038: 	jne	.Ltmp145 # Offset: 56
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp152:
    00000040: 	movq	0x8(%r15), %rax
.Ltmp153:
    00000044: 	cmpq	%rax, %rbp
    00000047: 	jb	.Ltmp146 # Offset: 71
    00000049: 	cmpq	%rbx, %r15
    0000004c: 	ja	.Ltmp147 # Offset: 76
    0000004e: 	jmp	.Ltmp148 # Offset: 78
.Ltmp150:
    00000050: 	cmpq	0x8(%rbx), %rbp
    00000054: 	jbe	.Ltmp149 # Offset: 84
.Ltmp151:
    00000056: 	addq	$0x10, %rbx
.Ltmp147:
    0000005a: 	movq	(%rbx), %rax
    0000005d: 	movq	(%rax), %rax
    00000060: 	cmpq	%r14, %rax
    00000063: 	je	.Ltmp150 # Offset: 99
    00000065: 	movq	%rbx, %rdi
    00000068: 	callq	*%rax # Offset: 104
    0000006a: 	cmpq	%rax, %rbp
    0000006d: 	ja	.Ltmp151 # Offset: 109
.Ltmp149:
    0000006f: 	cmpq	%rbx, %r15
    00000072: 	jbe	.Ltmp148 # Offset: 114
    00000074: 	movq	0x8(%r15), %rax
    00000078: 	movq	0x8(%rbx), %rdx
    0000007c: 	movq	%rdx, 0x8(%r15)
    00000080: 	movq	%rax, 0x8(%rbx)
.Ltmp146:
    00000084: 	movq	%r15, %r13
    00000087: 	movq	-0x10(%r13), %rax
    0000008b: 	leaq	-0x10(%r13), %r15
    0000008f: 	movq	(%rax), %rax
    00000092: 	cmpq	%r14, %rax
    00000095: 	je	.Ltmp152 # Offset: 149
.Ltmp145:
    00000097: 	movq	%r15, %rdi
    0000009a: 	callq	*%rax # Offset: 154
    0000009c: 	jmp	.Ltmp153 # Offset: 156
    0000009e: 	nop # Size: 2
.Ltmp148:
    000000a0: 	movq	%r13, %rax
    000000a3: 	subq	%r12, %rax
    000000a6: 	cmpq	$0x10, %rax
    000000aa: 	jle	.Ltmp154 # Offset: 170
    000000ac: 	movq	%r13, %rsi
    000000af: 	movq	%r12, %rdi
    000000b2: 	callq	"_ZN9benchmark9quicksortIP18WorkerDeepSubClassImEEEvT_S4_.part.0/1" # Offset: 178
.Ltmp154:
    000000b7: 	movq	0x8(%rsp), %rax
    000000bc: 	subq	%r13, %rax
    000000bf: 	cmpq	$0x10, %rax
    000000c3: 	jg	.Ltmp155 # Offset: 195
    000000c5: 	addq	$0x18, %rsp
    000000c9: 	popq	%rbx
    000000ca: 	popq	%rbp
    000000cb: 	popq	%r12
    000000cd: 	popq	%r13
    000000cf: 	popq	%r14
    000000d1: 	popq	%r15
    000000d3: 	retq # Offset: 211
.Ltmp155:
    000000d4: 	movq	%r13, %r12
    000000d7: 	jmp	.Ltmp156 # Offset: 215
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIP18WorkerDeepSubClassImEEEvT_S4_.part.0/1(*2)"

Binary Function "_ZN9benchmark9quicksortIP14WorkerSubClassImEEEvT_S4_.part.0/1(*2)" after disassembly {
  All names   : _ZN9benchmark9quicksortIP14WorkerSubClassImEEEvT_S4_.part.0/1
                _ZN9benchmark9quicksortIP14WorkerSubClassImEEEvT_S4_.part.0/stepanov_inherit.cpp/1
  Number      : 75
  State       : disassembled
  Address     : 0x3fa0
  Size        : 0xdc
  MaxSize     : 0xe0
  Offset      : 0x3fa0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIP14WorkerSubClassImEEEvT_S4_.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB074:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	leaq	_ZN14WorkerSubClassImEcvmEv(%rip), %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rsi, 0x8(%rsp)
.Ltmp168:
    0000001d: 	movq	0x8(%rsp), %r13
    00000022: 	movq	0x8(%r12), %rbp
    00000027: 	movq	%r12, %rbx
    0000002a: 	movq	-0x10(%r13), %rax
    0000002e: 	leaq	-0x10(%r13), %r15
    00000032: 	movq	(%rax), %rax
    00000035: 	cmpq	%r14, %rax
    00000038: 	jne	.Ltmp157 # Offset: 56
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp164:
    00000040: 	movq	0x8(%r15), %rax
.Ltmp165:
    00000044: 	cmpq	%rax, %rbp
    00000047: 	jb	.Ltmp158 # Offset: 71
    00000049: 	cmpq	%rbx, %r15
    0000004c: 	ja	.Ltmp159 # Offset: 76
    0000004e: 	jmp	.Ltmp160 # Offset: 78
.Ltmp162:
    00000050: 	cmpq	0x8(%rbx), %rbp
    00000054: 	jbe	.Ltmp161 # Offset: 84
.Ltmp163:
    00000056: 	addq	$0x10, %rbx
.Ltmp159:
    0000005a: 	movq	(%rbx), %rax
    0000005d: 	movq	(%rax), %rax
    00000060: 	cmpq	%r14, %rax
    00000063: 	je	.Ltmp162 # Offset: 99
    00000065: 	movq	%rbx, %rdi
    00000068: 	callq	*%rax # Offset: 104
    0000006a: 	cmpq	%rax, %rbp
    0000006d: 	ja	.Ltmp163 # Offset: 109
.Ltmp161:
    0000006f: 	cmpq	%rbx, %r15
    00000072: 	jbe	.Ltmp160 # Offset: 114
    00000074: 	movq	0x8(%r15), %rax
    00000078: 	movq	0x8(%rbx), %rdx
    0000007c: 	movq	%rdx, 0x8(%r15)
    00000080: 	movq	%rax, 0x8(%rbx)
.Ltmp158:
    00000084: 	movq	%r15, %r13
    00000087: 	movq	-0x10(%r13), %rax
    0000008b: 	leaq	-0x10(%r13), %r15
    0000008f: 	movq	(%rax), %rax
    00000092: 	cmpq	%r14, %rax
    00000095: 	je	.Ltmp164 # Offset: 149
.Ltmp157:
    00000097: 	movq	%r15, %rdi
    0000009a: 	callq	*%rax # Offset: 154
    0000009c: 	jmp	.Ltmp165 # Offset: 156
    0000009e: 	nop # Size: 2
.Ltmp160:
    000000a0: 	movq	%r13, %rax
    000000a3: 	subq	%r12, %rax
    000000a6: 	cmpq	$0x10, %rax
    000000aa: 	jle	.Ltmp166 # Offset: 170
    000000ac: 	movq	%r13, %rsi
    000000af: 	movq	%r12, %rdi
    000000b2: 	callq	"_ZN9benchmark9quicksortIP14WorkerSubClassImEEEvT_S4_.part.0/1" # Offset: 178
.Ltmp166:
    000000b7: 	movq	0x8(%rsp), %rax
    000000bc: 	subq	%r13, %rax
    000000bf: 	cmpq	$0x10, %rax
    000000c3: 	jg	.Ltmp167 # Offset: 195
    000000c5: 	addq	$0x18, %rsp
    000000c9: 	popq	%rbx
    000000ca: 	popq	%rbp
    000000cb: 	popq	%r12
    000000cd: 	popq	%r13
    000000cf: 	popq	%r14
    000000d1: 	popq	%r15
    000000d3: 	retq # Offset: 211
.Ltmp167:
    000000d4: 	movq	%r13, %r12
    000000d7: 	jmp	.Ltmp168 # Offset: 215
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIP14WorkerSubClassImEEEvT_S4_.part.0/1(*2)"

Binary Function "_ZN9benchmark9quicksortIP15WorkerSubClass2ImEEEvT_S4_.part.0/1(*2)" after disassembly {
  All names   : _ZN9benchmark9quicksortIP15WorkerSubClass2ImEEEvT_S4_.part.0/1
                _ZN9benchmark9quicksortIP15WorkerSubClass2ImEEEvT_S4_.part.0/stepanov_inherit.cpp/1
  Number      : 76
  State       : disassembled
  Address     : 0x4080
  Size        : 0xdc
  MaxSize     : 0xe0
  Offset      : 0x4080
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIP15WorkerSubClass2ImEEEvT_S4_.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB075:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	leaq	_ZN15WorkerSubClass2ImEcvmEv(%rip), %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rsi, 0x8(%rsp)
.Ltmp180:
    0000001d: 	movq	0x8(%rsp), %r13
    00000022: 	movq	0x8(%r12), %rbp
    00000027: 	movq	%r12, %rbx
    0000002a: 	movq	-0x10(%r13), %rax
    0000002e: 	leaq	-0x10(%r13), %r15
    00000032: 	movq	(%rax), %rax
    00000035: 	cmpq	%r14, %rax
    00000038: 	jne	.Ltmp169 # Offset: 56
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp176:
    00000040: 	movq	0x8(%r15), %rax
.Ltmp177:
    00000044: 	cmpq	%rax, %rbp
    00000047: 	jb	.Ltmp170 # Offset: 71
    00000049: 	cmpq	%rbx, %r15
    0000004c: 	ja	.Ltmp171 # Offset: 76
    0000004e: 	jmp	.Ltmp172 # Offset: 78
.Ltmp174:
    00000050: 	cmpq	0x8(%rbx), %rbp
    00000054: 	jbe	.Ltmp173 # Offset: 84
.Ltmp175:
    00000056: 	addq	$0x10, %rbx
.Ltmp171:
    0000005a: 	movq	(%rbx), %rax
    0000005d: 	movq	(%rax), %rax
    00000060: 	cmpq	%r14, %rax
    00000063: 	je	.Ltmp174 # Offset: 99
    00000065: 	movq	%rbx, %rdi
    00000068: 	callq	*%rax # Offset: 104
    0000006a: 	cmpq	%rax, %rbp
    0000006d: 	ja	.Ltmp175 # Offset: 109
.Ltmp173:
    0000006f: 	cmpq	%rbx, %r15
    00000072: 	jbe	.Ltmp172 # Offset: 114
    00000074: 	movq	0x8(%r15), %rax
    00000078: 	movq	0x8(%rbx), %rdx
    0000007c: 	movq	%rdx, 0x8(%r15)
    00000080: 	movq	%rax, 0x8(%rbx)
.Ltmp170:
    00000084: 	movq	%r15, %r13
    00000087: 	movq	-0x10(%r13), %rax
    0000008b: 	leaq	-0x10(%r13), %r15
    0000008f: 	movq	(%rax), %rax
    00000092: 	cmpq	%r14, %rax
    00000095: 	je	.Ltmp176 # Offset: 149
.Ltmp169:
    00000097: 	movq	%r15, %rdi
    0000009a: 	callq	*%rax # Offset: 154
    0000009c: 	jmp	.Ltmp177 # Offset: 156
    0000009e: 	nop # Size: 2
.Ltmp172:
    000000a0: 	movq	%r13, %rax
    000000a3: 	subq	%r12, %rax
    000000a6: 	cmpq	$0x10, %rax
    000000aa: 	jle	.Ltmp178 # Offset: 170
    000000ac: 	movq	%r13, %rsi
    000000af: 	movq	%r12, %rdi
    000000b2: 	callq	"_ZN9benchmark9quicksortIP15WorkerSubClass2ImEEEvT_S4_.part.0/1" # Offset: 178
.Ltmp178:
    000000b7: 	movq	0x8(%rsp), %rax
    000000bc: 	subq	%r13, %rax
    000000bf: 	cmpq	$0x10, %rax
    000000c3: 	jg	.Ltmp179 # Offset: 195
    000000c5: 	addq	$0x18, %rsp
    000000c9: 	popq	%rbx
    000000ca: 	popq	%rbp
    000000cb: 	popq	%r12
    000000cd: 	popq	%r13
    000000cf: 	popq	%r14
    000000d1: 	popq	%r15
    000000d3: 	retq # Offset: 211
.Ltmp179:
    000000d4: 	movq	%r13, %r12
    000000d7: 	jmp	.Ltmp180 # Offset: 215
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIP15WorkerSubClass2ImEEEvT_S4_.part.0/1(*2)"

Binary Function "_ZN9benchmark9quicksortIP18WorkerDeepSubClassIdEEEvT_S4_.part.0/1(*2)" after disassembly {
  All names   : _ZN9benchmark9quicksortIP18WorkerDeepSubClassIdEEEvT_S4_.part.0/1
                _ZN9benchmark9quicksortIP18WorkerDeepSubClassIdEEEvT_S4_.part.0/stepanov_inherit.cpp/1
  Number      : 77
  State       : disassembled
  Address     : 0x4160
  Size        : 0x10a
  MaxSize     : 0x110
  Offset      : 0x4160
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIP18WorkerDeepSubClassIdEEEvT_S4_.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB076:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	movq	%rsi, %r13
    00000009: 	pushq	%r12
    0000000b: 	movq	%rdi, %r12
    0000000e: 	pushq	%rbp
    0000000f: 	leaq	_ZN18WorkerDeepSubClassIdEcvdEv(%rip), %rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x18, %rsp
.Ltmp192:
    0000001b: 	movq	%r13, %r15
    0000001e: 	movsd	0x8(%r12), %xmm1
    00000025: 	movq	%r12, %rbx
    00000028: 	movq	-0x10(%r15), %rax
    0000002c: 	leaq	-0x10(%r15), %r14
    00000030: 	movq	(%rax), %rax
    00000033: 	cmpq	%rbp, %rax
    00000036: 	jne	.Ltmp181 # Offset: 54
    00000038: 	nopl	(%rax,%rax) # Size: 8
.Ltmp188:
    00000040: 	movsd	0x8(%r14), %xmm0
.Ltmp189:
    00000046: 	comisd	%xmm1, %xmm0
    0000004a: 	ja	.Ltmp182 # Offset: 74
    0000004c: 	cmpq	%rbx, %r14
    0000004f: 	ja	.Ltmp183 # Offset: 79
    00000051: 	jmp	.Ltmp184 # Offset: 81
    00000053: 	nopl	(%rax,%rax) # Size: 5
.Ltmp186:
    00000058: 	comisd	0x8(%rbx), %xmm1
    0000005d: 	jbe	.Ltmp185 # Offset: 93
.Ltmp187:
    0000005f: 	addq	$0x10, %rbx
.Ltmp183:
    00000063: 	movq	(%rbx), %rax
    00000066: 	movq	(%rax), %rax
    00000069: 	cmpq	%rbp, %rax
    0000006c: 	je	.Ltmp186 # Offset: 108
    0000006e: 	movsd	%xmm1, 0x8(%rsp)
    00000074: 	movq	%rbx, %rdi
    00000077: 	callq	*%rax # Offset: 119
    00000079: 	movsd	0x8(%rsp), %xmm1
    0000007f: 	comisd	%xmm0, %xmm1
    00000083: 	ja	.Ltmp187 # Offset: 131
.Ltmp185:
    00000085: 	cmpq	%rbx, %r14
    00000088: 	jbe	.Ltmp184 # Offset: 136
    0000008a: 	movsd	0x8(%r14), %xmm0
    00000090: 	movsd	0x8(%rbx), %xmm2
    00000095: 	movsd	%xmm2, 0x8(%r14)
    0000009b: 	movsd	%xmm0, 0x8(%rbx)
.Ltmp182:
    000000a0: 	movq	%r14, %r15
    000000a3: 	movq	-0x10(%r15), %rax
    000000a7: 	leaq	-0x10(%r15), %r14
    000000ab: 	movq	(%rax), %rax
    000000ae: 	cmpq	%rbp, %rax
    000000b1: 	je	.Ltmp188 # Offset: 177
.Ltmp181:
    000000b3: 	movsd	%xmm1, 0x8(%rsp)
    000000b9: 	movq	%r14, %rdi
    000000bc: 	callq	*%rax # Offset: 188
    000000be: 	movsd	0x8(%rsp), %xmm1
    000000c4: 	jmp	.Ltmp189 # Offset: 196
    000000c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp184:
    000000d0: 	movq	%r15, %rax
    000000d3: 	subq	%r12, %rax
    000000d6: 	cmpq	$0x10, %rax
    000000da: 	jle	.Ltmp190 # Offset: 218
    000000dc: 	movq	%r15, %rsi
    000000df: 	movq	%r12, %rdi
    000000e2: 	callq	"_ZN9benchmark9quicksortIP18WorkerDeepSubClassIdEEEvT_S4_.part.0/1" # Offset: 226
.Ltmp190:
    000000e7: 	movq	%r13, %rax
    000000ea: 	subq	%r15, %rax
    000000ed: 	cmpq	$0x10, %rax
    000000f1: 	jg	.Ltmp191 # Offset: 241
    000000f3: 	addq	$0x18, %rsp
    000000f7: 	popq	%rbx
    000000f8: 	popq	%rbp
    000000f9: 	popq	%r12
    000000fb: 	popq	%r13
    000000fd: 	popq	%r14
    000000ff: 	popq	%r15
    00000101: 	retq # Offset: 257
.Ltmp191:
    00000102: 	movq	%r15, %r12
    00000105: 	jmp	.Ltmp192 # Offset: 261
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIP18WorkerDeepSubClassIdEEEvT_S4_.part.0/1(*2)"

Binary Function "_ZN9benchmark9quicksortIP15WorkerSubClass3ImEEEvT_S4_.part.0/1(*2)" after disassembly {
  All names   : _ZN9benchmark9quicksortIP15WorkerSubClass3ImEEEvT_S4_.part.0/1
                _ZN9benchmark9quicksortIP15WorkerSubClass3ImEEEvT_S4_.part.0/stepanov_inherit.cpp/1
  Number      : 78
  State       : disassembled
  Address     : 0x4270
  Size        : 0xdc
  MaxSize     : 0xe0
  Offset      : 0x4270
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIP15WorkerSubClass3ImEEEvT_S4_.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB077:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	leaq	_ZN15WorkerSubClass3ImEcvmEv(%rip), %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rsi, 0x8(%rsp)
.Ltmp204:
    0000001d: 	movq	0x8(%rsp), %r13
    00000022: 	movq	0x8(%r12), %rbp
    00000027: 	movq	%r12, %rbx
    0000002a: 	movq	-0x10(%r13), %rax
    0000002e: 	leaq	-0x10(%r13), %r15
    00000032: 	movq	(%rax), %rax
    00000035: 	cmpq	%r14, %rax
    00000038: 	jne	.Ltmp193 # Offset: 56
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp200:
    00000040: 	movq	0x8(%r15), %rax
.Ltmp201:
    00000044: 	cmpq	%rax, %rbp
    00000047: 	jb	.Ltmp194 # Offset: 71
    00000049: 	cmpq	%rbx, %r15
    0000004c: 	ja	.Ltmp195 # Offset: 76
    0000004e: 	jmp	.Ltmp196 # Offset: 78
.Ltmp198:
    00000050: 	cmpq	0x8(%rbx), %rbp
    00000054: 	jbe	.Ltmp197 # Offset: 84
.Ltmp199:
    00000056: 	addq	$0x10, %rbx
.Ltmp195:
    0000005a: 	movq	(%rbx), %rax
    0000005d: 	movq	(%rax), %rax
    00000060: 	cmpq	%r14, %rax
    00000063: 	je	.Ltmp198 # Offset: 99
    00000065: 	movq	%rbx, %rdi
    00000068: 	callq	*%rax # Offset: 104
    0000006a: 	cmpq	%rax, %rbp
    0000006d: 	ja	.Ltmp199 # Offset: 109
.Ltmp197:
    0000006f: 	cmpq	%rbx, %r15
    00000072: 	jbe	.Ltmp196 # Offset: 114
    00000074: 	movq	0x8(%r15), %rax
    00000078: 	movq	0x8(%rbx), %rdx
    0000007c: 	movq	%rdx, 0x8(%r15)
    00000080: 	movq	%rax, 0x8(%rbx)
.Ltmp194:
    00000084: 	movq	%r15, %r13
    00000087: 	movq	-0x10(%r13), %rax
    0000008b: 	leaq	-0x10(%r13), %r15
    0000008f: 	movq	(%rax), %rax
    00000092: 	cmpq	%r14, %rax
    00000095: 	je	.Ltmp200 # Offset: 149
.Ltmp193:
    00000097: 	movq	%r15, %rdi
    0000009a: 	callq	*%rax # Offset: 154
    0000009c: 	jmp	.Ltmp201 # Offset: 156
    0000009e: 	nop # Size: 2
.Ltmp196:
    000000a0: 	movq	%r13, %rax
    000000a3: 	subq	%r12, %rax
    000000a6: 	cmpq	$0x10, %rax
    000000aa: 	jle	.Ltmp202 # Offset: 170
    000000ac: 	movq	%r13, %rsi
    000000af: 	movq	%r12, %rdi
    000000b2: 	callq	"_ZN9benchmark9quicksortIP15WorkerSubClass3ImEEEvT_S4_.part.0/1" # Offset: 178
.Ltmp202:
    000000b7: 	movq	0x8(%rsp), %rax
    000000bc: 	subq	%r13, %rax
    000000bf: 	cmpq	$0x10, %rax
    000000c3: 	jg	.Ltmp203 # Offset: 195
    000000c5: 	addq	$0x18, %rsp
    000000c9: 	popq	%rbx
    000000ca: 	popq	%rbp
    000000cb: 	popq	%r12
    000000cd: 	popq	%r13
    000000cf: 	popq	%r14
    000000d1: 	popq	%r15
    000000d3: 	retq # Offset: 211
.Ltmp203:
    000000d4: 	movq	%r13, %r12
    000000d7: 	jmp	.Ltmp204 # Offset: 215
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIP15WorkerSubClass3ImEEEvT_S4_.part.0/1(*2)"

Binary Function "_ZN9benchmark9quicksortIP16TypeVirtualClassImEEEvT_S4_.part.0/1(*2)" after disassembly {
  All names   : _ZN9benchmark9quicksortIP16TypeVirtualClassImEEEvT_S4_.part.0/1
                _ZN9benchmark9quicksortIP16TypeVirtualClassImEEEvT_S4_.part.0/stepanov_inherit.cpp/1
  Number      : 79
  State       : disassembled
  Address     : 0x4350
  Size        : 0xdc
  MaxSize     : 0xe0
  Offset      : 0x4350
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIP16TypeVirtualClassImEEEvT_S4_.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB078:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	leaq	_ZN16TypeVirtualClassImEcvmEv(%rip), %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rsi, 0x8(%rsp)
.Ltmp216:
    0000001d: 	movq	0x8(%rsp), %r13
    00000022: 	movq	0x8(%r12), %rbp
    00000027: 	movq	%r12, %rbx
    0000002a: 	movq	-0x10(%r13), %rax
    0000002e: 	leaq	-0x10(%r13), %r15
    00000032: 	movq	(%rax), %rax
    00000035: 	cmpq	%r14, %rax
    00000038: 	jne	.Ltmp205 # Offset: 56
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp212:
    00000040: 	movq	0x8(%r15), %rax
.Ltmp213:
    00000044: 	cmpq	%rax, %rbp
    00000047: 	jb	.Ltmp206 # Offset: 71
    00000049: 	cmpq	%rbx, %r15
    0000004c: 	ja	.Ltmp207 # Offset: 76
    0000004e: 	jmp	.Ltmp208 # Offset: 78
.Ltmp210:
    00000050: 	cmpq	0x8(%rbx), %rbp
    00000054: 	jbe	.Ltmp209 # Offset: 84
.Ltmp211:
    00000056: 	addq	$0x10, %rbx
.Ltmp207:
    0000005a: 	movq	(%rbx), %rax
    0000005d: 	movq	(%rax), %rax
    00000060: 	cmpq	%r14, %rax
    00000063: 	je	.Ltmp210 # Offset: 99
    00000065: 	movq	%rbx, %rdi
    00000068: 	callq	*%rax # Offset: 104
    0000006a: 	cmpq	%rax, %rbp
    0000006d: 	ja	.Ltmp211 # Offset: 109
.Ltmp209:
    0000006f: 	cmpq	%rbx, %r15
    00000072: 	jbe	.Ltmp208 # Offset: 114
    00000074: 	movq	0x8(%r15), %rax
    00000078: 	movq	0x8(%rbx), %rdx
    0000007c: 	movq	%rdx, 0x8(%r15)
    00000080: 	movq	%rax, 0x8(%rbx)
.Ltmp206:
    00000084: 	movq	%r15, %r13
    00000087: 	movq	-0x10(%r13), %rax
    0000008b: 	leaq	-0x10(%r13), %r15
    0000008f: 	movq	(%rax), %rax
    00000092: 	cmpq	%r14, %rax
    00000095: 	je	.Ltmp212 # Offset: 149
.Ltmp205:
    00000097: 	movq	%r15, %rdi
    0000009a: 	callq	*%rax # Offset: 154
    0000009c: 	jmp	.Ltmp213 # Offset: 156
    0000009e: 	nop # Size: 2
.Ltmp208:
    000000a0: 	movq	%r13, %rax
    000000a3: 	subq	%r12, %rax
    000000a6: 	cmpq	$0x10, %rax
    000000aa: 	jle	.Ltmp214 # Offset: 170
    000000ac: 	movq	%r13, %rsi
    000000af: 	movq	%r12, %rdi
    000000b2: 	callq	"_ZN9benchmark9quicksortIP16TypeVirtualClassImEEEvT_S4_.part.0/1" # Offset: 178
.Ltmp214:
    000000b7: 	movq	0x8(%rsp), %rax
    000000bc: 	subq	%r13, %rax
    000000bf: 	cmpq	$0x10, %rax
    000000c3: 	jg	.Ltmp215 # Offset: 195
    000000c5: 	addq	$0x18, %rsp
    000000c9: 	popq	%rbx
    000000ca: 	popq	%rbp
    000000cb: 	popq	%r12
    000000cd: 	popq	%r13
    000000cf: 	popq	%r14
    000000d1: 	popq	%r15
    000000d3: 	retq # Offset: 211
.Ltmp215:
    000000d4: 	movq	%r13, %r12
    000000d7: 	jmp	.Ltmp216 # Offset: 215
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIP16TypeVirtualClassImEEEvT_S4_.part.0/1(*2)"

Binary Function "_ZN9benchmark9quicksortIP15WorkerSubClass3IdEEEvT_S4_.part.0/1(*2)" after disassembly {
  All names   : _ZN9benchmark9quicksortIP15WorkerSubClass3IdEEEvT_S4_.part.0/1
                _ZN9benchmark9quicksortIP15WorkerSubClass3IdEEEvT_S4_.part.0/stepanov_inherit.cpp/1
  Number      : 80
  State       : disassembled
  Address     : 0x4430
  Size        : 0x10a
  MaxSize     : 0x110
  Offset      : 0x4430
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIP15WorkerSubClass3IdEEEvT_S4_.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB079:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	movq	%rsi, %r13
    00000009: 	pushq	%r12
    0000000b: 	movq	%rdi, %r12
    0000000e: 	pushq	%rbp
    0000000f: 	leaq	_ZN15WorkerSubClass3IdEcvdEv(%rip), %rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x18, %rsp
.Ltmp228:
    0000001b: 	movq	%r13, %r15
    0000001e: 	movsd	0x8(%r12), %xmm1
    00000025: 	movq	%r12, %rbx
    00000028: 	movq	-0x10(%r15), %rax
    0000002c: 	leaq	-0x10(%r15), %r14
    00000030: 	movq	(%rax), %rax
    00000033: 	cmpq	%rbp, %rax
    00000036: 	jne	.Ltmp217 # Offset: 54
    00000038: 	nopl	(%rax,%rax) # Size: 8
.Ltmp224:
    00000040: 	movsd	0x8(%r14), %xmm0
.Ltmp225:
    00000046: 	comisd	%xmm1, %xmm0
    0000004a: 	ja	.Ltmp218 # Offset: 74
    0000004c: 	cmpq	%rbx, %r14
    0000004f: 	ja	.Ltmp219 # Offset: 79
    00000051: 	jmp	.Ltmp220 # Offset: 81
    00000053: 	nopl	(%rax,%rax) # Size: 5
.Ltmp222:
    00000058: 	comisd	0x8(%rbx), %xmm1
    0000005d: 	jbe	.Ltmp221 # Offset: 93
.Ltmp223:
    0000005f: 	addq	$0x10, %rbx
.Ltmp219:
    00000063: 	movq	(%rbx), %rax
    00000066: 	movq	(%rax), %rax
    00000069: 	cmpq	%rbp, %rax
    0000006c: 	je	.Ltmp222 # Offset: 108
    0000006e: 	movsd	%xmm1, 0x8(%rsp)
    00000074: 	movq	%rbx, %rdi
    00000077: 	callq	*%rax # Offset: 119
    00000079: 	movsd	0x8(%rsp), %xmm1
    0000007f: 	comisd	%xmm0, %xmm1
    00000083: 	ja	.Ltmp223 # Offset: 131
.Ltmp221:
    00000085: 	cmpq	%rbx, %r14
    00000088: 	jbe	.Ltmp220 # Offset: 136
    0000008a: 	movsd	0x8(%r14), %xmm0
    00000090: 	movsd	0x8(%rbx), %xmm2
    00000095: 	movsd	%xmm2, 0x8(%r14)
    0000009b: 	movsd	%xmm0, 0x8(%rbx)
.Ltmp218:
    000000a0: 	movq	%r14, %r15
    000000a3: 	movq	-0x10(%r15), %rax
    000000a7: 	leaq	-0x10(%r15), %r14
    000000ab: 	movq	(%rax), %rax
    000000ae: 	cmpq	%rbp, %rax
    000000b1: 	je	.Ltmp224 # Offset: 177
.Ltmp217:
    000000b3: 	movsd	%xmm1, 0x8(%rsp)
    000000b9: 	movq	%r14, %rdi
    000000bc: 	callq	*%rax # Offset: 188
    000000be: 	movsd	0x8(%rsp), %xmm1
    000000c4: 	jmp	.Ltmp225 # Offset: 196
    000000c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp220:
    000000d0: 	movq	%r15, %rax
    000000d3: 	subq	%r12, %rax
    000000d6: 	cmpq	$0x10, %rax
    000000da: 	jle	.Ltmp226 # Offset: 218
    000000dc: 	movq	%r15, %rsi
    000000df: 	movq	%r12, %rdi
    000000e2: 	callq	"_ZN9benchmark9quicksortIP15WorkerSubClass3IdEEEvT_S4_.part.0/1" # Offset: 226
.Ltmp226:
    000000e7: 	movq	%r13, %rax
    000000ea: 	subq	%r15, %rax
    000000ed: 	cmpq	$0x10, %rax
    000000f1: 	jg	.Ltmp227 # Offset: 241
    000000f3: 	addq	$0x18, %rsp
    000000f7: 	popq	%rbx
    000000f8: 	popq	%rbp
    000000f9: 	popq	%r12
    000000fb: 	popq	%r13
    000000fd: 	popq	%r14
    000000ff: 	popq	%r15
    00000101: 	retq # Offset: 257
.Ltmp227:
    00000102: 	movq	%r15, %r12
    00000105: 	jmp	.Ltmp228 # Offset: 261
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIP15WorkerSubClass3IdEEEvT_S4_.part.0/1(*2)"

Binary Function "_ZN9benchmark9quicksortIP16TypeVirtualClassIiEEEvT_S4_.part.0/1(*2)" after disassembly {
  All names   : _ZN9benchmark9quicksortIP16TypeVirtualClassIiEEEvT_S4_.part.0/1
                _ZN9benchmark9quicksortIP16TypeVirtualClassIiEEEvT_S4_.part.0/stepanov_inherit.cpp/1
  Number      : 81
  State       : disassembled
  Address     : 0x4540
  Size        : 0xdc
  MaxSize     : 0xe0
  Offset      : 0x4540
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIP16TypeVirtualClassIiEEEvT_S4_.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB080:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	leaq	_ZN16TypeVirtualClassIiEcviEv(%rip), %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rsi, 0x8(%rsp)
.Ltmp240:
    0000001d: 	movq	0x8(%rsp), %r13
    00000022: 	movl	0x8(%r12), %ebp
    00000027: 	movq	%r12, %rbx
    0000002a: 	movq	-0x10(%r13), %rax
    0000002e: 	leaq	-0x10(%r13), %r15
    00000032: 	movq	(%rax), %rax
    00000035: 	cmpq	%r14, %rax
    00000038: 	jne	.Ltmp229 # Offset: 56
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp236:
    00000040: 	movl	0x8(%r15), %eax
.Ltmp237:
    00000044: 	cmpl	%eax, %ebp
    00000046: 	jl	.Ltmp230 # Offset: 70
    00000048: 	cmpq	%rbx, %r15
    0000004b: 	ja	.Ltmp231 # Offset: 75
    0000004d: 	jmp	.Ltmp232 # Offset: 77
    0000004f: 	nop # Size: 1
.Ltmp234:
    00000050: 	cmpl	0x8(%rbx), %ebp
    00000053: 	jle	.Ltmp233 # Offset: 83
.Ltmp235:
    00000055: 	addq	$0x10, %rbx
.Ltmp231:
    00000059: 	movq	(%rbx), %rax
    0000005c: 	movq	(%rax), %rax
    0000005f: 	cmpq	%r14, %rax
    00000062: 	je	.Ltmp234 # Offset: 98
    00000064: 	movq	%rbx, %rdi
    00000067: 	callq	*%rax # Offset: 103
    00000069: 	cmpl	%eax, %ebp
    0000006b: 	jg	.Ltmp235 # Offset: 107
.Ltmp233:
    0000006d: 	cmpq	%rbx, %r15
    00000070: 	jbe	.Ltmp232 # Offset: 112
    00000072: 	movl	0x8(%r15), %eax
    00000076: 	movl	0x8(%rbx), %edx
    00000079: 	movl	%edx, 0x8(%r15)
    0000007d: 	movl	%eax, 0x8(%rbx)
.Ltmp230:
    00000080: 	movq	%r15, %r13
    00000083: 	movq	-0x10(%r13), %rax
    00000087: 	leaq	-0x10(%r13), %r15
    0000008b: 	movq	(%rax), %rax
    0000008e: 	cmpq	%r14, %rax
    00000091: 	je	.Ltmp236 # Offset: 145
.Ltmp229:
    00000093: 	movq	%r15, %rdi
    00000096: 	callq	*%rax # Offset: 150
    00000098: 	jmp	.Ltmp237 # Offset: 152
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp232:
    000000a0: 	movq	%r13, %rax
    000000a3: 	subq	%r12, %rax
    000000a6: 	cmpq	$0x10, %rax
    000000aa: 	jle	.Ltmp238 # Offset: 170
    000000ac: 	movq	%r13, %rsi
    000000af: 	movq	%r12, %rdi
    000000b2: 	callq	"_ZN9benchmark9quicksortIP16TypeVirtualClassIiEEEvT_S4_.part.0/1" # Offset: 178
.Ltmp238:
    000000b7: 	movq	0x8(%rsp), %rax
    000000bc: 	subq	%r13, %rax
    000000bf: 	cmpq	$0x10, %rax
    000000c3: 	jg	.Ltmp239 # Offset: 195
    000000c5: 	addq	$0x18, %rsp
    000000c9: 	popq	%rbx
    000000ca: 	popq	%rbp
    000000cb: 	popq	%r12
    000000cd: 	popq	%r13
    000000cf: 	popq	%r14
    000000d1: 	popq	%r15
    000000d3: 	retq # Offset: 211
.Ltmp239:
    000000d4: 	movq	%r13, %r12
    000000d7: 	jmp	.Ltmp240 # Offset: 215
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIP16TypeVirtualClassIiEEEvT_S4_.part.0/1(*2)"

Binary Function "_ZN9benchmark9quicksortIP14WorkerSubClassIdEEEvT_S4_.part.0/1(*2)" after disassembly {
  All names   : _ZN9benchmark9quicksortIP14WorkerSubClassIdEEEvT_S4_.part.0/1
                _ZN9benchmark9quicksortIP14WorkerSubClassIdEEEvT_S4_.part.0/stepanov_inherit.cpp/1
  Number      : 82
  State       : disassembled
  Address     : 0x4620
  Size        : 0x10a
  MaxSize     : 0x110
  Offset      : 0x4620
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIP14WorkerSubClassIdEEEvT_S4_.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB081:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	movq	%rsi, %r13
    00000009: 	pushq	%r12
    0000000b: 	movq	%rdi, %r12
    0000000e: 	pushq	%rbp
    0000000f: 	leaq	_ZN14WorkerSubClassIdEcvdEv(%rip), %rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x18, %rsp
.Ltmp252:
    0000001b: 	movq	%r13, %r15
    0000001e: 	movsd	0x8(%r12), %xmm1
    00000025: 	movq	%r12, %rbx
    00000028: 	movq	-0x10(%r15), %rax
    0000002c: 	leaq	-0x10(%r15), %r14
    00000030: 	movq	(%rax), %rax
    00000033: 	cmpq	%rbp, %rax
    00000036: 	jne	.Ltmp241 # Offset: 54
    00000038: 	nopl	(%rax,%rax) # Size: 8
.Ltmp248:
    00000040: 	movsd	0x8(%r14), %xmm0
.Ltmp249:
    00000046: 	comisd	%xmm1, %xmm0
    0000004a: 	ja	.Ltmp242 # Offset: 74
    0000004c: 	cmpq	%rbx, %r14
    0000004f: 	ja	.Ltmp243 # Offset: 79
    00000051: 	jmp	.Ltmp244 # Offset: 81
    00000053: 	nopl	(%rax,%rax) # Size: 5
.Ltmp246:
    00000058: 	comisd	0x8(%rbx), %xmm1
    0000005d: 	jbe	.Ltmp245 # Offset: 93
.Ltmp247:
    0000005f: 	addq	$0x10, %rbx
.Ltmp243:
    00000063: 	movq	(%rbx), %rax
    00000066: 	movq	(%rax), %rax
    00000069: 	cmpq	%rbp, %rax
    0000006c: 	je	.Ltmp246 # Offset: 108
    0000006e: 	movsd	%xmm1, 0x8(%rsp)
    00000074: 	movq	%rbx, %rdi
    00000077: 	callq	*%rax # Offset: 119
    00000079: 	movsd	0x8(%rsp), %xmm1
    0000007f: 	comisd	%xmm0, %xmm1
    00000083: 	ja	.Ltmp247 # Offset: 131
.Ltmp245:
    00000085: 	cmpq	%rbx, %r14
    00000088: 	jbe	.Ltmp244 # Offset: 136
    0000008a: 	movsd	0x8(%r14), %xmm0
    00000090: 	movsd	0x8(%rbx), %xmm2
    00000095: 	movsd	%xmm2, 0x8(%r14)
    0000009b: 	movsd	%xmm0, 0x8(%rbx)
.Ltmp242:
    000000a0: 	movq	%r14, %r15
    000000a3: 	movq	-0x10(%r15), %rax
    000000a7: 	leaq	-0x10(%r15), %r14
    000000ab: 	movq	(%rax), %rax
    000000ae: 	cmpq	%rbp, %rax
    000000b1: 	je	.Ltmp248 # Offset: 177
.Ltmp241:
    000000b3: 	movsd	%xmm1, 0x8(%rsp)
    000000b9: 	movq	%r14, %rdi
    000000bc: 	callq	*%rax # Offset: 188
    000000be: 	movsd	0x8(%rsp), %xmm1
    000000c4: 	jmp	.Ltmp249 # Offset: 196
    000000c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp244:
    000000d0: 	movq	%r15, %rax
    000000d3: 	subq	%r12, %rax
    000000d6: 	cmpq	$0x10, %rax
    000000da: 	jle	.Ltmp250 # Offset: 218
    000000dc: 	movq	%r15, %rsi
    000000df: 	movq	%r12, %rdi
    000000e2: 	callq	"_ZN9benchmark9quicksortIP14WorkerSubClassIdEEEvT_S4_.part.0/1" # Offset: 226
.Ltmp250:
    000000e7: 	movq	%r13, %rax
    000000ea: 	subq	%r15, %rax
    000000ed: 	cmpq	$0x10, %rax
    000000f1: 	jg	.Ltmp251 # Offset: 241
    000000f3: 	addq	$0x18, %rsp
    000000f7: 	popq	%rbx
    000000f8: 	popq	%rbp
    000000f9: 	popq	%r12
    000000fb: 	popq	%r13
    000000fd: 	popq	%r14
    000000ff: 	popq	%r15
    00000101: 	retq # Offset: 257
.Ltmp251:
    00000102: 	movq	%r15, %r12
    00000105: 	jmp	.Ltmp252 # Offset: 261
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIP14WorkerSubClassIdEEEvT_S4_.part.0/1(*2)"

Binary Function "_ZN9benchmark9quicksortIP15WorkerSubClass2IdEEEvT_S4_.part.0/1(*2)" after disassembly {
  All names   : _ZN9benchmark9quicksortIP15WorkerSubClass2IdEEEvT_S4_.part.0/1
                _ZN9benchmark9quicksortIP15WorkerSubClass2IdEEEvT_S4_.part.0/stepanov_inherit.cpp/1
  Number      : 83
  State       : disassembled
  Address     : 0x4730
  Size        : 0x10a
  MaxSize     : 0x110
  Offset      : 0x4730
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIP15WorkerSubClass2IdEEEvT_S4_.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB082:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	movq	%rsi, %r13
    00000009: 	pushq	%r12
    0000000b: 	movq	%rdi, %r12
    0000000e: 	pushq	%rbp
    0000000f: 	leaq	_ZN15WorkerSubClass2IdEcvdEv(%rip), %rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x18, %rsp
.Ltmp264:
    0000001b: 	movq	%r13, %r15
    0000001e: 	movsd	0x8(%r12), %xmm1
    00000025: 	movq	%r12, %rbx
    00000028: 	movq	-0x10(%r15), %rax
    0000002c: 	leaq	-0x10(%r15), %r14
    00000030: 	movq	(%rax), %rax
    00000033: 	cmpq	%rbp, %rax
    00000036: 	jne	.Ltmp253 # Offset: 54
    00000038: 	nopl	(%rax,%rax) # Size: 8
.Ltmp260:
    00000040: 	movsd	0x8(%r14), %xmm0
.Ltmp261:
    00000046: 	comisd	%xmm1, %xmm0
    0000004a: 	ja	.Ltmp254 # Offset: 74
    0000004c: 	cmpq	%rbx, %r14
    0000004f: 	ja	.Ltmp255 # Offset: 79
    00000051: 	jmp	.Ltmp256 # Offset: 81
    00000053: 	nopl	(%rax,%rax) # Size: 5
.Ltmp258:
    00000058: 	comisd	0x8(%rbx), %xmm1
    0000005d: 	jbe	.Ltmp257 # Offset: 93
.Ltmp259:
    0000005f: 	addq	$0x10, %rbx
.Ltmp255:
    00000063: 	movq	(%rbx), %rax
    00000066: 	movq	(%rax), %rax
    00000069: 	cmpq	%rbp, %rax
    0000006c: 	je	.Ltmp258 # Offset: 108
    0000006e: 	movsd	%xmm1, 0x8(%rsp)
    00000074: 	movq	%rbx, %rdi
    00000077: 	callq	*%rax # Offset: 119
    00000079: 	movsd	0x8(%rsp), %xmm1
    0000007f: 	comisd	%xmm0, %xmm1
    00000083: 	ja	.Ltmp259 # Offset: 131
.Ltmp257:
    00000085: 	cmpq	%rbx, %r14
    00000088: 	jbe	.Ltmp256 # Offset: 136
    0000008a: 	movsd	0x8(%r14), %xmm0
    00000090: 	movsd	0x8(%rbx), %xmm2
    00000095: 	movsd	%xmm2, 0x8(%r14)
    0000009b: 	movsd	%xmm0, 0x8(%rbx)
.Ltmp254:
    000000a0: 	movq	%r14, %r15
    000000a3: 	movq	-0x10(%r15), %rax
    000000a7: 	leaq	-0x10(%r15), %r14
    000000ab: 	movq	(%rax), %rax
    000000ae: 	cmpq	%rbp, %rax
    000000b1: 	je	.Ltmp260 # Offset: 177
.Ltmp253:
    000000b3: 	movsd	%xmm1, 0x8(%rsp)
    000000b9: 	movq	%r14, %rdi
    000000bc: 	callq	*%rax # Offset: 188
    000000be: 	movsd	0x8(%rsp), %xmm1
    000000c4: 	jmp	.Ltmp261 # Offset: 196
    000000c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp256:
    000000d0: 	movq	%r15, %rax
    000000d3: 	subq	%r12, %rax
    000000d6: 	cmpq	$0x10, %rax
    000000da: 	jle	.Ltmp262 # Offset: 218
    000000dc: 	movq	%r15, %rsi
    000000df: 	movq	%r12, %rdi
    000000e2: 	callq	"_ZN9benchmark9quicksortIP15WorkerSubClass2IdEEEvT_S4_.part.0/1" # Offset: 226
.Ltmp262:
    000000e7: 	movq	%r13, %rax
    000000ea: 	subq	%r15, %rax
    000000ed: 	cmpq	$0x10, %rax
    000000f1: 	jg	.Ltmp263 # Offset: 241
    000000f3: 	addq	$0x18, %rsp
    000000f7: 	popq	%rbx
    000000f8: 	popq	%rbp
    000000f9: 	popq	%r12
    000000fb: 	popq	%r13
    000000fd: 	popq	%r14
    000000ff: 	popq	%r15
    00000101: 	retq # Offset: 257
.Ltmp263:
    00000102: 	movq	%r15, %r12
    00000105: 	jmp	.Ltmp264 # Offset: 261
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIP15WorkerSubClass2IdEEEvT_S4_.part.0/1(*2)"

Binary Function "_ZN9benchmark9quicksortIP14WorkerSubClassIiEEEvT_S4_.part.0/1(*2)" after disassembly {
  All names   : _ZN9benchmark9quicksortIP14WorkerSubClassIiEEEvT_S4_.part.0/1
                _ZN9benchmark9quicksortIP14WorkerSubClassIiEEEvT_S4_.part.0/stepanov_inherit.cpp/1
  Number      : 84
  State       : disassembled
  Address     : 0x4840
  Size        : 0xdc
  MaxSize     : 0xe0
  Offset      : 0x4840
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIP14WorkerSubClassIiEEEvT_S4_.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB083:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	leaq	_ZN14WorkerSubClassIiEcviEv(%rip), %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rsi, 0x8(%rsp)
.Ltmp276:
    0000001d: 	movq	0x8(%rsp), %r13
    00000022: 	movl	0x8(%r12), %ebp
    00000027: 	movq	%r12, %rbx
    0000002a: 	movq	-0x10(%r13), %rax
    0000002e: 	leaq	-0x10(%r13), %r15
    00000032: 	movq	(%rax), %rax
    00000035: 	cmpq	%r14, %rax
    00000038: 	jne	.Ltmp265 # Offset: 56
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp272:
    00000040: 	movl	0x8(%r15), %eax
.Ltmp273:
    00000044: 	cmpl	%eax, %ebp
    00000046: 	jl	.Ltmp266 # Offset: 70
    00000048: 	cmpq	%rbx, %r15
    0000004b: 	ja	.Ltmp267 # Offset: 75
    0000004d: 	jmp	.Ltmp268 # Offset: 77
    0000004f: 	nop # Size: 1
.Ltmp270:
    00000050: 	cmpl	0x8(%rbx), %ebp
    00000053: 	jle	.Ltmp269 # Offset: 83
.Ltmp271:
    00000055: 	addq	$0x10, %rbx
.Ltmp267:
    00000059: 	movq	(%rbx), %rax
    0000005c: 	movq	(%rax), %rax
    0000005f: 	cmpq	%r14, %rax
    00000062: 	je	.Ltmp270 # Offset: 98
    00000064: 	movq	%rbx, %rdi
    00000067: 	callq	*%rax # Offset: 103
    00000069: 	cmpl	%eax, %ebp
    0000006b: 	jg	.Ltmp271 # Offset: 107
.Ltmp269:
    0000006d: 	cmpq	%rbx, %r15
    00000070: 	jbe	.Ltmp268 # Offset: 112
    00000072: 	movl	0x8(%r15), %eax
    00000076: 	movl	0x8(%rbx), %edx
    00000079: 	movl	%edx, 0x8(%r15)
    0000007d: 	movl	%eax, 0x8(%rbx)
.Ltmp266:
    00000080: 	movq	%r15, %r13
    00000083: 	movq	-0x10(%r13), %rax
    00000087: 	leaq	-0x10(%r13), %r15
    0000008b: 	movq	(%rax), %rax
    0000008e: 	cmpq	%r14, %rax
    00000091: 	je	.Ltmp272 # Offset: 145
.Ltmp265:
    00000093: 	movq	%r15, %rdi
    00000096: 	callq	*%rax # Offset: 150
    00000098: 	jmp	.Ltmp273 # Offset: 152
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp268:
    000000a0: 	movq	%r13, %rax
    000000a3: 	subq	%r12, %rax
    000000a6: 	cmpq	$0x10, %rax
    000000aa: 	jle	.Ltmp274 # Offset: 170
    000000ac: 	movq	%r13, %rsi
    000000af: 	movq	%r12, %rdi
    000000b2: 	callq	"_ZN9benchmark9quicksortIP14WorkerSubClassIiEEEvT_S4_.part.0/1" # Offset: 178
.Ltmp274:
    000000b7: 	movq	0x8(%rsp), %rax
    000000bc: 	subq	%r13, %rax
    000000bf: 	cmpq	$0x10, %rax
    000000c3: 	jg	.Ltmp275 # Offset: 195
    000000c5: 	addq	$0x18, %rsp
    000000c9: 	popq	%rbx
    000000ca: 	popq	%rbp
    000000cb: 	popq	%r12
    000000cd: 	popq	%r13
    000000cf: 	popq	%r14
    000000d1: 	popq	%r15
    000000d3: 	retq # Offset: 211
.Ltmp275:
    000000d4: 	movq	%r13, %r12
    000000d7: 	jmp	.Ltmp276 # Offset: 215
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIP14WorkerSubClassIiEEEvT_S4_.part.0/1(*2)"

Binary Function "_ZN9benchmark9quicksortIP19TypeVirtualSubClassIiEEEvT_S4_.part.0/1(*2)" after disassembly {
  All names   : _ZN9benchmark9quicksortIP19TypeVirtualSubClassIiEEEvT_S4_.part.0/1
                _ZN9benchmark9quicksortIP19TypeVirtualSubClassIiEEEvT_S4_.part.0/stepanov_inherit.cpp/1
  Number      : 85
  State       : disassembled
  Address     : 0x4920
  Size        : 0xdc
  MaxSize     : 0xe0
  Offset      : 0x4920
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIP19TypeVirtualSubClassIiEEEvT_S4_.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB084:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	leaq	_ZN19TypeVirtualSubClassIiEcviEv(%rip), %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x18, %rsp
    00000018: 	movq	%rsi, 0x8(%rsp)
.Ltmp288:
    0000001d: 	movq	0x8(%rsp), %r13
    00000022: 	movl	0x8(%r12), %ebp
    00000027: 	movq	%r12, %rbx
    0000002a: 	movq	-0x10(%r13), %rax
    0000002e: 	leaq	-0x10(%r13), %r15
    00000032: 	movq	(%rax), %rax
    00000035: 	cmpq	%r14, %rax
    00000038: 	jne	.Ltmp277 # Offset: 56
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp284:
    00000040: 	movl	0x8(%r15), %eax
.Ltmp285:
    00000044: 	cmpl	%eax, %ebp
    00000046: 	jl	.Ltmp278 # Offset: 70
    00000048: 	cmpq	%rbx, %r15
    0000004b: 	ja	.Ltmp279 # Offset: 75
    0000004d: 	jmp	.Ltmp280 # Offset: 77
    0000004f: 	nop # Size: 1
.Ltmp282:
    00000050: 	cmpl	0x8(%rbx), %ebp
    00000053: 	jle	.Ltmp281 # Offset: 83
.Ltmp283:
    00000055: 	addq	$0x10, %rbx
.Ltmp279:
    00000059: 	movq	(%rbx), %rax
    0000005c: 	movq	(%rax), %rax
    0000005f: 	cmpq	%r14, %rax
    00000062: 	je	.Ltmp282 # Offset: 98
    00000064: 	movq	%rbx, %rdi
    00000067: 	callq	*%rax # Offset: 103
    00000069: 	cmpl	%eax, %ebp
    0000006b: 	jg	.Ltmp283 # Offset: 107
.Ltmp281:
    0000006d: 	cmpq	%rbx, %r15
    00000070: 	jbe	.Ltmp280 # Offset: 112
    00000072: 	movl	0x8(%r15), %eax
    00000076: 	movl	0x8(%rbx), %edx
    00000079: 	movl	%edx, 0x8(%r15)
    0000007d: 	movl	%eax, 0x8(%rbx)
.Ltmp278:
    00000080: 	movq	%r15, %r13
    00000083: 	movq	-0x10(%r13), %rax
    00000087: 	leaq	-0x10(%r13), %r15
    0000008b: 	movq	(%rax), %rax
    0000008e: 	cmpq	%r14, %rax
    00000091: 	je	.Ltmp284 # Offset: 145
.Ltmp277:
    00000093: 	movq	%r15, %rdi
    00000096: 	callq	*%rax # Offset: 150
    00000098: 	jmp	.Ltmp285 # Offset: 152
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp280:
    000000a0: 	movq	%r13, %rax
    000000a3: 	subq	%r12, %rax
    000000a6: 	cmpq	$0x10, %rax
    000000aa: 	jle	.Ltmp286 # Offset: 170
    000000ac: 	movq	%r13, %rsi
    000000af: 	movq	%r12, %rdi
    000000b2: 	callq	"_ZN9benchmark9quicksortIP19TypeVirtualSubClassIiEEEvT_S4_.part.0/1" # Offset: 178
.Ltmp286:
    000000b7: 	movq	0x8(%rsp), %rax
    000000bc: 	subq	%r13, %rax
    000000bf: 	cmpq	$0x10, %rax
    000000c3: 	jg	.Ltmp287 # Offset: 195
    000000c5: 	addq	$0x18, %rsp
    000000c9: 	popq	%rbx
    000000ca: 	popq	%rbp
    000000cb: 	popq	%r12
    000000cd: 	popq	%r13
    000000cf: 	popq	%r14
    000000d1: 	popq	%r15
    000000d3: 	retq # Offset: 211
.Ltmp287:
    000000d4: 	movq	%r13, %r12
    000000d7: 	jmp	.Ltmp288 # Offset: 215
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIP19TypeVirtualSubClassIiEEEvT_S4_.part.0/1(*2)"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev(*2)" after disassembly {
  All names   : _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
                _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev
  Number      : 86
  State       : disassembled
  Address     : 0x4a00
  Size        : 0x1f7
  MaxSize     : 0x200
  Offset      : 0x4a00
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB085:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x28, %rsp
    00000015: 	movq	0x20(%rdi), %rcx
    00000019: 	movq	0x30(%rdi), %rax
    0000001d: 	movq	0x38(%rdi), %r13
    00000021: 	movq	0x10(%rdi), %rbp
    00000025: 	movq	%rcx, 0x10(%rsp)
    0000002a: 	movq	0x28(%rdi), %rcx
    0000002e: 	movq	%rax, 0x8(%rsp)
    00000033: 	movq	0x48(%rdi), %rax
    00000037: 	leaq	0x8(%rcx), %r12
    0000003b: 	movq	%rcx, 0x18(%rsp)
    00000040: 	movq	%rax, (%rsp)
    00000044: 	cmpq	%r12, %rax
    00000047: 	jbe	.Ltmp289 # Offset: 71
    00000049: 	nopl	(%rax) # Size: 7
.Ltmp292:
    00000050: 	movq	(%r12), %r15
    00000054: 	leaq	0x200(%r15), %rbx
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp291:
    00000060: 	movq	(%r15), %rdi
    00000063: 	leaq	0x10(%r15), %rdx
    00000067: 	cmpq	%rdx, %rdi
    0000006a: 	je	.Ltmp290 # Offset: 106
    00000070: 	movq	0x10(%r15), %rax
    00000074: 	addq	$0x20, %r15
    00000078: 	leaq	0x1(%rax), %rsi
    0000007c: 	callq	_ZdlPvm@PLT # Offset: 124
    00000081: 	cmpq	%r15, %rbx
    00000084: 	jne	.Ltmp291 # Offset: 132
    00000086: 	addq	$0x8, %r12
    0000008a: 	cmpq	%r12, (%rsp)
    0000008e: 	ja	.Ltmp292 # Offset: 142
.Ltmp289:
    00000090: 	movq	(%rsp), %rcx
    00000094: 	cmpq	%rcx, 0x18(%rsp)
    00000099: 	je	.Ltmp293 # Offset: 153
    0000009f: 	cmpq	0x10(%rsp), %rbp
    000000a4: 	je	.Ltmp294 # Offset: 164
.Ltmp297:
    000000a6: 	movq	(%rbp), %rdi
    000000aa: 	leaq	0x10(%rbp), %rax
    000000ae: 	cmpq	%rax, %rdi
    000000b1: 	je	.Ltmp295 # Offset: 177
.Ltmp296:
    000000b3: 	movq	0x10(%rbp), %rax
    000000b7: 	addq	$0x20, %rbp
    000000bb: 	leaq	0x1(%rax), %rsi
    000000bf: 	callq	_ZdlPvm@PLT # Offset: 191
    000000c4: 	cmpq	%rbp, 0x10(%rsp)
    000000c9: 	je	.Ltmp294 # Offset: 201
    000000cb: 	movq	(%rbp), %rdi
    000000cf: 	leaq	0x10(%rbp), %rax
    000000d3: 	cmpq	%rax, %rdi
    000000d6: 	jne	.Ltmp296 # Offset: 214
.Ltmp295:
    000000d8: 	addq	$0x20, %rbp
    000000dc: 	cmpq	%rbp, 0x10(%rsp)
    000000e1: 	jne	.Ltmp297 # Offset: 225
    000000e3: 	cmpq	%r13, 0x8(%rsp)
    000000e8: 	je	.Ltmp298 # Offset: 232
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp300:
    000000f0: 	movq	(%r13), %rdi
    000000f4: 	leaq	0x10(%r13), %rax
    000000f8: 	cmpq	%rax, %rdi
    000000fb: 	je	.Ltmp299 # Offset: 251
    000000fd: 	movq	0x10(%r13), %rax
    00000101: 	leaq	0x1(%rax), %rsi
    00000105: 	callq	_ZdlPvm@PLT # Offset: 261
.Ltmp299:
    0000010a: 	addq	$0x20, %r13
.Ltmp294:
    0000010e: 	cmpq	%r13, 0x8(%rsp)
    00000113: 	jne	.Ltmp300 # Offset: 275
.Ltmp298:
    00000115: 	movq	(%r14), %rdi
    00000118: 	testq	%rdi, %rdi
    0000011b: 	je	.Ltmp301 # Offset: 283
.Ltmp307:
    00000121: 	movq	0x48(%r14), %rax
    00000125: 	movq	0x28(%r14), %rbx
    00000129: 	leaq	0x8(%rax), %rbp
    0000012d: 	cmpq	%rbx, %rbp
    00000130: 	jbe	.Ltmp302 # Offset: 304
    00000132: 	nopw	(%rax,%rax) # Size: 6
.Ltmp303:
    00000138: 	movq	(%rbx), %rdi
    0000013b: 	movl	$0x200, %esi
    00000140: 	addq	$0x8, %rbx
    00000144: 	callq	_ZdlPvm@PLT # Offset: 324
    00000149: 	cmpq	%rbx, %rbp
    0000014c: 	ja	.Ltmp303 # Offset: 332
    0000014e: 	movq	(%r14), %rdi
.Ltmp302:
    00000151: 	movq	0x8(%r14), %rsi
    00000155: 	addq	$0x28, %rsp
    00000159: 	popq	%rbx
    0000015a: 	popq	%rbp
    0000015b: 	shlq	$0x3, %rsi
    0000015f: 	popq	%r12
    00000161: 	popq	%r13
    00000163: 	popq	%r14
    00000165: 	popq	%r15
    00000167: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 359
    0000016c: 	nopl	(%rax) # Size: 4
.Ltmp290:
    00000170: 	addq	$0x20, %r15
    00000174: 	cmpq	%r15, %rbx
    00000177: 	jne	.Ltmp291 # Offset: 375
    0000017d: 	addq	$0x8, %r12
    00000181: 	cmpq	%r12, (%rsp)
    00000185: 	ja	.Ltmp292 # Offset: 389
    0000018b: 	jmp	.Ltmp289 # Offset: 395
.Ltmp293:
    00000190: 	cmpq	0x8(%rsp), %rbp
    00000195: 	je	.Ltmp298 # Offset: 405
.Ltmp306:
    0000019b: 	movq	(%rbp), %rdi
    0000019f: 	leaq	0x10(%rbp), %rax
    000001a3: 	cmpq	%rax, %rdi
    000001a6: 	je	.Ltmp304 # Offset: 422
.Ltmp305:
    000001a8: 	movq	0x10(%rbp), %rax
    000001ac: 	addq	$0x20, %rbp
    000001b0: 	leaq	0x1(%rax), %rsi
    000001b4: 	callq	_ZdlPvm@PLT # Offset: 436
    000001b9: 	cmpq	%rbp, 0x8(%rsp)
    000001be: 	je	.Ltmp298 # Offset: 446
    000001c4: 	movq	(%rbp), %rdi
    000001c8: 	leaq	0x10(%rbp), %rax
    000001cc: 	cmpq	%rax, %rdi
    000001cf: 	jne	.Ltmp305 # Offset: 463
.Ltmp304:
    000001d1: 	addq	$0x20, %rbp
    000001d5: 	cmpq	%rbp, 0x8(%rsp)
    000001da: 	jne	.Ltmp306 # Offset: 474
    000001dc: 	movq	(%r14), %rdi
    000001df: 	testq	%rdi, %rdi
    000001e2: 	jne	.Ltmp307 # Offset: 482
.Ltmp301:
    000001e8: 	addq	$0x28, %rsp
    000001ec: 	popq	%rbx
    000001ed: 	popq	%rbp
    000001ee: 	popq	%r12
    000001f0: 	popq	%r13
    000001f2: 	popq	%r14
    000001f4: 	popq	%r15
    000001f6: 	retq # Offset: 502
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev(*2)"

Binary Function "_ZN9benchmark9quicksortIP9TypeClassImEEEvT_S4_.part.0/1(*2)" after disassembly {
  All names   : _ZN9benchmark9quicksortIP9TypeClassImEEEvT_S4_.part.0/1
                _ZN9benchmark9quicksortIP9TypeClassImEEEvT_S4_.part.0/stepanov_inherit.cpp/1
  Number      : 87
  State       : disassembled
  Address     : 0x4c00
  Size        : 0x6d9
  MaxSize     : 0x6e0
  Offset      : 0x4c00
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIP9TypeClassImEEEvT_S4_.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB086:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	movq	%rdi, %r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rsi, %rbx
    00000010: 	subq	$0x8, %rsp
.Ltmp401:
    00000014: 	movq	(%r12), %rdx
    00000018: 	movq	%rbx, %rbp
    0000001b: 	movq	%r12, %rax
    0000001e: 	nop # Size: 2
.Ltmp312:
    00000020: 	movq	-0x8(%rbp), %rcx
    00000024: 	leaq	-0x8(%rbp), %rsi
    00000028: 	cmpq	%rcx, %rdx
    0000002b: 	jb	.Ltmp308 # Offset: 43
    0000002d: 	cmpq	%rax, %rsi
    00000030: 	jbe	.Ltmp309 # Offset: 48
    00000032: 	cmpq	(%rax), %rdx
    00000035: 	jbe	.Ltmp310 # Offset: 53
    00000037: 	nopw	(%rax,%rax) # Size: 9
.Ltmp311:
    00000040: 	addq	$0x8, %rax
    00000044: 	cmpq	(%rax), %rdx
    00000047: 	ja	.Ltmp311 # Offset: 71
    00000049: 	cmpq	%rax, %rsi
    0000004c: 	jbe	.Ltmp309 # Offset: 76
.Ltmp310:
    0000004e: 	movq	(%rax), %rdi
    00000051: 	movq	%rdi, (%rsi)
    00000054: 	movq	%rcx, (%rax)
.Ltmp308:
    00000057: 	movq	%rsi, %rbp
    0000005a: 	jmp	.Ltmp312 # Offset: 90
    0000005c: 	nopl	(%rax) # Size: 4
.Ltmp309:
    00000060: 	movq	%rbp, %rax
    00000063: 	subq	%r12, %rax
    00000066: 	cmpq	$0x8, %rax
    0000006a: 	jle	.Ltmp313 # Offset: 106
    0000006c: 	movq	(%r12), %rdx
    00000070: 	movq	%rbp, %r13
    00000073: 	movq	%r12, %rax
    00000076: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp318:
    00000080: 	leaq	-0x8(%r13), %rsi
    00000084: 	cmpq	%rcx, %rdx
    00000087: 	jb	.Ltmp314 # Offset: 135
    00000089: 	cmpq	%rax, %rsi
    0000008c: 	jbe	.Ltmp315 # Offset: 140
    0000008e: 	cmpq	(%rax), %rdx
    00000091: 	jbe	.Ltmp316 # Offset: 145
    00000093: 	nopl	(%rax,%rax) # Size: 5
.Ltmp317:
    00000098: 	addq	$0x8, %rax
    0000009c: 	cmpq	(%rax), %rdx
    0000009f: 	ja	.Ltmp317 # Offset: 159
    000000a1: 	cmpq	%rax, %rsi
    000000a4: 	jbe	.Ltmp315 # Offset: 164
.Ltmp316:
    000000a6: 	movq	(%rax), %rdi
    000000a9: 	movq	%rdi, (%rsi)
    000000ac: 	movq	%rcx, (%rax)
.Ltmp314:
    000000af: 	movq	-0x8(%rsi), %rcx
    000000b3: 	movq	%rsi, %r13
    000000b6: 	jmp	.Ltmp318 # Offset: 182
.Ltmp315:
    000000b8: 	movq	%r13, %rax
    000000bb: 	subq	%r12, %rax
    000000be: 	cmpq	$0x8, %rax
    000000c2: 	jg	.Ltmp319 # Offset: 194
.Ltmp381:
    000000c8: 	movq	%rbp, %rax
    000000cb: 	subq	%r13, %rax
    000000ce: 	cmpq	$0x8, %rax
    000000d2: 	jg	.Ltmp320 # Offset: 210
.Ltmp313:
    000000d8: 	movq	%rbx, %rax
    000000db: 	subq	%rbp, %rax
    000000de: 	cmpq	$0x8, %rax
    000000e2: 	jle	.Ltmp321 # Offset: 226
    000000e4: 	movq	(%rbp), %rdx
    000000e8: 	movq	%rbx, %r12
    000000eb: 	movq	%rbp, %rax
    000000ee: 	nop # Size: 2
.Ltmp326:
    000000f0: 	movq	-0x8(%r12), %rcx
    000000f5: 	leaq	-0x8(%r12), %rsi
    000000fa: 	cmpq	%rcx, %rdx
    000000fd: 	jb	.Ltmp322 # Offset: 253
    000000ff: 	cmpq	%rax, %rsi
    00000102: 	jbe	.Ltmp323 # Offset: 258
    00000104: 	cmpq	(%rax), %rdx
    00000107: 	jbe	.Ltmp324 # Offset: 263
    00000109: 	nopl	(%rax) # Size: 7
.Ltmp325:
    00000110: 	addq	$0x8, %rax
    00000114: 	cmpq	(%rax), %rdx
    00000117: 	ja	.Ltmp325 # Offset: 279
    00000119: 	cmpq	%rax, %rsi
    0000011c: 	jbe	.Ltmp323 # Offset: 284
.Ltmp324:
    0000011e: 	movq	(%rax), %rdi
    00000121: 	movq	%rdi, (%rsi)
    00000124: 	movq	%rcx, (%rax)
.Ltmp322:
    00000127: 	movq	%rsi, %r12
    0000012a: 	jmp	.Ltmp326 # Offset: 298
.Ltmp323:
    0000012c: 	movq	%r12, %rax
    0000012f: 	subq	%rbp, %rax
    00000132: 	cmpq	$0x8, %rax
    00000136: 	jg	.Ltmp327 # Offset: 310
.Ltmp356:
    0000013c: 	movq	%rbx, %rax
    0000013f: 	subq	%r12, %rax
    00000142: 	cmpq	$0x8, %rax
    00000146: 	jg	.Ltmp328 # Offset: 326
.Ltmp321:
    0000014c: 	addq	$0x8, %rsp
    00000150: 	popq	%rbx
    00000151: 	popq	%rbp
    00000152: 	popq	%r12
    00000154: 	popq	%r13
    00000156: 	popq	%r14
    00000158: 	popq	%r15
    0000015a: 	retq # Offset: 346
.Ltmp320:
    0000015b: 	movq	(%r13), %rdx
    0000015f: 	movq	%rbp, %r12
    00000162: 	movq	%r13, %rax
    00000165: 	nopl	(%rax) # Size: 3
.Ltmp333:
    00000168: 	movq	-0x8(%r12), %rsi
    0000016d: 	leaq	-0x8(%r12), %rcx
    00000172: 	cmpq	%rsi, %rdx
    00000175: 	jb	.Ltmp329 # Offset: 373
    00000177: 	cmpq	%rax, %rcx
    0000017a: 	jbe	.Ltmp330 # Offset: 378
    00000180: 	cmpq	(%rax), %rdx
    00000183: 	jbe	.Ltmp331 # Offset: 387
    00000185: 	nopl	(%rax) # Size: 3
.Ltmp332:
    00000188: 	addq	$0x8, %rax
    0000018c: 	cmpq	(%rax), %rdx
    0000018f: 	ja	.Ltmp332 # Offset: 399
    00000191: 	cmpq	%rax, %rcx
    00000194: 	jbe	.Ltmp330 # Offset: 404
.Ltmp331:
    0000019a: 	movq	(%rax), %rdi
    0000019d: 	movq	%rdi, (%rcx)
    000001a0: 	movq	%rsi, (%rax)
.Ltmp329:
    000001a3: 	movq	%rcx, %r12
    000001a6: 	jmp	.Ltmp333 # Offset: 422
.Ltmp319:
    000001a8: 	movq	(%r12), %rdx
    000001ac: 	movq	%r13, %r14
    000001af: 	movq	%r12, %rax
    000001b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp338:
    000001b8: 	leaq	-0x8(%r14), %rsi
    000001bc: 	cmpq	%rcx, %rdx
    000001bf: 	jb	.Ltmp334 # Offset: 447
    000001c1: 	cmpq	%rax, %rsi
    000001c4: 	jbe	.Ltmp335 # Offset: 452
    000001ca: 	cmpq	%rdx, (%rax)
    000001cd: 	jae	.Ltmp336 # Offset: 461
    000001cf: 	nop # Size: 1
.Ltmp337:
    000001d0: 	addq	$0x8, %rax
    000001d4: 	cmpq	(%rax), %rdx
    000001d7: 	ja	.Ltmp337 # Offset: 471
    000001d9: 	cmpq	%rax, %rsi
    000001dc: 	jbe	.Ltmp335 # Offset: 476
.Ltmp336:
    000001e2: 	movq	(%rax), %rdi
    000001e5: 	movq	%rdi, (%rsi)
    000001e8: 	movq	%rcx, (%rax)
.Ltmp334:
    000001eb: 	movq	-0x8(%rsi), %rcx
    000001ef: 	movq	%rsi, %r14
    000001f2: 	jmp	.Ltmp338 # Offset: 498
.Ltmp328:
    000001f4: 	movq	(%r12), %rdx
    000001f8: 	movq	%rbx, %rbp
    000001fb: 	movq	%r12, %rax
    000001fe: 	nop # Size: 2
.Ltmp343:
    00000200: 	movq	-0x8(%rbp), %rsi
    00000204: 	leaq	-0x8(%rbp), %rcx
    00000208: 	cmpq	%rsi, %rdx
    0000020b: 	jb	.Ltmp339 # Offset: 523
    0000020d: 	cmpq	%rax, %rcx
    00000210: 	jbe	.Ltmp340 # Offset: 528
    00000216: 	cmpq	%rdx, (%rax)
    00000219: 	jae	.Ltmp341 # Offset: 537
    0000021b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp342:
    00000220: 	addq	$0x8, %rax
    00000224: 	cmpq	(%rax), %rdx
    00000227: 	ja	.Ltmp342 # Offset: 551
    00000229: 	cmpq	%rax, %rcx
    0000022c: 	jbe	.Ltmp340 # Offset: 556
.Ltmp341:
    00000232: 	movq	(%rax), %rdi
    00000235: 	movq	%rdi, (%rcx)
    00000238: 	movq	%rsi, (%rax)
.Ltmp339:
    0000023b: 	movq	%rcx, %rbp
    0000023e: 	jmp	.Ltmp343 # Offset: 574
.Ltmp327:
    00000240: 	movq	(%rbp), %rdx
    00000244: 	movq	%r12, %r13
    00000247: 	movq	%rbp, %rax
    0000024a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp348:
    00000250: 	leaq	-0x8(%r13), %rsi
    00000254: 	cmpq	%rcx, %rdx
    00000257: 	jb	.Ltmp344 # Offset: 599
    00000259: 	cmpq	%rax, %rsi
    0000025c: 	jbe	.Ltmp345 # Offset: 604
    0000025e: 	cmpq	(%rax), %rdx
    00000261: 	jbe	.Ltmp346 # Offset: 609
    00000263: 	nopl	(%rax,%rax) # Size: 5
.Ltmp347:
    00000268: 	addq	$0x8, %rax
    0000026c: 	cmpq	(%rax), %rdx
    0000026f: 	ja	.Ltmp347 # Offset: 623
    00000271: 	cmpq	%rax, %rsi
    00000274: 	jbe	.Ltmp345 # Offset: 628
.Ltmp346:
    00000276: 	movq	(%rax), %rdi
    00000279: 	movq	%rdi, (%rsi)
    0000027c: 	movq	%rcx, (%rax)
.Ltmp344:
    0000027f: 	movq	-0x8(%rsi), %rcx
    00000283: 	movq	%rsi, %r13
    00000286: 	jmp	.Ltmp348 # Offset: 646
.Ltmp345:
    00000288: 	movq	%r13, %rax
    0000028b: 	subq	%rbp, %rax
    0000028e: 	cmpq	$0x8, %rax
    00000292: 	jle	.Ltmp349 # Offset: 658
    00000294: 	movq	(%rbp), %rdx
    00000298: 	movq	%r13, %r14
    0000029b: 	movq	%rbp, %rax
    0000029e: 	nop # Size: 2
.Ltmp354:
    000002a0: 	movq	-0x8(%r14), %rsi
    000002a4: 	leaq	-0x8(%r14), %rcx
    000002a8: 	cmpq	%rsi, %rdx
    000002ab: 	jb	.Ltmp350 # Offset: 683
    000002ad: 	cmpq	%rax, %rcx
    000002b0: 	jbe	.Ltmp351 # Offset: 688
    000002b2: 	cmpq	(%rax), %rdx
    000002b5: 	jbe	.Ltmp352 # Offset: 693
    000002b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp353:
    000002c0: 	addq	$0x8, %rax
    000002c4: 	cmpq	(%rax), %rdx
    000002c7: 	ja	.Ltmp353 # Offset: 711
    000002c9: 	cmpq	%rax, %rcx
    000002cc: 	jbe	.Ltmp351 # Offset: 716
.Ltmp352:
    000002ce: 	movq	(%rax), %rdi
    000002d1: 	movq	%rdi, (%rcx)
    000002d4: 	movq	%rsi, (%rax)
.Ltmp350:
    000002d7: 	movq	%rcx, %r14
    000002da: 	jmp	.Ltmp354 # Offset: 730
.Ltmp351:
    000002dc: 	movq	%r14, %rax
    000002df: 	subq	%rbp, %rax
    000002e2: 	cmpq	$0x8, %rax
    000002e6: 	jle	.Ltmp355 # Offset: 742
    000002e8: 	movq	%r14, %rsi
    000002eb: 	movq	%rbp, %rdi
    000002ee: 	callq	"_ZN9benchmark9quicksortIP9TypeClassImEEEvT_S4_.part.0/1" # Offset: 750
.Ltmp355:
    000002f3: 	movq	%r13, %rax
    000002f6: 	subq	%r14, %rax
    000002f9: 	cmpq	$0x8, %rax
    000002fd: 	jle	.Ltmp349 # Offset: 765
    000002ff: 	movq	%r13, %rsi
    00000302: 	movq	%r14, %rdi
    00000305: 	callq	"_ZN9benchmark9quicksortIP9TypeClassImEEEvT_S4_.part.0/1" # Offset: 773
.Ltmp349:
    0000030a: 	movq	%r12, %rax
    0000030d: 	subq	%r13, %rax
    00000310: 	cmpq	$0x8, %rax
    00000314: 	jle	.Ltmp356 # Offset: 788
    0000031a: 	movq	(%r13), %rdx
    0000031e: 	movq	%r12, %rbp
    00000321: 	movq	%r13, %rax
    00000324: 	nopl	(%rax) # Size: 4
.Ltmp361:
    00000328: 	movq	-0x8(%rbp), %rsi
    0000032c: 	leaq	-0x8(%rbp), %rcx
    00000330: 	cmpq	%rsi, %rdx
    00000333: 	jb	.Ltmp357 # Offset: 819
    00000335: 	cmpq	%rax, %rcx
    00000338: 	jbe	.Ltmp358 # Offset: 824
    0000033e: 	cmpq	%rdx, (%rax)
    00000341: 	jae	.Ltmp359 # Offset: 833
    00000343: 	nopl	(%rax,%rax) # Size: 5
.Ltmp360:
    00000348: 	addq	$0x8, %rax
    0000034c: 	cmpq	(%rax), %rdx
    0000034f: 	ja	.Ltmp360 # Offset: 847
    00000351: 	cmpq	%rax, %rcx
    00000354: 	jbe	.Ltmp358 # Offset: 852
.Ltmp359:
    0000035a: 	movq	(%rax), %rdi
    0000035d: 	movq	%rdi, (%rcx)
    00000360: 	movq	%rsi, (%rax)
.Ltmp357:
    00000363: 	movq	%rcx, %rbp
    00000366: 	jmp	.Ltmp361 # Offset: 870
.Ltmp340:
    00000368: 	movq	%rbp, %rax
    0000036b: 	subq	%r12, %rax
    0000036e: 	cmpq	$0x8, %rax
    00000372: 	jle	.Ltmp362 # Offset: 882
    00000374: 	movq	(%r12), %rdx
    00000378: 	movq	%rbp, %r13
    0000037b: 	movq	%r12, %rax
    0000037e: 	nop # Size: 2
.Ltmp367:
    00000380: 	movq	-0x8(%r13), %rsi
    00000384: 	leaq	-0x8(%r13), %rcx
    00000388: 	cmpq	%rsi, %rdx
    0000038b: 	jb	.Ltmp363 # Offset: 907
    0000038d: 	cmpq	%rax, %rcx
    00000390: 	jbe	.Ltmp364 # Offset: 912
    00000392: 	cmpq	%rdx, (%rax)
    00000395: 	jae	.Ltmp365 # Offset: 917
    00000397: 	nopw	(%rax,%rax) # Size: 9
.Ltmp366:
    000003a0: 	addq	$0x8, %rax
    000003a4: 	cmpq	(%rax), %rdx
    000003a7: 	ja	.Ltmp366 # Offset: 935
    000003a9: 	cmpq	%rax, %rcx
    000003ac: 	jbe	.Ltmp364 # Offset: 940
.Ltmp365:
    000003ae: 	movq	(%rax), %rdi
    000003b1: 	movq	%rdi, (%rcx)
    000003b4: 	movq	%rsi, (%rax)
.Ltmp363:
    000003b7: 	movq	%rcx, %r13
    000003ba: 	jmp	.Ltmp367 # Offset: 954
.Ltmp364:
    000003bc: 	movq	%r13, %rax
    000003bf: 	subq	%r12, %rax
    000003c2: 	cmpq	$0x8, %rax
    000003c6: 	jle	.Ltmp368 # Offset: 966
    000003c8: 	movq	%r13, %rsi
    000003cb: 	movq	%r12, %rdi
    000003ce: 	callq	"_ZN9benchmark9quicksortIP9TypeClassImEEEvT_S4_.part.0/1" # Offset: 974
.Ltmp368:
    000003d3: 	movq	%rbp, %rax
    000003d6: 	subq	%r13, %rax
    000003d9: 	cmpq	$0x8, %rax
    000003dd: 	jle	.Ltmp362 # Offset: 989
    000003df: 	movq	%rbp, %rsi
    000003e2: 	movq	%r13, %rdi
    000003e5: 	callq	"_ZN9benchmark9quicksortIP9TypeClassImEEEvT_S4_.part.0/1" # Offset: 997
.Ltmp362:
    000003ea: 	movq	%rbx, %rax
    000003ed: 	subq	%rbp, %rax
    000003f0: 	cmpq	$0x8, %rax
    000003f4: 	jle	.Ltmp321 # Offset: 1012
    000003fa: 	movq	(%rbp), %rdx
    000003fe: 	movq	%rbx, %r12
    00000401: 	movq	%rbp, %rax
    00000404: 	nopl	(%rax) # Size: 4
.Ltmp373:
    00000408: 	movq	-0x8(%r12), %rsi
    0000040d: 	leaq	-0x8(%r12), %rcx
    00000412: 	cmpq	%rsi, %rdx
    00000415: 	jb	.Ltmp369 # Offset: 1045
    00000417: 	cmpq	%rax, %rcx
    0000041a: 	jbe	.Ltmp370 # Offset: 1050
    00000420: 	cmpq	(%rax), %rdx
    00000423: 	jbe	.Ltmp371 # Offset: 1059
    00000425: 	nopl	(%rax) # Size: 3
.Ltmp372:
    00000428: 	addq	$0x8, %rax
    0000042c: 	cmpq	(%rax), %rdx
    0000042f: 	ja	.Ltmp372 # Offset: 1071
    00000431: 	cmpq	%rax, %rcx
    00000434: 	jbe	.Ltmp370 # Offset: 1076
.Ltmp371:
    0000043a: 	movq	(%rax), %rdi
    0000043d: 	movq	%rdi, (%rcx)
    00000440: 	movq	%rsi, (%rax)
.Ltmp369:
    00000443: 	movq	%rcx, %r12
    00000446: 	jmp	.Ltmp373 # Offset: 1094
.Ltmp335:
    00000448: 	movq	%r14, %rax
    0000044b: 	subq	%r12, %rax
    0000044e: 	cmpq	$0x8, %rax
    00000452: 	jle	.Ltmp374 # Offset: 1106
    00000454: 	movq	(%r12), %rdx
    00000458: 	movq	%r14, %r15
    0000045b: 	movq	%r12, %rax
    0000045e: 	nop # Size: 2
.Ltmp379:
    00000460: 	movq	-0x8(%r15), %rsi
    00000464: 	leaq	-0x8(%r15), %rcx
    00000468: 	cmpq	%rsi, %rdx
    0000046b: 	jb	.Ltmp375 # Offset: 1131
    0000046d: 	cmpq	%rax, %rcx
    00000470: 	jbe	.Ltmp376 # Offset: 1136
    00000472: 	cmpq	(%rax), %rdx
    00000475: 	jbe	.Ltmp377 # Offset: 1141
    00000477: 	nopw	(%rax,%rax) # Size: 9
.Ltmp378:
    00000480: 	addq	$0x8, %rax
    00000484: 	cmpq	(%rax), %rdx
    00000487: 	ja	.Ltmp378 # Offset: 1159
    00000489: 	cmpq	%rax, %rcx
    0000048c: 	jbe	.Ltmp376 # Offset: 1164
.Ltmp377:
    0000048e: 	movq	(%rax), %rdi
    00000491: 	movq	%rdi, (%rcx)
    00000494: 	movq	%rsi, (%rax)
.Ltmp375:
    00000497: 	movq	%rcx, %r15
    0000049a: 	jmp	.Ltmp379 # Offset: 1178
.Ltmp376:
    0000049c: 	movq	%r15, %rax
    0000049f: 	subq	%r12, %rax
    000004a2: 	cmpq	$0x8, %rax
    000004a6: 	jle	.Ltmp380 # Offset: 1190
    000004a8: 	movq	%r15, %rsi
    000004ab: 	movq	%r12, %rdi
    000004ae: 	callq	"_ZN9benchmark9quicksortIP9TypeClassImEEEvT_S4_.part.0/1" # Offset: 1198
.Ltmp380:
    000004b3: 	movq	%r14, %rax
    000004b6: 	subq	%r15, %rax
    000004b9: 	cmpq	$0x8, %rax
    000004bd: 	jle	.Ltmp374 # Offset: 1213
    000004bf: 	movq	%r14, %rsi
    000004c2: 	movq	%r15, %rdi
    000004c5: 	callq	"_ZN9benchmark9quicksortIP9TypeClassImEEEvT_S4_.part.0/1" # Offset: 1221
.Ltmp374:
    000004ca: 	movq	%r13, %rax
    000004cd: 	subq	%r14, %rax
    000004d0: 	cmpq	$0x8, %rax
    000004d4: 	jle	.Ltmp381 # Offset: 1236
    000004da: 	movq	(%r14), %rdx
    000004dd: 	movq	%r13, %r12
    000004e0: 	movq	%r14, %rax
    000004e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp386:
    000004e8: 	movq	-0x8(%r12), %rsi
    000004ed: 	leaq	-0x8(%r12), %rcx
    000004f2: 	cmpq	%rsi, %rdx
    000004f5: 	jb	.Ltmp382 # Offset: 1269
    000004f7: 	cmpq	%rax, %rcx
    000004fa: 	jbe	.Ltmp383 # Offset: 1274
    00000500: 	cmpq	(%rax), %rdx
    00000503: 	jbe	.Ltmp384 # Offset: 1283
    00000505: 	nopl	(%rax) # Size: 3
.Ltmp385:
    00000508: 	addq	$0x8, %rax
    0000050c: 	cmpq	(%rax), %rdx
    0000050f: 	ja	.Ltmp385 # Offset: 1295
    00000511: 	cmpq	%rax, %rcx
    00000514: 	jbe	.Ltmp383 # Offset: 1300
.Ltmp384:
    0000051a: 	movq	(%rax), %rdi
    0000051d: 	movq	%rdi, (%rcx)
    00000520: 	movq	%rsi, (%rax)
.Ltmp382:
    00000523: 	movq	%rcx, %r12
    00000526: 	jmp	.Ltmp386 # Offset: 1318
.Ltmp330:
    00000528: 	movq	%r12, %rax
    0000052b: 	subq	%r13, %rax
    0000052e: 	cmpq	$0x8, %rax
    00000532: 	jle	.Ltmp387 # Offset: 1330
    00000534: 	movq	(%r13), %rdx
    00000538: 	movq	%r12, %r14
    0000053b: 	movq	%r13, %rax
    0000053e: 	nop # Size: 2
.Ltmp392:
    00000540: 	movq	-0x8(%r14), %rsi
    00000544: 	leaq	-0x8(%r14), %rcx
    00000548: 	cmpq	%rsi, %rdx
    0000054b: 	jb	.Ltmp388 # Offset: 1355
    0000054d: 	cmpq	%rax, %rcx
    00000550: 	jbe	.Ltmp389 # Offset: 1360
    00000552: 	cmpq	(%rax), %rdx
    00000555: 	jbe	.Ltmp390 # Offset: 1365
    00000557: 	nopw	(%rax,%rax) # Size: 9
.Ltmp391:
    00000560: 	addq	$0x8, %rax
    00000564: 	cmpq	(%rax), %rdx
    00000567: 	ja	.Ltmp391 # Offset: 1383
    00000569: 	cmpq	%rax, %rcx
    0000056c: 	jbe	.Ltmp389 # Offset: 1388
.Ltmp390:
    0000056e: 	movq	(%rax), %rdi
    00000571: 	movq	%rdi, (%rcx)
    00000574: 	movq	%rsi, (%rax)
.Ltmp388:
    00000577: 	movq	%rcx, %r14
    0000057a: 	jmp	.Ltmp392 # Offset: 1402
.Ltmp389:
    0000057c: 	movq	%r14, %rax
    0000057f: 	subq	%r13, %rax
    00000582: 	cmpq	$0x8, %rax
    00000586: 	jle	.Ltmp393 # Offset: 1414
    00000588: 	movq	%r14, %rsi
    0000058b: 	movq	%r13, %rdi
    0000058e: 	callq	"_ZN9benchmark9quicksortIP9TypeClassImEEEvT_S4_.part.0/1" # Offset: 1422
.Ltmp393:
    00000593: 	movq	%r12, %rax
    00000596: 	subq	%r14, %rax
    00000599: 	cmpq	$0x8, %rax
    0000059d: 	jle	.Ltmp387 # Offset: 1437
    0000059f: 	movq	%r12, %rsi
    000005a2: 	movq	%r14, %rdi
    000005a5: 	callq	"_ZN9benchmark9quicksortIP9TypeClassImEEEvT_S4_.part.0/1" # Offset: 1445
.Ltmp387:
    000005aa: 	movq	%rbp, %rax
    000005ad: 	subq	%r12, %rax
    000005b0: 	cmpq	$0x8, %rax
    000005b4: 	jle	.Ltmp313 # Offset: 1460
    000005ba: 	movq	(%r12), %rdx
    000005be: 	movq	%rbp, %r13
    000005c1: 	movq	%r12, %rax
    000005c4: 	nopl	(%rax) # Size: 4
.Ltmp398:
    000005c8: 	movq	-0x8(%r13), %rsi
    000005cc: 	leaq	-0x8(%r13), %rcx
    000005d0: 	cmpq	%rsi, %rdx
    000005d3: 	jb	.Ltmp394 # Offset: 1491
    000005d5: 	cmpq	%rax, %rcx
    000005d8: 	jbe	.Ltmp395 # Offset: 1496
    000005de: 	cmpq	(%rax), %rdx
    000005e1: 	jbe	.Ltmp396 # Offset: 1505
    000005e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp397:
    000005e8: 	addq	$0x8, %rax
    000005ec: 	cmpq	(%rax), %rdx
    000005ef: 	ja	.Ltmp397 # Offset: 1519
    000005f1: 	cmpq	%rax, %rcx
    000005f4: 	jbe	.Ltmp395 # Offset: 1524
.Ltmp396:
    000005fa: 	movq	(%rax), %rdi
    000005fd: 	movq	%rdi, (%rcx)
    00000600: 	movq	%rsi, (%rax)
.Ltmp394:
    00000603: 	movq	%rcx, %r13
    00000606: 	jmp	.Ltmp398 # Offset: 1542
.Ltmp358:
    00000608: 	movq	%rbp, %rax
    0000060b: 	subq	%r13, %rax
    0000060e: 	cmpq	$0x8, %rax
    00000612: 	jle	.Ltmp399 # Offset: 1554
    00000614: 	movq	%rbp, %rsi
    00000617: 	movq	%r13, %rdi
    0000061a: 	callq	"_ZN9benchmark9quicksortIP9TypeClassImEEEvT_S4_.part.0/1" # Offset: 1562
.Ltmp399:
    0000061f: 	movq	%r12, %rax
    00000622: 	subq	%rbp, %rax
    00000625: 	cmpq	$0x8, %rax
    00000629: 	jle	.Ltmp356 # Offset: 1577
    0000062f: 	movq	%r12, %rsi
    00000632: 	movq	%rbp, %rdi
    00000635: 	callq	"_ZN9benchmark9quicksortIP9TypeClassImEEEvT_S4_.part.0/1" # Offset: 1589
    0000063a: 	jmp	.Ltmp356 # Offset: 1594
.Ltmp370:
    0000063f: 	movq	%r12, %rax
    00000642: 	subq	%rbp, %rax
    00000645: 	cmpq	$0x8, %rax
    00000649: 	jle	.Ltmp400 # Offset: 1609
    0000064b: 	movq	%r12, %rsi
    0000064e: 	movq	%rbp, %rdi
    00000651: 	callq	"_ZN9benchmark9quicksortIP9TypeClassImEEEvT_S4_.part.0/1" # Offset: 1617
.Ltmp400:
    00000656: 	movq	%rbx, %rax
    00000659: 	subq	%r12, %rax
    0000065c: 	cmpq	$0x8, %rax
    00000660: 	jg	.Ltmp401 # Offset: 1632
    00000666: 	jmp	.Ltmp321 # Offset: 1638
.Ltmp383:
    0000066b: 	movq	%r12, %rax
    0000066e: 	subq	%r14, %rax
    00000671: 	cmpq	$0x8, %rax
    00000675: 	jle	.Ltmp402 # Offset: 1653
    00000677: 	movq	%r12, %rsi
    0000067a: 	movq	%r14, %rdi
    0000067d: 	callq	"_ZN9benchmark9quicksortIP9TypeClassImEEEvT_S4_.part.0/1" # Offset: 1661
.Ltmp402:
    00000682: 	movq	%r13, %rax
    00000685: 	subq	%r12, %rax
    00000688: 	cmpq	$0x8, %rax
    0000068c: 	jle	.Ltmp381 # Offset: 1676
    00000692: 	movq	%r13, %rsi
    00000695: 	movq	%r12, %rdi
    00000698: 	callq	"_ZN9benchmark9quicksortIP9TypeClassImEEEvT_S4_.part.0/1" # Offset: 1688
    0000069d: 	jmp	.Ltmp381 # Offset: 1693
.Ltmp395:
    000006a2: 	movq	%r13, %rax
    000006a5: 	subq	%r12, %rax
    000006a8: 	cmpq	$0x8, %rax
    000006ac: 	jle	.Ltmp403 # Offset: 1708
    000006ae: 	movq	%r13, %rsi
    000006b1: 	movq	%r12, %rdi
    000006b4: 	callq	"_ZN9benchmark9quicksortIP9TypeClassImEEEvT_S4_.part.0/1" # Offset: 1716
.Ltmp403:
    000006b9: 	movq	%rbp, %rax
    000006bc: 	subq	%r13, %rax
    000006bf: 	cmpq	$0x8, %rax
    000006c3: 	jle	.Ltmp313 # Offset: 1731
    000006c9: 	movq	%rbp, %rsi
    000006cc: 	movq	%r13, %rdi
    000006cf: 	callq	"_ZN9benchmark9quicksortIP9TypeClassImEEEvT_S4_.part.0/1" # Offset: 1743
    000006d4: 	jmp	.Ltmp313 # Offset: 1748
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIP9TypeClassImEEEvT_S4_.part.0/1(*2)"

Binary Function "_ZN9benchmark9quicksortIP12DeepSubClassIiEEEvT_S4_.part.0/1(*2)" after disassembly {
  All names   : _ZN9benchmark9quicksortIP12DeepSubClassIiEEEvT_S4_.part.0/1
                _ZN9benchmark9quicksortIP12DeepSubClassIiEEEvT_S4_.part.0/stepanov_inherit.cpp/1
  Number      : 88
  State       : disassembled
  Address     : 0x52e0
  Size        : 0x65d
  MaxSize     : 0x660
  Offset      : 0x52e0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIP12DeepSubClassIiEEEvT_S4_.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB087:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	movq	%rdi, %r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rsi, %rbx
    00000010: 	subq	$0x8, %rsp
.Ltmp497:
    00000014: 	movl	(%r12), %edx
    00000018: 	movq	%rbx, %rbp
    0000001b: 	movq	%r12, %rax
    0000001e: 	nop # Size: 2
.Ltmp408:
    00000020: 	movl	-0x4(%rbp), %ecx
    00000023: 	leaq	-0x4(%rbp), %rsi
    00000027: 	cmpl	%ecx, %edx
    00000029: 	jl	.Ltmp404 # Offset: 41
    0000002b: 	cmpq	%rax, %rsi
    0000002e: 	jbe	.Ltmp405 # Offset: 46
    00000030: 	cmpl	(%rax), %edx
    00000032: 	jle	.Ltmp406 # Offset: 50
    00000034: 	nopl	(%rax) # Size: 4
.Ltmp407:
    00000038: 	addq	$0x4, %rax
    0000003c: 	cmpl	(%rax), %edx
    0000003e: 	jg	.Ltmp407 # Offset: 62
    00000040: 	cmpq	%rax, %rsi
    00000043: 	jbe	.Ltmp405 # Offset: 67
.Ltmp406:
    00000045: 	movl	(%rax), %edi
    00000047: 	movl	%edi, (%rsi)
    00000049: 	movl	%ecx, (%rax)
.Ltmp404:
    0000004b: 	movq	%rsi, %rbp
    0000004e: 	jmp	.Ltmp408 # Offset: 78
.Ltmp405:
    00000050: 	movq	%rbp, %rax
    00000053: 	subq	%r12, %rax
    00000056: 	cmpq	$0x4, %rax
    0000005a: 	jle	.Ltmp409 # Offset: 90
    0000005c: 	movl	(%r12), %edx
    00000060: 	movq	%rbp, %r13
    00000063: 	movq	%r12, %rax
    00000066: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp414:
    00000070: 	leaq	-0x4(%r13), %rsi
    00000074: 	cmpl	%ecx, %edx
    00000076: 	jl	.Ltmp410 # Offset: 118
    00000078: 	cmpq	%rax, %rsi
    0000007b: 	jbe	.Ltmp411 # Offset: 123
    0000007d: 	cmpl	(%rax), %edx
    0000007f: 	jle	.Ltmp412 # Offset: 127
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp413:
    00000088: 	addq	$0x4, %rax
    0000008c: 	cmpl	(%rax), %edx
    0000008e: 	jg	.Ltmp413 # Offset: 142
    00000090: 	cmpq	%rax, %rsi
    00000093: 	jbe	.Ltmp411 # Offset: 147
.Ltmp412:
    00000095: 	movl	(%rax), %edi
    00000097: 	movl	%edi, (%rsi)
    00000099: 	movl	%ecx, (%rax)
.Ltmp410:
    0000009b: 	movl	-0x4(%rsi), %ecx
    0000009e: 	movq	%rsi, %r13
    000000a1: 	jmp	.Ltmp414 # Offset: 161
.Ltmp411:
    000000a3: 	movq	%r13, %rax
    000000a6: 	subq	%r12, %rax
    000000a9: 	cmpq	$0x4, %rax
    000000ad: 	jg	.Ltmp415 # Offset: 173
.Ltmp477:
    000000b3: 	movq	%rbp, %rax
    000000b6: 	subq	%r13, %rax
    000000b9: 	cmpq	$0x4, %rax
    000000bd: 	jg	.Ltmp416 # Offset: 189
.Ltmp409:
    000000bf: 	movq	%rbx, %rax
    000000c2: 	subq	%rbp, %rax
    000000c5: 	cmpq	$0x4, %rax
    000000c9: 	jle	.Ltmp417 # Offset: 201
    000000cb: 	movl	(%rbp), %edx
    000000ce: 	movq	%rbx, %r12
    000000d1: 	movq	%rbp, %rax
    000000d4: 	nopl	(%rax) # Size: 4
.Ltmp422:
    000000d8: 	movl	-0x4(%r12), %ecx
    000000dd: 	leaq	-0x4(%r12), %rsi
    000000e2: 	cmpl	%ecx, %edx
    000000e4: 	jl	.Ltmp418 # Offset: 228
    000000e6: 	cmpq	%rax, %rsi
    000000e9: 	jbe	.Ltmp419 # Offset: 233
    000000eb: 	cmpl	(%rax), %edx
    000000ed: 	jle	.Ltmp420 # Offset: 237
    000000ef: 	nop # Size: 1
.Ltmp421:
    000000f0: 	addq	$0x4, %rax
    000000f4: 	cmpl	(%rax), %edx
    000000f6: 	jg	.Ltmp421 # Offset: 246
    000000f8: 	cmpq	%rax, %rsi
    000000fb: 	jbe	.Ltmp419 # Offset: 251
.Ltmp420:
    000000fd: 	movl	(%rax), %edi
    000000ff: 	movl	%edi, (%rsi)
    00000101: 	movl	%ecx, (%rax)
.Ltmp418:
    00000103: 	movq	%rsi, %r12
    00000106: 	jmp	.Ltmp422 # Offset: 262
.Ltmp419:
    00000108: 	movq	%r12, %rax
    0000010b: 	subq	%rbp, %rax
    0000010e: 	cmpq	$0x4, %rax
    00000112: 	jg	.Ltmp423 # Offset: 274
.Ltmp452:
    00000118: 	movq	%rbx, %rax
    0000011b: 	subq	%r12, %rax
    0000011e: 	cmpq	$0x4, %rax
    00000122: 	jg	.Ltmp424 # Offset: 290
.Ltmp417:
    00000128: 	addq	$0x8, %rsp
    0000012c: 	popq	%rbx
    0000012d: 	popq	%rbp
    0000012e: 	popq	%r12
    00000130: 	popq	%r13
    00000132: 	popq	%r14
    00000134: 	popq	%r15
    00000136: 	retq # Offset: 310
.Ltmp416:
    00000137: 	movl	(%r13), %edx
    0000013b: 	movq	%rbp, %r12
    0000013e: 	movq	%r13, %rax
    00000141: 	nopl	(%rax) # Size: 7
.Ltmp429:
    00000148: 	movl	-0x4(%r12), %esi
    0000014d: 	leaq	-0x4(%r12), %rcx
    00000152: 	cmpl	%esi, %edx
    00000154: 	jl	.Ltmp425 # Offset: 340
    00000156: 	cmpq	%rax, %rcx
    00000159: 	jbe	.Ltmp426 # Offset: 345
    0000015f: 	cmpl	(%rax), %edx
    00000161: 	jle	.Ltmp427 # Offset: 353
    00000163: 	nopl	(%rax,%rax) # Size: 5
.Ltmp428:
    00000168: 	addq	$0x4, %rax
    0000016c: 	cmpl	(%rax), %edx
    0000016e: 	jg	.Ltmp428 # Offset: 366
    00000170: 	cmpq	%rax, %rcx
    00000173: 	jbe	.Ltmp426 # Offset: 371
.Ltmp427:
    00000179: 	movl	(%rax), %edi
    0000017b: 	movl	%edi, (%rcx)
    0000017d: 	movl	%esi, (%rax)
.Ltmp425:
    0000017f: 	movq	%rcx, %r12
    00000182: 	jmp	.Ltmp429 # Offset: 386
.Ltmp415:
    00000184: 	movl	(%r12), %edx
    00000188: 	movq	%r13, %r14
    0000018b: 	movq	%r12, %rax
    0000018e: 	nop # Size: 2
.Ltmp434:
    00000190: 	leaq	-0x4(%r14), %rsi
    00000194: 	cmpl	%ecx, %edx
    00000196: 	jl	.Ltmp430 # Offset: 406
    00000198: 	cmpq	%rax, %rsi
    0000019b: 	jbe	.Ltmp431 # Offset: 411
    000001a1: 	cmpl	%edx, (%rax)
    000001a3: 	jge	.Ltmp432 # Offset: 419
    000001a5: 	nopl	(%rax) # Size: 3
.Ltmp433:
    000001a8: 	addq	$0x4, %rax
    000001ac: 	cmpl	(%rax), %edx
    000001ae: 	jg	.Ltmp433 # Offset: 430
    000001b0: 	cmpq	%rax, %rsi
    000001b3: 	jbe	.Ltmp431 # Offset: 435
.Ltmp432:
    000001b9: 	movl	(%rax), %edi
    000001bb: 	movl	%edi, (%rsi)
    000001bd: 	movl	%ecx, (%rax)
.Ltmp430:
    000001bf: 	movl	-0x4(%rsi), %ecx
    000001c2: 	movq	%rsi, %r14
    000001c5: 	jmp	.Ltmp434 # Offset: 453
.Ltmp424:
    000001c7: 	movl	(%r12), %edx
    000001cb: 	movq	%rbx, %rbp
    000001ce: 	movq	%r12, %rax
    000001d1: 	nopl	(%rax) # Size: 7
.Ltmp439:
    000001d8: 	movl	-0x4(%rbp), %esi
    000001db: 	leaq	-0x4(%rbp), %rcx
    000001df: 	cmpl	%esi, %edx
    000001e1: 	jl	.Ltmp435 # Offset: 481
    000001e3: 	cmpq	%rax, %rcx
    000001e6: 	jbe	.Ltmp436 # Offset: 486
    000001ec: 	cmpl	%edx, (%rax)
    000001ee: 	jge	.Ltmp437 # Offset: 494
.Ltmp438:
    000001f0: 	addq	$0x4, %rax
    000001f4: 	cmpl	(%rax), %edx
    000001f6: 	jg	.Ltmp438 # Offset: 502
    000001f8: 	cmpq	%rax, %rcx
    000001fb: 	jbe	.Ltmp436 # Offset: 507
.Ltmp437:
    00000201: 	movl	(%rax), %edi
    00000203: 	movl	%edi, (%rcx)
    00000205: 	movl	%esi, (%rax)
.Ltmp435:
    00000207: 	movq	%rcx, %rbp
    0000020a: 	jmp	.Ltmp439 # Offset: 522
.Ltmp423:
    0000020c: 	movl	(%rbp), %edx
    0000020f: 	movq	%r12, %r13
    00000212: 	movq	%rbp, %rax
    00000215: 	nopl	(%rax) # Size: 3
.Ltmp444:
    00000218: 	leaq	-0x4(%r13), %rsi
    0000021c: 	cmpl	%ecx, %edx
    0000021e: 	jl	.Ltmp440 # Offset: 542
    00000220: 	cmpq	%rax, %rsi
    00000223: 	jbe	.Ltmp441 # Offset: 547
    00000225: 	cmpl	(%rax), %edx
    00000227: 	jle	.Ltmp442 # Offset: 551
    00000229: 	nopl	(%rax) # Size: 7
.Ltmp443:
    00000230: 	addq	$0x4, %rax
    00000234: 	cmpl	(%rax), %edx
    00000236: 	jg	.Ltmp443 # Offset: 566
    00000238: 	cmpq	%rax, %rsi
    0000023b: 	jbe	.Ltmp441 # Offset: 571
.Ltmp442:
    0000023d: 	movl	(%rax), %edi
    0000023f: 	movl	%edi, (%rsi)
    00000241: 	movl	%ecx, (%rax)
.Ltmp440:
    00000243: 	movl	-0x4(%rsi), %ecx
    00000246: 	movq	%rsi, %r13
    00000249: 	jmp	.Ltmp444 # Offset: 585
.Ltmp441:
    0000024b: 	movq	%r13, %rax
    0000024e: 	subq	%rbp, %rax
    00000251: 	cmpq	$0x4, %rax
    00000255: 	jle	.Ltmp445 # Offset: 597
    00000257: 	movl	(%rbp), %edx
    0000025a: 	movq	%r13, %r14
    0000025d: 	movq	%rbp, %rax
.Ltmp450:
    00000260: 	movl	-0x4(%r14), %esi
    00000264: 	leaq	-0x4(%r14), %rcx
    00000268: 	cmpl	%esi, %edx
    0000026a: 	jl	.Ltmp446 # Offset: 618
    0000026c: 	cmpq	%rax, %rcx
    0000026f: 	jbe	.Ltmp447 # Offset: 623
    00000271: 	cmpl	(%rax), %edx
    00000273: 	jle	.Ltmp448 # Offset: 627
    00000275: 	nopl	(%rax) # Size: 3
.Ltmp449:
    00000278: 	addq	$0x4, %rax
    0000027c: 	cmpl	(%rax), %edx
    0000027e: 	jg	.Ltmp449 # Offset: 638
    00000280: 	cmpq	%rax, %rcx
    00000283: 	jbe	.Ltmp447 # Offset: 643
.Ltmp448:
    00000285: 	movl	(%rax), %edi
    00000287: 	movl	%edi, (%rcx)
    00000289: 	movl	%esi, (%rax)
.Ltmp446:
    0000028b: 	movq	%rcx, %r14
    0000028e: 	jmp	.Ltmp450 # Offset: 654
.Ltmp447:
    00000290: 	movq	%r14, %rax
    00000293: 	subq	%rbp, %rax
    00000296: 	cmpq	$0x4, %rax
    0000029a: 	jle	.Ltmp451 # Offset: 666
    0000029c: 	movq	%r14, %rsi
    0000029f: 	movq	%rbp, %rdi
    000002a2: 	callq	"_ZN9benchmark9quicksortIP12DeepSubClassIiEEEvT_S4_.part.0/1" # Offset: 674
.Ltmp451:
    000002a7: 	movq	%r13, %rax
    000002aa: 	subq	%r14, %rax
    000002ad: 	cmpq	$0x4, %rax
    000002b1: 	jle	.Ltmp445 # Offset: 689
    000002b3: 	movq	%r13, %rsi
    000002b6: 	movq	%r14, %rdi
    000002b9: 	callq	"_ZN9benchmark9quicksortIP12DeepSubClassIiEEEvT_S4_.part.0/1" # Offset: 697
.Ltmp445:
    000002be: 	movq	%r12, %rax
    000002c1: 	subq	%r13, %rax
    000002c4: 	cmpq	$0x4, %rax
    000002c8: 	jle	.Ltmp452 # Offset: 712
    000002ce: 	movl	(%r13), %edx
    000002d2: 	movq	%r12, %rbp
    000002d5: 	movq	%r13, %rax
    000002d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp457:
    000002e0: 	movl	-0x4(%rbp), %esi
    000002e3: 	leaq	-0x4(%rbp), %rcx
    000002e7: 	cmpl	%esi, %edx
    000002e9: 	jl	.Ltmp453 # Offset: 745
    000002eb: 	cmpq	%rax, %rcx
    000002ee: 	jbe	.Ltmp454 # Offset: 750
    000002f4: 	cmpl	%edx, (%rax)
    000002f6: 	jge	.Ltmp455 # Offset: 758
    000002f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp456:
    00000300: 	addq	$0x4, %rax
    00000304: 	cmpl	(%rax), %edx
    00000306: 	jg	.Ltmp456 # Offset: 774
    00000308: 	cmpq	%rax, %rcx
    0000030b: 	jbe	.Ltmp454 # Offset: 779
.Ltmp455:
    00000311: 	movl	(%rax), %edi
    00000313: 	movl	%edi, (%rcx)
    00000315: 	movl	%esi, (%rax)
.Ltmp453:
    00000317: 	movq	%rcx, %rbp
    0000031a: 	jmp	.Ltmp457 # Offset: 794
.Ltmp436:
    0000031c: 	movq	%rbp, %rax
    0000031f: 	subq	%r12, %rax
    00000322: 	cmpq	$0x4, %rax
    00000326: 	jle	.Ltmp458 # Offset: 806
    00000328: 	movl	(%r12), %edx
    0000032c: 	movq	%rbp, %r13
    0000032f: 	movq	%r12, %rax
    00000332: 	nopw	(%rax,%rax) # Size: 6
.Ltmp463:
    00000338: 	movl	-0x4(%r13), %esi
    0000033c: 	leaq	-0x4(%r13), %rcx
    00000340: 	cmpl	%esi, %edx
    00000342: 	jl	.Ltmp459 # Offset: 834
    00000344: 	cmpq	%rax, %rcx
    00000347: 	jbe	.Ltmp460 # Offset: 839
    00000349: 	cmpl	%edx, (%rax)
    0000034b: 	jge	.Ltmp461 # Offset: 843
    0000034d: 	nopl	(%rax) # Size: 3
.Ltmp462:
    00000350: 	addq	$0x4, %rax
    00000354: 	cmpl	(%rax), %edx
    00000356: 	jg	.Ltmp462 # Offset: 854
    00000358: 	cmpq	%rax, %rcx
    0000035b: 	jbe	.Ltmp460 # Offset: 859
.Ltmp461:
    0000035d: 	movl	(%rax), %edi
    0000035f: 	movl	%edi, (%rcx)
    00000361: 	movl	%esi, (%rax)
.Ltmp459:
    00000363: 	movq	%rcx, %r13
    00000366: 	jmp	.Ltmp463 # Offset: 870
.Ltmp460:
    00000368: 	movq	%r13, %rax
    0000036b: 	subq	%r12, %rax
    0000036e: 	cmpq	$0x4, %rax
    00000372: 	jle	.Ltmp464 # Offset: 882
    00000374: 	movq	%r13, %rsi
    00000377: 	movq	%r12, %rdi
    0000037a: 	callq	"_ZN9benchmark9quicksortIP12DeepSubClassIiEEEvT_S4_.part.0/1" # Offset: 890
.Ltmp464:
    0000037f: 	movq	%rbp, %rax
    00000382: 	subq	%r13, %rax
    00000385: 	cmpq	$0x4, %rax
    00000389: 	jle	.Ltmp458 # Offset: 905
    0000038b: 	movq	%rbp, %rsi
    0000038e: 	movq	%r13, %rdi
    00000391: 	callq	"_ZN9benchmark9quicksortIP12DeepSubClassIiEEEvT_S4_.part.0/1" # Offset: 913
.Ltmp458:
    00000396: 	movq	%rbx, %rax
    00000399: 	subq	%rbp, %rax
    0000039c: 	cmpq	$0x4, %rax
    000003a0: 	jle	.Ltmp417 # Offset: 928
    000003a6: 	movl	(%rbp), %edx
    000003a9: 	movq	%rbx, %r12
    000003ac: 	movq	%rbp, %rax
    000003af: 	nop # Size: 1
.Ltmp469:
    000003b0: 	movl	-0x4(%r12), %esi
    000003b5: 	leaq	-0x4(%r12), %rcx
    000003ba: 	cmpl	%esi, %edx
    000003bc: 	jl	.Ltmp465 # Offset: 956
    000003be: 	cmpq	%rax, %rcx
    000003c1: 	jbe	.Ltmp466 # Offset: 961
    000003c7: 	cmpl	(%rax), %edx
    000003c9: 	jle	.Ltmp467 # Offset: 969
    000003cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp468:
    000003d0: 	addq	$0x4, %rax
    000003d4: 	cmpl	(%rax), %edx
    000003d6: 	jg	.Ltmp468 # Offset: 982
    000003d8: 	cmpq	%rax, %rcx
    000003db: 	jbe	.Ltmp466 # Offset: 987
.Ltmp467:
    000003e1: 	movl	(%rax), %edi
    000003e3: 	movl	%edi, (%rcx)
    000003e5: 	movl	%esi, (%rax)
.Ltmp465:
    000003e7: 	movq	%rcx, %r12
    000003ea: 	jmp	.Ltmp469 # Offset: 1002
.Ltmp431:
    000003ec: 	movq	%r14, %rax
    000003ef: 	subq	%r12, %rax
    000003f2: 	cmpq	$0x4, %rax
    000003f6: 	jle	.Ltmp470 # Offset: 1014
    000003f8: 	movl	(%r12), %edx
    000003fc: 	movq	%r14, %r15
    000003ff: 	movq	%r12, %rax
    00000402: 	nopw	(%rax,%rax) # Size: 6
.Ltmp475:
    00000408: 	movl	-0x4(%r15), %esi
    0000040c: 	leaq	-0x4(%r15), %rcx
    00000410: 	cmpl	%esi, %edx
    00000412: 	jl	.Ltmp471 # Offset: 1042
    00000414: 	cmpq	%rax, %rcx
    00000417: 	jbe	.Ltmp472 # Offset: 1047
    00000419: 	cmpl	(%rax), %edx
    0000041b: 	jle	.Ltmp473 # Offset: 1051
    0000041d: 	nopl	(%rax) # Size: 3
.Ltmp474:
    00000420: 	addq	$0x4, %rax
    00000424: 	cmpl	(%rax), %edx
    00000426: 	jg	.Ltmp474 # Offset: 1062
    00000428: 	cmpq	%rax, %rcx
    0000042b: 	jbe	.Ltmp472 # Offset: 1067
.Ltmp473:
    0000042d: 	movl	(%rax), %edi
    0000042f: 	movl	%edi, (%rcx)
    00000431: 	movl	%esi, (%rax)
.Ltmp471:
    00000433: 	movq	%rcx, %r15
    00000436: 	jmp	.Ltmp475 # Offset: 1078
.Ltmp472:
    00000438: 	movq	%r15, %rax
    0000043b: 	subq	%r12, %rax
    0000043e: 	cmpq	$0x4, %rax
    00000442: 	jle	.Ltmp476 # Offset: 1090
    00000444: 	movq	%r15, %rsi
    00000447: 	movq	%r12, %rdi
    0000044a: 	callq	"_ZN9benchmark9quicksortIP12DeepSubClassIiEEEvT_S4_.part.0/1" # Offset: 1098
.Ltmp476:
    0000044f: 	movq	%r14, %rax
    00000452: 	subq	%r15, %rax
    00000455: 	cmpq	$0x4, %rax
    00000459: 	jle	.Ltmp470 # Offset: 1113
    0000045b: 	movq	%r14, %rsi
    0000045e: 	movq	%r15, %rdi
    00000461: 	callq	"_ZN9benchmark9quicksortIP12DeepSubClassIiEEEvT_S4_.part.0/1" # Offset: 1121
.Ltmp470:
    00000466: 	movq	%r13, %rax
    00000469: 	subq	%r14, %rax
    0000046c: 	cmpq	$0x4, %rax
    00000470: 	jle	.Ltmp477 # Offset: 1136
    00000476: 	movl	(%r14), %edx
    00000479: 	movq	%r13, %r12
    0000047c: 	movq	%r14, %rax
    0000047f: 	nop # Size: 1
.Ltmp482:
    00000480: 	movl	-0x4(%r12), %esi
    00000485: 	leaq	-0x4(%r12), %rcx
    0000048a: 	cmpl	%esi, %edx
    0000048c: 	jl	.Ltmp478 # Offset: 1164
    0000048e: 	cmpq	%rax, %rcx
    00000491: 	jbe	.Ltmp479 # Offset: 1169
    00000497: 	cmpl	(%rax), %edx
    00000499: 	jle	.Ltmp480 # Offset: 1177
    0000049b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp481:
    000004a0: 	addq	$0x4, %rax
    000004a4: 	cmpl	(%rax), %edx
    000004a6: 	jg	.Ltmp481 # Offset: 1190
    000004a8: 	cmpq	%rax, %rcx
    000004ab: 	jbe	.Ltmp479 # Offset: 1195
.Ltmp480:
    000004b1: 	movl	(%rax), %edi
    000004b3: 	movl	%edi, (%rcx)
    000004b5: 	movl	%esi, (%rax)
.Ltmp478:
    000004b7: 	movq	%rcx, %r12
    000004ba: 	jmp	.Ltmp482 # Offset: 1210
.Ltmp426:
    000004bc: 	movq	%r12, %rax
    000004bf: 	subq	%r13, %rax
    000004c2: 	cmpq	$0x4, %rax
    000004c6: 	jle	.Ltmp483 # Offset: 1222
    000004c8: 	movl	(%r13), %edx
    000004cc: 	movq	%r12, %r14
    000004cf: 	movq	%r13, %rax
    000004d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp488:
    000004d8: 	movl	-0x4(%r14), %esi
    000004dc: 	leaq	-0x4(%r14), %rcx
    000004e0: 	cmpl	%esi, %edx
    000004e2: 	jl	.Ltmp484 # Offset: 1250
    000004e4: 	cmpq	%rax, %rcx
    000004e7: 	jbe	.Ltmp485 # Offset: 1255
    000004e9: 	cmpl	(%rax), %edx
    000004eb: 	jle	.Ltmp486 # Offset: 1259
    000004ed: 	nopl	(%rax) # Size: 3
.Ltmp487:
    000004f0: 	addq	$0x4, %rax
    000004f4: 	cmpl	(%rax), %edx
    000004f6: 	jg	.Ltmp487 # Offset: 1270
    000004f8: 	cmpq	%rax, %rcx
    000004fb: 	jbe	.Ltmp485 # Offset: 1275
.Ltmp486:
    000004fd: 	movl	(%rax), %edi
    000004ff: 	movl	%edi, (%rcx)
    00000501: 	movl	%esi, (%rax)
.Ltmp484:
    00000503: 	movq	%rcx, %r14
    00000506: 	jmp	.Ltmp488 # Offset: 1286
.Ltmp485:
    00000508: 	movq	%r14, %rax
    0000050b: 	subq	%r13, %rax
    0000050e: 	cmpq	$0x4, %rax
    00000512: 	jle	.Ltmp489 # Offset: 1298
    00000514: 	movq	%r14, %rsi
    00000517: 	movq	%r13, %rdi
    0000051a: 	callq	"_ZN9benchmark9quicksortIP12DeepSubClassIiEEEvT_S4_.part.0/1" # Offset: 1306
.Ltmp489:
    0000051f: 	movq	%r12, %rax
    00000522: 	subq	%r14, %rax
    00000525: 	cmpq	$0x4, %rax
    00000529: 	jle	.Ltmp483 # Offset: 1321
    0000052b: 	movq	%r12, %rsi
    0000052e: 	movq	%r14, %rdi
    00000531: 	callq	"_ZN9benchmark9quicksortIP12DeepSubClassIiEEEvT_S4_.part.0/1" # Offset: 1329
.Ltmp483:
    00000536: 	movq	%rbp, %rax
    00000539: 	subq	%r12, %rax
    0000053c: 	cmpq	$0x4, %rax
    00000540: 	jle	.Ltmp409 # Offset: 1344
    00000546: 	movl	(%r12), %edx
    0000054a: 	movq	%rbp, %r13
    0000054d: 	movq	%r12, %rax
.Ltmp494:
    00000550: 	movl	-0x4(%r13), %esi
    00000554: 	leaq	-0x4(%r13), %rcx
    00000558: 	cmpl	%esi, %edx
    0000055a: 	jl	.Ltmp490 # Offset: 1370
    0000055c: 	cmpq	%rax, %rcx
    0000055f: 	jbe	.Ltmp491 # Offset: 1375
    00000565: 	cmpl	(%rax), %edx
    00000567: 	jle	.Ltmp492 # Offset: 1383
    00000569: 	nopl	(%rax) # Size: 7
.Ltmp493:
    00000570: 	addq	$0x4, %rax
    00000574: 	cmpl	(%rax), %edx
    00000576: 	jg	.Ltmp493 # Offset: 1398
    00000578: 	cmpq	%rax, %rcx
    0000057b: 	jbe	.Ltmp491 # Offset: 1403
.Ltmp492:
    00000581: 	movl	(%rax), %edi
    00000583: 	movl	%edi, (%rcx)
    00000585: 	movl	%esi, (%rax)
.Ltmp490:
    00000587: 	movq	%rcx, %r13
    0000058a: 	jmp	.Ltmp494 # Offset: 1418
.Ltmp454:
    0000058c: 	movq	%rbp, %rax
    0000058f: 	subq	%r13, %rax
    00000592: 	cmpq	$0x4, %rax
    00000596: 	jle	.Ltmp495 # Offset: 1430
    00000598: 	movq	%rbp, %rsi
    0000059b: 	movq	%r13, %rdi
    0000059e: 	callq	"_ZN9benchmark9quicksortIP12DeepSubClassIiEEEvT_S4_.part.0/1" # Offset: 1438
.Ltmp495:
    000005a3: 	movq	%r12, %rax
    000005a6: 	subq	%rbp, %rax
    000005a9: 	cmpq	$0x4, %rax
    000005ad: 	jle	.Ltmp452 # Offset: 1453
    000005b3: 	movq	%r12, %rsi
    000005b6: 	movq	%rbp, %rdi
    000005b9: 	callq	"_ZN9benchmark9quicksortIP12DeepSubClassIiEEEvT_S4_.part.0/1" # Offset: 1465
    000005be: 	jmp	.Ltmp452 # Offset: 1470
.Ltmp466:
    000005c3: 	movq	%r12, %rax
    000005c6: 	subq	%rbp, %rax
    000005c9: 	cmpq	$0x4, %rax
    000005cd: 	jle	.Ltmp496 # Offset: 1485
    000005cf: 	movq	%r12, %rsi
    000005d2: 	movq	%rbp, %rdi
    000005d5: 	callq	"_ZN9benchmark9quicksortIP12DeepSubClassIiEEEvT_S4_.part.0/1" # Offset: 1493
.Ltmp496:
    000005da: 	movq	%rbx, %rax
    000005dd: 	subq	%r12, %rax
    000005e0: 	cmpq	$0x4, %rax
    000005e4: 	jg	.Ltmp497 # Offset: 1508
    000005ea: 	jmp	.Ltmp417 # Offset: 1514
.Ltmp479:
    000005ef: 	movq	%r12, %rax
    000005f2: 	subq	%r14, %rax
    000005f5: 	cmpq	$0x4, %rax
    000005f9: 	jle	.Ltmp498 # Offset: 1529
    000005fb: 	movq	%r12, %rsi
    000005fe: 	movq	%r14, %rdi
    00000601: 	callq	"_ZN9benchmark9quicksortIP12DeepSubClassIiEEEvT_S4_.part.0/1" # Offset: 1537
.Ltmp498:
    00000606: 	movq	%r13, %rax
    00000609: 	subq	%r12, %rax
    0000060c: 	cmpq	$0x4, %rax
    00000610: 	jle	.Ltmp477 # Offset: 1552
    00000616: 	movq	%r13, %rsi
    00000619: 	movq	%r12, %rdi
    0000061c: 	callq	"_ZN9benchmark9quicksortIP12DeepSubClassIiEEEvT_S4_.part.0/1" # Offset: 1564
    00000621: 	jmp	.Ltmp477 # Offset: 1569
.Ltmp491:
    00000626: 	movq	%r13, %rax
    00000629: 	subq	%r12, %rax
    0000062c: 	cmpq	$0x4, %rax
    00000630: 	jle	.Ltmp499 # Offset: 1584
    00000632: 	movq	%r13, %rsi
    00000635: 	movq	%r12, %rdi
    00000638: 	callq	"_ZN9benchmark9quicksortIP12DeepSubClassIiEEEvT_S4_.part.0/1" # Offset: 1592
.Ltmp499:
    0000063d: 	movq	%rbp, %rax
    00000640: 	subq	%r13, %rax
    00000643: 	cmpq	$0x4, %rax
    00000647: 	jle	.Ltmp409 # Offset: 1607
    0000064d: 	movq	%rbp, %rsi
    00000650: 	movq	%r13, %rdi
    00000653: 	callq	"_ZN9benchmark9quicksortIP12DeepSubClassIiEEEvT_S4_.part.0/1" # Offset: 1619
    00000658: 	jmp	.Ltmp409 # Offset: 1624
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIP12DeepSubClassIiEEEvT_S4_.part.0/1(*2)"

Binary Function "_ZN9benchmark9quicksortIP9TypeClassIiEEEvT_S4_.part.0/1(*2)" after disassembly {
  All names   : _ZN9benchmark9quicksortIP9TypeClassIiEEEvT_S4_.part.0/1
                _ZN9benchmark9quicksortIP9TypeClassIiEEEvT_S4_.part.0/stepanov_inherit.cpp/1
  Number      : 89
  State       : disassembled
  Address     : 0x5940
  Size        : 0x65d
  MaxSize     : 0x660
  Offset      : 0x5940
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIP9TypeClassIiEEEvT_S4_.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB088:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	movq	%rdi, %r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rsi, %rbx
    00000010: 	subq	$0x8, %rsp
.Ltmp593:
    00000014: 	movl	(%r12), %edx
    00000018: 	movq	%rbx, %rbp
    0000001b: 	movq	%r12, %rax
    0000001e: 	nop # Size: 2
.Ltmp504:
    00000020: 	movl	-0x4(%rbp), %ecx
    00000023: 	leaq	-0x4(%rbp), %rsi
    00000027: 	cmpl	%ecx, %edx
    00000029: 	jl	.Ltmp500 # Offset: 41
    0000002b: 	cmpq	%rax, %rsi
    0000002e: 	jbe	.Ltmp501 # Offset: 46
    00000030: 	cmpl	(%rax), %edx
    00000032: 	jle	.Ltmp502 # Offset: 50
    00000034: 	nopl	(%rax) # Size: 4
.Ltmp503:
    00000038: 	addq	$0x4, %rax
    0000003c: 	cmpl	(%rax), %edx
    0000003e: 	jg	.Ltmp503 # Offset: 62
    00000040: 	cmpq	%rax, %rsi
    00000043: 	jbe	.Ltmp501 # Offset: 67
.Ltmp502:
    00000045: 	movl	(%rax), %edi
    00000047: 	movl	%edi, (%rsi)
    00000049: 	movl	%ecx, (%rax)
.Ltmp500:
    0000004b: 	movq	%rsi, %rbp
    0000004e: 	jmp	.Ltmp504 # Offset: 78
.Ltmp501:
    00000050: 	movq	%rbp, %rax
    00000053: 	subq	%r12, %rax
    00000056: 	cmpq	$0x4, %rax
    0000005a: 	jle	.Ltmp505 # Offset: 90
    0000005c: 	movl	(%r12), %edx
    00000060: 	movq	%rbp, %r13
    00000063: 	movq	%r12, %rax
    00000066: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp510:
    00000070: 	leaq	-0x4(%r13), %rsi
    00000074: 	cmpl	%ecx, %edx
    00000076: 	jl	.Ltmp506 # Offset: 118
    00000078: 	cmpq	%rax, %rsi
    0000007b: 	jbe	.Ltmp507 # Offset: 123
    0000007d: 	cmpl	(%rax), %edx
    0000007f: 	jle	.Ltmp508 # Offset: 127
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp509:
    00000088: 	addq	$0x4, %rax
    0000008c: 	cmpl	(%rax), %edx
    0000008e: 	jg	.Ltmp509 # Offset: 142
    00000090: 	cmpq	%rax, %rsi
    00000093: 	jbe	.Ltmp507 # Offset: 147
.Ltmp508:
    00000095: 	movl	(%rax), %edi
    00000097: 	movl	%edi, (%rsi)
    00000099: 	movl	%ecx, (%rax)
.Ltmp506:
    0000009b: 	movl	-0x4(%rsi), %ecx
    0000009e: 	movq	%rsi, %r13
    000000a1: 	jmp	.Ltmp510 # Offset: 161
.Ltmp507:
    000000a3: 	movq	%r13, %rax
    000000a6: 	subq	%r12, %rax
    000000a9: 	cmpq	$0x4, %rax
    000000ad: 	jg	.Ltmp511 # Offset: 173
.Ltmp573:
    000000b3: 	movq	%rbp, %rax
    000000b6: 	subq	%r13, %rax
    000000b9: 	cmpq	$0x4, %rax
    000000bd: 	jg	.Ltmp512 # Offset: 189
.Ltmp505:
    000000bf: 	movq	%rbx, %rax
    000000c2: 	subq	%rbp, %rax
    000000c5: 	cmpq	$0x4, %rax
    000000c9: 	jle	.Ltmp513 # Offset: 201
    000000cb: 	movl	(%rbp), %edx
    000000ce: 	movq	%rbx, %r12
    000000d1: 	movq	%rbp, %rax
    000000d4: 	nopl	(%rax) # Size: 4
.Ltmp518:
    000000d8: 	movl	-0x4(%r12), %ecx
    000000dd: 	leaq	-0x4(%r12), %rsi
    000000e2: 	cmpl	%ecx, %edx
    000000e4: 	jl	.Ltmp514 # Offset: 228
    000000e6: 	cmpq	%rax, %rsi
    000000e9: 	jbe	.Ltmp515 # Offset: 233
    000000eb: 	cmpl	(%rax), %edx
    000000ed: 	jle	.Ltmp516 # Offset: 237
    000000ef: 	nop # Size: 1
.Ltmp517:
    000000f0: 	addq	$0x4, %rax
    000000f4: 	cmpl	(%rax), %edx
    000000f6: 	jg	.Ltmp517 # Offset: 246
    000000f8: 	cmpq	%rax, %rsi
    000000fb: 	jbe	.Ltmp515 # Offset: 251
.Ltmp516:
    000000fd: 	movl	(%rax), %edi
    000000ff: 	movl	%edi, (%rsi)
    00000101: 	movl	%ecx, (%rax)
.Ltmp514:
    00000103: 	movq	%rsi, %r12
    00000106: 	jmp	.Ltmp518 # Offset: 262
.Ltmp515:
    00000108: 	movq	%r12, %rax
    0000010b: 	subq	%rbp, %rax
    0000010e: 	cmpq	$0x4, %rax
    00000112: 	jg	.Ltmp519 # Offset: 274
.Ltmp548:
    00000118: 	movq	%rbx, %rax
    0000011b: 	subq	%r12, %rax
    0000011e: 	cmpq	$0x4, %rax
    00000122: 	jg	.Ltmp520 # Offset: 290
.Ltmp513:
    00000128: 	addq	$0x8, %rsp
    0000012c: 	popq	%rbx
    0000012d: 	popq	%rbp
    0000012e: 	popq	%r12
    00000130: 	popq	%r13
    00000132: 	popq	%r14
    00000134: 	popq	%r15
    00000136: 	retq # Offset: 310
.Ltmp512:
    00000137: 	movl	(%r13), %edx
    0000013b: 	movq	%rbp, %r12
    0000013e: 	movq	%r13, %rax
    00000141: 	nopl	(%rax) # Size: 7
.Ltmp525:
    00000148: 	movl	-0x4(%r12), %esi
    0000014d: 	leaq	-0x4(%r12), %rcx
    00000152: 	cmpl	%esi, %edx
    00000154: 	jl	.Ltmp521 # Offset: 340
    00000156: 	cmpq	%rax, %rcx
    00000159: 	jbe	.Ltmp522 # Offset: 345
    0000015f: 	cmpl	(%rax), %edx
    00000161: 	jle	.Ltmp523 # Offset: 353
    00000163: 	nopl	(%rax,%rax) # Size: 5
.Ltmp524:
    00000168: 	addq	$0x4, %rax
    0000016c: 	cmpl	(%rax), %edx
    0000016e: 	jg	.Ltmp524 # Offset: 366
    00000170: 	cmpq	%rax, %rcx
    00000173: 	jbe	.Ltmp522 # Offset: 371
.Ltmp523:
    00000179: 	movl	(%rax), %edi
    0000017b: 	movl	%edi, (%rcx)
    0000017d: 	movl	%esi, (%rax)
.Ltmp521:
    0000017f: 	movq	%rcx, %r12
    00000182: 	jmp	.Ltmp525 # Offset: 386
.Ltmp511:
    00000184: 	movl	(%r12), %edx
    00000188: 	movq	%r13, %r14
    0000018b: 	movq	%r12, %rax
    0000018e: 	nop # Size: 2
.Ltmp530:
    00000190: 	leaq	-0x4(%r14), %rsi
    00000194: 	cmpl	%ecx, %edx
    00000196: 	jl	.Ltmp526 # Offset: 406
    00000198: 	cmpq	%rax, %rsi
    0000019b: 	jbe	.Ltmp527 # Offset: 411
    000001a1: 	cmpl	%edx, (%rax)
    000001a3: 	jge	.Ltmp528 # Offset: 419
    000001a5: 	nopl	(%rax) # Size: 3
.Ltmp529:
    000001a8: 	addq	$0x4, %rax
    000001ac: 	cmpl	(%rax), %edx
    000001ae: 	jg	.Ltmp529 # Offset: 430
    000001b0: 	cmpq	%rax, %rsi
    000001b3: 	jbe	.Ltmp527 # Offset: 435
.Ltmp528:
    000001b9: 	movl	(%rax), %edi
    000001bb: 	movl	%edi, (%rsi)
    000001bd: 	movl	%ecx, (%rax)
.Ltmp526:
    000001bf: 	movl	-0x4(%rsi), %ecx
    000001c2: 	movq	%rsi, %r14
    000001c5: 	jmp	.Ltmp530 # Offset: 453
.Ltmp520:
    000001c7: 	movl	(%r12), %edx
    000001cb: 	movq	%rbx, %rbp
    000001ce: 	movq	%r12, %rax
    000001d1: 	nopl	(%rax) # Size: 7
.Ltmp535:
    000001d8: 	movl	-0x4(%rbp), %esi
    000001db: 	leaq	-0x4(%rbp), %rcx
    000001df: 	cmpl	%esi, %edx
    000001e1: 	jl	.Ltmp531 # Offset: 481
    000001e3: 	cmpq	%rax, %rcx
    000001e6: 	jbe	.Ltmp532 # Offset: 486
    000001ec: 	cmpl	%edx, (%rax)
    000001ee: 	jge	.Ltmp533 # Offset: 494
.Ltmp534:
    000001f0: 	addq	$0x4, %rax
    000001f4: 	cmpl	(%rax), %edx
    000001f6: 	jg	.Ltmp534 # Offset: 502
    000001f8: 	cmpq	%rax, %rcx
    000001fb: 	jbe	.Ltmp532 # Offset: 507
.Ltmp533:
    00000201: 	movl	(%rax), %edi
    00000203: 	movl	%edi, (%rcx)
    00000205: 	movl	%esi, (%rax)
.Ltmp531:
    00000207: 	movq	%rcx, %rbp
    0000020a: 	jmp	.Ltmp535 # Offset: 522
.Ltmp519:
    0000020c: 	movl	(%rbp), %edx
    0000020f: 	movq	%r12, %r13
    00000212: 	movq	%rbp, %rax
    00000215: 	nopl	(%rax) # Size: 3
.Ltmp540:
    00000218: 	leaq	-0x4(%r13), %rsi
    0000021c: 	cmpl	%ecx, %edx
    0000021e: 	jl	.Ltmp536 # Offset: 542
    00000220: 	cmpq	%rax, %rsi
    00000223: 	jbe	.Ltmp537 # Offset: 547
    00000225: 	cmpl	(%rax), %edx
    00000227: 	jle	.Ltmp538 # Offset: 551
    00000229: 	nopl	(%rax) # Size: 7
.Ltmp539:
    00000230: 	addq	$0x4, %rax
    00000234: 	cmpl	(%rax), %edx
    00000236: 	jg	.Ltmp539 # Offset: 566
    00000238: 	cmpq	%rax, %rsi
    0000023b: 	jbe	.Ltmp537 # Offset: 571
.Ltmp538:
    0000023d: 	movl	(%rax), %edi
    0000023f: 	movl	%edi, (%rsi)
    00000241: 	movl	%ecx, (%rax)
.Ltmp536:
    00000243: 	movl	-0x4(%rsi), %ecx
    00000246: 	movq	%rsi, %r13
    00000249: 	jmp	.Ltmp540 # Offset: 585
.Ltmp537:
    0000024b: 	movq	%r13, %rax
    0000024e: 	subq	%rbp, %rax
    00000251: 	cmpq	$0x4, %rax
    00000255: 	jle	.Ltmp541 # Offset: 597
    00000257: 	movl	(%rbp), %edx
    0000025a: 	movq	%r13, %r14
    0000025d: 	movq	%rbp, %rax
.Ltmp546:
    00000260: 	movl	-0x4(%r14), %esi
    00000264: 	leaq	-0x4(%r14), %rcx
    00000268: 	cmpl	%esi, %edx
    0000026a: 	jl	.Ltmp542 # Offset: 618
    0000026c: 	cmpq	%rax, %rcx
    0000026f: 	jbe	.Ltmp543 # Offset: 623
    00000271: 	cmpl	(%rax), %edx
    00000273: 	jle	.Ltmp544 # Offset: 627
    00000275: 	nopl	(%rax) # Size: 3
.Ltmp545:
    00000278: 	addq	$0x4, %rax
    0000027c: 	cmpl	(%rax), %edx
    0000027e: 	jg	.Ltmp545 # Offset: 638
    00000280: 	cmpq	%rax, %rcx
    00000283: 	jbe	.Ltmp543 # Offset: 643
.Ltmp544:
    00000285: 	movl	(%rax), %edi
    00000287: 	movl	%edi, (%rcx)
    00000289: 	movl	%esi, (%rax)
.Ltmp542:
    0000028b: 	movq	%rcx, %r14
    0000028e: 	jmp	.Ltmp546 # Offset: 654
.Ltmp543:
    00000290: 	movq	%r14, %rax
    00000293: 	subq	%rbp, %rax
    00000296: 	cmpq	$0x4, %rax
    0000029a: 	jle	.Ltmp547 # Offset: 666
    0000029c: 	movq	%r14, %rsi
    0000029f: 	movq	%rbp, %rdi
    000002a2: 	callq	"_ZN9benchmark9quicksortIP9TypeClassIiEEEvT_S4_.part.0/1" # Offset: 674
.Ltmp547:
    000002a7: 	movq	%r13, %rax
    000002aa: 	subq	%r14, %rax
    000002ad: 	cmpq	$0x4, %rax
    000002b1: 	jle	.Ltmp541 # Offset: 689
    000002b3: 	movq	%r13, %rsi
    000002b6: 	movq	%r14, %rdi
    000002b9: 	callq	"_ZN9benchmark9quicksortIP9TypeClassIiEEEvT_S4_.part.0/1" # Offset: 697
.Ltmp541:
    000002be: 	movq	%r12, %rax
    000002c1: 	subq	%r13, %rax
    000002c4: 	cmpq	$0x4, %rax
    000002c8: 	jle	.Ltmp548 # Offset: 712
    000002ce: 	movl	(%r13), %edx
    000002d2: 	movq	%r12, %rbp
    000002d5: 	movq	%r13, %rax
    000002d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp553:
    000002e0: 	movl	-0x4(%rbp), %esi
    000002e3: 	leaq	-0x4(%rbp), %rcx
    000002e7: 	cmpl	%esi, %edx
    000002e9: 	jl	.Ltmp549 # Offset: 745
    000002eb: 	cmpq	%rax, %rcx
    000002ee: 	jbe	.Ltmp550 # Offset: 750
    000002f4: 	cmpl	%edx, (%rax)
    000002f6: 	jge	.Ltmp551 # Offset: 758
    000002f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp552:
    00000300: 	addq	$0x4, %rax
    00000304: 	cmpl	(%rax), %edx
    00000306: 	jg	.Ltmp552 # Offset: 774
    00000308: 	cmpq	%rax, %rcx
    0000030b: 	jbe	.Ltmp550 # Offset: 779
.Ltmp551:
    00000311: 	movl	(%rax), %edi
    00000313: 	movl	%edi, (%rcx)
    00000315: 	movl	%esi, (%rax)
.Ltmp549:
    00000317: 	movq	%rcx, %rbp
    0000031a: 	jmp	.Ltmp553 # Offset: 794
.Ltmp532:
    0000031c: 	movq	%rbp, %rax
    0000031f: 	subq	%r12, %rax
    00000322: 	cmpq	$0x4, %rax
    00000326: 	jle	.Ltmp554 # Offset: 806
    00000328: 	movl	(%r12), %edx
    0000032c: 	movq	%rbp, %r13
    0000032f: 	movq	%r12, %rax
    00000332: 	nopw	(%rax,%rax) # Size: 6
.Ltmp559:
    00000338: 	movl	-0x4(%r13), %esi
    0000033c: 	leaq	-0x4(%r13), %rcx
    00000340: 	cmpl	%esi, %edx
    00000342: 	jl	.Ltmp555 # Offset: 834
    00000344: 	cmpq	%rax, %rcx
    00000347: 	jbe	.Ltmp556 # Offset: 839
    00000349: 	cmpl	%edx, (%rax)
    0000034b: 	jge	.Ltmp557 # Offset: 843
    0000034d: 	nopl	(%rax) # Size: 3
.Ltmp558:
    00000350: 	addq	$0x4, %rax
    00000354: 	cmpl	(%rax), %edx
    00000356: 	jg	.Ltmp558 # Offset: 854
    00000358: 	cmpq	%rax, %rcx
    0000035b: 	jbe	.Ltmp556 # Offset: 859
.Ltmp557:
    0000035d: 	movl	(%rax), %edi
    0000035f: 	movl	%edi, (%rcx)
    00000361: 	movl	%esi, (%rax)
.Ltmp555:
    00000363: 	movq	%rcx, %r13
    00000366: 	jmp	.Ltmp559 # Offset: 870
.Ltmp556:
    00000368: 	movq	%r13, %rax
    0000036b: 	subq	%r12, %rax
    0000036e: 	cmpq	$0x4, %rax
    00000372: 	jle	.Ltmp560 # Offset: 882
    00000374: 	movq	%r13, %rsi
    00000377: 	movq	%r12, %rdi
    0000037a: 	callq	"_ZN9benchmark9quicksortIP9TypeClassIiEEEvT_S4_.part.0/1" # Offset: 890
.Ltmp560:
    0000037f: 	movq	%rbp, %rax
    00000382: 	subq	%r13, %rax
    00000385: 	cmpq	$0x4, %rax
    00000389: 	jle	.Ltmp554 # Offset: 905
    0000038b: 	movq	%rbp, %rsi
    0000038e: 	movq	%r13, %rdi
    00000391: 	callq	"_ZN9benchmark9quicksortIP9TypeClassIiEEEvT_S4_.part.0/1" # Offset: 913
.Ltmp554:
    00000396: 	movq	%rbx, %rax
    00000399: 	subq	%rbp, %rax
    0000039c: 	cmpq	$0x4, %rax
    000003a0: 	jle	.Ltmp513 # Offset: 928
    000003a6: 	movl	(%rbp), %edx
    000003a9: 	movq	%rbx, %r12
    000003ac: 	movq	%rbp, %rax
    000003af: 	nop # Size: 1
.Ltmp565:
    000003b0: 	movl	-0x4(%r12), %esi
    000003b5: 	leaq	-0x4(%r12), %rcx
    000003ba: 	cmpl	%esi, %edx
    000003bc: 	jl	.Ltmp561 # Offset: 956
    000003be: 	cmpq	%rax, %rcx
    000003c1: 	jbe	.Ltmp562 # Offset: 961
    000003c7: 	cmpl	(%rax), %edx
    000003c9: 	jle	.Ltmp563 # Offset: 969
    000003cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp564:
    000003d0: 	addq	$0x4, %rax
    000003d4: 	cmpl	(%rax), %edx
    000003d6: 	jg	.Ltmp564 # Offset: 982
    000003d8: 	cmpq	%rax, %rcx
    000003db: 	jbe	.Ltmp562 # Offset: 987
.Ltmp563:
    000003e1: 	movl	(%rax), %edi
    000003e3: 	movl	%edi, (%rcx)
    000003e5: 	movl	%esi, (%rax)
.Ltmp561:
    000003e7: 	movq	%rcx, %r12
    000003ea: 	jmp	.Ltmp565 # Offset: 1002
.Ltmp527:
    000003ec: 	movq	%r14, %rax
    000003ef: 	subq	%r12, %rax
    000003f2: 	cmpq	$0x4, %rax
    000003f6: 	jle	.Ltmp566 # Offset: 1014
    000003f8: 	movl	(%r12), %edx
    000003fc: 	movq	%r14, %r15
    000003ff: 	movq	%r12, %rax
    00000402: 	nopw	(%rax,%rax) # Size: 6
.Ltmp571:
    00000408: 	movl	-0x4(%r15), %esi
    0000040c: 	leaq	-0x4(%r15), %rcx
    00000410: 	cmpl	%esi, %edx
    00000412: 	jl	.Ltmp567 # Offset: 1042
    00000414: 	cmpq	%rax, %rcx
    00000417: 	jbe	.Ltmp568 # Offset: 1047
    00000419: 	cmpl	(%rax), %edx
    0000041b: 	jle	.Ltmp569 # Offset: 1051
    0000041d: 	nopl	(%rax) # Size: 3
.Ltmp570:
    00000420: 	addq	$0x4, %rax
    00000424: 	cmpl	(%rax), %edx
    00000426: 	jg	.Ltmp570 # Offset: 1062
    00000428: 	cmpq	%rax, %rcx
    0000042b: 	jbe	.Ltmp568 # Offset: 1067
.Ltmp569:
    0000042d: 	movl	(%rax), %edi
    0000042f: 	movl	%edi, (%rcx)
    00000431: 	movl	%esi, (%rax)
.Ltmp567:
    00000433: 	movq	%rcx, %r15
    00000436: 	jmp	.Ltmp571 # Offset: 1078
.Ltmp568:
    00000438: 	movq	%r15, %rax
    0000043b: 	subq	%r12, %rax
    0000043e: 	cmpq	$0x4, %rax
    00000442: 	jle	.Ltmp572 # Offset: 1090
    00000444: 	movq	%r15, %rsi
    00000447: 	movq	%r12, %rdi
    0000044a: 	callq	"_ZN9benchmark9quicksortIP9TypeClassIiEEEvT_S4_.part.0/1" # Offset: 1098
.Ltmp572:
    0000044f: 	movq	%r14, %rax
    00000452: 	subq	%r15, %rax
    00000455: 	cmpq	$0x4, %rax
    00000459: 	jle	.Ltmp566 # Offset: 1113
    0000045b: 	movq	%r14, %rsi
    0000045e: 	movq	%r15, %rdi
    00000461: 	callq	"_ZN9benchmark9quicksortIP9TypeClassIiEEEvT_S4_.part.0/1" # Offset: 1121
.Ltmp566:
    00000466: 	movq	%r13, %rax
    00000469: 	subq	%r14, %rax
    0000046c: 	cmpq	$0x4, %rax
    00000470: 	jle	.Ltmp573 # Offset: 1136
    00000476: 	movl	(%r14), %edx
    00000479: 	movq	%r13, %r12
    0000047c: 	movq	%r14, %rax
    0000047f: 	nop # Size: 1
.Ltmp578:
    00000480: 	movl	-0x4(%r12), %esi
    00000485: 	leaq	-0x4(%r12), %rcx
    0000048a: 	cmpl	%esi, %edx
    0000048c: 	jl	.Ltmp574 # Offset: 1164
    0000048e: 	cmpq	%rax, %rcx
    00000491: 	jbe	.Ltmp575 # Offset: 1169
    00000497: 	cmpl	(%rax), %edx
    00000499: 	jle	.Ltmp576 # Offset: 1177
    0000049b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp577:
    000004a0: 	addq	$0x4, %rax
    000004a4: 	cmpl	(%rax), %edx
    000004a6: 	jg	.Ltmp577 # Offset: 1190
    000004a8: 	cmpq	%rax, %rcx
    000004ab: 	jbe	.Ltmp575 # Offset: 1195
.Ltmp576:
    000004b1: 	movl	(%rax), %edi
    000004b3: 	movl	%edi, (%rcx)
    000004b5: 	movl	%esi, (%rax)
.Ltmp574:
    000004b7: 	movq	%rcx, %r12
    000004ba: 	jmp	.Ltmp578 # Offset: 1210
.Ltmp522:
    000004bc: 	movq	%r12, %rax
    000004bf: 	subq	%r13, %rax
    000004c2: 	cmpq	$0x4, %rax
    000004c6: 	jle	.Ltmp579 # Offset: 1222
    000004c8: 	movl	(%r13), %edx
    000004cc: 	movq	%r12, %r14
    000004cf: 	movq	%r13, %rax
    000004d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp584:
    000004d8: 	movl	-0x4(%r14), %esi
    000004dc: 	leaq	-0x4(%r14), %rcx
    000004e0: 	cmpl	%esi, %edx
    000004e2: 	jl	.Ltmp580 # Offset: 1250
    000004e4: 	cmpq	%rax, %rcx
    000004e7: 	jbe	.Ltmp581 # Offset: 1255
    000004e9: 	cmpl	(%rax), %edx
    000004eb: 	jle	.Ltmp582 # Offset: 1259
    000004ed: 	nopl	(%rax) # Size: 3
.Ltmp583:
    000004f0: 	addq	$0x4, %rax
    000004f4: 	cmpl	(%rax), %edx
    000004f6: 	jg	.Ltmp583 # Offset: 1270
    000004f8: 	cmpq	%rax, %rcx
    000004fb: 	jbe	.Ltmp581 # Offset: 1275
.Ltmp582:
    000004fd: 	movl	(%rax), %edi
    000004ff: 	movl	%edi, (%rcx)
    00000501: 	movl	%esi, (%rax)
.Ltmp580:
    00000503: 	movq	%rcx, %r14
    00000506: 	jmp	.Ltmp584 # Offset: 1286
.Ltmp581:
    00000508: 	movq	%r14, %rax
    0000050b: 	subq	%r13, %rax
    0000050e: 	cmpq	$0x4, %rax
    00000512: 	jle	.Ltmp585 # Offset: 1298
    00000514: 	movq	%r14, %rsi
    00000517: 	movq	%r13, %rdi
    0000051a: 	callq	"_ZN9benchmark9quicksortIP9TypeClassIiEEEvT_S4_.part.0/1" # Offset: 1306
.Ltmp585:
    0000051f: 	movq	%r12, %rax
    00000522: 	subq	%r14, %rax
    00000525: 	cmpq	$0x4, %rax
    00000529: 	jle	.Ltmp579 # Offset: 1321
    0000052b: 	movq	%r12, %rsi
    0000052e: 	movq	%r14, %rdi
    00000531: 	callq	"_ZN9benchmark9quicksortIP9TypeClassIiEEEvT_S4_.part.0/1" # Offset: 1329
.Ltmp579:
    00000536: 	movq	%rbp, %rax
    00000539: 	subq	%r12, %rax
    0000053c: 	cmpq	$0x4, %rax
    00000540: 	jle	.Ltmp505 # Offset: 1344
    00000546: 	movl	(%r12), %edx
    0000054a: 	movq	%rbp, %r13
    0000054d: 	movq	%r12, %rax
.Ltmp590:
    00000550: 	movl	-0x4(%r13), %esi
    00000554: 	leaq	-0x4(%r13), %rcx
    00000558: 	cmpl	%esi, %edx
    0000055a: 	jl	.Ltmp586 # Offset: 1370
    0000055c: 	cmpq	%rax, %rcx
    0000055f: 	jbe	.Ltmp587 # Offset: 1375
    00000565: 	cmpl	(%rax), %edx
    00000567: 	jle	.Ltmp588 # Offset: 1383
    00000569: 	nopl	(%rax) # Size: 7
.Ltmp589:
    00000570: 	addq	$0x4, %rax
    00000574: 	cmpl	(%rax), %edx
    00000576: 	jg	.Ltmp589 # Offset: 1398
    00000578: 	cmpq	%rax, %rcx
    0000057b: 	jbe	.Ltmp587 # Offset: 1403
.Ltmp588:
    00000581: 	movl	(%rax), %edi
    00000583: 	movl	%edi, (%rcx)
    00000585: 	movl	%esi, (%rax)
.Ltmp586:
    00000587: 	movq	%rcx, %r13
    0000058a: 	jmp	.Ltmp590 # Offset: 1418
.Ltmp550:
    0000058c: 	movq	%rbp, %rax
    0000058f: 	subq	%r13, %rax
    00000592: 	cmpq	$0x4, %rax
    00000596: 	jle	.Ltmp591 # Offset: 1430
    00000598: 	movq	%rbp, %rsi
    0000059b: 	movq	%r13, %rdi
    0000059e: 	callq	"_ZN9benchmark9quicksortIP9TypeClassIiEEEvT_S4_.part.0/1" # Offset: 1438
.Ltmp591:
    000005a3: 	movq	%r12, %rax
    000005a6: 	subq	%rbp, %rax
    000005a9: 	cmpq	$0x4, %rax
    000005ad: 	jle	.Ltmp548 # Offset: 1453
    000005b3: 	movq	%r12, %rsi
    000005b6: 	movq	%rbp, %rdi
    000005b9: 	callq	"_ZN9benchmark9quicksortIP9TypeClassIiEEEvT_S4_.part.0/1" # Offset: 1465
    000005be: 	jmp	.Ltmp548 # Offset: 1470
.Ltmp562:
    000005c3: 	movq	%r12, %rax
    000005c6: 	subq	%rbp, %rax
    000005c9: 	cmpq	$0x4, %rax
    000005cd: 	jle	.Ltmp592 # Offset: 1485
    000005cf: 	movq	%r12, %rsi
    000005d2: 	movq	%rbp, %rdi
    000005d5: 	callq	"_ZN9benchmark9quicksortIP9TypeClassIiEEEvT_S4_.part.0/1" # Offset: 1493
.Ltmp592:
    000005da: 	movq	%rbx, %rax
    000005dd: 	subq	%r12, %rax
    000005e0: 	cmpq	$0x4, %rax
    000005e4: 	jg	.Ltmp593 # Offset: 1508
    000005ea: 	jmp	.Ltmp513 # Offset: 1514
.Ltmp575:
    000005ef: 	movq	%r12, %rax
    000005f2: 	subq	%r14, %rax
    000005f5: 	cmpq	$0x4, %rax
    000005f9: 	jle	.Ltmp594 # Offset: 1529
    000005fb: 	movq	%r12, %rsi
    000005fe: 	movq	%r14, %rdi
    00000601: 	callq	"_ZN9benchmark9quicksortIP9TypeClassIiEEEvT_S4_.part.0/1" # Offset: 1537
.Ltmp594:
    00000606: 	movq	%r13, %rax
    00000609: 	subq	%r12, %rax
    0000060c: 	cmpq	$0x4, %rax
    00000610: 	jle	.Ltmp573 # Offset: 1552
    00000616: 	movq	%r13, %rsi
    00000619: 	movq	%r12, %rdi
    0000061c: 	callq	"_ZN9benchmark9quicksortIP9TypeClassIiEEEvT_S4_.part.0/1" # Offset: 1564
    00000621: 	jmp	.Ltmp573 # Offset: 1569
.Ltmp587:
    00000626: 	movq	%r13, %rax
    00000629: 	subq	%r12, %rax
    0000062c: 	cmpq	$0x4, %rax
    00000630: 	jle	.Ltmp595 # Offset: 1584
    00000632: 	movq	%r13, %rsi
    00000635: 	movq	%r12, %rdi
    00000638: 	callq	"_ZN9benchmark9quicksortIP9TypeClassIiEEEvT_S4_.part.0/1" # Offset: 1592
.Ltmp595:
    0000063d: 	movq	%rbp, %rax
    00000640: 	subq	%r13, %rax
    00000643: 	cmpq	$0x4, %rax
    00000647: 	jle	.Ltmp505 # Offset: 1607
    0000064d: 	movq	%rbp, %rsi
    00000650: 	movq	%r13, %rdi
    00000653: 	callq	"_ZN9benchmark9quicksortIP9TypeClassIiEEEvT_S4_.part.0/1" # Offset: 1619
    00000658: 	jmp	.Ltmp505 # Offset: 1624
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIP9TypeClassIiEEEvT_S4_.part.0/1(*2)"

Binary Function "_ZN9benchmark9quicksortIP12DeepSubClassIdEEEvT_S4_.part.0/1(*2)" after disassembly {
  All names   : _ZN9benchmark9quicksortIP12DeepSubClassIdEEEvT_S4_.part.0/1
                _ZN9benchmark9quicksortIP12DeepSubClassIdEEEvT_S4_.part.0/stepanov_inherit.cpp/1
  Number      : 90
  State       : disassembled
  Address     : 0x5fa0
  Size        : 0x75d
  MaxSize     : 0x760
  Offset      : 0x5fa0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIP12DeepSubClassIdEEEvT_S4_.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB089:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	movq	%rdi, %r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rsi, %rbx
    00000010: 	subq	$0x8, %rsp
.Ltmp689:
    00000014: 	movsd	(%r13), %xmm0
    0000001a: 	movq	%rbx, %rbp
    0000001d: 	movq	%r13, %rax
.Ltmp600:
    00000020: 	movsd	-0x8(%rbp), %xmm1
    00000025: 	leaq	-0x8(%rbp), %rdx
    00000029: 	comisd	%xmm0, %xmm1
    0000002d: 	ja	.Ltmp596 # Offset: 45
    0000002f: 	cmpq	%rax, %rdx
    00000032: 	jbe	.Ltmp597 # Offset: 50
    00000034: 	comisd	(%rax), %xmm0
    00000038: 	jbe	.Ltmp598 # Offset: 56
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp599:
    00000040: 	addq	$0x8, %rax
    00000044: 	comisd	(%rax), %xmm0
    00000048: 	ja	.Ltmp599 # Offset: 72
    0000004a: 	cmpq	%rax, %rdx
    0000004d: 	jbe	.Ltmp597 # Offset: 77
.Ltmp598:
    0000004f: 	movsd	(%rax), %xmm2
    00000053: 	movsd	%xmm2, (%rdx)
    00000057: 	movsd	%xmm1, (%rax)
.Ltmp596:
    0000005b: 	movq	%rdx, %rbp
    0000005e: 	jmp	.Ltmp600 # Offset: 94
.Ltmp597:
    00000060: 	movq	%rbp, %rax
    00000063: 	subq	%r13, %rax
    00000066: 	cmpq	$0x8, %rax
    0000006a: 	jle	.Ltmp601 # Offset: 106
    0000006c: 	movsd	(%r13), %xmm0
    00000072: 	movq	%rbp, %r12
    00000075: 	movq	%r13, %rax
    00000078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp606:
    00000080: 	comisd	%xmm0, %xmm1
    00000084: 	leaq	-0x8(%r12), %rdx
    00000089: 	ja	.Ltmp602 # Offset: 137
    0000008b: 	cmpq	%rax, %rdx
    0000008e: 	jbe	.Ltmp603 # Offset: 142
    00000090: 	comisd	(%rax), %xmm0
    00000094: 	jbe	.Ltmp604 # Offset: 148
    00000096: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp605:
    000000a0: 	addq	$0x8, %rax
    000000a4: 	comisd	(%rax), %xmm0
    000000a8: 	ja	.Ltmp605 # Offset: 168
    000000aa: 	cmpq	%rax, %rdx
    000000ad: 	jbe	.Ltmp603 # Offset: 173
.Ltmp604:
    000000af: 	movsd	(%rax), %xmm2
    000000b3: 	movsd	%xmm2, (%rdx)
    000000b7: 	movsd	%xmm1, (%rax)
.Ltmp602:
    000000bb: 	movsd	-0x8(%rdx), %xmm1
    000000c0: 	movq	%rdx, %r12
    000000c3: 	jmp	.Ltmp606 # Offset: 195
.Ltmp603:
    000000c5: 	movq	%r12, %rax
    000000c8: 	subq	%r13, %rax
    000000cb: 	cmpq	$0x8, %rax
    000000cf: 	jg	.Ltmp607 # Offset: 207
.Ltmp669:
    000000d5: 	movq	%rbp, %rax
    000000d8: 	subq	%r12, %rax
    000000db: 	cmpq	$0x8, %rax
    000000df: 	jg	.Ltmp608 # Offset: 223
.Ltmp601:
    000000e5: 	movq	%rbx, %rax
    000000e8: 	subq	%rbp, %rax
    000000eb: 	cmpq	$0x8, %rax
    000000ef: 	jle	.Ltmp609 # Offset: 239
    000000f1: 	movsd	(%rbp), %xmm0
    000000f6: 	movq	%rbx, %r12
    000000f9: 	movq	%rbp, %rax
    000000fc: 	nopl	(%rax) # Size: 4
.Ltmp614:
    00000100: 	movsd	-0x8(%r12), %xmm1
    00000107: 	leaq	-0x8(%r12), %rdx
    0000010c: 	comisd	%xmm0, %xmm1
    00000110: 	ja	.Ltmp610 # Offset: 272
    00000112: 	cmpq	%rax, %rdx
    00000115: 	jbe	.Ltmp611 # Offset: 277
    00000117: 	comisd	(%rax), %xmm0
    0000011b: 	jbe	.Ltmp612 # Offset: 283
    0000011d: 	nopl	(%rax) # Size: 3
.Ltmp613:
    00000120: 	addq	$0x8, %rax
    00000124: 	comisd	(%rax), %xmm0
    00000128: 	ja	.Ltmp613 # Offset: 296
    0000012a: 	cmpq	%rax, %rdx
    0000012d: 	jbe	.Ltmp611 # Offset: 301
.Ltmp612:
    0000012f: 	movsd	(%rax), %xmm2
    00000133: 	movsd	%xmm2, (%rdx)
    00000137: 	movsd	%xmm1, (%rax)
.Ltmp610:
    0000013b: 	movq	%rdx, %r12
    0000013e: 	jmp	.Ltmp614 # Offset: 318
.Ltmp611:
    00000140: 	movq	%r12, %rax
    00000143: 	subq	%rbp, %rax
    00000146: 	cmpq	$0x8, %rax
    0000014a: 	jg	.Ltmp615 # Offset: 330
.Ltmp644:
    00000150: 	movq	%rbx, %rax
    00000153: 	subq	%r12, %rax
    00000156: 	cmpq	$0x8, %rax
    0000015a: 	jg	.Ltmp616 # Offset: 346
.Ltmp609:
    00000160: 	addq	$0x8, %rsp
    00000164: 	popq	%rbx
    00000165: 	popq	%rbp
    00000166: 	popq	%r12
    00000168: 	popq	%r13
    0000016a: 	popq	%r14
    0000016c: 	popq	%r15
    0000016e: 	retq # Offset: 366
.Ltmp608:
    0000016f: 	movsd	(%r12), %xmm0
    00000175: 	movq	%rbp, %r13
    00000178: 	movq	%r12, %rax
    0000017b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp621:
    00000180: 	movsd	-0x8(%r13), %xmm1
    00000186: 	leaq	-0x8(%r13), %rdx
    0000018a: 	comisd	%xmm0, %xmm1
    0000018e: 	ja	.Ltmp617 # Offset: 398
    00000190: 	cmpq	%rax, %rdx
    00000193: 	jbe	.Ltmp618 # Offset: 403
    00000199: 	comisd	(%rax), %xmm0
    0000019d: 	jbe	.Ltmp619 # Offset: 413
    0000019f: 	nop # Size: 1
.Ltmp620:
    000001a0: 	addq	$0x8, %rax
    000001a4: 	comisd	(%rax), %xmm0
    000001a8: 	ja	.Ltmp620 # Offset: 424
    000001aa: 	cmpq	%rax, %rdx
    000001ad: 	jbe	.Ltmp618 # Offset: 429
.Ltmp619:
    000001b3: 	movsd	(%rax), %xmm2
    000001b7: 	movsd	%xmm2, (%rdx)
    000001bb: 	movsd	%xmm1, (%rax)
.Ltmp617:
    000001bf: 	movq	%rdx, %r13
    000001c2: 	jmp	.Ltmp621 # Offset: 450
.Ltmp607:
    000001c4: 	movsd	(%r13), %xmm0
    000001ca: 	movq	%r12, %r14
    000001cd: 	movq	%r13, %rax
.Ltmp626:
    000001d0: 	comisd	%xmm0, %xmm1
    000001d4: 	leaq	-0x8(%r14), %rdx
    000001d8: 	ja	.Ltmp622 # Offset: 472
    000001da: 	cmpq	%rax, %rdx
    000001dd: 	jbe	.Ltmp623 # Offset: 477
    000001e3: 	comisd	(%rax), %xmm0
    000001e7: 	jbe	.Ltmp624 # Offset: 487
    000001e9: 	nopl	(%rax) # Size: 7
.Ltmp625:
    000001f0: 	addq	$0x8, %rax
    000001f4: 	comisd	(%rax), %xmm0
    000001f8: 	ja	.Ltmp625 # Offset: 504
    000001fa: 	cmpq	%rax, %rdx
    000001fd: 	jbe	.Ltmp623 # Offset: 509
.Ltmp624:
    00000203: 	movsd	(%rax), %xmm2
    00000207: 	movsd	%xmm2, (%rdx)
    0000020b: 	movsd	%xmm1, (%rax)
.Ltmp622:
    0000020f: 	movsd	-0x8(%rdx), %xmm1
    00000214: 	movq	%rdx, %r14
    00000217: 	jmp	.Ltmp626 # Offset: 535
.Ltmp616:
    00000219: 	movsd	(%r12), %xmm0
    0000021f: 	movq	%rbx, %rbp
    00000222: 	movq	%r12, %rax
    00000225: 	nopl	(%rax) # Size: 3
.Ltmp631:
    00000228: 	movsd	-0x8(%rbp), %xmm1
    0000022d: 	leaq	-0x8(%rbp), %rdx
    00000231: 	comisd	%xmm0, %xmm1
    00000235: 	ja	.Ltmp627 # Offset: 565
    00000237: 	cmpq	%rax, %rdx
    0000023a: 	jbe	.Ltmp628 # Offset: 570
    00000240: 	comisd	(%rax), %xmm0
    00000244: 	jbe	.Ltmp629 # Offset: 580
    00000246: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp630:
    00000250: 	addq	$0x8, %rax
    00000254: 	comisd	(%rax), %xmm0
    00000258: 	ja	.Ltmp630 # Offset: 600
    0000025a: 	cmpq	%rax, %rdx
    0000025d: 	jbe	.Ltmp628 # Offset: 605
.Ltmp629:
    00000263: 	movsd	(%rax), %xmm2
    00000267: 	movsd	%xmm2, (%rdx)
    0000026b: 	movsd	%xmm1, (%rax)
.Ltmp627:
    0000026f: 	movq	%rdx, %rbp
    00000272: 	jmp	.Ltmp631 # Offset: 626
.Ltmp615:
    00000274: 	movsd	(%rbp), %xmm0
    00000279: 	movq	%r12, %r13
    0000027c: 	movq	%rbp, %rax
    0000027f: 	nop # Size: 1
.Ltmp636:
    00000280: 	comisd	%xmm0, %xmm1
    00000284: 	leaq	-0x8(%r13), %rdx
    00000288: 	ja	.Ltmp632 # Offset: 648
    0000028a: 	cmpq	%rax, %rdx
    0000028d: 	jbe	.Ltmp633 # Offset: 653
    0000028f: 	comisd	(%rax), %xmm0
    00000293: 	jbe	.Ltmp634 # Offset: 659
    00000295: 	nopl	(%rax) # Size: 3
.Ltmp635:
    00000298: 	addq	$0x8, %rax
    0000029c: 	comisd	(%rax), %xmm0
    000002a0: 	ja	.Ltmp635 # Offset: 672
    000002a2: 	cmpq	%rax, %rdx
    000002a5: 	jbe	.Ltmp633 # Offset: 677
.Ltmp634:
    000002a7: 	movsd	(%rax), %xmm2
    000002ab: 	movsd	%xmm2, (%rdx)
    000002af: 	movsd	%xmm1, (%rax)
.Ltmp632:
    000002b3: 	movsd	-0x8(%rdx), %xmm1
    000002b8: 	movq	%rdx, %r13
    000002bb: 	jmp	.Ltmp636 # Offset: 699
.Ltmp633:
    000002bd: 	movq	%r13, %rax
    000002c0: 	subq	%rbp, %rax
    000002c3: 	cmpq	$0x8, %rax
    000002c7: 	jle	.Ltmp637 # Offset: 711
    000002c9: 	movsd	(%rbp), %xmm0
    000002ce: 	movq	%r13, %r14
    000002d1: 	movq	%rbp, %rax
    000002d4: 	nopl	(%rax) # Size: 4
.Ltmp642:
    000002d8: 	movsd	-0x8(%r14), %xmm1
    000002de: 	leaq	-0x8(%r14), %rdx
    000002e2: 	comisd	%xmm0, %xmm1
    000002e6: 	ja	.Ltmp638 # Offset: 742
    000002e8: 	cmpq	%rax, %rdx
    000002eb: 	jbe	.Ltmp639 # Offset: 747
    000002ed: 	comisd	(%rax), %xmm0
    000002f1: 	jbe	.Ltmp640 # Offset: 753
    000002f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp641:
    000002f8: 	addq	$0x8, %rax
    000002fc: 	comisd	(%rax), %xmm0
    00000300: 	ja	.Ltmp641 # Offset: 768
    00000302: 	cmpq	%rax, %rdx
    00000305: 	jbe	.Ltmp639 # Offset: 773
.Ltmp640:
    00000307: 	movsd	(%rax), %xmm2
    0000030b: 	movsd	%xmm2, (%rdx)
    0000030f: 	movsd	%xmm1, (%rax)
.Ltmp638:
    00000313: 	movq	%rdx, %r14
    00000316: 	jmp	.Ltmp642 # Offset: 790
.Ltmp639:
    00000318: 	movq	%r14, %rax
    0000031b: 	subq	%rbp, %rax
    0000031e: 	cmpq	$0x8, %rax
    00000322: 	jle	.Ltmp643 # Offset: 802
    00000324: 	movq	%r14, %rsi
    00000327: 	movq	%rbp, %rdi
    0000032a: 	callq	"_ZN9benchmark9quicksortIP12DeepSubClassIdEEEvT_S4_.part.0/1" # Offset: 810
.Ltmp643:
    0000032f: 	movq	%r13, %rax
    00000332: 	subq	%r14, %rax
    00000335: 	cmpq	$0x8, %rax
    00000339: 	jle	.Ltmp637 # Offset: 825
    0000033b: 	movq	%r13, %rsi
    0000033e: 	movq	%r14, %rdi
    00000341: 	callq	"_ZN9benchmark9quicksortIP12DeepSubClassIdEEEvT_S4_.part.0/1" # Offset: 833
.Ltmp637:
    00000346: 	movq	%r12, %rax
    00000349: 	subq	%r13, %rax
    0000034c: 	cmpq	$0x8, %rax
    00000350: 	jle	.Ltmp644 # Offset: 848
    00000356: 	movsd	(%r13), %xmm0
    0000035c: 	movq	%r12, %rbp
    0000035f: 	movq	%r13, %rax
    00000362: 	nopw	(%rax,%rax) # Size: 6
.Ltmp649:
    00000368: 	movsd	-0x8(%rbp), %xmm1
    0000036d: 	leaq	-0x8(%rbp), %rdx
    00000371: 	comisd	%xmm0, %xmm1
    00000375: 	ja	.Ltmp645 # Offset: 885
    00000377: 	cmpq	%rax, %rdx
    0000037a: 	jbe	.Ltmp646 # Offset: 890
    00000380: 	comisd	(%rax), %xmm0
    00000384: 	jbe	.Ltmp647 # Offset: 900
    00000386: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp648:
    00000390: 	addq	$0x8, %rax
    00000394: 	comisd	(%rax), %xmm0
    00000398: 	ja	.Ltmp648 # Offset: 920
    0000039a: 	cmpq	%rax, %rdx
    0000039d: 	jbe	.Ltmp646 # Offset: 925
.Ltmp647:
    000003a3: 	movsd	(%rax), %xmm2
    000003a7: 	movsd	%xmm2, (%rdx)
    000003ab: 	movsd	%xmm1, (%rax)
.Ltmp645:
    000003af: 	movq	%rdx, %rbp
    000003b2: 	jmp	.Ltmp649 # Offset: 946
.Ltmp628:
    000003b4: 	movq	%rbp, %rax
    000003b7: 	subq	%r12, %rax
    000003ba: 	cmpq	$0x8, %rax
    000003be: 	jle	.Ltmp650 # Offset: 958
    000003c0: 	movsd	(%r12), %xmm0
    000003c6: 	movq	%rbp, %r13
    000003c9: 	movq	%r12, %rax
    000003cc: 	nopl	(%rax) # Size: 4
.Ltmp655:
    000003d0: 	movsd	-0x8(%r13), %xmm1
    000003d6: 	leaq	-0x8(%r13), %rdx
    000003da: 	comisd	%xmm0, %xmm1
    000003de: 	ja	.Ltmp651 # Offset: 990
    000003e0: 	cmpq	%rax, %rdx
    000003e3: 	jbe	.Ltmp652 # Offset: 995
    000003e5: 	comisd	(%rax), %xmm0
    000003e9: 	jbe	.Ltmp653 # Offset: 1001
    000003eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp654:
    000003f0: 	addq	$0x8, %rax
    000003f4: 	comisd	(%rax), %xmm0
    000003f8: 	ja	.Ltmp654 # Offset: 1016
    000003fa: 	cmpq	%rax, %rdx
    000003fd: 	jbe	.Ltmp652 # Offset: 1021
.Ltmp653:
    000003ff: 	movsd	(%rax), %xmm2
    00000403: 	movsd	%xmm2, (%rdx)
    00000407: 	movsd	%xmm1, (%rax)
.Ltmp651:
    0000040b: 	movq	%rdx, %r13
    0000040e: 	jmp	.Ltmp655 # Offset: 1038
.Ltmp652:
    00000410: 	movq	%r13, %rax
    00000413: 	subq	%r12, %rax
    00000416: 	cmpq	$0x8, %rax
    0000041a: 	jle	.Ltmp656 # Offset: 1050
    0000041c: 	movq	%r13, %rsi
    0000041f: 	movq	%r12, %rdi
    00000422: 	callq	"_ZN9benchmark9quicksortIP12DeepSubClassIdEEEvT_S4_.part.0/1" # Offset: 1058
.Ltmp656:
    00000427: 	movq	%rbp, %rax
    0000042a: 	subq	%r13, %rax
    0000042d: 	cmpq	$0x8, %rax
    00000431: 	jle	.Ltmp650 # Offset: 1073
    00000433: 	movq	%rbp, %rsi
    00000436: 	movq	%r13, %rdi
    00000439: 	callq	"_ZN9benchmark9quicksortIP12DeepSubClassIdEEEvT_S4_.part.0/1" # Offset: 1081
.Ltmp650:
    0000043e: 	movq	%rbx, %rax
    00000441: 	subq	%rbp, %rax
    00000444: 	cmpq	$0x8, %rax
    00000448: 	jle	.Ltmp609 # Offset: 1096
    0000044e: 	movsd	(%rbp), %xmm0
    00000453: 	movq	%rbx, %r13
    00000456: 	movq	%rbp, %rax
    00000459: 	nopl	(%rax) # Size: 7
.Ltmp661:
    00000460: 	movsd	-0x8(%r13), %xmm1
    00000466: 	leaq	-0x8(%r13), %rdx
    0000046a: 	comisd	%xmm0, %xmm1
    0000046e: 	ja	.Ltmp657 # Offset: 1134
    00000470: 	cmpq	%rax, %rdx
    00000473: 	jbe	.Ltmp658 # Offset: 1139
    00000479: 	comisd	(%rax), %xmm0
    0000047d: 	jbe	.Ltmp659 # Offset: 1149
    0000047f: 	nop # Size: 1
.Ltmp660:
    00000480: 	addq	$0x8, %rax
    00000484: 	comisd	(%rax), %xmm0
    00000488: 	ja	.Ltmp660 # Offset: 1160
    0000048a: 	cmpq	%rax, %rdx
    0000048d: 	jbe	.Ltmp658 # Offset: 1165
.Ltmp659:
    00000493: 	movsd	(%rax), %xmm2
    00000497: 	movsd	%xmm2, (%rdx)
    0000049b: 	movsd	%xmm1, (%rax)
.Ltmp657:
    0000049f: 	movq	%rdx, %r13
    000004a2: 	jmp	.Ltmp661 # Offset: 1186
.Ltmp623:
    000004a4: 	movq	%r14, %rax
    000004a7: 	subq	%r13, %rax
    000004aa: 	cmpq	$0x8, %rax
    000004ae: 	jle	.Ltmp662 # Offset: 1198
    000004b0: 	movsd	(%r13), %xmm0
    000004b6: 	movq	%r14, %r15
    000004b9: 	movq	%r13, %rax
    000004bc: 	nopl	(%rax) # Size: 4
.Ltmp667:
    000004c0: 	movsd	-0x8(%r15), %xmm1
    000004c6: 	leaq	-0x8(%r15), %rdx
    000004ca: 	comisd	%xmm0, %xmm1
    000004ce: 	ja	.Ltmp663 # Offset: 1230
    000004d0: 	cmpq	%rax, %rdx
    000004d3: 	jbe	.Ltmp664 # Offset: 1235
    000004d5: 	comisd	(%rax), %xmm0
    000004d9: 	jbe	.Ltmp665 # Offset: 1241
    000004db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp666:
    000004e0: 	addq	$0x8, %rax
    000004e4: 	comisd	(%rax), %xmm0
    000004e8: 	ja	.Ltmp666 # Offset: 1256
    000004ea: 	cmpq	%rax, %rdx
    000004ed: 	jbe	.Ltmp664 # Offset: 1261
.Ltmp665:
    000004ef: 	movsd	(%rax), %xmm2
    000004f3: 	movsd	%xmm2, (%rdx)
    000004f7: 	movsd	%xmm1, (%rax)
.Ltmp663:
    000004fb: 	movq	%rdx, %r15
    000004fe: 	jmp	.Ltmp667 # Offset: 1278
.Ltmp664:
    00000500: 	movq	%r15, %rax
    00000503: 	subq	%r13, %rax
    00000506: 	cmpq	$0x8, %rax
    0000050a: 	jle	.Ltmp668 # Offset: 1290
    0000050c: 	movq	%r15, %rsi
    0000050f: 	movq	%r13, %rdi
    00000512: 	callq	"_ZN9benchmark9quicksortIP12DeepSubClassIdEEEvT_S4_.part.0/1" # Offset: 1298
.Ltmp668:
    00000517: 	movq	%r14, %rax
    0000051a: 	subq	%r15, %rax
    0000051d: 	cmpq	$0x8, %rax
    00000521: 	jle	.Ltmp662 # Offset: 1313
    00000523: 	movq	%r14, %rsi
    00000526: 	movq	%r15, %rdi
    00000529: 	callq	"_ZN9benchmark9quicksortIP12DeepSubClassIdEEEvT_S4_.part.0/1" # Offset: 1321
.Ltmp662:
    0000052e: 	movq	%r12, %rax
    00000531: 	subq	%r14, %rax
    00000534: 	cmpq	$0x8, %rax
    00000538: 	jle	.Ltmp669 # Offset: 1336
    0000053e: 	movsd	(%r14), %xmm0
    00000543: 	movq	%r12, %r13
    00000546: 	movq	%r14, %rax
    00000549: 	nopl	(%rax) # Size: 7
.Ltmp674:
    00000550: 	movsd	-0x8(%r13), %xmm1
    00000556: 	leaq	-0x8(%r13), %rdx
    0000055a: 	comisd	%xmm0, %xmm1
    0000055e: 	ja	.Ltmp670 # Offset: 1374
    00000560: 	cmpq	%rax, %rdx
    00000563: 	jbe	.Ltmp671 # Offset: 1379
    00000569: 	comisd	(%rax), %xmm0
    0000056d: 	jbe	.Ltmp672 # Offset: 1389
    0000056f: 	nop # Size: 1
.Ltmp673:
    00000570: 	addq	$0x8, %rax
    00000574: 	comisd	(%rax), %xmm0
    00000578: 	ja	.Ltmp673 # Offset: 1400
    0000057a: 	cmpq	%rax, %rdx
    0000057d: 	jbe	.Ltmp671 # Offset: 1405
.Ltmp672:
    00000583: 	movsd	(%rax), %xmm2
    00000587: 	movsd	%xmm2, (%rdx)
    0000058b: 	movsd	%xmm1, (%rax)
.Ltmp670:
    0000058f: 	movq	%rdx, %r13
    00000592: 	jmp	.Ltmp674 # Offset: 1426
.Ltmp618:
    00000594: 	movq	%r13, %rax
    00000597: 	subq	%r12, %rax
    0000059a: 	cmpq	$0x8, %rax
    0000059e: 	jle	.Ltmp675 # Offset: 1438
    000005a0: 	movsd	(%r12), %xmm0
    000005a6: 	movq	%r13, %r14
    000005a9: 	movq	%r12, %rax
    000005ac: 	nopl	(%rax) # Size: 4
.Ltmp680:
    000005b0: 	movsd	-0x8(%r14), %xmm1
    000005b6: 	leaq	-0x8(%r14), %rdx
    000005ba: 	comisd	%xmm0, %xmm1
    000005be: 	ja	.Ltmp676 # Offset: 1470
    000005c0: 	cmpq	%rax, %rdx
    000005c3: 	jbe	.Ltmp677 # Offset: 1475
    000005c5: 	comisd	(%rax), %xmm0
    000005c9: 	jbe	.Ltmp678 # Offset: 1481
    000005cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp679:
    000005d0: 	addq	$0x8, %rax
    000005d4: 	comisd	(%rax), %xmm0
    000005d8: 	ja	.Ltmp679 # Offset: 1496
    000005da: 	cmpq	%rax, %rdx
    000005dd: 	jbe	.Ltmp677 # Offset: 1501
.Ltmp678:
    000005df: 	movsd	(%rax), %xmm2
    000005e3: 	movsd	%xmm2, (%rdx)
    000005e7: 	movsd	%xmm1, (%rax)
.Ltmp676:
    000005eb: 	movq	%rdx, %r14
    000005ee: 	jmp	.Ltmp680 # Offset: 1518
.Ltmp677:
    000005f0: 	movq	%r14, %rax
    000005f3: 	subq	%r12, %rax
    000005f6: 	cmpq	$0x8, %rax
    000005fa: 	jle	.Ltmp681 # Offset: 1530
    000005fc: 	movq	%r14, %rsi
    000005ff: 	movq	%r12, %rdi
    00000602: 	callq	"_ZN9benchmark9quicksortIP12DeepSubClassIdEEEvT_S4_.part.0/1" # Offset: 1538
.Ltmp681:
    00000607: 	movq	%r13, %rax
    0000060a: 	subq	%r14, %rax
    0000060d: 	cmpq	$0x8, %rax
    00000611: 	jle	.Ltmp675 # Offset: 1553
    00000613: 	movq	%r13, %rsi
    00000616: 	movq	%r14, %rdi
    00000619: 	callq	"_ZN9benchmark9quicksortIP12DeepSubClassIdEEEvT_S4_.part.0/1" # Offset: 1561
.Ltmp675:
    0000061e: 	movq	%rbp, %rax
    00000621: 	subq	%r13, %rax
    00000624: 	cmpq	$0x8, %rax
    00000628: 	jle	.Ltmp601 # Offset: 1576
    0000062e: 	movsd	(%r13), %xmm0
    00000634: 	movq	%rbp, %r12
    00000637: 	movq	%r13, %rax
    0000063a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp686:
    00000640: 	movsd	-0x8(%r12), %xmm1
    00000647: 	leaq	-0x8(%r12), %rdx
    0000064c: 	comisd	%xmm0, %xmm1
    00000650: 	ja	.Ltmp682 # Offset: 1616
    00000652: 	cmpq	%rax, %rdx
    00000655: 	jbe	.Ltmp683 # Offset: 1621
    0000065b: 	comisd	(%rax), %xmm0
    0000065f: 	jbe	.Ltmp684 # Offset: 1631
    00000661: 	nopl	(%rax) # Size: 7
.Ltmp685:
    00000668: 	addq	$0x8, %rax
    0000066c: 	comisd	(%rax), %xmm0
    00000670: 	ja	.Ltmp685 # Offset: 1648
    00000672: 	cmpq	%rax, %rdx
    00000675: 	jbe	.Ltmp683 # Offset: 1653
.Ltmp684:
    0000067b: 	movsd	(%rax), %xmm2
    0000067f: 	movsd	%xmm2, (%rdx)
    00000683: 	movsd	%xmm1, (%rax)
.Ltmp682:
    00000687: 	movq	%rdx, %r12
    0000068a: 	jmp	.Ltmp686 # Offset: 1674
.Ltmp646:
    0000068c: 	movq	%rbp, %rax
    0000068f: 	subq	%r13, %rax
    00000692: 	cmpq	$0x8, %rax
    00000696: 	jle	.Ltmp687 # Offset: 1686
    00000698: 	movq	%rbp, %rsi
    0000069b: 	movq	%r13, %rdi
    0000069e: 	callq	"_ZN9benchmark9quicksortIP12DeepSubClassIdEEEvT_S4_.part.0/1" # Offset: 1694
.Ltmp687:
    000006a3: 	movq	%r12, %rax
    000006a6: 	subq	%rbp, %rax
    000006a9: 	cmpq	$0x8, %rax
    000006ad: 	jle	.Ltmp644 # Offset: 1709
    000006b3: 	movq	%r12, %rsi
    000006b6: 	movq	%rbp, %rdi
    000006b9: 	callq	"_ZN9benchmark9quicksortIP12DeepSubClassIdEEEvT_S4_.part.0/1" # Offset: 1721
    000006be: 	jmp	.Ltmp644 # Offset: 1726
.Ltmp658:
    000006c3: 	movq	%r13, %rax
    000006c6: 	subq	%rbp, %rax
    000006c9: 	cmpq	$0x8, %rax
    000006cd: 	jle	.Ltmp688 # Offset: 1741
    000006cf: 	movq	%r13, %rsi
    000006d2: 	movq	%rbp, %rdi
    000006d5: 	callq	"_ZN9benchmark9quicksortIP12DeepSubClassIdEEEvT_S4_.part.0/1" # Offset: 1749
.Ltmp688:
    000006da: 	movq	%rbx, %rax
    000006dd: 	subq	%r13, %rax
    000006e0: 	cmpq	$0x8, %rax
    000006e4: 	jg	.Ltmp689 # Offset: 1764
    000006ea: 	jmp	.Ltmp609 # Offset: 1770
.Ltmp671:
    000006ef: 	movq	%r13, %rax
    000006f2: 	subq	%r14, %rax
    000006f5: 	cmpq	$0x8, %rax
    000006f9: 	jle	.Ltmp690 # Offset: 1785
    000006fb: 	movq	%r13, %rsi
    000006fe: 	movq	%r14, %rdi
    00000701: 	callq	"_ZN9benchmark9quicksortIP12DeepSubClassIdEEEvT_S4_.part.0/1" # Offset: 1793
.Ltmp690:
    00000706: 	movq	%r12, %rax
    00000709: 	subq	%r13, %rax
    0000070c: 	cmpq	$0x8, %rax
    00000710: 	jle	.Ltmp669 # Offset: 1808
    00000716: 	movq	%r12, %rsi
    00000719: 	movq	%r13, %rdi
    0000071c: 	callq	"_ZN9benchmark9quicksortIP12DeepSubClassIdEEEvT_S4_.part.0/1" # Offset: 1820
    00000721: 	jmp	.Ltmp669 # Offset: 1825
.Ltmp683:
    00000726: 	movq	%r12, %rax
    00000729: 	subq	%r13, %rax
    0000072c: 	cmpq	$0x8, %rax
    00000730: 	jle	.Ltmp691 # Offset: 1840
    00000732: 	movq	%r12, %rsi
    00000735: 	movq	%r13, %rdi
    00000738: 	callq	"_ZN9benchmark9quicksortIP12DeepSubClassIdEEEvT_S4_.part.0/1" # Offset: 1848
.Ltmp691:
    0000073d: 	movq	%rbp, %rax
    00000740: 	subq	%r12, %rax
    00000743: 	cmpq	$0x8, %rax
    00000747: 	jle	.Ltmp601 # Offset: 1863
    0000074d: 	movq	%rbp, %rsi
    00000750: 	movq	%r12, %rdi
    00000753: 	callq	"_ZN9benchmark9quicksortIP12DeepSubClassIdEEEvT_S4_.part.0/1" # Offset: 1875
    00000758: 	jmp	.Ltmp601 # Offset: 1880
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIP12DeepSubClassIdEEEvT_S4_.part.0/1(*2)"

Binary Function "_ZN9benchmark9quicksortIP12DeepSubClassImEEEvT_S4_.part.0/1(*2)" after disassembly {
  All names   : _ZN9benchmark9quicksortIP12DeepSubClassImEEEvT_S4_.part.0/1
                _ZN9benchmark9quicksortIP12DeepSubClassImEEEvT_S4_.part.0/stepanov_inherit.cpp/1
  Number      : 91
  State       : disassembled
  Address     : 0x6700
  Size        : 0x6d9
  MaxSize     : 0x6e0
  Offset      : 0x6700
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIP12DeepSubClassImEEEvT_S4_.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB090:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	movq	%rdi, %r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rsi, %rbx
    00000010: 	subq	$0x8, %rsp
.Ltmp785:
    00000014: 	movq	(%r12), %rdx
    00000018: 	movq	%rbx, %rbp
    0000001b: 	movq	%r12, %rax
    0000001e: 	nop # Size: 2
.Ltmp696:
    00000020: 	movq	-0x8(%rbp), %rcx
    00000024: 	leaq	-0x8(%rbp), %rsi
    00000028: 	cmpq	%rcx, %rdx
    0000002b: 	jb	.Ltmp692 # Offset: 43
    0000002d: 	cmpq	%rax, %rsi
    00000030: 	jbe	.Ltmp693 # Offset: 48
    00000032: 	cmpq	(%rax), %rdx
    00000035: 	jbe	.Ltmp694 # Offset: 53
    00000037: 	nopw	(%rax,%rax) # Size: 9
.Ltmp695:
    00000040: 	addq	$0x8, %rax
    00000044: 	cmpq	(%rax), %rdx
    00000047: 	ja	.Ltmp695 # Offset: 71
    00000049: 	cmpq	%rax, %rsi
    0000004c: 	jbe	.Ltmp693 # Offset: 76
.Ltmp694:
    0000004e: 	movq	(%rax), %rdi
    00000051: 	movq	%rdi, (%rsi)
    00000054: 	movq	%rcx, (%rax)
.Ltmp692:
    00000057: 	movq	%rsi, %rbp
    0000005a: 	jmp	.Ltmp696 # Offset: 90
    0000005c: 	nopl	(%rax) # Size: 4
.Ltmp693:
    00000060: 	movq	%rbp, %rax
    00000063: 	subq	%r12, %rax
    00000066: 	cmpq	$0x8, %rax
    0000006a: 	jle	.Ltmp697 # Offset: 106
    0000006c: 	movq	(%r12), %rdx
    00000070: 	movq	%rbp, %r13
    00000073: 	movq	%r12, %rax
    00000076: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp702:
    00000080: 	leaq	-0x8(%r13), %rsi
    00000084: 	cmpq	%rcx, %rdx
    00000087: 	jb	.Ltmp698 # Offset: 135
    00000089: 	cmpq	%rax, %rsi
    0000008c: 	jbe	.Ltmp699 # Offset: 140
    0000008e: 	cmpq	(%rax), %rdx
    00000091: 	jbe	.Ltmp700 # Offset: 145
    00000093: 	nopl	(%rax,%rax) # Size: 5
.Ltmp701:
    00000098: 	addq	$0x8, %rax
    0000009c: 	cmpq	(%rax), %rdx
    0000009f: 	ja	.Ltmp701 # Offset: 159
    000000a1: 	cmpq	%rax, %rsi
    000000a4: 	jbe	.Ltmp699 # Offset: 164
.Ltmp700:
    000000a6: 	movq	(%rax), %rdi
    000000a9: 	movq	%rdi, (%rsi)
    000000ac: 	movq	%rcx, (%rax)
.Ltmp698:
    000000af: 	movq	-0x8(%rsi), %rcx
    000000b3: 	movq	%rsi, %r13
    000000b6: 	jmp	.Ltmp702 # Offset: 182
.Ltmp699:
    000000b8: 	movq	%r13, %rax
    000000bb: 	subq	%r12, %rax
    000000be: 	cmpq	$0x8, %rax
    000000c2: 	jg	.Ltmp703 # Offset: 194
.Ltmp765:
    000000c8: 	movq	%rbp, %rax
    000000cb: 	subq	%r13, %rax
    000000ce: 	cmpq	$0x8, %rax
    000000d2: 	jg	.Ltmp704 # Offset: 210
.Ltmp697:
    000000d8: 	movq	%rbx, %rax
    000000db: 	subq	%rbp, %rax
    000000de: 	cmpq	$0x8, %rax
    000000e2: 	jle	.Ltmp705 # Offset: 226
    000000e4: 	movq	(%rbp), %rdx
    000000e8: 	movq	%rbx, %r12
    000000eb: 	movq	%rbp, %rax
    000000ee: 	nop # Size: 2
.Ltmp710:
    000000f0: 	movq	-0x8(%r12), %rcx
    000000f5: 	leaq	-0x8(%r12), %rsi
    000000fa: 	cmpq	%rcx, %rdx
    000000fd: 	jb	.Ltmp706 # Offset: 253
    000000ff: 	cmpq	%rax, %rsi
    00000102: 	jbe	.Ltmp707 # Offset: 258
    00000104: 	cmpq	(%rax), %rdx
    00000107: 	jbe	.Ltmp708 # Offset: 263
    00000109: 	nopl	(%rax) # Size: 7
.Ltmp709:
    00000110: 	addq	$0x8, %rax
    00000114: 	cmpq	(%rax), %rdx
    00000117: 	ja	.Ltmp709 # Offset: 279
    00000119: 	cmpq	%rax, %rsi
    0000011c: 	jbe	.Ltmp707 # Offset: 284
.Ltmp708:
    0000011e: 	movq	(%rax), %rdi
    00000121: 	movq	%rdi, (%rsi)
    00000124: 	movq	%rcx, (%rax)
.Ltmp706:
    00000127: 	movq	%rsi, %r12
    0000012a: 	jmp	.Ltmp710 # Offset: 298
.Ltmp707:
    0000012c: 	movq	%r12, %rax
    0000012f: 	subq	%rbp, %rax
    00000132: 	cmpq	$0x8, %rax
    00000136: 	jg	.Ltmp711 # Offset: 310
.Ltmp740:
    0000013c: 	movq	%rbx, %rax
    0000013f: 	subq	%r12, %rax
    00000142: 	cmpq	$0x8, %rax
    00000146: 	jg	.Ltmp712 # Offset: 326
.Ltmp705:
    0000014c: 	addq	$0x8, %rsp
    00000150: 	popq	%rbx
    00000151: 	popq	%rbp
    00000152: 	popq	%r12
    00000154: 	popq	%r13
    00000156: 	popq	%r14
    00000158: 	popq	%r15
    0000015a: 	retq # Offset: 346
.Ltmp704:
    0000015b: 	movq	(%r13), %rdx
    0000015f: 	movq	%rbp, %r12
    00000162: 	movq	%r13, %rax
    00000165: 	nopl	(%rax) # Size: 3
.Ltmp717:
    00000168: 	movq	-0x8(%r12), %rsi
    0000016d: 	leaq	-0x8(%r12), %rcx
    00000172: 	cmpq	%rsi, %rdx
    00000175: 	jb	.Ltmp713 # Offset: 373
    00000177: 	cmpq	%rax, %rcx
    0000017a: 	jbe	.Ltmp714 # Offset: 378
    00000180: 	cmpq	(%rax), %rdx
    00000183: 	jbe	.Ltmp715 # Offset: 387
    00000185: 	nopl	(%rax) # Size: 3
.Ltmp716:
    00000188: 	addq	$0x8, %rax
    0000018c: 	cmpq	(%rax), %rdx
    0000018f: 	ja	.Ltmp716 # Offset: 399
    00000191: 	cmpq	%rax, %rcx
    00000194: 	jbe	.Ltmp714 # Offset: 404
.Ltmp715:
    0000019a: 	movq	(%rax), %rdi
    0000019d: 	movq	%rdi, (%rcx)
    000001a0: 	movq	%rsi, (%rax)
.Ltmp713:
    000001a3: 	movq	%rcx, %r12
    000001a6: 	jmp	.Ltmp717 # Offset: 422
.Ltmp703:
    000001a8: 	movq	(%r12), %rdx
    000001ac: 	movq	%r13, %r14
    000001af: 	movq	%r12, %rax
    000001b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp722:
    000001b8: 	leaq	-0x8(%r14), %rsi
    000001bc: 	cmpq	%rcx, %rdx
    000001bf: 	jb	.Ltmp718 # Offset: 447
    000001c1: 	cmpq	%rax, %rsi
    000001c4: 	jbe	.Ltmp719 # Offset: 452
    000001ca: 	cmpq	%rdx, (%rax)
    000001cd: 	jae	.Ltmp720 # Offset: 461
    000001cf: 	nop # Size: 1
.Ltmp721:
    000001d0: 	addq	$0x8, %rax
    000001d4: 	cmpq	(%rax), %rdx
    000001d7: 	ja	.Ltmp721 # Offset: 471
    000001d9: 	cmpq	%rax, %rsi
    000001dc: 	jbe	.Ltmp719 # Offset: 476
.Ltmp720:
    000001e2: 	movq	(%rax), %rdi
    000001e5: 	movq	%rdi, (%rsi)
    000001e8: 	movq	%rcx, (%rax)
.Ltmp718:
    000001eb: 	movq	-0x8(%rsi), %rcx
    000001ef: 	movq	%rsi, %r14
    000001f2: 	jmp	.Ltmp722 # Offset: 498
.Ltmp712:
    000001f4: 	movq	(%r12), %rdx
    000001f8: 	movq	%rbx, %rbp
    000001fb: 	movq	%r12, %rax
    000001fe: 	nop # Size: 2
.Ltmp727:
    00000200: 	movq	-0x8(%rbp), %rsi
    00000204: 	leaq	-0x8(%rbp), %rcx
    00000208: 	cmpq	%rsi, %rdx
    0000020b: 	jb	.Ltmp723 # Offset: 523
    0000020d: 	cmpq	%rax, %rcx
    00000210: 	jbe	.Ltmp724 # Offset: 528
    00000216: 	cmpq	%rdx, (%rax)
    00000219: 	jae	.Ltmp725 # Offset: 537
    0000021b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp726:
    00000220: 	addq	$0x8, %rax
    00000224: 	cmpq	(%rax), %rdx
    00000227: 	ja	.Ltmp726 # Offset: 551
    00000229: 	cmpq	%rax, %rcx
    0000022c: 	jbe	.Ltmp724 # Offset: 556
.Ltmp725:
    00000232: 	movq	(%rax), %rdi
    00000235: 	movq	%rdi, (%rcx)
    00000238: 	movq	%rsi, (%rax)
.Ltmp723:
    0000023b: 	movq	%rcx, %rbp
    0000023e: 	jmp	.Ltmp727 # Offset: 574
.Ltmp711:
    00000240: 	movq	(%rbp), %rdx
    00000244: 	movq	%r12, %r13
    00000247: 	movq	%rbp, %rax
    0000024a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp732:
    00000250: 	leaq	-0x8(%r13), %rsi
    00000254: 	cmpq	%rcx, %rdx
    00000257: 	jb	.Ltmp728 # Offset: 599
    00000259: 	cmpq	%rax, %rsi
    0000025c: 	jbe	.Ltmp729 # Offset: 604
    0000025e: 	cmpq	(%rax), %rdx
    00000261: 	jbe	.Ltmp730 # Offset: 609
    00000263: 	nopl	(%rax,%rax) # Size: 5
.Ltmp731:
    00000268: 	addq	$0x8, %rax
    0000026c: 	cmpq	(%rax), %rdx
    0000026f: 	ja	.Ltmp731 # Offset: 623
    00000271: 	cmpq	%rax, %rsi
    00000274: 	jbe	.Ltmp729 # Offset: 628
.Ltmp730:
    00000276: 	movq	(%rax), %rdi
    00000279: 	movq	%rdi, (%rsi)
    0000027c: 	movq	%rcx, (%rax)
.Ltmp728:
    0000027f: 	movq	-0x8(%rsi), %rcx
    00000283: 	movq	%rsi, %r13
    00000286: 	jmp	.Ltmp732 # Offset: 646
.Ltmp729:
    00000288: 	movq	%r13, %rax
    0000028b: 	subq	%rbp, %rax
    0000028e: 	cmpq	$0x8, %rax
    00000292: 	jle	.Ltmp733 # Offset: 658
    00000294: 	movq	(%rbp), %rdx
    00000298: 	movq	%r13, %r14
    0000029b: 	movq	%rbp, %rax
    0000029e: 	nop # Size: 2
.Ltmp738:
    000002a0: 	movq	-0x8(%r14), %rsi
    000002a4: 	leaq	-0x8(%r14), %rcx
    000002a8: 	cmpq	%rsi, %rdx
    000002ab: 	jb	.Ltmp734 # Offset: 683
    000002ad: 	cmpq	%rax, %rcx
    000002b0: 	jbe	.Ltmp735 # Offset: 688
    000002b2: 	cmpq	(%rax), %rdx
    000002b5: 	jbe	.Ltmp736 # Offset: 693
    000002b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp737:
    000002c0: 	addq	$0x8, %rax
    000002c4: 	cmpq	(%rax), %rdx
    000002c7: 	ja	.Ltmp737 # Offset: 711
    000002c9: 	cmpq	%rax, %rcx
    000002cc: 	jbe	.Ltmp735 # Offset: 716
.Ltmp736:
    000002ce: 	movq	(%rax), %rdi
    000002d1: 	movq	%rdi, (%rcx)
    000002d4: 	movq	%rsi, (%rax)
.Ltmp734:
    000002d7: 	movq	%rcx, %r14
    000002da: 	jmp	.Ltmp738 # Offset: 730
.Ltmp735:
    000002dc: 	movq	%r14, %rax
    000002df: 	subq	%rbp, %rax
    000002e2: 	cmpq	$0x8, %rax
    000002e6: 	jle	.Ltmp739 # Offset: 742
    000002e8: 	movq	%r14, %rsi
    000002eb: 	movq	%rbp, %rdi
    000002ee: 	callq	"_ZN9benchmark9quicksortIP12DeepSubClassImEEEvT_S4_.part.0/1" # Offset: 750
.Ltmp739:
    000002f3: 	movq	%r13, %rax
    000002f6: 	subq	%r14, %rax
    000002f9: 	cmpq	$0x8, %rax
    000002fd: 	jle	.Ltmp733 # Offset: 765
    000002ff: 	movq	%r13, %rsi
    00000302: 	movq	%r14, %rdi
    00000305: 	callq	"_ZN9benchmark9quicksortIP12DeepSubClassImEEEvT_S4_.part.0/1" # Offset: 773
.Ltmp733:
    0000030a: 	movq	%r12, %rax
    0000030d: 	subq	%r13, %rax
    00000310: 	cmpq	$0x8, %rax
    00000314: 	jle	.Ltmp740 # Offset: 788
    0000031a: 	movq	(%r13), %rdx
    0000031e: 	movq	%r12, %rbp
    00000321: 	movq	%r13, %rax
    00000324: 	nopl	(%rax) # Size: 4
.Ltmp745:
    00000328: 	movq	-0x8(%rbp), %rsi
    0000032c: 	leaq	-0x8(%rbp), %rcx
    00000330: 	cmpq	%rsi, %rdx
    00000333: 	jb	.Ltmp741 # Offset: 819
    00000335: 	cmpq	%rax, %rcx
    00000338: 	jbe	.Ltmp742 # Offset: 824
    0000033e: 	cmpq	%rdx, (%rax)
    00000341: 	jae	.Ltmp743 # Offset: 833
    00000343: 	nopl	(%rax,%rax) # Size: 5
.Ltmp744:
    00000348: 	addq	$0x8, %rax
    0000034c: 	cmpq	(%rax), %rdx
    0000034f: 	ja	.Ltmp744 # Offset: 847
    00000351: 	cmpq	%rax, %rcx
    00000354: 	jbe	.Ltmp742 # Offset: 852
.Ltmp743:
    0000035a: 	movq	(%rax), %rdi
    0000035d: 	movq	%rdi, (%rcx)
    00000360: 	movq	%rsi, (%rax)
.Ltmp741:
    00000363: 	movq	%rcx, %rbp
    00000366: 	jmp	.Ltmp745 # Offset: 870
.Ltmp724:
    00000368: 	movq	%rbp, %rax
    0000036b: 	subq	%r12, %rax
    0000036e: 	cmpq	$0x8, %rax
    00000372: 	jle	.Ltmp746 # Offset: 882
    00000374: 	movq	(%r12), %rdx
    00000378: 	movq	%rbp, %r13
    0000037b: 	movq	%r12, %rax
    0000037e: 	nop # Size: 2
.Ltmp751:
    00000380: 	movq	-0x8(%r13), %rsi
    00000384: 	leaq	-0x8(%r13), %rcx
    00000388: 	cmpq	%rsi, %rdx
    0000038b: 	jb	.Ltmp747 # Offset: 907
    0000038d: 	cmpq	%rax, %rcx
    00000390: 	jbe	.Ltmp748 # Offset: 912
    00000392: 	cmpq	%rdx, (%rax)
    00000395: 	jae	.Ltmp749 # Offset: 917
    00000397: 	nopw	(%rax,%rax) # Size: 9
.Ltmp750:
    000003a0: 	addq	$0x8, %rax
    000003a4: 	cmpq	(%rax), %rdx
    000003a7: 	ja	.Ltmp750 # Offset: 935
    000003a9: 	cmpq	%rax, %rcx
    000003ac: 	jbe	.Ltmp748 # Offset: 940
.Ltmp749:
    000003ae: 	movq	(%rax), %rdi
    000003b1: 	movq	%rdi, (%rcx)
    000003b4: 	movq	%rsi, (%rax)
.Ltmp747:
    000003b7: 	movq	%rcx, %r13
    000003ba: 	jmp	.Ltmp751 # Offset: 954
.Ltmp748:
    000003bc: 	movq	%r13, %rax
    000003bf: 	subq	%r12, %rax
    000003c2: 	cmpq	$0x8, %rax
    000003c6: 	jle	.Ltmp752 # Offset: 966
    000003c8: 	movq	%r13, %rsi
    000003cb: 	movq	%r12, %rdi
    000003ce: 	callq	"_ZN9benchmark9quicksortIP12DeepSubClassImEEEvT_S4_.part.0/1" # Offset: 974
.Ltmp752:
    000003d3: 	movq	%rbp, %rax
    000003d6: 	subq	%r13, %rax
    000003d9: 	cmpq	$0x8, %rax
    000003dd: 	jle	.Ltmp746 # Offset: 989
    000003df: 	movq	%rbp, %rsi
    000003e2: 	movq	%r13, %rdi
    000003e5: 	callq	"_ZN9benchmark9quicksortIP12DeepSubClassImEEEvT_S4_.part.0/1" # Offset: 997
.Ltmp746:
    000003ea: 	movq	%rbx, %rax
    000003ed: 	subq	%rbp, %rax
    000003f0: 	cmpq	$0x8, %rax
    000003f4: 	jle	.Ltmp705 # Offset: 1012
    000003fa: 	movq	(%rbp), %rdx
    000003fe: 	movq	%rbx, %r12
    00000401: 	movq	%rbp, %rax
    00000404: 	nopl	(%rax) # Size: 4
.Ltmp757:
    00000408: 	movq	-0x8(%r12), %rsi
    0000040d: 	leaq	-0x8(%r12), %rcx
    00000412: 	cmpq	%rsi, %rdx
    00000415: 	jb	.Ltmp753 # Offset: 1045
    00000417: 	cmpq	%rax, %rcx
    0000041a: 	jbe	.Ltmp754 # Offset: 1050
    00000420: 	cmpq	(%rax), %rdx
    00000423: 	jbe	.Ltmp755 # Offset: 1059
    00000425: 	nopl	(%rax) # Size: 3
.Ltmp756:
    00000428: 	addq	$0x8, %rax
    0000042c: 	cmpq	(%rax), %rdx
    0000042f: 	ja	.Ltmp756 # Offset: 1071
    00000431: 	cmpq	%rax, %rcx
    00000434: 	jbe	.Ltmp754 # Offset: 1076
.Ltmp755:
    0000043a: 	movq	(%rax), %rdi
    0000043d: 	movq	%rdi, (%rcx)
    00000440: 	movq	%rsi, (%rax)
.Ltmp753:
    00000443: 	movq	%rcx, %r12
    00000446: 	jmp	.Ltmp757 # Offset: 1094
.Ltmp719:
    00000448: 	movq	%r14, %rax
    0000044b: 	subq	%r12, %rax
    0000044e: 	cmpq	$0x8, %rax
    00000452: 	jle	.Ltmp758 # Offset: 1106
    00000454: 	movq	(%r12), %rdx
    00000458: 	movq	%r14, %r15
    0000045b: 	movq	%r12, %rax
    0000045e: 	nop # Size: 2
.Ltmp763:
    00000460: 	movq	-0x8(%r15), %rsi
    00000464: 	leaq	-0x8(%r15), %rcx
    00000468: 	cmpq	%rsi, %rdx
    0000046b: 	jb	.Ltmp759 # Offset: 1131
    0000046d: 	cmpq	%rax, %rcx
    00000470: 	jbe	.Ltmp760 # Offset: 1136
    00000472: 	cmpq	(%rax), %rdx
    00000475: 	jbe	.Ltmp761 # Offset: 1141
    00000477: 	nopw	(%rax,%rax) # Size: 9
.Ltmp762:
    00000480: 	addq	$0x8, %rax
    00000484: 	cmpq	(%rax), %rdx
    00000487: 	ja	.Ltmp762 # Offset: 1159
    00000489: 	cmpq	%rax, %rcx
    0000048c: 	jbe	.Ltmp760 # Offset: 1164
.Ltmp761:
    0000048e: 	movq	(%rax), %rdi
    00000491: 	movq	%rdi, (%rcx)
    00000494: 	movq	%rsi, (%rax)
.Ltmp759:
    00000497: 	movq	%rcx, %r15
    0000049a: 	jmp	.Ltmp763 # Offset: 1178
.Ltmp760:
    0000049c: 	movq	%r15, %rax
    0000049f: 	subq	%r12, %rax
    000004a2: 	cmpq	$0x8, %rax
    000004a6: 	jle	.Ltmp764 # Offset: 1190
    000004a8: 	movq	%r15, %rsi
    000004ab: 	movq	%r12, %rdi
    000004ae: 	callq	"_ZN9benchmark9quicksortIP12DeepSubClassImEEEvT_S4_.part.0/1" # Offset: 1198
.Ltmp764:
    000004b3: 	movq	%r14, %rax
    000004b6: 	subq	%r15, %rax
    000004b9: 	cmpq	$0x8, %rax
    000004bd: 	jle	.Ltmp758 # Offset: 1213
    000004bf: 	movq	%r14, %rsi
    000004c2: 	movq	%r15, %rdi
    000004c5: 	callq	"_ZN9benchmark9quicksortIP12DeepSubClassImEEEvT_S4_.part.0/1" # Offset: 1221
.Ltmp758:
    000004ca: 	movq	%r13, %rax
    000004cd: 	subq	%r14, %rax
    000004d0: 	cmpq	$0x8, %rax
    000004d4: 	jle	.Ltmp765 # Offset: 1236
    000004da: 	movq	(%r14), %rdx
    000004dd: 	movq	%r13, %r12
    000004e0: 	movq	%r14, %rax
    000004e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp770:
    000004e8: 	movq	-0x8(%r12), %rsi
    000004ed: 	leaq	-0x8(%r12), %rcx
    000004f2: 	cmpq	%rsi, %rdx
    000004f5: 	jb	.Ltmp766 # Offset: 1269
    000004f7: 	cmpq	%rax, %rcx
    000004fa: 	jbe	.Ltmp767 # Offset: 1274
    00000500: 	cmpq	(%rax), %rdx
    00000503: 	jbe	.Ltmp768 # Offset: 1283
    00000505: 	nopl	(%rax) # Size: 3
.Ltmp769:
    00000508: 	addq	$0x8, %rax
    0000050c: 	cmpq	(%rax), %rdx
    0000050f: 	ja	.Ltmp769 # Offset: 1295
    00000511: 	cmpq	%rax, %rcx
    00000514: 	jbe	.Ltmp767 # Offset: 1300
.Ltmp768:
    0000051a: 	movq	(%rax), %rdi
    0000051d: 	movq	%rdi, (%rcx)
    00000520: 	movq	%rsi, (%rax)
.Ltmp766:
    00000523: 	movq	%rcx, %r12
    00000526: 	jmp	.Ltmp770 # Offset: 1318
.Ltmp714:
    00000528: 	movq	%r12, %rax
    0000052b: 	subq	%r13, %rax
    0000052e: 	cmpq	$0x8, %rax
    00000532: 	jle	.Ltmp771 # Offset: 1330
    00000534: 	movq	(%r13), %rdx
    00000538: 	movq	%r12, %r14
    0000053b: 	movq	%r13, %rax
    0000053e: 	nop # Size: 2
.Ltmp776:
    00000540: 	movq	-0x8(%r14), %rsi
    00000544: 	leaq	-0x8(%r14), %rcx
    00000548: 	cmpq	%rsi, %rdx
    0000054b: 	jb	.Ltmp772 # Offset: 1355
    0000054d: 	cmpq	%rax, %rcx
    00000550: 	jbe	.Ltmp773 # Offset: 1360
    00000552: 	cmpq	(%rax), %rdx
    00000555: 	jbe	.Ltmp774 # Offset: 1365
    00000557: 	nopw	(%rax,%rax) # Size: 9
.Ltmp775:
    00000560: 	addq	$0x8, %rax
    00000564: 	cmpq	(%rax), %rdx
    00000567: 	ja	.Ltmp775 # Offset: 1383
    00000569: 	cmpq	%rax, %rcx
    0000056c: 	jbe	.Ltmp773 # Offset: 1388
.Ltmp774:
    0000056e: 	movq	(%rax), %rdi
    00000571: 	movq	%rdi, (%rcx)
    00000574: 	movq	%rsi, (%rax)
.Ltmp772:
    00000577: 	movq	%rcx, %r14
    0000057a: 	jmp	.Ltmp776 # Offset: 1402
.Ltmp773:
    0000057c: 	movq	%r14, %rax
    0000057f: 	subq	%r13, %rax
    00000582: 	cmpq	$0x8, %rax
    00000586: 	jle	.Ltmp777 # Offset: 1414
    00000588: 	movq	%r14, %rsi
    0000058b: 	movq	%r13, %rdi
    0000058e: 	callq	"_ZN9benchmark9quicksortIP12DeepSubClassImEEEvT_S4_.part.0/1" # Offset: 1422
.Ltmp777:
    00000593: 	movq	%r12, %rax
    00000596: 	subq	%r14, %rax
    00000599: 	cmpq	$0x8, %rax
    0000059d: 	jle	.Ltmp771 # Offset: 1437
    0000059f: 	movq	%r12, %rsi
    000005a2: 	movq	%r14, %rdi
    000005a5: 	callq	"_ZN9benchmark9quicksortIP12DeepSubClassImEEEvT_S4_.part.0/1" # Offset: 1445
.Ltmp771:
    000005aa: 	movq	%rbp, %rax
    000005ad: 	subq	%r12, %rax
    000005b0: 	cmpq	$0x8, %rax
    000005b4: 	jle	.Ltmp697 # Offset: 1460
    000005ba: 	movq	(%r12), %rdx
    000005be: 	movq	%rbp, %r13
    000005c1: 	movq	%r12, %rax
    000005c4: 	nopl	(%rax) # Size: 4
.Ltmp782:
    000005c8: 	movq	-0x8(%r13), %rsi
    000005cc: 	leaq	-0x8(%r13), %rcx
    000005d0: 	cmpq	%rsi, %rdx
    000005d3: 	jb	.Ltmp778 # Offset: 1491
    000005d5: 	cmpq	%rax, %rcx
    000005d8: 	jbe	.Ltmp779 # Offset: 1496
    000005de: 	cmpq	(%rax), %rdx
    000005e1: 	jbe	.Ltmp780 # Offset: 1505
    000005e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp781:
    000005e8: 	addq	$0x8, %rax
    000005ec: 	cmpq	(%rax), %rdx
    000005ef: 	ja	.Ltmp781 # Offset: 1519
    000005f1: 	cmpq	%rax, %rcx
    000005f4: 	jbe	.Ltmp779 # Offset: 1524
.Ltmp780:
    000005fa: 	movq	(%rax), %rdi
    000005fd: 	movq	%rdi, (%rcx)
    00000600: 	movq	%rsi, (%rax)
.Ltmp778:
    00000603: 	movq	%rcx, %r13
    00000606: 	jmp	.Ltmp782 # Offset: 1542
.Ltmp742:
    00000608: 	movq	%rbp, %rax
    0000060b: 	subq	%r13, %rax
    0000060e: 	cmpq	$0x8, %rax
    00000612: 	jle	.Ltmp783 # Offset: 1554
    00000614: 	movq	%rbp, %rsi
    00000617: 	movq	%r13, %rdi
    0000061a: 	callq	"_ZN9benchmark9quicksortIP12DeepSubClassImEEEvT_S4_.part.0/1" # Offset: 1562
.Ltmp783:
    0000061f: 	movq	%r12, %rax
    00000622: 	subq	%rbp, %rax
    00000625: 	cmpq	$0x8, %rax
    00000629: 	jle	.Ltmp740 # Offset: 1577
    0000062f: 	movq	%r12, %rsi
    00000632: 	movq	%rbp, %rdi
    00000635: 	callq	"_ZN9benchmark9quicksortIP12DeepSubClassImEEEvT_S4_.part.0/1" # Offset: 1589
    0000063a: 	jmp	.Ltmp740 # Offset: 1594
.Ltmp754:
    0000063f: 	movq	%r12, %rax
    00000642: 	subq	%rbp, %rax
    00000645: 	cmpq	$0x8, %rax
    00000649: 	jle	.Ltmp784 # Offset: 1609
    0000064b: 	movq	%r12, %rsi
    0000064e: 	movq	%rbp, %rdi
    00000651: 	callq	"_ZN9benchmark9quicksortIP12DeepSubClassImEEEvT_S4_.part.0/1" # Offset: 1617
.Ltmp784:
    00000656: 	movq	%rbx, %rax
    00000659: 	subq	%r12, %rax
    0000065c: 	cmpq	$0x8, %rax
    00000660: 	jg	.Ltmp785 # Offset: 1632
    00000666: 	jmp	.Ltmp705 # Offset: 1638
.Ltmp767:
    0000066b: 	movq	%r12, %rax
    0000066e: 	subq	%r14, %rax
    00000671: 	cmpq	$0x8, %rax
    00000675: 	jle	.Ltmp786 # Offset: 1653
    00000677: 	movq	%r12, %rsi
    0000067a: 	movq	%r14, %rdi
    0000067d: 	callq	"_ZN9benchmark9quicksortIP12DeepSubClassImEEEvT_S4_.part.0/1" # Offset: 1661
.Ltmp786:
    00000682: 	movq	%r13, %rax
    00000685: 	subq	%r12, %rax
    00000688: 	cmpq	$0x8, %rax
    0000068c: 	jle	.Ltmp765 # Offset: 1676
    00000692: 	movq	%r13, %rsi
    00000695: 	movq	%r12, %rdi
    00000698: 	callq	"_ZN9benchmark9quicksortIP12DeepSubClassImEEEvT_S4_.part.0/1" # Offset: 1688
    0000069d: 	jmp	.Ltmp765 # Offset: 1693
.Ltmp779:
    000006a2: 	movq	%r13, %rax
    000006a5: 	subq	%r12, %rax
    000006a8: 	cmpq	$0x8, %rax
    000006ac: 	jle	.Ltmp787 # Offset: 1708
    000006ae: 	movq	%r13, %rsi
    000006b1: 	movq	%r12, %rdi
    000006b4: 	callq	"_ZN9benchmark9quicksortIP12DeepSubClassImEEEvT_S4_.part.0/1" # Offset: 1716
.Ltmp787:
    000006b9: 	movq	%rbp, %rax
    000006bc: 	subq	%r13, %rax
    000006bf: 	cmpq	$0x8, %rax
    000006c3: 	jle	.Ltmp697 # Offset: 1731
    000006c9: 	movq	%rbp, %rsi
    000006cc: 	movq	%r13, %rdi
    000006cf: 	callq	"_ZN9benchmark9quicksortIP12DeepSubClassImEEEvT_S4_.part.0/1" # Offset: 1743
    000006d4: 	jmp	.Ltmp697 # Offset: 1748
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIP12DeepSubClassImEEEvT_S4_.part.0/1(*2)"

Binary Function "_ZN9benchmark9quicksortIP9TypeClassIdEEEvT_S4_.part.0/1(*2)" after disassembly {
  All names   : _ZN9benchmark9quicksortIP9TypeClassIdEEEvT_S4_.part.0/1
                _ZN9benchmark9quicksortIP9TypeClassIdEEEvT_S4_.part.0/stepanov_inherit.cpp/1
  Number      : 92
  State       : disassembled
  Address     : 0x6de0
  Size        : 0x75d
  MaxSize     : 0x760
  Offset      : 0x6de0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIP9TypeClassIdEEEvT_S4_.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB091:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	movq	%rdi, %r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rsi, %rbx
    00000010: 	subq	$0x8, %rsp
.Ltmp881:
    00000014: 	movsd	(%r13), %xmm0
    0000001a: 	movq	%rbx, %rbp
    0000001d: 	movq	%r13, %rax
.Ltmp792:
    00000020: 	movsd	-0x8(%rbp), %xmm1
    00000025: 	leaq	-0x8(%rbp), %rdx
    00000029: 	comisd	%xmm0, %xmm1
    0000002d: 	ja	.Ltmp788 # Offset: 45
    0000002f: 	cmpq	%rax, %rdx
    00000032: 	jbe	.Ltmp789 # Offset: 50
    00000034: 	comisd	(%rax), %xmm0
    00000038: 	jbe	.Ltmp790 # Offset: 56
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp791:
    00000040: 	addq	$0x8, %rax
    00000044: 	comisd	(%rax), %xmm0
    00000048: 	ja	.Ltmp791 # Offset: 72
    0000004a: 	cmpq	%rax, %rdx
    0000004d: 	jbe	.Ltmp789 # Offset: 77
.Ltmp790:
    0000004f: 	movsd	(%rax), %xmm2
    00000053: 	movsd	%xmm2, (%rdx)
    00000057: 	movsd	%xmm1, (%rax)
.Ltmp788:
    0000005b: 	movq	%rdx, %rbp
    0000005e: 	jmp	.Ltmp792 # Offset: 94
.Ltmp789:
    00000060: 	movq	%rbp, %rax
    00000063: 	subq	%r13, %rax
    00000066: 	cmpq	$0x8, %rax
    0000006a: 	jle	.Ltmp793 # Offset: 106
    0000006c: 	movsd	(%r13), %xmm0
    00000072: 	movq	%rbp, %r12
    00000075: 	movq	%r13, %rax
    00000078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp798:
    00000080: 	comisd	%xmm0, %xmm1
    00000084: 	leaq	-0x8(%r12), %rdx
    00000089: 	ja	.Ltmp794 # Offset: 137
    0000008b: 	cmpq	%rax, %rdx
    0000008e: 	jbe	.Ltmp795 # Offset: 142
    00000090: 	comisd	(%rax), %xmm0
    00000094: 	jbe	.Ltmp796 # Offset: 148
    00000096: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp797:
    000000a0: 	addq	$0x8, %rax
    000000a4: 	comisd	(%rax), %xmm0
    000000a8: 	ja	.Ltmp797 # Offset: 168
    000000aa: 	cmpq	%rax, %rdx
    000000ad: 	jbe	.Ltmp795 # Offset: 173
.Ltmp796:
    000000af: 	movsd	(%rax), %xmm2
    000000b3: 	movsd	%xmm2, (%rdx)
    000000b7: 	movsd	%xmm1, (%rax)
.Ltmp794:
    000000bb: 	movsd	-0x8(%rdx), %xmm1
    000000c0: 	movq	%rdx, %r12
    000000c3: 	jmp	.Ltmp798 # Offset: 195
.Ltmp795:
    000000c5: 	movq	%r12, %rax
    000000c8: 	subq	%r13, %rax
    000000cb: 	cmpq	$0x8, %rax
    000000cf: 	jg	.Ltmp799 # Offset: 207
.Ltmp861:
    000000d5: 	movq	%rbp, %rax
    000000d8: 	subq	%r12, %rax
    000000db: 	cmpq	$0x8, %rax
    000000df: 	jg	.Ltmp800 # Offset: 223
.Ltmp793:
    000000e5: 	movq	%rbx, %rax
    000000e8: 	subq	%rbp, %rax
    000000eb: 	cmpq	$0x8, %rax
    000000ef: 	jle	.Ltmp801 # Offset: 239
    000000f1: 	movsd	(%rbp), %xmm0
    000000f6: 	movq	%rbx, %r12
    000000f9: 	movq	%rbp, %rax
    000000fc: 	nopl	(%rax) # Size: 4
.Ltmp806:
    00000100: 	movsd	-0x8(%r12), %xmm1
    00000107: 	leaq	-0x8(%r12), %rdx
    0000010c: 	comisd	%xmm0, %xmm1
    00000110: 	ja	.Ltmp802 # Offset: 272
    00000112: 	cmpq	%rax, %rdx
    00000115: 	jbe	.Ltmp803 # Offset: 277
    00000117: 	comisd	(%rax), %xmm0
    0000011b: 	jbe	.Ltmp804 # Offset: 283
    0000011d: 	nopl	(%rax) # Size: 3
.Ltmp805:
    00000120: 	addq	$0x8, %rax
    00000124: 	comisd	(%rax), %xmm0
    00000128: 	ja	.Ltmp805 # Offset: 296
    0000012a: 	cmpq	%rax, %rdx
    0000012d: 	jbe	.Ltmp803 # Offset: 301
.Ltmp804:
    0000012f: 	movsd	(%rax), %xmm2
    00000133: 	movsd	%xmm2, (%rdx)
    00000137: 	movsd	%xmm1, (%rax)
.Ltmp802:
    0000013b: 	movq	%rdx, %r12
    0000013e: 	jmp	.Ltmp806 # Offset: 318
.Ltmp803:
    00000140: 	movq	%r12, %rax
    00000143: 	subq	%rbp, %rax
    00000146: 	cmpq	$0x8, %rax
    0000014a: 	jg	.Ltmp807 # Offset: 330
.Ltmp836:
    00000150: 	movq	%rbx, %rax
    00000153: 	subq	%r12, %rax
    00000156: 	cmpq	$0x8, %rax
    0000015a: 	jg	.Ltmp808 # Offset: 346
.Ltmp801:
    00000160: 	addq	$0x8, %rsp
    00000164: 	popq	%rbx
    00000165: 	popq	%rbp
    00000166: 	popq	%r12
    00000168: 	popq	%r13
    0000016a: 	popq	%r14
    0000016c: 	popq	%r15
    0000016e: 	retq # Offset: 366
.Ltmp800:
    0000016f: 	movsd	(%r12), %xmm0
    00000175: 	movq	%rbp, %r13
    00000178: 	movq	%r12, %rax
    0000017b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp813:
    00000180: 	movsd	-0x8(%r13), %xmm1
    00000186: 	leaq	-0x8(%r13), %rdx
    0000018a: 	comisd	%xmm0, %xmm1
    0000018e: 	ja	.Ltmp809 # Offset: 398
    00000190: 	cmpq	%rax, %rdx
    00000193: 	jbe	.Ltmp810 # Offset: 403
    00000199: 	comisd	(%rax), %xmm0
    0000019d: 	jbe	.Ltmp811 # Offset: 413
    0000019f: 	nop # Size: 1
.Ltmp812:
    000001a0: 	addq	$0x8, %rax
    000001a4: 	comisd	(%rax), %xmm0
    000001a8: 	ja	.Ltmp812 # Offset: 424
    000001aa: 	cmpq	%rax, %rdx
    000001ad: 	jbe	.Ltmp810 # Offset: 429
.Ltmp811:
    000001b3: 	movsd	(%rax), %xmm2
    000001b7: 	movsd	%xmm2, (%rdx)
    000001bb: 	movsd	%xmm1, (%rax)
.Ltmp809:
    000001bf: 	movq	%rdx, %r13
    000001c2: 	jmp	.Ltmp813 # Offset: 450
.Ltmp799:
    000001c4: 	movsd	(%r13), %xmm0
    000001ca: 	movq	%r12, %r14
    000001cd: 	movq	%r13, %rax
.Ltmp818:
    000001d0: 	comisd	%xmm0, %xmm1
    000001d4: 	leaq	-0x8(%r14), %rdx
    000001d8: 	ja	.Ltmp814 # Offset: 472
    000001da: 	cmpq	%rax, %rdx
    000001dd: 	jbe	.Ltmp815 # Offset: 477
    000001e3: 	comisd	(%rax), %xmm0
    000001e7: 	jbe	.Ltmp816 # Offset: 487
    000001e9: 	nopl	(%rax) # Size: 7
.Ltmp817:
    000001f0: 	addq	$0x8, %rax
    000001f4: 	comisd	(%rax), %xmm0
    000001f8: 	ja	.Ltmp817 # Offset: 504
    000001fa: 	cmpq	%rax, %rdx
    000001fd: 	jbe	.Ltmp815 # Offset: 509
.Ltmp816:
    00000203: 	movsd	(%rax), %xmm2
    00000207: 	movsd	%xmm2, (%rdx)
    0000020b: 	movsd	%xmm1, (%rax)
.Ltmp814:
    0000020f: 	movsd	-0x8(%rdx), %xmm1
    00000214: 	movq	%rdx, %r14
    00000217: 	jmp	.Ltmp818 # Offset: 535
.Ltmp808:
    00000219: 	movsd	(%r12), %xmm0
    0000021f: 	movq	%rbx, %rbp
    00000222: 	movq	%r12, %rax
    00000225: 	nopl	(%rax) # Size: 3
.Ltmp823:
    00000228: 	movsd	-0x8(%rbp), %xmm1
    0000022d: 	leaq	-0x8(%rbp), %rdx
    00000231: 	comisd	%xmm0, %xmm1
    00000235: 	ja	.Ltmp819 # Offset: 565
    00000237: 	cmpq	%rax, %rdx
    0000023a: 	jbe	.Ltmp820 # Offset: 570
    00000240: 	comisd	(%rax), %xmm0
    00000244: 	jbe	.Ltmp821 # Offset: 580
    00000246: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp822:
    00000250: 	addq	$0x8, %rax
    00000254: 	comisd	(%rax), %xmm0
    00000258: 	ja	.Ltmp822 # Offset: 600
    0000025a: 	cmpq	%rax, %rdx
    0000025d: 	jbe	.Ltmp820 # Offset: 605
.Ltmp821:
    00000263: 	movsd	(%rax), %xmm2
    00000267: 	movsd	%xmm2, (%rdx)
    0000026b: 	movsd	%xmm1, (%rax)
.Ltmp819:
    0000026f: 	movq	%rdx, %rbp
    00000272: 	jmp	.Ltmp823 # Offset: 626
.Ltmp807:
    00000274: 	movsd	(%rbp), %xmm0
    00000279: 	movq	%r12, %r13
    0000027c: 	movq	%rbp, %rax
    0000027f: 	nop # Size: 1
.Ltmp828:
    00000280: 	comisd	%xmm0, %xmm1
    00000284: 	leaq	-0x8(%r13), %rdx
    00000288: 	ja	.Ltmp824 # Offset: 648
    0000028a: 	cmpq	%rax, %rdx
    0000028d: 	jbe	.Ltmp825 # Offset: 653
    0000028f: 	comisd	(%rax), %xmm0
    00000293: 	jbe	.Ltmp826 # Offset: 659
    00000295: 	nopl	(%rax) # Size: 3
.Ltmp827:
    00000298: 	addq	$0x8, %rax
    0000029c: 	comisd	(%rax), %xmm0
    000002a0: 	ja	.Ltmp827 # Offset: 672
    000002a2: 	cmpq	%rax, %rdx
    000002a5: 	jbe	.Ltmp825 # Offset: 677
.Ltmp826:
    000002a7: 	movsd	(%rax), %xmm2
    000002ab: 	movsd	%xmm2, (%rdx)
    000002af: 	movsd	%xmm1, (%rax)
.Ltmp824:
    000002b3: 	movsd	-0x8(%rdx), %xmm1
    000002b8: 	movq	%rdx, %r13
    000002bb: 	jmp	.Ltmp828 # Offset: 699
.Ltmp825:
    000002bd: 	movq	%r13, %rax
    000002c0: 	subq	%rbp, %rax
    000002c3: 	cmpq	$0x8, %rax
    000002c7: 	jle	.Ltmp829 # Offset: 711
    000002c9: 	movsd	(%rbp), %xmm0
    000002ce: 	movq	%r13, %r14
    000002d1: 	movq	%rbp, %rax
    000002d4: 	nopl	(%rax) # Size: 4
.Ltmp834:
    000002d8: 	movsd	-0x8(%r14), %xmm1
    000002de: 	leaq	-0x8(%r14), %rdx
    000002e2: 	comisd	%xmm0, %xmm1
    000002e6: 	ja	.Ltmp830 # Offset: 742
    000002e8: 	cmpq	%rax, %rdx
    000002eb: 	jbe	.Ltmp831 # Offset: 747
    000002ed: 	comisd	(%rax), %xmm0
    000002f1: 	jbe	.Ltmp832 # Offset: 753
    000002f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp833:
    000002f8: 	addq	$0x8, %rax
    000002fc: 	comisd	(%rax), %xmm0
    00000300: 	ja	.Ltmp833 # Offset: 768
    00000302: 	cmpq	%rax, %rdx
    00000305: 	jbe	.Ltmp831 # Offset: 773
.Ltmp832:
    00000307: 	movsd	(%rax), %xmm2
    0000030b: 	movsd	%xmm2, (%rdx)
    0000030f: 	movsd	%xmm1, (%rax)
.Ltmp830:
    00000313: 	movq	%rdx, %r14
    00000316: 	jmp	.Ltmp834 # Offset: 790
.Ltmp831:
    00000318: 	movq	%r14, %rax
    0000031b: 	subq	%rbp, %rax
    0000031e: 	cmpq	$0x8, %rax
    00000322: 	jle	.Ltmp835 # Offset: 802
    00000324: 	movq	%r14, %rsi
    00000327: 	movq	%rbp, %rdi
    0000032a: 	callq	"_ZN9benchmark9quicksortIP9TypeClassIdEEEvT_S4_.part.0/1" # Offset: 810
.Ltmp835:
    0000032f: 	movq	%r13, %rax
    00000332: 	subq	%r14, %rax
    00000335: 	cmpq	$0x8, %rax
    00000339: 	jle	.Ltmp829 # Offset: 825
    0000033b: 	movq	%r13, %rsi
    0000033e: 	movq	%r14, %rdi
    00000341: 	callq	"_ZN9benchmark9quicksortIP9TypeClassIdEEEvT_S4_.part.0/1" # Offset: 833
.Ltmp829:
    00000346: 	movq	%r12, %rax
    00000349: 	subq	%r13, %rax
    0000034c: 	cmpq	$0x8, %rax
    00000350: 	jle	.Ltmp836 # Offset: 848
    00000356: 	movsd	(%r13), %xmm0
    0000035c: 	movq	%r12, %rbp
    0000035f: 	movq	%r13, %rax
    00000362: 	nopw	(%rax,%rax) # Size: 6
.Ltmp841:
    00000368: 	movsd	-0x8(%rbp), %xmm1
    0000036d: 	leaq	-0x8(%rbp), %rdx
    00000371: 	comisd	%xmm0, %xmm1
    00000375: 	ja	.Ltmp837 # Offset: 885
    00000377: 	cmpq	%rax, %rdx
    0000037a: 	jbe	.Ltmp838 # Offset: 890
    00000380: 	comisd	(%rax), %xmm0
    00000384: 	jbe	.Ltmp839 # Offset: 900
    00000386: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp840:
    00000390: 	addq	$0x8, %rax
    00000394: 	comisd	(%rax), %xmm0
    00000398: 	ja	.Ltmp840 # Offset: 920
    0000039a: 	cmpq	%rax, %rdx
    0000039d: 	jbe	.Ltmp838 # Offset: 925
.Ltmp839:
    000003a3: 	movsd	(%rax), %xmm2
    000003a7: 	movsd	%xmm2, (%rdx)
    000003ab: 	movsd	%xmm1, (%rax)
.Ltmp837:
    000003af: 	movq	%rdx, %rbp
    000003b2: 	jmp	.Ltmp841 # Offset: 946
.Ltmp820:
    000003b4: 	movq	%rbp, %rax
    000003b7: 	subq	%r12, %rax
    000003ba: 	cmpq	$0x8, %rax
    000003be: 	jle	.Ltmp842 # Offset: 958
    000003c0: 	movsd	(%r12), %xmm0
    000003c6: 	movq	%rbp, %r13
    000003c9: 	movq	%r12, %rax
    000003cc: 	nopl	(%rax) # Size: 4
.Ltmp847:
    000003d0: 	movsd	-0x8(%r13), %xmm1
    000003d6: 	leaq	-0x8(%r13), %rdx
    000003da: 	comisd	%xmm0, %xmm1
    000003de: 	ja	.Ltmp843 # Offset: 990
    000003e0: 	cmpq	%rax, %rdx
    000003e3: 	jbe	.Ltmp844 # Offset: 995
    000003e5: 	comisd	(%rax), %xmm0
    000003e9: 	jbe	.Ltmp845 # Offset: 1001
    000003eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp846:
    000003f0: 	addq	$0x8, %rax
    000003f4: 	comisd	(%rax), %xmm0
    000003f8: 	ja	.Ltmp846 # Offset: 1016
    000003fa: 	cmpq	%rax, %rdx
    000003fd: 	jbe	.Ltmp844 # Offset: 1021
.Ltmp845:
    000003ff: 	movsd	(%rax), %xmm2
    00000403: 	movsd	%xmm2, (%rdx)
    00000407: 	movsd	%xmm1, (%rax)
.Ltmp843:
    0000040b: 	movq	%rdx, %r13
    0000040e: 	jmp	.Ltmp847 # Offset: 1038
.Ltmp844:
    00000410: 	movq	%r13, %rax
    00000413: 	subq	%r12, %rax
    00000416: 	cmpq	$0x8, %rax
    0000041a: 	jle	.Ltmp848 # Offset: 1050
    0000041c: 	movq	%r13, %rsi
    0000041f: 	movq	%r12, %rdi
    00000422: 	callq	"_ZN9benchmark9quicksortIP9TypeClassIdEEEvT_S4_.part.0/1" # Offset: 1058
.Ltmp848:
    00000427: 	movq	%rbp, %rax
    0000042a: 	subq	%r13, %rax
    0000042d: 	cmpq	$0x8, %rax
    00000431: 	jle	.Ltmp842 # Offset: 1073
    00000433: 	movq	%rbp, %rsi
    00000436: 	movq	%r13, %rdi
    00000439: 	callq	"_ZN9benchmark9quicksortIP9TypeClassIdEEEvT_S4_.part.0/1" # Offset: 1081
.Ltmp842:
    0000043e: 	movq	%rbx, %rax
    00000441: 	subq	%rbp, %rax
    00000444: 	cmpq	$0x8, %rax
    00000448: 	jle	.Ltmp801 # Offset: 1096
    0000044e: 	movsd	(%rbp), %xmm0
    00000453: 	movq	%rbx, %r13
    00000456: 	movq	%rbp, %rax
    00000459: 	nopl	(%rax) # Size: 7
.Ltmp853:
    00000460: 	movsd	-0x8(%r13), %xmm1
    00000466: 	leaq	-0x8(%r13), %rdx
    0000046a: 	comisd	%xmm0, %xmm1
    0000046e: 	ja	.Ltmp849 # Offset: 1134
    00000470: 	cmpq	%rax, %rdx
    00000473: 	jbe	.Ltmp850 # Offset: 1139
    00000479: 	comisd	(%rax), %xmm0
    0000047d: 	jbe	.Ltmp851 # Offset: 1149
    0000047f: 	nop # Size: 1
.Ltmp852:
    00000480: 	addq	$0x8, %rax
    00000484: 	comisd	(%rax), %xmm0
    00000488: 	ja	.Ltmp852 # Offset: 1160
    0000048a: 	cmpq	%rax, %rdx
    0000048d: 	jbe	.Ltmp850 # Offset: 1165
.Ltmp851:
    00000493: 	movsd	(%rax), %xmm2
    00000497: 	movsd	%xmm2, (%rdx)
    0000049b: 	movsd	%xmm1, (%rax)
.Ltmp849:
    0000049f: 	movq	%rdx, %r13
    000004a2: 	jmp	.Ltmp853 # Offset: 1186
.Ltmp815:
    000004a4: 	movq	%r14, %rax
    000004a7: 	subq	%r13, %rax
    000004aa: 	cmpq	$0x8, %rax
    000004ae: 	jle	.Ltmp854 # Offset: 1198
    000004b0: 	movsd	(%r13), %xmm0
    000004b6: 	movq	%r14, %r15
    000004b9: 	movq	%r13, %rax
    000004bc: 	nopl	(%rax) # Size: 4
.Ltmp859:
    000004c0: 	movsd	-0x8(%r15), %xmm1
    000004c6: 	leaq	-0x8(%r15), %rdx
    000004ca: 	comisd	%xmm0, %xmm1
    000004ce: 	ja	.Ltmp855 # Offset: 1230
    000004d0: 	cmpq	%rax, %rdx
    000004d3: 	jbe	.Ltmp856 # Offset: 1235
    000004d5: 	comisd	(%rax), %xmm0
    000004d9: 	jbe	.Ltmp857 # Offset: 1241
    000004db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp858:
    000004e0: 	addq	$0x8, %rax
    000004e4: 	comisd	(%rax), %xmm0
    000004e8: 	ja	.Ltmp858 # Offset: 1256
    000004ea: 	cmpq	%rax, %rdx
    000004ed: 	jbe	.Ltmp856 # Offset: 1261
.Ltmp857:
    000004ef: 	movsd	(%rax), %xmm2
    000004f3: 	movsd	%xmm2, (%rdx)
    000004f7: 	movsd	%xmm1, (%rax)
.Ltmp855:
    000004fb: 	movq	%rdx, %r15
    000004fe: 	jmp	.Ltmp859 # Offset: 1278
.Ltmp856:
    00000500: 	movq	%r15, %rax
    00000503: 	subq	%r13, %rax
    00000506: 	cmpq	$0x8, %rax
    0000050a: 	jle	.Ltmp860 # Offset: 1290
    0000050c: 	movq	%r15, %rsi
    0000050f: 	movq	%r13, %rdi
    00000512: 	callq	"_ZN9benchmark9quicksortIP9TypeClassIdEEEvT_S4_.part.0/1" # Offset: 1298
.Ltmp860:
    00000517: 	movq	%r14, %rax
    0000051a: 	subq	%r15, %rax
    0000051d: 	cmpq	$0x8, %rax
    00000521: 	jle	.Ltmp854 # Offset: 1313
    00000523: 	movq	%r14, %rsi
    00000526: 	movq	%r15, %rdi
    00000529: 	callq	"_ZN9benchmark9quicksortIP9TypeClassIdEEEvT_S4_.part.0/1" # Offset: 1321
.Ltmp854:
    0000052e: 	movq	%r12, %rax
    00000531: 	subq	%r14, %rax
    00000534: 	cmpq	$0x8, %rax
    00000538: 	jle	.Ltmp861 # Offset: 1336
    0000053e: 	movsd	(%r14), %xmm0
    00000543: 	movq	%r12, %r13
    00000546: 	movq	%r14, %rax
    00000549: 	nopl	(%rax) # Size: 7
.Ltmp866:
    00000550: 	movsd	-0x8(%r13), %xmm1
    00000556: 	leaq	-0x8(%r13), %rdx
    0000055a: 	comisd	%xmm0, %xmm1
    0000055e: 	ja	.Ltmp862 # Offset: 1374
    00000560: 	cmpq	%rax, %rdx
    00000563: 	jbe	.Ltmp863 # Offset: 1379
    00000569: 	comisd	(%rax), %xmm0
    0000056d: 	jbe	.Ltmp864 # Offset: 1389
    0000056f: 	nop # Size: 1
.Ltmp865:
    00000570: 	addq	$0x8, %rax
    00000574: 	comisd	(%rax), %xmm0
    00000578: 	ja	.Ltmp865 # Offset: 1400
    0000057a: 	cmpq	%rax, %rdx
    0000057d: 	jbe	.Ltmp863 # Offset: 1405
.Ltmp864:
    00000583: 	movsd	(%rax), %xmm2
    00000587: 	movsd	%xmm2, (%rdx)
    0000058b: 	movsd	%xmm1, (%rax)
.Ltmp862:
    0000058f: 	movq	%rdx, %r13
    00000592: 	jmp	.Ltmp866 # Offset: 1426
.Ltmp810:
    00000594: 	movq	%r13, %rax
    00000597: 	subq	%r12, %rax
    0000059a: 	cmpq	$0x8, %rax
    0000059e: 	jle	.Ltmp867 # Offset: 1438
    000005a0: 	movsd	(%r12), %xmm0
    000005a6: 	movq	%r13, %r14
    000005a9: 	movq	%r12, %rax
    000005ac: 	nopl	(%rax) # Size: 4
.Ltmp872:
    000005b0: 	movsd	-0x8(%r14), %xmm1
    000005b6: 	leaq	-0x8(%r14), %rdx
    000005ba: 	comisd	%xmm0, %xmm1
    000005be: 	ja	.Ltmp868 # Offset: 1470
    000005c0: 	cmpq	%rax, %rdx
    000005c3: 	jbe	.Ltmp869 # Offset: 1475
    000005c5: 	comisd	(%rax), %xmm0
    000005c9: 	jbe	.Ltmp870 # Offset: 1481
    000005cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp871:
    000005d0: 	addq	$0x8, %rax
    000005d4: 	comisd	(%rax), %xmm0
    000005d8: 	ja	.Ltmp871 # Offset: 1496
    000005da: 	cmpq	%rax, %rdx
    000005dd: 	jbe	.Ltmp869 # Offset: 1501
.Ltmp870:
    000005df: 	movsd	(%rax), %xmm2
    000005e3: 	movsd	%xmm2, (%rdx)
    000005e7: 	movsd	%xmm1, (%rax)
.Ltmp868:
    000005eb: 	movq	%rdx, %r14
    000005ee: 	jmp	.Ltmp872 # Offset: 1518
.Ltmp869:
    000005f0: 	movq	%r14, %rax
    000005f3: 	subq	%r12, %rax
    000005f6: 	cmpq	$0x8, %rax
    000005fa: 	jle	.Ltmp873 # Offset: 1530
    000005fc: 	movq	%r14, %rsi
    000005ff: 	movq	%r12, %rdi
    00000602: 	callq	"_ZN9benchmark9quicksortIP9TypeClassIdEEEvT_S4_.part.0/1" # Offset: 1538
.Ltmp873:
    00000607: 	movq	%r13, %rax
    0000060a: 	subq	%r14, %rax
    0000060d: 	cmpq	$0x8, %rax
    00000611: 	jle	.Ltmp867 # Offset: 1553
    00000613: 	movq	%r13, %rsi
    00000616: 	movq	%r14, %rdi
    00000619: 	callq	"_ZN9benchmark9quicksortIP9TypeClassIdEEEvT_S4_.part.0/1" # Offset: 1561
.Ltmp867:
    0000061e: 	movq	%rbp, %rax
    00000621: 	subq	%r13, %rax
    00000624: 	cmpq	$0x8, %rax
    00000628: 	jle	.Ltmp793 # Offset: 1576
    0000062e: 	movsd	(%r13), %xmm0
    00000634: 	movq	%rbp, %r12
    00000637: 	movq	%r13, %rax
    0000063a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp878:
    00000640: 	movsd	-0x8(%r12), %xmm1
    00000647: 	leaq	-0x8(%r12), %rdx
    0000064c: 	comisd	%xmm0, %xmm1
    00000650: 	ja	.Ltmp874 # Offset: 1616
    00000652: 	cmpq	%rax, %rdx
    00000655: 	jbe	.Ltmp875 # Offset: 1621
    0000065b: 	comisd	(%rax), %xmm0
    0000065f: 	jbe	.Ltmp876 # Offset: 1631
    00000661: 	nopl	(%rax) # Size: 7
.Ltmp877:
    00000668: 	addq	$0x8, %rax
    0000066c: 	comisd	(%rax), %xmm0
    00000670: 	ja	.Ltmp877 # Offset: 1648
    00000672: 	cmpq	%rax, %rdx
    00000675: 	jbe	.Ltmp875 # Offset: 1653
.Ltmp876:
    0000067b: 	movsd	(%rax), %xmm2
    0000067f: 	movsd	%xmm2, (%rdx)
    00000683: 	movsd	%xmm1, (%rax)
.Ltmp874:
    00000687: 	movq	%rdx, %r12
    0000068a: 	jmp	.Ltmp878 # Offset: 1674
.Ltmp838:
    0000068c: 	movq	%rbp, %rax
    0000068f: 	subq	%r13, %rax
    00000692: 	cmpq	$0x8, %rax
    00000696: 	jle	.Ltmp879 # Offset: 1686
    00000698: 	movq	%rbp, %rsi
    0000069b: 	movq	%r13, %rdi
    0000069e: 	callq	"_ZN9benchmark9quicksortIP9TypeClassIdEEEvT_S4_.part.0/1" # Offset: 1694
.Ltmp879:
    000006a3: 	movq	%r12, %rax
    000006a6: 	subq	%rbp, %rax
    000006a9: 	cmpq	$0x8, %rax
    000006ad: 	jle	.Ltmp836 # Offset: 1709
    000006b3: 	movq	%r12, %rsi
    000006b6: 	movq	%rbp, %rdi
    000006b9: 	callq	"_ZN9benchmark9quicksortIP9TypeClassIdEEEvT_S4_.part.0/1" # Offset: 1721
    000006be: 	jmp	.Ltmp836 # Offset: 1726
.Ltmp850:
    000006c3: 	movq	%r13, %rax
    000006c6: 	subq	%rbp, %rax
    000006c9: 	cmpq	$0x8, %rax
    000006cd: 	jle	.Ltmp880 # Offset: 1741
    000006cf: 	movq	%r13, %rsi
    000006d2: 	movq	%rbp, %rdi
    000006d5: 	callq	"_ZN9benchmark9quicksortIP9TypeClassIdEEEvT_S4_.part.0/1" # Offset: 1749
.Ltmp880:
    000006da: 	movq	%rbx, %rax
    000006dd: 	subq	%r13, %rax
    000006e0: 	cmpq	$0x8, %rax
    000006e4: 	jg	.Ltmp881 # Offset: 1764
    000006ea: 	jmp	.Ltmp801 # Offset: 1770
.Ltmp863:
    000006ef: 	movq	%r13, %rax
    000006f2: 	subq	%r14, %rax
    000006f5: 	cmpq	$0x8, %rax
    000006f9: 	jle	.Ltmp882 # Offset: 1785
    000006fb: 	movq	%r13, %rsi
    000006fe: 	movq	%r14, %rdi
    00000701: 	callq	"_ZN9benchmark9quicksortIP9TypeClassIdEEEvT_S4_.part.0/1" # Offset: 1793
.Ltmp882:
    00000706: 	movq	%r12, %rax
    00000709: 	subq	%r13, %rax
    0000070c: 	cmpq	$0x8, %rax
    00000710: 	jle	.Ltmp861 # Offset: 1808
    00000716: 	movq	%r12, %rsi
    00000719: 	movq	%r13, %rdi
    0000071c: 	callq	"_ZN9benchmark9quicksortIP9TypeClassIdEEEvT_S4_.part.0/1" # Offset: 1820
    00000721: 	jmp	.Ltmp861 # Offset: 1825
.Ltmp875:
    00000726: 	movq	%r12, %rax
    00000729: 	subq	%r13, %rax
    0000072c: 	cmpq	$0x8, %rax
    00000730: 	jle	.Ltmp883 # Offset: 1840
    00000732: 	movq	%r12, %rsi
    00000735: 	movq	%r13, %rdi
    00000738: 	callq	"_ZN9benchmark9quicksortIP9TypeClassIdEEEvT_S4_.part.0/1" # Offset: 1848
.Ltmp883:
    0000073d: 	movq	%rbp, %rax
    00000740: 	subq	%r12, %rax
    00000743: 	cmpq	$0x8, %rax
    00000747: 	jle	.Ltmp793 # Offset: 1863
    0000074d: 	movq	%rbp, %rsi
    00000750: 	movq	%r12, %rdi
    00000753: 	callq	"_ZN9benchmark9quicksortIP9TypeClassIdEEEvT_S4_.part.0/1" # Offset: 1875
    00000758: 	jmp	.Ltmp793 # Offset: 1880
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIP9TypeClassIdEEEvT_S4_.part.0/1(*2)"

Binary Function "_ZN9benchmark9quicksortIP13TypeSub2ClassIdEEEvT_S4_.part.0/1(*2)" after disassembly {
  All names   : _ZN9benchmark9quicksortIP13TypeSub2ClassIdEEEvT_S4_.part.0/1
                _ZN9benchmark9quicksortIP13TypeSub2ClassIdEEEvT_S4_.part.0/stepanov_inherit.cpp/1
  Number      : 93
  State       : disassembled
  Address     : 0x7540
  Size        : 0x75d
  MaxSize     : 0x760
  Offset      : 0x7540
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIP13TypeSub2ClassIdEEEvT_S4_.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB092:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	movq	%rdi, %r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rsi, %rbx
    00000010: 	subq	$0x8, %rsp
.Ltmp977:
    00000014: 	movsd	(%r13), %xmm0
    0000001a: 	movq	%rbx, %rbp
    0000001d: 	movq	%r13, %rax
.Ltmp888:
    00000020: 	movsd	-0x8(%rbp), %xmm1
    00000025: 	leaq	-0x8(%rbp), %rdx
    00000029: 	comisd	%xmm0, %xmm1
    0000002d: 	ja	.Ltmp884 # Offset: 45
    0000002f: 	cmpq	%rax, %rdx
    00000032: 	jbe	.Ltmp885 # Offset: 50
    00000034: 	comisd	(%rax), %xmm0
    00000038: 	jbe	.Ltmp886 # Offset: 56
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp887:
    00000040: 	addq	$0x8, %rax
    00000044: 	comisd	(%rax), %xmm0
    00000048: 	ja	.Ltmp887 # Offset: 72
    0000004a: 	cmpq	%rax, %rdx
    0000004d: 	jbe	.Ltmp885 # Offset: 77
.Ltmp886:
    0000004f: 	movsd	(%rax), %xmm2
    00000053: 	movsd	%xmm2, (%rdx)
    00000057: 	movsd	%xmm1, (%rax)
.Ltmp884:
    0000005b: 	movq	%rdx, %rbp
    0000005e: 	jmp	.Ltmp888 # Offset: 94
.Ltmp885:
    00000060: 	movq	%rbp, %rax
    00000063: 	subq	%r13, %rax
    00000066: 	cmpq	$0x8, %rax
    0000006a: 	jle	.Ltmp889 # Offset: 106
    0000006c: 	movsd	(%r13), %xmm0
    00000072: 	movq	%rbp, %r12
    00000075: 	movq	%r13, %rax
    00000078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp894:
    00000080: 	comisd	%xmm0, %xmm1
    00000084: 	leaq	-0x8(%r12), %rdx
    00000089: 	ja	.Ltmp890 # Offset: 137
    0000008b: 	cmpq	%rax, %rdx
    0000008e: 	jbe	.Ltmp891 # Offset: 142
    00000090: 	comisd	(%rax), %xmm0
    00000094: 	jbe	.Ltmp892 # Offset: 148
    00000096: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp893:
    000000a0: 	addq	$0x8, %rax
    000000a4: 	comisd	(%rax), %xmm0
    000000a8: 	ja	.Ltmp893 # Offset: 168
    000000aa: 	cmpq	%rax, %rdx
    000000ad: 	jbe	.Ltmp891 # Offset: 173
.Ltmp892:
    000000af: 	movsd	(%rax), %xmm2
    000000b3: 	movsd	%xmm2, (%rdx)
    000000b7: 	movsd	%xmm1, (%rax)
.Ltmp890:
    000000bb: 	movsd	-0x8(%rdx), %xmm1
    000000c0: 	movq	%rdx, %r12
    000000c3: 	jmp	.Ltmp894 # Offset: 195
.Ltmp891:
    000000c5: 	movq	%r12, %rax
    000000c8: 	subq	%r13, %rax
    000000cb: 	cmpq	$0x8, %rax
    000000cf: 	jg	.Ltmp895 # Offset: 207
.Ltmp957:
    000000d5: 	movq	%rbp, %rax
    000000d8: 	subq	%r12, %rax
    000000db: 	cmpq	$0x8, %rax
    000000df: 	jg	.Ltmp896 # Offset: 223
.Ltmp889:
    000000e5: 	movq	%rbx, %rax
    000000e8: 	subq	%rbp, %rax
    000000eb: 	cmpq	$0x8, %rax
    000000ef: 	jle	.Ltmp897 # Offset: 239
    000000f1: 	movsd	(%rbp), %xmm0
    000000f6: 	movq	%rbx, %r12
    000000f9: 	movq	%rbp, %rax
    000000fc: 	nopl	(%rax) # Size: 4
.Ltmp902:
    00000100: 	movsd	-0x8(%r12), %xmm1
    00000107: 	leaq	-0x8(%r12), %rdx
    0000010c: 	comisd	%xmm0, %xmm1
    00000110: 	ja	.Ltmp898 # Offset: 272
    00000112: 	cmpq	%rax, %rdx
    00000115: 	jbe	.Ltmp899 # Offset: 277
    00000117: 	comisd	(%rax), %xmm0
    0000011b: 	jbe	.Ltmp900 # Offset: 283
    0000011d: 	nopl	(%rax) # Size: 3
.Ltmp901:
    00000120: 	addq	$0x8, %rax
    00000124: 	comisd	(%rax), %xmm0
    00000128: 	ja	.Ltmp901 # Offset: 296
    0000012a: 	cmpq	%rax, %rdx
    0000012d: 	jbe	.Ltmp899 # Offset: 301
.Ltmp900:
    0000012f: 	movsd	(%rax), %xmm2
    00000133: 	movsd	%xmm2, (%rdx)
    00000137: 	movsd	%xmm1, (%rax)
.Ltmp898:
    0000013b: 	movq	%rdx, %r12
    0000013e: 	jmp	.Ltmp902 # Offset: 318
.Ltmp899:
    00000140: 	movq	%r12, %rax
    00000143: 	subq	%rbp, %rax
    00000146: 	cmpq	$0x8, %rax
    0000014a: 	jg	.Ltmp903 # Offset: 330
.Ltmp932:
    00000150: 	movq	%rbx, %rax
    00000153: 	subq	%r12, %rax
    00000156: 	cmpq	$0x8, %rax
    0000015a: 	jg	.Ltmp904 # Offset: 346
.Ltmp897:
    00000160: 	addq	$0x8, %rsp
    00000164: 	popq	%rbx
    00000165: 	popq	%rbp
    00000166: 	popq	%r12
    00000168: 	popq	%r13
    0000016a: 	popq	%r14
    0000016c: 	popq	%r15
    0000016e: 	retq # Offset: 366
.Ltmp896:
    0000016f: 	movsd	(%r12), %xmm0
    00000175: 	movq	%rbp, %r13
    00000178: 	movq	%r12, %rax
    0000017b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp909:
    00000180: 	movsd	-0x8(%r13), %xmm1
    00000186: 	leaq	-0x8(%r13), %rdx
    0000018a: 	comisd	%xmm0, %xmm1
    0000018e: 	ja	.Ltmp905 # Offset: 398
    00000190: 	cmpq	%rax, %rdx
    00000193: 	jbe	.Ltmp906 # Offset: 403
    00000199: 	comisd	(%rax), %xmm0
    0000019d: 	jbe	.Ltmp907 # Offset: 413
    0000019f: 	nop # Size: 1
.Ltmp908:
    000001a0: 	addq	$0x8, %rax
    000001a4: 	comisd	(%rax), %xmm0
    000001a8: 	ja	.Ltmp908 # Offset: 424
    000001aa: 	cmpq	%rax, %rdx
    000001ad: 	jbe	.Ltmp906 # Offset: 429
.Ltmp907:
    000001b3: 	movsd	(%rax), %xmm2
    000001b7: 	movsd	%xmm2, (%rdx)
    000001bb: 	movsd	%xmm1, (%rax)
.Ltmp905:
    000001bf: 	movq	%rdx, %r13
    000001c2: 	jmp	.Ltmp909 # Offset: 450
.Ltmp895:
    000001c4: 	movsd	(%r13), %xmm0
    000001ca: 	movq	%r12, %r14
    000001cd: 	movq	%r13, %rax
.Ltmp914:
    000001d0: 	comisd	%xmm0, %xmm1
    000001d4: 	leaq	-0x8(%r14), %rdx
    000001d8: 	ja	.Ltmp910 # Offset: 472
    000001da: 	cmpq	%rax, %rdx
    000001dd: 	jbe	.Ltmp911 # Offset: 477
    000001e3: 	comisd	(%rax), %xmm0
    000001e7: 	jbe	.Ltmp912 # Offset: 487
    000001e9: 	nopl	(%rax) # Size: 7
.Ltmp913:
    000001f0: 	addq	$0x8, %rax
    000001f4: 	comisd	(%rax), %xmm0
    000001f8: 	ja	.Ltmp913 # Offset: 504
    000001fa: 	cmpq	%rax, %rdx
    000001fd: 	jbe	.Ltmp911 # Offset: 509
.Ltmp912:
    00000203: 	movsd	(%rax), %xmm2
    00000207: 	movsd	%xmm2, (%rdx)
    0000020b: 	movsd	%xmm1, (%rax)
.Ltmp910:
    0000020f: 	movsd	-0x8(%rdx), %xmm1
    00000214: 	movq	%rdx, %r14
    00000217: 	jmp	.Ltmp914 # Offset: 535
.Ltmp904:
    00000219: 	movsd	(%r12), %xmm0
    0000021f: 	movq	%rbx, %rbp
    00000222: 	movq	%r12, %rax
    00000225: 	nopl	(%rax) # Size: 3
.Ltmp919:
    00000228: 	movsd	-0x8(%rbp), %xmm1
    0000022d: 	leaq	-0x8(%rbp), %rdx
    00000231: 	comisd	%xmm0, %xmm1
    00000235: 	ja	.Ltmp915 # Offset: 565
    00000237: 	cmpq	%rax, %rdx
    0000023a: 	jbe	.Ltmp916 # Offset: 570
    00000240: 	comisd	(%rax), %xmm0
    00000244: 	jbe	.Ltmp917 # Offset: 580
    00000246: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp918:
    00000250: 	addq	$0x8, %rax
    00000254: 	comisd	(%rax), %xmm0
    00000258: 	ja	.Ltmp918 # Offset: 600
    0000025a: 	cmpq	%rax, %rdx
    0000025d: 	jbe	.Ltmp916 # Offset: 605
.Ltmp917:
    00000263: 	movsd	(%rax), %xmm2
    00000267: 	movsd	%xmm2, (%rdx)
    0000026b: 	movsd	%xmm1, (%rax)
.Ltmp915:
    0000026f: 	movq	%rdx, %rbp
    00000272: 	jmp	.Ltmp919 # Offset: 626
.Ltmp903:
    00000274: 	movsd	(%rbp), %xmm0
    00000279: 	movq	%r12, %r13
    0000027c: 	movq	%rbp, %rax
    0000027f: 	nop # Size: 1
.Ltmp924:
    00000280: 	comisd	%xmm0, %xmm1
    00000284: 	leaq	-0x8(%r13), %rdx
    00000288: 	ja	.Ltmp920 # Offset: 648
    0000028a: 	cmpq	%rax, %rdx
    0000028d: 	jbe	.Ltmp921 # Offset: 653
    0000028f: 	comisd	(%rax), %xmm0
    00000293: 	jbe	.Ltmp922 # Offset: 659
    00000295: 	nopl	(%rax) # Size: 3
.Ltmp923:
    00000298: 	addq	$0x8, %rax
    0000029c: 	comisd	(%rax), %xmm0
    000002a0: 	ja	.Ltmp923 # Offset: 672
    000002a2: 	cmpq	%rax, %rdx
    000002a5: 	jbe	.Ltmp921 # Offset: 677
.Ltmp922:
    000002a7: 	movsd	(%rax), %xmm2
    000002ab: 	movsd	%xmm2, (%rdx)
    000002af: 	movsd	%xmm1, (%rax)
.Ltmp920:
    000002b3: 	movsd	-0x8(%rdx), %xmm1
    000002b8: 	movq	%rdx, %r13
    000002bb: 	jmp	.Ltmp924 # Offset: 699
.Ltmp921:
    000002bd: 	movq	%r13, %rax
    000002c0: 	subq	%rbp, %rax
    000002c3: 	cmpq	$0x8, %rax
    000002c7: 	jle	.Ltmp925 # Offset: 711
    000002c9: 	movsd	(%rbp), %xmm0
    000002ce: 	movq	%r13, %r14
    000002d1: 	movq	%rbp, %rax
    000002d4: 	nopl	(%rax) # Size: 4
.Ltmp930:
    000002d8: 	movsd	-0x8(%r14), %xmm1
    000002de: 	leaq	-0x8(%r14), %rdx
    000002e2: 	comisd	%xmm0, %xmm1
    000002e6: 	ja	.Ltmp926 # Offset: 742
    000002e8: 	cmpq	%rax, %rdx
    000002eb: 	jbe	.Ltmp927 # Offset: 747
    000002ed: 	comisd	(%rax), %xmm0
    000002f1: 	jbe	.Ltmp928 # Offset: 753
    000002f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp929:
    000002f8: 	addq	$0x8, %rax
    000002fc: 	comisd	(%rax), %xmm0
    00000300: 	ja	.Ltmp929 # Offset: 768
    00000302: 	cmpq	%rax, %rdx
    00000305: 	jbe	.Ltmp927 # Offset: 773
.Ltmp928:
    00000307: 	movsd	(%rax), %xmm2
    0000030b: 	movsd	%xmm2, (%rdx)
    0000030f: 	movsd	%xmm1, (%rax)
.Ltmp926:
    00000313: 	movq	%rdx, %r14
    00000316: 	jmp	.Ltmp930 # Offset: 790
.Ltmp927:
    00000318: 	movq	%r14, %rax
    0000031b: 	subq	%rbp, %rax
    0000031e: 	cmpq	$0x8, %rax
    00000322: 	jle	.Ltmp931 # Offset: 802
    00000324: 	movq	%r14, %rsi
    00000327: 	movq	%rbp, %rdi
    0000032a: 	callq	"_ZN9benchmark9quicksortIP13TypeSub2ClassIdEEEvT_S4_.part.0/1" # Offset: 810
.Ltmp931:
    0000032f: 	movq	%r13, %rax
    00000332: 	subq	%r14, %rax
    00000335: 	cmpq	$0x8, %rax
    00000339: 	jle	.Ltmp925 # Offset: 825
    0000033b: 	movq	%r13, %rsi
    0000033e: 	movq	%r14, %rdi
    00000341: 	callq	"_ZN9benchmark9quicksortIP13TypeSub2ClassIdEEEvT_S4_.part.0/1" # Offset: 833
.Ltmp925:
    00000346: 	movq	%r12, %rax
    00000349: 	subq	%r13, %rax
    0000034c: 	cmpq	$0x8, %rax
    00000350: 	jle	.Ltmp932 # Offset: 848
    00000356: 	movsd	(%r13), %xmm0
    0000035c: 	movq	%r12, %rbp
    0000035f: 	movq	%r13, %rax
    00000362: 	nopw	(%rax,%rax) # Size: 6
.Ltmp937:
    00000368: 	movsd	-0x8(%rbp), %xmm1
    0000036d: 	leaq	-0x8(%rbp), %rdx
    00000371: 	comisd	%xmm0, %xmm1
    00000375: 	ja	.Ltmp933 # Offset: 885
    00000377: 	cmpq	%rax, %rdx
    0000037a: 	jbe	.Ltmp934 # Offset: 890
    00000380: 	comisd	(%rax), %xmm0
    00000384: 	jbe	.Ltmp935 # Offset: 900
    00000386: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp936:
    00000390: 	addq	$0x8, %rax
    00000394: 	comisd	(%rax), %xmm0
    00000398: 	ja	.Ltmp936 # Offset: 920
    0000039a: 	cmpq	%rax, %rdx
    0000039d: 	jbe	.Ltmp934 # Offset: 925
.Ltmp935:
    000003a3: 	movsd	(%rax), %xmm2
    000003a7: 	movsd	%xmm2, (%rdx)
    000003ab: 	movsd	%xmm1, (%rax)
.Ltmp933:
    000003af: 	movq	%rdx, %rbp
    000003b2: 	jmp	.Ltmp937 # Offset: 946
.Ltmp916:
    000003b4: 	movq	%rbp, %rax
    000003b7: 	subq	%r12, %rax
    000003ba: 	cmpq	$0x8, %rax
    000003be: 	jle	.Ltmp938 # Offset: 958
    000003c0: 	movsd	(%r12), %xmm0
    000003c6: 	movq	%rbp, %r13
    000003c9: 	movq	%r12, %rax
    000003cc: 	nopl	(%rax) # Size: 4
.Ltmp943:
    000003d0: 	movsd	-0x8(%r13), %xmm1
    000003d6: 	leaq	-0x8(%r13), %rdx
    000003da: 	comisd	%xmm0, %xmm1
    000003de: 	ja	.Ltmp939 # Offset: 990
    000003e0: 	cmpq	%rax, %rdx
    000003e3: 	jbe	.Ltmp940 # Offset: 995
    000003e5: 	comisd	(%rax), %xmm0
    000003e9: 	jbe	.Ltmp941 # Offset: 1001
    000003eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp942:
    000003f0: 	addq	$0x8, %rax
    000003f4: 	comisd	(%rax), %xmm0
    000003f8: 	ja	.Ltmp942 # Offset: 1016
    000003fa: 	cmpq	%rax, %rdx
    000003fd: 	jbe	.Ltmp940 # Offset: 1021
.Ltmp941:
    000003ff: 	movsd	(%rax), %xmm2
    00000403: 	movsd	%xmm2, (%rdx)
    00000407: 	movsd	%xmm1, (%rax)
.Ltmp939:
    0000040b: 	movq	%rdx, %r13
    0000040e: 	jmp	.Ltmp943 # Offset: 1038
.Ltmp940:
    00000410: 	movq	%r13, %rax
    00000413: 	subq	%r12, %rax
    00000416: 	cmpq	$0x8, %rax
    0000041a: 	jle	.Ltmp944 # Offset: 1050
    0000041c: 	movq	%r13, %rsi
    0000041f: 	movq	%r12, %rdi
    00000422: 	callq	"_ZN9benchmark9quicksortIP13TypeSub2ClassIdEEEvT_S4_.part.0/1" # Offset: 1058
.Ltmp944:
    00000427: 	movq	%rbp, %rax
    0000042a: 	subq	%r13, %rax
    0000042d: 	cmpq	$0x8, %rax
    00000431: 	jle	.Ltmp938 # Offset: 1073
    00000433: 	movq	%rbp, %rsi
    00000436: 	movq	%r13, %rdi
    00000439: 	callq	"_ZN9benchmark9quicksortIP13TypeSub2ClassIdEEEvT_S4_.part.0/1" # Offset: 1081
.Ltmp938:
    0000043e: 	movq	%rbx, %rax
    00000441: 	subq	%rbp, %rax
    00000444: 	cmpq	$0x8, %rax
    00000448: 	jle	.Ltmp897 # Offset: 1096
    0000044e: 	movsd	(%rbp), %xmm0
    00000453: 	movq	%rbx, %r13
    00000456: 	movq	%rbp, %rax
    00000459: 	nopl	(%rax) # Size: 7
.Ltmp949:
    00000460: 	movsd	-0x8(%r13), %xmm1
    00000466: 	leaq	-0x8(%r13), %rdx
    0000046a: 	comisd	%xmm0, %xmm1
    0000046e: 	ja	.Ltmp945 # Offset: 1134
    00000470: 	cmpq	%rax, %rdx
    00000473: 	jbe	.Ltmp946 # Offset: 1139
    00000479: 	comisd	(%rax), %xmm0
    0000047d: 	jbe	.Ltmp947 # Offset: 1149
    0000047f: 	nop # Size: 1
.Ltmp948:
    00000480: 	addq	$0x8, %rax
    00000484: 	comisd	(%rax), %xmm0
    00000488: 	ja	.Ltmp948 # Offset: 1160
    0000048a: 	cmpq	%rax, %rdx
    0000048d: 	jbe	.Ltmp946 # Offset: 1165
.Ltmp947:
    00000493: 	movsd	(%rax), %xmm2
    00000497: 	movsd	%xmm2, (%rdx)
    0000049b: 	movsd	%xmm1, (%rax)
.Ltmp945:
    0000049f: 	movq	%rdx, %r13
    000004a2: 	jmp	.Ltmp949 # Offset: 1186
.Ltmp911:
    000004a4: 	movq	%r14, %rax
    000004a7: 	subq	%r13, %rax
    000004aa: 	cmpq	$0x8, %rax
    000004ae: 	jle	.Ltmp950 # Offset: 1198
    000004b0: 	movsd	(%r13), %xmm0
    000004b6: 	movq	%r14, %r15
    000004b9: 	movq	%r13, %rax
    000004bc: 	nopl	(%rax) # Size: 4
.Ltmp955:
    000004c0: 	movsd	-0x8(%r15), %xmm1
    000004c6: 	leaq	-0x8(%r15), %rdx
    000004ca: 	comisd	%xmm0, %xmm1
    000004ce: 	ja	.Ltmp951 # Offset: 1230
    000004d0: 	cmpq	%rax, %rdx
    000004d3: 	jbe	.Ltmp952 # Offset: 1235
    000004d5: 	comisd	(%rax), %xmm0
    000004d9: 	jbe	.Ltmp953 # Offset: 1241
    000004db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp954:
    000004e0: 	addq	$0x8, %rax
    000004e4: 	comisd	(%rax), %xmm0
    000004e8: 	ja	.Ltmp954 # Offset: 1256
    000004ea: 	cmpq	%rax, %rdx
    000004ed: 	jbe	.Ltmp952 # Offset: 1261
.Ltmp953:
    000004ef: 	movsd	(%rax), %xmm2
    000004f3: 	movsd	%xmm2, (%rdx)
    000004f7: 	movsd	%xmm1, (%rax)
.Ltmp951:
    000004fb: 	movq	%rdx, %r15
    000004fe: 	jmp	.Ltmp955 # Offset: 1278
.Ltmp952:
    00000500: 	movq	%r15, %rax
    00000503: 	subq	%r13, %rax
    00000506: 	cmpq	$0x8, %rax
    0000050a: 	jle	.Ltmp956 # Offset: 1290
    0000050c: 	movq	%r15, %rsi
    0000050f: 	movq	%r13, %rdi
    00000512: 	callq	"_ZN9benchmark9quicksortIP13TypeSub2ClassIdEEEvT_S4_.part.0/1" # Offset: 1298
.Ltmp956:
    00000517: 	movq	%r14, %rax
    0000051a: 	subq	%r15, %rax
    0000051d: 	cmpq	$0x8, %rax
    00000521: 	jle	.Ltmp950 # Offset: 1313
    00000523: 	movq	%r14, %rsi
    00000526: 	movq	%r15, %rdi
    00000529: 	callq	"_ZN9benchmark9quicksortIP13TypeSub2ClassIdEEEvT_S4_.part.0/1" # Offset: 1321
.Ltmp950:
    0000052e: 	movq	%r12, %rax
    00000531: 	subq	%r14, %rax
    00000534: 	cmpq	$0x8, %rax
    00000538: 	jle	.Ltmp957 # Offset: 1336
    0000053e: 	movsd	(%r14), %xmm0
    00000543: 	movq	%r12, %r13
    00000546: 	movq	%r14, %rax
    00000549: 	nopl	(%rax) # Size: 7
.Ltmp962:
    00000550: 	movsd	-0x8(%r13), %xmm1
    00000556: 	leaq	-0x8(%r13), %rdx
    0000055a: 	comisd	%xmm0, %xmm1
    0000055e: 	ja	.Ltmp958 # Offset: 1374
    00000560: 	cmpq	%rax, %rdx
    00000563: 	jbe	.Ltmp959 # Offset: 1379
    00000569: 	comisd	(%rax), %xmm0
    0000056d: 	jbe	.Ltmp960 # Offset: 1389
    0000056f: 	nop # Size: 1
.Ltmp961:
    00000570: 	addq	$0x8, %rax
    00000574: 	comisd	(%rax), %xmm0
    00000578: 	ja	.Ltmp961 # Offset: 1400
    0000057a: 	cmpq	%rax, %rdx
    0000057d: 	jbe	.Ltmp959 # Offset: 1405
.Ltmp960:
    00000583: 	movsd	(%rax), %xmm2
    00000587: 	movsd	%xmm2, (%rdx)
    0000058b: 	movsd	%xmm1, (%rax)
.Ltmp958:
    0000058f: 	movq	%rdx, %r13
    00000592: 	jmp	.Ltmp962 # Offset: 1426
.Ltmp906:
    00000594: 	movq	%r13, %rax
    00000597: 	subq	%r12, %rax
    0000059a: 	cmpq	$0x8, %rax
    0000059e: 	jle	.Ltmp963 # Offset: 1438
    000005a0: 	movsd	(%r12), %xmm0
    000005a6: 	movq	%r13, %r14
    000005a9: 	movq	%r12, %rax
    000005ac: 	nopl	(%rax) # Size: 4
.Ltmp968:
    000005b0: 	movsd	-0x8(%r14), %xmm1
    000005b6: 	leaq	-0x8(%r14), %rdx
    000005ba: 	comisd	%xmm0, %xmm1
    000005be: 	ja	.Ltmp964 # Offset: 1470
    000005c0: 	cmpq	%rax, %rdx
    000005c3: 	jbe	.Ltmp965 # Offset: 1475
    000005c5: 	comisd	(%rax), %xmm0
    000005c9: 	jbe	.Ltmp966 # Offset: 1481
    000005cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp967:
    000005d0: 	addq	$0x8, %rax
    000005d4: 	comisd	(%rax), %xmm0
    000005d8: 	ja	.Ltmp967 # Offset: 1496
    000005da: 	cmpq	%rax, %rdx
    000005dd: 	jbe	.Ltmp965 # Offset: 1501
.Ltmp966:
    000005df: 	movsd	(%rax), %xmm2
    000005e3: 	movsd	%xmm2, (%rdx)
    000005e7: 	movsd	%xmm1, (%rax)
.Ltmp964:
    000005eb: 	movq	%rdx, %r14
    000005ee: 	jmp	.Ltmp968 # Offset: 1518
.Ltmp965:
    000005f0: 	movq	%r14, %rax
    000005f3: 	subq	%r12, %rax
    000005f6: 	cmpq	$0x8, %rax
    000005fa: 	jle	.Ltmp969 # Offset: 1530
    000005fc: 	movq	%r14, %rsi
    000005ff: 	movq	%r12, %rdi
    00000602: 	callq	"_ZN9benchmark9quicksortIP13TypeSub2ClassIdEEEvT_S4_.part.0/1" # Offset: 1538
.Ltmp969:
    00000607: 	movq	%r13, %rax
    0000060a: 	subq	%r14, %rax
    0000060d: 	cmpq	$0x8, %rax
    00000611: 	jle	.Ltmp963 # Offset: 1553
    00000613: 	movq	%r13, %rsi
    00000616: 	movq	%r14, %rdi
    00000619: 	callq	"_ZN9benchmark9quicksortIP13TypeSub2ClassIdEEEvT_S4_.part.0/1" # Offset: 1561
.Ltmp963:
    0000061e: 	movq	%rbp, %rax
    00000621: 	subq	%r13, %rax
    00000624: 	cmpq	$0x8, %rax
    00000628: 	jle	.Ltmp889 # Offset: 1576
    0000062e: 	movsd	(%r13), %xmm0
    00000634: 	movq	%rbp, %r12
    00000637: 	movq	%r13, %rax
    0000063a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp974:
    00000640: 	movsd	-0x8(%r12), %xmm1
    00000647: 	leaq	-0x8(%r12), %rdx
    0000064c: 	comisd	%xmm0, %xmm1
    00000650: 	ja	.Ltmp970 # Offset: 1616
    00000652: 	cmpq	%rax, %rdx
    00000655: 	jbe	.Ltmp971 # Offset: 1621
    0000065b: 	comisd	(%rax), %xmm0
    0000065f: 	jbe	.Ltmp972 # Offset: 1631
    00000661: 	nopl	(%rax) # Size: 7
.Ltmp973:
    00000668: 	addq	$0x8, %rax
    0000066c: 	comisd	(%rax), %xmm0
    00000670: 	ja	.Ltmp973 # Offset: 1648
    00000672: 	cmpq	%rax, %rdx
    00000675: 	jbe	.Ltmp971 # Offset: 1653
.Ltmp972:
    0000067b: 	movsd	(%rax), %xmm2
    0000067f: 	movsd	%xmm2, (%rdx)
    00000683: 	movsd	%xmm1, (%rax)
.Ltmp970:
    00000687: 	movq	%rdx, %r12
    0000068a: 	jmp	.Ltmp974 # Offset: 1674
.Ltmp934:
    0000068c: 	movq	%rbp, %rax
    0000068f: 	subq	%r13, %rax
    00000692: 	cmpq	$0x8, %rax
    00000696: 	jle	.Ltmp975 # Offset: 1686
    00000698: 	movq	%rbp, %rsi
    0000069b: 	movq	%r13, %rdi
    0000069e: 	callq	"_ZN9benchmark9quicksortIP13TypeSub2ClassIdEEEvT_S4_.part.0/1" # Offset: 1694
.Ltmp975:
    000006a3: 	movq	%r12, %rax
    000006a6: 	subq	%rbp, %rax
    000006a9: 	cmpq	$0x8, %rax
    000006ad: 	jle	.Ltmp932 # Offset: 1709
    000006b3: 	movq	%r12, %rsi
    000006b6: 	movq	%rbp, %rdi
    000006b9: 	callq	"_ZN9benchmark9quicksortIP13TypeSub2ClassIdEEEvT_S4_.part.0/1" # Offset: 1721
    000006be: 	jmp	.Ltmp932 # Offset: 1726
.Ltmp946:
    000006c3: 	movq	%r13, %rax
    000006c6: 	subq	%rbp, %rax
    000006c9: 	cmpq	$0x8, %rax
    000006cd: 	jle	.Ltmp976 # Offset: 1741
    000006cf: 	movq	%r13, %rsi
    000006d2: 	movq	%rbp, %rdi
    000006d5: 	callq	"_ZN9benchmark9quicksortIP13TypeSub2ClassIdEEEvT_S4_.part.0/1" # Offset: 1749
.Ltmp976:
    000006da: 	movq	%rbx, %rax
    000006dd: 	subq	%r13, %rax
    000006e0: 	cmpq	$0x8, %rax
    000006e4: 	jg	.Ltmp977 # Offset: 1764
    000006ea: 	jmp	.Ltmp897 # Offset: 1770
.Ltmp959:
    000006ef: 	movq	%r13, %rax
    000006f2: 	subq	%r14, %rax
    000006f5: 	cmpq	$0x8, %rax
    000006f9: 	jle	.Ltmp978 # Offset: 1785
    000006fb: 	movq	%r13, %rsi
    000006fe: 	movq	%r14, %rdi
    00000701: 	callq	"_ZN9benchmark9quicksortIP13TypeSub2ClassIdEEEvT_S4_.part.0/1" # Offset: 1793
.Ltmp978:
    00000706: 	movq	%r12, %rax
    00000709: 	subq	%r13, %rax
    0000070c: 	cmpq	$0x8, %rax
    00000710: 	jle	.Ltmp957 # Offset: 1808
    00000716: 	movq	%r12, %rsi
    00000719: 	movq	%r13, %rdi
    0000071c: 	callq	"_ZN9benchmark9quicksortIP13TypeSub2ClassIdEEEvT_S4_.part.0/1" # Offset: 1820
    00000721: 	jmp	.Ltmp957 # Offset: 1825
.Ltmp971:
    00000726: 	movq	%r12, %rax
    00000729: 	subq	%r13, %rax
    0000072c: 	cmpq	$0x8, %rax
    00000730: 	jle	.Ltmp979 # Offset: 1840
    00000732: 	movq	%r12, %rsi
    00000735: 	movq	%r13, %rdi
    00000738: 	callq	"_ZN9benchmark9quicksortIP13TypeSub2ClassIdEEEvT_S4_.part.0/1" # Offset: 1848
.Ltmp979:
    0000073d: 	movq	%rbp, %rax
    00000740: 	subq	%r12, %rax
    00000743: 	cmpq	$0x8, %rax
    00000747: 	jle	.Ltmp889 # Offset: 1863
    0000074d: 	movq	%rbp, %rsi
    00000750: 	movq	%r12, %rdi
    00000753: 	callq	"_ZN9benchmark9quicksortIP13TypeSub2ClassIdEEEvT_S4_.part.0/1" # Offset: 1875
    00000758: 	jmp	.Ltmp889 # Offset: 1880
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIP13TypeSub2ClassIdEEEvT_S4_.part.0/1(*2)"

Binary Function "_ZN9benchmark9quicksortIP12TypeSubClassImEEEvT_S4_.part.0/1(*2)" after disassembly {
  All names   : _ZN9benchmark9quicksortIP12TypeSubClassImEEEvT_S4_.part.0/1
                _ZN9benchmark9quicksortIP12TypeSubClassImEEEvT_S4_.part.0/stepanov_inherit.cpp/1
  Number      : 94
  State       : disassembled
  Address     : 0x7ca0
  Size        : 0x6d9
  MaxSize     : 0x6e0
  Offset      : 0x7ca0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIP12TypeSubClassImEEEvT_S4_.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB093:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	movq	%rdi, %r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rsi, %rbx
    00000010: 	subq	$0x8, %rsp
.Ltmp1073:
    00000014: 	movq	(%r12), %rdx
    00000018: 	movq	%rbx, %rbp
    0000001b: 	movq	%r12, %rax
    0000001e: 	nop # Size: 2
.Ltmp984:
    00000020: 	movq	-0x8(%rbp), %rcx
    00000024: 	leaq	-0x8(%rbp), %rsi
    00000028: 	cmpq	%rcx, %rdx
    0000002b: 	jb	.Ltmp980 # Offset: 43
    0000002d: 	cmpq	%rax, %rsi
    00000030: 	jbe	.Ltmp981 # Offset: 48
    00000032: 	cmpq	(%rax), %rdx
    00000035: 	jbe	.Ltmp982 # Offset: 53
    00000037: 	nopw	(%rax,%rax) # Size: 9
.Ltmp983:
    00000040: 	addq	$0x8, %rax
    00000044: 	cmpq	(%rax), %rdx
    00000047: 	ja	.Ltmp983 # Offset: 71
    00000049: 	cmpq	%rax, %rsi
    0000004c: 	jbe	.Ltmp981 # Offset: 76
.Ltmp982:
    0000004e: 	movq	(%rax), %rdi
    00000051: 	movq	%rdi, (%rsi)
    00000054: 	movq	%rcx, (%rax)
.Ltmp980:
    00000057: 	movq	%rsi, %rbp
    0000005a: 	jmp	.Ltmp984 # Offset: 90
    0000005c: 	nopl	(%rax) # Size: 4
.Ltmp981:
    00000060: 	movq	%rbp, %rax
    00000063: 	subq	%r12, %rax
    00000066: 	cmpq	$0x8, %rax
    0000006a: 	jle	.Ltmp985 # Offset: 106
    0000006c: 	movq	(%r12), %rdx
    00000070: 	movq	%rbp, %r13
    00000073: 	movq	%r12, %rax
    00000076: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp990:
    00000080: 	leaq	-0x8(%r13), %rsi
    00000084: 	cmpq	%rcx, %rdx
    00000087: 	jb	.Ltmp986 # Offset: 135
    00000089: 	cmpq	%rax, %rsi
    0000008c: 	jbe	.Ltmp987 # Offset: 140
    0000008e: 	cmpq	(%rax), %rdx
    00000091: 	jbe	.Ltmp988 # Offset: 145
    00000093: 	nopl	(%rax,%rax) # Size: 5
.Ltmp989:
    00000098: 	addq	$0x8, %rax
    0000009c: 	cmpq	(%rax), %rdx
    0000009f: 	ja	.Ltmp989 # Offset: 159
    000000a1: 	cmpq	%rax, %rsi
    000000a4: 	jbe	.Ltmp987 # Offset: 164
.Ltmp988:
    000000a6: 	movq	(%rax), %rdi
    000000a9: 	movq	%rdi, (%rsi)
    000000ac: 	movq	%rcx, (%rax)
.Ltmp986:
    000000af: 	movq	-0x8(%rsi), %rcx
    000000b3: 	movq	%rsi, %r13
    000000b6: 	jmp	.Ltmp990 # Offset: 182
.Ltmp987:
    000000b8: 	movq	%r13, %rax
    000000bb: 	subq	%r12, %rax
    000000be: 	cmpq	$0x8, %rax
    000000c2: 	jg	.Ltmp991 # Offset: 194
.Ltmp1053:
    000000c8: 	movq	%rbp, %rax
    000000cb: 	subq	%r13, %rax
    000000ce: 	cmpq	$0x8, %rax
    000000d2: 	jg	.Ltmp992 # Offset: 210
.Ltmp985:
    000000d8: 	movq	%rbx, %rax
    000000db: 	subq	%rbp, %rax
    000000de: 	cmpq	$0x8, %rax
    000000e2: 	jle	.Ltmp993 # Offset: 226
    000000e4: 	movq	(%rbp), %rdx
    000000e8: 	movq	%rbx, %r12
    000000eb: 	movq	%rbp, %rax
    000000ee: 	nop # Size: 2
.Ltmp998:
    000000f0: 	movq	-0x8(%r12), %rcx
    000000f5: 	leaq	-0x8(%r12), %rsi
    000000fa: 	cmpq	%rcx, %rdx
    000000fd: 	jb	.Ltmp994 # Offset: 253
    000000ff: 	cmpq	%rax, %rsi
    00000102: 	jbe	.Ltmp995 # Offset: 258
    00000104: 	cmpq	(%rax), %rdx
    00000107: 	jbe	.Ltmp996 # Offset: 263
    00000109: 	nopl	(%rax) # Size: 7
.Ltmp997:
    00000110: 	addq	$0x8, %rax
    00000114: 	cmpq	(%rax), %rdx
    00000117: 	ja	.Ltmp997 # Offset: 279
    00000119: 	cmpq	%rax, %rsi
    0000011c: 	jbe	.Ltmp995 # Offset: 284
.Ltmp996:
    0000011e: 	movq	(%rax), %rdi
    00000121: 	movq	%rdi, (%rsi)
    00000124: 	movq	%rcx, (%rax)
.Ltmp994:
    00000127: 	movq	%rsi, %r12
    0000012a: 	jmp	.Ltmp998 # Offset: 298
.Ltmp995:
    0000012c: 	movq	%r12, %rax
    0000012f: 	subq	%rbp, %rax
    00000132: 	cmpq	$0x8, %rax
    00000136: 	jg	.Ltmp999 # Offset: 310
.Ltmp1028:
    0000013c: 	movq	%rbx, %rax
    0000013f: 	subq	%r12, %rax
    00000142: 	cmpq	$0x8, %rax
    00000146: 	jg	.Ltmp1000 # Offset: 326
.Ltmp993:
    0000014c: 	addq	$0x8, %rsp
    00000150: 	popq	%rbx
    00000151: 	popq	%rbp
    00000152: 	popq	%r12
    00000154: 	popq	%r13
    00000156: 	popq	%r14
    00000158: 	popq	%r15
    0000015a: 	retq # Offset: 346
.Ltmp992:
    0000015b: 	movq	(%r13), %rdx
    0000015f: 	movq	%rbp, %r12
    00000162: 	movq	%r13, %rax
    00000165: 	nopl	(%rax) # Size: 3
.Ltmp1005:
    00000168: 	movq	-0x8(%r12), %rsi
    0000016d: 	leaq	-0x8(%r12), %rcx
    00000172: 	cmpq	%rsi, %rdx
    00000175: 	jb	.Ltmp1001 # Offset: 373
    00000177: 	cmpq	%rax, %rcx
    0000017a: 	jbe	.Ltmp1002 # Offset: 378
    00000180: 	cmpq	(%rax), %rdx
    00000183: 	jbe	.Ltmp1003 # Offset: 387
    00000185: 	nopl	(%rax) # Size: 3
.Ltmp1004:
    00000188: 	addq	$0x8, %rax
    0000018c: 	cmpq	(%rax), %rdx
    0000018f: 	ja	.Ltmp1004 # Offset: 399
    00000191: 	cmpq	%rax, %rcx
    00000194: 	jbe	.Ltmp1002 # Offset: 404
.Ltmp1003:
    0000019a: 	movq	(%rax), %rdi
    0000019d: 	movq	%rdi, (%rcx)
    000001a0: 	movq	%rsi, (%rax)
.Ltmp1001:
    000001a3: 	movq	%rcx, %r12
    000001a6: 	jmp	.Ltmp1005 # Offset: 422
.Ltmp991:
    000001a8: 	movq	(%r12), %rdx
    000001ac: 	movq	%r13, %r14
    000001af: 	movq	%r12, %rax
    000001b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1010:
    000001b8: 	leaq	-0x8(%r14), %rsi
    000001bc: 	cmpq	%rcx, %rdx
    000001bf: 	jb	.Ltmp1006 # Offset: 447
    000001c1: 	cmpq	%rax, %rsi
    000001c4: 	jbe	.Ltmp1007 # Offset: 452
    000001ca: 	cmpq	%rdx, (%rax)
    000001cd: 	jae	.Ltmp1008 # Offset: 461
    000001cf: 	nop # Size: 1
.Ltmp1009:
    000001d0: 	addq	$0x8, %rax
    000001d4: 	cmpq	(%rax), %rdx
    000001d7: 	ja	.Ltmp1009 # Offset: 471
    000001d9: 	cmpq	%rax, %rsi
    000001dc: 	jbe	.Ltmp1007 # Offset: 476
.Ltmp1008:
    000001e2: 	movq	(%rax), %rdi
    000001e5: 	movq	%rdi, (%rsi)
    000001e8: 	movq	%rcx, (%rax)
.Ltmp1006:
    000001eb: 	movq	-0x8(%rsi), %rcx
    000001ef: 	movq	%rsi, %r14
    000001f2: 	jmp	.Ltmp1010 # Offset: 498
.Ltmp1000:
    000001f4: 	movq	(%r12), %rdx
    000001f8: 	movq	%rbx, %rbp
    000001fb: 	movq	%r12, %rax
    000001fe: 	nop # Size: 2
.Ltmp1015:
    00000200: 	movq	-0x8(%rbp), %rsi
    00000204: 	leaq	-0x8(%rbp), %rcx
    00000208: 	cmpq	%rsi, %rdx
    0000020b: 	jb	.Ltmp1011 # Offset: 523
    0000020d: 	cmpq	%rax, %rcx
    00000210: 	jbe	.Ltmp1012 # Offset: 528
    00000216: 	cmpq	%rdx, (%rax)
    00000219: 	jae	.Ltmp1013 # Offset: 537
    0000021b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1014:
    00000220: 	addq	$0x8, %rax
    00000224: 	cmpq	(%rax), %rdx
    00000227: 	ja	.Ltmp1014 # Offset: 551
    00000229: 	cmpq	%rax, %rcx
    0000022c: 	jbe	.Ltmp1012 # Offset: 556
.Ltmp1013:
    00000232: 	movq	(%rax), %rdi
    00000235: 	movq	%rdi, (%rcx)
    00000238: 	movq	%rsi, (%rax)
.Ltmp1011:
    0000023b: 	movq	%rcx, %rbp
    0000023e: 	jmp	.Ltmp1015 # Offset: 574
.Ltmp999:
    00000240: 	movq	(%rbp), %rdx
    00000244: 	movq	%r12, %r13
    00000247: 	movq	%rbp, %rax
    0000024a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1020:
    00000250: 	leaq	-0x8(%r13), %rsi
    00000254: 	cmpq	%rdx, %rcx
    00000257: 	ja	.Ltmp1016 # Offset: 599
    00000259: 	cmpq	%rax, %rsi
    0000025c: 	jbe	.Ltmp1017 # Offset: 604
    0000025e: 	cmpq	(%rax), %rdx
    00000261: 	jbe	.Ltmp1018 # Offset: 609
    00000263: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1019:
    00000268: 	addq	$0x8, %rax
    0000026c: 	cmpq	(%rax), %rdx
    0000026f: 	ja	.Ltmp1019 # Offset: 623
    00000271: 	cmpq	%rax, %rsi
    00000274: 	jbe	.Ltmp1017 # Offset: 628
.Ltmp1018:
    00000276: 	movq	(%rax), %rdi
    00000279: 	movq	%rdi, (%rsi)
    0000027c: 	movq	%rcx, (%rax)
.Ltmp1016:
    0000027f: 	movq	-0x8(%rsi), %rcx
    00000283: 	movq	%rsi, %r13
    00000286: 	jmp	.Ltmp1020 # Offset: 646
.Ltmp1017:
    00000288: 	movq	%r13, %rax
    0000028b: 	subq	%rbp, %rax
    0000028e: 	cmpq	$0x8, %rax
    00000292: 	jle	.Ltmp1021 # Offset: 658
    00000294: 	movq	(%rbp), %rdx
    00000298: 	movq	%r13, %r14
    0000029b: 	movq	%rbp, %rax
    0000029e: 	nop # Size: 2
.Ltmp1026:
    000002a0: 	movq	-0x8(%r14), %rsi
    000002a4: 	leaq	-0x8(%r14), %rcx
    000002a8: 	cmpq	%rsi, %rdx
    000002ab: 	jb	.Ltmp1022 # Offset: 683
    000002ad: 	cmpq	%rax, %rcx
    000002b0: 	jbe	.Ltmp1023 # Offset: 688
    000002b2: 	cmpq	(%rax), %rdx
    000002b5: 	jbe	.Ltmp1024 # Offset: 693
    000002b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1025:
    000002c0: 	addq	$0x8, %rax
    000002c4: 	cmpq	(%rax), %rdx
    000002c7: 	ja	.Ltmp1025 # Offset: 711
    000002c9: 	cmpq	%rax, %rcx
    000002cc: 	jbe	.Ltmp1023 # Offset: 716
.Ltmp1024:
    000002ce: 	movq	(%rax), %rdi
    000002d1: 	movq	%rdi, (%rcx)
    000002d4: 	movq	%rsi, (%rax)
.Ltmp1022:
    000002d7: 	movq	%rcx, %r14
    000002da: 	jmp	.Ltmp1026 # Offset: 730
.Ltmp1023:
    000002dc: 	movq	%r14, %rax
    000002df: 	subq	%rbp, %rax
    000002e2: 	cmpq	$0x8, %rax
    000002e6: 	jle	.Ltmp1027 # Offset: 742
    000002e8: 	movq	%r14, %rsi
    000002eb: 	movq	%rbp, %rdi
    000002ee: 	callq	"_ZN9benchmark9quicksortIP12TypeSubClassImEEEvT_S4_.part.0/1" # Offset: 750
.Ltmp1027:
    000002f3: 	movq	%r13, %rax
    000002f6: 	subq	%r14, %rax
    000002f9: 	cmpq	$0x8, %rax
    000002fd: 	jle	.Ltmp1021 # Offset: 765
    000002ff: 	movq	%r13, %rsi
    00000302: 	movq	%r14, %rdi
    00000305: 	callq	"_ZN9benchmark9quicksortIP12TypeSubClassImEEEvT_S4_.part.0/1" # Offset: 773
.Ltmp1021:
    0000030a: 	movq	%r12, %rax
    0000030d: 	subq	%r13, %rax
    00000310: 	cmpq	$0x8, %rax
    00000314: 	jle	.Ltmp1028 # Offset: 788
    0000031a: 	movq	(%r13), %rdx
    0000031e: 	movq	%r12, %rbp
    00000321: 	movq	%r13, %rax
    00000324: 	nopl	(%rax) # Size: 4
.Ltmp1033:
    00000328: 	movq	-0x8(%rbp), %rsi
    0000032c: 	leaq	-0x8(%rbp), %rcx
    00000330: 	cmpq	%rsi, %rdx
    00000333: 	jb	.Ltmp1029 # Offset: 819
    00000335: 	cmpq	%rax, %rcx
    00000338: 	jbe	.Ltmp1030 # Offset: 824
    0000033e: 	cmpq	%rdx, (%rax)
    00000341: 	jae	.Ltmp1031 # Offset: 833
    00000343: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1032:
    00000348: 	addq	$0x8, %rax
    0000034c: 	cmpq	(%rax), %rdx
    0000034f: 	ja	.Ltmp1032 # Offset: 847
    00000351: 	cmpq	%rax, %rcx
    00000354: 	jbe	.Ltmp1030 # Offset: 852
.Ltmp1031:
    0000035a: 	movq	(%rax), %rdi
    0000035d: 	movq	%rdi, (%rcx)
    00000360: 	movq	%rsi, (%rax)
.Ltmp1029:
    00000363: 	movq	%rcx, %rbp
    00000366: 	jmp	.Ltmp1033 # Offset: 870
.Ltmp1012:
    00000368: 	movq	%rbp, %rax
    0000036b: 	subq	%r12, %rax
    0000036e: 	cmpq	$0x8, %rax
    00000372: 	jle	.Ltmp1034 # Offset: 882
    00000374: 	movq	(%r12), %rdx
    00000378: 	movq	%rbp, %r13
    0000037b: 	movq	%r12, %rax
    0000037e: 	nop # Size: 2
.Ltmp1039:
    00000380: 	movq	-0x8(%r13), %rsi
    00000384: 	leaq	-0x8(%r13), %rcx
    00000388: 	cmpq	%rsi, %rdx
    0000038b: 	jb	.Ltmp1035 # Offset: 907
    0000038d: 	cmpq	%rax, %rcx
    00000390: 	jbe	.Ltmp1036 # Offset: 912
    00000392: 	cmpq	%rdx, (%rax)
    00000395: 	jae	.Ltmp1037 # Offset: 917
    00000397: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1038:
    000003a0: 	addq	$0x8, %rax
    000003a4: 	cmpq	(%rax), %rdx
    000003a7: 	ja	.Ltmp1038 # Offset: 935
    000003a9: 	cmpq	%rax, %rcx
    000003ac: 	jbe	.Ltmp1036 # Offset: 940
.Ltmp1037:
    000003ae: 	movq	(%rax), %rdi
    000003b1: 	movq	%rdi, (%rcx)
    000003b4: 	movq	%rsi, (%rax)
.Ltmp1035:
    000003b7: 	movq	%rcx, %r13
    000003ba: 	jmp	.Ltmp1039 # Offset: 954
.Ltmp1036:
    000003bc: 	movq	%r13, %rax
    000003bf: 	subq	%r12, %rax
    000003c2: 	cmpq	$0x8, %rax
    000003c6: 	jle	.Ltmp1040 # Offset: 966
    000003c8: 	movq	%r13, %rsi
    000003cb: 	movq	%r12, %rdi
    000003ce: 	callq	"_ZN9benchmark9quicksortIP12TypeSubClassImEEEvT_S4_.part.0/1" # Offset: 974
.Ltmp1040:
    000003d3: 	movq	%rbp, %rax
    000003d6: 	subq	%r13, %rax
    000003d9: 	cmpq	$0x8, %rax
    000003dd: 	jle	.Ltmp1034 # Offset: 989
    000003df: 	movq	%rbp, %rsi
    000003e2: 	movq	%r13, %rdi
    000003e5: 	callq	"_ZN9benchmark9quicksortIP12TypeSubClassImEEEvT_S4_.part.0/1" # Offset: 997
.Ltmp1034:
    000003ea: 	movq	%rbx, %rax
    000003ed: 	subq	%rbp, %rax
    000003f0: 	cmpq	$0x8, %rax
    000003f4: 	jle	.Ltmp993 # Offset: 1012
    000003fa: 	movq	(%rbp), %rdx
    000003fe: 	movq	%rbx, %r12
    00000401: 	movq	%rbp, %rax
    00000404: 	nopl	(%rax) # Size: 4
.Ltmp1045:
    00000408: 	movq	-0x8(%r12), %rsi
    0000040d: 	leaq	-0x8(%r12), %rcx
    00000412: 	cmpq	%rsi, %rdx
    00000415: 	jb	.Ltmp1041 # Offset: 1045
    00000417: 	cmpq	%rax, %rcx
    0000041a: 	jbe	.Ltmp1042 # Offset: 1050
    00000420: 	cmpq	(%rax), %rdx
    00000423: 	jbe	.Ltmp1043 # Offset: 1059
    00000425: 	nopl	(%rax) # Size: 3
.Ltmp1044:
    00000428: 	addq	$0x8, %rax
    0000042c: 	cmpq	(%rax), %rdx
    0000042f: 	ja	.Ltmp1044 # Offset: 1071
    00000431: 	cmpq	%rax, %rcx
    00000434: 	jbe	.Ltmp1042 # Offset: 1076
.Ltmp1043:
    0000043a: 	movq	(%rax), %rdi
    0000043d: 	movq	%rdi, (%rcx)
    00000440: 	movq	%rsi, (%rax)
.Ltmp1041:
    00000443: 	movq	%rcx, %r12
    00000446: 	jmp	.Ltmp1045 # Offset: 1094
.Ltmp1007:
    00000448: 	movq	%r14, %rax
    0000044b: 	subq	%r12, %rax
    0000044e: 	cmpq	$0x8, %rax
    00000452: 	jle	.Ltmp1046 # Offset: 1106
    00000454: 	movq	(%r12), %rdx
    00000458: 	movq	%r14, %r15
    0000045b: 	movq	%r12, %rax
    0000045e: 	nop # Size: 2
.Ltmp1051:
    00000460: 	movq	-0x8(%r15), %rsi
    00000464: 	leaq	-0x8(%r15), %rcx
    00000468: 	cmpq	%rsi, %rdx
    0000046b: 	jb	.Ltmp1047 # Offset: 1131
    0000046d: 	cmpq	%rax, %rcx
    00000470: 	jbe	.Ltmp1048 # Offset: 1136
    00000472: 	cmpq	(%rax), %rdx
    00000475: 	jbe	.Ltmp1049 # Offset: 1141
    00000477: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1050:
    00000480: 	addq	$0x8, %rax
    00000484: 	cmpq	(%rax), %rdx
    00000487: 	ja	.Ltmp1050 # Offset: 1159
    00000489: 	cmpq	%rax, %rcx
    0000048c: 	jbe	.Ltmp1048 # Offset: 1164
.Ltmp1049:
    0000048e: 	movq	(%rax), %rdi
    00000491: 	movq	%rdi, (%rcx)
    00000494: 	movq	%rsi, (%rax)
.Ltmp1047:
    00000497: 	movq	%rcx, %r15
    0000049a: 	jmp	.Ltmp1051 # Offset: 1178
.Ltmp1048:
    0000049c: 	movq	%r15, %rax
    0000049f: 	subq	%r12, %rax
    000004a2: 	cmpq	$0x8, %rax
    000004a6: 	jle	.Ltmp1052 # Offset: 1190
    000004a8: 	movq	%r15, %rsi
    000004ab: 	movq	%r12, %rdi
    000004ae: 	callq	"_ZN9benchmark9quicksortIP12TypeSubClassImEEEvT_S4_.part.0/1" # Offset: 1198
.Ltmp1052:
    000004b3: 	movq	%r14, %rax
    000004b6: 	subq	%r15, %rax
    000004b9: 	cmpq	$0x8, %rax
    000004bd: 	jle	.Ltmp1046 # Offset: 1213
    000004bf: 	movq	%r14, %rsi
    000004c2: 	movq	%r15, %rdi
    000004c5: 	callq	"_ZN9benchmark9quicksortIP12TypeSubClassImEEEvT_S4_.part.0/1" # Offset: 1221
.Ltmp1046:
    000004ca: 	movq	%r13, %rax
    000004cd: 	subq	%r14, %rax
    000004d0: 	cmpq	$0x8, %rax
    000004d4: 	jle	.Ltmp1053 # Offset: 1236
    000004da: 	movq	(%r14), %rdx
    000004dd: 	movq	%r13, %r12
    000004e0: 	movq	%r14, %rax
    000004e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1058:
    000004e8: 	movq	-0x8(%r12), %rsi
    000004ed: 	leaq	-0x8(%r12), %rcx
    000004f2: 	cmpq	%rsi, %rdx
    000004f5: 	jb	.Ltmp1054 # Offset: 1269
    000004f7: 	cmpq	%rax, %rcx
    000004fa: 	jbe	.Ltmp1055 # Offset: 1274
    00000500: 	cmpq	(%rax), %rdx
    00000503: 	jbe	.Ltmp1056 # Offset: 1283
    00000505: 	nopl	(%rax) # Size: 3
.Ltmp1057:
    00000508: 	addq	$0x8, %rax
    0000050c: 	cmpq	(%rax), %rdx
    0000050f: 	ja	.Ltmp1057 # Offset: 1295
    00000511: 	cmpq	%rax, %rcx
    00000514: 	jbe	.Ltmp1055 # Offset: 1300
.Ltmp1056:
    0000051a: 	movq	(%rax), %rdi
    0000051d: 	movq	%rdi, (%rcx)
    00000520: 	movq	%rsi, (%rax)
.Ltmp1054:
    00000523: 	movq	%rcx, %r12
    00000526: 	jmp	.Ltmp1058 # Offset: 1318
.Ltmp1002:
    00000528: 	movq	%r12, %rax
    0000052b: 	subq	%r13, %rax
    0000052e: 	cmpq	$0x8, %rax
    00000532: 	jle	.Ltmp1059 # Offset: 1330
    00000534: 	movq	(%r13), %rdx
    00000538: 	movq	%r12, %r14
    0000053b: 	movq	%r13, %rax
    0000053e: 	nop # Size: 2
.Ltmp1064:
    00000540: 	movq	-0x8(%r14), %rsi
    00000544: 	leaq	-0x8(%r14), %rcx
    00000548: 	cmpq	%rsi, %rdx
    0000054b: 	jb	.Ltmp1060 # Offset: 1355
    0000054d: 	cmpq	%rax, %rcx
    00000550: 	jbe	.Ltmp1061 # Offset: 1360
    00000552: 	cmpq	(%rax), %rdx
    00000555: 	jbe	.Ltmp1062 # Offset: 1365
    00000557: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1063:
    00000560: 	addq	$0x8, %rax
    00000564: 	cmpq	(%rax), %rdx
    00000567: 	ja	.Ltmp1063 # Offset: 1383
    00000569: 	cmpq	%rax, %rcx
    0000056c: 	jbe	.Ltmp1061 # Offset: 1388
.Ltmp1062:
    0000056e: 	movq	(%rax), %rdi
    00000571: 	movq	%rdi, (%rcx)
    00000574: 	movq	%rsi, (%rax)
.Ltmp1060:
    00000577: 	movq	%rcx, %r14
    0000057a: 	jmp	.Ltmp1064 # Offset: 1402
.Ltmp1061:
    0000057c: 	movq	%r14, %rax
    0000057f: 	subq	%r13, %rax
    00000582: 	cmpq	$0x8, %rax
    00000586: 	jle	.Ltmp1065 # Offset: 1414
    00000588: 	movq	%r14, %rsi
    0000058b: 	movq	%r13, %rdi
    0000058e: 	callq	"_ZN9benchmark9quicksortIP12TypeSubClassImEEEvT_S4_.part.0/1" # Offset: 1422
.Ltmp1065:
    00000593: 	movq	%r12, %rax
    00000596: 	subq	%r14, %rax
    00000599: 	cmpq	$0x8, %rax
    0000059d: 	jle	.Ltmp1059 # Offset: 1437
    0000059f: 	movq	%r12, %rsi
    000005a2: 	movq	%r14, %rdi
    000005a5: 	callq	"_ZN9benchmark9quicksortIP12TypeSubClassImEEEvT_S4_.part.0/1" # Offset: 1445
.Ltmp1059:
    000005aa: 	movq	%rbp, %rax
    000005ad: 	subq	%r12, %rax
    000005b0: 	cmpq	$0x8, %rax
    000005b4: 	jle	.Ltmp985 # Offset: 1460
    000005ba: 	movq	(%r12), %rdx
    000005be: 	movq	%rbp, %r13
    000005c1: 	movq	%r12, %rax
    000005c4: 	nopl	(%rax) # Size: 4
.Ltmp1070:
    000005c8: 	movq	-0x8(%r13), %rsi
    000005cc: 	leaq	-0x8(%r13), %rcx
    000005d0: 	cmpq	%rsi, %rdx
    000005d3: 	jb	.Ltmp1066 # Offset: 1491
    000005d5: 	cmpq	%rax, %rcx
    000005d8: 	jbe	.Ltmp1067 # Offset: 1496
    000005de: 	cmpq	(%rax), %rdx
    000005e1: 	jbe	.Ltmp1068 # Offset: 1505
    000005e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1069:
    000005e8: 	addq	$0x8, %rax
    000005ec: 	cmpq	(%rax), %rdx
    000005ef: 	ja	.Ltmp1069 # Offset: 1519
    000005f1: 	cmpq	%rax, %rcx
    000005f4: 	jbe	.Ltmp1067 # Offset: 1524
.Ltmp1068:
    000005fa: 	movq	(%rax), %rdi
    000005fd: 	movq	%rdi, (%rcx)
    00000600: 	movq	%rsi, (%rax)
.Ltmp1066:
    00000603: 	movq	%rcx, %r13
    00000606: 	jmp	.Ltmp1070 # Offset: 1542
.Ltmp1030:
    00000608: 	movq	%rbp, %rax
    0000060b: 	subq	%r13, %rax
    0000060e: 	cmpq	$0x8, %rax
    00000612: 	jle	.Ltmp1071 # Offset: 1554
    00000614: 	movq	%rbp, %rsi
    00000617: 	movq	%r13, %rdi
    0000061a: 	callq	"_ZN9benchmark9quicksortIP12TypeSubClassImEEEvT_S4_.part.0/1" # Offset: 1562
.Ltmp1071:
    0000061f: 	movq	%r12, %rax
    00000622: 	subq	%rbp, %rax
    00000625: 	cmpq	$0x8, %rax
    00000629: 	jle	.Ltmp1028 # Offset: 1577
    0000062f: 	movq	%r12, %rsi
    00000632: 	movq	%rbp, %rdi
    00000635: 	callq	"_ZN9benchmark9quicksortIP12TypeSubClassImEEEvT_S4_.part.0/1" # Offset: 1589
    0000063a: 	jmp	.Ltmp1028 # Offset: 1594
.Ltmp1042:
    0000063f: 	movq	%r12, %rax
    00000642: 	subq	%rbp, %rax
    00000645: 	cmpq	$0x8, %rax
    00000649: 	jle	.Ltmp1072 # Offset: 1609
    0000064b: 	movq	%r12, %rsi
    0000064e: 	movq	%rbp, %rdi
    00000651: 	callq	"_ZN9benchmark9quicksortIP12TypeSubClassImEEEvT_S4_.part.0/1" # Offset: 1617
.Ltmp1072:
    00000656: 	movq	%rbx, %rax
    00000659: 	subq	%r12, %rax
    0000065c: 	cmpq	$0x8, %rax
    00000660: 	jg	.Ltmp1073 # Offset: 1632
    00000666: 	jmp	.Ltmp993 # Offset: 1638
.Ltmp1055:
    0000066b: 	movq	%r12, %rax
    0000066e: 	subq	%r14, %rax
    00000671: 	cmpq	$0x8, %rax
    00000675: 	jle	.Ltmp1074 # Offset: 1653
    00000677: 	movq	%r12, %rsi
    0000067a: 	movq	%r14, %rdi
    0000067d: 	callq	"_ZN9benchmark9quicksortIP12TypeSubClassImEEEvT_S4_.part.0/1" # Offset: 1661
.Ltmp1074:
    00000682: 	movq	%r13, %rax
    00000685: 	subq	%r12, %rax
    00000688: 	cmpq	$0x8, %rax
    0000068c: 	jle	.Ltmp1053 # Offset: 1676
    00000692: 	movq	%r13, %rsi
    00000695: 	movq	%r12, %rdi
    00000698: 	callq	"_ZN9benchmark9quicksortIP12TypeSubClassImEEEvT_S4_.part.0/1" # Offset: 1688
    0000069d: 	jmp	.Ltmp1053 # Offset: 1693
.Ltmp1067:
    000006a2: 	movq	%r13, %rax
    000006a5: 	subq	%r12, %rax
    000006a8: 	cmpq	$0x8, %rax
    000006ac: 	jle	.Ltmp1075 # Offset: 1708
    000006ae: 	movq	%r13, %rsi
    000006b1: 	movq	%r12, %rdi
    000006b4: 	callq	"_ZN9benchmark9quicksortIP12TypeSubClassImEEEvT_S4_.part.0/1" # Offset: 1716
.Ltmp1075:
    000006b9: 	movq	%rbp, %rax
    000006bc: 	subq	%r13, %rax
    000006bf: 	cmpq	$0x8, %rax
    000006c3: 	jle	.Ltmp985 # Offset: 1731
    000006c9: 	movq	%rbp, %rsi
    000006cc: 	movq	%r13, %rdi
    000006cf: 	callq	"_ZN9benchmark9quicksortIP12TypeSubClassImEEEvT_S4_.part.0/1" # Offset: 1743
    000006d4: 	jmp	.Ltmp985 # Offset: 1748
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIP12TypeSubClassImEEEvT_S4_.part.0/1(*2)"

Binary Function "_ZN9benchmark9quicksortIP12TypeSubClassIdEEEvT_S4_.part.0/1(*2)" after disassembly {
  All names   : _ZN9benchmark9quicksortIP12TypeSubClassIdEEEvT_S4_.part.0/1
                _ZN9benchmark9quicksortIP12TypeSubClassIdEEEvT_S4_.part.0/stepanov_inherit.cpp/1
  Number      : 95
  State       : disassembled
  Address     : 0x8380
  Size        : 0x75d
  MaxSize     : 0x760
  Offset      : 0x8380
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIP12TypeSubClassIdEEEvT_S4_.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB094:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	movq	%rdi, %r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rsi, %rbx
    00000010: 	subq	$0x8, %rsp
.Ltmp1169:
    00000014: 	movsd	(%r13), %xmm0
    0000001a: 	movq	%rbx, %rbp
    0000001d: 	movq	%r13, %rax
.Ltmp1080:
    00000020: 	movsd	-0x8(%rbp), %xmm1
    00000025: 	leaq	-0x8(%rbp), %rdx
    00000029: 	comisd	%xmm0, %xmm1
    0000002d: 	ja	.Ltmp1076 # Offset: 45
    0000002f: 	cmpq	%rax, %rdx
    00000032: 	jbe	.Ltmp1077 # Offset: 50
    00000034: 	comisd	(%rax), %xmm0
    00000038: 	jbe	.Ltmp1078 # Offset: 56
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1079:
    00000040: 	addq	$0x8, %rax
    00000044: 	comisd	(%rax), %xmm0
    00000048: 	ja	.Ltmp1079 # Offset: 72
    0000004a: 	cmpq	%rax, %rdx
    0000004d: 	jbe	.Ltmp1077 # Offset: 77
.Ltmp1078:
    0000004f: 	movsd	(%rax), %xmm2
    00000053: 	movsd	%xmm2, (%rdx)
    00000057: 	movsd	%xmm1, (%rax)
.Ltmp1076:
    0000005b: 	movq	%rdx, %rbp
    0000005e: 	jmp	.Ltmp1080 # Offset: 94
.Ltmp1077:
    00000060: 	movq	%rbp, %rax
    00000063: 	subq	%r13, %rax
    00000066: 	cmpq	$0x8, %rax
    0000006a: 	jle	.Ltmp1081 # Offset: 106
    0000006c: 	movsd	(%r13), %xmm0
    00000072: 	movq	%rbp, %r12
    00000075: 	movq	%r13, %rax
    00000078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1086:
    00000080: 	comisd	%xmm0, %xmm1
    00000084: 	leaq	-0x8(%r12), %rdx
    00000089: 	ja	.Ltmp1082 # Offset: 137
    0000008b: 	cmpq	%rax, %rdx
    0000008e: 	jbe	.Ltmp1083 # Offset: 142
    00000090: 	comisd	(%rax), %xmm0
    00000094: 	jbe	.Ltmp1084 # Offset: 148
    00000096: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1085:
    000000a0: 	addq	$0x8, %rax
    000000a4: 	comisd	(%rax), %xmm0
    000000a8: 	ja	.Ltmp1085 # Offset: 168
    000000aa: 	cmpq	%rax, %rdx
    000000ad: 	jbe	.Ltmp1083 # Offset: 173
.Ltmp1084:
    000000af: 	movsd	(%rax), %xmm2
    000000b3: 	movsd	%xmm2, (%rdx)
    000000b7: 	movsd	%xmm1, (%rax)
.Ltmp1082:
    000000bb: 	movsd	-0x8(%rdx), %xmm1
    000000c0: 	movq	%rdx, %r12
    000000c3: 	jmp	.Ltmp1086 # Offset: 195
.Ltmp1083:
    000000c5: 	movq	%r12, %rax
    000000c8: 	subq	%r13, %rax
    000000cb: 	cmpq	$0x8, %rax
    000000cf: 	jg	.Ltmp1087 # Offset: 207
.Ltmp1149:
    000000d5: 	movq	%rbp, %rax
    000000d8: 	subq	%r12, %rax
    000000db: 	cmpq	$0x8, %rax
    000000df: 	jg	.Ltmp1088 # Offset: 223
.Ltmp1081:
    000000e5: 	movq	%rbx, %rax
    000000e8: 	subq	%rbp, %rax
    000000eb: 	cmpq	$0x8, %rax
    000000ef: 	jle	.Ltmp1089 # Offset: 239
    000000f1: 	movsd	(%rbp), %xmm0
    000000f6: 	movq	%rbx, %r12
    000000f9: 	movq	%rbp, %rax
    000000fc: 	nopl	(%rax) # Size: 4
.Ltmp1094:
    00000100: 	movsd	-0x8(%r12), %xmm1
    00000107: 	leaq	-0x8(%r12), %rdx
    0000010c: 	comisd	%xmm0, %xmm1
    00000110: 	ja	.Ltmp1090 # Offset: 272
    00000112: 	cmpq	%rax, %rdx
    00000115: 	jbe	.Ltmp1091 # Offset: 277
    00000117: 	comisd	(%rax), %xmm0
    0000011b: 	jbe	.Ltmp1092 # Offset: 283
    0000011d: 	nopl	(%rax) # Size: 3
.Ltmp1093:
    00000120: 	addq	$0x8, %rax
    00000124: 	comisd	(%rax), %xmm0
    00000128: 	ja	.Ltmp1093 # Offset: 296
    0000012a: 	cmpq	%rax, %rdx
    0000012d: 	jbe	.Ltmp1091 # Offset: 301
.Ltmp1092:
    0000012f: 	movsd	(%rax), %xmm2
    00000133: 	movsd	%xmm2, (%rdx)
    00000137: 	movsd	%xmm1, (%rax)
.Ltmp1090:
    0000013b: 	movq	%rdx, %r12
    0000013e: 	jmp	.Ltmp1094 # Offset: 318
.Ltmp1091:
    00000140: 	movq	%r12, %rax
    00000143: 	subq	%rbp, %rax
    00000146: 	cmpq	$0x8, %rax
    0000014a: 	jg	.Ltmp1095 # Offset: 330
.Ltmp1124:
    00000150: 	movq	%rbx, %rax
    00000153: 	subq	%r12, %rax
    00000156: 	cmpq	$0x8, %rax
    0000015a: 	jg	.Ltmp1096 # Offset: 346
.Ltmp1089:
    00000160: 	addq	$0x8, %rsp
    00000164: 	popq	%rbx
    00000165: 	popq	%rbp
    00000166: 	popq	%r12
    00000168: 	popq	%r13
    0000016a: 	popq	%r14
    0000016c: 	popq	%r15
    0000016e: 	retq # Offset: 366
.Ltmp1088:
    0000016f: 	movsd	(%r12), %xmm0
    00000175: 	movq	%rbp, %r13
    00000178: 	movq	%r12, %rax
    0000017b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1101:
    00000180: 	movsd	-0x8(%r13), %xmm1
    00000186: 	leaq	-0x8(%r13), %rdx
    0000018a: 	comisd	%xmm0, %xmm1
    0000018e: 	ja	.Ltmp1097 # Offset: 398
    00000190: 	cmpq	%rax, %rdx
    00000193: 	jbe	.Ltmp1098 # Offset: 403
    00000199: 	comisd	(%rax), %xmm0
    0000019d: 	jbe	.Ltmp1099 # Offset: 413
    0000019f: 	nop # Size: 1
.Ltmp1100:
    000001a0: 	addq	$0x8, %rax
    000001a4: 	comisd	(%rax), %xmm0
    000001a8: 	ja	.Ltmp1100 # Offset: 424
    000001aa: 	cmpq	%rax, %rdx
    000001ad: 	jbe	.Ltmp1098 # Offset: 429
.Ltmp1099:
    000001b3: 	movsd	(%rax), %xmm2
    000001b7: 	movsd	%xmm2, (%rdx)
    000001bb: 	movsd	%xmm1, (%rax)
.Ltmp1097:
    000001bf: 	movq	%rdx, %r13
    000001c2: 	jmp	.Ltmp1101 # Offset: 450
.Ltmp1087:
    000001c4: 	movsd	(%r13), %xmm0
    000001ca: 	movq	%r12, %r14
    000001cd: 	movq	%r13, %rax
.Ltmp1106:
    000001d0: 	comisd	%xmm0, %xmm1
    000001d4: 	leaq	-0x8(%r14), %rdx
    000001d8: 	ja	.Ltmp1102 # Offset: 472
    000001da: 	cmpq	%rax, %rdx
    000001dd: 	jbe	.Ltmp1103 # Offset: 477
    000001e3: 	comisd	(%rax), %xmm0
    000001e7: 	jbe	.Ltmp1104 # Offset: 487
    000001e9: 	nopl	(%rax) # Size: 7
.Ltmp1105:
    000001f0: 	addq	$0x8, %rax
    000001f4: 	comisd	(%rax), %xmm0
    000001f8: 	ja	.Ltmp1105 # Offset: 504
    000001fa: 	cmpq	%rax, %rdx
    000001fd: 	jbe	.Ltmp1103 # Offset: 509
.Ltmp1104:
    00000203: 	movsd	(%rax), %xmm2
    00000207: 	movsd	%xmm2, (%rdx)
    0000020b: 	movsd	%xmm1, (%rax)
.Ltmp1102:
    0000020f: 	movsd	-0x8(%rdx), %xmm1
    00000214: 	movq	%rdx, %r14
    00000217: 	jmp	.Ltmp1106 # Offset: 535
.Ltmp1096:
    00000219: 	movsd	(%r12), %xmm0
    0000021f: 	movq	%rbx, %rbp
    00000222: 	movq	%r12, %rax
    00000225: 	nopl	(%rax) # Size: 3
.Ltmp1111:
    00000228: 	movsd	-0x8(%rbp), %xmm1
    0000022d: 	leaq	-0x8(%rbp), %rdx
    00000231: 	comisd	%xmm0, %xmm1
    00000235: 	ja	.Ltmp1107 # Offset: 565
    00000237: 	cmpq	%rax, %rdx
    0000023a: 	jbe	.Ltmp1108 # Offset: 570
    00000240: 	comisd	(%rax), %xmm0
    00000244: 	jbe	.Ltmp1109 # Offset: 580
    00000246: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1110:
    00000250: 	addq	$0x8, %rax
    00000254: 	comisd	(%rax), %xmm0
    00000258: 	ja	.Ltmp1110 # Offset: 600
    0000025a: 	cmpq	%rax, %rdx
    0000025d: 	jbe	.Ltmp1108 # Offset: 605
.Ltmp1109:
    00000263: 	movsd	(%rax), %xmm2
    00000267: 	movsd	%xmm2, (%rdx)
    0000026b: 	movsd	%xmm1, (%rax)
.Ltmp1107:
    0000026f: 	movq	%rdx, %rbp
    00000272: 	jmp	.Ltmp1111 # Offset: 626
.Ltmp1095:
    00000274: 	movsd	(%rbp), %xmm0
    00000279: 	movq	%r12, %r13
    0000027c: 	movq	%rbp, %rax
    0000027f: 	nop # Size: 1
.Ltmp1116:
    00000280: 	comisd	%xmm0, %xmm1
    00000284: 	leaq	-0x8(%r13), %rdx
    00000288: 	ja	.Ltmp1112 # Offset: 648
    0000028a: 	cmpq	%rax, %rdx
    0000028d: 	jbe	.Ltmp1113 # Offset: 653
    0000028f: 	comisd	(%rax), %xmm0
    00000293: 	jbe	.Ltmp1114 # Offset: 659
    00000295: 	nopl	(%rax) # Size: 3
.Ltmp1115:
    00000298: 	addq	$0x8, %rax
    0000029c: 	comisd	(%rax), %xmm0
    000002a0: 	ja	.Ltmp1115 # Offset: 672
    000002a2: 	cmpq	%rax, %rdx
    000002a5: 	jbe	.Ltmp1113 # Offset: 677
.Ltmp1114:
    000002a7: 	movsd	(%rax), %xmm2
    000002ab: 	movsd	%xmm2, (%rdx)
    000002af: 	movsd	%xmm1, (%rax)
.Ltmp1112:
    000002b3: 	movsd	-0x8(%rdx), %xmm1
    000002b8: 	movq	%rdx, %r13
    000002bb: 	jmp	.Ltmp1116 # Offset: 699
.Ltmp1113:
    000002bd: 	movq	%r13, %rax
    000002c0: 	subq	%rbp, %rax
    000002c3: 	cmpq	$0x8, %rax
    000002c7: 	jle	.Ltmp1117 # Offset: 711
    000002c9: 	movsd	(%rbp), %xmm0
    000002ce: 	movq	%r13, %r14
    000002d1: 	movq	%rbp, %rax
    000002d4: 	nopl	(%rax) # Size: 4
.Ltmp1122:
    000002d8: 	movsd	-0x8(%r14), %xmm1
    000002de: 	leaq	-0x8(%r14), %rdx
    000002e2: 	comisd	%xmm0, %xmm1
    000002e6: 	ja	.Ltmp1118 # Offset: 742
    000002e8: 	cmpq	%rax, %rdx
    000002eb: 	jbe	.Ltmp1119 # Offset: 747
    000002ed: 	comisd	(%rax), %xmm0
    000002f1: 	jbe	.Ltmp1120 # Offset: 753
    000002f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1121:
    000002f8: 	addq	$0x8, %rax
    000002fc: 	comisd	(%rax), %xmm0
    00000300: 	ja	.Ltmp1121 # Offset: 768
    00000302: 	cmpq	%rax, %rdx
    00000305: 	jbe	.Ltmp1119 # Offset: 773
.Ltmp1120:
    00000307: 	movsd	(%rax), %xmm2
    0000030b: 	movsd	%xmm2, (%rdx)
    0000030f: 	movsd	%xmm1, (%rax)
.Ltmp1118:
    00000313: 	movq	%rdx, %r14
    00000316: 	jmp	.Ltmp1122 # Offset: 790
.Ltmp1119:
    00000318: 	movq	%r14, %rax
    0000031b: 	subq	%rbp, %rax
    0000031e: 	cmpq	$0x8, %rax
    00000322: 	jle	.Ltmp1123 # Offset: 802
    00000324: 	movq	%r14, %rsi
    00000327: 	movq	%rbp, %rdi
    0000032a: 	callq	"_ZN9benchmark9quicksortIP12TypeSubClassIdEEEvT_S4_.part.0/1" # Offset: 810
.Ltmp1123:
    0000032f: 	movq	%r13, %rax
    00000332: 	subq	%r14, %rax
    00000335: 	cmpq	$0x8, %rax
    00000339: 	jle	.Ltmp1117 # Offset: 825
    0000033b: 	movq	%r13, %rsi
    0000033e: 	movq	%r14, %rdi
    00000341: 	callq	"_ZN9benchmark9quicksortIP12TypeSubClassIdEEEvT_S4_.part.0/1" # Offset: 833
.Ltmp1117:
    00000346: 	movq	%r12, %rax
    00000349: 	subq	%r13, %rax
    0000034c: 	cmpq	$0x8, %rax
    00000350: 	jle	.Ltmp1124 # Offset: 848
    00000356: 	movsd	(%r13), %xmm0
    0000035c: 	movq	%r12, %rbp
    0000035f: 	movq	%r13, %rax
    00000362: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1129:
    00000368: 	movsd	-0x8(%rbp), %xmm1
    0000036d: 	leaq	-0x8(%rbp), %rdx
    00000371: 	comisd	%xmm0, %xmm1
    00000375: 	ja	.Ltmp1125 # Offset: 885
    00000377: 	cmpq	%rax, %rdx
    0000037a: 	jbe	.Ltmp1126 # Offset: 890
    00000380: 	comisd	(%rax), %xmm0
    00000384: 	jbe	.Ltmp1127 # Offset: 900
    00000386: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1128:
    00000390: 	addq	$0x8, %rax
    00000394: 	comisd	(%rax), %xmm0
    00000398: 	ja	.Ltmp1128 # Offset: 920
    0000039a: 	cmpq	%rax, %rdx
    0000039d: 	jbe	.Ltmp1126 # Offset: 925
.Ltmp1127:
    000003a3: 	movsd	(%rax), %xmm2
    000003a7: 	movsd	%xmm2, (%rdx)
    000003ab: 	movsd	%xmm1, (%rax)
.Ltmp1125:
    000003af: 	movq	%rdx, %rbp
    000003b2: 	jmp	.Ltmp1129 # Offset: 946
.Ltmp1108:
    000003b4: 	movq	%rbp, %rax
    000003b7: 	subq	%r12, %rax
    000003ba: 	cmpq	$0x8, %rax
    000003be: 	jle	.Ltmp1130 # Offset: 958
    000003c0: 	movsd	(%r12), %xmm0
    000003c6: 	movq	%rbp, %r13
    000003c9: 	movq	%r12, %rax
    000003cc: 	nopl	(%rax) # Size: 4
.Ltmp1135:
    000003d0: 	movsd	-0x8(%r13), %xmm1
    000003d6: 	leaq	-0x8(%r13), %rdx
    000003da: 	comisd	%xmm0, %xmm1
    000003de: 	ja	.Ltmp1131 # Offset: 990
    000003e0: 	cmpq	%rax, %rdx
    000003e3: 	jbe	.Ltmp1132 # Offset: 995
    000003e5: 	comisd	(%rax), %xmm0
    000003e9: 	jbe	.Ltmp1133 # Offset: 1001
    000003eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1134:
    000003f0: 	addq	$0x8, %rax
    000003f4: 	comisd	(%rax), %xmm0
    000003f8: 	ja	.Ltmp1134 # Offset: 1016
    000003fa: 	cmpq	%rax, %rdx
    000003fd: 	jbe	.Ltmp1132 # Offset: 1021
.Ltmp1133:
    000003ff: 	movsd	(%rax), %xmm2
    00000403: 	movsd	%xmm2, (%rdx)
    00000407: 	movsd	%xmm1, (%rax)
.Ltmp1131:
    0000040b: 	movq	%rdx, %r13
    0000040e: 	jmp	.Ltmp1135 # Offset: 1038
.Ltmp1132:
    00000410: 	movq	%r13, %rax
    00000413: 	subq	%r12, %rax
    00000416: 	cmpq	$0x8, %rax
    0000041a: 	jle	.Ltmp1136 # Offset: 1050
    0000041c: 	movq	%r13, %rsi
    0000041f: 	movq	%r12, %rdi
    00000422: 	callq	"_ZN9benchmark9quicksortIP12TypeSubClassIdEEEvT_S4_.part.0/1" # Offset: 1058
.Ltmp1136:
    00000427: 	movq	%rbp, %rax
    0000042a: 	subq	%r13, %rax
    0000042d: 	cmpq	$0x8, %rax
    00000431: 	jle	.Ltmp1130 # Offset: 1073
    00000433: 	movq	%rbp, %rsi
    00000436: 	movq	%r13, %rdi
    00000439: 	callq	"_ZN9benchmark9quicksortIP12TypeSubClassIdEEEvT_S4_.part.0/1" # Offset: 1081
.Ltmp1130:
    0000043e: 	movq	%rbx, %rax
    00000441: 	subq	%rbp, %rax
    00000444: 	cmpq	$0x8, %rax
    00000448: 	jle	.Ltmp1089 # Offset: 1096
    0000044e: 	movsd	(%rbp), %xmm0
    00000453: 	movq	%rbx, %r13
    00000456: 	movq	%rbp, %rax
    00000459: 	nopl	(%rax) # Size: 7
.Ltmp1141:
    00000460: 	movsd	-0x8(%r13), %xmm1
    00000466: 	leaq	-0x8(%r13), %rdx
    0000046a: 	comisd	%xmm0, %xmm1
    0000046e: 	ja	.Ltmp1137 # Offset: 1134
    00000470: 	cmpq	%rax, %rdx
    00000473: 	jbe	.Ltmp1138 # Offset: 1139
    00000479: 	comisd	(%rax), %xmm0
    0000047d: 	jbe	.Ltmp1139 # Offset: 1149
    0000047f: 	nop # Size: 1
.Ltmp1140:
    00000480: 	addq	$0x8, %rax
    00000484: 	comisd	(%rax), %xmm0
    00000488: 	ja	.Ltmp1140 # Offset: 1160
    0000048a: 	cmpq	%rax, %rdx
    0000048d: 	jbe	.Ltmp1138 # Offset: 1165
.Ltmp1139:
    00000493: 	movsd	(%rax), %xmm2
    00000497: 	movsd	%xmm2, (%rdx)
    0000049b: 	movsd	%xmm1, (%rax)
.Ltmp1137:
    0000049f: 	movq	%rdx, %r13
    000004a2: 	jmp	.Ltmp1141 # Offset: 1186
.Ltmp1103:
    000004a4: 	movq	%r14, %rax
    000004a7: 	subq	%r13, %rax
    000004aa: 	cmpq	$0x8, %rax
    000004ae: 	jle	.Ltmp1142 # Offset: 1198
    000004b0: 	movsd	(%r13), %xmm0
    000004b6: 	movq	%r14, %r15
    000004b9: 	movq	%r13, %rax
    000004bc: 	nopl	(%rax) # Size: 4
.Ltmp1147:
    000004c0: 	movsd	-0x8(%r15), %xmm1
    000004c6: 	leaq	-0x8(%r15), %rdx
    000004ca: 	comisd	%xmm0, %xmm1
    000004ce: 	ja	.Ltmp1143 # Offset: 1230
    000004d0: 	cmpq	%rax, %rdx
    000004d3: 	jbe	.Ltmp1144 # Offset: 1235
    000004d5: 	comisd	(%rax), %xmm0
    000004d9: 	jbe	.Ltmp1145 # Offset: 1241
    000004db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1146:
    000004e0: 	addq	$0x8, %rax
    000004e4: 	comisd	(%rax), %xmm0
    000004e8: 	ja	.Ltmp1146 # Offset: 1256
    000004ea: 	cmpq	%rax, %rdx
    000004ed: 	jbe	.Ltmp1144 # Offset: 1261
.Ltmp1145:
    000004ef: 	movsd	(%rax), %xmm2
    000004f3: 	movsd	%xmm2, (%rdx)
    000004f7: 	movsd	%xmm1, (%rax)
.Ltmp1143:
    000004fb: 	movq	%rdx, %r15
    000004fe: 	jmp	.Ltmp1147 # Offset: 1278
.Ltmp1144:
    00000500: 	movq	%r15, %rax
    00000503: 	subq	%r13, %rax
    00000506: 	cmpq	$0x8, %rax
    0000050a: 	jle	.Ltmp1148 # Offset: 1290
    0000050c: 	movq	%r15, %rsi
    0000050f: 	movq	%r13, %rdi
    00000512: 	callq	"_ZN9benchmark9quicksortIP12TypeSubClassIdEEEvT_S4_.part.0/1" # Offset: 1298
.Ltmp1148:
    00000517: 	movq	%r14, %rax
    0000051a: 	subq	%r15, %rax
    0000051d: 	cmpq	$0x8, %rax
    00000521: 	jle	.Ltmp1142 # Offset: 1313
    00000523: 	movq	%r14, %rsi
    00000526: 	movq	%r15, %rdi
    00000529: 	callq	"_ZN9benchmark9quicksortIP12TypeSubClassIdEEEvT_S4_.part.0/1" # Offset: 1321
.Ltmp1142:
    0000052e: 	movq	%r12, %rax
    00000531: 	subq	%r14, %rax
    00000534: 	cmpq	$0x8, %rax
    00000538: 	jle	.Ltmp1149 # Offset: 1336
    0000053e: 	movsd	(%r14), %xmm0
    00000543: 	movq	%r12, %r13
    00000546: 	movq	%r14, %rax
    00000549: 	nopl	(%rax) # Size: 7
.Ltmp1154:
    00000550: 	movsd	-0x8(%r13), %xmm1
    00000556: 	leaq	-0x8(%r13), %rdx
    0000055a: 	comisd	%xmm0, %xmm1
    0000055e: 	ja	.Ltmp1150 # Offset: 1374
    00000560: 	cmpq	%rax, %rdx
    00000563: 	jbe	.Ltmp1151 # Offset: 1379
    00000569: 	comisd	(%rax), %xmm0
    0000056d: 	jbe	.Ltmp1152 # Offset: 1389
    0000056f: 	nop # Size: 1
.Ltmp1153:
    00000570: 	addq	$0x8, %rax
    00000574: 	comisd	(%rax), %xmm0
    00000578: 	ja	.Ltmp1153 # Offset: 1400
    0000057a: 	cmpq	%rax, %rdx
    0000057d: 	jbe	.Ltmp1151 # Offset: 1405
.Ltmp1152:
    00000583: 	movsd	(%rax), %xmm2
    00000587: 	movsd	%xmm2, (%rdx)
    0000058b: 	movsd	%xmm1, (%rax)
.Ltmp1150:
    0000058f: 	movq	%rdx, %r13
    00000592: 	jmp	.Ltmp1154 # Offset: 1426
.Ltmp1098:
    00000594: 	movq	%r13, %rax
    00000597: 	subq	%r12, %rax
    0000059a: 	cmpq	$0x8, %rax
    0000059e: 	jle	.Ltmp1155 # Offset: 1438
    000005a0: 	movsd	(%r12), %xmm0
    000005a6: 	movq	%r13, %r14
    000005a9: 	movq	%r12, %rax
    000005ac: 	nopl	(%rax) # Size: 4
.Ltmp1160:
    000005b0: 	movsd	-0x8(%r14), %xmm1
    000005b6: 	leaq	-0x8(%r14), %rdx
    000005ba: 	comisd	%xmm0, %xmm1
    000005be: 	ja	.Ltmp1156 # Offset: 1470
    000005c0: 	cmpq	%rax, %rdx
    000005c3: 	jbe	.Ltmp1157 # Offset: 1475
    000005c5: 	comisd	(%rax), %xmm0
    000005c9: 	jbe	.Ltmp1158 # Offset: 1481
    000005cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1159:
    000005d0: 	addq	$0x8, %rax
    000005d4: 	comisd	(%rax), %xmm0
    000005d8: 	ja	.Ltmp1159 # Offset: 1496
    000005da: 	cmpq	%rax, %rdx
    000005dd: 	jbe	.Ltmp1157 # Offset: 1501
.Ltmp1158:
    000005df: 	movsd	(%rax), %xmm2
    000005e3: 	movsd	%xmm2, (%rdx)
    000005e7: 	movsd	%xmm1, (%rax)
.Ltmp1156:
    000005eb: 	movq	%rdx, %r14
    000005ee: 	jmp	.Ltmp1160 # Offset: 1518
.Ltmp1157:
    000005f0: 	movq	%r14, %rax
    000005f3: 	subq	%r12, %rax
    000005f6: 	cmpq	$0x8, %rax
    000005fa: 	jle	.Ltmp1161 # Offset: 1530
    000005fc: 	movq	%r14, %rsi
    000005ff: 	movq	%r12, %rdi
    00000602: 	callq	"_ZN9benchmark9quicksortIP12TypeSubClassIdEEEvT_S4_.part.0/1" # Offset: 1538
.Ltmp1161:
    00000607: 	movq	%r13, %rax
    0000060a: 	subq	%r14, %rax
    0000060d: 	cmpq	$0x8, %rax
    00000611: 	jle	.Ltmp1155 # Offset: 1553
    00000613: 	movq	%r13, %rsi
    00000616: 	movq	%r14, %rdi
    00000619: 	callq	"_ZN9benchmark9quicksortIP12TypeSubClassIdEEEvT_S4_.part.0/1" # Offset: 1561
.Ltmp1155:
    0000061e: 	movq	%rbp, %rax
    00000621: 	subq	%r13, %rax
    00000624: 	cmpq	$0x8, %rax
    00000628: 	jle	.Ltmp1081 # Offset: 1576
    0000062e: 	movsd	(%r13), %xmm0
    00000634: 	movq	%rbp, %r12
    00000637: 	movq	%r13, %rax
    0000063a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1166:
    00000640: 	movsd	-0x8(%r12), %xmm1
    00000647: 	leaq	-0x8(%r12), %rdx
    0000064c: 	comisd	%xmm0, %xmm1
    00000650: 	ja	.Ltmp1162 # Offset: 1616
    00000652: 	cmpq	%rax, %rdx
    00000655: 	jbe	.Ltmp1163 # Offset: 1621
    0000065b: 	comisd	(%rax), %xmm0
    0000065f: 	jbe	.Ltmp1164 # Offset: 1631
    00000661: 	nopl	(%rax) # Size: 7
.Ltmp1165:
    00000668: 	addq	$0x8, %rax
    0000066c: 	comisd	(%rax), %xmm0
    00000670: 	ja	.Ltmp1165 # Offset: 1648
    00000672: 	cmpq	%rax, %rdx
    00000675: 	jbe	.Ltmp1163 # Offset: 1653
.Ltmp1164:
    0000067b: 	movsd	(%rax), %xmm2
    0000067f: 	movsd	%xmm2, (%rdx)
    00000683: 	movsd	%xmm1, (%rax)
.Ltmp1162:
    00000687: 	movq	%rdx, %r12
    0000068a: 	jmp	.Ltmp1166 # Offset: 1674
.Ltmp1126:
    0000068c: 	movq	%rbp, %rax
    0000068f: 	subq	%r13, %rax
    00000692: 	cmpq	$0x8, %rax
    00000696: 	jle	.Ltmp1167 # Offset: 1686
    00000698: 	movq	%rbp, %rsi
    0000069b: 	movq	%r13, %rdi
    0000069e: 	callq	"_ZN9benchmark9quicksortIP12TypeSubClassIdEEEvT_S4_.part.0/1" # Offset: 1694
.Ltmp1167:
    000006a3: 	movq	%r12, %rax
    000006a6: 	subq	%rbp, %rax
    000006a9: 	cmpq	$0x8, %rax
    000006ad: 	jle	.Ltmp1124 # Offset: 1709
    000006b3: 	movq	%r12, %rsi
    000006b6: 	movq	%rbp, %rdi
    000006b9: 	callq	"_ZN9benchmark9quicksortIP12TypeSubClassIdEEEvT_S4_.part.0/1" # Offset: 1721
    000006be: 	jmp	.Ltmp1124 # Offset: 1726
.Ltmp1138:
    000006c3: 	movq	%r13, %rax
    000006c6: 	subq	%rbp, %rax
    000006c9: 	cmpq	$0x8, %rax
    000006cd: 	jle	.Ltmp1168 # Offset: 1741
    000006cf: 	movq	%r13, %rsi
    000006d2: 	movq	%rbp, %rdi
    000006d5: 	callq	"_ZN9benchmark9quicksortIP12TypeSubClassIdEEEvT_S4_.part.0/1" # Offset: 1749
.Ltmp1168:
    000006da: 	movq	%rbx, %rax
    000006dd: 	subq	%r13, %rax
    000006e0: 	cmpq	$0x8, %rax
    000006e4: 	jg	.Ltmp1169 # Offset: 1764
    000006ea: 	jmp	.Ltmp1089 # Offset: 1770
.Ltmp1151:
    000006ef: 	movq	%r13, %rax
    000006f2: 	subq	%r14, %rax
    000006f5: 	cmpq	$0x8, %rax
    000006f9: 	jle	.Ltmp1170 # Offset: 1785
    000006fb: 	movq	%r13, %rsi
    000006fe: 	movq	%r14, %rdi
    00000701: 	callq	"_ZN9benchmark9quicksortIP12TypeSubClassIdEEEvT_S4_.part.0/1" # Offset: 1793
.Ltmp1170:
    00000706: 	movq	%r12, %rax
    00000709: 	subq	%r13, %rax
    0000070c: 	cmpq	$0x8, %rax
    00000710: 	jle	.Ltmp1149 # Offset: 1808
    00000716: 	movq	%r12, %rsi
    00000719: 	movq	%r13, %rdi
    0000071c: 	callq	"_ZN9benchmark9quicksortIP12TypeSubClassIdEEEvT_S4_.part.0/1" # Offset: 1820
    00000721: 	jmp	.Ltmp1149 # Offset: 1825
.Ltmp1163:
    00000726: 	movq	%r12, %rax
    00000729: 	subq	%r13, %rax
    0000072c: 	cmpq	$0x8, %rax
    00000730: 	jle	.Ltmp1171 # Offset: 1840
    00000732: 	movq	%r12, %rsi
    00000735: 	movq	%r13, %rdi
    00000738: 	callq	"_ZN9benchmark9quicksortIP12TypeSubClassIdEEEvT_S4_.part.0/1" # Offset: 1848
.Ltmp1171:
    0000073d: 	movq	%rbp, %rax
    00000740: 	subq	%r12, %rax
    00000743: 	cmpq	$0x8, %rax
    00000747: 	jle	.Ltmp1081 # Offset: 1863
    0000074d: 	movq	%rbp, %rsi
    00000750: 	movq	%r12, %rdi
    00000753: 	callq	"_ZN9benchmark9quicksortIP12TypeSubClassIdEEEvT_S4_.part.0/1" # Offset: 1875
    00000758: 	jmp	.Ltmp1081 # Offset: 1880
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIP12TypeSubClassIdEEEvT_S4_.part.0/1(*2)"

Binary Function "_ZN9benchmark9quicksortIP12TypeSubClassIiEEEvT_S4_.part.0/1(*2)" after disassembly {
  All names   : _ZN9benchmark9quicksortIP12TypeSubClassIiEEEvT_S4_.part.0/1
                _ZN9benchmark9quicksortIP12TypeSubClassIiEEEvT_S4_.part.0/stepanov_inherit.cpp/1
  Number      : 96
  State       : disassembled
  Address     : 0x8ae0
  Size        : 0x65d
  MaxSize     : 0x660
  Offset      : 0x8ae0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIP12TypeSubClassIiEEEvT_S4_.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB095:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	movq	%rdi, %r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rsi, %rbx
    00000010: 	subq	$0x8, %rsp
.Ltmp1265:
    00000014: 	movl	(%r12), %edx
    00000018: 	movq	%rbx, %rbp
    0000001b: 	movq	%r12, %rax
    0000001e: 	nop # Size: 2
.Ltmp1176:
    00000020: 	movl	-0x4(%rbp), %ecx
    00000023: 	leaq	-0x4(%rbp), %rsi
    00000027: 	cmpl	%ecx, %edx
    00000029: 	jl	.Ltmp1172 # Offset: 41
    0000002b: 	cmpq	%rax, %rsi
    0000002e: 	jbe	.Ltmp1173 # Offset: 46
    00000030: 	cmpl	(%rax), %edx
    00000032: 	jle	.Ltmp1174 # Offset: 50
    00000034: 	nopl	(%rax) # Size: 4
.Ltmp1175:
    00000038: 	addq	$0x4, %rax
    0000003c: 	cmpl	(%rax), %edx
    0000003e: 	jg	.Ltmp1175 # Offset: 62
    00000040: 	cmpq	%rax, %rsi
    00000043: 	jbe	.Ltmp1173 # Offset: 67
.Ltmp1174:
    00000045: 	movl	(%rax), %edi
    00000047: 	movl	%edi, (%rsi)
    00000049: 	movl	%ecx, (%rax)
.Ltmp1172:
    0000004b: 	movq	%rsi, %rbp
    0000004e: 	jmp	.Ltmp1176 # Offset: 78
.Ltmp1173:
    00000050: 	movq	%rbp, %rax
    00000053: 	subq	%r12, %rax
    00000056: 	cmpq	$0x4, %rax
    0000005a: 	jle	.Ltmp1177 # Offset: 90
    0000005c: 	movl	(%r12), %edx
    00000060: 	movq	%rbp, %r13
    00000063: 	movq	%r12, %rax
    00000066: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1182:
    00000070: 	leaq	-0x4(%r13), %rsi
    00000074: 	cmpl	%ecx, %edx
    00000076: 	jl	.Ltmp1178 # Offset: 118
    00000078: 	cmpq	%rax, %rsi
    0000007b: 	jbe	.Ltmp1179 # Offset: 123
    0000007d: 	cmpl	(%rax), %edx
    0000007f: 	jle	.Ltmp1180 # Offset: 127
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp1181:
    00000088: 	addq	$0x4, %rax
    0000008c: 	cmpl	(%rax), %edx
    0000008e: 	jg	.Ltmp1181 # Offset: 142
    00000090: 	cmpq	%rax, %rsi
    00000093: 	jbe	.Ltmp1179 # Offset: 147
.Ltmp1180:
    00000095: 	movl	(%rax), %edi
    00000097: 	movl	%edi, (%rsi)
    00000099: 	movl	%ecx, (%rax)
.Ltmp1178:
    0000009b: 	movl	-0x4(%rsi), %ecx
    0000009e: 	movq	%rsi, %r13
    000000a1: 	jmp	.Ltmp1182 # Offset: 161
.Ltmp1179:
    000000a3: 	movq	%r13, %rax
    000000a6: 	subq	%r12, %rax
    000000a9: 	cmpq	$0x4, %rax
    000000ad: 	jg	.Ltmp1183 # Offset: 173
.Ltmp1245:
    000000b3: 	movq	%rbp, %rax
    000000b6: 	subq	%r13, %rax
    000000b9: 	cmpq	$0x4, %rax
    000000bd: 	jg	.Ltmp1184 # Offset: 189
.Ltmp1177:
    000000bf: 	movq	%rbx, %rax
    000000c2: 	subq	%rbp, %rax
    000000c5: 	cmpq	$0x4, %rax
    000000c9: 	jle	.Ltmp1185 # Offset: 201
    000000cb: 	movl	(%rbp), %edx
    000000ce: 	movq	%rbx, %r12
    000000d1: 	movq	%rbp, %rax
    000000d4: 	nopl	(%rax) # Size: 4
.Ltmp1190:
    000000d8: 	movl	-0x4(%r12), %ecx
    000000dd: 	leaq	-0x4(%r12), %rsi
    000000e2: 	cmpl	%ecx, %edx
    000000e4: 	jl	.Ltmp1186 # Offset: 228
    000000e6: 	cmpq	%rax, %rsi
    000000e9: 	jbe	.Ltmp1187 # Offset: 233
    000000eb: 	cmpl	(%rax), %edx
    000000ed: 	jle	.Ltmp1188 # Offset: 237
    000000ef: 	nop # Size: 1
.Ltmp1189:
    000000f0: 	addq	$0x4, %rax
    000000f4: 	cmpl	(%rax), %edx
    000000f6: 	jg	.Ltmp1189 # Offset: 246
    000000f8: 	cmpq	%rax, %rsi
    000000fb: 	jbe	.Ltmp1187 # Offset: 251
.Ltmp1188:
    000000fd: 	movl	(%rax), %edi
    000000ff: 	movl	%edi, (%rsi)
    00000101: 	movl	%ecx, (%rax)
.Ltmp1186:
    00000103: 	movq	%rsi, %r12
    00000106: 	jmp	.Ltmp1190 # Offset: 262
.Ltmp1187:
    00000108: 	movq	%r12, %rax
    0000010b: 	subq	%rbp, %rax
    0000010e: 	cmpq	$0x4, %rax
    00000112: 	jg	.Ltmp1191 # Offset: 274
.Ltmp1220:
    00000118: 	movq	%rbx, %rax
    0000011b: 	subq	%r12, %rax
    0000011e: 	cmpq	$0x4, %rax
    00000122: 	jg	.Ltmp1192 # Offset: 290
.Ltmp1185:
    00000128: 	addq	$0x8, %rsp
    0000012c: 	popq	%rbx
    0000012d: 	popq	%rbp
    0000012e: 	popq	%r12
    00000130: 	popq	%r13
    00000132: 	popq	%r14
    00000134: 	popq	%r15
    00000136: 	retq # Offset: 310
.Ltmp1184:
    00000137: 	movl	(%r13), %edx
    0000013b: 	movq	%rbp, %r12
    0000013e: 	movq	%r13, %rax
    00000141: 	nopl	(%rax) # Size: 7
.Ltmp1197:
    00000148: 	movl	-0x4(%r12), %esi
    0000014d: 	leaq	-0x4(%r12), %rcx
    00000152: 	cmpl	%esi, %edx
    00000154: 	jl	.Ltmp1193 # Offset: 340
    00000156: 	cmpq	%rax, %rcx
    00000159: 	jbe	.Ltmp1194 # Offset: 345
    0000015f: 	cmpl	(%rax), %edx
    00000161: 	jle	.Ltmp1195 # Offset: 353
    00000163: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1196:
    00000168: 	addq	$0x4, %rax
    0000016c: 	cmpl	(%rax), %edx
    0000016e: 	jg	.Ltmp1196 # Offset: 366
    00000170: 	cmpq	%rax, %rcx
    00000173: 	jbe	.Ltmp1194 # Offset: 371
.Ltmp1195:
    00000179: 	movl	(%rax), %edi
    0000017b: 	movl	%edi, (%rcx)
    0000017d: 	movl	%esi, (%rax)
.Ltmp1193:
    0000017f: 	movq	%rcx, %r12
    00000182: 	jmp	.Ltmp1197 # Offset: 386
.Ltmp1183:
    00000184: 	movl	(%r12), %edx
    00000188: 	movq	%r13, %r14
    0000018b: 	movq	%r12, %rax
    0000018e: 	nop # Size: 2
.Ltmp1202:
    00000190: 	leaq	-0x4(%r14), %rsi
    00000194: 	cmpl	%ecx, %edx
    00000196: 	jl	.Ltmp1198 # Offset: 406
    00000198: 	cmpq	%rax, %rsi
    0000019b: 	jbe	.Ltmp1199 # Offset: 411
    000001a1: 	cmpl	%edx, (%rax)
    000001a3: 	jge	.Ltmp1200 # Offset: 419
    000001a5: 	nopl	(%rax) # Size: 3
.Ltmp1201:
    000001a8: 	addq	$0x4, %rax
    000001ac: 	cmpl	(%rax), %edx
    000001ae: 	jg	.Ltmp1201 # Offset: 430
    000001b0: 	cmpq	%rax, %rsi
    000001b3: 	jbe	.Ltmp1199 # Offset: 435
.Ltmp1200:
    000001b9: 	movl	(%rax), %edi
    000001bb: 	movl	%edi, (%rsi)
    000001bd: 	movl	%ecx, (%rax)
.Ltmp1198:
    000001bf: 	movl	-0x4(%rsi), %ecx
    000001c2: 	movq	%rsi, %r14
    000001c5: 	jmp	.Ltmp1202 # Offset: 453
.Ltmp1192:
    000001c7: 	movl	(%r12), %edx
    000001cb: 	movq	%rbx, %rbp
    000001ce: 	movq	%r12, %rax
    000001d1: 	nopl	(%rax) # Size: 7
.Ltmp1207:
    000001d8: 	movl	-0x4(%rbp), %esi
    000001db: 	leaq	-0x4(%rbp), %rcx
    000001df: 	cmpl	%esi, %edx
    000001e1: 	jl	.Ltmp1203 # Offset: 481
    000001e3: 	cmpq	%rax, %rcx
    000001e6: 	jbe	.Ltmp1204 # Offset: 486
    000001ec: 	cmpl	%edx, (%rax)
    000001ee: 	jge	.Ltmp1205 # Offset: 494
.Ltmp1206:
    000001f0: 	addq	$0x4, %rax
    000001f4: 	cmpl	(%rax), %edx
    000001f6: 	jg	.Ltmp1206 # Offset: 502
    000001f8: 	cmpq	%rax, %rcx
    000001fb: 	jbe	.Ltmp1204 # Offset: 507
.Ltmp1205:
    00000201: 	movl	(%rax), %edi
    00000203: 	movl	%edi, (%rcx)
    00000205: 	movl	%esi, (%rax)
.Ltmp1203:
    00000207: 	movq	%rcx, %rbp
    0000020a: 	jmp	.Ltmp1207 # Offset: 522
.Ltmp1191:
    0000020c: 	movl	(%rbp), %edx
    0000020f: 	movq	%r12, %r13
    00000212: 	movq	%rbp, %rax
    00000215: 	nopl	(%rax) # Size: 3
.Ltmp1212:
    00000218: 	leaq	-0x4(%r13), %rsi
    0000021c: 	cmpl	%edx, %ecx
    0000021e: 	jg	.Ltmp1208 # Offset: 542
    00000220: 	cmpq	%rax, %rsi
    00000223: 	jbe	.Ltmp1209 # Offset: 547
    00000225: 	cmpl	(%rax), %edx
    00000227: 	jle	.Ltmp1210 # Offset: 551
    00000229: 	nopl	(%rax) # Size: 7
.Ltmp1211:
    00000230: 	addq	$0x4, %rax
    00000234: 	cmpl	(%rax), %edx
    00000236: 	jg	.Ltmp1211 # Offset: 566
    00000238: 	cmpq	%rax, %rsi
    0000023b: 	jbe	.Ltmp1209 # Offset: 571
.Ltmp1210:
    0000023d: 	movl	(%rax), %edi
    0000023f: 	movl	%edi, (%rsi)
    00000241: 	movl	%ecx, (%rax)
.Ltmp1208:
    00000243: 	movl	-0x4(%rsi), %ecx
    00000246: 	movq	%rsi, %r13
    00000249: 	jmp	.Ltmp1212 # Offset: 585
.Ltmp1209:
    0000024b: 	movq	%r13, %rax
    0000024e: 	subq	%rbp, %rax
    00000251: 	cmpq	$0x4, %rax
    00000255: 	jle	.Ltmp1213 # Offset: 597
    00000257: 	movl	(%rbp), %edx
    0000025a: 	movq	%r13, %r14
    0000025d: 	movq	%rbp, %rax
.Ltmp1218:
    00000260: 	movl	-0x4(%r14), %esi
    00000264: 	leaq	-0x4(%r14), %rcx
    00000268: 	cmpl	%esi, %edx
    0000026a: 	jl	.Ltmp1214 # Offset: 618
    0000026c: 	cmpq	%rax, %rcx
    0000026f: 	jbe	.Ltmp1215 # Offset: 623
    00000271: 	cmpl	(%rax), %edx
    00000273: 	jle	.Ltmp1216 # Offset: 627
    00000275: 	nopl	(%rax) # Size: 3
.Ltmp1217:
    00000278: 	addq	$0x4, %rax
    0000027c: 	cmpl	(%rax), %edx
    0000027e: 	jg	.Ltmp1217 # Offset: 638
    00000280: 	cmpq	%rax, %rcx
    00000283: 	jbe	.Ltmp1215 # Offset: 643
.Ltmp1216:
    00000285: 	movl	(%rax), %edi
    00000287: 	movl	%edi, (%rcx)
    00000289: 	movl	%esi, (%rax)
.Ltmp1214:
    0000028b: 	movq	%rcx, %r14
    0000028e: 	jmp	.Ltmp1218 # Offset: 654
.Ltmp1215:
    00000290: 	movq	%r14, %rax
    00000293: 	subq	%rbp, %rax
    00000296: 	cmpq	$0x4, %rax
    0000029a: 	jle	.Ltmp1219 # Offset: 666
    0000029c: 	movq	%r14, %rsi
    0000029f: 	movq	%rbp, %rdi
    000002a2: 	callq	"_ZN9benchmark9quicksortIP12TypeSubClassIiEEEvT_S4_.part.0/1" # Offset: 674
.Ltmp1219:
    000002a7: 	movq	%r13, %rax
    000002aa: 	subq	%r14, %rax
    000002ad: 	cmpq	$0x4, %rax
    000002b1: 	jle	.Ltmp1213 # Offset: 689
    000002b3: 	movq	%r13, %rsi
    000002b6: 	movq	%r14, %rdi
    000002b9: 	callq	"_ZN9benchmark9quicksortIP12TypeSubClassIiEEEvT_S4_.part.0/1" # Offset: 697
.Ltmp1213:
    000002be: 	movq	%r12, %rax
    000002c1: 	subq	%r13, %rax
    000002c4: 	cmpq	$0x4, %rax
    000002c8: 	jle	.Ltmp1220 # Offset: 712
    000002ce: 	movl	(%r13), %edx
    000002d2: 	movq	%r12, %rbp
    000002d5: 	movq	%r13, %rax
    000002d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1225:
    000002e0: 	movl	-0x4(%rbp), %esi
    000002e3: 	leaq	-0x4(%rbp), %rcx
    000002e7: 	cmpl	%esi, %edx
    000002e9: 	jl	.Ltmp1221 # Offset: 745
    000002eb: 	cmpq	%rax, %rcx
    000002ee: 	jbe	.Ltmp1222 # Offset: 750
    000002f4: 	cmpl	%edx, (%rax)
    000002f6: 	jge	.Ltmp1223 # Offset: 758
    000002f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1224:
    00000300: 	addq	$0x4, %rax
    00000304: 	cmpl	(%rax), %edx
    00000306: 	jg	.Ltmp1224 # Offset: 774
    00000308: 	cmpq	%rax, %rcx
    0000030b: 	jbe	.Ltmp1222 # Offset: 779
.Ltmp1223:
    00000311: 	movl	(%rax), %edi
    00000313: 	movl	%edi, (%rcx)
    00000315: 	movl	%esi, (%rax)
.Ltmp1221:
    00000317: 	movq	%rcx, %rbp
    0000031a: 	jmp	.Ltmp1225 # Offset: 794
.Ltmp1204:
    0000031c: 	movq	%rbp, %rax
    0000031f: 	subq	%r12, %rax
    00000322: 	cmpq	$0x4, %rax
    00000326: 	jle	.Ltmp1226 # Offset: 806
    00000328: 	movl	(%r12), %edx
    0000032c: 	movq	%rbp, %r13
    0000032f: 	movq	%r12, %rax
    00000332: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1231:
    00000338: 	movl	-0x4(%r13), %esi
    0000033c: 	leaq	-0x4(%r13), %rcx
    00000340: 	cmpl	%esi, %edx
    00000342: 	jl	.Ltmp1227 # Offset: 834
    00000344: 	cmpq	%rax, %rcx
    00000347: 	jbe	.Ltmp1228 # Offset: 839
    00000349: 	cmpl	%edx, (%rax)
    0000034b: 	jge	.Ltmp1229 # Offset: 843
    0000034d: 	nopl	(%rax) # Size: 3
.Ltmp1230:
    00000350: 	addq	$0x4, %rax
    00000354: 	cmpl	(%rax), %edx
    00000356: 	jg	.Ltmp1230 # Offset: 854
    00000358: 	cmpq	%rax, %rcx
    0000035b: 	jbe	.Ltmp1228 # Offset: 859
.Ltmp1229:
    0000035d: 	movl	(%rax), %edi
    0000035f: 	movl	%edi, (%rcx)
    00000361: 	movl	%esi, (%rax)
.Ltmp1227:
    00000363: 	movq	%rcx, %r13
    00000366: 	jmp	.Ltmp1231 # Offset: 870
.Ltmp1228:
    00000368: 	movq	%r13, %rax
    0000036b: 	subq	%r12, %rax
    0000036e: 	cmpq	$0x4, %rax
    00000372: 	jle	.Ltmp1232 # Offset: 882
    00000374: 	movq	%r13, %rsi
    00000377: 	movq	%r12, %rdi
    0000037a: 	callq	"_ZN9benchmark9quicksortIP12TypeSubClassIiEEEvT_S4_.part.0/1" # Offset: 890
.Ltmp1232:
    0000037f: 	movq	%rbp, %rax
    00000382: 	subq	%r13, %rax
    00000385: 	cmpq	$0x4, %rax
    00000389: 	jle	.Ltmp1226 # Offset: 905
    0000038b: 	movq	%rbp, %rsi
    0000038e: 	movq	%r13, %rdi
    00000391: 	callq	"_ZN9benchmark9quicksortIP12TypeSubClassIiEEEvT_S4_.part.0/1" # Offset: 913
.Ltmp1226:
    00000396: 	movq	%rbx, %rax
    00000399: 	subq	%rbp, %rax
    0000039c: 	cmpq	$0x4, %rax
    000003a0: 	jle	.Ltmp1185 # Offset: 928
    000003a6: 	movl	(%rbp), %edx
    000003a9: 	movq	%rbx, %r12
    000003ac: 	movq	%rbp, %rax
    000003af: 	nop # Size: 1
.Ltmp1237:
    000003b0: 	movl	-0x4(%r12), %esi
    000003b5: 	leaq	-0x4(%r12), %rcx
    000003ba: 	cmpl	%esi, %edx
    000003bc: 	jl	.Ltmp1233 # Offset: 956
    000003be: 	cmpq	%rax, %rcx
    000003c1: 	jbe	.Ltmp1234 # Offset: 961
    000003c7: 	cmpl	(%rax), %edx
    000003c9: 	jle	.Ltmp1235 # Offset: 969
    000003cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1236:
    000003d0: 	addq	$0x4, %rax
    000003d4: 	cmpl	(%rax), %edx
    000003d6: 	jg	.Ltmp1236 # Offset: 982
    000003d8: 	cmpq	%rax, %rcx
    000003db: 	jbe	.Ltmp1234 # Offset: 987
.Ltmp1235:
    000003e1: 	movl	(%rax), %edi
    000003e3: 	movl	%edi, (%rcx)
    000003e5: 	movl	%esi, (%rax)
.Ltmp1233:
    000003e7: 	movq	%rcx, %r12
    000003ea: 	jmp	.Ltmp1237 # Offset: 1002
.Ltmp1199:
    000003ec: 	movq	%r14, %rax
    000003ef: 	subq	%r12, %rax
    000003f2: 	cmpq	$0x4, %rax
    000003f6: 	jle	.Ltmp1238 # Offset: 1014
    000003f8: 	movl	(%r12), %edx
    000003fc: 	movq	%r14, %r15
    000003ff: 	movq	%r12, %rax
    00000402: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1243:
    00000408: 	movl	-0x4(%r15), %esi
    0000040c: 	leaq	-0x4(%r15), %rcx
    00000410: 	cmpl	%esi, %edx
    00000412: 	jl	.Ltmp1239 # Offset: 1042
    00000414: 	cmpq	%rax, %rcx
    00000417: 	jbe	.Ltmp1240 # Offset: 1047
    00000419: 	cmpl	(%rax), %edx
    0000041b: 	jle	.Ltmp1241 # Offset: 1051
    0000041d: 	nopl	(%rax) # Size: 3
.Ltmp1242:
    00000420: 	addq	$0x4, %rax
    00000424: 	cmpl	(%rax), %edx
    00000426: 	jg	.Ltmp1242 # Offset: 1062
    00000428: 	cmpq	%rax, %rcx
    0000042b: 	jbe	.Ltmp1240 # Offset: 1067
.Ltmp1241:
    0000042d: 	movl	(%rax), %edi
    0000042f: 	movl	%edi, (%rcx)
    00000431: 	movl	%esi, (%rax)
.Ltmp1239:
    00000433: 	movq	%rcx, %r15
    00000436: 	jmp	.Ltmp1243 # Offset: 1078
.Ltmp1240:
    00000438: 	movq	%r15, %rax
    0000043b: 	subq	%r12, %rax
    0000043e: 	cmpq	$0x4, %rax
    00000442: 	jle	.Ltmp1244 # Offset: 1090
    00000444: 	movq	%r15, %rsi
    00000447: 	movq	%r12, %rdi
    0000044a: 	callq	"_ZN9benchmark9quicksortIP12TypeSubClassIiEEEvT_S4_.part.0/1" # Offset: 1098
.Ltmp1244:
    0000044f: 	movq	%r14, %rax
    00000452: 	subq	%r15, %rax
    00000455: 	cmpq	$0x4, %rax
    00000459: 	jle	.Ltmp1238 # Offset: 1113
    0000045b: 	movq	%r14, %rsi
    0000045e: 	movq	%r15, %rdi
    00000461: 	callq	"_ZN9benchmark9quicksortIP12TypeSubClassIiEEEvT_S4_.part.0/1" # Offset: 1121
.Ltmp1238:
    00000466: 	movq	%r13, %rax
    00000469: 	subq	%r14, %rax
    0000046c: 	cmpq	$0x4, %rax
    00000470: 	jle	.Ltmp1245 # Offset: 1136
    00000476: 	movl	(%r14), %edx
    00000479: 	movq	%r13, %r12
    0000047c: 	movq	%r14, %rax
    0000047f: 	nop # Size: 1
.Ltmp1250:
    00000480: 	movl	-0x4(%r12), %esi
    00000485: 	leaq	-0x4(%r12), %rcx
    0000048a: 	cmpl	%esi, %edx
    0000048c: 	jl	.Ltmp1246 # Offset: 1164
    0000048e: 	cmpq	%rax, %rcx
    00000491: 	jbe	.Ltmp1247 # Offset: 1169
    00000497: 	cmpl	(%rax), %edx
    00000499: 	jle	.Ltmp1248 # Offset: 1177
    0000049b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1249:
    000004a0: 	addq	$0x4, %rax
    000004a4: 	cmpl	(%rax), %edx
    000004a6: 	jg	.Ltmp1249 # Offset: 1190
    000004a8: 	cmpq	%rax, %rcx
    000004ab: 	jbe	.Ltmp1247 # Offset: 1195
.Ltmp1248:
    000004b1: 	movl	(%rax), %edi
    000004b3: 	movl	%edi, (%rcx)
    000004b5: 	movl	%esi, (%rax)
.Ltmp1246:
    000004b7: 	movq	%rcx, %r12
    000004ba: 	jmp	.Ltmp1250 # Offset: 1210
.Ltmp1194:
    000004bc: 	movq	%r12, %rax
    000004bf: 	subq	%r13, %rax
    000004c2: 	cmpq	$0x4, %rax
    000004c6: 	jle	.Ltmp1251 # Offset: 1222
    000004c8: 	movl	(%r13), %edx
    000004cc: 	movq	%r12, %r14
    000004cf: 	movq	%r13, %rax
    000004d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1256:
    000004d8: 	movl	-0x4(%r14), %esi
    000004dc: 	leaq	-0x4(%r14), %rcx
    000004e0: 	cmpl	%esi, %edx
    000004e2: 	jl	.Ltmp1252 # Offset: 1250
    000004e4: 	cmpq	%rax, %rcx
    000004e7: 	jbe	.Ltmp1253 # Offset: 1255
    000004e9: 	cmpl	(%rax), %edx
    000004eb: 	jle	.Ltmp1254 # Offset: 1259
    000004ed: 	nopl	(%rax) # Size: 3
.Ltmp1255:
    000004f0: 	addq	$0x4, %rax
    000004f4: 	cmpl	(%rax), %edx
    000004f6: 	jg	.Ltmp1255 # Offset: 1270
    000004f8: 	cmpq	%rax, %rcx
    000004fb: 	jbe	.Ltmp1253 # Offset: 1275
.Ltmp1254:
    000004fd: 	movl	(%rax), %edi
    000004ff: 	movl	%edi, (%rcx)
    00000501: 	movl	%esi, (%rax)
.Ltmp1252:
    00000503: 	movq	%rcx, %r14
    00000506: 	jmp	.Ltmp1256 # Offset: 1286
.Ltmp1253:
    00000508: 	movq	%r14, %rax
    0000050b: 	subq	%r13, %rax
    0000050e: 	cmpq	$0x4, %rax
    00000512: 	jle	.Ltmp1257 # Offset: 1298
    00000514: 	movq	%r14, %rsi
    00000517: 	movq	%r13, %rdi
    0000051a: 	callq	"_ZN9benchmark9quicksortIP12TypeSubClassIiEEEvT_S4_.part.0/1" # Offset: 1306
.Ltmp1257:
    0000051f: 	movq	%r12, %rax
    00000522: 	subq	%r14, %rax
    00000525: 	cmpq	$0x4, %rax
    00000529: 	jle	.Ltmp1251 # Offset: 1321
    0000052b: 	movq	%r12, %rsi
    0000052e: 	movq	%r14, %rdi
    00000531: 	callq	"_ZN9benchmark9quicksortIP12TypeSubClassIiEEEvT_S4_.part.0/1" # Offset: 1329
.Ltmp1251:
    00000536: 	movq	%rbp, %rax
    00000539: 	subq	%r12, %rax
    0000053c: 	cmpq	$0x4, %rax
    00000540: 	jle	.Ltmp1177 # Offset: 1344
    00000546: 	movl	(%r12), %edx
    0000054a: 	movq	%rbp, %r13
    0000054d: 	movq	%r12, %rax
.Ltmp1262:
    00000550: 	movl	-0x4(%r13), %esi
    00000554: 	leaq	-0x4(%r13), %rcx
    00000558: 	cmpl	%esi, %edx
    0000055a: 	jl	.Ltmp1258 # Offset: 1370
    0000055c: 	cmpq	%rax, %rcx
    0000055f: 	jbe	.Ltmp1259 # Offset: 1375
    00000565: 	cmpl	(%rax), %edx
    00000567: 	jle	.Ltmp1260 # Offset: 1383
    00000569: 	nopl	(%rax) # Size: 7
.Ltmp1261:
    00000570: 	addq	$0x4, %rax
    00000574: 	cmpl	(%rax), %edx
    00000576: 	jg	.Ltmp1261 # Offset: 1398
    00000578: 	cmpq	%rax, %rcx
    0000057b: 	jbe	.Ltmp1259 # Offset: 1403
.Ltmp1260:
    00000581: 	movl	(%rax), %edi
    00000583: 	movl	%edi, (%rcx)
    00000585: 	movl	%esi, (%rax)
.Ltmp1258:
    00000587: 	movq	%rcx, %r13
    0000058a: 	jmp	.Ltmp1262 # Offset: 1418
.Ltmp1222:
    0000058c: 	movq	%rbp, %rax
    0000058f: 	subq	%r13, %rax
    00000592: 	cmpq	$0x4, %rax
    00000596: 	jle	.Ltmp1263 # Offset: 1430
    00000598: 	movq	%rbp, %rsi
    0000059b: 	movq	%r13, %rdi
    0000059e: 	callq	"_ZN9benchmark9quicksortIP12TypeSubClassIiEEEvT_S4_.part.0/1" # Offset: 1438
.Ltmp1263:
    000005a3: 	movq	%r12, %rax
    000005a6: 	subq	%rbp, %rax
    000005a9: 	cmpq	$0x4, %rax
    000005ad: 	jle	.Ltmp1220 # Offset: 1453
    000005b3: 	movq	%r12, %rsi
    000005b6: 	movq	%rbp, %rdi
    000005b9: 	callq	"_ZN9benchmark9quicksortIP12TypeSubClassIiEEEvT_S4_.part.0/1" # Offset: 1465
    000005be: 	jmp	.Ltmp1220 # Offset: 1470
.Ltmp1234:
    000005c3: 	movq	%r12, %rax
    000005c6: 	subq	%rbp, %rax
    000005c9: 	cmpq	$0x4, %rax
    000005cd: 	jle	.Ltmp1264 # Offset: 1485
    000005cf: 	movq	%r12, %rsi
    000005d2: 	movq	%rbp, %rdi
    000005d5: 	callq	"_ZN9benchmark9quicksortIP12TypeSubClassIiEEEvT_S4_.part.0/1" # Offset: 1493
.Ltmp1264:
    000005da: 	movq	%rbx, %rax
    000005dd: 	subq	%r12, %rax
    000005e0: 	cmpq	$0x4, %rax
    000005e4: 	jg	.Ltmp1265 # Offset: 1508
    000005ea: 	jmp	.Ltmp1185 # Offset: 1514
.Ltmp1247:
    000005ef: 	movq	%r12, %rax
    000005f2: 	subq	%r14, %rax
    000005f5: 	cmpq	$0x4, %rax
    000005f9: 	jle	.Ltmp1266 # Offset: 1529
    000005fb: 	movq	%r12, %rsi
    000005fe: 	movq	%r14, %rdi
    00000601: 	callq	"_ZN9benchmark9quicksortIP12TypeSubClassIiEEEvT_S4_.part.0/1" # Offset: 1537
.Ltmp1266:
    00000606: 	movq	%r13, %rax
    00000609: 	subq	%r12, %rax
    0000060c: 	cmpq	$0x4, %rax
    00000610: 	jle	.Ltmp1245 # Offset: 1552
    00000616: 	movq	%r13, %rsi
    00000619: 	movq	%r12, %rdi
    0000061c: 	callq	"_ZN9benchmark9quicksortIP12TypeSubClassIiEEEvT_S4_.part.0/1" # Offset: 1564
    00000621: 	jmp	.Ltmp1245 # Offset: 1569
.Ltmp1259:
    00000626: 	movq	%r13, %rax
    00000629: 	subq	%r12, %rax
    0000062c: 	cmpq	$0x4, %rax
    00000630: 	jle	.Ltmp1267 # Offset: 1584
    00000632: 	movq	%r13, %rsi
    00000635: 	movq	%r12, %rdi
    00000638: 	callq	"_ZN9benchmark9quicksortIP12TypeSubClassIiEEEvT_S4_.part.0/1" # Offset: 1592
.Ltmp1267:
    0000063d: 	movq	%rbp, %rax
    00000640: 	subq	%r13, %rax
    00000643: 	cmpq	$0x4, %rax
    00000647: 	jle	.Ltmp1177 # Offset: 1607
    0000064d: 	movq	%rbp, %rsi
    00000650: 	movq	%r13, %rdi
    00000653: 	callq	"_ZN9benchmark9quicksortIP12TypeSubClassIiEEEvT_S4_.part.0/1" # Offset: 1619
    00000658: 	jmp	.Ltmp1177 # Offset: 1624
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIP12TypeSubClassIiEEEvT_S4_.part.0/1(*2)"

Binary Function "_ZN9benchmark9quicksortIP13TypeSub2ClassIiEEEvT_S4_.part.0/1(*2)" after disassembly {
  All names   : _ZN9benchmark9quicksortIP13TypeSub2ClassIiEEEvT_S4_.part.0/1
                _ZN9benchmark9quicksortIP13TypeSub2ClassIiEEEvT_S4_.part.0/stepanov_inherit.cpp/1
  Number      : 97
  State       : disassembled
  Address     : 0x9140
  Size        : 0x65d
  MaxSize     : 0x660
  Offset      : 0x9140
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIP13TypeSub2ClassIiEEEvT_S4_.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB096:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	movq	%rdi, %r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rsi, %rbx
    00000010: 	subq	$0x8, %rsp
.Ltmp1361:
    00000014: 	movl	(%r12), %edx
    00000018: 	movq	%rbx, %rbp
    0000001b: 	movq	%r12, %rax
    0000001e: 	nop # Size: 2
.Ltmp1272:
    00000020: 	movl	-0x4(%rbp), %ecx
    00000023: 	leaq	-0x4(%rbp), %rsi
    00000027: 	cmpl	%ecx, %edx
    00000029: 	jl	.Ltmp1268 # Offset: 41
    0000002b: 	cmpq	%rax, %rsi
    0000002e: 	jbe	.Ltmp1269 # Offset: 46
    00000030: 	cmpl	(%rax), %edx
    00000032: 	jle	.Ltmp1270 # Offset: 50
    00000034: 	nopl	(%rax) # Size: 4
.Ltmp1271:
    00000038: 	addq	$0x4, %rax
    0000003c: 	cmpl	(%rax), %edx
    0000003e: 	jg	.Ltmp1271 # Offset: 62
    00000040: 	cmpq	%rax, %rsi
    00000043: 	jbe	.Ltmp1269 # Offset: 67
.Ltmp1270:
    00000045: 	movl	(%rax), %edi
    00000047: 	movl	%edi, (%rsi)
    00000049: 	movl	%ecx, (%rax)
.Ltmp1268:
    0000004b: 	movq	%rsi, %rbp
    0000004e: 	jmp	.Ltmp1272 # Offset: 78
.Ltmp1269:
    00000050: 	movq	%rbp, %rax
    00000053: 	subq	%r12, %rax
    00000056: 	cmpq	$0x4, %rax
    0000005a: 	jle	.Ltmp1273 # Offset: 90
    0000005c: 	movl	(%r12), %edx
    00000060: 	movq	%rbp, %r13
    00000063: 	movq	%r12, %rax
    00000066: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1278:
    00000070: 	leaq	-0x4(%r13), %rsi
    00000074: 	cmpl	%ecx, %edx
    00000076: 	jl	.Ltmp1274 # Offset: 118
    00000078: 	cmpq	%rax, %rsi
    0000007b: 	jbe	.Ltmp1275 # Offset: 123
    0000007d: 	cmpl	(%rax), %edx
    0000007f: 	jle	.Ltmp1276 # Offset: 127
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp1277:
    00000088: 	addq	$0x4, %rax
    0000008c: 	cmpl	(%rax), %edx
    0000008e: 	jg	.Ltmp1277 # Offset: 142
    00000090: 	cmpq	%rax, %rsi
    00000093: 	jbe	.Ltmp1275 # Offset: 147
.Ltmp1276:
    00000095: 	movl	(%rax), %edi
    00000097: 	movl	%edi, (%rsi)
    00000099: 	movl	%ecx, (%rax)
.Ltmp1274:
    0000009b: 	movl	-0x4(%rsi), %ecx
    0000009e: 	movq	%rsi, %r13
    000000a1: 	jmp	.Ltmp1278 # Offset: 161
.Ltmp1275:
    000000a3: 	movq	%r13, %rax
    000000a6: 	subq	%r12, %rax
    000000a9: 	cmpq	$0x4, %rax
    000000ad: 	jg	.Ltmp1279 # Offset: 173
.Ltmp1341:
    000000b3: 	movq	%rbp, %rax
    000000b6: 	subq	%r13, %rax
    000000b9: 	cmpq	$0x4, %rax
    000000bd: 	jg	.Ltmp1280 # Offset: 189
.Ltmp1273:
    000000bf: 	movq	%rbx, %rax
    000000c2: 	subq	%rbp, %rax
    000000c5: 	cmpq	$0x4, %rax
    000000c9: 	jle	.Ltmp1281 # Offset: 201
    000000cb: 	movl	(%rbp), %edx
    000000ce: 	movq	%rbx, %r12
    000000d1: 	movq	%rbp, %rax
    000000d4: 	nopl	(%rax) # Size: 4
.Ltmp1286:
    000000d8: 	movl	-0x4(%r12), %ecx
    000000dd: 	leaq	-0x4(%r12), %rsi
    000000e2: 	cmpl	%ecx, %edx
    000000e4: 	jl	.Ltmp1282 # Offset: 228
    000000e6: 	cmpq	%rax, %rsi
    000000e9: 	jbe	.Ltmp1283 # Offset: 233
    000000eb: 	cmpl	(%rax), %edx
    000000ed: 	jle	.Ltmp1284 # Offset: 237
    000000ef: 	nop # Size: 1
.Ltmp1285:
    000000f0: 	addq	$0x4, %rax
    000000f4: 	cmpl	(%rax), %edx
    000000f6: 	jg	.Ltmp1285 # Offset: 246
    000000f8: 	cmpq	%rax, %rsi
    000000fb: 	jbe	.Ltmp1283 # Offset: 251
.Ltmp1284:
    000000fd: 	movl	(%rax), %edi
    000000ff: 	movl	%edi, (%rsi)
    00000101: 	movl	%ecx, (%rax)
.Ltmp1282:
    00000103: 	movq	%rsi, %r12
    00000106: 	jmp	.Ltmp1286 # Offset: 262
.Ltmp1283:
    00000108: 	movq	%r12, %rax
    0000010b: 	subq	%rbp, %rax
    0000010e: 	cmpq	$0x4, %rax
    00000112: 	jg	.Ltmp1287 # Offset: 274
.Ltmp1316:
    00000118: 	movq	%rbx, %rax
    0000011b: 	subq	%r12, %rax
    0000011e: 	cmpq	$0x4, %rax
    00000122: 	jg	.Ltmp1288 # Offset: 290
.Ltmp1281:
    00000128: 	addq	$0x8, %rsp
    0000012c: 	popq	%rbx
    0000012d: 	popq	%rbp
    0000012e: 	popq	%r12
    00000130: 	popq	%r13
    00000132: 	popq	%r14
    00000134: 	popq	%r15
    00000136: 	retq # Offset: 310
.Ltmp1280:
    00000137: 	movl	(%r13), %edx
    0000013b: 	movq	%rbp, %r12
    0000013e: 	movq	%r13, %rax
    00000141: 	nopl	(%rax) # Size: 7
.Ltmp1293:
    00000148: 	movl	-0x4(%r12), %esi
    0000014d: 	leaq	-0x4(%r12), %rcx
    00000152: 	cmpl	%esi, %edx
    00000154: 	jl	.Ltmp1289 # Offset: 340
    00000156: 	cmpq	%rax, %rcx
    00000159: 	jbe	.Ltmp1290 # Offset: 345
    0000015f: 	cmpl	(%rax), %edx
    00000161: 	jle	.Ltmp1291 # Offset: 353
    00000163: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1292:
    00000168: 	addq	$0x4, %rax
    0000016c: 	cmpl	(%rax), %edx
    0000016e: 	jg	.Ltmp1292 # Offset: 366
    00000170: 	cmpq	%rax, %rcx
    00000173: 	jbe	.Ltmp1290 # Offset: 371
.Ltmp1291:
    00000179: 	movl	(%rax), %edi
    0000017b: 	movl	%edi, (%rcx)
    0000017d: 	movl	%esi, (%rax)
.Ltmp1289:
    0000017f: 	movq	%rcx, %r12
    00000182: 	jmp	.Ltmp1293 # Offset: 386
.Ltmp1279:
    00000184: 	movl	(%r12), %edx
    00000188: 	movq	%r13, %r14
    0000018b: 	movq	%r12, %rax
    0000018e: 	nop # Size: 2
.Ltmp1298:
    00000190: 	leaq	-0x4(%r14), %rsi
    00000194: 	cmpl	%ecx, %edx
    00000196: 	jl	.Ltmp1294 # Offset: 406
    00000198: 	cmpq	%rax, %rsi
    0000019b: 	jbe	.Ltmp1295 # Offset: 411
    000001a1: 	cmpl	%edx, (%rax)
    000001a3: 	jge	.Ltmp1296 # Offset: 419
    000001a5: 	nopl	(%rax) # Size: 3
.Ltmp1297:
    000001a8: 	addq	$0x4, %rax
    000001ac: 	cmpl	(%rax), %edx
    000001ae: 	jg	.Ltmp1297 # Offset: 430
    000001b0: 	cmpq	%rax, %rsi
    000001b3: 	jbe	.Ltmp1295 # Offset: 435
.Ltmp1296:
    000001b9: 	movl	(%rax), %edi
    000001bb: 	movl	%edi, (%rsi)
    000001bd: 	movl	%ecx, (%rax)
.Ltmp1294:
    000001bf: 	movl	-0x4(%rsi), %ecx
    000001c2: 	movq	%rsi, %r14
    000001c5: 	jmp	.Ltmp1298 # Offset: 453
.Ltmp1288:
    000001c7: 	movl	(%r12), %edx
    000001cb: 	movq	%rbx, %rbp
    000001ce: 	movq	%r12, %rax
    000001d1: 	nopl	(%rax) # Size: 7
.Ltmp1303:
    000001d8: 	movl	-0x4(%rbp), %esi
    000001db: 	leaq	-0x4(%rbp), %rcx
    000001df: 	cmpl	%esi, %edx
    000001e1: 	jl	.Ltmp1299 # Offset: 481
    000001e3: 	cmpq	%rax, %rcx
    000001e6: 	jbe	.Ltmp1300 # Offset: 486
    000001ec: 	cmpl	%edx, (%rax)
    000001ee: 	jge	.Ltmp1301 # Offset: 494
.Ltmp1302:
    000001f0: 	addq	$0x4, %rax
    000001f4: 	cmpl	(%rax), %edx
    000001f6: 	jg	.Ltmp1302 # Offset: 502
    000001f8: 	cmpq	%rax, %rcx
    000001fb: 	jbe	.Ltmp1300 # Offset: 507
.Ltmp1301:
    00000201: 	movl	(%rax), %edi
    00000203: 	movl	%edi, (%rcx)
    00000205: 	movl	%esi, (%rax)
.Ltmp1299:
    00000207: 	movq	%rcx, %rbp
    0000020a: 	jmp	.Ltmp1303 # Offset: 522
.Ltmp1287:
    0000020c: 	movl	(%rbp), %edx
    0000020f: 	movq	%r12, %r13
    00000212: 	movq	%rbp, %rax
    00000215: 	nopl	(%rax) # Size: 3
.Ltmp1308:
    00000218: 	leaq	-0x4(%r13), %rsi
    0000021c: 	cmpl	%edx, %ecx
    0000021e: 	jg	.Ltmp1304 # Offset: 542
    00000220: 	cmpq	%rax, %rsi
    00000223: 	jbe	.Ltmp1305 # Offset: 547
    00000225: 	cmpl	(%rax), %edx
    00000227: 	jle	.Ltmp1306 # Offset: 551
    00000229: 	nopl	(%rax) # Size: 7
.Ltmp1307:
    00000230: 	addq	$0x4, %rax
    00000234: 	cmpl	(%rax), %edx
    00000236: 	jg	.Ltmp1307 # Offset: 566
    00000238: 	cmpq	%rax, %rsi
    0000023b: 	jbe	.Ltmp1305 # Offset: 571
.Ltmp1306:
    0000023d: 	movl	(%rax), %edi
    0000023f: 	movl	%edi, (%rsi)
    00000241: 	movl	%ecx, (%rax)
.Ltmp1304:
    00000243: 	movl	-0x4(%rsi), %ecx
    00000246: 	movq	%rsi, %r13
    00000249: 	jmp	.Ltmp1308 # Offset: 585
.Ltmp1305:
    0000024b: 	movq	%r13, %rax
    0000024e: 	subq	%rbp, %rax
    00000251: 	cmpq	$0x4, %rax
    00000255: 	jle	.Ltmp1309 # Offset: 597
    00000257: 	movl	(%rbp), %edx
    0000025a: 	movq	%r13, %r14
    0000025d: 	movq	%rbp, %rax
.Ltmp1314:
    00000260: 	movl	-0x4(%r14), %esi
    00000264: 	leaq	-0x4(%r14), %rcx
    00000268: 	cmpl	%esi, %edx
    0000026a: 	jl	.Ltmp1310 # Offset: 618
    0000026c: 	cmpq	%rax, %rcx
    0000026f: 	jbe	.Ltmp1311 # Offset: 623
    00000271: 	cmpl	(%rax), %edx
    00000273: 	jle	.Ltmp1312 # Offset: 627
    00000275: 	nopl	(%rax) # Size: 3
.Ltmp1313:
    00000278: 	addq	$0x4, %rax
    0000027c: 	cmpl	(%rax), %edx
    0000027e: 	jg	.Ltmp1313 # Offset: 638
    00000280: 	cmpq	%rax, %rcx
    00000283: 	jbe	.Ltmp1311 # Offset: 643
.Ltmp1312:
    00000285: 	movl	(%rax), %edi
    00000287: 	movl	%edi, (%rcx)
    00000289: 	movl	%esi, (%rax)
.Ltmp1310:
    0000028b: 	movq	%rcx, %r14
    0000028e: 	jmp	.Ltmp1314 # Offset: 654
.Ltmp1311:
    00000290: 	movq	%r14, %rax
    00000293: 	subq	%rbp, %rax
    00000296: 	cmpq	$0x4, %rax
    0000029a: 	jle	.Ltmp1315 # Offset: 666
    0000029c: 	movq	%r14, %rsi
    0000029f: 	movq	%rbp, %rdi
    000002a2: 	callq	"_ZN9benchmark9quicksortIP13TypeSub2ClassIiEEEvT_S4_.part.0/1" # Offset: 674
.Ltmp1315:
    000002a7: 	movq	%r13, %rax
    000002aa: 	subq	%r14, %rax
    000002ad: 	cmpq	$0x4, %rax
    000002b1: 	jle	.Ltmp1309 # Offset: 689
    000002b3: 	movq	%r13, %rsi
    000002b6: 	movq	%r14, %rdi
    000002b9: 	callq	"_ZN9benchmark9quicksortIP13TypeSub2ClassIiEEEvT_S4_.part.0/1" # Offset: 697
.Ltmp1309:
    000002be: 	movq	%r12, %rax
    000002c1: 	subq	%r13, %rax
    000002c4: 	cmpq	$0x4, %rax
    000002c8: 	jle	.Ltmp1316 # Offset: 712
    000002ce: 	movl	(%r13), %edx
    000002d2: 	movq	%r12, %rbp
    000002d5: 	movq	%r13, %rax
    000002d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1321:
    000002e0: 	movl	-0x4(%rbp), %esi
    000002e3: 	leaq	-0x4(%rbp), %rcx
    000002e7: 	cmpl	%esi, %edx
    000002e9: 	jl	.Ltmp1317 # Offset: 745
    000002eb: 	cmpq	%rax, %rcx
    000002ee: 	jbe	.Ltmp1318 # Offset: 750
    000002f4: 	cmpl	%edx, (%rax)
    000002f6: 	jge	.Ltmp1319 # Offset: 758
    000002f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1320:
    00000300: 	addq	$0x4, %rax
    00000304: 	cmpl	(%rax), %edx
    00000306: 	jg	.Ltmp1320 # Offset: 774
    00000308: 	cmpq	%rax, %rcx
    0000030b: 	jbe	.Ltmp1318 # Offset: 779
.Ltmp1319:
    00000311: 	movl	(%rax), %edi
    00000313: 	movl	%edi, (%rcx)
    00000315: 	movl	%esi, (%rax)
.Ltmp1317:
    00000317: 	movq	%rcx, %rbp
    0000031a: 	jmp	.Ltmp1321 # Offset: 794
.Ltmp1300:
    0000031c: 	movq	%rbp, %rax
    0000031f: 	subq	%r12, %rax
    00000322: 	cmpq	$0x4, %rax
    00000326: 	jle	.Ltmp1322 # Offset: 806
    00000328: 	movl	(%r12), %edx
    0000032c: 	movq	%rbp, %r13
    0000032f: 	movq	%r12, %rax
    00000332: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1327:
    00000338: 	movl	-0x4(%r13), %esi
    0000033c: 	leaq	-0x4(%r13), %rcx
    00000340: 	cmpl	%esi, %edx
    00000342: 	jl	.Ltmp1323 # Offset: 834
    00000344: 	cmpq	%rax, %rcx
    00000347: 	jbe	.Ltmp1324 # Offset: 839
    00000349: 	cmpl	%edx, (%rax)
    0000034b: 	jge	.Ltmp1325 # Offset: 843
    0000034d: 	nopl	(%rax) # Size: 3
.Ltmp1326:
    00000350: 	addq	$0x4, %rax
    00000354: 	cmpl	(%rax), %edx
    00000356: 	jg	.Ltmp1326 # Offset: 854
    00000358: 	cmpq	%rax, %rcx
    0000035b: 	jbe	.Ltmp1324 # Offset: 859
.Ltmp1325:
    0000035d: 	movl	(%rax), %edi
    0000035f: 	movl	%edi, (%rcx)
    00000361: 	movl	%esi, (%rax)
.Ltmp1323:
    00000363: 	movq	%rcx, %r13
    00000366: 	jmp	.Ltmp1327 # Offset: 870
.Ltmp1324:
    00000368: 	movq	%r13, %rax
    0000036b: 	subq	%r12, %rax
    0000036e: 	cmpq	$0x4, %rax
    00000372: 	jle	.Ltmp1328 # Offset: 882
    00000374: 	movq	%r13, %rsi
    00000377: 	movq	%r12, %rdi
    0000037a: 	callq	"_ZN9benchmark9quicksortIP13TypeSub2ClassIiEEEvT_S4_.part.0/1" # Offset: 890
.Ltmp1328:
    0000037f: 	movq	%rbp, %rax
    00000382: 	subq	%r13, %rax
    00000385: 	cmpq	$0x4, %rax
    00000389: 	jle	.Ltmp1322 # Offset: 905
    0000038b: 	movq	%rbp, %rsi
    0000038e: 	movq	%r13, %rdi
    00000391: 	callq	"_ZN9benchmark9quicksortIP13TypeSub2ClassIiEEEvT_S4_.part.0/1" # Offset: 913
.Ltmp1322:
    00000396: 	movq	%rbx, %rax
    00000399: 	subq	%rbp, %rax
    0000039c: 	cmpq	$0x4, %rax
    000003a0: 	jle	.Ltmp1281 # Offset: 928
    000003a6: 	movl	(%rbp), %edx
    000003a9: 	movq	%rbx, %r12
    000003ac: 	movq	%rbp, %rax
    000003af: 	nop # Size: 1
.Ltmp1333:
    000003b0: 	movl	-0x4(%r12), %esi
    000003b5: 	leaq	-0x4(%r12), %rcx
    000003ba: 	cmpl	%esi, %edx
    000003bc: 	jl	.Ltmp1329 # Offset: 956
    000003be: 	cmpq	%rax, %rcx
    000003c1: 	jbe	.Ltmp1330 # Offset: 961
    000003c7: 	cmpl	(%rax), %edx
    000003c9: 	jle	.Ltmp1331 # Offset: 969
    000003cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1332:
    000003d0: 	addq	$0x4, %rax
    000003d4: 	cmpl	(%rax), %edx
    000003d6: 	jg	.Ltmp1332 # Offset: 982
    000003d8: 	cmpq	%rax, %rcx
    000003db: 	jbe	.Ltmp1330 # Offset: 987
.Ltmp1331:
    000003e1: 	movl	(%rax), %edi
    000003e3: 	movl	%edi, (%rcx)
    000003e5: 	movl	%esi, (%rax)
.Ltmp1329:
    000003e7: 	movq	%rcx, %r12
    000003ea: 	jmp	.Ltmp1333 # Offset: 1002
.Ltmp1295:
    000003ec: 	movq	%r14, %rax
    000003ef: 	subq	%r12, %rax
    000003f2: 	cmpq	$0x4, %rax
    000003f6: 	jle	.Ltmp1334 # Offset: 1014
    000003f8: 	movl	(%r12), %edx
    000003fc: 	movq	%r14, %r15
    000003ff: 	movq	%r12, %rax
    00000402: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1339:
    00000408: 	movl	-0x4(%r15), %esi
    0000040c: 	leaq	-0x4(%r15), %rcx
    00000410: 	cmpl	%esi, %edx
    00000412: 	jl	.Ltmp1335 # Offset: 1042
    00000414: 	cmpq	%rax, %rcx
    00000417: 	jbe	.Ltmp1336 # Offset: 1047
    00000419: 	cmpl	(%rax), %edx
    0000041b: 	jle	.Ltmp1337 # Offset: 1051
    0000041d: 	nopl	(%rax) # Size: 3
.Ltmp1338:
    00000420: 	addq	$0x4, %rax
    00000424: 	cmpl	(%rax), %edx
    00000426: 	jg	.Ltmp1338 # Offset: 1062
    00000428: 	cmpq	%rax, %rcx
    0000042b: 	jbe	.Ltmp1336 # Offset: 1067
.Ltmp1337:
    0000042d: 	movl	(%rax), %edi
    0000042f: 	movl	%edi, (%rcx)
    00000431: 	movl	%esi, (%rax)
.Ltmp1335:
    00000433: 	movq	%rcx, %r15
    00000436: 	jmp	.Ltmp1339 # Offset: 1078
.Ltmp1336:
    00000438: 	movq	%r15, %rax
    0000043b: 	subq	%r12, %rax
    0000043e: 	cmpq	$0x4, %rax
    00000442: 	jle	.Ltmp1340 # Offset: 1090
    00000444: 	movq	%r15, %rsi
    00000447: 	movq	%r12, %rdi
    0000044a: 	callq	"_ZN9benchmark9quicksortIP13TypeSub2ClassIiEEEvT_S4_.part.0/1" # Offset: 1098
.Ltmp1340:
    0000044f: 	movq	%r14, %rax
    00000452: 	subq	%r15, %rax
    00000455: 	cmpq	$0x4, %rax
    00000459: 	jle	.Ltmp1334 # Offset: 1113
    0000045b: 	movq	%r14, %rsi
    0000045e: 	movq	%r15, %rdi
    00000461: 	callq	"_ZN9benchmark9quicksortIP13TypeSub2ClassIiEEEvT_S4_.part.0/1" # Offset: 1121
.Ltmp1334:
    00000466: 	movq	%r13, %rax
    00000469: 	subq	%r14, %rax
    0000046c: 	cmpq	$0x4, %rax
    00000470: 	jle	.Ltmp1341 # Offset: 1136
    00000476: 	movl	(%r14), %edx
    00000479: 	movq	%r13, %r12
    0000047c: 	movq	%r14, %rax
    0000047f: 	nop # Size: 1
.Ltmp1346:
    00000480: 	movl	-0x4(%r12), %esi
    00000485: 	leaq	-0x4(%r12), %rcx
    0000048a: 	cmpl	%esi, %edx
    0000048c: 	jl	.Ltmp1342 # Offset: 1164
    0000048e: 	cmpq	%rax, %rcx
    00000491: 	jbe	.Ltmp1343 # Offset: 1169
    00000497: 	cmpl	(%rax), %edx
    00000499: 	jle	.Ltmp1344 # Offset: 1177
    0000049b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1345:
    000004a0: 	addq	$0x4, %rax
    000004a4: 	cmpl	(%rax), %edx
    000004a6: 	jg	.Ltmp1345 # Offset: 1190
    000004a8: 	cmpq	%rax, %rcx
    000004ab: 	jbe	.Ltmp1343 # Offset: 1195
.Ltmp1344:
    000004b1: 	movl	(%rax), %edi
    000004b3: 	movl	%edi, (%rcx)
    000004b5: 	movl	%esi, (%rax)
.Ltmp1342:
    000004b7: 	movq	%rcx, %r12
    000004ba: 	jmp	.Ltmp1346 # Offset: 1210
.Ltmp1290:
    000004bc: 	movq	%r12, %rax
    000004bf: 	subq	%r13, %rax
    000004c2: 	cmpq	$0x4, %rax
    000004c6: 	jle	.Ltmp1347 # Offset: 1222
    000004c8: 	movl	(%r13), %edx
    000004cc: 	movq	%r12, %r14
    000004cf: 	movq	%r13, %rax
    000004d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1352:
    000004d8: 	movl	-0x4(%r14), %esi
    000004dc: 	leaq	-0x4(%r14), %rcx
    000004e0: 	cmpl	%esi, %edx
    000004e2: 	jl	.Ltmp1348 # Offset: 1250
    000004e4: 	cmpq	%rax, %rcx
    000004e7: 	jbe	.Ltmp1349 # Offset: 1255
    000004e9: 	cmpl	(%rax), %edx
    000004eb: 	jle	.Ltmp1350 # Offset: 1259
    000004ed: 	nopl	(%rax) # Size: 3
.Ltmp1351:
    000004f0: 	addq	$0x4, %rax
    000004f4: 	cmpl	(%rax), %edx
    000004f6: 	jg	.Ltmp1351 # Offset: 1270
    000004f8: 	cmpq	%rax, %rcx
    000004fb: 	jbe	.Ltmp1349 # Offset: 1275
.Ltmp1350:
    000004fd: 	movl	(%rax), %edi
    000004ff: 	movl	%edi, (%rcx)
    00000501: 	movl	%esi, (%rax)
.Ltmp1348:
    00000503: 	movq	%rcx, %r14
    00000506: 	jmp	.Ltmp1352 # Offset: 1286
.Ltmp1349:
    00000508: 	movq	%r14, %rax
    0000050b: 	subq	%r13, %rax
    0000050e: 	cmpq	$0x4, %rax
    00000512: 	jle	.Ltmp1353 # Offset: 1298
    00000514: 	movq	%r14, %rsi
    00000517: 	movq	%r13, %rdi
    0000051a: 	callq	"_ZN9benchmark9quicksortIP13TypeSub2ClassIiEEEvT_S4_.part.0/1" # Offset: 1306
.Ltmp1353:
    0000051f: 	movq	%r12, %rax
    00000522: 	subq	%r14, %rax
    00000525: 	cmpq	$0x4, %rax
    00000529: 	jle	.Ltmp1347 # Offset: 1321
    0000052b: 	movq	%r12, %rsi
    0000052e: 	movq	%r14, %rdi
    00000531: 	callq	"_ZN9benchmark9quicksortIP13TypeSub2ClassIiEEEvT_S4_.part.0/1" # Offset: 1329
.Ltmp1347:
    00000536: 	movq	%rbp, %rax
    00000539: 	subq	%r12, %rax
    0000053c: 	cmpq	$0x4, %rax
    00000540: 	jle	.Ltmp1273 # Offset: 1344
    00000546: 	movl	(%r12), %edx
    0000054a: 	movq	%rbp, %r13
    0000054d: 	movq	%r12, %rax
.Ltmp1358:
    00000550: 	movl	-0x4(%r13), %esi
    00000554: 	leaq	-0x4(%r13), %rcx
    00000558: 	cmpl	%esi, %edx
    0000055a: 	jl	.Ltmp1354 # Offset: 1370
    0000055c: 	cmpq	%rax, %rcx
    0000055f: 	jbe	.Ltmp1355 # Offset: 1375
    00000565: 	cmpl	(%rax), %edx
    00000567: 	jle	.Ltmp1356 # Offset: 1383
    00000569: 	nopl	(%rax) # Size: 7
.Ltmp1357:
    00000570: 	addq	$0x4, %rax
    00000574: 	cmpl	(%rax), %edx
    00000576: 	jg	.Ltmp1357 # Offset: 1398
    00000578: 	cmpq	%rax, %rcx
    0000057b: 	jbe	.Ltmp1355 # Offset: 1403
.Ltmp1356:
    00000581: 	movl	(%rax), %edi
    00000583: 	movl	%edi, (%rcx)
    00000585: 	movl	%esi, (%rax)
.Ltmp1354:
    00000587: 	movq	%rcx, %r13
    0000058a: 	jmp	.Ltmp1358 # Offset: 1418
.Ltmp1318:
    0000058c: 	movq	%rbp, %rax
    0000058f: 	subq	%r13, %rax
    00000592: 	cmpq	$0x4, %rax
    00000596: 	jle	.Ltmp1359 # Offset: 1430
    00000598: 	movq	%rbp, %rsi
    0000059b: 	movq	%r13, %rdi
    0000059e: 	callq	"_ZN9benchmark9quicksortIP13TypeSub2ClassIiEEEvT_S4_.part.0/1" # Offset: 1438
.Ltmp1359:
    000005a3: 	movq	%r12, %rax
    000005a6: 	subq	%rbp, %rax
    000005a9: 	cmpq	$0x4, %rax
    000005ad: 	jle	.Ltmp1316 # Offset: 1453
    000005b3: 	movq	%r12, %rsi
    000005b6: 	movq	%rbp, %rdi
    000005b9: 	callq	"_ZN9benchmark9quicksortIP13TypeSub2ClassIiEEEvT_S4_.part.0/1" # Offset: 1465
    000005be: 	jmp	.Ltmp1316 # Offset: 1470
.Ltmp1330:
    000005c3: 	movq	%r12, %rax
    000005c6: 	subq	%rbp, %rax
    000005c9: 	cmpq	$0x4, %rax
    000005cd: 	jle	.Ltmp1360 # Offset: 1485
    000005cf: 	movq	%r12, %rsi
    000005d2: 	movq	%rbp, %rdi
    000005d5: 	callq	"_ZN9benchmark9quicksortIP13TypeSub2ClassIiEEEvT_S4_.part.0/1" # Offset: 1493
.Ltmp1360:
    000005da: 	movq	%rbx, %rax
    000005dd: 	subq	%r12, %rax
    000005e0: 	cmpq	$0x4, %rax
    000005e4: 	jg	.Ltmp1361 # Offset: 1508
    000005ea: 	jmp	.Ltmp1281 # Offset: 1514
.Ltmp1343:
    000005ef: 	movq	%r12, %rax
    000005f2: 	subq	%r14, %rax
    000005f5: 	cmpq	$0x4, %rax
    000005f9: 	jle	.Ltmp1362 # Offset: 1529
    000005fb: 	movq	%r12, %rsi
    000005fe: 	movq	%r14, %rdi
    00000601: 	callq	"_ZN9benchmark9quicksortIP13TypeSub2ClassIiEEEvT_S4_.part.0/1" # Offset: 1537
.Ltmp1362:
    00000606: 	movq	%r13, %rax
    00000609: 	subq	%r12, %rax
    0000060c: 	cmpq	$0x4, %rax
    00000610: 	jle	.Ltmp1341 # Offset: 1552
    00000616: 	movq	%r13, %rsi
    00000619: 	movq	%r12, %rdi
    0000061c: 	callq	"_ZN9benchmark9quicksortIP13TypeSub2ClassIiEEEvT_S4_.part.0/1" # Offset: 1564
    00000621: 	jmp	.Ltmp1341 # Offset: 1569
.Ltmp1355:
    00000626: 	movq	%r13, %rax
    00000629: 	subq	%r12, %rax
    0000062c: 	cmpq	$0x4, %rax
    00000630: 	jle	.Ltmp1363 # Offset: 1584
    00000632: 	movq	%r13, %rsi
    00000635: 	movq	%r12, %rdi
    00000638: 	callq	"_ZN9benchmark9quicksortIP13TypeSub2ClassIiEEEvT_S4_.part.0/1" # Offset: 1592
.Ltmp1363:
    0000063d: 	movq	%rbp, %rax
    00000640: 	subq	%r13, %rax
    00000643: 	cmpq	$0x4, %rax
    00000647: 	jle	.Ltmp1273 # Offset: 1607
    0000064d: 	movq	%rbp, %rsi
    00000650: 	movq	%r13, %rdi
    00000653: 	callq	"_ZN9benchmark9quicksortIP13TypeSub2ClassIiEEEvT_S4_.part.0/1" # Offset: 1619
    00000658: 	jmp	.Ltmp1273 # Offset: 1624
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIP13TypeSub2ClassIiEEEvT_S4_.part.0/1(*2)"

Binary Function "_ZN9benchmark9quicksortIP13TypeSub2ClassImEEEvT_S4_.part.0/1(*2)" after disassembly {
  All names   : _ZN9benchmark9quicksortIP13TypeSub2ClassImEEEvT_S4_.part.0/1
                _ZN9benchmark9quicksortIP13TypeSub2ClassImEEEvT_S4_.part.0/stepanov_inherit.cpp/1
  Number      : 98
  State       : disassembled
  Address     : 0x97a0
  Size        : 0x6d9
  MaxSize     : 0x6e0
  Offset      : 0x97a0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIP13TypeSub2ClassImEEEvT_S4_.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB097:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	movq	%rdi, %r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rsi, %rbx
    00000010: 	subq	$0x8, %rsp
.Ltmp1457:
    00000014: 	movq	(%r12), %rdx
    00000018: 	movq	%rbx, %rbp
    0000001b: 	movq	%r12, %rax
    0000001e: 	nop # Size: 2
.Ltmp1368:
    00000020: 	movq	-0x8(%rbp), %rcx
    00000024: 	leaq	-0x8(%rbp), %rsi
    00000028: 	cmpq	%rcx, %rdx
    0000002b: 	jb	.Ltmp1364 # Offset: 43
    0000002d: 	cmpq	%rax, %rsi
    00000030: 	jbe	.Ltmp1365 # Offset: 48
    00000032: 	cmpq	(%rax), %rdx
    00000035: 	jbe	.Ltmp1366 # Offset: 53
    00000037: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1367:
    00000040: 	addq	$0x8, %rax
    00000044: 	cmpq	(%rax), %rdx
    00000047: 	ja	.Ltmp1367 # Offset: 71
    00000049: 	cmpq	%rax, %rsi
    0000004c: 	jbe	.Ltmp1365 # Offset: 76
.Ltmp1366:
    0000004e: 	movq	(%rax), %rdi
    00000051: 	movq	%rdi, (%rsi)
    00000054: 	movq	%rcx, (%rax)
.Ltmp1364:
    00000057: 	movq	%rsi, %rbp
    0000005a: 	jmp	.Ltmp1368 # Offset: 90
    0000005c: 	nopl	(%rax) # Size: 4
.Ltmp1365:
    00000060: 	movq	%rbp, %rax
    00000063: 	subq	%r12, %rax
    00000066: 	cmpq	$0x8, %rax
    0000006a: 	jle	.Ltmp1369 # Offset: 106
    0000006c: 	movq	(%r12), %rdx
    00000070: 	movq	%rbp, %r13
    00000073: 	movq	%r12, %rax
    00000076: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1374:
    00000080: 	leaq	-0x8(%r13), %rsi
    00000084: 	cmpq	%rcx, %rdx
    00000087: 	jb	.Ltmp1370 # Offset: 135
    00000089: 	cmpq	%rax, %rsi
    0000008c: 	jbe	.Ltmp1371 # Offset: 140
    0000008e: 	cmpq	(%rax), %rdx
    00000091: 	jbe	.Ltmp1372 # Offset: 145
    00000093: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1373:
    00000098: 	addq	$0x8, %rax
    0000009c: 	cmpq	(%rax), %rdx
    0000009f: 	ja	.Ltmp1373 # Offset: 159
    000000a1: 	cmpq	%rax, %rsi
    000000a4: 	jbe	.Ltmp1371 # Offset: 164
.Ltmp1372:
    000000a6: 	movq	(%rax), %rdi
    000000a9: 	movq	%rdi, (%rsi)
    000000ac: 	movq	%rcx, (%rax)
.Ltmp1370:
    000000af: 	movq	-0x8(%rsi), %rcx
    000000b3: 	movq	%rsi, %r13
    000000b6: 	jmp	.Ltmp1374 # Offset: 182
.Ltmp1371:
    000000b8: 	movq	%r13, %rax
    000000bb: 	subq	%r12, %rax
    000000be: 	cmpq	$0x8, %rax
    000000c2: 	jg	.Ltmp1375 # Offset: 194
.Ltmp1437:
    000000c8: 	movq	%rbp, %rax
    000000cb: 	subq	%r13, %rax
    000000ce: 	cmpq	$0x8, %rax
    000000d2: 	jg	.Ltmp1376 # Offset: 210
.Ltmp1369:
    000000d8: 	movq	%rbx, %rax
    000000db: 	subq	%rbp, %rax
    000000de: 	cmpq	$0x8, %rax
    000000e2: 	jle	.Ltmp1377 # Offset: 226
    000000e4: 	movq	(%rbp), %rdx
    000000e8: 	movq	%rbx, %r12
    000000eb: 	movq	%rbp, %rax
    000000ee: 	nop # Size: 2
.Ltmp1382:
    000000f0: 	movq	-0x8(%r12), %rcx
    000000f5: 	leaq	-0x8(%r12), %rsi
    000000fa: 	cmpq	%rcx, %rdx
    000000fd: 	jb	.Ltmp1378 # Offset: 253
    000000ff: 	cmpq	%rax, %rsi
    00000102: 	jbe	.Ltmp1379 # Offset: 258
    00000104: 	cmpq	(%rax), %rdx
    00000107: 	jbe	.Ltmp1380 # Offset: 263
    00000109: 	nopl	(%rax) # Size: 7
.Ltmp1381:
    00000110: 	addq	$0x8, %rax
    00000114: 	cmpq	(%rax), %rdx
    00000117: 	ja	.Ltmp1381 # Offset: 279
    00000119: 	cmpq	%rax, %rsi
    0000011c: 	jbe	.Ltmp1379 # Offset: 284
.Ltmp1380:
    0000011e: 	movq	(%rax), %rdi
    00000121: 	movq	%rdi, (%rsi)
    00000124: 	movq	%rcx, (%rax)
.Ltmp1378:
    00000127: 	movq	%rsi, %r12
    0000012a: 	jmp	.Ltmp1382 # Offset: 298
.Ltmp1379:
    0000012c: 	movq	%r12, %rax
    0000012f: 	subq	%rbp, %rax
    00000132: 	cmpq	$0x8, %rax
    00000136: 	jg	.Ltmp1383 # Offset: 310
.Ltmp1412:
    0000013c: 	movq	%rbx, %rax
    0000013f: 	subq	%r12, %rax
    00000142: 	cmpq	$0x8, %rax
    00000146: 	jg	.Ltmp1384 # Offset: 326
.Ltmp1377:
    0000014c: 	addq	$0x8, %rsp
    00000150: 	popq	%rbx
    00000151: 	popq	%rbp
    00000152: 	popq	%r12
    00000154: 	popq	%r13
    00000156: 	popq	%r14
    00000158: 	popq	%r15
    0000015a: 	retq # Offset: 346
.Ltmp1376:
    0000015b: 	movq	(%r13), %rdx
    0000015f: 	movq	%rbp, %r12
    00000162: 	movq	%r13, %rax
    00000165: 	nopl	(%rax) # Size: 3
.Ltmp1389:
    00000168: 	movq	-0x8(%r12), %rsi
    0000016d: 	leaq	-0x8(%r12), %rcx
    00000172: 	cmpq	%rsi, %rdx
    00000175: 	jb	.Ltmp1385 # Offset: 373
    00000177: 	cmpq	%rax, %rcx
    0000017a: 	jbe	.Ltmp1386 # Offset: 378
    00000180: 	cmpq	(%rax), %rdx
    00000183: 	jbe	.Ltmp1387 # Offset: 387
    00000185: 	nopl	(%rax) # Size: 3
.Ltmp1388:
    00000188: 	addq	$0x8, %rax
    0000018c: 	cmpq	(%rax), %rdx
    0000018f: 	ja	.Ltmp1388 # Offset: 399
    00000191: 	cmpq	%rax, %rcx
    00000194: 	jbe	.Ltmp1386 # Offset: 404
.Ltmp1387:
    0000019a: 	movq	(%rax), %rdi
    0000019d: 	movq	%rdi, (%rcx)
    000001a0: 	movq	%rsi, (%rax)
.Ltmp1385:
    000001a3: 	movq	%rcx, %r12
    000001a6: 	jmp	.Ltmp1389 # Offset: 422
.Ltmp1375:
    000001a8: 	movq	(%r12), %rdx
    000001ac: 	movq	%r13, %r14
    000001af: 	movq	%r12, %rax
    000001b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1394:
    000001b8: 	leaq	-0x8(%r14), %rsi
    000001bc: 	cmpq	%rcx, %rdx
    000001bf: 	jb	.Ltmp1390 # Offset: 447
    000001c1: 	cmpq	%rax, %rsi
    000001c4: 	jbe	.Ltmp1391 # Offset: 452
    000001ca: 	cmpq	%rdx, (%rax)
    000001cd: 	jae	.Ltmp1392 # Offset: 461
    000001cf: 	nop # Size: 1
.Ltmp1393:
    000001d0: 	addq	$0x8, %rax
    000001d4: 	cmpq	(%rax), %rdx
    000001d7: 	ja	.Ltmp1393 # Offset: 471
    000001d9: 	cmpq	%rax, %rsi
    000001dc: 	jbe	.Ltmp1391 # Offset: 476
.Ltmp1392:
    000001e2: 	movq	(%rax), %rdi
    000001e5: 	movq	%rdi, (%rsi)
    000001e8: 	movq	%rcx, (%rax)
.Ltmp1390:
    000001eb: 	movq	-0x8(%rsi), %rcx
    000001ef: 	movq	%rsi, %r14
    000001f2: 	jmp	.Ltmp1394 # Offset: 498
.Ltmp1384:
    000001f4: 	movq	(%r12), %rdx
    000001f8: 	movq	%rbx, %rbp
    000001fb: 	movq	%r12, %rax
    000001fe: 	nop # Size: 2
.Ltmp1399:
    00000200: 	movq	-0x8(%rbp), %rsi
    00000204: 	leaq	-0x8(%rbp), %rcx
    00000208: 	cmpq	%rsi, %rdx
    0000020b: 	jb	.Ltmp1395 # Offset: 523
    0000020d: 	cmpq	%rax, %rcx
    00000210: 	jbe	.Ltmp1396 # Offset: 528
    00000216: 	cmpq	%rdx, (%rax)
    00000219: 	jae	.Ltmp1397 # Offset: 537
    0000021b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1398:
    00000220: 	addq	$0x8, %rax
    00000224: 	cmpq	(%rax), %rdx
    00000227: 	ja	.Ltmp1398 # Offset: 551
    00000229: 	cmpq	%rax, %rcx
    0000022c: 	jbe	.Ltmp1396 # Offset: 556
.Ltmp1397:
    00000232: 	movq	(%rax), %rdi
    00000235: 	movq	%rdi, (%rcx)
    00000238: 	movq	%rsi, (%rax)
.Ltmp1395:
    0000023b: 	movq	%rcx, %rbp
    0000023e: 	jmp	.Ltmp1399 # Offset: 574
.Ltmp1383:
    00000240: 	movq	(%rbp), %rdx
    00000244: 	movq	%r12, %r13
    00000247: 	movq	%rbp, %rax
    0000024a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1404:
    00000250: 	leaq	-0x8(%r13), %rsi
    00000254: 	cmpq	%rdx, %rcx
    00000257: 	ja	.Ltmp1400 # Offset: 599
    00000259: 	cmpq	%rax, %rsi
    0000025c: 	jbe	.Ltmp1401 # Offset: 604
    0000025e: 	cmpq	(%rax), %rdx
    00000261: 	jbe	.Ltmp1402 # Offset: 609
    00000263: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1403:
    00000268: 	addq	$0x8, %rax
    0000026c: 	cmpq	(%rax), %rdx
    0000026f: 	ja	.Ltmp1403 # Offset: 623
    00000271: 	cmpq	%rax, %rsi
    00000274: 	jbe	.Ltmp1401 # Offset: 628
.Ltmp1402:
    00000276: 	movq	(%rax), %rdi
    00000279: 	movq	%rdi, (%rsi)
    0000027c: 	movq	%rcx, (%rax)
.Ltmp1400:
    0000027f: 	movq	-0x8(%rsi), %rcx
    00000283: 	movq	%rsi, %r13
    00000286: 	jmp	.Ltmp1404 # Offset: 646
.Ltmp1401:
    00000288: 	movq	%r13, %rax
    0000028b: 	subq	%rbp, %rax
    0000028e: 	cmpq	$0x8, %rax
    00000292: 	jle	.Ltmp1405 # Offset: 658
    00000294: 	movq	(%rbp), %rdx
    00000298: 	movq	%r13, %r14
    0000029b: 	movq	%rbp, %rax
    0000029e: 	nop # Size: 2
.Ltmp1410:
    000002a0: 	movq	-0x8(%r14), %rsi
    000002a4: 	leaq	-0x8(%r14), %rcx
    000002a8: 	cmpq	%rsi, %rdx
    000002ab: 	jb	.Ltmp1406 # Offset: 683
    000002ad: 	cmpq	%rax, %rcx
    000002b0: 	jbe	.Ltmp1407 # Offset: 688
    000002b2: 	cmpq	(%rax), %rdx
    000002b5: 	jbe	.Ltmp1408 # Offset: 693
    000002b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1409:
    000002c0: 	addq	$0x8, %rax
    000002c4: 	cmpq	(%rax), %rdx
    000002c7: 	ja	.Ltmp1409 # Offset: 711
    000002c9: 	cmpq	%rax, %rcx
    000002cc: 	jbe	.Ltmp1407 # Offset: 716
.Ltmp1408:
    000002ce: 	movq	(%rax), %rdi
    000002d1: 	movq	%rdi, (%rcx)
    000002d4: 	movq	%rsi, (%rax)
.Ltmp1406:
    000002d7: 	movq	%rcx, %r14
    000002da: 	jmp	.Ltmp1410 # Offset: 730
.Ltmp1407:
    000002dc: 	movq	%r14, %rax
    000002df: 	subq	%rbp, %rax
    000002e2: 	cmpq	$0x8, %rax
    000002e6: 	jle	.Ltmp1411 # Offset: 742
    000002e8: 	movq	%r14, %rsi
    000002eb: 	movq	%rbp, %rdi
    000002ee: 	callq	"_ZN9benchmark9quicksortIP13TypeSub2ClassImEEEvT_S4_.part.0/1" # Offset: 750
.Ltmp1411:
    000002f3: 	movq	%r13, %rax
    000002f6: 	subq	%r14, %rax
    000002f9: 	cmpq	$0x8, %rax
    000002fd: 	jle	.Ltmp1405 # Offset: 765
    000002ff: 	movq	%r13, %rsi
    00000302: 	movq	%r14, %rdi
    00000305: 	callq	"_ZN9benchmark9quicksortIP13TypeSub2ClassImEEEvT_S4_.part.0/1" # Offset: 773
.Ltmp1405:
    0000030a: 	movq	%r12, %rax
    0000030d: 	subq	%r13, %rax
    00000310: 	cmpq	$0x8, %rax
    00000314: 	jle	.Ltmp1412 # Offset: 788
    0000031a: 	movq	(%r13), %rdx
    0000031e: 	movq	%r12, %rbp
    00000321: 	movq	%r13, %rax
    00000324: 	nopl	(%rax) # Size: 4
.Ltmp1417:
    00000328: 	movq	-0x8(%rbp), %rsi
    0000032c: 	leaq	-0x8(%rbp), %rcx
    00000330: 	cmpq	%rsi, %rdx
    00000333: 	jb	.Ltmp1413 # Offset: 819
    00000335: 	cmpq	%rax, %rcx
    00000338: 	jbe	.Ltmp1414 # Offset: 824
    0000033e: 	cmpq	%rdx, (%rax)
    00000341: 	jae	.Ltmp1415 # Offset: 833
    00000343: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1416:
    00000348: 	addq	$0x8, %rax
    0000034c: 	cmpq	(%rax), %rdx
    0000034f: 	ja	.Ltmp1416 # Offset: 847
    00000351: 	cmpq	%rax, %rcx
    00000354: 	jbe	.Ltmp1414 # Offset: 852
.Ltmp1415:
    0000035a: 	movq	(%rax), %rdi
    0000035d: 	movq	%rdi, (%rcx)
    00000360: 	movq	%rsi, (%rax)
.Ltmp1413:
    00000363: 	movq	%rcx, %rbp
    00000366: 	jmp	.Ltmp1417 # Offset: 870
.Ltmp1396:
    00000368: 	movq	%rbp, %rax
    0000036b: 	subq	%r12, %rax
    0000036e: 	cmpq	$0x8, %rax
    00000372: 	jle	.Ltmp1418 # Offset: 882
    00000374: 	movq	(%r12), %rdx
    00000378: 	movq	%rbp, %r13
    0000037b: 	movq	%r12, %rax
    0000037e: 	nop # Size: 2
.Ltmp1423:
    00000380: 	movq	-0x8(%r13), %rsi
    00000384: 	leaq	-0x8(%r13), %rcx
    00000388: 	cmpq	%rsi, %rdx
    0000038b: 	jb	.Ltmp1419 # Offset: 907
    0000038d: 	cmpq	%rax, %rcx
    00000390: 	jbe	.Ltmp1420 # Offset: 912
    00000392: 	cmpq	%rdx, (%rax)
    00000395: 	jae	.Ltmp1421 # Offset: 917
    00000397: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1422:
    000003a0: 	addq	$0x8, %rax
    000003a4: 	cmpq	(%rax), %rdx
    000003a7: 	ja	.Ltmp1422 # Offset: 935
    000003a9: 	cmpq	%rax, %rcx
    000003ac: 	jbe	.Ltmp1420 # Offset: 940
.Ltmp1421:
    000003ae: 	movq	(%rax), %rdi
    000003b1: 	movq	%rdi, (%rcx)
    000003b4: 	movq	%rsi, (%rax)
.Ltmp1419:
    000003b7: 	movq	%rcx, %r13
    000003ba: 	jmp	.Ltmp1423 # Offset: 954
.Ltmp1420:
    000003bc: 	movq	%r13, %rax
    000003bf: 	subq	%r12, %rax
    000003c2: 	cmpq	$0x8, %rax
    000003c6: 	jle	.Ltmp1424 # Offset: 966
    000003c8: 	movq	%r13, %rsi
    000003cb: 	movq	%r12, %rdi
    000003ce: 	callq	"_ZN9benchmark9quicksortIP13TypeSub2ClassImEEEvT_S4_.part.0/1" # Offset: 974
.Ltmp1424:
    000003d3: 	movq	%rbp, %rax
    000003d6: 	subq	%r13, %rax
    000003d9: 	cmpq	$0x8, %rax
    000003dd: 	jle	.Ltmp1418 # Offset: 989
    000003df: 	movq	%rbp, %rsi
    000003e2: 	movq	%r13, %rdi
    000003e5: 	callq	"_ZN9benchmark9quicksortIP13TypeSub2ClassImEEEvT_S4_.part.0/1" # Offset: 997
.Ltmp1418:
    000003ea: 	movq	%rbx, %rax
    000003ed: 	subq	%rbp, %rax
    000003f0: 	cmpq	$0x8, %rax
    000003f4: 	jle	.Ltmp1377 # Offset: 1012
    000003fa: 	movq	(%rbp), %rdx
    000003fe: 	movq	%rbx, %r12
    00000401: 	movq	%rbp, %rax
    00000404: 	nopl	(%rax) # Size: 4
.Ltmp1429:
    00000408: 	movq	-0x8(%r12), %rsi
    0000040d: 	leaq	-0x8(%r12), %rcx
    00000412: 	cmpq	%rsi, %rdx
    00000415: 	jb	.Ltmp1425 # Offset: 1045
    00000417: 	cmpq	%rax, %rcx
    0000041a: 	jbe	.Ltmp1426 # Offset: 1050
    00000420: 	cmpq	(%rax), %rdx
    00000423: 	jbe	.Ltmp1427 # Offset: 1059
    00000425: 	nopl	(%rax) # Size: 3
.Ltmp1428:
    00000428: 	addq	$0x8, %rax
    0000042c: 	cmpq	(%rax), %rdx
    0000042f: 	ja	.Ltmp1428 # Offset: 1071
    00000431: 	cmpq	%rax, %rcx
    00000434: 	jbe	.Ltmp1426 # Offset: 1076
.Ltmp1427:
    0000043a: 	movq	(%rax), %rdi
    0000043d: 	movq	%rdi, (%rcx)
    00000440: 	movq	%rsi, (%rax)
.Ltmp1425:
    00000443: 	movq	%rcx, %r12
    00000446: 	jmp	.Ltmp1429 # Offset: 1094
.Ltmp1391:
    00000448: 	movq	%r14, %rax
    0000044b: 	subq	%r12, %rax
    0000044e: 	cmpq	$0x8, %rax
    00000452: 	jle	.Ltmp1430 # Offset: 1106
    00000454: 	movq	(%r12), %rdx
    00000458: 	movq	%r14, %r15
    0000045b: 	movq	%r12, %rax
    0000045e: 	nop # Size: 2
.Ltmp1435:
    00000460: 	movq	-0x8(%r15), %rsi
    00000464: 	leaq	-0x8(%r15), %rcx
    00000468: 	cmpq	%rsi, %rdx
    0000046b: 	jb	.Ltmp1431 # Offset: 1131
    0000046d: 	cmpq	%rax, %rcx
    00000470: 	jbe	.Ltmp1432 # Offset: 1136
    00000472: 	cmpq	(%rax), %rdx
    00000475: 	jbe	.Ltmp1433 # Offset: 1141
    00000477: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1434:
    00000480: 	addq	$0x8, %rax
    00000484: 	cmpq	(%rax), %rdx
    00000487: 	ja	.Ltmp1434 # Offset: 1159
    00000489: 	cmpq	%rax, %rcx
    0000048c: 	jbe	.Ltmp1432 # Offset: 1164
.Ltmp1433:
    0000048e: 	movq	(%rax), %rdi
    00000491: 	movq	%rdi, (%rcx)
    00000494: 	movq	%rsi, (%rax)
.Ltmp1431:
    00000497: 	movq	%rcx, %r15
    0000049a: 	jmp	.Ltmp1435 # Offset: 1178
.Ltmp1432:
    0000049c: 	movq	%r15, %rax
    0000049f: 	subq	%r12, %rax
    000004a2: 	cmpq	$0x8, %rax
    000004a6: 	jle	.Ltmp1436 # Offset: 1190
    000004a8: 	movq	%r15, %rsi
    000004ab: 	movq	%r12, %rdi
    000004ae: 	callq	"_ZN9benchmark9quicksortIP13TypeSub2ClassImEEEvT_S4_.part.0/1" # Offset: 1198
.Ltmp1436:
    000004b3: 	movq	%r14, %rax
    000004b6: 	subq	%r15, %rax
    000004b9: 	cmpq	$0x8, %rax
    000004bd: 	jle	.Ltmp1430 # Offset: 1213
    000004bf: 	movq	%r14, %rsi
    000004c2: 	movq	%r15, %rdi
    000004c5: 	callq	"_ZN9benchmark9quicksortIP13TypeSub2ClassImEEEvT_S4_.part.0/1" # Offset: 1221
.Ltmp1430:
    000004ca: 	movq	%r13, %rax
    000004cd: 	subq	%r14, %rax
    000004d0: 	cmpq	$0x8, %rax
    000004d4: 	jle	.Ltmp1437 # Offset: 1236
    000004da: 	movq	(%r14), %rdx
    000004dd: 	movq	%r13, %r12
    000004e0: 	movq	%r14, %rax
    000004e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1442:
    000004e8: 	movq	-0x8(%r12), %rsi
    000004ed: 	leaq	-0x8(%r12), %rcx
    000004f2: 	cmpq	%rsi, %rdx
    000004f5: 	jb	.Ltmp1438 # Offset: 1269
    000004f7: 	cmpq	%rax, %rcx
    000004fa: 	jbe	.Ltmp1439 # Offset: 1274
    00000500: 	cmpq	(%rax), %rdx
    00000503: 	jbe	.Ltmp1440 # Offset: 1283
    00000505: 	nopl	(%rax) # Size: 3
.Ltmp1441:
    00000508: 	addq	$0x8, %rax
    0000050c: 	cmpq	(%rax), %rdx
    0000050f: 	ja	.Ltmp1441 # Offset: 1295
    00000511: 	cmpq	%rax, %rcx
    00000514: 	jbe	.Ltmp1439 # Offset: 1300
.Ltmp1440:
    0000051a: 	movq	(%rax), %rdi
    0000051d: 	movq	%rdi, (%rcx)
    00000520: 	movq	%rsi, (%rax)
.Ltmp1438:
    00000523: 	movq	%rcx, %r12
    00000526: 	jmp	.Ltmp1442 # Offset: 1318
.Ltmp1386:
    00000528: 	movq	%r12, %rax
    0000052b: 	subq	%r13, %rax
    0000052e: 	cmpq	$0x8, %rax
    00000532: 	jle	.Ltmp1443 # Offset: 1330
    00000534: 	movq	(%r13), %rdx
    00000538: 	movq	%r12, %r14
    0000053b: 	movq	%r13, %rax
    0000053e: 	nop # Size: 2
.Ltmp1448:
    00000540: 	movq	-0x8(%r14), %rsi
    00000544: 	leaq	-0x8(%r14), %rcx
    00000548: 	cmpq	%rsi, %rdx
    0000054b: 	jb	.Ltmp1444 # Offset: 1355
    0000054d: 	cmpq	%rax, %rcx
    00000550: 	jbe	.Ltmp1445 # Offset: 1360
    00000552: 	cmpq	(%rax), %rdx
    00000555: 	jbe	.Ltmp1446 # Offset: 1365
    00000557: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1447:
    00000560: 	addq	$0x8, %rax
    00000564: 	cmpq	(%rax), %rdx
    00000567: 	ja	.Ltmp1447 # Offset: 1383
    00000569: 	cmpq	%rax, %rcx
    0000056c: 	jbe	.Ltmp1445 # Offset: 1388
.Ltmp1446:
    0000056e: 	movq	(%rax), %rdi
    00000571: 	movq	%rdi, (%rcx)
    00000574: 	movq	%rsi, (%rax)
.Ltmp1444:
    00000577: 	movq	%rcx, %r14
    0000057a: 	jmp	.Ltmp1448 # Offset: 1402
.Ltmp1445:
    0000057c: 	movq	%r14, %rax
    0000057f: 	subq	%r13, %rax
    00000582: 	cmpq	$0x8, %rax
    00000586: 	jle	.Ltmp1449 # Offset: 1414
    00000588: 	movq	%r14, %rsi
    0000058b: 	movq	%r13, %rdi
    0000058e: 	callq	"_ZN9benchmark9quicksortIP13TypeSub2ClassImEEEvT_S4_.part.0/1" # Offset: 1422
.Ltmp1449:
    00000593: 	movq	%r12, %rax
    00000596: 	subq	%r14, %rax
    00000599: 	cmpq	$0x8, %rax
    0000059d: 	jle	.Ltmp1443 # Offset: 1437
    0000059f: 	movq	%r12, %rsi
    000005a2: 	movq	%r14, %rdi
    000005a5: 	callq	"_ZN9benchmark9quicksortIP13TypeSub2ClassImEEEvT_S4_.part.0/1" # Offset: 1445
.Ltmp1443:
    000005aa: 	movq	%rbp, %rax
    000005ad: 	subq	%r12, %rax
    000005b0: 	cmpq	$0x8, %rax
    000005b4: 	jle	.Ltmp1369 # Offset: 1460
    000005ba: 	movq	(%r12), %rdx
    000005be: 	movq	%rbp, %r13
    000005c1: 	movq	%r12, %rax
    000005c4: 	nopl	(%rax) # Size: 4
.Ltmp1454:
    000005c8: 	movq	-0x8(%r13), %rsi
    000005cc: 	leaq	-0x8(%r13), %rcx
    000005d0: 	cmpq	%rsi, %rdx
    000005d3: 	jb	.Ltmp1450 # Offset: 1491
    000005d5: 	cmpq	%rax, %rcx
    000005d8: 	jbe	.Ltmp1451 # Offset: 1496
    000005de: 	cmpq	(%rax), %rdx
    000005e1: 	jbe	.Ltmp1452 # Offset: 1505
    000005e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1453:
    000005e8: 	addq	$0x8, %rax
    000005ec: 	cmpq	(%rax), %rdx
    000005ef: 	ja	.Ltmp1453 # Offset: 1519
    000005f1: 	cmpq	%rax, %rcx
    000005f4: 	jbe	.Ltmp1451 # Offset: 1524
.Ltmp1452:
    000005fa: 	movq	(%rax), %rdi
    000005fd: 	movq	%rdi, (%rcx)
    00000600: 	movq	%rsi, (%rax)
.Ltmp1450:
    00000603: 	movq	%rcx, %r13
    00000606: 	jmp	.Ltmp1454 # Offset: 1542
.Ltmp1414:
    00000608: 	movq	%rbp, %rax
    0000060b: 	subq	%r13, %rax
    0000060e: 	cmpq	$0x8, %rax
    00000612: 	jle	.Ltmp1455 # Offset: 1554
    00000614: 	movq	%rbp, %rsi
    00000617: 	movq	%r13, %rdi
    0000061a: 	callq	"_ZN9benchmark9quicksortIP13TypeSub2ClassImEEEvT_S4_.part.0/1" # Offset: 1562
.Ltmp1455:
    0000061f: 	movq	%r12, %rax
    00000622: 	subq	%rbp, %rax
    00000625: 	cmpq	$0x8, %rax
    00000629: 	jle	.Ltmp1412 # Offset: 1577
    0000062f: 	movq	%r12, %rsi
    00000632: 	movq	%rbp, %rdi
    00000635: 	callq	"_ZN9benchmark9quicksortIP13TypeSub2ClassImEEEvT_S4_.part.0/1" # Offset: 1589
    0000063a: 	jmp	.Ltmp1412 # Offset: 1594
.Ltmp1426:
    0000063f: 	movq	%r12, %rax
    00000642: 	subq	%rbp, %rax
    00000645: 	cmpq	$0x8, %rax
    00000649: 	jle	.Ltmp1456 # Offset: 1609
    0000064b: 	movq	%r12, %rsi
    0000064e: 	movq	%rbp, %rdi
    00000651: 	callq	"_ZN9benchmark9quicksortIP13TypeSub2ClassImEEEvT_S4_.part.0/1" # Offset: 1617
.Ltmp1456:
    00000656: 	movq	%rbx, %rax
    00000659: 	subq	%r12, %rax
    0000065c: 	cmpq	$0x8, %rax
    00000660: 	jg	.Ltmp1457 # Offset: 1632
    00000666: 	jmp	.Ltmp1377 # Offset: 1638
.Ltmp1439:
    0000066b: 	movq	%r12, %rax
    0000066e: 	subq	%r14, %rax
    00000671: 	cmpq	$0x8, %rax
    00000675: 	jle	.Ltmp1458 # Offset: 1653
    00000677: 	movq	%r12, %rsi
    0000067a: 	movq	%r14, %rdi
    0000067d: 	callq	"_ZN9benchmark9quicksortIP13TypeSub2ClassImEEEvT_S4_.part.0/1" # Offset: 1661
.Ltmp1458:
    00000682: 	movq	%r13, %rax
    00000685: 	subq	%r12, %rax
    00000688: 	cmpq	$0x8, %rax
    0000068c: 	jle	.Ltmp1437 # Offset: 1676
    00000692: 	movq	%r13, %rsi
    00000695: 	movq	%r12, %rdi
    00000698: 	callq	"_ZN9benchmark9quicksortIP13TypeSub2ClassImEEEvT_S4_.part.0/1" # Offset: 1688
    0000069d: 	jmp	.Ltmp1437 # Offset: 1693
.Ltmp1451:
    000006a2: 	movq	%r13, %rax
    000006a5: 	subq	%r12, %rax
    000006a8: 	cmpq	$0x8, %rax
    000006ac: 	jle	.Ltmp1459 # Offset: 1708
    000006ae: 	movq	%r13, %rsi
    000006b1: 	movq	%r12, %rdi
    000006b4: 	callq	"_ZN9benchmark9quicksortIP13TypeSub2ClassImEEEvT_S4_.part.0/1" # Offset: 1716
.Ltmp1459:
    000006b9: 	movq	%rbp, %rax
    000006bc: 	subq	%r13, %rax
    000006bf: 	cmpq	$0x8, %rax
    000006c3: 	jle	.Ltmp1369 # Offset: 1731
    000006c9: 	movq	%rbp, %rsi
    000006cc: 	movq	%r13, %rdi
    000006cf: 	callq	"_ZN9benchmark9quicksortIP13TypeSub2ClassImEEEvT_S4_.part.0/1" # Offset: 1743
    000006d4: 	jmp	.Ltmp1369 # Offset: 1748
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIP13TypeSub2ClassImEEEvT_S4_.part.0/1(*2)"

Binary Function "_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_" after disassembly {
  Number      : 99
  State       : disassembled
  Address     : 0x9e80
  Size        : 0x145
  MaxSize     : 0x150
  Offset      : 0x9e80
  Section     : .text
  Orc Section : .local.text._ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB098:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	movq	%rdi, %r12
    0000000d: 	pushq	%rbp
    0000000e: 	movq	%rdx, %rbp
    00000011: 	pushq	%rbx
    00000012: 	leaq	0x10(%rdi), %rbx
    00000016: 	subq	$0x10, %rsp
    0000001a: 	movq	0x8(%rsi), %r13
    0000001e: 	movq	%fs:0x28, %rax
    00000027: 	movq	%rax, 0x8(%rsp)
    0000002c: 	xorl	%eax, %eax
    0000002e: 	movq	%rbx, (%rdi)
    00000031: 	movq	(%rsi), %r14
    00000034: 	movq	%r14, %rax
    00000037: 	addq	%r13, %rax
    0000003a: 	je	.Ltmp1460 # Offset: 58
    0000003c: 	testq	%r14, %r14
    0000003f: 	je	.Ltmp1461 # Offset: 63
.Ltmp1460:
    00000045: 	movq	%r13, (%rsp)
    00000049: 	cmpq	$0xf, %r13
    0000004d: 	ja	.Ltmp1462 # Offset: 77
    0000004f: 	cmpq	$0x1, %r13
    00000053: 	jne	.Ltmp1463 # Offset: 83
    00000055: 	movzbl	(%r14), %eax
    00000059: 	movb	%al, 0x10(%r12)
    0000005e: 	movq	%rbx, %rax
.Ltmp1467:
    00000061: 	movq	%r13, 0x8(%r12)
    00000066: 	movq	%rbp, %rdi
    00000069: 	movb	$0x0, (%rax,%r13)
    0000006e: 	callq	strlen@PLT # Offset: 110
    00000073: 	movq	%rax, %rdx
    00000076: 	movabsq	$0x3fffffffffffffff, %rax
    00000080: 	subq	0x8(%r12), %rax
    00000085: 	cmpq	%rax, %rdx
    00000088: 	ja	.Ltmp1464 # Offset: 136
    0000008a: 	movq	%rbp, %rsi
    0000008d: 	movq	%r12, %rdi
    00000090: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 144
    00000095: 	movq	0x8(%rsp), %rax
    0000009a: 	subq	%fs:0x28, %rax
    000000a3: 	jne	.Ltmp1465 # Offset: 163
    000000a5: 	addq	$0x10, %rsp
    000000a9: 	movq	%r12, %rax
    000000ac: 	popq	%rbx
    000000ad: 	popq	%rbp
    000000ae: 	popq	%r12
    000000b0: 	popq	%r13
    000000b2: 	popq	%r14
    000000b4: 	retq # Offset: 180
    000000b5: 	nopl	(%rax) # Size: 3
.Ltmp1463:
    000000b8: 	testq	%r13, %r13
    000000bb: 	jne	.Ltmp1466 # Offset: 187
    000000bd: 	movq	%rbx, %rax
    000000c0: 	jmp	.Ltmp1467 # Offset: 192
    000000c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1462:
    000000c8: 	movq	%r12, %rdi
    000000cb: 	movq	%rsp, %rsi
    000000ce: 	xorl	%edx, %edx
    000000d0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 208
    000000d5: 	movq	%rax, (%r12)
    000000d9: 	movq	%rax, %rdi
    000000dc: 	movq	(%rsp), %rax
    000000e0: 	movq	%rax, 0x10(%r12)
.Ltmp1468:
    000000e5: 	movq	%r13, %rdx
    000000e8: 	movq	%r14, %rsi
    000000eb: 	callq	memcpy@PLT # Offset: 235
    000000f0: 	movq	(%rsp), %r13
    000000f4: 	movq	(%r12), %rax
    000000f8: 	jmp	.Ltmp1467 # Offset: 248
.Ltmp1461:
    000000fd: 	leaq	DATAat0x1d008(%rip), %rdi
    00000104: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 260
.Ltmp1464:
    00000109: 	leaq	DATAat0x1d1ba(%rip), %rdi
    00000110: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 272
.Ltmp1465:
    00000115: 	callq	__stack_chk_fail@PLT # Offset: 277
.Ltmp1466:
    0000011a: 	movq	%rbx, %rdi
    0000011d: 	jmp	.Ltmp1468 # Offset: 285
    0000011f: 	endbr64
    00000123: 	movq	%rax, %rbp
    00000126: 	movq	(%r12), %rdi
    0000012a: 	cmpq	%rdi, %rbx
    0000012d: 	je	.Ltmp1469 # Offset: 301
    0000012f: 	movq	0x10(%r12), %rsi
    00000134: 	addq	$0x1, %rsi
    00000138: 	callq	_ZdlPvm@PLT # Offset: 312
.Ltmp1469:
    0000013d: 	movq	%rbp, %rdi
    00000140: 	callq	_Unwind_Resume@PLT # Offset: 320
DWARF CFI Instructions:
    <empty>
End of Function "_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E" after disassembly {
  Number      : 100
  State       : disassembled
  Address     : 0x9fd0
  Size        : 0x21d
  MaxSize     : 0x220
  Offset      : 0x9fd0
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB099:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x38, %rsp
    00000015: 	movq	0x30(%rdi), %rcx
    00000019: 	movq	0x48(%rdi), %rax
    0000001d: 	movq	0x38(%rdi), %r13
    00000021: 	movq	(%rsi), %rbp
    00000024: 	movq	%rdi, 0x20(%rsp)
    00000029: 	movq	%rcx, 0x10(%rsp)
    0000002e: 	movq	0x10(%rsi), %rcx
    00000032: 	movq	%rax, (%rsp)
    00000036: 	movq	%rcx, 0x18(%rsp)
    0000003b: 	movq	0x18(%rsi), %rcx
    0000003f: 	leaq	0x8(%rcx), %r12
    00000043: 	movq	%rcx, 0x28(%rsp)
    00000048: 	cmpq	%r12, %rax
    0000004b: 	jbe	.Ltmp1470 # Offset: 75
    0000004d: 	nopl	(%rax) # Size: 3
.Ltmp1473:
    00000050: 	movq	(%r12), %r14
    00000054: 	leaq	0x200(%r14), %rbx
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1472:
    00000060: 	movq	(%r14), %rdi
    00000063: 	leaq	0x10(%r14), %rdx
    00000067: 	cmpq	%rdx, %rdi
    0000006a: 	je	.Ltmp1471 # Offset: 106
    00000070: 	movq	0x10(%r14), %rax
    00000074: 	addq	$0x20, %r14
    00000078: 	leaq	0x1(%rax), %rsi
    0000007c: 	callq	_ZdlPvm@PLT # Offset: 124
    00000081: 	cmpq	%rbx, %r14
    00000084: 	jne	.Ltmp1472 # Offset: 132
    00000086: 	addq	$0x8, %r12
    0000008a: 	cmpq	%r12, (%rsp)
    0000008e: 	ja	.Ltmp1473 # Offset: 142
.Ltmp1470:
    00000090: 	movq	(%rsp), %rcx
    00000094: 	cmpq	%rcx, 0x28(%rsp)
    00000099: 	je	.Ltmp1474 # Offset: 153
    0000009f: 	cmpq	0x18(%rsp), %rbp
    000000a4: 	je	.Ltmp1475 # Offset: 164
    000000a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1477:
    000000b0: 	movq	(%rbp), %rdi
    000000b4: 	leaq	0x10(%rbp), %rax
    000000b8: 	cmpq	%rax, %rdi
    000000bb: 	je	.Ltmp1476 # Offset: 187
    000000c1: 	movq	0x10(%rbp), %rax
    000000c5: 	addq	$0x20, %rbp
    000000c9: 	leaq	0x1(%rax), %rsi
    000000cd: 	callq	_ZdlPvm@PLT # Offset: 205
    000000d2: 	cmpq	%rbp, 0x18(%rsp)
    000000d7: 	jne	.Ltmp1477 # Offset: 215
.Ltmp1475:
    000000d9: 	cmpq	%r13, 0x10(%rsp)
    000000de: 	je	.Ltmp1478 # Offset: 222
.Ltmp1480:
    000000e0: 	movq	(%r13), %rdi
    000000e4: 	leaq	0x10(%r13), %rax
    000000e8: 	cmpq	%rax, %rdi
    000000eb: 	je	.Ltmp1479 # Offset: 235
    000000f1: 	movq	0x10(%r13), %rax
    000000f5: 	addq	$0x20, %r13
    000000f9: 	leaq	0x1(%rax), %rsi
    000000fd: 	callq	_ZdlPvm@PLT # Offset: 253
    00000102: 	cmpq	%r13, 0x10(%rsp)
    00000107: 	jne	.Ltmp1480 # Offset: 263
.Ltmp1478:
    00000109: 	movq	0x20(%rsp), %rax
    0000010e: 	movq	0x48(%rax), %rax
    00000112: 	movq	%rax, (%rsp)
    00000116: 	leaq	0x8(%rax), %rbp
    0000011a: 	movq	0x18(%r15), %rax
    0000011e: 	leaq	0x8(%rax), %rbx
    00000122: 	cmpq	%rbx, %rbp
    00000125: 	jbe	.Ltmp1481 # Offset: 293
    00000127: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1482:
    00000130: 	movq	(%rbx), %rdi
    00000133: 	movl	$0x200, %esi
    00000138: 	addq	$0x8, %rbx
    0000013c: 	callq	_ZdlPvm@PLT # Offset: 316
    00000141: 	cmpq	%rbx, %rbp
    00000144: 	ja	.Ltmp1482 # Offset: 324
.Ltmp1481:
    00000146: 	movdqu	(%r15), %xmm0
    0000014b: 	movq	0x20(%rsp), %rax
    00000150: 	movups	%xmm0, 0x30(%rax)
    00000154: 	movdqu	0x10(%r15), %xmm1
    0000015a: 	movaps	%xmm1, (%rsp)
    0000015e: 	movups	%xmm1, 0x40(%rax)
    00000162: 	addq	$0x38, %rsp
    00000166: 	popq	%rbx
    00000167: 	popq	%rbp
    00000168: 	popq	%r12
    0000016a: 	popq	%r13
    0000016c: 	popq	%r14
    0000016e: 	popq	%r15
    00000170: 	retq # Offset: 368
    00000171: 	nopl	(%rax) # Size: 7
.Ltmp1471:
    00000178: 	addq	$0x20, %r14
    0000017c: 	cmpq	%r14, %rbx
    0000017f: 	jne	.Ltmp1472 # Offset: 383
    00000185: 	addq	$0x8, %r12
    00000189: 	cmpq	%r12, (%rsp)
    0000018d: 	ja	.Ltmp1473 # Offset: 397
    00000193: 	jmp	.Ltmp1470 # Offset: 403
    00000198: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1479:
    000001a0: 	addq	$0x20, %r13
    000001a4: 	cmpq	%r13, 0x10(%rsp)
    000001a9: 	jne	.Ltmp1480 # Offset: 425
    000001af: 	jmp	.Ltmp1478 # Offset: 431
    000001b4: 	nopl	(%rax) # Size: 4
.Ltmp1476:
    000001b8: 	addq	$0x20, %rbp
    000001bc: 	cmpq	%rbp, 0x18(%rsp)
    000001c1: 	jne	.Ltmp1477 # Offset: 449
    000001c7: 	jmp	.Ltmp1475 # Offset: 455
.Ltmp1474:
    000001cc: 	cmpq	0x10(%rsp), %rbp
    000001d1: 	je	.Ltmp1478 # Offset: 465
.Ltmp1485:
    000001d7: 	movq	(%rbp), %rdi
    000001db: 	leaq	0x10(%rbp), %rax
    000001df: 	cmpq	%rax, %rdi
    000001e2: 	je	.Ltmp1483 # Offset: 482
.Ltmp1484:
    000001e4: 	movq	0x10(%rbp), %rax
    000001e8: 	addq	$0x20, %rbp
    000001ec: 	leaq	0x1(%rax), %rsi
    000001f0: 	callq	_ZdlPvm@PLT # Offset: 496
    000001f5: 	cmpq	%rbp, 0x10(%rsp)
    000001fa: 	je	.Ltmp1478 # Offset: 506
    00000200: 	movq	(%rbp), %rdi
    00000204: 	leaq	0x10(%rbp), %rax
    00000208: 	cmpq	%rax, %rdi
    0000020b: 	jne	.Ltmp1484 # Offset: 523
.Ltmp1483:
    0000020d: 	addq	$0x20, %rbp
    00000211: 	cmpq	%rbp, 0x10(%rsp)
    00000216: 	jne	.Ltmp1485 # Offset: 534
    00000218: 	jmp	.Ltmp1478 # Offset: 536
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E"

Binary Function "_Z13verify_sortedIPdEvT_S1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 101
  State       : disassembled
  Address     : 0xa1f0
  Size        : 0x46
  MaxSize     : 0x50
  Offset      : 0xa1f0
  Section     : .text
  Orc Section : .local.text._Z13verify_sortedIPdEvT_S1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0100:
    00000000: 	endbr64
    00000004: 	addq	$0x8, %rdi
    00000008: 	jmp	.Ltmp1486 # Offset: 8
    0000000a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1488:
    00000010: 	addq	$0x8, %rdi
    00000014: 	movsd	-0x10(%rdi), %xmm0
    00000019: 	comisd	-0x8(%rdi), %xmm0
    0000001e: 	ja	.Ltmp1487 # Offset: 30
.Ltmp1486:
    00000020: 	cmpq	%rdi, %rsi
    00000023: 	jne	.Ltmp1488 # Offset: 35
    00000025: 	retq # Offset: 37
    00000026: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1487:
    00000030: 	movq	(%rdx), %rdx
    00000033: 	leaq	DATAat0x1d1cf(%rip), %rsi
    0000003a: 	movl	$0x1, %edi
    0000003f: 	xorl	%eax, %eax
    00000041: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 65
DWARF CFI Instructions:
    <empty>
End of Function "_Z13verify_sortedIPdEvT_S1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13verify_sortedIP9TypeClassIdEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 102
  State       : disassembled
  Address     : 0xa240
  Size        : 0x46
  MaxSize     : 0x50
  Offset      : 0xa240
  Section     : .text
  Orc Section : .local.text._Z13verify_sortedIP9TypeClassIdEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0101:
    00000000: 	endbr64
    00000004: 	addq	$0x8, %rdi
    00000008: 	jmp	.Ltmp1489 # Offset: 8
    0000000a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1491:
    00000010: 	addq	$0x8, %rdi
    00000014: 	movsd	-0x10(%rdi), %xmm0
    00000019: 	comisd	-0x8(%rdi), %xmm0
    0000001e: 	ja	.Ltmp1490 # Offset: 30
.Ltmp1489:
    00000020: 	cmpq	%rdi, %rsi
    00000023: 	jne	.Ltmp1491 # Offset: 35
    00000025: 	retq # Offset: 37
    00000026: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1490:
    00000030: 	movq	(%rdx), %rdx
    00000033: 	leaq	DATAat0x1d1cf(%rip), %rsi
    0000003a: 	movl	$0x1, %edi
    0000003f: 	xorl	%eax, %eax
    00000041: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 65
DWARF CFI Instructions:
    <empty>
End of Function "_Z13verify_sortedIP9TypeClassIdEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13verify_sortedIP12TypeSubClassIdEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 103
  State       : disassembled
  Address     : 0xa290
  Size        : 0x46
  MaxSize     : 0x50
  Offset      : 0xa290
  Section     : .text
  Orc Section : .local.text._Z13verify_sortedIP12TypeSubClassIdEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0102:
    00000000: 	endbr64
    00000004: 	addq	$0x8, %rdi
    00000008: 	jmp	.Ltmp1492 # Offset: 8
    0000000a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1494:
    00000010: 	addq	$0x8, %rdi
    00000014: 	movsd	-0x10(%rdi), %xmm0
    00000019: 	comisd	-0x8(%rdi), %xmm0
    0000001e: 	ja	.Ltmp1493 # Offset: 30
.Ltmp1492:
    00000020: 	cmpq	%rdi, %rsi
    00000023: 	jne	.Ltmp1494 # Offset: 35
    00000025: 	retq # Offset: 37
    00000026: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1493:
    00000030: 	movq	(%rdx), %rdx
    00000033: 	leaq	DATAat0x1d1cf(%rip), %rsi
    0000003a: 	movl	$0x1, %edi
    0000003f: 	xorl	%eax, %eax
    00000041: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 65
DWARF CFI Instructions:
    <empty>
End of Function "_Z13verify_sortedIP12TypeSubClassIdEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13verify_sortedIP13TypeSub2ClassIdEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 104
  State       : disassembled
  Address     : 0xa2e0
  Size        : 0x46
  MaxSize     : 0x50
  Offset      : 0xa2e0
  Section     : .text
  Orc Section : .local.text._Z13verify_sortedIP13TypeSub2ClassIdEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0103:
    00000000: 	endbr64
    00000004: 	addq	$0x8, %rdi
    00000008: 	jmp	.Ltmp1495 # Offset: 8
    0000000a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1497:
    00000010: 	addq	$0x8, %rdi
    00000014: 	movsd	-0x10(%rdi), %xmm0
    00000019: 	comisd	-0x8(%rdi), %xmm0
    0000001e: 	ja	.Ltmp1496 # Offset: 30
.Ltmp1495:
    00000020: 	cmpq	%rdi, %rsi
    00000023: 	jne	.Ltmp1497 # Offset: 35
    00000025: 	retq # Offset: 37
    00000026: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1496:
    00000030: 	movq	(%rdx), %rdx
    00000033: 	leaq	DATAat0x1d1cf(%rip), %rsi
    0000003a: 	movl	$0x1, %edi
    0000003f: 	xorl	%eax, %eax
    00000041: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 65
DWARF CFI Instructions:
    <empty>
End of Function "_Z13verify_sortedIP13TypeSub2ClassIdEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13verify_sortedIP12DeepSubClassIdEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 105
  State       : disassembled
  Address     : 0xa330
  Size        : 0x46
  MaxSize     : 0x50
  Offset      : 0xa330
  Section     : .text
  Orc Section : .local.text._Z13verify_sortedIP12DeepSubClassIdEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0104:
    00000000: 	endbr64
    00000004: 	addq	$0x8, %rdi
    00000008: 	jmp	.Ltmp1498 # Offset: 8
    0000000a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1500:
    00000010: 	addq	$0x8, %rdi
    00000014: 	movsd	-0x10(%rdi), %xmm0
    00000019: 	comisd	-0x8(%rdi), %xmm0
    0000001e: 	ja	.Ltmp1499 # Offset: 30
.Ltmp1498:
    00000020: 	cmpq	%rdi, %rsi
    00000023: 	jne	.Ltmp1500 # Offset: 35
    00000025: 	retq # Offset: 37
    00000026: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1499:
    00000030: 	movq	(%rdx), %rdx
    00000033: 	leaq	DATAat0x1d1cf(%rip), %rsi
    0000003a: 	movl	$0x1, %edi
    0000003f: 	xorl	%eax, %eax
    00000041: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 65
DWARF CFI Instructions:
    <empty>
End of Function "_Z13verify_sortedIP12DeepSubClassIdEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13verify_sortedIP16TypeVirtualClassIdEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 106
  State       : disassembled
  Address     : 0xa380
  Size        : 0xbd
  MaxSize     : 0xc0
  Offset      : 0xa380
  Section     : .text
  Orc Section : .local.text._Z13verify_sortedIP16TypeVirtualClassIdEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0105:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	addq	$0x10, %rdi
    0000000a: 	pushq	%r13
    0000000c: 	movq	%rsi, %r13
    0000000f: 	pushq	%r12
    00000011: 	leaq	_ZN16TypeVirtualClassIdEcvdEv(%rip), %r12
    00000018: 	pushq	%rbp
    00000019: 	movq	%rdx, %rbp
    0000001c: 	pushq	%rbx
    0000001d: 	subq	$0x10, %rsp
    00000021: 	jmp	.Ltmp1501 # Offset: 33
    00000023: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1505:
    00000028: 	movq	-0x20(%rbx), %rax
    0000002c: 	movsd	-0x8(%rbx), %xmm1
    00000031: 	movq	(%rax), %rax
    00000034: 	cmpq	%r12, %rax
    00000037: 	jne	.Ltmp1502 # Offset: 55
.Ltmp1506:
    00000039: 	movsd	-0x18(%rbx), %xmm0
    0000003e: 	comisd	%xmm1, %xmm0
    00000042: 	ja	.Ltmp1503 # Offset: 66
.Ltmp1507:
    00000044: 	movq	%rbx, %rdi
.Ltmp1501:
    00000047: 	leaq	-0x10(%rdi), %r14
    0000004b: 	cmpq	%rdi, %r13
    0000004e: 	je	.Ltmp1504 # Offset: 78
    00000050: 	movq	(%rdi), %rax
    00000053: 	leaq	0x10(%rdi), %rbx
    00000057: 	movq	(%rax), %rax
    0000005a: 	cmpq	%r12, %rax
    0000005d: 	je	.Ltmp1505 # Offset: 93
    0000005f: 	callq	*%rax # Offset: 95
    00000061: 	movq	-0x20(%rbx), %rax
    00000065: 	movapd	%xmm0, %xmm1
    00000069: 	movq	(%rax), %rax
    0000006c: 	cmpq	%r12, %rax
    0000006f: 	je	.Ltmp1506 # Offset: 111
.Ltmp1502:
    00000071: 	movsd	%xmm1, 0x8(%rsp)
    00000077: 	movq	%r14, %rdi
    0000007a: 	callq	*%rax # Offset: 122
    0000007c: 	movsd	0x8(%rsp), %xmm1
    00000082: 	comisd	%xmm1, %xmm0
    00000086: 	jbe	.Ltmp1507 # Offset: 134
.Ltmp1503:
    00000088: 	movq	(%rbp), %rdx
    0000008c: 	addq	$0x10, %rsp
    00000090: 	leaq	DATAat0x1d1cf(%rip), %rsi
    00000097: 	xorl	%eax, %eax
    00000099: 	popq	%rbx
    0000009a: 	movl	$0x1, %edi
    0000009f: 	popq	%rbp
    000000a0: 	popq	%r12
    000000a2: 	popq	%r13
    000000a4: 	popq	%r14
    000000a6: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 166
    000000ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1504:
    000000b0: 	addq	$0x10, %rsp
    000000b4: 	popq	%rbx
    000000b5: 	popq	%rbp
    000000b6: 	popq	%r12
    000000b8: 	popq	%r13
    000000ba: 	popq	%r14
    000000bc: 	retq # Offset: 188
DWARF CFI Instructions:
    <empty>
End of Function "_Z13verify_sortedIP16TypeVirtualClassIdEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13verify_sortedIP19TypeVirtualSubClassIdEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 107
  State       : disassembled
  Address     : 0xa440
  Size        : 0xbd
  MaxSize     : 0xc0
  Offset      : 0xa440
  Section     : .text
  Orc Section : .local.text._Z13verify_sortedIP19TypeVirtualSubClassIdEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0106:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	addq	$0x10, %rdi
    0000000a: 	pushq	%r13
    0000000c: 	movq	%rsi, %r13
    0000000f: 	pushq	%r12
    00000011: 	leaq	_ZN19TypeVirtualSubClassIdEcvdEv(%rip), %r12
    00000018: 	pushq	%rbp
    00000019: 	movq	%rdx, %rbp
    0000001c: 	pushq	%rbx
    0000001d: 	subq	$0x10, %rsp
    00000021: 	jmp	.Ltmp1508 # Offset: 33
    00000023: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1512:
    00000028: 	movq	-0x20(%rbx), %rax
    0000002c: 	movsd	-0x8(%rbx), %xmm1
    00000031: 	movq	(%rax), %rax
    00000034: 	cmpq	%r12, %rax
    00000037: 	jne	.Ltmp1509 # Offset: 55
.Ltmp1513:
    00000039: 	movsd	-0x18(%rbx), %xmm0
    0000003e: 	comisd	%xmm1, %xmm0
    00000042: 	ja	.Ltmp1510 # Offset: 66
.Ltmp1514:
    00000044: 	movq	%rbx, %rdi
.Ltmp1508:
    00000047: 	leaq	-0x10(%rdi), %r14
    0000004b: 	cmpq	%rdi, %r13
    0000004e: 	je	.Ltmp1511 # Offset: 78
    00000050: 	movq	(%rdi), %rax
    00000053: 	leaq	0x10(%rdi), %rbx
    00000057: 	movq	(%rax), %rax
    0000005a: 	cmpq	%r12, %rax
    0000005d: 	je	.Ltmp1512 # Offset: 93
    0000005f: 	callq	*%rax # Offset: 95
    00000061: 	movq	-0x20(%rbx), %rax
    00000065: 	movapd	%xmm0, %xmm1
    00000069: 	movq	(%rax), %rax
    0000006c: 	cmpq	%r12, %rax
    0000006f: 	je	.Ltmp1513 # Offset: 111
.Ltmp1509:
    00000071: 	movsd	%xmm1, 0x8(%rsp)
    00000077: 	movq	%r14, %rdi
    0000007a: 	callq	*%rax # Offset: 122
    0000007c: 	movsd	0x8(%rsp), %xmm1
    00000082: 	comisd	%xmm1, %xmm0
    00000086: 	jbe	.Ltmp1514 # Offset: 134
.Ltmp1510:
    00000088: 	movq	(%rbp), %rdx
    0000008c: 	addq	$0x10, %rsp
    00000090: 	leaq	DATAat0x1d1cf(%rip), %rsi
    00000097: 	xorl	%eax, %eax
    00000099: 	popq	%rbx
    0000009a: 	movl	$0x1, %edi
    0000009f: 	popq	%rbp
    000000a0: 	popq	%r12
    000000a2: 	popq	%r13
    000000a4: 	popq	%r14
    000000a6: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 166
    000000ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1511:
    000000b0: 	addq	$0x10, %rsp
    000000b4: 	popq	%rbx
    000000b5: 	popq	%rbp
    000000b6: 	popq	%r12
    000000b8: 	popq	%r13
    000000ba: 	popq	%r14
    000000bc: 	retq # Offset: 188
DWARF CFI Instructions:
    <empty>
End of Function "_Z13verify_sortedIP19TypeVirtualSubClassIdEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13verify_sortedIP18WorkerDeepSubClassIdEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 108
  State       : disassembled
  Address     : 0xa500
  Size        : 0xbd
  MaxSize     : 0xc0
  Offset      : 0xa500
  Section     : .text
  Orc Section : .local.text._Z13verify_sortedIP18WorkerDeepSubClassIdEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0107:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	addq	$0x10, %rdi
    0000000a: 	pushq	%r13
    0000000c: 	movq	%rsi, %r13
    0000000f: 	pushq	%r12
    00000011: 	leaq	_ZN18WorkerDeepSubClassIdEcvdEv(%rip), %r12
    00000018: 	pushq	%rbp
    00000019: 	movq	%rdx, %rbp
    0000001c: 	pushq	%rbx
    0000001d: 	subq	$0x10, %rsp
    00000021: 	jmp	.Ltmp1515 # Offset: 33
    00000023: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1519:
    00000028: 	movq	-0x20(%rbx), %rax
    0000002c: 	movsd	-0x8(%rbx), %xmm1
    00000031: 	movq	(%rax), %rax
    00000034: 	cmpq	%r12, %rax
    00000037: 	jne	.Ltmp1516 # Offset: 55
.Ltmp1520:
    00000039: 	movsd	-0x18(%rbx), %xmm0
    0000003e: 	comisd	%xmm1, %xmm0
    00000042: 	ja	.Ltmp1517 # Offset: 66
.Ltmp1521:
    00000044: 	movq	%rbx, %rdi
.Ltmp1515:
    00000047: 	leaq	-0x10(%rdi), %r14
    0000004b: 	cmpq	%rdi, %r13
    0000004e: 	je	.Ltmp1518 # Offset: 78
    00000050: 	movq	(%rdi), %rax
    00000053: 	leaq	0x10(%rdi), %rbx
    00000057: 	movq	(%rax), %rax
    0000005a: 	cmpq	%r12, %rax
    0000005d: 	je	.Ltmp1519 # Offset: 93
    0000005f: 	callq	*%rax # Offset: 95
    00000061: 	movq	-0x20(%rbx), %rax
    00000065: 	movapd	%xmm0, %xmm1
    00000069: 	movq	(%rax), %rax
    0000006c: 	cmpq	%r12, %rax
    0000006f: 	je	.Ltmp1520 # Offset: 111
.Ltmp1516:
    00000071: 	movsd	%xmm1, 0x8(%rsp)
    00000077: 	movq	%r14, %rdi
    0000007a: 	callq	*%rax # Offset: 122
    0000007c: 	movsd	0x8(%rsp), %xmm1
    00000082: 	comisd	%xmm1, %xmm0
    00000086: 	jbe	.Ltmp1521 # Offset: 134
.Ltmp1517:
    00000088: 	movq	(%rbp), %rdx
    0000008c: 	addq	$0x10, %rsp
    00000090: 	leaq	DATAat0x1d1cf(%rip), %rsi
    00000097: 	xorl	%eax, %eax
    00000099: 	popq	%rbx
    0000009a: 	movl	$0x1, %edi
    0000009f: 	popq	%rbp
    000000a0: 	popq	%r12
    000000a2: 	popq	%r13
    000000a4: 	popq	%r14
    000000a6: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 166
    000000ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1518:
    000000b0: 	addq	$0x10, %rsp
    000000b4: 	popq	%rbx
    000000b5: 	popq	%rbp
    000000b6: 	popq	%r12
    000000b8: 	popq	%r13
    000000ba: 	popq	%r14
    000000bc: 	retq # Offset: 188
DWARF CFI Instructions:
    <empty>
End of Function "_Z13verify_sortedIP18WorkerDeepSubClassIdEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13verify_sortedIP15WorkerSubClass2IdEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 109
  State       : disassembled
  Address     : 0xa5c0
  Size        : 0xbd
  MaxSize     : 0xc0
  Offset      : 0xa5c0
  Section     : .text
  Orc Section : .local.text._Z13verify_sortedIP15WorkerSubClass2IdEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0108:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	addq	$0x10, %rdi
    0000000a: 	pushq	%r13
    0000000c: 	movq	%rsi, %r13
    0000000f: 	pushq	%r12
    00000011: 	leaq	_ZN15WorkerSubClass2IdEcvdEv(%rip), %r12
    00000018: 	pushq	%rbp
    00000019: 	movq	%rdx, %rbp
    0000001c: 	pushq	%rbx
    0000001d: 	subq	$0x10, %rsp
    00000021: 	jmp	.Ltmp1522 # Offset: 33
    00000023: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1526:
    00000028: 	movq	-0x20(%rbx), %rax
    0000002c: 	movsd	-0x8(%rbx), %xmm1
    00000031: 	movq	(%rax), %rax
    00000034: 	cmpq	%r12, %rax
    00000037: 	jne	.Ltmp1523 # Offset: 55
.Ltmp1527:
    00000039: 	movsd	-0x18(%rbx), %xmm0
    0000003e: 	comisd	%xmm1, %xmm0
    00000042: 	ja	.Ltmp1524 # Offset: 66
.Ltmp1528:
    00000044: 	movq	%rbx, %rdi
.Ltmp1522:
    00000047: 	leaq	-0x10(%rdi), %r14
    0000004b: 	cmpq	%rdi, %r13
    0000004e: 	je	.Ltmp1525 # Offset: 78
    00000050: 	movq	(%rdi), %rax
    00000053: 	leaq	0x10(%rdi), %rbx
    00000057: 	movq	(%rax), %rax
    0000005a: 	cmpq	%r12, %rax
    0000005d: 	je	.Ltmp1526 # Offset: 93
    0000005f: 	callq	*%rax # Offset: 95
    00000061: 	movq	-0x20(%rbx), %rax
    00000065: 	movapd	%xmm0, %xmm1
    00000069: 	movq	(%rax), %rax
    0000006c: 	cmpq	%r12, %rax
    0000006f: 	je	.Ltmp1527 # Offset: 111
.Ltmp1523:
    00000071: 	movsd	%xmm1, 0x8(%rsp)
    00000077: 	movq	%r14, %rdi
    0000007a: 	callq	*%rax # Offset: 122
    0000007c: 	movsd	0x8(%rsp), %xmm1
    00000082: 	comisd	%xmm1, %xmm0
    00000086: 	jbe	.Ltmp1528 # Offset: 134
.Ltmp1524:
    00000088: 	movq	(%rbp), %rdx
    0000008c: 	addq	$0x10, %rsp
    00000090: 	leaq	DATAat0x1d1cf(%rip), %rsi
    00000097: 	xorl	%eax, %eax
    00000099: 	popq	%rbx
    0000009a: 	movl	$0x1, %edi
    0000009f: 	popq	%rbp
    000000a0: 	popq	%r12
    000000a2: 	popq	%r13
    000000a4: 	popq	%r14
    000000a6: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 166
    000000ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1525:
    000000b0: 	addq	$0x10, %rsp
    000000b4: 	popq	%rbx
    000000b5: 	popq	%rbp
    000000b6: 	popq	%r12
    000000b8: 	popq	%r13
    000000ba: 	popq	%r14
    000000bc: 	retq # Offset: 188
DWARF CFI Instructions:
    <empty>
End of Function "_Z13verify_sortedIP15WorkerSubClass2IdEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13verify_sortedIP15WorkerSubClass3IdEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 110
  State       : disassembled
  Address     : 0xa680
  Size        : 0xbd
  MaxSize     : 0xc0
  Offset      : 0xa680
  Section     : .text
  Orc Section : .local.text._Z13verify_sortedIP15WorkerSubClass3IdEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0109:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	addq	$0x10, %rdi
    0000000a: 	pushq	%r13
    0000000c: 	movq	%rsi, %r13
    0000000f: 	pushq	%r12
    00000011: 	leaq	_ZN15WorkerSubClass3IdEcvdEv(%rip), %r12
    00000018: 	pushq	%rbp
    00000019: 	movq	%rdx, %rbp
    0000001c: 	pushq	%rbx
    0000001d: 	subq	$0x10, %rsp
    00000021: 	jmp	.Ltmp1529 # Offset: 33
    00000023: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1533:
    00000028: 	movq	-0x20(%rbx), %rax
    0000002c: 	movsd	-0x8(%rbx), %xmm1
    00000031: 	movq	(%rax), %rax
    00000034: 	cmpq	%r12, %rax
    00000037: 	jne	.Ltmp1530 # Offset: 55
.Ltmp1534:
    00000039: 	movsd	-0x18(%rbx), %xmm0
    0000003e: 	comisd	%xmm1, %xmm0
    00000042: 	ja	.Ltmp1531 # Offset: 66
.Ltmp1535:
    00000044: 	movq	%rbx, %rdi
.Ltmp1529:
    00000047: 	leaq	-0x10(%rdi), %r14
    0000004b: 	cmpq	%rdi, %r13
    0000004e: 	je	.Ltmp1532 # Offset: 78
    00000050: 	movq	(%rdi), %rax
    00000053: 	leaq	0x10(%rdi), %rbx
    00000057: 	movq	(%rax), %rax
    0000005a: 	cmpq	%r12, %rax
    0000005d: 	je	.Ltmp1533 # Offset: 93
    0000005f: 	callq	*%rax # Offset: 95
    00000061: 	movq	-0x20(%rbx), %rax
    00000065: 	movapd	%xmm0, %xmm1
    00000069: 	movq	(%rax), %rax
    0000006c: 	cmpq	%r12, %rax
    0000006f: 	je	.Ltmp1534 # Offset: 111
.Ltmp1530:
    00000071: 	movsd	%xmm1, 0x8(%rsp)
    00000077: 	movq	%r14, %rdi
    0000007a: 	callq	*%rax # Offset: 122
    0000007c: 	movsd	0x8(%rsp), %xmm1
    00000082: 	comisd	%xmm1, %xmm0
    00000086: 	jbe	.Ltmp1535 # Offset: 134
.Ltmp1531:
    00000088: 	movq	(%rbp), %rdx
    0000008c: 	addq	$0x10, %rsp
    00000090: 	leaq	DATAat0x1d1cf(%rip), %rsi
    00000097: 	xorl	%eax, %eax
    00000099: 	popq	%rbx
    0000009a: 	movl	$0x1, %edi
    0000009f: 	popq	%rbp
    000000a0: 	popq	%r12
    000000a2: 	popq	%r13
    000000a4: 	popq	%r14
    000000a6: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 166
    000000ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1532:
    000000b0: 	addq	$0x10, %rsp
    000000b4: 	popq	%rbx
    000000b5: 	popq	%rbp
    000000b6: 	popq	%r12
    000000b8: 	popq	%r13
    000000ba: 	popq	%r14
    000000bc: 	retq # Offset: 188
DWARF CFI Instructions:
    <empty>
End of Function "_Z13verify_sortedIP15WorkerSubClass3IdEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_ZN9benchmark9quicksortIPdEEvT_S2_" after disassembly {
  Number      : 111
  State       : disassembled
  Address     : 0xa740
  Size        : 0x4a0
  MaxSize     : 0x4a0
  Offset      : 0xa740
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIPdEEvT_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0110:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rax
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rax
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x28, %rsp
    00000018: 	movq	%rsi, 0x18(%rsp)
    0000001d: 	cmpq	$0x8, %rax
    00000021: 	jle	.Ltmp1536 # Offset: 33
.Ltmp1548:
    00000023: 	movsd	(%rdi), %xmm2
    00000027: 	movq	0x18(%rsp), %r13
    0000002c: 	movq	%rdi, %rax
.Ltmp1541:
    0000002f: 	movsd	-0x8(%r13), %xmm0
    00000035: 	leaq	-0x8(%r13), %rdx
    00000039: 	comisd	%xmm2, %xmm0
    0000003d: 	ja	.Ltmp1537 # Offset: 61
    0000003f: 	cmpq	%rdx, %rax
    00000042: 	jae	.Ltmp1538 # Offset: 66
    00000044: 	movsd	(%rax), %xmm1
    00000048: 	comisd	%xmm1, %xmm2
    0000004c: 	jbe	.Ltmp1539 # Offset: 76
.Ltmp1540:
    0000004e: 	movsd	0x8(%rax), %xmm1
    00000053: 	addq	$0x8, %rax
    00000057: 	comisd	%xmm1, %xmm2
    0000005b: 	ja	.Ltmp1540 # Offset: 91
    0000005d: 	cmpq	%rax, %rdx
    00000060: 	jbe	.Ltmp1538 # Offset: 96
.Ltmp1539:
    00000062: 	movsd	%xmm1, (%rdx)
    00000066: 	movsd	%xmm0, (%rax)
.Ltmp1537:
    0000006a: 	movq	%rdx, %r13
    0000006d: 	jmp	.Ltmp1541 # Offset: 109
.Ltmp1536:
    0000006f: 	addq	$0x28, %rsp
    00000073: 	popq	%rbx
    00000074: 	popq	%rbp
    00000075: 	popq	%r12
    00000077: 	popq	%r13
    00000079: 	popq	%r14
    0000007b: 	popq	%r15
    0000007d: 	retq # Offset: 125
.Ltmp1538:
    0000007e: 	movq	%r13, %rax
    00000081: 	subq	%rdi, %rax
    00000084: 	cmpq	$0x8, %rax
    00000088: 	jle	.Ltmp1542 # Offset: 136
.Ltmp1598:
    0000008a: 	movsd	(%rdi), %xmm2
    0000008e: 	movq	%r13, %r14
    00000091: 	movq	%rdi, %rax
.Ltmp1547:
    00000094: 	comisd	%xmm2, %xmm0
    00000098: 	leaq	-0x8(%r14), %rdx
    0000009c: 	ja	.Ltmp1543 # Offset: 156
    0000009e: 	cmpq	%rax, %rdx
    000000a1: 	jbe	.Ltmp1544 # Offset: 161
    000000a3: 	movsd	(%rax), %xmm1
    000000a7: 	comisd	%xmm1, %xmm2
    000000ab: 	jbe	.Ltmp1545 # Offset: 171
.Ltmp1546:
    000000ad: 	movsd	0x8(%rax), %xmm1
    000000b2: 	addq	$0x8, %rax
    000000b6: 	comisd	%xmm1, %xmm2
    000000ba: 	ja	.Ltmp1546 # Offset: 186
    000000bc: 	cmpq	%rax, %rdx
    000000bf: 	jbe	.Ltmp1544 # Offset: 191
.Ltmp1545:
    000000c1: 	movsd	%xmm1, (%rdx)
    000000c5: 	movsd	%xmm0, (%rax)
.Ltmp1543:
    000000c9: 	movsd	-0x8(%rdx), %xmm0
    000000ce: 	movq	%rdx, %r14
    000000d1: 	jmp	.Ltmp1547 # Offset: 209
.Ltmp1542:
    000000d3: 	movq	0x18(%rsp), %rax
    000000d8: 	subq	%r13, %rax
    000000db: 	cmpq	$0x8, %rax
    000000df: 	jle	.Ltmp1536 # Offset: 223
    000000e1: 	movq	%r13, %rdi
    000000e4: 	jmp	.Ltmp1548 # Offset: 228
.Ltmp1544:
    000000e9: 	movq	%r14, %rax
    000000ec: 	subq	%rdi, %rax
    000000ef: 	cmpq	$0x8, %rax
    000000f3: 	jle	.Ltmp1549 # Offset: 243
.Ltmp1597:
    000000f9: 	movsd	(%rdi), %xmm2
    000000fd: 	movq	%r14, %r15
    00000100: 	movq	%rdi, %rax
.Ltmp1554:
    00000103: 	comisd	%xmm2, %xmm0
    00000107: 	leaq	-0x8(%r15), %rdx
    0000010b: 	ja	.Ltmp1550 # Offset: 267
    0000010d: 	cmpq	%rax, %rdx
    00000110: 	jbe	.Ltmp1551 # Offset: 272
    00000112: 	movsd	(%rax), %xmm1
    00000116: 	comisd	%xmm1, %xmm2
    0000011a: 	jbe	.Ltmp1552 # Offset: 282
.Ltmp1553:
    0000011c: 	movsd	0x8(%rax), %xmm1
    00000121: 	addq	$0x8, %rax
    00000125: 	comisd	%xmm1, %xmm2
    00000129: 	ja	.Ltmp1553 # Offset: 297
    0000012b: 	cmpq	%rax, %rdx
    0000012e: 	jbe	.Ltmp1551 # Offset: 302
.Ltmp1552:
    00000130: 	movsd	%xmm1, (%rdx)
    00000134: 	movsd	%xmm0, (%rax)
.Ltmp1550:
    00000138: 	movsd	-0x8(%rdx), %xmm0
    0000013d: 	movq	%rdx, %r15
    00000140: 	jmp	.Ltmp1554 # Offset: 320
.Ltmp1551:
    00000142: 	movq	%r15, %rax
    00000145: 	subq	%rdi, %rax
    00000148: 	cmpq	$0x8, %rax
    0000014c: 	jle	.Ltmp1555 # Offset: 332
.Ltmp1596:
    00000152: 	movsd	(%rdi), %xmm2
    00000156: 	movq	%r15, %rbx
    00000159: 	movq	%rdi, %rax
.Ltmp1560:
    0000015c: 	comisd	%xmm2, %xmm0
    00000160: 	leaq	-0x8(%rbx), %rcx
    00000164: 	ja	.Ltmp1556 # Offset: 356
    00000166: 	cmpq	%rax, %rcx
    00000169: 	jbe	.Ltmp1557 # Offset: 361
    0000016b: 	movsd	(%rax), %xmm1
    0000016f: 	comisd	%xmm1, %xmm2
    00000173: 	jbe	.Ltmp1558 # Offset: 371
.Ltmp1559:
    00000175: 	movsd	0x8(%rax), %xmm1
    0000017a: 	addq	$0x8, %rax
    0000017e: 	comisd	%xmm1, %xmm2
    00000182: 	ja	.Ltmp1559 # Offset: 386
    00000184: 	cmpq	%rax, %rcx
    00000187: 	jbe	.Ltmp1557 # Offset: 391
.Ltmp1558:
    00000189: 	movsd	%xmm1, (%rcx)
    0000018d: 	movsd	%xmm0, (%rax)
.Ltmp1556:
    00000191: 	movsd	-0x8(%rcx), %xmm0
    00000196: 	movq	%rcx, %rbx
    00000199: 	jmp	.Ltmp1560 # Offset: 409
.Ltmp1557:
    0000019b: 	movq	%rbx, %rax
    0000019e: 	subq	%rdi, %rax
    000001a1: 	cmpq	$0x8, %rax
    000001a5: 	jle	.Ltmp1561 # Offset: 421
.Ltmp1595:
    000001ab: 	movsd	(%rdi), %xmm2
    000001af: 	movq	%rbx, %rcx
    000001b2: 	movq	%rdi, %rax
.Ltmp1566:
    000001b5: 	comisd	%xmm2, %xmm0
    000001b9: 	leaq	-0x8(%rcx), %rsi
    000001bd: 	ja	.Ltmp1562 # Offset: 445
    000001bf: 	cmpq	%rax, %rsi
    000001c2: 	jbe	.Ltmp1563 # Offset: 450
    000001c4: 	movsd	(%rax), %xmm1
    000001c8: 	comisd	%xmm1, %xmm2
    000001cc: 	jbe	.Ltmp1564 # Offset: 460
.Ltmp1565:
    000001ce: 	movsd	0x8(%rax), %xmm1
    000001d3: 	addq	$0x8, %rax
    000001d7: 	comisd	%xmm1, %xmm2
    000001db: 	ja	.Ltmp1565 # Offset: 475
    000001dd: 	cmpq	%rax, %rsi
    000001e0: 	jbe	.Ltmp1563 # Offset: 480
.Ltmp1564:
    000001e2: 	movsd	%xmm1, (%rsi)
    000001e6: 	movsd	%xmm0, (%rax)
.Ltmp1562:
    000001ea: 	movsd	-0x8(%rsi), %xmm0
    000001ef: 	movq	%rsi, %rcx
    000001f2: 	jmp	.Ltmp1566 # Offset: 498
.Ltmp1563:
    000001f4: 	movq	%rcx, %rax
    000001f7: 	subq	%rdi, %rax
    000001fa: 	cmpq	$0x8, %rax
    000001fe: 	jle	.Ltmp1567 # Offset: 510
.Ltmp1594:
    00000204: 	movsd	(%rdi), %xmm2
    00000208: 	movq	%rcx, %r12
    0000020b: 	movq	%rdi, %rax
.Ltmp1572:
    0000020e: 	comisd	%xmm2, %xmm0
    00000212: 	leaq	-0x8(%r12), %rsi
    00000217: 	ja	.Ltmp1568 # Offset: 535
    00000219: 	cmpq	%rax, %rsi
    0000021c: 	jbe	.Ltmp1569 # Offset: 540
    0000021e: 	movsd	(%rax), %xmm1
    00000222: 	comisd	%xmm1, %xmm2
    00000226: 	jbe	.Ltmp1570 # Offset: 550
    00000228: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1571:
    00000230: 	movsd	0x8(%rax), %xmm1
    00000235: 	addq	$0x8, %rax
    00000239: 	comisd	%xmm1, %xmm2
    0000023d: 	ja	.Ltmp1571 # Offset: 573
    0000023f: 	cmpq	%rax, %rsi
    00000242: 	jbe	.Ltmp1569 # Offset: 578
.Ltmp1570:
    00000244: 	movsd	%xmm1, (%rsi)
    00000248: 	movsd	%xmm0, (%rax)
.Ltmp1568:
    0000024c: 	movsd	-0x8(%rsi), %xmm0
    00000251: 	movq	%rsi, %r12
    00000254: 	jmp	.Ltmp1572 # Offset: 596
.Ltmp1569:
    00000256: 	movq	%r12, %rax
    00000259: 	subq	%rdi, %rax
    0000025c: 	cmpq	$0x8, %rax
    00000260: 	jle	.Ltmp1573 # Offset: 608
.Ltmp1593:
    00000266: 	movsd	(%rdi), %xmm2
    0000026a: 	movq	%r12, %r8
    0000026d: 	movq	%rdi, %rax
.Ltmp1591:
    00000270: 	comisd	%xmm2, %xmm0
    00000274: 	leaq	-0x8(%r8), %rsi
    00000278: 	ja	.Ltmp1574 # Offset: 632
    0000027e: 	cmpq	%rax, %rsi
    00000281: 	jbe	.Ltmp1575 # Offset: 641
    00000283: 	movsd	(%rax), %xmm1
    00000287: 	comisd	%xmm1, %xmm2
    0000028b: 	jbe	.Ltmp1576 # Offset: 651
    00000291: 	nopl	(%rax) # Size: 7
.Ltmp1577:
    00000298: 	movsd	0x8(%rax), %xmm1
    0000029d: 	addq	$0x8, %rax
    000002a1: 	comisd	%xmm1, %xmm2
    000002a5: 	ja	.Ltmp1577 # Offset: 677
    000002a7: 	cmpq	%rax, %rsi
    000002aa: 	ja	.Ltmp1576 # Offset: 682
.Ltmp1575:
    000002b0: 	movq	%r8, %rax
    000002b3: 	subq	%rdi, %rax
    000002b6: 	cmpq	$0x8, %rax
    000002ba: 	jle	.Ltmp1578 # Offset: 698
.Ltmp1590:
    000002c0: 	movsd	(%rdi), %xmm1
    000002c4: 	movq	%r8, %rbp
    000002c7: 	movq	%rdi, %rax
    000002ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1589:
    000002d0: 	comisd	%xmm1, %xmm0
    000002d4: 	leaq	-0x8(%rbp), %rsi
    000002d8: 	ja	.Ltmp1579 # Offset: 728
    000002de: 	cmpq	%rax, %rsi
    000002e1: 	jbe	.Ltmp1580 # Offset: 737
    000002e3: 	movsd	(%rax), %xmm2
    000002e7: 	comisd	%xmm2, %xmm1
    000002eb: 	jbe	.Ltmp1581 # Offset: 747
    000002f1: 	nopl	(%rax) # Size: 7
.Ltmp1582:
    000002f8: 	movsd	0x8(%rax), %xmm2
    000002fd: 	addq	$0x8, %rax
    00000301: 	comisd	%xmm2, %xmm1
    00000305: 	ja	.Ltmp1582 # Offset: 773
    00000307: 	cmpq	%rax, %rsi
    0000030a: 	ja	.Ltmp1581 # Offset: 778
.Ltmp1580:
    00000310: 	movq	%rbp, %rax
    00000313: 	subq	%rdi, %rax
    00000316: 	cmpq	$0x8, %rax
    0000031a: 	jle	.Ltmp1583 # Offset: 794
.Ltmp1588:
    00000320: 	movsd	(%rdi), %xmm1
    00000324: 	movq	%rbp, %rsi
    00000327: 	movq	%rdi, %rax
    0000032a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1592:
    00000330: 	movsd	-0x8(%rsi), %xmm2
    00000335: 	leaq	-0x8(%rsi), %r9
    00000339: 	comisd	%xmm1, %xmm2
    0000033d: 	ja	.Ltmp1584 # Offset: 829
    00000343: 	cmpq	%rax, %r9
    00000346: 	jbe	.Ltmp1585 # Offset: 838
    00000348: 	movsd	(%rax), %xmm0
    0000034c: 	comisd	%xmm0, %xmm1
    00000350: 	jbe	.Ltmp1586 # Offset: 848
    00000356: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1587:
    00000360: 	movsd	0x8(%rax), %xmm0
    00000365: 	addq	$0x8, %rax
    00000369: 	comisd	%xmm0, %xmm1
    0000036d: 	ja	.Ltmp1587 # Offset: 877
    0000036f: 	cmpq	%rax, %r9
    00000372: 	ja	.Ltmp1586 # Offset: 882
.Ltmp1585:
    00000374: 	movq	%r8, 0x10(%rsp)
    00000379: 	movq	%rcx, 0x8(%rsp)
    0000037e: 	movq	%rsi, (%rsp)
    00000382: 	callq	_ZN9benchmark9quicksortIPdEEvT_S2_ # Offset: 898
    00000387: 	movq	(%rsp), %rsi
    0000038b: 	movq	%rbp, %rax
    0000038e: 	movq	0x8(%rsp), %rcx
    00000393: 	movq	0x10(%rsp), %r8
    00000398: 	subq	%rsi, %rax
    0000039b: 	cmpq	$0x8, %rax
    0000039f: 	jle	.Ltmp1583 # Offset: 927
    000003a1: 	movq	%rsi, %rdi
    000003a4: 	jmp	.Ltmp1588 # Offset: 932
.Ltmp1581:
    000003a9: 	movsd	%xmm2, (%rsi)
    000003ad: 	movsd	%xmm0, (%rax)
.Ltmp1579:
    000003b1: 	movsd	-0x8(%rsi), %xmm0
    000003b6: 	movq	%rsi, %rbp
    000003b9: 	jmp	.Ltmp1589 # Offset: 953
.Ltmp1583:
    000003be: 	movq	%r8, %rax
    000003c1: 	subq	%rbp, %rax
    000003c4: 	cmpq	$0x8, %rax
    000003c8: 	jle	.Ltmp1578 # Offset: 968
    000003ca: 	movsd	-0x8(%r8), %xmm0
    000003d0: 	movq	%rbp, %rdi
    000003d3: 	jmp	.Ltmp1590 # Offset: 979
.Ltmp1576:
    000003d8: 	movsd	%xmm1, (%rsi)
    000003dc: 	movsd	%xmm0, (%rax)
.Ltmp1574:
    000003e0: 	movsd	-0x8(%rsi), %xmm0
    000003e5: 	movq	%rsi, %r8
    000003e8: 	jmp	.Ltmp1591 # Offset: 1000
    000003ed: 	nopl	(%rax) # Size: 3
.Ltmp1586:
    000003f0: 	movsd	%xmm0, (%r9)
    000003f5: 	movsd	%xmm2, (%rax)
.Ltmp1584:
    000003f9: 	movq	%r9, %rsi
    000003fc: 	jmp	.Ltmp1592 # Offset: 1020
.Ltmp1578:
    00000401: 	movq	%r12, %rax
    00000404: 	subq	%r8, %rax
    00000407: 	cmpq	$0x8, %rax
    0000040b: 	jle	.Ltmp1573 # Offset: 1035
    0000040d: 	movsd	-0x8(%r12), %xmm0
    00000414: 	movq	%r8, %rdi
    00000417: 	jmp	.Ltmp1593 # Offset: 1047
.Ltmp1573:
    0000041c: 	movq	%rcx, %rax
    0000041f: 	subq	%r12, %rax
    00000422: 	cmpq	$0x8, %rax
    00000426: 	jle	.Ltmp1567 # Offset: 1062
    00000428: 	movsd	-0x8(%rcx), %xmm0
    0000042d: 	movq	%r12, %rdi
    00000430: 	jmp	.Ltmp1594 # Offset: 1072
.Ltmp1567:
    00000435: 	movq	%rbx, %rax
    00000438: 	subq	%rcx, %rax
    0000043b: 	cmpq	$0x8, %rax
    0000043f: 	jle	.Ltmp1561 # Offset: 1087
    00000441: 	movsd	-0x8(%rbx), %xmm0
    00000446: 	movq	%rcx, %rdi
    00000449: 	jmp	.Ltmp1595 # Offset: 1097
.Ltmp1561:
    0000044e: 	movq	%r15, %rax
    00000451: 	subq	%rbx, %rax
    00000454: 	cmpq	$0x8, %rax
    00000458: 	jle	.Ltmp1555 # Offset: 1112
    0000045a: 	movsd	-0x8(%r15), %xmm0
    00000460: 	movq	%rbx, %rdi
    00000463: 	jmp	.Ltmp1596 # Offset: 1123
.Ltmp1555:
    00000468: 	movq	%r14, %rax
    0000046b: 	subq	%r15, %rax
    0000046e: 	cmpq	$0x8, %rax
    00000472: 	jle	.Ltmp1549 # Offset: 1138
    00000474: 	movsd	-0x8(%r14), %xmm0
    0000047a: 	movq	%r15, %rdi
    0000047d: 	jmp	.Ltmp1597 # Offset: 1149
.Ltmp1549:
    00000482: 	movq	%r13, %rax
    00000485: 	subq	%r14, %rax
    00000488: 	cmpq	$0x8, %rax
    0000048c: 	jle	.Ltmp1542 # Offset: 1164
    00000492: 	movsd	-0x8(%r13), %xmm0
    00000498: 	movq	%r14, %rdi
    0000049b: 	jmp	.Ltmp1598 # Offset: 1179
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIPdEEvT_S2_"

Binary Function "_Z13verify_sortedIPiEvT_S1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 112
  State       : disassembled
  Address     : 0xabe0
  Size        : 0x3e
  MaxSize     : 0x40
  Offset      : 0xabe0
  Section     : .text
  Orc Section : .local.text._Z13verify_sortedIPiEvT_S1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0111:
    00000000: 	endbr64
    00000004: 	addq	$0x4, %rdi
    00000008: 	jmp	.Ltmp1599 # Offset: 8
    0000000a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1601:
    00000010: 	addq	$0x4, %rdi
    00000014: 	movl	-0x8(%rdi), %eax
    00000017: 	cmpl	%eax, -0x4(%rdi)
    0000001a: 	jl	.Ltmp1600 # Offset: 26
.Ltmp1599:
    0000001c: 	cmpq	%rdi, %rsi
    0000001f: 	jne	.Ltmp1601 # Offset: 31
    00000021: 	retq # Offset: 33
    00000022: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1600:
    00000028: 	movq	(%rdx), %rdx
    0000002b: 	leaq	DATAat0x1d1cf(%rip), %rsi
    00000032: 	movl	$0x1, %edi
    00000037: 	xorl	%eax, %eax
    00000039: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 57
DWARF CFI Instructions:
    <empty>
End of Function "_Z13verify_sortedIPiEvT_S1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13verify_sortedIP9TypeClassIiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 113
  State       : disassembled
  Address     : 0xac20
  Size        : 0x3e
  MaxSize     : 0x40
  Offset      : 0xac20
  Section     : .text
  Orc Section : .local.text._Z13verify_sortedIP9TypeClassIiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0112:
    00000000: 	endbr64
    00000004: 	addq	$0x4, %rdi
    00000008: 	jmp	.Ltmp1602 # Offset: 8
    0000000a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1604:
    00000010: 	addq	$0x4, %rdi
    00000014: 	movl	-0x8(%rdi), %eax
    00000017: 	cmpl	%eax, -0x4(%rdi)
    0000001a: 	jl	.Ltmp1603 # Offset: 26
.Ltmp1602:
    0000001c: 	cmpq	%rdi, %rsi
    0000001f: 	jne	.Ltmp1604 # Offset: 31
    00000021: 	retq # Offset: 33
    00000022: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1603:
    00000028: 	movq	(%rdx), %rdx
    0000002b: 	leaq	DATAat0x1d1cf(%rip), %rsi
    00000032: 	movl	$0x1, %edi
    00000037: 	xorl	%eax, %eax
    00000039: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 57
DWARF CFI Instructions:
    <empty>
End of Function "_Z13verify_sortedIP9TypeClassIiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13verify_sortedIP12TypeSubClassIiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 114
  State       : disassembled
  Address     : 0xac60
  Size        : 0x3e
  MaxSize     : 0x40
  Offset      : 0xac60
  Section     : .text
  Orc Section : .local.text._Z13verify_sortedIP12TypeSubClassIiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0113:
    00000000: 	endbr64
    00000004: 	addq	$0x4, %rdi
    00000008: 	jmp	.Ltmp1605 # Offset: 8
    0000000a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1607:
    00000010: 	addq	$0x4, %rdi
    00000014: 	movl	-0x8(%rdi), %eax
    00000017: 	cmpl	%eax, -0x4(%rdi)
    0000001a: 	jl	.Ltmp1606 # Offset: 26
.Ltmp1605:
    0000001c: 	cmpq	%rdi, %rsi
    0000001f: 	jne	.Ltmp1607 # Offset: 31
    00000021: 	retq # Offset: 33
    00000022: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1606:
    00000028: 	movq	(%rdx), %rdx
    0000002b: 	leaq	DATAat0x1d1cf(%rip), %rsi
    00000032: 	movl	$0x1, %edi
    00000037: 	xorl	%eax, %eax
    00000039: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 57
DWARF CFI Instructions:
    <empty>
End of Function "_Z13verify_sortedIP12TypeSubClassIiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13verify_sortedIP13TypeSub2ClassIiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 115
  State       : disassembled
  Address     : 0xaca0
  Size        : 0x3e
  MaxSize     : 0x40
  Offset      : 0xaca0
  Section     : .text
  Orc Section : .local.text._Z13verify_sortedIP13TypeSub2ClassIiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0114:
    00000000: 	endbr64
    00000004: 	addq	$0x4, %rdi
    00000008: 	jmp	.Ltmp1608 # Offset: 8
    0000000a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1610:
    00000010: 	addq	$0x4, %rdi
    00000014: 	movl	-0x8(%rdi), %eax
    00000017: 	cmpl	%eax, -0x4(%rdi)
    0000001a: 	jl	.Ltmp1609 # Offset: 26
.Ltmp1608:
    0000001c: 	cmpq	%rdi, %rsi
    0000001f: 	jne	.Ltmp1610 # Offset: 31
    00000021: 	retq # Offset: 33
    00000022: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1609:
    00000028: 	movq	(%rdx), %rdx
    0000002b: 	leaq	DATAat0x1d1cf(%rip), %rsi
    00000032: 	movl	$0x1, %edi
    00000037: 	xorl	%eax, %eax
    00000039: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 57
DWARF CFI Instructions:
    <empty>
End of Function "_Z13verify_sortedIP13TypeSub2ClassIiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13verify_sortedIP12DeepSubClassIiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 116
  State       : disassembled
  Address     : 0xace0
  Size        : 0x3e
  MaxSize     : 0x40
  Offset      : 0xace0
  Section     : .text
  Orc Section : .local.text._Z13verify_sortedIP12DeepSubClassIiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0115:
    00000000: 	endbr64
    00000004: 	addq	$0x4, %rdi
    00000008: 	jmp	.Ltmp1611 # Offset: 8
    0000000a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1613:
    00000010: 	addq	$0x4, %rdi
    00000014: 	movl	-0x8(%rdi), %eax
    00000017: 	cmpl	%eax, -0x4(%rdi)
    0000001a: 	jl	.Ltmp1612 # Offset: 26
.Ltmp1611:
    0000001c: 	cmpq	%rdi, %rsi
    0000001f: 	jne	.Ltmp1613 # Offset: 31
    00000021: 	retq # Offset: 33
    00000022: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1612:
    00000028: 	movq	(%rdx), %rdx
    0000002b: 	leaq	DATAat0x1d1cf(%rip), %rsi
    00000032: 	movl	$0x1, %edi
    00000037: 	xorl	%eax, %eax
    00000039: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 57
DWARF CFI Instructions:
    <empty>
End of Function "_Z13verify_sortedIP12DeepSubClassIiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13verify_sortedIP16TypeVirtualClassIiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 117
  State       : disassembled
  Address     : 0xad20
  Size        : 0xa7
  MaxSize     : 0xb0
  Offset      : 0xad20
  Section     : .text
  Orc Section : .local.text._Z13verify_sortedIP16TypeVirtualClassIiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0116:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	addq	$0x10, %rdi
    0000000a: 	pushq	%r14
    0000000c: 	movq	%rsi, %r14
    0000000f: 	pushq	%r13
    00000011: 	leaq	_ZN16TypeVirtualClassIiEcviEv(%rip), %r13
    00000018: 	pushq	%r12
    0000001a: 	movq	%rdx, %r12
    0000001d: 	pushq	%rbp
    0000001e: 	pushq	%rbx
    0000001f: 	subq	$0x8, %rsp
    00000023: 	jmp	.Ltmp1614 # Offset: 35
    00000025: 	nopl	(%rax) # Size: 3
.Ltmp1618:
    00000028: 	movq	-0x20(%rbx), %rax
    0000002c: 	movl	-0x8(%rbx), %ebp
    0000002f: 	movq	(%rax), %rax
    00000032: 	cmpq	%r13, %rax
    00000035: 	jne	.Ltmp1615 # Offset: 53
.Ltmp1619:
    00000037: 	cmpl	-0x18(%rbx), %ebp
    0000003a: 	jl	.Ltmp1616 # Offset: 58
.Ltmp1620:
    0000003c: 	movq	%rbx, %rdi
.Ltmp1614:
    0000003f: 	leaq	-0x10(%rdi), %r15
    00000043: 	cmpq	%rdi, %r14
    00000046: 	je	.Ltmp1617 # Offset: 70
    00000048: 	movq	(%rdi), %rax
    0000004b: 	leaq	0x10(%rdi), %rbx
    0000004f: 	movq	(%rax), %rax
    00000052: 	cmpq	%r13, %rax
    00000055: 	je	.Ltmp1618 # Offset: 85
    00000057: 	callq	*%rax # Offset: 87
    00000059: 	movl	%eax, %ebp
    0000005b: 	movq	-0x20(%rbx), %rax
    0000005f: 	movq	(%rax), %rax
    00000062: 	cmpq	%r13, %rax
    00000065: 	je	.Ltmp1619 # Offset: 101
.Ltmp1615:
    00000067: 	movq	%r15, %rdi
    0000006a: 	callq	*%rax # Offset: 106
    0000006c: 	cmpl	%eax, %ebp
    0000006e: 	jge	.Ltmp1620 # Offset: 110
.Ltmp1616:
    00000070: 	movq	(%r12), %rdx
    00000074: 	addq	$0x8, %rsp
    00000078: 	leaq	DATAat0x1d1cf(%rip), %rsi
    0000007f: 	xorl	%eax, %eax
    00000081: 	popq	%rbx
    00000082: 	movl	$0x1, %edi
    00000087: 	popq	%rbp
    00000088: 	popq	%r12
    0000008a: 	popq	%r13
    0000008c: 	popq	%r14
    0000008e: 	popq	%r15
    00000090: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 144
    00000095: 	nopl	(%rax) # Size: 3
.Ltmp1617:
    00000098: 	addq	$0x8, %rsp
    0000009c: 	popq	%rbx
    0000009d: 	popq	%rbp
    0000009e: 	popq	%r12
    000000a0: 	popq	%r13
    000000a2: 	popq	%r14
    000000a4: 	popq	%r15
    000000a6: 	retq # Offset: 166
DWARF CFI Instructions:
    <empty>
End of Function "_Z13verify_sortedIP16TypeVirtualClassIiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13verify_sortedIP19TypeVirtualSubClassIiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 118
  State       : disassembled
  Address     : 0xadd0
  Size        : 0xa7
  MaxSize     : 0xb0
  Offset      : 0xadd0
  Section     : .text
  Orc Section : .local.text._Z13verify_sortedIP19TypeVirtualSubClassIiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0117:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	addq	$0x10, %rdi
    0000000a: 	pushq	%r14
    0000000c: 	movq	%rsi, %r14
    0000000f: 	pushq	%r13
    00000011: 	leaq	_ZN19TypeVirtualSubClassIiEcviEv(%rip), %r13
    00000018: 	pushq	%r12
    0000001a: 	movq	%rdx, %r12
    0000001d: 	pushq	%rbp
    0000001e: 	pushq	%rbx
    0000001f: 	subq	$0x8, %rsp
    00000023: 	jmp	.Ltmp1621 # Offset: 35
    00000025: 	nopl	(%rax) # Size: 3
.Ltmp1625:
    00000028: 	movq	-0x20(%rbx), %rax
    0000002c: 	movl	-0x8(%rbx), %ebp
    0000002f: 	movq	(%rax), %rax
    00000032: 	cmpq	%r13, %rax
    00000035: 	jne	.Ltmp1622 # Offset: 53
.Ltmp1626:
    00000037: 	cmpl	-0x18(%rbx), %ebp
    0000003a: 	jl	.Ltmp1623 # Offset: 58
.Ltmp1627:
    0000003c: 	movq	%rbx, %rdi
.Ltmp1621:
    0000003f: 	leaq	-0x10(%rdi), %r15
    00000043: 	cmpq	%rdi, %r14
    00000046: 	je	.Ltmp1624 # Offset: 70
    00000048: 	movq	(%rdi), %rax
    0000004b: 	leaq	0x10(%rdi), %rbx
    0000004f: 	movq	(%rax), %rax
    00000052: 	cmpq	%r13, %rax
    00000055: 	je	.Ltmp1625 # Offset: 85
    00000057: 	callq	*%rax # Offset: 87
    00000059: 	movl	%eax, %ebp
    0000005b: 	movq	-0x20(%rbx), %rax
    0000005f: 	movq	(%rax), %rax
    00000062: 	cmpq	%r13, %rax
    00000065: 	je	.Ltmp1626 # Offset: 101
.Ltmp1622:
    00000067: 	movq	%r15, %rdi
    0000006a: 	callq	*%rax # Offset: 106
    0000006c: 	cmpl	%eax, %ebp
    0000006e: 	jge	.Ltmp1627 # Offset: 110
.Ltmp1623:
    00000070: 	movq	(%r12), %rdx
    00000074: 	addq	$0x8, %rsp
    00000078: 	leaq	DATAat0x1d1cf(%rip), %rsi
    0000007f: 	xorl	%eax, %eax
    00000081: 	popq	%rbx
    00000082: 	movl	$0x1, %edi
    00000087: 	popq	%rbp
    00000088: 	popq	%r12
    0000008a: 	popq	%r13
    0000008c: 	popq	%r14
    0000008e: 	popq	%r15
    00000090: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 144
    00000095: 	nopl	(%rax) # Size: 3
.Ltmp1624:
    00000098: 	addq	$0x8, %rsp
    0000009c: 	popq	%rbx
    0000009d: 	popq	%rbp
    0000009e: 	popq	%r12
    000000a0: 	popq	%r13
    000000a2: 	popq	%r14
    000000a4: 	popq	%r15
    000000a6: 	retq # Offset: 166
DWARF CFI Instructions:
    <empty>
End of Function "_Z13verify_sortedIP19TypeVirtualSubClassIiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13verify_sortedIP14WorkerSubClassIiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 119
  State       : disassembled
  Address     : 0xae80
  Size        : 0xa7
  MaxSize     : 0xb0
  Offset      : 0xae80
  Section     : .text
  Orc Section : .local.text._Z13verify_sortedIP14WorkerSubClassIiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0118:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	addq	$0x10, %rdi
    0000000a: 	pushq	%r14
    0000000c: 	movq	%rsi, %r14
    0000000f: 	pushq	%r13
    00000011: 	leaq	_ZN14WorkerSubClassIiEcviEv(%rip), %r13
    00000018: 	pushq	%r12
    0000001a: 	movq	%rdx, %r12
    0000001d: 	pushq	%rbp
    0000001e: 	pushq	%rbx
    0000001f: 	subq	$0x8, %rsp
    00000023: 	jmp	.Ltmp1628 # Offset: 35
    00000025: 	nopl	(%rax) # Size: 3
.Ltmp1632:
    00000028: 	movq	-0x20(%rbx), %rax
    0000002c: 	movl	-0x8(%rbx), %ebp
    0000002f: 	movq	(%rax), %rax
    00000032: 	cmpq	%r13, %rax
    00000035: 	jne	.Ltmp1629 # Offset: 53
.Ltmp1633:
    00000037: 	cmpl	-0x18(%rbx), %ebp
    0000003a: 	jl	.Ltmp1630 # Offset: 58
.Ltmp1634:
    0000003c: 	movq	%rbx, %rdi
.Ltmp1628:
    0000003f: 	leaq	-0x10(%rdi), %r15
    00000043: 	cmpq	%rdi, %r14
    00000046: 	je	.Ltmp1631 # Offset: 70
    00000048: 	movq	(%rdi), %rax
    0000004b: 	leaq	0x10(%rdi), %rbx
    0000004f: 	movq	(%rax), %rax
    00000052: 	cmpq	%r13, %rax
    00000055: 	je	.Ltmp1632 # Offset: 85
    00000057: 	callq	*%rax # Offset: 87
    00000059: 	movl	%eax, %ebp
    0000005b: 	movq	-0x20(%rbx), %rax
    0000005f: 	movq	(%rax), %rax
    00000062: 	cmpq	%r13, %rax
    00000065: 	je	.Ltmp1633 # Offset: 101
.Ltmp1629:
    00000067: 	movq	%r15, %rdi
    0000006a: 	callq	*%rax # Offset: 106
    0000006c: 	cmpl	%eax, %ebp
    0000006e: 	jge	.Ltmp1634 # Offset: 110
.Ltmp1630:
    00000070: 	movq	(%r12), %rdx
    00000074: 	addq	$0x8, %rsp
    00000078: 	leaq	DATAat0x1d1cf(%rip), %rsi
    0000007f: 	xorl	%eax, %eax
    00000081: 	popq	%rbx
    00000082: 	movl	$0x1, %edi
    00000087: 	popq	%rbp
    00000088: 	popq	%r12
    0000008a: 	popq	%r13
    0000008c: 	popq	%r14
    0000008e: 	popq	%r15
    00000090: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 144
    00000095: 	nopl	(%rax) # Size: 3
.Ltmp1631:
    00000098: 	addq	$0x8, %rsp
    0000009c: 	popq	%rbx
    0000009d: 	popq	%rbp
    0000009e: 	popq	%r12
    000000a0: 	popq	%r13
    000000a2: 	popq	%r14
    000000a4: 	popq	%r15
    000000a6: 	retq # Offset: 166
DWARF CFI Instructions:
    <empty>
End of Function "_Z13verify_sortedIP14WorkerSubClassIiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13verify_sortedIP18WorkerDeepSubClassIiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 120
  State       : disassembled
  Address     : 0xaf30
  Size        : 0xa7
  MaxSize     : 0xb0
  Offset      : 0xaf30
  Section     : .text
  Orc Section : .local.text._Z13verify_sortedIP18WorkerDeepSubClassIiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0119:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	addq	$0x10, %rdi
    0000000a: 	pushq	%r14
    0000000c: 	movq	%rsi, %r14
    0000000f: 	pushq	%r13
    00000011: 	leaq	_ZN18WorkerDeepSubClassIiEcviEv(%rip), %r13
    00000018: 	pushq	%r12
    0000001a: 	movq	%rdx, %r12
    0000001d: 	pushq	%rbp
    0000001e: 	pushq	%rbx
    0000001f: 	subq	$0x8, %rsp
    00000023: 	jmp	.Ltmp1635 # Offset: 35
    00000025: 	nopl	(%rax) # Size: 3
.Ltmp1639:
    00000028: 	movq	-0x20(%rbx), %rax
    0000002c: 	movl	-0x8(%rbx), %ebp
    0000002f: 	movq	(%rax), %rax
    00000032: 	cmpq	%r13, %rax
    00000035: 	jne	.Ltmp1636 # Offset: 53
.Ltmp1640:
    00000037: 	cmpl	-0x18(%rbx), %ebp
    0000003a: 	jl	.Ltmp1637 # Offset: 58
.Ltmp1641:
    0000003c: 	movq	%rbx, %rdi
.Ltmp1635:
    0000003f: 	leaq	-0x10(%rdi), %r15
    00000043: 	cmpq	%rdi, %r14
    00000046: 	je	.Ltmp1638 # Offset: 70
    00000048: 	movq	(%rdi), %rax
    0000004b: 	leaq	0x10(%rdi), %rbx
    0000004f: 	movq	(%rax), %rax
    00000052: 	cmpq	%r13, %rax
    00000055: 	je	.Ltmp1639 # Offset: 85
    00000057: 	callq	*%rax # Offset: 87
    00000059: 	movl	%eax, %ebp
    0000005b: 	movq	-0x20(%rbx), %rax
    0000005f: 	movq	(%rax), %rax
    00000062: 	cmpq	%r13, %rax
    00000065: 	je	.Ltmp1640 # Offset: 101
.Ltmp1636:
    00000067: 	movq	%r15, %rdi
    0000006a: 	callq	*%rax # Offset: 106
    0000006c: 	cmpl	%eax, %ebp
    0000006e: 	jge	.Ltmp1641 # Offset: 110
.Ltmp1637:
    00000070: 	movq	(%r12), %rdx
    00000074: 	addq	$0x8, %rsp
    00000078: 	leaq	DATAat0x1d1cf(%rip), %rsi
    0000007f: 	xorl	%eax, %eax
    00000081: 	popq	%rbx
    00000082: 	movl	$0x1, %edi
    00000087: 	popq	%rbp
    00000088: 	popq	%r12
    0000008a: 	popq	%r13
    0000008c: 	popq	%r14
    0000008e: 	popq	%r15
    00000090: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 144
    00000095: 	nopl	(%rax) # Size: 3
.Ltmp1638:
    00000098: 	addq	$0x8, %rsp
    0000009c: 	popq	%rbx
    0000009d: 	popq	%rbp
    0000009e: 	popq	%r12
    000000a0: 	popq	%r13
    000000a2: 	popq	%r14
    000000a4: 	popq	%r15
    000000a6: 	retq # Offset: 166
DWARF CFI Instructions:
    <empty>
End of Function "_Z13verify_sortedIP18WorkerDeepSubClassIiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13verify_sortedIP15WorkerSubClass2IiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 121
  State       : disassembled
  Address     : 0xafe0
  Size        : 0xa7
  MaxSize     : 0xb0
  Offset      : 0xafe0
  Section     : .text
  Orc Section : .local.text._Z13verify_sortedIP15WorkerSubClass2IiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0120:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	addq	$0x10, %rdi
    0000000a: 	pushq	%r14
    0000000c: 	movq	%rsi, %r14
    0000000f: 	pushq	%r13
    00000011: 	leaq	_ZN15WorkerSubClass2IiEcviEv(%rip), %r13
    00000018: 	pushq	%r12
    0000001a: 	movq	%rdx, %r12
    0000001d: 	pushq	%rbp
    0000001e: 	pushq	%rbx
    0000001f: 	subq	$0x8, %rsp
    00000023: 	jmp	.Ltmp1642 # Offset: 35
    00000025: 	nopl	(%rax) # Size: 3
.Ltmp1646:
    00000028: 	movq	-0x20(%rbx), %rax
    0000002c: 	movl	-0x8(%rbx), %ebp
    0000002f: 	movq	(%rax), %rax
    00000032: 	cmpq	%r13, %rax
    00000035: 	jne	.Ltmp1643 # Offset: 53
.Ltmp1647:
    00000037: 	cmpl	-0x18(%rbx), %ebp
    0000003a: 	jl	.Ltmp1644 # Offset: 58
.Ltmp1648:
    0000003c: 	movq	%rbx, %rdi
.Ltmp1642:
    0000003f: 	leaq	-0x10(%rdi), %r15
    00000043: 	cmpq	%rdi, %r14
    00000046: 	je	.Ltmp1645 # Offset: 70
    00000048: 	movq	(%rdi), %rax
    0000004b: 	leaq	0x10(%rdi), %rbx
    0000004f: 	movq	(%rax), %rax
    00000052: 	cmpq	%r13, %rax
    00000055: 	je	.Ltmp1646 # Offset: 85
    00000057: 	callq	*%rax # Offset: 87
    00000059: 	movl	%eax, %ebp
    0000005b: 	movq	-0x20(%rbx), %rax
    0000005f: 	movq	(%rax), %rax
    00000062: 	cmpq	%r13, %rax
    00000065: 	je	.Ltmp1647 # Offset: 101
.Ltmp1643:
    00000067: 	movq	%r15, %rdi
    0000006a: 	callq	*%rax # Offset: 106
    0000006c: 	cmpl	%eax, %ebp
    0000006e: 	jge	.Ltmp1648 # Offset: 110
.Ltmp1644:
    00000070: 	movq	(%r12), %rdx
    00000074: 	addq	$0x8, %rsp
    00000078: 	leaq	DATAat0x1d1cf(%rip), %rsi
    0000007f: 	xorl	%eax, %eax
    00000081: 	popq	%rbx
    00000082: 	movl	$0x1, %edi
    00000087: 	popq	%rbp
    00000088: 	popq	%r12
    0000008a: 	popq	%r13
    0000008c: 	popq	%r14
    0000008e: 	popq	%r15
    00000090: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 144
    00000095: 	nopl	(%rax) # Size: 3
.Ltmp1645:
    00000098: 	addq	$0x8, %rsp
    0000009c: 	popq	%rbx
    0000009d: 	popq	%rbp
    0000009e: 	popq	%r12
    000000a0: 	popq	%r13
    000000a2: 	popq	%r14
    000000a4: 	popq	%r15
    000000a6: 	retq # Offset: 166
DWARF CFI Instructions:
    <empty>
End of Function "_Z13verify_sortedIP15WorkerSubClass2IiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13verify_sortedIP15WorkerSubClass3IiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 122
  State       : disassembled
  Address     : 0xb090
  Size        : 0xa7
  MaxSize     : 0xb0
  Offset      : 0xb090
  Section     : .text
  Orc Section : .local.text._Z13verify_sortedIP15WorkerSubClass3IiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0121:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	addq	$0x10, %rdi
    0000000a: 	pushq	%r14
    0000000c: 	movq	%rsi, %r14
    0000000f: 	pushq	%r13
    00000011: 	leaq	_ZN15WorkerSubClass3IiEcviEv(%rip), %r13
    00000018: 	pushq	%r12
    0000001a: 	movq	%rdx, %r12
    0000001d: 	pushq	%rbp
    0000001e: 	pushq	%rbx
    0000001f: 	subq	$0x8, %rsp
    00000023: 	jmp	.Ltmp1649 # Offset: 35
    00000025: 	nopl	(%rax) # Size: 3
.Ltmp1653:
    00000028: 	movq	-0x20(%rbx), %rax
    0000002c: 	movl	-0x8(%rbx), %ebp
    0000002f: 	movq	(%rax), %rax
    00000032: 	cmpq	%r13, %rax
    00000035: 	jne	.Ltmp1650 # Offset: 53
.Ltmp1654:
    00000037: 	cmpl	-0x18(%rbx), %ebp
    0000003a: 	jl	.Ltmp1651 # Offset: 58
.Ltmp1655:
    0000003c: 	movq	%rbx, %rdi
.Ltmp1649:
    0000003f: 	leaq	-0x10(%rdi), %r15
    00000043: 	cmpq	%rdi, %r14
    00000046: 	je	.Ltmp1652 # Offset: 70
    00000048: 	movq	(%rdi), %rax
    0000004b: 	leaq	0x10(%rdi), %rbx
    0000004f: 	movq	(%rax), %rax
    00000052: 	cmpq	%r13, %rax
    00000055: 	je	.Ltmp1653 # Offset: 85
    00000057: 	callq	*%rax # Offset: 87
    00000059: 	movl	%eax, %ebp
    0000005b: 	movq	-0x20(%rbx), %rax
    0000005f: 	movq	(%rax), %rax
    00000062: 	cmpq	%r13, %rax
    00000065: 	je	.Ltmp1654 # Offset: 101
.Ltmp1650:
    00000067: 	movq	%r15, %rdi
    0000006a: 	callq	*%rax # Offset: 106
    0000006c: 	cmpl	%eax, %ebp
    0000006e: 	jge	.Ltmp1655 # Offset: 110
.Ltmp1651:
    00000070: 	movq	(%r12), %rdx
    00000074: 	addq	$0x8, %rsp
    00000078: 	leaq	DATAat0x1d1cf(%rip), %rsi
    0000007f: 	xorl	%eax, %eax
    00000081: 	popq	%rbx
    00000082: 	movl	$0x1, %edi
    00000087: 	popq	%rbp
    00000088: 	popq	%r12
    0000008a: 	popq	%r13
    0000008c: 	popq	%r14
    0000008e: 	popq	%r15
    00000090: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 144
    00000095: 	nopl	(%rax) # Size: 3
.Ltmp1652:
    00000098: 	addq	$0x8, %rsp
    0000009c: 	popq	%rbx
    0000009d: 	popq	%rbp
    0000009e: 	popq	%r12
    000000a0: 	popq	%r13
    000000a2: 	popq	%r14
    000000a4: 	popq	%r15
    000000a6: 	retq # Offset: 166
DWARF CFI Instructions:
    <empty>
End of Function "_Z13verify_sortedIP15WorkerSubClass3IiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_ZN9benchmark9quicksortIPiEEvT_S2_" after disassembly {
  Number      : 123
  State       : disassembled
  Address     : 0xb140
  Size        : 0x41e
  MaxSize     : 0x420
  Offset      : 0xb140
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIPiEEvT_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0122:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rax
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rax
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x28, %rsp
    00000018: 	movq	%rsi, (%rsp)
    0000001c: 	cmpq	$0x4, %rax
    00000020: 	jle	.Ltmp1656 # Offset: 32
.Ltmp1668:
    00000022: 	movl	(%rdi), %r8d
    00000025: 	movq	(%rsp), %r13
    00000029: 	movq	%rdi, %rdx
.Ltmp1661:
    0000002c: 	movl	-0x4(%r13), %eax
    00000030: 	leaq	-0x4(%r13), %rcx
    00000034: 	cmpl	%r8d, %eax
    00000037: 	jg	.Ltmp1657 # Offset: 55
    00000039: 	cmpq	%rcx, %rdx
    0000003c: 	jae	.Ltmp1658 # Offset: 60
    0000003e: 	movl	(%rdx), %esi
    00000040: 	cmpl	%esi, %r8d
    00000043: 	jle	.Ltmp1659 # Offset: 67
.Ltmp1660:
    00000045: 	movl	0x4(%rdx), %esi
    00000048: 	addq	$0x4, %rdx
    0000004c: 	cmpl	%r8d, %esi
    0000004f: 	jl	.Ltmp1660 # Offset: 79
    00000051: 	cmpq	%rdx, %rcx
    00000054: 	jbe	.Ltmp1658 # Offset: 84
.Ltmp1659:
    00000056: 	movl	%esi, (%rcx)
    00000058: 	movl	%eax, (%rdx)
.Ltmp1657:
    0000005a: 	movq	%rcx, %r13
    0000005d: 	jmp	.Ltmp1661 # Offset: 93
.Ltmp1656:
    0000005f: 	addq	$0x28, %rsp
    00000063: 	popq	%rbx
    00000064: 	popq	%rbp
    00000065: 	popq	%r12
    00000067: 	popq	%r13
    00000069: 	popq	%r14
    0000006b: 	popq	%r15
    0000006d: 	retq # Offset: 109
.Ltmp1658:
    0000006e: 	movq	%r13, %rdx
    00000071: 	movq	%r13, %r8
    00000074: 	subq	%rdi, %rdx
    00000077: 	cmpq	$0x4, %rdx
    0000007b: 	jle	.Ltmp1662 # Offset: 123
.Ltmp1720:
    0000007d: 	movl	(%rdi), %r9d
    00000080: 	movq	%r8, %r14
    00000083: 	movq	%rdi, %rdx
.Ltmp1667:
    00000086: 	leaq	-0x4(%r14), %rcx
    0000008a: 	cmpl	%eax, %r9d
    0000008d: 	jl	.Ltmp1663 # Offset: 141
    0000008f: 	cmpq	%rdx, %rcx
    00000092: 	jbe	.Ltmp1664 # Offset: 146
    00000094: 	movl	(%rdx), %esi
    00000096: 	cmpl	%esi, %r9d
    00000099: 	jle	.Ltmp1665 # Offset: 153
.Ltmp1666:
    0000009b: 	movl	0x4(%rdx), %esi
    0000009e: 	addq	$0x4, %rdx
    000000a2: 	cmpl	%esi, %r9d
    000000a5: 	jg	.Ltmp1666 # Offset: 165
    000000a7: 	cmpq	%rdx, %rcx
    000000aa: 	jbe	.Ltmp1664 # Offset: 170
.Ltmp1665:
    000000ac: 	movl	%esi, (%rcx)
    000000ae: 	movl	%eax, (%rdx)
.Ltmp1663:
    000000b0: 	movl	-0x4(%rcx), %eax
    000000b3: 	movq	%rcx, %r14
    000000b6: 	jmp	.Ltmp1667 # Offset: 182
.Ltmp1719:
    000000b8: 	movq	%r8, %r13
.Ltmp1662:
    000000bb: 	movq	(%rsp), %rax
    000000bf: 	subq	%r13, %rax
    000000c2: 	cmpq	$0x4, %rax
    000000c6: 	jle	.Ltmp1656 # Offset: 198
    000000c8: 	movq	%r13, %rdi
    000000cb: 	jmp	.Ltmp1668 # Offset: 203
.Ltmp1664:
    000000d0: 	movq	%r14, %rdx
    000000d3: 	subq	%rdi, %rdx
    000000d6: 	cmpq	$0x4, %rdx
    000000da: 	jle	.Ltmp1669 # Offset: 218
    000000e0: 	movq	%r8, 0x8(%rsp)
    000000e5: 	movq	%r14, %rbx
.Ltmp1722:
    000000e8: 	movl	(%rdi), %r9d
    000000eb: 	movq	%rbx, %r15
    000000ee: 	movq	%rdi, %rdx
.Ltmp1674:
    000000f1: 	leaq	-0x4(%r15), %rcx
    000000f5: 	cmpl	%r9d, %eax
    000000f8: 	jg	.Ltmp1670 # Offset: 248
    000000fa: 	cmpq	%rdx, %rcx
    000000fd: 	jbe	.Ltmp1671 # Offset: 253
    000000ff: 	movl	(%rdx), %esi
    00000101: 	cmpl	%esi, %r9d
    00000104: 	jle	.Ltmp1672 # Offset: 260
.Ltmp1673:
    00000106: 	movl	0x4(%rdx), %esi
    00000109: 	addq	$0x4, %rdx
    0000010d: 	cmpl	%esi, %r9d
    00000110: 	jg	.Ltmp1673 # Offset: 272
    00000112: 	cmpq	%rdx, %rcx
    00000115: 	jbe	.Ltmp1671 # Offset: 277
.Ltmp1672:
    00000117: 	movl	%esi, (%rcx)
    00000119: 	movl	%eax, (%rdx)
.Ltmp1670:
    0000011b: 	movl	-0x4(%rcx), %eax
    0000011e: 	movq	%rcx, %r15
    00000121: 	jmp	.Ltmp1674 # Offset: 289
.Ltmp1671:
    00000123: 	movq	%r15, %rdx
    00000126: 	subq	%rdi, %rdx
    00000129: 	cmpq	$0x4, %rdx
    0000012d: 	jle	.Ltmp1675 # Offset: 301
    00000133: 	movq	%rbx, 0x10(%rsp)
    00000138: 	movq	%r15, %rbx
.Ltmp1718:
    0000013b: 	movl	(%rdi), %r9d
    0000013e: 	movq	%rbx, %r14
    00000141: 	movq	%rdi, %rdx
.Ltmp1680:
    00000144: 	leaq	-0x4(%r14), %rcx
    00000148: 	cmpl	%eax, %r9d
    0000014b: 	jl	.Ltmp1676 # Offset: 331
    0000014d: 	cmpq	%rdx, %rcx
    00000150: 	jbe	.Ltmp1677 # Offset: 336
    00000152: 	movl	(%rdx), %esi
    00000154: 	cmpl	%esi, %r9d
    00000157: 	jle	.Ltmp1678 # Offset: 343
.Ltmp1679:
    00000159: 	movl	0x4(%rdx), %esi
    0000015c: 	addq	$0x4, %rdx
    00000160: 	cmpl	%esi, %r9d
    00000163: 	jg	.Ltmp1679 # Offset: 355
    00000165: 	cmpq	%rdx, %rcx
    00000168: 	jbe	.Ltmp1677 # Offset: 360
.Ltmp1678:
    0000016a: 	movl	%esi, (%rcx)
    0000016c: 	movl	%eax, (%rdx)
.Ltmp1676:
    0000016e: 	movl	-0x4(%rcx), %eax
    00000171: 	movq	%rcx, %r14
    00000174: 	jmp	.Ltmp1680 # Offset: 372
.Ltmp1677:
    00000176: 	movq	%r14, %rdx
    00000179: 	subq	%rdi, %rdx
    0000017c: 	cmpq	$0x4, %rdx
    00000180: 	jle	.Ltmp1681 # Offset: 384
    00000186: 	movq	%rbx, 0x18(%rsp)
    0000018b: 	movq	%r14, %rbx
.Ltmp1716:
    0000018e: 	movl	(%rdi), %r9d
    00000191: 	movq	%rbx, %r14
    00000194: 	movq	%rdi, %rdx
.Ltmp1686:
    00000197: 	leaq	-0x4(%r14), %rcx
    0000019b: 	cmpl	%eax, %r9d
    0000019e: 	jl	.Ltmp1682 # Offset: 414
    000001a0: 	cmpq	%rdx, %rcx
    000001a3: 	jbe	.Ltmp1683 # Offset: 419
    000001a5: 	movl	(%rdx), %esi
    000001a7: 	cmpl	%esi, %r9d
    000001aa: 	jle	.Ltmp1684 # Offset: 426
.Ltmp1685:
    000001ac: 	movl	0x4(%rdx), %esi
    000001af: 	addq	$0x4, %rdx
    000001b3: 	cmpl	%esi, %r9d
    000001b6: 	jg	.Ltmp1685 # Offset: 438
    000001b8: 	cmpq	%rdx, %rcx
    000001bb: 	jbe	.Ltmp1683 # Offset: 443
.Ltmp1684:
    000001bd: 	movl	%esi, (%rcx)
    000001bf: 	movl	%eax, (%rdx)
.Ltmp1682:
    000001c1: 	movl	-0x4(%rcx), %eax
    000001c4: 	movq	%rcx, %r14
    000001c7: 	jmp	.Ltmp1686 # Offset: 455
.Ltmp1683:
    000001c9: 	movq	%r14, %rdx
    000001cc: 	subq	%rdi, %rdx
    000001cf: 	cmpq	$0x4, %rdx
    000001d3: 	jle	.Ltmp1687 # Offset: 467
.Ltmp1714:
    000001d9: 	movl	(%rdi), %r8d
    000001dc: 	movq	%r14, %r15
    000001df: 	movq	%rdi, %rdx
.Ltmp1692:
    000001e2: 	leaq	-0x4(%r15), %rcx
    000001e6: 	cmpl	%eax, %r8d
    000001e9: 	jl	.Ltmp1688 # Offset: 489
    000001eb: 	cmpq	%rdx, %rcx
    000001ee: 	jbe	.Ltmp1689 # Offset: 494
    000001f0: 	movl	(%rdx), %esi
    000001f2: 	cmpl	%esi, %r8d
    000001f5: 	jle	.Ltmp1690 # Offset: 501
    000001f7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1691:
    00000200: 	movl	0x4(%rdx), %esi
    00000203: 	addq	$0x4, %rdx
    00000207: 	cmpl	%esi, %r8d
    0000020a: 	jg	.Ltmp1691 # Offset: 522
    0000020c: 	cmpq	%rdx, %rcx
    0000020f: 	jbe	.Ltmp1689 # Offset: 527
.Ltmp1690:
    00000211: 	movl	%esi, (%rcx)
    00000213: 	movl	%eax, (%rdx)
.Ltmp1688:
    00000215: 	movl	-0x4(%rcx), %eax
    00000218: 	movq	%rcx, %r15
    0000021b: 	jmp	.Ltmp1692 # Offset: 539
.Ltmp1689:
    0000021d: 	movq	%r15, %rdx
    00000220: 	subq	%rdi, %rdx
    00000223: 	cmpq	$0x4, %rdx
    00000227: 	jle	.Ltmp1693 # Offset: 551
.Ltmp1713:
    0000022d: 	movl	(%rdi), %r8d
    00000230: 	movq	%r15, %r12
    00000233: 	movq	%rdi, %rdx
    00000236: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1711:
    00000240: 	leaq	-0x4(%r12), %rsi
    00000245: 	cmpl	%eax, %r8d
    00000248: 	jl	.Ltmp1694 # Offset: 584
    0000024e: 	cmpq	%rdx, %rsi
    00000251: 	jbe	.Ltmp1695 # Offset: 593
    00000253: 	movl	(%rdx), %ecx
    00000255: 	cmpl	%ecx, %r8d
    00000258: 	jle	.Ltmp1696 # Offset: 600
    0000025e: 	nop # Size: 2
.Ltmp1697:
    00000260: 	movl	0x4(%rdx), %ecx
    00000263: 	addq	$0x4, %rdx
    00000267: 	cmpl	%ecx, %r8d
    0000026a: 	jg	.Ltmp1697 # Offset: 618
    0000026c: 	cmpq	%rdx, %rsi
    0000026f: 	ja	.Ltmp1696 # Offset: 623
.Ltmp1695:
    00000275: 	movq	%r12, %rdx
    00000278: 	subq	%rdi, %rdx
    0000027b: 	cmpq	$0x4, %rdx
    0000027f: 	jle	.Ltmp1698 # Offset: 639
.Ltmp1710:
    00000285: 	movl	(%rdi), %esi
    00000287: 	movq	%r12, %rbp
    0000028a: 	movq	%rdi, %rdx
    0000028d: 	nopl	(%rax) # Size: 3
.Ltmp1709:
    00000290: 	leaq	-0x4(%rbp), %rcx
    00000294: 	cmpl	%esi, %eax
    00000296: 	jg	.Ltmp1699 # Offset: 662
    0000029c: 	cmpq	%rdx, %rcx
    0000029f: 	jbe	.Ltmp1700 # Offset: 671
    000002a1: 	movl	(%rdx), %r8d
    000002a4: 	cmpl	%r8d, %esi
    000002a7: 	jle	.Ltmp1701 # Offset: 679
    000002ad: 	nopl	(%rax) # Size: 3
.Ltmp1702:
    000002b0: 	movl	0x4(%rdx), %r8d
    000002b4: 	addq	$0x4, %rdx
    000002b8: 	cmpl	%r8d, %esi
    000002bb: 	jg	.Ltmp1702 # Offset: 699
    000002bd: 	cmpq	%rdx, %rcx
    000002c0: 	ja	.Ltmp1701 # Offset: 704
.Ltmp1700:
    000002c2: 	movq	%rbp, %rax
    000002c5: 	subq	%rdi, %rax
    000002c8: 	cmpq	$0x4, %rax
    000002cc: 	jle	.Ltmp1703 # Offset: 716
.Ltmp1708:
    000002ce: 	movl	(%rdi), %ecx
    000002d0: 	movq	%rbp, %r13
    000002d3: 	movq	%rdi, %rax
    000002d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1712:
    000002e0: 	movl	-0x4(%r13), %r8d
    000002e4: 	leaq	-0x4(%r13), %rsi
    000002e8: 	cmpl	%r8d, %ecx
    000002eb: 	jl	.Ltmp1704 # Offset: 747
    000002f1: 	cmpq	%rax, %rsi
    000002f4: 	jbe	.Ltmp1705 # Offset: 756
    000002f6: 	movl	(%rax), %edx
    000002f8: 	cmpl	%edx, %ecx
    000002fa: 	jle	.Ltmp1706 # Offset: 762
    000002fc: 	nopl	(%rax) # Size: 4
.Ltmp1707:
    00000300: 	movl	0x4(%rax), %edx
    00000303: 	addq	$0x4, %rax
    00000307: 	cmpl	%edx, %ecx
    00000309: 	jg	.Ltmp1707 # Offset: 777
    0000030b: 	cmpq	%rax, %rsi
    0000030e: 	ja	.Ltmp1706 # Offset: 782
.Ltmp1705:
    00000310: 	movq	%r13, %rsi
    00000313: 	callq	_ZN9benchmark9quicksortIPiEEvT_S2_ # Offset: 787
    00000318: 	movq	%rbp, %rax
    0000031b: 	subq	%r13, %rax
    0000031e: 	cmpq	$0x4, %rax
    00000322: 	jle	.Ltmp1703 # Offset: 802
    00000324: 	movq	%r13, %rdi
    00000327: 	jmp	.Ltmp1708 # Offset: 807
.Ltmp1701:
    00000329: 	movl	%r8d, (%rcx)
    0000032c: 	movl	%eax, (%rdx)
.Ltmp1699:
    0000032e: 	movl	-0x4(%rcx), %eax
    00000331: 	movq	%rcx, %rbp
    00000334: 	jmp	.Ltmp1709 # Offset: 820
.Ltmp1703:
    00000339: 	movq	%r12, %rax
    0000033c: 	subq	%rbp, %rax
    0000033f: 	cmpq	$0x4, %rax
    00000343: 	jle	.Ltmp1698 # Offset: 835
    00000345: 	movl	-0x4(%r12), %eax
    0000034a: 	movq	%rbp, %rdi
    0000034d: 	jmp	.Ltmp1710 # Offset: 845
.Ltmp1696:
    00000352: 	movl	%ecx, (%rsi)
    00000354: 	movl	%eax, (%rdx)
.Ltmp1694:
    00000356: 	movl	-0x4(%rsi), %eax
    00000359: 	movq	%rsi, %r12
    0000035c: 	jmp	.Ltmp1711 # Offset: 860
    00000361: 	nopl	(%rax) # Size: 7
.Ltmp1706:
    00000368: 	movl	%edx, (%rsi)
    0000036a: 	movl	%r8d, (%rax)
.Ltmp1704:
    0000036d: 	movq	%rsi, %r13
    00000370: 	jmp	.Ltmp1712 # Offset: 880
.Ltmp1698:
    00000375: 	movq	%r15, %rax
    00000378: 	subq	%r12, %rax
    0000037b: 	cmpq	$0x4, %rax
    0000037f: 	jle	.Ltmp1693 # Offset: 895
    00000381: 	movl	-0x4(%r15), %eax
    00000385: 	movq	%r12, %rdi
    00000388: 	jmp	.Ltmp1713 # Offset: 904
.Ltmp1693:
    0000038d: 	movq	%r14, %rax
    00000390: 	subq	%r15, %rax
    00000393: 	cmpq	$0x4, %rax
    00000397: 	jle	.Ltmp1687 # Offset: 919
    00000399: 	movl	-0x4(%r14), %eax
    0000039d: 	movq	%r15, %rdi
    000003a0: 	jmp	.Ltmp1714 # Offset: 928
.Ltmp1687:
    000003a5: 	movq	%rbx, %rax
    000003a8: 	subq	%r14, %rax
    000003ab: 	cmpq	$0x4, %rax
    000003af: 	jle	.Ltmp1715 # Offset: 943
    000003b1: 	movl	-0x4(%rbx), %eax
    000003b4: 	movq	%r14, %rdi
    000003b7: 	jmp	.Ltmp1716 # Offset: 951
.Ltmp1715:
    000003bc: 	movq	%rbx, %r14
    000003bf: 	movq	0x18(%rsp), %rbx
.Ltmp1681:
    000003c4: 	movq	%rbx, %rax
    000003c7: 	subq	%r14, %rax
    000003ca: 	cmpq	$0x4, %rax
    000003ce: 	jle	.Ltmp1717 # Offset: 974
    000003d0: 	movl	-0x4(%rbx), %eax
    000003d3: 	movq	%r14, %rdi
    000003d6: 	jmp	.Ltmp1718 # Offset: 982
.Ltmp1721:
    000003db: 	movq	0x8(%rsp), %r8
    000003e0: 	movq	%rbx, %r14
.Ltmp1669:
    000003e3: 	movq	%r8, %rax
    000003e6: 	subq	%r14, %rax
    000003e9: 	cmpq	$0x4, %rax
    000003ed: 	jle	.Ltmp1719 # Offset: 1005
    000003f3: 	movl	-0x4(%r8), %eax
    000003f7: 	movq	%r14, %rdi
    000003fa: 	jmp	.Ltmp1720 # Offset: 1018
.Ltmp1717:
    000003ff: 	movq	%rbx, %r15
    00000402: 	movq	0x10(%rsp), %rbx
.Ltmp1675:
    00000407: 	movq	%rbx, %rax
    0000040a: 	subq	%r15, %rax
    0000040d: 	cmpq	$0x4, %rax
    00000411: 	jle	.Ltmp1721 # Offset: 1041
    00000413: 	movl	-0x4(%rbx), %eax
    00000416: 	movq	%r15, %rdi
    00000419: 	jmp	.Ltmp1722 # Offset: 1049
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIPiEEvT_S2_"

Binary Function "_Z13verify_sortedIPmEvT_S1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 124
  State       : disassembled
  Address     : 0xb560
  Size        : 0x3e
  MaxSize     : 0x40
  Offset      : 0xb560
  Section     : .text
  Orc Section : .local.text._Z13verify_sortedIPmEvT_S1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0123:
    00000000: 	endbr64
    00000004: 	addq	$0x8, %rdi
    00000008: 	jmp	.Ltmp1723 # Offset: 8
    0000000a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1725:
    00000010: 	addq	$0x8, %rdi
    00000014: 	movq	-0x10(%rdi), %rax
    00000018: 	cmpq	%rax, -0x8(%rdi)
    0000001c: 	jb	.Ltmp1724 # Offset: 28
.Ltmp1723:
    0000001e: 	cmpq	%rdi, %rsi
    00000021: 	jne	.Ltmp1725 # Offset: 33
    00000023: 	retq # Offset: 35
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp1724:
    00000028: 	movq	(%rdx), %rdx
    0000002b: 	leaq	DATAat0x1d1cf(%rip), %rsi
    00000032: 	movl	$0x1, %edi
    00000037: 	xorl	%eax, %eax
    00000039: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 57
DWARF CFI Instructions:
    <empty>
End of Function "_Z13verify_sortedIPmEvT_S1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13verify_sortedIP9TypeClassImEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 125
  State       : disassembled
  Address     : 0xb5a0
  Size        : 0x3e
  MaxSize     : 0x40
  Offset      : 0xb5a0
  Section     : .text
  Orc Section : .local.text._Z13verify_sortedIP9TypeClassImEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0124:
    00000000: 	endbr64
    00000004: 	addq	$0x8, %rdi
    00000008: 	jmp	.Ltmp1726 # Offset: 8
    0000000a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1728:
    00000010: 	addq	$0x8, %rdi
    00000014: 	movq	-0x10(%rdi), %rax
    00000018: 	cmpq	%rax, -0x8(%rdi)
    0000001c: 	jb	.Ltmp1727 # Offset: 28
.Ltmp1726:
    0000001e: 	cmpq	%rdi, %rsi
    00000021: 	jne	.Ltmp1728 # Offset: 33
    00000023: 	retq # Offset: 35
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp1727:
    00000028: 	movq	(%rdx), %rdx
    0000002b: 	leaq	DATAat0x1d1cf(%rip), %rsi
    00000032: 	movl	$0x1, %edi
    00000037: 	xorl	%eax, %eax
    00000039: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 57
DWARF CFI Instructions:
    <empty>
End of Function "_Z13verify_sortedIP9TypeClassImEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13verify_sortedIP12TypeSubClassImEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 126
  State       : disassembled
  Address     : 0xb5e0
  Size        : 0x3e
  MaxSize     : 0x40
  Offset      : 0xb5e0
  Section     : .text
  Orc Section : .local.text._Z13verify_sortedIP12TypeSubClassImEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0125:
    00000000: 	endbr64
    00000004: 	addq	$0x8, %rdi
    00000008: 	jmp	.Ltmp1729 # Offset: 8
    0000000a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1731:
    00000010: 	addq	$0x8, %rdi
    00000014: 	movq	-0x10(%rdi), %rax
    00000018: 	cmpq	%rax, -0x8(%rdi)
    0000001c: 	jb	.Ltmp1730 # Offset: 28
.Ltmp1729:
    0000001e: 	cmpq	%rdi, %rsi
    00000021: 	jne	.Ltmp1731 # Offset: 33
    00000023: 	retq # Offset: 35
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp1730:
    00000028: 	movq	(%rdx), %rdx
    0000002b: 	leaq	DATAat0x1d1cf(%rip), %rsi
    00000032: 	movl	$0x1, %edi
    00000037: 	xorl	%eax, %eax
    00000039: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 57
DWARF CFI Instructions:
    <empty>
End of Function "_Z13verify_sortedIP12TypeSubClassImEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13verify_sortedIP13TypeSub2ClassImEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 127
  State       : disassembled
  Address     : 0xb620
  Size        : 0x3e
  MaxSize     : 0x40
  Offset      : 0xb620
  Section     : .text
  Orc Section : .local.text._Z13verify_sortedIP13TypeSub2ClassImEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0126:
    00000000: 	endbr64
    00000004: 	addq	$0x8, %rdi
    00000008: 	jmp	.Ltmp1732 # Offset: 8
    0000000a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1734:
    00000010: 	addq	$0x8, %rdi
    00000014: 	movq	-0x10(%rdi), %rax
    00000018: 	cmpq	%rax, -0x8(%rdi)
    0000001c: 	jb	.Ltmp1733 # Offset: 28
.Ltmp1732:
    0000001e: 	cmpq	%rdi, %rsi
    00000021: 	jne	.Ltmp1734 # Offset: 33
    00000023: 	retq # Offset: 35
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp1733:
    00000028: 	movq	(%rdx), %rdx
    0000002b: 	leaq	DATAat0x1d1cf(%rip), %rsi
    00000032: 	movl	$0x1, %edi
    00000037: 	xorl	%eax, %eax
    00000039: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 57
DWARF CFI Instructions:
    <empty>
End of Function "_Z13verify_sortedIP13TypeSub2ClassImEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13verify_sortedIP12DeepSubClassImEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 128
  State       : disassembled
  Address     : 0xb660
  Size        : 0x3e
  MaxSize     : 0x40
  Offset      : 0xb660
  Section     : .text
  Orc Section : .local.text._Z13verify_sortedIP12DeepSubClassImEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0127:
    00000000: 	endbr64
    00000004: 	addq	$0x8, %rdi
    00000008: 	jmp	.Ltmp1735 # Offset: 8
    0000000a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1737:
    00000010: 	addq	$0x8, %rdi
    00000014: 	movq	-0x10(%rdi), %rax
    00000018: 	cmpq	%rax, -0x8(%rdi)
    0000001c: 	jb	.Ltmp1736 # Offset: 28
.Ltmp1735:
    0000001e: 	cmpq	%rdi, %rsi
    00000021: 	jne	.Ltmp1737 # Offset: 33
    00000023: 	retq # Offset: 35
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp1736:
    00000028: 	movq	(%rdx), %rdx
    0000002b: 	leaq	DATAat0x1d1cf(%rip), %rsi
    00000032: 	movl	$0x1, %edi
    00000037: 	xorl	%eax, %eax
    00000039: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 57
DWARF CFI Instructions:
    <empty>
End of Function "_Z13verify_sortedIP12DeepSubClassImEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13verify_sortedIP16TypeVirtualClassImEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 129
  State       : disassembled
  Address     : 0xb6a0
  Size        : 0xaf
  MaxSize     : 0xb0
  Offset      : 0xb6a0
  Section     : .text
  Orc Section : .local.text._Z13verify_sortedIP16TypeVirtualClassImEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0128:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	addq	$0x10, %rdi
    0000000a: 	pushq	%r14
    0000000c: 	movq	%rsi, %r14
    0000000f: 	pushq	%r13
    00000011: 	leaq	_ZN16TypeVirtualClassImEcvmEv(%rip), %r13
    00000018: 	pushq	%r12
    0000001a: 	movq	%rdx, %r12
    0000001d: 	pushq	%rbp
    0000001e: 	pushq	%rbx
    0000001f: 	subq	$0x8, %rsp
    00000023: 	jmp	.Ltmp1738 # Offset: 35
    00000025: 	nopl	(%rax) # Size: 3
.Ltmp1742:
    00000028: 	movq	-0x20(%rbx), %rax
    0000002c: 	movq	-0x8(%rbx), %rbp
    00000030: 	movq	(%rax), %rax
    00000033: 	cmpq	%r13, %rax
    00000036: 	jne	.Ltmp1739 # Offset: 54
.Ltmp1743:
    00000038: 	cmpq	-0x18(%rbx), %rbp
    0000003c: 	jb	.Ltmp1740 # Offset: 60
.Ltmp1744:
    0000003e: 	movq	%rbx, %rdi
.Ltmp1738:
    00000041: 	leaq	-0x10(%rdi), %r15
    00000045: 	cmpq	%rdi, %r14
    00000048: 	je	.Ltmp1741 # Offset: 72
    0000004a: 	movq	(%rdi), %rax
    0000004d: 	leaq	0x10(%rdi), %rbx
    00000051: 	movq	(%rax), %rax
    00000054: 	cmpq	%r13, %rax
    00000057: 	je	.Ltmp1742 # Offset: 87
    00000059: 	callq	*%rax # Offset: 89
    0000005b: 	movq	%rax, %rbp
    0000005e: 	movq	-0x20(%rbx), %rax
    00000062: 	movq	(%rax), %rax
    00000065: 	cmpq	%r13, %rax
    00000068: 	je	.Ltmp1743 # Offset: 104
.Ltmp1739:
    0000006a: 	movq	%r15, %rdi
    0000006d: 	callq	*%rax # Offset: 109
    0000006f: 	cmpq	%rax, %rbp
    00000072: 	jae	.Ltmp1744 # Offset: 114
.Ltmp1740:
    00000074: 	movq	(%r12), %rdx
    00000078: 	addq	$0x8, %rsp
    0000007c: 	leaq	DATAat0x1d1cf(%rip), %rsi
    00000083: 	xorl	%eax, %eax
    00000085: 	popq	%rbx
    00000086: 	movl	$0x1, %edi
    0000008b: 	popq	%rbp
    0000008c: 	popq	%r12
    0000008e: 	popq	%r13
    00000090: 	popq	%r14
    00000092: 	popq	%r15
    00000094: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 148
    00000099: 	nopl	(%rax) # Size: 7
.Ltmp1741:
    000000a0: 	addq	$0x8, %rsp
    000000a4: 	popq	%rbx
    000000a5: 	popq	%rbp
    000000a6: 	popq	%r12
    000000a8: 	popq	%r13
    000000aa: 	popq	%r14
    000000ac: 	popq	%r15
    000000ae: 	retq # Offset: 174
DWARF CFI Instructions:
    <empty>
End of Function "_Z13verify_sortedIP16TypeVirtualClassImEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13verify_sortedIP19TypeVirtualSubClassImEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 130
  State       : disassembled
  Address     : 0xb750
  Size        : 0xaf
  MaxSize     : 0xb0
  Offset      : 0xb750
  Section     : .text
  Orc Section : .local.text._Z13verify_sortedIP19TypeVirtualSubClassImEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0129:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	addq	$0x10, %rdi
    0000000a: 	pushq	%r14
    0000000c: 	movq	%rsi, %r14
    0000000f: 	pushq	%r13
    00000011: 	leaq	_ZN19TypeVirtualSubClassImEcvmEv(%rip), %r13
    00000018: 	pushq	%r12
    0000001a: 	movq	%rdx, %r12
    0000001d: 	pushq	%rbp
    0000001e: 	pushq	%rbx
    0000001f: 	subq	$0x8, %rsp
    00000023: 	jmp	.Ltmp1745 # Offset: 35
    00000025: 	nopl	(%rax) # Size: 3
.Ltmp1749:
    00000028: 	movq	-0x20(%rbx), %rax
    0000002c: 	movq	-0x8(%rbx), %rbp
    00000030: 	movq	(%rax), %rax
    00000033: 	cmpq	%r13, %rax
    00000036: 	jne	.Ltmp1746 # Offset: 54
.Ltmp1750:
    00000038: 	cmpq	-0x18(%rbx), %rbp
    0000003c: 	jb	.Ltmp1747 # Offset: 60
.Ltmp1751:
    0000003e: 	movq	%rbx, %rdi
.Ltmp1745:
    00000041: 	leaq	-0x10(%rdi), %r15
    00000045: 	cmpq	%rdi, %r14
    00000048: 	je	.Ltmp1748 # Offset: 72
    0000004a: 	movq	(%rdi), %rax
    0000004d: 	leaq	0x10(%rdi), %rbx
    00000051: 	movq	(%rax), %rax
    00000054: 	cmpq	%r13, %rax
    00000057: 	je	.Ltmp1749 # Offset: 87
    00000059: 	callq	*%rax # Offset: 89
    0000005b: 	movq	%rax, %rbp
    0000005e: 	movq	-0x20(%rbx), %rax
    00000062: 	movq	(%rax), %rax
    00000065: 	cmpq	%r13, %rax
    00000068: 	je	.Ltmp1750 # Offset: 104
.Ltmp1746:
    0000006a: 	movq	%r15, %rdi
    0000006d: 	callq	*%rax # Offset: 109
    0000006f: 	cmpq	%rax, %rbp
    00000072: 	jae	.Ltmp1751 # Offset: 114
.Ltmp1747:
    00000074: 	movq	(%r12), %rdx
    00000078: 	addq	$0x8, %rsp
    0000007c: 	leaq	DATAat0x1d1cf(%rip), %rsi
    00000083: 	xorl	%eax, %eax
    00000085: 	popq	%rbx
    00000086: 	movl	$0x1, %edi
    0000008b: 	popq	%rbp
    0000008c: 	popq	%r12
    0000008e: 	popq	%r13
    00000090: 	popq	%r14
    00000092: 	popq	%r15
    00000094: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 148
    00000099: 	nopl	(%rax) # Size: 7
.Ltmp1748:
    000000a0: 	addq	$0x8, %rsp
    000000a4: 	popq	%rbx
    000000a5: 	popq	%rbp
    000000a6: 	popq	%r12
    000000a8: 	popq	%r13
    000000aa: 	popq	%r14
    000000ac: 	popq	%r15
    000000ae: 	retq # Offset: 174
DWARF CFI Instructions:
    <empty>
End of Function "_Z13verify_sortedIP19TypeVirtualSubClassImEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13verify_sortedIP14WorkerSubClassImEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 131
  State       : disassembled
  Address     : 0xb800
  Size        : 0xaf
  MaxSize     : 0xb0
  Offset      : 0xb800
  Section     : .text
  Orc Section : .local.text._Z13verify_sortedIP14WorkerSubClassImEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0130:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	addq	$0x10, %rdi
    0000000a: 	pushq	%r14
    0000000c: 	movq	%rsi, %r14
    0000000f: 	pushq	%r13
    00000011: 	leaq	_ZN14WorkerSubClassImEcvmEv(%rip), %r13
    00000018: 	pushq	%r12
    0000001a: 	movq	%rdx, %r12
    0000001d: 	pushq	%rbp
    0000001e: 	pushq	%rbx
    0000001f: 	subq	$0x8, %rsp
    00000023: 	jmp	.Ltmp1752 # Offset: 35
    00000025: 	nopl	(%rax) # Size: 3
.Ltmp1756:
    00000028: 	movq	-0x20(%rbx), %rax
    0000002c: 	movq	-0x8(%rbx), %rbp
    00000030: 	movq	(%rax), %rax
    00000033: 	cmpq	%r13, %rax
    00000036: 	jne	.Ltmp1753 # Offset: 54
.Ltmp1757:
    00000038: 	cmpq	-0x18(%rbx), %rbp
    0000003c: 	jb	.Ltmp1754 # Offset: 60
.Ltmp1758:
    0000003e: 	movq	%rbx, %rdi
.Ltmp1752:
    00000041: 	leaq	-0x10(%rdi), %r15
    00000045: 	cmpq	%rdi, %r14
    00000048: 	je	.Ltmp1755 # Offset: 72
    0000004a: 	movq	(%rdi), %rax
    0000004d: 	leaq	0x10(%rdi), %rbx
    00000051: 	movq	(%rax), %rax
    00000054: 	cmpq	%r13, %rax
    00000057: 	je	.Ltmp1756 # Offset: 87
    00000059: 	callq	*%rax # Offset: 89
    0000005b: 	movq	%rax, %rbp
    0000005e: 	movq	-0x20(%rbx), %rax
    00000062: 	movq	(%rax), %rax
    00000065: 	cmpq	%r13, %rax
    00000068: 	je	.Ltmp1757 # Offset: 104
.Ltmp1753:
    0000006a: 	movq	%r15, %rdi
    0000006d: 	callq	*%rax # Offset: 109
    0000006f: 	cmpq	%rax, %rbp
    00000072: 	jae	.Ltmp1758 # Offset: 114
.Ltmp1754:
    00000074: 	movq	(%r12), %rdx
    00000078: 	addq	$0x8, %rsp
    0000007c: 	leaq	DATAat0x1d1cf(%rip), %rsi
    00000083: 	xorl	%eax, %eax
    00000085: 	popq	%rbx
    00000086: 	movl	$0x1, %edi
    0000008b: 	popq	%rbp
    0000008c: 	popq	%r12
    0000008e: 	popq	%r13
    00000090: 	popq	%r14
    00000092: 	popq	%r15
    00000094: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 148
    00000099: 	nopl	(%rax) # Size: 7
.Ltmp1755:
    000000a0: 	addq	$0x8, %rsp
    000000a4: 	popq	%rbx
    000000a5: 	popq	%rbp
    000000a6: 	popq	%r12
    000000a8: 	popq	%r13
    000000aa: 	popq	%r14
    000000ac: 	popq	%r15
    000000ae: 	retq # Offset: 174
DWARF CFI Instructions:
    <empty>
End of Function "_Z13verify_sortedIP14WorkerSubClassImEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13verify_sortedIP18WorkerDeepSubClassImEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 132
  State       : disassembled
  Address     : 0xb8b0
  Size        : 0xaf
  MaxSize     : 0xb0
  Offset      : 0xb8b0
  Section     : .text
  Orc Section : .local.text._Z13verify_sortedIP18WorkerDeepSubClassImEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0131:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	addq	$0x10, %rdi
    0000000a: 	pushq	%r14
    0000000c: 	movq	%rsi, %r14
    0000000f: 	pushq	%r13
    00000011: 	leaq	_ZN18WorkerDeepSubClassImEcvmEv(%rip), %r13
    00000018: 	pushq	%r12
    0000001a: 	movq	%rdx, %r12
    0000001d: 	pushq	%rbp
    0000001e: 	pushq	%rbx
    0000001f: 	subq	$0x8, %rsp
    00000023: 	jmp	.Ltmp1759 # Offset: 35
    00000025: 	nopl	(%rax) # Size: 3
.Ltmp1763:
    00000028: 	movq	-0x20(%rbx), %rax
    0000002c: 	movq	-0x8(%rbx), %rbp
    00000030: 	movq	(%rax), %rax
    00000033: 	cmpq	%r13, %rax
    00000036: 	jne	.Ltmp1760 # Offset: 54
.Ltmp1764:
    00000038: 	cmpq	-0x18(%rbx), %rbp
    0000003c: 	jb	.Ltmp1761 # Offset: 60
.Ltmp1765:
    0000003e: 	movq	%rbx, %rdi
.Ltmp1759:
    00000041: 	leaq	-0x10(%rdi), %r15
    00000045: 	cmpq	%rdi, %r14
    00000048: 	je	.Ltmp1762 # Offset: 72
    0000004a: 	movq	(%rdi), %rax
    0000004d: 	leaq	0x10(%rdi), %rbx
    00000051: 	movq	(%rax), %rax
    00000054: 	cmpq	%r13, %rax
    00000057: 	je	.Ltmp1763 # Offset: 87
    00000059: 	callq	*%rax # Offset: 89
    0000005b: 	movq	%rax, %rbp
    0000005e: 	movq	-0x20(%rbx), %rax
    00000062: 	movq	(%rax), %rax
    00000065: 	cmpq	%r13, %rax
    00000068: 	je	.Ltmp1764 # Offset: 104
.Ltmp1760:
    0000006a: 	movq	%r15, %rdi
    0000006d: 	callq	*%rax # Offset: 109
    0000006f: 	cmpq	%rax, %rbp
    00000072: 	jae	.Ltmp1765 # Offset: 114
.Ltmp1761:
    00000074: 	movq	(%r12), %rdx
    00000078: 	addq	$0x8, %rsp
    0000007c: 	leaq	DATAat0x1d1cf(%rip), %rsi
    00000083: 	xorl	%eax, %eax
    00000085: 	popq	%rbx
    00000086: 	movl	$0x1, %edi
    0000008b: 	popq	%rbp
    0000008c: 	popq	%r12
    0000008e: 	popq	%r13
    00000090: 	popq	%r14
    00000092: 	popq	%r15
    00000094: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 148
    00000099: 	nopl	(%rax) # Size: 7
.Ltmp1762:
    000000a0: 	addq	$0x8, %rsp
    000000a4: 	popq	%rbx
    000000a5: 	popq	%rbp
    000000a6: 	popq	%r12
    000000a8: 	popq	%r13
    000000aa: 	popq	%r14
    000000ac: 	popq	%r15
    000000ae: 	retq # Offset: 174
DWARF CFI Instructions:
    <empty>
End of Function "_Z13verify_sortedIP18WorkerDeepSubClassImEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13verify_sortedIP15WorkerSubClass3ImEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 133
  State       : disassembled
  Address     : 0xb960
  Size        : 0xaf
  MaxSize     : 0xb0
  Offset      : 0xb960
  Section     : .text
  Orc Section : .local.text._Z13verify_sortedIP15WorkerSubClass3ImEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0132:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	addq	$0x10, %rdi
    0000000a: 	pushq	%r14
    0000000c: 	movq	%rsi, %r14
    0000000f: 	pushq	%r13
    00000011: 	leaq	_ZN15WorkerSubClass3ImEcvmEv(%rip), %r13
    00000018: 	pushq	%r12
    0000001a: 	movq	%rdx, %r12
    0000001d: 	pushq	%rbp
    0000001e: 	pushq	%rbx
    0000001f: 	subq	$0x8, %rsp
    00000023: 	jmp	.Ltmp1766 # Offset: 35
    00000025: 	nopl	(%rax) # Size: 3
.Ltmp1770:
    00000028: 	movq	-0x20(%rbx), %rax
    0000002c: 	movq	-0x8(%rbx), %rbp
    00000030: 	movq	(%rax), %rax
    00000033: 	cmpq	%r13, %rax
    00000036: 	jne	.Ltmp1767 # Offset: 54
.Ltmp1771:
    00000038: 	cmpq	-0x18(%rbx), %rbp
    0000003c: 	jb	.Ltmp1768 # Offset: 60
.Ltmp1772:
    0000003e: 	movq	%rbx, %rdi
.Ltmp1766:
    00000041: 	leaq	-0x10(%rdi), %r15
    00000045: 	cmpq	%rdi, %r14
    00000048: 	je	.Ltmp1769 # Offset: 72
    0000004a: 	movq	(%rdi), %rax
    0000004d: 	leaq	0x10(%rdi), %rbx
    00000051: 	movq	(%rax), %rax
    00000054: 	cmpq	%r13, %rax
    00000057: 	je	.Ltmp1770 # Offset: 87
    00000059: 	callq	*%rax # Offset: 89
    0000005b: 	movq	%rax, %rbp
    0000005e: 	movq	-0x20(%rbx), %rax
    00000062: 	movq	(%rax), %rax
    00000065: 	cmpq	%r13, %rax
    00000068: 	je	.Ltmp1771 # Offset: 104
.Ltmp1767:
    0000006a: 	movq	%r15, %rdi
    0000006d: 	callq	*%rax # Offset: 109
    0000006f: 	cmpq	%rax, %rbp
    00000072: 	jae	.Ltmp1772 # Offset: 114
.Ltmp1768:
    00000074: 	movq	(%r12), %rdx
    00000078: 	addq	$0x8, %rsp
    0000007c: 	leaq	DATAat0x1d1cf(%rip), %rsi
    00000083: 	xorl	%eax, %eax
    00000085: 	popq	%rbx
    00000086: 	movl	$0x1, %edi
    0000008b: 	popq	%rbp
    0000008c: 	popq	%r12
    0000008e: 	popq	%r13
    00000090: 	popq	%r14
    00000092: 	popq	%r15
    00000094: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 148
    00000099: 	nopl	(%rax) # Size: 7
.Ltmp1769:
    000000a0: 	addq	$0x8, %rsp
    000000a4: 	popq	%rbx
    000000a5: 	popq	%rbp
    000000a6: 	popq	%r12
    000000a8: 	popq	%r13
    000000aa: 	popq	%r14
    000000ac: 	popq	%r15
    000000ae: 	retq # Offset: 174
DWARF CFI Instructions:
    <empty>
End of Function "_Z13verify_sortedIP15WorkerSubClass3ImEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_ZN9benchmark9quicksortIPmEEvT_S2_" after disassembly {
  Number      : 134
  State       : disassembled
  Address     : 0xba10
  Size        : 0x43a
  MaxSize     : 0x440
  Offset      : 0xba10
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9quicksortIPmEEvT_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0133:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %rax
    00000009: 	pushq	%r14
    0000000b: 	subq	%rdi, %rax
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x28, %rsp
    00000018: 	movq	%rsi, (%rsp)
    0000001c: 	cmpq	$0x8, %rax
    00000020: 	jle	.Ltmp1773 # Offset: 32
.Ltmp1785:
    00000022: 	movq	(%rdi), %r8
    00000025: 	movq	(%rsp), %r13
    00000029: 	movq	%rdi, %rdx
.Ltmp1778:
    0000002c: 	movq	-0x8(%r13), %rax
    00000030: 	leaq	-0x8(%r13), %rcx
    00000034: 	cmpq	%r8, %rax
    00000037: 	ja	.Ltmp1774 # Offset: 55
    00000039: 	cmpq	%rcx, %rdx
    0000003c: 	jae	.Ltmp1775 # Offset: 60
    0000003e: 	movq	(%rdx), %rsi
    00000041: 	cmpq	%rsi, %r8
    00000044: 	jbe	.Ltmp1776 # Offset: 68
.Ltmp1777:
    00000046: 	movq	0x8(%rdx), %rsi
    0000004a: 	addq	$0x8, %rdx
    0000004e: 	cmpq	%r8, %rsi
    00000051: 	jb	.Ltmp1777 # Offset: 81
    00000053: 	cmpq	%rdx, %rcx
    00000056: 	jbe	.Ltmp1775 # Offset: 86
.Ltmp1776:
    00000058: 	movq	%rsi, (%rcx)
    0000005b: 	movq	%rax, (%rdx)
.Ltmp1774:
    0000005e: 	movq	%rcx, %r13
    00000061: 	jmp	.Ltmp1778 # Offset: 97
.Ltmp1773:
    00000063: 	addq	$0x28, %rsp
    00000067: 	popq	%rbx
    00000068: 	popq	%rbp
    00000069: 	popq	%r12
    0000006b: 	popq	%r13
    0000006d: 	popq	%r14
    0000006f: 	popq	%r15
    00000071: 	retq # Offset: 113
.Ltmp1775:
    00000072: 	movq	%r13, %rdx
    00000075: 	movq	%r13, %r8
    00000078: 	subq	%rdi, %rdx
    0000007b: 	cmpq	$0x8, %rdx
    0000007f: 	jle	.Ltmp1779 # Offset: 127
.Ltmp1837:
    00000081: 	movq	(%rdi), %r9
    00000084: 	movq	%r8, %r14
    00000087: 	movq	%rdi, %rdx
.Ltmp1784:
    0000008a: 	leaq	-0x8(%r14), %rcx
    0000008e: 	cmpq	%rax, %r9
    00000091: 	jb	.Ltmp1780 # Offset: 145
    00000093: 	cmpq	%rdx, %rcx
    00000096: 	jbe	.Ltmp1781 # Offset: 150
    00000098: 	movq	(%rdx), %rsi
    0000009b: 	cmpq	%rsi, %r9
    0000009e: 	jbe	.Ltmp1782 # Offset: 158
.Ltmp1783:
    000000a0: 	movq	0x8(%rdx), %rsi
    000000a4: 	addq	$0x8, %rdx
    000000a8: 	cmpq	%rsi, %r9
    000000ab: 	ja	.Ltmp1783 # Offset: 171
    000000ad: 	cmpq	%rdx, %rcx
    000000b0: 	jbe	.Ltmp1781 # Offset: 176
.Ltmp1782:
    000000b2: 	movq	%rsi, (%rcx)
    000000b5: 	movq	%rax, (%rdx)
.Ltmp1780:
    000000b8: 	movq	-0x8(%rcx), %rax
    000000bc: 	movq	%rcx, %r14
    000000bf: 	jmp	.Ltmp1784 # Offset: 191
.Ltmp1836:
    000000c1: 	movq	%r8, %r13
.Ltmp1779:
    000000c4: 	movq	(%rsp), %rax
    000000c8: 	subq	%r13, %rax
    000000cb: 	cmpq	$0x8, %rax
    000000cf: 	jle	.Ltmp1773 # Offset: 207
    000000d1: 	movq	%r13, %rdi
    000000d4: 	jmp	.Ltmp1785 # Offset: 212
.Ltmp1781:
    000000d9: 	movq	%r14, %rdx
    000000dc: 	subq	%rdi, %rdx
    000000df: 	cmpq	$0x8, %rdx
    000000e3: 	jle	.Ltmp1786 # Offset: 227
    000000e9: 	movq	%r8, 0x8(%rsp)
    000000ee: 	movq	%r14, %rbx
.Ltmp1839:
    000000f1: 	movq	(%rdi), %r9
    000000f4: 	movq	%rbx, %r15
    000000f7: 	movq	%rdi, %rdx
.Ltmp1791:
    000000fa: 	leaq	-0x8(%r15), %rcx
    000000fe: 	cmpq	%r9, %rax
    00000101: 	ja	.Ltmp1787 # Offset: 257
    00000103: 	cmpq	%rdx, %rcx
    00000106: 	jbe	.Ltmp1788 # Offset: 262
    00000108: 	movq	(%rdx), %rsi
    0000010b: 	cmpq	%rsi, %r9
    0000010e: 	jbe	.Ltmp1789 # Offset: 270
.Ltmp1790:
    00000110: 	movq	0x8(%rdx), %rsi
    00000114: 	addq	$0x8, %rdx
    00000118: 	cmpq	%rsi, %r9
    0000011b: 	ja	.Ltmp1790 # Offset: 283
    0000011d: 	cmpq	%rdx, %rcx
    00000120: 	jbe	.Ltmp1788 # Offset: 288
.Ltmp1789:
    00000122: 	movq	%rsi, (%rcx)
    00000125: 	movq	%rax, (%rdx)
.Ltmp1787:
    00000128: 	movq	-0x8(%rcx), %rax
    0000012c: 	movq	%rcx, %r15
    0000012f: 	jmp	.Ltmp1791 # Offset: 303
.Ltmp1788:
    00000131: 	movq	%r15, %rdx
    00000134: 	subq	%rdi, %rdx
    00000137: 	cmpq	$0x8, %rdx
    0000013b: 	jle	.Ltmp1792 # Offset: 315
    00000141: 	movq	%rbx, 0x10(%rsp)
    00000146: 	movq	%r15, %rbx
.Ltmp1835:
    00000149: 	movq	(%rdi), %r9
    0000014c: 	movq	%rbx, %r14
    0000014f: 	movq	%rdi, %rdx
.Ltmp1797:
    00000152: 	leaq	-0x8(%r14), %rcx
    00000156: 	cmpq	%rax, %r9
    00000159: 	jb	.Ltmp1793 # Offset: 345
    0000015b: 	cmpq	%rdx, %rcx
    0000015e: 	jbe	.Ltmp1794 # Offset: 350
    00000160: 	movq	(%rdx), %rsi
    00000163: 	cmpq	%rsi, %r9
    00000166: 	jbe	.Ltmp1795 # Offset: 358
.Ltmp1796:
    00000168: 	movq	0x8(%rdx), %rsi
    0000016c: 	addq	$0x8, %rdx
    00000170: 	cmpq	%rsi, %r9
    00000173: 	ja	.Ltmp1796 # Offset: 371
    00000175: 	cmpq	%rdx, %rcx
    00000178: 	jbe	.Ltmp1794 # Offset: 376
.Ltmp1795:
    0000017a: 	movq	%rsi, (%rcx)
    0000017d: 	movq	%rax, (%rdx)
.Ltmp1793:
    00000180: 	movq	-0x8(%rcx), %rax
    00000184: 	movq	%rcx, %r14
    00000187: 	jmp	.Ltmp1797 # Offset: 391
.Ltmp1794:
    00000189: 	movq	%r14, %rdx
    0000018c: 	subq	%rdi, %rdx
    0000018f: 	cmpq	$0x8, %rdx
    00000193: 	jle	.Ltmp1798 # Offset: 403
    00000199: 	movq	%rbx, 0x18(%rsp)
    0000019e: 	movq	%r14, %rbx
.Ltmp1833:
    000001a1: 	movq	(%rdi), %r9
    000001a4: 	movq	%rbx, %r14
    000001a7: 	movq	%rdi, %rdx
.Ltmp1803:
    000001aa: 	leaq	-0x8(%r14), %rcx
    000001ae: 	cmpq	%rax, %r9
    000001b1: 	jb	.Ltmp1799 # Offset: 433
    000001b3: 	cmpq	%rdx, %rcx
    000001b6: 	jbe	.Ltmp1800 # Offset: 438
    000001b8: 	movq	(%rdx), %rsi
    000001bb: 	cmpq	%rsi, %r9
    000001be: 	jbe	.Ltmp1801 # Offset: 446
.Ltmp1802:
    000001c0: 	movq	0x8(%rdx), %rsi
    000001c4: 	addq	$0x8, %rdx
    000001c8: 	cmpq	%rsi, %r9
    000001cb: 	ja	.Ltmp1802 # Offset: 459
    000001cd: 	cmpq	%rdx, %rcx
    000001d0: 	jbe	.Ltmp1800 # Offset: 464
.Ltmp1801:
    000001d2: 	movq	%rsi, (%rcx)
    000001d5: 	movq	%rax, (%rdx)
.Ltmp1799:
    000001d8: 	movq	-0x8(%rcx), %rax
    000001dc: 	movq	%rcx, %r14
    000001df: 	jmp	.Ltmp1803 # Offset: 479
.Ltmp1800:
    000001e1: 	movq	%r14, %rdx
    000001e4: 	subq	%rdi, %rdx
    000001e7: 	cmpq	$0x8, %rdx
    000001eb: 	jle	.Ltmp1804 # Offset: 491
.Ltmp1831:
    000001f1: 	movq	(%rdi), %r8
    000001f4: 	movq	%r14, %r15
    000001f7: 	movq	%rdi, %rdx
.Ltmp1809:
    000001fa: 	leaq	-0x8(%r15), %rcx
    000001fe: 	cmpq	%rax, %r8
    00000201: 	jb	.Ltmp1805 # Offset: 513
    00000203: 	cmpq	%rdx, %rcx
    00000206: 	jbe	.Ltmp1806 # Offset: 518
    00000208: 	movq	(%rdx), %rsi
    0000020b: 	cmpq	%rsi, %r8
    0000020e: 	jbe	.Ltmp1807 # Offset: 526
.Ltmp1808:
    00000210: 	movq	0x8(%rdx), %rsi
    00000214: 	addq	$0x8, %rdx
    00000218: 	cmpq	%rsi, %r8
    0000021b: 	ja	.Ltmp1808 # Offset: 539
    0000021d: 	cmpq	%rdx, %rcx
    00000220: 	jbe	.Ltmp1806 # Offset: 544
.Ltmp1807:
    00000222: 	movq	%rsi, (%rcx)
    00000225: 	movq	%rax, (%rdx)
.Ltmp1805:
    00000228: 	movq	-0x8(%rcx), %rax
    0000022c: 	movq	%rcx, %r15
    0000022f: 	jmp	.Ltmp1809 # Offset: 559
.Ltmp1806:
    00000231: 	movq	%r15, %rdx
    00000234: 	subq	%rdi, %rdx
    00000237: 	cmpq	$0x8, %rdx
    0000023b: 	jle	.Ltmp1810 # Offset: 571
.Ltmp1830:
    00000241: 	movq	(%rdi), %r8
    00000244: 	movq	%r15, %r12
    00000247: 	movq	%rdi, %rdx
    0000024a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1828:
    00000250: 	leaq	-0x8(%r12), %rsi
    00000255: 	cmpq	%rax, %r8
    00000258: 	jb	.Ltmp1811 # Offset: 600
    0000025e: 	cmpq	%rdx, %rsi
    00000261: 	jbe	.Ltmp1812 # Offset: 609
    00000263: 	movq	(%rdx), %rcx
    00000266: 	cmpq	%rcx, %r8
    00000269: 	jbe	.Ltmp1813 # Offset: 617
    0000026f: 	nop # Size: 1
.Ltmp1814:
    00000270: 	movq	0x8(%rdx), %rcx
    00000274: 	addq	$0x8, %rdx
    00000278: 	cmpq	%rcx, %r8
    0000027b: 	ja	.Ltmp1814 # Offset: 635
    0000027d: 	cmpq	%rdx, %rsi
    00000280: 	ja	.Ltmp1813 # Offset: 640
.Ltmp1812:
    00000286: 	movq	%r12, %rdx
    00000289: 	subq	%rdi, %rdx
    0000028c: 	cmpq	$0x8, %rdx
    00000290: 	jle	.Ltmp1815 # Offset: 656
.Ltmp1827:
    00000296: 	movq	(%rdi), %rsi
    00000299: 	movq	%r12, %rbp
    0000029c: 	movq	%rdi, %rdx
    0000029f: 	nop # Size: 1
.Ltmp1826:
    000002a0: 	leaq	-0x8(%rbp), %rcx
    000002a4: 	cmpq	%rsi, %rax
    000002a7: 	ja	.Ltmp1816 # Offset: 679
    000002ad: 	cmpq	%rdx, %rcx
    000002b0: 	jbe	.Ltmp1817 # Offset: 688
    000002b2: 	movq	(%rdx), %r8
    000002b5: 	cmpq	%r8, %rsi
    000002b8: 	jbe	.Ltmp1818 # Offset: 696
    000002be: 	nop # Size: 2
.Ltmp1819:
    000002c0: 	movq	0x8(%rdx), %r8
    000002c4: 	addq	$0x8, %rdx
    000002c8: 	cmpq	%r8, %rsi
    000002cb: 	ja	.Ltmp1819 # Offset: 715
    000002cd: 	cmpq	%rdx, %rcx
    000002d0: 	ja	.Ltmp1818 # Offset: 720
.Ltmp1817:
    000002d2: 	movq	%rbp, %rax
    000002d5: 	subq	%rdi, %rax
    000002d8: 	cmpq	$0x8, %rax
    000002dc: 	jle	.Ltmp1820 # Offset: 732
.Ltmp1825:
    000002de: 	movq	(%rdi), %rcx
    000002e1: 	movq	%rbp, %r13
    000002e4: 	movq	%rdi, %rax
    000002e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1829:
    000002f0: 	movq	-0x8(%r13), %r8
    000002f4: 	leaq	-0x8(%r13), %rsi
    000002f8: 	cmpq	%r8, %rcx
    000002fb: 	jb	.Ltmp1821 # Offset: 763
    00000301: 	cmpq	%rax, %rsi
    00000304: 	jbe	.Ltmp1822 # Offset: 772
    00000306: 	movq	(%rax), %rdx
    00000309: 	cmpq	%rdx, %rcx
    0000030c: 	jbe	.Ltmp1823 # Offset: 780
    0000030e: 	nop # Size: 2
.Ltmp1824:
    00000310: 	movq	0x8(%rax), %rdx
    00000314: 	addq	$0x8, %rax
    00000318: 	cmpq	%rdx, %rcx
    0000031b: 	ja	.Ltmp1824 # Offset: 795
    0000031d: 	cmpq	%rax, %rsi
    00000320: 	ja	.Ltmp1823 # Offset: 800
.Ltmp1822:
    00000322: 	movq	%r13, %rsi
    00000325: 	callq	_ZN9benchmark9quicksortIPmEEvT_S2_ # Offset: 805
    0000032a: 	movq	%rbp, %rax
    0000032d: 	subq	%r13, %rax
    00000330: 	cmpq	$0x8, %rax
    00000334: 	jle	.Ltmp1820 # Offset: 820
    00000336: 	movq	%r13, %rdi
    00000339: 	jmp	.Ltmp1825 # Offset: 825
.Ltmp1818:
    0000033b: 	movq	%r8, (%rcx)
    0000033e: 	movq	%rax, (%rdx)
.Ltmp1816:
    00000341: 	movq	-0x8(%rcx), %rax
    00000345: 	movq	%rcx, %rbp
    00000348: 	jmp	.Ltmp1826 # Offset: 840
.Ltmp1820:
    0000034d: 	movq	%r12, %rax
    00000350: 	subq	%rbp, %rax
    00000353: 	cmpq	$0x8, %rax
    00000357: 	jle	.Ltmp1815 # Offset: 855
    00000359: 	movq	-0x8(%r12), %rax
    0000035e: 	movq	%rbp, %rdi
    00000361: 	jmp	.Ltmp1827 # Offset: 865
.Ltmp1813:
    00000366: 	movq	%rcx, (%rsi)
    00000369: 	movq	%rax, (%rdx)
.Ltmp1811:
    0000036c: 	movq	-0x8(%rsi), %rax
    00000370: 	movq	%rsi, %r12
    00000373: 	jmp	.Ltmp1828 # Offset: 883
    00000378: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1823:
    00000380: 	movq	%rdx, (%rsi)
    00000383: 	movq	%r8, (%rax)
.Ltmp1821:
    00000386: 	movq	%rsi, %r13
    00000389: 	jmp	.Ltmp1829 # Offset: 905
.Ltmp1815:
    0000038e: 	movq	%r15, %rax
    00000391: 	subq	%r12, %rax
    00000394: 	cmpq	$0x8, %rax
    00000398: 	jle	.Ltmp1810 # Offset: 920
    0000039a: 	movq	-0x8(%r15), %rax
    0000039e: 	movq	%r12, %rdi
    000003a1: 	jmp	.Ltmp1830 # Offset: 929
.Ltmp1810:
    000003a6: 	movq	%r14, %rax
    000003a9: 	subq	%r15, %rax
    000003ac: 	cmpq	$0x8, %rax
    000003b0: 	jle	.Ltmp1804 # Offset: 944
    000003b2: 	movq	-0x8(%r14), %rax
    000003b6: 	movq	%r15, %rdi
    000003b9: 	jmp	.Ltmp1831 # Offset: 953
.Ltmp1804:
    000003be: 	movq	%rbx, %rax
    000003c1: 	subq	%r14, %rax
    000003c4: 	cmpq	$0x8, %rax
    000003c8: 	jle	.Ltmp1832 # Offset: 968
    000003ca: 	movq	-0x8(%rbx), %rax
    000003ce: 	movq	%r14, %rdi
    000003d1: 	jmp	.Ltmp1833 # Offset: 977
.Ltmp1832:
    000003d6: 	movq	%rbx, %r14
    000003d9: 	movq	0x18(%rsp), %rbx
.Ltmp1798:
    000003de: 	movq	%rbx, %rax
    000003e1: 	subq	%r14, %rax
    000003e4: 	cmpq	$0x8, %rax
    000003e8: 	jle	.Ltmp1834 # Offset: 1000
    000003ea: 	movq	-0x8(%rbx), %rax
    000003ee: 	movq	%r14, %rdi
    000003f1: 	jmp	.Ltmp1835 # Offset: 1009
.Ltmp1838:
    000003f6: 	movq	0x8(%rsp), %r8
    000003fb: 	movq	%rbx, %r14
.Ltmp1786:
    000003fe: 	movq	%r8, %rax
    00000401: 	subq	%r14, %rax
    00000404: 	cmpq	$0x8, %rax
    00000408: 	jle	.Ltmp1836 # Offset: 1032
    0000040e: 	movq	-0x8(%r8), %rax
    00000412: 	movq	%r14, %rdi
    00000415: 	jmp	.Ltmp1837 # Offset: 1045
.Ltmp1834:
    0000041a: 	movq	%rbx, %r15
    0000041d: 	movq	0x10(%rsp), %rbx
.Ltmp1792:
    00000422: 	movq	%rbx, %rax
    00000425: 	subq	%r15, %rax
    00000428: 	cmpq	$0x8, %rax
    0000042c: 	jle	.Ltmp1838 # Offset: 1068
    0000042e: 	movq	-0x8(%rbx), %rax
    00000432: 	movq	%r15, %rdi
    00000435: 	jmp	.Ltmp1839 # Offset: 1077
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9quicksortIPmEEvT_S2_"

Binary Function "_ZN9benchmark9__sift_inIPddEEvlT_lT0_" after disassembly {
  Number      : 135
  State       : disassembled
  Address     : 0xbe50
  Size        : 0x107
  MaxSize     : 0x110
  Offset      : 0xbe50
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIPddEEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0134:
    00000000: 	endbr64
    00000004: 	leaq	0x2(%rdx,%rdx), %rax
    00000009: 	movq	%rdi, %r9
    0000000c: 	movq	%rsi, %rcx
    0000000f: 	movq	%rdx, %r8
    00000012: 	cmpq	%rdi, %rax
    00000015: 	jge	.Ltmp1840 # Offset: 21
    0000001b: 	movq	%rdx, %rdi
    0000001e: 	jmp	.Ltmp1841 # Offset: 30
.Ltmp1843:
    00000020: 	leaq	-0x1(%rax), %r10
    00000024: 	leaq	(%rax,%rax), %rsi
    00000028: 	movsd	%xmm2, (%rcx,%rdi,8)
    0000002d: 	leaq	(%rcx,%r10,8), %rdx
    00000031: 	movq	%r10, %rax
    00000034: 	cmpq	%rsi, %r9
    00000037: 	jle	.Ltmp1842 # Offset: 55
.Ltmp1844:
    00000039: 	movq	%rax, %rdi
    0000003c: 	movq	%rsi, %rax
.Ltmp1841:
    0000003f: 	leaq	(,%rax,8), %rdx
    00000047: 	movsd	-0x8(%rcx,%rdx), %xmm2
    0000004d: 	addq	%rcx, %rdx
    00000050: 	movsd	(%rdx), %xmm1
    00000054: 	comisd	%xmm2, %xmm1
    00000058: 	jbe	.Ltmp1843 # Offset: 88
    0000005a: 	leaq	0x2(%rax,%rax), %rsi
    0000005f: 	movsd	%xmm1, (%rcx,%rdi,8)
    00000064: 	cmpq	%rsi, %r9
    00000067: 	jg	.Ltmp1844 # Offset: 103
.Ltmp1842:
    00000069: 	cmpq	%rsi, %r9
    0000006c: 	je	.Ltmp1845 # Offset: 108
.Ltmp1850:
    00000072: 	leaq	-0x1(%rax), %rdi
    00000076: 	movq	%rdi, %rsi
    00000079: 	shrq	$0x3f, %rsi
    0000007d: 	addq	%rdi, %rsi
    00000080: 	sarq	%rsi
    00000083: 	cmpq	%r8, %rax
    00000086: 	jg	.Ltmp1846 # Offset: 134
    00000088: 	jmp	.Ltmp1847 # Offset: 136
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1849:
    00000090: 	movsd	%xmm1, (%rdx)
    00000094: 	leaq	-0x1(%rsi), %rdx
    00000098: 	movq	%rdx, %rax
    0000009b: 	shrq	$0x3f, %rax
    0000009f: 	addq	%rdx, %rax
    000000a2: 	sarq	%rax
    000000a5: 	movq	%rax, %rdx
    000000a8: 	movq	%rsi, %rax
    000000ab: 	cmpq	%rsi, %r8
    000000ae: 	jge	.Ltmp1848 # Offset: 174
    000000b0: 	movq	%rdx, %rsi
.Ltmp1846:
    000000b3: 	leaq	(%rcx,%rsi,8), %rdi
    000000b7: 	leaq	(%rcx,%rax,8), %rdx
    000000bb: 	movsd	(%rdi), %xmm1
    000000bf: 	comisd	%xmm1, %xmm0
    000000c3: 	ja	.Ltmp1849 # Offset: 195
.Ltmp1847:
    000000c5: 	movsd	%xmm0, (%rdx)
    000000c9: 	retq # Offset: 201
    000000ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1848:
    000000d0: 	movq	%rdi, %rdx
    000000d3: 	movsd	%xmm0, (%rdx)
    000000d7: 	retq # Offset: 215
    000000d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1840:
    000000e0: 	leaq	(%rsi,%rdx,8), %rdx
    000000e4: 	jne	.Ltmp1847 # Offset: 228
    000000e6: 	movq	%rax, %rsi
    000000e9: 	nopl	(%rax) # Size: 7
.Ltmp1845:
    000000f0: 	movsd	-0x8(%rcx,%rsi,8), %xmm1
    000000f6: 	leaq	-0x1(%rsi), %rax
    000000fa: 	movsd	%xmm1, (%rdx)
    000000fe: 	leaq	(%rcx,%rax,8), %rdx
    00000102: 	jmp	.Ltmp1850 # Offset: 258
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIPddEEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inIP9TypeClassIdES2_EEvlT_lT0_" after disassembly {
  Number      : 136
  State       : disassembled
  Address     : 0xbf60
  Size        : 0x107
  MaxSize     : 0x110
  Offset      : 0xbf60
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIP9TypeClassIdES2_EEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0135:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	leaq	0x2(%rdx,%rdx), %rax
    0000000c: 	movq	%rsi, %rdi
    0000000f: 	movq	%rdx, %r8
    00000012: 	cmpq	%r9, %rax
    00000015: 	jge	.Ltmp1851 # Offset: 21
    0000001b: 	movq	%rdx, %rsi
    0000001e: 	jmp	.Ltmp1852 # Offset: 30
.Ltmp1854:
    00000020: 	leaq	0x2(%rax,%rax), %rcx
    00000025: 	movsd	%xmm1, (%rdi,%rsi,8)
    0000002a: 	cmpq	%rcx, %r9
    0000002d: 	jle	.Ltmp1853 # Offset: 45
.Ltmp1855:
    0000002f: 	movq	%rax, %rsi
    00000032: 	movq	%rcx, %rax
.Ltmp1852:
    00000035: 	leaq	(,%rax,8), %rdx
    0000003d: 	leaq	-0x8(%rdi,%rdx), %rcx
    00000042: 	addq	%rdi, %rdx
    00000045: 	movsd	(%rdx), %xmm1
    00000049: 	comisd	(%rcx), %xmm1
    0000004d: 	ja	.Ltmp1854 # Offset: 77
    0000004f: 	movsd	(%rcx), %xmm1
    00000053: 	leaq	-0x1(%rax), %r10
    00000057: 	leaq	(%rax,%rax), %rcx
    0000005b: 	leaq	(%rdi,%r10,8), %rdx
    0000005f: 	movq	%r10, %rax
    00000062: 	movsd	%xmm1, (%rdi,%rsi,8)
    00000067: 	cmpq	%r9, %rcx
    0000006a: 	jl	.Ltmp1855 # Offset: 106
.Ltmp1853:
    0000006c: 	cmpq	%r9, %rcx
    0000006f: 	je	.Ltmp1856 # Offset: 111
.Ltmp1861:
    00000071: 	leaq	-0x1(%rax), %rsi
    00000075: 	movq	%rsi, %rcx
    00000078: 	shrq	$0x3f, %rcx
    0000007c: 	addq	%rsi, %rcx
    0000007f: 	sarq	%rcx
    00000082: 	cmpq	%r8, %rax
    00000085: 	jg	.Ltmp1857 # Offset: 133
    00000087: 	jmp	.Ltmp1858 # Offset: 135
    00000089: 	nopl	(%rax) # Size: 7
.Ltmp1860:
    00000090: 	movsd	(%rsi), %xmm1
    00000094: 	movsd	%xmm1, (%rdx)
    00000098: 	leaq	-0x1(%rcx), %rdx
    0000009c: 	movq	%rdx, %rax
    0000009f: 	shrq	$0x3f, %rax
    000000a3: 	addq	%rdx, %rax
    000000a6: 	sarq	%rax
    000000a9: 	movq	%rax, %rdx
    000000ac: 	movq	%rcx, %rax
    000000af: 	cmpq	%rcx, %r8
    000000b2: 	jge	.Ltmp1859 # Offset: 178
    000000b4: 	movq	%rdx, %rcx
.Ltmp1857:
    000000b7: 	leaq	(%rdi,%rcx,8), %rsi
    000000bb: 	leaq	(%rdi,%rax,8), %rdx
    000000bf: 	comisd	(%rsi), %xmm0
    000000c3: 	ja	.Ltmp1860 # Offset: 195
.Ltmp1858:
    000000c5: 	movsd	%xmm0, (%rdx)
    000000c9: 	retq # Offset: 201
    000000ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1859:
    000000d0: 	movq	%rsi, %rdx
    000000d3: 	movsd	%xmm0, (%rdx)
    000000d7: 	retq # Offset: 215
    000000d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1851:
    000000e0: 	leaq	(%rsi,%rdx,8), %rdx
    000000e4: 	jne	.Ltmp1858 # Offset: 228
    000000e6: 	movq	%rax, %rcx
    000000e9: 	nopl	(%rax) # Size: 7
.Ltmp1856:
    000000f0: 	movsd	-0x8(%rdi,%rcx,8), %xmm1
    000000f6: 	leaq	-0x1(%rcx), %rax
    000000fa: 	movsd	%xmm1, (%rdx)
    000000fe: 	leaq	(%rdi,%rax,8), %rdx
    00000102: 	jmp	.Ltmp1861 # Offset: 258
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIP9TypeClassIdES2_EEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inIP12TypeSubClassIdES2_EEvlT_lT0_" after disassembly {
  Number      : 137
  State       : disassembled
  Address     : 0xc070
  Size        : 0x107
  MaxSize     : 0x110
  Offset      : 0xc070
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIP12TypeSubClassIdES2_EEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0136:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	leaq	0x2(%rdx,%rdx), %rax
    0000000c: 	movq	%rsi, %rdi
    0000000f: 	movq	%rdx, %r8
    00000012: 	cmpq	%r9, %rax
    00000015: 	jge	.Ltmp1862 # Offset: 21
    0000001b: 	movq	%rdx, %rsi
    0000001e: 	jmp	.Ltmp1863 # Offset: 30
.Ltmp1865:
    00000020: 	leaq	0x2(%rax,%rax), %rcx
    00000025: 	movsd	%xmm1, (%rdi,%rsi,8)
    0000002a: 	cmpq	%rcx, %r9
    0000002d: 	jle	.Ltmp1864 # Offset: 45
.Ltmp1866:
    0000002f: 	movq	%rax, %rsi
    00000032: 	movq	%rcx, %rax
.Ltmp1863:
    00000035: 	leaq	(,%rax,8), %rdx
    0000003d: 	leaq	-0x8(%rdi,%rdx), %rcx
    00000042: 	addq	%rdi, %rdx
    00000045: 	movsd	(%rdx), %xmm1
    00000049: 	comisd	(%rcx), %xmm1
    0000004d: 	ja	.Ltmp1865 # Offset: 77
    0000004f: 	movsd	(%rcx), %xmm1
    00000053: 	leaq	-0x1(%rax), %r10
    00000057: 	leaq	(%rax,%rax), %rcx
    0000005b: 	leaq	(%rdi,%r10,8), %rdx
    0000005f: 	movq	%r10, %rax
    00000062: 	movsd	%xmm1, (%rdi,%rsi,8)
    00000067: 	cmpq	%r9, %rcx
    0000006a: 	jl	.Ltmp1866 # Offset: 106
.Ltmp1864:
    0000006c: 	cmpq	%r9, %rcx
    0000006f: 	je	.Ltmp1867 # Offset: 111
.Ltmp1872:
    00000071: 	leaq	-0x1(%rax), %rsi
    00000075: 	movq	%rsi, %rcx
    00000078: 	shrq	$0x3f, %rcx
    0000007c: 	addq	%rsi, %rcx
    0000007f: 	sarq	%rcx
    00000082: 	cmpq	%r8, %rax
    00000085: 	jg	.Ltmp1868 # Offset: 133
    00000087: 	jmp	.Ltmp1869 # Offset: 135
    00000089: 	nopl	(%rax) # Size: 7
.Ltmp1871:
    00000090: 	movsd	(%rsi), %xmm1
    00000094: 	movsd	%xmm1, (%rdx)
    00000098: 	leaq	-0x1(%rcx), %rdx
    0000009c: 	movq	%rdx, %rax
    0000009f: 	shrq	$0x3f, %rax
    000000a3: 	addq	%rdx, %rax
    000000a6: 	sarq	%rax
    000000a9: 	movq	%rax, %rdx
    000000ac: 	movq	%rcx, %rax
    000000af: 	cmpq	%rcx, %r8
    000000b2: 	jge	.Ltmp1870 # Offset: 178
    000000b4: 	movq	%rdx, %rcx
.Ltmp1868:
    000000b7: 	leaq	(%rdi,%rcx,8), %rsi
    000000bb: 	leaq	(%rdi,%rax,8), %rdx
    000000bf: 	comisd	(%rsi), %xmm0
    000000c3: 	ja	.Ltmp1871 # Offset: 195
.Ltmp1869:
    000000c5: 	movsd	%xmm0, (%rdx)
    000000c9: 	retq # Offset: 201
    000000ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1870:
    000000d0: 	movq	%rsi, %rdx
    000000d3: 	movsd	%xmm0, (%rdx)
    000000d7: 	retq # Offset: 215
    000000d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1862:
    000000e0: 	leaq	(%rsi,%rdx,8), %rdx
    000000e4: 	jne	.Ltmp1869 # Offset: 228
    000000e6: 	movq	%rax, %rcx
    000000e9: 	nopl	(%rax) # Size: 7
.Ltmp1867:
    000000f0: 	movsd	-0x8(%rdi,%rcx,8), %xmm1
    000000f6: 	leaq	-0x1(%rcx), %rax
    000000fa: 	movsd	%xmm1, (%rdx)
    000000fe: 	leaq	(%rdi,%rax,8), %rdx
    00000102: 	jmp	.Ltmp1872 # Offset: 258
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIP12TypeSubClassIdES2_EEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inIP13TypeSub2ClassIdES2_EEvlT_lT0_" after disassembly {
  Number      : 138
  State       : disassembled
  Address     : 0xc180
  Size        : 0x107
  MaxSize     : 0x110
  Offset      : 0xc180
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIP13TypeSub2ClassIdES2_EEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0137:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	leaq	0x2(%rdx,%rdx), %rax
    0000000c: 	movq	%rsi, %rdi
    0000000f: 	movq	%rdx, %r8
    00000012: 	cmpq	%r9, %rax
    00000015: 	jge	.Ltmp1873 # Offset: 21
    0000001b: 	movq	%rdx, %rsi
    0000001e: 	jmp	.Ltmp1874 # Offset: 30
.Ltmp1876:
    00000020: 	leaq	0x2(%rax,%rax), %rcx
    00000025: 	movsd	%xmm1, (%rdi,%rsi,8)
    0000002a: 	cmpq	%rcx, %r9
    0000002d: 	jle	.Ltmp1875 # Offset: 45
.Ltmp1877:
    0000002f: 	movq	%rax, %rsi
    00000032: 	movq	%rcx, %rax
.Ltmp1874:
    00000035: 	leaq	(,%rax,8), %rdx
    0000003d: 	leaq	-0x8(%rdi,%rdx), %rcx
    00000042: 	addq	%rdi, %rdx
    00000045: 	movsd	(%rdx), %xmm1
    00000049: 	comisd	(%rcx), %xmm1
    0000004d: 	ja	.Ltmp1876 # Offset: 77
    0000004f: 	movsd	(%rcx), %xmm1
    00000053: 	leaq	-0x1(%rax), %r10
    00000057: 	leaq	(%rax,%rax), %rcx
    0000005b: 	leaq	(%rdi,%r10,8), %rdx
    0000005f: 	movq	%r10, %rax
    00000062: 	movsd	%xmm1, (%rdi,%rsi,8)
    00000067: 	cmpq	%r9, %rcx
    0000006a: 	jl	.Ltmp1877 # Offset: 106
.Ltmp1875:
    0000006c: 	cmpq	%r9, %rcx
    0000006f: 	je	.Ltmp1878 # Offset: 111
.Ltmp1883:
    00000071: 	leaq	-0x1(%rax), %rsi
    00000075: 	movq	%rsi, %rcx
    00000078: 	shrq	$0x3f, %rcx
    0000007c: 	addq	%rsi, %rcx
    0000007f: 	sarq	%rcx
    00000082: 	cmpq	%r8, %rax
    00000085: 	jg	.Ltmp1879 # Offset: 133
    00000087: 	jmp	.Ltmp1880 # Offset: 135
    00000089: 	nopl	(%rax) # Size: 7
.Ltmp1882:
    00000090: 	movsd	(%rsi), %xmm1
    00000094: 	movsd	%xmm1, (%rdx)
    00000098: 	leaq	-0x1(%rcx), %rdx
    0000009c: 	movq	%rdx, %rax
    0000009f: 	shrq	$0x3f, %rax
    000000a3: 	addq	%rdx, %rax
    000000a6: 	sarq	%rax
    000000a9: 	movq	%rax, %rdx
    000000ac: 	movq	%rcx, %rax
    000000af: 	cmpq	%rcx, %r8
    000000b2: 	jge	.Ltmp1881 # Offset: 178
    000000b4: 	movq	%rdx, %rcx
.Ltmp1879:
    000000b7: 	leaq	(%rdi,%rcx,8), %rsi
    000000bb: 	leaq	(%rdi,%rax,8), %rdx
    000000bf: 	comisd	(%rsi), %xmm0
    000000c3: 	ja	.Ltmp1882 # Offset: 195
.Ltmp1880:
    000000c5: 	movsd	%xmm0, (%rdx)
    000000c9: 	retq # Offset: 201
    000000ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1881:
    000000d0: 	movq	%rsi, %rdx
    000000d3: 	movsd	%xmm0, (%rdx)
    000000d7: 	retq # Offset: 215
    000000d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1873:
    000000e0: 	leaq	(%rsi,%rdx,8), %rdx
    000000e4: 	jne	.Ltmp1880 # Offset: 228
    000000e6: 	movq	%rax, %rcx
    000000e9: 	nopl	(%rax) # Size: 7
.Ltmp1878:
    000000f0: 	movsd	-0x8(%rdi,%rcx,8), %xmm1
    000000f6: 	leaq	-0x1(%rcx), %rax
    000000fa: 	movsd	%xmm1, (%rdx)
    000000fe: 	leaq	(%rdi,%rax,8), %rdx
    00000102: 	jmp	.Ltmp1883 # Offset: 258
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIP13TypeSub2ClassIdES2_EEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inIP12DeepSubClassIdES2_EEvlT_lT0_" after disassembly {
  Number      : 139
  State       : disassembled
  Address     : 0xc290
  Size        : 0x107
  MaxSize     : 0x110
  Offset      : 0xc290
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIP12DeepSubClassIdES2_EEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0138:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	leaq	0x2(%rdx,%rdx), %rax
    0000000c: 	movq	%rsi, %rdi
    0000000f: 	movq	%rdx, %r8
    00000012: 	cmpq	%r9, %rax
    00000015: 	jge	.Ltmp1884 # Offset: 21
    0000001b: 	movq	%rdx, %rsi
    0000001e: 	jmp	.Ltmp1885 # Offset: 30
.Ltmp1887:
    00000020: 	leaq	0x2(%rax,%rax), %rcx
    00000025: 	movsd	%xmm1, (%rdi,%rsi,8)
    0000002a: 	cmpq	%rcx, %r9
    0000002d: 	jle	.Ltmp1886 # Offset: 45
.Ltmp1888:
    0000002f: 	movq	%rax, %rsi
    00000032: 	movq	%rcx, %rax
.Ltmp1885:
    00000035: 	leaq	(,%rax,8), %rdx
    0000003d: 	leaq	-0x8(%rdi,%rdx), %rcx
    00000042: 	addq	%rdi, %rdx
    00000045: 	movsd	(%rdx), %xmm1
    00000049: 	comisd	(%rcx), %xmm1
    0000004d: 	ja	.Ltmp1887 # Offset: 77
    0000004f: 	movsd	(%rcx), %xmm1
    00000053: 	leaq	-0x1(%rax), %r10
    00000057: 	leaq	(%rax,%rax), %rcx
    0000005b: 	leaq	(%rdi,%r10,8), %rdx
    0000005f: 	movq	%r10, %rax
    00000062: 	movsd	%xmm1, (%rdi,%rsi,8)
    00000067: 	cmpq	%r9, %rcx
    0000006a: 	jl	.Ltmp1888 # Offset: 106
.Ltmp1886:
    0000006c: 	cmpq	%r9, %rcx
    0000006f: 	je	.Ltmp1889 # Offset: 111
.Ltmp1894:
    00000071: 	leaq	-0x1(%rax), %rsi
    00000075: 	movq	%rsi, %rcx
    00000078: 	shrq	$0x3f, %rcx
    0000007c: 	addq	%rsi, %rcx
    0000007f: 	sarq	%rcx
    00000082: 	cmpq	%r8, %rax
    00000085: 	jg	.Ltmp1890 # Offset: 133
    00000087: 	jmp	.Ltmp1891 # Offset: 135
    00000089: 	nopl	(%rax) # Size: 7
.Ltmp1893:
    00000090: 	movsd	(%rsi), %xmm1
    00000094: 	movsd	%xmm1, (%rdx)
    00000098: 	leaq	-0x1(%rcx), %rdx
    0000009c: 	movq	%rdx, %rax
    0000009f: 	shrq	$0x3f, %rax
    000000a3: 	addq	%rdx, %rax
    000000a6: 	sarq	%rax
    000000a9: 	movq	%rax, %rdx
    000000ac: 	movq	%rcx, %rax
    000000af: 	cmpq	%rcx, %r8
    000000b2: 	jge	.Ltmp1892 # Offset: 178
    000000b4: 	movq	%rdx, %rcx
.Ltmp1890:
    000000b7: 	leaq	(%rdi,%rcx,8), %rsi
    000000bb: 	leaq	(%rdi,%rax,8), %rdx
    000000bf: 	comisd	(%rsi), %xmm0
    000000c3: 	ja	.Ltmp1893 # Offset: 195
.Ltmp1891:
    000000c5: 	movsd	%xmm0, (%rdx)
    000000c9: 	retq # Offset: 201
    000000ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1892:
    000000d0: 	movq	%rsi, %rdx
    000000d3: 	movsd	%xmm0, (%rdx)
    000000d7: 	retq # Offset: 215
    000000d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1884:
    000000e0: 	leaq	(%rsi,%rdx,8), %rdx
    000000e4: 	jne	.Ltmp1891 # Offset: 228
    000000e6: 	movq	%rax, %rcx
    000000e9: 	nopl	(%rax) # Size: 7
.Ltmp1889:
    000000f0: 	movsd	-0x8(%rdi,%rcx,8), %xmm1
    000000f6: 	leaq	-0x1(%rcx), %rax
    000000fa: 	movsd	%xmm1, (%rdx)
    000000fe: 	leaq	(%rdi,%rax,8), %rdx
    00000102: 	jmp	.Ltmp1894 # Offset: 258
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIP12DeepSubClassIdES2_EEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inIP16TypeVirtualClassIdES2_EEvlT_lT0_" after disassembly {
  Number      : 140
  State       : disassembled
  Address     : 0xc3a0
  Size        : 0x245
  MaxSize     : 0x250
  Offset      : 0xc3a0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIP16TypeVirtualClassIdES2_EEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0139:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r8
    00000009: 	movq	%rdx, %r15
    0000000c: 	pushq	%r14
    0000000e: 	pushq	%r13
    00000010: 	movq	%rsi, %r13
    00000013: 	pushq	%r12
    00000015: 	leaq	0x2(%rdx,%rdx), %r12
    0000001a: 	pushq	%rbp
    0000001b: 	pushq	%rbx
    0000001c: 	subq	$0x28, %rsp
    00000020: 	cmpq	%rdi, %r12
    00000023: 	jge	.Ltmp1895 # Offset: 35
    00000029: 	leaq	_ZN16TypeVirtualClassIdEcvdEv(%rip), %r14
    00000030: 	jmp	.Ltmp1896 # Offset: 48
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1900:
    00000038: 	leaq	-0x1(%r12), %rsi
    0000003d: 	movsd	0x8(%rbp), %xmm0
    00000042: 	shlq	$0x4, %rdx
    00000046: 	leaq	(%r12,%r12), %rax
    0000004a: 	movq	%rsi, %rbx
    0000004d: 	movq	%rsi, %r12
    00000050: 	shlq	$0x4, %rbx
    00000054: 	movsd	%xmm0, 0x8(%r13,%rdx)
    0000005b: 	addq	%r13, %rbx
    0000005e: 	cmpq	%rax, %r8
    00000061: 	jle	.Ltmp1897 # Offset: 97
.Ltmp1901:
    00000063: 	movq	%r12, %rdx
    00000066: 	movq	%rax, %r12
.Ltmp1896:
    00000069: 	movq	%r12, %rbx
    0000006c: 	shlq	$0x4, %rbx
    00000070: 	leaq	-0x10(%r13,%rbx), %rbp
    00000075: 	movq	(%rbp), %rax
    00000079: 	movq	(%rax), %rax
    0000007c: 	cmpq	%r14, %rax
    0000007f: 	jne	.Ltmp1898 # Offset: 127
    00000085: 	addq	%r13, %rbx
    00000088: 	movsd	0x8(%rbp), %xmm1
    0000008d: 	movq	(%rbx), %rax
    00000090: 	movq	(%rax), %rax
    00000093: 	cmpq	%r14, %rax
    00000096: 	jne	.Ltmp1899 # Offset: 150
.Ltmp1909:
    0000009c: 	movsd	0x8(%rbx), %xmm0
.Ltmp1910:
    000000a1: 	comisd	%xmm1, %xmm0
    000000a5: 	jbe	.Ltmp1900 # Offset: 165
    000000a7: 	movsd	0x8(%rbx), %xmm0
    000000ac: 	shlq	$0x4, %rdx
    000000b0: 	leaq	0x2(%r12,%r12), %rax
    000000b5: 	movsd	%xmm0, 0x8(%r13,%rdx)
    000000bc: 	cmpq	%rax, %r8
    000000bf: 	jg	.Ltmp1901 # Offset: 191
.Ltmp1897:
    000000c1: 	cmpq	%rax, %r8
    000000c4: 	je	.Ltmp1902 # Offset: 196
.Ltmp1911:
    000000ca: 	leaq	-0x1(%r12), %rax
    000000cf: 	movq	%rax, %rsi
    000000d2: 	shrq	$0x3f, %rsi
    000000d6: 	addq	%rax, %rsi
    000000d9: 	sarq	%rsi
    000000dc: 	cmpq	%r15, %r12
    000000df: 	jle	.Ltmp1903 # Offset: 223
    000000e5: 	leaq	_ZN16TypeVirtualClassIdEcvdEv(%rip), %r14
    000000ec: 	jmp	.Ltmp1904 # Offset: 236
    000000ee: 	nop # Size: 2
.Ltmp1907:
    000000f0: 	movsd	0x8(%rbp), %xmm0
.Ltmp1908:
    000000f5: 	movsd	0x8(%rcx), %xmm1
    000000fa: 	movq	%r12, %rbx
    000000fd: 	shlq	$0x4, %rbx
    00000101: 	addq	%r13, %rbx
    00000104: 	comisd	%xmm0, %xmm1
    00000108: 	jbe	.Ltmp1905 # Offset: 264
    0000010e: 	leaq	-0x1(%rsi), %rdx
    00000112: 	movsd	0x8(%rbp), %xmm0
    00000117: 	movq	%rsi, %r12
    0000011a: 	movq	%rdx, %rax
    0000011d: 	shrq	$0x3f, %rax
    00000121: 	movsd	%xmm0, 0x8(%rbx)
    00000126: 	addq	%rdx, %rax
    00000129: 	sarq	%rax
    0000012c: 	cmpq	%rsi, %r15
    0000012f: 	jge	.Ltmp1906 # Offset: 303
    00000135: 	movq	%rax, %rsi
.Ltmp1904:
    00000138: 	movq	%rsi, %rbp
    0000013b: 	shlq	$0x4, %rbp
    0000013f: 	addq	%r13, %rbp
    00000142: 	movq	(%rbp), %rax
    00000146: 	movq	(%rax), %rax
    00000149: 	cmpq	%r14, %rax
    0000014c: 	je	.Ltmp1907 # Offset: 332
    0000014e: 	movq	%rcx, 0x8(%rsp)
    00000153: 	movq	%rbp, %rdi
    00000156: 	movq	%rsi, (%rsp)
    0000015a: 	callq	*%rax # Offset: 346
    0000015c: 	movq	0x8(%rsp), %rcx
    00000161: 	movq	(%rsp), %rsi
    00000165: 	jmp	.Ltmp1908 # Offset: 357
    00000167: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1898:
    00000170: 	addq	%r13, %rbx
    00000173: 	movq	%rcx, 0x10(%rsp)
    00000178: 	movq	%rbp, %rdi
    0000017b: 	movq	%r8, 0x8(%rsp)
    00000180: 	movq	%rdx, (%rsp)
    00000184: 	callq	*%rax # Offset: 388
    00000186: 	movq	(%rbx), %rax
    00000189: 	movq	0x10(%rsp), %rcx
    0000018e: 	movq	0x8(%rsp), %r8
    00000193: 	movq	(%rsp), %rdx
    00000197: 	movapd	%xmm0, %xmm1
    0000019b: 	movq	(%rax), %rax
    0000019e: 	cmpq	%r14, %rax
    000001a1: 	je	.Ltmp1909 # Offset: 417
.Ltmp1899:
    000001a7: 	movq	%rcx, 0x18(%rsp)
    000001ac: 	movq	%rbx, %rdi
    000001af: 	movq	%r8, 0x10(%rsp)
    000001b4: 	movq	%rdx, 0x8(%rsp)
    000001b9: 	movsd	%xmm1, (%rsp)
    000001be: 	callq	*%rax # Offset: 446
    000001c0: 	movq	0x18(%rsp), %rcx
    000001c5: 	movq	0x10(%rsp), %r8
    000001ca: 	movq	0x8(%rsp), %rdx
    000001cf: 	movsd	(%rsp), %xmm1
    000001d4: 	jmp	.Ltmp1910 # Offset: 468
    000001d9: 	nopl	(%rax) # Size: 7
.Ltmp1906:
    000001e0: 	movsd	0x8(%rcx), %xmm1
    000001e5: 	movq	%rbp, %rbx
.Ltmp1905:
    000001e8: 	movsd	%xmm1, 0x8(%rbx)
    000001ed: 	addq	$0x28, %rsp
    000001f1: 	popq	%rbx
    000001f2: 	popq	%rbp
    000001f3: 	popq	%r12
    000001f5: 	popq	%r13
    000001f7: 	popq	%r14
    000001f9: 	popq	%r15
    000001fb: 	retq # Offset: 507
    000001fc: 	nopl	(%rax) # Size: 4
.Ltmp1895:
    00000200: 	movq	%rdx, %rbx
    00000203: 	shlq	$0x4, %rbx
    00000207: 	addq	%rsi, %rbx
    0000020a: 	cmpq	%rdi, %r12
    0000020d: 	jne	.Ltmp1903 # Offset: 525
    0000020f: 	movq	%r12, %rax
    00000212: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1902:
    00000218: 	movq	%rax, %rdx
    0000021b: 	leaq	-0x1(%rax), %r12
    0000021f: 	shlq	$0x4, %rdx
    00000223: 	movsd	-0x8(%r13,%rdx), %xmm0
    0000022a: 	movsd	%xmm0, 0x8(%rbx)
    0000022f: 	movq	%r12, %rbx
    00000232: 	shlq	$0x4, %rbx
    00000236: 	addq	%r13, %rbx
    00000239: 	jmp	.Ltmp1911 # Offset: 569
.Ltmp1903:
    0000023e: 	movsd	0x8(%rcx), %xmm1
    00000243: 	jmp	.Ltmp1905 # Offset: 579
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIP16TypeVirtualClassIdES2_EEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inIP19TypeVirtualSubClassIdES2_EEvlT_lT0_" after disassembly {
  Number      : 141
  State       : disassembled
  Address     : 0xc5f0
  Size        : 0x245
  MaxSize     : 0x250
  Offset      : 0xc5f0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIP19TypeVirtualSubClassIdES2_EEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0140:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r8
    00000009: 	movq	%rdx, %r15
    0000000c: 	pushq	%r14
    0000000e: 	pushq	%r13
    00000010: 	movq	%rsi, %r13
    00000013: 	pushq	%r12
    00000015: 	leaq	0x2(%rdx,%rdx), %r12
    0000001a: 	pushq	%rbp
    0000001b: 	pushq	%rbx
    0000001c: 	subq	$0x28, %rsp
    00000020: 	cmpq	%rdi, %r12
    00000023: 	jge	.Ltmp1912 # Offset: 35
    00000029: 	leaq	_ZN19TypeVirtualSubClassIdEcvdEv(%rip), %r14
    00000030: 	jmp	.Ltmp1913 # Offset: 48
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1917:
    00000038: 	leaq	-0x1(%r12), %rsi
    0000003d: 	movsd	0x8(%rbp), %xmm0
    00000042: 	shlq	$0x4, %rdx
    00000046: 	leaq	(%r12,%r12), %rax
    0000004a: 	movq	%rsi, %rbx
    0000004d: 	movq	%rsi, %r12
    00000050: 	shlq	$0x4, %rbx
    00000054: 	movsd	%xmm0, 0x8(%r13,%rdx)
    0000005b: 	addq	%r13, %rbx
    0000005e: 	cmpq	%rax, %r8
    00000061: 	jle	.Ltmp1914 # Offset: 97
.Ltmp1918:
    00000063: 	movq	%r12, %rdx
    00000066: 	movq	%rax, %r12
.Ltmp1913:
    00000069: 	movq	%r12, %rbx
    0000006c: 	shlq	$0x4, %rbx
    00000070: 	leaq	-0x10(%r13,%rbx), %rbp
    00000075: 	movq	(%rbp), %rax
    00000079: 	movq	(%rax), %rax
    0000007c: 	cmpq	%r14, %rax
    0000007f: 	jne	.Ltmp1915 # Offset: 127
    00000085: 	addq	%r13, %rbx
    00000088: 	movsd	0x8(%rbp), %xmm1
    0000008d: 	movq	(%rbx), %rax
    00000090: 	movq	(%rax), %rax
    00000093: 	cmpq	%r14, %rax
    00000096: 	jne	.Ltmp1916 # Offset: 150
.Ltmp1926:
    0000009c: 	movsd	0x8(%rbx), %xmm0
.Ltmp1927:
    000000a1: 	comisd	%xmm1, %xmm0
    000000a5: 	jbe	.Ltmp1917 # Offset: 165
    000000a7: 	movsd	0x8(%rbx), %xmm0
    000000ac: 	shlq	$0x4, %rdx
    000000b0: 	leaq	0x2(%r12,%r12), %rax
    000000b5: 	movsd	%xmm0, 0x8(%r13,%rdx)
    000000bc: 	cmpq	%rax, %r8
    000000bf: 	jg	.Ltmp1918 # Offset: 191
.Ltmp1914:
    000000c1: 	cmpq	%rax, %r8
    000000c4: 	je	.Ltmp1919 # Offset: 196
.Ltmp1928:
    000000ca: 	leaq	-0x1(%r12), %rax
    000000cf: 	movq	%rax, %rsi
    000000d2: 	shrq	$0x3f, %rsi
    000000d6: 	addq	%rax, %rsi
    000000d9: 	sarq	%rsi
    000000dc: 	cmpq	%r15, %r12
    000000df: 	jle	.Ltmp1920 # Offset: 223
    000000e5: 	leaq	_ZN19TypeVirtualSubClassIdEcvdEv(%rip), %r14
    000000ec: 	jmp	.Ltmp1921 # Offset: 236
    000000ee: 	nop # Size: 2
.Ltmp1924:
    000000f0: 	movsd	0x8(%rbp), %xmm0
.Ltmp1925:
    000000f5: 	movsd	0x8(%rcx), %xmm1
    000000fa: 	movq	%r12, %rbx
    000000fd: 	shlq	$0x4, %rbx
    00000101: 	addq	%r13, %rbx
    00000104: 	comisd	%xmm0, %xmm1
    00000108: 	jbe	.Ltmp1922 # Offset: 264
    0000010e: 	leaq	-0x1(%rsi), %rdx
    00000112: 	movsd	0x8(%rbp), %xmm0
    00000117: 	movq	%rsi, %r12
    0000011a: 	movq	%rdx, %rax
    0000011d: 	shrq	$0x3f, %rax
    00000121: 	movsd	%xmm0, 0x8(%rbx)
    00000126: 	addq	%rdx, %rax
    00000129: 	sarq	%rax
    0000012c: 	cmpq	%rsi, %r15
    0000012f: 	jge	.Ltmp1923 # Offset: 303
    00000135: 	movq	%rax, %rsi
.Ltmp1921:
    00000138: 	movq	%rsi, %rbp
    0000013b: 	shlq	$0x4, %rbp
    0000013f: 	addq	%r13, %rbp
    00000142: 	movq	(%rbp), %rax
    00000146: 	movq	(%rax), %rax
    00000149: 	cmpq	%r14, %rax
    0000014c: 	je	.Ltmp1924 # Offset: 332
    0000014e: 	movq	%rcx, 0x8(%rsp)
    00000153: 	movq	%rbp, %rdi
    00000156: 	movq	%rsi, (%rsp)
    0000015a: 	callq	*%rax # Offset: 346
    0000015c: 	movq	0x8(%rsp), %rcx
    00000161: 	movq	(%rsp), %rsi
    00000165: 	jmp	.Ltmp1925 # Offset: 357
    00000167: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1915:
    00000170: 	addq	%r13, %rbx
    00000173: 	movq	%rcx, 0x10(%rsp)
    00000178: 	movq	%rbp, %rdi
    0000017b: 	movq	%r8, 0x8(%rsp)
    00000180: 	movq	%rdx, (%rsp)
    00000184: 	callq	*%rax # Offset: 388
    00000186: 	movq	(%rbx), %rax
    00000189: 	movq	0x10(%rsp), %rcx
    0000018e: 	movq	0x8(%rsp), %r8
    00000193: 	movq	(%rsp), %rdx
    00000197: 	movapd	%xmm0, %xmm1
    0000019b: 	movq	(%rax), %rax
    0000019e: 	cmpq	%r14, %rax
    000001a1: 	je	.Ltmp1926 # Offset: 417
.Ltmp1916:
    000001a7: 	movq	%rcx, 0x18(%rsp)
    000001ac: 	movq	%rbx, %rdi
    000001af: 	movq	%r8, 0x10(%rsp)
    000001b4: 	movq	%rdx, 0x8(%rsp)
    000001b9: 	movsd	%xmm1, (%rsp)
    000001be: 	callq	*%rax # Offset: 446
    000001c0: 	movq	0x18(%rsp), %rcx
    000001c5: 	movq	0x10(%rsp), %r8
    000001ca: 	movq	0x8(%rsp), %rdx
    000001cf: 	movsd	(%rsp), %xmm1
    000001d4: 	jmp	.Ltmp1927 # Offset: 468
    000001d9: 	nopl	(%rax) # Size: 7
.Ltmp1923:
    000001e0: 	movsd	0x8(%rcx), %xmm1
    000001e5: 	movq	%rbp, %rbx
.Ltmp1922:
    000001e8: 	movsd	%xmm1, 0x8(%rbx)
    000001ed: 	addq	$0x28, %rsp
    000001f1: 	popq	%rbx
    000001f2: 	popq	%rbp
    000001f3: 	popq	%r12
    000001f5: 	popq	%r13
    000001f7: 	popq	%r14
    000001f9: 	popq	%r15
    000001fb: 	retq # Offset: 507
    000001fc: 	nopl	(%rax) # Size: 4
.Ltmp1912:
    00000200: 	movq	%rdx, %rbx
    00000203: 	shlq	$0x4, %rbx
    00000207: 	addq	%rsi, %rbx
    0000020a: 	cmpq	%rdi, %r12
    0000020d: 	jne	.Ltmp1920 # Offset: 525
    0000020f: 	movq	%r12, %rax
    00000212: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1919:
    00000218: 	movq	%rax, %rdx
    0000021b: 	leaq	-0x1(%rax), %r12
    0000021f: 	shlq	$0x4, %rdx
    00000223: 	movsd	-0x8(%r13,%rdx), %xmm0
    0000022a: 	movsd	%xmm0, 0x8(%rbx)
    0000022f: 	movq	%r12, %rbx
    00000232: 	shlq	$0x4, %rbx
    00000236: 	addq	%r13, %rbx
    00000239: 	jmp	.Ltmp1928 # Offset: 569
.Ltmp1920:
    0000023e: 	movsd	0x8(%rcx), %xmm1
    00000243: 	jmp	.Ltmp1922 # Offset: 579
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIP19TypeVirtualSubClassIdES2_EEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inIP14WorkerSubClassIdES2_EEvlT_lT0_" after disassembly {
  Number      : 142
  State       : disassembled
  Address     : 0xc840
  Size        : 0x245
  MaxSize     : 0x250
  Offset      : 0xc840
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIP14WorkerSubClassIdES2_EEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0141:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r8
    00000009: 	movq	%rdx, %r15
    0000000c: 	pushq	%r14
    0000000e: 	pushq	%r13
    00000010: 	movq	%rsi, %r13
    00000013: 	pushq	%r12
    00000015: 	leaq	0x2(%rdx,%rdx), %r12
    0000001a: 	pushq	%rbp
    0000001b: 	pushq	%rbx
    0000001c: 	subq	$0x28, %rsp
    00000020: 	cmpq	%rdi, %r12
    00000023: 	jge	.Ltmp1929 # Offset: 35
    00000029: 	leaq	_ZN14WorkerSubClassIdEcvdEv(%rip), %r14
    00000030: 	jmp	.Ltmp1930 # Offset: 48
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1934:
    00000038: 	leaq	-0x1(%r12), %rsi
    0000003d: 	movsd	0x8(%rbp), %xmm0
    00000042: 	shlq	$0x4, %rdx
    00000046: 	leaq	(%r12,%r12), %rax
    0000004a: 	movq	%rsi, %rbx
    0000004d: 	movq	%rsi, %r12
    00000050: 	shlq	$0x4, %rbx
    00000054: 	movsd	%xmm0, 0x8(%r13,%rdx)
    0000005b: 	addq	%r13, %rbx
    0000005e: 	cmpq	%rax, %r8
    00000061: 	jle	.Ltmp1931 # Offset: 97
.Ltmp1935:
    00000063: 	movq	%r12, %rdx
    00000066: 	movq	%rax, %r12
.Ltmp1930:
    00000069: 	movq	%r12, %rbx
    0000006c: 	shlq	$0x4, %rbx
    00000070: 	leaq	-0x10(%r13,%rbx), %rbp
    00000075: 	movq	(%rbp), %rax
    00000079: 	movq	(%rax), %rax
    0000007c: 	cmpq	%r14, %rax
    0000007f: 	jne	.Ltmp1932 # Offset: 127
    00000085: 	addq	%r13, %rbx
    00000088: 	movsd	0x8(%rbp), %xmm1
    0000008d: 	movq	(%rbx), %rax
    00000090: 	movq	(%rax), %rax
    00000093: 	cmpq	%r14, %rax
    00000096: 	jne	.Ltmp1933 # Offset: 150
.Ltmp1943:
    0000009c: 	movsd	0x8(%rbx), %xmm0
.Ltmp1944:
    000000a1: 	comisd	%xmm1, %xmm0
    000000a5: 	jbe	.Ltmp1934 # Offset: 165
    000000a7: 	movsd	0x8(%rbx), %xmm0
    000000ac: 	shlq	$0x4, %rdx
    000000b0: 	leaq	0x2(%r12,%r12), %rax
    000000b5: 	movsd	%xmm0, 0x8(%r13,%rdx)
    000000bc: 	cmpq	%rax, %r8
    000000bf: 	jg	.Ltmp1935 # Offset: 191
.Ltmp1931:
    000000c1: 	cmpq	%rax, %r8
    000000c4: 	je	.Ltmp1936 # Offset: 196
.Ltmp1945:
    000000ca: 	leaq	-0x1(%r12), %rax
    000000cf: 	movq	%rax, %rsi
    000000d2: 	shrq	$0x3f, %rsi
    000000d6: 	addq	%rax, %rsi
    000000d9: 	sarq	%rsi
    000000dc: 	cmpq	%r15, %r12
    000000df: 	jle	.Ltmp1937 # Offset: 223
    000000e5: 	leaq	_ZN14WorkerSubClassIdEcvdEv(%rip), %r14
    000000ec: 	jmp	.Ltmp1938 # Offset: 236
    000000ee: 	nop # Size: 2
.Ltmp1941:
    000000f0: 	movsd	0x8(%rbp), %xmm0
.Ltmp1942:
    000000f5: 	movsd	0x8(%rcx), %xmm1
    000000fa: 	movq	%r12, %rbx
    000000fd: 	shlq	$0x4, %rbx
    00000101: 	addq	%r13, %rbx
    00000104: 	comisd	%xmm0, %xmm1
    00000108: 	jbe	.Ltmp1939 # Offset: 264
    0000010e: 	leaq	-0x1(%rsi), %rdx
    00000112: 	movsd	0x8(%rbp), %xmm0
    00000117: 	movq	%rsi, %r12
    0000011a: 	movq	%rdx, %rax
    0000011d: 	shrq	$0x3f, %rax
    00000121: 	movsd	%xmm0, 0x8(%rbx)
    00000126: 	addq	%rdx, %rax
    00000129: 	sarq	%rax
    0000012c: 	cmpq	%rsi, %r15
    0000012f: 	jge	.Ltmp1940 # Offset: 303
    00000135: 	movq	%rax, %rsi
.Ltmp1938:
    00000138: 	movq	%rsi, %rbp
    0000013b: 	shlq	$0x4, %rbp
    0000013f: 	addq	%r13, %rbp
    00000142: 	movq	(%rbp), %rax
    00000146: 	movq	(%rax), %rax
    00000149: 	cmpq	%r14, %rax
    0000014c: 	je	.Ltmp1941 # Offset: 332
    0000014e: 	movq	%rcx, 0x8(%rsp)
    00000153: 	movq	%rbp, %rdi
    00000156: 	movq	%rsi, (%rsp)
    0000015a: 	callq	*%rax # Offset: 346
    0000015c: 	movq	0x8(%rsp), %rcx
    00000161: 	movq	(%rsp), %rsi
    00000165: 	jmp	.Ltmp1942 # Offset: 357
    00000167: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1932:
    00000170: 	addq	%r13, %rbx
    00000173: 	movq	%rcx, 0x10(%rsp)
    00000178: 	movq	%rbp, %rdi
    0000017b: 	movq	%r8, 0x8(%rsp)
    00000180: 	movq	%rdx, (%rsp)
    00000184: 	callq	*%rax # Offset: 388
    00000186: 	movq	(%rbx), %rax
    00000189: 	movq	0x10(%rsp), %rcx
    0000018e: 	movq	0x8(%rsp), %r8
    00000193: 	movq	(%rsp), %rdx
    00000197: 	movapd	%xmm0, %xmm1
    0000019b: 	movq	(%rax), %rax
    0000019e: 	cmpq	%r14, %rax
    000001a1: 	je	.Ltmp1943 # Offset: 417
.Ltmp1933:
    000001a7: 	movq	%rcx, 0x18(%rsp)
    000001ac: 	movq	%rbx, %rdi
    000001af: 	movq	%r8, 0x10(%rsp)
    000001b4: 	movq	%rdx, 0x8(%rsp)
    000001b9: 	movsd	%xmm1, (%rsp)
    000001be: 	callq	*%rax # Offset: 446
    000001c0: 	movq	0x18(%rsp), %rcx
    000001c5: 	movq	0x10(%rsp), %r8
    000001ca: 	movq	0x8(%rsp), %rdx
    000001cf: 	movsd	(%rsp), %xmm1
    000001d4: 	jmp	.Ltmp1944 # Offset: 468
    000001d9: 	nopl	(%rax) # Size: 7
.Ltmp1940:
    000001e0: 	movsd	0x8(%rcx), %xmm1
    000001e5: 	movq	%rbp, %rbx
.Ltmp1939:
    000001e8: 	movsd	%xmm1, 0x8(%rbx)
    000001ed: 	addq	$0x28, %rsp
    000001f1: 	popq	%rbx
    000001f2: 	popq	%rbp
    000001f3: 	popq	%r12
    000001f5: 	popq	%r13
    000001f7: 	popq	%r14
    000001f9: 	popq	%r15
    000001fb: 	retq # Offset: 507
    000001fc: 	nopl	(%rax) # Size: 4
.Ltmp1929:
    00000200: 	movq	%rdx, %rbx
    00000203: 	shlq	$0x4, %rbx
    00000207: 	addq	%rsi, %rbx
    0000020a: 	cmpq	%rdi, %r12
    0000020d: 	jne	.Ltmp1937 # Offset: 525
    0000020f: 	movq	%r12, %rax
    00000212: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1936:
    00000218: 	movq	%rax, %rdx
    0000021b: 	leaq	-0x1(%rax), %r12
    0000021f: 	shlq	$0x4, %rdx
    00000223: 	movsd	-0x8(%r13,%rdx), %xmm0
    0000022a: 	movsd	%xmm0, 0x8(%rbx)
    0000022f: 	movq	%r12, %rbx
    00000232: 	shlq	$0x4, %rbx
    00000236: 	addq	%r13, %rbx
    00000239: 	jmp	.Ltmp1945 # Offset: 569
.Ltmp1937:
    0000023e: 	movsd	0x8(%rcx), %xmm1
    00000243: 	jmp	.Ltmp1939 # Offset: 579
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIP14WorkerSubClassIdES2_EEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inIP18WorkerDeepSubClassIdES2_EEvlT_lT0_" after disassembly {
  Number      : 143
  State       : disassembled
  Address     : 0xca90
  Size        : 0x245
  MaxSize     : 0x250
  Offset      : 0xca90
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIP18WorkerDeepSubClassIdES2_EEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0142:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r8
    00000009: 	movq	%rdx, %r15
    0000000c: 	pushq	%r14
    0000000e: 	pushq	%r13
    00000010: 	movq	%rsi, %r13
    00000013: 	pushq	%r12
    00000015: 	leaq	0x2(%rdx,%rdx), %r12
    0000001a: 	pushq	%rbp
    0000001b: 	pushq	%rbx
    0000001c: 	subq	$0x28, %rsp
    00000020: 	cmpq	%rdi, %r12
    00000023: 	jge	.Ltmp1946 # Offset: 35
    00000029: 	leaq	_ZN18WorkerDeepSubClassIdEcvdEv(%rip), %r14
    00000030: 	jmp	.Ltmp1947 # Offset: 48
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1951:
    00000038: 	leaq	-0x1(%r12), %rsi
    0000003d: 	movsd	0x8(%rbp), %xmm0
    00000042: 	shlq	$0x4, %rdx
    00000046: 	leaq	(%r12,%r12), %rax
    0000004a: 	movq	%rsi, %rbx
    0000004d: 	movq	%rsi, %r12
    00000050: 	shlq	$0x4, %rbx
    00000054: 	movsd	%xmm0, 0x8(%r13,%rdx)
    0000005b: 	addq	%r13, %rbx
    0000005e: 	cmpq	%rax, %r8
    00000061: 	jle	.Ltmp1948 # Offset: 97
.Ltmp1952:
    00000063: 	movq	%r12, %rdx
    00000066: 	movq	%rax, %r12
.Ltmp1947:
    00000069: 	movq	%r12, %rbx
    0000006c: 	shlq	$0x4, %rbx
    00000070: 	leaq	-0x10(%r13,%rbx), %rbp
    00000075: 	movq	(%rbp), %rax
    00000079: 	movq	(%rax), %rax
    0000007c: 	cmpq	%r14, %rax
    0000007f: 	jne	.Ltmp1949 # Offset: 127
    00000085: 	addq	%r13, %rbx
    00000088: 	movsd	0x8(%rbp), %xmm1
    0000008d: 	movq	(%rbx), %rax
    00000090: 	movq	(%rax), %rax
    00000093: 	cmpq	%r14, %rax
    00000096: 	jne	.Ltmp1950 # Offset: 150
.Ltmp1960:
    0000009c: 	movsd	0x8(%rbx), %xmm0
.Ltmp1961:
    000000a1: 	comisd	%xmm1, %xmm0
    000000a5: 	jbe	.Ltmp1951 # Offset: 165
    000000a7: 	movsd	0x8(%rbx), %xmm0
    000000ac: 	shlq	$0x4, %rdx
    000000b0: 	leaq	0x2(%r12,%r12), %rax
    000000b5: 	movsd	%xmm0, 0x8(%r13,%rdx)
    000000bc: 	cmpq	%rax, %r8
    000000bf: 	jg	.Ltmp1952 # Offset: 191
.Ltmp1948:
    000000c1: 	cmpq	%rax, %r8
    000000c4: 	je	.Ltmp1953 # Offset: 196
.Ltmp1962:
    000000ca: 	leaq	-0x1(%r12), %rax
    000000cf: 	movq	%rax, %rsi
    000000d2: 	shrq	$0x3f, %rsi
    000000d6: 	addq	%rax, %rsi
    000000d9: 	sarq	%rsi
    000000dc: 	cmpq	%r15, %r12
    000000df: 	jle	.Ltmp1954 # Offset: 223
    000000e5: 	leaq	_ZN18WorkerDeepSubClassIdEcvdEv(%rip), %r14
    000000ec: 	jmp	.Ltmp1955 # Offset: 236
    000000ee: 	nop # Size: 2
.Ltmp1958:
    000000f0: 	movsd	0x8(%rbp), %xmm0
.Ltmp1959:
    000000f5: 	movsd	0x8(%rcx), %xmm1
    000000fa: 	movq	%r12, %rbx
    000000fd: 	shlq	$0x4, %rbx
    00000101: 	addq	%r13, %rbx
    00000104: 	comisd	%xmm0, %xmm1
    00000108: 	jbe	.Ltmp1956 # Offset: 264
    0000010e: 	leaq	-0x1(%rsi), %rdx
    00000112: 	movsd	0x8(%rbp), %xmm0
    00000117: 	movq	%rsi, %r12
    0000011a: 	movq	%rdx, %rax
    0000011d: 	shrq	$0x3f, %rax
    00000121: 	movsd	%xmm0, 0x8(%rbx)
    00000126: 	addq	%rdx, %rax
    00000129: 	sarq	%rax
    0000012c: 	cmpq	%rsi, %r15
    0000012f: 	jge	.Ltmp1957 # Offset: 303
    00000135: 	movq	%rax, %rsi
.Ltmp1955:
    00000138: 	movq	%rsi, %rbp
    0000013b: 	shlq	$0x4, %rbp
    0000013f: 	addq	%r13, %rbp
    00000142: 	movq	(%rbp), %rax
    00000146: 	movq	(%rax), %rax
    00000149: 	cmpq	%r14, %rax
    0000014c: 	je	.Ltmp1958 # Offset: 332
    0000014e: 	movq	%rcx, 0x8(%rsp)
    00000153: 	movq	%rbp, %rdi
    00000156: 	movq	%rsi, (%rsp)
    0000015a: 	callq	*%rax # Offset: 346
    0000015c: 	movq	0x8(%rsp), %rcx
    00000161: 	movq	(%rsp), %rsi
    00000165: 	jmp	.Ltmp1959 # Offset: 357
    00000167: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1949:
    00000170: 	addq	%r13, %rbx
    00000173: 	movq	%rcx, 0x10(%rsp)
    00000178: 	movq	%rbp, %rdi
    0000017b: 	movq	%r8, 0x8(%rsp)
    00000180: 	movq	%rdx, (%rsp)
    00000184: 	callq	*%rax # Offset: 388
    00000186: 	movq	(%rbx), %rax
    00000189: 	movq	0x10(%rsp), %rcx
    0000018e: 	movq	0x8(%rsp), %r8
    00000193: 	movq	(%rsp), %rdx
    00000197: 	movapd	%xmm0, %xmm1
    0000019b: 	movq	(%rax), %rax
    0000019e: 	cmpq	%r14, %rax
    000001a1: 	je	.Ltmp1960 # Offset: 417
.Ltmp1950:
    000001a7: 	movq	%rcx, 0x18(%rsp)
    000001ac: 	movq	%rbx, %rdi
    000001af: 	movq	%r8, 0x10(%rsp)
    000001b4: 	movq	%rdx, 0x8(%rsp)
    000001b9: 	movsd	%xmm1, (%rsp)
    000001be: 	callq	*%rax # Offset: 446
    000001c0: 	movq	0x18(%rsp), %rcx
    000001c5: 	movq	0x10(%rsp), %r8
    000001ca: 	movq	0x8(%rsp), %rdx
    000001cf: 	movsd	(%rsp), %xmm1
    000001d4: 	jmp	.Ltmp1961 # Offset: 468
    000001d9: 	nopl	(%rax) # Size: 7
.Ltmp1957:
    000001e0: 	movsd	0x8(%rcx), %xmm1
    000001e5: 	movq	%rbp, %rbx
.Ltmp1956:
    000001e8: 	movsd	%xmm1, 0x8(%rbx)
    000001ed: 	addq	$0x28, %rsp
    000001f1: 	popq	%rbx
    000001f2: 	popq	%rbp
    000001f3: 	popq	%r12
    000001f5: 	popq	%r13
    000001f7: 	popq	%r14
    000001f9: 	popq	%r15
    000001fb: 	retq # Offset: 507
    000001fc: 	nopl	(%rax) # Size: 4
.Ltmp1946:
    00000200: 	movq	%rdx, %rbx
    00000203: 	shlq	$0x4, %rbx
    00000207: 	addq	%rsi, %rbx
    0000020a: 	cmpq	%rdi, %r12
    0000020d: 	jne	.Ltmp1954 # Offset: 525
    0000020f: 	movq	%r12, %rax
    00000212: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1953:
    00000218: 	movq	%rax, %rdx
    0000021b: 	leaq	-0x1(%rax), %r12
    0000021f: 	shlq	$0x4, %rdx
    00000223: 	movsd	-0x8(%r13,%rdx), %xmm0
    0000022a: 	movsd	%xmm0, 0x8(%rbx)
    0000022f: 	movq	%r12, %rbx
    00000232: 	shlq	$0x4, %rbx
    00000236: 	addq	%r13, %rbx
    00000239: 	jmp	.Ltmp1962 # Offset: 569
.Ltmp1954:
    0000023e: 	movsd	0x8(%rcx), %xmm1
    00000243: 	jmp	.Ltmp1956 # Offset: 579
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIP18WorkerDeepSubClassIdES2_EEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inIP15WorkerSubClass2IdES2_EEvlT_lT0_" after disassembly {
  Number      : 144
  State       : disassembled
  Address     : 0xcce0
  Size        : 0x245
  MaxSize     : 0x250
  Offset      : 0xcce0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIP15WorkerSubClass2IdES2_EEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0143:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r8
    00000009: 	movq	%rdx, %r15
    0000000c: 	pushq	%r14
    0000000e: 	pushq	%r13
    00000010: 	movq	%rsi, %r13
    00000013: 	pushq	%r12
    00000015: 	leaq	0x2(%rdx,%rdx), %r12
    0000001a: 	pushq	%rbp
    0000001b: 	pushq	%rbx
    0000001c: 	subq	$0x28, %rsp
    00000020: 	cmpq	%rdi, %r12
    00000023: 	jge	.Ltmp1963 # Offset: 35
    00000029: 	leaq	_ZN15WorkerSubClass2IdEcvdEv(%rip), %r14
    00000030: 	jmp	.Ltmp1964 # Offset: 48
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1968:
    00000038: 	leaq	-0x1(%r12), %rsi
    0000003d: 	movsd	0x8(%rbp), %xmm0
    00000042: 	shlq	$0x4, %rdx
    00000046: 	leaq	(%r12,%r12), %rax
    0000004a: 	movq	%rsi, %rbx
    0000004d: 	movq	%rsi, %r12
    00000050: 	shlq	$0x4, %rbx
    00000054: 	movsd	%xmm0, 0x8(%r13,%rdx)
    0000005b: 	addq	%r13, %rbx
    0000005e: 	cmpq	%rax, %r8
    00000061: 	jle	.Ltmp1965 # Offset: 97
.Ltmp1969:
    00000063: 	movq	%r12, %rdx
    00000066: 	movq	%rax, %r12
.Ltmp1964:
    00000069: 	movq	%r12, %rbx
    0000006c: 	shlq	$0x4, %rbx
    00000070: 	leaq	-0x10(%r13,%rbx), %rbp
    00000075: 	movq	(%rbp), %rax
    00000079: 	movq	(%rax), %rax
    0000007c: 	cmpq	%r14, %rax
    0000007f: 	jne	.Ltmp1966 # Offset: 127
    00000085: 	addq	%r13, %rbx
    00000088: 	movsd	0x8(%rbp), %xmm1
    0000008d: 	movq	(%rbx), %rax
    00000090: 	movq	(%rax), %rax
    00000093: 	cmpq	%r14, %rax
    00000096: 	jne	.Ltmp1967 # Offset: 150
.Ltmp1977:
    0000009c: 	movsd	0x8(%rbx), %xmm0
.Ltmp1978:
    000000a1: 	comisd	%xmm1, %xmm0
    000000a5: 	jbe	.Ltmp1968 # Offset: 165
    000000a7: 	movsd	0x8(%rbx), %xmm0
    000000ac: 	shlq	$0x4, %rdx
    000000b0: 	leaq	0x2(%r12,%r12), %rax
    000000b5: 	movsd	%xmm0, 0x8(%r13,%rdx)
    000000bc: 	cmpq	%rax, %r8
    000000bf: 	jg	.Ltmp1969 # Offset: 191
.Ltmp1965:
    000000c1: 	cmpq	%rax, %r8
    000000c4: 	je	.Ltmp1970 # Offset: 196
.Ltmp1979:
    000000ca: 	leaq	-0x1(%r12), %rax
    000000cf: 	movq	%rax, %rsi
    000000d2: 	shrq	$0x3f, %rsi
    000000d6: 	addq	%rax, %rsi
    000000d9: 	sarq	%rsi
    000000dc: 	cmpq	%r15, %r12
    000000df: 	jle	.Ltmp1971 # Offset: 223
    000000e5: 	leaq	_ZN15WorkerSubClass2IdEcvdEv(%rip), %r14
    000000ec: 	jmp	.Ltmp1972 # Offset: 236
    000000ee: 	nop # Size: 2
.Ltmp1975:
    000000f0: 	movsd	0x8(%rbp), %xmm0
.Ltmp1976:
    000000f5: 	movsd	0x8(%rcx), %xmm1
    000000fa: 	movq	%r12, %rbx
    000000fd: 	shlq	$0x4, %rbx
    00000101: 	addq	%r13, %rbx
    00000104: 	comisd	%xmm0, %xmm1
    00000108: 	jbe	.Ltmp1973 # Offset: 264
    0000010e: 	leaq	-0x1(%rsi), %rdx
    00000112: 	movsd	0x8(%rbp), %xmm0
    00000117: 	movq	%rsi, %r12
    0000011a: 	movq	%rdx, %rax
    0000011d: 	shrq	$0x3f, %rax
    00000121: 	movsd	%xmm0, 0x8(%rbx)
    00000126: 	addq	%rdx, %rax
    00000129: 	sarq	%rax
    0000012c: 	cmpq	%rsi, %r15
    0000012f: 	jge	.Ltmp1974 # Offset: 303
    00000135: 	movq	%rax, %rsi
.Ltmp1972:
    00000138: 	movq	%rsi, %rbp
    0000013b: 	shlq	$0x4, %rbp
    0000013f: 	addq	%r13, %rbp
    00000142: 	movq	(%rbp), %rax
    00000146: 	movq	(%rax), %rax
    00000149: 	cmpq	%r14, %rax
    0000014c: 	je	.Ltmp1975 # Offset: 332
    0000014e: 	movq	%rcx, 0x8(%rsp)
    00000153: 	movq	%rbp, %rdi
    00000156: 	movq	%rsi, (%rsp)
    0000015a: 	callq	*%rax # Offset: 346
    0000015c: 	movq	0x8(%rsp), %rcx
    00000161: 	movq	(%rsp), %rsi
    00000165: 	jmp	.Ltmp1976 # Offset: 357
    00000167: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1966:
    00000170: 	addq	%r13, %rbx
    00000173: 	movq	%rcx, 0x10(%rsp)
    00000178: 	movq	%rbp, %rdi
    0000017b: 	movq	%r8, 0x8(%rsp)
    00000180: 	movq	%rdx, (%rsp)
    00000184: 	callq	*%rax # Offset: 388
    00000186: 	movq	(%rbx), %rax
    00000189: 	movq	0x10(%rsp), %rcx
    0000018e: 	movq	0x8(%rsp), %r8
    00000193: 	movq	(%rsp), %rdx
    00000197: 	movapd	%xmm0, %xmm1
    0000019b: 	movq	(%rax), %rax
    0000019e: 	cmpq	%r14, %rax
    000001a1: 	je	.Ltmp1977 # Offset: 417
.Ltmp1967:
    000001a7: 	movq	%rcx, 0x18(%rsp)
    000001ac: 	movq	%rbx, %rdi
    000001af: 	movq	%r8, 0x10(%rsp)
    000001b4: 	movq	%rdx, 0x8(%rsp)
    000001b9: 	movsd	%xmm1, (%rsp)
    000001be: 	callq	*%rax # Offset: 446
    000001c0: 	movq	0x18(%rsp), %rcx
    000001c5: 	movq	0x10(%rsp), %r8
    000001ca: 	movq	0x8(%rsp), %rdx
    000001cf: 	movsd	(%rsp), %xmm1
    000001d4: 	jmp	.Ltmp1978 # Offset: 468
    000001d9: 	nopl	(%rax) # Size: 7
.Ltmp1974:
    000001e0: 	movsd	0x8(%rcx), %xmm1
    000001e5: 	movq	%rbp, %rbx
.Ltmp1973:
    000001e8: 	movsd	%xmm1, 0x8(%rbx)
    000001ed: 	addq	$0x28, %rsp
    000001f1: 	popq	%rbx
    000001f2: 	popq	%rbp
    000001f3: 	popq	%r12
    000001f5: 	popq	%r13
    000001f7: 	popq	%r14
    000001f9: 	popq	%r15
    000001fb: 	retq # Offset: 507
    000001fc: 	nopl	(%rax) # Size: 4
.Ltmp1963:
    00000200: 	movq	%rdx, %rbx
    00000203: 	shlq	$0x4, %rbx
    00000207: 	addq	%rsi, %rbx
    0000020a: 	cmpq	%rdi, %r12
    0000020d: 	jne	.Ltmp1971 # Offset: 525
    0000020f: 	movq	%r12, %rax
    00000212: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1970:
    00000218: 	movq	%rax, %rdx
    0000021b: 	leaq	-0x1(%rax), %r12
    0000021f: 	shlq	$0x4, %rdx
    00000223: 	movsd	-0x8(%r13,%rdx), %xmm0
    0000022a: 	movsd	%xmm0, 0x8(%rbx)
    0000022f: 	movq	%r12, %rbx
    00000232: 	shlq	$0x4, %rbx
    00000236: 	addq	%r13, %rbx
    00000239: 	jmp	.Ltmp1979 # Offset: 569
.Ltmp1971:
    0000023e: 	movsd	0x8(%rcx), %xmm1
    00000243: 	jmp	.Ltmp1973 # Offset: 579
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIP15WorkerSubClass2IdES2_EEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inIP15WorkerSubClass3IdES2_EEvlT_lT0_" after disassembly {
  Number      : 145
  State       : disassembled
  Address     : 0xcf30
  Size        : 0x245
  MaxSize     : 0x250
  Offset      : 0xcf30
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIP15WorkerSubClass3IdES2_EEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0144:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r8
    00000009: 	movq	%rdx, %r15
    0000000c: 	pushq	%r14
    0000000e: 	pushq	%r13
    00000010: 	movq	%rsi, %r13
    00000013: 	pushq	%r12
    00000015: 	leaq	0x2(%rdx,%rdx), %r12
    0000001a: 	pushq	%rbp
    0000001b: 	pushq	%rbx
    0000001c: 	subq	$0x28, %rsp
    00000020: 	cmpq	%rdi, %r12
    00000023: 	jge	.Ltmp1980 # Offset: 35
    00000029: 	leaq	_ZN15WorkerSubClass3IdEcvdEv(%rip), %r14
    00000030: 	jmp	.Ltmp1981 # Offset: 48
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1985:
    00000038: 	leaq	-0x1(%r12), %rsi
    0000003d: 	movsd	0x8(%rbp), %xmm0
    00000042: 	shlq	$0x4, %rdx
    00000046: 	leaq	(%r12,%r12), %rax
    0000004a: 	movq	%rsi, %rbx
    0000004d: 	movq	%rsi, %r12
    00000050: 	shlq	$0x4, %rbx
    00000054: 	movsd	%xmm0, 0x8(%r13,%rdx)
    0000005b: 	addq	%r13, %rbx
    0000005e: 	cmpq	%rax, %r8
    00000061: 	jle	.Ltmp1982 # Offset: 97
.Ltmp1986:
    00000063: 	movq	%r12, %rdx
    00000066: 	movq	%rax, %r12
.Ltmp1981:
    00000069: 	movq	%r12, %rbx
    0000006c: 	shlq	$0x4, %rbx
    00000070: 	leaq	-0x10(%r13,%rbx), %rbp
    00000075: 	movq	(%rbp), %rax
    00000079: 	movq	(%rax), %rax
    0000007c: 	cmpq	%r14, %rax
    0000007f: 	jne	.Ltmp1983 # Offset: 127
    00000085: 	addq	%r13, %rbx
    00000088: 	movsd	0x8(%rbp), %xmm1
    0000008d: 	movq	(%rbx), %rax
    00000090: 	movq	(%rax), %rax
    00000093: 	cmpq	%r14, %rax
    00000096: 	jne	.Ltmp1984 # Offset: 150
.Ltmp1994:
    0000009c: 	movsd	0x8(%rbx), %xmm0
.Ltmp1995:
    000000a1: 	comisd	%xmm1, %xmm0
    000000a5: 	jbe	.Ltmp1985 # Offset: 165
    000000a7: 	movsd	0x8(%rbx), %xmm0
    000000ac: 	shlq	$0x4, %rdx
    000000b0: 	leaq	0x2(%r12,%r12), %rax
    000000b5: 	movsd	%xmm0, 0x8(%r13,%rdx)
    000000bc: 	cmpq	%rax, %r8
    000000bf: 	jg	.Ltmp1986 # Offset: 191
.Ltmp1982:
    000000c1: 	cmpq	%rax, %r8
    000000c4: 	je	.Ltmp1987 # Offset: 196
.Ltmp1996:
    000000ca: 	leaq	-0x1(%r12), %rax
    000000cf: 	movq	%rax, %rsi
    000000d2: 	shrq	$0x3f, %rsi
    000000d6: 	addq	%rax, %rsi
    000000d9: 	sarq	%rsi
    000000dc: 	cmpq	%r15, %r12
    000000df: 	jle	.Ltmp1988 # Offset: 223
    000000e5: 	leaq	_ZN15WorkerSubClass3IdEcvdEv(%rip), %r14
    000000ec: 	jmp	.Ltmp1989 # Offset: 236
    000000ee: 	nop # Size: 2
.Ltmp1992:
    000000f0: 	movsd	0x8(%rbp), %xmm0
.Ltmp1993:
    000000f5: 	movsd	0x8(%rcx), %xmm1
    000000fa: 	movq	%r12, %rbx
    000000fd: 	shlq	$0x4, %rbx
    00000101: 	addq	%r13, %rbx
    00000104: 	comisd	%xmm0, %xmm1
    00000108: 	jbe	.Ltmp1990 # Offset: 264
    0000010e: 	leaq	-0x1(%rsi), %rdx
    00000112: 	movsd	0x8(%rbp), %xmm0
    00000117: 	movq	%rsi, %r12
    0000011a: 	movq	%rdx, %rax
    0000011d: 	shrq	$0x3f, %rax
    00000121: 	movsd	%xmm0, 0x8(%rbx)
    00000126: 	addq	%rdx, %rax
    00000129: 	sarq	%rax
    0000012c: 	cmpq	%rsi, %r15
    0000012f: 	jge	.Ltmp1991 # Offset: 303
    00000135: 	movq	%rax, %rsi
.Ltmp1989:
    00000138: 	movq	%rsi, %rbp
    0000013b: 	shlq	$0x4, %rbp
    0000013f: 	addq	%r13, %rbp
    00000142: 	movq	(%rbp), %rax
    00000146: 	movq	(%rax), %rax
    00000149: 	cmpq	%r14, %rax
    0000014c: 	je	.Ltmp1992 # Offset: 332
    0000014e: 	movq	%rcx, 0x8(%rsp)
    00000153: 	movq	%rbp, %rdi
    00000156: 	movq	%rsi, (%rsp)
    0000015a: 	callq	*%rax # Offset: 346
    0000015c: 	movq	0x8(%rsp), %rcx
    00000161: 	movq	(%rsp), %rsi
    00000165: 	jmp	.Ltmp1993 # Offset: 357
    00000167: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1983:
    00000170: 	addq	%r13, %rbx
    00000173: 	movq	%rcx, 0x10(%rsp)
    00000178: 	movq	%rbp, %rdi
    0000017b: 	movq	%r8, 0x8(%rsp)
    00000180: 	movq	%rdx, (%rsp)
    00000184: 	callq	*%rax # Offset: 388
    00000186: 	movq	(%rbx), %rax
    00000189: 	movq	0x10(%rsp), %rcx
    0000018e: 	movq	0x8(%rsp), %r8
    00000193: 	movq	(%rsp), %rdx
    00000197: 	movapd	%xmm0, %xmm1
    0000019b: 	movq	(%rax), %rax
    0000019e: 	cmpq	%r14, %rax
    000001a1: 	je	.Ltmp1994 # Offset: 417
.Ltmp1984:
    000001a7: 	movq	%rcx, 0x18(%rsp)
    000001ac: 	movq	%rbx, %rdi
    000001af: 	movq	%r8, 0x10(%rsp)
    000001b4: 	movq	%rdx, 0x8(%rsp)
    000001b9: 	movsd	%xmm1, (%rsp)
    000001be: 	callq	*%rax # Offset: 446
    000001c0: 	movq	0x18(%rsp), %rcx
    000001c5: 	movq	0x10(%rsp), %r8
    000001ca: 	movq	0x8(%rsp), %rdx
    000001cf: 	movsd	(%rsp), %xmm1
    000001d4: 	jmp	.Ltmp1995 # Offset: 468
    000001d9: 	nopl	(%rax) # Size: 7
.Ltmp1991:
    000001e0: 	movsd	0x8(%rcx), %xmm1
    000001e5: 	movq	%rbp, %rbx
.Ltmp1990:
    000001e8: 	movsd	%xmm1, 0x8(%rbx)
    000001ed: 	addq	$0x28, %rsp
    000001f1: 	popq	%rbx
    000001f2: 	popq	%rbp
    000001f3: 	popq	%r12
    000001f5: 	popq	%r13
    000001f7: 	popq	%r14
    000001f9: 	popq	%r15
    000001fb: 	retq # Offset: 507
    000001fc: 	nopl	(%rax) # Size: 4
.Ltmp1980:
    00000200: 	movq	%rdx, %rbx
    00000203: 	shlq	$0x4, %rbx
    00000207: 	addq	%rsi, %rbx
    0000020a: 	cmpq	%rdi, %r12
    0000020d: 	jne	.Ltmp1988 # Offset: 525
    0000020f: 	movq	%r12, %rax
    00000212: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1987:
    00000218: 	movq	%rax, %rdx
    0000021b: 	leaq	-0x1(%rax), %r12
    0000021f: 	shlq	$0x4, %rdx
    00000223: 	movsd	-0x8(%r13,%rdx), %xmm0
    0000022a: 	movsd	%xmm0, 0x8(%rbx)
    0000022f: 	movq	%r12, %rbx
    00000232: 	shlq	$0x4, %rbx
    00000236: 	addq	%r13, %rbx
    00000239: 	jmp	.Ltmp1996 # Offset: 569
.Ltmp1988:
    0000023e: 	movsd	0x8(%rcx), %xmm1
    00000243: 	jmp	.Ltmp1990 # Offset: 579
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIP15WorkerSubClass3IdES2_EEvlT_lT0_"

Binary Function "_Z11TestOneTypeIdEvv" after disassembly {
  Number      : 146
  State       : disassembled
  Address     : 0xd180
  Size        : 0x44a9
  MaxSize     : 0x44b0
  Offset      : 0xd180
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIdEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0145:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0x84000(%rsp), %r11
.Ltmp1997:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp1997 # Offset: 37
    00000027: 	subq	$0xf68, %rsp
    0000002e: 	movq	%fs:0x28, %rax
    00000037: 	movq	%rax, 0x84f58(%rsp)
    0000003f: 	xorl	%eax, %eax
    00000041: 	leaq	0x2f050(%rsp), %rdx
    00000049: 	leaq	0x27350(%rsp), %rax
    00000051: 	movq	%rax, 0x28(%rsp)
    00000056: 	movq	%rdx, 0x18(%rsp)
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1998:
    00000060: 	leaq	_ZTV16TypeVirtualClassIdE+16(%rip), %rdi
    00000067: 	addq	$0x10, %rax
    0000006b: 	movq	%rdi, -0x10(%rax)
    0000006f: 	cmpq	%rax, %rdx
    00000072: 	jne	.Ltmp1998 # Offset: 114
    00000074: 	leaq	0x36d50(%rsp), %rdx
    0000007c: 	movq	0x18(%rsp), %rax
    00000081: 	movq	%rdx, 0x10(%rsp)
    00000086: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1999:
    00000090: 	leaq	_ZTV19TypeVirtualSubClassIdE+16(%rip), %rdi
    00000097: 	addq	$0x10, %rax
    0000009b: 	movq	%rdi, -0x10(%rax)
    0000009f: 	cmpq	%rax, %rdx
    000000a2: 	jne	.Ltmp1999 # Offset: 162
    000000a4: 	leaq	0x3ea50(%rsp), %rdx
    000000ac: 	movq	0x10(%rsp), %rax
    000000b1: 	movq	%rdx, (%rsp)
    000000b5: 	nopl	(%rax) # Size: 3
.Ltmp2000:
    000000b8: 	leaq	_ZTV14WorkerSubClassIdE+16(%rip), %rsi
    000000bf: 	addq	$0x10, %rax
    000000c3: 	movq	%rsi, -0x10(%rax)
    000000c7: 	cmpq	%rax, %rdx
    000000ca: 	jne	.Ltmp2000 # Offset: 202
    000000cc: 	leaq	0x46750(%rsp), %rdx
    000000d4: 	movq	(%rsp), %rax
    000000d8: 	movq	%rdx, 0x8(%rsp)
    000000dd: 	nopl	(%rax) # Size: 3
.Ltmp2001:
    000000e0: 	leaq	_ZTV18WorkerDeepSubClassIdE+16(%rip), %rdi
    000000e7: 	addq	$0x10, %rax
    000000eb: 	movq	%rdi, -0x10(%rax)
    000000ef: 	cmpq	%rax, %rdx
    000000f2: 	jne	.Ltmp2001 # Offset: 242
    000000f4: 	leaq	0x4e450(%rsp), %rdx
    000000fc: 	movq	0x8(%rsp), %rax
    00000101: 	movq	%rdx, 0x20(%rsp)
    00000106: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2002:
    00000110: 	leaq	_ZTV15WorkerSubClass2IdE+16(%rip), %rsi
    00000117: 	addq	$0x10, %rax
    0000011b: 	movq	%rsi, -0x10(%rax)
    0000011f: 	cmpq	%rax, %rdx
    00000122: 	jne	.Ltmp2002 # Offset: 290
    00000124: 	leaq	0x56150(%rsp), %rdx
    0000012c: 	movq	0x20(%rsp), %rax
    00000131: 	movq	%rdx, 0x38(%rsp)
    00000136: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2003:
    00000140: 	leaq	_ZTV15WorkerSubClass3IdE+16(%rip), %rdi
    00000147: 	addq	$0x10, %rax
    0000014b: 	movq	%rdi, -0x10(%rax)
    0000014f: 	cmpq	%rax, %rdx
    00000152: 	jne	.Ltmp2003 # Offset: 338
    00000154: 	leaq	0x5de50(%rsp), %rdx
    0000015c: 	movq	0x38(%rsp), %rax
    00000161: 	movq	%rdx, 0x80(%rsp)
    00000169: 	nopl	(%rax) # Size: 7
.Ltmp2004:
    00000170: 	leaq	_ZTV16TypeVirtualClassIdE+16(%rip), %rsi
    00000177: 	addq	$0x10, %rax
    0000017b: 	movq	%rsi, -0x10(%rax)
    0000017f: 	cmpq	%rax, %rdx
    00000182: 	jne	.Ltmp2004 # Offset: 386
    00000184: 	leaq	0x65b50(%rsp), %rdx
    0000018c: 	movq	0x80(%rsp), %rax
    00000194: 	movq	%rdx, 0x78(%rsp)
    00000199: 	nopl	(%rax) # Size: 7
.Ltmp2005:
    000001a0: 	leaq	_ZTV19TypeVirtualSubClassIdE+16(%rip), %rcx
    000001a7: 	addq	$0x10, %rax
    000001ab: 	movq	%rcx, -0x10(%rax)
    000001af: 	cmpq	%rax, %rdx
    000001b2: 	jne	.Ltmp2005 # Offset: 434
    000001b4: 	leaq	0x6d850(%rsp), %rdx
    000001bc: 	movq	0x78(%rsp), %rax
    000001c1: 	movq	%rdx, 0x88(%rsp)
    000001c9: 	nopl	(%rax) # Size: 7
.Ltmp2006:
    000001d0: 	leaq	_ZTV14WorkerSubClassIdE+16(%rip), %rdi
    000001d7: 	addq	$0x10, %rax
    000001db: 	movq	%rdi, -0x10(%rax)
    000001df: 	cmpq	%rax, %rdx
    000001e2: 	jne	.Ltmp2006 # Offset: 482
    000001e4: 	leaq	0x75550(%rsp), %rdx
    000001ec: 	movq	0x88(%rsp), %rax
    000001f4: 	movq	%rdx, 0x90(%rsp)
    000001fc: 	nopl	(%rax) # Size: 4
.Ltmp2007:
    00000200: 	leaq	_ZTV18WorkerDeepSubClassIdE+16(%rip), %rsi
    00000207: 	addq	$0x10, %rax
    0000020b: 	movq	%rsi, -0x10(%rax)
    0000020f: 	cmpq	%rax, %rdx
    00000212: 	jne	.Ltmp2007 # Offset: 530
    00000214: 	leaq	0x7d250(%rsp), %rdx
    0000021c: 	movq	0x90(%rsp), %rax
    00000224: 	movq	%rdx, 0x70(%rsp)
    00000229: 	nopl	(%rax) # Size: 7
.Ltmp2008:
    00000230: 	leaq	_ZTV15WorkerSubClass2IdE+16(%rip), %rcx
    00000237: 	addq	$0x10, %rax
    0000023b: 	movq	%rcx, -0x10(%rax)
    0000023f: 	cmpq	%rax, %rdx
    00000242: 	jne	.Ltmp2008 # Offset: 578
    00000244: 	leaq	0x84f50(%rsp), %rdx
    0000024c: 	movq	0x70(%rsp), %rax
    00000251: 	movq	%rdx, 0xc8(%rsp)
    00000259: 	nopl	(%rax) # Size: 7
.Ltmp2009:
    00000260: 	leaq	_ZTV15WorkerSubClass3IdE+16(%rip), %rdi
    00000267: 	addq	$0x10, %rax
    0000026b: 	movq	%rdi, -0x10(%rax)
    0000026f: 	cmpq	%rax, %rdx
    00000272: 	jne	.Ltmp2009 # Offset: 626
    00000274: 	leaq	0x1b0(%rsp), %rax
    0000027c: 	leaq	DATAat0x1d1e4(%rip), %rsi
    00000283: 	movq	%rax, %rdi
    00000286: 	movq	%rax, 0xa8(%rsp)
    0000028e: 	leaq	0x40d0(%rsp), %rbp
    00000296: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1" # Offset: 662
    0000029b: 	leaq	0x190(%rsp), %rax
    000002a3: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm4
    000002ab: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm5
    000002b3: 	movq	%rax, %rsi
    000002b6: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000002bd: 	movq	%rax, 0x60(%rsp)
    000002c2: 	movaps	%xmm4, 0x190(%rsp)
    000002ca: 	movaps	%xmm5, 0x1a0(%rsp)
    000002d2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E # Offset: 722
    000002d7: 	movl	iterations(%rip), %eax
    000002dd: 	movsd	init_value(%rip), %xmm0
    000002e5: 	movl	%eax, 0xdc(%rsp)
    000002ec: 	cvttsd2si	%xmm0, %eax
    000002f0: 	movapd	%xmm0, %xmm1
    000002f4: 	unpcklpd	%xmm1, %xmm1
    000002f8: 	addl	$0x159, %eax
    000002fd: 	cltq
    000002ff: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000306: 	leaq	0x250(%rsp), %rax
    0000030e: 	movq	%rax, 0x68(%rsp)
.Ltmp2010:
    00000313: 	movaps	%xmm1, (%rax)
    00000316: 	addq	$0x10, %rax
    0000031a: 	cmpq	%rax, %rbp
    0000031d: 	jne	.Ltmp2010 # Offset: 797
    0000031f: 	leaq	0x7f50(%rsp), %r12
    00000327: 	movq	%rbp, %rax
.Ltmp2011:
    0000032a: 	movaps	%xmm1, (%rax)
    0000032d: 	addq	$0x10, %rax
    00000331: 	cmpq	%rax, %r12
    00000334: 	jne	.Ltmp2011 # Offset: 820
    00000336: 	leaq	0xbdd0(%rsp), %rdx
    0000033e: 	movq	%r12, %rax
    00000341: 	movq	%rdx, 0x48(%rsp)
.Ltmp2012:
    00000346: 	movaps	%xmm1, (%rax)
    00000349: 	addq	$0x10, %rax
    0000034d: 	cmpq	%rax, %rdx
    00000350: 	jne	.Ltmp2012 # Offset: 848
    00000352: 	leaq	0xfc50(%rsp), %rdx
    0000035a: 	movq	0x48(%rsp), %rax
    0000035f: 	movq	%rdx, 0x50(%rsp)
.Ltmp2013:
    00000364: 	movaps	%xmm1, (%rax)
    00000367: 	addq	$0x10, %rax
    0000036b: 	cmpq	%rax, %rdx
    0000036e: 	jne	.Ltmp2013 # Offset: 878
    00000370: 	movq	0x28(%rsp), %rax
    00000375: 	movq	0x18(%rsp), %rdx
    0000037a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2014:
    00000380: 	addq	$0x10, %rax
    00000384: 	movsd	%xmm0, -0x8(%rax)
    00000389: 	cmpq	%rdx, %rax
    0000038c: 	jne	.Ltmp2014 # Offset: 908
    0000038e: 	movq	0x18(%rsp), %rax
    00000393: 	movq	0x10(%rsp), %rdx
    00000398: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2015:
    000003a0: 	addq	$0x10, %rax
    000003a4: 	movsd	%xmm0, -0x8(%rax)
    000003a9: 	cmpq	%rdx, %rax
    000003ac: 	jne	.Ltmp2015 # Offset: 940
    000003ae: 	movq	0x10(%rsp), %rax
    000003b3: 	movq	(%rsp), %rdx
    000003b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2016:
    000003c0: 	addq	$0x10, %rax
    000003c4: 	movsd	%xmm0, -0x8(%rax)
    000003c9: 	cmpq	%rdx, %rax
    000003cc: 	jne	.Ltmp2016 # Offset: 972
    000003ce: 	movq	(%rsp), %rax
    000003d2: 	movq	0x8(%rsp), %rdx
    000003d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2017:
    000003e0: 	addq	$0x10, %rax
    000003e4: 	movsd	%xmm0, -0x8(%rax)
    000003e9: 	cmpq	%rdx, %rax
    000003ec: 	jne	.Ltmp2017 # Offset: 1004
    000003ee: 	leaq	0x13ad0(%rsp), %rdx
    000003f6: 	movq	0x50(%rsp), %rax
    000003fb: 	movq	%rdx, 0x58(%rsp)
.Ltmp2018:
    00000400: 	movaps	%xmm1, (%rax)
    00000403: 	addq	$0x10, %rax
    00000407: 	cmpq	%rax, %rdx
    0000040a: 	jne	.Ltmp2018 # Offset: 1034
    0000040c: 	movq	0x8(%rsp), %rax
    00000411: 	movq	0x20(%rsp), %rdx
    00000416: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2019:
    00000420: 	addq	$0x10, %rax
    00000424: 	movsd	%xmm0, -0x8(%rax)
    00000429: 	cmpq	%rdx, %rax
    0000042c: 	jne	.Ltmp2019 # Offset: 1068
    0000042e: 	movq	0x20(%rsp), %rax
    00000433: 	movq	0x38(%rsp), %rdx
    00000438: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2020:
    00000440: 	addq	$0x10, %rax
    00000444: 	movsd	%xmm0, -0x8(%rax)
    00000449: 	cmpq	%rdx, %rax
    0000044c: 	jne	.Ltmp2020 # Offset: 1100
    0000044e: 	leaq	0x234d0(%rsp), %rax
    00000456: 	movq	0xa8(%rsp), %rsi
    0000045e: 	leaq	DATAat0x1d1eb(%rip), %rdx
    00000465: 	movq	%rax, %rdi
    00000468: 	movq	%rax, 0xa0(%rsp)
    00000470: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1136
    00000475: 	callq	clock@PLT # Offset: 1141
    0000047a: 	movl	iterations(%rip), %edx
    00000480: 	movq	%rax, start_time(%rip)
    00000487: 	testl	%edx, %edx
    00000489: 	jle	.Ltmp2021 # Offset: 1161
    0000048b: 	movq	DATAat0x1deb8(%rip), %r15
    00000492: 	xorl	%ebx, %ebx
    00000494: 	movsd	DATAat0x1ded0(%rip), %xmm4
    0000049c: 	leaq	DATAat0x1d1d4(%rip), %r13
    000004a3: 	movsd	%xmm4, 0x30(%rsp)
    000004a9: 	nopl	(%rax) # Size: 7
.Ltmp2024:
    000004b0: 	movq	0x68(%rsp), %rax
    000004b5: 	movq	%r15, %xmm0
    000004ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2022:
    000004c0: 	movsd	(%rax), %xmm1
    000004c4: 	addq	$0x10, %rax
    000004c8: 	addsd	%xmm1, %xmm0
    000004cc: 	movsd	-0x8(%rax), %xmm1
    000004d1: 	addsd	%xmm1, %xmm0
    000004d5: 	cmpq	%rax, %rbp
    000004d8: 	jne	.Ltmp2022 # Offset: 1240
    000004da: 	movsd	0x30(%rsp), %xmm1
    000004e0: 	mulsd	init_value(%rip), %xmm1
    000004e8: 	ucomisd	%xmm1, %xmm0
    000004ec: 	jp	.Ltmp2023 # Offset: 1260
    000004f2: 	jne	.Ltmp2023 # Offset: 1266
.Ltmp2366:
    000004f8: 	addl	$0x1, %ebx
    000004fb: 	cmpl	%edx, %ebx
    000004fd: 	jl	.Ltmp2024 # Offset: 1277
.Ltmp2021:
    000004ff: 	callq	clock@PLT # Offset: 1279
    00000504: 	movq	0xa0(%rsp), %rdi
    0000050c: 	pxor	%xmm0, %xmm0
    00000510: 	movq	%rax, end_time(%rip)
    00000517: 	subq	start_time(%rip), %rax
    0000051e: 	cvtsi2sd	%rax, %xmm0
    00000523: 	divsd	DATAat0x1dec0(%rip), %xmm0
    0000052b: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1323
    00000530: 	movq	0x234d0(%rsp), %rdi
    00000538: 	leaq	0x234e0(%rsp), %r13
    00000540: 	cmpq	%r13, %rdi
    00000543: 	je	.Ltmp2025 # Offset: 1347
    00000545: 	movq	0x234e0(%rsp), %rax
    0000054d: 	leaq	0x1(%rax), %rsi
    00000551: 	callq	_ZdlPvm@PLT # Offset: 1361
.Ltmp2025:
    00000556: 	movq	0xa8(%rsp), %rsi
    0000055e: 	movq	0xa0(%rsp), %rdi
    00000566: 	leaq	DATAat0x1d2a0(%rip), %rdx
    0000056d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1389
    00000572: 	callq	clock@PLT # Offset: 1394
    00000577: 	movl	iterations(%rip), %edx
    0000057d: 	movq	%rax, start_time(%rip)
    00000584: 	testl	%edx, %edx
    00000586: 	jle	.Ltmp2026 # Offset: 1414
    00000588: 	movq	DATAat0x1deb8(%rip), %r15
    0000058f: 	xorl	%ebx, %ebx
    00000591: 	movsd	DATAat0x1ded0(%rip), %xmm5
    00000599: 	leaq	DATAat0x1d1d4(%rip), %r14
    000005a0: 	movsd	%xmm5, 0x30(%rsp)
    000005a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2029:
    000005b0: 	movq	%rbp, %rax
    000005b3: 	movq	%r15, %xmm0
    000005b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2027:
    000005c0: 	movsd	(%rax), %xmm1
    000005c4: 	addq	$0x10, %rax
    000005c8: 	addsd	%xmm1, %xmm0
    000005cc: 	movsd	-0x8(%rax), %xmm1
    000005d1: 	addsd	%xmm1, %xmm0
    000005d5: 	cmpq	%rax, %r12
    000005d8: 	jne	.Ltmp2027 # Offset: 1496
    000005da: 	movsd	0x30(%rsp), %xmm1
    000005e0: 	mulsd	init_value(%rip), %xmm1
    000005e8: 	ucomisd	%xmm1, %xmm0
    000005ec: 	jp	.Ltmp2028 # Offset: 1516
    000005f2: 	jne	.Ltmp2028 # Offset: 1522
.Ltmp2365:
    000005f8: 	addl	$0x1, %ebx
    000005fb: 	cmpl	%edx, %ebx
    000005fd: 	jl	.Ltmp2029 # Offset: 1533
.Ltmp2026:
    000005ff: 	callq	clock@PLT # Offset: 1535
    00000604: 	movq	0xa0(%rsp), %rdi
    0000060c: 	pxor	%xmm0, %xmm0
    00000610: 	movq	%rax, end_time(%rip)
    00000617: 	subq	start_time(%rip), %rax
    0000061e: 	cvtsi2sd	%rax, %xmm0
    00000623: 	divsd	DATAat0x1dec0(%rip), %xmm0
    0000062b: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1579
    00000630: 	movq	0x234d0(%rsp), %rdi
    00000638: 	cmpq	%r13, %rdi
    0000063b: 	je	.Ltmp2030 # Offset: 1595
    0000063d: 	movq	0x234e0(%rsp), %rax
    00000645: 	leaq	0x1(%rax), %rsi
    00000649: 	callq	_ZdlPvm@PLT # Offset: 1609
.Ltmp2030:
    0000064e: 	movq	0xa8(%rsp), %rsi
    00000656: 	movq	0xa0(%rsp), %rdi
    0000065e: 	leaq	DATAat0x1d2c8(%rip), %rdx
    00000665: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1637
    0000066a: 	callq	clock@PLT # Offset: 1642
    0000066f: 	movl	iterations(%rip), %edx
    00000675: 	movq	%rax, start_time(%rip)
    0000067c: 	testl	%edx, %edx
    0000067e: 	jle	.Ltmp2031 # Offset: 1662
    00000680: 	movq	DATAat0x1deb8(%rip), %r15
    00000687: 	xorl	%ebx, %ebx
    00000689: 	movsd	DATAat0x1ded0(%rip), %xmm4
    00000691: 	leaq	DATAat0x1d1d4(%rip), %r14
    00000698: 	movsd	%xmm4, 0x30(%rsp)
    0000069e: 	nop # Size: 2
.Ltmp2034:
    000006a0: 	movq	0x48(%rsp), %rcx
    000006a5: 	movq	%r12, %rax
    000006a8: 	movq	%r15, %xmm0
    000006ad: 	nopl	(%rax) # Size: 3
.Ltmp2032:
    000006b0: 	movsd	(%rax), %xmm1
    000006b4: 	addq	$0x10, %rax
    000006b8: 	addsd	%xmm1, %xmm0
    000006bc: 	movsd	-0x8(%rax), %xmm1
    000006c1: 	addsd	%xmm1, %xmm0
    000006c5: 	cmpq	%rax, %rcx
    000006c8: 	jne	.Ltmp2032 # Offset: 1736
    000006ca: 	movsd	0x30(%rsp), %xmm1
    000006d0: 	mulsd	init_value(%rip), %xmm1
    000006d8: 	ucomisd	%xmm1, %xmm0
    000006dc: 	jp	.Ltmp2033 # Offset: 1756
    000006e2: 	jne	.Ltmp2033 # Offset: 1762
.Ltmp2364:
    000006e8: 	addl	$0x1, %ebx
    000006eb: 	cmpl	%edx, %ebx
    000006ed: 	jl	.Ltmp2034 # Offset: 1773
.Ltmp2031:
    000006ef: 	callq	clock@PLT # Offset: 1775
    000006f4: 	movq	0xa0(%rsp), %rdi
    000006fc: 	pxor	%xmm0, %xmm0
    00000700: 	movq	%rax, end_time(%rip)
    00000707: 	subq	start_time(%rip), %rax
    0000070e: 	cvtsi2sd	%rax, %xmm0
    00000713: 	divsd	DATAat0x1dec0(%rip), %xmm0
    0000071b: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1819
    00000720: 	movq	0x234d0(%rsp), %rdi
    00000728: 	cmpq	%r13, %rdi
    0000072b: 	je	.Ltmp2035 # Offset: 1835
    0000072d: 	movq	0x234e0(%rsp), %rax
    00000735: 	leaq	0x1(%rax), %rsi
    00000739: 	callq	_ZdlPvm@PLT # Offset: 1849
.Ltmp2035:
    0000073e: 	movq	0xa8(%rsp), %rsi
    00000746: 	movq	0xa0(%rsp), %rdi
    0000074e: 	leaq	DATAat0x1d2f0(%rip), %rdx
    00000755: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1877
    0000075a: 	callq	clock@PLT # Offset: 1882
    0000075f: 	movl	iterations(%rip), %edx
    00000765: 	movq	%rax, start_time(%rip)
    0000076c: 	testl	%edx, %edx
    0000076e: 	jle	.Ltmp2036 # Offset: 1902
    00000770: 	movq	DATAat0x1deb8(%rip), %r15
    00000777: 	xorl	%ebx, %ebx
    00000779: 	movsd	DATAat0x1ded0(%rip), %xmm5
    00000781: 	leaq	DATAat0x1d1d4(%rip), %r14
    00000788: 	movsd	%xmm5, 0x30(%rsp)
    0000078e: 	nop # Size: 2
.Ltmp2039:
    00000790: 	movq	0x48(%rsp), %rax
    00000795: 	movq	0x50(%rsp), %rcx
    0000079a: 	movq	%r15, %xmm0
    0000079f: 	nop # Size: 1
.Ltmp2037:
    000007a0: 	movsd	(%rax), %xmm1
    000007a4: 	addq	$0x10, %rax
    000007a8: 	addsd	%xmm1, %xmm0
    000007ac: 	movsd	-0x8(%rax), %xmm1
    000007b1: 	addsd	%xmm1, %xmm0
    000007b5: 	cmpq	%rax, %rcx
    000007b8: 	jne	.Ltmp2037 # Offset: 1976
    000007ba: 	movsd	0x30(%rsp), %xmm1
    000007c0: 	mulsd	init_value(%rip), %xmm1
    000007c8: 	ucomisd	%xmm1, %xmm0
    000007cc: 	jp	.Ltmp2038 # Offset: 1996
    000007d2: 	jne	.Ltmp2038 # Offset: 2002
.Ltmp2363:
    000007d8: 	addl	$0x1, %ebx
    000007db: 	cmpl	%edx, %ebx
    000007dd: 	jl	.Ltmp2039 # Offset: 2013
.Ltmp2036:
    000007df: 	callq	clock@PLT # Offset: 2015
    000007e4: 	movq	0xa0(%rsp), %rdi
    000007ec: 	pxor	%xmm0, %xmm0
    000007f0: 	movq	%rax, end_time(%rip)
    000007f7: 	subq	start_time(%rip), %rax
    000007fe: 	cvtsi2sd	%rax, %xmm0
    00000803: 	divsd	DATAat0x1dec0(%rip), %xmm0
    0000080b: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2059
    00000810: 	movq	0x234d0(%rsp), %rdi
    00000818: 	cmpq	%r13, %rdi
    0000081b: 	je	.Ltmp2040 # Offset: 2075
    0000081d: 	movq	0x234e0(%rsp), %rax
    00000825: 	leaq	0x1(%rax), %rsi
    00000829: 	callq	_ZdlPvm@PLT # Offset: 2089
.Ltmp2040:
    0000082e: 	movq	0xa8(%rsp), %rsi
    00000836: 	movq	0xa0(%rsp), %rdi
    0000083e: 	leaq	DATAat0x1d318(%rip), %rdx
    00000845: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2117
    0000084a: 	callq	clock@PLT # Offset: 2122
    0000084f: 	movl	iterations(%rip), %edx
    00000855: 	movq	%rax, start_time(%rip)
    0000085c: 	testl	%edx, %edx
    0000085e: 	jle	.Ltmp2041 # Offset: 2142
    00000860: 	movq	DATAat0x1deb8(%rip), %r15
    00000867: 	xorl	%ebx, %ebx
    00000869: 	movsd	DATAat0x1ded0(%rip), %xmm4
    00000871: 	leaq	DATAat0x1d1d4(%rip), %r14
    00000878: 	movsd	%xmm4, 0x30(%rsp)
    0000087e: 	nop # Size: 2
.Ltmp2044:
    00000880: 	movq	0x50(%rsp), %rax
    00000885: 	movq	0x58(%rsp), %rcx
    0000088a: 	movq	%r15, %xmm0
    0000088f: 	nop # Size: 1
.Ltmp2042:
    00000890: 	movsd	(%rax), %xmm1
    00000894: 	addq	$0x10, %rax
    00000898: 	addsd	%xmm1, %xmm0
    0000089c: 	movsd	-0x8(%rax), %xmm1
    000008a1: 	addsd	%xmm1, %xmm0
    000008a5: 	cmpq	%rax, %rcx
    000008a8: 	jne	.Ltmp2042 # Offset: 2216
    000008aa: 	movsd	0x30(%rsp), %xmm1
    000008b0: 	mulsd	init_value(%rip), %xmm1
    000008b8: 	ucomisd	%xmm1, %xmm0
    000008bc: 	jp	.Ltmp2043 # Offset: 2236
    000008c2: 	jne	.Ltmp2043 # Offset: 2242
.Ltmp2362:
    000008c8: 	addl	$0x1, %ebx
    000008cb: 	cmpl	%edx, %ebx
    000008cd: 	jl	.Ltmp2044 # Offset: 2253
.Ltmp2041:
    000008cf: 	callq	clock@PLT # Offset: 2255
    000008d4: 	movq	0xa0(%rsp), %rdi
    000008dc: 	pxor	%xmm0, %xmm0
    000008e0: 	movq	%rax, end_time(%rip)
    000008e7: 	subq	start_time(%rip), %rax
    000008ee: 	cvtsi2sd	%rax, %xmm0
    000008f3: 	divsd	DATAat0x1dec0(%rip), %xmm0
    000008fb: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2299
    00000900: 	movq	0x234d0(%rsp), %rdi
    00000908: 	cmpq	%r13, %rdi
    0000090b: 	je	.Ltmp2045 # Offset: 2315
    0000090d: 	movq	0x234e0(%rsp), %rax
    00000915: 	leaq	0x1(%rax), %rsi
    00000919: 	callq	_ZdlPvm@PLT # Offset: 2329
.Ltmp2045:
    0000091e: 	movq	0xa8(%rsp), %rsi
    00000926: 	movq	0xa0(%rsp), %rdi
    0000092e: 	leaq	DATAat0x1d340(%rip), %rdx
    00000935: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2357
    0000093a: 	callq	clock@PLT # Offset: 2362
    0000093f: 	movl	iterations(%rip), %edx
    00000945: 	movq	%rax, start_time(%rip)
    0000094c: 	testl	%edx, %edx
    0000094e: 	jle	.Ltmp2046 # Offset: 2382
    00000950: 	movq	DATAat0x1deb8(%rip), %r15
    00000957: 	xorl	%ebx, %ebx
    00000959: 	movsd	DATAat0x1ded0(%rip), %xmm5
    00000961: 	leaq	DATAat0x1d1d4(%rip), %r14
    00000968: 	movsd	%xmm5, 0x30(%rsp)
    0000096e: 	nop # Size: 2
.Ltmp2049:
    00000970: 	movq	0x28(%rsp), %rax
    00000975: 	movq	0x18(%rsp), %rcx
    0000097a: 	movq	%r15, %xmm0
    0000097f: 	nop # Size: 1
.Ltmp2047:
    00000980: 	addq	$0x10, %rax
    00000984: 	addsd	-0x8(%rax), %xmm0
    00000989: 	cmpq	%rcx, %rax
    0000098c: 	jne	.Ltmp2047 # Offset: 2444
    0000098e: 	movsd	0x30(%rsp), %xmm1
    00000994: 	mulsd	init_value(%rip), %xmm1
    0000099c: 	ucomisd	%xmm1, %xmm0
    000009a0: 	jp	.Ltmp2048 # Offset: 2464
    000009a6: 	jne	.Ltmp2048 # Offset: 2470
.Ltmp2361:
    000009ac: 	addl	$0x1, %ebx
    000009af: 	cmpl	%edx, %ebx
    000009b1: 	jl	.Ltmp2049 # Offset: 2481
.Ltmp2046:
    000009b3: 	callq	clock@PLT # Offset: 2483
    000009b8: 	movq	0xa0(%rsp), %rdi
    000009c0: 	pxor	%xmm0, %xmm0
    000009c4: 	movq	%rax, end_time(%rip)
    000009cb: 	subq	start_time(%rip), %rax
    000009d2: 	cvtsi2sd	%rax, %xmm0
    000009d7: 	divsd	DATAat0x1dec0(%rip), %xmm0
    000009df: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2527
    000009e4: 	movq	0x234d0(%rsp), %rdi
    000009ec: 	cmpq	%r13, %rdi
    000009ef: 	je	.Ltmp2050 # Offset: 2543
    000009f1: 	movq	0x234e0(%rsp), %rax
    000009f9: 	leaq	0x1(%rax), %rsi
    000009fd: 	callq	_ZdlPvm@PLT # Offset: 2557
.Ltmp2050:
    00000a02: 	movq	0xa8(%rsp), %rsi
    00000a0a: 	movq	0xa0(%rsp), %rdi
    00000a12: 	leaq	DATAat0x1d368(%rip), %rdx
    00000a19: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2585
    00000a1e: 	callq	clock@PLT # Offset: 2590
    00000a23: 	movl	iterations(%rip), %edx
    00000a29: 	movq	%rax, start_time(%rip)
    00000a30: 	testl	%edx, %edx
    00000a32: 	jle	.Ltmp2051 # Offset: 2610
    00000a34: 	movq	DATAat0x1deb8(%rip), %r15
    00000a3b: 	xorl	%ebx, %ebx
    00000a3d: 	movsd	DATAat0x1ded0(%rip), %xmm4
    00000a45: 	leaq	DATAat0x1d1d4(%rip), %r14
    00000a4c: 	movsd	%xmm4, 0x30(%rsp)
    00000a52: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2054:
    00000a58: 	movq	0x18(%rsp), %rax
    00000a5d: 	movq	0x10(%rsp), %rcx
    00000a62: 	movq	%r15, %xmm0
    00000a67: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2052:
    00000a70: 	addq	$0x10, %rax
    00000a74: 	addsd	-0x8(%rax), %xmm0
    00000a79: 	cmpq	%rcx, %rax
    00000a7c: 	jne	.Ltmp2052 # Offset: 2684
    00000a7e: 	movsd	0x30(%rsp), %xmm1
    00000a84: 	mulsd	init_value(%rip), %xmm1
    00000a8c: 	ucomisd	%xmm1, %xmm0
    00000a90: 	jp	.Ltmp2053 # Offset: 2704
    00000a96: 	jne	.Ltmp2053 # Offset: 2710
.Ltmp2360:
    00000a9c: 	addl	$0x1, %ebx
    00000a9f: 	cmpl	%edx, %ebx
    00000aa1: 	jl	.Ltmp2054 # Offset: 2721
.Ltmp2051:
    00000aa3: 	callq	clock@PLT # Offset: 2723
    00000aa8: 	movq	0xa0(%rsp), %rdi
    00000ab0: 	pxor	%xmm0, %xmm0
    00000ab4: 	movq	%rax, end_time(%rip)
    00000abb: 	subq	start_time(%rip), %rax
    00000ac2: 	cvtsi2sd	%rax, %xmm0
    00000ac7: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00000acf: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2767
    00000ad4: 	movq	0x234d0(%rsp), %rdi
    00000adc: 	cmpq	%r13, %rdi
    00000adf: 	je	.Ltmp2055 # Offset: 2783
    00000ae1: 	movq	0x234e0(%rsp), %rax
    00000ae9: 	leaq	0x1(%rax), %rsi
    00000aed: 	callq	_ZdlPvm@PLT # Offset: 2797
.Ltmp2055:
    00000af2: 	movq	0xa8(%rsp), %rsi
    00000afa: 	movq	0xa0(%rsp), %rdi
    00000b02: 	leaq	DATAat0x1d390(%rip), %rdx
    00000b09: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2825
    00000b0e: 	callq	clock@PLT # Offset: 2830
    00000b13: 	movl	iterations(%rip), %edx
    00000b19: 	movq	%rax, start_time(%rip)
    00000b20: 	testl	%edx, %edx
    00000b22: 	jle	.Ltmp2056 # Offset: 2850
    00000b24: 	movq	DATAat0x1deb8(%rip), %r15
    00000b2b: 	xorl	%ebx, %ebx
    00000b2d: 	movsd	DATAat0x1ded0(%rip), %xmm5
    00000b35: 	leaq	DATAat0x1d1d4(%rip), %r14
    00000b3c: 	movsd	%xmm5, 0x30(%rsp)
    00000b42: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2059:
    00000b48: 	movq	0x10(%rsp), %rax
    00000b4d: 	movq	(%rsp), %rcx
    00000b51: 	movq	%r15, %xmm0
    00000b56: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2057:
    00000b60: 	addq	$0x10, %rax
    00000b64: 	addsd	-0x8(%rax), %xmm0
    00000b69: 	cmpq	%rcx, %rax
    00000b6c: 	jne	.Ltmp2057 # Offset: 2924
    00000b6e: 	movsd	0x30(%rsp), %xmm1
    00000b74: 	mulsd	init_value(%rip), %xmm1
    00000b7c: 	ucomisd	%xmm1, %xmm0
    00000b80: 	jp	.Ltmp2058 # Offset: 2944
    00000b86: 	jne	.Ltmp2058 # Offset: 2950
.Ltmp2359:
    00000b8c: 	addl	$0x1, %ebx
    00000b8f: 	cmpl	%edx, %ebx
    00000b91: 	jl	.Ltmp2059 # Offset: 2961
.Ltmp2056:
    00000b93: 	callq	clock@PLT # Offset: 2963
    00000b98: 	movq	0xa0(%rsp), %rdi
    00000ba0: 	pxor	%xmm0, %xmm0
    00000ba4: 	movq	%rax, end_time(%rip)
    00000bab: 	subq	start_time(%rip), %rax
    00000bb2: 	cvtsi2sd	%rax, %xmm0
    00000bb7: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00000bbf: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3007
    00000bc4: 	movq	0x234d0(%rsp), %rdi
    00000bcc: 	cmpq	%r13, %rdi
    00000bcf: 	je	.Ltmp2060 # Offset: 3023
    00000bd1: 	movq	0x234e0(%rsp), %rax
    00000bd9: 	leaq	0x1(%rax), %rsi
    00000bdd: 	callq	_ZdlPvm@PLT # Offset: 3037
.Ltmp2060:
    00000be2: 	movq	0xa8(%rsp), %rsi
    00000bea: 	movq	0xa0(%rsp), %rdi
    00000bf2: 	leaq	DATAat0x1d3b8(%rip), %rdx
    00000bf9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3065
    00000bfe: 	callq	clock@PLT # Offset: 3070
    00000c03: 	movl	iterations(%rip), %edx
    00000c09: 	movq	%rax, start_time(%rip)
    00000c10: 	testl	%edx, %edx
    00000c12: 	jle	.Ltmp2061 # Offset: 3090
    00000c14: 	movq	DATAat0x1deb8(%rip), %r15
    00000c1b: 	xorl	%ebx, %ebx
    00000c1d: 	movsd	DATAat0x1ded0(%rip), %xmm4
    00000c25: 	leaq	DATAat0x1d1d4(%rip), %r14
    00000c2c: 	movsd	%xmm4, 0x30(%rsp)
    00000c32: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2064:
    00000c38: 	movq	(%rsp), %rax
    00000c3c: 	movq	0x8(%rsp), %rcx
    00000c41: 	movq	%r15, %xmm0
    00000c46: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2062:
    00000c50: 	addq	$0x10, %rax
    00000c54: 	addsd	-0x8(%rax), %xmm0
    00000c59: 	cmpq	%rcx, %rax
    00000c5c: 	jne	.Ltmp2062 # Offset: 3164
    00000c5e: 	movsd	0x30(%rsp), %xmm1
    00000c64: 	mulsd	init_value(%rip), %xmm1
    00000c6c: 	ucomisd	%xmm1, %xmm0
    00000c70: 	jp	.Ltmp2063 # Offset: 3184
    00000c76: 	jne	.Ltmp2063 # Offset: 3190
.Ltmp2358:
    00000c7c: 	addl	$0x1, %ebx
    00000c7f: 	cmpl	%edx, %ebx
    00000c81: 	jl	.Ltmp2064 # Offset: 3201
.Ltmp2061:
    00000c83: 	callq	clock@PLT # Offset: 3203
    00000c88: 	movq	0xa0(%rsp), %rdi
    00000c90: 	pxor	%xmm0, %xmm0
    00000c94: 	movq	%rax, end_time(%rip)
    00000c9b: 	subq	start_time(%rip), %rax
    00000ca2: 	cvtsi2sd	%rax, %xmm0
    00000ca7: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00000caf: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3247
    00000cb4: 	movq	0x234d0(%rsp), %rdi
    00000cbc: 	cmpq	%r13, %rdi
    00000cbf: 	je	.Ltmp2065 # Offset: 3263
    00000cc1: 	movq	0x234e0(%rsp), %rax
    00000cc9: 	leaq	0x1(%rax), %rsi
    00000ccd: 	callq	_ZdlPvm@PLT # Offset: 3277
.Ltmp2065:
    00000cd2: 	movq	0xa8(%rsp), %rsi
    00000cda: 	movq	0xa0(%rsp), %rdi
    00000ce2: 	leaq	DATAat0x1d3e0(%rip), %rdx
    00000ce9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3305
    00000cee: 	callq	clock@PLT # Offset: 3310
    00000cf3: 	movl	iterations(%rip), %edx
    00000cf9: 	movq	%rax, start_time(%rip)
    00000d00: 	testl	%edx, %edx
    00000d02: 	jle	.Ltmp2066 # Offset: 3330
    00000d04: 	movq	DATAat0x1deb8(%rip), %r15
    00000d0b: 	xorl	%ebx, %ebx
    00000d0d: 	movsd	DATAat0x1ded0(%rip), %xmm5
    00000d15: 	leaq	DATAat0x1d1d4(%rip), %r14
    00000d1c: 	movsd	%xmm5, 0x30(%rsp)
    00000d22: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2069:
    00000d28: 	movq	0x8(%rsp), %rax
    00000d2d: 	movq	0x20(%rsp), %rcx
    00000d32: 	movq	%r15, %xmm0
    00000d37: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2067:
    00000d40: 	addq	$0x10, %rax
    00000d44: 	addsd	-0x8(%rax), %xmm0
    00000d49: 	cmpq	%rcx, %rax
    00000d4c: 	jne	.Ltmp2067 # Offset: 3404
    00000d4e: 	movsd	0x30(%rsp), %xmm1
    00000d54: 	mulsd	init_value(%rip), %xmm1
    00000d5c: 	ucomisd	%xmm1, %xmm0
    00000d60: 	jp	.Ltmp2068 # Offset: 3424
    00000d66: 	jne	.Ltmp2068 # Offset: 3430
.Ltmp2357:
    00000d6c: 	addl	$0x1, %ebx
    00000d6f: 	cmpl	%edx, %ebx
    00000d71: 	jl	.Ltmp2069 # Offset: 3441
.Ltmp2066:
    00000d73: 	callq	clock@PLT # Offset: 3443
    00000d78: 	movq	0xa0(%rsp), %rdi
    00000d80: 	pxor	%xmm0, %xmm0
    00000d84: 	movq	%rax, end_time(%rip)
    00000d8b: 	subq	start_time(%rip), %rax
    00000d92: 	cvtsi2sd	%rax, %xmm0
    00000d97: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00000d9f: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3487
    00000da4: 	movq	0x234d0(%rsp), %rdi
    00000dac: 	cmpq	%r13, %rdi
    00000daf: 	je	.Ltmp2070 # Offset: 3503
    00000db1: 	movq	0x234e0(%rsp), %rax
    00000db9: 	leaq	0x1(%rax), %rsi
    00000dbd: 	callq	_ZdlPvm@PLT # Offset: 3517
.Ltmp2070:
    00000dc2: 	movq	0xa8(%rsp), %rsi
    00000dca: 	movq	0xa0(%rsp), %rdi
    00000dd2: 	leaq	DATAat0x1d408(%rip), %rdx
    00000dd9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3545
    00000dde: 	callq	clock@PLT # Offset: 3550
    00000de3: 	movl	iterations(%rip), %edx
    00000de9: 	movq	%rax, start_time(%rip)
    00000df0: 	testl	%edx, %edx
    00000df2: 	jle	.Ltmp2071 # Offset: 3570
    00000df4: 	movq	DATAat0x1deb8(%rip), %r15
    00000dfb: 	xorl	%ebx, %ebx
    00000dfd: 	movsd	DATAat0x1ded0(%rip), %xmm4
    00000e05: 	leaq	DATAat0x1d1d4(%rip), %r14
    00000e0c: 	movsd	%xmm4, 0x30(%rsp)
    00000e12: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2074:
    00000e18: 	movq	0x20(%rsp), %rax
    00000e1d: 	movq	0x38(%rsp), %rcx
    00000e22: 	movq	%r15, %xmm0
    00000e27: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2072:
    00000e30: 	addq	$0x10, %rax
    00000e34: 	addsd	-0x8(%rax), %xmm0
    00000e39: 	cmpq	%rcx, %rax
    00000e3c: 	jne	.Ltmp2072 # Offset: 3644
    00000e3e: 	movsd	0x30(%rsp), %xmm1
    00000e44: 	mulsd	init_value(%rip), %xmm1
    00000e4c: 	ucomisd	%xmm1, %xmm0
    00000e50: 	jp	.Ltmp2073 # Offset: 3664
    00000e56: 	jne	.Ltmp2073 # Offset: 3670
.Ltmp2356:
    00000e5c: 	addl	$0x1, %ebx
    00000e5f: 	cmpl	%edx, %ebx
    00000e61: 	jl	.Ltmp2074 # Offset: 3681
.Ltmp2071:
    00000e63: 	callq	clock@PLT # Offset: 3683
    00000e68: 	movq	0xa0(%rsp), %rdi
    00000e70: 	pxor	%xmm0, %xmm0
    00000e74: 	movq	%rax, end_time(%rip)
    00000e7b: 	subq	start_time(%rip), %rax
    00000e82: 	cvtsi2sd	%rax, %xmm0
    00000e87: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00000e8f: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3727
    00000e94: 	movq	0x234d0(%rsp), %rdi
    00000e9c: 	cmpq	%r13, %rdi
    00000e9f: 	je	.Ltmp2075 # Offset: 3743
    00000ea1: 	movq	0x234e0(%rsp), %rax
    00000ea9: 	leaq	0x1(%rax), %rsi
    00000ead: 	callq	_ZdlPvm@PLT # Offset: 3757
.Ltmp2075:
    00000eb2: 	movq	0xa8(%rsp), %rsi
    00000eba: 	leaq	0x1d0(%rsp), %rdi
    00000ec2: 	leaq	DATAat0x1d207(%rip), %rdx
    00000ec9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3785
    00000ece: 	movl	iterations(%rip), %edx
    00000ed4: 	movl	$0x1, %r8d
    00000eda: 	movl	$0x1, %ecx
    00000edf: 	movq	0x1d0(%rsp), %rdi
    00000ee7: 	movl	$0x7d0, %esi
    00000eec: 	callq	_Z9summarizePKciiii # Offset: 3820
    00000ef1: 	movslq	iterations(%rip), %rax
    00000ef8: 	leaq	0x17950(%rsp), %r9
    00000f00: 	movabsq	$0x5851f42d4c957f2d, %rdi
    00000f0a: 	movabsq	$0x14057b7ef767814f, %rsi
    00000f14: 	movq	%r9, 0xb0(%rsp)
    00000f1c: 	movq	%rax, %rdx
    00000f1f: 	imulq	$0x51eb851f, %rax, %rax
    00000f26: 	sarl	$0x1f, %edx
    00000f29: 	sarq	$0x29, %rax
    00000f2d: 	subl	%edx, %eax
    00000f2f: 	movq	0x58(%rsp), %rdx
    00000f34: 	movl	%eax, iterations(%rip)
    00000f3a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2076:
    00000f40: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    00000f47: 	pxor	%xmm0, %xmm0
    00000f4b: 	addq	$0x8, %rdx
    00000f4f: 	imulq	%rdi, %rax
    00000f53: 	addq	%rsi, %rax
    00000f56: 	movq	%rax, %rcx
    00000f59: 	movq	%rax, %r8
    00000f5c: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000f63: 	shrq	$0x14, %rcx
    00000f67: 	shlq	$0x17, %r8
    00000f6b: 	xorq	%r8, %rcx
    00000f6e: 	xorq	%rcx, %rax
    00000f71: 	sarq	$0x3, %rax
    00000f75: 	cvtsi2sd	%rax, %xmm0
    00000f7a: 	movsd	%xmm0, -0x8(%rdx)
    00000f7f: 	cmpq	%r9, %rdx
    00000f82: 	jne	.Ltmp2076 # Offset: 3970
    00000f84: 	movq	0x58(%rsp), %rbx
    00000f89: 	movq	0xb0(%rsp), %r15
    00000f91: 	movl	$0x3e80, %edx
    00000f96: 	movq	%rbx, %rsi
    00000f99: 	movq	%r15, %rdi
    00000f9c: 	callq	memcpy@PLT # Offset: 3996
    00000fa1: 	leaq	0x1b7d0(%rsp), %rax
    00000fa9: 	movl	$0x3e80, %edx
    00000fae: 	movq	%rbx, %rsi
    00000fb1: 	movq	%rax, %rdi
    00000fb4: 	movq	%rax, 0xb8(%rsp)
    00000fbc: 	callq	memcpy@PLT # Offset: 4028
    00000fc1: 	leaq	0x1f650(%rsp), %rax
    00000fc9: 	movl	$0x3e80, %edx
    00000fce: 	movq	%rbx, %rsi
    00000fd1: 	movq	%rax, %rdi
    00000fd4: 	movq	%rax, 0xc0(%rsp)
    00000fdc: 	callq	memcpy@PLT # Offset: 4060
    00000fe1: 	movq	0xa0(%rsp), %rdi
    00000fe9: 	movl	$0x3e80, %edx
    00000fee: 	movq	%rbx, %rsi
    00000ff1: 	callq	memcpy@PLT # Offset: 4081
    00000ff6: 	movq	%rbx, %rcx
    00000ff9: 	movq	%rbx, %rax
    00000ffc: 	movq	%r15, %rsi
    00000fff: 	leaq	0x56158(%rsp), %rdx
.Ltmp2077:
    00001007: 	movapd	(%rax), %xmm0
    0000100b: 	addq	$0x10, %rax
    0000100f: 	addq	$0x20, %rdx
    00001013: 	movlpd	%xmm0, -0x20(%rdx)
    00001018: 	movhpd	%xmm0, -0x10(%rdx)
    0000101d: 	cmpq	%rax, %rsi
    00001020: 	jne	.Ltmp2077 # Offset: 4128
    00001022: 	movq	0x80(%rsp), %rsi
    0000102a: 	movq	0x58(%rsp), %rdx
    0000102f: 	leaq	0x5de58(%rsp), %rax
    00001037: 	addq	$0x7d08, %rsi
.Ltmp2078:
    0000103e: 	movapd	(%rdx), %xmm0
    00001042: 	addq	$0x20, %rax
    00001046: 	addq	$0x10, %rdx
    0000104a: 	movlpd	%xmm0, -0x20(%rax)
    0000104f: 	movhpd	%xmm0, -0x10(%rax)
    00001054: 	cmpq	%rax, %rsi
    00001057: 	jne	.Ltmp2078 # Offset: 4183
    00001059: 	movq	0x78(%rsp), %rsi
    0000105e: 	movq	0x58(%rsp), %rdx
    00001063: 	leaq	0x65b58(%rsp), %rax
    0000106b: 	addq	$0x7d08, %rsi
.Ltmp2079:
    00001072: 	movapd	(%rdx), %xmm0
    00001076: 	addq	$0x20, %rax
    0000107a: 	addq	$0x10, %rdx
    0000107e: 	movlpd	%xmm0, -0x20(%rax)
    00001083: 	movhpd	%xmm0, -0x10(%rax)
    00001088: 	cmpq	%rax, %rsi
    0000108b: 	jne	.Ltmp2079 # Offset: 4235
    0000108d: 	movq	0x58(%rsp), %rax
    00001092: 	movq	0xb0(%rsp), %rsi
    0000109a: 	leaq	0x6d858(%rsp), %rdx
.Ltmp2080:
    000010a2: 	movapd	(%rax), %xmm0
    000010a6: 	addq	$0x10, %rax
    000010aa: 	addq	$0x20, %rdx
    000010ae: 	movlpd	%xmm0, -0x20(%rdx)
    000010b3: 	movhpd	%xmm0, -0x10(%rdx)
    000010b8: 	cmpq	%rax, %rsi
    000010bb: 	jne	.Ltmp2080 # Offset: 4283
    000010bd: 	movq	0x58(%rsp), %rax
    000010c2: 	movq	0xb0(%rsp), %rsi
    000010ca: 	leaq	0x75558(%rsp), %rdx
.Ltmp2081:
    000010d2: 	movapd	(%rax), %xmm0
    000010d6: 	addq	$0x10, %rax
    000010da: 	addq	$0x20, %rdx
    000010de: 	movlpd	%xmm0, -0x20(%rdx)
    000010e3: 	movhpd	%xmm0, -0x10(%rdx)
    000010e8: 	cmpq	%rax, %rsi
    000010eb: 	jne	.Ltmp2081 # Offset: 4331
    000010ed: 	movq	0x70(%rsp), %rsi
    000010f2: 	leaq	0x7d258(%rsp), %rax
    000010fa: 	leaq	0x7d08(%rsi), %rdx
.Ltmp2082:
    00001101: 	movapd	(%rcx), %xmm0
    00001105: 	addq	$0x20, %rax
    00001109: 	addq	$0x10, %rcx
    0000110d: 	movlpd	%xmm0, -0x20(%rax)
    00001112: 	movhpd	%xmm0, -0x10(%rax)
    00001117: 	cmpq	%rax, %rdx
    0000111a: 	jne	.Ltmp2082 # Offset: 4378
    0000111c: 	leaq	0x230(%rsp), %rax
    00001124: 	movq	0xa8(%rsp), %rsi
    0000112c: 	leaq	DATAat0x1d430(%rip), %rdx
    00001133: 	movq	%rax, %rdi
    00001136: 	movq	%rax, 0x40(%rsp)
    0000113b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4411
    00001140: 	callq	clock@PLT # Offset: 4416
    00001145: 	xorl	%ebx, %ebx
    00001147: 	leaq	0x258(%rsp), %r13
    0000114f: 	movq	%rax, start_time(%rip)
    00001156: 	movl	iterations(%rip), %eax
    0000115c: 	testl	%eax, %eax
    0000115e: 	jle	.Ltmp2083 # Offset: 4446
.Ltmp2087:
    00001160: 	movq	0x68(%rsp), %r15
    00001165: 	movq	0x58(%rsp), %rsi
    0000116a: 	movl	$0x3e80, %edx
    0000116f: 	movq	%r15, %rdi
    00001172: 	callq	memcpy@PLT # Offset: 4466
    00001177: 	movq	%r13, %rcx
    0000117a: 	movq	%r15, %rsi
    0000117d: 	nopl	(%rax) # Size: 3
.Ltmp2086:
    00001180: 	movsd	(%rcx), %xmm1
    00001184: 	movq	%rcx, %rax
    00001187: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2085:
    00001190: 	movq	%rax, %rdx
    00001193: 	leaq	-0x8(%rax), %rax
    00001197: 	movsd	-0x8(%rdx), %xmm0
    0000119c: 	comisd	%xmm1, %xmm0
    000011a0: 	jbe	.Ltmp2084 # Offset: 4512
    000011a2: 	movsd	%xmm0, 0x8(%rax)
    000011a7: 	cmpq	%rsi, %rax
    000011aa: 	jne	.Ltmp2085 # Offset: 4522
    000011ac: 	movq	%rsi, %rdx
.Ltmp2084:
    000011af: 	addq	$0x8, %rcx
    000011b3: 	movsd	%xmm1, (%rdx)
    000011b7: 	cmpq	%rbp, %rcx
    000011ba: 	jne	.Ltmp2086 # Offset: 4538
    000011bc: 	movq	0x40(%rsp), %rdx
    000011c1: 	movq	0x68(%rsp), %rdi
    000011c6: 	movq	%rbp, %rsi
    000011c9: 	callq	_Z13verify_sortedIPdEvT_S1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4553
    000011ce: 	addl	$0x1, %ebx
    000011d1: 	cmpl	iterations(%rip), %ebx
    000011d7: 	jl	.Ltmp2087 # Offset: 4567
.Ltmp2083:
    000011d9: 	callq	clock@PLT # Offset: 4569
    000011de: 	movq	0x40(%rsp), %rdi
    000011e3: 	pxor	%xmm0, %xmm0
    000011e7: 	movq	%rax, end_time(%rip)
    000011ee: 	subq	start_time(%rip), %rax
    000011f5: 	cvtsi2sd	%rax, %xmm0
    000011fa: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00001202: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4610
    00001207: 	movq	0x230(%rsp), %rdi
    0000120f: 	leaq	0x240(%rsp), %rax
    00001217: 	movq	%rax, 0x98(%rsp)
    0000121f: 	cmpq	%rax, %rdi
    00001222: 	je	.Ltmp2088 # Offset: 4642
    00001224: 	movq	0x240(%rsp), %rax
    0000122c: 	leaq	0x1(%rax), %rsi
    00001230: 	callq	_ZdlPvm@PLT # Offset: 4656
.Ltmp2088:
    00001235: 	movq	0xa8(%rsp), %rsi
    0000123d: 	movq	0x40(%rsp), %rdi
    00001242: 	leaq	DATAat0x1d450(%rip), %rdx
    00001249: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4681
    0000124e: 	callq	clock@PLT # Offset: 4686
    00001253: 	xorl	%ebx, %ebx
    00001255: 	leaq	0x40d8(%rsp), %r13
    0000125d: 	movq	%rax, start_time(%rip)
    00001264: 	movl	iterations(%rip), %eax
    0000126a: 	testl	%eax, %eax
    0000126c: 	jle	.Ltmp2089 # Offset: 4716
    0000126e: 	nop # Size: 2
.Ltmp2093:
    00001270: 	movq	0xb0(%rsp), %rsi
    00001278: 	movl	$0x3e80, %edx
    0000127d: 	movq	%rbp, %rdi
    00001280: 	callq	memcpy@PLT # Offset: 4736
    00001285: 	movq	%r13, %rcx
    00001288: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2092:
    00001290: 	movsd	(%rcx), %xmm1
    00001294: 	movq	%rcx, %rax
    00001297: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2091:
    000012a0: 	movq	%rax, %rdx
    000012a3: 	leaq	-0x8(%rax), %rax
    000012a7: 	movsd	-0x8(%rdx), %xmm0
    000012ac: 	comisd	%xmm1, %xmm0
    000012b0: 	jbe	.Ltmp2090 # Offset: 4784
    000012b2: 	movsd	%xmm0, 0x8(%rax)
    000012b7: 	cmpq	%rbp, %rax
    000012ba: 	jne	.Ltmp2091 # Offset: 4794
    000012bc: 	movq	%rbp, %rdx
.Ltmp2090:
    000012bf: 	addq	$0x8, %rcx
    000012c3: 	movsd	%xmm1, (%rdx)
    000012c7: 	cmpq	%r12, %rcx
    000012ca: 	jne	.Ltmp2092 # Offset: 4810
    000012cc: 	movq	0x40(%rsp), %rdx
    000012d1: 	movq	%r12, %rsi
    000012d4: 	movq	%rbp, %rdi
    000012d7: 	callq	_Z13verify_sortedIP9TypeClassIdEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4823
    000012dc: 	addl	$0x1, %ebx
    000012df: 	cmpl	iterations(%rip), %ebx
    000012e5: 	jl	.Ltmp2093 # Offset: 4837
.Ltmp2089:
    000012e7: 	callq	clock@PLT # Offset: 4839
    000012ec: 	movq	0x40(%rsp), %rdi
    000012f1: 	pxor	%xmm0, %xmm0
    000012f5: 	movq	%rax, end_time(%rip)
    000012fc: 	subq	start_time(%rip), %rax
    00001303: 	cvtsi2sd	%rax, %xmm0
    00001308: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00001310: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4880
    00001315: 	movq	0x230(%rsp), %rdi
    0000131d: 	cmpq	0x98(%rsp), %rdi
    00001325: 	je	.Ltmp2094 # Offset: 4901
    00001327: 	movq	0x240(%rsp), %rax
    0000132f: 	leaq	0x1(%rax), %rsi
    00001333: 	callq	_ZdlPvm@PLT # Offset: 4915
.Ltmp2094:
    00001338: 	movq	0xa8(%rsp), %rsi
    00001340: 	movq	0x40(%rsp), %rdi
    00001345: 	leaq	DATAat0x1d480(%rip), %rdx
    0000134c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4940
    00001351: 	callq	clock@PLT # Offset: 4945
    00001356: 	xorl	%ebx, %ebx
    00001358: 	leaq	0x7f58(%rsp), %r13
    00001360: 	movq	%rax, start_time(%rip)
    00001367: 	movl	iterations(%rip), %eax
    0000136d: 	testl	%eax, %eax
    0000136f: 	jle	.Ltmp2095 # Offset: 4975
    00001371: 	nopl	(%rax) # Size: 7
.Ltmp2099:
    00001378: 	movq	0xb8(%rsp), %rsi
    00001380: 	movl	$0x3e80, %edx
    00001385: 	movq	%r12, %rdi
    00001388: 	callq	memcpy@PLT # Offset: 5000
    0000138d: 	movq	0x48(%rsp), %rsi
    00001392: 	movq	%r13, %rcx
    00001395: 	nopl	(%rax) # Size: 3
.Ltmp2098:
    00001398: 	movsd	(%rcx), %xmm1
    0000139c: 	movq	%rcx, %rax
    0000139f: 	nop # Size: 1
.Ltmp2097:
    000013a0: 	movq	%rax, %rdx
    000013a3: 	leaq	-0x8(%rax), %rax
    000013a7: 	movsd	-0x8(%rdx), %xmm0
    000013ac: 	comisd	%xmm1, %xmm0
    000013b0: 	jbe	.Ltmp2096 # Offset: 5040
    000013b2: 	movsd	%xmm0, 0x8(%rax)
    000013b7: 	cmpq	%r12, %rax
    000013ba: 	jne	.Ltmp2097 # Offset: 5050
    000013bc: 	movq	%r12, %rdx
.Ltmp2096:
    000013bf: 	addq	$0x8, %rcx
    000013c3: 	movsd	%xmm1, (%rdx)
    000013c7: 	cmpq	%rsi, %rcx
    000013ca: 	jne	.Ltmp2098 # Offset: 5066
    000013cc: 	movq	0x40(%rsp), %rdx
    000013d1: 	movq	0x48(%rsp), %rsi
    000013d6: 	movq	%r12, %rdi
    000013d9: 	callq	_Z13verify_sortedIP12TypeSubClassIdEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5081
    000013de: 	addl	$0x1, %ebx
    000013e1: 	cmpl	iterations(%rip), %ebx
    000013e7: 	jl	.Ltmp2099 # Offset: 5095
.Ltmp2095:
    000013e9: 	callq	clock@PLT # Offset: 5097
    000013ee: 	movq	0x40(%rsp), %rdi
    000013f3: 	pxor	%xmm0, %xmm0
    000013f7: 	movq	%rax, end_time(%rip)
    000013fe: 	subq	start_time(%rip), %rax
    00001405: 	cvtsi2sd	%rax, %xmm0
    0000140a: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00001412: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5138
    00001417: 	movq	0x230(%rsp), %rdi
    0000141f: 	cmpq	0x98(%rsp), %rdi
    00001427: 	je	.Ltmp2100 # Offset: 5159
    00001429: 	movq	0x240(%rsp), %rax
    00001431: 	leaq	0x1(%rax), %rsi
    00001435: 	callq	_ZdlPvm@PLT # Offset: 5173
.Ltmp2100:
    0000143a: 	movq	0xa8(%rsp), %rsi
    00001442: 	movq	0x40(%rsp), %rdi
    00001447: 	leaq	DATAat0x1d4a8(%rip), %rdx
    0000144e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5198
    00001453: 	callq	clock@PLT # Offset: 5203
    00001458: 	xorl	%ebx, %ebx
    0000145a: 	leaq	0xbdd8(%rsp), %r13
    00001462: 	movq	%rax, start_time(%rip)
    00001469: 	movl	iterations(%rip), %eax
    0000146f: 	testl	%eax, %eax
    00001471: 	jle	.Ltmp2101 # Offset: 5233
    00001477: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2105:
    00001480: 	movq	0x48(%rsp), %r15
    00001485: 	movq	0xc0(%rsp), %rsi
    0000148d: 	movl	$0x3e80, %edx
    00001492: 	movq	%r15, %rdi
    00001495: 	callq	memcpy@PLT # Offset: 5269
    0000149a: 	movq	0x50(%rsp), %rdi
    0000149f: 	movq	%r13, %rcx
    000014a2: 	movq	%r15, %rsi
    000014a5: 	nopl	(%rax) # Size: 3
.Ltmp2104:
    000014a8: 	movsd	(%rcx), %xmm1
    000014ac: 	movq	%rcx, %rax
    000014af: 	nop # Size: 1
.Ltmp2103:
    000014b0: 	movq	%rax, %rdx
    000014b3: 	leaq	-0x8(%rax), %rax
    000014b7: 	movsd	-0x8(%rdx), %xmm0
    000014bc: 	comisd	%xmm1, %xmm0
    000014c0: 	jbe	.Ltmp2102 # Offset: 5312
    000014c2: 	movsd	%xmm0, 0x8(%rax)
    000014c7: 	cmpq	%rsi, %rax
    000014ca: 	jne	.Ltmp2103 # Offset: 5322
    000014cc: 	movq	%rsi, %rdx
.Ltmp2102:
    000014cf: 	addq	$0x8, %rcx
    000014d3: 	movsd	%xmm1, (%rdx)
    000014d7: 	cmpq	%rdi, %rcx
    000014da: 	jne	.Ltmp2104 # Offset: 5338
    000014dc: 	movq	0x40(%rsp), %rdx
    000014e1: 	movq	0x50(%rsp), %rsi
    000014e6: 	movq	0x48(%rsp), %rdi
    000014eb: 	callq	_Z13verify_sortedIP13TypeSub2ClassIdEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5355
    000014f0: 	addl	$0x1, %ebx
    000014f3: 	cmpl	iterations(%rip), %ebx
    000014f9: 	jl	.Ltmp2105 # Offset: 5369
.Ltmp2101:
    000014ff: 	callq	clock@PLT # Offset: 5375
    00001504: 	movq	0x40(%rsp), %rdi
    00001509: 	pxor	%xmm0, %xmm0
    0000150d: 	movq	%rax, end_time(%rip)
    00001514: 	subq	start_time(%rip), %rax
    0000151b: 	cvtsi2sd	%rax, %xmm0
    00001520: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00001528: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5416
    0000152d: 	movq	0x230(%rsp), %rdi
    00001535: 	cmpq	0x98(%rsp), %rdi
    0000153d: 	je	.Ltmp2106 # Offset: 5437
    0000153f: 	movq	0x240(%rsp), %rax
    00001547: 	leaq	0x1(%rax), %rsi
    0000154b: 	callq	_ZdlPvm@PLT # Offset: 5451
.Ltmp2106:
    00001550: 	movq	0xa8(%rsp), %rsi
    00001558: 	movq	0x40(%rsp), %rdi
    0000155d: 	leaq	DATAat0x1d4d0(%rip), %rdx
    00001564: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5476
    00001569: 	callq	clock@PLT # Offset: 5481
    0000156e: 	xorl	%ebx, %ebx
    00001570: 	leaq	0xfc58(%rsp), %r13
    00001578: 	movq	%rax, start_time(%rip)
    0000157f: 	movl	iterations(%rip), %eax
    00001585: 	testl	%eax, %eax
    00001587: 	jle	.Ltmp2107 # Offset: 5511
    0000158d: 	nopl	(%rax) # Size: 3
.Ltmp2111:
    00001590: 	movq	0x50(%rsp), %r15
    00001595: 	movq	0xa0(%rsp), %rsi
    0000159d: 	movl	$0x3e80, %edx
    000015a2: 	movq	%r15, %rdi
    000015a5: 	callq	memcpy@PLT # Offset: 5541
    000015aa: 	movq	0x58(%rsp), %rdi
    000015af: 	movq	%r13, %rcx
    000015b2: 	movq	%r15, %rsi
    000015b5: 	nopl	(%rax) # Size: 3
.Ltmp2110:
    000015b8: 	movsd	(%rcx), %xmm1
    000015bc: 	movq	%rcx, %rax
    000015bf: 	nop # Size: 1
.Ltmp2109:
    000015c0: 	movq	%rax, %rdx
    000015c3: 	leaq	-0x8(%rax), %rax
    000015c7: 	movsd	-0x8(%rdx), %xmm0
    000015cc: 	comisd	%xmm1, %xmm0
    000015d0: 	jbe	.Ltmp2108 # Offset: 5584
    000015d2: 	movsd	%xmm0, 0x8(%rax)
    000015d7: 	cmpq	%rsi, %rax
    000015da: 	jne	.Ltmp2109 # Offset: 5594
    000015dc: 	movq	%rsi, %rdx
.Ltmp2108:
    000015df: 	addq	$0x8, %rcx
    000015e3: 	movsd	%xmm1, (%rdx)
    000015e7: 	cmpq	%rdi, %rcx
    000015ea: 	jne	.Ltmp2110 # Offset: 5610
    000015ec: 	movq	0x40(%rsp), %rdx
    000015f1: 	movq	0x58(%rsp), %rsi
    000015f6: 	movq	0x50(%rsp), %rdi
    000015fb: 	callq	_Z13verify_sortedIP12DeepSubClassIdEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5627
    00001600: 	addl	$0x1, %ebx
    00001603: 	cmpl	iterations(%rip), %ebx
    00001609: 	jl	.Ltmp2111 # Offset: 5641
.Ltmp2107:
    0000160b: 	callq	clock@PLT # Offset: 5643
    00001610: 	movq	0x40(%rsp), %rdi
    00001615: 	pxor	%xmm0, %xmm0
    00001619: 	movq	%rax, end_time(%rip)
    00001620: 	subq	start_time(%rip), %rax
    00001627: 	cvtsi2sd	%rax, %xmm0
    0000162c: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00001634: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5684
    00001639: 	movq	0x230(%rsp), %rdi
    00001641: 	cmpq	0x98(%rsp), %rdi
    00001649: 	je	.Ltmp2112 # Offset: 5705
    0000164b: 	movq	0x240(%rsp), %rax
    00001653: 	leaq	0x1(%rax), %rsi
    00001657: 	callq	_ZdlPvm@PLT # Offset: 5719
.Ltmp2112:
    0000165c: 	movq	0xa8(%rsp), %rsi
    00001664: 	movq	0x40(%rsp), %rdi
    00001669: 	leaq	DATAat0x1d4f8(%rip), %rdx
    00001670: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5744
    00001675: 	callq	clock@PLT # Offset: 5749
    0000167a: 	movl	iterations(%rip), %r15d
    00001681: 	movl	$0x0, 0xd8(%rsp)
    0000168c: 	leaq	_ZN16TypeVirtualClassIdEcvdEv(%rip), %r13
    00001693: 	movq	%rax, start_time(%rip)
    0000169a: 	leaq	0x27360(%rsp), %rax
    000016a2: 	movq	%rax, 0xd0(%rsp)
    000016aa: 	testl	%r15d, %r15d
    000016ad: 	jle	.Ltmp2113 # Offset: 5805
    000016b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2128:
    000016b8: 	movq	0x28(%rsp), %rdx
    000016bd: 	movq	0x38(%rsp), %rax
    000016c2: 	movq	0x80(%rsp), %rcx
    000016ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2114:
    000016d0: 	movsd	0x8(%rax), %xmm0
    000016d5: 	addq	$0x10, %rax
    000016d9: 	addq	$0x10, %rdx
    000016dd: 	movsd	%xmm0, -0x8(%rdx)
    000016e2: 	cmpq	%rcx, %rax
    000016e5: 	jne	.Ltmp2114 # Offset: 5861
    000016e7: 	movq	0xd0(%rsp), %r15
    000016ef: 	nop # Size: 1
.Ltmp2120:
    000016f0: 	movsd	0x8(%r15), %xmm7
    000016f6: 	movq	%r15, %rbx
    000016f9: 	movsd	%xmm7, 0x30(%rsp)
    000016ff: 	jmp	.Ltmp2115 # Offset: 5887
    00001701: 	nopl	(%rax) # Size: 7
.Ltmp2118:
    00001708: 	movsd	0x8(%rbx), %xmm0
    0000170d: 	comisd	0x30(%rsp), %xmm0
    00001713: 	jbe	.Ltmp2116 # Offset: 5907
.Ltmp2119:
    00001715: 	movsd	0x8(%rbx), %xmm0
    0000171a: 	movsd	%xmm0, 0x18(%rbx)
    0000171f: 	cmpq	0x28(%rsp), %rbx
    00001724: 	je	.Ltmp2117 # Offset: 5924
.Ltmp2115:
    0000172a: 	movq	%rbx, %r14
    0000172d: 	movq	-0x10(%rbx), %rax
    00001731: 	subq	$0x10, %rbx
    00001735: 	movq	(%rax), %rax
    00001738: 	cmpq	%r13, %rax
    0000173b: 	je	.Ltmp2118 # Offset: 5947
    0000173d: 	movq	%rbx, %rdi
    00001740: 	callq	*%rax # Offset: 5952
    00001742: 	comisd	0x30(%rsp), %xmm0
    00001748: 	ja	.Ltmp2119 # Offset: 5960
    0000174a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2116:
    00001750: 	movsd	0x30(%rsp), %xmm7
    00001756: 	addq	$0x10, %r15
    0000175a: 	movsd	%xmm7, 0x8(%r14)
    00001760: 	cmpq	0x18(%rsp), %r15
    00001765: 	jne	.Ltmp2120 # Offset: 5989
    00001767: 	movq	0xd0(%rsp), %rbx
    0000176f: 	jmp	.Ltmp2121 # Offset: 5999
    00001771: 	nopl	(%rax) # Size: 7
.Ltmp2125:
    00001778: 	movq	-0x20(%rbx), %rax
    0000177c: 	movsd	-0x8(%rbx), %xmm6
    00001781: 	movq	(%rax), %rax
    00001784: 	movsd	%xmm6, 0x30(%rsp)
    0000178a: 	cmpq	%r13, %rax
    0000178d: 	jne	.Ltmp2122 # Offset: 6029
.Ltmp2126:
    0000178f: 	movsd	-0x18(%rbx), %xmm0
    00001794: 	comisd	0x30(%rsp), %xmm0
    0000179a: 	ja	.Ltmp2123 # Offset: 6042
.Ltmp2127:
    0000179c: 	cmpq	0x18(%rsp), %rbx
    000017a1: 	je	.Ltmp2124 # Offset: 6049
.Ltmp2121:
    000017a3: 	leaq	-0x10(%rbx), %r14
    000017a7: 	movq	%rbx, %rdi
    000017aa: 	movq	(%rbx), %rax
    000017ad: 	addq	$0x10, %rbx
    000017b1: 	movq	(%rax), %rax
    000017b4: 	cmpq	%r13, %rax
    000017b7: 	je	.Ltmp2125 # Offset: 6071
    000017b9: 	callq	*%rax # Offset: 6073
    000017bb: 	movq	-0x20(%rbx), %rax
    000017bf: 	movsd	%xmm0, 0x30(%rsp)
    000017c5: 	movq	(%rax), %rax
    000017c8: 	cmpq	%r13, %rax
    000017cb: 	je	.Ltmp2126 # Offset: 6091
    000017cd: 	nopl	(%rax) # Size: 3
.Ltmp2122:
    000017d0: 	movq	%r14, %rdi
    000017d3: 	callq	*%rax # Offset: 6099
    000017d5: 	comisd	0x30(%rsp), %xmm0
    000017db: 	jbe	.Ltmp2127 # Offset: 6107
.Ltmp2123:
    000017dd: 	movq	0x230(%rsp), %rdx
    000017e5: 	leaq	DATAat0x1d1cf(%rip), %rsi
    000017ec: 	movl	$0x1, %edi
    000017f1: 	xorl	%eax, %eax
    000017f3: 	callq	__printf_chk@PLT # Offset: 6131
.Ltmp2124:
    000017f8: 	addl	$0x1, 0xd8(%rsp)
    00001800: 	movl	0xd8(%rsp), %eax
    00001807: 	cmpl	iterations(%rip), %eax
    0000180d: 	jl	.Ltmp2128 # Offset: 6157
.Ltmp2113:
    00001813: 	callq	clock@PLT # Offset: 6163
    00001818: 	movq	0x40(%rsp), %rdi
    0000181d: 	pxor	%xmm0, %xmm0
    00001821: 	movq	%rax, end_time(%rip)
    00001828: 	subq	start_time(%rip), %rax
    0000182f: 	cvtsi2sd	%rax, %xmm0
    00001834: 	divsd	DATAat0x1dec0(%rip), %xmm0
    0000183c: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6204
    00001841: 	movq	0x230(%rsp), %rdi
    00001849: 	cmpq	0x98(%rsp), %rdi
    00001851: 	je	.Ltmp2129 # Offset: 6225
    00001853: 	movq	0x240(%rsp), %rax
    0000185b: 	leaq	0x1(%rax), %rsi
    0000185f: 	callq	_ZdlPvm@PLT # Offset: 6239
.Ltmp2129:
    00001864: 	movq	0xa8(%rsp), %rsi
    0000186c: 	movq	0x40(%rsp), %rdi
    00001871: 	leaq	DATAat0x1d528(%rip), %rdx
    00001878: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6264
    0000187d: 	callq	clock@PLT # Offset: 6269
    00001882: 	movl	iterations(%rip), %r14d
    00001889: 	movl	$0x0, 0xd8(%rsp)
    00001894: 	leaq	_ZN19TypeVirtualSubClassIdEcvdEv(%rip), %r13
    0000189b: 	movq	%rax, start_time(%rip)
    000018a2: 	leaq	0x2f060(%rsp), %rax
    000018aa: 	movq	%rax, 0xd0(%rsp)
    000018b2: 	testl	%r14d, %r14d
    000018b5: 	jle	.Ltmp2130 # Offset: 6325
    000018bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2145:
    000018c0: 	movq	0x18(%rsp), %rdx
    000018c5: 	movq	0x80(%rsp), %rax
    000018cd: 	movq	0x78(%rsp), %rcx
    000018d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2131:
    000018d8: 	movsd	0x8(%rax), %xmm0
    000018dd: 	addq	$0x10, %rax
    000018e1: 	addq	$0x10, %rdx
    000018e5: 	movsd	%xmm0, -0x8(%rdx)
    000018ea: 	cmpq	%rcx, %rax
    000018ed: 	jne	.Ltmp2131 # Offset: 6381
    000018ef: 	movq	0xd0(%rsp), %r15
    000018f7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2137:
    00001900: 	movsd	0x8(%r15), %xmm2
    00001906: 	movq	%r15, %rbx
    00001909: 	movsd	%xmm2, 0x30(%rsp)
    0000190f: 	jmp	.Ltmp2132 # Offset: 6415
    00001911: 	nopl	(%rax) # Size: 7
.Ltmp2135:
    00001918: 	movsd	0x8(%rbx), %xmm0
    0000191d: 	comisd	0x30(%rsp), %xmm0
    00001923: 	jbe	.Ltmp2133 # Offset: 6435
.Ltmp2136:
    00001925: 	movsd	0x8(%rbx), %xmm0
    0000192a: 	movsd	%xmm0, 0x18(%rbx)
    0000192f: 	cmpq	0x18(%rsp), %rbx
    00001934: 	je	.Ltmp2134 # Offset: 6452
.Ltmp2132:
    0000193a: 	movq	%rbx, %r14
    0000193d: 	movq	-0x10(%rbx), %rax
    00001941: 	subq	$0x10, %rbx
    00001945: 	movq	(%rax), %rax
    00001948: 	cmpq	%r13, %rax
    0000194b: 	je	.Ltmp2135 # Offset: 6475
    0000194d: 	movq	%rbx, %rdi
    00001950: 	callq	*%rax # Offset: 6480
    00001952: 	comisd	0x30(%rsp), %xmm0
    00001958: 	ja	.Ltmp2136 # Offset: 6488
    0000195a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2133:
    00001960: 	movsd	0x30(%rsp), %xmm3
    00001966: 	addq	$0x10, %r15
    0000196a: 	movsd	%xmm3, 0x8(%r14)
    00001970: 	cmpq	0x10(%rsp), %r15
    00001975: 	jne	.Ltmp2137 # Offset: 6517
    00001977: 	movq	0xd0(%rsp), %rbx
    0000197f: 	jmp	.Ltmp2138 # Offset: 6527
    00001981: 	nopl	(%rax) # Size: 7
.Ltmp2142:
    00001988: 	movq	-0x20(%rbx), %rax
    0000198c: 	movsd	-0x8(%rbx), %xmm6
    00001991: 	movq	(%rax), %rax
    00001994: 	movsd	%xmm6, 0x30(%rsp)
    0000199a: 	cmpq	%r13, %rax
    0000199d: 	jne	.Ltmp2139 # Offset: 6557
.Ltmp2143:
    0000199f: 	movsd	-0x18(%rbx), %xmm0
    000019a4: 	comisd	0x30(%rsp), %xmm0
    000019aa: 	ja	.Ltmp2140 # Offset: 6570
.Ltmp2144:
    000019ac: 	cmpq	0x10(%rsp), %rbx
    000019b1: 	je	.Ltmp2141 # Offset: 6577
.Ltmp2138:
    000019b3: 	leaq	-0x10(%rbx), %r14
    000019b7: 	movq	%rbx, %rdi
    000019ba: 	movq	(%rbx), %rax
    000019bd: 	addq	$0x10, %rbx
    000019c1: 	movq	(%rax), %rax
    000019c4: 	cmpq	%r13, %rax
    000019c7: 	je	.Ltmp2142 # Offset: 6599
    000019c9: 	callq	*%rax # Offset: 6601
    000019cb: 	movq	-0x20(%rbx), %rax
    000019cf: 	movsd	%xmm0, 0x30(%rsp)
    000019d5: 	movq	(%rax), %rax
    000019d8: 	cmpq	%r13, %rax
    000019db: 	je	.Ltmp2143 # Offset: 6619
.Ltmp2139:
    000019dd: 	movq	%r14, %rdi
    000019e0: 	callq	*%rax # Offset: 6624
    000019e2: 	comisd	0x30(%rsp), %xmm0
    000019e8: 	jbe	.Ltmp2144 # Offset: 6632
.Ltmp2140:
    000019ea: 	movq	0x230(%rsp), %rdx
    000019f2: 	leaq	DATAat0x1d1cf(%rip), %rsi
    000019f9: 	movl	$0x1, %edi
    000019fe: 	xorl	%eax, %eax
    00001a00: 	callq	__printf_chk@PLT # Offset: 6656
.Ltmp2141:
    00001a05: 	addl	$0x1, 0xd8(%rsp)
    00001a0d: 	movl	0xd8(%rsp), %eax
    00001a14: 	cmpl	iterations(%rip), %eax
    00001a1a: 	jl	.Ltmp2145 # Offset: 6682
.Ltmp2130:
    00001a20: 	callq	clock@PLT # Offset: 6688
    00001a25: 	movq	0x40(%rsp), %rdi
    00001a2a: 	pxor	%xmm0, %xmm0
    00001a2e: 	movq	%rax, end_time(%rip)
    00001a35: 	subq	start_time(%rip), %rax
    00001a3c: 	cvtsi2sd	%rax, %xmm0
    00001a41: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00001a49: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6729
    00001a4e: 	movq	0x230(%rsp), %rdi
    00001a56: 	cmpq	0x98(%rsp), %rdi
    00001a5e: 	je	.Ltmp2146 # Offset: 6750
    00001a60: 	movq	0x240(%rsp), %rax
    00001a68: 	leaq	0x1(%rax), %rsi
    00001a6c: 	callq	_ZdlPvm@PLT # Offset: 6764
.Ltmp2146:
    00001a71: 	movq	0xa8(%rsp), %rsi
    00001a79: 	movq	0x40(%rsp), %rdi
    00001a7e: 	leaq	DATAat0x1d558(%rip), %rdx
    00001a85: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6789
    00001a8a: 	callq	clock@PLT # Offset: 6794
    00001a8f: 	movl	iterations(%rip), %ebx
    00001a95: 	movl	$0x0, 0xd8(%rsp)
    00001aa0: 	leaq	_ZN14WorkerSubClassIdEcvdEv(%rip), %r13
    00001aa7: 	movq	%rax, start_time(%rip)
    00001aae: 	leaq	0x36d60(%rsp), %rax
    00001ab6: 	movq	%rax, 0xd0(%rsp)
    00001abe: 	testl	%ebx, %ebx
    00001ac0: 	jle	.Ltmp2147 # Offset: 6848
    00001ac6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2162:
    00001ad0: 	movq	0x10(%rsp), %rdx
    00001ad5: 	movq	0x78(%rsp), %rax
    00001ada: 	movq	0x88(%rsp), %rcx
    00001ae2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2148:
    00001ae8: 	movsd	0x8(%rax), %xmm0
    00001aed: 	addq	$0x10, %rax
    00001af1: 	addq	$0x10, %rdx
    00001af5: 	movsd	%xmm0, -0x8(%rdx)
    00001afa: 	cmpq	%rcx, %rax
    00001afd: 	jne	.Ltmp2148 # Offset: 6909
    00001aff: 	movq	0xd0(%rsp), %r15
    00001b07: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2154:
    00001b10: 	movsd	0x8(%r15), %xmm4
    00001b16: 	movq	%r15, %rbx
    00001b19: 	movsd	%xmm4, 0x30(%rsp)
    00001b1f: 	jmp	.Ltmp2149 # Offset: 6943
    00001b21: 	nopl	(%rax) # Size: 7
.Ltmp2152:
    00001b28: 	movsd	0x8(%rbx), %xmm0
    00001b2d: 	comisd	0x30(%rsp), %xmm0
    00001b33: 	jbe	.Ltmp2150 # Offset: 6963
.Ltmp2153:
    00001b35: 	movsd	0x8(%rbx), %xmm0
    00001b3a: 	movsd	%xmm0, 0x18(%rbx)
    00001b3f: 	cmpq	0x10(%rsp), %rbx
    00001b44: 	je	.Ltmp2151 # Offset: 6980
.Ltmp2149:
    00001b4a: 	movq	%rbx, %r14
    00001b4d: 	movq	-0x10(%rbx), %rax
    00001b51: 	subq	$0x10, %rbx
    00001b55: 	movq	(%rax), %rax
    00001b58: 	cmpq	%r13, %rax
    00001b5b: 	je	.Ltmp2152 # Offset: 7003
    00001b5d: 	movq	%rbx, %rdi
    00001b60: 	callq	*%rax # Offset: 7008
    00001b62: 	comisd	0x30(%rsp), %xmm0
    00001b68: 	ja	.Ltmp2153 # Offset: 7016
    00001b6a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2150:
    00001b70: 	movsd	0x30(%rsp), %xmm5
    00001b76: 	addq	$0x10, %r15
    00001b7a: 	movsd	%xmm5, 0x8(%r14)
    00001b80: 	cmpq	(%rsp), %r15
    00001b84: 	jne	.Ltmp2154 # Offset: 7044
    00001b86: 	movq	0xd0(%rsp), %rbx
    00001b8e: 	jmp	.Ltmp2155 # Offset: 7054
.Ltmp2159:
    00001b90: 	movq	-0x20(%rbx), %rax
    00001b94: 	movsd	-0x8(%rbx), %xmm7
    00001b99: 	movq	(%rax), %rax
    00001b9c: 	movsd	%xmm7, 0x30(%rsp)
    00001ba2: 	cmpq	%r13, %rax
    00001ba5: 	jne	.Ltmp2156 # Offset: 7077
.Ltmp2160:
    00001ba7: 	movsd	-0x18(%rbx), %xmm0
    00001bac: 	comisd	0x30(%rsp), %xmm0
    00001bb2: 	ja	.Ltmp2157 # Offset: 7090
.Ltmp2161:
    00001bb4: 	cmpq	(%rsp), %rbx
    00001bb8: 	je	.Ltmp2158 # Offset: 7096
.Ltmp2155:
    00001bba: 	leaq	-0x10(%rbx), %r14
    00001bbe: 	movq	%rbx, %rdi
    00001bc1: 	movq	(%rbx), %rax
    00001bc4: 	addq	$0x10, %rbx
    00001bc8: 	movq	(%rax), %rax
    00001bcb: 	cmpq	%r13, %rax
    00001bce: 	je	.Ltmp2159 # Offset: 7118
    00001bd0: 	callq	*%rax # Offset: 7120
    00001bd2: 	movq	-0x20(%rbx), %rax
    00001bd6: 	movsd	%xmm0, 0x30(%rsp)
    00001bdc: 	movq	(%rax), %rax
    00001bdf: 	cmpq	%r13, %rax
    00001be2: 	je	.Ltmp2160 # Offset: 7138
    00001be4: 	nopl	(%rax) # Size: 4
.Ltmp2156:
    00001be8: 	movq	%r14, %rdi
    00001beb: 	callq	*%rax # Offset: 7147
    00001bed: 	comisd	0x30(%rsp), %xmm0
    00001bf3: 	jbe	.Ltmp2161 # Offset: 7155
.Ltmp2157:
    00001bf5: 	movq	0x230(%rsp), %rdx
    00001bfd: 	leaq	DATAat0x1d1cf(%rip), %rsi
    00001c04: 	movl	$0x1, %edi
    00001c09: 	xorl	%eax, %eax
    00001c0b: 	callq	__printf_chk@PLT # Offset: 7179
.Ltmp2158:
    00001c10: 	addl	$0x1, 0xd8(%rsp)
    00001c18: 	movl	0xd8(%rsp), %eax
    00001c1f: 	cmpl	iterations(%rip), %eax
    00001c25: 	jl	.Ltmp2162 # Offset: 7205
.Ltmp2147:
    00001c2b: 	callq	clock@PLT # Offset: 7211
    00001c30: 	movq	0x40(%rsp), %rdi
    00001c35: 	pxor	%xmm0, %xmm0
    00001c39: 	movq	%rax, end_time(%rip)
    00001c40: 	subq	start_time(%rip), %rax
    00001c47: 	cvtsi2sd	%rax, %xmm0
    00001c4c: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00001c54: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7252
    00001c59: 	movq	0x230(%rsp), %rdi
    00001c61: 	cmpq	0x98(%rsp), %rdi
    00001c69: 	je	.Ltmp2163 # Offset: 7273
    00001c6b: 	movq	0x240(%rsp), %rax
    00001c73: 	leaq	0x1(%rax), %rsi
    00001c77: 	callq	_ZdlPvm@PLT # Offset: 7287
.Ltmp2163:
    00001c7c: 	movq	0xa8(%rsp), %rsi
    00001c84: 	movq	0x40(%rsp), %rdi
    00001c89: 	leaq	DATAat0x1d580(%rip), %rdx
    00001c90: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7312
    00001c95: 	callq	clock@PLT # Offset: 7317
    00001c9a: 	movl	iterations(%rip), %r11d
    00001ca1: 	movl	$0x0, 0xd8(%rsp)
    00001cac: 	leaq	_ZN18WorkerDeepSubClassIdEcvdEv(%rip), %r14
    00001cb3: 	movq	%rax, start_time(%rip)
    00001cba: 	leaq	0x3ea60(%rsp), %rax
    00001cc2: 	movq	%rax, 0xd0(%rsp)
    00001cca: 	testl	%r11d, %r11d
    00001ccd: 	jle	.Ltmp2164 # Offset: 7373
    00001cd3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2172:
    00001cd8: 	movq	(%rsp), %rdx
    00001cdc: 	movq	0x88(%rsp), %rax
    00001ce4: 	movq	0x90(%rsp), %rcx
    00001cec: 	nopl	(%rax) # Size: 4
.Ltmp2165:
    00001cf0: 	movsd	0x8(%rax), %xmm0
    00001cf5: 	addq	$0x10, %rax
    00001cf9: 	addq	$0x10, %rdx
    00001cfd: 	movsd	%xmm0, -0x8(%rdx)
    00001d02: 	cmpq	%rcx, %rax
    00001d05: 	jne	.Ltmp2165 # Offset: 7429
    00001d07: 	movq	0xd0(%rsp), %r15
    00001d0f: 	nop # Size: 1
.Ltmp2171:
    00001d10: 	movsd	0x8(%r15), %xmm6
    00001d16: 	movq	%r15, %rbx
    00001d19: 	movsd	%xmm6, 0x30(%rsp)
    00001d1f: 	jmp	.Ltmp2166 # Offset: 7455
    00001d21: 	nopl	(%rax) # Size: 7
.Ltmp2169:
    00001d28: 	movsd	0x8(%rbx), %xmm0
    00001d2d: 	comisd	0x30(%rsp), %xmm0
    00001d33: 	jbe	.Ltmp2167 # Offset: 7475
.Ltmp2170:
    00001d35: 	movsd	0x8(%rbx), %xmm0
    00001d3a: 	movsd	%xmm0, 0x18(%rbx)
    00001d3f: 	cmpq	(%rsp), %rbx
    00001d43: 	je	.Ltmp2168 # Offset: 7491
.Ltmp2166:
    00001d49: 	movq	%rbx, %r13
    00001d4c: 	movq	-0x10(%rbx), %rax
    00001d50: 	subq	$0x10, %rbx
    00001d54: 	movq	(%rax), %rax
    00001d57: 	cmpq	%r14, %rax
    00001d5a: 	je	.Ltmp2169 # Offset: 7514
    00001d5c: 	movq	%rbx, %rdi
    00001d5f: 	callq	*%rax # Offset: 7519
    00001d61: 	comisd	0x30(%rsp), %xmm0
    00001d67: 	ja	.Ltmp2170 # Offset: 7527
    00001d69: 	nopl	(%rax) # Size: 7
.Ltmp2167:
    00001d70: 	movsd	0x30(%rsp), %xmm7
    00001d76: 	addq	$0x10, %r15
    00001d7a: 	movsd	%xmm7, 0x8(%r13)
    00001d80: 	cmpq	0x8(%rsp), %r15
    00001d85: 	jne	.Ltmp2171 # Offset: 7557
    00001d87: 	movq	0x40(%rsp), %rdx
    00001d8c: 	movq	0x8(%rsp), %rsi
    00001d91: 	movq	(%rsp), %rdi
    00001d95: 	callq	_Z13verify_sortedIP18WorkerDeepSubClassIdEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7573
    00001d9a: 	addl	$0x1, 0xd8(%rsp)
    00001da2: 	movl	0xd8(%rsp), %eax
    00001da9: 	cmpl	iterations(%rip), %eax
    00001daf: 	jl	.Ltmp2172 # Offset: 7599
.Ltmp2164:
    00001db5: 	callq	clock@PLT # Offset: 7605
    00001dba: 	movq	0x40(%rsp), %rdi
    00001dbf: 	pxor	%xmm0, %xmm0
    00001dc3: 	movq	%rax, end_time(%rip)
    00001dca: 	subq	start_time(%rip), %rax
    00001dd1: 	cvtsi2sd	%rax, %xmm0
    00001dd6: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00001dde: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7646
    00001de3: 	movq	0x230(%rsp), %rdi
    00001deb: 	cmpq	0x98(%rsp), %rdi
    00001df3: 	je	.Ltmp2173 # Offset: 7667
    00001df5: 	movq	0x240(%rsp), %rax
    00001dfd: 	leaq	0x1(%rax), %rsi
    00001e01: 	callq	_ZdlPvm@PLT # Offset: 7681
.Ltmp2173:
    00001e06: 	movq	0xa8(%rsp), %rsi
    00001e0e: 	movq	0x40(%rsp), %rdi
    00001e13: 	leaq	DATAat0x1d5b0(%rip), %rdx
    00001e1a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7706
    00001e1f: 	callq	clock@PLT # Offset: 7711
    00001e24: 	movl	iterations(%rip), %r10d
    00001e2b: 	movl	$0x0, 0xd8(%rsp)
    00001e36: 	leaq	_ZN15WorkerSubClass2IdEcvdEv(%rip), %r13
    00001e3d: 	movq	%rax, start_time(%rip)
    00001e44: 	leaq	0x46760(%rsp), %rax
    00001e4c: 	movq	%rax, 0xd0(%rsp)
    00001e54: 	testl	%r10d, %r10d
    00001e57: 	jle	.Ltmp2174 # Offset: 7767
    00001e5d: 	nopl	(%rax) # Size: 3
.Ltmp2189:
    00001e60: 	movq	0x8(%rsp), %rdx
    00001e65: 	movq	0x90(%rsp), %rax
    00001e6d: 	movq	0x70(%rsp), %rcx
    00001e72: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2175:
    00001e78: 	movsd	0x8(%rax), %xmm0
    00001e7d: 	addq	$0x10, %rax
    00001e81: 	addq	$0x10, %rdx
    00001e85: 	movsd	%xmm0, -0x8(%rdx)
    00001e8a: 	cmpq	%rcx, %rax
    00001e8d: 	jne	.Ltmp2175 # Offset: 7821
    00001e8f: 	movq	0xd0(%rsp), %r15
    00001e97: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2181:
    00001ea0: 	movsd	0x8(%r15), %xmm2
    00001ea6: 	movq	%r15, %rbx
    00001ea9: 	movsd	%xmm2, 0x30(%rsp)
    00001eaf: 	jmp	.Ltmp2176 # Offset: 7855
    00001eb1: 	nopl	(%rax) # Size: 7
.Ltmp2179:
    00001eb8: 	movsd	0x8(%rbx), %xmm0
    00001ebd: 	comisd	0x30(%rsp), %xmm0
    00001ec3: 	jbe	.Ltmp2177 # Offset: 7875
.Ltmp2180:
    00001ec5: 	movsd	0x8(%rbx), %xmm0
    00001eca: 	movsd	%xmm0, 0x18(%rbx)
    00001ecf: 	cmpq	0x8(%rsp), %rbx
    00001ed4: 	je	.Ltmp2178 # Offset: 7892
.Ltmp2176:
    00001eda: 	movq	%rbx, %r14
    00001edd: 	movq	-0x10(%rbx), %rax
    00001ee1: 	subq	$0x10, %rbx
    00001ee5: 	movq	(%rax), %rax
    00001ee8: 	cmpq	%r13, %rax
    00001eeb: 	je	.Ltmp2179 # Offset: 7915
    00001eed: 	movq	%rbx, %rdi
    00001ef0: 	callq	*%rax # Offset: 7920
    00001ef2: 	comisd	0x30(%rsp), %xmm0
    00001ef8: 	ja	.Ltmp2180 # Offset: 7928
    00001efa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2177:
    00001f00: 	movsd	0x30(%rsp), %xmm3
    00001f06: 	addq	$0x10, %r15
    00001f0a: 	movsd	%xmm3, 0x8(%r14)
    00001f10: 	cmpq	0x20(%rsp), %r15
    00001f15: 	jne	.Ltmp2181 # Offset: 7957
    00001f17: 	movq	0xd0(%rsp), %rbx
    00001f1f: 	jmp	.Ltmp2182 # Offset: 7967
    00001f21: 	nopl	(%rax) # Size: 7
.Ltmp2186:
    00001f28: 	movq	-0x20(%rbx), %rax
    00001f2c: 	movsd	-0x8(%rbx), %xmm2
    00001f31: 	movq	(%rax), %rax
    00001f34: 	movsd	%xmm2, 0x30(%rsp)
    00001f3a: 	cmpq	%r13, %rax
    00001f3d: 	jne	.Ltmp2183 # Offset: 7997
.Ltmp2187:
    00001f3f: 	movsd	-0x18(%rbx), %xmm0
    00001f44: 	comisd	0x30(%rsp), %xmm0
    00001f4a: 	ja	.Ltmp2184 # Offset: 8010
.Ltmp2188:
    00001f4c: 	cmpq	0x20(%rsp), %rbx
    00001f51: 	je	.Ltmp2185 # Offset: 8017
.Ltmp2182:
    00001f53: 	leaq	-0x10(%rbx), %r14
    00001f57: 	movq	%rbx, %rdi
    00001f5a: 	movq	(%rbx), %rax
    00001f5d: 	addq	$0x10, %rbx
    00001f61: 	movq	(%rax), %rax
    00001f64: 	cmpq	%r13, %rax
    00001f67: 	je	.Ltmp2186 # Offset: 8039
    00001f69: 	callq	*%rax # Offset: 8041
    00001f6b: 	movq	-0x20(%rbx), %rax
    00001f6f: 	movsd	%xmm0, 0x30(%rsp)
    00001f75: 	movq	(%rax), %rax
    00001f78: 	cmpq	%r13, %rax
    00001f7b: 	je	.Ltmp2187 # Offset: 8059
    00001f7d: 	nopl	(%rax) # Size: 3
.Ltmp2183:
    00001f80: 	movq	%r14, %rdi
    00001f83: 	callq	*%rax # Offset: 8067
    00001f85: 	comisd	0x30(%rsp), %xmm0
    00001f8b: 	jbe	.Ltmp2188 # Offset: 8075
.Ltmp2184:
    00001f8d: 	movq	0x230(%rsp), %rdx
    00001f95: 	leaq	DATAat0x1d1cf(%rip), %rsi
    00001f9c: 	movl	$0x1, %edi
    00001fa1: 	xorl	%eax, %eax
    00001fa3: 	callq	__printf_chk@PLT # Offset: 8099
.Ltmp2185:
    00001fa8: 	addl	$0x1, 0xd8(%rsp)
    00001fb0: 	movl	0xd8(%rsp), %eax
    00001fb7: 	cmpl	iterations(%rip), %eax
    00001fbd: 	jl	.Ltmp2189 # Offset: 8125
.Ltmp2174:
    00001fc3: 	callq	clock@PLT # Offset: 8131
    00001fc8: 	movq	0x40(%rsp), %rdi
    00001fcd: 	pxor	%xmm0, %xmm0
    00001fd1: 	movq	%rax, end_time(%rip)
    00001fd8: 	subq	start_time(%rip), %rax
    00001fdf: 	cvtsi2sd	%rax, %xmm0
    00001fe4: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00001fec: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 8172
    00001ff1: 	movq	0x230(%rsp), %rdi
    00001ff9: 	cmpq	0x98(%rsp), %rdi
    00002001: 	je	.Ltmp2190 # Offset: 8193
    00002003: 	movq	0x240(%rsp), %rax
    0000200b: 	leaq	0x1(%rax), %rsi
    0000200f: 	callq	_ZdlPvm@PLT # Offset: 8207
.Ltmp2190:
    00002014: 	movq	0xa8(%rsp), %rsi
    0000201c: 	movq	0x40(%rsp), %rdi
    00002021: 	leaq	DATAat0x1d5d8(%rip), %rdx
    00002028: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8232
    0000202d: 	callq	clock@PLT # Offset: 8237
    00002032: 	movl	iterations(%rip), %r9d
    00002039: 	movl	$0x0, 0xd8(%rsp)
    00002044: 	leaq	_ZN15WorkerSubClass3IdEcvdEv(%rip), %r13
    0000204b: 	movq	%rax, start_time(%rip)
    00002052: 	leaq	0x4e460(%rsp), %rax
    0000205a: 	movq	%rax, 0xd0(%rsp)
    00002062: 	testl	%r9d, %r9d
    00002065: 	jle	.Ltmp2191 # Offset: 8293
    0000206b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2206:
    00002070: 	movq	0x20(%rsp), %rdx
    00002075: 	movq	0x70(%rsp), %rax
    0000207a: 	movq	0xc8(%rsp), %rcx
    00002082: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2192:
    00002088: 	movsd	0x8(%rax), %xmm0
    0000208d: 	addq	$0x10, %rax
    00002091: 	addq	$0x10, %rdx
    00002095: 	movsd	%xmm0, -0x8(%rdx)
    0000209a: 	cmpq	%rcx, %rax
    0000209d: 	jne	.Ltmp2192 # Offset: 8349
    0000209f: 	movq	0xd0(%rsp), %r15
    000020a7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2198:
    000020b0: 	movsd	0x8(%r15), %xmm4
    000020b6: 	movq	%r15, %rbx
    000020b9: 	movsd	%xmm4, 0x30(%rsp)
    000020bf: 	jmp	.Ltmp2193 # Offset: 8383
    000020c1: 	nopl	(%rax) # Size: 7
.Ltmp2196:
    000020c8: 	movsd	0x8(%rbx), %xmm0
    000020cd: 	comisd	0x30(%rsp), %xmm0
    000020d3: 	jbe	.Ltmp2194 # Offset: 8403
.Ltmp2197:
    000020d5: 	movsd	0x8(%rbx), %xmm0
    000020da: 	movsd	%xmm0, 0x18(%rbx)
    000020df: 	cmpq	0x20(%rsp), %rbx
    000020e4: 	je	.Ltmp2195 # Offset: 8420
.Ltmp2193:
    000020ea: 	movq	%rbx, %r14
    000020ed: 	movq	-0x10(%rbx), %rax
    000020f1: 	subq	$0x10, %rbx
    000020f5: 	movq	(%rax), %rax
    000020f8: 	cmpq	%r13, %rax
    000020fb: 	je	.Ltmp2196 # Offset: 8443
    000020fd: 	movq	%rbx, %rdi
    00002100: 	callq	*%rax # Offset: 8448
    00002102: 	comisd	0x30(%rsp), %xmm0
    00002108: 	ja	.Ltmp2197 # Offset: 8456
    0000210a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2194:
    00002110: 	movsd	0x30(%rsp), %xmm5
    00002116: 	addq	$0x10, %r15
    0000211a: 	movsd	%xmm5, 0x8(%r14)
    00002120: 	cmpq	0x38(%rsp), %r15
    00002125: 	jne	.Ltmp2198 # Offset: 8485
    00002127: 	movq	0xd0(%rsp), %rbx
    0000212f: 	jmp	.Ltmp2199 # Offset: 8495
    00002131: 	nopl	(%rax) # Size: 7
.Ltmp2203:
    00002138: 	movq	-0x20(%rbx), %rax
    0000213c: 	movsd	-0x8(%rbx), %xmm3
    00002141: 	movq	(%rax), %rax
    00002144: 	movsd	%xmm3, 0x30(%rsp)
    0000214a: 	cmpq	%r13, %rax
    0000214d: 	jne	.Ltmp2200 # Offset: 8525
.Ltmp2204:
    0000214f: 	movsd	-0x18(%rbx), %xmm0
    00002154: 	comisd	0x30(%rsp), %xmm0
    0000215a: 	ja	.Ltmp2201 # Offset: 8538
.Ltmp2205:
    0000215c: 	cmpq	0x38(%rsp), %rbx
    00002161: 	je	.Ltmp2202 # Offset: 8545
.Ltmp2199:
    00002163: 	leaq	-0x10(%rbx), %r14
    00002167: 	movq	%rbx, %rdi
    0000216a: 	movq	(%rbx), %rax
    0000216d: 	addq	$0x10, %rbx
    00002171: 	movq	(%rax), %rax
    00002174: 	cmpq	%r13, %rax
    00002177: 	je	.Ltmp2203 # Offset: 8567
    00002179: 	callq	*%rax # Offset: 8569
    0000217b: 	movq	-0x20(%rbx), %rax
    0000217f: 	movsd	%xmm0, 0x30(%rsp)
    00002185: 	movq	(%rax), %rax
    00002188: 	cmpq	%r13, %rax
    0000218b: 	je	.Ltmp2204 # Offset: 8587
.Ltmp2200:
    0000218d: 	movq	%r14, %rdi
    00002190: 	callq	*%rax # Offset: 8592
    00002192: 	comisd	0x30(%rsp), %xmm0
    00002198: 	jbe	.Ltmp2205 # Offset: 8600
.Ltmp2201:
    0000219a: 	movq	0x230(%rsp), %rdx
    000021a2: 	leaq	DATAat0x1d1cf(%rip), %rsi
    000021a9: 	movl	$0x1, %edi
    000021ae: 	xorl	%eax, %eax
    000021b0: 	callq	__printf_chk@PLT # Offset: 8624
.Ltmp2202:
    000021b5: 	addl	$0x1, 0xd8(%rsp)
    000021bd: 	movl	0xd8(%rsp), %eax
    000021c4: 	cmpl	iterations(%rip), %eax
    000021ca: 	jl	.Ltmp2206 # Offset: 8650
.Ltmp2191:
    000021d0: 	callq	clock@PLT # Offset: 8656
    000021d5: 	movq	0x40(%rsp), %rdi
    000021da: 	pxor	%xmm0, %xmm0
    000021de: 	movq	%rax, end_time(%rip)
    000021e5: 	subq	start_time(%rip), %rax
    000021ec: 	cvtsi2sd	%rax, %xmm0
    000021f1: 	divsd	DATAat0x1dec0(%rip), %xmm0
    000021f9: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 8697
    000021fe: 	movq	0x230(%rsp), %rdi
    00002206: 	cmpq	0x98(%rsp), %rdi
    0000220e: 	je	.Ltmp2207 # Offset: 8718
    00002210: 	movq	0x240(%rsp), %rax
    00002218: 	leaq	0x1(%rax), %rsi
    0000221c: 	callq	_ZdlPvm@PLT # Offset: 8732
.Ltmp2207:
    00002221: 	movq	0xa8(%rsp), %rbx
    00002229: 	leaq	0x1f0(%rsp), %rdi
    00002231: 	leaq	DATAat0x1d21f(%rip), %rdx
    00002238: 	movq	%rbx, %rsi
    0000223b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8763
    00002240: 	movl	iterations(%rip), %edx
    00002246: 	movl	$0x1, %r8d
    0000224c: 	movl	$0x1, %ecx
    00002251: 	movq	0x1f0(%rsp), %rdi
    00002259: 	movl	$0x7d0, %esi
    0000225e: 	callq	_Z9summarizePKciiii # Offset: 8798
    00002263: 	movq	0x40(%rsp), %rdi
    00002268: 	leaq	DATAat0x1d23b(%rip), %rdx
    0000226f: 	movq	%rbx, %rsi
    00002272: 	shll	$0x4, iterations(%rip)
    00002279: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8825
    0000227e: 	callq	clock@PLT # Offset: 8830
    00002283: 	movl	iterations(%rip), %r8d
    0000228a: 	xorl	%ebx, %ebx
    0000228c: 	movq	%rax, start_time(%rip)
    00002293: 	testl	%r8d, %r8d
    00002296: 	jle	.Ltmp2208 # Offset: 8854
    00002298: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2209:
    000022a0: 	movq	0x68(%rsp), %r15
    000022a5: 	movq	0x58(%rsp), %rsi
    000022aa: 	movl	$0x3e80, %edx
    000022af: 	movq	%r15, %rdi
    000022b2: 	callq	memcpy@PLT # Offset: 8882
    000022b7: 	movq	%rbp, %rsi
    000022ba: 	movq	%r15, %rdi
    000022bd: 	callq	_ZN9benchmark9quicksortIPdEEvT_S2_ # Offset: 8893
    000022c2: 	movq	0x40(%rsp), %rdx
    000022c7: 	movq	%rbp, %rsi
    000022ca: 	movq	%r15, %rdi
    000022cd: 	callq	_Z13verify_sortedIPdEvT_S1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 8909
    000022d2: 	addl	$0x1, %ebx
    000022d5: 	cmpl	iterations(%rip), %ebx
    000022db: 	jl	.Ltmp2209 # Offset: 8923
.Ltmp2208:
    000022dd: 	callq	clock@PLT # Offset: 8925
    000022e2: 	movq	0x40(%rsp), %rdi
    000022e7: 	pxor	%xmm0, %xmm0
    000022eb: 	movq	%rax, end_time(%rip)
    000022f2: 	subq	start_time(%rip), %rax
    000022f9: 	cvtsi2sd	%rax, %xmm0
    000022fe: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00002306: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 8966
    0000230b: 	movq	0x230(%rsp), %rdi
    00002313: 	cmpq	0x98(%rsp), %rdi
    0000231b: 	je	.Ltmp2210 # Offset: 8987
    0000231d: 	movq	0x240(%rsp), %rax
    00002325: 	leaq	0x1(%rax), %rsi
    00002329: 	callq	_ZdlPvm@PLT # Offset: 9001
.Ltmp2210:
    0000232e: 	movq	0xa8(%rsp), %rsi
    00002336: 	movq	0x40(%rsp), %rdi
    0000233b: 	leaq	DATAat0x1d600(%rip), %rdx
    00002342: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9026
    00002347: 	callq	clock@PLT # Offset: 9031
    0000234c: 	movl	iterations(%rip), %edi
    00002352: 	xorl	%ebx, %ebx
    00002354: 	movq	%rax, start_time(%rip)
    0000235b: 	testl	%edi, %edi
    0000235d: 	jle	.Ltmp2211 # Offset: 9053
    0000235f: 	nop # Size: 1
.Ltmp2212:
    00002360: 	movq	0xb0(%rsp), %rsi
    00002368: 	movl	$0x3e80, %edx
    0000236d: 	movq	%rbp, %rdi
    00002370: 	callq	memcpy@PLT # Offset: 9072
    00002375: 	movq	%r12, %rsi
    00002378: 	movq	%rbp, %rdi
    0000237b: 	callq	"_ZN9benchmark9quicksortIP9TypeClassIdEEEvT_S4_.part.0/1" # Offset: 9083
    00002380: 	movq	0x40(%rsp), %rdx
    00002385: 	movq	%r12, %rsi
    00002388: 	movq	%rbp, %rdi
    0000238b: 	callq	_Z13verify_sortedIP9TypeClassIdEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9099
    00002390: 	addl	$0x1, %ebx
    00002393: 	cmpl	iterations(%rip), %ebx
    00002399: 	jl	.Ltmp2212 # Offset: 9113
.Ltmp2211:
    0000239b: 	callq	clock@PLT # Offset: 9115
    000023a0: 	movq	0x40(%rsp), %rdi
    000023a5: 	pxor	%xmm0, %xmm0
    000023a9: 	movq	%rax, end_time(%rip)
    000023b0: 	subq	start_time(%rip), %rax
    000023b7: 	cvtsi2sd	%rax, %xmm0
    000023bc: 	divsd	DATAat0x1dec0(%rip), %xmm0
    000023c4: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9156
    000023c9: 	movq	0x230(%rsp), %rdi
    000023d1: 	cmpq	0x98(%rsp), %rdi
    000023d9: 	je	.Ltmp2213 # Offset: 9177
    000023db: 	movq	0x240(%rsp), %rax
    000023e3: 	leaq	0x1(%rax), %rsi
    000023e7: 	callq	_ZdlPvm@PLT # Offset: 9191
.Ltmp2213:
    000023ec: 	movq	0xa8(%rsp), %rsi
    000023f4: 	movq	0x40(%rsp), %rdi
    000023f9: 	leaq	DATAat0x1d628(%rip), %rdx
    00002400: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9216
    00002405: 	callq	clock@PLT # Offset: 9221
    0000240a: 	movl	iterations(%rip), %esi
    00002410: 	xorl	%ebx, %ebx
    00002412: 	movq	%rax, start_time(%rip)
    00002419: 	testl	%esi, %esi
    0000241b: 	jle	.Ltmp2214 # Offset: 9243
    0000241d: 	nopl	(%rax) # Size: 3
.Ltmp2215:
    00002420: 	movq	0xb8(%rsp), %rsi
    00002428: 	movl	$0x3e80, %edx
    0000242d: 	movq	%r12, %rdi
    00002430: 	callq	memcpy@PLT # Offset: 9264
    00002435: 	movq	0x48(%rsp), %rcx
    0000243a: 	movq	%r12, %rdi
    0000243d: 	movq	%rcx, %rsi
    00002440: 	callq	"_ZN9benchmark9quicksortIP12TypeSubClassIdEEEvT_S4_.part.0/1" # Offset: 9280
    00002445: 	movq	0x40(%rsp), %rdx
    0000244a: 	movq	%rcx, %rsi
    0000244d: 	movq	%r12, %rdi
    00002450: 	callq	_Z13verify_sortedIP12TypeSubClassIdEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9296
    00002455: 	addl	$0x1, %ebx
    00002458: 	cmpl	iterations(%rip), %ebx
    0000245e: 	jl	.Ltmp2215 # Offset: 9310
.Ltmp2214:
    00002460: 	callq	clock@PLT # Offset: 9312
    00002465: 	movq	0x40(%rsp), %rdi
    0000246a: 	pxor	%xmm0, %xmm0
    0000246e: 	movq	%rax, end_time(%rip)
    00002475: 	subq	start_time(%rip), %rax
    0000247c: 	cvtsi2sd	%rax, %xmm0
    00002481: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00002489: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9353
    0000248e: 	movq	0x230(%rsp), %rdi
    00002496: 	cmpq	0x98(%rsp), %rdi
    0000249e: 	je	.Ltmp2216 # Offset: 9374
    000024a0: 	movq	0x240(%rsp), %rax
    000024a8: 	leaq	0x1(%rax), %rsi
    000024ac: 	callq	_ZdlPvm@PLT # Offset: 9388
.Ltmp2216:
    000024b1: 	movq	0xa8(%rsp), %rsi
    000024b9: 	movq	0x40(%rsp), %rdi
    000024be: 	leaq	DATAat0x1d648(%rip), %rdx
    000024c5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9413
    000024ca: 	callq	clock@PLT # Offset: 9418
    000024cf: 	movl	iterations(%rip), %ecx
    000024d5: 	xorl	%ebx, %ebx
    000024d7: 	movq	%rax, start_time(%rip)
    000024de: 	testl	%ecx, %ecx
    000024e0: 	jle	.Ltmp2217 # Offset: 9440
    000024e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2218:
    000024e8: 	movq	0x48(%rsp), %r15
    000024ed: 	movq	0xc0(%rsp), %rsi
    000024f5: 	movl	$0x3e80, %edx
    000024fa: 	movq	%r15, %rdi
    000024fd: 	callq	memcpy@PLT # Offset: 9469
    00002502: 	movq	0x50(%rsp), %r10
    00002507: 	movq	%r15, %rdi
    0000250a: 	movq	%r10, %rsi
    0000250d: 	callq	"_ZN9benchmark9quicksortIP13TypeSub2ClassIdEEEvT_S4_.part.0/1" # Offset: 9485
    00002512: 	movq	0x40(%rsp), %rdx
    00002517: 	movq	%r10, %rsi
    0000251a: 	movq	%r15, %rdi
    0000251d: 	callq	_Z13verify_sortedIP13TypeSub2ClassIdEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9501
    00002522: 	addl	$0x1, %ebx
    00002525: 	cmpl	iterations(%rip), %ebx
    0000252b: 	jl	.Ltmp2218 # Offset: 9515
.Ltmp2217:
    0000252d: 	callq	clock@PLT # Offset: 9517
    00002532: 	movq	0x40(%rsp), %rdi
    00002537: 	pxor	%xmm0, %xmm0
    0000253b: 	movq	%rax, end_time(%rip)
    00002542: 	subq	start_time(%rip), %rax
    00002549: 	cvtsi2sd	%rax, %xmm0
    0000254e: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00002556: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9558
    0000255b: 	movq	0x230(%rsp), %rdi
    00002563: 	cmpq	0x98(%rsp), %rdi
    0000256b: 	je	.Ltmp2219 # Offset: 9579
    0000256d: 	movq	0x240(%rsp), %rax
    00002575: 	leaq	0x1(%rax), %rsi
    00002579: 	callq	_ZdlPvm@PLT # Offset: 9593
.Ltmp2219:
    0000257e: 	movq	0xa8(%rsp), %rsi
    00002586: 	movq	0x40(%rsp), %rdi
    0000258b: 	leaq	DATAat0x1d670(%rip), %rdx
    00002592: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9618
    00002597: 	callq	clock@PLT # Offset: 9623
    0000259c: 	movl	iterations(%rip), %edx
    000025a2: 	xorl	%ebx, %ebx
    000025a4: 	movq	%rax, start_time(%rip)
    000025ab: 	testl	%edx, %edx
    000025ad: 	jle	.Ltmp2220 # Offset: 9645
    000025af: 	nop # Size: 1
.Ltmp2221:
    000025b0: 	movq	0x50(%rsp), %r15
    000025b5: 	movq	0xa0(%rsp), %rsi
    000025bd: 	movl	$0x3e80, %edx
    000025c2: 	movq	%r15, %rdi
    000025c5: 	callq	memcpy@PLT # Offset: 9669
    000025ca: 	movq	0x58(%rsp), %r11
    000025cf: 	movq	%r15, %rdi
    000025d2: 	movq	%r11, %rsi
    000025d5: 	callq	"_ZN9benchmark9quicksortIP12DeepSubClassIdEEEvT_S4_.part.0/1" # Offset: 9685
    000025da: 	movq	0x40(%rsp), %rdx
    000025df: 	movq	%r11, %rsi
    000025e2: 	movq	%r15, %rdi
    000025e5: 	callq	_Z13verify_sortedIP12DeepSubClassIdEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9701
    000025ea: 	addl	$0x1, %ebx
    000025ed: 	cmpl	iterations(%rip), %ebx
    000025f3: 	jl	.Ltmp2221 # Offset: 9715
.Ltmp2220:
    000025f5: 	callq	clock@PLT # Offset: 9717
    000025fa: 	movq	0x40(%rsp), %rdi
    000025ff: 	pxor	%xmm0, %xmm0
    00002603: 	movq	%rax, end_time(%rip)
    0000260a: 	subq	start_time(%rip), %rax
    00002611: 	cvtsi2sd	%rax, %xmm0
    00002616: 	divsd	DATAat0x1dec0(%rip), %xmm0
    0000261e: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9758
    00002623: 	movq	0x230(%rsp), %rdi
    0000262b: 	cmpq	0x98(%rsp), %rdi
    00002633: 	je	.Ltmp2222 # Offset: 9779
    00002635: 	movq	0x240(%rsp), %rax
    0000263d: 	leaq	0x1(%rax), %rsi
    00002641: 	callq	_ZdlPvm@PLT # Offset: 9793
.Ltmp2222:
    00002646: 	movq	0xa8(%rsp), %rsi
    0000264e: 	movq	0x40(%rsp), %rdi
    00002653: 	leaq	DATAat0x1d690(%rip), %rdx
    0000265a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9818
    0000265f: 	callq	clock@PLT # Offset: 9823
    00002664: 	xorl	%ebx, %ebx
    00002666: 	movq	%rax, start_time(%rip)
    0000266d: 	movl	iterations(%rip), %eax
    00002673: 	testl	%eax, %eax
    00002675: 	jle	.Ltmp2223 # Offset: 9845
    00002677: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2225:
    00002680: 	movq	0x28(%rsp), %rdx
    00002685: 	movq	0x38(%rsp), %rax
    0000268a: 	movq	0x80(%rsp), %rcx
    00002692: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2224:
    00002698: 	movsd	0x8(%rax), %xmm0
    0000269d: 	addq	$0x10, %rax
    000026a1: 	addq	$0x10, %rdx
    000026a5: 	movsd	%xmm0, -0x8(%rdx)
    000026aa: 	cmpq	%rcx, %rax
    000026ad: 	jne	.Ltmp2224 # Offset: 9901
    000026af: 	movq	0x18(%rsp), %r14
    000026b4: 	movq	0x28(%rsp), %r15
    000026b9: 	movq	%r14, %rsi
    000026bc: 	movq	%r15, %rdi
    000026bf: 	callq	"_ZN9benchmark9quicksortIP16TypeVirtualClassIdEEEvT_S4_.part.0/1" # Offset: 9919
    000026c4: 	movq	0x40(%rsp), %rdx
    000026c9: 	movq	%r14, %rsi
    000026cc: 	movq	%r15, %rdi
    000026cf: 	callq	_Z13verify_sortedIP16TypeVirtualClassIdEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9935
    000026d4: 	addl	$0x1, %ebx
    000026d7: 	cmpl	iterations(%rip), %ebx
    000026dd: 	jl	.Ltmp2225 # Offset: 9949
.Ltmp2223:
    000026df: 	callq	clock@PLT # Offset: 9951
    000026e4: 	movq	0x40(%rsp), %rdi
    000026e9: 	pxor	%xmm0, %xmm0
    000026ed: 	movq	%rax, end_time(%rip)
    000026f4: 	subq	start_time(%rip), %rax
    000026fb: 	cvtsi2sd	%rax, %xmm0
    00002700: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00002708: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9992
    0000270d: 	movq	0x230(%rsp), %rdi
    00002715: 	cmpq	0x98(%rsp), %rdi
    0000271d: 	je	.Ltmp2226 # Offset: 10013
    0000271f: 	movq	0x240(%rsp), %rax
    00002727: 	leaq	0x1(%rax), %rsi
    0000272b: 	callq	_ZdlPvm@PLT # Offset: 10027
.Ltmp2226:
    00002730: 	movq	0xa8(%rsp), %rsi
    00002738: 	movq	0x40(%rsp), %rdi
    0000273d: 	leaq	DATAat0x1d6b8(%rip), %rdx
    00002744: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10052
    00002749: 	callq	clock@PLT # Offset: 10057
    0000274e: 	xorl	%r15d, %r15d
    00002751: 	leaq	_ZN19TypeVirtualSubClassIdEcvdEv(%rip), %r13
    00002758: 	movq	%rax, start_time(%rip)
    0000275f: 	movl	iterations(%rip), %eax
    00002765: 	testl	%eax, %eax
    00002767: 	jle	.Ltmp2227 # Offset: 10087
    0000276d: 	nopl	(%rax) # Size: 3
.Ltmp2236:
    00002770: 	movq	0x18(%rsp), %rdx
    00002775: 	movq	0x80(%rsp), %rax
    0000277d: 	movq	0x78(%rsp), %rcx
    00002782: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2228:
    00002788: 	movsd	0x8(%rax), %xmm0
    0000278d: 	addq	$0x10, %rax
    00002791: 	addq	$0x10, %rdx
    00002795: 	movsd	%xmm0, -0x8(%rdx)
    0000279a: 	cmpq	%rcx, %rax
    0000279d: 	jne	.Ltmp2228 # Offset: 10141
    0000279f: 	movq	0x10(%rsp), %rsi
    000027a4: 	movq	0x18(%rsp), %rdi
    000027a9: 	callq	"_ZN9benchmark9quicksortIP19TypeVirtualSubClassIdEEEvT_S4_.part.0/1" # Offset: 10153
    000027ae: 	leaq	0x2f060(%rsp), %rbx
    000027b6: 	jmp	.Ltmp2229 # Offset: 10166
    000027b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2233:
    000027c0: 	movq	-0x20(%rbx), %rax
    000027c4: 	movsd	-0x8(%rbx), %xmm4
    000027c9: 	movq	(%rax), %rax
    000027cc: 	movsd	%xmm4, 0x30(%rsp)
    000027d2: 	cmpq	%r13, %rax
    000027d5: 	jne	.Ltmp2230 # Offset: 10197
.Ltmp2234:
    000027d7: 	movsd	-0x18(%rbx), %xmm0
    000027dc: 	comisd	0x30(%rsp), %xmm0
    000027e2: 	ja	.Ltmp2231 # Offset: 10210
.Ltmp2235:
    000027e4: 	cmpq	0x10(%rsp), %rbx
    000027e9: 	je	.Ltmp2232 # Offset: 10217
.Ltmp2229:
    000027eb: 	leaq	-0x10(%rbx), %r14
    000027ef: 	movq	%rbx, %rdi
    000027f2: 	movq	(%rbx), %rax
    000027f5: 	addq	$0x10, %rbx
    000027f9: 	movq	(%rax), %rax
    000027fc: 	cmpq	%r13, %rax
    000027ff: 	je	.Ltmp2233 # Offset: 10239
    00002801: 	callq	*%rax # Offset: 10241
    00002803: 	movq	-0x20(%rbx), %rax
    00002807: 	movsd	%xmm0, 0x30(%rsp)
    0000280d: 	movq	(%rax), %rax
    00002810: 	cmpq	%r13, %rax
    00002813: 	je	.Ltmp2234 # Offset: 10259
.Ltmp2230:
    00002815: 	movq	%r14, %rdi
    00002818: 	callq	*%rax # Offset: 10264
    0000281a: 	comisd	0x30(%rsp), %xmm0
    00002820: 	jbe	.Ltmp2235 # Offset: 10272
.Ltmp2231:
    00002822: 	movq	0x230(%rsp), %rdx
    0000282a: 	leaq	DATAat0x1d1cf(%rip), %rsi
    00002831: 	movl	$0x1, %edi
    00002836: 	xorl	%eax, %eax
    00002838: 	callq	__printf_chk@PLT # Offset: 10296
.Ltmp2232:
    0000283d: 	addl	$0x1, %r15d
    00002841: 	cmpl	iterations(%rip), %r15d
    00002848: 	jl	.Ltmp2236 # Offset: 10312
.Ltmp2227:
    0000284e: 	callq	clock@PLT # Offset: 10318
    00002853: 	movq	0x40(%rsp), %rdi
    00002858: 	pxor	%xmm0, %xmm0
    0000285c: 	movq	%rax, end_time(%rip)
    00002863: 	subq	start_time(%rip), %rax
    0000286a: 	cvtsi2sd	%rax, %xmm0
    0000286f: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00002877: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 10359
    0000287c: 	movq	0x230(%rsp), %rdi
    00002884: 	cmpq	0x98(%rsp), %rdi
    0000288c: 	je	.Ltmp2237 # Offset: 10380
    0000288e: 	movq	0x240(%rsp), %rax
    00002896: 	leaq	0x1(%rax), %rsi
    0000289a: 	callq	_ZdlPvm@PLT # Offset: 10394
.Ltmp2237:
    0000289f: 	movq	0xa8(%rsp), %rsi
    000028a7: 	movq	0x40(%rsp), %rdi
    000028ac: 	leaq	DATAat0x1d6e0(%rip), %rdx
    000028b3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10419
    000028b8: 	callq	clock@PLT # Offset: 10424
    000028bd: 	xorl	%r15d, %r15d
    000028c0: 	leaq	_ZN14WorkerSubClassIdEcvdEv(%rip), %r13
    000028c7: 	movq	%rax, start_time(%rip)
    000028ce: 	movl	iterations(%rip), %eax
    000028d4: 	testl	%eax, %eax
    000028d6: 	jle	.Ltmp2238 # Offset: 10454
    000028dc: 	nopl	(%rax) # Size: 4
.Ltmp2247:
    000028e0: 	movq	0x10(%rsp), %rdx
    000028e5: 	movq	0x78(%rsp), %rax
    000028ea: 	movq	0x88(%rsp), %rcx
    000028f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2239:
    000028f8: 	movsd	0x8(%rax), %xmm0
    000028fd: 	addq	$0x10, %rax
    00002901: 	addq	$0x10, %rdx
    00002905: 	movsd	%xmm0, -0x8(%rdx)
    0000290a: 	cmpq	%rcx, %rax
    0000290d: 	jne	.Ltmp2239 # Offset: 10509
    0000290f: 	movq	(%rsp), %rsi
    00002913: 	movq	0x10(%rsp), %rdi
    00002918: 	callq	"_ZN9benchmark9quicksortIP14WorkerSubClassIdEEEvT_S4_.part.0/1" # Offset: 10520
    0000291d: 	leaq	0x36d60(%rsp), %rbx
    00002925: 	jmp	.Ltmp2240 # Offset: 10533
    00002927: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2244:
    00002930: 	movq	-0x20(%rbx), %rax
    00002934: 	movsd	-0x8(%rbx), %xmm5
    00002939: 	movq	(%rax), %rax
    0000293c: 	movsd	%xmm5, 0x30(%rsp)
    00002942: 	cmpq	%r13, %rax
    00002945: 	jne	.Ltmp2241 # Offset: 10565
.Ltmp2245:
    00002947: 	movsd	-0x18(%rbx), %xmm0
    0000294c: 	comisd	0x30(%rsp), %xmm0
    00002952: 	ja	.Ltmp2242 # Offset: 10578
.Ltmp2246:
    00002954: 	cmpq	(%rsp), %rbx
    00002958: 	je	.Ltmp2243 # Offset: 10584
.Ltmp2240:
    0000295a: 	leaq	-0x10(%rbx), %r14
    0000295e: 	movq	%rbx, %rdi
    00002961: 	movq	(%rbx), %rax
    00002964: 	addq	$0x10, %rbx
    00002968: 	movq	(%rax), %rax
    0000296b: 	cmpq	%r13, %rax
    0000296e: 	je	.Ltmp2244 # Offset: 10606
    00002970: 	callq	*%rax # Offset: 10608
    00002972: 	movq	-0x20(%rbx), %rax
    00002976: 	movsd	%xmm0, 0x30(%rsp)
    0000297c: 	movq	(%rax), %rax
    0000297f: 	cmpq	%r13, %rax
    00002982: 	je	.Ltmp2245 # Offset: 10626
    00002984: 	nopl	(%rax) # Size: 4
.Ltmp2241:
    00002988: 	movq	%r14, %rdi
    0000298b: 	callq	*%rax # Offset: 10635
    0000298d: 	comisd	0x30(%rsp), %xmm0
    00002993: 	jbe	.Ltmp2246 # Offset: 10643
.Ltmp2242:
    00002995: 	movq	0x230(%rsp), %rdx
    0000299d: 	leaq	DATAat0x1d1cf(%rip), %rsi
    000029a4: 	movl	$0x1, %edi
    000029a9: 	xorl	%eax, %eax
    000029ab: 	callq	__printf_chk@PLT # Offset: 10667
.Ltmp2243:
    000029b0: 	addl	$0x1, %r15d
    000029b4: 	cmpl	iterations(%rip), %r15d
    000029bb: 	jl	.Ltmp2247 # Offset: 10683
.Ltmp2238:
    000029c1: 	callq	clock@PLT # Offset: 10689
    000029c6: 	movq	0x40(%rsp), %rdi
    000029cb: 	pxor	%xmm0, %xmm0
    000029cf: 	movq	%rax, end_time(%rip)
    000029d6: 	subq	start_time(%rip), %rax
    000029dd: 	cvtsi2sd	%rax, %xmm0
    000029e2: 	divsd	DATAat0x1dec0(%rip), %xmm0
    000029ea: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 10730
    000029ef: 	movq	0x230(%rsp), %rdi
    000029f7: 	cmpq	0x98(%rsp), %rdi
    000029ff: 	je	.Ltmp2248 # Offset: 10751
    00002a01: 	movq	0x240(%rsp), %rax
    00002a09: 	leaq	0x1(%rax), %rsi
    00002a0d: 	callq	_ZdlPvm@PLT # Offset: 10765
.Ltmp2248:
    00002a12: 	movq	0xa8(%rsp), %rsi
    00002a1a: 	movq	0x40(%rsp), %rdi
    00002a1f: 	leaq	DATAat0x1d708(%rip), %rdx
    00002a26: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10790
    00002a2b: 	callq	clock@PLT # Offset: 10795
    00002a30: 	xorl	%r15d, %r15d
    00002a33: 	leaq	_ZN18WorkerDeepSubClassIdEcvdEv(%rip), %r13
    00002a3a: 	movq	%rax, start_time(%rip)
    00002a41: 	movl	iterations(%rip), %eax
    00002a47: 	testl	%eax, %eax
    00002a49: 	jle	.Ltmp2249 # Offset: 10825
    00002a4f: 	nop # Size: 1
.Ltmp2258:
    00002a50: 	movq	(%rsp), %rdx
    00002a54: 	movq	0x88(%rsp), %rax
    00002a5c: 	movq	0x90(%rsp), %rcx
    00002a64: 	nopl	(%rax) # Size: 4
.Ltmp2250:
    00002a68: 	movsd	0x8(%rax), %xmm0
    00002a6d: 	addq	$0x10, %rax
    00002a71: 	addq	$0x10, %rdx
    00002a75: 	movsd	%xmm0, -0x8(%rdx)
    00002a7a: 	cmpq	%rcx, %rax
    00002a7d: 	jne	.Ltmp2250 # Offset: 10877
    00002a7f: 	movq	0x8(%rsp), %rsi
    00002a84: 	movq	(%rsp), %rdi
    00002a88: 	callq	"_ZN9benchmark9quicksortIP18WorkerDeepSubClassIdEEEvT_S4_.part.0/1" # Offset: 10888
    00002a8d: 	leaq	0x3ea60(%rsp), %rbx
    00002a95: 	jmp	.Ltmp2251 # Offset: 10901
    00002a97: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2255:
    00002aa0: 	movq	-0x20(%rbx), %rax
    00002aa4: 	movsd	-0x8(%rbx), %xmm6
    00002aa9: 	movq	(%rax), %rax
    00002aac: 	movsd	%xmm6, 0x30(%rsp)
    00002ab2: 	cmpq	%r13, %rax
    00002ab5: 	jne	.Ltmp2252 # Offset: 10933
.Ltmp2256:
    00002ab7: 	movsd	-0x18(%rbx), %xmm0
    00002abc: 	comisd	0x30(%rsp), %xmm0
    00002ac2: 	ja	.Ltmp2253 # Offset: 10946
.Ltmp2257:
    00002ac4: 	cmpq	0x8(%rsp), %rbx
    00002ac9: 	je	.Ltmp2254 # Offset: 10953
.Ltmp2251:
    00002acb: 	leaq	-0x10(%rbx), %r14
    00002acf: 	movq	%rbx, %rdi
    00002ad2: 	movq	(%rbx), %rax
    00002ad5: 	addq	$0x10, %rbx
    00002ad9: 	movq	(%rax), %rax
    00002adc: 	cmpq	%r13, %rax
    00002adf: 	je	.Ltmp2255 # Offset: 10975
    00002ae1: 	callq	*%rax # Offset: 10977
    00002ae3: 	movq	-0x20(%rbx), %rax
    00002ae7: 	movsd	%xmm0, 0x30(%rsp)
    00002aed: 	movq	(%rax), %rax
    00002af0: 	cmpq	%r13, %rax
    00002af3: 	je	.Ltmp2256 # Offset: 10995
    00002af5: 	nopl	(%rax) # Size: 3
.Ltmp2252:
    00002af8: 	movq	%r14, %rdi
    00002afb: 	callq	*%rax # Offset: 11003
    00002afd: 	comisd	0x30(%rsp), %xmm0
    00002b03: 	jbe	.Ltmp2257 # Offset: 11011
.Ltmp2253:
    00002b05: 	movq	0x230(%rsp), %rdx
    00002b0d: 	leaq	DATAat0x1d1cf(%rip), %rsi
    00002b14: 	movl	$0x1, %edi
    00002b19: 	xorl	%eax, %eax
    00002b1b: 	callq	__printf_chk@PLT # Offset: 11035
.Ltmp2254:
    00002b20: 	addl	$0x1, %r15d
    00002b24: 	cmpl	iterations(%rip), %r15d
    00002b2b: 	jl	.Ltmp2258 # Offset: 11051
.Ltmp2249:
    00002b31: 	callq	clock@PLT # Offset: 11057
    00002b36: 	movq	0x40(%rsp), %rdi
    00002b3b: 	pxor	%xmm0, %xmm0
    00002b3f: 	movq	%rax, end_time(%rip)
    00002b46: 	subq	start_time(%rip), %rax
    00002b4d: 	cvtsi2sd	%rax, %xmm0
    00002b52: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00002b5a: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 11098
    00002b5f: 	movq	0x230(%rsp), %rdi
    00002b67: 	cmpq	0x98(%rsp), %rdi
    00002b6f: 	je	.Ltmp2259 # Offset: 11119
    00002b71: 	movq	0x240(%rsp), %rax
    00002b79: 	leaq	0x1(%rax), %rsi
    00002b7d: 	callq	_ZdlPvm@PLT # Offset: 11133
.Ltmp2259:
    00002b82: 	movq	0xa8(%rsp), %rsi
    00002b8a: 	movq	0x40(%rsp), %rdi
    00002b8f: 	leaq	DATAat0x1d730(%rip), %rdx
    00002b96: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11158
    00002b9b: 	callq	clock@PLT # Offset: 11163
    00002ba0: 	xorl	%ebx, %ebx
    00002ba2: 	movq	%rax, start_time(%rip)
    00002ba9: 	movl	iterations(%rip), %eax
    00002baf: 	testl	%eax, %eax
    00002bb1: 	jle	.Ltmp2260 # Offset: 11185
    00002bb3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2262:
    00002bb8: 	movq	0x8(%rsp), %rdx
    00002bbd: 	movq	0x90(%rsp), %rax
    00002bc5: 	movq	0x70(%rsp), %rcx
    00002bca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2261:
    00002bd0: 	movsd	0x8(%rax), %xmm0
    00002bd5: 	addq	$0x10, %rax
    00002bd9: 	addq	$0x10, %rdx
    00002bdd: 	movsd	%xmm0, -0x8(%rdx)
    00002be2: 	cmpq	%rcx, %rax
    00002be5: 	jne	.Ltmp2261 # Offset: 11237
    00002be7: 	movq	0x20(%rsp), %r14
    00002bec: 	movq	0x8(%rsp), %r15
    00002bf1: 	movq	%r14, %rsi
    00002bf4: 	movq	%r15, %rdi
    00002bf7: 	callq	"_ZN9benchmark9quicksortIP15WorkerSubClass2IdEEEvT_S4_.part.0/1" # Offset: 11255
    00002bfc: 	movq	0x40(%rsp), %rdx
    00002c01: 	movq	%r14, %rsi
    00002c04: 	movq	%r15, %rdi
    00002c07: 	callq	_Z13verify_sortedIP15WorkerSubClass2IdEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 11271
    00002c0c: 	addl	$0x1, %ebx
    00002c0f: 	cmpl	iterations(%rip), %ebx
    00002c15: 	jl	.Ltmp2262 # Offset: 11285
.Ltmp2260:
    00002c17: 	callq	clock@PLT # Offset: 11287
    00002c1c: 	movq	0x40(%rsp), %rdi
    00002c21: 	pxor	%xmm0, %xmm0
    00002c25: 	movq	%rax, end_time(%rip)
    00002c2c: 	subq	start_time(%rip), %rax
    00002c33: 	cvtsi2sd	%rax, %xmm0
    00002c38: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00002c40: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 11328
    00002c45: 	movq	0x230(%rsp), %rdi
    00002c4d: 	cmpq	0x98(%rsp), %rdi
    00002c55: 	je	.Ltmp2263 # Offset: 11349
    00002c57: 	movq	0x240(%rsp), %rax
    00002c5f: 	leaq	0x1(%rax), %rsi
    00002c63: 	callq	_ZdlPvm@PLT # Offset: 11363
.Ltmp2263:
    00002c68: 	movq	0xa8(%rsp), %rsi
    00002c70: 	movq	0x40(%rsp), %rdi
    00002c75: 	leaq	DATAat0x1d758(%rip), %rdx
    00002c7c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11388
    00002c81: 	callq	clock@PLT # Offset: 11393
    00002c86: 	movl	iterations(%rip), %r15d
    00002c8d: 	xorl	%ebx, %ebx
    00002c8f: 	movq	%rax, start_time(%rip)
    00002c96: 	testl	%r15d, %r15d
    00002c99: 	jle	.Ltmp2264 # Offset: 11417
    00002c9b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2266:
    00002ca0: 	movq	0x20(%rsp), %rdx
    00002ca5: 	movq	0x70(%rsp), %rax
    00002caa: 	movq	0xc8(%rsp), %rcx
    00002cb2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2265:
    00002cb8: 	movsd	0x8(%rax), %xmm0
    00002cbd: 	addq	$0x10, %rax
    00002cc1: 	addq	$0x10, %rdx
    00002cc5: 	movsd	%xmm0, -0x8(%rdx)
    00002cca: 	cmpq	%rcx, %rax
    00002ccd: 	jne	.Ltmp2265 # Offset: 11469
    00002ccf: 	movq	0x38(%rsp), %r14
    00002cd4: 	movq	0x20(%rsp), %r15
    00002cd9: 	movq	%r14, %rsi
    00002cdc: 	movq	%r15, %rdi
    00002cdf: 	callq	"_ZN9benchmark9quicksortIP15WorkerSubClass3IdEEEvT_S4_.part.0/1" # Offset: 11487
    00002ce4: 	movq	0x40(%rsp), %rdx
    00002ce9: 	movq	%r14, %rsi
    00002cec: 	movq	%r15, %rdi
    00002cef: 	callq	_Z13verify_sortedIP15WorkerSubClass3IdEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 11503
    00002cf4: 	addl	$0x1, %ebx
    00002cf7: 	cmpl	iterations(%rip), %ebx
    00002cfd: 	jl	.Ltmp2266 # Offset: 11517
.Ltmp2264:
    00002cff: 	callq	clock@PLT # Offset: 11519
    00002d04: 	movq	0x40(%rsp), %rdi
    00002d09: 	pxor	%xmm0, %xmm0
    00002d0d: 	movq	%rax, end_time(%rip)
    00002d14: 	subq	start_time(%rip), %rax
    00002d1b: 	cvtsi2sd	%rax, %xmm0
    00002d20: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00002d28: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 11560
    00002d2d: 	movq	0x230(%rsp), %rdi
    00002d35: 	cmpq	0x98(%rsp), %rdi
    00002d3d: 	je	.Ltmp2267 # Offset: 11581
    00002d3f: 	movq	0x240(%rsp), %rax
    00002d47: 	leaq	0x1(%rax), %rsi
    00002d4b: 	callq	_ZdlPvm@PLT # Offset: 11595
.Ltmp2267:
    00002d50: 	movq	0xa8(%rsp), %rbx
    00002d58: 	leaq	0x210(%rsp), %rdi
    00002d60: 	leaq	DATAat0x1d256(%rip), %rdx
    00002d67: 	movq	%rbx, %rsi
    00002d6a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11626
    00002d6f: 	movl	iterations(%rip), %edx
    00002d75: 	movl	$0x1, %r8d
    00002d7b: 	movl	$0x1, %ecx
    00002d80: 	movq	0x210(%rsp), %rdi
    00002d88: 	movl	$0x7d0, %esi
    00002d8d: 	callq	_Z9summarizePKciiii # Offset: 11661
    00002d92: 	movq	0x40(%rsp), %rdi
    00002d97: 	leaq	DATAat0x1d26d(%rip), %rdx
    00002d9e: 	movq	%rbx, %rsi
    00002da1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11681
    00002da6: 	callq	clock@PLT # Offset: 11686
    00002dab: 	movl	iterations(%rip), %r14d
    00002db2: 	xorl	%ebx, %ebx
    00002db4: 	movq	%rax, start_time(%rip)
    00002dbb: 	testl	%r14d, %r14d
    00002dbe: 	jle	.Ltmp2268 # Offset: 11710
    00002dc4: 	nopl	(%rax) # Size: 4
.Ltmp2271:
    00002dc8: 	movq	0x68(%rsp), %r14
    00002dcd: 	movq	0x58(%rsp), %rsi
    00002dd2: 	movl	$0x3e80, %edx
    00002dd7: 	movl	$0x3e7, %r13d
    00002ddd: 	movq	%r14, %rdi
    00002de0: 	callq	memcpy@PLT # Offset: 11744
    00002de5: 	nopl	(%rax) # Size: 3
.Ltmp2269:
    00002de8: 	movsd	(%r14,%r13,8), %xmm0
    00002dee: 	movq	%r13, %rdx
    00002df1: 	movq	%r14, %rsi
    00002df4: 	movl	$0x7d0, %edi
    00002df9: 	callq	_ZN9benchmark9__sift_inIPddEEvlT_lT0_ # Offset: 11769
    00002dfe: 	subq	$0x1, %r13
    00002e02: 	jae	.Ltmp2269 # Offset: 11778
    00002e04: 	movq	0x68(%rsp), %r14
    00002e09: 	movl	$0x7cf, %r13d
    00002e0f: 	nop # Size: 1
.Ltmp2270:
    00002e10: 	movsd	(%r14,%r13,8), %xmm0
    00002e16: 	xorl	%edx, %edx
    00002e18: 	movq	%r13, %rdi
    00002e1b: 	movq	%r14, %rsi
    00002e1e: 	movsd	0x250(%rsp), %xmm1
    00002e27: 	movsd	%xmm1, (%r14,%r13,8)
    00002e2d: 	callq	_ZN9benchmark9__sift_inIPddEEvlT_lT0_ # Offset: 11821
    00002e32: 	subq	$0x1, %r13
    00002e36: 	jne	.Ltmp2270 # Offset: 11830
    00002e38: 	movq	0x40(%rsp), %rdx
    00002e3d: 	movq	0x68(%rsp), %rdi
    00002e42: 	movq	%rbp, %rsi
    00002e45: 	callq	_Z13verify_sortedIPdEvT_S1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 11845
    00002e4a: 	addl	$0x1, %ebx
    00002e4d: 	cmpl	iterations(%rip), %ebx
    00002e53: 	jl	.Ltmp2271 # Offset: 11859
.Ltmp2268:
    00002e59: 	callq	clock@PLT # Offset: 11865
    00002e5e: 	movq	0x40(%rsp), %rdi
    00002e63: 	pxor	%xmm0, %xmm0
    00002e67: 	movq	%rax, end_time(%rip)
    00002e6e: 	subq	start_time(%rip), %rax
    00002e75: 	cvtsi2sd	%rax, %xmm0
    00002e7a: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00002e82: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 11906
    00002e87: 	movq	0x230(%rsp), %rdi
    00002e8f: 	cmpq	0x98(%rsp), %rdi
    00002e97: 	je	.Ltmp2272 # Offset: 11927
    00002e99: 	movq	0x240(%rsp), %rax
    00002ea1: 	leaq	0x1(%rax), %rsi
    00002ea5: 	callq	_ZdlPvm@PLT # Offset: 11941
.Ltmp2272:
    00002eaa: 	movq	0xa8(%rsp), %rsi
    00002eb2: 	movq	0x40(%rsp), %rdi
    00002eb7: 	leaq	DATAat0x1d780(%rip), %rdx
    00002ebe: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11966
    00002ec3: 	callq	clock@PLT # Offset: 11971
    00002ec8: 	movl	iterations(%rip), %r13d
    00002ecf: 	xorl	%ebx, %ebx
    00002ed1: 	movq	%rax, start_time(%rip)
    00002ed8: 	testl	%r13d, %r13d
    00002edb: 	jle	.Ltmp2273 # Offset: 11995
    00002ee1: 	nopl	(%rax) # Size: 7
.Ltmp2276:
    00002ee8: 	movq	0xb0(%rsp), %rsi
    00002ef0: 	movl	$0x3e80, %edx
    00002ef5: 	movq	%rbp, %rdi
    00002ef8: 	movl	$0x3e7, %r13d
    00002efe: 	callq	memcpy@PLT # Offset: 12030
    00002f03: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2274:
    00002f08: 	movsd	(%rbp,%r13,8), %xmm0
    00002f0f: 	movq	%r13, %rdx
    00002f12: 	movq	%rbp, %rsi
    00002f15: 	movl	$0x7d0, %edi
    00002f1a: 	callq	_ZN9benchmark9__sift_inIP9TypeClassIdES2_EEvlT_lT0_ # Offset: 12058
    00002f1f: 	subq	$0x1, %r13
    00002f23: 	jae	.Ltmp2274 # Offset: 12067
    00002f25: 	movl	$0x7cf, %r13d
    00002f2b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2275:
    00002f30: 	movsd	(%rbp,%r13,8), %xmm0
    00002f37: 	xorl	%edx, %edx
    00002f39: 	movq	%r13, %rdi
    00002f3c: 	movq	%rbp, %rsi
    00002f3f: 	movsd	0x40d0(%rsp), %xmm1
    00002f48: 	movsd	%xmm1, (%rbp,%r13,8)
    00002f4f: 	callq	_ZN9benchmark9__sift_inIP9TypeClassIdES2_EEvlT_lT0_ # Offset: 12111
    00002f54: 	subq	$0x1, %r13
    00002f58: 	jne	.Ltmp2275 # Offset: 12120
    00002f5a: 	movq	0x40(%rsp), %rdx
    00002f5f: 	movq	%r12, %rsi
    00002f62: 	movq	%rbp, %rdi
    00002f65: 	callq	_Z13verify_sortedIP9TypeClassIdEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 12133
    00002f6a: 	addl	$0x1, %ebx
    00002f6d: 	cmpl	iterations(%rip), %ebx
    00002f73: 	jl	.Ltmp2276 # Offset: 12147
.Ltmp2273:
    00002f79: 	callq	clock@PLT # Offset: 12153
    00002f7e: 	movq	0x40(%rsp), %rdi
    00002f83: 	pxor	%xmm0, %xmm0
    00002f87: 	movq	%rax, end_time(%rip)
    00002f8e: 	subq	start_time(%rip), %rax
    00002f95: 	cvtsi2sd	%rax, %xmm0
    00002f9a: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00002fa2: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 12194
    00002fa7: 	movq	0x230(%rsp), %rdi
    00002faf: 	cmpq	0x98(%rsp), %rdi
    00002fb7: 	je	.Ltmp2277 # Offset: 12215
    00002fb9: 	movq	0x240(%rsp), %rax
    00002fc1: 	leaq	0x1(%rax), %rsi
    00002fc5: 	callq	_ZdlPvm@PLT # Offset: 12229
.Ltmp2277:
    00002fca: 	movq	0xa8(%rsp), %rsi
    00002fd2: 	movq	0x40(%rsp), %rdi
    00002fd7: 	leaq	DATAat0x1d7a8(%rip), %rdx
    00002fde: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12254
    00002fe3: 	callq	clock@PLT # Offset: 12259
    00002fe8: 	movl	iterations(%rip), %r11d
    00002fef: 	xorl	%ebx, %ebx
    00002ff1: 	movq	%rax, start_time(%rip)
    00002ff8: 	testl	%r11d, %r11d
    00002ffb: 	jle	.Ltmp2278 # Offset: 12283
    00003001: 	nopl	(%rax) # Size: 7
.Ltmp2281:
    00003008: 	movq	0xb8(%rsp), %rsi
    00003010: 	movl	$0x3e80, %edx
    00003015: 	movq	%r12, %rdi
    00003018: 	movl	$0x3e7, %ebp
    0000301d: 	callq	memcpy@PLT # Offset: 12317
    00003022: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2279:
    00003028: 	movsd	(%r12,%rbp,8), %xmm0
    0000302e: 	movq	%rbp, %rdx
    00003031: 	movq	%r12, %rsi
    00003034: 	movl	$0x7d0, %edi
    00003039: 	callq	_ZN9benchmark9__sift_inIP12TypeSubClassIdES2_EEvlT_lT0_ # Offset: 12345
    0000303e: 	subq	$0x1, %rbp
    00003042: 	jae	.Ltmp2279 # Offset: 12354
    00003044: 	movl	$0x7cf, %ebp
    00003049: 	nopl	(%rax) # Size: 7
.Ltmp2280:
    00003050: 	movsd	(%r12,%rbp,8), %xmm0
    00003056: 	xorl	%edx, %edx
    00003058: 	movq	%rbp, %rdi
    0000305b: 	movq	%r12, %rsi
    0000305e: 	movsd	0x7f50(%rsp), %xmm1
    00003067: 	movsd	%xmm1, (%r12,%rbp,8)
    0000306d: 	callq	_ZN9benchmark9__sift_inIP12TypeSubClassIdES2_EEvlT_lT0_ # Offset: 12397
    00003072: 	subq	$0x1, %rbp
    00003076: 	jne	.Ltmp2280 # Offset: 12406
    00003078: 	movq	0x40(%rsp), %rdx
    0000307d: 	movq	0x48(%rsp), %rsi
    00003082: 	movq	%r12, %rdi
    00003085: 	callq	_Z13verify_sortedIP12TypeSubClassIdEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 12421
    0000308a: 	addl	$0x1, %ebx
    0000308d: 	cmpl	iterations(%rip), %ebx
    00003093: 	jl	.Ltmp2281 # Offset: 12435
.Ltmp2278:
    00003099: 	callq	clock@PLT # Offset: 12441
    0000309e: 	movq	0x40(%rsp), %rdi
    000030a3: 	pxor	%xmm0, %xmm0
    000030a7: 	movq	%rax, end_time(%rip)
    000030ae: 	subq	start_time(%rip), %rax
    000030b5: 	cvtsi2sd	%rax, %xmm0
    000030ba: 	divsd	DATAat0x1dec0(%rip), %xmm0
    000030c2: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 12482
    000030c7: 	movq	0x230(%rsp), %rdi
    000030cf: 	cmpq	0x98(%rsp), %rdi
    000030d7: 	je	.Ltmp2282 # Offset: 12503
    000030d9: 	movq	0x240(%rsp), %rax
    000030e1: 	leaq	0x1(%rax), %rsi
    000030e5: 	callq	_ZdlPvm@PLT # Offset: 12517
.Ltmp2282:
    000030ea: 	movq	0xa8(%rsp), %rsi
    000030f2: 	movq	0x40(%rsp), %rdi
    000030f7: 	leaq	DATAat0x1d7c8(%rip), %rdx
    000030fe: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12542
    00003103: 	callq	clock@PLT # Offset: 12547
    00003108: 	movl	iterations(%rip), %r10d
    0000310f: 	xorl	%ebx, %ebx
    00003111: 	movq	%rax, start_time(%rip)
    00003118: 	testl	%r10d, %r10d
    0000311b: 	jle	.Ltmp2283 # Offset: 12571
    00003121: 	nopl	(%rax) # Size: 7
.Ltmp2286:
    00003128: 	movq	0x48(%rsp), %r12
    0000312d: 	movl	$0x3e80, %edx
    00003132: 	movl	$0x3e7, %ebp
    00003137: 	movq	0xc0(%rsp), %rsi
    0000313f: 	movq	%r12, %rdi
    00003142: 	callq	memcpy@PLT # Offset: 12610
    00003147: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2284:
    00003150: 	movsd	(%r12,%rbp,8), %xmm0
    00003156: 	movq	%rbp, %rdx
    00003159: 	movq	%r12, %rsi
    0000315c: 	movl	$0x7d0, %edi
    00003161: 	callq	_ZN9benchmark9__sift_inIP13TypeSub2ClassIdES2_EEvlT_lT0_ # Offset: 12641
    00003166: 	subq	$0x1, %rbp
    0000316a: 	jae	.Ltmp2284 # Offset: 12650
    0000316c: 	movq	0x48(%rsp), %r12
    00003171: 	movl	$0x7cf, %ebp
    00003176: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2285:
    00003180: 	movsd	(%r12,%rbp,8), %xmm0
    00003186: 	xorl	%edx, %edx
    00003188: 	movq	%rbp, %rdi
    0000318b: 	movq	%r12, %rsi
    0000318e: 	movsd	0xbdd0(%rsp), %xmm1
    00003197: 	movsd	%xmm1, (%r12,%rbp,8)
    0000319d: 	callq	_ZN9benchmark9__sift_inIP13TypeSub2ClassIdES2_EEvlT_lT0_ # Offset: 12701
    000031a2: 	subq	$0x1, %rbp
    000031a6: 	jne	.Ltmp2285 # Offset: 12710
    000031a8: 	movq	0x40(%rsp), %rdx
    000031ad: 	movq	0x50(%rsp), %rsi
    000031b2: 	movq	0x48(%rsp), %rdi
    000031b7: 	callq	_Z13verify_sortedIP13TypeSub2ClassIdEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 12727
    000031bc: 	addl	$0x1, %ebx
    000031bf: 	cmpl	iterations(%rip), %ebx
    000031c5: 	jl	.Ltmp2286 # Offset: 12741
.Ltmp2283:
    000031cb: 	callq	clock@PLT # Offset: 12747
    000031d0: 	movq	0x40(%rsp), %rdi
    000031d5: 	pxor	%xmm0, %xmm0
    000031d9: 	movq	%rax, end_time(%rip)
    000031e0: 	subq	start_time(%rip), %rax
    000031e7: 	cvtsi2sd	%rax, %xmm0
    000031ec: 	divsd	DATAat0x1dec0(%rip), %xmm0
    000031f4: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 12788
    000031f9: 	movq	0x230(%rsp), %rdi
    00003201: 	cmpq	0x98(%rsp), %rdi
    00003209: 	je	.Ltmp2287 # Offset: 12809
    0000320b: 	movq	0x240(%rsp), %rax
    00003213: 	leaq	0x1(%rax), %rsi
    00003217: 	callq	_ZdlPvm@PLT # Offset: 12823
.Ltmp2287:
    0000321c: 	movq	0xa8(%rsp), %rsi
    00003224: 	movq	0x40(%rsp), %rdi
    00003229: 	leaq	DATAat0x1d7f0(%rip), %rdx
    00003230: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12848
    00003235: 	callq	clock@PLT # Offset: 12853
    0000323a: 	movl	iterations(%rip), %r9d
    00003241: 	xorl	%ebx, %ebx
    00003243: 	movq	%rax, start_time(%rip)
    0000324a: 	testl	%r9d, %r9d
    0000324d: 	jle	.Ltmp2288 # Offset: 12877
    00003253: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2291:
    00003258: 	movq	0x50(%rsp), %r12
    0000325d: 	movl	$0x3e80, %edx
    00003262: 	movl	$0x3e7, %ebp
    00003267: 	movq	0xa0(%rsp), %rsi
    0000326f: 	movq	%r12, %rdi
    00003272: 	callq	memcpy@PLT # Offset: 12914
    00003277: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2289:
    00003280: 	movsd	(%r12,%rbp,8), %xmm0
    00003286: 	movq	%rbp, %rdx
    00003289: 	movq	%r12, %rsi
    0000328c: 	movl	$0x7d0, %edi
    00003291: 	callq	_ZN9benchmark9__sift_inIP12DeepSubClassIdES2_EEvlT_lT0_ # Offset: 12945
    00003296: 	subq	$0x1, %rbp
    0000329a: 	jae	.Ltmp2289 # Offset: 12954
    0000329c: 	movq	0x50(%rsp), %r12
    000032a1: 	movl	$0x7cf, %ebp
    000032a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2290:
    000032b0: 	movsd	(%r12,%rbp,8), %xmm0
    000032b6: 	xorl	%edx, %edx
    000032b8: 	movq	%rbp, %rdi
    000032bb: 	movq	%r12, %rsi
    000032be: 	movsd	0xfc50(%rsp), %xmm1
    000032c7: 	movsd	%xmm1, (%r12,%rbp,8)
    000032cd: 	callq	_ZN9benchmark9__sift_inIP12DeepSubClassIdES2_EEvlT_lT0_ # Offset: 13005
    000032d2: 	subq	$0x1, %rbp
    000032d6: 	jne	.Ltmp2290 # Offset: 13014
    000032d8: 	movq	0x40(%rsp), %rdx
    000032dd: 	movq	0x58(%rsp), %rsi
    000032e2: 	movq	0x50(%rsp), %rdi
    000032e7: 	callq	_Z13verify_sortedIP12DeepSubClassIdEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 13031
    000032ec: 	addl	$0x1, %ebx
    000032ef: 	cmpl	iterations(%rip), %ebx
    000032f5: 	jl	.Ltmp2291 # Offset: 13045
.Ltmp2288:
    000032fb: 	callq	clock@PLT # Offset: 13051
    00003300: 	movq	0x40(%rsp), %rdi
    00003305: 	pxor	%xmm0, %xmm0
    00003309: 	movq	%rax, end_time(%rip)
    00003310: 	subq	start_time(%rip), %rax
    00003317: 	cvtsi2sd	%rax, %xmm0
    0000331c: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00003324: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 13092
    00003329: 	movq	0x230(%rsp), %rdi
    00003331: 	cmpq	0x98(%rsp), %rdi
    00003339: 	je	.Ltmp2292 # Offset: 13113
    0000333b: 	movq	0x240(%rsp), %rax
    00003343: 	leaq	0x1(%rax), %rsi
    00003347: 	callq	_ZdlPvm@PLT # Offset: 13127
.Ltmp2292:
    0000334c: 	movq	0xa8(%rsp), %rsi
    00003354: 	movq	0x40(%rsp), %rdi
    00003359: 	leaq	DATAat0x1d810(%rip), %rdx
    00003360: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13152
    00003365: 	callq	clock@PLT # Offset: 13157
    0000336a: 	movl	iterations(%rip), %r8d
    00003371: 	xorl	%r14d, %r14d
    00003374: 	leaq	0x2b1c8(%rsp), %r15
    0000337c: 	movq	%rax, start_time(%rip)
    00003383: 	leaq	0xf0(%rsp), %r12
    0000338b: 	leaq	0xe0(%rsp), %r13
    00003393: 	testl	%r8d, %r8d
    00003396: 	jle	.Ltmp2293 # Offset: 13206
    0000339c: 	nopl	(%rax) # Size: 4
.Ltmp2297:
    000033a0: 	movq	0x28(%rsp), %rdx
    000033a5: 	movq	0x38(%rsp), %rax
    000033aa: 	movq	0x80(%rsp), %rcx
    000033b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2294:
    000033b8: 	movsd	0x8(%rax), %xmm0
    000033bd: 	addq	$0x10, %rax
    000033c1: 	addq	$0x10, %rdx
    000033c5: 	movsd	%xmm0, -0x8(%rdx)
    000033ca: 	cmpq	%rcx, %rax
    000033cd: 	jne	.Ltmp2294 # Offset: 13261
    000033cf: 	movq	%r15, %rbp
    000033d2: 	movl	$0x3e7, %ebx
    000033d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2295:
    000033e0: 	movsd	(%rbp), %xmm0
    000033e5: 	movq	0x28(%rsp), %rsi
    000033ea: 	movq	%r12, %rcx
    000033ed: 	movq	%rbx, %rdx
    000033f0: 	leaq	_ZTV16TypeVirtualClassIdE+16(%rip), %rax
    000033f7: 	movl	$0x7d0, %edi
    000033fc: 	movq	%rax, 0xf0(%rsp)
    00003404: 	movsd	%xmm0, 0xf8(%rsp)
    0000340d: 	callq	_ZN9benchmark9__sift_inIP16TypeVirtualClassIdES2_EEvlT_lT0_ # Offset: 13325
    00003412: 	subq	$0x1, %rbx
    00003416: 	subq	$0x10, %rbp
    0000341a: 	cmpq	$-0x1, %rbx
    0000341e: 	jne	.Ltmp2295 # Offset: 13342
    00003420: 	leaq	0x2f048(%rsp), %rbp
    00003428: 	movl	$0x7cf, %ebx
    0000342d: 	nopl	(%rax) # Size: 3
.Ltmp2296:
    00003430: 	movsd	(%rbp), %xmm0
    00003435: 	movq	0x28(%rsp), %rsi
    0000343a: 	movq	%r13, %rcx
    0000343d: 	xorl	%edx, %edx
    0000343f: 	movsd	0x27358(%rsp), %xmm1
    00003448: 	leaq	_ZTV16TypeVirtualClassIdE+16(%rip), %rax
    0000344f: 	movq	%rbx, %rdi
    00003452: 	movq	%rax, 0xe0(%rsp)
    0000345a: 	movsd	%xmm1, (%rbp)
    0000345f: 	movsd	%xmm0, 0xe8(%rsp)
    00003468: 	callq	_ZN9benchmark9__sift_inIP16TypeVirtualClassIdES2_EEvlT_lT0_ # Offset: 13416
    0000346d: 	subq	$0x10, %rbp
    00003471: 	subq	$0x1, %rbx
    00003475: 	jne	.Ltmp2296 # Offset: 13429
    00003477: 	movq	0x40(%rsp), %rdx
    0000347c: 	movq	0x18(%rsp), %rsi
    00003481: 	movq	0x28(%rsp), %rdi
    00003486: 	callq	_Z13verify_sortedIP16TypeVirtualClassIdEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 13446
    0000348b: 	addl	$0x1, %r14d
    0000348f: 	cmpl	iterations(%rip), %r14d
    00003496: 	jl	.Ltmp2297 # Offset: 13462
.Ltmp2293:
    0000349c: 	callq	clock@PLT # Offset: 13468
    000034a1: 	movq	0x40(%rsp), %rdi
    000034a6: 	pxor	%xmm0, %xmm0
    000034aa: 	movq	%rax, end_time(%rip)
    000034b1: 	subq	start_time(%rip), %rax
    000034b8: 	cvtsi2sd	%rax, %xmm0
    000034bd: 	divsd	DATAat0x1dec0(%rip), %xmm0
    000034c5: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 13509
    000034ca: 	movq	0x230(%rsp), %rdi
    000034d2: 	cmpq	0x98(%rsp), %rdi
    000034da: 	je	.Ltmp2298 # Offset: 13530
    000034dc: 	movq	0x240(%rsp), %rax
    000034e4: 	leaq	0x1(%rax), %rsi
    000034e8: 	callq	_ZdlPvm@PLT # Offset: 13544
.Ltmp2298:
    000034ed: 	movq	0xa8(%rsp), %rsi
    000034f5: 	movq	0x40(%rsp), %rdi
    000034fa: 	leaq	DATAat0x1d838(%rip), %rdx
    00003501: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13569
    00003506: 	callq	clock@PLT # Offset: 13574
    0000350b: 	movl	iterations(%rip), %edi
    00003511: 	xorl	%r14d, %r14d
    00003514: 	leaq	0x32ec8(%rsp), %r15
    0000351c: 	movq	%rax, start_time(%rip)
    00003523: 	leaq	0x110(%rsp), %r12
    0000352b: 	leaq	0x100(%rsp), %r13
    00003533: 	testl	%edi, %edi
    00003535: 	jle	.Ltmp2299 # Offset: 13621
    0000353b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2303:
    00003540: 	movq	0x18(%rsp), %rdx
    00003545: 	movq	0x80(%rsp), %rax
    0000354d: 	movq	0x78(%rsp), %rcx
    00003552: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2300:
    00003558: 	movsd	0x8(%rax), %xmm0
    0000355d: 	addq	$0x10, %rax
    00003561: 	addq	$0x10, %rdx
    00003565: 	movsd	%xmm0, -0x8(%rdx)
    0000356a: 	cmpq	%rcx, %rax
    0000356d: 	jne	.Ltmp2300 # Offset: 13677
    0000356f: 	movq	%r15, %rbp
    00003572: 	movl	$0x3e7, %ebx
    00003577: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2301:
    00003580: 	movsd	(%rbp), %xmm0
    00003585: 	movq	0x18(%rsp), %rsi
    0000358a: 	movq	%r12, %rcx
    0000358d: 	movq	%rbx, %rdx
    00003590: 	leaq	_ZTV19TypeVirtualSubClassIdE+16(%rip), %rax
    00003597: 	movl	$0x7d0, %edi
    0000359c: 	movq	%rax, 0x110(%rsp)
    000035a4: 	movsd	%xmm0, 0x118(%rsp)
    000035ad: 	callq	_ZN9benchmark9__sift_inIP19TypeVirtualSubClassIdES2_EEvlT_lT0_ # Offset: 13741
    000035b2: 	subq	$0x1, %rbx
    000035b6: 	subq	$0x10, %rbp
    000035ba: 	cmpq	$-0x1, %rbx
    000035be: 	jne	.Ltmp2301 # Offset: 13758
    000035c0: 	leaq	0x36d48(%rsp), %rbp
    000035c8: 	movl	$0x7cf, %ebx
    000035cd: 	nopl	(%rax) # Size: 3
.Ltmp2302:
    000035d0: 	movsd	(%rbp), %xmm0
    000035d5: 	movq	0x18(%rsp), %rsi
    000035da: 	movq	%r13, %rcx
    000035dd: 	xorl	%edx, %edx
    000035df: 	movsd	0x2f058(%rsp), %xmm1
    000035e8: 	leaq	_ZTV19TypeVirtualSubClassIdE+16(%rip), %rax
    000035ef: 	movq	%rbx, %rdi
    000035f2: 	movq	%rax, 0x100(%rsp)
    000035fa: 	movsd	%xmm1, (%rbp)
    000035ff: 	movsd	%xmm0, 0x108(%rsp)
    00003608: 	callq	_ZN9benchmark9__sift_inIP19TypeVirtualSubClassIdES2_EEvlT_lT0_ # Offset: 13832
    0000360d: 	subq	$0x10, %rbp
    00003611: 	subq	$0x1, %rbx
    00003615: 	jne	.Ltmp2302 # Offset: 13845
    00003617: 	movq	0x40(%rsp), %rdx
    0000361c: 	movq	0x10(%rsp), %rsi
    00003621: 	movq	0x18(%rsp), %rdi
    00003626: 	callq	_Z13verify_sortedIP19TypeVirtualSubClassIdEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 13862
    0000362b: 	addl	$0x1, %r14d
    0000362f: 	cmpl	iterations(%rip), %r14d
    00003636: 	jl	.Ltmp2303 # Offset: 13878
.Ltmp2299:
    0000363c: 	callq	clock@PLT # Offset: 13884
    00003641: 	movq	0x40(%rsp), %rdi
    00003646: 	pxor	%xmm0, %xmm0
    0000364a: 	movq	%rax, end_time(%rip)
    00003651: 	subq	start_time(%rip), %rax
    00003658: 	cvtsi2sd	%rax, %xmm0
    0000365d: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00003665: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 13925
    0000366a: 	movq	0x230(%rsp), %rdi
    00003672: 	cmpq	0x98(%rsp), %rdi
    0000367a: 	je	.Ltmp2304 # Offset: 13946
    0000367c: 	movq	0x240(%rsp), %rax
    00003684: 	leaq	0x1(%rax), %rsi
    00003688: 	callq	_ZdlPvm@PLT # Offset: 13960
.Ltmp2304:
    0000368d: 	movq	0xa8(%rsp), %rsi
    00003695: 	movq	0x40(%rsp), %rdi
    0000369a: 	leaq	DATAat0x1d860(%rip), %rdx
    000036a1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13985
    000036a6: 	callq	clock@PLT # Offset: 13990
    000036ab: 	movl	iterations(%rip), %esi
    000036b1: 	xorl	%r15d, %r15d
    000036b4: 	leaq	0x130(%rsp), %r14
    000036bc: 	movq	%rax, start_time(%rip)
    000036c3: 	leaq	0x3abc8(%rsp), %rax
    000036cb: 	leaq	_ZN14WorkerSubClassIdEcvdEv(%rip), %r12
    000036d2: 	movq	%rax, 0x28(%rsp)
    000036d7: 	testl	%esi, %esi
    000036d9: 	jle	.Ltmp2305 # Offset: 14041
    000036df: 	nop # Size: 1
.Ltmp2316:
    000036e0: 	movq	0x10(%rsp), %rdx
    000036e5: 	movq	0x78(%rsp), %rax
    000036ea: 	movq	0x88(%rsp), %rcx
    000036f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2306:
    000036f8: 	movsd	0x8(%rax), %xmm0
    000036fd: 	addq	$0x10, %rax
    00003701: 	addq	$0x10, %rdx
    00003705: 	movsd	%xmm0, -0x8(%rdx)
    0000370a: 	cmpq	%rcx, %rax
    0000370d: 	jne	.Ltmp2306 # Offset: 14093
    0000370f: 	movq	0x28(%rsp), %rbp
    00003714: 	movl	$0x3e7, %ebx
    00003719: 	nopl	(%rax) # Size: 7
.Ltmp2307:
    00003720: 	movsd	(%rbp), %xmm0
    00003725: 	movq	0x10(%rsp), %rsi
    0000372a: 	movq	%r14, %rcx
    0000372d: 	movq	%rbx, %rdx
    00003730: 	leaq	_ZTV14WorkerSubClassIdE+16(%rip), %rax
    00003737: 	movl	$0x7d0, %edi
    0000373c: 	movq	%rax, 0x130(%rsp)
    00003744: 	movsd	%xmm0, 0x138(%rsp)
    0000374d: 	callq	_ZN9benchmark9__sift_inIP14WorkerSubClassIdES2_EEvlT_lT0_ # Offset: 14157
    00003752: 	subq	$0x1, %rbx
    00003756: 	subq	$0x10, %rbp
    0000375a: 	cmpq	$-0x1, %rbx
    0000375e: 	jne	.Ltmp2307 # Offset: 14174
    00003760: 	leaq	0x3ea48(%rsp), %rbp
    00003768: 	movl	$0x7cf, %ebx
    0000376d: 	leaq	0x120(%rsp), %r13
    00003775: 	nopl	(%rax) # Size: 3
.Ltmp2308:
    00003778: 	movsd	(%rbp), %xmm0
    0000377d: 	movq	0x10(%rsp), %rsi
    00003782: 	movq	%r13, %rcx
    00003785: 	xorl	%edx, %edx
    00003787: 	movsd	0x36d58(%rsp), %xmm1
    00003790: 	leaq	_ZTV14WorkerSubClassIdE+16(%rip), %rax
    00003797: 	movq	%rbx, %rdi
    0000379a: 	movq	%rax, 0x120(%rsp)
    000037a2: 	movsd	%xmm1, (%rbp)
    000037a7: 	movsd	%xmm0, 0x128(%rsp)
    000037b0: 	callq	_ZN9benchmark9__sift_inIP14WorkerSubClassIdES2_EEvlT_lT0_ # Offset: 14256
    000037b5: 	subq	$0x10, %rbp
    000037b9: 	subq	$0x1, %rbx
    000037bd: 	jne	.Ltmp2308 # Offset: 14269
    000037bf: 	leaq	0x36d60(%rsp), %rbx
    000037c7: 	jmp	.Ltmp2309 # Offset: 14279
    000037c9: 	nopl	(%rax) # Size: 7
.Ltmp2313:
    000037d0: 	movq	-0x20(%rbx), %rax
    000037d4: 	movsd	-0x8(%rbx), %xmm7
    000037d9: 	movq	(%rax), %rax
    000037dc: 	movsd	%xmm7, 0x18(%rsp)
    000037e2: 	cmpq	%r12, %rax
    000037e5: 	jne	.Ltmp2310 # Offset: 14309
.Ltmp2314:
    000037e7: 	movsd	-0x18(%rbx), %xmm0
    000037ec: 	comisd	0x18(%rsp), %xmm0
    000037f2: 	ja	.Ltmp2311 # Offset: 14322
.Ltmp2315:
    000037f4: 	cmpq	(%rsp), %rbx
    000037f8: 	je	.Ltmp2312 # Offset: 14328
.Ltmp2309:
    000037fa: 	leaq	-0x10(%rbx), %rbp
    000037fe: 	movq	%rbx, %rdi
    00003801: 	movq	(%rbx), %rax
    00003804: 	addq	$0x10, %rbx
    00003808: 	movq	(%rax), %rax
    0000380b: 	cmpq	%r12, %rax
    0000380e: 	je	.Ltmp2313 # Offset: 14350
    00003810: 	callq	*%rax # Offset: 14352
    00003812: 	movq	-0x20(%rbx), %rax
    00003816: 	movsd	%xmm0, 0x18(%rsp)
    0000381c: 	movq	(%rax), %rax
    0000381f: 	cmpq	%r12, %rax
    00003822: 	je	.Ltmp2314 # Offset: 14370
    00003824: 	nopl	(%rax) # Size: 4
.Ltmp2310:
    00003828: 	movq	%rbp, %rdi
    0000382b: 	callq	*%rax # Offset: 14379
    0000382d: 	comisd	0x18(%rsp), %xmm0
    00003833: 	jbe	.Ltmp2315 # Offset: 14387
.Ltmp2311:
    00003835: 	movq	0x230(%rsp), %rdx
    0000383d: 	leaq	DATAat0x1d1cf(%rip), %rsi
    00003844: 	movl	$0x1, %edi
    00003849: 	xorl	%eax, %eax
    0000384b: 	callq	__printf_chk@PLT # Offset: 14411
.Ltmp2312:
    00003850: 	addl	$0x1, %r15d
    00003854: 	cmpl	iterations(%rip), %r15d
    0000385b: 	jl	.Ltmp2316 # Offset: 14427
.Ltmp2305:
    00003861: 	callq	clock@PLT # Offset: 14433
    00003866: 	movq	0x40(%rsp), %rdi
    0000386b: 	pxor	%xmm0, %xmm0
    0000386f: 	movq	%rax, end_time(%rip)
    00003876: 	subq	start_time(%rip), %rax
    0000387d: 	cvtsi2sd	%rax, %xmm0
    00003882: 	divsd	DATAat0x1dec0(%rip), %xmm0
    0000388a: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 14474
    0000388f: 	movq	0x230(%rsp), %rdi
    00003897: 	cmpq	0x98(%rsp), %rdi
    0000389f: 	je	.Ltmp2317 # Offset: 14495
    000038a1: 	movq	0x240(%rsp), %rax
    000038a9: 	leaq	0x1(%rax), %rsi
    000038ad: 	callq	_ZdlPvm@PLT # Offset: 14509
.Ltmp2317:
    000038b2: 	movq	0xa8(%rsp), %rsi
    000038ba: 	movq	0x40(%rsp), %rdi
    000038bf: 	leaq	DATAat0x1d888(%rip), %rdx
    000038c6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 14534
    000038cb: 	callq	clock@PLT # Offset: 14539
    000038d0: 	movl	iterations(%rip), %ecx
    000038d6: 	xorl	%r15d, %r15d
    000038d9: 	leaq	0x150(%rsp), %r14
    000038e1: 	movq	%rax, start_time(%rip)
    000038e8: 	leaq	0x428c8(%rsp), %rax
    000038f0: 	leaq	_ZN18WorkerDeepSubClassIdEcvdEv(%rip), %r12
    000038f7: 	movq	%rax, 0x18(%rsp)
    000038fc: 	testl	%ecx, %ecx
    000038fe: 	jle	.Ltmp2318 # Offset: 14590
    00003904: 	nopl	(%rax) # Size: 4
.Ltmp2329:
    00003908: 	movq	(%rsp), %rdx
    0000390c: 	movq	0x88(%rsp), %rax
    00003914: 	movq	0x90(%rsp), %rcx
    0000391c: 	nopl	(%rax) # Size: 4
.Ltmp2319:
    00003920: 	movsd	0x8(%rax), %xmm0
    00003925: 	addq	$0x10, %rax
    00003929: 	addq	$0x10, %rdx
    0000392d: 	movsd	%xmm0, -0x8(%rdx)
    00003932: 	cmpq	%rcx, %rax
    00003935: 	jne	.Ltmp2319 # Offset: 14645
    00003937: 	movq	0x18(%rsp), %rbp
    0000393c: 	movl	$0x3e7, %ebx
    00003941: 	nopl	(%rax) # Size: 7
.Ltmp2320:
    00003948: 	movsd	(%rbp), %xmm0
    0000394d: 	movq	(%rsp), %rsi
    00003951: 	movq	%r14, %rcx
    00003954: 	movq	%rbx, %rdx
    00003957: 	leaq	_ZTV18WorkerDeepSubClassIdE+16(%rip), %rax
    0000395e: 	movl	$0x7d0, %edi
    00003963: 	movq	%rax, 0x150(%rsp)
    0000396b: 	movsd	%xmm0, 0x158(%rsp)
    00003974: 	callq	_ZN9benchmark9__sift_inIP18WorkerDeepSubClassIdES2_EEvlT_lT0_ # Offset: 14708
    00003979: 	subq	$0x1, %rbx
    0000397d: 	subq	$0x10, %rbp
    00003981: 	cmpq	$-0x1, %rbx
    00003985: 	jne	.Ltmp2320 # Offset: 14725
    00003987: 	leaq	0x46748(%rsp), %rbp
    0000398f: 	movl	$0x7cf, %ebx
    00003994: 	leaq	0x140(%rsp), %r13
    0000399c: 	nopl	(%rax) # Size: 4
.Ltmp2321:
    000039a0: 	movsd	(%rbp), %xmm0
    000039a5: 	movq	(%rsp), %rsi
    000039a9: 	movq	%r13, %rcx
    000039ac: 	xorl	%edx, %edx
    000039ae: 	movsd	0x3ea58(%rsp), %xmm1
    000039b7: 	leaq	_ZTV18WorkerDeepSubClassIdE+16(%rip), %rax
    000039be: 	movq	%rbx, %rdi
    000039c1: 	movq	%rax, 0x140(%rsp)
    000039c9: 	movsd	%xmm1, (%rbp)
    000039ce: 	movsd	%xmm0, 0x148(%rsp)
    000039d7: 	callq	_ZN9benchmark9__sift_inIP18WorkerDeepSubClassIdES2_EEvlT_lT0_ # Offset: 14807
    000039dc: 	subq	$0x10, %rbp
    000039e0: 	subq	$0x1, %rbx
    000039e4: 	jne	.Ltmp2321 # Offset: 14820
    000039e6: 	leaq	0x3ea60(%rsp), %rbx
    000039ee: 	jmp	.Ltmp2322 # Offset: 14830
.Ltmp2326:
    000039f0: 	movq	-0x20(%rbx), %rax
    000039f4: 	movsd	-0x8(%rbx), %xmm2
    000039f9: 	movq	(%rax), %rax
    000039fc: 	movsd	%xmm2, 0x10(%rsp)
    00003a02: 	cmpq	%r12, %rax
    00003a05: 	jne	.Ltmp2323 # Offset: 14853
.Ltmp2327:
    00003a07: 	movsd	-0x18(%rbx), %xmm0
    00003a0c: 	comisd	0x10(%rsp), %xmm0
    00003a12: 	ja	.Ltmp2324 # Offset: 14866
.Ltmp2328:
    00003a14: 	cmpq	0x8(%rsp), %rbx
    00003a19: 	je	.Ltmp2325 # Offset: 14873
.Ltmp2322:
    00003a1b: 	leaq	-0x10(%rbx), %rbp
    00003a1f: 	movq	%rbx, %rdi
    00003a22: 	movq	(%rbx), %rax
    00003a25: 	addq	$0x10, %rbx
    00003a29: 	movq	(%rax), %rax
    00003a2c: 	cmpq	%r12, %rax
    00003a2f: 	je	.Ltmp2326 # Offset: 14895
    00003a31: 	callq	*%rax # Offset: 14897
    00003a33: 	movq	-0x20(%rbx), %rax
    00003a37: 	movsd	%xmm0, 0x10(%rsp)
    00003a3d: 	movq	(%rax), %rax
    00003a40: 	cmpq	%r12, %rax
    00003a43: 	je	.Ltmp2327 # Offset: 14915
    00003a45: 	nopl	(%rax) # Size: 3
.Ltmp2323:
    00003a48: 	movq	%rbp, %rdi
    00003a4b: 	callq	*%rax # Offset: 14923
    00003a4d: 	comisd	0x10(%rsp), %xmm0
    00003a53: 	jbe	.Ltmp2328 # Offset: 14931
.Ltmp2324:
    00003a55: 	movq	0x230(%rsp), %rdx
    00003a5d: 	leaq	DATAat0x1d1cf(%rip), %rsi
    00003a64: 	movl	$0x1, %edi
    00003a69: 	xorl	%eax, %eax
    00003a6b: 	callq	__printf_chk@PLT # Offset: 14955
.Ltmp2325:
    00003a70: 	addl	$0x1, %r15d
    00003a74: 	cmpl	iterations(%rip), %r15d
    00003a7b: 	jl	.Ltmp2329 # Offset: 14971
.Ltmp2318:
    00003a81: 	callq	clock@PLT # Offset: 14977
    00003a86: 	movq	0x40(%rsp), %rdi
    00003a8b: 	pxor	%xmm0, %xmm0
    00003a8f: 	movq	%rax, end_time(%rip)
    00003a96: 	subq	start_time(%rip), %rax
    00003a9d: 	cvtsi2sd	%rax, %xmm0
    00003aa2: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00003aaa: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 15018
    00003aaf: 	movq	0x230(%rsp), %rdi
    00003ab7: 	cmpq	0x98(%rsp), %rdi
    00003abf: 	je	.Ltmp2330 # Offset: 15039
    00003ac1: 	movq	0x240(%rsp), %rax
    00003ac9: 	leaq	0x1(%rax), %rsi
    00003acd: 	callq	_ZdlPvm@PLT # Offset: 15053
.Ltmp2330:
    00003ad2: 	movq	0xa8(%rsp), %rsi
    00003ada: 	movq	0x40(%rsp), %rdi
    00003adf: 	leaq	DATAat0x1d8b0(%rip), %rdx
    00003ae6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 15078
    00003aeb: 	callq	clock@PLT # Offset: 15083
    00003af0: 	movl	iterations(%rip), %edx
    00003af6: 	xorl	%r14d, %r14d
    00003af9: 	leaq	0x4a5c8(%rsp), %r15
    00003b01: 	movq	%rax, start_time(%rip)
    00003b08: 	leaq	0x170(%rsp), %r12
    00003b10: 	leaq	0x160(%rsp), %r13
    00003b18: 	testl	%edx, %edx
    00003b1a: 	jle	.Ltmp2331 # Offset: 15130
.Ltmp2335:
    00003b20: 	movq	0x8(%rsp), %rdx
    00003b25: 	movq	0x90(%rsp), %rax
    00003b2d: 	movq	0x70(%rsp), %rcx
    00003b32: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2332:
    00003b38: 	movsd	0x8(%rax), %xmm0
    00003b3d: 	addq	$0x10, %rax
    00003b41: 	addq	$0x10, %rdx
    00003b45: 	movsd	%xmm0, -0x8(%rdx)
    00003b4a: 	cmpq	%rcx, %rax
    00003b4d: 	jne	.Ltmp2332 # Offset: 15181
    00003b4f: 	movq	%r15, %rbp
    00003b52: 	movl	$0x3e7, %ebx
    00003b57: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2333:
    00003b60: 	movsd	(%rbp), %xmm0
    00003b65: 	movq	0x8(%rsp), %rsi
    00003b6a: 	movq	%r12, %rcx
    00003b6d: 	movq	%rbx, %rdx
    00003b70: 	leaq	_ZTV15WorkerSubClass2IdE+16(%rip), %rax
    00003b77: 	movl	$0x7d0, %edi
    00003b7c: 	movq	%rax, 0x170(%rsp)
    00003b84: 	movsd	%xmm0, 0x178(%rsp)
    00003b8d: 	callq	_ZN9benchmark9__sift_inIP15WorkerSubClass2IdES2_EEvlT_lT0_ # Offset: 15245
    00003b92: 	subq	$0x1, %rbx
    00003b96: 	subq	$0x10, %rbp
    00003b9a: 	cmpq	$-0x1, %rbx
    00003b9e: 	jne	.Ltmp2333 # Offset: 15262
    00003ba0: 	leaq	0x4e448(%rsp), %rbp
    00003ba8: 	movl	$0x7cf, %ebx
    00003bad: 	nopl	(%rax) # Size: 3
.Ltmp2334:
    00003bb0: 	movsd	(%rbp), %xmm0
    00003bb5: 	movq	0x8(%rsp), %rsi
    00003bba: 	movq	%r13, %rcx
    00003bbd: 	xorl	%edx, %edx
    00003bbf: 	movsd	0x46758(%rsp), %xmm1
    00003bc8: 	leaq	_ZTV15WorkerSubClass2IdE+16(%rip), %rax
    00003bcf: 	movq	%rbx, %rdi
    00003bd2: 	movq	%rax, 0x160(%rsp)
    00003bda: 	movsd	%xmm1, (%rbp)
    00003bdf: 	movsd	%xmm0, 0x168(%rsp)
    00003be8: 	callq	_ZN9benchmark9__sift_inIP15WorkerSubClass2IdES2_EEvlT_lT0_ # Offset: 15336
    00003bed: 	subq	$0x10, %rbp
    00003bf1: 	subq	$0x1, %rbx
    00003bf5: 	jne	.Ltmp2334 # Offset: 15349
    00003bf7: 	movq	0x40(%rsp), %rdx
    00003bfc: 	movq	0x20(%rsp), %rsi
    00003c01: 	movq	0x8(%rsp), %rdi
    00003c06: 	callq	_Z13verify_sortedIP15WorkerSubClass2IdEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 15366
    00003c0b: 	addl	$0x1, %r14d
    00003c0f: 	cmpl	iterations(%rip), %r14d
    00003c16: 	jl	.Ltmp2335 # Offset: 15382
.Ltmp2331:
    00003c1c: 	callq	clock@PLT # Offset: 15388
    00003c21: 	movq	0x40(%rsp), %rdi
    00003c26: 	pxor	%xmm0, %xmm0
    00003c2a: 	movq	%rax, end_time(%rip)
    00003c31: 	subq	start_time(%rip), %rax
    00003c38: 	cvtsi2sd	%rax, %xmm0
    00003c3d: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00003c45: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 15429
    00003c4a: 	movq	0x230(%rsp), %rdi
    00003c52: 	cmpq	0x98(%rsp), %rdi
    00003c5a: 	je	.Ltmp2336 # Offset: 15450
    00003c5c: 	movq	0x240(%rsp), %rax
    00003c64: 	leaq	0x1(%rax), %rsi
    00003c68: 	callq	_ZdlPvm@PLT # Offset: 15464
.Ltmp2336:
    00003c6d: 	movq	0xa8(%rsp), %rsi
    00003c75: 	movq	0x40(%rsp), %rdi
    00003c7a: 	leaq	DATAat0x1d8d8(%rip), %rdx
    00003c81: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 15489
    00003c86: 	callq	clock@PLT # Offset: 15494
    00003c8b: 	xorl	%r14d, %r14d
    00003c8e: 	leaq	0x522c8(%rsp), %r15
    00003c96: 	leaq	_ZN15WorkerSubClass3IdEcvdEv(%rip), %r12
    00003c9d: 	movq	%rax, start_time(%rip)
    00003ca4: 	movl	iterations(%rip), %eax
    00003caa: 	testl	%eax, %eax
    00003cac: 	jle	.Ltmp2337 # Offset: 15532
    00003cb2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2348:
    00003cb8: 	movq	0x20(%rsp), %rdx
    00003cbd: 	movq	0x70(%rsp), %rax
    00003cc2: 	movq	0xc8(%rsp), %rcx
    00003cca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2338:
    00003cd0: 	movsd	0x8(%rax), %xmm0
    00003cd5: 	addq	$0x10, %rax
    00003cd9: 	addq	$0x10, %rdx
    00003cdd: 	movsd	%xmm0, -0x8(%rdx)
    00003ce2: 	cmpq	%rcx, %rax
    00003ce5: 	jne	.Ltmp2338 # Offset: 15589
    00003ce7: 	movq	%r15, %rbp
    00003cea: 	movl	$0x3e7, %ebx
    00003cef: 	nop # Size: 1
.Ltmp2339:
    00003cf0: 	movsd	(%rbp), %xmm0
    00003cf5: 	movq	0x60(%rsp), %rcx
    00003cfa: 	movq	%rbx, %rdx
    00003cfd: 	leaq	_ZTV15WorkerSubClass3IdE+16(%rip), %rax
    00003d04: 	movq	0x20(%rsp), %rsi
    00003d09: 	movl	$0x7d0, %edi
    00003d0e: 	movq	%rax, 0x190(%rsp)
    00003d16: 	movsd	%xmm0, 0x198(%rsp)
    00003d1f: 	callq	_ZN9benchmark9__sift_inIP15WorkerSubClass3IdES2_EEvlT_lT0_ # Offset: 15647
    00003d24: 	subq	$0x1, %rbx
    00003d28: 	subq	$0x10, %rbp
    00003d2c: 	cmpq	$-0x1, %rbx
    00003d30: 	jne	.Ltmp2339 # Offset: 15664
    00003d32: 	leaq	0x56148(%rsp), %rbp
    00003d3a: 	movl	$0x7cf, %ebx
    00003d3f: 	leaq	0x180(%rsp), %r13
    00003d47: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2340:
    00003d50: 	movsd	(%rbp), %xmm0
    00003d55: 	movq	0x20(%rsp), %rsi
    00003d5a: 	movq	%r13, %rcx
    00003d5d: 	xorl	%edx, %edx
    00003d5f: 	movsd	0x4e458(%rsp), %xmm1
    00003d68: 	leaq	_ZTV15WorkerSubClass3IdE+16(%rip), %rax
    00003d6f: 	movq	%rbx, %rdi
    00003d72: 	movq	%rax, 0x180(%rsp)
    00003d7a: 	movsd	%xmm1, (%rbp)
    00003d7f: 	movsd	%xmm0, 0x188(%rsp)
    00003d88: 	callq	_ZN9benchmark9__sift_inIP15WorkerSubClass3IdES2_EEvlT_lT0_ # Offset: 15752
    00003d8d: 	subq	$0x10, %rbp
    00003d91: 	subq	$0x1, %rbx
    00003d95: 	jne	.Ltmp2340 # Offset: 15765
    00003d97: 	leaq	0x4e460(%rsp), %rbx
    00003d9f: 	jmp	.Ltmp2341 # Offset: 15775
    00003da1: 	nopl	(%rax) # Size: 7
.Ltmp2345:
    00003da8: 	movq	-0x20(%rbx), %rax
    00003dac: 	movsd	-0x8(%rbx), %xmm3
    00003db1: 	movq	(%rax), %rax
    00003db4: 	movsd	%xmm3, (%rsp)
    00003db9: 	cmpq	%r12, %rax
    00003dbc: 	jne	.Ltmp2342 # Offset: 15804
.Ltmp2346:
    00003dbe: 	movsd	-0x18(%rbx), %xmm0
    00003dc3: 	comisd	(%rsp), %xmm0
    00003dc8: 	ja	.Ltmp2343 # Offset: 15816
.Ltmp2347:
    00003dca: 	cmpq	0x38(%rsp), %rbx
    00003dcf: 	je	.Ltmp2344 # Offset: 15823
.Ltmp2341:
    00003dd1: 	leaq	-0x10(%rbx), %rbp
    00003dd5: 	movq	%rbx, %rdi
    00003dd8: 	movq	(%rbx), %rax
    00003ddb: 	addq	$0x10, %rbx
    00003ddf: 	movq	(%rax), %rax
    00003de2: 	cmpq	%r12, %rax
    00003de5: 	je	.Ltmp2345 # Offset: 15845
    00003de7: 	callq	*%rax # Offset: 15847
    00003de9: 	movq	-0x20(%rbx), %rax
    00003ded: 	movsd	%xmm0, (%rsp)
    00003df2: 	movq	(%rax), %rax
    00003df5: 	cmpq	%r12, %rax
    00003df8: 	je	.Ltmp2346 # Offset: 15864
    00003dfa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2342:
    00003e00: 	movq	%rbp, %rdi
    00003e03: 	callq	*%rax # Offset: 15875
    00003e05: 	comisd	(%rsp), %xmm0
    00003e0a: 	jbe	.Ltmp2347 # Offset: 15882
.Ltmp2343:
    00003e0c: 	movq	0x230(%rsp), %rdx
    00003e14: 	leaq	DATAat0x1d1cf(%rip), %rsi
    00003e1b: 	movl	$0x1, %edi
    00003e20: 	xorl	%eax, %eax
    00003e22: 	callq	__printf_chk@PLT # Offset: 15906
.Ltmp2344:
    00003e27: 	addl	$0x1, %r14d
    00003e2b: 	cmpl	iterations(%rip), %r14d
    00003e32: 	jl	.Ltmp2348 # Offset: 15922
.Ltmp2337:
    00003e38: 	callq	clock@PLT # Offset: 15928
    00003e3d: 	movq	0x40(%rsp), %rdi
    00003e42: 	pxor	%xmm0, %xmm0
    00003e46: 	movq	%rax, end_time(%rip)
    00003e4d: 	subq	start_time(%rip), %rax
    00003e54: 	cvtsi2sd	%rax, %xmm0
    00003e59: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00003e61: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 15969
    00003e66: 	movq	0x230(%rsp), %rdi
    00003e6e: 	cmpq	0x98(%rsp), %rdi
    00003e76: 	je	.Ltmp2349 # Offset: 15990
    00003e78: 	movq	0x240(%rsp), %rax
    00003e80: 	leaq	0x1(%rax), %rsi
    00003e84: 	callq	_ZdlPvm@PLT # Offset: 16004
.Ltmp2349:
    00003e89: 	movq	0xa8(%rsp), %rsi
    00003e91: 	movq	0x40(%rsp), %rdi
    00003e96: 	leaq	DATAat0x1d288(%rip), %rdx
    00003e9d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 16029
    00003ea2: 	movl	iterations(%rip), %edx
    00003ea8: 	movl	$0x1, %r8d
    00003eae: 	movl	$0x1, %ecx
    00003eb3: 	movq	0x230(%rsp), %rdi
    00003ebb: 	movl	$0x7d0, %esi
    00003ec0: 	callq	_Z9summarizePKciiii # Offset: 16064
    00003ec5: 	movl	0xdc(%rsp), %eax
    00003ecc: 	movq	0x230(%rsp), %rdi
    00003ed4: 	movl	%eax, iterations(%rip)
    00003eda: 	cmpq	0x98(%rsp), %rdi
    00003ee2: 	je	.Ltmp2350 # Offset: 16098
    00003ee4: 	movq	0x240(%rsp), %rax
    00003eec: 	leaq	0x1(%rax), %rsi
    00003ef0: 	callq	_ZdlPvm@PLT # Offset: 16112
.Ltmp2350:
    00003ef5: 	movq	0x210(%rsp), %rdi
    00003efd: 	leaq	0x220(%rsp), %rax
    00003f05: 	cmpq	%rax, %rdi
    00003f08: 	je	.Ltmp2351 # Offset: 16136
    00003f0a: 	movq	0x220(%rsp), %rax
    00003f12: 	leaq	0x1(%rax), %rsi
    00003f16: 	callq	_ZdlPvm@PLT # Offset: 16150
.Ltmp2351:
    00003f1b: 	movq	0x1f0(%rsp), %rdi
    00003f23: 	leaq	0x200(%rsp), %rax
    00003f2b: 	cmpq	%rax, %rdi
    00003f2e: 	je	.Ltmp2352 # Offset: 16174
    00003f30: 	movq	0x200(%rsp), %rax
    00003f38: 	leaq	0x1(%rax), %rsi
    00003f3c: 	callq	_ZdlPvm@PLT # Offset: 16188
.Ltmp2352:
    00003f41: 	movq	0x1d0(%rsp), %rdi
    00003f49: 	leaq	0x1e0(%rsp), %rax
    00003f51: 	cmpq	%rax, %rdi
    00003f54: 	je	.Ltmp2353 # Offset: 16212
    00003f56: 	movq	0x1e0(%rsp), %rax
    00003f5e: 	leaq	0x1(%rax), %rsi
    00003f62: 	callq	_ZdlPvm@PLT # Offset: 16226
.Ltmp2353:
    00003f67: 	movq	0x1b0(%rsp), %rdi
    00003f6f: 	leaq	0x1c0(%rsp), %rax
    00003f77: 	cmpq	%rax, %rdi
    00003f7a: 	je	.Ltmp2354 # Offset: 16250
    00003f7c: 	movq	0x1c0(%rsp), %rax
    00003f84: 	leaq	0x1(%rax), %rsi
    00003f88: 	callq	_ZdlPvm@PLT # Offset: 16264
.Ltmp2354:
    00003f8d: 	movq	0x84f58(%rsp), %rax
    00003f95: 	subq	%fs:0x28, %rax
    00003f9e: 	jne	.Ltmp2355 # Offset: 16286
    00003fa4: 	addq	$0x84f68, %rsp
    00003fab: 	popq	%rbx
    00003fac: 	popq	%rbp
    00003fad: 	popq	%r12
    00003faf: 	popq	%r13
    00003fb1: 	popq	%r14
    00003fb3: 	popq	%r15
    00003fb5: 	retq # Offset: 16309
    00003fb6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2117:
    00003fc0: 	movq	0x28(%rsp), %r14
    00003fc5: 	jmp	.Ltmp2116 # Offset: 16325
    00003fca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2134:
    00003fd0: 	movq	0x18(%rsp), %r14
    00003fd5: 	jmp	.Ltmp2133 # Offset: 16341
    00003fda: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2151:
    00003fe0: 	movq	0x10(%rsp), %r14
    00003fe5: 	jmp	.Ltmp2150 # Offset: 16357
    00003fea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2178:
    00003ff0: 	movq	0x8(%rsp), %r14
    00003ff5: 	jmp	.Ltmp2177 # Offset: 16373
    00003ffa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2168:
    00004000: 	movq	(%rsp), %r13
    00004004: 	jmp	.Ltmp2167 # Offset: 16388
    00004009: 	nopl	(%rax) # Size: 7
.Ltmp2195:
    00004010: 	movq	0x20(%rsp), %r14
    00004015: 	jmp	.Ltmp2194 # Offset: 16405
.Ltmp2073:
    0000401a: 	movq	0x234d0(%rsp), %rdx
    00004022: 	movq	%r14, %rsi
    00004025: 	movl	$0x1, %edi
    0000402a: 	xorl	%eax, %eax
    0000402c: 	callq	__printf_chk@PLT # Offset: 16428
    00004031: 	movl	iterations(%rip), %edx
    00004037: 	jmp	.Ltmp2356 # Offset: 16439
.Ltmp2068:
    0000403c: 	movq	0x234d0(%rsp), %rdx
    00004044: 	movq	%r14, %rsi
    00004047: 	movl	$0x1, %edi
    0000404c: 	xorl	%eax, %eax
    0000404e: 	callq	__printf_chk@PLT # Offset: 16462
    00004053: 	movl	iterations(%rip), %edx
    00004059: 	jmp	.Ltmp2357 # Offset: 16473
.Ltmp2063:
    0000405e: 	movq	0x234d0(%rsp), %rdx
    00004066: 	movq	%r14, %rsi
    00004069: 	movl	$0x1, %edi
    0000406e: 	xorl	%eax, %eax
    00004070: 	callq	__printf_chk@PLT # Offset: 16496
    00004075: 	movl	iterations(%rip), %edx
    0000407b: 	jmp	.Ltmp2358 # Offset: 16507
.Ltmp2058:
    00004080: 	movq	0x234d0(%rsp), %rdx
    00004088: 	movq	%r14, %rsi
    0000408b: 	movl	$0x1, %edi
    00004090: 	xorl	%eax, %eax
    00004092: 	callq	__printf_chk@PLT # Offset: 16530
    00004097: 	movl	iterations(%rip), %edx
    0000409d: 	jmp	.Ltmp2359 # Offset: 16541
.Ltmp2053:
    000040a2: 	movq	0x234d0(%rsp), %rdx
    000040aa: 	movq	%r14, %rsi
    000040ad: 	movl	$0x1, %edi
    000040b2: 	xorl	%eax, %eax
    000040b4: 	callq	__printf_chk@PLT # Offset: 16564
    000040b9: 	movl	iterations(%rip), %edx
    000040bf: 	jmp	.Ltmp2360 # Offset: 16575
.Ltmp2048:
    000040c4: 	movq	0x234d0(%rsp), %rdx
    000040cc: 	movq	%r14, %rsi
    000040cf: 	movl	$0x1, %edi
    000040d4: 	xorl	%eax, %eax
    000040d6: 	callq	__printf_chk@PLT # Offset: 16598
    000040db: 	movl	iterations(%rip), %edx
    000040e1: 	jmp	.Ltmp2361 # Offset: 16609
.Ltmp2043:
    000040e6: 	movq	0x234d0(%rsp), %rdx
    000040ee: 	movq	%r14, %rsi
    000040f1: 	movl	$0x1, %edi
    000040f6: 	xorl	%eax, %eax
    000040f8: 	callq	__printf_chk@PLT # Offset: 16632
    000040fd: 	movl	iterations(%rip), %edx
    00004103: 	jmp	.Ltmp2362 # Offset: 16643
.Ltmp2038:
    00004108: 	movq	0x234d0(%rsp), %rdx
    00004110: 	movq	%r14, %rsi
    00004113: 	movl	$0x1, %edi
    00004118: 	xorl	%eax, %eax
    0000411a: 	callq	__printf_chk@PLT # Offset: 16666
    0000411f: 	movl	iterations(%rip), %edx
    00004125: 	jmp	.Ltmp2363 # Offset: 16677
.Ltmp2033:
    0000412a: 	movq	0x234d0(%rsp), %rdx
    00004132: 	movq	%r14, %rsi
    00004135: 	movl	$0x1, %edi
    0000413a: 	xorl	%eax, %eax
    0000413c: 	callq	__printf_chk@PLT # Offset: 16700
    00004141: 	movl	iterations(%rip), %edx
    00004147: 	jmp	.Ltmp2364 # Offset: 16711
.Ltmp2028:
    0000414c: 	movq	0x234d0(%rsp), %rdx
    00004154: 	movq	%r14, %rsi
    00004157: 	movl	$0x1, %edi
    0000415c: 	xorl	%eax, %eax
    0000415e: 	callq	__printf_chk@PLT # Offset: 16734
    00004163: 	movl	iterations(%rip), %edx
    00004169: 	jmp	.Ltmp2365 # Offset: 16745
.Ltmp2023:
    0000416e: 	movq	0x234d0(%rsp), %rdx
    00004176: 	movq	%r13, %rsi
    00004179: 	movl	$0x1, %edi
    0000417e: 	xorl	%eax, %eax
    00004180: 	callq	__printf_chk@PLT # Offset: 16768
    00004185: 	movl	iterations(%rip), %edx
    0000418b: 	jmp	.Ltmp2366 # Offset: 16779
.Ltmp2355:
    00004190: 	callq	__stack_chk_fail@PLT # Offset: 16784
    00004195: 	endbr64
.Ltmp2368:
    00004199: 	movq	%rax, %rbp
    0000419c: 	jmp	.Ltmp2367 # Offset: 16796
    0000419e: 	endbr64
    000041a2: 	jmp	.Ltmp2368 # Offset: 16802
    000041a4: 	endbr64
    000041a8: 	jmp	.Ltmp2368 # Offset: 16808
    000041aa: 	endbr64
    000041ae: 	jmp	.Ltmp2368 # Offset: 16814
    000041b0: 	endbr64
    000041b4: 	jmp	.Ltmp2368 # Offset: 16820
    000041b6: 	endbr64
    000041ba: 	movq	%rax, %rbp
    000041bd: 	jmp	.Ltmp2369 # Offset: 16829
    000041bf: 	endbr64
.Ltmp2371:
    000041c3: 	movq	%rax, %rbp
    000041c6: 	jmp	.Ltmp2370 # Offset: 16838
    000041cb: 	endbr64
    000041cf: 	jmp	.Ltmp2371 # Offset: 16847
    000041d1: 	endbr64
    000041d5: 	jmp	.Ltmp2371 # Offset: 16853
.Ltmp2367:
    000041d7: 	movq	0x230(%rsp), %rdi
    000041df: 	cmpq	0x98(%rsp), %rdi
    000041e7: 	je	.Ltmp2369 # Offset: 16871
    000041e9: 	movq	0x240(%rsp), %rax
    000041f1: 	leaq	0x1(%rax), %rsi
    000041f5: 	callq	_ZdlPvm@PLT # Offset: 16885
.Ltmp2369:
    000041fa: 	movq	0x210(%rsp), %rdi
    00004202: 	leaq	0x220(%rsp), %rax
    0000420a: 	cmpq	%rax, %rdi
    0000420d: 	je	.Ltmp2372 # Offset: 16909
    0000420f: 	movq	0x220(%rsp), %rax
    00004217: 	leaq	0x1(%rax), %rsi
    0000421b: 	callq	_ZdlPvm@PLT # Offset: 16923
.Ltmp2372:
    00004220: 	movq	0x1f0(%rsp), %rdi
    00004228: 	leaq	0x200(%rsp), %rax
    00004230: 	cmpq	%rax, %rdi
    00004233: 	je	.Ltmp2373 # Offset: 16947
    00004235: 	movq	0x200(%rsp), %rax
    0000423d: 	leaq	0x1(%rax), %rsi
    00004241: 	callq	_ZdlPvm@PLT # Offset: 16961
.Ltmp2373:
    00004246: 	movq	0x1d0(%rsp), %rdi
    0000424e: 	leaq	0x1e0(%rsp), %rax
    00004256: 	cmpq	%rax, %rdi
    00004259: 	je	.Ltmp2374 # Offset: 16985
    0000425b: 	movq	0x1e0(%rsp), %rax
    00004263: 	leaq	0x1(%rax), %rsi
    00004267: 	callq	_ZdlPvm@PLT # Offset: 16999
.Ltmp2374:
    0000426c: 	movq	0x1b0(%rsp), %rdi
    00004274: 	leaq	0x1c0(%rsp), %rax
    0000427c: 	cmpq	%rax, %rdi
    0000427f: 	je	.Ltmp2375 # Offset: 17023
    00004281: 	movq	0x1c0(%rsp), %rax
    00004289: 	leaq	0x1(%rax), %rsi
    0000428d: 	callq	_ZdlPvm@PLT # Offset: 17037
.Ltmp2375:
    00004292: 	movq	%rbp, %rdi
    00004295: 	callq	_Unwind_Resume@PLT # Offset: 17045
    0000429a: 	endbr64
    0000429e: 	jmp	.Ltmp2371 # Offset: 17054
.Ltmp2370:
    000042a3: 	movq	0x230(%rsp), %rdi
    000042ab: 	cmpq	0x98(%rsp), %rdi
    000042b3: 	je	.Ltmp2372 # Offset: 17075
    000042b9: 	movq	0x240(%rsp), %rax
    000042c1: 	leaq	0x1(%rax), %rsi
    000042c5: 	callq	_ZdlPvm@PLT # Offset: 17093
    000042ca: 	jmp	.Ltmp2372 # Offset: 17098
    000042cf: 	endbr64
    000042d3: 	jmp	.Ltmp2368 # Offset: 17107
    000042d8: 	endbr64
    000042dc: 	jmp	.Ltmp2368 # Offset: 17116
    000042e1: 	endbr64
    000042e5: 	jmp	.Ltmp2368 # Offset: 17125
    000042ea: 	endbr64
    000042ee: 	jmp	.Ltmp2368 # Offset: 17134
    000042f3: 	endbr64
    000042f7: 	jmp	.Ltmp2368 # Offset: 17143
    000042fc: 	endbr64
    00004300: 	jmp	.Ltmp2368 # Offset: 17152
    00004305: 	endbr64
    00004309: 	jmp	.Ltmp2368 # Offset: 17161
    0000430e: 	endbr64
    00004312: 	jmp	.Ltmp2371 # Offset: 17170
    00004317: 	endbr64
.Ltmp2377:
    0000431b: 	movq	%rax, %rbp
    0000431e: 	jmp	.Ltmp2376 # Offset: 17182
    00004320: 	endbr64
    00004324: 	jmp	.Ltmp2377 # Offset: 17188
    00004326: 	endbr64
    0000432a: 	movq	%rax, %rbp
    0000432d: 	jmp	.Ltmp2378 # Offset: 17197
    0000432f: 	endbr64
    00004333: 	movq	%rax, %rbp
    00004336: 	jmp	.Ltmp2373 # Offset: 17206
.Ltmp2376:
    0000433b: 	movq	0x230(%rsp), %rdi
    00004343: 	cmpq	0x98(%rsp), %rdi
    0000434b: 	je	.Ltmp2373 # Offset: 17227
.Ltmp2379:
    00004351: 	movq	0x240(%rsp), %rax
    00004359: 	leaq	0x1(%rax), %rsi
    0000435d: 	callq	_ZdlPvm@PLT # Offset: 17245
    00004362: 	jmp	.Ltmp2373 # Offset: 17250
.Ltmp2378:
    00004367: 	movq	0x230(%rsp), %rdi
    0000436f: 	leaq	0x240(%rsp), %rax
    00004377: 	cmpq	%rax, %rdi
    0000437a: 	jne	.Ltmp2379 # Offset: 17274
    0000437c: 	jmp	.Ltmp2373 # Offset: 17276
    00004381: 	endbr64
.Ltmp2381:
    00004385: 	movq	%rax, %rbp
    00004388: 	jmp	.Ltmp2380 # Offset: 17288
    0000438a: 	endbr64
    0000438e: 	jmp	.Ltmp2381 # Offset: 17294
    00004390: 	endbr64
    00004394: 	jmp	.Ltmp2381 # Offset: 17300
    00004396: 	endbr64
    0000439a: 	jmp	.Ltmp2381 # Offset: 17306
.Ltmp2380:
    0000439c: 	movq	0x234d0(%rsp), %rdi
    000043a4: 	cmpq	%r13, %rdi
    000043a7: 	je	.Ltmp2374 # Offset: 17319
.Ltmp2383:
    000043ad: 	movq	0x234e0(%rsp), %rax
    000043b5: 	leaq	0x1(%rax), %rsi
    000043b9: 	callq	_ZdlPvm@PLT # Offset: 17337
    000043be: 	jmp	.Ltmp2374 # Offset: 17342
    000043c3: 	endbr64
    000043c7: 	jmp	.Ltmp2381 # Offset: 17351
    000043c9: 	endbr64
    000043cd: 	jmp	.Ltmp2381 # Offset: 17357
    000043cf: 	endbr64
    000043d3: 	jmp	.Ltmp2381 # Offset: 17363
    000043d5: 	endbr64
    000043d9: 	movq	%rax, %rbp
    000043dc: 	jmp	.Ltmp2382 # Offset: 17372
    000043de: 	endbr64
    000043e2: 	movq	%rax, %rbp
    000043e5: 	jmp	.Ltmp2374 # Offset: 17381
.Ltmp2382:
    000043ea: 	movq	0x234d0(%rsp), %rdi
    000043f2: 	leaq	0x234e0(%rsp), %rax
    000043fa: 	cmpq	%rax, %rdi
    000043fd: 	jne	.Ltmp2383 # Offset: 17405
    000043ff: 	jmp	.Ltmp2374 # Offset: 17407
    00004404: 	endbr64
    00004408: 	jmp	.Ltmp2381 # Offset: 17416
    0000440d: 	endbr64
    00004411: 	jmp	.Ltmp2381 # Offset: 17425
    00004416: 	endbr64
    0000441a: 	jmp	.Ltmp2381 # Offset: 17434
    0000441f: 	endbr64
    00004423: 	jmp	.Ltmp2377 # Offset: 17443
    00004428: 	endbr64
    0000442c: 	jmp	.Ltmp2377 # Offset: 17452
    00004431: 	endbr64
    00004435: 	jmp	.Ltmp2377 # Offset: 17461
    0000443a: 	endbr64
    0000443e: 	jmp	.Ltmp2377 # Offset: 17470
    00004443: 	endbr64
    00004447: 	jmp	.Ltmp2377 # Offset: 17479
    0000444c: 	endbr64
    00004450: 	jmp	.Ltmp2377 # Offset: 17488
    00004455: 	endbr64
    00004459: 	jmp	.Ltmp2377 # Offset: 17497
    0000445e: 	endbr64
    00004462: 	jmp	.Ltmp2377 # Offset: 17506
    00004467: 	endbr64
    0000446b: 	jmp	.Ltmp2371 # Offset: 17515
    00004470: 	endbr64
    00004474: 	jmp	.Ltmp2371 # Offset: 17524
    00004479: 	endbr64
    0000447d: 	jmp	.Ltmp2371 # Offset: 17533
    00004482: 	endbr64
    00004486: 	movq	%rax, %rbp
    00004489: 	jmp	.Ltmp2372 # Offset: 17545
    0000448e: 	endbr64
    00004492: 	jmp	.Ltmp2371 # Offset: 17554
    00004497: 	endbr64
    0000449b: 	jmp	.Ltmp2371 # Offset: 17563
    000044a0: 	endbr64
    000044a4: 	jmp	.Ltmp2371 # Offset: 17572
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIdEvv"

Binary Function "_ZN9benchmark9__sift_inIPiiEEvlT_lT0_" after disassembly {
  Number      : 147
  State       : disassembled
  Address     : 0x11630
  Size        : 0x103
  MaxSize     : 0x110
  Offset      : 0x11630
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIPiiEEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0146:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r11
    00000007: 	leaq	0x2(%rdx,%rdx), %rax
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rsi, %rdi
    00000010: 	movq	%rdx, %r8
    00000013: 	movl	%ecx, %r9d
    00000016: 	cmpq	%r11, %rax
    00000019: 	jge	.Ltmp2384 # Offset: 25
    0000001f: 	movq	%rdx, %r10
    00000022: 	jmp	.Ltmp2385 # Offset: 34
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp2387:
    00000028: 	leaq	-0x1(%rax), %rbx
    0000002c: 	leaq	(%rax,%rax), %rcx
    00000030: 	movl	%esi, (%rdi,%r10,4)
    00000034: 	leaq	(%rdi,%rbx,4), %rdx
    00000038: 	movq	%rbx, %rax
    0000003b: 	cmpq	%rcx, %r11
    0000003e: 	jle	.Ltmp2386 # Offset: 62
.Ltmp2388:
    00000040: 	movq	%rax, %r10
    00000043: 	movq	%rcx, %rax
.Ltmp2385:
    00000046: 	leaq	(,%rax,4), %rdx
    0000004e: 	movl	-0x4(%rdi,%rdx), %esi
    00000052: 	addq	%rdi, %rdx
    00000055: 	movl	(%rdx), %ecx
    00000057: 	cmpl	%ecx, %esi
    00000059: 	jge	.Ltmp2387 # Offset: 89
    0000005b: 	movl	%ecx, (%rdi,%r10,4)
    0000005f: 	leaq	0x2(%rax,%rax), %rcx
    00000064: 	cmpq	%rcx, %r11
    00000067: 	jg	.Ltmp2388 # Offset: 103
.Ltmp2386:
    00000069: 	cmpq	%rcx, %r11
    0000006c: 	je	.Ltmp2389 # Offset: 108
.Ltmp2394:
    00000072: 	leaq	-0x1(%rax), %rsi
    00000076: 	movq	%rsi, %rcx
    00000079: 	shrq	$0x3f, %rcx
    0000007d: 	addq	%rsi, %rcx
    00000080: 	sarq	%rcx
    00000083: 	cmpq	%r8, %rax
    00000086: 	jg	.Ltmp2390 # Offset: 134
    00000088: 	jmp	.Ltmp2391 # Offset: 136
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2393:
    00000090: 	movl	%esi, (%rdx)
    00000092: 	leaq	-0x1(%rcx), %rdx
    00000096: 	movq	%rdx, %rax
    00000099: 	shrq	$0x3f, %rax
    0000009d: 	addq	%rdx, %rax
    000000a0: 	sarq	%rax
    000000a3: 	movq	%rax, %rdx
    000000a6: 	movq	%rcx, %rax
    000000a9: 	cmpq	%rcx, %r8
    000000ac: 	jge	.Ltmp2392 # Offset: 172
    000000ae: 	movq	%rdx, %rcx
.Ltmp2390:
    000000b1: 	leaq	(%rdi,%rcx,4), %r10
    000000b5: 	leaq	(%rdi,%rax,4), %rdx
    000000b9: 	movl	(%r10), %esi
    000000bc: 	cmpl	%r9d, %esi
    000000bf: 	jl	.Ltmp2393 # Offset: 191
.Ltmp2391:
    000000c1: 	movl	%r9d, (%rdx)
    000000c4: 	popq	%rbx
    000000c5: 	retq # Offset: 197
    000000c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2392:
    000000d0: 	movq	%r10, %rdx
    000000d3: 	movl	%r9d, (%rdx)
    000000d6: 	popq	%rbx
    000000d7: 	retq # Offset: 215
    000000d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2384:
    000000e0: 	leaq	(%rsi,%rdx,4), %rdx
    000000e4: 	jne	.Ltmp2391 # Offset: 228
    000000e6: 	movq	%rax, %rcx
    000000e9: 	nopl	(%rax) # Size: 7
.Ltmp2389:
    000000f0: 	movl	-0x4(%rdi,%rcx,4), %eax
    000000f4: 	movl	%eax, (%rdx)
    000000f6: 	leaq	-0x1(%rcx), %rax
    000000fa: 	leaq	(%rdi,%rax,4), %rdx
    000000fe: 	jmp	.Ltmp2394 # Offset: 254
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIPiiEEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inIP9TypeClassIiES2_EEvlT_lT0_" after disassembly {
  Number      : 148
  State       : disassembled
  Address     : 0x11740
  Size        : 0xf0
  MaxSize     : 0xf0
  Offset      : 0x11740
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIP9TypeClassIiES2_EEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0147:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r11
    00000007: 	leaq	0x2(%rdx,%rdx), %rax
    0000000c: 	movq	%rsi, %rdi
    0000000f: 	movq	%rdx, %r8
    00000012: 	movl	%ecx, %r9d
    00000015: 	cmpq	%r11, %rax
    00000018: 	jge	.Ltmp2395 # Offset: 24
    0000001e: 	movq	%rdx, %r10
    00000021: 	jmp	.Ltmp2396 # Offset: 33
    00000023: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2398:
    00000028: 	leaq	0x2(%rax,%rax), %rcx
    0000002d: 	movl	%esi, (%rdi,%r10,4)
    00000031: 	cmpq	%rcx, %r11
    00000034: 	jle	.Ltmp2397 # Offset: 52
.Ltmp2399:
    00000036: 	movq	%rax, %r10
    00000039: 	movq	%rcx, %rax
.Ltmp2396:
    0000003c: 	leaq	(,%rax,4), %rdx
    00000044: 	leaq	-0x4(%rdi,%rdx), %rcx
    00000049: 	addq	%rdi, %rdx
    0000004c: 	movl	(%rdx), %esi
    0000004e: 	cmpl	(%rcx), %esi
    00000050: 	jg	.Ltmp2398 # Offset: 80
    00000052: 	movl	(%rcx), %ecx
    00000054: 	leaq	-0x1(%rax), %rsi
    00000058: 	leaq	(%rdi,%rsi,4), %rdx
    0000005c: 	movl	%ecx, (%rdi,%r10,4)
    00000060: 	leaq	(%rax,%rax), %rcx
    00000064: 	movq	%rsi, %rax
    00000067: 	cmpq	%r11, %rcx
    0000006a: 	jl	.Ltmp2399 # Offset: 106
.Ltmp2397:
    0000006c: 	cmpq	%r11, %rcx
    0000006f: 	je	.Ltmp2400 # Offset: 111
.Ltmp2405:
    00000071: 	leaq	-0x1(%rax), %rsi
    00000075: 	movq	%rsi, %rcx
    00000078: 	shrq	$0x3f, %rcx
    0000007c: 	addq	%rsi, %rcx
    0000007f: 	sarq	%rcx
    00000082: 	cmpq	%r8, %rax
    00000085: 	jg	.Ltmp2401 # Offset: 133
    00000087: 	jmp	.Ltmp2402 # Offset: 135
    00000089: 	nopl	(%rax) # Size: 7
.Ltmp2404:
    00000090: 	movl	(%rsi), %eax
    00000092: 	movl	%eax, (%rdx)
    00000094: 	leaq	-0x1(%rcx), %rdx
    00000098: 	movq	%rdx, %rax
    0000009b: 	shrq	$0x3f, %rax
    0000009f: 	addq	%rdx, %rax
    000000a2: 	sarq	%rax
    000000a5: 	movq	%rax, %rdx
    000000a8: 	movq	%rcx, %rax
    000000ab: 	cmpq	%rcx, %r8
    000000ae: 	jge	.Ltmp2403 # Offset: 174
    000000b0: 	movq	%rdx, %rcx
.Ltmp2401:
    000000b3: 	leaq	(%rdi,%rcx,4), %rsi
    000000b7: 	leaq	(%rdi,%rax,4), %rdx
    000000bb: 	cmpl	%r9d, (%rsi)
    000000be: 	jl	.Ltmp2404 # Offset: 190
.Ltmp2402:
    000000c0: 	movl	%r9d, (%rdx)
    000000c3: 	retq # Offset: 195
    000000c4: 	nopl	(%rax) # Size: 4
.Ltmp2403:
    000000c8: 	movq	%rsi, %rdx
    000000cb: 	movl	%r9d, (%rdx)
    000000ce: 	retq # Offset: 206
    000000cf: 	nop # Size: 1
.Ltmp2395:
    000000d0: 	leaq	(%rsi,%rdx,4), %rdx
    000000d4: 	jne	.Ltmp2402 # Offset: 212
    000000d6: 	movq	%rax, %rcx
    000000d9: 	nopl	(%rax) # Size: 7
.Ltmp2400:
    000000e0: 	movl	-0x4(%rdi,%rcx,4), %eax
    000000e4: 	movl	%eax, (%rdx)
    000000e6: 	leaq	-0x1(%rcx), %rax
    000000ea: 	leaq	(%rdi,%rax,4), %rdx
    000000ee: 	jmp	.Ltmp2405 # Offset: 238
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIP9TypeClassIiES2_EEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inIP12TypeSubClassIiES2_EEvlT_lT0_" after disassembly {
  Number      : 149
  State       : disassembled
  Address     : 0x11830
  Size        : 0xf0
  MaxSize     : 0xf0
  Offset      : 0x11830
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIP12TypeSubClassIiES2_EEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0148:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r11
    00000007: 	leaq	0x2(%rdx,%rdx), %rax
    0000000c: 	movq	%rsi, %rdi
    0000000f: 	movq	%rdx, %r8
    00000012: 	movl	%ecx, %r9d
    00000015: 	cmpq	%r11, %rax
    00000018: 	jge	.Ltmp2406 # Offset: 24
    0000001e: 	movq	%rdx, %r10
    00000021: 	jmp	.Ltmp2407 # Offset: 33
    00000023: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2409:
    00000028: 	leaq	0x2(%rax,%rax), %rcx
    0000002d: 	movl	%esi, (%rdi,%r10,4)
    00000031: 	cmpq	%rcx, %r11
    00000034: 	jle	.Ltmp2408 # Offset: 52
.Ltmp2410:
    00000036: 	movq	%rax, %r10
    00000039: 	movq	%rcx, %rax
.Ltmp2407:
    0000003c: 	leaq	(,%rax,4), %rdx
    00000044: 	leaq	-0x4(%rdi,%rdx), %rcx
    00000049: 	addq	%rdi, %rdx
    0000004c: 	movl	(%rdx), %esi
    0000004e: 	cmpl	(%rcx), %esi
    00000050: 	jg	.Ltmp2409 # Offset: 80
    00000052: 	movl	(%rcx), %ecx
    00000054: 	leaq	-0x1(%rax), %rsi
    00000058: 	leaq	(%rdi,%rsi,4), %rdx
    0000005c: 	movl	%ecx, (%rdi,%r10,4)
    00000060: 	leaq	(%rax,%rax), %rcx
    00000064: 	movq	%rsi, %rax
    00000067: 	cmpq	%r11, %rcx
    0000006a: 	jl	.Ltmp2410 # Offset: 106
.Ltmp2408:
    0000006c: 	cmpq	%r11, %rcx
    0000006f: 	je	.Ltmp2411 # Offset: 111
.Ltmp2416:
    00000071: 	leaq	-0x1(%rax), %rsi
    00000075: 	movq	%rsi, %rcx
    00000078: 	shrq	$0x3f, %rcx
    0000007c: 	addq	%rsi, %rcx
    0000007f: 	sarq	%rcx
    00000082: 	cmpq	%r8, %rax
    00000085: 	jg	.Ltmp2412 # Offset: 133
    00000087: 	jmp	.Ltmp2413 # Offset: 135
    00000089: 	nopl	(%rax) # Size: 7
.Ltmp2415:
    00000090: 	movl	(%rsi), %eax
    00000092: 	movl	%eax, (%rdx)
    00000094: 	leaq	-0x1(%rcx), %rdx
    00000098: 	movq	%rdx, %rax
    0000009b: 	shrq	$0x3f, %rax
    0000009f: 	addq	%rdx, %rax
    000000a2: 	sarq	%rax
    000000a5: 	movq	%rax, %rdx
    000000a8: 	movq	%rcx, %rax
    000000ab: 	cmpq	%rcx, %r8
    000000ae: 	jge	.Ltmp2414 # Offset: 174
    000000b0: 	movq	%rdx, %rcx
.Ltmp2412:
    000000b3: 	leaq	(%rdi,%rcx,4), %rsi
    000000b7: 	leaq	(%rdi,%rax,4), %rdx
    000000bb: 	cmpl	%r9d, (%rsi)
    000000be: 	jl	.Ltmp2415 # Offset: 190
.Ltmp2413:
    000000c0: 	movl	%r9d, (%rdx)
    000000c3: 	retq # Offset: 195
    000000c4: 	nopl	(%rax) # Size: 4
.Ltmp2414:
    000000c8: 	movq	%rsi, %rdx
    000000cb: 	movl	%r9d, (%rdx)
    000000ce: 	retq # Offset: 206
    000000cf: 	nop # Size: 1
.Ltmp2406:
    000000d0: 	leaq	(%rsi,%rdx,4), %rdx
    000000d4: 	jne	.Ltmp2413 # Offset: 212
    000000d6: 	movq	%rax, %rcx
    000000d9: 	nopl	(%rax) # Size: 7
.Ltmp2411:
    000000e0: 	movl	-0x4(%rdi,%rcx,4), %eax
    000000e4: 	movl	%eax, (%rdx)
    000000e6: 	leaq	-0x1(%rcx), %rax
    000000ea: 	leaq	(%rdi,%rax,4), %rdx
    000000ee: 	jmp	.Ltmp2416 # Offset: 238
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIP12TypeSubClassIiES2_EEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inIP13TypeSub2ClassIiES2_EEvlT_lT0_" after disassembly {
  Number      : 150
  State       : disassembled
  Address     : 0x11920
  Size        : 0xf0
  MaxSize     : 0xf0
  Offset      : 0x11920
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIP13TypeSub2ClassIiES2_EEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0149:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r11
    00000007: 	leaq	0x2(%rdx,%rdx), %rax
    0000000c: 	movq	%rsi, %rdi
    0000000f: 	movq	%rdx, %r8
    00000012: 	movl	%ecx, %r9d
    00000015: 	cmpq	%r11, %rax
    00000018: 	jge	.Ltmp2417 # Offset: 24
    0000001e: 	movq	%rdx, %r10
    00000021: 	jmp	.Ltmp2418 # Offset: 33
    00000023: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2420:
    00000028: 	leaq	0x2(%rax,%rax), %rcx
    0000002d: 	movl	%esi, (%rdi,%r10,4)
    00000031: 	cmpq	%rcx, %r11
    00000034: 	jle	.Ltmp2419 # Offset: 52
.Ltmp2421:
    00000036: 	movq	%rax, %r10
    00000039: 	movq	%rcx, %rax
.Ltmp2418:
    0000003c: 	leaq	(,%rax,4), %rdx
    00000044: 	leaq	-0x4(%rdi,%rdx), %rcx
    00000049: 	addq	%rdi, %rdx
    0000004c: 	movl	(%rdx), %esi
    0000004e: 	cmpl	(%rcx), %esi
    00000050: 	jg	.Ltmp2420 # Offset: 80
    00000052: 	movl	(%rcx), %ecx
    00000054: 	leaq	-0x1(%rax), %rsi
    00000058: 	leaq	(%rdi,%rsi,4), %rdx
    0000005c: 	movl	%ecx, (%rdi,%r10,4)
    00000060: 	leaq	(%rax,%rax), %rcx
    00000064: 	movq	%rsi, %rax
    00000067: 	cmpq	%r11, %rcx
    0000006a: 	jl	.Ltmp2421 # Offset: 106
.Ltmp2419:
    0000006c: 	cmpq	%r11, %rcx
    0000006f: 	je	.Ltmp2422 # Offset: 111
.Ltmp2427:
    00000071: 	leaq	-0x1(%rax), %rsi
    00000075: 	movq	%rsi, %rcx
    00000078: 	shrq	$0x3f, %rcx
    0000007c: 	addq	%rsi, %rcx
    0000007f: 	sarq	%rcx
    00000082: 	cmpq	%r8, %rax
    00000085: 	jg	.Ltmp2423 # Offset: 133
    00000087: 	jmp	.Ltmp2424 # Offset: 135
    00000089: 	nopl	(%rax) # Size: 7
.Ltmp2426:
    00000090: 	movl	(%rsi), %eax
    00000092: 	movl	%eax, (%rdx)
    00000094: 	leaq	-0x1(%rcx), %rdx
    00000098: 	movq	%rdx, %rax
    0000009b: 	shrq	$0x3f, %rax
    0000009f: 	addq	%rdx, %rax
    000000a2: 	sarq	%rax
    000000a5: 	movq	%rax, %rdx
    000000a8: 	movq	%rcx, %rax
    000000ab: 	cmpq	%rcx, %r8
    000000ae: 	jge	.Ltmp2425 # Offset: 174
    000000b0: 	movq	%rdx, %rcx
.Ltmp2423:
    000000b3: 	leaq	(%rdi,%rcx,4), %rsi
    000000b7: 	leaq	(%rdi,%rax,4), %rdx
    000000bb: 	cmpl	%r9d, (%rsi)
    000000be: 	jl	.Ltmp2426 # Offset: 190
.Ltmp2424:
    000000c0: 	movl	%r9d, (%rdx)
    000000c3: 	retq # Offset: 195
    000000c4: 	nopl	(%rax) # Size: 4
.Ltmp2425:
    000000c8: 	movq	%rsi, %rdx
    000000cb: 	movl	%r9d, (%rdx)
    000000ce: 	retq # Offset: 206
    000000cf: 	nop # Size: 1
.Ltmp2417:
    000000d0: 	leaq	(%rsi,%rdx,4), %rdx
    000000d4: 	jne	.Ltmp2424 # Offset: 212
    000000d6: 	movq	%rax, %rcx
    000000d9: 	nopl	(%rax) # Size: 7
.Ltmp2422:
    000000e0: 	movl	-0x4(%rdi,%rcx,4), %eax
    000000e4: 	movl	%eax, (%rdx)
    000000e6: 	leaq	-0x1(%rcx), %rax
    000000ea: 	leaq	(%rdi,%rax,4), %rdx
    000000ee: 	jmp	.Ltmp2427 # Offset: 238
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIP13TypeSub2ClassIiES2_EEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inIP12DeepSubClassIiES2_EEvlT_lT0_" after disassembly {
  Number      : 151
  State       : disassembled
  Address     : 0x11a10
  Size        : 0xf0
  MaxSize     : 0xf0
  Offset      : 0x11a10
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIP12DeepSubClassIiES2_EEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0150:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r11
    00000007: 	leaq	0x2(%rdx,%rdx), %rax
    0000000c: 	movq	%rsi, %rdi
    0000000f: 	movq	%rdx, %r8
    00000012: 	movl	%ecx, %r9d
    00000015: 	cmpq	%r11, %rax
    00000018: 	jge	.Ltmp2428 # Offset: 24
    0000001e: 	movq	%rdx, %r10
    00000021: 	jmp	.Ltmp2429 # Offset: 33
    00000023: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2431:
    00000028: 	leaq	0x2(%rax,%rax), %rcx
    0000002d: 	movl	%esi, (%rdi,%r10,4)
    00000031: 	cmpq	%rcx, %r11
    00000034: 	jle	.Ltmp2430 # Offset: 52
.Ltmp2432:
    00000036: 	movq	%rax, %r10
    00000039: 	movq	%rcx, %rax
.Ltmp2429:
    0000003c: 	leaq	(,%rax,4), %rdx
    00000044: 	leaq	-0x4(%rdi,%rdx), %rcx
    00000049: 	addq	%rdi, %rdx
    0000004c: 	movl	(%rdx), %esi
    0000004e: 	cmpl	(%rcx), %esi
    00000050: 	jg	.Ltmp2431 # Offset: 80
    00000052: 	movl	(%rcx), %ecx
    00000054: 	leaq	-0x1(%rax), %rsi
    00000058: 	leaq	(%rdi,%rsi,4), %rdx
    0000005c: 	movl	%ecx, (%rdi,%r10,4)
    00000060: 	leaq	(%rax,%rax), %rcx
    00000064: 	movq	%rsi, %rax
    00000067: 	cmpq	%r11, %rcx
    0000006a: 	jl	.Ltmp2432 # Offset: 106
.Ltmp2430:
    0000006c: 	cmpq	%r11, %rcx
    0000006f: 	je	.Ltmp2433 # Offset: 111
.Ltmp2438:
    00000071: 	leaq	-0x1(%rax), %rsi
    00000075: 	movq	%rsi, %rcx
    00000078: 	shrq	$0x3f, %rcx
    0000007c: 	addq	%rsi, %rcx
    0000007f: 	sarq	%rcx
    00000082: 	cmpq	%r8, %rax
    00000085: 	jg	.Ltmp2434 # Offset: 133
    00000087: 	jmp	.Ltmp2435 # Offset: 135
    00000089: 	nopl	(%rax) # Size: 7
.Ltmp2437:
    00000090: 	movl	(%rsi), %eax
    00000092: 	movl	%eax, (%rdx)
    00000094: 	leaq	-0x1(%rcx), %rdx
    00000098: 	movq	%rdx, %rax
    0000009b: 	shrq	$0x3f, %rax
    0000009f: 	addq	%rdx, %rax
    000000a2: 	sarq	%rax
    000000a5: 	movq	%rax, %rdx
    000000a8: 	movq	%rcx, %rax
    000000ab: 	cmpq	%rcx, %r8
    000000ae: 	jge	.Ltmp2436 # Offset: 174
    000000b0: 	movq	%rdx, %rcx
.Ltmp2434:
    000000b3: 	leaq	(%rdi,%rcx,4), %rsi
    000000b7: 	leaq	(%rdi,%rax,4), %rdx
    000000bb: 	cmpl	%r9d, (%rsi)
    000000be: 	jl	.Ltmp2437 # Offset: 190
.Ltmp2435:
    000000c0: 	movl	%r9d, (%rdx)
    000000c3: 	retq # Offset: 195
    000000c4: 	nopl	(%rax) # Size: 4
.Ltmp2436:
    000000c8: 	movq	%rsi, %rdx
    000000cb: 	movl	%r9d, (%rdx)
    000000ce: 	retq # Offset: 206
    000000cf: 	nop # Size: 1
.Ltmp2428:
    000000d0: 	leaq	(%rsi,%rdx,4), %rdx
    000000d4: 	jne	.Ltmp2435 # Offset: 212
    000000d6: 	movq	%rax, %rcx
    000000d9: 	nopl	(%rax) # Size: 7
.Ltmp2433:
    000000e0: 	movl	-0x4(%rdi,%rcx,4), %eax
    000000e4: 	movl	%eax, (%rdx)
    000000e6: 	leaq	-0x1(%rcx), %rax
    000000ea: 	leaq	(%rdi,%rax,4), %rdx
    000000ee: 	jmp	.Ltmp2438 # Offset: 238
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIP12DeepSubClassIiES2_EEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inIP16TypeVirtualClassIiES2_EEvlT_lT0_" after disassembly {
  Number      : 152
  State       : disassembled
  Address     : 0x11b00
  Size        : 0x21f
  MaxSize     : 0x220
  Offset      : 0x11b00
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIP16TypeVirtualClassIiES2_EEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0151:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdx, %r15
    00000009: 	leaq	0x2(%rdx,%rdx), %rdx
    0000000e: 	movq	%rdi, %r8
    00000011: 	pushq	%r14
    00000013: 	pushq	%r13
    00000015: 	movq	%rsi, %r13
    00000018: 	pushq	%r12
    0000001a: 	pushq	%rbp
    0000001b: 	pushq	%rbx
    0000001c: 	subq	$0x28, %rsp
    00000020: 	cmpq	%rdi, %rdx
    00000023: 	jge	.Ltmp2439 # Offset: 35
    00000029: 	movq	%r15, %rbp
    0000002c: 	leaq	_ZN16TypeVirtualClassIiEcviEv(%rip), %r14
    00000033: 	jmp	.Ltmp2440 # Offset: 51
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp2444:
    00000038: 	movl	0x8(%r12), %eax
    0000003d: 	leaq	-0x1(%rdx), %rsi
    00000041: 	shlq	$0x4, %rbp
    00000045: 	movq	%rsi, %rbx
    00000048: 	movl	%eax, 0x8(%r13,%rbp)
    0000004d: 	shlq	$0x4, %rbx
    00000051: 	leaq	(%rdx,%rdx), %rax
    00000055: 	movq	%rsi, %rdx
    00000058: 	addq	%r13, %rbx
    0000005b: 	cmpq	%rax, %r8
    0000005e: 	jle	.Ltmp2441 # Offset: 94
.Ltmp2445:
    00000060: 	movq	%rdx, %rbp
    00000063: 	movq	%rax, %rdx
.Ltmp2440:
    00000066: 	movq	%rdx, %rbx
    00000069: 	shlq	$0x4, %rbx
    0000006d: 	leaq	-0x10(%r13,%rbx), %r12
    00000072: 	movq	(%r12), %rax
    00000076: 	movq	(%rax), %rax
    00000079: 	cmpq	%r14, %rax
    0000007c: 	jne	.Ltmp2442 # Offset: 124
    00000082: 	addq	%r13, %rbx
    00000085: 	movl	0x8(%r12), %esi
    0000008a: 	movq	(%rbx), %rax
    0000008d: 	movq	(%rax), %rax
    00000090: 	cmpq	%r14, %rax
    00000093: 	jne	.Ltmp2443 # Offset: 147
.Ltmp2453:
    00000099: 	movl	0x8(%rbx), %eax
.Ltmp2454:
    0000009c: 	cmpl	%eax, %esi
    0000009e: 	jge	.Ltmp2444 # Offset: 158
    000000a0: 	movl	0x8(%rbx), %eax
    000000a3: 	shlq	$0x4, %rbp
    000000a7: 	movl	%eax, 0x8(%r13,%rbp)
    000000ac: 	leaq	0x2(%rdx,%rdx), %rax
    000000b1: 	cmpq	%rax, %r8
    000000b4: 	jg	.Ltmp2445 # Offset: 180
.Ltmp2441:
    000000b6: 	cmpq	%rax, %r8
    000000b9: 	je	.Ltmp2446 # Offset: 185
.Ltmp2455:
    000000bf: 	leaq	-0x1(%rdx), %rax
    000000c3: 	movq	%rax, %r12
    000000c6: 	shrq	$0x3f, %r12
    000000ca: 	addq	%rax, %r12
    000000cd: 	sarq	%r12
    000000d0: 	cmpq	%r15, %rdx
    000000d3: 	jle	.Ltmp2447 # Offset: 211
    000000d9: 	leaq	_ZN16TypeVirtualClassIiEcviEv(%rip), %r14
    000000e0: 	jmp	.Ltmp2448 # Offset: 224
    000000e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2451:
    000000e8: 	movl	0x8(%rbp), %eax
.Ltmp2452:
    000000eb: 	movq	%rdx, %rbx
    000000ee: 	movl	0x8(%rcx), %esi
    000000f1: 	shlq	$0x4, %rbx
    000000f5: 	addq	%r13, %rbx
    000000f8: 	cmpl	%esi, %eax
    000000fa: 	jge	.Ltmp2449 # Offset: 250
    00000100: 	movl	0x8(%rbp), %eax
    00000103: 	leaq	-0x1(%r12), %rdx
    00000108: 	movl	%eax, 0x8(%rbx)
    0000010b: 	movq	%rdx, %rax
    0000010e: 	shrq	$0x3f, %rax
    00000112: 	addq	%rdx, %rax
    00000115: 	movq	%r12, %rdx
    00000118: 	sarq	%rax
    0000011b: 	cmpq	%r12, %r15
    0000011e: 	jge	.Ltmp2450 # Offset: 286
    00000124: 	movq	%rax, %r12
.Ltmp2448:
    00000127: 	movq	%r12, %rbp
    0000012a: 	shlq	$0x4, %rbp
    0000012e: 	addq	%r13, %rbp
    00000131: 	movq	(%rbp), %rax
    00000135: 	movq	(%rax), %rax
    00000138: 	cmpq	%r14, %rax
    0000013b: 	je	.Ltmp2451 # Offset: 315
    0000013d: 	movq	%rcx, 0x8(%rsp)
    00000142: 	movq	%rbp, %rdi
    00000145: 	movq	%rdx, (%rsp)
    00000149: 	callq	*%rax # Offset: 329
    0000014b: 	movq	0x8(%rsp), %rcx
    00000150: 	movq	(%rsp), %rdx
    00000154: 	jmp	.Ltmp2452 # Offset: 340
    00000156: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2442:
    00000160: 	movq	%rcx, 0x10(%rsp)
    00000165: 	movq	%r12, %rdi
    00000168: 	addq	%r13, %rbx
    0000016b: 	movq	%r8, 0x8(%rsp)
    00000170: 	movq	%rdx, (%rsp)
    00000174: 	callq	*%rax # Offset: 372
    00000176: 	movq	0x10(%rsp), %rcx
    0000017b: 	movq	0x8(%rsp), %r8
    00000180: 	movl	%eax, %esi
    00000182: 	movq	(%rbx), %rax
    00000185: 	movq	(%rsp), %rdx
    00000189: 	movq	(%rax), %rax
    0000018c: 	cmpq	%r14, %rax
    0000018f: 	je	.Ltmp2453 # Offset: 399
.Ltmp2443:
    00000195: 	movq	%rcx, 0x18(%rsp)
    0000019a: 	movq	%rbx, %rdi
    0000019d: 	movq	%r8, 0x10(%rsp)
    000001a2: 	movq	%rdx, 0x8(%rsp)
    000001a7: 	movl	%esi, (%rsp)
    000001aa: 	callq	*%rax # Offset: 426
    000001ac: 	movq	0x18(%rsp), %rcx
    000001b1: 	movq	0x10(%rsp), %r8
    000001b6: 	movq	0x8(%rsp), %rdx
    000001bb: 	movl	(%rsp), %esi
    000001be: 	jmp	.Ltmp2454 # Offset: 446
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2450:
    000001c8: 	movl	0x8(%rcx), %esi
    000001cb: 	movq	%rbp, %rbx
.Ltmp2449:
    000001ce: 	movl	%esi, 0x8(%rbx)
    000001d1: 	addq	$0x28, %rsp
    000001d5: 	popq	%rbx
    000001d6: 	popq	%rbp
    000001d7: 	popq	%r12
    000001d9: 	popq	%r13
    000001db: 	popq	%r14
    000001dd: 	popq	%r15
    000001df: 	retq # Offset: 479
.Ltmp2439:
    000001e0: 	movq	%r15, %rbx
    000001e3: 	shlq	$0x4, %rbx
    000001e7: 	addq	%rsi, %rbx
    000001ea: 	cmpq	%rdi, %rdx
    000001ed: 	jne	.Ltmp2447 # Offset: 493
    000001ef: 	movq	%rdx, %rax
    000001f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2446:
    000001f8: 	movq	%rax, %rdx
    000001fb: 	shlq	$0x4, %rdx
    000001ff: 	movl	-0x8(%r13,%rdx), %edx
    00000204: 	movl	%edx, 0x8(%rbx)
    00000207: 	leaq	-0x1(%rax), %rdx
    0000020b: 	movq	%rdx, %rbx
    0000020e: 	shlq	$0x4, %rbx
    00000212: 	addq	%r13, %rbx
    00000215: 	jmp	.Ltmp2455 # Offset: 533
.Ltmp2447:
    0000021a: 	movl	0x8(%rcx), %esi
    0000021d: 	jmp	.Ltmp2449 # Offset: 541
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIP16TypeVirtualClassIiES2_EEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inIP19TypeVirtualSubClassIiES2_EEvlT_lT0_" after disassembly {
  Number      : 153
  State       : disassembled
  Address     : 0x11d20
  Size        : 0x21f
  MaxSize     : 0x220
  Offset      : 0x11d20
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIP19TypeVirtualSubClassIiES2_EEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0152:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdx, %r15
    00000009: 	leaq	0x2(%rdx,%rdx), %rdx
    0000000e: 	movq	%rdi, %r8
    00000011: 	pushq	%r14
    00000013: 	pushq	%r13
    00000015: 	movq	%rsi, %r13
    00000018: 	pushq	%r12
    0000001a: 	pushq	%rbp
    0000001b: 	pushq	%rbx
    0000001c: 	subq	$0x28, %rsp
    00000020: 	cmpq	%rdi, %rdx
    00000023: 	jge	.Ltmp2456 # Offset: 35
    00000029: 	movq	%r15, %rbp
    0000002c: 	leaq	_ZN19TypeVirtualSubClassIiEcviEv(%rip), %r14
    00000033: 	jmp	.Ltmp2457 # Offset: 51
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp2461:
    00000038: 	movl	0x8(%r12), %eax
    0000003d: 	leaq	-0x1(%rdx), %rsi
    00000041: 	shlq	$0x4, %rbp
    00000045: 	movq	%rsi, %rbx
    00000048: 	movl	%eax, 0x8(%r13,%rbp)
    0000004d: 	shlq	$0x4, %rbx
    00000051: 	leaq	(%rdx,%rdx), %rax
    00000055: 	movq	%rsi, %rdx
    00000058: 	addq	%r13, %rbx
    0000005b: 	cmpq	%rax, %r8
    0000005e: 	jle	.Ltmp2458 # Offset: 94
.Ltmp2462:
    00000060: 	movq	%rdx, %rbp
    00000063: 	movq	%rax, %rdx
.Ltmp2457:
    00000066: 	movq	%rdx, %rbx
    00000069: 	shlq	$0x4, %rbx
    0000006d: 	leaq	-0x10(%r13,%rbx), %r12
    00000072: 	movq	(%r12), %rax
    00000076: 	movq	(%rax), %rax
    00000079: 	cmpq	%r14, %rax
    0000007c: 	jne	.Ltmp2459 # Offset: 124
    00000082: 	addq	%r13, %rbx
    00000085: 	movl	0x8(%r12), %esi
    0000008a: 	movq	(%rbx), %rax
    0000008d: 	movq	(%rax), %rax
    00000090: 	cmpq	%r14, %rax
    00000093: 	jne	.Ltmp2460 # Offset: 147
.Ltmp2470:
    00000099: 	movl	0x8(%rbx), %eax
.Ltmp2471:
    0000009c: 	cmpl	%eax, %esi
    0000009e: 	jge	.Ltmp2461 # Offset: 158
    000000a0: 	movl	0x8(%rbx), %eax
    000000a3: 	shlq	$0x4, %rbp
    000000a7: 	movl	%eax, 0x8(%r13,%rbp)
    000000ac: 	leaq	0x2(%rdx,%rdx), %rax
    000000b1: 	cmpq	%rax, %r8
    000000b4: 	jg	.Ltmp2462 # Offset: 180
.Ltmp2458:
    000000b6: 	cmpq	%rax, %r8
    000000b9: 	je	.Ltmp2463 # Offset: 185
.Ltmp2472:
    000000bf: 	leaq	-0x1(%rdx), %rax
    000000c3: 	movq	%rax, %r12
    000000c6: 	shrq	$0x3f, %r12
    000000ca: 	addq	%rax, %r12
    000000cd: 	sarq	%r12
    000000d0: 	cmpq	%r15, %rdx
    000000d3: 	jle	.Ltmp2464 # Offset: 211
    000000d9: 	leaq	_ZN19TypeVirtualSubClassIiEcviEv(%rip), %r14
    000000e0: 	jmp	.Ltmp2465 # Offset: 224
    000000e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2468:
    000000e8: 	movl	0x8(%rbp), %eax
.Ltmp2469:
    000000eb: 	movq	%rdx, %rbx
    000000ee: 	movl	0x8(%rcx), %esi
    000000f1: 	shlq	$0x4, %rbx
    000000f5: 	addq	%r13, %rbx
    000000f8: 	cmpl	%esi, %eax
    000000fa: 	jge	.Ltmp2466 # Offset: 250
    00000100: 	movl	0x8(%rbp), %eax
    00000103: 	leaq	-0x1(%r12), %rdx
    00000108: 	movl	%eax, 0x8(%rbx)
    0000010b: 	movq	%rdx, %rax
    0000010e: 	shrq	$0x3f, %rax
    00000112: 	addq	%rdx, %rax
    00000115: 	movq	%r12, %rdx
    00000118: 	sarq	%rax
    0000011b: 	cmpq	%r12, %r15
    0000011e: 	jge	.Ltmp2467 # Offset: 286
    00000124: 	movq	%rax, %r12
.Ltmp2465:
    00000127: 	movq	%r12, %rbp
    0000012a: 	shlq	$0x4, %rbp
    0000012e: 	addq	%r13, %rbp
    00000131: 	movq	(%rbp), %rax
    00000135: 	movq	(%rax), %rax
    00000138: 	cmpq	%r14, %rax
    0000013b: 	je	.Ltmp2468 # Offset: 315
    0000013d: 	movq	%rcx, 0x8(%rsp)
    00000142: 	movq	%rbp, %rdi
    00000145: 	movq	%rdx, (%rsp)
    00000149: 	callq	*%rax # Offset: 329
    0000014b: 	movq	0x8(%rsp), %rcx
    00000150: 	movq	(%rsp), %rdx
    00000154: 	jmp	.Ltmp2469 # Offset: 340
    00000156: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2459:
    00000160: 	movq	%rcx, 0x10(%rsp)
    00000165: 	movq	%r12, %rdi
    00000168: 	addq	%r13, %rbx
    0000016b: 	movq	%r8, 0x8(%rsp)
    00000170: 	movq	%rdx, (%rsp)
    00000174: 	callq	*%rax # Offset: 372
    00000176: 	movq	0x10(%rsp), %rcx
    0000017b: 	movq	0x8(%rsp), %r8
    00000180: 	movl	%eax, %esi
    00000182: 	movq	(%rbx), %rax
    00000185: 	movq	(%rsp), %rdx
    00000189: 	movq	(%rax), %rax
    0000018c: 	cmpq	%r14, %rax
    0000018f: 	je	.Ltmp2470 # Offset: 399
.Ltmp2460:
    00000195: 	movq	%rcx, 0x18(%rsp)
    0000019a: 	movq	%rbx, %rdi
    0000019d: 	movq	%r8, 0x10(%rsp)
    000001a2: 	movq	%rdx, 0x8(%rsp)
    000001a7: 	movl	%esi, (%rsp)
    000001aa: 	callq	*%rax # Offset: 426
    000001ac: 	movq	0x18(%rsp), %rcx
    000001b1: 	movq	0x10(%rsp), %r8
    000001b6: 	movq	0x8(%rsp), %rdx
    000001bb: 	movl	(%rsp), %esi
    000001be: 	jmp	.Ltmp2471 # Offset: 446
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2467:
    000001c8: 	movl	0x8(%rcx), %esi
    000001cb: 	movq	%rbp, %rbx
.Ltmp2466:
    000001ce: 	movl	%esi, 0x8(%rbx)
    000001d1: 	addq	$0x28, %rsp
    000001d5: 	popq	%rbx
    000001d6: 	popq	%rbp
    000001d7: 	popq	%r12
    000001d9: 	popq	%r13
    000001db: 	popq	%r14
    000001dd: 	popq	%r15
    000001df: 	retq # Offset: 479
.Ltmp2456:
    000001e0: 	movq	%r15, %rbx
    000001e3: 	shlq	$0x4, %rbx
    000001e7: 	addq	%rsi, %rbx
    000001ea: 	cmpq	%rdi, %rdx
    000001ed: 	jne	.Ltmp2464 # Offset: 493
    000001ef: 	movq	%rdx, %rax
    000001f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2463:
    000001f8: 	movq	%rax, %rdx
    000001fb: 	shlq	$0x4, %rdx
    000001ff: 	movl	-0x8(%r13,%rdx), %edx
    00000204: 	movl	%edx, 0x8(%rbx)
    00000207: 	leaq	-0x1(%rax), %rdx
    0000020b: 	movq	%rdx, %rbx
    0000020e: 	shlq	$0x4, %rbx
    00000212: 	addq	%r13, %rbx
    00000215: 	jmp	.Ltmp2472 # Offset: 533
.Ltmp2464:
    0000021a: 	movl	0x8(%rcx), %esi
    0000021d: 	jmp	.Ltmp2466 # Offset: 541
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIP19TypeVirtualSubClassIiES2_EEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inIP14WorkerSubClassIiES2_EEvlT_lT0_" after disassembly {
  Number      : 154
  State       : disassembled
  Address     : 0x11f40
  Size        : 0x21f
  MaxSize     : 0x220
  Offset      : 0x11f40
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIP14WorkerSubClassIiES2_EEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0153:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdx, %r15
    00000009: 	leaq	0x2(%rdx,%rdx), %rdx
    0000000e: 	movq	%rdi, %r8
    00000011: 	pushq	%r14
    00000013: 	pushq	%r13
    00000015: 	movq	%rsi, %r13
    00000018: 	pushq	%r12
    0000001a: 	pushq	%rbp
    0000001b: 	pushq	%rbx
    0000001c: 	subq	$0x28, %rsp
    00000020: 	cmpq	%rdi, %rdx
    00000023: 	jge	.Ltmp2473 # Offset: 35
    00000029: 	movq	%r15, %rbp
    0000002c: 	leaq	_ZN14WorkerSubClassIiEcviEv(%rip), %r14
    00000033: 	jmp	.Ltmp2474 # Offset: 51
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp2478:
    00000038: 	movl	0x8(%r12), %eax
    0000003d: 	leaq	-0x1(%rdx), %rsi
    00000041: 	shlq	$0x4, %rbp
    00000045: 	movq	%rsi, %rbx
    00000048: 	movl	%eax, 0x8(%r13,%rbp)
    0000004d: 	shlq	$0x4, %rbx
    00000051: 	leaq	(%rdx,%rdx), %rax
    00000055: 	movq	%rsi, %rdx
    00000058: 	addq	%r13, %rbx
    0000005b: 	cmpq	%rax, %r8
    0000005e: 	jle	.Ltmp2475 # Offset: 94
.Ltmp2479:
    00000060: 	movq	%rdx, %rbp
    00000063: 	movq	%rax, %rdx
.Ltmp2474:
    00000066: 	movq	%rdx, %rbx
    00000069: 	shlq	$0x4, %rbx
    0000006d: 	leaq	-0x10(%r13,%rbx), %r12
    00000072: 	movq	(%r12), %rax
    00000076: 	movq	(%rax), %rax
    00000079: 	cmpq	%r14, %rax
    0000007c: 	jne	.Ltmp2476 # Offset: 124
    00000082: 	addq	%r13, %rbx
    00000085: 	movl	0x8(%r12), %esi
    0000008a: 	movq	(%rbx), %rax
    0000008d: 	movq	(%rax), %rax
    00000090: 	cmpq	%r14, %rax
    00000093: 	jne	.Ltmp2477 # Offset: 147
.Ltmp2487:
    00000099: 	movl	0x8(%rbx), %eax
.Ltmp2488:
    0000009c: 	cmpl	%eax, %esi
    0000009e: 	jge	.Ltmp2478 # Offset: 158
    000000a0: 	movl	0x8(%rbx), %eax
    000000a3: 	shlq	$0x4, %rbp
    000000a7: 	movl	%eax, 0x8(%r13,%rbp)
    000000ac: 	leaq	0x2(%rdx,%rdx), %rax
    000000b1: 	cmpq	%rax, %r8
    000000b4: 	jg	.Ltmp2479 # Offset: 180
.Ltmp2475:
    000000b6: 	cmpq	%rax, %r8
    000000b9: 	je	.Ltmp2480 # Offset: 185
.Ltmp2489:
    000000bf: 	leaq	-0x1(%rdx), %rax
    000000c3: 	movq	%rax, %r12
    000000c6: 	shrq	$0x3f, %r12
    000000ca: 	addq	%rax, %r12
    000000cd: 	sarq	%r12
    000000d0: 	cmpq	%r15, %rdx
    000000d3: 	jle	.Ltmp2481 # Offset: 211
    000000d9: 	leaq	_ZN14WorkerSubClassIiEcviEv(%rip), %r14
    000000e0: 	jmp	.Ltmp2482 # Offset: 224
    000000e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2485:
    000000e8: 	movl	0x8(%rbp), %eax
.Ltmp2486:
    000000eb: 	movq	%rdx, %rbx
    000000ee: 	movl	0x8(%rcx), %esi
    000000f1: 	shlq	$0x4, %rbx
    000000f5: 	addq	%r13, %rbx
    000000f8: 	cmpl	%esi, %eax
    000000fa: 	jge	.Ltmp2483 # Offset: 250
    00000100: 	movl	0x8(%rbp), %eax
    00000103: 	leaq	-0x1(%r12), %rdx
    00000108: 	movl	%eax, 0x8(%rbx)
    0000010b: 	movq	%rdx, %rax
    0000010e: 	shrq	$0x3f, %rax
    00000112: 	addq	%rdx, %rax
    00000115: 	movq	%r12, %rdx
    00000118: 	sarq	%rax
    0000011b: 	cmpq	%r12, %r15
    0000011e: 	jge	.Ltmp2484 # Offset: 286
    00000124: 	movq	%rax, %r12
.Ltmp2482:
    00000127: 	movq	%r12, %rbp
    0000012a: 	shlq	$0x4, %rbp
    0000012e: 	addq	%r13, %rbp
    00000131: 	movq	(%rbp), %rax
    00000135: 	movq	(%rax), %rax
    00000138: 	cmpq	%r14, %rax
    0000013b: 	je	.Ltmp2485 # Offset: 315
    0000013d: 	movq	%rcx, 0x8(%rsp)
    00000142: 	movq	%rbp, %rdi
    00000145: 	movq	%rdx, (%rsp)
    00000149: 	callq	*%rax # Offset: 329
    0000014b: 	movq	0x8(%rsp), %rcx
    00000150: 	movq	(%rsp), %rdx
    00000154: 	jmp	.Ltmp2486 # Offset: 340
    00000156: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2476:
    00000160: 	movq	%rcx, 0x10(%rsp)
    00000165: 	movq	%r12, %rdi
    00000168: 	addq	%r13, %rbx
    0000016b: 	movq	%r8, 0x8(%rsp)
    00000170: 	movq	%rdx, (%rsp)
    00000174: 	callq	*%rax # Offset: 372
    00000176: 	movq	0x10(%rsp), %rcx
    0000017b: 	movq	0x8(%rsp), %r8
    00000180: 	movl	%eax, %esi
    00000182: 	movq	(%rbx), %rax
    00000185: 	movq	(%rsp), %rdx
    00000189: 	movq	(%rax), %rax
    0000018c: 	cmpq	%r14, %rax
    0000018f: 	je	.Ltmp2487 # Offset: 399
.Ltmp2477:
    00000195: 	movq	%rcx, 0x18(%rsp)
    0000019a: 	movq	%rbx, %rdi
    0000019d: 	movq	%r8, 0x10(%rsp)
    000001a2: 	movq	%rdx, 0x8(%rsp)
    000001a7: 	movl	%esi, (%rsp)
    000001aa: 	callq	*%rax # Offset: 426
    000001ac: 	movq	0x18(%rsp), %rcx
    000001b1: 	movq	0x10(%rsp), %r8
    000001b6: 	movq	0x8(%rsp), %rdx
    000001bb: 	movl	(%rsp), %esi
    000001be: 	jmp	.Ltmp2488 # Offset: 446
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2484:
    000001c8: 	movl	0x8(%rcx), %esi
    000001cb: 	movq	%rbp, %rbx
.Ltmp2483:
    000001ce: 	movl	%esi, 0x8(%rbx)
    000001d1: 	addq	$0x28, %rsp
    000001d5: 	popq	%rbx
    000001d6: 	popq	%rbp
    000001d7: 	popq	%r12
    000001d9: 	popq	%r13
    000001db: 	popq	%r14
    000001dd: 	popq	%r15
    000001df: 	retq # Offset: 479
.Ltmp2473:
    000001e0: 	movq	%r15, %rbx
    000001e3: 	shlq	$0x4, %rbx
    000001e7: 	addq	%rsi, %rbx
    000001ea: 	cmpq	%rdi, %rdx
    000001ed: 	jne	.Ltmp2481 # Offset: 493
    000001ef: 	movq	%rdx, %rax
    000001f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2480:
    000001f8: 	movq	%rax, %rdx
    000001fb: 	shlq	$0x4, %rdx
    000001ff: 	movl	-0x8(%r13,%rdx), %edx
    00000204: 	movl	%edx, 0x8(%rbx)
    00000207: 	leaq	-0x1(%rax), %rdx
    0000020b: 	movq	%rdx, %rbx
    0000020e: 	shlq	$0x4, %rbx
    00000212: 	addq	%r13, %rbx
    00000215: 	jmp	.Ltmp2489 # Offset: 533
.Ltmp2481:
    0000021a: 	movl	0x8(%rcx), %esi
    0000021d: 	jmp	.Ltmp2483 # Offset: 541
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIP14WorkerSubClassIiES2_EEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inIP18WorkerDeepSubClassIiES2_EEvlT_lT0_" after disassembly {
  Number      : 155
  State       : disassembled
  Address     : 0x12160
  Size        : 0x21f
  MaxSize     : 0x220
  Offset      : 0x12160
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIP18WorkerDeepSubClassIiES2_EEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0154:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdx, %r15
    00000009: 	leaq	0x2(%rdx,%rdx), %rdx
    0000000e: 	movq	%rdi, %r8
    00000011: 	pushq	%r14
    00000013: 	pushq	%r13
    00000015: 	movq	%rsi, %r13
    00000018: 	pushq	%r12
    0000001a: 	pushq	%rbp
    0000001b: 	pushq	%rbx
    0000001c: 	subq	$0x28, %rsp
    00000020: 	cmpq	%rdi, %rdx
    00000023: 	jge	.Ltmp2490 # Offset: 35
    00000029: 	movq	%r15, %rbp
    0000002c: 	leaq	_ZN18WorkerDeepSubClassIiEcviEv(%rip), %r14
    00000033: 	jmp	.Ltmp2491 # Offset: 51
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp2495:
    00000038: 	movl	0x8(%r12), %eax
    0000003d: 	leaq	-0x1(%rdx), %rsi
    00000041: 	shlq	$0x4, %rbp
    00000045: 	movq	%rsi, %rbx
    00000048: 	movl	%eax, 0x8(%r13,%rbp)
    0000004d: 	shlq	$0x4, %rbx
    00000051: 	leaq	(%rdx,%rdx), %rax
    00000055: 	movq	%rsi, %rdx
    00000058: 	addq	%r13, %rbx
    0000005b: 	cmpq	%rax, %r8
    0000005e: 	jle	.Ltmp2492 # Offset: 94
.Ltmp2496:
    00000060: 	movq	%rdx, %rbp
    00000063: 	movq	%rax, %rdx
.Ltmp2491:
    00000066: 	movq	%rdx, %rbx
    00000069: 	shlq	$0x4, %rbx
    0000006d: 	leaq	-0x10(%r13,%rbx), %r12
    00000072: 	movq	(%r12), %rax
    00000076: 	movq	(%rax), %rax
    00000079: 	cmpq	%r14, %rax
    0000007c: 	jne	.Ltmp2493 # Offset: 124
    00000082: 	addq	%r13, %rbx
    00000085: 	movl	0x8(%r12), %esi
    0000008a: 	movq	(%rbx), %rax
    0000008d: 	movq	(%rax), %rax
    00000090: 	cmpq	%r14, %rax
    00000093: 	jne	.Ltmp2494 # Offset: 147
.Ltmp2504:
    00000099: 	movl	0x8(%rbx), %eax
.Ltmp2505:
    0000009c: 	cmpl	%eax, %esi
    0000009e: 	jge	.Ltmp2495 # Offset: 158
    000000a0: 	movl	0x8(%rbx), %eax
    000000a3: 	shlq	$0x4, %rbp
    000000a7: 	movl	%eax, 0x8(%r13,%rbp)
    000000ac: 	leaq	0x2(%rdx,%rdx), %rax
    000000b1: 	cmpq	%rax, %r8
    000000b4: 	jg	.Ltmp2496 # Offset: 180
.Ltmp2492:
    000000b6: 	cmpq	%rax, %r8
    000000b9: 	je	.Ltmp2497 # Offset: 185
.Ltmp2506:
    000000bf: 	leaq	-0x1(%rdx), %rax
    000000c3: 	movq	%rax, %r12
    000000c6: 	shrq	$0x3f, %r12
    000000ca: 	addq	%rax, %r12
    000000cd: 	sarq	%r12
    000000d0: 	cmpq	%r15, %rdx
    000000d3: 	jle	.Ltmp2498 # Offset: 211
    000000d9: 	leaq	_ZN18WorkerDeepSubClassIiEcviEv(%rip), %r14
    000000e0: 	jmp	.Ltmp2499 # Offset: 224
    000000e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2502:
    000000e8: 	movl	0x8(%rbp), %eax
.Ltmp2503:
    000000eb: 	movq	%rdx, %rbx
    000000ee: 	movl	0x8(%rcx), %esi
    000000f1: 	shlq	$0x4, %rbx
    000000f5: 	addq	%r13, %rbx
    000000f8: 	cmpl	%esi, %eax
    000000fa: 	jge	.Ltmp2500 # Offset: 250
    00000100: 	movl	0x8(%rbp), %eax
    00000103: 	leaq	-0x1(%r12), %rdx
    00000108: 	movl	%eax, 0x8(%rbx)
    0000010b: 	movq	%rdx, %rax
    0000010e: 	shrq	$0x3f, %rax
    00000112: 	addq	%rdx, %rax
    00000115: 	movq	%r12, %rdx
    00000118: 	sarq	%rax
    0000011b: 	cmpq	%r12, %r15
    0000011e: 	jge	.Ltmp2501 # Offset: 286
    00000124: 	movq	%rax, %r12
.Ltmp2499:
    00000127: 	movq	%r12, %rbp
    0000012a: 	shlq	$0x4, %rbp
    0000012e: 	addq	%r13, %rbp
    00000131: 	movq	(%rbp), %rax
    00000135: 	movq	(%rax), %rax
    00000138: 	cmpq	%r14, %rax
    0000013b: 	je	.Ltmp2502 # Offset: 315
    0000013d: 	movq	%rcx, 0x8(%rsp)
    00000142: 	movq	%rbp, %rdi
    00000145: 	movq	%rdx, (%rsp)
    00000149: 	callq	*%rax # Offset: 329
    0000014b: 	movq	0x8(%rsp), %rcx
    00000150: 	movq	(%rsp), %rdx
    00000154: 	jmp	.Ltmp2503 # Offset: 340
    00000156: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2493:
    00000160: 	movq	%rcx, 0x10(%rsp)
    00000165: 	movq	%r12, %rdi
    00000168: 	addq	%r13, %rbx
    0000016b: 	movq	%r8, 0x8(%rsp)
    00000170: 	movq	%rdx, (%rsp)
    00000174: 	callq	*%rax # Offset: 372
    00000176: 	movq	0x10(%rsp), %rcx
    0000017b: 	movq	0x8(%rsp), %r8
    00000180: 	movl	%eax, %esi
    00000182: 	movq	(%rbx), %rax
    00000185: 	movq	(%rsp), %rdx
    00000189: 	movq	(%rax), %rax
    0000018c: 	cmpq	%r14, %rax
    0000018f: 	je	.Ltmp2504 # Offset: 399
.Ltmp2494:
    00000195: 	movq	%rcx, 0x18(%rsp)
    0000019a: 	movq	%rbx, %rdi
    0000019d: 	movq	%r8, 0x10(%rsp)
    000001a2: 	movq	%rdx, 0x8(%rsp)
    000001a7: 	movl	%esi, (%rsp)
    000001aa: 	callq	*%rax # Offset: 426
    000001ac: 	movq	0x18(%rsp), %rcx
    000001b1: 	movq	0x10(%rsp), %r8
    000001b6: 	movq	0x8(%rsp), %rdx
    000001bb: 	movl	(%rsp), %esi
    000001be: 	jmp	.Ltmp2505 # Offset: 446
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2501:
    000001c8: 	movl	0x8(%rcx), %esi
    000001cb: 	movq	%rbp, %rbx
.Ltmp2500:
    000001ce: 	movl	%esi, 0x8(%rbx)
    000001d1: 	addq	$0x28, %rsp
    000001d5: 	popq	%rbx
    000001d6: 	popq	%rbp
    000001d7: 	popq	%r12
    000001d9: 	popq	%r13
    000001db: 	popq	%r14
    000001dd: 	popq	%r15
    000001df: 	retq # Offset: 479
.Ltmp2490:
    000001e0: 	movq	%r15, %rbx
    000001e3: 	shlq	$0x4, %rbx
    000001e7: 	addq	%rsi, %rbx
    000001ea: 	cmpq	%rdi, %rdx
    000001ed: 	jne	.Ltmp2498 # Offset: 493
    000001ef: 	movq	%rdx, %rax
    000001f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2497:
    000001f8: 	movq	%rax, %rdx
    000001fb: 	shlq	$0x4, %rdx
    000001ff: 	movl	-0x8(%r13,%rdx), %edx
    00000204: 	movl	%edx, 0x8(%rbx)
    00000207: 	leaq	-0x1(%rax), %rdx
    0000020b: 	movq	%rdx, %rbx
    0000020e: 	shlq	$0x4, %rbx
    00000212: 	addq	%r13, %rbx
    00000215: 	jmp	.Ltmp2506 # Offset: 533
.Ltmp2498:
    0000021a: 	movl	0x8(%rcx), %esi
    0000021d: 	jmp	.Ltmp2500 # Offset: 541
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIP18WorkerDeepSubClassIiES2_EEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inIP15WorkerSubClass2IiES2_EEvlT_lT0_" after disassembly {
  Number      : 156
  State       : disassembled
  Address     : 0x12380
  Size        : 0x21f
  MaxSize     : 0x220
  Offset      : 0x12380
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIP15WorkerSubClass2IiES2_EEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0155:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdx, %r15
    00000009: 	leaq	0x2(%rdx,%rdx), %rdx
    0000000e: 	movq	%rdi, %r8
    00000011: 	pushq	%r14
    00000013: 	pushq	%r13
    00000015: 	movq	%rsi, %r13
    00000018: 	pushq	%r12
    0000001a: 	pushq	%rbp
    0000001b: 	pushq	%rbx
    0000001c: 	subq	$0x28, %rsp
    00000020: 	cmpq	%rdi, %rdx
    00000023: 	jge	.Ltmp2507 # Offset: 35
    00000029: 	movq	%r15, %rbp
    0000002c: 	leaq	_ZN15WorkerSubClass2IiEcviEv(%rip), %r14
    00000033: 	jmp	.Ltmp2508 # Offset: 51
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp2512:
    00000038: 	movl	0x8(%r12), %eax
    0000003d: 	leaq	-0x1(%rdx), %rsi
    00000041: 	shlq	$0x4, %rbp
    00000045: 	movq	%rsi, %rbx
    00000048: 	movl	%eax, 0x8(%r13,%rbp)
    0000004d: 	shlq	$0x4, %rbx
    00000051: 	leaq	(%rdx,%rdx), %rax
    00000055: 	movq	%rsi, %rdx
    00000058: 	addq	%r13, %rbx
    0000005b: 	cmpq	%rax, %r8
    0000005e: 	jle	.Ltmp2509 # Offset: 94
.Ltmp2513:
    00000060: 	movq	%rdx, %rbp
    00000063: 	movq	%rax, %rdx
.Ltmp2508:
    00000066: 	movq	%rdx, %rbx
    00000069: 	shlq	$0x4, %rbx
    0000006d: 	leaq	-0x10(%r13,%rbx), %r12
    00000072: 	movq	(%r12), %rax
    00000076: 	movq	(%rax), %rax
    00000079: 	cmpq	%r14, %rax
    0000007c: 	jne	.Ltmp2510 # Offset: 124
    00000082: 	addq	%r13, %rbx
    00000085: 	movl	0x8(%r12), %esi
    0000008a: 	movq	(%rbx), %rax
    0000008d: 	movq	(%rax), %rax
    00000090: 	cmpq	%r14, %rax
    00000093: 	jne	.Ltmp2511 # Offset: 147
.Ltmp2521:
    00000099: 	movl	0x8(%rbx), %eax
.Ltmp2522:
    0000009c: 	cmpl	%eax, %esi
    0000009e: 	jge	.Ltmp2512 # Offset: 158
    000000a0: 	movl	0x8(%rbx), %eax
    000000a3: 	shlq	$0x4, %rbp
    000000a7: 	movl	%eax, 0x8(%r13,%rbp)
    000000ac: 	leaq	0x2(%rdx,%rdx), %rax
    000000b1: 	cmpq	%rax, %r8
    000000b4: 	jg	.Ltmp2513 # Offset: 180
.Ltmp2509:
    000000b6: 	cmpq	%rax, %r8
    000000b9: 	je	.Ltmp2514 # Offset: 185
.Ltmp2523:
    000000bf: 	leaq	-0x1(%rdx), %rax
    000000c3: 	movq	%rax, %r12
    000000c6: 	shrq	$0x3f, %r12
    000000ca: 	addq	%rax, %r12
    000000cd: 	sarq	%r12
    000000d0: 	cmpq	%r15, %rdx
    000000d3: 	jle	.Ltmp2515 # Offset: 211
    000000d9: 	leaq	_ZN15WorkerSubClass2IiEcviEv(%rip), %r14
    000000e0: 	jmp	.Ltmp2516 # Offset: 224
    000000e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2519:
    000000e8: 	movl	0x8(%rbp), %eax
.Ltmp2520:
    000000eb: 	movq	%rdx, %rbx
    000000ee: 	movl	0x8(%rcx), %esi
    000000f1: 	shlq	$0x4, %rbx
    000000f5: 	addq	%r13, %rbx
    000000f8: 	cmpl	%esi, %eax
    000000fa: 	jge	.Ltmp2517 # Offset: 250
    00000100: 	movl	0x8(%rbp), %eax
    00000103: 	leaq	-0x1(%r12), %rdx
    00000108: 	movl	%eax, 0x8(%rbx)
    0000010b: 	movq	%rdx, %rax
    0000010e: 	shrq	$0x3f, %rax
    00000112: 	addq	%rdx, %rax
    00000115: 	movq	%r12, %rdx
    00000118: 	sarq	%rax
    0000011b: 	cmpq	%r12, %r15
    0000011e: 	jge	.Ltmp2518 # Offset: 286
    00000124: 	movq	%rax, %r12
.Ltmp2516:
    00000127: 	movq	%r12, %rbp
    0000012a: 	shlq	$0x4, %rbp
    0000012e: 	addq	%r13, %rbp
    00000131: 	movq	(%rbp), %rax
    00000135: 	movq	(%rax), %rax
    00000138: 	cmpq	%r14, %rax
    0000013b: 	je	.Ltmp2519 # Offset: 315
    0000013d: 	movq	%rcx, 0x8(%rsp)
    00000142: 	movq	%rbp, %rdi
    00000145: 	movq	%rdx, (%rsp)
    00000149: 	callq	*%rax # Offset: 329
    0000014b: 	movq	0x8(%rsp), %rcx
    00000150: 	movq	(%rsp), %rdx
    00000154: 	jmp	.Ltmp2520 # Offset: 340
    00000156: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2510:
    00000160: 	movq	%rcx, 0x10(%rsp)
    00000165: 	movq	%r12, %rdi
    00000168: 	addq	%r13, %rbx
    0000016b: 	movq	%r8, 0x8(%rsp)
    00000170: 	movq	%rdx, (%rsp)
    00000174: 	callq	*%rax # Offset: 372
    00000176: 	movq	0x10(%rsp), %rcx
    0000017b: 	movq	0x8(%rsp), %r8
    00000180: 	movl	%eax, %esi
    00000182: 	movq	(%rbx), %rax
    00000185: 	movq	(%rsp), %rdx
    00000189: 	movq	(%rax), %rax
    0000018c: 	cmpq	%r14, %rax
    0000018f: 	je	.Ltmp2521 # Offset: 399
.Ltmp2511:
    00000195: 	movq	%rcx, 0x18(%rsp)
    0000019a: 	movq	%rbx, %rdi
    0000019d: 	movq	%r8, 0x10(%rsp)
    000001a2: 	movq	%rdx, 0x8(%rsp)
    000001a7: 	movl	%esi, (%rsp)
    000001aa: 	callq	*%rax # Offset: 426
    000001ac: 	movq	0x18(%rsp), %rcx
    000001b1: 	movq	0x10(%rsp), %r8
    000001b6: 	movq	0x8(%rsp), %rdx
    000001bb: 	movl	(%rsp), %esi
    000001be: 	jmp	.Ltmp2522 # Offset: 446
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2518:
    000001c8: 	movl	0x8(%rcx), %esi
    000001cb: 	movq	%rbp, %rbx
.Ltmp2517:
    000001ce: 	movl	%esi, 0x8(%rbx)
    000001d1: 	addq	$0x28, %rsp
    000001d5: 	popq	%rbx
    000001d6: 	popq	%rbp
    000001d7: 	popq	%r12
    000001d9: 	popq	%r13
    000001db: 	popq	%r14
    000001dd: 	popq	%r15
    000001df: 	retq # Offset: 479
.Ltmp2507:
    000001e0: 	movq	%r15, %rbx
    000001e3: 	shlq	$0x4, %rbx
    000001e7: 	addq	%rsi, %rbx
    000001ea: 	cmpq	%rdi, %rdx
    000001ed: 	jne	.Ltmp2515 # Offset: 493
    000001ef: 	movq	%rdx, %rax
    000001f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2514:
    000001f8: 	movq	%rax, %rdx
    000001fb: 	shlq	$0x4, %rdx
    000001ff: 	movl	-0x8(%r13,%rdx), %edx
    00000204: 	movl	%edx, 0x8(%rbx)
    00000207: 	leaq	-0x1(%rax), %rdx
    0000020b: 	movq	%rdx, %rbx
    0000020e: 	shlq	$0x4, %rbx
    00000212: 	addq	%r13, %rbx
    00000215: 	jmp	.Ltmp2523 # Offset: 533
.Ltmp2515:
    0000021a: 	movl	0x8(%rcx), %esi
    0000021d: 	jmp	.Ltmp2517 # Offset: 541
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIP15WorkerSubClass2IiES2_EEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inIP15WorkerSubClass3IiES2_EEvlT_lT0_" after disassembly {
  Number      : 157
  State       : disassembled
  Address     : 0x125a0
  Size        : 0x21f
  MaxSize     : 0x220
  Offset      : 0x125a0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIP15WorkerSubClass3IiES2_EEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0156:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdx, %r15
    00000009: 	leaq	0x2(%rdx,%rdx), %rdx
    0000000e: 	movq	%rdi, %r8
    00000011: 	pushq	%r14
    00000013: 	pushq	%r13
    00000015: 	movq	%rsi, %r13
    00000018: 	pushq	%r12
    0000001a: 	pushq	%rbp
    0000001b: 	pushq	%rbx
    0000001c: 	subq	$0x28, %rsp
    00000020: 	cmpq	%rdi, %rdx
    00000023: 	jge	.Ltmp2524 # Offset: 35
    00000029: 	movq	%r15, %rbp
    0000002c: 	leaq	_ZN15WorkerSubClass3IiEcviEv(%rip), %r14
    00000033: 	jmp	.Ltmp2525 # Offset: 51
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp2529:
    00000038: 	movl	0x8(%r12), %eax
    0000003d: 	leaq	-0x1(%rdx), %rsi
    00000041: 	shlq	$0x4, %rbp
    00000045: 	movq	%rsi, %rbx
    00000048: 	movl	%eax, 0x8(%r13,%rbp)
    0000004d: 	shlq	$0x4, %rbx
    00000051: 	leaq	(%rdx,%rdx), %rax
    00000055: 	movq	%rsi, %rdx
    00000058: 	addq	%r13, %rbx
    0000005b: 	cmpq	%rax, %r8
    0000005e: 	jle	.Ltmp2526 # Offset: 94
.Ltmp2530:
    00000060: 	movq	%rdx, %rbp
    00000063: 	movq	%rax, %rdx
.Ltmp2525:
    00000066: 	movq	%rdx, %rbx
    00000069: 	shlq	$0x4, %rbx
    0000006d: 	leaq	-0x10(%r13,%rbx), %r12
    00000072: 	movq	(%r12), %rax
    00000076: 	movq	(%rax), %rax
    00000079: 	cmpq	%r14, %rax
    0000007c: 	jne	.Ltmp2527 # Offset: 124
    00000082: 	addq	%r13, %rbx
    00000085: 	movl	0x8(%r12), %esi
    0000008a: 	movq	(%rbx), %rax
    0000008d: 	movq	(%rax), %rax
    00000090: 	cmpq	%r14, %rax
    00000093: 	jne	.Ltmp2528 # Offset: 147
.Ltmp2538:
    00000099: 	movl	0x8(%rbx), %eax
.Ltmp2539:
    0000009c: 	cmpl	%eax, %esi
    0000009e: 	jge	.Ltmp2529 # Offset: 158
    000000a0: 	movl	0x8(%rbx), %eax
    000000a3: 	shlq	$0x4, %rbp
    000000a7: 	movl	%eax, 0x8(%r13,%rbp)
    000000ac: 	leaq	0x2(%rdx,%rdx), %rax
    000000b1: 	cmpq	%rax, %r8
    000000b4: 	jg	.Ltmp2530 # Offset: 180
.Ltmp2526:
    000000b6: 	cmpq	%rax, %r8
    000000b9: 	je	.Ltmp2531 # Offset: 185
.Ltmp2540:
    000000bf: 	leaq	-0x1(%rdx), %rax
    000000c3: 	movq	%rax, %r12
    000000c6: 	shrq	$0x3f, %r12
    000000ca: 	addq	%rax, %r12
    000000cd: 	sarq	%r12
    000000d0: 	cmpq	%r15, %rdx
    000000d3: 	jle	.Ltmp2532 # Offset: 211
    000000d9: 	leaq	_ZN15WorkerSubClass3IiEcviEv(%rip), %r14
    000000e0: 	jmp	.Ltmp2533 # Offset: 224
    000000e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2536:
    000000e8: 	movl	0x8(%rbp), %eax
.Ltmp2537:
    000000eb: 	movq	%rdx, %rbx
    000000ee: 	movl	0x8(%rcx), %esi
    000000f1: 	shlq	$0x4, %rbx
    000000f5: 	addq	%r13, %rbx
    000000f8: 	cmpl	%esi, %eax
    000000fa: 	jge	.Ltmp2534 # Offset: 250
    00000100: 	movl	0x8(%rbp), %eax
    00000103: 	leaq	-0x1(%r12), %rdx
    00000108: 	movl	%eax, 0x8(%rbx)
    0000010b: 	movq	%rdx, %rax
    0000010e: 	shrq	$0x3f, %rax
    00000112: 	addq	%rdx, %rax
    00000115: 	movq	%r12, %rdx
    00000118: 	sarq	%rax
    0000011b: 	cmpq	%r12, %r15
    0000011e: 	jge	.Ltmp2535 # Offset: 286
    00000124: 	movq	%rax, %r12
.Ltmp2533:
    00000127: 	movq	%r12, %rbp
    0000012a: 	shlq	$0x4, %rbp
    0000012e: 	addq	%r13, %rbp
    00000131: 	movq	(%rbp), %rax
    00000135: 	movq	(%rax), %rax
    00000138: 	cmpq	%r14, %rax
    0000013b: 	je	.Ltmp2536 # Offset: 315
    0000013d: 	movq	%rcx, 0x8(%rsp)
    00000142: 	movq	%rbp, %rdi
    00000145: 	movq	%rdx, (%rsp)
    00000149: 	callq	*%rax # Offset: 329
    0000014b: 	movq	0x8(%rsp), %rcx
    00000150: 	movq	(%rsp), %rdx
    00000154: 	jmp	.Ltmp2537 # Offset: 340
    00000156: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2527:
    00000160: 	movq	%rcx, 0x10(%rsp)
    00000165: 	movq	%r12, %rdi
    00000168: 	addq	%r13, %rbx
    0000016b: 	movq	%r8, 0x8(%rsp)
    00000170: 	movq	%rdx, (%rsp)
    00000174: 	callq	*%rax # Offset: 372
    00000176: 	movq	0x10(%rsp), %rcx
    0000017b: 	movq	0x8(%rsp), %r8
    00000180: 	movl	%eax, %esi
    00000182: 	movq	(%rbx), %rax
    00000185: 	movq	(%rsp), %rdx
    00000189: 	movq	(%rax), %rax
    0000018c: 	cmpq	%r14, %rax
    0000018f: 	je	.Ltmp2538 # Offset: 399
.Ltmp2528:
    00000195: 	movq	%rcx, 0x18(%rsp)
    0000019a: 	movq	%rbx, %rdi
    0000019d: 	movq	%r8, 0x10(%rsp)
    000001a2: 	movq	%rdx, 0x8(%rsp)
    000001a7: 	movl	%esi, (%rsp)
    000001aa: 	callq	*%rax # Offset: 426
    000001ac: 	movq	0x18(%rsp), %rcx
    000001b1: 	movq	0x10(%rsp), %r8
    000001b6: 	movq	0x8(%rsp), %rdx
    000001bb: 	movl	(%rsp), %esi
    000001be: 	jmp	.Ltmp2539 # Offset: 446
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2535:
    000001c8: 	movl	0x8(%rcx), %esi
    000001cb: 	movq	%rbp, %rbx
.Ltmp2534:
    000001ce: 	movl	%esi, 0x8(%rbx)
    000001d1: 	addq	$0x28, %rsp
    000001d5: 	popq	%rbx
    000001d6: 	popq	%rbp
    000001d7: 	popq	%r12
    000001d9: 	popq	%r13
    000001db: 	popq	%r14
    000001dd: 	popq	%r15
    000001df: 	retq # Offset: 479
.Ltmp2524:
    000001e0: 	movq	%r15, %rbx
    000001e3: 	shlq	$0x4, %rbx
    000001e7: 	addq	%rsi, %rbx
    000001ea: 	cmpq	%rdi, %rdx
    000001ed: 	jne	.Ltmp2532 # Offset: 493
    000001ef: 	movq	%rdx, %rax
    000001f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2531:
    000001f8: 	movq	%rax, %rdx
    000001fb: 	shlq	$0x4, %rdx
    000001ff: 	movl	-0x8(%r13,%rdx), %edx
    00000204: 	movl	%edx, 0x8(%rbx)
    00000207: 	leaq	-0x1(%rax), %rdx
    0000020b: 	movq	%rdx, %rbx
    0000020e: 	shlq	$0x4, %rbx
    00000212: 	addq	%r13, %rbx
    00000215: 	jmp	.Ltmp2540 # Offset: 533
.Ltmp2532:
    0000021a: 	movl	0x8(%rcx), %esi
    0000021d: 	jmp	.Ltmp2534 # Offset: 541
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIP15WorkerSubClass3IiES2_EEvlT_lT0_"

Binary Function "_Z11TestOneTypeIiEvv" after disassembly {
  Number      : 158
  State       : disassembled
  Address     : 0x127c0
  Size        : 0x4549
  MaxSize     : 0x4550
  Offset      : 0x127c0
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIiEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0157:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0x71000(%rsp), %r11
.Ltmp2541:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp2541 # Offset: 37
    00000027: 	subq	$0x6e8, %rsp
    0000002e: 	movq	%fs:0x28, %rax
    00000037: 	movq	%rax, 0x716d8(%rsp)
    0000003f: 	xorl	%eax, %eax
    00000041: 	leaq	0x1b7d0(%rsp), %rdx
    00000049: 	leaq	0x13ad0(%rsp), %rax
    00000051: 	movq	%rax, 0x28(%rsp)
    00000056: 	movq	%rdx, 0x18(%rsp)
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2542:
    00000060: 	leaq	_ZTV16TypeVirtualClassIiE+16(%rip), %rsi
    00000067: 	addq	$0x10, %rax
    0000006b: 	movq	%rsi, -0x10(%rax)
    0000006f: 	cmpq	%rax, %rdx
    00000072: 	jne	.Ltmp2542 # Offset: 114
    00000074: 	leaq	0x234d0(%rsp), %rdx
    0000007c: 	movq	0x18(%rsp), %rax
    00000081: 	movq	%rdx, (%rsp)
    00000085: 	nopl	(%rax) # Size: 3
.Ltmp2543:
    00000088: 	leaq	_ZTV19TypeVirtualSubClassIiE+16(%rip), %rsi
    0000008f: 	addq	$0x10, %rax
    00000093: 	movq	%rsi, -0x10(%rax)
    00000097: 	cmpq	%rax, %rdx
    0000009a: 	jne	.Ltmp2543 # Offset: 154
    0000009c: 	leaq	0x2b1d0(%rsp), %rdx
    000000a4: 	movq	(%rsp), %rax
    000000a8: 	movq	%rdx, 0x8(%rsp)
    000000ad: 	nopl	(%rax) # Size: 3
.Ltmp2544:
    000000b0: 	leaq	_ZTV14WorkerSubClassIiE+16(%rip), %rsi
    000000b7: 	addq	$0x10, %rax
    000000bb: 	movq	%rsi, -0x10(%rax)
    000000bf: 	cmpq	%rax, %rdx
    000000c2: 	jne	.Ltmp2544 # Offset: 194
    000000c4: 	leaq	0x32ed0(%rsp), %rdx
    000000cc: 	movq	0x8(%rsp), %rax
    000000d1: 	movq	%rdx, 0x10(%rsp)
    000000d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2545:
    000000e0: 	leaq	_ZTV18WorkerDeepSubClassIiE+16(%rip), %rsi
    000000e7: 	addq	$0x10, %rax
    000000eb: 	movq	%rsi, -0x10(%rax)
    000000ef: 	cmpq	%rax, %rdx
    000000f2: 	jne	.Ltmp2545 # Offset: 242
    000000f4: 	leaq	0x3abd0(%rsp), %rdx
    000000fc: 	movq	0x10(%rsp), %rax
    00000101: 	movq	%rdx, 0x20(%rsp)
    00000106: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2546:
    00000110: 	leaq	_ZTV15WorkerSubClass2IiE+16(%rip), %rdi
    00000117: 	addq	$0x10, %rax
    0000011b: 	movq	%rdi, -0x10(%rax)
    0000011f: 	cmpq	%rax, %rdx
    00000122: 	jne	.Ltmp2546 # Offset: 290
    00000124: 	leaq	0x428d0(%rsp), %rdx
    0000012c: 	movq	0x20(%rsp), %rax
    00000131: 	movq	%rdx, 0x30(%rsp)
    00000136: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2547:
    00000140: 	leaq	_ZTV15WorkerSubClass3IiE+16(%rip), %rsi
    00000147: 	addq	$0x10, %rax
    0000014b: 	movq	%rsi, -0x10(%rax)
    0000014f: 	cmpq	%rax, %rdx
    00000152: 	jne	.Ltmp2547 # Offset: 338
    00000154: 	leaq	0x4a5d0(%rsp), %rdx
    0000015c: 	movq	0x30(%rsp), %rax
    00000161: 	movq	%rdx, 0x88(%rsp)
    00000169: 	nopl	(%rax) # Size: 7
.Ltmp2548:
    00000170: 	leaq	_ZTV16TypeVirtualClassIiE+16(%rip), %rdi
    00000177: 	addq	$0x10, %rax
    0000017b: 	movq	%rdi, -0x10(%rax)
    0000017f: 	cmpq	%rax, %rdx
    00000182: 	jne	.Ltmp2548 # Offset: 386
    00000184: 	leaq	0x522d0(%rsp), %rdx
    0000018c: 	movq	0x88(%rsp), %rax
    00000194: 	movq	%rdx, 0x80(%rsp)
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp2549:
    000001a0: 	leaq	_ZTV19TypeVirtualSubClassIiE+16(%rip), %rsi
    000001a7: 	addq	$0x10, %rax
    000001ab: 	movq	%rsi, -0x10(%rax)
    000001af: 	cmpq	%rax, %rdx
    000001b2: 	jne	.Ltmp2549 # Offset: 434
    000001b4: 	leaq	0x59fd0(%rsp), %rdx
    000001bc: 	movq	0x80(%rsp), %rax
    000001c4: 	movq	%rdx, 0x78(%rsp)
    000001c9: 	nopl	(%rax) # Size: 7
.Ltmp2550:
    000001d0: 	leaq	_ZTV14WorkerSubClassIiE+16(%rip), %rdi
    000001d7: 	addq	$0x10, %rax
    000001db: 	movq	%rdi, -0x10(%rax)
    000001df: 	cmpq	%rax, %rdx
    000001e2: 	jne	.Ltmp2550 # Offset: 482
    000001e4: 	leaq	0x61cd0(%rsp), %rdx
    000001ec: 	movq	0x78(%rsp), %rax
    000001f1: 	movq	%rdx, 0x90(%rsp)
    000001f9: 	nopl	(%rax) # Size: 7
.Ltmp2551:
    00000200: 	leaq	_ZTV18WorkerDeepSubClassIiE+16(%rip), %rsi
    00000207: 	addq	$0x10, %rax
    0000020b: 	movq	%rsi, -0x10(%rax)
    0000020f: 	cmpq	%rax, %rdx
    00000212: 	jne	.Ltmp2551 # Offset: 530
    00000214: 	leaq	0x699d0(%rsp), %rdx
    0000021c: 	movq	0x90(%rsp), %rax
    00000224: 	movq	%rdx, 0x70(%rsp)
    00000229: 	nopl	(%rax) # Size: 7
.Ltmp2552:
    00000230: 	leaq	_ZTV15WorkerSubClass2IiE+16(%rip), %rdi
    00000237: 	addq	$0x10, %rax
    0000023b: 	movq	%rdi, -0x10(%rax)
    0000023f: 	cmpq	%rax, %rdx
    00000242: 	jne	.Ltmp2552 # Offset: 578
    00000244: 	leaq	0x716d0(%rsp), %rdx
    0000024c: 	movq	0x70(%rsp), %rax
    00000251: 	movq	%rdx, 0xc0(%rsp)
    00000259: 	nopl	(%rax) # Size: 7
.Ltmp2553:
    00000260: 	leaq	_ZTV15WorkerSubClass3IiE+16(%rip), %rsi
    00000267: 	addq	$0x10, %rax
    0000026b: 	movq	%rsi, -0x10(%rax)
    0000026f: 	cmpq	%rax, %rdx
    00000272: 	jne	.Ltmp2553 # Offset: 626
    00000274: 	leaq	0x1b0(%rsp), %rax
    0000027c: 	leaq	DATAat0x1d8fb(%rip), %rsi
    00000283: 	movq	%rax, %rdi
    00000286: 	movq	%rax, 0xa8(%rsp)
    0000028e: 	leaq	0x2190(%rsp), %rbp
    00000296: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1" # Offset: 662
    0000029b: 	leaq	0x190(%rsp), %rax
    000002a3: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm5
    000002ab: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm6
    000002b3: 	movq	%rax, %rsi
    000002b6: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000002bd: 	movq	%rax, 0x68(%rsp)
    000002c2: 	movaps	%xmm5, 0x190(%rsp)
    000002ca: 	movaps	%xmm6, 0x1a0(%rsp)
    000002d2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E # Offset: 722
    000002d7: 	movl	iterations(%rip), %eax
    000002dd: 	leaq	0x250(%rsp), %rdi
    000002e5: 	movq	%rdi, 0x58(%rsp)
    000002ea: 	movl	%eax, 0xdc(%rsp)
    000002f1: 	cvttsd2si	init_value(%rip), %eax
    000002f9: 	leal	0x159(%rax), %edx
    000002ff: 	movd	%eax, %xmm7
    00000303: 	movslq	%edx, %rdx
    00000306: 	pshufd	$0x0, %xmm7, %xmm0
    0000030b: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000312: 	movq	%rdi, %rdx
.Ltmp2554:
    00000315: 	movaps	%xmm0, (%rdx)
    00000318: 	addq	$0x10, %rdx
    0000031c: 	cmpq	%rdx, %rbp
    0000031f: 	jne	.Ltmp2554 # Offset: 799
    00000321: 	leaq	0x40d0(%rsp), %rcx
    00000329: 	movq	%rbp, %rdx
    0000032c: 	movq	%rcx, 0x48(%rsp)
.Ltmp2555:
    00000331: 	movaps	%xmm0, (%rdx)
    00000334: 	addq	$0x10, %rdx
    00000338: 	cmpq	%rdx, %rcx
    0000033b: 	jne	.Ltmp2555 # Offset: 827
    0000033d: 	leaq	0x6010(%rsp), %rcx
    00000345: 	movq	0x48(%rsp), %rdx
    0000034a: 	movq	%rcx, 0x40(%rsp)
.Ltmp2556:
    0000034f: 	movaps	%xmm0, (%rdx)
    00000352: 	addq	$0x10, %rdx
    00000356: 	cmpq	%rdx, %rcx
    00000359: 	jne	.Ltmp2556 # Offset: 857
    0000035b: 	leaq	0x7f50(%rsp), %rcx
    00000363: 	movq	0x40(%rsp), %rdx
    00000368: 	movq	%rcx, 0x50(%rsp)
.Ltmp2557:
    0000036d: 	movaps	%xmm0, (%rdx)
    00000370: 	addq	$0x10, %rdx
    00000374: 	cmpq	%rdx, %rcx
    00000377: 	jne	.Ltmp2557 # Offset: 887
    00000379: 	movq	0x28(%rsp), %rdx
    0000037e: 	movq	0x18(%rsp), %rcx
    00000383: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2558:
    00000388: 	addq	$0x10, %rdx
    0000038c: 	movl	%eax, -0x8(%rdx)
    0000038f: 	cmpq	%rcx, %rdx
    00000392: 	jne	.Ltmp2558 # Offset: 914
    00000394: 	movq	0x18(%rsp), %rdx
    00000399: 	movq	(%rsp), %rcx
    0000039d: 	nopl	(%rax) # Size: 3
.Ltmp2559:
    000003a0: 	addq	$0x10, %rdx
    000003a4: 	movl	%eax, -0x8(%rdx)
    000003a7: 	cmpq	%rcx, %rdx
    000003aa: 	jne	.Ltmp2559 # Offset: 938
    000003ac: 	movq	(%rsp), %rdx
    000003b0: 	movq	0x8(%rsp), %rcx
    000003b5: 	nopl	(%rax) # Size: 3
.Ltmp2560:
    000003b8: 	addq	$0x10, %rdx
    000003bc: 	movl	%eax, -0x8(%rdx)
    000003bf: 	cmpq	%rcx, %rdx
    000003c2: 	jne	.Ltmp2560 # Offset: 962
    000003c4: 	movq	0x8(%rsp), %rdx
    000003c9: 	movq	0x10(%rsp), %rcx
    000003ce: 	nop # Size: 2
.Ltmp2561:
    000003d0: 	addq	$0x10, %rdx
    000003d4: 	movl	%eax, -0x8(%rdx)
    000003d7: 	cmpq	%rcx, %rdx
    000003da: 	jne	.Ltmp2561 # Offset: 986
    000003dc: 	leaq	0x9e90(%rsp), %rcx
    000003e4: 	movq	0x50(%rsp), %rdx
    000003e9: 	movq	%rcx, 0x60(%rsp)
.Ltmp2562:
    000003ee: 	movaps	%xmm0, (%rdx)
    000003f1: 	addq	$0x10, %rdx
    000003f5: 	cmpq	%rdx, %rcx
    000003f8: 	jne	.Ltmp2562 # Offset: 1016
    000003fa: 	movq	0x10(%rsp), %rdx
    000003ff: 	movq	0x20(%rsp), %rcx
    00000404: 	nopl	(%rax) # Size: 4
.Ltmp2563:
    00000408: 	addq	$0x10, %rdx
    0000040c: 	movl	%eax, -0x8(%rdx)
    0000040f: 	cmpq	%rcx, %rdx
    00000412: 	jne	.Ltmp2563 # Offset: 1042
    00000414: 	movq	0x20(%rsp), %rdx
    00000419: 	movq	0x30(%rsp), %rcx
    0000041e: 	nop # Size: 2
.Ltmp2564:
    00000420: 	addq	$0x10, %rdx
    00000424: 	movl	%eax, -0x8(%rdx)
    00000427: 	cmpq	%rcx, %rdx
    0000042a: 	jne	.Ltmp2564 # Offset: 1066
    0000042c: 	leaq	0x11b90(%rsp), %rax
    00000434: 	movq	0xa8(%rsp), %rsi
    0000043c: 	leaq	DATAat0x1d1eb(%rip), %rdx
    00000443: 	movq	%rax, %rdi
    00000446: 	movq	%rax, 0xa0(%rsp)
    0000044e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1102
    00000453: 	callq	clock@PLT # Offset: 1107
    00000458: 	movsd	DATAat0x1ded0(%rip), %xmm5
    00000460: 	xorl	%ebx, %ebx
    00000462: 	movl	iterations(%rip), %ecx
    00000468: 	movq	%rax, start_time(%rip)
    0000046f: 	leaq	DATAat0x1d1d4(%rip), %r12
    00000476: 	movsd	%xmm5, 0x38(%rsp)
    0000047c: 	testl	%ecx, %ecx
    0000047e: 	jle	.Ltmp2565 # Offset: 1150
.Ltmp2568:
    00000480: 	movq	0x58(%rsp), %rax
    00000485: 	pxor	%xmm0, %xmm0
    00000489: 	nopl	(%rax) # Size: 7
.Ltmp2566:
    00000490: 	paddd	(%rax), %xmm0
    00000494: 	addq	$0x10, %rax
    00000498: 	cmpq	%rax, %rbp
    0000049b: 	jne	.Ltmp2566 # Offset: 1179
    0000049d: 	movdqa	%xmm0, %xmm1
    000004a1: 	psrldq	$0x8, %xmm1
    000004a6: 	paddd	%xmm1, %xmm0
    000004aa: 	movsd	0x38(%rsp), %xmm1
    000004b0: 	mulsd	init_value(%rip), %xmm1
    000004b8: 	cvttsd2si	%xmm1, %edx
    000004bc: 	movdqa	%xmm0, %xmm1
    000004c0: 	psrldq	$0x4, %xmm1
    000004c5: 	paddd	%xmm1, %xmm0
    000004c9: 	movd	%xmm0, %eax
    000004cd: 	cmpl	%eax, %edx
    000004cf: 	je	.Ltmp2567 # Offset: 1231
    000004d1: 	movq	0x11b90(%rsp), %rdx
    000004d9: 	movq	%r12, %rsi
    000004dc: 	movl	$0x1, %edi
    000004e1: 	xorl	%eax, %eax
    000004e3: 	callq	__printf_chk@PLT # Offset: 1251
    000004e8: 	movl	iterations(%rip), %ecx
.Ltmp2567:
    000004ee: 	addl	$0x1, %ebx
    000004f1: 	cmpl	%ecx, %ebx
    000004f3: 	jl	.Ltmp2568 # Offset: 1267
.Ltmp2565:
    000004f5: 	callq	clock@PLT # Offset: 1269
    000004fa: 	movq	0xa0(%rsp), %rdi
    00000502: 	pxor	%xmm0, %xmm0
    00000506: 	movq	%rax, end_time(%rip)
    0000050d: 	subq	start_time(%rip), %rax
    00000514: 	cvtsi2sd	%rax, %xmm0
    00000519: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00000521: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1313
    00000526: 	movq	0x11b90(%rsp), %rdi
    0000052e: 	leaq	0x11ba0(%rsp), %r13
    00000536: 	cmpq	%r13, %rdi
    00000539: 	je	.Ltmp2569 # Offset: 1337
    0000053b: 	movq	0x11ba0(%rsp), %rax
    00000543: 	leaq	0x1(%rax), %rsi
    00000547: 	callq	_ZdlPvm@PLT # Offset: 1351
.Ltmp2569:
    0000054c: 	movq	0xa8(%rsp), %rsi
    00000554: 	movq	0xa0(%rsp), %rdi
    0000055c: 	leaq	DATAat0x1d2a0(%rip), %rdx
    00000563: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1379
    00000568: 	callq	clock@PLT # Offset: 1384
    0000056d: 	movsd	DATAat0x1ded0(%rip), %xmm6
    00000575: 	xorl	%ebx, %ebx
    00000577: 	movl	iterations(%rip), %ecx
    0000057d: 	movq	%rax, start_time(%rip)
    00000584: 	leaq	DATAat0x1d1d4(%rip), %r12
    0000058b: 	movsd	%xmm6, 0x38(%rsp)
    00000591: 	testl	%ecx, %ecx
    00000593: 	jle	.Ltmp2570 # Offset: 1427
    00000595: 	nopl	(%rax) # Size: 3
.Ltmp2573:
    00000598: 	movq	0x48(%rsp), %rdx
    0000059d: 	movq	%rbp, %rax
    000005a0: 	pxor	%xmm0, %xmm0
    000005a4: 	nopl	(%rax) # Size: 4
.Ltmp2571:
    000005a8: 	paddd	(%rax), %xmm0
    000005ac: 	addq	$0x10, %rax
    000005b0: 	cmpq	%rax, %rdx
    000005b3: 	jne	.Ltmp2571 # Offset: 1459
    000005b5: 	movdqa	%xmm0, %xmm1
    000005b9: 	psrldq	$0x8, %xmm1
    000005be: 	paddd	%xmm1, %xmm0
    000005c2: 	movsd	0x38(%rsp), %xmm1
    000005c8: 	mulsd	init_value(%rip), %xmm1
    000005d0: 	cvttsd2si	%xmm1, %edx
    000005d4: 	movdqa	%xmm0, %xmm1
    000005d8: 	psrldq	$0x4, %xmm1
    000005dd: 	paddd	%xmm1, %xmm0
    000005e1: 	movd	%xmm0, %eax
    000005e5: 	cmpl	%eax, %edx
    000005e7: 	je	.Ltmp2572 # Offset: 1511
    000005e9: 	movq	0x11b90(%rsp), %rdx
    000005f1: 	movq	%r12, %rsi
    000005f4: 	movl	$0x1, %edi
    000005f9: 	xorl	%eax, %eax
    000005fb: 	callq	__printf_chk@PLT # Offset: 1531
    00000600: 	movl	iterations(%rip), %ecx
.Ltmp2572:
    00000606: 	addl	$0x1, %ebx
    00000609: 	cmpl	%ecx, %ebx
    0000060b: 	jl	.Ltmp2573 # Offset: 1547
.Ltmp2570:
    0000060d: 	callq	clock@PLT # Offset: 1549
    00000612: 	movq	0xa0(%rsp), %rdi
    0000061a: 	pxor	%xmm0, %xmm0
    0000061e: 	movq	%rax, end_time(%rip)
    00000625: 	subq	start_time(%rip), %rax
    0000062c: 	cvtsi2sd	%rax, %xmm0
    00000631: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00000639: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1593
    0000063e: 	movq	0x11b90(%rsp), %rdi
    00000646: 	cmpq	%r13, %rdi
    00000649: 	je	.Ltmp2574 # Offset: 1609
    0000064b: 	movq	0x11ba0(%rsp), %rax
    00000653: 	leaq	0x1(%rax), %rsi
    00000657: 	callq	_ZdlPvm@PLT # Offset: 1623
.Ltmp2574:
    0000065c: 	movq	0xa8(%rsp), %rsi
    00000664: 	movq	0xa0(%rsp), %rdi
    0000066c: 	leaq	DATAat0x1d2c8(%rip), %rdx
    00000673: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1651
    00000678: 	callq	clock@PLT # Offset: 1656
    0000067d: 	movsd	DATAat0x1ded0(%rip), %xmm7
    00000685: 	xorl	%ebx, %ebx
    00000687: 	movl	iterations(%rip), %ecx
    0000068d: 	movq	%rax, start_time(%rip)
    00000694: 	leaq	DATAat0x1d1d4(%rip), %r12
    0000069b: 	movsd	%xmm7, 0x38(%rsp)
    000006a1: 	testl	%ecx, %ecx
    000006a3: 	jle	.Ltmp2575 # Offset: 1699
    000006a9: 	nopl	(%rax) # Size: 7
.Ltmp2578:
    000006b0: 	movq	0x48(%rsp), %rax
    000006b5: 	movq	0x40(%rsp), %rdx
    000006ba: 	pxor	%xmm0, %xmm0
    000006be: 	nop # Size: 2
.Ltmp2576:
    000006c0: 	paddd	(%rax), %xmm0
    000006c4: 	addq	$0x10, %rax
    000006c8: 	cmpq	%rax, %rdx
    000006cb: 	jne	.Ltmp2576 # Offset: 1739
    000006cd: 	movdqa	%xmm0, %xmm1
    000006d1: 	psrldq	$0x8, %xmm1
    000006d6: 	paddd	%xmm1, %xmm0
    000006da: 	movsd	0x38(%rsp), %xmm1
    000006e0: 	mulsd	init_value(%rip), %xmm1
    000006e8: 	cvttsd2si	%xmm1, %edx
    000006ec: 	movdqa	%xmm0, %xmm1
    000006f0: 	psrldq	$0x4, %xmm1
    000006f5: 	paddd	%xmm1, %xmm0
    000006f9: 	movd	%xmm0, %eax
    000006fd: 	cmpl	%eax, %edx
    000006ff: 	je	.Ltmp2577 # Offset: 1791
    00000701: 	movq	0x11b90(%rsp), %rdx
    00000709: 	movq	%r12, %rsi
    0000070c: 	movl	$0x1, %edi
    00000711: 	xorl	%eax, %eax
    00000713: 	callq	__printf_chk@PLT # Offset: 1811
    00000718: 	movl	iterations(%rip), %ecx
.Ltmp2577:
    0000071e: 	addl	$0x1, %ebx
    00000721: 	cmpl	%ecx, %ebx
    00000723: 	jl	.Ltmp2578 # Offset: 1827
.Ltmp2575:
    00000725: 	callq	clock@PLT # Offset: 1829
    0000072a: 	movq	0xa0(%rsp), %rdi
    00000732: 	pxor	%xmm0, %xmm0
    00000736: 	movq	%rax, end_time(%rip)
    0000073d: 	subq	start_time(%rip), %rax
    00000744: 	cvtsi2sd	%rax, %xmm0
    00000749: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00000751: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1873
    00000756: 	movq	0x11b90(%rsp), %rdi
    0000075e: 	cmpq	%r13, %rdi
    00000761: 	je	.Ltmp2579 # Offset: 1889
    00000763: 	movq	0x11ba0(%rsp), %rax
    0000076b: 	leaq	0x1(%rax), %rsi
    0000076f: 	callq	_ZdlPvm@PLT # Offset: 1903
.Ltmp2579:
    00000774: 	movq	0xa8(%rsp), %rsi
    0000077c: 	movq	0xa0(%rsp), %rdi
    00000784: 	leaq	DATAat0x1d2f0(%rip), %rdx
    0000078b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1931
    00000790: 	callq	clock@PLT # Offset: 1936
    00000795: 	movsd	DATAat0x1ded0(%rip), %xmm5
    0000079d: 	xorl	%ebx, %ebx
    0000079f: 	movl	iterations(%rip), %ecx
    000007a5: 	movq	%rax, start_time(%rip)
    000007ac: 	leaq	DATAat0x1d1d4(%rip), %r12
    000007b3: 	movsd	%xmm5, 0x38(%rsp)
    000007b9: 	testl	%ecx, %ecx
    000007bb: 	jle	.Ltmp2580 # Offset: 1979
    000007bd: 	nopl	(%rax) # Size: 3
.Ltmp2583:
    000007c0: 	movq	0x40(%rsp), %rax
    000007c5: 	movq	0x50(%rsp), %rdx
    000007ca: 	pxor	%xmm0, %xmm0
    000007ce: 	nop # Size: 2
.Ltmp2581:
    000007d0: 	paddd	(%rax), %xmm0
    000007d4: 	addq	$0x10, %rax
    000007d8: 	cmpq	%rax, %rdx
    000007db: 	jne	.Ltmp2581 # Offset: 2011
    000007dd: 	movdqa	%xmm0, %xmm1
    000007e1: 	psrldq	$0x8, %xmm1
    000007e6: 	paddd	%xmm1, %xmm0
    000007ea: 	movsd	0x38(%rsp), %xmm1
    000007f0: 	mulsd	init_value(%rip), %xmm1
    000007f8: 	cvttsd2si	%xmm1, %edx
    000007fc: 	movdqa	%xmm0, %xmm1
    00000800: 	psrldq	$0x4, %xmm1
    00000805: 	paddd	%xmm1, %xmm0
    00000809: 	movd	%xmm0, %eax
    0000080d: 	cmpl	%eax, %edx
    0000080f: 	je	.Ltmp2582 # Offset: 2063
    00000811: 	movq	0x11b90(%rsp), %rdx
    00000819: 	movq	%r12, %rsi
    0000081c: 	movl	$0x1, %edi
    00000821: 	xorl	%eax, %eax
    00000823: 	callq	__printf_chk@PLT # Offset: 2083
    00000828: 	movl	iterations(%rip), %ecx
.Ltmp2582:
    0000082e: 	addl	$0x1, %ebx
    00000831: 	cmpl	%ecx, %ebx
    00000833: 	jl	.Ltmp2583 # Offset: 2099
.Ltmp2580:
    00000835: 	callq	clock@PLT # Offset: 2101
    0000083a: 	movq	0xa0(%rsp), %rdi
    00000842: 	pxor	%xmm0, %xmm0
    00000846: 	movq	%rax, end_time(%rip)
    0000084d: 	subq	start_time(%rip), %rax
    00000854: 	cvtsi2sd	%rax, %xmm0
    00000859: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00000861: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2145
    00000866: 	movq	0x11b90(%rsp), %rdi
    0000086e: 	cmpq	%r13, %rdi
    00000871: 	je	.Ltmp2584 # Offset: 2161
    00000873: 	movq	0x11ba0(%rsp), %rax
    0000087b: 	leaq	0x1(%rax), %rsi
    0000087f: 	callq	_ZdlPvm@PLT # Offset: 2175
.Ltmp2584:
    00000884: 	movq	0xa8(%rsp), %rsi
    0000088c: 	movq	0xa0(%rsp), %rdi
    00000894: 	leaq	DATAat0x1d318(%rip), %rdx
    0000089b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2203
    000008a0: 	callq	clock@PLT # Offset: 2208
    000008a5: 	movsd	DATAat0x1ded0(%rip), %xmm6
    000008ad: 	xorl	%ebx, %ebx
    000008af: 	movl	iterations(%rip), %ecx
    000008b5: 	movq	%rax, start_time(%rip)
    000008bc: 	leaq	DATAat0x1d1d4(%rip), %r12
    000008c3: 	movsd	%xmm6, 0x38(%rsp)
    000008c9: 	testl	%ecx, %ecx
    000008cb: 	jle	.Ltmp2585 # Offset: 2251
    000008cd: 	nopl	(%rax) # Size: 3
.Ltmp2588:
    000008d0: 	movq	0x50(%rsp), %rax
    000008d5: 	movq	0x60(%rsp), %rdx
    000008da: 	pxor	%xmm0, %xmm0
    000008de: 	nop # Size: 2
.Ltmp2586:
    000008e0: 	paddd	(%rax), %xmm0
    000008e4: 	addq	$0x10, %rax
    000008e8: 	cmpq	%rax, %rdx
    000008eb: 	jne	.Ltmp2586 # Offset: 2283
    000008ed: 	movdqa	%xmm0, %xmm1
    000008f1: 	psrldq	$0x8, %xmm1
    000008f6: 	paddd	%xmm1, %xmm0
    000008fa: 	movsd	0x38(%rsp), %xmm1
    00000900: 	mulsd	init_value(%rip), %xmm1
    00000908: 	cvttsd2si	%xmm1, %edx
    0000090c: 	movdqa	%xmm0, %xmm1
    00000910: 	psrldq	$0x4, %xmm1
    00000915: 	paddd	%xmm1, %xmm0
    00000919: 	movd	%xmm0, %eax
    0000091d: 	cmpl	%eax, %edx
    0000091f: 	je	.Ltmp2587 # Offset: 2335
    00000921: 	movq	0x11b90(%rsp), %rdx
    00000929: 	movq	%r12, %rsi
    0000092c: 	movl	$0x1, %edi
    00000931: 	xorl	%eax, %eax
    00000933: 	callq	__printf_chk@PLT # Offset: 2355
    00000938: 	movl	iterations(%rip), %ecx
.Ltmp2587:
    0000093e: 	addl	$0x1, %ebx
    00000941: 	cmpl	%ecx, %ebx
    00000943: 	jl	.Ltmp2588 # Offset: 2371
.Ltmp2585:
    00000945: 	callq	clock@PLT # Offset: 2373
    0000094a: 	movq	0xa0(%rsp), %rdi
    00000952: 	pxor	%xmm0, %xmm0
    00000956: 	movq	%rax, end_time(%rip)
    0000095d: 	subq	start_time(%rip), %rax
    00000964: 	cvtsi2sd	%rax, %xmm0
    00000969: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00000971: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2417
    00000976: 	movq	0x11b90(%rsp), %rdi
    0000097e: 	cmpq	%r13, %rdi
    00000981: 	je	.Ltmp2589 # Offset: 2433
    00000983: 	movq	0x11ba0(%rsp), %rax
    0000098b: 	leaq	0x1(%rax), %rsi
    0000098f: 	callq	_ZdlPvm@PLT # Offset: 2447
.Ltmp2589:
    00000994: 	movq	0xa8(%rsp), %rsi
    0000099c: 	movq	0xa0(%rsp), %rdi
    000009a4: 	leaq	DATAat0x1d340(%rip), %rdx
    000009ab: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2475
    000009b0: 	callq	clock@PLT # Offset: 2480
    000009b5: 	movl	iterations(%rip), %ecx
    000009bb: 	movq	%rax, start_time(%rip)
    000009c2: 	testl	%ecx, %ecx
    000009c4: 	jle	.Ltmp2590 # Offset: 2500
    000009ca: 	movsd	DATAat0x1ded0(%rip), %xmm7
    000009d2: 	movq	0x28(%rsp), %rax
    000009d7: 	xorl	%r12d, %r12d
    000009da: 	leaq	0x13ad8(%rsp), %r14
    000009e2: 	leaq	DATAat0x1d1d4(%rip), %r15
    000009e9: 	movsd	%xmm7, 0x38(%rsp)
    000009ef: 	leaq	0x7cc8(%rax), %rbx
    000009f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2593:
    00000a00: 	movq	%r14, %rax
    00000a03: 	pxor	%xmm1, %xmm1
    00000a07: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2591:
    00000a10: 	movdqu	(%rax), %xmm0
    00000a14: 	movdqu	0x10(%rax), %xmm3
    00000a19: 	addq	$0x40, %rax
    00000a1d: 	movdqu	-0x20(%rax), %xmm2
    00000a22: 	movdqu	-0x10(%rax), %xmm4
    00000a27: 	shufps	$0x88, %xmm3, %xmm0
    00000a2b: 	shufps	$0x88, %xmm4, %xmm2
    00000a2f: 	shufps	$0x88, %xmm2, %xmm0
    00000a33: 	paddd	%xmm0, %xmm1
    00000a37: 	cmpq	%rax, %rbx
    00000a3a: 	jne	.Ltmp2591 # Offset: 2618
    00000a3c: 	movdqa	%xmm1, %xmm0
    00000a40: 	psrldq	$0x8, %xmm0
    00000a45: 	paddd	%xmm0, %xmm1
    00000a49: 	movsd	0x38(%rsp), %xmm0
    00000a4f: 	mulsd	init_value(%rip), %xmm0
    00000a57: 	cvttsd2si	%xmm0, %edx
    00000a5b: 	movdqa	%xmm1, %xmm0
    00000a5f: 	psrldq	$0x4, %xmm0
    00000a64: 	paddd	%xmm0, %xmm1
    00000a68: 	movd	%xmm1, %eax
    00000a6c: 	addl	0x1b798(%rsp), %eax
    00000a73: 	addl	0x1b7a8(%rsp), %eax
    00000a7a: 	addl	0x1b7b8(%rsp), %eax
    00000a81: 	addl	0x1b7c8(%rsp), %eax
    00000a88: 	cmpl	%eax, %edx
    00000a8a: 	je	.Ltmp2592 # Offset: 2698
    00000a8c: 	movq	0x11b90(%rsp), %rdx
    00000a94: 	movq	%r15, %rsi
    00000a97: 	movl	$0x1, %edi
    00000a9c: 	xorl	%eax, %eax
    00000a9e: 	callq	__printf_chk@PLT # Offset: 2718
    00000aa3: 	movl	iterations(%rip), %ecx
.Ltmp2592:
    00000aa9: 	addl	$0x1, %r12d
    00000aad: 	cmpl	%ecx, %r12d
    00000ab0: 	jl	.Ltmp2593 # Offset: 2736
.Ltmp2590:
    00000ab6: 	callq	clock@PLT # Offset: 2742
    00000abb: 	movq	0xa0(%rsp), %rdi
    00000ac3: 	pxor	%xmm0, %xmm0
    00000ac7: 	movq	%rax, end_time(%rip)
    00000ace: 	subq	start_time(%rip), %rax
    00000ad5: 	cvtsi2sd	%rax, %xmm0
    00000ada: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00000ae2: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2786
    00000ae7: 	movq	0x11b90(%rsp), %rdi
    00000aef: 	cmpq	%r13, %rdi
    00000af2: 	je	.Ltmp2594 # Offset: 2802
    00000af4: 	movq	0x11ba0(%rsp), %rax
    00000afc: 	leaq	0x1(%rax), %rsi
    00000b00: 	callq	_ZdlPvm@PLT # Offset: 2816
.Ltmp2594:
    00000b05: 	movq	0xa8(%rsp), %rsi
    00000b0d: 	movq	0xa0(%rsp), %rdi
    00000b15: 	leaq	DATAat0x1d368(%rip), %rdx
    00000b1c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2844
    00000b21: 	callq	clock@PLT # Offset: 2849
    00000b26: 	movl	iterations(%rip), %ecx
    00000b2c: 	movq	%rax, start_time(%rip)
    00000b33: 	testl	%ecx, %ecx
    00000b35: 	jle	.Ltmp2595 # Offset: 2869
    00000b3b: 	movsd	DATAat0x1ded0(%rip), %xmm5
    00000b43: 	movq	0x18(%rsp), %rax
    00000b48: 	xorl	%r12d, %r12d
    00000b4b: 	leaq	0x1b7d8(%rsp), %r14
    00000b53: 	leaq	DATAat0x1d1d4(%rip), %r15
    00000b5a: 	movsd	%xmm5, 0x38(%rsp)
    00000b60: 	leaq	0x7cc8(%rax), %rbx
    00000b67: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2598:
    00000b70: 	movq	%r14, %rax
    00000b73: 	pxor	%xmm1, %xmm1
    00000b77: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2596:
    00000b80: 	movdqu	(%rax), %xmm0
    00000b84: 	movdqu	0x10(%rax), %xmm5
    00000b89: 	addq	$0x40, %rax
    00000b8d: 	movdqu	-0x20(%rax), %xmm2
    00000b92: 	movdqu	-0x10(%rax), %xmm6
    00000b97: 	shufps	$0x88, %xmm5, %xmm0
    00000b9b: 	shufps	$0x88, %xmm6, %xmm2
    00000b9f: 	shufps	$0x88, %xmm2, %xmm0
    00000ba3: 	paddd	%xmm0, %xmm1
    00000ba7: 	cmpq	%rax, %rbx
    00000baa: 	jne	.Ltmp2596 # Offset: 2986
    00000bac: 	movdqa	%xmm1, %xmm0
    00000bb0: 	psrldq	$0x8, %xmm0
    00000bb5: 	paddd	%xmm0, %xmm1
    00000bb9: 	movsd	0x38(%rsp), %xmm0
    00000bbf: 	mulsd	init_value(%rip), %xmm0
    00000bc7: 	cvttsd2si	%xmm0, %edx
    00000bcb: 	movdqa	%xmm1, %xmm0
    00000bcf: 	psrldq	$0x4, %xmm0
    00000bd4: 	paddd	%xmm0, %xmm1
    00000bd8: 	movd	%xmm1, %eax
    00000bdc: 	addl	0x23498(%rsp), %eax
    00000be3: 	addl	0x234a8(%rsp), %eax
    00000bea: 	addl	0x234b8(%rsp), %eax
    00000bf1: 	addl	0x234c8(%rsp), %eax
    00000bf8: 	cmpl	%eax, %edx
    00000bfa: 	je	.Ltmp2597 # Offset: 3066
    00000bfc: 	movq	0x11b90(%rsp), %rdx
    00000c04: 	movq	%r15, %rsi
    00000c07: 	movl	$0x1, %edi
    00000c0c: 	xorl	%eax, %eax
    00000c0e: 	callq	__printf_chk@PLT # Offset: 3086
    00000c13: 	movl	iterations(%rip), %ecx
.Ltmp2597:
    00000c19: 	addl	$0x1, %r12d
    00000c1d: 	cmpl	%ecx, %r12d
    00000c20: 	jl	.Ltmp2598 # Offset: 3104
.Ltmp2595:
    00000c26: 	callq	clock@PLT # Offset: 3110
    00000c2b: 	movq	0xa0(%rsp), %rdi
    00000c33: 	pxor	%xmm0, %xmm0
    00000c37: 	movq	%rax, end_time(%rip)
    00000c3e: 	subq	start_time(%rip), %rax
    00000c45: 	cvtsi2sd	%rax, %xmm0
    00000c4a: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00000c52: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3154
    00000c57: 	movq	0x11b90(%rsp), %rdi
    00000c5f: 	cmpq	%r13, %rdi
    00000c62: 	je	.Ltmp2599 # Offset: 3170
    00000c64: 	movq	0x11ba0(%rsp), %rax
    00000c6c: 	leaq	0x1(%rax), %rsi
    00000c70: 	callq	_ZdlPvm@PLT # Offset: 3184
.Ltmp2599:
    00000c75: 	movq	0xa8(%rsp), %rsi
    00000c7d: 	movq	0xa0(%rsp), %rdi
    00000c85: 	leaq	DATAat0x1d390(%rip), %rdx
    00000c8c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3212
    00000c91: 	callq	clock@PLT # Offset: 3217
    00000c96: 	movl	iterations(%rip), %ecx
    00000c9c: 	movq	%rax, start_time(%rip)
    00000ca3: 	testl	%ecx, %ecx
    00000ca5: 	jle	.Ltmp2600 # Offset: 3237
    00000cab: 	movsd	DATAat0x1ded0(%rip), %xmm6
    00000cb3: 	movq	(%rsp), %rax
    00000cb7: 	xorl	%r12d, %r12d
    00000cba: 	leaq	0x234d8(%rsp), %r14
    00000cc2: 	leaq	DATAat0x1d1d4(%rip), %r15
    00000cc9: 	movsd	%xmm6, 0x38(%rsp)
    00000ccf: 	leaq	0x7cc8(%rax), %rbx
    00000cd6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2603:
    00000ce0: 	movq	%r14, %rax
    00000ce3: 	pxor	%xmm1, %xmm1
    00000ce7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2601:
    00000cf0: 	movdqu	(%rax), %xmm0
    00000cf4: 	movdqu	0x10(%rax), %xmm7
    00000cf9: 	addq	$0x40, %rax
    00000cfd: 	movdqu	-0x20(%rax), %xmm2
    00000d02: 	movdqu	-0x10(%rax), %xmm3
    00000d07: 	shufps	$0x88, %xmm7, %xmm0
    00000d0b: 	shufps	$0x88, %xmm3, %xmm2
    00000d0f: 	shufps	$0x88, %xmm2, %xmm0
    00000d13: 	paddd	%xmm0, %xmm1
    00000d17: 	cmpq	%rax, %rbx
    00000d1a: 	jne	.Ltmp2601 # Offset: 3354
    00000d1c: 	movdqa	%xmm1, %xmm0
    00000d20: 	psrldq	$0x8, %xmm0
    00000d25: 	paddd	%xmm0, %xmm1
    00000d29: 	movsd	0x38(%rsp), %xmm0
    00000d2f: 	mulsd	init_value(%rip), %xmm0
    00000d37: 	cvttsd2si	%xmm0, %edx
    00000d3b: 	movdqa	%xmm1, %xmm0
    00000d3f: 	psrldq	$0x4, %xmm0
    00000d44: 	paddd	%xmm0, %xmm1
    00000d48: 	movd	%xmm1, %eax
    00000d4c: 	addl	0x2b198(%rsp), %eax
    00000d53: 	addl	0x2b1a8(%rsp), %eax
    00000d5a: 	addl	0x2b1b8(%rsp), %eax
    00000d61: 	addl	0x2b1c8(%rsp), %eax
    00000d68: 	cmpl	%eax, %edx
    00000d6a: 	je	.Ltmp2602 # Offset: 3434
    00000d6c: 	movq	0x11b90(%rsp), %rdx
    00000d74: 	movq	%r15, %rsi
    00000d77: 	movl	$0x1, %edi
    00000d7c: 	xorl	%eax, %eax
    00000d7e: 	callq	__printf_chk@PLT # Offset: 3454
    00000d83: 	movl	iterations(%rip), %ecx
.Ltmp2602:
    00000d89: 	addl	$0x1, %r12d
    00000d8d: 	cmpl	%ecx, %r12d
    00000d90: 	jl	.Ltmp2603 # Offset: 3472
.Ltmp2600:
    00000d96: 	callq	clock@PLT # Offset: 3478
    00000d9b: 	movq	0xa0(%rsp), %rdi
    00000da3: 	pxor	%xmm0, %xmm0
    00000da7: 	movq	%rax, end_time(%rip)
    00000dae: 	subq	start_time(%rip), %rax
    00000db5: 	cvtsi2sd	%rax, %xmm0
    00000dba: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00000dc2: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3522
    00000dc7: 	movq	0x11b90(%rsp), %rdi
    00000dcf: 	cmpq	%r13, %rdi
    00000dd2: 	je	.Ltmp2604 # Offset: 3538
    00000dd4: 	movq	0x11ba0(%rsp), %rax
    00000ddc: 	leaq	0x1(%rax), %rsi
    00000de0: 	callq	_ZdlPvm@PLT # Offset: 3552
.Ltmp2604:
    00000de5: 	movq	0xa8(%rsp), %rsi
    00000ded: 	movq	0xa0(%rsp), %rdi
    00000df5: 	leaq	DATAat0x1d3b8(%rip), %rdx
    00000dfc: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3580
    00000e01: 	callq	clock@PLT # Offset: 3585
    00000e06: 	movl	iterations(%rip), %ecx
    00000e0c: 	movq	%rax, start_time(%rip)
    00000e13: 	testl	%ecx, %ecx
    00000e15: 	jle	.Ltmp2605 # Offset: 3605
    00000e1b: 	movsd	DATAat0x1ded0(%rip), %xmm7
    00000e23: 	movq	0x8(%rsp), %rax
    00000e28: 	xorl	%r12d, %r12d
    00000e2b: 	leaq	0x2b1d8(%rsp), %r14
    00000e33: 	leaq	DATAat0x1d1d4(%rip), %r15
    00000e3a: 	movsd	%xmm7, 0x38(%rsp)
    00000e40: 	leaq	0x7cc8(%rax), %rbx
    00000e47: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2608:
    00000e50: 	movq	%r14, %rax
    00000e53: 	pxor	%xmm1, %xmm1
    00000e57: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2606:
    00000e60: 	movdqu	(%rax), %xmm0
    00000e64: 	movdqu	0x10(%rax), %xmm4
    00000e69: 	addq	$0x40, %rax
    00000e6d: 	movdqu	-0x20(%rax), %xmm2
    00000e72: 	movdqu	-0x10(%rax), %xmm5
    00000e77: 	shufps	$0x88, %xmm4, %xmm0
    00000e7b: 	shufps	$0x88, %xmm5, %xmm2
    00000e7f: 	shufps	$0x88, %xmm2, %xmm0
    00000e83: 	paddd	%xmm0, %xmm1
    00000e87: 	cmpq	%rax, %rbx
    00000e8a: 	jne	.Ltmp2606 # Offset: 3722
    00000e8c: 	movdqa	%xmm1, %xmm0
    00000e90: 	psrldq	$0x8, %xmm0
    00000e95: 	paddd	%xmm0, %xmm1
    00000e99: 	movsd	0x38(%rsp), %xmm0
    00000e9f: 	mulsd	init_value(%rip), %xmm0
    00000ea7: 	cvttsd2si	%xmm0, %edx
    00000eab: 	movdqa	%xmm1, %xmm0
    00000eaf: 	psrldq	$0x4, %xmm0
    00000eb4: 	paddd	%xmm0, %xmm1
    00000eb8: 	movd	%xmm1, %eax
    00000ebc: 	addl	0x32e98(%rsp), %eax
    00000ec3: 	addl	0x32ea8(%rsp), %eax
    00000eca: 	addl	0x32eb8(%rsp), %eax
    00000ed1: 	addl	0x32ec8(%rsp), %eax
    00000ed8: 	cmpl	%eax, %edx
    00000eda: 	je	.Ltmp2607 # Offset: 3802
    00000edc: 	movq	0x11b90(%rsp), %rdx
    00000ee4: 	movq	%r15, %rsi
    00000ee7: 	movl	$0x1, %edi
    00000eec: 	xorl	%eax, %eax
    00000eee: 	callq	__printf_chk@PLT # Offset: 3822
    00000ef3: 	movl	iterations(%rip), %ecx
.Ltmp2607:
    00000ef9: 	addl	$0x1, %r12d
    00000efd: 	cmpl	%ecx, %r12d
    00000f00: 	jl	.Ltmp2608 # Offset: 3840
.Ltmp2605:
    00000f06: 	callq	clock@PLT # Offset: 3846
    00000f0b: 	movq	0xa0(%rsp), %rdi
    00000f13: 	pxor	%xmm0, %xmm0
    00000f17: 	movq	%rax, end_time(%rip)
    00000f1e: 	subq	start_time(%rip), %rax
    00000f25: 	cvtsi2sd	%rax, %xmm0
    00000f2a: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00000f32: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3890
    00000f37: 	movq	0x11b90(%rsp), %rdi
    00000f3f: 	cmpq	%r13, %rdi
    00000f42: 	je	.Ltmp2609 # Offset: 3906
    00000f44: 	movq	0x11ba0(%rsp), %rax
    00000f4c: 	leaq	0x1(%rax), %rsi
    00000f50: 	callq	_ZdlPvm@PLT # Offset: 3920
.Ltmp2609:
    00000f55: 	movq	0xa8(%rsp), %rsi
    00000f5d: 	movq	0xa0(%rsp), %rdi
    00000f65: 	leaq	DATAat0x1d3e0(%rip), %rdx
    00000f6c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3948
    00000f71: 	callq	clock@PLT # Offset: 3953
    00000f76: 	movl	iterations(%rip), %ecx
    00000f7c: 	movq	%rax, start_time(%rip)
    00000f83: 	testl	%ecx, %ecx
    00000f85: 	jle	.Ltmp2610 # Offset: 3973
    00000f8b: 	movsd	DATAat0x1ded0(%rip), %xmm5
    00000f93: 	movq	0x10(%rsp), %rax
    00000f98: 	xorl	%r12d, %r12d
    00000f9b: 	leaq	0x32ed8(%rsp), %r14
    00000fa3: 	leaq	DATAat0x1d1d4(%rip), %r15
    00000faa: 	movsd	%xmm5, 0x38(%rsp)
    00000fb0: 	leaq	0x7cc8(%rax), %rbx
    00000fb7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2613:
    00000fc0: 	movq	%r14, %rax
    00000fc3: 	pxor	%xmm1, %xmm1
    00000fc7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2611:
    00000fd0: 	movdqu	(%rax), %xmm0
    00000fd4: 	movdqu	0x10(%rax), %xmm6
    00000fd9: 	addq	$0x40, %rax
    00000fdd: 	movdqu	-0x20(%rax), %xmm2
    00000fe2: 	movdqu	-0x10(%rax), %xmm7
    00000fe7: 	shufps	$0x88, %xmm6, %xmm0
    00000feb: 	shufps	$0x88, %xmm7, %xmm2
    00000fef: 	shufps	$0x88, %xmm2, %xmm0
    00000ff3: 	paddd	%xmm0, %xmm1
    00000ff7: 	cmpq	%rax, %rbx
    00000ffa: 	jne	.Ltmp2611 # Offset: 4090
    00000ffc: 	movdqa	%xmm1, %xmm0
    00001000: 	psrldq	$0x8, %xmm0
    00001005: 	paddd	%xmm0, %xmm1
    00001009: 	movsd	0x38(%rsp), %xmm0
    0000100f: 	mulsd	init_value(%rip), %xmm0
    00001017: 	cvttsd2si	%xmm0, %edx
    0000101b: 	movdqa	%xmm1, %xmm0
    0000101f: 	psrldq	$0x4, %xmm0
    00001024: 	paddd	%xmm0, %xmm1
    00001028: 	movd	%xmm1, %eax
    0000102c: 	addl	0x3ab98(%rsp), %eax
    00001033: 	addl	0x3aba8(%rsp), %eax
    0000103a: 	addl	0x3abb8(%rsp), %eax
    00001041: 	addl	0x3abc8(%rsp), %eax
    00001048: 	cmpl	%eax, %edx
    0000104a: 	je	.Ltmp2612 # Offset: 4170
    0000104c: 	movq	0x11b90(%rsp), %rdx
    00001054: 	movq	%r15, %rsi
    00001057: 	movl	$0x1, %edi
    0000105c: 	xorl	%eax, %eax
    0000105e: 	callq	__printf_chk@PLT # Offset: 4190
    00001063: 	movl	iterations(%rip), %ecx
.Ltmp2612:
    00001069: 	addl	$0x1, %r12d
    0000106d: 	cmpl	%ecx, %r12d
    00001070: 	jl	.Ltmp2613 # Offset: 4208
.Ltmp2610:
    00001076: 	callq	clock@PLT # Offset: 4214
    0000107b: 	movq	0xa0(%rsp), %rdi
    00001083: 	pxor	%xmm0, %xmm0
    00001087: 	movq	%rax, end_time(%rip)
    0000108e: 	subq	start_time(%rip), %rax
    00001095: 	cvtsi2sd	%rax, %xmm0
    0000109a: 	divsd	DATAat0x1dec0(%rip), %xmm0
    000010a2: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4258
    000010a7: 	movq	0x11b90(%rsp), %rdi
    000010af: 	cmpq	%r13, %rdi
    000010b2: 	je	.Ltmp2614 # Offset: 4274
    000010b4: 	movq	0x11ba0(%rsp), %rax
    000010bc: 	leaq	0x1(%rax), %rsi
    000010c0: 	callq	_ZdlPvm@PLT # Offset: 4288
.Ltmp2614:
    000010c5: 	movq	0xa8(%rsp), %rsi
    000010cd: 	movq	0xa0(%rsp), %rdi
    000010d5: 	leaq	DATAat0x1d408(%rip), %rdx
    000010dc: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4316
    000010e1: 	callq	clock@PLT # Offset: 4321
    000010e6: 	movl	iterations(%rip), %ecx
    000010ec: 	movq	%rax, start_time(%rip)
    000010f3: 	testl	%ecx, %ecx
    000010f5: 	jle	.Ltmp2615 # Offset: 4341
    000010fb: 	movsd	DATAat0x1ded0(%rip), %xmm6
    00001103: 	movq	0x20(%rsp), %rax
    00001108: 	xorl	%r12d, %r12d
    0000110b: 	leaq	0x3abd8(%rsp), %r14
    00001113: 	leaq	DATAat0x1d1d4(%rip), %r15
    0000111a: 	movsd	%xmm6, 0x38(%rsp)
    00001120: 	leaq	0x7cc8(%rax), %rbx
    00001127: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2618:
    00001130: 	movq	%r14, %rax
    00001133: 	pxor	%xmm1, %xmm1
    00001137: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2616:
    00001140: 	movdqu	(%rax), %xmm0
    00001144: 	movdqu	0x10(%rax), %xmm3
    00001149: 	addq	$0x40, %rax
    0000114d: 	movdqu	-0x20(%rax), %xmm2
    00001152: 	movdqu	-0x10(%rax), %xmm4
    00001157: 	shufps	$0x88, %xmm3, %xmm0
    0000115b: 	shufps	$0x88, %xmm4, %xmm2
    0000115f: 	shufps	$0x88, %xmm2, %xmm0
    00001163: 	paddd	%xmm0, %xmm1
    00001167: 	cmpq	%rax, %rbx
    0000116a: 	jne	.Ltmp2616 # Offset: 4458
    0000116c: 	movdqa	%xmm1, %xmm0
    00001170: 	psrldq	$0x8, %xmm0
    00001175: 	paddd	%xmm0, %xmm1
    00001179: 	movsd	0x38(%rsp), %xmm0
    0000117f: 	mulsd	init_value(%rip), %xmm0
    00001187: 	cvttsd2si	%xmm0, %edx
    0000118b: 	movdqa	%xmm1, %xmm0
    0000118f: 	psrldq	$0x4, %xmm0
    00001194: 	paddd	%xmm0, %xmm1
    00001198: 	movd	%xmm1, %eax
    0000119c: 	addl	0x42898(%rsp), %eax
    000011a3: 	addl	0x428a8(%rsp), %eax
    000011aa: 	addl	0x428b8(%rsp), %eax
    000011b1: 	addl	0x428c8(%rsp), %eax
    000011b8: 	cmpl	%eax, %edx
    000011ba: 	je	.Ltmp2617 # Offset: 4538
    000011bc: 	movq	0x11b90(%rsp), %rdx
    000011c4: 	movq	%r15, %rsi
    000011c7: 	movl	$0x1, %edi
    000011cc: 	xorl	%eax, %eax
    000011ce: 	callq	__printf_chk@PLT # Offset: 4558
    000011d3: 	movl	iterations(%rip), %ecx
.Ltmp2617:
    000011d9: 	addl	$0x1, %r12d
    000011dd: 	cmpl	%ecx, %r12d
    000011e0: 	jl	.Ltmp2618 # Offset: 4576
.Ltmp2615:
    000011e6: 	callq	clock@PLT # Offset: 4582
    000011eb: 	movq	0xa0(%rsp), %rdi
    000011f3: 	pxor	%xmm0, %xmm0
    000011f7: 	movq	%rax, end_time(%rip)
    000011fe: 	subq	start_time(%rip), %rax
    00001205: 	cvtsi2sd	%rax, %xmm0
    0000120a: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00001212: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4626
    00001217: 	movq	0x11b90(%rsp), %rdi
    0000121f: 	cmpq	%r13, %rdi
    00001222: 	je	.Ltmp2619 # Offset: 4642
    00001224: 	movq	0x11ba0(%rsp), %rax
    0000122c: 	leaq	0x1(%rax), %rsi
    00001230: 	callq	_ZdlPvm@PLT # Offset: 4656
.Ltmp2619:
    00001235: 	movq	0xa8(%rsp), %rsi
    0000123d: 	leaq	0x1d0(%rsp), %rdi
    00001245: 	leaq	DATAat0x1d207(%rip), %rdx
    0000124c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4684
    00001251: 	movl	iterations(%rip), %edx
    00001257: 	movl	$0x1, %r8d
    0000125d: 	movl	$0x1, %ecx
    00001262: 	movq	0x1d0(%rsp), %rdi
    0000126a: 	movl	$0x7d0, %esi
    0000126f: 	callq	_Z9summarizePKciiii # Offset: 4719
    00001274: 	movslq	iterations(%rip), %rax
    0000127b: 	leaq	0xbdd0(%rsp), %r9
    00001283: 	movabsq	$0x5851f42d4c957f2d, %rdi
    0000128d: 	movabsq	$0x14057b7ef767814f, %rsi
    00001297: 	movq	%r9, 0xb0(%rsp)
    0000129f: 	movq	%rax, %rdx
    000012a2: 	imulq	$0x51eb851f, %rax, %rax
    000012a9: 	sarl	$0x1f, %edx
    000012ac: 	sarq	$0x29, %rax
    000012b0: 	subl	%edx, %eax
    000012b2: 	movq	0x60(%rsp), %rdx
    000012b7: 	movl	%eax, iterations(%rip)
    000012bd: 	nopl	(%rax) # Size: 3
.Ltmp2620:
    000012c0: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000012c7: 	addq	$0x4, %rdx
    000012cb: 	imulq	%rdi, %rax
    000012cf: 	addq	%rsi, %rax
    000012d2: 	movq	%rax, %rcx
    000012d5: 	movq	%rax, %r8
    000012d8: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000012df: 	shrq	$0x14, %rcx
    000012e3: 	shlq	$0x17, %r8
    000012e7: 	xorq	%r8, %rcx
    000012ea: 	xorq	%rcx, %rax
    000012ed: 	sarq	$0x3, %rax
    000012f1: 	movl	%eax, -0x4(%rdx)
    000012f4: 	cmpq	%r9, %rdx
    000012f7: 	jne	.Ltmp2620 # Offset: 4855
    000012f9: 	movq	0x60(%rsp), %rsi
    000012fe: 	movl	$0x3e8, %ecx
    00001303: 	movq	0xb0(%rsp), %rdi
    0000130b: 	leaq	0x428d8(%rsp), %rax
    00001313: 	rep		movsq	(%rsi), %es:(%rdi)
    00001316: 	leaq	0xdd10(%rsp), %rdi
    0000131e: 	movq	0x60(%rsp), %rsi
    00001323: 	movl	$0x3e8, %ecx
    00001328: 	movq	%rdi, 0xc8(%rsp)
    00001330: 	movq	0x60(%rsp), %rdx
    00001335: 	rep		movsq	(%rsi), %es:(%rdi)
    00001338: 	leaq	0xfc50(%rsp), %rdi
    00001340: 	movq	0x60(%rsp), %rsi
    00001345: 	movl	$0x3e8, %ecx
    0000134a: 	movq	%rdi, 0xb8(%rsp)
    00001352: 	rep		movsq	(%rsi), %es:(%rdi)
    00001355: 	movq	0xa0(%rsp), %rdi
    0000135d: 	movq	0x60(%rsp), %rsi
    00001362: 	movl	$0x3e8, %ecx
    00001367: 	rep		movsq	(%rsi), %es:(%rdi)
    0000136a: 	movq	0x30(%rsp), %rdi
    0000136f: 	movq	%rdx, %rcx
    00001372: 	leaq	0x7d08(%rdi), %rsi
.Ltmp2621:
    00001379: 	movdqa	(%rdx), %xmm0
    0000137d: 	addq	$0x40, %rax
    00001381: 	addq	$0x10, %rdx
    00001385: 	pshufd	$0x55, %xmm0, %xmm1
    0000138a: 	movd	%xmm0, -0x40(%rax)
    0000138f: 	movd	%xmm1, -0x30(%rax)
    00001394: 	movdqa	%xmm0, %xmm1
    00001398: 	punpckhdq	%xmm0, %xmm1
    0000139c: 	pshufd	$0xff, %xmm0, %xmm0
    000013a1: 	movd	%xmm1, -0x20(%rax)
    000013a6: 	movd	%xmm0, -0x10(%rax)
    000013ab: 	cmpq	%rsi, %rax
    000013ae: 	jne	.Ltmp2621 # Offset: 5038
    000013b0: 	movq	0x60(%rsp), %rdx
    000013b5: 	leaq	0x4a5d8(%rsp), %rax
    000013bd: 	leaq	0x1f40(%rdx), %rsi
.Ltmp2622:
    000013c4: 	movdqa	(%rdx), %xmm0
    000013c8: 	addq	$0x10, %rdx
    000013cc: 	addq	$0x40, %rax
    000013d0: 	pshufd	$0x55, %xmm0, %xmm1
    000013d5: 	movd	%xmm0, -0x40(%rax)
    000013da: 	movd	%xmm1, -0x30(%rax)
    000013df: 	movdqa	%xmm0, %xmm1
    000013e3: 	punpckhdq	%xmm0, %xmm1
    000013e7: 	pshufd	$0xff, %xmm0, %xmm0
    000013ec: 	movd	%xmm1, -0x20(%rax)
    000013f1: 	movd	%xmm0, -0x10(%rax)
    000013f6: 	cmpq	%rdx, %rsi
    000013f9: 	jne	.Ltmp2622 # Offset: 5113
    000013fb: 	movq	0x60(%rsp), %rdx
    00001400: 	leaq	0x522d8(%rsp), %rax
.Ltmp2623:
    00001408: 	movdqa	(%rdx), %xmm0
    0000140c: 	addq	$0x10, %rdx
    00001410: 	addq	$0x40, %rax
    00001414: 	pshufd	$0x55, %xmm0, %xmm1
    00001419: 	movd	%xmm0, -0x40(%rax)
    0000141e: 	movd	%xmm1, -0x30(%rax)
    00001423: 	movdqa	%xmm0, %xmm1
    00001427: 	punpckhdq	%xmm0, %xmm1
    0000142b: 	pshufd	$0xff, %xmm0, %xmm0
    00001430: 	movd	%xmm1, -0x20(%rax)
    00001435: 	movd	%xmm0, -0x10(%rax)
    0000143a: 	cmpq	%rdx, %rsi
    0000143d: 	jne	.Ltmp2623 # Offset: 5181
    0000143f: 	movq	0x78(%rsp), %rdi
    00001444: 	movq	0x60(%rsp), %rdx
    00001449: 	leaq	0x59fd8(%rsp), %rax
    00001451: 	addq	$0x7d08, %rdi
.Ltmp2624:
    00001458: 	movdqa	(%rdx), %xmm0
    0000145c: 	addq	$0x40, %rax
    00001460: 	addq	$0x10, %rdx
    00001464: 	pshufd	$0x55, %xmm0, %xmm1
    00001469: 	movd	%xmm0, -0x40(%rax)
    0000146e: 	movd	%xmm1, -0x30(%rax)
    00001473: 	movdqa	%xmm0, %xmm1
    00001477: 	punpckhdq	%xmm0, %xmm1
    0000147b: 	pshufd	$0xff, %xmm0, %xmm0
    00001480: 	movd	%xmm1, -0x20(%rax)
    00001485: 	movd	%xmm0, -0x10(%rax)
    0000148a: 	cmpq	%rdi, %rax
    0000148d: 	jne	.Ltmp2624 # Offset: 5261
    0000148f: 	movq	0x60(%rsp), %rdx
    00001494: 	leaq	0x61cd8(%rsp), %rax
.Ltmp2625:
    0000149c: 	movdqa	(%rdx), %xmm0
    000014a0: 	addq	$0x10, %rdx
    000014a4: 	addq	$0x40, %rax
    000014a8: 	pshufd	$0x55, %xmm0, %xmm1
    000014ad: 	movd	%xmm0, -0x40(%rax)
    000014b2: 	movd	%xmm1, -0x30(%rax)
    000014b7: 	movdqa	%xmm0, %xmm1
    000014bb: 	punpckhdq	%xmm0, %xmm1
    000014bf: 	pshufd	$0xff, %xmm0, %xmm0
    000014c4: 	movd	%xmm1, -0x20(%rax)
    000014c9: 	movd	%xmm0, -0x10(%rax)
    000014ce: 	cmpq	%rdx, %rsi
    000014d1: 	jne	.Ltmp2625 # Offset: 5329
    000014d3: 	movq	0x70(%rsp), %rdi
    000014d8: 	leaq	0x699d8(%rsp), %rax
    000014e0: 	leaq	0x7d08(%rdi), %rdx
.Ltmp2626:
    000014e7: 	movdqa	(%rcx), %xmm0
    000014eb: 	addq	$0x40, %rax
    000014ef: 	addq	$0x10, %rcx
    000014f3: 	pshufd	$0x55, %xmm0, %xmm1
    000014f8: 	movd	%xmm0, -0x40(%rax)
    000014fd: 	movd	%xmm1, -0x30(%rax)
    00001502: 	movdqa	%xmm0, %xmm1
    00001506: 	punpckhdq	%xmm0, %xmm1
    0000150a: 	pshufd	$0xff, %xmm0, %xmm0
    0000150f: 	movd	%xmm1, -0x20(%rax)
    00001514: 	movd	%xmm0, -0x10(%rax)
    00001519: 	cmpq	%rdx, %rax
    0000151c: 	jne	.Ltmp2626 # Offset: 5404
    0000151e: 	leaq	0x230(%rsp), %rax
    00001526: 	movq	0xa8(%rsp), %rsi
    0000152e: 	leaq	DATAat0x1d430(%rip), %rdx
    00001535: 	movq	%rax, %rdi
    00001538: 	movq	%rax, 0x38(%rsp)
    0000153d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5437
    00001542: 	callq	clock@PLT # Offset: 5442
    00001547: 	xorl	%ebx, %ebx
    00001549: 	leaq	0x254(%rsp), %r12
    00001551: 	movq	%rax, start_time(%rip)
    00001558: 	movl	iterations(%rip), %eax
    0000155e: 	testl	%eax, %eax
    00001560: 	jle	.Ltmp2627 # Offset: 5472
    00001562: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2631:
    00001568: 	movq	0x58(%rsp), %r8
    0000156d: 	movq	0x58(%rsp), %rdi
    00001572: 	movl	$0x3e8, %ecx
    00001577: 	movq	0x60(%rsp), %rsi
    0000157c: 	rep		movsq	(%rsi), %es:(%rdi)
    0000157f: 	movq	%r12, %rdi
    00001582: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2630:
    00001588: 	movl	(%rdi), %esi
    0000158a: 	movq	%rdi, %rax
    0000158d: 	nopl	(%rax) # Size: 3
.Ltmp2629:
    00001590: 	movq	%rax, %rdx
    00001593: 	leaq	-0x4(%rax), %rax
    00001597: 	movl	-0x4(%rdx), %ecx
    0000159a: 	cmpl	%ecx, %esi
    0000159c: 	jge	.Ltmp2628 # Offset: 5532
    0000159e: 	movl	%ecx, 0x4(%rax)
    000015a1: 	cmpq	%r8, %rax
    000015a4: 	jne	.Ltmp2629 # Offset: 5540
    000015a6: 	movq	%r8, %rdx
.Ltmp2628:
    000015a9: 	addq	$0x4, %rdi
    000015ad: 	movl	%esi, (%rdx)
    000015af: 	cmpq	%rbp, %rdi
    000015b2: 	jne	.Ltmp2630 # Offset: 5554
    000015b4: 	movq	0x38(%rsp), %rdx
    000015b9: 	movq	0x58(%rsp), %rdi
    000015be: 	movq	%rbp, %rsi
    000015c1: 	callq	_Z13verify_sortedIPiEvT_S1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5569
    000015c6: 	addl	$0x1, %ebx
    000015c9: 	cmpl	iterations(%rip), %ebx
    000015cf: 	jl	.Ltmp2631 # Offset: 5583
.Ltmp2627:
    000015d1: 	callq	clock@PLT # Offset: 5585
    000015d6: 	movq	0x38(%rsp), %rdi
    000015db: 	pxor	%xmm0, %xmm0
    000015df: 	movq	%rax, end_time(%rip)
    000015e6: 	subq	start_time(%rip), %rax
    000015ed: 	cvtsi2sd	%rax, %xmm0
    000015f2: 	divsd	DATAat0x1dec0(%rip), %xmm0
    000015fa: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5626
    000015ff: 	movq	0x230(%rsp), %rdi
    00001607: 	leaq	0x240(%rsp), %rax
    0000160f: 	movq	%rax, 0x98(%rsp)
    00001617: 	cmpq	%rax, %rdi
    0000161a: 	je	.Ltmp2632 # Offset: 5658
    0000161c: 	movq	0x240(%rsp), %rax
    00001624: 	leaq	0x1(%rax), %rsi
    00001628: 	callq	_ZdlPvm@PLT # Offset: 5672
.Ltmp2632:
    0000162d: 	movq	0xa8(%rsp), %rsi
    00001635: 	movq	0x38(%rsp), %rdi
    0000163a: 	leaq	DATAat0x1d450(%rip), %rdx
    00001641: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5697
    00001646: 	callq	clock@PLT # Offset: 5702
    0000164b: 	movl	iterations(%rip), %r15d
    00001652: 	xorl	%ebx, %ebx
    00001654: 	leaq	0x2194(%rsp), %r12
    0000165c: 	movq	%rax, start_time(%rip)
    00001663: 	testl	%r15d, %r15d
    00001666: 	jle	.Ltmp2633 # Offset: 5734
    00001668: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2637:
    00001670: 	movq	0xb0(%rsp), %rsi
    00001678: 	movl	$0x3e8, %ecx
    0000167d: 	movq	%rbp, %rdi
    00001680: 	rep		movsq	(%rsi), %es:(%rdi)
    00001683: 	movq	0x48(%rsp), %rdi
    00001688: 	movq	%r12, %rsi
    0000168b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2636:
    00001690: 	movl	(%rsi), %ecx
    00001692: 	movq	%rsi, %rdx
    00001695: 	nopl	(%rax) # Size: 3
.Ltmp2635:
    00001698: 	movq	%rdx, %rax
    0000169b: 	leaq	-0x4(%rdx), %rdx
    0000169f: 	cmpl	-0x4(%rax), %ecx
    000016a2: 	jge	.Ltmp2634 # Offset: 5794
    000016a4: 	movl	-0x4(%rax), %eax
    000016a7: 	movl	%eax, 0x4(%rdx)
    000016aa: 	cmpq	%rbp, %rdx
    000016ad: 	jne	.Ltmp2635 # Offset: 5805
    000016af: 	movq	%rbp, %rax
.Ltmp2634:
    000016b2: 	addq	$0x4, %rsi
    000016b6: 	movl	%ecx, (%rax)
    000016b8: 	cmpq	%rdi, %rsi
    000016bb: 	jne	.Ltmp2636 # Offset: 5819
    000016bd: 	movq	0x38(%rsp), %rdx
    000016c2: 	movq	0x48(%rsp), %rsi
    000016c7: 	movq	%rbp, %rdi
    000016ca: 	callq	_Z13verify_sortedIP9TypeClassIiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5834
    000016cf: 	addl	$0x1, %ebx
    000016d2: 	cmpl	iterations(%rip), %ebx
    000016d8: 	jl	.Ltmp2637 # Offset: 5848
.Ltmp2633:
    000016da: 	callq	clock@PLT # Offset: 5850
    000016df: 	movq	0x38(%rsp), %rdi
    000016e4: 	pxor	%xmm0, %xmm0
    000016e8: 	movq	%rax, end_time(%rip)
    000016ef: 	subq	start_time(%rip), %rax
    000016f6: 	cvtsi2sd	%rax, %xmm0
    000016fb: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00001703: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5891
    00001708: 	movq	0x230(%rsp), %rdi
    00001710: 	cmpq	0x98(%rsp), %rdi
    00001718: 	je	.Ltmp2638 # Offset: 5912
    0000171a: 	movq	0x240(%rsp), %rax
    00001722: 	leaq	0x1(%rax), %rsi
    00001726: 	callq	_ZdlPvm@PLT # Offset: 5926
.Ltmp2638:
    0000172b: 	movq	0xa8(%rsp), %rsi
    00001733: 	movq	0x38(%rsp), %rdi
    00001738: 	leaq	DATAat0x1d480(%rip), %rdx
    0000173f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5951
    00001744: 	callq	clock@PLT # Offset: 5956
    00001749: 	movl	iterations(%rip), %r14d
    00001750: 	xorl	%ebx, %ebx
    00001752: 	leaq	0x40d4(%rsp), %r12
    0000175a: 	movq	%rax, start_time(%rip)
    00001761: 	testl	%r14d, %r14d
    00001764: 	jle	.Ltmp2639 # Offset: 5988
    00001766: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2643:
    00001770: 	movq	0x48(%rsp), %rdi
    00001775: 	movl	$0x3e8, %ecx
    0000177a: 	movq	0x40(%rsp), %r8
    0000177f: 	movq	0xc8(%rsp), %rsi
    00001787: 	rep		movsq	(%rsi), %es:(%rdi)
    0000178a: 	movq	0x48(%rsp), %rdi
    0000178f: 	movq	%r12, %rsi
    00001792: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2642:
    00001798: 	movl	(%rsi), %ecx
    0000179a: 	movq	%rsi, %rdx
    0000179d: 	nopl	(%rax) # Size: 3
.Ltmp2641:
    000017a0: 	movq	%rdx, %rax
    000017a3: 	leaq	-0x4(%rdx), %rdx
    000017a7: 	cmpl	-0x4(%rax), %ecx
    000017aa: 	jge	.Ltmp2640 # Offset: 6058
    000017ac: 	movl	-0x4(%rax), %eax
    000017af: 	movl	%eax, 0x4(%rdx)
    000017b2: 	cmpq	%rdi, %rdx
    000017b5: 	jne	.Ltmp2641 # Offset: 6069
    000017b7: 	movq	%rdi, %rax
.Ltmp2640:
    000017ba: 	addq	$0x4, %rsi
    000017be: 	movl	%ecx, (%rax)
    000017c0: 	cmpq	%r8, %rsi
    000017c3: 	jne	.Ltmp2642 # Offset: 6083
    000017c5: 	movq	0x38(%rsp), %rdx
    000017ca: 	movq	0x40(%rsp), %rsi
    000017cf: 	movq	0x48(%rsp), %rdi
    000017d4: 	callq	_Z13verify_sortedIP12TypeSubClassIiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6100
    000017d9: 	addl	$0x1, %ebx
    000017dc: 	cmpl	iterations(%rip), %ebx
    000017e2: 	jl	.Ltmp2643 # Offset: 6114
.Ltmp2639:
    000017e4: 	callq	clock@PLT # Offset: 6116
    000017e9: 	movq	0x38(%rsp), %rdi
    000017ee: 	pxor	%xmm0, %xmm0
    000017f2: 	movq	%rax, end_time(%rip)
    000017f9: 	subq	start_time(%rip), %rax
    00001800: 	cvtsi2sd	%rax, %xmm0
    00001805: 	divsd	DATAat0x1dec0(%rip), %xmm0
    0000180d: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6157
    00001812: 	movq	0x230(%rsp), %rdi
    0000181a: 	cmpq	0x98(%rsp), %rdi
    00001822: 	je	.Ltmp2644 # Offset: 6178
    00001824: 	movq	0x240(%rsp), %rax
    0000182c: 	leaq	0x1(%rax), %rsi
    00001830: 	callq	_ZdlPvm@PLT # Offset: 6192
.Ltmp2644:
    00001835: 	movq	0xa8(%rsp), %rsi
    0000183d: 	movq	0x38(%rsp), %rdi
    00001842: 	leaq	DATAat0x1d4a8(%rip), %rdx
    00001849: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6217
    0000184e: 	callq	clock@PLT # Offset: 6222
    00001853: 	movl	iterations(%rip), %r13d
    0000185a: 	xorl	%ebx, %ebx
    0000185c: 	leaq	0x6014(%rsp), %r12
    00001864: 	movq	%rax, start_time(%rip)
    0000186b: 	testl	%r13d, %r13d
    0000186e: 	jle	.Ltmp2645 # Offset: 6254
.Ltmp2649:
    00001870: 	movq	0x40(%rsp), %rdi
    00001875: 	movl	$0x3e8, %ecx
    0000187a: 	movq	0x50(%rsp), %r8
    0000187f: 	movq	0xb8(%rsp), %rsi
    00001887: 	rep		movsq	(%rsi), %es:(%rdi)
    0000188a: 	movq	0x40(%rsp), %rdi
    0000188f: 	movq	%r12, %rsi
    00001892: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2648:
    00001898: 	movl	(%rsi), %ecx
    0000189a: 	movq	%rsi, %rdx
    0000189d: 	nopl	(%rax) # Size: 3
.Ltmp2647:
    000018a0: 	movq	%rdx, %rax
    000018a3: 	leaq	-0x4(%rdx), %rdx
    000018a7: 	cmpl	-0x4(%rax), %ecx
    000018aa: 	jge	.Ltmp2646 # Offset: 6314
    000018ac: 	movl	-0x4(%rax), %eax
    000018af: 	movl	%eax, 0x4(%rdx)
    000018b2: 	cmpq	%rdi, %rdx
    000018b5: 	jne	.Ltmp2647 # Offset: 6325
    000018b7: 	movq	%rdi, %rax
.Ltmp2646:
    000018ba: 	addq	$0x4, %rsi
    000018be: 	movl	%ecx, (%rax)
    000018c0: 	cmpq	%r8, %rsi
    000018c3: 	jne	.Ltmp2648 # Offset: 6339
    000018c5: 	movq	0x38(%rsp), %rdx
    000018ca: 	movq	0x50(%rsp), %rsi
    000018cf: 	movq	0x40(%rsp), %rdi
    000018d4: 	callq	_Z13verify_sortedIP13TypeSub2ClassIiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6356
    000018d9: 	addl	$0x1, %ebx
    000018dc: 	cmpl	iterations(%rip), %ebx
    000018e2: 	jl	.Ltmp2649 # Offset: 6370
.Ltmp2645:
    000018e4: 	callq	clock@PLT # Offset: 6372
    000018e9: 	movq	0x38(%rsp), %rdi
    000018ee: 	pxor	%xmm0, %xmm0
    000018f2: 	movq	%rax, end_time(%rip)
    000018f9: 	subq	start_time(%rip), %rax
    00001900: 	cvtsi2sd	%rax, %xmm0
    00001905: 	divsd	DATAat0x1dec0(%rip), %xmm0
    0000190d: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6413
    00001912: 	movq	0x230(%rsp), %rdi
    0000191a: 	cmpq	0x98(%rsp), %rdi
    00001922: 	je	.Ltmp2650 # Offset: 6434
    00001924: 	movq	0x240(%rsp), %rax
    0000192c: 	leaq	0x1(%rax), %rsi
    00001930: 	callq	_ZdlPvm@PLT # Offset: 6448
.Ltmp2650:
    00001935: 	movq	0xa8(%rsp), %rsi
    0000193d: 	movq	0x38(%rsp), %rdi
    00001942: 	leaq	DATAat0x1d4d0(%rip), %rdx
    00001949: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6473
    0000194e: 	callq	clock@PLT # Offset: 6478
    00001953: 	movl	iterations(%rip), %r8d
    0000195a: 	xorl	%ebx, %ebx
    0000195c: 	leaq	0x7f54(%rsp), %r12
    00001964: 	movq	%rax, start_time(%rip)
    0000196b: 	leaq	DATAat0x1d1cf(%rip), %r13
    00001972: 	testl	%r8d, %r8d
    00001975: 	jle	.Ltmp2651 # Offset: 6517
    0000197b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2657:
    00001980: 	movq	0x50(%rsp), %rdi
    00001985: 	movl	$0x3e8, %ecx
    0000198a: 	movq	0x60(%rsp), %r9
    0000198f: 	movq	0xa0(%rsp), %rsi
    00001997: 	rep		movsq	(%rsi), %es:(%rdi)
    0000199a: 	movq	0x50(%rsp), %rdi
    0000199f: 	movq	%r12, %rsi
    000019a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2654:
    000019a8: 	movl	(%rsi), %ecx
    000019aa: 	movq	%rsi, %rdx
    000019ad: 	nopl	(%rax) # Size: 3
.Ltmp2653:
    000019b0: 	movq	%rdx, %rax
    000019b3: 	leaq	-0x4(%rdx), %rdx
    000019b7: 	cmpl	-0x4(%rax), %ecx
    000019ba: 	jge	.Ltmp2652 # Offset: 6586
    000019bc: 	movl	-0x4(%rax), %eax
    000019bf: 	movl	%eax, 0x4(%rdx)
    000019c2: 	cmpq	%rdi, %rdx
    000019c5: 	jne	.Ltmp2653 # Offset: 6597
    000019c7: 	movq	%rdi, %rax
.Ltmp2652:
    000019ca: 	addq	$0x4, %rsi
    000019ce: 	movl	%ecx, (%rax)
    000019d0: 	cmpq	%r9, %rsi
    000019d3: 	jne	.Ltmp2654 # Offset: 6611
    000019d5: 	movl	0x7f50(%rsp), %edx
    000019dc: 	movq	0x60(%rsp), %rsi
    000019e1: 	movq	%r12, %rax
    000019e4: 	nopl	(%rax) # Size: 4
.Ltmp2656:
    000019e8: 	addq	$0x4, %rax
    000019ec: 	movl	%edx, %ecx
    000019ee: 	movl	-0x4(%rax), %edx
    000019f1: 	cmpl	%edx, %ecx
    000019f3: 	jg	.Ltmp2655 # Offset: 6643
    000019f9: 	cmpq	%rsi, %rax
    000019fc: 	jne	.Ltmp2656 # Offset: 6652
    000019fe: 	addl	$0x1, %ebx
    00001a01: 	cmpl	%r8d, %ebx
    00001a04: 	jl	.Ltmp2657 # Offset: 6660
.Ltmp2651:
    00001a0a: 	callq	clock@PLT # Offset: 6666
    00001a0f: 	movq	0x38(%rsp), %rdi
    00001a14: 	pxor	%xmm0, %xmm0
    00001a18: 	movq	%rax, end_time(%rip)
    00001a1f: 	subq	start_time(%rip), %rax
    00001a26: 	cvtsi2sd	%rax, %xmm0
    00001a2b: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00001a33: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6707
    00001a38: 	movq	0x230(%rsp), %rdi
    00001a40: 	cmpq	0x98(%rsp), %rdi
    00001a48: 	je	.Ltmp2658 # Offset: 6728
    00001a4a: 	movq	0x240(%rsp), %rax
    00001a52: 	leaq	0x1(%rax), %rsi
    00001a56: 	callq	_ZdlPvm@PLT # Offset: 6742
.Ltmp2658:
    00001a5b: 	movq	0xa8(%rsp), %rsi
    00001a63: 	movq	0x38(%rsp), %rdi
    00001a68: 	leaq	DATAat0x1d4f8(%rip), %rdx
    00001a6f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6767
    00001a74: 	callq	clock@PLT # Offset: 6772
    00001a79: 	movl	iterations(%rip), %r12d
    00001a80: 	movl	$0x0, 0xd8(%rsp)
    00001a8b: 	leaq	_ZN16TypeVirtualClassIiEcviEv(%rip), %r14
    00001a92: 	movq	%rax, start_time(%rip)
    00001a99: 	leaq	0x13ae0(%rsp), %rax
    00001aa1: 	movq	%rax, 0xd0(%rsp)
    00001aa9: 	testl	%r12d, %r12d
    00001aac: 	jle	.Ltmp2659 # Offset: 6828
    00001ab2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2667:
    00001ab8: 	movq	0x28(%rsp), %rdx
    00001abd: 	movq	0x30(%rsp), %rax
    00001ac2: 	movq	0x88(%rsp), %rsi
    00001aca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2660:
    00001ad0: 	movl	0x8(%rax), %ecx
    00001ad3: 	addq	$0x10, %rax
    00001ad7: 	addq	$0x10, %rdx
    00001adb: 	movl	%ecx, -0x8(%rdx)
    00001ade: 	cmpq	%rsi, %rax
    00001ae1: 	jne	.Ltmp2660 # Offset: 6881
    00001ae3: 	movq	0xd0(%rsp), %r15
    00001aeb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2666:
    00001af0: 	movl	0x8(%r15), %r12d
    00001af4: 	movq	%r15, %rbx
    00001af7: 	jmp	.Ltmp2661 # Offset: 6903
    00001af9: 	nopl	(%rax) # Size: 7
.Ltmp2664:
    00001b00: 	movl	0x8(%rbx), %eax
    00001b03: 	cmpl	%eax, %r12d
    00001b06: 	jge	.Ltmp2662 # Offset: 6918
.Ltmp2665:
    00001b08: 	movl	0x8(%rbx), %eax
    00001b0b: 	movl	%eax, 0x18(%rbx)
    00001b0e: 	cmpq	0x28(%rsp), %rbx
    00001b13: 	je	.Ltmp2663 # Offset: 6931
.Ltmp2661:
    00001b19: 	movq	%rbx, %r13
    00001b1c: 	movq	-0x10(%rbx), %rax
    00001b20: 	subq	$0x10, %rbx
    00001b24: 	movq	(%rax), %rax
    00001b27: 	cmpq	%r14, %rax
    00001b2a: 	je	.Ltmp2664 # Offset: 6954
    00001b2c: 	movq	%rbx, %rdi
    00001b2f: 	callq	*%rax # Offset: 6959
    00001b31: 	cmpl	%eax, %r12d
    00001b34: 	jl	.Ltmp2665 # Offset: 6964
.Ltmp2662:
    00001b36: 	movl	%r12d, 0x8(%r13)
    00001b3a: 	addq	$0x10, %r15
    00001b3e: 	cmpq	0x18(%rsp), %r15
    00001b43: 	jne	.Ltmp2666 # Offset: 6979
.Ltmp2895:
    00001b45: 	movq	0x38(%rsp), %rdx
    00001b4a: 	movq	0x18(%rsp), %rsi
    00001b4f: 	movq	0x28(%rsp), %rdi
    00001b54: 	callq	_Z13verify_sortedIP16TypeVirtualClassIiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6996
    00001b59: 	addl	$0x1, 0xd8(%rsp)
    00001b61: 	movl	0xd8(%rsp), %eax
    00001b68: 	cmpl	iterations(%rip), %eax
    00001b6e: 	jl	.Ltmp2667 # Offset: 7022
.Ltmp2659:
    00001b74: 	callq	clock@PLT # Offset: 7028
    00001b79: 	movq	0x38(%rsp), %rdi
    00001b7e: 	pxor	%xmm0, %xmm0
    00001b82: 	movq	%rax, end_time(%rip)
    00001b89: 	subq	start_time(%rip), %rax
    00001b90: 	cvtsi2sd	%rax, %xmm0
    00001b95: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00001b9d: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7069
    00001ba2: 	movq	0x230(%rsp), %rdi
    00001baa: 	cmpq	0x98(%rsp), %rdi
    00001bb2: 	je	.Ltmp2668 # Offset: 7090
    00001bb4: 	movq	0x240(%rsp), %rax
    00001bbc: 	leaq	0x1(%rax), %rsi
    00001bc0: 	callq	_ZdlPvm@PLT # Offset: 7104
.Ltmp2668:
    00001bc5: 	movq	0xa8(%rsp), %rsi
    00001bcd: 	movq	0x38(%rsp), %rdi
    00001bd2: 	leaq	DATAat0x1d528(%rip), %rdx
    00001bd9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7129
    00001bde: 	callq	clock@PLT # Offset: 7134
    00001be3: 	movl	iterations(%rip), %ebx
    00001be9: 	movl	$0x0, 0xd8(%rsp)
    00001bf4: 	leaq	_ZN19TypeVirtualSubClassIiEcviEv(%rip), %r12
    00001bfb: 	movq	%rax, start_time(%rip)
    00001c02: 	leaq	0x1b7e0(%rsp), %rax
    00001c0a: 	movq	%rax, 0xd0(%rsp)
    00001c12: 	testl	%ebx, %ebx
    00001c14: 	jle	.Ltmp2669 # Offset: 7188
    00001c1a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2684:
    00001c20: 	movq	0x18(%rsp), %rdx
    00001c25: 	movq	0x88(%rsp), %rax
    00001c2d: 	movq	0x80(%rsp), %rsi
    00001c35: 	nopl	(%rax) # Size: 3
.Ltmp2670:
    00001c38: 	movl	0x8(%rax), %ecx
    00001c3b: 	addq	$0x10, %rax
    00001c3f: 	addq	$0x10, %rdx
    00001c43: 	movl	%ecx, -0x8(%rdx)
    00001c46: 	cmpq	%rsi, %rax
    00001c49: 	jne	.Ltmp2670 # Offset: 7241
    00001c4b: 	movq	0xd0(%rsp), %r15
    00001c53: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2676:
    00001c58: 	movl	0x8(%r15), %r13d
    00001c5c: 	movq	%r15, %rbx
    00001c5f: 	jmp	.Ltmp2671 # Offset: 7263
    00001c61: 	nopl	(%rax) # Size: 7
.Ltmp2674:
    00001c68: 	movl	0x8(%rbx), %eax
    00001c6b: 	cmpl	%eax, %r13d
    00001c6e: 	jge	.Ltmp2672 # Offset: 7278
.Ltmp2675:
    00001c70: 	movl	0x8(%rbx), %eax
    00001c73: 	movl	%eax, 0x18(%rbx)
    00001c76: 	cmpq	0x18(%rsp), %rbx
    00001c7b: 	je	.Ltmp2673 # Offset: 7291
.Ltmp2671:
    00001c81: 	movq	%rbx, %r14
    00001c84: 	movq	-0x10(%rbx), %rax
    00001c88: 	subq	$0x10, %rbx
    00001c8c: 	movq	(%rax), %rax
    00001c8f: 	cmpq	%r12, %rax
    00001c92: 	je	.Ltmp2674 # Offset: 7314
    00001c94: 	movq	%rbx, %rdi
    00001c97: 	callq	*%rax # Offset: 7319
    00001c99: 	cmpl	%eax, %r13d
    00001c9c: 	jl	.Ltmp2675 # Offset: 7324
.Ltmp2672:
    00001c9e: 	movl	%r13d, 0x8(%r14)
    00001ca2: 	addq	$0x10, %r15
    00001ca6: 	cmpq	(%rsp), %r15
    00001caa: 	jne	.Ltmp2676 # Offset: 7338
.Ltmp2894:
    00001cac: 	movq	0xd0(%rsp), %rbx
    00001cb4: 	jmp	.Ltmp2677 # Offset: 7348
    00001cb6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2681:
    00001cc0: 	movq	-0x20(%rbx), %rax
    00001cc4: 	movl	-0x8(%rbx), %r13d
    00001cc8: 	movq	(%rax), %rax
    00001ccb: 	cmpq	%r12, %rax
    00001cce: 	jne	.Ltmp2678 # Offset: 7374
.Ltmp2682:
    00001cd0: 	movl	-0x18(%rbx), %eax
    00001cd3: 	cmpl	%eax, %r13d
    00001cd6: 	jl	.Ltmp2679 # Offset: 7382
.Ltmp2683:
    00001cd8: 	cmpq	(%rsp), %rbx
    00001cdc: 	je	.Ltmp2680 # Offset: 7388
.Ltmp2677:
    00001cde: 	leaq	-0x10(%rbx), %r14
    00001ce2: 	movq	%rbx, %rdi
    00001ce5: 	movq	(%rbx), %rax
    00001ce8: 	addq	$0x10, %rbx
    00001cec: 	movq	(%rax), %rax
    00001cef: 	cmpq	%r12, %rax
    00001cf2: 	je	.Ltmp2681 # Offset: 7410
    00001cf4: 	callq	*%rax # Offset: 7412
    00001cf6: 	movl	%eax, %r13d
    00001cf9: 	movq	-0x20(%rbx), %rax
    00001cfd: 	movq	(%rax), %rax
    00001d00: 	cmpq	%r12, %rax
    00001d03: 	je	.Ltmp2682 # Offset: 7427
    00001d05: 	nopl	(%rax) # Size: 3
.Ltmp2678:
    00001d08: 	movq	%r14, %rdi
    00001d0b: 	callq	*%rax # Offset: 7435
    00001d0d: 	cmpl	%eax, %r13d
    00001d10: 	jge	.Ltmp2683 # Offset: 7440
.Ltmp2679:
    00001d12: 	movq	0x230(%rsp), %rdx
    00001d1a: 	leaq	DATAat0x1d1cf(%rip), %rsi
    00001d21: 	movl	$0x1, %edi
    00001d26: 	xorl	%eax, %eax
    00001d28: 	callq	__printf_chk@PLT # Offset: 7464
.Ltmp2680:
    00001d2d: 	addl	$0x1, 0xd8(%rsp)
    00001d35: 	movl	0xd8(%rsp), %eax
    00001d3c: 	cmpl	iterations(%rip), %eax
    00001d42: 	jl	.Ltmp2684 # Offset: 7490
.Ltmp2669:
    00001d48: 	callq	clock@PLT # Offset: 7496
    00001d4d: 	movq	0x38(%rsp), %rdi
    00001d52: 	pxor	%xmm0, %xmm0
    00001d56: 	movq	%rax, end_time(%rip)
    00001d5d: 	subq	start_time(%rip), %rax
    00001d64: 	cvtsi2sd	%rax, %xmm0
    00001d69: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00001d71: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7537
    00001d76: 	movq	0x230(%rsp), %rdi
    00001d7e: 	cmpq	0x98(%rsp), %rdi
    00001d86: 	je	.Ltmp2685 # Offset: 7558
    00001d88: 	movq	0x240(%rsp), %rax
    00001d90: 	leaq	0x1(%rax), %rsi
    00001d94: 	callq	_ZdlPvm@PLT # Offset: 7572
.Ltmp2685:
    00001d99: 	movq	0xa8(%rsp), %rsi
    00001da1: 	movq	0x38(%rsp), %rdi
    00001da6: 	leaq	DATAat0x1d558(%rip), %rdx
    00001dad: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7597
    00001db2: 	callq	clock@PLT # Offset: 7602
    00001db7: 	movl	iterations(%rip), %r11d
    00001dbe: 	movl	$0x0, 0xd8(%rsp)
    00001dc9: 	leaq	_ZN14WorkerSubClassIiEcviEv(%rip), %r14
    00001dd0: 	movq	%rax, start_time(%rip)
    00001dd7: 	leaq	0x234e0(%rsp), %rax
    00001ddf: 	movq	%rax, 0xd0(%rsp)
    00001de7: 	testl	%r11d, %r11d
    00001dea: 	jle	.Ltmp2686 # Offset: 7658
.Ltmp2694:
    00001df0: 	movq	(%rsp), %rdx
    00001df4: 	movq	0x80(%rsp), %rax
    00001dfc: 	movq	0x78(%rsp), %rsi
    00001e01: 	nopl	(%rax) # Size: 7
.Ltmp2687:
    00001e08: 	movl	0x8(%rax), %ecx
    00001e0b: 	addq	$0x10, %rax
    00001e0f: 	addq	$0x10, %rdx
    00001e13: 	movl	%ecx, -0x8(%rdx)
    00001e16: 	cmpq	%rsi, %rax
    00001e19: 	jne	.Ltmp2687 # Offset: 7705
    00001e1b: 	movq	0xd0(%rsp), %r15
    00001e23: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2693:
    00001e28: 	movl	0x8(%r15), %r12d
    00001e2c: 	movq	%r15, %rbx
    00001e2f: 	jmp	.Ltmp2688 # Offset: 7727
    00001e31: 	nopl	(%rax) # Size: 7
.Ltmp2691:
    00001e38: 	movl	0x8(%rbx), %eax
    00001e3b: 	cmpl	%eax, %r12d
    00001e3e: 	jge	.Ltmp2689 # Offset: 7742
.Ltmp2692:
    00001e40: 	movl	0x8(%rbx), %eax
    00001e43: 	movl	%eax, 0x18(%rbx)
    00001e46: 	cmpq	(%rsp), %rbx
    00001e4a: 	je	.Ltmp2690 # Offset: 7754
.Ltmp2688:
    00001e50: 	movq	%rbx, %r13
    00001e53: 	movq	-0x10(%rbx), %rax
    00001e57: 	subq	$0x10, %rbx
    00001e5b: 	movq	(%rax), %rax
    00001e5e: 	cmpq	%r14, %rax
    00001e61: 	je	.Ltmp2691 # Offset: 7777
    00001e63: 	movq	%rbx, %rdi
    00001e66: 	callq	*%rax # Offset: 7782
    00001e68: 	cmpl	%eax, %r12d
    00001e6b: 	jl	.Ltmp2692 # Offset: 7787
.Ltmp2689:
    00001e6d: 	movl	%r12d, 0x8(%r13)
    00001e71: 	addq	$0x10, %r15
    00001e75: 	cmpq	0x8(%rsp), %r15
    00001e7a: 	jne	.Ltmp2693 # Offset: 7802
.Ltmp2897:
    00001e7c: 	movq	0x38(%rsp), %rdx
    00001e81: 	movq	0x8(%rsp), %rsi
    00001e86: 	movq	(%rsp), %rdi
    00001e8a: 	callq	_Z13verify_sortedIP14WorkerSubClassIiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7818
    00001e8f: 	addl	$0x1, 0xd8(%rsp)
    00001e97: 	movl	0xd8(%rsp), %eax
    00001e9e: 	cmpl	iterations(%rip), %eax
    00001ea4: 	jl	.Ltmp2694 # Offset: 7844
.Ltmp2686:
    00001eaa: 	callq	clock@PLT # Offset: 7850
    00001eaf: 	movq	0x38(%rsp), %rdi
    00001eb4: 	pxor	%xmm0, %xmm0
    00001eb8: 	movq	%rax, end_time(%rip)
    00001ebf: 	subq	start_time(%rip), %rax
    00001ec6: 	cvtsi2sd	%rax, %xmm0
    00001ecb: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00001ed3: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7891
    00001ed8: 	movq	0x230(%rsp), %rdi
    00001ee0: 	cmpq	0x98(%rsp), %rdi
    00001ee8: 	je	.Ltmp2695 # Offset: 7912
    00001eea: 	movq	0x240(%rsp), %rax
    00001ef2: 	leaq	0x1(%rax), %rsi
    00001ef6: 	callq	_ZdlPvm@PLT # Offset: 7926
.Ltmp2695:
    00001efb: 	movq	0xa8(%rsp), %rsi
    00001f03: 	movq	0x38(%rsp), %rdi
    00001f08: 	leaq	DATAat0x1d580(%rip), %rdx
    00001f0f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7951
    00001f14: 	callq	clock@PLT # Offset: 7956
    00001f19: 	movl	iterations(%rip), %r10d
    00001f20: 	movl	$0x0, 0xd8(%rsp)
    00001f2b: 	leaq	_ZN18WorkerDeepSubClassIiEcviEv(%rip), %r12
    00001f32: 	movq	%rax, start_time(%rip)
    00001f39: 	leaq	0x2b1e0(%rsp), %rax
    00001f41: 	movq	%rax, 0xd0(%rsp)
    00001f49: 	testl	%r10d, %r10d
    00001f4c: 	jle	.Ltmp2696 # Offset: 8012
    00001f52: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2711:
    00001f58: 	movq	0x8(%rsp), %rdx
    00001f5d: 	movq	0x78(%rsp), %rax
    00001f62: 	movq	0x90(%rsp), %rsi
    00001f6a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2697:
    00001f70: 	movl	0x8(%rax), %ecx
    00001f73: 	addq	$0x10, %rax
    00001f77: 	addq	$0x10, %rdx
    00001f7b: 	movl	%ecx, -0x8(%rdx)
    00001f7e: 	cmpq	%rsi, %rax
    00001f81: 	jne	.Ltmp2697 # Offset: 8065
    00001f83: 	movq	0xd0(%rsp), %r15
    00001f8b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2703:
    00001f90: 	movl	0x8(%r15), %r13d
    00001f94: 	movq	%r15, %rbx
    00001f97: 	jmp	.Ltmp2698 # Offset: 8087
    00001f99: 	nopl	(%rax) # Size: 7
.Ltmp2701:
    00001fa0: 	movl	0x8(%rbx), %eax
    00001fa3: 	cmpl	%eax, %r13d
    00001fa6: 	jge	.Ltmp2699 # Offset: 8102
.Ltmp2702:
    00001fa8: 	movl	0x8(%rbx), %eax
    00001fab: 	movl	%eax, 0x18(%rbx)
    00001fae: 	cmpq	0x8(%rsp), %rbx
    00001fb3: 	je	.Ltmp2700 # Offset: 8115
.Ltmp2698:
    00001fb9: 	movq	%rbx, %r14
    00001fbc: 	movq	-0x10(%rbx), %rax
    00001fc0: 	subq	$0x10, %rbx
    00001fc4: 	movq	(%rax), %rax
    00001fc7: 	cmpq	%r12, %rax
    00001fca: 	je	.Ltmp2701 # Offset: 8138
    00001fcc: 	movq	%rbx, %rdi
    00001fcf: 	callq	*%rax # Offset: 8143
    00001fd1: 	cmpl	%eax, %r13d
    00001fd4: 	jl	.Ltmp2702 # Offset: 8148
.Ltmp2699:
    00001fd6: 	movl	%r13d, 0x8(%r14)
    00001fda: 	addq	$0x10, %r15
    00001fde: 	cmpq	0x10(%rsp), %r15
    00001fe3: 	jne	.Ltmp2703 # Offset: 8163
.Ltmp2896:
    00001fe5: 	movq	0xd0(%rsp), %rbx
    00001fed: 	jmp	.Ltmp2704 # Offset: 8173
    00001fef: 	nop # Size: 1
.Ltmp2708:
    00001ff0: 	movq	-0x20(%rbx), %rax
    00001ff4: 	movl	-0x8(%rbx), %r13d
    00001ff8: 	movq	(%rax), %rax
    00001ffb: 	cmpq	%r12, %rax
    00001ffe: 	jne	.Ltmp2705 # Offset: 8190
.Ltmp2709:
    00002000: 	movl	-0x18(%rbx), %eax
    00002003: 	cmpl	%eax, %r13d
    00002006: 	jl	.Ltmp2706 # Offset: 8198
.Ltmp2710:
    00002008: 	cmpq	0x10(%rsp), %rbx
    0000200d: 	je	.Ltmp2707 # Offset: 8205
.Ltmp2704:
    0000200f: 	leaq	-0x10(%rbx), %r14
    00002013: 	movq	%rbx, %rdi
    00002016: 	movq	(%rbx), %rax
    00002019: 	addq	$0x10, %rbx
    0000201d: 	movq	(%rax), %rax
    00002020: 	cmpq	%r12, %rax
    00002023: 	je	.Ltmp2708 # Offset: 8227
    00002025: 	callq	*%rax # Offset: 8229
    00002027: 	movl	%eax, %r13d
    0000202a: 	movq	-0x20(%rbx), %rax
    0000202e: 	movq	(%rax), %rax
    00002031: 	cmpq	%r12, %rax
    00002034: 	je	.Ltmp2709 # Offset: 8244
    00002036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2705:
    00002040: 	movq	%r14, %rdi
    00002043: 	callq	*%rax # Offset: 8259
    00002045: 	cmpl	%eax, %r13d
    00002048: 	jge	.Ltmp2710 # Offset: 8264
.Ltmp2706:
    0000204a: 	movq	0x230(%rsp), %rdx
    00002052: 	leaq	DATAat0x1d1cf(%rip), %rsi
    00002059: 	movl	$0x1, %edi
    0000205e: 	xorl	%eax, %eax
    00002060: 	callq	__printf_chk@PLT # Offset: 8288
.Ltmp2707:
    00002065: 	addl	$0x1, 0xd8(%rsp)
    0000206d: 	movl	0xd8(%rsp), %eax
    00002074: 	cmpl	iterations(%rip), %eax
    0000207a: 	jl	.Ltmp2711 # Offset: 8314
.Ltmp2696:
    00002080: 	callq	clock@PLT # Offset: 8320
    00002085: 	movq	0x38(%rsp), %rdi
    0000208a: 	pxor	%xmm0, %xmm0
    0000208e: 	movq	%rax, end_time(%rip)
    00002095: 	subq	start_time(%rip), %rax
    0000209c: 	cvtsi2sd	%rax, %xmm0
    000020a1: 	divsd	DATAat0x1dec0(%rip), %xmm0
    000020a9: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 8361
    000020ae: 	movq	0x230(%rsp), %rdi
    000020b6: 	cmpq	0x98(%rsp), %rdi
    000020be: 	je	.Ltmp2712 # Offset: 8382
    000020c0: 	movq	0x240(%rsp), %rax
    000020c8: 	leaq	0x1(%rax), %rsi
    000020cc: 	callq	_ZdlPvm@PLT # Offset: 8396
.Ltmp2712:
    000020d1: 	movq	0xa8(%rsp), %rsi
    000020d9: 	movq	0x38(%rsp), %rdi
    000020de: 	leaq	DATAat0x1d5b0(%rip), %rdx
    000020e5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8421
    000020ea: 	callq	clock@PLT # Offset: 8426
    000020ef: 	movl	iterations(%rip), %r9d
    000020f6: 	movl	$0x0, 0xd8(%rsp)
    00002101: 	leaq	_ZN15WorkerSubClass2IiEcviEv(%rip), %r14
    00002108: 	movq	%rax, start_time(%rip)
    0000210f: 	leaq	0x32ee0(%rsp), %rax
    00002117: 	movq	%rax, 0xd0(%rsp)
    0000211f: 	testl	%r9d, %r9d
    00002122: 	jle	.Ltmp2713 # Offset: 8482
    00002128: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2721:
    00002130: 	movq	0x10(%rsp), %rdx
    00002135: 	movq	0x90(%rsp), %rax
    0000213d: 	movq	0x70(%rsp), %rsi
    00002142: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2714:
    00002148: 	movl	0x8(%rax), %ecx
    0000214b: 	addq	$0x10, %rax
    0000214f: 	addq	$0x10, %rdx
    00002153: 	movl	%ecx, -0x8(%rdx)
    00002156: 	cmpq	%rsi, %rax
    00002159: 	jne	.Ltmp2714 # Offset: 8537
    0000215b: 	movq	0xd0(%rsp), %r15
    00002163: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2720:
    00002168: 	movl	0x8(%r15), %r12d
    0000216c: 	movq	%r15, %rbx
    0000216f: 	jmp	.Ltmp2715 # Offset: 8559
    00002171: 	nopl	(%rax) # Size: 7
.Ltmp2718:
    00002178: 	movl	0x8(%rbx), %eax
    0000217b: 	cmpl	%eax, %r12d
    0000217e: 	jge	.Ltmp2716 # Offset: 8574
.Ltmp2719:
    00002180: 	movl	0x8(%rbx), %eax
    00002183: 	movl	%eax, 0x18(%rbx)
    00002186: 	cmpq	0x10(%rsp), %rbx
    0000218b: 	je	.Ltmp2717 # Offset: 8587
.Ltmp2715:
    00002191: 	movq	%rbx, %r13
    00002194: 	movq	-0x10(%rbx), %rax
    00002198: 	subq	$0x10, %rbx
    0000219c: 	movq	(%rax), %rax
    0000219f: 	cmpq	%r14, %rax
    000021a2: 	je	.Ltmp2718 # Offset: 8610
    000021a4: 	movq	%rbx, %rdi
    000021a7: 	callq	*%rax # Offset: 8615
    000021a9: 	cmpl	%eax, %r12d
    000021ac: 	jl	.Ltmp2719 # Offset: 8620
.Ltmp2716:
    000021ae: 	movl	%r12d, 0x8(%r13)
    000021b2: 	addq	$0x10, %r15
    000021b6: 	cmpq	0x20(%rsp), %r15
    000021bb: 	jne	.Ltmp2720 # Offset: 8635
.Ltmp2899:
    000021bd: 	movq	0x38(%rsp), %rdx
    000021c2: 	movq	0x20(%rsp), %rsi
    000021c7: 	movq	0x10(%rsp), %rdi
    000021cc: 	callq	_Z13verify_sortedIP15WorkerSubClass2IiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 8652
    000021d1: 	addl	$0x1, 0xd8(%rsp)
    000021d9: 	movl	0xd8(%rsp), %eax
    000021e0: 	cmpl	iterations(%rip), %eax
    000021e6: 	jl	.Ltmp2721 # Offset: 8678
.Ltmp2713:
    000021ec: 	callq	clock@PLT # Offset: 8684
    000021f1: 	movq	0x38(%rsp), %rdi
    000021f6: 	pxor	%xmm0, %xmm0
    000021fa: 	movq	%rax, end_time(%rip)
    00002201: 	subq	start_time(%rip), %rax
    00002208: 	cvtsi2sd	%rax, %xmm0
    0000220d: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00002215: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 8725
    0000221a: 	movq	0x230(%rsp), %rdi
    00002222: 	cmpq	0x98(%rsp), %rdi
    0000222a: 	je	.Ltmp2722 # Offset: 8746
    0000222c: 	movq	0x240(%rsp), %rax
    00002234: 	leaq	0x1(%rax), %rsi
    00002238: 	callq	_ZdlPvm@PLT # Offset: 8760
.Ltmp2722:
    0000223d: 	movq	0xa8(%rsp), %rsi
    00002245: 	movq	0x38(%rsp), %rdi
    0000224a: 	leaq	DATAat0x1d5d8(%rip), %rdx
    00002251: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8785
    00002256: 	callq	clock@PLT # Offset: 8790
    0000225b: 	movl	iterations(%rip), %r8d
    00002262: 	movl	$0x0, 0xd8(%rsp)
    0000226d: 	leaq	_ZN15WorkerSubClass3IiEcviEv(%rip), %r12
    00002274: 	movq	%rax, start_time(%rip)
    0000227b: 	leaq	0x3abe0(%rsp), %rax
    00002283: 	movq	%rax, 0xd0(%rsp)
    0000228b: 	testl	%r8d, %r8d
    0000228e: 	jle	.Ltmp2723 # Offset: 8846
    00002294: 	nopl	(%rax) # Size: 4
.Ltmp2738:
    00002298: 	movq	0x20(%rsp), %rdx
    0000229d: 	movq	0x70(%rsp), %rax
    000022a2: 	movq	0xc0(%rsp), %rsi
    000022aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2724:
    000022b0: 	movl	0x8(%rax), %ecx
    000022b3: 	addq	$0x10, %rax
    000022b7: 	addq	$0x10, %rdx
    000022bb: 	movl	%ecx, -0x8(%rdx)
    000022be: 	cmpq	%rsi, %rax
    000022c1: 	jne	.Ltmp2724 # Offset: 8897
    000022c3: 	movq	0xd0(%rsp), %r15
    000022cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2730:
    000022d0: 	movl	0x8(%r15), %r13d
    000022d4: 	movq	%r15, %rbx
    000022d7: 	jmp	.Ltmp2725 # Offset: 8919
    000022d9: 	nopl	(%rax) # Size: 7
.Ltmp2728:
    000022e0: 	movl	0x8(%rbx), %eax
    000022e3: 	cmpl	%eax, %r13d
    000022e6: 	jge	.Ltmp2726 # Offset: 8934
.Ltmp2729:
    000022e8: 	movl	0x8(%rbx), %eax
    000022eb: 	movl	%eax, 0x18(%rbx)
    000022ee: 	cmpq	0x20(%rsp), %rbx
    000022f3: 	je	.Ltmp2727 # Offset: 8947
.Ltmp2725:
    000022f9: 	movq	%rbx, %r14
    000022fc: 	movq	-0x10(%rbx), %rax
    00002300: 	subq	$0x10, %rbx
    00002304: 	movq	(%rax), %rax
    00002307: 	cmpq	%r12, %rax
    0000230a: 	je	.Ltmp2728 # Offset: 8970
    0000230c: 	movq	%rbx, %rdi
    0000230f: 	callq	*%rax # Offset: 8975
    00002311: 	cmpl	%eax, %r13d
    00002314: 	jl	.Ltmp2729 # Offset: 8980
.Ltmp2726:
    00002316: 	movl	%r13d, 0x8(%r14)
    0000231a: 	addq	$0x10, %r15
    0000231e: 	cmpq	0x30(%rsp), %r15
    00002323: 	jne	.Ltmp2730 # Offset: 8995
.Ltmp2898:
    00002325: 	movq	0xd0(%rsp), %rbx
    0000232d: 	jmp	.Ltmp2731 # Offset: 9005
    0000232f: 	nop # Size: 1
.Ltmp2735:
    00002330: 	movq	-0x20(%rbx), %rax
    00002334: 	movl	-0x8(%rbx), %r13d
    00002338: 	movq	(%rax), %rax
    0000233b: 	cmpq	%r12, %rax
    0000233e: 	jne	.Ltmp2732 # Offset: 9022
.Ltmp2736:
    00002340: 	movl	-0x18(%rbx), %eax
    00002343: 	cmpl	%eax, %r13d
    00002346: 	jl	.Ltmp2733 # Offset: 9030
.Ltmp2737:
    00002348: 	cmpq	0x30(%rsp), %rbx
    0000234d: 	je	.Ltmp2734 # Offset: 9037
.Ltmp2731:
    0000234f: 	leaq	-0x10(%rbx), %r14
    00002353: 	movq	%rbx, %rdi
    00002356: 	movq	(%rbx), %rax
    00002359: 	addq	$0x10, %rbx
    0000235d: 	movq	(%rax), %rax
    00002360: 	cmpq	%r12, %rax
    00002363: 	je	.Ltmp2735 # Offset: 9059
    00002365: 	callq	*%rax # Offset: 9061
    00002367: 	movl	%eax, %r13d
    0000236a: 	movq	-0x20(%rbx), %rax
    0000236e: 	movq	(%rax), %rax
    00002371: 	cmpq	%r12, %rax
    00002374: 	je	.Ltmp2736 # Offset: 9076
    00002376: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2732:
    00002380: 	movq	%r14, %rdi
    00002383: 	callq	*%rax # Offset: 9091
    00002385: 	cmpl	%eax, %r13d
    00002388: 	jge	.Ltmp2737 # Offset: 9096
.Ltmp2733:
    0000238a: 	movq	0x230(%rsp), %rdx
    00002392: 	leaq	DATAat0x1d1cf(%rip), %rsi
    00002399: 	movl	$0x1, %edi
    0000239e: 	xorl	%eax, %eax
    000023a0: 	callq	__printf_chk@PLT # Offset: 9120
.Ltmp2734:
    000023a5: 	addl	$0x1, 0xd8(%rsp)
    000023ad: 	movl	0xd8(%rsp), %eax
    000023b4: 	cmpl	iterations(%rip), %eax
    000023ba: 	jl	.Ltmp2738 # Offset: 9146
.Ltmp2723:
    000023c0: 	callq	clock@PLT # Offset: 9152
    000023c5: 	movq	0x38(%rsp), %rdi
    000023ca: 	pxor	%xmm0, %xmm0
    000023ce: 	movq	%rax, end_time(%rip)
    000023d5: 	subq	start_time(%rip), %rax
    000023dc: 	cvtsi2sd	%rax, %xmm0
    000023e1: 	divsd	DATAat0x1dec0(%rip), %xmm0
    000023e9: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9193
    000023ee: 	movq	0x230(%rsp), %rdi
    000023f6: 	cmpq	0x98(%rsp), %rdi
    000023fe: 	je	.Ltmp2739 # Offset: 9214
    00002400: 	movq	0x240(%rsp), %rax
    00002408: 	leaq	0x1(%rax), %rsi
    0000240c: 	callq	_ZdlPvm@PLT # Offset: 9228
.Ltmp2739:
    00002411: 	movq	0xa8(%rsp), %rbx
    00002419: 	leaq	0x1f0(%rsp), %rdi
    00002421: 	leaq	DATAat0x1d21f(%rip), %rdx
    00002428: 	movq	%rbx, %rsi
    0000242b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9259
    00002430: 	movl	iterations(%rip), %edx
    00002436: 	movl	$0x1, %r8d
    0000243c: 	movl	$0x1, %ecx
    00002441: 	movq	0x1f0(%rsp), %rdi
    00002449: 	movl	$0x7d0, %esi
    0000244e: 	callq	_Z9summarizePKciiii # Offset: 9294
    00002453: 	movq	0x38(%rsp), %rdi
    00002458: 	leaq	DATAat0x1d23b(%rip), %rdx
    0000245f: 	movq	%rbx, %rsi
    00002462: 	shll	$0x4, iterations(%rip)
    00002469: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9321
    0000246e: 	callq	clock@PLT # Offset: 9326
    00002473: 	movl	iterations(%rip), %edi
    00002479: 	xorl	%ebx, %ebx
    0000247b: 	leaq	0x250(%rsp), %r12
    00002483: 	movq	%rax, start_time(%rip)
    0000248a: 	testl	%edi, %edi
    0000248c: 	jle	.Ltmp2740 # Offset: 9356
    0000248e: 	nop # Size: 2
.Ltmp2741:
    00002490: 	movq	0x58(%rsp), %rdi
    00002495: 	movq	0x60(%rsp), %rsi
    0000249a: 	movl	$0x3e8, %ecx
    0000249f: 	movq	%r12, 0x58(%rsp)
    000024a4: 	rep		movsq	(%rsi), %es:(%rdi)
    000024a7: 	movq	%rbp, %rsi
    000024aa: 	movq	%r12, %rdi
    000024ad: 	callq	_ZN9benchmark9quicksortIPiEEvT_S2_ # Offset: 9389
    000024b2: 	movq	0x38(%rsp), %rdx
    000024b7: 	movq	%rbp, %rsi
    000024ba: 	movq	%r12, %rdi
    000024bd: 	callq	_Z13verify_sortedIPiEvT_S1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9405
    000024c2: 	addl	$0x1, %ebx
    000024c5: 	cmpl	iterations(%rip), %ebx
    000024cb: 	jl	.Ltmp2741 # Offset: 9419
.Ltmp2740:
    000024cd: 	callq	clock@PLT # Offset: 9421
    000024d2: 	movq	0x38(%rsp), %rdi
    000024d7: 	pxor	%xmm0, %xmm0
    000024db: 	movq	%rax, end_time(%rip)
    000024e2: 	subq	start_time(%rip), %rax
    000024e9: 	cvtsi2sd	%rax, %xmm0
    000024ee: 	divsd	DATAat0x1dec0(%rip), %xmm0
    000024f6: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9462
    000024fb: 	movq	0x230(%rsp), %rdi
    00002503: 	cmpq	0x98(%rsp), %rdi
    0000250b: 	je	.Ltmp2742 # Offset: 9483
    0000250d: 	movq	0x240(%rsp), %rax
    00002515: 	leaq	0x1(%rax), %rsi
    00002519: 	callq	_ZdlPvm@PLT # Offset: 9497
.Ltmp2742:
    0000251e: 	movq	0xa8(%rsp), %rsi
    00002526: 	movq	0x38(%rsp), %rdi
    0000252b: 	leaq	DATAat0x1d600(%rip), %rdx
    00002532: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9522
    00002537: 	callq	clock@PLT # Offset: 9527
    0000253c: 	movl	iterations(%rip), %esi
    00002542: 	xorl	%ebx, %ebx
    00002544: 	leaq	0x2190(%rsp), %r12
    0000254c: 	movq	%rax, start_time(%rip)
    00002553: 	testl	%esi, %esi
    00002555: 	jle	.Ltmp2743 # Offset: 9557
    00002557: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2744:
    00002560: 	movq	0xb0(%rsp), %rsi
    00002568: 	movq	%rbp, %rdi
    0000256b: 	movl	$0x3e8, %ecx
    00002570: 	movq	%r12, %rbp
    00002573: 	rep		movsq	(%rsi), %es:(%rdi)
    00002576: 	movq	0x48(%rsp), %r10
    0000257b: 	movq	%r12, %rdi
    0000257e: 	movq	%r10, %rsi
    00002581: 	callq	"_ZN9benchmark9quicksortIP9TypeClassIiEEEvT_S4_.part.0/1" # Offset: 9601
    00002586: 	movq	0x38(%rsp), %rdx
    0000258b: 	movq	%r10, %rsi
    0000258e: 	movq	%r12, %rdi
    00002591: 	callq	_Z13verify_sortedIP9TypeClassIiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9617
    00002596: 	addl	$0x1, %ebx
    00002599: 	cmpl	iterations(%rip), %ebx
    0000259f: 	jl	.Ltmp2744 # Offset: 9631
.Ltmp2743:
    000025a1: 	callq	clock@PLT # Offset: 9633
    000025a6: 	movq	0x38(%rsp), %rdi
    000025ab: 	pxor	%xmm0, %xmm0
    000025af: 	movq	%rax, end_time(%rip)
    000025b6: 	subq	start_time(%rip), %rax
    000025bd: 	cvtsi2sd	%rax, %xmm0
    000025c2: 	divsd	DATAat0x1dec0(%rip), %xmm0
    000025ca: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9674
    000025cf: 	movq	0x230(%rsp), %rdi
    000025d7: 	cmpq	0x98(%rsp), %rdi
    000025df: 	je	.Ltmp2745 # Offset: 9695
    000025e1: 	movq	0x240(%rsp), %rax
    000025e9: 	leaq	0x1(%rax), %rsi
    000025ed: 	callq	_ZdlPvm@PLT # Offset: 9709
.Ltmp2745:
    000025f2: 	movq	0xa8(%rsp), %rsi
    000025fa: 	movq	0x38(%rsp), %rdi
    000025ff: 	leaq	DATAat0x1d628(%rip), %rdx
    00002606: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9734
    0000260b: 	callq	clock@PLT # Offset: 9739
    00002610: 	movl	iterations(%rip), %ecx
    00002616: 	xorl	%ebx, %ebx
    00002618: 	leaq	0x40d0(%rsp), %r12
    00002620: 	movq	%rax, start_time(%rip)
    00002627: 	testl	%ecx, %ecx
    00002629: 	jle	.Ltmp2746 # Offset: 9769
    0000262b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2747:
    00002630: 	movq	0x48(%rsp), %rdi
    00002635: 	movl	$0x3e8, %ecx
    0000263a: 	movq	0x40(%rsp), %r11
    0000263f: 	movq	%r12, 0x48(%rsp)
    00002644: 	movq	0xc8(%rsp), %rsi
    0000264c: 	rep		movsq	(%rsi), %es:(%rdi)
    0000264f: 	movq	%r11, %rsi
    00002652: 	movq	%r12, %rdi
    00002655: 	callq	"_ZN9benchmark9quicksortIP12TypeSubClassIiEEEvT_S4_.part.0/1" # Offset: 9813
    0000265a: 	movq	0x38(%rsp), %rdx
    0000265f: 	movq	%r11, %rsi
    00002662: 	movq	%r12, %rdi
    00002665: 	callq	_Z13verify_sortedIP12TypeSubClassIiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9829
    0000266a: 	addl	$0x1, %ebx
    0000266d: 	cmpl	iterations(%rip), %ebx
    00002673: 	jl	.Ltmp2747 # Offset: 9843
.Ltmp2746:
    00002675: 	callq	clock@PLT # Offset: 9845
    0000267a: 	movq	0x38(%rsp), %rdi
    0000267f: 	pxor	%xmm0, %xmm0
    00002683: 	movq	%rax, end_time(%rip)
    0000268a: 	subq	start_time(%rip), %rax
    00002691: 	cvtsi2sd	%rax, %xmm0
    00002696: 	divsd	DATAat0x1dec0(%rip), %xmm0
    0000269e: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9886
    000026a3: 	movq	0x230(%rsp), %rdi
    000026ab: 	cmpq	0x98(%rsp), %rdi
    000026b3: 	je	.Ltmp2748 # Offset: 9907
    000026b5: 	movq	0x240(%rsp), %rax
    000026bd: 	leaq	0x1(%rax), %rsi
    000026c1: 	callq	_ZdlPvm@PLT # Offset: 9921
.Ltmp2748:
    000026c6: 	movq	0xa8(%rsp), %rsi
    000026ce: 	movq	0x38(%rsp), %rdi
    000026d3: 	leaq	DATAat0x1d648(%rip), %rdx
    000026da: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9946
    000026df: 	callq	clock@PLT # Offset: 9951
    000026e4: 	movl	iterations(%rip), %edx
    000026ea: 	xorl	%ebx, %ebx
    000026ec: 	leaq	0x6010(%rsp), %r12
    000026f4: 	movq	%rax, start_time(%rip)
    000026fb: 	testl	%edx, %edx
    000026fd: 	jle	.Ltmp2749 # Offset: 9981
    000026ff: 	nop # Size: 1
.Ltmp2750:
    00002700: 	movq	0x40(%rsp), %rdi
    00002705: 	movl	$0x3e8, %ecx
    0000270a: 	movq	0x50(%rsp), %r10
    0000270f: 	movq	%r12, 0x40(%rsp)
    00002714: 	movq	0xb8(%rsp), %rsi
    0000271c: 	rep		movsq	(%rsi), %es:(%rdi)
    0000271f: 	movq	%r10, %rsi
    00002722: 	movq	%r12, %rdi
    00002725: 	callq	"_ZN9benchmark9quicksortIP13TypeSub2ClassIiEEEvT_S4_.part.0/1" # Offset: 10021
    0000272a: 	movq	0x38(%rsp), %rdx
    0000272f: 	movq	%r10, %rsi
    00002732: 	movq	%r12, %rdi
    00002735: 	callq	_Z13verify_sortedIP13TypeSub2ClassIiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 10037
    0000273a: 	addl	$0x1, %ebx
    0000273d: 	cmpl	iterations(%rip), %ebx
    00002743: 	jl	.Ltmp2750 # Offset: 10051
.Ltmp2749:
    00002745: 	callq	clock@PLT # Offset: 10053
    0000274a: 	movq	0x38(%rsp), %rdi
    0000274f: 	pxor	%xmm0, %xmm0
    00002753: 	movq	%rax, end_time(%rip)
    0000275a: 	subq	start_time(%rip), %rax
    00002761: 	cvtsi2sd	%rax, %xmm0
    00002766: 	divsd	DATAat0x1dec0(%rip), %xmm0
    0000276e: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 10094
    00002773: 	movq	0x230(%rsp), %rdi
    0000277b: 	cmpq	0x98(%rsp), %rdi
    00002783: 	je	.Ltmp2751 # Offset: 10115
    00002785: 	movq	0x240(%rsp), %rax
    0000278d: 	leaq	0x1(%rax), %rsi
    00002791: 	callq	_ZdlPvm@PLT # Offset: 10129
.Ltmp2751:
    00002796: 	movq	0xa8(%rsp), %rsi
    0000279e: 	movq	0x38(%rsp), %rdi
    000027a3: 	leaq	DATAat0x1d670(%rip), %rdx
    000027aa: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10154
    000027af: 	callq	clock@PLT # Offset: 10159
    000027b4: 	xorl	%ebx, %ebx
    000027b6: 	leaq	0x7f50(%rsp), %r12
    000027be: 	movq	%rax, start_time(%rip)
    000027c5: 	movl	iterations(%rip), %eax
    000027cb: 	testl	%eax, %eax
    000027cd: 	jle	.Ltmp2752 # Offset: 10189
    000027cf: 	nop # Size: 1
.Ltmp2753:
    000027d0: 	movq	0x50(%rsp), %rdi
    000027d5: 	movl	$0x3e8, %ecx
    000027da: 	movq	0x60(%rsp), %r11
    000027df: 	movq	%r12, 0x50(%rsp)
    000027e4: 	movq	0xa0(%rsp), %rsi
    000027ec: 	rep		movsq	(%rsi), %es:(%rdi)
    000027ef: 	movq	%r11, %rsi
    000027f2: 	movq	%r12, %rdi
    000027f5: 	callq	"_ZN9benchmark9quicksortIP12DeepSubClassIiEEEvT_S4_.part.0/1" # Offset: 10229
    000027fa: 	movq	0x38(%rsp), %rdx
    000027ff: 	movq	%r11, %rsi
    00002802: 	movq	%r12, %rdi
    00002805: 	callq	_Z13verify_sortedIP12DeepSubClassIiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 10245
    0000280a: 	addl	$0x1, %ebx
    0000280d: 	cmpl	iterations(%rip), %ebx
    00002813: 	jl	.Ltmp2753 # Offset: 10259
.Ltmp2752:
    00002815: 	callq	clock@PLT # Offset: 10261
    0000281a: 	movq	0x38(%rsp), %rdi
    0000281f: 	pxor	%xmm0, %xmm0
    00002823: 	movq	%rax, end_time(%rip)
    0000282a: 	subq	start_time(%rip), %rax
    00002831: 	cvtsi2sd	%rax, %xmm0
    00002836: 	divsd	DATAat0x1dec0(%rip), %xmm0
    0000283e: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 10302
    00002843: 	movq	0x230(%rsp), %rdi
    0000284b: 	cmpq	0x98(%rsp), %rdi
    00002853: 	je	.Ltmp2754 # Offset: 10323
    00002855: 	movq	0x240(%rsp), %rax
    0000285d: 	leaq	0x1(%rax), %rsi
    00002861: 	callq	_ZdlPvm@PLT # Offset: 10337
.Ltmp2754:
    00002866: 	movq	0xa8(%rsp), %rsi
    0000286e: 	movq	0x38(%rsp), %rdi
    00002873: 	leaq	DATAat0x1d690(%rip), %rdx
    0000287a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10362
    0000287f: 	callq	clock@PLT # Offset: 10367
    00002884: 	xorl	%ebx, %ebx
    00002886: 	movq	%rax, start_time(%rip)
    0000288d: 	movl	iterations(%rip), %eax
    00002893: 	testl	%eax, %eax
    00002895: 	jle	.Ltmp2755 # Offset: 10389
    00002897: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2757:
    000028a0: 	movq	0x28(%rsp), %rdx
    000028a5: 	movq	0x30(%rsp), %rax
    000028aa: 	movq	0x88(%rsp), %rsi
    000028b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2756:
    000028b8: 	movl	0x8(%rax), %ecx
    000028bb: 	addq	$0x10, %rax
    000028bf: 	addq	$0x10, %rdx
    000028c3: 	movl	%ecx, -0x8(%rdx)
    000028c6: 	cmpq	%rsi, %rax
    000028c9: 	jne	.Ltmp2756 # Offset: 10441
    000028cb: 	movq	0x18(%rsp), %r14
    000028d0: 	movq	0x28(%rsp), %r15
    000028d5: 	movq	%r14, %rsi
    000028d8: 	movq	%r15, %rdi
    000028db: 	callq	"_ZN9benchmark9quicksortIP16TypeVirtualClassIiEEEvT_S4_.part.0/1" # Offset: 10459
    000028e0: 	movq	0x38(%rsp), %rdx
    000028e5: 	movq	%r14, %rsi
    000028e8: 	movq	%r15, %rdi
    000028eb: 	callq	_Z13verify_sortedIP16TypeVirtualClassIiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 10475
    000028f0: 	addl	$0x1, %ebx
    000028f3: 	cmpl	iterations(%rip), %ebx
    000028f9: 	jl	.Ltmp2757 # Offset: 10489
.Ltmp2755:
    000028fb: 	callq	clock@PLT # Offset: 10491
    00002900: 	movq	0x38(%rsp), %rdi
    00002905: 	pxor	%xmm0, %xmm0
    00002909: 	movq	%rax, end_time(%rip)
    00002910: 	subq	start_time(%rip), %rax
    00002917: 	cvtsi2sd	%rax, %xmm0
    0000291c: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00002924: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 10532
    00002929: 	movq	0x230(%rsp), %rdi
    00002931: 	cmpq	0x98(%rsp), %rdi
    00002939: 	je	.Ltmp2758 # Offset: 10553
    0000293b: 	movq	0x240(%rsp), %rax
    00002943: 	leaq	0x1(%rax), %rsi
    00002947: 	callq	_ZdlPvm@PLT # Offset: 10567
.Ltmp2758:
    0000294c: 	movq	0xa8(%rsp), %rsi
    00002954: 	movq	0x38(%rsp), %rdi
    00002959: 	leaq	DATAat0x1d6b8(%rip), %rdx
    00002960: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10592
    00002965: 	callq	clock@PLT # Offset: 10597
    0000296a: 	xorl	%r15d, %r15d
    0000296d: 	leaq	_ZN19TypeVirtualSubClassIiEcviEv(%rip), %r13
    00002974: 	movq	%rax, start_time(%rip)
    0000297b: 	movl	iterations(%rip), %eax
    00002981: 	testl	%eax, %eax
    00002983: 	jle	.Ltmp2759 # Offset: 10627
    00002989: 	nopl	(%rax) # Size: 7
.Ltmp2768:
    00002990: 	movq	0x18(%rsp), %rdx
    00002995: 	movq	0x88(%rsp), %rax
    0000299d: 	movq	0x80(%rsp), %rsi
    000029a5: 	nopl	(%rax) # Size: 3
.Ltmp2760:
    000029a8: 	movl	0x8(%rax), %ecx
    000029ab: 	addq	$0x10, %rax
    000029af: 	addq	$0x10, %rdx
    000029b3: 	movl	%ecx, -0x8(%rdx)
    000029b6: 	cmpq	%rsi, %rax
    000029b9: 	jne	.Ltmp2760 # Offset: 10681
    000029bb: 	movq	(%rsp), %rsi
    000029bf: 	movq	0x18(%rsp), %rdi
    000029c4: 	callq	"_ZN9benchmark9quicksortIP19TypeVirtualSubClassIiEEEvT_S4_.part.0/1" # Offset: 10692
    000029c9: 	leaq	0x1b7e0(%rsp), %rbx
    000029d1: 	jmp	.Ltmp2761 # Offset: 10705
    000029d3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2765:
    000029d8: 	movq	-0x20(%rbx), %rax
    000029dc: 	movl	-0x8(%rbx), %r12d
    000029e0: 	movq	(%rax), %rax
    000029e3: 	cmpq	%r13, %rax
    000029e6: 	jne	.Ltmp2762 # Offset: 10726
.Ltmp2766:
    000029e8: 	movl	-0x18(%rbx), %eax
    000029eb: 	cmpl	%eax, %r12d
    000029ee: 	jl	.Ltmp2763 # Offset: 10734
.Ltmp2767:
    000029f0: 	cmpq	(%rsp), %rbx
    000029f4: 	je	.Ltmp2764 # Offset: 10740
.Ltmp2761:
    000029f6: 	leaq	-0x10(%rbx), %r14
    000029fa: 	movq	%rbx, %rdi
    000029fd: 	movq	(%rbx), %rax
    00002a00: 	addq	$0x10, %rbx
    00002a04: 	movq	(%rax), %rax
    00002a07: 	cmpq	%r13, %rax
    00002a0a: 	je	.Ltmp2765 # Offset: 10762
    00002a0c: 	callq	*%rax # Offset: 10764
    00002a0e: 	movl	%eax, %r12d
    00002a11: 	movq	-0x20(%rbx), %rax
    00002a15: 	movq	(%rax), %rax
    00002a18: 	cmpq	%r13, %rax
    00002a1b: 	je	.Ltmp2766 # Offset: 10779
    00002a1d: 	nopl	(%rax) # Size: 3
.Ltmp2762:
    00002a20: 	movq	%r14, %rdi
    00002a23: 	callq	*%rax # Offset: 10787
    00002a25: 	cmpl	%eax, %r12d
    00002a28: 	jge	.Ltmp2767 # Offset: 10792
.Ltmp2763:
    00002a2a: 	movq	0x230(%rsp), %rdx
    00002a32: 	leaq	DATAat0x1d1cf(%rip), %rsi
    00002a39: 	movl	$0x1, %edi
    00002a3e: 	xorl	%eax, %eax
    00002a40: 	callq	__printf_chk@PLT # Offset: 10816
.Ltmp2764:
    00002a45: 	addl	$0x1, %r15d
    00002a49: 	cmpl	iterations(%rip), %r15d
    00002a50: 	jl	.Ltmp2768 # Offset: 10832
.Ltmp2759:
    00002a56: 	callq	clock@PLT # Offset: 10838
    00002a5b: 	movq	0x38(%rsp), %rdi
    00002a60: 	pxor	%xmm0, %xmm0
    00002a64: 	movq	%rax, end_time(%rip)
    00002a6b: 	subq	start_time(%rip), %rax
    00002a72: 	cvtsi2sd	%rax, %xmm0
    00002a77: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00002a7f: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 10879
    00002a84: 	movq	0x230(%rsp), %rdi
    00002a8c: 	cmpq	0x98(%rsp), %rdi
    00002a94: 	je	.Ltmp2769 # Offset: 10900
    00002a96: 	movq	0x240(%rsp), %rax
    00002a9e: 	leaq	0x1(%rax), %rsi
    00002aa2: 	callq	_ZdlPvm@PLT # Offset: 10914
.Ltmp2769:
    00002aa7: 	movq	0xa8(%rsp), %rsi
    00002aaf: 	movq	0x38(%rsp), %rdi
    00002ab4: 	leaq	DATAat0x1d6e0(%rip), %rdx
    00002abb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10939
    00002ac0: 	callq	clock@PLT # Offset: 10944
    00002ac5: 	xorl	%r15d, %r15d
    00002ac8: 	leaq	_ZN14WorkerSubClassIiEcviEv(%rip), %r13
    00002acf: 	movq	%rax, start_time(%rip)
    00002ad6: 	movl	iterations(%rip), %eax
    00002adc: 	testl	%eax, %eax
    00002ade: 	jle	.Ltmp2770 # Offset: 10974
    00002ae4: 	nopl	(%rax) # Size: 4
.Ltmp2779:
    00002ae8: 	movq	(%rsp), %rdx
    00002aec: 	movq	0x80(%rsp), %rax
    00002af4: 	movq	0x78(%rsp), %rsi
    00002af9: 	nopl	(%rax) # Size: 7
.Ltmp2771:
    00002b00: 	movl	0x8(%rax), %ecx
    00002b03: 	addq	$0x10, %rax
    00002b07: 	addq	$0x10, %rdx
    00002b0b: 	movl	%ecx, -0x8(%rdx)
    00002b0e: 	cmpq	%rsi, %rax
    00002b11: 	jne	.Ltmp2771 # Offset: 11025
    00002b13: 	movq	0x8(%rsp), %rsi
    00002b18: 	movq	(%rsp), %rdi
    00002b1c: 	callq	"_ZN9benchmark9quicksortIP14WorkerSubClassIiEEEvT_S4_.part.0/1" # Offset: 11036
    00002b21: 	leaq	0x234e0(%rsp), %rbx
    00002b29: 	jmp	.Ltmp2772 # Offset: 11049
    00002b2b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2776:
    00002b30: 	movq	-0x20(%rbx), %rax
    00002b34: 	movl	-0x8(%rbx), %r12d
    00002b38: 	movq	(%rax), %rax
    00002b3b: 	cmpq	%r13, %rax
    00002b3e: 	jne	.Ltmp2773 # Offset: 11070
.Ltmp2777:
    00002b40: 	movl	-0x18(%rbx), %eax
    00002b43: 	cmpl	%eax, %r12d
    00002b46: 	jl	.Ltmp2774 # Offset: 11078
.Ltmp2778:
    00002b48: 	cmpq	0x8(%rsp), %rbx
    00002b4d: 	je	.Ltmp2775 # Offset: 11085
.Ltmp2772:
    00002b4f: 	leaq	-0x10(%rbx), %r14
    00002b53: 	movq	%rbx, %rdi
    00002b56: 	movq	(%rbx), %rax
    00002b59: 	addq	$0x10, %rbx
    00002b5d: 	movq	(%rax), %rax
    00002b60: 	cmpq	%r13, %rax
    00002b63: 	je	.Ltmp2776 # Offset: 11107
    00002b65: 	callq	*%rax # Offset: 11109
    00002b67: 	movl	%eax, %r12d
    00002b6a: 	movq	-0x20(%rbx), %rax
    00002b6e: 	movq	(%rax), %rax
    00002b71: 	cmpq	%r13, %rax
    00002b74: 	je	.Ltmp2777 # Offset: 11124
    00002b76: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2773:
    00002b80: 	movq	%r14, %rdi
    00002b83: 	callq	*%rax # Offset: 11139
    00002b85: 	cmpl	%eax, %r12d
    00002b88: 	jge	.Ltmp2778 # Offset: 11144
.Ltmp2774:
    00002b8a: 	movq	0x230(%rsp), %rdx
    00002b92: 	leaq	DATAat0x1d1cf(%rip), %rsi
    00002b99: 	movl	$0x1, %edi
    00002b9e: 	xorl	%eax, %eax
    00002ba0: 	callq	__printf_chk@PLT # Offset: 11168
.Ltmp2775:
    00002ba5: 	addl	$0x1, %r15d
    00002ba9: 	cmpl	iterations(%rip), %r15d
    00002bb0: 	jl	.Ltmp2779 # Offset: 11184
.Ltmp2770:
    00002bb6: 	callq	clock@PLT # Offset: 11190
    00002bbb: 	movq	0x38(%rsp), %rdi
    00002bc0: 	pxor	%xmm0, %xmm0
    00002bc4: 	movq	%rax, end_time(%rip)
    00002bcb: 	subq	start_time(%rip), %rax
    00002bd2: 	cvtsi2sd	%rax, %xmm0
    00002bd7: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00002bdf: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 11231
    00002be4: 	movq	0x230(%rsp), %rdi
    00002bec: 	cmpq	0x98(%rsp), %rdi
    00002bf4: 	je	.Ltmp2780 # Offset: 11252
    00002bf6: 	movq	0x240(%rsp), %rax
    00002bfe: 	leaq	0x1(%rax), %rsi
    00002c02: 	callq	_ZdlPvm@PLT # Offset: 11266
.Ltmp2780:
    00002c07: 	movq	0xa8(%rsp), %rsi
    00002c0f: 	movq	0x38(%rsp), %rdi
    00002c14: 	leaq	DATAat0x1d708(%rip), %rdx
    00002c1b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11291
    00002c20: 	callq	clock@PLT # Offset: 11296
    00002c25: 	xorl	%ebx, %ebx
    00002c27: 	movq	%rax, start_time(%rip)
    00002c2e: 	movl	iterations(%rip), %eax
    00002c34: 	testl	%eax, %eax
    00002c36: 	jle	.Ltmp2781 # Offset: 11318
    00002c38: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2783:
    00002c40: 	movq	0x8(%rsp), %rdx
    00002c45: 	movq	0x78(%rsp), %rax
    00002c4a: 	movq	0x90(%rsp), %rsi
    00002c52: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2782:
    00002c58: 	movl	0x8(%rax), %ecx
    00002c5b: 	addq	$0x10, %rax
    00002c5f: 	addq	$0x10, %rdx
    00002c63: 	movl	%ecx, -0x8(%rdx)
    00002c66: 	cmpq	%rsi, %rax
    00002c69: 	jne	.Ltmp2782 # Offset: 11369
    00002c6b: 	movq	0x10(%rsp), %r14
    00002c70: 	movq	0x8(%rsp), %r15
    00002c75: 	movq	%r14, %rsi
    00002c78: 	movq	%r15, %rdi
    00002c7b: 	callq	"_ZN9benchmark9quicksortIP18WorkerDeepSubClassIiEEEvT_S4_.part.0/1" # Offset: 11387
    00002c80: 	movq	0x38(%rsp), %rdx
    00002c85: 	movq	%r14, %rsi
    00002c88: 	movq	%r15, %rdi
    00002c8b: 	callq	_Z13verify_sortedIP18WorkerDeepSubClassIiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 11403
    00002c90: 	addl	$0x1, %ebx
    00002c93: 	cmpl	iterations(%rip), %ebx
    00002c99: 	jl	.Ltmp2783 # Offset: 11417
.Ltmp2781:
    00002c9b: 	callq	clock@PLT # Offset: 11419
    00002ca0: 	movq	0x38(%rsp), %rdi
    00002ca5: 	pxor	%xmm0, %xmm0
    00002ca9: 	movq	%rax, end_time(%rip)
    00002cb0: 	subq	start_time(%rip), %rax
    00002cb7: 	cvtsi2sd	%rax, %xmm0
    00002cbc: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00002cc4: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 11460
    00002cc9: 	movq	0x230(%rsp), %rdi
    00002cd1: 	cmpq	0x98(%rsp), %rdi
    00002cd9: 	je	.Ltmp2784 # Offset: 11481
    00002cdb: 	movq	0x240(%rsp), %rax
    00002ce3: 	leaq	0x1(%rax), %rsi
    00002ce7: 	callq	_ZdlPvm@PLT # Offset: 11495
.Ltmp2784:
    00002cec: 	movq	0xa8(%rsp), %rsi
    00002cf4: 	movq	0x38(%rsp), %rdi
    00002cf9: 	leaq	DATAat0x1d730(%rip), %rdx
    00002d00: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11520
    00002d05: 	callq	clock@PLT # Offset: 11525
    00002d0a: 	movl	iterations(%rip), %r15d
    00002d11: 	xorl	%ebx, %ebx
    00002d13: 	movq	%rax, start_time(%rip)
    00002d1a: 	testl	%r15d, %r15d
    00002d1d: 	jle	.Ltmp2785 # Offset: 11549
    00002d1f: 	nop # Size: 1
.Ltmp2787:
    00002d20: 	movq	0x10(%rsp), %rdx
    00002d25: 	movq	0x90(%rsp), %rax
    00002d2d: 	movq	0x70(%rsp), %rsi
    00002d32: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2786:
    00002d38: 	movl	0x8(%rax), %ecx
    00002d3b: 	addq	$0x10, %rax
    00002d3f: 	addq	$0x10, %rdx
    00002d43: 	movl	%ecx, -0x8(%rdx)
    00002d46: 	cmpq	%rsi, %rax
    00002d49: 	jne	.Ltmp2786 # Offset: 11593
    00002d4b: 	movq	0x20(%rsp), %r14
    00002d50: 	movq	0x10(%rsp), %r15
    00002d55: 	movq	%r14, %rsi
    00002d58: 	movq	%r15, %rdi
    00002d5b: 	callq	"_ZN9benchmark9quicksortIP15WorkerSubClass2IiEEEvT_S4_.part.0/1" # Offset: 11611
    00002d60: 	movq	0x38(%rsp), %rdx
    00002d65: 	movq	%r14, %rsi
    00002d68: 	movq	%r15, %rdi
    00002d6b: 	callq	_Z13verify_sortedIP15WorkerSubClass2IiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 11627
    00002d70: 	addl	$0x1, %ebx
    00002d73: 	cmpl	iterations(%rip), %ebx
    00002d79: 	jl	.Ltmp2787 # Offset: 11641
.Ltmp2785:
    00002d7b: 	callq	clock@PLT # Offset: 11643
    00002d80: 	movq	0x38(%rsp), %rdi
    00002d85: 	pxor	%xmm0, %xmm0
    00002d89: 	movq	%rax, end_time(%rip)
    00002d90: 	subq	start_time(%rip), %rax
    00002d97: 	cvtsi2sd	%rax, %xmm0
    00002d9c: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00002da4: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 11684
    00002da9: 	movq	0x230(%rsp), %rdi
    00002db1: 	cmpq	0x98(%rsp), %rdi
    00002db9: 	je	.Ltmp2788 # Offset: 11705
    00002dbb: 	movq	0x240(%rsp), %rax
    00002dc3: 	leaq	0x1(%rax), %rsi
    00002dc7: 	callq	_ZdlPvm@PLT # Offset: 11719
.Ltmp2788:
    00002dcc: 	movq	0xa8(%rsp), %rsi
    00002dd4: 	movq	0x38(%rsp), %rdi
    00002dd9: 	leaq	DATAat0x1d758(%rip), %rdx
    00002de0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11744
    00002de5: 	callq	clock@PLT # Offset: 11749
    00002dea: 	movl	iterations(%rip), %r14d
    00002df1: 	xorl	%ebx, %ebx
    00002df3: 	movq	%rax, start_time(%rip)
    00002dfa: 	testl	%r14d, %r14d
    00002dfd: 	jle	.Ltmp2789 # Offset: 11773
    00002dff: 	nop # Size: 1
.Ltmp2791:
    00002e00: 	movq	0x20(%rsp), %rdx
    00002e05: 	movq	0x70(%rsp), %rax
    00002e0a: 	movq	0xc0(%rsp), %rsi
    00002e12: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2790:
    00002e18: 	movl	0x8(%rax), %ecx
    00002e1b: 	addq	$0x10, %rax
    00002e1f: 	addq	$0x10, %rdx
    00002e23: 	movl	%ecx, -0x8(%rdx)
    00002e26: 	cmpq	%rsi, %rax
    00002e29: 	jne	.Ltmp2790 # Offset: 11817
    00002e2b: 	movq	0x30(%rsp), %r14
    00002e30: 	movq	0x20(%rsp), %r15
    00002e35: 	movq	%r14, %rsi
    00002e38: 	movq	%r15, %rdi
    00002e3b: 	callq	"_ZN9benchmark9quicksortIP15WorkerSubClass3IiEEEvT_S4_.part.0/1" # Offset: 11835
    00002e40: 	movq	0x38(%rsp), %rdx
    00002e45: 	movq	%r14, %rsi
    00002e48: 	movq	%r15, %rdi
    00002e4b: 	callq	_Z13verify_sortedIP15WorkerSubClass3IiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 11851
    00002e50: 	addl	$0x1, %ebx
    00002e53: 	cmpl	iterations(%rip), %ebx
    00002e59: 	jl	.Ltmp2791 # Offset: 11865
.Ltmp2789:
    00002e5b: 	callq	clock@PLT # Offset: 11867
    00002e60: 	movq	0x38(%rsp), %rdi
    00002e65: 	pxor	%xmm0, %xmm0
    00002e69: 	movq	%rax, end_time(%rip)
    00002e70: 	subq	start_time(%rip), %rax
    00002e77: 	cvtsi2sd	%rax, %xmm0
    00002e7c: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00002e84: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 11908
    00002e89: 	movq	0x230(%rsp), %rdi
    00002e91: 	cmpq	0x98(%rsp), %rdi
    00002e99: 	je	.Ltmp2792 # Offset: 11929
    00002e9b: 	movq	0x240(%rsp), %rax
    00002ea3: 	leaq	0x1(%rax), %rsi
    00002ea7: 	callq	_ZdlPvm@PLT # Offset: 11943
.Ltmp2792:
    00002eac: 	movq	0xa8(%rsp), %rbx
    00002eb4: 	leaq	0x210(%rsp), %rdi
    00002ebc: 	leaq	DATAat0x1d256(%rip), %rdx
    00002ec3: 	movq	%rbx, %rsi
    00002ec6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11974
    00002ecb: 	movl	iterations(%rip), %edx
    00002ed1: 	movl	$0x1, %r8d
    00002ed7: 	movl	$0x1, %ecx
    00002edc: 	movq	0x210(%rsp), %rdi
    00002ee4: 	movl	$0x7d0, %esi
    00002ee9: 	callq	_Z9summarizePKciiii # Offset: 12009
    00002eee: 	movq	0x38(%rsp), %rdi
    00002ef3: 	leaq	DATAat0x1d26d(%rip), %rdx
    00002efa: 	movq	%rbx, %rsi
    00002efd: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12029
    00002f02: 	callq	clock@PLT # Offset: 12034
    00002f07: 	movl	iterations(%rip), %r13d
    00002f0e: 	xorl	%ebx, %ebx
    00002f10: 	movq	%rax, start_time(%rip)
    00002f17: 	testl	%r13d, %r13d
    00002f1a: 	jle	.Ltmp2793 # Offset: 12058
.Ltmp2796:
    00002f20: 	movq	0x58(%rsp), %rdi
    00002f25: 	movq	0x60(%rsp), %rsi
    00002f2a: 	movl	$0x3e8, %ecx
    00002f2f: 	movl	$0x3e7, %r12d
    00002f35: 	rep		movsq	(%rsi), %es:(%rdi)
    00002f38: 	movq	0x58(%rsp), %r13
    00002f3d: 	nopl	(%rax) # Size: 3
.Ltmp2794:
    00002f40: 	movl	(%r13,%r12,4), %ecx
    00002f45: 	movq	%r12, %rdx
    00002f48: 	movq	%r13, %rsi
    00002f4b: 	movl	$0x7d0, %edi
    00002f50: 	callq	_ZN9benchmark9__sift_inIPiiEEvlT_lT0_ # Offset: 12112
    00002f55: 	subq	$0x1, %r12
    00002f59: 	jae	.Ltmp2794 # Offset: 12121
    00002f5b: 	movq	0x58(%rsp), %r13
    00002f60: 	movl	$0x7cf, %r12d
    00002f66: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2795:
    00002f70: 	movl	0x250(%rsp), %eax
    00002f77: 	xorl	%edx, %edx
    00002f79: 	movq	%r12, %rdi
    00002f7c: 	movq	%r13, %rsi
    00002f7f: 	movl	(%r13,%r12,4), %ecx
    00002f84: 	movl	%eax, (%r13,%r12,4)
    00002f89: 	callq	_ZN9benchmark9__sift_inIPiiEEvlT_lT0_ # Offset: 12169
    00002f8e: 	subq	$0x1, %r12
    00002f92: 	jne	.Ltmp2795 # Offset: 12178
    00002f94: 	movq	0x38(%rsp), %rdx
    00002f99: 	movq	0x58(%rsp), %rdi
    00002f9e: 	movq	%rbp, %rsi
    00002fa1: 	callq	_Z13verify_sortedIPiEvT_S1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 12193
    00002fa6: 	addl	$0x1, %ebx
    00002fa9: 	cmpl	iterations(%rip), %ebx
    00002faf: 	jl	.Ltmp2796 # Offset: 12207
.Ltmp2793:
    00002fb5: 	callq	clock@PLT # Offset: 12213
    00002fba: 	movq	0x38(%rsp), %rdi
    00002fbf: 	pxor	%xmm0, %xmm0
    00002fc3: 	movq	%rax, end_time(%rip)
    00002fca: 	subq	start_time(%rip), %rax
    00002fd1: 	cvtsi2sd	%rax, %xmm0
    00002fd6: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00002fde: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 12254
    00002fe3: 	movq	0x230(%rsp), %rdi
    00002feb: 	cmpq	0x98(%rsp), %rdi
    00002ff3: 	je	.Ltmp2797 # Offset: 12275
    00002ff5: 	movq	0x240(%rsp), %rax
    00002ffd: 	leaq	0x1(%rax), %rsi
    00003001: 	callq	_ZdlPvm@PLT # Offset: 12289
.Ltmp2797:
    00003006: 	movq	0xa8(%rsp), %rsi
    0000300e: 	movq	0x38(%rsp), %rdi
    00003013: 	leaq	DATAat0x1d780(%rip), %rdx
    0000301a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12314
    0000301f: 	callq	clock@PLT # Offset: 12319
    00003024: 	movl	iterations(%rip), %r12d
    0000302b: 	xorl	%ebx, %ebx
    0000302d: 	movq	%rax, start_time(%rip)
    00003034: 	testl	%r12d, %r12d
    00003037: 	jle	.Ltmp2798 # Offset: 12343
    0000303d: 	nopl	(%rax) # Size: 3
.Ltmp2801:
    00003040: 	movq	0xb0(%rsp), %rsi
    00003048: 	movl	$0x3e8, %ecx
    0000304d: 	movq	%rbp, %rdi
    00003050: 	movl	$0x3e7, %r12d
    00003056: 	rep		movsq	(%rsi), %es:(%rdi)
    00003059: 	nopl	(%rax) # Size: 7
.Ltmp2799:
    00003060: 	movl	(%rbp,%r12,4), %ecx
    00003065: 	movq	%r12, %rdx
    00003068: 	movq	%rbp, %rsi
    0000306b: 	movl	$0x7d0, %edi
    00003070: 	callq	_ZN9benchmark9__sift_inIP9TypeClassIiES2_EEvlT_lT0_ # Offset: 12400
    00003075: 	subq	$0x1, %r12
    00003079: 	jae	.Ltmp2799 # Offset: 12409
    0000307b: 	movl	$0x7cf, %r12d
    00003081: 	nopl	(%rax) # Size: 7
.Ltmp2800:
    00003088: 	movl	0x2190(%rsp), %eax
    0000308f: 	xorl	%edx, %edx
    00003091: 	movq	%r12, %rdi
    00003094: 	movq	%rbp, %rsi
    00003097: 	movl	(%rbp,%r12,4), %ecx
    0000309c: 	movl	%eax, (%rbp,%r12,4)
    000030a1: 	callq	_ZN9benchmark9__sift_inIP9TypeClassIiES2_EEvlT_lT0_ # Offset: 12449
    000030a6: 	subq	$0x1, %r12
    000030aa: 	jne	.Ltmp2800 # Offset: 12458
    000030ac: 	movq	0x38(%rsp), %rdx
    000030b1: 	movq	0x48(%rsp), %rsi
    000030b6: 	movq	%rbp, %rdi
    000030b9: 	callq	_Z13verify_sortedIP9TypeClassIiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 12473
    000030be: 	addl	$0x1, %ebx
    000030c1: 	cmpl	iterations(%rip), %ebx
    000030c7: 	jl	.Ltmp2801 # Offset: 12487
.Ltmp2798:
    000030cd: 	callq	clock@PLT # Offset: 12493
    000030d2: 	movq	0x38(%rsp), %rdi
    000030d7: 	pxor	%xmm0, %xmm0
    000030db: 	movq	%rax, end_time(%rip)
    000030e2: 	subq	start_time(%rip), %rax
    000030e9: 	cvtsi2sd	%rax, %xmm0
    000030ee: 	divsd	DATAat0x1dec0(%rip), %xmm0
    000030f6: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 12534
    000030fb: 	movq	0x230(%rsp), %rdi
    00003103: 	cmpq	0x98(%rsp), %rdi
    0000310b: 	je	.Ltmp2802 # Offset: 12555
    0000310d: 	movq	0x240(%rsp), %rax
    00003115: 	leaq	0x1(%rax), %rsi
    00003119: 	callq	_ZdlPvm@PLT # Offset: 12569
.Ltmp2802:
    0000311e: 	movq	0xa8(%rsp), %rsi
    00003126: 	movq	0x38(%rsp), %rdi
    0000312b: 	leaq	DATAat0x1d7a8(%rip), %rdx
    00003132: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12594
    00003137: 	callq	clock@PLT # Offset: 12599
    0000313c: 	movl	iterations(%rip), %r11d
    00003143: 	xorl	%ebx, %ebx
    00003145: 	movq	%rax, start_time(%rip)
    0000314c: 	testl	%r11d, %r11d
    0000314f: 	jle	.Ltmp2803 # Offset: 12623
    00003155: 	nopl	(%rax) # Size: 3
.Ltmp2806:
    00003158: 	movq	0x48(%rsp), %rdi
    0000315d: 	movl	$0x3e8, %ecx
    00003162: 	movq	0x48(%rsp), %r12
    00003167: 	movl	$0x3e7, %ebp
    0000316c: 	movq	0xc8(%rsp), %rsi
    00003174: 	rep		movsq	(%rsi), %es:(%rdi)
    00003177: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2804:
    00003180: 	movl	(%r12,%rbp,4), %ecx
    00003184: 	movq	%rbp, %rdx
    00003187: 	movq	%r12, %rsi
    0000318a: 	movl	$0x7d0, %edi
    0000318f: 	callq	_ZN9benchmark9__sift_inIP12TypeSubClassIiES2_EEvlT_lT0_ # Offset: 12687
    00003194: 	subq	$0x1, %rbp
    00003198: 	jae	.Ltmp2804 # Offset: 12696
    0000319a: 	movq	0x48(%rsp), %r12
    0000319f: 	movl	$0x7cf, %ebp
    000031a4: 	nopl	(%rax) # Size: 4
.Ltmp2805:
    000031a8: 	movl	0x40d0(%rsp), %eax
    000031af: 	movl	(%r12,%rbp,4), %ecx
    000031b3: 	xorl	%edx, %edx
    000031b5: 	movq	%rbp, %rdi
    000031b8: 	movq	%r12, %rsi
    000031bb: 	movl	%eax, (%r12,%rbp,4)
    000031bf: 	callq	_ZN9benchmark9__sift_inIP12TypeSubClassIiES2_EEvlT_lT0_ # Offset: 12735
    000031c4: 	subq	$0x1, %rbp
    000031c8: 	jne	.Ltmp2805 # Offset: 12744
    000031ca: 	movq	0x38(%rsp), %rdx
    000031cf: 	movq	0x40(%rsp), %rsi
    000031d4: 	movq	0x48(%rsp), %rdi
    000031d9: 	callq	_Z13verify_sortedIP12TypeSubClassIiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 12761
    000031de: 	addl	$0x1, %ebx
    000031e1: 	cmpl	iterations(%rip), %ebx
    000031e7: 	jl	.Ltmp2806 # Offset: 12775
.Ltmp2803:
    000031ed: 	callq	clock@PLT # Offset: 12781
    000031f2: 	movq	0x38(%rsp), %rdi
    000031f7: 	pxor	%xmm0, %xmm0
    000031fb: 	movq	%rax, end_time(%rip)
    00003202: 	subq	start_time(%rip), %rax
    00003209: 	cvtsi2sd	%rax, %xmm0
    0000320e: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00003216: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 12822
    0000321b: 	movq	0x230(%rsp), %rdi
    00003223: 	cmpq	0x98(%rsp), %rdi
    0000322b: 	je	.Ltmp2807 # Offset: 12843
    0000322d: 	movq	0x240(%rsp), %rax
    00003235: 	leaq	0x1(%rax), %rsi
    00003239: 	callq	_ZdlPvm@PLT # Offset: 12857
.Ltmp2807:
    0000323e: 	movq	0xa8(%rsp), %rsi
    00003246: 	movq	0x38(%rsp), %rdi
    0000324b: 	leaq	DATAat0x1d7c8(%rip), %rdx
    00003252: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12882
    00003257: 	callq	clock@PLT # Offset: 12887
    0000325c: 	movl	iterations(%rip), %r10d
    00003263: 	xorl	%ebx, %ebx
    00003265: 	movq	%rax, start_time(%rip)
    0000326c: 	testl	%r10d, %r10d
    0000326f: 	jle	.Ltmp2808 # Offset: 12911
    00003275: 	nopl	(%rax) # Size: 3
.Ltmp2811:
    00003278: 	movq	0x40(%rsp), %rdi
    0000327d: 	movl	$0x3e8, %ecx
    00003282: 	movq	0x40(%rsp), %r12
    00003287: 	movl	$0x3e7, %ebp
    0000328c: 	movq	0xb8(%rsp), %rsi
    00003294: 	rep		movsq	(%rsi), %es:(%rdi)
    00003297: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2809:
    000032a0: 	movl	(%r12,%rbp,4), %ecx
    000032a4: 	movq	%rbp, %rdx
    000032a7: 	movq	%r12, %rsi
    000032aa: 	movl	$0x7d0, %edi
    000032af: 	callq	_ZN9benchmark9__sift_inIP13TypeSub2ClassIiES2_EEvlT_lT0_ # Offset: 12975
    000032b4: 	subq	$0x1, %rbp
    000032b8: 	jae	.Ltmp2809 # Offset: 12984
    000032ba: 	movq	0x40(%rsp), %r12
    000032bf: 	movl	$0x7cf, %ebp
    000032c4: 	nopl	(%rax) # Size: 4
.Ltmp2810:
    000032c8: 	movl	0x6010(%rsp), %eax
    000032cf: 	movl	(%r12,%rbp,4), %ecx
    000032d3: 	xorl	%edx, %edx
    000032d5: 	movq	%rbp, %rdi
    000032d8: 	movq	%r12, %rsi
    000032db: 	movl	%eax, (%r12,%rbp,4)
    000032df: 	callq	_ZN9benchmark9__sift_inIP13TypeSub2ClassIiES2_EEvlT_lT0_ # Offset: 13023
    000032e4: 	subq	$0x1, %rbp
    000032e8: 	jne	.Ltmp2810 # Offset: 13032
    000032ea: 	movq	0x38(%rsp), %rdx
    000032ef: 	movq	0x50(%rsp), %rsi
    000032f4: 	movq	0x40(%rsp), %rdi
    000032f9: 	callq	_Z13verify_sortedIP13TypeSub2ClassIiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 13049
    000032fe: 	addl	$0x1, %ebx
    00003301: 	cmpl	iterations(%rip), %ebx
    00003307: 	jl	.Ltmp2811 # Offset: 13063
.Ltmp2808:
    0000330d: 	callq	clock@PLT # Offset: 13069
    00003312: 	movq	0x38(%rsp), %rdi
    00003317: 	pxor	%xmm0, %xmm0
    0000331b: 	movq	%rax, end_time(%rip)
    00003322: 	subq	start_time(%rip), %rax
    00003329: 	cvtsi2sd	%rax, %xmm0
    0000332e: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00003336: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 13110
    0000333b: 	movq	0x230(%rsp), %rdi
    00003343: 	cmpq	0x98(%rsp), %rdi
    0000334b: 	je	.Ltmp2812 # Offset: 13131
    0000334d: 	movq	0x240(%rsp), %rax
    00003355: 	leaq	0x1(%rax), %rsi
    00003359: 	callq	_ZdlPvm@PLT # Offset: 13145
.Ltmp2812:
    0000335e: 	movq	0xa8(%rsp), %rsi
    00003366: 	movq	0x38(%rsp), %rdi
    0000336b: 	leaq	DATAat0x1d7f0(%rip), %rdx
    00003372: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13170
    00003377: 	callq	clock@PLT # Offset: 13175
    0000337c: 	movl	iterations(%rip), %r9d
    00003383: 	xorl	%ebx, %ebx
    00003385: 	movq	%rax, start_time(%rip)
    0000338c: 	testl	%r9d, %r9d
    0000338f: 	jle	.Ltmp2813 # Offset: 13199
    00003395: 	nopl	(%rax) # Size: 3
.Ltmp2816:
    00003398: 	movq	0x50(%rsp), %rdi
    0000339d: 	movl	$0x3e8, %ecx
    000033a2: 	movq	0x50(%rsp), %r12
    000033a7: 	movl	$0x3e7, %ebp
    000033ac: 	movq	0xa0(%rsp), %rsi
    000033b4: 	rep		movsq	(%rsi), %es:(%rdi)
    000033b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2814:
    000033c0: 	movl	(%r12,%rbp,4), %ecx
    000033c4: 	movq	%rbp, %rdx
    000033c7: 	movq	%r12, %rsi
    000033ca: 	movl	$0x7d0, %edi
    000033cf: 	callq	_ZN9benchmark9__sift_inIP12DeepSubClassIiES2_EEvlT_lT0_ # Offset: 13263
    000033d4: 	subq	$0x1, %rbp
    000033d8: 	jae	.Ltmp2814 # Offset: 13272
    000033da: 	movq	0x50(%rsp), %r12
    000033df: 	movl	$0x7cf, %ebp
    000033e4: 	nopl	(%rax) # Size: 4
.Ltmp2815:
    000033e8: 	movl	0x7f50(%rsp), %eax
    000033ef: 	movl	(%r12,%rbp,4), %ecx
    000033f3: 	xorl	%edx, %edx
    000033f5: 	movq	%rbp, %rdi
    000033f8: 	movq	%r12, %rsi
    000033fb: 	movl	%eax, (%r12,%rbp,4)
    000033ff: 	callq	_ZN9benchmark9__sift_inIP12DeepSubClassIiES2_EEvlT_lT0_ # Offset: 13311
    00003404: 	subq	$0x1, %rbp
    00003408: 	jne	.Ltmp2815 # Offset: 13320
    0000340a: 	movq	0x38(%rsp), %rdx
    0000340f: 	movq	0x60(%rsp), %rsi
    00003414: 	movq	0x50(%rsp), %rdi
    00003419: 	callq	_Z13verify_sortedIP12DeepSubClassIiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 13337
    0000341e: 	addl	$0x1, %ebx
    00003421: 	cmpl	iterations(%rip), %ebx
    00003427: 	jl	.Ltmp2816 # Offset: 13351
.Ltmp2813:
    0000342d: 	callq	clock@PLT # Offset: 13357
    00003432: 	movq	0x38(%rsp), %rdi
    00003437: 	pxor	%xmm0, %xmm0
    0000343b: 	movq	%rax, end_time(%rip)
    00003442: 	subq	start_time(%rip), %rax
    00003449: 	cvtsi2sd	%rax, %xmm0
    0000344e: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00003456: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 13398
    0000345b: 	movq	0x230(%rsp), %rdi
    00003463: 	cmpq	0x98(%rsp), %rdi
    0000346b: 	je	.Ltmp2817 # Offset: 13419
    0000346d: 	movq	0x240(%rsp), %rax
    00003475: 	leaq	0x1(%rax), %rsi
    00003479: 	callq	_ZdlPvm@PLT # Offset: 13433
.Ltmp2817:
    0000347e: 	movq	0xa8(%rsp), %rsi
    00003486: 	movq	0x38(%rsp), %rdi
    0000348b: 	leaq	DATAat0x1d810(%rip), %rdx
    00003492: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13458
    00003497: 	callq	clock@PLT # Offset: 13463
    0000349c: 	movl	iterations(%rip), %r8d
    000034a3: 	xorl	%r15d, %r15d
    000034a6: 	leaq	0xf0(%rsp), %r13
    000034ae: 	movq	%rax, start_time(%rip)
    000034b5: 	leaq	0x17948(%rsp), %rax
    000034bd: 	leaq	_ZN16TypeVirtualClassIiEcviEv(%rip), %r12
    000034c4: 	movq	%rax, 0x40(%rsp)
    000034c9: 	testl	%r8d, %r8d
    000034cc: 	jle	.Ltmp2818 # Offset: 13516
    000034d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2829:
    000034d8: 	movq	0x28(%rsp), %rdx
    000034dd: 	movq	0x30(%rsp), %rax
    000034e2: 	movq	0x88(%rsp), %rsi
    000034ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2819:
    000034f0: 	movl	0x8(%rax), %ecx
    000034f3: 	addq	$0x10, %rax
    000034f7: 	addq	$0x10, %rdx
    000034fb: 	movl	%ecx, -0x8(%rdx)
    000034fe: 	cmpq	%rsi, %rax
    00003501: 	jne	.Ltmp2819 # Offset: 13569
    00003503: 	movq	0x40(%rsp), %rbp
    00003508: 	movl	$0x3e7, %ebx
    0000350d: 	nopl	(%rax) # Size: 3
.Ltmp2820:
    00003510: 	leaq	_ZTV16TypeVirtualClassIiE+16(%rip), %rdi
    00003517: 	movl	(%rbp), %eax
    0000351a: 	movq	%r13, %rcx
    0000351d: 	movq	%rbx, %rdx
    00003520: 	movq	0x28(%rsp), %rsi
    00003525: 	movq	%rdi, 0xf0(%rsp)
    0000352d: 	movl	$0x7d0, %edi
    00003532: 	movl	%eax, 0xf8(%rsp)
    00003539: 	callq	_ZN9benchmark9__sift_inIP16TypeVirtualClassIiES2_EEvlT_lT0_ # Offset: 13625
    0000353e: 	subq	$0x1, %rbx
    00003542: 	subq	$0x10, %rbp
    00003546: 	cmpq	$-0x1, %rbx
    0000354a: 	jne	.Ltmp2820 # Offset: 13642
    0000354c: 	leaq	0x1b7c8(%rsp), %rbp
    00003554: 	movl	$0x7cf, %ebx
    00003559: 	leaq	0xe0(%rsp), %r14
    00003561: 	nopl	(%rax) # Size: 7
.Ltmp2821:
    00003568: 	movl	0x13ad8(%rsp), %edx
    0000356f: 	movl	(%rbp), %eax
    00003572: 	movq	%r14, %rcx
    00003575: 	movq	%rbx, %rdi
    00003578: 	leaq	_ZTV16TypeVirtualClassIiE+16(%rip), %rsi
    0000357f: 	movl	%edx, (%rbp)
    00003582: 	xorl	%edx, %edx
    00003584: 	movq	%rsi, 0xe0(%rsp)
    0000358c: 	movq	0x28(%rsp), %rsi
    00003591: 	movl	%eax, 0xe8(%rsp)
    00003598: 	callq	_ZN9benchmark9__sift_inIP16TypeVirtualClassIiES2_EEvlT_lT0_ # Offset: 13720
    0000359d: 	subq	$0x10, %rbp
    000035a1: 	subq	$0x1, %rbx
    000035a5: 	jne	.Ltmp2821 # Offset: 13733
    000035a7: 	leaq	0x13ae0(%rsp), %rbx
    000035af: 	jmp	.Ltmp2822 # Offset: 13743
    000035b1: 	nopl	(%rax) # Size: 7
.Ltmp2826:
    000035b8: 	movq	-0x20(%rbx), %rax
    000035bc: 	movl	-0x8(%rbx), %ebp
    000035bf: 	movq	(%rax), %rax
    000035c2: 	cmpq	%r12, %rax
    000035c5: 	jne	.Ltmp2823 # Offset: 13765
.Ltmp2827:
    000035c7: 	movl	-0x18(%rbx), %eax
    000035ca: 	cmpl	%eax, %ebp
    000035cc: 	jl	.Ltmp2824 # Offset: 13772
.Ltmp2828:
    000035ce: 	cmpq	0x18(%rsp), %rbx
    000035d3: 	je	.Ltmp2825 # Offset: 13779
.Ltmp2822:
    000035d5: 	leaq	-0x10(%rbx), %r14
    000035d9: 	movq	%rbx, %rdi
    000035dc: 	movq	(%rbx), %rax
    000035df: 	addq	$0x10, %rbx
    000035e3: 	movq	(%rax), %rax
    000035e6: 	cmpq	%r12, %rax
    000035e9: 	je	.Ltmp2826 # Offset: 13801
    000035eb: 	callq	*%rax # Offset: 13803
    000035ed: 	movl	%eax, %ebp
    000035ef: 	movq	-0x20(%rbx), %rax
    000035f3: 	movq	(%rax), %rax
    000035f6: 	cmpq	%r12, %rax
    000035f9: 	je	.Ltmp2827 # Offset: 13817
    000035fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2823:
    00003600: 	movq	%r14, %rdi
    00003603: 	callq	*%rax # Offset: 13827
    00003605: 	cmpl	%eax, %ebp
    00003607: 	jge	.Ltmp2828 # Offset: 13831
.Ltmp2824:
    00003609: 	movq	0x230(%rsp), %rdx
    00003611: 	leaq	DATAat0x1d1cf(%rip), %rsi
    00003618: 	movl	$0x1, %edi
    0000361d: 	xorl	%eax, %eax
    0000361f: 	callq	__printf_chk@PLT # Offset: 13855
.Ltmp2825:
    00003624: 	addl	$0x1, %r15d
    00003628: 	cmpl	iterations(%rip), %r15d
    0000362f: 	jl	.Ltmp2829 # Offset: 13871
.Ltmp2818:
    00003635: 	callq	clock@PLT # Offset: 13877
    0000363a: 	movq	0x38(%rsp), %rdi
    0000363f: 	pxor	%xmm0, %xmm0
    00003643: 	movq	%rax, end_time(%rip)
    0000364a: 	subq	start_time(%rip), %rax
    00003651: 	cvtsi2sd	%rax, %xmm0
    00003656: 	divsd	DATAat0x1dec0(%rip), %xmm0
    0000365e: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 13918
    00003663: 	movq	0x230(%rsp), %rdi
    0000366b: 	cmpq	0x98(%rsp), %rdi
    00003673: 	je	.Ltmp2830 # Offset: 13939
    00003675: 	movq	0x240(%rsp), %rax
    0000367d: 	leaq	0x1(%rax), %rsi
    00003681: 	callq	_ZdlPvm@PLT # Offset: 13953
.Ltmp2830:
    00003686: 	movq	0xa8(%rsp), %rsi
    0000368e: 	movq	0x38(%rsp), %rdi
    00003693: 	leaq	DATAat0x1d838(%rip), %rdx
    0000369a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13978
    0000369f: 	callq	clock@PLT # Offset: 13983
    000036a4: 	movl	iterations(%rip), %edi
    000036aa: 	xorl	%r14d, %r14d
    000036ad: 	leaq	0x1f648(%rsp), %r15
    000036b5: 	movq	%rax, start_time(%rip)
    000036bc: 	leaq	0x110(%rsp), %r12
    000036c4: 	leaq	0x100(%rsp), %r13
    000036cc: 	testl	%edi, %edi
    000036ce: 	jle	.Ltmp2831 # Offset: 14030
    000036d4: 	nopl	(%rax) # Size: 4
.Ltmp2835:
    000036d8: 	movq	0x18(%rsp), %rdx
    000036dd: 	movq	0x88(%rsp), %rax
    000036e5: 	movq	0x80(%rsp), %rsi
    000036ed: 	nopl	(%rax) # Size: 3
.Ltmp2832:
    000036f0: 	movl	0x8(%rax), %ecx
    000036f3: 	addq	$0x10, %rax
    000036f7: 	addq	$0x10, %rdx
    000036fb: 	movl	%ecx, -0x8(%rdx)
    000036fe: 	cmpq	%rsi, %rax
    00003701: 	jne	.Ltmp2832 # Offset: 14081
    00003703: 	movq	%r15, %rbp
    00003706: 	movl	$0x3e7, %ebx
    0000370b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2833:
    00003710: 	movl	(%rbp), %eax
    00003713: 	movq	0x18(%rsp), %rsi
    00003718: 	movq	%r12, %rcx
    0000371b: 	movq	%rbx, %rdx
    0000371e: 	movl	$0x7d0, %edi
    00003723: 	movl	%eax, 0x118(%rsp)
    0000372a: 	leaq	_ZTV19TypeVirtualSubClassIiE+16(%rip), %rax
    00003731: 	movq	%rax, 0x110(%rsp)
    00003739: 	callq	_ZN9benchmark9__sift_inIP19TypeVirtualSubClassIiES2_EEvlT_lT0_ # Offset: 14137
    0000373e: 	subq	$0x1, %rbx
    00003742: 	subq	$0x10, %rbp
    00003746: 	cmpq	$-0x1, %rbx
    0000374a: 	jne	.Ltmp2833 # Offset: 14154
    0000374c: 	leaq	0x234c8(%rsp), %rbp
    00003754: 	movl	$0x7cf, %ebx
    00003759: 	nopl	(%rax) # Size: 7
.Ltmp2834:
    00003760: 	movl	0x1b7d8(%rsp), %edx
    00003767: 	movl	(%rbp), %eax
    0000376a: 	movq	%r13, %rcx
    0000376d: 	movq	%rbx, %rdi
    00003770: 	movq	0x18(%rsp), %rsi
    00003775: 	movl	%edx, (%rbp)
    00003778: 	xorl	%edx, %edx
    0000377a: 	movl	%eax, 0x108(%rsp)
    00003781: 	leaq	_ZTV19TypeVirtualSubClassIiE+16(%rip), %rax
    00003788: 	movq	%rax, 0x100(%rsp)
    00003790: 	callq	_ZN9benchmark9__sift_inIP19TypeVirtualSubClassIiES2_EEvlT_lT0_ # Offset: 14224
    00003795: 	subq	$0x10, %rbp
    00003799: 	subq	$0x1, %rbx
    0000379d: 	jne	.Ltmp2834 # Offset: 14237
    0000379f: 	movq	0x38(%rsp), %rdx
    000037a4: 	movq	(%rsp), %rsi
    000037a8: 	movq	0x18(%rsp), %rdi
    000037ad: 	callq	_Z13verify_sortedIP19TypeVirtualSubClassIiEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 14253
    000037b2: 	addl	$0x1, %r14d
    000037b6: 	cmpl	iterations(%rip), %r14d
    000037bd: 	jl	.Ltmp2835 # Offset: 14269
.Ltmp2831:
    000037c3: 	callq	clock@PLT # Offset: 14275
    000037c8: 	movq	0x38(%rsp), %rdi
    000037cd: 	pxor	%xmm0, %xmm0
    000037d1: 	movq	%rax, end_time(%rip)
    000037d8: 	subq	start_time(%rip), %rax
    000037df: 	cvtsi2sd	%rax, %xmm0
    000037e4: 	divsd	DATAat0x1dec0(%rip), %xmm0
    000037ec: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 14316
    000037f1: 	movq	0x230(%rsp), %rdi
    000037f9: 	cmpq	0x98(%rsp), %rdi
    00003801: 	je	.Ltmp2836 # Offset: 14337
    00003803: 	movq	0x240(%rsp), %rax
    0000380b: 	leaq	0x1(%rax), %rsi
    0000380f: 	callq	_ZdlPvm@PLT # Offset: 14351
.Ltmp2836:
    00003814: 	movq	0xa8(%rsp), %rsi
    0000381c: 	movq	0x38(%rsp), %rdi
    00003821: 	leaq	DATAat0x1d860(%rip), %rdx
    00003828: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 14376
    0000382d: 	callq	clock@PLT # Offset: 14381
    00003832: 	movl	iterations(%rip), %esi
    00003838: 	xorl	%r15d, %r15d
    0000383b: 	leaq	0x130(%rsp), %r13
    00003843: 	movq	%rax, start_time(%rip)
    0000384a: 	leaq	0x27348(%rsp), %rax
    00003852: 	leaq	_ZN14WorkerSubClassIiEcviEv(%rip), %r12
    00003859: 	movq	%rax, 0x18(%rsp)
    0000385e: 	testl	%esi, %esi
    00003860: 	jle	.Ltmp2837 # Offset: 14432
    00003866: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2847:
    00003870: 	movq	(%rsp), %rdx
    00003874: 	movq	0x80(%rsp), %rax
    0000387c: 	movq	0x78(%rsp), %rsi
    00003881: 	nopl	(%rax) # Size: 7
.Ltmp2838:
    00003888: 	movl	0x8(%rax), %ecx
    0000388b: 	addq	$0x10, %rax
    0000388f: 	addq	$0x10, %rdx
    00003893: 	movl	%ecx, -0x8(%rdx)
    00003896: 	cmpq	%rsi, %rax
    00003899: 	jne	.Ltmp2838 # Offset: 14489
    0000389b: 	movq	0x18(%rsp), %rbp
    000038a0: 	movl	$0x3e7, %ebx
    000038a5: 	nopl	(%rax) # Size: 3
.Ltmp2839:
    000038a8: 	leaq	_ZTV14WorkerSubClassIiE+16(%rip), %rdi
    000038af: 	movl	(%rbp), %eax
    000038b2: 	movq	%r13, %rcx
    000038b5: 	movq	%rbx, %rdx
    000038b8: 	movq	(%rsp), %rsi
    000038bc: 	movq	%rdi, 0x130(%rsp)
    000038c4: 	movl	$0x7d0, %edi
    000038c9: 	movl	%eax, 0x138(%rsp)
    000038d0: 	callq	_ZN9benchmark9__sift_inIP14WorkerSubClassIiES2_EEvlT_lT0_ # Offset: 14544
    000038d5: 	subq	$0x1, %rbx
    000038d9: 	subq	$0x10, %rbp
    000038dd: 	cmpq	$-0x1, %rbx
    000038e1: 	jne	.Ltmp2839 # Offset: 14561
    000038e3: 	leaq	0x2b1c8(%rsp), %rbp
    000038eb: 	movl	$0x7cf, %ebx
    000038f0: 	leaq	0x120(%rsp), %r14
    000038f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2840:
    00003900: 	movl	0x234d8(%rsp), %edx
    00003907: 	movl	(%rbp), %eax
    0000390a: 	movq	%r14, %rcx
    0000390d: 	movq	%rbx, %rdi
    00003910: 	leaq	_ZTV14WorkerSubClassIiE+16(%rip), %rsi
    00003917: 	movl	%edx, (%rbp)
    0000391a: 	xorl	%edx, %edx
    0000391c: 	movq	%rsi, 0x120(%rsp)
    00003924: 	movq	(%rsp), %rsi
    00003928: 	movl	%eax, 0x128(%rsp)
    0000392f: 	callq	_ZN9benchmark9__sift_inIP14WorkerSubClassIiES2_EEvlT_lT0_ # Offset: 14639
    00003934: 	subq	$0x10, %rbp
    00003938: 	subq	$0x1, %rbx
    0000393c: 	jne	.Ltmp2840 # Offset: 14652
    0000393e: 	leaq	0x234e0(%rsp), %rbx
    00003946: 	jmp	.Ltmp2841 # Offset: 14662
    00003948: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2845:
    00003950: 	movl	-0x18(%rbx), %eax
    00003953: 	cmpl	%eax, %ebp
    00003955: 	jl	.Ltmp2842 # Offset: 14677
.Ltmp2846:
    00003957: 	cmpq	0x8(%rsp), %rbx
    0000395c: 	je	.Ltmp2843 # Offset: 14684
.Ltmp2841:
    0000395e: 	leaq	-0x10(%rbx), %r14
    00003962: 	movq	%rbx, %rdi
    00003965: 	movq	(%rbx), %rax
    00003968: 	addq	$0x10, %rbx
    0000396c: 	movq	(%rax), %rax
    0000396f: 	cmpq	%r12, %rax
    00003972: 	jne	.Ltmp2844 # Offset: 14706
    00003978: 	movl	-0x8(%rbx), %ebp
.Ltmp2900:
    0000397b: 	movq	-0x20(%rbx), %rax
    0000397f: 	movq	(%rax), %rax
    00003982: 	cmpq	%r12, %rax
    00003985: 	je	.Ltmp2845 # Offset: 14725
    00003987: 	movq	%r14, %rdi
    0000398a: 	callq	*%rax # Offset: 14730
    0000398c: 	cmpl	%eax, %ebp
    0000398e: 	jge	.Ltmp2846 # Offset: 14734
.Ltmp2842:
    00003990: 	movq	0x230(%rsp), %rdx
    00003998: 	leaq	DATAat0x1d1cf(%rip), %rsi
    0000399f: 	movl	$0x1, %edi
    000039a4: 	xorl	%eax, %eax
    000039a6: 	callq	__printf_chk@PLT # Offset: 14758
.Ltmp2843:
    000039ab: 	addl	$0x1, %r15d
    000039af: 	cmpl	iterations(%rip), %r15d
    000039b6: 	jl	.Ltmp2847 # Offset: 14774
.Ltmp2837:
    000039bc: 	callq	clock@PLT # Offset: 14780
    000039c1: 	movq	0x38(%rsp), %rdi
    000039c6: 	pxor	%xmm0, %xmm0
    000039ca: 	movq	%rax, end_time(%rip)
    000039d1: 	subq	start_time(%rip), %rax
    000039d8: 	cvtsi2sd	%rax, %xmm0
    000039dd: 	divsd	DATAat0x1dec0(%rip), %xmm0
    000039e5: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 14821
    000039ea: 	movq	0x230(%rsp), %rdi
    000039f2: 	cmpq	0x98(%rsp), %rdi
    000039fa: 	je	.Ltmp2848 # Offset: 14842
    000039fc: 	movq	0x240(%rsp), %rax
    00003a04: 	leaq	0x1(%rax), %rsi
    00003a08: 	callq	_ZdlPvm@PLT # Offset: 14856
.Ltmp2848:
    00003a0d: 	movq	0xa8(%rsp), %rsi
    00003a15: 	movq	0x38(%rsp), %rdi
    00003a1a: 	leaq	DATAat0x1d888(%rip), %rdx
    00003a21: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 14881
    00003a26: 	callq	clock@PLT # Offset: 14886
    00003a2b: 	movl	iterations(%rip), %ecx
    00003a31: 	xorl	%r15d, %r15d
    00003a34: 	leaq	0x150(%rsp), %r13
    00003a3c: 	movq	%rax, start_time(%rip)
    00003a43: 	leaq	0x2f048(%rsp), %rax
    00003a4b: 	leaq	_ZN18WorkerDeepSubClassIiEcviEv(%rip), %r12
    00003a52: 	movq	%rax, (%rsp)
    00003a56: 	testl	%ecx, %ecx
    00003a58: 	jle	.Ltmp2849 # Offset: 14936
    00003a5e: 	nop # Size: 2
.Ltmp2860:
    00003a60: 	movq	0x8(%rsp), %rdx
    00003a65: 	movq	0x78(%rsp), %rax
    00003a6a: 	movq	0x90(%rsp), %rsi
    00003a72: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2850:
    00003a78: 	movl	0x8(%rax), %ecx
    00003a7b: 	addq	$0x10, %rax
    00003a7f: 	addq	$0x10, %rdx
    00003a83: 	movl	%ecx, -0x8(%rdx)
    00003a86: 	cmpq	%rsi, %rax
    00003a89: 	jne	.Ltmp2850 # Offset: 14985
    00003a8b: 	movq	(%rsp), %rbp
    00003a8f: 	movl	$0x3e7, %ebx
    00003a94: 	nopl	(%rax) # Size: 4
.Ltmp2851:
    00003a98: 	leaq	_ZTV18WorkerDeepSubClassIiE+16(%rip), %rdi
    00003a9f: 	movl	(%rbp), %eax
    00003aa2: 	movq	%r13, %rcx
    00003aa5: 	movq	%rbx, %rdx
    00003aa8: 	movq	0x8(%rsp), %rsi
    00003aad: 	movq	%rdi, 0x150(%rsp)
    00003ab5: 	movl	$0x7d0, %edi
    00003aba: 	movl	%eax, 0x158(%rsp)
    00003ac1: 	callq	_ZN9benchmark9__sift_inIP18WorkerDeepSubClassIiES2_EEvlT_lT0_ # Offset: 15041
    00003ac6: 	subq	$0x1, %rbx
    00003aca: 	subq	$0x10, %rbp
    00003ace: 	cmpq	$-0x1, %rbx
    00003ad2: 	jne	.Ltmp2851 # Offset: 15058
    00003ad4: 	leaq	0x32ec8(%rsp), %rbp
    00003adc: 	movl	$0x7cf, %ebx
    00003ae1: 	leaq	0x140(%rsp), %r14
    00003ae9: 	nopl	(%rax) # Size: 7
.Ltmp2852:
    00003af0: 	movl	0x2b1d8(%rsp), %edx
    00003af7: 	movl	(%rbp), %eax
    00003afa: 	movq	%r14, %rcx
    00003afd: 	movq	%rbx, %rdi
    00003b00: 	leaq	_ZTV18WorkerDeepSubClassIiE+16(%rip), %rsi
    00003b07: 	movl	%edx, (%rbp)
    00003b0a: 	xorl	%edx, %edx
    00003b0c: 	movq	%rsi, 0x140(%rsp)
    00003b14: 	movq	0x8(%rsp), %rsi
    00003b19: 	movl	%eax, 0x148(%rsp)
    00003b20: 	callq	_ZN9benchmark9__sift_inIP18WorkerDeepSubClassIiES2_EEvlT_lT0_ # Offset: 15136
    00003b25: 	subq	$0x10, %rbp
    00003b29: 	subq	$0x1, %rbx
    00003b2d: 	jne	.Ltmp2852 # Offset: 15149
    00003b2f: 	leaq	0x2b1e0(%rsp), %rbx
    00003b37: 	jmp	.Ltmp2853 # Offset: 15159
    00003b39: 	nopl	(%rax) # Size: 7
.Ltmp2857:
    00003b40: 	movq	-0x20(%rbx), %rax
    00003b44: 	movl	-0x8(%rbx), %ebp
    00003b47: 	movq	(%rax), %rax
    00003b4a: 	cmpq	%r12, %rax
    00003b4d: 	jne	.Ltmp2854 # Offset: 15181
.Ltmp2858:
    00003b4f: 	movl	-0x18(%rbx), %eax
    00003b52: 	cmpl	%eax, %ebp
    00003b54: 	jl	.Ltmp2855 # Offset: 15188
.Ltmp2859:
    00003b56: 	cmpq	0x10(%rsp), %rbx
    00003b5b: 	je	.Ltmp2856 # Offset: 15195
.Ltmp2853:
    00003b5d: 	leaq	-0x10(%rbx), %r14
    00003b61: 	movq	%rbx, %rdi
    00003b64: 	movq	(%rbx), %rax
    00003b67: 	addq	$0x10, %rbx
    00003b6b: 	movq	(%rax), %rax
    00003b6e: 	cmpq	%r12, %rax
    00003b71: 	je	.Ltmp2857 # Offset: 15217
    00003b73: 	callq	*%rax # Offset: 15219
    00003b75: 	movl	%eax, %ebp
    00003b77: 	movq	-0x20(%rbx), %rax
    00003b7b: 	movq	(%rax), %rax
    00003b7e: 	cmpq	%r12, %rax
    00003b81: 	je	.Ltmp2858 # Offset: 15233
.Ltmp2854:
    00003b83: 	movq	%r14, %rdi
    00003b86: 	callq	*%rax # Offset: 15238
    00003b88: 	cmpl	%eax, %ebp
    00003b8a: 	jge	.Ltmp2859 # Offset: 15242
.Ltmp2855:
    00003b8c: 	movq	0x230(%rsp), %rdx
    00003b94: 	leaq	DATAat0x1d1cf(%rip), %rsi
    00003b9b: 	movl	$0x1, %edi
    00003ba0: 	xorl	%eax, %eax
    00003ba2: 	callq	__printf_chk@PLT # Offset: 15266
.Ltmp2856:
    00003ba7: 	addl	$0x1, %r15d
    00003bab: 	cmpl	iterations(%rip), %r15d
    00003bb2: 	jl	.Ltmp2860 # Offset: 15282
.Ltmp2849:
    00003bb8: 	callq	clock@PLT # Offset: 15288
    00003bbd: 	movq	0x38(%rsp), %rdi
    00003bc2: 	pxor	%xmm0, %xmm0
    00003bc6: 	movq	%rax, end_time(%rip)
    00003bcd: 	subq	start_time(%rip), %rax
    00003bd4: 	cvtsi2sd	%rax, %xmm0
    00003bd9: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00003be1: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 15329
    00003be6: 	movq	0x230(%rsp), %rdi
    00003bee: 	cmpq	0x98(%rsp), %rdi
    00003bf6: 	je	.Ltmp2861 # Offset: 15350
    00003bf8: 	movq	0x240(%rsp), %rax
    00003c00: 	leaq	0x1(%rax), %rsi
    00003c04: 	callq	_ZdlPvm@PLT # Offset: 15364
.Ltmp2861:
    00003c09: 	movq	0xa8(%rsp), %rsi
    00003c11: 	movq	0x38(%rsp), %rdi
    00003c16: 	leaq	DATAat0x1d8b0(%rip), %rdx
    00003c1d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 15389
    00003c22: 	callq	clock@PLT # Offset: 15394
    00003c27: 	movl	iterations(%rip), %edx
    00003c2d: 	xorl	%r15d, %r15d
    00003c30: 	leaq	0x170(%rsp), %r13
    00003c38: 	movq	%rax, start_time(%rip)
    00003c3f: 	leaq	0x36d48(%rsp), %rax
    00003c47: 	leaq	_ZN15WorkerSubClass2IiEcviEv(%rip), %r12
    00003c4e: 	movq	%rax, (%rsp)
    00003c52: 	testl	%edx, %edx
    00003c54: 	jle	.Ltmp2862 # Offset: 15444
    00003c5a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2873:
    00003c60: 	movq	0x10(%rsp), %rdx
    00003c65: 	movq	0x90(%rsp), %rax
    00003c6d: 	movq	0x70(%rsp), %rsi
    00003c72: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2863:
    00003c78: 	movl	0x8(%rax), %ecx
    00003c7b: 	addq	$0x10, %rax
    00003c7f: 	addq	$0x10, %rdx
    00003c83: 	movl	%ecx, -0x8(%rdx)
    00003c86: 	cmpq	%rsi, %rax
    00003c89: 	jne	.Ltmp2863 # Offset: 15497
    00003c8b: 	movq	(%rsp), %rbp
    00003c8f: 	movl	$0x3e7, %ebx
    00003c94: 	nopl	(%rax) # Size: 4
.Ltmp2864:
    00003c98: 	leaq	_ZTV15WorkerSubClass2IiE+16(%rip), %rdi
    00003c9f: 	movl	(%rbp), %eax
    00003ca2: 	movq	%r13, %rcx
    00003ca5: 	movq	%rbx, %rdx
    00003ca8: 	movq	0x10(%rsp), %rsi
    00003cad: 	movq	%rdi, 0x170(%rsp)
    00003cb5: 	movl	$0x7d0, %edi
    00003cba: 	movl	%eax, 0x178(%rsp)
    00003cc1: 	callq	_ZN9benchmark9__sift_inIP15WorkerSubClass2IiES2_EEvlT_lT0_ # Offset: 15553
    00003cc6: 	subq	$0x1, %rbx
    00003cca: 	subq	$0x10, %rbp
    00003cce: 	cmpq	$-0x1, %rbx
    00003cd2: 	jne	.Ltmp2864 # Offset: 15570
    00003cd4: 	leaq	0x3abc8(%rsp), %rbp
    00003cdc: 	movl	$0x7cf, %ebx
    00003ce1: 	leaq	0x160(%rsp), %r14
    00003ce9: 	nopl	(%rax) # Size: 7
.Ltmp2865:
    00003cf0: 	movl	0x32ed8(%rsp), %edx
    00003cf7: 	movl	(%rbp), %eax
    00003cfa: 	movq	%r14, %rcx
    00003cfd: 	movq	%rbx, %rdi
    00003d00: 	leaq	_ZTV15WorkerSubClass2IiE+16(%rip), %rsi
    00003d07: 	movl	%edx, (%rbp)
    00003d0a: 	xorl	%edx, %edx
    00003d0c: 	movq	%rsi, 0x160(%rsp)
    00003d14: 	movq	0x10(%rsp), %rsi
    00003d19: 	movl	%eax, 0x168(%rsp)
    00003d20: 	callq	_ZN9benchmark9__sift_inIP15WorkerSubClass2IiES2_EEvlT_lT0_ # Offset: 15648
    00003d25: 	subq	$0x10, %rbp
    00003d29: 	subq	$0x1, %rbx
    00003d2d: 	jne	.Ltmp2865 # Offset: 15661
    00003d2f: 	leaq	0x32ee0(%rsp), %rbx
    00003d37: 	jmp	.Ltmp2866 # Offset: 15671
    00003d39: 	nopl	(%rax) # Size: 7
.Ltmp2870:
    00003d40: 	movq	-0x20(%rbx), %rax
    00003d44: 	movl	-0x8(%rbx), %ebp
    00003d47: 	movq	(%rax), %rax
    00003d4a: 	cmpq	%r12, %rax
    00003d4d: 	jne	.Ltmp2867 # Offset: 15693
.Ltmp2871:
    00003d4f: 	movl	-0x18(%rbx), %eax
    00003d52: 	cmpl	%eax, %ebp
    00003d54: 	jl	.Ltmp2868 # Offset: 15700
.Ltmp2872:
    00003d56: 	cmpq	0x20(%rsp), %rbx
    00003d5b: 	je	.Ltmp2869 # Offset: 15707
.Ltmp2866:
    00003d5d: 	leaq	-0x10(%rbx), %r14
    00003d61: 	movq	%rbx, %rdi
    00003d64: 	movq	(%rbx), %rax
    00003d67: 	addq	$0x10, %rbx
    00003d6b: 	movq	(%rax), %rax
    00003d6e: 	cmpq	%r12, %rax
    00003d71: 	je	.Ltmp2870 # Offset: 15729
    00003d73: 	callq	*%rax # Offset: 15731
    00003d75: 	movl	%eax, %ebp
    00003d77: 	movq	-0x20(%rbx), %rax
    00003d7b: 	movq	(%rax), %rax
    00003d7e: 	cmpq	%r12, %rax
    00003d81: 	je	.Ltmp2871 # Offset: 15745
    00003d83: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2867:
    00003d88: 	movq	%r14, %rdi
    00003d8b: 	callq	*%rax # Offset: 15755
    00003d8d: 	cmpl	%eax, %ebp
    00003d8f: 	jge	.Ltmp2872 # Offset: 15759
.Ltmp2868:
    00003d91: 	movq	0x230(%rsp), %rdx
    00003d99: 	leaq	DATAat0x1d1cf(%rip), %rsi
    00003da0: 	movl	$0x1, %edi
    00003da5: 	xorl	%eax, %eax
    00003da7: 	callq	__printf_chk@PLT # Offset: 15783
.Ltmp2869:
    00003dac: 	addl	$0x1, %r15d
    00003db0: 	cmpl	iterations(%rip), %r15d
    00003db7: 	jl	.Ltmp2873 # Offset: 15799
.Ltmp2862:
    00003dbd: 	callq	clock@PLT # Offset: 15805
    00003dc2: 	movq	0x38(%rsp), %rdi
    00003dc7: 	pxor	%xmm0, %xmm0
    00003dcb: 	movq	%rax, end_time(%rip)
    00003dd2: 	subq	start_time(%rip), %rax
    00003dd9: 	cvtsi2sd	%rax, %xmm0
    00003dde: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00003de6: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 15846
    00003deb: 	movq	0x230(%rsp), %rdi
    00003df3: 	cmpq	0x98(%rsp), %rdi
    00003dfb: 	je	.Ltmp2874 # Offset: 15867
    00003dfd: 	movq	0x240(%rsp), %rax
    00003e05: 	leaq	0x1(%rax), %rsi
    00003e09: 	callq	_ZdlPvm@PLT # Offset: 15881
.Ltmp2874:
    00003e0e: 	movq	0xa8(%rsp), %rsi
    00003e16: 	movq	0x38(%rsp), %rdi
    00003e1b: 	leaq	DATAat0x1d8d8(%rip), %rdx
    00003e22: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 15906
    00003e27: 	callq	clock@PLT # Offset: 15911
    00003e2c: 	xorl	%r13d, %r13d
    00003e2f: 	leaq	0x3ea48(%rsp), %r15
    00003e37: 	leaq	_ZN15WorkerSubClass3IiEcviEv(%rip), %r12
    00003e3e: 	movq	%rax, start_time(%rip)
    00003e45: 	movl	iterations(%rip), %eax
    00003e4b: 	testl	%eax, %eax
    00003e4d: 	jle	.Ltmp2875 # Offset: 15949
    00003e53: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2886:
    00003e58: 	movq	0x20(%rsp), %rdx
    00003e5d: 	movq	0x70(%rsp), %rax
    00003e62: 	movq	0xc0(%rsp), %rsi
    00003e6a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2876:
    00003e70: 	movl	0x8(%rax), %ecx
    00003e73: 	addq	$0x10, %rax
    00003e77: 	addq	$0x10, %rdx
    00003e7b: 	movl	%ecx, -0x8(%rdx)
    00003e7e: 	cmpq	%rsi, %rax
    00003e81: 	jne	.Ltmp2876 # Offset: 16001
    00003e83: 	movq	%r15, %rbp
    00003e86: 	movl	$0x3e7, %ebx
    00003e8b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2877:
    00003e90: 	leaq	_ZTV15WorkerSubClass3IiE+16(%rip), %rdi
    00003e97: 	movl	(%rbp), %eax
    00003e9a: 	movq	0x68(%rsp), %rcx
    00003e9f: 	movq	%rbx, %rdx
    00003ea2: 	movq	0x20(%rsp), %rsi
    00003ea7: 	movq	%rdi, 0x190(%rsp)
    00003eaf: 	movl	$0x7d0, %edi
    00003eb4: 	movl	%eax, 0x198(%rsp)
    00003ebb: 	callq	_ZN9benchmark9__sift_inIP15WorkerSubClass3IiES2_EEvlT_lT0_ # Offset: 16059
    00003ec0: 	subq	$0x1, %rbx
    00003ec4: 	subq	$0x10, %rbp
    00003ec8: 	cmpq	$-0x1, %rbx
    00003ecc: 	jne	.Ltmp2877 # Offset: 16076
    00003ece: 	leaq	0x428c8(%rsp), %rbp
    00003ed6: 	movl	$0x7cf, %ebx
    00003edb: 	leaq	0x180(%rsp), %r14
    00003ee3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2878:
    00003ee8: 	movl	0x3abd8(%rsp), %edx
    00003eef: 	movl	(%rbp), %eax
    00003ef2: 	movq	%r14, %rcx
    00003ef5: 	movq	%rbx, %rdi
    00003ef8: 	leaq	_ZTV15WorkerSubClass3IiE+16(%rip), %rsi
    00003eff: 	movl	%edx, (%rbp)
    00003f02: 	xorl	%edx, %edx
    00003f04: 	movq	%rsi, 0x180(%rsp)
    00003f0c: 	movq	0x20(%rsp), %rsi
    00003f11: 	movl	%eax, 0x188(%rsp)
    00003f18: 	callq	_ZN9benchmark9__sift_inIP15WorkerSubClass3IiES2_EEvlT_lT0_ # Offset: 16152
    00003f1d: 	subq	$0x10, %rbp
    00003f21: 	subq	$0x1, %rbx
    00003f25: 	jne	.Ltmp2878 # Offset: 16165
    00003f27: 	leaq	0x3abe0(%rsp), %rbx
    00003f2f: 	jmp	.Ltmp2879 # Offset: 16175
    00003f31: 	nopl	(%rax) # Size: 7
.Ltmp2883:
    00003f38: 	movq	-0x20(%rbx), %rax
    00003f3c: 	movl	-0x8(%rbx), %ebp
    00003f3f: 	movq	(%rax), %rax
    00003f42: 	cmpq	%r12, %rax
    00003f45: 	jne	.Ltmp2880 # Offset: 16197
.Ltmp2884:
    00003f47: 	movl	-0x18(%rbx), %eax
    00003f4a: 	cmpl	%eax, %ebp
    00003f4c: 	jl	.Ltmp2881 # Offset: 16204
.Ltmp2885:
    00003f4e: 	cmpq	0x30(%rsp), %rbx
    00003f53: 	je	.Ltmp2882 # Offset: 16211
.Ltmp2879:
    00003f55: 	leaq	-0x10(%rbx), %r14
    00003f59: 	movq	%rbx, %rdi
    00003f5c: 	movq	(%rbx), %rax
    00003f5f: 	addq	$0x10, %rbx
    00003f63: 	movq	(%rax), %rax
    00003f66: 	cmpq	%r12, %rax
    00003f69: 	je	.Ltmp2883 # Offset: 16233
    00003f6b: 	callq	*%rax # Offset: 16235
    00003f6d: 	movl	%eax, %ebp
    00003f6f: 	movq	-0x20(%rbx), %rax
    00003f73: 	movq	(%rax), %rax
    00003f76: 	cmpq	%r12, %rax
    00003f79: 	je	.Ltmp2884 # Offset: 16249
    00003f7b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2880:
    00003f80: 	movq	%r14, %rdi
    00003f83: 	callq	*%rax # Offset: 16259
    00003f85: 	cmpl	%eax, %ebp
    00003f87: 	jge	.Ltmp2885 # Offset: 16263
.Ltmp2881:
    00003f89: 	movq	0x230(%rsp), %rdx
    00003f91: 	leaq	DATAat0x1d1cf(%rip), %rsi
    00003f98: 	movl	$0x1, %edi
    00003f9d: 	xorl	%eax, %eax
    00003f9f: 	callq	__printf_chk@PLT # Offset: 16287
.Ltmp2882:
    00003fa4: 	addl	$0x1, %r13d
    00003fa8: 	cmpl	iterations(%rip), %r13d
    00003faf: 	jl	.Ltmp2886 # Offset: 16303
.Ltmp2875:
    00003fb5: 	callq	clock@PLT # Offset: 16309
    00003fba: 	movq	0x38(%rsp), %rdi
    00003fbf: 	pxor	%xmm0, %xmm0
    00003fc3: 	movq	%rax, end_time(%rip)
    00003fca: 	subq	start_time(%rip), %rax
    00003fd1: 	cvtsi2sd	%rax, %xmm0
    00003fd6: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00003fde: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 16350
    00003fe3: 	movq	0x230(%rsp), %rdi
    00003feb: 	cmpq	0x98(%rsp), %rdi
    00003ff3: 	je	.Ltmp2887 # Offset: 16371
    00003ff5: 	movq	0x240(%rsp), %rax
    00003ffd: 	leaq	0x1(%rax), %rsi
    00004001: 	callq	_ZdlPvm@PLT # Offset: 16385
.Ltmp2887:
    00004006: 	movq	0xa8(%rsp), %rsi
    0000400e: 	movq	0x38(%rsp), %rdi
    00004013: 	leaq	DATAat0x1d288(%rip), %rdx
    0000401a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 16410
    0000401f: 	movl	iterations(%rip), %edx
    00004025: 	movl	$0x1, %r8d
    0000402b: 	movl	$0x1, %ecx
    00004030: 	movq	0x230(%rsp), %rdi
    00004038: 	movl	$0x7d0, %esi
    0000403d: 	callq	_Z9summarizePKciiii # Offset: 16445
    00004042: 	movl	0xdc(%rsp), %eax
    00004049: 	movq	0x230(%rsp), %rdi
    00004051: 	movl	%eax, iterations(%rip)
    00004057: 	cmpq	0x98(%rsp), %rdi
    0000405f: 	je	.Ltmp2888 # Offset: 16479
    00004061: 	movq	0x240(%rsp), %rax
    00004069: 	leaq	0x1(%rax), %rsi
    0000406d: 	callq	_ZdlPvm@PLT # Offset: 16493
.Ltmp2888:
    00004072: 	movq	0x210(%rsp), %rdi
    0000407a: 	leaq	0x220(%rsp), %rax
    00004082: 	cmpq	%rax, %rdi
    00004085: 	je	.Ltmp2889 # Offset: 16517
    00004087: 	movq	0x220(%rsp), %rax
    0000408f: 	leaq	0x1(%rax), %rsi
    00004093: 	callq	_ZdlPvm@PLT # Offset: 16531
.Ltmp2889:
    00004098: 	movq	0x1f0(%rsp), %rdi
    000040a0: 	leaq	0x200(%rsp), %rax
    000040a8: 	cmpq	%rax, %rdi
    000040ab: 	je	.Ltmp2890 # Offset: 16555
    000040ad: 	movq	0x200(%rsp), %rax
    000040b5: 	leaq	0x1(%rax), %rsi
    000040b9: 	callq	_ZdlPvm@PLT # Offset: 16569
.Ltmp2890:
    000040be: 	movq	0x1d0(%rsp), %rdi
    000040c6: 	leaq	0x1e0(%rsp), %rax
    000040ce: 	cmpq	%rax, %rdi
    000040d1: 	je	.Ltmp2891 # Offset: 16593
    000040d3: 	movq	0x1e0(%rsp), %rax
    000040db: 	leaq	0x1(%rax), %rsi
    000040df: 	callq	_ZdlPvm@PLT # Offset: 16607
.Ltmp2891:
    000040e4: 	movq	0x1b0(%rsp), %rdi
    000040ec: 	leaq	0x1c0(%rsp), %rax
    000040f4: 	cmpq	%rax, %rdi
    000040f7: 	je	.Ltmp2892 # Offset: 16631
    000040f9: 	movq	0x1c0(%rsp), %rax
    00004101: 	leaq	0x1(%rax), %rsi
    00004105: 	callq	_ZdlPvm@PLT # Offset: 16645
.Ltmp2892:
    0000410a: 	movq	0x716d8(%rsp), %rax
    00004112: 	subq	%fs:0x28, %rax
    0000411b: 	jne	.Ltmp2893 # Offset: 16667
    00004121: 	addq	$0x716e8, %rsp
    00004128: 	popq	%rbx
    00004129: 	popq	%rbp
    0000412a: 	popq	%r12
    0000412c: 	popq	%r13
    0000412e: 	popq	%r14
    00004130: 	popq	%r15
    00004132: 	retq # Offset: 16690
    00004133: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2673:
    00004138: 	movq	0x18(%rsp), %r14
    0000413d: 	addq	$0x10, %r15
    00004141: 	movl	%r13d, 0x8(%r14)
    00004145: 	cmpq	(%rsp), %r15
    00004149: 	jne	.Ltmp2676 # Offset: 16713
    0000414f: 	jmp	.Ltmp2894 # Offset: 16719
    00004154: 	nopl	(%rax) # Size: 4
.Ltmp2663:
    00004158: 	movq	0x28(%rsp), %r13
    0000415d: 	addq	$0x10, %r15
    00004161: 	movl	%r12d, 0x8(%r13)
    00004165: 	cmpq	0x18(%rsp), %r15
    0000416a: 	jne	.Ltmp2666 # Offset: 16746
    00004170: 	jmp	.Ltmp2895 # Offset: 16752
    00004175: 	nopl	(%rax) # Size: 3
.Ltmp2700:
    00004178: 	movq	0x8(%rsp), %r14
    0000417d: 	addq	$0x10, %r15
    00004181: 	movl	%r13d, 0x8(%r14)
    00004185: 	cmpq	0x10(%rsp), %r15
    0000418a: 	jne	.Ltmp2703 # Offset: 16778
    00004190: 	jmp	.Ltmp2896 # Offset: 16784
    00004195: 	nopl	(%rax) # Size: 3
.Ltmp2690:
    00004198: 	movq	(%rsp), %r13
    0000419c: 	addq	$0x10, %r15
    000041a0: 	movl	%r12d, 0x8(%r13)
    000041a4: 	cmpq	0x8(%rsp), %r15
    000041a9: 	jne	.Ltmp2693 # Offset: 16809
    000041af: 	jmp	.Ltmp2897 # Offset: 16815
    000041b4: 	nopl	(%rax) # Size: 4
.Ltmp2727:
    000041b8: 	movq	0x20(%rsp), %r14
    000041bd: 	addq	$0x10, %r15
    000041c1: 	movl	%r13d, 0x8(%r14)
    000041c5: 	cmpq	0x30(%rsp), %r15
    000041ca: 	jne	.Ltmp2730 # Offset: 16842
    000041d0: 	jmp	.Ltmp2898 # Offset: 16848
    000041d5: 	nopl	(%rax) # Size: 3
.Ltmp2717:
    000041d8: 	movq	0x10(%rsp), %r13
    000041dd: 	addq	$0x10, %r15
    000041e1: 	movl	%r12d, 0x8(%r13)
    000041e5: 	cmpq	0x20(%rsp), %r15
    000041ea: 	jne	.Ltmp2720 # Offset: 16874
    000041f0: 	jmp	.Ltmp2899 # Offset: 16880
    000041f5: 	nopl	(%rax) # Size: 3
.Ltmp2844:
    000041f8: 	callq	*%rax # Offset: 16888
    000041fa: 	movl	%eax, %ebp
    000041fc: 	jmp	.Ltmp2900 # Offset: 16892
.Ltmp2655:
    00004201: 	movq	0x230(%rsp), %rdx
    00004209: 	movq	%r13, %rsi
    0000420c: 	movl	$0x1, %edi
    00004211: 	xorl	%eax, %eax
    00004213: 	callq	__printf_chk@PLT # Offset: 16915
    00004218: 	movl	iterations(%rip), %r8d
    0000421f: 	addl	$0x1, %ebx
    00004222: 	cmpl	%r8d, %ebx
    00004225: 	jl	.Ltmp2657 # Offset: 16933
    0000422b: 	jmp	.Ltmp2651 # Offset: 16939
.Ltmp2893:
    00004230: 	callq	__stack_chk_fail@PLT # Offset: 16944
    00004235: 	endbr64
.Ltmp2902:
    00004239: 	movq	%rax, %rbp
    0000423c: 	jmp	.Ltmp2901 # Offset: 16956
    0000423e: 	endbr64
    00004242: 	jmp	.Ltmp2902 # Offset: 16962
    00004244: 	endbr64
    00004248: 	jmp	.Ltmp2902 # Offset: 16968
    0000424a: 	endbr64
    0000424e: 	jmp	.Ltmp2902 # Offset: 16974
    00004250: 	endbr64
    00004254: 	jmp	.Ltmp2902 # Offset: 16980
    00004256: 	endbr64
    0000425a: 	movq	%rax, %rbp
    0000425d: 	jmp	.Ltmp2903 # Offset: 16989
    0000425f: 	endbr64
.Ltmp2905:
    00004263: 	movq	%rax, %rbp
    00004266: 	jmp	.Ltmp2904 # Offset: 16998
    0000426b: 	endbr64
    0000426f: 	jmp	.Ltmp2905 # Offset: 17007
    00004271: 	endbr64
    00004275: 	jmp	.Ltmp2905 # Offset: 17013
.Ltmp2901:
    00004277: 	movq	0x230(%rsp), %rdi
    0000427f: 	cmpq	0x98(%rsp), %rdi
    00004287: 	je	.Ltmp2903 # Offset: 17031
    00004289: 	movq	0x240(%rsp), %rax
    00004291: 	leaq	0x1(%rax), %rsi
    00004295: 	callq	_ZdlPvm@PLT # Offset: 17045
.Ltmp2903:
    0000429a: 	movq	0x210(%rsp), %rdi
    000042a2: 	leaq	0x220(%rsp), %rax
    000042aa: 	cmpq	%rax, %rdi
    000042ad: 	je	.Ltmp2906 # Offset: 17069
    000042af: 	movq	0x220(%rsp), %rax
    000042b7: 	leaq	0x1(%rax), %rsi
    000042bb: 	callq	_ZdlPvm@PLT # Offset: 17083
.Ltmp2906:
    000042c0: 	movq	0x1f0(%rsp), %rdi
    000042c8: 	leaq	0x200(%rsp), %rax
    000042d0: 	cmpq	%rax, %rdi
    000042d3: 	je	.Ltmp2907 # Offset: 17107
    000042d5: 	movq	0x200(%rsp), %rax
    000042dd: 	leaq	0x1(%rax), %rsi
    000042e1: 	callq	_ZdlPvm@PLT # Offset: 17121
.Ltmp2907:
    000042e6: 	movq	0x1d0(%rsp), %rdi
    000042ee: 	leaq	0x1e0(%rsp), %rax
    000042f6: 	cmpq	%rax, %rdi
    000042f9: 	je	.Ltmp2908 # Offset: 17145
    000042fb: 	movq	0x1e0(%rsp), %rax
    00004303: 	leaq	0x1(%rax), %rsi
    00004307: 	callq	_ZdlPvm@PLT # Offset: 17159
.Ltmp2908:
    0000430c: 	movq	0x1b0(%rsp), %rdi
    00004314: 	leaq	0x1c0(%rsp), %rax
    0000431c: 	cmpq	%rax, %rdi
    0000431f: 	je	.Ltmp2909 # Offset: 17183
    00004321: 	movq	0x1c0(%rsp), %rax
    00004329: 	leaq	0x1(%rax), %rsi
    0000432d: 	callq	_ZdlPvm@PLT # Offset: 17197
.Ltmp2909:
    00004332: 	movq	%rbp, %rdi
    00004335: 	callq	_Unwind_Resume@PLT # Offset: 17205
    0000433a: 	endbr64
    0000433e: 	jmp	.Ltmp2905 # Offset: 17214
.Ltmp2904:
    00004343: 	movq	0x230(%rsp), %rdi
    0000434b: 	cmpq	0x98(%rsp), %rdi
    00004353: 	je	.Ltmp2906 # Offset: 17235
    00004359: 	movq	0x240(%rsp), %rax
    00004361: 	leaq	0x1(%rax), %rsi
    00004365: 	callq	_ZdlPvm@PLT # Offset: 17253
    0000436a: 	jmp	.Ltmp2906 # Offset: 17258
    0000436f: 	endbr64
    00004373: 	jmp	.Ltmp2902 # Offset: 17267
    00004378: 	endbr64
    0000437c: 	jmp	.Ltmp2902 # Offset: 17276
    00004381: 	endbr64
    00004385: 	jmp	.Ltmp2902 # Offset: 17285
    0000438a: 	endbr64
    0000438e: 	jmp	.Ltmp2902 # Offset: 17294
    00004393: 	endbr64
    00004397: 	jmp	.Ltmp2902 # Offset: 17303
    0000439c: 	endbr64
    000043a0: 	jmp	.Ltmp2902 # Offset: 17312
    000043a5: 	endbr64
    000043a9: 	jmp	.Ltmp2902 # Offset: 17321
    000043ae: 	endbr64
    000043b2: 	jmp	.Ltmp2905 # Offset: 17330
    000043b7: 	endbr64
.Ltmp2911:
    000043bb: 	movq	%rax, %rbp
    000043be: 	jmp	.Ltmp2910 # Offset: 17342
    000043c0: 	endbr64
    000043c4: 	jmp	.Ltmp2911 # Offset: 17348
    000043c6: 	endbr64
    000043ca: 	movq	%rax, %rbp
    000043cd: 	jmp	.Ltmp2912 # Offset: 17357
    000043cf: 	endbr64
    000043d3: 	movq	%rax, %rbp
    000043d6: 	jmp	.Ltmp2907 # Offset: 17366
.Ltmp2910:
    000043db: 	movq	0x230(%rsp), %rdi
    000043e3: 	cmpq	0x98(%rsp), %rdi
    000043eb: 	je	.Ltmp2907 # Offset: 17387
.Ltmp2913:
    000043f1: 	movq	0x240(%rsp), %rax
    000043f9: 	leaq	0x1(%rax), %rsi
    000043fd: 	callq	_ZdlPvm@PLT # Offset: 17405
    00004402: 	jmp	.Ltmp2907 # Offset: 17410
.Ltmp2912:
    00004407: 	movq	0x230(%rsp), %rdi
    0000440f: 	leaq	0x240(%rsp), %rax
    00004417: 	cmpq	%rax, %rdi
    0000441a: 	jne	.Ltmp2913 # Offset: 17434
    0000441c: 	jmp	.Ltmp2907 # Offset: 17436
    00004421: 	endbr64
.Ltmp2915:
    00004425: 	movq	%rax, %rbp
    00004428: 	jmp	.Ltmp2914 # Offset: 17448
    0000442a: 	endbr64
    0000442e: 	jmp	.Ltmp2915 # Offset: 17454
    00004430: 	endbr64
    00004434: 	jmp	.Ltmp2915 # Offset: 17460
    00004436: 	endbr64
    0000443a: 	jmp	.Ltmp2915 # Offset: 17466
.Ltmp2914:
    0000443c: 	movq	0x11b90(%rsp), %rdi
    00004444: 	cmpq	%r13, %rdi
    00004447: 	je	.Ltmp2908 # Offset: 17479
.Ltmp2917:
    0000444d: 	movq	0x11ba0(%rsp), %rax
    00004455: 	leaq	0x1(%rax), %rsi
    00004459: 	callq	_ZdlPvm@PLT # Offset: 17497
    0000445e: 	jmp	.Ltmp2908 # Offset: 17502
    00004463: 	endbr64
    00004467: 	jmp	.Ltmp2915 # Offset: 17511
    00004469: 	endbr64
    0000446d: 	jmp	.Ltmp2915 # Offset: 17517
    0000446f: 	endbr64
    00004473: 	jmp	.Ltmp2915 # Offset: 17523
    00004475: 	endbr64
    00004479: 	movq	%rax, %rbp
    0000447c: 	jmp	.Ltmp2916 # Offset: 17532
    0000447e: 	endbr64
    00004482: 	movq	%rax, %rbp
    00004485: 	jmp	.Ltmp2908 # Offset: 17541
.Ltmp2916:
    0000448a: 	movq	0x11b90(%rsp), %rdi
    00004492: 	leaq	0x11ba0(%rsp), %rax
    0000449a: 	cmpq	%rax, %rdi
    0000449d: 	jne	.Ltmp2917 # Offset: 17565
    0000449f: 	jmp	.Ltmp2908 # Offset: 17567
    000044a4: 	endbr64
    000044a8: 	jmp	.Ltmp2915 # Offset: 17576
    000044ad: 	endbr64
    000044b1: 	jmp	.Ltmp2915 # Offset: 17585
    000044b6: 	endbr64
    000044ba: 	jmp	.Ltmp2915 # Offset: 17594
    000044bf: 	endbr64
    000044c3: 	jmp	.Ltmp2911 # Offset: 17603
    000044c8: 	endbr64
    000044cc: 	jmp	.Ltmp2911 # Offset: 17612
    000044d1: 	endbr64
    000044d5: 	jmp	.Ltmp2911 # Offset: 17621
    000044da: 	endbr64
    000044de: 	jmp	.Ltmp2911 # Offset: 17630
    000044e3: 	endbr64
    000044e7: 	jmp	.Ltmp2911 # Offset: 17639
    000044ec: 	endbr64
    000044f0: 	jmp	.Ltmp2911 # Offset: 17648
    000044f5: 	endbr64
    000044f9: 	jmp	.Ltmp2911 # Offset: 17657
    000044fe: 	endbr64
    00004502: 	jmp	.Ltmp2911 # Offset: 17666
    00004507: 	endbr64
    0000450b: 	jmp	.Ltmp2905 # Offset: 17675
    00004510: 	endbr64
    00004514: 	jmp	.Ltmp2905 # Offset: 17684
    00004519: 	endbr64
    0000451d: 	jmp	.Ltmp2905 # Offset: 17693
    00004522: 	endbr64
    00004526: 	movq	%rax, %rbp
    00004529: 	jmp	.Ltmp2906 # Offset: 17705
    0000452e: 	endbr64
    00004532: 	jmp	.Ltmp2905 # Offset: 17714
    00004537: 	endbr64
    0000453b: 	jmp	.Ltmp2905 # Offset: 17723
    00004540: 	endbr64
    00004544: 	jmp	.Ltmp2905 # Offset: 17732
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIiEvv"

Binary Function "_ZN9benchmark9__sift_inIPmmEEvlT_lT0_" after disassembly {
  Number      : 159
  State       : disassembled
  Address     : 0x16d10
  Size        : 0x105
  MaxSize     : 0x110
  Offset      : 0x16d10
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIPmmEEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0158:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r11
    00000007: 	leaq	0x2(%rdx,%rdx), %rax
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rsi, %rdi
    00000010: 	movq	%rdx, %r8
    00000013: 	movq	%rcx, %r9
    00000016: 	cmpq	%r11, %rax
    00000019: 	jge	.Ltmp2918 # Offset: 25
    0000001f: 	movq	%rdx, %r10
    00000022: 	jmp	.Ltmp2919 # Offset: 34
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp2921:
    00000028: 	leaq	-0x1(%rax), %rbx
    0000002c: 	leaq	(%rax,%rax), %rcx
    00000030: 	movq	%rsi, (%rdi,%r10,8)
    00000034: 	leaq	(%rdi,%rbx,8), %rdx
    00000038: 	movq	%rbx, %rax
    0000003b: 	cmpq	%rcx, %r11
    0000003e: 	jle	.Ltmp2920 # Offset: 62
.Ltmp2922:
    00000040: 	movq	%rax, %r10
    00000043: 	movq	%rcx, %rax
.Ltmp2919:
    00000046: 	leaq	(,%rax,8), %rdx
    0000004e: 	movq	-0x8(%rdi,%rdx), %rsi
    00000053: 	addq	%rdi, %rdx
    00000056: 	movq	(%rdx), %rcx
    00000059: 	cmpq	%rcx, %rsi
    0000005c: 	jae	.Ltmp2921 # Offset: 92
    0000005e: 	movq	%rcx, (%rdi,%r10,8)
    00000062: 	leaq	0x2(%rax,%rax), %rcx
    00000067: 	cmpq	%rcx, %r11
    0000006a: 	jg	.Ltmp2922 # Offset: 106
.Ltmp2920:
    0000006c: 	cmpq	%rcx, %r11
    0000006f: 	je	.Ltmp2923 # Offset: 111
.Ltmp2928:
    00000071: 	leaq	-0x1(%rax), %rsi
    00000075: 	movq	%rsi, %rcx
    00000078: 	shrq	$0x3f, %rcx
    0000007c: 	addq	%rsi, %rcx
    0000007f: 	sarq	%rcx
    00000082: 	cmpq	%r8, %rax
    00000085: 	jg	.Ltmp2924 # Offset: 133
    00000087: 	jmp	.Ltmp2925 # Offset: 135
    00000089: 	nopl	(%rax) # Size: 7
.Ltmp2927:
    00000090: 	movq	%rsi, (%rdx)
    00000093: 	leaq	-0x1(%rcx), %rdx
    00000097: 	movq	%rdx, %rax
    0000009a: 	shrq	$0x3f, %rax
    0000009e: 	addq	%rdx, %rax
    000000a1: 	sarq	%rax
    000000a4: 	movq	%rax, %rdx
    000000a7: 	movq	%rcx, %rax
    000000aa: 	cmpq	%rcx, %r8
    000000ad: 	jge	.Ltmp2926 # Offset: 173
    000000af: 	movq	%rdx, %rcx
.Ltmp2924:
    000000b2: 	leaq	(%rdi,%rcx,8), %r10
    000000b6: 	leaq	(%rdi,%rax,8), %rdx
    000000ba: 	movq	(%r10), %rsi
    000000bd: 	cmpq	%r9, %rsi
    000000c0: 	jb	.Ltmp2927 # Offset: 192
.Ltmp2925:
    000000c2: 	movq	%r9, (%rdx)
    000000c5: 	popq	%rbx
    000000c6: 	retq # Offset: 198
    000000c7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2926:
    000000d0: 	movq	%r10, %rdx
    000000d3: 	movq	%r9, (%rdx)
    000000d6: 	popq	%rbx
    000000d7: 	retq # Offset: 215
    000000d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2918:
    000000e0: 	leaq	(%rsi,%rdx,8), %rdx
    000000e4: 	jne	.Ltmp2925 # Offset: 228
    000000e6: 	movq	%rax, %rcx
    000000e9: 	nopl	(%rax) # Size: 7
.Ltmp2923:
    000000f0: 	movq	-0x8(%rdi,%rcx,8), %rax
    000000f5: 	movq	%rax, (%rdx)
    000000f8: 	leaq	-0x1(%rcx), %rax
    000000fc: 	leaq	(%rdi,%rax,8), %rdx
    00000100: 	jmp	.Ltmp2928 # Offset: 256
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIPmmEEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inIP9TypeClassImES2_EEvlT_lT0_" after disassembly {
  Number      : 160
  State       : disassembled
  Address     : 0x16e20
  Size        : 0x105
  MaxSize     : 0x110
  Offset      : 0x16e20
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIP9TypeClassImES2_EEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0159:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r11
    00000007: 	leaq	0x2(%rdx,%rdx), %rax
    0000000c: 	movq	%rsi, %rdi
    0000000f: 	movq	%rdx, %r8
    00000012: 	movq	%rcx, %r9
    00000015: 	cmpq	%r11, %rax
    00000018: 	jge	.Ltmp2929 # Offset: 24
    0000001e: 	movq	%rdx, %r10
    00000021: 	jmp	.Ltmp2930 # Offset: 33
    00000023: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2932:
    00000028: 	leaq	0x2(%rax,%rax), %rcx
    0000002d: 	movq	%rsi, (%rdi,%r10,8)
    00000031: 	cmpq	%rcx, %r11
    00000034: 	jle	.Ltmp2931 # Offset: 52
.Ltmp2933:
    00000036: 	movq	%rax, %r10
    00000039: 	movq	%rcx, %rax
.Ltmp2930:
    0000003c: 	leaq	(,%rax,8), %rdx
    00000044: 	leaq	-0x8(%rdi,%rdx), %rcx
    00000049: 	addq	%rdi, %rdx
    0000004c: 	movq	(%rdx), %rsi
    0000004f: 	cmpq	(%rcx), %rsi
    00000052: 	ja	.Ltmp2932 # Offset: 82
    00000054: 	movq	(%rcx), %rcx
    00000057: 	leaq	-0x1(%rax), %rsi
    0000005b: 	leaq	(%rdi,%rsi,8), %rdx
    0000005f: 	movq	%rcx, (%rdi,%r10,8)
    00000063: 	leaq	(%rax,%rax), %rcx
    00000067: 	movq	%rsi, %rax
    0000006a: 	cmpq	%r11, %rcx
    0000006d: 	jl	.Ltmp2933 # Offset: 109
.Ltmp2931:
    0000006f: 	cmpq	%r11, %rcx
    00000072: 	je	.Ltmp2934 # Offset: 114
.Ltmp2939:
    00000074: 	leaq	-0x1(%rax), %rsi
    00000078: 	movq	%rsi, %rcx
    0000007b: 	shrq	$0x3f, %rcx
    0000007f: 	addq	%rsi, %rcx
    00000082: 	sarq	%rcx
    00000085: 	cmpq	%r8, %rax
    00000088: 	jg	.Ltmp2935 # Offset: 136
    0000008a: 	jmp	.Ltmp2936 # Offset: 138
    0000008c: 	nopl	(%rax) # Size: 4
.Ltmp2938:
    00000090: 	movq	(%rsi), %rax
    00000093: 	movq	%rax, (%rdx)
    00000096: 	leaq	-0x1(%rcx), %rdx
    0000009a: 	movq	%rdx, %rax
    0000009d: 	shrq	$0x3f, %rax
    000000a1: 	addq	%rdx, %rax
    000000a4: 	sarq	%rax
    000000a7: 	movq	%rax, %rdx
    000000aa: 	movq	%rcx, %rax
    000000ad: 	cmpq	%rcx, %r8
    000000b0: 	jge	.Ltmp2937 # Offset: 176
    000000b2: 	movq	%rdx, %rcx
.Ltmp2935:
    000000b5: 	leaq	(%rdi,%rcx,8), %rsi
    000000b9: 	leaq	(%rdi,%rax,8), %rdx
    000000bd: 	cmpq	%r9, (%rsi)
    000000c0: 	jb	.Ltmp2938 # Offset: 192
.Ltmp2936:
    000000c2: 	movq	%r9, (%rdx)
    000000c5: 	retq # Offset: 197
    000000c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2937:
    000000d0: 	movq	%rsi, %rdx
    000000d3: 	movq	%r9, (%rdx)
    000000d6: 	retq # Offset: 214
    000000d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2929:
    000000e0: 	leaq	(%rsi,%rdx,8), %rdx
    000000e4: 	jne	.Ltmp2936 # Offset: 228
    000000e6: 	movq	%rax, %rcx
    000000e9: 	nopl	(%rax) # Size: 7
.Ltmp2934:
    000000f0: 	movq	-0x8(%rdi,%rcx,8), %rax
    000000f5: 	movq	%rax, (%rdx)
    000000f8: 	leaq	-0x1(%rcx), %rax
    000000fc: 	leaq	(%rdi,%rax,8), %rdx
    00000100: 	jmp	.Ltmp2939 # Offset: 256
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIP9TypeClassImES2_EEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inIP12TypeSubClassImES2_EEvlT_lT0_" after disassembly {
  Number      : 161
  State       : disassembled
  Address     : 0x16f30
  Size        : 0x105
  MaxSize     : 0x110
  Offset      : 0x16f30
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIP12TypeSubClassImES2_EEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0160:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r11
    00000007: 	leaq	0x2(%rdx,%rdx), %rax
    0000000c: 	movq	%rsi, %rdi
    0000000f: 	movq	%rdx, %r8
    00000012: 	movq	%rcx, %r9
    00000015: 	cmpq	%r11, %rax
    00000018: 	jge	.Ltmp2940 # Offset: 24
    0000001e: 	movq	%rdx, %r10
    00000021: 	jmp	.Ltmp2941 # Offset: 33
    00000023: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2943:
    00000028: 	leaq	0x2(%rax,%rax), %rcx
    0000002d: 	movq	%rsi, (%rdi,%r10,8)
    00000031: 	cmpq	%rcx, %r11
    00000034: 	jle	.Ltmp2942 # Offset: 52
.Ltmp2944:
    00000036: 	movq	%rax, %r10
    00000039: 	movq	%rcx, %rax
.Ltmp2941:
    0000003c: 	leaq	(,%rax,8), %rdx
    00000044: 	leaq	-0x8(%rdi,%rdx), %rcx
    00000049: 	addq	%rdi, %rdx
    0000004c: 	movq	(%rdx), %rsi
    0000004f: 	cmpq	(%rcx), %rsi
    00000052: 	ja	.Ltmp2943 # Offset: 82
    00000054: 	movq	(%rcx), %rcx
    00000057: 	leaq	-0x1(%rax), %rsi
    0000005b: 	leaq	(%rdi,%rsi,8), %rdx
    0000005f: 	movq	%rcx, (%rdi,%r10,8)
    00000063: 	leaq	(%rax,%rax), %rcx
    00000067: 	movq	%rsi, %rax
    0000006a: 	cmpq	%r11, %rcx
    0000006d: 	jl	.Ltmp2944 # Offset: 109
.Ltmp2942:
    0000006f: 	cmpq	%r11, %rcx
    00000072: 	je	.Ltmp2945 # Offset: 114
.Ltmp2950:
    00000074: 	leaq	-0x1(%rax), %rsi
    00000078: 	movq	%rsi, %rcx
    0000007b: 	shrq	$0x3f, %rcx
    0000007f: 	addq	%rsi, %rcx
    00000082: 	sarq	%rcx
    00000085: 	cmpq	%r8, %rax
    00000088: 	jg	.Ltmp2946 # Offset: 136
    0000008a: 	jmp	.Ltmp2947 # Offset: 138
    0000008c: 	nopl	(%rax) # Size: 4
.Ltmp2949:
    00000090: 	movq	(%rsi), %rax
    00000093: 	movq	%rax, (%rdx)
    00000096: 	leaq	-0x1(%rcx), %rdx
    0000009a: 	movq	%rdx, %rax
    0000009d: 	shrq	$0x3f, %rax
    000000a1: 	addq	%rdx, %rax
    000000a4: 	sarq	%rax
    000000a7: 	movq	%rax, %rdx
    000000aa: 	movq	%rcx, %rax
    000000ad: 	cmpq	%rcx, %r8
    000000b0: 	jge	.Ltmp2948 # Offset: 176
    000000b2: 	movq	%rdx, %rcx
.Ltmp2946:
    000000b5: 	leaq	(%rdi,%rcx,8), %rsi
    000000b9: 	leaq	(%rdi,%rax,8), %rdx
    000000bd: 	cmpq	%r9, (%rsi)
    000000c0: 	jb	.Ltmp2949 # Offset: 192
.Ltmp2947:
    000000c2: 	movq	%r9, (%rdx)
    000000c5: 	retq # Offset: 197
    000000c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2948:
    000000d0: 	movq	%rsi, %rdx
    000000d3: 	movq	%r9, (%rdx)
    000000d6: 	retq # Offset: 214
    000000d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2940:
    000000e0: 	leaq	(%rsi,%rdx,8), %rdx
    000000e4: 	jne	.Ltmp2947 # Offset: 228
    000000e6: 	movq	%rax, %rcx
    000000e9: 	nopl	(%rax) # Size: 7
.Ltmp2945:
    000000f0: 	movq	-0x8(%rdi,%rcx,8), %rax
    000000f5: 	movq	%rax, (%rdx)
    000000f8: 	leaq	-0x1(%rcx), %rax
    000000fc: 	leaq	(%rdi,%rax,8), %rdx
    00000100: 	jmp	.Ltmp2950 # Offset: 256
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIP12TypeSubClassImES2_EEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inIP13TypeSub2ClassImES2_EEvlT_lT0_" after disassembly {
  Number      : 162
  State       : disassembled
  Address     : 0x17040
  Size        : 0x105
  MaxSize     : 0x110
  Offset      : 0x17040
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIP13TypeSub2ClassImES2_EEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0161:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r11
    00000007: 	leaq	0x2(%rdx,%rdx), %rax
    0000000c: 	movq	%rsi, %rdi
    0000000f: 	movq	%rdx, %r8
    00000012: 	movq	%rcx, %r9
    00000015: 	cmpq	%r11, %rax
    00000018: 	jge	.Ltmp2951 # Offset: 24
    0000001e: 	movq	%rdx, %r10
    00000021: 	jmp	.Ltmp2952 # Offset: 33
    00000023: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2954:
    00000028: 	leaq	0x2(%rax,%rax), %rcx
    0000002d: 	movq	%rsi, (%rdi,%r10,8)
    00000031: 	cmpq	%rcx, %r11
    00000034: 	jle	.Ltmp2953 # Offset: 52
.Ltmp2955:
    00000036: 	movq	%rax, %r10
    00000039: 	movq	%rcx, %rax
.Ltmp2952:
    0000003c: 	leaq	(,%rax,8), %rdx
    00000044: 	leaq	-0x8(%rdi,%rdx), %rcx
    00000049: 	addq	%rdi, %rdx
    0000004c: 	movq	(%rdx), %rsi
    0000004f: 	cmpq	(%rcx), %rsi
    00000052: 	ja	.Ltmp2954 # Offset: 82
    00000054: 	movq	(%rcx), %rcx
    00000057: 	leaq	-0x1(%rax), %rsi
    0000005b: 	leaq	(%rdi,%rsi,8), %rdx
    0000005f: 	movq	%rcx, (%rdi,%r10,8)
    00000063: 	leaq	(%rax,%rax), %rcx
    00000067: 	movq	%rsi, %rax
    0000006a: 	cmpq	%r11, %rcx
    0000006d: 	jl	.Ltmp2955 # Offset: 109
.Ltmp2953:
    0000006f: 	cmpq	%r11, %rcx
    00000072: 	je	.Ltmp2956 # Offset: 114
.Ltmp2961:
    00000074: 	leaq	-0x1(%rax), %rsi
    00000078: 	movq	%rsi, %rcx
    0000007b: 	shrq	$0x3f, %rcx
    0000007f: 	addq	%rsi, %rcx
    00000082: 	sarq	%rcx
    00000085: 	cmpq	%r8, %rax
    00000088: 	jg	.Ltmp2957 # Offset: 136
    0000008a: 	jmp	.Ltmp2958 # Offset: 138
    0000008c: 	nopl	(%rax) # Size: 4
.Ltmp2960:
    00000090: 	movq	(%rsi), %rax
    00000093: 	movq	%rax, (%rdx)
    00000096: 	leaq	-0x1(%rcx), %rdx
    0000009a: 	movq	%rdx, %rax
    0000009d: 	shrq	$0x3f, %rax
    000000a1: 	addq	%rdx, %rax
    000000a4: 	sarq	%rax
    000000a7: 	movq	%rax, %rdx
    000000aa: 	movq	%rcx, %rax
    000000ad: 	cmpq	%rcx, %r8
    000000b0: 	jge	.Ltmp2959 # Offset: 176
    000000b2: 	movq	%rdx, %rcx
.Ltmp2957:
    000000b5: 	leaq	(%rdi,%rcx,8), %rsi
    000000b9: 	leaq	(%rdi,%rax,8), %rdx
    000000bd: 	cmpq	%r9, (%rsi)
    000000c0: 	jb	.Ltmp2960 # Offset: 192
.Ltmp2958:
    000000c2: 	movq	%r9, (%rdx)
    000000c5: 	retq # Offset: 197
    000000c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2959:
    000000d0: 	movq	%rsi, %rdx
    000000d3: 	movq	%r9, (%rdx)
    000000d6: 	retq # Offset: 214
    000000d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2951:
    000000e0: 	leaq	(%rsi,%rdx,8), %rdx
    000000e4: 	jne	.Ltmp2958 # Offset: 228
    000000e6: 	movq	%rax, %rcx
    000000e9: 	nopl	(%rax) # Size: 7
.Ltmp2956:
    000000f0: 	movq	-0x8(%rdi,%rcx,8), %rax
    000000f5: 	movq	%rax, (%rdx)
    000000f8: 	leaq	-0x1(%rcx), %rax
    000000fc: 	leaq	(%rdi,%rax,8), %rdx
    00000100: 	jmp	.Ltmp2961 # Offset: 256
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIP13TypeSub2ClassImES2_EEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inIP12DeepSubClassImES2_EEvlT_lT0_" after disassembly {
  Number      : 163
  State       : disassembled
  Address     : 0x17150
  Size        : 0x105
  MaxSize     : 0x110
  Offset      : 0x17150
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIP12DeepSubClassImES2_EEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0162:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r11
    00000007: 	leaq	0x2(%rdx,%rdx), %rax
    0000000c: 	movq	%rsi, %rdi
    0000000f: 	movq	%rdx, %r8
    00000012: 	movq	%rcx, %r9
    00000015: 	cmpq	%r11, %rax
    00000018: 	jge	.Ltmp2962 # Offset: 24
    0000001e: 	movq	%rdx, %r10
    00000021: 	jmp	.Ltmp2963 # Offset: 33
    00000023: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2965:
    00000028: 	leaq	0x2(%rax,%rax), %rcx
    0000002d: 	movq	%rsi, (%rdi,%r10,8)
    00000031: 	cmpq	%rcx, %r11
    00000034: 	jle	.Ltmp2964 # Offset: 52
.Ltmp2966:
    00000036: 	movq	%rax, %r10
    00000039: 	movq	%rcx, %rax
.Ltmp2963:
    0000003c: 	leaq	(,%rax,8), %rdx
    00000044: 	leaq	-0x8(%rdi,%rdx), %rcx
    00000049: 	addq	%rdi, %rdx
    0000004c: 	movq	(%rdx), %rsi
    0000004f: 	cmpq	(%rcx), %rsi
    00000052: 	ja	.Ltmp2965 # Offset: 82
    00000054: 	movq	(%rcx), %rcx
    00000057: 	leaq	-0x1(%rax), %rsi
    0000005b: 	leaq	(%rdi,%rsi,8), %rdx
    0000005f: 	movq	%rcx, (%rdi,%r10,8)
    00000063: 	leaq	(%rax,%rax), %rcx
    00000067: 	movq	%rsi, %rax
    0000006a: 	cmpq	%r11, %rcx
    0000006d: 	jl	.Ltmp2966 # Offset: 109
.Ltmp2964:
    0000006f: 	cmpq	%r11, %rcx
    00000072: 	je	.Ltmp2967 # Offset: 114
.Ltmp2972:
    00000074: 	leaq	-0x1(%rax), %rsi
    00000078: 	movq	%rsi, %rcx
    0000007b: 	shrq	$0x3f, %rcx
    0000007f: 	addq	%rsi, %rcx
    00000082: 	sarq	%rcx
    00000085: 	cmpq	%r8, %rax
    00000088: 	jg	.Ltmp2968 # Offset: 136
    0000008a: 	jmp	.Ltmp2969 # Offset: 138
    0000008c: 	nopl	(%rax) # Size: 4
.Ltmp2971:
    00000090: 	movq	(%rsi), %rax
    00000093: 	movq	%rax, (%rdx)
    00000096: 	leaq	-0x1(%rcx), %rdx
    0000009a: 	movq	%rdx, %rax
    0000009d: 	shrq	$0x3f, %rax
    000000a1: 	addq	%rdx, %rax
    000000a4: 	sarq	%rax
    000000a7: 	movq	%rax, %rdx
    000000aa: 	movq	%rcx, %rax
    000000ad: 	cmpq	%rcx, %r8
    000000b0: 	jge	.Ltmp2970 # Offset: 176
    000000b2: 	movq	%rdx, %rcx
.Ltmp2968:
    000000b5: 	leaq	(%rdi,%rcx,8), %rsi
    000000b9: 	leaq	(%rdi,%rax,8), %rdx
    000000bd: 	cmpq	%r9, (%rsi)
    000000c0: 	jb	.Ltmp2971 # Offset: 192
.Ltmp2969:
    000000c2: 	movq	%r9, (%rdx)
    000000c5: 	retq # Offset: 197
    000000c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2970:
    000000d0: 	movq	%rsi, %rdx
    000000d3: 	movq	%r9, (%rdx)
    000000d6: 	retq # Offset: 214
    000000d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2962:
    000000e0: 	leaq	(%rsi,%rdx,8), %rdx
    000000e4: 	jne	.Ltmp2969 # Offset: 228
    000000e6: 	movq	%rax, %rcx
    000000e9: 	nopl	(%rax) # Size: 7
.Ltmp2967:
    000000f0: 	movq	-0x8(%rdi,%rcx,8), %rax
    000000f5: 	movq	%rax, (%rdx)
    000000f8: 	leaq	-0x1(%rcx), %rax
    000000fc: 	leaq	(%rdi,%rax,8), %rdx
    00000100: 	jmp	.Ltmp2972 # Offset: 256
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIP12DeepSubClassImES2_EEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inIP16TypeVirtualClassImES2_EEvlT_lT0_" after disassembly {
  Number      : 164
  State       : disassembled
  Address     : 0x17260
  Size        : 0x231
  MaxSize     : 0x240
  Offset      : 0x17260
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIP16TypeVirtualClassImES2_EEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0163:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdx, %r15
    00000009: 	leaq	0x2(%rdx,%rdx), %rdx
    0000000e: 	movq	%rdi, %r8
    00000011: 	pushq	%r14
    00000013: 	pushq	%r13
    00000015: 	movq	%rsi, %r13
    00000018: 	pushq	%r12
    0000001a: 	pushq	%rbp
    0000001b: 	pushq	%rbx
    0000001c: 	subq	$0x28, %rsp
    00000020: 	cmpq	%rdi, %rdx
    00000023: 	jge	.Ltmp2973 # Offset: 35
    00000029: 	movq	%r15, %rbp
    0000002c: 	leaq	_ZN16TypeVirtualClassImEcvmEv(%rip), %r14
    00000033: 	jmp	.Ltmp2974 # Offset: 51
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp2978:
    00000038: 	movq	0x8(%r12), %rax
    0000003d: 	leaq	-0x1(%rdx), %rsi
    00000041: 	shlq	$0x4, %rbp
    00000045: 	movq	%rsi, %rbx
    00000048: 	movq	%rax, 0x8(%r13,%rbp)
    0000004d: 	shlq	$0x4, %rbx
    00000051: 	leaq	(%rdx,%rdx), %rax
    00000055: 	movq	%rsi, %rdx
    00000058: 	addq	%r13, %rbx
    0000005b: 	cmpq	%rax, %r8
    0000005e: 	jle	.Ltmp2975 # Offset: 94
.Ltmp2979:
    00000060: 	movq	%rdx, %rbp
    00000063: 	movq	%rax, %rdx
.Ltmp2974:
    00000066: 	movq	%rdx, %rbx
    00000069: 	shlq	$0x4, %rbx
    0000006d: 	leaq	-0x10(%r13,%rbx), %r12
    00000072: 	movq	(%r12), %rax
    00000076: 	movq	(%rax), %rax
    00000079: 	cmpq	%r14, %rax
    0000007c: 	jne	.Ltmp2976 # Offset: 124
    00000082: 	addq	%r13, %rbx
    00000085: 	movq	0x8(%r12), %rsi
    0000008a: 	movq	(%rbx), %rax
    0000008d: 	movq	(%rax), %rax
    00000090: 	cmpq	%r14, %rax
    00000093: 	jne	.Ltmp2977 # Offset: 147
.Ltmp2987:
    00000099: 	movq	0x8(%rbx), %rax
.Ltmp2988:
    0000009d: 	cmpq	%rax, %rsi
    000000a0: 	jae	.Ltmp2978 # Offset: 160
    000000a2: 	movq	0x8(%rbx), %rax
    000000a6: 	shlq	$0x4, %rbp
    000000aa: 	movq	%rax, 0x8(%r13,%rbp)
    000000af: 	leaq	0x2(%rdx,%rdx), %rax
    000000b4: 	cmpq	%rax, %r8
    000000b7: 	jg	.Ltmp2979 # Offset: 183
.Ltmp2975:
    000000b9: 	cmpq	%rax, %r8
    000000bc: 	je	.Ltmp2980 # Offset: 188
.Ltmp2989:
    000000c2: 	leaq	-0x1(%rdx), %rax
    000000c6: 	movq	%rax, %r12
    000000c9: 	shrq	$0x3f, %r12
    000000cd: 	addq	%rax, %r12
    000000d0: 	sarq	%r12
    000000d3: 	cmpq	%r15, %rdx
    000000d6: 	jle	.Ltmp2981 # Offset: 214
    000000dc: 	leaq	_ZN16TypeVirtualClassImEcvmEv(%rip), %r14
    000000e3: 	jmp	.Ltmp2982 # Offset: 227
    000000e5: 	nopl	(%rax) # Size: 3
.Ltmp2985:
    000000e8: 	movq	0x8(%rbp), %rax
.Ltmp2986:
    000000ec: 	movq	%rdx, %rbx
    000000ef: 	movq	0x8(%rcx), %rsi
    000000f3: 	shlq	$0x4, %rbx
    000000f7: 	addq	%r13, %rbx
    000000fa: 	cmpq	%rsi, %rax
    000000fd: 	jae	.Ltmp2983 # Offset: 253
    00000103: 	movq	0x8(%rbp), %rax
    00000107: 	leaq	-0x1(%r12), %rdx
    0000010c: 	movq	%rax, 0x8(%rbx)
    00000110: 	movq	%rdx, %rax
    00000113: 	shrq	$0x3f, %rax
    00000117: 	addq	%rdx, %rax
    0000011a: 	movq	%r12, %rdx
    0000011d: 	sarq	%rax
    00000120: 	cmpq	%r12, %r15
    00000123: 	jge	.Ltmp2984 # Offset: 291
    00000129: 	movq	%rax, %r12
.Ltmp2982:
    0000012c: 	movq	%r12, %rbp
    0000012f: 	shlq	$0x4, %rbp
    00000133: 	addq	%r13, %rbp
    00000136: 	movq	(%rbp), %rax
    0000013a: 	movq	(%rax), %rax
    0000013d: 	cmpq	%r14, %rax
    00000140: 	je	.Ltmp2985 # Offset: 320
    00000142: 	movq	%rcx, 0x8(%rsp)
    00000147: 	movq	%rbp, %rdi
    0000014a: 	movq	%rdx, (%rsp)
    0000014e: 	callq	*%rax # Offset: 334
    00000150: 	movq	0x8(%rsp), %rcx
    00000155: 	movq	(%rsp), %rdx
    00000159: 	jmp	.Ltmp2986 # Offset: 345
    0000015b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2976:
    00000160: 	movq	%rcx, 0x10(%rsp)
    00000165: 	movq	%r12, %rdi
    00000168: 	addq	%r13, %rbx
    0000016b: 	movq	%r8, 0x8(%rsp)
    00000170: 	movq	%rdx, (%rsp)
    00000174: 	callq	*%rax # Offset: 372
    00000176: 	movq	0x10(%rsp), %rcx
    0000017b: 	movq	0x8(%rsp), %r8
    00000180: 	movq	%rax, %rsi
    00000183: 	movq	(%rbx), %rax
    00000186: 	movq	(%rsp), %rdx
    0000018a: 	movq	(%rax), %rax
    0000018d: 	cmpq	%r14, %rax
    00000190: 	je	.Ltmp2987 # Offset: 400
.Ltmp2977:
    00000196: 	movq	%rcx, 0x18(%rsp)
    0000019b: 	movq	%rbx, %rdi
    0000019e: 	movq	%r8, 0x10(%rsp)
    000001a3: 	movq	%rdx, 0x8(%rsp)
    000001a8: 	movq	%rsi, (%rsp)
    000001ac: 	callq	*%rax # Offset: 428
    000001ae: 	movq	0x18(%rsp), %rcx
    000001b3: 	movq	0x10(%rsp), %r8
    000001b8: 	movq	0x8(%rsp), %rdx
    000001bd: 	movq	(%rsp), %rsi
    000001c1: 	jmp	.Ltmp2988 # Offset: 449
    000001c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2984:
    000001d0: 	movq	0x8(%rcx), %rsi
    000001d4: 	movq	%rbp, %rbx
.Ltmp2983:
    000001d7: 	movq	%rsi, 0x8(%rbx)
    000001db: 	addq	$0x28, %rsp
    000001df: 	popq	%rbx
    000001e0: 	popq	%rbp
    000001e1: 	popq	%r12
    000001e3: 	popq	%r13
    000001e5: 	popq	%r14
    000001e7: 	popq	%r15
    000001e9: 	retq # Offset: 489
    000001ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2973:
    000001f0: 	movq	%r15, %rbx
    000001f3: 	shlq	$0x4, %rbx
    000001f7: 	addq	%rsi, %rbx
    000001fa: 	cmpq	%rdi, %rdx
    000001fd: 	jne	.Ltmp2981 # Offset: 509
    000001ff: 	movq	%rdx, %rax
    00000202: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2980:
    00000208: 	movq	%rax, %rdx
    0000020b: 	shlq	$0x4, %rdx
    0000020f: 	movq	-0x8(%r13,%rdx), %rdx
    00000214: 	movq	%rdx, 0x8(%rbx)
    00000218: 	leaq	-0x1(%rax), %rdx
    0000021c: 	movq	%rdx, %rbx
    0000021f: 	shlq	$0x4, %rbx
    00000223: 	addq	%r13, %rbx
    00000226: 	jmp	.Ltmp2989 # Offset: 550
.Ltmp2981:
    0000022b: 	movq	0x8(%rcx), %rsi
    0000022f: 	jmp	.Ltmp2983 # Offset: 559
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIP16TypeVirtualClassImES2_EEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inIP19TypeVirtualSubClassImES2_EEvlT_lT0_" after disassembly {
  Number      : 165
  State       : disassembled
  Address     : 0x174a0
  Size        : 0x231
  MaxSize     : 0x240
  Offset      : 0x174a0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIP19TypeVirtualSubClassImES2_EEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0164:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdx, %r15
    00000009: 	leaq	0x2(%rdx,%rdx), %rdx
    0000000e: 	movq	%rdi, %r8
    00000011: 	pushq	%r14
    00000013: 	pushq	%r13
    00000015: 	movq	%rsi, %r13
    00000018: 	pushq	%r12
    0000001a: 	pushq	%rbp
    0000001b: 	pushq	%rbx
    0000001c: 	subq	$0x28, %rsp
    00000020: 	cmpq	%rdi, %rdx
    00000023: 	jge	.Ltmp2990 # Offset: 35
    00000029: 	movq	%r15, %rbp
    0000002c: 	leaq	_ZN19TypeVirtualSubClassImEcvmEv(%rip), %r14
    00000033: 	jmp	.Ltmp2991 # Offset: 51
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp2995:
    00000038: 	movq	0x8(%r12), %rax
    0000003d: 	leaq	-0x1(%rdx), %rsi
    00000041: 	shlq	$0x4, %rbp
    00000045: 	movq	%rsi, %rbx
    00000048: 	movq	%rax, 0x8(%r13,%rbp)
    0000004d: 	shlq	$0x4, %rbx
    00000051: 	leaq	(%rdx,%rdx), %rax
    00000055: 	movq	%rsi, %rdx
    00000058: 	addq	%r13, %rbx
    0000005b: 	cmpq	%rax, %r8
    0000005e: 	jle	.Ltmp2992 # Offset: 94
.Ltmp2996:
    00000060: 	movq	%rdx, %rbp
    00000063: 	movq	%rax, %rdx
.Ltmp2991:
    00000066: 	movq	%rdx, %rbx
    00000069: 	shlq	$0x4, %rbx
    0000006d: 	leaq	-0x10(%r13,%rbx), %r12
    00000072: 	movq	(%r12), %rax
    00000076: 	movq	(%rax), %rax
    00000079: 	cmpq	%r14, %rax
    0000007c: 	jne	.Ltmp2993 # Offset: 124
    00000082: 	addq	%r13, %rbx
    00000085: 	movq	0x8(%r12), %rsi
    0000008a: 	movq	(%rbx), %rax
    0000008d: 	movq	(%rax), %rax
    00000090: 	cmpq	%r14, %rax
    00000093: 	jne	.Ltmp2994 # Offset: 147
.Ltmp3004:
    00000099: 	movq	0x8(%rbx), %rax
.Ltmp3005:
    0000009d: 	cmpq	%rax, %rsi
    000000a0: 	jae	.Ltmp2995 # Offset: 160
    000000a2: 	movq	0x8(%rbx), %rax
    000000a6: 	shlq	$0x4, %rbp
    000000aa: 	movq	%rax, 0x8(%r13,%rbp)
    000000af: 	leaq	0x2(%rdx,%rdx), %rax
    000000b4: 	cmpq	%rax, %r8
    000000b7: 	jg	.Ltmp2996 # Offset: 183
.Ltmp2992:
    000000b9: 	cmpq	%rax, %r8
    000000bc: 	je	.Ltmp2997 # Offset: 188
.Ltmp3006:
    000000c2: 	leaq	-0x1(%rdx), %rax
    000000c6: 	movq	%rax, %r12
    000000c9: 	shrq	$0x3f, %r12
    000000cd: 	addq	%rax, %r12
    000000d0: 	sarq	%r12
    000000d3: 	cmpq	%r15, %rdx
    000000d6: 	jle	.Ltmp2998 # Offset: 214
    000000dc: 	leaq	_ZN19TypeVirtualSubClassImEcvmEv(%rip), %r14
    000000e3: 	jmp	.Ltmp2999 # Offset: 227
    000000e5: 	nopl	(%rax) # Size: 3
.Ltmp3002:
    000000e8: 	movq	0x8(%rbp), %rax
.Ltmp3003:
    000000ec: 	movq	%rdx, %rbx
    000000ef: 	movq	0x8(%rcx), %rsi
    000000f3: 	shlq	$0x4, %rbx
    000000f7: 	addq	%r13, %rbx
    000000fa: 	cmpq	%rsi, %rax
    000000fd: 	jae	.Ltmp3000 # Offset: 253
    00000103: 	movq	0x8(%rbp), %rax
    00000107: 	leaq	-0x1(%r12), %rdx
    0000010c: 	movq	%rax, 0x8(%rbx)
    00000110: 	movq	%rdx, %rax
    00000113: 	shrq	$0x3f, %rax
    00000117: 	addq	%rdx, %rax
    0000011a: 	movq	%r12, %rdx
    0000011d: 	sarq	%rax
    00000120: 	cmpq	%r12, %r15
    00000123: 	jge	.Ltmp3001 # Offset: 291
    00000129: 	movq	%rax, %r12
.Ltmp2999:
    0000012c: 	movq	%r12, %rbp
    0000012f: 	shlq	$0x4, %rbp
    00000133: 	addq	%r13, %rbp
    00000136: 	movq	(%rbp), %rax
    0000013a: 	movq	(%rax), %rax
    0000013d: 	cmpq	%r14, %rax
    00000140: 	je	.Ltmp3002 # Offset: 320
    00000142: 	movq	%rcx, 0x8(%rsp)
    00000147: 	movq	%rbp, %rdi
    0000014a: 	movq	%rdx, (%rsp)
    0000014e: 	callq	*%rax # Offset: 334
    00000150: 	movq	0x8(%rsp), %rcx
    00000155: 	movq	(%rsp), %rdx
    00000159: 	jmp	.Ltmp3003 # Offset: 345
    0000015b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2993:
    00000160: 	movq	%rcx, 0x10(%rsp)
    00000165: 	movq	%r12, %rdi
    00000168: 	addq	%r13, %rbx
    0000016b: 	movq	%r8, 0x8(%rsp)
    00000170: 	movq	%rdx, (%rsp)
    00000174: 	callq	*%rax # Offset: 372
    00000176: 	movq	0x10(%rsp), %rcx
    0000017b: 	movq	0x8(%rsp), %r8
    00000180: 	movq	%rax, %rsi
    00000183: 	movq	(%rbx), %rax
    00000186: 	movq	(%rsp), %rdx
    0000018a: 	movq	(%rax), %rax
    0000018d: 	cmpq	%r14, %rax
    00000190: 	je	.Ltmp3004 # Offset: 400
.Ltmp2994:
    00000196: 	movq	%rcx, 0x18(%rsp)
    0000019b: 	movq	%rbx, %rdi
    0000019e: 	movq	%r8, 0x10(%rsp)
    000001a3: 	movq	%rdx, 0x8(%rsp)
    000001a8: 	movq	%rsi, (%rsp)
    000001ac: 	callq	*%rax # Offset: 428
    000001ae: 	movq	0x18(%rsp), %rcx
    000001b3: 	movq	0x10(%rsp), %r8
    000001b8: 	movq	0x8(%rsp), %rdx
    000001bd: 	movq	(%rsp), %rsi
    000001c1: 	jmp	.Ltmp3005 # Offset: 449
    000001c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3001:
    000001d0: 	movq	0x8(%rcx), %rsi
    000001d4: 	movq	%rbp, %rbx
.Ltmp3000:
    000001d7: 	movq	%rsi, 0x8(%rbx)
    000001db: 	addq	$0x28, %rsp
    000001df: 	popq	%rbx
    000001e0: 	popq	%rbp
    000001e1: 	popq	%r12
    000001e3: 	popq	%r13
    000001e5: 	popq	%r14
    000001e7: 	popq	%r15
    000001e9: 	retq # Offset: 489
    000001ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2990:
    000001f0: 	movq	%r15, %rbx
    000001f3: 	shlq	$0x4, %rbx
    000001f7: 	addq	%rsi, %rbx
    000001fa: 	cmpq	%rdi, %rdx
    000001fd: 	jne	.Ltmp2998 # Offset: 509
    000001ff: 	movq	%rdx, %rax
    00000202: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2997:
    00000208: 	movq	%rax, %rdx
    0000020b: 	shlq	$0x4, %rdx
    0000020f: 	movq	-0x8(%r13,%rdx), %rdx
    00000214: 	movq	%rdx, 0x8(%rbx)
    00000218: 	leaq	-0x1(%rax), %rdx
    0000021c: 	movq	%rdx, %rbx
    0000021f: 	shlq	$0x4, %rbx
    00000223: 	addq	%r13, %rbx
    00000226: 	jmp	.Ltmp3006 # Offset: 550
.Ltmp2998:
    0000022b: 	movq	0x8(%rcx), %rsi
    0000022f: 	jmp	.Ltmp3000 # Offset: 559
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIP19TypeVirtualSubClassImES2_EEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inIP14WorkerSubClassImES2_EEvlT_lT0_" after disassembly {
  Number      : 166
  State       : disassembled
  Address     : 0x176e0
  Size        : 0x231
  MaxSize     : 0x240
  Offset      : 0x176e0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIP14WorkerSubClassImES2_EEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0165:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdx, %r15
    00000009: 	leaq	0x2(%rdx,%rdx), %rdx
    0000000e: 	movq	%rdi, %r8
    00000011: 	pushq	%r14
    00000013: 	pushq	%r13
    00000015: 	movq	%rsi, %r13
    00000018: 	pushq	%r12
    0000001a: 	pushq	%rbp
    0000001b: 	pushq	%rbx
    0000001c: 	subq	$0x28, %rsp
    00000020: 	cmpq	%rdi, %rdx
    00000023: 	jge	.Ltmp3007 # Offset: 35
    00000029: 	movq	%r15, %rbp
    0000002c: 	leaq	_ZN14WorkerSubClassImEcvmEv(%rip), %r14
    00000033: 	jmp	.Ltmp3008 # Offset: 51
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp3012:
    00000038: 	movq	0x8(%r12), %rax
    0000003d: 	leaq	-0x1(%rdx), %rsi
    00000041: 	shlq	$0x4, %rbp
    00000045: 	movq	%rsi, %rbx
    00000048: 	movq	%rax, 0x8(%r13,%rbp)
    0000004d: 	shlq	$0x4, %rbx
    00000051: 	leaq	(%rdx,%rdx), %rax
    00000055: 	movq	%rsi, %rdx
    00000058: 	addq	%r13, %rbx
    0000005b: 	cmpq	%rax, %r8
    0000005e: 	jle	.Ltmp3009 # Offset: 94
.Ltmp3013:
    00000060: 	movq	%rdx, %rbp
    00000063: 	movq	%rax, %rdx
.Ltmp3008:
    00000066: 	movq	%rdx, %rbx
    00000069: 	shlq	$0x4, %rbx
    0000006d: 	leaq	-0x10(%r13,%rbx), %r12
    00000072: 	movq	(%r12), %rax
    00000076: 	movq	(%rax), %rax
    00000079: 	cmpq	%r14, %rax
    0000007c: 	jne	.Ltmp3010 # Offset: 124
    00000082: 	addq	%r13, %rbx
    00000085: 	movq	0x8(%r12), %rsi
    0000008a: 	movq	(%rbx), %rax
    0000008d: 	movq	(%rax), %rax
    00000090: 	cmpq	%r14, %rax
    00000093: 	jne	.Ltmp3011 # Offset: 147
.Ltmp3021:
    00000099: 	movq	0x8(%rbx), %rax
.Ltmp3022:
    0000009d: 	cmpq	%rax, %rsi
    000000a0: 	jae	.Ltmp3012 # Offset: 160
    000000a2: 	movq	0x8(%rbx), %rax
    000000a6: 	shlq	$0x4, %rbp
    000000aa: 	movq	%rax, 0x8(%r13,%rbp)
    000000af: 	leaq	0x2(%rdx,%rdx), %rax
    000000b4: 	cmpq	%rax, %r8
    000000b7: 	jg	.Ltmp3013 # Offset: 183
.Ltmp3009:
    000000b9: 	cmpq	%rax, %r8
    000000bc: 	je	.Ltmp3014 # Offset: 188
.Ltmp3023:
    000000c2: 	leaq	-0x1(%rdx), %rax
    000000c6: 	movq	%rax, %r12
    000000c9: 	shrq	$0x3f, %r12
    000000cd: 	addq	%rax, %r12
    000000d0: 	sarq	%r12
    000000d3: 	cmpq	%r15, %rdx
    000000d6: 	jle	.Ltmp3015 # Offset: 214
    000000dc: 	leaq	_ZN14WorkerSubClassImEcvmEv(%rip), %r14
    000000e3: 	jmp	.Ltmp3016 # Offset: 227
    000000e5: 	nopl	(%rax) # Size: 3
.Ltmp3019:
    000000e8: 	movq	0x8(%rbp), %rax
.Ltmp3020:
    000000ec: 	movq	%rdx, %rbx
    000000ef: 	movq	0x8(%rcx), %rsi
    000000f3: 	shlq	$0x4, %rbx
    000000f7: 	addq	%r13, %rbx
    000000fa: 	cmpq	%rsi, %rax
    000000fd: 	jae	.Ltmp3017 # Offset: 253
    00000103: 	movq	0x8(%rbp), %rax
    00000107: 	leaq	-0x1(%r12), %rdx
    0000010c: 	movq	%rax, 0x8(%rbx)
    00000110: 	movq	%rdx, %rax
    00000113: 	shrq	$0x3f, %rax
    00000117: 	addq	%rdx, %rax
    0000011a: 	movq	%r12, %rdx
    0000011d: 	sarq	%rax
    00000120: 	cmpq	%r12, %r15
    00000123: 	jge	.Ltmp3018 # Offset: 291
    00000129: 	movq	%rax, %r12
.Ltmp3016:
    0000012c: 	movq	%r12, %rbp
    0000012f: 	shlq	$0x4, %rbp
    00000133: 	addq	%r13, %rbp
    00000136: 	movq	(%rbp), %rax
    0000013a: 	movq	(%rax), %rax
    0000013d: 	cmpq	%r14, %rax
    00000140: 	je	.Ltmp3019 # Offset: 320
    00000142: 	movq	%rcx, 0x8(%rsp)
    00000147: 	movq	%rbp, %rdi
    0000014a: 	movq	%rdx, (%rsp)
    0000014e: 	callq	*%rax # Offset: 334
    00000150: 	movq	0x8(%rsp), %rcx
    00000155: 	movq	(%rsp), %rdx
    00000159: 	jmp	.Ltmp3020 # Offset: 345
    0000015b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3010:
    00000160: 	movq	%rcx, 0x10(%rsp)
    00000165: 	movq	%r12, %rdi
    00000168: 	addq	%r13, %rbx
    0000016b: 	movq	%r8, 0x8(%rsp)
    00000170: 	movq	%rdx, (%rsp)
    00000174: 	callq	*%rax # Offset: 372
    00000176: 	movq	0x10(%rsp), %rcx
    0000017b: 	movq	0x8(%rsp), %r8
    00000180: 	movq	%rax, %rsi
    00000183: 	movq	(%rbx), %rax
    00000186: 	movq	(%rsp), %rdx
    0000018a: 	movq	(%rax), %rax
    0000018d: 	cmpq	%r14, %rax
    00000190: 	je	.Ltmp3021 # Offset: 400
.Ltmp3011:
    00000196: 	movq	%rcx, 0x18(%rsp)
    0000019b: 	movq	%rbx, %rdi
    0000019e: 	movq	%r8, 0x10(%rsp)
    000001a3: 	movq	%rdx, 0x8(%rsp)
    000001a8: 	movq	%rsi, (%rsp)
    000001ac: 	callq	*%rax # Offset: 428
    000001ae: 	movq	0x18(%rsp), %rcx
    000001b3: 	movq	0x10(%rsp), %r8
    000001b8: 	movq	0x8(%rsp), %rdx
    000001bd: 	movq	(%rsp), %rsi
    000001c1: 	jmp	.Ltmp3022 # Offset: 449
    000001c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3018:
    000001d0: 	movq	0x8(%rcx), %rsi
    000001d4: 	movq	%rbp, %rbx
.Ltmp3017:
    000001d7: 	movq	%rsi, 0x8(%rbx)
    000001db: 	addq	$0x28, %rsp
    000001df: 	popq	%rbx
    000001e0: 	popq	%rbp
    000001e1: 	popq	%r12
    000001e3: 	popq	%r13
    000001e5: 	popq	%r14
    000001e7: 	popq	%r15
    000001e9: 	retq # Offset: 489
    000001ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3007:
    000001f0: 	movq	%r15, %rbx
    000001f3: 	shlq	$0x4, %rbx
    000001f7: 	addq	%rsi, %rbx
    000001fa: 	cmpq	%rdi, %rdx
    000001fd: 	jne	.Ltmp3015 # Offset: 509
    000001ff: 	movq	%rdx, %rax
    00000202: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3014:
    00000208: 	movq	%rax, %rdx
    0000020b: 	shlq	$0x4, %rdx
    0000020f: 	movq	-0x8(%r13,%rdx), %rdx
    00000214: 	movq	%rdx, 0x8(%rbx)
    00000218: 	leaq	-0x1(%rax), %rdx
    0000021c: 	movq	%rdx, %rbx
    0000021f: 	shlq	$0x4, %rbx
    00000223: 	addq	%r13, %rbx
    00000226: 	jmp	.Ltmp3023 # Offset: 550
.Ltmp3015:
    0000022b: 	movq	0x8(%rcx), %rsi
    0000022f: 	jmp	.Ltmp3017 # Offset: 559
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIP14WorkerSubClassImES2_EEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inIP18WorkerDeepSubClassImES2_EEvlT_lT0_" after disassembly {
  Number      : 167
  State       : disassembled
  Address     : 0x17920
  Size        : 0x231
  MaxSize     : 0x240
  Offset      : 0x17920
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIP18WorkerDeepSubClassImES2_EEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0166:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdx, %r15
    00000009: 	leaq	0x2(%rdx,%rdx), %rdx
    0000000e: 	movq	%rdi, %r8
    00000011: 	pushq	%r14
    00000013: 	pushq	%r13
    00000015: 	movq	%rsi, %r13
    00000018: 	pushq	%r12
    0000001a: 	pushq	%rbp
    0000001b: 	pushq	%rbx
    0000001c: 	subq	$0x28, %rsp
    00000020: 	cmpq	%rdi, %rdx
    00000023: 	jge	.Ltmp3024 # Offset: 35
    00000029: 	movq	%r15, %rbp
    0000002c: 	leaq	_ZN18WorkerDeepSubClassImEcvmEv(%rip), %r14
    00000033: 	jmp	.Ltmp3025 # Offset: 51
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp3029:
    00000038: 	movq	0x8(%r12), %rax
    0000003d: 	leaq	-0x1(%rdx), %rsi
    00000041: 	shlq	$0x4, %rbp
    00000045: 	movq	%rsi, %rbx
    00000048: 	movq	%rax, 0x8(%r13,%rbp)
    0000004d: 	shlq	$0x4, %rbx
    00000051: 	leaq	(%rdx,%rdx), %rax
    00000055: 	movq	%rsi, %rdx
    00000058: 	addq	%r13, %rbx
    0000005b: 	cmpq	%rax, %r8
    0000005e: 	jle	.Ltmp3026 # Offset: 94
.Ltmp3030:
    00000060: 	movq	%rdx, %rbp
    00000063: 	movq	%rax, %rdx
.Ltmp3025:
    00000066: 	movq	%rdx, %rbx
    00000069: 	shlq	$0x4, %rbx
    0000006d: 	leaq	-0x10(%r13,%rbx), %r12
    00000072: 	movq	(%r12), %rax
    00000076: 	movq	(%rax), %rax
    00000079: 	cmpq	%r14, %rax
    0000007c: 	jne	.Ltmp3027 # Offset: 124
    00000082: 	addq	%r13, %rbx
    00000085: 	movq	0x8(%r12), %rsi
    0000008a: 	movq	(%rbx), %rax
    0000008d: 	movq	(%rax), %rax
    00000090: 	cmpq	%r14, %rax
    00000093: 	jne	.Ltmp3028 # Offset: 147
.Ltmp3038:
    00000099: 	movq	0x8(%rbx), %rax
.Ltmp3039:
    0000009d: 	cmpq	%rax, %rsi
    000000a0: 	jae	.Ltmp3029 # Offset: 160
    000000a2: 	movq	0x8(%rbx), %rax
    000000a6: 	shlq	$0x4, %rbp
    000000aa: 	movq	%rax, 0x8(%r13,%rbp)
    000000af: 	leaq	0x2(%rdx,%rdx), %rax
    000000b4: 	cmpq	%rax, %r8
    000000b7: 	jg	.Ltmp3030 # Offset: 183
.Ltmp3026:
    000000b9: 	cmpq	%rax, %r8
    000000bc: 	je	.Ltmp3031 # Offset: 188
.Ltmp3040:
    000000c2: 	leaq	-0x1(%rdx), %rax
    000000c6: 	movq	%rax, %r12
    000000c9: 	shrq	$0x3f, %r12
    000000cd: 	addq	%rax, %r12
    000000d0: 	sarq	%r12
    000000d3: 	cmpq	%r15, %rdx
    000000d6: 	jle	.Ltmp3032 # Offset: 214
    000000dc: 	leaq	_ZN18WorkerDeepSubClassImEcvmEv(%rip), %r14
    000000e3: 	jmp	.Ltmp3033 # Offset: 227
    000000e5: 	nopl	(%rax) # Size: 3
.Ltmp3036:
    000000e8: 	movq	0x8(%rbp), %rax
.Ltmp3037:
    000000ec: 	movq	%rdx, %rbx
    000000ef: 	movq	0x8(%rcx), %rsi
    000000f3: 	shlq	$0x4, %rbx
    000000f7: 	addq	%r13, %rbx
    000000fa: 	cmpq	%rsi, %rax
    000000fd: 	jae	.Ltmp3034 # Offset: 253
    00000103: 	movq	0x8(%rbp), %rax
    00000107: 	leaq	-0x1(%r12), %rdx
    0000010c: 	movq	%rax, 0x8(%rbx)
    00000110: 	movq	%rdx, %rax
    00000113: 	shrq	$0x3f, %rax
    00000117: 	addq	%rdx, %rax
    0000011a: 	movq	%r12, %rdx
    0000011d: 	sarq	%rax
    00000120: 	cmpq	%r12, %r15
    00000123: 	jge	.Ltmp3035 # Offset: 291
    00000129: 	movq	%rax, %r12
.Ltmp3033:
    0000012c: 	movq	%r12, %rbp
    0000012f: 	shlq	$0x4, %rbp
    00000133: 	addq	%r13, %rbp
    00000136: 	movq	(%rbp), %rax
    0000013a: 	movq	(%rax), %rax
    0000013d: 	cmpq	%r14, %rax
    00000140: 	je	.Ltmp3036 # Offset: 320
    00000142: 	movq	%rcx, 0x8(%rsp)
    00000147: 	movq	%rbp, %rdi
    0000014a: 	movq	%rdx, (%rsp)
    0000014e: 	callq	*%rax # Offset: 334
    00000150: 	movq	0x8(%rsp), %rcx
    00000155: 	movq	(%rsp), %rdx
    00000159: 	jmp	.Ltmp3037 # Offset: 345
    0000015b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3027:
    00000160: 	movq	%rcx, 0x10(%rsp)
    00000165: 	movq	%r12, %rdi
    00000168: 	addq	%r13, %rbx
    0000016b: 	movq	%r8, 0x8(%rsp)
    00000170: 	movq	%rdx, (%rsp)
    00000174: 	callq	*%rax # Offset: 372
    00000176: 	movq	0x10(%rsp), %rcx
    0000017b: 	movq	0x8(%rsp), %r8
    00000180: 	movq	%rax, %rsi
    00000183: 	movq	(%rbx), %rax
    00000186: 	movq	(%rsp), %rdx
    0000018a: 	movq	(%rax), %rax
    0000018d: 	cmpq	%r14, %rax
    00000190: 	je	.Ltmp3038 # Offset: 400
.Ltmp3028:
    00000196: 	movq	%rcx, 0x18(%rsp)
    0000019b: 	movq	%rbx, %rdi
    0000019e: 	movq	%r8, 0x10(%rsp)
    000001a3: 	movq	%rdx, 0x8(%rsp)
    000001a8: 	movq	%rsi, (%rsp)
    000001ac: 	callq	*%rax # Offset: 428
    000001ae: 	movq	0x18(%rsp), %rcx
    000001b3: 	movq	0x10(%rsp), %r8
    000001b8: 	movq	0x8(%rsp), %rdx
    000001bd: 	movq	(%rsp), %rsi
    000001c1: 	jmp	.Ltmp3039 # Offset: 449
    000001c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3035:
    000001d0: 	movq	0x8(%rcx), %rsi
    000001d4: 	movq	%rbp, %rbx
.Ltmp3034:
    000001d7: 	movq	%rsi, 0x8(%rbx)
    000001db: 	addq	$0x28, %rsp
    000001df: 	popq	%rbx
    000001e0: 	popq	%rbp
    000001e1: 	popq	%r12
    000001e3: 	popq	%r13
    000001e5: 	popq	%r14
    000001e7: 	popq	%r15
    000001e9: 	retq # Offset: 489
    000001ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3024:
    000001f0: 	movq	%r15, %rbx
    000001f3: 	shlq	$0x4, %rbx
    000001f7: 	addq	%rsi, %rbx
    000001fa: 	cmpq	%rdi, %rdx
    000001fd: 	jne	.Ltmp3032 # Offset: 509
    000001ff: 	movq	%rdx, %rax
    00000202: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3031:
    00000208: 	movq	%rax, %rdx
    0000020b: 	shlq	$0x4, %rdx
    0000020f: 	movq	-0x8(%r13,%rdx), %rdx
    00000214: 	movq	%rdx, 0x8(%rbx)
    00000218: 	leaq	-0x1(%rax), %rdx
    0000021c: 	movq	%rdx, %rbx
    0000021f: 	shlq	$0x4, %rbx
    00000223: 	addq	%r13, %rbx
    00000226: 	jmp	.Ltmp3040 # Offset: 550
.Ltmp3032:
    0000022b: 	movq	0x8(%rcx), %rsi
    0000022f: 	jmp	.Ltmp3034 # Offset: 559
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIP18WorkerDeepSubClassImES2_EEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inIP15WorkerSubClass2ImES2_EEvlT_lT0_" after disassembly {
  Number      : 168
  State       : disassembled
  Address     : 0x17b60
  Size        : 0x231
  MaxSize     : 0x240
  Offset      : 0x17b60
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIP15WorkerSubClass2ImES2_EEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0167:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdx, %r15
    00000009: 	leaq	0x2(%rdx,%rdx), %rdx
    0000000e: 	movq	%rdi, %r8
    00000011: 	pushq	%r14
    00000013: 	pushq	%r13
    00000015: 	movq	%rsi, %r13
    00000018: 	pushq	%r12
    0000001a: 	pushq	%rbp
    0000001b: 	pushq	%rbx
    0000001c: 	subq	$0x28, %rsp
    00000020: 	cmpq	%rdi, %rdx
    00000023: 	jge	.Ltmp3041 # Offset: 35
    00000029: 	movq	%r15, %rbp
    0000002c: 	leaq	_ZN15WorkerSubClass2ImEcvmEv(%rip), %r14
    00000033: 	jmp	.Ltmp3042 # Offset: 51
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp3046:
    00000038: 	movq	0x8(%r12), %rax
    0000003d: 	leaq	-0x1(%rdx), %rsi
    00000041: 	shlq	$0x4, %rbp
    00000045: 	movq	%rsi, %rbx
    00000048: 	movq	%rax, 0x8(%r13,%rbp)
    0000004d: 	shlq	$0x4, %rbx
    00000051: 	leaq	(%rdx,%rdx), %rax
    00000055: 	movq	%rsi, %rdx
    00000058: 	addq	%r13, %rbx
    0000005b: 	cmpq	%rax, %r8
    0000005e: 	jle	.Ltmp3043 # Offset: 94
.Ltmp3047:
    00000060: 	movq	%rdx, %rbp
    00000063: 	movq	%rax, %rdx
.Ltmp3042:
    00000066: 	movq	%rdx, %rbx
    00000069: 	shlq	$0x4, %rbx
    0000006d: 	leaq	-0x10(%r13,%rbx), %r12
    00000072: 	movq	(%r12), %rax
    00000076: 	movq	(%rax), %rax
    00000079: 	cmpq	%r14, %rax
    0000007c: 	jne	.Ltmp3044 # Offset: 124
    00000082: 	addq	%r13, %rbx
    00000085: 	movq	0x8(%r12), %rsi
    0000008a: 	movq	(%rbx), %rax
    0000008d: 	movq	(%rax), %rax
    00000090: 	cmpq	%r14, %rax
    00000093: 	jne	.Ltmp3045 # Offset: 147
.Ltmp3055:
    00000099: 	movq	0x8(%rbx), %rax
.Ltmp3056:
    0000009d: 	cmpq	%rax, %rsi
    000000a0: 	jae	.Ltmp3046 # Offset: 160
    000000a2: 	movq	0x8(%rbx), %rax
    000000a6: 	shlq	$0x4, %rbp
    000000aa: 	movq	%rax, 0x8(%r13,%rbp)
    000000af: 	leaq	0x2(%rdx,%rdx), %rax
    000000b4: 	cmpq	%rax, %r8
    000000b7: 	jg	.Ltmp3047 # Offset: 183
.Ltmp3043:
    000000b9: 	cmpq	%rax, %r8
    000000bc: 	je	.Ltmp3048 # Offset: 188
.Ltmp3057:
    000000c2: 	leaq	-0x1(%rdx), %rax
    000000c6: 	movq	%rax, %r12
    000000c9: 	shrq	$0x3f, %r12
    000000cd: 	addq	%rax, %r12
    000000d0: 	sarq	%r12
    000000d3: 	cmpq	%r15, %rdx
    000000d6: 	jle	.Ltmp3049 # Offset: 214
    000000dc: 	leaq	_ZN15WorkerSubClass2ImEcvmEv(%rip), %r14
    000000e3: 	jmp	.Ltmp3050 # Offset: 227
    000000e5: 	nopl	(%rax) # Size: 3
.Ltmp3053:
    000000e8: 	movq	0x8(%rbp), %rax
.Ltmp3054:
    000000ec: 	movq	%rdx, %rbx
    000000ef: 	movq	0x8(%rcx), %rsi
    000000f3: 	shlq	$0x4, %rbx
    000000f7: 	addq	%r13, %rbx
    000000fa: 	cmpq	%rsi, %rax
    000000fd: 	jae	.Ltmp3051 # Offset: 253
    00000103: 	movq	0x8(%rbp), %rax
    00000107: 	leaq	-0x1(%r12), %rdx
    0000010c: 	movq	%rax, 0x8(%rbx)
    00000110: 	movq	%rdx, %rax
    00000113: 	shrq	$0x3f, %rax
    00000117: 	addq	%rdx, %rax
    0000011a: 	movq	%r12, %rdx
    0000011d: 	sarq	%rax
    00000120: 	cmpq	%r12, %r15
    00000123: 	jge	.Ltmp3052 # Offset: 291
    00000129: 	movq	%rax, %r12
.Ltmp3050:
    0000012c: 	movq	%r12, %rbp
    0000012f: 	shlq	$0x4, %rbp
    00000133: 	addq	%r13, %rbp
    00000136: 	movq	(%rbp), %rax
    0000013a: 	movq	(%rax), %rax
    0000013d: 	cmpq	%r14, %rax
    00000140: 	je	.Ltmp3053 # Offset: 320
    00000142: 	movq	%rcx, 0x8(%rsp)
    00000147: 	movq	%rbp, %rdi
    0000014a: 	movq	%rdx, (%rsp)
    0000014e: 	callq	*%rax # Offset: 334
    00000150: 	movq	0x8(%rsp), %rcx
    00000155: 	movq	(%rsp), %rdx
    00000159: 	jmp	.Ltmp3054 # Offset: 345
    0000015b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3044:
    00000160: 	movq	%rcx, 0x10(%rsp)
    00000165: 	movq	%r12, %rdi
    00000168: 	addq	%r13, %rbx
    0000016b: 	movq	%r8, 0x8(%rsp)
    00000170: 	movq	%rdx, (%rsp)
    00000174: 	callq	*%rax # Offset: 372
    00000176: 	movq	0x10(%rsp), %rcx
    0000017b: 	movq	0x8(%rsp), %r8
    00000180: 	movq	%rax, %rsi
    00000183: 	movq	(%rbx), %rax
    00000186: 	movq	(%rsp), %rdx
    0000018a: 	movq	(%rax), %rax
    0000018d: 	cmpq	%r14, %rax
    00000190: 	je	.Ltmp3055 # Offset: 400
.Ltmp3045:
    00000196: 	movq	%rcx, 0x18(%rsp)
    0000019b: 	movq	%rbx, %rdi
    0000019e: 	movq	%r8, 0x10(%rsp)
    000001a3: 	movq	%rdx, 0x8(%rsp)
    000001a8: 	movq	%rsi, (%rsp)
    000001ac: 	callq	*%rax # Offset: 428
    000001ae: 	movq	0x18(%rsp), %rcx
    000001b3: 	movq	0x10(%rsp), %r8
    000001b8: 	movq	0x8(%rsp), %rdx
    000001bd: 	movq	(%rsp), %rsi
    000001c1: 	jmp	.Ltmp3056 # Offset: 449
    000001c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3052:
    000001d0: 	movq	0x8(%rcx), %rsi
    000001d4: 	movq	%rbp, %rbx
.Ltmp3051:
    000001d7: 	movq	%rsi, 0x8(%rbx)
    000001db: 	addq	$0x28, %rsp
    000001df: 	popq	%rbx
    000001e0: 	popq	%rbp
    000001e1: 	popq	%r12
    000001e3: 	popq	%r13
    000001e5: 	popq	%r14
    000001e7: 	popq	%r15
    000001e9: 	retq # Offset: 489
    000001ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3041:
    000001f0: 	movq	%r15, %rbx
    000001f3: 	shlq	$0x4, %rbx
    000001f7: 	addq	%rsi, %rbx
    000001fa: 	cmpq	%rdi, %rdx
    000001fd: 	jne	.Ltmp3049 # Offset: 509
    000001ff: 	movq	%rdx, %rax
    00000202: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3048:
    00000208: 	movq	%rax, %rdx
    0000020b: 	shlq	$0x4, %rdx
    0000020f: 	movq	-0x8(%r13,%rdx), %rdx
    00000214: 	movq	%rdx, 0x8(%rbx)
    00000218: 	leaq	-0x1(%rax), %rdx
    0000021c: 	movq	%rdx, %rbx
    0000021f: 	shlq	$0x4, %rbx
    00000223: 	addq	%r13, %rbx
    00000226: 	jmp	.Ltmp3057 # Offset: 550
.Ltmp3049:
    0000022b: 	movq	0x8(%rcx), %rsi
    0000022f: 	jmp	.Ltmp3051 # Offset: 559
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIP15WorkerSubClass2ImES2_EEvlT_lT0_"

Binary Function "_ZN9benchmark9__sift_inIP15WorkerSubClass3ImES2_EEvlT_lT0_" after disassembly {
  Number      : 169
  State       : disassembled
  Address     : 0x17da0
  Size        : 0x231
  MaxSize     : 0x240
  Offset      : 0x17da0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark9__sift_inIP15WorkerSubClass3ImES2_EEvlT_lT0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0168:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdx, %r15
    00000009: 	leaq	0x2(%rdx,%rdx), %rdx
    0000000e: 	movq	%rdi, %r8
    00000011: 	pushq	%r14
    00000013: 	pushq	%r13
    00000015: 	movq	%rsi, %r13
    00000018: 	pushq	%r12
    0000001a: 	pushq	%rbp
    0000001b: 	pushq	%rbx
    0000001c: 	subq	$0x28, %rsp
    00000020: 	cmpq	%rdi, %rdx
    00000023: 	jge	.Ltmp3058 # Offset: 35
    00000029: 	movq	%r15, %rbp
    0000002c: 	leaq	_ZN15WorkerSubClass3ImEcvmEv(%rip), %r14
    00000033: 	jmp	.Ltmp3059 # Offset: 51
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp3063:
    00000038: 	movq	0x8(%r12), %rax
    0000003d: 	leaq	-0x1(%rdx), %rsi
    00000041: 	shlq	$0x4, %rbp
    00000045: 	movq	%rsi, %rbx
    00000048: 	movq	%rax, 0x8(%r13,%rbp)
    0000004d: 	shlq	$0x4, %rbx
    00000051: 	leaq	(%rdx,%rdx), %rax
    00000055: 	movq	%rsi, %rdx
    00000058: 	addq	%r13, %rbx
    0000005b: 	cmpq	%rax, %r8
    0000005e: 	jle	.Ltmp3060 # Offset: 94
.Ltmp3064:
    00000060: 	movq	%rdx, %rbp
    00000063: 	movq	%rax, %rdx
.Ltmp3059:
    00000066: 	movq	%rdx, %rbx
    00000069: 	shlq	$0x4, %rbx
    0000006d: 	leaq	-0x10(%r13,%rbx), %r12
    00000072: 	movq	(%r12), %rax
    00000076: 	movq	(%rax), %rax
    00000079: 	cmpq	%r14, %rax
    0000007c: 	jne	.Ltmp3061 # Offset: 124
    00000082: 	addq	%r13, %rbx
    00000085: 	movq	0x8(%r12), %rsi
    0000008a: 	movq	(%rbx), %rax
    0000008d: 	movq	(%rax), %rax
    00000090: 	cmpq	%r14, %rax
    00000093: 	jne	.Ltmp3062 # Offset: 147
.Ltmp3072:
    00000099: 	movq	0x8(%rbx), %rax
.Ltmp3073:
    0000009d: 	cmpq	%rax, %rsi
    000000a0: 	jae	.Ltmp3063 # Offset: 160
    000000a2: 	movq	0x8(%rbx), %rax
    000000a6: 	shlq	$0x4, %rbp
    000000aa: 	movq	%rax, 0x8(%r13,%rbp)
    000000af: 	leaq	0x2(%rdx,%rdx), %rax
    000000b4: 	cmpq	%rax, %r8
    000000b7: 	jg	.Ltmp3064 # Offset: 183
.Ltmp3060:
    000000b9: 	cmpq	%rax, %r8
    000000bc: 	je	.Ltmp3065 # Offset: 188
.Ltmp3074:
    000000c2: 	leaq	-0x1(%rdx), %rax
    000000c6: 	movq	%rax, %r12
    000000c9: 	shrq	$0x3f, %r12
    000000cd: 	addq	%rax, %r12
    000000d0: 	sarq	%r12
    000000d3: 	cmpq	%r15, %rdx
    000000d6: 	jle	.Ltmp3066 # Offset: 214
    000000dc: 	leaq	_ZN15WorkerSubClass3ImEcvmEv(%rip), %r14
    000000e3: 	jmp	.Ltmp3067 # Offset: 227
    000000e5: 	nopl	(%rax) # Size: 3
.Ltmp3070:
    000000e8: 	movq	0x8(%rbp), %rax
.Ltmp3071:
    000000ec: 	movq	%rdx, %rbx
    000000ef: 	movq	0x8(%rcx), %rsi
    000000f3: 	shlq	$0x4, %rbx
    000000f7: 	addq	%r13, %rbx
    000000fa: 	cmpq	%rsi, %rax
    000000fd: 	jae	.Ltmp3068 # Offset: 253
    00000103: 	movq	0x8(%rbp), %rax
    00000107: 	leaq	-0x1(%r12), %rdx
    0000010c: 	movq	%rax, 0x8(%rbx)
    00000110: 	movq	%rdx, %rax
    00000113: 	shrq	$0x3f, %rax
    00000117: 	addq	%rdx, %rax
    0000011a: 	movq	%r12, %rdx
    0000011d: 	sarq	%rax
    00000120: 	cmpq	%r12, %r15
    00000123: 	jge	.Ltmp3069 # Offset: 291
    00000129: 	movq	%rax, %r12
.Ltmp3067:
    0000012c: 	movq	%r12, %rbp
    0000012f: 	shlq	$0x4, %rbp
    00000133: 	addq	%r13, %rbp
    00000136: 	movq	(%rbp), %rax
    0000013a: 	movq	(%rax), %rax
    0000013d: 	cmpq	%r14, %rax
    00000140: 	je	.Ltmp3070 # Offset: 320
    00000142: 	movq	%rcx, 0x8(%rsp)
    00000147: 	movq	%rbp, %rdi
    0000014a: 	movq	%rdx, (%rsp)
    0000014e: 	callq	*%rax # Offset: 334
    00000150: 	movq	0x8(%rsp), %rcx
    00000155: 	movq	(%rsp), %rdx
    00000159: 	jmp	.Ltmp3071 # Offset: 345
    0000015b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3061:
    00000160: 	movq	%rcx, 0x10(%rsp)
    00000165: 	movq	%r12, %rdi
    00000168: 	addq	%r13, %rbx
    0000016b: 	movq	%r8, 0x8(%rsp)
    00000170: 	movq	%rdx, (%rsp)
    00000174: 	callq	*%rax # Offset: 372
    00000176: 	movq	0x10(%rsp), %rcx
    0000017b: 	movq	0x8(%rsp), %r8
    00000180: 	movq	%rax, %rsi
    00000183: 	movq	(%rbx), %rax
    00000186: 	movq	(%rsp), %rdx
    0000018a: 	movq	(%rax), %rax
    0000018d: 	cmpq	%r14, %rax
    00000190: 	je	.Ltmp3072 # Offset: 400
.Ltmp3062:
    00000196: 	movq	%rcx, 0x18(%rsp)
    0000019b: 	movq	%rbx, %rdi
    0000019e: 	movq	%r8, 0x10(%rsp)
    000001a3: 	movq	%rdx, 0x8(%rsp)
    000001a8: 	movq	%rsi, (%rsp)
    000001ac: 	callq	*%rax # Offset: 428
    000001ae: 	movq	0x18(%rsp), %rcx
    000001b3: 	movq	0x10(%rsp), %r8
    000001b8: 	movq	0x8(%rsp), %rdx
    000001bd: 	movq	(%rsp), %rsi
    000001c1: 	jmp	.Ltmp3073 # Offset: 449
    000001c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3069:
    000001d0: 	movq	0x8(%rcx), %rsi
    000001d4: 	movq	%rbp, %rbx
.Ltmp3068:
    000001d7: 	movq	%rsi, 0x8(%rbx)
    000001db: 	addq	$0x28, %rsp
    000001df: 	popq	%rbx
    000001e0: 	popq	%rbp
    000001e1: 	popq	%r12
    000001e3: 	popq	%r13
    000001e5: 	popq	%r14
    000001e7: 	popq	%r15
    000001e9: 	retq # Offset: 489
    000001ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3058:
    000001f0: 	movq	%r15, %rbx
    000001f3: 	shlq	$0x4, %rbx
    000001f7: 	addq	%rsi, %rbx
    000001fa: 	cmpq	%rdi, %rdx
    000001fd: 	jne	.Ltmp3066 # Offset: 509
    000001ff: 	movq	%rdx, %rax
    00000202: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3065:
    00000208: 	movq	%rax, %rdx
    0000020b: 	shlq	$0x4, %rdx
    0000020f: 	movq	-0x8(%r13,%rdx), %rdx
    00000214: 	movq	%rdx, 0x8(%rbx)
    00000218: 	leaq	-0x1(%rax), %rdx
    0000021c: 	movq	%rdx, %rbx
    0000021f: 	shlq	$0x4, %rbx
    00000223: 	addq	%r13, %rbx
    00000226: 	jmp	.Ltmp3074 # Offset: 550
.Ltmp3066:
    0000022b: 	movq	0x8(%rcx), %rsi
    0000022f: 	jmp	.Ltmp3068 # Offset: 559
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark9__sift_inIP15WorkerSubClass3ImES2_EEvlT_lT0_"

Binary Function "_Z11TestOneTypeImEvv" after disassembly {
  Number      : 170
  State       : disassembled
  Address     : 0x17fe0
  Size        : 0x45f0
  MaxSize     : 0x45f0
  Offset      : 0x17fe0
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeImEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0169:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0x84000(%rsp), %r11
.Ltmp3075:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp3075 # Offset: 37
    00000027: 	subq	$0xf68, %rsp
    0000002e: 	movq	%fs:0x28, %rax
    00000037: 	movq	%rax, 0x84f58(%rsp)
    0000003f: 	xorl	%eax, %eax
    00000041: 	leaq	0x2f050(%rsp), %rdx
    00000049: 	leaq	0x27350(%rsp), %rax
    00000051: 	movq	%rax, 0x28(%rsp)
    00000056: 	movq	%rdx, 0x8(%rsp)
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3076:
    00000060: 	leaq	_ZTV16TypeVirtualClassImE+16(%rip), %rsi
    00000067: 	addq	$0x10, %rax
    0000006b: 	movq	%rsi, -0x10(%rax)
    0000006f: 	cmpq	%rax, %rdx
    00000072: 	jne	.Ltmp3076 # Offset: 114
    00000074: 	leaq	0x36d50(%rsp), %rdx
    0000007c: 	movq	0x8(%rsp), %rax
    00000081: 	movq	%rdx, 0x18(%rsp)
    00000086: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3077:
    00000090: 	leaq	_ZTV19TypeVirtualSubClassImE+16(%rip), %rsi
    00000097: 	addq	$0x10, %rax
    0000009b: 	movq	%rsi, -0x10(%rax)
    0000009f: 	cmpq	%rax, %rdx
    000000a2: 	jne	.Ltmp3077 # Offset: 162
    000000a4: 	leaq	0x3ea50(%rsp), %rdx
    000000ac: 	movq	0x18(%rsp), %rax
    000000b1: 	movq	%rdx, 0x20(%rsp)
    000000b6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3078:
    000000c0: 	leaq	_ZTV14WorkerSubClassImE+16(%rip), %rsi
    000000c7: 	addq	$0x10, %rax
    000000cb: 	movq	%rsi, -0x10(%rax)
    000000cf: 	cmpq	%rax, %rdx
    000000d2: 	jne	.Ltmp3078 # Offset: 210
    000000d4: 	leaq	0x46750(%rsp), %rdx
    000000dc: 	movq	0x20(%rsp), %rax
    000000e1: 	movq	%rdx, 0x10(%rsp)
    000000e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3079:
    000000f0: 	leaq	_ZTV18WorkerDeepSubClassImE+16(%rip), %rdi
    000000f7: 	addq	$0x10, %rax
    000000fb: 	movq	%rdi, -0x10(%rax)
    000000ff: 	cmpq	%rax, %rdx
    00000102: 	jne	.Ltmp3079 # Offset: 258
    00000104: 	leaq	0x4e450(%rsp), %rdx
    0000010c: 	movq	0x10(%rsp), %rax
    00000111: 	movq	%rdx, (%rsp)
    00000115: 	nopl	(%rax) # Size: 3
.Ltmp3080:
    00000118: 	leaq	_ZTV15WorkerSubClass2ImE+16(%rip), %rsi
    0000011f: 	addq	$0x10, %rax
    00000123: 	movq	%rsi, -0x10(%rax)
    00000127: 	cmpq	%rax, %rdx
    0000012a: 	jne	.Ltmp3080 # Offset: 298
    0000012c: 	leaq	0x56150(%rsp), %rdx
    00000134: 	movq	(%rsp), %rax
    00000138: 	movq	%rdx, 0x38(%rsp)
    0000013d: 	nopl	(%rax) # Size: 3
.Ltmp3081:
    00000140: 	leaq	_ZTV15WorkerSubClass3ImE+16(%rip), %rdi
    00000147: 	addq	$0x10, %rax
    0000014b: 	movq	%rdi, -0x10(%rax)
    0000014f: 	cmpq	%rax, %rdx
    00000152: 	jne	.Ltmp3081 # Offset: 338
    00000154: 	leaq	0x5de50(%rsp), %rdx
    0000015c: 	movq	0x38(%rsp), %rax
    00000161: 	movq	%rdx, 0x70(%rsp)
    00000166: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3082:
    00000170: 	leaq	_ZTV16TypeVirtualClassImE+16(%rip), %rsi
    00000177: 	addq	$0x10, %rax
    0000017b: 	movq	%rsi, -0x10(%rax)
    0000017f: 	cmpq	%rax, %rdx
    00000182: 	jne	.Ltmp3082 # Offset: 386
    00000184: 	leaq	0x65b50(%rsp), %rdx
    0000018c: 	movq	0x70(%rsp), %rax
    00000191: 	movq	%rdx, 0x80(%rsp)
    00000199: 	nopl	(%rax) # Size: 7
.Ltmp3083:
    000001a0: 	leaq	_ZTV19TypeVirtualSubClassImE+16(%rip), %rdi
    000001a7: 	addq	$0x10, %rax
    000001ab: 	movq	%rdi, -0x10(%rax)
    000001af: 	cmpq	%rax, %rdx
    000001b2: 	jne	.Ltmp3083 # Offset: 434
    000001b4: 	leaq	0x6d850(%rsp), %rdx
    000001bc: 	movq	0x80(%rsp), %rax
    000001c4: 	movq	%rdx, 0x88(%rsp)
    000001cc: 	nopl	(%rax) # Size: 4
.Ltmp3084:
    000001d0: 	leaq	_ZTV14WorkerSubClassImE+16(%rip), %rsi
    000001d7: 	addq	$0x10, %rax
    000001db: 	movq	%rsi, -0x10(%rax)
    000001df: 	cmpq	%rax, %rdx
    000001e2: 	jne	.Ltmp3084 # Offset: 482
    000001e4: 	leaq	0x75550(%rsp), %rdx
    000001ec: 	movq	0x88(%rsp), %rax
    000001f4: 	movq	%rdx, 0x90(%rsp)
    000001fc: 	nopl	(%rax) # Size: 4
.Ltmp3085:
    00000200: 	leaq	_ZTV18WorkerDeepSubClassImE+16(%rip), %rdi
    00000207: 	addq	$0x10, %rax
    0000020b: 	movq	%rdi, -0x10(%rax)
    0000020f: 	cmpq	%rax, %rdx
    00000212: 	jne	.Ltmp3085 # Offset: 530
    00000214: 	leaq	0x7d250(%rsp), %rdx
    0000021c: 	movq	0x90(%rsp), %rax
    00000224: 	movq	%rdx, 0x78(%rsp)
    00000229: 	nopl	(%rax) # Size: 7
.Ltmp3086:
    00000230: 	leaq	_ZTV15WorkerSubClass2ImE+16(%rip), %rsi
    00000237: 	addq	$0x10, %rax
    0000023b: 	movq	%rsi, -0x10(%rax)
    0000023f: 	cmpq	%rax, %rdx
    00000242: 	jne	.Ltmp3086 # Offset: 578
    00000244: 	leaq	0x84f50(%rsp), %rdx
    0000024c: 	movq	0x78(%rsp), %rax
    00000251: 	movq	%rdx, 0xb8(%rsp)
    00000259: 	nopl	(%rax) # Size: 7
.Ltmp3087:
    00000260: 	leaq	_ZTV15WorkerSubClass3ImE+16(%rip), %rdi
    00000267: 	addq	$0x10, %rax
    0000026b: 	movq	%rdi, -0x10(%rax)
    0000026f: 	cmpq	%rax, %rdx
    00000272: 	jne	.Ltmp3087 # Offset: 626
    00000274: 	leaq	0x1b0(%rsp), %rax
    0000027c: 	leaq	DATAat0x1d903(%rip), %rsi
    00000283: 	movq	%rax, %rdi
    00000286: 	movq	%rax, 0xa8(%rsp)
    0000028e: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1" # Offset: 654
    00000293: 	leaq	0x190(%rsp), %rax
    0000029b: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm2
    000002a3: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm3
    000002ab: 	movq	%rax, %rsi
    000002ae: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000002b5: 	movq	%rax, 0x60(%rsp)
    000002ba: 	movaps	%xmm2, 0x190(%rsp)
    000002c2: 	movaps	%xmm3, 0x1a0(%rsp)
    000002ca: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E # Offset: 714
    000002cf: 	movl	iterations(%rip), %eax
    000002d5: 	movsd	init_value(%rip), %xmm0
    000002dd: 	movl	%eax, 0xdc(%rsp)
    000002e4: 	cvttsd2si	%xmm0, %eax
    000002e8: 	addl	$0x159, %eax
    000002ed: 	comisd	DATAat0x1ded8(%rip), %xmm0
    000002f5: 	cltq
    000002f7: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000002fe: 	jae	.Ltmp3088 # Offset: 766
    00000304: 	cvttsd2si	%xmm0, %rax
.Ltmp3458:
    00000309: 	leaq	0x250(%rsp), %rdx
    00000311: 	leaq	0x40d0(%rsp), %rcx
    00000319: 	movq	%rax, %xmm0
    0000031e: 	movq	%rdx, 0x68(%rsp)
    00000323: 	punpcklqdq	%xmm0, %xmm0
    00000327: 	movq	%rcx, 0x48(%rsp)
.Ltmp3089:
    0000032c: 	movaps	%xmm0, (%rdx)
    0000032f: 	addq	$0x10, %rdx
    00000333: 	cmpq	%rdx, %rcx
    00000336: 	jne	.Ltmp3089 # Offset: 822
    00000338: 	leaq	0x7f50(%rsp), %rcx
    00000340: 	movq	0x48(%rsp), %rdx
    00000345: 	movq	%rcx, 0x50(%rsp)
.Ltmp3090:
    0000034a: 	movaps	%xmm0, (%rdx)
    0000034d: 	addq	$0x10, %rdx
    00000351: 	cmpq	%rdx, %rcx
    00000354: 	jne	.Ltmp3090 # Offset: 852
    00000356: 	movq	0x50(%rsp), %rdx
    0000035b: 	leaq	0xbdd0(%rsp), %rbp
.Ltmp3091:
    00000363: 	movaps	%xmm0, (%rdx)
    00000366: 	addq	$0x10, %rdx
    0000036a: 	cmpq	%rdx, %rbp
    0000036d: 	jne	.Ltmp3091 # Offset: 877
    0000036f: 	leaq	0xfc50(%rsp), %rcx
    00000377: 	movq	%rbp, %rdx
    0000037a: 	movq	%rcx, 0x40(%rsp)
.Ltmp3092:
    0000037f: 	movaps	%xmm0, (%rdx)
    00000382: 	addq	$0x10, %rdx
    00000386: 	cmpq	%rdx, %rcx
    00000389: 	jne	.Ltmp3092 # Offset: 905
    0000038b: 	movq	0x28(%rsp), %rdx
    00000390: 	movq	0x8(%rsp), %rcx
    00000395: 	nopl	(%rax) # Size: 3
.Ltmp3093:
    00000398: 	addq	$0x10, %rdx
    0000039c: 	movq	%rax, -0x8(%rdx)
    000003a0: 	cmpq	%rcx, %rdx
    000003a3: 	jne	.Ltmp3093 # Offset: 931
    000003a5: 	movq	0x8(%rsp), %rdx
    000003aa: 	movq	0x18(%rsp), %rcx
    000003af: 	nop # Size: 1
.Ltmp3094:
    000003b0: 	addq	$0x10, %rdx
    000003b4: 	movq	%rax, -0x8(%rdx)
    000003b8: 	cmpq	%rcx, %rdx
    000003bb: 	jne	.Ltmp3094 # Offset: 955
    000003bd: 	movq	0x18(%rsp), %rdx
    000003c2: 	movq	0x20(%rsp), %rcx
    000003c7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3095:
    000003d0: 	addq	$0x10, %rdx
    000003d4: 	movq	%rax, -0x8(%rdx)
    000003d8: 	cmpq	%rcx, %rdx
    000003db: 	jne	.Ltmp3095 # Offset: 987
    000003dd: 	movq	0x20(%rsp), %rdx
    000003e2: 	movq	0x10(%rsp), %rcx
    000003e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3096:
    000003f0: 	addq	$0x10, %rdx
    000003f4: 	movq	%rax, -0x8(%rdx)
    000003f8: 	cmpq	%rcx, %rdx
    000003fb: 	jne	.Ltmp3096 # Offset: 1019
    000003fd: 	leaq	0x13ad0(%rsp), %rcx
    00000405: 	movq	0x40(%rsp), %rdx
    0000040a: 	movq	%rcx, 0x58(%rsp)
.Ltmp3097:
    0000040f: 	movaps	%xmm0, (%rdx)
    00000412: 	addq	$0x10, %rdx
    00000416: 	cmpq	%rdx, %rcx
    00000419: 	jne	.Ltmp3097 # Offset: 1049
    0000041b: 	movq	0x10(%rsp), %rdx
    00000420: 	movq	(%rsp), %rcx
    00000424: 	nopl	(%rax) # Size: 4
.Ltmp3098:
    00000428: 	addq	$0x10, %rdx
    0000042c: 	movq	%rax, -0x8(%rdx)
    00000430: 	cmpq	%rcx, %rdx
    00000433: 	jne	.Ltmp3098 # Offset: 1075
    00000435: 	movq	(%rsp), %rdx
    00000439: 	movq	0x38(%rsp), %rcx
    0000043e: 	nop # Size: 2
.Ltmp3099:
    00000440: 	addq	$0x10, %rdx
    00000444: 	movq	%rax, -0x8(%rdx)
    00000448: 	cmpq	%rcx, %rdx
    0000044b: 	jne	.Ltmp3099 # Offset: 1099
    0000044d: 	leaq	0x234d0(%rsp), %rax
    00000455: 	movq	0xa8(%rsp), %rsi
    0000045d: 	leaq	DATAat0x1d1eb(%rip), %rdx
    00000464: 	movq	%rax, %rdi
    00000467: 	movq	%rax, 0xa0(%rsp)
    0000046f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1135
    00000474: 	callq	clock@PLT # Offset: 1140
    00000479: 	movl	iterations(%rip), %ecx
    0000047f: 	xorl	%ebx, %ebx
    00000481: 	movsd	DATAat0x1ded0(%rip), %xmm4
    00000489: 	movq	%rax, start_time(%rip)
    00000490: 	movabsq	$-0x8000000000000000, %r12
    0000049a: 	movsd	%xmm4, 0x30(%rsp)
    000004a0: 	testl	%ecx, %ecx
    000004a2: 	jle	.Ltmp3100 # Offset: 1186
    000004a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3104:
    000004b0: 	movq	0x68(%rsp), %rax
    000004b5: 	movq	0x48(%rsp), %rdx
    000004ba: 	pxor	%xmm0, %xmm0
    000004be: 	nop # Size: 2
.Ltmp3101:
    000004c0: 	paddq	(%rax), %xmm0
    000004c4: 	addq	$0x10, %rax
    000004c8: 	cmpq	%rax, %rdx
    000004cb: 	jne	.Ltmp3101 # Offset: 1227
    000004cd: 	movsd	0x30(%rsp), %xmm1
    000004d3: 	mulsd	init_value(%rip), %xmm1
    000004db: 	comisd	DATAat0x1ded8(%rip), %xmm1
    000004e3: 	jae	.Ltmp3102 # Offset: 1251
    000004e9: 	cvttsd2si	%xmm1, %rdx
.Ltmp3457:
    000004ee: 	movdqa	%xmm0, %xmm1
    000004f2: 	psrldq	$0x8, %xmm1
    000004f7: 	paddq	%xmm1, %xmm0
    000004fb: 	movq	%xmm0, %rax
    00000500: 	cmpq	%rax, %rdx
    00000503: 	je	.Ltmp3103 # Offset: 1283
    00000505: 	movq	0x234d0(%rsp), %rdx
    0000050d: 	leaq	DATAat0x1d1d4(%rip), %rsi
    00000514: 	movl	$0x1, %edi
    00000519: 	xorl	%eax, %eax
    0000051b: 	callq	__printf_chk@PLT # Offset: 1307
    00000520: 	movl	iterations(%rip), %ecx
.Ltmp3103:
    00000526: 	addl	$0x1, %ebx
    00000529: 	cmpl	%ecx, %ebx
    0000052b: 	jl	.Ltmp3104 # Offset: 1323
.Ltmp3100:
    0000052d: 	callq	clock@PLT # Offset: 1325
    00000532: 	movq	0xa0(%rsp), %rdi
    0000053a: 	pxor	%xmm0, %xmm0
    0000053e: 	movq	%rax, end_time(%rip)
    00000545: 	subq	start_time(%rip), %rax
    0000054c: 	cvtsi2sd	%rax, %xmm0
    00000551: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00000559: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1369
    0000055e: 	movq	0x234d0(%rsp), %rdi
    00000566: 	leaq	0x234e0(%rsp), %r13
    0000056e: 	cmpq	%r13, %rdi
    00000571: 	je	.Ltmp3105 # Offset: 1393
    00000573: 	movq	0x234e0(%rsp), %rax
    0000057b: 	leaq	0x1(%rax), %rsi
    0000057f: 	callq	_ZdlPvm@PLT # Offset: 1407
.Ltmp3105:
    00000584: 	movq	0xa8(%rsp), %rsi
    0000058c: 	movq	0xa0(%rsp), %rdi
    00000594: 	leaq	DATAat0x1d2a0(%rip), %rdx
    0000059b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1435
    000005a0: 	callq	clock@PLT # Offset: 1440
    000005a5: 	movl	iterations(%rip), %ecx
    000005ab: 	xorl	%ebx, %ebx
    000005ad: 	movsd	DATAat0x1ded0(%rip), %xmm5
    000005b5: 	movq	%rax, start_time(%rip)
    000005bc: 	movabsq	$-0x8000000000000000, %r12
    000005c6: 	movsd	%xmm5, 0x30(%rsp)
    000005cc: 	testl	%ecx, %ecx
    000005ce: 	jle	.Ltmp3106 # Offset: 1486
.Ltmp3110:
    000005d0: 	movq	0x48(%rsp), %rax
    000005d5: 	movq	0x50(%rsp), %rdx
    000005da: 	pxor	%xmm0, %xmm0
    000005de: 	nop # Size: 2
.Ltmp3107:
    000005e0: 	paddq	(%rax), %xmm0
    000005e4: 	addq	$0x10, %rax
    000005e8: 	cmpq	%rax, %rdx
    000005eb: 	jne	.Ltmp3107 # Offset: 1515
    000005ed: 	movsd	0x30(%rsp), %xmm1
    000005f3: 	mulsd	init_value(%rip), %xmm1
    000005fb: 	comisd	DATAat0x1ded8(%rip), %xmm1
    00000603: 	jae	.Ltmp3108 # Offset: 1539
    00000609: 	cvttsd2si	%xmm1, %rdx
.Ltmp3456:
    0000060e: 	movdqa	%xmm0, %xmm1
    00000612: 	psrldq	$0x8, %xmm1
    00000617: 	paddq	%xmm1, %xmm0
    0000061b: 	movq	%xmm0, %rax
    00000620: 	cmpq	%rax, %rdx
    00000623: 	je	.Ltmp3109 # Offset: 1571
    00000625: 	movq	0x234d0(%rsp), %rdx
    0000062d: 	leaq	DATAat0x1d1d4(%rip), %rsi
    00000634: 	movl	$0x1, %edi
    00000639: 	xorl	%eax, %eax
    0000063b: 	callq	__printf_chk@PLT # Offset: 1595
    00000640: 	movl	iterations(%rip), %ecx
.Ltmp3109:
    00000646: 	addl	$0x1, %ebx
    00000649: 	cmpl	%ecx, %ebx
    0000064b: 	jl	.Ltmp3110 # Offset: 1611
.Ltmp3106:
    0000064d: 	callq	clock@PLT # Offset: 1613
    00000652: 	movq	0xa0(%rsp), %rdi
    0000065a: 	pxor	%xmm0, %xmm0
    0000065e: 	movq	%rax, end_time(%rip)
    00000665: 	subq	start_time(%rip), %rax
    0000066c: 	cvtsi2sd	%rax, %xmm0
    00000671: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00000679: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1657
    0000067e: 	movq	0x234d0(%rsp), %rdi
    00000686: 	cmpq	%r13, %rdi
    00000689: 	je	.Ltmp3111 # Offset: 1673
    0000068b: 	movq	0x234e0(%rsp), %rax
    00000693: 	leaq	0x1(%rax), %rsi
    00000697: 	callq	_ZdlPvm@PLT # Offset: 1687
.Ltmp3111:
    0000069c: 	movq	0xa8(%rsp), %rsi
    000006a4: 	movq	0xa0(%rsp), %rdi
    000006ac: 	leaq	DATAat0x1d2c8(%rip), %rdx
    000006b3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1715
    000006b8: 	callq	clock@PLT # Offset: 1720
    000006bd: 	movl	iterations(%rip), %ecx
    000006c3: 	xorl	%ebx, %ebx
    000006c5: 	movsd	DATAat0x1ded0(%rip), %xmm6
    000006cd: 	movq	%rax, start_time(%rip)
    000006d4: 	movabsq	$-0x8000000000000000, %r12
    000006de: 	movsd	%xmm6, 0x30(%rsp)
    000006e4: 	testl	%ecx, %ecx
    000006e6: 	jle	.Ltmp3112 # Offset: 1766
    000006ec: 	nopl	(%rax) # Size: 4
.Ltmp3116:
    000006f0: 	movq	0x50(%rsp), %rax
    000006f5: 	pxor	%xmm0, %xmm0
    000006f9: 	nopl	(%rax) # Size: 7
.Ltmp3113:
    00000700: 	paddq	(%rax), %xmm0
    00000704: 	addq	$0x10, %rax
    00000708: 	cmpq	%rax, %rbp
    0000070b: 	jne	.Ltmp3113 # Offset: 1803
    0000070d: 	movsd	0x30(%rsp), %xmm1
    00000713: 	mulsd	init_value(%rip), %xmm1
    0000071b: 	comisd	DATAat0x1ded8(%rip), %xmm1
    00000723: 	jae	.Ltmp3114 # Offset: 1827
    00000729: 	cvttsd2si	%xmm1, %rdx
.Ltmp3455:
    0000072e: 	movdqa	%xmm0, %xmm1
    00000732: 	psrldq	$0x8, %xmm1
    00000737: 	paddq	%xmm1, %xmm0
    0000073b: 	movq	%xmm0, %rax
    00000740: 	cmpq	%rax, %rdx
    00000743: 	je	.Ltmp3115 # Offset: 1859
    00000745: 	movq	0x234d0(%rsp), %rdx
    0000074d: 	leaq	DATAat0x1d1d4(%rip), %rsi
    00000754: 	movl	$0x1, %edi
    00000759: 	xorl	%eax, %eax
    0000075b: 	callq	__printf_chk@PLT # Offset: 1883
    00000760: 	movl	iterations(%rip), %ecx
.Ltmp3115:
    00000766: 	addl	$0x1, %ebx
    00000769: 	cmpl	%ecx, %ebx
    0000076b: 	jl	.Ltmp3116 # Offset: 1899
.Ltmp3112:
    0000076d: 	callq	clock@PLT # Offset: 1901
    00000772: 	movq	0xa0(%rsp), %rdi
    0000077a: 	pxor	%xmm0, %xmm0
    0000077e: 	movq	%rax, end_time(%rip)
    00000785: 	subq	start_time(%rip), %rax
    0000078c: 	cvtsi2sd	%rax, %xmm0
    00000791: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00000799: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1945
    0000079e: 	movq	0x234d0(%rsp), %rdi
    000007a6: 	cmpq	%r13, %rdi
    000007a9: 	je	.Ltmp3117 # Offset: 1961
    000007ab: 	movq	0x234e0(%rsp), %rax
    000007b3: 	leaq	0x1(%rax), %rsi
    000007b7: 	callq	_ZdlPvm@PLT # Offset: 1975
.Ltmp3117:
    000007bc: 	movq	0xa8(%rsp), %rsi
    000007c4: 	movq	0xa0(%rsp), %rdi
    000007cc: 	leaq	DATAat0x1d2f0(%rip), %rdx
    000007d3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2003
    000007d8: 	callq	clock@PLT # Offset: 2008
    000007dd: 	movl	iterations(%rip), %ecx
    000007e3: 	xorl	%ebx, %ebx
    000007e5: 	movsd	DATAat0x1ded0(%rip), %xmm7
    000007ed: 	movq	%rax, start_time(%rip)
    000007f4: 	movabsq	$-0x8000000000000000, %r12
    000007fe: 	movsd	%xmm7, 0x30(%rsp)
    00000804: 	testl	%ecx, %ecx
    00000806: 	jle	.Ltmp3118 # Offset: 2054
    0000080c: 	nopl	(%rax) # Size: 4
.Ltmp3122:
    00000810: 	movq	0x40(%rsp), %rdx
    00000815: 	movq	%rbp, %rax
    00000818: 	pxor	%xmm0, %xmm0
    0000081c: 	nopl	(%rax) # Size: 4
.Ltmp3119:
    00000820: 	paddq	(%rax), %xmm0
    00000824: 	addq	$0x10, %rax
    00000828: 	cmpq	%rax, %rdx
    0000082b: 	jne	.Ltmp3119 # Offset: 2091
    0000082d: 	movsd	0x30(%rsp), %xmm1
    00000833: 	mulsd	init_value(%rip), %xmm1
    0000083b: 	comisd	DATAat0x1ded8(%rip), %xmm1
    00000843: 	jae	.Ltmp3120 # Offset: 2115
    00000849: 	cvttsd2si	%xmm1, %rdx
.Ltmp3454:
    0000084e: 	movdqa	%xmm0, %xmm1
    00000852: 	psrldq	$0x8, %xmm1
    00000857: 	paddq	%xmm1, %xmm0
    0000085b: 	movq	%xmm0, %rax
    00000860: 	cmpq	%rax, %rdx
    00000863: 	je	.Ltmp3121 # Offset: 2147
    00000865: 	movq	0x234d0(%rsp), %rdx
    0000086d: 	leaq	DATAat0x1d1d4(%rip), %rsi
    00000874: 	movl	$0x1, %edi
    00000879: 	xorl	%eax, %eax
    0000087b: 	callq	__printf_chk@PLT # Offset: 2171
    00000880: 	movl	iterations(%rip), %ecx
.Ltmp3121:
    00000886: 	addl	$0x1, %ebx
    00000889: 	cmpl	%ecx, %ebx
    0000088b: 	jl	.Ltmp3122 # Offset: 2187
.Ltmp3118:
    0000088d: 	callq	clock@PLT # Offset: 2189
    00000892: 	movq	0xa0(%rsp), %rdi
    0000089a: 	pxor	%xmm0, %xmm0
    0000089e: 	movq	%rax, end_time(%rip)
    000008a5: 	subq	start_time(%rip), %rax
    000008ac: 	cvtsi2sd	%rax, %xmm0
    000008b1: 	divsd	DATAat0x1dec0(%rip), %xmm0
    000008b9: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2233
    000008be: 	movq	0x234d0(%rsp), %rdi
    000008c6: 	cmpq	%r13, %rdi
    000008c9: 	je	.Ltmp3123 # Offset: 2249
    000008cb: 	movq	0x234e0(%rsp), %rax
    000008d3: 	leaq	0x1(%rax), %rsi
    000008d7: 	callq	_ZdlPvm@PLT # Offset: 2263
.Ltmp3123:
    000008dc: 	movq	0xa8(%rsp), %rsi
    000008e4: 	movq	0xa0(%rsp), %rdi
    000008ec: 	leaq	DATAat0x1d318(%rip), %rdx
    000008f3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2291
    000008f8: 	callq	clock@PLT # Offset: 2296
    000008fd: 	movl	iterations(%rip), %ecx
    00000903: 	xorl	%ebx, %ebx
    00000905: 	movsd	DATAat0x1ded0(%rip), %xmm2
    0000090d: 	movq	%rax, start_time(%rip)
    00000914: 	movabsq	$-0x8000000000000000, %r12
    0000091e: 	movsd	%xmm2, 0x30(%rsp)
    00000924: 	testl	%ecx, %ecx
    00000926: 	jle	.Ltmp3124 # Offset: 2342
    0000092c: 	nopl	(%rax) # Size: 4
.Ltmp3128:
    00000930: 	movq	0x40(%rsp), %rax
    00000935: 	movq	0x58(%rsp), %rdx
    0000093a: 	pxor	%xmm0, %xmm0
    0000093e: 	nop # Size: 2
.Ltmp3125:
    00000940: 	paddq	(%rax), %xmm0
    00000944: 	addq	$0x10, %rax
    00000948: 	cmpq	%rax, %rdx
    0000094b: 	jne	.Ltmp3125 # Offset: 2379
    0000094d: 	movsd	0x30(%rsp), %xmm1
    00000953: 	mulsd	init_value(%rip), %xmm1
    0000095b: 	comisd	DATAat0x1ded8(%rip), %xmm1
    00000963: 	jae	.Ltmp3126 # Offset: 2403
    00000969: 	cvttsd2si	%xmm1, %rdx
.Ltmp3453:
    0000096e: 	movdqa	%xmm0, %xmm1
    00000972: 	psrldq	$0x8, %xmm1
    00000977: 	paddq	%xmm1, %xmm0
    0000097b: 	movq	%xmm0, %rax
    00000980: 	cmpq	%rax, %rdx
    00000983: 	je	.Ltmp3127 # Offset: 2435
    00000985: 	movq	0x234d0(%rsp), %rdx
    0000098d: 	leaq	DATAat0x1d1d4(%rip), %rsi
    00000994: 	movl	$0x1, %edi
    00000999: 	xorl	%eax, %eax
    0000099b: 	callq	__printf_chk@PLT # Offset: 2459
    000009a0: 	movl	iterations(%rip), %ecx
.Ltmp3127:
    000009a6: 	addl	$0x1, %ebx
    000009a9: 	cmpl	%ecx, %ebx
    000009ab: 	jl	.Ltmp3128 # Offset: 2475
.Ltmp3124:
    000009ad: 	callq	clock@PLT # Offset: 2477
    000009b2: 	movq	0xa0(%rsp), %rdi
    000009ba: 	pxor	%xmm0, %xmm0
    000009be: 	movq	%rax, end_time(%rip)
    000009c5: 	subq	start_time(%rip), %rax
    000009cc: 	cvtsi2sd	%rax, %xmm0
    000009d1: 	divsd	DATAat0x1dec0(%rip), %xmm0
    000009d9: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2521
    000009de: 	movq	0x234d0(%rsp), %rdi
    000009e6: 	cmpq	%r13, %rdi
    000009e9: 	je	.Ltmp3129 # Offset: 2537
    000009eb: 	movq	0x234e0(%rsp), %rax
    000009f3: 	leaq	0x1(%rax), %rsi
    000009f7: 	callq	_ZdlPvm@PLT # Offset: 2551
.Ltmp3129:
    000009fc: 	movq	0xa8(%rsp), %rsi
    00000a04: 	movq	0xa0(%rsp), %rdi
    00000a0c: 	leaq	DATAat0x1d340(%rip), %rdx
    00000a13: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2579
    00000a18: 	callq	clock@PLT # Offset: 2584
    00000a1d: 	movl	iterations(%rip), %esi
    00000a23: 	movq	%rax, start_time(%rip)
    00000a2a: 	testl	%esi, %esi
    00000a2c: 	jle	.Ltmp3130 # Offset: 2604
    00000a32: 	movsd	DATAat0x1ded0(%rip), %xmm3
    00000a3a: 	movq	0x28(%rsp), %rax
    00000a3f: 	xorl	%r12d, %r12d
    00000a42: 	leaq	0x27358(%rsp), %r14
    00000a4a: 	movabsq	$-0x8000000000000000, %r15
    00000a54: 	movsd	%xmm3, 0x30(%rsp)
    00000a5a: 	leaq	0x7ce8(%rax), %rbx
    00000a61: 	nopl	(%rax) # Size: 7
.Ltmp3134:
    00000a68: 	movq	%r14, %rax
    00000a6b: 	pxor	%xmm1, %xmm1
    00000a6f: 	nop # Size: 1
.Ltmp3131:
    00000a70: 	movdqu	(%rax), %xmm0
    00000a74: 	movdqu	0x10(%rax), %xmm2
    00000a79: 	addq	$0x20, %rax
    00000a7d: 	punpcklqdq	%xmm2, %xmm0
    00000a81: 	paddq	%xmm0, %xmm1
    00000a85: 	cmpq	%rax, %rbx
    00000a88: 	jne	.Ltmp3131 # Offset: 2696
    00000a8a: 	movsd	0x30(%rsp), %xmm0
    00000a90: 	mulsd	init_value(%rip), %xmm0
    00000a98: 	comisd	DATAat0x1ded8(%rip), %xmm0
    00000aa0: 	jae	.Ltmp3132 # Offset: 2720
    00000aa6: 	cvttsd2si	%xmm0, %rcx
.Ltmp3452:
    00000aab: 	movdqa	%xmm1, %xmm0
    00000aaf: 	movq	0x2f038(%rsp), %rax
    00000ab7: 	addq	0x2f048(%rsp), %rax
    00000abf: 	psrldq	$0x8, %xmm0
    00000ac4: 	movq	%rax, %rdx
    00000ac7: 	paddq	%xmm0, %xmm1
    00000acb: 	movq	%xmm1, %rax
    00000ad0: 	addq	%rdx, %rax
    00000ad3: 	cmpq	%rax, %rcx
    00000ad6: 	je	.Ltmp3133 # Offset: 2774
    00000ad8: 	movq	0x234d0(%rsp), %rdx
    00000ae0: 	leaq	DATAat0x1d1d4(%rip), %rsi
    00000ae7: 	movl	$0x1, %edi
    00000aec: 	xorl	%eax, %eax
    00000aee: 	callq	__printf_chk@PLT # Offset: 2798
    00000af3: 	movl	iterations(%rip), %esi
.Ltmp3133:
    00000af9: 	addl	$0x1, %r12d
    00000afd: 	cmpl	%esi, %r12d
    00000b00: 	jl	.Ltmp3134 # Offset: 2816
.Ltmp3130:
    00000b06: 	callq	clock@PLT # Offset: 2822
    00000b0b: 	movq	0xa0(%rsp), %rdi
    00000b13: 	pxor	%xmm0, %xmm0
    00000b17: 	movq	%rax, end_time(%rip)
    00000b1e: 	subq	start_time(%rip), %rax
    00000b25: 	cvtsi2sd	%rax, %xmm0
    00000b2a: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00000b32: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2866
    00000b37: 	movq	0x234d0(%rsp), %rdi
    00000b3f: 	cmpq	%r13, %rdi
    00000b42: 	je	.Ltmp3135 # Offset: 2882
    00000b44: 	movq	0x234e0(%rsp), %rax
    00000b4c: 	leaq	0x1(%rax), %rsi
    00000b50: 	callq	_ZdlPvm@PLT # Offset: 2896
.Ltmp3135:
    00000b55: 	movq	0xa8(%rsp), %rsi
    00000b5d: 	movq	0xa0(%rsp), %rdi
    00000b65: 	leaq	DATAat0x1d368(%rip), %rdx
    00000b6c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2924
    00000b71: 	callq	clock@PLT # Offset: 2929
    00000b76: 	movl	iterations(%rip), %esi
    00000b7c: 	movq	%rax, start_time(%rip)
    00000b83: 	testl	%esi, %esi
    00000b85: 	jle	.Ltmp3136 # Offset: 2949
    00000b8b: 	movsd	DATAat0x1ded0(%rip), %xmm4
    00000b93: 	movq	0x8(%rsp), %rax
    00000b98: 	xorl	%r12d, %r12d
    00000b9b: 	leaq	0x2f058(%rsp), %r14
    00000ba3: 	movabsq	$-0x8000000000000000, %r15
    00000bad: 	movsd	%xmm4, 0x30(%rsp)
    00000bb3: 	leaq	0x7ce8(%rax), %rbx
    00000bba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3140:
    00000bc0: 	movq	%r14, %rax
    00000bc3: 	pxor	%xmm1, %xmm1
    00000bc7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3137:
    00000bd0: 	movdqu	(%rax), %xmm0
    00000bd4: 	movdqu	0x10(%rax), %xmm3
    00000bd9: 	addq	$0x20, %rax
    00000bdd: 	punpcklqdq	%xmm3, %xmm0
    00000be1: 	paddq	%xmm0, %xmm1
    00000be5: 	cmpq	%rax, %rbx
    00000be8: 	jne	.Ltmp3137 # Offset: 3048
    00000bea: 	movsd	0x30(%rsp), %xmm0
    00000bf0: 	mulsd	init_value(%rip), %xmm0
    00000bf8: 	comisd	DATAat0x1ded8(%rip), %xmm0
    00000c00: 	jae	.Ltmp3138 # Offset: 3072
    00000c06: 	cvttsd2si	%xmm0, %rcx
.Ltmp3451:
    00000c0b: 	movdqa	%xmm1, %xmm0
    00000c0f: 	movq	0x36d38(%rsp), %rax
    00000c17: 	addq	0x36d48(%rsp), %rax
    00000c1f: 	psrldq	$0x8, %xmm0
    00000c24: 	movq	%rax, %rdx
    00000c27: 	paddq	%xmm0, %xmm1
    00000c2b: 	movq	%xmm1, %rax
    00000c30: 	addq	%rdx, %rax
    00000c33: 	cmpq	%rax, %rcx
    00000c36: 	je	.Ltmp3139 # Offset: 3126
    00000c38: 	movq	0x234d0(%rsp), %rdx
    00000c40: 	leaq	DATAat0x1d1d4(%rip), %rsi
    00000c47: 	movl	$0x1, %edi
    00000c4c: 	xorl	%eax, %eax
    00000c4e: 	callq	__printf_chk@PLT # Offset: 3150
    00000c53: 	movl	iterations(%rip), %esi
.Ltmp3139:
    00000c59: 	addl	$0x1, %r12d
    00000c5d: 	cmpl	%esi, %r12d
    00000c60: 	jl	.Ltmp3140 # Offset: 3168
.Ltmp3136:
    00000c66: 	callq	clock@PLT # Offset: 3174
    00000c6b: 	movq	0xa0(%rsp), %rdi
    00000c73: 	pxor	%xmm0, %xmm0
    00000c77: 	movq	%rax, end_time(%rip)
    00000c7e: 	subq	start_time(%rip), %rax
    00000c85: 	cvtsi2sd	%rax, %xmm0
    00000c8a: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00000c92: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3218
    00000c97: 	movq	0x234d0(%rsp), %rdi
    00000c9f: 	cmpq	%r13, %rdi
    00000ca2: 	je	.Ltmp3141 # Offset: 3234
    00000ca4: 	movq	0x234e0(%rsp), %rax
    00000cac: 	leaq	0x1(%rax), %rsi
    00000cb0: 	callq	_ZdlPvm@PLT # Offset: 3248
.Ltmp3141:
    00000cb5: 	movq	0xa8(%rsp), %rsi
    00000cbd: 	movq	0xa0(%rsp), %rdi
    00000cc5: 	leaq	DATAat0x1d390(%rip), %rdx
    00000ccc: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3276
    00000cd1: 	callq	clock@PLT # Offset: 3281
    00000cd6: 	movl	iterations(%rip), %esi
    00000cdc: 	movq	%rax, start_time(%rip)
    00000ce3: 	testl	%esi, %esi
    00000ce5: 	jle	.Ltmp3142 # Offset: 3301
    00000ceb: 	movsd	DATAat0x1ded0(%rip), %xmm5
    00000cf3: 	movq	0x18(%rsp), %rax
    00000cf8: 	xorl	%r12d, %r12d
    00000cfb: 	leaq	0x36d58(%rsp), %r14
    00000d03: 	movabsq	$-0x8000000000000000, %r15
    00000d0d: 	movsd	%xmm5, 0x30(%rsp)
    00000d13: 	leaq	0x7ce8(%rax), %rbx
    00000d1a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3146:
    00000d20: 	movq	%r14, %rax
    00000d23: 	pxor	%xmm1, %xmm1
    00000d27: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3143:
    00000d30: 	movdqu	(%rax), %xmm0
    00000d34: 	movdqu	0x10(%rax), %xmm4
    00000d39: 	addq	$0x20, %rax
    00000d3d: 	punpcklqdq	%xmm4, %xmm0
    00000d41: 	paddq	%xmm0, %xmm1
    00000d45: 	cmpq	%rax, %rbx
    00000d48: 	jne	.Ltmp3143 # Offset: 3400
    00000d4a: 	movsd	0x30(%rsp), %xmm0
    00000d50: 	mulsd	init_value(%rip), %xmm0
    00000d58: 	comisd	DATAat0x1ded8(%rip), %xmm0
    00000d60: 	jae	.Ltmp3144 # Offset: 3424
    00000d66: 	cvttsd2si	%xmm0, %rcx
.Ltmp3450:
    00000d6b: 	movdqa	%xmm1, %xmm0
    00000d6f: 	movq	0x3ea48(%rsp), %rax
    00000d77: 	addq	0x3ea38(%rsp), %rax
    00000d7f: 	psrldq	$0x8, %xmm0
    00000d84: 	movq	%rax, %rdx
    00000d87: 	paddq	%xmm0, %xmm1
    00000d8b: 	movq	%xmm1, %rax
    00000d90: 	addq	%rdx, %rax
    00000d93: 	cmpq	%rax, %rcx
    00000d96: 	je	.Ltmp3145 # Offset: 3478
    00000d98: 	movq	0x234d0(%rsp), %rdx
    00000da0: 	leaq	DATAat0x1d1d4(%rip), %rsi
    00000da7: 	movl	$0x1, %edi
    00000dac: 	xorl	%eax, %eax
    00000dae: 	callq	__printf_chk@PLT # Offset: 3502
    00000db3: 	movl	iterations(%rip), %esi
.Ltmp3145:
    00000db9: 	addl	$0x1, %r12d
    00000dbd: 	cmpl	%esi, %r12d
    00000dc0: 	jl	.Ltmp3146 # Offset: 3520
.Ltmp3142:
    00000dc6: 	callq	clock@PLT # Offset: 3526
    00000dcb: 	movq	0xa0(%rsp), %rdi
    00000dd3: 	pxor	%xmm0, %xmm0
    00000dd7: 	movq	%rax, end_time(%rip)
    00000dde: 	subq	start_time(%rip), %rax
    00000de5: 	cvtsi2sd	%rax, %xmm0
    00000dea: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00000df2: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3570
    00000df7: 	movq	0x234d0(%rsp), %rdi
    00000dff: 	cmpq	%r13, %rdi
    00000e02: 	je	.Ltmp3147 # Offset: 3586
    00000e04: 	movq	0x234e0(%rsp), %rax
    00000e0c: 	leaq	0x1(%rax), %rsi
    00000e10: 	callq	_ZdlPvm@PLT # Offset: 3600
.Ltmp3147:
    00000e15: 	movq	0xa8(%rsp), %rsi
    00000e1d: 	movq	0xa0(%rsp), %rdi
    00000e25: 	leaq	DATAat0x1d3b8(%rip), %rdx
    00000e2c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3628
    00000e31: 	callq	clock@PLT # Offset: 3633
    00000e36: 	movl	iterations(%rip), %ecx
    00000e3c: 	movq	%rax, start_time(%rip)
    00000e43: 	testl	%ecx, %ecx
    00000e45: 	jle	.Ltmp3148 # Offset: 3653
    00000e4b: 	movsd	DATAat0x1ded0(%rip), %xmm6
    00000e53: 	movq	0x20(%rsp), %rax
    00000e58: 	xorl	%r12d, %r12d
    00000e5b: 	leaq	0x3ea58(%rsp), %r14
    00000e63: 	movabsq	$-0x8000000000000000, %r15
    00000e6d: 	movsd	%xmm6, 0x30(%rsp)
    00000e73: 	leaq	0x7ce8(%rax), %rbx
    00000e7a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3152:
    00000e80: 	movq	%r14, %rax
    00000e83: 	pxor	%xmm1, %xmm1
    00000e87: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3149:
    00000e90: 	movdqu	(%rax), %xmm0
    00000e94: 	movdqu	0x10(%rax), %xmm5
    00000e99: 	addq	$0x20, %rax
    00000e9d: 	punpcklqdq	%xmm5, %xmm0
    00000ea1: 	paddq	%xmm0, %xmm1
    00000ea5: 	cmpq	%rax, %rbx
    00000ea8: 	jne	.Ltmp3149 # Offset: 3752
    00000eaa: 	movdqa	%xmm1, %xmm0
    00000eae: 	movq	0x46738(%rsp), %rax
    00000eb6: 	addq	0x46748(%rsp), %rax
    00000ebe: 	psrldq	$0x8, %xmm0
    00000ec3: 	movq	%rax, %rdx
    00000ec6: 	paddq	%xmm0, %xmm1
    00000eca: 	movsd	0x30(%rsp), %xmm0
    00000ed0: 	mulsd	init_value(%rip), %xmm0
    00000ed8: 	movq	%xmm1, %rax
    00000edd: 	addq	%rdx, %rax
    00000ee0: 	comisd	DATAat0x1ded8(%rip), %xmm0
    00000ee8: 	jae	.Ltmp3150 # Offset: 3816
    00000eee: 	cvttsd2si	%xmm0, %rdx
.Ltmp3449:
    00000ef3: 	cmpq	%rdx, %rax
    00000ef6: 	je	.Ltmp3151 # Offset: 3830
    00000ef8: 	movq	0x234d0(%rsp), %rdx
    00000f00: 	leaq	DATAat0x1d1d4(%rip), %rsi
    00000f07: 	movl	$0x1, %edi
    00000f0c: 	xorl	%eax, %eax
    00000f0e: 	callq	__printf_chk@PLT # Offset: 3854
    00000f13: 	movl	iterations(%rip), %ecx
.Ltmp3151:
    00000f19: 	addl	$0x1, %r12d
    00000f1d: 	cmpl	%ecx, %r12d
    00000f20: 	jl	.Ltmp3152 # Offset: 3872
.Ltmp3148:
    00000f26: 	callq	clock@PLT # Offset: 3878
    00000f2b: 	movq	0xa0(%rsp), %rdi
    00000f33: 	pxor	%xmm0, %xmm0
    00000f37: 	movq	%rax, end_time(%rip)
    00000f3e: 	subq	start_time(%rip), %rax
    00000f45: 	cvtsi2sd	%rax, %xmm0
    00000f4a: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00000f52: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3922
    00000f57: 	movq	0x234d0(%rsp), %rdi
    00000f5f: 	cmpq	%r13, %rdi
    00000f62: 	je	.Ltmp3153 # Offset: 3938
    00000f64: 	movq	0x234e0(%rsp), %rax
    00000f6c: 	leaq	0x1(%rax), %rsi
    00000f70: 	callq	_ZdlPvm@PLT # Offset: 3952
.Ltmp3153:
    00000f75: 	movq	0xa8(%rsp), %rsi
    00000f7d: 	movq	0xa0(%rsp), %rdi
    00000f85: 	leaq	DATAat0x1d3e0(%rip), %rdx
    00000f8c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3980
    00000f91: 	callq	clock@PLT # Offset: 3985
    00000f96: 	movl	iterations(%rip), %esi
    00000f9c: 	movq	%rax, start_time(%rip)
    00000fa3: 	testl	%esi, %esi
    00000fa5: 	jle	.Ltmp3154 # Offset: 4005
    00000fab: 	movsd	DATAat0x1ded0(%rip), %xmm7
    00000fb3: 	movq	0x10(%rsp), %rax
    00000fb8: 	xorl	%r12d, %r12d
    00000fbb: 	leaq	0x46758(%rsp), %r14
    00000fc3: 	movabsq	$-0x8000000000000000, %r15
    00000fcd: 	movsd	%xmm7, 0x30(%rsp)
    00000fd3: 	leaq	0x7ce8(%rax), %rbx
    00000fda: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3158:
    00000fe0: 	movq	%r14, %rax
    00000fe3: 	pxor	%xmm1, %xmm1
    00000fe7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3155:
    00000ff0: 	movdqu	(%rax), %xmm0
    00000ff4: 	movdqu	0x10(%rax), %xmm6
    00000ff9: 	addq	$0x20, %rax
    00000ffd: 	punpcklqdq	%xmm6, %xmm0
    00001001: 	paddq	%xmm0, %xmm1
    00001005: 	cmpq	%rax, %rbx
    00001008: 	jne	.Ltmp3155 # Offset: 4104
    0000100a: 	movsd	0x30(%rsp), %xmm0
    00001010: 	mulsd	init_value(%rip), %xmm0
    00001018: 	comisd	DATAat0x1ded8(%rip), %xmm0
    00001020: 	jae	.Ltmp3156 # Offset: 4128
    00001026: 	cvttsd2si	%xmm0, %rcx
.Ltmp3448:
    0000102b: 	movdqa	%xmm1, %xmm0
    0000102f: 	movq	0x4e448(%rsp), %rax
    00001037: 	addq	0x4e438(%rsp), %rax
    0000103f: 	psrldq	$0x8, %xmm0
    00001044: 	movq	%rax, %rdx
    00001047: 	paddq	%xmm0, %xmm1
    0000104b: 	movq	%xmm1, %rax
    00001050: 	addq	%rdx, %rax
    00001053: 	cmpq	%rax, %rcx
    00001056: 	je	.Ltmp3157 # Offset: 4182
    00001058: 	movq	0x234d0(%rsp), %rdx
    00001060: 	leaq	DATAat0x1d1d4(%rip), %rsi
    00001067: 	movl	$0x1, %edi
    0000106c: 	xorl	%eax, %eax
    0000106e: 	callq	__printf_chk@PLT # Offset: 4206
    00001073: 	movl	iterations(%rip), %esi
.Ltmp3157:
    00001079: 	addl	$0x1, %r12d
    0000107d: 	cmpl	%esi, %r12d
    00001080: 	jl	.Ltmp3158 # Offset: 4224
.Ltmp3154:
    00001086: 	callq	clock@PLT # Offset: 4230
    0000108b: 	movq	0xa0(%rsp), %rdi
    00001093: 	pxor	%xmm0, %xmm0
    00001097: 	movq	%rax, end_time(%rip)
    0000109e: 	subq	start_time(%rip), %rax
    000010a5: 	cvtsi2sd	%rax, %xmm0
    000010aa: 	divsd	DATAat0x1dec0(%rip), %xmm0
    000010b2: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4274
    000010b7: 	movq	0x234d0(%rsp), %rdi
    000010bf: 	cmpq	%r13, %rdi
    000010c2: 	je	.Ltmp3159 # Offset: 4290
    000010c4: 	movq	0x234e0(%rsp), %rax
    000010cc: 	leaq	0x1(%rax), %rsi
    000010d0: 	callq	_ZdlPvm@PLT # Offset: 4304
.Ltmp3159:
    000010d5: 	movq	0xa8(%rsp), %rsi
    000010dd: 	movq	0xa0(%rsp), %rdi
    000010e5: 	leaq	DATAat0x1d408(%rip), %rdx
    000010ec: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4332
    000010f1: 	callq	clock@PLT # Offset: 4337
    000010f6: 	movl	iterations(%rip), %esi
    000010fc: 	movq	%rax, start_time(%rip)
    00001103: 	testl	%esi, %esi
    00001105: 	jle	.Ltmp3160 # Offset: 4357
    0000110b: 	movsd	DATAat0x1ded0(%rip), %xmm2
    00001113: 	movq	(%rsp), %rax
    00001117: 	xorl	%r12d, %r12d
    0000111a: 	leaq	0x4e458(%rsp), %r14
    00001122: 	movabsq	$-0x8000000000000000, %r15
    0000112c: 	movsd	%xmm2, 0x30(%rsp)
    00001132: 	leaq	0x7ce8(%rax), %rbx
    00001139: 	nopl	(%rax) # Size: 7
.Ltmp3164:
    00001140: 	movq	%r14, %rax
    00001143: 	pxor	%xmm1, %xmm1
    00001147: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3161:
    00001150: 	movdqu	(%rax), %xmm0
    00001154: 	movdqu	0x10(%rax), %xmm7
    00001159: 	addq	$0x20, %rax
    0000115d: 	punpcklqdq	%xmm7, %xmm0
    00001161: 	paddq	%xmm0, %xmm1
    00001165: 	cmpq	%rbx, %rax
    00001168: 	jne	.Ltmp3161 # Offset: 4456
    0000116a: 	movsd	0x30(%rsp), %xmm0
    00001170: 	mulsd	init_value(%rip), %xmm0
    00001178: 	comisd	DATAat0x1ded8(%rip), %xmm0
    00001180: 	jae	.Ltmp3162 # Offset: 4480
    00001186: 	cvttsd2si	%xmm0, %rcx
.Ltmp3447:
    0000118b: 	movdqa	%xmm1, %xmm0
    0000118f: 	movq	0x56138(%rsp), %rax
    00001197: 	addq	0x56148(%rsp), %rax
    0000119f: 	psrldq	$0x8, %xmm0
    000011a4: 	movq	%rax, %rdx
    000011a7: 	paddq	%xmm0, %xmm1
    000011ab: 	movq	%xmm1, %rax
    000011b0: 	addq	%rdx, %rax
    000011b3: 	cmpq	%rax, %rcx
    000011b6: 	je	.Ltmp3163 # Offset: 4534
    000011b8: 	movq	0x234d0(%rsp), %rdx
    000011c0: 	leaq	DATAat0x1d1d4(%rip), %rsi
    000011c7: 	movl	$0x1, %edi
    000011cc: 	xorl	%eax, %eax
    000011ce: 	callq	__printf_chk@PLT # Offset: 4558
    000011d3: 	movl	iterations(%rip), %esi
.Ltmp3163:
    000011d9: 	addl	$0x1, %r12d
    000011dd: 	cmpl	%esi, %r12d
    000011e0: 	jl	.Ltmp3164 # Offset: 4576
.Ltmp3160:
    000011e6: 	callq	clock@PLT # Offset: 4582
    000011eb: 	movq	0xa0(%rsp), %rdi
    000011f3: 	pxor	%xmm0, %xmm0
    000011f7: 	movq	%rax, end_time(%rip)
    000011fe: 	subq	start_time(%rip), %rax
    00001205: 	cvtsi2sd	%rax, %xmm0
    0000120a: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00001212: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4626
    00001217: 	movq	0x234d0(%rsp), %rdi
    0000121f: 	cmpq	%r13, %rdi
    00001222: 	je	.Ltmp3165 # Offset: 4642
    00001224: 	movq	0x234e0(%rsp), %rax
    0000122c: 	leaq	0x1(%rax), %rsi
    00001230: 	callq	_ZdlPvm@PLT # Offset: 4656
.Ltmp3165:
    00001235: 	movq	0xa8(%rsp), %rsi
    0000123d: 	leaq	0x1d0(%rsp), %rdi
    00001245: 	leaq	DATAat0x1d207(%rip), %rdx
    0000124c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4684
    00001251: 	movl	iterations(%rip), %edx
    00001257: 	movl	$0x1, %r8d
    0000125d: 	movl	$0x1, %ecx
    00001262: 	movq	0x1d0(%rsp), %rdi
    0000126a: 	movl	$0x7d0, %esi
    0000126f: 	callq	_Z9summarizePKciiii # Offset: 4719
    00001274: 	movslq	iterations(%rip), %rax
    0000127b: 	leaq	0x17950(%rsp), %r9
    00001283: 	movabsq	$0x5851f42d4c957f2d, %rdi
    0000128d: 	movabsq	$0x14057b7ef767814f, %rsi
    00001297: 	movq	%r9, 0xb0(%rsp)
    0000129f: 	movq	%rax, %rdx
    000012a2: 	imulq	$0x51eb851f, %rax, %rax
    000012a9: 	sarl	$0x1f, %edx
    000012ac: 	sarq	$0x29, %rax
    000012b0: 	subl	%edx, %eax
    000012b2: 	movq	0x58(%rsp), %rdx
    000012b7: 	movl	%eax, iterations(%rip)
    000012bd: 	nopl	(%rax) # Size: 3
.Ltmp3166:
    000012c0: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000012c7: 	addq	$0x8, %rdx
    000012cb: 	imulq	%rdi, %rax
    000012cf: 	addq	%rsi, %rax
    000012d2: 	movq	%rax, %rcx
    000012d5: 	movq	%rax, %r8
    000012d8: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000012df: 	shrq	$0x14, %rcx
    000012e3: 	shlq	$0x17, %r8
    000012e7: 	xorq	%r8, %rcx
    000012ea: 	xorq	%rcx, %rax
    000012ed: 	sarq	$0x3, %rax
    000012f1: 	movq	%rax, -0x8(%rdx)
    000012f5: 	cmpq	%r9, %rdx
    000012f8: 	jne	.Ltmp3166 # Offset: 4856
    000012fa: 	movq	0x58(%rsp), %rbx
    000012ff: 	movq	0xb0(%rsp), %r15
    00001307: 	movl	$0x3e80, %edx
    0000130c: 	movq	%rbx, %rsi
    0000130f: 	movq	%r15, %rdi
    00001312: 	callq	memcpy@PLT # Offset: 4882
    00001317: 	leaq	0x1b7d0(%rsp), %rax
    0000131f: 	movl	$0x3e80, %edx
    00001324: 	movq	%rbx, %rsi
    00001327: 	movq	%rax, %rdi
    0000132a: 	movq	%rax, 0xc0(%rsp)
    00001332: 	callq	memcpy@PLT # Offset: 4914
    00001337: 	leaq	0x1f650(%rsp), %rax
    0000133f: 	movl	$0x3e80, %edx
    00001344: 	movq	%rbx, %rsi
    00001347: 	movq	%rax, %rdi
    0000134a: 	movq	%rax, 0xc8(%rsp)
    00001352: 	callq	memcpy@PLT # Offset: 4946
    00001357: 	movq	0xa0(%rsp), %rdi
    0000135f: 	movl	$0x3e80, %edx
    00001364: 	movq	%rbx, %rsi
    00001367: 	callq	memcpy@PLT # Offset: 4967
    0000136c: 	movq	%rbx, %rcx
    0000136f: 	movq	%rbx, %rax
    00001372: 	movq	%r15, %rsi
    00001375: 	leaq	0x56158(%rsp), %rdx
.Ltmp3167:
    0000137d: 	movdqa	(%rax), %xmm0
    00001381: 	addq	$0x10, %rax
    00001385: 	addq	$0x20, %rdx
    00001389: 	movq	%xmm0, -0x20(%rdx)
    0000138e: 	movhps	%xmm0, -0x10(%rdx)
    00001392: 	cmpq	%rsi, %rax
    00001395: 	jne	.Ltmp3167 # Offset: 5013
    00001397: 	movq	0x70(%rsp), %rsi
    0000139c: 	movq	0x58(%rsp), %rdx
    000013a1: 	leaq	0x5de58(%rsp), %rax
    000013a9: 	addq	$0x7d08, %rsi
.Ltmp3168:
    000013b0: 	movdqa	(%rdx), %xmm0
    000013b4: 	addq	$0x20, %rax
    000013b8: 	addq	$0x10, %rdx
    000013bc: 	movq	%xmm0, -0x20(%rax)
    000013c1: 	movhps	%xmm0, -0x10(%rax)
    000013c5: 	cmpq	%rax, %rsi
    000013c8: 	jne	.Ltmp3168 # Offset: 5064
    000013ca: 	movq	0x80(%rsp), %rsi
    000013d2: 	movq	0x58(%rsp), %rdx
    000013d7: 	leaq	0x65b58(%rsp), %rax
    000013df: 	addq	$0x7d08, %rsi
.Ltmp3169:
    000013e6: 	movdqa	(%rdx), %xmm0
    000013ea: 	addq	$0x20, %rax
    000013ee: 	addq	$0x10, %rdx
    000013f2: 	movq	%xmm0, -0x20(%rax)
    000013f7: 	movhps	%xmm0, -0x10(%rax)
    000013fb: 	cmpq	%rax, %rsi
    000013fe: 	jne	.Ltmp3169 # Offset: 5118
    00001400: 	movq	0x58(%rsp), %rax
    00001405: 	movq	0xb0(%rsp), %rsi
    0000140d: 	leaq	0x6d858(%rsp), %rdx
.Ltmp3170:
    00001415: 	movdqa	(%rax), %xmm0
    00001419: 	addq	$0x10, %rax
    0000141d: 	addq	$0x20, %rdx
    00001421: 	movq	%xmm0, -0x20(%rdx)
    00001426: 	movhps	%xmm0, -0x10(%rdx)
    0000142a: 	cmpq	%rax, %rsi
    0000142d: 	jne	.Ltmp3170 # Offset: 5165
    0000142f: 	movq	0x58(%rsp), %rax
    00001434: 	movq	0xb0(%rsp), %rsi
    0000143c: 	leaq	0x75558(%rsp), %rdx
.Ltmp3171:
    00001444: 	movdqa	(%rax), %xmm0
    00001448: 	addq	$0x10, %rax
    0000144c: 	addq	$0x20, %rdx
    00001450: 	movq	%xmm0, -0x20(%rdx)
    00001455: 	movhps	%xmm0, -0x10(%rdx)
    00001459: 	cmpq	%rax, %rsi
    0000145c: 	jne	.Ltmp3171 # Offset: 5212
    0000145e: 	movq	0x78(%rsp), %rsi
    00001463: 	leaq	0x7d258(%rsp), %rax
    0000146b: 	leaq	0x7d08(%rsi), %rdx
.Ltmp3172:
    00001472: 	movdqa	(%rcx), %xmm0
    00001476: 	addq	$0x20, %rax
    0000147a: 	addq	$0x10, %rcx
    0000147e: 	movq	%xmm0, -0x20(%rax)
    00001483: 	movhps	%xmm0, -0x10(%rax)
    00001487: 	cmpq	%rdx, %rax
    0000148a: 	jne	.Ltmp3172 # Offset: 5258
    0000148c: 	leaq	0x230(%rsp), %rax
    00001494: 	movq	0xa8(%rsp), %rsi
    0000149c: 	leaq	DATAat0x1d430(%rip), %rdx
    000014a3: 	movq	%rax, %rdi
    000014a6: 	movq	%rax, 0x30(%rsp)
    000014ab: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5291
    000014b0: 	callq	clock@PLT # Offset: 5296
    000014b5: 	xorl	%ebx, %ebx
    000014b7: 	leaq	0x258(%rsp), %r12
    000014bf: 	movq	%rax, start_time(%rip)
    000014c6: 	movl	iterations(%rip), %eax
    000014cc: 	testl	%eax, %eax
    000014ce: 	jle	.Ltmp3173 # Offset: 5326
.Ltmp3177:
    000014d0: 	movq	0x68(%rsp), %r15
    000014d5: 	movq	0x58(%rsp), %rsi
    000014da: 	movl	$0x3e80, %edx
    000014df: 	movq	%r15, %rdi
    000014e2: 	callq	memcpy@PLT # Offset: 5346
    000014e7: 	movq	0x48(%rsp), %r9
    000014ec: 	movq	%r12, %rdi
    000014ef: 	movq	%r15, %r8
    000014f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3176:
    000014f8: 	movq	(%rdi), %rsi
    000014fb: 	movq	%rdi, %rax
    000014fe: 	nop # Size: 2
.Ltmp3175:
    00001500: 	movq	%rax, %rdx
    00001503: 	leaq	-0x8(%rax), %rax
    00001507: 	movq	-0x8(%rdx), %rcx
    0000150b: 	cmpq	%rcx, %rsi
    0000150e: 	jae	.Ltmp3174 # Offset: 5390
    00001510: 	movq	%rcx, 0x8(%rax)
    00001514: 	cmpq	%r8, %rax
    00001517: 	jne	.Ltmp3175 # Offset: 5399
    00001519: 	movq	%r8, %rdx
.Ltmp3174:
    0000151c: 	addq	$0x8, %rdi
    00001520: 	movq	%rsi, (%rdx)
    00001523: 	cmpq	%r9, %rdi
    00001526: 	jne	.Ltmp3176 # Offset: 5414
    00001528: 	movq	0x30(%rsp), %rdx
    0000152d: 	movq	0x48(%rsp), %rsi
    00001532: 	movq	0x68(%rsp), %rdi
    00001537: 	callq	_Z13verify_sortedIPmEvT_S1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5431
    0000153c: 	addl	$0x1, %ebx
    0000153f: 	cmpl	iterations(%rip), %ebx
    00001545: 	jl	.Ltmp3177 # Offset: 5445
.Ltmp3173:
    00001547: 	callq	clock@PLT # Offset: 5447
    0000154c: 	movq	0x30(%rsp), %rdi
    00001551: 	pxor	%xmm0, %xmm0
    00001555: 	movq	%rax, end_time(%rip)
    0000155c: 	subq	start_time(%rip), %rax
    00001563: 	cvtsi2sd	%rax, %xmm0
    00001568: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00001570: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5488
    00001575: 	movq	0x230(%rsp), %rdi
    0000157d: 	leaq	0x240(%rsp), %rax
    00001585: 	movq	%rax, 0x98(%rsp)
    0000158d: 	cmpq	%rax, %rdi
    00001590: 	je	.Ltmp3178 # Offset: 5520
    00001592: 	movq	0x240(%rsp), %rax
    0000159a: 	leaq	0x1(%rax), %rsi
    0000159e: 	callq	_ZdlPvm@PLT # Offset: 5534
.Ltmp3178:
    000015a3: 	movq	0xa8(%rsp), %rsi
    000015ab: 	movq	0x30(%rsp), %rdi
    000015b0: 	leaq	DATAat0x1d450(%rip), %rdx
    000015b7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5559
    000015bc: 	callq	clock@PLT # Offset: 5564
    000015c1: 	xorl	%ebx, %ebx
    000015c3: 	leaq	0x40d8(%rsp), %r12
    000015cb: 	movq	%rax, start_time(%rip)
    000015d2: 	movl	iterations(%rip), %eax
    000015d8: 	testl	%eax, %eax
    000015da: 	jle	.Ltmp3179 # Offset: 5594
    000015dc: 	nopl	(%rax) # Size: 4
.Ltmp3183:
    000015e0: 	movq	0x48(%rsp), %r15
    000015e5: 	movq	0xb0(%rsp), %rsi
    000015ed: 	movl	$0x3e80, %edx
    000015f2: 	movq	%r15, %rdi
    000015f5: 	callq	memcpy@PLT # Offset: 5621
    000015fa: 	movq	0x50(%rsp), %r8
    000015ff: 	movq	%r12, %rsi
    00001602: 	movq	%r15, %rdi
    00001605: 	nopl	(%rax) # Size: 3
.Ltmp3182:
    00001608: 	movq	(%rsi), %rcx
    0000160b: 	movq	%rsi, %rdx
    0000160e: 	nop # Size: 2
.Ltmp3181:
    00001610: 	movq	%rdx, %rax
    00001613: 	leaq	-0x8(%rdx), %rdx
    00001617: 	cmpq	-0x8(%rax), %rcx
    0000161b: 	jae	.Ltmp3180 # Offset: 5659
    0000161d: 	movq	-0x8(%rax), %rax
    00001621: 	movq	%rax, 0x8(%rdx)
    00001625: 	cmpq	%rdi, %rdx
    00001628: 	jne	.Ltmp3181 # Offset: 5672
    0000162a: 	movq	%rdi, %rax
.Ltmp3180:
    0000162d: 	addq	$0x8, %rsi
    00001631: 	movq	%rcx, (%rax)
    00001634: 	cmpq	%r8, %rsi
    00001637: 	jne	.Ltmp3182 # Offset: 5687
    00001639: 	movq	0x30(%rsp), %rdx
    0000163e: 	movq	0x50(%rsp), %rsi
    00001643: 	movq	0x48(%rsp), %rdi
    00001648: 	callq	_Z13verify_sortedIP9TypeClassImEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5704
    0000164d: 	addl	$0x1, %ebx
    00001650: 	cmpl	iterations(%rip), %ebx
    00001656: 	jl	.Ltmp3183 # Offset: 5718
.Ltmp3179:
    00001658: 	callq	clock@PLT # Offset: 5720
    0000165d: 	movq	0x30(%rsp), %rdi
    00001662: 	pxor	%xmm0, %xmm0
    00001666: 	movq	%rax, end_time(%rip)
    0000166d: 	subq	start_time(%rip), %rax
    00001674: 	cvtsi2sd	%rax, %xmm0
    00001679: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00001681: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5761
    00001686: 	movq	0x230(%rsp), %rdi
    0000168e: 	cmpq	0x98(%rsp), %rdi
    00001696: 	je	.Ltmp3184 # Offset: 5782
    00001698: 	movq	0x240(%rsp), %rax
    000016a0: 	leaq	0x1(%rax), %rsi
    000016a4: 	callq	_ZdlPvm@PLT # Offset: 5796
.Ltmp3184:
    000016a9: 	movq	0xa8(%rsp), %rsi
    000016b1: 	movq	0x30(%rsp), %rdi
    000016b6: 	leaq	DATAat0x1d480(%rip), %rdx
    000016bd: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5821
    000016c2: 	callq	clock@PLT # Offset: 5826
    000016c7: 	movl	iterations(%rip), %r13d
    000016ce: 	xorl	%ebx, %ebx
    000016d0: 	leaq	0x7f58(%rsp), %r12
    000016d8: 	movq	%rax, start_time(%rip)
    000016df: 	leaq	DATAat0x1d1cf(%rip), %r14
    000016e6: 	testl	%r13d, %r13d
    000016e9: 	jle	.Ltmp3185 # Offset: 5865
    000016ef: 	nop # Size: 1
.Ltmp3191:
    000016f0: 	movq	0x50(%rsp), %r15
    000016f5: 	movq	0xc0(%rsp), %rsi
    000016fd: 	movl	$0x3e80, %edx
    00001702: 	movq	%r15, %rdi
    00001705: 	callq	memcpy@PLT # Offset: 5893
    0000170a: 	movq	%r12, %rsi
    0000170d: 	movq	%r15, %rdi
.Ltmp3188:
    00001710: 	movq	(%rsi), %rcx
    00001713: 	movq	%rsi, %rdx
    00001716: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3187:
    00001720: 	movq	%rdx, %rax
    00001723: 	leaq	-0x8(%rdx), %rdx
    00001727: 	cmpq	-0x8(%rax), %rcx
    0000172b: 	jae	.Ltmp3186 # Offset: 5931
    0000172d: 	movq	-0x8(%rax), %rax
    00001731: 	movq	%rax, 0x8(%rdx)
    00001735: 	cmpq	%rdi, %rdx
    00001738: 	jne	.Ltmp3187 # Offset: 5944
    0000173a: 	movq	%rdi, %rax
.Ltmp3186:
    0000173d: 	addq	$0x8, %rsi
    00001741: 	movq	%rcx, (%rax)
    00001744: 	cmpq	%rbp, %rsi
    00001747: 	jne	.Ltmp3188 # Offset: 5959
    00001749: 	movq	0x7f50(%rsp), %rdx
    00001751: 	movq	%r12, %rax
    00001754: 	nopl	(%rax) # Size: 4
.Ltmp3190:
    00001758: 	addq	$0x8, %rax
    0000175c: 	movq	%rdx, %rcx
    0000175f: 	movq	-0x8(%rax), %rdx
    00001763: 	cmpq	%rdx, %rcx
    00001766: 	ja	.Ltmp3189 # Offset: 5990
    0000176c: 	cmpq	%rbp, %rax
    0000176f: 	jne	.Ltmp3190 # Offset: 5999
    00001771: 	addl	$0x1, %ebx
    00001774: 	cmpl	%r13d, %ebx
    00001777: 	jl	.Ltmp3191 # Offset: 6007
.Ltmp3185:
    0000177d: 	callq	clock@PLT # Offset: 6013
    00001782: 	movq	0x30(%rsp), %rdi
    00001787: 	pxor	%xmm0, %xmm0
    0000178b: 	movq	%rax, end_time(%rip)
    00001792: 	subq	start_time(%rip), %rax
    00001799: 	cvtsi2sd	%rax, %xmm0
    0000179e: 	divsd	DATAat0x1dec0(%rip), %xmm0
    000017a6: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6054
    000017ab: 	movq	0x230(%rsp), %rdi
    000017b3: 	cmpq	0x98(%rsp), %rdi
    000017bb: 	je	.Ltmp3192 # Offset: 6075
    000017bd: 	movq	0x240(%rsp), %rax
    000017c5: 	leaq	0x1(%rax), %rsi
    000017c9: 	callq	_ZdlPvm@PLT # Offset: 6089
.Ltmp3192:
    000017ce: 	movq	0xa8(%rsp), %rsi
    000017d6: 	movq	0x30(%rsp), %rdi
    000017db: 	leaq	DATAat0x1d4a8(%rip), %rdx
    000017e2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6114
    000017e7: 	callq	clock@PLT # Offset: 6119
    000017ec: 	movl	iterations(%rip), %r15d
    000017f3: 	xorl	%ebx, %ebx
    000017f5: 	leaq	0xbdd8(%rsp), %r12
    000017fd: 	movq	%rax, start_time(%rip)
    00001804: 	testl	%r15d, %r15d
    00001807: 	jle	.Ltmp3193 # Offset: 6151
    00001809: 	nopl	(%rax) # Size: 7
.Ltmp3197:
    00001810: 	movq	0xc8(%rsp), %rsi
    00001818: 	movq	%rbp, %rdi
    0000181b: 	movl	$0x3e80, %edx
    00001820: 	callq	memcpy@PLT # Offset: 6176
    00001825: 	movq	0x40(%rsp), %rdi
    0000182a: 	movq	%r12, %rsi
    0000182d: 	nopl	(%rax) # Size: 3
.Ltmp3196:
    00001830: 	movq	(%rsi), %rcx
    00001833: 	movq	%rsi, %rdx
    00001836: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3195:
    00001840: 	movq	%rdx, %rax
    00001843: 	leaq	-0x8(%rdx), %rdx
    00001847: 	cmpq	-0x8(%rax), %rcx
    0000184b: 	jae	.Ltmp3194 # Offset: 6219
    0000184d: 	movq	-0x8(%rax), %rax
    00001851: 	movq	%rax, 0x8(%rdx)
    00001855: 	cmpq	%rbp, %rdx
    00001858: 	jne	.Ltmp3195 # Offset: 6232
    0000185a: 	movq	%rbp, %rax
.Ltmp3194:
    0000185d: 	addq	$0x8, %rsi
    00001861: 	movq	%rcx, (%rax)
    00001864: 	cmpq	%rdi, %rsi
    00001867: 	jne	.Ltmp3196 # Offset: 6247
    00001869: 	movq	0x30(%rsp), %rdx
    0000186e: 	movq	0x40(%rsp), %rsi
    00001873: 	movq	%rbp, %rdi
    00001876: 	callq	_Z13verify_sortedIP13TypeSub2ClassImEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6262
    0000187b: 	addl	$0x1, %ebx
    0000187e: 	cmpl	iterations(%rip), %ebx
    00001884: 	jl	.Ltmp3197 # Offset: 6276
.Ltmp3193:
    00001886: 	callq	clock@PLT # Offset: 6278
    0000188b: 	movq	0x30(%rsp), %rdi
    00001890: 	pxor	%xmm0, %xmm0
    00001894: 	movq	%rax, end_time(%rip)
    0000189b: 	subq	start_time(%rip), %rax
    000018a2: 	cvtsi2sd	%rax, %xmm0
    000018a7: 	divsd	DATAat0x1dec0(%rip), %xmm0
    000018af: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6319
    000018b4: 	movq	0x230(%rsp), %rdi
    000018bc: 	cmpq	0x98(%rsp), %rdi
    000018c4: 	je	.Ltmp3198 # Offset: 6340
    000018c6: 	movq	0x240(%rsp), %rax
    000018ce: 	leaq	0x1(%rax), %rsi
    000018d2: 	callq	_ZdlPvm@PLT # Offset: 6354
.Ltmp3198:
    000018d7: 	movq	0xa8(%rsp), %rsi
    000018df: 	movq	0x30(%rsp), %rdi
    000018e4: 	leaq	DATAat0x1d4d0(%rip), %rdx
    000018eb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6379
    000018f0: 	callq	clock@PLT # Offset: 6384
    000018f5: 	movl	iterations(%rip), %r14d
    000018fc: 	xorl	%ebx, %ebx
    000018fe: 	leaq	0xfc58(%rsp), %r12
    00001906: 	movq	%rax, start_time(%rip)
    0000190d: 	testl	%r14d, %r14d
    00001910: 	jle	.Ltmp3199 # Offset: 6416
    00001916: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3203:
    00001920: 	movq	0x40(%rsp), %r15
    00001925: 	movq	0xa0(%rsp), %rsi
    0000192d: 	movl	$0x3e80, %edx
    00001932: 	movq	%r15, %rdi
    00001935: 	callq	memcpy@PLT # Offset: 6453
    0000193a: 	movq	0x58(%rsp), %r8
    0000193f: 	movq	%r12, %rsi
    00001942: 	movq	%r15, %rdi
    00001945: 	nopl	(%rax) # Size: 3
.Ltmp3202:
    00001948: 	movq	(%rsi), %rcx
    0000194b: 	movq	%rsi, %rdx
    0000194e: 	nop # Size: 2
.Ltmp3201:
    00001950: 	movq	%rdx, %rax
    00001953: 	leaq	-0x8(%rdx), %rdx
    00001957: 	cmpq	-0x8(%rax), %rcx
    0000195b: 	jae	.Ltmp3200 # Offset: 6491
    0000195d: 	movq	-0x8(%rax), %rax
    00001961: 	movq	%rax, 0x8(%rdx)
    00001965: 	cmpq	%rdi, %rdx
    00001968: 	jne	.Ltmp3201 # Offset: 6504
    0000196a: 	movq	%rdi, %rax
.Ltmp3200:
    0000196d: 	addq	$0x8, %rsi
    00001971: 	movq	%rcx, (%rax)
    00001974: 	cmpq	%r8, %rsi
    00001977: 	jne	.Ltmp3202 # Offset: 6519
    00001979: 	movq	0x30(%rsp), %rdx
    0000197e: 	movq	0x58(%rsp), %rsi
    00001983: 	movq	0x40(%rsp), %rdi
    00001988: 	callq	_Z13verify_sortedIP12DeepSubClassImEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6536
    0000198d: 	addl	$0x1, %ebx
    00001990: 	cmpl	iterations(%rip), %ebx
    00001996: 	jl	.Ltmp3203 # Offset: 6550
.Ltmp3199:
    00001998: 	callq	clock@PLT # Offset: 6552
    0000199d: 	movq	0x30(%rsp), %rdi
    000019a2: 	pxor	%xmm0, %xmm0
    000019a6: 	movq	%rax, end_time(%rip)
    000019ad: 	subq	start_time(%rip), %rax
    000019b4: 	cvtsi2sd	%rax, %xmm0
    000019b9: 	divsd	DATAat0x1dec0(%rip), %xmm0
    000019c1: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6593
    000019c6: 	movq	0x230(%rsp), %rdi
    000019ce: 	cmpq	0x98(%rsp), %rdi
    000019d6: 	je	.Ltmp3204 # Offset: 6614
    000019d8: 	movq	0x240(%rsp), %rax
    000019e0: 	leaq	0x1(%rax), %rsi
    000019e4: 	callq	_ZdlPvm@PLT # Offset: 6628
.Ltmp3204:
    000019e9: 	movq	0xa8(%rsp), %rsi
    000019f1: 	movq	0x30(%rsp), %rdi
    000019f6: 	leaq	DATAat0x1d4f8(%rip), %rdx
    000019fd: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6653
    00001a02: 	callq	clock@PLT # Offset: 6658
    00001a07: 	movl	iterations(%rip), %r13d
    00001a0e: 	movl	$0x0, 0xd8(%rsp)
    00001a19: 	leaq	_ZN16TypeVirtualClassImEcvmEv(%rip), %r14
    00001a20: 	movq	%rax, start_time(%rip)
    00001a27: 	leaq	0x27360(%rsp), %rax
    00001a2f: 	movq	%rax, 0xd0(%rsp)
    00001a37: 	testl	%r13d, %r13d
    00001a3a: 	jle	.Ltmp3205 # Offset: 6714
.Ltmp3213:
    00001a40: 	movq	0x28(%rsp), %rdx
    00001a45: 	movq	0x38(%rsp), %rax
    00001a4a: 	movq	0x70(%rsp), %rsi
    00001a4f: 	nop # Size: 1
.Ltmp3206:
    00001a50: 	movq	0x8(%rax), %rcx
    00001a54: 	addq	$0x10, %rax
    00001a58: 	addq	$0x10, %rdx
    00001a5c: 	movq	%rcx, -0x8(%rdx)
    00001a60: 	cmpq	%rsi, %rax
    00001a63: 	jne	.Ltmp3206 # Offset: 6755
    00001a65: 	movq	0xd0(%rsp), %r15
    00001a6d: 	nopl	(%rax) # Size: 3
.Ltmp3212:
    00001a70: 	movq	0x8(%r15), %r12
    00001a74: 	movq	%r15, %rbx
    00001a77: 	jmp	.Ltmp3207 # Offset: 6775
    00001a79: 	nopl	(%rax) # Size: 7
.Ltmp3210:
    00001a80: 	movq	0x8(%rbx), %rax
    00001a84: 	cmpq	%rax, %r12
    00001a87: 	jae	.Ltmp3208 # Offset: 6791
.Ltmp3211:
    00001a89: 	movq	0x8(%rbx), %rax
    00001a8d: 	movq	%rax, 0x18(%rbx)
    00001a91: 	cmpq	0x28(%rsp), %rbx
    00001a96: 	je	.Ltmp3209 # Offset: 6806
.Ltmp3207:
    00001a9c: 	movq	%rbx, %r13
    00001a9f: 	movq	-0x10(%rbx), %rax
    00001aa3: 	subq	$0x10, %rbx
    00001aa7: 	movq	(%rax), %rax
    00001aaa: 	cmpq	%r14, %rax
    00001aad: 	je	.Ltmp3210 # Offset: 6829
    00001aaf: 	movq	%rbx, %rdi
    00001ab2: 	callq	*%rax # Offset: 6834
    00001ab4: 	cmpq	%rax, %r12
    00001ab7: 	jb	.Ltmp3211 # Offset: 6839
.Ltmp3208:
    00001ab9: 	movq	%r12, 0x8(%r13)
    00001abd: 	addq	$0x10, %r15
    00001ac1: 	cmpq	0x8(%rsp), %r15
    00001ac6: 	jne	.Ltmp3212 # Offset: 6854
.Ltmp3440:
    00001ac8: 	movq	0x30(%rsp), %rdx
    00001acd: 	movq	0x8(%rsp), %rsi
    00001ad2: 	movq	0x28(%rsp), %rdi
    00001ad7: 	callq	_Z13verify_sortedIP16TypeVirtualClassImEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6871
    00001adc: 	addl	$0x1, 0xd8(%rsp)
    00001ae4: 	movl	0xd8(%rsp), %eax
    00001aeb: 	cmpl	iterations(%rip), %eax
    00001af1: 	jl	.Ltmp3213 # Offset: 6897
.Ltmp3205:
    00001af7: 	callq	clock@PLT # Offset: 6903
    00001afc: 	movq	0x30(%rsp), %rdi
    00001b01: 	pxor	%xmm0, %xmm0
    00001b05: 	movq	%rax, end_time(%rip)
    00001b0c: 	subq	start_time(%rip), %rax
    00001b13: 	cvtsi2sd	%rax, %xmm0
    00001b18: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00001b20: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6944
    00001b25: 	movq	0x230(%rsp), %rdi
    00001b2d: 	cmpq	0x98(%rsp), %rdi
    00001b35: 	je	.Ltmp3214 # Offset: 6965
    00001b37: 	movq	0x240(%rsp), %rax
    00001b3f: 	leaq	0x1(%rax), %rsi
    00001b43: 	callq	_ZdlPvm@PLT # Offset: 6979
.Ltmp3214:
    00001b48: 	movq	0xa8(%rsp), %rsi
    00001b50: 	movq	0x30(%rsp), %rdi
    00001b55: 	leaq	DATAat0x1d528(%rip), %rdx
    00001b5c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7004
    00001b61: 	callq	clock@PLT # Offset: 7009
    00001b66: 	movl	iterations(%rip), %r12d
    00001b6d: 	movl	$0x0, 0xd8(%rsp)
    00001b78: 	leaq	_ZN19TypeVirtualSubClassImEcvmEv(%rip), %r14
    00001b7f: 	movq	%rax, start_time(%rip)
    00001b86: 	leaq	0x2f060(%rsp), %rax
    00001b8e: 	movq	%rax, 0xd0(%rsp)
    00001b96: 	testl	%r12d, %r12d
    00001b99: 	jle	.Ltmp3215 # Offset: 7065
    00001b9f: 	nop # Size: 1
.Ltmp3223:
    00001ba0: 	movq	0x8(%rsp), %rdx
    00001ba5: 	movq	0x70(%rsp), %rax
    00001baa: 	movq	0x80(%rsp), %rsi
    00001bb2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3216:
    00001bb8: 	movq	0x8(%rax), %rcx
    00001bbc: 	addq	$0x10, %rax
    00001bc0: 	addq	$0x10, %rdx
    00001bc4: 	movq	%rcx, -0x8(%rdx)
    00001bc8: 	cmpq	%rsi, %rax
    00001bcb: 	jne	.Ltmp3216 # Offset: 7115
    00001bcd: 	movq	0xd0(%rsp), %r15
    00001bd5: 	nopl	(%rax) # Size: 3
.Ltmp3222:
    00001bd8: 	movq	0x8(%r15), %r12
    00001bdc: 	movq	%r15, %rbx
    00001bdf: 	jmp	.Ltmp3217 # Offset: 7135
    00001be1: 	nopl	(%rax) # Size: 7
.Ltmp3220:
    00001be8: 	movq	0x8(%rbx), %rax
    00001bec: 	cmpq	%rax, %r12
    00001bef: 	jae	.Ltmp3218 # Offset: 7151
.Ltmp3221:
    00001bf1: 	movq	0x8(%rbx), %rax
    00001bf5: 	movq	%rax, 0x18(%rbx)
    00001bf9: 	cmpq	0x8(%rsp), %rbx
    00001bfe: 	je	.Ltmp3219 # Offset: 7166
.Ltmp3217:
    00001c04: 	movq	%rbx, %r13
    00001c07: 	movq	-0x10(%rbx), %rax
    00001c0b: 	subq	$0x10, %rbx
    00001c0f: 	movq	(%rax), %rax
    00001c12: 	cmpq	%r14, %rax
    00001c15: 	je	.Ltmp3220 # Offset: 7189
    00001c17: 	movq	%rbx, %rdi
    00001c1a: 	callq	*%rax # Offset: 7194
    00001c1c: 	cmpq	%rax, %r12
    00001c1f: 	jb	.Ltmp3221 # Offset: 7199
.Ltmp3218:
    00001c21: 	movq	%r12, 0x8(%r13)
    00001c25: 	addq	$0x10, %r15
    00001c29: 	cmpq	0x18(%rsp), %r15
    00001c2e: 	jne	.Ltmp3222 # Offset: 7214
.Ltmp3441:
    00001c30: 	movq	0x30(%rsp), %rdx
    00001c35: 	movq	0x18(%rsp), %rsi
    00001c3a: 	movq	0x8(%rsp), %rdi
    00001c3f: 	callq	_Z13verify_sortedIP19TypeVirtualSubClassImEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7231
    00001c44: 	addl	$0x1, 0xd8(%rsp)
    00001c4c: 	movl	0xd8(%rsp), %eax
    00001c53: 	cmpl	iterations(%rip), %eax
    00001c59: 	jl	.Ltmp3223 # Offset: 7257
.Ltmp3215:
    00001c5f: 	callq	clock@PLT # Offset: 7263
    00001c64: 	movq	0x30(%rsp), %rdi
    00001c69: 	pxor	%xmm0, %xmm0
    00001c6d: 	movq	%rax, end_time(%rip)
    00001c74: 	subq	start_time(%rip), %rax
    00001c7b: 	cvtsi2sd	%rax, %xmm0
    00001c80: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00001c88: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7304
    00001c8d: 	movq	0x230(%rsp), %rdi
    00001c95: 	cmpq	0x98(%rsp), %rdi
    00001c9d: 	je	.Ltmp3224 # Offset: 7325
    00001c9f: 	movq	0x240(%rsp), %rax
    00001ca7: 	leaq	0x1(%rax), %rsi
    00001cab: 	callq	_ZdlPvm@PLT # Offset: 7339
.Ltmp3224:
    00001cb0: 	movq	0xa8(%rsp), %rsi
    00001cb8: 	movq	0x30(%rsp), %rdi
    00001cbd: 	leaq	DATAat0x1d558(%rip), %rdx
    00001cc4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7364
    00001cc9: 	callq	clock@PLT # Offset: 7369
    00001cce: 	movl	iterations(%rip), %ebx
    00001cd4: 	movl	$0x0, 0xd8(%rsp)
    00001cdf: 	leaq	_ZN14WorkerSubClassImEcvmEv(%rip), %r14
    00001ce6: 	movq	%rax, start_time(%rip)
    00001ced: 	leaq	0x36d60(%rsp), %rax
    00001cf5: 	movq	%rax, 0xd0(%rsp)
    00001cfd: 	testl	%ebx, %ebx
    00001cff: 	jle	.Ltmp3225 # Offset: 7423
    00001d05: 	nopl	(%rax) # Size: 3
.Ltmp3233:
    00001d08: 	movq	0x18(%rsp), %rdx
    00001d0d: 	movq	0x80(%rsp), %rax
    00001d15: 	movq	0x88(%rsp), %rsi
    00001d1d: 	nopl	(%rax) # Size: 3
.Ltmp3226:
    00001d20: 	movq	0x8(%rax), %rcx
    00001d24: 	addq	$0x10, %rax
    00001d28: 	addq	$0x10, %rdx
    00001d2c: 	movq	%rcx, -0x8(%rdx)
    00001d30: 	cmpq	%rsi, %rax
    00001d33: 	jne	.Ltmp3226 # Offset: 7475
    00001d35: 	movq	0xd0(%rsp), %r15
    00001d3d: 	nopl	(%rax) # Size: 3
.Ltmp3232:
    00001d40: 	movq	0x8(%r15), %r12
    00001d44: 	movq	%r15, %rbx
    00001d47: 	jmp	.Ltmp3227 # Offset: 7495
    00001d49: 	nopl	(%rax) # Size: 7
.Ltmp3230:
    00001d50: 	movq	0x8(%rbx), %rax
    00001d54: 	cmpq	%rax, %r12
    00001d57: 	jae	.Ltmp3228 # Offset: 7511
.Ltmp3231:
    00001d59: 	movq	0x8(%rbx), %rax
    00001d5d: 	movq	%rax, 0x18(%rbx)
    00001d61: 	cmpq	0x18(%rsp), %rbx
    00001d66: 	je	.Ltmp3229 # Offset: 7526
.Ltmp3227:
    00001d6c: 	movq	%rbx, %r13
    00001d6f: 	movq	-0x10(%rbx), %rax
    00001d73: 	subq	$0x10, %rbx
    00001d77: 	movq	(%rax), %rax
    00001d7a: 	cmpq	%r14, %rax
    00001d7d: 	je	.Ltmp3230 # Offset: 7549
    00001d7f: 	movq	%rbx, %rdi
    00001d82: 	callq	*%rax # Offset: 7554
    00001d84: 	cmpq	%rax, %r12
    00001d87: 	jb	.Ltmp3231 # Offset: 7559
.Ltmp3228:
    00001d89: 	movq	%r12, 0x8(%r13)
    00001d8d: 	addq	$0x10, %r15
    00001d91: 	cmpq	0x20(%rsp), %r15
    00001d96: 	jne	.Ltmp3232 # Offset: 7574
.Ltmp3439:
    00001d98: 	movq	0x30(%rsp), %rdx
    00001d9d: 	movq	0x20(%rsp), %rsi
    00001da2: 	movq	0x18(%rsp), %rdi
    00001da7: 	callq	_Z13verify_sortedIP14WorkerSubClassImEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7591
    00001dac: 	addl	$0x1, 0xd8(%rsp)
    00001db4: 	movl	0xd8(%rsp), %eax
    00001dbb: 	cmpl	iterations(%rip), %eax
    00001dc1: 	jl	.Ltmp3233 # Offset: 7617
.Ltmp3225:
    00001dc7: 	callq	clock@PLT # Offset: 7623
    00001dcc: 	movq	0x30(%rsp), %rdi
    00001dd1: 	pxor	%xmm0, %xmm0
    00001dd5: 	movq	%rax, end_time(%rip)
    00001ddc: 	subq	start_time(%rip), %rax
    00001de3: 	cvtsi2sd	%rax, %xmm0
    00001de8: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00001df0: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7664
    00001df5: 	movq	0x230(%rsp), %rdi
    00001dfd: 	cmpq	0x98(%rsp), %rdi
    00001e05: 	je	.Ltmp3234 # Offset: 7685
    00001e07: 	movq	0x240(%rsp), %rax
    00001e0f: 	leaq	0x1(%rax), %rsi
    00001e13: 	callq	_ZdlPvm@PLT # Offset: 7699
.Ltmp3234:
    00001e18: 	movq	0xa8(%rsp), %rsi
    00001e20: 	movq	0x30(%rsp), %rdi
    00001e25: 	leaq	DATAat0x1d580(%rip), %rdx
    00001e2c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7724
    00001e31: 	callq	clock@PLT # Offset: 7729
    00001e36: 	movl	iterations(%rip), %r11d
    00001e3d: 	movl	$0x0, 0xd8(%rsp)
    00001e48: 	leaq	_ZN18WorkerDeepSubClassImEcvmEv(%rip), %r12
    00001e4f: 	movq	%rax, start_time(%rip)
    00001e56: 	leaq	0x3ea60(%rsp), %rax
    00001e5e: 	movq	%rax, 0xd0(%rsp)
    00001e66: 	testl	%r11d, %r11d
    00001e69: 	jle	.Ltmp3235 # Offset: 7785
    00001e6f: 	nop # Size: 1
.Ltmp3250:
    00001e70: 	movq	0x20(%rsp), %rdx
    00001e75: 	movq	0x88(%rsp), %rax
    00001e7d: 	movq	0x90(%rsp), %rsi
    00001e85: 	nopl	(%rax) # Size: 3
.Ltmp3236:
    00001e88: 	movq	0x8(%rax), %rcx
    00001e8c: 	addq	$0x10, %rax
    00001e90: 	addq	$0x10, %rdx
    00001e94: 	movq	%rcx, -0x8(%rdx)
    00001e98: 	cmpq	%rsi, %rax
    00001e9b: 	jne	.Ltmp3236 # Offset: 7835
    00001e9d: 	movq	0xd0(%rsp), %r15
    00001ea5: 	nopl	(%rax) # Size: 3
.Ltmp3242:
    00001ea8: 	movq	0x8(%r15), %r13
    00001eac: 	movq	%r15, %rbx
    00001eaf: 	jmp	.Ltmp3237 # Offset: 7855
    00001eb1: 	nopl	(%rax) # Size: 7
.Ltmp3240:
    00001eb8: 	movq	0x8(%rbx), %rax
    00001ebc: 	cmpq	%rax, %r13
    00001ebf: 	jae	.Ltmp3238 # Offset: 7871
.Ltmp3241:
    00001ec1: 	movq	0x8(%rbx), %rax
    00001ec5: 	movq	%rax, 0x18(%rbx)
    00001ec9: 	cmpq	0x20(%rsp), %rbx
    00001ece: 	je	.Ltmp3239 # Offset: 7886
.Ltmp3237:
    00001ed4: 	movq	%rbx, %r14
    00001ed7: 	movq	-0x10(%rbx), %rax
    00001edb: 	subq	$0x10, %rbx
    00001edf: 	movq	(%rax), %rax
    00001ee2: 	cmpq	%r12, %rax
    00001ee5: 	je	.Ltmp3240 # Offset: 7909
    00001ee7: 	movq	%rbx, %rdi
    00001eea: 	callq	*%rax # Offset: 7914
    00001eec: 	cmpq	%rax, %r13
    00001eef: 	jb	.Ltmp3241 # Offset: 7919
.Ltmp3238:
    00001ef1: 	movq	%r13, 0x8(%r14)
    00001ef5: 	addq	$0x10, %r15
    00001ef9: 	cmpq	0x10(%rsp), %r15
    00001efe: 	jne	.Ltmp3242 # Offset: 7934
.Ltmp3442:
    00001f00: 	movq	0xd0(%rsp), %rbx
    00001f08: 	jmp	.Ltmp3243 # Offset: 7944
    00001f0a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3247:
    00001f10: 	movq	-0x20(%rbx), %rax
    00001f14: 	movq	-0x8(%rbx), %r13
    00001f18: 	movq	(%rax), %rax
    00001f1b: 	cmpq	%r12, %rax
    00001f1e: 	jne	.Ltmp3244 # Offset: 7966
.Ltmp3248:
    00001f20: 	movq	-0x18(%rbx), %rax
    00001f24: 	cmpq	%rax, %r13
    00001f27: 	jb	.Ltmp3245 # Offset: 7975
.Ltmp3249:
    00001f29: 	cmpq	0x10(%rsp), %rbx
    00001f2e: 	je	.Ltmp3246 # Offset: 7982
.Ltmp3243:
    00001f30: 	leaq	-0x10(%rbx), %r14
    00001f34: 	movq	%rbx, %rdi
    00001f37: 	movq	(%rbx), %rax
    00001f3a: 	addq	$0x10, %rbx
    00001f3e: 	movq	(%rax), %rax
    00001f41: 	cmpq	%r12, %rax
    00001f44: 	je	.Ltmp3247 # Offset: 8004
    00001f46: 	callq	*%rax # Offset: 8006
    00001f48: 	movq	%rax, %r13
    00001f4b: 	movq	-0x20(%rbx), %rax
    00001f4f: 	movq	(%rax), %rax
    00001f52: 	cmpq	%r12, %rax
    00001f55: 	je	.Ltmp3248 # Offset: 8021
    00001f57: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3244:
    00001f60: 	movq	%r14, %rdi
    00001f63: 	callq	*%rax # Offset: 8035
    00001f65: 	cmpq	%rax, %r13
    00001f68: 	jae	.Ltmp3249 # Offset: 8040
.Ltmp3245:
    00001f6a: 	movq	0x230(%rsp), %rdx
    00001f72: 	leaq	DATAat0x1d1cf(%rip), %rsi
    00001f79: 	movl	$0x1, %edi
    00001f7e: 	xorl	%eax, %eax
    00001f80: 	callq	__printf_chk@PLT # Offset: 8064
.Ltmp3246:
    00001f85: 	addl	$0x1, 0xd8(%rsp)
    00001f8d: 	movl	0xd8(%rsp), %eax
    00001f94: 	cmpl	iterations(%rip), %eax
    00001f9a: 	jl	.Ltmp3250 # Offset: 8090
.Ltmp3235:
    00001fa0: 	callq	clock@PLT # Offset: 8096
    00001fa5: 	movq	0x30(%rsp), %rdi
    00001faa: 	pxor	%xmm0, %xmm0
    00001fae: 	movq	%rax, end_time(%rip)
    00001fb5: 	subq	start_time(%rip), %rax
    00001fbc: 	cvtsi2sd	%rax, %xmm0
    00001fc1: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00001fc9: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 8137
    00001fce: 	movq	0x230(%rsp), %rdi
    00001fd6: 	cmpq	0x98(%rsp), %rdi
    00001fde: 	je	.Ltmp3251 # Offset: 8158
    00001fe0: 	movq	0x240(%rsp), %rax
    00001fe8: 	leaq	0x1(%rax), %rsi
    00001fec: 	callq	_ZdlPvm@PLT # Offset: 8172
.Ltmp3251:
    00001ff1: 	movq	0xa8(%rsp), %rsi
    00001ff9: 	movq	0x30(%rsp), %rdi
    00001ffe: 	leaq	DATAat0x1d5b0(%rip), %rdx
    00002005: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8197
    0000200a: 	callq	clock@PLT # Offset: 8202
    0000200f: 	movl	iterations(%rip), %r10d
    00002016: 	movl	$0x0, 0xd8(%rsp)
    00002021: 	leaq	_ZN15WorkerSubClass2ImEcvmEv(%rip), %r12
    00002028: 	movq	%rax, start_time(%rip)
    0000202f: 	leaq	0x46760(%rsp), %rax
    00002037: 	movq	%rax, 0xd0(%rsp)
    0000203f: 	testl	%r10d, %r10d
    00002042: 	jle	.Ltmp3252 # Offset: 8258
    00002048: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3266:
    00002050: 	movq	0x10(%rsp), %rdx
    00002055: 	movq	0x90(%rsp), %rax
    0000205d: 	movq	0x78(%rsp), %rsi
    00002062: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3253:
    00002068: 	movq	0x8(%rax), %rcx
    0000206c: 	addq	$0x10, %rax
    00002070: 	addq	$0x10, %rdx
    00002074: 	movq	%rcx, -0x8(%rdx)
    00002078: 	cmpq	%rsi, %rax
    0000207b: 	jne	.Ltmp3253 # Offset: 8315
    0000207d: 	movq	0xd0(%rsp), %r15
    00002085: 	nopl	(%rax) # Size: 3
.Ltmp3259:
    00002088: 	movq	0x8(%r15), %r13
    0000208c: 	movq	%r15, %rbx
    0000208f: 	jmp	.Ltmp3254 # Offset: 8335
    00002091: 	nopl	(%rax) # Size: 7
.Ltmp3257:
    00002098: 	movq	0x8(%rbx), %rax
    0000209c: 	cmpq	%rax, %r13
    0000209f: 	jae	.Ltmp3255 # Offset: 8351
.Ltmp3258:
    000020a1: 	movq	0x8(%rbx), %rax
    000020a5: 	movq	%rax, 0x18(%rbx)
    000020a9: 	cmpq	0x10(%rsp), %rbx
    000020ae: 	je	.Ltmp3256 # Offset: 8366
.Ltmp3254:
    000020b4: 	movq	%rbx, %r14
    000020b7: 	movq	-0x10(%rbx), %rax
    000020bb: 	subq	$0x10, %rbx
    000020bf: 	movq	(%rax), %rax
    000020c2: 	cmpq	%r12, %rax
    000020c5: 	je	.Ltmp3257 # Offset: 8389
    000020c7: 	movq	%rbx, %rdi
    000020ca: 	callq	*%rax # Offset: 8394
    000020cc: 	cmpq	%rax, %r13
    000020cf: 	jb	.Ltmp3258 # Offset: 8399
.Ltmp3255:
    000020d1: 	movq	%r13, 0x8(%r14)
    000020d5: 	addq	$0x10, %r15
    000020d9: 	cmpq	(%rsp), %r15
    000020dd: 	jne	.Ltmp3259 # Offset: 8413
.Ltmp3443:
    000020df: 	movq	0xd0(%rsp), %rbx
    000020e7: 	jmp	.Ltmp3260 # Offset: 8423
    000020e9: 	nopl	(%rax) # Size: 7
.Ltmp3264:
    000020f0: 	movq	-0x18(%rbx), %rax
    000020f4: 	cmpq	%rax, %r13
    000020f7: 	jb	.Ltmp3261 # Offset: 8439
.Ltmp3265:
    000020f9: 	cmpq	(%rsp), %rbx
    000020fd: 	je	.Ltmp3262 # Offset: 8445
.Ltmp3260:
    000020ff: 	leaq	-0x10(%rbx), %r14
    00002103: 	movq	%rbx, %rdi
    00002106: 	movq	(%rbx), %rax
    00002109: 	addq	$0x10, %rbx
    0000210d: 	movq	(%rax), %rax
    00002110: 	cmpq	%r12, %rax
    00002113: 	jne	.Ltmp3263 # Offset: 8467
    00002119: 	movq	-0x8(%rbx), %r13
.Ltmp3444:
    0000211d: 	movq	-0x20(%rbx), %rax
    00002121: 	movq	(%rax), %rax
    00002124: 	cmpq	%r12, %rax
    00002127: 	je	.Ltmp3264 # Offset: 8487
    00002129: 	movq	%r14, %rdi
    0000212c: 	callq	*%rax # Offset: 8492
    0000212e: 	cmpq	%rax, %r13
    00002131: 	jae	.Ltmp3265 # Offset: 8497
.Ltmp3261:
    00002133: 	movq	0x230(%rsp), %rdx
    0000213b: 	leaq	DATAat0x1d1cf(%rip), %rsi
    00002142: 	movl	$0x1, %edi
    00002147: 	xorl	%eax, %eax
    00002149: 	callq	__printf_chk@PLT # Offset: 8521
.Ltmp3262:
    0000214e: 	addl	$0x1, 0xd8(%rsp)
    00002156: 	movl	0xd8(%rsp), %eax
    0000215d: 	cmpl	iterations(%rip), %eax
    00002163: 	jl	.Ltmp3266 # Offset: 8547
.Ltmp3252:
    00002169: 	callq	clock@PLT # Offset: 8553
    0000216e: 	movq	0x30(%rsp), %rdi
    00002173: 	pxor	%xmm0, %xmm0
    00002177: 	movq	%rax, end_time(%rip)
    0000217e: 	subq	start_time(%rip), %rax
    00002185: 	cvtsi2sd	%rax, %xmm0
    0000218a: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00002192: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 8594
    00002197: 	movq	0x230(%rsp), %rdi
    0000219f: 	cmpq	0x98(%rsp), %rdi
    000021a7: 	je	.Ltmp3267 # Offset: 8615
    000021a9: 	movq	0x240(%rsp), %rax
    000021b1: 	leaq	0x1(%rax), %rsi
    000021b5: 	callq	_ZdlPvm@PLT # Offset: 8629
.Ltmp3267:
    000021ba: 	movq	0xa8(%rsp), %rsi
    000021c2: 	movq	0x30(%rsp), %rdi
    000021c7: 	leaq	DATAat0x1d5d8(%rip), %rdx
    000021ce: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8654
    000021d3: 	callq	clock@PLT # Offset: 8659
    000021d8: 	movl	iterations(%rip), %r9d
    000021df: 	movl	$0x0, 0xd8(%rsp)
    000021ea: 	leaq	_ZN15WorkerSubClass3ImEcvmEv(%rip), %r14
    000021f1: 	movq	%rax, start_time(%rip)
    000021f8: 	leaq	0x4e460(%rsp), %rax
    00002200: 	movq	%rax, 0xd0(%rsp)
    00002208: 	testl	%r9d, %r9d
    0000220b: 	jle	.Ltmp3268 # Offset: 8715
    00002211: 	nopl	(%rax) # Size: 7
.Ltmp3276:
    00002218: 	movq	(%rsp), %rdx
    0000221c: 	movq	0x78(%rsp), %rax
    00002221: 	movq	0xb8(%rsp), %rsi
    00002229: 	nopl	(%rax) # Size: 7
.Ltmp3269:
    00002230: 	movq	0x8(%rax), %rcx
    00002234: 	addq	$0x10, %rax
    00002238: 	addq	$0x10, %rdx
    0000223c: 	movq	%rcx, -0x8(%rdx)
    00002240: 	cmpq	%rsi, %rax
    00002243: 	jne	.Ltmp3269 # Offset: 8771
    00002245: 	movq	0xd0(%rsp), %r15
    0000224d: 	nopl	(%rax) # Size: 3
.Ltmp3275:
    00002250: 	movq	0x8(%r15), %r12
    00002254: 	movq	%r15, %rbx
    00002257: 	jmp	.Ltmp3270 # Offset: 8791
    00002259: 	nopl	(%rax) # Size: 7
.Ltmp3273:
    00002260: 	movq	0x8(%rbx), %rax
    00002264: 	cmpq	%rax, %r12
    00002267: 	jae	.Ltmp3271 # Offset: 8807
.Ltmp3274:
    00002269: 	movq	0x8(%rbx), %rax
    0000226d: 	movq	%rax, 0x18(%rbx)
    00002271: 	cmpq	(%rsp), %rbx
    00002275: 	je	.Ltmp3272 # Offset: 8821
.Ltmp3270:
    0000227b: 	movq	%rbx, %r13
    0000227e: 	movq	-0x10(%rbx), %rax
    00002282: 	subq	$0x10, %rbx
    00002286: 	movq	(%rax), %rax
    00002289: 	cmpq	%r14, %rax
    0000228c: 	je	.Ltmp3273 # Offset: 8844
    0000228e: 	movq	%rbx, %rdi
    00002291: 	callq	*%rax # Offset: 8849
    00002293: 	cmpq	%rax, %r12
    00002296: 	jb	.Ltmp3274 # Offset: 8854
.Ltmp3271:
    00002298: 	movq	%r12, 0x8(%r13)
    0000229c: 	addq	$0x10, %r15
    000022a0: 	cmpq	0x38(%rsp), %r15
    000022a5: 	jne	.Ltmp3275 # Offset: 8869
.Ltmp3445:
    000022a7: 	movq	0x30(%rsp), %rdx
    000022ac: 	movq	0x38(%rsp), %rsi
    000022b1: 	movq	(%rsp), %rdi
    000022b5: 	callq	_Z13verify_sortedIP15WorkerSubClass3ImEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 8885
    000022ba: 	addl	$0x1, 0xd8(%rsp)
    000022c2: 	movl	0xd8(%rsp), %eax
    000022c9: 	cmpl	iterations(%rip), %eax
    000022cf: 	jl	.Ltmp3276 # Offset: 8911
.Ltmp3268:
    000022d5: 	callq	clock@PLT # Offset: 8917
    000022da: 	movq	0x30(%rsp), %rdi
    000022df: 	pxor	%xmm0, %xmm0
    000022e3: 	movq	%rax, end_time(%rip)
    000022ea: 	subq	start_time(%rip), %rax
    000022f1: 	cvtsi2sd	%rax, %xmm0
    000022f6: 	divsd	DATAat0x1dec0(%rip), %xmm0
    000022fe: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 8958
    00002303: 	movq	0x230(%rsp), %rdi
    0000230b: 	cmpq	0x98(%rsp), %rdi
    00002313: 	je	.Ltmp3277 # Offset: 8979
    00002315: 	movq	0x240(%rsp), %rax
    0000231d: 	leaq	0x1(%rax), %rsi
    00002321: 	callq	_ZdlPvm@PLT # Offset: 8993
.Ltmp3277:
    00002326: 	movq	0xa8(%rsp), %rbx
    0000232e: 	leaq	0x1f0(%rsp), %rdi
    00002336: 	leaq	DATAat0x1d21f(%rip), %rdx
    0000233d: 	movq	%rbx, %rsi
    00002340: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9024
    00002345: 	movl	iterations(%rip), %edx
    0000234b: 	movl	$0x1, %r8d
    00002351: 	movl	$0x1, %ecx
    00002356: 	movq	0x1f0(%rsp), %rdi
    0000235e: 	movl	$0x7d0, %esi
    00002363: 	callq	_Z9summarizePKciiii # Offset: 9059
    00002368: 	movq	0x30(%rsp), %rdi
    0000236d: 	leaq	DATAat0x1d23b(%rip), %rdx
    00002374: 	movq	%rbx, %rsi
    00002377: 	shll	$0x4, iterations(%rip)
    0000237e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9086
    00002383: 	callq	clock@PLT # Offset: 9091
    00002388: 	movl	iterations(%rip), %r8d
    0000238f: 	xorl	%ebx, %ebx
    00002391: 	movq	%rax, start_time(%rip)
    00002398: 	testl	%r8d, %r8d
    0000239b: 	jle	.Ltmp3278 # Offset: 9115
    0000239d: 	nopl	(%rax) # Size: 3
.Ltmp3279:
    000023a0: 	movq	0x68(%rsp), %r15
    000023a5: 	movq	0x58(%rsp), %rsi
    000023aa: 	movl	$0x3e80, %edx
    000023af: 	movq	%r15, %rdi
    000023b2: 	callq	memcpy@PLT # Offset: 9138
    000023b7: 	movq	0x48(%rsp), %r14
    000023bc: 	movq	%r15, %rdi
    000023bf: 	movq	%r14, %rsi
    000023c2: 	callq	_ZN9benchmark9quicksortIPmEEvT_S2_ # Offset: 9154
    000023c7: 	movq	0x30(%rsp), %rdx
    000023cc: 	movq	%r14, %rsi
    000023cf: 	movq	%r15, %rdi
    000023d2: 	callq	_Z13verify_sortedIPmEvT_S1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9170
    000023d7: 	addl	$0x1, %ebx
    000023da: 	cmpl	iterations(%rip), %ebx
    000023e0: 	jl	.Ltmp3279 # Offset: 9184
.Ltmp3278:
    000023e2: 	callq	clock@PLT # Offset: 9186
    000023e7: 	movq	0x30(%rsp), %rdi
    000023ec: 	pxor	%xmm0, %xmm0
    000023f0: 	movq	%rax, end_time(%rip)
    000023f7: 	subq	start_time(%rip), %rax
    000023fe: 	cvtsi2sd	%rax, %xmm0
    00002403: 	divsd	DATAat0x1dec0(%rip), %xmm0
    0000240b: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9227
    00002410: 	movq	0x230(%rsp), %rdi
    00002418: 	cmpq	0x98(%rsp), %rdi
    00002420: 	je	.Ltmp3280 # Offset: 9248
    00002422: 	movq	0x240(%rsp), %rax
    0000242a: 	leaq	0x1(%rax), %rsi
    0000242e: 	callq	_ZdlPvm@PLT # Offset: 9262
.Ltmp3280:
    00002433: 	movq	0xa8(%rsp), %rsi
    0000243b: 	movq	0x30(%rsp), %rdi
    00002440: 	leaq	DATAat0x1d600(%rip), %rdx
    00002447: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9287
    0000244c: 	callq	clock@PLT # Offset: 9292
    00002451: 	movl	iterations(%rip), %edi
    00002457: 	xorl	%ebx, %ebx
    00002459: 	movq	%rax, start_time(%rip)
    00002460: 	testl	%edi, %edi
    00002462: 	jle	.Ltmp3281 # Offset: 9314
    00002464: 	nopl	(%rax) # Size: 4
.Ltmp3282:
    00002468: 	movq	0x48(%rsp), %r15
    0000246d: 	movq	0xb0(%rsp), %rsi
    00002475: 	movl	$0x3e80, %edx
    0000247a: 	movq	%r15, %rdi
    0000247d: 	callq	memcpy@PLT # Offset: 9341
    00002482: 	movq	0x50(%rsp), %r11
    00002487: 	movq	%r15, %rdi
    0000248a: 	movq	%r11, %rsi
    0000248d: 	callq	"_ZN9benchmark9quicksortIP9TypeClassImEEEvT_S4_.part.0/1" # Offset: 9357
    00002492: 	movq	0x30(%rsp), %rdx
    00002497: 	movq	%r11, %rsi
    0000249a: 	movq	%r15, %rdi
    0000249d: 	callq	_Z13verify_sortedIP9TypeClassImEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9373
    000024a2: 	addl	$0x1, %ebx
    000024a5: 	cmpl	iterations(%rip), %ebx
    000024ab: 	jl	.Ltmp3282 # Offset: 9387
.Ltmp3281:
    000024ad: 	callq	clock@PLT # Offset: 9389
    000024b2: 	movq	0x30(%rsp), %rdi
    000024b7: 	pxor	%xmm0, %xmm0
    000024bb: 	movq	%rax, end_time(%rip)
    000024c2: 	subq	start_time(%rip), %rax
    000024c9: 	cvtsi2sd	%rax, %xmm0
    000024ce: 	divsd	DATAat0x1dec0(%rip), %xmm0
    000024d6: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9430
    000024db: 	movq	0x230(%rsp), %rdi
    000024e3: 	cmpq	0x98(%rsp), %rdi
    000024eb: 	je	.Ltmp3283 # Offset: 9451
    000024ed: 	movq	0x240(%rsp), %rax
    000024f5: 	leaq	0x1(%rax), %rsi
    000024f9: 	callq	_ZdlPvm@PLT # Offset: 9465
.Ltmp3283:
    000024fe: 	movq	0xa8(%rsp), %rsi
    00002506: 	movq	0x30(%rsp), %rdi
    0000250b: 	leaq	DATAat0x1d628(%rip), %rdx
    00002512: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9490
    00002517: 	callq	clock@PLT # Offset: 9495
    0000251c: 	movl	iterations(%rip), %esi
    00002522: 	xorl	%ebx, %ebx
    00002524: 	movq	%rax, start_time(%rip)
    0000252b: 	testl	%esi, %esi
    0000252d: 	jle	.Ltmp3284 # Offset: 9517
    0000252f: 	nop # Size: 1
.Ltmp3285:
    00002530: 	movq	0x50(%rsp), %r15
    00002535: 	movq	0xc0(%rsp), %rsi
    0000253d: 	movl	$0x3e80, %edx
    00002542: 	movq	%r15, %rdi
    00002545: 	callq	memcpy@PLT # Offset: 9541
    0000254a: 	movq	%rbp, %rsi
    0000254d: 	movq	%r15, %rdi
    00002550: 	callq	"_ZN9benchmark9quicksortIP12TypeSubClassImEEEvT_S4_.part.0/1" # Offset: 9552
    00002555: 	movq	0x30(%rsp), %rdx
    0000255a: 	movq	%rbp, %rsi
    0000255d: 	movq	%r15, %rdi
    00002560: 	callq	_Z13verify_sortedIP12TypeSubClassImEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9568
    00002565: 	addl	$0x1, %ebx
    00002568: 	cmpl	iterations(%rip), %ebx
    0000256e: 	jl	.Ltmp3285 # Offset: 9582
.Ltmp3284:
    00002570: 	callq	clock@PLT # Offset: 9584
    00002575: 	movq	0x30(%rsp), %rdi
    0000257a: 	pxor	%xmm0, %xmm0
    0000257e: 	movq	%rax, end_time(%rip)
    00002585: 	subq	start_time(%rip), %rax
    0000258c: 	cvtsi2sd	%rax, %xmm0
    00002591: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00002599: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9625
    0000259e: 	movq	0x230(%rsp), %rdi
    000025a6: 	cmpq	0x98(%rsp), %rdi
    000025ae: 	je	.Ltmp3286 # Offset: 9646
    000025b0: 	movq	0x240(%rsp), %rax
    000025b8: 	leaq	0x1(%rax), %rsi
    000025bc: 	callq	_ZdlPvm@PLT # Offset: 9660
.Ltmp3286:
    000025c1: 	movq	0xa8(%rsp), %rsi
    000025c9: 	movq	0x30(%rsp), %rdi
    000025ce: 	leaq	DATAat0x1d648(%rip), %rdx
    000025d5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9685
    000025da: 	callq	clock@PLT # Offset: 9690
    000025df: 	movl	iterations(%rip), %ecx
    000025e5: 	xorl	%ebx, %ebx
    000025e7: 	movq	%rax, start_time(%rip)
    000025ee: 	testl	%ecx, %ecx
    000025f0: 	jle	.Ltmp3287 # Offset: 9712
    000025f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3288:
    000025f8: 	movq	0xc8(%rsp), %rsi
    00002600: 	movl	$0x3e80, %edx
    00002605: 	movq	%rbp, %rdi
    00002608: 	callq	memcpy@PLT # Offset: 9736
    0000260d: 	movq	0x40(%rsp), %r10
    00002612: 	movq	%rbp, %rdi
    00002615: 	movq	%r10, %rsi
    00002618: 	callq	"_ZN9benchmark9quicksortIP13TypeSub2ClassImEEEvT_S4_.part.0/1" # Offset: 9752
    0000261d: 	movq	0x30(%rsp), %rdx
    00002622: 	movq	%r10, %rsi
    00002625: 	movq	%rbp, %rdi
    00002628: 	callq	_Z13verify_sortedIP13TypeSub2ClassImEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9768
    0000262d: 	addl	$0x1, %ebx
    00002630: 	cmpl	iterations(%rip), %ebx
    00002636: 	jl	.Ltmp3288 # Offset: 9782
.Ltmp3287:
    00002638: 	callq	clock@PLT # Offset: 9784
    0000263d: 	movq	0x30(%rsp), %rdi
    00002642: 	pxor	%xmm0, %xmm0
    00002646: 	movq	%rax, end_time(%rip)
    0000264d: 	subq	start_time(%rip), %rax
    00002654: 	cvtsi2sd	%rax, %xmm0
    00002659: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00002661: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9825
    00002666: 	movq	0x230(%rsp), %rdi
    0000266e: 	cmpq	0x98(%rsp), %rdi
    00002676: 	je	.Ltmp3289 # Offset: 9846
    00002678: 	movq	0x240(%rsp), %rax
    00002680: 	leaq	0x1(%rax), %rsi
    00002684: 	callq	_ZdlPvm@PLT # Offset: 9860
.Ltmp3289:
    00002689: 	movq	0xa8(%rsp), %rsi
    00002691: 	movq	0x30(%rsp), %rdi
    00002696: 	leaq	DATAat0x1d670(%rip), %rdx
    0000269d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9885
    000026a2: 	callq	clock@PLT # Offset: 9890
    000026a7: 	movl	iterations(%rip), %edx
    000026ad: 	xorl	%ebx, %ebx
    000026af: 	movq	%rax, start_time(%rip)
    000026b6: 	testl	%edx, %edx
    000026b8: 	jle	.Ltmp3290 # Offset: 9912
    000026ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3291:
    000026c0: 	movq	0x40(%rsp), %r15
    000026c5: 	movq	0xa0(%rsp), %rsi
    000026cd: 	movl	$0x3e80, %edx
    000026d2: 	movq	%r15, %rdi
    000026d5: 	callq	memcpy@PLT # Offset: 9941
    000026da: 	movq	0x58(%rsp), %r11
    000026df: 	movq	%r15, %rdi
    000026e2: 	movq	%r11, %rsi
    000026e5: 	callq	"_ZN9benchmark9quicksortIP12DeepSubClassImEEEvT_S4_.part.0/1" # Offset: 9957
    000026ea: 	movq	0x30(%rsp), %rdx
    000026ef: 	movq	%r11, %rsi
    000026f2: 	movq	%r15, %rdi
    000026f5: 	callq	_Z13verify_sortedIP12DeepSubClassImEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9973
    000026fa: 	addl	$0x1, %ebx
    000026fd: 	cmpl	iterations(%rip), %ebx
    00002703: 	jl	.Ltmp3291 # Offset: 9987
.Ltmp3290:
    00002705: 	callq	clock@PLT # Offset: 9989
    0000270a: 	movq	0x30(%rsp), %rdi
    0000270f: 	pxor	%xmm0, %xmm0
    00002713: 	movq	%rax, end_time(%rip)
    0000271a: 	subq	start_time(%rip), %rax
    00002721: 	cvtsi2sd	%rax, %xmm0
    00002726: 	divsd	DATAat0x1dec0(%rip), %xmm0
    0000272e: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 10030
    00002733: 	movq	0x230(%rsp), %rdi
    0000273b: 	cmpq	0x98(%rsp), %rdi
    00002743: 	je	.Ltmp3292 # Offset: 10051
    00002745: 	movq	0x240(%rsp), %rax
    0000274d: 	leaq	0x1(%rax), %rsi
    00002751: 	callq	_ZdlPvm@PLT # Offset: 10065
.Ltmp3292:
    00002756: 	movq	0xa8(%rsp), %rsi
    0000275e: 	movq	0x30(%rsp), %rdi
    00002763: 	leaq	DATAat0x1d690(%rip), %rdx
    0000276a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10090
    0000276f: 	callq	clock@PLT # Offset: 10095
    00002774: 	xorl	%r15d, %r15d
    00002777: 	leaq	_ZN16TypeVirtualClassImEcvmEv(%rip), %r13
    0000277e: 	movq	%rax, start_time(%rip)
    00002785: 	movl	iterations(%rip), %eax
    0000278b: 	testl	%eax, %eax
    0000278d: 	jle	.Ltmp3293 # Offset: 10125
    00002793: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3301:
    00002798: 	movq	0x28(%rsp), %rdx
    0000279d: 	movq	0x38(%rsp), %rax
    000027a2: 	movq	0x70(%rsp), %rsi
    000027a7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3294:
    000027b0: 	movq	0x8(%rax), %rcx
    000027b4: 	addq	$0x10, %rax
    000027b8: 	addq	$0x10, %rdx
    000027bc: 	movq	%rcx, -0x8(%rdx)
    000027c0: 	cmpq	%rsi, %rax
    000027c3: 	jne	.Ltmp3294 # Offset: 10179
    000027c5: 	movq	0x8(%rsp), %rsi
    000027ca: 	movq	0x28(%rsp), %rdi
    000027cf: 	callq	"_ZN9benchmark9quicksortIP16TypeVirtualClassImEEEvT_S4_.part.0/1" # Offset: 10191
    000027d4: 	leaq	0x27360(%rsp), %rbx
    000027dc: 	jmp	.Ltmp3295 # Offset: 10204
    000027de: 	nop # Size: 2
.Ltmp3299:
    000027e0: 	movq	-0x18(%rbx), %rax
    000027e4: 	cmpq	%rax, %r12
    000027e7: 	jb	.Ltmp3296 # Offset: 10215
.Ltmp3300:
    000027e9: 	cmpq	0x8(%rsp), %rbx
    000027ee: 	je	.Ltmp3297 # Offset: 10222
.Ltmp3295:
    000027f0: 	leaq	-0x10(%rbx), %r14
    000027f4: 	movq	%rbx, %rdi
    000027f7: 	movq	(%rbx), %rax
    000027fa: 	addq	$0x10, %rbx
    000027fe: 	movq	(%rax), %rax
    00002801: 	cmpq	%r13, %rax
    00002804: 	jne	.Ltmp3298 # Offset: 10244
    0000280a: 	movq	-0x8(%rbx), %r12
.Ltmp3446:
    0000280e: 	movq	-0x20(%rbx), %rax
    00002812: 	movq	(%rax), %rax
    00002815: 	cmpq	%r13, %rax
    00002818: 	je	.Ltmp3299 # Offset: 10264
    0000281a: 	movq	%r14, %rdi
    0000281d: 	callq	*%rax # Offset: 10269
    0000281f: 	cmpq	%rax, %r12
    00002822: 	jae	.Ltmp3300 # Offset: 10274
.Ltmp3296:
    00002824: 	movq	0x230(%rsp), %rdx
    0000282c: 	leaq	DATAat0x1d1cf(%rip), %rsi
    00002833: 	movl	$0x1, %edi
    00002838: 	xorl	%eax, %eax
    0000283a: 	callq	__printf_chk@PLT # Offset: 10298
.Ltmp3297:
    0000283f: 	addl	$0x1, %r15d
    00002843: 	cmpl	iterations(%rip), %r15d
    0000284a: 	jl	.Ltmp3301 # Offset: 10314
.Ltmp3293:
    00002850: 	callq	clock@PLT # Offset: 10320
    00002855: 	movq	0x30(%rsp), %rdi
    0000285a: 	pxor	%xmm0, %xmm0
    0000285e: 	movq	%rax, end_time(%rip)
    00002865: 	subq	start_time(%rip), %rax
    0000286c: 	cvtsi2sd	%rax, %xmm0
    00002871: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00002879: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 10361
    0000287e: 	movq	0x230(%rsp), %rdi
    00002886: 	cmpq	0x98(%rsp), %rdi
    0000288e: 	je	.Ltmp3302 # Offset: 10382
    00002890: 	movq	0x240(%rsp), %rax
    00002898: 	leaq	0x1(%rax), %rsi
    0000289c: 	callq	_ZdlPvm@PLT # Offset: 10396
.Ltmp3302:
    000028a1: 	movq	0xa8(%rsp), %rsi
    000028a9: 	movq	0x30(%rsp), %rdi
    000028ae: 	leaq	DATAat0x1d6b8(%rip), %rdx
    000028b5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10421
    000028ba: 	callq	clock@PLT # Offset: 10426
    000028bf: 	xorl	%r15d, %r15d
    000028c2: 	leaq	_ZN19TypeVirtualSubClassImEcvmEv(%rip), %r13
    000028c9: 	movq	%rax, start_time(%rip)
    000028d0: 	movl	iterations(%rip), %eax
    000028d6: 	testl	%eax, %eax
    000028d8: 	jle	.Ltmp3303 # Offset: 10456
    000028de: 	nop # Size: 2
.Ltmp3312:
    000028e0: 	movq	0x8(%rsp), %rdx
    000028e5: 	movq	0x70(%rsp), %rax
    000028ea: 	movq	0x80(%rsp), %rsi
    000028f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3304:
    000028f8: 	movq	0x8(%rax), %rcx
    000028fc: 	addq	$0x10, %rax
    00002900: 	addq	$0x10, %rdx
    00002904: 	movq	%rcx, -0x8(%rdx)
    00002908: 	cmpq	%rsi, %rax
    0000290b: 	jne	.Ltmp3304 # Offset: 10507
    0000290d: 	movq	0x18(%rsp), %rsi
    00002912: 	movq	0x8(%rsp), %rdi
    00002917: 	callq	"_ZN9benchmark9quicksortIP19TypeVirtualSubClassImEEEvT_S4_.part.0/1" # Offset: 10519
    0000291c: 	leaq	0x2f060(%rsp), %rbx
    00002924: 	jmp	.Ltmp3305 # Offset: 10532
    00002926: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3309:
    00002930: 	movq	-0x20(%rbx), %rax
    00002934: 	movq	-0x8(%rbx), %r12
    00002938: 	movq	(%rax), %rax
    0000293b: 	cmpq	%r13, %rax
    0000293e: 	jne	.Ltmp3306 # Offset: 10558
.Ltmp3310:
    00002940: 	movq	-0x18(%rbx), %rax
    00002944: 	cmpq	%rax, %r12
    00002947: 	jb	.Ltmp3307 # Offset: 10567
.Ltmp3311:
    00002949: 	cmpq	0x18(%rsp), %rbx
    0000294e: 	je	.Ltmp3308 # Offset: 10574
.Ltmp3305:
    00002950: 	leaq	-0x10(%rbx), %r14
    00002954: 	movq	%rbx, %rdi
    00002957: 	movq	(%rbx), %rax
    0000295a: 	addq	$0x10, %rbx
    0000295e: 	movq	(%rax), %rax
    00002961: 	cmpq	%r13, %rax
    00002964: 	je	.Ltmp3309 # Offset: 10596
    00002966: 	callq	*%rax # Offset: 10598
    00002968: 	movq	%rax, %r12
    0000296b: 	movq	-0x20(%rbx), %rax
    0000296f: 	movq	(%rax), %rax
    00002972: 	cmpq	%r13, %rax
    00002975: 	je	.Ltmp3310 # Offset: 10613
    00002977: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3306:
    00002980: 	movq	%r14, %rdi
    00002983: 	callq	*%rax # Offset: 10627
    00002985: 	cmpq	%rax, %r12
    00002988: 	jae	.Ltmp3311 # Offset: 10632
.Ltmp3307:
    0000298a: 	movq	0x230(%rsp), %rdx
    00002992: 	leaq	DATAat0x1d1cf(%rip), %rsi
    00002999: 	movl	$0x1, %edi
    0000299e: 	xorl	%eax, %eax
    000029a0: 	callq	__printf_chk@PLT # Offset: 10656
.Ltmp3308:
    000029a5: 	addl	$0x1, %r15d
    000029a9: 	cmpl	iterations(%rip), %r15d
    000029b0: 	jl	.Ltmp3312 # Offset: 10672
.Ltmp3303:
    000029b6: 	callq	clock@PLT # Offset: 10678
    000029bb: 	movq	0x30(%rsp), %rdi
    000029c0: 	pxor	%xmm0, %xmm0
    000029c4: 	movq	%rax, end_time(%rip)
    000029cb: 	subq	start_time(%rip), %rax
    000029d2: 	cvtsi2sd	%rax, %xmm0
    000029d7: 	divsd	DATAat0x1dec0(%rip), %xmm0
    000029df: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 10719
    000029e4: 	movq	0x230(%rsp), %rdi
    000029ec: 	cmpq	0x98(%rsp), %rdi
    000029f4: 	je	.Ltmp3313 # Offset: 10740
    000029f6: 	movq	0x240(%rsp), %rax
    000029fe: 	leaq	0x1(%rax), %rsi
    00002a02: 	callq	_ZdlPvm@PLT # Offset: 10754
.Ltmp3313:
    00002a07: 	movq	0xa8(%rsp), %rsi
    00002a0f: 	movq	0x30(%rsp), %rdi
    00002a14: 	leaq	DATAat0x1d6e0(%rip), %rdx
    00002a1b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10779
    00002a20: 	callq	clock@PLT # Offset: 10784
    00002a25: 	xorl	%r15d, %r15d
    00002a28: 	leaq	_ZN14WorkerSubClassImEcvmEv(%rip), %r13
    00002a2f: 	movq	%rax, start_time(%rip)
    00002a36: 	movl	iterations(%rip), %eax
    00002a3c: 	testl	%eax, %eax
    00002a3e: 	jle	.Ltmp3314 # Offset: 10814
    00002a44: 	nopl	(%rax) # Size: 4
.Ltmp3323:
    00002a48: 	movq	0x18(%rsp), %rdx
    00002a4d: 	movq	0x80(%rsp), %rax
    00002a55: 	movq	0x88(%rsp), %rsi
    00002a5d: 	nopl	(%rax) # Size: 3
.Ltmp3315:
    00002a60: 	movq	0x8(%rax), %rcx
    00002a64: 	addq	$0x10, %rax
    00002a68: 	addq	$0x10, %rdx
    00002a6c: 	movq	%rcx, -0x8(%rdx)
    00002a70: 	cmpq	%rsi, %rax
    00002a73: 	jne	.Ltmp3315 # Offset: 10867
    00002a75: 	movq	0x20(%rsp), %rsi
    00002a7a: 	movq	0x18(%rsp), %rdi
    00002a7f: 	callq	"_ZN9benchmark9quicksortIP14WorkerSubClassImEEEvT_S4_.part.0/1" # Offset: 10879
    00002a84: 	leaq	0x36d60(%rsp), %rbx
    00002a8c: 	jmp	.Ltmp3316 # Offset: 10892
    00002a8e: 	nop # Size: 2
.Ltmp3320:
    00002a90: 	movq	-0x20(%rbx), %rax
    00002a94: 	movq	-0x8(%rbx), %r12
    00002a98: 	movq	(%rax), %rax
    00002a9b: 	cmpq	%r13, %rax
    00002a9e: 	jne	.Ltmp3317 # Offset: 10910
.Ltmp3321:
    00002aa0: 	movq	-0x18(%rbx), %rax
    00002aa4: 	cmpq	%rax, %r12
    00002aa7: 	jb	.Ltmp3318 # Offset: 10919
.Ltmp3322:
    00002aa9: 	cmpq	0x20(%rsp), %rbx
    00002aae: 	je	.Ltmp3319 # Offset: 10926
.Ltmp3316:
    00002ab0: 	leaq	-0x10(%rbx), %r14
    00002ab4: 	movq	%rbx, %rdi
    00002ab7: 	movq	(%rbx), %rax
    00002aba: 	addq	$0x10, %rbx
    00002abe: 	movq	(%rax), %rax
    00002ac1: 	cmpq	%r13, %rax
    00002ac4: 	je	.Ltmp3320 # Offset: 10948
    00002ac6: 	callq	*%rax # Offset: 10950
    00002ac8: 	movq	%rax, %r12
    00002acb: 	movq	-0x20(%rbx), %rax
    00002acf: 	movq	(%rax), %rax
    00002ad2: 	cmpq	%r13, %rax
    00002ad5: 	je	.Ltmp3321 # Offset: 10965
    00002ad7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3317:
    00002ae0: 	movq	%r14, %rdi
    00002ae3: 	callq	*%rax # Offset: 10979
    00002ae5: 	cmpq	%rax, %r12
    00002ae8: 	jae	.Ltmp3322 # Offset: 10984
.Ltmp3318:
    00002aea: 	movq	0x230(%rsp), %rdx
    00002af2: 	leaq	DATAat0x1d1cf(%rip), %rsi
    00002af9: 	movl	$0x1, %edi
    00002afe: 	xorl	%eax, %eax
    00002b00: 	callq	__printf_chk@PLT # Offset: 11008
.Ltmp3319:
    00002b05: 	addl	$0x1, %r15d
    00002b09: 	cmpl	iterations(%rip), %r15d
    00002b10: 	jl	.Ltmp3323 # Offset: 11024
.Ltmp3314:
    00002b16: 	callq	clock@PLT # Offset: 11030
    00002b1b: 	movq	0x30(%rsp), %rdi
    00002b20: 	pxor	%xmm0, %xmm0
    00002b24: 	movq	%rax, end_time(%rip)
    00002b2b: 	subq	start_time(%rip), %rax
    00002b32: 	cvtsi2sd	%rax, %xmm0
    00002b37: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00002b3f: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 11071
    00002b44: 	movq	0x230(%rsp), %rdi
    00002b4c: 	cmpq	0x98(%rsp), %rdi
    00002b54: 	je	.Ltmp3324 # Offset: 11092
    00002b56: 	movq	0x240(%rsp), %rax
    00002b5e: 	leaq	0x1(%rax), %rsi
    00002b62: 	callq	_ZdlPvm@PLT # Offset: 11106
.Ltmp3324:
    00002b67: 	movq	0xa8(%rsp), %rsi
    00002b6f: 	movq	0x30(%rsp), %rdi
    00002b74: 	leaq	DATAat0x1d708(%rip), %rdx
    00002b7b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11131
    00002b80: 	callq	clock@PLT # Offset: 11136
    00002b85: 	xorl	%r15d, %r15d
    00002b88: 	leaq	_ZN18WorkerDeepSubClassImEcvmEv(%rip), %r13
    00002b8f: 	movq	%rax, start_time(%rip)
    00002b96: 	movl	iterations(%rip), %eax
    00002b9c: 	testl	%eax, %eax
    00002b9e: 	jle	.Ltmp3325 # Offset: 11166
    00002ba4: 	nopl	(%rax) # Size: 4
.Ltmp3334:
    00002ba8: 	movq	0x20(%rsp), %rdx
    00002bad: 	movq	0x88(%rsp), %rax
    00002bb5: 	movq	0x90(%rsp), %rsi
    00002bbd: 	nopl	(%rax) # Size: 3
.Ltmp3326:
    00002bc0: 	movq	0x8(%rax), %rcx
    00002bc4: 	addq	$0x10, %rax
    00002bc8: 	addq	$0x10, %rdx
    00002bcc: 	movq	%rcx, -0x8(%rdx)
    00002bd0: 	cmpq	%rsi, %rax
    00002bd3: 	jne	.Ltmp3326 # Offset: 11219
    00002bd5: 	movq	0x10(%rsp), %rsi
    00002bda: 	movq	0x20(%rsp), %rdi
    00002bdf: 	callq	"_ZN9benchmark9quicksortIP18WorkerDeepSubClassImEEEvT_S4_.part.0/1" # Offset: 11231
    00002be4: 	leaq	0x3ea60(%rsp), %rbx
    00002bec: 	jmp	.Ltmp3327 # Offset: 11244
    00002bee: 	nop # Size: 2
.Ltmp3331:
    00002bf0: 	movq	-0x20(%rbx), %rax
    00002bf4: 	movq	-0x8(%rbx), %r12
    00002bf8: 	movq	(%rax), %rax
    00002bfb: 	cmpq	%r13, %rax
    00002bfe: 	jne	.Ltmp3328 # Offset: 11262
.Ltmp3332:
    00002c00: 	movq	-0x18(%rbx), %rax
    00002c04: 	cmpq	%rax, %r12
    00002c07: 	jb	.Ltmp3329 # Offset: 11271
.Ltmp3333:
    00002c09: 	cmpq	0x10(%rsp), %rbx
    00002c0e: 	je	.Ltmp3330 # Offset: 11278
.Ltmp3327:
    00002c10: 	leaq	-0x10(%rbx), %r14
    00002c14: 	movq	%rbx, %rdi
    00002c17: 	movq	(%rbx), %rax
    00002c1a: 	addq	$0x10, %rbx
    00002c1e: 	movq	(%rax), %rax
    00002c21: 	cmpq	%r13, %rax
    00002c24: 	je	.Ltmp3331 # Offset: 11300
    00002c26: 	callq	*%rax # Offset: 11302
    00002c28: 	movq	%rax, %r12
    00002c2b: 	movq	-0x20(%rbx), %rax
    00002c2f: 	movq	(%rax), %rax
    00002c32: 	cmpq	%r13, %rax
    00002c35: 	je	.Ltmp3332 # Offset: 11317
    00002c37: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3328:
    00002c40: 	movq	%r14, %rdi
    00002c43: 	callq	*%rax # Offset: 11331
    00002c45: 	cmpq	%rax, %r12
    00002c48: 	jae	.Ltmp3333 # Offset: 11336
.Ltmp3329:
    00002c4a: 	movq	0x230(%rsp), %rdx
    00002c52: 	leaq	DATAat0x1d1cf(%rip), %rsi
    00002c59: 	movl	$0x1, %edi
    00002c5e: 	xorl	%eax, %eax
    00002c60: 	callq	__printf_chk@PLT # Offset: 11360
.Ltmp3330:
    00002c65: 	addl	$0x1, %r15d
    00002c69: 	cmpl	iterations(%rip), %r15d
    00002c70: 	jl	.Ltmp3334 # Offset: 11376
.Ltmp3325:
    00002c76: 	callq	clock@PLT # Offset: 11382
    00002c7b: 	movq	0x30(%rsp), %rdi
    00002c80: 	pxor	%xmm0, %xmm0
    00002c84: 	movq	%rax, end_time(%rip)
    00002c8b: 	subq	start_time(%rip), %rax
    00002c92: 	cvtsi2sd	%rax, %xmm0
    00002c97: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00002c9f: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 11423
    00002ca4: 	movq	0x230(%rsp), %rdi
    00002cac: 	cmpq	0x98(%rsp), %rdi
    00002cb4: 	je	.Ltmp3335 # Offset: 11444
    00002cb6: 	movq	0x240(%rsp), %rax
    00002cbe: 	leaq	0x1(%rax), %rsi
    00002cc2: 	callq	_ZdlPvm@PLT # Offset: 11458
.Ltmp3335:
    00002cc7: 	movq	0xa8(%rsp), %rsi
    00002ccf: 	movq	0x30(%rsp), %rdi
    00002cd4: 	leaq	DATAat0x1d730(%rip), %rdx
    00002cdb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11483
    00002ce0: 	callq	clock@PLT # Offset: 11488
    00002ce5: 	xorl	%r15d, %r15d
    00002ce8: 	leaq	_ZN15WorkerSubClass2ImEcvmEv(%rip), %r13
    00002cef: 	movq	%rax, start_time(%rip)
    00002cf6: 	movl	iterations(%rip), %eax
    00002cfc: 	testl	%eax, %eax
    00002cfe: 	jle	.Ltmp3336 # Offset: 11518
    00002d04: 	nopl	(%rax) # Size: 4
.Ltmp3345:
    00002d08: 	movq	0x10(%rsp), %rdx
    00002d0d: 	movq	0x90(%rsp), %rax
    00002d15: 	movq	0x78(%rsp), %rsi
    00002d1a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3337:
    00002d20: 	movq	0x8(%rax), %rcx
    00002d24: 	addq	$0x10, %rax
    00002d28: 	addq	$0x10, %rdx
    00002d2c: 	movq	%rcx, -0x8(%rdx)
    00002d30: 	cmpq	%rsi, %rax
    00002d33: 	jne	.Ltmp3337 # Offset: 11571
    00002d35: 	movq	(%rsp), %rsi
    00002d39: 	movq	0x10(%rsp), %rdi
    00002d3e: 	callq	"_ZN9benchmark9quicksortIP15WorkerSubClass2ImEEEvT_S4_.part.0/1" # Offset: 11582
    00002d43: 	leaq	0x46760(%rsp), %rbx
    00002d4b: 	jmp	.Ltmp3338 # Offset: 11595
    00002d4d: 	nopl	(%rax) # Size: 3
.Ltmp3342:
    00002d50: 	movq	-0x20(%rbx), %rax
    00002d54: 	movq	-0x8(%rbx), %r12
    00002d58: 	movq	(%rax), %rax
    00002d5b: 	cmpq	%r13, %rax
    00002d5e: 	jne	.Ltmp3339 # Offset: 11614
.Ltmp3343:
    00002d60: 	movq	-0x18(%rbx), %rax
    00002d64: 	cmpq	%rax, %r12
    00002d67: 	jb	.Ltmp3340 # Offset: 11623
.Ltmp3344:
    00002d69: 	cmpq	(%rsp), %rbx
    00002d6d: 	je	.Ltmp3341 # Offset: 11629
.Ltmp3338:
    00002d6f: 	leaq	-0x10(%rbx), %r14
    00002d73: 	movq	%rbx, %rdi
    00002d76: 	movq	(%rbx), %rax
    00002d79: 	addq	$0x10, %rbx
    00002d7d: 	movq	(%rax), %rax
    00002d80: 	cmpq	%r13, %rax
    00002d83: 	je	.Ltmp3342 # Offset: 11651
    00002d85: 	callq	*%rax # Offset: 11653
    00002d87: 	movq	%rax, %r12
    00002d8a: 	movq	-0x20(%rbx), %rax
    00002d8e: 	movq	(%rax), %rax
    00002d91: 	cmpq	%r13, %rax
    00002d94: 	je	.Ltmp3343 # Offset: 11668
.Ltmp3339:
    00002d96: 	movq	%r14, %rdi
    00002d99: 	callq	*%rax # Offset: 11673
    00002d9b: 	cmpq	%rax, %r12
    00002d9e: 	jae	.Ltmp3344 # Offset: 11678
.Ltmp3340:
    00002da0: 	movq	0x230(%rsp), %rdx
    00002da8: 	leaq	DATAat0x1d1cf(%rip), %rsi
    00002daf: 	movl	$0x1, %edi
    00002db4: 	xorl	%eax, %eax
    00002db6: 	callq	__printf_chk@PLT # Offset: 11702
.Ltmp3341:
    00002dbb: 	addl	$0x1, %r15d
    00002dbf: 	cmpl	iterations(%rip), %r15d
    00002dc6: 	jl	.Ltmp3345 # Offset: 11718
.Ltmp3336:
    00002dcc: 	callq	clock@PLT # Offset: 11724
    00002dd1: 	movq	0x30(%rsp), %rdi
    00002dd6: 	pxor	%xmm0, %xmm0
    00002dda: 	movq	%rax, end_time(%rip)
    00002de1: 	subq	start_time(%rip), %rax
    00002de8: 	cvtsi2sd	%rax, %xmm0
    00002ded: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00002df5: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 11765
    00002dfa: 	movq	0x230(%rsp), %rdi
    00002e02: 	cmpq	0x98(%rsp), %rdi
    00002e0a: 	je	.Ltmp3346 # Offset: 11786
    00002e0c: 	movq	0x240(%rsp), %rax
    00002e14: 	leaq	0x1(%rax), %rsi
    00002e18: 	callq	_ZdlPvm@PLT # Offset: 11800
.Ltmp3346:
    00002e1d: 	movq	0xa8(%rsp), %rsi
    00002e25: 	movq	0x30(%rsp), %rdi
    00002e2a: 	leaq	DATAat0x1d758(%rip), %rdx
    00002e31: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11825
    00002e36: 	callq	clock@PLT # Offset: 11830
    00002e3b: 	movl	iterations(%rip), %r14d
    00002e42: 	xorl	%r15d, %r15d
    00002e45: 	leaq	_ZN15WorkerSubClass3ImEcvmEv(%rip), %r13
    00002e4c: 	movq	%rax, start_time(%rip)
    00002e53: 	testl	%r14d, %r14d
    00002e56: 	jle	.Ltmp3347 # Offset: 11862
    00002e5c: 	nopl	(%rax) # Size: 4
.Ltmp3356:
    00002e60: 	movq	(%rsp), %rdx
    00002e64: 	movq	0x78(%rsp), %rax
    00002e69: 	movq	0xb8(%rsp), %rsi
    00002e71: 	nopl	(%rax) # Size: 7
.Ltmp3348:
    00002e78: 	movq	0x8(%rax), %rcx
    00002e7c: 	addq	$0x10, %rax
    00002e80: 	addq	$0x10, %rdx
    00002e84: 	movq	%rcx, -0x8(%rdx)
    00002e88: 	cmpq	%rsi, %rax
    00002e8b: 	jne	.Ltmp3348 # Offset: 11915
    00002e8d: 	movq	0x38(%rsp), %rsi
    00002e92: 	movq	(%rsp), %rdi
    00002e96: 	callq	"_ZN9benchmark9quicksortIP15WorkerSubClass3ImEEEvT_S4_.part.0/1" # Offset: 11926
    00002e9b: 	leaq	0x4e460(%rsp), %rbx
    00002ea3: 	jmp	.Ltmp3349 # Offset: 11939
    00002ea5: 	nopl	(%rax) # Size: 3
.Ltmp3353:
    00002ea8: 	movq	-0x20(%rbx), %rax
    00002eac: 	movq	-0x8(%rbx), %r12
    00002eb0: 	movq	(%rax), %rax
    00002eb3: 	cmpq	%r13, %rax
    00002eb6: 	jne	.Ltmp3350 # Offset: 11958
.Ltmp3354:
    00002eb8: 	movq	-0x18(%rbx), %rax
    00002ebc: 	cmpq	%rax, %r12
    00002ebf: 	jb	.Ltmp3351 # Offset: 11967
.Ltmp3355:
    00002ec1: 	cmpq	0x38(%rsp), %rbx
    00002ec6: 	je	.Ltmp3352 # Offset: 11974
.Ltmp3349:
    00002ec8: 	leaq	-0x10(%rbx), %r14
    00002ecc: 	movq	%rbx, %rdi
    00002ecf: 	movq	(%rbx), %rax
    00002ed2: 	addq	$0x10, %rbx
    00002ed6: 	movq	(%rax), %rax
    00002ed9: 	cmpq	%r13, %rax
    00002edc: 	je	.Ltmp3353 # Offset: 11996
    00002ede: 	callq	*%rax # Offset: 11998
    00002ee0: 	movq	%rax, %r12
    00002ee3: 	movq	-0x20(%rbx), %rax
    00002ee7: 	movq	(%rax), %rax
    00002eea: 	cmpq	%r13, %rax
    00002eed: 	je	.Ltmp3354 # Offset: 12013
    00002eef: 	nop # Size: 1
.Ltmp3350:
    00002ef0: 	movq	%r14, %rdi
    00002ef3: 	callq	*%rax # Offset: 12019
    00002ef5: 	cmpq	%rax, %r12
    00002ef8: 	jae	.Ltmp3355 # Offset: 12024
.Ltmp3351:
    00002efa: 	movq	0x230(%rsp), %rdx
    00002f02: 	leaq	DATAat0x1d1cf(%rip), %rsi
    00002f09: 	movl	$0x1, %edi
    00002f0e: 	xorl	%eax, %eax
    00002f10: 	callq	__printf_chk@PLT # Offset: 12048
.Ltmp3352:
    00002f15: 	addl	$0x1, %r15d
    00002f19: 	cmpl	iterations(%rip), %r15d
    00002f20: 	jl	.Ltmp3356 # Offset: 12064
.Ltmp3347:
    00002f26: 	callq	clock@PLT # Offset: 12070
    00002f2b: 	movq	0x30(%rsp), %rdi
    00002f30: 	pxor	%xmm0, %xmm0
    00002f34: 	movq	%rax, end_time(%rip)
    00002f3b: 	subq	start_time(%rip), %rax
    00002f42: 	cvtsi2sd	%rax, %xmm0
    00002f47: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00002f4f: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 12111
    00002f54: 	movq	0x230(%rsp), %rdi
    00002f5c: 	cmpq	0x98(%rsp), %rdi
    00002f64: 	je	.Ltmp3357 # Offset: 12132
    00002f66: 	movq	0x240(%rsp), %rax
    00002f6e: 	leaq	0x1(%rax), %rsi
    00002f72: 	callq	_ZdlPvm@PLT # Offset: 12146
.Ltmp3357:
    00002f77: 	movq	0xa8(%rsp), %rbx
    00002f7f: 	leaq	0x210(%rsp), %rdi
    00002f87: 	leaq	DATAat0x1d256(%rip), %rdx
    00002f8e: 	movq	%rbx, %rsi
    00002f91: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12177
    00002f96: 	movl	iterations(%rip), %edx
    00002f9c: 	movl	$0x1, %r8d
    00002fa2: 	movl	$0x1, %ecx
    00002fa7: 	movq	0x210(%rsp), %rdi
    00002faf: 	movl	$0x7d0, %esi
    00002fb4: 	callq	_Z9summarizePKciiii # Offset: 12212
    00002fb9: 	movq	0x30(%rsp), %rdi
    00002fbe: 	leaq	DATAat0x1d26d(%rip), %rdx
    00002fc5: 	movq	%rbx, %rsi
    00002fc8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12232
    00002fcd: 	callq	clock@PLT # Offset: 12237
    00002fd2: 	movl	iterations(%rip), %r13d
    00002fd9: 	xorl	%ebx, %ebx
    00002fdb: 	movq	%rax, start_time(%rip)
    00002fe2: 	testl	%r13d, %r13d
    00002fe5: 	jle	.Ltmp3358 # Offset: 12261
    00002feb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3361:
    00002ff0: 	movq	0x68(%rsp), %r13
    00002ff5: 	movq	0x58(%rsp), %rsi
    00002ffa: 	movl	$0x3e80, %edx
    00002fff: 	movl	$0x3e7, %r12d
    00003005: 	movq	%r13, %rdi
    00003008: 	callq	memcpy@PLT # Offset: 12296
    0000300d: 	nopl	(%rax) # Size: 3
.Ltmp3359:
    00003010: 	movq	(%r13,%r12,8), %rcx
    00003015: 	movq	%r12, %rdx
    00003018: 	movq	%r13, %rsi
    0000301b: 	movl	$0x7d0, %edi
    00003020: 	callq	_ZN9benchmark9__sift_inIPmmEEvlT_lT0_ # Offset: 12320
    00003025: 	subq	$0x1, %r12
    00003029: 	jae	.Ltmp3359 # Offset: 12329
    0000302b: 	movq	0x68(%rsp), %r13
    00003030: 	movl	$0x7cf, %r12d
    00003036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3360:
    00003040: 	movq	0x250(%rsp), %rax
    00003048: 	xorl	%edx, %edx
    0000304a: 	movq	%r12, %rdi
    0000304d: 	movq	%r13, %rsi
    00003050: 	movq	(%r13,%r12,8), %rcx
    00003055: 	movq	%rax, (%r13,%r12,8)
    0000305a: 	callq	_ZN9benchmark9__sift_inIPmmEEvlT_lT0_ # Offset: 12378
    0000305f: 	subq	$0x1, %r12
    00003063: 	jne	.Ltmp3360 # Offset: 12387
    00003065: 	movq	0x30(%rsp), %rdx
    0000306a: 	movq	0x48(%rsp), %rsi
    0000306f: 	movq	0x68(%rsp), %rdi
    00003074: 	callq	_Z13verify_sortedIPmEvT_S1_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 12404
    00003079: 	addl	$0x1, %ebx
    0000307c: 	cmpl	iterations(%rip), %ebx
    00003082: 	jl	.Ltmp3361 # Offset: 12418
.Ltmp3358:
    00003088: 	callq	clock@PLT # Offset: 12424
    0000308d: 	movq	0x30(%rsp), %rdi
    00003092: 	pxor	%xmm0, %xmm0
    00003096: 	movq	%rax, end_time(%rip)
    0000309d: 	subq	start_time(%rip), %rax
    000030a4: 	cvtsi2sd	%rax, %xmm0
    000030a9: 	divsd	DATAat0x1dec0(%rip), %xmm0
    000030b1: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 12465
    000030b6: 	movq	0x230(%rsp), %rdi
    000030be: 	cmpq	0x98(%rsp), %rdi
    000030c6: 	je	.Ltmp3362 # Offset: 12486
    000030c8: 	movq	0x240(%rsp), %rax
    000030d0: 	leaq	0x1(%rax), %rsi
    000030d4: 	callq	_ZdlPvm@PLT # Offset: 12500
.Ltmp3362:
    000030d9: 	movq	0xa8(%rsp), %rsi
    000030e1: 	movq	0x30(%rsp), %rdi
    000030e6: 	leaq	DATAat0x1d780(%rip), %rdx
    000030ed: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12525
    000030f2: 	callq	clock@PLT # Offset: 12530
    000030f7: 	movl	iterations(%rip), %r12d
    000030fe: 	xorl	%ebx, %ebx
    00003100: 	movq	%rax, start_time(%rip)
    00003107: 	testl	%r12d, %r12d
    0000310a: 	jle	.Ltmp3363 # Offset: 12554
.Ltmp3366:
    00003110: 	movq	0x48(%rsp), %r13
    00003115: 	movq	0xb0(%rsp), %rsi
    0000311d: 	movl	$0x3e80, %edx
    00003122: 	movl	$0x3e7, %r12d
    00003128: 	movq	%r13, %rdi
    0000312b: 	callq	memcpy@PLT # Offset: 12587
.Ltmp3364:
    00003130: 	movq	(%r13,%r12,8), %rcx
    00003135: 	movq	%r12, %rdx
    00003138: 	movq	%r13, %rsi
    0000313b: 	movl	$0x7d0, %edi
    00003140: 	callq	_ZN9benchmark9__sift_inIP9TypeClassImES2_EEvlT_lT0_ # Offset: 12608
    00003145: 	subq	$0x1, %r12
    00003149: 	jae	.Ltmp3364 # Offset: 12617
    0000314b: 	movq	0x48(%rsp), %r13
    00003150: 	movl	$0x7cf, %r12d
    00003156: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3365:
    00003160: 	movq	0x40d0(%rsp), %rax
    00003168: 	xorl	%edx, %edx
    0000316a: 	movq	%r12, %rdi
    0000316d: 	movq	%r13, %rsi
    00003170: 	movq	(%r13,%r12,8), %rcx
    00003175: 	movq	%rax, (%r13,%r12,8)
    0000317a: 	callq	_ZN9benchmark9__sift_inIP9TypeClassImES2_EEvlT_lT0_ # Offset: 12666
    0000317f: 	subq	$0x1, %r12
    00003183: 	jne	.Ltmp3365 # Offset: 12675
    00003185: 	movq	0x30(%rsp), %rdx
    0000318a: 	movq	0x50(%rsp), %rsi
    0000318f: 	movq	0x48(%rsp), %rdi
    00003194: 	callq	_Z13verify_sortedIP9TypeClassImEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 12692
    00003199: 	addl	$0x1, %ebx
    0000319c: 	cmpl	iterations(%rip), %ebx
    000031a2: 	jl	.Ltmp3366 # Offset: 12706
.Ltmp3363:
    000031a8: 	callq	clock@PLT # Offset: 12712
    000031ad: 	movq	0x30(%rsp), %rdi
    000031b2: 	pxor	%xmm0, %xmm0
    000031b6: 	movq	%rax, end_time(%rip)
    000031bd: 	subq	start_time(%rip), %rax
    000031c4: 	cvtsi2sd	%rax, %xmm0
    000031c9: 	divsd	DATAat0x1dec0(%rip), %xmm0
    000031d1: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 12753
    000031d6: 	movq	0x230(%rsp), %rdi
    000031de: 	cmpq	0x98(%rsp), %rdi
    000031e6: 	je	.Ltmp3367 # Offset: 12774
    000031e8: 	movq	0x240(%rsp), %rax
    000031f0: 	leaq	0x1(%rax), %rsi
    000031f4: 	callq	_ZdlPvm@PLT # Offset: 12788
.Ltmp3367:
    000031f9: 	movq	0xa8(%rsp), %rsi
    00003201: 	movq	0x30(%rsp), %rdi
    00003206: 	leaq	DATAat0x1d7a8(%rip), %rdx
    0000320d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12813
    00003212: 	callq	clock@PLT # Offset: 12818
    00003217: 	movl	iterations(%rip), %r11d
    0000321e: 	xorl	%ebx, %ebx
    00003220: 	movq	%rax, start_time(%rip)
    00003227: 	testl	%r11d, %r11d
    0000322a: 	jle	.Ltmp3368 # Offset: 12842
.Ltmp3371:
    00003230: 	movq	0x50(%rsp), %r13
    00003235: 	movq	0xc0(%rsp), %rsi
    0000323d: 	movl	$0x3e80, %edx
    00003242: 	movl	$0x3e7, %r12d
    00003248: 	movq	%r13, %rdi
    0000324b: 	callq	memcpy@PLT # Offset: 12875
.Ltmp3369:
    00003250: 	movq	(%r13,%r12,8), %rcx
    00003255: 	movq	%r12, %rdx
    00003258: 	movq	%r13, %rsi
    0000325b: 	movl	$0x7d0, %edi
    00003260: 	callq	_ZN9benchmark9__sift_inIP12TypeSubClassImES2_EEvlT_lT0_ # Offset: 12896
    00003265: 	subq	$0x1, %r12
    00003269: 	jae	.Ltmp3369 # Offset: 12905
    0000326b: 	movq	0x50(%rsp), %r13
    00003270: 	movl	$0x7cf, %r12d
    00003276: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3370:
    00003280: 	movq	0x7f50(%rsp), %rax
    00003288: 	xorl	%edx, %edx
    0000328a: 	movq	%r12, %rdi
    0000328d: 	movq	%r13, %rsi
    00003290: 	movq	(%r13,%r12,8), %rcx
    00003295: 	movq	%rax, (%r13,%r12,8)
    0000329a: 	callq	_ZN9benchmark9__sift_inIP12TypeSubClassImES2_EEvlT_lT0_ # Offset: 12954
    0000329f: 	subq	$0x1, %r12
    000032a3: 	jne	.Ltmp3370 # Offset: 12963
    000032a5: 	movq	0x30(%rsp), %rdx
    000032aa: 	movq	0x50(%rsp), %rdi
    000032af: 	movq	%rbp, %rsi
    000032b2: 	callq	_Z13verify_sortedIP12TypeSubClassImEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 12978
    000032b7: 	addl	$0x1, %ebx
    000032ba: 	cmpl	iterations(%rip), %ebx
    000032c0: 	jl	.Ltmp3371 # Offset: 12992
.Ltmp3368:
    000032c6: 	callq	clock@PLT # Offset: 12998
    000032cb: 	movq	0x30(%rsp), %rdi
    000032d0: 	pxor	%xmm0, %xmm0
    000032d4: 	movq	%rax, end_time(%rip)
    000032db: 	subq	start_time(%rip), %rax
    000032e2: 	cvtsi2sd	%rax, %xmm0
    000032e7: 	divsd	DATAat0x1dec0(%rip), %xmm0
    000032ef: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 13039
    000032f4: 	movq	0x230(%rsp), %rdi
    000032fc: 	cmpq	0x98(%rsp), %rdi
    00003304: 	je	.Ltmp3372 # Offset: 13060
    00003306: 	movq	0x240(%rsp), %rax
    0000330e: 	leaq	0x1(%rax), %rsi
    00003312: 	callq	_ZdlPvm@PLT # Offset: 13074
.Ltmp3372:
    00003317: 	movq	0xa8(%rsp), %rsi
    0000331f: 	movq	0x30(%rsp), %rdi
    00003324: 	leaq	DATAat0x1d7c8(%rip), %rdx
    0000332b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13099
    00003330: 	callq	clock@PLT # Offset: 13104
    00003335: 	movl	iterations(%rip), %r10d
    0000333c: 	xorl	%ebx, %ebx
    0000333e: 	movq	%rax, start_time(%rip)
    00003345: 	testl	%r10d, %r10d
    00003348: 	jle	.Ltmp3373 # Offset: 13128
    0000334e: 	nop # Size: 2
.Ltmp3376:
    00003350: 	movq	0xc8(%rsp), %rsi
    00003358: 	movl	$0x3e80, %edx
    0000335d: 	movq	%rbp, %rdi
    00003360: 	movl	$0x3e7, %r12d
    00003366: 	callq	memcpy@PLT # Offset: 13158
    0000336b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3374:
    00003370: 	movq	(%rbp,%r12,8), %rcx
    00003375: 	movq	%r12, %rdx
    00003378: 	movq	%rbp, %rsi
    0000337b: 	movl	$0x7d0, %edi
    00003380: 	callq	_ZN9benchmark9__sift_inIP13TypeSub2ClassImES2_EEvlT_lT0_ # Offset: 13184
    00003385: 	subq	$0x1, %r12
    00003389: 	jae	.Ltmp3374 # Offset: 13193
    0000338b: 	movl	$0x7cf, %r12d
    00003391: 	nopl	(%rax) # Size: 7
.Ltmp3375:
    00003398: 	movq	0xbdd0(%rsp), %rax
    000033a0: 	xorl	%edx, %edx
    000033a2: 	movq	%r12, %rdi
    000033a5: 	movq	%rbp, %rsi
    000033a8: 	movq	(%rbp,%r12,8), %rcx
    000033ad: 	movq	%rax, (%rbp,%r12,8)
    000033b2: 	callq	_ZN9benchmark9__sift_inIP13TypeSub2ClassImES2_EEvlT_lT0_ # Offset: 13234
    000033b7: 	subq	$0x1, %r12
    000033bb: 	jne	.Ltmp3375 # Offset: 13243
    000033bd: 	movq	0x30(%rsp), %rdx
    000033c2: 	movq	0x40(%rsp), %rsi
    000033c7: 	movq	%rbp, %rdi
    000033ca: 	callq	_Z13verify_sortedIP13TypeSub2ClassImEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 13258
    000033cf: 	addl	$0x1, %ebx
    000033d2: 	cmpl	iterations(%rip), %ebx
    000033d8: 	jl	.Ltmp3376 # Offset: 13272
.Ltmp3373:
    000033de: 	callq	clock@PLT # Offset: 13278
    000033e3: 	movq	0x30(%rsp), %rdi
    000033e8: 	pxor	%xmm0, %xmm0
    000033ec: 	movq	%rax, end_time(%rip)
    000033f3: 	subq	start_time(%rip), %rax
    000033fa: 	cvtsi2sd	%rax, %xmm0
    000033ff: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00003407: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 13319
    0000340c: 	movq	0x230(%rsp), %rdi
    00003414: 	cmpq	0x98(%rsp), %rdi
    0000341c: 	je	.Ltmp3377 # Offset: 13340
    0000341e: 	movq	0x240(%rsp), %rax
    00003426: 	leaq	0x1(%rax), %rsi
    0000342a: 	callq	_ZdlPvm@PLT # Offset: 13354
.Ltmp3377:
    0000342f: 	movq	0xa8(%rsp), %rsi
    00003437: 	movq	0x30(%rsp), %rdi
    0000343c: 	leaq	DATAat0x1d7f0(%rip), %rdx
    00003443: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13379
    00003448: 	callq	clock@PLT # Offset: 13384
    0000344d: 	movl	iterations(%rip), %r9d
    00003454: 	xorl	%ebx, %ebx
    00003456: 	movq	%rax, start_time(%rip)
    0000345d: 	testl	%r9d, %r9d
    00003460: 	jle	.Ltmp3378 # Offset: 13408
    00003466: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3381:
    00003470: 	movq	0x40(%rsp), %r12
    00003475: 	movl	$0x3e80, %edx
    0000347a: 	movl	$0x3e7, %ebp
    0000347f: 	movq	0xa0(%rsp), %rsi
    00003487: 	movq	%r12, %rdi
    0000348a: 	callq	memcpy@PLT # Offset: 13450
    0000348f: 	nop # Size: 1
.Ltmp3379:
    00003490: 	movq	(%r12,%rbp,8), %rcx
    00003494: 	movq	%rbp, %rdx
    00003497: 	movq	%r12, %rsi
    0000349a: 	movl	$0x7d0, %edi
    0000349f: 	callq	_ZN9benchmark9__sift_inIP12DeepSubClassImES2_EEvlT_lT0_ # Offset: 13471
    000034a4: 	subq	$0x1, %rbp
    000034a8: 	jae	.Ltmp3379 # Offset: 13480
    000034aa: 	movq	0x40(%rsp), %r12
    000034af: 	movl	$0x7cf, %ebp
    000034b4: 	nopl	(%rax) # Size: 4
.Ltmp3380:
    000034b8: 	movq	0xfc50(%rsp), %rax
    000034c0: 	xorl	%edx, %edx
    000034c2: 	movq	%rbp, %rdi
    000034c5: 	movq	%r12, %rsi
    000034c8: 	movq	(%r12,%rbp,8), %rcx
    000034cc: 	movq	%rax, (%r12,%rbp,8)
    000034d0: 	callq	_ZN9benchmark9__sift_inIP12DeepSubClassImES2_EEvlT_lT0_ # Offset: 13520
    000034d5: 	subq	$0x1, %rbp
    000034d9: 	jne	.Ltmp3380 # Offset: 13529
    000034db: 	movq	0x30(%rsp), %rdx
    000034e0: 	movq	0x58(%rsp), %rsi
    000034e5: 	movq	0x40(%rsp), %rdi
    000034ea: 	callq	_Z13verify_sortedIP12DeepSubClassImEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 13546
    000034ef: 	addl	$0x1, %ebx
    000034f2: 	cmpl	iterations(%rip), %ebx
    000034f8: 	jl	.Ltmp3381 # Offset: 13560
.Ltmp3378:
    000034fe: 	callq	clock@PLT # Offset: 13566
    00003503: 	movq	0x30(%rsp), %rdi
    00003508: 	pxor	%xmm0, %xmm0
    0000350c: 	movq	%rax, end_time(%rip)
    00003513: 	subq	start_time(%rip), %rax
    0000351a: 	cvtsi2sd	%rax, %xmm0
    0000351f: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00003527: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 13607
    0000352c: 	movq	0x230(%rsp), %rdi
    00003534: 	cmpq	0x98(%rsp), %rdi
    0000353c: 	je	.Ltmp3382 # Offset: 13628
    0000353e: 	movq	0x240(%rsp), %rax
    00003546: 	leaq	0x1(%rax), %rsi
    0000354a: 	callq	_ZdlPvm@PLT # Offset: 13642
.Ltmp3382:
    0000354f: 	movq	0xa8(%rsp), %rsi
    00003557: 	movq	0x30(%rsp), %rdi
    0000355c: 	leaq	DATAat0x1d810(%rip), %rdx
    00003563: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 13667
    00003568: 	callq	clock@PLT # Offset: 13672
    0000356d: 	movl	iterations(%rip), %r8d
    00003574: 	xorl	%r15d, %r15d
    00003577: 	leaq	0xf0(%rsp), %r13
    0000357f: 	movq	%rax, start_time(%rip)
    00003586: 	leaq	0x2b1c8(%rsp), %rax
    0000358e: 	leaq	_ZN16TypeVirtualClassImEcvmEv(%rip), %r12
    00003595: 	movq	%rax, 0x40(%rsp)
    0000359a: 	testl	%r8d, %r8d
    0000359d: 	jle	.Ltmp3383 # Offset: 13725
    000035a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3394:
    000035a8: 	movq	0x28(%rsp), %rdx
    000035ad: 	movq	0x38(%rsp), %rax
    000035b2: 	movq	0x70(%rsp), %rsi
    000035b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3384:
    000035c0: 	movq	0x8(%rax), %rcx
    000035c4: 	addq	$0x10, %rax
    000035c8: 	addq	$0x10, %rdx
    000035cc: 	movq	%rcx, -0x8(%rdx)
    000035d0: 	cmpq	%rsi, %rax
    000035d3: 	jne	.Ltmp3384 # Offset: 13779
    000035d5: 	movq	0x40(%rsp), %rbp
    000035da: 	movl	$0x3e7, %ebx
    000035df: 	nop # Size: 1
.Ltmp3385:
    000035e0: 	movq	(%rbp), %rax
    000035e4: 	movq	%r13, %rcx
    000035e7: 	movq	%rbx, %rdx
    000035ea: 	movl	$0x7d0, %edi
    000035ef: 	leaq	_ZTV16TypeVirtualClassImE+16(%rip), %rsi
    000035f6: 	movq	%rsi, 0xf0(%rsp)
    000035fe: 	movq	0x28(%rsp), %rsi
    00003603: 	movq	%rax, 0xf8(%rsp)
    0000360b: 	callq	_ZN9benchmark9__sift_inIP16TypeVirtualClassImES2_EEvlT_lT0_ # Offset: 13835
    00003610: 	subq	$0x1, %rbx
    00003614: 	subq	$0x10, %rbp
    00003618: 	cmpq	$-0x1, %rbx
    0000361c: 	jne	.Ltmp3385 # Offset: 13852
    0000361e: 	leaq	0x2f048(%rsp), %rbp
    00003626: 	movl	$0x7cf, %ebx
    0000362b: 	leaq	0xe0(%rsp), %r14
    00003633: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3386:
    00003638: 	movq	0x27358(%rsp), %rdx
    00003640: 	movq	(%rbp), %rax
    00003644: 	leaq	_ZTV16TypeVirtualClassImE+16(%rip), %rdi
    0000364b: 	movq	%r14, %rcx
    0000364e: 	movq	0x28(%rsp), %rsi
    00003653: 	movq	%rdi, 0xe0(%rsp)
    0000365b: 	movq	%rbx, %rdi
    0000365e: 	movq	%rdx, (%rbp)
    00003662: 	xorl	%edx, %edx
    00003664: 	movq	%rax, 0xe8(%rsp)
    0000366c: 	callq	_ZN9benchmark9__sift_inIP16TypeVirtualClassImES2_EEvlT_lT0_ # Offset: 13932
    00003671: 	subq	$0x10, %rbp
    00003675: 	subq	$0x1, %rbx
    00003679: 	jne	.Ltmp3386 # Offset: 13945
    0000367b: 	leaq	0x27360(%rsp), %rbx
    00003683: 	jmp	.Ltmp3387 # Offset: 13955
    00003685: 	nopl	(%rax) # Size: 3
.Ltmp3391:
    00003688: 	movq	-0x20(%rbx), %rax
    0000368c: 	movq	-0x8(%rbx), %rbp
    00003690: 	movq	(%rax), %rax
    00003693: 	cmpq	%r12, %rax
    00003696: 	jne	.Ltmp3388 # Offset: 13974
.Ltmp3392:
    00003698: 	movq	-0x18(%rbx), %rax
    0000369c: 	cmpq	%rax, %rbp
    0000369f: 	jb	.Ltmp3389 # Offset: 13983
.Ltmp3393:
    000036a1: 	cmpq	0x8(%rsp), %rbx
    000036a6: 	je	.Ltmp3390 # Offset: 13990
.Ltmp3387:
    000036a8: 	leaq	-0x10(%rbx), %r14
    000036ac: 	movq	%rbx, %rdi
    000036af: 	movq	(%rbx), %rax
    000036b2: 	addq	$0x10, %rbx
    000036b6: 	movq	(%rax), %rax
    000036b9: 	cmpq	%r12, %rax
    000036bc: 	je	.Ltmp3391 # Offset: 14012
    000036be: 	callq	*%rax # Offset: 14014
    000036c0: 	movq	%rax, %rbp
    000036c3: 	movq	-0x20(%rbx), %rax
    000036c7: 	movq	(%rax), %rax
    000036ca: 	cmpq	%r12, %rax
    000036cd: 	je	.Ltmp3392 # Offset: 14029
    000036cf: 	nop # Size: 1
.Ltmp3388:
    000036d0: 	movq	%r14, %rdi
    000036d3: 	callq	*%rax # Offset: 14035
    000036d5: 	cmpq	%rax, %rbp
    000036d8: 	jae	.Ltmp3393 # Offset: 14040
.Ltmp3389:
    000036da: 	movq	0x230(%rsp), %rdx
    000036e2: 	leaq	DATAat0x1d1cf(%rip), %rsi
    000036e9: 	movl	$0x1, %edi
    000036ee: 	xorl	%eax, %eax
    000036f0: 	callq	__printf_chk@PLT # Offset: 14064
.Ltmp3390:
    000036f5: 	addl	$0x1, %r15d
    000036f9: 	cmpl	iterations(%rip), %r15d
    00003700: 	jl	.Ltmp3394 # Offset: 14080
.Ltmp3383:
    00003706: 	callq	clock@PLT # Offset: 14086
    0000370b: 	movq	0x30(%rsp), %rdi
    00003710: 	pxor	%xmm0, %xmm0
    00003714: 	movq	%rax, end_time(%rip)
    0000371b: 	subq	start_time(%rip), %rax
    00003722: 	cvtsi2sd	%rax, %xmm0
    00003727: 	divsd	DATAat0x1dec0(%rip), %xmm0
    0000372f: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 14127
    00003734: 	movq	0x230(%rsp), %rdi
    0000373c: 	cmpq	0x98(%rsp), %rdi
    00003744: 	je	.Ltmp3395 # Offset: 14148
    00003746: 	movq	0x240(%rsp), %rax
    0000374e: 	leaq	0x1(%rax), %rsi
    00003752: 	callq	_ZdlPvm@PLT # Offset: 14162
.Ltmp3395:
    00003757: 	movq	0xa8(%rsp), %rsi
    0000375f: 	movq	0x30(%rsp), %rdi
    00003764: 	leaq	DATAat0x1d838(%rip), %rdx
    0000376b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 14187
    00003770: 	callq	clock@PLT # Offset: 14192
    00003775: 	movl	iterations(%rip), %edi
    0000377b: 	xorl	%r14d, %r14d
    0000377e: 	leaq	0x32ec8(%rsp), %r15
    00003786: 	movq	%rax, start_time(%rip)
    0000378d: 	leaq	0x110(%rsp), %r12
    00003795: 	leaq	0x100(%rsp), %r13
    0000379d: 	testl	%edi, %edi
    0000379f: 	jle	.Ltmp3396 # Offset: 14239
    000037a5: 	nopl	(%rax) # Size: 3
.Ltmp3400:
    000037a8: 	movq	0x8(%rsp), %rdx
    000037ad: 	movq	0x70(%rsp), %rax
    000037b2: 	movq	0x80(%rsp), %rsi
    000037ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3397:
    000037c0: 	movq	0x8(%rax), %rcx
    000037c4: 	addq	$0x10, %rax
    000037c8: 	addq	$0x10, %rdx
    000037cc: 	movq	%rcx, -0x8(%rdx)
    000037d0: 	cmpq	%rsi, %rax
    000037d3: 	jne	.Ltmp3397 # Offset: 14291
    000037d5: 	movq	%r15, %rbp
    000037d8: 	movl	$0x3e7, %ebx
    000037dd: 	nopl	(%rax) # Size: 3
.Ltmp3398:
    000037e0: 	movq	(%rbp), %rax
    000037e4: 	movq	0x8(%rsp), %rsi
    000037e9: 	movq	%r12, %rcx
    000037ec: 	movq	%rbx, %rdx
    000037ef: 	movl	$0x7d0, %edi
    000037f4: 	movq	%rax, 0x118(%rsp)
    000037fc: 	leaq	_ZTV19TypeVirtualSubClassImE+16(%rip), %rax
    00003803: 	movq	%rax, 0x110(%rsp)
    0000380b: 	callq	_ZN9benchmark9__sift_inIP19TypeVirtualSubClassImES2_EEvlT_lT0_ # Offset: 14347
    00003810: 	subq	$0x1, %rbx
    00003814: 	subq	$0x10, %rbp
    00003818: 	cmpq	$-0x1, %rbx
    0000381c: 	jne	.Ltmp3398 # Offset: 14364
    0000381e: 	leaq	0x36d48(%rsp), %rbp
    00003826: 	movl	$0x7cf, %ebx
    0000382b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3399:
    00003830: 	movq	(%rbp), %rax
    00003834: 	movq	0x8(%rsp), %rsi
    00003839: 	movq	%r13, %rcx
    0000383c: 	movq	%rbx, %rdi
    0000383f: 	movq	0x2f058(%rsp), %rdx
    00003847: 	movq	%rax, 0x108(%rsp)
    0000384f: 	leaq	_ZTV19TypeVirtualSubClassImE+16(%rip), %rax
    00003856: 	movq	%rdx, (%rbp)
    0000385a: 	xorl	%edx, %edx
    0000385c: 	movq	%rax, 0x100(%rsp)
    00003864: 	callq	_ZN9benchmark9__sift_inIP19TypeVirtualSubClassImES2_EEvlT_lT0_ # Offset: 14436
    00003869: 	subq	$0x10, %rbp
    0000386d: 	subq	$0x1, %rbx
    00003871: 	jne	.Ltmp3399 # Offset: 14449
    00003873: 	movq	0x30(%rsp), %rdx
    00003878: 	movq	0x18(%rsp), %rsi
    0000387d: 	movq	0x8(%rsp), %rdi
    00003882: 	callq	_Z13verify_sortedIP19TypeVirtualSubClassImEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 14466
    00003887: 	addl	$0x1, %r14d
    0000388b: 	cmpl	iterations(%rip), %r14d
    00003892: 	jl	.Ltmp3400 # Offset: 14482
.Ltmp3396:
    00003898: 	callq	clock@PLT # Offset: 14488
    0000389d: 	movq	0x30(%rsp), %rdi
    000038a2: 	pxor	%xmm0, %xmm0
    000038a6: 	movq	%rax, end_time(%rip)
    000038ad: 	subq	start_time(%rip), %rax
    000038b4: 	cvtsi2sd	%rax, %xmm0
    000038b9: 	divsd	DATAat0x1dec0(%rip), %xmm0
    000038c1: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 14529
    000038c6: 	movq	0x230(%rsp), %rdi
    000038ce: 	cmpq	0x98(%rsp), %rdi
    000038d6: 	je	.Ltmp3401 # Offset: 14550
    000038d8: 	movq	0x240(%rsp), %rax
    000038e0: 	leaq	0x1(%rax), %rsi
    000038e4: 	callq	_ZdlPvm@PLT # Offset: 14564
.Ltmp3401:
    000038e9: 	movq	0xa8(%rsp), %rsi
    000038f1: 	movq	0x30(%rsp), %rdi
    000038f6: 	leaq	DATAat0x1d860(%rip), %rdx
    000038fd: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 14589
    00003902: 	callq	clock@PLT # Offset: 14594
    00003907: 	movl	iterations(%rip), %esi
    0000390d: 	xorl	%r14d, %r14d
    00003910: 	leaq	0x3abc8(%rsp), %r15
    00003918: 	movq	%rax, start_time(%rip)
    0000391f: 	leaq	0x130(%rsp), %r12
    00003927: 	leaq	0x120(%rsp), %r13
    0000392f: 	testl	%esi, %esi
    00003931: 	jle	.Ltmp3402 # Offset: 14641
    00003937: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3406:
    00003940: 	movq	0x18(%rsp), %rdx
    00003945: 	movq	0x80(%rsp), %rax
    0000394d: 	movq	0x88(%rsp), %rsi
    00003955: 	nopl	(%rax) # Size: 3
.Ltmp3403:
    00003958: 	movq	0x8(%rax), %rcx
    0000395c: 	addq	$0x10, %rax
    00003960: 	addq	$0x10, %rdx
    00003964: 	movq	%rcx, -0x8(%rdx)
    00003968: 	cmpq	%rsi, %rax
    0000396b: 	jne	.Ltmp3403 # Offset: 14699
    0000396d: 	movq	%r15, %rbp
    00003970: 	movl	$0x3e7, %ebx
    00003975: 	nopl	(%rax) # Size: 3
.Ltmp3404:
    00003978: 	movq	(%rbp), %rax
    0000397c: 	movq	%r12, %rcx
    0000397f: 	movq	%rbx, %rdx
    00003982: 	movl	$0x7d0, %edi
    00003987: 	leaq	_ZTV14WorkerSubClassImE+16(%rip), %rsi
    0000398e: 	movq	%rsi, 0x130(%rsp)
    00003996: 	movq	0x18(%rsp), %rsi
    0000399b: 	movq	%rax, 0x138(%rsp)
    000039a3: 	callq	_ZN9benchmark9__sift_inIP14WorkerSubClassImES2_EEvlT_lT0_ # Offset: 14755
    000039a8: 	subq	$0x1, %rbx
    000039ac: 	subq	$0x10, %rbp
    000039b0: 	cmpq	$-0x1, %rbx
    000039b4: 	jne	.Ltmp3404 # Offset: 14772
    000039b6: 	leaq	0x3ea48(%rsp), %rbp
    000039be: 	movl	$0x7cf, %ebx
    000039c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3405:
    000039c8: 	movq	0x36d58(%rsp), %rdx
    000039d0: 	movq	(%rbp), %rax
    000039d4: 	leaq	_ZTV14WorkerSubClassImE+16(%rip), %rdi
    000039db: 	movq	%r13, %rcx
    000039de: 	movq	0x18(%rsp), %rsi
    000039e3: 	movq	%rdi, 0x120(%rsp)
    000039eb: 	movq	%rbx, %rdi
    000039ee: 	movq	%rdx, (%rbp)
    000039f2: 	xorl	%edx, %edx
    000039f4: 	movq	%rax, 0x128(%rsp)
    000039fc: 	callq	_ZN9benchmark9__sift_inIP14WorkerSubClassImES2_EEvlT_lT0_ # Offset: 14844
    00003a01: 	subq	$0x10, %rbp
    00003a05: 	subq	$0x1, %rbx
    00003a09: 	jne	.Ltmp3405 # Offset: 14857
    00003a0b: 	movq	0x30(%rsp), %rdx
    00003a10: 	movq	0x20(%rsp), %rsi
    00003a15: 	movq	0x18(%rsp), %rdi
    00003a1a: 	callq	_Z13verify_sortedIP14WorkerSubClassImEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 14874
    00003a1f: 	addl	$0x1, %r14d
    00003a23: 	cmpl	iterations(%rip), %r14d
    00003a2a: 	jl	.Ltmp3406 # Offset: 14890
.Ltmp3402:
    00003a30: 	callq	clock@PLT # Offset: 14896
    00003a35: 	movq	0x30(%rsp), %rdi
    00003a3a: 	pxor	%xmm0, %xmm0
    00003a3e: 	movq	%rax, end_time(%rip)
    00003a45: 	subq	start_time(%rip), %rax
    00003a4c: 	cvtsi2sd	%rax, %xmm0
    00003a51: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00003a59: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 14937
    00003a5e: 	movq	0x230(%rsp), %rdi
    00003a66: 	cmpq	0x98(%rsp), %rdi
    00003a6e: 	je	.Ltmp3407 # Offset: 14958
    00003a70: 	movq	0x240(%rsp), %rax
    00003a78: 	leaq	0x1(%rax), %rsi
    00003a7c: 	callq	_ZdlPvm@PLT # Offset: 14972
.Ltmp3407:
    00003a81: 	movq	0xa8(%rsp), %rsi
    00003a89: 	movq	0x30(%rsp), %rdi
    00003a8e: 	leaq	DATAat0x1d888(%rip), %rdx
    00003a95: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 14997
    00003a9a: 	callq	clock@PLT # Offset: 15002
    00003a9f: 	movl	iterations(%rip), %ecx
    00003aa5: 	xorl	%r14d, %r14d
    00003aa8: 	leaq	0x428c8(%rsp), %r15
    00003ab0: 	movq	%rax, start_time(%rip)
    00003ab7: 	leaq	0x150(%rsp), %r12
    00003abf: 	leaq	0x140(%rsp), %r13
    00003ac7: 	testl	%ecx, %ecx
    00003ac9: 	jle	.Ltmp3408 # Offset: 15049
    00003acf: 	nop # Size: 1
.Ltmp3412:
    00003ad0: 	movq	0x20(%rsp), %rdx
    00003ad5: 	movq	0x88(%rsp), %rax
    00003add: 	movq	0x90(%rsp), %rsi
    00003ae5: 	nopl	(%rax) # Size: 3
.Ltmp3409:
    00003ae8: 	movq	0x8(%rax), %rcx
    00003aec: 	addq	$0x10, %rax
    00003af0: 	addq	$0x10, %rdx
    00003af4: 	movq	%rcx, -0x8(%rdx)
    00003af8: 	cmpq	%rsi, %rax
    00003afb: 	jne	.Ltmp3409 # Offset: 15099
    00003afd: 	movq	%r15, %rbp
    00003b00: 	movl	$0x3e7, %ebx
    00003b05: 	nopl	(%rax) # Size: 3
.Ltmp3410:
    00003b08: 	movq	(%rbp), %rax
    00003b0c: 	movq	%r12, %rcx
    00003b0f: 	movq	%rbx, %rdx
    00003b12: 	movl	$0x7d0, %edi
    00003b17: 	leaq	_ZTV18WorkerDeepSubClassImE+16(%rip), %rsi
    00003b1e: 	movq	%rsi, 0x150(%rsp)
    00003b26: 	movq	0x20(%rsp), %rsi
    00003b2b: 	movq	%rax, 0x158(%rsp)
    00003b33: 	callq	_ZN9benchmark9__sift_inIP18WorkerDeepSubClassImES2_EEvlT_lT0_ # Offset: 15155
    00003b38: 	subq	$0x1, %rbx
    00003b3c: 	subq	$0x10, %rbp
    00003b40: 	cmpq	$-0x1, %rbx
    00003b44: 	jne	.Ltmp3410 # Offset: 15172
    00003b46: 	leaq	0x46748(%rsp), %rbp
    00003b4e: 	movl	$0x7cf, %ebx
    00003b53: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3411:
    00003b58: 	movq	0x3ea58(%rsp), %rdx
    00003b60: 	movq	(%rbp), %rax
    00003b64: 	leaq	_ZTV18WorkerDeepSubClassImE+16(%rip), %rdi
    00003b6b: 	movq	%r13, %rcx
    00003b6e: 	movq	0x20(%rsp), %rsi
    00003b73: 	movq	%rdi, 0x140(%rsp)
    00003b7b: 	movq	%rbx, %rdi
    00003b7e: 	movq	%rdx, (%rbp)
    00003b82: 	xorl	%edx, %edx
    00003b84: 	movq	%rax, 0x148(%rsp)
    00003b8c: 	callq	_ZN9benchmark9__sift_inIP18WorkerDeepSubClassImES2_EEvlT_lT0_ # Offset: 15244
    00003b91: 	subq	$0x10, %rbp
    00003b95: 	subq	$0x1, %rbx
    00003b99: 	jne	.Ltmp3411 # Offset: 15257
    00003b9b: 	movq	0x30(%rsp), %rdx
    00003ba0: 	movq	0x10(%rsp), %rsi
    00003ba5: 	movq	0x20(%rsp), %rdi
    00003baa: 	callq	_Z13verify_sortedIP18WorkerDeepSubClassImEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 15274
    00003baf: 	addl	$0x1, %r14d
    00003bb3: 	cmpl	iterations(%rip), %r14d
    00003bba: 	jl	.Ltmp3412 # Offset: 15290
.Ltmp3408:
    00003bc0: 	callq	clock@PLT # Offset: 15296
    00003bc5: 	movq	0x30(%rsp), %rdi
    00003bca: 	pxor	%xmm0, %xmm0
    00003bce: 	movq	%rax, end_time(%rip)
    00003bd5: 	subq	start_time(%rip), %rax
    00003bdc: 	cvtsi2sd	%rax, %xmm0
    00003be1: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00003be9: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 15337
    00003bee: 	movq	0x230(%rsp), %rdi
    00003bf6: 	cmpq	0x98(%rsp), %rdi
    00003bfe: 	je	.Ltmp3413 # Offset: 15358
    00003c00: 	movq	0x240(%rsp), %rax
    00003c08: 	leaq	0x1(%rax), %rsi
    00003c0c: 	callq	_ZdlPvm@PLT # Offset: 15372
.Ltmp3413:
    00003c11: 	movq	0xa8(%rsp), %rsi
    00003c19: 	movq	0x30(%rsp), %rdi
    00003c1e: 	leaq	DATAat0x1d8b0(%rip), %rdx
    00003c25: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 15397
    00003c2a: 	callq	clock@PLT # Offset: 15402
    00003c2f: 	movl	iterations(%rip), %edx
    00003c35: 	xorl	%r15d, %r15d
    00003c38: 	leaq	0x170(%rsp), %r13
    00003c40: 	movq	%rax, start_time(%rip)
    00003c47: 	leaq	0x4a5c8(%rsp), %rax
    00003c4f: 	leaq	_ZN15WorkerSubClass2ImEcvmEv(%rip), %r12
    00003c56: 	movq	%rax, 0x8(%rsp)
    00003c5b: 	testl	%edx, %edx
    00003c5d: 	jle	.Ltmp3414 # Offset: 15453
    00003c63: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3425:
    00003c68: 	movq	0x10(%rsp), %rdx
    00003c6d: 	movq	0x90(%rsp), %rax
    00003c75: 	movq	0x78(%rsp), %rsi
    00003c7a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3415:
    00003c80: 	movq	0x8(%rax), %rcx
    00003c84: 	addq	$0x10, %rax
    00003c88: 	addq	$0x10, %rdx
    00003c8c: 	movq	%rcx, -0x8(%rdx)
    00003c90: 	cmpq	%rsi, %rax
    00003c93: 	jne	.Ltmp3415 # Offset: 15507
    00003c95: 	movq	0x8(%rsp), %rbp
    00003c9a: 	movl	$0x3e7, %ebx
    00003c9f: 	nop # Size: 1
.Ltmp3416:
    00003ca0: 	movq	(%rbp), %rax
    00003ca4: 	movq	%r13, %rcx
    00003ca7: 	movq	%rbx, %rdx
    00003caa: 	movl	$0x7d0, %edi
    00003caf: 	leaq	_ZTV15WorkerSubClass2ImE+16(%rip), %rsi
    00003cb6: 	movq	%rsi, 0x170(%rsp)
    00003cbe: 	movq	0x10(%rsp), %rsi
    00003cc3: 	movq	%rax, 0x178(%rsp)
    00003ccb: 	callq	_ZN9benchmark9__sift_inIP15WorkerSubClass2ImES2_EEvlT_lT0_ # Offset: 15563
    00003cd0: 	subq	$0x1, %rbx
    00003cd4: 	subq	$0x10, %rbp
    00003cd8: 	cmpq	$-0x1, %rbx
    00003cdc: 	jne	.Ltmp3416 # Offset: 15580
    00003cde: 	leaq	0x4e448(%rsp), %rbp
    00003ce6: 	movl	$0x7cf, %ebx
    00003ceb: 	leaq	0x160(%rsp), %r14
    00003cf3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3417:
    00003cf8: 	movq	0x46758(%rsp), %rdx
    00003d00: 	movq	(%rbp), %rax
    00003d04: 	leaq	_ZTV15WorkerSubClass2ImE+16(%rip), %rdi
    00003d0b: 	movq	%r14, %rcx
    00003d0e: 	movq	0x10(%rsp), %rsi
    00003d13: 	movq	%rdi, 0x160(%rsp)
    00003d1b: 	movq	%rbx, %rdi
    00003d1e: 	movq	%rdx, (%rbp)
    00003d22: 	xorl	%edx, %edx
    00003d24: 	movq	%rax, 0x168(%rsp)
    00003d2c: 	callq	_ZN9benchmark9__sift_inIP15WorkerSubClass2ImES2_EEvlT_lT0_ # Offset: 15660
    00003d31: 	subq	$0x10, %rbp
    00003d35: 	subq	$0x1, %rbx
    00003d39: 	jne	.Ltmp3417 # Offset: 15673
    00003d3b: 	leaq	0x46760(%rsp), %rbx
    00003d43: 	jmp	.Ltmp3418 # Offset: 15683
    00003d45: 	nopl	(%rax) # Size: 3
.Ltmp3422:
    00003d48: 	movq	-0x20(%rbx), %rax
    00003d4c: 	movq	-0x8(%rbx), %rbp
    00003d50: 	movq	(%rax), %rax
    00003d53: 	cmpq	%r12, %rax
    00003d56: 	jne	.Ltmp3419 # Offset: 15702
.Ltmp3423:
    00003d58: 	movq	-0x18(%rbx), %rax
    00003d5c: 	cmpq	%rax, %rbp
    00003d5f: 	jb	.Ltmp3420 # Offset: 15711
.Ltmp3424:
    00003d61: 	cmpq	(%rsp), %rbx
    00003d65: 	je	.Ltmp3421 # Offset: 15717
.Ltmp3418:
    00003d67: 	leaq	-0x10(%rbx), %r14
    00003d6b: 	movq	%rbx, %rdi
    00003d6e: 	movq	(%rbx), %rax
    00003d71: 	addq	$0x10, %rbx
    00003d75: 	movq	(%rax), %rax
    00003d78: 	cmpq	%r12, %rax
    00003d7b: 	je	.Ltmp3422 # Offset: 15739
    00003d7d: 	callq	*%rax # Offset: 15741
    00003d7f: 	movq	%rax, %rbp
    00003d82: 	movq	-0x20(%rbx), %rax
    00003d86: 	movq	(%rax), %rax
    00003d89: 	cmpq	%r12, %rax
    00003d8c: 	je	.Ltmp3423 # Offset: 15756
    00003d8e: 	nop # Size: 2
.Ltmp3419:
    00003d90: 	movq	%r14, %rdi
    00003d93: 	callq	*%rax # Offset: 15763
    00003d95: 	cmpq	%rax, %rbp
    00003d98: 	jae	.Ltmp3424 # Offset: 15768
.Ltmp3420:
    00003d9a: 	movq	0x230(%rsp), %rdx
    00003da2: 	leaq	DATAat0x1d1cf(%rip), %rsi
    00003da9: 	movl	$0x1, %edi
    00003dae: 	xorl	%eax, %eax
    00003db0: 	callq	__printf_chk@PLT # Offset: 15792
.Ltmp3421:
    00003db5: 	addl	$0x1, %r15d
    00003db9: 	cmpl	iterations(%rip), %r15d
    00003dc0: 	jl	.Ltmp3425 # Offset: 15808
.Ltmp3414:
    00003dc6: 	callq	clock@PLT # Offset: 15814
    00003dcb: 	movq	0x30(%rsp), %rdi
    00003dd0: 	pxor	%xmm0, %xmm0
    00003dd4: 	movq	%rax, end_time(%rip)
    00003ddb: 	subq	start_time(%rip), %rax
    00003de2: 	cvtsi2sd	%rax, %xmm0
    00003de7: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00003def: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 15855
    00003df4: 	movq	0x230(%rsp), %rdi
    00003dfc: 	cmpq	0x98(%rsp), %rdi
    00003e04: 	je	.Ltmp3426 # Offset: 15876
    00003e06: 	movq	0x240(%rsp), %rax
    00003e0e: 	leaq	0x1(%rax), %rsi
    00003e12: 	callq	_ZdlPvm@PLT # Offset: 15890
.Ltmp3426:
    00003e17: 	movq	0xa8(%rsp), %rsi
    00003e1f: 	movq	0x30(%rsp), %rdi
    00003e24: 	leaq	DATAat0x1d8d8(%rip), %rdx
    00003e2b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 15915
    00003e30: 	callq	clock@PLT # Offset: 15920
    00003e35: 	xorl	%r13d, %r13d
    00003e38: 	leaq	0x522c8(%rsp), %r14
    00003e40: 	leaq	0x180(%rsp), %r12
    00003e48: 	movq	%rax, start_time(%rip)
    00003e4f: 	movl	iterations(%rip), %eax
    00003e55: 	testl	%eax, %eax
    00003e57: 	jle	.Ltmp3427 # Offset: 15959
    00003e5d: 	nopl	(%rax) # Size: 3
.Ltmp3431:
    00003e60: 	movq	(%rsp), %rdx
    00003e64: 	movq	0x78(%rsp), %rax
    00003e69: 	movq	0xb8(%rsp), %rsi
    00003e71: 	nopl	(%rax) # Size: 7
.Ltmp3428:
    00003e78: 	movq	0x8(%rax), %rcx
    00003e7c: 	addq	$0x10, %rax
    00003e80: 	addq	$0x10, %rdx
    00003e84: 	movq	%rcx, -0x8(%rdx)
    00003e88: 	cmpq	%rsi, %rax
    00003e8b: 	jne	.Ltmp3428 # Offset: 16011
    00003e8d: 	movq	%r14, %rbp
    00003e90: 	movl	$0x3e7, %ebx
    00003e95: 	nopl	(%rax) # Size: 3
.Ltmp3429:
    00003e98: 	leaq	_ZTV15WorkerSubClass3ImE+16(%rip), %rsi
    00003e9f: 	movq	(%rbp), %rax
    00003ea3: 	movq	0x60(%rsp), %rcx
    00003ea8: 	movq	%rbx, %rdx
    00003eab: 	movq	%rsi, 0x190(%rsp)
    00003eb3: 	movq	(%rsp), %rsi
    00003eb7: 	movl	$0x7d0, %edi
    00003ebc: 	movq	%rax, 0x198(%rsp)
    00003ec4: 	callq	_ZN9benchmark9__sift_inIP15WorkerSubClass3ImES2_EEvlT_lT0_ # Offset: 16068
    00003ec9: 	subq	$0x1, %rbx
    00003ecd: 	subq	$0x10, %rbp
    00003ed1: 	cmpq	$-0x1, %rbx
    00003ed5: 	jne	.Ltmp3429 # Offset: 16085
    00003ed7: 	leaq	0x56148(%rsp), %rbp
    00003edf: 	movl	$0x7cf, %ebx
    00003ee4: 	nopl	(%rax) # Size: 4
.Ltmp3430:
    00003ee8: 	movq	0x4e458(%rsp), %rdx
    00003ef0: 	movq	(%rbp), %rax
    00003ef4: 	leaq	_ZTV15WorkerSubClass3ImE+16(%rip), %rdi
    00003efb: 	movq	%r12, %rcx
    00003efe: 	movq	(%rsp), %rsi
    00003f02: 	movq	%rdi, 0x180(%rsp)
    00003f0a: 	movq	%rbx, %rdi
    00003f0d: 	movq	%rdx, (%rbp)
    00003f11: 	xorl	%edx, %edx
    00003f13: 	movq	%rax, 0x188(%rsp)
    00003f1b: 	callq	_ZN9benchmark9__sift_inIP15WorkerSubClass3ImES2_EEvlT_lT0_ # Offset: 16155
    00003f20: 	subq	$0x10, %rbp
    00003f24: 	subq	$0x1, %rbx
    00003f28: 	jne	.Ltmp3430 # Offset: 16168
    00003f2a: 	movq	0x30(%rsp), %rdx
    00003f2f: 	movq	0x38(%rsp), %rsi
    00003f34: 	movq	(%rsp), %rdi
    00003f38: 	callq	_Z13verify_sortedIP15WorkerSubClass3ImEEvT_S3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 16184
    00003f3d: 	addl	$0x1, %r13d
    00003f41: 	cmpl	iterations(%rip), %r13d
    00003f48: 	jl	.Ltmp3431 # Offset: 16200
.Ltmp3427:
    00003f4e: 	callq	clock@PLT # Offset: 16206
    00003f53: 	movq	0x30(%rsp), %rdi
    00003f58: 	pxor	%xmm0, %xmm0
    00003f5c: 	movq	%rax, end_time(%rip)
    00003f63: 	subq	start_time(%rip), %rax
    00003f6a: 	cvtsi2sd	%rax, %xmm0
    00003f6f: 	divsd	DATAat0x1dec0(%rip), %xmm0
    00003f77: 	callq	_Z17record_std_resultdRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 16247
    00003f7c: 	movq	0x230(%rsp), %rdi
    00003f84: 	cmpq	0x98(%rsp), %rdi
    00003f8c: 	je	.Ltmp3432 # Offset: 16268
    00003f8e: 	movq	0x240(%rsp), %rax
    00003f96: 	leaq	0x1(%rax), %rsi
    00003f9a: 	callq	_ZdlPvm@PLT # Offset: 16282
.Ltmp3432:
    00003f9f: 	movq	0xa8(%rsp), %rsi
    00003fa7: 	movq	0x30(%rsp), %rdi
    00003fac: 	leaq	DATAat0x1d288(%rip), %rdx
    00003fb3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 16307
    00003fb8: 	movl	iterations(%rip), %edx
    00003fbe: 	movl	$0x1, %r8d
    00003fc4: 	movl	$0x1, %ecx
    00003fc9: 	movq	0x230(%rsp), %rdi
    00003fd1: 	movl	$0x7d0, %esi
    00003fd6: 	callq	_Z9summarizePKciiii # Offset: 16342
    00003fdb: 	movl	0xdc(%rsp), %eax
    00003fe2: 	movq	0x230(%rsp), %rdi
    00003fea: 	movl	%eax, iterations(%rip)
    00003ff0: 	cmpq	0x98(%rsp), %rdi
    00003ff8: 	je	.Ltmp3433 # Offset: 16376
    00003ffa: 	movq	0x240(%rsp), %rax
    00004002: 	leaq	0x1(%rax), %rsi
    00004006: 	callq	_ZdlPvm@PLT # Offset: 16390
.Ltmp3433:
    0000400b: 	movq	0x210(%rsp), %rdi
    00004013: 	leaq	0x220(%rsp), %rax
    0000401b: 	cmpq	%rax, %rdi
    0000401e: 	je	.Ltmp3434 # Offset: 16414
    00004020: 	movq	0x220(%rsp), %rax
    00004028: 	leaq	0x1(%rax), %rsi
    0000402c: 	callq	_ZdlPvm@PLT # Offset: 16428
.Ltmp3434:
    00004031: 	movq	0x1f0(%rsp), %rdi
    00004039: 	leaq	0x200(%rsp), %rax
    00004041: 	cmpq	%rax, %rdi
    00004044: 	je	.Ltmp3435 # Offset: 16452
    00004046: 	movq	0x200(%rsp), %rax
    0000404e: 	leaq	0x1(%rax), %rsi
    00004052: 	callq	_ZdlPvm@PLT # Offset: 16466
.Ltmp3435:
    00004057: 	movq	0x1d0(%rsp), %rdi
    0000405f: 	leaq	0x1e0(%rsp), %rax
    00004067: 	cmpq	%rax, %rdi
    0000406a: 	je	.Ltmp3436 # Offset: 16490
    0000406c: 	movq	0x1e0(%rsp), %rax
    00004074: 	leaq	0x1(%rax), %rsi
    00004078: 	callq	_ZdlPvm@PLT # Offset: 16504
.Ltmp3436:
    0000407d: 	movq	0x1b0(%rsp), %rdi
    00004085: 	leaq	0x1c0(%rsp), %rax
    0000408d: 	cmpq	%rax, %rdi
    00004090: 	je	.Ltmp3437 # Offset: 16528
    00004092: 	movq	0x1c0(%rsp), %rax
    0000409a: 	leaq	0x1(%rax), %rsi
    0000409e: 	callq	_ZdlPvm@PLT # Offset: 16542
.Ltmp3437:
    000040a3: 	movq	0x84f58(%rsp), %rax
    000040ab: 	subq	%fs:0x28, %rax
    000040b4: 	jne	.Ltmp3438 # Offset: 16564
    000040ba: 	addq	$0x84f68, %rsp
    000040c1: 	popq	%rbx
    000040c2: 	popq	%rbp
    000040c3: 	popq	%r12
    000040c5: 	popq	%r13
    000040c7: 	popq	%r14
    000040c9: 	popq	%r15
    000040cb: 	retq # Offset: 16587
    000040cc: 	nopl	(%rax) # Size: 4
.Ltmp3229:
    000040d0: 	movq	0x18(%rsp), %r13
    000040d5: 	addq	$0x10, %r15
    000040d9: 	movq	%r12, 0x8(%r13)
    000040dd: 	cmpq	0x20(%rsp), %r15
    000040e2: 	jne	.Ltmp3232 # Offset: 16610
    000040e8: 	jmp	.Ltmp3439 # Offset: 16616
    000040ed: 	nopl	(%rax) # Size: 3
.Ltmp3209:
    000040f0: 	movq	0x28(%rsp), %r13
    000040f5: 	addq	$0x10, %r15
    000040f9: 	movq	%r12, 0x8(%r13)
    000040fd: 	cmpq	0x8(%rsp), %r15
    00004102: 	jne	.Ltmp3212 # Offset: 16642
    00004108: 	jmp	.Ltmp3440 # Offset: 16648
    0000410d: 	nopl	(%rax) # Size: 3
.Ltmp3219:
    00004110: 	movq	0x8(%rsp), %r13
    00004115: 	addq	$0x10, %r15
    00004119: 	movq	%r12, 0x8(%r13)
    0000411d: 	cmpq	0x18(%rsp), %r15
    00004122: 	jne	.Ltmp3222 # Offset: 16674
    00004128: 	jmp	.Ltmp3441 # Offset: 16680
    0000412d: 	nopl	(%rax) # Size: 3
.Ltmp3239:
    00004130: 	movq	0x20(%rsp), %r14
    00004135: 	addq	$0x10, %r15
    00004139: 	movq	%r13, 0x8(%r14)
    0000413d: 	cmpq	0x10(%rsp), %r15
    00004142: 	jne	.Ltmp3242 # Offset: 16706
    00004148: 	jmp	.Ltmp3442 # Offset: 16712
    0000414d: 	nopl	(%rax) # Size: 3
.Ltmp3256:
    00004150: 	movq	0x10(%rsp), %r14
    00004155: 	addq	$0x10, %r15
    00004159: 	movq	%r13, 0x8(%r14)
    0000415d: 	cmpq	(%rsp), %r15
    00004161: 	jne	.Ltmp3259 # Offset: 16737
    00004167: 	jmp	.Ltmp3443 # Offset: 16743
    0000416c: 	nopl	(%rax) # Size: 4
.Ltmp3263:
    00004170: 	callq	*%rax # Offset: 16752
    00004172: 	movq	%rax, %r13
    00004175: 	jmp	.Ltmp3444 # Offset: 16757
    0000417a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3272:
    00004180: 	movq	(%rsp), %r13
    00004184: 	addq	$0x10, %r15
    00004188: 	movq	%r12, 0x8(%r13)
    0000418c: 	cmpq	0x38(%rsp), %r15
    00004191: 	jne	.Ltmp3275 # Offset: 16785
    00004197: 	jmp	.Ltmp3445 # Offset: 16791
    0000419c: 	nopl	(%rax) # Size: 4
.Ltmp3298:
    000041a0: 	callq	*%rax # Offset: 16800
    000041a2: 	movq	%rax, %r12
    000041a5: 	jmp	.Ltmp3446 # Offset: 16805
.Ltmp3162:
    000041aa: 	subsd	DATAat0x1ded8(%rip), %xmm0
    000041b2: 	cvttsd2si	%xmm0, %rcx
    000041b7: 	xorq	%r15, %rcx
    000041ba: 	jmp	.Ltmp3447 # Offset: 16826
.Ltmp3156:
    000041bf: 	subsd	DATAat0x1ded8(%rip), %xmm0
    000041c7: 	cvttsd2si	%xmm0, %rcx
    000041cc: 	xorq	%r15, %rcx
    000041cf: 	jmp	.Ltmp3448 # Offset: 16847
.Ltmp3150:
    000041d4: 	subsd	DATAat0x1ded8(%rip), %xmm0
    000041dc: 	cvttsd2si	%xmm0, %rdx
    000041e1: 	xorq	%r15, %rdx
    000041e4: 	jmp	.Ltmp3449 # Offset: 16868
.Ltmp3144:
    000041e9: 	subsd	DATAat0x1ded8(%rip), %xmm0
    000041f1: 	cvttsd2si	%xmm0, %rcx
    000041f6: 	xorq	%r15, %rcx
    000041f9: 	jmp	.Ltmp3450 # Offset: 16889
.Ltmp3138:
    000041fe: 	subsd	DATAat0x1ded8(%rip), %xmm0
    00004206: 	cvttsd2si	%xmm0, %rcx
    0000420b: 	xorq	%r15, %rcx
    0000420e: 	jmp	.Ltmp3451 # Offset: 16910
.Ltmp3132:
    00004213: 	subsd	DATAat0x1ded8(%rip), %xmm0
    0000421b: 	cvttsd2si	%xmm0, %rcx
    00004220: 	xorq	%r15, %rcx
    00004223: 	jmp	.Ltmp3452 # Offset: 16931
.Ltmp3126:
    00004228: 	subsd	DATAat0x1ded8(%rip), %xmm1
    00004230: 	cvttsd2si	%xmm1, %rdx
    00004235: 	xorq	%r12, %rdx
    00004238: 	jmp	.Ltmp3453 # Offset: 16952
.Ltmp3120:
    0000423d: 	subsd	DATAat0x1ded8(%rip), %xmm1
    00004245: 	cvttsd2si	%xmm1, %rdx
    0000424a: 	xorq	%r12, %rdx
    0000424d: 	jmp	.Ltmp3454 # Offset: 16973
.Ltmp3114:
    00004252: 	subsd	DATAat0x1ded8(%rip), %xmm1
    0000425a: 	cvttsd2si	%xmm1, %rdx
    0000425f: 	xorq	%r12, %rdx
    00004262: 	jmp	.Ltmp3455 # Offset: 16994
.Ltmp3108:
    00004267: 	subsd	DATAat0x1ded8(%rip), %xmm1
    0000426f: 	cvttsd2si	%xmm1, %rdx
    00004274: 	xorq	%r12, %rdx
    00004277: 	jmp	.Ltmp3456 # Offset: 17015
.Ltmp3102:
    0000427c: 	subsd	DATAat0x1ded8(%rip), %xmm1
    00004284: 	cvttsd2si	%xmm1, %rdx
    00004289: 	xorq	%r12, %rdx
    0000428c: 	jmp	.Ltmp3457 # Offset: 17036
.Ltmp3189:
    00004291: 	movq	0x230(%rsp), %rdx
    00004299: 	movq	%r14, %rsi
    0000429c: 	movl	$0x1, %edi
    000042a1: 	xorl	%eax, %eax
    000042a3: 	callq	__printf_chk@PLT # Offset: 17059
    000042a8: 	movl	iterations(%rip), %r13d
    000042af: 	addl	$0x1, %ebx
    000042b2: 	cmpl	%r13d, %ebx
    000042b5: 	jl	.Ltmp3191 # Offset: 17077
    000042bb: 	jmp	.Ltmp3185 # Offset: 17083
.Ltmp3088:
    000042c0: 	subsd	DATAat0x1ded8(%rip), %xmm0
    000042c8: 	cvttsd2si	%xmm0, %rax
    000042cd: 	btcq	$0x3f, %rax
    000042d2: 	jmp	.Ltmp3458 # Offset: 17106
.Ltmp3438:
    000042d7: 	callq	__stack_chk_fail@PLT # Offset: 17111
    000042dc: 	endbr64
.Ltmp3460:
    000042e0: 	movq	%rax, %rbp
    000042e3: 	jmp	.Ltmp3459 # Offset: 17123
    000042e5: 	endbr64
    000042e9: 	jmp	.Ltmp3460 # Offset: 17129
    000042eb: 	endbr64
    000042ef: 	jmp	.Ltmp3460 # Offset: 17135
    000042f1: 	endbr64
    000042f5: 	jmp	.Ltmp3460 # Offset: 17141
    000042f7: 	endbr64
    000042fb: 	jmp	.Ltmp3460 # Offset: 17147
    000042fd: 	endbr64
    00004301: 	movq	%rax, %rbp
    00004304: 	jmp	.Ltmp3461 # Offset: 17156
    00004306: 	endbr64
.Ltmp3463:
    0000430a: 	movq	%rax, %rbp
    0000430d: 	jmp	.Ltmp3462 # Offset: 17165
    00004312: 	endbr64
    00004316: 	jmp	.Ltmp3463 # Offset: 17174
    00004318: 	endbr64
    0000431c: 	jmp	.Ltmp3463 # Offset: 17180
.Ltmp3459:
    0000431e: 	movq	0x230(%rsp), %rdi
    00004326: 	cmpq	0x98(%rsp), %rdi
    0000432e: 	je	.Ltmp3461 # Offset: 17198
    00004330: 	movq	0x240(%rsp), %rax
    00004338: 	leaq	0x1(%rax), %rsi
    0000433c: 	callq	_ZdlPvm@PLT # Offset: 17212
.Ltmp3461:
    00004341: 	movq	0x210(%rsp), %rdi
    00004349: 	leaq	0x220(%rsp), %rax
    00004351: 	cmpq	%rax, %rdi
    00004354: 	je	.Ltmp3464 # Offset: 17236
    00004356: 	movq	0x220(%rsp), %rax
    0000435e: 	leaq	0x1(%rax), %rsi
    00004362: 	callq	_ZdlPvm@PLT # Offset: 17250
.Ltmp3464:
    00004367: 	movq	0x1f0(%rsp), %rdi
    0000436f: 	leaq	0x200(%rsp), %rax
    00004377: 	cmpq	%rax, %rdi
    0000437a: 	je	.Ltmp3465 # Offset: 17274
    0000437c: 	movq	0x200(%rsp), %rax
    00004384: 	leaq	0x1(%rax), %rsi
    00004388: 	callq	_ZdlPvm@PLT # Offset: 17288
.Ltmp3465:
    0000438d: 	movq	0x1d0(%rsp), %rdi
    00004395: 	leaq	0x1e0(%rsp), %rax
    0000439d: 	cmpq	%rax, %rdi
    000043a0: 	je	.Ltmp3466 # Offset: 17312
    000043a2: 	movq	0x1e0(%rsp), %rax
    000043aa: 	leaq	0x1(%rax), %rsi
    000043ae: 	callq	_ZdlPvm@PLT # Offset: 17326
.Ltmp3466:
    000043b3: 	movq	0x1b0(%rsp), %rdi
    000043bb: 	leaq	0x1c0(%rsp), %rax
    000043c3: 	cmpq	%rax, %rdi
    000043c6: 	je	.Ltmp3467 # Offset: 17350
    000043c8: 	movq	0x1c0(%rsp), %rax
    000043d0: 	leaq	0x1(%rax), %rsi
    000043d4: 	callq	_ZdlPvm@PLT # Offset: 17364
.Ltmp3467:
    000043d9: 	movq	%rbp, %rdi
    000043dc: 	callq	_Unwind_Resume@PLT # Offset: 17372
    000043e1: 	endbr64
    000043e5: 	jmp	.Ltmp3463 # Offset: 17381
.Ltmp3462:
    000043ea: 	movq	0x230(%rsp), %rdi
    000043f2: 	cmpq	0x98(%rsp), %rdi
    000043fa: 	je	.Ltmp3464 # Offset: 17402
    00004400: 	movq	0x240(%rsp), %rax
    00004408: 	leaq	0x1(%rax), %rsi
    0000440c: 	callq	_ZdlPvm@PLT # Offset: 17420
    00004411: 	jmp	.Ltmp3464 # Offset: 17425
    00004416: 	endbr64
    0000441a: 	jmp	.Ltmp3460 # Offset: 17434
    0000441f: 	endbr64
    00004423: 	jmp	.Ltmp3460 # Offset: 17443
    00004428: 	endbr64
    0000442c: 	jmp	.Ltmp3460 # Offset: 17452
    00004431: 	endbr64
    00004435: 	jmp	.Ltmp3460 # Offset: 17461
    0000443a: 	endbr64
    0000443e: 	jmp	.Ltmp3460 # Offset: 17470
    00004443: 	endbr64
    00004447: 	jmp	.Ltmp3460 # Offset: 17479
    0000444c: 	endbr64
    00004450: 	jmp	.Ltmp3460 # Offset: 17488
    00004455: 	endbr64
    00004459: 	jmp	.Ltmp3463 # Offset: 17497
    0000445e: 	endbr64
.Ltmp3469:
    00004462: 	movq	%rax, %rbp
    00004465: 	jmp	.Ltmp3468 # Offset: 17509
    00004467: 	endbr64
    0000446b: 	jmp	.Ltmp3469 # Offset: 17515
    0000446d: 	endbr64
    00004471: 	movq	%rax, %rbp
    00004474: 	jmp	.Ltmp3470 # Offset: 17524
    00004476: 	endbr64
    0000447a: 	movq	%rax, %rbp
    0000447d: 	jmp	.Ltmp3465 # Offset: 17533
.Ltmp3468:
    00004482: 	movq	0x230(%rsp), %rdi
    0000448a: 	cmpq	0x98(%rsp), %rdi
    00004492: 	je	.Ltmp3465 # Offset: 17554
.Ltmp3471:
    00004498: 	movq	0x240(%rsp), %rax
    000044a0: 	leaq	0x1(%rax), %rsi
    000044a4: 	callq	_ZdlPvm@PLT # Offset: 17572
    000044a9: 	jmp	.Ltmp3465 # Offset: 17577
.Ltmp3470:
    000044ae: 	movq	0x230(%rsp), %rdi
    000044b6: 	leaq	0x240(%rsp), %rax
    000044be: 	cmpq	%rax, %rdi
    000044c1: 	jne	.Ltmp3471 # Offset: 17601
    000044c3: 	jmp	.Ltmp3465 # Offset: 17603
    000044c8: 	endbr64
.Ltmp3473:
    000044cc: 	movq	%rax, %rbp
    000044cf: 	jmp	.Ltmp3472 # Offset: 17615
    000044d1: 	endbr64
    000044d5: 	jmp	.Ltmp3473 # Offset: 17621
    000044d7: 	endbr64
    000044db: 	jmp	.Ltmp3473 # Offset: 17627
    000044dd: 	endbr64
    000044e1: 	jmp	.Ltmp3473 # Offset: 17633
.Ltmp3472:
    000044e3: 	movq	0x234d0(%rsp), %rdi
    000044eb: 	cmpq	%r13, %rdi
    000044ee: 	je	.Ltmp3466 # Offset: 17646
.Ltmp3475:
    000044f4: 	movq	0x234e0(%rsp), %rax
    000044fc: 	leaq	0x1(%rax), %rsi
    00004500: 	callq	_ZdlPvm@PLT # Offset: 17664
    00004505: 	jmp	.Ltmp3466 # Offset: 17669
    0000450a: 	endbr64
    0000450e: 	jmp	.Ltmp3473 # Offset: 17678
    00004510: 	endbr64
    00004514: 	jmp	.Ltmp3473 # Offset: 17684
    00004516: 	endbr64
    0000451a: 	jmp	.Ltmp3473 # Offset: 17690
    0000451c: 	endbr64
    00004520: 	movq	%rax, %rbp
    00004523: 	jmp	.Ltmp3474 # Offset: 17699
    00004525: 	endbr64
    00004529: 	movq	%rax, %rbp
    0000452c: 	jmp	.Ltmp3466 # Offset: 17708
.Ltmp3474:
    00004531: 	movq	0x234d0(%rsp), %rdi
    00004539: 	leaq	0x234e0(%rsp), %rax
    00004541: 	cmpq	%rax, %rdi
    00004544: 	jne	.Ltmp3475 # Offset: 17732
    00004546: 	jmp	.Ltmp3466 # Offset: 17734
    0000454b: 	endbr64
    0000454f: 	jmp	.Ltmp3473 # Offset: 17743
    00004554: 	endbr64
    00004558: 	jmp	.Ltmp3473 # Offset: 17752
    0000455d: 	endbr64
    00004561: 	jmp	.Ltmp3473 # Offset: 17761
    00004566: 	endbr64
    0000456a: 	jmp	.Ltmp3469 # Offset: 17770
    0000456f: 	endbr64
    00004573: 	jmp	.Ltmp3469 # Offset: 17779
    00004578: 	endbr64
    0000457c: 	jmp	.Ltmp3469 # Offset: 17788
    00004581: 	endbr64
    00004585: 	jmp	.Ltmp3469 # Offset: 17797
    0000458a: 	endbr64
    0000458e: 	jmp	.Ltmp3469 # Offset: 17806
    00004593: 	endbr64
    00004597: 	jmp	.Ltmp3469 # Offset: 17815
    0000459c: 	endbr64
    000045a0: 	jmp	.Ltmp3469 # Offset: 17824
    000045a5: 	endbr64
    000045a9: 	jmp	.Ltmp3469 # Offset: 17833
    000045ae: 	endbr64
    000045b2: 	jmp	.Ltmp3463 # Offset: 17842
    000045b7: 	endbr64
    000045bb: 	jmp	.Ltmp3463 # Offset: 17851
    000045c0: 	endbr64
    000045c4: 	jmp	.Ltmp3463 # Offset: 17860
    000045c9: 	endbr64
    000045cd: 	movq	%rax, %rbp
    000045d0: 	jmp	.Ltmp3464 # Offset: 17872
    000045d5: 	endbr64
    000045d9: 	jmp	.Ltmp3463 # Offset: 17881
    000045de: 	endbr64
    000045e2: 	jmp	.Ltmp3463 # Offset: 17890
    000045e7: 	endbr64
    000045eb: 	jmp	.Ltmp3463 # Offset: 17899
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeImEvv"

Binary Function "_fini" after disassembly {
  Number      : 171
  State       : disassembled
  Address     : 0x1c5d0
  Size        : 0xd
  MaxSize     : 0xd
  Offset      : 0x1c5d0
  Section     : .fini
  Orc Section : .local.text._fini
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0170:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	addq	$0x8, %rsp
    0000000c: 	retq # Offset: 12
DWARF CFI Instructions:
    <empty>
End of Function "_fini"

BOLT-INFO: 0 out of 172 functions in the binary (0.0%) have non-empty execution profile
BOLT-INFO: 1097 instructions were shortened
BOLT-INFO: removed 666 empty blocks
BOLT-INFO: patched build-id (flipped last bit)
BOLT: 165 out of 199 functions were overwritten.
BOLT-INFO: rewriting .eh_frame_hdr in-place
BOLT-INFO: setting _end to 0x204bd8
