BOLT-INFO: shared object or position-independent executable detected
BOLT-INFO: Target architecture: x86_64
BOLT-INFO: BOLT version: <unknown>
BOLT-INFO: first alloc address is 0x0
BOLT-INFO: creating new program header table at address 0x200000, offset 0x200000
BOLT-INFO: enabling lite mode
BOLT-WARNING: ignoring symbol __bss_start at 0x31028, which lies outside .bss
BOLT-WARNING: split function detected on input : _GLOBAL__sub_I_results.cold
Binary Function "_init" after disassembly {
  Number      : 1
  State       : disassembled
  Address     : 0x1000
  Size        : 0x1b
  MaxSize     : 0x1b
  Offset      : 0x1000
  Section     : .init
  Orc Section : .local.text._init
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB00:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	movq	DATAat0x30ff0(%rip), %rax
    0000000f: 	testq	%rax, %rax
    00000012: 	je	.Ltmp0 # Offset: 18
    00000014: 	callq	*%rax # Offset: 20
.Ltmp0:
    00000016: 	addq	$0x8, %rsp
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_init"

Binary Function "main" after disassembly {
  Number      : 3
  State       : disassembled
  Address     : 0x1430
  Size        : 0xce
  MaxSize     : 0xd0
  Offset      : 0x1430
  Section     : .text
  Orc Section : .local.text.main
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB02:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	pushq	%rbp
    0000000b: 	pushq	%rbx
    0000000c: 	testl	%edi, %edi
    0000000e: 	jle	.Ltmp1 # Offset: 14
    00000014: 	leal	-0x1(%rdi), %eax
    00000017: 	movl	%edi, %r13d
    0000001a: 	movq	%rsi, %r14
    0000001d: 	movq	%rsi, %rbx
    00000020: 	leaq	0x8(%rsi,%rax,8), %r12
    00000025: 	leaq	DATAat0x2d5e6(%rip), %rbp
    0000002c: 	nopl	(%rax) # Size: 4
.Ltmp2:
    00000030: 	movq	(%rbx), %rdx
    00000033: 	movq	%rbp, %rsi
    00000036: 	movl	$0x1, %edi
    0000003b: 	xorl	%eax, %eax
    0000003d: 	addq	$0x8, %rbx
    00000041: 	callq	__printf_chk@PLT # Offset: 65
    00000046: 	cmpq	%r12, %rbx
    00000049: 	jne	.Ltmp2 # Offset: 73
    0000004b: 	xorl	%eax, %eax
    0000004d: 	leaq	DATAat0x2d5cc(%rip), %rsi
    00000054: 	movl	$0x1, %edi
    00000059: 	callq	__printf_chk@PLT # Offset: 89
    0000005e: 	cmpl	$0x1, %r13d
    00000062: 	jg	.Ltmp3 # Offset: 98
.Ltmp4:
    00000064: 	callq	_Z11TestOneTypeIiEvv # Offset: 100
    00000069: 	callq	_Z11TestOneTypeIfEvv # Offset: 105
    0000006e: 	shrq	iterations(%rip)
    00000075: 	callq	_Z11TestOneTypeIdEvv # Offset: 117
    0000007a: 	popq	%rbx
    0000007b: 	xorl	%eax, %eax
    0000007d: 	popq	%rbp
    0000007e: 	popq	%r12
    00000080: 	popq	%r13
    00000082: 	popq	%r14
    00000084: 	retq # Offset: 132
.Ltmp3:
    00000085: 	movq	0x8(%r14), %rdi
    00000089: 	movl	$0xa, %edx
    0000008e: 	xorl	%esi, %esi
    00000090: 	callq	strtol@PLT # Offset: 144
    00000095: 	cltq
    00000097: 	movq	%rax, iterations(%rip)
    0000009e: 	cmpl	$0x2, %r13d
    000000a2: 	jle	.Ltmp4 # Offset: 162
    000000a4: 	movq	0x10(%r14), %rdi
    000000a8: 	xorl	%esi, %esi
    000000aa: 	callq	strtod@PLT # Offset: 170
    000000af: 	movsd	%xmm0, init_value(%rip)
    000000b7: 	jmp	.Ltmp4 # Offset: 183
.Ltmp1:
    000000b9: 	leaq	DATAat0x2d5cc(%rip), %rsi
    000000c0: 	movl	$0x1, %edi
    000000c5: 	xorl	%eax, %eax
    000000c7: 	callq	__printf_chk@PLT # Offset: 199
    000000cc: 	jmp	.Ltmp4 # Offset: 204
DWARF CFI Instructions:
    <empty>
End of Function "main"

Binary Function "_start" after disassembly {
  Number      : 5
  State       : disassembled
  Address     : 0x15e0
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x15e0
  Section     : .text
  Orc Section : .local.text._start
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB04:
    00000000: 	endbr64
    00000004: 	xorl	%ebp, %ebp
    00000006: 	movq	%rdx, %r9
    00000009: 	popq	%rsi
    0000000a: 	movq	%rsp, %rdx
    0000000d: 	andq	$-0x10, %rsp
    00000011: 	pushq	%rax
    00000012: 	pushq	%rsp
    00000013: 	xorl	%r8d, %r8d
    00000016: 	xorl	%ecx, %ecx
    00000018: 	leaq	main(%rip), %rdi
    0000001f: 	callq	*DATAat0x30fe0(%rip) # Offset: 31
    00000025: 	hlt
DWARF CFI Instructions:
    <empty>
End of Function "_start"

Binary Function "deregister_tm_clones/1(*2)" after disassembly {
  All names   : deregister_tm_clones/1
                deregister_tm_clones/crtstuff.c/1
  Number      : 6
  State       : disassembled
  Address     : 0x1610
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x1610
  Section     : .text
  Orc Section : .local.text.deregister_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB05:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rax
    0000000e: 	cmpq	%rdi, %rax
    00000011: 	je	.Ltmp5 # Offset: 17
    00000013: 	movq	DATAat0x30fe8(%rip), %rax
    0000001a: 	testq	%rax, %rax
    0000001d: 	je	.Ltmp5 # Offset: 29
    0000001f: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 31
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp5:
    00000028: 	retq # Offset: 40
    00000029: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "deregister_tm_clones/1(*2)"

Binary Function "register_tm_clones/1(*2)" after disassembly {
  All names   : register_tm_clones/1
                register_tm_clones/crtstuff.c/1
  Number      : 7
  State       : disassembled
  Address     : 0x1640
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x1640
  Section     : .text
  Orc Section : .local.text.register_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB06:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rsi
    0000000e: 	subq	%rdi, %rsi
    00000011: 	movq	%rsi, %rax
    00000014: 	shrq	$0x3f, %rsi
    00000018: 	sarq	$0x3, %rax
    0000001c: 	addq	%rax, %rsi
    0000001f: 	sarq	%rsi
    00000022: 	je	.Ltmp6 # Offset: 34
    00000024: 	movq	DATAat0x30ff8(%rip), %rax
    0000002b: 	testq	%rax, %rax
    0000002e: 	je	.Ltmp6 # Offset: 46
    00000030: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 48
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp6:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "register_tm_clones/1(*2)"

Binary Function "__do_global_dtors_aux/1(*2)" after disassembly {
  All names   : __do_global_dtors_aux/1
                __do_global_dtors_aux/crtstuff.c/1
  Number      : 8
  State       : disassembled
  Address     : 0x1680
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x1680
  Section     : .text
  Orc Section : .local.text.__do_global_dtors_aux/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB07:
    00000000: 	endbr64
    00000004: 	cmpb	$0x0, "completed.0/1"(%rip)
    0000000b: 	jne	.Ltmp7 # Offset: 11
    0000000d: 	pushq	%rbp
    0000000e: 	cmpq	$0x0, __cxa_finalize@GOT(%rip)
    00000016: 	movq	%rsp, %rbp
    00000019: 	je	.Ltmp8 # Offset: 25
    0000001b: 	movq	__dso_handle(%rip), %rdi
    00000022: 	callq	__cxa_finalize@PLT # Offset: 34
.Ltmp8:
    00000027: 	callq	"deregister_tm_clones/1" # Offset: 39
    0000002c: 	movb	$0x1, "completed.0/1"(%rip)
    00000033: 	popq	%rbp
    00000034: 	retq # Offset: 52
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp7:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "__do_global_dtors_aux/1(*2)"

Binary Function "frame_dummy/1(*2)" after disassembly {
  All names   : frame_dummy/1
                frame_dummy/crtstuff.c/1
  Number      : 9
  State       : disassembled
  Address     : 0x16c0
  Size        : 0x10
  MaxSize     : 0x10
  Offset      : 0x16c0
  Section     : .text
  Orc Section : .local.text.frame_dummy/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB08:
    00000000: 	endbr64
    00000004: 	jmp	"register_tm_clones/1" # TAILCALL  # Offset: 4
    00000009: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "frame_dummy/1(*2)"

Binary Function "_ZN28matmul_JKI_blocked_unrolled3IdEclEPKdS2_Pdmm.isra.0/1(*2)" after disassembly {
  All names   : _ZN28matmul_JKI_blocked_unrolled3IdEclEPKdS2_Pdmm.isra.0/1
                _ZN28matmul_JKI_blocked_unrolled3IdEclEPKdS2_Pdmm.isra.0/matrix_multiply.cpp/1
  Number      : 10
  State       : disassembled
  Address     : 0x16d0
  Size        : 0x111c
  MaxSize     : 0x1120
  Offset      : 0x16d0
  Section     : .text
  Orc Section : .local.text._ZN28matmul_JKI_blocked_unrolled3IdEclEPKdS2_Pdmm.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB09:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	subq	$0x140, %rsp
    00000011: 	movq	%rdi, 0xe8(%rsp)
    00000019: 	movq	%rdx, -0x58(%rsp)
    0000001e: 	movq	%rcx, 0xb0(%rsp)
    00000026: 	movq	%r8, 0x68(%rsp)
    0000002b: 	testq	%r8, %r8
    0000002e: 	je	.Ltmp9 # Offset: 46
    00000034: 	testq	%rcx, %rcx
    00000037: 	je	.Ltmp9 # Offset: 55
    0000003d: 	leaq	(,%r8,8), %rdi
    00000045: 	movq	%rsi, %r14
    00000048: 	movq	%r8, 0x90(%rsp)
    00000050: 	movdqa	DATAat0x2d980(%rip), %xmm14
    00000059: 	movq	%rdi, 0x78(%rsp)
    0000005e: 	leaq	(,%r8,4), %rdi
    00000066: 	movq	%rsi, %rcx
    00000069: 	movq	%rdi, 0x40(%rsp)
    0000006e: 	leaq	(%r8,%r8), %rdi
    00000072: 	imulq	$0x3e8, %r8, %rax
    00000079: 	movq	%rdi, 0xa0(%rsp)
    00000081: 	movq	%r8, %rdi
    00000084: 	movq	$0x0, 0xf0(%rsp)
    00000090: 	shlq	$0x5, %rdi
    00000094: 	movq	%rdi, 0x48(%rsp)
    00000099: 	movq	%rax, 0x130(%rsp)
.Ltmp30:
    000000a1: 	movq	0xf0(%rsp), %rsi
    000000a9: 	movq	0x68(%rsp), %rdi
    000000ae: 	movq	$0x4, -0x18(%rsp)
    000000b7: 	movq	$0x0, -0x20(%rsp)
    000000c0: 	movq	%rsi, 0x88(%rsp)
    000000c8: 	subq	$-0x80, %rsi
    000000cc: 	movq	%rdi, %rax
    000000cf: 	cmpq	%rdi, %rsi
    000000d2: 	movq	%rsi, 0xf0(%rsp)
    000000da: 	cmovbeq	%rsi, %rax
    000000de: 	leaq	-0x3(%rax), %rdx
    000000e2: 	movq	%rax, 0x98(%rsp)
    000000ea: 	shlq	$0x3, %rax
    000000ee: 	movq	%rdx, 0x38(%rsp)
    000000f3: 	movq	-0x58(%rsp), %rdx
    000000f8: 	movq	%rdx, 0xf8(%rsp)
    00000100: 	movq	0xe8(%rsp), %rdx
    00000108: 	addq	%rax, %rdx
    0000010b: 	movq	%rdx, 0x100(%rsp)
    00000113: 	leaq	-0x400(,%rsi,8), %rdx
    0000011b: 	movq	0x78(%rsp), %rsi
    00000120: 	subq	%rax, %rdx
    00000123: 	movq	0x90(%rsp), %rax
    0000012b: 	addq	0xa0(%rsp), %rax
    00000133: 	movq	%rdx, 0xb8(%rsp)
    0000013b: 	leaq	(%rsi,%rcx), %rdx
    0000013f: 	subq	$0x20, %rcx
    00000143: 	movq	%rax, 0xa8(%rsp)
    0000014b: 	leaq	(%rsi,%rdx), %rax
    0000014f: 	addq	%rax, %rsi
    00000152: 	subq	$0x20, %rax
    00000156: 	movq	%rcx, 0x128(%rsp)
    0000015e: 	leaq	-0x20(%rdx), %rcx
    00000162: 	movq	%rax, 0x118(%rsp)
    0000016a: 	leaq	-0x20(%rsi), %rax
    0000016e: 	movq	%rax, 0x120(%rsp)
    00000176: 	leaq	(%rdi,%rdi,2), %rax
    0000017a: 	movq	%rsi, 0x108(%rsp)
    00000182: 	movq	%rcx, 0x110(%rsp)
    0000018a: 	movq	%rax, 0xe0(%rsp)
.Ltmp29:
    00000192: 	movq	-0x18(%rsp), %rcx
    00000197: 	movq	0x68(%rsp), %rdi
    0000019c: 	movq	$0x0, -0x40(%rsp)
    000001a5: 	movq	0xf8(%rsp), %rsi
    000001ad: 	movq	$0x0, 0x80(%rsp)
    000001b9: 	leaq	0x380(%rcx), %rax
    000001c0: 	cmpq	%rdi, %rax
    000001c3: 	movq	%rsi, 0x10(%rsp)
    000001c8: 	cmovaq	%rdi, %rax
    000001cc: 	movq	%rax, %rdi
    000001cf: 	movq	%rax, -0x28(%rsp)
    000001d4: 	leaq	-0x3(%rax), %rax
    000001d8: 	movq	%rax, 0x8(%rsp)
    000001dd: 	leaq	0x40(%rsi), %rax
    000001e1: 	movq	%rax, 0x28(%rsp)
    000001e6: 	leaq	(,%rcx,8), %rax
    000001ee: 	movq	0x128(%rsp), %rcx
    000001f6: 	addq	%rax, %rcx
    000001f9: 	movq	%rcx, 0xc0(%rsp)
    00000201: 	movq	0x110(%rsp), %rcx
    00000209: 	addq	%rax, %rcx
    0000020c: 	movq	%rcx, 0xc8(%rsp)
    00000214: 	movq	0x118(%rsp), %rcx
    0000021c: 	addq	%rax, %rcx
    0000021f: 	addq	0x120(%rsp), %rax
    00000227: 	movq	%rcx, 0xd0(%rsp)
    0000022f: 	movq	-0x20(%rsp), %rcx
    00000234: 	movq	%rax, 0xd8(%rsp)
    0000023c: 	movq	%rdi, %rax
    0000023f: 	subq	%rcx, %rax
    00000242: 	subq	$0x4, %rax
    00000246: 	movq	%rax, 0x30(%rsp)
    0000024b: 	shrq	$0x2, %rax
    0000024f: 	addq	$0x1, %rax
    00000253: 	movq	%rax, %rdi
    00000256: 	movq	%rax, 0x50(%rsp)
    0000025b: 	andq	$-0x2, %rax
    0000025f: 	leaq	(%rcx,%rax,4), %r13
    00000263: 	movq	%rax, 0x58(%rsp)
    00000268: 	shrq	%rdi
    0000026b: 	leaq	0x4(%r13), %rax
    0000026f: 	movq	%rdi, 0x60(%rsp)
    00000274: 	movq	%rax, -0x60(%rsp)
    00000279: 	movq	0x100(%rsp), %rax
    00000281: 	movq	%rax, 0x70(%rsp)
    00000286: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp28:
    00000290: 	movq	0x38(%rsp), %rsi
    00000295: 	cmpq	%rsi, 0x88(%rsp)
    0000029d: 	jae	.Ltmp10 # Offset: 669
    000002a3: 	movq	0xa8(%rsp), %r12
    000002ab: 	movq	0xb8(%rsp), %rax
    000002b3: 	addq	0x70(%rsp), %rax
    000002b8: 	movq	-0x58(%rsp), %rdx
    000002bd: 	movq	%rax, -0x8(%rsp)
    000002c2: 	movq	0xa0(%rsp), %rax
    000002ca: 	movq	%r12, %rbp
    000002cd: 	subq	0xe0(%rsp), %rbp
    000002d5: 	leaq	(%rbp,%rax), %r15
    000002da: 	movq	-0x40(%rsp), %rax
    000002df: 	addq	%r13, %rax
    000002e2: 	shlq	$0x3, %rax
    000002e6: 	leaq	(%rdx,%rax), %rdi
    000002ea: 	leaq	0x8(%rdx,%rax), %rsi
    000002ef: 	leaq	0x10(%rdx,%rax), %rcx
    000002f4: 	leaq	0x18(%rdx,%rax), %rdx
    000002f9: 	movq	0xd8(%rsp), %rax
    00000301: 	movq	%rax, (%rsp)
    00000305: 	movq	0xd0(%rsp), %rax
    0000030d: 	movq	%rax, -0x10(%rsp)
    00000312: 	movq	0xc8(%rsp), %rax
    0000031a: 	movq	%rax, -0x50(%rsp)
    0000031f: 	movq	0xc0(%rsp), %rax
    00000327: 	movq	%rax, -0x48(%rsp)
    0000032c: 	movq	0x90(%rsp), %rax
    00000334: 	movq	%rax, -0x70(%rsp)
    00000339: 	movq	0x88(%rsp), %rax
    00000341: 	movq	%rax, -0x38(%rsp)
    00000346: 	movq	%r12, %rax
    00000349: 	movq	%r15, %r12
    0000034c: 	movq	%rax, %r15
    0000034f: 	nop # Size: 1
.Ltmp18:
    00000350: 	movq	-0x8(%rsp), %rax
    00000355: 	movq	-0x20(%rsp), %rbx
    0000035a: 	movsd	(%rax), %xmm7
    0000035e: 	movsd	0x8(%rax), %xmm2
    00000363: 	movsd	0x10(%rax), %xmm6
    00000368: 	movsd	0x18(%rax), %xmm5
    0000036d: 	movq	0x8(%rsp), %rax
    00000372: 	cmpq	%rbx, %rax
    00000375: 	jbe	.Ltmp11 # Offset: 885
    0000037b: 	cmpq	$-0x4, %rax
    0000037f: 	movq	-0x48(%rsp), %r10
    00000384: 	movq	0x10(%rsp), %rbx
    00000389: 	setbe	%r8b
    0000038d: 	cmpq	$0x2, -0x18(%rsp)
    00000393: 	movq	0x28(%rsp), %r11
    00000398: 	seta	%al
    0000039b: 	andl	%r8d, %eax
    0000039e: 	cmpq	$0x3, 0x30(%rsp)
    000003a4: 	seta	%r8b
    000003a8: 	andl	%r8d, %eax
    000003ab: 	leaq	0x40(%r10), %r8
    000003af: 	cmpq	%r8, %rbx
    000003b2: 	setae	%r8b
    000003b6: 	cmpq	%r10, %r11
    000003b9: 	movq	-0x10(%rsp), %r10
    000003be: 	setbe	%r9b
    000003c2: 	orl	%r9d, %r8d
    000003c5: 	movq	-0x50(%rsp), %r9
    000003ca: 	andl	%eax, %r8d
    000003cd: 	leaq	0x40(%r9), %rax
    000003d1: 	cmpq	%rax, %rbx
    000003d4: 	setae	%al
    000003d7: 	cmpq	%r9, %r11
    000003da: 	setbe	%r9b
    000003de: 	orl	%r9d, %eax
    000003e1: 	andl	%r8d, %eax
    000003e4: 	leaq	0x40(%r10), %r8
    000003e8: 	cmpq	%r8, %rbx
    000003eb: 	setae	%r8b
    000003ef: 	cmpq	%r10, %r11
    000003f2: 	setbe	%r9b
    000003f6: 	orl	%r9d, %r8d
    000003f9: 	testb	%r8b, %al
    000003fc: 	je	.Ltmp12 # Offset: 1020
    00000402: 	movq	(%rsp), %r9
    00000406: 	movq	%r9, %rax
    00000409: 	addq	$0x40, %rax
    0000040d: 	cmpq	%rax, %rbx
    00000410: 	setae	%r8b
    00000414: 	cmpq	%r9, %r11
    00000417: 	setbe	%al
    0000041a: 	orb	%r8b, %al
    0000041d: 	je	.Ltmp12 # Offset: 1053
    00000423: 	movq	%rdx, -0x68(%rsp)
    00000428: 	movapd	%xmm7, %xmm11
    0000042d: 	movq	%r9, %r11
    00000430: 	movq	%rbx, %rax
    00000433: 	movq	-0x20(%rsp), %xmm13
    0000043a: 	movapd	%xmm2, %xmm10
    0000043f: 	movapd	%xmm6, %xmm9
    00000444: 	movapd	%xmm5, %xmm8
    00000449: 	movq	-0x50(%rsp), %r9
    0000044e: 	movq	-0x48(%rsp), %r8
    00000453: 	unpcklpd	%xmm11, %xmm11
    00000458: 	unpcklpd	%xmm10, %xmm10
    0000045d: 	movq	0x60(%rsp), %rdx
    00000462: 	unpcklpd	%xmm9, %xmm9
    00000467: 	unpcklpd	%xmm8, %xmm8
    0000046c: 	xorl	%ebx, %ebx
    0000046e: 	movhps	-0x18(%rsp), %xmm13
    00000474: 	nopl	(%rax) # Size: 4
.Ltmp13:
    00000478: 	movupd	0x10(%r8), %xmm1
    0000047e: 	movupd	0x10(%r9), %xmm0
    00000484: 	addq	$0x1, %rbx
    00000488: 	movdqa	%xmm13, %xmm12
    0000048d: 	addq	$0x40, %rax
    00000491: 	movupd	0x20(%r9), %xmm3
    00000497: 	movupd	-0x30(%rax), %xmm4
    0000049c: 	paddq	%xmm14, %xmm13
    000004a1: 	mulpd	%xmm10, %xmm0
    000004a6: 	movupd	(%r9), %xmm15
    000004ab: 	paddq	DATAat0x2d990(%rip), %xmm12
    000004b4: 	addq	$0x40, %r8
    000004b8: 	mulpd	%xmm11, %xmm1
    000004bd: 	addq	$0x40, %r9
    000004c1: 	addq	$0x40, %r10
    000004c5: 	addq	$0x40, %r11
    000004c9: 	mulpd	%xmm10, %xmm3
    000004ce: 	mulpd	%xmm10, %xmm15
    000004d3: 	addpd	%xmm0, %xmm1
    000004d7: 	movupd	-0x30(%r10), %xmm0
    000004dd: 	mulpd	%xmm9, %xmm0
    000004e2: 	addpd	%xmm0, %xmm1
    000004e6: 	movupd	-0x30(%r11), %xmm0
    000004ec: 	mulpd	%xmm8, %xmm0
    000004f1: 	addpd	%xmm0, %xmm1
    000004f5: 	movupd	-0x20(%r8), %xmm0
    000004fb: 	mulpd	%xmm11, %xmm0
    00000500: 	addpd	%xmm4, %xmm1
    00000504: 	movupd	-0x20(%rax), %xmm4
    00000509: 	addpd	%xmm3, %xmm0
    0000050d: 	movupd	-0x20(%r10), %xmm3
    00000513: 	mulpd	%xmm9, %xmm3
    00000518: 	addpd	%xmm3, %xmm0
    0000051c: 	movupd	-0x20(%r11), %xmm3
    00000522: 	mulpd	%xmm8, %xmm3
    00000527: 	addpd	%xmm3, %xmm0
    0000052b: 	movupd	-0x10(%r8), %xmm3
    00000531: 	mulpd	%xmm11, %xmm3
    00000536: 	addpd	%xmm4, %xmm0
    0000053a: 	movupd	-0x10(%r9), %xmm4
    00000540: 	mulpd	%xmm10, %xmm4
    00000545: 	addpd	%xmm3, %xmm4
    00000549: 	movupd	-0x10(%r10), %xmm3
    0000054f: 	mulpd	%xmm9, %xmm3
    00000554: 	addpd	%xmm4, %xmm3
    00000558: 	movupd	-0x10(%r11), %xmm4
    0000055e: 	mulpd	%xmm8, %xmm4
    00000563: 	addpd	%xmm4, %xmm3
    00000567: 	movupd	-0x10(%rax), %xmm4
    0000056c: 	addpd	%xmm4, %xmm3
    00000570: 	movupd	-0x40(%r8), %xmm4
    00000576: 	mulpd	%xmm11, %xmm4
    0000057b: 	addpd	%xmm4, %xmm15
    00000580: 	movupd	-0x40(%r10), %xmm4
    00000586: 	mulpd	%xmm9, %xmm4
    0000058b: 	addpd	%xmm15, %xmm4
    00000590: 	movupd	-0x40(%r11), %xmm15
    00000596: 	movups	%xmm1, -0x30(%rax)
    0000059a: 	movups	%xmm0, -0x20(%rax)
    0000059e: 	mulpd	%xmm8, %xmm15
    000005a3: 	movups	%xmm3, -0x10(%rax)
    000005a7: 	addpd	%xmm15, %xmm4
    000005ac: 	movupd	-0x40(%rax), %xmm15
    000005b2: 	addpd	%xmm15, %xmm4
    000005b7: 	movups	%xmm4, -0x40(%rax)
    000005bb: 	cmpq	%rdx, %rbx
    000005be: 	jb	.Ltmp13 # Offset: 1470
    000005c4: 	movhlps	%xmm12, %xmm3
    000005c8: 	movq	-0x68(%rsp), %rdx
    000005cd: 	movq	0x58(%rsp), %r11
    000005d2: 	movq	%xmm3, %rax
    000005d7: 	cmpq	%r11, 0x50(%rsp)
    000005dc: 	je	.Ltmp14 # Offset: 1500
    000005e2: 	movq	-0x70(%rsp), %rax
    000005e7: 	leaq	(%rbp,%r13), %r10
    000005ec: 	leaq	(%r12,%r13), %r8
    000005f0: 	movsd	(%r14,%r10,8), %xmm0
    000005f6: 	leaq	(%rax,%r13), %r9
    000005fa: 	leaq	(%r15,%r13), %rax
    000005fe: 	movsd	(%r14,%r9,8), %xmm1
    00000604: 	mulsd	%xmm7, %xmm0
    00000608: 	mulsd	%xmm2, %xmm1
    0000060c: 	addsd	%xmm1, %xmm0
    00000610: 	movsd	(%r14,%r8,8), %xmm1
    00000616: 	mulsd	%xmm6, %xmm1
    0000061a: 	addsd	%xmm1, %xmm0
    0000061e: 	movsd	(%r14,%rax,8), %xmm1
    00000624: 	mulsd	%xmm5, %xmm1
    00000628: 	addsd	%xmm1, %xmm0
    0000062c: 	addsd	(%rdi), %xmm0
    00000630: 	movsd	%xmm0, (%rdi)
    00000634: 	movsd	0x8(%r14,%r10,8), %xmm0
    0000063b: 	movsd	0x8(%r14,%r9,8), %xmm1
    00000642: 	mulsd	%xmm7, %xmm0
    00000646: 	mulsd	%xmm2, %xmm1
    0000064a: 	addsd	%xmm1, %xmm0
    0000064e: 	movsd	0x8(%r14,%r8,8), %xmm1
    00000655: 	mulsd	%xmm6, %xmm1
    00000659: 	addsd	%xmm1, %xmm0
    0000065d: 	movsd	0x8(%r14,%rax,8), %xmm1
    00000664: 	mulsd	%xmm5, %xmm1
    00000668: 	addsd	%xmm1, %xmm0
    0000066c: 	addsd	(%rsi), %xmm0
    00000670: 	movsd	%xmm0, (%rsi)
    00000674: 	movsd	0x10(%r14,%r10,8), %xmm0
    0000067b: 	movsd	0x10(%r14,%r9,8), %xmm1
    00000682: 	mulsd	%xmm7, %xmm0
    00000686: 	mulsd	%xmm2, %xmm1
    0000068a: 	addsd	%xmm1, %xmm0
    0000068e: 	movsd	0x10(%r14,%r8,8), %xmm1
    00000695: 	mulsd	%xmm6, %xmm1
    00000699: 	addsd	%xmm1, %xmm0
    0000069d: 	movsd	0x10(%r14,%rax,8), %xmm1
    000006a4: 	mulsd	%xmm5, %xmm1
    000006a8: 	addsd	%xmm1, %xmm0
    000006ac: 	addsd	(%rcx), %xmm0
    000006b0: 	movsd	%xmm0, (%rcx)
    000006b4: 	movsd	0x18(%r14,%r10,8), %xmm0
    000006bb: 	movsd	0x18(%r14,%r9,8), %xmm1
    000006c2: 	mulsd	%xmm7, %xmm0
    000006c6: 	mulsd	%xmm2, %xmm1
    000006ca: 	addsd	%xmm1, %xmm0
    000006ce: 	movsd	0x18(%r14,%r8,8), %xmm1
    000006d5: 	mulsd	%xmm6, %xmm1
    000006d9: 	addsd	%xmm1, %xmm0
    000006dd: 	movsd	0x18(%r14,%rax,8), %xmm1
    000006e4: 	movq	-0x60(%rsp), %rax
    000006e9: 	mulsd	%xmm5, %xmm1
    000006ed: 	addsd	%xmm1, %xmm0
    000006f1: 	addsd	(%rdx), %xmm0
    000006f5: 	movsd	%xmm0, (%rdx)
.Ltmp14:
    000006f9: 	cmpq	%rax, -0x28(%rsp)
    000006fe: 	jbe	.Ltmp15 # Offset: 1790
    00000704: 	movq	-0x40(%rsp), %r11
    00000709: 	movq	-0x28(%rsp), %rbx
    0000070e: 	leaq	0x1(%r12,%rax), %r10
    00000713: 	shlq	$0x3, %r10
    00000717: 	leaq	(%rax,%r11), %r8
    0000071b: 	movq	-0x58(%rsp), %r11
    00000720: 	subq	%rax, %rbx
    00000723: 	movq	%rbx, -0x30(%rsp)
    00000728: 	leaq	0x1(%rbp,%rax), %rbx
    0000072d: 	leaq	(%r11,%r8,8), %r11
    00000731: 	shlq	$0x3, %rbx
    00000735: 	movq	%r11, -0x68(%rsp)
    0000073a: 	movq	-0x70(%rsp), %r11
    0000073f: 	leaq	0x1(%r11,%rax), %r11
    00000744: 	leaq	(,%r11,8), %r9
    0000074c: 	movq	%r9, %r11
    0000074f: 	leaq	0x1(%rax,%r15), %r9
    00000754: 	leaq	(,%r9,8), %r8
    0000075c: 	movq	%r11, %r9
    0000075f: 	movq	%r11, 0x18(%rsp)
    00000764: 	addq	%r14, %r9
    00000767: 	cmpq	%r9, -0x68(%rsp)
    0000076c: 	leaq	(%r14,%rbx), %r9
    00000770: 	setne	0x27(%rsp)
    00000775: 	cmpq	%r9, -0x68(%rsp)
    0000077a: 	movzbl	0x27(%rsp), %r11d
    00000780: 	setne	%r9b
    00000784: 	andl	%r11d, %r9d
    00000787: 	cmpq	$0x1, -0x30(%rsp)
    0000078d: 	setne	0x27(%rsp)
    00000792: 	movzbl	0x27(%rsp), %r11d
    00000798: 	andl	%r11d, %r9d
    0000079b: 	leaq	(%r14,%r10), %r11
    0000079f: 	cmpq	%r11, -0x68(%rsp)
    000007a4: 	setne	0x27(%rsp)
    000007a9: 	movzbl	0x27(%rsp), %r11d
    000007af: 	testb	%r9b, %r11b
    000007b2: 	je	.Ltmp16 # Offset: 1970
    000007b8: 	leaq	(%r14,%r8), %r9
    000007bc: 	cmpq	%r9, -0x68(%rsp)
    000007c1: 	je	.Ltmp16 # Offset: 1985
    000007c7: 	movq	0x18(%rsp), %r9
    000007cc: 	leaq	-0x8(%r14,%rbx), %rbx
    000007d1: 	movapd	%xmm7, %xmm4
    000007d5: 	movapd	%xmm2, %xmm8
    000007da: 	movupd	(%rbx), %xmm0
    000007de: 	unpcklpd	%xmm4, %xmm4
    000007e2: 	movapd	%xmm6, %xmm3
    000007e6: 	movapd	%xmm5, %xmm1
    000007ea: 	leaq	-0x8(%r14,%r9), %r11
    000007ef: 	unpcklpd	%xmm8, %xmm8
    000007f4: 	leaq	-0x8(%r14,%r10), %r10
    000007f9: 	movupd	(%r11), %xmm9
    000007fe: 	mulpd	%xmm4, %xmm0
    00000802: 	unpcklpd	%xmm3, %xmm3
    00000806: 	leaq	-0x8(%r14,%r8), %r9
    0000080b: 	unpcklpd	%xmm1, %xmm1
    0000080f: 	movq	-0x68(%rsp), %r8
    00000814: 	mulpd	%xmm8, %xmm9
    00000819: 	movupd	(%r8), %xmm12
    0000081e: 	addpd	%xmm9, %xmm0
    00000823: 	movupd	(%r10), %xmm9
    00000828: 	mulpd	%xmm3, %xmm9
    0000082d: 	addpd	%xmm9, %xmm0
    00000832: 	movupd	(%r9), %xmm9
    00000837: 	mulpd	%xmm1, %xmm9
    0000083c: 	addpd	%xmm9, %xmm0
    00000841: 	addpd	%xmm12, %xmm0
    00000846: 	movups	%xmm0, (%r8)
    0000084a: 	movq	-0x30(%rsp), %r8
    0000084f: 	shrq	%r8
    00000852: 	cmpq	$0x1, %r8
    00000856: 	je	.Ltmp17 # Offset: 2134
    00000858: 	movupd	0x10(%r11), %xmm0
    0000085e: 	mulpd	%xmm8, %xmm0
    00000863: 	movupd	0x10(%rbx), %xmm8
    00000869: 	movq	-0x68(%rsp), %rbx
    0000086e: 	mulpd	%xmm8, %xmm4
    00000873: 	addpd	%xmm4, %xmm0
    00000877: 	movupd	0x10(%r10), %xmm4
    0000087d: 	mulpd	%xmm4, %xmm3
    00000881: 	addpd	%xmm3, %xmm0
    00000885: 	movupd	0x10(%r9), %xmm3
    0000088b: 	mulpd	%xmm3, %xmm1
    0000088f: 	movupd	0x10(%rbx), %xmm3
    00000894: 	addpd	%xmm1, %xmm0
    00000898: 	addpd	%xmm3, %xmm0
    0000089c: 	movups	%xmm0, 0x10(%rbx)
.Ltmp17:
    000008a0: 	movq	-0x30(%rsp), %rbx
    000008a5: 	movq	%rbx, %r8
    000008a8: 	andq	$-0x2, %r8
    000008ac: 	addq	%r8, %rax
    000008af: 	cmpq	%rbx, %r8
    000008b2: 	je	.Ltmp15 # Offset: 2226
    000008b4: 	movq	-0x40(%rsp), %rbx
    000008b9: 	leaq	(%rax,%rbx), %r8
    000008bd: 	movq	-0x58(%rsp), %rbx
    000008c2: 	leaq	(%rbx,%r8,8), %r8
    000008c6: 	movq	-0x70(%rsp), %rbx
    000008cb: 	leaq	(%rbx,%rax), %r9
    000008cf: 	mulsd	(%r14,%r9,8), %xmm2
    000008d5: 	leaq	(%rbp,%rax), %r9
    000008da: 	mulsd	(%r14,%r9,8), %xmm7
    000008e0: 	leaq	(%r12,%rax), %r9
    000008e4: 	addq	%r15, %rax
    000008e7: 	mulsd	(%r14,%r9,8), %xmm6
    000008ed: 	mulsd	(%r14,%rax,8), %xmm5
    000008f3: 	addsd	%xmm7, %xmm2
    000008f7: 	addsd	%xmm6, %xmm2
    000008fb: 	addsd	%xmm2, %xmm5
    000008ff: 	addsd	(%r8), %xmm5
    00000904: 	movsd	%xmm5, (%r8)
.Ltmp15:
    00000909: 	movq	0x40(%rsp), %rax
    0000090e: 	addq	$0x4, -0x38(%rsp)
    00000914: 	addq	%rax, -0x70(%rsp)
    00000919: 	movq	-0x38(%rsp), %rbx
    0000091e: 	addq	%rax, %rbp
    00000921: 	addq	%rax, %r12
    00000924: 	addq	%rax, %r15
    00000927: 	addq	$0x20, -0x8(%rsp)
    0000092d: 	movq	0x48(%rsp), %rax
    00000932: 	addq	%rax, -0x48(%rsp)
    00000937: 	addq	%rax, -0x50(%rsp)
    0000093c: 	addq	%rax, -0x10(%rsp)
    00000941: 	addq	%rax, (%rsp)
    00000945: 	cmpq	0x38(%rsp), %rbx
    0000094a: 	jb	.Ltmp18 # Offset: 2378
    00000950: 	movq	%rbx, %rdi
.Ltmp33:
    00000953: 	cmpq	%rdi, 0x98(%rsp)
    0000095b: 	jbe	.Ltmp19 # Offset: 2395
    00000961: 	movq	-0x40(%rsp), %rsi
    00000966: 	movq	0xe8(%rsp), %rcx
    0000096e: 	movq	%rdi, %rax
    00000971: 	imulq	0x68(%rsp), %rdi
    00000977: 	movq	-0x60(%rsp), %r9
    0000097c: 	addq	%rsi, %rax
    0000097f: 	leaq	(%rcx,%rax,8), %r12
    00000983: 	movq	-0x20(%rsp), %rax
    00000988: 	movq	-0x58(%rsp), %rcx
    0000098d: 	movq	%rdi, %rdx
    00000990: 	addq	%rdi, %rax
    00000993: 	leaq	(%r14,%rax,8), %rbp
    00000997: 	leaq	(%r13,%rsi), %rax
    0000099c: 	shlq	$0x3, %rax
    000009a0: 	leaq	(%rcx,%rax), %r8
    000009a4: 	leaq	0x8(%rcx,%rax), %rdi
    000009a9: 	leaq	0x10(%rcx,%rax), %rsi
    000009ae: 	leaq	0x18(%rcx,%rax), %rcx
    000009b3: 	movq	0x60(%rsp), %rax
    000009b8: 	movq	%rax, -0x70(%rsp)
.Ltmp27:
    000009bd: 	movq	0x8(%rsp), %rax
    000009c2: 	movq	-0x20(%rsp), %rbx
    000009c7: 	movsd	(%r12), %xmm0
    000009cd: 	cmpq	%rbx, %rax
    000009d0: 	jbe	.Ltmp20 # Offset: 2512
    000009d6: 	cmpq	$0x2, -0x18(%rsp)
    000009dc: 	seta	%r10b
    000009e0: 	cmpq	$-0x4, %rax
    000009e4: 	setbe	%al
    000009e7: 	andl	%r10d, %eax
    000009ea: 	cmpq	$0x3, 0x30(%rsp)
    000009f0: 	seta	%r10b
    000009f4: 	testb	%r10b, %al
    000009f7: 	je	.Ltmp21 # Offset: 2551
    000009fd: 	movq	0x10(%rsp), %r11
    00000a02: 	leaq	0x40(%rbp), %rax
    00000a06: 	cmpq	%r11, %rax
    00000a09: 	setbe	%r10b
    00000a0d: 	cmpq	0x28(%rsp), %rbp
    00000a12: 	setae	%al
    00000a15: 	orb	%r10b, %al
    00000a18: 	je	.Ltmp21 # Offset: 2584
    00000a1e: 	movapd	%xmm0, %xmm5
    00000a22: 	movq	%rbx, %xmm7
    00000a27: 	movq	%r11, %rax
    00000a2a: 	movq	%rbp, %r10
    00000a2d: 	movq	-0x70(%rsp), %r15
    00000a32: 	unpcklpd	%xmm5, %xmm5
    00000a36: 	movhps	-0x18(%rsp), %xmm7
    00000a3b: 	xorl	%r11d, %r11d
    00000a3e: 	nop # Size: 2
.Ltmp22:
    00000a40: 	movupd	0x10(%r10), %xmm3
    00000a46: 	movupd	0x10(%rax), %xmm2
    00000a4b: 	addq	$0x1, %r11
    00000a4f: 	movdqa	%xmm7, %xmm6
    00000a53: 	movupd	0x30(%r10), %xmm1
    00000a59: 	movupd	0x20(%rax), %xmm4
    00000a5e: 	paddq	%xmm14, %xmm7
    00000a63: 	addq	$0x40, %rax
    00000a67: 	mulpd	%xmm5, %xmm3
    00000a6b: 	movupd	-0x40(%rax), %xmm13
    00000a71: 	paddq	DATAat0x2d990(%rip), %xmm6
    00000a79: 	addq	$0x40, %r10
    00000a7d: 	mulpd	%xmm5, %xmm1
    00000a81: 	addpd	%xmm2, %xmm3
    00000a85: 	movupd	-0x20(%r10), %xmm2
    00000a8b: 	mulpd	%xmm5, %xmm2
    00000a8f: 	addpd	%xmm4, %xmm2
    00000a93: 	movupd	-0x10(%rax), %xmm4
    00000a98: 	addpd	%xmm4, %xmm1
    00000a9c: 	movupd	-0x40(%r10), %xmm4
    00000aa2: 	movups	%xmm3, -0x30(%rax)
    00000aa6: 	movups	%xmm2, -0x20(%rax)
    00000aaa: 	mulpd	%xmm5, %xmm4
    00000aae: 	movups	%xmm1, -0x10(%rax)
    00000ab2: 	addpd	%xmm13, %xmm4
    00000ab7: 	movups	%xmm4, -0x40(%rax)
    00000abb: 	cmpq	%r15, %r11
    00000abe: 	jb	.Ltmp22 # Offset: 2750
    00000ac0: 	movhlps	%xmm6, %xmm7
    00000ac3: 	movq	%r15, -0x70(%rsp)
    00000ac8: 	movq	0x58(%rsp), %r15
    00000acd: 	movq	%xmm7, %rax
    00000ad2: 	cmpq	%r15, 0x50(%rsp)
    00000ad7: 	je	.Ltmp23 # Offset: 2775
    00000ad9: 	leaq	(%r13,%rdx), %rax
    00000ade: 	movsd	(%r14,%rax,8), %xmm1
    00000ae4: 	mulsd	%xmm0, %xmm1
    00000ae8: 	addsd	(%r8), %xmm1
    00000aed: 	movsd	%xmm1, (%r8)
    00000af2: 	movsd	0x8(%r14,%rax,8), %xmm1
    00000af9: 	mulsd	%xmm0, %xmm1
    00000afd: 	addsd	(%rdi), %xmm1
    00000b01: 	movsd	%xmm1, (%rdi)
    00000b05: 	movsd	0x10(%r14,%rax,8), %xmm1
    00000b0c: 	mulsd	%xmm0, %xmm1
    00000b10: 	addsd	(%rsi), %xmm1
    00000b14: 	movsd	%xmm1, (%rsi)
    00000b18: 	movsd	0x18(%r14,%rax,8), %xmm1
    00000b1f: 	movq	%r9, %rax
    00000b22: 	mulsd	%xmm0, %xmm1
    00000b26: 	addsd	(%rcx), %xmm1
    00000b2a: 	movsd	%xmm1, (%rcx)
.Ltmp23:
    00000b2e: 	cmpq	%rax, -0x28(%rsp)
    00000b33: 	jbe	.Ltmp24 # Offset: 2867
    00000b39: 	movq	-0x40(%rsp), %r15
    00000b3e: 	movq	-0x28(%rsp), %rbx
    00000b43: 	leaq	(%rax,%r15), %r10
    00000b47: 	movq	-0x58(%rsp), %r15
    00000b4c: 	subq	%rax, %rbx
    00000b4f: 	leaq	(%r15,%r10,8), %r11
    00000b53: 	leaq	0x1(%rax,%rdx), %r10
    00000b58: 	shlq	$0x3, %r10
    00000b5c: 	leaq	(%r14,%r10), %r15
    00000b60: 	cmpq	%r15, %r11
    00000b63: 	je	.Ltmp25 # Offset: 2915
    00000b69: 	cmpq	$0x1, %rbx
    00000b6d: 	je	.Ltmp25 # Offset: 2925
    00000b73: 	leaq	-0x8(%r14,%r10), %r10
    00000b78: 	movapd	%xmm0, %xmm2
    00000b7c: 	movupd	(%r11), %xmm6
    00000b81: 	movq	%rbx, %r15
    00000b84: 	movupd	(%r10), %xmm1
    00000b89: 	unpcklpd	%xmm2, %xmm2
    00000b8d: 	shrq	%r15
    00000b90: 	mulpd	%xmm2, %xmm1
    00000b94: 	addpd	%xmm6, %xmm1
    00000b98: 	movups	%xmm1, (%r11)
    00000b9c: 	cmpq	$0x1, %r15
    00000ba0: 	je	.Ltmp26 # Offset: 2976
    00000ba2: 	movupd	0x10(%r10), %xmm1
    00000ba8: 	movupd	0x10(%r11), %xmm7
    00000bae: 	mulpd	%xmm2, %xmm1
    00000bb2: 	addpd	%xmm7, %xmm1
    00000bb6: 	movups	%xmm1, 0x10(%r11)
.Ltmp26:
    00000bbb: 	movq	%rbx, %r10
    00000bbe: 	andq	$-0x2, %r10
    00000bc2: 	addq	%r10, %rax
    00000bc5: 	cmpq	%rbx, %r10
    00000bc8: 	je	.Ltmp24 # Offset: 3016
    00000bca: 	movq	-0x40(%rsp), %rbx
    00000bcf: 	leaq	(%rax,%rbx), %r10
    00000bd3: 	movq	-0x58(%rsp), %rbx
    00000bd8: 	addq	%rdx, %rax
    00000bdb: 	mulsd	(%r14,%rax,8), %xmm0
    00000be1: 	leaq	(%rbx,%r10,8), %r10
    00000be5: 	addsd	(%r10), %xmm0
    00000bea: 	movsd	%xmm0, (%r10)
.Ltmp24:
    00000bef: 	addq	$0x8, %r12
    00000bf3: 	addq	0x68(%rsp), %rdx
    00000bf8: 	addq	0x78(%rsp), %rbp
    00000bfd: 	cmpq	0x70(%rsp), %r12
    00000c02: 	jne	.Ltmp27 # Offset: 3074
.Ltmp19:
    00000c08: 	movq	0x78(%rsp), %rsi
    00000c0d: 	movq	0x68(%rsp), %rcx
    00000c12: 	addq	$0x1, 0x80(%rsp)
    00000c1b: 	movq	0x80(%rsp), %rax
    00000c23: 	addq	%rsi, 0x70(%rsp)
    00000c28: 	addq	%rcx, -0x40(%rsp)
    00000c2d: 	addq	%rsi, 0x10(%rsp)
    00000c32: 	addq	%rsi, 0x28(%rsp)
    00000c37: 	cmpq	0xb0(%rsp), %rax
    00000c3f: 	jne	.Ltmp28 # Offset: 3135
    00000c45: 	addq	$0x384, -0x20(%rsp)
    00000c4e: 	movq	-0x20(%rsp), %rax
    00000c53: 	addq	$0x384, -0x18(%rsp)
    00000c5c: 	addq	$0x1c20, 0xf8(%rsp)
    00000c68: 	cmpq	%rax, %rcx
    00000c6b: 	ja	.Ltmp29 # Offset: 3179
    00000c71: 	movq	%rcx, %rax
    00000c74: 	movq	0xa8(%rsp), %rsi
    00000c7c: 	movq	%rcx, %rdi
    00000c7f: 	shlq	$0x6, %rax
    00000c83: 	subq	%rcx, %rax
    00000c86: 	movq	0x108(%rsp), %rcx
    00000c8e: 	addq	0x130(%rsp), %rcx
    00000c96: 	leaq	(%rsi,%rax,2), %rax
    00000c9a: 	movq	%rax, 0x90(%rsp)
    00000ca2: 	cmpq	%rdi, 0xf0(%rsp)
    00000caa: 	jb	.Ltmp30 # Offset: 3242
.Ltmp9:
    00000cb0: 	addq	$0x140, %rsp
    00000cb7: 	popq	%rbx
    00000cb8: 	popq	%rbp
    00000cb9: 	popq	%r12
    00000cbb: 	popq	%r13
    00000cbd: 	popq	%r14
    00000cbf: 	popq	%r15
    00000cc1: 	retq # Offset: 3265
    00000cc2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp12:
    00000cc8: 	movq	(%rsp), %rbx
    00000ccc: 	movq	-0x10(%rsp), %r11
    00000cd1: 	movq	%rdx, -0x68(%rsp)
    00000cd6: 	movq	-0x50(%rsp), %r10
    00000cdb: 	movq	-0x48(%rsp), %r9
    00000ce0: 	movq	0x10(%rsp), %r8
    00000ce5: 	movq	-0x20(%rsp), %rax
    00000cea: 	movq	0x8(%rsp), %rdx
    00000cef: 	nop # Size: 1
.Ltmp31:
    00000cf0: 	addq	$0x4, %rax
    00000cf4: 	addq	$0x20, %r8
    00000cf8: 	addq	$0x20, %r9
    00000cfc: 	addq	$0x20, %r10
    00000d00: 	movsd	-0x20(%r9), %xmm0
    00000d06: 	movsd	-0x20(%r10), %xmm1
    00000d0c: 	addq	$0x20, %r11
    00000d10: 	addq	$0x20, %rbx
    00000d14: 	mulsd	%xmm2, %xmm1
    00000d18: 	mulsd	%xmm7, %xmm0
    00000d1c: 	addsd	%xmm1, %xmm0
    00000d20: 	movsd	-0x20(%r11), %xmm1
    00000d26: 	mulsd	%xmm6, %xmm1
    00000d2a: 	addsd	%xmm1, %xmm0
    00000d2e: 	movsd	-0x20(%rbx), %xmm1
    00000d33: 	mulsd	%xmm5, %xmm1
    00000d37: 	addsd	%xmm1, %xmm0
    00000d3b: 	addsd	-0x20(%r8), %xmm0
    00000d41: 	movsd	%xmm0, -0x20(%r8)
    00000d47: 	movsd	-0x18(%r9), %xmm0
    00000d4d: 	movsd	-0x18(%r10), %xmm1
    00000d53: 	mulsd	%xmm7, %xmm0
    00000d57: 	mulsd	%xmm2, %xmm1
    00000d5b: 	addsd	%xmm1, %xmm0
    00000d5f: 	movsd	-0x18(%r11), %xmm1
    00000d65: 	mulsd	%xmm6, %xmm1
    00000d69: 	addsd	%xmm1, %xmm0
    00000d6d: 	movsd	-0x18(%rbx), %xmm1
    00000d72: 	mulsd	%xmm5, %xmm1
    00000d76: 	addsd	%xmm1, %xmm0
    00000d7a: 	addsd	-0x18(%r8), %xmm0
    00000d80: 	movsd	%xmm0, -0x18(%r8)
    00000d86: 	movsd	-0x10(%r9), %xmm0
    00000d8c: 	movsd	-0x10(%r10), %xmm1
    00000d92: 	mulsd	%xmm7, %xmm0
    00000d96: 	mulsd	%xmm2, %xmm1
    00000d9a: 	addsd	%xmm1, %xmm0
    00000d9e: 	movsd	-0x10(%r11), %xmm1
    00000da4: 	mulsd	%xmm6, %xmm1
    00000da8: 	addsd	%xmm1, %xmm0
    00000dac: 	movsd	-0x10(%rbx), %xmm1
    00000db1: 	mulsd	%xmm5, %xmm1
    00000db5: 	addsd	%xmm1, %xmm0
    00000db9: 	addsd	-0x10(%r8), %xmm0
    00000dbf: 	movsd	%xmm0, -0x10(%r8)
    00000dc5: 	movsd	-0x8(%r9), %xmm0
    00000dcb: 	movsd	-0x8(%r10), %xmm1
    00000dd1: 	mulsd	%xmm7, %xmm0
    00000dd5: 	mulsd	%xmm2, %xmm1
    00000dd9: 	addsd	%xmm1, %xmm0
    00000ddd: 	movsd	-0x8(%r11), %xmm1
    00000de3: 	mulsd	%xmm6, %xmm1
    00000de7: 	addsd	%xmm1, %xmm0
    00000deb: 	movsd	-0x8(%rbx), %xmm1
    00000df0: 	mulsd	%xmm5, %xmm1
    00000df4: 	addsd	%xmm1, %xmm0
    00000df8: 	addsd	-0x8(%r8), %xmm0
    00000dfe: 	movsd	%xmm0, -0x8(%r8)
    00000e04: 	cmpq	%rax, %rdx
    00000e07: 	ja	.Ltmp31 # Offset: 3591
    00000e0d: 	movq	-0x68(%rsp), %rdx
    00000e12: 	jmp	.Ltmp14 # Offset: 3602
    00000e17: 	nopw	(%rax,%rax) # Size: 9
.Ltmp16:
    00000e20: 	movsd	-0x8(%r14,%rbx), %xmm0
    00000e27: 	movq	0x18(%rsp), %rbx
    00000e2c: 	movapd	%xmm2, %xmm1
    00000e30: 	mulsd	%xmm7, %xmm0
    00000e34: 	mulsd	-0x8(%r14,%rbx), %xmm1
    00000e3b: 	movq	-0x68(%rsp), %rbx
    00000e40: 	addsd	%xmm1, %xmm0
    00000e44: 	movsd	-0x8(%r14,%r10), %xmm1
    00000e4b: 	mulsd	%xmm6, %xmm1
    00000e4f: 	addsd	%xmm1, %xmm0
    00000e53: 	movsd	-0x8(%r14,%r8), %xmm1
    00000e5a: 	leaq	0x1(%rax), %r8
    00000e5e: 	mulsd	%xmm5, %xmm1
    00000e62: 	addsd	%xmm1, %xmm0
    00000e66: 	addsd	(%rbx), %xmm0
    00000e6a: 	movsd	%xmm0, (%rbx)
    00000e6e: 	movq	-0x28(%rsp), %rbx
    00000e73: 	cmpq	%r8, %rbx
    00000e76: 	jbe	.Ltmp15 # Offset: 3702
    00000e7c: 	movq	-0x40(%rsp), %r11
    00000e81: 	movq	-0x58(%rsp), %r10
    00000e86: 	leaq	(%r8,%r11), %r9
    00000e8a: 	leaq	(%r10,%r9,8), %r9
    00000e8e: 	leaq	(%r8,%rbp), %r10
    00000e92: 	movsd	(%r14,%r10,8), %xmm0
    00000e98: 	movq	-0x70(%rsp), %r10
    00000e9d: 	mulsd	%xmm7, %xmm0
    00000ea1: 	addq	%r8, %r10
    00000ea4: 	movsd	(%r14,%r10,8), %xmm1
    00000eaa: 	leaq	(%r8,%r12), %r10
    00000eae: 	addq	%r15, %r8
    00000eb1: 	mulsd	%xmm2, %xmm1
    00000eb5: 	addsd	%xmm1, %xmm0
    00000eb9: 	movsd	(%r14,%r10,8), %xmm1
    00000ebf: 	mulsd	%xmm6, %xmm1
    00000ec3: 	addsd	%xmm1, %xmm0
    00000ec7: 	movsd	(%r14,%r8,8), %xmm1
    00000ecd: 	leaq	0x2(%rax), %r8
    00000ed1: 	mulsd	%xmm5, %xmm1
    00000ed5: 	addsd	%xmm1, %xmm0
    00000ed9: 	addsd	(%r9), %xmm0
    00000ede: 	movsd	%xmm0, (%r9)
    00000ee3: 	cmpq	%r8, %rbx
    00000ee6: 	jbe	.Ltmp15 # Offset: 3814
    00000eec: 	movq	-0x58(%rsp), %r10
    00000ef1: 	leaq	(%r8,%r11), %r9
    00000ef5: 	addq	$0x3, %rax
    00000ef9: 	leaq	(%r10,%r9,8), %r9
    00000efd: 	leaq	(%r8,%rbp), %r10
    00000f01: 	movsd	(%r14,%r10,8), %xmm0
    00000f07: 	movq	-0x70(%rsp), %r10
    00000f0c: 	mulsd	%xmm7, %xmm0
    00000f10: 	addq	%r8, %r10
    00000f13: 	movsd	(%r14,%r10,8), %xmm1
    00000f19: 	leaq	(%r8,%r12), %r10
    00000f1d: 	addq	%r15, %r8
    00000f20: 	mulsd	%xmm2, %xmm1
    00000f24: 	addsd	%xmm1, %xmm0
    00000f28: 	movsd	(%r14,%r10,8), %xmm1
    00000f2e: 	mulsd	%xmm6, %xmm1
    00000f32: 	addsd	%xmm1, %xmm0
    00000f36: 	movsd	(%r14,%r8,8), %xmm1
    00000f3c: 	mulsd	%xmm5, %xmm1
    00000f40: 	addsd	%xmm1, %xmm0
    00000f44: 	addsd	(%r9), %xmm0
    00000f49: 	movsd	%xmm0, (%r9)
    00000f4e: 	cmpq	%rax, %rbx
    00000f51: 	jbe	.Ltmp15 # Offset: 3921
    00000f57: 	movq	-0x58(%rsp), %r10
    00000f5c: 	leaq	(%rax,%r11), %r8
    00000f60: 	leaq	(%r10,%r8,8), %r8
    00000f64: 	movq	-0x70(%rsp), %r10
    00000f69: 	leaq	(%rax,%r10), %r9
    00000f6d: 	mulsd	(%r14,%r9,8), %xmm2
    00000f73: 	leaq	(%rax,%rbp), %r9
    00000f77: 	mulsd	(%r14,%r9,8), %xmm7
    00000f7d: 	leaq	(%rax,%r12), %r9
    00000f81: 	addq	%r15, %rax
    00000f84: 	mulsd	(%r14,%r9,8), %xmm6
    00000f8a: 	mulsd	(%r14,%rax,8), %xmm5
    00000f90: 	addsd	%xmm7, %xmm2
    00000f94: 	addsd	%xmm2, %xmm6
    00000f98: 	addsd	%xmm6, %xmm5
    00000f9c: 	addsd	(%r8), %xmm5
    00000fa1: 	movsd	%xmm5, (%r8)
    00000fa6: 	jmp	.Ltmp15 # Offset: 4006
    00000fab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp11:
    00000fb0: 	movq	%rbx, %rax
    00000fb3: 	jmp	.Ltmp14 # Offset: 4019
.Ltmp21:
    00000fb8: 	movq	0x10(%rsp), %r10
    00000fbd: 	movq	-0x20(%rsp), %rax
    00000fc2: 	movq	%rbp, %r11
    00000fc5: 	movq	0x8(%rsp), %rbx
    00000fca: 	movq	-0x70(%rsp), %r15
    00000fcf: 	nop # Size: 1
.Ltmp32:
    00000fd0: 	movsd	(%r11), %xmm1
    00000fd5: 	addq	$0x4, %rax
    00000fd9: 	addq	$0x20, %r10
    00000fdd: 	addq	$0x20, %r11
    00000fe1: 	mulsd	%xmm0, %xmm1
    00000fe5: 	addsd	-0x20(%r10), %xmm1
    00000feb: 	movsd	%xmm1, -0x20(%r10)
    00000ff1: 	movsd	-0x18(%r11), %xmm1
    00000ff7: 	mulsd	%xmm0, %xmm1
    00000ffb: 	addsd	-0x18(%r10), %xmm1
    00001001: 	movsd	%xmm1, -0x18(%r10)
    00001007: 	movsd	-0x10(%r11), %xmm1
    0000100d: 	mulsd	%xmm0, %xmm1
    00001011: 	addsd	-0x10(%r10), %xmm1
    00001017: 	movsd	%xmm1, -0x10(%r10)
    0000101d: 	movsd	-0x8(%r11), %xmm1
    00001023: 	mulsd	%xmm0, %xmm1
    00001027: 	addsd	-0x8(%r10), %xmm1
    0000102d: 	movsd	%xmm1, -0x8(%r10)
    00001033: 	cmpq	%rax, %rbx
    00001036: 	ja	.Ltmp32 # Offset: 4150
    00001038: 	movq	%r15, -0x70(%rsp)
    0000103d: 	jmp	.Ltmp23 # Offset: 4157
.Ltmp25:
    00001042: 	movsd	-0x8(%r14,%r10), %xmm1
    00001049: 	movq	-0x28(%rsp), %rbx
    0000104e: 	leaq	0x1(%rax), %r10
    00001052: 	mulsd	%xmm0, %xmm1
    00001056: 	addsd	(%r11), %xmm1
    0000105b: 	movsd	%xmm1, (%r11)
    00001060: 	cmpq	%r10, %rbx
    00001063: 	jbe	.Ltmp24 # Offset: 4195
    00001069: 	movq	-0x40(%rsp), %r15
    0000106e: 	leaq	(%r10,%r15), %r11
    00001072: 	addq	%rdx, %r10
    00001075: 	movq	-0x58(%rsp), %r15
    0000107a: 	movsd	(%r14,%r10,8), %xmm1
    00001080: 	leaq	0x2(%rax), %r10
    00001084: 	leaq	(%r15,%r11,8), %r11
    00001088: 	mulsd	%xmm0, %xmm1
    0000108c: 	addsd	(%r11), %xmm1
    00001091: 	movsd	%xmm1, (%r11)
    00001096: 	cmpq	%r10, %rbx
    00001099: 	jbe	.Ltmp24 # Offset: 4249
    0000109f: 	movq	-0x40(%rsp), %r15
    000010a4: 	addq	$0x3, %rax
    000010a8: 	leaq	(%r10,%r15), %r11
    000010ac: 	addq	%rdx, %r10
    000010af: 	movq	-0x58(%rsp), %r15
    000010b4: 	movsd	(%r14,%r10,8), %xmm1
    000010ba: 	leaq	(%r15,%r11,8), %r11
    000010be: 	mulsd	%xmm0, %xmm1
    000010c2: 	addsd	(%r11), %xmm1
    000010c7: 	movsd	%xmm1, (%r11)
    000010cc: 	cmpq	%rax, %rbx
    000010cf: 	jbe	.Ltmp24 # Offset: 4303
    000010d5: 	movq	-0x40(%rsp), %r15
    000010da: 	leaq	(%rax,%r15), %r10
    000010de: 	movq	-0x58(%rsp), %r15
    000010e3: 	addq	%rdx, %rax
    000010e6: 	mulsd	(%r14,%rax,8), %xmm0
    000010ec: 	leaq	(%r15,%r10,8), %r10
    000010f0: 	addsd	(%r10), %xmm0
    000010f5: 	movsd	%xmm0, (%r10)
    000010fa: 	jmp	.Ltmp24 # Offset: 4346
.Ltmp20:
    000010ff: 	movq	%rbx, %rax
    00001102: 	jmp	.Ltmp23 # Offset: 4354
.Ltmp10:
    00001107: 	movq	0x88(%rsp), %rax
    0000110f: 	movq	%rax, -0x38(%rsp)
    00001114: 	movq	%rax, %rdi
    00001117: 	jmp	.Ltmp33 # Offset: 4375
DWARF CFI Instructions:
    <empty>
End of Function "_ZN28matmul_JKI_blocked_unrolled3IdEclEPKdS2_Pdmm.isra.0/1(*2)"

Binary Function "_ZN28matmul_IJK_blocked_unrolled3IdEclEPKdS2_Pdmm.isra.0/1(*2)" after disassembly {
  All names   : _ZN28matmul_IJK_blocked_unrolled3IdEclEPKdS2_Pdmm.isra.0/1
                _ZN28matmul_IJK_blocked_unrolled3IdEclEPKdS2_Pdmm.isra.0/matrix_multiply.cpp/1
  Number      : 11
  State       : disassembled
  Address     : 0x27f0
  Size        : 0xed7
  MaxSize     : 0xee0
  Offset      : 0x27f0
  Section     : .text
  Orc Section : .local.text._ZN28matmul_IJK_blocked_unrolled3IdEclEPKdS2_Pdmm.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB010:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	subq	$0x1c0, %rsp
    00000011: 	movq	%rsi, -0x18(%rsp)
    00000016: 	movq	%rdx, 0x198(%rsp)
    0000001e: 	movq	%rcx, 0x150(%rsp)
    00000026: 	testq	%rcx, %rcx
    00000029: 	je	.Ltmp34 # Offset: 41
    0000002f: 	testq	%r8, %r8
    00000032: 	je	.Ltmp34 # Offset: 50
    00000038: 	movq	%r8, %rax
    0000003b: 	movq	%r8, %rbx
    0000003e: 	movq	%r8, %rdx
    00000041: 	movq	%rdi, %rbp
    00000044: 	shlq	$0xa, %rax
    00000048: 	shlq	$0x5, %rbx
    0000004c: 	leaq	(,%r8,8), %rcx
    00000054: 	movq	$0x0, 0xe0(%rsp)
    00000060: 	movq	%rax, 0x160(%rsp)
    00000068: 	movq	%r8, %rax
    0000006b: 	movq	%rbx, %r15
    0000006e: 	movq	%r8, %r14
    00000071: 	shlq	$0x4, %rax
    00000075: 	movq	%rcx, 0x50(%rsp)
    0000007a: 	addq	%rdi, %rcx
    0000007d: 	addq	%rax, %rsi
    00000080: 	movq	%rax, 0xd0(%rsp)
    00000088: 	leaq	(%r8,%r8), %rax
    0000008c: 	movq	%rax, 0xb0(%rsp)
    00000094: 	addq	%r8, %rax
    00000097: 	movq	%rax, 0xb8(%rsp)
    0000009f: 	movq	%r8, %rax
    000000a2: 	shlq	$0x6, %rax
    000000a6: 	movq	%rsi, 0x188(%rsp)
    000000ae: 	movq	%rax, 0x78(%rsp)
    000000b3: 	movq	%r8, %rax
    000000b6: 	shlq	$0x7, %rax
    000000ba: 	movq	%rcx, 0x190(%rsp)
    000000c2: 	movq	$0x0, 0x140(%rsp)
    000000ce: 	subq	%r8, %rax
    000000d1: 	shlq	$0x3, %rax
    000000d5: 	movq	%rax, 0x1b0(%rsp)
.Ltmp52:
    000000dd: 	movq	0x140(%rsp), %rax
    000000e5: 	movq	0x50(%rsp), %rdi
    000000ea: 	movq	%r14, %r12
    000000ed: 	movq	$0x4, 0x70(%rsp)
    000000f6: 	movq	0x150(%rsp), %rcx
    000000fe: 	movq	0xd0(%rsp), %rsi
    00000106: 	movq	$0x0, 0x148(%rsp)
    00000112: 	movq	%rax, 0xd8(%rsp)
    0000011a: 	subq	$-0x80, %rax
    0000011e: 	movq	-0x18(%rsp), %rbx
    00000123: 	cmpq	%rcx, %rax
    00000126: 	movq	%rax, 0x140(%rsp)
    0000012e: 	movq	0x188(%rsp), %r11
    00000136: 	cmovbeq	%rax, %rcx
    0000013a: 	addq	0xb0(%rsp), %rdx
    00000142: 	movq	%rbx, %r14
    00000145: 	movq	%rdx, 0x158(%rsp)
    0000014d: 	subq	0xb8(%rsp), %rdx
    00000155: 	movq	%r11, %r13
    00000158: 	leaq	-0x3(%rcx), %rax
    0000015c: 	movq	%rcx, 0x98(%rsp)
    00000164: 	movq	%rax, 0x60(%rsp)
    00000169: 	movq	0xe0(%rsp), %rax
    00000171: 	movq	%rdx, 0x138(%rsp)
    00000179: 	movq	%rax, %rcx
    0000017c: 	addq	%rdi, %rcx
    0000017f: 	movq	%rcx, 0x110(%rsp)
    00000187: 	movq	%rsi, %rcx
    0000018a: 	addq	%rdi, %rcx
    0000018d: 	movq	0x190(%rsp), %rdi
    00000195: 	movq	%rcx, 0x108(%rsp)
    0000019d: 	movq	%rax, %rcx
    000001a0: 	addq	%rbp, %rax
    000001a3: 	addq	%rdi, %rcx
    000001a6: 	movq	%rax, 0x1a8(%rsp)
    000001ae: 	movq	%rcx, 0x170(%rsp)
    000001b6: 	movq	%rsi, %rcx
    000001b9: 	addq	%rdi, %rsi
    000001bc: 	leaq	(%rbp,%rcx), %rax
    000001c1: 	movq	%rsi, 0x168(%rsp)
    000001c9: 	movq	%rax, 0x1a0(%rsp)
.Ltmp51:
    000001d1: 	movq	0x198(%rsp), %rcx
    000001d9: 	movq	0x148(%rsp), %rbx
    000001e1: 	movq	$0x0, -0x28(%rsp)
    000001ea: 	movq	%rcx, 0xa8(%rsp)
    000001f2: 	movq	0x50(%rsp), %rcx
    000001f7: 	movq	%rbx, %rax
    000001fa: 	movq	%rbx, -0x10(%rsp)
    000001ff: 	subq	$-0x80, %rbx
    00000203: 	cmpq	%r12, %rbx
    00000206: 	leaq	(%rcx,%r14), %r10
    0000020a: 	leaq	(%rcx,%r13), %r11
    0000020e: 	movq	%rbx, %rdi
    00000211: 	leaq	(,%rax,8), %rcx
    00000219: 	movq	%rbx, 0x148(%rsp)
    00000221: 	movq	%rax, %rbx
    00000224: 	movq	0x1a8(%rsp), %rax
    0000022c: 	cmovaq	%r12, %rdi
    00000230: 	movq	%r10, 0x180(%rsp)
    00000238: 	addq	%rcx, %rax
    0000023b: 	movq	%r11, 0x178(%rsp)
    00000243: 	movq	%rax, 0x100(%rsp)
    0000024b: 	movq	0x170(%rsp), %rax
    00000253: 	leaq	-0x3(%rdi), %r9
    00000257: 	movq	%rdi, 0x48(%rsp)
    0000025c: 	addq	%rcx, %rax
    0000025f: 	movq	%r9, 0x58(%rsp)
    00000264: 	movq	%rax, 0xf8(%rsp)
    0000026c: 	movq	0x1a0(%rsp), %rax
    00000274: 	movq	%r11, 0xc0(%rsp)
    0000027c: 	addq	%rcx, %rax
    0000027f: 	movq	%r10, 0xc8(%rsp)
    00000287: 	movq	%rax, 0xf0(%rsp)
    0000028f: 	movq	0x168(%rsp), %rax
    00000297: 	addq	%rcx, %rax
    0000029a: 	movq	%rax, 0xe8(%rsp)
    000002a2: 	movq	%rdi, %rax
    000002a5: 	subq	%rbx, %rax
    000002a8: 	cmpq	$0x2, 0x70(%rsp)
    000002ae: 	seta	%dl
    000002b1: 	cmpq	$-0x4, %r9
    000002b5: 	leaq	-0x4(%rax), %rsi
    000002b9: 	setbe	%al
    000002bc: 	andl	%edx, %eax
    000002be: 	cmpq	$0x3, %rsi
    000002c2: 	seta	%dl
    000002c5: 	andl	%edx, %eax
    000002c7: 	movb	%al, 0x6f(%rsp)
    000002cb: 	movq	%rsi, %rax
    000002ce: 	shrq	$0x2, %rax
    000002d2: 	addq	$0x1, %rax
    000002d6: 	movq	%rax, %rsi
    000002d9: 	movq	%rax, 0x90(%rsp)
    000002e1: 	andq	$-0x2, %rax
    000002e5: 	leaq	(%rbx,%rax,4), %rbx
    000002e9: 	movq	%rax, 0x80(%rsp)
    000002f1: 	movq	%r12, %rax
    000002f4: 	shrq	%rsi
    000002f7: 	imulq	%rbx, %rax
    000002fb: 	movq	%rsi, 0x88(%rsp)
    00000303: 	movq	%r15, %rsi
    00000306: 	movq	%r13, %r15
    00000309: 	movq	%rax, 0x130(%rsp)
    00000311: 	addq	%r12, %rax
    00000314: 	movq	%rax, 0x128(%rsp)
    0000031c: 	addq	%r12, %rax
    0000031f: 	movq	%rax, 0x120(%rsp)
    00000327: 	addq	%r12, %rax
    0000032a: 	movq	%rax, 0x118(%rsp)
    00000332: 	leaq	0x4(%rbx), %rax
    00000336: 	movq	%rax, -0x30(%rsp)
    0000033b: 	movq	%rdi, %rax
    0000033e: 	negq	%rax
    00000341: 	leaq	(%rcx,%rax,8), %rax
    00000345: 	movq	%rax, 0xa0(%rsp)
    0000034d: 	nopl	(%rax) # Size: 3
.Ltmp50:
    00000350: 	movq	0xd8(%rsp), %rdi
    00000358: 	movq	0x60(%rsp), %rax
    0000035d: 	cmpq	%rax, %rdi
    00000360: 	jae	.Ltmp35 # Offset: 864
    00000366: 	movq	0x138(%rsp), %rax
    0000036e: 	movq	0xe0(%rsp), %rcx
    00000376: 	movq	%rdi, -0x20(%rsp)
    0000037b: 	movq	%r12, %r13
    0000037e: 	movq	-0x18(%rsp), %rdx
    00000383: 	movq	%rax, -0x70(%rsp)
    00000388: 	movq	0xa8(%rsp), %rax
    00000390: 	addq	%rax, %rcx
    00000393: 	movq	%rcx, 0x10(%rsp)
    00000398: 	movq	0x110(%rsp), %rcx
    000003a0: 	addq	%rax, %rcx
    000003a3: 	movq	%rcx, 0x8(%rsp)
    000003a8: 	movq	0xd0(%rsp), %rcx
    000003b0: 	addq	%rax, %rcx
    000003b3: 	movq	%rcx, (%rsp)
    000003b7: 	movq	0x108(%rsp), %rcx
    000003bf: 	addq	%rax, %rcx
    000003c2: 	movq	0x130(%rsp), %rax
    000003ca: 	movq	%rcx, -0x8(%rsp)
    000003cf: 	movq	-0x28(%rsp), %rcx
    000003d4: 	addq	%rcx, %rax
    000003d7: 	leaq	(%rdx,%rax,8), %rax
    000003db: 	movq	%rax, -0x38(%rsp)
    000003e0: 	movq	0x128(%rsp), %rax
    000003e8: 	addq	%rcx, %rax
    000003eb: 	leaq	(%rdx,%rax,8), %rax
    000003ef: 	movq	%rax, -0x40(%rsp)
    000003f4: 	movq	0x120(%rsp), %rax
    000003fc: 	addq	%rcx, %rax
    000003ff: 	leaq	(%rdx,%rax,8), %rax
    00000403: 	movq	%rax, -0x48(%rsp)
    00000408: 	movq	0x118(%rsp), %rax
    00000410: 	addq	%rcx, %rax
    00000413: 	movq	0xc8(%rsp), %rcx
    0000041b: 	leaq	(%rdx,%rax,8), %rax
    0000041f: 	movq	0xc0(%rsp), %rdx
    00000427: 	movq	%rax, -0x50(%rsp)
    0000042c: 	movq	0xe8(%rsp), %rax
    00000434: 	movq	%rax, 0x18(%rsp)
    00000439: 	movq	0xf0(%rsp), %rax
    00000441: 	movq	%rax, 0x20(%rsp)
    00000446: 	movq	0xf8(%rsp), %rax
    0000044e: 	movq	%rax, 0x28(%rsp)
    00000453: 	movq	0x100(%rsp), %rax
    0000045b: 	movq	%rax, 0x30(%rsp)
.Ltmp43:
    00000460: 	movq	-0x70(%rsp), %rax
    00000465: 	movq	-0x10(%rsp), %rdi
    0000046a: 	addq	%r13, %rax
    0000046d: 	movq	%rax, -0x60(%rsp)
    00000472: 	addq	%r13, %rax
    00000475: 	movq	%rax, -0x58(%rsp)
    0000047a: 	addq	%r13, %rax
    0000047d: 	movq	%rax, -0x68(%rsp)
    00000482: 	cmpq	%rdi, 0x58(%rsp)
    00000487: 	jbe	.Ltmp36 # Offset: 1159
    0000048d: 	cmpb	$0x0, 0x6f(%rsp)
    00000492: 	je	.Ltmp37 # Offset: 1170
    00000498: 	pxor	%xmm4, %xmm4
    0000049c: 	movq	%rdi, %xmm14
    000004a1: 	movq	%rsi, 0x38(%rsp)
    000004a6: 	xorl	%eax, %eax
    000004a8: 	movq	%rbx, 0x40(%rsp)
    000004ad: 	movq	%rsi, %r11
    000004b0: 	movq	0x30(%rsp), %r10
    000004b5: 	xorl	%r12d, %r12d
    000004b8: 	movq	0x28(%rsp), %r9
    000004bd: 	movq	0x20(%rsp), %r8
    000004c2: 	movhps	0x70(%rsp), %xmm14
    000004c8: 	movapd	%xmm4, %xmm3
    000004cc: 	movq	0x18(%rsp), %rdi
    000004d1: 	movq	0x78(%rsp), %rsi
    000004d6: 	movapd	%xmm4, %xmm2
    000004da: 	movapd	%xmm4, %xmm1
    000004de: 	movq	0x88(%rsp), %rbx
    000004e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp38:
    000004f0: 	movupd	(%r10), %xmm7
    000004f5: 	movupd	0x10(%r10), %xmm5
    000004fb: 	addq	$0x1, %r12
    000004ff: 	movdqa	%xmm14, %xmm13
    00000504: 	movlpd	0x8(%r10), %xmm5
    0000050a: 	movupd	0x20(%r10), %xmm11
    00000510: 	addq	$0x40, %rdi
    00000514: 	addq	$0x40, %r8
    00000518: 	movhpd	0x10(%r10), %xmm7
    0000051e: 	movsd	(%r14,%rax), %xmm9
    00000524: 	addq	$0x40, %r9
    00000528: 	movsd	(%rcx,%rax), %xmm12
    0000052e: 	movupd	0x30(%r10), %xmm10
    00000534: 	movlpd	0x28(%r10), %xmm10
    0000053a: 	movhpd	0x30(%r10), %xmm11
    00000540: 	movapd	%xmm5, %xmm0
    00000544: 	movapd	%xmm7, %xmm15
    00000549: 	movhpd	(%rcx,%r11), %xmm12
    0000054f: 	unpckhpd	%xmm11, %xmm7
    00000554: 	movsd	(%r15,%rax), %xmm8
    0000055a: 	movhpd	(%r14,%r11), %xmm9
    00000560: 	unpcklpd	%xmm10, %xmm0
    00000565: 	unpcklpd	%xmm11, %xmm15
    0000056a: 	movsd	(%rdx,%rax), %xmm6
    0000056f: 	mulpd	%xmm9, %xmm15
    00000574: 	movhpd	(%r15,%r11), %xmm8
    0000057a: 	addq	$0x40, %r10
    0000057e: 	addq	%rsi, %rax
    00000581: 	mulpd	%xmm12, %xmm0
    00000586: 	movhpd	(%rdx,%r11), %xmm6
    0000058c: 	unpckhpd	%xmm10, %xmm5
    00000591: 	movupd	-0x20(%r9), %xmm11
    00000597: 	mulpd	%xmm8, %xmm7
    0000059c: 	movupd	-0x10(%r9), %xmm10
    000005a2: 	addq	%rsi, %r11
    000005a5: 	movlpd	-0x18(%r9), %xmm10
    000005ab: 	mulpd	%xmm6, %xmm5
    000005af: 	movhpd	-0x10(%r9), %xmm11
    000005b5: 	paddq	DATAat0x2d980(%rip), %xmm14
    000005be: 	addpd	%xmm15, %xmm0
    000005c3: 	addpd	%xmm7, %xmm0
    000005c7: 	movupd	-0x40(%r9), %xmm7
    000005cd: 	movhpd	-0x30(%r9), %xmm7
    000005d3: 	addpd	%xmm5, %xmm0
    000005d7: 	movupd	-0x30(%r9), %xmm5
    000005dd: 	movlpd	-0x38(%r9), %xmm5
    000005e3: 	movapd	%xmm7, %xmm15
    000005e8: 	unpcklpd	%xmm11, %xmm15
    000005ed: 	unpckhpd	%xmm11, %xmm7
    000005f2: 	movupd	-0x20(%r8), %xmm11
    000005f8: 	mulpd	%xmm9, %xmm15
    000005fd: 	addsd	%xmm0, %xmm1
    00000601: 	unpckhpd	%xmm0, %xmm0
    00000605: 	movhpd	-0x10(%r8), %xmm11
    0000060b: 	mulpd	%xmm8, %xmm7
    00000610: 	addsd	%xmm0, %xmm1
    00000614: 	movapd	%xmm5, %xmm0
    00000618: 	unpckhpd	%xmm10, %xmm5
    0000061d: 	mulpd	%xmm6, %xmm5
    00000621: 	unpcklpd	%xmm10, %xmm0
    00000626: 	movupd	-0x10(%r8), %xmm10
    0000062c: 	mulpd	%xmm12, %xmm0
    00000631: 	addpd	%xmm15, %xmm0
    00000636: 	addpd	%xmm7, %xmm0
    0000063a: 	movupd	-0x40(%r8), %xmm7
    00000640: 	movhpd	-0x30(%r8), %xmm7
    00000646: 	addpd	%xmm5, %xmm0
    0000064a: 	movupd	-0x30(%r8), %xmm5
    00000650: 	movlpd	-0x38(%r8), %xmm5
    00000656: 	movapd	%xmm7, %xmm15
    0000065b: 	movlpd	-0x18(%r8), %xmm10
    00000661: 	unpcklpd	%xmm11, %xmm15
    00000666: 	unpckhpd	%xmm11, %xmm7
    0000066b: 	movupd	-0x20(%rdi), %xmm11
    00000671: 	paddq	DATAat0x2d990(%rip), %xmm13
    0000067a: 	mulpd	%xmm9, %xmm15
    0000067f: 	addsd	%xmm0, %xmm2
    00000683: 	unpckhpd	%xmm0, %xmm0
    00000687: 	movhpd	-0x10(%rdi), %xmm11
    0000068d: 	mulpd	%xmm8, %xmm7
    00000692: 	addsd	%xmm0, %xmm2
    00000696: 	movapd	%xmm5, %xmm0
    0000069a: 	unpckhpd	%xmm10, %xmm5
    0000069f: 	mulpd	%xmm6, %xmm5
    000006a3: 	unpcklpd	%xmm10, %xmm0
    000006a8: 	movupd	-0x10(%rdi), %xmm10
    000006ae: 	movlpd	-0x18(%rdi), %xmm10
    000006b4: 	mulpd	%xmm12, %xmm0
    000006b9: 	addpd	%xmm15, %xmm0
    000006be: 	addpd	%xmm7, %xmm0
    000006c2: 	movupd	-0x40(%rdi), %xmm7
    000006c7: 	movhpd	-0x30(%rdi), %xmm7
    000006cc: 	addpd	%xmm5, %xmm0
    000006d0: 	movupd	-0x30(%rdi), %xmm5
    000006d5: 	movlpd	-0x38(%rdi), %xmm5
    000006da: 	addsd	%xmm0, %xmm3
    000006de: 	unpckhpd	%xmm0, %xmm0
    000006e2: 	addsd	%xmm0, %xmm3
    000006e6: 	movapd	%xmm5, %xmm0
    000006ea: 	unpckhpd	%xmm10, %xmm5
    000006ef: 	mulpd	%xmm6, %xmm5
    000006f3: 	unpcklpd	%xmm10, %xmm0
    000006f8: 	mulpd	%xmm12, %xmm0
    000006fd: 	movapd	%xmm7, %xmm12
    00000702: 	unpckhpd	%xmm11, %xmm7
    00000707: 	mulpd	%xmm8, %xmm7
    0000070c: 	unpcklpd	%xmm11, %xmm12
    00000711: 	mulpd	%xmm12, %xmm9
    00000716: 	addpd	%xmm9, %xmm0
    0000071b: 	addpd	%xmm7, %xmm0
    0000071f: 	addpd	%xmm5, %xmm0
    00000723: 	addsd	%xmm0, %xmm4
    00000727: 	unpckhpd	%xmm0, %xmm0
    0000072b: 	addsd	%xmm0, %xmm4
    0000072f: 	cmpq	%rbx, %r12
    00000732: 	jb	.Ltmp38 # Offset: 1842
    00000738: 	movhlps	%xmm13, %xmm6
    0000073c: 	movq	0x38(%rsp), %rsi
    00000741: 	movq	0x40(%rsp), %rbx
    00000746: 	movq	0x90(%rsp), %r11
    0000074e: 	movq	%xmm6, %rax
    00000753: 	cmpq	%r11, 0x80(%rsp)
    0000075b: 	je	.Ltmp39 # Offset: 1883
    00000761: 	movq	-0x38(%rsp), %rax
    00000766: 	movsd	(%rax), %xmm8
    0000076b: 	movq	-0x40(%rsp), %rax
    00000770: 	movsd	(%rax), %xmm0
    00000774: 	movq	-0x48(%rsp), %rax
    00000779: 	movsd	(%rax), %xmm7
    0000077d: 	movq	-0x50(%rsp), %rax
    00000782: 	movsd	(%rax), %xmm6
    00000786: 	movq	-0x70(%rsp), %rax
    0000078b: 	addq	%rbx, %rax
    0000078e: 	movsd	0x8(%rbp,%rax,8), %xmm5
    00000794: 	movsd	(%rbp,%rax,8), %xmm9
    0000079b: 	mulsd	%xmm0, %xmm5
    0000079f: 	mulsd	%xmm8, %xmm9
    000007a4: 	addsd	%xmm9, %xmm5
    000007a9: 	movsd	0x10(%rbp,%rax,8), %xmm9
    000007b0: 	mulsd	%xmm7, %xmm9
    000007b5: 	addsd	%xmm9, %xmm5
    000007ba: 	movsd	0x18(%rbp,%rax,8), %xmm9
    000007c1: 	movq	-0x60(%rsp), %rax
    000007c6: 	mulsd	%xmm6, %xmm9
    000007cb: 	addq	%rbx, %rax
    000007ce: 	addsd	%xmm9, %xmm5
    000007d3: 	movsd	(%rbp,%rax,8), %xmm9
    000007da: 	mulsd	%xmm8, %xmm9
    000007df: 	addsd	%xmm5, %xmm1
    000007e3: 	movsd	0x8(%rbp,%rax,8), %xmm5
    000007e9: 	mulsd	%xmm0, %xmm5
    000007ed: 	addsd	%xmm9, %xmm5
    000007f2: 	movsd	0x10(%rbp,%rax,8), %xmm9
    000007f9: 	mulsd	%xmm7, %xmm9
    000007fe: 	addsd	%xmm9, %xmm5
    00000803: 	movsd	0x18(%rbp,%rax,8), %xmm9
    0000080a: 	movq	-0x58(%rsp), %rax
    0000080f: 	mulsd	%xmm6, %xmm9
    00000814: 	addq	%rbx, %rax
    00000817: 	addsd	%xmm9, %xmm5
    0000081c: 	movsd	(%rbp,%rax,8), %xmm9
    00000823: 	mulsd	%xmm8, %xmm9
    00000828: 	addsd	%xmm5, %xmm2
    0000082c: 	movsd	0x8(%rbp,%rax,8), %xmm5
    00000832: 	mulsd	%xmm0, %xmm5
    00000836: 	addsd	%xmm9, %xmm5
    0000083b: 	movsd	0x10(%rbp,%rax,8), %xmm9
    00000842: 	mulsd	%xmm7, %xmm9
    00000847: 	addsd	%xmm9, %xmm5
    0000084c: 	movsd	0x18(%rbp,%rax,8), %xmm9
    00000853: 	movq	-0x68(%rsp), %rax
    00000858: 	mulsd	%xmm6, %xmm9
    0000085d: 	addq	%rbx, %rax
    00000860: 	mulsd	0x8(%rbp,%rax,8), %xmm0
    00000866: 	mulsd	(%rbp,%rax,8), %xmm8
    0000086d: 	mulsd	0x10(%rbp,%rax,8), %xmm7
    00000873: 	mulsd	0x18(%rbp,%rax,8), %xmm6
    00000879: 	movq	-0x30(%rsp), %rax
    0000087e: 	addsd	%xmm9, %xmm5
    00000883: 	addsd	%xmm8, %xmm0
    00000888: 	addsd	%xmm5, %xmm3
    0000088c: 	addsd	%xmm7, %xmm0
    00000890: 	addsd	%xmm6, %xmm0
    00000894: 	addsd	%xmm0, %xmm4
.Ltmp39:
    00000898: 	movq	0x48(%rsp), %rdi
    0000089d: 	cmpq	%rax, %rdi
    000008a0: 	jbe	.Ltmp40 # Offset: 2208
    000008a6: 	subq	%rax, %rdi
    000008a9: 	cmpq	$0x1, %rdi
    000008ad: 	je	.Ltmp41 # Offset: 2221
    000008b3: 	movq	-0x18(%rsp), %r11
    000008b8: 	movq	%r13, %r8
    000008bb: 	movq	-0x60(%rsp), %r10
    000008c0: 	imulq	%rax, %r8
    000008c4: 	addq	-0x28(%rsp), %r8
    000008c9: 	movq	-0x58(%rsp), %r9
    000008ce: 	leaq	(%r11,%r8,8), %r12
    000008d2: 	movq	-0x70(%rsp), %r11
    000008d7: 	movsd	(%r12), %xmm0
    000008dd: 	leaq	(%rax,%r11), %r8
    000008e1: 	leaq	(%rbp,%r8,8), %r11
    000008e6: 	leaq	(%rax,%r10), %r8
    000008ea: 	leaq	(%rbp,%r8,8), %r10
    000008ef: 	leaq	(%rax,%r9), %r8
    000008f3: 	movupd	(%r11), %xmm5
    000008f8: 	movq	%r10, 0x40(%rsp)
    000008fd: 	leaq	(%rbp,%r8,8), %r10
    00000902: 	movq	-0x68(%rsp), %r8
    00000907: 	movq	%r10, 0x38(%rsp)
    0000090c: 	movq	0x40(%rsp), %r10
    00000911: 	addq	%rax, %r8
    00000914: 	leaq	(%rbp,%r8,8), %r9
    00000919: 	movq	0x50(%rsp), %r8
    0000091e: 	movupd	(%r9), %xmm6
    00000923: 	movhpd	(%r12,%r8), %xmm0
    00000929: 	leaq	(%r12,%r8,2), %r12
    0000092d: 	mulpd	%xmm0, %xmm5
    00000931: 	addsd	%xmm5, %xmm1
    00000935: 	unpckhpd	%xmm5, %xmm5
    00000939: 	addsd	%xmm5, %xmm1
    0000093d: 	movupd	(%r10), %xmm5
    00000942: 	movq	0x38(%rsp), %r10
    00000947: 	mulpd	%xmm0, %xmm5
    0000094b: 	addsd	%xmm5, %xmm2
    0000094f: 	unpckhpd	%xmm5, %xmm5
    00000953: 	addsd	%xmm5, %xmm2
    00000957: 	movupd	(%r10), %xmm5
    0000095c: 	movq	%r9, %r10
    0000095f: 	movq	%r8, %r9
    00000962: 	movq	%rdi, %r8
    00000965: 	mulpd	%xmm0, %xmm5
    00000969: 	shrq	%r8
    0000096c: 	mulpd	%xmm6, %xmm0
    00000970: 	addsd	%xmm5, %xmm3
    00000974: 	unpckhpd	%xmm5, %xmm5
    00000978: 	addsd	%xmm0, %xmm4
    0000097c: 	unpckhpd	%xmm0, %xmm0
    00000980: 	addsd	%xmm5, %xmm3
    00000984: 	addsd	%xmm0, %xmm4
    00000988: 	cmpq	$0x1, %r8
    0000098c: 	je	.Ltmp42 # Offset: 2444
    0000098e: 	movsd	(%r12), %xmm5
    00000994: 	movupd	0x10(%r11), %xmm0
    0000099a: 	movq	0x40(%rsp), %r11
    0000099f: 	movhpd	(%r12,%r9), %xmm5
    000009a5: 	mulpd	%xmm5, %xmm0
    000009a9: 	addsd	%xmm0, %xmm1
    000009ad: 	unpckhpd	%xmm0, %xmm0
    000009b1: 	addsd	%xmm0, %xmm1
    000009b5: 	movupd	0x10(%r11), %xmm0
    000009bb: 	movq	0x38(%rsp), %r11
    000009c0: 	mulpd	%xmm5, %xmm0
    000009c4: 	addsd	%xmm0, %xmm2
    000009c8: 	unpckhpd	%xmm0, %xmm0
    000009cc: 	addsd	%xmm0, %xmm2
    000009d0: 	movupd	0x10(%r11), %xmm0
    000009d6: 	mulpd	%xmm5, %xmm0
    000009da: 	addsd	%xmm0, %xmm3
    000009de: 	unpckhpd	%xmm0, %xmm0
    000009e2: 	addsd	%xmm0, %xmm3
    000009e6: 	movupd	0x10(%r10), %xmm0
    000009ec: 	mulpd	%xmm5, %xmm0
    000009f0: 	addsd	%xmm0, %xmm4
    000009f4: 	unpckhpd	%xmm0, %xmm0
    000009f8: 	addsd	%xmm0, %xmm4
.Ltmp42:
    000009fc: 	movq	%rdi, %r8
    000009ff: 	andq	$-0x2, %r8
    00000a03: 	addq	%r8, %rax
    00000a06: 	cmpq	%rdi, %r8
    00000a09: 	je	.Ltmp40 # Offset: 2569
.Ltmp41:
    00000a0b: 	movq	-0x18(%rsp), %r11
    00000a10: 	movq	%r13, %rdi
    00000a13: 	imulq	%rax, %rdi
    00000a17: 	addq	-0x28(%rsp), %rdi
    00000a1c: 	movsd	(%r11,%rdi,8), %xmm0
    00000a22: 	movq	-0x70(%rsp), %rdi
    00000a27: 	addq	%rax, %rdi
    00000a2a: 	movsd	(%rbp,%rdi,8), %xmm5
    00000a30: 	movq	-0x60(%rsp), %rdi
    00000a35: 	mulsd	%xmm0, %xmm5
    00000a39: 	addq	%rax, %rdi
    00000a3c: 	addsd	%xmm5, %xmm1
    00000a40: 	movsd	(%rbp,%rdi,8), %xmm5
    00000a46: 	movq	-0x58(%rsp), %rdi
    00000a4b: 	mulsd	%xmm0, %xmm5
    00000a4f: 	addq	%rax, %rdi
    00000a52: 	addq	-0x68(%rsp), %rax
    00000a57: 	addsd	%xmm5, %xmm2
    00000a5b: 	movsd	(%rbp,%rdi,8), %xmm5
    00000a61: 	mulsd	%xmm0, %xmm5
    00000a65: 	mulsd	(%rbp,%rax,8), %xmm0
    00000a6b: 	addsd	%xmm5, %xmm3
    00000a6f: 	addsd	%xmm0, %xmm4
.Ltmp40:
    00000a73: 	movq	0x8(%rsp), %rax
    00000a78: 	movq	0x10(%rsp), %r9
    00000a7d: 	movq	(%rsp), %rdi
    00000a81: 	movq	-0x8(%rsp), %r11
    00000a86: 	addsd	(%rax), %xmm2
    00000a8a: 	addsd	(%r9), %xmm1
    00000a8f: 	addsd	(%rdi), %xmm3
    00000a93: 	addsd	(%r11), %xmm4
    00000a98: 	addq	$0x4, -0x20(%rsp)
    00000a9e: 	movq	-0x20(%rsp), %r10
    00000aa3: 	movsd	%xmm1, (%r9)
    00000aa8: 	addq	%rsi, %r9
    00000aab: 	movsd	%xmm2, (%rax)
    00000aaf: 	addq	%rsi, %rax
    00000ab2: 	movq	%rax, 0x8(%rsp)
    00000ab7: 	movq	-0x68(%rsp), %rax
    00000abc: 	movsd	%xmm3, (%rdi)
    00000ac0: 	addq	%rsi, %rdi
    00000ac3: 	movsd	%xmm4, (%r11)
    00000ac8: 	addq	%r13, %rax
    00000acb: 	addq	%rsi, %r11
    00000ace: 	addq	%rsi, 0x30(%rsp)
    00000ad3: 	addq	%rsi, 0x28(%rsp)
    00000ad8: 	addq	%rsi, 0x20(%rsp)
    00000add: 	addq	%rsi, 0x18(%rsp)
    00000ae2: 	movq	%r9, 0x10(%rsp)
    00000ae7: 	movq	%rdi, (%rsp)
    00000aeb: 	movq	%r11, -0x8(%rsp)
    00000af0: 	movq	%rax, -0x70(%rsp)
    00000af5: 	cmpq	0x60(%rsp), %r10
    00000afa: 	jb	.Ltmp43 # Offset: 2810
    00000b00: 	movq	%r13, %r12
    00000b03: 	movq	%r10, %rcx
.Ltmp55:
    00000b06: 	cmpq	%rcx, 0x98(%rsp)
    00000b0e: 	jbe	.Ltmp44 # Offset: 2830
    00000b14: 	movq	%rcx, %rdi
    00000b17: 	movq	0x48(%rsp), %rax
    00000b1c: 	movq	%rbx, -0x68(%rsp)
    00000b21: 	imulq	%r12, %rdi
    00000b25: 	movq	0x50(%rsp), %r9
    00000b2a: 	movq	0xb0(%rsp), %r11
    00000b32: 	movq	%r15, -0x70(%rsp)
    00000b37: 	movq	0x58(%rsp), %r10
    00000b3c: 	movq	0xa8(%rsp), %rbx
    00000b44: 	movq	%rcx, %r15
    00000b47: 	movq	0xb8(%rsp), %r13
    00000b4f: 	addq	%rdi, %rax
    00000b52: 	leaq	(%rbp,%rax,8), %r8
.Ltmp49:
    00000b57: 	cmpq	-0x10(%rsp), %r10
    00000b5c: 	jbe	.Ltmp45 # Offset: 2908
    00000b62: 	movq	0xa0(%rsp), %rax
    00000b6a: 	pxor	%xmm4, %xmm4
    00000b6e: 	movq	-0x10(%rsp), %rcx
    00000b73: 	movapd	%xmm4, %xmm3
    00000b77: 	movapd	%xmm4, %xmm2
    00000b7b: 	movapd	%xmm4, %xmm0
    00000b7f: 	leaq	(%r8,%rax), %rdx
    00000b83: 	movq	%r14, %rax
    00000b86: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp46:
    00000b90: 	movsd	(%rax), %xmm1
    00000b94: 	mulsd	(%rdx), %xmm1
    00000b98: 	addq	$0x4, %rcx
    00000b9c: 	addq	$0x20, %rdx
    00000ba0: 	addsd	%xmm1, %xmm0
    00000ba4: 	movsd	(%rax,%r12,8), %xmm1
    00000baa: 	mulsd	-0x18(%rdx), %xmm1
    00000baf: 	addsd	%xmm1, %xmm2
    00000bb3: 	movsd	(%rax,%r11,8), %xmm1
    00000bb9: 	mulsd	-0x10(%rdx), %xmm1
    00000bbe: 	addsd	%xmm1, %xmm3
    00000bc2: 	movsd	(%rax,%r13,8), %xmm1
    00000bc8: 	mulsd	-0x8(%rdx), %xmm1
    00000bcd: 	addq	%rsi, %rax
    00000bd0: 	addsd	%xmm1, %xmm4
    00000bd4: 	cmpq	%r10, %rcx
    00000bd7: 	jb	.Ltmp46 # Offset: 3031
.Ltmp54:
    00000bd9: 	cmpq	%rcx, 0x48(%rsp)
    00000bde: 	jbe	.Ltmp47 # Offset: 3038
    00000be0: 	movq	-0x18(%rsp), %rdx
    00000be5: 	movq	%r12, %rax
    00000be8: 	imulq	%rcx, %rax
    00000bec: 	addq	%rdi, %rcx
    00000bef: 	addq	-0x28(%rsp), %rax
    00000bf4: 	leaq	(%rdx,%rax,8), %rax
    00000bf8: 	leaq	(%rbp,%rcx,8), %rdx
    00000bfd: 	nopl	(%rax) # Size: 3
.Ltmp48:
    00000c00: 	movsd	(%rax), %xmm1
    00000c04: 	mulsd	(%rdx), %xmm1
    00000c08: 	addq	$0x8, %rdx
    00000c0c: 	addq	%r9, %rax
    00000c0f: 	addsd	%xmm1, %xmm0
    00000c13: 	cmpq	%rdx, %r8
    00000c16: 	jne	.Ltmp48 # Offset: 3094
.Ltmp47:
    00000c18: 	addsd	%xmm0, %xmm2
    00000c1c: 	addq	$0x1, %r15
    00000c20: 	addq	%r9, %r8
    00000c23: 	addsd	%xmm3, %xmm2
    00000c27: 	addsd	%xmm4, %xmm2
    00000c2b: 	addsd	(%rbx,%rdi,8), %xmm2
    00000c30: 	movsd	%xmm2, (%rbx,%rdi,8)
    00000c35: 	addq	%r12, %rdi
    00000c38: 	cmpq	%r15, 0x98(%rsp)
    00000c40: 	jne	.Ltmp49 # Offset: 3136
    00000c46: 	movq	-0x70(%rsp), %r15
    00000c4b: 	movq	-0x68(%rsp), %rbx
.Ltmp44:
    00000c50: 	addq	$0x1, -0x28(%rsp)
    00000c56: 	movq	-0x28(%rsp), %rax
    00000c5b: 	addq	$0x8, %r14
    00000c5f: 	addq	$0x8, %r15
    00000c63: 	addq	$0x8, 0xa8(%rsp)
    00000c6c: 	addq	$0x8, 0xc8(%rsp)
    00000c75: 	addq	$0x8, 0xc0(%rsp)
    00000c7e: 	cmpq	%rax, %r12
    00000c81: 	jne	.Ltmp50 # Offset: 3201
    00000c87: 	movq	0x1b0(%rsp), %rax
    00000c8f: 	subq	$-0x80, 0x70(%rsp)
    00000c95: 	movq	%rsi, %r15
    00000c98: 	movq	0x180(%rsp), %r14
    00000ca0: 	movq	0x178(%rsp), %r13
    00000ca8: 	addq	%rax, %r14
    00000cab: 	addq	%rax, %r13
    00000cae: 	cmpq	%r12, 0x148(%rsp)
    00000cb6: 	jb	.Ltmp51 # Offset: 3254
    00000cbc: 	movq	%r12, %rax
    00000cbf: 	movq	0x158(%rsp), %rsi
    00000cc7: 	movq	0x160(%rsp), %rcx
    00000ccf: 	movq	%r12, %r14
    00000cd2: 	shlq	$0x6, %rax
    00000cd6: 	addq	%rcx, 0xe0(%rsp)
    00000cde: 	subq	%r12, %rax
    00000ce1: 	addq	%rcx, 0xd0(%rsp)
    00000ce9: 	movq	0x150(%rsp), %rcx
    00000cf1: 	leaq	(%rsi,%rax,2), %rdx
    00000cf5: 	cmpq	%rcx, 0x140(%rsp)
    00000cfd: 	jb	.Ltmp52 # Offset: 3325
.Ltmp34:
    00000d03: 	addq	$0x1c0, %rsp
    00000d0a: 	popq	%rbx
    00000d0b: 	popq	%rbp
    00000d0c: 	popq	%r12
    00000d0e: 	popq	%r13
    00000d10: 	popq	%r14
    00000d12: 	popq	%r15
    00000d14: 	retq # Offset: 3348
    00000d15: 	nopl	(%rax) # Size: 3
.Ltmp37:
    00000d18: 	pxor	%xmm4, %xmm4
    00000d1c: 	movq	%r15, 0x38(%rsp)
    00000d21: 	movq	0x18(%rsp), %r11
    00000d26: 	movq	%rdi, %rax
    00000d29: 	movq	%rdx, 0x40(%rsp)
    00000d2e: 	movq	0x20(%rsp), %r10
    00000d33: 	movq	%r14, %rdi
    00000d36: 	movapd	%xmm4, %xmm3
    00000d3a: 	movq	0x28(%rsp), %r9
    00000d3f: 	movq	0x30(%rsp), %r8
    00000d44: 	movapd	%xmm4, %xmm2
    00000d48: 	movapd	%xmm4, %xmm1
    00000d4c: 	movq	0xb0(%rsp), %r12
    00000d54: 	movq	0x58(%rsp), %rdx
    00000d59: 	movq	0xb8(%rsp), %r15
    00000d61: 	nopl	(%rax) # Size: 7
.Ltmp53:
    00000d68: 	movsd	(%rdi), %xmm8
    00000d6d: 	movsd	(%rdi,%r13,8), %xmm0
    00000d73: 	addq	$0x4, %rax
    00000d77: 	addq	$0x20, %r8
    00000d7b: 	movsd	-0x18(%r8), %xmm5
    00000d81: 	movsd	-0x20(%r8), %xmm9
    00000d87: 	addq	$0x20, %r9
    00000d8b: 	addq	$0x20, %r10
    00000d8f: 	movsd	(%rdi,%r12,8), %xmm7
    00000d95: 	movsd	(%rdi,%r15,8), %xmm6
    00000d9b: 	addq	$0x20, %r11
    00000d9f: 	addq	%rsi, %rdi
    00000da2: 	mulsd	%xmm8, %xmm9
    00000da7: 	mulsd	%xmm0, %xmm5
    00000dab: 	addsd	%xmm9, %xmm5
    00000db0: 	movsd	-0x10(%r8), %xmm9
    00000db6: 	mulsd	%xmm7, %xmm9
    00000dbb: 	addsd	%xmm9, %xmm5
    00000dc0: 	movsd	-0x8(%r8), %xmm9
    00000dc6: 	mulsd	%xmm6, %xmm9
    00000dcb: 	addsd	%xmm9, %xmm5
    00000dd0: 	movsd	-0x20(%r9), %xmm9
    00000dd6: 	mulsd	%xmm8, %xmm9
    00000ddb: 	addsd	%xmm5, %xmm1
    00000ddf: 	movsd	-0x18(%r9), %xmm5
    00000de5: 	mulsd	%xmm0, %xmm5
    00000de9: 	addsd	%xmm9, %xmm5
    00000dee: 	movsd	-0x10(%r9), %xmm9
    00000df4: 	mulsd	%xmm7, %xmm9
    00000df9: 	addsd	%xmm9, %xmm5
    00000dfe: 	movsd	-0x8(%r9), %xmm9
    00000e04: 	mulsd	%xmm6, %xmm9
    00000e09: 	addsd	%xmm9, %xmm5
    00000e0e: 	movsd	-0x20(%r10), %xmm9
    00000e14: 	mulsd	%xmm8, %xmm9
    00000e19: 	addsd	%xmm5, %xmm2
    00000e1d: 	movsd	-0x18(%r10), %xmm5
    00000e23: 	mulsd	-0x20(%r11), %xmm8
    00000e29: 	mulsd	%xmm0, %xmm5
    00000e2d: 	mulsd	-0x18(%r11), %xmm0
    00000e33: 	addsd	%xmm9, %xmm5
    00000e38: 	movsd	-0x10(%r10), %xmm9
    00000e3e: 	addsd	%xmm8, %xmm0
    00000e43: 	mulsd	%xmm7, %xmm9
    00000e48: 	mulsd	-0x10(%r11), %xmm7
    00000e4e: 	addsd	%xmm9, %xmm5
    00000e53: 	movsd	-0x8(%r10), %xmm9
    00000e59: 	addsd	%xmm7, %xmm0
    00000e5d: 	mulsd	%xmm6, %xmm9
    00000e62: 	mulsd	-0x8(%r11), %xmm6
    00000e68: 	addsd	%xmm9, %xmm5
    00000e6d: 	addsd	%xmm6, %xmm0
    00000e71: 	addsd	%xmm5, %xmm3
    00000e75: 	addsd	%xmm0, %xmm4
    00000e79: 	cmpq	%rax, %rdx
    00000e7c: 	ja	.Ltmp53 # Offset: 3708
    00000e82: 	movq	0x38(%rsp), %r15
    00000e87: 	movq	0x40(%rsp), %rdx
    00000e8c: 	jmp	.Ltmp39 # Offset: 3724
    00000e91: 	nopl	(%rax) # Size: 7
.Ltmp36:
    00000e98: 	pxor	%xmm4, %xmm4
    00000e9c: 	movq	%rdi, %rax
    00000e9f: 	movapd	%xmm4, %xmm3
    00000ea3: 	movapd	%xmm4, %xmm2
    00000ea7: 	movapd	%xmm4, %xmm1
    00000eab: 	jmp	.Ltmp39 # Offset: 3755
.Ltmp45:
    00000eb0: 	pxor	%xmm4, %xmm4
    00000eb4: 	movq	-0x10(%rsp), %rcx
    00000eb9: 	movapd	%xmm4, %xmm3
    00000ebd: 	movapd	%xmm4, %xmm2
    00000ec1: 	movapd	%xmm4, %xmm0
    00000ec5: 	jmp	.Ltmp54 # Offset: 3781
.Ltmp35:
    00000eca: 	movq	%rdi, -0x20(%rsp)
    00000ecf: 	movq	%rdi, %rcx
    00000ed2: 	jmp	.Ltmp55 # Offset: 3794
DWARF CFI Instructions:
    <empty>
End of Function "_ZN28matmul_IJK_blocked_unrolled3IdEclEPKdS2_Pdmm.isra.0/1(*2)"

Binary Function "_ZN28matmul_IJK_blocked_unrolled2IdEclEPKdS2_Pdmm.isra.0/1(*2)" after disassembly {
  All names   : _ZN28matmul_IJK_blocked_unrolled2IdEclEPKdS2_Pdmm.isra.0/1
                _ZN28matmul_IJK_blocked_unrolled2IdEclEPKdS2_Pdmm.isra.0/matrix_multiply.cpp/1
  Number      : 12
  State       : disassembled
  Address     : 0x36d0
  Size        : 0xb3a
  MaxSize     : 0xb40
  Offset      : 0x36d0
  Section     : .text
  Orc Section : .local.text._ZN28matmul_IJK_blocked_unrolled2IdEclEPKdS2_Pdmm.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB011:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	subq	$0x100, %rsp
    00000011: 	movq	%rdi, 0x38(%rsp)
    00000016: 	movq	%rsi, -0x20(%rsp)
    0000001b: 	movq	%rdx, 0x88(%rsp)
    00000023: 	movq	%rcx, 0xd0(%rsp)
    0000002b: 	testq	%rcx, %rcx
    0000002e: 	je	.Ltmp56 # Offset: 46
    00000034: 	leaq	-0x3(%r8), %rax
    00000038: 	movq	%rax, 0x58(%rsp)
    0000003d: 	testq	%r8, %r8
    00000040: 	je	.Ltmp56 # Offset: 64
    00000046: 	movq	%r8, %rax
    00000049: 	movq	%r8, %r12
    0000004c: 	pxor	%xmm6, %xmm6
    00000050: 	movq	%r8, %r14
    00000053: 	shlq	$0x7, %rax
    00000057: 	shlq	$0x6, %r12
    0000005b: 	movq	$0x0, 0xa0(%rsp)
    00000067: 	movdqa	DATAat0x2d980(%rip), %xmm5
    0000006f: 	movq	%rax, 0xc0(%rsp)
    00000077: 	movq	%r8, %rax
    0000007a: 	movq	%r12, %r13
    0000007d: 	movdqa	DATAat0x2d990(%rip), %xmm4
    00000085: 	shlq	$0xa, %rax
    00000089: 	shlq	$0x5, %r14
    0000008d: 	movq	%r8, %r12
    00000090: 	movq	$0x0, 0x50(%rsp)
    00000099: 	movq	%rax, 0xc8(%rsp)
    000000a1: 	movq	%r8, %rax
    000000a4: 	movq	$0x0, 0x90(%rsp)
    000000b0: 	shlq	$0x4, %rax
    000000b4: 	addq	%rsi, %rax
    000000b7: 	movq	%rax, 0xd8(%rsp)
    000000bf: 	leaq	(,%r8,8), %rax
    000000c7: 	movq	%rax, -0x10(%rsp)
    000000cc: 	leaq	(%r8,%r8), %rax
    000000d0: 	movq	%rax, 0xe0(%rsp)
    000000d8: 	addq	%r8, %rax
    000000db: 	movq	%rax, 0xe8(%rsp)
.Ltmp73:
    000000e3: 	movq	0x90(%rsp), %rax
    000000eb: 	movq	0xd0(%rsp), %rbx
    000000f3: 	movq	$0x0, 0xa8(%rsp)
    000000ff: 	movq	$0x0, 0x98(%rsp)
    0000010b: 	movq	%rax, 0x48(%rsp)
    00000110: 	subq	$-0x80, %rax
    00000114: 	cmpq	%rbx, %rax
    00000117: 	movq	%rax, 0x90(%rsp)
    0000011f: 	cmovbeq	%rax, %rbx
    00000123: 	movq	-0x20(%rsp), %rax
    00000128: 	movq	%rax, 0xb0(%rsp)
    00000130: 	movq	0xd8(%rsp), %rax
    00000138: 	movq	%rbx, -0x40(%rsp)
    0000013d: 	movq	%rax, 0xb8(%rsp)
    00000145: 	movl	$0x4, %eax
    0000014a: 	movq	%rax, %xmm7
    0000014f: 	movq	0x38(%rsp), %rax
    00000154: 	addq	0xa0(%rsp), %rax
    0000015c: 	movq	%rax, 0xf0(%rsp)
.Ltmp72:
    00000164: 	movq	0x98(%rsp), %rbx
    0000016c: 	movq	%rbx, -0x60(%rsp)
    00000171: 	movq	%rbx, %rax
    00000174: 	subq	$-0x80, %rbx
    00000178: 	cmpq	%r12, %rbx
    0000017b: 	movq	%rbx, %rsi
    0000017e: 	movq	%rbx, 0x98(%rsp)
    00000186: 	cmovaq	%r12, %rsi
    0000018a: 	cmpq	$0x0, 0x58(%rsp)
    00000190: 	leaq	-0x3(%rsi), %r9
    00000194: 	movq	%rsi, -0x30(%rsp)
    00000199: 	movq	%r9, -0x18(%rsp)
    0000019e: 	je	.Ltmp57 # Offset: 414
    000001a4: 	movq	0xb0(%rsp), %rdi
    000001ac: 	movq	-0x10(%rsp), %rcx
    000001b1: 	movq	$0x0, -0x28(%rsp)
    000001ba: 	movq	0x88(%rsp), %rbx
    000001c2: 	movq	0x38(%rsp), %rbp
    000001c7: 	movq	%r12, -0x48(%rsp)
    000001cc: 	addq	0xa0(%rsp), %rbx
    000001d4: 	movq	0xb8(%rsp), %r11
    000001dc: 	movq	%rdi, -0x8(%rsp)
    000001e1: 	movq	%rbx, 0x40(%rsp)
    000001e6: 	movq	%rdi, %rbx
    000001e9: 	addq	%rcx, %rbx
    000001ec: 	movq	%r11, 0x8(%rsp)
    000001f1: 	movq	%rbx, (%rsp)
    000001f5: 	movq	%r11, %rbx
    000001f8: 	addq	%rcx, %rbx
    000001fb: 	movq	0xf0(%rsp), %rcx
    00000203: 	movq	%rbx, 0x10(%rsp)
    00000208: 	movq	%rax, %rbx
    0000020b: 	leaq	(%rcx,%rax,8), %rax
    0000020f: 	movq	%rax, 0x80(%rsp)
    00000217: 	movq	%rsi, %rax
    0000021a: 	subq	%rbx, %rax
    0000021d: 	leaq	-0x4(%rax), %rcx
    00000221: 	movq	%xmm7, %rax
    00000226: 	cmpq	$0x2, %rax
    0000022a: 	seta	%dl
    0000022d: 	cmpq	$-0x4, %r9
    00000231: 	setbe	%al
    00000234: 	andl	%edx, %eax
    00000236: 	cmpq	$0x7, %rcx
    0000023a: 	seta	%dl
    0000023d: 	andl	%edx, %eax
    0000023f: 	movb	%al, 0x1f(%rsp)
    00000243: 	movq	%rcx, %rax
    00000246: 	shrq	$0x2, %rax
    0000024a: 	addq	$0x1, %rax
    0000024e: 	movq	%rax, %rsi
    00000251: 	movq	%rax, 0x30(%rsp)
    00000256: 	andq	$-0x2, %rax
    0000025a: 	movq	%rax, 0x20(%rsp)
    0000025f: 	leaq	(%rbx,%rax,4), %rax
    00000263: 	shrq	%rsi
    00000266: 	movq	%rax, %rbx
    00000269: 	movq	%rax, -0x78(%rsp)
    0000026e: 	addq	$0x4, %rax
    00000272: 	imulq	%r12, %rbx
    00000276: 	movq	%rsi, 0x28(%rsp)
    0000027b: 	movq	%rax, -0x70(%rsp)
    00000280: 	movq	%rbx, 0x78(%rsp)
    00000285: 	addq	%r12, %rbx
    00000288: 	movq	%rbx, 0x70(%rsp)
    0000028d: 	addq	%r12, %rbx
    00000290: 	movq	%rbx, 0x68(%rsp)
    00000295: 	addq	%r12, %rbx
    00000298: 	movq	%rbx, 0x60(%rsp)
    0000029d: 	nopl	(%rax) # Size: 3
.Ltmp64:
    000002a0: 	movq	0x48(%rsp), %rcx
    000002a5: 	cmpq	%rcx, -0x40(%rsp)
    000002aa: 	jbe	.Ltmp58 # Offset: 682
    000002b0: 	movq	-0x28(%rsp), %rbx
    000002b5: 	movq	0x78(%rsp), %rax
    000002ba: 	movq	%rcx, -0x68(%rsp)
    000002bf: 	movq	-0x20(%rsp), %rsi
    000002c4: 	movq	0x40(%rsp), %r12
    000002c9: 	movq	%r13, -0x50(%rsp)
    000002ce: 	addq	%rbx, %rax
    000002d1: 	leaq	(%rsi,%rax,8), %r11
    000002d5: 	movq	0x70(%rsp), %rax
    000002da: 	addq	%rbx, %rax
    000002dd: 	leaq	(%rsi,%rax,8), %r10
    000002e1: 	movq	0x68(%rsp), %rax
    000002e6: 	addq	%rbx, %rax
    000002e9: 	leaq	(%rsi,%rax,8), %r9
    000002ed: 	movq	0x60(%rsp), %rax
    000002f2: 	addq	%rbx, %rax
    000002f5: 	movq	0x50(%rsp), %rbx
    000002fa: 	leaq	(%rsi,%rax,8), %r8
    000002fe: 	movq	0x80(%rsp), %rax
    00000306: 	movq	%rax, -0x58(%rsp)
    0000030b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp63:
    00000310: 	movq	-0x60(%rsp), %rsi
    00000315: 	pxor	%xmm3, %xmm3
    00000319: 	movapd	%xmm3, %xmm2
    0000031d: 	movq	%rsi, %rax
    00000320: 	cmpq	%rsi, -0x18(%rsp)
    00000325: 	jbe	.Ltmp59 # Offset: 805
    0000032b: 	cmpb	$0x0, 0x1f(%rsp)
    00000330: 	je	.Ltmp60 # Offset: 816
    00000336: 	movq	%rsi, %xmm14
    0000033b: 	pxor	%xmm3, %xmm3
    0000033f: 	movq	(%rsp), %rcx
    00000343: 	xorl	%r15d, %r15d
    00000346: 	movq	%r8, -0x38(%rsp)
    0000034b: 	movq	-0x58(%rsp), %rdi
    00000350: 	punpcklqdq	%xmm7, %xmm14
    00000355: 	movapd	%xmm3, %xmm2
    00000359: 	movq	-0x8(%rsp), %rsi
    0000035e: 	movq	0x8(%rsp), %rdx
    00000363: 	movq	0x10(%rsp), %rax
    00000368: 	movq	-0x50(%rsp), %r13
    0000036d: 	movq	0x28(%rsp), %r8
    00000372: 	nopw	(%rax,%rax) # Size: 6
.Ltmp61:
    00000378: 	movupd	(%rdi), %xmm10
    0000037d: 	movupd	0x10(%rdi), %xmm9
    00000383: 	movdqa	%xmm14, %xmm13
    00000388: 	addq	$0x1, %r15
    0000038c: 	movlpd	0x8(%rdi), %xmm9
    00000392: 	movupd	0x20(%rdi), %xmm1
    00000397: 	addq	$0x40, %rdi
    0000039b: 	paddq	%xmm5, %xmm14
    000003a0: 	movhpd	-0x30(%rdi), %xmm10
    000003a6: 	movupd	-0x10(%rdi), %xmm0
    000003ab: 	movlpd	-0x18(%rdi), %xmm0
    000003b0: 	paddq	%xmm4, %xmm13
    000003b5: 	movhpd	-0x10(%rdi), %xmm1
    000003ba: 	movapd	%xmm10, %xmm11
    000003bf: 	movapd	%xmm9, %xmm12
    000003c4: 	movsd	0x8(%rcx), %xmm8
    000003ca: 	unpcklpd	%xmm1, %xmm11
    000003cf: 	unpcklpd	%xmm0, %xmm12
    000003d4: 	unpckhpd	%xmm0, %xmm9
    000003d9: 	movsd	(%rsi), %xmm0
    000003dd: 	unpckhpd	%xmm1, %xmm10
    000003e2: 	movsd	(%rcx), %xmm1
    000003e6: 	movhpd	0x8(%r14,%rcx), %xmm8
    000003ed: 	movsd	0x10(%rsi), %xmm15
    000003f3: 	mulpd	%xmm12, %xmm8
    000003f8: 	movhpd	(%rsi,%r14), %xmm0
    000003fe: 	movhpd	(%rcx,%r14), %xmm1
    00000404: 	movhpd	0x10(%r14,%rsi), %xmm15
    0000040b: 	mulpd	%xmm11, %xmm0
    00000410: 	mulpd	%xmm12, %xmm1
    00000415: 	mulpd	%xmm11, %xmm15
    0000041a: 	addpd	%xmm0, %xmm1
    0000041e: 	movsd	(%rdx), %xmm0
    00000422: 	movhpd	(%rdx,%r14), %xmm0
    00000428: 	mulpd	%xmm10, %xmm0
    0000042d: 	addpd	%xmm0, %xmm1
    00000431: 	movsd	(%rax), %xmm0
    00000435: 	movhpd	(%rax,%r14), %xmm0
    0000043b: 	mulpd	%xmm9, %xmm0
    00000440: 	addpd	%xmm0, %xmm1
    00000444: 	movsd	0x8(%rsi), %xmm0
    00000449: 	movhpd	0x8(%r14,%rsi), %xmm0
    00000450: 	mulpd	%xmm11, %xmm0
    00000455: 	addpd	%xmm0, %xmm8
    0000045a: 	movsd	0x8(%rdx), %xmm0
    0000045f: 	movhpd	0x8(%r14,%rdx), %xmm0
    00000466: 	mulpd	%xmm10, %xmm0
    0000046b: 	addpd	%xmm0, %xmm8
    00000470: 	movsd	0x8(%rax), %xmm0
    00000475: 	movhpd	0x8(%r14,%rax), %xmm0
    0000047c: 	mulpd	%xmm9, %xmm0
    00000481: 	addpd	%xmm0, %xmm8
    00000486: 	movsd	0x10(%rcx), %xmm0
    0000048b: 	movhpd	0x10(%r14,%rcx), %xmm0
    00000492: 	mulpd	%xmm12, %xmm0
    00000497: 	addpd	%xmm15, %xmm0
    0000049c: 	movsd	0x10(%rdx), %xmm15
    000004a2: 	movhpd	0x10(%r14,%rdx), %xmm15
    000004a9: 	mulpd	%xmm10, %xmm15
    000004ae: 	addpd	%xmm15, %xmm0
    000004b3: 	movsd	0x10(%rax), %xmm15
    000004b9: 	movhpd	0x10(%r14,%rax), %xmm15
    000004c0: 	mulpd	%xmm9, %xmm15
    000004c5: 	addpd	%xmm15, %xmm0
    000004ca: 	movsd	0x18(%rcx), %xmm15
    000004d0: 	movhpd	0x18(%r14,%rcx), %xmm15
    000004d7: 	addq	%r13, %rcx
    000004da: 	mulpd	%xmm12, %xmm15
    000004df: 	movsd	0x18(%rsi), %xmm12
    000004e5: 	movhpd	0x18(%r14,%rsi), %xmm12
    000004ec: 	addq	%r13, %rsi
    000004ef: 	mulpd	%xmm11, %xmm12
    000004f4: 	addpd	%xmm12, %xmm15
    000004f9: 	movsd	0x18(%rdx), %xmm12
    000004ff: 	movhpd	0x18(%r14,%rdx), %xmm12
    00000506: 	addq	%r13, %rdx
    00000509: 	mulpd	%xmm12, %xmm10
    0000050e: 	movapd	%xmm15, %xmm11
    00000513: 	addpd	%xmm10, %xmm11
    00000518: 	movsd	0x18(%rax), %xmm10
    0000051e: 	movhpd	0x18(%r14,%rax), %xmm10
    00000525: 	addq	%r13, %rax
    00000528: 	mulpd	%xmm9, %xmm10
    0000052d: 	movapd	%xmm11, %xmm9
    00000532: 	addpd	%xmm10, %xmm9
    00000537: 	movapd	%xmm1, %xmm10
    0000053c: 	unpckhpd	%xmm8, %xmm1
    00000541: 	unpcklpd	%xmm8, %xmm10
    00000546: 	addpd	%xmm10, %xmm2
    0000054b: 	addpd	%xmm1, %xmm2
    0000054f: 	movapd	%xmm0, %xmm1
    00000553: 	unpckhpd	%xmm9, %xmm0
    00000558: 	unpcklpd	%xmm9, %xmm1
    0000055d: 	addpd	%xmm1, %xmm3
    00000561: 	addpd	%xmm0, %xmm3
    00000565: 	cmpq	%r15, %r8
    00000568: 	ja	.Ltmp61 # Offset: 1384
    0000056e: 	movhlps	%xmm13, %xmm1
    00000572: 	movq	%r13, -0x50(%rsp)
    00000577: 	movq	-0x38(%rsp), %r8
    0000057c: 	movq	0x30(%rsp), %rdi
    00000581: 	movq	%xmm1, %rax
    00000586: 	cmpq	%rdi, 0x20(%rsp)
    0000058b: 	je	.Ltmp59 # Offset: 1419
    00000591: 	movq	-0x78(%rsp), %rax
    00000596: 	movupd	(%r10), %xmm11
    0000059b: 	movupd	0x10(%r10), %xmm14
    000005a1: 	movupd	0x10(%r8), %xmm13
    000005a7: 	addq	%rbx, %rax
    000005aa: 	leaq	(%rbp,%rax,8), %rax
    000005af: 	movupd	(%rax), %xmm1
    000005b3: 	movupd	0x10(%rax), %xmm0
    000005b8: 	movq	-0x70(%rsp), %rax
    000005bd: 	movapd	%xmm1, %xmm10
    000005c2: 	movapd	%xmm0, %xmm9
    000005c7: 	unpcklpd	%xmm1, %xmm10
    000005cc: 	unpckhpd	%xmm1, %xmm1
    000005d0: 	unpcklpd	%xmm0, %xmm9
    000005d5: 	movapd	%xmm1, %xmm8
    000005da: 	movupd	(%r11), %xmm1
    000005df: 	unpckhpd	%xmm0, %xmm0
    000005e3: 	mulpd	%xmm8, %xmm11
    000005e8: 	mulpd	%xmm10, %xmm1
    000005ed: 	mulpd	%xmm14, %xmm8
    000005f2: 	addpd	%xmm11, %xmm1
    000005f7: 	movupd	(%r9), %xmm11
    000005fc: 	mulpd	%xmm9, %xmm11
    00000601: 	addpd	%xmm11, %xmm1
    00000606: 	movupd	(%r8), %xmm11
    0000060b: 	mulpd	%xmm0, %xmm11
    00000610: 	mulpd	%xmm13, %xmm0
    00000615: 	addpd	%xmm11, %xmm1
    0000061a: 	addpd	%xmm1, %xmm2
    0000061e: 	movupd	0x10(%r11), %xmm1
    00000624: 	mulpd	%xmm10, %xmm1
    00000629: 	addpd	%xmm8, %xmm1
    0000062e: 	movupd	0x10(%r9), %xmm8
    00000634: 	mulpd	%xmm9, %xmm8
    00000639: 	addpd	%xmm8, %xmm1
    0000063e: 	addpd	%xmm0, %xmm1
    00000642: 	addpd	%xmm1, %xmm3
.Ltmp59:
    00000646: 	movq	-0x30(%rsp), %rdi
    0000064b: 	cmpq	%rax, %rdi
    0000064e: 	jbe	.Ltmp62 # Offset: 1614
    00000654: 	movq	-0x48(%rsp), %rsi
    00000659: 	leaq	(%rax,%rbx), %rdx
    0000065d: 	movq	-0x28(%rsp), %r15
    00000662: 	movsd	(%rbp,%rdx,8), %xmm1
    00000668: 	movq	-0x20(%rsp), %r13
    0000066d: 	movq	%rsi, %rdx
    00000670: 	imulq	%rax, %rdx
    00000674: 	unpcklpd	%xmm1, %xmm1
    00000678: 	leaq	(%rdx,%r15), %rcx
    0000067c: 	leaq	(%r13,%rcx,8), %rcx
    00000681: 	movupd	(%rcx), %xmm0
    00000685: 	mulpd	%xmm1, %xmm0
    00000689: 	addpd	%xmm0, %xmm2
    0000068d: 	movupd	0x10(%rcx), %xmm0
    00000692: 	leaq	0x1(%rax), %rcx
    00000696: 	mulpd	%xmm1, %xmm0
    0000069a: 	addpd	%xmm0, %xmm3
    0000069e: 	cmpq	%rcx, %rdi
    000006a1: 	jbe	.Ltmp62 # Offset: 1697
    000006a7: 	addq	%rbx, %rcx
    000006aa: 	addq	%rsi, %rdx
    000006ad: 	movsd	(%rbp,%rcx,8), %xmm1
    000006b3: 	leaq	(%rdx,%r15), %rcx
    000006b7: 	leaq	(%r13,%rcx,8), %rcx
    000006bc: 	movupd	(%rcx), %xmm0
    000006c0: 	unpcklpd	%xmm1, %xmm1
    000006c4: 	mulpd	%xmm1, %xmm0
    000006c8: 	addpd	%xmm0, %xmm2
    000006cc: 	movupd	0x10(%rcx), %xmm0
    000006d1: 	leaq	0x2(%rax), %rcx
    000006d5: 	mulpd	%xmm1, %xmm0
    000006d9: 	addpd	%xmm0, %xmm3
    000006dd: 	cmpq	%rcx, %rdi
    000006e0: 	jbe	.Ltmp62 # Offset: 1760
    000006e2: 	addq	%rbx, %rcx
    000006e5: 	addq	%rsi, %rdx
    000006e8: 	addq	$0x3, %rax
    000006ec: 	movsd	(%rbp,%rcx,8), %xmm1
    000006f2: 	leaq	(%rdx,%r15), %rcx
    000006f6: 	leaq	(%r13,%rcx,8), %rcx
    000006fb: 	movupd	(%rcx), %xmm0
    000006ff: 	unpcklpd	%xmm1, %xmm1
    00000703: 	mulpd	%xmm1, %xmm0
    00000707: 	addpd	%xmm0, %xmm2
    0000070b: 	movupd	0x10(%rcx), %xmm0
    00000710: 	mulpd	%xmm1, %xmm0
    00000714: 	addpd	%xmm0, %xmm3
    00000718: 	cmpq	%rax, %rdi
    0000071b: 	jbe	.Ltmp62 # Offset: 1819
    0000071d: 	addq	%rsi, %rdx
    00000720: 	addq	%rbx, %rax
    00000723: 	addq	%r15, %rdx
    00000726: 	movsd	(%rbp,%rax,8), %xmm1
    0000072c: 	leaq	(%r13,%rdx,8), %rax
    00000731: 	movupd	(%rax), %xmm0
    00000735: 	unpcklpd	%xmm1, %xmm1
    00000739: 	mulpd	%xmm1, %xmm0
    0000073d: 	addpd	%xmm0, %xmm2
    00000741: 	movupd	0x10(%rax), %xmm0
    00000746: 	mulpd	%xmm1, %xmm0
    0000074a: 	addpd	%xmm0, %xmm3
.Ltmp62:
    0000074e: 	movupd	0x10(%r12), %xmm0
    00000755: 	movupd	(%r12), %xmm1
    0000075b: 	movq	-0x10(%rsp), %rdi
    00000760: 	addq	$0x1, -0x68(%rsp)
    00000766: 	addpd	%xmm3, %xmm0
    0000076a: 	addpd	%xmm2, %xmm1
    0000076e: 	addq	%rdi, -0x58(%rsp)
    00000773: 	movq	-0x68(%rsp), %rax
    00000778: 	addq	-0x48(%rsp), %rbx
    0000077d: 	movups	%xmm1, (%r12)
    00000782: 	movups	%xmm0, 0x10(%r12)
    00000788: 	addq	%rdi, %r12
    0000078b: 	cmpq	%rax, -0x40(%rsp)
    00000790: 	jne	.Ltmp63 # Offset: 1936
    00000796: 	movq	-0x50(%rsp), %r13
.Ltmp58:
    0000079b: 	addq	$0x4, -0x28(%rsp)
    000007a1: 	movq	-0x28(%rsp), %rax
    000007a6: 	addq	$0x20, 0x40(%rsp)
    000007ac: 	addq	$0x20, -0x8(%rsp)
    000007b2: 	addq	$0x20, (%rsp)
    000007b7: 	addq	$0x20, 0x8(%rsp)
    000007bd: 	addq	$0x20, 0x10(%rsp)
    000007c3: 	cmpq	0x58(%rsp), %rax
    000007c8: 	jb	.Ltmp64 # Offset: 1992
    000007ce: 	movq	-0x48(%rsp), %r12
    000007d3: 	cmpq	-0x28(%rsp), %r12
    000007d8: 	jbe	.Ltmp65 # Offset: 2008
.Ltmp76:
    000007de: 	movq	0x48(%rsp), %rbx
    000007e3: 	cmpq	%rbx, -0x40(%rsp)
    000007e8: 	jbe	.Ltmp65 # Offset: 2024
    000007ee: 	movq	-0x28(%rsp), %r15
    000007f3: 	movq	0xa8(%rsp), %rax
    000007fb: 	movq	-0x20(%rsp), %rbx
    00000800: 	movq	-0x30(%rsp), %rsi
    00000805: 	addq	%r15, %rax
    00000808: 	movq	-0x60(%rsp), %rcx
    0000080d: 	movq	-0x18(%rsp), %rdi
    00000812: 	movq	%r13, -0x60(%rsp)
    00000817: 	leaq	(%rbx,%rax,8), %r10
    0000081b: 	movq	0x50(%rsp), %rax
    00000820: 	movq	0x38(%rsp), %rbx
    00000825: 	movq	%r10, -0x78(%rsp)
    0000082a: 	movq	-0x10(%rsp), %r8
    0000082f: 	movq	%rcx, %r13
    00000832: 	addq	%rsi, %rax
    00000835: 	movq	0xe0(%rsp), %r9
    0000083d: 	movq	0xe8(%rsp), %r10
    00000845: 	leaq	(%rbx,%rax,8), %rbx
    00000849: 	movq	%rcx, %rax
    0000084c: 	subq	%rsi, %rax
    0000084f: 	movq	%rbx, -0x68(%rsp)
    00000854: 	leaq	(,%rax,8), %r11
    0000085c: 	movq	%r11, -0x70(%rsp)
.Ltmp71:
    00000861: 	movq	0x88(%rsp), %rax
    00000869: 	movq	-0x68(%rsp), %rsi
    0000086e: 	movq	0x50(%rsp), %r11
    00000873: 	movq	0x48(%rsp), %rbx
    00000878: 	leaq	(%rax,%r15,8), %rbp
    0000087c: 	nopl	(%rax) # Size: 4
.Ltmp70:
    00000880: 	cmpq	%r13, %rdi
    00000883: 	jbe	.Ltmp66 # Offset: 2179
    00000889: 	movq	-0x70(%rsp), %rax
    0000088e: 	movq	%r13, %rcx
    00000891: 	movapd	%xmm6, %xmm3
    00000895: 	movapd	%xmm6, %xmm2
    00000899: 	movapd	%xmm6, %xmm8
    0000089e: 	movapd	%xmm6, %xmm0
    000008a2: 	leaq	(%rax,%rsi), %rdx
    000008a6: 	movq	-0x78(%rsp), %rax
    000008ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp67:
    000008b0: 	movsd	(%rax), %xmm1
    000008b4: 	mulsd	(%rdx), %xmm1
    000008b8: 	addq	$0x4, %rcx
    000008bc: 	addq	$0x20, %rdx
    000008c0: 	addsd	%xmm1, %xmm0
    000008c4: 	movsd	(%rax,%r12,8), %xmm1
    000008ca: 	mulsd	-0x18(%rdx), %xmm1
    000008cf: 	addsd	%xmm1, %xmm2
    000008d3: 	movsd	(%rax,%r9,8), %xmm1
    000008d9: 	mulsd	-0x10(%rdx), %xmm1
    000008de: 	addsd	%xmm1, %xmm3
    000008e2: 	movsd	(%rax,%r10,8), %xmm1
    000008e8: 	mulsd	-0x8(%rdx), %xmm1
    000008ed: 	addq	%r14, %rax
    000008f0: 	addsd	%xmm1, %xmm8
    000008f5: 	cmpq	%rdi, %rcx
    000008f8: 	jb	.Ltmp67 # Offset: 2296
.Ltmp75:
    000008fa: 	cmpq	%rcx, -0x30(%rsp)
    000008ff: 	jbe	.Ltmp68 # Offset: 2303
    00000901: 	movq	%r12, %rax
    00000904: 	movq	-0x20(%rsp), %rdx
    00000909: 	imulq	%rcx, %rax
    0000090d: 	addq	%r11, %rcx
    00000910: 	addq	%r15, %rax
    00000913: 	leaq	(%rdx,%rax,8), %rax
    00000917: 	movq	0x38(%rsp), %rdx
    0000091c: 	leaq	(%rdx,%rcx,8), %rdx
.Ltmp69:
    00000920: 	movsd	(%rax), %xmm1
    00000924: 	mulsd	(%rdx), %xmm1
    00000928: 	addq	$0x8, %rdx
    0000092c: 	addq	%r8, %rax
    0000092f: 	addsd	%xmm1, %xmm0
    00000933: 	cmpq	%rdx, %rsi
    00000936: 	jne	.Ltmp69 # Offset: 2358
.Ltmp68:
    00000938: 	addsd	%xmm2, %xmm0
    0000093c: 	addq	$0x1, %rbx
    00000940: 	addq	%r8, %rsi
    00000943: 	addsd	%xmm3, %xmm0
    00000947: 	addsd	%xmm8, %xmm0
    0000094c: 	addsd	(%rbp,%r11,8), %xmm0
    00000953: 	movsd	%xmm0, (%rbp,%r11,8)
    0000095a: 	addq	%r12, %r11
    0000095d: 	cmpq	%rbx, -0x40(%rsp)
    00000962: 	jne	.Ltmp70 # Offset: 2402
    00000968: 	addq	$0x1, %r15
    0000096c: 	addq	$0x8, -0x78(%rsp)
    00000972: 	cmpq	%r15, %r12
    00000975: 	ja	.Ltmp71 # Offset: 2421
    0000097b: 	movq	-0x60(%rsp), %r13
.Ltmp65:
    00000980: 	movq	%xmm7, %rax
    00000985: 	movq	0xc0(%rsp), %rbx
    0000098d: 	addq	%rbx, 0xa8(%rsp)
    00000995: 	subq	$-0x80, %rax
    00000999: 	movq	0xc8(%rsp), %rbx
    000009a1: 	addq	%rbx, 0xb0(%rsp)
    000009a9: 	addq	%rbx, 0xb8(%rsp)
    000009b1: 	movq	%rax, %xmm7
    000009b6: 	cmpq	%r12, 0x98(%rsp)
    000009be: 	jb	.Ltmp72 # Offset: 2494
    000009c4: 	movq	0xc0(%rsp), %rbx
    000009cc: 	addq	%rbx, 0x50(%rsp)
    000009d1: 	movq	0xc8(%rsp), %rbx
    000009d9: 	addq	%rbx, 0xa0(%rsp)
    000009e1: 	movq	0xd0(%rsp), %rbx
    000009e9: 	cmpq	%rbx, 0x90(%rsp)
    000009f1: 	jb	.Ltmp73 # Offset: 2545
.Ltmp56:
    000009f7: 	addq	$0x100, %rsp
    000009fe: 	popq	%rbx
    000009ff: 	popq	%rbp
    00000a00: 	popq	%r12
    00000a02: 	popq	%r13
    00000a04: 	popq	%r14
    00000a06: 	popq	%r15
    00000a08: 	retq # Offset: 2568
    00000a09: 	nopl	(%rax) # Size: 7
.Ltmp60:
    00000a10: 	movq	%r8, -0x38(%rsp)
    00000a15: 	movq	%rsi, %rax
    00000a18: 	pxor	%xmm3, %xmm3
    00000a1c: 	movq	0x10(%rsp), %r15
    00000a21: 	movq	0x8(%rsp), %rdi
    00000a26: 	movq	(%rsp), %rsi
    00000a2a: 	movapd	%xmm3, %xmm2
    00000a2e: 	movq	-0x8(%rsp), %rcx
    00000a33: 	movq	-0x58(%rsp), %rdx
    00000a38: 	movq	-0x50(%rsp), %r13
    00000a3d: 	movq	-0x18(%rsp), %r8
    00000a42: 	nopw	(%rax,%rax) # Size: 6
.Ltmp74:
    00000a48: 	movupd	(%rdx), %xmm11
    00000a4d: 	movupd	(%rdx), %xmm8
    00000a52: 	addq	$0x4, %rax
    00000a56: 	addq	$0x20, %rdx
    00000a5a: 	movupd	(%rsi), %xmm0
    00000a5e: 	movupd	(%rcx), %xmm10
    00000a63: 	unpckhpd	%xmm8, %xmm8
    00000a68: 	unpcklpd	%xmm11, %xmm11
    00000a6d: 	movupd	-0x10(%rdx), %xmm1
    00000a72: 	movupd	-0x10(%rdx), %xmm9
    00000a78: 	mulpd	%xmm8, %xmm0
    00000a7d: 	movupd	0x10(%r15), %xmm14
    00000a83: 	mulpd	%xmm11, %xmm10
    00000a88: 	unpcklpd	%xmm9, %xmm9
    00000a8d: 	unpckhpd	%xmm1, %xmm1
    00000a91: 	addpd	%xmm10, %xmm0
    00000a96: 	movupd	(%rdi), %xmm10
    00000a9b: 	mulpd	%xmm9, %xmm10
    00000aa0: 	addpd	%xmm10, %xmm0
    00000aa5: 	movupd	(%r15), %xmm10
    00000aaa: 	addq	%r14, %r15
    00000aad: 	mulpd	%xmm1, %xmm10
    00000ab2: 	mulpd	%xmm14, %xmm1
    00000ab7: 	addpd	%xmm10, %xmm0
    00000abc: 	addpd	%xmm0, %xmm2
    00000ac0: 	movupd	0x10(%rsi), %xmm0
    00000ac5: 	addq	%r14, %rsi
    00000ac8: 	mulpd	%xmm8, %xmm0
    00000acd: 	movupd	0x10(%rcx), %xmm8
    00000ad3: 	addq	%r14, %rcx
    00000ad6: 	mulpd	%xmm11, %xmm8
    00000adb: 	addpd	%xmm8, %xmm0
    00000ae0: 	movupd	0x10(%rdi), %xmm8
    00000ae6: 	addq	%r14, %rdi
    00000ae9: 	mulpd	%xmm9, %xmm8
    00000aee: 	addpd	%xmm8, %xmm0
    00000af3: 	addpd	%xmm1, %xmm0
    00000af7: 	addpd	%xmm0, %xmm3
    00000afb: 	cmpq	%r8, %rax
    00000afe: 	jb	.Ltmp74 # Offset: 2814
    00000b04: 	movq	%r13, -0x50(%rsp)
    00000b09: 	movq	-0x38(%rsp), %r8
    00000b0e: 	jmp	.Ltmp59 # Offset: 2830
.Ltmp66:
    00000b13: 	movapd	%xmm6, %xmm8
    00000b18: 	movapd	%xmm6, %xmm3
    00000b1c: 	movapd	%xmm6, %xmm2
    00000b20: 	movq	%r13, %rcx
    00000b23: 	movapd	%xmm6, %xmm0
    00000b27: 	jmp	.Ltmp75 # Offset: 2855
.Ltmp57:
    00000b2c: 	movq	$0x0, -0x28(%rsp)
    00000b35: 	jmp	.Ltmp76 # Offset: 2869
DWARF CFI Instructions:
    <empty>
End of Function "_ZN28matmul_IJK_blocked_unrolled2IdEclEPKdS2_Pdmm.isra.0/1(*2)"

Binary Function "_ZN28matmul_JIK_blocked_unrolled3IdEclEPKdS2_Pdmm.isra.0/1(*2)" after disassembly {
  All names   : _ZN28matmul_JIK_blocked_unrolled3IdEclEPKdS2_Pdmm.isra.0/1
                _ZN28matmul_JIK_blocked_unrolled3IdEclEPKdS2_Pdmm.isra.0/matrix_multiply.cpp/1
  Number      : 13
  State       : disassembled
  Address     : 0x4210
  Size        : 0xacc
  MaxSize     : 0xad0
  Offset      : 0x4210
  Section     : .text
  Orc Section : .local.text._ZN28matmul_JIK_blocked_unrolled3IdEclEPKdS2_Pdmm.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB012:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	subq	$0x110, %rsp
    00000011: 	movq	%rdi, -0x18(%rsp)
    00000016: 	movq	%rdx, 0xf0(%rsp)
    0000001e: 	movq	%rcx, 0x70(%rsp)
    00000023: 	testq	%r8, %r8
    00000026: 	je	.Ltmp77 # Offset: 38
    0000002c: 	testq	%rcx, %rcx
    0000002f: 	je	.Ltmp77 # Offset: 47
    00000035: 	leaq	(,%r8,8), %rax
    0000003d: 	leaq	(%r8,%r8), %rbx
    00000041: 	movq	%r8, %r12
    00000044: 	movq	%r8, %rbp
    00000047: 	leaq	(%rbx,%r8), %r14
    0000004b: 	shlq	$0x6, %r12
    0000004f: 	shlq	$0x5, %rbp
    00000053: 	pxor	%xmm5, %xmm5
    00000057: 	movq	%rax, 0x48(%rsp)
    0000005c: 	imulq	$0x3e8, %r8, %rax
    00000063: 	movq	%rbp, %r13
    00000066: 	movdqa	DATAat0x2d980(%rip), %xmm4
    0000006e: 	movq	%rsi, 0xe0(%rsp)
    00000076: 	movdqa	DATAat0x2d990(%rip), %xmm3
    0000007e: 	movq	%rsi, %rbp
    00000081: 	movq	$0x0, 0xd0(%rsp)
    0000008d: 	movq	%rax, 0x100(%rsp)
    00000095: 	movq	%r14, %rax
    00000098: 	movq	%r12, %r14
    0000009b: 	movq	%r8, %r12
    0000009e: 	movq	%rax, %r11
.Ltmp92:
    000000a1: 	movq	0xd0(%rsp), %rax
    000000a9: 	movq	$0x0, 0xa0(%rsp)
    000000b5: 	movq	$0x0, 0xd8(%rsp)
    000000c1: 	movq	%rax, 0x58(%rsp)
    000000c6: 	subq	$-0x80, %rax
    000000ca: 	cmpq	%r12, %rax
    000000cd: 	movq	%rax, %rdi
    000000d0: 	movq	%rax, 0xd0(%rsp)
    000000d8: 	leaq	-0x400(,%rax,8), %rax
    000000e0: 	movq	%rax, 0x98(%rsp)
    000000e8: 	movq	0xe0(%rsp), %rax
    000000f0: 	cmovaq	%r12, %rdi
    000000f4: 	movq	%rax, 0x60(%rsp)
    000000f9: 	movl	$0x4, %eax
    000000fe: 	movq	%rax, %xmm6
    00000103: 	movq	%r12, %rax
    00000106: 	movq	%rdi, 0x28(%rsp)
    0000010b: 	subq	$0x3, %rdi
    0000010f: 	shlq	$0x5, %rax
    00000113: 	movq	%rdi, -0x8(%rsp)
    00000118: 	subq	%r12, %rax
    0000011b: 	leaq	(%r12,%rax,4), %rax
    0000011f: 	movq	%rax, 0xf8(%rsp)
.Ltmp91:
    00000127: 	movq	0xd8(%rsp), %rdi
    0000012f: 	movq	-0x18(%rsp), %rcx
    00000134: 	movq	$0x0, -0x28(%rsp)
    0000013d: 	movq	$0x0, 0x30(%rsp)
    00000146: 	movq	%rdi, %rax
    00000149: 	movq	%rdi, -0x68(%rsp)
    0000014e: 	subq	$-0x80, %rdi
    00000152: 	cmpq	%rdi, %r12
    00000155: 	movq	%rdi, %rsi
    00000158: 	leaq	(%rcx,%rax,8), %r15
    0000015c: 	movq	%rdi, 0xd8(%rsp)
    00000164: 	cmovbeq	%r12, %rsi
    00000168: 	movq	0xf0(%rsp), %rdi
    00000170: 	movq	%r15, 0xa8(%rsp)
    00000178: 	movq	%r15, -0x10(%rsp)
    0000017d: 	leaq	-0x3(%rsi), %r10
    00000181: 	movq	%rsi, -0x30(%rsp)
    00000186: 	movq	%rdi, 0x38(%rsp)
    0000018b: 	movq	%rax, %rdi
    0000018e: 	movq	%rsi, %rax
    00000191: 	leaq	(%rcx,%rsi,8), %rsi
    00000195: 	movq	%rsi, 0x50(%rsp)
    0000019a: 	movq	0x60(%rsp), %rcx
    0000019f: 	subq	%rdi, %rax
    000001a2: 	movq	0x48(%rsp), %rsi
    000001a7: 	movq	%r10, -0x20(%rsp)
    000001ac: 	movq	%rbx, 0xc0(%rsp)
    000001b4: 	addq	%rsi, %rcx
    000001b7: 	movq	%r11, 0xc8(%rsp)
    000001bf: 	movq	%rcx, %rdx
    000001c2: 	movq	%rcx, 0xb0(%rsp)
    000001ca: 	movq	%rsi, %rcx
    000001cd: 	addq	%rdx, %rsi
    000001d0: 	addq	%rsi, %rcx
    000001d3: 	movq	%rsi, 0xb8(%rsp)
    000001db: 	movq	%rcx, 0x68(%rsp)
    000001e0: 	leaq	-0x4(%rax), %rcx
    000001e4: 	movq	%xmm6, %rax
    000001e9: 	cmpq	$0x2, %rax
    000001ed: 	seta	%dl
    000001f0: 	cmpq	$-0x4, %r10
    000001f4: 	setbe	%al
    000001f7: 	andl	%edx, %eax
    000001f9: 	cmpq	$0x7, %rcx
    000001fd: 	seta	%dl
    00000200: 	andl	%edx, %eax
    00000202: 	movb	%al, 0xf(%rsp)
    00000206: 	movq	%rcx, %rax
    00000209: 	shrq	$0x2, %rax
    0000020d: 	leaq	0x1(%rax), %rsi
    00000211: 	movq	%rsi, %rax
    00000214: 	movq	%rsi, 0x20(%rsp)
    00000219: 	andq	$-0x2, %rsi
    0000021d: 	shrq	%rax
    00000220: 	movq	%rsi, 0x10(%rsp)
    00000225: 	movq	%rax, 0x18(%rsp)
    0000022a: 	movq	0xa0(%rsp), %rax
    00000232: 	addq	%rbx, %rax
    00000235: 	addq	%r12, %rax
    00000238: 	movq	%rax, 0xe8(%rsp)
    00000240: 	leaq	(%rdi,%rsi,4), %rax
    00000244: 	movq	%rax, %rdi
    00000247: 	movq	%rax, 0x78(%rsp)
    0000024c: 	addq	$0x4, %rax
    00000250: 	imulq	%r12, %rdi
    00000254: 	movq	%rax, -0x78(%rsp)
    00000259: 	movq	%rdi, 0x90(%rsp)
    00000261: 	addq	%r12, %rdi
    00000264: 	movq	%rdi, 0x88(%rsp)
    0000026c: 	addq	%r12, %rdi
    0000026f: 	movq	%rdi, 0x80(%rsp)
    00000277: 	addq	%r12, %rdi
    0000027a: 	movq	%rdi, -0x70(%rsp)
    0000027f: 	nop # Size: 1
.Ltmp90:
    00000280: 	movq	0x58(%rsp), %r8
    00000285: 	movq	-0x8(%rsp), %rax
    0000028a: 	cmpq	%rax, %r8
    0000028d: 	jae	.Ltmp78 # Offset: 653
    00000293: 	movq	-0x28(%rsp), %rbx
    00000298: 	movq	0x78(%rsp), %rax
    0000029d: 	movq	%r13, -0x40(%rsp)
    000002a2: 	movq	-0x18(%rsp), %rdi
    000002a7: 	movq	0x38(%rsp), %r10
    000002ac: 	movq	%r12, (%rsp)
    000002b0: 	addq	%rbx, %rax
    000002b3: 	movq	0x80(%rsp), %r11
    000002bb: 	movq	0x90(%rsp), %r12
    000002c3: 	leaq	(%rdi,%rax,8), %r9
    000002c7: 	movq	0xa8(%rsp), %rax
    000002cf: 	addq	0x98(%rsp), %r10
    000002d7: 	leaq	(%rax,%rbx,8), %rax
    000002db: 	movq	0x88(%rsp), %rbx
    000002e3: 	movq	%rax, 0x40(%rsp)
    000002e8: 	movq	0x68(%rsp), %rax
    000002ed: 	movq	%rax, -0x48(%rsp)
    000002f2: 	movq	0xb8(%rsp), %rax
    000002fa: 	movq	%rax, -0x50(%rsp)
    000002ff: 	movq	0xb0(%rsp), %rax
    00000307: 	movq	%rax, -0x58(%rsp)
    0000030c: 	movq	0x60(%rsp), %rax
    00000311: 	movq	%rax, -0x60(%rsp)
    00000316: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp83:
    00000320: 	movq	-0x68(%rsp), %rdi
    00000325: 	pxor	%xmm2, %xmm2
    00000329: 	movapd	%xmm2, %xmm1
    0000032d: 	movq	%rdi, %rax
    00000330: 	cmpq	%rdi, -0x20(%rsp)
    00000335: 	jbe	.Ltmp79 # Offset: 821
    0000033b: 	cmpb	$0x0, 0xf(%rsp)
    00000340: 	je	.Ltmp80 # Offset: 832
    00000346: 	movq	%rdi, %xmm14
    0000034b: 	movq	%r8, -0x38(%rsp)
    00000350: 	pxor	%xmm2, %xmm2
    00000354: 	movq	-0x10(%rsp), %rdi
    00000359: 	movq	-0x60(%rsp), %rsi
    0000035e: 	movq	-0x58(%rsp), %rcx
    00000363: 	punpcklqdq	%xmm6, %xmm14
    00000368: 	xorl	%r15d, %r15d
    0000036b: 	movq	-0x50(%rsp), %rdx
    00000370: 	movq	-0x48(%rsp), %rax
    00000375: 	movapd	%xmm2, %xmm1
    00000379: 	movq	-0x40(%rsp), %r13
    0000037e: 	movq	0x18(%rsp), %r8
    00000383: 	nopl	(%rax,%rax) # Size: 5
.Ltmp81:
    00000388: 	movupd	(%rdi), %xmm10
    0000038d: 	movupd	0x10(%rdi), %xmm9
    00000393: 	movdqa	%xmm14, %xmm13
    00000398: 	addq	$0x1, %r15
    0000039c: 	movlpd	0x8(%rdi), %xmm9
    000003a2: 	movupd	0x20(%rdi), %xmm7
    000003a7: 	addq	$0x40, %rdi
    000003ab: 	paddq	%xmm4, %xmm14
    000003b0: 	movhpd	-0x30(%rdi), %xmm10
    000003b6: 	movupd	-0x10(%rdi), %xmm0
    000003bb: 	movlpd	-0x18(%rdi), %xmm0
    000003c0: 	paddq	%xmm3, %xmm13
    000003c5: 	movhpd	-0x10(%rdi), %xmm7
    000003ca: 	movapd	%xmm10, %xmm11
    000003cf: 	movapd	%xmm9, %xmm12
    000003d4: 	movsd	0x8(%rcx), %xmm8
    000003da: 	unpcklpd	%xmm7, %xmm11
    000003df: 	unpcklpd	%xmm0, %xmm12
    000003e4: 	unpckhpd	%xmm0, %xmm9
    000003e9: 	movsd	(%rsi), %xmm0
    000003ed: 	unpckhpd	%xmm7, %xmm10
    000003f2: 	movsd	(%rcx), %xmm7
    000003f6: 	movhpd	0x8(%rcx,%r13), %xmm8
    000003fd: 	movsd	0x10(%rsi), %xmm15
    00000403: 	mulpd	%xmm12, %xmm8
    00000408: 	movhpd	(%rsi,%r13), %xmm0
    0000040e: 	movhpd	(%rcx,%r13), %xmm7
    00000414: 	movhpd	0x10(%rsi,%r13), %xmm15
    0000041b: 	mulpd	%xmm11, %xmm0
    00000420: 	mulpd	%xmm12, %xmm7
    00000425: 	mulpd	%xmm11, %xmm15
    0000042a: 	addpd	%xmm0, %xmm7
    0000042e: 	movsd	(%rdx), %xmm0
    00000432: 	movhpd	(%rdx,%r13), %xmm0
    00000438: 	mulpd	%xmm10, %xmm0
    0000043d: 	addpd	%xmm0, %xmm7
    00000441: 	movsd	(%rax), %xmm0
    00000445: 	movhpd	(%rax,%r13), %xmm0
    0000044b: 	mulpd	%xmm9, %xmm0
    00000450: 	addpd	%xmm0, %xmm7
    00000454: 	movsd	0x8(%rsi), %xmm0
    00000459: 	movhpd	0x8(%rsi,%r13), %xmm0
    00000460: 	mulpd	%xmm11, %xmm0
    00000465: 	addpd	%xmm0, %xmm8
    0000046a: 	movsd	0x8(%rdx), %xmm0
    0000046f: 	movhpd	0x8(%rdx,%r13), %xmm0
    00000476: 	mulpd	%xmm10, %xmm0
    0000047b: 	addpd	%xmm0, %xmm8
    00000480: 	movsd	0x8(%rax), %xmm0
    00000485: 	movhpd	0x8(%rax,%r13), %xmm0
    0000048c: 	mulpd	%xmm9, %xmm0
    00000491: 	addpd	%xmm0, %xmm8
    00000496: 	movsd	0x10(%rcx), %xmm0
    0000049b: 	movhpd	0x10(%rcx,%r13), %xmm0
    000004a2: 	mulpd	%xmm12, %xmm0
    000004a7: 	addpd	%xmm15, %xmm0
    000004ac: 	movsd	0x10(%rdx), %xmm15
    000004b2: 	movhpd	0x10(%rdx,%r13), %xmm15
    000004b9: 	mulpd	%xmm10, %xmm15
    000004be: 	addpd	%xmm15, %xmm0
    000004c3: 	movsd	0x10(%rax), %xmm15
    000004c9: 	movhpd	0x10(%rax,%r13), %xmm15
    000004d0: 	mulpd	%xmm9, %xmm15
    000004d5: 	addpd	%xmm15, %xmm0
    000004da: 	movsd	0x18(%rcx), %xmm15
    000004e0: 	movhpd	0x18(%rcx,%r13), %xmm15
    000004e7: 	addq	%r14, %rcx
    000004ea: 	mulpd	%xmm12, %xmm15
    000004ef: 	movsd	0x18(%rsi), %xmm12
    000004f5: 	movhpd	0x18(%rsi,%r13), %xmm12
    000004fc: 	addq	%r14, %rsi
    000004ff: 	mulpd	%xmm11, %xmm12
    00000504: 	movapd	%xmm15, %xmm11
    00000509: 	addpd	%xmm12, %xmm11
    0000050e: 	movsd	0x18(%rdx), %xmm12
    00000514: 	movhpd	0x18(%rdx,%r13), %xmm12
    0000051b: 	addq	%r14, %rdx
    0000051e: 	mulpd	%xmm12, %xmm10
    00000523: 	addpd	%xmm10, %xmm11
    00000528: 	movsd	0x18(%rax), %xmm10
    0000052e: 	movhpd	0x18(%rax,%r13), %xmm10
    00000535: 	addq	%r14, %rax
    00000538: 	mulpd	%xmm9, %xmm10
    0000053d: 	movapd	%xmm11, %xmm9
    00000542: 	addpd	%xmm10, %xmm9
    00000547: 	movapd	%xmm7, %xmm10
    0000054c: 	unpckhpd	%xmm8, %xmm7
    00000551: 	unpcklpd	%xmm8, %xmm10
    00000556: 	addpd	%xmm10, %xmm1
    0000055b: 	addpd	%xmm7, %xmm1
    0000055f: 	movapd	%xmm0, %xmm7
    00000563: 	unpckhpd	%xmm9, %xmm0
    00000568: 	unpcklpd	%xmm9, %xmm7
    0000056d: 	addpd	%xmm7, %xmm2
    00000571: 	addpd	%xmm0, %xmm2
    00000575: 	cmpq	%r8, %r15
    00000578: 	jb	.Ltmp81 # Offset: 1400
    0000057e: 	movhlps	%xmm13, %xmm7
    00000582: 	movq	%r13, -0x40(%rsp)
    00000587: 	movq	-0x38(%rsp), %r8
    0000058c: 	movq	0x20(%rsp), %rsi
    00000591: 	movq	%xmm7, %rax
    00000596: 	cmpq	%rsi, 0x10(%rsp)
    0000059b: 	je	.Ltmp79 # Offset: 1435
    000005a1: 	leaq	(%r8,%r12), %rax
    000005a5: 	movupd	(%r9), %xmm11
    000005aa: 	movupd	(%r9), %xmm8
    000005af: 	leaq	(%rbp,%rax,8), %rsi
    000005b4: 	leaq	(%r8,%rbx), %rax
    000005b8: 	movupd	0x10(%r9), %xmm9
    000005be: 	movupd	0x10(%r9), %xmm7
    000005c4: 	leaq	(%rbp,%rax,8), %rcx
    000005c9: 	movupd	(%rsi), %xmm0
    000005cd: 	unpcklpd	%xmm11, %xmm11
    000005d2: 	unpckhpd	%xmm8, %xmm8
    000005d7: 	movupd	(%rcx), %xmm10
    000005dc: 	leaq	(%r8,%r11), %rax
    000005e0: 	unpcklpd	%xmm9, %xmm9
    000005e5: 	unpckhpd	%xmm7, %xmm7
    000005e9: 	mulpd	%xmm11, %xmm0
    000005ee: 	leaq	(%rbp,%rax,8), %rdx
    000005f3: 	movq	-0x70(%rsp), %rax
    000005f8: 	mulpd	%xmm8, %xmm10
    000005fd: 	addq	%r8, %rax
    00000600: 	leaq	(%rbp,%rax,8), %rax
    00000605: 	addpd	%xmm10, %xmm0
    0000060a: 	movupd	(%rdx), %xmm10
    0000060f: 	mulpd	%xmm9, %xmm10
    00000614: 	addpd	%xmm10, %xmm0
    00000619: 	movupd	(%rax), %xmm10
    0000061e: 	mulpd	%xmm7, %xmm10
    00000623: 	addpd	%xmm10, %xmm0
    00000628: 	movupd	0x10(%rcx), %xmm10
    0000062e: 	mulpd	%xmm10, %xmm8
    00000633: 	addpd	%xmm0, %xmm1
    00000637: 	movupd	0x10(%rsi), %xmm0
    0000063c: 	mulpd	%xmm11, %xmm0
    00000641: 	addpd	%xmm8, %xmm0
    00000646: 	movupd	0x10(%rdx), %xmm8
    0000064c: 	mulpd	%xmm9, %xmm8
    00000651: 	addpd	%xmm8, %xmm0
    00000656: 	movupd	0x10(%rax), %xmm8
    0000065c: 	movq	-0x78(%rsp), %rax
    00000661: 	mulpd	%xmm8, %xmm7
    00000666: 	addpd	%xmm7, %xmm0
    0000066a: 	addpd	%xmm0, %xmm2
.Ltmp79:
    0000066e: 	movq	-0x30(%rsp), %rdi
    00000673: 	cmpq	%rax, %rdi
    00000676: 	jbe	.Ltmp82 # Offset: 1654
    0000067c: 	movq	-0x28(%rsp), %r15
    00000681: 	movq	-0x18(%rsp), %r13
    00000686: 	movq	(%rsp), %rsi
    0000068a: 	leaq	(%rax,%r15), %rdx
    0000068e: 	movsd	(%r13,%rdx,8), %xmm7
    00000695: 	movq	%rsi, %rdx
    00000698: 	imulq	%rax, %rdx
    0000069c: 	unpcklpd	%xmm7, %xmm7
    000006a0: 	leaq	(%rdx,%r8), %rcx
    000006a4: 	leaq	(%rbp,%rcx,8), %rcx
    000006a9: 	movupd	(%rcx), %xmm0
    000006ad: 	mulpd	%xmm7, %xmm0
    000006b1: 	addpd	%xmm0, %xmm1
    000006b5: 	movupd	0x10(%rcx), %xmm0
    000006ba: 	leaq	0x1(%rax), %rcx
    000006be: 	mulpd	%xmm7, %xmm0
    000006c2: 	addpd	%xmm0, %xmm2
    000006c6: 	cmpq	%rcx, %rdi
    000006c9: 	jbe	.Ltmp82 # Offset: 1737
    000006cf: 	addq	%r15, %rcx
    000006d2: 	addq	%rsi, %rdx
    000006d5: 	movsd	(%r13,%rcx,8), %xmm7
    000006dc: 	leaq	(%rdx,%r8), %rcx
    000006e0: 	leaq	(%rbp,%rcx,8), %rcx
    000006e5: 	movupd	(%rcx), %xmm0
    000006e9: 	unpcklpd	%xmm7, %xmm7
    000006ed: 	mulpd	%xmm7, %xmm0
    000006f1: 	addpd	%xmm0, %xmm1
    000006f5: 	movupd	0x10(%rcx), %xmm0
    000006fa: 	leaq	0x2(%rax), %rcx
    000006fe: 	mulpd	%xmm7, %xmm0
    00000702: 	addpd	%xmm0, %xmm2
    00000706: 	cmpq	%rcx, %rdi
    00000709: 	jbe	.Ltmp82 # Offset: 1801
    0000070b: 	addq	%r15, %rcx
    0000070e: 	addq	%rsi, %rdx
    00000711: 	addq	$0x3, %rax
    00000715: 	movsd	(%r13,%rcx,8), %xmm7
    0000071c: 	leaq	(%rdx,%r8), %rcx
    00000720: 	leaq	(%rbp,%rcx,8), %rcx
    00000725: 	movupd	(%rcx), %xmm0
    00000729: 	unpcklpd	%xmm7, %xmm7
    0000072d: 	mulpd	%xmm7, %xmm0
    00000731: 	addpd	%xmm0, %xmm1
    00000735: 	movupd	0x10(%rcx), %xmm0
    0000073a: 	mulpd	%xmm7, %xmm0
    0000073e: 	addpd	%xmm0, %xmm2
    00000742: 	cmpq	%rax, %rdi
    00000745: 	jbe	.Ltmp82 # Offset: 1861
    00000747: 	addq	%rsi, %rdx
    0000074a: 	addq	%r15, %rax
    0000074d: 	addq	%r8, %rdx
    00000750: 	movsd	(%r13,%rax,8), %xmm7
    00000757: 	leaq	(%rbp,%rdx,8), %rax
    0000075c: 	movupd	(%rax), %xmm0
    00000760: 	unpcklpd	%xmm7, %xmm7
    00000764: 	mulpd	%xmm7, %xmm0
    00000768: 	addpd	%xmm0, %xmm1
    0000076c: 	movupd	0x10(%rax), %xmm0
    00000771: 	mulpd	%xmm7, %xmm0
    00000775: 	addpd	%xmm0, %xmm2
.Ltmp82:
    00000779: 	movupd	0x10(%r10), %xmm0
    0000077f: 	addq	$0x20, -0x60(%rsp)
    00000785: 	addq	$0x4, %r8
    00000789: 	addq	$0x20, %r10
    0000078d: 	addq	$0x20, -0x58(%rsp)
    00000793: 	addpd	%xmm2, %xmm0
    00000797: 	movupd	-0x20(%r10), %xmm2
    0000079d: 	addq	$0x20, -0x50(%rsp)
    000007a3: 	addq	$0x20, -0x48(%rsp)
    000007a9: 	addpd	%xmm2, %xmm1
    000007ad: 	movups	%xmm0, -0x10(%r10)
    000007b2: 	movups	%xmm1, -0x20(%r10)
    000007b7: 	cmpq	-0x8(%rsp), %r8
    000007bc: 	jb	.Ltmp83 # Offset: 1980
    000007c2: 	movq	-0x40(%rsp), %r13
    000007c7: 	movq	(%rsp), %r12
.Ltmp78:
    000007cb: 	cmpq	%r8, 0x28(%rsp)
    000007d0: 	jbe	.Ltmp84 # Offset: 2000
    000007d6: 	movq	-0x20(%rsp), %rdi
    000007db: 	movq	0x38(%rsp), %r15
    000007e0: 	movq	%r14, -0x60(%rsp)
    000007e5: 	movq	0xa0(%rsp), %rax
    000007ed: 	movq	-0x68(%rsp), %r14
    000007f2: 	movq	0x48(%rsp), %r9
    000007f7: 	movq	0x50(%rsp), %r10
    000007fc: 	addq	%r8, %rax
    000007ff: 	movq	0xc0(%rsp), %rbx
    00000807: 	movq	0xc8(%rsp), %r11
    0000080f: 	leaq	(%rbp,%rax,8), %rsi
.Ltmp89:
    00000814: 	cmpq	%r14, %rdi
    00000817: 	jbe	.Ltmp85 # Offset: 2071
    0000081d: 	movq	-0x10(%rsp), %rdx
    00000822: 	movq	%rsi, %rax
    00000825: 	movq	%r14, %rcx
    00000828: 	movapd	%xmm5, %xmm8
    0000082d: 	movapd	%xmm5, %xmm7
    00000831: 	movapd	%xmm5, %xmm2
    00000835: 	movapd	%xmm5, %xmm0
    00000839: 	nopl	(%rax) # Size: 7
.Ltmp86:
    00000840: 	movsd	(%rax), %xmm1
    00000844: 	mulsd	(%rdx), %xmm1
    00000848: 	addq	$0x4, %rcx
    0000084c: 	addq	$0x20, %rdx
    00000850: 	addsd	%xmm1, %xmm0
    00000854: 	movsd	(%rax,%r12,8), %xmm1
    0000085a: 	mulsd	-0x18(%rdx), %xmm1
    0000085f: 	addsd	%xmm1, %xmm2
    00000863: 	movsd	(%rax,%rbx,8), %xmm1
    00000868: 	mulsd	-0x10(%rdx), %xmm1
    0000086d: 	addsd	%xmm1, %xmm7
    00000871: 	movsd	(%rax,%r11,8), %xmm1
    00000877: 	mulsd	-0x8(%rdx), %xmm1
    0000087c: 	addq	%r13, %rax
    0000087f: 	addsd	%xmm1, %xmm8
    00000884: 	cmpq	%rdi, %rcx
    00000887: 	jb	.Ltmp86 # Offset: 2183
.Ltmp94:
    00000889: 	cmpq	%rcx, -0x30(%rsp)
    0000088e: 	jbe	.Ltmp87 # Offset: 2190
    00000890: 	movq	%r12, %rax
    00000893: 	movq	-0x18(%rsp), %rdx
    00000898: 	imulq	%rcx, %rax
    0000089c: 	addq	-0x28(%rsp), %rcx
    000008a1: 	leaq	(%rdx,%rcx,8), %rdx
    000008a5: 	addq	%r8, %rax
    000008a8: 	leaq	(%rbp,%rax,8), %rax
    000008ad: 	nopl	(%rax) # Size: 3
.Ltmp88:
    000008b0: 	movsd	(%rax), %xmm1
    000008b4: 	mulsd	(%rdx), %xmm1
    000008b8: 	addq	$0x8, %rdx
    000008bc: 	addq	%r9, %rax
    000008bf: 	addsd	%xmm1, %xmm0
    000008c3: 	cmpq	%r10, %rdx
    000008c6: 	jne	.Ltmp88 # Offset: 2246
.Ltmp87:
    000008c8: 	addsd	%xmm2, %xmm0
    000008cc: 	addq	$0x8, %rsi
    000008d0: 	addsd	%xmm7, %xmm0
    000008d4: 	addsd	%xmm8, %xmm0
    000008d9: 	addsd	(%r15,%r8,8), %xmm0
    000008df: 	movsd	%xmm0, (%r15,%r8,8)
    000008e5: 	addq	$0x1, %r8
    000008e9: 	cmpq	%r8, 0x28(%rsp)
    000008ee: 	jne	.Ltmp89 # Offset: 2286
    000008f4: 	movq	-0x60(%rsp), %r14
.Ltmp84:
    000008f9: 	movq	0x48(%rsp), %rbx
    000008fe: 	addq	$0x1, 0x30(%rsp)
    00000904: 	addq	%r12, -0x28(%rsp)
    00000909: 	movq	0x30(%rsp), %rax
    0000090e: 	addq	%rbx, 0x38(%rsp)
    00000913: 	addq	%rbx, -0x10(%rsp)
    00000918: 	addq	%rbx, 0x50(%rsp)
    0000091d: 	cmpq	0x70(%rsp), %rax
    00000922: 	jne	.Ltmp90 # Offset: 2338
    00000928: 	movq	0xe8(%rsp), %rax
    00000930: 	addq	0xf8(%rsp), %rax
    00000938: 	movq	%rax, 0xa0(%rsp)
    00000940: 	movq	0x68(%rsp), %rax
    00000945: 	addq	0x100(%rsp), %rax
    0000094d: 	movq	0xc0(%rsp), %rbx
    00000955: 	movq	%rax, 0x60(%rsp)
    0000095a: 	movq	%xmm6, %rax
    0000095f: 	movq	0xc8(%rsp), %r11
    00000967: 	subq	$-0x80, %rax
    0000096b: 	movq	%rax, %xmm6
    00000970: 	cmpq	0xd8(%rsp), %r12
    00000978: 	ja	.Ltmp91 # Offset: 2424
    0000097e: 	addq	$0x400, 0xe0(%rsp)
    0000098a: 	cmpq	%r12, 0xd0(%rsp)
    00000992: 	jb	.Ltmp92 # Offset: 2450
.Ltmp77:
    00000998: 	addq	$0x110, %rsp
    0000099f: 	popq	%rbx
    000009a0: 	popq	%rbp
    000009a1: 	popq	%r12
    000009a3: 	popq	%r13
    000009a5: 	popq	%r14
    000009a7: 	popq	%r15
    000009a9: 	retq # Offset: 2473
    000009aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp80:
    000009b0: 	movq	%r8, -0x38(%rsp)
    000009b5: 	movq	%rdi, %rax
    000009b8: 	pxor	%xmm2, %xmm2
    000009bc: 	movq	-0x48(%rsp), %r15
    000009c1: 	movq	-0x50(%rsp), %rdi
    000009c6: 	movq	-0x58(%rsp), %rsi
    000009cb: 	movapd	%xmm2, %xmm1
    000009cf: 	movq	-0x60(%rsp), %rcx
    000009d4: 	movq	0x40(%rsp), %rdx
    000009d9: 	movq	-0x20(%rsp), %r8
    000009de: 	movq	-0x40(%rsp), %r13
    000009e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp93:
    000009e8: 	movupd	(%rdx), %xmm11
    000009ed: 	movupd	(%rdx), %xmm8
    000009f2: 	addq	$0x4, %rax
    000009f6: 	addq	$0x20, %rdx
    000009fa: 	movupd	(%rsi), %xmm0
    000009fe: 	movupd	(%rcx), %xmm10
    00000a03: 	unpckhpd	%xmm8, %xmm8
    00000a08: 	unpcklpd	%xmm11, %xmm11
    00000a0d: 	movupd	-0x10(%rdx), %xmm7
    00000a12: 	movupd	-0x10(%rdx), %xmm9
    00000a18: 	mulpd	%xmm8, %xmm0
    00000a1d: 	movupd	0x10(%r15), %xmm14
    00000a23: 	mulpd	%xmm11, %xmm10
    00000a28: 	unpcklpd	%xmm9, %xmm9
    00000a2d: 	unpckhpd	%xmm7, %xmm7
    00000a31: 	addpd	%xmm10, %xmm0
    00000a36: 	movupd	(%rdi), %xmm10
    00000a3b: 	mulpd	%xmm9, %xmm10
    00000a40: 	addpd	%xmm10, %xmm0
    00000a45: 	movupd	(%r15), %xmm10
    00000a4a: 	addq	%r13, %r15
    00000a4d: 	mulpd	%xmm7, %xmm10
    00000a52: 	mulpd	%xmm14, %xmm7
    00000a57: 	addpd	%xmm10, %xmm0
    00000a5c: 	addpd	%xmm0, %xmm1
    00000a60: 	movupd	0x10(%rsi), %xmm0
    00000a65: 	addq	%r13, %rsi
    00000a68: 	mulpd	%xmm8, %xmm0
    00000a6d: 	movupd	0x10(%rcx), %xmm8
    00000a73: 	addq	%r13, %rcx
    00000a76: 	mulpd	%xmm11, %xmm8
    00000a7b: 	addpd	%xmm8, %xmm0
    00000a80: 	movupd	0x10(%rdi), %xmm8
    00000a86: 	addq	%r13, %rdi
    00000a89: 	mulpd	%xmm9, %xmm8
    00000a8e: 	addpd	%xmm8, %xmm0
    00000a93: 	addpd	%xmm7, %xmm0
    00000a97: 	addpd	%xmm0, %xmm2
    00000a9b: 	cmpq	%rax, %r8
    00000a9e: 	ja	.Ltmp93 # Offset: 2718
    00000aa4: 	movq	%r13, -0x40(%rsp)
    00000aa9: 	movq	-0x38(%rsp), %r8
    00000aae: 	jmp	.Ltmp79 # Offset: 2734
.Ltmp85:
    00000ab3: 	movapd	%xmm5, %xmm8
    00000ab8: 	movapd	%xmm5, %xmm7
    00000abc: 	movapd	%xmm5, %xmm2
    00000ac0: 	movq	%r14, %rcx
    00000ac3: 	movapd	%xmm5, %xmm0
    00000ac7: 	jmp	.Ltmp94 # Offset: 2759
DWARF CFI Instructions:
    <empty>
End of Function "_ZN28matmul_JIK_blocked_unrolled3IdEclEPKdS2_Pdmm.isra.0/1(*2)"

Binary Function "_ZN28matmul_JIK_blocked_unrolled2IdEclEPKdS2_Pdmm.isra.0/1(*2)" after disassembly {
  All names   : _ZN28matmul_JIK_blocked_unrolled2IdEclEPKdS2_Pdmm.isra.0/1
                _ZN28matmul_JIK_blocked_unrolled2IdEclEPKdS2_Pdmm.isra.0/matrix_multiply.cpp/1
  Number      : 14
  State       : disassembled
  Address     : 0x4ce0
  Size        : 0xf9b
  MaxSize     : 0xfa0
  Offset      : 0x4ce0
  Section     : .text
  Orc Section : .local.text._ZN28matmul_JIK_blocked_unrolled2IdEclEPKdS2_Pdmm.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB013:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	subq	$0x1f0, %rsp
    00000011: 	movq	%rdx, 0x1a8(%rsp)
    00000019: 	movq	%rcx, 0x170(%rsp)
    00000021: 	testq	%r8, %r8
    00000024: 	je	.Ltmp95 # Offset: 36
    0000002a: 	leaq	-0x3(%rcx), %rax
    0000002e: 	movq	%rsi, %r15
    00000031: 	movq	%rdi, %r13
    00000034: 	movq	%r8, %r14
    00000037: 	movq	%rax, 0x150(%rsp)
    0000003f: 	leaq	(,%r8,8), %rax
    00000047: 	leaq	(,%r8,4), %rcx
    0000004f: 	leaq	(%rdi,%rax), %rbx
    00000053: 	addq	%rax, %rdx
    00000056: 	movq	%rax, 0xd8(%rsp)
    0000005e: 	movq	%rbx, 0x1b8(%rsp)
    00000066: 	movq	%r8, %rbx
    00000069: 	shlq	$0xa, %rbx
    0000006d: 	movq	%rdx, 0x1d0(%rsp)
    00000075: 	addq	%rax, %rdx
    00000078: 	movq	%rbx, 0x1b0(%rsp)
    00000080: 	leaq	(%r8,%r8), %rbx
    00000084: 	movq	%rbx, 0x138(%rsp)
    0000008c: 	addq	%r8, %rbx
    0000008f: 	movq	%rbx, 0x140(%rsp)
    00000097: 	movq	%rsi, %rbx
    0000009a: 	subq	%rax, %rbx
    0000009d: 	movq	%rcx, 0x158(%rsp)
    000000a5: 	movq	%r8, %rcx
    000000a8: 	movq	%rdx, 0x1c8(%rsp)
    000000b0: 	addq	%rax, %rdx
    000000b3: 	movq	%rbx, %rax
    000000b6: 	movq	%r8, %rbx
    000000b9: 	shlq	$0x5, %rcx
    000000bd: 	shlq	$0x6, %rbx
    000000c1: 	subq	$0x400, %rax
    000000c7: 	movq	%rdx, 0x1c0(%rsp)
    000000cf: 	movq	%rcx, 0xb0(%rsp)
    000000d7: 	movq	%rbx, 0x1d8(%rsp)
    000000df: 	movq	$0x0, 0x178(%rsp)
    000000eb: 	movq	%rax, 0x1e0(%rsp)
.Ltmp115:
    000000f3: 	movq	0x178(%rsp), %rax
    000000fb: 	movq	$0x0, 0x190(%rsp)
    00000107: 	movq	$0x4, 0xe0(%rsp)
    00000113: 	movq	%rax, 0x148(%rsp)
    0000011b: 	subq	$-0x80, %rax
    0000011f: 	cmpq	%r14, %rax
    00000122: 	movq	%rax, %rbx
    00000125: 	movq	%rax, 0x178(%rsp)
    0000012d: 	movq	$0x0, 0x180(%rsp)
    00000139: 	cmovaq	%r14, %rbx
    0000013d: 	movq	%rbx, 0x68(%rsp)
    00000142: 	movq	0x1e0(%rsp), %rbx
    0000014a: 	leaq	(%rbx,%rax,8), %rax
    0000014e: 	movq	%rax, 0x1a0(%rsp)
    00000156: 	movq	0xd8(%rsp), %rax
    0000015e: 	movq	%rax, 0x188(%rsp)
    00000166: 	movq	0x1b8(%rsp), %rax
    0000016e: 	movq	%rax, 0x198(%rsp)
    00000176: 	movq	%r14, %rax
    00000179: 	movq	%r15, %r14
    0000017c: 	movq	%r13, %r15
    0000017f: 	movq	%rax, %r13
.Ltmp114:
    00000182: 	movq	0x180(%rsp), %rax
    0000018a: 	movq	%rax, 0x60(%rsp)
    0000018f: 	movq	%rax, %rdx
    00000192: 	subq	$-0x80, %rax
    00000196: 	cmpq	%rax, %r13
    00000199: 	movq	%rax, 0x180(%rsp)
    000001a1: 	cmovbeq	%r13, %rax
    000001a5: 	cmpq	$0x0, 0x150(%rsp)
    000001ae: 	leaq	-0x3(%rax), %r10
    000001b2: 	movq	%rax, 0x78(%rsp)
    000001b7: 	movq	%r10, 0x80(%rsp)
    000001bf: 	je	.Ltmp96 # Offset: 447
    000001c5: 	movq	0x1a8(%rsp), %rbx
    000001cd: 	movq	0x198(%rsp), %r11
    000001d5: 	movq	0x188(%rsp), %rdi
    000001dd: 	movq	%rbx, 0xa0(%rsp)
    000001e5: 	movq	%rdx, %rbx
    000001e8: 	leaq	(%r15,%rdx,8), %rdx
    000001ec: 	movq	%rdx, 0xa8(%rsp)
    000001f4: 	movq	0xd8(%rsp), %rdx
    000001fc: 	subq	%rbx, %rax
    000001ff: 	movq	%r11, 0xd0(%rsp)
    00000207: 	movq	%rdx, %rsi
    0000020a: 	addq	%r11, %rsi
    0000020d: 	movq	%rsi, %rcx
    00000210: 	movq	%rsi, 0xc8(%rsp)
    00000218: 	movq	%rdx, %rsi
    0000021b: 	addq	%rdx, %rcx
    0000021e: 	movq	%rcx, 0xc0(%rsp)
    00000226: 	movq	0x1a0(%rsp), %rcx
    0000022e: 	addq	%rdi, %rcx
    00000231: 	cmpq	$0x2, 0xe0(%rsp)
    0000023a: 	seta	%dl
    0000023d: 	cmpq	$-0x4, %r10
    00000241: 	movq	%rcx, 0x160(%rsp)
    00000249: 	leaq	-0x4(%rax), %rcx
    0000024d: 	setbe	%al
    00000250: 	andl	%edx, %eax
    00000252: 	cmpq	$0x3, %rcx
    00000256: 	seta	%dl
    00000259: 	andl	%edx, %eax
    0000025b: 	movb	%al, 0xbf(%rsp)
    00000262: 	movq	%rcx, %rax
    00000265: 	movq	%rdi, %rcx
    00000268: 	shrq	$0x2, %rax
    0000026c: 	leaq	0x1(%rax), %rdx
    00000270: 	movq	%rdx, %rax
    00000273: 	movq	%rdx, 0x108(%rsp)
    0000027b: 	andq	$-0x2, %rdx
    0000027f: 	shrq	%rax
    00000282: 	movq	%rdx, 0xf8(%rsp)
    0000028a: 	movq	%rax, 0x100(%rsp)
    00000292: 	movq	%rdi, %rax
    00000295: 	movq	0x190(%rsp), %rdi
    0000029d: 	addq	%rsi, %rax
    000002a0: 	leaq	(%rdi,%rax), %r10
    000002a4: 	addq	%rsi, %rax
    000002a7: 	movq	%rdi, %rsi
    000002aa: 	addq	%rdi, %rax
    000002ad: 	addq	%rcx, %rsi
    000002b0: 	movq	%r10, 0xf0(%rsp)
    000002b8: 	movq	%rax, 0xe8(%rsp)
    000002c0: 	leaq	(%rbx,%rdx,4), %rax
    000002c4: 	movq	%rax, 0x168(%rsp)
    000002cc: 	movq	%rax, %rbx
    000002cf: 	addq	$0x4, %rax
    000002d3: 	movq	%rax, 0x10(%rsp)
    000002d8: 	movq	0x1c0(%rsp), %rax
    000002e0: 	imulq	%r13, %rbx
    000002e4: 	movq	%rax, 0x88(%rsp)
    000002ec: 	movq	0x1c8(%rsp), %rax
    000002f4: 	movq	%rbx, 0x30(%rsp)
    000002f9: 	addq	%r13, %rbx
    000002fc: 	movq	%rax, 0x90(%rsp)
    00000304: 	movq	0x138(%rsp), %rax
    0000030c: 	movq	%rbx, 0x28(%rsp)
    00000311: 	addq	%r13, %rbx
    00000314: 	movq	%rax, 0x40(%rsp)
    00000319: 	movq	0x1d0(%rsp), %rax
    00000321: 	movq	%rbx, 0x20(%rsp)
    00000326: 	addq	%r13, %rbx
    00000329: 	movq	%rbx, 0x18(%rsp)
    0000032e: 	movq	%rax, 0x98(%rsp)
    00000336: 	movq	$0x0, 0x48(%rsp)
    0000033f: 	movq	$0x0, 0x118(%rsp)
    0000034b: 	movq	%rsi, 0x110(%rsp)
    00000353: 	movq	%r13, 0x38(%rsp)
    00000358: 	movq	0x1d8(%rsp), %r13
.Ltmp106:
    00000360: 	movq	0x148(%rsp), %r10
    00000368: 	cmpq	%r10, 0x68(%rsp)
    0000036d: 	jbe	.Ltmp97 # Offset: 877
    00000373: 	movq	0x38(%rsp), %rdx
    00000378: 	movq	0x168(%rsp), %rbx
    00000380: 	movq	0x48(%rsp), %rdi
    00000385: 	movq	0x40(%rsp), %rsi
    0000038a: 	movq	%rdx, %rcx
    0000038d: 	movq	0x160(%rsp), %r11
    00000395: 	addq	%rdi, %rcx
    00000398: 	addq	%rbx, %rdi
    0000039b: 	addq	%rsi, %rdx
    0000039e: 	addq	%rbx, %rsi
    000003a1: 	movq	%rdi, %rax
    000003a4: 	movq	%rcx, 0x58(%rsp)
    000003a9: 	addq	%rbx, %rcx
    000003ac: 	shlq	$0x3, %rax
    000003b0: 	movq	%rdx, 0x50(%rsp)
    000003b5: 	addq	%rbx, %rdx
    000003b8: 	leaq	(%r15,%rax), %rdi
    000003bc: 	movq	%rdi, 0x8(%rsp)
    000003c1: 	leaq	0x8(%r15,%rax), %rdi
    000003c6: 	movq	%rdi, (%rsp)
    000003ca: 	leaq	0x10(%r15,%rax), %rdi
    000003cf: 	leaq	0x18(%r15,%rax), %rax
    000003d4: 	movq	%rax, -0x10(%rsp)
    000003d9: 	movq	%rcx, %rax
    000003dc: 	shlq	$0x3, %rax
    000003e0: 	movq	%rdi, -0x8(%rsp)
    000003e5: 	leaq	(%r15,%rax), %rcx
    000003e9: 	leaq	0x10(%r15,%rax), %rdi
    000003ee: 	movq	%rcx, -0x18(%rsp)
    000003f3: 	leaq	0x8(%r15,%rax), %rcx
    000003f8: 	leaq	0x18(%r15,%rax), %rax
    000003fd: 	movq	%rax, -0x30(%rsp)
    00000402: 	movq	%rsi, %rax
    00000405: 	shlq	$0x3, %rax
    00000409: 	movq	%rcx, -0x20(%rsp)
    0000040e: 	movq	0xd8(%rsp), %rcx
    00000416: 	leaq	(%r15,%rax), %rsi
    0000041a: 	movq	%rdi, -0x28(%rsp)
    0000041f: 	movq	0xa8(%rsp), %rdi
    00000427: 	movq	%rsi, -0x38(%rsp)
    0000042c: 	leaq	0x8(%r15,%rax), %rsi
    00000431: 	movq	%rsi, -0x40(%rsp)
    00000436: 	leaq	0x10(%r15,%rax), %rsi
    0000043b: 	leaq	0x18(%r15,%rax), %rax
    00000440: 	addq	%rcx, %rdi
    00000443: 	movq	%rax, -0x50(%rsp)
    00000448: 	movq	%rdx, %rax
    0000044b: 	shlq	$0x3, %rax
    0000044f: 	movq	%rsi, -0x48(%rsp)
    00000454: 	leaq	(%r15,%rax), %rdx
    00000458: 	movq	%rdi, 0x130(%rsp)
    00000460: 	movq	%rdx, -0x58(%rsp)
    00000465: 	leaq	0x8(%r15,%rax), %rdx
    0000046a: 	movq	%rdx, -0x60(%rsp)
    0000046f: 	leaq	0x10(%r15,%rax), %rdx
    00000474: 	leaq	0x18(%r15,%rax), %rax
    00000479: 	movq	%rdx, -0x68(%rsp)
    0000047e: 	movq	%rcx, %rdx
    00000481: 	addq	%rdi, %rdx
    00000484: 	movq	%rax, -0x70(%rsp)
    00000489: 	movq	%r10, %rax
    0000048c: 	addq	%rdx, %rcx
    0000048f: 	movq	%rdx, 0x128(%rsp)
    00000497: 	movq	%rcx, 0x120(%rsp)
    0000049f: 	nop # Size: 1
.Ltmp105:
    000004a0: 	movq	0x80(%rsp), %rdx
    000004a8: 	cmpq	%rdx, 0x60(%rsp)
    000004ad: 	jae	.Ltmp98 # Offset: 1197
    000004b3: 	cmpb	$0x0, 0xbf(%rsp)
    000004bb: 	je	.Ltmp99 # Offset: 1211
    000004c1: 	movq	0xf0(%rsp), %rcx
    000004c9: 	pxor	%xmm4, %xmm4
    000004cd: 	movq	%rax, 0x70(%rsp)
    000004d2: 	xorl	%r10d, %r10d
    000004d5: 	movq	0xe8(%rsp), %rsi
    000004dd: 	movq	0x110(%rsp), %rdx
    000004e5: 	movapd	%xmm4, %xmm3
    000004e9: 	movapd	%xmm4, %xmm2
    000004ed: 	movq	0x60(%rsp), %xmm14
    000004f4: 	leaq	(%rcx,%r11), %rbp
    000004f8: 	movq	0xb0(%rsp), %r9
    00000500: 	movapd	%xmm4, %xmm1
    00000504: 	leaq	(%rsi,%r11), %rbx
    00000508: 	movq	0xa8(%rsp), %r8
    00000510: 	movq	0xd0(%rsp), %rdi
    00000518: 	leaq	(%rdx,%r11), %r12
    0000051c: 	movq	0xc8(%rsp), %rsi
    00000524: 	xorl	%edx, %edx
    00000526: 	movq	0xc0(%rsp), %rcx
    0000052e: 	movhps	0xe0(%rsp), %xmm14
    00000537: 	movq	0x100(%rsp), %rax
    0000053f: 	nop # Size: 1
.Ltmp100:
    00000540: 	movupd	(%r8), %xmm7
    00000545: 	movupd	0x10(%r8), %xmm5
    0000054b: 	addq	$0x1, %r10
    0000054f: 	movdqa	%xmm14, %xmm13
    00000554: 	movlpd	0x8(%r8), %xmm5
    0000055a: 	movupd	0x20(%r8), %xmm11
    00000560: 	addq	$0x40, %rcx
    00000564: 	addq	$0x40, %rsi
    00000568: 	movhpd	0x10(%r8), %xmm7
    0000056e: 	movsd	(%r11,%rdx), %xmm9
    00000574: 	movsd	(%r12,%rdx), %xmm12
    0000057a: 	addq	$0x40, %rdi
    0000057e: 	movupd	0x30(%r8), %xmm10
    00000584: 	movlpd	0x28(%r8), %xmm10
    0000058a: 	movhpd	0x30(%r8), %xmm11
    00000590: 	movapd	%xmm5, %xmm0
    00000594: 	movapd	%xmm7, %xmm15
    00000599: 	unpckhpd	%xmm11, %xmm7
    0000059e: 	addq	$0x40, %r8
    000005a2: 	movsd	(%rbp,%rdx), %xmm8
    000005a9: 	movhpd	(%r12,%r9), %xmm12
    000005af: 	movhpd	(%r11,%r9), %xmm9
    000005b5: 	unpcklpd	%xmm10, %xmm0
    000005ba: 	movsd	(%rbx,%rdx), %xmm6
    000005bf: 	unpcklpd	%xmm11, %xmm15
    000005c4: 	movhpd	(%rbp,%r9), %xmm8
    000005cb: 	unpckhpd	%xmm10, %xmm5
    000005d0: 	addq	%r13, %rdx
    000005d3: 	mulpd	%xmm9, %xmm15
    000005d8: 	movhpd	(%rbx,%r9), %xmm6
    000005de: 	addq	%r13, %r9
    000005e1: 	movupd	-0x20(%rdi), %xmm11
    000005e7: 	mulpd	%xmm12, %xmm0
    000005ec: 	movupd	-0x10(%rdi), %xmm10
    000005f2: 	movlpd	-0x18(%rdi), %xmm10
    000005f8: 	mulpd	%xmm8, %xmm7
    000005fd: 	movhpd	-0x10(%rdi), %xmm11
    00000603: 	paddq	DATAat0x2d980(%rip), %xmm14
    0000060c: 	mulpd	%xmm6, %xmm5
    00000610: 	addpd	%xmm15, %xmm0
    00000615: 	addpd	%xmm7, %xmm0
    00000619: 	movupd	-0x40(%rdi), %xmm7
    0000061e: 	movhpd	-0x30(%rdi), %xmm7
    00000623: 	addpd	%xmm5, %xmm0
    00000627: 	movupd	-0x30(%rdi), %xmm5
    0000062c: 	movlpd	-0x38(%rdi), %xmm5
    00000631: 	movapd	%xmm7, %xmm15
    00000636: 	unpcklpd	%xmm11, %xmm15
    0000063b: 	unpckhpd	%xmm11, %xmm7
    00000640: 	movupd	-0x20(%rsi), %xmm11
    00000646: 	mulpd	%xmm9, %xmm15
    0000064b: 	addsd	%xmm0, %xmm1
    0000064f: 	unpckhpd	%xmm0, %xmm0
    00000653: 	movhpd	-0x10(%rsi), %xmm11
    00000659: 	mulpd	%xmm8, %xmm7
    0000065e: 	addsd	%xmm0, %xmm1
    00000662: 	movapd	%xmm5, %xmm0
    00000666: 	unpckhpd	%xmm10, %xmm5
    0000066b: 	mulpd	%xmm6, %xmm5
    0000066f: 	unpcklpd	%xmm10, %xmm0
    00000674: 	movupd	-0x10(%rsi), %xmm10
    0000067a: 	mulpd	%xmm12, %xmm0
    0000067f: 	addpd	%xmm15, %xmm0
    00000684: 	addpd	%xmm7, %xmm0
    00000688: 	movupd	-0x40(%rsi), %xmm7
    0000068d: 	movhpd	-0x30(%rsi), %xmm7
    00000692: 	addpd	%xmm5, %xmm0
    00000696: 	movupd	-0x30(%rsi), %xmm5
    0000069b: 	movlpd	-0x38(%rsi), %xmm5
    000006a0: 	movapd	%xmm7, %xmm15
    000006a5: 	movlpd	-0x18(%rsi), %xmm10
    000006ab: 	unpcklpd	%xmm11, %xmm15
    000006b0: 	unpckhpd	%xmm11, %xmm7
    000006b5: 	movupd	-0x20(%rcx), %xmm11
    000006bb: 	paddq	DATAat0x2d990(%rip), %xmm13
    000006c4: 	mulpd	%xmm9, %xmm15
    000006c9: 	addsd	%xmm0, %xmm2
    000006cd: 	unpckhpd	%xmm0, %xmm0
    000006d1: 	movhpd	-0x10(%rcx), %xmm11
    000006d7: 	mulpd	%xmm8, %xmm7
    000006dc: 	addsd	%xmm0, %xmm2
    000006e0: 	movapd	%xmm5, %xmm0
    000006e4: 	unpckhpd	%xmm10, %xmm5
    000006e9: 	mulpd	%xmm6, %xmm5
    000006ed: 	unpcklpd	%xmm10, %xmm0
    000006f2: 	movupd	-0x10(%rcx), %xmm10
    000006f8: 	movlpd	-0x18(%rcx), %xmm10
    000006fe: 	mulpd	%xmm12, %xmm0
    00000703: 	addpd	%xmm15, %xmm0
    00000708: 	addpd	%xmm7, %xmm0
    0000070c: 	movupd	-0x40(%rcx), %xmm7
    00000711: 	movhpd	-0x30(%rcx), %xmm7
    00000716: 	addpd	%xmm5, %xmm0
    0000071a: 	movupd	-0x30(%rcx), %xmm5
    0000071f: 	movlpd	-0x38(%rcx), %xmm5
    00000724: 	addsd	%xmm0, %xmm3
    00000728: 	unpckhpd	%xmm0, %xmm0
    0000072c: 	addsd	%xmm0, %xmm3
    00000730: 	movapd	%xmm5, %xmm0
    00000734: 	unpckhpd	%xmm10, %xmm5
    00000739: 	mulpd	%xmm6, %xmm5
    0000073d: 	unpcklpd	%xmm10, %xmm0
    00000742: 	mulpd	%xmm12, %xmm0
    00000747: 	movapd	%xmm7, %xmm12
    0000074c: 	unpckhpd	%xmm11, %xmm7
    00000751: 	mulpd	%xmm8, %xmm7
    00000756: 	unpcklpd	%xmm11, %xmm12
    0000075b: 	mulpd	%xmm12, %xmm9
    00000760: 	addpd	%xmm9, %xmm0
    00000765: 	addpd	%xmm7, %xmm0
    00000769: 	addpd	%xmm5, %xmm0
    0000076d: 	addsd	%xmm0, %xmm4
    00000771: 	unpckhpd	%xmm0, %xmm0
    00000775: 	addsd	%xmm0, %xmm4
    00000779: 	cmpq	%rax, %r10
    0000077c: 	jb	.Ltmp100 # Offset: 1916
    00000782: 	movhlps	%xmm13, %xmm6
    00000786: 	movq	0x70(%rsp), %rax
    0000078b: 	movq	0x108(%rsp), %rcx
    00000793: 	movq	%xmm6, %rdx
    00000798: 	cmpq	%rcx, 0xf8(%rsp)
    000007a0: 	je	.Ltmp101 # Offset: 1952
    000007a6: 	movq	0x30(%rsp), %rbx
    000007ab: 	movq	0x8(%rsp), %rdi
    000007b0: 	movq	-0x20(%rsp), %rsi
    000007b5: 	movq	-0x48(%rsp), %rcx
    000007ba: 	leaq	(%rax,%rbx), %rdx
    000007be: 	movq	0x28(%rsp), %rbx
    000007c3: 	movsd	(%rdi), %xmm9
    000007c8: 	movsd	(%r14,%rdx,8), %xmm8
    000007ce: 	movq	-0x10(%rsp), %rdi
    000007d3: 	leaq	(%rax,%rbx), %rdx
    000007d7: 	movq	0x20(%rsp), %rbx
    000007dc: 	movsd	(%r14,%rdx,8), %xmm0
    000007e2: 	mulsd	%xmm8, %xmm9
    000007e7: 	leaq	(%rax,%rbx), %rdx
    000007eb: 	movq	0x18(%rsp), %rbx
    000007f0: 	movsd	(%r14,%rdx,8), %xmm7
    000007f6: 	leaq	(%rax,%rbx), %rdx
    000007fa: 	movq	(%rsp), %rbx
    000007fe: 	movsd	(%r14,%rdx,8), %xmm6
    00000804: 	movsd	(%rbx), %xmm5
    00000808: 	movq	-0x8(%rsp), %rbx
    0000080d: 	mulsd	%xmm0, %xmm5
    00000811: 	addsd	%xmm9, %xmm5
    00000816: 	movsd	(%rbx), %xmm9
    0000081b: 	movq	-0x18(%rsp), %rbx
    00000820: 	mulsd	%xmm7, %xmm9
    00000825: 	addsd	%xmm9, %xmm5
    0000082a: 	movsd	(%rdi), %xmm9
    0000082f: 	movq	-0x28(%rsp), %rdi
    00000834: 	mulsd	%xmm6, %xmm9
    00000839: 	addsd	%xmm9, %xmm5
    0000083e: 	movsd	(%rbx), %xmm9
    00000843: 	movq	-0x40(%rsp), %rbx
    00000848: 	mulsd	%xmm8, %xmm9
    0000084d: 	addsd	%xmm5, %xmm1
    00000851: 	movsd	(%rsi), %xmm5
    00000855: 	movq	-0x30(%rsp), %rsi
    0000085a: 	mulsd	%xmm0, %xmm5
    0000085e: 	addsd	%xmm9, %xmm5
    00000863: 	movsd	(%rdi), %xmm9
    00000868: 	movq	-0x38(%rsp), %rdi
    0000086d: 	mulsd	%xmm7, %xmm9
    00000872: 	addsd	%xmm9, %xmm5
    00000877: 	movsd	(%rsi), %xmm9
    0000087c: 	movq	-0x50(%rsp), %rsi
    00000881: 	mulsd	%xmm6, %xmm9
    00000886: 	addsd	%xmm9, %xmm5
    0000088b: 	movsd	(%rdi), %xmm9
    00000890: 	mulsd	%xmm8, %xmm9
    00000895: 	addsd	%xmm5, %xmm2
    00000899: 	movsd	(%rbx), %xmm5
    0000089d: 	mulsd	%xmm0, %xmm5
    000008a1: 	addsd	%xmm9, %xmm5
    000008a6: 	movsd	(%rcx), %xmm9
    000008ab: 	mulsd	%xmm7, %xmm9
    000008b0: 	addsd	%xmm9, %xmm5
    000008b5: 	movsd	(%rsi), %xmm9
    000008ba: 	movq	-0x60(%rsp), %rbx
    000008bf: 	movq	-0x58(%rsp), %rdi
    000008c4: 	movq	-0x68(%rsp), %rcx
    000008c9: 	movq	-0x70(%rsp), %rsi
    000008ce: 	mulsd	%xmm6, %xmm9
    000008d3: 	movq	0x10(%rsp), %rdx
    000008d8: 	mulsd	(%rbx), %xmm0
    000008dc: 	mulsd	(%rdi), %xmm8
    000008e1: 	mulsd	(%rcx), %xmm7
    000008e5: 	mulsd	(%rsi), %xmm6
    000008e9: 	addsd	%xmm9, %xmm5
    000008ee: 	addsd	%xmm8, %xmm0
    000008f3: 	addsd	%xmm5, %xmm3
    000008f7: 	addsd	%xmm7, %xmm0
    000008fb: 	addsd	%xmm6, %xmm0
    000008ff: 	addsd	%xmm0, %xmm4
.Ltmp101:
    00000903: 	movq	0x78(%rsp), %rbx
    00000908: 	cmpq	%rdx, %rbx
    0000090b: 	jbe	.Ltmp102 # Offset: 2315
    00000911: 	movq	%rbx, %rcx
    00000914: 	subq	%rdx, %rcx
    00000917: 	cmpq	$0x1, %rcx
    0000091b: 	je	.Ltmp103 # Offset: 2331
    00000921: 	movq	0x38(%rsp), %rsi
    00000926: 	movq	0xd8(%rsp), %rbp
    0000092e: 	movq	0x58(%rsp), %rdi
    00000933: 	movq	0x40(%rsp), %rbx
    00000938: 	imulq	%rdx, %rsi
    0000093c: 	addq	%rax, %rsi
    0000093f: 	leaq	(%r14,%rsi,8), %r10
    00000943: 	movq	0x48(%rsp), %rsi
    00000948: 	movsd	(%r10), %xmm0
    0000094d: 	addq	%rdx, %rsi
    00000950: 	leaq	(%r15,%rsi,8), %r9
    00000954: 	movhpd	(%r10,%rbp), %xmm0
    0000095a: 	leaq	(%rdx,%rdi), %rsi
    0000095e: 	movupd	(%r9), %xmm5
    00000963: 	leaq	(%r15,%rsi,8), %r8
    00000967: 	leaq	(%rdx,%rbx), %rsi
    0000096b: 	movq	%rcx, %rbx
    0000096e: 	leaq	(%r15,%rsi,8), %rdi
    00000972: 	movq	0x50(%rsp), %rsi
    00000977: 	shrq	%rbx
    0000097a: 	leaq	(%r10,%rbp,2), %r10
    0000097e: 	mulpd	%xmm0, %xmm5
    00000982: 	addq	%rdx, %rsi
    00000985: 	leaq	(%r15,%rsi,8), %rsi
    00000989: 	movupd	(%rsi), %xmm6
    0000098d: 	addsd	%xmm5, %xmm1
    00000991: 	unpckhpd	%xmm5, %xmm5
    00000995: 	addsd	%xmm5, %xmm1
    00000999: 	movupd	(%r8), %xmm5
    0000099e: 	mulpd	%xmm0, %xmm5
    000009a2: 	addsd	%xmm5, %xmm2
    000009a6: 	unpckhpd	%xmm5, %xmm5
    000009aa: 	addsd	%xmm5, %xmm2
    000009ae: 	movupd	(%rdi), %xmm5
    000009b2: 	mulpd	%xmm0, %xmm5
    000009b6: 	mulpd	%xmm6, %xmm0
    000009ba: 	addsd	%xmm5, %xmm3
    000009be: 	unpckhpd	%xmm5, %xmm5
    000009c2: 	addsd	%xmm0, %xmm4
    000009c6: 	unpckhpd	%xmm0, %xmm0
    000009ca: 	addsd	%xmm5, %xmm3
    000009ce: 	addsd	%xmm0, %xmm4
    000009d2: 	cmpq	$0x1, %rbx
    000009d6: 	je	.Ltmp104 # Offset: 2518
    000009d8: 	movsd	(%r10), %xmm5
    000009dd: 	movupd	0x10(%r9), %xmm0
    000009e3: 	movhpd	(%r10,%rbp), %xmm5
    000009e9: 	mulpd	%xmm5, %xmm0
    000009ed: 	addsd	%xmm0, %xmm1
    000009f1: 	unpckhpd	%xmm0, %xmm0
    000009f5: 	addsd	%xmm0, %xmm1
    000009f9: 	movupd	0x10(%r8), %xmm0
    000009ff: 	mulpd	%xmm5, %xmm0
    00000a03: 	addsd	%xmm0, %xmm2
    00000a07: 	unpckhpd	%xmm0, %xmm0
    00000a0b: 	addsd	%xmm0, %xmm2
    00000a0f: 	movupd	0x10(%rdi), %xmm0
    00000a14: 	mulpd	%xmm5, %xmm0
    00000a18: 	addsd	%xmm0, %xmm3
    00000a1c: 	unpckhpd	%xmm0, %xmm0
    00000a20: 	addsd	%xmm0, %xmm3
    00000a24: 	movupd	0x10(%rsi), %xmm0
    00000a29: 	mulpd	%xmm5, %xmm0
    00000a2d: 	addsd	%xmm0, %xmm4
    00000a31: 	unpckhpd	%xmm0, %xmm0
    00000a35: 	addsd	%xmm0, %xmm4
.Ltmp104:
    00000a39: 	movq	%rcx, %rsi
    00000a3c: 	andq	$-0x2, %rsi
    00000a40: 	addq	%rsi, %rdx
    00000a43: 	cmpq	%rcx, %rsi
    00000a46: 	je	.Ltmp102 # Offset: 2630
.Ltmp103:
    00000a48: 	movq	0x38(%rsp), %rcx
    00000a4d: 	movq	0x48(%rsp), %rbx
    00000a52: 	movq	0x58(%rsp), %rdi
    00000a57: 	movq	0x40(%rsp), %rsi
    00000a5c: 	imulq	%rdx, %rcx
    00000a60: 	addq	%rax, %rcx
    00000a63: 	movsd	(%r14,%rcx,8), %xmm0
    00000a69: 	leaq	(%rbx,%rdx), %rcx
    00000a6d: 	movsd	(%r15,%rcx,8), %xmm5
    00000a73: 	leaq	(%rdi,%rdx), %rcx
    00000a77: 	mulsd	%xmm0, %xmm5
    00000a7b: 	addsd	%xmm5, %xmm1
    00000a7f: 	movsd	(%r15,%rcx,8), %xmm5
    00000a85: 	leaq	(%rsi,%rdx), %rcx
    00000a89: 	addq	0x50(%rsp), %rdx
    00000a8e: 	mulsd	%xmm0, %xmm5
    00000a92: 	addsd	%xmm5, %xmm2
    00000a96: 	movsd	(%r15,%rcx,8), %xmm5
    00000a9c: 	mulsd	%xmm0, %xmm5
    00000aa0: 	mulsd	(%r15,%rdx,8), %xmm0
    00000aa6: 	addsd	%xmm5, %xmm3
    00000aaa: 	addsd	%xmm0, %xmm4
.Ltmp102:
    00000aae: 	movq	0x98(%rsp), %rdi
    00000ab6: 	movq	0x90(%rsp), %rsi
    00000abe: 	addq	$0x8, %r11
    00000ac2: 	movq	0x88(%rsp), %rbx
    00000aca: 	movq	0xa0(%rsp), %rcx
    00000ad2: 	addsd	(%rdi,%rax,8), %xmm2
    00000ad7: 	addsd	(%rsi,%rax,8), %xmm3
    00000adc: 	addsd	(%rbx,%rax,8), %xmm4
    00000ae1: 	addsd	(%rcx,%rax,8), %xmm1
    00000ae6: 	movsd	%xmm1, (%rcx,%rax,8)
    00000aeb: 	movsd	%xmm2, (%rdi,%rax,8)
    00000af0: 	movsd	%xmm3, (%rsi,%rax,8)
    00000af5: 	movsd	%xmm4, (%rbx,%rax,8)
    00000afa: 	addq	$0x1, %rax
    00000afe: 	cmpq	%rax, 0x68(%rsp)
    00000b03: 	jne	.Ltmp105 # Offset: 2819
.Ltmp97:
    00000b09: 	movq	0xb0(%rsp), %rax
    00000b11: 	movq	0x158(%rsp), %rcx
    00000b19: 	addq	$0x4, 0x118(%rsp)
    00000b22: 	movq	0x118(%rsp), %rdx
    00000b2a: 	addq	%rcx, 0x48(%rsp)
    00000b2f: 	addq	%rax, 0xa0(%rsp)
    00000b37: 	addq	%rax, 0x98(%rsp)
    00000b3f: 	addq	%rcx, 0x40(%rsp)
    00000b44: 	addq	%rax, 0x90(%rsp)
    00000b4c: 	addq	%rax, 0x88(%rsp)
    00000b54: 	addq	%rax, 0xa8(%rsp)
    00000b5c: 	addq	%rax, 0xd0(%rsp)
    00000b64: 	addq	%rax, 0xc8(%rsp)
    00000b6c: 	addq	%rax, 0xc0(%rsp)
    00000b74: 	cmpq	0x150(%rsp), %rdx
    00000b7c: 	jb	.Ltmp106 # Offset: 2940
    00000b82: 	movq	0x38(%rsp), %r13
    00000b87: 	movq	0x170(%rsp), %rbx
    00000b8f: 	cmpq	%rbx, 0x118(%rsp)
    00000b97: 	jae	.Ltmp107 # Offset: 2967
.Ltmp118:
    00000b9d: 	movq	0x148(%rsp), %rdx
    00000ba5: 	cmpq	%rdx, 0x68(%rsp)
    00000baa: 	jbe	.Ltmp107 # Offset: 2986
    00000bb0: 	movq	0x118(%rsp), %rax
    00000bb8: 	movq	0xd8(%rsp), %r8
    00000bc0: 	movq	%r14, -0x60(%rsp)
    00000bc5: 	movq	0x60(%rsp), %rdx
    00000bca: 	movq	0x188(%rsp), %rbx
    00000bd2: 	movq	%r15, -0x68(%rsp)
    00000bd7: 	movq	%rax, %r10
    00000bda: 	movq	%r8, %r9
    00000bdd: 	addq	0x1a0(%rsp), %rbx
    00000be5: 	movq	0x80(%rsp), %rdi
    00000bed: 	imulq	%r13, %r10
    00000bf1: 	movq	%rbx, -0x58(%rsp)
    00000bf6: 	movq	0x140(%rsp), %rbp
    00000bfe: 	imulq	%rax, %r9
    00000c02: 	movq	0xb0(%rsp), %rbx
    00000c0a: 	addq	0x1a8(%rsp), %r9
    00000c12: 	leaq	(%r10,%rdx), %rax
    00000c16: 	leaq	(%r15,%rax,8), %r11
    00000c1a: 	movq	0x78(%rsp), %rax
    00000c1f: 	movq	%r11, -0x70(%rsp)
    00000c24: 	movq	0x138(%rsp), %r11
    00000c2c: 	addq	%r10, %rax
    00000c2f: 	leaq	(%r15,%rax,8), %rsi
    00000c33: 	movq	%rdx, %r15
.Ltmp113:
    00000c36: 	movq	-0x58(%rsp), %r14
    00000c3b: 	movq	0x148(%rsp), %r12
    00000c43: 	nopl	(%rax,%rax) # Size: 5
.Ltmp112:
    00000c48: 	cmpq	%rdi, %r15
    00000c4b: 	jae	.Ltmp108 # Offset: 3147
    00000c51: 	pxor	%xmm4, %xmm4
    00000c55: 	movq	-0x70(%rsp), %rdx
    00000c5a: 	movq	%r14, %rax
    00000c5d: 	movq	%r15, %rcx
    00000c60: 	movapd	%xmm4, %xmm3
    00000c64: 	movapd	%xmm4, %xmm2
    00000c68: 	movapd	%xmm4, %xmm0
    00000c6c: 	nopl	(%rax) # Size: 4
.Ltmp109:
    00000c70: 	movsd	(%rax), %xmm1
    00000c74: 	mulsd	(%rdx), %xmm1
    00000c78: 	addq	$0x4, %rcx
    00000c7c: 	addq	$0x20, %rdx
    00000c80: 	addsd	%xmm1, %xmm0
    00000c84: 	movsd	(%rax,%r13,8), %xmm1
    00000c8a: 	mulsd	-0x18(%rdx), %xmm1
    00000c8f: 	addsd	%xmm1, %xmm2
    00000c93: 	movsd	(%rax,%r11,8), %xmm1
    00000c99: 	mulsd	-0x10(%rdx), %xmm1
    00000c9e: 	addsd	%xmm1, %xmm3
    00000ca2: 	movsd	(%rax,%rbp,8), %xmm1
    00000ca7: 	mulsd	-0x8(%rdx), %xmm1
    00000cac: 	addq	%rbx, %rax
    00000caf: 	addsd	%xmm1, %xmm4
    00000cb3: 	cmpq	%rdi, %rcx
    00000cb6: 	jb	.Ltmp109 # Offset: 3254
.Ltmp117:
    00000cb8: 	cmpq	%rcx, 0x78(%rsp)
    00000cbd: 	jbe	.Ltmp110 # Offset: 3261
    00000cbf: 	movq	%r13, %rax
    00000cc2: 	movq	-0x60(%rsp), %rdx
    00000cc7: 	imulq	%rcx, %rax
    00000ccb: 	addq	%r10, %rcx
    00000cce: 	addq	%r12, %rax
    00000cd1: 	leaq	(%rdx,%rax,8), %rax
    00000cd5: 	movq	-0x68(%rsp), %rdx
    00000cda: 	leaq	(%rdx,%rcx,8), %rdx
    00000cde: 	nop # Size: 2
.Ltmp111:
    00000ce0: 	movsd	(%rax), %xmm1
    00000ce4: 	mulsd	(%rdx), %xmm1
    00000ce8: 	addq	$0x8, %rdx
    00000cec: 	addq	%r8, %rax
    00000cef: 	addsd	%xmm1, %xmm0
    00000cf3: 	cmpq	%rdx, %rsi
    00000cf6: 	jne	.Ltmp111 # Offset: 3318
.Ltmp110:
    00000cf8: 	addsd	%xmm0, %xmm2
    00000cfc: 	addq	$0x8, %r14
    00000d00: 	addsd	%xmm3, %xmm2
    00000d04: 	addsd	%xmm4, %xmm2
    00000d08: 	addsd	(%r9,%r12,8), %xmm2
    00000d0e: 	movsd	%xmm2, (%r9,%r12,8)
    00000d14: 	addq	$0x1, %r12
    00000d18: 	cmpq	%r12, 0x68(%rsp)
    00000d1d: 	jne	.Ltmp112 # Offset: 3357
    00000d23: 	addq	%r8, -0x70(%rsp)
    00000d28: 	addq	%r13, %r10
    00000d2b: 	addq	%r8, %r9
    00000d2e: 	addq	%r8, %rsi
    00000d31: 	addq	$0x1, 0x118(%rsp)
    00000d3a: 	movq	0x118(%rsp), %rax
    00000d42: 	cmpq	%rax, 0x170(%rsp)
    00000d4a: 	ja	.Ltmp113 # Offset: 3402
    00000d50: 	movq	-0x68(%rsp), %r15
    00000d55: 	movq	-0x60(%rsp), %r14
.Ltmp107:
    00000d5a: 	movq	0x1b0(%rsp), %rbx
    00000d62: 	addq	$0x400, 0x198(%rsp)
    00000d6e: 	subq	$-0x80, 0xe0(%rsp)
    00000d77: 	addq	%rbx, 0x188(%rsp)
    00000d7f: 	subq	%rbx, 0x190(%rsp)
    00000d87: 	cmpq	0x180(%rsp), %r13
    00000d8f: 	ja	.Ltmp114 # Offset: 3471
    00000d95: 	movq	%r13, %rax
    00000d98: 	movq	%r15, %r13
    00000d9b: 	movq	%r14, %r15
    00000d9e: 	movq	%rax, %r14
    00000da1: 	cmpq	%rax, 0x178(%rsp)
    00000da9: 	jb	.Ltmp115 # Offset: 3497
.Ltmp95:
    00000daf: 	addq	$0x1f0, %rsp
    00000db6: 	popq	%rbx
    00000db7: 	popq	%rbp
    00000db8: 	popq	%r12
    00000dba: 	popq	%r13
    00000dbc: 	popq	%r14
    00000dbe: 	popq	%r15
    00000dc0: 	retq # Offset: 3520
    00000dc1: 	nopl	(%rax) # Size: 7
.Ltmp99:
    00000dc8: 	pxor	%xmm4, %xmm4
    00000dcc: 	movq	%rax, 0x70(%rsp)
    00000dd1: 	movq	0x120(%rsp), %r9
    00000dd9: 	movq	%r11, %rcx
    00000ddc: 	movq	0x128(%rsp), %r8
    00000de4: 	movq	0x60(%rsp), %rdx
    00000de9: 	movapd	%xmm4, %xmm3
    00000ded: 	movapd	%xmm4, %xmm2
    00000df1: 	movq	0x130(%rsp), %rdi
    00000df9: 	movq	0xa8(%rsp), %rsi
    00000e01: 	movapd	%xmm4, %xmm1
    00000e05: 	movq	0x138(%rsp), %r10
    00000e0d: 	movq	0xb0(%rsp), %rbx
    00000e15: 	movq	0x80(%rsp), %rax
    00000e1d: 	movq	0x38(%rsp), %rbp
    00000e22: 	movq	0x140(%rsp), %r12
    00000e2a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp116:
    00000e30: 	movsd	(%rcx), %xmm8
    00000e35: 	movsd	(%rcx,%rbp,8), %xmm0
    00000e3a: 	addq	$0x4, %rdx
    00000e3e: 	addq	$0x20, %rsi
    00000e42: 	movsd	-0x18(%rsi), %xmm5
    00000e47: 	movsd	-0x20(%rsi), %xmm9
    00000e4d: 	addq	$0x20, %rdi
    00000e51: 	addq	$0x20, %r8
    00000e55: 	movsd	(%rcx,%r10,8), %xmm7
    00000e5b: 	movsd	(%rcx,%r12,8), %xmm6
    00000e61: 	addq	$0x20, %r9
    00000e65: 	addq	%rbx, %rcx
    00000e68: 	mulsd	%xmm8, %xmm9
    00000e6d: 	mulsd	%xmm0, %xmm5
    00000e71: 	addsd	%xmm9, %xmm5
    00000e76: 	movsd	-0x10(%rsi), %xmm9
    00000e7c: 	mulsd	%xmm7, %xmm9
    00000e81: 	addsd	%xmm9, %xmm5
    00000e86: 	movsd	-0x8(%rsi), %xmm9
    00000e8c: 	mulsd	%xmm6, %xmm9
    00000e91: 	addsd	%xmm9, %xmm5
    00000e96: 	movsd	-0x20(%rdi), %xmm9
    00000e9c: 	mulsd	%xmm8, %xmm9
    00000ea1: 	addsd	%xmm5, %xmm1
    00000ea5: 	movsd	-0x18(%rdi), %xmm5
    00000eaa: 	mulsd	%xmm0, %xmm5
    00000eae: 	addsd	%xmm9, %xmm5
    00000eb3: 	movsd	-0x10(%rdi), %xmm9
    00000eb9: 	mulsd	%xmm7, %xmm9
    00000ebe: 	addsd	%xmm9, %xmm5
    00000ec3: 	movsd	-0x8(%rdi), %xmm9
    00000ec9: 	mulsd	%xmm6, %xmm9
    00000ece: 	addsd	%xmm9, %xmm5
    00000ed3: 	movsd	-0x20(%r8), %xmm9
    00000ed9: 	mulsd	%xmm8, %xmm9
    00000ede: 	addsd	%xmm5, %xmm2
    00000ee2: 	movsd	-0x18(%r8), %xmm5
    00000ee8: 	mulsd	-0x20(%r9), %xmm8
    00000eee: 	mulsd	%xmm0, %xmm5
    00000ef2: 	mulsd	-0x18(%r9), %xmm0
    00000ef8: 	addsd	%xmm9, %xmm5
    00000efd: 	movsd	-0x10(%r8), %xmm9
    00000f03: 	addsd	%xmm8, %xmm0
    00000f08: 	mulsd	%xmm7, %xmm9
    00000f0d: 	mulsd	-0x10(%r9), %xmm7
    00000f13: 	addsd	%xmm9, %xmm5
    00000f18: 	movsd	-0x8(%r8), %xmm9
    00000f1e: 	addsd	%xmm7, %xmm0
    00000f22: 	mulsd	%xmm6, %xmm9
    00000f27: 	mulsd	-0x8(%r9), %xmm6
    00000f2d: 	addsd	%xmm9, %xmm5
    00000f32: 	addsd	%xmm6, %xmm0
    00000f36: 	addsd	%xmm5, %xmm3
    00000f3a: 	addsd	%xmm0, %xmm4
    00000f3e: 	cmpq	%rax, %rdx
    00000f41: 	jb	.Ltmp116 # Offset: 3905
    00000f47: 	movq	0x70(%rsp), %rax
    00000f4c: 	jmp	.Ltmp101 # Offset: 3916
    00000f51: 	nopl	(%rax) # Size: 7
.Ltmp98:
    00000f58: 	pxor	%xmm4, %xmm4
    00000f5c: 	movq	0x60(%rsp), %rdx
    00000f61: 	movapd	%xmm4, %xmm3
    00000f65: 	movapd	%xmm4, %xmm2
    00000f69: 	movapd	%xmm4, %xmm1
    00000f6d: 	jmp	.Ltmp101 # Offset: 3949
.Ltmp108:
    00000f72: 	pxor	%xmm4, %xmm4
    00000f76: 	movq	%r15, %rcx
    00000f79: 	movapd	%xmm4, %xmm3
    00000f7d: 	movapd	%xmm4, %xmm2
    00000f81: 	movapd	%xmm4, %xmm0
    00000f85: 	jmp	.Ltmp117 # Offset: 3973
.Ltmp96:
    00000f8a: 	movq	$0x0, 0x118(%rsp)
    00000f96: 	jmp	.Ltmp118 # Offset: 3990
DWARF CFI Instructions:
    <empty>
End of Function "_ZN28matmul_JIK_blocked_unrolled2IdEclEPKdS2_Pdmm.isra.0/1(*2)"

Binary Function "_ZN19matmul_JKI_unrolledIdEclEPKdS2_Pdmm.isra.0/1(*2)" after disassembly {
  All names   : _ZN19matmul_JKI_unrolledIdEclEPKdS2_Pdmm.isra.0/1
                _ZN19matmul_JKI_unrolledIdEclEPKdS2_Pdmm.isra.0/matrix_multiply.cpp/1
  Number      : 15
  State       : disassembled
  Address     : 0x5c80
  Size        : 0xd9e
  MaxSize     : 0xda0
  Offset      : 0x5c80
  Section     : .text
  Orc Section : .local.text._ZN19matmul_JKI_unrolledIdEclEPKdS2_Pdmm.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB014:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	subq	$0xf0, %rsp
    00000011: 	movq	%rdi, 0x80(%rsp)
    00000019: 	movq	%rdx, 0x88(%rsp)
    00000021: 	movq	%rcx, 0x98(%rsp)
    00000029: 	testq	%rcx, %rcx
    0000002c: 	je	.Ltmp119 # Offset: 44
    00000032: 	leaq	-0x3(%r8), %rcx
    00000036: 	movq	%rsi, %rbx
    00000039: 	movq	%r8, %rax
    0000003c: 	movq	%rdx, %r15
    0000003f: 	movq	%rcx, 0x70(%rsp)
    00000044: 	leaq	0x20(%rdx), %rcx
    00000048: 	leaq	(,%r8,8), %rsi
    00000050: 	addq	$0x20, %rdi
    00000054: 	movq	%rcx, 0xd8(%rsp)
    0000005c: 	movdqa	DATAat0x2d980(%rip), %xmm11
    00000065: 	movq	%rcx, -0x20(%rsp)
    0000006a: 	movq	%r8, %rcx
    0000006d: 	leaq	(%r8,%r8), %r8
    00000071: 	movdqa	DATAat0x2d990(%rip), %xmm10
    0000007a: 	shlq	$0x5, %rcx
    0000007e: 	movq	%rsi, -0x28(%rsp)
    00000083: 	movq	%rcx, -0x10(%rsp)
    00000088: 	leaq	(%rbx,%rsi), %rcx
    0000008c: 	movq	%rcx, 0xc0(%rsp)
    00000094: 	addq	%rsi, %rcx
    00000097: 	movq	%rcx, 0xa0(%rsp)
    0000009f: 	addq	%rsi, %rcx
    000000a2: 	movq	%rcx, 0xa8(%rsp)
    000000aa: 	movq	%rax, %rcx
    000000ad: 	subq	$0x4, %rax
    000000b1: 	movq	%rax, %rdx
    000000b4: 	movq	%rax, %rsi
    000000b7: 	movq	%r8, 0xb8(%rsp)
    000000bf: 	shrq	$0x2, %rdx
    000000c3: 	andq	$-0x4, %rsi
    000000c7: 	movq	$0x0, 0x58(%rsp)
    000000d0: 	movq	%rsi, 0xd0(%rsp)
    000000d8: 	leaq	0x1(%rdx), %rsi
    000000dc: 	movq	%rsi, 0xc8(%rsp)
    000000e4: 	movq	%rax, %rsi
    000000e7: 	movq	%rcx, %rax
    000000ea: 	andq	$-0x4, %rsi
    000000ee: 	addq	%rax, %r8
    000000f1: 	movq	%rax, %r14
    000000f4: 	movq	$0x0, 0x50(%rsp)
    000000fd: 	subq	%rsi, %rcx
    00000100: 	leaq	0x4(%rsi), %r9
    00000104: 	movq	%rsi, 0x30(%rsp)
    00000109: 	movq	%rcx, 0x28(%rsp)
    0000010e: 	subq	$0x4, %rcx
    00000112: 	movq	%rcx, %rdx
    00000115: 	movq	%rcx, 0x48(%rsp)
    0000011a: 	andq	$-0x2, %rcx
    0000011e: 	movq	%r9, -0x30(%rsp)
    00000123: 	addq	%rcx, %r9
    00000126: 	shrq	%rdx
    00000129: 	movq	%rcx, 0x38(%rsp)
    0000012e: 	leaq	0x5(%rsi), %rcx
    00000132: 	movq	%rcx, 0x68(%rsp)
    00000137: 	leaq	0x6(%rsi), %rcx
    0000013b: 	movq	%rcx, 0x78(%rsp)
    00000140: 	leaq	0x7(%rsi), %rcx
    00000144: 	movq	%rdx, 0x40(%rsp)
    00000149: 	movq	%r9, 0xb0(%rsp)
    00000151: 	movq	%rcx, 0x90(%rsp)
    00000159: 	movq	%rdi, 0xe0(%rsp)
    00000161: 	movq	%r8, -0x8(%rsp)
    00000166: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp136:
    00000170: 	cmpq	$0x0, 0x70(%rsp)
    00000176: 	je	.Ltmp120 # Offset: 374
    0000017c: 	movq	0x58(%rsp), %rsi
    00000181: 	movq	%r14, -0x50(%rsp)
    00000186: 	movq	%rbx, %rcx
    00000189: 	movq	0x80(%rsp), %rax
    00000191: 	movq	0xe0(%rsp), %r8
    00000199: 	movq	$0x0, -0x68(%rsp)
    000001a2: 	leaq	(,%rsi,8), %rdx
    000001aa: 	movq	0x88(%rsp), %r9
    000001b2: 	movq	0xc8(%rsp), %r14
    000001ba: 	leaq	(%rax,%rdx), %rdi
    000001be: 	movq	0xd0(%rsp), %rax
    000001c6: 	addq	%r9, %rdx
    000001c9: 	movq	%r14, -0x48(%rsp)
    000001ce: 	addq	%rsi, %rax
    000001d1: 	movq	%rdx, 0x8(%rsp)
    000001d6: 	movq	%r9, %rdx
    000001d9: 	shlq	$0x3, %rax
    000001dd: 	addq	%rax, %r8
    000001e0: 	addq	0xd8(%rsp), %rax
    000001e8: 	movq	%rax, (%rsp)
    000001ec: 	movq	-0x30(%rsp), %rax
    000001f1: 	movq	%r8, -0x18(%rsp)
    000001f6: 	addq	%rsi, %rax
    000001f9: 	leaq	(%r9,%rax,8), %r8
    000001fd: 	movq	0xb0(%rsp), %r9
    00000205: 	movq	%r9, %rax
    00000208: 	addq	%rsi, %rax
    0000020b: 	leaq	(%rdx,%rax,8), %rax
    0000020f: 	movq	%rax, -0x40(%rsp)
    00000214: 	movq	0x68(%rsp), %rax
    00000219: 	addq	%rsi, %rax
    0000021c: 	leaq	(%rdx,%rax,8), %rax
    00000220: 	movq	%rax, 0x10(%rsp)
    00000225: 	movq	0x78(%rsp), %rax
    0000022a: 	addq	%rsi, %rax
    0000022d: 	leaq	(%rdx,%rax,8), %rax
    00000231: 	movq	%rax, 0x18(%rsp)
    00000236: 	movq	0x90(%rsp), %rax
    0000023e: 	addq	%rsi, %rax
    00000241: 	movq	0xa8(%rsp), %rsi
    00000249: 	leaq	(%rdx,%rax,8), %rax
    0000024d: 	movq	0xa0(%rsp), %rdx
    00000255: 	movq	%rax, 0x20(%rsp)
    0000025a: 	movq	0xb8(%rsp), %rax
    00000262: 	movq	%rax, -0x60(%rsp)
    00000267: 	movq	0xc0(%rsp), %rax
    0000026f: 	nop # Size: 1
.Ltmp126:
    00000270: 	movq	-0x50(%rsp), %r11
    00000275: 	movq	-0x68(%rsp), %r10
    0000027a: 	movq	-0x20(%rsp), %r13
    0000027f: 	movsd	(%rdi), %xmm5
    00000283: 	addq	%r11, %r10
    00000286: 	addq	-0x60(%rsp), %r11
    0000028b: 	movsd	0x8(%rdi), %xmm2
    00000290: 	movsd	0x10(%rdi), %xmm4
    00000295: 	movsd	0x18(%rdi), %xmm3
    0000029a: 	movq	%r10, -0x70(%rsp)
    0000029f: 	leaq	0x20(%rcx), %r10
    000002a3: 	cmpq	%r10, %r15
    000002a6: 	movq	%r11, -0x58(%rsp)
    000002ab: 	setae	%r11b
    000002af: 	cmpq	%r13, %rcx
    000002b2: 	setae	%r10b
    000002b6: 	orl	%r10d, %r11d
    000002b9: 	leaq	0x20(%rax), %r10
    000002bd: 	cmpq	%r10, %r15
    000002c0: 	setae	%r10b
    000002c4: 	cmpq	%r13, %rax
    000002c7: 	setae	%bpl
    000002cb: 	orl	%ebp, %r10d
    000002ce: 	andl	%r11d, %r10d
    000002d1: 	leaq	0x20(%rdx), %r11
    000002d5: 	cmpq	%r11, %r15
    000002d8: 	setae	%r11b
    000002dc: 	cmpq	%r13, %rdx
    000002df: 	setae	%bpl
    000002e3: 	orl	%ebp, %r11d
    000002e6: 	testb	%r11b, %r10b
    000002e9: 	je	.Ltmp121 # Offset: 745
    000002ef: 	leaq	0x20(%rsi), %r10
    000002f3: 	cmpq	%r10, %r15
    000002f6: 	setae	%r11b
    000002fa: 	cmpq	%r13, %rsi
    000002fd: 	setae	%r10b
    00000301: 	orb	%r11b, %r10b
    00000304: 	je	.Ltmp121 # Offset: 772
    0000030a: 	movapd	%xmm5, %xmm9
    0000030f: 	movapd	%xmm2, %xmm8
    00000314: 	xorl	%r10d, %r10d
    00000317: 	xorl	%r11d, %r11d
    0000031a: 	movapd	%xmm4, %xmm7
    0000031e: 	movapd	%xmm3, %xmm6
    00000322: 	movq	-0x48(%rsp), %r14
    00000327: 	unpcklpd	%xmm9, %xmm9
    0000032c: 	unpcklpd	%xmm8, %xmm8
    00000331: 	unpcklpd	%xmm7, %xmm7
    00000335: 	unpcklpd	%xmm6, %xmm6
    00000339: 	nopl	(%rax) # Size: 7
.Ltmp122:
    00000340: 	movupd	(%rax,%r10), %xmm12
    00000346: 	movupd	(%r15,%r10), %xmm13
    0000034c: 	addq	$0x1, %r11
    00000350: 	movupd	0x10(%rcx,%r10), %xmm0
    00000357: 	movupd	0x10(%rax,%r10), %xmm1
    0000035e: 	mulpd	%xmm8, %xmm12
    00000363: 	mulpd	%xmm8, %xmm1
    00000368: 	mulpd	%xmm9, %xmm0
    0000036d: 	addpd	%xmm1, %xmm0
    00000371: 	movupd	0x10(%rdx,%r10), %xmm1
    00000378: 	mulpd	%xmm7, %xmm1
    0000037c: 	addpd	%xmm1, %xmm0
    00000380: 	movupd	0x10(%rsi,%r10), %xmm1
    00000387: 	mulpd	%xmm6, %xmm1
    0000038b: 	addpd	%xmm1, %xmm0
    0000038f: 	movupd	0x10(%r15,%r10), %xmm1
    00000396: 	addpd	%xmm1, %xmm0
    0000039a: 	movupd	(%rcx,%r10), %xmm1
    000003a0: 	mulpd	%xmm9, %xmm1
    000003a5: 	addpd	%xmm12, %xmm1
    000003aa: 	movupd	(%rdx,%r10), %xmm12
    000003b0: 	mulpd	%xmm7, %xmm12
    000003b5: 	addpd	%xmm12, %xmm1
    000003ba: 	movupd	(%rsi,%r10), %xmm12
    000003c0: 	movups	%xmm0, 0x10(%r15,%r10)
    000003c6: 	mulpd	%xmm6, %xmm12
    000003cb: 	addpd	%xmm12, %xmm1
    000003d0: 	addpd	%xmm13, %xmm1
    000003d5: 	movups	%xmm1, (%r15,%r10)
    000003da: 	addq	$0x20, %r10
    000003de: 	cmpq	%r14, %r11
    000003e1: 	jb	.Ltmp122 # Offset: 993
.Ltmp138:
    000003e7: 	movq	%r14, -0x48(%rsp)
    000003ec: 	movq	-0x30(%rsp), %r10
    000003f1: 	cmpq	%r10, -0x50(%rsp)
    000003f6: 	jbe	.Ltmp123 # Offset: 1014
    000003fc: 	movq	0x30(%rsp), %r10
    00000401: 	movq	-0x68(%rsp), %r11
    00000406: 	movq	-0x58(%rsp), %r13
    0000040b: 	leaq	0x5(%r11,%r10), %r12
    00000410: 	movq	-0x70(%rsp), %r11
    00000415: 	shlq	$0x3, %r12
    00000419: 	leaq	0x5(%r10,%r13), %r13
    0000041e: 	leaq	0x5(%r10,%r11), %rbp
    00000423: 	movq	-0x60(%rsp), %r11
    00000428: 	shlq	$0x3, %r13
    0000042c: 	shlq	$0x3, %rbp
    00000430: 	leaq	0x5(%r11,%r10), %r11
    00000435: 	shlq	$0x3, %r11
    00000439: 	leaq	(%rbx,%r11), %r10
    0000043d: 	cmpq	%r10, %r8
    00000440: 	leaq	(%rbx,%r12), %r10
    00000444: 	setne	-0x38(%rsp)
    00000449: 	cmpq	%r10, %r8
    0000044c: 	movzbl	-0x38(%rsp), %r14d
    00000452: 	setne	%r10b
    00000456: 	andl	%r14d, %r10d
    00000459: 	cmpq	$0x5, 0x28(%rsp)
    0000045f: 	setne	-0x38(%rsp)
    00000464: 	movzbl	-0x38(%rsp), %r14d
    0000046a: 	andl	%r14d, %r10d
    0000046d: 	leaq	(%rbx,%rbp), %r14
    00000471: 	cmpq	%r14, %r8
    00000474: 	setne	-0x38(%rsp)
    00000479: 	movzbl	-0x38(%rsp), %r14d
    0000047f: 	testb	%r10b, %r14b
    00000482: 	je	.Ltmp124 # Offset: 1154
    00000488: 	leaq	(%rbx,%r13), %r10
    0000048c: 	cmpq	%r10, %r8
    0000048f: 	je	.Ltmp124 # Offset: 1167
    00000495: 	leaq	-0x8(%rbx,%r12), %r10
    0000049a: 	leaq	-0x8(%rbx,%rbp), %rbp
    0000049f: 	movapd	%xmm5, %xmm8
    000004a4: 	movupd	(%r8), %xmm15
    000004a9: 	movupd	(%r10), %xmm0
    000004ae: 	movupd	(%rbp), %xmm9
    000004b4: 	movapd	%xmm2, %xmm7
    000004b8: 	unpcklpd	%xmm8, %xmm8
    000004bd: 	unpcklpd	%xmm7, %xmm7
    000004c1: 	leaq	-0x8(%rbx,%r11), %r11
    000004c6: 	movapd	%xmm4, %xmm6
    000004ca: 	cmpq	$0x1, 0x40(%rsp)
    000004d0: 	mulpd	%xmm7, %xmm9
    000004d5: 	unpcklpd	%xmm6, %xmm6
    000004d9: 	leaq	-0x8(%rbx,%r13), %r12
    000004de: 	mulpd	%xmm8, %xmm0
    000004e3: 	movapd	%xmm3, %xmm1
    000004e7: 	unpcklpd	%xmm1, %xmm1
    000004eb: 	addpd	%xmm9, %xmm0
    000004f0: 	movupd	(%r11), %xmm9
    000004f5: 	mulpd	%xmm6, %xmm9
    000004fa: 	addpd	%xmm9, %xmm0
    000004ff: 	movupd	(%r12), %xmm9
    00000505: 	mulpd	%xmm1, %xmm9
    0000050a: 	addpd	%xmm9, %xmm0
    0000050f: 	addpd	%xmm15, %xmm0
    00000514: 	movups	%xmm0, (%r8)
    00000518: 	jbe	.Ltmp125 # Offset: 1304
    0000051a: 	movupd	0x10(%r10), %xmm0
    00000520: 	mulpd	%xmm8, %xmm0
    00000525: 	movupd	0x10(%rbp), %xmm8
    0000052b: 	mulpd	%xmm8, %xmm7
    00000530: 	addpd	%xmm7, %xmm0
    00000534: 	movupd	0x10(%r11), %xmm7
    0000053a: 	mulpd	%xmm7, %xmm6
    0000053e: 	movupd	0x10(%r8), %xmm7
    00000544: 	addpd	%xmm6, %xmm0
    00000548: 	movupd	0x10(%r12), %xmm6
    0000054f: 	mulpd	%xmm6, %xmm1
    00000553: 	addpd	%xmm1, %xmm0
    00000557: 	addpd	%xmm7, %xmm0
    0000055b: 	movups	%xmm0, 0x10(%r8)
.Ltmp125:
    00000560: 	movq	0x48(%rsp), %r11
    00000565: 	cmpq	%r11, 0x38(%rsp)
    0000056a: 	je	.Ltmp123 # Offset: 1386
    0000056c: 	movq	-0x70(%rsp), %r11
    00000571: 	leaq	(%r9,%r11), %r10
    00000575: 	movq	-0x58(%rsp), %r11
    0000057a: 	mulsd	(%rbx,%r10,8), %xmm2
    00000580: 	movq	-0x68(%rsp), %r10
    00000585: 	addq	%r9, %r10
    00000588: 	mulsd	(%rbx,%r10,8), %xmm5
    0000058e: 	movq	-0x60(%rsp), %r10
    00000593: 	addq	%r9, %r10
    00000596: 	mulsd	(%rbx,%r10,8), %xmm4
    0000059c: 	leaq	(%r9,%r11), %r10
    000005a0: 	movq	-0x40(%rsp), %r11
    000005a5: 	mulsd	(%rbx,%r10,8), %xmm3
    000005ab: 	addsd	%xmm5, %xmm2
    000005af: 	addsd	%xmm4, %xmm2
    000005b3: 	addsd	%xmm2, %xmm3
    000005b7: 	addsd	(%r11), %xmm3
    000005bc: 	movsd	%xmm3, (%r11)
.Ltmp123:
    000005c1: 	movq	-0x10(%rsp), %r11
    000005c6: 	movq	-0x8(%rsp), %r10
    000005cb: 	addq	$0x20, %rdi
    000005cf: 	addq	%r11, %rcx
    000005d2: 	addq	%r11, %rax
    000005d5: 	addq	%r11, %rdx
    000005d8: 	addq	%r11, %rsi
    000005db: 	movq	-0x70(%rsp), %r11
    000005e0: 	addq	%r10, %r11
    000005e3: 	movq	%r11, -0x68(%rsp)
    000005e8: 	movq	-0x58(%rsp), %r11
    000005ed: 	addq	%r10, %r11
    000005f0: 	movq	%r11, -0x60(%rsp)
    000005f5: 	cmpq	-0x18(%rsp), %rdi
    000005fa: 	jne	.Ltmp126 # Offset: 1530
    00000600: 	movq	0x70(%rsp), %rax
    00000605: 	movq	-0x50(%rsp), %r14
    0000060a: 	movq	%rax, -0x40(%rsp)
    0000060f: 	movq	-0x30(%rsp), %rax
    00000614: 	movq	%rax, -0x68(%rsp)
    00000619: 	cmpq	%rax, %r14
    0000061c: 	jbe	.Ltmp127 # Offset: 1564
.Ltmp142:
    00000622: 	movq	-0x68(%rsp), %rax
    00000627: 	movq	0x58(%rsp), %r12
    0000062c: 	movq	%r15, -0x18(%rsp)
    00000631: 	movq	0x80(%rsp), %rdi
    00000639: 	movq	0x88(%rsp), %r9
    00000641: 	movq	%rax, %rdx
    00000644: 	imulq	-0x28(%rsp), %rax
    0000064a: 	imulq	%r14, %rdx
    0000064e: 	leaq	(%rbx,%rax), %r13
    00000652: 	leaq	(,%r12,8), %rax
    0000065a: 	addq	%rax, %rdi
    0000065d: 	addq	%r9, %rax
    00000660: 	movq	%rdi, -0x38(%rsp)
    00000665: 	movq	-0x40(%rsp), %rdi
    0000066a: 	movq	%rax, 0x60(%rsp)
    0000066f: 	leaq	0x40(%r15), %rax
    00000673: 	subq	$0x1, %rdi
    00000677: 	movq	%rax, (%rsp)
    0000067b: 	movq	%rdi, %rcx
    0000067e: 	movq	%rdi, 0x8(%rsp)
    00000683: 	shrq	$0x2, %rcx
    00000687: 	leaq	0x1(%rcx), %rdi
    0000068b: 	movq	%rdi, %rcx
    0000068e: 	movq	%rdi, 0x20(%rsp)
    00000693: 	andq	$-0x2, %rdi
    00000697: 	shrq	%rcx
    0000069a: 	leaq	(,%rdi,4), %r10
    000006a2: 	movq	%rdi, 0x18(%rsp)
    000006a7: 	shlq	$0x6, %rcx
    000006ab: 	leaq	0x4(%r10), %r11
    000006af: 	addq	%r15, %rcx
    000006b2: 	movq	%r11, -0x70(%rsp)
    000006b7: 	movq	%r10, %r15
    000006ba: 	movq	%rcx, 0x10(%rsp)
    000006bf: 	leaq	(%r10,%r12), %rcx
    000006c3: 	shlq	$0x3, %rcx
    000006c7: 	leaq	(%r9,%rcx), %r8
    000006cb: 	leaq	0x8(%r9,%rcx), %rdi
    000006d0: 	leaq	0x10(%r9,%rcx), %rsi
    000006d5: 	leaq	0x18(%r9,%rcx), %rcx
    000006da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp135:
    000006e0: 	movq	-0x38(%rsp), %rax
    000006e5: 	movq	-0x68(%rsp), %r11
    000006ea: 	cmpq	$0x0, -0x40(%rsp)
    000006f0: 	movsd	(%rax,%r11,8), %xmm0
    000006f6: 	je	.Ltmp128 # Offset: 1782
    000006fc: 	movq	-0x18(%rsp), %r11
    00000701: 	cmpq	(%rsp), %r13
    00000705: 	leaq	0x40(%r13), %rax
    00000709: 	setae	%r10b
    0000070d: 	cmpq	%r11, %rax
    00000710: 	setbe	%al
    00000713: 	orb	%r10b, %al
    00000716: 	je	.Ltmp129 # Offset: 1814
    0000071c: 	cmpq	$0x3, 0x8(%rsp)
    00000722: 	jbe	.Ltmp129 # Offset: 1826
    00000728: 	movapd	%xmm0, %xmm5
    0000072c: 	movq	%r11, %rax
    0000072f: 	movq	0x10(%rsp), %r11
    00000734: 	movq	%r13, %r10
    00000737: 	movdqa	DATAat0x2d9a0(%rip), %xmm7
    0000073f: 	unpcklpd	%xmm5, %xmm5
    00000743: 	nopl	(%rax,%rax) # Size: 5
.Ltmp130:
    00000748: 	movupd	0x10(%r10), %xmm3
    0000074e: 	movupd	0x20(%r10), %xmm2
    00000754: 	movdqa	%xmm7, %xmm6
    00000758: 	addq	$0x40, %rax
    0000075c: 	movupd	0x30(%r10), %xmm1
    00000762: 	movupd	-0x30(%rax), %xmm4
    00000767: 	paddq	%xmm11, %xmm7
    0000076c: 	paddq	%xmm10, %xmm6
    00000771: 	mulpd	%xmm5, %xmm3
    00000775: 	movupd	-0x40(%rax), %xmm14
    0000077b: 	addq	$0x40, %r10
    0000077f: 	mulpd	%xmm5, %xmm2
    00000783: 	mulpd	%xmm5, %xmm1
    00000787: 	addpd	%xmm4, %xmm3
    0000078b: 	movupd	-0x20(%rax), %xmm4
    00000790: 	addpd	%xmm4, %xmm2
    00000794: 	movupd	-0x10(%rax), %xmm4
    00000799: 	addpd	%xmm4, %xmm1
    0000079d: 	movupd	-0x40(%r10), %xmm4
    000007a3: 	movups	%xmm3, -0x30(%rax)
    000007a7: 	movups	%xmm2, -0x20(%rax)
    000007ab: 	mulpd	%xmm5, %xmm4
    000007af: 	movups	%xmm1, -0x10(%rax)
    000007b3: 	addpd	%xmm14, %xmm4
    000007b8: 	movups	%xmm4, -0x40(%rax)
    000007bc: 	cmpq	%rax, %r11
    000007bf: 	jne	.Ltmp130 # Offset: 1983
    000007c1: 	movhlps	%xmm6, %xmm7
    000007c4: 	movq	0x20(%rsp), %r10
    000007c9: 	movq	%xmm7, %rax
    000007ce: 	cmpq	%r10, 0x18(%rsp)
    000007d3: 	je	.Ltmp131 # Offset: 2003
    000007d5: 	leaq	(%rdx,%r15), %rax
    000007d9: 	movsd	(%rbx,%rax,8), %xmm1
    000007de: 	mulsd	%xmm0, %xmm1
    000007e2: 	addsd	(%r8), %xmm1
    000007e7: 	movsd	%xmm1, (%r8)
    000007ec: 	movsd	0x8(%rbx,%rax,8), %xmm1
    000007f2: 	mulsd	%xmm0, %xmm1
    000007f6: 	addsd	(%rdi), %xmm1
    000007fa: 	movsd	%xmm1, (%rdi)
    000007fe: 	movsd	0x10(%rbx,%rax,8), %xmm1
    00000804: 	mulsd	%xmm0, %xmm1
    00000808: 	addsd	(%rsi), %xmm1
    0000080c: 	movsd	%xmm1, (%rsi)
    00000810: 	movsd	0x18(%rbx,%rax,8), %xmm1
    00000816: 	movq	-0x70(%rsp), %rax
    0000081b: 	mulsd	%xmm0, %xmm1
    0000081f: 	addsd	(%rcx), %xmm1
    00000823: 	movsd	%xmm1, (%rcx)
.Ltmp131:
    00000827: 	cmpq	%rax, %r14
    0000082a: 	jbe	.Ltmp132 # Offset: 2090
.Ltmp141:
    00000830: 	leaq	0x1(%rax), %r11
    00000834: 	movq	%r14, %r10
    00000837: 	movq	%r11, %rbp
    0000083a: 	leaq	(%rax,%r12), %r11
    0000083e: 	subq	%rax, %r10
    00000841: 	leaq	(%r9,%r11,8), %r11
    00000845: 	movq	%rbp, -0x58(%rsp)
    0000084a: 	movq	%r11, -0x60(%rsp)
    0000084f: 	leaq	0x1(%rax,%rdx), %r11
    00000854: 	shlq	$0x3, %r11
    00000858: 	cmpq	%rbp, %r14
    0000085b: 	movq	%r10, -0x48(%rsp)
    00000860: 	setae	-0x50(%rsp)
    00000865: 	cmpq	$0x1, %r10
    00000869: 	movzbl	-0x50(%rsp), %ebp
    0000086e: 	setne	-0x50(%rsp)
    00000873: 	movzbl	-0x50(%rsp), %r10d
    00000879: 	testb	%r10b, %bpl
    0000087c: 	je	.Ltmp133 # Offset: 2172
    00000882: 	movq	-0x60(%rsp), %rbp
    00000887: 	leaq	(%rbx,%r11), %r10
    0000088b: 	cmpq	%r10, %rbp
    0000088e: 	je	.Ltmp133 # Offset: 2190
    00000894: 	leaq	-0x8(%rbx,%r11), %r11
    00000899: 	movapd	%xmm0, %xmm2
    0000089d: 	movupd	(%rbp), %xmm7
    000008a2: 	cmpq	-0x58(%rsp), %r14
    000008a7: 	movupd	(%r11), %xmm1
    000008ac: 	unpcklpd	%xmm2, %xmm2
    000008b0: 	movl	$0x1, %r10d
    000008b6: 	cmovaeq	-0x48(%rsp), %r10
    000008bc: 	mulpd	%xmm2, %xmm1
    000008c0: 	addpd	%xmm7, %xmm1
    000008c4: 	movups	%xmm1, (%rbp)
    000008c8: 	movq	%r10, %rbp
    000008cb: 	shrq	%rbp
    000008ce: 	cmpq	$0x1, %rbp
    000008d2: 	je	.Ltmp134 # Offset: 2258
    000008d4: 	movupd	0x10(%r11), %xmm1
    000008da: 	movq	-0x60(%rsp), %rbp
    000008df: 	mulpd	%xmm2, %xmm1
    000008e3: 	movupd	0x10(%rbp), %xmm7
    000008e8: 	addpd	%xmm7, %xmm1
    000008ec: 	movups	%xmm1, 0x10(%rbp)
.Ltmp134:
    000008f0: 	movq	%r10, %r11
    000008f3: 	andq	$-0x2, %r11
    000008f7: 	addq	%r11, %rax
    000008fa: 	cmpq	%r10, %r11
    000008fd: 	je	.Ltmp132 # Offset: 2301
.Ltmp139:
    000008ff: 	leaq	(%rax,%r12), %r10
    00000903: 	addq	%rdx, %rax
    00000906: 	mulsd	(%rbx,%rax,8), %xmm0
    0000090b: 	leaq	(%r9,%r10,8), %r10
    0000090f: 	addsd	(%r10), %xmm0
    00000914: 	movsd	%xmm0, (%r10)
.Ltmp132:
    00000919: 	addq	$0x1, -0x68(%rsp)
    0000091f: 	movq	-0x68(%rsp), %rax
    00000924: 	addq	%r14, %rdx
    00000927: 	addq	-0x28(%rsp), %r13
    0000092c: 	cmpq	%rax, %r14
    0000092f: 	ja	.Ltmp135 # Offset: 2351
    00000935: 	movq	-0x18(%rsp), %r15
.Ltmp127:
    0000093a: 	movq	-0x28(%rsp), %rsi
    0000093f: 	addq	$0x1, 0x50(%rsp)
    00000945: 	addq	%r14, 0x58(%rsp)
    0000094a: 	movq	0x50(%rsp), %rax
    0000094f: 	addq	%rsi, -0x20(%rsp)
    00000954: 	addq	%rsi, %r15
    00000957: 	cmpq	0x98(%rsp), %rax
    0000095f: 	jne	.Ltmp136 # Offset: 2399
.Ltmp119:
    00000965: 	addq	$0xf0, %rsp
    0000096c: 	popq	%rbx
    0000096d: 	popq	%rbp
    0000096e: 	popq	%r12
    00000970: 	popq	%r13
    00000972: 	popq	%r14
    00000974: 	popq	%r15
    00000976: 	retq # Offset: 2422
    00000977: 	nopw	(%rax,%rax) # Size: 9
.Ltmp121:
    00000980: 	movq	%rax, -0x38(%rsp)
    00000985: 	movq	%rax, %rbp
    00000988: 	movq	0x8(%rsp), %r10
    0000098d: 	movq	%rsi, %r13
    00000990: 	movq	(%rsp), %rax
    00000994: 	movq	-0x48(%rsp), %r14
    00000999: 	movq	%rdx, %r12
    0000099c: 	movq	%rcx, %r11
    0000099f: 	nop # Size: 1
.Ltmp137:
    000009a0: 	addq	$0x20, %r10
    000009a4: 	addq	$0x20, %r11
    000009a8: 	addq	$0x20, %rbp
    000009ac: 	addq	$0x20, %r12
    000009b0: 	movsd	-0x20(%r11), %xmm0
    000009b6: 	movsd	-0x20(%rbp), %xmm1
    000009bb: 	addq	$0x20, %r13
    000009bf: 	mulsd	%xmm2, %xmm1
    000009c3: 	mulsd	%xmm5, %xmm0
    000009c7: 	addsd	%xmm1, %xmm0
    000009cb: 	movsd	-0x20(%r12), %xmm1
    000009d2: 	mulsd	%xmm4, %xmm1
    000009d6: 	addsd	%xmm1, %xmm0
    000009da: 	movsd	-0x20(%r13), %xmm1
    000009e0: 	mulsd	%xmm3, %xmm1
    000009e4: 	addsd	%xmm1, %xmm0
    000009e8: 	addsd	-0x20(%r10), %xmm0
    000009ee: 	movsd	%xmm0, -0x20(%r10)
    000009f4: 	movsd	-0x18(%r11), %xmm0
    000009fa: 	movsd	-0x18(%rbp), %xmm1
    000009ff: 	mulsd	%xmm5, %xmm0
    00000a03: 	mulsd	%xmm2, %xmm1
    00000a07: 	addsd	%xmm1, %xmm0
    00000a0b: 	movsd	-0x18(%r12), %xmm1
    00000a12: 	mulsd	%xmm4, %xmm1
    00000a16: 	addsd	%xmm1, %xmm0
    00000a1a: 	movsd	-0x18(%r13), %xmm1
    00000a20: 	mulsd	%xmm3, %xmm1
    00000a24: 	addsd	%xmm1, %xmm0
    00000a28: 	addsd	-0x18(%r10), %xmm0
    00000a2e: 	movsd	%xmm0, -0x18(%r10)
    00000a34: 	movsd	-0x10(%r11), %xmm0
    00000a3a: 	movsd	-0x10(%rbp), %xmm1
    00000a3f: 	mulsd	%xmm5, %xmm0
    00000a43: 	mulsd	%xmm2, %xmm1
    00000a47: 	addsd	%xmm1, %xmm0
    00000a4b: 	movsd	-0x10(%r12), %xmm1
    00000a52: 	mulsd	%xmm4, %xmm1
    00000a56: 	addsd	%xmm1, %xmm0
    00000a5a: 	movsd	-0x10(%r13), %xmm1
    00000a60: 	mulsd	%xmm3, %xmm1
    00000a64: 	addsd	%xmm1, %xmm0
    00000a68: 	addsd	-0x10(%r10), %xmm0
    00000a6e: 	movsd	%xmm0, -0x10(%r10)
    00000a74: 	movsd	-0x8(%r11), %xmm0
    00000a7a: 	movsd	-0x8(%rbp), %xmm1
    00000a7f: 	mulsd	%xmm5, %xmm0
    00000a83: 	mulsd	%xmm2, %xmm1
    00000a87: 	addsd	%xmm1, %xmm0
    00000a8b: 	movsd	-0x8(%r12), %xmm1
    00000a92: 	mulsd	%xmm4, %xmm1
    00000a96: 	addsd	%xmm1, %xmm0
    00000a9a: 	movsd	-0x8(%r13), %xmm1
    00000aa0: 	mulsd	%xmm3, %xmm1
    00000aa4: 	addsd	%xmm1, %xmm0
    00000aa8: 	addsd	-0x8(%r10), %xmm0
    00000aae: 	movsd	%xmm0, -0x8(%r10)
    00000ab4: 	cmpq	%r10, %rax
    00000ab7: 	jne	.Ltmp137 # Offset: 2743
    00000abd: 	movq	-0x38(%rsp), %rax
    00000ac2: 	jmp	.Ltmp138 # Offset: 2754
    00000ac7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp133:
    00000ad0: 	movsd	-0x8(%rbx,%r11), %xmm1
    00000ad7: 	movq	-0x60(%rsp), %r11
    00000adc: 	mulsd	%xmm0, %xmm1
    00000ae0: 	addsd	(%r11), %xmm1
    00000ae5: 	movsd	%xmm1, (%r11)
    00000aea: 	movq	-0x58(%rsp), %r11
    00000aef: 	cmpq	%r11, %r14
    00000af2: 	jbe	.Ltmp132 # Offset: 2802
    00000af8: 	leaq	(%r11,%r12), %r10
    00000afc: 	addq	%rdx, %r11
    00000aff: 	movsd	(%rbx,%r11,8), %xmm1
    00000b05: 	leaq	(%r9,%r10,8), %r10
    00000b09: 	mulsd	%xmm0, %xmm1
    00000b0d: 	addsd	(%r10), %xmm1
    00000b12: 	movsd	%xmm1, (%r10)
    00000b17: 	leaq	0x2(%rax), %r10
    00000b1b: 	cmpq	%r10, %r14
    00000b1e: 	jbe	.Ltmp132 # Offset: 2846
    00000b24: 	leaq	(%r10,%r12), %r11
    00000b28: 	addq	%rdx, %r10
    00000b2b: 	addq	$0x3, %rax
    00000b2f: 	movsd	(%rbx,%r10,8), %xmm1
    00000b35: 	leaq	(%r9,%r11,8), %r11
    00000b39: 	mulsd	%xmm0, %xmm1
    00000b3d: 	addsd	(%r11), %xmm1
    00000b42: 	movsd	%xmm1, (%r11)
    00000b47: 	cmpq	%rax, %r14
    00000b4a: 	ja	.Ltmp139 # Offset: 2890
    00000b50: 	jmp	.Ltmp132 # Offset: 2896
    00000b55: 	nopl	(%rax) # Size: 3
.Ltmp129:
    00000b58: 	movq	0x60(%rsp), %r10
    00000b5d: 	movq	-0x40(%rsp), %rbp
    00000b62: 	movq	%r13, %r11
    00000b65: 	xorl	%eax, %eax
    00000b67: 	nopw	(%rax,%rax) # Size: 9
.Ltmp140:
    00000b70: 	movsd	(%r11), %xmm1
    00000b75: 	addq	$0x4, %rax
    00000b79: 	addq	$0x20, %r10
    00000b7d: 	addq	$0x20, %r11
    00000b81: 	mulsd	%xmm0, %xmm1
    00000b85: 	addsd	-0x20(%r10), %xmm1
    00000b8b: 	movsd	%xmm1, -0x20(%r10)
    00000b91: 	movsd	-0x18(%r11), %xmm1
    00000b97: 	mulsd	%xmm0, %xmm1
    00000b9b: 	addsd	-0x18(%r10), %xmm1
    00000ba1: 	movsd	%xmm1, -0x18(%r10)
    00000ba7: 	movsd	-0x10(%r11), %xmm1
    00000bad: 	mulsd	%xmm0, %xmm1
    00000bb1: 	addsd	-0x10(%r10), %xmm1
    00000bb7: 	movsd	%xmm1, -0x10(%r10)
    00000bbd: 	movsd	-0x8(%r11), %xmm1
    00000bc3: 	mulsd	%xmm0, %xmm1
    00000bc7: 	addsd	-0x8(%r10), %xmm1
    00000bcd: 	movsd	%xmm1, -0x8(%r10)
    00000bd3: 	cmpq	%rax, %rbp
    00000bd6: 	ja	.Ltmp140 # Offset: 3030
    00000bd8: 	jmp	.Ltmp131 # Offset: 3032
    00000bdd: 	nopl	(%rax) # Size: 3
.Ltmp124:
    00000be0: 	movq	-0x68(%rsp), %r11
    00000be5: 	movq	-0x30(%rsp), %r14
    00000bea: 	movq	-0x70(%rsp), %r12
    00000bef: 	movq	-0x60(%rsp), %rbp
    00000bf4: 	movq	%r11, %r10
    00000bf7: 	movq	-0x58(%rsp), %r13
    00000bfc: 	addq	%r14, %r10
    00000bff: 	movsd	(%rbx,%r10,8), %xmm0
    00000c05: 	movq	%r14, %r10
    00000c08: 	addq	%r12, %r10
    00000c0b: 	movsd	(%rbx,%r10,8), %xmm1
    00000c11: 	mulsd	%xmm5, %xmm0
    00000c15: 	movq	%rbp, %r10
    00000c18: 	addq	%r14, %r10
    00000c1b: 	addq	%r13, %r14
    00000c1e: 	mulsd	%xmm2, %xmm1
    00000c22: 	addsd	%xmm1, %xmm0
    00000c26: 	movsd	(%rbx,%r10,8), %xmm1
    00000c2c: 	mulsd	%xmm4, %xmm1
    00000c30: 	addsd	%xmm1, %xmm0
    00000c34: 	movsd	(%rbx,%r14,8), %xmm1
    00000c3a: 	movq	0x68(%rsp), %r14
    00000c3f: 	mulsd	%xmm3, %xmm1
    00000c43: 	addsd	%xmm1, %xmm0
    00000c47: 	addsd	(%r8), %xmm0
    00000c4c: 	movsd	%xmm0, (%r8)
    00000c51: 	cmpq	%r14, -0x50(%rsp)
    00000c56: 	jbe	.Ltmp123 # Offset: 3158
    00000c5c: 	movq	%r14, %r10
    00000c5f: 	addq	%r11, %r10
    00000c62: 	movsd	(%rbx,%r10,8), %xmm0
    00000c68: 	movq	%r14, %r10
    00000c6b: 	addq	%r12, %r10
    00000c6e: 	movq	0x78(%rsp), %r12
    00000c73: 	movsd	(%rbx,%r10,8), %xmm1
    00000c79: 	mulsd	%xmm5, %xmm0
    00000c7d: 	movq	%r14, %r10
    00000c80: 	addq	%r13, %r14
    00000c83: 	addq	%rbp, %r10
    00000c86: 	mulsd	%xmm2, %xmm1
    00000c8a: 	addsd	%xmm1, %xmm0
    00000c8e: 	movsd	(%rbx,%r10,8), %xmm1
    00000c94: 	mulsd	%xmm4, %xmm1
    00000c98: 	addsd	%xmm1, %xmm0
    00000c9c: 	movsd	(%rbx,%r14,8), %xmm1
    00000ca2: 	movq	0x10(%rsp), %r14
    00000ca7: 	mulsd	%xmm3, %xmm1
    00000cab: 	addsd	%xmm1, %xmm0
    00000caf: 	addsd	(%r14), %xmm0
    00000cb4: 	movsd	%xmm0, (%r14)
    00000cb9: 	cmpq	%r12, -0x50(%rsp)
    00000cbe: 	jbe	.Ltmp123 # Offset: 3262
    00000cc4: 	movq	%r11, %r10
    00000cc7: 	movq	%r11, %r14
    00000cca: 	movq	%rbp, %r11
    00000ccd: 	addq	%r12, %r10
    00000cd0: 	movsd	(%rbx,%r10,8), %xmm0
    00000cd6: 	movq	-0x70(%rsp), %r10
    00000cdb: 	mulsd	%xmm5, %xmm0
    00000cdf: 	addq	%r12, %r10
    00000ce2: 	movsd	(%rbx,%r10,8), %xmm1
    00000ce8: 	movq	%rbp, %r10
    00000ceb: 	movq	0x18(%rsp), %rbp
    00000cf0: 	addq	%r12, %r10
    00000cf3: 	addq	%r13, %r12
    00000cf6: 	mulsd	%xmm2, %xmm1
    00000cfa: 	addsd	%xmm1, %xmm0
    00000cfe: 	movsd	(%rbx,%r10,8), %xmm1
    00000d04: 	mulsd	%xmm4, %xmm1
    00000d08: 	addsd	%xmm1, %xmm0
    00000d0c: 	movsd	(%rbx,%r12,8), %xmm1
    00000d12: 	mulsd	%xmm3, %xmm1
    00000d16: 	addsd	%xmm1, %xmm0
    00000d1a: 	addsd	(%rbp), %xmm0
    00000d1f: 	movsd	%xmm0, (%rbp)
    00000d24: 	movq	0x90(%rsp), %rbp
    00000d2c: 	cmpq	%rbp, -0x50(%rsp)
    00000d31: 	jbe	.Ltmp123 # Offset: 3377
    00000d37: 	movq	-0x70(%rsp), %r10
    00000d3c: 	addq	%rbp, %r14
    00000d3f: 	addq	%rbp, %r11
    00000d42: 	mulsd	(%rbx,%r14,8), %xmm5
    00000d48: 	movq	0x20(%rsp), %r14
    00000d4d: 	mulsd	(%rbx,%r11,8), %xmm4
    00000d53: 	addq	%rbp, %r10
    00000d56: 	addq	%r13, %rbp
    00000d59: 	mulsd	(%rbx,%r10,8), %xmm2
    00000d5f: 	mulsd	(%rbx,%rbp,8), %xmm3
    00000d64: 	addsd	%xmm5, %xmm2
    00000d68: 	addsd	%xmm2, %xmm4
    00000d6c: 	addsd	%xmm4, %xmm3
    00000d70: 	addsd	(%r14), %xmm3
    00000d75: 	movsd	%xmm3, (%r14)
    00000d7a: 	jmp	.Ltmp123 # Offset: 3450
    00000d7f: 	nop # Size: 1
.Ltmp128:
    00000d80: 	xorl	%eax, %eax
    00000d82: 	jmp	.Ltmp141 # Offset: 3458
.Ltmp120:
    00000d87: 	movq	$0x0, -0x40(%rsp)
    00000d90: 	movq	$0x0, -0x68(%rsp)
    00000d99: 	jmp	.Ltmp142 # Offset: 3481
DWARF CFI Instructions:
    <empty>
End of Function "_ZN19matmul_JKI_unrolledIdEclEPKdS2_Pdmm.isra.0/1(*2)"

Binary Function "_ZN19matmul_KJI_unrolledIdEclEPKdS2_Pdmm.isra.0/1(*2)" after disassembly {
  All names   : _ZN19matmul_KJI_unrolledIdEclEPKdS2_Pdmm.isra.0/1
                _ZN19matmul_KJI_unrolledIdEclEPKdS2_Pdmm.isra.0/matrix_multiply.cpp/1
  Number      : 16
  State       : disassembled
  Address     : 0x6a20
  Size        : 0xde8
  MaxSize     : 0xdf0
  Offset      : 0x6a20
  Section     : .text
  Orc Section : .local.text._ZN19matmul_KJI_unrolledIdEclEPKdS2_Pdmm.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB015:
    00000000: 	pushq	%r15
    00000002: 	movq	%r8, %rax
    00000005: 	movq	%rdx, %r15
    00000008: 	pushq	%r14
    0000000a: 	pushq	%r13
    0000000c: 	pushq	%r12
    0000000e: 	pushq	%rbp
    0000000f: 	movq	%r8, %rbp
    00000012: 	pushq	%rbx
    00000013: 	subq	$0x190, %rsp
    0000001a: 	subq	$0x3, %rax
    0000001e: 	movq	%rdi, 0x170(%rsp)
    00000026: 	movq	%rsi, 0xe0(%rsp)
    0000002e: 	movq	%rcx, -0x60(%rsp)
    00000033: 	movq	%rax, -0x18(%rsp)
    00000038: 	je	.Ltmp143 # Offset: 56
    0000003e: 	leaq	(,%r8,4), %rax
    00000046: 	movq	%rsi, %rbx
    00000049: 	movq	%rsi, %r11
    0000004c: 	movq	$0x0, 0x78(%rsp)
    00000055: 	movq	%rax, 0x160(%rsp)
    0000005d: 	leaq	(%r8,%r8), %rax
    00000061: 	leaq	(,%r8,8), %rcx
    00000069: 	movq	%rax, 0x80(%rsp)
    00000071: 	movq	%r8, %rax
    00000074: 	addq	%rcx, %rbx
    00000077: 	shlq	$0x5, %rax
    0000007b: 	movq	%r8, -0x68(%rsp)
    00000080: 	leaq	(%rbx,%rcx), %r12
    00000084: 	movq	%rax, 0x168(%rsp)
    0000008c: 	movq	%r8, %rax
    0000008f: 	leaq	(%r12,%rcx), %r13
    00000093: 	shlq	$0x4, %rax
    00000097: 	movq	%r15, -0x70(%rsp)
    0000009c: 	movq	%rax, 0x178(%rsp)
    000000a4: 	leaq	-0x4(%r8), %rax
    000000a8: 	movq	$0x0, 0x28(%rsp)
    000000b1: 	movq	%rax, %rdx
    000000b4: 	andq	$-0x4, %rax
    000000b8: 	shrq	$0x2, %rdx
    000000bc: 	movq	%rax, 0x90(%rsp)
    000000c4: 	leaq	(,%rdx,4), %rdi
    000000cc: 	leaq	0x1(%rdx), %r14
    000000d0: 	movq	%rdi, 0x110(%rsp)
    000000d8: 	movq	%r8, %rdi
    000000db: 	leaq	0x4(%rax), %rdx
    000000df: 	subq	%rax, %rdi
    000000e2: 	movq	%rdx, -0x58(%rsp)
    000000e7: 	movq	%rdi, 0x38(%rsp)
    000000ec: 	subq	$0x4, %rdi
    000000f0: 	movq	%rdi, %rsi
    000000f3: 	movq	%rdi, 0x70(%rsp)
    000000f8: 	andq	$-0x2, %rdi
    000000fc: 	addq	%rdi, %rdx
    000000ff: 	movq	%rdi, 0x60(%rsp)
    00000104: 	leaq	0x5(%rax), %rdi
    00000108: 	shrq	%rsi
    0000010b: 	movq	%rdi, 0xb8(%rsp)
    00000113: 	leaq	0x6(%rax), %rdi
    00000117: 	addq	$0x7, %rax
    0000011b: 	movq	%rax, 0x118(%rsp)
    00000123: 	leaq	0x20(%r15), %rax
    00000127: 	movq	%rcx, %r15
    0000012a: 	movq	%rax, 0x98(%rsp)
    00000132: 	leaq	0x20(%rcx), %rax
    00000136: 	movq	%rsi, 0x68(%rsp)
    0000013b: 	movq	%rdx, -0x50(%rsp)
    00000140: 	movq	%rdi, 0xe8(%rsp)
    00000148: 	movq	%rax, 0x180(%rsp)
.Ltmp151:
    00000150: 	cmpq	$0x0, -0x60(%rsp)
    00000156: 	je	.Ltmp144 # Offset: 342
    0000015c: 	movq	0x170(%rsp), %rdi
    00000164: 	movq	0x28(%rsp), %rcx
    00000169: 	movq	0x78(%rsp), %rsi
    0000016e: 	movq	-0x68(%rsp), %rax
    00000173: 	leaq	(%rdi,%rcx,8), %r9
    00000177: 	movq	0x180(%rsp), %rdi
    0000017f: 	movq	0x80(%rsp), %rbp
    00000187: 	movq	%rax, %rdx
    0000018a: 	movq	0x98(%rsp), %r10
    00000192: 	leaq	(%rdi,%r11), %rcx
    00000196: 	addq	%r12, %rdi
    00000199: 	addq	%rsi, %rdx
    0000019c: 	addq	%rbp, %rax
    0000019f: 	movq	%rcx, -0x10(%rsp)
    000001a4: 	leaq	(%rbx,%r15), %rcx
    000001a8: 	movq	%rcx, 0xa8(%rsp)
    000001b0: 	movq	0x178(%rsp), %rcx
    000001b8: 	movq	%rdi, 0x8(%rsp)
    000001bd: 	leaq	(%r11,%r15), %rdi
    000001c1: 	addq	%rdi, %rcx
    000001c4: 	movq	%rdi, 0xa0(%rsp)
    000001cc: 	movq	0x90(%rsp), %rdi
    000001d4: 	movq	%rcx, 0xb0(%rsp)
    000001dc: 	movq	0xe0(%rsp), %rcx
    000001e4: 	leaq	0x5(%rdi,%rsi), %r8
    000001e9: 	shlq	$0x3, %r8
    000001ed: 	leaq	(%rcx,%r8), %rsi
    000001f1: 	movq	%r8, -0x78(%rsp)
    000001f6: 	movq	%rsi, 0x20(%rsp)
    000001fb: 	movq	%rdi, %rsi
    000001fe: 	leaq	0x5(%rdi,%rdx), %rdi
    00000203: 	shlq	$0x3, %rdi
    00000207: 	leaq	0x5(%rsi,%rbp), %rsi
    0000020c: 	movq	%rcx, %rbp
    0000020f: 	leaq	(%rcx,%rdi), %r8
    00000213: 	shlq	$0x3, %rsi
    00000217: 	leaq	-0x8(%rbp,%rdi), %rdi
    0000021c: 	movq	%r8, 0x18(%rsp)
    00000221: 	leaq	(%rcx,%rsi), %r8
    00000225: 	movq	0x90(%rsp), %rcx
    0000022d: 	movq	%r8, 0x10(%rsp)
    00000232: 	leaq	0x5(%rcx,%rax), %rcx
    00000237: 	movq	%rdi, 0x50(%rsp)
    0000023c: 	movq	%rbp, %rdi
    0000023f: 	shlq	$0x3, %rcx
    00000243: 	leaq	(%rbp,%rcx), %r8
    00000248: 	leaq	-0x8(%rbp,%rcx), %rcx
    0000024d: 	movq	%r8, 0x30(%rsp)
    00000252: 	movq	-0x78(%rsp), %r8
    00000257: 	movq	%rcx, 0x40(%rsp)
    0000025c: 	leaq	-0x8(%rbp,%r8), %r8
    00000261: 	movq	%r8, 0x58(%rsp)
    00000266: 	leaq	-0x8(%rbp,%rsi), %r8
    0000026b: 	movq	0x78(%rsp), %rsi
    00000270: 	movq	%r8, 0x48(%rsp)
    00000275: 	movq	-0x50(%rsp), %r8
    0000027a: 	movq	%r8, %rcx
    0000027d: 	addq	%rsi, %rcx
    00000280: 	leaq	(%rbp,%rcx,8), %rcx
    00000285: 	movq	%rcx, -0x30(%rsp)
    0000028a: 	leaq	(%r8,%rdx), %rcx
    0000028e: 	leaq	(%rbp,%rcx,8), %rcx
    00000293: 	movq	0x80(%rsp), %rbp
    0000029b: 	movq	%rcx, -0x38(%rsp)
    000002a0: 	movq	%r8, %rcx
    000002a3: 	addq	%rbp, %rcx
    000002a6: 	leaq	(%rdi,%rcx,8), %rcx
    000002aa: 	movq	%rcx, -0x40(%rsp)
    000002af: 	leaq	(%r8,%rax), %rcx
    000002b3: 	leaq	(%rdi,%rcx,8), %rcx
    000002b7: 	movq	%rcx, -0x48(%rsp)
    000002bc: 	movq	-0x58(%rsp), %r8
    000002c1: 	movq	$0x0, -0x78(%rsp)
    000002ca: 	movq	%r8, %rcx
    000002cd: 	addq	%rsi, %rcx
    000002d0: 	leaq	(%rdi,%rcx,8), %rcx
    000002d4: 	movq	%rcx, 0xc0(%rsp)
    000002dc: 	leaq	(%r8,%rdx), %rcx
    000002e0: 	leaq	(%rdi,%rcx,8), %rcx
    000002e4: 	movq	%rcx, 0xc8(%rsp)
    000002ec: 	movq	%r8, %rcx
    000002ef: 	addq	%rbp, %rcx
    000002f2: 	leaq	(%rdi,%rcx,8), %rcx
    000002f6: 	movq	%rcx, 0xd0(%rsp)
    000002fe: 	leaq	(%r8,%rax), %rcx
    00000302: 	movq	0xb8(%rsp), %r8
    0000030a: 	leaq	(%rdi,%rcx,8), %rcx
    0000030e: 	movq	%rcx, 0xd8(%rsp)
    00000316: 	movq	%r8, %rcx
    00000319: 	addq	%rsi, %rcx
    0000031c: 	leaq	(%rdi,%rcx,8), %rcx
    00000320: 	movq	%rcx, 0xf0(%rsp)
    00000328: 	leaq	(%r8,%rdx), %rcx
    0000032c: 	leaq	(%rdi,%rcx,8), %rcx
    00000330: 	movq	%rcx, 0xf8(%rsp)
    00000338: 	movq	%r8, %rcx
    0000033b: 	addq	%rbp, %rcx
    0000033e: 	leaq	(%rdi,%rcx,8), %rcx
    00000342: 	movq	%rcx, 0x100(%rsp)
    0000034a: 	leaq	(%r8,%rax), %rcx
    0000034e: 	movq	0xe8(%rsp), %r8
    00000356: 	leaq	(%rdi,%rcx,8), %rcx
    0000035a: 	movq	%rcx, 0x108(%rsp)
    00000362: 	movq	%r8, %rcx
    00000365: 	addq	%rsi, %rcx
    00000368: 	leaq	(%rdi,%rcx,8), %rcx
    0000036c: 	movq	%rcx, 0x120(%rsp)
    00000374: 	leaq	(%r8,%rdx), %rcx
    00000378: 	leaq	(%rdi,%rcx,8), %rcx
    0000037c: 	movq	%rcx, 0x128(%rsp)
    00000384: 	movq	%r8, %rcx
    00000387: 	addq	%rbp, %rcx
    0000038a: 	leaq	(%rdi,%rcx,8), %rcx
    0000038e: 	movq	%rcx, 0x130(%rsp)
    00000396: 	leaq	(%r8,%rax), %rcx
    0000039a: 	movq	0x118(%rsp), %r8
    000003a2: 	leaq	(%rdi,%rcx,8), %rcx
    000003a6: 	movq	%rcx, 0x138(%rsp)
    000003ae: 	movq	%r8, %rcx
    000003b1: 	addq	%r8, %rdx
    000003b4: 	addq	%r8, %rax
    000003b7: 	addq	%rsi, %rcx
    000003ba: 	leaq	(%rdi,%rax,8), %rax
    000003be: 	leaq	(%rdi,%rcx,8), %rsi
    000003c2: 	leaq	(%rdi,%rdx,8), %rcx
    000003c6: 	movq	%r8, %rdx
    000003c9: 	movq	%rax, 0x140(%rsp)
    000003d1: 	addq	%rbp, %rdx
    000003d4: 	movq	%rcx, 0x150(%rsp)
    000003dc: 	movq	-0x70(%rsp), %rax
    000003e1: 	xorl	%ebp, %ebp
    000003e3: 	leaq	(%rdi,%rdx,8), %rcx
    000003e7: 	leaq	0x20(%r11), %rdi
    000003eb: 	movq	%rsi, 0x158(%rsp)
    000003f3: 	movq	%rdi, -0x8(%rsp)
    000003f8: 	leaq	0x20(%r12), %rdi
    000003fd: 	movq	%rcx, 0x148(%rsp)
    00000405: 	movq	%rdi, (%rsp)
    00000409: 	nopl	(%rax) # Size: 7
.Ltmp150:
    00000410: 	cmpq	-0x8(%rsp), %rax
    00000415: 	movsd	(%r9), %xmm5
    0000041a: 	setae	%cl
    0000041d: 	cmpq	%r10, %r11
    00000420: 	movsd	0x8(%r9), %xmm2
    00000426: 	movsd	0x10(%r9), %xmm4
    0000042c: 	setae	%dl
    0000042f: 	movsd	0x18(%r9), %xmm3
    00000435: 	orl	%edx, %ecx
    00000437: 	cmpq	%r10, %rbx
    0000043a: 	setae	%dl
    0000043d: 	cmpq	-0x10(%rsp), %rax
    00000442: 	setae	%sil
    00000446: 	orl	%esi, %edx
    00000448: 	andl	%ecx, %edx
    0000044a: 	cmpq	(%rsp), %rax
    0000044e: 	setae	%cl
    00000451: 	cmpq	%r10, %r12
    00000454: 	setae	%sil
    00000458: 	orl	%esi, %ecx
    0000045a: 	testb	%cl, %dl
    0000045c: 	je	.Ltmp145 # Offset: 1116
    00000462: 	cmpq	%r10, %r13
    00000465: 	setae	%cl
    00000468: 	cmpq	0x8(%rsp), %rax
    0000046d: 	setae	%dl
    00000470: 	orb	%cl, %dl
    00000472: 	je	.Ltmp145 # Offset: 1138
    00000478: 	movapd	%xmm5, %xmm9
    0000047d: 	movapd	%xmm2, %xmm8
    00000482: 	movapd	%xmm4, %xmm7
    00000486: 	xorl	%edx, %edx
    00000488: 	movapd	%xmm3, %xmm6
    0000048c: 	unpcklpd	%xmm9, %xmm9
    00000491: 	unpcklpd	%xmm8, %xmm8
    00000496: 	xorl	%ecx, %ecx
    00000498: 	unpcklpd	%xmm7, %xmm7
    0000049c: 	unpcklpd	%xmm6, %xmm6
.Ltmp146:
    000004a0: 	movupd	0x10(%rbx,%rdx), %xmm1
    000004a6: 	movupd	(%rbx,%rdx), %xmm10
    000004ac: 	addq	$0x1, %rcx
    000004b0: 	movupd	0x10(%r11,%rdx), %xmm0
    000004b7: 	movupd	(%rax,%rdx), %xmm11
    000004bd: 	mulpd	%xmm8, %xmm1
    000004c2: 	mulpd	%xmm9, %xmm0
    000004c7: 	mulpd	%xmm8, %xmm10
    000004cc: 	addpd	%xmm1, %xmm0
    000004d0: 	movupd	0x10(%r12,%rdx), %xmm1
    000004d7: 	mulpd	%xmm7, %xmm1
    000004db: 	addpd	%xmm1, %xmm0
    000004df: 	movupd	0x10(%r13,%rdx), %xmm1
    000004e6: 	mulpd	%xmm6, %xmm1
    000004ea: 	addpd	%xmm1, %xmm0
    000004ee: 	movupd	0x10(%rax,%rdx), %xmm1
    000004f4: 	addpd	%xmm1, %xmm0
    000004f8: 	movupd	(%r11,%rdx), %xmm1
    000004fe: 	mulpd	%xmm9, %xmm1
    00000503: 	addpd	%xmm10, %xmm1
    00000508: 	movupd	(%r12,%rdx), %xmm10
    0000050e: 	mulpd	%xmm7, %xmm10
    00000513: 	addpd	%xmm10, %xmm1
    00000518: 	movupd	(%r13,%rdx), %xmm10
    0000051f: 	movups	%xmm0, 0x10(%rax,%rdx)
    00000524: 	mulpd	%xmm6, %xmm10
    00000529: 	addpd	%xmm10, %xmm1
    0000052e: 	addpd	%xmm11, %xmm1
    00000533: 	movups	%xmm1, (%rax,%rdx)
    00000537: 	addq	$0x20, %rdx
    0000053b: 	cmpq	%r14, %rcx
    0000053e: 	jb	.Ltmp146 # Offset: 1342
.Ltmp163:
    00000544: 	movq	-0x58(%rsp), %rdi
    00000549: 	cmpq	%rdi, -0x68(%rsp)
    0000054e: 	jbe	.Ltmp147 # Offset: 1358
    00000554: 	leaq	(%rdi,%rbp), %rdx
    00000558: 	movq	-0x70(%rsp), %rdi
    0000055d: 	leaq	(%rdi,%rdx,8), %rdx
    00000561: 	cmpq	%rdx, 0x18(%rsp)
    00000566: 	setne	%cl
    00000569: 	cmpq	%rdx, 0x20(%rsp)
    0000056e: 	setne	%sil
    00000572: 	andl	%ecx, %esi
    00000574: 	cmpq	$0x5, 0x38(%rsp)
    0000057a: 	setne	%cl
    0000057d: 	andl	%esi, %ecx
    0000057f: 	cmpq	%rdx, 0x10(%rsp)
    00000584: 	setne	%sil
    00000588: 	testb	%sil, %cl
    0000058b: 	je	.Ltmp148 # Offset: 1419
    00000591: 	cmpq	%rdx, 0x30(%rsp)
    00000596: 	je	.Ltmp148 # Offset: 1430
    0000059c: 	movq	0x50(%rsp), %rsi
    000005a1: 	movq	0x58(%rsp), %rdi
    000005a6: 	movapd	%xmm5, %xmm8
    000005ab: 	movapd	%xmm2, %xmm9
    000005b0: 	unpcklpd	%xmm8, %xmm8
    000005b5: 	unpcklpd	%xmm9, %xmm9
    000005ba: 	movq	0x48(%rsp), %rcx
    000005bf: 	movapd	%xmm4, %xmm7
    000005c3: 	movupd	(%rsi), %xmm0
    000005c7: 	movupd	(%rdi), %xmm1
    000005cb: 	unpcklpd	%xmm7, %xmm7
    000005cf: 	movapd	%xmm3, %xmm6
    000005d3: 	movq	0x40(%rsp), %r8
    000005d8: 	unpcklpd	%xmm6, %xmm6
    000005dc: 	cmpq	$0x1, 0x68(%rsp)
    000005e2: 	mulpd	%xmm8, %xmm1
    000005e7: 	mulpd	%xmm9, %xmm0
    000005ec: 	addpd	%xmm1, %xmm0
    000005f0: 	movupd	(%rcx), %xmm1
    000005f4: 	mulpd	%xmm7, %xmm1
    000005f8: 	addpd	%xmm1, %xmm0
    000005fc: 	movupd	(%r8), %xmm1
    00000601: 	movaps	%xmm1, -0x28(%rsp)
    00000606: 	mulpd	%xmm6, %xmm1
    0000060a: 	addpd	%xmm1, %xmm0
    0000060e: 	movupd	(%rdx), %xmm1
    00000612: 	addpd	%xmm1, %xmm0
    00000616: 	movups	%xmm0, (%rdx)
    00000619: 	jbe	.Ltmp149 # Offset: 1561
    0000061b: 	movupd	0x10(%rsi), %xmm0
    00000620: 	movupd	0x10(%rdi), %xmm1
    00000625: 	mulpd	%xmm9, %xmm0
    0000062a: 	mulpd	%xmm8, %xmm1
    0000062f: 	addpd	%xmm1, %xmm0
    00000633: 	movupd	0x10(%rcx), %xmm1
    00000638: 	mulpd	%xmm7, %xmm1
    0000063c: 	movupd	0x10(%r8), %xmm7
    00000642: 	movaps	%xmm7, -0x28(%rsp)
    00000647: 	addpd	%xmm1, %xmm0
    0000064b: 	movapd	%xmm7, %xmm1
    0000064f: 	mulpd	%xmm6, %xmm1
    00000653: 	movupd	0x10(%rdx), %xmm6
    00000658: 	addpd	%xmm1, %xmm0
    0000065c: 	addpd	%xmm6, %xmm0
    00000660: 	movups	%xmm0, 0x10(%rdx)
.Ltmp149:
    00000664: 	movq	0x70(%rsp), %rsi
    00000669: 	cmpq	%rsi, 0x60(%rsp)
    0000066e: 	je	.Ltmp147 # Offset: 1646
    00000670: 	movq	-0x50(%rsp), %rdi
    00000675: 	movq	-0x70(%rsp), %rsi
    0000067a: 	leaq	(%rdi,%rbp), %rdx
    0000067e: 	movq	-0x38(%rsp), %rdi
    00000683: 	leaq	(%rsi,%rdx,8), %rdx
    00000687: 	movq	-0x30(%rsp), %rsi
    0000068c: 	mulsd	(%rdi), %xmm2
    00000690: 	movq	-0x40(%rsp), %rdi
    00000695: 	mulsd	(%rsi), %xmm5
    00000699: 	movq	-0x48(%rsp), %rsi
    0000069e: 	mulsd	(%rdi), %xmm4
    000006a2: 	mulsd	(%rsi), %xmm3
    000006a6: 	addsd	%xmm5, %xmm2
    000006aa: 	addsd	%xmm4, %xmm2
    000006ae: 	addsd	%xmm2, %xmm3
    000006b2: 	addsd	(%rdx), %xmm3
    000006b6: 	movsd	%xmm3, (%rdx)
.Ltmp147:
    000006ba: 	addq	$0x1, -0x78(%rsp)
    000006c0: 	addq	%r15, %r9
    000006c3: 	addq	%r15, %rax
    000006c6: 	addq	%r15, %r10
    000006c9: 	movq	-0x78(%rsp), %rdi
    000006ce: 	addq	-0x68(%rsp), %rbp
    000006d3: 	cmpq	-0x60(%rsp), %rdi
    000006d8: 	jne	.Ltmp150 # Offset: 1752
.Ltmp144:
    000006de: 	movq	0x168(%rsp), %rax
    000006e6: 	movq	0x160(%rsp), %rsi
    000006ee: 	addq	$0x4, 0x28(%rsp)
    000006f4: 	movq	0x28(%rsp), %rdi
    000006f9: 	addq	%rsi, 0x78(%rsp)
    000006fe: 	addq	%rax, %r11
    00000701: 	addq	%rax, %rbx
    00000704: 	addq	%rax, %r12
    00000707: 	addq	%rsi, 0x80(%rsp)
    0000070f: 	addq	%rax, %r13
    00000712: 	cmpq	-0x18(%rsp), %rdi
    00000717: 	jb	.Ltmp151 # Offset: 1815
    0000071d: 	movq	-0x70(%rsp), %r15
    00000722: 	movq	-0x68(%rsp), %rbp
    00000727: 	cmpq	0x28(%rsp), %rbp
    0000072c: 	jbe	.Ltmp152 # Offset: 1836
.Ltmp165:
    00000732: 	cmpq	$0x0, -0x60(%rsp)
    00000738: 	je	.Ltmp152 # Offset: 1848
    0000073e: 	movq	0x28(%rsp), %rax
    00000743: 	movq	0x170(%rsp), %rbx
    0000074b: 	movq	-0x18(%rsp), %rsi
    00000750: 	movq	%rax, %rdi
    00000753: 	leaq	(%rbx,%rax,8), %rbx
    00000757: 	imulq	%rbp, %rdi
    0000075b: 	movq	%rdi, 0x8(%rsp)
    00000760: 	movq	%rax, %rdi
    00000763: 	leaq	(,%rbp,8), %rax
    0000076b: 	movq	%rax, -0x78(%rsp)
    00000770: 	imulq	%rdi, %rax
    00000774: 	movq	0xe0(%rsp), %rdi
    0000077c: 	leaq	(%rdi,%rax), %r14
    00000780: 	leaq	-0x1(%rsi), %rax
    00000784: 	movq	%rax, %rdx
    00000787: 	andq	$-0x4, %rax
    0000078b: 	shrq	$0x2, %rdx
    0000078f: 	addq	$0x4, %rax
    00000793: 	leaq	(,%rdx,4), %rcx
    0000079b: 	leaq	0x1(%rdx), %rdi
    0000079f: 	xorl	%edx, %edx
    000007a1: 	testq	%rsi, %rsi
    000007a4: 	cmovneq	%rax, %rdx
    000007a8: 	movq	%rbp, %rax
    000007ab: 	movq	%rcx, 0x18(%rsp)
    000007b0: 	subq	%rdx, %rax
    000007b3: 	movq	%rdx, %r12
    000007b6: 	cmpq	$0x1, %rax
    000007ba: 	movq	%rax, %rsi
    000007bd: 	movq	%rax, -0x58(%rsp)
    000007c2: 	setne	-0x68(%rsp)
    000007c7: 	andq	$-0x2, %rax
    000007cb: 	shrq	%rsi
    000007ce: 	movq	%rax, -0x50(%rsp)
    000007d3: 	leaq	(%rdx,%rax), %r13
    000007d7: 	leaq	0x1(%rdx), %rax
    000007db: 	movq	%rax, -0x38(%rsp)
    000007e0: 	leaq	0x2(%rdx), %rax
    000007e4: 	movq	%rax, -0x28(%rsp)
    000007e9: 	leaq	0x3(%rdx), %rax
    000007ed: 	movq	%rax, -0x8(%rsp)
    000007f2: 	leaq	0x20(%r15), %rax
    000007f6: 	movq	%rsi, -0x48(%rsp)
    000007fb: 	movq	%rax, 0x20(%rsp)
.Ltmp161:
    00000800: 	movq	0xe0(%rsp), %rsi
    00000808: 	movq	0x8(%rsp), %rcx
    0000080d: 	movq	%r15, %r9
    00000810: 	xorl	%r10d, %r10d
    00000813: 	leaq	(%rsi,%rcx,8), %rax
    00000817: 	movq	%rax, -0x30(%rsp)
    0000081c: 	leaq	0x1(%r12,%rcx), %rax
    00000821: 	shlq	$0x3, %rax
    00000825: 	leaq	(%rsi,%rax), %rdx
    00000829: 	leaq	-0x8(%rsi,%rax), %r11
    0000082e: 	leaq	(%rcx,%r13), %rax
    00000832: 	movq	%rdx, -0x70(%rsp)
    00000837: 	leaq	(%rsi,%rax,8), %r8
    0000083b: 	movq	-0x38(%rsp), %rax
    00000840: 	addq	%rcx, %rax
    00000843: 	leaq	(%rsi,%rax,8), %rax
    00000847: 	movq	%rax, -0x10(%rsp)
    0000084c: 	movq	-0x28(%rsp), %rax
    00000851: 	addq	%rcx, %rax
    00000854: 	leaq	(%rsi,%rax,8), %rax
    00000858: 	movq	%rax, (%rsp)
    0000085c: 	movq	-0x8(%rsp), %rax
    00000861: 	addq	%rcx, %rax
    00000864: 	leaq	(%rsi,%rax,8), %rax
    00000868: 	xorl	%esi, %esi
    0000086a: 	movq	%rax, 0x10(%rsp)
    0000086f: 	leaq	0x20(%r14), %rax
    00000873: 	movq	%rax, -0x40(%rsp)
    00000878: 	nopl	(%rax,%rax) # Size: 8
.Ltmp160:
    00000880: 	cmpq	$0x0, -0x18(%rsp)
    00000886: 	movsd	(%rbx,%rsi,8), %xmm2
    0000088b: 	je	.Ltmp153 # Offset: 2187
    0000088d: 	leaq	0x20(%r9), %rax
    00000891: 	cmpq	%r14, %rax
    00000894: 	jbe	.Ltmp154 # Offset: 2196
    00000896: 	cmpq	%r9, -0x40(%rsp)
    0000089b: 	ja	.Ltmp155 # Offset: 2203
.Ltmp154:
    000008a1: 	movapd	%xmm2, %xmm3
    000008a5: 	movq	%r14, %rdx
    000008a8: 	movq	%r9, %rax
    000008ab: 	xorl	%ecx, %ecx
    000008ad: 	unpcklpd	%xmm3, %xmm3
    000008b1: 	nopl	(%rax) # Size: 7
.Ltmp156:
    000008b8: 	movupd	(%rdx), %xmm1
    000008bc: 	movupd	(%rax), %xmm7
    000008c0: 	addq	$0x1, %rcx
    000008c4: 	addq	$0x20, %rax
    000008c8: 	movupd	0x10(%rdx), %xmm0
    000008cd: 	movupd	-0x10(%rax), %xmm6
    000008d2: 	addq	$0x20, %rdx
    000008d6: 	mulpd	%xmm3, %xmm1
    000008da: 	mulpd	%xmm3, %xmm0
    000008de: 	addpd	%xmm7, %xmm1
    000008e2: 	addpd	%xmm6, %xmm0
    000008e6: 	movups	%xmm1, -0x20(%rax)
    000008ea: 	movups	%xmm0, -0x10(%rax)
    000008ee: 	cmpq	%rcx, %rdi
    000008f1: 	ja	.Ltmp156 # Offset: 2289
.Ltmp153:
    000008f3: 	cmpq	%r12, %rbp
    000008f6: 	jbe	.Ltmp157 # Offset: 2294
    000008f8: 	leaq	(%r12,%rsi), %rax
    000008fc: 	leaq	(%r15,%rax,8), %rax
    00000900: 	cmpq	%rax, -0x70(%rsp)
    00000905: 	je	.Ltmp158 # Offset: 2309
    0000090b: 	cmpb	$0x0, -0x68(%rsp)
    00000910: 	je	.Ltmp158 # Offset: 2320
    00000916: 	movupd	(%r11), %xmm0
    0000091b: 	movapd	%xmm2, %xmm1
    0000091f: 	movupd	(%rax), %xmm5
    00000923: 	unpcklpd	%xmm1, %xmm1
    00000927: 	cmpq	$0x1, -0x48(%rsp)
    0000092d: 	mulpd	%xmm1, %xmm0
    00000931: 	addpd	%xmm5, %xmm0
    00000935: 	movups	%xmm0, (%rax)
    00000938: 	jbe	.Ltmp159 # Offset: 2360
    0000093a: 	movupd	0x10(%r11), %xmm0
    00000940: 	movupd	0x10(%rax), %xmm4
    00000945: 	mulpd	%xmm1, %xmm0
    00000949: 	addpd	%xmm4, %xmm0
    0000094d: 	movups	%xmm0, 0x10(%rax)
.Ltmp159:
    00000951: 	movq	-0x50(%rsp), %rcx
    00000956: 	cmpq	%rcx, -0x58(%rsp)
    0000095b: 	je	.Ltmp157 # Offset: 2395
    0000095d: 	leaq	(%rsi,%r13), %rax
    00000961: 	mulsd	(%r8), %xmm2
    00000966: 	leaq	(%r15,%rax,8), %rax
    0000096a: 	addsd	(%rax), %xmm2
    0000096e: 	movsd	%xmm2, (%rax)
.Ltmp157:
    00000972: 	addq	$0x1, %r10
    00000976: 	addq	%rbp, %rsi
    00000979: 	addq	-0x78(%rsp), %r9
    0000097e: 	cmpq	%r10, -0x60(%rsp)
    00000983: 	jne	.Ltmp160 # Offset: 2435
    00000989: 	addq	$0x1, 0x28(%rsp)
    0000098f: 	movq	0x28(%rsp), %rax
    00000994: 	addq	$0x8, %rbx
    00000998: 	addq	%rbp, 0x8(%rsp)
    0000099d: 	addq	-0x78(%rsp), %r14
    000009a2: 	cmpq	%rax, %rbp
    000009a5: 	ja	.Ltmp161 # Offset: 2469
.Ltmp152:
    000009ab: 	addq	$0x190, %rsp
    000009b2: 	popq	%rbx
    000009b3: 	popq	%rbp
    000009b4: 	popq	%r12
    000009b6: 	popq	%r13
    000009b8: 	popq	%r14
    000009ba: 	popq	%r15
    000009bc: 	retq # Offset: 2492
    000009bd: 	nopl	(%rax) # Size: 3
.Ltmp145:
    000009c0: 	movq	0x110(%rsp), %rdi
    000009c8: 	movq	%r9, 0x88(%rsp)
    000009d0: 	movq	%r11, %rcx
    000009d3: 	movq	0xb0(%rsp), %r8
    000009db: 	movq	0xa0(%rsp), %rsi
    000009e3: 	leaq	(%rdi,%rbp), %rdx
    000009e7: 	movq	0x98(%rsp), %rdi
    000009ef: 	leaq	(%rdi,%rdx,8), %rdi
    000009f3: 	movq	%rax, %rdx
    000009f6: 	movq	%rdi, -0x28(%rsp)
    000009fb: 	movq	0xa8(%rsp), %rdi
    00000a03: 	movq	-0x28(%rsp), %r9
    00000a08: 	nopl	(%rax,%rax) # Size: 8
.Ltmp162:
    00000a10: 	movsd	(%rcx), %xmm0
    00000a14: 	movsd	(%rsi), %xmm1
    00000a18: 	addq	$0x20, %rdx
    00000a1c: 	addq	$0x20, %rcx
    00000a20: 	addq	$0x20, %rsi
    00000a24: 	addq	$0x20, %rdi
    00000a28: 	addq	$0x20, %r8
    00000a2c: 	mulsd	%xmm2, %xmm1
    00000a30: 	mulsd	%xmm5, %xmm0
    00000a34: 	addsd	%xmm1, %xmm0
    00000a38: 	movsd	-0x20(%rdi), %xmm1
    00000a3d: 	mulsd	%xmm4, %xmm1
    00000a41: 	addsd	%xmm1, %xmm0
    00000a45: 	movsd	-0x20(%r8), %xmm1
    00000a4b: 	mulsd	%xmm3, %xmm1
    00000a4f: 	addsd	%xmm1, %xmm0
    00000a53: 	addsd	-0x20(%rdx), %xmm0
    00000a58: 	movsd	%xmm0, -0x20(%rdx)
    00000a5d: 	movsd	-0x18(%rcx), %xmm0
    00000a62: 	movsd	-0x18(%rsi), %xmm1
    00000a67: 	mulsd	%xmm5, %xmm0
    00000a6b: 	mulsd	%xmm2, %xmm1
    00000a6f: 	addsd	%xmm1, %xmm0
    00000a73: 	movsd	-0x18(%rdi), %xmm1
    00000a78: 	mulsd	%xmm4, %xmm1
    00000a7c: 	addsd	%xmm1, %xmm0
    00000a80: 	movsd	-0x18(%r8), %xmm1
    00000a86: 	mulsd	%xmm3, %xmm1
    00000a8a: 	addsd	%xmm1, %xmm0
    00000a8e: 	addsd	-0x18(%rdx), %xmm0
    00000a93: 	movsd	%xmm0, -0x18(%rdx)
    00000a98: 	movsd	-0x10(%rcx), %xmm0
    00000a9d: 	movsd	-0x10(%rsi), %xmm1
    00000aa2: 	mulsd	%xmm5, %xmm0
    00000aa6: 	mulsd	%xmm2, %xmm1
    00000aaa: 	addsd	%xmm1, %xmm0
    00000aae: 	movsd	-0x10(%rdi), %xmm1
    00000ab3: 	mulsd	%xmm4, %xmm1
    00000ab7: 	addsd	%xmm1, %xmm0
    00000abb: 	movsd	-0x10(%r8), %xmm1
    00000ac1: 	mulsd	%xmm3, %xmm1
    00000ac5: 	addsd	%xmm1, %xmm0
    00000ac9: 	addsd	-0x10(%rdx), %xmm0
    00000ace: 	movsd	%xmm0, -0x10(%rdx)
    00000ad3: 	movsd	-0x8(%rcx), %xmm0
    00000ad8: 	movsd	-0x8(%rsi), %xmm1
    00000add: 	mulsd	%xmm5, %xmm0
    00000ae1: 	mulsd	%xmm2, %xmm1
    00000ae5: 	addsd	%xmm1, %xmm0
    00000ae9: 	movsd	-0x8(%rdi), %xmm1
    00000aee: 	mulsd	%xmm4, %xmm1
    00000af2: 	addsd	%xmm1, %xmm0
    00000af6: 	movsd	-0x8(%r8), %xmm1
    00000afc: 	mulsd	%xmm3, %xmm1
    00000b00: 	addsd	%xmm1, %xmm0
    00000b04: 	addsd	-0x8(%rdx), %xmm0
    00000b09: 	movsd	%xmm0, -0x8(%rdx)
    00000b0e: 	cmpq	%r9, %rdx
    00000b11: 	jne	.Ltmp162 # Offset: 2833
    00000b17: 	movq	0x88(%rsp), %r9
    00000b1f: 	jmp	.Ltmp163 # Offset: 2847
    00000b24: 	nopl	(%rax) # Size: 4
.Ltmp158:
    00000b28: 	movsd	(%r11), %xmm0
    00000b2d: 	mulsd	%xmm2, %xmm0
    00000b31: 	addsd	(%rax), %xmm0
    00000b35: 	movsd	%xmm0, (%rax)
    00000b39: 	movq	-0x38(%rsp), %rax
    00000b3e: 	cmpq	%rax, %rbp
    00000b41: 	jbe	.Ltmp157 # Offset: 2881
    00000b47: 	movq	-0x10(%rsp), %rcx
    00000b4c: 	addq	%rsi, %rax
    00000b4f: 	leaq	(%r15,%rax,8), %rax
    00000b53: 	movsd	(%rcx), %xmm0
    00000b57: 	mulsd	%xmm2, %xmm0
    00000b5b: 	addsd	(%rax), %xmm0
    00000b5f: 	movsd	%xmm0, (%rax)
    00000b63: 	movq	-0x28(%rsp), %rax
    00000b68: 	cmpq	%rax, %rbp
    00000b6b: 	jbe	.Ltmp157 # Offset: 2923
    00000b71: 	movq	(%rsp), %rcx
    00000b75: 	addq	%rsi, %rax
    00000b78: 	leaq	(%r15,%rax,8), %rax
    00000b7c: 	movsd	(%rcx), %xmm0
    00000b80: 	mulsd	%xmm2, %xmm0
    00000b84: 	addsd	(%rax), %xmm0
    00000b88: 	movsd	%xmm0, (%rax)
    00000b8c: 	movq	-0x8(%rsp), %rax
    00000b91: 	cmpq	%rax, %rbp
    00000b94: 	jbe	.Ltmp157 # Offset: 2964
    00000b9a: 	movq	0x10(%rsp), %rcx
    00000b9f: 	addq	%rsi, %rax
    00000ba2: 	leaq	(%r15,%rax,8), %rax
    00000ba6: 	mulsd	(%rcx), %xmm2
    00000baa: 	addsd	(%rax), %xmm2
    00000bae: 	movsd	%xmm2, (%rax)
    00000bb2: 	jmp	.Ltmp157 # Offset: 2994
    00000bb7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp155:
    00000bc0: 	movq	0x18(%rsp), %rax
    00000bc5: 	movq	0x20(%rsp), %rcx
    00000bca: 	movq	-0x30(%rsp), %rdx
    00000bcf: 	addq	%rsi, %rax
    00000bd2: 	leaq	(%rcx,%rax,8), %rcx
    00000bd6: 	movq	%r9, %rax
    00000bd9: 	nopl	(%rax) # Size: 7
.Ltmp164:
    00000be0: 	movsd	(%rdx), %xmm0
    00000be4: 	addq	$0x20, %rax
    00000be8: 	addq	$0x20, %rdx
    00000bec: 	mulsd	%xmm2, %xmm0
    00000bf0: 	addsd	-0x20(%rax), %xmm0
    00000bf5: 	movsd	%xmm0, -0x20(%rax)
    00000bfa: 	movsd	-0x18(%rdx), %xmm0
    00000bff: 	mulsd	%xmm2, %xmm0
    00000c03: 	addsd	-0x18(%rax), %xmm0
    00000c08: 	movsd	%xmm0, -0x18(%rax)
    00000c0d: 	movsd	-0x10(%rdx), %xmm0
    00000c12: 	mulsd	%xmm2, %xmm0
    00000c16: 	addsd	-0x10(%rax), %xmm0
    00000c1b: 	movsd	%xmm0, -0x10(%rax)
    00000c20: 	movsd	-0x8(%rdx), %xmm0
    00000c25: 	mulsd	%xmm2, %xmm0
    00000c29: 	addsd	-0x8(%rax), %xmm0
    00000c2e: 	movsd	%xmm0, -0x8(%rax)
    00000c33: 	cmpq	%rcx, %rax
    00000c36: 	jne	.Ltmp164 # Offset: 3126
    00000c38: 	jmp	.Ltmp153 # Offset: 3128
    00000c3d: 	nopl	(%rax) # Size: 3
.Ltmp148:
    00000c40: 	movq	0xc0(%rsp), %rdi
    00000c48: 	movq	0xb8(%rsp), %rsi
    00000c50: 	movsd	(%rdi), %xmm0
    00000c54: 	movq	0xc8(%rsp), %rdi
    00000c5c: 	movsd	(%rdi), %xmm1
    00000c60: 	mulsd	%xmm5, %xmm0
    00000c64: 	movq	0xd0(%rsp), %rdi
    00000c6c: 	mulsd	%xmm2, %xmm1
    00000c70: 	addsd	%xmm1, %xmm0
    00000c74: 	movsd	(%rdi), %xmm1
    00000c78: 	movq	0xd8(%rsp), %rdi
    00000c80: 	mulsd	%xmm4, %xmm1
    00000c84: 	addsd	%xmm1, %xmm0
    00000c88: 	movsd	(%rdi), %xmm1
    00000c8c: 	movq	-0x68(%rsp), %rdi
    00000c91: 	mulsd	%xmm3, %xmm1
    00000c95: 	addsd	%xmm1, %xmm0
    00000c99: 	addsd	(%rdx), %xmm0
    00000c9d: 	movsd	%xmm0, (%rdx)
    00000ca1: 	cmpq	%rsi, %rdi
    00000ca4: 	jbe	.Ltmp147 # Offset: 3236
    00000caa: 	movq	0xf0(%rsp), %rcx
    00000cb2: 	leaq	(%rsi,%rbp), %rdx
    00000cb6: 	movq	-0x70(%rsp), %rsi
    00000cbb: 	movsd	(%rcx), %xmm0
    00000cbf: 	movq	0xf8(%rsp), %rcx
    00000cc7: 	leaq	(%rsi,%rdx,8), %rdx
    00000ccb: 	movsd	(%rcx), %xmm1
    00000ccf: 	mulsd	%xmm5, %xmm0
    00000cd3: 	movq	0x100(%rsp), %rcx
    00000cdb: 	mulsd	%xmm2, %xmm1
    00000cdf: 	addsd	%xmm1, %xmm0
    00000ce3: 	movsd	(%rcx), %xmm1
    00000ce7: 	movq	0x108(%rsp), %rcx
    00000cef: 	mulsd	%xmm4, %xmm1
    00000cf3: 	addsd	%xmm1, %xmm0
    00000cf7: 	movsd	(%rcx), %xmm1
    00000cfb: 	movq	0xe8(%rsp), %rcx
    00000d03: 	mulsd	%xmm3, %xmm1
    00000d07: 	addsd	%xmm1, %xmm0
    00000d0b: 	addsd	(%rdx), %xmm0
    00000d0f: 	movsd	%xmm0, (%rdx)
    00000d13: 	cmpq	%rcx, %rdi
    00000d16: 	jbe	.Ltmp147 # Offset: 3350
    00000d1c: 	leaq	(%rcx,%rbp), %rdx
    00000d20: 	movq	0x120(%rsp), %rcx
    00000d28: 	leaq	(%rsi,%rdx,8), %rdx
    00000d2c: 	movsd	(%rcx), %xmm0
    00000d30: 	movq	0x128(%rsp), %rcx
    00000d38: 	movsd	(%rcx), %xmm1
    00000d3c: 	mulsd	%xmm5, %xmm0
    00000d40: 	movq	0x130(%rsp), %rcx
    00000d48: 	mulsd	%xmm2, %xmm1
    00000d4c: 	addsd	%xmm1, %xmm0
    00000d50: 	movsd	(%rcx), %xmm1
    00000d54: 	movq	0x138(%rsp), %rcx
    00000d5c: 	mulsd	%xmm4, %xmm1
    00000d60: 	addsd	%xmm1, %xmm0
    00000d64: 	movsd	(%rcx), %xmm1
    00000d68: 	movq	0x118(%rsp), %rcx
    00000d70: 	mulsd	%xmm3, %xmm1
    00000d74: 	addsd	%xmm1, %xmm0
    00000d78: 	addsd	(%rdx), %xmm0
    00000d7c: 	movsd	%xmm0, (%rdx)
    00000d80: 	cmpq	%rcx, %rdi
    00000d83: 	jbe	.Ltmp147 # Offset: 3459
    00000d89: 	movq	0x150(%rsp), %rdi
    00000d91: 	leaq	(%rcx,%rbp), %rdx
    00000d95: 	leaq	(%rsi,%rdx,8), %rdx
    00000d99: 	mulsd	(%rdi), %xmm2
    00000d9d: 	movq	0x158(%rsp), %rdi
    00000da5: 	mulsd	(%rdi), %xmm5
    00000da9: 	movq	0x148(%rsp), %rdi
    00000db1: 	mulsd	(%rdi), %xmm4
    00000db5: 	movq	0x140(%rsp), %rdi
    00000dbd: 	mulsd	(%rdi), %xmm3
    00000dc1: 	addsd	%xmm5, %xmm2
    00000dc5: 	addsd	%xmm2, %xmm4
    00000dc9: 	addsd	%xmm4, %xmm3
    00000dcd: 	addsd	(%rdx), %xmm3
    00000dd1: 	movsd	%xmm3, (%rdx)
    00000dd5: 	jmp	.Ltmp147 # Offset: 3541
.Ltmp143:
    00000dda: 	movq	$0x0, 0x28(%rsp)
    00000de3: 	jmp	.Ltmp165 # Offset: 3555
DWARF CFI Instructions:
    <empty>
End of Function "_ZN19matmul_KJI_unrolledIdEclEPKdS2_Pdmm.isra.0/1(*2)"

Binary Function "_ZN28matmul_JKI_blocked_unrolled3IfEclEPKfS2_Pfmm.isra.0/1(*2)" after disassembly {
  All names   : _ZN28matmul_JKI_blocked_unrolled3IfEclEPKfS2_Pfmm.isra.0/1
                _ZN28matmul_JKI_blocked_unrolled3IfEclEPKfS2_Pfmm.isra.0/matrix_multiply.cpp/1
  Number      : 17
  State       : disassembled
  Address     : 0x7810
  Size        : 0x1232
  MaxSize     : 0x1240
  Offset      : 0x7810
  Section     : .text
  Orc Section : .local.text._ZN28matmul_JKI_blocked_unrolled3IfEclEPKfS2_Pfmm.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB016:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	subq	$0x160, %rsp
    00000011: 	movq	%rdi, 0x100(%rsp)
    00000019: 	movq	%rcx, 0xc8(%rsp)
    00000021: 	movq	%r8, 0x70(%rsp)
    00000026: 	testq	%r8, %r8
    00000029: 	je	.Ltmp166 # Offset: 41
    0000002f: 	testq	%rcx, %rcx
    00000032: 	je	.Ltmp166 # Offset: 50
    00000038: 	leaq	(,%r8,4), %rbx
    00000040: 	movq	%rsi, %r14
    00000043: 	movq	%rdx, %r11
    00000046: 	movq	%rsi, 0x118(%rsp)
    0000004e: 	movq	%rbx, 0x120(%rsp)
    00000056: 	leaq	(%r8,%r8), %rbx
    0000005a: 	movdqa	DATAat0x2d9b0(%rip), %xmm14
    00000063: 	imulq	$0x1f4, %r8, %rax
    0000006a: 	movq	%rbx, 0xb8(%rsp)
    00000072: 	movq	%r8, %rbx
    00000075: 	shlq	$0x4, %rbx
    00000079: 	movq	%r8, 0xa8(%rsp)
    00000081: 	movq	%rbx, 0x40(%rsp)
    00000086: 	movq	$0x0, 0x108(%rsp)
    00000092: 	movq	%rax, 0x150(%rsp)
.Ltmp190:
    0000009a: 	movq	0x108(%rsp), %rbx
    000000a2: 	movq	%r14, %r12
    000000a5: 	movq	%r11, %r13
    000000a8: 	movq	0x70(%rsp), %rsi
    000000ad: 	movq	%r11, 0x128(%rsp)
    000000b5: 	movq	%rbx, 0x98(%rsp)
    000000bd: 	subq	$-0x80, %rbx
    000000c1: 	movq	%rsi, %rax
    000000c4: 	cmpq	%rsi, %rbx
    000000c7: 	movq	%rbx, 0x108(%rsp)
    000000cf: 	movq	$0x4, -0x40(%rsp)
    000000d8: 	cmovbeq	%rbx, %rax
    000000dc: 	movq	$0x0, 0x110(%rsp)
    000000e8: 	leaq	-0x3(%rax), %rdx
    000000ec: 	movq	%rax, 0xb0(%rsp)
    000000f4: 	shlq	$0x2, %rax
    000000f8: 	movq	%rdx, 0x38(%rsp)
    000000fd: 	movq	0x100(%rsp), %rdx
    00000105: 	addq	%rax, %rdx
    00000108: 	movq	%rdx, 0x138(%rsp)
    00000110: 	leaq	-0x200(,%rbx,4), %rdx
    00000118: 	movq	0x118(%rsp), %rbx
    00000120: 	subq	%rax, %rdx
    00000123: 	movq	0xa8(%rsp), %rax
    0000012b: 	addq	0xb8(%rsp), %rax
    00000133: 	movq	%rax, 0xc0(%rsp)
    0000013b: 	movq	0x120(%rsp), %rax
    00000143: 	movq	%rdx, 0xd0(%rsp)
    0000014b: 	addq	%rax, %rbx
    0000014e: 	movq	%rbx, %rdx
    00000151: 	movq	%rbx, 0x140(%rsp)
    00000159: 	movq	%rax, %rbx
    0000015c: 	addq	%rdx, %rax
    0000015f: 	addq	%rax, %rbx
    00000162: 	movq	%rax, 0x148(%rsp)
    0000016a: 	leaq	(%rsi,%rsi,2), %rax
    0000016e: 	movq	%rbx, 0x130(%rsp)
    00000176: 	movq	%rax, 0xf8(%rsp)
.Ltmp189:
    0000017e: 	movq	0x110(%rsp), %rbx
    00000186: 	movq	0x70(%rsp), %rdx
    0000018b: 	movq	%r12, %r15
    0000018e: 	movq	$0x0, -0x48(%rsp)
    00000197: 	movq	0x128(%rsp), %rsi
    0000019f: 	movq	0x118(%rsp), %rcx
    000001a7: 	movq	$0x0, 0x80(%rsp)
    000001b3: 	movq	%rbx, %rax
    000001b6: 	movq	%rbx, -0x50(%rsp)
    000001bb: 	addq	$0x384, %rbx
    000001c2: 	cmpq	%rbx, %rdx
    000001c5: 	movq	%rbx, 0x110(%rsp)
    000001cd: 	cmovbeq	%rdx, %rbx
    000001d1: 	leaq	0x40(%rsi), %rdx
    000001d5: 	movq	%rsi, 0x10(%rsp)
    000001da: 	movq	%rdx, 0x28(%rsp)
    000001df: 	movq	%rax, %rdx
    000001e2: 	leaq	(,%rax,4), %rax
    000001ea: 	addq	%rax, %rcx
    000001ed: 	leaq	-0x3(%rbx), %r14
    000001f1: 	movq	%rbx, -0x58(%rsp)
    000001f6: 	movq	%rcx, 0xd8(%rsp)
    000001fe: 	movq	0x140(%rsp), %rcx
    00000206: 	addq	%rax, %rcx
    00000209: 	movq	%rcx, 0xe0(%rsp)
    00000211: 	movq	0x148(%rsp), %rcx
    00000219: 	addq	%rax, %rcx
    0000021c: 	addq	0x130(%rsp), %rax
    00000224: 	movq	%rax, 0xf0(%rsp)
    0000022c: 	movq	%rbx, %rax
    0000022f: 	subq	%rdx, %rax
    00000232: 	movq	%rcx, 0xe8(%rsp)
    0000023a: 	subq	$0x4, %rax
    0000023e: 	movq	%rax, 0x30(%rsp)
    00000243: 	shrq	$0x2, %rax
    00000247: 	addq	$0x1, %rax
    0000024b: 	movq	%rax, %rbp
    0000024e: 	movq	%rax, 0x48(%rsp)
    00000253: 	andq	$-0x4, %rax
    00000257: 	movq	%rax, 0x50(%rsp)
    0000025c: 	leaq	(%rdx,%rax,4), %rax
    00000260: 	shrq	$0x2, %rbp
    00000264: 	leaq	0x4(%rax), %rbx
    00000268: 	movq	%rax, 0x58(%rsp)
    0000026d: 	movq	%rbx, 0x88(%rsp)
    00000275: 	leaq	0x8(%rax), %rbx
    00000279: 	addq	$0xc, %rax
    0000027d: 	movq	%rax, 0xa0(%rsp)
    00000285: 	movq	0x138(%rsp), %rax
    0000028d: 	movq	%rbp, 0x60(%rsp)
    00000292: 	movq	0x120(%rsp), %rbp
    0000029a: 	movq	%rax, 0x78(%rsp)
    0000029f: 	movq	%rbx, 0x90(%rsp)
    000002a7: 	movq	%r13, %rbx
    000002aa: 	movq	%r14, %r13
    000002ad: 	nopl	(%rax) # Size: 3
.Ltmp188:
    000002b0: 	movq	0x38(%rsp), %rdx
    000002b5: 	cmpq	%rdx, 0x98(%rsp)
    000002bd: 	jae	.Ltmp167 # Offset: 701
    000002c3: 	movq	0xc0(%rsp), %rdx
    000002cb: 	movq	%rbx, -0x60(%rsp)
    000002d0: 	movq	%rbp, %r14
    000002d3: 	movq	%r13, %rbp
    000002d6: 	movq	0xb8(%rsp), %rax
    000002de: 	movq	0x98(%rsp), %rsi
    000002e6: 	movq	%rdx, %r9
    000002e9: 	subq	0xf8(%rsp), %r9
    000002f1: 	movq	0xd0(%rsp), %r10
    000002f9: 	leaq	(%r9,%rax), %r11
    000002fd: 	movq	0x58(%rsp), %rax
    00000302: 	addq	-0x48(%rsp), %rax
    00000307: 	movq	%rsi, -0x68(%rsp)
    0000030c: 	leaq	(%rbx,%rax,4), %rax
    00000310: 	addq	0x78(%rsp), %r10
    00000315: 	movq	%r9, %rbx
    00000318: 	movq	%r11, %r9
    0000031b: 	movq	%rax, 0x68(%rsp)
    00000320: 	movq	0xf0(%rsp), %rax
    00000328: 	movq	%r10, %r12
    0000032b: 	movq	%rdx, %r10
    0000032e: 	movq	%rax, -0x18(%rsp)
    00000333: 	movq	0xe8(%rsp), %rax
    0000033b: 	movq	%rax, -0x28(%rsp)
    00000340: 	movq	0xe0(%rsp), %rax
    00000348: 	movq	%rax, -0x70(%rsp)
    0000034d: 	movq	0xd8(%rsp), %rax
    00000355: 	movq	%rax, -0x30(%rsp)
    0000035a: 	movq	0xa8(%rsp), %rax
    00000362: 	movq	%rax, %r11
    00000365: 	nopl	(%rax) # Size: 3
.Ltmp177:
    00000368: 	movss	(%r12), %xmm2
    0000036e: 	movss	0x4(%r12), %xmm5
    00000375: 	movss	0x8(%r12), %xmm7
    0000037c: 	movss	0xc(%r12), %xmm6
    00000383: 	cmpq	-0x50(%rsp), %rbp
    00000388: 	jbe	.Ltmp168 # Offset: 904
    0000038e: 	cmpq	$-0x4, %rbp
    00000392: 	movq	-0x30(%rsp), %r13
    00000397: 	movq	0x10(%rsp), %r8
    0000039c: 	setbe	%dl
    0000039f: 	cmpq	$0x2, -0x40(%rsp)
    000003a5: 	movq	0x28(%rsp), %rdi
    000003aa: 	seta	%al
    000003ad: 	movq	-0x70(%rsp), %rsi
    000003b2: 	andl	%edx, %eax
    000003b4: 	cmpq	$0xb, 0x30(%rsp)
    000003ba: 	seta	%dl
    000003bd: 	andl	%edx, %eax
    000003bf: 	leaq	0x40(%r13), %rdx
    000003c3: 	cmpq	%rdx, %r8
    000003c6: 	setae	%dl
    000003c9: 	cmpq	%r13, %rdi
    000003cc: 	setbe	%cl
    000003cf: 	orl	%ecx, %edx
    000003d1: 	andl	%eax, %edx
    000003d3: 	leaq	0x40(%rsi), %rax
    000003d7: 	cmpq	%rax, %r8
    000003da: 	setae	%al
    000003dd: 	cmpq	%rsi, %rdi
    000003e0: 	movq	-0x28(%rsp), %rsi
    000003e5: 	setbe	%cl
    000003e8: 	orl	%ecx, %eax
    000003ea: 	andl	%edx, %eax
    000003ec: 	leaq	0x40(%rsi), %rdx
    000003f0: 	cmpq	%rdx, %r8
    000003f3: 	setae	%dl
    000003f6: 	cmpq	%rsi, %rdi
    000003f9: 	setbe	%cl
    000003fc: 	orl	%ecx, %edx
    000003fe: 	testb	%dl, %al
    00000400: 	je	.Ltmp169 # Offset: 1024
    00000406: 	movq	-0x18(%rsp), %rcx
    0000040b: 	leaq	0x40(%rcx), %rax
    0000040f: 	cmpq	%rax, %r8
    00000412: 	setae	%dl
    00000415: 	cmpq	%rcx, %rdi
    00000418: 	setbe	%al
    0000041b: 	orb	%dl, %al
    0000041d: 	je	.Ltmp169 # Offset: 1053
    00000423: 	movq	-0x50(%rsp), %xmm13
    0000042a: 	movq	%rcx, %rdi
    0000042d: 	movq	%r13, %rdx
    00000430: 	movq	%r8, %rax
    00000433: 	movq	-0x70(%rsp), %rcx
    00000438: 	movaps	%xmm2, %xmm11
    0000043c: 	movaps	%xmm5, %xmm10
    00000440: 	xorl	%r8d, %r8d
    00000443: 	movq	0x60(%rsp), %r13
    00000448: 	movaps	%xmm7, %xmm9
    0000044c: 	movaps	%xmm6, %xmm8
    00000450: 	movhps	-0x40(%rsp), %xmm13
    00000456: 	shufps	$0x0, %xmm11, %xmm11
    0000045b: 	shufps	$0x0, %xmm10, %xmm10
    00000460: 	shufps	$0x0, %xmm9, %xmm9
    00000465: 	shufps	$0x0, %xmm8, %xmm8
    0000046a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp170:
    00000470: 	movups	0x10(%rdx), %xmm1
    00000474: 	movups	0x10(%rcx), %xmm0
    00000478: 	addq	$0x1, %r8
    0000047c: 	addq	$0x40, %rax
    00000480: 	movups	0x20(%rcx), %xmm3
    00000484: 	movups	-0x30(%rax), %xmm4
    00000488: 	addq	$0x40, %rdx
    0000048c: 	addq	$0x40, %rcx
    00000490: 	mulps	%xmm10, %xmm0
    00000494: 	movups	-0x40(%rcx), %xmm15
    00000499: 	movdqa	%xmm13, %xmm12
    0000049e: 	addq	$0x40, %rsi
    000004a2: 	mulps	%xmm11, %xmm1
    000004a6: 	paddq	%xmm14, %xmm13
    000004ab: 	addq	$0x40, %rdi
    000004af: 	paddq	DATAat0x2d9c0(%rip), %xmm12
    000004b8: 	mulps	%xmm10, %xmm3
    000004bc: 	mulps	%xmm10, %xmm15
    000004c0: 	addps	%xmm0, %xmm1
    000004c3: 	movups	-0x30(%rsi), %xmm0
    000004c7: 	mulps	%xmm9, %xmm0
    000004cb: 	addps	%xmm0, %xmm1
    000004ce: 	movups	-0x30(%rdi), %xmm0
    000004d2: 	mulps	%xmm8, %xmm0
    000004d6: 	addps	%xmm0, %xmm1
    000004d9: 	movups	-0x20(%rdx), %xmm0
    000004dd: 	mulps	%xmm11, %xmm0
    000004e1: 	addps	%xmm4, %xmm1
    000004e4: 	movups	-0x20(%rax), %xmm4
    000004e8: 	addps	%xmm3, %xmm0
    000004eb: 	movups	-0x20(%rsi), %xmm3
    000004ef: 	mulps	%xmm9, %xmm3
    000004f3: 	addps	%xmm3, %xmm0
    000004f6: 	movups	-0x20(%rdi), %xmm3
    000004fa: 	mulps	%xmm8, %xmm3
    000004fe: 	addps	%xmm3, %xmm0
    00000501: 	movups	-0x10(%rdx), %xmm3
    00000505: 	mulps	%xmm11, %xmm3
    00000509: 	addps	%xmm4, %xmm0
    0000050c: 	movups	-0x10(%rcx), %xmm4
    00000510: 	mulps	%xmm10, %xmm4
    00000514: 	addps	%xmm3, %xmm4
    00000517: 	movups	-0x10(%rsi), %xmm3
    0000051b: 	mulps	%xmm9, %xmm3
    0000051f: 	addps	%xmm4, %xmm3
    00000522: 	movups	-0x10(%rdi), %xmm4
    00000526: 	mulps	%xmm8, %xmm4
    0000052a: 	addps	%xmm4, %xmm3
    0000052d: 	movups	-0x10(%rax), %xmm4
    00000531: 	addps	%xmm4, %xmm3
    00000534: 	movups	-0x40(%rdx), %xmm4
    00000538: 	mulps	%xmm11, %xmm4
    0000053c: 	addps	%xmm4, %xmm15
    00000540: 	movups	-0x40(%rsi), %xmm4
    00000544: 	mulps	%xmm9, %xmm4
    00000548: 	addps	%xmm15, %xmm4
    0000054c: 	movups	-0x40(%rdi), %xmm15
    00000551: 	movups	%xmm1, -0x30(%rax)
    00000555: 	movups	%xmm0, -0x20(%rax)
    00000559: 	mulps	%xmm8, %xmm15
    0000055d: 	movups	%xmm3, -0x10(%rax)
    00000561: 	addps	%xmm15, %xmm4
    00000565: 	movups	-0x40(%rax), %xmm15
    0000056a: 	addps	%xmm15, %xmm4
    0000056e: 	movups	%xmm4, -0x40(%rax)
    00000572: 	cmpq	%r13, %r8
    00000575: 	jb	.Ltmp170 # Offset: 1397
    0000057b: 	movhlps	%xmm12, %xmm4
    0000057f: 	movq	0x50(%rsp), %rdi
    00000584: 	movq	%xmm4, %rax
    00000589: 	cmpq	%rdi, 0x48(%rsp)
    0000058e: 	je	.Ltmp171 # Offset: 1422
    00000594: 	movq	0x58(%rsp), %r13
    00000599: 	movq	0x68(%rsp), %rdx
    0000059e: 	leaq	(%rbx,%r13), %rax
    000005a2: 	leaq	(%r15,%rax,4), %r8
    000005a6: 	leaq	(%r11,%r13), %rax
    000005aa: 	leaq	(%r15,%rax,4), %rdi
    000005ae: 	leaq	(%r13,%r9), %rax
    000005b3: 	leaq	(%r15,%rax,4), %rsi
    000005b7: 	leaq	(%r13,%r10), %rax
    000005bc: 	leaq	(%r15,%rax,4), %rcx
    000005c0: 	movq	%r13, %rax
    000005c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp172:
    000005c8: 	movss	(%rdi), %xmm1
    000005cc: 	addq	$0x4, %rax
    000005d0: 	addq	$0x10, %rdx
    000005d4: 	addq	$0x10, %r8
    000005d8: 	movss	-0x10(%r8), %xmm0
    000005de: 	addq	$0x10, %rdi
    000005e2: 	addq	$0x10, %rsi
    000005e6: 	addq	$0x10, %rcx
    000005ea: 	mulss	%xmm5, %xmm1
    000005ee: 	mulss	%xmm2, %xmm0
    000005f2: 	addss	%xmm1, %xmm0
    000005f6: 	movss	-0x10(%rsi), %xmm1
    000005fb: 	mulss	%xmm7, %xmm1
    000005ff: 	addss	%xmm1, %xmm0
    00000603: 	movss	-0x10(%rcx), %xmm1
    00000608: 	mulss	%xmm6, %xmm1
    0000060c: 	addss	%xmm1, %xmm0
    00000610: 	addss	-0x10(%rdx), %xmm0
    00000615: 	movss	%xmm0, -0x10(%rdx)
    0000061a: 	movss	-0xc(%r8), %xmm0
    00000620: 	movss	-0xc(%rdi), %xmm1
    00000625: 	mulss	%xmm2, %xmm0
    00000629: 	mulss	%xmm5, %xmm1
    0000062d: 	addss	%xmm1, %xmm0
    00000631: 	movss	-0xc(%rsi), %xmm1
    00000636: 	mulss	%xmm7, %xmm1
    0000063a: 	addss	%xmm1, %xmm0
    0000063e: 	movss	-0xc(%rcx), %xmm1
    00000643: 	mulss	%xmm6, %xmm1
    00000647: 	addss	%xmm1, %xmm0
    0000064b: 	addss	-0xc(%rdx), %xmm0
    00000650: 	movss	%xmm0, -0xc(%rdx)
    00000655: 	movss	-0x8(%r8), %xmm0
    0000065b: 	movss	-0x8(%rdi), %xmm1
    00000660: 	mulss	%xmm2, %xmm0
    00000664: 	mulss	%xmm5, %xmm1
    00000668: 	addss	%xmm1, %xmm0
    0000066c: 	movss	-0x8(%rsi), %xmm1
    00000671: 	mulss	%xmm7, %xmm1
    00000675: 	addss	%xmm1, %xmm0
    00000679: 	movss	-0x8(%rcx), %xmm1
    0000067e: 	mulss	%xmm6, %xmm1
    00000682: 	addss	%xmm1, %xmm0
    00000686: 	addss	-0x8(%rdx), %xmm0
    0000068b: 	movss	%xmm0, -0x8(%rdx)
    00000690: 	movss	-0x4(%r8), %xmm0
    00000696: 	movss	-0x4(%rdi), %xmm1
    0000069b: 	mulss	%xmm2, %xmm0
    0000069f: 	mulss	%xmm5, %xmm1
    000006a3: 	addss	%xmm1, %xmm0
    000006a7: 	movss	-0x4(%rsi), %xmm1
    000006ac: 	mulss	%xmm7, %xmm1
    000006b0: 	addss	%xmm1, %xmm0
    000006b4: 	movss	-0x4(%rcx), %xmm1
    000006b9: 	mulss	%xmm6, %xmm1
    000006bd: 	addss	%xmm1, %xmm0
    000006c1: 	addss	-0x4(%rdx), %xmm0
    000006c6: 	movss	%xmm0, -0x4(%rdx)
    000006cb: 	cmpq	%rax, %rbp
    000006ce: 	ja	.Ltmp172 # Offset: 1742
.Ltmp171:
    000006d4: 	cmpq	%rax, -0x58(%rsp)
    000006d9: 	jbe	.Ltmp173 # Offset: 1753
    000006df: 	movq	-0x48(%rsp), %rdi
    000006e4: 	movq	-0x60(%rsp), %rsi
    000006e9: 	leaq	(%r11,%rax), %r8
    000006ed: 	leaq	0x4(,%r8,4), %r13
    000006f5: 	movq	-0x58(%rsp), %rdx
    000006fa: 	addq	%rax, %rdi
    000006fd: 	movq	%r13, 0x18(%rsp)
    00000702: 	addq	%r15, %r13
    00000705: 	leaq	(%rsi,%rdi,4), %rcx
    00000709: 	leaq	(%rax,%r9), %rsi
    0000070d: 	movq	%rdi, 0x8(%rsp)
    00000712: 	subq	%rax, %rdx
    00000715: 	movq	%rsi, -0x8(%rsp)
    0000071a: 	leaq	0x4(,%rsi,4), %rsi
    00000722: 	leaq	(%rbx,%rax), %rdi
    00000726: 	movq	%rsi, -0x38(%rsp)
    0000072b: 	leaq	(%rax,%r10), %rsi
    0000072f: 	movq	%rsi, -0x10(%rsp)
    00000734: 	leaq	0x4(,%rsi,4), %rsi
    0000073c: 	movq	%rsi, -0x20(%rsp)
    00000741: 	movq	%rcx, %rsi
    00000744: 	subq	%r13, %rsi
    00000747: 	movq	%rdi, (%rsp)
    0000074b: 	leaq	0x4(,%rdi,4), %rdi
    00000753: 	cmpq	$0x8, %rsi
    00000757: 	movq	%rdi, %rsi
    0000075a: 	movq	%rdi, 0x20(%rsp)
    0000075f: 	movq	%rcx, %rdi
    00000762: 	seta	%r13b
    00000766: 	addq	%r15, %rsi
    00000769: 	subq	%rsi, %rdi
    0000076c: 	cmpq	$0x8, %rdi
    00000770: 	movq	%rcx, %rdi
    00000773: 	seta	%sil
    00000777: 	andl	%r13d, %esi
    0000077a: 	cmpq	$0x1, %rdx
    0000077e: 	setne	%r13b
    00000782: 	andl	%r13d, %esi
    00000785: 	movq	-0x38(%rsp), %r13
    0000078a: 	addq	%r15, %r13
    0000078d: 	subq	%r13, %rdi
    00000790: 	cmpq	$0x8, %rdi
    00000794: 	seta	%r13b
    00000798: 	testb	%r13b, %sil
    0000079b: 	je	.Ltmp174 # Offset: 1947
    000007a1: 	movq	-0x20(%rsp), %rsi
    000007a6: 	movq	%rcx, %rdi
    000007a9: 	leaq	(%r15,%rsi), %r13
    000007ad: 	subq	%r13, %rdi
    000007b0: 	cmpq	$0x8, %rdi
    000007b4: 	jbe	.Ltmp174 # Offset: 1972
    000007ba: 	leaq	-0x1(%rdx), %rsi
    000007be: 	cmpq	$0x2, %rsi
    000007c2: 	jbe	.Ltmp175 # Offset: 1986
    000007c8: 	movq	0x20(%rsp), %rsi
    000007cd: 	movq	0x18(%rsp), %r13
    000007d2: 	movaps	%xmm2, %xmm1
    000007d5: 	movaps	%xmm5, %xmm3
    000007d8: 	shufps	$0x0, %xmm1, %xmm1
    000007dc: 	shufps	$0x0, %xmm3, %xmm3
    000007e0: 	movups	(%rcx), %xmm4
    000007e3: 	movups	-0x4(%r15,%rsi), %xmm0
    000007e9: 	movq	-0x20(%rsp), %rsi
    000007ee: 	mulps	%xmm1, %xmm0
    000007f1: 	movups	-0x4(%r15,%r13), %xmm1
    000007f7: 	movq	-0x38(%rsp), %r13
    000007fc: 	mulps	%xmm3, %xmm1
    000007ff: 	movaps	%xmm7, %xmm3
    00000802: 	shufps	$0x0, %xmm3, %xmm3
    00000806: 	addps	%xmm1, %xmm0
    00000809: 	movups	-0x4(%r15,%r13), %xmm1
    0000080f: 	mulps	%xmm3, %xmm1
    00000812: 	movaps	%xmm6, %xmm3
    00000815: 	shufps	$0x0, %xmm3, %xmm3
    00000819: 	addps	%xmm1, %xmm0
    0000081c: 	movups	-0x4(%r15,%rsi), %xmm1
    00000822: 	mulps	%xmm3, %xmm1
    00000825: 	addps	%xmm1, %xmm0
    00000828: 	addps	%xmm4, %xmm0
    0000082b: 	movups	%xmm0, (%rcx)
    0000082e: 	movq	%rdx, %rcx
    00000831: 	andq	$-0x4, %rcx
    00000835: 	addq	%rcx, %rax
    00000838: 	cmpq	%rcx, %rdx
    0000083b: 	je	.Ltmp173 # Offset: 2107
    00000841: 	subq	%rcx, %rdx
    00000844: 	cmpq	$0x1, %rdx
    00000848: 	je	.Ltmp176 # Offset: 2120
.Ltmp194:
    0000084e: 	movq	(%rsp), %r13
    00000852: 	addq	%rcx, %r8
    00000855: 	movaps	%xmm2, %xmm1
    00000858: 	movq	0x8(%rsp), %rsi
    0000085d: 	shufps	$0xe0, %xmm1, %xmm1
    00000861: 	movaps	%xmm5, %xmm3
    00000864: 	movq	-0x60(%rsp), %rdi
    00000869: 	addq	%rcx, %r13
    0000086c: 	shufps	$0xe0, %xmm3, %xmm3
    00000870: 	addq	%rcx, %rsi
    00000873: 	movq	(%r15,%r13,4), %xmm0
    00000879: 	leaq	(%rdi,%rsi,4), %rsi
    0000087d: 	movq	-0x8(%rsp), %rdi
    00000882: 	mulps	%xmm1, %xmm0
    00000885: 	movq	(%r15,%r8,4), %xmm1
    0000088b: 	addq	%rcx, %rdi
    0000088e: 	addq	-0x10(%rsp), %rcx
    00000893: 	mulps	%xmm3, %xmm1
    00000896: 	movaps	%xmm7, %xmm3
    00000899: 	shufps	$0xe0, %xmm3, %xmm3
    0000089d: 	addps	%xmm1, %xmm0
    000008a0: 	movq	(%r15,%rdi,4), %xmm1
    000008a6: 	mulps	%xmm3, %xmm1
    000008a9: 	movaps	%xmm6, %xmm3
    000008ac: 	shufps	$0xe0, %xmm3, %xmm3
    000008b0: 	addps	%xmm1, %xmm0
    000008b3: 	movq	(%r15,%rcx,4), %xmm1
    000008b9: 	movq	%rdx, %rcx
    000008bc: 	andq	$-0x2, %rcx
    000008c0: 	mulps	%xmm3, %xmm1
    000008c3: 	addq	%rcx, %rax
    000008c6: 	addps	%xmm1, %xmm0
    000008c9: 	movq	(%rsi), %xmm1
    000008cd: 	addps	%xmm1, %xmm0
    000008d0: 	movlps	%xmm0, (%rsi)
    000008d3: 	cmpq	%rdx, %rcx
    000008d6: 	je	.Ltmp173 # Offset: 2262
.Ltmp176:
    000008d8: 	leaq	(%rbx,%rax), %rcx
    000008dc: 	movq	-0x48(%rsp), %rdi
    000008e1: 	mulss	(%r15,%rcx,4), %xmm2
    000008e7: 	leaq	(%r11,%rax), %rcx
    000008eb: 	mulss	(%r15,%rcx,4), %xmm5
    000008f1: 	leaq	(%rax,%r9), %rcx
    000008f5: 	leaq	(%rax,%rdi), %rdx
    000008f9: 	movq	-0x60(%rsp), %rdi
    000008fe: 	mulss	(%r15,%rcx,4), %xmm7
    00000904: 	leaq	(%rdi,%rdx,4), %rdx
    00000908: 	addss	%xmm5, %xmm2
    0000090c: 	addss	%xmm2, %xmm7
.Ltmp192:
    00000910: 	addq	%r10, %rax
    00000913: 	mulss	(%r15,%rax,4), %xmm6
    00000919: 	addss	%xmm7, %xmm6
    0000091d: 	addss	(%rdx), %xmm6
    00000921: 	movss	%xmm6, (%rdx)
.Ltmp173:
    00000925: 	movq	0x40(%rsp), %rax
    0000092a: 	addq	$0x10, %r12
    0000092e: 	addq	$0x4, -0x68(%rsp)
    00000934: 	addq	%r14, %rbx
    00000937: 	addq	%rax, -0x30(%rsp)
    0000093c: 	movq	-0x68(%rsp), %rdi
    00000941: 	addq	%r14, %r11
    00000944: 	addq	%r14, %r9
    00000947: 	addq	%rax, -0x70(%rsp)
    0000094c: 	addq	%r14, %r10
    0000094f: 	addq	%rax, -0x28(%rsp)
    00000954: 	addq	%rax, -0x18(%rsp)
    00000959: 	cmpq	0x38(%rsp), %rdi
    0000095e: 	jb	.Ltmp177 # Offset: 2398
    00000964: 	movq	-0x60(%rsp), %rbx
    00000969: 	movq	%rbp, %r13
    0000096c: 	movq	%rdi, %rdx
    0000096f: 	movq	%r14, %rbp
.Ltmp196:
    00000972: 	cmpq	%rdx, 0xb0(%rsp)
    0000097a: 	jbe	.Ltmp178 # Offset: 2426
    00000980: 	movq	-0x48(%rsp), %rsi
    00000985: 	movq	0x100(%rsp), %rcx
    0000098d: 	movq	%rdx, %rax
    00000990: 	movq	%rbp, -0x68(%rsp)
    00000995: 	imulq	0x70(%rsp), %rdx
    0000099b: 	addq	%rsi, %rax
    0000099e: 	movq	%rsi, %rbp
    000009a1: 	leaq	(%rcx,%rax,4), %r11
    000009a5: 	movq	-0x50(%rsp), %rax
    000009aa: 	addq	%rdx, %rax
    000009ad: 	leaq	(%r15,%rax,4), %r14
    000009b1: 	movq	0x58(%rsp), %rax
    000009b6: 	addq	%rsi, %rax
    000009b9: 	shlq	$0x2, %rax
    000009bd: 	leaq	(%rbx,%rax), %rdi
    000009c1: 	leaq	0x4(%rbx,%rax), %rcx
    000009c6: 	movq	%rdi, -0x60(%rsp)
    000009cb: 	leaq	0x8(%rbx,%rax), %rdi
    000009d0: 	leaq	0xc(%rbx,%rax), %rax
    000009d5: 	movq	%rax, -0x28(%rsp)
    000009da: 	movq	0x88(%rsp), %rax
    000009e2: 	movq	%rcx, -0x38(%rsp)
    000009e7: 	addq	%rsi, %rax
    000009ea: 	movq	%rdi, -0x30(%rsp)
    000009ef: 	shlq	$0x2, %rax
    000009f3: 	leaq	(%rbx,%rax), %rcx
    000009f7: 	leaq	0x4(%rbx,%rax), %rdi
    000009fc: 	movq	%rcx, -0x20(%rsp)
    00000a01: 	leaq	0x8(%rbx,%rax), %rcx
    00000a06: 	leaq	0xc(%rbx,%rax), %rax
    00000a0b: 	movq	%rax, -0x10(%rsp)
    00000a10: 	movq	0x90(%rsp), %rax
    00000a18: 	movq	%rdi, -0x18(%rsp)
    00000a1d: 	addq	%rsi, %rax
    00000a20: 	movq	%rcx, -0x8(%rsp)
    00000a25: 	shlq	$0x2, %rax
    00000a29: 	leaq	(%rbx,%rax), %rdi
    00000a2d: 	leaq	0x4(%rbx,%rax), %rcx
    00000a32: 	movq	%rdi, 0x20(%rsp)
    00000a37: 	leaq	0x8(%rbx,%rax), %rdi
    00000a3c: 	leaq	0xc(%rbx,%rax), %rax
    00000a41: 	movq	%rax, (%rsp)
    00000a45: 	movq	0x60(%rsp), %rax
    00000a4a: 	movq	%rcx, 0x18(%rsp)
    00000a4f: 	movq	%rdi, 0x8(%rsp)
    00000a54: 	movq	%rax, -0x70(%rsp)
.Ltmp187:
    00000a59: 	movq	-0x50(%rsp), %rsi
    00000a5e: 	movss	(%r11), %xmm4
    00000a63: 	cmpq	%rsi, %r13
    00000a66: 	jbe	.Ltmp179 # Offset: 2662
    00000a6c: 	cmpq	$0x2, -0x40(%rsp)
    00000a72: 	seta	%cl
    00000a75: 	cmpq	$-0x4, %r13
    00000a79: 	setbe	%al
    00000a7c: 	andl	%ecx, %eax
    00000a7e: 	cmpq	$0xb, 0x30(%rsp)
    00000a84: 	seta	%cl
    00000a87: 	testb	%cl, %al
    00000a89: 	je	.Ltmp180 # Offset: 2697
    00000a8f: 	movq	0x10(%rsp), %rdi
    00000a94: 	leaq	0x40(%r14), %rax
    00000a98: 	cmpq	%rax, %rdi
    00000a9b: 	setae	%cl
    00000a9e: 	cmpq	0x28(%rsp), %r14
    00000aa3: 	setae	%al
    00000aa6: 	orb	%cl, %al
    00000aa8: 	je	.Ltmp180 # Offset: 2728
    00000aae: 	movq	%rsi, %xmm7
    00000ab3: 	movq	-0x70(%rsp), %r12
    00000ab8: 	movaps	%xmm4, %xmm5
    00000abb: 	movq	%r14, %rcx
    00000abe: 	movhps	-0x40(%rsp), %xmm7
    00000ac3: 	movq	%rdi, %rax
    00000ac6: 	xorl	%esi, %esi
    00000ac8: 	shufps	$0x0, %xmm5, %xmm5
    00000acc: 	nopl	(%rax) # Size: 4
.Ltmp181:
    00000ad0: 	movups	0x10(%rcx), %xmm2
    00000ad4: 	movups	0x20(%rcx), %xmm1
    00000ad8: 	addq	$0x1, %rsi
    00000adc: 	movdqa	%xmm7, %xmm6
    00000ae0: 	movups	0x30(%rcx), %xmm0
    00000ae4: 	movups	0x10(%rax), %xmm3
    00000ae8: 	addq	$0x40, %rcx
    00000aec: 	addq	$0x40, %rax
    00000af0: 	mulps	%xmm5, %xmm2
    00000af3: 	movups	-0x40(%rax), %xmm13
    00000af8: 	paddq	DATAat0x2d9c0(%rip), %xmm6
    00000b00: 	paddq	%xmm14, %xmm7
    00000b05: 	mulps	%xmm5, %xmm1
    00000b08: 	mulps	%xmm5, %xmm0
    00000b0b: 	addps	%xmm3, %xmm2
    00000b0e: 	movups	-0x20(%rax), %xmm3
    00000b12: 	addps	%xmm3, %xmm1
    00000b15: 	movups	-0x10(%rax), %xmm3
    00000b19: 	addps	%xmm3, %xmm0
    00000b1c: 	movups	-0x40(%rcx), %xmm3
    00000b20: 	movups	%xmm2, -0x30(%rax)
    00000b24: 	movups	%xmm1, -0x20(%rax)
    00000b28: 	mulps	%xmm5, %xmm3
    00000b2b: 	movups	%xmm0, -0x10(%rax)
    00000b2f: 	addps	%xmm13, %xmm3
    00000b33: 	movups	%xmm3, -0x40(%rax)
    00000b37: 	cmpq	%r12, %rsi
    00000b3a: 	jb	.Ltmp181 # Offset: 2874
    00000b3c: 	movhlps	%xmm6, %xmm7
    00000b3f: 	movq	%r12, -0x70(%rsp)
    00000b44: 	movq	0x50(%rsp), %rsi
    00000b49: 	movq	%xmm7, %rax
    00000b4e: 	cmpq	%rsi, 0x48(%rsp)
    00000b53: 	je	.Ltmp182 # Offset: 2899
    00000b59: 	movq	0x58(%rsp), %rax
    00000b5e: 	movq	-0x60(%rsp), %rdi
    00000b63: 	movq	-0x38(%rsp), %rsi
    00000b68: 	addq	%rdx, %rax
    00000b6b: 	movss	(%r15,%rax,4), %xmm0
    00000b71: 	mulss	%xmm4, %xmm0
    00000b75: 	addss	(%rdi), %xmm0
    00000b79: 	movss	%xmm0, (%rdi)
    00000b7d: 	movss	0x4(%r15,%rax,4), %xmm0
    00000b84: 	movq	-0x30(%rsp), %rdi
    00000b89: 	mulss	%xmm4, %xmm0
    00000b8d: 	addss	(%rsi), %xmm0
    00000b91: 	movss	%xmm0, (%rsi)
    00000b95: 	movss	0x8(%r15,%rax,4), %xmm0
    00000b9c: 	mulss	%xmm4, %xmm0
    00000ba0: 	addss	(%rdi), %xmm0
    00000ba4: 	movss	%xmm0, (%rdi)
    00000ba8: 	movss	0xc(%r15,%rax,4), %xmm0
    00000baf: 	movq	-0x28(%rsp), %rax
    00000bb4: 	mulss	%xmm4, %xmm0
    00000bb8: 	addss	(%rax), %xmm0
    00000bbc: 	movss	%xmm0, (%rax)
    00000bc0: 	movq	0x88(%rsp), %rax
    00000bc8: 	cmpq	%r13, %rax
    00000bcb: 	jae	.Ltmp182 # Offset: 3019
    00000bd1: 	addq	%rdx, %rax
    00000bd4: 	movq	-0x20(%rsp), %rcx
    00000bd9: 	movq	-0x18(%rsp), %rdi
    00000bde: 	movss	(%r15,%rax,4), %xmm0
    00000be4: 	movq	-0x8(%rsp), %rsi
    00000be9: 	mulss	%xmm4, %xmm0
    00000bed: 	addss	(%rcx), %xmm0
    00000bf1: 	movss	%xmm0, (%rcx)
    00000bf5: 	movss	0x4(%r15,%rax,4), %xmm0
    00000bfc: 	mulss	%xmm4, %xmm0
    00000c00: 	addss	(%rdi), %xmm0
    00000c04: 	movss	%xmm0, (%rdi)
    00000c08: 	movss	0x8(%r15,%rax,4), %xmm0
    00000c0f: 	mulss	%xmm4, %xmm0
    00000c13: 	addss	(%rsi), %xmm0
    00000c17: 	movss	%xmm0, (%rsi)
    00000c1b: 	movss	0xc(%r15,%rax,4), %xmm0
    00000c22: 	movq	-0x10(%rsp), %rax
    00000c27: 	mulss	%xmm4, %xmm0
    00000c2b: 	addss	(%rax), %xmm0
    00000c2f: 	movss	%xmm0, (%rax)
    00000c33: 	movq	0x90(%rsp), %rax
    00000c3b: 	cmpq	%r13, %rax
    00000c3e: 	jae	.Ltmp182 # Offset: 3134
    00000c40: 	addq	%rdx, %rax
    00000c43: 	movq	0x20(%rsp), %rcx
    00000c48: 	movq	0x18(%rsp), %rsi
    00000c4d: 	movss	(%r15,%rax,4), %xmm0
    00000c53: 	mulss	%xmm4, %xmm0
    00000c57: 	addss	(%rcx), %xmm0
    00000c5b: 	movss	%xmm0, (%rcx)
    00000c5f: 	movss	0x4(%r15,%rax,4), %xmm0
    00000c66: 	movq	0x8(%rsp), %rcx
    00000c6b: 	mulss	%xmm4, %xmm0
    00000c6f: 	addss	(%rsi), %xmm0
    00000c73: 	movss	%xmm0, (%rsi)
    00000c77: 	movss	0x8(%r15,%rax,4), %xmm0
    00000c7e: 	mulss	%xmm4, %xmm0
    00000c82: 	addss	(%rcx), %xmm0
    00000c86: 	movss	%xmm0, (%rcx)
    00000c8a: 	movss	0xc(%r15,%rax,4), %xmm0
    00000c91: 	movq	(%rsp), %rax
    00000c95: 	mulss	%xmm4, %xmm0
    00000c99: 	addss	(%rax), %xmm0
    00000c9d: 	movss	%xmm0, (%rax)
    00000ca1: 	movq	0xa0(%rsp), %rax
.Ltmp182:
    00000ca9: 	cmpq	%rax, -0x58(%rsp)
    00000cae: 	jbe	.Ltmp183 # Offset: 3246
    00000cb4: 	leaq	(%rax,%rbp), %rdi
    00000cb8: 	leaq	(%rax,%rdx), %rsi
    00000cbc: 	movq	-0x58(%rsp), %rcx
    00000cc1: 	leaq	(%rbx,%rdi,4), %r8
    00000cc5: 	leaq	0x4(,%rsi,4), %r9
    00000ccd: 	leaq	(%r15,%r9), %r10
    00000cd1: 	movq	%r8, %r12
    00000cd4: 	subq	%rax, %rcx
    00000cd7: 	subq	%r10, %r12
    00000cda: 	cmpq	$0x8, %r12
    00000cde: 	jbe	.Ltmp184 # Offset: 3294
    00000ce4: 	cmpq	$0x1, %rcx
    00000ce8: 	je	.Ltmp184 # Offset: 3304
    00000cee: 	leaq	-0x1(%rcx), %r10
    00000cf2: 	cmpq	$0x2, %r10
    00000cf6: 	jbe	.Ltmp185 # Offset: 3318
    00000cfc: 	movups	-0x4(%r15,%r9), %xmm0
    00000d02: 	movaps	%xmm4, %xmm1
    00000d05: 	movups	(%r8), %xmm7
    00000d09: 	shufps	$0x0, %xmm1, %xmm1
    00000d0d: 	mulps	%xmm1, %xmm0
    00000d10: 	addps	%xmm7, %xmm0
    00000d13: 	movups	%xmm0, (%r8)
    00000d17: 	movq	%rcx, %r8
    00000d1a: 	andq	$-0x4, %r8
    00000d1e: 	addq	%r8, %rax
    00000d21: 	cmpq	%rcx, %r8
    00000d24: 	je	.Ltmp183 # Offset: 3364
    00000d26: 	subq	%r8, %rcx
    00000d29: 	cmpq	$0x1, %rcx
    00000d2d: 	je	.Ltmp186 # Offset: 3373
.Ltmp195:
    00000d2f: 	addq	%r8, %rsi
    00000d32: 	movaps	%xmm4, %xmm1
    00000d35: 	addq	%r8, %rdi
    00000d38: 	movq	(%r15,%rsi,4), %xmm0
    00000d3e: 	shufps	$0xe0, %xmm1, %xmm1
    00000d42: 	leaq	(%rbx,%rdi,4), %rdi
    00000d46: 	movq	%rcx, %rsi
    00000d49: 	andq	$-0x2, %rsi
    00000d4d: 	mulps	%xmm1, %xmm0
    00000d50: 	movq	(%rdi), %xmm1
    00000d54: 	addq	%rsi, %rax
    00000d57: 	addps	%xmm1, %xmm0
    00000d5a: 	movlps	%xmm0, (%rdi)
    00000d5d: 	cmpq	%rcx, %rsi
    00000d60: 	je	.Ltmp183 # Offset: 3424
.Ltmp186:
    00000d62: 	leaq	(%rax,%rbp), %rcx
    00000d66: 	addq	%rdx, %rax
    00000d69: 	mulss	(%r15,%rax,4), %xmm4
    00000d6f: 	leaq	(%rbx,%rcx,4), %rcx
    00000d73: 	addss	(%rcx), %xmm4
    00000d77: 	movss	%xmm4, (%rcx)
.Ltmp183:
    00000d7b: 	addq	$0x4, %r11
    00000d7f: 	addq	0x70(%rsp), %rdx
    00000d84: 	addq	-0x68(%rsp), %r14
    00000d89: 	cmpq	0x78(%rsp), %r11
    00000d8e: 	jne	.Ltmp187 # Offset: 3470
    00000d94: 	movq	-0x68(%rsp), %rbp
.Ltmp178:
    00000d99: 	addq	$0x1, 0x80(%rsp)
    00000da2: 	movq	0x70(%rsp), %rdi
    00000da7: 	addq	%rbp, 0x78(%rsp)
    00000dac: 	movq	0x80(%rsp), %rax
    00000db4: 	addq	%rdi, -0x48(%rsp)
    00000db9: 	addq	%rbp, 0x10(%rsp)
    00000dbe: 	addq	%rbp, 0x28(%rsp)
    00000dc3: 	cmpq	0xc8(%rsp), %rax
    00000dcb: 	jne	.Ltmp188 # Offset: 3531
    00000dd1: 	addq	$0x384, -0x40(%rsp)
    00000dda: 	movq	%rbx, %r13
    00000ddd: 	movq	0x110(%rsp), %rbx
    00000de5: 	movq	%r15, %r12
    00000de8: 	addq	$0xe10, 0x128(%rsp)
    00000df4: 	cmpq	%rbx, %rdi
    00000df7: 	ja	.Ltmp189 # Offset: 3575
    00000dfd: 	movq	%rdi, %rax
    00000e00: 	movq	0xc0(%rsp), %rdx
    00000e08: 	movq	%r15, %r14
    00000e0b: 	movq	%r13, %r11
    00000e0e: 	shlq	$0x6, %rax
    00000e12: 	subq	%rdi, %rax
    00000e15: 	leaq	(%rdx,%rax,2), %rax
    00000e19: 	movq	%rax, 0xa8(%rsp)
    00000e21: 	movq	0x130(%rsp), %rax
    00000e29: 	addq	0x150(%rsp), %rax
    00000e31: 	movq	%rax, 0x118(%rsp)
    00000e39: 	cmpq	%rdi, 0x108(%rsp)
    00000e41: 	jb	.Ltmp190 # Offset: 3649
.Ltmp166:
    00000e47: 	addq	$0x160, %rsp
    00000e4e: 	popq	%rbx
    00000e4f: 	popq	%rbp
    00000e50: 	popq	%r12
    00000e52: 	popq	%r13
    00000e54: 	popq	%r14
    00000e56: 	popq	%r15
    00000e58: 	retq # Offset: 3672
    00000e59: 	nopl	(%rax) # Size: 7
.Ltmp169:
    00000e60: 	movq	-0x18(%rsp), %r8
    00000e65: 	movq	-0x28(%rsp), %rdi
    00000e6a: 	movq	-0x70(%rsp), %rsi
    00000e6f: 	movq	-0x30(%rsp), %rcx
    00000e74: 	movq	0x10(%rsp), %rdx
    00000e79: 	movq	-0x50(%rsp), %rax
    00000e7e: 	nop # Size: 2
.Ltmp191:
    00000e80: 	movss	(%rcx), %xmm0
    00000e84: 	movss	(%rsi), %xmm1
    00000e88: 	addq	$0x4, %rax
    00000e8c: 	addq	$0x10, %rdx
    00000e90: 	addq	$0x10, %rcx
    00000e94: 	addq	$0x10, %rsi
    00000e98: 	addq	$0x10, %rdi
    00000e9c: 	addq	$0x10, %r8
    00000ea0: 	mulss	%xmm5, %xmm1
    00000ea4: 	mulss	%xmm2, %xmm0
    00000ea8: 	addss	%xmm1, %xmm0
    00000eac: 	movss	-0x10(%rdi), %xmm1
    00000eb1: 	mulss	%xmm7, %xmm1
    00000eb5: 	addss	%xmm1, %xmm0
    00000eb9: 	movss	-0x10(%r8), %xmm1
    00000ebf: 	mulss	%xmm6, %xmm1
    00000ec3: 	addss	%xmm1, %xmm0
    00000ec7: 	addss	-0x10(%rdx), %xmm0
    00000ecc: 	movss	%xmm0, -0x10(%rdx)
    00000ed1: 	movss	-0xc(%rcx), %xmm0
    00000ed6: 	movss	-0xc(%rsi), %xmm1
    00000edb: 	mulss	%xmm2, %xmm0
    00000edf: 	mulss	%xmm5, %xmm1
    00000ee3: 	addss	%xmm1, %xmm0
    00000ee7: 	movss	-0xc(%rdi), %xmm1
    00000eec: 	mulss	%xmm7, %xmm1
    00000ef0: 	addss	%xmm1, %xmm0
    00000ef4: 	movss	-0xc(%r8), %xmm1
    00000efa: 	mulss	%xmm6, %xmm1
    00000efe: 	addss	%xmm1, %xmm0
    00000f02: 	addss	-0xc(%rdx), %xmm0
    00000f07: 	movss	%xmm0, -0xc(%rdx)
    00000f0c: 	movss	-0x8(%rcx), %xmm0
    00000f11: 	movss	-0x8(%rsi), %xmm1
    00000f16: 	mulss	%xmm2, %xmm0
    00000f1a: 	mulss	%xmm5, %xmm1
    00000f1e: 	addss	%xmm1, %xmm0
    00000f22: 	movss	-0x8(%rdi), %xmm1
    00000f27: 	mulss	%xmm7, %xmm1
    00000f2b: 	addss	%xmm1, %xmm0
    00000f2f: 	movss	-0x8(%r8), %xmm1
    00000f35: 	mulss	%xmm6, %xmm1
    00000f39: 	addss	%xmm1, %xmm0
    00000f3d: 	addss	-0x8(%rdx), %xmm0
    00000f42: 	movss	%xmm0, -0x8(%rdx)
    00000f47: 	movss	-0x4(%rcx), %xmm0
    00000f4c: 	movss	-0x4(%rsi), %xmm1
    00000f51: 	mulss	%xmm2, %xmm0
    00000f55: 	mulss	%xmm5, %xmm1
    00000f59: 	addss	%xmm1, %xmm0
    00000f5d: 	movss	-0x4(%rdi), %xmm1
    00000f62: 	mulss	%xmm7, %xmm1
    00000f66: 	addss	%xmm1, %xmm0
    00000f6a: 	movss	-0x4(%r8), %xmm1
    00000f70: 	mulss	%xmm6, %xmm1
    00000f74: 	addss	%xmm1, %xmm0
    00000f78: 	addss	-0x4(%rdx), %xmm0
    00000f7d: 	movss	%xmm0, -0x4(%rdx)
    00000f82: 	cmpq	%rax, %rbp
    00000f85: 	ja	.Ltmp191 # Offset: 3973
    00000f8b: 	jmp	.Ltmp171 # Offset: 3979
.Ltmp174:
    00000f90: 	movq	0x20(%rsp), %rdx
    00000f95: 	movq	-0x58(%rsp), %rdi
    00000f9a: 	movss	-0x4(%r15,%rdx), %xmm0
    00000fa1: 	movq	0x18(%rsp), %rdx
    00000fa6: 	movss	-0x4(%r15,%rdx), %xmm1
    00000fad: 	mulss	%xmm2, %xmm0
    00000fb1: 	movq	-0x38(%rsp), %rdx
    00000fb6: 	mulss	%xmm5, %xmm1
    00000fba: 	addss	%xmm1, %xmm0
    00000fbe: 	movss	-0x4(%r15,%rdx), %xmm1
    00000fc5: 	movq	-0x20(%rsp), %rdx
    00000fca: 	mulss	%xmm7, %xmm1
    00000fce: 	addss	%xmm1, %xmm0
    00000fd2: 	movss	-0x4(%r15,%rdx), %xmm1
    00000fd9: 	leaq	0x1(%rax), %rdx
    00000fdd: 	mulss	%xmm6, %xmm1
    00000fe1: 	addss	%xmm1, %xmm0
    00000fe5: 	addss	(%rcx), %xmm0
    00000fe9: 	movss	%xmm0, (%rcx)
    00000fed: 	cmpq	%rdx, %rdi
    00000ff0: 	jbe	.Ltmp173 # Offset: 4080
    00000ff6: 	leaq	(%rdx,%rbx), %rsi
    00000ffa: 	movq	-0x48(%rsp), %r8
    00000fff: 	movq	-0x60(%rsp), %r13
    00001004: 	movss	(%r15,%rsi,4), %xmm0
    0000100a: 	leaq	(%rdx,%r11), %rsi
    0000100e: 	movss	(%r15,%rsi,4), %xmm1
    00001014: 	leaq	(%rdx,%r9), %rsi
    00001018: 	leaq	(%rdx,%r8), %rcx
    0000101c: 	addq	%r10, %rdx
    0000101f: 	mulss	%xmm2, %xmm0
    00001023: 	leaq	(%r13,%rcx,4), %rcx
    00001028: 	mulss	%xmm5, %xmm1
    0000102c: 	addss	%xmm1, %xmm0
    00001030: 	movss	(%r15,%rsi,4), %xmm1
    00001036: 	mulss	%xmm7, %xmm1
    0000103a: 	addss	%xmm1, %xmm0
    0000103e: 	movss	(%r15,%rdx,4), %xmm1
    00001044: 	leaq	0x2(%rax), %rdx
    00001048: 	mulss	%xmm6, %xmm1
    0000104c: 	addss	%xmm1, %xmm0
    00001050: 	addss	(%rcx), %xmm0
    00001054: 	movss	%xmm0, (%rcx)
    00001058: 	cmpq	%rdx, %rdi
    0000105b: 	jbe	.Ltmp173 # Offset: 4187
    00001061: 	leaq	(%rdx,%rbx), %rsi
    00001065: 	leaq	(%rdx,%r8), %rcx
    00001069: 	addq	$0x3, %rax
    0000106d: 	movss	(%r15,%rsi,4), %xmm0
    00001073: 	leaq	(%rdx,%r11), %rsi
    00001077: 	leaq	(%r13,%rcx,4), %rcx
    0000107c: 	movss	(%r15,%rsi,4), %xmm1
    00001082: 	leaq	(%rdx,%r9), %rsi
    00001086: 	addq	%r10, %rdx
    00001089: 	mulss	%xmm2, %xmm0
    0000108d: 	mulss	%xmm5, %xmm1
    00001091: 	addss	%xmm1, %xmm0
    00001095: 	movss	(%r15,%rsi,4), %xmm1
    0000109b: 	mulss	%xmm7, %xmm1
    0000109f: 	addss	%xmm1, %xmm0
    000010a3: 	movss	(%r15,%rdx,4), %xmm1
    000010a9: 	mulss	%xmm6, %xmm1
    000010ad: 	addss	%xmm1, %xmm0
    000010b1: 	addss	(%rcx), %xmm0
    000010b5: 	movss	%xmm0, (%rcx)
    000010b9: 	cmpq	%rax, %rdi
    000010bc: 	jbe	.Ltmp173 # Offset: 4284
    000010c2: 	leaq	(%r11,%rax), %rcx
    000010c6: 	leaq	(%rax,%r8), %rdx
    000010ca: 	mulss	(%r15,%rcx,4), %xmm5
    000010d0: 	leaq	(%rbx,%rax), %rcx
    000010d4: 	leaq	(%r13,%rdx,4), %rdx
    000010d9: 	mulss	(%r15,%rcx,4), %xmm2
    000010df: 	leaq	(%rax,%r9), %rcx
    000010e3: 	mulss	(%r15,%rcx,4), %xmm7
    000010e9: 	addss	%xmm2, %xmm5
    000010ed: 	addss	%xmm5, %xmm7
    000010f1: 	jmp	.Ltmp192 # Offset: 4337
    000010f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp168:
    00001100: 	movq	-0x50(%rsp), %rax
    00001105: 	jmp	.Ltmp171 # Offset: 4357
.Ltmp180:
    0000110a: 	movq	0x10(%rsp), %rcx
    0000110f: 	movq	-0x50(%rsp), %rax
    00001114: 	movq	%r14, %rsi
    00001117: 	movq	-0x70(%rsp), %r12
    0000111c: 	nopl	(%rax) # Size: 4
.Ltmp193:
    00001120: 	movss	(%rsi), %xmm0
    00001124: 	addq	$0x4, %rax
    00001128: 	addq	$0x10, %rcx
    0000112c: 	addq	$0x10, %rsi
    00001130: 	mulss	%xmm4, %xmm0
    00001134: 	addss	-0x10(%rcx), %xmm0
    00001139: 	movss	%xmm0, -0x10(%rcx)
    0000113e: 	movss	-0xc(%rsi), %xmm0
    00001143: 	mulss	%xmm4, %xmm0
    00001147: 	addss	-0xc(%rcx), %xmm0
    0000114c: 	movss	%xmm0, -0xc(%rcx)
    00001151: 	movss	-0x8(%rsi), %xmm0
    00001156: 	mulss	%xmm4, %xmm0
    0000115a: 	addss	-0x8(%rcx), %xmm0
    0000115f: 	movss	%xmm0, -0x8(%rcx)
    00001164: 	movss	-0x4(%rsi), %xmm0
    00001169: 	mulss	%xmm4, %xmm0
    0000116d: 	addss	-0x4(%rcx), %xmm0
    00001172: 	movss	%xmm0, -0x4(%rcx)
    00001177: 	cmpq	%rax, %r13
    0000117a: 	ja	.Ltmp193 # Offset: 4474
    0000117c: 	movq	%r12, -0x70(%rsp)
    00001181: 	jmp	.Ltmp182 # Offset: 4481
.Ltmp175:
    00001186: 	xorl	%ecx, %ecx
    00001188: 	jmp	.Ltmp194 # Offset: 4488
.Ltmp184:
    0000118d: 	movss	-0x4(%r15,%r9), %xmm0
    00001194: 	movq	-0x58(%rsp), %rdi
    00001199: 	leaq	0x1(%rax), %rcx
    0000119d: 	mulss	%xmm4, %xmm0
    000011a1: 	addss	(%r8), %xmm0
    000011a6: 	movss	%xmm0, (%r8)
    000011ab: 	cmpq	%rcx, %rdi
    000011ae: 	jbe	.Ltmp183 # Offset: 4526
    000011b4: 	leaq	(%rcx,%rbp), %rsi
    000011b8: 	addq	%rdx, %rcx
    000011bb: 	movss	(%r15,%rcx,4), %xmm0
    000011c1: 	leaq	(%rbx,%rsi,4), %rsi
    000011c5: 	leaq	0x2(%rax), %rcx
    000011c9: 	mulss	%xmm4, %xmm0
    000011cd: 	addss	(%rsi), %xmm0
    000011d1: 	movss	%xmm0, (%rsi)
    000011d5: 	cmpq	%rcx, %rdi
    000011d8: 	jbe	.Ltmp183 # Offset: 4568
    000011de: 	leaq	(%rcx,%rbp), %rsi
    000011e2: 	addq	%rdx, %rcx
    000011e5: 	addq	$0x3, %rax
    000011e9: 	movss	(%r15,%rcx,4), %xmm0
    000011ef: 	leaq	(%rbx,%rsi,4), %rsi
    000011f3: 	mulss	%xmm4, %xmm0
    000011f7: 	addss	(%rsi), %xmm0
    000011fb: 	movss	%xmm0, (%rsi)
    000011ff: 	cmpq	%rax, %rdi
    00001202: 	ja	.Ltmp186 # Offset: 4610
    00001208: 	jmp	.Ltmp183 # Offset: 4616
.Ltmp179:
    0000120d: 	movq	%rsi, %rax
    00001210: 	jmp	.Ltmp182 # Offset: 4624
.Ltmp185:
    00001215: 	xorl	%r8d, %r8d
    00001218: 	jmp	.Ltmp195 # Offset: 4632
.Ltmp167:
    0000121d: 	movq	0x98(%rsp), %rax
    00001225: 	movq	%rax, -0x68(%rsp)
    0000122a: 	movq	%rax, %rdx
    0000122d: 	jmp	.Ltmp196 # Offset: 4653
DWARF CFI Instructions:
    <empty>
End of Function "_ZN28matmul_JKI_blocked_unrolled3IfEclEPKfS2_Pfmm.isra.0/1(*2)"

Binary Function "_ZN28matmul_IJK_blocked_unrolled3IfEclEPKfS2_Pfmm.isra.0/1(*2)" after disassembly {
  All names   : _ZN28matmul_IJK_blocked_unrolled3IfEclEPKfS2_Pfmm.isra.0/1
                _ZN28matmul_IJK_blocked_unrolled3IfEclEPKfS2_Pfmm.isra.0/matrix_multiply.cpp/1
  Number      : 18
  State       : disassembled
  Address     : 0x8a50
  Size        : 0xf96
  MaxSize     : 0xfa0
  Offset      : 0x8a50
  Section     : .text
  Orc Section : .local.text._ZN28matmul_IJK_blocked_unrolled3IfEclEPKfS2_Pfmm.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB017:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	subq	$0x190, %rsp
    00000011: 	movq	%rsi, -0x50(%rsp)
    00000016: 	movq	%rdx, 0x168(%rsp)
    0000001e: 	movq	%rcx, 0x120(%rsp)
    00000026: 	testq	%rcx, %rcx
    00000029: 	je	.Ltmp197 # Offset: 41
    0000002f: 	testq	%r8, %r8
    00000032: 	je	.Ltmp197 # Offset: 50
    00000038: 	movq	%r8, %rax
    0000003b: 	movq	%rdi, %r12
    0000003e: 	movq	%r8, %rbp
    00000041: 	movq	%r8, %r13
    00000044: 	shlq	$0x9, %rax
    00000048: 	shlq	$0x4, %rbp
    0000004c: 	leaq	(,%r8,4), %rbx
    00000054: 	movq	$0x0, 0xb8(%rsp)
    00000060: 	movq	%rax, 0x150(%rsp)
    00000068: 	leaq	(,%r8,8), %rax
    00000070: 	addq	%rax, %rsi
    00000073: 	movq	%rax, 0xc8(%rsp)
    0000007b: 	leaq	(%r8,%r8), %rax
    0000007f: 	movq	%rbx, 0x8(%rsp)
    00000084: 	addq	%rdi, %rbx
    00000087: 	leaq	(%rax,%r8), %rdi
    0000008b: 	movq	%rbx, 0x160(%rsp)
    00000093: 	movq	%r8, %rbx
    00000096: 	movq	%rsi, 0x128(%rsp)
    0000009e: 	shlq	$0x6, %rbx
    000000a2: 	movq	$0x0, 0x110(%rsp)
    000000ae: 	movq	%rbx, %r14
    000000b1: 	movq	%r12, %rbx
    000000b4: 	movq	%rbp, %r12
    000000b7: 	movq	%rax, 0xa8(%rsp)
    000000bf: 	negq	%rax
    000000c2: 	movq	%rdi, 0xb0(%rsp)
    000000ca: 	shlq	$0x4, %rdi
    000000ce: 	movq	%rax, 0x88(%rsp)
    000000d6: 	movq	%rdi, %rbp
    000000d9: 	movq	%r8, %rax
.Ltmp216:
    000000dc: 	movq	0x110(%rsp), %rdi
    000000e4: 	movq	0x120(%rsp), %rsi
    000000ec: 	movq	$0x4, 0x58(%rsp)
    000000f5: 	movq	0xb8(%rsp), %rcx
    000000fd: 	movq	0x160(%rsp), %rdx
    00000105: 	movq	$0x0, 0x118(%rsp)
    00000111: 	movq	%rdi, 0xc0(%rsp)
    00000119: 	subq	$-0x80, %rdi
    0000011d: 	cmpq	%rsi, %rdi
    00000120: 	movq	%rdi, 0x110(%rsp)
    00000128: 	cmovbeq	%rdi, %rsi
    0000012c: 	addq	0xa8(%rsp), %rax
    00000134: 	movq	%rax, 0x158(%rsp)
    0000013c: 	subq	0xb0(%rsp), %rax
    00000144: 	leaq	-0x3(%rsi), %rdi
    00000148: 	movq	%rsi, 0x90(%rsp)
    00000150: 	movq	%rdi, 0x30(%rsp)
    00000155: 	movq	-0x50(%rsp), %rdi
    0000015a: 	movq	%rax, 0x108(%rsp)
    00000162: 	movq	%r13, %rax
    00000165: 	movq	%rdi, 0x28(%rsp)
    0000016a: 	movq	0x8(%rsp), %rdi
    0000016f: 	shlq	$0x7, %rax
    00000173: 	subq	%r13, %rax
    00000176: 	movq	%rdi, %rsi
    00000179: 	shlq	$0x2, %rax
    0000017d: 	addq	%rcx, %rsi
    00000180: 	movq	%rax, 0x180(%rsp)
    00000188: 	movq	%rbp, %rax
    0000018b: 	movq	%rbx, %rbp
    0000018e: 	movq	%rsi, 0xd8(%rsp)
    00000196: 	movq	0xc8(%rsp), %rsi
    0000019e: 	addq	%rsi, %rdi
    000001a1: 	movq	%rdi, 0xe0(%rsp)
    000001a9: 	movq	%rcx, %rdi
    000001ac: 	addq	%rdx, %rcx
    000001af: 	movq	%rcx, 0x140(%rsp)
    000001b7: 	movq	%rsi, %rcx
    000001ba: 	addq	%rbx, %rdi
    000001bd: 	addq	%rdx, %rcx
    000001c0: 	movq	%rdi, 0x170(%rsp)
    000001c8: 	leaq	(%rbx,%rsi), %rdi
    000001cc: 	movq	%rax, %rbx
    000001cf: 	movq	%rcx, 0x148(%rsp)
    000001d7: 	movq	0x128(%rsp), %rcx
    000001df: 	movq	%rdi, 0x178(%rsp)
    000001e7: 	movq	%r13, %rdi
    000001ea: 	movq	%r12, %r13
    000001ed: 	movq	%rcx, 0x40(%rsp)
    000001f2: 	movq	%rdi, %r12
.Ltmp215:
    000001f5: 	movq	0x118(%rsp), %rdi
    000001fd: 	movq	0x170(%rsp), %rax
    00000205: 	movq	$0x0, -0x58(%rsp)
    0000020e: 	movq	0x168(%rsp), %rsi
    00000216: 	movq	0x28(%rsp), %r11
    0000021b: 	movq	%rdi, %r15
    0000021e: 	movq	%rdi, -0x20(%rsp)
    00000223: 	subq	$-0x80, %rdi
    00000227: 	movq	0x40(%rsp), %r10
    0000022c: 	cmpq	%r12, %rdi
    0000022f: 	leaq	(,%r15,4), %rcx
    00000237: 	movq	%rdi, 0x118(%rsp)
    0000023f: 	cmovaq	%r12, %rdi
    00000243: 	addq	%rcx, %rax
    00000246: 	movq	%rsi, 0xa0(%rsp)
    0000024e: 	movq	0x8(%rsp), %rsi
    00000253: 	movq	%rax, 0xe8(%rsp)
    0000025b: 	movq	0x140(%rsp), %rax
    00000263: 	addq	%rsi, %r11
    00000266: 	addq	%rsi, %r10
    00000269: 	leaq	-0x3(%rdi), %r9
    0000026d: 	movq	%rdi, 0x18(%rsp)
    00000272: 	addq	%rcx, %rax
    00000275: 	movq	%r9, 0x10(%rsp)
    0000027a: 	movq	%rax, 0xf0(%rsp)
    00000282: 	movq	0x178(%rsp), %rax
    0000028a: 	movq	%r11, 0x130(%rsp)
    00000292: 	addq	%rcx, %rax
    00000295: 	movq	%r10, 0x138(%rsp)
    0000029d: 	movq	%rax, 0xf8(%rsp)
    000002a5: 	movq	0x148(%rsp), %rax
    000002ad: 	movq	%r10, 0x50(%rsp)
    000002b2: 	addq	%rcx, %rax
    000002b5: 	movq	%r11, 0x48(%rsp)
    000002ba: 	movq	%rax, 0x100(%rsp)
    000002c2: 	movq	%rdi, %rax
    000002c5: 	subq	%r15, %rax
    000002c8: 	cmpq	$0x2, 0x58(%rsp)
    000002ce: 	seta	%dl
    000002d1: 	cmpq	$-0x4, %r9
    000002d5: 	leaq	-0x4(%rax), %rsi
    000002d9: 	setbe	%al
    000002dc: 	andl	%edx, %eax
    000002de: 	cmpq	$0xb, %rsi
    000002e2: 	seta	%dl
    000002e5: 	andl	%edx, %eax
    000002e7: 	movb	%al, 0x3f(%rsp)
    000002eb: 	movq	%rsi, %rax
    000002ee: 	shrq	$0x2, %rax
    000002f2: 	addq	$0x1, %rax
    000002f6: 	movq	%rax, %rsi
    000002f9: 	movq	%rax, 0x70(%rsp)
    000002fe: 	andq	$-0x4, %rax
    00000302: 	movq	%rax, 0x60(%rsp)
    00000307: 	leaq	(%r15,%rax,4), %rax
    0000030b: 	shrq	$0x2, %rsi
    0000030f: 	movq	%r12, %r15
    00000312: 	movq	%rax, 0x80(%rsp)
    0000031a: 	addq	$0x2, %rax
    0000031e: 	negq	%r15
    00000321: 	imulq	%r12, %rax
    00000325: 	movq	%rsi, 0x68(%rsp)
    0000032a: 	movq	%rax, 0xd0(%rsp)
    00000332: 	movq	%rdi, %rax
    00000335: 	negq	%rax
    00000338: 	leaq	(%rcx,%rax,4), %rax
    0000033c: 	movq	%rax, 0x98(%rsp)
    00000344: 	movq	%r15, %rax
    00000347: 	movq	%rbp, %r15
    0000034a: 	movq	%r14, %rbp
    0000034d: 	movq	%rax, %r14
.Ltmp214:
    00000350: 	movq	0xc0(%rsp), %rsi
    00000358: 	movq	0x30(%rsp), %rax
    0000035d: 	cmpq	%rax, %rsi
    00000360: 	jae	.Ltmp198 # Offset: 864
    00000366: 	movq	0x108(%rsp), %rax
    0000036e: 	movq	0xb8(%rsp), %rdi
    00000376: 	movq	%rsi, -0x48(%rsp)
    0000037b: 	movq	%rax, -0x78(%rsp)
    00000380: 	movq	0xa0(%rsp), %rax
    00000388: 	addq	%rax, %rdi
    0000038b: 	movq	%rdi, -0x28(%rsp)
    00000390: 	movq	0xd8(%rsp), %rdi
    00000398: 	addq	%rax, %rdi
    0000039b: 	movq	%rdi, -0x30(%rsp)
    000003a0: 	movq	0xc8(%rsp), %rdi
    000003a8: 	addq	%rax, %rdi
    000003ab: 	addq	0xe0(%rsp), %rax
    000003b3: 	movq	%rdi, -0x40(%rsp)
    000003b8: 	movq	-0x50(%rsp), %rdi
    000003bd: 	movq	%rax, -0x38(%rsp)
    000003c2: 	movq	0xd0(%rsp), %rax
    000003ca: 	addq	-0x58(%rsp), %rax
    000003cf: 	leaq	(%rdi,%rax,4), %rax
    000003d3: 	movq	%rax, 0x78(%rsp)
    000003d8: 	movq	0x100(%rsp), %rax
    000003e0: 	movq	%rax, (%rsp)
    000003e4: 	movq	0xf8(%rsp), %rax
    000003ec: 	movq	%rax, -0x10(%rsp)
    000003f1: 	movq	0xf0(%rsp), %rax
    000003f9: 	movq	%rax, -0x18(%rsp)
    000003fe: 	movq	0xe8(%rsp), %rax
    00000406: 	movq	%rax, -0x8(%rsp)
    0000040b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp207:
    00000410: 	movq	-0x78(%rsp), %rax
    00000415: 	movq	-0x20(%rsp), %rdi
    0000041a: 	addq	%r12, %rax
    0000041d: 	movq	%rax, -0x60(%rsp)
    00000422: 	addq	%r12, %rax
    00000425: 	movq	%rax, -0x68(%rsp)
    0000042a: 	addq	%r12, %rax
    0000042d: 	movq	%rax, -0x70(%rsp)
    00000432: 	cmpq	%rdi, 0x10(%rsp)
    00000437: 	jbe	.Ltmp199 # Offset: 1079
    0000043d: 	cmpb	$0x0, 0x3f(%rsp)
    00000442: 	je	.Ltmp200 # Offset: 1090
    00000448: 	pxor	%xmm4, %xmm4
    0000044c: 	movq	%rdi, %xmm14
    00000451: 	movq	%r12, 0x20(%rsp)
    00000456: 	movq	0x28(%rsp), %r10
    0000045b: 	movq	0x48(%rsp), %r9
    00000460: 	movq	0x40(%rsp), %r8
    00000465: 	xorl	%r11d, %r11d
    00000468: 	movaps	%xmm4, %xmm3
    0000046b: 	movq	0x50(%rsp), %rdi
    00000470: 	movq	-0x8(%rsp), %rsi
    00000475: 	movaps	%xmm4, %xmm2
    00000478: 	movaps	%xmm4, %xmm1
    0000047b: 	movq	-0x18(%rsp), %rcx
    00000480: 	movq	-0x10(%rsp), %rdx
    00000485: 	movhps	0x58(%rsp), %xmm14
    0000048b: 	movq	(%rsp), %rax
    0000048f: 	movq	0x68(%rsp), %r12
    00000494: 	nopl	(%rax) # Size: 4
.Ltmp201:
    00000498: 	movss	(%r10,%rbx), %xmm5
    0000049e: 	movss	(%r10,%r13,2), %xmm0
    000004a4: 	movdqa	%xmm14, %xmm13
    000004a9: 	addq	$0x1, %r11
    000004ad: 	movss	(%r10), %xmm9
    000004b2: 	movss	(%rdi), %xmm6
    000004b6: 	addq	$0x40, %rax
    000004ba: 	addq	$0x40, %rdx
    000004be: 	unpcklps	%xmm5, %xmm0
    000004c1: 	movss	(%r9), %xmm12
    000004c6: 	addq	$0x40, %rcx
    000004ca: 	addq	$0x40, %rsi
    000004ce: 	movss	(%r10,%r13), %xmm5
    000004d4: 	movss	(%r8), %xmm8
    000004d9: 	addq	%rbp, %r10
    000004dc: 	paddq	DATAat0x2d9b0(%rip), %xmm14
    000004e5: 	movups	-0x20(%rsi), %xmm10
    000004ea: 	unpcklps	%xmm5, %xmm9
    000004ee: 	movss	(%r9,%rbx), %xmm5
    000004f4: 	movlhps	%xmm0, %xmm9
    000004f8: 	movss	(%r9,%r13,2), %xmm0
    000004fe: 	movaps	%xmm10, %xmm11
    00000502: 	unpcklps	%xmm5, %xmm0
    00000505: 	movss	(%r9,%r13), %xmm5
    0000050b: 	addq	%rbp, %r9
    0000050e: 	unpcklps	%xmm5, %xmm12
    00000512: 	movss	(%r8,%rbx), %xmm5
    00000518: 	movlhps	%xmm0, %xmm12
    0000051c: 	movss	(%r8,%r13,2), %xmm0
    00000522: 	unpcklps	%xmm5, %xmm0
    00000525: 	movss	(%r8,%r13), %xmm5
    0000052b: 	addq	%rbp, %r8
    0000052e: 	unpcklps	%xmm5, %xmm8
    00000532: 	movss	(%rdi,%rbx), %xmm5
    00000537: 	movlhps	%xmm0, %xmm8
    0000053b: 	movss	(%rdi,%r13,2), %xmm0
    00000541: 	unpcklps	%xmm5, %xmm0
    00000544: 	movss	(%rdi,%r13), %xmm5
    0000054a: 	addq	%rbp, %rdi
    0000054d: 	unpcklps	%xmm5, %xmm6
    00000550: 	movups	-0x40(%rsi), %xmm5
    00000554: 	movlhps	%xmm0, %xmm6
    00000557: 	movups	-0x30(%rsi), %xmm0
    0000055b: 	movaps	%xmm5, %xmm7
    0000055e: 	shufps	$0x88, %xmm0, %xmm7
    00000562: 	shufps	$0xdd, %xmm0, %xmm5
    00000566: 	movups	-0x10(%rsi), %xmm0
    0000056a: 	movaps	%xmm7, %xmm15
    0000056e: 	shufps	$0x88, %xmm0, %xmm11
    00000573: 	shufps	$0xdd, %xmm0, %xmm10
    00000578: 	movaps	%xmm5, %xmm0
    0000057b: 	shufps	$0x88, %xmm11, %xmm15
    00000580: 	shufps	$0x88, %xmm10, %xmm0
    00000585: 	mulps	%xmm9, %xmm15
    00000589: 	shufps	$0xdd, %xmm11, %xmm7
    0000058e: 	shufps	$0xdd, %xmm10, %xmm5
    00000593: 	mulps	%xmm12, %xmm0
    00000597: 	movups	-0x20(%rcx), %xmm10
    0000059c: 	mulps	%xmm8, %xmm7
    000005a0: 	mulps	%xmm6, %xmm5
    000005a3: 	movaps	%xmm10, %xmm11
    000005a7: 	addps	%xmm15, %xmm0
    000005ab: 	addps	%xmm7, %xmm0
    000005ae: 	addps	%xmm5, %xmm0
    000005b1: 	addss	%xmm0, %xmm1
    000005b5: 	movaps	%xmm0, %xmm5
    000005b8: 	shufps	$0x55, %xmm0, %xmm5
    000005bc: 	addss	%xmm1, %xmm5
    000005c0: 	movaps	%xmm0, %xmm1
    000005c3: 	unpckhps	%xmm0, %xmm1
    000005c6: 	shufps	$0xff, %xmm0, %xmm0
    000005ca: 	addss	%xmm5, %xmm1
    000005ce: 	movups	-0x40(%rcx), %xmm5
    000005d2: 	movaps	%xmm5, %xmm7
    000005d5: 	addss	%xmm0, %xmm1
    000005d9: 	movups	-0x30(%rcx), %xmm0
    000005dd: 	shufps	$0x88, %xmm0, %xmm7
    000005e1: 	shufps	$0xdd, %xmm0, %xmm5
    000005e5: 	movups	-0x10(%rcx), %xmm0
    000005e9: 	movaps	%xmm7, %xmm15
    000005ed: 	shufps	$0x88, %xmm0, %xmm11
    000005f2: 	shufps	$0xdd, %xmm0, %xmm10
    000005f7: 	movaps	%xmm5, %xmm0
    000005fa: 	shufps	$0x88, %xmm11, %xmm15
    000005ff: 	shufps	$0x88, %xmm10, %xmm0
    00000604: 	mulps	%xmm9, %xmm15
    00000608: 	shufps	$0xdd, %xmm11, %xmm7
    0000060d: 	shufps	$0xdd, %xmm10, %xmm5
    00000612: 	mulps	%xmm12, %xmm0
    00000616: 	movups	-0x20(%rdx), %xmm10
    0000061b: 	mulps	%xmm8, %xmm7
    0000061f: 	mulps	%xmm6, %xmm5
    00000622: 	movaps	%xmm10, %xmm11
    00000626: 	addps	%xmm15, %xmm0
    0000062a: 	addps	%xmm7, %xmm0
    0000062d: 	addps	%xmm5, %xmm0
    00000630: 	addss	%xmm0, %xmm2
    00000634: 	movaps	%xmm0, %xmm5
    00000637: 	shufps	$0x55, %xmm0, %xmm5
    0000063b: 	addss	%xmm2, %xmm5
    0000063f: 	movaps	%xmm0, %xmm2
    00000642: 	unpckhps	%xmm0, %xmm2
    00000645: 	shufps	$0xff, %xmm0, %xmm0
    00000649: 	addss	%xmm5, %xmm2
    0000064d: 	movups	-0x40(%rdx), %xmm5
    00000651: 	movaps	%xmm5, %xmm7
    00000654: 	addss	%xmm0, %xmm2
    00000658: 	movups	-0x30(%rdx), %xmm0
    0000065c: 	shufps	$0x88, %xmm0, %xmm7
    00000660: 	shufps	$0xdd, %xmm0, %xmm5
    00000664: 	movups	-0x10(%rdx), %xmm0
    00000668: 	movaps	%xmm7, %xmm15
    0000066c: 	shufps	$0x88, %xmm0, %xmm11
    00000671: 	shufps	$0xdd, %xmm0, %xmm10
    00000676: 	movaps	%xmm5, %xmm0
    00000679: 	shufps	$0x88, %xmm11, %xmm15
    0000067e: 	shufps	$0x88, %xmm10, %xmm0
    00000683: 	mulps	%xmm9, %xmm15
    00000687: 	shufps	$0xdd, %xmm11, %xmm7
    0000068c: 	shufps	$0xdd, %xmm10, %xmm5
    00000691: 	mulps	%xmm12, %xmm0
    00000695: 	movups	-0x20(%rax), %xmm10
    0000069a: 	mulps	%xmm8, %xmm7
    0000069e: 	mulps	%xmm6, %xmm5
    000006a1: 	movaps	%xmm10, %xmm11
    000006a5: 	addps	%xmm15, %xmm0
    000006a9: 	addps	%xmm7, %xmm0
    000006ac: 	addps	%xmm5, %xmm0
    000006af: 	addss	%xmm0, %xmm3
    000006b3: 	movaps	%xmm0, %xmm5
    000006b6: 	shufps	$0x55, %xmm0, %xmm5
    000006ba: 	addss	%xmm3, %xmm5
    000006be: 	movaps	%xmm0, %xmm3
    000006c1: 	unpckhps	%xmm0, %xmm3
    000006c4: 	shufps	$0xff, %xmm0, %xmm0
    000006c8: 	addss	%xmm5, %xmm3
    000006cc: 	movups	-0x40(%rax), %xmm5
    000006d0: 	movaps	%xmm5, %xmm7
    000006d3: 	addss	%xmm0, %xmm3
    000006d7: 	movups	-0x30(%rax), %xmm0
    000006db: 	shufps	$0x88, %xmm0, %xmm7
    000006df: 	shufps	$0xdd, %xmm0, %xmm5
    000006e3: 	movups	-0x10(%rax), %xmm0
    000006e7: 	paddq	DATAat0x2d9c0(%rip), %xmm13
    000006f0: 	shufps	$0x88, %xmm0, %xmm11
    000006f5: 	shufps	$0xdd, %xmm0, %xmm10
    000006fa: 	movaps	%xmm5, %xmm0
    000006fd: 	shufps	$0xdd, %xmm10, %xmm5
    00000702: 	shufps	$0x88, %xmm10, %xmm0
    00000707: 	mulps	%xmm12, %xmm0
    0000070b: 	movaps	%xmm7, %xmm12
    0000070f: 	shufps	$0xdd, %xmm11, %xmm7
    00000714: 	shufps	$0x88, %xmm11, %xmm12
    00000719: 	mulps	%xmm12, %xmm9
    0000071d: 	mulps	%xmm8, %xmm7
    00000721: 	mulps	%xmm6, %xmm5
    00000724: 	addps	%xmm9, %xmm0
    00000728: 	addps	%xmm7, %xmm0
    0000072b: 	addps	%xmm5, %xmm0
    0000072e: 	addss	%xmm0, %xmm4
    00000732: 	movaps	%xmm0, %xmm5
    00000735: 	shufps	$0x55, %xmm0, %xmm5
    00000739: 	addss	%xmm4, %xmm5
    0000073d: 	movaps	%xmm0, %xmm4
    00000740: 	unpckhps	%xmm0, %xmm4
    00000743: 	shufps	$0xff, %xmm0, %xmm0
    00000747: 	addss	%xmm5, %xmm4
    0000074b: 	addss	%xmm0, %xmm4
    0000074f: 	cmpq	%r12, %r11
    00000752: 	jb	.Ltmp201 # Offset: 1874
    00000758: 	movhlps	%xmm13, %xmm6
    0000075c: 	movq	0x20(%rsp), %r12
    00000761: 	movq	0x70(%rsp), %rsi
    00000766: 	movq	%xmm6, %rax
    0000076b: 	cmpq	%rsi, 0x60(%rsp)
    00000770: 	je	.Ltmp202 # Offset: 1904
    00000776: 	movq	0x80(%rsp), %r11
    0000077e: 	movq	-0x78(%rsp), %rax
    00000783: 	movq	0x78(%rsp), %rdx
    00000788: 	movq	0x10(%rsp), %r9
    0000078d: 	addq	%r11, %rax
    00000790: 	movq	0x88(%rsp), %r10
    00000798: 	leaq	(%r15,%rax,4), %r8
    0000079c: 	movq	-0x60(%rsp), %rax
    000007a1: 	addq	%r11, %rax
    000007a4: 	leaq	(%r15,%rax,4), %rdi
    000007a8: 	movq	-0x68(%rsp), %rax
    000007ad: 	addq	%r11, %rax
    000007b0: 	leaq	(%r15,%rax,4), %rsi
    000007b4: 	movq	-0x70(%rsp), %rax
    000007b9: 	addq	%r11, %rax
    000007bc: 	leaq	(%r15,%rax,4), %rcx
    000007c0: 	movq	%r11, %rax
    000007c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp203:
    000007c8: 	movss	(%rdx,%r10,4), %xmm8
    000007ce: 	movss	(%rdx,%r14,4), %xmm0
    000007d4: 	addq	$0x4, %rax
    000007d8: 	addq	$0x10, %r8
    000007dc: 	movss	(%rdx), %xmm7
    000007e0: 	addq	$0x10, %rdi
    000007e4: 	addq	$0x10, %rsi
    000007e8: 	addq	$0x10, %rcx
    000007ec: 	movss	-0xc(%r8), %xmm5
    000007f2: 	movss	-0x10(%r8), %xmm9
    000007f8: 	movss	(%rdx,%r12,4), %xmm6
    000007fe: 	addq	%r13, %rdx
    00000801: 	mulss	%xmm8, %xmm9
    00000806: 	mulss	%xmm0, %xmm5
    0000080a: 	addss	%xmm9, %xmm5
    0000080f: 	movss	-0x8(%r8), %xmm9
    00000815: 	mulss	%xmm7, %xmm9
    0000081a: 	addss	%xmm9, %xmm5
    0000081f: 	movss	-0x4(%r8), %xmm9
    00000825: 	mulss	%xmm6, %xmm9
    0000082a: 	addss	%xmm9, %xmm5
    0000082f: 	movss	-0x10(%rdi), %xmm9
    00000835: 	mulss	%xmm8, %xmm9
    0000083a: 	addss	%xmm5, %xmm1
    0000083e: 	movss	-0xc(%rdi), %xmm5
    00000843: 	mulss	%xmm0, %xmm5
    00000847: 	addss	%xmm9, %xmm5
    0000084c: 	movss	-0x8(%rdi), %xmm9
    00000852: 	mulss	%xmm7, %xmm9
    00000857: 	addss	%xmm9, %xmm5
    0000085c: 	movss	-0x4(%rdi), %xmm9
    00000862: 	mulss	%xmm6, %xmm9
    00000867: 	addss	%xmm9, %xmm5
    0000086c: 	movss	-0x10(%rsi), %xmm9
    00000872: 	mulss	%xmm8, %xmm9
    00000877: 	addss	%xmm5, %xmm2
    0000087b: 	movss	-0xc(%rsi), %xmm5
    00000880: 	mulss	-0x10(%rcx), %xmm8
    00000886: 	mulss	%xmm0, %xmm5
    0000088a: 	mulss	-0xc(%rcx), %xmm0
    0000088f: 	addss	%xmm9, %xmm5
    00000894: 	movss	-0x8(%rsi), %xmm9
    0000089a: 	addss	%xmm8, %xmm0
    0000089f: 	mulss	%xmm7, %xmm9
    000008a4: 	mulss	-0x8(%rcx), %xmm7
    000008a9: 	addss	%xmm9, %xmm5
    000008ae: 	movss	-0x4(%rsi), %xmm9
    000008b4: 	addss	%xmm7, %xmm0
    000008b8: 	mulss	%xmm6, %xmm9
    000008bd: 	mulss	-0x4(%rcx), %xmm6
    000008c2: 	addss	%xmm9, %xmm5
    000008c7: 	addss	%xmm6, %xmm0
    000008cb: 	addss	%xmm5, %xmm3
    000008cf: 	addss	%xmm0, %xmm4
    000008d3: 	cmpq	%rax, %r9
    000008d6: 	ja	.Ltmp203 # Offset: 2262
.Ltmp202:
    000008dc: 	movq	0x18(%rsp), %rdi
    000008e1: 	cmpq	%rax, %rdi
    000008e4: 	jbe	.Ltmp204 # Offset: 2276
    000008ea: 	movq	%rdi, %rdx
    000008ed: 	subq	%rax, %rdx
    000008f0: 	leaq	-0x1(%rdx), %rcx
    000008f4: 	cmpq	$0x2, %rcx
    000008f8: 	jbe	.Ltmp205 # Offset: 2296
    000008fe: 	movq	-0x50(%rsp), %rdi
    00000903: 	movq	%r12, %rcx
    00000906: 	movq	0x8(%rsp), %r11
    0000090b: 	imulq	%rax, %rcx
    0000090f: 	addq	-0x58(%rsp), %rcx
    00000914: 	leaq	(%rdi,%rcx,4), %rcx
    00000918: 	leaq	(%rcx,%r11), %rsi
    0000091c: 	leaq	(%rsi,%r11), %rdi
    00000920: 	movss	(%rsi), %xmm6
    00000924: 	movq	%rdx, %rsi
    00000927: 	movss	(%rdi,%r11), %xmm5
    0000092d: 	movss	(%rdi), %xmm0
    00000931: 	andq	$-0x4, %rsi
    00000935: 	movq	-0x78(%rsp), %rdi
    0000093a: 	unpcklps	%xmm5, %xmm0
    0000093d: 	movss	(%rcx), %xmm5
    00000941: 	leaq	(%rax,%rdi), %rcx
    00000945: 	movq	-0x60(%rsp), %rdi
    0000094a: 	unpcklps	%xmm6, %xmm5
    0000094d: 	movlhps	%xmm0, %xmm5
    00000950: 	movups	(%r15,%rcx,4), %xmm0
    00000955: 	leaq	(%rax,%rdi), %rcx
    00000959: 	movq	-0x68(%rsp), %rdi
    0000095e: 	mulps	%xmm5, %xmm0
    00000961: 	addss	%xmm0, %xmm1
    00000965: 	movaps	%xmm0, %xmm6
    00000968: 	shufps	$0x55, %xmm0, %xmm6
    0000096c: 	addss	%xmm1, %xmm6
    00000970: 	movaps	%xmm0, %xmm1
    00000973: 	unpckhps	%xmm0, %xmm1
    00000976: 	shufps	$0xff, %xmm0, %xmm0
    0000097a: 	addss	%xmm6, %xmm1
    0000097e: 	addss	%xmm0, %xmm1
    00000982: 	movups	(%r15,%rcx,4), %xmm0
    00000987: 	leaq	(%rax,%rdi), %rcx
    0000098b: 	movq	-0x70(%rsp), %rdi
    00000990: 	mulps	%xmm5, %xmm0
    00000993: 	addss	%xmm0, %xmm2
    00000997: 	movaps	%xmm0, %xmm6
    0000099a: 	shufps	$0x55, %xmm0, %xmm6
    0000099e: 	addss	%xmm2, %xmm6
    000009a2: 	movaps	%xmm0, %xmm2
    000009a5: 	unpckhps	%xmm0, %xmm2
    000009a8: 	shufps	$0xff, %xmm0, %xmm0
    000009ac: 	addss	%xmm6, %xmm2
    000009b0: 	addss	%xmm0, %xmm2
    000009b4: 	movups	(%r15,%rcx,4), %xmm0
    000009b9: 	leaq	(%rax,%rdi), %rcx
    000009bd: 	mulps	%xmm5, %xmm0
    000009c0: 	addss	%xmm0, %xmm3
    000009c4: 	movaps	%xmm0, %xmm6
    000009c7: 	shufps	$0x55, %xmm0, %xmm6
    000009cb: 	addss	%xmm3, %xmm6
    000009cf: 	movaps	%xmm0, %xmm3
    000009d2: 	unpckhps	%xmm0, %xmm3
    000009d5: 	shufps	$0xff, %xmm0, %xmm0
    000009d9: 	addss	%xmm6, %xmm3
    000009dd: 	addss	%xmm0, %xmm3
    000009e1: 	movups	(%r15,%rcx,4), %xmm0
    000009e6: 	leaq	(%rax,%rsi), %rcx
    000009ea: 	mulps	%xmm5, %xmm0
    000009ed: 	addss	%xmm0, %xmm4
    000009f1: 	movaps	%xmm0, %xmm5
    000009f4: 	shufps	$0x55, %xmm0, %xmm5
    000009f8: 	addss	%xmm4, %xmm5
    000009fc: 	movaps	%xmm0, %xmm4
    000009ff: 	unpckhps	%xmm0, %xmm4
    00000a02: 	shufps	$0xff, %xmm0, %xmm0
    00000a06: 	addss	%xmm5, %xmm4
    00000a0a: 	addss	%xmm0, %xmm4
    00000a0e: 	cmpq	%rdx, %rsi
    00000a11: 	je	.Ltmp204 # Offset: 2577
.Ltmp218:
    00000a17: 	subq	%rsi, %rdx
    00000a1a: 	cmpq	$0x1, %rdx
    00000a1e: 	je	.Ltmp206 # Offset: 2590
    00000a24: 	addq	%rax, %rsi
    00000a27: 	movq	-0x50(%rsp), %rdi
    00000a2c: 	movq	%rsi, %rax
    00000a2f: 	imulq	%r12, %rax
    00000a33: 	addq	-0x58(%rsp), %rax
    00000a38: 	leaq	(%rdi,%rax,4), %rax
    00000a3c: 	movq	0x8(%rsp), %rdi
    00000a41: 	movss	(%rax), %xmm5
    00000a45: 	movss	(%rax,%rdi), %xmm0
    00000a4a: 	movq	-0x78(%rsp), %rax
    00000a4f: 	addq	%rsi, %rax
    00000a52: 	unpcklps	%xmm0, %xmm5
    00000a55: 	movq	(%r15,%rax,4), %xmm0
    00000a5b: 	movq	-0x60(%rsp), %rax
    00000a60: 	mulps	%xmm5, %xmm0
    00000a63: 	addq	%rsi, %rax
    00000a66: 	addss	%xmm0, %xmm1
    00000a6a: 	shufps	$0xe5, %xmm0, %xmm0
    00000a6e: 	addss	%xmm0, %xmm1
    00000a72: 	movq	(%r15,%rax,4), %xmm0
    00000a78: 	movq	-0x68(%rsp), %rax
    00000a7d: 	mulps	%xmm5, %xmm0
    00000a80: 	addq	%rsi, %rax
    00000a83: 	addq	-0x70(%rsp), %rsi
    00000a88: 	addss	%xmm0, %xmm2
    00000a8c: 	shufps	$0xe5, %xmm0, %xmm0
    00000a90: 	addss	%xmm0, %xmm2
    00000a94: 	movq	(%r15,%rax,4), %xmm0
    00000a9a: 	movq	%rdx, %rax
    00000a9d: 	andq	$-0x2, %rax
    00000aa1: 	mulps	%xmm5, %xmm0
    00000aa4: 	addq	%rax, %rcx
    00000aa7: 	addss	%xmm0, %xmm3
    00000aab: 	shufps	$0xe5, %xmm0, %xmm0
    00000aaf: 	addss	%xmm0, %xmm3
    00000ab3: 	movq	(%r15,%rsi,4), %xmm0
    00000ab9: 	mulps	%xmm5, %xmm0
    00000abc: 	addss	%xmm0, %xmm4
    00000ac0: 	shufps	$0xe5, %xmm0, %xmm0
    00000ac4: 	addss	%xmm0, %xmm4
    00000ac8: 	cmpq	%rdx, %rax
    00000acb: 	je	.Ltmp204 # Offset: 2763
.Ltmp206:
    00000acd: 	movq	-0x50(%rsp), %rdi
    00000ad2: 	movq	%r12, %rax
    00000ad5: 	imulq	%rcx, %rax
    00000ad9: 	addq	-0x58(%rsp), %rax
    00000ade: 	movss	(%rdi,%rax,4), %xmm0
    00000ae3: 	movq	-0x78(%rsp), %rax
    00000ae8: 	addq	%rcx, %rax
    00000aeb: 	movss	(%r15,%rax,4), %xmm5
    00000af1: 	movq	-0x60(%rsp), %rax
    00000af6: 	mulss	%xmm0, %xmm5
    00000afa: 	addq	%rcx, %rax
    00000afd: 	addss	%xmm5, %xmm1
    00000b01: 	movss	(%r15,%rax,4), %xmm5
    00000b07: 	movq	-0x68(%rsp), %rax
    00000b0c: 	mulss	%xmm0, %xmm5
    00000b10: 	addq	%rcx, %rax
    00000b13: 	addq	-0x70(%rsp), %rcx
    00000b18: 	addss	%xmm5, %xmm2
    00000b1c: 	movss	(%r15,%rax,4), %xmm5
    00000b22: 	mulss	%xmm0, %xmm5
    00000b26: 	mulss	(%r15,%rcx,4), %xmm0
    00000b2c: 	addss	%xmm5, %xmm3
    00000b30: 	addss	%xmm0, %xmm4
.Ltmp204:
    00000b34: 	movq	-0x30(%rsp), %rax
    00000b39: 	movq	-0x28(%rsp), %rdx
    00000b3e: 	movq	-0x40(%rsp), %rdi
    00000b43: 	movq	-0x38(%rsp), %rsi
    00000b48: 	addss	(%rax), %xmm2
    00000b4c: 	addss	(%rdx), %xmm1
    00000b50: 	addss	(%rdi), %xmm3
    00000b54: 	addss	(%rsi), %xmm4
    00000b58: 	addq	$0x4, -0x48(%rsp)
    00000b5e: 	movq	-0x48(%rsp), %rcx
    00000b63: 	movss	%xmm1, (%rdx)
    00000b67: 	addq	%r13, %rdx
    00000b6a: 	movss	%xmm2, (%rax)
    00000b6e: 	addq	%r13, %rax
    00000b71: 	movq	%rax, -0x30(%rsp)
    00000b76: 	movq	-0x70(%rsp), %rax
    00000b7b: 	movss	%xmm3, (%rdi)
    00000b7f: 	addq	%r13, %rdi
    00000b82: 	movss	%xmm4, (%rsi)
    00000b86: 	addq	%r12, %rax
    00000b89: 	addq	%r13, %rsi
    00000b8c: 	addq	%r13, -0x8(%rsp)
    00000b91: 	addq	%r13, -0x18(%rsp)
    00000b96: 	addq	%r13, -0x10(%rsp)
    00000b9b: 	addq	%r13, (%rsp)
    00000b9f: 	movq	%rdx, -0x28(%rsp)
    00000ba4: 	movq	%rdi, -0x40(%rsp)
    00000ba9: 	movq	%rsi, -0x38(%rsp)
    00000bae: 	movq	%rax, -0x78(%rsp)
    00000bb3: 	cmpq	0x30(%rsp), %rcx
    00000bb8: 	jb	.Ltmp207 # Offset: 3000
.Ltmp220:
    00000bbe: 	movq	-0x48(%rsp), %rcx
    00000bc3: 	cmpq	%rcx, 0x90(%rsp)
    00000bcb: 	jbe	.Ltmp208 # Offset: 3019
    00000bd1: 	movq	%rcx, %rdi
    00000bd4: 	movq	0x18(%rsp), %rax
    00000bd9: 	movq	%rbx, -0x70(%rsp)
    00000bde: 	imulq	%r12, %rdi
    00000be2: 	movq	%r14, -0x68(%rsp)
    00000be7: 	movq	0x10(%rsp), %r8
    00000bec: 	movq	0x8(%rsp), %r9
    00000bf1: 	movq	0xa8(%rsp), %r10
    00000bf9: 	movq	%rbp, -0x78(%rsp)
    00000bfe: 	movq	%rcx, %rbp
    00000c01: 	movq	0xb0(%rsp), %r11
    00000c09: 	movq	0xa0(%rsp), %rbx
    00000c11: 	addq	%rdi, %rax
    00000c14: 	movq	-0x20(%rsp), %r14
    00000c19: 	leaq	(%r15,%rax,4), %rsi
.Ltmp213:
    00000c1d: 	cmpq	%r14, %r8
    00000c20: 	jbe	.Ltmp209 # Offset: 3104
    00000c26: 	movq	0x98(%rsp), %rax
    00000c2e: 	pxor	%xmm4, %xmm4
    00000c32: 	movq	%r14, %rcx
    00000c35: 	movaps	%xmm4, %xmm3
    00000c38: 	movaps	%xmm4, %xmm2
    00000c3b: 	movaps	%xmm4, %xmm0
    00000c3e: 	leaq	(%rax,%rsi), %rdx
    00000c42: 	movq	0x28(%rsp), %rax
    00000c47: 	nopw	(%rax,%rax) # Size: 9
.Ltmp210:
    00000c50: 	movss	(%rax), %xmm1
    00000c54: 	mulss	(%rdx), %xmm1
    00000c58: 	addq	$0x4, %rcx
    00000c5c: 	addq	$0x10, %rdx
    00000c60: 	addss	%xmm1, %xmm0
    00000c64: 	movss	(%rax,%r12,4), %xmm1
    00000c6a: 	mulss	-0xc(%rdx), %xmm1
    00000c6f: 	addss	%xmm1, %xmm2
    00000c73: 	movss	(%rax,%r10,4), %xmm1
    00000c79: 	mulss	-0x8(%rdx), %xmm1
    00000c7e: 	addss	%xmm1, %xmm3
    00000c82: 	movss	(%rax,%r11,4), %xmm1
    00000c88: 	mulss	-0x4(%rdx), %xmm1
    00000c8d: 	addq	%r13, %rax
    00000c90: 	addss	%xmm1, %xmm4
    00000c94: 	cmpq	%r8, %rcx
    00000c97: 	jb	.Ltmp210 # Offset: 3223
.Ltmp219:
    00000c99: 	cmpq	%rcx, 0x18(%rsp)
    00000c9e: 	jbe	.Ltmp211 # Offset: 3230
    00000ca0: 	movq	-0x50(%rsp), %rdx
    00000ca5: 	movq	%r12, %rax
    00000ca8: 	imulq	%rcx, %rax
    00000cac: 	addq	%rdi, %rcx
    00000caf: 	addq	-0x58(%rsp), %rax
    00000cb4: 	leaq	(%rdx,%rax,4), %rax
    00000cb8: 	leaq	(%r15,%rcx,4), %rdx
    00000cbc: 	nopl	(%rax) # Size: 4
.Ltmp212:
    00000cc0: 	movss	(%rax), %xmm1
    00000cc4: 	mulss	(%rdx), %xmm1
    00000cc8: 	addq	$0x4, %rdx
    00000ccc: 	addq	%r9, %rax
    00000ccf: 	addss	%xmm1, %xmm0
    00000cd3: 	cmpq	%rdx, %rsi
    00000cd6: 	jne	.Ltmp212 # Offset: 3286
.Ltmp211:
    00000cd8: 	addss	%xmm0, %xmm2
    00000cdc: 	addq	$0x1, %rbp
    00000ce0: 	addq	%r9, %rsi
    00000ce3: 	addss	%xmm3, %xmm2
    00000ce7: 	addss	%xmm4, %xmm2
    00000ceb: 	addss	(%rbx,%rdi,4), %xmm2
    00000cf0: 	movss	%xmm2, (%rbx,%rdi,4)
    00000cf5: 	addq	%r12, %rdi
    00000cf8: 	cmpq	%rbp, 0x90(%rsp)
    00000d00: 	jne	.Ltmp213 # Offset: 3328
    00000d06: 	movq	-0x78(%rsp), %rbp
    00000d0b: 	movq	-0x70(%rsp), %rbx
    00000d10: 	movq	-0x68(%rsp), %r14
.Ltmp208:
    00000d15: 	addq	$0x1, -0x58(%rsp)
    00000d1b: 	movq	-0x58(%rsp), %rax
    00000d20: 	addq	$0x4, 0xa0(%rsp)
    00000d29: 	addq	$0x4, 0x28(%rsp)
    00000d2f: 	addq	$0x4, 0x48(%rsp)
    00000d35: 	addq	$0x4, 0x40(%rsp)
    00000d3b: 	addq	$0x4, 0x50(%rsp)
    00000d41: 	cmpq	%rax, %r12
    00000d44: 	jne	.Ltmp214 # Offset: 3396
    00000d4a: 	movq	0x180(%rsp), %rdi
    00000d52: 	movq	%rbp, %r14
    00000d55: 	movq	%r15, %rbp
    00000d58: 	movq	0x130(%rsp), %rax
    00000d60: 	subq	$-0x80, 0x58(%rsp)
    00000d66: 	addq	%rdi, %rax
    00000d69: 	movq	%rax, 0x28(%rsp)
    00000d6e: 	movq	0x138(%rsp), %rax
    00000d76: 	addq	%rdi, %rax
    00000d79: 	movq	%rax, 0x40(%rsp)
    00000d7e: 	cmpq	%r12, 0x118(%rsp)
    00000d86: 	jb	.Ltmp215 # Offset: 3462
    00000d8c: 	movq	%r12, %rdi
    00000d8f: 	movq	%rbx, %rax
    00000d92: 	movq	%r13, %r12
    00000d95: 	movq	0x158(%rsp), %rsi
    00000d9d: 	movq	%rdi, %r13
    00000da0: 	movq	%rax, %rbp
    00000da3: 	movq	%r15, %rbx
    00000da6: 	movq	0x150(%rsp), %rdi
    00000dae: 	movq	%r13, %rax
    00000db1: 	addq	%rdi, 0xb8(%rsp)
    00000db9: 	shlq	$0x6, %rax
    00000dbd: 	addq	%rdi, 0xc8(%rsp)
    00000dc5: 	subq	%r13, %rax
    00000dc8: 	leaq	(%rsi,%rax,2), %rax
    00000dcc: 	movq	0x120(%rsp), %rsi
    00000dd4: 	cmpq	%rsi, 0x110(%rsp)
    00000ddc: 	jb	.Ltmp216 # Offset: 3548
.Ltmp197:
    00000de2: 	addq	$0x190, %rsp
    00000de9: 	popq	%rbx
    00000dea: 	popq	%rbp
    00000deb: 	popq	%r12
    00000ded: 	popq	%r13
    00000def: 	popq	%r14
    00000df1: 	popq	%r15
    00000df3: 	retq # Offset: 3571
    00000df4: 	nopl	(%rax) # Size: 4
.Ltmp200:
    00000df8: 	pxor	%xmm4, %xmm4
    00000dfc: 	movq	%rdi, %rax
    00000dff: 	movq	(%rsp), %r8
    00000e03: 	movq	-0x10(%rsp), %rdi
    00000e08: 	movq	-0x18(%rsp), %rsi
    00000e0d: 	movq	-0x8(%rsp), %rcx
    00000e12: 	movaps	%xmm4, %xmm3
    00000e15: 	movaps	%xmm4, %xmm2
    00000e18: 	movq	0x28(%rsp), %rdx
    00000e1d: 	movq	0x10(%rsp), %r9
    00000e22: 	movaps	%xmm4, %xmm1
    00000e25: 	movq	0xa8(%rsp), %r10
    00000e2d: 	movq	0xb0(%rsp), %r11
    00000e35: 	nopl	(%rax) # Size: 3
.Ltmp217:
    00000e38: 	movss	(%rdx), %xmm8
    00000e3d: 	movss	(%rdx,%r12,4), %xmm0
    00000e43: 	addq	$0x4, %rax
    00000e47: 	addq	$0x10, %rcx
    00000e4b: 	movss	-0xc(%rcx), %xmm5
    00000e50: 	movss	-0x10(%rcx), %xmm9
    00000e56: 	addq	$0x10, %rsi
    00000e5a: 	addq	$0x10, %rdi
    00000e5e: 	movss	(%rdx,%r10,4), %xmm7
    00000e64: 	movss	(%rdx,%r11,4), %xmm6
    00000e6a: 	addq	$0x10, %r8
    00000e6e: 	addq	%r13, %rdx
    00000e71: 	mulss	%xmm8, %xmm9
    00000e76: 	mulss	%xmm0, %xmm5
    00000e7a: 	addss	%xmm9, %xmm5
    00000e7f: 	movss	-0x8(%rcx), %xmm9
    00000e85: 	mulss	%xmm7, %xmm9
    00000e8a: 	addss	%xmm9, %xmm5
    00000e8f: 	movss	-0x4(%rcx), %xmm9
    00000e95: 	mulss	%xmm6, %xmm9
    00000e9a: 	addss	%xmm9, %xmm5
    00000e9f: 	movss	-0x10(%rsi), %xmm9
    00000ea5: 	mulss	%xmm8, %xmm9
    00000eaa: 	addss	%xmm5, %xmm1
    00000eae: 	movss	-0xc(%rsi), %xmm5
    00000eb3: 	mulss	%xmm0, %xmm5
    00000eb7: 	addss	%xmm9, %xmm5
    00000ebc: 	movss	-0x8(%rsi), %xmm9
    00000ec2: 	mulss	%xmm7, %xmm9
    00000ec7: 	addss	%xmm9, %xmm5
    00000ecc: 	movss	-0x4(%rsi), %xmm9
    00000ed2: 	mulss	%xmm6, %xmm9
    00000ed7: 	addss	%xmm9, %xmm5
    00000edc: 	movss	-0x10(%rdi), %xmm9
    00000ee2: 	mulss	%xmm8, %xmm9
    00000ee7: 	addss	%xmm5, %xmm2
    00000eeb: 	movss	-0xc(%rdi), %xmm5
    00000ef0: 	mulss	-0x10(%r8), %xmm8
    00000ef6: 	mulss	%xmm0, %xmm5
    00000efa: 	mulss	-0xc(%r8), %xmm0
    00000f00: 	addss	%xmm9, %xmm5
    00000f05: 	movss	-0x8(%rdi), %xmm9
    00000f0b: 	addss	%xmm8, %xmm0
    00000f10: 	mulss	%xmm7, %xmm9
    00000f15: 	mulss	-0x8(%r8), %xmm7
    00000f1b: 	addss	%xmm9, %xmm5
    00000f20: 	movss	-0x4(%rdi), %xmm9
    00000f26: 	addss	%xmm7, %xmm0
    00000f2a: 	mulss	%xmm6, %xmm9
    00000f2f: 	mulss	-0x4(%r8), %xmm6
    00000f35: 	addss	%xmm9, %xmm5
    00000f3a: 	addss	%xmm6, %xmm0
    00000f3e: 	addss	%xmm5, %xmm3
    00000f42: 	addss	%xmm0, %xmm4
    00000f46: 	cmpq	%rax, %r9
    00000f49: 	ja	.Ltmp217 # Offset: 3913
    00000f4f: 	jmp	.Ltmp202 # Offset: 3919
    00000f54: 	nopl	(%rax) # Size: 4
.Ltmp199:
    00000f58: 	pxor	%xmm4, %xmm4
    00000f5c: 	movq	%rdi, %rax
    00000f5f: 	movaps	%xmm4, %xmm3
    00000f62: 	movaps	%xmm4, %xmm2
    00000f65: 	movaps	%xmm4, %xmm1
    00000f68: 	jmp	.Ltmp202 # Offset: 3944
.Ltmp205:
    00000f6d: 	movq	%rax, %rcx
    00000f70: 	xorl	%esi, %esi
    00000f72: 	jmp	.Ltmp218 # Offset: 3954
.Ltmp209:
    00000f77: 	pxor	%xmm4, %xmm4
    00000f7b: 	movq	%r14, %rcx
    00000f7e: 	movaps	%xmm4, %xmm3
    00000f81: 	movaps	%xmm4, %xmm2
    00000f84: 	movaps	%xmm4, %xmm0
    00000f87: 	jmp	.Ltmp219 # Offset: 3975
.Ltmp198:
    00000f8c: 	movq	%rsi, -0x48(%rsp)
    00000f91: 	jmp	.Ltmp220 # Offset: 3985
DWARF CFI Instructions:
    <empty>
End of Function "_ZN28matmul_IJK_blocked_unrolled3IfEclEPKfS2_Pfmm.isra.0/1(*2)"

Binary Function "_ZN28matmul_IJK_blocked_unrolled2IfEclEPKfS2_Pfmm.isra.0/1(*2)" after disassembly {
  All names   : _ZN28matmul_IJK_blocked_unrolled2IfEclEPKfS2_Pfmm.isra.0/1
                _ZN28matmul_IJK_blocked_unrolled2IfEclEPKfS2_Pfmm.isra.0/matrix_multiply.cpp/1
  Number      : 19
  State       : disassembled
  Address     : 0x99f0
  Size        : 0x551
  MaxSize     : 0x560
  Offset      : 0x99f0
  Section     : .text
  Orc Section : .local.text._ZN28matmul_IJK_blocked_unrolled2IfEclEPKfS2_Pfmm.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB018:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	addq	$-0x80, %rsp
    0000000e: 	movq	%rdi, -0x60(%rsp)
    00000013: 	movq	%rsi, -0x28(%rsp)
    00000018: 	movq	%rdx, 0x8(%rsp)
    0000001d: 	movq	%rcx, 0x50(%rsp)
    00000022: 	testq	%rcx, %rcx
    00000025: 	je	.Ltmp221 # Offset: 37
    0000002b: 	leaq	-0x3(%r8), %rax
    0000002f: 	movq	%rax, -0x8(%rsp)
    00000034: 	testq	%r8, %r8
    00000037: 	je	.Ltmp221 # Offset: 55
    0000003d: 	movq	%r8, %rax
    00000040: 	leaq	(%r8,%r8), %r14
    00000044: 	pxor	%xmm4, %xmm4
    00000048: 	movq	%r8, %r12
    0000004b: 	shlq	$0x7, %rax
    0000004f: 	leaq	(%r14,%r8), %r15
    00000053: 	shlq	$0x4, %r12
    00000057: 	movq	%r14, %r13
    0000005a: 	movq	%rax, 0x30(%rsp)
    0000005f: 	movq	%r8, %rax
    00000062: 	movq	%r12, %r14
    00000065: 	leaq	(,%r8,4), %rbx
    0000006d: 	movq	$0x0, 0x20(%rsp)
    00000076: 	shlq	$0x9, %rax
    0000007a: 	movq	%rax, 0x28(%rsp)
    0000007f: 	leaq	(%rsi,%r8,8), %rax
    00000083: 	movq	$0x0, -0x10(%rsp)
    0000008c: 	movq	$0x0, 0x10(%rsp)
    00000095: 	movq	%rax, 0x58(%rsp)
    0000009a: 	movq	%r15, %rax
    0000009d: 	movq	%rbx, %r15
    000000a0: 	movq	%r8, %rbx
    000000a3: 	movq	%rax, %r12
.Ltmp237:
    000000a6: 	movq	0x10(%rsp), %rax
    000000ab: 	movq	0x50(%rsp), %rsi
    000000b0: 	movq	$0x0, 0x48(%rsp)
    000000b9: 	movq	$0x0, 0x18(%rsp)
    000000c2: 	movq	%rax, -0x20(%rsp)
    000000c7: 	subq	$-0x80, %rax
    000000cb: 	cmpq	%rsi, %rax
    000000ce: 	movq	%rax, 0x10(%rsp)
    000000d3: 	cmovbeq	%rax, %rsi
    000000d7: 	movq	-0x28(%rsp), %rax
    000000dc: 	movq	%rax, 0x40(%rsp)
    000000e1: 	movq	0x58(%rsp), %rax
    000000e6: 	movq	%rsi, -0x70(%rsp)
    000000eb: 	movq	%rax, 0x38(%rsp)
    000000f0: 	movq	-0x60(%rsp), %rax
    000000f5: 	addq	0x20(%rsp), %rax
    000000fa: 	movq	%rax, 0x60(%rsp)
.Ltmp236:
    000000ff: 	movq	0x18(%rsp), %rax
    00000104: 	movq	%rax, -0x78(%rsp)
    00000109: 	movq	%rax, %rsi
    0000010c: 	subq	$-0x80, %rax
    00000110: 	cmpq	%rbx, %rax
    00000113: 	movq	%rax, 0x18(%rsp)
    00000118: 	cmovaq	%rbx, %rax
    0000011c: 	cmpq	$0x0, -0x8(%rsp)
    00000122: 	movq	%rax, -0x30(%rsp)
    00000127: 	leaq	-0x3(%rax), %r9
    0000012b: 	je	.Ltmp222 # Offset: 299
    00000131: 	movq	0x8(%rsp), %rdi
    00000136: 	addq	0x20(%rsp), %rdi
    0000013b: 	movq	%r12, 0x70(%rsp)
    00000140: 	movq	%rdi, -0x18(%rsp)
    00000145: 	movq	0x40(%rsp), %rdi
    0000014a: 	movq	$0x0, -0x68(%rsp)
    00000153: 	leaq	(%r15,%rdi), %rcx
    00000157: 	movq	%rdi, -0x38(%rsp)
    0000015c: 	movq	%rcx, -0x40(%rsp)
    00000161: 	movq	0x38(%rsp), %rcx
    00000166: 	movq	%r15, -0x58(%rsp)
    0000016b: 	leaq	(%r15,%rcx), %rdx
    0000016f: 	movq	%rcx, -0x48(%rsp)
    00000174: 	movq	-0x28(%rsp), %r15
    00000179: 	movq	%rdx, -0x50(%rsp)
    0000017e: 	movq	0x60(%rsp), %rdx
    00000183: 	movq	%r13, 0x68(%rsp)
    00000188: 	movq	%rax, %r13
    0000018b: 	leaq	(%rdx,%rsi,4), %rsi
    0000018f: 	movq	%rsi, (%rsp)
    00000193: 	nopl	(%rax,%rax) # Size: 5
.Ltmp228:
    00000198: 	movq	-0x20(%rsp), %rsi
    0000019d: 	cmpq	%rsi, -0x70(%rsp)
    000001a2: 	jbe	.Ltmp223 # Offset: 418
    000001a8: 	movq	-0x10(%rsp), %r10
    000001ad: 	movq	(%rsp), %r12
    000001b1: 	movq	%rsi, %rbp
    000001b4: 	movq	-0x18(%rsp), %r11
    000001b9: 	nopl	(%rax) # Size: 7
.Ltmp227:
    000001c0: 	movq	-0x78(%rsp), %rax
    000001c5: 	pxor	%xmm3, %xmm3
    000001c9: 	cmpq	%r9, -0x78(%rsp)
    000001ce: 	jae	.Ltmp224 # Offset: 462
    000001d0: 	movq	-0x50(%rsp), %r8
    000001d5: 	movq	-0x48(%rsp), %rdi
    000001da: 	movq	%r12, %rdx
    000001dd: 	pxor	%xmm3, %xmm3
    000001e1: 	movq	-0x40(%rsp), %rsi
    000001e6: 	movq	-0x38(%rsp), %rcx
    000001eb: 	movq	-0x78(%rsp), %rax
.Ltmp225:
    000001f0: 	movups	(%rdx), %xmm0
    000001f3: 	movups	(%rsi), %xmm6
    000001f6: 	addq	$0x4, %rax
    000001fa: 	addq	$0x10, %rdx
    000001fe: 	movups	(%rcx), %xmm7
    00000201: 	movups	(%rdi), %xmm5
    00000204: 	addq	%r14, %rcx
    00000207: 	addq	%r14, %rsi
    0000020a: 	movaps	%xmm0, %xmm1
    0000020d: 	movaps	%xmm0, %xmm2
    00000210: 	addq	%r14, %rdi
    00000213: 	shufps	$0x55, %xmm0, %xmm1
    00000217: 	shufps	$0x0, %xmm0, %xmm2
    0000021b: 	mulps	%xmm6, %xmm1
    0000021e: 	movups	(%r8), %xmm6
    00000222: 	mulps	%xmm7, %xmm2
    00000225: 	addq	%r14, %r8
    00000228: 	addps	%xmm2, %xmm1
    0000022b: 	movaps	%xmm0, %xmm2
    0000022e: 	shufps	$0xaa, %xmm0, %xmm2
    00000232: 	mulps	%xmm5, %xmm2
    00000235: 	shufps	$0xff, %xmm0, %xmm0
    00000239: 	mulps	%xmm6, %xmm0
    0000023c: 	addps	%xmm2, %xmm1
    0000023f: 	addps	%xmm1, %xmm0
    00000242: 	addps	%xmm0, %xmm3
    00000245: 	cmpq	%r9, %rax
    00000248: 	jb	.Ltmp225 # Offset: 584
.Ltmp224:
    0000024a: 	cmpq	%rax, %r13
    0000024d: 	jbe	.Ltmp226 # Offset: 589
    00000253: 	movq	%rbx, %rdx
    00000256: 	movq	-0x68(%rsp), %r8
    0000025b: 	movq	-0x60(%rsp), %rdi
    00000260: 	leaq	(%rax,%r10), %rcx
    00000264: 	imulq	%rax, %rdx
    00000268: 	movss	(%rdi,%rcx,4), %xmm1
    0000026d: 	leaq	0x1(%rax), %rcx
    00000271: 	leaq	(%r8,%rdx), %rsi
    00000275: 	shufps	$0x0, %xmm1, %xmm1
    00000279: 	movups	(%r15,%rsi,4), %xmm0
    0000027e: 	mulps	%xmm1, %xmm0
    00000281: 	addps	%xmm0, %xmm3
    00000284: 	cmpq	%rcx, %r13
    00000287: 	jbe	.Ltmp226 # Offset: 647
    00000289: 	addq	%rbx, %rdx
    0000028c: 	addq	%r10, %rcx
    0000028f: 	leaq	(%r8,%rdx), %rsi
    00000293: 	movss	(%rdi,%rcx,4), %xmm1
    00000298: 	leaq	0x2(%rax), %rcx
    0000029c: 	movups	(%r15,%rsi,4), %xmm0
    000002a1: 	shufps	$0x0, %xmm1, %xmm1
    000002a5: 	mulps	%xmm1, %xmm0
    000002a8: 	addps	%xmm0, %xmm3
    000002ab: 	cmpq	%rcx, %r13
    000002ae: 	jbe	.Ltmp226 # Offset: 686
    000002b0: 	addq	%rbx, %rdx
    000002b3: 	addq	%r10, %rcx
    000002b6: 	addq	$0x3, %rax
    000002ba: 	addq	%r8, %rdx
    000002bd: 	movss	(%rdi,%rcx,4), %xmm0
    000002c2: 	movups	(%r15,%rdx,4), %xmm7
    000002c7: 	shufps	$0x0, %xmm0, %xmm0
    000002cb: 	mulps	%xmm7, %xmm0
    000002ce: 	addps	%xmm0, %xmm3
    000002d1: 	cmpq	%rax, %r13
    000002d4: 	jbe	.Ltmp226 # Offset: 724
    000002d6: 	addq	%r10, %rax
    000002d9: 	addq	%rbx, %rdx
    000002dc: 	movups	(%r15,%rdx,4), %xmm0
    000002e1: 	movss	(%rdi,%rax,4), %xmm1
    000002e6: 	shufps	$0x0, %xmm1, %xmm1
    000002ea: 	mulps	%xmm1, %xmm0
    000002ed: 	addps	%xmm0, %xmm3
.Ltmp226:
    000002f0: 	movups	(%r11), %xmm0
    000002f4: 	movq	-0x58(%rsp), %rax
    000002f9: 	addq	$0x1, %rbp
    000002fd: 	addq	%rbx, %r10
    00000300: 	addps	%xmm3, %xmm0
    00000303: 	addq	%rax, %r12
    00000306: 	movups	%xmm0, (%r11)
    0000030a: 	addq	%rax, %r11
    0000030d: 	cmpq	%rbp, -0x70(%rsp)
    00000312: 	jne	.Ltmp227 # Offset: 786
.Ltmp223:
    00000318: 	addq	$0x4, -0x68(%rsp)
    0000031e: 	movq	-0x68(%rsp), %rax
    00000323: 	addq	$0x10, -0x18(%rsp)
    00000329: 	addq	$0x10, -0x38(%rsp)
    0000032f: 	addq	$0x10, -0x40(%rsp)
    00000335: 	addq	$0x10, -0x48(%rsp)
    0000033b: 	addq	$0x10, -0x50(%rsp)
    00000341: 	cmpq	-0x8(%rsp), %rax
    00000346: 	jb	.Ltmp228 # Offset: 838
    0000034c: 	movq	-0x58(%rsp), %r15
    00000351: 	movq	0x68(%rsp), %r13
    00000356: 	movq	0x70(%rsp), %r12
    0000035b: 	cmpq	-0x68(%rsp), %rbx
    00000360: 	jbe	.Ltmp229 # Offset: 864
.Ltmp239:
    00000366: 	movq	-0x20(%rsp), %rsi
    0000036b: 	cmpq	%rsi, -0x70(%rsp)
    00000370: 	jbe	.Ltmp229 # Offset: 880
    00000376: 	movq	-0x68(%rsp), %rsi
    0000037b: 	movq	0x48(%rsp), %rax
    00000380: 	movq	-0x28(%rsp), %rdi
    00000385: 	movq	-0x60(%rsp), %rcx
    0000038a: 	addq	%rsi, %rax
    0000038d: 	leaq	(%rdi,%rax,4), %r11
    00000391: 	movq	-0x30(%rsp), %rdi
    00000396: 	movq	-0x10(%rsp), %rax
    0000039b: 	addq	%rdi, %rax
    0000039e: 	leaq	(%rcx,%rax,4), %rax
    000003a2: 	movq	-0x78(%rsp), %rcx
    000003a7: 	movq	%r11, -0x78(%rsp)
    000003ac: 	movq	%rax, -0x58(%rsp)
    000003b1: 	movq	%rcx, %rax
    000003b4: 	movq	%rcx, %r11
    000003b7: 	subq	%rdi, %rax
    000003ba: 	leaq	(,%rax,4), %rbp
    000003c2: 	movq	%rbp, -0x68(%rsp)
    000003c7: 	movq	%rsi, %rbp
.Ltmp235:
    000003ca: 	movq	0x8(%rsp), %rax
    000003cf: 	movq	-0x58(%rsp), %rsi
    000003d4: 	movq	-0x10(%rsp), %rdi
    000003d9: 	movq	-0x20(%rsp), %r8
    000003de: 	leaq	(%rax,%rbp,4), %r10
    000003e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp234:
    000003e8: 	cmpq	%r9, %r11
    000003eb: 	jae	.Ltmp230 # Offset: 1003
    000003f1: 	movq	-0x68(%rsp), %rax
    000003f6: 	movq	%r11, %rcx
    000003f9: 	movaps	%xmm4, %xmm3
    000003fc: 	movaps	%xmm4, %xmm5
    000003ff: 	movaps	%xmm4, %xmm2
    00000402: 	movaps	%xmm4, %xmm0
    00000405: 	leaq	(%rax,%rsi), %rdx
    00000409: 	movq	-0x78(%rsp), %rax
    0000040e: 	nop # Size: 2
.Ltmp231:
    00000410: 	movss	(%rax), %xmm1
    00000414: 	mulss	(%rdx), %xmm1
    00000418: 	addq	$0x4, %rcx
    0000041c: 	addq	$0x10, %rdx
    00000420: 	addss	%xmm1, %xmm0
    00000424: 	movss	(%rax,%rbx,4), %xmm1
    00000429: 	mulss	-0xc(%rdx), %xmm1
    0000042e: 	addss	%xmm1, %xmm2
    00000432: 	movss	(%rax,%r13,4), %xmm1
    00000438: 	mulss	-0x8(%rdx), %xmm1
    0000043d: 	addss	%xmm1, %xmm5
    00000441: 	movss	(%rax,%r12,4), %xmm1
    00000447: 	mulss	-0x4(%rdx), %xmm1
    0000044c: 	addq	%r14, %rax
    0000044f: 	addss	%xmm1, %xmm3
    00000453: 	cmpq	%r9, %rcx
    00000456: 	jb	.Ltmp231 # Offset: 1110
.Ltmp238:
    00000458: 	cmpq	%rcx, -0x30(%rsp)
    0000045d: 	jbe	.Ltmp232 # Offset: 1117
    0000045f: 	movq	%rbx, %rax
    00000462: 	movq	-0x28(%rsp), %rdx
    00000467: 	imulq	%rcx, %rax
    0000046b: 	addq	%rdi, %rcx
    0000046e: 	addq	%rbp, %rax
    00000471: 	leaq	(%rdx,%rax,4), %rax
    00000475: 	movq	-0x60(%rsp), %rdx
    0000047a: 	leaq	(%rdx,%rcx,4), %rdx
    0000047e: 	nop # Size: 2
.Ltmp233:
    00000480: 	movss	(%rax), %xmm1
    00000484: 	mulss	(%rdx), %xmm1
    00000488: 	addq	$0x4, %rdx
    0000048c: 	addq	%r15, %rax
    0000048f: 	addss	%xmm1, %xmm0
    00000493: 	cmpq	%rdx, %rsi
    00000496: 	jne	.Ltmp233 # Offset: 1174
.Ltmp232:
    00000498: 	addss	%xmm0, %xmm2
    0000049c: 	addq	$0x1, %r8
    000004a0: 	addq	%r15, %rsi
    000004a3: 	addss	%xmm5, %xmm2
    000004a7: 	addss	%xmm3, %xmm2
    000004ab: 	addss	(%r10,%rdi,4), %xmm2
    000004b1: 	movss	%xmm2, (%r10,%rdi,4)
    000004b7: 	addq	%rbx, %rdi
    000004ba: 	cmpq	%r8, -0x70(%rsp)
    000004bf: 	jne	.Ltmp234 # Offset: 1215
    000004c5: 	addq	$0x1, %rbp
    000004c9: 	addq	$0x4, -0x78(%rsp)
    000004cf: 	cmpq	%rbp, %rbx
    000004d2: 	ja	.Ltmp235 # Offset: 1234
.Ltmp229:
    000004d8: 	movq	0x30(%rsp), %rsi
    000004dd: 	addq	%rsi, 0x48(%rsp)
    000004e2: 	movq	0x28(%rsp), %rsi
    000004e7: 	addq	%rsi, 0x40(%rsp)
    000004ec: 	addq	%rsi, 0x38(%rsp)
    000004f1: 	cmpq	%rbx, 0x18(%rsp)
    000004f6: 	jb	.Ltmp236 # Offset: 1270
    000004fc: 	movq	0x30(%rsp), %rsi
    00000501: 	addq	%rsi, -0x10(%rsp)
    00000506: 	movq	0x28(%rsp), %rsi
    0000050b: 	addq	%rsi, 0x20(%rsp)
    00000510: 	movq	0x50(%rsp), %rsi
    00000515: 	cmpq	%rsi, 0x10(%rsp)
    0000051a: 	jb	.Ltmp237 # Offset: 1306
.Ltmp221:
    00000520: 	subq	$-0x80, %rsp
    00000524: 	popq	%rbx
    00000525: 	popq	%rbp
    00000526: 	popq	%r12
    00000528: 	popq	%r13
    0000052a: 	popq	%r14
    0000052c: 	popq	%r15
    0000052e: 	retq # Offset: 1326
.Ltmp230:
    0000052f: 	movaps	%xmm4, %xmm3
    00000532: 	movaps	%xmm4, %xmm5
    00000535: 	movaps	%xmm4, %xmm2
    00000538: 	movq	%r11, %rcx
    0000053b: 	movaps	%xmm4, %xmm0
    0000053e: 	jmp	.Ltmp238 # Offset: 1342
.Ltmp222:
    00000543: 	movq	$0x0, -0x68(%rsp)
    0000054c: 	jmp	.Ltmp239 # Offset: 1356
DWARF CFI Instructions:
    <empty>
End of Function "_ZN28matmul_IJK_blocked_unrolled2IfEclEPKfS2_Pfmm.isra.0/1(*2)"

Binary Function "_ZN28matmul_JIK_blocked_unrolled3IfEclEPKfS2_Pfmm.isra.0/1(*2)" after disassembly {
  All names   : _ZN28matmul_JIK_blocked_unrolled3IfEclEPKfS2_Pfmm.isra.0/1
                _ZN28matmul_JIK_blocked_unrolled3IfEclEPKfS2_Pfmm.isra.0/matrix_multiply.cpp/1
  Number      : 20
  State       : disassembled
  Address     : 0x9f50
  Size        : 0x544
  MaxSize     : 0x550
  Offset      : 0x9f50
  Section     : .text
  Orc Section : .local.text._ZN28matmul_JIK_blocked_unrolled3IfEclEPKfS2_Pfmm.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB019:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	subq	$0xb0, %rsp
    00000011: 	movq	%rdi, -0x30(%rsp)
    00000016: 	movq	%rsi, -0x8(%rsp)
    0000001b: 	movq	%rdx, 0x30(%rsp)
    00000020: 	movq	%rcx, 0x10(%rsp)
    00000025: 	testq	%r8, %r8
    00000028: 	je	.Ltmp240 # Offset: 40
    0000002e: 	testq	%rcx, %rcx
    00000031: 	je	.Ltmp240 # Offset: 49
    00000037: 	movq	%r8, %rax
    0000003a: 	leaq	(%r8,%r8), %r14
    0000003e: 	pxor	%xmm4, %xmm4
    00000042: 	movq	%r8, %r15
    00000045: 	shlq	$0x7, %rax
    00000049: 	leaq	(%r14,%r8), %rbp
    0000004d: 	shlq	$0x4, %r15
    00000051: 	leaq	(,%r8,4), %r12
    00000059: 	movq	%rax, 0x88(%rsp)
    00000061: 	movq	%r8, %rax
    00000064: 	leaq	-0x200(%rdx), %rbx
    0000006b: 	movq	%r12, %r13
    0000006e: 	shlq	$0x9, %rax
    00000072: 	movq	%rbx, 0x98(%rsp)
    0000007a: 	movq	%rax, 0x80(%rsp)
    00000082: 	leaq	(,%r8,8), %rax
    0000008a: 	movq	%rax, 0x78(%rsp)
    0000008f: 	leaq	(,%rbp,4), %rax
    00000097: 	movq	%rax, 0x90(%rsp)
    0000009f: 	movq	%rsi, %rax
    000000a2: 	movq	$0x0, 0x38(%rsp)
    000000ab: 	subq	%r12, %rax
    000000ae: 	movq	%r15, %r12
    000000b1: 	movq	%r14, %r15
    000000b4: 	subq	$0x200, %rax
    000000ba: 	movq	%rax, 0xa0(%rsp)
    000000c2: 	movq	%rbp, %rax
    000000c5: 	movq	%r8, %rbp
    000000c8: 	movq	%rax, %r14
.Ltmp254:
    000000cb: 	movq	0x38(%rsp), %rax
    000000d0: 	movq	%r13, 0x60(%rsp)
    000000d5: 	movq	$0x0, 0x58(%rsp)
    000000de: 	movq	%rax, (%rsp)
    000000e2: 	subq	$-0x80, %rax
    000000e6: 	cmpq	%rbp, %rax
    000000e9: 	movq	%rax, %rbx
    000000ec: 	movq	%rax, 0x38(%rsp)
    000000f1: 	movq	$0x0, 0x18(%rsp)
    000000fa: 	cmovaq	%rbp, %rbx
    000000fe: 	shlq	$0x2, %rax
    00000102: 	movq	$0x0, 0x40(%rsp)
    0000010b: 	movq	%rbx, -0x40(%rsp)
    00000110: 	subq	$0x3, %rbx
    00000114: 	movq	%rbx, -0x60(%rsp)
    00000119: 	movq	0x98(%rsp), %rbx
    00000121: 	addq	%rax, %rbx
    00000124: 	addq	0xa0(%rsp), %rax
    0000012c: 	movq	%rax, 0x68(%rsp)
    00000131: 	movq	0x90(%rsp), %rax
    00000139: 	movq	%rbx, 0x70(%rsp)
    0000013e: 	movq	%rax, 0x48(%rsp)
    00000143: 	movq	0x78(%rsp), %rax
    00000148: 	movq	%rax, 0x50(%rsp)
.Ltmp253:
    0000014d: 	movq	0x40(%rsp), %rbx
    00000152: 	movq	-0x30(%rsp), %rsi
    00000157: 	movq	$0x0, -0x68(%rsp)
    00000160: 	movq	$0x0, -0x28(%rsp)
    00000169: 	movq	%rbx, %rax
    0000016c: 	movq	%rbx, -0x78(%rsp)
    00000171: 	subq	$-0x80, %rbx
    00000175: 	cmpq	%rbx, %rbp
    00000178: 	movq	%rbx, 0x40(%rsp)
    0000017d: 	leaq	(%rsi,%rax,4), %rax
    00000181: 	cmovbeq	%rbp, %rbx
    00000185: 	movq	%rax, -0x70(%rsp)
    0000018a: 	movq	%r15, 0x20(%rsp)
    0000018f: 	leaq	(%rsi,%rbx,4), %rax
    00000193: 	movq	0x60(%rsp), %rsi
    00000198: 	movq	%rbx, -0x38(%rsp)
    0000019d: 	leaq	-0x3(%rbx), %r9
    000001a1: 	movq	%rax, -0x18(%rsp)
    000001a6: 	movq	0x68(%rsp), %rax
    000001ab: 	movq	%r14, 0x28(%rsp)
    000001b0: 	addq	%rsi, %rax
    000001b3: 	movq	%rax, 0x8(%rsp)
    000001b8: 	movq	0x70(%rsp), %rax
    000001bd: 	movq	%rax, -0x20(%rsp)
    000001c2: 	movq	0x58(%rsp), %rax
    000001c7: 	movq	%rax, %rbx
    000001ca: 	addq	%rsi, %rbx
    000001cd: 	movq	%rbx, -0x58(%rsp)
    000001d2: 	movq	0x50(%rsp), %rbx
    000001d7: 	addq	%rax, %rbx
    000001da: 	movq	%rbx, -0x50(%rsp)
    000001df: 	movq	0x48(%rsp), %rbx
    000001e4: 	addq	%rax, %rbx
    000001e7: 	movq	%rbx, -0x48(%rsp)
    000001ec: 	nopl	(%rax) # Size: 4
.Ltmp252:
    000001f0: 	movq	(%rsp), %rax
    000001f4: 	movq	-0x60(%rsp), %rsi
    000001f9: 	movq	0x8(%rsp), %r11
    000001fe: 	movq	-0x20(%rsp), %rbx
    00000203: 	movq	%rax, %r10
    00000206: 	cmpq	%rsi, %rax
    00000209: 	jae	.Ltmp241 # Offset: 521
    0000020f: 	movq	-0x30(%rsp), %r14
    00000214: 	movq	-0x8(%rsp), %r15
    00000219: 	movq	%r13, -0x10(%rsp)
    0000021e: 	movq	-0x38(%rsp), %r13
    00000223: 	nopl	(%rax,%rax) # Size: 5
.Ltmp245:
    00000228: 	movq	-0x78(%rsp), %rax
    0000022d: 	pxor	%xmm3, %xmm3
    00000231: 	cmpq	-0x78(%rsp), %r9
    00000236: 	jbe	.Ltmp242 # Offset: 566
    0000023c: 	movq	-0x58(%rsp), %rax
    00000241: 	movq	-0x70(%rsp), %rdx
    00000246: 	movq	%r11, %rcx
    00000249: 	pxor	%xmm3, %xmm3
    0000024d: 	leaq	(%rax,%r11), %r8
    00000251: 	movq	-0x50(%rsp), %rax
    00000256: 	leaq	(%rax,%r11), %rdi
    0000025a: 	movq	-0x48(%rsp), %rax
    0000025f: 	leaq	(%rax,%r11), %rsi
    00000263: 	movq	-0x78(%rsp), %rax
    00000268: 	nopl	(%rax,%rax) # Size: 8
.Ltmp243:
    00000270: 	movups	(%rdx), %xmm0
    00000273: 	movups	(%r8), %xmm6
    00000277: 	addq	$0x4, %rax
    0000027b: 	addq	$0x10, %rdx
    0000027f: 	movups	(%rcx), %xmm7
    00000282: 	movups	(%rdi), %xmm5
    00000285: 	addq	%r12, %rcx
    00000288: 	addq	%r12, %r8
    0000028b: 	movaps	%xmm0, %xmm1
    0000028e: 	movaps	%xmm0, %xmm2
    00000291: 	addq	%r12, %rdi
    00000294: 	shufps	$0x55, %xmm0, %xmm1
    00000298: 	shufps	$0x0, %xmm0, %xmm2
    0000029c: 	mulps	%xmm6, %xmm1
    0000029f: 	movups	(%rsi), %xmm6
    000002a2: 	mulps	%xmm7, %xmm2
    000002a5: 	addq	%r12, %rsi
    000002a8: 	addps	%xmm2, %xmm1
    000002ab: 	movaps	%xmm0, %xmm2
    000002ae: 	shufps	$0xaa, %xmm0, %xmm2
    000002b2: 	mulps	%xmm5, %xmm2
    000002b5: 	shufps	$0xff, %xmm0, %xmm0
    000002b9: 	mulps	%xmm6, %xmm0
    000002bc: 	addps	%xmm2, %xmm1
    000002bf: 	addps	%xmm1, %xmm0
    000002c2: 	addps	%xmm0, %xmm3
    000002c5: 	cmpq	%r9, %rax
    000002c8: 	jb	.Ltmp243 # Offset: 712
.Ltmp242:
    000002ca: 	cmpq	%rax, %r13
    000002cd: 	jbe	.Ltmp244 # Offset: 717
    000002d3: 	movq	%rbp, %rdx
    000002d6: 	movq	-0x68(%rsp), %rdi
    000002db: 	imulq	%rax, %rdx
    000002df: 	leaq	(%rax,%rdi), %rcx
    000002e3: 	movss	(%r14,%rcx,4), %xmm1
    000002e9: 	leaq	0x1(%rax), %rcx
    000002ed: 	leaq	(%r10,%rdx), %rsi
    000002f1: 	movups	(%r15,%rsi,4), %xmm0
    000002f6: 	shufps	$0x0, %xmm1, %xmm1
    000002fa: 	mulps	%xmm1, %xmm0
    000002fd: 	addps	%xmm0, %xmm3
    00000300: 	cmpq	%rcx, %r13
    00000303: 	jbe	.Ltmp244 # Offset: 771
    00000305: 	addq	%rbp, %rdx
    00000308: 	addq	%rdi, %rcx
    0000030b: 	leaq	(%r10,%rdx), %rsi
    0000030f: 	movss	(%r14,%rcx,4), %xmm1
    00000315: 	leaq	0x2(%rax), %rcx
    00000319: 	movups	(%r15,%rsi,4), %xmm0
    0000031e: 	shufps	$0x0, %xmm1, %xmm1
    00000322: 	mulps	%xmm1, %xmm0
    00000325: 	addps	%xmm0, %xmm3
    00000328: 	cmpq	%rcx, %r13
    0000032b: 	jbe	.Ltmp244 # Offset: 811
    0000032d: 	addq	%rbp, %rdx
    00000330: 	addq	%rdi, %rcx
    00000333: 	addq	$0x3, %rax
    00000337: 	addq	%r10, %rdx
    0000033a: 	movss	(%r14,%rcx,4), %xmm0
    00000340: 	movups	(%r15,%rdx,4), %xmm7
    00000345: 	shufps	$0x0, %xmm0, %xmm0
    00000349: 	mulps	%xmm7, %xmm0
    0000034c: 	addps	%xmm0, %xmm3
    0000034f: 	cmpq	%rax, %r13
    00000352: 	jbe	.Ltmp244 # Offset: 850
    00000354: 	addq	%rdi, %rax
    00000357: 	addq	%rbp, %rdx
    0000035a: 	movups	(%r15,%rdx,4), %xmm0
    0000035f: 	movss	(%r14,%rax,4), %xmm1
    00000365: 	shufps	$0x0, %xmm1, %xmm1
    00000369: 	mulps	%xmm1, %xmm0
    0000036c: 	addps	%xmm0, %xmm3
.Ltmp244:
    0000036f: 	movups	(%rbx), %xmm0
    00000372: 	addq	$0x4, %r10
    00000376: 	addq	$0x10, %rbx
    0000037a: 	addq	$0x10, %r11
    0000037e: 	addps	%xmm3, %xmm0
    00000381: 	movups	%xmm0, -0x10(%rbx)
    00000385: 	cmpq	-0x60(%rsp), %r10
    0000038a: 	jb	.Ltmp245 # Offset: 906
    00000390: 	movq	-0x10(%rsp), %r13
.Ltmp241:
    00000395: 	cmpq	%r10, -0x40(%rsp)
    0000039a: 	jbe	.Ltmp246 # Offset: 922
    000003a0: 	movq	0x18(%rsp), %rax
    000003a5: 	movq	-0x8(%rsp), %rbx
    000003aa: 	movq	-0x68(%rsp), %rdi
    000003af: 	movq	0x20(%rsp), %r15
    000003b4: 	addq	%r10, %rax
    000003b7: 	movq	-0x18(%rsp), %r8
    000003bc: 	movq	-0x78(%rsp), %r11
    000003c1: 	leaq	(%rbx,%rax,4), %rsi
    000003c5: 	movq	0x30(%rsp), %rax
    000003ca: 	movq	0x28(%rsp), %r14
    000003cf: 	leaq	(%rax,%rdi,4), %rdi
.Ltmp251:
    000003d3: 	cmpq	%r11, %r9
    000003d6: 	jbe	.Ltmp247 # Offset: 982
    000003dc: 	movq	-0x70(%rsp), %rdx
    000003e1: 	movq	%rsi, %rax
    000003e4: 	movq	%r11, %rcx
    000003e7: 	movaps	%xmm4, %xmm3
    000003ea: 	movaps	%xmm4, %xmm5
    000003ed: 	movaps	%xmm4, %xmm2
    000003f0: 	movaps	%xmm4, %xmm0
    000003f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp248:
    000003f8: 	movss	(%rax), %xmm1
    000003fc: 	mulss	(%rdx), %xmm1
    00000400: 	addq	$0x4, %rcx
    00000404: 	addq	$0x10, %rdx
    00000408: 	addss	%xmm1, %xmm0
    0000040c: 	movss	(%rax,%rbp,4), %xmm1
    00000411: 	mulss	-0xc(%rdx), %xmm1
    00000416: 	addss	%xmm1, %xmm2
    0000041a: 	movss	(%rax,%r15,4), %xmm1
    00000420: 	mulss	-0x8(%rdx), %xmm1
    00000425: 	addss	%xmm1, %xmm5
    00000429: 	movss	(%rax,%r14,4), %xmm1
    0000042f: 	mulss	-0x4(%rdx), %xmm1
    00000434: 	addq	%r12, %rax
    00000437: 	addss	%xmm1, %xmm3
    0000043b: 	cmpq	%r9, %rcx
    0000043e: 	jb	.Ltmp248 # Offset: 1086
.Ltmp255:
    00000440: 	cmpq	%rcx, -0x38(%rsp)
    00000445: 	jbe	.Ltmp249 # Offset: 1093
    00000447: 	movq	%rbp, %rax
    0000044a: 	movq	-0x30(%rsp), %rdx
    0000044f: 	imulq	%rcx, %rax
    00000453: 	addq	-0x68(%rsp), %rcx
    00000458: 	leaq	(%rdx,%rcx,4), %rdx
    0000045c: 	addq	%r10, %rax
    0000045f: 	leaq	(%rbx,%rax,4), %rax
    00000463: 	nopl	(%rax,%rax) # Size: 5
.Ltmp250:
    00000468: 	movss	(%rax), %xmm1
    0000046c: 	mulss	(%rdx), %xmm1
    00000470: 	addq	$0x4, %rdx
    00000474: 	addq	%r13, %rax
    00000477: 	addss	%xmm1, %xmm0
    0000047b: 	cmpq	%rdx, %r8
    0000047e: 	jne	.Ltmp250 # Offset: 1150
.Ltmp249:
    00000480: 	addss	%xmm0, %xmm2
    00000484: 	addq	$0x4, %rsi
    00000488: 	addss	%xmm5, %xmm2
    0000048c: 	addss	%xmm3, %xmm2
    00000490: 	addss	(%rdi,%r10,4), %xmm2
    00000496: 	movss	%xmm2, (%rdi,%r10,4)
    0000049c: 	addq	$0x1, %r10
    000004a0: 	cmpq	%r10, -0x40(%rsp)
    000004a5: 	jne	.Ltmp251 # Offset: 1189
.Ltmp246:
    000004ab: 	addq	$0x1, -0x28(%rsp)
    000004b1: 	movq	-0x28(%rsp), %rax
    000004b6: 	addq	%rbp, -0x68(%rsp)
    000004bb: 	addq	%r13, -0x70(%rsp)
    000004c0: 	addq	%r13, -0x18(%rsp)
    000004c5: 	addq	%r13, -0x20(%rsp)
    000004ca: 	cmpq	0x10(%rsp), %rax
    000004cf: 	jne	.Ltmp252 # Offset: 1231
    000004d5: 	movq	0x80(%rsp), %rax
    000004dd: 	movq	0x88(%rsp), %rbx
    000004e5: 	addq	%rax, 0x60(%rsp)
    000004ea: 	movq	0x20(%rsp), %r15
    000004ef: 	addq	%rbx, 0x18(%rsp)
    000004f4: 	movq	0x28(%rsp), %r14
    000004f9: 	subq	%rax, 0x58(%rsp)
    000004fe: 	addq	%rax, 0x50(%rsp)
    00000503: 	addq	%rax, 0x48(%rsp)
    00000508: 	cmpq	0x40(%rsp), %rbp
    0000050d: 	ja	.Ltmp253 # Offset: 1293
    00000513: 	cmpq	%rbp, 0x38(%rsp)
    00000518: 	jb	.Ltmp254 # Offset: 1304
.Ltmp240:
    0000051e: 	addq	$0xb0, %rsp
    00000525: 	popq	%rbx
    00000526: 	popq	%rbp
    00000527: 	popq	%r12
    00000529: 	popq	%r13
    0000052b: 	popq	%r14
    0000052d: 	popq	%r15
    0000052f: 	retq # Offset: 1327
.Ltmp247:
    00000530: 	movaps	%xmm4, %xmm3
    00000533: 	movaps	%xmm4, %xmm5
    00000536: 	movaps	%xmm4, %xmm2
    00000539: 	movq	%r11, %rcx
    0000053c: 	movaps	%xmm4, %xmm0
    0000053f: 	jmp	.Ltmp255 # Offset: 1343
DWARF CFI Instructions:
    <empty>
End of Function "_ZN28matmul_JIK_blocked_unrolled3IfEclEPKfS2_Pfmm.isra.0/1(*2)"

Binary Function "_ZN28matmul_JIK_blocked_unrolled2IfEclEPKfS2_Pfmm.isra.0/1(*2)" after disassembly {
  All names   : _ZN28matmul_JIK_blocked_unrolled2IfEclEPKfS2_Pfmm.isra.0/1
                _ZN28matmul_JIK_blocked_unrolled2IfEclEPKfS2_Pfmm.isra.0/matrix_multiply.cpp/1
  Number      : 21
  State       : disassembled
  Address     : 0xa4a0
  Size        : 0xf2d
  MaxSize     : 0xf30
  Offset      : 0xa4a0
  Section     : .text
  Orc Section : .local.text._ZN28matmul_JIK_blocked_unrolled2IfEclEPKfS2_Pfmm.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB020:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	subq	$0x160, %rsp
    00000011: 	movq	%rsi, -0x70(%rsp)
    00000016: 	movq	%rdx, 0x130(%rsp)
    0000001e: 	movq	%rcx, 0x108(%rsp)
    00000026: 	testq	%r8, %r8
    00000029: 	je	.Ltmp256 # Offset: 41
    0000002f: 	leaq	-0x3(%rcx), %rax
    00000033: 	movq	%r8, %r12
    00000036: 	movq	%r8, %rbp
    00000039: 	movq	%r8, %r13
    0000003c: 	leaq	(,%r8,4), %rbx
    00000044: 	shlq	$0x4, %r12
    00000048: 	movq	%rax, 0xe8(%rsp)
    00000050: 	movq	%r8, %rax
    00000053: 	addq	%rbx, %rdx
    00000056: 	shlq	$0x9, %rax
    0000005a: 	movq	%rbx, -0x38(%rsp)
    0000005f: 	movq	%r12, %r14
    00000062: 	movq	%rax, 0x150(%rsp)
    0000006a: 	leaq	(%r8,%r8), %rax
    0000006e: 	shlq	$0x6, %rbp
    00000072: 	movq	%rdx, 0x138(%rsp)
    0000007a: 	addq	%rbx, %rdx
    0000007d: 	movq	%rbp, %r15
    00000080: 	movq	%rdi, %rbp
    00000083: 	movq	%rax, 0xc8(%rsp)
    0000008b: 	movq	%rdx, 0x140(%rsp)
    00000093: 	addq	%rbx, %rdx
    00000096: 	leaq	(%rax,%r8), %rbx
    0000009a: 	negq	%rax
    0000009d: 	movq	%rsi, 0x128(%rsp)
    000000a5: 	movq	%rdx, 0x148(%rsp)
    000000ad: 	movq	%rax, 0xa0(%rsp)
    000000b5: 	movq	$0x0, 0x110(%rsp)
    000000c1: 	movq	%rbx, 0xd0(%rsp)
    000000c9: 	shlq	$0x4, %rbx
    000000cd: 	movq	%rbx, %r12
.Ltmp277:
    000000d0: 	movq	0x110(%rsp), %rax
    000000d8: 	movq	%rbp, 0x120(%rsp)
    000000e0: 	movq	$0x4, 0x50(%rsp)
    000000e9: 	movq	%rax, 0xe0(%rsp)
    000000f1: 	subq	$-0x80, %rax
    000000f5: 	cmpq	%r13, %rax
    000000f8: 	movq	%rax, 0x110(%rsp)
    00000100: 	movq	$0x0, 0x118(%rsp)
    0000010c: 	cmovaq	%r13, %rax
    00000110: 	movq	%rax, -0x10(%rsp)
    00000115: 	movq	0x128(%rsp), %rax
    0000011d: 	movq	%rax, 0xd8(%rsp)
    00000125: 	movq	%r12, %rax
    00000128: 	movq	%r13, %r12
    0000012b: 	movq	%rbp, %r13
    0000012e: 	movq	%r14, %rbp
    00000131: 	movq	%r15, %r14
    00000134: 	movq	%rax, %r15
.Ltmp276:
    00000137: 	movq	0x118(%rsp), %rdx
    0000013f: 	movq	%rdx, -0x48(%rsp)
    00000144: 	movq	%rdx, %rcx
    00000147: 	subq	$-0x80, %rdx
    0000014b: 	cmpq	%rdx, %r12
    0000014e: 	movq	%rdx, 0x118(%rsp)
    00000156: 	cmovbeq	%r12, %rdx
    0000015a: 	cmpq	$0x0, 0xe8(%rsp)
    00000163: 	leaq	-0x3(%rdx), %r11
    00000167: 	movq	%rdx, (%rsp)
    0000016b: 	movq	%r11, -0x18(%rsp)
    00000170: 	je	.Ltmp257 # Offset: 368
    00000176: 	movq	-0x38(%rsp), %rsi
    0000017b: 	movq	0x130(%rsp), %rax
    00000183: 	movq	$0x0, -0x68(%rsp)
    0000018c: 	movq	0x120(%rsp), %r10
    00000194: 	movq	$0x0, 0xb0(%rsp)
    000001a0: 	movq	%rsi, %rdi
    000001a3: 	movq	%rax, 0x8(%rsp)
    000001a8: 	movq	%rsi, %rax
    000001ab: 	movq	%rsi, %rbx
    000001ae: 	addq	%r10, %rdi
    000001b1: 	movq	%r10, 0x30(%rsp)
    000001b6: 	addq	%rdi, %rax
    000001b9: 	movq	%rdi, 0x28(%rsp)
    000001be: 	addq	%rax, %rbx
    000001c1: 	movq	%rax, 0x38(%rsp)
    000001c6: 	movq	%rsi, %rax
    000001c9: 	movq	%rbx, 0x48(%rsp)
    000001ce: 	movq	0xd8(%rsp), %rbx
    000001d6: 	addq	%rsi, %rbx
    000001d9: 	movq	%rbx, %rdi
    000001dc: 	movq	%rbx, 0xf0(%rsp)
    000001e4: 	movq	%rsi, %rbx
    000001e7: 	addq	%rdi, %rax
    000001ea: 	addq	%rax, %rbx
    000001ed: 	movq	%rax, 0xf8(%rsp)
    000001f5: 	movq	%rdx, %rax
    000001f8: 	subq	%rcx, %rax
    000001fb: 	cmpq	$0x2, 0x50(%rsp)
    00000201: 	movq	%rbx, 0x100(%rsp)
    00000209: 	movq	%rcx, %rbx
    0000020c: 	seta	%dl
    0000020f: 	cmpq	$-0x4, %r11
    00000213: 	leaq	-0x4(%rax), %rcx
    00000217: 	setbe	%al
    0000021a: 	andl	%edx, %eax
    0000021c: 	cmpq	$0xb, %rcx
    00000220: 	seta	%dl
    00000223: 	andl	%edx, %eax
    00000225: 	movb	%al, 0x47(%rsp)
    00000229: 	movq	%rcx, %rax
    0000022c: 	shrq	$0x2, %rax
    00000230: 	addq	$0x1, %rax
    00000234: 	movq	%rax, %rdi
    00000237: 	movq	%rax, 0x68(%rsp)
    0000023c: 	andq	$-0x4, %rax
    00000240: 	movq	%rax, 0x58(%rsp)
    00000245: 	leaq	(%rbx,%rax,4), %rax
    00000249: 	shrq	$0x2, %rdi
    0000024d: 	movq	%rax, 0x70(%rsp)
    00000252: 	addq	$0x2, %rax
    00000256: 	imulq	%r12, %rax
    0000025a: 	movq	%rdi, 0x60(%rsp)
    0000025f: 	movq	%rax, 0x98(%rsp)
    00000267: 	movq	0x148(%rsp), %rax
    0000026f: 	movq	%rax, 0x20(%rsp)
    00000274: 	movq	0x140(%rsp), %rax
    0000027c: 	movq	%rax, 0x18(%rsp)
    00000281: 	movq	0xc8(%rsp), %rax
    00000289: 	movq	%rax, -0x60(%rsp)
    0000028e: 	movq	0x138(%rsp), %rax
    00000296: 	movq	%rax, 0x10(%rsp)
    0000029b: 	movq	%r12, %rax
    0000029e: 	negq	%rax
    000002a1: 	movq	%rax, 0xa8(%rsp)
    000002a9: 	nopl	(%rax) # Size: 7
.Ltmp268:
    000002b0: 	movq	0xe0(%rsp), %r11
    000002b8: 	cmpq	%r11, -0x10(%rsp)
    000002bd: 	jbe	.Ltmp258 # Offset: 701
    000002c3: 	movq	0x70(%rsp), %rbx
    000002c8: 	movq	-0x68(%rsp), %rsi
    000002cd: 	movq	-0x60(%rsp), %rdx
    000002d2: 	movq	%rbx, %rax
    000002d5: 	leaq	(%r12,%rsi), %rdi
    000002d9: 	addq	%rsi, %rax
    000002dc: 	leaq	(%r12,%rdx), %rcx
    000002e0: 	movq	%rdi, -0x58(%rsp)
    000002e5: 	leaq	(%r13,%rax,4), %rax
    000002ea: 	movq	%rcx, -0x50(%rsp)
    000002ef: 	movq	%rax, 0x78(%rsp)
    000002f4: 	movq	%rbx, %rax
    000002f7: 	addq	%rdi, %rax
    000002fa: 	leaq	(%r13,%rax,4), %rax
    000002ff: 	movq	%rax, 0x80(%rsp)
    00000307: 	movq	%rbx, %rax
    0000030a: 	addq	%rdx, %rax
    0000030d: 	leaq	(%r13,%rax,4), %rax
    00000312: 	movq	%rax, 0x88(%rsp)
    0000031a: 	movq	%rbx, %rax
    0000031d: 	movq	0x28(%rsp), %rbx
    00000322: 	addq	%rcx, %rax
    00000325: 	leaq	(%r13,%rax,4), %rax
    0000032a: 	movq	%rax, 0x90(%rsp)
    00000332: 	movq	-0x38(%rsp), %rax
    00000337: 	addq	%rax, %rbx
    0000033a: 	addq	0x38(%rsp), %rax
    0000033f: 	movq	%rax, 0xc0(%rsp)
    00000347: 	movq	0x100(%rsp), %rax
    0000034f: 	movq	%rbx, 0xb8(%rsp)
    00000357: 	movq	%rax, -0x20(%rsp)
    0000035c: 	movq	0xf8(%rsp), %rax
    00000364: 	movq	%rax, -0x28(%rsp)
    00000369: 	movq	0xf0(%rsp), %rax
    00000371: 	movq	%rax, -0x30(%rsp)
    00000376: 	movq	0xd8(%rsp), %rax
    0000037e: 	movq	%rax, -0x40(%rsp)
    00000383: 	nopl	(%rax,%rax) # Size: 5
.Ltmp267:
    00000388: 	movq	-0x48(%rsp), %rbx
    0000038d: 	cmpq	%rbx, -0x18(%rsp)
    00000392: 	jbe	.Ltmp259 # Offset: 914
    00000398: 	cmpb	$0x0, 0x47(%rsp)
    0000039d: 	je	.Ltmp260 # Offset: 925
    000003a3: 	pxor	%xmm4, %xmm4
    000003a7: 	movq	%rbx, %xmm14
    000003ac: 	movq	%r11, -0x8(%rsp)
    000003b1: 	movq	-0x40(%rsp), %r10
    000003b6: 	movq	-0x30(%rsp), %r9
    000003bb: 	movq	-0x28(%rsp), %r8
    000003c0: 	xorl	%ebx, %ebx
    000003c2: 	movaps	%xmm4, %xmm3
    000003c5: 	movq	-0x20(%rsp), %rdi
    000003ca: 	movq	0x30(%rsp), %rsi
    000003cf: 	movaps	%xmm4, %xmm2
    000003d2: 	movaps	%xmm4, %xmm1
    000003d5: 	movq	0x28(%rsp), %rcx
    000003da: 	movq	0x38(%rsp), %rdx
    000003df: 	movhps	0x50(%rsp), %xmm14
    000003e5: 	movq	0x48(%rsp), %rax
    000003ea: 	movq	0x60(%rsp), %r11
    000003ef: 	nop # Size: 1
.Ltmp261:
    000003f0: 	movss	(%r10,%r15), %xmm5
    000003f6: 	movss	(%r10,%rbp,2), %xmm0
    000003fc: 	movdqa	%xmm14, %xmm13
    00000401: 	addq	$0x1, %rbx
    00000405: 	movss	(%r10), %xmm9
    0000040a: 	movss	(%rdi), %xmm6
    0000040e: 	addq	$0x40, %rax
    00000412: 	addq	$0x40, %rdx
    00000416: 	unpcklps	%xmm5, %xmm0
    00000419: 	movss	(%r9), %xmm12
    0000041e: 	addq	$0x40, %rcx
    00000422: 	addq	$0x40, %rsi
    00000426: 	movss	(%r10,%rbp), %xmm5
    0000042c: 	movss	(%r8), %xmm8
    00000431: 	addq	%r14, %r10
    00000434: 	paddq	DATAat0x2d9b0(%rip), %xmm14
    0000043d: 	movups	-0x20(%rsi), %xmm10
    00000442: 	unpcklps	%xmm5, %xmm9
    00000446: 	movss	(%r9,%r15), %xmm5
    0000044c: 	movlhps	%xmm0, %xmm9
    00000450: 	movss	(%r9,%rbp,2), %xmm0
    00000456: 	movaps	%xmm10, %xmm11
    0000045a: 	unpcklps	%xmm5, %xmm0
    0000045d: 	movss	(%r9,%rbp), %xmm5
    00000463: 	addq	%r14, %r9
    00000466: 	unpcklps	%xmm5, %xmm12
    0000046a: 	movss	(%r8,%r15), %xmm5
    00000470: 	movlhps	%xmm0, %xmm12
    00000474: 	movss	(%r8,%rbp,2), %xmm0
    0000047a: 	unpcklps	%xmm5, %xmm0
    0000047d: 	movss	(%r8,%rbp), %xmm5
    00000483: 	addq	%r14, %r8
    00000486: 	unpcklps	%xmm5, %xmm8
    0000048a: 	movss	(%rdi,%r15), %xmm5
    00000490: 	movlhps	%xmm0, %xmm8
    00000494: 	movss	(%rdi,%rbp,2), %xmm0
    00000499: 	unpcklps	%xmm5, %xmm0
    0000049c: 	movss	(%rdi,%rbp), %xmm5
    000004a1: 	addq	%r14, %rdi
    000004a4: 	unpcklps	%xmm5, %xmm6
    000004a7: 	movups	-0x40(%rsi), %xmm5
    000004ab: 	movlhps	%xmm0, %xmm6
    000004ae: 	movups	-0x30(%rsi), %xmm0
    000004b2: 	movaps	%xmm5, %xmm7
    000004b5: 	shufps	$0x88, %xmm0, %xmm7
    000004b9: 	shufps	$0xdd, %xmm0, %xmm5
    000004bd: 	movups	-0x10(%rsi), %xmm0
    000004c1: 	movaps	%xmm7, %xmm15
    000004c5: 	shufps	$0x88, %xmm0, %xmm11
    000004ca: 	shufps	$0xdd, %xmm0, %xmm10
    000004cf: 	movaps	%xmm5, %xmm0
    000004d2: 	shufps	$0x88, %xmm11, %xmm15
    000004d7: 	shufps	$0x88, %xmm10, %xmm0
    000004dc: 	mulps	%xmm9, %xmm15
    000004e0: 	shufps	$0xdd, %xmm11, %xmm7
    000004e5: 	shufps	$0xdd, %xmm10, %xmm5
    000004ea: 	mulps	%xmm12, %xmm0
    000004ee: 	movups	-0x20(%rcx), %xmm10
    000004f3: 	mulps	%xmm8, %xmm7
    000004f7: 	mulps	%xmm6, %xmm5
    000004fa: 	movaps	%xmm10, %xmm11
    000004fe: 	addps	%xmm15, %xmm0
    00000502: 	addps	%xmm7, %xmm0
    00000505: 	addps	%xmm5, %xmm0
    00000508: 	addss	%xmm0, %xmm1
    0000050c: 	movaps	%xmm0, %xmm5
    0000050f: 	shufps	$0x55, %xmm0, %xmm5
    00000513: 	addss	%xmm1, %xmm5
    00000517: 	movaps	%xmm0, %xmm1
    0000051a: 	unpckhps	%xmm0, %xmm1
    0000051d: 	shufps	$0xff, %xmm0, %xmm0
    00000521: 	addss	%xmm5, %xmm1
    00000525: 	movups	-0x40(%rcx), %xmm5
    00000529: 	movaps	%xmm5, %xmm7
    0000052c: 	addss	%xmm0, %xmm1
    00000530: 	movups	-0x30(%rcx), %xmm0
    00000534: 	shufps	$0x88, %xmm0, %xmm7
    00000538: 	shufps	$0xdd, %xmm0, %xmm5
    0000053c: 	movups	-0x10(%rcx), %xmm0
    00000540: 	movaps	%xmm7, %xmm15
    00000544: 	shufps	$0x88, %xmm0, %xmm11
    00000549: 	shufps	$0xdd, %xmm0, %xmm10
    0000054e: 	movaps	%xmm5, %xmm0
    00000551: 	shufps	$0x88, %xmm11, %xmm15
    00000556: 	shufps	$0x88, %xmm10, %xmm0
    0000055b: 	mulps	%xmm9, %xmm15
    0000055f: 	shufps	$0xdd, %xmm11, %xmm7
    00000564: 	shufps	$0xdd, %xmm10, %xmm5
    00000569: 	mulps	%xmm12, %xmm0
    0000056d: 	movups	-0x20(%rdx), %xmm10
    00000572: 	mulps	%xmm8, %xmm7
    00000576: 	mulps	%xmm6, %xmm5
    00000579: 	movaps	%xmm10, %xmm11
    0000057d: 	addps	%xmm15, %xmm0
    00000581: 	addps	%xmm7, %xmm0
    00000584: 	addps	%xmm5, %xmm0
    00000587: 	addss	%xmm0, %xmm2
    0000058b: 	movaps	%xmm0, %xmm5
    0000058e: 	shufps	$0x55, %xmm0, %xmm5
    00000592: 	addss	%xmm2, %xmm5
    00000596: 	movaps	%xmm0, %xmm2
    00000599: 	unpckhps	%xmm0, %xmm2
    0000059c: 	shufps	$0xff, %xmm0, %xmm0
    000005a0: 	addss	%xmm5, %xmm2
    000005a4: 	movups	-0x40(%rdx), %xmm5
    000005a8: 	movaps	%xmm5, %xmm7
    000005ab: 	addss	%xmm0, %xmm2
    000005af: 	movups	-0x30(%rdx), %xmm0
    000005b3: 	shufps	$0x88, %xmm0, %xmm7
    000005b7: 	shufps	$0xdd, %xmm0, %xmm5
    000005bb: 	movups	-0x10(%rdx), %xmm0
    000005bf: 	movaps	%xmm7, %xmm15
    000005c3: 	shufps	$0x88, %xmm0, %xmm11
    000005c8: 	shufps	$0xdd, %xmm0, %xmm10
    000005cd: 	movaps	%xmm5, %xmm0
    000005d0: 	shufps	$0x88, %xmm11, %xmm15
    000005d5: 	shufps	$0x88, %xmm10, %xmm0
    000005da: 	mulps	%xmm9, %xmm15
    000005de: 	shufps	$0xdd, %xmm11, %xmm7
    000005e3: 	shufps	$0xdd, %xmm10, %xmm5
    000005e8: 	mulps	%xmm12, %xmm0
    000005ec: 	movups	-0x20(%rax), %xmm10
    000005f1: 	mulps	%xmm8, %xmm7
    000005f5: 	mulps	%xmm6, %xmm5
    000005f8: 	movaps	%xmm10, %xmm11
    000005fc: 	addps	%xmm15, %xmm0
    00000600: 	addps	%xmm7, %xmm0
    00000603: 	addps	%xmm5, %xmm0
    00000606: 	addss	%xmm0, %xmm3
    0000060a: 	movaps	%xmm0, %xmm5
    0000060d: 	shufps	$0x55, %xmm0, %xmm5
    00000611: 	addss	%xmm3, %xmm5
    00000615: 	movaps	%xmm0, %xmm3
    00000618: 	unpckhps	%xmm0, %xmm3
    0000061b: 	shufps	$0xff, %xmm0, %xmm0
    0000061f: 	addss	%xmm5, %xmm3
    00000623: 	movups	-0x40(%rax), %xmm5
    00000627: 	movaps	%xmm5, %xmm7
    0000062a: 	addss	%xmm0, %xmm3
    0000062e: 	movups	-0x30(%rax), %xmm0
    00000632: 	shufps	$0x88, %xmm0, %xmm7
    00000636: 	shufps	$0xdd, %xmm0, %xmm5
    0000063a: 	movups	-0x10(%rax), %xmm0
    0000063e: 	paddq	DATAat0x2d9c0(%rip), %xmm13
    00000647: 	shufps	$0x88, %xmm0, %xmm11
    0000064c: 	shufps	$0xdd, %xmm0, %xmm10
    00000651: 	movaps	%xmm5, %xmm0
    00000654: 	shufps	$0xdd, %xmm10, %xmm5
    00000659: 	shufps	$0x88, %xmm10, %xmm0
    0000065e: 	mulps	%xmm12, %xmm0
    00000662: 	movaps	%xmm7, %xmm12
    00000666: 	shufps	$0xdd, %xmm11, %xmm7
    0000066b: 	shufps	$0x88, %xmm11, %xmm12
    00000670: 	mulps	%xmm12, %xmm9
    00000674: 	mulps	%xmm8, %xmm7
    00000678: 	mulps	%xmm6, %xmm5
    0000067b: 	addps	%xmm9, %xmm0
    0000067f: 	addps	%xmm7, %xmm0
    00000682: 	addps	%xmm5, %xmm0
    00000685: 	movaps	%xmm0, %xmm5
    00000688: 	addss	%xmm4, %xmm5
    0000068c: 	movaps	%xmm0, %xmm4
    0000068f: 	shufps	$0x55, %xmm0, %xmm4
    00000693: 	addss	%xmm4, %xmm5
    00000697: 	movaps	%xmm0, %xmm4
    0000069a: 	unpckhps	%xmm0, %xmm4
    0000069d: 	shufps	$0xff, %xmm0, %xmm0
    000006a1: 	addss	%xmm5, %xmm4
    000006a5: 	addss	%xmm0, %xmm4
    000006a9: 	cmpq	%r11, %rbx
    000006ac: 	jb	.Ltmp261 # Offset: 1708
    000006b2: 	movhlps	%xmm13, %xmm6
    000006b6: 	movq	-0x8(%rsp), %r11
    000006bb: 	movq	0x68(%rsp), %rdi
    000006c0: 	movq	%xmm6, %rax
    000006c5: 	cmpq	%rdi, 0x58(%rsp)
    000006ca: 	je	.Ltmp262 # Offset: 1738
    000006d0: 	movq	0x98(%rsp), %rax
    000006d8: 	movq	-0x70(%rsp), %rbx
    000006dd: 	movq	0x90(%rsp), %rdi
    000006e5: 	movq	0x88(%rsp), %rsi
    000006ed: 	addq	%r11, %rax
    000006f0: 	movq	0x80(%rsp), %rcx
    000006f8: 	movq	0x78(%rsp), %rdx
    000006fd: 	leaq	(%rbx,%rax,4), %r8
    00000701: 	movq	-0x18(%rsp), %r10
    00000706: 	movq	0x70(%rsp), %rax
    0000070b: 	movq	0xa0(%rsp), %r9
    00000713: 	movq	0xa8(%rsp), %rbx
    0000071b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp263:
    00000720: 	movss	(%r8,%r9,4), %xmm8
    00000726: 	movss	(%r8,%rbx,4), %xmm0
    0000072c: 	addq	$0x4, %rax
    00000730: 	addq	$0x10, %rdx
    00000734: 	movss	-0xc(%rdx), %xmm5
    00000739: 	movss	-0x10(%rdx), %xmm9
    0000073f: 	addq	$0x10, %rcx
    00000743: 	addq	$0x10, %rsi
    00000747: 	movss	(%r8), %xmm7
    0000074c: 	movss	(%r8,%r12,4), %xmm6
    00000752: 	addq	$0x10, %rdi
    00000756: 	addq	%rbp, %r8
    00000759: 	mulss	%xmm8, %xmm9
    0000075e: 	mulss	%xmm0, %xmm5
    00000762: 	addss	%xmm9, %xmm5
    00000767: 	movss	-0x8(%rdx), %xmm9
    0000076d: 	mulss	%xmm7, %xmm9
    00000772: 	addss	%xmm9, %xmm5
    00000777: 	movss	-0x4(%rdx), %xmm9
    0000077d: 	mulss	%xmm6, %xmm9
    00000782: 	addss	%xmm9, %xmm5
    00000787: 	movss	-0x10(%rcx), %xmm9
    0000078d: 	mulss	%xmm8, %xmm9
    00000792: 	addss	%xmm5, %xmm1
    00000796: 	movss	-0xc(%rcx), %xmm5
    0000079b: 	mulss	%xmm0, %xmm5
    0000079f: 	addss	%xmm9, %xmm5
    000007a4: 	movss	-0x8(%rcx), %xmm9
    000007aa: 	mulss	%xmm7, %xmm9
    000007af: 	addss	%xmm9, %xmm5
    000007b4: 	movss	-0x4(%rcx), %xmm9
    000007ba: 	mulss	%xmm6, %xmm9
    000007bf: 	addss	%xmm9, %xmm5
    000007c4: 	movss	-0x10(%rsi), %xmm9
    000007ca: 	mulss	%xmm8, %xmm9
    000007cf: 	addss	%xmm5, %xmm2
    000007d3: 	movss	-0xc(%rsi), %xmm5
    000007d8: 	mulss	-0x10(%rdi), %xmm8
    000007de: 	mulss	%xmm0, %xmm5
    000007e2: 	mulss	-0xc(%rdi), %xmm0
    000007e7: 	addss	%xmm9, %xmm5
    000007ec: 	movss	-0x8(%rsi), %xmm9
    000007f2: 	addss	%xmm8, %xmm0
    000007f7: 	mulss	%xmm7, %xmm9
    000007fc: 	mulss	-0x8(%rdi), %xmm7
    00000801: 	addss	%xmm9, %xmm5
    00000806: 	movss	-0x4(%rsi), %xmm9
    0000080c: 	addss	%xmm7, %xmm0
    00000810: 	mulss	%xmm6, %xmm9
    00000815: 	mulss	-0x4(%rdi), %xmm6
    0000081a: 	addss	%xmm9, %xmm5
    0000081f: 	addss	%xmm6, %xmm0
    00000823: 	addss	%xmm5, %xmm3
    00000827: 	addss	%xmm0, %xmm4
    0000082b: 	cmpq	%r10, %rax
    0000082e: 	jb	.Ltmp263 # Offset: 2094
.Ltmp262:
    00000834: 	movq	(%rsp), %rbx
    00000838: 	cmpq	%rax, %rbx
    0000083b: 	jbe	.Ltmp264 # Offset: 2107
    00000841: 	movq	%rbx, %rdx
    00000844: 	subq	%rax, %rdx
    00000847: 	leaq	-0x1(%rdx), %rcx
    0000084b: 	cmpq	$0x2, %rcx
    0000084f: 	jbe	.Ltmp265 # Offset: 2127
    00000855: 	movq	%r12, %rcx
    00000858: 	movq	-0x70(%rsp), %rbx
    0000085d: 	imulq	%rax, %rcx
    00000861: 	addq	%r11, %rcx
    00000864: 	leaq	(%rbx,%rcx,4), %rcx
    00000868: 	movq	-0x38(%rsp), %rbx
    0000086d: 	leaq	(%rcx,%rbx), %rsi
    00000871: 	leaq	(%rsi,%rbx), %rdi
    00000875: 	movss	(%rsi), %xmm6
    00000879: 	movq	%rdx, %rsi
    0000087c: 	movss	(%rdi,%rbx), %xmm5
    00000881: 	movss	(%rdi), %xmm0
    00000885: 	andq	$-0x4, %rsi
    00000889: 	movq	-0x68(%rsp), %rbx
    0000088e: 	unpcklps	%xmm5, %xmm0
    00000891: 	movss	(%rcx), %xmm5
    00000895: 	leaq	(%rax,%rbx), %rcx
    00000899: 	movq	-0x58(%rsp), %rbx
    0000089e: 	unpcklps	%xmm6, %xmm5
    000008a1: 	movlhps	%xmm0, %xmm5
    000008a4: 	movups	(%r13,%rcx,4), %xmm0
    000008aa: 	leaq	(%rax,%rbx), %rcx
    000008ae: 	movq	-0x60(%rsp), %rbx
    000008b3: 	mulps	%xmm5, %xmm0
    000008b6: 	addss	%xmm0, %xmm1
    000008ba: 	movaps	%xmm0, %xmm6
    000008bd: 	shufps	$0x55, %xmm0, %xmm6
    000008c1: 	addss	%xmm1, %xmm6
    000008c5: 	movaps	%xmm0, %xmm1
    000008c8: 	unpckhps	%xmm0, %xmm1
    000008cb: 	shufps	$0xff, %xmm0, %xmm0
    000008cf: 	addss	%xmm6, %xmm1
    000008d3: 	addss	%xmm0, %xmm1
    000008d7: 	movups	(%r13,%rcx,4), %xmm0
    000008dd: 	leaq	(%rax,%rbx), %rcx
    000008e1: 	movq	-0x50(%rsp), %rbx
    000008e6: 	mulps	%xmm5, %xmm0
    000008e9: 	addss	%xmm0, %xmm2
    000008ed: 	movaps	%xmm0, %xmm6
    000008f0: 	shufps	$0x55, %xmm0, %xmm6
    000008f4: 	addss	%xmm2, %xmm6
    000008f8: 	movaps	%xmm0, %xmm2
    000008fb: 	unpckhps	%xmm0, %xmm2
    000008fe: 	shufps	$0xff, %xmm0, %xmm0
    00000902: 	addss	%xmm6, %xmm2
    00000906: 	addss	%xmm0, %xmm2
    0000090a: 	movups	(%r13,%rcx,4), %xmm0
    00000910: 	leaq	(%rax,%rbx), %rcx
    00000914: 	mulps	%xmm5, %xmm0
    00000917: 	addss	%xmm0, %xmm3
    0000091b: 	movaps	%xmm0, %xmm6
    0000091e: 	shufps	$0x55, %xmm0, %xmm6
    00000922: 	addss	%xmm3, %xmm6
    00000926: 	movaps	%xmm0, %xmm3
    00000929: 	unpckhps	%xmm0, %xmm3
    0000092c: 	shufps	$0xff, %xmm0, %xmm0
    00000930: 	addss	%xmm6, %xmm3
    00000934: 	addss	%xmm0, %xmm3
    00000938: 	movups	(%r13,%rcx,4), %xmm0
    0000093e: 	leaq	(%rax,%rsi), %rcx
    00000942: 	mulps	%xmm5, %xmm0
    00000945: 	addss	%xmm0, %xmm4
    00000949: 	movaps	%xmm0, %xmm5
    0000094c: 	shufps	$0x55, %xmm0, %xmm5
    00000950: 	addss	%xmm4, %xmm5
    00000954: 	movaps	%xmm0, %xmm4
    00000957: 	unpckhps	%xmm0, %xmm4
    0000095a: 	shufps	$0xff, %xmm0, %xmm0
    0000095e: 	addss	%xmm5, %xmm4
    00000962: 	addss	%xmm0, %xmm4
    00000966: 	cmpq	%rdx, %rsi
    00000969: 	je	.Ltmp264 # Offset: 2409
.Ltmp279:
    0000096f: 	subq	%rsi, %rdx
    00000972: 	cmpq	$0x1, %rdx
    00000976: 	je	.Ltmp266 # Offset: 2422
    0000097c: 	addq	%rax, %rsi
    0000097f: 	movq	-0x70(%rsp), %rbx
    00000984: 	movq	%rsi, %rax
    00000987: 	imulq	%r12, %rax
    0000098b: 	addq	%r11, %rax
    0000098e: 	leaq	(%rbx,%rax,4), %rax
    00000992: 	movq	-0x38(%rsp), %rbx
    00000997: 	movss	(%rax), %xmm5
    0000099b: 	movss	(%rax,%rbx), %xmm0
    000009a0: 	movq	-0x68(%rsp), %rax
    000009a5: 	addq	%rsi, %rax
    000009a8: 	unpcklps	%xmm0, %xmm5
    000009ab: 	movq	(%r13,%rax,4), %xmm0
    000009b2: 	movq	-0x58(%rsp), %rax
    000009b7: 	mulps	%xmm5, %xmm0
    000009ba: 	addq	%rsi, %rax
    000009bd: 	addss	%xmm0, %xmm1
    000009c1: 	shufps	$0xe5, %xmm0, %xmm0
    000009c5: 	addss	%xmm0, %xmm1
    000009c9: 	movq	(%r13,%rax,4), %xmm0
    000009d0: 	movq	-0x60(%rsp), %rax
    000009d5: 	mulps	%xmm5, %xmm0
    000009d8: 	addq	%rsi, %rax
    000009db: 	addq	-0x50(%rsp), %rsi
    000009e0: 	addss	%xmm0, %xmm2
    000009e4: 	shufps	$0xe5, %xmm0, %xmm0
    000009e8: 	addss	%xmm0, %xmm2
    000009ec: 	movq	(%r13,%rax,4), %xmm0
    000009f3: 	movq	%rdx, %rax
    000009f6: 	andq	$-0x2, %rax
    000009fa: 	mulps	%xmm5, %xmm0
    000009fd: 	addq	%rax, %rcx
    00000a00: 	addss	%xmm0, %xmm3
    00000a04: 	shufps	$0xe5, %xmm0, %xmm0
    00000a08: 	addss	%xmm0, %xmm3
    00000a0c: 	movq	(%r13,%rsi,4), %xmm0
    00000a13: 	mulps	%xmm5, %xmm0
    00000a16: 	addss	%xmm0, %xmm4
    00000a1a: 	shufps	$0xe5, %xmm0, %xmm0
    00000a1e: 	addss	%xmm0, %xmm4
    00000a22: 	cmpq	%rdx, %rax
    00000a25: 	je	.Ltmp264 # Offset: 2597
.Ltmp266:
    00000a27: 	movq	%r12, %rax
    00000a2a: 	movq	-0x70(%rsp), %rbx
    00000a2f: 	imulq	%rcx, %rax
    00000a33: 	addq	%r11, %rax
    00000a36: 	movss	(%rbx,%rax,4), %xmm0
    00000a3b: 	movq	-0x68(%rsp), %rax
    00000a40: 	addq	%rcx, %rax
    00000a43: 	movss	(%r13,%rax,4), %xmm5
    00000a4a: 	movq	-0x58(%rsp), %rax
    00000a4f: 	mulss	%xmm0, %xmm5
    00000a53: 	addq	%rcx, %rax
    00000a56: 	addss	%xmm5, %xmm1
    00000a5a: 	movss	(%r13,%rax,4), %xmm5
    00000a61: 	movq	-0x60(%rsp), %rax
    00000a66: 	mulss	%xmm0, %xmm5
    00000a6a: 	addq	%rcx, %rax
    00000a6d: 	addq	-0x50(%rsp), %rcx
    00000a72: 	addss	%xmm5, %xmm2
    00000a76: 	movss	(%r13,%rax,4), %xmm5
    00000a7d: 	mulss	%xmm0, %xmm5
    00000a81: 	mulss	(%r13,%rcx,4), %xmm0
    00000a88: 	addss	%xmm5, %xmm3
    00000a8c: 	addss	%xmm0, %xmm4
.Ltmp264:
    00000a90: 	movq	0x10(%rsp), %rax
    00000a95: 	movq	0x18(%rsp), %rbx
    00000a9a: 	movq	0x20(%rsp), %rdi
    00000a9f: 	movq	0x8(%rsp), %rsi
    00000aa4: 	addss	(%rax,%r11,4), %xmm2
    00000aaa: 	addss	(%rbx,%r11,4), %xmm3
    00000ab0: 	addss	(%rdi,%r11,4), %xmm4
    00000ab6: 	addss	(%rsi,%r11,4), %xmm1
    00000abc: 	addq	$0x4, -0x40(%rsp)
    00000ac2: 	addq	$0x4, -0x30(%rsp)
    00000ac8: 	movss	%xmm1, (%rsi,%r11,4)
    00000ace: 	addq	$0x4, -0x28(%rsp)
    00000ad4: 	movss	%xmm2, (%rax,%r11,4)
    00000ada: 	addq	$0x4, -0x20(%rsp)
    00000ae0: 	movss	%xmm3, (%rbx,%r11,4)
    00000ae6: 	movss	%xmm4, (%rdi,%r11,4)
    00000aec: 	addq	$0x1, %r11
    00000af0: 	cmpq	%r11, -0x10(%rsp)
    00000af5: 	jne	.Ltmp267 # Offset: 2805
.Ltmp258:
    00000afb: 	movq	-0x38(%rsp), %rdi
    00000b00: 	addq	%rbp, 0x8(%rsp)
    00000b05: 	addq	$0x4, 0xb0(%rsp)
    00000b0e: 	movq	0xb0(%rsp), %rax
    00000b16: 	addq	%rdi, -0x68(%rsp)
    00000b1b: 	addq	%rbp, 0x10(%rsp)
    00000b20: 	addq	%rdi, -0x60(%rsp)
    00000b25: 	addq	%rbp, 0x18(%rsp)
    00000b2a: 	addq	%rbp, 0x20(%rsp)
    00000b2f: 	addq	%rbp, 0x30(%rsp)
    00000b34: 	addq	%rbp, 0x28(%rsp)
    00000b39: 	addq	%rbp, 0x38(%rsp)
    00000b3e: 	addq	%rbp, 0x48(%rsp)
    00000b43: 	cmpq	0xe8(%rsp), %rax
    00000b4b: 	jb	.Ltmp268 # Offset: 2891
    00000b51: 	movq	0x108(%rsp), %rbx
    00000b59: 	cmpq	%rbx, 0xb0(%rsp)
    00000b61: 	jae	.Ltmp269 # Offset: 2913
.Ltmp281:
    00000b67: 	movq	0xe0(%rsp), %rbx
    00000b6f: 	cmpq	%rbx, -0x10(%rsp)
    00000b74: 	jbe	.Ltmp269 # Offset: 2932
    00000b7a: 	movq	-0x38(%rsp), %r8
    00000b7f: 	movq	0xb0(%rsp), %rax
    00000b87: 	movq	%r14, -0x58(%rsp)
    00000b8c: 	movq	-0x48(%rsp), %rcx
    00000b91: 	movq	-0x18(%rsp), %rdi
    00000b96: 	movq	%r13, -0x60(%rsp)
    00000b9b: 	movq	%rax, %r10
    00000b9e: 	imulq	%r8, %rax
    00000ba2: 	movq	%r15, -0x50(%rsp)
    00000ba7: 	movq	0x130(%rsp), %r9
    00000baf: 	imulq	%r12, %r10
    00000bb3: 	movq	0xd0(%rsp), %rbx
    00000bbb: 	movq	%rcx, %r15
    00000bbe: 	addq	%rax, %r9
    00000bc1: 	leaq	(%r10,%rcx), %rax
    00000bc5: 	leaq	(%r13,%rax,4), %r11
    00000bca: 	movq	(%rsp), %rax
    00000bce: 	movq	%r11, -0x68(%rsp)
    00000bd3: 	movq	0xc8(%rsp), %r11
    00000bdb: 	addq	%r10, %rax
    00000bde: 	leaq	(%r13,%rax,4), %rsi
.Ltmp275:
    00000be3: 	movq	0xd8(%rsp), %r14
    00000beb: 	movq	0xe0(%rsp), %r13
    00000bf3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp274:
    00000bf8: 	cmpq	%r15, %rdi
    00000bfb: 	jbe	.Ltmp270 # Offset: 3067
    00000c01: 	pxor	%xmm4, %xmm4
    00000c05: 	movq	-0x68(%rsp), %rdx
    00000c0a: 	movq	%r14, %rax
    00000c0d: 	movq	%r15, %rcx
    00000c10: 	movaps	%xmm4, %xmm3
    00000c13: 	movaps	%xmm4, %xmm2
    00000c16: 	movaps	%xmm4, %xmm0
    00000c19: 	nopl	(%rax) # Size: 7
.Ltmp271:
    00000c20: 	movss	(%rax), %xmm1
    00000c24: 	mulss	(%rdx), %xmm1
    00000c28: 	addq	$0x4, %rcx
    00000c2c: 	addq	$0x10, %rdx
    00000c30: 	addss	%xmm1, %xmm0
    00000c34: 	movss	(%rax,%r12,4), %xmm1
    00000c3a: 	mulss	-0xc(%rdx), %xmm1
    00000c3f: 	addss	%xmm1, %xmm2
    00000c43: 	movss	(%rax,%r11,4), %xmm1
    00000c49: 	mulss	-0x8(%rdx), %xmm1
    00000c4e: 	addss	%xmm1, %xmm3
    00000c52: 	movss	(%rax,%rbx,4), %xmm1
    00000c57: 	mulss	-0x4(%rdx), %xmm1
    00000c5c: 	addq	%rbp, %rax
    00000c5f: 	addss	%xmm1, %xmm4
    00000c63: 	cmpq	%rdi, %rcx
    00000c66: 	jb	.Ltmp271 # Offset: 3174
.Ltmp280:
    00000c68: 	cmpq	%rcx, (%rsp)
    00000c6c: 	jbe	.Ltmp272 # Offset: 3180
    00000c6e: 	movq	%r12, %rax
    00000c71: 	movq	-0x70(%rsp), %rdx
    00000c76: 	imulq	%rcx, %rax
    00000c7a: 	addq	%r10, %rcx
    00000c7d: 	addq	%r13, %rax
    00000c80: 	leaq	(%rdx,%rax,4), %rax
    00000c84: 	movq	-0x60(%rsp), %rdx
    00000c89: 	leaq	(%rdx,%rcx,4), %rdx
    00000c8d: 	nopl	(%rax) # Size: 3
.Ltmp273:
    00000c90: 	movss	(%rax), %xmm1
    00000c94: 	mulss	(%rdx), %xmm1
    00000c98: 	addq	$0x4, %rdx
    00000c9c: 	addq	%r8, %rax
    00000c9f: 	addss	%xmm1, %xmm0
    00000ca3: 	cmpq	%rsi, %rdx
    00000ca6: 	jne	.Ltmp273 # Offset: 3238
.Ltmp272:
    00000ca8: 	addss	%xmm0, %xmm2
    00000cac: 	addq	$0x4, %r14
    00000cb0: 	addss	%xmm3, %xmm2
    00000cb4: 	addss	%xmm4, %xmm2
    00000cb8: 	addss	(%r9,%r13,4), %xmm2
    00000cbe: 	movss	%xmm2, (%r9,%r13,4)
    00000cc4: 	addq	$0x1, %r13
    00000cc8: 	cmpq	%r13, -0x10(%rsp)
    00000ccd: 	jne	.Ltmp274 # Offset: 3277
    00000cd3: 	addq	%r8, -0x68(%rsp)
    00000cd8: 	addq	%r12, %r10
    00000cdb: 	addq	%r8, %r9
    00000cde: 	addq	%r8, %rsi
    00000ce1: 	addq	$0x1, 0xb0(%rsp)
    00000cea: 	movq	0xb0(%rsp), %rax
    00000cf2: 	cmpq	%rax, 0x108(%rsp)
    00000cfa: 	ja	.Ltmp275 # Offset: 3322
    00000d00: 	movq	-0x58(%rsp), %r14
    00000d05: 	movq	-0x60(%rsp), %r13
    00000d0a: 	movq	-0x50(%rsp), %r15
.Ltmp269:
    00000d0f: 	movq	0x150(%rsp), %rbx
    00000d17: 	subq	$-0x80, 0x50(%rsp)
    00000d1d: 	addq	%rbx, 0xd8(%rsp)
    00000d25: 	addq	$0x200, 0x120(%rsp)
    00000d31: 	cmpq	0x118(%rsp), %r12
    00000d39: 	ja	.Ltmp276 # Offset: 3385
    00000d3f: 	addq	$0x200, 0x128(%rsp)
    00000d4b: 	movq	%r15, %rax
    00000d4e: 	movq	%r14, %r15
    00000d51: 	movq	%rbp, %r14
    00000d54: 	movq	%r13, %rbp
    00000d57: 	movq	%r12, %r13
    00000d5a: 	movq	%rax, %r12
    00000d5d: 	cmpq	%r13, 0x110(%rsp)
    00000d65: 	jb	.Ltmp277 # Offset: 3429
.Ltmp256:
    00000d6b: 	addq	$0x160, %rsp
    00000d72: 	popq	%rbx
    00000d73: 	popq	%rbp
    00000d74: 	popq	%r12
    00000d76: 	popq	%r13
    00000d78: 	popq	%r14
    00000d7a: 	popq	%r15
    00000d7c: 	retq # Offset: 3452
    00000d7d: 	nopl	(%rax) # Size: 3
.Ltmp260:
    00000d80: 	pxor	%xmm4, %xmm4
    00000d84: 	movq	%rbx, %rax
    00000d87: 	movq	0xc0(%rsp), %r8
    00000d8f: 	movq	0xb8(%rsp), %rdi
    00000d97: 	movq	0x28(%rsp), %rsi
    00000d9c: 	movq	0x30(%rsp), %rcx
    00000da1: 	movaps	%xmm4, %xmm3
    00000da4: 	movaps	%xmm4, %xmm2
    00000da7: 	movq	-0x40(%rsp), %rdx
    00000dac: 	movq	-0x18(%rsp), %r9
    00000db1: 	movaps	%xmm4, %xmm1
    00000db4: 	movq	0xc8(%rsp), %r10
    00000dbc: 	movq	0xd0(%rsp), %rbx
    00000dc4: 	nopl	(%rax) # Size: 4
.Ltmp278:
    00000dc8: 	movss	(%rdx), %xmm8
    00000dcd: 	movss	(%rdx,%r12,4), %xmm0
    00000dd3: 	addq	$0x4, %rax
    00000dd7: 	addq	$0x10, %rcx
    00000ddb: 	movss	-0xc(%rcx), %xmm5
    00000de0: 	movss	-0x10(%rcx), %xmm9
    00000de6: 	addq	$0x10, %rsi
    00000dea: 	addq	$0x10, %rdi
    00000dee: 	movss	(%rdx,%r10,4), %xmm7
    00000df4: 	movss	(%rdx,%rbx,4), %xmm6
    00000df9: 	addq	$0x10, %r8
    00000dfd: 	addq	%rbp, %rdx
    00000e00: 	mulss	%xmm8, %xmm9
    00000e05: 	mulss	%xmm0, %xmm5
    00000e09: 	addss	%xmm9, %xmm5
    00000e0e: 	movss	-0x8(%rcx), %xmm9
    00000e14: 	mulss	%xmm7, %xmm9
    00000e19: 	addss	%xmm9, %xmm5
    00000e1e: 	movss	-0x4(%rcx), %xmm9
    00000e24: 	mulss	%xmm6, %xmm9
    00000e29: 	addss	%xmm9, %xmm5
    00000e2e: 	movss	-0x10(%rsi), %xmm9
    00000e34: 	mulss	%xmm8, %xmm9
    00000e39: 	addss	%xmm5, %xmm1
    00000e3d: 	movss	-0xc(%rsi), %xmm5
    00000e42: 	mulss	%xmm0, %xmm5
    00000e46: 	addss	%xmm9, %xmm5
    00000e4b: 	movss	-0x8(%rsi), %xmm9
    00000e51: 	mulss	%xmm7, %xmm9
    00000e56: 	addss	%xmm9, %xmm5
    00000e5b: 	movss	-0x4(%rsi), %xmm9
    00000e61: 	mulss	%xmm6, %xmm9
    00000e66: 	addss	%xmm9, %xmm5
    00000e6b: 	movss	-0x10(%rdi), %xmm9
    00000e71: 	mulss	%xmm8, %xmm9
    00000e76: 	addss	%xmm5, %xmm2
    00000e7a: 	movss	-0xc(%rdi), %xmm5
    00000e7f: 	mulss	-0x10(%r8), %xmm8
    00000e85: 	mulss	%xmm0, %xmm5
    00000e89: 	mulss	-0xc(%r8), %xmm0
    00000e8f: 	addss	%xmm9, %xmm5
    00000e94: 	movss	-0x8(%rdi), %xmm9
    00000e9a: 	addss	%xmm8, %xmm0
    00000e9f: 	mulss	%xmm7, %xmm9
    00000ea4: 	mulss	-0x8(%r8), %xmm7
    00000eaa: 	addss	%xmm9, %xmm5
    00000eaf: 	movss	-0x4(%rdi), %xmm9
    00000eb5: 	addss	%xmm7, %xmm0
    00000eb9: 	mulss	%xmm6, %xmm9
    00000ebe: 	mulss	-0x4(%r8), %xmm6
    00000ec4: 	addss	%xmm9, %xmm5
    00000ec9: 	addss	%xmm6, %xmm0
    00000ecd: 	addss	%xmm5, %xmm3
    00000ed1: 	addss	%xmm0, %xmm4
    00000ed5: 	cmpq	%r9, %rax
    00000ed8: 	jb	.Ltmp278 # Offset: 3800
    00000ede: 	jmp	.Ltmp262 # Offset: 3806
    00000ee3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp259:
    00000ee8: 	pxor	%xmm4, %xmm4
    00000eec: 	movq	%rbx, %rax
    00000eef: 	movaps	%xmm4, %xmm3
    00000ef2: 	movaps	%xmm4, %xmm2
    00000ef5: 	movaps	%xmm4, %xmm1
    00000ef8: 	jmp	.Ltmp262 # Offset: 3832
.Ltmp265:
    00000efd: 	movq	%rax, %rcx
    00000f00: 	xorl	%esi, %esi
    00000f02: 	jmp	.Ltmp279 # Offset: 3842
.Ltmp270:
    00000f07: 	pxor	%xmm4, %xmm4
    00000f0b: 	movq	%r15, %rcx
    00000f0e: 	movaps	%xmm4, %xmm3
    00000f11: 	movaps	%xmm4, %xmm2
    00000f14: 	movaps	%xmm4, %xmm0
    00000f17: 	jmp	.Ltmp280 # Offset: 3863
.Ltmp257:
    00000f1c: 	movq	$0x0, 0xb0(%rsp)
    00000f28: 	jmp	.Ltmp281 # Offset: 3880
DWARF CFI Instructions:
    <empty>
End of Function "_ZN28matmul_JIK_blocked_unrolled2IfEclEPKfS2_Pfmm.isra.0/1(*2)"

Binary Function "_ZN19matmul_JKI_unrolledIfEclEPKfS2_Pfmm.isra.0/1(*2)" after disassembly {
  All names   : _ZN19matmul_JKI_unrolledIfEclEPKfS2_Pfmm.isra.0/1
                _ZN19matmul_JKI_unrolledIfEclEPKfS2_Pfmm.isra.0/matrix_multiply.cpp/1
  Number      : 22
  State       : disassembled
  Address     : 0xb3d0
  Size        : 0xf91
  MaxSize     : 0xfa0
  Offset      : 0xb3d0
  Section     : .text
  Orc Section : .local.text._ZN19matmul_JKI_unrolledIfEclEPKfS2_Pfmm.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB021:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	subq	$0x150, %rsp
    00000011: 	movq	%rdi, 0xf8(%rsp)
    00000019: 	movq	%rcx, 0x108(%rsp)
    00000021: 	movq	%r8, -0x58(%rsp)
    00000026: 	testq	%rcx, %rcx
    00000029: 	je	.Ltmp282 # Offset: 41
    0000002f: 	movq	%rsi, %r11
    00000032: 	leaq	-0x3(%r8), %rsi
    00000036: 	movq	%r8, %rax
    00000039: 	movq	%rdx, %r12
    0000003c: 	movq	%rsi, 0xe8(%rsp)
    00000044: 	leaq	0x10(%rdx), %rsi
    00000048: 	subq	$0x4, %rax
    0000004c: 	leaq	(,%r8,4), %rdi
    00000054: 	movq	%rsi, -0x8(%rsp)
    00000059: 	movq	%rax, %rdx
    0000005c: 	movq	%r12, %r15
    0000005f: 	movq	%r11, %r13
    00000062: 	movq	%rsi, 0x140(%rsp)
    0000006a: 	movq	%r8, %rsi
    0000006d: 	shrq	$0x2, %rdx
    00000071: 	movdqa	DATAat0x2d9b0(%rip), %xmm10
    0000007a: 	shlq	$0x4, %rsi
    0000007e: 	movq	%rdi, -0x10(%rsp)
    00000083: 	addq	$0x1, %rdx
    00000087: 	movdqa	DATAat0x2d9c0(%rip), %xmm9
    00000090: 	movq	%rsi, 0x10(%rsp)
    00000095: 	leaq	(%r11,%rdi), %rsi
    00000099: 	movq	%rsi, 0x120(%rsp)
    000000a1: 	addq	%rdi, %rsi
    000000a4: 	movq	%rsi, 0x128(%rsp)
    000000ac: 	addq	%rdi, %rsi
    000000af: 	movq	%rax, %rdi
    000000b2: 	movq	%r8, %rax
    000000b5: 	andq	$-0x4, %rdi
    000000b9: 	movq	%rsi, 0x118(%rsp)
    000000c1: 	leaq	(%r8,%r8), %rsi
    000000c5: 	subq	%rdi, %rax
    000000c8: 	movq	%rsi, 0x110(%rsp)
    000000d0: 	movq	%rdi, %rsi
    000000d3: 	movq	%rdi, 0x130(%rsp)
    000000db: 	leaq	-0x5(%rax), %rcx
    000000df: 	movq	%rdx, 0x138(%rsp)
    000000e7: 	leaq	0x4(%rdi), %rdx
    000000eb: 	movq	%rdi, 0x20(%rsp)
    000000f0: 	leaq	-0x4(%rax), %rdi
    000000f4: 	movq	%rdi, 0x60(%rsp)
    000000f9: 	andq	$-0x4, %rdi
    000000fd: 	movq	%rdx, -0x18(%rsp)
    00000102: 	addq	%rdi, %rdx
    00000105: 	movq	%rax, 0x28(%rsp)
    0000010a: 	subq	%rdi, %rax
    0000010d: 	movq	%rdx, 0xb8(%rsp)
    00000115: 	leaq	0x5(%rsi), %rdx
    00000119: 	movq	%rdx, 0xe0(%rsp)
    00000121: 	leaq	0x6(%rsi), %rdx
    00000125: 	addq	$0x7, %rsi
    00000129: 	movq	%rax, 0xc0(%rsp)
    00000131: 	subq	$0x4, %rax
    00000135: 	movq	%rcx, 0x58(%rsp)
    0000013a: 	movq	%rdi, 0x88(%rsp)
    00000142: 	movq	%rdx, 0xf0(%rsp)
    0000014a: 	movq	%rsi, 0x100(%rsp)
    00000152: 	movq	$0x0, -0x40(%rsp)
    0000015b: 	movq	$0x0, 0xd0(%rsp)
    00000167: 	movq	%rax, 0xc8(%rsp)
    0000016f: 	nop # Size: 1
.Ltmp301:
    00000170: 	xorl	%r14d, %r14d
    00000173: 	xorl	%r11d, %r11d
    00000176: 	cmpq	$0x0, 0xe8(%rsp)
    0000017f: 	je	.Ltmp283 # Offset: 383
    00000185: 	movq	-0x40(%rsp), %rsi
    0000018a: 	movq	%r12, -0x50(%rsp)
    0000018f: 	movq	%r13, %rdi
    00000192: 	movq	0x130(%rsp), %rax
    0000019a: 	movq	0xf8(%rsp), %rbx
    000001a2: 	movq	$0x0, -0x78(%rsp)
    000001ab: 	leaq	(,%rsi,4), %rdx
    000001b3: 	addq	%rsi, %rax
    000001b6: 	leaq	(%rbx,%rdx), %r14
    000001ba: 	addq	%r12, %rdx
    000001bd: 	shlq	$0x2, %rax
    000001c1: 	movq	%rdx, 0x38(%rsp)
    000001c6: 	movq	0x128(%rsp), %rdx
    000001ce: 	leaq	0x10(%rbx,%rax), %rbx
    000001d3: 	addq	0x140(%rsp), %rax
    000001db: 	movq	%rax, 0x30(%rsp)
    000001e0: 	movq	0x20(%rsp), %rax
    000001e5: 	movq	%rbx, (%rsp)
    000001e9: 	movq	-0x58(%rsp), %rbx
    000001ee: 	leaq	0x4(%rax,%rsi), %rax
    000001f3: 	movq	%rax, 0x18(%rsp)
    000001f8: 	leaq	(%r12,%rax,4), %rax
    000001fc: 	leaq	(%rbx,%rbx,2), %rbx
    00000200: 	movq	%rax, -0x60(%rsp)
    00000205: 	movq	-0x18(%rsp), %rax
    0000020a: 	movq	%rbx, 0x8(%rsp)
    0000020f: 	movq	0x138(%rsp), %rbx
    00000217: 	addq	%rsi, %rax
    0000021a: 	leaq	(%r12,%rax,4), %rax
    0000021e: 	movq	%rbx, -0x48(%rsp)
    00000223: 	movq	%rax, 0x40(%rsp)
    00000228: 	movq	0xe0(%rsp), %rax
    00000230: 	addq	%rsi, %rax
    00000233: 	leaq	(%r12,%rax,4), %rax
    00000237: 	movq	%rax, 0x48(%rsp)
    0000023c: 	movq	0xf0(%rsp), %rax
    00000244: 	addq	%rsi, %rax
    00000247: 	leaq	(%r12,%rax,4), %rax
    0000024b: 	movq	%rax, 0x50(%rsp)
    00000250: 	movq	0x100(%rsp), %rax
    00000258: 	addq	%rsi, %rax
    0000025b: 	movq	0x118(%rsp), %rsi
    00000263: 	leaq	(%r12,%rax,4), %rax
    00000267: 	movq	%rax, 0x68(%rsp)
    0000026c: 	movq	0x110(%rsp), %rax
    00000274: 	movq	%rax, -0x70(%rsp)
    00000279: 	movq	0x120(%rsp), %rax
    00000281: 	nopl	(%rax) # Size: 7
.Ltmp290:
    00000288: 	movq	-0x58(%rsp), %rbx
    0000028d: 	movq	-0x78(%rsp), %rbp
    00000292: 	leaq	0x10(%rdi), %rcx
    00000296: 	movss	(%r14), %xmm2
    0000029b: 	movss	0x4(%r14), %xmm3
    000002a1: 	addq	%rbx, %rbp
    000002a4: 	addq	-0x70(%rsp), %rbx
    000002a9: 	cmpq	%rcx, %r15
    000002ac: 	movss	0x8(%r14), %xmm4
    000002b2: 	movq	%rbx, -0x68(%rsp)
    000002b7: 	movq	-0x8(%rsp), %rbx
    000002bc: 	setae	%r8b
    000002c0: 	movss	0xc(%r14), %xmm5
    000002c6: 	cmpq	%rbx, %rdi
    000002c9: 	setae	%cl
    000002cc: 	orl	%ecx, %r8d
    000002cf: 	leaq	0x10(%rax), %rcx
    000002d3: 	cmpq	%rcx, %r15
    000002d6: 	setae	%cl
    000002d9: 	cmpq	%rbx, %rax
    000002dc: 	setae	%r9b
    000002e0: 	orl	%r9d, %ecx
    000002e3: 	andl	%r8d, %ecx
    000002e6: 	leaq	0x10(%rdx), %r8
    000002ea: 	cmpq	%r8, %r15
    000002ed: 	setae	%r8b
    000002f1: 	cmpq	%rbx, %rdx
    000002f4: 	setae	%r9b
    000002f8: 	orl	%r9d, %r8d
    000002fb: 	testb	%r8b, %cl
    000002fe: 	je	.Ltmp284 # Offset: 766
    00000304: 	leaq	0x10(%rsi), %rcx
    00000308: 	cmpq	%rcx, %r15
    0000030b: 	setae	%r8b
    0000030f: 	cmpq	%rbx, %rsi
    00000312: 	setae	%cl
    00000315: 	orb	%r8b, %cl
    00000318: 	je	.Ltmp284 # Offset: 792
    0000031e: 	movq	-0x48(%rsp), %rbx
    00000323: 	movaps	%xmm2, %xmm11
    00000327: 	movaps	%xmm3, %xmm8
    0000032b: 	movaps	%xmm4, %xmm7
    0000032e: 	movaps	%xmm5, %xmm6
    00000331: 	xorl	%ecx, %ecx
    00000333: 	xorl	%r8d, %r8d
    00000336: 	shufps	$0x0, %xmm11, %xmm11
    0000033b: 	shufps	$0x0, %xmm8, %xmm8
    00000340: 	shufps	$0x0, %xmm7, %xmm7
    00000344: 	shufps	$0x0, %xmm6, %xmm6
    00000348: 	nopl	(%rax,%rax) # Size: 8
.Ltmp285:
    00000350: 	movups	(%rdi,%rcx), %xmm0
    00000354: 	movups	(%rax,%rcx), %xmm1
    00000358: 	addq	$0x1, %r8
    0000035c: 	mulps	%xmm8, %xmm1
    00000360: 	mulps	%xmm11, %xmm0
    00000364: 	addps	%xmm1, %xmm0
    00000367: 	movups	(%rdx,%rcx), %xmm1
    0000036b: 	mulps	%xmm7, %xmm1
    0000036e: 	addps	%xmm1, %xmm0
    00000371: 	movups	(%rsi,%rcx), %xmm1
    00000375: 	mulps	%xmm6, %xmm1
    00000378: 	addps	%xmm1, %xmm0
    0000037b: 	movups	(%r15,%rcx), %xmm1
    00000380: 	addps	%xmm1, %xmm0
    00000383: 	movups	%xmm0, (%r15,%rcx)
    00000388: 	addq	$0x10, %rcx
    0000038c: 	cmpq	%rbx, %r8
    0000038f: 	jb	.Ltmp285 # Offset: 911
.Ltmp303:
    00000391: 	movq	%rbx, -0x48(%rsp)
    00000396: 	movq	-0x18(%rsp), %rcx
    0000039b: 	cmpq	%rcx, -0x58(%rsp)
    000003a0: 	jbe	.Ltmp286 # Offset: 928
    000003a6: 	movq	0x20(%rsp), %rbx
    000003ab: 	movq	-0x70(%rsp), %rcx
    000003b0: 	movq	-0x78(%rsp), %r9
    000003b5: 	addq	%rbx, %rcx
    000003b8: 	leaq	(%rbx,%rbp), %r8
    000003bc: 	addq	%rbx, %r9
    000003bf: 	leaq	0x14(,%rcx,4), %r10
    000003c7: 	addq	-0x68(%rsp), %rbx
    000003cc: 	movq	%rcx, -0x30(%rsp)
    000003d1: 	movq	-0x60(%rsp), %rcx
    000003d6: 	leaq	(%r13,%r10), %r12
    000003db: 	movq	%rbx, -0x38(%rsp)
    000003e0: 	leaq	0x14(,%rbx,4), %rbx
    000003e8: 	movq	%rbx, -0x28(%rsp)
    000003ed: 	leaq	0x14(,%r9,4), %rbx
    000003f5: 	leaq	0x14(,%r8,4), %r11
    000003fd: 	subq	%r12, %rcx
    00000400: 	cmpq	$0x8, %rcx
    00000404: 	leaq	(%r13,%rbx), %rcx
    00000409: 	movq	-0x60(%rsp), %rbx
    0000040e: 	seta	%r12b
    00000412: 	subq	%rcx, %rbx
    00000415: 	cmpq	$0x8, %rbx
    00000419: 	movq	-0x60(%rsp), %rbx
    0000041e: 	seta	%cl
    00000421: 	andl	%r12d, %ecx
    00000424: 	cmpq	$0x5, 0x28(%rsp)
    0000042a: 	setne	%r12b
    0000042e: 	andl	%r12d, %ecx
    00000431: 	leaq	(%r13,%r11), %r12
    00000436: 	subq	%r12, %rbx
    00000439: 	cmpq	$0x8, %rbx
    0000043d: 	seta	%r12b
    00000441: 	testb	%r12b, %cl
    00000444: 	je	.Ltmp287 # Offset: 1092
    0000044a: 	movq	-0x28(%rsp), %rbx
    0000044f: 	movq	-0x60(%rsp), %rcx
    00000454: 	movq	%rbx, %r12
    00000457: 	addq	%r13, %r12
    0000045a: 	subq	%r12, %rcx
    0000045d: 	cmpq	$0x8, %rcx
    00000461: 	jbe	.Ltmp287 # Offset: 1121
    00000467: 	cmpq	$0x2, 0x58(%rsp)
    0000046d: 	jbe	.Ltmp288 # Offset: 1133
    00000473: 	leaq	0x14(,%r9,4), %r12
    0000047b: 	movaps	%xmm2, %xmm1
    0000047e: 	movaps	%xmm3, %xmm6
    00000481: 	movq	-0x60(%rsp), %rcx
    00000486: 	movups	-0x4(%r13,%r12), %xmm0
    0000048c: 	shufps	$0x0, %xmm1, %xmm1
    00000490: 	shufps	$0x0, %xmm6, %xmm6
    00000494: 	movups	(%rcx), %xmm7
    00000497: 	mulps	%xmm1, %xmm0
    0000049a: 	movups	-0x4(%r13,%r11), %xmm1
    000004a0: 	movaps	%xmm7, -0x28(%rsp)
    000004a5: 	mulps	%xmm6, %xmm1
    000004a8: 	movaps	%xmm4, %xmm6
    000004ab: 	shufps	$0x0, %xmm6, %xmm6
    000004af: 	addps	%xmm1, %xmm0
    000004b2: 	movups	-0x4(%r13,%r10), %xmm1
    000004b8: 	movq	0x88(%rsp), %r10
    000004c0: 	mulps	%xmm6, %xmm1
    000004c3: 	movaps	%xmm5, %xmm6
    000004c6: 	shufps	$0x0, %xmm6, %xmm6
    000004ca: 	addps	%xmm1, %xmm0
    000004cd: 	movups	-0x4(%r13,%rbx), %xmm1
    000004d3: 	mulps	%xmm6, %xmm1
    000004d6: 	addps	%xmm1, %xmm0
    000004d9: 	addps	%xmm7, %xmm0
    000004dc: 	movups	%xmm0, (%rcx)
    000004df: 	cmpq	%r10, 0x60(%rsp)
    000004e4: 	je	.Ltmp286 # Offset: 1252
    000004ea: 	movq	0xc8(%rsp), %r12
    000004f2: 	movq	0xb8(%rsp), %rcx
    000004fa: 	cmpq	$0x5, 0xc0(%rsp)
    00000503: 	je	.Ltmp289 # Offset: 1283
.Ltmp307:
    00000509: 	leaq	0x4(%r9,%r10), %r9
    0000050e: 	movaps	%xmm2, %xmm1
    00000511: 	movq	0x18(%rsp), %rbx
    00000516: 	movaps	%xmm3, %xmm6
    00000519: 	movq	(%r13,%r9,4), %xmm0
    00000520: 	leaq	0x4(%r8,%r10), %r8
    00000525: 	shufps	$0xe0, %xmm1, %xmm1
    00000529: 	shufps	$0xe0, %xmm6, %xmm6
    0000052d: 	leaq	(%rbx,%r10), %r11
    00000531: 	movq	-0x50(%rsp), %rbx
    00000536: 	mulps	%xmm1, %xmm0
    00000539: 	movq	(%r13,%r8,4), %xmm1
    00000540: 	leaq	(%rbx,%r11,4), %r11
    00000544: 	movq	-0x30(%rsp), %rbx
    00000549: 	mulps	%xmm6, %xmm1
    0000054c: 	movaps	%xmm4, %xmm6
    0000054f: 	leaq	0x4(%rbx,%r10), %r8
    00000554: 	shufps	$0xe0, %xmm6, %xmm6
    00000558: 	movq	-0x38(%rsp), %rbx
    0000055d: 	addps	%xmm1, %xmm0
    00000560: 	movq	(%r13,%r8,4), %xmm1
    00000567: 	leaq	0x4(%rbx,%r10), %r8
    0000056c: 	mulps	%xmm6, %xmm1
    0000056f: 	movaps	%xmm5, %xmm6
    00000572: 	shufps	$0xe0, %xmm6, %xmm6
    00000576: 	addps	%xmm1, %xmm0
    00000579: 	movq	(%r13,%r8,4), %xmm1
    00000580: 	movq	%r12, %r8
    00000583: 	andq	$-0x2, %r8
    00000587: 	mulps	%xmm6, %xmm1
    0000058a: 	addq	%r8, %rcx
    0000058d: 	addps	%xmm1, %xmm0
    00000590: 	movq	(%r11), %xmm1
    00000595: 	addps	%xmm1, %xmm0
    00000598: 	movlps	%xmm0, (%r11)
    0000059c: 	cmpq	%r12, %r8
    0000059f: 	je	.Ltmp286 # Offset: 1439
.Ltmp289:
    000005a1: 	movq	-0x78(%rsp), %r9
    000005a6: 	movq	-0x40(%rsp), %rbx
    000005ab: 	addq	%rcx, %r9
    000005ae: 	leaq	(%rbx,%rcx), %r8
    000005b2: 	movq	-0x50(%rsp), %rbx
    000005b7: 	mulss	(%r13,%r9,4), %xmm2
    000005be: 	leaq	(%rbp,%rcx), %r9
    000005c3: 	mulss	(%r13,%r9,4), %xmm3
    000005ca: 	movq	-0x70(%rsp), %r9
    000005cf: 	leaq	(%rbx,%r8,4), %r8
    000005d3: 	addq	%rcx, %r9
    000005d6: 	addq	-0x68(%rsp), %rcx
    000005db: 	mulss	(%r13,%r9,4), %xmm4
    000005e2: 	mulss	(%r13,%rcx,4), %xmm5
    000005e9: 	addss	%xmm3, %xmm2
    000005ed: 	addss	%xmm2, %xmm4
    000005f1: 	addss	%xmm4, %xmm5
    000005f5: 	addss	(%r8), %xmm5
    000005fa: 	movss	%xmm5, (%r8)
.Ltmp286:
    000005ff: 	movq	0x10(%rsp), %rbx
    00000604: 	movq	0x8(%rsp), %rcx
    00000609: 	addq	$0x10, %r14
    0000060d: 	addq	%rbx, %rdi
    00000610: 	addq	%rbx, %rax
    00000613: 	addq	%rbx, %rdx
    00000616: 	addq	%rbx, %rsi
    00000619: 	movq	-0x68(%rsp), %rbx
    0000061e: 	addq	%rcx, %rbp
    00000621: 	movq	%rbp, -0x78(%rsp)
    00000626: 	addq	%rcx, %rbx
    00000629: 	movq	%rbx, -0x70(%rsp)
    0000062e: 	cmpq	(%rsp), %r14
    00000632: 	jne	.Ltmp290 # Offset: 1586
    00000638: 	movq	-0x18(%rsp), %rax
    0000063d: 	movq	-0x50(%rsp), %r12
    00000642: 	movq	0xe8(%rsp), %r14
    0000064a: 	movq	%rax, %r11
    0000064d: 	cmpq	%rax, -0x58(%rsp)
    00000652: 	jbe	.Ltmp291 # Offset: 1618
.Ltmp283:
    00000658: 	movq	-0x40(%rsp), %r9
    0000065d: 	movq	0xf8(%rsp), %rax
    00000665: 	movq	%r15, -0x48(%rsp)
    0000066a: 	movq	%r11, %rbp
    0000066d: 	movq	-0x58(%rsp), %r8
    00000672: 	movq	-0x10(%rsp), %rcx
    00000677: 	leaq	(,%r9,4), %rsi
    0000067f: 	addq	%rsi, %rax
    00000682: 	imulq	%r11, %rcx
    00000686: 	movq	%r8, %rdx
    00000689: 	movq	%rax, -0x50(%rsp)
    0000068e: 	imulq	%r11, %rdx
    00000692: 	leaq	-0x1(%r14), %rax
    00000696: 	movq	%rax, -0x30(%rsp)
    0000069b: 	shrq	$0x2, %rax
    0000069f: 	leaq	0x1(%rax), %rdi
    000006a3: 	addq	%r13, %rcx
    000006a6: 	movq	%rdi, %rax
    000006a9: 	movq	%rdi, (%rsp)
    000006ad: 	andq	$-0x4, %rdi
    000006b1: 	shrq	$0x2, %rax
    000006b5: 	leaq	(,%rdi,4), %rbx
    000006bd: 	movq	%rdi, -0x28(%rsp)
    000006c2: 	movq	%r9, %rdi
    000006c5: 	shlq	$0x6, %rax
    000006c9: 	movq	%rbx, 0x48(%rsp)
    000006ce: 	leaq	(%rax,%r15), %r10
    000006d2: 	movq	%rbx, %rax
    000006d5: 	addq	%r9, %rax
    000006d8: 	movq	%r10, -0x70(%rsp)
    000006dd: 	shlq	$0x2, %rax
    000006e1: 	leaq	(%r12,%rax), %r9
    000006e5: 	movq	%r9, 0x18(%rsp)
    000006ea: 	leaq	0x4(%r12,%rax), %r9
    000006ef: 	movq	%r9, 0x30(%rsp)
    000006f4: 	leaq	0x8(%r12,%rax), %r9
    000006f9: 	leaq	0xc(%r12,%rax), %rax
    000006fe: 	movq	%rax, 0x40(%rsp)
    00000703: 	leaq	0x4(%rbx), %rax
    00000707: 	movq	%rax, 0x8(%rsp)
    0000070c: 	addq	%rdi, %rax
    0000070f: 	shlq	$0x2, %rax
    00000713: 	movq	%r9, 0x38(%rsp)
    00000718: 	leaq	(%r12,%rax), %r9
    0000071c: 	movq	%r9, 0x68(%rsp)
    00000721: 	leaq	0x4(%r12,%rax), %r9
    00000726: 	movq	%r9, 0x70(%rsp)
    0000072b: 	leaq	0x8(%r12,%rax), %r9
    00000730: 	leaq	0xc(%r12,%rax), %rax
    00000735: 	movq	%rax, 0x80(%rsp)
    0000073d: 	leaq	0x8(%rbx), %rax
    00000741: 	movq	%rax, 0x50(%rsp)
    00000746: 	addq	%rdi, %rax
    00000749: 	shlq	$0x2, %rax
    0000074d: 	movq	%r9, 0x78(%rsp)
    00000752: 	leaq	(%r12,%rax), %r9
    00000756: 	movq	%r9, 0xb0(%rsp)
    0000075e: 	leaq	0x4(%r12,%rax), %r9
    00000763: 	movq	%r9, 0xa8(%rsp)
    0000076b: 	leaq	0x8(%r12,%rax), %r9
    00000770: 	leaq	0xc(%r12,%rax), %rax
    00000775: 	movq	%rax, 0x98(%rsp)
    0000077d: 	leaq	0xc(%rbx), %rax
    00000781: 	movq	%r14, %rbx
    00000784: 	movq	%rax, 0x90(%rsp)
    0000078c: 	leaq	(%r12,%rsi), %rax
    00000790: 	movq	%r8, %rsi
    00000793: 	movq	%rax, 0xd8(%rsp)
    0000079b: 	leaq	0x40(%r15), %rax
    0000079f: 	movq	%r9, 0xa0(%rsp)
    000007a7: 	movq	%rax, -0x38(%rsp)
    000007ac: 	nopl	(%rax) # Size: 4
.Ltmp300:
    000007b0: 	movq	-0x50(%rsp), %rax
    000007b5: 	movss	(%rax,%rbp,4), %xmm0
    000007ba: 	testq	%rbx, %rbx
    000007bd: 	je	.Ltmp292 # Offset: 1981
    000007c3: 	movq	-0x48(%rsp), %r10
    000007c8: 	cmpq	-0x38(%rsp), %rcx
    000007cd: 	leaq	0x40(%rcx), %rax
    000007d1: 	setae	%r8b
    000007d5: 	cmpq	%rax, %r10
    000007d8: 	setae	%al
    000007db: 	orb	%r8b, %al
    000007de: 	je	.Ltmp293 # Offset: 2014
    000007e4: 	cmpq	$0xb, -0x30(%rsp)
    000007ea: 	jbe	.Ltmp293 # Offset: 2026
    000007f0: 	movq	-0x70(%rsp), %r14
    000007f5: 	movaps	%xmm0, %xmm5
    000007f8: 	movq	%rcx, %r8
    000007fb: 	movq	%r10, %rax
    000007fe: 	movdqa	DATAat0x2d9a0(%rip), %xmm7
    00000806: 	shufps	$0x0, %xmm5, %xmm5
    0000080a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp294:
    00000810: 	movups	0x10(%rax), %xmm4
    00000814: 	movups	(%rax), %xmm12
    00000818: 	movdqa	%xmm7, %xmm6
    0000081c: 	addq	$0x40, %rax
    00000820: 	movups	0x10(%r8), %xmm3
    00000825: 	movups	0x20(%r8), %xmm2
    0000082a: 	paddq	%xmm10, %xmm7
    0000082f: 	paddq	%xmm9, %xmm6
    00000834: 	movups	0x30(%r8), %xmm1
    00000839: 	addq	$0x40, %r8
    0000083d: 	mulps	%xmm5, %xmm3
    00000840: 	mulps	%xmm5, %xmm2
    00000843: 	mulps	%xmm5, %xmm1
    00000846: 	addps	%xmm4, %xmm3
    00000849: 	movups	-0x20(%rax), %xmm4
    0000084d: 	addps	%xmm4, %xmm2
    00000850: 	movups	-0x10(%rax), %xmm4
    00000854: 	addps	%xmm4, %xmm1
    00000857: 	movups	-0x40(%r8), %xmm4
    0000085c: 	movups	%xmm3, -0x30(%rax)
    00000860: 	movups	%xmm2, -0x20(%rax)
    00000864: 	mulps	%xmm5, %xmm4
    00000867: 	movups	%xmm1, -0x10(%rax)
    0000086b: 	addps	%xmm12, %xmm4
    0000086f: 	movups	%xmm4, -0x40(%rax)
    00000873: 	cmpq	%rax, %r14
    00000876: 	jne	.Ltmp294 # Offset: 2166
    00000878: 	movhlps	%xmm6, %xmm7
    0000087b: 	movq	%r14, -0x70(%rsp)
    00000880: 	movq	(%rsp), %r11
    00000884: 	movq	%xmm7, %rax
    00000889: 	cmpq	%r11, -0x28(%rsp)
    0000088e: 	je	.Ltmp295 # Offset: 2190
    00000894: 	movq	0x48(%rsp), %rax
    00000899: 	movq	0x18(%rsp), %r10
    0000089e: 	movq	0x30(%rsp), %r11
    000008a3: 	addq	%rdx, %rax
    000008a6: 	movss	(%r13,%rax,4), %xmm1
    000008ad: 	mulss	%xmm0, %xmm1
    000008b1: 	addss	(%r10), %xmm1
    000008b6: 	movss	%xmm1, (%r10)
    000008bb: 	movss	0x4(%r13,%rax,4), %xmm1
    000008c2: 	movq	0x38(%rsp), %r10
    000008c7: 	mulss	%xmm0, %xmm1
    000008cb: 	addss	(%r11), %xmm1
    000008d0: 	movss	%xmm1, (%r11)
    000008d5: 	movss	0x8(%r13,%rax,4), %xmm1
    000008dc: 	mulss	%xmm0, %xmm1
    000008e0: 	addss	(%r10), %xmm1
    000008e5: 	movss	%xmm1, (%r10)
    000008ea: 	movss	0xc(%r13,%rax,4), %xmm1
    000008f1: 	movq	0x40(%rsp), %rax
    000008f6: 	mulss	%xmm0, %xmm1
    000008fa: 	addss	(%rax), %xmm1
    000008fe: 	movss	%xmm1, (%rax)
    00000902: 	movq	0x8(%rsp), %rax
    00000907: 	cmpq	%rbx, %rax
    0000090a: 	jae	.Ltmp295 # Offset: 2314
    00000910: 	addq	%rdx, %rax
    00000913: 	movq	0x68(%rsp), %r14
    00000918: 	movq	0x70(%rsp), %r11
    0000091d: 	movss	(%r13,%rax,4), %xmm1
    00000924: 	mulss	%xmm0, %xmm1
    00000928: 	addss	(%r14), %xmm1
    0000092d: 	movss	%xmm1, (%r14)
    00000932: 	movss	0x4(%r13,%rax,4), %xmm1
    00000939: 	movq	0x78(%rsp), %r14
    0000093e: 	mulss	%xmm0, %xmm1
    00000942: 	addss	(%r11), %xmm1
    00000947: 	movss	%xmm1, (%r11)
    0000094c: 	movss	0x8(%r13,%rax,4), %xmm1
    00000953: 	mulss	%xmm0, %xmm1
    00000957: 	addss	(%r14), %xmm1
    0000095c: 	movss	%xmm1, (%r14)
    00000961: 	movss	0xc(%r13,%rax,4), %xmm1
    00000968: 	movq	0x80(%rsp), %rax
    00000970: 	mulss	%xmm0, %xmm1
    00000974: 	addss	(%rax), %xmm1
    00000978: 	movss	%xmm1, (%rax)
    0000097c: 	movq	0x50(%rsp), %rax
    00000981: 	cmpq	%rbx, %rax
    00000984: 	jae	.Ltmp295 # Offset: 2436
    00000986: 	addq	%rdx, %rax
    00000989: 	movq	0xb0(%rsp), %r10
    00000991: 	movq	0xa8(%rsp), %r11
    00000999: 	movss	(%r13,%rax,4), %xmm1
    000009a0: 	movq	0xa0(%rsp), %r14
    000009a8: 	mulss	%xmm0, %xmm1
    000009ac: 	addss	(%r10), %xmm1
    000009b1: 	movss	%xmm1, (%r10)
    000009b6: 	movss	0x4(%r13,%rax,4), %xmm1
    000009bd: 	mulss	%xmm0, %xmm1
    000009c1: 	addss	(%r11), %xmm1
    000009c6: 	movss	%xmm1, (%r11)
    000009cb: 	movss	0x8(%r13,%rax,4), %xmm1
    000009d2: 	mulss	%xmm0, %xmm1
    000009d6: 	addss	(%r14), %xmm1
    000009db: 	movss	%xmm1, (%r14)
    000009e0: 	movss	0xc(%r13,%rax,4), %xmm1
    000009e7: 	movq	0x98(%rsp), %rax
    000009ef: 	mulss	%xmm0, %xmm1
    000009f3: 	addss	(%rax), %xmm1
    000009f7: 	movss	%xmm1, (%rax)
    000009fb: 	movq	0x90(%rsp), %rax
.Ltmp295:
    00000a03: 	cmpq	%rax, %rsi
    00000a06: 	jbe	.Ltmp296 # Offset: 2566
.Ltmp305:
    00000a0c: 	leaq	(%rax,%rdx), %r15
    00000a10: 	leaq	(%rax,%rdi), %r8
    00000a14: 	movq	%rsi, %r9
    00000a17: 	movq	%r15, -0x78(%rsp)
    00000a1c: 	leaq	(%r12,%r8,4), %r10
    00000a20: 	leaq	0x1(%rax), %r11
    00000a24: 	subq	%rax, %r9
    00000a27: 	leaq	0x4(,%r15,4), %r15
    00000a2f: 	movq	%r10, %r14
    00000a32: 	movq	%r15, -0x68(%rsp)
    00000a37: 	addq	%r13, %r15
    00000a3a: 	subq	%r15, %r14
    00000a3d: 	cmpq	$0x8, %r14
    00000a41: 	jbe	.Ltmp297 # Offset: 2625
    00000a47: 	cmpq	%r11, %rsi
    00000a4a: 	setae	%r15b
    00000a4e: 	cmpq	$0x1, %r9
    00000a52: 	setne	-0x60(%rsp)
    00000a57: 	movzbl	-0x60(%rsp), %r14d
    00000a5d: 	testb	%r15b, %r14b
    00000a60: 	je	.Ltmp297 # Offset: 2656
    00000a66: 	cmpq	%r11, %rsi
    00000a69: 	movl	$0x1, %r11d
    00000a6f: 	cmovaeq	%r9, %r11
    00000a73: 	subq	$0x1, %r9
    00000a77: 	cmpq	$0x2, %r9
    00000a7b: 	jbe	.Ltmp298 # Offset: 2683
    00000a81: 	movq	-0x68(%rsp), %r15
    00000a86: 	movaps	%xmm0, %xmm2
    00000a89: 	movups	(%r10), %xmm7
    00000a8d: 	movq	%r11, %r9
    00000a90: 	shufps	$0x0, %xmm2, %xmm2
    00000a94: 	andq	$-0x4, %r9
    00000a98: 	movups	-0x4(%r13,%r15), %xmm1
    00000a9e: 	addq	%r9, %rax
    00000aa1: 	mulps	%xmm2, %xmm1
    00000aa4: 	addps	%xmm7, %xmm1
    00000aa7: 	movups	%xmm1, (%r10)
    00000aab: 	cmpq	%r11, %r9
    00000aae: 	je	.Ltmp296 # Offset: 2734
.Ltmp306:
    00000ab0: 	subq	%r9, %r11
    00000ab3: 	cmpq	$0x1, %r11
    00000ab7: 	je	.Ltmp299 # Offset: 2743
    00000ab9: 	addq	%r9, %r8
    00000abc: 	addq	-0x78(%rsp), %r9
    00000ac1: 	movaps	%xmm0, %xmm2
    00000ac4: 	movq	(%r13,%r9,4), %xmm1
    00000acb: 	shufps	$0xe0, %xmm2, %xmm2
    00000acf: 	leaq	(%r12,%r8,4), %r8
    00000ad3: 	mulps	%xmm2, %xmm1
    00000ad6: 	movq	(%r8), %xmm2
    00000adb: 	addps	%xmm2, %xmm1
    00000ade: 	movlps	%xmm1, (%r8)
    00000ae2: 	movq	%r11, %r8
    00000ae5: 	andq	$-0x2, %r8
    00000ae9: 	addq	%r8, %rax
    00000aec: 	cmpq	%r11, %r8
    00000aef: 	je	.Ltmp296 # Offset: 2799
.Ltmp299:
    00000af1: 	leaq	(%rax,%rdi), %r8
    00000af5: 	addq	%rdx, %rax
    00000af8: 	mulss	(%r13,%rax,4), %xmm0
    00000aff: 	leaq	(%r12,%r8,4), %r8
    00000b03: 	addss	(%r8), %xmm0
    00000b08: 	movss	%xmm0, (%r8)
.Ltmp296:
    00000b0d: 	addq	$0x1, %rbp
    00000b11: 	addq	%rsi, %rdx
    00000b14: 	addq	-0x10(%rsp), %rcx
    00000b19: 	cmpq	%rbp, %rsi
    00000b1c: 	ja	.Ltmp300 # Offset: 2844
    00000b22: 	movq	-0x48(%rsp), %r15
.Ltmp291:
    00000b27: 	movq	-0x10(%rsp), %rdx
    00000b2c: 	movq	-0x58(%rsp), %rsi
    00000b31: 	addq	$0x1, 0xd0(%rsp)
    00000b3a: 	movq	0xd0(%rsp), %rax
    00000b42: 	addq	%rsi, -0x40(%rsp)
    00000b47: 	addq	%rdx, %r15
    00000b4a: 	addq	%rdx, -0x8(%rsp)
    00000b4f: 	cmpq	0x108(%rsp), %rax
    00000b57: 	jne	.Ltmp301 # Offset: 2903
.Ltmp282:
    00000b5d: 	addq	$0x150, %rsp
    00000b64: 	popq	%rbx
    00000b65: 	popq	%rbp
    00000b66: 	popq	%r12
    00000b68: 	popq	%r13
    00000b6a: 	popq	%r14
    00000b6c: 	popq	%r15
    00000b6e: 	retq # Offset: 2926
    00000b6f: 	nop # Size: 1
.Ltmp284:
    00000b70: 	movq	0x38(%rsp), %rcx
    00000b75: 	movq	0x30(%rsp), %r12
    00000b7a: 	movq	%rsi, %r11
    00000b7d: 	movq	%rdx, %r10
    00000b80: 	movq	-0x48(%rsp), %rbx
    00000b85: 	movq	%rax, %r9
    00000b88: 	movq	%rdi, %r8
    00000b8b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp302:
    00000b90: 	addq	$0x10, %rcx
    00000b94: 	addq	$0x10, %r8
    00000b98: 	addq	$0x10, %r9
    00000b9c: 	addq	$0x10, %r10
    00000ba0: 	movss	-0x10(%r8), %xmm0
    00000ba6: 	movss	-0x10(%r9), %xmm1
    00000bac: 	addq	$0x10, %r11
    00000bb0: 	mulss	%xmm3, %xmm1
    00000bb4: 	mulss	%xmm2, %xmm0
    00000bb8: 	addss	%xmm1, %xmm0
    00000bbc: 	movss	-0x10(%r10), %xmm1
    00000bc2: 	mulss	%xmm4, %xmm1
    00000bc6: 	addss	%xmm1, %xmm0
    00000bca: 	movss	-0x10(%r11), %xmm1
    00000bd0: 	mulss	%xmm5, %xmm1
    00000bd4: 	addss	%xmm1, %xmm0
    00000bd8: 	addss	-0x10(%rcx), %xmm0
    00000bdd: 	movss	%xmm0, -0x10(%rcx)
    00000be2: 	movss	-0xc(%r8), %xmm0
    00000be8: 	movss	-0xc(%r9), %xmm1
    00000bee: 	mulss	%xmm2, %xmm0
    00000bf2: 	mulss	%xmm3, %xmm1
    00000bf6: 	addss	%xmm1, %xmm0
    00000bfa: 	movss	-0xc(%r10), %xmm1
    00000c00: 	mulss	%xmm4, %xmm1
    00000c04: 	addss	%xmm1, %xmm0
    00000c08: 	movss	-0xc(%r11), %xmm1
    00000c0e: 	mulss	%xmm5, %xmm1
    00000c12: 	addss	%xmm1, %xmm0
    00000c16: 	addss	-0xc(%rcx), %xmm0
    00000c1b: 	movss	%xmm0, -0xc(%rcx)
    00000c20: 	movss	-0x8(%r8), %xmm0
    00000c26: 	movss	-0x8(%r9), %xmm1
    00000c2c: 	mulss	%xmm2, %xmm0
    00000c30: 	mulss	%xmm3, %xmm1
    00000c34: 	addss	%xmm1, %xmm0
    00000c38: 	movss	-0x8(%r10), %xmm1
    00000c3e: 	mulss	%xmm4, %xmm1
    00000c42: 	addss	%xmm1, %xmm0
    00000c46: 	movss	-0x8(%r11), %xmm1
    00000c4c: 	mulss	%xmm5, %xmm1
    00000c50: 	addss	%xmm1, %xmm0
    00000c54: 	addss	-0x8(%rcx), %xmm0
    00000c59: 	movss	%xmm0, -0x8(%rcx)
    00000c5e: 	movss	-0x4(%r8), %xmm0
    00000c64: 	movss	-0x4(%r9), %xmm1
    00000c6a: 	mulss	%xmm2, %xmm0
    00000c6e: 	mulss	%xmm3, %xmm1
    00000c72: 	addss	%xmm1, %xmm0
    00000c76: 	movss	-0x4(%r10), %xmm1
    00000c7c: 	mulss	%xmm4, %xmm1
    00000c80: 	addss	%xmm1, %xmm0
    00000c84: 	movss	-0x4(%r11), %xmm1
    00000c8a: 	mulss	%xmm5, %xmm1
    00000c8e: 	addss	%xmm1, %xmm0
    00000c92: 	addss	-0x4(%rcx), %xmm0
    00000c97: 	movss	%xmm0, -0x4(%rcx)
    00000c9c: 	cmpq	%rcx, %r12
    00000c9f: 	jne	.Ltmp302 # Offset: 3231
    00000ca5: 	jmp	.Ltmp303 # Offset: 3237
    00000caa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp293:
    00000cb0: 	movq	0xd8(%rsp), %r8
    00000cb8: 	movq	-0x70(%rsp), %r14
    00000cbd: 	movq	%rcx, %r9
    00000cc0: 	xorl	%eax, %eax
    00000cc2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp304:
    00000cc8: 	movss	(%r9), %xmm1
    00000ccd: 	addq	$0x4, %rax
    00000cd1: 	addq	$0x10, %r8
    00000cd5: 	addq	$0x10, %r9
    00000cd9: 	mulss	%xmm0, %xmm1
    00000cdd: 	addss	-0x10(%r8), %xmm1
    00000ce3: 	movss	%xmm1, -0x10(%r8)
    00000ce9: 	movss	-0xc(%r9), %xmm1
    00000cef: 	mulss	%xmm0, %xmm1
    00000cf3: 	addss	-0xc(%r8), %xmm1
    00000cf9: 	movss	%xmm1, -0xc(%r8)
    00000cff: 	movss	-0x8(%r9), %xmm1
    00000d05: 	mulss	%xmm0, %xmm1
    00000d09: 	addss	-0x8(%r8), %xmm1
    00000d0f: 	movss	%xmm1, -0x8(%r8)
    00000d15: 	movss	-0x4(%r9), %xmm1
    00000d1b: 	mulss	%xmm0, %xmm1
    00000d1f: 	addss	-0x4(%r8), %xmm1
    00000d25: 	movss	%xmm1, -0x4(%r8)
    00000d2b: 	cmpq	%rax, %rbx
    00000d2e: 	ja	.Ltmp304 # Offset: 3374
    00000d30: 	movq	%r14, -0x70(%rsp)
    00000d35: 	jmp	.Ltmp295 # Offset: 3381
    00000d3a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp297:
    00000d40: 	movq	-0x68(%rsp), %r14
    00000d45: 	movss	-0x4(%r13,%r14), %xmm1
    00000d4c: 	mulss	%xmm0, %xmm1
    00000d50: 	addss	(%r10), %xmm1
    00000d55: 	movss	%xmm1, (%r10)
    00000d5a: 	cmpq	%r11, %rsi
    00000d5d: 	jbe	.Ltmp296 # Offset: 3421
    00000d63: 	leaq	(%r11,%rdi), %r8
    00000d67: 	addq	%rdx, %r11
    00000d6a: 	movss	(%r13,%r11,4), %xmm1
    00000d71: 	leaq	(%r12,%r8,4), %r8
    00000d75: 	mulss	%xmm0, %xmm1
    00000d79: 	addss	(%r8), %xmm1
    00000d7e: 	movss	%xmm1, (%r8)
    00000d83: 	leaq	0x2(%rax), %r8
    00000d87: 	cmpq	%r8, %rsi
    00000d8a: 	jbe	.Ltmp296 # Offset: 3466
    00000d90: 	leaq	(%r8,%rdi), %r9
    00000d94: 	addq	%rdx, %r8
    00000d97: 	addq	$0x3, %rax
    00000d9b: 	movss	(%r13,%r8,4), %xmm1
    00000da2: 	leaq	(%r12,%r9,4), %r9
    00000da6: 	mulss	%xmm0, %xmm1
    00000daa: 	addss	(%r9), %xmm1
    00000daf: 	movss	%xmm1, (%r9)
    00000db4: 	cmpq	%rax, %rsi
    00000db7: 	ja	.Ltmp299 # Offset: 3511
    00000dbd: 	jmp	.Ltmp296 # Offset: 3517
    00000dc2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp287:
    00000dc8: 	movq	-0x18(%rsp), %rbx
    00000dcd: 	movq	-0x78(%rsp), %r10
    00000dd2: 	movq	-0x70(%rsp), %r11
    00000dd7: 	movq	-0x68(%rsp), %r9
    00000ddc: 	movq	%rbx, %rcx
    00000ddf: 	movq	-0x58(%rsp), %r8
    00000de4: 	addq	%r10, %rcx
    00000de7: 	movss	(%r13,%rcx,4), %xmm0
    00000dee: 	leaq	(%rbx,%rbp), %rcx
    00000df2: 	movss	(%r13,%rcx,4), %xmm1
    00000df9: 	movq	%rbx, %rcx
    00000dfc: 	addq	%r9, %rbx
    00000dff: 	mulss	%xmm2, %xmm0
    00000e03: 	addq	%r11, %rcx
    00000e06: 	mulss	%xmm3, %xmm1
    00000e0a: 	addss	%xmm1, %xmm0
    00000e0e: 	movss	(%r13,%rcx,4), %xmm1
    00000e15: 	mulss	%xmm4, %xmm1
    00000e19: 	addss	%xmm1, %xmm0
    00000e1d: 	movss	(%r13,%rbx,4), %xmm1
    00000e24: 	movq	0x40(%rsp), %rbx
    00000e29: 	mulss	%xmm5, %xmm1
    00000e2d: 	addss	%xmm1, %xmm0
    00000e31: 	addss	(%rbx), %xmm0
    00000e35: 	movss	%xmm0, (%rbx)
    00000e39: 	movq	0xe0(%rsp), %rbx
    00000e41: 	cmpq	%rbx, %r8
    00000e44: 	jbe	.Ltmp286 # Offset: 3652
    00000e4a: 	movq	%rbx, %rcx
    00000e4d: 	addq	%r10, %rcx
    00000e50: 	movss	(%r13,%rcx,4), %xmm0
    00000e57: 	leaq	(%rbx,%rbp), %rcx
    00000e5b: 	movss	(%r13,%rcx,4), %xmm1
    00000e62: 	movq	%rbx, %rcx
    00000e65: 	addq	%r9, %rbx
    00000e68: 	mulss	%xmm2, %xmm0
    00000e6c: 	addq	%r11, %rcx
    00000e6f: 	mulss	%xmm3, %xmm1
    00000e73: 	addss	%xmm1, %xmm0
    00000e77: 	movss	(%r13,%rcx,4), %xmm1
    00000e7e: 	mulss	%xmm4, %xmm1
    00000e82: 	addss	%xmm1, %xmm0
    00000e86: 	movss	(%r13,%rbx,4), %xmm1
    00000e8d: 	movq	0x48(%rsp), %rbx
    00000e92: 	mulss	%xmm5, %xmm1
    00000e96: 	addss	%xmm1, %xmm0
    00000e9a: 	addss	(%rbx), %xmm0
    00000e9e: 	movss	%xmm0, (%rbx)
    00000ea2: 	movq	0xf0(%rsp), %rbx
    00000eaa: 	cmpq	%rbx, %r8
    00000ead: 	jbe	.Ltmp286 # Offset: 3757
    00000eb3: 	leaq	(%rbx,%rbp), %rcx
    00000eb7: 	movss	(%r13,%rcx,4), %xmm0
    00000ebe: 	movq	%rbx, %rcx
    00000ec1: 	addq	%r10, %rcx
    00000ec4: 	movss	(%r13,%rcx,4), %xmm1
    00000ecb: 	mulss	%xmm3, %xmm0
    00000ecf: 	movq	%rbx, %rcx
    00000ed2: 	addq	%r9, %rbx
    00000ed5: 	addq	%r11, %rcx
    00000ed8: 	mulss	%xmm2, %xmm1
    00000edc: 	addss	%xmm1, %xmm0
    00000ee0: 	movss	(%r13,%rcx,4), %xmm1
    00000ee7: 	mulss	%xmm4, %xmm1
    00000eeb: 	addss	%xmm1, %xmm0
    00000eef: 	movss	(%r13,%rbx,4), %xmm1
    00000ef6: 	movq	0x50(%rsp), %rbx
    00000efb: 	mulss	%xmm5, %xmm1
    00000eff: 	addss	%xmm1, %xmm0
    00000f03: 	addss	(%rbx), %xmm0
    00000f07: 	movss	%xmm0, (%rbx)
    00000f0b: 	movq	0x100(%rsp), %rbx
    00000f13: 	cmpq	%rbx, %r8
    00000f16: 	jbe	.Ltmp286 # Offset: 3862
    00000f1c: 	leaq	(%rbx,%rbp), %rcx
    00000f20: 	addq	%rbx, %r10
    00000f23: 	mulss	(%r13,%rcx,4), %xmm3
    00000f2a: 	movq	%r11, %rcx
    00000f2d: 	mulss	(%r13,%r10,4), %xmm2
    00000f34: 	addq	%rbx, %rcx
    00000f37: 	addq	%r9, %rbx
    00000f3a: 	mulss	(%r13,%rcx,4), %xmm4
    00000f41: 	mulss	(%r13,%rbx,4), %xmm5
    00000f48: 	movq	0x68(%rsp), %rbx
    00000f4d: 	addss	%xmm3, %xmm2
    00000f51: 	addss	%xmm2, %xmm4
    00000f55: 	addss	%xmm5, %xmm4
    00000f59: 	addss	(%rbx), %xmm4
    00000f5d: 	movss	%xmm4, (%rbx)
    00000f61: 	jmp	.Ltmp286 # Offset: 3937
    00000f66: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp292:
    00000f70: 	xorl	%eax, %eax
    00000f72: 	jmp	.Ltmp305 # Offset: 3954
.Ltmp298:
    00000f77: 	xorl	%r9d, %r9d
    00000f7a: 	jmp	.Ltmp306 # Offset: 3962
.Ltmp288:
    00000f7f: 	movq	0x60(%rsp), %r12
    00000f84: 	movq	-0x18(%rsp), %rcx
    00000f89: 	xorl	%r10d, %r10d
    00000f8c: 	jmp	.Ltmp307 # Offset: 3980
DWARF CFI Instructions:
    <empty>
End of Function "_ZN19matmul_JKI_unrolledIfEclEPKfS2_Pfmm.isra.0/1(*2)"

Binary Function "_ZN19matmul_KJI_unrolledIfEclEPKfS2_Pfmm.isra.0/1(*2)" after disassembly {
  All names   : _ZN19matmul_KJI_unrolledIfEclEPKfS2_Pfmm.isra.0/1
                _ZN19matmul_KJI_unrolledIfEclEPKfS2_Pfmm.isra.0/matrix_multiply.cpp/1
  Number      : 23
  State       : disassembled
  Address     : 0xc370
  Size        : 0xea8
  MaxSize     : 0xeb0
  Offset      : 0xc370
  Section     : .text
  Orc Section : .local.text._ZN19matmul_KJI_unrolledIfEclEPKfS2_Pfmm.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB022:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	movq	%rdx, %r13
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	movq	%rsi, %rbp
    0000000f: 	pushq	%rbx
    00000010: 	subq	$0x1a0, %rsp
    00000017: 	movq	%rdi, 0x188(%rsp)
    0000001f: 	movq	%r8, %rdi
    00000022: 	subq	$0x3, %rdi
    00000026: 	movq	%rcx, -0x60(%rsp)
    0000002b: 	movq	%r8, -0x68(%rsp)
    00000030: 	movq	%rdi, -0x28(%rsp)
    00000035: 	je	.Ltmp308 # Offset: 53
    0000003b: 	movq	%r8, %rax
    0000003e: 	leaq	(%r8,%r8), %rdi
    00000042: 	movq	%rsi, %r15
    00000045: 	movq	%r13, -0x78(%rsp)
    0000004a: 	subq	$0x4, %rax
    0000004e: 	movq	%rdi, -0x50(%rsp)
    00000053: 	leaq	(,%r8,4), %rbx
    0000005b: 	movq	%r8, %rdi
    0000005e: 	movq	%rax, %rdx
    00000061: 	shlq	$0x4, %rdi
    00000065: 	andq	$-0x4, %rax
    00000069: 	leaq	(%rsi,%rbx), %r11
    0000006d: 	shrq	$0x2, %rdx
    00000071: 	leaq	0x4(%rax), %rcx
    00000075: 	movq	%rax, 0x30(%rsp)
    0000007a: 	leaq	(,%rdx,4), %rsi
    00000082: 	movq	%rbx, -0x30(%rsp)
    00000087: 	leaq	0x1(%rdx), %r12
    0000008b: 	movq	%rdi, 0x180(%rsp)
    00000093: 	leaq	(,%r8,8), %rdi
    0000009b: 	movq	%rsi, 0x130(%rsp)
    000000a3: 	movq	%rax, %rsi
    000000a6: 	movq	%r8, %rax
    000000a9: 	subq	%rsi, %rax
    000000ac: 	movq	%rcx, -0x38(%rsp)
    000000b1: 	movq	%rdi, 0x190(%rsp)
    000000b9: 	movq	%rbx, %rdi
    000000bc: 	addq	%r11, %rbx
    000000bf: 	leaq	-0x5(%rax), %rdx
    000000c3: 	leaq	(%rbx,%rdi), %r14
    000000c7: 	movq	%rsi, %rdi
    000000ca: 	leaq	-0x4(%rax), %rsi
    000000ce: 	movq	%rax, 0x60(%rsp)
    000000d3: 	movq	%rsi, 0x90(%rsp)
    000000db: 	andq	$-0x4, %rsi
    000000df: 	addq	%rsi, %rcx
    000000e2: 	subq	%rsi, %rax
    000000e5: 	movq	%rdx, 0x88(%rsp)
    000000ed: 	movq	%rcx, 0xa0(%rsp)
    000000f5: 	leaq	0x5(%rdi), %rcx
    000000f9: 	movq	%rcx, 0xe0(%rsp)
    00000101: 	leaq	0x6(%rdi), %rcx
    00000105: 	addq	$0x7, %rdi
    00000109: 	movq	%rdi, 0x138(%rsp)
    00000111: 	leaq	0x10(%r13), %rdi
    00000115: 	movq	%rax, 0xa8(%rsp)
    0000011d: 	subq	$0x4, %rax
    00000121: 	movq	%rsi, 0x98(%rsp)
    00000129: 	movq	%rcx, 0x108(%rsp)
    00000131: 	movq	$0x0, -0x58(%rsp)
    0000013a: 	movq	$0x0, 0x50(%rsp)
    00000143: 	movq	%rdi, 0xc0(%rsp)
    0000014b: 	movq	%rax, 0xb0(%rsp)
    00000153: 	nopl	(%rax,%rax) # Size: 5
.Ltmp317:
    00000158: 	cmpq	$0x0, -0x60(%rsp)
    0000015e: 	movq	-0x30(%rsp), %rsi
    00000163: 	je	.Ltmp309 # Offset: 355
    00000169: 	movq	0x188(%rsp), %rax
    00000171: 	movq	0x50(%rsp), %r10
    00000176: 	movq	-0x68(%rsp), %rdx
    0000017b: 	movq	-0x58(%rsp), %rsi
    00000180: 	leaq	(%rax,%r10,4), %r9
    00000184: 	movq	-0x30(%rsp), %r10
    00000189: 	movq	0xc0(%rsp), %r13
    00000191: 	movq	%rdx, %rdi
    00000194: 	addq	-0x50(%rsp), %rdx
    00000199: 	leaq	0x10(%r10), %rax
    0000019d: 	addq	%rsi, %rdi
    000001a0: 	movq	%rdx, -0x40(%rsp)
    000001a5: 	leaq	(%r15,%rax), %r8
    000001a9: 	addq	%rbx, %rax
    000001ac: 	movq	%rdi, -0x48(%rsp)
    000001b1: 	movq	%rax, 0x8(%rsp)
    000001b6: 	leaq	(%r10,%r15), %rax
    000001ba: 	addq	%r11, %r10
    000001bd: 	movq	%rax, 0xc8(%rsp)
    000001c5: 	addq	0x190(%rsp), %rax
    000001cd: 	movq	%rax, 0xd8(%rsp)
    000001d5: 	movq	%rsi, %rax
    000001d8: 	movq	0x30(%rsp), %rsi
    000001dd: 	movq	%r10, 0xd0(%rsp)
    000001e5: 	addq	%rsi, %rax
    000001e8: 	movq	%r8, -0x20(%rsp)
    000001ed: 	leaq	0x14(,%rax,4), %r10
    000001f5: 	movq	%rax, -0x18(%rsp)
    000001fa: 	movq	%rsi, %rax
    000001fd: 	leaq	(%rbp,%r10), %r8
    00000202: 	leaq	-0x4(%rbp,%r10), %r10
    00000207: 	movq	%r8, 0x48(%rsp)
    0000020c: 	movq	%rdi, %r8
    0000020f: 	addq	%rsi, %r8
    00000212: 	movq	-0x50(%rsp), %rsi
    00000217: 	movq	%r10, 0x80(%rsp)
    0000021f: 	leaq	0x14(,%r8,4), %rdi
    00000227: 	leaq	0x4(%r8), %r10
    0000022b: 	leaq	(%rbp,%rdi), %rcx
    00000230: 	addq	%rax, %rsi
    00000233: 	movq	%r10, 0x20(%rsp)
    00000238: 	leaq	-0x4(%rbp,%rdi), %r10
    0000023d: 	movq	%rcx, 0x40(%rsp)
    00000242: 	movq	%rax, %rcx
    00000245: 	leaq	0x14(,%rsi,4), %rax
    0000024d: 	movq	%rax, -0x70(%rsp)
    00000252: 	addq	%rbp, %rax
    00000255: 	movq	%rax, 0x38(%rsp)
    0000025a: 	movq	%rdx, %rax
    0000025d: 	addq	%rcx, %rax
    00000260: 	movq	%r10, 0x78(%rsp)
    00000265: 	leaq	0x4(%rsi), %r10
    00000269: 	movq	-0x70(%rsp), %rsi
    0000026e: 	movq	%rax, %rdx
    00000271: 	leaq	0x14(,%rax,4), %rax
    00000279: 	movq	%r10, 0x18(%rsp)
    0000027e: 	leaq	(%rbp,%rax), %rcx
    00000283: 	leaq	-0x4(%rbp,%rsi), %r10
    00000288: 	movq	%rcx, 0x58(%rsp)
    0000028d: 	movq	-0x18(%rsp), %rcx
    00000292: 	movq	%r10, 0x70(%rsp)
    00000297: 	leaq	0x4(%rdx), %r10
    0000029b: 	movq	%r10, 0x10(%rsp)
    000002a0: 	addq	$0x4, %rcx
    000002a4: 	leaq	-0x4(%rbp,%rax), %r10
    000002a9: 	movq	%rcx, 0x28(%rsp)
    000002ae: 	movq	%r10, 0x68(%rsp)
    000002b3: 	movq	-0x58(%rsp), %rsi
    000002b8: 	movq	-0x38(%rsp), %r10
    000002bd: 	movq	-0x48(%rsp), %rdi
    000002c2: 	movq	$0x0, -0x70(%rsp)
    000002cb: 	movq	%rsi, %rax
    000002ce: 	movq	-0x50(%rsp), %rcx
    000002d3: 	movq	-0x40(%rsp), %rdx
    000002d8: 	addq	%r10, %rax
    000002db: 	leaq	(%rbp,%rax,4), %rax
    000002e0: 	movq	%rax, 0xe8(%rsp)
    000002e8: 	movq	%rdi, %rax
    000002eb: 	addq	%r10, %rax
    000002ee: 	leaq	(%rbp,%rax,4), %r8
    000002f3: 	movq	%rcx, %rax
    000002f6: 	addq	%r10, %rax
    000002f9: 	movq	%r8, 0xf0(%rsp)
    00000301: 	leaq	(%rbp,%rax,4), %r8
    00000306: 	movq	%rdx, %rax
    00000309: 	addq	%r10, %rax
    0000030c: 	movq	0xe0(%rsp), %r10
    00000314: 	movq	%r8, 0xf8(%rsp)
    0000031c: 	leaq	(%rbp,%rax,4), %rax
    00000321: 	movq	%rax, 0x100(%rsp)
    00000329: 	movq	%r10, %rax
    0000032c: 	addq	%rsi, %rax
    0000032f: 	leaq	(%rbp,%rax,4), %rax
    00000334: 	movq	%rax, 0x110(%rsp)
    0000033c: 	movq	%r10, %rax
    0000033f: 	addq	%rdi, %rax
    00000342: 	leaq	(%rbp,%rax,4), %rax
    00000347: 	movq	%rax, 0x118(%rsp)
    0000034f: 	movq	%r10, %rax
    00000352: 	addq	%rcx, %rax
    00000355: 	leaq	(%rbp,%rax,4), %rax
    0000035a: 	movq	%rax, 0x120(%rsp)
    00000362: 	movq	%r10, %rax
    00000365: 	movq	0x108(%rsp), %r10
    0000036d: 	addq	%rdx, %rax
    00000370: 	leaq	(%rbp,%rax,4), %rax
    00000375: 	movq	%rax, 0x128(%rsp)
    0000037d: 	movq	%r10, %rax
    00000380: 	addq	%rsi, %rax
    00000383: 	leaq	(%rbp,%rax,4), %rax
    00000388: 	movq	%rax, 0x140(%rsp)
    00000390: 	movq	%r10, %rax
    00000393: 	addq	%rdi, %rax
    00000396: 	leaq	(%rbp,%rax,4), %rax
    0000039b: 	movq	%rax, 0x148(%rsp)
    000003a3: 	movq	%r10, %rax
    000003a6: 	addq	%rcx, %rax
    000003a9: 	leaq	(%rbp,%rax,4), %rax
    000003ae: 	movq	%rax, 0x150(%rsp)
    000003b6: 	movq	%r10, %rax
    000003b9: 	movq	0x138(%rsp), %r10
    000003c1: 	addq	%rdx, %rax
    000003c4: 	leaq	(%rbp,%rax,4), %rax
    000003c9: 	addq	%r10, %rdi
    000003cc: 	addq	%r10, %rdx
    000003cf: 	movq	%rax, 0x158(%rsp)
    000003d7: 	movq	%r10, %rax
    000003da: 	addq	%rsi, %rax
    000003dd: 	leaq	0x10(%rbx), %rsi
    000003e1: 	leaq	(%rbp,%rax,4), %rax
    000003e6: 	movq	%rsi, -0x10(%rsp)
    000003eb: 	movq	%rax, 0x178(%rsp)
    000003f3: 	leaq	(%rbp,%rdi,4), %rax
    000003f8: 	leaq	0x10(%r15), %rdi
    000003fc: 	movq	%rax, 0x170(%rsp)
    00000404: 	movq	%r10, %rax
    00000407: 	xorl	%r10d, %r10d
    0000040a: 	addq	%rcx, %rax
    0000040d: 	movq	%rdi, -0x18(%rsp)
    00000412: 	leaq	(%rbp,%rax,4), %rax
    00000417: 	movq	%rax, 0x168(%rsp)
    0000041f: 	leaq	(%rbp,%rdx,4), %rax
    00000424: 	movq	%rax, 0x160(%rsp)
    0000042c: 	movq	-0x78(%rsp), %rax
    00000431: 	nopl	(%rax) # Size: 7
.Ltmp316:
    00000438: 	cmpq	-0x18(%rsp), %rax
    0000043d: 	movss	(%r9), %xmm2
    00000442: 	setae	%cl
    00000445: 	cmpq	%r15, %r13
    00000448: 	movss	0x4(%r9), %xmm3
    0000044e: 	movss	0x8(%r9), %xmm4
    00000454: 	setbe	%dl
    00000457: 	movss	0xc(%r9), %xmm5
    0000045d: 	orl	%edx, %ecx
    0000045f: 	cmpq	%rax, -0x20(%rsp)
    00000464: 	setbe	%dl
    00000467: 	cmpq	%r11, %r13
    0000046a: 	setbe	%sil
    0000046e: 	orl	%esi, %edx
    00000470: 	andl	%ecx, %edx
    00000472: 	cmpq	-0x10(%rsp), %rax
    00000477: 	setae	%cl
    0000047a: 	cmpq	%rbx, %r13
    0000047d: 	setbe	%sil
    00000481: 	orl	%esi, %ecx
    00000483: 	testb	%cl, %dl
    00000485: 	je	.Ltmp310 # Offset: 1157
    0000048b: 	cmpq	%rax, 0x8(%rsp)
    00000490: 	setbe	%cl
    00000493: 	cmpq	%r14, %r13
    00000496: 	setbe	%dl
    00000499: 	orb	%cl, %dl
    0000049b: 	je	.Ltmp310 # Offset: 1179
    000004a1: 	movaps	%xmm2, %xmm9
    000004a5: 	movaps	%xmm3, %xmm8
    000004a9: 	movaps	%xmm4, %xmm7
    000004ac: 	xorl	%edx, %edx
    000004ae: 	movaps	%xmm5, %xmm6
    000004b1: 	xorl	%ecx, %ecx
    000004b3: 	shufps	$0x0, %xmm9, %xmm9
    000004b8: 	shufps	$0x0, %xmm8, %xmm8
    000004bd: 	shufps	$0x0, %xmm7, %xmm7
    000004c1: 	shufps	$0x0, %xmm6, %xmm6
    000004c5: 	nopl	(%rax) # Size: 3
.Ltmp311:
    000004c8: 	movups	(%r15,%rdx), %xmm0
    000004cd: 	movups	(%r11,%rdx), %xmm1
    000004d2: 	addq	$0x1, %rcx
    000004d6: 	mulps	%xmm8, %xmm1
    000004da: 	mulps	%xmm9, %xmm0
    000004de: 	addps	%xmm1, %xmm0
    000004e1: 	movups	(%rbx,%rdx), %xmm1
    000004e5: 	mulps	%xmm7, %xmm1
    000004e8: 	addps	%xmm1, %xmm0
    000004eb: 	movups	(%r14,%rdx), %xmm1
    000004f0: 	mulps	%xmm6, %xmm1
    000004f3: 	addps	%xmm1, %xmm0
    000004f6: 	movups	(%rax,%rdx), %xmm1
    000004fa: 	addps	%xmm1, %xmm0
    000004fd: 	movups	%xmm0, (%rax,%rdx)
    00000501: 	addq	$0x10, %rdx
    00000505: 	cmpq	%r12, %rcx
    00000508: 	jb	.Ltmp311 # Offset: 1288
.Ltmp330:
    0000050a: 	movq	-0x38(%rsp), %rsi
    0000050f: 	cmpq	%rsi, -0x68(%rsp)
    00000514: 	jbe	.Ltmp312 # Offset: 1300
    0000051a: 	movq	0x30(%rsp), %rdi
    0000051f: 	leaq	0x4(%r10,%rdi), %rsi
    00000524: 	movq	-0x78(%rsp), %rdi
    00000529: 	leaq	(%rdi,%rsi,4), %rdx
    0000052d: 	movq	%rdx, %rcx
    00000530: 	subq	0x40(%rsp), %rcx
    00000535: 	cmpq	$0x8, %rcx
    00000539: 	movq	%rdx, %rcx
    0000053c: 	seta	%dil
    00000540: 	subq	0x48(%rsp), %rcx
    00000545: 	cmpq	$0x8, %rcx
    00000549: 	seta	%cl
    0000054c: 	andl	%edi, %ecx
    0000054e: 	cmpq	$0x5, 0x60(%rsp)
    00000554: 	setne	%dil
    00000558: 	andl	%edi, %ecx
    0000055a: 	movq	%rdx, %rdi
    0000055d: 	subq	0x38(%rsp), %rdi
    00000562: 	cmpq	$0x8, %rdi
    00000566: 	seta	%dil
    0000056a: 	testb	%dil, %cl
    0000056d: 	je	.Ltmp313 # Offset: 1389
    00000573: 	movq	%rdx, %rcx
    00000576: 	subq	0x58(%rsp), %rcx
    0000057b: 	cmpq	$0x8, %rcx
    0000057f: 	jbe	.Ltmp313 # Offset: 1407
    00000585: 	cmpq	$0x2, 0x88(%rsp)
    0000058e: 	jbe	.Ltmp314 # Offset: 1422
    00000594: 	movq	0x78(%rsp), %rdi
    00000599: 	movaps	%xmm3, %xmm0
    0000059c: 	movaps	%xmm2, %xmm1
    0000059f: 	movq	0x98(%rsp), %rcx
    000005a7: 	shufps	$0x0, %xmm0, %xmm0
    000005ab: 	shufps	$0x0, %xmm1, %xmm1
    000005af: 	movups	(%rdi), %xmm7
    000005b2: 	movq	0x80(%rsp), %rdi
    000005ba: 	movups	(%rdi), %xmm6
    000005bd: 	mulps	%xmm7, %xmm0
    000005c0: 	movq	0x70(%rsp), %rdi
    000005c5: 	mulps	%xmm6, %xmm1
    000005c8: 	movups	(%rdi), %xmm6
    000005cb: 	movq	0x68(%rsp), %rdi
    000005d0: 	addps	%xmm1, %xmm0
    000005d3: 	movaps	%xmm4, %xmm1
    000005d6: 	shufps	$0x0, %xmm1, %xmm1
    000005da: 	mulps	%xmm6, %xmm1
    000005dd: 	movups	(%rdi), %xmm6
    000005e0: 	movq	0x90(%rsp), %rdi
    000005e8: 	movaps	%xmm6, -0x8(%rsp)
    000005ed: 	addps	%xmm1, %xmm0
    000005f0: 	movaps	%xmm5, %xmm1
    000005f3: 	shufps	$0x0, %xmm1, %xmm1
    000005f7: 	mulps	%xmm6, %xmm1
    000005fa: 	movups	(%rdx), %xmm6
    000005fd: 	addps	%xmm1, %xmm0
    00000600: 	addps	%xmm6, %xmm0
    00000603: 	movups	%xmm0, (%rdx)
    00000606: 	cmpq	%rdi, %rcx
    00000609: 	je	.Ltmp312 # Offset: 1545
    0000060f: 	movq	0xb0(%rsp), %rdi
    00000617: 	movq	0xa0(%rsp), %rdx
    0000061f: 	cmpq	$0x5, 0xa8(%rsp)
    00000628: 	je	.Ltmp315 # Offset: 1576
.Ltmp333:
    0000062e: 	movq	-0x78(%rsp), %r8
    00000633: 	addq	%rcx, %rsi
    00000636: 	movaps	%xmm2, %xmm1
    00000639: 	movaps	%xmm3, %xmm6
    0000063c: 	shufps	$0xe0, %xmm1, %xmm1
    00000640: 	shufps	$0xe0, %xmm6, %xmm6
    00000644: 	leaq	(%r8,%rsi,4), %rsi
    00000648: 	movq	0x28(%rsp), %r8
    0000064d: 	addq	%rcx, %r8
    00000650: 	movq	(%rbp,%r8,4), %xmm0
    00000657: 	movq	0x20(%rsp), %r8
    0000065c: 	mulps	%xmm1, %xmm0
    0000065f: 	addq	%rcx, %r8
    00000662: 	movq	(%rbp,%r8,4), %xmm1
    00000669: 	movq	0x18(%rsp), %r8
    0000066e: 	mulps	%xmm6, %xmm1
    00000671: 	addq	%rcx, %r8
    00000674: 	movaps	%xmm4, %xmm6
    00000677: 	addq	0x10(%rsp), %rcx
    0000067c: 	shufps	$0xe0, %xmm6, %xmm6
    00000680: 	addps	%xmm1, %xmm0
    00000683: 	movq	(%rbp,%r8,4), %xmm1
    0000068a: 	mulps	%xmm6, %xmm1
    0000068d: 	movaps	%xmm5, %xmm6
    00000690: 	shufps	$0xe0, %xmm6, %xmm6
    00000694: 	addps	%xmm1, %xmm0
    00000697: 	movq	(%rbp,%rcx,4), %xmm1
    0000069d: 	movq	%rdi, %rcx
    000006a0: 	andq	$-0x2, %rcx
    000006a4: 	mulps	%xmm6, %xmm1
    000006a7: 	addq	%rcx, %rdx
    000006aa: 	addps	%xmm1, %xmm0
    000006ad: 	movq	(%rsi), %xmm1
    000006b1: 	addps	%xmm1, %xmm0
    000006b4: 	movlps	%xmm0, (%rsi)
    000006b7: 	cmpq	%rcx, %rdi
    000006ba: 	je	.Ltmp312 # Offset: 1722
.Ltmp315:
    000006bc: 	movq	-0x78(%rsp), %rdi
    000006c1: 	leaq	(%r10,%rdx), %rcx
    000006c5: 	leaq	(%rdi,%rcx,4), %rcx
    000006c9: 	movq	-0x58(%rsp), %rdi
    000006ce: 	leaq	(%rdi,%rdx), %rsi
    000006d2: 	movq	-0x48(%rsp), %rdi
    000006d7: 	mulss	(%rbp,%rsi,4), %xmm2
    000006dd: 	leaq	(%rdi,%rdx), %rsi
    000006e1: 	movq	-0x50(%rsp), %rdi
    000006e6: 	mulss	(%rbp,%rsi,4), %xmm3
    000006ec: 	leaq	(%rdi,%rdx), %rsi
    000006f0: 	addq	-0x40(%rsp), %rdx
    000006f5: 	mulss	(%rbp,%rsi,4), %xmm4
    000006fb: 	mulss	(%rbp,%rdx,4), %xmm5
    00000701: 	addss	%xmm3, %xmm2
    00000705: 	addss	%xmm2, %xmm4
    00000709: 	addss	%xmm4, %xmm5
    0000070d: 	addss	(%rcx), %xmm5
    00000711: 	movss	%xmm5, (%rcx)
.Ltmp312:
    00000715: 	movq	-0x30(%rsp), %rcx
    0000071a: 	addq	$0x1, -0x70(%rsp)
    00000720: 	addq	-0x68(%rsp), %r10
    00000725: 	movq	-0x70(%rsp), %rdi
    0000072a: 	addq	%rcx, %r9
    0000072d: 	addq	%rcx, %rax
    00000730: 	addq	%rcx, %r13
    00000733: 	cmpq	-0x60(%rsp), %rdi
    00000738: 	jne	.Ltmp316 # Offset: 1848
    0000073e: 	movq	%rcx, %rsi
.Ltmp309:
    00000741: 	movq	0x180(%rsp), %rax
    00000749: 	addq	$0x4, 0x50(%rsp)
    0000074f: 	addq	%rsi, -0x58(%rsp)
    00000754: 	movq	0x50(%rsp), %rdi
    00000759: 	addq	%rsi, -0x50(%rsp)
    0000075e: 	addq	%rax, %r15
    00000761: 	addq	%rax, %r11
    00000764: 	addq	%rax, %rbx
    00000767: 	addq	%rax, %r14
    0000076a: 	cmpq	-0x28(%rsp), %rdi
    0000076f: 	jb	.Ltmp317 # Offset: 1903
    00000775: 	movq	-0x78(%rsp), %r13
    0000077a: 	cmpq	%rdi, -0x68(%rsp)
    0000077f: 	jbe	.Ltmp318 # Offset: 1919
.Ltmp334:
    00000785: 	cmpq	$0x0, -0x60(%rsp)
    0000078b: 	je	.Ltmp318 # Offset: 1931
    00000791: 	movq	-0x68(%rsp), %rax
    00000796: 	movq	0x50(%rsp), %rbx
    0000079b: 	movq	0x188(%rsp), %rdi
    000007a3: 	movq	%rax, %r9
    000007a6: 	imulq	%rbx, %r9
    000007aa: 	leaq	(%rdi,%rbx,4), %rdi
    000007ae: 	movq	%rdi, -0x70(%rsp)
    000007b3: 	movq	%r9, %r11
    000007b6: 	movq	%rax, %r9
    000007b9: 	leaq	(,%rax,4), %rax
    000007c1: 	movq	%rax, -0x78(%rsp)
    000007c6: 	imulq	%rbx, %rax
    000007ca: 	movq	-0x28(%rsp), %rbx
    000007cf: 	leaq	(%rbp,%rax), %r14
    000007d4: 	leaq	-0x1(%rbx), %rax
    000007d8: 	movq	%rax, %rdx
    000007db: 	andq	$-0x4, %rax
    000007df: 	shrq	$0x2, %rdx
    000007e3: 	addq	$0x4, %rax
    000007e7: 	leaq	(,%rdx,4), %rdi
    000007ef: 	leaq	0x1(%rdx), %r12
    000007f3: 	xorl	%edx, %edx
    000007f5: 	testq	%rbx, %rbx
    000007f8: 	movq	%rdx, %rsi
    000007fb: 	movq	%rdi, 0x30(%rsp)
    00000800: 	cmovneq	%rax, %rsi
    00000804: 	movq	%r9, %rax
    00000807: 	subq	%rsi, %rax
    0000080a: 	leaq	-0x1(%rax), %rbx
    0000080e: 	cmpq	$0x1, %rax
    00000812: 	movq	%rax, -0x40(%rsp)
    00000817: 	movq	%rbx, -0x48(%rsp)
    0000081c: 	movq	%rax, %rbx
    0000081f: 	setne	-0x50(%rsp)
    00000824: 	andq	$-0x4, %rbx
    00000828: 	movq	%rbx, %rdi
    0000082b: 	movq	%rbx, -0x38(%rsp)
    00000830: 	movq	%rsi, %rbx
    00000833: 	addq	%rdi, %rsi
    00000836: 	subq	%rdi, %rax
    00000839: 	movq	%rsi, -0x20(%rsp)
    0000083e: 	leaq	0x1(%rbx), %rsi
    00000842: 	movq	%rsi, -0x10(%rsp)
    00000847: 	leaq	0x2(%rbx), %rsi
    0000084b: 	movq	%rsi, 0x8(%rsp)
    00000850: 	leaq	0x3(%rbx), %rsi
    00000854: 	movq	%rsi, 0x18(%rsp)
    00000859: 	leaq	0x10(%r13), %rsi
    0000085d: 	movq	%rsi, 0x38(%rsp)
    00000862: 	movq	%rax, -0x18(%rsp)
    00000867: 	nopw	(%rax,%rax) # Size: 9
.Ltmp328:
    00000870: 	leaq	(%rbp,%r11,4), %rax
    00000875: 	leaq	0x10(%r14), %rsi
    00000879: 	xorl	%ecx, %ecx
    0000087b: 	xorl	%r8d, %r8d
    0000087e: 	movq	%rax, -0x8(%rsp)
    00000883: 	leaq	(%rbx,%r11), %rax
    00000887: 	movq	%rax, -0x68(%rsp)
    0000088c: 	leaq	0x4(,%rax,4), %rax
    00000894: 	leaq	(%rbp,%rax), %rdi
    00000899: 	leaq	-0x4(%rbp,%rax), %r15
    0000089e: 	movq	-0x10(%rsp), %rax
    000008a3: 	movq	%rsi, -0x30(%rsp)
    000008a8: 	movq	%rdi, -0x58(%rsp)
    000008ad: 	addq	%r11, %rax
    000008b0: 	leaq	(%rbp,%rax,4), %rax
    000008b5: 	movq	%rax, 0x10(%rsp)
    000008ba: 	movq	0x8(%rsp), %rax
    000008bf: 	addq	%r11, %rax
    000008c2: 	leaq	(%rbp,%rax,4), %rax
    000008c7: 	movq	%rax, 0x20(%rsp)
    000008cc: 	movq	0x18(%rsp), %rax
    000008d1: 	addq	%r11, %rax
    000008d4: 	leaq	(%rbp,%rax,4), %rax
    000008d9: 	movq	%rax, 0x28(%rsp)
    000008de: 	movq	%r13, %rax
    000008e1: 	nopl	(%rax) # Size: 7
.Ltmp327:
    000008e8: 	movq	-0x70(%rsp), %rdi
    000008ed: 	cmpq	$0x0, -0x28(%rsp)
    000008f3: 	movss	(%rdi,%rcx,4), %xmm1
    000008f8: 	je	.Ltmp319 # Offset: 2296
    000008fa: 	leaq	0x10(%rax), %rdx
    000008fe: 	cmpq	%rdx, %r14
    00000901: 	jae	.Ltmp320 # Offset: 2305
    00000903: 	cmpq	-0x30(%rsp), %rax
    00000908: 	jb	.Ltmp321 # Offset: 2312
.Ltmp320:
    0000090e: 	movaps	%xmm1, %xmm2
    00000911: 	xorl	%edx, %edx
    00000913: 	xorl	%esi, %esi
    00000915: 	shufps	$0x0, %xmm2, %xmm2
    00000919: 	nopl	(%rax) # Size: 7
.Ltmp322:
    00000920: 	movups	(%r14,%rdx), %xmm0
    00000925: 	movups	(%rax,%rdx), %xmm7
    00000929: 	addq	$0x1, %rsi
    0000092d: 	mulps	%xmm2, %xmm0
    00000930: 	addps	%xmm7, %xmm0
    00000933: 	movups	%xmm0, (%rax,%rdx)
    00000937: 	addq	$0x10, %rdx
    0000093b: 	cmpq	%rsi, %r12
    0000093e: 	ja	.Ltmp322 # Offset: 2366
.Ltmp319:
    00000940: 	cmpq	%rbx, %r9
    00000943: 	jbe	.Ltmp323 # Offset: 2371
    00000949: 	leaq	(%rbx,%rcx), %rsi
    0000094d: 	leaq	(%r13,%rsi,4), %rdx
    00000952: 	movq	%rdx, %rdi
    00000955: 	subq	-0x58(%rsp), %rdi
    0000095a: 	cmpq	$0x8, %rdi
    0000095e: 	jbe	.Ltmp324 # Offset: 2398
    00000964: 	cmpb	$0x0, -0x50(%rsp)
    00000969: 	je	.Ltmp324 # Offset: 2409
    0000096f: 	cmpq	$0x2, -0x48(%rsp)
    00000975: 	jbe	.Ltmp325 # Offset: 2421
    0000097b: 	movups	(%r15), %xmm3
    0000097f: 	movaps	%xmm1, %xmm0
    00000982: 	movq	-0x38(%rsp), %rdi
    00000987: 	shufps	$0x0, %xmm0, %xmm0
    0000098b: 	mulps	%xmm3, %xmm0
    0000098e: 	movups	(%rdx), %xmm3
    00000991: 	addps	%xmm3, %xmm0
    00000994: 	movups	%xmm0, (%rdx)
    00000997: 	cmpq	%rdi, -0x40(%rsp)
    0000099c: 	je	.Ltmp323 # Offset: 2460
    0000099e: 	movq	-0x18(%rsp), %rdx
    000009a3: 	cmpq	$0x1, %rdx
    000009a7: 	movq	%rdx, %r10
    000009aa: 	movq	-0x20(%rsp), %rdx
    000009af: 	je	.Ltmp326 # Offset: 2479
.Ltmp332:
    000009b1: 	addq	%rdi, %rsi
    000009b4: 	addq	-0x68(%rsp), %rdi
    000009b9: 	movaps	%xmm1, %xmm2
    000009bc: 	movq	(%rbp,%rdi,4), %xmm0
    000009c2: 	shufps	$0xe0, %xmm2, %xmm2
    000009c6: 	leaq	(%r13,%rsi,4), %rsi
    000009cb: 	mulps	%xmm2, %xmm0
    000009ce: 	movq	(%rsi), %xmm2
    000009d2: 	addps	%xmm2, %xmm0
    000009d5: 	movlps	%xmm0, (%rsi)
    000009d8: 	movq	%r10, %rsi
    000009db: 	andq	$-0x2, %rsi
    000009df: 	addq	%rsi, %rdx
    000009e2: 	cmpq	%rsi, %r10
    000009e5: 	je	.Ltmp323 # Offset: 2533
.Ltmp326:
    000009e7: 	leaq	(%rcx,%rdx), %rsi
    000009eb: 	addq	%r11, %rdx
    000009ee: 	mulss	(%rbp,%rdx,4), %xmm1
    000009f4: 	leaq	(%r13,%rsi,4), %rsi
    000009f9: 	addss	(%rsi), %xmm1
    000009fd: 	movss	%xmm1, (%rsi)
.Ltmp323:
    00000a01: 	addq	$0x1, %r8
    00000a05: 	addq	%r9, %rcx
    00000a08: 	addq	-0x78(%rsp), %rax
    00000a0d: 	cmpq	%r8, -0x60(%rsp)
    00000a12: 	jne	.Ltmp327 # Offset: 2578
    00000a18: 	addq	$0x1, 0x50(%rsp)
    00000a1e: 	movq	0x50(%rsp), %rax
    00000a23: 	addq	%r9, %r11
    00000a26: 	addq	$0x4, -0x70(%rsp)
    00000a2c: 	addq	-0x78(%rsp), %r14
    00000a31: 	cmpq	%rax, %r9
    00000a34: 	ja	.Ltmp328 # Offset: 2612
.Ltmp318:
    00000a3a: 	addq	$0x1a0, %rsp
    00000a41: 	popq	%rbx
    00000a42: 	popq	%rbp
    00000a43: 	popq	%r12
    00000a45: 	popq	%r13
    00000a47: 	popq	%r14
    00000a49: 	popq	%r15
    00000a4b: 	retq # Offset: 2635
    00000a4c: 	nopl	(%rax) # Size: 4
.Ltmp310:
    00000a50: 	movq	0x130(%rsp), %rdi
    00000a58: 	movq	0xc0(%rsp), %rsi
    00000a60: 	movq	%r15, %rcx
    00000a63: 	movq	%r14, 0xb8(%rsp)
    00000a6b: 	movq	0xd8(%rsp), %r8
    00000a73: 	leaq	(%r10,%rdi), %rdx
    00000a77: 	leaq	(%rsi,%rdx,4), %rdi
    00000a7b: 	movq	0xc8(%rsp), %rsi
    00000a83: 	movq	%rax, %rdx
    00000a86: 	movq	%rdi, -0x8(%rsp)
    00000a8b: 	movq	0xd0(%rsp), %rdi
    00000a93: 	movq	-0x8(%rsp), %r14
    00000a98: 	nopl	(%rax,%rax) # Size: 8
.Ltmp329:
    00000aa0: 	movss	(%rcx), %xmm0
    00000aa4: 	movss	(%rsi), %xmm1
    00000aa8: 	addq	$0x10, %rdx
    00000aac: 	addq	$0x10, %rcx
    00000ab0: 	addq	$0x10, %rsi
    00000ab4: 	addq	$0x10, %rdi
    00000ab8: 	addq	$0x10, %r8
    00000abc: 	mulss	%xmm3, %xmm1
    00000ac0: 	mulss	%xmm2, %xmm0
    00000ac4: 	addss	%xmm1, %xmm0
    00000ac8: 	movss	-0x10(%rdi), %xmm1
    00000acd: 	mulss	%xmm4, %xmm1
    00000ad1: 	addss	%xmm1, %xmm0
    00000ad5: 	movss	-0x10(%r8), %xmm1
    00000adb: 	mulss	%xmm5, %xmm1
    00000adf: 	addss	%xmm1, %xmm0
    00000ae3: 	addss	-0x10(%rdx), %xmm0
    00000ae8: 	movss	%xmm0, -0x10(%rdx)
    00000aed: 	movss	-0xc(%rcx), %xmm0
    00000af2: 	movss	-0xc(%rsi), %xmm1
    00000af7: 	mulss	%xmm2, %xmm0
    00000afb: 	mulss	%xmm3, %xmm1
    00000aff: 	addss	%xmm1, %xmm0
    00000b03: 	movss	-0xc(%rdi), %xmm1
    00000b08: 	mulss	%xmm4, %xmm1
    00000b0c: 	addss	%xmm1, %xmm0
    00000b10: 	movss	-0xc(%r8), %xmm1
    00000b16: 	mulss	%xmm5, %xmm1
    00000b1a: 	addss	%xmm1, %xmm0
    00000b1e: 	addss	-0xc(%rdx), %xmm0
    00000b23: 	movss	%xmm0, -0xc(%rdx)
    00000b28: 	movss	-0x8(%rcx), %xmm0
    00000b2d: 	movss	-0x8(%rsi), %xmm1
    00000b32: 	mulss	%xmm2, %xmm0
    00000b36: 	mulss	%xmm3, %xmm1
    00000b3a: 	addss	%xmm1, %xmm0
    00000b3e: 	movss	-0x8(%rdi), %xmm1
    00000b43: 	mulss	%xmm4, %xmm1
    00000b47: 	addss	%xmm1, %xmm0
    00000b4b: 	movss	-0x8(%r8), %xmm1
    00000b51: 	mulss	%xmm5, %xmm1
    00000b55: 	addss	%xmm1, %xmm0
    00000b59: 	addss	-0x8(%rdx), %xmm0
    00000b5e: 	movss	%xmm0, -0x8(%rdx)
    00000b63: 	movss	-0x4(%rcx), %xmm0
    00000b68: 	movss	-0x4(%rsi), %xmm1
    00000b6d: 	mulss	%xmm2, %xmm0
    00000b71: 	mulss	%xmm3, %xmm1
    00000b75: 	addss	%xmm1, %xmm0
    00000b79: 	movss	-0x4(%rdi), %xmm1
    00000b7e: 	mulss	%xmm4, %xmm1
    00000b82: 	addss	%xmm1, %xmm0
    00000b86: 	movss	-0x4(%r8), %xmm1
    00000b8c: 	mulss	%xmm5, %xmm1
    00000b90: 	addss	%xmm1, %xmm0
    00000b94: 	addss	-0x4(%rdx), %xmm0
    00000b99: 	movss	%xmm0, -0x4(%rdx)
    00000b9e: 	cmpq	%rdx, %r14
    00000ba1: 	jne	.Ltmp329 # Offset: 2977
    00000ba7: 	movq	0xb8(%rsp), %r14
    00000baf: 	jmp	.Ltmp330 # Offset: 2991
    00000bb4: 	nopl	(%rax) # Size: 4
.Ltmp321:
    00000bb8: 	movq	0x30(%rsp), %rdi
    00000bbd: 	movq	-0x8(%rsp), %rsi
    00000bc2: 	leaq	(%rcx,%rdi), %rdx
    00000bc6: 	movq	0x38(%rsp), %rdi
    00000bcb: 	leaq	(%rdi,%rdx,4), %rdi
    00000bcf: 	movq	%rax, %rdx
    00000bd2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp331:
    00000bd8: 	movss	(%rsi), %xmm0
    00000bdc: 	addq	$0x10, %rdx
    00000be0: 	addq	$0x10, %rsi
    00000be4: 	mulss	%xmm1, %xmm0
    00000be8: 	addss	-0x10(%rdx), %xmm0
    00000bed: 	movss	%xmm0, -0x10(%rdx)
    00000bf2: 	movss	-0xc(%rsi), %xmm0
    00000bf7: 	mulss	%xmm1, %xmm0
    00000bfb: 	addss	-0xc(%rdx), %xmm0
    00000c00: 	movss	%xmm0, -0xc(%rdx)
    00000c05: 	movss	-0x8(%rsi), %xmm0
    00000c0a: 	mulss	%xmm1, %xmm0
    00000c0e: 	addss	-0x8(%rdx), %xmm0
    00000c13: 	movss	%xmm0, -0x8(%rdx)
    00000c18: 	movss	-0x4(%rsi), %xmm0
    00000c1d: 	mulss	%xmm1, %xmm0
    00000c21: 	addss	-0x4(%rdx), %xmm0
    00000c26: 	movss	%xmm0, -0x4(%rdx)
    00000c2b: 	cmpq	%rdi, %rdx
    00000c2e: 	jne	.Ltmp331 # Offset: 3118
    00000c30: 	jmp	.Ltmp319 # Offset: 3120
    00000c35: 	nopl	(%rax) # Size: 3
.Ltmp324:
    00000c38: 	movss	(%r15), %xmm0
    00000c3d: 	movq	-0x10(%rsp), %rsi
    00000c42: 	mulss	%xmm1, %xmm0
    00000c46: 	addss	(%rdx), %xmm0
    00000c4a: 	movss	%xmm0, (%rdx)
    00000c4e: 	cmpq	%rsi, %r9
    00000c51: 	jbe	.Ltmp323 # Offset: 3153
    00000c57: 	movq	0x10(%rsp), %rdi
    00000c5c: 	leaq	(%rsi,%rcx), %rdx
    00000c60: 	leaq	(%r13,%rdx,4), %rdx
    00000c65: 	movss	(%rdi), %xmm0
    00000c69: 	movq	0x8(%rsp), %rdi
    00000c6e: 	mulss	%xmm1, %xmm0
    00000c72: 	addss	(%rdx), %xmm0
    00000c76: 	movss	%xmm0, (%rdx)
    00000c7a: 	cmpq	%rdi, %r9
    00000c7d: 	jbe	.Ltmp323 # Offset: 3197
    00000c83: 	leaq	(%rdi,%rcx), %rdx
    00000c87: 	movq	0x20(%rsp), %rdi
    00000c8c: 	movq	0x18(%rsp), %rsi
    00000c91: 	leaq	(%r13,%rdx,4), %rdx
    00000c96: 	movss	(%rdi), %xmm0
    00000c9a: 	mulss	%xmm1, %xmm0
    00000c9e: 	addss	(%rdx), %xmm0
    00000ca2: 	movss	%xmm0, (%rdx)
    00000ca6: 	cmpq	%rsi, %r9
    00000ca9: 	jbe	.Ltmp323 # Offset: 3241
    00000caf: 	movq	0x28(%rsp), %rdi
    00000cb4: 	leaq	(%rsi,%rcx), %rdx
    00000cb8: 	leaq	(%r13,%rdx,4), %rdx
    00000cbd: 	mulss	(%rdi), %xmm1
    00000cc1: 	addss	(%rdx), %xmm1
    00000cc5: 	movss	%xmm1, (%rdx)
    00000cc9: 	jmp	.Ltmp323 # Offset: 3273
    00000cce: 	nop # Size: 2
.Ltmp313:
    00000cd0: 	movq	0xe8(%rsp), %rsi
    00000cd8: 	movq	0x100(%rsp), %rcx
    00000ce0: 	movq	-0x38(%rsp), %rdi
    00000ce5: 	movss	(%rsi), %xmm0
    00000ce9: 	movq	0xf0(%rsp), %rsi
    00000cf1: 	leaq	(%r10,%rdi), %rdx
    00000cf5: 	movq	-0x78(%rsp), %rdi
    00000cfa: 	movss	(%rsi), %xmm1
    00000cfe: 	mulss	%xmm2, %xmm0
    00000d02: 	movq	0xf8(%rsp), %rsi
    00000d0a: 	leaq	(%rdi,%rdx,4), %rdx
    00000d0e: 	mulss	%xmm3, %xmm1
    00000d12: 	addss	%xmm1, %xmm0
    00000d16: 	movss	(%rsi), %xmm1
    00000d1a: 	movq	-0x68(%rsp), %rsi
    00000d1f: 	mulss	%xmm4, %xmm1
    00000d23: 	addss	%xmm1, %xmm0
    00000d27: 	movss	(%rcx), %xmm1
    00000d2b: 	movq	0xe0(%rsp), %rcx
    00000d33: 	mulss	%xmm5, %xmm1
    00000d37: 	addss	%xmm1, %xmm0
    00000d3b: 	addss	(%rdx), %xmm0
    00000d3f: 	movss	%xmm0, (%rdx)
    00000d43: 	cmpq	%rcx, %rsi
    00000d46: 	jbe	.Ltmp312 # Offset: 3398
    00000d4c: 	leaq	(%rcx,%r10), %rdx
    00000d50: 	movq	0x110(%rsp), %rcx
    00000d58: 	leaq	(%rdi,%rdx,4), %rdx
    00000d5c: 	movss	(%rcx), %xmm0
    00000d60: 	movq	0x118(%rsp), %rcx
    00000d68: 	movss	(%rcx), %xmm1
    00000d6c: 	mulss	%xmm2, %xmm0
    00000d70: 	movq	0x120(%rsp), %rcx
    00000d78: 	mulss	%xmm3, %xmm1
    00000d7c: 	addss	%xmm1, %xmm0
    00000d80: 	movss	(%rcx), %xmm1
    00000d84: 	movq	0x128(%rsp), %rcx
    00000d8c: 	mulss	%xmm4, %xmm1
    00000d90: 	addss	%xmm1, %xmm0
    00000d94: 	movss	(%rcx), %xmm1
    00000d98: 	movq	0x108(%rsp), %rcx
    00000da0: 	mulss	%xmm5, %xmm1
    00000da4: 	addss	%xmm1, %xmm0
    00000da8: 	addss	(%rdx), %xmm0
    00000dac: 	movss	%xmm0, (%rdx)
    00000db0: 	cmpq	%rcx, %rsi
    00000db3: 	jbe	.Ltmp312 # Offset: 3507
    00000db9: 	leaq	(%rcx,%r10), %rdx
    00000dbd: 	movq	0x140(%rsp), %rcx
    00000dc5: 	leaq	(%rdi,%rdx,4), %rdx
    00000dc9: 	movss	(%rcx), %xmm0
    00000dcd: 	movq	0x148(%rsp), %rcx
    00000dd5: 	movss	(%rcx), %xmm1
    00000dd9: 	mulss	%xmm2, %xmm0
    00000ddd: 	movq	0x150(%rsp), %rcx
    00000de5: 	mulss	%xmm3, %xmm1
    00000de9: 	addss	%xmm1, %xmm0
    00000ded: 	movss	(%rcx), %xmm1
    00000df1: 	movq	0x158(%rsp), %rcx
    00000df9: 	mulss	%xmm4, %xmm1
    00000dfd: 	addss	%xmm1, %xmm0
    00000e01: 	movss	(%rcx), %xmm1
    00000e05: 	movq	0x138(%rsp), %rcx
    00000e0d: 	mulss	%xmm5, %xmm1
    00000e11: 	addss	%xmm1, %xmm0
    00000e15: 	addss	(%rdx), %xmm0
    00000e19: 	movss	%xmm0, (%rdx)
    00000e1d: 	cmpq	%rcx, %rsi
    00000e20: 	jbe	.Ltmp312 # Offset: 3616
    00000e26: 	leaq	(%rcx,%r10), %rdx
    00000e2a: 	movq	0x178(%rsp), %rsi
    00000e32: 	leaq	(%rdi,%rdx,4), %rdx
    00000e36: 	movq	0x170(%rsp), %rdi
    00000e3e: 	mulss	(%rsi), %xmm2
    00000e42: 	movq	0x160(%rsp), %rsi
    00000e4a: 	mulss	(%rdi), %xmm3
    00000e4e: 	movq	0x168(%rsp), %rdi
    00000e56: 	mulss	(%rsi), %xmm5
    00000e5a: 	mulss	(%rdi), %xmm4
    00000e5e: 	addss	%xmm2, %xmm3
    00000e62: 	addss	%xmm3, %xmm4
    00000e66: 	addss	%xmm5, %xmm4
    00000e6a: 	addss	(%rdx), %xmm4
    00000e6e: 	movss	%xmm4, (%rdx)
    00000e72: 	jmp	.Ltmp312 # Offset: 3698
.Ltmp325:
    00000e77: 	movq	-0x40(%rsp), %r10
    00000e7c: 	movq	%rbx, %rdx
    00000e7f: 	xorl	%edi, %edi
    00000e81: 	jmp	.Ltmp332 # Offset: 3713
.Ltmp314:
    00000e86: 	movq	0x90(%rsp), %rdi
    00000e8e: 	movq	-0x38(%rsp), %rdx
    00000e93: 	xorl	%ecx, %ecx
    00000e95: 	jmp	.Ltmp333 # Offset: 3733
.Ltmp308:
    00000e9a: 	movq	$0x0, 0x50(%rsp)
    00000ea3: 	jmp	.Ltmp334 # Offset: 3747
DWARF CFI Instructions:
    <empty>
End of Function "_ZN19matmul_KJI_unrolledIfEclEPKfS2_Pfmm.isra.0/1(*2)"

Binary Function "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1(*2)" after disassembly {
  All names   : _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1
                _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/matrix_multiply.cpp/1
  Number      : 24
  State       : disassembled
  Address     : 0xd220
  Size        : 0xd3
  MaxSize     : 0xe0
  Offset      : 0xd220
  Section     : .text
  Orc Section : .local.text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB023:
    00000000: 	pushq	%r13
    00000002: 	pushq	%r12
    00000004: 	leaq	0x10(%rdi), %r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	subq	$0x18, %rsp
    0000000e: 	movq	%fs:0x28, %rax
    00000017: 	movq	%rax, 0x8(%rsp)
    0000001c: 	xorl	%eax, %eax
    0000001e: 	movq	%r12, (%rdi)
    00000021: 	testq	%rsi, %rsi
    00000024: 	je	.Ltmp335 # Offset: 36
    0000002a: 	movq	%rdi, %rbx
    0000002d: 	movq	%rsi, %rdi
    00000030: 	movq	%rsi, %rbp
    00000033: 	callq	strlen@PLT # Offset: 51
    00000038: 	movq	%rax, (%rsp)
    0000003c: 	movq	%rax, %r13
    0000003f: 	cmpq	$0xf, %rax
    00000043: 	ja	.Ltmp336 # Offset: 67
    00000045: 	cmpq	$0x1, %rax
    00000049: 	jne	.Ltmp337 # Offset: 73
    0000004b: 	movzbl	(%rbp), %edx
    0000004f: 	movb	%dl, 0x10(%rbx)
.Ltmp339:
    00000052: 	movq	%rax, 0x8(%rbx)
    00000056: 	movb	$0x0, (%r12,%rax)
    0000005b: 	movq	0x8(%rsp), %rax
    00000060: 	subq	%fs:0x28, %rax
    00000069: 	jne	.Ltmp338 # Offset: 105
    0000006b: 	addq	$0x18, %rsp
    0000006f: 	popq	%rbx
    00000070: 	popq	%rbp
    00000071: 	popq	%r12
    00000073: 	popq	%r13
    00000075: 	retq # Offset: 117
    00000076: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp337:
    00000080: 	testq	%rax, %rax
    00000083: 	je	.Ltmp339 # Offset: 131
    00000085: 	jmp	.Ltmp340 # Offset: 133
    00000087: 	nopw	(%rax,%rax) # Size: 9
.Ltmp336:
    00000090: 	movq	%rsp, %rsi
    00000093: 	xorl	%edx, %edx
    00000095: 	movq	%rbx, %rdi
    00000098: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 152
    0000009d: 	movq	%rax, (%rbx)
    000000a0: 	movq	%rax, %r12
    000000a3: 	movq	(%rsp), %rax
    000000a7: 	movq	%rax, 0x10(%rbx)
.Ltmp340:
    000000ab: 	movq	%r12, %rdi
    000000ae: 	movq	%r13, %rdx
    000000b1: 	movq	%rbp, %rsi
    000000b4: 	callq	memcpy@PLT # Offset: 180
    000000b9: 	movq	(%rsp), %rax
    000000bd: 	movq	(%rbx), %r12
    000000c0: 	jmp	.Ltmp339 # Offset: 192
.Ltmp338:
    000000c2: 	callq	__stack_chk_fail@PLT # Offset: 194
.Ltmp335:
    000000c7: 	leaq	DATAat0x2d008(%rip), %rdi
    000000ce: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 206
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1(*2)"

Binary Function "_Z13record_resultdPKc" after disassembly {
  Number      : 25
  State       : disassembled
  Address     : 0xd300
  Size        : 0xa0
  MaxSize     : 0xa0
  Offset      : 0xd300
  Section     : .text
  Orc Section : .local.text._Z13record_resultdPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB024:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %rbx
    00000008: 	subq	$0x10, %rsp
    0000000c: 	movq	results(%rip), %rdi
    00000013: 	movl	allocated_results(%rip), %esi
    00000019: 	testq	%rdi, %rdi
    0000001c: 	je	.Ltmp341 # Offset: 28
    0000001e: 	movl	current_test(%rip), %eax
    00000024: 	cmpl	%esi, %eax
    00000026: 	jl	.Ltmp342 # Offset: 38
.Ltmp341:
    00000028: 	addl	$0xa, %esi
    0000002b: 	movsd	%xmm0, 0x8(%rsp)
    00000031: 	movl	%esi, allocated_results(%rip)
    00000037: 	movslq	%esi, %rsi
    0000003a: 	shlq	$0x4, %rsi
    0000003e: 	callq	realloc@PLT # Offset: 62
    00000043: 	movq	%rax, results(%rip)
    0000004a: 	movq	%rax, %rdi
    0000004d: 	testq	%rax, %rax
    00000050: 	je	.Ltmp343 # Offset: 80
    00000052: 	movl	current_test(%rip), %eax
    00000058: 	movsd	0x8(%rsp), %xmm0
.Ltmp342:
    0000005e: 	movslq	%eax, %rdx
    00000061: 	addl	$0x1, %eax
    00000064: 	shlq	$0x4, %rdx
    00000068: 	addq	%rdx, %rdi
    0000006b: 	movsd	%xmm0, (%rdi)
    0000006f: 	movq	%rbx, 0x8(%rdi)
    00000073: 	movl	%eax, current_test(%rip)
    00000079: 	addq	$0x10, %rsp
    0000007d: 	popq	%rbx
    0000007e: 	retq # Offset: 126
.Ltmp343:
    0000007f: 	movl	allocated_results(%rip), %edx
    00000085: 	movl	$0x1, %edi
    0000008a: 	leaq	DATAat0x2d038(%rip), %rsi
    00000091: 	xorl	%eax, %eax
    00000093: 	callq	__printf_chk@PLT # Offset: 147
    00000098: 	orl	$-0x1, %edi
    0000009b: 	callq	exit@PLT # Offset: 155
DWARF CFI Instructions:
    <empty>
End of Function "_Z13record_resultdPKc"

Binary Function "_Z9summarizePKciiii" after disassembly {
  Number      : 26
  State       : disassembled
  Address     : 0xd3a0
  Size        : 0x325
  MaxSize     : 0x330
  Offset      : 0xd3a0
  Section     : .text
  Orc Section : .local.text._Z9summarizePKciiii
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB025:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x38, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movl	%r8d, 0x2c(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp344 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	movl	%esi, %r15d
    0000002b: 	movl	%edx, %r13d
    0000002e: 	jle	.Ltmp345 # Offset: 46
    00000034: 	movq	results(%rip), %rcx
    0000003b: 	subl	$0x1, %eax
    0000003e: 	movl	$0xc, %ebx
    00000043: 	shlq	$0x4, %rax
    00000047: 	leaq	0x8(%rcx), %r14
    0000004b: 	leaq	0x18(%rcx,%rax), %rbp
.Ltmp346:
    00000050: 	movq	(%r14), %rdi
    00000053: 	callq	strlen@PLT # Offset: 83
    00000058: 	cmpl	%eax, %ebx
    0000005a: 	cmovll	%eax, %ebx
    0000005d: 	addq	$0x10, %r14
    00000061: 	cmpq	%r14, %rbp
    00000064: 	jne	.Ltmp346 # Offset: 100
    00000066: 	leal	-0xc(%rbx), %edx
.Ltmp359:
    00000069: 	leaq	DATAat0x2d5e8(%rip), %rbp
    00000070: 	leaq	DATAat0x2d058(%rip), %rsi
    00000077: 	movl	$0x1, %edi
    0000007c: 	xorl	%eax, %eax
    0000007e: 	movq	%rbp, %rcx
    00000081: 	callq	__printf_chk@PLT # Offset: 129
    00000086: 	movl	%ebx, %edx
    00000088: 	movq	%rbp, %rcx
    0000008b: 	movl	$0x1, %edi
    00000090: 	leaq	DATAat0x2d098(%rip), %rsi
    00000097: 	xorl	%eax, %eax
    00000099: 	callq	__printf_chk@PLT # Offset: 153
    0000009e: 	movl	current_test(%rip), %edx
    000000a4: 	testl	%edx, %edx
    000000a6: 	jle	.Ltmp347 # Offset: 166
    000000ac: 	pxor	%xmm0, %xmm0
    000000b0: 	pxor	%xmm1, %xmm1
    000000b4: 	xorl	%r14d, %r14d
    000000b7: 	movsd	DATAat0x2da08(%rip), %xmm3
    000000bf: 	cvtsi2sd	%r15d, %xmm0
    000000c4: 	leaq	DATAat0x2d0c8(%rip), %rbp
    000000cb: 	cvtsi2sd	%r13d, %xmm1
    000000d0: 	mulsd	%xmm1, %xmm0
    000000d4: 	divsd	DATAat0x2da00(%rip), %xmm0
    000000dc: 	movsd	%xmm0, 0x20(%rsp)
    000000e2: 	jmp	.Ltmp348 # Offset: 226
    000000e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp352:
    000000f0: 	comisd	%xmm0, %xmm3
    000000f4: 	ja	.Ltmp349 # Offset: 244
    000000fa: 	movq	DATAat0x2d9f0(%rip), %rdi
    00000101: 	movq	%rdi, %xmm2
.Ltmp353:
    00000106: 	comisd	%xmm0, %xmm3
    0000010a: 	movq	DATAat0x2d9f0(%rip), %rsi
    00000111: 	movq	%rsi, %xmm1
    00000116: 	ja	.Ltmp350 # Offset: 278
    00000118: 	movsd	0x20(%rsp), %xmm1
    0000011e: 	divsd	%xmm0, %xmm1
.Ltmp350:
    00000122: 	movq	0x8(%rax), %r15
    00000126: 	movsd	%xmm0, 0x18(%rsp)
    0000012c: 	addq	$0x1, %r14
    00000130: 	movsd	%xmm1, 0x10(%rsp)
    00000136: 	movq	%r15, %rdi
    00000139: 	movsd	%xmm2, 0x8(%rsp)
    0000013f: 	callq	strlen@PLT # Offset: 319
    00000144: 	movsd	0x8(%rsp), %xmm2
    0000014a: 	movl	%ebx, %ecx
    0000014c: 	movq	%r15, %r9
    0000014f: 	movsd	0x10(%rsp), %xmm1
    00000155: 	subl	%eax, %ecx
    00000157: 	movl	$0x1, %edi
    0000015c: 	movl	%r13d, %edx
    0000015f: 	movsd	0x18(%rsp), %xmm0
    00000165: 	leaq	DATAat0x2d5cd(%rip), %r8
    0000016c: 	movq	%rbp, %rsi
    0000016f: 	movl	$0x3, %eax
    00000174: 	callq	__printf_chk@PLT # Offset: 372
    00000179: 	movl	current_test(%rip), %eax
    0000017f: 	movq	DATAat0x2da08(%rip), %rdi
    00000186: 	cmpl	%r14d, %eax
    00000189: 	movq	%rdi, %xmm3
    0000018e: 	jle	.Ltmp351 # Offset: 398
.Ltmp348:
    00000190: 	movq	results(%rip), %rax
    00000197: 	movq	%r14, %rcx
    0000019a: 	movl	%r14d, %r13d
    0000019d: 	shlq	$0x4, %rcx
    000001a1: 	movsd	(%rax), %xmm1
    000001a5: 	addq	%rcx, %rax
    000001a8: 	movsd	(%rax), %xmm0
    000001ac: 	comisd	%xmm1, %xmm3
    000001b0: 	ja	.Ltmp352 # Offset: 432
    000001b6: 	movapd	%xmm0, %xmm2
    000001ba: 	divsd	%xmm1, %xmm2
    000001be: 	jmp	.Ltmp353 # Offset: 446
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp349:
    000001c8: 	movq	DATAat0x2d9f8(%rip), %rsi
    000001cf: 	movq	DATAat0x2d9f0(%rip), %rdx
    000001d6: 	movq	%rsi, %xmm2
    000001db: 	movq	%rdx, %xmm1
    000001e0: 	jmp	.Ltmp350 # Offset: 480
    000001e5: 	nopl	(%rax) # Size: 3
.Ltmp351:
    000001e8: 	testl	%eax, %eax
    000001ea: 	jle	.Ltmp347 # Offset: 490
    000001f0: 	movq	results(%rip), %rdx
    000001f7: 	leal	-0x1(%rax), %ecx
    000001fa: 	pxor	%xmm1, %xmm1
    000001fe: 	shlq	$0x4, %rcx
    00000202: 	movapd	%xmm1, %xmm0
    00000206: 	leaq	0x10(%rdx), %rax
    0000020a: 	addq	%rax, %rcx
    0000020d: 	jmp	.Ltmp354 # Offset: 525
    0000020f: 	nop # Size: 1
.Ltmp355:
    00000210: 	addq	$0x10, %rax
.Ltmp354:
    00000214: 	addsd	(%rdx), %xmm0
    00000218: 	movq	%rax, %rdx
    0000021b: 	cmpq	%rax, %rcx
    0000021e: 	jne	.Ltmp355 # Offset: 542
.Ltmp360:
    00000220: 	movq	%r12, %rdx
    00000223: 	movl	$0x1, %edi
    00000228: 	movl	$0x1, %eax
    0000022d: 	movsd	%xmm1, 0x8(%rsp)
    00000233: 	leaq	DATAat0x2d0f8(%rip), %rsi
    0000023a: 	callq	__printf_chk@PLT # Offset: 570
    0000023f: 	movl	0x2c(%rsp), %eax
    00000243: 	movl	current_test(%rip), %ebp
    00000249: 	testl	%eax, %eax
    0000024b: 	je	.Ltmp356 # Offset: 587
    0000024d: 	cmpl	$0x1, %ebp
    00000250: 	jg	.Ltmp357 # Offset: 592
.Ltmp356:
    00000252: 	movl	$0x0, current_test(%rip)
.Ltmp344:
    0000025c: 	addq	$0x38, %rsp
    00000260: 	popq	%rbx
    00000261: 	popq	%rbp
    00000262: 	popq	%r12
    00000264: 	popq	%r13
    00000266: 	popq	%r14
    00000268: 	popq	%r15
    0000026a: 	retq # Offset: 618
    0000026b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp357:
    00000270: 	movq	results(%rip), %rbx
    00000277: 	movsd	0x8(%rsp), %xmm1
    0000027d: 	movl	$0x1, %r13d
    00000283: 	movsd	(%rbx), %xmm5
    00000287: 	addq	$0x10, %rbx
    0000028b: 	movsd	%xmm5, 0x10(%rsp)
    00000291: 	nopl	(%rax) # Size: 7
.Ltmp358:
    00000298: 	movsd	(%rbx), %xmm0
    0000029c: 	movsd	%xmm1, 0x8(%rsp)
    000002a2: 	addl	$0x1, %r13d
    000002a6: 	addq	$0x10, %rbx
    000002aa: 	divsd	0x10(%rsp), %xmm0
    000002b0: 	callq	log@PLT # Offset: 688
    000002b5: 	movsd	0x8(%rsp), %xmm1
    000002bb: 	addsd	%xmm0, %xmm1
    000002bf: 	cmpl	%r13d, %ebp
    000002c2: 	jg	.Ltmp358 # Offset: 706
    000002c4: 	subl	$0x1, %ebp
    000002c7: 	pxor	%xmm0, %xmm0
    000002cb: 	cvtsi2sd	%ebp, %xmm0
    000002cf: 	divsd	%xmm0, %xmm1
    000002d3: 	movapd	%xmm1, %xmm0
    000002d7: 	callq	exp@PLT # Offset: 727
    000002dc: 	movq	%r12, %rdx
    000002df: 	movl	$0x1, %edi
    000002e4: 	leaq	DATAat0x2d5a8(%rip), %rsi
    000002eb: 	movl	$0x1, %eax
    000002f0: 	callq	__printf_chk@PLT # Offset: 752
    000002f5: 	movl	$0x0, current_test(%rip)
    000002ff: 	jmp	.Ltmp344 # Offset: 767
    00000304: 	nopl	(%rax) # Size: 4
.Ltmp345:
    00000308: 	xorl	%edx, %edx
    0000030a: 	movl	$0xc, %ebx
    0000030f: 	jmp	.Ltmp359 # Offset: 783
    00000314: 	nopl	(%rax) # Size: 4
.Ltmp347:
    00000318: 	pxor	%xmm1, %xmm1
    0000031c: 	movapd	%xmm1, %xmm0
    00000320: 	jmp	.Ltmp360 # Offset: 800
DWARF CFI Instructions:
    <empty>
End of Function "_Z9summarizePKciiii"

Binary Function "_Z17summarize_simplefP8_IO_FILEPKc" after disassembly {
  Number      : 27
  State       : disassembled
  Address     : 0xd6d0
  Size        : 0x1a6
  MaxSize     : 0x1b0
  Offset      : 0xd6d0
  Section     : .text
  Orc Section : .local.text._Z17summarize_simplefP8_IO_FILEPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB026:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x18, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movq	%rsi, 0x8(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp361 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	jle	.Ltmp362 # Offset: 40
    0000002e: 	movq	results(%rip), %rdx
    00000035: 	subl	$0x1, %eax
    00000038: 	movl	$0xc, %ebp
    0000003d: 	shlq	$0x4, %rax
    00000041: 	leaq	0x8(%rdx), %r13
    00000045: 	leaq	0x18(%rdx,%rax), %rbx
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp363:
    00000050: 	movq	(%r13), %rdi
    00000054: 	callq	strlen@PLT # Offset: 84
    00000059: 	cmpl	%eax, %ebp
    0000005b: 	cmovll	%eax, %ebp
    0000005e: 	addq	$0x10, %r13
    00000062: 	cmpq	%r13, %rbx
    00000065: 	jne	.Ltmp363 # Offset: 101
    00000067: 	leal	-0xc(%rbp), %ecx
.Ltmp368:
    0000006a: 	leaq	DATAat0x2d5e8(%rip), %r8
    00000071: 	movl	$0x1, %esi
    00000076: 	xorl	%eax, %eax
    00000078: 	xorl	%ebx, %ebx
    0000007a: 	leaq	DATAat0x2d120(%rip), %rdx
    00000081: 	movq	%r12, %rdi
    00000084: 	leaq	DATAat0x2d5ce(%rip), %r14
    0000008b: 	callq	__fprintf_chk@PLT # Offset: 139
    00000090: 	movl	$0x1, %esi
    00000095: 	movl	%ebp, %ecx
    00000097: 	movq	%r12, %rdi
    0000009a: 	leaq	DATAat0x2d5e8(%rip), %r8
    000000a1: 	leaq	DATAat0x2d5bc(%rip), %rdx
    000000a8: 	xorl	%eax, %eax
    000000aa: 	callq	__fprintf_chk@PLT # Offset: 170
    000000af: 	movl	current_test(%rip), %esi
    000000b5: 	testl	%esi, %esi
    000000b7: 	jle	.Ltmp364 # Offset: 183
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp365:
    000000c0: 	movq	%rbx, %rdx
    000000c3: 	shlq	$0x4, %rdx
    000000c7: 	addq	results(%rip), %rdx
    000000ce: 	movq	0x8(%rdx), %r13
    000000d2: 	movq	%rdx, %r15
    000000d5: 	movq	%r13, %rdi
    000000d8: 	callq	strlen@PLT # Offset: 216
    000000dd: 	subq	$0x8, %rsp
    000000e1: 	movsd	(%r15), %xmm0
    000000e6: 	movl	%ebx, %ecx
    000000e8: 	pushq	%r13
    000000ea: 	movl	%ebp, %r8d
    000000ed: 	movq	%r14, %rdx
    000000f0: 	leaq	DATAat0x2d5cd(%rip), %r9
    000000f7: 	subl	%eax, %r8d
    000000fa: 	movl	$0x1, %esi
    000000ff: 	movq	%r12, %rdi
    00000102: 	movl	$0x1, %eax
    00000107: 	addq	$0x1, %rbx
    0000010b: 	callq	__fprintf_chk@PLT # Offset: 267
    00000110: 	movl	current_test(%rip), %eax
    00000116: 	popq	%rdx
    00000117: 	popq	%rcx
    00000118: 	cmpl	%ebx, %eax
    0000011a: 	jg	.Ltmp365 # Offset: 282
    0000011c: 	testl	%eax, %eax
    0000011e: 	jle	.Ltmp364 # Offset: 286
    00000124: 	movq	results(%rip), %rdx
    0000012b: 	leal	-0x1(%rax), %ecx
    0000012e: 	pxor	%xmm0, %xmm0
    00000132: 	shlq	$0x4, %rcx
    00000136: 	leaq	0x10(%rdx), %rax
    0000013a: 	addq	%rax, %rcx
    0000013d: 	jmp	.Ltmp366 # Offset: 317
    0000013f: 	nop # Size: 1
.Ltmp367:
    00000140: 	addq	$0x10, %rax
.Ltmp366:
    00000144: 	addsd	(%rdx), %xmm0
    00000148: 	movq	%rax, %rdx
    0000014b: 	cmpq	%rax, %rcx
    0000014e: 	jne	.Ltmp367 # Offset: 334
.Ltmp369:
    00000150: 	movq	0x8(%rsp), %rcx
    00000155: 	movl	$0x1, %esi
    0000015a: 	movq	%r12, %rdi
    0000015d: 	movl	$0x1, %eax
    00000162: 	leaq	DATAat0x2d0f8(%rip), %rdx
    00000169: 	callq	__fprintf_chk@PLT # Offset: 361
    0000016e: 	movl	$0x0, current_test(%rip)
.Ltmp361:
    00000178: 	addq	$0x18, %rsp
    0000017c: 	popq	%rbx
    0000017d: 	popq	%rbp
    0000017e: 	popq	%r12
    00000180: 	popq	%r13
    00000182: 	popq	%r14
    00000184: 	popq	%r15
    00000186: 	retq # Offset: 390
    00000187: 	nopw	(%rax,%rax) # Size: 9
.Ltmp362:
    00000190: 	xorl	%ecx, %ecx
    00000192: 	movl	$0xc, %ebp
    00000197: 	jmp	.Ltmp368 # Offset: 407
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp364:
    000001a0: 	pxor	%xmm0, %xmm0
    000001a4: 	jmp	.Ltmp369 # Offset: 420
DWARF CFI Instructions:
    <empty>
End of Function "_Z17summarize_simplefP8_IO_FILEPKc"

Binary Function "_Z11start_timerv" after disassembly {
  Number      : 28
  State       : disassembled
  Address     : 0xd880
  Size        : 0x19
  MaxSize     : 0x20
  Offset      : 0xd880
  Section     : .text
  Orc Section : .local.text._Z11start_timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB027:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	movq	%rax, start_time(%rip)
    00000014: 	addq	$0x8, %rsp
    00000018: 	retq # Offset: 24
DWARF CFI Instructions:
    <empty>
End of Function "_Z11start_timerv"

Binary Function "_Z5timerv" after disassembly {
  Number      : 29
  State       : disassembled
  Address     : 0xd8a0
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0xd8a0
  Section     : .text
  Orc Section : .local.text._Z5timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB028:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	pxor	%xmm0, %xmm0
    00000011: 	movq	%rax, end_time(%rip)
    00000018: 	subq	start_time(%rip), %rax
    0000001f: 	cvtsi2sd	%rax, %xmm0
    00000024: 	divsd	DATAat0x2da00(%rip), %xmm0
    0000002c: 	addq	$0x8, %rsp
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z5timerv"

Binary Function "_ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 30
  State       : disassembled
  Address     : 0xd8e0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0xd8e0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB029:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f38, %edx
    00000017: 	movl	$0x746e6975, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 31
  State       : disassembled
  Address     : 0xd910
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0xd910
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB030:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3631746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 32
  State       : disassembled
  Address     : 0xd940
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0xd940
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB031:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3233746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 33
  State       : disassembled
  Address     : 0xd970
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0xd970
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB032:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3436746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 34
  State       : disassembled
  Address     : 0xd9a0
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0xd9a0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB033:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x38746e69, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x745f, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 35
  State       : disassembled
  Address     : 0xd9d0
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0xd9d0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB034:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x38746e69, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x745f, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 36
  State       : disassembled
  Address     : 0xda00
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0xda00
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB035:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f36, %edx
    00000017: 	movl	$0x31746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 37
  State       : disassembled
  Address     : 0xda30
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0xda30
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB036:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f32, %edx
    00000017: 	movl	$0x33746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 38
  State       : disassembled
  Address     : 0xda60
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0xda60
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB037:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f34, %edx
    00000017: 	movl	$0x36746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 39
  State       : disassembled
  Address     : 0xda90
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0xda90
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB038:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x14(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x616f6c66, 0x10(%rdi)
    00000019: 	movq	$0x5, 0x8(%rdi)
    00000021: 	movb	$0x0, 0x15(%rdi)
    00000025: 	retq # Offset: 37
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 40
  State       : disassembled
  Address     : 0xdac0
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0xdac0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB039:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x62756f64, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x656c, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 41
  State       : disassembled
  Address     : 0xdaf0
  Size        : 0x36
  MaxSize     : 0x40
  Offset      : 0xdaf0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB040:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x65, 0x1a(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x756f6420676e6f6c, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movl	$0x6c62, %edx
    00000021: 	movq	%rcx, 0x10(%rdi)
    00000025: 	movw	%dx, 0x18(%rdi)
    00000029: 	movq	$0xb, 0x8(%rdi)
    00000031: 	movb	$0x0, 0x1b(%rdi)
    00000035: 	retq # Offset: 53
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 42
  State       : disassembled
  Address     : 0xdb30
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0xdb30
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB041:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f38746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 43
  State       : disassembled
  Address     : 0xdb60
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0xdb60
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB042:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3631746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 44
  State       : disassembled
  Address     : 0xdb90
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0xdb90
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB043:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3233746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 45
  State       : disassembled
  Address     : 0xdbc0
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0xdbc0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB044:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3436746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 46
  State       : disassembled
  Address     : 0xdbf0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0xdbf0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB045:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x745f, %edx
    00000017: 	movl	$0x38746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 47
  State       : disassembled
  Address     : 0xdc20
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0xdc20
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB046:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3631746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 48
  State       : disassembled
  Address     : 0xdc50
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0xdc50
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB047:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3233746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 49
  State       : disassembled
  Address     : 0xdc80
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0xdc80
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB048:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3436746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 50
  State       : disassembled
  Address     : 0xdcb0
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0xdcb0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB049:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x616f6c66, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x2a74, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 51
  State       : disassembled
  Address     : 0xdce0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0xdce0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB050:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x656c, %edx
    00000017: 	movl	$0x62756f64, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 52
  State       : disassembled
  Address     : 0xdd10
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0xdd10
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB051:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x0, 0x1c(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x756f6420676e6f6c, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movl	$0x2a656c62, 0x18(%rdi)
    00000027: 	movq	$0xc, 0x8(%rdi)
    0000002f: 	retq # Offset: 47
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1(*2)" after disassembly {
  All names   : _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1
                _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/matrix_multiply.cpp/1
  Number      : 53
  State       : disassembled
  Address     : 0xdd40
  Size        : 0x114
  MaxSize     : 0x120
  Offset      : 0xdd40
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB052:
    00000000: 	pushq	%r12
    00000002: 	movq	%rdi, %rsi
    00000005: 	pushq	%rbp
    00000006: 	pushq	%rbx
    00000007: 	subq	$0x10, %rsp
    0000000b: 	movq	"_ZL7gLabels/1"+48(%rip), %rbx
    00000012: 	movq	%fs:0x28, %rax
    0000001b: 	movq	%rax, 0x8(%rsp)
    00000020: 	xorl	%eax, %eax
    00000022: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000029: 	subq	$0x20, %rax
    0000002d: 	cmpq	%rax, %rbx
    00000030: 	je	.Ltmp370 # Offset: 48
    00000036: 	leaq	0x10(%rbx), %rdi
    0000003a: 	movq	0x8(%rsi), %r12
    0000003e: 	movq	%rdi, (%rbx)
    00000041: 	movq	(%rsi), %rbp
    00000044: 	movq	%rbp, %rax
    00000047: 	addq	%r12, %rax
    0000004a: 	je	.Ltmp371 # Offset: 74
    0000004c: 	testq	%rbp, %rbp
    0000004f: 	je	.Ltmp372 # Offset: 79
.Ltmp371:
    00000055: 	movq	%r12, (%rsp)
    00000059: 	cmpq	$0xf, %r12
    0000005d: 	ja	.Ltmp373 # Offset: 93
    0000005f: 	cmpq	$0x1, %r12
    00000063: 	jne	.Ltmp374 # Offset: 99
    00000069: 	movzbl	(%rbp), %eax
    0000006d: 	movb	%al, 0x10(%rbx)
.Ltmp376:
    00000070: 	movq	%r12, 0x8(%rbx)
    00000074: 	movb	$0x0, (%rdi,%r12)
    00000079: 	addq	$0x20, "_ZL7gLabels/1"+48(%rip)
    00000081: 	movq	0x8(%rsp), %rax
    00000086: 	subq	%fs:0x28, %rax
    0000008f: 	jne	.Ltmp375 # Offset: 143
    00000091: 	addq	$0x10, %rsp
    00000095: 	popq	%rbx
    00000096: 	popq	%rbp
    00000097: 	popq	%r12
    00000099: 	retq # Offset: 153
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp373:
    000000a0: 	movq	%rbx, %rdi
    000000a3: 	movq	%rsp, %rsi
    000000a6: 	xorl	%edx, %edx
    000000a8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 168
    000000ad: 	movq	%rax, (%rbx)
    000000b0: 	movq	%rax, %rdi
    000000b3: 	movq	(%rsp), %rax
    000000b7: 	movq	%rax, 0x10(%rbx)
.Ltmp377:
    000000bb: 	movq	%r12, %rdx
    000000be: 	movq	%rbp, %rsi
    000000c1: 	callq	memcpy@PLT # Offset: 193
    000000c6: 	movq	(%rsp), %r12
    000000ca: 	movq	(%rbx), %rdi
    000000cd: 	jmp	.Ltmp376 # Offset: 205
    000000cf: 	nop # Size: 1
.Ltmp370:
    000000d0: 	movq	0x8(%rsp), %rax
    000000d5: 	subq	%fs:0x28, %rax
    000000de: 	jne	.Ltmp375 # Offset: 222
    000000e0: 	addq	$0x10, %rsp
    000000e4: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000000eb: 	popq	%rbx
    000000ec: 	popq	%rbp
    000000ed: 	popq	%r12
    000000ef: 	jmp	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # TAILCALL  # Offset: 239
    000000f4: 	nopl	(%rax) # Size: 4
.Ltmp374:
    000000f8: 	testq	%r12, %r12
    000000fb: 	je	.Ltmp376 # Offset: 251
    00000101: 	jmp	.Ltmp377 # Offset: 257
.Ltmp372:
    00000103: 	leaq	DATAat0x2d008(%rip), %rdi
    0000010a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 266
.Ltmp375:
    0000010f: 	callq	__stack_chk_fail@PLT # Offset: 271
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1(*2)"

Binary Function "_ZN28matmul_JKI_blocked_unrolled2IdEclEPKdS2_Pdmm.isra.0/1(*2)" after disassembly {
  All names   : _ZN28matmul_JKI_blocked_unrolled2IdEclEPKdS2_Pdmm.isra.0/1
                _ZN28matmul_JKI_blocked_unrolled2IdEclEPKdS2_Pdmm.isra.0/matrix_multiply.cpp/1
  Number      : 54
  State       : disassembled
  Address     : 0xde60
  Size        : 0x6a2
  MaxSize     : 0x6b0
  Offset      : 0xde60
  Section     : .text
  Orc Section : .local.text._ZN28matmul_JKI_blocked_unrolled2IdEclEPKdS2_Pdmm.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB053:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	subq	$0x100, %rsp
    00000011: 	movq	%rdi, 0xa0(%rsp)
    00000019: 	movq	%rdx, 0x40(%rsp)
    0000001e: 	movq	%rcx, 0x60(%rsp)
    00000023: 	movq	%r8, -0x50(%rsp)
    00000028: 	testq	%r8, %r8
    0000002b: 	je	.Ltmp378 # Offset: 43
    00000031: 	testq	%rcx, %rcx
    00000034: 	je	.Ltmp378 # Offset: 52
    0000003a: 	leaq	(,%r8,8), %rdi
    00000042: 	movq	%r8, %rax
    00000045: 	movq	%rsi, %r15
    00000048: 	movq	%r8, %rcx
    0000004b: 	movq	%rdi, 0x30(%rsp)
    00000050: 	movq	%r8, %rdi
    00000053: 	shlq	$0x6, %rax
    00000057: 	shlq	$0x5, %rdi
    0000005b: 	subq	%r8, %rax
    0000005e: 	movq	%rsi, 0xb8(%rsp)
    00000066: 	leaq	(,%r8,4), %rsi
    0000006e: 	movq	%rdi, -0x40(%rsp)
    00000073: 	leaq	(%r8,%r8), %rdi
    00000077: 	addq	%rax, %rax
    0000007a: 	movq	%rdi, 0xc8(%rsp)
    00000082: 	addq	%r8, %rdi
    00000085: 	movq	%rdi, 0x90(%rsp)
    0000008d: 	imulq	$0x3e8, %r8, %rdi
    00000094: 	movq	%rsi, -0x48(%rsp)
    00000099: 	movq	$0x0, 0xa8(%rsp)
    000000a5: 	movq	%rdi, 0xe8(%rsp)
    000000ad: 	movq	%rax, 0xf0(%rsp)
.Ltmp391:
    000000b5: 	movq	0xa8(%rsp), %rsi
    000000bd: 	movq	-0x50(%rsp), %rax
    000000c2: 	movq	$0x0, 0x48(%rsp)
    000000cb: 	movq	$0x0, 0xb0(%rsp)
    000000d7: 	movq	%rsi, 0x28(%rsp)
    000000dc: 	subq	$-0x80, %rsi
    000000e0: 	cmpq	%rax, %rsi
    000000e3: 	leaq	-0x400(,%rsi,8), %rdx
    000000eb: 	movq	%rsi, 0xa8(%rsp)
    000000f3: 	cmovbeq	%rsi, %rax
    000000f7: 	addq	0xc8(%rsp), %rcx
    000000ff: 	movq	%rcx, 0x58(%rsp)
    00000104: 	leaq	-0x3(%rax), %rdi
    00000108: 	movq	%rax, 0x50(%rsp)
    0000010d: 	shlq	$0x3, %rax
    00000111: 	movq	%rdi, -0x58(%rsp)
    00000116: 	movq	0xa0(%rsp), %rdi
    0000011e: 	subq	%rax, %rdx
    00000121: 	movq	%rdx, 0x70(%rsp)
    00000126: 	addq	%rax, %rdi
    00000129: 	movq	0x30(%rsp), %rax
    0000012e: 	movq	%rdi, 0xd0(%rsp)
    00000136: 	movq	0xb8(%rsp), %rdi
    0000013e: 	addq	%rax, %rdi
    00000141: 	movq	%rdi, %rsi
    00000144: 	movq	%rdi, 0xd8(%rsp)
    0000014c: 	movq	%rax, %rdi
    0000014f: 	addq	%rsi, %rax
    00000152: 	addq	%rax, %rdi
    00000155: 	movq	%rax, 0xe0(%rsp)
    0000015d: 	movq	%rdi, 0xc0(%rsp)
.Ltmp390:
    00000165: 	movq	0xb0(%rsp), %rsi
    0000016d: 	movq	-0x50(%rsp), %rbx
    00000172: 	movq	$0x0, 0x18(%rsp)
    0000017b: 	movq	0x40(%rsp), %rdi
    00000180: 	movq	0xb8(%rsp), %rcx
    00000188: 	movq	$0x0, -0x20(%rsp)
    00000191: 	movq	%rsi, %rax
    00000194: 	movq	%rsi, -0x60(%rsp)
    00000199: 	addq	$0x384, %rsi
    000001a0: 	cmpq	%rsi, %rbx
    000001a3: 	movq	%rsi, 0xb0(%rsp)
    000001ab: 	movq	%rdi, %rdx
    000001ae: 	cmovbeq	%rbx, %rsi
    000001b2: 	movq	%rdi, 0x20(%rsp)
    000001b7: 	subq	0x48(%rsp), %rdx
    000001bc: 	leaq	(%rdi,%rsi,8), %rdi
    000001c0: 	movq	%rsi, -0x68(%rsp)
    000001c5: 	movq	%rdi, 0x38(%rsp)
    000001ca: 	movq	%rax, %rdi
    000001cd: 	shlq	$0x3, %rax
    000001d1: 	addq	%rax, %rcx
    000001d4: 	subq	%rdi, %rsi
    000001d7: 	movq	%rcx, 0x68(%rsp)
    000001dc: 	movq	0xd8(%rsp), %rcx
    000001e4: 	movq	%rsi, -0x70(%rsp)
    000001e9: 	addq	%rax, %rcx
    000001ec: 	movq	%rcx, 0x78(%rsp)
    000001f1: 	movq	0xe0(%rsp), %rcx
    000001f9: 	addq	%rax, %rcx
    000001fc: 	addq	0xc0(%rsp), %rax
    00000204: 	movq	%rax, 0x88(%rsp)
    0000020c: 	movq	%rsi, %rax
    0000020f: 	andq	$-0x2, %rsi
    00000213: 	shrq	%rax
    00000216: 	movq	%rsi, -0x38(%rsp)
    0000021b: 	addq	%rdi, %rsi
    0000021e: 	shlq	$0x4, %rax
    00000222: 	movq	%rcx, 0x80(%rsp)
    0000022a: 	movq	%rsi, %r14
    0000022d: 	movq	%rax, %r13
    00000230: 	movq	0xd0(%rsp), %rax
    00000238: 	movq	%r13, -0x30(%rsp)
    0000023d: 	movq	%rax, -0x28(%rsp)
    00000242: 	movq	0xc8(%rsp), %rax
    0000024a: 	leaq	(%rsi,%rax), %r12
    0000024e: 	addq	%r12, %rbx
    00000251: 	movq	%rbx, 0x98(%rsp)
    00000259: 	nopl	(%rax) # Size: 7
.Ltmp389:
    00000260: 	movq	0x28(%rsp), %rdi
    00000265: 	cmpq	%rdi, -0x58(%rsp)
    0000026a: 	jbe	.Ltmp379 # Offset: 618
    00000270: 	movq	%rdi, %rbx
    00000273: 	movq	0x18(%rsp), %rdi
    00000278: 	movq	%r12, %r13
    0000027b: 	movq	0x78(%rsp), %r8
    00000280: 	movq	%rbx, -0x78(%rsp)
    00000285: 	movq	0x88(%rsp), %r10
    0000028d: 	leaq	(%r14,%rdi), %rcx
    00000291: 	movq	0x40(%rsp), %rdi
    00000296: 	movq	-0x28(%rsp), %r11
    0000029b: 	movq	0x80(%rsp), %r9
    000002a3: 	movq	0x98(%rsp), %r12
    000002ab: 	leaq	(%rdi,%rcx,8), %rsi
    000002af: 	movq	0x68(%rsp), %rdi
    000002b4: 	movq	0x58(%rsp), %rax
    000002b9: 	addq	0x70(%rsp), %r11
    000002be: 	subq	0x90(%rsp), %rax
    000002c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp383:
    000002d0: 	movsd	(%r11), %xmm3
    000002d5: 	movsd	0x8(%r11), %xmm1
    000002db: 	movsd	0x10(%r11), %xmm4
    000002e1: 	movsd	0x18(%r11), %xmm5
    000002e7: 	movq	-0x60(%rsp), %rcx
    000002ec: 	cmpq	%rcx, -0x68(%rsp)
    000002f1: 	jbe	.Ltmp380 # Offset: 753
    000002f7: 	movq	-0x50(%rsp), %rbx
    000002fc: 	leaq	(%rbx,%rax), %rcx
    00000300: 	leaq	0x8(%r8), %rbx
    00000304: 	cmpq	%rbx, %rdx
    00000307: 	leaq	0x8(%rdi), %rbx
    0000030b: 	setne	%bpl
    0000030f: 	cmpq	%rbx, %rdx
    00000312: 	setne	%bl
    00000315: 	andl	%ebp, %ebx
    00000317: 	cmpq	$0x1, -0x70(%rsp)
    0000031d: 	setne	%bpl
    00000321: 	andl	%ebp, %ebx
    00000323: 	leaq	0x8(%r9), %rbp
    00000327: 	cmpq	%rbp, %rdx
    0000032a: 	setne	%bpl
    0000032e: 	testb	%bpl, %bl
    00000331: 	je	.Ltmp381 # Offset: 817
    00000337: 	leaq	0x8(%r10), %rbx
    0000033b: 	cmpq	%rbx, %rdx
    0000033e: 	je	.Ltmp381 # Offset: 830
    00000344: 	movapd	%xmm3, %xmm9
    00000349: 	movapd	%xmm1, %xmm8
    0000034e: 	movapd	%xmm4, %xmm7
    00000352: 	xorl	%ebx, %ebx
    00000354: 	movapd	%xmm5, %xmm6
    00000358: 	movq	-0x30(%rsp), %rbp
    0000035d: 	unpcklpd	%xmm9, %xmm9
    00000362: 	unpcklpd	%xmm8, %xmm8
    00000367: 	unpcklpd	%xmm7, %xmm7
    0000036b: 	unpcklpd	%xmm6, %xmm6
    0000036f: 	nop # Size: 1
.Ltmp382:
    00000370: 	movupd	(%rdi,%rbx), %xmm0
    00000375: 	movupd	(%r8,%rbx), %xmm2
    0000037b: 	mulpd	%xmm9, %xmm0
    00000380: 	mulpd	%xmm8, %xmm2
    00000385: 	addpd	%xmm2, %xmm0
    00000389: 	movupd	(%r9,%rbx), %xmm2
    0000038f: 	mulpd	%xmm7, %xmm2
    00000393: 	addpd	%xmm2, %xmm0
    00000397: 	movupd	(%r10,%rbx), %xmm2
    0000039d: 	mulpd	%xmm6, %xmm2
    000003a1: 	addpd	%xmm2, %xmm0
    000003a5: 	movupd	(%rdx,%rbx), %xmm2
    000003aa: 	addpd	%xmm2, %xmm0
    000003ae: 	movups	%xmm0, (%rdx,%rbx)
    000003b2: 	addq	$0x10, %rbx
    000003b6: 	cmpq	%rbp, %rbx
    000003b9: 	jne	.Ltmp382 # Offset: 953
    000003bb: 	movq	-0x70(%rsp), %rbp
    000003c0: 	cmpq	%rbp, -0x38(%rsp)
    000003c5: 	je	.Ltmp380 # Offset: 965
    000003c7: 	addq	%r14, %rcx
    000003ca: 	mulsd	(%r15,%rcx,8), %xmm1
    000003d0: 	leaq	(%r14,%rax), %rcx
    000003d4: 	mulsd	(%r15,%rcx,8), %xmm3
    000003da: 	leaq	(%rax,%r13), %rcx
    000003de: 	mulsd	(%r15,%rcx,8), %xmm4
    000003e4: 	leaq	(%rax,%r12), %rcx
    000003e8: 	mulsd	(%r15,%rcx,8), %xmm5
    000003ee: 	movapd	%xmm1, %xmm0
    000003f2: 	addsd	%xmm3, %xmm0
    000003f6: 	addsd	%xmm4, %xmm0
    000003fa: 	addsd	%xmm5, %xmm0
    000003fe: 	addsd	(%rsi), %xmm0
    00000402: 	movsd	%xmm0, (%rsi)
.Ltmp380:
    00000406: 	movq	-0x40(%rsp), %rbx
    0000040b: 	addq	$0x4, -0x78(%rsp)
    00000411: 	addq	$0x20, %r11
    00000415: 	movq	-0x78(%rsp), %rcx
    0000041a: 	addq	-0x48(%rsp), %rax
    0000041f: 	addq	%rbx, %rdi
    00000422: 	addq	%rbx, %r8
    00000425: 	addq	%rbx, %r9
    00000428: 	addq	%rbx, %r10
    0000042b: 	cmpq	-0x58(%rsp), %rcx
    00000430: 	jb	.Ltmp383 # Offset: 1072
    00000436: 	movq	%r13, %r12
    00000439: 	movq	%rcx, %rsi
.Ltmp394:
    0000043c: 	cmpq	%rsi, 0x50(%rsp)
    00000441: 	jbe	.Ltmp384 # Offset: 1089
    00000447: 	movq	-0x60(%rsp), %rbx
    0000044c: 	cmpq	%rbx, -0x68(%rsp)
    00000451: 	jbe	.Ltmp384 # Offset: 1105
    00000457: 	movq	0x18(%rsp), %rcx
    0000045c: 	movq	0xa0(%rsp), %rdi
    00000464: 	movq	%rsi, %rax
    00000467: 	movq	-0x50(%rsp), %rbp
    0000046c: 	movq	-0x30(%rsp), %r13
    00000471: 	addq	%rcx, %rax
    00000474: 	movq	-0x70(%rsp), %r11
    00000479: 	movq	0x38(%rsp), %r10
    0000047e: 	leaq	(%rdi,%rax,8), %r8
    00000482: 	movq	%rsi, %rdi
    00000485: 	imulq	%rbp, %rdi
    00000489: 	leaq	(%rdi,%rbx), %rax
    0000048d: 	movq	0x40(%rsp), %rbx
    00000492: 	leaq	(%r15,%rax,8), %rsi
    00000496: 	leaq	(%r14,%rcx), %rax
    0000049a: 	leaq	(%rbx,%rax,8), %rax
    0000049e: 	movq	0x30(%rsp), %rbx
.Ltmp388:
    000004a3: 	leaq	0x8(%rsi), %rcx
    000004a7: 	movsd	(%r8), %xmm1
    000004ac: 	cmpq	%rcx, %rdx
    000004af: 	je	.Ltmp385 # Offset: 1199
    000004b5: 	cmpq	$0x1, %r11
    000004b9: 	je	.Ltmp385 # Offset: 1209
    000004bf: 	movapd	%xmm1, %xmm2
    000004c3: 	xorl	%ecx, %ecx
    000004c5: 	unpcklpd	%xmm2, %xmm2
    000004c9: 	nopl	(%rax) # Size: 7
.Ltmp386:
    000004d0: 	movupd	(%rsi,%rcx), %xmm0
    000004d5: 	movupd	(%rdx,%rcx), %xmm6
    000004da: 	mulpd	%xmm2, %xmm0
    000004de: 	addpd	%xmm6, %xmm0
    000004e2: 	movups	%xmm0, (%rdx,%rcx)
    000004e6: 	addq	$0x10, %rcx
    000004ea: 	cmpq	%rcx, %r13
    000004ed: 	jne	.Ltmp386 # Offset: 1261
    000004ef: 	cmpq	%r11, -0x38(%rsp)
    000004f4: 	je	.Ltmp387 # Offset: 1268
    000004f6: 	leaq	(%r14,%rdi), %rcx
    000004fa: 	movsd	(%rax), %xmm0
    000004fe: 	mulsd	(%r15,%rcx,8), %xmm1
    00000504: 	addsd	%xmm1, %xmm0
    00000508: 	movsd	%xmm0, (%rax)
.Ltmp387:
    0000050c: 	addq	$0x8, %r8
    00000510: 	addq	%rbx, %rsi
    00000513: 	addq	%rbp, %rdi
    00000516: 	cmpq	-0x28(%rsp), %r8
    0000051b: 	jne	.Ltmp388 # Offset: 1307
.Ltmp384:
    0000051d: 	movq	0x30(%rsp), %rax
    00000522: 	addq	$0x1, -0x20(%rsp)
    00000528: 	movq	-0x50(%rsp), %rbx
    0000052d: 	addq	%rax, -0x28(%rsp)
    00000532: 	addq	%rbx, 0x18(%rsp)
    00000537: 	movq	-0x20(%rsp), %rdi
    0000053c: 	addq	%rax, %rdx
    0000053f: 	addq	%rax, 0x38(%rsp)
    00000544: 	addq	%rax, 0x20(%rsp)
    00000549: 	cmpq	0x60(%rsp), %rdi
    0000054e: 	jne	.Ltmp389 # Offset: 1358
    00000554: 	subq	$0x1c20, 0x48(%rsp)
    0000055d: 	movq	0xb0(%rsp), %rsi
    00000565: 	cmpq	%rsi, -0x50(%rsp)
    0000056a: 	ja	.Ltmp390 # Offset: 1386
    00000570: 	movq	0xc0(%rsp), %rax
    00000578: 	addq	0xe8(%rsp), %rax
    00000580: 	movq	0x58(%rsp), %rcx
    00000585: 	movq	%rax, 0xb8(%rsp)
    0000058d: 	addq	0xf0(%rsp), %rcx
    00000595: 	cmpq	%rbx, 0xa8(%rsp)
    0000059d: 	jb	.Ltmp391 # Offset: 1437
.Ltmp378:
    000005a3: 	addq	$0x100, %rsp
    000005aa: 	popq	%rbx
    000005ab: 	popq	%rbp
    000005ac: 	popq	%r12
    000005ae: 	popq	%r13
    000005b0: 	popq	%r14
    000005b2: 	popq	%r15
    000005b4: 	retq # Offset: 1460
    000005b5: 	nopl	(%rax) # Size: 3
.Ltmp381:
    000005b8: 	movq	0x48(%rsp), %rbx
    000005bd: 	movq	%r14, -0x8(%rsp)
    000005c2: 	movq	%rdi, (%rsp)
    000005c6: 	movq	-0x60(%rsp), %rcx
    000005cb: 	leaq	(%r8,%rbx), %rbp
    000005cf: 	movq	%r11, 0x8(%rsp)
    000005d4: 	movq	%rbp, -0x10(%rsp)
    000005d9: 	leaq	(%rdi,%rbx), %rbp
    000005dd: 	movq	-0x10(%rsp), %r14
    000005e2: 	movq	%rbp, -0x18(%rsp)
    000005e7: 	movq	0x20(%rsp), %rdi
    000005ec: 	leaq	(%r9,%rbx), %rbp
    000005f0: 	addq	%r10, %rbx
    000005f3: 	movq	%rax, 0x10(%rsp)
    000005f8: 	movq	-0x18(%rsp), %r11
    000005fd: 	movq	-0x68(%rsp), %rax
    00000602: 	nopw	(%rax,%rax) # Size: 6
.Ltmp392:
    00000608: 	movsd	(%r14,%rcx,8), %xmm0
    0000060e: 	movsd	(%r11,%rcx,8), %xmm2
    00000614: 	mulsd	%xmm1, %xmm0
    00000618: 	mulsd	%xmm3, %xmm2
    0000061c: 	addsd	%xmm2, %xmm0
    00000620: 	movsd	(%rbp,%rcx,8), %xmm2
    00000626: 	mulsd	%xmm4, %xmm2
    0000062a: 	addsd	%xmm2, %xmm0
    0000062e: 	movsd	(%rbx,%rcx,8), %xmm2
    00000633: 	mulsd	%xmm5, %xmm2
    00000637: 	addsd	%xmm2, %xmm0
    0000063b: 	addsd	(%rdi,%rcx,8), %xmm0
    00000640: 	movsd	%xmm0, (%rdi,%rcx,8)
    00000645: 	addq	$0x1, %rcx
    00000649: 	cmpq	%rcx, %rax
    0000064c: 	jne	.Ltmp392 # Offset: 1612
    0000064e: 	movq	-0x8(%rsp), %r14
    00000653: 	movq	(%rsp), %rdi
    00000657: 	movq	0x8(%rsp), %r11
    0000065c: 	movq	0x10(%rsp), %rax
    00000661: 	jmp	.Ltmp380 # Offset: 1633
.Ltmp385:
    00000666: 	movq	%rsi, %r9
    00000669: 	movq	%rdx, %rcx
    0000066c: 	nopl	(%rax) # Size: 4
.Ltmp393:
    00000670: 	movsd	(%r9), %xmm0
    00000675: 	addq	$0x8, %rcx
    00000679: 	addq	$0x8, %r9
    0000067d: 	mulsd	%xmm1, %xmm0
    00000681: 	addsd	-0x8(%rcx), %xmm0
    00000686: 	movsd	%xmm0, -0x8(%rcx)
    0000068b: 	cmpq	%r10, %rcx
    0000068e: 	jne	.Ltmp393 # Offset: 1678
    00000690: 	jmp	.Ltmp387 # Offset: 1680
.Ltmp379:
    00000695: 	movq	%rdi, -0x78(%rsp)
    0000069a: 	movq	%rdi, %rsi
    0000069d: 	jmp	.Ltmp394 # Offset: 1693
DWARF CFI Instructions:
    <empty>
End of Function "_ZN28matmul_JKI_blocked_unrolled2IdEclEPKdS2_Pdmm.isra.0/1(*2)"

Binary Function "_ZN28matmul_IJK_blocked_unrolled1IdEclEPKdS2_Pdmm.isra.0/1(*2)" after disassembly {
  All names   : _ZN28matmul_IJK_blocked_unrolled1IdEclEPKdS2_Pdmm.isra.0/1
                _ZN28matmul_IJK_blocked_unrolled1IdEclEPKdS2_Pdmm.isra.0/matrix_multiply.cpp/1
  Number      : 55
  State       : disassembled
  Address     : 0xe510
  Size        : 0x290
  MaxSize     : 0x290
  Offset      : 0xe510
  Section     : .text
  Orc Section : .local.text._ZN28matmul_IJK_blocked_unrolled1IdEclEPKdS2_Pdmm.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB054:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	subq	$0x8, %rsp
    0000000e: 	movq	%rdi, -0x60(%rsp)
    00000013: 	movq	%rsi, -0x58(%rsp)
    00000018: 	movq	%rdx, -0x30(%rsp)
    0000001d: 	movq	%rcx, -0x10(%rsp)
    00000022: 	testq	%rcx, %rcx
    00000025: 	je	.Ltmp395 # Offset: 37
    0000002b: 	movq	%r8, %r13
    0000002e: 	testq	%r8, %r8
    00000031: 	je	.Ltmp395 # Offset: 49
    00000037: 	movq	%r8, %rax
    0000003a: 	leaq	(%r8,%r8), %r12
    0000003e: 	pxor	%xmm3, %xmm3
    00000042: 	movq	%r8, %r14
    00000045: 	shlq	$0x7, %rax
    00000049: 	leaq	(%r12,%r8), %r15
    0000004d: 	movq	$0x0, -0x48(%rsp)
    00000056: 	leaq	(,%r8,8), %rbp
    0000005e: 	movq	%rax, -0x8(%rsp)
    00000063: 	movq	%r8, %rax
    00000066: 	shlq	$0x5, %r14
    0000006a: 	movq	$0x0, -0x28(%rsp)
    00000073: 	shlq	$0xa, %rax
    00000077: 	movq	%rax, (%rsp)
    0000007b: 	movq	%r15, %rax
    0000007e: 	movq	%rbp, %r15
    00000081: 	movq	%rax, %rbp
.Ltmp404:
    00000084: 	movq	-0x28(%rsp), %rbx
    00000089: 	movq	-0x10(%rsp), %rdi
    0000008e: 	movq	$0x0, -0x20(%rsp)
    00000097: 	movq	%rbx, -0x40(%rsp)
    0000009c: 	movq	%rbx, %rax
    0000009f: 	subq	$-0x80, %rbx
    000000a3: 	cmpq	%rdi, %rbx
    000000a6: 	movq	%rbx, -0x28(%rsp)
    000000ab: 	cmovbeq	%rbx, %rdi
    000000af: 	movq	-0x58(%rsp), %rbx
    000000b4: 	movq	%rdi, -0x78(%rsp)
    000000b9: 	movq	%rbx, -0x18(%rsp)
    000000be: 	cmpq	%rax, %rdi
    000000c1: 	jbe	.Ltmp396 # Offset: 193
.Ltmp403:
    000000c7: 	movq	-0x20(%rsp), %rbx
    000000cc: 	movq	-0x48(%rsp), %rax
    000000d1: 	movq	-0x60(%rsp), %rsi
    000000d6: 	movq	%rbx, %r11
    000000d9: 	subq	$-0x80, %rbx
    000000dd: 	cmpq	%r13, %rbx
    000000e0: 	movq	%rbx, -0x20(%rsp)
    000000e5: 	cmovaq	%r13, %rbx
    000000e9: 	addq	%rbx, %rax
    000000ec: 	movq	%rbx, -0x70(%rsp)
    000000f1: 	leaq	-0x3(%rbx), %rdi
    000000f5: 	leaq	(%rsi,%rax,8), %rax
    000000f9: 	movq	%rax, -0x38(%rsp)
    000000fe: 	movq	%r11, %rax
    00000101: 	subq	%rbx, %rax
    00000104: 	xorl	%ebx, %ebx
    00000106: 	shlq	$0x3, %rax
    0000010a: 	movq	%rax, -0x50(%rsp)
    0000010f: 	movq	-0x18(%rsp), %rax
    00000114: 	movq	%rax, -0x68(%rsp)
    00000119: 	nopl	(%rax) # Size: 7
.Ltmp402:
    00000120: 	movq	-0x30(%rsp), %rax
    00000125: 	movq	-0x38(%rsp), %rsi
    0000012a: 	movq	-0x48(%rsp), %r8
    0000012f: 	movq	-0x40(%rsp), %r9
    00000134: 	leaq	(%rax,%rbx,8), %r10
    00000138: 	nopl	(%rax,%rax) # Size: 8
.Ltmp401:
    00000140: 	cmpq	%r11, %rdi
    00000143: 	jbe	.Ltmp397 # Offset: 323
    00000149: 	movq	-0x50(%rsp), %rax
    0000014e: 	movq	%r11, %rcx
    00000151: 	movapd	%xmm3, %xmm4
    00000155: 	movapd	%xmm3, %xmm5
    00000159: 	movapd	%xmm3, %xmm2
    0000015d: 	movapd	%xmm3, %xmm0
    00000161: 	leaq	(%rax,%rsi), %rdx
    00000165: 	movq	-0x68(%rsp), %rax
    0000016a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp398:
    00000170: 	movsd	(%rax), %xmm1
    00000174: 	mulsd	(%rdx), %xmm1
    00000178: 	addq	$0x4, %rcx
    0000017c: 	addq	$0x20, %rdx
    00000180: 	addsd	%xmm1, %xmm0
    00000184: 	movsd	(%rax,%r13,8), %xmm1
    0000018a: 	mulsd	-0x18(%rdx), %xmm1
    0000018f: 	addsd	%xmm1, %xmm2
    00000193: 	movsd	(%rax,%r12,8), %xmm1
    00000199: 	mulsd	-0x10(%rdx), %xmm1
    0000019e: 	addsd	%xmm1, %xmm5
    000001a2: 	movsd	(%rax,%rbp,8), %xmm1
    000001a7: 	mulsd	-0x8(%rdx), %xmm1
    000001ac: 	addq	%r14, %rax
    000001af: 	addsd	%xmm1, %xmm4
    000001b3: 	cmpq	%rdi, %rcx
    000001b6: 	jb	.Ltmp398 # Offset: 438
.Ltmp405:
    000001b8: 	cmpq	%rcx, -0x70(%rsp)
    000001bd: 	jbe	.Ltmp399 # Offset: 445
    000001bf: 	movq	%r13, %rax
    000001c2: 	movq	-0x58(%rsp), %rdx
    000001c7: 	imulq	%rcx, %rax
    000001cb: 	addq	%r8, %rcx
    000001ce: 	addq	%rbx, %rax
    000001d1: 	leaq	(%rdx,%rax,8), %rax
    000001d5: 	movq	-0x60(%rsp), %rdx
    000001da: 	leaq	(%rdx,%rcx,8), %rdx
    000001de: 	nop # Size: 2
.Ltmp400:
    000001e0: 	movsd	(%rax), %xmm1
    000001e4: 	mulsd	(%rdx), %xmm1
    000001e8: 	addq	$0x8, %rdx
    000001ec: 	addq	%r15, %rax
    000001ef: 	addsd	%xmm1, %xmm0
    000001f3: 	cmpq	%rdx, %rsi
    000001f6: 	jne	.Ltmp400 # Offset: 502
.Ltmp399:
    000001f8: 	addsd	%xmm0, %xmm2
    000001fc: 	addq	$0x1, %r9
    00000200: 	addq	%r15, %rsi
    00000203: 	addsd	%xmm5, %xmm2
    00000207: 	addsd	%xmm4, %xmm2
    0000020b: 	addsd	(%r10,%r8,8), %xmm2
    00000211: 	movsd	%xmm2, (%r10,%r8,8)
    00000217: 	addq	%r13, %r8
    0000021a: 	cmpq	%r9, -0x78(%rsp)
    0000021f: 	jne	.Ltmp401 # Offset: 543
    00000225: 	addq	$0x1, %rbx
    00000229: 	addq	$0x8, -0x68(%rsp)
    0000022f: 	cmpq	%rbx, %r13
    00000232: 	jne	.Ltmp402 # Offset: 562
    00000238: 	movq	(%rsp), %rbx
    0000023c: 	addq	%rbx, -0x18(%rsp)
    00000241: 	cmpq	%r13, -0x20(%rsp)
    00000246: 	jb	.Ltmp403 # Offset: 582
.Ltmp396:
    0000024c: 	movq	-0x8(%rsp), %rbx
    00000251: 	addq	%rbx, -0x48(%rsp)
    00000256: 	movq	-0x10(%rsp), %rbx
    0000025b: 	cmpq	%rbx, -0x28(%rsp)
    00000260: 	jb	.Ltmp404 # Offset: 608
.Ltmp395:
    00000266: 	addq	$0x8, %rsp
    0000026a: 	popq	%rbx
    0000026b: 	popq	%rbp
    0000026c: 	popq	%r12
    0000026e: 	popq	%r13
    00000270: 	popq	%r14
    00000272: 	popq	%r15
    00000274: 	retq # Offset: 628
    00000275: 	nopl	(%rax) # Size: 3
.Ltmp397:
    00000278: 	movapd	%xmm3, %xmm4
    0000027c: 	movapd	%xmm3, %xmm5
    00000280: 	movapd	%xmm3, %xmm2
    00000284: 	movq	%r11, %rcx
    00000287: 	movapd	%xmm3, %xmm0
    0000028b: 	jmp	.Ltmp405 # Offset: 651
DWARF CFI Instructions:
    <empty>
End of Function "_ZN28matmul_IJK_blocked_unrolled1IdEclEPKdS2_Pdmm.isra.0/1(*2)"

Binary Function "_ZN28matmul_JIK_blocked_unrolled1IdEclEPKdS2_Pdmm.isra.0/1(*2)" after disassembly {
  All names   : _ZN28matmul_JIK_blocked_unrolled1IdEclEPKdS2_Pdmm.isra.0/1
                _ZN28matmul_JIK_blocked_unrolled1IdEclEPKdS2_Pdmm.isra.0/matrix_multiply.cpp/1
  Number      : 56
  State       : disassembled
  Address     : 0xe7a0
  Size        : 0x268
  MaxSize     : 0x270
  Offset      : 0xe7a0
  Section     : .text
  Orc Section : .local.text._ZN28matmul_JIK_blocked_unrolled1IdEclEPKdS2_Pdmm.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB055:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	movq	%rdi, -0x58(%rsp)
    0000000f: 	movq	%rsi, -0x50(%rsp)
    00000014: 	movq	%rdx, -0x8(%rsp)
    00000019: 	movq	%rcx, -0x30(%rsp)
    0000001e: 	testq	%r8, %r8
    00000021: 	je	.Ltmp406 # Offset: 33
    00000027: 	testq	%rcx, %rcx
    0000002a: 	je	.Ltmp406 # Offset: 42
    00000030: 	movq	%r8, %rax
    00000033: 	movq	%r8, %r12
    00000036: 	movq	%rsi, -0x18(%rsp)
    0000003b: 	leaq	(%r8,%r8), %r13
    0000003f: 	shlq	$0xa, %rax
    00000043: 	shlq	$0x5, %r12
    00000047: 	leaq	(%r13,%r8), %r15
    0000004c: 	movq	%r8, %r14
    0000004f: 	movq	$0x0, -0x28(%rsp)
    00000058: 	leaq	(,%r8,8), %rbp
    00000060: 	pxor	%xmm3, %xmm3
    00000064: 	movq	%rax, -0x10(%rsp)
    00000069: 	movq	%r12, %rax
    0000006c: 	movq	%r13, %r12
    0000006f: 	movq	%rbp, %r13
    00000072: 	movq	%rax, %rbp
.Ltmp415:
    00000075: 	movq	-0x28(%rsp), %rbx
    0000007a: 	movq	%rbx, -0x38(%rsp)
    0000007f: 	movq	%rbx, %rax
    00000082: 	subq	$-0x80, %rbx
    00000086: 	cmpq	%r14, %rbx
    00000089: 	movq	%rbx, -0x28(%rsp)
    0000008e: 	cmovaq	%r14, %rbx
    00000092: 	movq	%rbx, -0x70(%rsp)
    00000097: 	cmpq	%rax, %rbx
    0000009a: 	jbe	.Ltmp407 # Offset: 154
    000000a0: 	movq	$0x0, -0x20(%rsp)
    000000a9: 	movq	-0x18(%rsp), %rax
    000000ae: 	movq	%rax, -0x40(%rsp)
.Ltmp414:
    000000b3: 	movq	-0x20(%rsp), %rax
    000000b8: 	movq	-0x58(%rsp), %rbx
    000000bd: 	movq	$0x0, -0x48(%rsp)
    000000c6: 	movq	-0x8(%rsp), %r10
    000000cb: 	movq	%rax, %r11
    000000ce: 	subq	$-0x80, %rax
    000000d2: 	cmpq	%rax, %r14
    000000d5: 	movq	%rax, -0x20(%rsp)
    000000da: 	leaq	(%rbx,%r11,8), %rdi
    000000de: 	cmovbeq	%r14, %rax
    000000e2: 	movq	%rdi, -0x60(%rsp)
    000000e7: 	movq	%rax, -0x68(%rsp)
    000000ec: 	leaq	(%rbx,%rax,8), %rdi
    000000f0: 	leaq	-0x3(%rax), %rsi
    000000f4: 	xorl	%ebx, %ebx
    000000f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp413:
    00000100: 	movq	-0x40(%rsp), %r9
    00000105: 	movq	-0x38(%rsp), %r8
    0000010a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp412:
    00000110: 	cmpq	%r11, %rsi
    00000113: 	jbe	.Ltmp408 # Offset: 275
    00000119: 	movq	-0x60(%rsp), %rdx
    0000011e: 	movq	%r9, %rax
    00000121: 	movq	%r11, %rcx
    00000124: 	movapd	%xmm3, %xmm4
    00000128: 	movapd	%xmm3, %xmm5
    0000012c: 	movapd	%xmm3, %xmm2
    00000130: 	movapd	%xmm3, %xmm0
    00000134: 	nopl	(%rax) # Size: 4
.Ltmp409:
    00000138: 	movsd	(%rax), %xmm1
    0000013c: 	mulsd	(%rdx), %xmm1
    00000140: 	addq	$0x4, %rcx
    00000144: 	addq	$0x20, %rdx
    00000148: 	addsd	%xmm1, %xmm0
    0000014c: 	movsd	(%rax,%r14,8), %xmm1
    00000152: 	mulsd	-0x18(%rdx), %xmm1
    00000157: 	addsd	%xmm1, %xmm2
    0000015b: 	movsd	(%rax,%r12,8), %xmm1
    00000161: 	mulsd	-0x10(%rdx), %xmm1
    00000166: 	addsd	%xmm1, %xmm5
    0000016a: 	movsd	(%rax,%r15,8), %xmm1
    00000170: 	mulsd	-0x8(%rdx), %xmm1
    00000175: 	addq	%rbp, %rax
    00000178: 	addsd	%xmm1, %xmm4
    0000017c: 	cmpq	%rsi, %rcx
    0000017f: 	jb	.Ltmp409 # Offset: 383
.Ltmp416:
    00000181: 	cmpq	%rcx, -0x68(%rsp)
    00000186: 	jbe	.Ltmp410 # Offset: 390
    00000188: 	movq	%r14, %rax
    0000018b: 	movq	-0x50(%rsp), %rdx
    00000190: 	imulq	%rcx, %rax
    00000194: 	addq	%rbx, %rcx
    00000197: 	addq	%r8, %rax
    0000019a: 	leaq	(%rdx,%rax,8), %rax
    0000019e: 	movq	-0x58(%rsp), %rdx
    000001a3: 	leaq	(%rdx,%rcx,8), %rdx
    000001a7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp411:
    000001b0: 	movsd	(%rax), %xmm1
    000001b4: 	mulsd	(%rdx), %xmm1
    000001b8: 	addq	$0x8, %rdx
    000001bc: 	addq	%r13, %rax
    000001bf: 	addsd	%xmm1, %xmm0
    000001c3: 	cmpq	%rdx, %rdi
    000001c6: 	jne	.Ltmp411 # Offset: 454
.Ltmp410:
    000001c8: 	addsd	%xmm0, %xmm2
    000001cc: 	addq	$0x8, %r9
    000001d0: 	addsd	%xmm5, %xmm2
    000001d4: 	addsd	%xmm4, %xmm2
    000001d8: 	addsd	(%r10,%r8,8), %xmm2
    000001de: 	movsd	%xmm2, (%r10,%r8,8)
    000001e4: 	addq	$0x1, %r8
    000001e8: 	cmpq	%r8, -0x70(%rsp)
    000001ed: 	jne	.Ltmp412 # Offset: 493
    000001f3: 	addq	$0x1, -0x48(%rsp)
    000001f9: 	addq	%r14, %rbx
    000001fc: 	addq	%r13, %r10
    000001ff: 	addq	%r13, %rdi
    00000202: 	addq	%r13, -0x60(%rsp)
    00000207: 	movq	-0x48(%rsp), %rax
    0000020c: 	cmpq	-0x30(%rsp), %rax
    00000211: 	jne	.Ltmp413 # Offset: 529
    00000217: 	movq	-0x10(%rsp), %rbx
    0000021c: 	addq	%rbx, -0x40(%rsp)
    00000221: 	cmpq	-0x20(%rsp), %r14
    00000226: 	ja	.Ltmp414 # Offset: 550
.Ltmp407:
    0000022c: 	addq	$0x400, -0x18(%rsp)
    00000235: 	cmpq	%r14, -0x28(%rsp)
    0000023a: 	jb	.Ltmp415 # Offset: 570
.Ltmp406:
    00000240: 	popq	%rbx
    00000241: 	popq	%rbp
    00000242: 	popq	%r12
    00000244: 	popq	%r13
    00000246: 	popq	%r14
    00000248: 	popq	%r15
    0000024a: 	retq # Offset: 586
    0000024b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp408:
    00000250: 	movapd	%xmm3, %xmm4
    00000254: 	movapd	%xmm3, %xmm5
    00000258: 	movapd	%xmm3, %xmm2
    0000025c: 	movq	%r11, %rcx
    0000025f: 	movapd	%xmm3, %xmm0
    00000263: 	jmp	.Ltmp416 # Offset: 611
DWARF CFI Instructions:
    <empty>
End of Function "_ZN28matmul_JIK_blocked_unrolled1IdEclEPKdS2_Pdmm.isra.0/1(*2)"

Binary Function "_ZN28matmul_JKI_blocked_unrolled2IfEclEPKfS2_Pfmm.isra.0/1(*2)" after disassembly {
  All names   : _ZN28matmul_JKI_blocked_unrolled2IfEclEPKfS2_Pfmm.isra.0/1
                _ZN28matmul_JKI_blocked_unrolled2IfEclEPKfS2_Pfmm.isra.0/matrix_multiply.cpp/1
  Number      : 57
  State       : disassembled
  Address     : 0xea10
  Size        : 0x835
  MaxSize     : 0x840
  Offset      : 0xea10
  Section     : .text
  Orc Section : .local.text._ZN28matmul_JKI_blocked_unrolled2IfEclEPKfS2_Pfmm.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB056:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	subq	$0x110, %rsp
    00000011: 	movq	%rdi, 0xb8(%rsp)
    00000019: 	movq	%rcx, 0x80(%rsp)
    00000021: 	movq	%r8, 0x28(%rsp)
    00000026: 	testq	%r8, %r8
    00000029: 	je	.Ltmp417 # Offset: 41
    0000002f: 	testq	%rcx, %rcx
    00000032: 	je	.Ltmp417 # Offset: 50
    00000038: 	movq	%rsi, %r15
    0000003b: 	leaq	(%r8,%r8), %rdi
    0000003f: 	movq	%r8, %rsi
    00000042: 	movq	%r8, 0x60(%rsp)
    00000047: 	leaq	(,%r8,4), %rax
    0000004f: 	movq	%rdi, 0x70(%rsp)
    00000054: 	shlq	$0x4, %rsi
    00000058: 	addq	%r8, %rdi
    0000005b: 	movq	%rax, -0x20(%rsp)
    00000060: 	movq	%r8, %rax
    00000063: 	movq	%rdx, %r14
    00000066: 	shlq	$0x6, %rax
    0000006a: 	movq	%r15, 0xd0(%rsp)
    00000072: 	subq	%r8, %rax
    00000075: 	movq	%rsi, -0x8(%rsp)
    0000007a: 	addq	%rax, %rax
    0000007d: 	movq	%rdi, 0xb0(%rsp)
    00000085: 	movq	%rax, 0xf8(%rsp)
    0000008d: 	imulq	$0x1f4, %r8, %rax
    00000094: 	movq	$0x0, 0xc0(%rsp)
    000000a0: 	movq	%rax, 0x100(%rsp)
.Ltmp435:
    000000a8: 	movq	0xc0(%rsp), %rsi
    000000b0: 	movq	%r15, %rbx
    000000b3: 	movq	0x28(%rsp), %rax
    000000b8: 	movq	$0x0, 0x58(%rsp)
    000000c1: 	movq	$0x0, 0xc8(%rsp)
    000000cd: 	movq	%r14, %r11
    000000d0: 	movq	%rsi, 0x48(%rsp)
    000000d5: 	subq	$-0x80, %rsi
    000000d9: 	cmpq	%rax, %rsi
    000000dc: 	leaq	-0x200(,%rsi,4), %rdx
    000000e4: 	movq	%rsi, 0xc0(%rsp)
    000000ec: 	cmovbeq	%rsi, %rax
    000000f0: 	movq	0xd0(%rsp), %rsi
    000000f8: 	leaq	-0x3(%rax), %rdi
    000000fc: 	movq	%rax, 0x68(%rsp)
    00000101: 	shlq	$0x2, %rax
    00000105: 	movq	%rdi, -0x10(%rsp)
    0000010a: 	movq	0xb8(%rsp), %rdi
    00000112: 	subq	%rax, %rdx
    00000115: 	movq	%rdx, 0x88(%rsp)
    0000011d: 	addq	%rax, %rdi
    00000120: 	movq	0x60(%rsp), %rax
    00000125: 	addq	0x70(%rsp), %rax
    0000012a: 	movq	%rax, 0x78(%rsp)
    0000012f: 	movq	-0x20(%rsp), %rax
    00000134: 	movq	%rdi, 0xe0(%rsp)
    0000013c: 	addq	%rax, %rsi
    0000013f: 	movq	%rsi, %rdi
    00000142: 	movq	%rsi, 0xe8(%rsp)
    0000014a: 	movq	%rax, %rsi
    0000014d: 	addq	%rdi, %rax
    00000150: 	addq	%rax, %rsi
    00000153: 	movq	%rax, 0xf0(%rsp)
    0000015b: 	movq	%rsi, 0xd8(%rsp)
.Ltmp434:
    00000163: 	movq	0xc8(%rsp), %rsi
    0000016b: 	movq	0x28(%rsp), %rdi
    00000170: 	movq	%r11, 0x40(%rsp)
    00000175: 	movq	%r11, %r10
    00000178: 	movq	0xd0(%rsp), %rdx
    00000180: 	movq	%r11, -0x78(%rsp)
    00000185: 	movq	%rsi, %rax
    00000188: 	movq	%rsi, -0x38(%rsp)
    0000018d: 	addq	$0x384, %rsi
    00000194: 	cmpq	%rsi, %rdi
    00000197: 	movq	%rsi, 0xc8(%rsp)
    0000019f: 	movq	$0x0, -0x70(%rsp)
    000001a8: 	cmovbeq	%rdi, %rsi
    000001ac: 	subq	0x58(%rsp), %r10
    000001b1: 	movq	$0x0, 0x38(%rsp)
    000001ba: 	leaq	(%r11,%rsi,4), %rdi
    000001be: 	movq	%rsi, -0x18(%rsp)
    000001c3: 	movq	%rdi, 0x50(%rsp)
    000001c8: 	movq	%rax, %rdi
    000001cb: 	leaq	(,%rax,4), %rax
    000001d3: 	addq	%rax, %rdx
    000001d6: 	subq	%rdi, %rsi
    000001d9: 	movq	%rdi, -0x28(%rsp)
    000001de: 	movq	%rdx, 0x90(%rsp)
    000001e6: 	movq	0xe8(%rsp), %rdx
    000001ee: 	movq	%rsi, -0x40(%rsp)
    000001f3: 	addq	%rax, %rdx
    000001f6: 	movq	%rdx, 0x98(%rsp)
    000001fe: 	movq	0xf0(%rsp), %rdx
    00000206: 	addq	%rax, %rdx
    00000209: 	addq	0xd8(%rsp), %rax
    00000211: 	movq	%rax, 0xa8(%rsp)
    00000219: 	leaq	-0x1(%rsi), %rax
    0000021d: 	movq	%rax, (%rsp)
    00000221: 	movq	%rsi, %rax
    00000224: 	shrq	$0x2, %rax
    00000228: 	movq	%rdx, 0xa0(%rsp)
    00000230: 	shlq	$0x4, %rax
    00000234: 	movq	%rax, 0x10(%rsp)
    00000239: 	movq	%rsi, %rax
    0000023c: 	andq	$-0x4, %rsi
    00000240: 	movq	%rsi, %rdx
    00000243: 	movq	%rsi, 0x8(%rsp)
    00000248: 	addq	%rdi, %rsi
    0000024b: 	movq	%rsi, 0x18(%rsp)
    00000250: 	movq	0xe0(%rsp), %rsi
    00000258: 	subq	%rdx, %rax
    0000025b: 	movq	%rax, 0x20(%rsp)
    00000260: 	movq	%rsi, 0x30(%rsp)
    00000265: 	nopl	(%rax) # Size: 3
.Ltmp433:
    00000268: 	movq	0x48(%rsp), %rsi
    0000026d: 	cmpq	%rsi, -0x10(%rsp)
    00000272: 	jbe	.Ltmp418 # Offset: 626
    00000278: 	movq	0x78(%rsp), %rbp
    0000027d: 	movq	0x70(%rsp), %rax
    00000282: 	movq	0xa8(%rsp), %rdi
    0000028a: 	movq	0xa0(%rsp), %rsi
    00000292: 	movq	%rbp, %r12
    00000295: 	movq	0x60(%rsp), %r13
    0000029a: 	movq	0x30(%rsp), %r15
    0000029f: 	subq	0xb0(%rsp), %r12
    000002a7: 	movq	0x98(%rsp), %rcx
    000002af: 	leaq	(%r12,%rax), %r8
    000002b3: 	movq	0x48(%rsp), %rax
    000002b8: 	movq	0x90(%rsp), %rdx
    000002c0: 	addq	0x88(%rsp), %r15
    000002c8: 	movq	%rax, -0x68(%rsp)
    000002cd: 	nopl	(%rax) # Size: 3
.Ltmp424:
    000002d0: 	movss	(%r15), %xmm1
    000002d5: 	movss	0x4(%r15), %xmm5
    000002db: 	movss	0x8(%r15), %xmm4
    000002e1: 	movss	0xc(%r15), %xmm3
    000002e7: 	movq	-0x38(%rsp), %rax
    000002ec: 	cmpq	%rax, -0x18(%rsp)
    000002f1: 	jbe	.Ltmp419 # Offset: 753
    000002f7: 	leaq	(%r12,%rax), %r14
    000002fb: 	leaq	0x4(%rcx), %r9
    000002ff: 	movq	%r14, -0x48(%rsp)
    00000304: 	leaq	(%r13,%rax), %r14
    00000309: 	leaq	0x4(%rdx), %r11
    0000030d: 	movq	%r14, -0x50(%rsp)
    00000312: 	leaq	(%r8,%rax), %r14
    00000316: 	addq	%rbp, %rax
    00000319: 	movq	%rax, -0x60(%rsp)
    0000031e: 	movq	%r10, %rax
    00000321: 	subq	%r9, %rax
    00000324: 	movq	%r14, -0x58(%rsp)
    00000329: 	cmpq	$0x8, %rax
    0000032d: 	movq	%r10, %rax
    00000330: 	seta	%r9b
    00000334: 	subq	%r11, %rax
    00000337: 	leaq	0x4(%rsi), %r11
    0000033b: 	cmpq	$0x8, %rax
    0000033f: 	seta	%al
    00000342: 	andl	%r9d, %eax
    00000345: 	cmpq	$0x1, -0x40(%rsp)
    0000034b: 	setne	%r9b
    0000034f: 	andl	%r9d, %eax
    00000352: 	movq	%r10, %r9
    00000355: 	subq	%r11, %r9
    00000358: 	cmpq	$0x8, %r9
    0000035c: 	seta	%r9b
    00000360: 	testb	%r9b, %al
    00000363: 	je	.Ltmp420 # Offset: 867
    00000369: 	leaq	0x4(%rdi), %r9
    0000036d: 	movq	%r10, %rax
    00000370: 	subq	%r9, %rax
    00000373: 	cmpq	$0x8, %rax
    00000377: 	jbe	.Ltmp420 # Offset: 887
    0000037d: 	cmpq	$0x2, (%rsp)
    00000382: 	jbe	.Ltmp421 # Offset: 898
    00000388: 	movq	0x10(%rsp), %r9
    0000038d: 	movaps	%xmm1, %xmm9
    00000391: 	movaps	%xmm5, %xmm8
    00000395: 	movaps	%xmm4, %xmm7
    00000398: 	movaps	%xmm3, %xmm6
    0000039b: 	xorl	%eax, %eax
    0000039d: 	shufps	$0x0, %xmm9, %xmm9
    000003a2: 	shufps	$0x0, %xmm8, %xmm8
    000003a7: 	shufps	$0x0, %xmm7, %xmm7
    000003ab: 	shufps	$0x0, %xmm6, %xmm6
    000003af: 	nop # Size: 1
.Ltmp422:
    000003b0: 	movups	(%rdx,%rax), %xmm0
    000003b4: 	movups	(%rcx,%rax), %xmm2
    000003b8: 	mulps	%xmm9, %xmm0
    000003bc: 	mulps	%xmm8, %xmm2
    000003c0: 	addps	%xmm2, %xmm0
    000003c3: 	movups	(%rsi,%rax), %xmm2
    000003c7: 	mulps	%xmm7, %xmm2
    000003ca: 	addps	%xmm2, %xmm0
    000003cd: 	movups	(%rdi,%rax), %xmm2
    000003d1: 	mulps	%xmm6, %xmm2
    000003d4: 	addps	%xmm2, %xmm0
    000003d7: 	movups	(%r10,%rax), %xmm2
    000003dc: 	addps	%xmm2, %xmm0
    000003df: 	movups	%xmm0, (%r10,%rax)
    000003e4: 	addq	$0x10, %rax
    000003e8: 	cmpq	%rax, %r9
    000003eb: 	jne	.Ltmp422 # Offset: 1003
    000003ed: 	movq	0x8(%rsp), %r9
    000003f2: 	cmpq	%r9, -0x40(%rsp)
    000003f7: 	je	.Ltmp419 # Offset: 1015
    000003fd: 	movq	0x20(%rsp), %rax
    00000402: 	cmpq	$0x1, %rax
    00000406: 	movq	%rax, -0x30(%rsp)
    0000040b: 	movq	0x18(%rsp), %rax
    00000410: 	je	.Ltmp423 # Offset: 1040
.Ltmp436:
    00000416: 	movq	-0x28(%rsp), %r14
    0000041b: 	movaps	%xmm1, %xmm2
    0000041e: 	movaps	%xmm5, %xmm6
    00000421: 	shufps	$0xe0, %xmm2, %xmm2
    00000425: 	shufps	$0xe0, %xmm6, %xmm6
    00000429: 	leaq	(%r14,%r9), %r11
    0000042d: 	movq	-0x78(%rsp), %r14
    00000432: 	leaq	(%r14,%r11,4), %r14
    00000436: 	movq	-0x48(%rsp), %r11
    0000043b: 	addq	%r9, %r11
    0000043e: 	movq	(%rbx,%r11,4), %xmm0
    00000444: 	movq	-0x50(%rsp), %r11
    00000449: 	mulps	%xmm2, %xmm0
    0000044c: 	addq	%r9, %r11
    0000044f: 	movq	(%rbx,%r11,4), %xmm2
    00000455: 	movq	-0x58(%rsp), %r11
    0000045a: 	mulps	%xmm6, %xmm2
    0000045d: 	addq	%r9, %r11
    00000460: 	movaps	%xmm4, %xmm6
    00000463: 	addq	-0x60(%rsp), %r9
    00000468: 	shufps	$0xe0, %xmm6, %xmm6
    0000046c: 	addps	%xmm2, %xmm0
    0000046f: 	movq	(%rbx,%r11,4), %xmm2
    00000475: 	mulps	%xmm6, %xmm2
    00000478: 	movaps	%xmm3, %xmm6
    0000047b: 	shufps	$0xe0, %xmm6, %xmm6
    0000047f: 	addps	%xmm2, %xmm0
    00000482: 	movq	(%rbx,%r9,4), %xmm2
    00000488: 	mulps	%xmm6, %xmm2
    0000048b: 	addps	%xmm2, %xmm0
    0000048e: 	movq	(%r14), %xmm2
    00000493: 	addps	%xmm2, %xmm0
    00000496: 	movlps	%xmm0, (%r14)
    0000049a: 	movq	-0x30(%rsp), %r14
    0000049f: 	movq	%r14, %r9
    000004a2: 	andq	$-0x2, %r9
    000004a6: 	addq	%r9, %rax
    000004a9: 	cmpq	%r14, %r9
    000004ac: 	je	.Ltmp419 # Offset: 1196
.Ltmp423:
    000004ae: 	leaq	(%r12,%rax), %r11
    000004b2: 	movq	-0x70(%rsp), %r14
    000004b7: 	mulss	(%rbx,%r11,4), %xmm1
    000004bd: 	leaq	(%r13,%rax), %r11
    000004c2: 	mulss	(%rbx,%r11,4), %xmm5
    000004c8: 	leaq	(%r8,%rax), %r11
    000004cc: 	leaq	(%r14,%rax), %r9
    000004d0: 	addq	%rbp, %rax
    000004d3: 	mulss	(%rbx,%r11,4), %xmm4
    000004d9: 	movq	-0x78(%rsp), %r14
    000004de: 	mulss	(%rbx,%rax,4), %xmm3
    000004e3: 	leaq	(%r14,%r9,4), %r9
    000004e7: 	addss	%xmm5, %xmm1
    000004eb: 	addss	%xmm4, %xmm1
    000004ef: 	addss	%xmm3, %xmm1
    000004f3: 	addss	(%r9), %xmm1
    000004f8: 	movss	%xmm1, (%r9)
.Ltmp419:
    000004fd: 	movq	-0x20(%rsp), %rax
    00000502: 	addq	$0x4, -0x68(%rsp)
    00000508: 	addq	$0x10, %r15
    0000050c: 	movq	-0x68(%rsp), %r14
    00000511: 	addq	%rax, %r12
    00000514: 	addq	%rax, %r13
    00000517: 	addq	%rax, %r8
    0000051a: 	addq	%rax, %rbp
    0000051d: 	movq	-0x8(%rsp), %rax
    00000522: 	addq	%rax, %rdx
    00000525: 	addq	%rax, %rcx
    00000528: 	addq	%rax, %rsi
    0000052b: 	addq	%rax, %rdi
    0000052e: 	cmpq	-0x10(%rsp), %r14
    00000533: 	jb	.Ltmp424 # Offset: 1331
.Ltmp439:
    00000539: 	movq	-0x68(%rsp), %rsi
    0000053e: 	cmpq	%rsi, 0x68(%rsp)
    00000543: 	jbe	.Ltmp425 # Offset: 1347
    00000549: 	movq	-0x38(%rsp), %rdx
    0000054e: 	cmpq	%rdx, -0x18(%rsp)
    00000553: 	jbe	.Ltmp425 # Offset: 1363
    00000559: 	movq	%rsi, %rax
    0000055c: 	movq	-0x70(%rsp), %r9
    00000561: 	imulq	0x28(%rsp), %rsi
    00000567: 	movq	0xb8(%rsp), %rdi
    0000056f: 	movq	-0x40(%rsp), %r14
    00000574: 	addq	%r9, %rax
    00000577: 	movq	0x10(%rsp), %r8
    0000057c: 	movq	0x50(%rsp), %r13
    00000581: 	leaq	(%rdi,%rax,4), %r11
    00000585: 	movq	-0x78(%rsp), %r15
    0000058a: 	movq	%rsi, %rdi
    0000058d: 	leaq	(%rsi,%rdx), %rsi
    00000591: 	leaq	(%rbx,%rsi,4), %rdx
.Ltmp431:
    00000595: 	leaq	0x4(%rdx), %rcx
    00000599: 	movq	%r10, %rax
    0000059c: 	movss	(%r11), %xmm1
    000005a1: 	subq	%rcx, %rax
    000005a4: 	cmpq	$0x8, %rax
    000005a8: 	jbe	.Ltmp426 # Offset: 1448
    000005ae: 	cmpq	$0x1, %r14
    000005b2: 	je	.Ltmp426 # Offset: 1458
    000005b8: 	cmpq	$0x2, (%rsp)
    000005bd: 	jbe	.Ltmp427 # Offset: 1469
    000005c3: 	movaps	%xmm1, %xmm2
    000005c6: 	xorl	%eax, %eax
    000005c8: 	shufps	$0x0, %xmm2, %xmm2
    000005cc: 	nopl	(%rax) # Size: 4
.Ltmp428:
    000005d0: 	movups	(%rdx,%rax), %xmm0
    000005d4: 	movups	(%r10,%rax), %xmm7
    000005d9: 	mulps	%xmm2, %xmm0
    000005dc: 	addps	%xmm7, %xmm0
    000005df: 	movups	%xmm0, (%r10,%rax)
    000005e4: 	addq	$0x10, %rax
    000005e8: 	cmpq	%rax, %r8
    000005eb: 	jne	.Ltmp428 # Offset: 1515
    000005ed: 	movq	0x8(%rsp), %rcx
    000005f2: 	cmpq	%rcx, %r14
    000005f5: 	je	.Ltmp429 # Offset: 1525
    000005f7: 	movq	0x20(%rsp), %rax
    000005fc: 	cmpq	$0x1, %rax
    00000600: 	movq	%rax, %r12
    00000603: 	movq	0x18(%rsp), %rax
    00000608: 	je	.Ltmp430 # Offset: 1544
.Ltmp438:
    0000060a: 	movq	-0x28(%rsp), %rbp
    0000060f: 	movaps	%xmm1, %xmm2
    00000612: 	shufps	$0xe0, %xmm2, %xmm2
    00000616: 	addq	%rcx, %rbp
    00000619: 	addq	%rsi, %rcx
    0000061c: 	movq	(%rbx,%rcx,4), %xmm0
    00000621: 	leaq	(%r15,%rbp,4), %rbp
    00000625: 	movq	%r12, %rcx
    00000628: 	andq	$-0x2, %rcx
    0000062c: 	mulps	%xmm2, %xmm0
    0000062f: 	movq	(%rbp), %xmm2
    00000634: 	addq	%rcx, %rax
    00000637: 	addps	%xmm2, %xmm0
    0000063a: 	movlps	%xmm0, (%rbp)
    0000063e: 	cmpq	%rcx, %r12
    00000641: 	je	.Ltmp429 # Offset: 1601
.Ltmp430:
    00000643: 	leaq	(%rax,%r9), %rcx
    00000647: 	addq	%rdi, %rax
    0000064a: 	mulss	(%rbx,%rax,4), %xmm1
    0000064f: 	leaq	(%r15,%rcx,4), %rcx
    00000653: 	addss	(%rcx), %xmm1
    00000657: 	movss	%xmm1, (%rcx)
.Ltmp429:
    0000065b: 	addq	$0x4, %r11
    0000065f: 	addq	-0x20(%rsp), %rdx
    00000664: 	addq	0x28(%rsp), %rdi
    00000669: 	cmpq	%r11, 0x30(%rsp)
    0000066e: 	je	.Ltmp425 # Offset: 1646
    00000674: 	movq	-0x38(%rsp), %rax
    00000679: 	leaq	(%rdi,%rax), %rsi
    0000067d: 	jmp	.Ltmp431 # Offset: 1661
    00000682: 	nopw	(%rax,%rax) # Size: 6
.Ltmp420:
    00000688: 	movq	0x58(%rsp), %r9
    0000068d: 	movq	-0x38(%rsp), %rax
    00000692: 	movq	%r8, -0x58(%rsp)
    00000697: 	movq	%rbp, -0x50(%rsp)
    0000069c: 	movq	0x40(%rsp), %r8
    000006a1: 	leaq	(%rdx,%r9), %r14
    000006a5: 	movq	%rdx, -0x48(%rsp)
    000006aa: 	movq	-0x18(%rsp), %rdx
    000006af: 	leaq	(%rsi,%r9), %r11
    000006b3: 	movq	%r14, -0x60(%rsp)
    000006b8: 	movq	-0x60(%rsp), %rbp
    000006bd: 	leaq	(%rcx,%r9), %r14
    000006c1: 	addq	%rdi, %r9
    000006c4: 	nopl	(%rax) # Size: 4
.Ltmp432:
    000006c8: 	movss	(%rbp,%rax,4), %xmm0
    000006ce: 	movss	(%r14,%rax,4), %xmm2
    000006d4: 	mulss	%xmm1, %xmm0
    000006d8: 	mulss	%xmm5, %xmm2
    000006dc: 	addss	%xmm2, %xmm0
    000006e0: 	movss	(%r11,%rax,4), %xmm2
    000006e6: 	mulss	%xmm4, %xmm2
    000006ea: 	addss	%xmm2, %xmm0
    000006ee: 	movss	(%r9,%rax,4), %xmm2
    000006f4: 	mulss	%xmm3, %xmm2
    000006f8: 	addss	%xmm2, %xmm0
    000006fc: 	addss	(%r8,%rax,4), %xmm0
    00000702: 	movss	%xmm0, (%r8,%rax,4)
    00000708: 	addq	$0x1, %rax
    0000070c: 	cmpq	%rax, %rdx
    0000070f: 	jne	.Ltmp432 # Offset: 1807
    00000711: 	movq	-0x58(%rsp), %r8
    00000716: 	movq	-0x50(%rsp), %rbp
    0000071b: 	movq	-0x48(%rsp), %rdx
    00000720: 	jmp	.Ltmp419 # Offset: 1824
    00000725: 	nopl	(%rax) # Size: 3
.Ltmp425:
    00000728: 	movq	-0x20(%rsp), %rax
    0000072d: 	movq	0x28(%rsp), %rdx
    00000732: 	addq	$0x1, 0x38(%rsp)
    00000738: 	movq	0x38(%rsp), %rsi
    0000073d: 	addq	%rax, 0x30(%rsp)
    00000742: 	addq	%rax, %r10
    00000745: 	addq	%rdx, -0x70(%rsp)
    0000074a: 	addq	%rax, 0x50(%rsp)
    0000074f: 	addq	%rdx, -0x28(%rsp)
    00000754: 	addq	%rax, 0x40(%rsp)
    00000759: 	cmpq	0x80(%rsp), %rsi
    00000761: 	jne	.Ltmp433 # Offset: 1889
    00000767: 	subq	$0xe10, 0x58(%rsp)
    00000770: 	movq	-0x78(%rsp), %r11
    00000775: 	movq	0xc8(%rsp), %rsi
    0000077d: 	cmpq	%rsi, 0x28(%rsp)
    00000782: 	ja	.Ltmp434 # Offset: 1922
    00000788: 	movq	0x78(%rsp), %rax
    0000078d: 	addq	0xf8(%rsp), %rax
    00000795: 	movq	%rbx, %r15
    00000798: 	movq	%r11, %r14
    0000079b: 	movq	%rax, 0x60(%rsp)
    000007a0: 	movq	0xd8(%rsp), %rax
    000007a8: 	addq	0x100(%rsp), %rax
    000007b0: 	movq	%rax, 0xd0(%rsp)
    000007b8: 	cmpq	%rdx, 0xc0(%rsp)
    000007c0: 	jb	.Ltmp435 # Offset: 1984
.Ltmp417:
    000007c6: 	addq	$0x110, %rsp
    000007cd: 	popq	%rbx
    000007ce: 	popq	%rbp
    000007cf: 	popq	%r12
    000007d1: 	popq	%r13
    000007d3: 	popq	%r14
    000007d5: 	popq	%r15
    000007d7: 	retq # Offset: 2007
.Ltmp421:
    000007d8: 	movq	-0x40(%rsp), %rax
    000007dd: 	xorl	%r9d, %r9d
    000007e0: 	movq	%rax, -0x30(%rsp)
    000007e5: 	movq	-0x38(%rsp), %rax
    000007ea: 	jmp	.Ltmp436 # Offset: 2026
.Ltmp426:
    000007ef: 	movq	%rdx, %rcx
    000007f2: 	movq	%r10, %rax
    000007f5: 	nopl	(%rax) # Size: 3
.Ltmp437:
    000007f8: 	movss	(%rcx), %xmm0
    000007fc: 	addq	$0x4, %rax
    00000800: 	addq	$0x4, %rcx
    00000804: 	mulss	%xmm1, %xmm0
    00000808: 	addss	-0x4(%rax), %xmm0
    0000080d: 	movss	%xmm0, -0x4(%rax)
    00000812: 	cmpq	%rax, %r13
    00000815: 	jne	.Ltmp437 # Offset: 2069
    00000817: 	jmp	.Ltmp429 # Offset: 2071
.Ltmp427:
    0000081c: 	movq	-0x38(%rsp), %rax
    00000821: 	movq	%r14, %r12
    00000824: 	xorl	%ecx, %ecx
    00000826: 	jmp	.Ltmp438 # Offset: 2086
.Ltmp418:
    0000082b: 	movq	%rsi, -0x68(%rsp)
    00000830: 	jmp	.Ltmp439 # Offset: 2096
DWARF CFI Instructions:
    <empty>
End of Function "_ZN28matmul_JKI_blocked_unrolled2IfEclEPKfS2_Pfmm.isra.0/1(*2)"

Binary Function "_ZN28matmul_IJK_blocked_unrolled1IfEclEPKfS2_Pfmm.isra.0/1(*2)" after disassembly {
  All names   : _ZN28matmul_IJK_blocked_unrolled1IfEclEPKfS2_Pfmm.isra.0/1
                _ZN28matmul_IJK_blocked_unrolled1IfEclEPKfS2_Pfmm.isra.0/matrix_multiply.cpp/1
  Number      : 58
  State       : disassembled
  Address     : 0xf250
  Size        : 0x28c
  MaxSize     : 0x290
  Offset      : 0xf250
  Section     : .text
  Orc Section : .local.text._ZN28matmul_IJK_blocked_unrolled1IfEclEPKfS2_Pfmm.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB057:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	subq	$0x8, %rsp
    0000000e: 	movq	%rdi, -0x60(%rsp)
    00000013: 	movq	%rsi, -0x58(%rsp)
    00000018: 	movq	%rdx, -0x30(%rsp)
    0000001d: 	movq	%rcx, -0x10(%rsp)
    00000022: 	testq	%rcx, %rcx
    00000025: 	je	.Ltmp440 # Offset: 37
    0000002b: 	movq	%r8, %r13
    0000002e: 	testq	%r8, %r8
    00000031: 	je	.Ltmp440 # Offset: 49
    00000037: 	movq	%r8, %rax
    0000003a: 	leaq	(%r8,%r8), %r12
    0000003e: 	pxor	%xmm3, %xmm3
    00000042: 	movq	%r8, %r14
    00000045: 	shlq	$0x7, %rax
    00000049: 	leaq	(%r12,%r8), %r15
    0000004d: 	movq	$0x0, -0x48(%rsp)
    00000056: 	leaq	(,%r8,4), %rbp
    0000005e: 	movq	%rax, -0x8(%rsp)
    00000063: 	movq	%r8, %rax
    00000066: 	shlq	$0x4, %r14
    0000006a: 	movq	$0x0, -0x28(%rsp)
    00000073: 	shlq	$0x9, %rax
    00000077: 	movq	%rax, (%rsp)
    0000007b: 	movq	%r15, %rax
    0000007e: 	movq	%rbp, %r15
    00000081: 	movq	%rax, %rbp
.Ltmp449:
    00000084: 	movq	-0x28(%rsp), %rbx
    00000089: 	movq	-0x10(%rsp), %rdi
    0000008e: 	movq	$0x0, -0x20(%rsp)
    00000097: 	movq	%rbx, -0x40(%rsp)
    0000009c: 	movq	%rbx, %rax
    0000009f: 	subq	$-0x80, %rbx
    000000a3: 	cmpq	%rdi, %rbx
    000000a6: 	movq	%rbx, -0x28(%rsp)
    000000ab: 	cmovbeq	%rbx, %rdi
    000000af: 	movq	-0x58(%rsp), %rbx
    000000b4: 	movq	%rdi, -0x78(%rsp)
    000000b9: 	movq	%rbx, -0x18(%rsp)
    000000be: 	cmpq	%rax, %rdi
    000000c1: 	jbe	.Ltmp441 # Offset: 193
.Ltmp448:
    000000c7: 	movq	-0x20(%rsp), %rbx
    000000cc: 	movq	-0x48(%rsp), %rax
    000000d1: 	movq	-0x60(%rsp), %rsi
    000000d6: 	movq	%rbx, %r11
    000000d9: 	subq	$-0x80, %rbx
    000000dd: 	cmpq	%r13, %rbx
    000000e0: 	movq	%rbx, -0x20(%rsp)
    000000e5: 	cmovaq	%r13, %rbx
    000000e9: 	addq	%rbx, %rax
    000000ec: 	movq	%rbx, -0x70(%rsp)
    000000f1: 	leaq	-0x3(%rbx), %rdi
    000000f5: 	leaq	(%rsi,%rax,4), %rax
    000000f9: 	movq	%rax, -0x38(%rsp)
    000000fe: 	movq	%r11, %rax
    00000101: 	subq	%rbx, %rax
    00000104: 	xorl	%ebx, %ebx
    00000106: 	shlq	$0x2, %rax
    0000010a: 	movq	%rax, -0x50(%rsp)
    0000010f: 	movq	-0x18(%rsp), %rax
    00000114: 	movq	%rax, -0x68(%rsp)
    00000119: 	nopl	(%rax) # Size: 7
.Ltmp447:
    00000120: 	movq	-0x30(%rsp), %rax
    00000125: 	movq	-0x38(%rsp), %rsi
    0000012a: 	movq	-0x48(%rsp), %r8
    0000012f: 	movq	-0x40(%rsp), %r9
    00000134: 	leaq	(%rax,%rbx,4), %r10
    00000138: 	nopl	(%rax,%rax) # Size: 8
.Ltmp446:
    00000140: 	cmpq	%r11, %rdi
    00000143: 	jbe	.Ltmp442 # Offset: 323
    00000149: 	movq	-0x50(%rsp), %rax
    0000014e: 	movq	%r11, %rcx
    00000151: 	movaps	%xmm3, %xmm4
    00000154: 	movaps	%xmm3, %xmm5
    00000157: 	movaps	%xmm3, %xmm2
    0000015a: 	movaps	%xmm3, %xmm0
    0000015d: 	leaq	(%rax,%rsi), %rdx
    00000161: 	movq	-0x68(%rsp), %rax
    00000166: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp443:
    00000170: 	movss	(%rax), %xmm1
    00000174: 	mulss	(%rdx), %xmm1
    00000178: 	addq	$0x4, %rcx
    0000017c: 	addq	$0x10, %rdx
    00000180: 	addss	%xmm1, %xmm0
    00000184: 	movss	(%rax,%r13,4), %xmm1
    0000018a: 	mulss	-0xc(%rdx), %xmm1
    0000018f: 	addss	%xmm1, %xmm2
    00000193: 	movss	(%rax,%r12,4), %xmm1
    00000199: 	mulss	-0x8(%rdx), %xmm1
    0000019e: 	addss	%xmm1, %xmm5
    000001a2: 	movss	(%rax,%rbp,4), %xmm1
    000001a7: 	mulss	-0x4(%rdx), %xmm1
    000001ac: 	addq	%r14, %rax
    000001af: 	addss	%xmm1, %xmm4
    000001b3: 	cmpq	%rdi, %rcx
    000001b6: 	jb	.Ltmp443 # Offset: 438
.Ltmp450:
    000001b8: 	cmpq	%rcx, -0x70(%rsp)
    000001bd: 	jbe	.Ltmp444 # Offset: 445
    000001bf: 	movq	%r13, %rax
    000001c2: 	movq	-0x58(%rsp), %rdx
    000001c7: 	imulq	%rcx, %rax
    000001cb: 	addq	%r8, %rcx
    000001ce: 	addq	%rbx, %rax
    000001d1: 	leaq	(%rdx,%rax,4), %rax
    000001d5: 	movq	-0x60(%rsp), %rdx
    000001da: 	leaq	(%rdx,%rcx,4), %rdx
    000001de: 	nop # Size: 2
.Ltmp445:
    000001e0: 	movss	(%rax), %xmm1
    000001e4: 	mulss	(%rdx), %xmm1
    000001e8: 	addq	$0x4, %rdx
    000001ec: 	addq	%r15, %rax
    000001ef: 	addss	%xmm1, %xmm0
    000001f3: 	cmpq	%rdx, %rsi
    000001f6: 	jne	.Ltmp445 # Offset: 502
.Ltmp444:
    000001f8: 	addss	%xmm0, %xmm2
    000001fc: 	addq	$0x1, %r9
    00000200: 	addq	%r15, %rsi
    00000203: 	addss	%xmm5, %xmm2
    00000207: 	addss	%xmm4, %xmm2
    0000020b: 	addss	(%r10,%r8,4), %xmm2
    00000211: 	movss	%xmm2, (%r10,%r8,4)
    00000217: 	addq	%r13, %r8
    0000021a: 	cmpq	%r9, -0x78(%rsp)
    0000021f: 	jne	.Ltmp446 # Offset: 543
    00000225: 	addq	$0x1, %rbx
    00000229: 	addq	$0x4, -0x68(%rsp)
    0000022f: 	cmpq	%rbx, %r13
    00000232: 	jne	.Ltmp447 # Offset: 562
    00000238: 	movq	(%rsp), %rbx
    0000023c: 	addq	%rbx, -0x18(%rsp)
    00000241: 	cmpq	%r13, -0x20(%rsp)
    00000246: 	jb	.Ltmp448 # Offset: 582
.Ltmp441:
    0000024c: 	movq	-0x8(%rsp), %rbx
    00000251: 	addq	%rbx, -0x48(%rsp)
    00000256: 	movq	-0x10(%rsp), %rbx
    0000025b: 	cmpq	%rbx, -0x28(%rsp)
    00000260: 	jb	.Ltmp449 # Offset: 608
.Ltmp440:
    00000266: 	addq	$0x8, %rsp
    0000026a: 	popq	%rbx
    0000026b: 	popq	%rbp
    0000026c: 	popq	%r12
    0000026e: 	popq	%r13
    00000270: 	popq	%r14
    00000272: 	popq	%r15
    00000274: 	retq # Offset: 628
    00000275: 	nopl	(%rax) # Size: 3
.Ltmp442:
    00000278: 	movaps	%xmm3, %xmm4
    0000027b: 	movaps	%xmm3, %xmm5
    0000027e: 	movaps	%xmm3, %xmm2
    00000281: 	movq	%r11, %rcx
    00000284: 	movaps	%xmm3, %xmm0
    00000287: 	jmp	.Ltmp450 # Offset: 647
DWARF CFI Instructions:
    <empty>
End of Function "_ZN28matmul_IJK_blocked_unrolled1IfEclEPKfS2_Pfmm.isra.0/1(*2)"

Binary Function "_ZN28matmul_JIK_blocked_unrolled1IfEclEPKfS2_Pfmm.isra.0/1(*2)" after disassembly {
  All names   : _ZN28matmul_JIK_blocked_unrolled1IfEclEPKfS2_Pfmm.isra.0/1
                _ZN28matmul_JIK_blocked_unrolled1IfEclEPKfS2_Pfmm.isra.0/matrix_multiply.cpp/1
  Number      : 59
  State       : disassembled
  Address     : 0xf4e0
  Size        : 0x254
  MaxSize     : 0x260
  Offset      : 0xf4e0
  Section     : .text
  Orc Section : .local.text._ZN28matmul_JIK_blocked_unrolled1IfEclEPKfS2_Pfmm.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB058:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	movq	%rdi, -0x58(%rsp)
    0000000f: 	movq	%rsi, -0x50(%rsp)
    00000014: 	movq	%rdx, -0x8(%rsp)
    00000019: 	movq	%rcx, -0x30(%rsp)
    0000001e: 	testq	%r8, %r8
    00000021: 	je	.Ltmp451 # Offset: 33
    00000027: 	testq	%rcx, %rcx
    0000002a: 	je	.Ltmp451 # Offset: 42
    00000030: 	movq	%r8, %rax
    00000033: 	movq	%r8, %r12
    00000036: 	movq	%rsi, -0x18(%rsp)
    0000003b: 	leaq	(%r8,%r8), %r13
    0000003f: 	shlq	$0x9, %rax
    00000043: 	shlq	$0x4, %r12
    00000047: 	leaq	(%r13,%r8), %r15
    0000004c: 	movq	%r8, %r14
    0000004f: 	movq	$0x0, -0x28(%rsp)
    00000058: 	leaq	(,%r8,4), %rbp
    00000060: 	pxor	%xmm3, %xmm3
    00000064: 	movq	%rax, -0x10(%rsp)
    00000069: 	movq	%r12, %rax
    0000006c: 	movq	%r13, %r12
    0000006f: 	movq	%rbp, %r13
    00000072: 	movq	%rax, %rbp
.Ltmp460:
    00000075: 	movq	-0x28(%rsp), %rbx
    0000007a: 	movq	%rbx, -0x38(%rsp)
    0000007f: 	movq	%rbx, %rax
    00000082: 	subq	$-0x80, %rbx
    00000086: 	cmpq	%r14, %rbx
    00000089: 	movq	%rbx, -0x28(%rsp)
    0000008e: 	cmovaq	%r14, %rbx
    00000092: 	movq	%rbx, -0x70(%rsp)
    00000097: 	cmpq	%rax, %rbx
    0000009a: 	jbe	.Ltmp452 # Offset: 154
    000000a0: 	movq	$0x0, -0x20(%rsp)
    000000a9: 	movq	-0x18(%rsp), %rax
    000000ae: 	movq	%rax, -0x40(%rsp)
.Ltmp459:
    000000b3: 	movq	-0x20(%rsp), %rax
    000000b8: 	movq	-0x58(%rsp), %rbx
    000000bd: 	movq	$0x0, -0x48(%rsp)
    000000c6: 	movq	-0x8(%rsp), %r10
    000000cb: 	movq	%rax, %r11
    000000ce: 	subq	$-0x80, %rax
    000000d2: 	cmpq	%rax, %r14
    000000d5: 	movq	%rax, -0x20(%rsp)
    000000da: 	leaq	(%rbx,%r11,4), %rdi
    000000de: 	cmovbeq	%r14, %rax
    000000e2: 	movq	%rdi, -0x60(%rsp)
    000000e7: 	movq	%rax, -0x68(%rsp)
    000000ec: 	leaq	(%rbx,%rax,4), %rdi
    000000f0: 	leaq	-0x3(%rax), %rsi
    000000f4: 	xorl	%ebx, %ebx
    000000f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp458:
    00000100: 	movq	-0x40(%rsp), %r9
    00000105: 	movq	-0x38(%rsp), %r8
    0000010a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp457:
    00000110: 	cmpq	%r11, %rsi
    00000113: 	jbe	.Ltmp453 # Offset: 275
    00000119: 	movq	-0x60(%rsp), %rdx
    0000011e: 	movq	%r9, %rax
    00000121: 	movq	%r11, %rcx
    00000124: 	movaps	%xmm3, %xmm4
    00000127: 	movaps	%xmm3, %xmm5
    0000012a: 	movaps	%xmm3, %xmm2
    0000012d: 	movaps	%xmm3, %xmm0
.Ltmp454:
    00000130: 	movss	(%rax), %xmm1
    00000134: 	mulss	(%rdx), %xmm1
    00000138: 	addq	$0x4, %rcx
    0000013c: 	addq	$0x10, %rdx
    00000140: 	addss	%xmm1, %xmm0
    00000144: 	movss	(%rax,%r14,4), %xmm1
    0000014a: 	mulss	-0xc(%rdx), %xmm1
    0000014f: 	addss	%xmm1, %xmm2
    00000153: 	movss	(%rax,%r12,4), %xmm1
    00000159: 	mulss	-0x8(%rdx), %xmm1
    0000015e: 	addss	%xmm1, %xmm5
    00000162: 	movss	(%rax,%r15,4), %xmm1
    00000168: 	mulss	-0x4(%rdx), %xmm1
    0000016d: 	addq	%rbp, %rax
    00000170: 	addss	%xmm1, %xmm4
    00000174: 	cmpq	%rsi, %rcx
    00000177: 	jb	.Ltmp454 # Offset: 375
.Ltmp461:
    00000179: 	cmpq	%rcx, -0x68(%rsp)
    0000017e: 	jbe	.Ltmp455 # Offset: 382
    00000180: 	movq	%r14, %rax
    00000183: 	movq	-0x50(%rsp), %rdx
    00000188: 	imulq	%rcx, %rax
    0000018c: 	addq	%rbx, %rcx
    0000018f: 	addq	%r8, %rax
    00000192: 	leaq	(%rdx,%rax,4), %rax
    00000196: 	movq	-0x58(%rsp), %rdx
    0000019b: 	leaq	(%rdx,%rcx,4), %rdx
    0000019f: 	nop # Size: 1
.Ltmp456:
    000001a0: 	movss	(%rax), %xmm1
    000001a4: 	mulss	(%rdx), %xmm1
    000001a8: 	addq	$0x4, %rdx
    000001ac: 	addq	%r13, %rax
    000001af: 	addss	%xmm1, %xmm0
    000001b3: 	cmpq	%rdx, %rdi
    000001b6: 	jne	.Ltmp456 # Offset: 438
.Ltmp455:
    000001b8: 	addss	%xmm0, %xmm2
    000001bc: 	addq	$0x4, %r9
    000001c0: 	addss	%xmm5, %xmm2
    000001c4: 	addss	%xmm4, %xmm2
    000001c8: 	addss	(%r10,%r8,4), %xmm2
    000001ce: 	movss	%xmm2, (%r10,%r8,4)
    000001d4: 	addq	$0x1, %r8
    000001d8: 	cmpq	%r8, -0x70(%rsp)
    000001dd: 	jne	.Ltmp457 # Offset: 477
    000001e3: 	addq	$0x1, -0x48(%rsp)
    000001e9: 	addq	%r14, %rbx
    000001ec: 	addq	%r13, %r10
    000001ef: 	addq	%r13, %rdi
    000001f2: 	addq	%r13, -0x60(%rsp)
    000001f7: 	movq	-0x48(%rsp), %rax
    000001fc: 	cmpq	-0x30(%rsp), %rax
    00000201: 	jne	.Ltmp458 # Offset: 513
    00000207: 	movq	-0x10(%rsp), %rbx
    0000020c: 	addq	%rbx, -0x40(%rsp)
    00000211: 	cmpq	-0x20(%rsp), %r14
    00000216: 	ja	.Ltmp459 # Offset: 534
.Ltmp452:
    0000021c: 	addq	$0x200, -0x18(%rsp)
    00000225: 	cmpq	%r14, -0x28(%rsp)
    0000022a: 	jb	.Ltmp460 # Offset: 554
.Ltmp451:
    00000230: 	popq	%rbx
    00000231: 	popq	%rbp
    00000232: 	popq	%r12
    00000234: 	popq	%r13
    00000236: 	popq	%r14
    00000238: 	popq	%r15
    0000023a: 	retq # Offset: 570
    0000023b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp453:
    00000240: 	movaps	%xmm3, %xmm4
    00000243: 	movaps	%xmm3, %xmm5
    00000246: 	movaps	%xmm3, %xmm2
    00000249: 	movq	%r11, %rcx
    0000024c: 	movaps	%xmm3, %xmm0
    0000024f: 	jmp	.Ltmp461 # Offset: 591
DWARF CFI Instructions:
    <empty>
End of Function "_ZN28matmul_JIK_blocked_unrolled1IfEclEPKfS2_Pfmm.isra.0/1(*2)"

Binary Function "_ZN28matmul_JKI_blocked_unrolled3IiEclEPKiS2_Pimm.isra.0/1(*2)" after disassembly {
  All names   : _ZN28matmul_JKI_blocked_unrolled3IiEclEPKiS2_Pimm.isra.0/1
                _ZN28matmul_JKI_blocked_unrolled3IiEclEPKiS2_Pimm.isra.0/matrix_multiply.cpp/1
  Number      : 60
  State       : disassembled
  Address     : 0xf740
  Size        : 0x1475
  MaxSize     : 0x1480
  Offset      : 0xf740
  Section     : .text
  Orc Section : .local.text._ZN28matmul_JKI_blocked_unrolled3IiEclEPKiS2_Pimm.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB059:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	subq	$0x150, %rsp
    00000011: 	movq	%rdi, 0xf8(%rsp)
    00000019: 	movq	%rdx, (%rsp)
    0000001d: 	movq	%rcx, 0xc0(%rsp)
    00000025: 	movq	%r8, 0x60(%rsp)
    0000002a: 	testq	%r8, %r8
    0000002d: 	je	.Ltmp462 # Offset: 45
    00000033: 	testq	%rcx, %rcx
    00000036: 	je	.Ltmp462 # Offset: 54
    0000003c: 	imulq	$0x1f4, %r8, %rax
    00000043: 	leaq	(,%r8,4), %rdi
    0000004b: 	movq	%rsi, %r14
    0000004e: 	movq	%rsi, 0x110(%rsp)
    00000056: 	movq	%r8, %rsi
    00000059: 	movq	%rdi, 0x10(%rsp)
    0000005e: 	leaq	(%r8,%r8), %rdi
    00000062: 	shlq	$0x4, %rsi
    00000066: 	movq	%rdi, 0xb0(%rsp)
    0000006e: 	movq	%rsi, 0x30(%rsp)
    00000073: 	movq	%r8, 0xa0(%rsp)
    0000007b: 	movq	$0x0, 0x100(%rsp)
    00000087: 	movq	%rax, 0x140(%rsp)
.Ltmp482:
    0000008f: 	movq	0x100(%rsp), %rsi
    00000097: 	movq	0x60(%rsp), %rcx
    0000009c: 	movq	$0x4, -0x40(%rsp)
    000000a5: 	movq	$0x0, 0x108(%rsp)
    000000b1: 	movq	%rsi, 0x88(%rsp)
    000000b9: 	subq	$-0x80, %rsi
    000000bd: 	movq	%rcx, %rax
    000000c0: 	cmpq	%rcx, %rsi
    000000c3: 	leaq	-0x200(,%rsi,4), %rdx
    000000cb: 	movq	%rsi, 0x100(%rsp)
    000000d3: 	cmovbeq	%rsi, %rax
    000000d7: 	movq	0x110(%rsp), %rsi
    000000df: 	leaq	-0x3(%rax), %rdi
    000000e3: 	movq	%rax, 0xa8(%rsp)
    000000eb: 	shlq	$0x2, %rax
    000000ef: 	movq	%rdi, 0x28(%rsp)
    000000f4: 	movq	(%rsp), %rdi
    000000f8: 	subq	%rax, %rdx
    000000fb: 	movq	%rdx, 0xc8(%rsp)
    00000103: 	movq	%rdi, 0x118(%rsp)
    0000010b: 	movq	0xf8(%rsp), %rdi
    00000113: 	addq	%rax, %rdi
    00000116: 	movq	0xa0(%rsp), %rax
    0000011e: 	addq	0xb0(%rsp), %rax
    00000126: 	movq	%rax, 0xb8(%rsp)
    0000012e: 	movq	0x10(%rsp), %rax
    00000133: 	movq	%rdi, 0x128(%rsp)
    0000013b: 	addq	%rax, %rsi
    0000013e: 	movq	%rsi, %rdi
    00000141: 	movq	%rsi, 0x130(%rsp)
    00000149: 	movq	%rax, %rsi
    0000014c: 	addq	%rdi, %rax
    0000014f: 	addq	%rax, %rsi
    00000152: 	movq	%rax, 0x138(%rsp)
    0000015a: 	leaq	(%rcx,%rcx,2), %rax
    0000015e: 	movq	%rsi, 0x120(%rsp)
    00000166: 	movq	%rax, 0xf0(%rsp)
.Ltmp481:
    0000016e: 	movq	0x108(%rsp), %rsi
    00000176: 	movq	0x60(%rsp), %rdi
    0000017b: 	movq	$0x0, -0x18(%rsp)
    00000184: 	movq	0x118(%rsp), %rdx
    0000018c: 	movq	$0x0, 0x70(%rsp)
    00000195: 	movq	%rsi, %rax
    00000198: 	movq	%rsi, -0x8(%rsp)
    0000019d: 	addq	$0x384, %rsi
    000001a4: 	leaq	0x40(%rdx), %rcx
    000001a8: 	cmpq	%rsi, %rdi
    000001ab: 	movq	%rdx, 0x8(%rsp)
    000001b0: 	movq	%rcx, 0x18(%rsp)
    000001b5: 	movq	0x110(%rsp), %rcx
    000001bd: 	movq	%rsi, 0x108(%rsp)
    000001c5: 	cmovbeq	%rdi, %rsi
    000001c9: 	movq	%rax, %rdi
    000001cc: 	leaq	(,%rax,4), %rax
    000001d4: 	addq	%rax, %rcx
    000001d7: 	movq	%rcx, 0xd0(%rsp)
    000001df: 	movq	0x130(%rsp), %rcx
    000001e7: 	leaq	-0x3(%rsi), %r13
    000001eb: 	movq	%rsi, -0x48(%rsp)
    000001f0: 	movq	%r13, %r15
    000001f3: 	addq	%rax, %rcx
    000001f6: 	movq	%rcx, 0xd8(%rsp)
    000001fe: 	movq	0x138(%rsp), %rcx
    00000206: 	addq	%rax, %rcx
    00000209: 	addq	0x120(%rsp), %rax
    00000211: 	movq	%rax, 0xe8(%rsp)
    00000219: 	movq	%rsi, %rax
    0000021c: 	subq	%rdi, %rax
    0000021f: 	movq	%rcx, 0xe0(%rsp)
    00000227: 	subq	$0x4, %rax
    0000022b: 	movq	%rax, 0x20(%rsp)
    00000230: 	shrq	$0x2, %rax
    00000234: 	addq	$0x1, %rax
    00000238: 	movq	%rax, %rcx
    0000023b: 	movq	%rax, 0x38(%rsp)
    00000240: 	andq	$-0x4, %rax
    00000244: 	movq	%rax, 0x40(%rsp)
    00000249: 	leaq	(%rdi,%rax,4), %rax
    0000024d: 	shrq	$0x2, %rcx
    00000251: 	leaq	0x4(%rax), %rsi
    00000255: 	movq	%rax, 0x48(%rsp)
    0000025a: 	movq	%rsi, 0x78(%rsp)
    0000025f: 	leaq	0x8(%rax), %rsi
    00000263: 	addq	$0xc, %rax
    00000267: 	movq	%rax, 0x98(%rsp)
    0000026f: 	movq	0x128(%rsp), %rax
    00000277: 	movq	%rcx, 0x50(%rsp)
    0000027c: 	movq	%rsi, 0x80(%rsp)
    00000284: 	movq	%rax, 0x68(%rsp)
    00000289: 	nopl	(%rax) # Size: 7
.Ltmp480:
    00000290: 	movq	0x28(%rsp), %rdi
    00000295: 	cmpq	%rdi, 0x88(%rsp)
    0000029d: 	jae	.Ltmp463 # Offset: 669
    000002a3: 	movq	0xb8(%rsp), %rsi
    000002ab: 	movq	(%rsp), %rdi
    000002af: 	movq	%r15, -0x50(%rsp)
    000002b4: 	movq	0xc8(%rsp), %rax
    000002bc: 	addq	0x68(%rsp), %rax
    000002c1: 	movq	%rax, -0x20(%rsp)
    000002c6: 	movq	%rsi, %rax
    000002c9: 	subq	0xf0(%rsp), %rax
    000002d1: 	movq	%rax, -0x58(%rsp)
    000002d6: 	addq	0xb0(%rsp), %rax
    000002de: 	movq	%rax, -0x70(%rsp)
    000002e3: 	movq	0x48(%rsp), %rax
    000002e8: 	addq	-0x18(%rsp), %rax
    000002ed: 	movq	%rsi, -0x68(%rsp)
    000002f2: 	leaq	(%rdi,%rax,4), %rax
    000002f6: 	movq	%rax, 0x58(%rsp)
    000002fb: 	movq	0xe8(%rsp), %rax
    00000303: 	movq	%rax, -0x10(%rsp)
    00000308: 	movq	0xe0(%rsp), %rax
    00000310: 	movq	%rax, -0x28(%rsp)
    00000315: 	movq	0xd8(%rsp), %rax
    0000031d: 	movq	%rax, -0x30(%rsp)
    00000322: 	movq	0xd0(%rsp), %rax
    0000032a: 	movq	%rax, -0x38(%rsp)
    0000032f: 	movq	0xa0(%rsp), %rax
    00000337: 	movq	%rax, -0x78(%rsp)
    0000033c: 	movq	0x88(%rsp), %rax
    00000344: 	movq	%rax, -0x60(%rsp)
    00000349: 	nopl	(%rax) # Size: 7
.Ltmp471:
    00000350: 	movq	-0x20(%rsp), %rax
    00000355: 	movq	-0x8(%rsp), %r12
    0000035a: 	movq	-0x50(%rsp), %r15
    0000035f: 	movl	(%rax), %ecx
    00000361: 	movl	0x4(%rax), %edi
    00000364: 	movl	0x8(%rax), %edx
    00000367: 	movl	0xc(%rax), %esi
    0000036a: 	cmpq	%r12, %r15
    0000036d: 	jbe	.Ltmp464 # Offset: 877
    00000373: 	cmpq	$-0x4, %r15
    00000377: 	movq	-0x38(%rsp), %rbp
    0000037c: 	movq	0x8(%rsp), %rbx
    00000381: 	setbe	%r8b
    00000385: 	cmpq	$0x2, -0x40(%rsp)
    0000038b: 	movq	0x18(%rsp), %r11
    00000390: 	seta	%al
    00000393: 	movq	-0x30(%rsp), %r13
    00000398: 	movq	-0x28(%rsp), %r10
    0000039d: 	andl	%r8d, %eax
    000003a0: 	cmpq	$0xb, 0x20(%rsp)
    000003a6: 	seta	%r8b
    000003aa: 	andl	%r8d, %eax
    000003ad: 	leaq	0x40(%rbp), %r8
    000003b1: 	cmpq	%r8, %rbx
    000003b4: 	setae	%r8b
    000003b8: 	cmpq	%rbp, %r11
    000003bb: 	setbe	%r9b
    000003bf: 	orl	%r9d, %r8d
    000003c2: 	andl	%eax, %r8d
    000003c5: 	leaq	0x40(%r13), %rax
    000003c9: 	cmpq	%rax, %rbx
    000003cc: 	setae	%al
    000003cf: 	cmpq	%r13, %r11
    000003d2: 	setbe	%r9b
    000003d6: 	orl	%r9d, %eax
    000003d9: 	andl	%r8d, %eax
    000003dc: 	leaq	0x40(%r10), %r8
    000003e0: 	cmpq	%r8, %rbx
    000003e3: 	setae	%r8b
    000003e7: 	cmpq	%r10, %r11
    000003ea: 	setbe	%r9b
    000003ee: 	orl	%r9d, %r8d
    000003f1: 	testb	%r8b, %al
    000003f4: 	je	.Ltmp465 # Offset: 1012
    000003fa: 	movq	-0x10(%rsp), %r9
    000003ff: 	leaq	0x40(%r9), %rax
    00000403: 	cmpq	%rax, %rbx
    00000406: 	setae	%r8b
    0000040a: 	cmpq	%r9, %r11
    0000040d: 	setbe	%al
    00000410: 	orb	%r8b, %al
    00000413: 	je	.Ltmp465 # Offset: 1043
    00000419: 	movd	%ecx, %xmm4
    0000041d: 	movq	%r12, %xmm13
    00000422: 	movq	%rbp, %r8
    00000425: 	movq	%r9, %r11
    00000428: 	pshufd	$0x0, %xmm4, %xmm7
    0000042d: 	movd	%edi, %xmm4
    00000431: 	movq	%rbx, %rax
    00000434: 	movq	%r13, %r9
    00000437: 	pshufd	$0x0, %xmm4, %xmm6
    0000043c: 	movd	%edx, %xmm4
    00000440: 	xorl	%ebx, %ebx
    00000442: 	movq	0x50(%rsp), %rbp
    00000447: 	pshufd	$0x0, %xmm4, %xmm5
    0000044c: 	movd	%esi, %xmm4
    00000450: 	movdqa	%xmm7, %xmm11
    00000455: 	pshufd	$0x0, %xmm4, %xmm4
    0000045a: 	movdqa	%xmm6, %xmm10
    0000045f: 	movdqa	%xmm5, %xmm9
    00000464: 	movdqa	%xmm4, %xmm8
    00000469: 	movhps	-0x40(%rsp), %xmm13
    0000046f: 	psrlq	$0x20, %xmm11
    00000475: 	psrlq	$0x20, %xmm10
    0000047b: 	psrlq	$0x20, %xmm9
    00000481: 	psrlq	$0x20, %xmm8
    00000487: 	nopw	(%rax,%rax) # Size: 9
.Ltmp466:
    00000490: 	movdqu	0x10(%r8), %xmm0
    00000496: 	movdqu	0x10(%r8), %xmm2
    0000049c: 	addq	$0x1, %rbx
    000004a0: 	movdqa	%xmm13, %xmm12
    000004a5: 	movdqu	0x10(%r9), %xmm1
    000004ab: 	movdqu	0x20(%r9), %xmm3
    000004b1: 	addq	$0x40, %rax
    000004b5: 	addq	$0x40, %r8
    000004b9: 	pmuludq	%xmm7, %xmm2
    000004bd: 	addq	$0x40, %r9
    000004c1: 	addq	$0x40, %r10
    000004c5: 	addq	$0x40, %r11
    000004c9: 	psrlq	$0x20, %xmm0
    000004ce: 	pmuludq	%xmm6, %xmm1
    000004d2: 	movdqu	-0x10(%r8), %xmm14
    000004d8: 	movdqu	-0x40(%r9), %xmm15
    000004de: 	pmuludq	%xmm11, %xmm0
    000004e3: 	pmuludq	%xmm6, %xmm3
    000004e7: 	paddq	DATAat0x2d9b0(%rip), %xmm13
    000004f0: 	pmuludq	%xmm7, %xmm14
    000004f5: 	pmuludq	%xmm6, %xmm15
    000004fa: 	pshufd	$0x8, %xmm2, %xmm2
    000004ff: 	pshufd	$0x8, %xmm1, %xmm1
    00000504: 	pshufd	$0x8, %xmm0, %xmm0
    00000509: 	pshufd	$0x8, %xmm3, %xmm3
    0000050e: 	punpckldq	%xmm0, %xmm2
    00000512: 	movdqu	-0x30(%r9), %xmm0
    00000518: 	pshufd	$0x8, %xmm14, %xmm14
    0000051e: 	pshufd	$0x8, %xmm15, %xmm15
    00000524: 	psrlq	$0x20, %xmm0
    00000529: 	pmuludq	%xmm10, %xmm0
    0000052e: 	pshufd	$0x8, %xmm0, %xmm0
    00000533: 	punpckldq	%xmm0, %xmm1
    00000537: 	movdqu	-0x30(%r10), %xmm0
    0000053d: 	paddd	%xmm1, %xmm2
    00000541: 	movdqu	-0x30(%r10), %xmm1
    00000547: 	psrlq	$0x20, %xmm0
    0000054c: 	pmuludq	%xmm5, %xmm1
    00000550: 	pmuludq	%xmm9, %xmm0
    00000555: 	pshufd	$0x8, %xmm1, %xmm1
    0000055a: 	pshufd	$0x8, %xmm0, %xmm0
    0000055f: 	punpckldq	%xmm0, %xmm1
    00000563: 	movdqu	-0x30(%r11), %xmm0
    00000569: 	paddd	%xmm1, %xmm2
    0000056d: 	movdqu	-0x30(%r11), %xmm1
    00000573: 	psrlq	$0x20, %xmm0
    00000578: 	pmuludq	%xmm4, %xmm1
    0000057c: 	pmuludq	%xmm8, %xmm0
    00000581: 	pshufd	$0x8, %xmm1, %xmm1
    00000586: 	pshufd	$0x8, %xmm0, %xmm0
    0000058b: 	punpckldq	%xmm0, %xmm1
    0000058f: 	movdqu	-0x20(%r8), %xmm0
    00000595: 	paddd	%xmm1, %xmm2
    00000599: 	movdqu	-0x30(%rax), %xmm1
    0000059e: 	psrlq	$0x20, %xmm0
    000005a3: 	paddd	%xmm1, %xmm2
    000005a7: 	movdqu	-0x20(%r8), %xmm1
    000005ad: 	pmuludq	%xmm11, %xmm0
    000005b2: 	pmuludq	%xmm7, %xmm1
    000005b6: 	pshufd	$0x8, %xmm0, %xmm0
    000005bb: 	pshufd	$0x8, %xmm1, %xmm1
    000005c0: 	punpckldq	%xmm0, %xmm1
    000005c4: 	movdqu	-0x20(%r9), %xmm0
    000005ca: 	psrlq	$0x20, %xmm0
    000005cf: 	pmuludq	%xmm10, %xmm0
    000005d4: 	pshufd	$0x8, %xmm0, %xmm0
    000005d9: 	punpckldq	%xmm0, %xmm3
    000005dd: 	movdqu	-0x20(%r10), %xmm0
    000005e3: 	paddd	%xmm3, %xmm1
    000005e7: 	movdqu	-0x20(%r10), %xmm3
    000005ed: 	psrlq	$0x20, %xmm0
    000005f2: 	pmuludq	%xmm5, %xmm3
    000005f6: 	pmuludq	%xmm9, %xmm0
    000005fb: 	pshufd	$0x8, %xmm3, %xmm3
    00000600: 	pshufd	$0x8, %xmm0, %xmm0
    00000605: 	punpckldq	%xmm0, %xmm3
    00000609: 	movdqu	-0x20(%r11), %xmm0
    0000060f: 	paddd	%xmm3, %xmm1
    00000613: 	movdqu	-0x20(%r11), %xmm3
    00000619: 	psrlq	$0x20, %xmm0
    0000061e: 	pmuludq	%xmm4, %xmm3
    00000622: 	pmuludq	%xmm8, %xmm0
    00000627: 	pshufd	$0x8, %xmm3, %xmm3
    0000062c: 	pshufd	$0x8, %xmm0, %xmm0
    00000631: 	punpckldq	%xmm0, %xmm3
    00000635: 	movdqu	-0x10(%r8), %xmm0
    0000063b: 	paddd	%xmm3, %xmm1
    0000063f: 	movdqu	-0x20(%rax), %xmm3
    00000644: 	psrlq	$0x20, %xmm0
    00000649: 	pmuludq	%xmm11, %xmm0
    0000064e: 	paddd	%xmm3, %xmm1
    00000652: 	movdqu	-0x10(%r9), %xmm3
    00000658: 	psrlq	$0x20, %xmm3
    0000065d: 	pmuludq	%xmm10, %xmm3
    00000662: 	pshufd	$0x8, %xmm0, %xmm0
    00000667: 	punpckldq	%xmm0, %xmm14
    0000066c: 	movdqu	-0x10(%r9), %xmm0
    00000672: 	pmuludq	%xmm6, %xmm0
    00000676: 	pshufd	$0x8, %xmm3, %xmm3
    0000067b: 	pshufd	$0x8, %xmm0, %xmm0
    00000680: 	punpckldq	%xmm3, %xmm0
    00000684: 	movdqu	-0x10(%r10), %xmm3
    0000068a: 	paddd	%xmm14, %xmm0
    0000068f: 	movdqu	-0x10(%r10), %xmm14
    00000695: 	psrlq	$0x20, %xmm3
    0000069a: 	pmuludq	%xmm5, %xmm14
    0000069f: 	pmuludq	%xmm9, %xmm3
    000006a4: 	pshufd	$0x8, %xmm14, %xmm14
    000006aa: 	pshufd	$0x8, %xmm3, %xmm3
    000006af: 	punpckldq	%xmm3, %xmm14
    000006b4: 	movdqu	-0x10(%r11), %xmm3
    000006ba: 	paddd	%xmm14, %xmm0
    000006bf: 	movdqu	-0x10(%r11), %xmm14
    000006c5: 	psrlq	$0x20, %xmm3
    000006ca: 	pmuludq	%xmm4, %xmm14
    000006cf: 	pmuludq	%xmm8, %xmm3
    000006d4: 	pshufd	$0x8, %xmm14, %xmm14
    000006da: 	pshufd	$0x8, %xmm3, %xmm3
    000006df: 	punpckldq	%xmm3, %xmm14
    000006e4: 	movdqu	-0x10(%rax), %xmm3
    000006e9: 	paddd	%xmm14, %xmm0
    000006ee: 	movdqu	-0x40(%r8), %xmm14
    000006f4: 	paddd	%xmm3, %xmm0
    000006f8: 	movdqu	-0x40(%r8), %xmm3
    000006fe: 	pmuludq	%xmm7, %xmm14
    00000703: 	psrlq	$0x20, %xmm3
    00000708: 	pmuludq	%xmm11, %xmm3
    0000070d: 	pshufd	$0x8, %xmm14, %xmm14
    00000713: 	pshufd	$0x8, %xmm3, %xmm3
    00000718: 	punpckldq	%xmm3, %xmm14
    0000071d: 	movdqu	-0x40(%r9), %xmm3
    00000723: 	psrlq	$0x20, %xmm3
    00000728: 	pmuludq	%xmm10, %xmm3
    0000072d: 	pshufd	$0x8, %xmm3, %xmm3
    00000732: 	punpckldq	%xmm3, %xmm15
    00000737: 	paddd	%xmm15, %xmm14
    0000073c: 	movdqu	-0x40(%r10), %xmm15
    00000742: 	movdqu	-0x40(%r10), %xmm3
    00000748: 	paddq	DATAat0x2d9c0(%rip), %xmm12
    00000751: 	psrlq	$0x20, %xmm3
    00000756: 	pmuludq	%xmm5, %xmm15
    0000075b: 	pmuludq	%xmm9, %xmm3
    00000760: 	pshufd	$0x8, %xmm15, %xmm15
    00000766: 	pshufd	$0x8, %xmm3, %xmm3
    0000076b: 	punpckldq	%xmm3, %xmm15
    00000770: 	movdqu	-0x40(%r11), %xmm3
    00000776: 	paddd	%xmm15, %xmm14
    0000077b: 	movdqu	-0x40(%r11), %xmm15
    00000781: 	movups	%xmm2, -0x30(%rax)
    00000785: 	psrlq	$0x20, %xmm3
    0000078a: 	movups	%xmm1, -0x20(%rax)
    0000078e: 	pmuludq	%xmm4, %xmm15
    00000793: 	pmuludq	%xmm8, %xmm3
    00000798: 	movups	%xmm0, -0x10(%rax)
    0000079c: 	pshufd	$0x8, %xmm3, %xmm3
    000007a1: 	pshufd	$0x8, %xmm15, %xmm15
    000007a7: 	punpckldq	%xmm3, %xmm15
    000007ac: 	movdqa	%xmm14, %xmm3
    000007b1: 	paddd	%xmm15, %xmm3
    000007b6: 	movdqu	-0x40(%rax), %xmm15
    000007bc: 	paddd	%xmm15, %xmm3
    000007c1: 	movups	%xmm3, -0x40(%rax)
    000007c5: 	cmpq	%rbx, %rbp
    000007c8: 	ja	.Ltmp466 # Offset: 1992
    000007ce: 	movhlps	%xmm12, %xmm4
    000007d2: 	movq	%r15, -0x50(%rsp)
    000007d7: 	movq	%r15, %r13
    000007da: 	movq	0x40(%rsp), %r15
    000007df: 	movq	%xmm4, %rax
    000007e4: 	cmpq	%r15, 0x38(%rsp)
    000007e9: 	je	.Ltmp467 # Offset: 2025
    000007ef: 	movq	0x48(%rsp), %rbp
    000007f4: 	movq	-0x58(%rsp), %rax
    000007f9: 	movq	%r13, %r15
    000007fc: 	movq	0x58(%rsp), %r8
    00000801: 	addq	%rbp, %rax
    00000804: 	leaq	(%r14,%rax,4), %rbx
    00000808: 	movq	-0x78(%rsp), %rax
    0000080d: 	addq	%rbp, %rax
    00000810: 	leaq	(%r14,%rax,4), %r11
    00000814: 	movq	-0x70(%rsp), %rax
    00000819: 	addq	%rbp, %rax
    0000081c: 	leaq	(%r14,%rax,4), %r10
    00000820: 	movq	-0x68(%rsp), %rax
    00000825: 	addq	%rbp, %rax
    00000828: 	leaq	(%r14,%rax,4), %r9
    0000082c: 	movq	%rbp, %rax
    0000082f: 	nop # Size: 1
.Ltmp468:
    00000830: 	movl	(%rbx), %ebp
    00000832: 	movl	(%r11), %r12d
    00000835: 	imull	%ecx, %ebp
    00000838: 	imull	%edi, %r12d
    0000083c: 	addl	%r12d, %ebp
    0000083f: 	movl	(%r10), %r12d
    00000842: 	imull	%edx, %r12d
    00000846: 	addl	%r12d, %ebp
    00000849: 	movl	(%r9), %r12d
    0000084c: 	imull	%esi, %r12d
    00000850: 	addl	%r12d, %ebp
    00000853: 	addl	%ebp, (%r8)
    00000856: 	movl	0x4(%rbx), %ebp
    00000859: 	movl	0x4(%r11), %r12d
    0000085d: 	imull	%ecx, %ebp
    00000860: 	imull	%edi, %r12d
    00000864: 	addl	%r12d, %ebp
    00000867: 	movl	0x4(%r10), %r12d
    0000086b: 	imull	%edx, %r12d
    0000086f: 	addl	%r12d, %ebp
    00000872: 	movl	0x4(%r9), %r12d
    00000876: 	imull	%esi, %r12d
    0000087a: 	addl	%r12d, %ebp
    0000087d: 	addl	%ebp, 0x4(%r8)
    00000881: 	movl	0x8(%rbx), %ebp
    00000884: 	movl	0x8(%r11), %r12d
    00000888: 	imull	%ecx, %ebp
    0000088b: 	imull	%edi, %r12d
    0000088f: 	addl	%r12d, %ebp
    00000892: 	movl	0x8(%r10), %r12d
    00000896: 	imull	%edx, %r12d
    0000089a: 	addl	%r12d, %ebp
    0000089d: 	movl	0x8(%r9), %r12d
    000008a1: 	imull	%esi, %r12d
    000008a5: 	addl	%r12d, %ebp
    000008a8: 	addl	%ebp, 0x8(%r8)
    000008ac: 	movl	0xc(%rbx), %ebp
    000008af: 	movl	0xc(%r11), %r12d
    000008b3: 	imull	%ecx, %ebp
    000008b6: 	imull	%edi, %r12d
    000008ba: 	addl	%r12d, %ebp
    000008bd: 	movl	0xc(%r10), %r12d
    000008c1: 	imull	%edx, %r12d
    000008c5: 	addl	%r12d, %ebp
    000008c8: 	movl	0xc(%r9), %r12d
    000008cc: 	imull	%esi, %r12d
    000008d0: 	addl	%r12d, %ebp
    000008d3: 	addl	%ebp, 0xc(%r8)
    000008d7: 	addq	$0x4, %rax
    000008db: 	addq	$0x10, %r8
    000008df: 	addq	$0x10, %rbx
    000008e3: 	addq	$0x10, %r11
    000008e7: 	addq	$0x10, %r10
    000008eb: 	addq	$0x10, %r9
    000008ef: 	cmpq	%rax, %r15
    000008f2: 	ja	.Ltmp468 # Offset: 2290
.Ltmp484:
    000008f8: 	movq	%r15, -0x50(%rsp)
.Ltmp467:
    000008fd: 	cmpq	%rax, -0x48(%rsp)
    00000902: 	jbe	.Ltmp469 # Offset: 2306
    00000908: 	movq	-0x18(%rsp), %rbp
    0000090d: 	movq	-0x58(%rsp), %r10
    00000912: 	movq	-0x70(%rsp), %r9
    00000917: 	movq	-0x78(%rsp), %r11
    0000091c: 	movq	(%rsp), %r13
    00000920: 	leaq	(%rax,%rbp), %r8
    00000924: 	leaq	0x1(%rax,%r10), %rbx
    00000929: 	movq	-0x48(%rsp), %r12
    0000092e: 	leaq	0x1(%rax,%r9), %r10
    00000933: 	leaq	0x1(%rax,%r11), %r11
    00000938: 	movq	-0x68(%rsp), %r9
    0000093d: 	shlq	$0x2, %rbx
    00000941: 	leaq	(%r13,%r8,4), %r8
    00000946: 	shlq	$0x2, %r11
    0000094a: 	subq	%rax, %r12
    0000094d: 	shlq	$0x2, %r10
    00000951: 	leaq	0x1(%rax,%r9), %rbp
    00000956: 	leaq	(%r14,%r11), %r13
    0000095a: 	movq	%r8, %r9
    0000095d: 	movq	%r8, %r15
    00000960: 	subq	%r13, %r9
    00000963: 	shlq	$0x2, %rbp
    00000967: 	cmpq	$0x8, %r9
    0000096b: 	leaq	(%r14,%rbx), %r9
    0000096f: 	seta	%r13b
    00000973: 	subq	%r9, %r15
    00000976: 	cmpq	$0x8, %r15
    0000097a: 	movq	%r8, %r15
    0000097d: 	seta	%r9b
    00000981: 	andl	%r13d, %r9d
    00000984: 	leaq	-0x1(%r12), %r13
    00000989: 	cmpq	$0x2, %r13
    0000098d: 	seta	%r13b
    00000991: 	andl	%r13d, %r9d
    00000994: 	leaq	(%r14,%r10), %r13
    00000998: 	subq	%r13, %r15
    0000099b: 	cmpq	$0x8, %r15
    0000099f: 	seta	%r13b
    000009a3: 	testb	%r13b, %r9b
    000009a6: 	je	.Ltmp470 # Offset: 2470
    000009ac: 	leaq	(%r14,%rbp), %r13
    000009b0: 	movq	%r8, %r15
    000009b3: 	subq	%r13, %r15
    000009b6: 	cmpq	$0x8, %r15
    000009ba: 	jbe	.Ltmp470 # Offset: 2490
    000009c0: 	movdqu	-0x4(%r14,%r11), %xmm1
    000009c7: 	movd	%edi, %xmm4
    000009cb: 	pshufd	$0x0, %xmm4, %xmm2
    000009d0: 	movd	%ecx, %xmm4
    000009d4: 	movdqa	%xmm1, %xmm0
    000009d8: 	psrlq	$0x20, %xmm1
    000009dd: 	pshufd	$0x0, %xmm4, %xmm3
    000009e2: 	pmuludq	%xmm2, %xmm0
    000009e6: 	psrlq	$0x20, %xmm2
    000009eb: 	movd	%edx, %xmm4
    000009ef: 	pmuludq	%xmm2, %xmm1
    000009f3: 	pshufd	$0x8, %xmm0, %xmm0
    000009f8: 	pshufd	$0x8, %xmm1, %xmm1
    000009fd: 	punpckldq	%xmm1, %xmm0
    00000a01: 	movdqu	-0x4(%r14,%rbx), %xmm1
    00000a08: 	movdqa	%xmm1, %xmm2
    00000a0c: 	psrlq	$0x20, %xmm1
    00000a11: 	pmuludq	%xmm3, %xmm2
    00000a15: 	psrlq	$0x20, %xmm3
    00000a1a: 	pmuludq	%xmm3, %xmm1
    00000a1e: 	pshufd	$0x0, %xmm4, %xmm3
    00000a23: 	movd	%esi, %xmm4
    00000a27: 	pshufd	$0x8, %xmm2, %xmm2
    00000a2c: 	pshufd	$0x8, %xmm1, %xmm1
    00000a31: 	punpckldq	%xmm1, %xmm2
    00000a35: 	movdqu	-0x4(%r14,%r10), %xmm1
    00000a3c: 	paddd	%xmm2, %xmm0
    00000a40: 	movdqa	%xmm1, %xmm2
    00000a44: 	psrlq	$0x20, %xmm1
    00000a49: 	pmuludq	%xmm3, %xmm2
    00000a4d: 	psrlq	$0x20, %xmm3
    00000a52: 	pmuludq	%xmm3, %xmm1
    00000a56: 	pshufd	$0x0, %xmm4, %xmm3
    00000a5b: 	movdqu	(%r8), %xmm4
    00000a60: 	pshufd	$0x8, %xmm2, %xmm2
    00000a65: 	pshufd	$0x8, %xmm1, %xmm1
    00000a6a: 	punpckldq	%xmm1, %xmm2
    00000a6e: 	movdqu	-0x4(%r14,%rbp), %xmm1
    00000a75: 	paddd	%xmm2, %xmm0
    00000a79: 	movdqa	%xmm1, %xmm2
    00000a7d: 	psrlq	$0x20, %xmm1
    00000a82: 	pmuludq	%xmm3, %xmm2
    00000a86: 	psrlq	$0x20, %xmm3
    00000a8b: 	pmuludq	%xmm3, %xmm1
    00000a8f: 	pshufd	$0x8, %xmm2, %xmm2
    00000a94: 	pshufd	$0x8, %xmm1, %xmm1
    00000a99: 	punpckldq	%xmm1, %xmm2
    00000a9d: 	paddd	%xmm2, %xmm0
    00000aa1: 	paddd	%xmm4, %xmm0
    00000aa5: 	movups	%xmm0, (%r8)
    00000aa9: 	movq	%r12, %r8
    00000aac: 	andq	$-0x4, %r8
    00000ab0: 	addq	%r8, %rax
    00000ab3: 	cmpq	%r12, %r8
    00000ab6: 	je	.Ltmp469 # Offset: 2742
    00000abc: 	movq	-0x58(%rsp), %r12
    00000ac1: 	movq	-0x78(%rsp), %r11
    00000ac6: 	movq	-0x18(%rsp), %rbp
    00000acb: 	movq	(%rsp), %r13
    00000acf: 	leaq	(%rax,%r12), %r8
    00000ad3: 	leaq	(%rax,%r11), %r10
    00000ad7: 	movq	-0x48(%rsp), %rbx
    00000adc: 	movl	(%r14,%r8,4), %r15d
    00000ae0: 	leaq	(%rax,%rbp), %r9
    00000ae4: 	imull	%ecx, %r15d
    00000ae8: 	movl	%r15d, %r8d
    00000aeb: 	movl	(%r14,%r10,4), %r15d
    00000aef: 	movq	-0x70(%rsp), %r10
    00000af4: 	imull	%edi, %r15d
    00000af8: 	addq	%rax, %r10
    00000afb: 	addl	%r15d, %r8d
    00000afe: 	movl	(%r14,%r10,4), %r15d
    00000b02: 	movq	-0x68(%rsp), %r10
    00000b07: 	imull	%edx, %r15d
    00000b0b: 	addq	%rax, %r10
    00000b0e: 	addl	%r15d, %r8d
    00000b11: 	movl	(%r14,%r10,4), %r15d
    00000b15: 	imull	%esi, %r15d
    00000b19: 	addl	%r15d, %r8d
    00000b1c: 	addl	%r8d, (%r13,%r9,4)
    00000b21: 	leaq	0x1(%rax), %r8
    00000b25: 	cmpq	%r8, %rbx
    00000b28: 	jbe	.Ltmp469 # Offset: 2856
    00000b2e: 	leaq	(%r8,%r12), %r9
    00000b32: 	leaq	(%r8,%rbp), %r11
    00000b36: 	addq	$0x2, %rax
    00000b3a: 	movl	(%r14,%r9,4), %r15d
    00000b3e: 	movq	-0x78(%rsp), %r9
    00000b43: 	imull	%ecx, %r15d
    00000b47: 	addq	%r8, %r9
    00000b4a: 	movl	%r15d, %r10d
    00000b4d: 	movl	(%r14,%r9,4), %r15d
    00000b51: 	movq	-0x70(%rsp), %r9
    00000b56: 	imull	%edi, %r15d
    00000b5a: 	addq	%r8, %r9
    00000b5d: 	addl	%r15d, %r10d
    00000b60: 	movl	(%r14,%r9,4), %r15d
    00000b64: 	imull	%edx, %r15d
    00000b68: 	movl	%r15d, %r9d
    00000b6b: 	addl	%r10d, %r9d
    00000b6e: 	movq	-0x68(%rsp), %r10
    00000b73: 	addq	%r10, %r8
    00000b76: 	movl	(%r14,%r8,4), %r15d
    00000b7a: 	imull	%esi, %r15d
    00000b7e: 	addl	%r15d, %r9d
    00000b81: 	addl	%r9d, (%r13,%r11,4)
    00000b86: 	cmpq	%rax, %rbx
    00000b89: 	jbe	.Ltmp469 # Offset: 2953
    00000b8b: 	movq	-0x78(%rsp), %r9
    00000b90: 	leaq	(%rax,%rbp), %r8
    00000b94: 	addq	%rax, %r9
    00000b97: 	imull	(%r14,%r9,4), %edi
    00000b9c: 	leaq	(%rax,%r12), %r9
    00000ba0: 	imull	(%r14,%r9,4), %ecx
    00000ba5: 	movq	-0x70(%rsp), %r9
    00000baa: 	addl	%edi, %ecx
    00000bac: 	leaq	(%rax,%r9), %rdi
    00000bb0: 	addq	%r10, %rax
    00000bb3: 	imull	(%r14,%rdi,4), %edx
    00000bb8: 	imull	(%r14,%rax,4), %esi
    00000bbd: 	addl	%ecx, %edx
    00000bbf: 	addl	%esi, %edx
    00000bc1: 	addl	%edx, (%r13,%r8,4)
.Ltmp469:
    00000bc6: 	movq	0x10(%rsp), %rax
    00000bcb: 	addq	$0x4, -0x60(%rsp)
    00000bd1: 	addq	%rax, -0x58(%rsp)
    00000bd6: 	movq	-0x60(%rsp), %rsi
    00000bdb: 	addq	%rax, -0x78(%rsp)
    00000be0: 	addq	%rax, -0x70(%rsp)
    00000be5: 	addq	%rax, -0x68(%rsp)
    00000bea: 	movq	0x30(%rsp), %rax
    00000bef: 	addq	$0x10, -0x20(%rsp)
    00000bf5: 	addq	%rax, -0x38(%rsp)
    00000bfa: 	addq	%rax, -0x30(%rsp)
    00000bff: 	addq	%rax, -0x28(%rsp)
    00000c04: 	addq	%rax, -0x10(%rsp)
    00000c09: 	cmpq	0x28(%rsp), %rsi
    00000c0e: 	jb	.Ltmp471 # Offset: 3086
    00000c14: 	movq	-0x50(%rsp), %r15
.Ltmp487:
    00000c19: 	cmpq	%rsi, 0xa8(%rsp)
    00000c21: 	jbe	.Ltmp472 # Offset: 3105
    00000c27: 	movq	-0x18(%rsp), %rbx
    00000c2c: 	movq	0xf8(%rsp), %rcx
    00000c34: 	movq	%rsi, %rax
    00000c37: 	movq	(%rsp), %rdx
    00000c3b: 	movq	0x50(%rsp), %r8
    00000c40: 	addq	%rbx, %rax
    00000c43: 	leaq	(%rcx,%rax,4), %rdi
    00000c47: 	movq	0x60(%rsp), %rcx
    00000c4c: 	movq	-0x8(%rsp), %rax
    00000c51: 	imulq	%rsi, %rcx
    00000c55: 	addq	%rcx, %rax
    00000c58: 	leaq	(%r14,%rax,4), %rsi
    00000c5c: 	movq	0x48(%rsp), %rax
    00000c61: 	addq	%rbx, %rax
    00000c64: 	shlq	$0x2, %rax
    00000c68: 	leaq	0x8(%rdx,%rax), %r13
    00000c6d: 	leaq	(%rdx,%rax), %rbp
    00000c71: 	leaq	0x4(%rdx,%rax), %r12
    00000c76: 	leaq	0xc(%rdx,%rax), %rax
    00000c7b: 	movq	%rbp, -0x70(%rsp)
    00000c80: 	movq	%rax, -0x78(%rsp)
    00000c85: 	movq	0x78(%rsp), %rax
    00000c8a: 	movq	%r12, -0x68(%rsp)
    00000c8f: 	addq	%rbx, %rax
    00000c92: 	movq	%r13, -0x60(%rsp)
    00000c97: 	movq	-0x48(%rsp), %r13
    00000c9c: 	shlq	$0x2, %rax
    00000ca0: 	leaq	(%rdx,%rax), %r10
    00000ca4: 	movq	%r10, -0x58(%rsp)
    00000ca9: 	leaq	0x4(%rdx,%rax), %r10
    00000cae: 	movq	%r10, -0x50(%rsp)
    00000cb3: 	leaq	0x8(%rdx,%rax), %r10
    00000cb8: 	leaq	0xc(%rdx,%rax), %rax
    00000cbd: 	movq	%rax, -0x30(%rsp)
    00000cc2: 	movq	0x80(%rsp), %rax
    00000cca: 	movq	%r10, -0x38(%rsp)
    00000ccf: 	movq	%rdx, %r10
    00000cd2: 	addq	%rbx, %rax
    00000cd5: 	shlq	$0x2, %rax
    00000cd9: 	leaq	(%rdx,%rax), %rdx
    00000cdd: 	movq	%rdx, 0x58(%rsp)
    00000ce2: 	leaq	0x4(%r10,%rax), %rdx
    00000ce7: 	movq	%rdx, -0x10(%rsp)
    00000cec: 	leaq	0x8(%r10,%rax), %rdx
    00000cf1: 	leaq	0xc(%r10,%rax), %rax
    00000cf6: 	movq	%rdx, -0x20(%rsp)
    00000cfb: 	movq	%rax, -0x28(%rsp)
.Ltmp479:
    00000d00: 	movq	-0x8(%rsp), %rbx
    00000d05: 	movl	(%rdi), %edx
    00000d07: 	cmpq	%rbx, %r15
    00000d0a: 	jbe	.Ltmp473 # Offset: 3338
    00000d10: 	cmpq	$0x2, -0x40(%rsp)
    00000d16: 	seta	%r9b
    00000d1a: 	cmpq	$-0x4, %r15
    00000d1e: 	setbe	%al
    00000d21: 	andl	%r9d, %eax
    00000d24: 	cmpq	$0xb, 0x20(%rsp)
    00000d2a: 	seta	%r9b
    00000d2e: 	testb	%r9b, %al
    00000d31: 	je	.Ltmp474 # Offset: 3377
    00000d37: 	movq	0x8(%rsp), %r11
    00000d3c: 	leaq	0x40(%rsi), %rax
    00000d40: 	cmpq	%r11, %rax
    00000d43: 	setbe	%r9b
    00000d47: 	cmpq	0x18(%rsp), %rsi
    00000d4c: 	setae	%al
    00000d4f: 	orb	%r9b, %al
    00000d52: 	je	.Ltmp474 # Offset: 3410
    00000d58: 	movd	%edx, %xmm4
    00000d5c: 	movq	%r11, %rax
    00000d5f: 	movq	%rsi, %r9
    00000d62: 	xorl	%r11d, %r11d
    00000d65: 	pshufd	$0x0, %xmm4, %xmm1
    00000d6a: 	movq	%rbx, %xmm4
    00000d6f: 	movdqa	%xmm1, %xmm2
    00000d73: 	movhps	-0x40(%rsp), %xmm4
    00000d78: 	psrlq	$0x20, %xmm2
    00000d7d: 	nopl	(%rax) # Size: 3
.Ltmp475:
    00000d80: 	movdqu	0x10(%r9), %xmm0
    00000d86: 	movdqu	0x10(%r9), %xmm6
    00000d8c: 	addq	$0x1, %r11
    00000d90: 	movdqa	%xmm4, %xmm3
    00000d94: 	movdqu	0x20(%r9), %xmm7
    00000d9a: 	movdqu	0x10(%rax), %xmm5
    00000d9f: 	addq	$0x40, %r9
    00000da3: 	addq	$0x40, %rax
    00000da7: 	psrlq	$0x20, %xmm0
    00000dac: 	pmuludq	%xmm1, %xmm6
    00000db0: 	movdqu	-0x40(%r9), %xmm8
    00000db6: 	paddq	DATAat0x2d9b0(%rip), %xmm4
    00000dbe: 	pmuludq	%xmm2, %xmm0
    00000dc2: 	pmuludq	%xmm1, %xmm7
    00000dc6: 	paddq	DATAat0x2d9c0(%rip), %xmm3
    00000dce: 	pmuludq	%xmm1, %xmm8
    00000dd3: 	pshufd	$0x8, %xmm6, %xmm6
    00000dd8: 	pshufd	$0x8, %xmm0, %xmm0
    00000ddd: 	pshufd	$0x8, %xmm7, %xmm7
    00000de2: 	punpckldq	%xmm0, %xmm6
    00000de6: 	movdqu	-0x20(%r9), %xmm0
    00000dec: 	pshufd	$0x8, %xmm8, %xmm8
    00000df2: 	paddd	%xmm5, %xmm6
    00000df6: 	movdqu	-0x20(%rax), %xmm5
    00000dfb: 	psrlq	$0x20, %xmm0
    00000e00: 	pmuludq	%xmm2, %xmm0
    00000e04: 	pshufd	$0x8, %xmm0, %xmm0
    00000e09: 	punpckldq	%xmm0, %xmm7
    00000e0d: 	movdqu	-0x10(%r9), %xmm0
    00000e13: 	paddd	%xmm5, %xmm7
    00000e17: 	movdqu	-0x10(%r9), %xmm5
    00000e1d: 	psrlq	$0x20, %xmm0
    00000e22: 	pmuludq	%xmm1, %xmm5
    00000e26: 	pmuludq	%xmm2, %xmm0
    00000e2a: 	pshufd	$0x8, %xmm5, %xmm5
    00000e2f: 	pshufd	$0x8, %xmm0, %xmm0
    00000e34: 	punpckldq	%xmm0, %xmm5
    00000e38: 	movdqu	-0x10(%rax), %xmm0
    00000e3d: 	paddd	%xmm0, %xmm5
    00000e41: 	movdqu	-0x40(%r9), %xmm0
    00000e47: 	movups	%xmm6, -0x30(%rax)
    00000e4b: 	movups	%xmm7, -0x20(%rax)
    00000e4f: 	psrlq	$0x20, %xmm0
    00000e54: 	movups	%xmm5, -0x10(%rax)
    00000e58: 	pmuludq	%xmm2, %xmm0
    00000e5c: 	pshufd	$0x8, %xmm0, %xmm0
    00000e61: 	punpckldq	%xmm0, %xmm8
    00000e66: 	movdqu	-0x40(%rax), %xmm0
    00000e6b: 	paddd	%xmm8, %xmm0
    00000e70: 	movups	%xmm0, -0x40(%rax)
    00000e74: 	cmpq	%r8, %r11
    00000e77: 	jb	.Ltmp475 # Offset: 3703
    00000e7d: 	movhlps	%xmm3, %xmm4
    00000e80: 	movq	0x40(%rsp), %r11
    00000e85: 	movq	%xmm4, %rax
    00000e8a: 	cmpq	%r11, 0x38(%rsp)
    00000e8f: 	je	.Ltmp476 # Offset: 3727
    00000e95: 	movq	0x48(%rsp), %rax
    00000e9a: 	movq	-0x70(%rsp), %rbx
    00000e9f: 	addq	%rcx, %rax
    00000ea2: 	movl	(%r14,%rax,4), %r9d
    00000ea6: 	imull	%edx, %r9d
    00000eaa: 	addl	%r9d, (%rbx)
    00000ead: 	movq	-0x68(%rsp), %rbx
    00000eb2: 	movl	0x4(%r14,%rax,4), %r9d
    00000eb7: 	imull	%edx, %r9d
    00000ebb: 	addl	%r9d, (%rbx)
    00000ebe: 	movq	-0x60(%rsp), %rbx
    00000ec3: 	movl	0x8(%r14,%rax,4), %r9d
    00000ec8: 	imull	%edx, %r9d
    00000ecc: 	addl	%r9d, (%rbx)
    00000ecf: 	movl	0xc(%r14,%rax,4), %ebx
    00000ed4: 	imull	%edx, %ebx
    00000ed7: 	movl	%ebx, %eax
    00000ed9: 	movq	-0x78(%rsp), %rbx
    00000ede: 	addl	%eax, (%rbx)
    00000ee0: 	movq	0x78(%rsp), %rax
    00000ee5: 	cmpq	%r15, %rax
    00000ee8: 	jae	.Ltmp476 # Offset: 3816
    00000eee: 	addq	%rcx, %rax
    00000ef1: 	movq	-0x58(%rsp), %rbx
    00000ef6: 	movl	(%r14,%rax,4), %r9d
    00000efa: 	imull	%edx, %r9d
    00000efe: 	addl	%r9d, (%rbx)
    00000f01: 	movq	-0x50(%rsp), %rbx
    00000f06: 	movl	0x4(%r14,%rax,4), %r9d
    00000f0b: 	imull	%edx, %r9d
    00000f0f: 	addl	%r9d, (%rbx)
    00000f12: 	movq	-0x38(%rsp), %rbx
    00000f17: 	movl	0x8(%r14,%rax,4), %r9d
    00000f1c: 	imull	%edx, %r9d
    00000f20: 	addl	%r9d, (%rbx)
    00000f23: 	movl	0xc(%r14,%rax,4), %ebx
    00000f28: 	imull	%edx, %ebx
    00000f2b: 	movl	%ebx, %eax
    00000f2d: 	movq	-0x30(%rsp), %rbx
    00000f32: 	addl	%eax, (%rbx)
    00000f34: 	movq	0x80(%rsp), %rax
    00000f3c: 	cmpq	%r15, %rax
    00000f3f: 	jae	.Ltmp476 # Offset: 3903
    00000f41: 	addq	%rcx, %rax
    00000f44: 	movq	0x58(%rsp), %rbx
    00000f49: 	movl	(%r14,%rax,4), %r9d
    00000f4d: 	imull	%edx, %r9d
    00000f51: 	addl	%r9d, (%rbx)
    00000f54: 	movq	-0x10(%rsp), %rbx
    00000f59: 	movl	0x4(%r14,%rax,4), %r9d
    00000f5e: 	imull	%edx, %r9d
    00000f62: 	addl	%r9d, (%rbx)
    00000f65: 	movq	-0x20(%rsp), %rbx
    00000f6a: 	movl	0x8(%r14,%rax,4), %r9d
    00000f6f: 	imull	%edx, %r9d
    00000f73: 	addl	%r9d, (%rbx)
    00000f76: 	movl	0xc(%r14,%rax,4), %ebx
    00000f7b: 	imull	%edx, %ebx
    00000f7e: 	movl	%ebx, %eax
    00000f80: 	movq	-0x28(%rsp), %rbx
    00000f85: 	addl	%eax, (%rbx)
    00000f87: 	movq	0x98(%rsp), %rax
.Ltmp476:
    00000f8f: 	cmpq	%rax, %r13
    00000f92: 	jbe	.Ltmp477 # Offset: 3986
    00000f98: 	movq	-0x18(%rsp), %r11
    00000f9d: 	movq	%r13, %rbx
    00000fa0: 	subq	%rax, %rbx
    00000fa3: 	leaq	(%rax,%r11), %r9
    00000fa7: 	leaq	(%r10,%r9,4), %r11
    00000fab: 	leaq	0x1(%rax,%rcx), %r9
    00000fb0: 	shlq	$0x2, %r9
    00000fb4: 	movq	%r11, %rbp
    00000fb7: 	leaq	(%r14,%r9), %r12
    00000fbb: 	subq	%r12, %rbp
    00000fbe: 	cmpq	$0x8, %rbp
    00000fc2: 	jbe	.Ltmp478 # Offset: 4034
    00000fc8: 	leaq	-0x1(%rbx), %rbp
    00000fcc: 	cmpq	$0x2, %rbp
    00000fd0: 	jbe	.Ltmp478 # Offset: 4048
    00000fd6: 	movdqu	-0x4(%r14,%r9), %xmm0
    00000fdd: 	movd	%edx, %xmm4
    00000fe1: 	movq	%rbx, %r9
    00000fe4: 	pshufd	$0x0, %xmm4, %xmm2
    00000fe9: 	andq	$-0x4, %r9
    00000fed: 	movdqa	%xmm0, %xmm1
    00000ff1: 	psrlq	$0x20, %xmm0
    00000ff6: 	addq	%r9, %rax
    00000ff9: 	pmuludq	%xmm2, %xmm1
    00000ffd: 	psrlq	$0x20, %xmm2
    00001002: 	pmuludq	%xmm2, %xmm0
    00001006: 	pshufd	$0x8, %xmm1, %xmm1
    0000100b: 	pshufd	$0x8, %xmm0, %xmm0
    00001010: 	punpckldq	%xmm0, %xmm1
    00001014: 	movdqu	(%r11), %xmm0
    00001019: 	paddd	%xmm1, %xmm0
    0000101d: 	movups	%xmm0, (%r11)
    00001021: 	cmpq	%rbx, %r9
    00001024: 	je	.Ltmp477 # Offset: 4132
    00001026: 	movq	-0x18(%rsp), %rbx
    0000102b: 	leaq	(%rax,%rcx), %r11
    0000102f: 	movl	(%r14,%r11,4), %ebp
    00001033: 	leaq	(%rax,%rbx), %r9
    00001037: 	imull	%edx, %ebp
    0000103a: 	addl	%ebp, (%r10,%r9,4)
    0000103e: 	leaq	0x1(%rax), %r9
    00001042: 	cmpq	%r9, %r13
    00001045: 	jbe	.Ltmp477 # Offset: 4165
    00001047: 	leaq	(%r9,%rbx), %r11
    0000104b: 	addq	%rcx, %r9
    0000104e: 	addq	$0x2, %rax
    00001052: 	movl	(%r14,%r9,4), %ebp
    00001056: 	imull	%edx, %ebp
    00001059: 	addl	%ebp, (%r10,%r11,4)
    0000105d: 	cmpq	%rax, %r13
    00001060: 	jbe	.Ltmp477 # Offset: 4192
.Ltmp486:
    00001062: 	leaq	(%rax,%rbx), %r9
    00001066: 	addq	%rcx, %rax
    00001069: 	imull	(%r14,%rax,4), %edx
    0000106e: 	addl	%edx, (%r10,%r9,4)
.Ltmp477:
    00001072: 	addq	$0x4, %rdi
    00001076: 	addq	0x60(%rsp), %rcx
    0000107b: 	addq	0x10(%rsp), %rsi
    00001080: 	cmpq	0x68(%rsp), %rdi
    00001085: 	jne	.Ltmp479 # Offset: 4229
.Ltmp472:
    0000108b: 	movq	0x10(%rsp), %rsi
    00001090: 	addq	$0x1, 0x70(%rsp)
    00001096: 	movq	0x60(%rsp), %rcx
    0000109b: 	addq	%rsi, 0x68(%rsp)
    000010a0: 	addq	%rcx, -0x18(%rsp)
    000010a5: 	movq	0x70(%rsp), %rax
    000010aa: 	addq	%rsi, 0x8(%rsp)
    000010af: 	addq	%rsi, 0x18(%rsp)
    000010b4: 	cmpq	0xc0(%rsp), %rax
    000010bc: 	jne	.Ltmp480 # Offset: 4284
    000010c2: 	movq	0x108(%rsp), %rsi
    000010ca: 	addq	$0x384, -0x40(%rsp)
    000010d3: 	addq	$0xe10, 0x118(%rsp)
    000010df: 	cmpq	%rsi, %rcx
    000010e2: 	ja	.Ltmp481 # Offset: 4322
    000010e8: 	movq	%rcx, %rax
    000010eb: 	movq	0xb8(%rsp), %rsi
    000010f3: 	shlq	$0x6, %rax
    000010f7: 	subq	%rcx, %rax
    000010fa: 	leaq	(%rsi,%rax,2), %rax
    000010fe: 	movq	%rax, 0xa0(%rsp)
    00001106: 	movq	0x120(%rsp), %rax
    0000110e: 	addq	0x140(%rsp), %rax
    00001116: 	movq	%rax, 0x110(%rsp)
    0000111e: 	cmpq	%rcx, 0x100(%rsp)
    00001126: 	jb	.Ltmp482 # Offset: 4390
.Ltmp462:
    0000112c: 	addq	$0x150, %rsp
    00001133: 	popq	%rbx
    00001134: 	popq	%rbp
    00001135: 	popq	%r12
    00001137: 	popq	%r13
    00001139: 	popq	%r14
    0000113b: 	popq	%r15
    0000113d: 	retq # Offset: 4413
    0000113e: 	nop # Size: 2
.Ltmp465:
    00001140: 	movq	-0x10(%rsp), %rbx
    00001145: 	movq	-0x28(%rsp), %r11
    0000114a: 	movq	-0x30(%rsp), %r10
    0000114f: 	movq	-0x38(%rsp), %r9
    00001154: 	movq	0x8(%rsp), %r8
    00001159: 	movq	-0x8(%rsp), %rax
    0000115e: 	movq	-0x50(%rsp), %r15
    00001163: 	nopl	(%rax,%rax) # Size: 5
.Ltmp483:
    00001168: 	movl	(%r9), %ebp
    0000116b: 	movl	(%r10), %r12d
    0000116e: 	imull	%ecx, %ebp
    00001171: 	imull	%edi, %r12d
    00001175: 	addl	%r12d, %ebp
    00001178: 	movl	(%r11), %r12d
    0000117b: 	imull	%edx, %r12d
    0000117f: 	addl	%r12d, %ebp
    00001182: 	movl	(%rbx), %r12d
    00001185: 	imull	%esi, %r12d
    00001189: 	addl	%r12d, %ebp
    0000118c: 	addl	%ebp, (%r8)
    0000118f: 	movl	0x4(%r9), %ebp
    00001193: 	movl	0x4(%r10), %r12d
    00001197: 	imull	%ecx, %ebp
    0000119a: 	imull	%edi, %r12d
    0000119e: 	addl	%r12d, %ebp
    000011a1: 	movl	0x4(%r11), %r12d
    000011a5: 	imull	%edx, %r12d
    000011a9: 	addl	%r12d, %ebp
    000011ac: 	movl	0x4(%rbx), %r12d
    000011b0: 	imull	%esi, %r12d
    000011b4: 	addl	%r12d, %ebp
    000011b7: 	addl	%ebp, 0x4(%r8)
    000011bb: 	movl	0x8(%r9), %ebp
    000011bf: 	movl	0x8(%r10), %r12d
    000011c3: 	imull	%ecx, %ebp
    000011c6: 	imull	%edi, %r12d
    000011ca: 	addl	%r12d, %ebp
    000011cd: 	movl	0x8(%r11), %r12d
    000011d1: 	imull	%edx, %r12d
    000011d5: 	addl	%r12d, %ebp
    000011d8: 	movl	0x8(%rbx), %r12d
    000011dc: 	imull	%esi, %r12d
    000011e0: 	addl	%r12d, %ebp
    000011e3: 	addl	%ebp, 0x8(%r8)
    000011e7: 	movl	0xc(%r9), %ebp
    000011eb: 	movl	0xc(%r10), %r12d
    000011ef: 	imull	%ecx, %ebp
    000011f2: 	imull	%edi, %r12d
    000011f6: 	addl	%r12d, %ebp
    000011f9: 	movl	0xc(%r11), %r12d
    000011fd: 	imull	%edx, %r12d
    00001201: 	addl	%r12d, %ebp
    00001204: 	movl	0xc(%rbx), %r12d
    00001208: 	imull	%esi, %r12d
    0000120c: 	addl	%r12d, %ebp
    0000120f: 	addl	%ebp, 0xc(%r8)
    00001213: 	addq	$0x4, %rax
    00001217: 	addq	$0x10, %r8
    0000121b: 	addq	$0x10, %r9
    0000121f: 	addq	$0x10, %r10
    00001223: 	addq	$0x10, %r11
    00001227: 	addq	$0x10, %rbx
    0000122b: 	cmpq	%rax, %r15
    0000122e: 	ja	.Ltmp483 # Offset: 4654
    00001234: 	jmp	.Ltmp484 # Offset: 4660
    00001239: 	nopl	(%rax) # Size: 7
.Ltmp470:
    00001240: 	movl	-0x4(%r14,%rbx), %r9d
    00001245: 	movl	-0x4(%r14,%r11), %ebx
    0000124a: 	imull	%edi, %ebx
    0000124d: 	imull	%ecx, %r9d
    00001251: 	movl	%ebx, %r11d
    00001254: 	movq	-0x48(%rsp), %rbx
    00001259: 	addl	%r9d, %r11d
    0000125c: 	movl	-0x4(%r14,%r10), %r9d
    00001261: 	movl	-0x4(%r14,%rbp), %r10d
    00001266: 	imull	%edx, %r9d
    0000126a: 	imull	%esi, %r10d
    0000126e: 	addl	%r11d, %r9d
    00001271: 	addl	%r10d, %r9d
    00001274: 	addl	%r9d, (%r8)
    00001277: 	leaq	0x1(%rax), %r8
    0000127b: 	cmpq	%r8, %rbx
    0000127e: 	jbe	.Ltmp469 # Offset: 4734
    00001284: 	movq	-0x78(%rsp), %rbp
    00001289: 	movq	-0x58(%rsp), %r13
    0000128e: 	movq	-0x18(%rsp), %r15
    00001293: 	leaq	(%r8,%rbp), %r9
    00001297: 	movl	(%r14,%r9,4), %r10d
    0000129b: 	leaq	(%r8,%r13), %r9
    0000129f: 	leaq	(%r8,%r15), %r11
    000012a3: 	movl	(%r14,%r9,4), %r12d
    000012a7: 	imull	%edi, %r10d
    000012ab: 	imull	%ecx, %r12d
    000012af: 	addl	%r12d, %r10d
    000012b2: 	movq	-0x70(%rsp), %r12
    000012b7: 	movl	%r10d, 0x90(%rsp)
    000012bf: 	leaq	(%r8,%r12), %r9
    000012c3: 	addq	-0x68(%rsp), %r8
    000012c8: 	movl	(%r14,%r9,4), %r10d
    000012cc: 	movl	0x90(%rsp), %r9d
    000012d4: 	imull	%edx, %r10d
    000012d8: 	addl	%r10d, %r9d
    000012db: 	movl	(%r14,%r8,4), %r10d
    000012df: 	leaq	0x2(%rax), %r8
    000012e3: 	imull	%esi, %r10d
    000012e7: 	addl	%r10d, %r9d
    000012ea: 	movq	(%rsp), %r10
    000012ee: 	addl	%r9d, (%r10,%r11,4)
    000012f2: 	cmpq	%r8, %rbx
    000012f5: 	jbe	.Ltmp469 # Offset: 4853
    000012fb: 	leaq	(%r8,%r13), %r9
    000012ff: 	leaq	(%r8,%r15), %r11
    00001303: 	addq	$0x3, %rax
    00001307: 	movl	(%r14,%r9,4), %r10d
    0000130b: 	leaq	(%r8,%rbp), %r9
    0000130f: 	movq	%r11, 0x90(%rsp)
    00001317: 	movl	(%r14,%r9,4), %r11d
    0000131b: 	leaq	(%r8,%r12), %r9
    0000131f: 	addq	-0x68(%rsp), %r8
    00001324: 	imull	%ecx, %r10d
    00001328: 	imull	%edi, %r11d
    0000132c: 	addl	%r11d, %r10d
    0000132f: 	movl	(%r14,%r9,4), %r11d
    00001333: 	imull	%edx, %r11d
    00001337: 	movl	%r11d, %r9d
    0000133a: 	movl	(%r14,%r8,4), %r11d
    0000133e: 	addl	%r10d, %r9d
    00001341: 	movq	(%rsp), %r10
    00001345: 	imull	%esi, %r11d
    00001349: 	addl	%r11d, %r9d
    0000134c: 	movq	0x90(%rsp), %r11
    00001354: 	addl	%r9d, (%r10,%r11,4)
    00001358: 	cmpq	%rax, %rbx
    0000135b: 	jbe	.Ltmp469 # Offset: 4955
    00001361: 	leaq	(%rax,%rbp), %r9
    00001365: 	leaq	(%rax,%r15), %r8
    00001369: 	imull	(%r14,%r9,4), %edi
    0000136e: 	leaq	(%rax,%r13), %r9
    00001372: 	imull	(%r14,%r9,4), %ecx
    00001377: 	addl	%edi, %ecx
    00001379: 	leaq	(%rax,%r12), %rdi
    0000137d: 	addq	-0x68(%rsp), %rax
    00001382: 	imull	(%r14,%rdi,4), %edx
    00001387: 	imull	(%r14,%rax,4), %esi
    0000138c: 	addl	%ecx, %edx
    0000138e: 	addl	%esi, %edx
    00001390: 	addl	%edx, (%r10,%r8,4)
    00001394: 	jmp	.Ltmp469 # Offset: 5012
    00001399: 	nopl	(%rax) # Size: 7
.Ltmp464:
    000013a0: 	movq	%r12, %rax
    000013a3: 	jmp	.Ltmp467 # Offset: 5027
.Ltmp474:
    000013a8: 	movq	0x8(%rsp), %r9
    000013ad: 	movq	-0x8(%rsp), %rax
    000013b2: 	movq	%rsi, %r11
    000013b5: 	nopl	(%rax) # Size: 3
.Ltmp485:
    000013b8: 	movl	(%r11), %ebx
    000013bb: 	addq	$0x4, %rax
    000013bf: 	addq	$0x10, %r11
    000013c3: 	imull	%edx, %ebx
    000013c6: 	addl	%ebx, (%r9)
    000013c9: 	movl	-0xc(%r11), %ebx
    000013cd: 	imull	%edx, %ebx
    000013d0: 	addl	%ebx, 0x4(%r9)
    000013d4: 	movl	-0x8(%r11), %ebx
    000013d8: 	imull	%edx, %ebx
    000013db: 	addl	%ebx, 0x8(%r9)
    000013df: 	movl	-0x4(%r11), %ebx
    000013e3: 	imull	%edx, %ebx
    000013e6: 	addl	%ebx, 0xc(%r9)
    000013ea: 	addq	$0x10, %r9
    000013ee: 	cmpq	%rax, %r15
    000013f1: 	ja	.Ltmp485 # Offset: 5105
    000013f3: 	jmp	.Ltmp476 # Offset: 5107
.Ltmp478:
    000013f8: 	movl	-0x4(%r14,%r9), %ebx
    000013fd: 	leaq	0x1(%rax), %r9
    00001401: 	imull	%edx, %ebx
    00001404: 	addl	%ebx, (%r11)
    00001407: 	cmpq	%r9, %r13
    0000140a: 	jbe	.Ltmp477 # Offset: 5130
    00001410: 	movq	-0x18(%rsp), %rbx
    00001415: 	leaq	(%r9,%rbx), %r11
    00001419: 	addq	%rcx, %r9
    0000141c: 	movl	(%r14,%r9,4), %ebp
    00001420: 	leaq	0x2(%rax), %r9
    00001424: 	imull	%edx, %ebp
    00001427: 	addl	%ebp, (%r10,%r11,4)
    0000142b: 	cmpq	%r9, %r13
    0000142e: 	jbe	.Ltmp477 # Offset: 5166
    00001434: 	leaq	(%r9,%rbx), %r11
    00001438: 	addq	%rcx, %r9
    0000143b: 	addq	$0x3, %rax
    0000143f: 	movl	(%r14,%r9,4), %ebp
    00001443: 	imull	%edx, %ebp
    00001446: 	addl	%ebp, (%r10,%r11,4)
    0000144a: 	cmpq	%rax, %r13
    0000144d: 	ja	.Ltmp486 # Offset: 5197
    00001453: 	jmp	.Ltmp477 # Offset: 5203
.Ltmp473:
    00001458: 	movq	%rbx, %rax
    0000145b: 	jmp	.Ltmp476 # Offset: 5211
.Ltmp463:
    00001460: 	movq	0x88(%rsp), %rax
    00001468: 	movq	%rax, -0x60(%rsp)
    0000146d: 	movq	%rax, %rsi
    00001470: 	jmp	.Ltmp487 # Offset: 5232
DWARF CFI Instructions:
    <empty>
End of Function "_ZN28matmul_JKI_blocked_unrolled3IiEclEPKiS2_Pimm.isra.0/1(*2)"

Binary Function "_ZN28matmul_JKI_blocked_unrolled2IiEclEPKiS2_Pimm.isra.0/1(*2)" after disassembly {
  All names   : _ZN28matmul_JKI_blocked_unrolled2IiEclEPKiS2_Pimm.isra.0/1
                _ZN28matmul_JKI_blocked_unrolled2IiEclEPKiS2_Pimm.isra.0/matrix_multiply.cpp/1
  Number      : 61
  State       : disassembled
  Address     : 0x10bc0
  Size        : 0x946
  MaxSize     : 0x950
  Offset      : 0x10bc0
  Section     : .text
  Orc Section : .local.text._ZN28matmul_JKI_blocked_unrolled2IiEclEPKiS2_Pimm.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB060:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	subq	$0x130, %rsp
    00000011: 	movq	%rdi, 0xd0(%rsp)
    00000019: 	movq	%rdx, 0x78(%rsp)
    0000001e: 	movq	%rcx, 0x98(%rsp)
    00000026: 	movq	%r8, -0x30(%rsp)
    0000002b: 	testq	%r8, %r8
    0000002e: 	je	.Ltmp488 # Offset: 46
    00000034: 	testq	%rcx, %rcx
    00000037: 	je	.Ltmp488 # Offset: 55
    0000003d: 	leaq	(,%r8,4), %rdi
    00000045: 	movq	%r8, %rax
    00000048: 	movq	%rsi, 0xe8(%rsp)
    00000050: 	movq	%rsi, %r13
    00000053: 	movq	%rdi, -0x38(%rsp)
    00000058: 	movq	%r8, %rdi
    0000005b: 	shlq	$0x6, %rax
    0000005f: 	movq	%r8, %rcx
    00000062: 	shlq	$0x4, %rdi
    00000066: 	subq	%r8, %rax
    00000069: 	movq	$0x0, 0xd8(%rsp)
    00000075: 	movq	%rdi, -0x10(%rsp)
    0000007a: 	leaq	(%r8,%r8), %rdi
    0000007e: 	addq	%rax, %rax
    00000081: 	movq	%rdi, 0x110(%rsp)
    00000089: 	addq	%r8, %rdi
    0000008c: 	movq	%rdi, 0xc8(%rsp)
    00000094: 	imulq	$0x1f4, %r8, %rdi
    0000009b: 	movq	%rax, 0x120(%rsp)
    000000a3: 	movq	%rdi, 0x118(%rsp)
.Ltmp501:
    000000ab: 	movq	0xd8(%rsp), %rdi
    000000b3: 	movq	-0x30(%rsp), %rax
    000000b8: 	movq	$0x0, 0x80(%rsp)
    000000c4: 	movq	$0x0, 0xe0(%rsp)
    000000d0: 	movq	%rdi, 0x68(%rsp)
    000000d5: 	subq	$-0x80, %rdi
    000000d9: 	cmpq	%rax, %rdi
    000000dc: 	leaq	-0x200(,%rdi,4), %rdx
    000000e4: 	movq	%rdi, 0xd8(%rsp)
    000000ec: 	cmovbeq	%rdi, %rax
    000000f0: 	movq	0xe8(%rsp), %rdi
    000000f8: 	addq	0x110(%rsp), %rcx
    00000100: 	movq	%rcx, 0x90(%rsp)
    00000108: 	leaq	-0x3(%rax), %rsi
    0000010c: 	movq	%rax, 0x88(%rsp)
    00000114: 	shlq	$0x2, %rax
    00000118: 	movq	%rsi, -0x18(%rsp)
    0000011d: 	movq	0xd0(%rsp), %rsi
    00000125: 	subq	%rax, %rdx
    00000128: 	movq	%rdx, 0xa0(%rsp)
    00000130: 	addq	%rax, %rsi
    00000133: 	movq	-0x38(%rsp), %rax
    00000138: 	movq	%rsi, 0xf8(%rsp)
    00000140: 	addq	%rax, %rdi
    00000143: 	movq	%rdi, %rsi
    00000146: 	movq	%rdi, 0x100(%rsp)
    0000014e: 	movq	%rax, %rdi
    00000151: 	addq	%rsi, %rax
    00000154: 	addq	%rax, %rdi
    00000157: 	movq	%rax, 0x108(%rsp)
    0000015f: 	movq	%rdi, 0xf0(%rsp)
.Ltmp500:
    00000167: 	movq	0xe0(%rsp), %rdi
    0000016f: 	movq	-0x30(%rsp), %rcx
    00000174: 	movq	%r13, %rbp
    00000177: 	movq	$0x0, 0x58(%rsp)
    00000180: 	movq	$0x0, 0x48(%rsp)
    00000189: 	movq	%rdi, %rsi
    0000018c: 	movq	%rdi, -0x28(%rsp)
    00000191: 	addq	$0x384, %rdi
    00000198: 	cmpq	%rdi, %rcx
    0000019b: 	movq	%rdi, 0xe0(%rsp)
    000001a3: 	movq	%rsi, %rax
    000001a6: 	cmovbeq	%rcx, %rdi
    000001aa: 	movq	0x78(%rsp), %rcx
    000001af: 	shlq	$0x2, %rax
    000001b3: 	movq	%rcx, %r14
    000001b6: 	movq	%rcx, 0x60(%rsp)
    000001bb: 	leaq	(%rcx,%rdi,4), %rcx
    000001bf: 	subq	0x80(%rsp), %r14
    000001c7: 	movq	%rcx, 0x70(%rsp)
    000001cc: 	movq	0xe8(%rsp), %rcx
    000001d4: 	movq	%rdi, -0x40(%rsp)
    000001d9: 	addq	%rax, %rcx
    000001dc: 	movq	%rcx, 0xa8(%rsp)
    000001e4: 	movq	0x100(%rsp), %rcx
    000001ec: 	addq	%rax, %rcx
    000001ef: 	movq	%rcx, 0xb0(%rsp)
    000001f7: 	movq	0x108(%rsp), %rcx
    000001ff: 	addq	%rax, %rcx
    00000202: 	addq	0xf0(%rsp), %rax
    0000020a: 	movq	%rcx, 0xb8(%rsp)
    00000212: 	movq	%rdi, %rcx
    00000215: 	subq	%rsi, %rcx
    00000218: 	movq	%rax, 0xc0(%rsp)
    00000220: 	movq	%rcx, %rax
    00000223: 	movq	%rcx, %rdi
    00000226: 	movq	%rcx, -0x8(%rsp)
    0000022b: 	shrq	$0x2, %rax
    0000022f: 	andq	$-0x4, %rdi
    00000233: 	shlq	$0x4, %rax
    00000237: 	movq	%rdi, (%rsp)
    0000023b: 	movq	%rax, %r12
    0000023e: 	movq	%rdi, %rax
    00000241: 	addq	%rsi, %rax
    00000244: 	movq	%r12, 0x18(%rsp)
    00000249: 	leaq	0x1(%rax), %rdi
    0000024d: 	movq	%rax, 0x8(%rsp)
    00000252: 	addq	$0x2, %rax
    00000256: 	movq	%rax, 0x10(%rsp)
    0000025b: 	movq	0xf8(%rsp), %rax
    00000263: 	movq	%rdi, 0x20(%rsp)
    00000268: 	movq	%rax, 0x38(%rsp)
    0000026d: 	leaq	-0x1(%rcx), %rax
    00000271: 	movq	%rax, -0x20(%rsp)
    00000276: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp499:
    00000280: 	movq	0x68(%rsp), %rdi
    00000285: 	cmpq	%rdi, -0x18(%rsp)
    0000028a: 	jbe	.Ltmp489 # Offset: 650
    00000290: 	movq	0x90(%rsp), %rax
    00000298: 	subq	0xc8(%rsp), %rax
    000002a0: 	movq	0x58(%rsp), %rdi
    000002a5: 	movq	%rax, -0x68(%rsp)
    000002aa: 	movq	0x8(%rsp), %rax
    000002af: 	movq	0x78(%rsp), %rcx
    000002b4: 	movq	0xc0(%rsp), %r10
    000002bc: 	movq	0xb0(%rsp), %rsi
    000002c4: 	addq	%rdi, %rax
    000002c7: 	movq	0xa0(%rsp), %r11
    000002cf: 	addq	0x38(%rsp), %r11
    000002d4: 	leaq	(%rcx,%rax,4), %rax
    000002d8: 	movq	%rax, 0x28(%rsp)
    000002dd: 	movq	0x20(%rsp), %rax
    000002e2: 	addq	%rdi, %rax
    000002e5: 	leaq	(%rcx,%rax,4), %rax
    000002e9: 	movq	%rax, 0x30(%rsp)
    000002ee: 	movq	0x10(%rsp), %rax
    000002f3: 	addq	%rdi, %rax
    000002f6: 	movq	0xb8(%rsp), %rdi
    000002fe: 	leaq	(%rcx,%rax,4), %rax
    00000302: 	movq	0xa8(%rsp), %rcx
    0000030a: 	movq	%rax, 0x40(%rsp)
    0000030f: 	movq	0x68(%rsp), %rax
    00000314: 	movq	%rax, -0x58(%rsp)
    00000319: 	nopl	(%rax) # Size: 7
.Ltmp493:
    00000320: 	movl	(%r11), %r15d
    00000323: 	movl	0x8(%r11), %eax
    00000327: 	movl	0xc(%r11), %r13d
    0000032b: 	movl	0x4(%r11), %r8d
    0000032f: 	movl	%r15d, -0x50(%rsp)
    00000334: 	movq	-0x28(%rsp), %r9
    00000339: 	movl	%eax, -0x60(%rsp)
    0000033d: 	movl	%r13d, -0x48(%rsp)
    00000342: 	cmpq	%r9, -0x40(%rsp)
    00000347: 	jbe	.Ltmp490 # Offset: 839
    0000034d: 	movq	-0x30(%rsp), %rax
    00000352: 	movq	-0x68(%rsp), %rdx
    00000357: 	leaq	0x4(%rsi), %r9
    0000035b: 	leaq	0x4(%rcx), %rbx
    0000035f: 	addq	%rax, %rdx
    00000362: 	leaq	(%rax,%rdx), %r12
    00000366: 	addq	%r12, %rax
    00000369: 	movq	%rax, -0x70(%rsp)
    0000036e: 	movq	%r14, %rax
    00000371: 	subq	%r9, %rax
    00000374: 	cmpq	$0x8, %rax
    00000378: 	movq	%r14, %rax
    0000037b: 	seta	%r9b
    0000037f: 	subq	%rbx, %rax
    00000382: 	leaq	0x4(%rdi), %rbx
    00000386: 	cmpq	$0x8, %rax
    0000038a: 	seta	%al
    0000038d: 	andl	%r9d, %eax
    00000390: 	cmpq	$0x2, -0x20(%rsp)
    00000396: 	seta	%r9b
    0000039a: 	andl	%r9d, %eax
    0000039d: 	movq	%r14, %r9
    000003a0: 	subq	%rbx, %r9
    000003a3: 	cmpq	$0x8, %r9
    000003a7: 	seta	%r9b
    000003ab: 	testb	%r9b, %al
    000003ae: 	je	.Ltmp491 # Offset: 942
    000003b4: 	leaq	0x4(%r10), %r9
    000003b8: 	movq	%r14, %rax
    000003bb: 	subq	%r9, %rax
    000003be: 	cmpq	$0x8, %rax
    000003c2: 	jbe	.Ltmp491 # Offset: 962
    000003c8: 	movd	-0x60(%rsp), %xmm6
    000003ce: 	movd	%r15d, %xmm4
    000003d3: 	movd	%r13d, %xmm7
    000003d8: 	xorl	%eax, %eax
    000003da: 	pshufd	$0x0, %xmm4, %xmm5
    000003df: 	movd	%r8d, %xmm4
    000003e4: 	pshufd	$0x0, %xmm7, %xmm2
    000003e9: 	movq	-0x70(%rsp), %r13
    000003ee: 	pshufd	$0x0, %xmm6, %xmm3
    000003f3: 	pshufd	$0x0, %xmm4, %xmm4
    000003f8: 	movdqa	%xmm5, %xmm9
    000003fd: 	movq	0x18(%rsp), %r9
    00000402: 	movdqa	%xmm4, %xmm8
    00000407: 	movdqa	%xmm3, %xmm7
    0000040b: 	movdqa	%xmm2, %xmm6
    0000040f: 	psrlq	$0x20, %xmm9
    00000415: 	psrlq	$0x20, %xmm8
    0000041b: 	psrlq	$0x20, %xmm7
    00000420: 	psrlq	$0x20, %xmm6
    00000425: 	nopl	(%rax) # Size: 3
.Ltmp492:
    00000428: 	movdqu	(%rcx,%rax), %xmm1
    0000042d: 	movdqu	(%rcx,%rax), %xmm0
    00000432: 	movdqu	(%rsi,%rax), %xmm10
    00000438: 	psrlq	$0x20, %xmm1
    0000043d: 	pmuludq	%xmm5, %xmm0
    00000441: 	pmuludq	%xmm9, %xmm1
    00000446: 	pmuludq	%xmm4, %xmm10
    0000044b: 	pshufd	$0x8, %xmm0, %xmm0
    00000450: 	pshufd	$0x8, %xmm1, %xmm1
    00000455: 	pshufd	$0x8, %xmm10, %xmm10
    0000045b: 	punpckldq	%xmm1, %xmm0
    0000045f: 	movdqu	(%rsi,%rax), %xmm1
    00000464: 	psrlq	$0x20, %xmm1
    00000469: 	pmuludq	%xmm8, %xmm1
    0000046e: 	pshufd	$0x8, %xmm1, %xmm1
    00000473: 	punpckldq	%xmm1, %xmm10
    00000478: 	movdqu	(%rdi,%rax), %xmm1
    0000047d: 	paddd	%xmm10, %xmm0
    00000482: 	movdqu	(%rdi,%rax), %xmm10
    00000488: 	psrlq	$0x20, %xmm1
    0000048d: 	pmuludq	%xmm3, %xmm10
    00000492: 	pmuludq	%xmm7, %xmm1
    00000496: 	pshufd	$0x8, %xmm10, %xmm10
    0000049c: 	pshufd	$0x8, %xmm1, %xmm1
    000004a1: 	punpckldq	%xmm1, %xmm10
    000004a6: 	movdqu	(%r10,%rax), %xmm1
    000004ac: 	paddd	%xmm10, %xmm0
    000004b1: 	movdqu	(%r10,%rax), %xmm10
    000004b7: 	psrlq	$0x20, %xmm1
    000004bc: 	pmuludq	%xmm2, %xmm10
    000004c1: 	pmuludq	%xmm6, %xmm1
    000004c5: 	pshufd	$0x8, %xmm10, %xmm10
    000004cb: 	pshufd	$0x8, %xmm1, %xmm1
    000004d0: 	punpckldq	%xmm1, %xmm10
    000004d5: 	movdqu	(%r14,%rax), %xmm1
    000004db: 	paddd	%xmm10, %xmm0
    000004e0: 	paddd	%xmm1, %xmm0
    000004e4: 	movups	%xmm0, (%r14,%rax)
    000004e9: 	addq	$0x10, %rax
    000004ed: 	cmpq	%r9, %rax
    000004f0: 	jne	.Ltmp492 # Offset: 1264
    000004f6: 	movq	%r13, -0x70(%rsp)
    000004fb: 	movq	(%rsp), %rbx
    000004ff: 	cmpq	%rbx, -0x8(%rsp)
    00000504: 	je	.Ltmp490 # Offset: 1284
    0000050a: 	movq	0x8(%rsp), %r9
    0000050f: 	movq	-0x68(%rsp), %rax
    00000514: 	movl	-0x50(%rsp), %r15d
    00000519: 	addq	%r9, %rax
    0000051c: 	movl	(%rbp,%rax,4), %ebx
    00000520: 	imull	%r15d, %ebx
    00000524: 	movl	%ebx, %eax
    00000526: 	movq	%r9, %rbx
    00000529: 	leaq	(%r9,%rdx), %r9
    0000052d: 	movl	(%rbp,%r9,4), %r13d
    00000532: 	leaq	(%r12,%rbx), %r9
    00000536: 	imull	%r8d, %r13d
    0000053a: 	addl	%r13d, %eax
    0000053d: 	movq	%rbx, %r13
    00000540: 	movl	-0x60(%rsp), %ebx
    00000544: 	imull	(%rbp,%r9,4), %ebx
    0000054a: 	addl	%ebx, %eax
    0000054c: 	movq	%r13, %rbx
    0000054f: 	movq	-0x70(%rsp), %r13
    00000554: 	leaq	(%r13,%rbx), %r9
    00000559: 	movl	-0x48(%rsp), %ebx
    0000055d: 	movq	-0x40(%rsp), %r13
    00000562: 	imull	(%rbp,%r9,4), %ebx
    00000568: 	movq	0x28(%rsp), %r9
    0000056d: 	addl	%ebx, %eax
    0000056f: 	movq	0x20(%rsp), %rbx
    00000574: 	addl	%eax, (%r9)
    00000577: 	cmpq	%rbx, %r13
    0000057a: 	jbe	.Ltmp490 # Offset: 1402
    00000580: 	movq	-0x68(%rsp), %rax
    00000585: 	addq	%rbx, %rax
    00000588: 	movl	(%rbp,%rax,4), %r9d
    0000058d: 	imull	%r15d, %r9d
    00000591: 	movl	%r9d, %eax
    00000594: 	leaq	(%rbx,%rdx), %r9
    00000598: 	movl	(%rbp,%r9,4), %r15d
    0000059d: 	leaq	(%r12,%rbx), %r9
    000005a1: 	imull	%r8d, %r15d
    000005a5: 	addl	%r15d, %eax
    000005a8: 	movl	-0x60(%rsp), %r15d
    000005ad: 	imull	(%rbp,%r9,4), %r15d
    000005b3: 	addl	%r15d, %eax
    000005b6: 	movq	-0x70(%rsp), %r15
    000005bb: 	leaq	(%r15,%rbx), %r9
    000005bf: 	movl	-0x48(%rsp), %ebx
    000005c3: 	movl	(%rbp,%r9,4), %r15d
    000005c8: 	movq	0x30(%rsp), %r9
    000005cd: 	imull	%ebx, %r15d
    000005d1: 	addl	%r15d, %eax
    000005d4: 	addl	%eax, (%r9)
    000005d7: 	movq	0x10(%rsp), %r9
    000005dc: 	cmpq	%r9, %r13
    000005df: 	jbe	.Ltmp490 # Offset: 1503
    000005e1: 	movq	-0x68(%rsp), %rax
    000005e6: 	addq	%r9, %rdx
    000005e9: 	movl	-0x50(%rsp), %r15d
    000005ee: 	addq	%r9, %r12
    000005f1: 	imull	(%rbp,%rdx,4), %r8d
    000005f7: 	movq	-0x70(%rsp), %r13
    000005fc: 	addq	%r9, %rax
    000005ff: 	movl	-0x60(%rsp), %edx
    00000603: 	imull	(%rbp,%r12,4), %edx
    00000609: 	imull	(%rbp,%rax,4), %r15d
    0000060f: 	addq	%r9, %r13
    00000612: 	movl	%r15d, %eax
    00000615: 	addl	%r8d, %eax
    00000618: 	addl	%eax, %edx
    0000061a: 	movl	(%rbp,%r13,4), %eax
    0000061f: 	imull	%ebx, %eax
    00000622: 	addl	%eax, %edx
    00000624: 	movq	0x40(%rsp), %rax
    00000629: 	addl	%edx, (%rax)
.Ltmp490:
    0000062b: 	movq	-0x10(%rsp), %rax
    00000630: 	addq	$0x4, -0x58(%rsp)
    00000636: 	addq	$0x10, %r11
    0000063a: 	movq	-0x38(%rsp), %rdx
    0000063f: 	movq	-0x58(%rsp), %rbx
    00000644: 	addq	%rdx, -0x68(%rsp)
    00000649: 	addq	%rax, %rcx
    0000064c: 	addq	%rax, %rsi
    0000064f: 	addq	%rax, %rdi
    00000652: 	addq	%rax, %r10
    00000655: 	cmpq	-0x18(%rsp), %rbx
    0000065a: 	jb	.Ltmp493 # Offset: 1626
.Ltmp504:
    00000660: 	movq	-0x58(%rsp), %rsi
    00000665: 	cmpq	%rsi, 0x88(%rsp)
    0000066d: 	jbe	.Ltmp494 # Offset: 1645
    00000673: 	movq	-0x28(%rsp), %rbx
    00000678: 	cmpq	%rbx, -0x40(%rsp)
    0000067d: 	jbe	.Ltmp494 # Offset: 1661
    00000683: 	movq	0x58(%rsp), %rcx
    00000688: 	movq	%rsi, %rax
    0000068b: 	imulq	-0x30(%rsp), %rsi
    00000691: 	movq	0xd0(%rsp), %rdi
    00000699: 	movq	0x20(%rsp), %r15
    0000069e: 	addq	%rcx, %rax
    000006a1: 	movq	0x18(%rsp), %r9
    000006a6: 	movq	0x70(%rsp), %r13
    000006ab: 	leaq	(%rdi,%rax,4), %rdi
    000006af: 	leaq	(%rsi,%rbx), %rax
    000006b3: 	movq	%rsi, %r8
    000006b6: 	movq	0x78(%rsp), %rsi
    000006bb: 	leaq	(%rbp,%rax,4), %rdx
    000006c0: 	movq	0x8(%rsp), %rax
    000006c5: 	addq	%rcx, %rax
    000006c8: 	leaq	(%rsi,%rax,4), %r10
    000006cc: 	movq	%r15, %rax
    000006cf: 	addq	%rcx, %rax
    000006d2: 	leaq	(%rsi,%rax,4), %r11
    000006d6: 	movq	0x10(%rsp), %rax
    000006db: 	addq	%rcx, %rax
    000006de: 	leaq	(%rsi,%rax,4), %rbx
.Ltmp498:
    000006e2: 	leaq	0x4(%rdx), %rsi
    000006e6: 	movq	%r14, %rax
    000006e9: 	movl	(%rdi), %ecx
    000006eb: 	subq	%rsi, %rax
    000006ee: 	cmpq	$0x8, %rax
    000006f2: 	jbe	.Ltmp495 # Offset: 1778
    000006f8: 	cmpq	$0x2, -0x20(%rsp)
    000006fe: 	jbe	.Ltmp495 # Offset: 1790
    00000704: 	movd	%ecx, %xmm5
    00000708: 	xorl	%eax, %eax
    0000070a: 	pshufd	$0x0, %xmm5, %xmm2
    0000070f: 	movdqa	%xmm2, %xmm3
    00000713: 	psrlq	$0x20, %xmm3
    00000718: 	nopl	(%rax,%rax) # Size: 8
.Ltmp496:
    00000720: 	movdqu	(%rdx,%rax), %xmm0
    00000725: 	movdqu	(%rdx,%rax), %xmm1
    0000072a: 	psrlq	$0x20, %xmm0
    0000072f: 	pmuludq	%xmm2, %xmm1
    00000733: 	pmuludq	%xmm3, %xmm0
    00000737: 	pshufd	$0x8, %xmm1, %xmm1
    0000073c: 	pshufd	$0x8, %xmm0, %xmm0
    00000741: 	punpckldq	%xmm0, %xmm1
    00000745: 	movdqu	(%r14,%rax), %xmm0
    0000074b: 	paddd	%xmm1, %xmm0
    0000074f: 	movups	%xmm0, (%r14,%rax)
    00000754: 	addq	$0x10, %rax
    00000758: 	cmpq	%r9, %rax
    0000075b: 	jne	.Ltmp496 # Offset: 1883
    0000075d: 	movq	(%rsp), %rsi
    00000761: 	cmpq	%rsi, -0x8(%rsp)
    00000766: 	je	.Ltmp497 # Offset: 1894
    00000768: 	movq	0x8(%rsp), %rax
    0000076d: 	addq	%r8, %rax
    00000770: 	movl	(%rbp,%rax,4), %esi
    00000774: 	imull	%ecx, %esi
    00000777: 	addl	%esi, (%r10)
    0000077a: 	movq	-0x40(%rsp), %rsi
    0000077f: 	cmpq	%r15, %rsi
    00000782: 	jbe	.Ltmp497 # Offset: 1922
    00000784: 	leaq	(%r15,%r8), %rax
    00000788: 	movl	(%rbp,%rax,4), %r12d
    0000078d: 	movq	0x10(%rsp), %rax
    00000792: 	imull	%ecx, %r12d
    00000796: 	addl	%r12d, (%r11)
    00000799: 	cmpq	%rax, %rsi
    0000079c: 	jbe	.Ltmp497 # Offset: 1948
    0000079e: 	addq	%r8, %rax
    000007a1: 	imull	(%rbp,%rax,4), %ecx
    000007a6: 	addl	%ecx, (%rbx)
.Ltmp497:
    000007a8: 	addq	$0x4, %rdi
    000007ac: 	addq	-0x38(%rsp), %rdx
    000007b1: 	addq	-0x30(%rsp), %r8
    000007b6: 	cmpq	0x38(%rsp), %rdi
    000007bb: 	jne	.Ltmp498 # Offset: 1979
.Ltmp494:
    000007c1: 	movq	-0x38(%rsp), %rax
    000007c6: 	addq	$0x1, 0x48(%rsp)
    000007cc: 	movq	-0x30(%rsp), %rcx
    000007d1: 	addq	%rax, 0x38(%rsp)
    000007d6: 	addq	%rcx, 0x58(%rsp)
    000007db: 	movq	0x48(%rsp), %rdi
    000007e0: 	addq	%rax, %r14
    000007e3: 	addq	%rax, 0x70(%rsp)
    000007e8: 	addq	%rax, 0x60(%rsp)
    000007ed: 	cmpq	0x98(%rsp), %rdi
    000007f5: 	jne	.Ltmp499 # Offset: 2037
    000007fb: 	subq	$0xe10, 0x80(%rsp)
    00000807: 	movq	0xe0(%rsp), %rdi
    0000080f: 	movq	%rbp, %r13
    00000812: 	cmpq	%rdi, -0x30(%rsp)
    00000817: 	ja	.Ltmp500 # Offset: 2071
    0000081d: 	movq	0xf0(%rsp), %rax
    00000825: 	addq	0x118(%rsp), %rax
    0000082d: 	movq	%rcx, %rdi
    00000830: 	movq	%rax, 0xe8(%rsp)
    00000838: 	movq	0x90(%rsp), %rcx
    00000840: 	addq	0x120(%rsp), %rcx
    00000848: 	cmpq	%rdi, 0xd8(%rsp)
    00000850: 	jb	.Ltmp501 # Offset: 2128
.Ltmp488:
    00000856: 	addq	$0x130, %rsp
    0000085d: 	popq	%rbx
    0000085e: 	popq	%rbp
    0000085f: 	popq	%r12
    00000861: 	popq	%r13
    00000863: 	popq	%r14
    00000865: 	popq	%r15
    00000867: 	retq # Offset: 2151
    00000868: 	nopl	(%rax,%rax) # Size: 8
.Ltmp491:
    00000870: 	movq	0x80(%rsp), %rdx
    00000878: 	movq	-0x28(%rsp), %rax
    0000087d: 	movq	%r11, -0x70(%rsp)
    00000882: 	movq	%rsi, 0x50(%rsp)
    00000887: 	movl	-0x48(%rsp), %r11d
    0000088c: 	leaq	(%rsi,%rdx), %r13
    00000890: 	movq	%rcx, -0x48(%rsp)
    00000895: 	movl	-0x50(%rsp), %esi
    00000899: 	leaq	(%rcx,%rdx), %r12
    0000089d: 	movq	%rdi, -0x50(%rsp)
    000008a2: 	leaq	(%rdi,%rdx), %rbx
    000008a6: 	leaq	(%r10,%rdx), %r9
    000008aa: 	movl	-0x60(%rsp), %edi
    000008ae: 	movq	0x60(%rsp), %rcx
    000008b3: 	movq	%r10, -0x60(%rsp)
    000008b8: 	movq	-0x40(%rsp), %r10
    000008bd: 	nopl	(%rax) # Size: 3
.Ltmp502:
    000008c0: 	movl	(%r13,%rax,4), %edx
    000008c5: 	movl	(%r12,%rax,4), %r15d
    000008c9: 	imull	%r8d, %edx
    000008cd: 	imull	%esi, %r15d
    000008d1: 	addl	%edx, %r15d
    000008d4: 	movl	(%rbx,%rax,4), %edx
    000008d7: 	imull	%edi, %edx
    000008da: 	addl	%r15d, %edx
    000008dd: 	movl	(%r9,%rax,4), %r15d
    000008e1: 	imull	%r11d, %r15d
    000008e5: 	addl	%r15d, %edx
    000008e8: 	addl	%edx, (%rcx,%rax,4)
    000008eb: 	addq	$0x1, %rax
    000008ef: 	cmpq	%rax, %r10
    000008f2: 	jne	.Ltmp502 # Offset: 2290
    000008f4: 	movq	-0x70(%rsp), %r11
    000008f9: 	movq	-0x48(%rsp), %rcx
    000008fe: 	movq	0x50(%rsp), %rsi
    00000903: 	movq	-0x50(%rsp), %rdi
    00000908: 	movq	-0x60(%rsp), %r10
    0000090d: 	jmp	.Ltmp490 # Offset: 2317
.Ltmp495:
    00000912: 	movq	%rdx, %rsi
    00000915: 	movq	%r14, %rax
    00000918: 	nopl	(%rax,%rax) # Size: 8
.Ltmp503:
    00000920: 	movl	(%rsi), %r12d
    00000923: 	addq	$0x4, %rsi
    00000927: 	imull	%ecx, %r12d
    0000092b: 	addl	%r12d, (%rax)
    0000092e: 	addq	$0x4, %rax
    00000932: 	cmpq	%r13, %rax
    00000935: 	jne	.Ltmp503 # Offset: 2357
    00000937: 	jmp	.Ltmp497 # Offset: 2359
.Ltmp489:
    0000093c: 	movq	%rdi, -0x58(%rsp)
    00000941: 	jmp	.Ltmp504 # Offset: 2369
DWARF CFI Instructions:
    <empty>
End of Function "_ZN28matmul_JKI_blocked_unrolled2IiEclEPKiS2_Pimm.isra.0/1(*2)"

Binary Function "_ZN28matmul_IJK_blocked_unrolled3IiEclEPKiS2_Pimm.isra.0/1(*2)" after disassembly {
  All names   : _ZN28matmul_IJK_blocked_unrolled3IiEclEPKiS2_Pimm.isra.0/1
                _ZN28matmul_IJK_blocked_unrolled3IiEclEPKiS2_Pimm.isra.0/matrix_multiply.cpp/1
  Number      : 62
  State       : disassembled
  Address     : 0x11510
  Size        : 0x1182
  MaxSize     : 0x1190
  Offset      : 0x11510
  Section     : .text
  Orc Section : .local.text._ZN28matmul_IJK_blocked_unrolled3IiEclEPKiS2_Pimm.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB061:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	subq	$0x200, %rsp
    00000011: 	movq	%rdi, 0x78(%rsp)
    00000016: 	movq	%rsi, 0x20(%rsp)
    0000001b: 	movq	%rdx, 0x1d8(%rsp)
    00000023: 	movq	%rcx, 0x190(%rsp)
    0000002b: 	movq	%r8, -0x28(%rsp)
    00000030: 	testq	%rcx, %rcx
    00000033: 	je	.Ltmp505 # Offset: 51
    00000039: 	movq	%r8, %rax
    0000003c: 	testq	%r8, %r8
    0000003f: 	je	.Ltmp505 # Offset: 63
    00000045: 	movq	%r8, %rcx
    00000048: 	leaq	(,%r8,4), %rdx
    00000050: 	shlq	$0x7, %rax
    00000054: 	movq	%r8, %rbx
    00000057: 	shlq	$0x9, %rcx
    0000005b: 	subq	%r8, %rax
    0000005e: 	movq	%rdx, 0x150(%rsp)
    00000066: 	addq	%rdi, %rdx
    00000069: 	movq	%rcx, 0x1c0(%rsp)
    00000071: 	shlq	$0x2, %rax
    00000075: 	leaq	(,%r8,8), %rcx
    0000007d: 	shlq	$0x4, %rbx
    00000081: 	addq	%rcx, %rsi
    00000084: 	movq	%rbx, %rbp
    00000087: 	movq	%rcx, 0x130(%rsp)
    0000008f: 	leaq	(%r8,%r8), %rcx
    00000093: 	movq	%rcx, %rdi
    00000096: 	movq	%rcx, 0x70(%rsp)
    0000009b: 	addq	%r8, %rcx
    0000009e: 	movq	%rdx, 0x1d0(%rsp)
    000000a6: 	movq	%rcx, %rdx
    000000a9: 	movq	%rcx, 0x118(%rsp)
    000000b1: 	movq	%r8, %rcx
    000000b4: 	shlq	$0x6, %rcx
    000000b8: 	movq	%rsi, 0x198(%rsp)
    000000c0: 	movq	%rcx, 0xc0(%rsp)
    000000c8: 	movq	%rdx, %rcx
    000000cb: 	movq	%r8, %rdx
    000000ce: 	shlq	$0x4, %rcx
    000000d2: 	movq	%rax, 0x1f0(%rsp)
    000000da: 	movq	%rcx, 0xe0(%rsp)
    000000e2: 	movq	%rdi, %rcx
    000000e5: 	movq	$0x0, 0x120(%rsp)
    000000f1: 	negq	%rcx
    000000f4: 	movq	%rcx, -0x18(%rsp)
    000000f9: 	movq	$0x0, 0x180(%rsp)
.Ltmp522:
    00000105: 	movq	0x180(%rsp), %rax
    0000010d: 	movq	0x190(%rsp), %rcx
    00000115: 	movq	%rbp, %r13
    00000118: 	movq	$0x4, 0xb8(%rsp)
    00000124: 	movq	0x120(%rsp), %rdi
    0000012c: 	movq	0x130(%rsp), %rbx
    00000134: 	movq	$0x0, 0x188(%rsp)
    00000140: 	movq	%rax, 0x128(%rsp)
    00000148: 	subq	$-0x80, %rax
    0000014c: 	cmpq	%rcx, %rax
    0000014f: 	movq	%rax, 0x180(%rsp)
    00000157: 	cmovbeq	%rax, %rcx
    0000015b: 	leaq	-0x3(%rcx), %rax
    0000015f: 	movq	%rcx, 0x108(%rsp)
    00000167: 	movq	%rax, 0x90(%rsp)
    0000016f: 	movq	0x20(%rsp), %rax
    00000174: 	movq	%rax, 0x88(%rsp)
    0000017c: 	movq	0x150(%rsp), %rax
    00000184: 	movq	%rax, %rcx
    00000187: 	addq	%rbx, %rax
    0000018a: 	addq	%rdi, %rcx
    0000018d: 	movq	%rax, 0x148(%rsp)
    00000195: 	movq	%rdi, %rax
    00000198: 	movq	%rcx, 0x138(%rsp)
    000001a0: 	movq	0x70(%rsp), %rcx
    000001a5: 	addq	%rdx, %rcx
    000001a8: 	movq	0x1d0(%rsp), %rdx
    000001b0: 	movq	%rcx, 0x1c8(%rsp)
    000001b8: 	subq	0x118(%rsp), %rcx
    000001c0: 	addq	%rdx, %rdi
    000001c3: 	movq	%rcx, 0x178(%rsp)
    000001cb: 	movq	%rdi, 0x1b0(%rsp)
    000001d3: 	movq	%rbx, %rdi
    000001d6: 	addq	%rdx, %rbx
    000001d9: 	movq	%rbx, 0x1b8(%rsp)
    000001e1: 	movq	0x198(%rsp), %rbx
    000001e9: 	movq	%rbx, 0xa0(%rsp)
    000001f1: 	movq	0x78(%rsp), %rbx
    000001f6: 	addq	%rbx, %rax
    000001f9: 	movq	%rax, 0x1e0(%rsp)
    00000201: 	leaq	(%rbx,%rdi), %rax
    00000205: 	movq	%rax, 0x1e8(%rsp)
    0000020d: 	movq	-0x28(%rsp), %rax
    00000212: 	negq	%rax
    00000215: 	movq	%rax, 0x100(%rsp)
.Ltmp521:
    0000021d: 	movq	0x188(%rsp), %r14
    00000225: 	movq	0x1d8(%rsp), %rcx
    0000022d: 	movq	$0x0, 0x18(%rsp)
    00000236: 	movq	-0x28(%rsp), %rdi
    0000023b: 	movq	0x88(%rsp), %r8
    00000243: 	movq	%r14, %rax
    00000246: 	movq	%r14, 0x10(%rsp)
    0000024b: 	movq	0xa0(%rsp), %r11
    00000253: 	subq	$-0x80, %r14
    00000257: 	movq	%rcx, 0xf0(%rsp)
    0000025f: 	cmpq	%rdi, %r14
    00000262: 	movq	%rdi, %rbx
    00000265: 	movq	0x150(%rsp), %rcx
    0000026d: 	cmovbeq	%r14, %rbx
    00000271: 	movq	%r14, 0x188(%rsp)
    00000279: 	movq	%rax, %r14
    0000027c: 	addq	%rcx, %r8
    0000027f: 	addq	%rcx, %r11
    00000282: 	leaq	(,%rax,4), %rcx
    0000028a: 	movq	0x1e0(%rsp), %rax
    00000292: 	leaq	-0x3(%rbx), %r9
    00000296: 	movq	%rbx, 0x80(%rsp)
    0000029e: 	movq	%r9, -0x20(%rsp)
    000002a3: 	addq	%rcx, %rax
    000002a6: 	movq	%r8, 0x1a0(%rsp)
    000002ae: 	movq	%rax, 0x158(%rsp)
    000002b6: 	movq	0x1b0(%rsp), %rax
    000002be: 	movq	%r11, 0x1a8(%rsp)
    000002c6: 	addq	%rcx, %rax
    000002c9: 	movq	%r11, 0xb0(%rsp)
    000002d1: 	movq	%rax, 0x160(%rsp)
    000002d9: 	movq	0x1e8(%rsp), %rax
    000002e1: 	movq	%r8, 0xa8(%rsp)
    000002e9: 	addq	%rcx, %rax
    000002ec: 	movq	%rax, 0x168(%rsp)
    000002f4: 	movq	0x1b8(%rsp), %rax
    000002fc: 	addq	%rcx, %rax
    000002ff: 	movq	%rax, 0x170(%rsp)
    00000307: 	movq	%rbx, %rax
    0000030a: 	subq	%r14, %rax
    0000030d: 	cmpq	$0x2, 0xb8(%rsp)
    00000316: 	seta	%dl
    00000319: 	cmpq	$-0x4, %r9
    0000031d: 	leaq	-0x4(%rax), %rsi
    00000321: 	setbe	%al
    00000324: 	andl	%edx, %eax
    00000326: 	cmpq	$0xf, %rsi
    0000032a: 	seta	%dl
    0000032d: 	andl	%edx, %eax
    0000032f: 	movb	%al, 0x9f(%rsp)
    00000336: 	movq	%rsi, %rax
    00000339: 	shrq	$0x2, %rax
    0000033d: 	addq	$0x1, %rax
    00000341: 	movq	%rax, %rdx
    00000344: 	movq	%rax, 0xd8(%rsp)
    0000034c: 	andq	$-0x4, %rax
    00000350: 	movq	%rax, 0xc8(%rsp)
    00000358: 	leaq	(%r14,%rax,4), %rax
    0000035c: 	shrq	$0x2, %rdx
    00000360: 	movq	%rax, 0xf8(%rsp)
    00000368: 	addq	$0x2, %rax
    0000036c: 	imulq	%rdi, %rax
    00000370: 	movq	%rdx, 0xd0(%rsp)
    00000378: 	movq	%rax, 0x140(%rsp)
    00000380: 	movq	%rbx, %rax
    00000383: 	negq	%rax
    00000386: 	leaq	(%rcx,%rax,4), %rax
    0000038a: 	movq	%rax, 0x110(%rsp)
    00000392: 	nopw	(%rax,%rax) # Size: 6
.Ltmp520:
    00000398: 	movq	0x128(%rsp), %rdi
    000003a0: 	movq	0x90(%rsp), %rax
    000003a8: 	cmpq	%rax, %rdi
    000003ab: 	jae	.Ltmp506 # Offset: 939
    000003b1: 	movq	0x178(%rsp), %rax
    000003b9: 	movq	0x120(%rsp), %rcx
    000003c1: 	movq	%rdi, -0x10(%rsp)
    000003c6: 	movq	%r13, %rbx
    000003c9: 	movq	%rax, 0x8(%rsp)
    000003ce: 	movq	0xf0(%rsp), %rax
    000003d6: 	addq	%rax, %rcx
    000003d9: 	movq	%rcx, 0x48(%rsp)
    000003de: 	movq	0x138(%rsp), %rcx
    000003e6: 	addq	%rax, %rcx
    000003e9: 	movq	%rcx, 0x40(%rsp)
    000003ee: 	movq	0x130(%rsp), %rcx
    000003f6: 	addq	%rax, %rcx
    000003f9: 	addq	0x148(%rsp), %rax
    00000401: 	movq	%rcx, 0x38(%rsp)
    00000406: 	movq	0x20(%rsp), %rcx
    0000040b: 	movq	%rax, 0x30(%rsp)
    00000410: 	movq	0x18(%rsp), %rax
    00000415: 	addq	0x140(%rsp), %rax
    0000041d: 	leaq	(%rcx,%rax,4), %rax
    00000421: 	movq	%rax, 0xe8(%rsp)
    00000429: 	movq	0x170(%rsp), %rax
    00000431: 	movq	%rax, 0x50(%rsp)
    00000436: 	movq	0x168(%rsp), %rax
    0000043e: 	movq	%rax, 0x58(%rsp)
    00000443: 	movq	0x160(%rsp), %rax
    0000044b: 	movq	%rax, 0x60(%rsp)
    00000450: 	movq	0x158(%rsp), %rax
    00000458: 	movq	%rax, 0x68(%rsp)
    0000045d: 	nopl	(%rax) # Size: 3
.Ltmp513:
    00000460: 	movq	-0x28(%rsp), %rcx
    00000465: 	movq	0x8(%rsp), %rdi
    0000046a: 	movq	%rcx, %rax
    0000046d: 	addq	%rcx, %rdi
    00000470: 	addq	%rdi, %rax
    00000473: 	movq	%rdi, 0x28(%rsp)
    00000478: 	addq	%rax, %rcx
    0000047b: 	movq	%rax, (%rsp)
    0000047f: 	movq	%rcx, -0x8(%rsp)
    00000484: 	movq	0x10(%rsp), %rcx
    00000489: 	cmpq	%rcx, -0x20(%rsp)
    0000048e: 	jbe	.Ltmp507 # Offset: 1166
    00000494: 	cmpb	$0x0, 0x9f(%rsp)
    0000049c: 	je	.Ltmp508 # Offset: 1180
    000004a2: 	pxor	%xmm3, %xmm3
    000004a6: 	movq	%rcx, %xmm12
    000004ab: 	movq	0x88(%rsp), %r10
    000004b3: 	movq	0xa8(%rsp), %r9
    000004bb: 	movq	0xa0(%rsp), %r8
    000004c3: 	movq	0xb0(%rsp), %rdi
    000004cb: 	xorl	%r11d, %r11d
    000004ce: 	movhps	0xb8(%rsp), %xmm12
    000004d7: 	movq	0x68(%rsp), %rsi
    000004dc: 	movq	0x60(%rsp), %rcx
    000004e1: 	movaps	%xmm3, -0x78(%rsp)
    000004e6: 	movq	0x58(%rsp), %rdx
    000004eb: 	movq	0x50(%rsp), %rax
    000004f0: 	movaps	%xmm3, -0x68(%rsp)
    000004f5: 	movq	0xc0(%rsp), %rbp
    000004fd: 	movq	0xd0(%rsp), %r13
    00000505: 	movaps	%xmm3, -0x58(%rsp)
    0000050a: 	movq	0xe0(%rsp), %r12
    00000512: 	movaps	%xmm3, -0x48(%rsp)
    00000517: 	nopw	(%rax,%rax) # Size: 9
.Ltmp509:
    00000520: 	movd	(%r10,%r12), %xmm2
    00000526: 	movd	(%r10,%rbx), %xmm3
    0000052c: 	addq	$0x1, %r11
    00000530: 	movaps	%xmm12, -0x38(%rsp)
    00000536: 	movd	(%r10,%rbx,2), %xmm1
    0000053c: 	movd	(%r10), %xmm0
    00000541: 	addq	$0x40, %rax
    00000545: 	addq	$0x40, %rdx
    00000549: 	movd	(%rdi,%rbx,2), %xmm4
    0000054e: 	addq	$0x40, %rcx
    00000552: 	addq	$0x40, %rsi
    00000556: 	addq	%rbp, %r10
    00000559: 	punpckldq	%xmm2, %xmm1
    0000055d: 	punpckldq	%xmm3, %xmm0
    00000561: 	movd	(%r9,%r12), %xmm2
    00000567: 	movd	(%r9), %xmm3
    0000056c: 	punpcklqdq	%xmm1, %xmm0
    00000570: 	movd	(%r9,%rbx,2), %xmm1
    00000576: 	movd	(%r8,%rbx), %xmm7
    0000057c: 	movdqu	-0x20(%rsi), %xmm8
    00000582: 	movdqa	%xmm0, %xmm10
    00000587: 	paddq	DATAat0x2d9b0(%rip), %xmm12
    00000590: 	punpckldq	%xmm2, %xmm1
    00000594: 	movd	(%r9,%rbx), %xmm2
    0000059a: 	psrlq	$0x20, %xmm10
    000005a0: 	addq	%rbp, %r9
    000005a3: 	movdqa	%xmm8, %xmm13
    000005a8: 	punpckldq	%xmm2, %xmm3
    000005ac: 	movd	(%r8,%r12), %xmm2
    000005b2: 	punpcklqdq	%xmm1, %xmm3
    000005b6: 	movd	(%r8,%rbx,2), %xmm1
    000005bc: 	movdqa	%xmm3, %xmm11
    000005c1: 	punpckldq	%xmm2, %xmm1
    000005c5: 	movd	(%r8), %xmm2
    000005ca: 	psrlq	$0x20, %xmm11
    000005d0: 	addq	%rbp, %r8
    000005d3: 	punpckldq	%xmm7, %xmm2
    000005d7: 	movd	(%rdi,%rbx), %xmm7
    000005dc: 	punpcklqdq	%xmm1, %xmm2
    000005e0: 	movd	(%rdi,%r12), %xmm1
    000005e6: 	punpckldq	%xmm1, %xmm4
    000005ea: 	movd	(%rdi), %xmm1
    000005ee: 	addq	%rbp, %rdi
    000005f1: 	punpckldq	%xmm7, %xmm1
    000005f5: 	movdqu	-0x30(%rsi), %xmm7
    000005fa: 	punpcklqdq	%xmm4, %xmm1
    000005fe: 	movdqu	-0x40(%rsi), %xmm4
    00000603: 	movdqa	%xmm4, %xmm5
    00000607: 	shufps	$0xdd, %xmm7, %xmm4
    0000060b: 	movdqa	%xmm4, %xmm6
    0000060f: 	shufps	$0x88, %xmm7, %xmm5
    00000613: 	movdqu	-0x10(%rsi), %xmm7
    00000618: 	shufps	$0xdd, %xmm7, %xmm8
    0000061d: 	shufps	$0x88, %xmm8, %xmm6
    00000622: 	movdqa	%xmm6, %xmm9
    00000627: 	psrlq	$0x20, %xmm6
    0000062c: 	pmuludq	%xmm3, %xmm9
    00000631: 	pmuludq	%xmm11, %xmm6
    00000636: 	shufps	$0x88, %xmm7, %xmm13
    0000063b: 	shufps	$0xdd, %xmm8, %xmm4
    00000640: 	movdqa	%xmm1, %xmm8
    00000645: 	psrlq	$0x20, %xmm8
    0000064b: 	pshufd	$0x8, %xmm6, %xmm6
    00000650: 	pshufd	$0x8, %xmm9, %xmm9
    00000656: 	punpckldq	%xmm6, %xmm9
    0000065b: 	movdqa	%xmm5, %xmm6
    0000065f: 	shufps	$0xdd, %xmm13, %xmm5
    00000664: 	shufps	$0x88, %xmm13, %xmm6
    00000669: 	movdqa	%xmm6, %xmm7
    0000066d: 	psrlq	$0x20, %xmm6
    00000672: 	pmuludq	%xmm0, %xmm7
    00000676: 	pmuludq	%xmm10, %xmm6
    0000067b: 	pshufd	$0x8, %xmm7, %xmm7
    00000680: 	pshufd	$0x8, %xmm6, %xmm6
    00000685: 	punpckldq	%xmm6, %xmm7
    00000689: 	movdqa	%xmm5, %xmm6
    0000068d: 	psrlq	$0x20, %xmm5
    00000692: 	pmuludq	%xmm2, %xmm6
    00000696: 	paddd	%xmm9, %xmm7
    0000069b: 	movdqa	%xmm2, %xmm9
    000006a0: 	psrlq	$0x20, %xmm9
    000006a6: 	pmuludq	%xmm9, %xmm5
    000006ab: 	pshufd	$0x8, %xmm6, %xmm6
    000006b0: 	pshufd	$0x8, %xmm5, %xmm5
    000006b5: 	punpckldq	%xmm5, %xmm6
    000006b9: 	movdqa	%xmm4, %xmm5
    000006bd: 	psrlq	$0x20, %xmm4
    000006c2: 	pmuludq	%xmm1, %xmm5
    000006c6: 	paddd	%xmm7, %xmm6
    000006ca: 	movdqu	-0x30(%rcx), %xmm7
    000006cf: 	pmuludq	%xmm8, %xmm4
    000006d4: 	pshufd	$0x8, %xmm5, %xmm5
    000006d9: 	pshufd	$0x8, %xmm4, %xmm4
    000006de: 	punpckldq	%xmm4, %xmm5
    000006e2: 	movdqu	-0x40(%rcx), %xmm4
    000006e7: 	paddd	%xmm5, %xmm6
    000006eb: 	paddd	-0x48(%rsp), %xmm6
    000006f1: 	movdqa	%xmm4, %xmm5
    000006f5: 	shufps	$0xdd, %xmm7, %xmm4
    000006f9: 	shufps	$0x88, %xmm7, %xmm5
    000006fd: 	movaps	%xmm6, -0x48(%rsp)
    00000702: 	movdqu	-0x10(%rcx), %xmm7
    00000707: 	movdqu	-0x20(%rcx), %xmm6
    0000070c: 	movdqa	%xmm6, %xmm15
    00000711: 	shufps	$0xdd, %xmm7, %xmm6
    00000715: 	movdqa	%xmm6, %xmm14
    0000071a: 	movdqa	%xmm4, %xmm6
    0000071e: 	shufps	$0x88, %xmm14, %xmm6
    00000723: 	movdqa	%xmm6, %xmm13
    00000728: 	psrlq	$0x20, %xmm6
    0000072d: 	shufps	$0x88, %xmm7, %xmm15
    00000732: 	pmuludq	%xmm3, %xmm13
    00000737: 	pmuludq	%xmm11, %xmm6
    0000073c: 	shufps	$0xdd, %xmm14, %xmm4
    00000741: 	pshufd	$0x8, %xmm6, %xmm6
    00000746: 	pshufd	$0x8, %xmm13, %xmm13
    0000074c: 	punpckldq	%xmm6, %xmm13
    00000751: 	movdqa	%xmm5, %xmm6
    00000755: 	shufps	$0xdd, %xmm15, %xmm5
    0000075a: 	shufps	$0x88, %xmm15, %xmm6
    0000075f: 	movdqa	%xmm6, %xmm7
    00000763: 	psrlq	$0x20, %xmm6
    00000768: 	pmuludq	%xmm0, %xmm7
    0000076c: 	pmuludq	%xmm10, %xmm6
    00000771: 	pshufd	$0x8, %xmm7, %xmm7
    00000776: 	pshufd	$0x8, %xmm6, %xmm6
    0000077b: 	punpckldq	%xmm6, %xmm7
    0000077f: 	movdqa	%xmm5, %xmm6
    00000783: 	psrlq	$0x20, %xmm5
    00000788: 	pmuludq	%xmm2, %xmm6
    0000078c: 	paddd	%xmm13, %xmm7
    00000791: 	pmuludq	%xmm9, %xmm5
    00000796: 	pshufd	$0x8, %xmm6, %xmm6
    0000079b: 	pshufd	$0x8, %xmm5, %xmm5
    000007a0: 	punpckldq	%xmm5, %xmm6
    000007a4: 	movdqa	%xmm4, %xmm5
    000007a8: 	psrlq	$0x20, %xmm4
    000007ad: 	pmuludq	%xmm1, %xmm5
    000007b1: 	paddd	%xmm7, %xmm6
    000007b5: 	pmuludq	%xmm8, %xmm4
    000007ba: 	pshufd	$0x8, %xmm5, %xmm5
    000007bf: 	pshufd	$0x8, %xmm4, %xmm4
    000007c4: 	punpckldq	%xmm4, %xmm5
    000007c8: 	movdqu	-0x40(%rdx), %xmm4
    000007cd: 	paddd	%xmm5, %xmm6
    000007d1: 	paddd	-0x58(%rsp), %xmm6
    000007d7: 	movdqa	%xmm4, %xmm5
    000007db: 	movaps	%xmm6, -0x58(%rsp)
    000007e0: 	movdqu	-0x20(%rdx), %xmm6
    000007e5: 	movdqu	-0x30(%rdx), %xmm7
    000007ea: 	shufps	$0x88, %xmm7, %xmm5
    000007ee: 	shufps	$0xdd, %xmm7, %xmm4
    000007f2: 	movdqu	-0x10(%rdx), %xmm7
    000007f7: 	movdqa	%xmm6, %xmm15
    000007fc: 	shufps	$0xdd, %xmm7, %xmm6
    00000800: 	movdqa	%xmm6, %xmm14
    00000805: 	movdqa	%xmm4, %xmm6
    00000809: 	shufps	$0x88, %xmm7, %xmm15
    0000080e: 	shufps	$0x88, %xmm14, %xmm6
    00000813: 	movdqa	%xmm6, %xmm13
    00000818: 	psrlq	$0x20, %xmm6
    0000081d: 	shufps	$0xdd, %xmm14, %xmm4
    00000822: 	pmuludq	%xmm3, %xmm13
    00000827: 	pmuludq	%xmm11, %xmm6
    0000082c: 	movdqu	-0x10(%rax), %xmm14
    00000832: 	pshufd	$0x8, %xmm6, %xmm6
    00000837: 	pshufd	$0x8, %xmm13, %xmm13
    0000083d: 	punpckldq	%xmm6, %xmm13
    00000842: 	movdqa	%xmm5, %xmm6
    00000846: 	shufps	$0xdd, %xmm15, %xmm5
    0000084b: 	shufps	$0x88, %xmm15, %xmm6
    00000850: 	movdqa	%xmm6, %xmm7
    00000854: 	psrlq	$0x20, %xmm6
    00000859: 	pmuludq	%xmm0, %xmm7
    0000085d: 	pmuludq	%xmm10, %xmm6
    00000862: 	pshufd	$0x8, %xmm7, %xmm7
    00000867: 	pshufd	$0x8, %xmm6, %xmm6
    0000086c: 	punpckldq	%xmm6, %xmm7
    00000870: 	movdqa	%xmm5, %xmm6
    00000874: 	psrlq	$0x20, %xmm5
    00000879: 	pmuludq	%xmm2, %xmm6
    0000087d: 	paddd	%xmm13, %xmm7
    00000882: 	pmuludq	%xmm9, %xmm5
    00000887: 	pshufd	$0x8, %xmm6, %xmm6
    0000088c: 	pshufd	$0x8, %xmm5, %xmm5
    00000891: 	punpckldq	%xmm5, %xmm6
    00000895: 	movdqa	%xmm4, %xmm5
    00000899: 	psrlq	$0x20, %xmm4
    0000089e: 	pmuludq	%xmm1, %xmm5
    000008a2: 	paddd	%xmm7, %xmm6
    000008a6: 	movdqu	-0x30(%rax), %xmm7
    000008ab: 	pmuludq	%xmm8, %xmm4
    000008b0: 	pshufd	$0x8, %xmm5, %xmm5
    000008b5: 	pshufd	$0x8, %xmm4, %xmm4
    000008ba: 	punpckldq	%xmm4, %xmm5
    000008be: 	movdqu	-0x40(%rax), %xmm4
    000008c3: 	paddd	%xmm5, %xmm6
    000008c7: 	paddd	-0x68(%rsp), %xmm6
    000008cd: 	movdqa	%xmm4, %xmm5
    000008d1: 	shufps	$0xdd, %xmm7, %xmm4
    000008d5: 	movaps	%xmm6, -0x68(%rsp)
    000008da: 	movdqu	-0x20(%rax), %xmm6
    000008df: 	shufps	$0x88, %xmm7, %xmm5
    000008e3: 	movdqu	-0x10(%rax), %xmm7
    000008e8: 	movdqa	%xmm6, %xmm13
    000008ed: 	shufps	$0x88, %xmm7, %xmm13
    000008f2: 	movdqa	%xmm6, %xmm7
    000008f6: 	movdqa	%xmm4, %xmm6
    000008fa: 	shufps	$0xdd, %xmm14, %xmm7
    000008ff: 	shufps	$0x88, %xmm7, %xmm6
    00000903: 	pmuludq	%xmm6, %xmm3
    00000907: 	psrlq	$0x20, %xmm6
    0000090c: 	pmuludq	%xmm11, %xmm6
    00000911: 	shufps	$0xdd, %xmm7, %xmm4
    00000915: 	pmuludq	%xmm4, %xmm1
    00000919: 	psrlq	$0x20, %xmm4
    0000091e: 	pmuludq	%xmm8, %xmm4
    00000923: 	pshufd	$0x8, %xmm3, %xmm3
    00000928: 	pshufd	$0x8, %xmm6, %xmm6
    0000092d: 	pshufd	$0x8, %xmm1, %xmm1
    00000932: 	punpckldq	%xmm6, %xmm3
    00000936: 	movdqa	%xmm5, %xmm6
    0000093a: 	shufps	$0xdd, %xmm13, %xmm5
    0000093f: 	shufps	$0x88, %xmm13, %xmm6
    00000944: 	pmuludq	%xmm6, %xmm0
    00000948: 	psrlq	$0x20, %xmm6
    0000094d: 	pshufd	$0x8, %xmm4, %xmm4
    00000952: 	pmuludq	%xmm5, %xmm2
    00000956: 	pmuludq	%xmm10, %xmm6
    0000095b: 	punpckldq	%xmm4, %xmm1
    0000095f: 	psrlq	$0x20, %xmm5
    00000964: 	pmuludq	%xmm9, %xmm5
    00000969: 	pshufd	$0x8, %xmm0, %xmm0
    0000096e: 	pshufd	$0x8, %xmm6, %xmm6
    00000973: 	pshufd	$0x8, %xmm2, %xmm2
    00000978: 	punpckldq	%xmm6, %xmm0
    0000097c: 	movdqa	-0x38(%rsp), %xmm6
    00000982: 	paddq	DATAat0x2d9c0(%rip), %xmm6
    0000098a: 	pshufd	$0x8, %xmm5, %xmm5
    0000098f: 	paddd	%xmm3, %xmm0
    00000993: 	punpckldq	%xmm5, %xmm2
    00000997: 	paddd	%xmm2, %xmm0
    0000099b: 	paddd	%xmm1, %xmm0
    0000099f: 	paddd	-0x78(%rsp), %xmm0
    000009a5: 	movaps	%xmm0, -0x78(%rsp)
    000009aa: 	cmpq	%r13, %r11
    000009ad: 	jb	.Ltmp509 # Offset: 2477
    000009b3: 	movhlps	%xmm6, %xmm3
    000009b6: 	movq	0xd8(%rsp), %rdi
    000009be: 	movq	%xmm3, %rcx
    000009c3: 	movdqa	%xmm0, %xmm3
    000009c7: 	psrldq	$0x8, %xmm0
    000009cc: 	paddd	%xmm3, %xmm0
    000009d0: 	movdqa	-0x68(%rsp), %xmm3
    000009d6: 	movdqa	%xmm0, %xmm1
    000009da: 	psrldq	$0x4, %xmm1
    000009df: 	paddd	%xmm1, %xmm0
    000009e3: 	movd	%xmm0, %r8d
    000009e8: 	movdqa	%xmm3, %xmm0
    000009ec: 	psrldq	$0x8, %xmm0
    000009f1: 	paddd	%xmm3, %xmm0
    000009f5: 	movdqa	-0x58(%rsp), %xmm3
    000009fb: 	movdqa	%xmm0, %xmm1
    000009ff: 	psrldq	$0x4, %xmm1
    00000a04: 	paddd	%xmm1, %xmm0
    00000a08: 	movd	%xmm0, %r14d
    00000a0d: 	movd	%xmm0, -0x38(%rsp)
    00000a13: 	movdqa	%xmm3, %xmm0
    00000a17: 	psrldq	$0x8, %xmm0
    00000a1c: 	paddd	%xmm3, %xmm0
    00000a20: 	movdqa	-0x48(%rsp), %xmm3
    00000a26: 	movdqa	%xmm0, %xmm1
    00000a2a: 	psrldq	$0x4, %xmm1
    00000a2f: 	paddd	%xmm1, %xmm0
    00000a33: 	movd	%xmm0, -0x68(%rsp)
    00000a39: 	movdqa	%xmm3, %xmm0
    00000a3d: 	psrldq	$0x8, %xmm0
    00000a42: 	paddd	%xmm3, %xmm0
    00000a46: 	movdqa	%xmm0, %xmm1
    00000a4a: 	psrldq	$0x4, %xmm1
    00000a4f: 	paddd	%xmm1, %xmm0
    00000a53: 	movd	%xmm0, -0x78(%rsp)
    00000a59: 	cmpq	%rdi, 0xc8(%rsp)
    00000a61: 	je	.Ltmp510 # Offset: 2657
    00000a67: 	movq	0x8(%rsp), %rax
    00000a6c: 	movq	0x78(%rsp), %rdx
    00000a71: 	movq	%rbx, -0x58(%rsp)
    00000a76: 	movl	%r14d, %ebx
    00000a79: 	movq	0xf8(%rsp), %rcx
    00000a81: 	movq	0xe8(%rsp), %r11
    00000a89: 	movq	0x100(%rsp), %r14
    00000a91: 	addq	%rcx, %rax
    00000a94: 	leaq	(%rdx,%rax,4), %r13
    00000a98: 	movq	0x28(%rsp), %rax
    00000a9d: 	addq	%rcx, %rax
    00000aa0: 	leaq	(%rdx,%rax,4), %r12
    00000aa4: 	movq	(%rsp), %rax
    00000aa8: 	addq	%rcx, %rax
    00000aab: 	leaq	(%rdx,%rax,4), %rbp
    00000aaf: 	movq	-0x8(%rsp), %rax
    00000ab4: 	addq	%rcx, %rax
    00000ab7: 	leaq	(%rdx,%rax,4), %rsi
    00000abb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp511:
    00000ac0: 	movq	-0x18(%rsp), %rax
    00000ac5: 	movl	(%r11,%r14,4), %r9d
    00000ac9: 	movl	0x4(%r13), %r10d
    00000acd: 	movl	(%r13), %r15d
    00000ad1: 	movl	(%r11,%rax,4), %edx
    00000ad5: 	movl	(%r11), %eax
    00000ad8: 	imull	%r9d, %r10d
    00000adc: 	movq	-0x28(%rsp), %rdi
    00000ae1: 	imull	%edx, %r15d
    00000ae5: 	movl	(%r11,%rdi,4), %edi
    00000ae9: 	addl	%r10d, %r15d
    00000aec: 	movl	0x8(%r13), %r10d
    00000af0: 	imull	%eax, %r10d
    00000af4: 	addl	%r15d, %r10d
    00000af7: 	movl	0xc(%r13), %r15d
    00000afb: 	imull	%edi, %r15d
    00000aff: 	addl	%r15d, %r10d
    00000b02: 	movl	(%r12), %r15d
    00000b06: 	addl	%r10d, -0x78(%rsp)
    00000b0b: 	movl	0x4(%r12), %r10d
    00000b10: 	imull	%edx, %r15d
    00000b14: 	imull	%r9d, %r10d
    00000b18: 	addl	%r10d, %r15d
    00000b1b: 	movl	0x8(%r12), %r10d
    00000b20: 	imull	%eax, %r10d
    00000b24: 	addl	%r15d, %r10d
    00000b27: 	movl	0xc(%r12), %r15d
    00000b2c: 	imull	%edi, %r15d
    00000b30: 	addl	%r15d, %r10d
    00000b33: 	movl	(%rbp), %r15d
    00000b37: 	addl	%r10d, -0x68(%rsp)
    00000b3c: 	movl	0x4(%rbp), %r10d
    00000b40: 	imull	%edx, %r15d
    00000b44: 	imull	%r9d, %r10d
    00000b48: 	imull	(%rsi), %edx
    00000b4b: 	imull	0x4(%rsi), %r9d
    00000b50: 	addl	%r10d, %r15d
    00000b53: 	movl	0x8(%rbp), %r10d
    00000b57: 	imull	%eax, %r10d
    00000b5b: 	addl	%r9d, %edx
    00000b5e: 	imull	0x8(%rsi), %eax
    00000b62: 	addl	%r15d, %r10d
    00000b65: 	movl	0xc(%rbp), %r15d
    00000b69: 	addl	%edx, %eax
    00000b6b: 	imull	%edi, %r15d
    00000b6f: 	imull	0xc(%rsi), %edi
    00000b73: 	addl	%r15d, %r10d
    00000b76: 	addl	%edi, %eax
    00000b78: 	addl	%r10d, %ebx
    00000b7b: 	addl	%eax, %r8d
    00000b7e: 	addq	$0x4, %rcx
    00000b82: 	addq	-0x58(%rsp), %r11
    00000b87: 	addq	$0x10, %r13
    00000b8b: 	addq	$0x10, %r12
    00000b8f: 	addq	$0x10, %rbp
    00000b93: 	addq	$0x10, %rsi
    00000b97: 	cmpq	%rcx, -0x20(%rsp)
    00000b9c: 	ja	.Ltmp511 # Offset: 2972
    00000ba2: 	movl	%ebx, -0x38(%rsp)
    00000ba6: 	movq	-0x58(%rsp), %rbx
.Ltmp510:
    00000bab: 	movq	0x80(%rsp), %r15
    00000bb3: 	cmpq	%rcx, %r15
    00000bb6: 	jbe	.Ltmp512 # Offset: 2998
    00000bbc: 	movq	-0x28(%rsp), %rbp
    00000bc1: 	movq	0x8(%rsp), %r13
    00000bc6: 	movq	0x78(%rsp), %rsi
    00000bcb: 	movq	0x18(%rsp), %rdx
    00000bd0: 	movq	%rbp, %rax
    00000bd3: 	movq	0x28(%rsp), %r12
    00000bd8: 	leaq	(%r13,%rcx), %r9
    00000bdd: 	movq	0x20(%rsp), %r10
    00000be2: 	imulq	%rcx, %rax
    00000be6: 	movq	(%rsp), %rdi
    00000bea: 	movl	(%rsi,%r9,4), %r14d
    00000bee: 	leaq	(%r12,%rcx), %r9
    00000bf2: 	movl	(%rsi,%r9,4), %r11d
    00000bf6: 	movq	%rdi, %r9
    00000bf9: 	addq	%rax, %rdx
    00000bfc: 	addq	%rcx, %r9
    00000bff: 	movl	(%r10,%rdx,4), %edx
    00000c03: 	imull	%edx, %r11d
    00000c07: 	addl	%r11d, -0x68(%rsp)
    00000c0c: 	movl	(%rsi,%r9,4), %r11d
    00000c10: 	movq	-0x8(%rsp), %r9
    00000c15: 	imull	%edx, %r14d
    00000c19: 	addl	%r14d, -0x78(%rsp)
    00000c1e: 	imull	%edx, %r11d
    00000c22: 	movl	-0x78(%rsp), %r14d
    00000c27: 	addl	%r11d, -0x38(%rsp)
    00000c2c: 	addq	%rcx, %r9
    00000c2f: 	imull	(%rsi,%r9,4), %edx
    00000c34: 	addl	%edx, %r8d
    00000c37: 	leaq	0x1(%rcx), %rdx
    00000c3b: 	cmpq	%rdx, %r15
    00000c3e: 	jbe	.Ltmp512 # Offset: 3134
    00000c44: 	movq	0x18(%rsp), %r9
    00000c49: 	addq	%rbp, %rax
    00000c4c: 	addq	%rax, %r9
    00000c4f: 	movl	(%r10,%r9,4), %r9d
    00000c53: 	leaq	(%rdx,%r13), %r10
    00000c57: 	movl	(%rsi,%r10,4), %r11d
    00000c5b: 	leaq	(%rdx,%r12), %r10
    00000c5f: 	imull	%r9d, %r11d
    00000c63: 	addl	%r11d, %r14d
    00000c66: 	movl	(%rsi,%r10,4), %r11d
    00000c6a: 	movq	%rdi, %r10
    00000c6d: 	addq	%rdx, %r10
    00000c70: 	addq	-0x8(%rsp), %rdx
    00000c75: 	movl	%r14d, -0x78(%rsp)
    00000c7a: 	movl	(%rsi,%r10,4), %edi
    00000c7e: 	imull	%r9d, %r11d
    00000c82: 	addl	%r11d, -0x68(%rsp)
    00000c87: 	movl	-0x68(%rsp), %r11d
    00000c8c: 	imull	%r9d, %edi
    00000c90: 	addl	%edi, -0x38(%rsp)
    00000c94: 	imull	(%rsi,%rdx,4), %r9d
    00000c99: 	leaq	0x2(%rcx), %rdx
    00000c9d: 	addl	%r9d, %r8d
    00000ca0: 	cmpq	%rdx, %r15
    00000ca3: 	jbe	.Ltmp512 # Offset: 3235
    00000ca9: 	movq	0x20(%rsp), %r9
    00000cae: 	leaq	(%rdx,%r13), %r10
    00000cb2: 	addq	%rbp, %rax
    00000cb5: 	addq	$0x3, %rcx
    00000cb9: 	addq	0x18(%rsp), %rax
    00000cbe: 	movl	(%rsi,%r10,4), %edi
    00000cc2: 	leaq	(%rdx,%r12), %r10
    00000cc6: 	movl	(%r9,%rax,4), %r9d
    00000cca: 	imull	%r9d, %edi
    00000cce: 	addl	%edi, %r14d
    00000cd1: 	movl	(%rsi,%r10,4), %edi
    00000cd5: 	movq	(%rsp), %r10
    00000cd9: 	movl	%r14d, -0x78(%rsp)
    00000cde: 	imull	%r9d, %edi
    00000ce2: 	addq	%rdx, %r10
    00000ce5: 	addl	%edi, %r11d
    00000ce8: 	movl	(%rsi,%r10,4), %edi
    00000cec: 	movq	-0x8(%rsp), %r10
    00000cf1: 	movl	%r11d, -0x68(%rsp)
    00000cf6: 	addq	%r10, %rdx
    00000cf9: 	imull	%r9d, %edi
    00000cfd: 	addl	%edi, -0x38(%rsp)
    00000d01: 	imull	(%rsi,%rdx,4), %r9d
    00000d06: 	addl	%r9d, %r8d
    00000d09: 	cmpq	%rcx, %r15
    00000d0c: 	jbe	.Ltmp512 # Offset: 3340
    00000d0e: 	movq	0x20(%rsp), %r9
    00000d13: 	addq	%rcx, %r13
    00000d16: 	addq	%rbp, %rax
    00000d19: 	addq	%rcx, %r12
    00000d1c: 	movl	(%rsi,%r13,4), %edi
    00000d20: 	movq	(%rsp), %rdx
    00000d24: 	movl	(%r9,%rax,4), %eax
    00000d28: 	addq	%rcx, %rdx
    00000d2b: 	addq	%r10, %rcx
    00000d2e: 	imull	%eax, %edi
    00000d31: 	addl	%edi, %r14d
    00000d34: 	movl	(%rsi,%r12,4), %edi
    00000d38: 	movl	%r14d, -0x78(%rsp)
    00000d3d: 	imull	%eax, %edi
    00000d40: 	addl	%edi, %r11d
    00000d43: 	movl	(%rsi,%rdx,4), %edi
    00000d46: 	movl	%r11d, -0x68(%rsp)
    00000d4b: 	imull	%eax, %edi
    00000d4e: 	addl	%edi, -0x38(%rsp)
    00000d52: 	imull	(%rsi,%rcx,4), %eax
    00000d56: 	addl	%eax, %r8d
.Ltmp512:
    00000d59: 	movq	0x40(%rsp), %rax
    00000d5e: 	movq	0x38(%rsp), %rcx
    00000d63: 	movq	0x30(%rsp), %rdx
    00000d68: 	movq	0x48(%rsp), %r14
    00000d6d: 	movl	-0x68(%rsp), %esi
    00000d71: 	movl	-0x38(%rsp), %edi
    00000d75: 	addl	(%rax), %esi
    00000d77: 	addl	(%rcx), %edi
    00000d79: 	addl	(%rdx), %r8d
    00000d7c: 	movl	-0x78(%rsp), %r11d
    00000d81: 	addl	%r11d, (%r14)
    00000d84: 	addq	%rbx, %r14
    00000d87: 	movl	%esi, (%rax)
    00000d89: 	addq	%rbx, %rax
    00000d8c: 	movl	%edi, (%rcx)
    00000d8e: 	movq	%rdx, %rdi
    00000d91: 	addq	%rbx, %rcx
    00000d94: 	movq	%rax, 0x40(%rsp)
    00000d99: 	addq	%rbx, %rdi
    00000d9c: 	movq	-0x8(%rsp), %rax
    00000da1: 	addq	-0x28(%rsp), %rax
    00000da6: 	addq	$0x4, -0x10(%rsp)
    00000dac: 	movl	%r8d, (%rdx)
    00000daf: 	movq	-0x10(%rsp), %rdx
    00000db4: 	addq	%rbx, 0x68(%rsp)
    00000db9: 	addq	%rbx, 0x60(%rsp)
    00000dbe: 	addq	%rbx, 0x58(%rsp)
    00000dc3: 	addq	%rbx, 0x50(%rsp)
    00000dc8: 	movq	%r14, 0x48(%rsp)
    00000dcd: 	movq	%rcx, 0x38(%rsp)
    00000dd2: 	movq	%rdi, 0x30(%rsp)
    00000dd7: 	movq	%rax, 0x8(%rsp)
    00000ddc: 	cmpq	0x90(%rsp), %rdx
    00000de4: 	jb	.Ltmp513 # Offset: 3556
    00000dea: 	movq	%rbx, %r13
    00000ded: 	movq	%rdx, %rax
.Ltmp525:
    00000df0: 	cmpq	%rax, 0x108(%rsp)
    00000df8: 	jbe	.Ltmp514 # Offset: 3576
    00000dfe: 	movq	-0x28(%rsp), %rcx
    00000e03: 	movq	0x78(%rsp), %rdi
    00000e08: 	movq	-0x20(%rsp), %rbp
    00000e0d: 	movq	0x70(%rsp), %r14
    00000e12: 	movq	%rcx, %rbx
    00000e15: 	movq	0x150(%rsp), %r12
    00000e1d: 	movq	0x118(%rsp), %r15
    00000e25: 	imulq	%rax, %rbx
    00000e29: 	movq	0x80(%rsp), %rax
    00000e31: 	addq	%rbx, %rax
    00000e34: 	movq	%rbx, -0x78(%rsp)
    00000e39: 	movq	%rcx, %rbx
    00000e3c: 	leaq	(%rdi,%rax,4), %r11
.Ltmp519:
    00000e40: 	cmpq	0x10(%rsp), %rbp
    00000e45: 	jbe	.Ltmp515 # Offset: 3653
    00000e4b: 	movq	0x110(%rsp), %rax
    00000e53: 	xorl	%r10d, %r10d
    00000e56: 	xorl	%r9d, %r9d
    00000e59: 	xorl	%ecx, %ecx
    00000e5b: 	movq	0x10(%rsp), %rdi
    00000e60: 	xorl	%r8d, %r8d
    00000e63: 	leaq	(%r11,%rax), %rdx
    00000e67: 	movq	0x88(%rsp), %rax
    00000e6f: 	nop # Size: 1
.Ltmp516:
    00000e70: 	movl	(%rax), %esi
    00000e72: 	imull	(%rdx), %esi
    00000e75: 	addq	$0x4, %rdi
    00000e79: 	addq	$0x10, %rdx
    00000e7d: 	addl	%esi, %ecx
    00000e7f: 	movl	(%rax,%rbx,4), %esi
    00000e82: 	imull	-0xc(%rdx), %esi
    00000e86: 	addl	%esi, %r8d
    00000e89: 	movl	(%rax,%r14,4), %esi
    00000e8d: 	imull	-0x8(%rdx), %esi
    00000e91: 	addl	%esi, %r9d
    00000e94: 	movl	(%rax,%r15,4), %esi
    00000e98: 	imull	-0x4(%rdx), %esi
    00000e9c: 	addq	%r13, %rax
    00000e9f: 	addl	%esi, %r10d
    00000ea2: 	cmpq	%rbp, %rdi
    00000ea5: 	jb	.Ltmp516 # Offset: 3749
.Ltmp524:
    00000ea7: 	cmpq	%rdi, 0x80(%rsp)
    00000eaf: 	jbe	.Ltmp517 # Offset: 3759
    00000eb1: 	movq	0x20(%rsp), %rdx
    00000eb6: 	movq	%rbx, %rax
    00000eb9: 	imulq	%rdi, %rax
    00000ebd: 	addq	0x18(%rsp), %rax
    00000ec2: 	addq	-0x78(%rsp), %rdi
    00000ec7: 	leaq	(%rdx,%rax,4), %rdx
    00000ecb: 	movq	0x78(%rsp), %rax
    00000ed0: 	leaq	(%rax,%rdi,4), %rax
    00000ed4: 	nopl	(%rax) # Size: 4
.Ltmp518:
    00000ed8: 	movl	(%rdx), %esi
    00000eda: 	imull	(%rax), %esi
    00000edd: 	addq	$0x4, %rax
    00000ee1: 	addq	%r12, %rdx
    00000ee4: 	addl	%esi, %ecx
    00000ee6: 	cmpq	%rax, %r11
    00000ee9: 	jne	.Ltmp518 # Offset: 3817
.Ltmp517:
    00000eeb: 	movq	-0x78(%rsp), %rax
    00000ef0: 	addl	%r8d, %ecx
    00000ef3: 	addq	$0x1, -0x10(%rsp)
    00000ef9: 	addq	%r12, %r11
    00000efc: 	movq	0xf0(%rsp), %rdi
    00000f04: 	addl	%r9d, %ecx
    00000f07: 	addl	%r10d, %ecx
    00000f0a: 	addl	%ecx, (%rdi,%rax,4)
    00000f0d: 	addq	%rbx, %rax
    00000f10: 	movq	-0x10(%rsp), %rdi
    00000f15: 	movq	%rax, -0x78(%rsp)
    00000f1a: 	cmpq	%rdi, 0x108(%rsp)
    00000f22: 	jne	.Ltmp519 # Offset: 3874
.Ltmp514:
    00000f28: 	addq	$0x1, 0x18(%rsp)
    00000f2e: 	movq	0x18(%rsp), %rax
    00000f33: 	addq	$0x4, 0xf0(%rsp)
    00000f3c: 	addq	$0x4, 0x88(%rsp)
    00000f45: 	addq	$0x4, 0xa8(%rsp)
    00000f4e: 	addq	$0x4, 0xa0(%rsp)
    00000f57: 	addq	$0x4, 0xb0(%rsp)
    00000f60: 	cmpq	%rax, -0x28(%rsp)
    00000f65: 	jne	.Ltmp520 # Offset: 3941
    00000f6b: 	movq	0x1f0(%rsp), %rcx
    00000f73: 	movq	0x1a0(%rsp), %rax
    00000f7b: 	subq	$-0x80, 0xb8(%rsp)
    00000f84: 	addq	%rcx, %rax
    00000f87: 	movq	%rax, 0x88(%rsp)
    00000f8f: 	movq	0x1a8(%rsp), %rax
    00000f97: 	addq	%rcx, %rax
    00000f9a: 	movq	-0x28(%rsp), %rcx
    00000f9f: 	movq	%rax, 0xa0(%rsp)
    00000fa7: 	cmpq	%rcx, 0x188(%rsp)
    00000faf: 	jb	.Ltmp521 # Offset: 4015
    00000fb5: 	movq	%rcx, %rax
    00000fb8: 	movq	0x1c0(%rsp), %rdi
    00000fc0: 	movq	%r13, %rbp
    00000fc3: 	addq	%rdi, 0x120(%rsp)
    00000fcb: 	shlq	$0x6, %rax
    00000fcf: 	addq	%rdi, 0x130(%rsp)
    00000fd7: 	subq	%rcx, %rax
    00000fda: 	movq	0x1c8(%rsp), %rcx
    00000fe2: 	leaq	(%rcx,%rax,2), %rdx
    00000fe6: 	movq	0x190(%rsp), %rcx
    00000fee: 	cmpq	%rcx, 0x180(%rsp)
    00000ff6: 	jb	.Ltmp522 # Offset: 4086
.Ltmp505:
    00000ffc: 	addq	$0x200, %rsp
    00001003: 	popq	%rbx
    00001004: 	popq	%rbp
    00001005: 	popq	%r12
    00001007: 	popq	%r13
    00001009: 	popq	%r14
    0000100b: 	popq	%r15
    0000100d: 	retq # Offset: 4109
    0000100e: 	nop # Size: 2
.Ltmp508:
    00001010: 	movq	%rbx, -0x58(%rsp)
    00001015: 	movq	0x50(%rsp), %r13
    0000101a: 	xorl	%r8d, %r8d
    0000101d: 	xorl	%edi, %edi
    0000101f: 	movl	$0x0, -0x68(%rsp)
    00001027: 	movq	0x58(%rsp), %r12
    0000102c: 	movl	$0x0, -0x78(%rsp)
    00001034: 	movq	0x60(%rsp), %rbp
    00001039: 	movq	0x68(%rsp), %r9
    0000103e: 	movq	0x88(%rsp), %r11
    00001046: 	movq	0x118(%rsp), %r14
    0000104e: 	nop # Size: 2
.Ltmp523:
    00001050: 	movq	-0x28(%rsp), %rax
    00001055: 	movl	(%r11), %edx
    00001058: 	movl	0x4(%r9), %ebx
    0000105c: 	movl	(%r9), %r15d
    0000105f: 	movl	(%r11,%rax,4), %r10d
    00001063: 	movq	0x70(%rsp), %rax
    00001068: 	imull	%edx, %r15d
    0000106c: 	movl	(%r11,%r14,4), %esi
    00001070: 	imull	%r10d, %ebx
    00001074: 	movl	(%r11,%rax,4), %eax
    00001078: 	addl	%ebx, %r15d
    0000107b: 	movl	0x8(%r9), %ebx
    0000107f: 	imull	%eax, %ebx
    00001082: 	addl	%r15d, %ebx
    00001085: 	movl	0xc(%r9), %r15d
    00001089: 	imull	%esi, %r15d
    0000108d: 	addl	%r15d, %ebx
    00001090: 	movl	(%rbp), %r15d
    00001094: 	addl	%ebx, -0x78(%rsp)
    00001098: 	movl	0x4(%rbp), %ebx
    0000109b: 	imull	%edx, %r15d
    0000109f: 	imull	%r10d, %ebx
    000010a3: 	addl	%ebx, %r15d
    000010a6: 	movl	0x8(%rbp), %ebx
    000010a9: 	imull	%eax, %ebx
    000010ac: 	addl	%r15d, %ebx
    000010af: 	movl	0xc(%rbp), %r15d
    000010b3: 	imull	%esi, %r15d
    000010b7: 	addl	%r15d, %ebx
    000010ba: 	movl	(%r12), %r15d
    000010be: 	addl	%ebx, -0x68(%rsp)
    000010c2: 	movl	0x4(%r12), %ebx
    000010c7: 	imull	%edx, %r15d
    000010cb: 	imull	%r10d, %ebx
    000010cf: 	imull	(%r13), %edx
    000010d4: 	imull	0x4(%r13), %r10d
    000010d9: 	addl	%ebx, %r15d
    000010dc: 	movl	0x8(%r12), %ebx
    000010e1: 	imull	%eax, %ebx
    000010e4: 	addl	%r10d, %edx
    000010e7: 	imull	0x8(%r13), %eax
    000010ec: 	addl	%r15d, %ebx
    000010ef: 	movl	0xc(%r12), %r15d
    000010f4: 	addl	%edx, %eax
    000010f6: 	imull	%esi, %r15d
    000010fa: 	imull	0xc(%r13), %esi
    000010ff: 	addl	%r15d, %ebx
    00001102: 	addl	%esi, %eax
    00001104: 	addl	%ebx, %edi
    00001106: 	addl	%eax, %r8d
    00001109: 	addq	$0x4, %rcx
    0000110d: 	addq	-0x58(%rsp), %r11
    00001112: 	addq	$0x10, %r9
    00001116: 	addq	$0x10, %rbp
    0000111a: 	addq	$0x10, %r12
    0000111e: 	addq	$0x10, %r13
    00001122: 	cmpq	%rcx, -0x20(%rsp)
    00001127: 	ja	.Ltmp523 # Offset: 4391
    0000112d: 	movl	%edi, -0x38(%rsp)
    00001131: 	movq	-0x58(%rsp), %rbx
    00001136: 	jmp	.Ltmp510 # Offset: 4406
    0000113b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp507:
    00001140: 	movl	$0x0, -0x38(%rsp)
    00001148: 	xorl	%r8d, %r8d
    0000114b: 	movl	$0x0, -0x68(%rsp)
    00001153: 	movl	$0x0, -0x78(%rsp)
    0000115b: 	jmp	.Ltmp510 # Offset: 4443
.Ltmp515:
    00001160: 	movq	0x10(%rsp), %rdi
    00001165: 	xorl	%r10d, %r10d
    00001168: 	xorl	%r9d, %r9d
    0000116b: 	xorl	%r8d, %r8d
    0000116e: 	xorl	%ecx, %ecx
    00001170: 	jmp	.Ltmp524 # Offset: 4464
.Ltmp506:
    00001175: 	movq	%rdi, -0x10(%rsp)
    0000117a: 	movq	%rdi, %rax
    0000117d: 	jmp	.Ltmp525 # Offset: 4477
DWARF CFI Instructions:
    <empty>
End of Function "_ZN28matmul_IJK_blocked_unrolled3IiEclEPKiS2_Pimm.isra.0/1(*2)"

Binary Function "_ZN28matmul_IJK_blocked_unrolled2IiEclEPKiS2_Pimm.isra.0/1(*2)" after disassembly {
  All names   : _ZN28matmul_IJK_blocked_unrolled2IiEclEPKiS2_Pimm.isra.0/1
                _ZN28matmul_IJK_blocked_unrolled2IiEclEPKiS2_Pimm.isra.0/matrix_multiply.cpp/1
  Number      : 63
  State       : disassembled
  Address     : 0x126a0
  Size        : 0xdbb
  MaxSize     : 0xdc0
  Offset      : 0x126a0
  Section     : .text
  Orc Section : .local.text._ZN28matmul_IJK_blocked_unrolled2IiEclEPKiS2_Pimm.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB062:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	subq	$0x100, %rsp
    00000011: 	movq	%rdi, -0x50(%rsp)
    00000016: 	movq	%rsi, 0x38(%rsp)
    0000001b: 	movq	%rdx, 0x88(%rsp)
    00000023: 	movq	%rcx, 0xd0(%rsp)
    0000002b: 	testq	%rcx, %rcx
    0000002e: 	je	.Ltmp526 # Offset: 46
    00000034: 	leaq	-0x3(%r8), %rax
    00000038: 	movq	%r8, %r12
    0000003b: 	movq	%rax, 0x58(%rsp)
    00000040: 	testq	%r8, %r8
    00000043: 	je	.Ltmp526 # Offset: 67
    00000049: 	movq	%r8, %rax
    0000004c: 	movq	%r8, %r13
    0000004f: 	movq	%r8, %rbx
    00000052: 	movq	$0x0, 0xa0(%rsp)
    0000005e: 	shlq	$0x7, %rax
    00000062: 	shlq	$0x6, %r13
    00000066: 	movq	$0x0, 0x50(%rsp)
    0000006f: 	movdqa	DATAat0x2d9b0(%rip), %xmm15
    00000078: 	movq	%rax, 0xc0(%rsp)
    00000080: 	movq	%r8, %rax
    00000083: 	shlq	$0x4, %rbx
    00000087: 	movdqa	DATAat0x2d9c0(%rip), %xmm14
    00000090: 	shlq	$0x9, %rax
    00000094: 	movq	%rbx, %r14
    00000097: 	movq	%r13, %rbx
    0000009a: 	movq	$0x0, 0x90(%rsp)
    000000a6: 	movq	%rax, 0xc8(%rsp)
    000000ae: 	leaq	(%rsi,%r8,8), %rax
    000000b2: 	movq	%rax, 0xd8(%rsp)
    000000ba: 	leaq	(,%r8,4), %rax
    000000c2: 	movq	%rax, -0x30(%rsp)
    000000c7: 	leaq	(%r8,%r8), %rax
    000000cb: 	movq	%rax, 0xe0(%rsp)
    000000d3: 	addq	%r8, %rax
    000000d6: 	movq	%rax, 0xe8(%rsp)
    000000de: 	shlq	$0x4, %rax
    000000e2: 	movq	%rax, %r13
.Ltmp544:
    000000e5: 	movq	0x90(%rsp), %rax
    000000ed: 	movq	%r13, %r11
    000000f0: 	movq	0xd0(%rsp), %rcx
    000000f8: 	movq	$0x4, (%rsp)
    00000100: 	movq	$0x0, 0xa8(%rsp)
    0000010c: 	movq	%rbx, %r13
    0000010f: 	movq	%r12, %rbx
    00000112: 	movq	%rax, 0x48(%rsp)
    00000117: 	subq	$-0x80, %rax
    0000011b: 	cmpq	%rcx, %rax
    0000011e: 	movq	%rax, 0x90(%rsp)
    00000126: 	movq	$0x0, 0x98(%rsp)
    00000132: 	cmovbeq	%rax, %rcx
    00000136: 	movq	0x38(%rsp), %rax
    0000013b: 	movq	%rax, 0xb0(%rsp)
    00000143: 	movq	0xd8(%rsp), %rax
    0000014b: 	movq	%rcx, -0x48(%rsp)
    00000150: 	movq	%rax, 0xb8(%rsp)
    00000158: 	movq	-0x50(%rsp), %rax
    0000015d: 	addq	0xa0(%rsp), %rax
    00000165: 	movq	%rax, 0xf0(%rsp)
.Ltmp543:
    0000016d: 	movq	0x98(%rsp), %rdi
    00000175: 	movq	%rdi, -0x68(%rsp)
    0000017a: 	movq	%rdi, %rax
    0000017d: 	subq	$-0x80, %rdi
    00000181: 	cmpq	%rbx, %rdi
    00000184: 	movq	%rdi, %rcx
    00000187: 	movq	%rdi, 0x98(%rsp)
    0000018f: 	cmovaq	%rbx, %rcx
    00000193: 	cmpq	$0x0, 0x58(%rsp)
    00000199: 	movq	%rcx, -0x40(%rsp)
    0000019e: 	leaq	-0x3(%rcx), %rbp
    000001a2: 	je	.Ltmp527 # Offset: 418
    000001a8: 	movq	0xb0(%rsp), %rsi
    000001b0: 	movq	-0x30(%rsp), %rdi
    000001b5: 	movq	$0x0, -0x60(%rsp)
    000001be: 	movq	0x88(%rsp), %rdx
    000001c6: 	addq	0xa0(%rsp), %rdx
    000001ce: 	movq	0xb8(%rsp), %r9
    000001d6: 	movq	0x38(%rsp), %r12
    000001db: 	movq	%rdx, 0x40(%rsp)
    000001e0: 	movq	%rsi, %rdx
    000001e3: 	addq	%rdi, %rdx
    000001e6: 	movq	%rsi, -0x28(%rsp)
    000001eb: 	movq	%rdx, -0x20(%rsp)
    000001f0: 	movq	%r9, %rdx
    000001f3: 	addq	%rdi, %rdx
    000001f6: 	movq	%rax, %rdi
    000001f9: 	movq	%r9, -0x18(%rsp)
    000001fe: 	movq	%rdx, -0x10(%rsp)
    00000203: 	movq	0xf0(%rsp), %rdx
    0000020b: 	leaq	(%rdx,%rax,4), %rax
    0000020f: 	movq	%rax, 0x80(%rsp)
    00000217: 	movq	%rcx, %rax
    0000021a: 	subq	%rdi, %rax
    0000021d: 	cmpq	$0x2, (%rsp)
    00000222: 	seta	%dl
    00000225: 	cmpq	$-0x4, %rbp
    00000229: 	leaq	-0x4(%rax), %rcx
    0000022d: 	setbe	%al
    00000230: 	andl	%edx, %eax
    00000232: 	cmpq	$0xb, %rcx
    00000236: 	seta	%dl
    00000239: 	andl	%edx, %eax
    0000023b: 	movb	%al, -0x8(%rsp)
    0000023f: 	movq	%rcx, %rax
    00000242: 	shrq	$0x2, %rax
    00000246: 	addq	$0x1, %rax
    0000024a: 	movq	%rax, %r10
    0000024d: 	movq	%rax, 0x10(%rsp)
    00000252: 	andq	$-0x4, %rax
    00000256: 	movq	%rax, 0x8(%rsp)
    0000025b: 	leaq	(%rdi,%rax,4), %rax
    0000025f: 	shrq	$0x2, %r10
    00000263: 	movq	%rax, -0x38(%rsp)
    00000268: 	imulq	%rbx, %rax
    0000026c: 	movq	%rax, 0x78(%rsp)
    00000271: 	addq	%rbx, %rax
    00000274: 	movq	%rax, 0x70(%rsp)
    00000279: 	addq	%rbx, %rax
    0000027c: 	movq	%rax, 0x68(%rsp)
    00000281: 	addq	%rbx, %rax
    00000284: 	movq	%rax, 0x60(%rsp)
    00000289: 	nopl	(%rax) # Size: 7
.Ltmp535:
    00000290: 	movq	0x48(%rsp), %rdi
    00000295: 	cmpq	%rdi, -0x48(%rsp)
    0000029a: 	jbe	.Ltmp528 # Offset: 666
    000002a0: 	movq	-0x60(%rsp), %rcx
    000002a5: 	movq	0x78(%rsp), %rax
    000002aa: 	movq	%rdi, -0x70(%rsp)
    000002af: 	movq	0x50(%rsp), %r8
    000002b4: 	movq	0x40(%rsp), %r9
    000002b9: 	addq	%rcx, %rax
    000002bc: 	leaq	(%r12,%rax,4), %rax
    000002c0: 	movq	%rax, 0x30(%rsp)
    000002c5: 	movq	0x70(%rsp), %rax
    000002ca: 	addq	%rcx, %rax
    000002cd: 	leaq	(%r12,%rax,4), %rax
    000002d1: 	movq	%rax, 0x28(%rsp)
    000002d6: 	movq	0x68(%rsp), %rax
    000002db: 	addq	%rcx, %rax
    000002de: 	leaq	(%r12,%rax,4), %rax
    000002e2: 	movq	%rax, 0x20(%rsp)
    000002e7: 	movq	0x60(%rsp), %rax
    000002ec: 	addq	%rcx, %rax
    000002ef: 	leaq	(%r12,%rax,4), %rax
    000002f3: 	movq	%rax, 0x18(%rsp)
    000002f8: 	movq	0x80(%rsp), %rax
    00000300: 	movq	%rax, -0x58(%rsp)
    00000305: 	nopl	(%rax) # Size: 3
.Ltmp534:
    00000308: 	movq	-0x68(%rsp), %rax
    0000030d: 	pxor	%xmm7, %xmm7
    00000311: 	cmpq	-0x68(%rsp), %rbp
    00000316: 	jbe	.Ltmp529 # Offset: 790
    0000031c: 	cmpb	$0x0, -0x8(%rsp)
    00000321: 	je	.Ltmp530 # Offset: 801
    00000327: 	movq	-0x68(%rsp), %xmm10
    0000032e: 	pxor	%xmm11, %xmm11
    00000333: 	movq	-0x28(%rsp), %rdi
    00000338: 	xorl	%r15d, %r15d
    0000033b: 	movq	-0x20(%rsp), %rsi
    00000340: 	movq	-0x18(%rsp), %rcx
    00000345: 	movdqa	%xmm11, %xmm12
    0000034a: 	movdqa	%xmm11, %xmm13
    0000034f: 	movq	-0x58(%rsp), %rdx
    00000354: 	movq	-0x10(%rsp), %rax
    00000359: 	movhps	(%rsp), %xmm10
    0000035e: 	movdqa	%xmm11, %xmm7
    00000363: 	nopl	(%rax,%rax) # Size: 5
.Ltmp531:
    00000368: 	movdqu	(%rsi), %xmm6
    0000036c: 	movdqu	(%rdx), %xmm4
    00000370: 	addq	$0x1, %r15
    00000374: 	addq	$0x40, %rdx
    00000378: 	movdqu	-0x30(%rdx), %xmm2
    0000037d: 	movdqu	-0x20(%rdx), %xmm1
    00000382: 	movdqa	%xmm10, %xmm9
    00000387: 	paddq	%xmm15, %xmm10
    0000038c: 	pshufd	$0x1b, %xmm6, %xmm3
    00000391: 	pshufd	$0x55, %xmm4, %xmm5
    00000396: 	movdqu	-0x10(%rdx), %xmm0
    0000039b: 	paddq	%xmm14, %xmm9
    000003a0: 	movdqa	%xmm3, %xmm6
    000003a4: 	psrlq	$0x20, %xmm3
    000003a9: 	pmuludq	%xmm5, %xmm6
    000003ad: 	psrlq	$0x20, %xmm5
    000003b2: 	pmuludq	%xmm5, %xmm3
    000003b6: 	movdqu	(%rdi), %xmm5
    000003ba: 	pshufd	$0x1b, %xmm5, %xmm5
    000003bf: 	movdqa	%xmm5, %xmm8
    000003c4: 	psrlq	$0x20, %xmm5
    000003c9: 	pshufd	$0x8, %xmm6, %xmm6
    000003ce: 	pshufd	$0x8, %xmm3, %xmm3
    000003d3: 	punpckldq	%xmm3, %xmm6
    000003d7: 	pshufd	$0x0, %xmm4, %xmm3
    000003dc: 	pmuludq	%xmm3, %xmm8
    000003e1: 	psrlq	$0x20, %xmm3
    000003e6: 	pmuludq	%xmm5, %xmm3
    000003ea: 	movdqu	(%rcx), %xmm5
    000003ee: 	pshufd	$0x8, %xmm8, %xmm8
    000003f4: 	pshufd	$0x8, %xmm3, %xmm3
    000003f9: 	punpckldq	%xmm3, %xmm8
    000003fe: 	paddd	%xmm8, %xmm6
    00000403: 	pshufd	$0x1b, %xmm5, %xmm8
    00000409: 	pshufd	$0xaa, %xmm4, %xmm5
    0000040e: 	movdqa	%xmm8, %xmm3
    00000413: 	psrlq	$0x20, %xmm8
    00000419: 	pshufd	$0xff, %xmm4, %xmm4
    0000041e: 	pmuludq	%xmm5, %xmm3
    00000422: 	psrlq	$0x20, %xmm5
    00000427: 	pmuludq	%xmm8, %xmm5
    0000042c: 	pshufd	$0x8, %xmm3, %xmm3
    00000431: 	pshufd	$0x8, %xmm5, %xmm5
    00000436: 	punpckldq	%xmm5, %xmm3
    0000043a: 	paddd	%xmm6, %xmm3
    0000043e: 	movdqu	(%rax), %xmm6
    00000442: 	pshufd	$0x1b, %xmm6, %xmm5
    00000447: 	movdqa	%xmm5, %xmm6
    0000044b: 	psrlq	$0x20, %xmm5
    00000450: 	pmuludq	%xmm4, %xmm6
    00000454: 	psrlq	$0x20, %xmm4
    00000459: 	pmuludq	%xmm4, %xmm5
    0000045d: 	pshufd	$0x8, %xmm6, %xmm6
    00000462: 	pshufd	$0x8, %xmm5, %xmm5
    00000467: 	punpckldq	%xmm5, %xmm6
    0000046b: 	pshufd	$0x55, %xmm2, %xmm5
    00000470: 	paddd	%xmm6, %xmm3
    00000474: 	movdqu	(%rsi,%r14), %xmm6
    0000047a: 	paddd	%xmm3, %xmm7
    0000047e: 	pshufd	$0x1b, %xmm6, %xmm4
    00000483: 	movdqu	(%rdi,%r14), %xmm6
    00000489: 	movdqa	%xmm4, %xmm3
    0000048d: 	psrlq	$0x20, %xmm4
    00000492: 	pmuludq	%xmm5, %xmm3
    00000496: 	psrlq	$0x20, %xmm5
    0000049b: 	pmuludq	%xmm5, %xmm4
    0000049f: 	pshufd	$0x1b, %xmm6, %xmm5
    000004a4: 	pshufd	$0x0, %xmm2, %xmm6
    000004a9: 	pshufd	$0x8, %xmm3, %xmm3
    000004ae: 	pshufd	$0x8, %xmm4, %xmm4
    000004b3: 	punpckldq	%xmm4, %xmm3
    000004b7: 	movdqa	%xmm5, %xmm4
    000004bb: 	pmuludq	%xmm6, %xmm4
    000004bf: 	psrlq	$0x20, %xmm5
    000004c4: 	psrlq	$0x20, %xmm6
    000004c9: 	pmuludq	%xmm6, %xmm5
    000004cd: 	movdqu	(%rcx,%r14), %xmm6
    000004d3: 	pshufd	$0x8, %xmm4, %xmm4
    000004d8: 	pshufd	$0x8, %xmm5, %xmm5
    000004dd: 	punpckldq	%xmm5, %xmm4
    000004e1: 	pshufd	$0x1b, %xmm6, %xmm5
    000004e6: 	pshufd	$0xaa, %xmm2, %xmm6
    000004eb: 	paddd	%xmm4, %xmm3
    000004ef: 	movdqa	%xmm5, %xmm4
    000004f3: 	pshufd	$0xff, %xmm2, %xmm2
    000004f8: 	pmuludq	%xmm6, %xmm4
    000004fc: 	psrlq	$0x20, %xmm5
    00000501: 	psrlq	$0x20, %xmm6
    00000506: 	pmuludq	%xmm6, %xmm5
    0000050a: 	movdqu	(%rax,%r14), %xmm6
    00000510: 	pshufd	$0x8, %xmm4, %xmm4
    00000515: 	pshufd	$0x8, %xmm5, %xmm5
    0000051a: 	punpckldq	%xmm5, %xmm4
    0000051e: 	paddd	%xmm4, %xmm3
    00000522: 	pshufd	$0x1b, %xmm6, %xmm4
    00000527: 	movdqu	(%rsi,%r14,2), %xmm6
    0000052d: 	movdqa	%xmm4, %xmm5
    00000531: 	psrlq	$0x20, %xmm4
    00000536: 	pmuludq	%xmm2, %xmm5
    0000053a: 	psrlq	$0x20, %xmm2
    0000053f: 	pmuludq	%xmm2, %xmm4
    00000543: 	pshufd	$0x55, %xmm1, %xmm2
    00000548: 	pshufd	$0x8, %xmm5, %xmm5
    0000054d: 	pshufd	$0x8, %xmm4, %xmm4
    00000552: 	punpckldq	%xmm4, %xmm5
    00000556: 	paddd	%xmm5, %xmm3
    0000055a: 	pshufd	$0x0, %xmm1, %xmm5
    0000055f: 	paddd	%xmm3, %xmm13
    00000564: 	pshufd	$0x1b, %xmm6, %xmm3
    00000569: 	movdqu	(%rdi,%r14,2), %xmm6
    0000056f: 	movdqa	%xmm3, %xmm4
    00000573: 	psrlq	$0x20, %xmm3
    00000578: 	pmuludq	%xmm2, %xmm4
    0000057c: 	psrlq	$0x20, %xmm2
    00000581: 	pmuludq	%xmm2, %xmm3
    00000585: 	pshufd	$0x8, %xmm4, %xmm4
    0000058a: 	pshufd	$0x8, %xmm3, %xmm3
    0000058f: 	punpckldq	%xmm3, %xmm4
    00000593: 	pshufd	$0x1b, %xmm6, %xmm3
    00000598: 	movdqu	(%rcx,%r14,2), %xmm6
    0000059e: 	movdqa	%xmm3, %xmm2
    000005a2: 	psrlq	$0x20, %xmm3
    000005a7: 	pmuludq	%xmm5, %xmm2
    000005ab: 	psrlq	$0x20, %xmm5
    000005b0: 	pmuludq	%xmm5, %xmm3
    000005b4: 	pshufd	$0xaa, %xmm1, %xmm5
    000005b9: 	pshufd	$0xff, %xmm1, %xmm1
    000005be: 	pshufd	$0x8, %xmm2, %xmm2
    000005c3: 	pshufd	$0x8, %xmm3, %xmm3
    000005c8: 	punpckldq	%xmm3, %xmm2
    000005cc: 	pshufd	$0x1b, %xmm6, %xmm3
    000005d1: 	movdqu	(%rax,%r14,2), %xmm6
    000005d7: 	paddd	%xmm4, %xmm2
    000005db: 	movdqa	%xmm3, %xmm4
    000005df: 	pmuludq	%xmm5, %xmm4
    000005e3: 	psrlq	$0x20, %xmm3
    000005e8: 	psrlq	$0x20, %xmm5
    000005ed: 	pmuludq	%xmm5, %xmm3
    000005f1: 	pshufd	$0x8, %xmm4, %xmm4
    000005f6: 	pshufd	$0x8, %xmm3, %xmm3
    000005fb: 	punpckldq	%xmm3, %xmm4
    000005ff: 	pshufd	$0x1b, %xmm6, %xmm3
    00000604: 	movdqu	(%rdi,%r11), %xmm6
    0000060a: 	addq	%r13, %rdi
    0000060d: 	paddd	%xmm4, %xmm2
    00000611: 	movdqa	%xmm3, %xmm4
    00000615: 	pmuludq	%xmm1, %xmm4
    00000619: 	psrlq	$0x20, %xmm3
    0000061e: 	psrlq	$0x20, %xmm1
    00000623: 	pmuludq	%xmm1, %xmm3
    00000627: 	movdqu	(%rsi,%r11), %xmm1
    0000062d: 	addq	%r13, %rsi
    00000630: 	pshufd	$0x8, %xmm4, %xmm4
    00000635: 	pshufd	$0x8, %xmm3, %xmm3
    0000063a: 	punpckldq	%xmm3, %xmm4
    0000063e: 	pshufd	$0x55, %xmm0, %xmm3
    00000643: 	paddd	%xmm4, %xmm2
    00000647: 	pshufd	$0x0, %xmm0, %xmm4
    0000064c: 	paddd	%xmm2, %xmm12
    00000651: 	pshufd	$0x1b, %xmm1, %xmm2
    00000656: 	movdqa	%xmm2, %xmm1
    0000065a: 	psrlq	$0x20, %xmm2
    0000065f: 	pmuludq	%xmm3, %xmm1
    00000663: 	psrlq	$0x20, %xmm3
    00000668: 	pmuludq	%xmm3, %xmm2
    0000066c: 	pshufd	$0x8, %xmm1, %xmm1
    00000671: 	pshufd	$0x8, %xmm2, %xmm2
    00000676: 	punpckldq	%xmm2, %xmm1
    0000067a: 	pshufd	$0x1b, %xmm6, %xmm2
    0000067f: 	movdqu	(%rcx,%r11), %xmm6
    00000685: 	addq	%r13, %rcx
    00000688: 	movdqa	%xmm2, %xmm3
    0000068c: 	psrlq	$0x20, %xmm2
    00000691: 	pmuludq	%xmm4, %xmm3
    00000695: 	psrlq	$0x20, %xmm4
    0000069a: 	pmuludq	%xmm4, %xmm2
    0000069e: 	pshufd	$0xaa, %xmm0, %xmm4
    000006a3: 	pshufd	$0xff, %xmm0, %xmm0
    000006a8: 	pshufd	$0x8, %xmm3, %xmm3
    000006ad: 	pshufd	$0x8, %xmm2, %xmm2
    000006b2: 	punpckldq	%xmm2, %xmm3
    000006b6: 	pshufd	$0x1b, %xmm6, %xmm2
    000006bb: 	movdqu	(%rax,%r11), %xmm6
    000006c1: 	addq	%r13, %rax
    000006c4: 	paddd	%xmm3, %xmm1
    000006c8: 	movdqa	%xmm2, %xmm3
    000006cc: 	pmuludq	%xmm4, %xmm3
    000006d0: 	psrlq	$0x20, %xmm2
    000006d5: 	psrlq	$0x20, %xmm4
    000006da: 	pmuludq	%xmm4, %xmm2
    000006de: 	pshufd	$0x8, %xmm3, %xmm3
    000006e3: 	pshufd	$0x8, %xmm2, %xmm2
    000006e8: 	punpckldq	%xmm2, %xmm3
    000006ec: 	pshufd	$0x1b, %xmm6, %xmm2
    000006f1: 	paddd	%xmm3, %xmm1
    000006f5: 	movdqa	%xmm2, %xmm3
    000006f9: 	pmuludq	%xmm0, %xmm3
    000006fd: 	psrlq	$0x20, %xmm2
    00000702: 	psrlq	$0x20, %xmm0
    00000707: 	pmuludq	%xmm0, %xmm2
    0000070b: 	pshufd	$0x8, %xmm3, %xmm0
    00000710: 	pshufd	$0x8, %xmm2, %xmm2
    00000715: 	punpckldq	%xmm2, %xmm0
    00000719: 	paddd	%xmm0, %xmm1
    0000071d: 	paddd	%xmm1, %xmm11
    00000722: 	cmpq	%r15, %r10
    00000725: 	ja	.Ltmp531 # Offset: 1829
    0000072b: 	pshufd	$0x1b, %xmm7, %xmm7
    00000730: 	pshufd	$0x1b, %xmm13, %xmm13
    00000736: 	pshufd	$0x1b, %xmm12, %xmm12
    0000073c: 	movq	0x10(%rsp), %rcx
    00000741: 	paddd	%xmm13, %xmm7
    00000746: 	pshufd	$0x1b, %xmm11, %xmm11
    0000074c: 	movhlps	%xmm9, %xmm0
    00000750: 	paddd	%xmm12, %xmm7
    00000755: 	movq	%xmm0, %rax
    0000075a: 	paddd	%xmm11, %xmm7
    0000075f: 	cmpq	%rcx, 0x8(%rsp)
    00000764: 	je	.Ltmp529 # Offset: 1892
    0000076a: 	movq	-0x38(%rsp), %rax
    0000076f: 	movq	-0x50(%rsp), %rdi
    00000774: 	movq	0x20(%rsp), %rsi
    00000779: 	movq	0x28(%rsp), %rcx
    0000077e: 	addq	%r8, %rax
    00000781: 	movq	0x30(%rsp), %rdx
    00000786: 	leaq	(%rdi,%rax,4), %r15
    0000078a: 	movq	0x18(%rsp), %rdi
    0000078f: 	movq	-0x38(%rsp), %rax
    00000794: 	nopl	(%rax) # Size: 4
.Ltmp532:
    00000798: 	movdqu	(%rdx), %xmm1
    0000079c: 	movdqu	(%rdx), %xmm2
    000007a0: 	addq	$0x4, %rax
    000007a4: 	addq	$0x10, %r15
    000007a8: 	movdqu	-0x10(%r15), %xmm0
    000007ae: 	movdqu	(%rcx), %xmm4
    000007b2: 	addq	%r14, %rdx
    000007b5: 	psrlq	$0x20, %xmm2
    000007ba: 	pshufd	$0x0, %xmm0, %xmm3
    000007bf: 	psrlq	$0x20, %xmm4
    000007c4: 	pmuludq	%xmm3, %xmm1
    000007c8: 	psrlq	$0x20, %xmm3
    000007cd: 	pmuludq	%xmm3, %xmm2
    000007d1: 	movdqu	(%rcx), %xmm3
    000007d5: 	addq	%r14, %rcx
    000007d8: 	pshufd	$0x8, %xmm1, %xmm1
    000007dd: 	pshufd	$0x8, %xmm2, %xmm2
    000007e2: 	punpckldq	%xmm2, %xmm1
    000007e6: 	pshufd	$0x55, %xmm0, %xmm2
    000007eb: 	pmuludq	%xmm2, %xmm3
    000007ef: 	psrlq	$0x20, %xmm2
    000007f4: 	pmuludq	%xmm4, %xmm2
    000007f8: 	pshufd	$0xaa, %xmm0, %xmm4
    000007fd: 	pshufd	$0xff, %xmm0, %xmm0
    00000802: 	pshufd	$0x8, %xmm3, %xmm3
    00000807: 	pshufd	$0x8, %xmm2, %xmm2
    0000080c: 	punpckldq	%xmm2, %xmm3
    00000810: 	movdqu	(%rsi), %xmm2
    00000814: 	paddd	%xmm3, %xmm1
    00000818: 	movdqu	(%rsi), %xmm3
    0000081c: 	addq	%r14, %rsi
    0000081f: 	psrlq	$0x20, %xmm2
    00000824: 	pmuludq	%xmm4, %xmm3
    00000828: 	psrlq	$0x20, %xmm4
    0000082d: 	pmuludq	%xmm4, %xmm2
    00000831: 	pshufd	$0x8, %xmm3, %xmm3
    00000836: 	pshufd	$0x8, %xmm2, %xmm2
    0000083b: 	punpckldq	%xmm2, %xmm3
    0000083f: 	movdqu	(%rdi), %xmm2
    00000843: 	paddd	%xmm3, %xmm1
    00000847: 	movdqu	(%rdi), %xmm3
    0000084b: 	addq	%r14, %rdi
    0000084e: 	pmuludq	%xmm0, %xmm2
    00000852: 	psrlq	$0x20, %xmm0
    00000857: 	psrlq	$0x20, %xmm3
    0000085c: 	pmuludq	%xmm3, %xmm0
    00000860: 	pshufd	$0x8, %xmm2, %xmm2
    00000865: 	pshufd	$0x8, %xmm0, %xmm0
    0000086a: 	punpckldq	%xmm0, %xmm2
    0000086e: 	movdqa	%xmm1, %xmm0
    00000872: 	paddd	%xmm2, %xmm0
    00000876: 	paddd	%xmm0, %xmm7
    0000087a: 	cmpq	%rbp, %rax
    0000087d: 	jb	.Ltmp532 # Offset: 2173
.Ltmp529:
    00000883: 	movq	-0x40(%rsp), %rdi
    00000888: 	cmpq	%rax, %rdi
    0000088b: 	jbe	.Ltmp533 # Offset: 2187
    00000891: 	movq	%rbx, %rdx
    00000894: 	movq	-0x60(%rsp), %rsi
    00000899: 	movq	-0x50(%rsp), %r15
    0000089e: 	leaq	(%rax,%r8), %rcx
    000008a2: 	imulq	%rax, %rdx
    000008a6: 	movd	(%r15,%rcx,4), %xmm1
    000008ac: 	leaq	0x1(%rax), %rcx
    000008b0: 	addq	%rdx, %rsi
    000008b3: 	pshufd	$0x0, %xmm1, %xmm2
    000008b8: 	movdqu	(%r12,%rsi,4), %xmm0
    000008be: 	movdqa	%xmm0, %xmm1
    000008c2: 	psrlq	$0x20, %xmm0
    000008c7: 	pmuludq	%xmm2, %xmm1
    000008cb: 	psrlq	$0x20, %xmm2
    000008d0: 	pmuludq	%xmm2, %xmm0
    000008d4: 	pshufd	$0x8, %xmm1, %xmm1
    000008d9: 	pshufd	$0x8, %xmm0, %xmm0
    000008de: 	punpckldq	%xmm0, %xmm1
    000008e2: 	paddd	%xmm1, %xmm7
    000008e6: 	cmpq	%rcx, %rdi
    000008e9: 	jbe	.Ltmp533 # Offset: 2281
    000008ef: 	movq	-0x60(%rsp), %rsi
    000008f4: 	addq	%rbx, %rdx
    000008f7: 	addq	%r8, %rcx
    000008fa: 	movd	(%r15,%rcx,4), %xmm1
    00000900: 	leaq	0x2(%rax), %rcx
    00000904: 	addq	%rdx, %rsi
    00000907: 	movdqu	(%r12,%rsi,4), %xmm0
    0000090d: 	pshufd	$0x0, %xmm1, %xmm2
    00000912: 	movdqa	%xmm0, %xmm1
    00000916: 	psrlq	$0x20, %xmm0
    0000091b: 	pmuludq	%xmm2, %xmm1
    0000091f: 	psrlq	$0x20, %xmm2
    00000924: 	pmuludq	%xmm2, %xmm0
    00000928: 	pshufd	$0x8, %xmm1, %xmm1
    0000092d: 	pshufd	$0x8, %xmm0, %xmm0
    00000932: 	punpckldq	%xmm0, %xmm1
    00000936: 	paddd	%xmm1, %xmm7
    0000093a: 	cmpq	%rcx, %rdi
    0000093d: 	jbe	.Ltmp533 # Offset: 2365
    00000943: 	addq	%r8, %rcx
    00000946: 	addq	%rbx, %rdx
    00000949: 	addq	-0x60(%rsp), %rdx
    0000094e: 	addq	$0x3, %rax
    00000952: 	movd	(%r15,%rcx,4), %xmm0
    00000958: 	movdqu	(%r12,%rdx,4), %xmm1
    0000095e: 	pshufd	$0x0, %xmm0, %xmm2
    00000963: 	movdqu	(%r12,%rdx,4), %xmm0
    00000969: 	pmuludq	%xmm2, %xmm1
    0000096d: 	psrlq	$0x20, %xmm2
    00000972: 	psrlq	$0x20, %xmm0
    00000977: 	pmuludq	%xmm2, %xmm0
    0000097b: 	pshufd	$0x8, %xmm1, %xmm1
    00000980: 	pshufd	$0x8, %xmm0, %xmm0
    00000985: 	punpckldq	%xmm0, %xmm1
    00000989: 	paddd	%xmm1, %xmm7
    0000098d: 	cmpq	%rax, %rdi
    00000990: 	jbe	.Ltmp533 # Offset: 2448
    00000992: 	addq	%r8, %rax
    00000995: 	addq	%rbx, %rdx
    00000998: 	movdqu	(%r12,%rdx,4), %xmm0
    0000099e: 	movd	(%r15,%rax,4), %xmm1
    000009a4: 	pshufd	$0x0, %xmm1, %xmm2
    000009a9: 	movdqa	%xmm0, %xmm1
    000009ad: 	pmuludq	%xmm2, %xmm1
    000009b1: 	psrlq	$0x20, %xmm0
    000009b6: 	psrlq	$0x20, %xmm2
    000009bb: 	pmuludq	%xmm2, %xmm0
    000009bf: 	pshufd	$0x8, %xmm1, %xmm1
    000009c4: 	pshufd	$0x8, %xmm0, %xmm0
    000009c9: 	punpckldq	%xmm0, %xmm1
    000009cd: 	paddd	%xmm1, %xmm7
.Ltmp533:
    000009d1: 	movdqu	(%r9), %xmm0
    000009d6: 	movq	-0x30(%rsp), %rdi
    000009db: 	addq	%rbx, %r8
    000009de: 	addq	$0x1, -0x70(%rsp)
    000009e4: 	movq	-0x70(%rsp), %rax
    000009e9: 	paddd	%xmm7, %xmm0
    000009ed: 	addq	%rdi, -0x58(%rsp)
    000009f2: 	movups	%xmm0, (%r9)
    000009f6: 	addq	%rdi, %r9
    000009f9: 	cmpq	%rax, -0x48(%rsp)
    000009fe: 	jne	.Ltmp534 # Offset: 2558
.Ltmp528:
    00000a04: 	addq	$0x4, -0x60(%rsp)
    00000a0a: 	movq	-0x60(%rsp), %rax
    00000a0f: 	addq	$0x10, 0x40(%rsp)
    00000a15: 	addq	$0x10, -0x28(%rsp)
    00000a1b: 	addq	$0x10, -0x20(%rsp)
    00000a21: 	addq	$0x10, -0x18(%rsp)
    00000a27: 	addq	$0x10, -0x10(%rsp)
    00000a2d: 	cmpq	0x58(%rsp), %rax
    00000a32: 	jb	.Ltmp535 # Offset: 2610
    00000a38: 	cmpq	-0x60(%rsp), %rbx
    00000a3d: 	jbe	.Ltmp536 # Offset: 2621
.Ltmp547:
    00000a43: 	movq	0x48(%rsp), %rcx
    00000a48: 	cmpq	%rcx, -0x48(%rsp)
    00000a4d: 	jbe	.Ltmp536 # Offset: 2637
    00000a53: 	movq	0x38(%rsp), %rcx
    00000a58: 	movq	-0x60(%rsp), %rax
    00000a5d: 	movq	%r11, -0x8(%rsp)
    00000a62: 	addq	0xa8(%rsp), %rax
    00000a6a: 	movq	-0x50(%rsp), %rdx
    00000a6f: 	movq	%r13, -0x10(%rsp)
    00000a74: 	leaq	(%rcx,%rax,4), %rax
    00000a78: 	movq	-0x40(%rsp), %rcx
    00000a7d: 	movq	-0x30(%rsp), %r13
    00000a82: 	movq	%rax, -0x28(%rsp)
    00000a87: 	movq	0x50(%rsp), %rax
    00000a8c: 	movq	0xe0(%rsp), %r15
    00000a94: 	movq	0xe8(%rsp), %r12
    00000a9c: 	addq	%rcx, %rax
    00000a9f: 	leaq	(%rdx,%rax,4), %rax
    00000aa3: 	movq	%rax, -0x18(%rsp)
    00000aa8: 	movq	-0x68(%rsp), %rax
    00000aad: 	subq	%rcx, %rax
    00000ab0: 	shlq	$0x2, %rax
    00000ab4: 	movq	%rax, -0x20(%rsp)
.Ltmp542:
    00000ab9: 	movq	0x88(%rsp), %rax
    00000ac1: 	movq	-0x60(%rsp), %rcx
    00000ac6: 	movq	-0x18(%rsp), %r11
    00000acb: 	leaq	(%rax,%rcx,4), %rax
    00000acf: 	movq	%rax, -0x38(%rsp)
    00000ad4: 	movq	0x50(%rsp), %rax
    00000ad9: 	movq	%rax, -0x58(%rsp)
    00000ade: 	movq	0x48(%rsp), %rax
    00000ae3: 	movq	%rax, -0x70(%rsp)
    00000ae8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp541:
    00000af0: 	cmpq	-0x68(%rsp), %rbp
    00000af5: 	jbe	.Ltmp537 # Offset: 2805
    00000afb: 	movq	-0x20(%rsp), %rax
    00000b00: 	movq	-0x68(%rsp), %rdi
    00000b05: 	xorl	%r10d, %r10d
    00000b08: 	xorl	%r9d, %r9d
    00000b0b: 	xorl	%r8d, %r8d
    00000b0e: 	xorl	%ecx, %ecx
    00000b10: 	leaq	(%rax,%r11), %rdx
    00000b14: 	movq	-0x28(%rsp), %rax
    00000b19: 	nopl	(%rax) # Size: 7
.Ltmp538:
    00000b20: 	movl	(%rax), %esi
    00000b22: 	imull	(%rdx), %esi
    00000b25: 	addq	$0x4, %rdi
    00000b29: 	addq	$0x10, %rdx
    00000b2d: 	addl	%esi, %ecx
    00000b2f: 	movl	(%rax,%rbx,4), %esi
    00000b32: 	imull	-0xc(%rdx), %esi
    00000b36: 	addl	%esi, %r8d
    00000b39: 	movl	(%rax,%r15,4), %esi
    00000b3d: 	imull	-0x8(%rdx), %esi
    00000b41: 	addl	%esi, %r9d
    00000b44: 	movl	(%rax,%r12,4), %esi
    00000b48: 	imull	-0x4(%rdx), %esi
    00000b4c: 	addq	%r14, %rax
    00000b4f: 	addl	%esi, %r10d
    00000b52: 	cmpq	%rbp, %rdi
    00000b55: 	jb	.Ltmp538 # Offset: 2901
.Ltmp546:
    00000b57: 	cmpq	%rdi, -0x40(%rsp)
    00000b5c: 	jbe	.Ltmp539 # Offset: 2908
    00000b5e: 	movq	0x38(%rsp), %rdx
    00000b63: 	movq	%rbx, %rax
    00000b66: 	imulq	%rdi, %rax
    00000b6a: 	addq	-0x60(%rsp), %rax
    00000b6f: 	addq	-0x58(%rsp), %rdi
    00000b74: 	leaq	(%rdx,%rax,4), %rdx
    00000b78: 	movq	-0x50(%rsp), %rax
    00000b7d: 	leaq	(%rax,%rdi,4), %rax
    00000b81: 	nopl	(%rax) # Size: 7
.Ltmp540:
    00000b88: 	movl	(%rdx), %esi
    00000b8a: 	imull	(%rax), %esi
    00000b8d: 	addq	$0x4, %rax
    00000b91: 	addq	%r13, %rdx
    00000b94: 	addl	%esi, %ecx
    00000b96: 	cmpq	%rax, %r11
    00000b99: 	jne	.Ltmp540 # Offset: 2969
.Ltmp539:
    00000b9b: 	movq	-0x58(%rsp), %rax
    00000ba0: 	movq	-0x38(%rsp), %rdi
    00000ba5: 	addl	%r8d, %ecx
    00000ba8: 	addq	%r13, %r11
    00000bab: 	addl	%r9d, %ecx
    00000bae: 	addq	$0x1, -0x70(%rsp)
    00000bb4: 	addl	%r10d, %ecx
    00000bb7: 	addl	%ecx, (%rdi,%rax,4)
    00000bba: 	addq	%rbx, %rax
    00000bbd: 	movq	-0x70(%rsp), %rcx
    00000bc2: 	movq	%rax, -0x58(%rsp)
    00000bc7: 	cmpq	%rcx, -0x48(%rsp)
    00000bcc: 	jne	.Ltmp541 # Offset: 3020
    00000bd2: 	addq	$0x1, -0x60(%rsp)
    00000bd8: 	movq	-0x60(%rsp), %rax
    00000bdd: 	addq	$0x4, -0x28(%rsp)
    00000be3: 	cmpq	%rax, %rbx
    00000be6: 	ja	.Ltmp542 # Offset: 3046
    00000bec: 	movq	-0x10(%rsp), %r13
    00000bf1: 	movq	-0x8(%rsp), %r11
.Ltmp536:
    00000bf6: 	movq	0xc0(%rsp), %rcx
    00000bfe: 	subq	$-0x80, (%rsp)
    00000c03: 	addq	%rcx, 0xa8(%rsp)
    00000c0b: 	movq	0xc8(%rsp), %rcx
    00000c13: 	addq	%rcx, 0xb0(%rsp)
    00000c1b: 	addq	%rcx, 0xb8(%rsp)
    00000c23: 	cmpq	%rbx, 0x98(%rsp)
    00000c2b: 	jb	.Ltmp543 # Offset: 3115
    00000c31: 	movq	0xc0(%rsp), %rcx
    00000c39: 	movq	%rbx, %r12
    00000c3c: 	addq	%rcx, 0x50(%rsp)
    00000c41: 	movq	%r13, %rbx
    00000c44: 	movq	0xc8(%rsp), %rcx
    00000c4c: 	movq	%r11, %r13
    00000c4f: 	addq	%rcx, 0xa0(%rsp)
    00000c57: 	movq	0xd0(%rsp), %rcx
    00000c5f: 	cmpq	%rcx, 0x90(%rsp)
    00000c67: 	jb	.Ltmp544 # Offset: 3175
.Ltmp526:
    00000c6d: 	addq	$0x100, %rsp
    00000c74: 	popq	%rbx
    00000c75: 	popq	%rbp
    00000c76: 	popq	%r12
    00000c78: 	popq	%r13
    00000c7a: 	popq	%r14
    00000c7c: 	popq	%r15
    00000c7e: 	retq # Offset: 3198
    00000c7f: 	nop # Size: 1
.Ltmp530:
    00000c80: 	movq	-0x10(%rsp), %r15
    00000c85: 	movq	-0x18(%rsp), %rdi
    00000c8a: 	pxor	%xmm7, %xmm7
    00000c8e: 	movq	-0x20(%rsp), %rsi
    00000c93: 	movq	-0x28(%rsp), %rcx
    00000c98: 	movq	-0x58(%rsp), %rdx
    00000c9d: 	movq	-0x68(%rsp), %rax
    00000ca2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp545:
    00000ca8: 	movdqu	(%rdx), %xmm0
    00000cac: 	movdqu	(%rcx), %xmm1
    00000cb0: 	addq	$0x4, %rax
    00000cb4: 	addq	$0x10, %rdx
    00000cb8: 	movdqu	(%rcx), %xmm2
    00000cbc: 	movdqu	(%rsi), %xmm4
    00000cc0: 	addq	%r14, %rcx
    00000cc3: 	pshufd	$0x0, %xmm0, %xmm3
    00000cc8: 	pmuludq	%xmm3, %xmm1
    00000ccc: 	psrlq	$0x20, %xmm2
    00000cd1: 	psrlq	$0x20, %xmm3
    00000cd6: 	psrlq	$0x20, %xmm4
    00000cdb: 	pmuludq	%xmm3, %xmm2
    00000cdf: 	movdqu	(%rsi), %xmm3
    00000ce3: 	addq	%r14, %rsi
    00000ce6: 	pshufd	$0x8, %xmm1, %xmm1
    00000ceb: 	pshufd	$0x8, %xmm2, %xmm2
    00000cf0: 	punpckldq	%xmm2, %xmm1
    00000cf4: 	pshufd	$0x55, %xmm0, %xmm2
    00000cf9: 	pmuludq	%xmm2, %xmm3
    00000cfd: 	psrlq	$0x20, %xmm2
    00000d02: 	pmuludq	%xmm4, %xmm2
    00000d06: 	movdqu	(%rdi), %xmm4
    00000d0a: 	psrlq	$0x20, %xmm4
    00000d0f: 	pshufd	$0x8, %xmm3, %xmm3
    00000d14: 	pshufd	$0x8, %xmm2, %xmm2
    00000d19: 	punpckldq	%xmm2, %xmm3
    00000d1d: 	pshufd	$0xaa, %xmm0, %xmm2
    00000d22: 	pshufd	$0xff, %xmm0, %xmm0
    00000d27: 	paddd	%xmm3, %xmm1
    00000d2b: 	movdqu	(%rdi), %xmm3
    00000d2f: 	addq	%r14, %rdi
    00000d32: 	pmuludq	%xmm2, %xmm3
    00000d36: 	psrlq	$0x20, %xmm2
    00000d3b: 	pmuludq	%xmm4, %xmm2
    00000d3f: 	pshufd	$0x8, %xmm3, %xmm3
    00000d44: 	pshufd	$0x8, %xmm2, %xmm2
    00000d49: 	punpckldq	%xmm2, %xmm3
    00000d4d: 	movdqu	(%r15), %xmm2
    00000d52: 	paddd	%xmm3, %xmm1
    00000d56: 	movdqu	(%r15), %xmm3
    00000d5b: 	addq	%r14, %r15
    00000d5e: 	pmuludq	%xmm0, %xmm2
    00000d62: 	psrlq	$0x20, %xmm0
    00000d67: 	psrlq	$0x20, %xmm3
    00000d6c: 	pmuludq	%xmm3, %xmm0
    00000d70: 	pshufd	$0x8, %xmm2, %xmm2
    00000d75: 	pshufd	$0x8, %xmm0, %xmm0
    00000d7a: 	punpckldq	%xmm0, %xmm2
    00000d7e: 	movdqa	%xmm1, %xmm0
    00000d82: 	paddd	%xmm2, %xmm0
    00000d86: 	paddd	%xmm0, %xmm7
    00000d8a: 	cmpq	%rbp, %rax
    00000d8d: 	jb	.Ltmp545 # Offset: 3469
    00000d93: 	jmp	.Ltmp529 # Offset: 3475
.Ltmp537:
    00000d98: 	movq	-0x68(%rsp), %rdi
    00000d9d: 	xorl	%r10d, %r10d
    00000da0: 	xorl	%r9d, %r9d
    00000da3: 	xorl	%r8d, %r8d
    00000da6: 	xorl	%ecx, %ecx
    00000da8: 	jmp	.Ltmp546 # Offset: 3496
.Ltmp527:
    00000dad: 	movq	$0x0, -0x60(%rsp)
    00000db6: 	jmp	.Ltmp547 # Offset: 3510
DWARF CFI Instructions:
    <empty>
End of Function "_ZN28matmul_IJK_blocked_unrolled2IiEclEPKiS2_Pimm.isra.0/1(*2)"

Binary Function "_ZN28matmul_IJK_blocked_unrolled1IiEclEPKiS2_Pimm.isra.0/1(*2)" after disassembly {
  All names   : _ZN28matmul_IJK_blocked_unrolled1IiEclEPKiS2_Pimm.isra.0/1
                _ZN28matmul_IJK_blocked_unrolled1IiEclEPKiS2_Pimm.isra.0/matrix_multiply.cpp/1
  Number      : 64
  State       : disassembled
  Address     : 0x13460
  Size        : 0x2b5
  MaxSize     : 0x2c0
  Offset      : 0x13460
  Section     : .text
  Orc Section : .local.text._ZN28matmul_IJK_blocked_unrolled1IiEclEPKiS2_Pimm.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB063:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	subq	$0x30, %rsp
    0000000e: 	movq	%rdi, -0x38(%rsp)
    00000013: 	movq	%rsi, -0x30(%rsp)
    00000018: 	movq	%rdx, -0x8(%rsp)
    0000001d: 	movq	%rcx, 0x18(%rsp)
    00000022: 	testq	%rcx, %rcx
    00000025: 	je	.Ltmp548 # Offset: 37
    0000002b: 	testq	%r8, %r8
    0000002e: 	je	.Ltmp548 # Offset: 46
    00000034: 	movq	%r8, %rax
    00000037: 	leaq	(%r8,%r8), %r13
    0000003b: 	movq	%r8, %r12
    0000003e: 	movq	$0x0, -0x20(%rsp)
    00000047: 	shlq	$0x7, %rax
    0000004b: 	leaq	(%r13,%r8), %r15
    00000050: 	shlq	$0x4, %r12
    00000054: 	movq	%r13, %r14
    00000057: 	movq	%rax, 0x20(%rsp)
    0000005c: 	movq	%r8, %rax
    0000005f: 	leaq	(,%r8,4), %rbp
    00000067: 	movq	%r12, %r13
    0000006a: 	shlq	$0x9, %rax
    0000006e: 	movq	$0x0, (%rsp)
    00000076: 	movq	%r8, %r12
    00000079: 	movq	%rax, 0x28(%rsp)
    0000007e: 	movq	%r15, %rax
    00000081: 	movq	%rbp, %r15
    00000084: 	movq	%rax, %rbp
.Ltmp557:
    00000087: 	movq	(%rsp), %rbx
    0000008b: 	movq	0x18(%rsp), %rcx
    00000090: 	movq	$0x0, 0x8(%rsp)
    00000099: 	movq	%rbx, -0x18(%rsp)
    0000009e: 	movq	%rbx, %rax
    000000a1: 	subq	$-0x80, %rbx
    000000a5: 	cmpq	%rcx, %rbx
    000000a8: 	movq	%rbx, (%rsp)
    000000ac: 	cmovbeq	%rbx, %rcx
    000000b0: 	movq	-0x30(%rsp), %rbx
    000000b5: 	movq	%rcx, -0x50(%rsp)
    000000ba: 	movq	%rbx, 0x10(%rsp)
    000000bf: 	cmpq	%rax, %rcx
    000000c2: 	jbe	.Ltmp549 # Offset: 194
.Ltmp556:
    000000c8: 	movq	0x8(%rsp), %rdi
    000000cd: 	movq	-0x20(%rsp), %rax
    000000d2: 	movq	$0x0, -0x60(%rsp)
    000000db: 	movq	-0x38(%rsp), %rdx
    000000e0: 	movq	%rdi, %rcx
    000000e3: 	movq	%rdi, -0x68(%rsp)
    000000e8: 	subq	$-0x80, %rdi
    000000ec: 	cmpq	%r12, %rdi
    000000ef: 	movq	%rdi, 0x8(%rsp)
    000000f4: 	cmovaq	%r12, %rdi
    000000f8: 	addq	%rdi, %rax
    000000fb: 	movq	%rdi, -0x48(%rsp)
    00000100: 	leaq	-0x3(%rdi), %rbx
    00000104: 	leaq	(%rdx,%rax,4), %rax
    00000108: 	movq	%rax, -0x10(%rsp)
    0000010d: 	movq	%rcx, %rax
    00000110: 	subq	%rdi, %rax
    00000113: 	shlq	$0x2, %rax
    00000117: 	movq	%rax, -0x28(%rsp)
    0000011c: 	movq	0x10(%rsp), %rax
    00000121: 	movq	%rax, -0x40(%rsp)
    00000126: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp555:
    00000130: 	movq	-0x8(%rsp), %rax
    00000135: 	movq	-0x60(%rsp), %rcx
    0000013a: 	movq	-0x10(%rsp), %r11
    0000013f: 	leaq	(%rax,%rcx,4), %rax
    00000143: 	movq	%rax, -0x58(%rsp)
    00000148: 	movq	-0x20(%rsp), %rax
    0000014d: 	movq	%rax, -0x70(%rsp)
    00000152: 	movq	-0x18(%rsp), %rax
    00000157: 	movq	%rax, -0x78(%rsp)
    0000015c: 	nopl	(%rax) # Size: 4
.Ltmp554:
    00000160: 	cmpq	-0x68(%rsp), %rbx
    00000165: 	jbe	.Ltmp550 # Offset: 357
    0000016b: 	movq	-0x28(%rsp), %rax
    00000170: 	movq	-0x68(%rsp), %rdi
    00000175: 	xorl	%r10d, %r10d
    00000178: 	xorl	%r9d, %r9d
    0000017b: 	xorl	%r8d, %r8d
    0000017e: 	xorl	%ecx, %ecx
    00000180: 	leaq	(%rax,%r11), %rdx
    00000184: 	movq	-0x40(%rsp), %rax
    00000189: 	nopl	(%rax) # Size: 7
.Ltmp551:
    00000190: 	movl	(%rax), %esi
    00000192: 	imull	(%rdx), %esi
    00000195: 	addq	$0x4, %rdi
    00000199: 	addq	$0x10, %rdx
    0000019d: 	addl	%esi, %ecx
    0000019f: 	movl	(%rax,%r12,4), %esi
    000001a3: 	imull	-0xc(%rdx), %esi
    000001a7: 	addl	%esi, %r8d
    000001aa: 	movl	(%rax,%r14,4), %esi
    000001ae: 	imull	-0x8(%rdx), %esi
    000001b2: 	addl	%esi, %r9d
    000001b5: 	movl	(%rax,%rbp,4), %esi
    000001b8: 	imull	-0x4(%rdx), %esi
    000001bc: 	addq	%r13, %rax
    000001bf: 	addl	%esi, %r10d
    000001c2: 	cmpq	%rbx, %rdi
    000001c5: 	jb	.Ltmp551 # Offset: 453
.Ltmp558:
    000001c7: 	cmpq	%rdi, -0x48(%rsp)
    000001cc: 	jbe	.Ltmp552 # Offset: 460
    000001ce: 	movq	-0x30(%rsp), %rdx
    000001d3: 	movq	%r12, %rax
    000001d6: 	imulq	%rdi, %rax
    000001da: 	addq	-0x60(%rsp), %rax
    000001df: 	addq	-0x70(%rsp), %rdi
    000001e4: 	leaq	(%rdx,%rax,4), %rdx
    000001e8: 	movq	-0x38(%rsp), %rax
    000001ed: 	leaq	(%rax,%rdi,4), %rax
    000001f1: 	nopl	(%rax) # Size: 7
.Ltmp553:
    000001f8: 	movl	(%rdx), %esi
    000001fa: 	imull	(%rax), %esi
    000001fd: 	addq	$0x4, %rax
    00000201: 	addq	%r15, %rdx
    00000204: 	addl	%esi, %ecx
    00000206: 	cmpq	%rax, %r11
    00000209: 	jne	.Ltmp553 # Offset: 521
.Ltmp552:
    0000020b: 	movq	-0x70(%rsp), %rax
    00000210: 	movq	-0x58(%rsp), %rdi
    00000215: 	addl	%r8d, %ecx
    00000218: 	addq	%r15, %r11
    0000021b: 	addl	%r9d, %ecx
    0000021e: 	addq	$0x1, -0x78(%rsp)
    00000224: 	addl	%r10d, %ecx
    00000227: 	addl	%ecx, (%rdi,%rax,4)
    0000022a: 	addq	%r12, %rax
    0000022d: 	movq	-0x78(%rsp), %rdi
    00000232: 	movq	%rax, -0x70(%rsp)
    00000237: 	cmpq	%rdi, -0x50(%rsp)
    0000023c: 	jne	.Ltmp554 # Offset: 572
    00000242: 	addq	$0x1, -0x60(%rsp)
    00000248: 	movq	-0x60(%rsp), %rax
    0000024d: 	addq	$0x4, -0x40(%rsp)
    00000253: 	cmpq	%rax, %r12
    00000256: 	jne	.Ltmp555 # Offset: 598
    0000025c: 	movq	0x28(%rsp), %rbx
    00000261: 	addq	%rbx, 0x10(%rsp)
    00000266: 	cmpq	%r12, 0x8(%rsp)
    0000026b: 	jb	.Ltmp556 # Offset: 619
.Ltmp549:
    00000271: 	movq	0x20(%rsp), %rbx
    00000276: 	addq	%rbx, -0x20(%rsp)
    0000027b: 	movq	0x18(%rsp), %rbx
    00000280: 	cmpq	%rbx, (%rsp)
    00000284: 	jb	.Ltmp557 # Offset: 644
.Ltmp548:
    0000028a: 	addq	$0x30, %rsp
    0000028e: 	popq	%rbx
    0000028f: 	popq	%rbp
    00000290: 	popq	%r12
    00000292: 	popq	%r13
    00000294: 	popq	%r14
    00000296: 	popq	%r15
    00000298: 	retq # Offset: 664
    00000299: 	nopl	(%rax) # Size: 7
.Ltmp550:
    000002a0: 	movq	-0x68(%rsp), %rdi
    000002a5: 	xorl	%r10d, %r10d
    000002a8: 	xorl	%r9d, %r9d
    000002ab: 	xorl	%r8d, %r8d
    000002ae: 	xorl	%ecx, %ecx
    000002b0: 	jmp	.Ltmp558 # Offset: 688
DWARF CFI Instructions:
    <empty>
End of Function "_ZN28matmul_IJK_blocked_unrolled1IiEclEPKiS2_Pimm.isra.0/1(*2)"

Binary Function "_ZN28matmul_JIK_blocked_unrolled3IiEclEPKiS2_Pimm.isra.0/1(*2)" after disassembly {
  All names   : _ZN28matmul_JIK_blocked_unrolled3IiEclEPKiS2_Pimm.isra.0/1
                _ZN28matmul_JIK_blocked_unrolled3IiEclEPKiS2_Pimm.isra.0/matrix_multiply.cpp/1
  Number      : 65
  State       : disassembled
  Address     : 0x13720
  Size        : 0xd3d
  MaxSize     : 0xd40
  Offset      : 0x13720
  Section     : .text
  Orc Section : .local.text._ZN28matmul_JIK_blocked_unrolled3IiEclEPKiS2_Pimm.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB064:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	subq	$0x110, %rsp
    00000011: 	movq	%rdi, -0x40(%rsp)
    00000016: 	movq	%rsi, 0x38(%rsp)
    0000001b: 	movq	%rdx, 0xe8(%rsp)
    00000023: 	movq	%rcx, 0x80(%rsp)
    0000002b: 	testq	%r8, %r8
    0000002e: 	je	.Ltmp559 # Offset: 46
    00000034: 	testq	%rcx, %rcx
    00000037: 	je	.Ltmp559 # Offset: 55
    0000003d: 	leaq	(,%r8,4), %rax
    00000045: 	movq	%r8, %r10
    00000048: 	movq	%r8, %r14
    0000004b: 	movq	%rsi, 0xd8(%rsp)
    00000053: 	movq	%rax, 0x58(%rsp)
    00000058: 	leaq	(%r8,%r8), %rax
    0000005c: 	shlq	$0x6, %r10
    00000060: 	shlq	$0x4, %r14
    00000064: 	movq	%rax, 0xb8(%rsp)
    0000006c: 	addq	%r8, %rax
    0000006f: 	movq	%r14, %rbp
    00000072: 	movdqa	DATAat0x2d9b0(%rip), %xmm15
    0000007b: 	movq	%rax, 0xc0(%rsp)
    00000083: 	shlq	$0x4, %rax
    00000087: 	movdqa	DATAat0x2d9c0(%rip), %xmm14
    00000090: 	movq	$0x0, 0xc8(%rsp)
    0000009c: 	movq	%rax, %rbx
    0000009f: 	movq	%r8, %rax
    000000a2: 	shlq	$0x5, %rax
    000000a6: 	subq	%r8, %rax
    000000a9: 	movq	%rax, 0xf0(%rsp)
    000000b1: 	imulq	$0x1f4, %r8, %rax
    000000b8: 	movq	%rax, 0x100(%rsp)
    000000c0: 	movq	%rbx, %rax
    000000c3: 	movq	%r10, %rbx
    000000c6: 	movq	%r8, %r10
    000000c9: 	movq	%rax, %r14
.Ltmp575:
    000000cc: 	movq	0xc8(%rsp), %rax
    000000d4: 	movq	%rbx, %r13
    000000d7: 	movq	$0x4, -0x18(%rsp)
    000000e0: 	movq	%r10, %rbx
    000000e3: 	movq	$0x0, 0x98(%rsp)
    000000ef: 	movq	%rax, 0x68(%rsp)
    000000f4: 	subq	$-0x80, %rax
    000000f8: 	cmpq	%r10, %rax
    000000fb: 	movq	%rax, %rcx
    000000fe: 	movq	%rax, 0xc8(%rsp)
    00000106: 	leaq	-0x200(,%rax,4), %rax
    0000010e: 	movq	%rax, 0x90(%rsp)
    00000116: 	cmovaq	%r10, %rcx
    0000011a: 	movq	0xd8(%rsp), %rax
    00000122: 	movq	$0x0, 0xd0(%rsp)
    0000012e: 	movq	%rax, 0x70(%rsp)
    00000133: 	movq	0xf0(%rsp), %rax
    0000013b: 	leaq	-0x3(%rcx), %rdi
    0000013f: 	movq	%rcx, 0x40(%rsp)
    00000144: 	leaq	(%r10,%rax,4), %rax
    00000148: 	movq	%rdi, -0x30(%rsp)
    0000014d: 	movq	%rax, 0xf8(%rsp)
.Ltmp574:
    00000155: 	movq	0xd0(%rsp), %rdi
    0000015d: 	movq	-0x40(%rsp), %rdx
    00000162: 	movq	$0x0, -0x68(%rsp)
    0000016b: 	movq	$0x0, 0x48(%rsp)
    00000174: 	movq	%rdi, %rax
    00000177: 	movq	%rdi, -0x78(%rsp)
    0000017c: 	subq	$-0x80, %rdi
    00000180: 	cmpq	%rdi, %rbx
    00000183: 	movq	%rdi, %rcx
    00000186: 	movq	%rdi, 0xd0(%rsp)
    0000018e: 	leaq	(%rdx,%rax,4), %r11
    00000192: 	cmovbeq	%rbx, %rcx
    00000196: 	movq	0xe8(%rsp), %rdi
    0000019e: 	movq	%r11, -0x38(%rsp)
    000001a3: 	movq	%r11, 0xa0(%rsp)
    000001ab: 	leaq	-0x3(%rcx), %r12
    000001af: 	movq	%rcx, -0x48(%rsp)
    000001b4: 	movq	%rdi, 0x10(%rsp)
    000001b9: 	movq	%rax, %rdi
    000001bc: 	movq	%rcx, %rax
    000001bf: 	leaq	(%rdx,%rcx,4), %rcx
    000001c3: 	movq	%rcx, 0x60(%rsp)
    000001c8: 	movq	0x70(%rsp), %rdx
    000001cd: 	subq	%rdi, %rax
    000001d0: 	movq	0x58(%rsp), %rcx
    000001d5: 	addq	%rcx, %rdx
    000001d8: 	movq	%rdx, %rsi
    000001db: 	movq	%rdx, 0xa8(%rsp)
    000001e3: 	movq	%rcx, %rdx
    000001e6: 	addq	%rsi, %rcx
    000001e9: 	addq	%rcx, %rdx
    000001ec: 	cmpq	$0x2, -0x18(%rsp)
    000001f2: 	movq	%rcx, 0xb0(%rsp)
    000001fa: 	leaq	-0x4(%rax), %rcx
    000001fe: 	movq	%rdx, 0x78(%rsp)
    00000203: 	seta	%dl
    00000206: 	cmpq	$-0x4, %r12
    0000020a: 	setbe	%al
    0000020d: 	andl	%edx, %eax
    0000020f: 	cmpq	$0xb, %rcx
    00000213: 	seta	%dl
    00000216: 	andl	%edx, %eax
    00000218: 	movb	%al, -0x19(%rsp)
    0000021c: 	movq	%rcx, %rax
    0000021f: 	shrq	$0x2, %rax
    00000223: 	leaq	0x1(%rax), %rcx
    00000227: 	movq	%rcx, %rax
    0000022a: 	movq	%rcx, -0x8(%rsp)
    0000022f: 	andq	$-0x4, %rcx
    00000233: 	shrq	$0x2, %rax
    00000237: 	movq	%rcx, -0x10(%rsp)
    0000023c: 	movq	%rax, 0x88(%rsp)
    00000244: 	movq	0x98(%rsp), %rax
    0000024c: 	addq	0xb8(%rsp), %rax
    00000254: 	addq	%rbx, %rax
    00000257: 	movq	%rax, 0xe0(%rsp)
    0000025f: 	leaq	(%rdi,%rcx,4), %rax
    00000263: 	movq	%rax, (%rsp)
    00000267: 	imulq	%rbx, %rax
    0000026b: 	movq	%rax, 0x30(%rsp)
    00000270: 	addq	%rbx, %rax
    00000273: 	movq	%rax, 0x28(%rsp)
    00000278: 	addq	%rbx, %rax
    0000027b: 	movq	%rax, 0x20(%rsp)
    00000280: 	addq	%rbx, %rax
    00000283: 	movq	%rax, 0x18(%rsp)
    00000288: 	nopl	(%rax,%rax) # Size: 8
.Ltmp573:
    00000290: 	movq	0x68(%rsp), %r8
    00000295: 	movq	-0x30(%rsp), %rax
    0000029a: 	cmpq	%rax, %r8
    0000029d: 	jae	.Ltmp560 # Offset: 669
    000002a3: 	movq	-0x68(%rsp), %rcx
    000002a8: 	movq	(%rsp), %rax
    000002ac: 	movq	%rbx, -0x28(%rsp)
    000002b1: 	movq	-0x40(%rsp), %rdi
    000002b6: 	movq	0x78(%rsp), %r11
    000002bb: 	addq	%rcx, %rax
    000002be: 	movq	0x38(%rsp), %rbx
    000002c3: 	movq	0x10(%rsp), %r10
    000002c8: 	leaq	(%rdi,%rax,4), %rax
    000002cc: 	addq	0x90(%rsp), %r10
    000002d4: 	movq	%rax, 0x8(%rsp)
    000002d9: 	movq	0xa0(%rsp), %rax
    000002e1: 	leaq	(%rax,%rcx,4), %rax
    000002e5: 	movq	%rax, 0x50(%rsp)
    000002ea: 	movq	0xb0(%rsp), %rax
    000002f2: 	movq	%rax, -0x50(%rsp)
    000002f7: 	movq	0xa8(%rsp), %rax
    000002ff: 	movq	%rax, -0x58(%rsp)
    00000304: 	movq	0x70(%rsp), %rax
    00000309: 	movq	%rax, -0x60(%rsp)
    0000030e: 	movq	0x88(%rsp), %rax
    00000316: 	movq	%rax, -0x70(%rsp)
    0000031b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp566:
    00000320: 	movq	-0x78(%rsp), %rax
    00000325: 	pxor	%xmm7, %xmm7
    00000329: 	cmpq	-0x78(%rsp), %r12
    0000032e: 	jbe	.Ltmp561 # Offset: 814
    00000334: 	cmpb	$0x0, -0x19(%rsp)
    00000339: 	je	.Ltmp562 # Offset: 825
    0000033f: 	movq	-0x60(%rsp), %rdi
    00000344: 	movq	-0x58(%rsp), %rsi
    00000349: 	movq	%r11, %rax
    0000034c: 	xorl	%r15d, %r15d
    0000034f: 	pxor	%xmm11, %xmm11
    00000354: 	movq	-0x50(%rsp), %rcx
    00000359: 	movq	-0x38(%rsp), %rdx
    0000035e: 	movq	-0x70(%rsp), %r9
    00000363: 	movdqa	%xmm11, %xmm12
    00000368: 	movdqa	%xmm11, %xmm13
    0000036d: 	movq	-0x78(%rsp), %xmm10
    00000374: 	movdqa	%xmm11, %xmm7
    00000379: 	movhps	-0x18(%rsp), %xmm10
    0000037f: 	nop # Size: 1
.Ltmp563:
    00000380: 	movdqu	(%rsi), %xmm6
    00000384: 	movdqu	(%rdx), %xmm4
    00000388: 	addq	$0x1, %r15
    0000038c: 	addq	$0x40, %rdx
    00000390: 	movdqu	-0x30(%rdx), %xmm2
    00000395: 	movdqu	-0x20(%rdx), %xmm1
    0000039a: 	movdqa	%xmm10, %xmm9
    0000039f: 	paddq	%xmm15, %xmm10
    000003a4: 	pshufd	$0x1b, %xmm6, %xmm3
    000003a9: 	pshufd	$0x55, %xmm4, %xmm5
    000003ae: 	movdqu	-0x10(%rdx), %xmm0
    000003b3: 	paddq	%xmm14, %xmm9
    000003b8: 	movdqa	%xmm3, %xmm6
    000003bc: 	psrlq	$0x20, %xmm3
    000003c1: 	pmuludq	%xmm5, %xmm6
    000003c5: 	psrlq	$0x20, %xmm5
    000003ca: 	pmuludq	%xmm5, %xmm3
    000003ce: 	movdqu	(%rdi), %xmm5
    000003d2: 	pshufd	$0x1b, %xmm5, %xmm5
    000003d7: 	movdqa	%xmm5, %xmm8
    000003dc: 	psrlq	$0x20, %xmm5
    000003e1: 	pshufd	$0x8, %xmm6, %xmm6
    000003e6: 	pshufd	$0x8, %xmm3, %xmm3
    000003eb: 	punpckldq	%xmm3, %xmm6
    000003ef: 	pshufd	$0x0, %xmm4, %xmm3
    000003f4: 	pmuludq	%xmm3, %xmm8
    000003f9: 	psrlq	$0x20, %xmm3
    000003fe: 	pmuludq	%xmm5, %xmm3
    00000402: 	movdqu	(%rcx), %xmm5
    00000406: 	pshufd	$0x8, %xmm8, %xmm8
    0000040c: 	pshufd	$0x8, %xmm3, %xmm3
    00000411: 	punpckldq	%xmm3, %xmm8
    00000416: 	paddd	%xmm8, %xmm6
    0000041b: 	pshufd	$0x1b, %xmm5, %xmm8
    00000421: 	pshufd	$0xaa, %xmm4, %xmm5
    00000426: 	movdqa	%xmm8, %xmm3
    0000042b: 	psrlq	$0x20, %xmm8
    00000431: 	pshufd	$0xff, %xmm4, %xmm4
    00000436: 	pmuludq	%xmm5, %xmm3
    0000043a: 	psrlq	$0x20, %xmm5
    0000043f: 	pmuludq	%xmm8, %xmm5
    00000444: 	pshufd	$0x8, %xmm3, %xmm3
    00000449: 	pshufd	$0x8, %xmm5, %xmm5
    0000044e: 	punpckldq	%xmm5, %xmm3
    00000452: 	paddd	%xmm6, %xmm3
    00000456: 	movdqu	(%rax), %xmm6
    0000045a: 	pshufd	$0x1b, %xmm6, %xmm5
    0000045f: 	movdqa	%xmm5, %xmm6
    00000463: 	psrlq	$0x20, %xmm5
    00000468: 	pmuludq	%xmm4, %xmm6
    0000046c: 	psrlq	$0x20, %xmm4
    00000471: 	pmuludq	%xmm4, %xmm5
    00000475: 	pshufd	$0x8, %xmm6, %xmm6
    0000047a: 	pshufd	$0x8, %xmm5, %xmm5
    0000047f: 	punpckldq	%xmm5, %xmm6
    00000483: 	pshufd	$0x55, %xmm2, %xmm5
    00000488: 	paddd	%xmm6, %xmm3
    0000048c: 	movdqu	(%rsi,%rbp), %xmm6
    00000491: 	paddd	%xmm3, %xmm7
    00000495: 	pshufd	$0x1b, %xmm6, %xmm4
    0000049a: 	movdqu	(%rdi,%rbp), %xmm6
    0000049f: 	movdqa	%xmm4, %xmm3
    000004a3: 	psrlq	$0x20, %xmm4
    000004a8: 	pmuludq	%xmm5, %xmm3
    000004ac: 	psrlq	$0x20, %xmm5
    000004b1: 	pmuludq	%xmm5, %xmm4
    000004b5: 	pshufd	$0x1b, %xmm6, %xmm5
    000004ba: 	pshufd	$0x0, %xmm2, %xmm6
    000004bf: 	pshufd	$0x8, %xmm3, %xmm3
    000004c4: 	pshufd	$0x8, %xmm4, %xmm4
    000004c9: 	punpckldq	%xmm4, %xmm3
    000004cd: 	movdqa	%xmm5, %xmm4
    000004d1: 	pmuludq	%xmm6, %xmm4
    000004d5: 	psrlq	$0x20, %xmm5
    000004da: 	psrlq	$0x20, %xmm6
    000004df: 	pmuludq	%xmm6, %xmm5
    000004e3: 	movdqu	(%rcx,%rbp), %xmm6
    000004e8: 	pshufd	$0x8, %xmm4, %xmm4
    000004ed: 	pshufd	$0x8, %xmm5, %xmm5
    000004f2: 	punpckldq	%xmm5, %xmm4
    000004f6: 	pshufd	$0x1b, %xmm6, %xmm5
    000004fb: 	pshufd	$0xaa, %xmm2, %xmm6
    00000500: 	paddd	%xmm4, %xmm3
    00000504: 	movdqa	%xmm5, %xmm4
    00000508: 	pshufd	$0xff, %xmm2, %xmm2
    0000050d: 	pmuludq	%xmm6, %xmm4
    00000511: 	psrlq	$0x20, %xmm5
    00000516: 	psrlq	$0x20, %xmm6
    0000051b: 	pmuludq	%xmm6, %xmm5
    0000051f: 	movdqu	(%rax,%rbp), %xmm6
    00000524: 	pshufd	$0x8, %xmm4, %xmm4
    00000529: 	pshufd	$0x8, %xmm5, %xmm5
    0000052e: 	punpckldq	%xmm5, %xmm4
    00000532: 	paddd	%xmm4, %xmm3
    00000536: 	pshufd	$0x1b, %xmm6, %xmm4
    0000053b: 	movdqu	(%rsi,%rbp,2), %xmm6
    00000540: 	movdqa	%xmm4, %xmm5
    00000544: 	psrlq	$0x20, %xmm4
    00000549: 	pmuludq	%xmm2, %xmm5
    0000054d: 	psrlq	$0x20, %xmm2
    00000552: 	pmuludq	%xmm2, %xmm4
    00000556: 	pshufd	$0x55, %xmm1, %xmm2
    0000055b: 	pshufd	$0x8, %xmm5, %xmm5
    00000560: 	pshufd	$0x8, %xmm4, %xmm4
    00000565: 	punpckldq	%xmm4, %xmm5
    00000569: 	paddd	%xmm5, %xmm3
    0000056d: 	pshufd	$0x0, %xmm1, %xmm5
    00000572: 	paddd	%xmm3, %xmm13
    00000577: 	pshufd	$0x1b, %xmm6, %xmm3
    0000057c: 	movdqu	(%rdi,%rbp,2), %xmm6
    00000581: 	movdqa	%xmm3, %xmm4
    00000585: 	psrlq	$0x20, %xmm3
    0000058a: 	pmuludq	%xmm2, %xmm4
    0000058e: 	psrlq	$0x20, %xmm2
    00000593: 	pmuludq	%xmm2, %xmm3
    00000597: 	pshufd	$0x8, %xmm4, %xmm4
    0000059c: 	pshufd	$0x8, %xmm3, %xmm3
    000005a1: 	punpckldq	%xmm3, %xmm4
    000005a5: 	pshufd	$0x1b, %xmm6, %xmm3
    000005aa: 	movdqu	(%rcx,%rbp,2), %xmm6
    000005af: 	movdqa	%xmm3, %xmm2
    000005b3: 	psrlq	$0x20, %xmm3
    000005b8: 	pmuludq	%xmm5, %xmm2
    000005bc: 	psrlq	$0x20, %xmm5
    000005c1: 	pmuludq	%xmm5, %xmm3
    000005c5: 	pshufd	$0xaa, %xmm1, %xmm5
    000005ca: 	pshufd	$0xff, %xmm1, %xmm1
    000005cf: 	pshufd	$0x8, %xmm2, %xmm2
    000005d4: 	pshufd	$0x8, %xmm3, %xmm3
    000005d9: 	punpckldq	%xmm3, %xmm2
    000005dd: 	pshufd	$0x1b, %xmm6, %xmm3
    000005e2: 	movdqu	(%rax,%rbp,2), %xmm6
    000005e7: 	paddd	%xmm4, %xmm2
    000005eb: 	movdqa	%xmm3, %xmm4
    000005ef: 	pmuludq	%xmm5, %xmm4
    000005f3: 	psrlq	$0x20, %xmm3
    000005f8: 	psrlq	$0x20, %xmm5
    000005fd: 	pmuludq	%xmm5, %xmm3
    00000601: 	pshufd	$0x8, %xmm4, %xmm4
    00000606: 	pshufd	$0x8, %xmm3, %xmm3
    0000060b: 	punpckldq	%xmm3, %xmm4
    0000060f: 	pshufd	$0x1b, %xmm6, %xmm3
    00000614: 	movdqu	(%rdi,%r14), %xmm6
    0000061a: 	addq	%r13, %rdi
    0000061d: 	paddd	%xmm4, %xmm2
    00000621: 	movdqa	%xmm3, %xmm4
    00000625: 	pmuludq	%xmm1, %xmm4
    00000629: 	psrlq	$0x20, %xmm3
    0000062e: 	psrlq	$0x20, %xmm1
    00000633: 	pmuludq	%xmm1, %xmm3
    00000637: 	movdqu	(%rsi,%r14), %xmm1
    0000063d: 	addq	%r13, %rsi
    00000640: 	pshufd	$0x8, %xmm4, %xmm4
    00000645: 	pshufd	$0x8, %xmm3, %xmm3
    0000064a: 	punpckldq	%xmm3, %xmm4
    0000064e: 	pshufd	$0x55, %xmm0, %xmm3
    00000653: 	paddd	%xmm4, %xmm2
    00000657: 	pshufd	$0x0, %xmm0, %xmm4
    0000065c: 	paddd	%xmm2, %xmm12
    00000661: 	pshufd	$0x1b, %xmm1, %xmm2
    00000666: 	movdqa	%xmm2, %xmm1
    0000066a: 	psrlq	$0x20, %xmm2
    0000066f: 	pmuludq	%xmm3, %xmm1
    00000673: 	psrlq	$0x20, %xmm3
    00000678: 	pmuludq	%xmm3, %xmm2
    0000067c: 	pshufd	$0x8, %xmm1, %xmm1
    00000681: 	pshufd	$0x8, %xmm2, %xmm2
    00000686: 	punpckldq	%xmm2, %xmm1
    0000068a: 	pshufd	$0x1b, %xmm6, %xmm2
    0000068f: 	movdqu	(%rcx,%r14), %xmm6
    00000695: 	addq	%r13, %rcx
    00000698: 	movdqa	%xmm2, %xmm3
    0000069c: 	psrlq	$0x20, %xmm2
    000006a1: 	pmuludq	%xmm4, %xmm3
    000006a5: 	psrlq	$0x20, %xmm4
    000006aa: 	pmuludq	%xmm4, %xmm2
    000006ae: 	pshufd	$0xaa, %xmm0, %xmm4
    000006b3: 	pshufd	$0xff, %xmm0, %xmm0
    000006b8: 	pshufd	$0x8, %xmm3, %xmm3
    000006bd: 	pshufd	$0x8, %xmm2, %xmm2
    000006c2: 	punpckldq	%xmm2, %xmm3
    000006c6: 	pshufd	$0x1b, %xmm6, %xmm2
    000006cb: 	movdqu	(%rax,%r14), %xmm6
    000006d1: 	addq	%r13, %rax
    000006d4: 	paddd	%xmm3, %xmm1
    000006d8: 	movdqa	%xmm2, %xmm3
    000006dc: 	pmuludq	%xmm4, %xmm3
    000006e0: 	psrlq	$0x20, %xmm2
    000006e5: 	psrlq	$0x20, %xmm4
    000006ea: 	pmuludq	%xmm4, %xmm2
    000006ee: 	pshufd	$0x8, %xmm3, %xmm3
    000006f3: 	pshufd	$0x8, %xmm2, %xmm2
    000006f8: 	punpckldq	%xmm2, %xmm3
    000006fc: 	pshufd	$0x1b, %xmm6, %xmm2
    00000701: 	paddd	%xmm3, %xmm1
    00000705: 	movdqa	%xmm2, %xmm3
    00000709: 	pmuludq	%xmm0, %xmm3
    0000070d: 	psrlq	$0x20, %xmm2
    00000712: 	psrlq	$0x20, %xmm0
    00000717: 	pmuludq	%xmm0, %xmm2
    0000071b: 	pshufd	$0x8, %xmm3, %xmm0
    00000720: 	pshufd	$0x8, %xmm2, %xmm2
    00000725: 	punpckldq	%xmm2, %xmm0
    00000729: 	paddd	%xmm0, %xmm1
    0000072d: 	paddd	%xmm1, %xmm11
    00000732: 	cmpq	%r9, %r15
    00000735: 	jb	.Ltmp563 # Offset: 1845
    0000073b: 	pshufd	$0x1b, %xmm7, %xmm7
    00000740: 	pshufd	$0x1b, %xmm13, %xmm13
    00000746: 	pshufd	$0x1b, %xmm12, %xmm12
    0000074c: 	movq	%r9, -0x70(%rsp)
    00000751: 	paddd	%xmm13, %xmm7
    00000756: 	pshufd	$0x1b, %xmm11, %xmm11
    0000075c: 	movhlps	%xmm9, %xmm0
    00000760: 	movq	-0x8(%rsp), %rdi
    00000765: 	paddd	%xmm12, %xmm7
    0000076a: 	movq	%xmm0, %rax
    0000076f: 	paddd	%xmm11, %xmm7
    00000774: 	cmpq	%rdi, -0x10(%rsp)
    00000779: 	je	.Ltmp561 # Offset: 1913
    0000077f: 	movq	0x30(%rsp), %rax
    00000784: 	movq	0x8(%rsp), %rdx
    00000789: 	addq	%r8, %rax
    0000078c: 	leaq	(%rbx,%rax,4), %r15
    00000790: 	movq	0x28(%rsp), %rax
    00000795: 	addq	%r8, %rax
    00000798: 	leaq	(%rbx,%rax,4), %rdi
    0000079c: 	movq	0x20(%rsp), %rax
    000007a1: 	addq	%r8, %rax
    000007a4: 	leaq	(%rbx,%rax,4), %rsi
    000007a8: 	movq	0x18(%rsp), %rax
    000007ad: 	addq	%r8, %rax
    000007b0: 	leaq	(%rbx,%rax,4), %rcx
    000007b4: 	movq	(%rsp), %rax
    000007b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp564:
    000007c0: 	movdqu	(%rdx), %xmm0
    000007c4: 	movdqu	(%rdi), %xmm4
    000007c8: 	addq	$0x4, %rax
    000007cc: 	addq	$0x10, %rdx
    000007d0: 	movdqu	(%r15), %xmm1
    000007d5: 	movdqu	(%r15), %xmm2
    000007da: 	addq	%rbp, %r15
    000007dd: 	pshufd	$0x0, %xmm0, %xmm3
    000007e2: 	psrlq	$0x20, %xmm4
    000007e7: 	pmuludq	%xmm3, %xmm1
    000007eb: 	psrlq	$0x20, %xmm2
    000007f0: 	psrlq	$0x20, %xmm3
    000007f5: 	pmuludq	%xmm3, %xmm2
    000007f9: 	movdqu	(%rdi), %xmm3
    000007fd: 	addq	%rbp, %rdi
    00000800: 	pshufd	$0x8, %xmm1, %xmm1
    00000805: 	pshufd	$0x8, %xmm2, %xmm2
    0000080a: 	punpckldq	%xmm2, %xmm1
    0000080e: 	pshufd	$0x55, %xmm0, %xmm2
    00000813: 	pmuludq	%xmm2, %xmm3
    00000817: 	psrlq	$0x20, %xmm2
    0000081c: 	pmuludq	%xmm4, %xmm2
    00000820: 	pshufd	$0xaa, %xmm0, %xmm4
    00000825: 	pshufd	$0xff, %xmm0, %xmm0
    0000082a: 	pshufd	$0x8, %xmm3, %xmm3
    0000082f: 	pshufd	$0x8, %xmm2, %xmm2
    00000834: 	punpckldq	%xmm2, %xmm3
    00000838: 	movdqu	(%rsi), %xmm2
    0000083c: 	paddd	%xmm3, %xmm1
    00000840: 	movdqu	(%rsi), %xmm3
    00000844: 	addq	%rbp, %rsi
    00000847: 	psrlq	$0x20, %xmm2
    0000084c: 	pmuludq	%xmm4, %xmm3
    00000850: 	psrlq	$0x20, %xmm4
    00000855: 	pmuludq	%xmm4, %xmm2
    00000859: 	pshufd	$0x8, %xmm3, %xmm3
    0000085e: 	pshufd	$0x8, %xmm2, %xmm2
    00000863: 	punpckldq	%xmm2, %xmm3
    00000867: 	movdqu	(%rcx), %xmm2
    0000086b: 	paddd	%xmm3, %xmm1
    0000086f: 	movdqu	(%rcx), %xmm3
    00000873: 	addq	%rbp, %rcx
    00000876: 	pmuludq	%xmm0, %xmm2
    0000087a: 	psrlq	$0x20, %xmm0
    0000087f: 	psrlq	$0x20, %xmm3
    00000884: 	pmuludq	%xmm3, %xmm0
    00000888: 	pshufd	$0x8, %xmm2, %xmm2
    0000088d: 	pshufd	$0x8, %xmm0, %xmm0
    00000892: 	punpckldq	%xmm0, %xmm2
    00000896: 	movdqa	%xmm1, %xmm0
    0000089a: 	paddd	%xmm2, %xmm0
    0000089e: 	paddd	%xmm0, %xmm7
    000008a2: 	cmpq	%rax, %r12
    000008a5: 	ja	.Ltmp564 # Offset: 2213
.Ltmp577:
    000008ab: 	movq	%r9, -0x70(%rsp)
.Ltmp561:
    000008b0: 	movq	-0x48(%rsp), %rdi
    000008b5: 	cmpq	%rax, %rdi
    000008b8: 	jbe	.Ltmp565 # Offset: 2232
    000008be: 	movq	-0x28(%rsp), %r15
    000008c3: 	movq	-0x68(%rsp), %rsi
    000008c8: 	movq	-0x40(%rsp), %r9
    000008cd: 	movq	%r15, %rdx
    000008d0: 	leaq	(%rax,%rsi), %rcx
    000008d4: 	imulq	%rax, %rdx
    000008d8: 	movd	(%r9,%rcx,4), %xmm1
    000008de: 	leaq	0x1(%rax), %rcx
    000008e2: 	pshufd	$0x0, %xmm1, %xmm2
    000008e7: 	leaq	(%rdx,%r8), %rsi
    000008eb: 	movdqu	(%rbx,%rsi,4), %xmm0
    000008f0: 	movdqa	%xmm0, %xmm1
    000008f4: 	psrlq	$0x20, %xmm0
    000008f9: 	pmuludq	%xmm2, %xmm1
    000008fd: 	psrlq	$0x20, %xmm2
    00000902: 	pmuludq	%xmm2, %xmm0
    00000906: 	pshufd	$0x8, %xmm1, %xmm1
    0000090b: 	pshufd	$0x8, %xmm0, %xmm0
    00000910: 	punpckldq	%xmm0, %xmm1
    00000914: 	paddd	%xmm1, %xmm7
    00000918: 	cmpq	%rcx, %rdi
    0000091b: 	jbe	.Ltmp565 # Offset: 2331
    00000921: 	addq	%r15, %rdx
    00000924: 	addq	-0x68(%rsp), %rcx
    00000929: 	leaq	(%rdx,%r8), %rsi
    0000092d: 	movd	(%r9,%rcx,4), %xmm1
    00000933: 	leaq	0x2(%rax), %rcx
    00000937: 	movdqu	(%rbx,%rsi,4), %xmm0
    0000093c: 	pshufd	$0x0, %xmm1, %xmm2
    00000941: 	movdqa	%xmm0, %xmm1
    00000945: 	psrlq	$0x20, %xmm0
    0000094a: 	pmuludq	%xmm2, %xmm1
    0000094e: 	psrlq	$0x20, %xmm2
    00000953: 	pmuludq	%xmm2, %xmm0
    00000957: 	pshufd	$0x8, %xmm1, %xmm1
    0000095c: 	pshufd	$0x8, %xmm0, %xmm0
    00000961: 	punpckldq	%xmm0, %xmm1
    00000965: 	paddd	%xmm1, %xmm7
    00000969: 	cmpq	%rcx, %rdi
    0000096c: 	jbe	.Ltmp565 # Offset: 2412
    00000972: 	movq	-0x68(%rsp), %rsi
    00000977: 	addq	%r15, %rdx
    0000097a: 	addq	$0x3, %rax
    0000097e: 	addq	%r8, %rdx
    00000981: 	addq	%rsi, %rcx
    00000984: 	movdqu	(%rbx,%rdx,4), %xmm1
    00000989: 	movd	(%r9,%rcx,4), %xmm0
    0000098f: 	pshufd	$0x0, %xmm0, %xmm2
    00000994: 	movdqu	(%rbx,%rdx,4), %xmm0
    00000999: 	pmuludq	%xmm2, %xmm1
    0000099d: 	psrlq	$0x20, %xmm2
    000009a2: 	psrlq	$0x20, %xmm0
    000009a7: 	pmuludq	%xmm2, %xmm0
    000009ab: 	pshufd	$0x8, %xmm1, %xmm1
    000009b0: 	pshufd	$0x8, %xmm0, %xmm0
    000009b5: 	punpckldq	%xmm0, %xmm1
    000009b9: 	paddd	%xmm1, %xmm7
    000009bd: 	cmpq	%rax, %rdi
    000009c0: 	jbe	.Ltmp565 # Offset: 2496
    000009c2: 	addq	%rsi, %rax
    000009c5: 	addq	%r15, %rdx
    000009c8: 	movdqu	(%rbx,%rdx,4), %xmm0
    000009cd: 	movd	(%r9,%rax,4), %xmm1
    000009d3: 	pshufd	$0x0, %xmm1, %xmm2
    000009d8: 	movdqa	%xmm0, %xmm1
    000009dc: 	pmuludq	%xmm2, %xmm1
    000009e0: 	psrlq	$0x20, %xmm0
    000009e5: 	psrlq	$0x20, %xmm2
    000009ea: 	pmuludq	%xmm2, %xmm0
    000009ee: 	pshufd	$0x8, %xmm1, %xmm1
    000009f3: 	pshufd	$0x8, %xmm0, %xmm0
    000009f8: 	punpckldq	%xmm0, %xmm1
    000009fc: 	paddd	%xmm1, %xmm7
.Ltmp565:
    00000a00: 	movdqu	(%r10), %xmm0
    00000a05: 	addq	$0x10, -0x60(%rsp)
    00000a0b: 	addq	$0x4, %r8
    00000a0f: 	addq	$0x10, %r10
    00000a13: 	addq	$0x10, -0x58(%rsp)
    00000a19: 	addq	$0x10, %r11
    00000a1d: 	paddd	%xmm7, %xmm0
    00000a21: 	addq	$0x10, -0x50(%rsp)
    00000a27: 	movups	%xmm0, -0x10(%r10)
    00000a2c: 	cmpq	-0x30(%rsp), %r8
    00000a31: 	jb	.Ltmp566 # Offset: 2609
    00000a37: 	movq	-0x28(%rsp), %rbx
.Ltmp560:
    00000a3c: 	cmpq	%r8, 0x40(%rsp)
    00000a41: 	jbe	.Ltmp567 # Offset: 2625
    00000a47: 	movq	0x98(%rsp), %rax
    00000a4f: 	movq	0x38(%rsp), %rcx
    00000a54: 	movq	%r8, -0x70(%rsp)
    00000a59: 	movq	%r13, -0x58(%rsp)
    00000a5e: 	movq	0x58(%rsp), %r11
    00000a63: 	addq	%r8, %rax
    00000a66: 	movq	%r14, -0x50(%rsp)
    00000a6b: 	movq	0x60(%rsp), %r13
    00000a70: 	leaq	(%rcx,%rax,4), %rax
    00000a74: 	movq	0xb8(%rsp), %r15
    00000a7c: 	movq	0xc0(%rsp), %r14
    00000a84: 	movq	%rax, -0x60(%rsp)
.Ltmp572:
    00000a89: 	cmpq	-0x78(%rsp), %r12
    00000a8e: 	jbe	.Ltmp568 # Offset: 2702
    00000a94: 	movq	-0x38(%rsp), %rdx
    00000a99: 	movq	-0x60(%rsp), %rax
    00000a9e: 	xorl	%r10d, %r10d
    00000aa1: 	xorl	%r9d, %r9d
    00000aa4: 	movq	-0x78(%rsp), %rdi
    00000aa9: 	xorl	%r8d, %r8d
    00000aac: 	xorl	%ecx, %ecx
    00000aae: 	nop # Size: 2
.Ltmp569:
    00000ab0: 	movl	(%rax), %esi
    00000ab2: 	imull	(%rdx), %esi
    00000ab5: 	addq	$0x4, %rdi
    00000ab9: 	addq	$0x10, %rdx
    00000abd: 	addl	%esi, %ecx
    00000abf: 	movl	(%rax,%rbx,4), %esi
    00000ac2: 	imull	-0xc(%rdx), %esi
    00000ac6: 	addl	%esi, %r8d
    00000ac9: 	movl	(%rax,%r15,4), %esi
    00000acd: 	imull	-0x8(%rdx), %esi
    00000ad1: 	addl	%esi, %r9d
    00000ad4: 	movl	(%rax,%r14,4), %esi
    00000ad8: 	imull	-0x4(%rdx), %esi
    00000adc: 	addq	%rbp, %rax
    00000adf: 	addl	%esi, %r10d
    00000ae2: 	cmpq	%r12, %rdi
    00000ae5: 	jb	.Ltmp569 # Offset: 2789
.Ltmp578:
    00000ae7: 	cmpq	%rdi, -0x48(%rsp)
    00000aec: 	jbe	.Ltmp570 # Offset: 2796
    00000aee: 	movq	0x38(%rsp), %rdx
    00000af3: 	movq	%rbx, %rax
    00000af6: 	imulq	%rdi, %rax
    00000afa: 	addq	-0x70(%rsp), %rax
    00000aff: 	addq	-0x68(%rsp), %rdi
    00000b04: 	leaq	(%rdx,%rax,4), %rdx
    00000b08: 	movq	-0x40(%rsp), %rax
    00000b0d: 	leaq	(%rax,%rdi,4), %rax
    00000b11: 	nopl	(%rax) # Size: 7
.Ltmp571:
    00000b18: 	movl	(%rdx), %esi
    00000b1a: 	imull	(%rax), %esi
    00000b1d: 	addq	$0x4, %rax
    00000b21: 	addq	%r11, %rdx
    00000b24: 	addl	%esi, %ecx
    00000b26: 	cmpq	%r13, %rax
    00000b29: 	jne	.Ltmp571 # Offset: 2857
.Ltmp570:
    00000b2b: 	movq	-0x70(%rsp), %rax
    00000b30: 	movq	0x10(%rsp), %rdi
    00000b35: 	addl	%r8d, %ecx
    00000b38: 	addl	%r9d, %ecx
    00000b3b: 	addq	$0x4, -0x60(%rsp)
    00000b41: 	addl	%r10d, %ecx
    00000b44: 	addl	%ecx, (%rdi,%rax,4)
    00000b47: 	addq	$0x1, %rax
    00000b4b: 	movq	%rax, -0x70(%rsp)
    00000b50: 	cmpq	%rax, 0x40(%rsp)
    00000b55: 	jne	.Ltmp572 # Offset: 2901
    00000b5b: 	movq	-0x58(%rsp), %r13
    00000b60: 	movq	-0x50(%rsp), %r14
.Ltmp567:
    00000b65: 	movq	0x58(%rsp), %rcx
    00000b6a: 	addq	$0x1, 0x48(%rsp)
    00000b70: 	addq	%rbx, -0x68(%rsp)
    00000b75: 	movq	0x48(%rsp), %rax
    00000b7a: 	addq	%rcx, 0x10(%rsp)
    00000b7f: 	addq	%rcx, -0x38(%rsp)
    00000b84: 	addq	%rcx, 0x60(%rsp)
    00000b89: 	cmpq	0x80(%rsp), %rax
    00000b91: 	jne	.Ltmp573 # Offset: 2961
    00000b97: 	movq	0xe0(%rsp), %rax
    00000b9f: 	addq	0xf8(%rsp), %rax
    00000ba7: 	movq	%rax, 0x98(%rsp)
    00000baf: 	movq	0x78(%rsp), %rax
    00000bb4: 	addq	0x100(%rsp), %rax
    00000bbc: 	subq	$-0x80, -0x18(%rsp)
    00000bc2: 	movq	%rax, 0x70(%rsp)
    00000bc7: 	cmpq	0xd0(%rsp), %rbx
    00000bcf: 	ja	.Ltmp574 # Offset: 3023
    00000bd5: 	addq	$0x200, 0xd8(%rsp)
    00000be1: 	movq	%rbx, %r10
    00000be4: 	movq	%r13, %rbx
    00000be7: 	cmpq	%r10, 0xc8(%rsp)
    00000bef: 	jb	.Ltmp575 # Offset: 3055
.Ltmp559:
    00000bf5: 	addq	$0x110, %rsp
    00000bfc: 	popq	%rbx
    00000bfd: 	popq	%rbp
    00000bfe: 	popq	%r12
    00000c00: 	popq	%r13
    00000c02: 	popq	%r14
    00000c04: 	popq	%r15
    00000c06: 	retq # Offset: 3078
    00000c07: 	nopw	(%rax,%rax) # Size: 9
.Ltmp562:
    00000c10: 	movq	-0x50(%rsp), %rdi
    00000c15: 	movq	-0x58(%rsp), %rsi
    00000c1a: 	movq	%r11, %r15
    00000c1d: 	pxor	%xmm7, %xmm7
    00000c21: 	movq	-0x60(%rsp), %rcx
    00000c26: 	movq	0x50(%rsp), %rdx
    00000c2b: 	movq	-0x78(%rsp), %rax
    00000c30: 	movq	-0x70(%rsp), %r9
    00000c35: 	nopl	(%rax) # Size: 3
.Ltmp576:
    00000c38: 	movdqu	(%rdx), %xmm0
    00000c3c: 	movdqu	(%rcx), %xmm1
    00000c40: 	addq	$0x4, %rax
    00000c44: 	addq	$0x10, %rdx
    00000c48: 	movdqu	(%rcx), %xmm2
    00000c4c: 	movdqu	(%rsi), %xmm4
    00000c50: 	addq	%rbp, %rcx
    00000c53: 	pshufd	$0x0, %xmm0, %xmm3
    00000c58: 	pmuludq	%xmm3, %xmm1
    00000c5c: 	psrlq	$0x20, %xmm2
    00000c61: 	psrlq	$0x20, %xmm3
    00000c66: 	psrlq	$0x20, %xmm4
    00000c6b: 	pmuludq	%xmm3, %xmm2
    00000c6f: 	movdqu	(%rsi), %xmm3
    00000c73: 	addq	%rbp, %rsi
    00000c76: 	pshufd	$0x8, %xmm1, %xmm1
    00000c7b: 	pshufd	$0x8, %xmm2, %xmm2
    00000c80: 	punpckldq	%xmm2, %xmm1
    00000c84: 	pshufd	$0x55, %xmm0, %xmm2
    00000c89: 	pmuludq	%xmm2, %xmm3
    00000c8d: 	psrlq	$0x20, %xmm2
    00000c92: 	pmuludq	%xmm4, %xmm2
    00000c96: 	movdqu	(%rdi), %xmm4
    00000c9a: 	psrlq	$0x20, %xmm4
    00000c9f: 	pshufd	$0x8, %xmm3, %xmm3
    00000ca4: 	pshufd	$0x8, %xmm2, %xmm2
    00000ca9: 	punpckldq	%xmm2, %xmm3
    00000cad: 	pshufd	$0xaa, %xmm0, %xmm2
    00000cb2: 	pshufd	$0xff, %xmm0, %xmm0
    00000cb7: 	paddd	%xmm3, %xmm1
    00000cbb: 	movdqu	(%rdi), %xmm3
    00000cbf: 	addq	%rbp, %rdi
    00000cc2: 	pmuludq	%xmm2, %xmm3
    00000cc6: 	psrlq	$0x20, %xmm2
    00000ccb: 	pmuludq	%xmm4, %xmm2
    00000ccf: 	pshufd	$0x8, %xmm3, %xmm3
    00000cd4: 	pshufd	$0x8, %xmm2, %xmm2
    00000cd9: 	punpckldq	%xmm2, %xmm3
    00000cdd: 	movdqu	(%r15), %xmm2
    00000ce2: 	paddd	%xmm3, %xmm1
    00000ce6: 	movdqu	(%r15), %xmm3
    00000ceb: 	addq	%rbp, %r15
    00000cee: 	pmuludq	%xmm0, %xmm2
    00000cf2: 	psrlq	$0x20, %xmm0
    00000cf7: 	psrlq	$0x20, %xmm3
    00000cfc: 	pmuludq	%xmm3, %xmm0
    00000d00: 	pshufd	$0x8, %xmm2, %xmm2
    00000d05: 	pshufd	$0x8, %xmm0, %xmm0
    00000d0a: 	punpckldq	%xmm0, %xmm2
    00000d0e: 	movdqa	%xmm1, %xmm0
    00000d12: 	paddd	%xmm2, %xmm0
    00000d16: 	paddd	%xmm0, %xmm7
    00000d1a: 	cmpq	%rax, %r12
    00000d1d: 	ja	.Ltmp576 # Offset: 3357
    00000d23: 	jmp	.Ltmp577 # Offset: 3363
.Ltmp568:
    00000d28: 	movq	-0x78(%rsp), %rdi
    00000d2d: 	xorl	%r10d, %r10d
    00000d30: 	xorl	%r9d, %r9d
    00000d33: 	xorl	%r8d, %r8d
    00000d36: 	xorl	%ecx, %ecx
    00000d38: 	jmp	.Ltmp578 # Offset: 3384
DWARF CFI Instructions:
    <empty>
End of Function "_ZN28matmul_JIK_blocked_unrolled3IiEclEPKiS2_Pimm.isra.0/1(*2)"

Binary Function "_ZN28matmul_JIK_blocked_unrolled2IiEclEPKiS2_Pimm.isra.0/1(*2)" after disassembly {
  All names   : _ZN28matmul_JIK_blocked_unrolled2IiEclEPKiS2_Pimm.isra.0/1
                _ZN28matmul_JIK_blocked_unrolled2IiEclEPKiS2_Pimm.isra.0/matrix_multiply.cpp/1
  Number      : 66
  State       : disassembled
  Address     : 0x14460
  Size        : 0x110f
  MaxSize     : 0x1110
  Offset      : 0x14460
  Section     : .text
  Orc Section : .local.text._ZN28matmul_JIK_blocked_unrolled2IiEclEPKiS2_Pimm.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB065:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	subq	$0x1d0, %rsp
    00000011: 	movq	%rdi, 0x60(%rsp)
    00000016: 	movq	%rsi, 0x48(%rsp)
    0000001b: 	movq	%rdx, 0x1a0(%rsp)
    00000023: 	movq	%rcx, 0x178(%rsp)
    0000002b: 	movq	%r8, -0x18(%rsp)
    00000030: 	testq	%r8, %r8
    00000033: 	je	.Ltmp579 # Offset: 51
    00000039: 	leaq	-0x3(%rcx), %rdi
    0000003d: 	movq	%r8, %rax
    00000040: 	leaq	(,%r8,4), %rcx
    00000048: 	movq	%rsi, 0x198(%rsp)
    00000050: 	addq	%rcx, %rdx
    00000053: 	movq	%rdi, 0x158(%rsp)
    0000005b: 	movq	%r8, %rdi
    0000005e: 	negq	%rax
    00000061: 	shlq	$0x9, %rdi
    00000065: 	movq	%r8, %rbx
    00000068: 	movq	%rdx, 0x1a8(%rsp)
    00000070: 	addq	%rcx, %rdx
    00000073: 	movq	%rdi, 0x1c0(%rsp)
    0000007b: 	leaq	(%r8,%r8), %rdi
    0000007f: 	shlq	$0x4, %rbx
    00000083: 	movq	%rdx, 0x1b0(%rsp)
    0000008b: 	addq	%rcx, %rdx
    0000008e: 	movq	%rdi, 0x40(%rsp)
    00000093: 	movq	%rdx, 0x1b8(%rsp)
    0000009b: 	movq	%rdi, %rdx
    0000009e: 	addq	%r8, %rdi
    000000a1: 	movq	%rdi, 0x140(%rsp)
    000000a9: 	shlq	$0x4, %rdi
    000000ad: 	movq	%rcx, 0x138(%rsp)
    000000b5: 	movq	%r8, %rcx
    000000b8: 	movq	%rdi, 0xe0(%rsp)
    000000c0: 	movq	%rdx, %rdi
    000000c3: 	shlq	$0x6, %rcx
    000000c7: 	negq	%rdi
    000000ca: 	movq	%rcx, 0xc0(%rsp)
    000000d2: 	movq	%rdi, -0x10(%rsp)
    000000d7: 	movq	$0x0, 0x180(%rsp)
    000000e3: 	movq	%rax, 0x118(%rsp)
.Ltmp598:
    000000eb: 	movq	0x180(%rsp), %rax
    000000f3: 	movq	%rbx, %r12
    000000f6: 	movq	-0x18(%rsp), %rdi
    000000fb: 	movq	$0x4, 0xb8(%rsp)
    00000107: 	movq	$0x0, 0x188(%rsp)
    00000113: 	movq	%rax, 0x150(%rsp)
    0000011b: 	subq	$-0x80, %rax
    0000011f: 	cmpq	%rdi, %rax
    00000122: 	movq	%rax, 0x180(%rsp)
    0000012a: 	cmovbeq	%rax, %rdi
    0000012e: 	movq	0x60(%rsp), %rax
    00000133: 	movq	%rax, 0x190(%rsp)
    0000013b: 	movq	0x198(%rsp), %rax
    00000143: 	movq	%rdi, 0x50(%rsp)
    00000148: 	movq	%rax, 0x148(%rsp)
.Ltmp597:
    00000150: 	movq	0x188(%rsp), %rsi
    00000158: 	movq	-0x18(%rsp), %r14
    0000015d: 	movq	%rsi, (%rsp)
    00000161: 	movq	%rsi, %rdx
    00000164: 	subq	$-0x80, %rsi
    00000168: 	cmpq	%rsi, %r14
    0000016b: 	movq	%rsi, 0x188(%rsp)
    00000173: 	cmovbeq	%r14, %rsi
    00000177: 	cmpq	$0x0, 0x158(%rsp)
    00000180: 	leaq	-0x3(%rsi), %r8
    00000184: 	movq	%rsi, 0x58(%rsp)
    00000189: 	movq	%r8, -0x20(%rsp)
    0000018e: 	je	.Ltmp580 # Offset: 398
    00000194: 	movq	0x138(%rsp), %rbx
    0000019c: 	movq	0x1a0(%rsp), %rax
    000001a4: 	movq	$0x0, 0x98(%rsp)
    000001b0: 	movq	0x190(%rsp), %r11
    000001b8: 	movq	$0x0, 0x120(%rsp)
    000001c4: 	movq	%rbx, %rcx
    000001c7: 	movq	%rax, 0x68(%rsp)
    000001cc: 	movq	%rbx, %rax
    000001cf: 	movq	%rbx, %rdi
    000001d2: 	addq	%r11, %rcx
    000001d5: 	movq	%r11, 0x90(%rsp)
    000001dd: 	addq	%rcx, %rax
    000001e0: 	movq	%rcx, 0x88(%rsp)
    000001e8: 	addq	%rax, %rdi
    000001eb: 	movq	%rax, 0xa0(%rsp)
    000001f3: 	movq	%rbx, %rax
    000001f6: 	movq	%rdi, 0xb0(%rsp)
    000001fe: 	movq	0x148(%rsp), %rdi
    00000206: 	addq	%rbx, %rdi
    00000209: 	movq	%rdi, %rcx
    0000020c: 	movq	%rdi, 0x160(%rsp)
    00000214: 	movq	%rbx, %rdi
    00000217: 	movq	%r12, %rbx
    0000021a: 	addq	%rcx, %rax
    0000021d: 	addq	%rax, %rdi
    00000220: 	movq	%rax, 0x168(%rsp)
    00000228: 	movq	%rsi, %rax
    0000022b: 	subq	%rdx, %rax
    0000022e: 	movq	%rdi, 0x170(%rsp)
    00000236: 	movq	%rdx, %rdi
    00000239: 	cmpq	$0x2, 0xb8(%rsp)
    00000242: 	seta	%dl
    00000245: 	cmpq	$-0x4, %r8
    00000249: 	leaq	-0x4(%rax), %rcx
    0000024d: 	setbe	%al
    00000250: 	andl	%edx, %eax
    00000252: 	cmpq	$0xf, %rcx
    00000256: 	seta	%dl
    00000259: 	andl	%edx, %eax
    0000025b: 	movb	%al, 0xaf(%rsp)
    00000262: 	movq	%rcx, %rax
    00000265: 	shrq	$0x2, %rax
    00000269: 	addq	$0x1, %rax
    0000026d: 	movq	%rax, %rcx
    00000270: 	movq	%rax, 0xd8(%rsp)
    00000278: 	andq	$-0x4, %rax
    0000027c: 	movq	%rax, 0xc8(%rsp)
    00000284: 	leaq	(%rdi,%rax,4), %rax
    00000288: 	shrq	$0x2, %rcx
    0000028c: 	movq	%rax, 0xe8(%rsp)
    00000294: 	addq	$0x2, %rax
    00000298: 	imulq	%r14, %rax
    0000029c: 	movq	%rcx, 0xd0(%rsp)
    000002a4: 	movq	%rax, 0x110(%rsp)
    000002ac: 	movq	0x1b8(%rsp), %rax
    000002b4: 	movq	%rax, 0x80(%rsp)
    000002bc: 	movq	0x1b0(%rsp), %rax
    000002c4: 	movq	%rax, 0x78(%rsp)
    000002c9: 	movq	0x40(%rsp), %rax
    000002ce: 	movq	%rax, 0x8(%rsp)
    000002d3: 	movq	0x1a8(%rsp), %rax
    000002db: 	movq	%rax, 0x70(%rsp)
.Ltmp589:
    000002e0: 	movq	0x150(%rsp), %r8
    000002e8: 	cmpq	%r8, 0x50(%rsp)
    000002ed: 	jbe	.Ltmp581 # Offset: 749
    000002f3: 	movq	-0x18(%rsp), %rcx
    000002f8: 	movq	0x8(%rsp), %r14
    000002fd: 	movq	%r8, -0x8(%rsp)
    00000302: 	movq	0xe8(%rsp), %rdi
    0000030a: 	movq	0x98(%rsp), %rsi
    00000312: 	movq	%rbx, -0x38(%rsp)
    00000317: 	movq	%rcx, %rdx
    0000031a: 	addq	%r14, %rcx
    0000031d: 	movq	%rdi, %rax
    00000320: 	addq	%rsi, %rdx
    00000323: 	movq	%rcx, 0x18(%rsp)
    00000328: 	addq	%rsi, %rax
    0000032b: 	movq	0x60(%rsp), %rsi
    00000330: 	movq	%rdx, 0x10(%rsp)
    00000335: 	leaq	(%rsi,%rax,4), %rax
    00000339: 	movq	%rax, 0x108(%rsp)
    00000341: 	movq	%rdi, %rax
    00000344: 	addq	%rdx, %rax
    00000347: 	leaq	(%rsi,%rax,4), %rax
    0000034b: 	movq	%rax, 0x100(%rsp)
    00000353: 	movq	%r14, %rax
    00000356: 	addq	%rdi, %rax
    00000359: 	addq	%rcx, %rdi
    0000035c: 	leaq	(%rsi,%rax,4), %rax
    00000360: 	movq	%rax, 0xf8(%rsp)
    00000368: 	leaq	(%rsi,%rdi,4), %rax
    0000036c: 	movq	0x88(%rsp), %rdi
    00000374: 	movq	%rax, 0xf0(%rsp)
    0000037c: 	movq	0x138(%rsp), %rax
    00000384: 	addq	%rax, %rdi
    00000387: 	addq	0xa0(%rsp), %rax
    0000038f: 	movq	%rax, 0x130(%rsp)
    00000397: 	movq	0x170(%rsp), %rax
    0000039f: 	movq	%rdi, 0x128(%rsp)
    000003a7: 	movq	%rax, 0x28(%rsp)
    000003ac: 	movq	0x168(%rsp), %rax
    000003b4: 	movq	%rax, 0x30(%rsp)
    000003b9: 	movq	0x160(%rsp), %rax
    000003c1: 	movq	%rax, 0x38(%rsp)
    000003c6: 	movq	0x148(%rsp), %rax
    000003ce: 	movq	%rax, 0x20(%rsp)
    000003d3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp588:
    000003d8: 	movq	(%rsp), %rcx
    000003dc: 	cmpq	%rcx, -0x20(%rsp)
    000003e1: 	jbe	.Ltmp582 # Offset: 993
    000003e7: 	cmpb	$0x0, 0xaf(%rsp)
    000003ef: 	je	.Ltmp583 # Offset: 1007
    000003f5: 	pxor	%xmm3, %xmm3
    000003f9: 	movq	%rcx, %xmm12
    000003fe: 	movq	0x20(%rsp), %r10
    00000403: 	movq	0x38(%rsp), %r9
    00000408: 	movq	0x30(%rsp), %r8
    0000040d: 	movq	0x28(%rsp), %rdi
    00000412: 	movhps	0xb8(%rsp), %xmm12
    0000041b: 	xorl	%r11d, %r11d
    0000041e: 	movq	0x90(%rsp), %rsi
    00000426: 	movq	0x88(%rsp), %rcx
    0000042e: 	movaps	%xmm3, -0x78(%rsp)
    00000433: 	movq	0xa0(%rsp), %rdx
    0000043b: 	movq	0xb0(%rsp), %rax
    00000443: 	movaps	%xmm3, -0x68(%rsp)
    00000448: 	movq	-0x38(%rsp), %rbx
    0000044d: 	movq	0xc0(%rsp), %rbp
    00000455: 	movaps	%xmm3, -0x58(%rsp)
    0000045a: 	movq	0xd0(%rsp), %r13
    00000462: 	movq	0xe0(%rsp), %r12
    0000046a: 	movaps	%xmm3, -0x48(%rsp)
    0000046f: 	nop # Size: 1
.Ltmp584:
    00000470: 	movd	(%r10,%r12), %xmm2
    00000476: 	movd	(%r10,%rbx), %xmm3
    0000047c: 	addq	$0x1, %r11
    00000480: 	movaps	%xmm12, -0x38(%rsp)
    00000486: 	movd	(%r10,%rbx,2), %xmm1
    0000048c: 	movd	(%r10), %xmm0
    00000491: 	addq	$0x40, %rax
    00000495: 	addq	$0x40, %rdx
    00000499: 	movd	(%rdi,%rbx,2), %xmm4
    0000049e: 	addq	$0x40, %rcx
    000004a2: 	addq	$0x40, %rsi
    000004a6: 	addq	%rbp, %r10
    000004a9: 	punpckldq	%xmm2, %xmm1
    000004ad: 	punpckldq	%xmm3, %xmm0
    000004b1: 	movd	(%r9,%r12), %xmm2
    000004b7: 	movd	(%r9), %xmm3
    000004bc: 	punpcklqdq	%xmm1, %xmm0
    000004c0: 	movd	(%r9,%rbx,2), %xmm1
    000004c6: 	movd	(%r8,%rbx), %xmm7
    000004cc: 	movdqu	-0x20(%rsi), %xmm8
    000004d2: 	movdqa	%xmm0, %xmm10
    000004d7: 	paddq	DATAat0x2d9b0(%rip), %xmm12
    000004e0: 	punpckldq	%xmm2, %xmm1
    000004e4: 	movd	(%r9,%rbx), %xmm2
    000004ea: 	psrlq	$0x20, %xmm10
    000004f0: 	addq	%rbp, %r9
    000004f3: 	movdqa	%xmm8, %xmm13
    000004f8: 	punpckldq	%xmm2, %xmm3
    000004fc: 	movd	(%r8,%r12), %xmm2
    00000502: 	punpcklqdq	%xmm1, %xmm3
    00000506: 	movd	(%r8,%rbx,2), %xmm1
    0000050c: 	movdqa	%xmm3, %xmm11
    00000511: 	punpckldq	%xmm2, %xmm1
    00000515: 	movd	(%r8), %xmm2
    0000051a: 	psrlq	$0x20, %xmm11
    00000520: 	addq	%rbp, %r8
    00000523: 	punpckldq	%xmm7, %xmm2
    00000527: 	movd	(%rdi,%rbx), %xmm7
    0000052c: 	punpcklqdq	%xmm1, %xmm2
    00000530: 	movd	(%rdi,%r12), %xmm1
    00000536: 	punpckldq	%xmm1, %xmm4
    0000053a: 	movd	(%rdi), %xmm1
    0000053e: 	addq	%rbp, %rdi
    00000541: 	punpckldq	%xmm7, %xmm1
    00000545: 	movdqu	-0x30(%rsi), %xmm7
    0000054a: 	punpcklqdq	%xmm4, %xmm1
    0000054e: 	movdqu	-0x40(%rsi), %xmm4
    00000553: 	movdqa	%xmm4, %xmm5
    00000557: 	shufps	$0xdd, %xmm7, %xmm4
    0000055b: 	movdqa	%xmm4, %xmm6
    0000055f: 	shufps	$0x88, %xmm7, %xmm5
    00000563: 	movdqu	-0x10(%rsi), %xmm7
    00000568: 	shufps	$0xdd, %xmm7, %xmm8
    0000056d: 	shufps	$0x88, %xmm8, %xmm6
    00000572: 	movdqa	%xmm6, %xmm9
    00000577: 	psrlq	$0x20, %xmm6
    0000057c: 	pmuludq	%xmm3, %xmm9
    00000581: 	pmuludq	%xmm11, %xmm6
    00000586: 	shufps	$0x88, %xmm7, %xmm13
    0000058b: 	shufps	$0xdd, %xmm8, %xmm4
    00000590: 	movdqa	%xmm1, %xmm8
    00000595: 	psrlq	$0x20, %xmm8
    0000059b: 	pshufd	$0x8, %xmm6, %xmm6
    000005a0: 	pshufd	$0x8, %xmm9, %xmm9
    000005a6: 	punpckldq	%xmm6, %xmm9
    000005ab: 	movdqa	%xmm5, %xmm6
    000005af: 	shufps	$0xdd, %xmm13, %xmm5
    000005b4: 	shufps	$0x88, %xmm13, %xmm6
    000005b9: 	movdqa	%xmm6, %xmm7
    000005bd: 	psrlq	$0x20, %xmm6
    000005c2: 	pmuludq	%xmm0, %xmm7
    000005c6: 	pmuludq	%xmm10, %xmm6
    000005cb: 	pshufd	$0x8, %xmm7, %xmm7
    000005d0: 	pshufd	$0x8, %xmm6, %xmm6
    000005d5: 	punpckldq	%xmm6, %xmm7
    000005d9: 	movdqa	%xmm5, %xmm6
    000005dd: 	psrlq	$0x20, %xmm5
    000005e2: 	pmuludq	%xmm2, %xmm6
    000005e6: 	paddd	%xmm9, %xmm7
    000005eb: 	movdqa	%xmm2, %xmm9
    000005f0: 	psrlq	$0x20, %xmm9
    000005f6: 	pmuludq	%xmm9, %xmm5
    000005fb: 	pshufd	$0x8, %xmm6, %xmm6
    00000600: 	pshufd	$0x8, %xmm5, %xmm5
    00000605: 	punpckldq	%xmm5, %xmm6
    00000609: 	movdqa	%xmm4, %xmm5
    0000060d: 	psrlq	$0x20, %xmm4
    00000612: 	pmuludq	%xmm1, %xmm5
    00000616: 	paddd	%xmm7, %xmm6
    0000061a: 	movdqu	-0x30(%rcx), %xmm7
    0000061f: 	pmuludq	%xmm8, %xmm4
    00000624: 	pshufd	$0x8, %xmm5, %xmm5
    00000629: 	pshufd	$0x8, %xmm4, %xmm4
    0000062e: 	punpckldq	%xmm4, %xmm5
    00000632: 	movdqu	-0x40(%rcx), %xmm4
    00000637: 	paddd	%xmm5, %xmm6
    0000063b: 	paddd	-0x48(%rsp), %xmm6
    00000641: 	movdqa	%xmm4, %xmm5
    00000645: 	shufps	$0xdd, %xmm7, %xmm4
    00000649: 	shufps	$0x88, %xmm7, %xmm5
    0000064d: 	movaps	%xmm6, -0x48(%rsp)
    00000652: 	movdqu	-0x10(%rcx), %xmm7
    00000657: 	movdqu	-0x20(%rcx), %xmm6
    0000065c: 	movdqa	%xmm6, %xmm15
    00000661: 	shufps	$0xdd, %xmm7, %xmm6
    00000665: 	movdqa	%xmm6, %xmm14
    0000066a: 	movdqa	%xmm4, %xmm6
    0000066e: 	shufps	$0x88, %xmm14, %xmm6
    00000673: 	movdqa	%xmm6, %xmm13
    00000678: 	psrlq	$0x20, %xmm6
    0000067d: 	shufps	$0x88, %xmm7, %xmm15
    00000682: 	pmuludq	%xmm3, %xmm13
    00000687: 	pmuludq	%xmm11, %xmm6
    0000068c: 	shufps	$0xdd, %xmm14, %xmm4
    00000691: 	pshufd	$0x8, %xmm6, %xmm6
    00000696: 	pshufd	$0x8, %xmm13, %xmm13
    0000069c: 	punpckldq	%xmm6, %xmm13
    000006a1: 	movdqa	%xmm5, %xmm6
    000006a5: 	shufps	$0xdd, %xmm15, %xmm5
    000006aa: 	shufps	$0x88, %xmm15, %xmm6
    000006af: 	movdqa	%xmm6, %xmm7
    000006b3: 	psrlq	$0x20, %xmm6
    000006b8: 	pmuludq	%xmm0, %xmm7
    000006bc: 	pmuludq	%xmm10, %xmm6
    000006c1: 	pshufd	$0x8, %xmm7, %xmm7
    000006c6: 	pshufd	$0x8, %xmm6, %xmm6
    000006cb: 	punpckldq	%xmm6, %xmm7
    000006cf: 	movdqa	%xmm5, %xmm6
    000006d3: 	psrlq	$0x20, %xmm5
    000006d8: 	pmuludq	%xmm2, %xmm6
    000006dc: 	paddd	%xmm13, %xmm7
    000006e1: 	pmuludq	%xmm9, %xmm5
    000006e6: 	pshufd	$0x8, %xmm6, %xmm6
    000006eb: 	pshufd	$0x8, %xmm5, %xmm5
    000006f0: 	punpckldq	%xmm5, %xmm6
    000006f4: 	movdqa	%xmm4, %xmm5
    000006f8: 	psrlq	$0x20, %xmm4
    000006fd: 	pmuludq	%xmm1, %xmm5
    00000701: 	paddd	%xmm7, %xmm6
    00000705: 	pmuludq	%xmm8, %xmm4
    0000070a: 	pshufd	$0x8, %xmm5, %xmm5
    0000070f: 	pshufd	$0x8, %xmm4, %xmm4
    00000714: 	punpckldq	%xmm4, %xmm5
    00000718: 	movdqu	-0x40(%rdx), %xmm4
    0000071d: 	paddd	%xmm5, %xmm6
    00000721: 	paddd	-0x58(%rsp), %xmm6
    00000727: 	movdqa	%xmm4, %xmm5
    0000072b: 	movaps	%xmm6, -0x58(%rsp)
    00000730: 	movdqu	-0x20(%rdx), %xmm6
    00000735: 	movdqu	-0x30(%rdx), %xmm7
    0000073a: 	shufps	$0x88, %xmm7, %xmm5
    0000073e: 	shufps	$0xdd, %xmm7, %xmm4
    00000742: 	movdqu	-0x10(%rdx), %xmm7
    00000747: 	movdqa	%xmm6, %xmm15
    0000074c: 	shufps	$0xdd, %xmm7, %xmm6
    00000750: 	movdqa	%xmm6, %xmm14
    00000755: 	movdqa	%xmm4, %xmm6
    00000759: 	shufps	$0x88, %xmm7, %xmm15
    0000075e: 	shufps	$0x88, %xmm14, %xmm6
    00000763: 	movdqa	%xmm6, %xmm13
    00000768: 	psrlq	$0x20, %xmm6
    0000076d: 	shufps	$0xdd, %xmm14, %xmm4
    00000772: 	pmuludq	%xmm3, %xmm13
    00000777: 	pmuludq	%xmm11, %xmm6
    0000077c: 	movdqu	-0x10(%rax), %xmm14
    00000782: 	pshufd	$0x8, %xmm6, %xmm6
    00000787: 	pshufd	$0x8, %xmm13, %xmm13
    0000078d: 	punpckldq	%xmm6, %xmm13
    00000792: 	movdqa	%xmm5, %xmm6
    00000796: 	shufps	$0xdd, %xmm15, %xmm5
    0000079b: 	shufps	$0x88, %xmm15, %xmm6
    000007a0: 	movdqa	%xmm6, %xmm7
    000007a4: 	psrlq	$0x20, %xmm6
    000007a9: 	pmuludq	%xmm0, %xmm7
    000007ad: 	pmuludq	%xmm10, %xmm6
    000007b2: 	pshufd	$0x8, %xmm7, %xmm7
    000007b7: 	pshufd	$0x8, %xmm6, %xmm6
    000007bc: 	punpckldq	%xmm6, %xmm7
    000007c0: 	movdqa	%xmm5, %xmm6
    000007c4: 	psrlq	$0x20, %xmm5
    000007c9: 	pmuludq	%xmm2, %xmm6
    000007cd: 	paddd	%xmm13, %xmm7
    000007d2: 	pmuludq	%xmm9, %xmm5
    000007d7: 	pshufd	$0x8, %xmm6, %xmm6
    000007dc: 	pshufd	$0x8, %xmm5, %xmm5
    000007e1: 	punpckldq	%xmm5, %xmm6
    000007e5: 	movdqa	%xmm4, %xmm5
    000007e9: 	psrlq	$0x20, %xmm4
    000007ee: 	pmuludq	%xmm1, %xmm5
    000007f2: 	paddd	%xmm7, %xmm6
    000007f6: 	movdqu	-0x30(%rax), %xmm7
    000007fb: 	pmuludq	%xmm8, %xmm4
    00000800: 	pshufd	$0x8, %xmm5, %xmm5
    00000805: 	pshufd	$0x8, %xmm4, %xmm4
    0000080a: 	punpckldq	%xmm4, %xmm5
    0000080e: 	movdqu	-0x40(%rax), %xmm4
    00000813: 	paddd	%xmm5, %xmm6
    00000817: 	paddd	-0x68(%rsp), %xmm6
    0000081d: 	movdqa	%xmm4, %xmm5
    00000821: 	shufps	$0xdd, %xmm7, %xmm4
    00000825: 	movaps	%xmm6, -0x68(%rsp)
    0000082a: 	movdqu	-0x20(%rax), %xmm6
    0000082f: 	shufps	$0x88, %xmm7, %xmm5
    00000833: 	movdqu	-0x10(%rax), %xmm7
    00000838: 	movdqa	%xmm6, %xmm13
    0000083d: 	shufps	$0x88, %xmm7, %xmm13
    00000842: 	movdqa	%xmm6, %xmm7
    00000846: 	movdqa	%xmm4, %xmm6
    0000084a: 	shufps	$0xdd, %xmm14, %xmm7
    0000084f: 	shufps	$0x88, %xmm7, %xmm6
    00000853: 	pmuludq	%xmm6, %xmm3
    00000857: 	psrlq	$0x20, %xmm6
    0000085c: 	pmuludq	%xmm11, %xmm6
    00000861: 	shufps	$0xdd, %xmm7, %xmm4
    00000865: 	pmuludq	%xmm4, %xmm1
    00000869: 	psrlq	$0x20, %xmm4
    0000086e: 	pmuludq	%xmm8, %xmm4
    00000873: 	pshufd	$0x8, %xmm3, %xmm3
    00000878: 	pshufd	$0x8, %xmm6, %xmm6
    0000087d: 	pshufd	$0x8, %xmm1, %xmm1
    00000882: 	punpckldq	%xmm6, %xmm3
    00000886: 	movdqa	%xmm5, %xmm6
    0000088a: 	shufps	$0xdd, %xmm13, %xmm5
    0000088f: 	shufps	$0x88, %xmm13, %xmm6
    00000894: 	pmuludq	%xmm6, %xmm0
    00000898: 	psrlq	$0x20, %xmm6
    0000089d: 	pshufd	$0x8, %xmm4, %xmm4
    000008a2: 	pmuludq	%xmm5, %xmm2
    000008a6: 	pmuludq	%xmm10, %xmm6
    000008ab: 	punpckldq	%xmm4, %xmm1
    000008af: 	psrlq	$0x20, %xmm5
    000008b4: 	pmuludq	%xmm9, %xmm5
    000008b9: 	pshufd	$0x8, %xmm0, %xmm0
    000008be: 	pshufd	$0x8, %xmm6, %xmm6
    000008c3: 	pshufd	$0x8, %xmm2, %xmm2
    000008c8: 	punpckldq	%xmm6, %xmm0
    000008cc: 	movdqa	-0x38(%rsp), %xmm6
    000008d2: 	paddq	DATAat0x2d9c0(%rip), %xmm6
    000008da: 	pshufd	$0x8, %xmm5, %xmm5
    000008df: 	paddd	%xmm3, %xmm0
    000008e3: 	punpckldq	%xmm5, %xmm2
    000008e7: 	paddd	%xmm2, %xmm0
    000008eb: 	paddd	%xmm1, %xmm0
    000008ef: 	paddd	-0x78(%rsp), %xmm0
    000008f5: 	movaps	%xmm0, -0x78(%rsp)
    000008fa: 	cmpq	%r13, %r11
    000008fd: 	jb	.Ltmp584 # Offset: 2301
    00000903: 	movhlps	%xmm6, %xmm3
    00000906: 	movq	%rbx, -0x38(%rsp)
    0000090b: 	movq	0xd8(%rsp), %rbx
    00000913: 	movq	%xmm3, %rcx
    00000918: 	movdqa	%xmm0, %xmm3
    0000091c: 	psrldq	$0x8, %xmm0
    00000921: 	paddd	%xmm3, %xmm0
    00000925: 	movdqa	-0x68(%rsp), %xmm3
    0000092b: 	movdqa	%xmm0, %xmm1
    0000092f: 	psrldq	$0x4, %xmm1
    00000934: 	paddd	%xmm1, %xmm0
    00000938: 	movd	%xmm0, %r8d
    0000093d: 	movdqa	%xmm3, %xmm0
    00000941: 	psrldq	$0x8, %xmm0
    00000946: 	paddd	%xmm3, %xmm0
    0000094a: 	movdqa	-0x58(%rsp), %xmm3
    00000950: 	movdqa	%xmm0, %xmm1
    00000954: 	psrldq	$0x4, %xmm1
    00000959: 	paddd	%xmm1, %xmm0
    0000095d: 	movd	%xmm0, %edi
    00000961: 	movdqa	%xmm3, %xmm0
    00000965: 	psrldq	$0x8, %xmm0
    0000096a: 	paddd	%xmm3, %xmm0
    0000096e: 	movdqa	-0x48(%rsp), %xmm3
    00000974: 	movdqa	%xmm0, %xmm1
    00000978: 	psrldq	$0x4, %xmm1
    0000097d: 	paddd	%xmm1, %xmm0
    00000981: 	movd	%xmm0, -0x78(%rsp)
    00000987: 	movdqa	%xmm3, %xmm0
    0000098b: 	psrldq	$0x8, %xmm0
    00000990: 	paddd	%xmm3, %xmm0
    00000994: 	movdqa	%xmm0, %xmm1
    00000998: 	psrldq	$0x4, %xmm1
    0000099d: 	paddd	%xmm1, %xmm0
    000009a1: 	movd	%xmm0, -0x68(%rsp)
    000009a7: 	cmpq	%rbx, 0xc8(%rsp)
    000009af: 	je	.Ltmp585 # Offset: 2479
    000009b5: 	movq	0x48(%rsp), %rcx
    000009ba: 	movq	-0x8(%rsp), %rax
    000009bf: 	movl	%edi, %ebx
    000009c1: 	addq	0x110(%rsp), %rax
    000009c9: 	movq	0xf0(%rsp), %r12
    000009d1: 	leaq	(%rcx,%rax,4), %r13
    000009d5: 	movq	0xf8(%rsp), %rbp
    000009dd: 	movq	0x100(%rsp), %rsi
    000009e5: 	movq	0x108(%rsp), %r11
    000009ed: 	movq	0xe8(%rsp), %rcx
    000009f5: 	movq	0x118(%rsp), %r14
    000009fd: 	nopl	(%rax) # Size: 3
.Ltmp586:
    00000a00: 	movq	-0x10(%rsp), %rax
    00000a05: 	movl	(%r13,%r14,4), %r9d
    00000a0a: 	movl	0x4(%r11), %r10d
    00000a0e: 	movl	(%r11), %r15d
    00000a11: 	movl	(%r13,%rax,4), %edx
    00000a16: 	movl	(%r13), %eax
    00000a1a: 	imull	%r9d, %r10d
    00000a1e: 	movq	-0x18(%rsp), %rdi
    00000a23: 	imull	%edx, %r15d
    00000a27: 	movl	(%r13,%rdi,4), %edi
    00000a2c: 	addl	%r10d, %r15d
    00000a2f: 	movl	0x8(%r11), %r10d
    00000a33: 	imull	%eax, %r10d
    00000a37: 	addl	%r15d, %r10d
    00000a3a: 	movl	0xc(%r11), %r15d
    00000a3e: 	imull	%edi, %r15d
    00000a42: 	addl	%r15d, %r10d
    00000a45: 	movl	(%rsi), %r15d
    00000a48: 	addl	%r10d, -0x68(%rsp)
    00000a4d: 	movl	0x4(%rsi), %r10d
    00000a51: 	imull	%edx, %r15d
    00000a55: 	imull	%r9d, %r10d
    00000a59: 	addl	%r10d, %r15d
    00000a5c: 	movl	0x8(%rsi), %r10d
    00000a60: 	imull	%eax, %r10d
    00000a64: 	addl	%r15d, %r10d
    00000a67: 	movl	0xc(%rsi), %r15d
    00000a6b: 	imull	%edi, %r15d
    00000a6f: 	addl	%r15d, %r10d
    00000a72: 	movl	(%rbp), %r15d
    00000a76: 	addl	%r10d, -0x78(%rsp)
    00000a7b: 	movl	0x4(%rbp), %r10d
    00000a7f: 	imull	%edx, %r15d
    00000a83: 	imull	%r9d, %r10d
    00000a87: 	imull	(%r12), %edx
    00000a8c: 	imull	0x4(%r12), %r9d
    00000a92: 	addl	%r10d, %r15d
    00000a95: 	movl	0x8(%rbp), %r10d
    00000a99: 	imull	%eax, %r10d
    00000a9d: 	addl	%r9d, %edx
    00000aa0: 	imull	0x8(%r12), %eax
    00000aa6: 	addl	%r15d, %r10d
    00000aa9: 	movl	0xc(%rbp), %r15d
    00000aad: 	addl	%edx, %eax
    00000aaf: 	imull	%edi, %r15d
    00000ab3: 	imull	0xc(%r12), %edi
    00000ab9: 	addl	%r15d, %r10d
    00000abc: 	addl	%edi, %eax
    00000abe: 	addl	%r10d, %ebx
    00000ac1: 	addl	%eax, %r8d
    00000ac4: 	addq	$0x4, %rcx
    00000ac8: 	addq	-0x38(%rsp), %r13
    00000acd: 	addq	$0x10, %r11
    00000ad1: 	addq	$0x10, %rsi
    00000ad5: 	addq	$0x10, %rbp
    00000ad9: 	addq	$0x10, %r12
    00000add: 	cmpq	-0x20(%rsp), %rcx
    00000ae2: 	jb	.Ltmp586 # Offset: 2786
    00000ae8: 	movl	%ebx, %edi
.Ltmp585:
    00000aea: 	movq	0x58(%rsp), %r15
    00000aef: 	cmpq	%rcx, %r15
    00000af2: 	jbe	.Ltmp587 # Offset: 2802
    00000af8: 	movq	0x98(%rsp), %r12
    00000b00: 	movq	0x60(%rsp), %rsi
    00000b05: 	movq	0x10(%rsp), %r11
    00000b0a: 	movq	-0x18(%rsp), %rbp
    00000b0f: 	leaq	(%rcx,%r12), %r9
    00000b13: 	movq	-0x8(%rsp), %r10
    00000b18: 	movq	0x48(%rsp), %r13
    00000b1d: 	movl	(%rsi,%r9,4), %r14d
    00000b21: 	movq	%rbp, %rax
    00000b24: 	leaq	(%rcx,%r11), %r9
    00000b28: 	movl	(%rsi,%r9,4), %r11d
    00000b2c: 	imulq	%rcx, %rax
    00000b30: 	movq	0x8(%rsp), %r9
    00000b35: 	addq	%rcx, %r9
    00000b38: 	movl	(%rsi,%r9,4), %ebx
    00000b3c: 	leaq	(%rax,%r10), %rdx
    00000b40: 	movq	0x18(%rsp), %r9
    00000b45: 	movl	(%r13,%rdx,4), %edx
    00000b4a: 	addq	%rcx, %r9
    00000b4d: 	imull	%edx, %r14d
    00000b51: 	addl	%r14d, -0x68(%rsp)
    00000b56: 	movl	-0x68(%rsp), %r14d
    00000b5b: 	imull	%edx, %r11d
    00000b5f: 	addl	%r11d, -0x78(%rsp)
    00000b64: 	movl	-0x78(%rsp), %r11d
    00000b69: 	imull	%edx, %ebx
    00000b6c: 	imull	(%rsi,%r9,4), %edx
    00000b71: 	addl	%ebx, %edi
    00000b73: 	addl	%edx, %r8d
    00000b76: 	leaq	0x1(%rcx), %rdx
    00000b7a: 	cmpq	%rdx, %r15
    00000b7d: 	jbe	.Ltmp587 # Offset: 2941
    00000b83: 	addq	%rbp, %rax
    00000b86: 	leaq	(%rax,%r10), %r9
    00000b8a: 	leaq	(%rdx,%r12), %r10
    00000b8e: 	movl	(%r13,%r9,4), %r9d
    00000b93: 	movl	(%rsi,%r10,4), %ebx
    00000b97: 	movq	0x10(%rsp), %r10
    00000b9c: 	imull	%r9d, %ebx
    00000ba0: 	addq	%rdx, %r10
    00000ba3: 	addl	%ebx, %r14d
    00000ba6: 	movl	(%rsi,%r10,4), %ebx
    00000baa: 	movq	0x8(%rsp), %r10
    00000baf: 	movl	%r14d, -0x68(%rsp)
    00000bb4: 	imull	%r9d, %ebx
    00000bb8: 	addq	%rdx, %r10
    00000bbb: 	addq	0x18(%rsp), %rdx
    00000bc0: 	addl	%ebx, %r11d
    00000bc3: 	movl	(%rsi,%r10,4), %ebx
    00000bc7: 	movl	%r11d, -0x78(%rsp)
    00000bcc: 	imull	%r9d, %ebx
    00000bd0: 	imull	(%rsi,%rdx,4), %r9d
    00000bd5: 	leaq	0x2(%rcx), %rdx
    00000bd9: 	addl	%ebx, %edi
    00000bdb: 	addl	%r9d, %r8d
    00000bde: 	cmpq	%rdx, %r15
    00000be1: 	jbe	.Ltmp587 # Offset: 3041
    00000be7: 	leaq	(%rdx,%r12), %r10
    00000beb: 	addq	%rbp, %rax
    00000bee: 	addq	-0x8(%rsp), %rax
    00000bf3: 	addq	$0x3, %rcx
    00000bf7: 	movl	(%r13,%rax,4), %r9d
    00000bfc: 	movl	(%rsi,%r10,4), %ebx
    00000c00: 	movq	0x10(%rsp), %r10
    00000c05: 	imull	%r9d, %ebx
    00000c09: 	addq	%rdx, %r10
    00000c0c: 	addl	%ebx, %r14d
    00000c0f: 	movl	(%rsi,%r10,4), %ebx
    00000c13: 	movq	0x8(%rsp), %r10
    00000c18: 	movl	%r14d, -0x68(%rsp)
    00000c1d: 	imull	%r9d, %ebx
    00000c21: 	addq	%rdx, %r10
    00000c24: 	addq	0x18(%rsp), %rdx
    00000c29: 	addl	%ebx, %r11d
    00000c2c: 	movl	(%rsi,%r10,4), %ebx
    00000c30: 	movl	%r11d, -0x78(%rsp)
    00000c35: 	imull	%r9d, %ebx
    00000c39: 	imull	(%rsi,%rdx,4), %r9d
    00000c3e: 	addl	%ebx, %edi
    00000c40: 	addl	%r9d, %r8d
    00000c43: 	cmpq	%rcx, %r15
    00000c46: 	jbe	.Ltmp587 # Offset: 3142
    00000c48: 	leaq	(%rcx,%r12), %rdx
    00000c4c: 	addq	%rbp, %rax
    00000c4f: 	movq	0x10(%rsp), %r10
    00000c54: 	movl	(%r13,%rax,4), %eax
    00000c59: 	movl	(%rsi,%rdx,4), %ebx
    00000c5c: 	leaq	(%rcx,%r10), %rdx
    00000c60: 	movq	0x8(%rsp), %r10
    00000c65: 	imull	%eax, %ebx
    00000c68: 	addl	%ebx, %r14d
    00000c6b: 	movl	(%rsi,%rdx,4), %ebx
    00000c6e: 	leaq	(%rcx,%r10), %rdx
    00000c72: 	addq	0x18(%rsp), %rcx
    00000c77: 	movl	%r14d, -0x68(%rsp)
    00000c7c: 	imull	%eax, %ebx
    00000c7f: 	addl	%ebx, %r11d
    00000c82: 	movl	(%rsi,%rdx,4), %ebx
    00000c85: 	movl	%r11d, -0x78(%rsp)
    00000c8a: 	imull	%eax, %ebx
    00000c8d: 	imull	(%rsi,%rcx,4), %eax
    00000c91: 	addl	%ebx, %edi
    00000c93: 	addl	%eax, %r8d
.Ltmp587:
    00000c96: 	movq	-0x8(%rsp), %rax
    00000c9b: 	movq	0x70(%rsp), %rcx
    00000ca0: 	movq	0x78(%rsp), %rdx
    00000ca5: 	movq	0x80(%rsp), %r14
    00000cad: 	movq	0x68(%rsp), %rbx
    00000cb2: 	movl	-0x78(%rsp), %esi
    00000cb6: 	addl	(%rdx,%rax,4), %edi
    00000cb9: 	addl	(%rcx,%rax,4), %esi
    00000cbc: 	addl	(%r14,%rax,4), %r8d
    00000cc0: 	movl	-0x68(%rsp), %r11d
    00000cc5: 	addl	%r11d, (%rbx,%rax,4)
    00000cc9: 	movl	%esi, (%rcx,%rax,4)
    00000ccc: 	movl	%edi, (%rdx,%rax,4)
    00000ccf: 	movl	%r8d, (%r14,%rax,4)
    00000cd3: 	addq	$0x1, %rax
    00000cd7: 	addq	$0x4, 0x20(%rsp)
    00000cdd: 	addq	$0x4, 0x38(%rsp)
    00000ce3: 	addq	$0x4, 0x30(%rsp)
    00000ce9: 	addq	$0x4, 0x28(%rsp)
    00000cef: 	movq	%rax, -0x8(%rsp)
    00000cf4: 	cmpq	%rax, 0x50(%rsp)
    00000cf9: 	jne	.Ltmp588 # Offset: 3321
    00000cff: 	movq	-0x38(%rsp), %rbx
.Ltmp581:
    00000d04: 	movq	0x138(%rsp), %rcx
    00000d0c: 	addq	%rbx, 0x68(%rsp)
    00000d11: 	addq	$0x4, 0x120(%rsp)
    00000d1a: 	movq	0x120(%rsp), %rax
    00000d22: 	addq	%rcx, 0x98(%rsp)
    00000d2a: 	addq	%rbx, 0x70(%rsp)
    00000d2f: 	addq	%rcx, 0x8(%rsp)
    00000d34: 	addq	%rbx, 0x78(%rsp)
    00000d39: 	addq	%rbx, 0x80(%rsp)
    00000d41: 	addq	%rbx, 0x90(%rsp)
    00000d49: 	addq	%rbx, 0x88(%rsp)
    00000d51: 	addq	%rbx, 0xa0(%rsp)
    00000d59: 	addq	%rbx, 0xb0(%rsp)
    00000d61: 	cmpq	0x158(%rsp), %rax
    00000d69: 	jb	.Ltmp589 # Offset: 3433
    00000d6f: 	movq	0x178(%rsp), %rdi
    00000d77: 	movq	%rbx, %r12
    00000d7a: 	cmpq	%rdi, 0x120(%rsp)
    00000d82: 	jae	.Ltmp590 # Offset: 3458
.Ltmp601:
    00000d88: 	movq	0x150(%rsp), %rdi
    00000d90: 	cmpq	%rdi, 0x50(%rsp)
    00000d95: 	jbe	.Ltmp590 # Offset: 3477
    00000d9b: 	movq	0x138(%rsp), %rdi
    00000da3: 	movq	0x120(%rsp), %rcx
    00000dab: 	movq	-0x18(%rsp), %rbp
    00000db0: 	movq	-0x20(%rsp), %rbx
    00000db5: 	movq	%rdi, %rax
    00000db8: 	imulq	%rcx, %rax
    00000dbc: 	movq	%rbp, %r13
    00000dbf: 	imulq	%rcx, %r13
    00000dc3: 	movq	0x1a0(%rsp), %rcx
    00000dcb: 	leaq	(%rcx,%rax), %r15
    00000dcf: 	movq	(%rsp), %rax
    00000dd3: 	movq	0x60(%rsp), %rcx
    00000dd8: 	movq	%r15, -0x58(%rsp)
    00000ddd: 	movq	0x140(%rsp), %r15
    00000de5: 	addq	%r13, %rax
    00000de8: 	movq	%r13, -0x38(%rsp)
    00000ded: 	leaq	(%rcx,%rax,4), %r14
    00000df1: 	movq	0x58(%rsp), %rax
    00000df6: 	movq	%r14, -0x48(%rsp)
    00000dfb: 	movq	0x40(%rsp), %r14
    00000e00: 	addq	%r13, %rax
    00000e03: 	movq	%rdi, %r13
    00000e06: 	leaq	(%rcx,%rax,4), %r11
.Ltmp596:
    00000e0a: 	movq	0x148(%rsp), %rax
    00000e12: 	movq	%rax, -0x68(%rsp)
    00000e17: 	movq	0x150(%rsp), %rax
    00000e1f: 	movq	%rax, -0x78(%rsp)
    00000e24: 	nopl	(%rax) # Size: 4
.Ltmp595:
    00000e28: 	cmpq	(%rsp), %rbx
    00000e2c: 	jbe	.Ltmp591 # Offset: 3628
    00000e32: 	movq	-0x48(%rsp), %rdx
    00000e37: 	movq	-0x68(%rsp), %rax
    00000e3c: 	xorl	%r10d, %r10d
    00000e3f: 	xorl	%r9d, %r9d
    00000e42: 	movq	(%rsp), %rdi
    00000e46: 	xorl	%r8d, %r8d
    00000e49: 	xorl	%ecx, %ecx
    00000e4b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp592:
    00000e50: 	movl	(%rax), %esi
    00000e52: 	imull	(%rdx), %esi
    00000e55: 	addq	$0x4, %rdi
    00000e59: 	addq	$0x10, %rdx
    00000e5d: 	addl	%esi, %ecx
    00000e5f: 	movl	(%rax,%rbp,4), %esi
    00000e62: 	imull	-0xc(%rdx), %esi
    00000e66: 	addl	%esi, %r8d
    00000e69: 	movl	(%rax,%r14,4), %esi
    00000e6d: 	imull	-0x8(%rdx), %esi
    00000e71: 	addl	%esi, %r9d
    00000e74: 	movl	(%rax,%r15,4), %esi
    00000e78: 	imull	-0x4(%rdx), %esi
    00000e7c: 	addq	%r12, %rax
    00000e7f: 	addl	%esi, %r10d
    00000e82: 	cmpq	%rbx, %rdi
    00000e85: 	jb	.Ltmp592 # Offset: 3717
.Ltmp600:
    00000e87: 	cmpq	%rdi, 0x58(%rsp)
    00000e8c: 	jbe	.Ltmp593 # Offset: 3724
    00000e8e: 	movq	0x48(%rsp), %rdx
    00000e93: 	movq	%rbp, %rax
    00000e96: 	imulq	%rdi, %rax
    00000e9a: 	addq	-0x78(%rsp), %rax
    00000e9f: 	addq	-0x38(%rsp), %rdi
    00000ea4: 	leaq	(%rdx,%rax,4), %rdx
    00000ea8: 	movq	0x60(%rsp), %rax
    00000ead: 	leaq	(%rax,%rdi,4), %rax
    00000eb1: 	nopl	(%rax) # Size: 7
.Ltmp594:
    00000eb8: 	movl	(%rdx), %esi
    00000eba: 	imull	(%rax), %esi
    00000ebd: 	addq	$0x4, %rax
    00000ec1: 	addq	%r13, %rdx
    00000ec4: 	addl	%esi, %ecx
    00000ec6: 	cmpq	%r11, %rax
    00000ec9: 	jne	.Ltmp594 # Offset: 3785
.Ltmp593:
    00000ecb: 	movq	-0x78(%rsp), %rax
    00000ed0: 	movq	-0x58(%rsp), %rdi
    00000ed5: 	addl	%r8d, %ecx
    00000ed8: 	addl	%r9d, %ecx
    00000edb: 	addq	$0x4, -0x68(%rsp)
    00000ee1: 	addl	%r10d, %ecx
    00000ee4: 	addl	%ecx, (%rdi,%rax,4)
    00000ee7: 	addq	$0x1, %rax
    00000eeb: 	movq	%rax, -0x78(%rsp)
    00000ef0: 	cmpq	%rax, 0x50(%rsp)
    00000ef5: 	jne	.Ltmp595 # Offset: 3829
    00000efb: 	addq	$0x1, 0x120(%rsp)
    00000f04: 	addq	%r13, %r11
    00000f07: 	movq	0x120(%rsp), %rax
    00000f0f: 	addq	%rbp, -0x38(%rsp)
    00000f14: 	addq	%r13, -0x58(%rsp)
    00000f19: 	addq	%r13, -0x48(%rsp)
    00000f1e: 	cmpq	%rax, 0x178(%rsp)
    00000f26: 	ja	.Ltmp596 # Offset: 3878
.Ltmp590:
    00000f2c: 	movq	0x1c0(%rsp), %rdi
    00000f34: 	addq	$0x200, 0x190(%rsp)
    00000f40: 	addq	%rdi, 0x148(%rsp)
    00000f48: 	movq	0x188(%rsp), %rdi
    00000f50: 	subq	$-0x80, 0xb8(%rsp)
    00000f59: 	cmpq	%rdi, -0x18(%rsp)
    00000f5e: 	ja	.Ltmp597 # Offset: 3934
    00000f64: 	addq	$0x200, 0x198(%rsp)
    00000f70: 	movq	-0x18(%rsp), %rdi
    00000f75: 	movq	%r12, %rbx
    00000f78: 	cmpq	%rdi, 0x180(%rsp)
    00000f80: 	jb	.Ltmp598 # Offset: 3968
.Ltmp579:
    00000f86: 	addq	$0x1d0, %rsp
    00000f8d: 	popq	%rbx
    00000f8e: 	popq	%rbp
    00000f8f: 	popq	%r12
    00000f91: 	popq	%r13
    00000f93: 	popq	%r14
    00000f95: 	popq	%r15
    00000f97: 	retq # Offset: 3991
    00000f98: 	nopl	(%rax,%rax) # Size: 8
.Ltmp583:
    00000fa0: 	movl	$0x0, -0x78(%rsp)
    00000fa8: 	movq	0x130(%rsp), %r13
    00000fb0: 	xorl	%r8d, %r8d
    00000fb3: 	xorl	%edi, %edi
    00000fb5: 	movl	$0x0, -0x68(%rsp)
    00000fbd: 	movq	0x128(%rsp), %r12
    00000fc5: 	movq	0x88(%rsp), %rbp
    00000fcd: 	movq	0x90(%rsp), %r9
    00000fd5: 	movq	0x20(%rsp), %r11
    00000fda: 	movq	0x140(%rsp), %r14
    00000fe2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp599:
    00000fe8: 	movq	-0x18(%rsp), %rax
    00000fed: 	movl	(%r11), %edx
    00000ff0: 	movl	0x4(%r9), %ebx
    00000ff4: 	movl	(%r9), %r15d
    00000ff7: 	movl	(%r11,%rax,4), %r10d
    00000ffb: 	movq	0x40(%rsp), %rax
    00001000: 	imull	%edx, %r15d
    00001004: 	movl	(%r11,%r14,4), %esi
    00001008: 	imull	%r10d, %ebx
    0000100c: 	movl	(%r11,%rax,4), %eax
    00001010: 	addl	%ebx, %r15d
    00001013: 	movl	0x8(%r9), %ebx
    00001017: 	imull	%eax, %ebx
    0000101a: 	addl	%r15d, %ebx
    0000101d: 	movl	0xc(%r9), %r15d
    00001021: 	imull	%esi, %r15d
    00001025: 	addl	%r15d, %ebx
    00001028: 	movl	(%rbp), %r15d
    0000102c: 	addl	%ebx, -0x68(%rsp)
    00001030: 	movl	0x4(%rbp), %ebx
    00001033: 	imull	%edx, %r15d
    00001037: 	imull	%r10d, %ebx
    0000103b: 	addl	%ebx, %r15d
    0000103e: 	movl	0x8(%rbp), %ebx
    00001041: 	imull	%eax, %ebx
    00001044: 	addl	%r15d, %ebx
    00001047: 	movl	0xc(%rbp), %r15d
    0000104b: 	imull	%esi, %r15d
    0000104f: 	addl	%r15d, %ebx
    00001052: 	movl	(%r12), %r15d
    00001056: 	addl	%ebx, -0x78(%rsp)
    0000105a: 	movl	0x4(%r12), %ebx
    0000105f: 	imull	%edx, %r15d
    00001063: 	imull	%r10d, %ebx
    00001067: 	imull	(%r13), %edx
    0000106c: 	imull	0x4(%r13), %r10d
    00001071: 	addl	%ebx, %r15d
    00001074: 	movl	0x8(%r12), %ebx
    00001079: 	imull	%eax, %ebx
    0000107c: 	addl	%r10d, %edx
    0000107f: 	imull	0x8(%r13), %eax
    00001084: 	addl	%r15d, %ebx
    00001087: 	movl	0xc(%r12), %r15d
    0000108c: 	addl	%edx, %eax
    0000108e: 	imull	%esi, %r15d
    00001092: 	imull	0xc(%r13), %esi
    00001097: 	addl	%r15d, %ebx
    0000109a: 	addl	%esi, %eax
    0000109c: 	addl	%ebx, %edi
    0000109e: 	addl	%eax, %r8d
    000010a1: 	addq	$0x4, %rcx
    000010a5: 	addq	-0x38(%rsp), %r11
    000010aa: 	addq	$0x10, %r9
    000010ae: 	addq	$0x10, %rbp
    000010b2: 	addq	$0x10, %r12
    000010b6: 	addq	$0x10, %r13
    000010ba: 	cmpq	-0x20(%rsp), %rcx
    000010bf: 	jb	.Ltmp599 # Offset: 4287
    000010c5: 	jmp	.Ltmp585 # Offset: 4293
    000010ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp582:
    000010d0: 	movl	$0x0, -0x78(%rsp)
    000010d8: 	xorl	%r8d, %r8d
    000010db: 	xorl	%edi, %edi
    000010dd: 	movl	$0x0, -0x68(%rsp)
    000010e5: 	jmp	.Ltmp585 # Offset: 4325
.Ltmp591:
    000010ea: 	movq	(%rsp), %rdi
    000010ee: 	xorl	%r10d, %r10d
    000010f1: 	xorl	%r9d, %r9d
    000010f4: 	xorl	%r8d, %r8d
    000010f7: 	xorl	%ecx, %ecx
    000010f9: 	jmp	.Ltmp600 # Offset: 4345
.Ltmp580:
    000010fe: 	movq	$0x0, 0x120(%rsp)
    0000110a: 	jmp	.Ltmp601 # Offset: 4362
DWARF CFI Instructions:
    <empty>
End of Function "_ZN28matmul_JIK_blocked_unrolled2IiEclEPKiS2_Pimm.isra.0/1(*2)"

Binary Function "_ZN28matmul_JIK_blocked_unrolled1IiEclEPKiS2_Pimm.isra.0/1(*2)" after disassembly {
  All names   : _ZN28matmul_JIK_blocked_unrolled1IiEclEPKiS2_Pimm.isra.0/1
                _ZN28matmul_JIK_blocked_unrolled1IiEclEPKiS2_Pimm.isra.0/matrix_multiply.cpp/1
  Number      : 67
  State       : disassembled
  Address     : 0x15570
  Size        : 0x275
  MaxSize     : 0x280
  Offset      : 0x15570
  Section     : .text
  Orc Section : .local.text._ZN28matmul_JIK_blocked_unrolled1IiEclEPKiS2_Pimm.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB066:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	subq	$0x20, %rsp
    0000000e: 	movq	%rdi, -0x38(%rsp)
    00000013: 	movq	%rsi, -0x30(%rsp)
    00000018: 	movq	%rdx, 0x18(%rsp)
    0000001d: 	movq	%rcx, -0x10(%rsp)
    00000022: 	testq	%r8, %r8
    00000025: 	je	.Ltmp602 # Offset: 37
    0000002b: 	testq	%rcx, %rcx
    0000002e: 	je	.Ltmp602 # Offset: 46
    00000034: 	leaq	(%r8,%r8), %r13
    00000038: 	movq	%r8, %rax
    0000003b: 	movq	%r8, %r12
    0000003e: 	movq	%rsi, 0x8(%rsp)
    00000043: 	leaq	(%r13,%r8), %r15
    00000048: 	shlq	$0x9, %rax
    0000004c: 	shlq	$0x4, %r12
    00000050: 	movq	%r13, %r14
    00000053: 	leaq	(,%r8,4), %rbp
    0000005b: 	movq	%rax, 0x10(%rsp)
    00000060: 	movq	%r15, %rax
    00000063: 	movq	%r12, %r13
    00000066: 	movq	$0x0, -0x8(%rsp)
    0000006f: 	movq	%rbp, %r15
    00000072: 	movq	%r8, %r12
    00000075: 	movq	%rax, %rbp
.Ltmp611:
    00000078: 	movq	-0x8(%rsp), %rbx
    0000007d: 	movq	%rbx, -0x18(%rsp)
    00000082: 	movq	%rbx, %rax
    00000085: 	subq	$-0x80, %rbx
    00000089: 	cmpq	%r12, %rbx
    0000008c: 	movq	%rbx, -0x8(%rsp)
    00000091: 	cmovaq	%r12, %rbx
    00000095: 	movq	%rbx, -0x58(%rsp)
    0000009a: 	cmpq	%rax, %rbx
    0000009d: 	jbe	.Ltmp603 # Offset: 157
    000000a3: 	movq	0x8(%rsp), %rax
    000000a8: 	movq	$0x0, (%rsp)
    000000b0: 	movq	%rax, -0x20(%rsp)
.Ltmp610:
    000000b5: 	movq	0x18(%rsp), %rdi
    000000ba: 	movq	(%rsp), %rbx
    000000be: 	movq	$0x0, -0x40(%rsp)
    000000c7: 	movq	$0x0, -0x28(%rsp)
    000000d0: 	movq	%rdi, -0x60(%rsp)
    000000d5: 	movq	-0x38(%rsp), %rdi
    000000da: 	movq	%rbx, %rax
    000000dd: 	movq	%rbx, -0x70(%rsp)
    000000e2: 	subq	$-0x80, %rbx
    000000e6: 	cmpq	%rbx, %r12
    000000e9: 	leaq	(%rdi,%rax,4), %rax
    000000ed: 	movq	%rbx, (%rsp)
    000000f1: 	movq	%rax, -0x48(%rsp)
    000000f6: 	cmovbeq	%r12, %rbx
    000000fa: 	movq	%rbx, -0x50(%rsp)
    000000ff: 	leaq	-0x3(%rbx), %r11
    00000103: 	leaq	(%rdi,%rbx,4), %rbx
    00000107: 	nopw	(%rax,%rax) # Size: 9
.Ltmp609:
    00000110: 	movq	-0x20(%rsp), %rax
    00000115: 	movq	%rax, -0x68(%rsp)
    0000011a: 	movq	-0x18(%rsp), %rax
    0000011f: 	movq	%rax, -0x78(%rsp)
    00000124: 	nopl	(%rax) # Size: 4
.Ltmp608:
    00000128: 	cmpq	-0x70(%rsp), %r11
    0000012d: 	jbe	.Ltmp604 # Offset: 301
    00000133: 	movq	-0x48(%rsp), %rdx
    00000138: 	movq	-0x68(%rsp), %rax
    0000013d: 	xorl	%r10d, %r10d
    00000140: 	xorl	%r9d, %r9d
    00000143: 	movq	-0x70(%rsp), %rdi
    00000148: 	xorl	%r8d, %r8d
    0000014b: 	xorl	%ecx, %ecx
    0000014d: 	nopl	(%rax) # Size: 3
.Ltmp605:
    00000150: 	movl	(%rax), %esi
    00000152: 	imull	(%rdx), %esi
    00000155: 	addq	$0x4, %rdi
    00000159: 	addq	$0x10, %rdx
    0000015d: 	addl	%esi, %ecx
    0000015f: 	movl	(%rax,%r12,4), %esi
    00000163: 	imull	-0xc(%rdx), %esi
    00000167: 	addl	%esi, %r8d
    0000016a: 	movl	(%rax,%r14,4), %esi
    0000016e: 	imull	-0x8(%rdx), %esi
    00000172: 	addl	%esi, %r9d
    00000175: 	movl	(%rax,%rbp,4), %esi
    00000178: 	imull	-0x4(%rdx), %esi
    0000017c: 	addq	%r13, %rax
    0000017f: 	addl	%esi, %r10d
    00000182: 	cmpq	%r11, %rdi
    00000185: 	jb	.Ltmp605 # Offset: 389
.Ltmp612:
    00000187: 	cmpq	%rdi, -0x50(%rsp)
    0000018c: 	jbe	.Ltmp606 # Offset: 396
    0000018e: 	movq	-0x30(%rsp), %rdx
    00000193: 	movq	%r12, %rax
    00000196: 	imulq	%rdi, %rax
    0000019a: 	addq	-0x78(%rsp), %rax
    0000019f: 	addq	-0x40(%rsp), %rdi
    000001a4: 	leaq	(%rdx,%rax,4), %rdx
    000001a8: 	movq	-0x38(%rsp), %rax
    000001ad: 	leaq	(%rax,%rdi,4), %rax
    000001b1: 	nopl	(%rax) # Size: 7
.Ltmp607:
    000001b8: 	movl	(%rdx), %esi
    000001ba: 	imull	(%rax), %esi
    000001bd: 	addq	$0x4, %rax
    000001c1: 	addq	%r15, %rdx
    000001c4: 	addl	%esi, %ecx
    000001c6: 	cmpq	%rax, %rbx
    000001c9: 	jne	.Ltmp607 # Offset: 457
.Ltmp606:
    000001cb: 	movq	-0x78(%rsp), %rax
    000001d0: 	movq	-0x60(%rsp), %rdi
    000001d5: 	addl	%r8d, %ecx
    000001d8: 	addl	%r9d, %ecx
    000001db: 	addq	$0x4, -0x68(%rsp)
    000001e1: 	addl	%r10d, %ecx
    000001e4: 	addl	%ecx, (%rdi,%rax,4)
    000001e7: 	addq	$0x1, %rax
    000001eb: 	movq	%rax, -0x78(%rsp)
    000001f0: 	cmpq	%rax, -0x58(%rsp)
    000001f5: 	jne	.Ltmp608 # Offset: 501
    000001fb: 	addq	$0x1, -0x28(%rsp)
    00000201: 	addq	%r15, %rbx
    00000204: 	movq	-0x28(%rsp), %rax
    00000209: 	addq	%r12, -0x40(%rsp)
    0000020e: 	addq	%r15, -0x60(%rsp)
    00000213: 	addq	%r15, -0x48(%rsp)
    00000218: 	cmpq	-0x10(%rsp), %rax
    0000021d: 	jne	.Ltmp609 # Offset: 541
    00000223: 	movq	0x10(%rsp), %rbx
    00000228: 	addq	%rbx, -0x20(%rsp)
    0000022d: 	cmpq	(%rsp), %r12
    00000231: 	ja	.Ltmp610 # Offset: 561
.Ltmp603:
    00000237: 	addq	$0x200, 0x8(%rsp)
    00000240: 	cmpq	%r12, -0x8(%rsp)
    00000245: 	jb	.Ltmp611 # Offset: 581
.Ltmp602:
    0000024b: 	addq	$0x20, %rsp
    0000024f: 	popq	%rbx
    00000250: 	popq	%rbp
    00000251: 	popq	%r12
    00000253: 	popq	%r13
    00000255: 	popq	%r14
    00000257: 	popq	%r15
    00000259: 	retq # Offset: 601
    0000025a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp604:
    00000260: 	movq	-0x70(%rsp), %rdi
    00000265: 	xorl	%r10d, %r10d
    00000268: 	xorl	%r9d, %r9d
    0000026b: 	xorl	%r8d, %r8d
    0000026e: 	xorl	%ecx, %ecx
    00000270: 	jmp	.Ltmp612 # Offset: 624
DWARF CFI Instructions:
    <empty>
End of Function "_ZN28matmul_JIK_blocked_unrolled1IiEclEPKiS2_Pimm.isra.0/1(*2)"

Binary Function "_ZN19matmul_JKI_unrolledIiEclEPKiS2_Pimm.isra.0/1(*2)" after disassembly {
  All names   : _ZN19matmul_JKI_unrolledIiEclEPKiS2_Pimm.isra.0/1
                _ZN19matmul_JKI_unrolledIiEclEPKiS2_Pimm.isra.0/matrix_multiply.cpp/1
  Number      : 68
  State       : disassembled
  Address     : 0x157f0
  Size        : 0x104f
  MaxSize     : 0x1050
  Offset      : 0x157f0
  Section     : .text
  Orc Section : .local.text._ZN19matmul_JKI_unrolledIiEclEPKiS2_Pimm.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB067:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	subq	$0x140, %rsp
    00000011: 	movq	%rdi, 0xe8(%rsp)
    00000019: 	movq	%rdx, 0xf0(%rsp)
    00000021: 	movq	%rcx, 0x100(%rsp)
    00000029: 	movq	%r8, -0x60(%rsp)
    0000002e: 	testq	%rcx, %rcx
    00000031: 	je	.Ltmp613 # Offset: 49
    00000037: 	movq	%r8, %rcx
    0000003a: 	movq	%rsi, %r13
    0000003d: 	leaq	-0x3(%r8), %rax
    00000041: 	movq	%rdx, %r11
    00000044: 	leaq	(,%r8,4), %rsi
    0000004c: 	shlq	$0x4, %rcx
    00000050: 	leaq	(%r8,%r8), %rbx
    00000054: 	movq	%r11, %r14
    00000057: 	movq	%rax, 0xd8(%rsp)
    0000005f: 	leaq	0x10(%rdx), %rax
    00000063: 	movdqa	DATAat0x2d9b0(%rip), %xmm10
    0000006c: 	movq	%rcx, 0x10(%rsp)
    00000071: 	leaq	(%r13,%rsi), %rcx
    00000076: 	movdqa	DATAat0x2d9c0(%rip), %xmm9
    0000007f: 	movq	%rax, 0x130(%rsp)
    00000087: 	movq	%rax, (%rsp)
    0000008b: 	leaq	-0x4(%r8), %rax
    0000008f: 	movq	%rcx, 0x108(%rsp)
    00000097: 	addq	%rsi, %rcx
    0000009a: 	movq	%rax, %rdx
    0000009d: 	movq	%rsi, -0x8(%rsp)
    000000a2: 	shrq	$0x2, %rdx
    000000a6: 	movq	%rcx, 0x110(%rsp)
    000000ae: 	addq	%rsi, %rcx
    000000b1: 	movq	%rax, %rsi
    000000b4: 	movq	%r8, %rax
    000000b7: 	andq	$-0x4, %rsi
    000000bb: 	addq	$0x1, %rdx
    000000bf: 	movq	%rbx, 0x120(%rsp)
    000000c7: 	addq	%r8, %rbx
    000000ca: 	subq	%rsi, %rax
    000000cd: 	leaq	0x4(%rsi), %rdi
    000000d1: 	movq	%rdx, 0x20(%rsp)
    000000d6: 	movq	%rsi, %rdx
    000000d9: 	movq	%rsi, 0x128(%rsp)
    000000e1: 	movq	%rsi, 0x28(%rsp)
    000000e6: 	leaq	-0x4(%rax), %rsi
    000000ea: 	subq	$0x5, %rax
    000000ee: 	movq	%rsi, 0x58(%rsp)
    000000f3: 	andq	$-0x4, %rsi
    000000f7: 	movq	%rsi, 0x50(%rsp)
    000000fc: 	addq	%rdi, %rsi
    000000ff: 	movq	%rdi, -0x20(%rsp)
    00000104: 	leaq	0x1(%rsi), %rdi
    00000108: 	movq	%rsi, 0x80(%rsp)
    00000110: 	addq	$0x2, %rsi
    00000114: 	movq	%rsi, 0xb8(%rsp)
    0000011c: 	leaq	0x5(%rdx), %rsi
    00000120: 	movq	%rsi, 0xd0(%rsp)
    00000128: 	leaq	0x6(%rdx), %rsi
    0000012c: 	addq	$0x7, %rdx
    00000130: 	movq	%rcx, 0x118(%rsp)
    00000138: 	movq	%rdi, 0x88(%rsp)
    00000140: 	movq	%rsi, 0xe0(%rsp)
    00000148: 	movq	%rdx, 0xf8(%rsp)
    00000150: 	movq	$0x0, -0x30(%rsp)
    00000159: 	movq	$0x0, 0xc0(%rsp)
    00000165: 	movq	%rax, 0x30(%rsp)
    0000016a: 	movq	%rbx, 0x18(%rsp)
    0000016f: 	nop # Size: 1
.Ltmp628:
    00000170: 	xorl	%r15d, %r15d
    00000173: 	xorl	%r9d, %r9d
    00000176: 	cmpq	$0x0, 0xd8(%rsp)
    0000017f: 	je	.Ltmp614 # Offset: 383
    00000185: 	movq	-0x30(%rsp), %rcx
    0000018a: 	movq	0xe8(%rsp), %rsi
    00000192: 	movq	%r13, %rdi
    00000195: 	movq	$0x0, -0x58(%rsp)
    0000019e: 	movq	0x110(%rsp), %r9
    000001a6: 	movq	0x108(%rsp), %r8
    000001ae: 	leaq	(,%rcx,4), %rdx
    000001b6: 	leaq	(%rsi,%rdx), %rax
    000001ba: 	movq	%rax, -0x78(%rsp)
    000001bf: 	movq	0x128(%rsp), %rax
    000001c7: 	addq	%rcx, %rax
    000001ca: 	shlq	$0x2, %rax
    000001ce: 	leaq	0x10(%rsi,%rax), %rsi
    000001d3: 	addq	0x130(%rsp), %rax
    000001db: 	movq	%rax, 0x68(%rsp)
    000001e0: 	movq	-0x20(%rsp), %rax
    000001e5: 	movq	%rsi, 0x8(%rsp)
    000001ea: 	movq	0xf0(%rsp), %rsi
    000001f2: 	addq	%rcx, %rax
    000001f5: 	leaq	(%rsi,%rax,4), %rax
    000001f9: 	addq	%rsi, %rdx
    000001fc: 	movq	%rax, -0x28(%rsp)
    00000201: 	movq	0x80(%rsp), %rax
    00000209: 	movq	%rdx, 0x70(%rsp)
    0000020e: 	addq	%rcx, %rax
    00000211: 	leaq	(%rsi,%rax,4), %rax
    00000215: 	movq	%rax, 0x38(%rsp)
    0000021a: 	movq	0x88(%rsp), %rax
    00000222: 	addq	%rcx, %rax
    00000225: 	leaq	(%rsi,%rax,4), %rax
    00000229: 	movq	%rax, 0x40(%rsp)
    0000022e: 	movq	0xb8(%rsp), %rax
    00000236: 	addq	%rcx, %rax
    00000239: 	leaq	(%rsi,%rax,4), %rax
    0000023d: 	movq	%rax, 0x60(%rsp)
    00000242: 	movq	0xd0(%rsp), %rax
    0000024a: 	addq	%rcx, %rax
    0000024d: 	leaq	(%rsi,%rax,4), %rax
    00000251: 	movq	%rax, 0x78(%rsp)
    00000256: 	movq	0xe0(%rsp), %rax
    0000025e: 	addq	%rcx, %rax
    00000261: 	leaq	(%rsi,%rax,4), %rax
    00000265: 	movq	%rax, 0x90(%rsp)
    0000026d: 	movq	0xf8(%rsp), %rax
    00000275: 	addq	%rcx, %rax
    00000278: 	leaq	(%rsi,%rax,4), %rax
    0000027c: 	movq	0x118(%rsp), %rsi
    00000284: 	movq	%rax, 0x98(%rsp)
    0000028c: 	movq	0x120(%rsp), %rax
    00000294: 	movq	%rsi, -0x40(%rsp)
    00000299: 	movq	%rax, -0x50(%rsp)
    0000029e: 	nop # Size: 2
.Ltmp619:
    000002a0: 	movq	-0x78(%rsp), %rax
    000002a5: 	movq	-0x58(%rsp), %rbx
    000002aa: 	movl	0x8(%rax), %r15d
    000002ae: 	movl	0xc(%rax), %ebp
    000002b1: 	movl	(%rax), %edx
    000002b3: 	movl	0x4(%rax), %ecx
    000002b6: 	movq	-0x60(%rsp), %rax
    000002bb: 	movl	%r15d, -0x48(%rsp)
    000002c0: 	movl	%ebp, -0x38(%rsp)
    000002c4: 	addq	%rax, %rbx
    000002c7: 	addq	-0x50(%rsp), %rax
    000002cc: 	movq	%rbx, -0x70(%rsp)
    000002d1: 	movq	(%rsp), %rbx
    000002d5: 	movq	%rax, -0x68(%rsp)
    000002da: 	leaq	0x10(%rdi), %rax
    000002de: 	cmpq	%rax, %r14
    000002e1: 	setae	%r10b
    000002e5: 	cmpq	%rbx, %rdi
    000002e8: 	setae	%al
    000002eb: 	orl	%eax, %r10d
    000002ee: 	leaq	0x10(%r8), %rax
    000002f2: 	cmpq	%rax, %r14
    000002f5: 	setae	%al
    000002f8: 	cmpq	%rbx, %r8
    000002fb: 	setae	%r11b
    000002ff: 	orl	%r11d, %eax
    00000302: 	andl	%r10d, %eax
    00000305: 	leaq	0x10(%r9), %r10
    00000309: 	cmpq	%r10, %r14
    0000030c: 	setae	%r10b
    00000310: 	cmpq	%rbx, %r9
    00000313: 	setae	%r11b
    00000317: 	orl	%r11d, %r10d
    0000031a: 	testb	%r10b, %al
    0000031d: 	je	.Ltmp615 # Offset: 797
    00000323: 	movq	-0x40(%rsp), %rsi
    00000328: 	leaq	0x10(%rsi), %rax
    0000032c: 	cmpq	%rax, %r14
    0000032f: 	setae	%r10b
    00000333: 	cmpq	%rbx, %rsi
    00000336: 	setae	%al
    00000339: 	orb	%r10b, %al
    0000033c: 	je	.Ltmp615 # Offset: 828
    00000342: 	movd	%edx, %xmm4
    00000346: 	movd	%ecx, %xmm3
    0000034a: 	movd	%r15d, %xmm2
    0000034f: 	xorl	%eax, %eax
    00000351: 	movd	%ebp, %xmm1
    00000355: 	pshufd	$0x0, %xmm4, %xmm4
    0000035a: 	pshufd	$0x0, %xmm3, %xmm3
    0000035f: 	xorl	%r10d, %r10d
    00000362: 	pshufd	$0x0, %xmm2, %xmm2
    00000367: 	pshufd	$0x0, %xmm1, %xmm1
    0000036c: 	movdqa	%xmm4, %xmm8
    00000371: 	movq	0x20(%rsp), %r11
    00000376: 	movdqa	%xmm3, %xmm7
    0000037a: 	movdqa	%xmm2, %xmm6
    0000037e: 	movdqa	%xmm1, %xmm5
    00000382: 	psrlq	$0x20, %xmm8
    00000388: 	psrlq	$0x20, %xmm7
    0000038d: 	psrlq	$0x20, %xmm6
    00000392: 	psrlq	$0x20, %xmm5
    00000397: 	nopw	(%rax,%rax) # Size: 9
.Ltmp616:
    000003a0: 	movdqu	(%rdi,%rax), %xmm0
    000003a5: 	movdqu	(%rdi,%rax), %xmm11
    000003ab: 	addq	$0x1, %r10
    000003af: 	movdqu	(%r8,%rax), %xmm12
    000003b5: 	psrlq	$0x20, %xmm0
    000003ba: 	pmuludq	%xmm4, %xmm11
    000003bf: 	pmuludq	%xmm8, %xmm0
    000003c4: 	pmuludq	%xmm3, %xmm12
    000003c9: 	pshufd	$0x8, %xmm11, %xmm11
    000003cf: 	pshufd	$0x8, %xmm0, %xmm0
    000003d4: 	pshufd	$0x8, %xmm12, %xmm12
    000003da: 	punpckldq	%xmm0, %xmm11
    000003df: 	movdqu	(%r8,%rax), %xmm0
    000003e5: 	psrlq	$0x20, %xmm0
    000003ea: 	pmuludq	%xmm7, %xmm0
    000003ee: 	pshufd	$0x8, %xmm0, %xmm0
    000003f3: 	punpckldq	%xmm0, %xmm12
    000003f8: 	movdqu	(%r9,%rax), %xmm0
    000003fe: 	paddd	%xmm12, %xmm11
    00000403: 	movdqu	(%r9,%rax), %xmm12
    00000409: 	psrlq	$0x20, %xmm0
    0000040e: 	pmuludq	%xmm2, %xmm12
    00000413: 	pmuludq	%xmm6, %xmm0
    00000417: 	pshufd	$0x8, %xmm12, %xmm12
    0000041d: 	pshufd	$0x8, %xmm0, %xmm0
    00000422: 	punpckldq	%xmm0, %xmm12
    00000427: 	movdqu	(%rsi,%rax), %xmm0
    0000042c: 	paddd	%xmm12, %xmm11
    00000431: 	movdqu	(%rsi,%rax), %xmm12
    00000437: 	psrlq	$0x20, %xmm0
    0000043c: 	pmuludq	%xmm1, %xmm12
    00000441: 	pmuludq	%xmm5, %xmm0
    00000445: 	pshufd	$0x8, %xmm12, %xmm12
    0000044b: 	pshufd	$0x8, %xmm0, %xmm0
    00000450: 	punpckldq	%xmm0, %xmm12
    00000455: 	movdqu	(%r14,%rax), %xmm0
    0000045b: 	paddd	%xmm12, %xmm11
    00000460: 	paddd	%xmm0, %xmm11
    00000465: 	movups	%xmm11, (%r14,%rax)
    0000046a: 	addq	$0x10, %rax
    0000046e: 	cmpq	%r11, %r10
    00000471: 	jb	.Ltmp616 # Offset: 1137
    00000477: 	movq	%rsi, -0x40(%rsp)
.Ltmp630:
    0000047c: 	movq	-0x20(%rsp), %rsi
    00000481: 	cmpq	%rsi, -0x60(%rsp)
    00000486: 	jbe	.Ltmp617 # Offset: 1158
    0000048c: 	movq	0x28(%rsp), %rax
    00000491: 	movq	-0x50(%rsp), %r15
    00000496: 	movq	-0x28(%rsp), %rsi
    0000049b: 	movq	-0x70(%rsp), %rbp
    000004a0: 	leaq	0x5(%rax,%r15), %r10
    000004a5: 	movq	-0x68(%rsp), %r12
    000004aa: 	movq	-0x58(%rsp), %r11
    000004af: 	shlq	$0x2, %r10
    000004b3: 	leaq	0x5(%rax,%rbp), %rbx
    000004b8: 	leaq	0x5(%rax,%r11), %r11
    000004bd: 	leaq	0x5(%rax,%r12), %rbp
    000004c2: 	movq	%rsi, %rax
    000004c5: 	shlq	$0x2, %rbx
    000004c9: 	leaq	(%r13,%r10), %r12
    000004ce: 	shlq	$0x2, %r11
    000004d2: 	shlq	$0x2, %rbp
    000004d6: 	subq	%r12, %rax
    000004d9: 	leaq	(%r13,%r11), %r15
    000004de: 	cmpq	$0x8, %rax
    000004e2: 	movq	%rsi, %rax
    000004e5: 	seta	%r12b
    000004e9: 	subq	%r15, %rax
    000004ec: 	leaq	(%r13,%rbx), %r15
    000004f1: 	cmpq	$0x8, %rax
    000004f5: 	seta	%al
    000004f8: 	andl	%r12d, %eax
    000004fb: 	cmpq	$0x2, 0x30(%rsp)
    00000501: 	seta	%r12b
    00000505: 	andl	%r12d, %eax
    00000508: 	movq	%rsi, %r12
    0000050b: 	subq	%r15, %r12
    0000050e: 	cmpq	$0x8, %r12
    00000512: 	seta	%r12b
    00000516: 	testb	%r12b, %al
    00000519: 	je	.Ltmp618 # Offset: 1305
    0000051f: 	leaq	(%r13,%rbp), %r12
    00000524: 	movq	%rsi, %rax
    00000527: 	subq	%r12, %rax
    0000052a: 	cmpq	$0x8, %rax
    0000052e: 	jbe	.Ltmp618 # Offset: 1326
    00000534: 	movdqu	-0x4(%r13,%rbx), %xmm1
    0000053b: 	movd	%ecx, %xmm4
    0000053f: 	pshufd	$0x0, %xmm4, %xmm2
    00000544: 	movd	%edx, %xmm4
    00000548: 	movdqa	%xmm1, %xmm0
    0000054c: 	psrlq	$0x20, %xmm1
    00000551: 	pshufd	$0x0, %xmm4, %xmm3
    00000556: 	movd	-0x48(%rsp), %xmm4
    0000055c: 	pmuludq	%xmm2, %xmm0
    00000560: 	psrlq	$0x20, %xmm2
    00000565: 	pmuludq	%xmm2, %xmm1
    00000569: 	pshufd	$0x8, %xmm0, %xmm0
    0000056e: 	pshufd	$0x8, %xmm1, %xmm1
    00000573: 	punpckldq	%xmm1, %xmm0
    00000577: 	movdqu	-0x4(%r13,%r11), %xmm1
    0000057e: 	movdqa	%xmm1, %xmm2
    00000582: 	psrlq	$0x20, %xmm1
    00000587: 	pmuludq	%xmm3, %xmm2
    0000058b: 	psrlq	$0x20, %xmm3
    00000590: 	pmuludq	%xmm3, %xmm1
    00000594: 	pshufd	$0x0, %xmm4, %xmm3
    00000599: 	movd	-0x38(%rsp), %xmm4
    0000059f: 	pshufd	$0x8, %xmm2, %xmm2
    000005a4: 	pshufd	$0x8, %xmm1, %xmm1
    000005a9: 	punpckldq	%xmm1, %xmm2
    000005ad: 	movdqu	-0x4(%r13,%r10), %xmm1
    000005b4: 	paddd	%xmm2, %xmm0
    000005b8: 	movdqa	%xmm1, %xmm2
    000005bc: 	psrlq	$0x20, %xmm1
    000005c1: 	pmuludq	%xmm3, %xmm2
    000005c5: 	psrlq	$0x20, %xmm3
    000005ca: 	pmuludq	%xmm3, %xmm1
    000005ce: 	pshufd	$0x0, %xmm4, %xmm3
    000005d3: 	movdqu	(%rsi), %xmm4
    000005d7: 	movaps	%xmm4, -0x18(%rsp)
    000005dc: 	pshufd	$0x8, %xmm2, %xmm2
    000005e1: 	pshufd	$0x8, %xmm1, %xmm1
    000005e6: 	punpckldq	%xmm1, %xmm2
    000005ea: 	movdqu	-0x4(%r13,%rbp), %xmm1
    000005f1: 	paddd	%xmm2, %xmm0
    000005f5: 	movdqa	%xmm1, %xmm2
    000005f9: 	psrlq	$0x20, %xmm1
    000005fe: 	pmuludq	%xmm3, %xmm2
    00000602: 	psrlq	$0x20, %xmm3
    00000607: 	pmuludq	%xmm3, %xmm1
    0000060b: 	pshufd	$0x8, %xmm2, %xmm2
    00000610: 	pshufd	$0x8, %xmm1, %xmm1
    00000615: 	punpckldq	%xmm1, %xmm2
    00000619: 	paddd	%xmm2, %xmm0
    0000061d: 	paddd	%xmm4, %xmm0
    00000621: 	movups	%xmm0, (%rsi)
    00000624: 	movq	0x58(%rsp), %rsi
    00000629: 	cmpq	%rsi, 0x50(%rsp)
    0000062e: 	je	.Ltmp617 # Offset: 1582
    00000634: 	movq	0x80(%rsp), %rbx
    0000063c: 	movq	-0x58(%rsp), %r11
    00000641: 	movq	-0x70(%rsp), %rbp
    00000646: 	movq	-0x50(%rsp), %r15
    0000064b: 	movq	%rbx, %rax
    0000064e: 	movq	%rbx, %r10
    00000651: 	movl	-0x48(%rsp), %r12d
    00000656: 	addq	%r11, %rax
    00000659: 	addq	%rbp, %r10
    0000065c: 	movl	(%r13,%rax,4), %esi
    00000661: 	imull	%edx, %esi
    00000664: 	movl	%esi, %eax
    00000666: 	movl	(%r13,%r10,4), %esi
    0000066b: 	movq	%rbx, %r10
    0000066e: 	addq	%r15, %r10
    00000671: 	imull	%ecx, %esi
    00000674: 	imull	(%r13,%r10,4), %r12d
    0000067a: 	addl	%esi, %eax
    0000067c: 	addl	%r12d, %eax
    0000067f: 	movq	-0x68(%rsp), %r12
    00000684: 	addq	%r12, %rbx
    00000687: 	movq	%rbx, %r10
    0000068a: 	movl	-0x38(%rsp), %ebx
    0000068e: 	imull	(%r13,%r10,4), %ebx
    00000694: 	movq	0x38(%rsp), %r10
    00000699: 	addl	%ebx, %eax
    0000069b: 	movq	0x88(%rsp), %rbx
    000006a3: 	addl	%eax, (%r10)
    000006a6: 	cmpq	%rbx, -0x60(%rsp)
    000006ab: 	jbe	.Ltmp617 # Offset: 1707
    000006b1: 	movq	%rbx, %rax
    000006b4: 	addq	%r11, %rax
    000006b7: 	movl	(%r13,%rax,4), %r10d
    000006bc: 	imull	%edx, %r10d
    000006c0: 	movl	%r10d, %eax
    000006c3: 	movq	%rbx, %r10
    000006c6: 	addq	%rbp, %r10
    000006c9: 	movl	(%r13,%r10,4), %esi
    000006ce: 	movq	%rbx, %r10
    000006d1: 	addq	%r12, %rbx
    000006d4: 	addq	%r15, %r10
    000006d7: 	imull	%ecx, %esi
    000006da: 	addl	%esi, %eax
    000006dc: 	movl	-0x48(%rsp), %esi
    000006e0: 	imull	(%r13,%r10,4), %esi
    000006e6: 	movq	%rbx, %r10
    000006e9: 	movl	-0x38(%rsp), %ebx
    000006ed: 	addl	%esi, %eax
    000006ef: 	movl	(%r13,%r10,4), %esi
    000006f4: 	movq	0x40(%rsp), %r10
    000006f9: 	imull	%ebx, %esi
    000006fc: 	addl	%esi, %eax
    000006fe: 	addl	%eax, (%r10)
    00000701: 	movq	0xb8(%rsp), %r10
    00000709: 	cmpq	%r10, -0x60(%rsp)
    0000070e: 	jbe	.Ltmp617 # Offset: 1806
    00000710: 	movq	%r10, %rax
    00000713: 	addq	%r10, %r15
    00000716: 	movl	-0x48(%rsp), %esi
    0000071a: 	addq	%rbp, %rax
    0000071d: 	imull	(%r13,%r15,4), %esi
    00000723: 	imull	(%r13,%rax,4), %ecx
    00000729: 	movq	%r11, %rax
    0000072c: 	addq	%r10, %rax
    0000072f: 	imull	(%r13,%rax,4), %edx
    00000735: 	movl	%esi, %eax
    00000737: 	addl	%ecx, %edx
    00000739: 	movq	%r10, %rcx
    0000073c: 	addq	%r12, %rcx
    0000073f: 	addl	%edx, %eax
    00000741: 	imull	(%r13,%rcx,4), %ebx
    00000747: 	movq	0x60(%rsp), %rcx
    0000074c: 	addl	%ebx, %eax
    0000074e: 	addl	%eax, (%rcx)
.Ltmp617:
    00000750: 	movq	0x10(%rsp), %rax
    00000755: 	movq	0x18(%rsp), %rdx
    0000075a: 	addq	%rax, -0x40(%rsp)
    0000075f: 	addq	%rax, %rdi
    00000762: 	addq	%rax, %r8
    00000765: 	addq	%rax, %r9
    00000768: 	movq	-0x70(%rsp), %rax
    0000076d: 	addq	$0x10, -0x78(%rsp)
    00000773: 	movq	-0x78(%rsp), %rcx
    00000778: 	addq	%rdx, %rax
    0000077b: 	movq	%rax, -0x58(%rsp)
    00000780: 	movq	-0x68(%rsp), %rax
    00000785: 	addq	%rdx, %rax
    00000788: 	movq	%rax, -0x50(%rsp)
    0000078d: 	cmpq	0x8(%rsp), %rcx
    00000792: 	jne	.Ltmp619 # Offset: 1938
    00000798: 	movq	-0x20(%rsp), %rax
    0000079d: 	movq	0xd8(%rsp), %r15
    000007a5: 	movq	%rax, %r9
    000007a8: 	cmpq	%rax, -0x60(%rsp)
    000007ad: 	jbe	.Ltmp620 # Offset: 1965
.Ltmp614:
    000007b3: 	movq	-0x30(%rsp), %rbp
    000007b8: 	movq	0xe8(%rsp), %rax
    000007c0: 	movq	%r14, -0x68(%rsp)
    000007c5: 	movq	%r15, %r12
    000007c8: 	movq	0xf0(%rsp), %rbx
    000007d0: 	movq	-0x60(%rsp), %r8
    000007d5: 	leaq	(,%rbp,4), %rdx
    000007dd: 	movq	-0x8(%rsp), %rsi
    000007e2: 	addq	%rdx, %rax
    000007e5: 	movq	%r8, %rcx
    000007e8: 	movq	%rax, -0x70(%rsp)
    000007ed: 	imulq	%r9, %rsi
    000007f1: 	leaq	-0x1(%r15), %rax
    000007f5: 	movq	%rax, -0x50(%rsp)
    000007fa: 	shrq	$0x2, %rax
    000007fe: 	imulq	%r9, %rcx
    00000802: 	addq	$0x1, %rax
    00000806: 	movq	%rax, %rdi
    00000809: 	movq	%rax, -0x40(%rsp)
    0000080e: 	andq	$-0x4, %rax
    00000812: 	addq	%r13, %rsi
    00000815: 	leaq	(,%rax,4), %r11
    0000081d: 	movq	%rax, -0x48(%rsp)
    00000822: 	shrq	$0x2, %rdi
    00000826: 	movq	%r11, %rax
    00000829: 	movq	%r11, 0x40(%rsp)
    0000082e: 	shlq	$0x6, %rdi
    00000832: 	addq	%rbp, %rax
    00000835: 	addq	%r14, %rdi
    00000838: 	shlq	$0x2, %rax
    0000083c: 	leaq	(%rbx,%rax), %r10
    00000840: 	movq	%r10, -0x28(%rsp)
    00000845: 	leaq	0x4(%rbx,%rax), %r10
    0000084a: 	movq	%r10, -0x18(%rsp)
    0000084f: 	leaq	0x8(%rbx,%rax), %r10
    00000854: 	leaq	0xc(%rbx,%rax), %rax
    00000859: 	movq	%rax, 0x38(%rsp)
    0000085e: 	leaq	0x4(%r11), %rax
    00000862: 	movq	%rax, -0x38(%rsp)
    00000867: 	addq	%rbp, %rax
    0000086a: 	shlq	$0x2, %rax
    0000086e: 	movq	%r10, 0x8(%rsp)
    00000873: 	leaq	(%rbx,%rax), %r10
    00000877: 	movq	%r10, 0x60(%rsp)
    0000087c: 	leaq	0x4(%rbx,%rax), %r10
    00000881: 	movq	%r10, 0x68(%rsp)
    00000886: 	leaq	0x8(%rbx,%rax), %r10
    0000088b: 	leaq	0xc(%rbx,%rax), %rax
    00000890: 	movq	%rax, 0x78(%rsp)
    00000895: 	leaq	0x8(%r11), %rax
    00000899: 	movq	%rax, 0x48(%rsp)
    0000089e: 	addq	%rbp, %rax
    000008a1: 	shlq	$0x2, %rax
    000008a5: 	movq	%r10, 0x70(%rsp)
    000008aa: 	movq	%r11, %r10
    000008ad: 	movq	%rbx, %r11
    000008b0: 	leaq	(%rbx,%rax), %rbx
    000008b4: 	addq	%r11, %rdx
    000008b7: 	movq	%rbx, 0xb0(%rsp)
    000008bf: 	leaq	0x4(%r11,%rax), %rbx
    000008c4: 	movq	%rbx, 0xa8(%rsp)
    000008cc: 	leaq	0x8(%r11,%rax), %rbx
    000008d1: 	leaq	0xc(%r11,%rax), %rax
    000008d6: 	movq	%rax, 0x98(%rsp)
    000008de: 	leaq	0xc(%r10), %rax
    000008e2: 	movq	%rax, 0x90(%rsp)
    000008ea: 	leaq	0x40(%r14), %rax
    000008ee: 	movq	%rbx, 0xa0(%rsp)
    000008f6: 	movq	%rdx, 0xc8(%rsp)
    000008fe: 	movq	%rax, -0x58(%rsp)
    00000903: 	nopl	(%rax,%rax) # Size: 5
.Ltmp627:
    00000908: 	movq	-0x70(%rsp), %rax
    0000090d: 	movl	(%rax,%r9,4), %edx
    00000911: 	testq	%r12, %r12
    00000914: 	je	.Ltmp621 # Offset: 2324
    0000091a: 	movq	-0x68(%rsp), %rbx
    0000091f: 	cmpq	-0x58(%rsp), %rsi
    00000924: 	leaq	0x40(%rsi), %rax
    00000928: 	setae	%r10b
    0000092c: 	cmpq	%rax, %rbx
    0000092f: 	setae	%al
    00000932: 	orb	%r10b, %al
    00000935: 	je	.Ltmp622 # Offset: 2357
    0000093b: 	cmpq	$0xb, -0x50(%rsp)
    00000941: 	jbe	.Ltmp622 # Offset: 2369
    00000947: 	movd	%edx, %xmm4
    0000094b: 	movq	%rsi, %r10
    0000094e: 	movq	%rbx, %rax
    00000951: 	pshufd	$0x0, %xmm4, %xmm1
    00000956: 	movdqa	DATAat0x2d9a0(%rip), %xmm4
    0000095e: 	movdqa	%xmm1, %xmm2
    00000962: 	psrlq	$0x20, %xmm2
    00000967: 	nopw	(%rax,%rax) # Size: 9
.Ltmp623:
    00000970: 	movdqu	0x10(%r10), %xmm0
    00000976: 	movdqu	0x10(%r10), %xmm5
    0000097c: 	movdqa	%xmm4, %xmm3
    00000980: 	addq	$0x40, %rax
    00000984: 	movdqu	0x20(%r10), %xmm7
    0000098a: 	movdqu	-0x30(%rax), %xmm6
    0000098f: 	paddq	%xmm10, %xmm4
    00000994: 	paddq	%xmm9, %xmm3
    00000999: 	psrlq	$0x20, %xmm0
    0000099e: 	pmuludq	%xmm1, %xmm5
    000009a2: 	movdqu	(%r10), %xmm8
    000009a7: 	addq	$0x40, %r10
    000009ab: 	pmuludq	%xmm2, %xmm0
    000009af: 	pmuludq	%xmm1, %xmm7
    000009b3: 	pmuludq	%xmm1, %xmm8
    000009b8: 	pshufd	$0x8, %xmm5, %xmm5
    000009bd: 	pshufd	$0x8, %xmm0, %xmm0
    000009c2: 	pshufd	$0x8, %xmm7, %xmm7
    000009c7: 	punpckldq	%xmm0, %xmm5
    000009cb: 	movdqu	-0x20(%r10), %xmm0
    000009d1: 	pshufd	$0x8, %xmm8, %xmm8
    000009d7: 	paddd	%xmm6, %xmm5
    000009db: 	movdqu	-0x20(%rax), %xmm6
    000009e0: 	psrlq	$0x20, %xmm0
    000009e5: 	pmuludq	%xmm2, %xmm0
    000009e9: 	pshufd	$0x8, %xmm0, %xmm0
    000009ee: 	punpckldq	%xmm0, %xmm7
    000009f2: 	movdqu	-0x10(%r10), %xmm0
    000009f8: 	paddd	%xmm6, %xmm7
    000009fc: 	movdqu	-0x10(%r10), %xmm6
    00000a02: 	psrlq	$0x20, %xmm0
    00000a07: 	pmuludq	%xmm1, %xmm6
    00000a0b: 	pmuludq	%xmm2, %xmm0
    00000a0f: 	pshufd	$0x8, %xmm6, %xmm6
    00000a14: 	pshufd	$0x8, %xmm0, %xmm0
    00000a19: 	punpckldq	%xmm0, %xmm6
    00000a1d: 	movdqu	-0x10(%rax), %xmm0
    00000a22: 	paddd	%xmm0, %xmm6
    00000a26: 	movdqu	-0x40(%r10), %xmm0
    00000a2c: 	movups	%xmm5, -0x30(%rax)
    00000a30: 	movups	%xmm7, -0x20(%rax)
    00000a34: 	psrlq	$0x20, %xmm0
    00000a39: 	movups	%xmm6, -0x10(%rax)
    00000a3d: 	pmuludq	%xmm2, %xmm0
    00000a41: 	pshufd	$0x8, %xmm0, %xmm0
    00000a46: 	punpckldq	%xmm0, %xmm8
    00000a4b: 	movdqu	-0x40(%rax), %xmm0
    00000a50: 	paddd	%xmm8, %xmm0
    00000a55: 	movups	%xmm0, -0x40(%rax)
    00000a59: 	cmpq	%rdi, %rax
    00000a5c: 	jne	.Ltmp623 # Offset: 2652
    00000a62: 	movhlps	%xmm3, %xmm4
    00000a65: 	movq	-0x40(%rsp), %r14
    00000a6a: 	movq	%xmm4, %rax
    00000a6f: 	cmpq	%r14, -0x48(%rsp)
    00000a74: 	je	.Ltmp624 # Offset: 2676
    00000a7a: 	movq	0x40(%rsp), %rax
    00000a7f: 	movq	-0x28(%rsp), %rbx
    00000a84: 	addq	%rcx, %rax
    00000a87: 	movl	(%r13,%rax,4), %r10d
    00000a8c: 	imull	%edx, %r10d
    00000a90: 	addl	%r10d, (%rbx)
    00000a93: 	movq	-0x18(%rsp), %rbx
    00000a98: 	movl	0x4(%r13,%rax,4), %r10d
    00000a9d: 	imull	%edx, %r10d
    00000aa1: 	addl	%r10d, (%rbx)
    00000aa4: 	movq	0x8(%rsp), %rbx
    00000aa9: 	movl	0x8(%r13,%rax,4), %r10d
    00000aae: 	imull	%edx, %r10d
    00000ab2: 	addl	%r10d, (%rbx)
    00000ab5: 	movl	0xc(%r13,%rax,4), %ebx
    00000aba: 	imull	%edx, %ebx
    00000abd: 	movl	%ebx, %eax
    00000abf: 	movq	0x38(%rsp), %rbx
    00000ac4: 	addl	%eax, (%rbx)
    00000ac6: 	movq	-0x38(%rsp), %rax
    00000acb: 	cmpq	%r12, %rax
    00000ace: 	jae	.Ltmp624 # Offset: 2766
    00000ad4: 	addq	%rcx, %rax
    00000ad7: 	movq	0x60(%rsp), %rbx
    00000adc: 	movl	(%r13,%rax,4), %r10d
    00000ae1: 	imull	%edx, %r10d
    00000ae5: 	addl	%r10d, (%rbx)
    00000ae8: 	movq	0x68(%rsp), %rbx
    00000aed: 	movl	0x4(%r13,%rax,4), %r10d
    00000af2: 	imull	%edx, %r10d
    00000af6: 	addl	%r10d, (%rbx)
    00000af9: 	movq	0x70(%rsp), %rbx
    00000afe: 	movl	0x8(%r13,%rax,4), %r10d
    00000b03: 	imull	%edx, %r10d
    00000b07: 	addl	%r10d, (%rbx)
    00000b0a: 	movl	0xc(%r13,%rax,4), %ebx
    00000b0f: 	imull	%edx, %ebx
    00000b12: 	movl	%ebx, %eax
    00000b14: 	movq	0x78(%rsp), %rbx
    00000b19: 	addl	%eax, (%rbx)
    00000b1b: 	movq	0x48(%rsp), %rax
    00000b20: 	cmpq	%r12, %rax
    00000b23: 	jae	.Ltmp624 # Offset: 2851
    00000b25: 	addq	%rcx, %rax
    00000b28: 	movq	0xb0(%rsp), %rbx
    00000b30: 	movl	(%r13,%rax,4), %r10d
    00000b35: 	imull	%edx, %r10d
    00000b39: 	addl	%r10d, (%rbx)
    00000b3c: 	movq	0xa8(%rsp), %rbx
    00000b44: 	movl	0x4(%r13,%rax,4), %r10d
    00000b49: 	imull	%edx, %r10d
    00000b4d: 	addl	%r10d, (%rbx)
    00000b50: 	movq	0xa0(%rsp), %rbx
    00000b58: 	movl	0x8(%r13,%rax,4), %r10d
    00000b5d: 	imull	%edx, %r10d
    00000b61: 	addl	%r10d, (%rbx)
    00000b64: 	movl	0xc(%r13,%rax,4), %ebx
    00000b69: 	imull	%edx, %ebx
    00000b6c: 	movl	%ebx, %eax
    00000b6e: 	movq	0x98(%rsp), %rbx
    00000b76: 	addl	%eax, (%rbx)
    00000b78: 	movq	0x90(%rsp), %rax
.Ltmp624:
    00000b80: 	cmpq	%rax, %r8
    00000b83: 	jbe	.Ltmp625 # Offset: 2947
.Ltmp633:
    00000b89: 	movq	-0x30(%rsp), %r15
    00000b8e: 	leaq	0x1(%rax), %rbx
    00000b92: 	movq	%r8, %r10
    00000b95: 	movq	%rbx, -0x78(%rsp)
    00000b9a: 	subq	%rax, %r10
    00000b9d: 	leaq	(%rax,%r15), %rbx
    00000ba1: 	leaq	-0x1(%r10), %r14
    00000ba5: 	leaq	(%r11,%rbx,4), %rbp
    00000ba9: 	leaq	0x1(%rax,%rcx), %rbx
    00000bae: 	shlq	$0x2, %rbx
    00000bb2: 	cmpq	$0x2, %r14
    00000bb6: 	seta	%r15b
    00000bba: 	cmpq	-0x78(%rsp), %r8
    00000bbf: 	setae	%r14b
    00000bc3: 	testb	%r14b, %r15b
    00000bc6: 	je	.Ltmp626 # Offset: 3014
    00000bcc: 	leaq	(%r13,%rbx), %r15
    00000bd1: 	movq	%rbp, %r14
    00000bd4: 	subq	%r15, %r14
    00000bd7: 	cmpq	$0x8, %r14
    00000bdb: 	jbe	.Ltmp626 # Offset: 3035
    00000be1: 	movdqu	-0x4(%r13,%rbx), %xmm0
    00000be8: 	movd	%edx, %xmm4
    00000bec: 	cmpq	-0x78(%rsp), %r8
    00000bf1: 	movl	$0x1, %r14d
    00000bf7: 	pshufd	$0x0, %xmm4, %xmm2
    00000bfc: 	cmovbq	%r14, %r10
    00000c00: 	movdqa	%xmm0, %xmm1
    00000c04: 	pmuludq	%xmm2, %xmm1
    00000c08: 	psrlq	$0x20, %xmm0
    00000c0d: 	movq	%r10, %rbx
    00000c10: 	psrlq	$0x20, %xmm2
    00000c15: 	andq	$-0x4, %rbx
    00000c19: 	pmuludq	%xmm2, %xmm0
    00000c1d: 	addq	%rbx, %rax
    00000c20: 	pshufd	$0x8, %xmm1, %xmm1
    00000c25: 	pshufd	$0x8, %xmm0, %xmm0
    00000c2a: 	punpckldq	%xmm0, %xmm1
    00000c2e: 	movdqu	(%rbp), %xmm0
    00000c33: 	paddd	%xmm1, %xmm0
    00000c37: 	movups	%xmm0, (%rbp)
    00000c3b: 	cmpq	%r10, %rbx
    00000c3e: 	je	.Ltmp625 # Offset: 3134
    00000c40: 	movq	-0x30(%rsp), %r14
    00000c45: 	leaq	(%rcx,%rax), %rbx
    00000c49: 	movl	(%r13,%rbx,4), %r15d
    00000c4e: 	leaq	(%rax,%r14), %r10
    00000c52: 	imull	%edx, %r15d
    00000c56: 	addl	%r15d, (%r11,%r10,4)
    00000c5a: 	leaq	0x1(%rax), %r10
    00000c5e: 	cmpq	%r10, %r8
    00000c61: 	jbe	.Ltmp625 # Offset: 3169
    00000c63: 	leaq	(%r10,%r14), %rbx
    00000c67: 	addq	%rcx, %r10
    00000c6a: 	addq	$0x2, %rax
    00000c6e: 	movl	(%r13,%r10,4), %r15d
    00000c73: 	imull	%edx, %r15d
    00000c77: 	addl	%r15d, (%r11,%rbx,4)
    00000c7b: 	cmpq	%rax, %r8
    00000c7e: 	jbe	.Ltmp625 # Offset: 3198
.Ltmp632:
    00000c80: 	leaq	(%rax,%r14), %r10
    00000c84: 	addq	%rcx, %rax
    00000c87: 	imull	(%r13,%rax,4), %edx
    00000c8d: 	addl	%edx, (%r11,%r10,4)
.Ltmp625:
    00000c91: 	addq	$0x1, %r9
    00000c95: 	addq	%r8, %rcx
    00000c98: 	addq	-0x8(%rsp), %rsi
    00000c9d: 	cmpq	%r9, %r8
    00000ca0: 	ja	.Ltmp627 # Offset: 3232
    00000ca6: 	movq	-0x68(%rsp), %r14
.Ltmp620:
    00000cab: 	addq	$0x1, 0xc0(%rsp)
    00000cb4: 	movq	-0x60(%rsp), %rdx
    00000cb9: 	addq	%rdx, -0x30(%rsp)
    00000cbe: 	movq	-0x8(%rsp), %rdx
    00000cc3: 	movq	0xc0(%rsp), %rax
    00000ccb: 	addq	%rdx, (%rsp)
    00000ccf: 	addq	%rdx, %r14
    00000cd2: 	cmpq	0x100(%rsp), %rax
    00000cda: 	jne	.Ltmp628 # Offset: 3290
.Ltmp613:
    00000ce0: 	addq	$0x140, %rsp
    00000ce7: 	popq	%rbx
    00000ce8: 	popq	%rbp
    00000ce9: 	popq	%r12
    00000ceb: 	popq	%r13
    00000ced: 	popq	%r14
    00000cef: 	popq	%r15
    00000cf1: 	retq # Offset: 3313
    00000cf2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp615:
    00000cf8: 	movq	%rdi, -0x18(%rsp)
    00000cfd: 	movq	%r8, %r11
    00000d00: 	movq	-0x40(%rsp), %rbp
    00000d05: 	movq	%r9, %rbx
    00000d08: 	movq	%r8, 0x48(%rsp)
    00000d0d: 	movq	0x70(%rsp), %rax
    00000d12: 	movq	%rdi, %r10
    00000d15: 	movl	-0x38(%rsp), %r12d
    00000d1a: 	movl	-0x48(%rsp), %r8d
    00000d1f: 	movq	0x68(%rsp), %rsi
    00000d24: 	nopl	(%rax) # Size: 4
.Ltmp629:
    00000d28: 	movl	(%r10), %edi
    00000d2b: 	movl	(%r11), %r15d
    00000d2e: 	imull	%edx, %edi
    00000d31: 	imull	%ecx, %r15d
    00000d35: 	addl	%edi, %r15d
    00000d38: 	movl	(%rbx), %edi
    00000d3a: 	imull	%r8d, %edi
    00000d3e: 	addl	%r15d, %edi
    00000d41: 	movl	(%rbp), %r15d
    00000d45: 	imull	%r12d, %r15d
    00000d49: 	addl	%r15d, %edi
    00000d4c: 	addl	%edi, (%rax)
    00000d4e: 	movl	0x4(%r10), %edi
    00000d52: 	movl	0x4(%r11), %r15d
    00000d56: 	imull	%edx, %edi
    00000d59: 	imull	%ecx, %r15d
    00000d5d: 	addl	%edi, %r15d
    00000d60: 	movl	0x4(%rbx), %edi
    00000d63: 	imull	%r8d, %edi
    00000d67: 	addl	%r15d, %edi
    00000d6a: 	movl	0x4(%rbp), %r15d
    00000d6e: 	imull	%r12d, %r15d
    00000d72: 	addl	%r15d, %edi
    00000d75: 	addl	%edi, 0x4(%rax)
    00000d78: 	movl	0x8(%r10), %edi
    00000d7c: 	movl	0x8(%r11), %r15d
    00000d80: 	imull	%edx, %edi
    00000d83: 	imull	%ecx, %r15d
    00000d87: 	addl	%edi, %r15d
    00000d8a: 	movl	0x8(%rbx), %edi
    00000d8d: 	imull	%r8d, %edi
    00000d91: 	addl	%r15d, %edi
    00000d94: 	movl	0x8(%rbp), %r15d
    00000d98: 	imull	%r12d, %r15d
    00000d9c: 	addl	%r15d, %edi
    00000d9f: 	addl	%edi, 0x8(%rax)
    00000da2: 	movl	0xc(%r10), %edi
    00000da6: 	movl	0xc(%r11), %r15d
    00000daa: 	imull	%edx, %edi
    00000dad: 	imull	%ecx, %r15d
    00000db1: 	addl	%edi, %r15d
    00000db4: 	movl	0xc(%rbx), %edi
    00000db7: 	imull	%r8d, %edi
    00000dbb: 	addl	%r15d, %edi
    00000dbe: 	movl	0xc(%rbp), %r15d
    00000dc2: 	imull	%r12d, %r15d
    00000dc6: 	addl	%r15d, %edi
    00000dc9: 	addl	%edi, 0xc(%rax)
    00000dcc: 	addq	$0x10, %rax
    00000dd0: 	addq	$0x10, %r10
    00000dd4: 	addq	$0x10, %r11
    00000dd8: 	addq	$0x10, %rbx
    00000ddc: 	addq	$0x10, %rbp
    00000de0: 	cmpq	%rsi, %rax
    00000de3: 	jne	.Ltmp629 # Offset: 3555
    00000de9: 	movq	-0x18(%rsp), %rdi
    00000dee: 	movq	0x48(%rsp), %r8
    00000df3: 	jmp	.Ltmp630 # Offset: 3571
    00000df8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp622:
    00000e00: 	movq	0xc8(%rsp), %r10
    00000e08: 	movq	%rsi, %rbx
    00000e0b: 	xorl	%eax, %eax
    00000e0d: 	nopl	(%rax) # Size: 3
.Ltmp631:
    00000e10: 	movl	(%rbx), %ebp
    00000e12: 	addq	$0x4, %rax
    00000e16: 	addq	$0x10, %rbx
    00000e1a: 	imull	%edx, %ebp
    00000e1d: 	addl	%ebp, (%r10)
    00000e20: 	movl	-0xc(%rbx), %ebp
    00000e23: 	imull	%edx, %ebp
    00000e26: 	addl	%ebp, 0x4(%r10)
    00000e2a: 	movl	-0x8(%rbx), %ebp
    00000e2d: 	imull	%edx, %ebp
    00000e30: 	addl	%ebp, 0x8(%r10)
    00000e34: 	movl	-0x4(%rbx), %ebp
    00000e37: 	imull	%edx, %ebp
    00000e3a: 	addl	%ebp, 0xc(%r10)
    00000e3e: 	addq	$0x10, %r10
    00000e42: 	cmpq	%rax, %r12
    00000e45: 	ja	.Ltmp631 # Offset: 3653
    00000e47: 	jmp	.Ltmp624 # Offset: 3655
    00000e4c: 	nopl	(%rax) # Size: 4
.Ltmp626:
    00000e50: 	movl	-0x4(%r13,%rbx), %r10d
    00000e55: 	movq	-0x78(%rsp), %rbx
    00000e5a: 	imull	%edx, %r10d
    00000e5e: 	addl	%r10d, (%rbp)
    00000e62: 	cmpq	%rbx, %r8
    00000e65: 	jbe	.Ltmp625 # Offset: 3685
    00000e6b: 	movq	%rbx, %r10
    00000e6e: 	movq	-0x30(%rsp), %r14
    00000e73: 	addq	%rcx, %rbx
    00000e76: 	movl	(%r13,%rbx,4), %r15d
    00000e7b: 	addq	%r14, %r10
    00000e7e: 	imull	%edx, %r15d
    00000e82: 	addl	%r15d, (%r11,%r10,4)
    00000e86: 	leaq	0x2(%rax), %r10
    00000e8a: 	cmpq	%r10, %r8
    00000e8d: 	jbe	.Ltmp625 # Offset: 3725
    00000e93: 	leaq	(%r10,%r14), %rbx
    00000e97: 	addq	%rcx, %r10
    00000e9a: 	addq	$0x3, %rax
    00000e9e: 	movl	(%r13,%r10,4), %r15d
    00000ea3: 	imull	%edx, %r15d
    00000ea7: 	addl	%r15d, (%r11,%rbx,4)
    00000eab: 	cmpq	%rax, %r8
    00000eae: 	ja	.Ltmp632 # Offset: 3758
    00000eb4: 	jmp	.Ltmp625 # Offset: 3764
    00000eb9: 	nopl	(%rax) # Size: 7
.Ltmp618:
    00000ec0: 	movq	-0x20(%rsp), %rsi
    00000ec5: 	movq	-0x58(%rsp), %rbp
    00000eca: 	movq	-0x70(%rsp), %r10
    00000ecf: 	movq	-0x50(%rsp), %r12
    00000ed4: 	movq	%rsi, %rax
    00000ed7: 	movl	-0x38(%rsp), %r15d
    00000edc: 	addq	%rbp, %rax
    00000edf: 	addq	%rsi, %r10
    00000ee2: 	movl	(%r13,%rax,4), %ebx
    00000ee7: 	imull	%edx, %ebx
    00000eea: 	movl	%ebx, %eax
    00000eec: 	movl	(%r13,%r10,4), %ebx
    00000ef1: 	movq	%rsi, %r10
    00000ef4: 	addq	-0x68(%rsp), %rsi
    00000ef9: 	addq	%r12, %r10
    00000efc: 	movl	(%r13,%rsi,4), %esi
    00000f01: 	imull	%ecx, %ebx
    00000f04: 	movl	(%r13,%r10,4), %r11d
    00000f09: 	imull	%r15d, %esi
    00000f0d: 	addl	%ebx, %eax
    00000f0f: 	movl	-0x48(%rsp), %ebx
    00000f13: 	imull	%ebx, %r11d
    00000f17: 	addl	%r11d, %eax
    00000f1a: 	addl	%esi, %eax
    00000f1c: 	movq	-0x28(%rsp), %rsi
    00000f21: 	addl	%eax, (%rsi)
    00000f23: 	movq	0xd0(%rsp), %rsi
    00000f2b: 	cmpq	%rsi, -0x60(%rsp)
    00000f30: 	jbe	.Ltmp617 # Offset: 3888
    00000f36: 	movq	-0x70(%rsp), %rax
    00000f3b: 	movq	%rsi, %r10
    00000f3e: 	addq	%rbp, %r10
    00000f41: 	addq	%rsi, %rax
    00000f44: 	movl	(%r13,%rax,4), %r11d
    00000f49: 	imull	%ecx, %r11d
    00000f4d: 	movl	%r11d, %eax
    00000f50: 	movl	(%r13,%r10,4), %r11d
    00000f55: 	movq	%rsi, %r10
    00000f58: 	addq	-0x68(%rsp), %rsi
    00000f5d: 	addq	%r12, %r10
    00000f60: 	movl	(%r13,%rsi,4), %esi
    00000f65: 	imull	%edx, %r11d
    00000f69: 	imull	%r15d, %esi
    00000f6d: 	addl	%r11d, %eax
    00000f70: 	movl	(%r13,%r10,4), %r11d
    00000f75: 	imull	%ebx, %r11d
    00000f79: 	addl	%r11d, %eax
    00000f7c: 	movl	%r15d, %r11d
    00000f7f: 	movq	0xe0(%rsp), %r15
    00000f87: 	addl	%esi, %eax
    00000f89: 	movq	0x78(%rsp), %rsi
    00000f8e: 	addl	%eax, (%rsi)
    00000f90: 	cmpq	%r15, -0x60(%rsp)
    00000f95: 	jbe	.Ltmp617 # Offset: 3989
    00000f9b: 	movq	%r15, %rax
    00000f9e: 	movq	-0x70(%rsp), %r10
    00000fa3: 	addq	%rbp, %rax
    00000fa6: 	movl	(%r13,%rax,4), %esi
    00000fab: 	addq	%r15, %r10
    00000fae: 	imull	%edx, %esi
    00000fb1: 	movl	%esi, %eax
    00000fb3: 	movl	(%r13,%r10,4), %esi
    00000fb8: 	movq	%r15, %r10
    00000fbb: 	addq	-0x68(%rsp), %r15
    00000fc0: 	addq	%r12, %r10
    00000fc3: 	imull	%ecx, %esi
    00000fc6: 	addl	%esi, %eax
    00000fc8: 	movl	(%r13,%r10,4), %esi
    00000fcd: 	imull	%ebx, %esi
    00000fd0: 	addl	%esi, %eax
    00000fd2: 	movl	(%r13,%r15,4), %esi
    00000fd7: 	imull	%r11d, %esi
    00000fdb: 	addl	%esi, %eax
    00000fdd: 	movq	0x90(%rsp), %rsi
    00000fe5: 	addl	%eax, (%rsi)
    00000fe7: 	movq	0xf8(%rsp), %rsi
    00000fef: 	cmpq	%rsi, -0x60(%rsp)
    00000ff4: 	jbe	.Ltmp617 # Offset: 4084
    00000ffa: 	movq	-0x70(%rsp), %rax
    00000fff: 	addq	%rsi, %r12
    00001002: 	imull	(%r13,%r12,4), %ebx
    00001008: 	addq	%rsi, %rax
    0000100b: 	imull	(%r13,%rax,4), %ecx
    00001011: 	movq	%rbp, %rax
    00001014: 	addq	%rsi, %rax
    00001017: 	imull	(%r13,%rax,4), %edx
    0000101d: 	movl	%ebx, %eax
    0000101f: 	addl	%ecx, %edx
    00001021: 	movq	-0x68(%rsp), %rcx
    00001026: 	addl	%edx, %eax
    00001028: 	addq	%rsi, %rcx
    0000102b: 	imull	(%r13,%rcx,4), %r11d
    00001031: 	movq	0x98(%rsp), %rcx
    00001039: 	addl	%r11d, %eax
    0000103c: 	addl	%eax, (%rcx)
    0000103e: 	jmp	.Ltmp617 # Offset: 4158
    00001043: 	nopl	(%rax,%rax) # Size: 5
.Ltmp621:
    00001048: 	xorl	%eax, %eax
    0000104a: 	jmp	.Ltmp633 # Offset: 4170
DWARF CFI Instructions:
    <empty>
End of Function "_ZN19matmul_JKI_unrolledIiEclEPKiS2_Pimm.isra.0/1(*2)"

Binary Function "_ZN19matmul_KJI_unrolledIiEclEPKiS2_Pimm.isra.0/1(*2)" after disassembly {
  All names   : _ZN19matmul_KJI_unrolledIiEclEPKiS2_Pimm.isra.0/1
                _ZN19matmul_KJI_unrolledIiEclEPKiS2_Pimm.isra.0/matrix_multiply.cpp/1
  Number      : 69
  State       : disassembled
  Address     : 0x16840
  Size        : 0x1045
  MaxSize     : 0x1050
  Offset      : 0x16840
  Section     : .text
  Orc Section : .local.text._ZN19matmul_KJI_unrolledIiEclEPKiS2_Pimm.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB068:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	movq	%r8, %rbx
    0000000d: 	subq	$0x200, %rsp
    00000014: 	subq	$0x3, %rbx
    00000018: 	movq	%rdi, 0x1d8(%rsp)
    00000020: 	movq	%rsi, 0x150(%rsp)
    00000028: 	movq	%rdx, 0x8(%rsp)
    0000002d: 	movq	%rcx, -0x58(%rsp)
    00000032: 	movq	%r8, -0x70(%rsp)
    00000037: 	movq	%rbx, -0x20(%rsp)
    0000003c: 	je	.Ltmp634 # Offset: 60
    00000042: 	leaq	(%r8,%r8), %rax
    00000046: 	movq	%rdx, %r9
    00000049: 	movq	%rsi, %r11
    0000004c: 	movq	%r8, %rbx
    0000004f: 	movq	%rax, 0x148(%rsp)
    00000057: 	shlq	$0x4, %rbx
    0000005b: 	leaq	(,%r8,8), %rax
    00000063: 	leaq	(,%r8,4), %rcx
    0000006b: 	movq	%rax, 0x1e8(%rsp)
    00000073: 	leaq	-0x4(%r8), %rax
    00000077: 	addq	%rcx, %rsi
    0000007a: 	movq	%rax, %rdi
    0000007d: 	andq	$-0x4, %rax
    00000081: 	leaq	(%rsi,%rcx), %r13
    00000085: 	movq	%rsi, %r14
    00000088: 	shrq	$0x2, %rdi
    0000008c: 	leaq	0x4(%rax), %rsi
    00000090: 	movq	%rax, 0x1e0(%rsp)
    00000098: 	leaq	(%r13,%rcx), %r12
    0000009d: 	movq	%rdi, %rdx
    000000a0: 	leaq	0x1(%rdi), %rdi
    000000a4: 	movq	%rsi, -0x40(%rsp)
    000000a9: 	movq	%rdi, 0x30(%rsp)
    000000ae: 	leaq	(,%rdx,4), %rdi
    000000b6: 	movq	%rdi, 0x180(%rsp)
    000000be: 	movq	%rax, %rdi
    000000c1: 	movq	%r8, %rax
    000000c4: 	subq	%rdi, %rax
    000000c7: 	movq	%rbx, 0x1d0(%rsp)
    000000cf: 	movq	%rdi, %rbx
    000000d2: 	leaq	-0x4(%rax), %rdi
    000000d6: 	subq	$0x5, %rax
    000000da: 	movq	%rcx, -0x28(%rsp)
    000000df: 	movq	%rdi, 0x70(%rsp)
    000000e4: 	andq	$-0x4, %rdi
    000000e8: 	addq	%rdi, %rsi
    000000eb: 	movq	%rdi, 0x68(%rsp)
    000000f0: 	leaq	0x1(%rsi), %rdi
    000000f4: 	movq	%rax, 0x40(%rsp)
    000000f9: 	movq	%rdi, 0x78(%rsp)
    000000fe: 	leaq	0x2(%rsi), %rdi
    00000102: 	movq	%rdi, 0xa8(%rsp)
    0000010a: 	leaq	0x5(%rbx), %rdi
    0000010e: 	movq	%rdi, 0x118(%rsp)
    00000116: 	leaq	0x6(%rbx), %rdi
    0000011a: 	addq	$0x7, %rbx
    0000011e: 	movq	%rbx, 0x188(%rsp)
    00000126: 	leaq	0x10(%r9), %rbx
    0000012a: 	movq	%rsi, 0x80(%rsp)
    00000132: 	movq	%rdi, 0x158(%rsp)
    0000013a: 	movq	$0x0, 0x140(%rsp)
    00000146: 	movq	$0x0, 0x28(%rsp)
    0000014f: 	movq	%rbx, 0xf8(%rsp)
    00000157: 	leaq	0x10(%rcx), %rbx
    0000015b: 	movq	%rbx, 0x1f0(%rsp)
    00000163: 	movq	%r12, %rbx
    00000166: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp641:
    00000170: 	cmpq	$0x0, -0x58(%rsp)
    00000176: 	movq	-0x28(%rsp), %rdi
    0000017b: 	je	.Ltmp635 # Offset: 379
    00000181: 	movq	0x28(%rsp), %rdi
    00000186: 	movq	0x1d8(%rsp), %rcx
    0000018e: 	movq	0x140(%rsp), %r10
    00000196: 	movq	0x1e0(%rsp), %rbp
    0000019e: 	leaq	(%rcx,%rdi,4), %rcx
    000001a2: 	movq	-0x70(%rsp), %rax
    000001a7: 	movq	0x150(%rsp), %r9
    000001af: 	movq	%rcx, -0x50(%rsp)
    000001b4: 	movq	0xf8(%rsp), %rcx
    000001bc: 	leaq	0x5(%rbp,%r10), %r8
    000001c1: 	movq	%rax, %rdx
    000001c4: 	shlq	$0x2, %r8
    000001c8: 	movq	0x148(%rsp), %r15
    000001d0: 	movq	%rcx, -0x48(%rsp)
    000001d5: 	movq	0x1f0(%rsp), %rcx
    000001dd: 	addq	%r10, %rdx
    000001e0: 	addq	%r15, %rax
    000001e3: 	leaq	(%rcx,%r11), %rdi
    000001e7: 	addq	%r13, %rcx
    000001ea: 	movq	%rdi, -0x18(%rsp)
    000001ef: 	movq	-0x28(%rsp), %rdi
    000001f4: 	movq	%rcx, (%rsp)
    000001f8: 	leaq	(%rdi,%r11), %rcx
    000001fc: 	addq	%r14, %rdi
    000001ff: 	movq	%rdi, 0x108(%rsp)
    00000207: 	movq	0x1e8(%rsp), %rdi
    0000020f: 	movq	%rcx, 0x100(%rsp)
    00000217: 	addq	%rcx, %rdi
    0000021a: 	movq	%rdi, 0x110(%rsp)
    00000222: 	leaq	(%r9,%r8), %rdi
    00000226: 	leaq	-0x4(%r9,%r8), %r8
    0000022b: 	movq	%rdi, 0x20(%rsp)
    00000230: 	leaq	0x5(%rbp,%rdx), %rdi
    00000235: 	shlq	$0x2, %rdi
    00000239: 	movq	%r8, 0x60(%rsp)
    0000023e: 	leaq	(%r9,%rdi), %rsi
    00000242: 	leaq	-0x4(%r9,%rdi), %rdi
    00000247: 	movq	%rsi, 0x18(%rsp)
    0000024c: 	leaq	0x5(%rbp,%r15), %rsi
    00000251: 	shlq	$0x2, %rsi
    00000255: 	movq	%rdi, 0x58(%rsp)
    0000025a: 	leaq	0x10(%r11), %rdi
    0000025e: 	leaq	(%r9,%rsi), %rcx
    00000262: 	leaq	-0x4(%r9,%rsi), %rsi
    00000267: 	movq	%rcx, 0x10(%rsp)
    0000026c: 	leaq	0x5(%rbp,%rax), %rcx
    00000271: 	movq	%rsi, 0x50(%rsp)
    00000276: 	shlq	$0x2, %rcx
    0000027a: 	movq	0x80(%rsp), %rsi
    00000282: 	leaq	(%r9,%rcx), %rbp
    00000286: 	leaq	-0x4(%r9,%rcx), %rcx
    0000028b: 	movq	%rcx, 0x48(%rsp)
    00000290: 	movq	%rsi, %rcx
    00000293: 	addq	%r10, %rcx
    00000296: 	movq	%rbp, 0x38(%rsp)
    0000029b: 	leaq	(%r9,%rcx,4), %rcx
    0000029f: 	movq	%rcx, 0xa0(%rsp)
    000002a7: 	leaq	(%rsi,%rdx), %rcx
    000002ab: 	leaq	(%r9,%rcx,4), %rcx
    000002af: 	movq	%rcx, 0x88(%rsp)
    000002b7: 	movq	%rsi, %rcx
    000002ba: 	addq	%r15, %rcx
    000002bd: 	leaq	(%r9,%rcx,4), %rcx
    000002c1: 	movq	%rcx, 0x90(%rsp)
    000002c9: 	leaq	(%rsi,%rax), %rcx
    000002cd: 	movq	0x78(%rsp), %rsi
    000002d2: 	leaq	(%r9,%rcx,4), %rcx
    000002d6: 	movq	%rcx, 0x98(%rsp)
    000002de: 	movq	%rsi, %rcx
    000002e1: 	addq	%r10, %rcx
    000002e4: 	leaq	(%r9,%rcx,4), %rcx
    000002e8: 	movq	%rcx, 0xc0(%rsp)
    000002f0: 	leaq	(%rsi,%rdx), %rcx
    000002f4: 	leaq	(%r9,%rcx,4), %rcx
    000002f8: 	movq	%rdi, -0x10(%rsp)
    000002fd: 	leaq	0x10(%r13), %rdi
    00000301: 	movq	%rcx, 0xb8(%rsp)
    00000309: 	movq	%rsi, %rcx
    0000030c: 	movq	$0x0, -0x60(%rsp)
    00000315: 	addq	%r15, %rcx
    00000318: 	movq	$0x0, -0x78(%rsp)
    00000321: 	leaq	(%r9,%rcx,4), %rcx
    00000325: 	movq	%rcx, 0xb0(%rsp)
    0000032d: 	leaq	(%rsi,%rax), %rcx
    00000331: 	movq	0xa8(%rsp), %rsi
    00000339: 	leaq	(%r9,%rcx,4), %rcx
    0000033d: 	movq	%rcx, 0xc8(%rsp)
    00000345: 	movq	%rsi, %rcx
    00000348: 	addq	%r10, %rcx
    0000034b: 	leaq	(%r9,%rcx,4), %rcx
    0000034f: 	movq	%rcx, 0xf0(%rsp)
    00000357: 	leaq	(%rsi,%rdx), %rcx
    0000035b: 	leaq	(%r9,%rcx,4), %rcx
    0000035f: 	movq	%rcx, 0xe8(%rsp)
    00000367: 	movq	%rsi, %rcx
    0000036a: 	addq	%r15, %rcx
    0000036d: 	leaq	(%r9,%rcx,4), %rcx
    00000371: 	movq	%rcx, 0xe0(%rsp)
    00000379: 	leaq	(%rsi,%rax), %rcx
    0000037d: 	movq	-0x40(%rsp), %rsi
    00000382: 	leaq	(%r9,%rcx,4), %rcx
    00000386: 	movq	%rcx, 0xd8(%rsp)
    0000038e: 	movq	%rsi, %rcx
    00000391: 	addq	%r10, %rcx
    00000394: 	leaq	(%r9,%rcx,4), %rcx
    00000398: 	movq	%rcx, 0x120(%rsp)
    000003a0: 	leaq	(%rsi,%rdx), %rcx
    000003a4: 	leaq	(%r9,%rcx,4), %rcx
    000003a8: 	movq	%rcx, 0x128(%rsp)
    000003b0: 	movq	%rsi, %rcx
    000003b3: 	addq	%r15, %rcx
    000003b6: 	leaq	(%r9,%rcx,4), %rcx
    000003ba: 	movq	%rcx, 0x130(%rsp)
    000003c2: 	leaq	(%rsi,%rax), %rcx
    000003c6: 	movq	0x118(%rsp), %rsi
    000003ce: 	leaq	(%r9,%rcx,4), %rcx
    000003d2: 	movq	%rcx, 0x138(%rsp)
    000003da: 	movq	%rsi, %rcx
    000003dd: 	addq	%r10, %rcx
    000003e0: 	leaq	(%r9,%rcx,4), %rcx
    000003e4: 	movq	%rcx, 0x160(%rsp)
    000003ec: 	leaq	(%rsi,%rdx), %rcx
    000003f0: 	leaq	(%r9,%rcx,4), %rcx
    000003f4: 	movq	%rcx, 0x168(%rsp)
    000003fc: 	movq	%rsi, %rcx
    000003ff: 	addq	%r15, %rcx
    00000402: 	leaq	(%r9,%rcx,4), %rcx
    00000406: 	movq	%rcx, 0x170(%rsp)
    0000040e: 	leaq	(%rsi,%rax), %rcx
    00000412: 	movq	0x158(%rsp), %rsi
    0000041a: 	leaq	(%r9,%rcx,4), %rcx
    0000041e: 	movq	%rcx, 0x178(%rsp)
    00000426: 	movq	%rsi, %rcx
    00000429: 	addq	%r10, %rcx
    0000042c: 	leaq	(%r9,%rcx,4), %rcx
    00000430: 	movq	%rcx, 0x190(%rsp)
    00000438: 	leaq	(%rsi,%rdx), %rcx
    0000043c: 	leaq	(%r9,%rcx,4), %rcx
    00000440: 	movq	%rcx, 0x198(%rsp)
    00000448: 	movq	%rsi, %rcx
    0000044b: 	addq	%r15, %rcx
    0000044e: 	leaq	(%r9,%rcx,4), %rcx
    00000452: 	movq	%rcx, 0x1a0(%rsp)
    0000045a: 	leaq	(%rsi,%rax), %rcx
    0000045e: 	movq	0x188(%rsp), %rsi
    00000466: 	leaq	(%r9,%rcx,4), %rcx
    0000046a: 	movq	%rcx, 0x1a8(%rsp)
    00000472: 	movq	%rsi, %rcx
    00000475: 	addq	%rsi, %rdx
    00000478: 	addq	%r10, %rcx
    0000047b: 	leaq	(%r9,%rcx,4), %rcx
    0000047f: 	movq	%rcx, 0x1c8(%rsp)
    00000487: 	movq	%rsi, %rcx
    0000048a: 	leaq	(%r9,%rdx,4), %rsi
    0000048e: 	movq	%rcx, %rdx
    00000491: 	addq	%rcx, %rax
    00000494: 	movq	%rsi, 0x1c0(%rsp)
    0000049c: 	addq	%r15, %rdx
    0000049f: 	leaq	(%r9,%rax,4), %rax
    000004a3: 	leaq	(%r9,%rdx,4), %rsi
    000004a7: 	movq	%rax, 0x1b0(%rsp)
    000004af: 	movq	0x8(%rsp), %rax
    000004b4: 	movq	%rsi, 0x1b8(%rsp)
    000004bc: 	movq	%rdi, -0x8(%rsp)
    000004c1: 	nopl	(%rax) # Size: 7
.Ltmp640:
    000004c8: 	movq	-0x48(%rsp), %r10
    000004cd: 	movq	-0x50(%rsp), %rdx
    000004d2: 	cmpq	-0x10(%rsp), %rax
    000004d7: 	setae	%r8b
    000004db: 	cmpq	%r10, %r11
    000004de: 	movl	0xc(%rdx), %r15d
    000004e2: 	movl	(%rdx), %esi
    000004e4: 	movl	0x4(%rdx), %edi
    000004e7: 	movl	0x8(%rdx), %ecx
    000004ea: 	setae	%dl
    000004ed: 	orl	%edx, %r8d
    000004f0: 	cmpq	%r10, %r14
    000004f3: 	movl	%r15d, -0x68(%rsp)
    000004f8: 	setae	%dl
    000004fb: 	cmpq	-0x18(%rsp), %rax
    00000500: 	setae	%r9b
    00000504: 	orl	%r9d, %edx
    00000507: 	andl	%r8d, %edx
    0000050a: 	cmpq	-0x8(%rsp), %rax
    0000050f: 	setae	%r8b
    00000513: 	cmpq	%r10, %r13
    00000516: 	setae	%r9b
    0000051a: 	orl	%r9d, %r8d
    0000051d: 	testb	%r8b, %dl
    00000520: 	je	.Ltmp636 # Offset: 1312
    00000526: 	cmpq	(%rsp), %rax
    0000052a: 	setae	%r8b
    0000052e: 	cmpq	%r10, %rbx
    00000531: 	setae	%dl
    00000534: 	orb	%r8b, %dl
    00000537: 	je	.Ltmp636 # Offset: 1335
    0000053d: 	movd	%esi, %xmm4
    00000541: 	movd	%ecx, %xmm6
    00000545: 	movd	%r15d, %xmm7
    0000054a: 	xorl	%edx, %edx
    0000054c: 	pshufd	$0x0, %xmm4, %xmm5
    00000551: 	movd	%edi, %xmm4
    00000555: 	pshufd	$0x0, %xmm6, %xmm3
    0000055a: 	xorl	%r8d, %r8d
    0000055d: 	pshufd	$0x0, %xmm7, %xmm2
    00000562: 	pshufd	$0x0, %xmm4, %xmm4
    00000567: 	movdqa	%xmm5, %xmm9
    0000056c: 	movq	0x30(%rsp), %r9
    00000571: 	movdqa	%xmm4, %xmm8
    00000576: 	movdqa	%xmm3, %xmm7
    0000057a: 	movdqa	%xmm2, %xmm6
    0000057e: 	psrlq	$0x20, %xmm9
    00000584: 	psrlq	$0x20, %xmm8
    0000058a: 	psrlq	$0x20, %xmm7
    0000058f: 	psrlq	$0x20, %xmm6
    00000594: 	nopl	(%rax) # Size: 4
.Ltmp637:
    00000598: 	movdqu	(%r11,%rdx), %xmm1
    0000059e: 	movdqu	(%r11,%rdx), %xmm0
    000005a4: 	addq	$0x1, %r8
    000005a8: 	movdqu	(%r14,%rdx), %xmm10
    000005ae: 	psrlq	$0x20, %xmm1
    000005b3: 	pmuludq	%xmm5, %xmm0
    000005b7: 	pmuludq	%xmm9, %xmm1
    000005bc: 	pmuludq	%xmm4, %xmm10
    000005c1: 	pshufd	$0x8, %xmm0, %xmm0
    000005c6: 	pshufd	$0x8, %xmm1, %xmm1
    000005cb: 	pshufd	$0x8, %xmm10, %xmm10
    000005d1: 	punpckldq	%xmm1, %xmm0
    000005d5: 	movdqu	(%r14,%rdx), %xmm1
    000005db: 	psrlq	$0x20, %xmm1
    000005e0: 	pmuludq	%xmm8, %xmm1
    000005e5: 	pshufd	$0x8, %xmm1, %xmm1
    000005ea: 	punpckldq	%xmm1, %xmm10
    000005ef: 	movdqu	(%r13,%rdx), %xmm1
    000005f6: 	paddd	%xmm10, %xmm0
    000005fb: 	movdqu	(%r13,%rdx), %xmm10
    00000602: 	psrlq	$0x20, %xmm1
    00000607: 	pmuludq	%xmm3, %xmm10
    0000060c: 	pmuludq	%xmm7, %xmm1
    00000610: 	pshufd	$0x8, %xmm10, %xmm10
    00000616: 	pshufd	$0x8, %xmm1, %xmm1
    0000061b: 	punpckldq	%xmm1, %xmm10
    00000620: 	movdqu	(%rbx,%rdx), %xmm1
    00000625: 	paddd	%xmm10, %xmm0
    0000062a: 	movdqu	(%rbx,%rdx), %xmm10
    00000630: 	psrlq	$0x20, %xmm1
    00000635: 	pmuludq	%xmm2, %xmm10
    0000063a: 	pmuludq	%xmm6, %xmm1
    0000063e: 	pshufd	$0x8, %xmm10, %xmm10
    00000644: 	pshufd	$0x8, %xmm1, %xmm1
    00000649: 	punpckldq	%xmm1, %xmm10
    0000064e: 	movdqu	(%rax,%rdx), %xmm1
    00000653: 	paddd	%xmm10, %xmm0
    00000658: 	paddd	%xmm1, %xmm0
    0000065c: 	movups	%xmm0, (%rax,%rdx)
    00000660: 	addq	$0x10, %rdx
    00000664: 	cmpq	%r8, %r9
    00000667: 	ja	.Ltmp637 # Offset: 1639
.Ltmp652:
    0000066d: 	movq	-0x40(%rsp), %r9
    00000672: 	cmpq	%r9, -0x70(%rsp)
    00000677: 	jbe	.Ltmp638 # Offset: 1655
    0000067d: 	movq	-0x60(%rsp), %r15
    00000682: 	movq	%r9, %rdx
    00000685: 	movq	0x8(%rsp), %r10
    0000068a: 	addq	%r15, %rdx
    0000068d: 	leaq	(%r10,%rdx,4), %rdx
    00000691: 	movq	%rdx, %r8
    00000694: 	subq	0x18(%rsp), %r8
    00000699: 	cmpq	$0x8, %r8
    0000069d: 	movq	%rdx, %r8
    000006a0: 	seta	%r9b
    000006a4: 	subq	0x20(%rsp), %r8
    000006a9: 	cmpq	$0x8, %r8
    000006ad: 	seta	%r8b
    000006b1: 	andl	%r9d, %r8d
    000006b4: 	cmpq	$0x2, 0x40(%rsp)
    000006ba: 	seta	%r9b
    000006be: 	andl	%r9d, %r8d
    000006c1: 	movq	%rdx, %r9
    000006c4: 	subq	0x10(%rsp), %r9
    000006c9: 	cmpq	$0x8, %r9
    000006cd: 	seta	%r9b
    000006d1: 	testb	%r9b, %r8b
    000006d4: 	je	.Ltmp639 # Offset: 1748
    000006da: 	movq	%rdx, %r8
    000006dd: 	subq	0x38(%rsp), %r8
    000006e2: 	cmpq	$0x8, %r8
    000006e6: 	jbe	.Ltmp639 # Offset: 1766
    000006ec: 	movq	0x58(%rsp), %r9
    000006f1: 	movd	%edi, %xmm4
    000006f5: 	movd	%esi, %xmm7
    000006f9: 	pshufd	$0x0, %xmm4, %xmm2
    000006fe: 	pshufd	$0x0, %xmm7, %xmm3
    00000703: 	movd	%ecx, %xmm4
    00000707: 	movd	-0x68(%rsp), %xmm7
    0000070d: 	movdqu	(%r9), %xmm5
    00000712: 	movq	0x60(%rsp), %r9
    00000717: 	movaps	%xmm5, -0x38(%rsp)
    0000071c: 	movdqa	-0x38(%rsp), %xmm1
    00000722: 	movdqa	%xmm5, %xmm0
    00000726: 	movdqu	(%r9), %xmm6
    0000072b: 	pmuludq	%xmm2, %xmm0
    0000072f: 	psrlq	$0x20, %xmm2
    00000734: 	movq	0x50(%rsp), %r9
    00000739: 	psrlq	$0x20, %xmm1
    0000073e: 	movaps	%xmm6, -0x38(%rsp)
    00000743: 	pmuludq	%xmm2, %xmm1
    00000747: 	movdqa	%xmm6, %xmm2
    0000074b: 	movdqu	(%r9), %xmm5
    00000750: 	movq	0x48(%rsp), %r9
    00000755: 	pmuludq	%xmm3, %xmm2
    00000759: 	psrlq	$0x20, %xmm3
    0000075e: 	movdqu	(%r9), %xmm6
    00000763: 	movq	0x70(%rsp), %r9
    00000768: 	pshufd	$0x8, %xmm0, %xmm0
    0000076d: 	pshufd	$0x8, %xmm1, %xmm1
    00000772: 	punpckldq	%xmm1, %xmm0
    00000776: 	movdqa	-0x38(%rsp), %xmm1
    0000077c: 	pshufd	$0x8, %xmm2, %xmm2
    00000781: 	movaps	%xmm5, -0x38(%rsp)
    00000786: 	psrlq	$0x20, %xmm1
    0000078b: 	pmuludq	%xmm3, %xmm1
    0000078f: 	pshufd	$0x0, %xmm4, %xmm3
    00000794: 	pshufd	$0x8, %xmm1, %xmm1
    00000799: 	punpckldq	%xmm1, %xmm2
    0000079d: 	movdqa	-0x38(%rsp), %xmm1
    000007a3: 	movaps	%xmm6, -0x38(%rsp)
    000007a8: 	paddd	%xmm2, %xmm0
    000007ac: 	movdqa	%xmm5, %xmm2
    000007b0: 	movdqu	(%rdx), %xmm5
    000007b4: 	pmuludq	%xmm3, %xmm2
    000007b8: 	psrlq	$0x20, %xmm1
    000007bd: 	psrlq	$0x20, %xmm3
    000007c2: 	pmuludq	%xmm3, %xmm1
    000007c6: 	pshufd	$0x0, %xmm7, %xmm3
    000007cb: 	pshufd	$0x8, %xmm2, %xmm2
    000007d0: 	pshufd	$0x8, %xmm1, %xmm1
    000007d5: 	punpckldq	%xmm1, %xmm2
    000007d9: 	movdqa	-0x38(%rsp), %xmm1
    000007df: 	paddd	%xmm2, %xmm0
    000007e3: 	movdqa	%xmm6, %xmm2
    000007e7: 	pmuludq	%xmm3, %xmm2
    000007eb: 	psrlq	$0x20, %xmm1
    000007f0: 	psrlq	$0x20, %xmm3
    000007f5: 	pmuludq	%xmm3, %xmm1
    000007f9: 	pshufd	$0x8, %xmm2, %xmm2
    000007fe: 	pshufd	$0x8, %xmm1, %xmm1
    00000803: 	punpckldq	%xmm1, %xmm2
    00000807: 	paddd	%xmm2, %xmm0
    0000080b: 	paddd	%xmm5, %xmm0
    0000080f: 	movups	%xmm0, (%rdx)
    00000812: 	cmpq	%r9, 0x68(%rsp)
    00000817: 	je	.Ltmp638 # Offset: 2071
    0000081d: 	movq	0xa0(%rsp), %r9
    00000825: 	movq	0x88(%rsp), %rbp
    0000082d: 	movq	0x98(%rsp), %r12
    00000835: 	movq	0x80(%rsp), %r8
    0000083d: 	movl	(%r9), %edx
    00000840: 	movl	(%rbp), %r9d
    00000844: 	movq	0x90(%rsp), %rbp
    0000084c: 	addq	%r15, %r8
    0000084f: 	imull	%esi, %edx
    00000852: 	imull	%edi, %r9d
    00000856: 	addl	%edx, %r9d
    00000859: 	movl	(%rbp), %edx
    0000085c: 	movd	%xmm7, %ebp
    00000860: 	imull	%ecx, %edx
    00000863: 	addl	%r9d, %edx
    00000866: 	movl	(%r12), %r9d
    0000086a: 	movq	-0x70(%rsp), %r12
    0000086f: 	imull	%ebp, %r9d
    00000873: 	addl	%r9d, %edx
    00000876: 	addl	%edx, (%r10,%r8,4)
    0000087a: 	movq	0x78(%rsp), %r8
    0000087f: 	cmpq	%r8, %r12
    00000882: 	jbe	.Ltmp638 # Offset: 2178
    00000888: 	addq	%r15, %r8
    0000088b: 	movq	0xb8(%rsp), %r9
    00000893: 	movq	%r8, -0x68(%rsp)
    00000898: 	movq	0xc0(%rsp), %r8
    000008a0: 	movl	(%r9), %edx
    000008a3: 	movl	(%r8), %r9d
    000008a6: 	movq	0xb0(%rsp), %r8
    000008ae: 	imull	%edi, %edx
    000008b1: 	imull	%esi, %r9d
    000008b5: 	addl	%edx, %r9d
    000008b8: 	movl	(%r8), %edx
    000008bb: 	movq	0xc8(%rsp), %r8
    000008c3: 	imull	%ecx, %edx
    000008c6: 	addl	%r9d, %edx
    000008c9: 	movl	(%r8), %r9d
    000008cc: 	movq	-0x68(%rsp), %r8
    000008d1: 	imull	%ebp, %r9d
    000008d5: 	addl	%r9d, %edx
    000008d8: 	addl	%edx, (%r10,%r8,4)
    000008dc: 	movq	0xa8(%rsp), %rdx
    000008e4: 	cmpq	%rdx, %r12
    000008e7: 	jbe	.Ltmp638 # Offset: 2279
    000008e9: 	movq	0xe8(%rsp), %r9
    000008f1: 	movq	0xf0(%rsp), %r8
    000008f9: 	addq	%r15, %rdx
    000008fc: 	imull	(%r9), %edi
    00000900: 	imull	(%r8), %esi
    00000904: 	addl	%edi, %esi
    00000906: 	movq	0xe0(%rsp), %rdi
    0000090e: 	imull	(%rdi), %ecx
    00000911: 	movq	0xd8(%rsp), %rdi
    00000919: 	imull	(%rdi), %ebp
    0000091c: 	addl	%esi, %ecx
    0000091e: 	addl	%ebp, %ecx
    00000920: 	addl	%ecx, (%r10,%rdx,4)
.Ltmp638:
    00000924: 	movq	-0x28(%rsp), %rdi
    00000929: 	addq	$0x1, -0x78(%rsp)
    0000092f: 	movq	-0x70(%rsp), %rsi
    00000934: 	addq	%rdi, -0x50(%rsp)
    00000939: 	addq	%rdi, -0x48(%rsp)
    0000093e: 	movq	-0x78(%rsp), %rcx
    00000943: 	addq	%rdi, %rax
    00000946: 	addq	%rsi, -0x60(%rsp)
    0000094b: 	cmpq	-0x58(%rsp), %rcx
    00000950: 	jne	.Ltmp640 # Offset: 2384
.Ltmp635:
    00000956: 	movq	0x1d0(%rsp), %rax
    0000095e: 	addq	$0x4, 0x28(%rsp)
    00000964: 	addq	%rdi, 0x140(%rsp)
    0000096c: 	movq	0x28(%rsp), %rcx
    00000971: 	addq	%rax, %r11
    00000974: 	addq	%rax, %r14
    00000977: 	addq	%rax, %r13
    0000097a: 	addq	%rax, %rbx
    0000097d: 	addq	%rdi, 0x148(%rsp)
    00000985: 	cmpq	-0x20(%rsp), %rcx
    0000098a: 	jb	.Ltmp641 # Offset: 2442
    00000990: 	cmpq	%rcx, -0x70(%rsp)
    00000995: 	jbe	.Ltmp642 # Offset: 2453
.Ltmp654:
    0000099b: 	cmpq	$0x0, -0x58(%rsp)
    000009a1: 	je	.Ltmp642 # Offset: 2465
    000009a7: 	movq	-0x70(%rsp), %rax
    000009ac: 	movq	0x28(%rsp), %rbx
    000009b1: 	movq	0x1d8(%rsp), %rdi
    000009b9: 	movq	0x8(%rsp), %r8
    000009be: 	movq	%rax, %r9
    000009c1: 	imulq	%rbx, %r9
    000009c5: 	leaq	(%rdi,%rbx,4), %r12
    000009c9: 	leaq	(,%rax,4), %rdi
    000009d1: 	movq	%rdi, -0x78(%rsp)
    000009d6: 	movq	%r9, 0x38(%rsp)
    000009db: 	movq	%rax, %r9
    000009de: 	movq	%rbx, %rax
    000009e1: 	movq	0x150(%rsp), %rbx
    000009e9: 	imulq	%rdi, %rax
    000009ed: 	movq	-0x20(%rsp), %rdi
    000009f2: 	addq	%rax, %rbx
    000009f5: 	leaq	-0x1(%rdi), %rax
    000009f9: 	movq	%rax, %rdx
    000009fc: 	andq	$-0x4, %rax
    00000a00: 	shrq	$0x2, %rdx
    00000a04: 	addq	$0x4, %rax
    00000a08: 	leaq	(,%rdx,4), %rcx
    00000a10: 	leaq	0x1(%rdx), %rbp
    00000a14: 	xorl	%edx, %edx
    00000a16: 	testq	%rdi, %rdi
    00000a19: 	cmovneq	%rax, %rdx
    00000a1d: 	movq	%r9, %rdi
    00000a20: 	movq	%rcx, 0x48(%rsp)
    00000a25: 	subq	%rdx, %rdi
    00000a28: 	movq	%rdx, %r15
    00000a2b: 	leaq	-0x1(%rdi), %rax
    00000a2f: 	movq	%rdi, -0x60(%rsp)
    00000a34: 	cmpq	$0x2, %rax
    00000a38: 	seta	-0x68(%rsp)
    00000a3d: 	andq	$-0x4, %rdi
    00000a41: 	leaq	(%rdx,%rdi), %rax
    00000a45: 	movq	%rdi, -0x50(%rsp)
    00000a4a: 	movq	%rax, -0x40(%rsp)
    00000a4f: 	leaq	0x1(%rax), %rdi
    00000a53: 	addq	$0x2, %rax
    00000a57: 	movq	%rax, -0x18(%rsp)
    00000a5c: 	leaq	0x1(%rdx), %rax
    00000a60: 	movq	%rax, (%rsp)
    00000a64: 	leaq	0x2(%rdx), %rax
    00000a68: 	movq	%rax, 0x10(%rsp)
    00000a6d: 	leaq	0x3(%rdx), %rax
    00000a71: 	movq	%rax, 0x20(%rsp)
    00000a76: 	leaq	0x10(%r8), %rax
    00000a7a: 	movq	%rdi, -0x48(%rsp)
    00000a7f: 	movq	%rax, 0x50(%rsp)
    00000a84: 	nopl	(%rax) # Size: 4
.Ltmp650:
    00000a88: 	movq	0x150(%rsp), %rcx
    00000a90: 	movq	0x38(%rsp), %rdi
    00000a95: 	movq	%r8, %rdx
    00000a98: 	xorl	%r11d, %r11d
    00000a9b: 	leaq	(%rcx,%rdi,4), %rax
    00000a9f: 	movq	%rax, 0x8(%rsp)
    00000aa4: 	leaq	0x1(%r15,%rdi), %rax
    00000aa9: 	shlq	$0x2, %rax
    00000aad: 	leaq	(%rcx,%rax), %rsi
    00000ab1: 	leaq	-0x4(%rcx,%rax), %r14
    00000ab6: 	movq	-0x40(%rsp), %rax
    00000abb: 	movq	%rsi, -0x70(%rsp)
    00000ac0: 	addq	%rdi, %rax
    00000ac3: 	leaq	(%rcx,%rax,4), %rax
    00000ac7: 	movq	%rax, -0x38(%rsp)
    00000acc: 	movq	-0x48(%rsp), %rax
    00000ad1: 	addq	%rdi, %rax
    00000ad4: 	leaq	(%rcx,%rax,4), %rax
    00000ad8: 	movq	%rax, -0x10(%rsp)
    00000add: 	movq	-0x18(%rsp), %rax
    00000ae2: 	addq	%rdi, %rax
    00000ae5: 	leaq	(%rcx,%rax,4), %rax
    00000ae9: 	movq	%rax, -0x8(%rsp)
    00000aee: 	movq	(%rsp), %rax
    00000af2: 	addq	%rdi, %rax
    00000af5: 	leaq	(%rcx,%rax,4), %rax
    00000af9: 	movq	%rax, 0x18(%rsp)
    00000afe: 	movq	0x10(%rsp), %rax
    00000b03: 	addq	%rdi, %rax
    00000b06: 	leaq	(%rcx,%rax,4), %rax
    00000b0a: 	movq	%rax, 0x30(%rsp)
    00000b0f: 	movq	0x20(%rsp), %rax
    00000b14: 	addq	%rdi, %rax
    00000b17: 	xorl	%edi, %edi
    00000b19: 	leaq	(%rcx,%rax,4), %rax
    00000b1d: 	movq	%rax, 0x40(%rsp)
    00000b22: 	leaq	0x10(%rbx), %rax
    00000b26: 	movq	%rax, -0x28(%rsp)
    00000b2b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp649:
    00000b30: 	cmpq	$0x0, -0x20(%rsp)
    00000b36: 	movl	(%r12,%rdi,4), %ecx
    00000b3a: 	je	.Ltmp643 # Offset: 2874
    00000b3c: 	leaq	0x10(%rdx), %rax
    00000b40: 	cmpq	%rax, %rbx
    00000b43: 	jae	.Ltmp644 # Offset: 2883
    00000b45: 	cmpq	-0x28(%rsp), %rdx
    00000b4a: 	jb	.Ltmp645 # Offset: 2890
.Ltmp644:
    00000b50: 	movd	%ecx, %xmm5
    00000b54: 	xorl	%eax, %eax
    00000b56: 	xorl	%esi, %esi
    00000b58: 	pshufd	$0x0, %xmm5, %xmm2
    00000b5d: 	movdqa	%xmm2, %xmm3
    00000b61: 	psrlq	$0x20, %xmm3
    00000b66: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp646:
    00000b70: 	movdqu	(%rbx,%rax), %xmm0
    00000b75: 	movdqu	(%rbx,%rax), %xmm1
    00000b7a: 	addq	$0x1, %rsi
    00000b7e: 	psrlq	$0x20, %xmm0
    00000b83: 	pmuludq	%xmm2, %xmm1
    00000b87: 	pmuludq	%xmm3, %xmm0
    00000b8b: 	pshufd	$0x8, %xmm1, %xmm1
    00000b90: 	pshufd	$0x8, %xmm0, %xmm0
    00000b95: 	punpckldq	%xmm0, %xmm1
    00000b99: 	movdqu	(%rdx,%rax), %xmm0
    00000b9e: 	paddd	%xmm1, %xmm0
    00000ba2: 	movups	%xmm0, (%rdx,%rax)
    00000ba6: 	addq	$0x10, %rax
    00000baa: 	cmpq	%rbp, %rsi
    00000bad: 	jb	.Ltmp646 # Offset: 2989
.Ltmp643:
    00000baf: 	cmpq	%r15, %r9
    00000bb2: 	jbe	.Ltmp647 # Offset: 2994
    00000bb8: 	leaq	(%r15,%rdi), %rax
    00000bbc: 	leaq	(%r8,%rax,4), %rax
    00000bc0: 	movq	%rax, %rsi
    00000bc3: 	subq	-0x70(%rsp), %rsi
    00000bc8: 	cmpq	$0x8, %rsi
    00000bcc: 	jbe	.Ltmp648 # Offset: 3020
    00000bd2: 	cmpb	$0x0, -0x68(%rsp)
    00000bd7: 	je	.Ltmp648 # Offset: 3031
    00000bdd: 	movdqu	(%r14), %xmm1
    00000be2: 	movdqu	(%r14), %xmm0
    00000be7: 	movd	%ecx, %xmm5
    00000beb: 	pshufd	$0x0, %xmm5, %xmm2
    00000bf0: 	movq	-0x50(%rsp), %rsi
    00000bf5: 	pmuludq	%xmm2, %xmm1
    00000bf9: 	psrlq	$0x20, %xmm0
    00000bfe: 	psrlq	$0x20, %xmm2
    00000c03: 	pmuludq	%xmm2, %xmm0
    00000c07: 	pshufd	$0x8, %xmm1, %xmm1
    00000c0c: 	pshufd	$0x8, %xmm0, %xmm0
    00000c11: 	punpckldq	%xmm0, %xmm1
    00000c15: 	movdqu	(%rax), %xmm0
    00000c19: 	paddd	%xmm1, %xmm0
    00000c1d: 	movups	%xmm0, (%rax)
    00000c20: 	cmpq	%rsi, -0x60(%rsp)
    00000c25: 	je	.Ltmp647 # Offset: 3109
    00000c27: 	movq	-0x38(%rsp), %r10
    00000c2c: 	movq	-0x40(%rsp), %rax
    00000c31: 	movl	(%r10), %esi
    00000c34: 	addq	%rdi, %rax
    00000c37: 	imull	%ecx, %esi
    00000c3a: 	addl	%esi, (%r8,%rax,4)
    00000c3e: 	movq	-0x48(%rsp), %rax
    00000c43: 	cmpq	%rax, %r9
    00000c46: 	jbe	.Ltmp647 # Offset: 3142
    00000c48: 	movq	-0x10(%rsp), %r10
    00000c4d: 	addq	%rdi, %rax
    00000c50: 	movl	(%r10), %esi
    00000c53: 	imull	%ecx, %esi
    00000c56: 	addl	%esi, (%r8,%rax,4)
    00000c5a: 	movq	-0x18(%rsp), %rax
    00000c5f: 	cmpq	%rax, %r9
    00000c62: 	jbe	.Ltmp647 # Offset: 3170
    00000c64: 	movq	-0x8(%rsp), %rsi
    00000c69: 	addq	%rdi, %rax
    00000c6c: 	imull	(%rsi), %ecx
    00000c6f: 	addl	%ecx, (%r8,%rax,4)
.Ltmp647:
    00000c73: 	addq	$0x1, %r11
    00000c77: 	addq	%r9, %rdi
    00000c7a: 	addq	-0x78(%rsp), %rdx
    00000c7f: 	cmpq	%r11, -0x58(%rsp)
    00000c84: 	jne	.Ltmp649 # Offset: 3204
    00000c8a: 	addq	$0x1, 0x28(%rsp)
    00000c90: 	movq	0x28(%rsp), %rax
    00000c95: 	addq	$0x4, %r12
    00000c99: 	addq	%r9, 0x38(%rsp)
    00000c9e: 	addq	-0x78(%rsp), %rbx
    00000ca3: 	cmpq	%rax, %r9
    00000ca6: 	ja	.Ltmp650 # Offset: 3238
.Ltmp642:
    00000cac: 	addq	$0x200, %rsp
    00000cb3: 	popq	%rbx
    00000cb4: 	popq	%rbp
    00000cb5: 	popq	%r12
    00000cb7: 	popq	%r13
    00000cb9: 	popq	%r14
    00000cbb: 	popq	%r15
    00000cbd: 	retq # Offset: 3261
    00000cbe: 	nop # Size: 2
.Ltmp636:
    00000cc0: 	movq	0xf8(%rsp), %r9
    00000cc8: 	movq	%rax, -0x38(%rsp)
    00000ccd: 	movq	%r11, %r8
    00000cd0: 	movq	0x180(%rsp), %rdx
    00000cd8: 	addq	-0x60(%rsp), %rdx
    00000cdd: 	movq	%r11, 0xd0(%rsp)
    00000ce5: 	leaq	(%r9,%rdx,4), %r12
    00000ce9: 	movq	0x110(%rsp), %rbp
    00000cf1: 	movq	%rax, %rdx
    00000cf4: 	movq	0x108(%rsp), %r10
    00000cfc: 	movq	0x100(%rsp), %r9
    00000d04: 	movl	-0x68(%rsp), %r11d
    00000d09: 	nopl	(%rax) # Size: 7
.Ltmp651:
    00000d10: 	movl	(%r8), %eax
    00000d13: 	movl	(%r9), %r15d
    00000d16: 	imull	%esi, %eax
    00000d19: 	imull	%edi, %r15d
    00000d1d: 	addl	%eax, %r15d
    00000d20: 	movl	(%r10), %eax
    00000d23: 	imull	%ecx, %eax
    00000d26: 	addl	%r15d, %eax
    00000d29: 	movl	(%rbp), %r15d
    00000d2d: 	imull	%r11d, %r15d
    00000d31: 	addl	%r15d, %eax
    00000d34: 	addl	%eax, (%rdx)
    00000d36: 	movl	0x4(%r8), %eax
    00000d3a: 	movl	0x4(%r9), %r15d
    00000d3e: 	imull	%esi, %eax
    00000d41: 	imull	%edi, %r15d
    00000d45: 	addl	%eax, %r15d
    00000d48: 	movl	0x4(%r10), %eax
    00000d4c: 	imull	%ecx, %eax
    00000d4f: 	addl	%r15d, %eax
    00000d52: 	movl	0x4(%rbp), %r15d
    00000d56: 	imull	%r11d, %r15d
    00000d5a: 	addl	%r15d, %eax
    00000d5d: 	addl	%eax, 0x4(%rdx)
    00000d60: 	movl	0x8(%r8), %eax
    00000d64: 	movl	0x8(%r9), %r15d
    00000d68: 	imull	%esi, %eax
    00000d6b: 	imull	%edi, %r15d
    00000d6f: 	addl	%eax, %r15d
    00000d72: 	movl	0x8(%r10), %eax
    00000d76: 	imull	%ecx, %eax
    00000d79: 	addl	%r15d, %eax
    00000d7c: 	movl	0x8(%rbp), %r15d
    00000d80: 	imull	%r11d, %r15d
    00000d84: 	addl	%r15d, %eax
    00000d87: 	addl	%eax, 0x8(%rdx)
    00000d8a: 	movl	0xc(%r8), %eax
    00000d8e: 	movl	0xc(%r9), %r15d
    00000d92: 	imull	%esi, %eax
    00000d95: 	imull	%edi, %r15d
    00000d99: 	addl	%eax, %r15d
    00000d9c: 	movl	0xc(%r10), %eax
    00000da0: 	imull	%ecx, %eax
    00000da3: 	addl	%r15d, %eax
    00000da6: 	movl	0xc(%rbp), %r15d
    00000daa: 	imull	%r11d, %r15d
    00000dae: 	addl	%r15d, %eax
    00000db1: 	addl	%eax, 0xc(%rdx)
    00000db4: 	addq	$0x10, %rdx
    00000db8: 	addq	$0x10, %r8
    00000dbc: 	addq	$0x10, %r9
    00000dc0: 	addq	$0x10, %r10
    00000dc4: 	addq	$0x10, %rbp
    00000dc8: 	cmpq	%r12, %rdx
    00000dcb: 	jne	.Ltmp651 # Offset: 3531
    00000dd1: 	movq	-0x38(%rsp), %rax
    00000dd6: 	movq	0xd0(%rsp), %r11
    00000dde: 	jmp	.Ltmp652 # Offset: 3550
    00000de3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp648:
    00000de8: 	movl	(%r14), %esi
    00000deb: 	imull	%ecx, %esi
    00000dee: 	addl	%esi, (%rax)
    00000df0: 	movq	(%rsp), %rax
    00000df4: 	cmpq	%rax, %r9
    00000df7: 	jbe	.Ltmp647 # Offset: 3575
    00000dfd: 	movq	0x18(%rsp), %r10
    00000e02: 	addq	%rdi, %rax
    00000e05: 	movl	(%r10), %esi
    00000e08: 	imull	%ecx, %esi
    00000e0b: 	addl	%esi, (%r8,%rax,4)
    00000e0f: 	movq	0x10(%rsp), %rax
    00000e14: 	cmpq	%rax, %r9
    00000e17: 	jbe	.Ltmp647 # Offset: 3607
    00000e1d: 	movq	0x30(%rsp), %r10
    00000e22: 	addq	%rdi, %rax
    00000e25: 	movl	(%r10), %esi
    00000e28: 	imull	%ecx, %esi
    00000e2b: 	addl	%esi, (%r8,%rax,4)
    00000e2f: 	movq	0x20(%rsp), %rax
    00000e34: 	cmpq	%rax, %r9
    00000e37: 	jbe	.Ltmp647 # Offset: 3639
    00000e3d: 	movq	0x40(%rsp), %rsi
    00000e42: 	addq	%rdi, %rax
    00000e45: 	imull	(%rsi), %ecx
    00000e48: 	addl	%ecx, (%r8,%rax,4)
    00000e4c: 	jmp	.Ltmp647 # Offset: 3660
    00000e51: 	nopl	(%rax) # Size: 7
.Ltmp645:
    00000e58: 	movq	0x48(%rsp), %rax
    00000e5d: 	movq	0x50(%rsp), %rsi
    00000e62: 	addq	%rdi, %rax
    00000e65: 	leaq	(%rsi,%rax,4), %r13
    00000e69: 	movq	0x8(%rsp), %rsi
    00000e6e: 	movq	%rdx, %rax
    00000e71: 	nopl	(%rax) # Size: 7
.Ltmp653:
    00000e78: 	movl	(%rsi), %r10d
    00000e7b: 	addq	$0x10, %rsi
    00000e7f: 	imull	%ecx, %r10d
    00000e83: 	addl	%r10d, (%rax)
    00000e86: 	movl	-0xc(%rsi), %r10d
    00000e8a: 	imull	%ecx, %r10d
    00000e8e: 	addl	%r10d, 0x4(%rax)
    00000e92: 	movl	-0x8(%rsi), %r10d
    00000e96: 	imull	%ecx, %r10d
    00000e9a: 	addl	%r10d, 0x8(%rax)
    00000e9e: 	movl	-0x4(%rsi), %r10d
    00000ea2: 	imull	%ecx, %r10d
    00000ea6: 	addl	%r10d, 0xc(%rax)
    00000eaa: 	addq	$0x10, %rax
    00000eae: 	cmpq	%rax, %r13
    00000eb1: 	jne	.Ltmp653 # Offset: 3761
    00000eb3: 	jmp	.Ltmp643 # Offset: 3763
    00000eb8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp639:
    00000ec0: 	movq	0x120(%rsp), %r9
    00000ec8: 	movq	0x128(%rsp), %r10
    00000ed0: 	movq	0x138(%rsp), %r15
    00000ed8: 	movl	(%r9), %r8d
    00000edb: 	movl	(%r10), %r9d
    00000ede: 	movq	0x130(%rsp), %r10
    00000ee6: 	imull	%esi, %r8d
    00000eea: 	imull	%edi, %r9d
    00000eee: 	addl	%r8d, %r9d
    00000ef1: 	movl	(%r10), %r8d
    00000ef4: 	movl	-0x68(%rsp), %r10d
    00000ef9: 	imull	%ecx, %r8d
    00000efd: 	addl	%r9d, %r8d
    00000f00: 	movl	(%r15), %r9d
    00000f03: 	movq	-0x70(%rsp), %r15
    00000f08: 	imull	%r10d, %r9d
    00000f0c: 	addl	%r9d, %r8d
    00000f0f: 	addl	%r8d, (%rdx)
    00000f12: 	movq	0x118(%rsp), %rdx
    00000f1a: 	cmpq	%rdx, %r15
    00000f1d: 	jbe	.Ltmp638 # Offset: 3869
    00000f23: 	movq	0x160(%rsp), %r9
    00000f2b: 	movq	0x168(%rsp), %rbp
    00000f33: 	movq	%rdx, %r8
    00000f36: 	movq	-0x60(%rsp), %r12
    00000f3b: 	movl	(%r9), %edx
    00000f3e: 	movl	(%rbp), %r9d
    00000f42: 	movq	0x170(%rsp), %rbp
    00000f4a: 	addq	%r12, %r8
    00000f4d: 	imull	%esi, %edx
    00000f50: 	imull	%edi, %r9d
    00000f54: 	addl	%edx, %r9d
    00000f57: 	movl	(%rbp), %edx
    00000f5a: 	movq	0x178(%rsp), %rbp
    00000f62: 	imull	%ecx, %edx
    00000f65: 	addl	%r9d, %edx
    00000f68: 	movl	(%rbp), %r9d
    00000f6c: 	movq	0x8(%rsp), %rbp
    00000f71: 	imull	%r10d, %r9d
    00000f75: 	addl	%r9d, %edx
    00000f78: 	addl	%edx, (%rbp,%r8,4)
    00000f7d: 	movq	0x158(%rsp), %r8
    00000f85: 	cmpq	%r8, %r15
    00000f88: 	jbe	.Ltmp638 # Offset: 3976
    00000f8e: 	addq	%r12, %r8
    00000f91: 	movq	0x190(%rsp), %r9
    00000f99: 	movq	%r8, -0x68(%rsp)
    00000f9e: 	movq	0x198(%rsp), %r8
    00000fa6: 	movl	(%r9), %edx
    00000fa9: 	movl	(%r8), %r9d
    00000fac: 	movq	0x1a0(%rsp), %r8
    00000fb4: 	imull	%esi, %edx
    00000fb7: 	imull	%edi, %r9d
    00000fbb: 	addl	%edx, %r9d
    00000fbe: 	movl	(%r8), %edx
    00000fc1: 	movq	0x1a8(%rsp), %r8
    00000fc9: 	imull	%ecx, %edx
    00000fcc: 	addl	%r9d, %edx
    00000fcf: 	movl	(%r8), %r9d
    00000fd2: 	movq	-0x68(%rsp), %r8
    00000fd7: 	imull	%r10d, %r9d
    00000fdb: 	addl	%r9d, %edx
    00000fde: 	addl	%edx, (%rbp,%r8,4)
    00000fe3: 	movq	0x188(%rsp), %rdx
    00000feb: 	cmpq	%rdx, %r15
    00000fee: 	jbe	.Ltmp638 # Offset: 4078
    00000ff4: 	movq	0x1c0(%rsp), %r9
    00000ffc: 	addq	%r12, %rdx
    00000fff: 	imull	(%r9), %edi
    00001003: 	movq	0x1c8(%rsp), %r9
    0000100b: 	imull	(%r9), %esi
    0000100f: 	addl	%edi, %esi
    00001011: 	movq	0x1b8(%rsp), %rdi
    00001019: 	imull	(%rdi), %ecx
    0000101c: 	movq	0x1b0(%rsp), %rdi
    00001024: 	addl	%esi, %ecx
    00001026: 	movl	(%rdi), %esi
    00001028: 	imull	%r10d, %esi
    0000102c: 	addl	%esi, %ecx
    0000102e: 	addl	%ecx, (%rbp,%rdx,4)
    00001032: 	jmp	.Ltmp638 # Offset: 4146
.Ltmp634:
    00001037: 	movq	$0x0, 0x28(%rsp)
    00001040: 	jmp	.Ltmp654 # Offset: 4160
DWARF CFI Instructions:
    <empty>
End of Function "_ZN19matmul_KJI_unrolledIiEclEPKiS2_Pimm.isra.0/1(*2)"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev(*2)" after disassembly {
  All names   : _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
                _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev
  Number      : 70
  State       : disassembled
  Address     : 0x17890
  Size        : 0x1f7
  MaxSize     : 0x200
  Offset      : 0x17890
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB069:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x28, %rsp
    00000015: 	movq	0x20(%rdi), %rcx
    00000019: 	movq	0x30(%rdi), %rax
    0000001d: 	movq	0x38(%rdi), %r13
    00000021: 	movq	0x10(%rdi), %rbp
    00000025: 	movq	%rcx, 0x10(%rsp)
    0000002a: 	movq	0x28(%rdi), %rcx
    0000002e: 	movq	%rax, 0x8(%rsp)
    00000033: 	movq	0x48(%rdi), %rax
    00000037: 	leaq	0x8(%rcx), %r12
    0000003b: 	movq	%rcx, 0x18(%rsp)
    00000040: 	movq	%rax, (%rsp)
    00000044: 	cmpq	%r12, %rax
    00000047: 	jbe	.Ltmp655 # Offset: 71
    00000049: 	nopl	(%rax) # Size: 7
.Ltmp658:
    00000050: 	movq	(%r12), %r15
    00000054: 	leaq	0x200(%r15), %rbx
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp657:
    00000060: 	movq	(%r15), %rdi
    00000063: 	leaq	0x10(%r15), %rdx
    00000067: 	cmpq	%rdx, %rdi
    0000006a: 	je	.Ltmp656 # Offset: 106
    00000070: 	movq	0x10(%r15), %rax
    00000074: 	addq	$0x20, %r15
    00000078: 	leaq	0x1(%rax), %rsi
    0000007c: 	callq	_ZdlPvm@PLT # Offset: 124
    00000081: 	cmpq	%r15, %rbx
    00000084: 	jne	.Ltmp657 # Offset: 132
    00000086: 	addq	$0x8, %r12
    0000008a: 	cmpq	%r12, (%rsp)
    0000008e: 	ja	.Ltmp658 # Offset: 142
.Ltmp655:
    00000090: 	movq	(%rsp), %rcx
    00000094: 	cmpq	%rcx, 0x18(%rsp)
    00000099: 	je	.Ltmp659 # Offset: 153
    0000009f: 	cmpq	0x10(%rsp), %rbp
    000000a4: 	je	.Ltmp660 # Offset: 164
.Ltmp663:
    000000a6: 	movq	(%rbp), %rdi
    000000aa: 	leaq	0x10(%rbp), %rax
    000000ae: 	cmpq	%rax, %rdi
    000000b1: 	je	.Ltmp661 # Offset: 177
.Ltmp662:
    000000b3: 	movq	0x10(%rbp), %rax
    000000b7: 	addq	$0x20, %rbp
    000000bb: 	leaq	0x1(%rax), %rsi
    000000bf: 	callq	_ZdlPvm@PLT # Offset: 191
    000000c4: 	cmpq	%rbp, 0x10(%rsp)
    000000c9: 	je	.Ltmp660 # Offset: 201
    000000cb: 	movq	(%rbp), %rdi
    000000cf: 	leaq	0x10(%rbp), %rax
    000000d3: 	cmpq	%rax, %rdi
    000000d6: 	jne	.Ltmp662 # Offset: 214
.Ltmp661:
    000000d8: 	addq	$0x20, %rbp
    000000dc: 	cmpq	%rbp, 0x10(%rsp)
    000000e1: 	jne	.Ltmp663 # Offset: 225
    000000e3: 	cmpq	%r13, 0x8(%rsp)
    000000e8: 	je	.Ltmp664 # Offset: 232
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp666:
    000000f0: 	movq	(%r13), %rdi
    000000f4: 	leaq	0x10(%r13), %rax
    000000f8: 	cmpq	%rax, %rdi
    000000fb: 	je	.Ltmp665 # Offset: 251
    000000fd: 	movq	0x10(%r13), %rax
    00000101: 	leaq	0x1(%rax), %rsi
    00000105: 	callq	_ZdlPvm@PLT # Offset: 261
.Ltmp665:
    0000010a: 	addq	$0x20, %r13
.Ltmp660:
    0000010e: 	cmpq	%r13, 0x8(%rsp)
    00000113: 	jne	.Ltmp666 # Offset: 275
.Ltmp664:
    00000115: 	movq	(%r14), %rdi
    00000118: 	testq	%rdi, %rdi
    0000011b: 	je	.Ltmp667 # Offset: 283
.Ltmp673:
    00000121: 	movq	0x48(%r14), %rax
    00000125: 	movq	0x28(%r14), %rbx
    00000129: 	leaq	0x8(%rax), %rbp
    0000012d: 	cmpq	%rbx, %rbp
    00000130: 	jbe	.Ltmp668 # Offset: 304
    00000132: 	nopw	(%rax,%rax) # Size: 6
.Ltmp669:
    00000138: 	movq	(%rbx), %rdi
    0000013b: 	movl	$0x200, %esi
    00000140: 	addq	$0x8, %rbx
    00000144: 	callq	_ZdlPvm@PLT # Offset: 324
    00000149: 	cmpq	%rbx, %rbp
    0000014c: 	ja	.Ltmp669 # Offset: 332
    0000014e: 	movq	(%r14), %rdi
.Ltmp668:
    00000151: 	movq	0x8(%r14), %rsi
    00000155: 	addq	$0x28, %rsp
    00000159: 	popq	%rbx
    0000015a: 	popq	%rbp
    0000015b: 	shlq	$0x3, %rsi
    0000015f: 	popq	%r12
    00000161: 	popq	%r13
    00000163: 	popq	%r14
    00000165: 	popq	%r15
    00000167: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 359
    0000016c: 	nopl	(%rax) # Size: 4
.Ltmp656:
    00000170: 	addq	$0x20, %r15
    00000174: 	cmpq	%r15, %rbx
    00000177: 	jne	.Ltmp657 # Offset: 375
    0000017d: 	addq	$0x8, %r12
    00000181: 	cmpq	%r12, (%rsp)
    00000185: 	ja	.Ltmp658 # Offset: 389
    0000018b: 	jmp	.Ltmp655 # Offset: 395
.Ltmp659:
    00000190: 	cmpq	0x8(%rsp), %rbp
    00000195: 	je	.Ltmp664 # Offset: 405
.Ltmp672:
    0000019b: 	movq	(%rbp), %rdi
    0000019f: 	leaq	0x10(%rbp), %rax
    000001a3: 	cmpq	%rax, %rdi
    000001a6: 	je	.Ltmp670 # Offset: 422
.Ltmp671:
    000001a8: 	movq	0x10(%rbp), %rax
    000001ac: 	addq	$0x20, %rbp
    000001b0: 	leaq	0x1(%rax), %rsi
    000001b4: 	callq	_ZdlPvm@PLT # Offset: 436
    000001b9: 	cmpq	%rbp, 0x8(%rsp)
    000001be: 	je	.Ltmp664 # Offset: 446
    000001c4: 	movq	(%rbp), %rdi
    000001c8: 	leaq	0x10(%rbp), %rax
    000001cc: 	cmpq	%rax, %rdi
    000001cf: 	jne	.Ltmp671 # Offset: 463
.Ltmp670:
    000001d1: 	addq	$0x20, %rbp
    000001d5: 	cmpq	%rbp, 0x8(%rsp)
    000001da: 	jne	.Ltmp672 # Offset: 474
    000001dc: 	movq	(%r14), %rdi
    000001df: 	testq	%rdi, %rdi
    000001e2: 	jne	.Ltmp673 # Offset: 482
.Ltmp667:
    000001e8: 	addq	$0x28, %rsp
    000001ec: 	popq	%rbx
    000001ed: 	popq	%rbp
    000001ee: 	popq	%r12
    000001f0: 	popq	%r13
    000001f2: 	popq	%r14
    000001f4: 	popq	%r15
    000001f6: 	retq # Offset: 502
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev(*2)"

Binary Function "_Z13verify_matmulIiEvPT_S1_S1_mm.constprop.0/1(*2)" after disassembly {
  All names   : _Z13verify_matmulIiEvPT_S1_S1_mm.constprop.0/1
                _Z13verify_matmulIiEvPT_S1_S1_mm.constprop.0/matrix_multiply.cpp/1
  Number      : 71
  State       : disassembled
  Address     : 0x17a90
  Size        : 0x3bd4
  MaxSize     : 0x3be0
  Offset      : 0x17a90
  Section     : .text
  Orc Section : .local.text._Z13verify_matmulIiEvPT_S1_S1_mm.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB070:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	leaq	-0x3a000(%rsp), %r11
.Ltmp674:
    00000012: 	subq	$0x1000, %rsp
    00000019: 	orq	$0x0, (%rsp)
    0000001e: 	cmpq	%r11, %rsp
    00000021: 	jne	.Ltmp674 # Offset: 33
    00000023: 	subq	$0xab8, %rsp
    0000002a: 	movq	%rdi, 0x10(%rsp)
    0000002f: 	movq	%rdi, %rbx
    00000032: 	leaq	0x120(%rsp), %rdi
    0000003a: 	movq	%rsi, 0x20(%rsp)
    0000003f: 	xorl	%esi, %esi
    00000041: 	movq	%rdx, 0xa8(%rsp)
    00000049: 	movl	$0x3a980, %edx
    0000004e: 	movq	%fs:0x28, %rax
    00000057: 	movq	%rax, 0x3aaa8(%rsp)
    0000005f: 	xorl	%eax, %eax
    00000061: 	movq	%rdi, 0xb0(%rsp)
    00000069: 	callq	memset@PLT # Offset: 105
    0000006e: 	movq	%rbx, %rcx
    00000071: 	leaq	0x320(%rbx), %rsi
    00000078: 	xorl	%eax, %eax
.Ltmp676:
    0000007a: 	movd	%eax, %xmm5
    0000007e: 	movq	%rcx, %rdx
    00000081: 	pshufd	$0x0, %xmm5, %xmm0
.Ltmp675:
    00000086: 	movups	%xmm0, (%rdx)
    00000089: 	addq	$0x10, %rdx
    0000008d: 	cmpq	%rdx, %rsi
    00000090: 	jne	.Ltmp675 # Offset: 144
    00000092: 	addq	$0x1, %rax
    00000096: 	addq	$0x320, %rcx
    0000009d: 	addq	$0x320, %rsi
    000000a4: 	cmpq	$0x12c, %rax
    000000aa: 	jne	.Ltmp676 # Offset: 170
    000000ac: 	movq	0x20(%rsp), %rcx
    000000b1: 	xorl	%eax, %eax
    000000b3: 	leaq	0x4b0(%rcx), %rsi
.Ltmp678:
    000000ba: 	movd	%eax, %xmm5
    000000be: 	movq	%rcx, %rdx
    000000c1: 	pshufd	$0x0, %xmm5, %xmm0
.Ltmp677:
    000000c6: 	movups	%xmm0, (%rdx)
    000000c9: 	addq	$0x10, %rdx
    000000cd: 	cmpq	%rdx, %rsi
    000000d0: 	jne	.Ltmp677 # Offset: 208
    000000d2: 	addq	$0x1, %rax
    000000d6: 	addq	$0x4b0, %rcx
    000000dd: 	addq	$0x4b0, %rsi
    000000e4: 	cmpq	$0xc8, %rax
    000000ea: 	jne	.Ltmp678 # Offset: 234
    000000ec: 	movq	0x20(%rsp), %rdi
    000000f1: 	movq	0x10(%rsp), %rcx
    000000f6: 	xorl	%esi, %esi
    000000f8: 	leaq	0x440(%rsp), %r9
.Ltmp681:
    00000100: 	movq	0xb0(%rsp), %rdx
    00000108: 	movq	%rdi, %r8
.Ltmp680:
    0000010b: 	movdqu	(%r8), %xmm2
    00000110: 	xorl	%eax, %eax
    00000112: 	movdqa	%xmm2, %xmm3
    00000116: 	psrlq	$0x20, %xmm3
    0000011b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp679:
    00000120: 	movd	(%rcx,%rax), %xmm5
    00000125: 	pshufd	$0x0, %xmm5, %xmm0
    0000012a: 	movdqa	%xmm0, %xmm1
    0000012e: 	psrlq	$0x20, %xmm0
    00000133: 	pmuludq	%xmm2, %xmm1
    00000137: 	pmuludq	%xmm3, %xmm0
    0000013b: 	pshufd	$0x8, %xmm1, %xmm1
    00000140: 	pshufd	$0x8, %xmm0, %xmm0
    00000145: 	punpckldq	%xmm0, %xmm1
    00000149: 	movdqa	(%rdx,%rax), %xmm0
    0000014e: 	paddd	%xmm1, %xmm0
    00000152: 	movaps	%xmm0, (%rdx,%rax)
    00000156: 	addq	$0x320, %rax
    0000015c: 	cmpq	$0x3a980, %rax
    00000162: 	jne	.Ltmp679 # Offset: 354
    00000164: 	addq	$0x10, %rdx
    00000168: 	addq	$0x10, %r8
    0000016c: 	cmpq	%r9, %rdx
    0000016f: 	jne	.Ltmp680 # Offset: 367
    00000171: 	addq	$0x1, %rsi
    00000175: 	addq	$0x4, %rcx
    00000179: 	addq	$0x320, %rdi
    00000180: 	cmpq	$0xc8, %rsi
    00000187: 	jne	.Ltmp681 # Offset: 391
    0000018d: 	movq	0xa8(%rsp), %r14
    00000195: 	movl	$0x3a980, %edx
    0000019a: 	xorl	%esi, %esi
    0000019c: 	movq	%r14, %rdi
    0000019f: 	callq	memset@PLT # Offset: 415
    000001a4: 	movq	0x20(%rsp), %rdx
    000001a9: 	movq	0x10(%rsp), %r10
    000001ae: 	xorl	%r9d, %r9d
    000001b1: 	leaq	0x3a980(%r14), %rax
    000001b8: 	movq	%rax, 0xb8(%rsp)
    000001c0: 	leaq	0x4(%rdx), %rbx
    000001c4: 	movq	%rbx, %r11
.Ltmp685:
    000001c7: 	movq	0xa8(%rsp), %r8
    000001cf: 	movq	%r10, %rsi
    000001d2: 	movq	%r8, 0x108(%rsp)
.Ltmp684:
    000001da: 	movq	%r8, %rcx
    000001dd: 	leaq	0x4(%rsi), %rax
    000001e1: 	addq	$0x320, %r8
    000001e8: 	cmpq	%rax, %rcx
    000001eb: 	setae	%al
    000001ee: 	cmpq	%r8, %rsi
    000001f1: 	setae	%dil
    000001f5: 	orb	%dil, %al
    000001f8: 	je	.Ltmp682 # Offset: 504
    000001fe: 	movq	%rcx, %rax
    00000201: 	subq	%r11, %rax
    00000204: 	cmpq	$0x8, %rax
    00000208: 	jbe	.Ltmp682 # Offset: 520
    0000020e: 	movd	(%rsi), %xmm5
    00000212: 	xorl	%eax, %eax
    00000214: 	pshufd	$0x0, %xmm5, %xmm2
    00000219: 	movdqa	%xmm2, %xmm3
    0000021d: 	psrlq	$0x20, %xmm3
.Ltmp683:
    00000222: 	movdqu	(%rdx,%rax), %xmm0
    00000227: 	movdqu	(%rdx,%rax), %xmm1
    0000022c: 	psrlq	$0x20, %xmm0
    00000231: 	pmuludq	%xmm2, %xmm1
    00000235: 	pmuludq	%xmm3, %xmm0
    00000239: 	pshufd	$0x8, %xmm1, %xmm1
    0000023e: 	pshufd	$0x8, %xmm0, %xmm0
    00000243: 	punpckldq	%xmm0, %xmm1
    00000247: 	movdqu	(%rcx,%rax), %xmm0
    0000024c: 	paddd	%xmm1, %xmm0
    00000250: 	movups	%xmm0, (%rcx,%rax)
    00000254: 	addq	$0x10, %rax
    00000258: 	cmpq	$0x320, %rax
    0000025e: 	jne	.Ltmp683 # Offset: 606
.Ltmp878:
    00000260: 	addq	$0x320, %rsi
    00000267: 	cmpq	%r8, 0xb8(%rsp)
    0000026f: 	jne	.Ltmp684 # Offset: 623
    00000275: 	addq	$0x1, %r9
    00000279: 	addq	$0x320, %rdx
    00000280: 	addq	$0x4, %r10
    00000284: 	addq	$0x320, %r11
    0000028b: 	cmpq	$0xc8, %r9
    00000292: 	jne	.Ltmp685 # Offset: 658
    00000298: 	movq	0xb0(%rsp), %rcx
    000002a0: 	movq	0xa8(%rsp), %rsi
    000002a8: 	xorl	%edx, %edx
    000002aa: 	movq	%rcx, 0xf8(%rsp)
.Ltmp688:
    000002b2: 	xorl	%eax, %eax
.Ltmp687:
    000002b4: 	movl	(%rsi,%rax,4), %edi
    000002b7: 	cmpl	%edi, (%rcx,%rax,4)
    000002ba: 	jne	.Ltmp686 # Offset: 698
    000002c0: 	addq	$0x1, %rax
    000002c4: 	cmpq	$0xc8, %rax
    000002ca: 	jne	.Ltmp687 # Offset: 714
    000002cc: 	addq	$0xc8, %rdx
    000002d3: 	addq	$0x320, %rcx
    000002da: 	addq	$0x320, %rsi
    000002e1: 	cmpq	$0xea60, %rdx
    000002e8: 	jne	.Ltmp688 # Offset: 744
.Ltmp900:
    000002ea: 	movq	0xa8(%rsp), %r14
    000002f2: 	movl	$0x3a980, %edx
    000002f7: 	xorl	%esi, %esi
    000002f9: 	movq	%r14, %rdi
    000002fc: 	callq	memset@PLT # Offset: 764
    00000301: 	movq	0x20(%rsp), %rcx
    00000306: 	leaq	0x320(%r14), %rdi
    0000030d: 	xorl	%r8d, %r8d
    00000310: 	movq	%rdi, 0xe8(%rsp)
    00000318: 	movq	%rdi, %r11
    0000031b: 	xorl	%edi, %edi
    0000031d: 	addq	$0x27100, %rcx
    00000324: 	movq	%rcx, (%rsp)
.Ltmp692:
    00000328: 	movq	0x10(%rsp), %r9
    0000032d: 	movq	0x20(%rsp), %rcx
    00000332: 	subq	%r8, %r9
.Ltmp691:
    00000335: 	movq	%r9, %rsi
    00000338: 	addq	$0x4, %r9
    0000033c: 	cmpq	%r9, %rax
    0000033f: 	setae	%dl
    00000342: 	cmpq	%rsi, %r11
    00000345: 	setbe	%r10b
    00000349: 	orb	%r10b, %dl
    0000034c: 	je	.Ltmp689 # Offset: 844
    00000352: 	leaq	0x4(%rcx), %r10
    00000356: 	movq	%rax, %rdx
    00000359: 	subq	%r10, %rdx
    0000035c: 	cmpq	$0x8, %rdx
    00000360: 	jbe	.Ltmp689 # Offset: 864
    00000366: 	addq	%r8, %rsi
    00000369: 	xorl	%edx, %edx
    0000036b: 	movd	(%rsi,%rdi,4), %xmm5
    00000370: 	pshufd	$0x0, %xmm5, %xmm2
    00000375: 	movdqa	%xmm2, %xmm3
    00000379: 	psrlq	$0x20, %xmm3
.Ltmp690:
    0000037e: 	movdqu	(%rcx,%rdx), %xmm0
    00000383: 	movdqu	(%rcx,%rdx), %xmm1
    00000388: 	psrlq	$0x20, %xmm0
    0000038d: 	pmuludq	%xmm2, %xmm1
    00000391: 	pmuludq	%xmm3, %xmm0
    00000395: 	pshufd	$0x8, %xmm1, %xmm1
    0000039a: 	pshufd	$0x8, %xmm0, %xmm0
    0000039f: 	punpckldq	%xmm0, %xmm1
    000003a3: 	movdqu	(%rax,%rdx), %xmm0
    000003a8: 	paddd	%xmm1, %xmm0
    000003ac: 	movups	%xmm0, (%rax,%rdx)
    000003b0: 	addq	$0x10, %rdx
    000003b4: 	cmpq	$0x320, %rdx
    000003bb: 	jne	.Ltmp690 # Offset: 955
    000003bd: 	addq	$0x320, %rcx
    000003c4: 	cmpq	%rcx, (%rsp)
    000003c8: 	jne	.Ltmp691 # Offset: 968
.Ltmp880:
    000003ce: 	addq	$0x320, %rax
    000003d4: 	addq	$0xc8, %rdi
    000003db: 	subq	$0x320, %r8
    000003e2: 	addq	$0x320, %r11
    000003e9: 	cmpq	%rax, 0xb8(%rsp)
    000003f1: 	jne	.Ltmp692 # Offset: 1009
    000003f7: 	movq	0xa8(%rsp), %rsi
    000003ff: 	movq	0xb0(%rsp), %rcx
    00000407: 	xorl	%edx, %edx
.Ltmp695:
    00000409: 	xorl	%eax, %eax
.Ltmp694:
    0000040b: 	movl	(%rsi,%rax,4), %edi
    0000040e: 	cmpl	%edi, (%rcx,%rax,4)
    00000411: 	jne	.Ltmp693 # Offset: 1041
    00000417: 	addq	$0x1, %rax
    0000041b: 	cmpq	$0xc8, %rax
    00000421: 	jne	.Ltmp694 # Offset: 1057
    00000423: 	addq	$0xc8, %rdx
    0000042a: 	addq	$0x320, %rcx
    00000431: 	addq	$0x320, %rsi
    00000438: 	cmpq	$0xea60, %rdx
    0000043f: 	jne	.Ltmp695 # Offset: 1087
.Ltmp923:
    00000441: 	movq	0xa8(%rsp), %r14
    00000449: 	movl	$0x3a980, %edx
    0000044e: 	xorl	%esi, %esi
    00000450: 	xorl	%ebp, %ebp
    00000452: 	movq	%r14, %rdi
    00000455: 	callq	memset@PLT # Offset: 1109
    0000045a: 	movq	0x10(%rsp), %r11
    0000045f: 	movq	%r14, %r10
.Ltmp698:
    00000462: 	movq	(%rsp), %r8
    00000466: 	movq	%r10, %rdi
    00000469: 	xorl	%r9d, %r9d
.Ltmp697:
    0000046c: 	movl	(%rdi), %esi
    0000046e: 	leaq	-0x27100(%r8), %rax
    00000475: 	movq	%r11, %rcx
    00000478: 	nopl	(%rax,%rax) # Size: 8
.Ltmp696:
    00000480: 	movl	(%rax), %edx
    00000482: 	imull	(%rcx), %edx
    00000485: 	addq	$0x320, %rax
    0000048b: 	addq	$0x4, %rcx
    0000048f: 	addl	%edx, %esi
    00000491: 	movl	%esi, (%rdi)
    00000493: 	cmpq	%rax, %r8
    00000496: 	jne	.Ltmp696 # Offset: 1174
    00000498: 	addq	$0x1, %r9
    0000049c: 	addq	$0x4, %rdi
    000004a0: 	addq	$0x4, %r8
    000004a4: 	cmpq	$0xc8, %r9
    000004ab: 	jne	.Ltmp697 # Offset: 1195
    000004ad: 	addq	$0xc8, %rbp
    000004b4: 	addq	$0x320, %r11
    000004bb: 	addq	$0x320, %r10
    000004c2: 	cmpq	$0xea60, %rbp
    000004c9: 	jne	.Ltmp698 # Offset: 1225
    000004cb: 	movq	0xa8(%rsp), %rsi
    000004d3: 	movq	0xb0(%rsp), %rcx
    000004db: 	xorl	%edx, %edx
.Ltmp701:
    000004dd: 	xorl	%eax, %eax
.Ltmp700:
    000004df: 	movl	(%rsi,%rax,4), %edi
    000004e2: 	cmpl	%edi, (%rcx,%rax,4)
    000004e5: 	jne	.Ltmp699 # Offset: 1253
    000004eb: 	addq	$0x1, %rax
    000004ef: 	cmpq	$0xc8, %rax
    000004f5: 	jne	.Ltmp700 # Offset: 1269
    000004f7: 	addq	$0xc8, %rdx
    000004fe: 	addq	$0x320, %rcx
    00000505: 	addq	$0x320, %rsi
    0000050c: 	cmpq	$0xea60, %rdx
    00000513: 	jne	.Ltmp701 # Offset: 1299
.Ltmp922:
    00000515: 	movq	0xa8(%rsp), %r14
    0000051d: 	movl	$0x3a980, %edx
    00000522: 	xorl	%esi, %esi
    00000524: 	xorl	%r12d, %r12d
    00000527: 	movq	%r14, %rdi
    0000052a: 	callq	memset@PLT # Offset: 1322
    0000052f: 	movq	(%rsp), %r8
    00000533: 	movq	0x20(%rsp), %rbp
    00000538: 	movq	%r14, %r11
.Ltmp704:
    0000053b: 	movq	0x10(%rsp), %r10
    00000540: 	movq	%r11, %rdi
    00000543: 	xorl	%r9d, %r9d
.Ltmp703:
    00000546: 	movl	(%rdi), %esi
    00000548: 	movq	%r10, %rcx
    0000054b: 	movq	%rbp, %rax
    0000054e: 	nop # Size: 2
.Ltmp702:
    00000550: 	movl	(%rax), %edx
    00000552: 	imull	(%rcx), %edx
    00000555: 	addq	$0x320, %rax
    0000055b: 	addq	$0x4, %rcx
    0000055f: 	addl	%edx, %esi
    00000561: 	movl	%esi, (%rdi)
    00000563: 	cmpq	%rax, %r8
    00000566: 	jne	.Ltmp702 # Offset: 1382
    00000568: 	addq	$0xc8, %r9
    0000056f: 	addq	$0x320, %rdi
    00000576: 	addq	$0x320, %r10
    0000057d: 	cmpq	$0xea60, %r9
    00000584: 	jne	.Ltmp703 # Offset: 1412
    00000586: 	addq	$0x1, %r12
    0000058a: 	addq	$0x4, %rbp
    0000058e: 	addq	$0x4, %r8
    00000592: 	addq	$0x4, %r11
    00000596: 	cmpq	$0xc8, %r12
    0000059d: 	jne	.Ltmp704 # Offset: 1437
    0000059f: 	movq	0xa8(%rsp), %rsi
    000005a7: 	movq	0xb0(%rsp), %rcx
    000005af: 	xorl	%edx, %edx
.Ltmp707:
    000005b1: 	xorl	%eax, %eax
.Ltmp706:
    000005b3: 	movl	(%rsi,%rax,4), %edi
    000005b6: 	cmpl	%edi, (%rcx,%rax,4)
    000005b9: 	jne	.Ltmp705 # Offset: 1465
    000005bf: 	addq	$0x1, %rax
    000005c3: 	cmpq	$0xc8, %rax
    000005c9: 	jne	.Ltmp706 # Offset: 1481
    000005cb: 	addq	$0xc8, %rdx
    000005d2: 	addq	$0x320, %rcx
    000005d9: 	addq	$0x320, %rsi
    000005e0: 	cmpq	$0xea60, %rdx
    000005e7: 	jne	.Ltmp707 # Offset: 1511
.Ltmp921:
    000005e9: 	movq	0xa8(%rsp), %r14
    000005f1: 	xorl	%esi, %esi
    000005f3: 	movl	$0x3a980, %edx
    000005f8: 	xorl	%ebp, %ebp
    000005fa: 	movq	%r14, %rdi
    000005fd: 	callq	memset@PLT # Offset: 1533
    00000602: 	movq	0x20(%rsp), %r10
    00000607: 	movq	0xb8(%rsp), %rsi
    0000060f: 	movq	%r14, %r11
.Ltmp710:
    00000612: 	movq	0x10(%rsp), %r9
    00000617: 	movq	%r10, %rdi
    0000061a: 	xorl	%r8d, %r8d
.Ltmp709:
    0000061d: 	movq	%r9, %rcx
    00000620: 	movq	%r11, %rax
    00000623: 	nopl	(%rax,%rax) # Size: 5
.Ltmp708:
    00000628: 	movl	(%rdi), %edx
    0000062a: 	imull	(%rcx), %edx
    0000062d: 	addq	$0x320, %rcx
    00000634: 	addl	%edx, (%rax)
    00000636: 	addq	$0x320, %rax
    0000063c: 	cmpq	%rax, %rsi
    0000063f: 	jne	.Ltmp708 # Offset: 1599
    00000641: 	addq	$0x1, %r8
    00000645: 	addq	$0x4, %r9
    00000649: 	addq	$0x320, %rdi
    00000650: 	cmpq	$0xc8, %r8
    00000657: 	jne	.Ltmp709 # Offset: 1623
    00000659: 	addq	$0x1, %rbp
    0000065d: 	addq	$0x4, %r11
    00000661: 	addq	$0x4, %rsi
    00000665: 	addq	$0x4, %r10
    00000669: 	cmpq	$0xc8, %rbp
    00000670: 	jne	.Ltmp710 # Offset: 1648
    00000672: 	movq	0xa8(%rsp), %rsi
    0000067a: 	movq	0xb0(%rsp), %rcx
    00000682: 	xorl	%edx, %edx
.Ltmp713:
    00000684: 	xorl	%eax, %eax
.Ltmp712:
    00000686: 	movl	(%rsi,%rax,4), %edi
    00000689: 	cmpl	%edi, (%rcx,%rax,4)
    0000068c: 	jne	.Ltmp711 # Offset: 1676
    00000692: 	addq	$0x1, %rax
    00000696: 	cmpq	$0xc8, %rax
    0000069c: 	jne	.Ltmp712 # Offset: 1692
    0000069e: 	addq	$0xc8, %rdx
    000006a5: 	addq	$0x320, %rcx
    000006ac: 	addq	$0x320, %rsi
    000006b3: 	cmpq	$0xea60, %rdx
    000006ba: 	jne	.Ltmp713 # Offset: 1722
.Ltmp920:
    000006bc: 	movq	0xa8(%rsp), %rdi
    000006c4: 	movl	$0x3a980, %edx
    000006c9: 	xorl	%esi, %esi
    000006cb: 	callq	memset@PLT # Offset: 1739
    000006d0: 	movq	0x20(%rsp), %r11
    000006d5: 	movq	0x10(%rsp), %r10
    000006da: 	xorl	%r9d, %r9d
.Ltmp716:
    000006dd: 	movq	0xb8(%rsp), %rsi
    000006e5: 	xorl	%r8d, %r8d
.Ltmp715:
    000006e8: 	movl	(%r11,%r8,4), %edi
    000006ec: 	leaq	-0x3a980(%rsi), %rax
    000006f3: 	movq	%r10, %rdx
    000006f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp714:
    00000700: 	movl	(%rdx), %ecx
    00000702: 	addq	$0x320, %rdx
    00000709: 	imull	%edi, %ecx
    0000070c: 	addl	%ecx, (%rax)
    0000070e: 	addq	$0x320, %rax
    00000714: 	cmpq	%rax, %rsi
    00000717: 	jne	.Ltmp714 # Offset: 1815
    00000719: 	addq	$0x1, %r8
    0000071d: 	addq	$0x4, %rsi
    00000721: 	cmpq	$0xc8, %r8
    00000728: 	jne	.Ltmp715 # Offset: 1832
    0000072a: 	addq	$0x1, %r9
    0000072e: 	addq	$0x4, %r10
    00000732: 	addq	$0x320, %r11
    00000739: 	cmpq	$0xc8, %r9
    00000740: 	jne	.Ltmp716 # Offset: 1856
    00000742: 	movq	0xa8(%rsp), %rsi
    0000074a: 	movq	0xb0(%rsp), %rcx
    00000752: 	xorl	%edx, %edx
.Ltmp719:
    00000754: 	xorl	%eax, %eax
.Ltmp718:
    00000756: 	movl	(%rsi,%rax,4), %edi
    00000759: 	cmpl	%edi, (%rcx,%rax,4)
    0000075c: 	jne	.Ltmp717 # Offset: 1884
    00000762: 	addq	$0x1, %rax
    00000766: 	cmpq	$0xc8, %rax
    0000076c: 	jne	.Ltmp718 # Offset: 1900
    0000076e: 	addq	$0xc8, %rdx
    00000775: 	addq	$0x320, %rcx
    0000077c: 	addq	$0x320, %rsi
    00000783: 	cmpq	$0xea60, %rdx
    0000078a: 	jne	.Ltmp719 # Offset: 1930
.Ltmp919:
    0000078c: 	movq	0xa8(%rsp), %rdi
    00000794: 	movl	$0x3a980, %edx
    00000799: 	xorl	%esi, %esi
    0000079b: 	callq	memset@PLT # Offset: 1947
    000007a0: 	movq	0x10(%rsp), %rdi
    000007a5: 	movq	0x20(%rsp), %rcx
    000007aa: 	xorl	%r10d, %r10d
.Ltmp723:
    000007ad: 	movq	0xa8(%rsp), %rdx
    000007b5: 	xorl	%r8d, %r8d
.Ltmp722:
    000007b8: 	movq	%rdx, %rsi
    000007bb: 	movl	(%rdi,%r8,4), %eax
    000007bf: 	subq	%rbx, %rsi
    000007c2: 	cmpq	$0x8, %rsi
    000007c6: 	jbe	.Ltmp720 # Offset: 1990
    000007cc: 	movd	%eax, %xmm5
    000007d0: 	xorl	%eax, %eax
    000007d2: 	pshufd	$0x0, %xmm5, %xmm2
    000007d7: 	movdqa	%xmm2, %xmm3
    000007db: 	psrlq	$0x20, %xmm3
.Ltmp721:
    000007e0: 	movdqu	(%rcx,%rax), %xmm0
    000007e5: 	movdqu	(%rcx,%rax), %xmm1
    000007ea: 	psrlq	$0x20, %xmm0
    000007ef: 	pmuludq	%xmm2, %xmm1
    000007f3: 	pmuludq	%xmm3, %xmm0
    000007f7: 	pshufd	$0x8, %xmm1, %xmm1
    000007fc: 	pshufd	$0x8, %xmm0, %xmm0
    00000801: 	punpckldq	%xmm0, %xmm1
    00000805: 	movdqu	(%rdx,%rax), %xmm0
    0000080a: 	paddd	%xmm1, %xmm0
    0000080e: 	movups	%xmm0, (%rdx,%rax)
    00000812: 	addq	$0x10, %rax
    00000816: 	cmpq	$0x320, %rax
    0000081c: 	jne	.Ltmp721 # Offset: 2076
.Ltmp882:
    0000081e: 	addq	$0x320, %rdx
    00000825: 	addq	$0xc8, %r8
    0000082c: 	cmpq	%rdx, 0xb8(%rsp)
    00000834: 	jne	.Ltmp722 # Offset: 2100
    00000836: 	addq	$0x1, %r10
    0000083a: 	addq	$0x320, %rcx
    00000841: 	addq	$0x4, %rdi
    00000845: 	addq	$0x320, %rbx
    0000084c: 	cmpq	$0xc8, %r10
    00000853: 	jne	.Ltmp723 # Offset: 2131
    00000859: 	movq	0xa8(%rsp), %rsi
    00000861: 	movq	0xb0(%rsp), %rcx
    00000869: 	xorl	%edx, %edx
.Ltmp726:
    0000086b: 	xorl	%eax, %eax
.Ltmp725:
    0000086d: 	movl	(%rsi,%rax,4), %edi
    00000870: 	cmpl	%edi, (%rcx,%rax,4)
    00000873: 	jne	.Ltmp724 # Offset: 2163
    00000879: 	addq	$0x1, %rax
    0000087d: 	cmpq	$0xc8, %rax
    00000883: 	jne	.Ltmp725 # Offset: 2179
    00000885: 	addq	$0xc8, %rdx
    0000088c: 	addq	$0x320, %rcx
    00000893: 	addq	$0x320, %rsi
    0000089a: 	cmpq	$0xea60, %rdx
    000008a1: 	jne	.Ltmp726 # Offset: 2209
.Ltmp918:
    000008a3: 	movq	0xa8(%rsp), %rbx
    000008ab: 	movl	$0x3a980, %edx
    000008b0: 	xorl	%esi, %esi
    000008b2: 	movq	%rbx, %rdi
    000008b5: 	callq	memset@PLT # Offset: 2229
    000008ba: 	movq	0x10(%rsp), %rdi
    000008bf: 	movq	%rbx, %rdx
.Ltmp730:
    000008c2: 	movq	0x20(%rsp), %rcx
    000008c7: 	movq	%rdi, %r8
.Ltmp729:
    000008ca: 	leaq	0x4(%rcx), %r9
    000008ce: 	movq	%rdx, %rsi
    000008d1: 	movl	(%r8), %eax
    000008d4: 	subq	%r9, %rsi
    000008d7: 	cmpq	$0x8, %rsi
    000008db: 	jbe	.Ltmp727 # Offset: 2267
    000008e1: 	movd	%eax, %xmm5
    000008e5: 	xorl	%eax, %eax
    000008e7: 	pshufd	$0x0, %xmm5, %xmm2
    000008ec: 	movdqa	%xmm2, %xmm3
    000008f0: 	psrlq	$0x20, %xmm3
.Ltmp728:
    000008f5: 	movdqu	(%rcx,%rax), %xmm0
    000008fa: 	movdqu	(%rcx,%rax), %xmm1
    000008ff: 	psrlq	$0x20, %xmm0
    00000904: 	pmuludq	%xmm2, %xmm1
    00000908: 	pmuludq	%xmm3, %xmm0
    0000090c: 	pshufd	$0x8, %xmm1, %xmm1
    00000911: 	pshufd	$0x8, %xmm0, %xmm0
    00000916: 	punpckldq	%xmm0, %xmm1
    0000091a: 	movdqu	(%rdx,%rax), %xmm0
    0000091f: 	paddd	%xmm1, %xmm0
    00000923: 	movups	%xmm0, (%rdx,%rax)
    00000927: 	addq	$0x10, %rax
    0000092b: 	cmpq	$0x320, %rax
    00000931: 	jne	.Ltmp728 # Offset: 2353
.Ltmp884:
    00000933: 	addq	$0x4, %r8
    00000937: 	addq	$0x320, %rcx
    0000093e: 	cmpq	%rcx, (%rsp)
    00000942: 	jne	.Ltmp729 # Offset: 2370
    00000944: 	addq	$0x320, %rdx
    0000094b: 	addq	$0x320, %rdi
    00000952: 	cmpq	%rdx, 0xb8(%rsp)
    0000095a: 	jne	.Ltmp730 # Offset: 2394
    00000960: 	movq	0xa8(%rsp), %rsi
    00000968: 	movq	0xb0(%rsp), %rcx
    00000970: 	xorl	%edx, %edx
.Ltmp733:
    00000972: 	xorl	%eax, %eax
.Ltmp732:
    00000974: 	movl	(%rsi,%rax,4), %edi
    00000977: 	cmpl	%edi, (%rcx,%rax,4)
    0000097a: 	jne	.Ltmp731 # Offset: 2426
    00000980: 	addq	$0x1, %rax
    00000984: 	cmpq	$0xc8, %rax
    0000098a: 	jne	.Ltmp732 # Offset: 2442
    0000098c: 	addq	$0xc8, %rdx
    00000993: 	addq	$0x320, %rcx
    0000099a: 	addq	$0x320, %rsi
    000009a1: 	cmpq	$0xea60, %rdx
    000009a8: 	jne	.Ltmp733 # Offset: 2472
.Ltmp917:
    000009aa: 	movq	0xa8(%rsp), %rbx
    000009b2: 	xorl	%esi, %esi
    000009b4: 	movl	$0x3a980, %edx
    000009b9: 	movq	%rbx, %rdi
    000009bc: 	callq	memset@PLT # Offset: 2492
    000009c1: 	movq	0x20(%rsp), %rax
    000009c6: 	movq	0x10(%rsp), %r8
    000009cb: 	movq	%rbx, %rsi
    000009ce: 	leaq	0x27420(%rax), %r10
.Ltmp736:
    000009d5: 	movq	(%rsp), %rcx
    000009d9: 	movq	0x20(%rsp), %r9
    000009de: 	movq	%rsi, %rdi
.Ltmp735:
    000009e1: 	movq	%r8, %rdx
    000009e4: 	movq	%r9, %rax
    000009e7: 	pxor	%xmm3, %xmm3
    000009eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp734:
    000009f0: 	movd	0x640(%rax), %xmm1
    000009f8: 	movd	(%rax), %xmm0
    000009fc: 	addq	$0x10, %rdx
    00000a00: 	addq	$0xc80, %rax
    00000a06: 	movd	-0x320(%rax), %xmm5
    00000a0e: 	movd	-0x960(%rax), %xmm4
    00000a16: 	movdqu	-0x10(%rdx), %xmm2
    00000a1b: 	punpckldq	%xmm5, %xmm1
    00000a1f: 	punpckldq	%xmm4, %xmm0
    00000a23: 	punpcklqdq	%xmm1, %xmm0
    00000a27: 	movdqu	-0x10(%rdx), %xmm1
    00000a2c: 	psrlq	$0x20, %xmm2
    00000a31: 	pmuludq	%xmm0, %xmm1
    00000a35: 	psrlq	$0x20, %xmm0
    00000a3a: 	pmuludq	%xmm2, %xmm0
    00000a3e: 	pshufd	$0x8, %xmm1, %xmm1
    00000a43: 	pshufd	$0x8, %xmm0, %xmm0
    00000a48: 	punpckldq	%xmm0, %xmm1
    00000a4c: 	paddd	%xmm1, %xmm3
    00000a50: 	cmpq	%rax, %rcx
    00000a53: 	jne	.Ltmp734 # Offset: 2643
    00000a55: 	movdqa	%xmm3, %xmm0
    00000a59: 	addq	$0x4, %rcx
    00000a5d: 	addq	$0x4, %r9
    00000a61: 	psrldq	$0x8, %xmm0
    00000a66: 	paddd	%xmm0, %xmm3
    00000a6a: 	movdqa	%xmm3, %xmm0
    00000a6e: 	psrldq	$0x4, %xmm0
    00000a73: 	paddd	%xmm0, %xmm3
    00000a77: 	movd	%xmm3, %eax
    00000a7b: 	addl	%eax, (%rdi)
    00000a7d: 	addq	$0x4, %rdi
    00000a81: 	cmpq	%rcx, %r10
    00000a84: 	jne	.Ltmp735 # Offset: 2692
    00000a8a: 	addq	$0x320, %r8
    00000a91: 	addq	$0x320, %rsi
    00000a98: 	cmpq	%rsi, 0xb8(%rsp)
    00000aa0: 	jne	.Ltmp736 # Offset: 2720
    00000aa6: 	movq	0xa8(%rsp), %rsi
    00000aae: 	movq	0xb0(%rsp), %rcx
    00000ab6: 	xorl	%edx, %edx
.Ltmp739:
    00000ab8: 	xorl	%eax, %eax
.Ltmp738:
    00000aba: 	movl	(%rsi,%rax,4), %edi
    00000abd: 	cmpl	%edi, (%rcx,%rax,4)
    00000ac0: 	jne	.Ltmp737 # Offset: 2752
    00000ac6: 	addq	$0x1, %rax
    00000aca: 	cmpq	$0xc8, %rax
    00000ad0: 	jne	.Ltmp738 # Offset: 2768
    00000ad2: 	addq	$0xc8, %rdx
    00000ad9: 	addq	$0x320, %rcx
    00000ae0: 	addq	$0x320, %rsi
    00000ae7: 	cmpq	$0xea60, %rdx
    00000aee: 	jne	.Ltmp739 # Offset: 2798
.Ltmp916:
    00000af0: 	movq	0xa8(%rsp), %rbx
    00000af8: 	movl	$0x3a980, %edx
    00000afd: 	xorl	%esi, %esi
    00000aff: 	movq	%rbx, %rdi
    00000b02: 	callq	memset@PLT # Offset: 2818
    00000b07: 	movq	0x10(%rsp), %rax
    00000b0c: 	movq	%rbx, %r9
    00000b0f: 	xorl	%r10d, %r10d
    00000b12: 	movq	(%rsp), %rcx
    00000b16: 	movq	0x20(%rsp), %r8
    00000b1b: 	leaq	0x3a980(%rax), %r11
.Ltmp742:
    00000b22: 	movq	0x10(%rsp), %rdi
    00000b27: 	movq	%r9, %rsi
.Ltmp741:
    00000b2a: 	movq	%rdi, %rdx
    00000b2d: 	movq	%r8, %rax
    00000b30: 	pxor	%xmm3, %xmm3
    00000b34: 	nopl	(%rax) # Size: 4
.Ltmp740:
    00000b38: 	movd	0x640(%rax), %xmm1
    00000b40: 	movd	(%rax), %xmm0
    00000b44: 	addq	$0x10, %rdx
    00000b48: 	addq	$0xc80, %rax
    00000b4e: 	movd	-0x320(%rax), %xmm5
    00000b56: 	movd	-0x960(%rax), %xmm6
    00000b5e: 	movdqu	-0x10(%rdx), %xmm2
    00000b63: 	punpckldq	%xmm5, %xmm1
    00000b67: 	punpckldq	%xmm6, %xmm0
    00000b6b: 	punpcklqdq	%xmm1, %xmm0
    00000b6f: 	movdqu	-0x10(%rdx), %xmm1
    00000b74: 	psrlq	$0x20, %xmm2
    00000b79: 	pmuludq	%xmm0, %xmm1
    00000b7d: 	psrlq	$0x20, %xmm0
    00000b82: 	pmuludq	%xmm2, %xmm0
    00000b86: 	pshufd	$0x8, %xmm1, %xmm1
    00000b8b: 	pshufd	$0x8, %xmm0, %xmm0
    00000b90: 	punpckldq	%xmm0, %xmm1
    00000b94: 	paddd	%xmm1, %xmm3
    00000b98: 	cmpq	%rax, %rcx
    00000b9b: 	jne	.Ltmp740 # Offset: 2971
    00000b9d: 	movdqa	%xmm3, %xmm0
    00000ba1: 	addq	$0x320, %rdi
    00000ba8: 	psrldq	$0x8, %xmm0
    00000bad: 	paddd	%xmm0, %xmm3
    00000bb1: 	movdqa	%xmm3, %xmm0
    00000bb5: 	psrldq	$0x4, %xmm0
    00000bba: 	paddd	%xmm0, %xmm3
    00000bbe: 	movd	%xmm3, %eax
    00000bc2: 	addl	%eax, (%rsi)
    00000bc4: 	addq	$0x320, %rsi
    00000bcb: 	cmpq	%rdi, %r11
    00000bce: 	jne	.Ltmp741 # Offset: 3022
    00000bd4: 	addq	$0x1, %r10
    00000bd8: 	addq	$0x4, %r8
    00000bdc: 	addq	$0x4, %rcx
    00000be0: 	addq	$0x4, %r9
    00000be4: 	cmpq	$0xc8, %r10
    00000beb: 	jne	.Ltmp742 # Offset: 3051
    00000bf1: 	movq	0xa8(%rsp), %rsi
    00000bf9: 	movq	0xb0(%rsp), %rcx
    00000c01: 	xorl	%edx, %edx
.Ltmp745:
    00000c03: 	xorl	%eax, %eax
.Ltmp744:
    00000c05: 	movl	(%rsi,%rax,4), %edi
    00000c08: 	cmpl	%edi, (%rcx,%rax,4)
    00000c0b: 	jne	.Ltmp743 # Offset: 3083
    00000c11: 	addq	$0x1, %rax
    00000c15: 	cmpq	$0xc8, %rax
    00000c1b: 	jne	.Ltmp744 # Offset: 3099
    00000c1d: 	addq	$0xc8, %rdx
    00000c24: 	addq	$0x320, %rcx
    00000c2b: 	addq	$0x320, %rsi
    00000c32: 	cmpq	$0xea60, %rdx
    00000c39: 	jne	.Ltmp745 # Offset: 3129
.Ltmp915:
    00000c3b: 	movq	0xa8(%rsp), %rbx
    00000c43: 	xorl	%esi, %esi
    00000c45: 	movl	$0x3a980, %edx
    00000c4a: 	xorl	%ebp, %ebp
    00000c4c: 	movq	%rbx, %rdi
    00000c4f: 	callq	memset@PLT # Offset: 3151
    00000c54: 	movq	0x20(%rsp), %r11
    00000c59: 	movq	0xb8(%rsp), %rsi
.Ltmp748:
    00000c61: 	movq	0x10(%rsp), %r10
    00000c66: 	movq	%r11, %r9
    00000c69: 	xorl	%r8d, %r8d
.Ltmp747:
    00000c6c: 	movl	(%r9), %edi
    00000c6f: 	movq	%r10, %rdx
    00000c72: 	movq	%rbx, %rax
    00000c75: 	nopl	(%rax) # Size: 3
.Ltmp746:
    00000c78: 	movl	(%rdx), %ecx
    00000c7a: 	addq	$0x320, %rdx
    00000c81: 	imull	%edi, %ecx
    00000c84: 	addl	%ecx, (%rax)
    00000c86: 	addq	$0x320, %rax
    00000c8c: 	cmpq	%rax, %rsi
    00000c8f: 	jne	.Ltmp746 # Offset: 3215
    00000c91: 	addq	$0x1, %r8
    00000c95: 	addq	$0x320, %r9
    00000c9c: 	addq	$0x4, %r10
    00000ca0: 	cmpq	$0xc8, %r8
    00000ca7: 	jne	.Ltmp747 # Offset: 3239
    00000ca9: 	addq	$0x1, %rbp
    00000cad: 	addq	$0x4, %rbx
    00000cb1: 	addq	$0x4, %rsi
    00000cb5: 	addq	$0x4, %r11
    00000cb9: 	cmpq	$0xc8, %rbp
    00000cc0: 	jne	.Ltmp748 # Offset: 3264
    00000cc2: 	movq	0xa8(%rsp), %rsi
    00000cca: 	movq	0xb0(%rsp), %rcx
    00000cd2: 	xorl	%edx, %edx
.Ltmp751:
    00000cd4: 	xorl	%eax, %eax
.Ltmp750:
    00000cd6: 	movl	(%rsi,%rax,4), %edi
    00000cd9: 	cmpl	%edi, (%rcx,%rax,4)
    00000cdc: 	jne	.Ltmp749 # Offset: 3292
    00000ce2: 	addq	$0x1, %rax
    00000ce6: 	cmpq	$0xc8, %rax
    00000cec: 	jne	.Ltmp750 # Offset: 3308
    00000cee: 	addq	$0xc8, %rdx
    00000cf5: 	addq	$0x320, %rcx
    00000cfc: 	addq	$0x320, %rsi
    00000d03: 	cmpq	$0xea60, %rdx
    00000d0a: 	jne	.Ltmp751 # Offset: 3338
.Ltmp914:
    00000d0c: 	movq	0xa8(%rsp), %rbx
    00000d14: 	movl	$0x3a980, %edx
    00000d19: 	xorl	%esi, %esi
    00000d1b: 	movq	%rbx, %rdi
    00000d1e: 	callq	memset@PLT # Offset: 3358
    00000d23: 	movq	0x20(%rsp), %rsi
    00000d28: 	movq	0x10(%rsp), %rdi
    00000d2d: 	movq	%rbx, %rdx
    00000d30: 	movl	$0x12c, %ecx
    00000d35: 	movl	$0xc8, %r8d
    00000d3b: 	callq	"_ZN19matmul_KJI_unrolledIiEclEPKiS2_Pimm.isra.0/1" # Offset: 3387
    00000d40: 	movq	0xb0(%rsp), %rcx
    00000d48: 	movq	%rbx, %rsi
    00000d4b: 	xorl	%edx, %edx
.Ltmp754:
    00000d4d: 	xorl	%eax, %eax
.Ltmp753:
    00000d4f: 	movl	(%rsi,%rax,4), %edi
    00000d52: 	cmpl	%edi, (%rcx,%rax,4)
    00000d55: 	jne	.Ltmp752 # Offset: 3413
    00000d5b: 	addq	$0x1, %rax
    00000d5f: 	cmpq	$0xc8, %rax
    00000d65: 	jne	.Ltmp753 # Offset: 3429
    00000d67: 	addq	$0xc8, %rdx
    00000d6e: 	addq	$0x320, %rcx
    00000d75: 	addq	$0x320, %rsi
    00000d7c: 	cmpq	$0xea60, %rdx
    00000d83: 	jne	.Ltmp754 # Offset: 3459
.Ltmp913:
    00000d85: 	movq	0xa8(%rsp), %rbx
    00000d8d: 	movl	$0x3a980, %edx
    00000d92: 	xorl	%esi, %esi
    00000d94: 	movq	%rbx, %rdi
    00000d97: 	callq	memset@PLT # Offset: 3479
    00000d9c: 	leaq	0x10(%rbx), %rax
    00000da0: 	movq	%rbx, %rdx
    00000da3: 	movq	$0x0, 0x8(%rsp)
    00000dac: 	movq	%rax, 0x100(%rsp)
    00000db4: 	movq	%rax, 0x28(%rsp)
    00000db9: 	movq	0x10(%rsp), %rax
    00000dbe: 	movq	%rax, 0x30(%rsp)
    00000dc3: 	movq	0xe8(%rsp), %rax
    00000dcb: 	movq	%rax, 0x18(%rsp)
    00000dd0: 	movq	0x20(%rsp), %rax
    00000dd5: 	leaq	0x320(%rax), %rcx
    00000ddc: 	movq	%rcx, 0x58(%rsp)
    00000de1: 	leaq	0x640(%rax), %rcx
    00000de8: 	addq	$0x960, %rax
    00000dee: 	movq	%rcx, 0x50(%rsp)
    00000df3: 	movq	%rax, 0x48(%rsp)
.Ltmp759:
    00000df8: 	movq	0xa8(%rsp), %rax
    00000e00: 	movq	0x8(%rsp), %rdi
    00000e05: 	movq	0x58(%rsp), %r11
    00000e0a: 	movq	0x50(%rsp), %r10
    00000e0f: 	leaq	(%rax,%rdi,4), %rax
    00000e13: 	movq	0x48(%rsp), %rcx
    00000e18: 	movq	0x20(%rsp), %r9
    00000e1d: 	movq	%rax, 0x40(%rsp)
    00000e22: 	movq	0x30(%rsp), %rax
    00000e27: 	movq	%rax, 0x38(%rsp)
.Ltmp758:
    00000e2c: 	movq	0x38(%rsp), %rax
    00000e31: 	movl	(%rax), %r14d
    00000e34: 	movl	0x4(%rax), %esi
    00000e37: 	movl	0x8(%rax), %edi
    00000e3a: 	movl	0xc(%rax), %r8d
    00000e3e: 	leaq	0x970(%r9), %rax
    00000e45: 	cmpq	%rax, %rdx
    00000e48: 	jae	.Ltmp755 # Offset: 3656
    00000e4a: 	cmpq	0x28(%rsp), %r9
    00000e4f: 	jb	.Ltmp756 # Offset: 3663
.Ltmp755:
    00000e55: 	movd	%r14d, %xmm4
    00000e5a: 	movd	%edi, %xmm6
    00000e5e: 	xorl	%eax, %eax
    00000e60: 	pshufd	$0x0, %xmm4, %xmm5
    00000e65: 	pshufd	$0x0, %xmm6, %xmm3
    00000e6a: 	movd	%esi, %xmm4
    00000e6e: 	movd	%r8d, %xmm6
    00000e73: 	pshufd	$0x0, %xmm4, %xmm4
    00000e78: 	movdqa	%xmm5, %xmm9
    00000e7d: 	pshufd	$0x0, %xmm6, %xmm2
    00000e82: 	movdqa	%xmm4, %xmm8
    00000e87: 	movdqa	%xmm3, %xmm7
    00000e8b: 	psrlq	$0x20, %xmm9
    00000e91: 	psrlq	$0x20, %xmm8
    00000e97: 	movdqa	%xmm2, %xmm6
    00000e9b: 	psrlq	$0x20, %xmm7
    00000ea0: 	psrlq	$0x20, %xmm6
    00000ea5: 	nopl	(%rax) # Size: 3
.Ltmp757:
    00000ea8: 	movdqu	(%r9,%rax), %xmm1
    00000eae: 	movdqu	(%r9,%rax), %xmm0
    00000eb4: 	movdqu	(%r11,%rax), %xmm10
    00000eba: 	psrlq	$0x20, %xmm1
    00000ebf: 	pmuludq	%xmm5, %xmm0
    00000ec3: 	pmuludq	%xmm9, %xmm1
    00000ec8: 	pmuludq	%xmm4, %xmm10
    00000ecd: 	pshufd	$0x8, %xmm0, %xmm0
    00000ed2: 	pshufd	$0x8, %xmm1, %xmm1
    00000ed7: 	pshufd	$0x8, %xmm10, %xmm10
    00000edd: 	punpckldq	%xmm1, %xmm0
    00000ee1: 	movdqu	(%r11,%rax), %xmm1
    00000ee7: 	psrlq	$0x20, %xmm1
    00000eec: 	pmuludq	%xmm8, %xmm1
    00000ef1: 	pshufd	$0x8, %xmm1, %xmm1
    00000ef6: 	punpckldq	%xmm1, %xmm10
    00000efb: 	movdqu	(%r10,%rax), %xmm1
    00000f01: 	paddd	%xmm10, %xmm0
    00000f06: 	movdqu	(%r10,%rax), %xmm10
    00000f0c: 	psrlq	$0x20, %xmm1
    00000f11: 	pmuludq	%xmm3, %xmm10
    00000f16: 	pmuludq	%xmm7, %xmm1
    00000f1a: 	pshufd	$0x8, %xmm10, %xmm10
    00000f20: 	pshufd	$0x8, %xmm1, %xmm1
    00000f25: 	punpckldq	%xmm1, %xmm10
    00000f2a: 	movdqu	(%rcx,%rax), %xmm1
    00000f2f: 	paddd	%xmm10, %xmm0
    00000f34: 	movdqu	(%rcx,%rax), %xmm10
    00000f3a: 	psrlq	$0x20, %xmm1
    00000f3f: 	pmuludq	%xmm2, %xmm10
    00000f44: 	pmuludq	%xmm6, %xmm1
    00000f48: 	pshufd	$0x8, %xmm10, %xmm10
    00000f4e: 	pshufd	$0x8, %xmm1, %xmm1
    00000f53: 	punpckldq	%xmm1, %xmm10
    00000f58: 	movdqu	(%rdx,%rax), %xmm1
    00000f5d: 	paddd	%xmm10, %xmm0
    00000f62: 	paddd	%xmm1, %xmm0
    00000f66: 	movups	%xmm0, (%rdx,%rax)
    00000f6a: 	addq	$0x10, %rax
    00000f6e: 	cmpq	$0x320, %rax
    00000f74: 	jne	.Ltmp757 # Offset: 3956
.Ltmp886:
    00000f7a: 	addq	$0x10, 0x38(%rsp)
    00000f80: 	addq	$0xc80, %r9
    00000f87: 	addq	$0xc80, %r11
    00000f8e: 	addq	$0xc80, %r10
    00000f95: 	addq	$0xc80, %rcx
    00000f9c: 	cmpq	%r9, (%rsp)
    00000fa0: 	jne	.Ltmp758 # Offset: 4000
    00000fa6: 	addq	$0xc8, 0x8(%rsp)
    00000faf: 	movq	0x8(%rsp), %rax
    00000fb4: 	addq	$0x320, %rdx
    00000fbb: 	addq	$0x320, 0x18(%rsp)
    00000fc4: 	addq	$0x320, 0x30(%rsp)
    00000fcd: 	addq	$0x320, 0x28(%rsp)
    00000fd6: 	cmpq	$0xea60, %rax
    00000fdc: 	jne	.Ltmp759 # Offset: 4060
    00000fe2: 	movq	0xa8(%rsp), %rsi
    00000fea: 	movq	0xb0(%rsp), %rcx
    00000ff2: 	xorl	%edx, %edx
.Ltmp762:
    00000ff4: 	xorl	%eax, %eax
.Ltmp761:
    00000ff6: 	movl	(%rsi,%rax,4), %edi
    00000ff9: 	cmpl	%edi, (%rcx,%rax,4)
    00000ffc: 	jne	.Ltmp760 # Offset: 4092
    00001002: 	addq	$0x1, %rax
    00001006: 	cmpq	$0xc8, %rax
    0000100c: 	jne	.Ltmp761 # Offset: 4108
    0000100e: 	addq	$0xc8, %rdx
    00001015: 	addq	$0x320, %rcx
    0000101c: 	addq	$0x320, %rsi
    00001023: 	cmpq	$0xea60, %rdx
    0000102a: 	jne	.Ltmp762 # Offset: 4138
.Ltmp912:
    0000102c: 	movq	0xa8(%rsp), %rdi
    00001034: 	movl	$0x3a980, %edx
    00001039: 	xorl	%esi, %esi
    0000103b: 	callq	memset@PLT # Offset: 4155
    00001040: 	movq	0x20(%rsp), %r14
    00001045: 	movq	$0x0, 0x70(%rsp)
    0000104e: 	movq	%r14, 0x80(%rsp)
.Ltmp770:
    00001056: 	movq	0x70(%rsp), %rdi
    0000105b: 	movl	$0xc8, %eax
    00001060: 	movq	$0x0, 0x78(%rsp)
    00001069: 	movq	%rdi, 0x48(%rsp)
    0000106e: 	subq	$-0x80, %rdi
    00001072: 	cmpq	%rax, %rdi
    00001075: 	movq	%rdi, 0x70(%rsp)
    0000107a: 	cmovbeq	%rdi, %rax
    0000107e: 	movq	%rax, %rbx
    00001081: 	movq	0x80(%rsp), %rax
    00001089: 	movq	%rax, 0x50(%rsp)
.Ltmp769:
    0000108e: 	movq	0x78(%rsp), %rax
    00001093: 	movl	$0xc8, %edi
    00001098: 	movq	%rax, %r9
    0000109b: 	subq	$-0x80, %rax
    0000109f: 	cmpq	%rdi, %rax
    000010a2: 	movq	%rax, 0x78(%rsp)
    000010a7: 	cmovbeq	%rax, %rdi
    000010ab: 	cmpq	0x48(%rsp), %rbx
    000010b0: 	jbe	.Ltmp763 # Offset: 4272
    000010b6: 	movq	0x10(%rsp), %rax
    000010bb: 	movq	%rdi, %r12
    000010be: 	movq	$0x0, 0x38(%rsp)
    000010c7: 	subq	%r9, %r12
    000010ca: 	movq	0xa8(%rsp), %rsi
    000010d2: 	leaq	(%rax,%r9,4), %r8
    000010d6: 	movq	%r12, %rax
    000010d9: 	leaq	-0x1(%r12), %r10
    000010de: 	shrq	$0x2, %rax
    000010e2: 	shlq	$0x4, %rax
    000010e6: 	movq	%rax, 0x60(%rsp)
    000010eb: 	movq	%r12, %rax
    000010ee: 	andq	$-0x4, %rax
    000010f2: 	movq	%rax, 0x8(%rsp)
    000010f7: 	addq	%r9, %rax
    000010fa: 	cmpq	$0x2, %r10
    000010fe: 	cmovbeq	%r9, %rax
    00001102: 	movq	%rax, %rcx
    00001105: 	movq	%rax, 0x68(%rsp)
    0000110a: 	leaq	(%rax,%rax,4), %rax
    0000110e: 	leaq	(%rax,%rax,4), %rax
    00001112: 	leaq	0x1(%rcx), %rbp
    00001116: 	leaq	(,%rax,8), %r13
    0000111e: 	leaq	0xc8(%r13), %rax
    00001125: 	movq	%rax, 0x40(%rsp)
    0000112a: 	leaq	0x2(%rcx), %rax
    0000112e: 	movq	%rax, 0x28(%rsp)
    00001133: 	leaq	0x190(%r13), %rax
    0000113a: 	movq	%rax, 0x88(%rsp)
    00001142: 	nopw	(%rax,%rax) # Size: 6
.Ltmp768:
    00001148: 	movq	0x60(%rsp), %rax
    0000114d: 	movq	0x38(%rsp), %rcx
    00001152: 	movq	0x10(%rsp), %rdx
    00001157: 	addq	%r8, %rax
    0000115a: 	movq	%rax, 0x18(%rsp)
    0000115f: 	movq	0x68(%rsp), %rax
    00001164: 	addq	%rcx, %rax
    00001167: 	leaq	(%rdx,%rax,4), %r11
    0000116b: 	leaq	(%rbp,%rcx), %rax
    00001170: 	leaq	(%rdx,%rax,4), %rax
    00001174: 	movq	%r11, (%rsp)
    00001178: 	movq	%rax, 0x30(%rsp)
    0000117d: 	movq	0x28(%rsp), %rax
    00001182: 	addq	%rcx, %rax
    00001185: 	movq	0x50(%rsp), %rcx
    0000118a: 	leaq	(%rdx,%rax,4), %rax
    0000118e: 	movq	%rax, 0x58(%rsp)
    00001193: 	movq	0x48(%rsp), %rax
    00001198: 	nopl	(%rax,%rax) # Size: 8
.Ltmp767:
    000011a0: 	xorl	%edx, %edx
    000011a2: 	cmpq	%r9, %rdi
    000011a5: 	jbe	.Ltmp764 # Offset: 4517
    000011ab: 	cmpq	$0x2, %r10
    000011af: 	jbe	.Ltmp765 # Offset: 4527
    000011b5: 	movq	(%rsp), %r11
    000011b9: 	movq	%r8, %r15
    000011bc: 	movq	%rcx, %rdx
    000011bf: 	pxor	%xmm0, %xmm0
.Ltmp766:
    000011c3: 	movd	0x960(%rdx), %xmm5
    000011cb: 	movd	(%rdx), %xmm1
    000011cf: 	addq	$0x10, %r15
    000011d3: 	addq	$0xc80, %rdx
    000011da: 	movd	-0x640(%rdx), %xmm2
    000011e2: 	movdqu	-0x10(%r15), %xmm3
    000011e8: 	punpckldq	%xmm5, %xmm2
    000011ec: 	movd	-0x960(%rdx), %xmm5
    000011f4: 	psrlq	$0x20, %xmm3
    000011f9: 	punpckldq	%xmm5, %xmm1
    000011fd: 	punpcklqdq	%xmm2, %xmm1
    00001201: 	movdqu	-0x10(%r15), %xmm2
    00001207: 	pmuludq	%xmm1, %xmm2
    0000120b: 	psrlq	$0x20, %xmm1
    00001210: 	pmuludq	%xmm3, %xmm1
    00001214: 	pshufd	$0x8, %xmm2, %xmm2
    00001219: 	pshufd	$0x8, %xmm1, %xmm1
    0000121e: 	punpckldq	%xmm1, %xmm2
    00001222: 	paddd	%xmm2, %xmm0
    00001226: 	cmpq	%r15, 0x18(%rsp)
    0000122b: 	jne	.Ltmp766 # Offset: 4651
    0000122d: 	movdqa	%xmm0, %xmm1
    00001231: 	movq	%r11, (%rsp)
    00001235: 	psrldq	$0x8, %xmm1
    0000123a: 	paddd	%xmm1, %xmm0
    0000123e: 	movdqa	%xmm0, %xmm1
    00001242: 	psrldq	$0x4, %xmm1
    00001247: 	paddd	%xmm1, %xmm0
    0000124b: 	movd	%xmm0, %edx
    0000124f: 	cmpq	0x8(%rsp), %r12
    00001254: 	je	.Ltmp764 # Offset: 4692
.Ltmp887:
    00001256: 	movq	(%rsp), %r11
    0000125a: 	leaq	(%r13,%rax), %r15
    0000125f: 	movl	(%r14,%r15,4), %r15d
    00001263: 	imull	(%r11), %r15d
    00001267: 	addl	%r15d, %edx
    0000126a: 	cmpq	%rbp, %rdi
    0000126d: 	jbe	.Ltmp764 # Offset: 4717
    0000126f: 	movq	0x40(%rsp), %r15
    00001274: 	movq	0x30(%rsp), %r11
    00001279: 	addq	%rax, %r15
    0000127c: 	movl	(%r14,%r15,4), %r15d
    00001280: 	imull	(%r11), %r15d
    00001284: 	addl	%r15d, %edx
    00001287: 	cmpq	0x28(%rsp), %rdi
    0000128c: 	jbe	.Ltmp764 # Offset: 4748
    0000128e: 	movq	0x88(%rsp), %r11
    00001296: 	leaq	(%rax,%r11), %r15
    0000129a: 	movq	0x58(%rsp), %r11
    0000129f: 	movl	(%r14,%r15,4), %r15d
    000012a3: 	imull	(%r11), %r15d
    000012a7: 	addl	%r15d, %edx
    000012aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp764:
    000012b0: 	addl	%edx, (%rsi,%rax,4)
    000012b3: 	addq	$0x1, %rax
    000012b7: 	addq	$0x4, %rcx
    000012bb: 	cmpq	%rax, %rbx
    000012be: 	jne	.Ltmp767 # Offset: 4798
    000012c4: 	addq	$0xc8, 0x38(%rsp)
    000012cd: 	addq	$0x320, %rsi
    000012d4: 	addq	$0x320, %r8
    000012db: 	cmpq	%rsi, 0xb8(%rsp)
    000012e3: 	jne	.Ltmp768 # Offset: 4835
.Ltmp763:
    000012e9: 	addq	$0x19000, 0x50(%rsp)
    000012f2: 	cmpq	$0x100, 0x78(%rsp)
    000012fb: 	jne	.Ltmp769 # Offset: 4859
    00001301: 	addq	$0x200, 0x80(%rsp)
    0000130d: 	cmpq	$0x100, 0x70(%rsp)
    00001316: 	jne	.Ltmp770 # Offset: 4886
    0000131c: 	movq	0xa8(%rsp), %rsi
    00001324: 	movq	0xb0(%rsp), %rcx
    0000132c: 	xorl	%edx, %edx
.Ltmp773:
    0000132e: 	xorl	%eax, %eax
.Ltmp772:
    00001330: 	movl	(%rsi,%rax,4), %edi
    00001333: 	cmpl	%edi, (%rcx,%rax,4)
    00001336: 	jne	.Ltmp771 # Offset: 4918
    0000133c: 	addq	$0x1, %rax
    00001340: 	cmpq	$0xc8, %rax
    00001346: 	jne	.Ltmp772 # Offset: 4934
    00001348: 	addq	$0xc8, %rdx
    0000134f: 	addq	$0x320, %rcx
    00001356: 	addq	$0x320, %rsi
    0000135d: 	cmpq	$0xea60, %rdx
    00001364: 	jne	.Ltmp773 # Offset: 4964
.Ltmp911:
    00001366: 	movq	0xa8(%rsp), %rdi
    0000136e: 	movl	$0x3a980, %edx
    00001373: 	xorl	%esi, %esi
    00001375: 	callq	memset@PLT # Offset: 4981
    0000137a: 	xorl	%r10d, %r10d
.Ltmp779:
    0000137d: 	movl	$0xc8, %eax
    00001382: 	movq	%r10, %rcx
    00001385: 	subq	$-0x80, %r10
    00001389: 	cmpq	%rax, %r10
    0000138c: 	cmovbeq	%r10, %rax
    00001390: 	cmpq	%rcx, %rax
    00001393: 	jbe	.Ltmp774 # Offset: 5011
    00001399: 	leaq	(,%rcx,4), %rdx
    000013a1: 	movq	0x10(%rsp), %rdi
    000013a6: 	shlq	$0x2, %rax
    000013aa: 	movq	%rdx, %rbx
    000013ad: 	leaq	(%rdi,%rax), %r9
    000013b1: 	subq	%rax, %rbx
    000013b4: 	leaq	(%rdx,%rcx), %rax
    000013b8: 	movq	0xa8(%rsp), %rdx
    000013c0: 	leaq	(%rax,%rax,4), %r11
    000013c4: 	shlq	$0x5, %r11
    000013c8: 	addq	0x20(%rsp), %r11
.Ltmp778:
    000013cd: 	leaq	(%r9,%rbx), %rsi
    000013d1: 	movq	%r11, %rcx
    000013d4: 	nopl	(%rax) # Size: 4
.Ltmp777:
    000013d8: 	leaq	0x4(%rcx), %r8
    000013dc: 	movq	%rdx, %rax
    000013df: 	movl	(%rsi), %edi
    000013e1: 	subq	%r8, %rax
    000013e4: 	cmpq	$0x8, %rax
    000013e8: 	jbe	.Ltmp775 # Offset: 5096
    000013ee: 	movd	%edi, %xmm4
    000013f2: 	xorl	%eax, %eax
    000013f4: 	pshufd	$0x0, %xmm4, %xmm2
    000013f9: 	movdqa	%xmm2, %xmm3
    000013fd: 	psrlq	$0x20, %xmm3
    00001402: 	nopw	(%rax,%rax) # Size: 6
.Ltmp776:
    00001408: 	movdqu	(%rcx,%rax), %xmm0
    0000140d: 	movdqu	(%rcx,%rax), %xmm1
    00001412: 	psrlq	$0x20, %xmm0
    00001417: 	pmuludq	%xmm2, %xmm1
    0000141b: 	pmuludq	%xmm3, %xmm0
    0000141f: 	pshufd	$0x8, %xmm1, %xmm1
    00001424: 	pshufd	$0x8, %xmm0, %xmm0
    00001429: 	punpckldq	%xmm0, %xmm1
    0000142d: 	movdqu	(%rdx,%rax), %xmm0
    00001432: 	paddd	%xmm1, %xmm0
    00001436: 	movups	%xmm0, (%rdx,%rax)
    0000143a: 	addq	$0x10, %rax
    0000143e: 	cmpq	$0x320, %rax
    00001444: 	jne	.Ltmp776 # Offset: 5188
    00001446: 	addq	$0x4, %rsi
    0000144a: 	addq	$0x320, %rcx
    00001451: 	cmpq	%rsi, %r9
    00001454: 	jne	.Ltmp777 # Offset: 5204
.Ltmp889:
    00001456: 	addq	$0x320, %r9
    0000145d: 	addq	$0x320, %rdx
    00001464: 	cmpq	%rdx, 0xb8(%rsp)
    0000146c: 	jne	.Ltmp778 # Offset: 5228
.Ltmp774:
    00001472: 	cmpq	$0x100, %r10
    00001479: 	jne	.Ltmp779 # Offset: 5241
    0000147f: 	movq	0xa8(%rsp), %rsi
    00001487: 	movq	0xb0(%rsp), %rcx
    0000148f: 	xorl	%edx, %edx
.Ltmp782:
    00001491: 	xorl	%eax, %eax
.Ltmp781:
    00001493: 	movl	(%rsi,%rax,4), %edi
    00001496: 	cmpl	%edi, (%rcx,%rax,4)
    00001499: 	jne	.Ltmp780 # Offset: 5273
    0000149f: 	addq	$0x1, %rax
    000014a3: 	cmpq	$0xc8, %rax
    000014a9: 	jne	.Ltmp781 # Offset: 5289
    000014ab: 	addq	$0xc8, %rdx
    000014b2: 	addq	$0x320, %rcx
    000014b9: 	addq	$0x320, %rsi
    000014c0: 	cmpq	$0xea60, %rdx
    000014c7: 	jne	.Ltmp782 # Offset: 5319
.Ltmp910:
    000014c9: 	movq	0xa8(%rsp), %rdi
    000014d1: 	movl	$0x3a980, %edx
    000014d6: 	xorl	%esi, %esi
    000014d8: 	callq	memset@PLT # Offset: 5336
    000014dd: 	movq	0x10(%rsp), %rbp
    000014e2: 	movq	$0x0, 0x38(%rsp)
    000014eb: 	movq	$0x0, 0x70(%rsp)
.Ltmp790:
    000014f4: 	movq	0x70(%rsp), %rdi
    000014f9: 	movl	$0x12c, %eax
    000014fe: 	movq	0x38(%rsp), %rcx
    00001503: 	movq	$0x0, 0x80(%rsp)
    0000150f: 	movq	$0x0, 0x78(%rsp)
    00001518: 	movq	%rdi, 0x90(%rsp)
    00001520: 	subq	$-0x80, %rdi
    00001524: 	leaq	(%rbp,%rcx,4), %rcx
    00001529: 	cmpq	%rax, %rdi
    0000152c: 	movq	%rdi, 0x70(%rsp)
    00001531: 	cmovbeq	%rdi, %rax
    00001535: 	movq	%rcx, 0x48(%rsp)
    0000153a: 	movq	%rax, 0x88(%rsp)
    00001542: 	leaq	(%rax,%rax,4), %rax
    00001546: 	leaq	(%rax,%rax,4), %rax
    0000154a: 	leaq	(,%rax,8), %r13
.Ltmp789:
    00001552: 	movq	0x78(%rsp), %rax
    00001557: 	movl	$0xc8, %r8d
    0000155d: 	movq	0x90(%rsp), %rcx
    00001565: 	movq	%rax, %r10
    00001568: 	subq	$-0x80, %rax
    0000156c: 	cmpq	%r8, %rax
    0000156f: 	movq	%rax, 0x78(%rsp)
    00001574: 	cmovbeq	%rax, %r8
    00001578: 	cmpq	%rcx, 0x88(%rsp)
    00001580: 	jbe	.Ltmp783 # Offset: 5504
    00001586: 	movq	0x20(%rsp), %rax
    0000158b: 	movq	0x80(%rsp), %rcx
    00001593: 	movq	$0x0, 0x28(%rsp)
    0000159c: 	movq	0xa8(%rsp), %rdi
    000015a4: 	leaq	(%rax,%rcx,4), %r11
    000015a8: 	movq	%r8, %rax
    000015ab: 	subq	%r10, %rax
    000015ae: 	movq	%rax, %rbx
    000015b1: 	leaq	-0x1(%rax), %r14
    000015b5: 	movq	%rax, (%rsp)
    000015b9: 	andq	$-0x4, %rax
    000015bd: 	shrq	$0x2, %rbx
    000015c1: 	movq	%rax, 0x8(%rsp)
    000015c6: 	addq	%r10, %rax
    000015c9: 	shlq	$0x4, %rbx
    000015cd: 	cmpq	$0x2, %r14
    000015d1: 	cmovbeq	%r10, %rax
    000015d5: 	movq	%rax, %r15
    000015d8: 	leaq	(%rax,%rax,4), %rax
    000015dc: 	leaq	(%rax,%rax,4), %rax
    000015e0: 	leaq	0x1(%r15), %rcx
    000015e4: 	shlq	$0x3, %rax
    000015e8: 	movq	%rcx, 0x18(%rsp)
    000015ed: 	leaq	0xc8(%rax), %rcx
    000015f4: 	movq	%rax, 0x68(%rsp)
    000015f9: 	addq	$0x190, %rax
    000015ff: 	movq	%rcx, 0x58(%rsp)
    00001604: 	leaq	0x2(%r15), %rcx
    00001608: 	movq	%rcx, 0x40(%rsp)
    0000160d: 	movq	%rax, 0x60(%rsp)
    00001612: 	nopw	(%rax,%rax) # Size: 6
.Ltmp788:
    00001618: 	movq	0x28(%rsp), %rcx
    0000161d: 	movq	0x68(%rsp), %rax
    00001622: 	movq	0x20(%rsp), %rsi
    00001627: 	movq	0x48(%rsp), %rdx
    0000162c: 	addq	%rcx, %rax
    0000162f: 	leaq	(%rsi,%rax,4), %r12
    00001633: 	movq	0x58(%rsp), %rax
    00001638: 	addq	%rcx, %rax
    0000163b: 	leaq	(%rsi,%rax,4), %rax
    0000163f: 	movq	%rax, 0x30(%rsp)
    00001644: 	movq	0x60(%rsp), %rax
    00001649: 	addq	%rcx, %rax
    0000164c: 	leaq	(%rsi,%rax,4), %rax
    00001650: 	movq	%rax, 0x50(%rsp)
    00001655: 	movq	0x38(%rsp), %rax
    0000165a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp787:
    00001660: 	xorl	%ecx, %ecx
    00001662: 	cmpq	%r10, %r8
    00001665: 	jbe	.Ltmp784 # Offset: 5733
    0000166b: 	cmpq	$0x2, %r14
    0000166f: 	jbe	.Ltmp785 # Offset: 5743
    00001675: 	leaq	(%rdx,%rbx), %r9
    00001679: 	movq	%rdx, %rsi
    0000167c: 	pxor	%xmm0, %xmm0
    00001680: 	movq	%r11, %rcx
.Ltmp786:
    00001683: 	movd	0x640(%rcx), %xmm2
    0000168b: 	movd	(%rcx), %xmm1
    0000168f: 	addq	$0x10, %rsi
    00001693: 	addq	$0xc80, %rcx
    0000169a: 	movd	-0x320(%rcx), %xmm5
    000016a2: 	movd	-0x960(%rcx), %xmm6
    000016aa: 	movdqu	-0x10(%rsi), %xmm3
    000016af: 	punpckldq	%xmm5, %xmm2
    000016b3: 	punpckldq	%xmm6, %xmm1
    000016b7: 	punpcklqdq	%xmm2, %xmm1
    000016bb: 	movdqu	-0x10(%rsi), %xmm2
    000016c0: 	psrlq	$0x20, %xmm3
    000016c5: 	pmuludq	%xmm1, %xmm2
    000016c9: 	psrlq	$0x20, %xmm1
    000016ce: 	pmuludq	%xmm3, %xmm1
    000016d2: 	pshufd	$0x8, %xmm2, %xmm2
    000016d7: 	pshufd	$0x8, %xmm1, %xmm1
    000016dc: 	punpckldq	%xmm1, %xmm2
    000016e0: 	paddd	%xmm2, %xmm0
    000016e4: 	cmpq	%rsi, %r9
    000016e7: 	jne	.Ltmp786 # Offset: 5863
    000016e9: 	movdqa	%xmm0, %xmm1
    000016ed: 	movq	0x8(%rsp), %r9
    000016f2: 	psrldq	$0x8, %xmm1
    000016f7: 	paddd	%xmm1, %xmm0
    000016fb: 	movdqa	%xmm0, %xmm1
    000016ff: 	psrldq	$0x4, %xmm1
    00001704: 	paddd	%xmm1, %xmm0
    00001708: 	movd	%xmm0, %ecx
    0000170c: 	cmpq	%r9, (%rsp)
    00001710: 	je	.Ltmp784 # Offset: 5904
.Ltmp890:
    00001712: 	leaq	(%rax,%r15), %rsi
    00001716: 	movl	(%rbp,%rsi,4), %esi
    0000171a: 	imull	(%r12), %esi
    0000171f: 	addl	%esi, %ecx
    00001721: 	movq	0x18(%rsp), %rsi
    00001726: 	cmpq	%rsi, %r8
    00001729: 	jbe	.Ltmp784 # Offset: 5929
    0000172b: 	movq	0x30(%rsp), %r9
    00001730: 	addq	%rax, %rsi
    00001733: 	movl	(%rbp,%rsi,4), %esi
    00001737: 	imull	(%r9), %esi
    0000173b: 	addl	%esi, %ecx
    0000173d: 	movq	0x40(%rsp), %rsi
    00001742: 	cmpq	%rsi, %r8
    00001745: 	jbe	.Ltmp784 # Offset: 5957
    00001747: 	movq	0x50(%rsp), %r9
    0000174c: 	addq	%rax, %rsi
    0000174f: 	movl	(%rbp,%rsi,4), %esi
    00001753: 	imull	(%r9), %esi
    00001757: 	addl	%esi, %ecx
    00001759: 	nopl	(%rax) # Size: 7
.Ltmp784:
    00001760: 	addl	%ecx, (%rdi,%rax,4)
    00001763: 	addq	$0xc8, %rax
    00001769: 	addq	$0x320, %rdx
    00001770: 	cmpq	%rax, %r13
    00001773: 	jne	.Ltmp787 # Offset: 6003
    00001779: 	addq	$0x1, 0x28(%rsp)
    0000177f: 	movq	0x28(%rsp), %rax
    00001784: 	addq	$0x4, %rdi
    00001788: 	addq	$0x4, %r11
    0000178c: 	cmpq	$0xc8, %rax
    00001792: 	jne	.Ltmp788 # Offset: 6034
.Ltmp783:
    00001798: 	addq	$0x200, 0x48(%rsp)
    000017a1: 	addq	$0x6400, 0x80(%rsp)
    000017ad: 	cmpq	$0x100, 0x78(%rsp)
    000017b6: 	jne	.Ltmp789 # Offset: 6070
    000017bc: 	addq	$0x6400, 0x38(%rsp)
    000017c5: 	cmpq	$0x180, 0x70(%rsp)
    000017ce: 	jne	.Ltmp790 # Offset: 6094
    000017d4: 	movq	0xa8(%rsp), %rsi
    000017dc: 	movq	0xb0(%rsp), %rcx
    000017e4: 	xorl	%edx, %edx
.Ltmp793:
    000017e6: 	xorl	%eax, %eax
.Ltmp792:
    000017e8: 	movl	(%rsi,%rax,4), %edi
    000017eb: 	cmpl	%edi, (%rcx,%rax,4)
    000017ee: 	jne	.Ltmp791 # Offset: 6126
    000017f4: 	addq	$0x1, %rax
    000017f8: 	cmpq	$0xc8, %rax
    000017fe: 	jne	.Ltmp792 # Offset: 6142
    00001800: 	addq	$0xc8, %rdx
    00001807: 	addq	$0x320, %rcx
    0000180e: 	addq	$0x320, %rsi
    00001815: 	cmpq	$0xea60, %rdx
    0000181c: 	jne	.Ltmp793 # Offset: 6172
.Ltmp909:
    0000181e: 	movq	0xa8(%rsp), %rdi
    00001826: 	movl	$0x3a980, %edx
    0000182b: 	xorl	%esi, %esi
    0000182d: 	callq	memset@PLT # Offset: 6189
    00001832: 	movq	0x20(%rsp), %r14
    00001837: 	movq	$0x0, 0x48(%rsp)
    00001840: 	movq	%r14, 0x58(%rsp)
.Ltmp803:
    00001845: 	movq	0x48(%rsp), %rcx
    0000184a: 	movl	$0xc8, %eax
    0000184f: 	movq	$0x0, 0x50(%rsp)
    00001858: 	movq	%rcx, 0x40(%rsp)
    0000185d: 	subq	$-0x80, %rcx
    00001861: 	cmpq	%rax, %rcx
    00001864: 	movq	%rcx, 0x48(%rsp)
    00001869: 	cmovbeq	%rcx, %rax
    0000186d: 	movq	%rax, 0x18(%rsp)
    00001872: 	movq	0x58(%rsp), %rax
    00001877: 	movq	%rax, 0x38(%rsp)
.Ltmp802:
    0000187c: 	movq	0x50(%rsp), %rcx
    00001881: 	movl	$0xc8, %ebp
    00001886: 	movq	0x40(%rsp), %rdi
    0000188b: 	movq	%rcx, (%rsp)
    0000188f: 	movq	%rcx, %rax
    00001892: 	subq	$-0x80, %rcx
    00001896: 	cmpq	%rbp, %rcx
    00001899: 	movq	%rcx, 0x50(%rsp)
    0000189e: 	cmovbeq	%rcx, %rbp
    000018a2: 	leaq	-0x3(%rbp), %r13
    000018a6: 	cmpq	%rdi, 0x18(%rsp)
    000018ab: 	jbe	.Ltmp794 # Offset: 6315
    000018b1: 	movq	0x10(%rsp), %rcx
    000018b6: 	movq	0xa8(%rsp), %r15
    000018be: 	movq	$0x0, 0x8(%rsp)
    000018c7: 	leaq	(%rcx,%rax,4), %rax
    000018cb: 	movq	%rax, 0x28(%rsp)
.Ltmp801:
    000018d0: 	movq	0x38(%rsp), %rbx
    000018d5: 	movq	0x40(%rsp), %rcx
    000018da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp800:
    000018e0: 	cmpq	(%rsp), %r13
    000018e4: 	jbe	.Ltmp795 # Offset: 6372
    000018ea: 	movq	0x28(%rsp), %r10
    000018ef: 	movq	(%rsp), %rax
    000018f3: 	movq	%rbx, %r9
    000018f6: 	xorl	%r8d, %r8d
    000018f9: 	xorl	%edi, %edi
    000018fb: 	xorl	%esi, %esi
    000018fd: 	xorl	%edx, %edx
    000018ff: 	nop # Size: 1
.Ltmp796:
    00001900: 	movl	(%r9), %r11d
    00001903: 	imull	(%r10), %r11d
    00001907: 	addq	$0x4, %rax
    0000190b: 	addq	$0x10, %r10
    0000190f: 	addq	$0xc80, %r9
    00001916: 	addl	%r11d, %edx
    00001919: 	movl	-0x960(%r9), %r11d
    00001920: 	imull	-0xc(%r10), %r11d
    00001925: 	addl	%r11d, %esi
    00001928: 	movl	-0x640(%r9), %r11d
    0000192f: 	imull	-0x8(%r10), %r11d
    00001934: 	addl	%r11d, %edi
    00001937: 	movl	-0x320(%r9), %r11d
    0000193e: 	imull	-0x4(%r10), %r11d
    00001943: 	addl	%r11d, %r8d
    00001946: 	cmpq	%r13, %rax
    00001949: 	jb	.Ltmp796 # Offset: 6473
.Ltmp891:
    0000194b: 	cmpq	%rax, %rbp
    0000194e: 	jbe	.Ltmp797 # Offset: 6478
    00001954: 	movq	%rbp, %r12
    00001957: 	subq	%rax, %r12
    0000195a: 	leaq	-0x1(%r12), %r9
    0000195f: 	cmpq	$0x2, %r9
    00001963: 	jbe	.Ltmp798 # Offset: 6499
    00001969: 	leaq	(%rax,%rax,4), %r9
    0000196d: 	movq	0x10(%rsp), %r11
    00001972: 	pxor	%xmm2, %xmm2
    00001976: 	leaq	(%r9,%r9,4), %r9
    0000197a: 	leaq	(%rcx,%r9,8), %r9
    0000197e: 	leaq	(%r14,%r9,4), %r10
    00001982: 	movq	0x8(%rsp), %r9
    00001987: 	addq	%rax, %r9
    0000198a: 	leaq	(%r11,%r9,4), %r11
    0000198e: 	movq	%r12, %r9
    00001991: 	shrq	$0x2, %r9
    00001995: 	shlq	$0x4, %r9
    00001999: 	addq	%r11, %r9
.Ltmp799:
    0000199c: 	movd	(%r10), %xmm0
    000019a1: 	movdqu	(%r11), %xmm3
    000019a6: 	addq	$0x10, %r11
    000019aa: 	addq	$0xc80, %r10
    000019b1: 	movd	-0x640(%r10), %xmm1
    000019ba: 	movd	-0x320(%r10), %xmm4
    000019c3: 	movd	-0x960(%r10), %xmm5
    000019cc: 	psrlq	$0x20, %xmm3
    000019d1: 	punpckldq	%xmm4, %xmm1
    000019d5: 	punpckldq	%xmm5, %xmm0
    000019d9: 	punpcklqdq	%xmm1, %xmm0
    000019dd: 	movdqu	-0x10(%r11), %xmm1
    000019e3: 	pmuludq	%xmm0, %xmm1
    000019e7: 	psrlq	$0x20, %xmm0
    000019ec: 	pmuludq	%xmm3, %xmm0
    000019f0: 	pshufd	$0x8, %xmm1, %xmm1
    000019f5: 	pshufd	$0x8, %xmm0, %xmm0
    000019fa: 	punpckldq	%xmm0, %xmm1
    000019fe: 	paddd	%xmm1, %xmm2
    00001a02: 	cmpq	%r11, %r9
    00001a05: 	jne	.Ltmp799 # Offset: 6661
    00001a07: 	movdqa	%xmm2, %xmm0
    00001a0b: 	psrldq	$0x8, %xmm0
    00001a10: 	paddd	%xmm0, %xmm2
    00001a14: 	movdqa	%xmm2, %xmm0
    00001a18: 	psrldq	$0x4, %xmm0
    00001a1d: 	paddd	%xmm0, %xmm2
    00001a21: 	movd	%xmm2, %r9d
    00001a26: 	addl	%r9d, %edx
    00001a29: 	movq	%r12, %r9
    00001a2c: 	andq	$-0x4, %r9
    00001a30: 	addq	%r9, %rax
    00001a33: 	cmpq	%r9, %r12
    00001a36: 	je	.Ltmp797 # Offset: 6710
.Ltmp798:
    00001a38: 	leaq	(%rax,%rax,4), %r9
    00001a3c: 	movq	0x8(%rsp), %r12
    00001a41: 	leaq	(%r9,%r9,4), %r9
    00001a45: 	leaq	(%rcx,%r9,8), %r10
    00001a49: 	leaq	(%r12,%rax), %r9
    00001a4d: 	movl	(%r14,%r10,4), %r11d
    00001a51: 	movq	%r10, 0x30(%rsp)
    00001a56: 	movq	0x10(%rsp), %r10
    00001a5b: 	imull	(%r10,%r9,4), %r11d
    00001a60: 	leaq	0x1(%rax), %r9
    00001a64: 	addl	%r11d, %edx
    00001a67: 	cmpq	%r9, %rbp
    00001a6a: 	jbe	.Ltmp797 # Offset: 6762
    00001a6c: 	movq	0x30(%rsp), %r11
    00001a71: 	addq	%r12, %r9
    00001a74: 	addq	$0x2, %rax
    00001a78: 	movl	0x320(%r14,%r11,4), %r11d
    00001a80: 	imull	(%r10,%r9,4), %r11d
    00001a85: 	addl	%r11d, %edx
    00001a88: 	cmpq	%rbp, %rax
    00001a8b: 	jae	.Ltmp797 # Offset: 6795
    00001a8d: 	movq	0x30(%rsp), %r9
    00001a92: 	addq	%r12, %rax
    00001a95: 	movl	0x640(%r14,%r9,4), %r9d
    00001a9d: 	imull	(%r10,%rax,4), %r9d
    00001aa2: 	addl	%r9d, %edx
    00001aa5: 	nopl	(%rax) # Size: 3
.Ltmp797:
    00001aa8: 	addl	%esi, %edx
    00001aaa: 	addq	$0x4, %rbx
    00001aae: 	addl	%edi, %edx
    00001ab0: 	addl	%r8d, %edx
    00001ab3: 	addl	%edx, (%r15,%rcx,4)
    00001ab7: 	addq	$0x1, %rcx
    00001abb: 	cmpq	%rcx, 0x18(%rsp)
    00001ac0: 	jne	.Ltmp800 # Offset: 6848
    00001ac6: 	addq	$0xc8, 0x8(%rsp)
    00001acf: 	movq	0x8(%rsp), %rax
    00001ad4: 	addq	$0x320, %r15
    00001adb: 	addq	$0x320, 0x28(%rsp)
    00001ae4: 	cmpq	$0xea60, %rax
    00001aea: 	jne	.Ltmp801 # Offset: 6890
.Ltmp794:
    00001af0: 	addq	$0x19000, 0x38(%rsp)
    00001af9: 	cmpq	$0x100, 0x50(%rsp)
    00001b02: 	jne	.Ltmp802 # Offset: 6914
    00001b08: 	addq	$0x200, 0x58(%rsp)
    00001b11: 	cmpq	$0x100, 0x48(%rsp)
    00001b1a: 	jne	.Ltmp803 # Offset: 6938
    00001b20: 	movq	0xa8(%rsp), %rsi
    00001b28: 	movq	0xb0(%rsp), %rcx
    00001b30: 	xorl	%edx, %edx
.Ltmp806:
    00001b32: 	xorl	%eax, %eax
.Ltmp805:
    00001b34: 	movl	(%rsi,%rax,4), %edi
    00001b37: 	cmpl	%edi, (%rcx,%rax,4)
    00001b3a: 	jne	.Ltmp804 # Offset: 6970
    00001b40: 	addq	$0x1, %rax
    00001b44: 	cmpq	$0xc8, %rax
    00001b4a: 	jne	.Ltmp805 # Offset: 6986
    00001b4c: 	addq	$0xc8, %rdx
    00001b53: 	addq	$0x320, %rcx
    00001b5a: 	addq	$0x320, %rsi
    00001b61: 	cmpq	$0xea60, %rdx
    00001b68: 	jne	.Ltmp806 # Offset: 7016
.Ltmp908:
    00001b6a: 	movq	0xa8(%rsp), %rbx
    00001b72: 	movl	$0x3a980, %edx
    00001b77: 	xorl	%esi, %esi
    00001b79: 	movq	%rbx, %rdi
    00001b7c: 	callq	memset@PLT # Offset: 7036
    00001b81: 	leaq	0x640(%rbx), %rcx
    00001b88: 	movq	$0x0, 0xd8(%rsp)
    00001b94: 	movq	%rcx, 0x118(%rsp)
    00001b9c: 	addq	$0x3aca0, %rax
    00001ba2: 	leaq	0x960(%rbx), %rcx
    00001ba9: 	movq	%rcx, 0x110(%rsp)
    00001bb1: 	movq	%rax, 0xd0(%rsp)
.Ltmp814:
    00001bb9: 	movq	0xd8(%rsp), %rcx
    00001bc1: 	movl	$0xc8, %eax
    00001bc6: 	movq	$0x0, 0xe0(%rsp)
    00001bd2: 	movq	%rcx, %rdi
    00001bd5: 	movq	%rcx, 0xc0(%rsp)
    00001bdd: 	subq	$-0x80, %rcx
    00001be1: 	cmpq	%rax, %rcx
    00001be4: 	movq	%rcx, 0xd8(%rsp)
    00001bec: 	cmovbeq	%rcx, %rax
    00001bf0: 	movq	%rax, 0x40(%rsp)
    00001bf5: 	movq	0x20(%rsp), %rax
    00001bfa: 	leaq	(%rax,%rdi,4), %rax
    00001bfe: 	movq	%rax, 0xc8(%rsp)
    00001c06: 	movq	0x10(%rsp), %rax
    00001c0b: 	movq	%rax, 0xf0(%rsp)
.Ltmp813:
    00001c13: 	movq	0xe0(%rsp), %rdi
    00001c1b: 	movl	$0xc8, %eax
    00001c20: 	movq	$0x0, 0x88(%rsp)
    00001c2c: 	movq	%rdi, 0x28(%rsp)
    00001c31: 	subq	$-0x80, %rdi
    00001c35: 	cmpq	%rax, %rdi
    00001c38: 	movq	%rdi, 0xe0(%rsp)
    00001c40: 	cmovbeq	%rdi, %rax
    00001c44: 	movq	%rax, 0x60(%rsp)
    00001c49: 	subq	$0x3, %rax
    00001c4d: 	movq	%rax, 0x18(%rsp)
    00001c52: 	movq	0x118(%rsp), %rax
    00001c5a: 	movq	%rax, 0x50(%rsp)
    00001c5f: 	movq	0x110(%rsp), %rax
    00001c67: 	movq	%rax, 0x48(%rsp)
    00001c6c: 	movq	0xf0(%rsp), %rax
    00001c74: 	leaq	0x320(%rax), %rcx
    00001c7b: 	movq	%rax, 0x80(%rsp)
    00001c83: 	movq	%rcx, 0x78(%rsp)
    00001c88: 	leaq	0x640(%rax), %rcx
    00001c8f: 	movq	%rcx, 0x70(%rsp)
    00001c94: 	leaq	0x960(%rax), %rcx
    00001c9b: 	movq	0xe8(%rsp), %rax
    00001ca3: 	movq	%rcx, 0x68(%rsp)
    00001ca8: 	movq	%rax, 0x38(%rsp)
    00001cad: 	movq	0xa8(%rsp), %rax
    00001cb5: 	movq	%rax, 0x58(%rsp)
    00001cba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp812:
    00001cc0: 	movq	0xc0(%rsp), %r13
    00001cc8: 	cmpq	%r13, 0x40(%rsp)
    00001ccd: 	jbe	.Ltmp807 # Offset: 7373
    00001cd3: 	movq	0x88(%rsp), %rax
    00001cdb: 	leaq	0xc8(%rax), %rcx
    00001ce2: 	leaq	0x190(%rax), %rdi
    00001ce9: 	addq	$0x258, %rax
    00001cef: 	movq	%rax, 0x98(%rsp)
    00001cf7: 	movq	0xc8(%rsp), %rax
    00001cff: 	movq	%rcx, 0xa0(%rsp)
    00001d07: 	movq	%rdi, 0x90(%rsp)
    00001d0f: 	movq	%rax, 0x30(%rsp)
    00001d14: 	nopl	(%rax) # Size: 4
.Ltmp811:
    00001d18: 	movq	0x28(%rsp), %rcx
    00001d1d: 	cmpq	%rcx, 0x18(%rsp)
    00001d22: 	jbe	.Ltmp808 # Offset: 7458
    00001d28: 	movq	0x68(%rsp), %rbx
    00001d2d: 	movq	0x70(%rsp), %r11
    00001d32: 	xorl	%r14d, %r14d
    00001d35: 	xorl	%r12d, %r12d
    00001d38: 	movl	$0x0, 0x8(%rsp)
    00001d40: 	movq	0x78(%rsp), %r10
    00001d45: 	movl	$0x0, (%rsp)
    00001d4c: 	movq	0x80(%rsp), %r9
    00001d54: 	movq	0x30(%rsp), %r8
    00001d59: 	nopl	(%rax) # Size: 7
.Ltmp809:
    00001d60: 	movl	(%r8), %eax
    00001d63: 	movl	0x320(%r8), %edi
    00001d6a: 	movl	(%r9), %ebp
    00001d6d: 	movl	0x4(%r9), %r15d
    00001d71: 	movl	0x640(%r8), %esi
    00001d78: 	movl	0x960(%r8), %edx
    00001d7f: 	imull	%eax, %ebp
    00001d82: 	imull	%edi, %r15d
    00001d86: 	addl	%ebp, %r15d
    00001d89: 	movl	0x8(%r9), %ebp
    00001d8d: 	imull	%esi, %ebp
    00001d90: 	addl	%r15d, %ebp
    00001d93: 	movl	0xc(%r9), %r15d
    00001d97: 	imull	%edx, %r15d
    00001d9b: 	addl	%r15d, %ebp
    00001d9e: 	movl	0x4(%r10), %r15d
    00001da2: 	addl	%ebp, (%rsp)
    00001da5: 	movl	(%r10), %ebp
    00001da8: 	imull	%edi, %r15d
    00001dac: 	imull	%eax, %ebp
    00001daf: 	addl	%ebp, %r15d
    00001db2: 	movl	0x8(%r10), %ebp
    00001db6: 	imull	%esi, %ebp
    00001db9: 	addl	%r15d, %ebp
    00001dbc: 	movl	0xc(%r10), %r15d
    00001dc0: 	imull	%edx, %r15d
    00001dc4: 	addl	%r15d, %ebp
    00001dc7: 	movl	0x4(%r11), %r15d
    00001dcb: 	addl	%ebp, 0x8(%rsp)
    00001dcf: 	movl	(%r11), %ebp
    00001dd2: 	imull	%edi, %r15d
    00001dd6: 	imull	%eax, %ebp
    00001dd9: 	imull	0x4(%rbx), %edi
    00001ddd: 	imull	(%rbx), %eax
    00001de0: 	addl	%ebp, %r15d
    00001de3: 	movl	0x8(%r11), %ebp
    00001de7: 	imull	%esi, %ebp
    00001dea: 	addl	%edi, %eax
    00001dec: 	imull	0x8(%rbx), %esi
    00001df0: 	addl	%r15d, %ebp
    00001df3: 	movl	0xc(%r11), %r15d
    00001df7: 	addl	%eax, %esi
    00001df9: 	imull	%edx, %r15d
    00001dfd: 	imull	0xc(%rbx), %edx
    00001e01: 	addl	%r15d, %ebp
    00001e04: 	addl	%esi, %edx
    00001e06: 	addl	%ebp, %r12d
    00001e09: 	addl	%edx, %r14d
    00001e0c: 	addq	$0x4, %rcx
    00001e10: 	addq	$0x10, %r9
    00001e14: 	addq	$0x10, %r10
    00001e18: 	addq	$0xc80, %r8
    00001e1f: 	addq	$0x10, %r11
    00001e23: 	addq	$0x10, %rbx
    00001e27: 	cmpq	0x18(%rsp), %rcx
    00001e2c: 	jb	.Ltmp809 # Offset: 7724
.Ltmp892:
    00001e32: 	movq	0x60(%rsp), %r8
    00001e37: 	cmpq	%rcx, %r8
    00001e3a: 	jbe	.Ltmp810 # Offset: 7738
    00001e40: 	leaq	(%rcx,%rcx,4), %rax
    00001e44: 	movq	0x10(%rsp), %rbx
    00001e49: 	movq	0x88(%rsp), %r15
    00001e51: 	leaq	(%rax,%rax,4), %rax
    00001e55: 	movq	0x20(%rsp), %r11
    00001e5a: 	movq	0xa0(%rsp), %rbp
    00001e62: 	leaq	(%rcx,%r15), %rsi
    00001e66: 	leaq	(%r13,%rax,8), %rdx
    00001e6b: 	movl	(%r11,%rdx,4), %eax
    00001e6f: 	movl	(%rbx,%rsi,4), %edi
    00001e72: 	leaq	(%rcx,%rbp), %rsi
    00001e76: 	imull	%eax, %edi
    00001e79: 	addl	%edi, (%rsp)
    00001e7c: 	movl	(%rbx,%rsi,4), %edi
    00001e7f: 	movq	0x90(%rsp), %rsi
    00001e87: 	movl	(%rsp), %r10d
    00001e8b: 	imull	%eax, %edi
    00001e8e: 	addl	%edi, 0x8(%rsp)
    00001e92: 	movl	0x8(%rsp), %r9d
    00001e97: 	addq	%rcx, %rsi
    00001e9a: 	movl	(%rbx,%rsi,4), %edi
    00001e9d: 	imull	%eax, %edi
    00001ea0: 	addl	%edi, %r12d
    00001ea3: 	movq	0x98(%rsp), %rdi
    00001eab: 	leaq	(%rdi,%rcx), %rsi
    00001eaf: 	imull	(%rbx,%rsi,4), %eax
    00001eb3: 	addl	%eax, %r14d
    00001eb6: 	leaq	0x1(%rcx), %rax
    00001eba: 	cmpq	%r8, %rax
    00001ebd: 	jae	.Ltmp810 # Offset: 7869
    00001ec3: 	leaq	(%rax,%r15), %rsi
    00001ec7: 	movl	0x320(%r11,%rdx,4), %edi
    00001ecf: 	movl	(%rbx,%rsi,4), %r11d
    00001ed3: 	leaq	(%rax,%rbp), %rsi
    00001ed7: 	imull	%edi, %r11d
    00001edb: 	addl	%r11d, %r10d
    00001ede: 	movl	(%rbx,%rsi,4), %r11d
    00001ee2: 	movq	0x90(%rsp), %rsi
    00001eea: 	movl	%r10d, (%rsp)
    00001eee: 	imull	%edi, %r11d
    00001ef2: 	addq	%rax, %rsi
    00001ef5: 	addq	0x98(%rsp), %rax
    00001efd: 	addl	%r11d, %r9d
    00001f00: 	movl	(%rbx,%rsi,4), %r11d
    00001f04: 	leaq	0x2(%rcx), %rsi
    00001f08: 	movl	%r9d, 0x8(%rsp)
    00001f0d: 	imull	%edi, %r11d
    00001f11: 	imull	(%rbx,%rax,4), %edi
    00001f15: 	addl	%r11d, %r12d
    00001f18: 	addl	%edi, %r14d
    00001f1b: 	cmpq	%r8, %rsi
    00001f1e: 	jae	.Ltmp810 # Offset: 7966
    00001f24: 	movq	0x20(%rsp), %r11
    00001f29: 	leaq	(%rsi,%r15), %rax
    00001f2d: 	addq	$0x3, %rcx
    00001f31: 	movl	(%rbx,%rax,4), %r8d
    00001f35: 	leaq	(%rsi,%rbp), %rax
    00001f39: 	movl	0x640(%r11,%rdx,4), %edi
    00001f41: 	imull	%edi, %r8d
    00001f45: 	addl	%r8d, %r10d
    00001f48: 	movl	(%rbx,%rax,4), %r8d
    00001f4c: 	movq	0x90(%rsp), %rax
    00001f54: 	movl	%r10d, (%rsp)
    00001f58: 	imull	%edi, %r8d
    00001f5c: 	addq	%rsi, %rax
    00001f5f: 	addl	%r8d, %r9d
    00001f62: 	movl	(%rbx,%rax,4), %r8d
    00001f66: 	movq	0x98(%rsp), %rax
    00001f6e: 	movl	%r9d, 0x8(%rsp)
    00001f73: 	addq	%rsi, %rax
    00001f76: 	imull	%edi, %r8d
    00001f7a: 	imull	(%rbx,%rax,4), %edi
    00001f7e: 	addl	%r8d, %r12d
    00001f81: 	addl	%edi, %r14d
    00001f84: 	cmpq	%rcx, 0x60(%rsp)
    00001f89: 	jbe	.Ltmp810 # Offset: 8073
    00001f8b: 	leaq	(%r15,%rcx), %rax
    00001f8f: 	movl	0x960(%r11,%rdx,4), %edx
    00001f97: 	movq	0x90(%rsp), %rsi
    00001f9f: 	movl	(%rbx,%rax,4), %r8d
    00001fa3: 	leaq	(%rbp,%rcx), %rax
    00001fa8: 	imull	%edx, %r8d
    00001fac: 	addl	%r8d, %r10d
    00001faf: 	movl	(%rbx,%rax,4), %r8d
    00001fb3: 	leaq	(%rsi,%rcx), %rax
    00001fb7: 	movl	(%rbx,%rax,4), %esi
    00001fba: 	movq	0x98(%rsp), %rax
    00001fc2: 	movl	%r10d, (%rsp)
    00001fc6: 	imull	%edx, %r8d
    00001fca: 	addq	%rcx, %rax
    00001fcd: 	imull	%edx, %esi
    00001fd0: 	imull	(%rbx,%rax,4), %edx
    00001fd4: 	addl	%r8d, %r9d
    00001fd7: 	movl	%r9d, 0x8(%rsp)
    00001fdc: 	addl	%esi, %r12d
    00001fdf: 	addl	%edx, %r14d
    00001fe2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp810:
    00001fe8: 	movq	0x38(%rsp), %rdi
    00001fed: 	movq	0x50(%rsp), %rcx
    00001ff2: 	movq	0x48(%rsp), %rsi
    00001ff7: 	movq	0x58(%rsp), %rbx
    00001ffc: 	addl	(%rcx,%r13,4), %r12d
    00002000: 	movl	0x8(%rsp), %eax
    00002004: 	addl	(%rsi,%r13,4), %r14d
    00002008: 	addl	(%rdi,%r13,4), %eax
    0000200c: 	movl	(%rsp), %edx
    0000200f: 	addq	$0x4, 0x30(%rsp)
    00002015: 	addl	%edx, (%rbx,%r13,4)
    00002019: 	movl	%eax, (%rdi,%r13,4)
    0000201d: 	movl	%r12d, (%rcx,%r13,4)
    00002021: 	movl	%r14d, (%rsi,%r13,4)
    00002025: 	addq	$0x1, %r13
    00002029: 	cmpq	%r13, 0x40(%rsp)
    0000202e: 	jne	.Ltmp811 # Offset: 8238
.Ltmp807:
    00002034: 	addq	$0xc80, 0x38(%rsp)
    0000203d: 	movq	0x38(%rsp), %rax
    00002042: 	addq	$0x320, 0x88(%rsp)
    0000204e: 	addq	$0xc80, 0x58(%rsp)
    00002057: 	addq	$0xc80, 0x50(%rsp)
    00002060: 	addq	$0xc80, 0x48(%rsp)
    00002069: 	addq	$0xc80, 0x80(%rsp)
    00002075: 	addq	$0xc80, 0x78(%rsp)
    0000207e: 	addq	$0xc80, 0x70(%rsp)
    00002087: 	addq	$0xc80, 0x68(%rsp)
    00002090: 	cmpq	%rax, 0xd0(%rsp)
    00002098: 	jne	.Ltmp812 # Offset: 8344
    0000209e: 	addq	$0x200, 0xf0(%rsp)
    000020aa: 	addq	$0x19000, 0xc8(%rsp)
    000020b6: 	cmpq	$0x100, 0xe0(%rsp)
    000020c2: 	jne	.Ltmp813 # Offset: 8386
    000020c8: 	cmpq	$0x100, 0xd8(%rsp)
    000020d4: 	jne	.Ltmp814 # Offset: 8404
    000020da: 	movq	0xa8(%rsp), %rsi
    000020e2: 	movq	0xb0(%rsp), %rcx
    000020ea: 	xorl	%edx, %edx
.Ltmp817:
    000020ec: 	xorl	%eax, %eax
.Ltmp816:
    000020ee: 	movl	(%rsi,%rax,4), %edi
    000020f1: 	cmpl	%edi, (%rcx,%rax,4)
    000020f4: 	jne	.Ltmp815 # Offset: 8436
    000020fa: 	addq	$0x1, %rax
    000020fe: 	cmpq	$0xc8, %rax
    00002104: 	jne	.Ltmp816 # Offset: 8452
    00002106: 	addq	$0xc8, %rdx
    0000210d: 	addq	$0x320, %rcx
    00002114: 	addq	$0x320, %rsi
    0000211b: 	cmpq	$0xea60, %rdx
    00002122: 	jne	.Ltmp817 # Offset: 8482
.Ltmp907:
    00002124: 	movq	0xa8(%rsp), %rbx
    0000212c: 	movl	$0x3a980, %edx
    00002131: 	xorl	%esi, %esi
    00002133: 	movq	%rbx, %rdi
    00002136: 	callq	memset@PLT # Offset: 8502
    0000213b: 	movq	0x20(%rsp), %rsi
    00002140: 	movq	0x10(%rsp), %rdi
    00002145: 	movq	%rbx, %rdx
    00002148: 	movl	$0x12c, %ecx
    0000214d: 	movl	$0xc8, %r8d
    00002153: 	callq	"_ZN28matmul_JIK_blocked_unrolled3IiEclEPKiS2_Pimm.isra.0/1" # Offset: 8531
    00002158: 	movq	0xb0(%rsp), %rcx
    00002160: 	movq	%rbx, %rsi
    00002163: 	xorl	%edx, %edx
.Ltmp820:
    00002165: 	xorl	%eax, %eax
.Ltmp819:
    00002167: 	movl	(%rsi,%rax,4), %edi
    0000216a: 	cmpl	%edi, (%rcx,%rax,4)
    0000216d: 	jne	.Ltmp818 # Offset: 8557
    00002173: 	addq	$0x1, %rax
    00002177: 	cmpq	$0xc8, %rax
    0000217d: 	jne	.Ltmp819 # Offset: 8573
    0000217f: 	addq	$0xc8, %rdx
    00002186: 	addq	$0x320, %rcx
    0000218d: 	addq	$0x320, %rsi
    00002194: 	cmpq	$0xea60, %rdx
    0000219b: 	jne	.Ltmp820 # Offset: 8603
.Ltmp906:
    0000219d: 	movq	0xa8(%rsp), %rdi
    000021a5: 	movl	$0x3a980, %edx
    000021aa: 	xorl	%esi, %esi
    000021ac: 	callq	memset@PLT # Offset: 8620
    000021b1: 	movq	0x20(%rsp), %r14
    000021b6: 	movq	$0x0, 0x30(%rsp)
    000021bf: 	movq	$0x0, 0x38(%rsp)
.Ltmp830:
    000021c8: 	movq	0x38(%rsp), %rcx
    000021cd: 	movl	$0x12c, %eax
    000021d2: 	movq	$0x0, 0x48(%rsp)
    000021db: 	movq	$0x0, 0x40(%rsp)
    000021e4: 	movq	%rcx, 0x58(%rsp)
    000021e9: 	subq	$-0x80, %rcx
    000021ed: 	cmpq	%rax, %rcx
    000021f0: 	movq	%rcx, 0x38(%rsp)
    000021f5: 	cmovbeq	%rcx, %rax
    000021f9: 	movq	%rax, 0x50(%rsp)
    000021fe: 	leaq	(%rax,%rax,4), %rax
    00002202: 	leaq	(%rax,%rax,4), %rax
    00002206: 	shlq	$0x3, %rax
    0000220a: 	movq	%rax, 0x8(%rsp)
    0000220f: 	movq	0x10(%rsp), %rax
    00002214: 	movq	%rax, 0x28(%rsp)
.Ltmp829:
    00002219: 	movq	0x40(%rsp), %rax
    0000221e: 	movl	$0xc8, %ebx
    00002223: 	movq	0x58(%rsp), %rcx
    00002228: 	movq	%rax, (%rsp)
    0000222c: 	subq	$-0x80, %rax
    00002230: 	cmpq	%rbx, %rax
    00002233: 	movq	%rax, 0x40(%rsp)
    00002238: 	cmovbeq	%rax, %rbx
    0000223c: 	leaq	-0x3(%rbx), %r12
    00002240: 	cmpq	%rcx, 0x50(%rsp)
    00002245: 	jbe	.Ltmp821 # Offset: 8773
    0000224b: 	movq	0x48(%rsp), %rax
    00002250: 	movq	0xa8(%rsp), %r13
    00002258: 	xorl	%r15d, %r15d
    0000225b: 	leaq	(%r14,%rax,4), %rax
    0000225f: 	movq	%rax, 0x18(%rsp)
    00002264: 	nopl	(%rax) # Size: 4
.Ltmp828:
    00002268: 	movq	0x30(%rsp), %rcx
    0000226d: 	nopl	(%rax) # Size: 3
.Ltmp827:
    00002270: 	cmpq	(%rsp), %r12
    00002274: 	jbe	.Ltmp822 # Offset: 8820
    0000227a: 	movq	0x28(%rsp), %rax
    0000227f: 	movq	0x18(%rsp), %r9
    00002284: 	xorl	%r8d, %r8d
    00002287: 	xorl	%edi, %edi
    00002289: 	xorl	%esi, %esi
    0000228b: 	xorl	%edx, %edx
    0000228d: 	leaq	(%rax,%rcx,4), %r10
    00002291: 	movq	(%rsp), %rax
    00002295: 	nopl	(%rax) # Size: 3
.Ltmp823:
    00002298: 	movl	(%r9), %r11d
    0000229b: 	imull	(%r10), %r11d
    0000229f: 	addq	$0x4, %rax
    000022a3: 	addq	$0x10, %r10
    000022a7: 	addq	$0xc80, %r9
    000022ae: 	addl	%r11d, %edx
    000022b1: 	movl	-0x960(%r9), %r11d
    000022b8: 	imull	-0xc(%r10), %r11d
    000022bd: 	addl	%r11d, %esi
    000022c0: 	movl	-0x640(%r9), %r11d
    000022c7: 	imull	-0x8(%r10), %r11d
    000022cc: 	addl	%r11d, %edi
    000022cf: 	movl	-0x320(%r9), %r11d
    000022d6: 	imull	-0x4(%r10), %r11d
    000022db: 	addl	%r11d, %r8d
    000022de: 	cmpq	%r12, %rax
    000022e1: 	jb	.Ltmp823 # Offset: 8929
.Ltmp893:
    000022e3: 	cmpq	%rax, %rbx
    000022e6: 	jbe	.Ltmp824 # Offset: 8934
    000022ec: 	movq	%rbx, %rbp
    000022ef: 	subq	%rax, %rbp
    000022f2: 	leaq	-0x1(%rbp), %r9
    000022f6: 	cmpq	$0x2, %r9
    000022fa: 	jbe	.Ltmp825 # Offset: 8954
    00002300: 	leaq	(%rax,%rax,4), %r9
    00002304: 	movq	0x10(%rsp), %r11
    00002309: 	pxor	%xmm2, %xmm2
    0000230d: 	leaq	(%r9,%r9,4), %r9
    00002311: 	leaq	(%r15,%r9,8), %r9
    00002315: 	leaq	(%r14,%r9,4), %r10
    00002319: 	leaq	(%rax,%rcx), %r9
    0000231d: 	leaq	(%r11,%r9,4), %r11
    00002321: 	movq	%rbp, %r9
    00002324: 	shrq	$0x2, %r9
    00002328: 	shlq	$0x4, %r9
    0000232c: 	addq	%r11, %r9
.Ltmp826:
    0000232f: 	movd	(%r10), %xmm0
    00002334: 	movdqu	(%r11), %xmm3
    00002339: 	addq	$0x10, %r11
    0000233d: 	addq	$0xc80, %r10
    00002344: 	movd	-0x640(%r10), %xmm1
    0000234d: 	movd	-0x320(%r10), %xmm6
    00002356: 	movd	-0x960(%r10), %xmm4
    0000235f: 	psrlq	$0x20, %xmm3
    00002364: 	punpckldq	%xmm6, %xmm1
    00002368: 	punpckldq	%xmm4, %xmm0
    0000236c: 	punpcklqdq	%xmm1, %xmm0
    00002370: 	movdqu	-0x10(%r11), %xmm1
    00002376: 	pmuludq	%xmm0, %xmm1
    0000237a: 	psrlq	$0x20, %xmm0
    0000237f: 	pmuludq	%xmm3, %xmm0
    00002383: 	pshufd	$0x8, %xmm1, %xmm1
    00002388: 	pshufd	$0x8, %xmm0, %xmm0
    0000238d: 	punpckldq	%xmm0, %xmm1
    00002391: 	paddd	%xmm1, %xmm2
    00002395: 	cmpq	%r11, %r9
    00002398: 	jne	.Ltmp826 # Offset: 9112
    0000239a: 	movdqa	%xmm2, %xmm0
    0000239e: 	psrldq	$0x8, %xmm0
    000023a3: 	paddd	%xmm0, %xmm2
    000023a7: 	movdqa	%xmm2, %xmm0
    000023ab: 	psrldq	$0x4, %xmm0
    000023b0: 	paddd	%xmm0, %xmm2
    000023b4: 	movd	%xmm2, %r9d
    000023b9: 	addl	%r9d, %edx
    000023bc: 	movq	%rbp, %r9
    000023bf: 	andq	$-0x4, %r9
    000023c3: 	addq	%r9, %rax
    000023c6: 	cmpq	%r9, %rbp
    000023c9: 	je	.Ltmp824 # Offset: 9161
.Ltmp825:
    000023cb: 	leaq	(%rax,%rax,4), %r9
    000023cf: 	movq	0x10(%rsp), %rbp
    000023d4: 	leaq	(%r9,%r9,4), %r10
    000023d8: 	leaq	(%rcx,%rax), %r9
    000023dc: 	leaq	(%r15,%r10,8), %r10
    000023e0: 	movl	(%rbp,%r9,4), %r9d
    000023e5: 	imull	(%r14,%r10,4), %r9d
    000023ea: 	addl	%r9d, %edx
    000023ed: 	leaq	0x1(%rax), %r9
    000023f1: 	cmpq	%rbx, %r9
    000023f4: 	jae	.Ltmp824 # Offset: 9204
    000023f6: 	addq	%rcx, %r9
    000023f9: 	movl	0x320(%r14,%r10,4), %r11d
    00002401: 	addq	$0x2, %rax
    00002405: 	imull	(%rbp,%r9,4), %r11d
    0000240b: 	addl	%r11d, %edx
    0000240e: 	cmpq	%rbx, %rax
    00002411: 	jae	.Ltmp824 # Offset: 9233
    00002413: 	addq	%rcx, %rax
    00002416: 	movl	0x640(%r14,%r10,4), %r9d
    0000241e: 	imull	(%rbp,%rax,4), %r9d
    00002424: 	addl	%r9d, %edx
    00002427: 	nopw	(%rax,%rax) # Size: 9
.Ltmp824:
    00002430: 	addl	%esi, %edx
    00002432: 	addl	%edi, %edx
    00002434: 	addl	%r8d, %edx
    00002437: 	addl	%edx, (%r13,%rcx,4)
    0000243c: 	addq	$0xc8, %rcx
    00002443: 	cmpq	%rcx, 0x8(%rsp)
    00002448: 	jne	.Ltmp827 # Offset: 9288
    0000244e: 	addq	$0x1, %r15
    00002452: 	addq	$0x4, 0x18(%rsp)
    00002458: 	addq	$0x4, %r13
    0000245c: 	cmpq	$0xc8, %r15
    00002463: 	jne	.Ltmp828 # Offset: 9315
.Ltmp821:
    00002469: 	addq	$0x6400, 0x48(%rsp)
    00002472: 	addq	$0x200, 0x28(%rsp)
    0000247b: 	cmpq	$0x100, 0x40(%rsp)
    00002484: 	jne	.Ltmp829 # Offset: 9348
    0000248a: 	addq	$0x6400, 0x30(%rsp)
    00002493: 	cmpq	$0x180, 0x38(%rsp)
    0000249c: 	jne	.Ltmp830 # Offset: 9372
    000024a2: 	movq	0xa8(%rsp), %rsi
    000024aa: 	movq	0xb0(%rsp), %rcx
    000024b2: 	xorl	%edx, %edx
.Ltmp833:
    000024b4: 	xorl	%eax, %eax
.Ltmp832:
    000024b6: 	movl	(%rsi,%rax,4), %edi
    000024b9: 	cmpl	%edi, (%rcx,%rax,4)
    000024bc: 	jne	.Ltmp831 # Offset: 9404
    000024c2: 	addq	$0x1, %rax
    000024c6: 	cmpq	$0xc8, %rax
    000024cc: 	jne	.Ltmp832 # Offset: 9420
    000024ce: 	addq	$0xc8, %rdx
    000024d5: 	addq	$0x320, %rcx
    000024dc: 	addq	$0x320, %rsi
    000024e3: 	cmpq	$0xea60, %rdx
    000024ea: 	jne	.Ltmp833 # Offset: 9450
.Ltmp905:
    000024ec: 	movq	0xa8(%rsp), %rdi
    000024f4: 	movl	$0x3a980, %edx
    000024f9: 	xorl	%esi, %esi
    000024fb: 	callq	memset@PLT # Offset: 9467
    00002500: 	movq	$0x0, 0x78(%rsp)
    00002509: 	movq	$0x0, 0xa0(%rsp)
.Ltmp843:
    00002515: 	movq	0xa0(%rsp), %rdi
    0000251d: 	movl	$0x12c, %eax
    00002522: 	movq	0x10(%rsp), %rcx
    00002527: 	movq	$0x0, 0xc8(%rsp)
    00002533: 	movq	$0x0, 0xc0(%rsp)
    0000253f: 	movq	%rdi, 0x88(%rsp)
    00002547: 	subq	$-0x80, %rdi
    0000254b: 	cmpq	%rax, %rdi
    0000254e: 	movq	%rdi, 0xa0(%rsp)
    00002556: 	cmovbeq	%rdi, %rax
    0000255a: 	movq	%rax, %rdi
    0000255d: 	movq	%rax, 0x80(%rsp)
    00002565: 	movq	0x78(%rsp), %rax
    0000256a: 	shlq	$0x2, %rax
    0000256e: 	addq	%rax, %rcx
    00002571: 	addq	0xa8(%rsp), %rax
    00002579: 	movq	%rax, 0xd0(%rsp)
    00002581: 	leaq	(%rdi,%rdi,4), %rax
    00002585: 	leaq	(%rax,%rax,4), %rax
    00002589: 	movq	%rcx, 0x90(%rsp)
    00002591: 	shlq	$0x3, %rax
    00002595: 	movq	%rax, 0x40(%rsp)
.Ltmp842:
    0000259a: 	movq	0xc0(%rsp), %rcx
    000025a2: 	movl	$0xc8, %eax
    000025a7: 	movq	0xc8(%rsp), %rsi
    000025af: 	movq	$0x0, 0x28(%rsp)
    000025b8: 	movq	%rcx, %rdi
    000025bb: 	movq	%rcx, 0x18(%rsp)
    000025c0: 	subq	$-0x80, %rcx
    000025c4: 	cmpq	%rax, %rcx
    000025c7: 	movq	%rcx, 0xc0(%rsp)
    000025cf: 	cmovbeq	%rcx, %rax
    000025d3: 	leaq	-0x3(%rax), %rcx
    000025d7: 	movq	%rax, 0x30(%rsp)
    000025dc: 	subq	%rdi, %rax
    000025df: 	movq	%rcx, (%rsp)
    000025e3: 	movq	0x20(%rsp), %rcx
    000025e8: 	subq	$0x4, %rax
    000025ec: 	movq	%rax, 0x48(%rsp)
    000025f1: 	leaq	(%rcx,%rsi,4), %rcx
    000025f5: 	movq	%rcx, 0x38(%rsp)
    000025fa: 	movq	%rax, %rcx
    000025fd: 	andq	$-0x10, %rax
    00002601: 	addq	%rdi, %rax
    00002604: 	shrq	$0x4, %rcx
    00002608: 	movq	%rax, 0x60(%rsp)
    0000260d: 	leaq	(%rax,%rax,4), %rax
    00002611: 	leaq	(%rax,%rax,4), %rax
    00002615: 	movq	%rcx, 0x58(%rsp)
    0000261a: 	shlq	$0x3, %rax
    0000261e: 	movq	%rax, 0x98(%rsp)
    00002626: 	movq	0xd0(%rsp), %rax
    0000262e: 	movq	%rax, 0x70(%rsp)
    00002633: 	nopl	(%rax,%rax) # Size: 5
.Ltmp841:
    00002638: 	movq	0x88(%rsp), %rdi
    00002640: 	cmpq	%rdi, 0x80(%rsp)
    00002648: 	jbe	.Ltmp834 # Offset: 9800
    0000264e: 	movq	0x20(%rsp), %rcx
    00002653: 	movq	0x28(%rsp), %rax
    00002658: 	addq	0x98(%rsp), %rax
    00002660: 	movq	0x78(%rsp), %r12
    00002665: 	leaq	(%rcx,%rax,4), %rax
    00002669: 	movq	0x70(%rsp), %rbp
    0000266e: 	movq	%rax, 0x50(%rsp)
    00002673: 	movq	0x90(%rsp), %rax
    0000267b: 	movq	%rax, 0x8(%rsp)
.Ltmp840:
    00002680: 	movq	0x18(%rsp), %rcx
    00002685: 	cmpq	%rcx, (%rsp)
    00002689: 	jbe	.Ltmp835 # Offset: 9865
    0000268f: 	cmpq	$0xf, 0x48(%rsp)
    00002695: 	jbe	.Ltmp836 # Offset: 9877
    0000269b: 	pxor	%xmm3, %xmm3
    0000269f: 	movq	0x8(%rsp), %rdx
    000026a4: 	movq	0x38(%rsp), %rax
    000026a9: 	xorl	%ecx, %ecx
    000026ab: 	movq	0x58(%rsp), %rsi
    000026b0: 	movdqa	%xmm3, %xmm4
    000026b4: 	movdqa	%xmm3, %xmm5
    000026b8: 	movdqa	%xmm3, %xmm6
.Ltmp837:
    000026bc: 	movdqu	(%rdx), %xmm7
    000026c0: 	movdqu	(%rax), %xmm13
    000026c5: 	addq	$0x1, %rcx
    000026c9: 	addq	$0x3200, %rax
    000026cf: 	movdqu	0x10(%rdx), %xmm2
    000026d4: 	movdqu	0x20(%rdx), %xmm1
    000026d9: 	addq	$0x40, %rdx
    000026dd: 	movdqu	-0x2ee0(%rax), %xmm12
    000026e6: 	pshufd	$0x55, %xmm7, %xmm9
    000026ec: 	movdqu	-0x2bc0(%rax), %xmm14
    000026f5: 	movdqu	-0x28a0(%rax), %xmm15
    000026fe: 	movdqu	-0x10(%rdx), %xmm0
    00002703: 	pshufd	$0x1b, %xmm12, %xmm8
    00002709: 	movdqu	-0x2580(%rax), %xmm12
    00002712: 	movdqa	%xmm8, %xmm10
    00002717: 	psrlq	$0x20, %xmm8
    0000271d: 	pmuludq	%xmm9, %xmm10
    00002722: 	psrlq	$0x20, %xmm9
    00002728: 	pmuludq	%xmm9, %xmm8
    0000272d: 	pshufd	$0x8, %xmm10, %xmm10
    00002733: 	pshufd	$0x8, %xmm8, %xmm9
    00002739: 	punpckldq	%xmm9, %xmm10
    0000273e: 	pshufd	$0x0, %xmm7, %xmm9
    00002744: 	movdqa	%xmm10, %xmm8
    00002749: 	movdqa	%xmm9, %xmm11
    0000274e: 	pshufd	$0x1b, %xmm13, %xmm10
    00002754: 	movdqu	-0x1f40(%rax), %xmm13
    0000275d: 	pmuludq	%xmm10, %xmm11
    00002762: 	psrlq	$0x20, %xmm9
    00002768: 	psrlq	$0x20, %xmm10
    0000276e: 	pmuludq	%xmm10, %xmm9
    00002773: 	pshufd	$0x8, %xmm11, %xmm10
    00002779: 	pshufd	$0x8, %xmm9, %xmm9
    0000277f: 	punpckldq	%xmm9, %xmm10
    00002784: 	pshufd	$0xaa, %xmm7, %xmm9
    0000278a: 	pshufd	$0xff, %xmm7, %xmm7
    0000278f: 	paddd	%xmm10, %xmm8
    00002794: 	movdqa	%xmm9, %xmm11
    00002799: 	pshufd	$0x1b, %xmm14, %xmm10
    0000279f: 	movdqu	-0x1c20(%rax), %xmm14
    000027a8: 	pmuludq	%xmm10, %xmm11
    000027ad: 	psrlq	$0x20, %xmm9
    000027b3: 	psrlq	$0x20, %xmm10
    000027b9: 	pmuludq	%xmm10, %xmm9
    000027be: 	pshufd	$0x8, %xmm11, %xmm10
    000027c4: 	pshufd	$0x8, %xmm9, %xmm9
    000027ca: 	punpckldq	%xmm9, %xmm10
    000027cf: 	pshufd	$0x1b, %xmm15, %xmm9
    000027d5: 	movdqu	-0x1900(%rax), %xmm15
    000027de: 	paddd	%xmm10, %xmm8
    000027e3: 	movdqa	%xmm7, %xmm10
    000027e8: 	pmuludq	%xmm9, %xmm10
    000027ed: 	psrlq	$0x20, %xmm7
    000027f2: 	psrlq	$0x20, %xmm9
    000027f8: 	pmuludq	%xmm9, %xmm7
    000027fd: 	pshufd	$0x8, %xmm10, %xmm9
    00002803: 	pshufd	$0x0, %xmm2, %xmm10
    00002809: 	pshufd	$0x8, %xmm7, %xmm7
    0000280e: 	punpckldq	%xmm7, %xmm9
    00002813: 	movdqu	-0x2260(%rax), %xmm7
    0000281b: 	paddd	%xmm9, %xmm8
    00002820: 	pshufd	$0x1b, %xmm7, %xmm7
    00002825: 	paddd	%xmm8, %xmm6
    0000282a: 	pshufd	$0x55, %xmm2, %xmm8
    00002830: 	movdqa	%xmm7, %xmm9
    00002835: 	psrlq	$0x20, %xmm7
    0000283a: 	pmuludq	%xmm8, %xmm9
    0000283f: 	psrlq	$0x20, %xmm8
    00002845: 	pmuludq	%xmm8, %xmm7
    0000284a: 	pshufd	$0x8, %xmm9, %xmm9
    00002850: 	pshufd	$0x8, %xmm7, %xmm8
    00002856: 	movdqa	%xmm9, %xmm7
    0000285b: 	punpckldq	%xmm8, %xmm7
    00002860: 	pshufd	$0x1b, %xmm12, %xmm8
    00002866: 	movdqu	-0x12c0(%rax), %xmm12
    0000286f: 	movdqa	%xmm8, %xmm9
    00002874: 	psrlq	$0x20, %xmm8
    0000287a: 	pmuludq	%xmm10, %xmm9
    0000287f: 	psrlq	$0x20, %xmm10
    00002885: 	pmuludq	%xmm10, %xmm8
    0000288a: 	pshufd	$0x8, %xmm9, %xmm9
    00002890: 	pshufd	$0x8, %xmm8, %xmm8
    00002896: 	punpckldq	%xmm8, %xmm9
    0000289b: 	pshufd	$0xaa, %xmm2, %xmm8
    000028a1: 	pshufd	$0xff, %xmm2, %xmm2
    000028a6: 	paddd	%xmm9, %xmm7
    000028ab: 	movdqa	%xmm8, %xmm10
    000028b0: 	pshufd	$0x1b, %xmm13, %xmm9
    000028b6: 	pmuludq	%xmm9, %xmm10
    000028bb: 	psrlq	$0x20, %xmm8
    000028c1: 	psrlq	$0x20, %xmm9
    000028c7: 	pmuludq	%xmm9, %xmm8
    000028cc: 	pshufd	$0x8, %xmm10, %xmm9
    000028d2: 	pshufd	$0x8, %xmm8, %xmm8
    000028d8: 	punpckldq	%xmm8, %xmm9
    000028dd: 	pshufd	$0x1b, %xmm14, %xmm8
    000028e3: 	paddd	%xmm9, %xmm7
    000028e8: 	movdqa	%xmm2, %xmm9
    000028ed: 	pmuludq	%xmm8, %xmm9
    000028f2: 	psrlq	$0x20, %xmm2
    000028f7: 	psrlq	$0x20, %xmm8
    000028fd: 	pmuludq	%xmm8, %xmm2
    00002902: 	pshufd	$0x8, %xmm9, %xmm8
    00002908: 	pshufd	$0x8, %xmm2, %xmm2
    0000290d: 	punpckldq	%xmm2, %xmm8
    00002912: 	paddd	%xmm8, %xmm7
    00002917: 	pshufd	$0x55, %xmm1, %xmm8
    0000291d: 	paddd	%xmm7, %xmm5
    00002921: 	movdqu	-0x15e0(%rax), %xmm7
    00002929: 	pshufd	$0x1b, %xmm7, %xmm2
    0000292e: 	movdqa	%xmm2, %xmm7
    00002932: 	psrlq	$0x20, %xmm2
    00002937: 	pmuludq	%xmm8, %xmm7
    0000293c: 	psrlq	$0x20, %xmm8
    00002942: 	pmuludq	%xmm8, %xmm2
    00002947: 	pshufd	$0x1b, %xmm15, %xmm8
    0000294d: 	pshufd	$0x8, %xmm7, %xmm7
    00002952: 	pshufd	$0x8, %xmm2, %xmm2
    00002957: 	punpckldq	%xmm2, %xmm7
    0000295b: 	pshufd	$0x0, %xmm1, %xmm2
    00002960: 	movdqa	%xmm2, %xmm9
    00002965: 	psrlq	$0x20, %xmm2
    0000296a: 	pmuludq	%xmm8, %xmm9
    0000296f: 	psrlq	$0x20, %xmm8
    00002975: 	pmuludq	%xmm8, %xmm2
    0000297a: 	pshufd	$0x8, %xmm9, %xmm8
    00002980: 	pshufd	$0x8, %xmm2, %xmm2
    00002985: 	punpckldq	%xmm2, %xmm8
    0000298a: 	pshufd	$0xaa, %xmm1, %xmm2
    0000298f: 	pshufd	$0xff, %xmm1, %xmm1
    00002994: 	paddd	%xmm8, %xmm7
    00002999: 	movdqa	%xmm2, %xmm9
    0000299e: 	pshufd	$0x1b, %xmm12, %xmm8
    000029a4: 	pmuludq	%xmm8, %xmm9
    000029a9: 	psrlq	$0x20, %xmm2
    000029ae: 	psrlq	$0x20, %xmm8
    000029b4: 	pmuludq	%xmm8, %xmm2
    000029b9: 	pshufd	$0x8, %xmm9, %xmm8
    000029bf: 	pshufd	$0x8, %xmm2, %xmm2
    000029c4: 	punpckldq	%xmm2, %xmm8
    000029c9: 	movdqa	%xmm7, %xmm2
    000029cd: 	movdqu	-0xfa0(%rax), %xmm7
    000029d5: 	paddd	%xmm8, %xmm2
    000029da: 	movdqa	%xmm1, %xmm8
    000029df: 	pshufd	$0x1b, %xmm7, %xmm7
    000029e4: 	psrlq	$0x20, %xmm1
    000029e9: 	pmuludq	%xmm7, %xmm8
    000029ee: 	psrlq	$0x20, %xmm7
    000029f3: 	pmuludq	%xmm7, %xmm1
    000029f7: 	pshufd	$0x8, %xmm8, %xmm7
    000029fd: 	pshufd	$0x0, %xmm0, %xmm8
    00002a03: 	pshufd	$0x8, %xmm1, %xmm1
    00002a08: 	punpckldq	%xmm1, %xmm7
    00002a0c: 	movdqa	%xmm2, %xmm1
    00002a10: 	paddd	%xmm7, %xmm1
    00002a14: 	pshufd	$0x55, %xmm0, %xmm7
    00002a19: 	paddd	%xmm1, %xmm4
    00002a1d: 	movdqu	-0x960(%rax), %xmm1
    00002a25: 	pshufd	$0x1b, %xmm1, %xmm2
    00002a2a: 	movdqa	%xmm2, %xmm1
    00002a2e: 	psrlq	$0x20, %xmm2
    00002a33: 	pmuludq	%xmm7, %xmm1
    00002a37: 	psrlq	$0x20, %xmm7
    00002a3c: 	pmuludq	%xmm7, %xmm2
    00002a40: 	pshufd	$0x8, %xmm1, %xmm1
    00002a45: 	pshufd	$0x8, %xmm2, %xmm2
    00002a4a: 	punpckldq	%xmm2, %xmm1
    00002a4e: 	movdqu	-0xc80(%rax), %xmm2
    00002a56: 	pshufd	$0x1b, %xmm2, %xmm2
    00002a5b: 	movdqa	%xmm2, %xmm7
    00002a5f: 	psrlq	$0x20, %xmm2
    00002a64: 	pmuludq	%xmm8, %xmm7
    00002a69: 	psrlq	$0x20, %xmm8
    00002a6f: 	pmuludq	%xmm8, %xmm2
    00002a74: 	pshufd	$0x8, %xmm7, %xmm7
    00002a79: 	pshufd	$0x8, %xmm2, %xmm2
    00002a7e: 	punpckldq	%xmm2, %xmm7
    00002a82: 	pshufd	$0xaa, %xmm0, %xmm2
    00002a87: 	pshufd	$0xff, %xmm0, %xmm0
    00002a8c: 	paddd	%xmm7, %xmm1
    00002a90: 	movdqu	-0x640(%rax), %xmm7
    00002a98: 	movdqa	%xmm2, %xmm8
    00002a9d: 	psrlq	$0x20, %xmm2
    00002aa2: 	pshufd	$0x1b, %xmm7, %xmm7
    00002aa7: 	pmuludq	%xmm7, %xmm8
    00002aac: 	psrlq	$0x20, %xmm7
    00002ab1: 	pmuludq	%xmm7, %xmm2
    00002ab5: 	pshufd	$0x8, %xmm8, %xmm7
    00002abb: 	pshufd	$0x8, %xmm2, %xmm2
    00002ac0: 	punpckldq	%xmm2, %xmm7
    00002ac4: 	movdqu	-0x320(%rax), %xmm2
    00002acc: 	paddd	%xmm7, %xmm1
    00002ad0: 	movdqa	%xmm0, %xmm7
    00002ad4: 	pshufd	$0x1b, %xmm2, %xmm2
    00002ad9: 	psrlq	$0x20, %xmm0
    00002ade: 	pmuludq	%xmm2, %xmm7
    00002ae2: 	psrlq	$0x20, %xmm2
    00002ae7: 	pmuludq	%xmm2, %xmm0
    00002aeb: 	pshufd	$0x8, %xmm7, %xmm2
    00002af0: 	pshufd	$0x8, %xmm0, %xmm0
    00002af5: 	punpckldq	%xmm0, %xmm2
    00002af9: 	movdqa	%xmm1, %xmm0
    00002afd: 	paddd	%xmm2, %xmm0
    00002b01: 	paddd	%xmm0, %xmm3
    00002b05: 	cmpq	%rcx, %rsi
    00002b08: 	ja	.Ltmp837 # Offset: 11016
    00002b0e: 	movd	%xmm6, %edx
    00002b12: 	movd	%xmm5, %eax
    00002b16: 	pshufd	$0x55, %xmm6, %xmm0
    00002b1b: 	movq	0x60(%rsp), %r9
    00002b20: 	addl	%edx, %eax
    00002b22: 	movd	%xmm4, %r10d
    00002b27: 	movd	%xmm0, %edx
    00002b2b: 	movq	0x10(%rsp), %rdi
    00002b30: 	pshufd	$0x55, %xmm5, %xmm0
    00002b35: 	addl	%eax, %r10d
    00002b38: 	movd	%xmm3, %eax
    00002b3c: 	addl	%eax, %r10d
    00002b3f: 	movd	%xmm0, %eax
    00002b43: 	pshufd	$0x55, %xmm4, %xmm0
    00002b48: 	addl	%edx, %eax
    00002b4a: 	movd	%xmm0, %esi
    00002b4e: 	pshufd	$0x55, %xmm3, %xmm0
    00002b53: 	addl	%eax, %esi
    00002b55: 	movd	%xmm0, %eax
    00002b59: 	movdqa	%xmm6, %xmm0
    00002b5d: 	punpckhdq	%xmm6, %xmm0
    00002b61: 	addl	%eax, %esi
    00002b63: 	pshufd	$0xff, %xmm6, %xmm6
    00002b68: 	movd	%xmm0, %edx
    00002b6c: 	movdqa	%xmm5, %xmm0
    00002b70: 	punpckhdq	%xmm5, %xmm0
    00002b74: 	pshufd	$0xff, %xmm5, %xmm5
    00002b79: 	movd	%xmm0, %eax
    00002b7d: 	movdqa	%xmm4, %xmm0
    00002b81: 	punpckhdq	%xmm4, %xmm0
    00002b85: 	addl	%edx, %eax
    00002b87: 	pshufd	$0xff, %xmm4, %xmm4
    00002b8c: 	movd	%xmm0, %r8d
    00002b91: 	movdqa	%xmm3, %xmm0
    00002b95: 	movd	%xmm6, %edx
    00002b99: 	punpckhdq	%xmm3, %xmm0
    00002b9d: 	movd	%xmm4, %ecx
    00002ba1: 	pshufd	$0xff, %xmm3, %xmm3
    00002ba6: 	addl	%eax, %r8d
    00002ba9: 	movd	%xmm0, %eax
    00002bad: 	addl	%eax, %r8d
    00002bb0: 	movd	%xmm5, %eax
    00002bb4: 	addl	%edx, %eax
    00002bb6: 	addl	%eax, %ecx
    00002bb8: 	movd	%xmm3, %eax
    00002bbc: 	addl	%eax, %ecx
    00002bbe: 	leaq	(%r9,%r12), %rax
    00002bc2: 	leaq	(%rdi,%rax,4), %r13
    00002bc6: 	movq	0x50(%rsp), %rax
    00002bcb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp838:
    00002bd0: 	movl	(%r13), %ebx
    00002bd4: 	movl	0x4(%r13), %edx
    00002bd8: 	movl	(%rax), %r14d
    00002bdb: 	movl	0x320(%rax), %r15d
    00002be2: 	movl	0x8(%r13), %r11d
    00002be6: 	movl	0xc(%r13), %edi
    00002bea: 	imull	%ebx, %r14d
    00002bee: 	imull	%edx, %r15d
    00002bf2: 	addl	%r14d, %r15d
    00002bf5: 	movl	0x640(%rax), %r14d
    00002bfc: 	imull	%r11d, %r14d
    00002c00: 	addl	%r15d, %r14d
    00002c03: 	movl	0x960(%rax), %r15d
    00002c0a: 	imull	%edi, %r15d
    00002c0e: 	addl	%r15d, %r14d
    00002c11: 	movl	0x324(%rax), %r15d
    00002c18: 	addl	%r14d, %ecx
    00002c1b: 	movl	0x4(%rax), %r14d
    00002c1f: 	imull	%edx, %r15d
    00002c23: 	imull	%ebx, %r14d
    00002c27: 	addl	%r14d, %r15d
    00002c2a: 	movl	0x644(%rax), %r14d
    00002c31: 	imull	%r11d, %r14d
    00002c35: 	addl	%r15d, %r14d
    00002c38: 	movl	0x964(%rax), %r15d
    00002c3f: 	imull	%edi, %r15d
    00002c43: 	addl	%r15d, %r14d
    00002c46: 	movl	0x328(%rax), %r15d
    00002c4d: 	addl	%r14d, %r8d
    00002c50: 	movl	0x8(%rax), %r14d
    00002c54: 	imull	%edx, %r15d
    00002c58: 	imull	%ebx, %r14d
    00002c5c: 	imull	0x32c(%rax), %edx
    00002c63: 	imull	0xc(%rax), %ebx
    00002c67: 	addl	%r14d, %r15d
    00002c6a: 	movl	0x648(%rax), %r14d
    00002c71: 	imull	%r11d, %r14d
    00002c75: 	addl	%ebx, %edx
    00002c77: 	imull	0x64c(%rax), %r11d
    00002c7f: 	addl	%r15d, %r14d
    00002c82: 	movl	0x968(%rax), %r15d
    00002c89: 	addl	%edx, %r11d
    00002c8c: 	imull	%edi, %r15d
    00002c90: 	imull	0x96c(%rax), %edi
    00002c97: 	addl	%r15d, %r14d
    00002c9a: 	addl	%r11d, %edi
    00002c9d: 	addl	%r14d, %esi
    00002ca0: 	addl	%edi, %r10d
    00002ca3: 	addq	$0x4, %r9
    00002ca7: 	addq	$0x10, %r13
    00002cab: 	addq	$0xc80, %rax
    00002cb1: 	cmpq	%r9, (%rsp)
    00002cb5: 	ja	.Ltmp838 # Offset: 11445
.Ltmp895:
    00002cbb: 	movq	0x30(%rsp), %r14
    00002cc0: 	cmpq	%r9, %r14
    00002cc3: 	jbe	.Ltmp839 # Offset: 11459
    00002cc9: 	leaq	(%r9,%r9,4), %rdx
    00002ccd: 	movq	0x28(%rsp), %r13
    00002cd2: 	movq	0x20(%rsp), %rbx
    00002cd7: 	leaq	(%r9,%r12), %rax
    00002cdb: 	leaq	(%rdx,%rdx,4), %rdi
    00002cdf: 	movq	0x10(%rsp), %r15
    00002ce4: 	shlq	$0x3, %rdi
    00002ce8: 	leaq	(%rdi,%r13), %rdx
    00002cec: 	movl	(%r15,%rax,4), %eax
    00002cf0: 	movl	(%rbx,%rdx,4), %r11d
    00002cf4: 	imull	%eax, %r11d
    00002cf8: 	addl	%r11d, %ecx
    00002cfb: 	movl	0x4(%rbx,%rdx,4), %r11d
    00002d00: 	imull	%eax, %r11d
    00002d04: 	addl	%r11d, %r8d
    00002d07: 	movl	0x8(%rbx,%rdx,4), %r11d
    00002d0c: 	imull	%eax, %r11d
    00002d10: 	imull	0xc(%rbx,%rdx,4), %eax
    00002d15: 	addl	%r11d, %esi
    00002d18: 	addl	%eax, %r10d
    00002d1b: 	leaq	0x1(%r9), %rax
    00002d1f: 	cmpq	%rax, %r14
    00002d22: 	jbe	.Ltmp839 # Offset: 11554
    00002d28: 	leaq	0xc8(%r13,%rdi), %rdx
    00002d30: 	addq	%r12, %rax
    00002d33: 	movl	(%r15,%rax,4), %eax
    00002d37: 	movl	(%rbx,%rdx,4), %r11d
    00002d3b: 	imull	%eax, %r11d
    00002d3f: 	addl	%r11d, %ecx
    00002d42: 	movl	0x4(%rbx,%rdx,4), %r11d
    00002d47: 	imull	%eax, %r11d
    00002d4b: 	addl	%r11d, %r8d
    00002d4e: 	movl	0x8(%rbx,%rdx,4), %r11d
    00002d53: 	imull	%eax, %r11d
    00002d57: 	imull	0xc(%rbx,%rdx,4), %eax
    00002d5c: 	addl	%r11d, %esi
    00002d5f: 	addl	%eax, %r10d
    00002d62: 	leaq	0x2(%r9), %rax
    00002d66: 	cmpq	%r14, %rax
    00002d69: 	jae	.Ltmp839 # Offset: 11625
    00002d6b: 	leaq	0x190(%r13,%rdi), %rdx
    00002d73: 	addq	%r12, %rax
    00002d76: 	addq	$0x3, %r9
    00002d7a: 	movl	(%r15,%rax,4), %eax
    00002d7e: 	movl	(%rbx,%rdx,4), %r11d
    00002d82: 	imull	%eax, %r11d
    00002d86: 	addl	%r11d, %ecx
    00002d89: 	movl	0x4(%rbx,%rdx,4), %r11d
    00002d8e: 	imull	%eax, %r11d
    00002d92: 	addl	%r11d, %r8d
    00002d95: 	movl	0x8(%rbx,%rdx,4), %r11d
    00002d9a: 	imull	%eax, %r11d
    00002d9e: 	imull	0xc(%rbx,%rdx,4), %eax
    00002da3: 	addl	%r11d, %esi
    00002da6: 	addl	%eax, %r10d
    00002da9: 	cmpq	%r14, %r9
    00002dac: 	jae	.Ltmp839 # Offset: 11692
    00002dae: 	leaq	0x258(%r13,%rdi), %rdx
    00002db6: 	addq	%r12, %r9
    00002db9: 	movl	(%r15,%r9,4), %eax
    00002dbd: 	movl	(%rbx,%rdx,4), %edi
    00002dc0: 	imull	%eax, %edi
    00002dc3: 	addl	%edi, %ecx
    00002dc5: 	movl	0x4(%rbx,%rdx,4), %edi
    00002dc9: 	imull	%eax, %edi
    00002dcc: 	addl	%edi, %r8d
    00002dcf: 	movl	0x8(%rbx,%rdx,4), %edi
    00002dd3: 	imull	%eax, %edi
    00002dd6: 	imull	0xc(%rbx,%rdx,4), %eax
    00002ddb: 	addl	%edi, %esi
    00002ddd: 	addl	%eax, %r10d
.Ltmp839:
    00002de0: 	addl	(%rbp), %ecx
    00002de3: 	addl	0x4(%rbp), %r8d
    00002de7: 	addq	$0xc8, %r12
    00002dee: 	addq	$0x320, %rbp
    00002df5: 	addl	-0x318(%rbp), %esi
    00002dfb: 	addl	-0x314(%rbp), %r10d
    00002e02: 	movd	%ecx, %xmm0
    00002e06: 	movd	%esi, %xmm1
    00002e0a: 	movd	%r10d, %xmm6
    00002e0f: 	movd	%r8d, %xmm4
    00002e14: 	addq	$0x320, 0x8(%rsp)
    00002e1d: 	punpckldq	%xmm6, %xmm1
    00002e21: 	punpckldq	%xmm4, %xmm0
    00002e25: 	punpcklqdq	%xmm1, %xmm0
    00002e29: 	movups	%xmm0, -0x320(%rbp)
    00002e30: 	cmpq	%r12, 0x40(%rsp)
    00002e35: 	jne	.Ltmp840 # Offset: 11829
.Ltmp834:
    00002e3b: 	addq	$0x4, 0x28(%rsp)
    00002e41: 	movq	0x28(%rsp), %rax
    00002e46: 	addq	$0x10, 0x70(%rsp)
    00002e4c: 	addq	$0x10, 0x38(%rsp)
    00002e52: 	cmpq	$0xc8, %rax
    00002e58: 	jne	.Ltmp841 # Offset: 11864
    00002e5e: 	addq	$0x200, 0x90(%rsp)
    00002e6a: 	addq	$0x6400, 0xc8(%rsp)
    00002e76: 	cmpq	$0x100, 0xc0(%rsp)
    00002e82: 	jne	.Ltmp842 # Offset: 11906
    00002e88: 	addq	$0x6400, 0x78(%rsp)
    00002e91: 	cmpq	$0x180, 0xa0(%rsp)
    00002e9d: 	jne	.Ltmp843 # Offset: 11933
    00002ea3: 	movq	0xa8(%rsp), %rsi
    00002eab: 	movq	0xb0(%rsp), %rcx
    00002eb3: 	xorl	%edx, %edx
.Ltmp846:
    00002eb5: 	xorl	%eax, %eax
.Ltmp845:
    00002eb7: 	movl	(%rsi,%rax,4), %edi
    00002eba: 	cmpl	%edi, (%rcx,%rax,4)
    00002ebd: 	jne	.Ltmp844 # Offset: 11965
    00002ec3: 	addq	$0x1, %rax
    00002ec7: 	cmpq	$0xc8, %rax
    00002ecd: 	jne	.Ltmp845 # Offset: 11981
    00002ecf: 	addq	$0xc8, %rdx
    00002ed6: 	addq	$0x320, %rcx
    00002edd: 	addq	$0x320, %rsi
    00002ee4: 	cmpq	$0xea60, %rdx
    00002eeb: 	jne	.Ltmp846 # Offset: 12011
.Ltmp904:
    00002eed: 	movq	0xa8(%rsp), %rbx
    00002ef5: 	movl	$0x3a980, %edx
    00002efa: 	xorl	%esi, %esi
    00002efc: 	movq	%rbx, %rdi
    00002eff: 	callq	memset@PLT # Offset: 12031
    00002f04: 	movq	0x20(%rsp), %rsi
    00002f09: 	movq	0x10(%rsp), %rdi
    00002f0e: 	movq	%rbx, %rdx
    00002f11: 	movl	$0x12c, %ecx
    00002f16: 	movl	$0xc8, %r8d
    00002f1c: 	callq	"_ZN28matmul_IJK_blocked_unrolled3IiEclEPKiS2_Pimm.isra.0/1" # Offset: 12060
    00002f21: 	movq	0xb0(%rsp), %rcx
    00002f29: 	movq	%rbx, %rsi
    00002f2c: 	xorl	%edx, %edx
.Ltmp849:
    00002f2e: 	xorl	%eax, %eax
.Ltmp848:
    00002f30: 	movl	(%rsi,%rax,4), %edi
    00002f33: 	cmpl	%edi, (%rcx,%rax,4)
    00002f36: 	jne	.Ltmp847 # Offset: 12086
    00002f3c: 	addq	$0x1, %rax
    00002f40: 	cmpq	$0xc8, %rax
    00002f46: 	jne	.Ltmp848 # Offset: 12102
    00002f48: 	addq	$0xc8, %rdx
    00002f4f: 	addq	$0x320, %rcx
    00002f56: 	addq	$0x320, %rsi
    00002f5d: 	cmpq	$0xea60, %rdx
    00002f64: 	jne	.Ltmp849 # Offset: 12132
.Ltmp903:
    00002f66: 	movq	0xa8(%rsp), %rdi
    00002f6e: 	movl	$0x3a980, %edx
    00002f73: 	xorl	%esi, %esi
    00002f75: 	xorl	%r15d, %r15d
    00002f78: 	callq	memset@PLT # Offset: 12152
.Ltmp856:
    00002f7d: 	movl	$0xc8, %eax
    00002f82: 	movq	%r15, %rcx
    00002f85: 	subq	$-0x80, %r15
    00002f89: 	cmpq	%rax, %r15
    00002f8c: 	cmovbeq	%r15, %rax
    00002f90: 	cmpq	%rcx, %rax
    00002f93: 	jbe	.Ltmp850 # Offset: 12179
    00002f99: 	leaq	(,%rcx,4), %rdx
    00002fa1: 	movq	0x10(%rsp), %rdi
    00002fa6: 	shlq	$0x2, %rax
    00002faa: 	movq	0x100(%rsp), %r11
    00002fb2: 	movq	%rdx, %r13
    00002fb5: 	movq	0xe8(%rsp), %r9
    00002fbd: 	xorl	%ebp, %ebp
    00002fbf: 	leaq	(%rdi,%rax), %r10
    00002fc3: 	subq	%rax, %r13
    00002fc6: 	leaq	(%rdx,%rcx), %rax
    00002fca: 	movq	0xa8(%rsp), %rcx
    00002fd2: 	leaq	(%rax,%rax,4), %rbx
    00002fd6: 	shlq	$0x5, %rbx
    00002fda: 	addq	0x20(%rsp), %rbx
.Ltmp855:
    00002fdf: 	movq	0xa8(%rsp), %rax
    00002fe7: 	leaq	(%r13,%r10), %r8
    00002fec: 	movq	%rbx, %rsi
    00002fef: 	leaq	(%rax,%rbp,4), %r12
    00002ff3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp854:
    00002ff8: 	leaq	0x10(%rsi), %rax
    00002ffc: 	movl	(%r8), %edx
    00002fff: 	cmpq	%rax, %rcx
    00003002: 	jae	.Ltmp851 # Offset: 12290
    00003004: 	movq	%rsi, %rdi
    00003007: 	movq	%r12, %rax
    0000300a: 	cmpq	%r11, %rsi
    0000300d: 	jb	.Ltmp852 # Offset: 12301
.Ltmp851:
    00003013: 	movd	%edx, %xmm5
    00003017: 	xorl	%eax, %eax
    00003019: 	pshufd	$0x0, %xmm5, %xmm2
    0000301e: 	movdqa	%xmm2, %xmm3
    00003022: 	psrlq	$0x20, %xmm3
    00003027: 	nopw	(%rax,%rax) # Size: 9
.Ltmp853:
    00003030: 	movdqu	(%rsi,%rax), %xmm0
    00003035: 	movdqu	(%rsi,%rax), %xmm1
    0000303a: 	psrlq	$0x20, %xmm0
    0000303f: 	pmuludq	%xmm2, %xmm1
    00003043: 	pmuludq	%xmm3, %xmm0
    00003047: 	pshufd	$0x8, %xmm1, %xmm1
    0000304c: 	pshufd	$0x8, %xmm0, %xmm0
    00003051: 	punpckldq	%xmm0, %xmm1
    00003055: 	movdqu	(%rcx,%rax), %xmm0
    0000305a: 	paddd	%xmm1, %xmm0
    0000305e: 	movups	%xmm0, (%rcx,%rax)
    00003062: 	addq	$0x10, %rax
    00003066: 	cmpq	$0x320, %rax
    0000306c: 	jne	.Ltmp853 # Offset: 12396
.Ltmp896:
    0000306e: 	addq	$0x4, %r8
    00003072: 	addq	$0x320, %rsi
    00003079: 	cmpq	%r10, %r8
    0000307c: 	jne	.Ltmp854 # Offset: 12412
    00003082: 	addq	$0xc8, %rbp
    00003089: 	addq	$0x320, %r10
    00003090: 	addq	$0x320, %rcx
    00003097: 	addq	$0x320, %r9
    0000309e: 	addq	$0x320, %r11
    000030a5: 	cmpq	$0xea60, %rbp
    000030ac: 	jne	.Ltmp855 # Offset: 12460
.Ltmp850:
    000030b2: 	cmpq	$0x100, %r15
    000030b9: 	jne	.Ltmp856 # Offset: 12473
    000030bf: 	movq	0xa8(%rsp), %rsi
    000030c7: 	movq	0xb0(%rsp), %rcx
    000030cf: 	xorl	%edx, %edx
.Ltmp859:
    000030d1: 	xorl	%eax, %eax
.Ltmp858:
    000030d3: 	movl	(%rsi,%rax,4), %edi
    000030d6: 	cmpl	%edi, (%rcx,%rax,4)
    000030d9: 	jne	.Ltmp857 # Offset: 12505
    000030df: 	addq	$0x1, %rax
    000030e3: 	cmpq	$0xc8, %rax
    000030e9: 	jne	.Ltmp858 # Offset: 12521
    000030eb: 	addq	$0xc8, %rdx
    000030f2: 	addq	$0x320, %rcx
    000030f9: 	addq	$0x320, %rsi
    00003100: 	cmpq	$0xea60, %rdx
    00003107: 	jne	.Ltmp859 # Offset: 12551
.Ltmp902:
    00003109: 	movq	0xa8(%rsp), %rdi
    00003111: 	movl	$0x3a980, %edx
    00003116: 	xorl	%esi, %esi
    00003118: 	callq	memset@PLT # Offset: 12568
    0000311d: 	movq	0x20(%rsp), %rax
    00003122: 	movq	$0x0, (%rsp)
    0000312a: 	subq	$0x19000, %rax
    00003130: 	movq	%rax, 0x48(%rsp)
.Ltmp869:
    00003135: 	movq	(%rsp), %rdi
    00003139: 	movl	$0xc8, %eax
    0000313e: 	movq	$0x0, 0x18(%rsp)
    00003147: 	movq	%rdi, 0x38(%rsp)
    0000314c: 	subq	$-0x80, %rdi
    00003150: 	cmpq	%rax, %rdi
    00003153: 	movq	%rdi, (%rsp)
    00003157: 	cmovbeq	%rdi, %rax
    0000315b: 	leaq	(,%rax,4), %rdx
    00003163: 	movq	%rax, 0x30(%rsp)
    00003168: 	leaq	-0x3(%rax), %r14
    0000316c: 	movq	0x10(%rsp), %rax
    00003171: 	addq	%rdx, %rax
    00003174: 	movq	%rax, 0x8(%rsp)
    00003179: 	leaq	(,%rdi,4), %rax
    00003181: 	leaq	-0x200(%rax), %rcx
    00003188: 	addq	%rdi, %rax
    0000318b: 	subq	%rdx, %rcx
    0000318e: 	leaq	(%rax,%rax,4), %rax
    00003192: 	shlq	$0x5, %rax
    00003196: 	movq	%rcx, 0x40(%rsp)
    0000319b: 	addq	0x48(%rsp), %rax
    000031a0: 	movq	%rax, 0x28(%rsp)
    000031a5: 	movq	0xa8(%rsp), %rax
.Ltmp868:
    000031ad: 	movq	0x38(%rsp), %rdi
    000031b2: 	movq	0x40(%rsp), %r11
    000031b7: 	movq	0x28(%rsp), %rcx
    000031bc: 	addq	0x8(%rsp), %r11
    000031c1: 	movq	%rdi, %rbx
    000031c4: 	cmpq	%rdi, %r14
    000031c7: 	jbe	.Ltmp860 # Offset: 12743
    000031cd: 	nopl	(%rax) # Size: 3
.Ltmp863:
    000031d0: 	leaq	0x4(%rcx), %rsi
    000031d4: 	movq	%rax, %rdx
    000031d7: 	movl	(%r11), %r10d
    000031da: 	movl	0x4(%r11), %r9d
    000031de: 	subq	%rsi, %rdx
    000031e1: 	movl	0x8(%r11), %r8d
    000031e5: 	movl	0xc(%r11), %edi
    000031e9: 	cmpq	$0x968, %rdx
    000031f0: 	jbe	.Ltmp861 # Offset: 12784
    000031f6: 	movd	%r10d, %xmm6
    000031fb: 	movd	%r9d, %xmm4
    00003200: 	leaq	0x320(%rcx), %r10
    00003207: 	xorl	%edx, %edx
    00003209: 	pshufd	$0x0, %xmm6, %xmm5
    0000320e: 	movd	%r8d, %xmm6
    00003213: 	pshufd	$0x0, %xmm4, %xmm4
    00003218: 	pshufd	$0x0, %xmm6, %xmm3
    0000321d: 	movd	%edi, %xmm6
    00003221: 	movdqa	%xmm5, %xmm9
    00003226: 	pshufd	$0x0, %xmm6, %xmm2
    0000322b: 	movdqa	%xmm4, %xmm8
    00003230: 	movdqa	%xmm3, %xmm7
    00003234: 	psrlq	$0x20, %xmm9
    0000323a: 	psrlq	$0x20, %xmm8
    00003240: 	movdqa	%xmm2, %xmm6
    00003244: 	leaq	0x640(%rcx), %r9
    0000324b: 	leaq	0x960(%rcx), %rsi
    00003252: 	psrlq	$0x20, %xmm7
    00003257: 	psrlq	$0x20, %xmm6
    0000325c: 	nopl	(%rax) # Size: 4
.Ltmp862:
    00003260: 	movdqu	(%rcx,%rdx), %xmm1
    00003265: 	movdqu	(%rcx,%rdx), %xmm0
    0000326a: 	movdqu	(%r10,%rdx), %xmm10
    00003270: 	psrlq	$0x20, %xmm1
    00003275: 	pmuludq	%xmm5, %xmm0
    00003279: 	pmuludq	%xmm9, %xmm1
    0000327e: 	pmuludq	%xmm4, %xmm10
    00003283: 	pshufd	$0x8, %xmm0, %xmm0
    00003288: 	pshufd	$0x8, %xmm1, %xmm1
    0000328d: 	pshufd	$0x8, %xmm10, %xmm10
    00003293: 	punpckldq	%xmm1, %xmm0
    00003297: 	movdqu	(%r10,%rdx), %xmm1
    0000329d: 	psrlq	$0x20, %xmm1
    000032a2: 	pmuludq	%xmm8, %xmm1
    000032a7: 	pshufd	$0x8, %xmm1, %xmm1
    000032ac: 	punpckldq	%xmm1, %xmm10
    000032b1: 	movdqu	(%r9,%rdx), %xmm1
    000032b7: 	paddd	%xmm10, %xmm0
    000032bc: 	movdqu	(%r9,%rdx), %xmm10
    000032c2: 	psrlq	$0x20, %xmm1
    000032c7: 	pmuludq	%xmm3, %xmm10
    000032cc: 	pmuludq	%xmm7, %xmm1
    000032d0: 	pshufd	$0x8, %xmm10, %xmm10
    000032d6: 	pshufd	$0x8, %xmm1, %xmm1
    000032db: 	punpckldq	%xmm1, %xmm10
    000032e0: 	movdqu	(%rsi,%rdx), %xmm1
    000032e5: 	paddd	%xmm10, %xmm0
    000032ea: 	movdqu	(%rsi,%rdx), %xmm10
    000032f0: 	psrlq	$0x20, %xmm1
    000032f5: 	pmuludq	%xmm2, %xmm10
    000032fa: 	pmuludq	%xmm6, %xmm1
    000032fe: 	pshufd	$0x8, %xmm10, %xmm10
    00003304: 	pshufd	$0x8, %xmm1, %xmm1
    00003309: 	punpckldq	%xmm1, %xmm10
    0000330e: 	movdqu	(%rax,%rdx), %xmm1
    00003313: 	paddd	%xmm10, %xmm0
    00003318: 	paddd	%xmm1, %xmm0
    0000331c: 	movups	%xmm0, (%rax,%rdx)
    00003320: 	addq	$0x10, %rdx
    00003324: 	cmpq	$0x320, %rdx
    0000332b: 	jne	.Ltmp862 # Offset: 13099
.Ltmp898:
    00003331: 	addq	$0x4, %rbx
    00003335: 	addq	$0x10, %r11
    00003339: 	addq	$0xc80, %rcx
    00003340: 	cmpq	%r14, %rbx
    00003343: 	jb	.Ltmp863 # Offset: 13123
.Ltmp860:
    00003349: 	cmpq	%rbx, 0x30(%rsp)
    0000334e: 	jbe	.Ltmp864 # Offset: 13134
    00003354: 	movq	0x18(%rsp), %rcx
    00003359: 	movq	0x8(%rsp), %r9
    0000335e: 	leaq	(%rbx,%rcx), %rdx
    00003362: 	movq	0x10(%rsp), %rcx
    00003367: 	leaq	(%rcx,%rdx,4), %rsi
    0000336b: 	leaq	(%rbx,%rbx,4), %rdx
    0000336f: 	leaq	(%rdx,%rdx,4), %rcx
    00003373: 	shlq	$0x5, %rcx
    00003377: 	addq	0x20(%rsp), %rcx
.Ltmp867:
    0000337c: 	leaq	0x4(%rcx), %r8
    00003380: 	movq	%rax, %rdx
    00003383: 	movl	(%rsi), %edi
    00003385: 	subq	%r8, %rdx
    00003388: 	cmpq	$0x8, %rdx
    0000338c: 	jbe	.Ltmp865 # Offset: 13196
    00003392: 	movd	%edi, %xmm5
    00003396: 	xorl	%edx, %edx
    00003398: 	pshufd	$0x0, %xmm5, %xmm2
    0000339d: 	movdqa	%xmm2, %xmm3
    000033a1: 	psrlq	$0x20, %xmm3
    000033a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp866:
    000033b0: 	movdqu	(%rcx,%rdx), %xmm0
    000033b5: 	movdqu	(%rcx,%rdx), %xmm1
    000033ba: 	psrlq	$0x20, %xmm0
    000033bf: 	pmuludq	%xmm2, %xmm1
    000033c3: 	pmuludq	%xmm3, %xmm0
    000033c7: 	pshufd	$0x8, %xmm1, %xmm1
    000033cc: 	pshufd	$0x8, %xmm0, %xmm0
    000033d1: 	punpckldq	%xmm0, %xmm1
    000033d5: 	movdqu	(%rax,%rdx), %xmm0
    000033da: 	paddd	%xmm1, %xmm0
    000033de: 	movups	%xmm0, (%rax,%rdx)
    000033e2: 	addq	$0x10, %rdx
    000033e6: 	cmpq	$0x320, %rdx
    000033ed: 	jne	.Ltmp866 # Offset: 13293
    000033ef: 	addq	$0x4, %rsi
    000033f3: 	addq	$0x320, %rcx
    000033fa: 	cmpq	%r9, %rsi
    000033fd: 	jne	.Ltmp867 # Offset: 13309
.Ltmp864:
    00003403: 	addq	$0x320, 0x8(%rsp)
    0000340c: 	addq	$0x320, %rax
    00003412: 	addq	$0xc8, 0x18(%rsp)
    0000341b: 	cmpq	0xb8(%rsp), %rax
    00003423: 	jne	.Ltmp868 # Offset: 13347
    00003429: 	cmpq	$0x100, (%rsp)
    00003431: 	jne	.Ltmp869 # Offset: 13361
    00003437: 	movq	0xa8(%rsp), %rsi
    0000343f: 	movq	0xb0(%rsp), %rcx
    00003447: 	xorl	%edx, %edx
.Ltmp872:
    00003449: 	xorl	%eax, %eax
.Ltmp871:
    0000344b: 	movl	(%rsi,%rax,4), %edi
    0000344e: 	cmpl	%edi, (%rcx,%rax,4)
    00003451: 	jne	.Ltmp870 # Offset: 13393
    00003457: 	addq	$0x1, %rax
    0000345b: 	cmpq	$0xc8, %rax
    00003461: 	jne	.Ltmp871 # Offset: 13409
    00003463: 	addq	$0xc8, %rdx
    0000346a: 	addq	$0x320, %rcx
    00003471: 	addq	$0x320, %rsi
    00003478: 	cmpq	$0xea60, %rdx
    0000347f: 	jne	.Ltmp872 # Offset: 13439
.Ltmp901:
    00003481: 	movq	0xa8(%rsp), %rbx
    00003489: 	movl	$0x3a980, %edx
    0000348e: 	xorl	%esi, %esi
    00003490: 	movq	%rbx, %rdi
    00003493: 	callq	memset@PLT # Offset: 13459
    00003498: 	movq	0x20(%rsp), %rsi
    0000349d: 	movq	0x10(%rsp), %rdi
    000034a2: 	movq	%rbx, %rdx
    000034a5: 	movl	$0x12c, %ecx
    000034aa: 	movl	$0xc8, %r8d
    000034b0: 	callq	"_ZN28matmul_JKI_blocked_unrolled3IiEclEPKiS2_Pimm.isra.0/1" # Offset: 13488
    000034b5: 	movq	0xf8(%rsp), %rcx
    000034bd: 	movq	0x108(%rsp), %rsi
    000034c5: 	xorl	%edx, %edx
.Ltmp875:
    000034c7: 	xorl	%eax, %eax
.Ltmp874:
    000034c9: 	movl	(%rsi,%rax,4), %edi
    000034cc: 	cmpl	%edi, (%rcx,%rax,4)
    000034cf: 	jne	.Ltmp873 # Offset: 13519
    000034d5: 	addq	$0x1, %rax
    000034d9: 	cmpq	$0xc8, %rax
    000034df: 	jne	.Ltmp874 # Offset: 13535
    000034e1: 	addq	$0xc8, %rdx
    000034e8: 	addq	$0x320, %rcx
    000034ef: 	addq	$0x320, %rsi
    000034f6: 	cmpq	$0xea60, %rdx
    000034fd: 	jne	.Ltmp875 # Offset: 13565
    000034ff: 	movq	0x3aaa8(%rsp), %rax
    00003507: 	subq	%fs:0x28, %rax
    00003510: 	jne	.Ltmp876 # Offset: 13584
    00003516: 	addq	$0x3aab8, %rsp
    0000351d: 	popq	%rbx
    0000351e: 	popq	%rbp
    0000351f: 	popq	%r12
    00003521: 	popq	%r13
    00003523: 	popq	%r14
    00003525: 	popq	%r15
    00003527: 	retq # Offset: 13607
.Ltmp682:
    00003528: 	xorl	%eax, %eax
.Ltmp877:
    0000352a: 	movl	(%rdx,%rax,4), %edi
    0000352d: 	imull	(%rsi), %edi
    00003530: 	addl	%edi, (%rcx,%rax,4)
    00003533: 	addq	$0x1, %rax
    00003537: 	cmpq	$0xc8, %rax
    0000353d: 	jne	.Ltmp877 # Offset: 13629
    0000353f: 	jmp	.Ltmp878 # Offset: 13631
.Ltmp689:
    00003544: 	xorl	%edx, %edx
    00003546: 	leaq	(%r8,%rsi), %r10
.Ltmp879:
    0000354a: 	movl	(%r10,%rdi,4), %esi
    0000354e: 	imull	(%rcx,%rdx,4), %esi
    00003552: 	addl	%esi, (%rax,%rdx,4)
    00003555: 	addq	$0x1, %rdx
    00003559: 	cmpq	$0xc8, %rdx
    00003560: 	jne	.Ltmp879 # Offset: 13664
    00003562: 	addq	$0x320, %rcx
    00003569: 	cmpq	%rcx, (%rsp)
    0000356d: 	jne	.Ltmp691 # Offset: 13677
    00003573: 	jmp	.Ltmp880 # Offset: 13683
.Ltmp720:
    00003578: 	xorl	%esi, %esi
.Ltmp881:
    0000357a: 	movl	(%rcx,%rsi,4), %r9d
    0000357e: 	imull	%eax, %r9d
    00003582: 	addl	%r9d, (%rdx,%rsi,4)
    00003586: 	addq	$0x1, %rsi
    0000358a: 	cmpq	$0xc8, %rsi
    00003591: 	jne	.Ltmp881 # Offset: 13713
    00003593: 	jmp	.Ltmp882 # Offset: 13715
.Ltmp727:
    00003598: 	xorl	%esi, %esi
.Ltmp883:
    0000359a: 	movl	(%rcx,%rsi,4), %r9d
    0000359e: 	imull	%eax, %r9d
    000035a2: 	addl	%r9d, (%rdx,%rsi,4)
    000035a6: 	addq	$0x1, %rsi
    000035aa: 	cmpq	$0xc8, %rsi
    000035b1: 	jne	.Ltmp883 # Offset: 13745
    000035b3: 	jmp	.Ltmp884 # Offset: 13747
.Ltmp756:
    000035b8: 	movq	0x40(%rsp), %rax
    000035bd: 	movq	%rdx, 0x60(%rsp)
    000035c2: 	movq	%rcx, %r13
    000035c5: 	movq	%r10, %r12
    000035c8: 	movq	%r11, %rbp
    000035cb: 	movq	%r9, %rbx
    000035ce: 	movl	%r14d, %edx
.Ltmp885:
    000035d1: 	movl	(%rbx), %r14d
    000035d4: 	movl	(%rbp), %r15d
    000035d8: 	imull	%edx, %r14d
    000035dc: 	imull	%esi, %r15d
    000035e0: 	addl	%r14d, %r15d
    000035e3: 	movl	(%r12), %r14d
    000035e7: 	imull	%edi, %r14d
    000035eb: 	addl	%r15d, %r14d
    000035ee: 	movl	(%r13), %r15d
    000035f2: 	imull	%r8d, %r15d
    000035f6: 	addl	%r15d, %r14d
    000035f9: 	addl	%r14d, (%rax)
    000035fc: 	movl	0x4(%rbx), %r14d
    00003600: 	movl	0x4(%rbp), %r15d
    00003604: 	imull	%edx, %r14d
    00003608: 	imull	%esi, %r15d
    0000360c: 	addl	%r14d, %r15d
    0000360f: 	movl	0x4(%r12), %r14d
    00003614: 	imull	%edi, %r14d
    00003618: 	addl	%r15d, %r14d
    0000361b: 	movl	0x4(%r13), %r15d
    0000361f: 	imull	%r8d, %r15d
    00003623: 	addl	%r15d, %r14d
    00003626: 	addl	%r14d, 0x4(%rax)
    0000362a: 	movl	0x8(%rbx), %r14d
    0000362e: 	movl	0x8(%rbp), %r15d
    00003632: 	imull	%edx, %r14d
    00003636: 	imull	%esi, %r15d
    0000363a: 	addl	%r14d, %r15d
    0000363d: 	movl	0x8(%r12), %r14d
    00003642: 	imull	%edi, %r14d
    00003646: 	addl	%r15d, %r14d
    00003649: 	movl	0x8(%r13), %r15d
    0000364d: 	imull	%r8d, %r15d
    00003651: 	addl	%r15d, %r14d
    00003654: 	addl	%r14d, 0x8(%rax)
    00003658: 	movl	0xc(%rbx), %r14d
    0000365c: 	movl	0xc(%rbp), %r15d
    00003660: 	imull	%edx, %r14d
    00003664: 	imull	%esi, %r15d
    00003668: 	addl	%r14d, %r15d
    0000366b: 	movl	0xc(%r12), %r14d
    00003670: 	imull	%edi, %r14d
    00003674: 	addl	%r15d, %r14d
    00003677: 	movl	0xc(%r13), %r15d
    0000367b: 	imull	%r8d, %r15d
    0000367f: 	addl	%r15d, %r14d
    00003682: 	addl	%r14d, 0xc(%rax)
    00003686: 	addq	$0x10, %rax
    0000368a: 	addq	$0x10, %rbx
    0000368e: 	addq	$0x10, %rbp
    00003692: 	addq	$0x10, %r12
    00003696: 	addq	$0x10, %r13
    0000369a: 	cmpq	0x18(%rsp), %rax
    0000369f: 	jne	.Ltmp885 # Offset: 13983
    000036a5: 	movq	0x60(%rsp), %rdx
    000036aa: 	jmp	.Ltmp886 # Offset: 13994
.Ltmp765:
    000036af: 	xorl	%edx, %edx
    000036b1: 	jmp	.Ltmp887 # Offset: 14001
.Ltmp775:
    000036b6: 	xorl	%eax, %eax
    000036b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp888:
    000036c0: 	movl	(%rcx,%rax,4), %r8d
    000036c4: 	imull	%edi, %r8d
    000036c8: 	addl	%r8d, (%rdx,%rax,4)
    000036cc: 	addq	$0x1, %rax
    000036d0: 	cmpq	$0xc8, %rax
    000036d6: 	jne	.Ltmp888 # Offset: 14038
    000036d8: 	addq	$0x4, %rsi
    000036dc: 	addq	$0x320, %rcx
    000036e3: 	cmpq	%rsi, %r9
    000036e6: 	jne	.Ltmp777 # Offset: 14054
    000036ec: 	jmp	.Ltmp889 # Offset: 14060
.Ltmp785:
    000036f1: 	xorl	%ecx, %ecx
    000036f3: 	jmp	.Ltmp890 # Offset: 14067
    000036f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp795:
    00003700: 	movq	(%rsp), %rax
    00003704: 	xorl	%r8d, %r8d
    00003707: 	xorl	%edi, %edi
    00003709: 	xorl	%esi, %esi
    0000370b: 	xorl	%edx, %edx
    0000370d: 	jmp	.Ltmp891 # Offset: 14093
    00003712: 	nopw	(%rax,%rax) # Size: 6
.Ltmp808:
    00003718: 	movl	$0x0, 0x8(%rsp)
    00003720: 	xorl	%r14d, %r14d
    00003723: 	xorl	%r12d, %r12d
    00003726: 	movl	$0x0, (%rsp)
    0000372d: 	jmp	.Ltmp892 # Offset: 14125
    00003732: 	nopw	(%rax,%rax) # Size: 6
.Ltmp822:
    00003738: 	movq	(%rsp), %rax
    0000373c: 	xorl	%r8d, %r8d
    0000373f: 	xorl	%edi, %edi
    00003741: 	xorl	%esi, %esi
    00003743: 	xorl	%edx, %edx
    00003745: 	jmp	.Ltmp893 # Offset: 14149
    0000374a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp836:
    00003750: 	movq	%rbp, 0x68(%rsp)
    00003755: 	movq	0x38(%rsp), %rax
    0000375a: 	movq	%rcx, %r9
    0000375d: 	xorl	%r10d, %r10d
    00003760: 	movq	0x8(%rsp), %r13
    00003765: 	movq	(%rsp), %rbp
    00003769: 	xorl	%esi, %esi
    0000376b: 	xorl	%r8d, %r8d
    0000376e: 	xorl	%ecx, %ecx
.Ltmp894:
    00003770: 	movl	(%r13), %ebx
    00003774: 	movl	0x4(%r13), %edx
    00003778: 	movl	(%rax), %r14d
    0000377b: 	movl	0x320(%rax), %r15d
    00003782: 	movl	0x8(%r13), %r11d
    00003786: 	movl	0xc(%r13), %edi
    0000378a: 	imull	%ebx, %r14d
    0000378e: 	imull	%edx, %r15d
    00003792: 	addl	%r14d, %r15d
    00003795: 	movl	0x640(%rax), %r14d
    0000379c: 	imull	%r11d, %r14d
    000037a0: 	addl	%r15d, %r14d
    000037a3: 	movl	0x960(%rax), %r15d
    000037aa: 	imull	%edi, %r15d
    000037ae: 	addl	%r15d, %r14d
    000037b1: 	movl	0x324(%rax), %r15d
    000037b8: 	addl	%r14d, %ecx
    000037bb: 	movl	0x4(%rax), %r14d
    000037bf: 	imull	%edx, %r15d
    000037c3: 	imull	%ebx, %r14d
    000037c7: 	addl	%r14d, %r15d
    000037ca: 	movl	0x644(%rax), %r14d
    000037d1: 	imull	%r11d, %r14d
    000037d5: 	addl	%r15d, %r14d
    000037d8: 	movl	0x964(%rax), %r15d
    000037df: 	imull	%edi, %r15d
    000037e3: 	addl	%r15d, %r14d
    000037e6: 	movl	0x328(%rax), %r15d
    000037ed: 	addl	%r14d, %r8d
    000037f0: 	movl	0x8(%rax), %r14d
    000037f4: 	imull	%edx, %r15d
    000037f8: 	imull	%ebx, %r14d
    000037fc: 	imull	0x32c(%rax), %edx
    00003803: 	imull	0xc(%rax), %ebx
    00003807: 	addl	%r14d, %r15d
    0000380a: 	movl	0x648(%rax), %r14d
    00003811: 	imull	%r11d, %r14d
    00003815: 	addl	%ebx, %edx
    00003817: 	imull	0x64c(%rax), %r11d
    0000381f: 	addl	%r15d, %r14d
    00003822: 	movl	0x968(%rax), %r15d
    00003829: 	addl	%edx, %r11d
    0000382c: 	imull	%edi, %r15d
    00003830: 	imull	0x96c(%rax), %edi
    00003837: 	addl	%r15d, %r14d
    0000383a: 	addl	%r11d, %edi
    0000383d: 	addl	%r14d, %esi
    00003840: 	addl	%edi, %r10d
    00003843: 	addq	$0x4, %r9
    00003847: 	addq	$0x10, %r13
    0000384b: 	addq	$0xc80, %rax
    00003851: 	cmpq	%rbp, %r9
    00003854: 	jb	.Ltmp894 # Offset: 14420
    0000385a: 	movq	0x68(%rsp), %rbp
    0000385f: 	jmp	.Ltmp895 # Offset: 14431
    00003864: 	nopl	(%rax) # Size: 4
.Ltmp835:
    00003868: 	movq	%rcx, %r9
    0000386b: 	xorl	%r10d, %r10d
    0000386e: 	xorl	%esi, %esi
    00003870: 	xorl	%r8d, %r8d
    00003873: 	xorl	%ecx, %ecx
    00003875: 	jmp	.Ltmp895 # Offset: 14453
    0000387a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp852:
    00003880: 	movl	(%rdi), %r14d
    00003883: 	addq	$0x10, %rdi
    00003887: 	imull	%edx, %r14d
    0000388b: 	addl	%r14d, (%rax)
    0000388e: 	movl	-0xc(%rdi), %r14d
    00003892: 	imull	%edx, %r14d
    00003896: 	addl	%r14d, 0x4(%rax)
    0000389a: 	movl	-0x8(%rdi), %r14d
    0000389e: 	imull	%edx, %r14d
    000038a2: 	addl	%r14d, 0x8(%rax)
    000038a6: 	movl	-0x4(%rdi), %r14d
    000038aa: 	imull	%edx, %r14d
    000038ae: 	addl	%r14d, 0xc(%rax)
    000038b2: 	addq	$0x10, %rax
    000038b6: 	cmpq	%r9, %rax
    000038b9: 	jne	.Ltmp852 # Offset: 14521
    000038bb: 	jmp	.Ltmp896 # Offset: 14523
.Ltmp861:
    000038c0: 	xorl	%edx, %edx
    000038c2: 	leaq	0x320(%rcx), %r13
    000038c9: 	leaq	0x640(%rcx), %r12
    000038d0: 	leaq	0x960(%rcx), %rbp
    000038d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp897:
    000038e0: 	movl	(%r13,%rdx,4), %esi
    000038e5: 	movl	(%rcx,%rdx,4), %r15d
    000038e9: 	imull	%r9d, %esi
    000038ed: 	imull	%r10d, %r15d
    000038f1: 	addl	%r15d, %esi
    000038f4: 	movl	(%r12,%rdx,4), %r15d
    000038f8: 	imull	%r8d, %r15d
    000038fc: 	addl	%r15d, %esi
    000038ff: 	movl	(%rbp,%rdx,4), %r15d
    00003904: 	imull	%edi, %r15d
    00003908: 	addl	%r15d, %esi
    0000390b: 	addl	%esi, (%rax,%rdx,4)
    0000390e: 	addq	$0x1, %rdx
    00003912: 	cmpq	$0xc8, %rdx
    00003919: 	jne	.Ltmp897 # Offset: 14617
    0000391b: 	jmp	.Ltmp898 # Offset: 14619
.Ltmp865:
    00003920: 	xorl	%edx, %edx
.Ltmp899:
    00003922: 	movl	(%rcx,%rdx,4), %r8d
    00003926: 	imull	%edi, %r8d
    0000392a: 	addl	%r8d, (%rax,%rdx,4)
    0000392e: 	addq	$0x1, %rdx
    00003932: 	cmpq	$0xc8, %rdx
    00003939: 	jne	.Ltmp899 # Offset: 14649
    0000393b: 	addq	$0x4, %rsi
    0000393f: 	addq	$0x320, %rcx
    00003946: 	cmpq	%r9, %rsi
    00003949: 	jne	.Ltmp867 # Offset: 14665
    0000394f: 	jmp	.Ltmp864 # Offset: 14671
.Ltmp686:
    00003954: 	leaq	DATAat0x2d588(%rip), %rsi
    0000395b: 	movl	$0x1, %edi
    00003960: 	xorl	%eax, %eax
    00003962: 	callq	__printf_chk@PLT # Offset: 14690
    00003967: 	jmp	.Ltmp900 # Offset: 14695
.Ltmp873:
    0000396c: 	movq	0x3aaa8(%rsp), %rax
    00003974: 	subq	%fs:0x28, %rax
    0000397d: 	jne	.Ltmp876 # Offset: 14717
    00003983: 	addq	$0x3aab8, %rsp
    0000398a: 	leaq	DATAat0x2d148(%rip), %rsi
    00003991: 	movl	$0x1, %edi
    00003996: 	xorl	%eax, %eax
    00003998: 	popq	%rbx
    00003999: 	popq	%rbp
    0000399a: 	popq	%r12
    0000399c: 	popq	%r13
    0000399e: 	popq	%r14
    000039a0: 	popq	%r15
    000039a2: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 14754
.Ltmp870:
    000039a7: 	leaq	DATAat0x2d180(%rip), %rsi
    000039ae: 	movl	$0x1, %edi
    000039b3: 	xorl	%eax, %eax
    000039b5: 	callq	__printf_chk@PLT # Offset: 14773
    000039ba: 	jmp	.Ltmp901 # Offset: 14778
.Ltmp857:
    000039bf: 	leaq	DATAat0x2d1b8(%rip), %rsi
    000039c6: 	movl	$0x1, %edi
    000039cb: 	xorl	%eax, %eax
    000039cd: 	callq	__printf_chk@PLT # Offset: 14797
    000039d2: 	jmp	.Ltmp902 # Offset: 14802
.Ltmp847:
    000039d7: 	leaq	DATAat0x2d1f0(%rip), %rsi
    000039de: 	movl	$0x1, %edi
    000039e3: 	xorl	%eax, %eax
    000039e5: 	callq	__printf_chk@PLT # Offset: 14821
    000039ea: 	jmp	.Ltmp903 # Offset: 14826
.Ltmp844:
    000039ef: 	leaq	DATAat0x2d228(%rip), %rsi
    000039f6: 	movl	$0x1, %edi
    000039fb: 	xorl	%eax, %eax
    000039fd: 	callq	__printf_chk@PLT # Offset: 14845
    00003a02: 	jmp	.Ltmp904 # Offset: 14850
.Ltmp831:
    00003a07: 	leaq	DATAat0x2d260(%rip), %rsi
    00003a0e: 	movl	$0x1, %edi
    00003a13: 	xorl	%eax, %eax
    00003a15: 	callq	__printf_chk@PLT # Offset: 14869
    00003a1a: 	jmp	.Ltmp905 # Offset: 14874
.Ltmp818:
    00003a1f: 	leaq	DATAat0x2d298(%rip), %rsi
    00003a26: 	movl	$0x1, %edi
    00003a2b: 	xorl	%eax, %eax
    00003a2d: 	callq	__printf_chk@PLT # Offset: 14893
    00003a32: 	jmp	.Ltmp906 # Offset: 14898
.Ltmp815:
    00003a37: 	leaq	DATAat0x2d2d0(%rip), %rsi
    00003a3e: 	movl	$0x1, %edi
    00003a43: 	xorl	%eax, %eax
    00003a45: 	callq	__printf_chk@PLT # Offset: 14917
    00003a4a: 	jmp	.Ltmp907 # Offset: 14922
.Ltmp804:
    00003a4f: 	leaq	DATAat0x2d308(%rip), %rsi
    00003a56: 	movl	$0x1, %edi
    00003a5b: 	xorl	%eax, %eax
    00003a5d: 	callq	__printf_chk@PLT # Offset: 14941
    00003a62: 	jmp	.Ltmp908 # Offset: 14946
.Ltmp791:
    00003a67: 	leaq	DATAat0x2d340(%rip), %rsi
    00003a6e: 	movl	$0x1, %edi
    00003a73: 	xorl	%eax, %eax
    00003a75: 	callq	__printf_chk@PLT # Offset: 14965
    00003a7a: 	jmp	.Ltmp909 # Offset: 14970
.Ltmp780:
    00003a7f: 	leaq	DATAat0x2d368(%rip), %rsi
    00003a86: 	movl	$0x1, %edi
    00003a8b: 	xorl	%eax, %eax
    00003a8d: 	callq	__printf_chk@PLT # Offset: 14989
    00003a92: 	jmp	.Ltmp910 # Offset: 14994
.Ltmp771:
    00003a97: 	leaq	DATAat0x2d390(%rip), %rsi
    00003a9e: 	movl	$0x1, %edi
    00003aa3: 	xorl	%eax, %eax
    00003aa5: 	callq	__printf_chk@PLT # Offset: 15013
    00003aaa: 	jmp	.Ltmp911 # Offset: 15018
.Ltmp760:
    00003aaf: 	leaq	DATAat0x2d3b8(%rip), %rsi
    00003ab6: 	movl	$0x1, %edi
    00003abb: 	xorl	%eax, %eax
    00003abd: 	callq	__printf_chk@PLT # Offset: 15037
    00003ac2: 	jmp	.Ltmp912 # Offset: 15042
.Ltmp752:
    00003ac7: 	leaq	DATAat0x2d3e8(%rip), %rsi
    00003ace: 	movl	$0x1, %edi
    00003ad3: 	xorl	%eax, %eax
    00003ad5: 	callq	__printf_chk@PLT # Offset: 15061
    00003ada: 	jmp	.Ltmp913 # Offset: 15066
.Ltmp749:
    00003adf: 	leaq	DATAat0x2d418(%rip), %rsi
    00003ae6: 	movl	$0x1, %edi
    00003aeb: 	xorl	%eax, %eax
    00003aed: 	callq	__printf_chk@PLT # Offset: 15085
    00003af2: 	jmp	.Ltmp914 # Offset: 15090
.Ltmp743:
    00003af7: 	leaq	DATAat0x2d440(%rip), %rsi
    00003afe: 	movl	$0x1, %edi
    00003b03: 	xorl	%eax, %eax
    00003b05: 	callq	__printf_chk@PLT # Offset: 15109
    00003b0a: 	jmp	.Ltmp915 # Offset: 15114
.Ltmp737:
    00003b0f: 	leaq	DATAat0x2d468(%rip), %rsi
    00003b16: 	movl	$0x1, %edi
    00003b1b: 	xorl	%eax, %eax
    00003b1d: 	callq	__printf_chk@PLT # Offset: 15133
    00003b22: 	jmp	.Ltmp916 # Offset: 15138
.Ltmp731:
    00003b27: 	leaq	DATAat0x2d490(%rip), %rsi
    00003b2e: 	movl	$0x1, %edi
    00003b33: 	xorl	%eax, %eax
    00003b35: 	callq	__printf_chk@PLT # Offset: 15157
    00003b3a: 	jmp	.Ltmp917 # Offset: 15162
.Ltmp724:
    00003b3f: 	leaq	DATAat0x2d4b8(%rip), %rsi
    00003b46: 	movl	$0x1, %edi
    00003b4b: 	xorl	%eax, %eax
    00003b4d: 	callq	__printf_chk@PLT # Offset: 15181
    00003b52: 	jmp	.Ltmp918 # Offset: 15186
.Ltmp717:
    00003b57: 	leaq	DATAat0x2d4e0(%rip), %rsi
    00003b5e: 	movl	$0x1, %edi
    00003b63: 	xorl	%eax, %eax
    00003b65: 	callq	__printf_chk@PLT # Offset: 15205
    00003b6a: 	jmp	.Ltmp919 # Offset: 15210
.Ltmp711:
    00003b6f: 	leaq	DATAat0x2d508(%rip), %rsi
    00003b76: 	movl	$0x1, %edi
    00003b7b: 	xorl	%eax, %eax
    00003b7d: 	callq	__printf_chk@PLT # Offset: 15229
    00003b82: 	jmp	.Ltmp920 # Offset: 15234
.Ltmp705:
    00003b87: 	leaq	DATAat0x2d528(%rip), %rsi
    00003b8e: 	movl	$0x1, %edi
    00003b93: 	xorl	%eax, %eax
    00003b95: 	callq	__printf_chk@PLT # Offset: 15253
    00003b9a: 	jmp	.Ltmp921 # Offset: 15258
.Ltmp699:
    00003b9f: 	leaq	DATAat0x2d548(%rip), %rsi
    00003ba6: 	movl	$0x1, %edi
    00003bab: 	xorl	%eax, %eax
    00003bad: 	callq	__printf_chk@PLT # Offset: 15277
    00003bb2: 	jmp	.Ltmp922 # Offset: 15282
.Ltmp693:
    00003bb7: 	leaq	DATAat0x2d568(%rip), %rsi
    00003bbe: 	movl	$0x1, %edi
    00003bc3: 	xorl	%eax, %eax
    00003bc5: 	callq	__printf_chk@PLT # Offset: 15301
    00003bca: 	jmp	.Ltmp923 # Offset: 15306
.Ltmp876:
    00003bcf: 	callq	__stack_chk_fail@PLT # Offset: 15311
DWARF CFI Instructions:
    <empty>
End of Function "_Z13verify_matmulIiEvPT_S1_S1_mm.constprop.0/1(*2)"

Binary Function "_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_" after disassembly {
  Number      : 72
  State       : disassembled
  Address     : 0x1b670
  Size        : 0x145
  MaxSize     : 0x150
  Offset      : 0x1b670
  Section     : .text
  Orc Section : .local.text._ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB071:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	movq	%rdi, %r12
    0000000d: 	pushq	%rbp
    0000000e: 	movq	%rdx, %rbp
    00000011: 	pushq	%rbx
    00000012: 	leaq	0x10(%rdi), %rbx
    00000016: 	subq	$0x10, %rsp
    0000001a: 	movq	0x8(%rsi), %r13
    0000001e: 	movq	%fs:0x28, %rax
    00000027: 	movq	%rax, 0x8(%rsp)
    0000002c: 	xorl	%eax, %eax
    0000002e: 	movq	%rbx, (%rdi)
    00000031: 	movq	(%rsi), %r14
    00000034: 	movq	%r14, %rax
    00000037: 	addq	%r13, %rax
    0000003a: 	je	.Ltmp924 # Offset: 58
    0000003c: 	testq	%r14, %r14
    0000003f: 	je	.Ltmp925 # Offset: 63
.Ltmp924:
    00000045: 	movq	%r13, (%rsp)
    00000049: 	cmpq	$0xf, %r13
    0000004d: 	ja	.Ltmp926 # Offset: 77
    0000004f: 	cmpq	$0x1, %r13
    00000053: 	jne	.Ltmp927 # Offset: 83
    00000055: 	movzbl	(%r14), %eax
    00000059: 	movb	%al, 0x10(%r12)
    0000005e: 	movq	%rbx, %rax
.Ltmp931:
    00000061: 	movq	%r13, 0x8(%r12)
    00000066: 	movq	%rbp, %rdi
    00000069: 	movb	$0x0, (%rax,%r13)
    0000006e: 	callq	strlen@PLT # Offset: 110
    00000073: 	movq	%rax, %rdx
    00000076: 	movabsq	$0x3fffffffffffffff, %rax
    00000080: 	subq	0x8(%r12), %rax
    00000085: 	cmpq	%rax, %rdx
    00000088: 	ja	.Ltmp928 # Offset: 136
    0000008a: 	movq	%rbp, %rsi
    0000008d: 	movq	%r12, %rdi
    00000090: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 144
    00000095: 	movq	0x8(%rsp), %rax
    0000009a: 	subq	%fs:0x28, %rax
    000000a3: 	jne	.Ltmp929 # Offset: 163
    000000a5: 	addq	$0x10, %rsp
    000000a9: 	movq	%r12, %rax
    000000ac: 	popq	%rbx
    000000ad: 	popq	%rbp
    000000ae: 	popq	%r12
    000000b0: 	popq	%r13
    000000b2: 	popq	%r14
    000000b4: 	retq # Offset: 180
    000000b5: 	nopl	(%rax) # Size: 3
.Ltmp927:
    000000b8: 	testq	%r13, %r13
    000000bb: 	jne	.Ltmp930 # Offset: 187
    000000bd: 	movq	%rbx, %rax
    000000c0: 	jmp	.Ltmp931 # Offset: 192
    000000c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp926:
    000000c8: 	movq	%r12, %rdi
    000000cb: 	movq	%rsp, %rsi
    000000ce: 	xorl	%edx, %edx
    000000d0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 208
    000000d5: 	movq	%rax, (%r12)
    000000d9: 	movq	%rax, %rdi
    000000dc: 	movq	(%rsp), %rax
    000000e0: 	movq	%rax, 0x10(%r12)
.Ltmp932:
    000000e5: 	movq	%r13, %rdx
    000000e8: 	movq	%r14, %rsi
    000000eb: 	callq	memcpy@PLT # Offset: 235
    000000f0: 	movq	(%rsp), %r13
    000000f4: 	movq	(%r12), %rax
    000000f8: 	jmp	.Ltmp931 # Offset: 248
.Ltmp925:
    000000fd: 	leaq	DATAat0x2d008(%rip), %rdi
    00000104: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 260
.Ltmp928:
    00000109: 	leaq	DATAat0x2d5ea(%rip), %rdi
    00000110: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 272
.Ltmp929:
    00000115: 	callq	__stack_chk_fail@PLT # Offset: 277
.Ltmp930:
    0000011a: 	movq	%rbx, %rdi
    0000011d: 	jmp	.Ltmp932 # Offset: 285
    0000011f: 	endbr64
    00000123: 	movq	%rax, %rbp
    00000126: 	movq	(%r12), %rdi
    0000012a: 	cmpq	%rdi, %rbx
    0000012d: 	je	.Ltmp933 # Offset: 301
    0000012f: 	movq	0x10(%r12), %rsi
    00000134: 	addq	$0x1, %rsi
    00000138: 	callq	_ZdlPvm@PLT # Offset: 312
.Ltmp933:
    0000013d: 	movq	%rbp, %rdi
    00000140: 	callq	_Unwind_Resume@PLT # Offset: 320
DWARF CFI Instructions:
    <empty>
End of Function "_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_"

Binary Function "_Z13verify_matmulIfEvPT_S1_S1_mm" after disassembly {
  Number      : 73
  State       : disassembled
  Address     : 0x1b7c0
  Size        : 0x40c1
  MaxSize     : 0x40d0
  Offset      : 0x1b7c0
  Section     : .text
  Orc Section : .local.text._Z13verify_matmulIfEvPT_S1_S1_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB072:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0x3a000(%rsp), %r11
.Ltmp934:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp934 # Offset: 37
    00000027: 	subq	$0xb18, %rsp
    0000002e: 	movq	%rdi, 0x38(%rsp)
    00000033: 	movq	%rsi, %r15
    00000036: 	movq	%r8, %r14
    00000039: 	movq	%rdx, 0x30(%rsp)
    0000003e: 	movq	%rcx, 0x80(%rsp)
    00000046: 	movq	%fs:0x28, %rax
    0000004f: 	movq	%rax, 0x3ab08(%rsp)
    00000057: 	xorl	%eax, %eax
    00000059: 	testq	%rcx, %rcx
    0000005c: 	je	.Ltmp935 # Offset: 92
    00000062: 	testq	%r8, %r8
    00000065: 	je	.Ltmp936 # Offset: 101
    0000006b: 	leaq	0x180(%rsp), %rcx
    00000073: 	leaq	(,%r8,4), %rbp
    0000007b: 	xorl	%ebx, %ebx
    0000007d: 	movq	%rcx, 0x100(%rsp)
.Ltmp937:
    00000085: 	movq	%rcx, %rdi
    00000088: 	movq	%rbp, %rdx
    0000008b: 	xorl	%esi, %esi
    0000008d: 	addq	$0x1, %rbx
    00000091: 	callq	memset@PLT # Offset: 145
    00000096: 	movq	%rax, %rcx
    00000099: 	addq	%rbp, %rcx
    0000009c: 	cmpq	%rbx, 0x80(%rsp)
    000000a4: 	jne	.Ltmp937 # Offset: 164
    000000a6: 	leaq	-0x1(%r14), %rax
    000000aa: 	movq	%r14, %rdi
    000000ad: 	movq	%r14, %r8
    000000b0: 	movq	0x38(%rsp), %rsi
    000000b5: 	movq	%rax, 0x20(%rsp)
    000000ba: 	shrq	$0x2, %rdi
    000000be: 	andq	$-0x4, %r8
    000000c2: 	xorl	%ecx, %ecx
    000000c4: 	leaq	(,%r14,4), %r9
    000000cc: 	shlq	$0x4, %rdi
    000000d0: 	xorl	%edx, %edx
.Ltmp942:
    000000d2: 	testq	%rdx, %rdx
    000000d5: 	js	.Ltmp938 # Offset: 213
    000000db: 	pxor	%xmm0, %xmm0
    000000df: 	cmpq	$0x2, 0x20(%rsp)
    000000e5: 	cvtsi2ss	%rdx, %xmm0
    000000ea: 	jbe	.Ltmp939 # Offset: 234
.Ltmp1000:
    000000f0: 	movaps	%xmm0, %xmm1
    000000f3: 	leaq	(%rdi,%rsi), %r10
    000000f7: 	movq	%rsi, %rax
    000000fa: 	shufps	$0x0, %xmm1, %xmm1
.Ltmp940:
    000000fe: 	movups	%xmm1, (%rax)
    00000101: 	addq	$0x10, %rax
    00000105: 	cmpq	%r10, %rax
    00000108: 	jne	.Ltmp940 # Offset: 264
    0000010a: 	movq	%r8, %rax
    0000010d: 	cmpq	%r8, %r14
    00000110: 	je	.Ltmp941 # Offset: 272
.Ltmp1001:
    00000112: 	movq	0x38(%rsp), %rbx
    00000117: 	leaq	(%rax,%rcx), %r10
    0000011b: 	movss	%xmm0, (%rbx,%r10,4)
    00000121: 	leaq	0x1(%rax), %r10
    00000125: 	cmpq	%r10, %r14
    00000128: 	jbe	.Ltmp941 # Offset: 296
    0000012a: 	addq	%rcx, %r10
    0000012d: 	addq	$0x2, %rax
    00000131: 	movss	%xmm0, (%rbx,%r10,4)
    00000137: 	cmpq	%rax, %r14
    0000013a: 	jbe	.Ltmp941 # Offset: 314
    0000013c: 	addq	%rcx, %rax
    0000013f: 	movss	%xmm0, (%rbx,%rax,4)
.Ltmp941:
    00000144: 	addq	$0x1, %rdx
    00000148: 	addq	%r14, %rcx
    0000014b: 	addq	%r9, %rsi
    0000014e: 	cmpq	%rdx, 0x80(%rsp)
    00000156: 	jne	.Ltmp942 # Offset: 342
    0000015c: 	movq	0x80(%rsp), %rdi
    00000164: 	movq	%r15, %rsi
    00000167: 	xorl	%ecx, %ecx
    00000169: 	xorl	%edx, %edx
    0000016b: 	movq	%rdi, %rax
    0000016e: 	leaq	(,%rdi,4), %r10
    00000176: 	leaq	-0x1(%rdi), %r9
    0000017a: 	andq	$-0x4, %rdi
    0000017e: 	shrq	$0x2, %rax
    00000182: 	movq	%rdi, %r8
    00000185: 	shlq	$0x4, %rax
    00000189: 	movq	%rax, %r11
.Ltmp947:
    0000018c: 	testq	%rdx, %rdx
    0000018f: 	js	.Ltmp943 # Offset: 399
    00000195: 	pxor	%xmm0, %xmm0
    00000199: 	cvtsi2ss	%rdx, %xmm0
    0000019e: 	cmpq	$0x2, %r9
    000001a2: 	jbe	.Ltmp944 # Offset: 418
.Ltmp1002:
    000001a8: 	movaps	%xmm0, %xmm1
    000001ab: 	leaq	(%r11,%rsi), %rdi
    000001af: 	movq	%rsi, %rax
    000001b2: 	shufps	$0x0, %xmm1, %xmm1
.Ltmp945:
    000001b6: 	movups	%xmm1, (%rax)
    000001b9: 	addq	$0x10, %rax
    000001bd: 	cmpq	%rdi, %rax
    000001c0: 	jne	.Ltmp945 # Offset: 448
    000001c2: 	movq	%r8, %rax
    000001c5: 	cmpq	%r8, 0x80(%rsp)
    000001cd: 	je	.Ltmp946 # Offset: 461
.Ltmp1003:
    000001cf: 	leaq	(%rax,%rcx), %rdi
    000001d3: 	movq	0x80(%rsp), %rbx
    000001db: 	movss	%xmm0, (%r15,%rdi,4)
    000001e1: 	leaq	0x1(%rax), %rdi
    000001e5: 	cmpq	%rdi, %rbx
    000001e8: 	jbe	.Ltmp946 # Offset: 488
    000001ea: 	addq	%rcx, %rdi
    000001ed: 	addq	$0x2, %rax
    000001f1: 	movss	%xmm0, (%r15,%rdi,4)
    000001f7: 	cmpq	%rax, %rbx
    000001fa: 	jbe	.Ltmp946 # Offset: 506
    000001fc: 	addq	%rcx, %rax
    000001ff: 	movss	%xmm0, (%r15,%rax,4)
.Ltmp946:
    00000205: 	addq	$0x1, %rdx
    00000209: 	addq	0x80(%rsp), %rcx
    00000211: 	addq	%r10, %rsi
    00000214: 	cmpq	%rdx, %r14
    00000217: 	jne	.Ltmp947 # Offset: 535
    0000021d: 	movq	0x38(%rsp), %r10
    00000222: 	leaq	(,%r14,4), %rsi
    0000022a: 	movq	%r15, %r9
    0000022d: 	xorl	%r8d, %r8d
.Ltmp1005:
    00000230: 	movq	0x100(%rsp), %r11
    00000238: 	movq	0x80(%rsp), %rbx
    00000240: 	xorl	%edi, %edi
.Ltmp950:
    00000242: 	movss	(%r9,%rdi,4), %xmm1
    00000248: 	movq	%r10, %rcx
    0000024b: 	movq	%r11, %rax
    0000024e: 	xorl	%edx, %edx
.Ltmp948:
    00000250: 	movss	(%rcx), %xmm0
    00000254: 	addq	$0x1, %rdx
    00000258: 	addq	%rsi, %rcx
    0000025b: 	mulss	%xmm1, %xmm0
    0000025f: 	addss	(%rax), %xmm0
    00000263: 	movss	%xmm0, (%rax)
    00000267: 	addq	%rsi, %rax
    0000026a: 	cmpq	%rdx, %rbx
    0000026d: 	jne	.Ltmp948 # Offset: 621
    0000026f: 	leaq	0x1(%rdi), %rax
    00000273: 	addq	$0x4, %r11
    00000277: 	cmpq	%rax, %r14
    0000027a: 	je	.Ltmp949 # Offset: 634
    00000280: 	movq	%rax, %rdi
    00000283: 	jmp	.Ltmp950 # Offset: 643
.Ltmp1004:
    00000285: 	movq	0x30(%rsp), %rcx
    0000028a: 	leaq	(,%r14,4), %rbp
    00000292: 	xorl	%ebx, %ebx
.Ltmp951:
    00000294: 	movq	%rcx, %rdi
    00000297: 	movq	%rbp, %rdx
    0000029a: 	xorl	%esi, %esi
    0000029c: 	addq	$0x1, %rbx
    000002a0: 	callq	memset@PLT # Offset: 672
    000002a5: 	movq	%rax, %rcx
    000002a8: 	addq	%rbp, %rcx
    000002ab: 	cmpq	%rbx, 0x80(%rsp)
    000002b3: 	jne	.Ltmp951 # Offset: 691
    000002b5: 	testq	%r14, %r14
    000002b8: 	je	.Ltmp936 # Offset: 696
    000002be: 	movq	0x38(%rsp), %rax
    000002c3: 	leaq	0x4(%r15), %r13
    000002c7: 	movq	%r15, %rdi
    000002ca: 	xorl	%esi, %esi
    000002cc: 	leaq	(,%r14,4), %r9
    000002d4: 	xorl	%ebx, %ebx
    000002d6: 	movq	%rax, 0x18(%rsp)
    000002db: 	movq	0x30(%rsp), %rax
    000002e0: 	addq	%r9, %rax
    000002e3: 	movq	%rax, 0x40(%rsp)
    000002e8: 	movq	%r14, %rax
    000002eb: 	shrq	$0x2, %rax
    000002ef: 	shlq	$0x4, %rax
    000002f3: 	movq	%rax, %rbp
    000002f6: 	movq	%r14, %rax
    000002f9: 	andq	$-0x4, %rax
    000002fd: 	movq	%rax, 0x10(%rsp)
    00000302: 	movq	%r14, %rax
    00000305: 	andl	$0x3, %eax
    00000308: 	movq	%rax, 0x50(%rsp)
.Ltmp958:
    0000030d: 	leaq	(%r15,%rsi,4), %rax
    00000311: 	movq	0x30(%rsp), %r11
    00000316: 	movq	%rbx, 0x58(%rsp)
    0000031b: 	xorl	%r8d, %r8d
    0000031e: 	movq	0x40(%rsp), %r12
    00000323: 	movq	0x18(%rsp), %rcx
    00000328: 	movq	%rax, 0x48(%rsp)
    0000032d: 	movq	$0x0, 0x8(%rsp)
    00000336: 	movq	%r11, %rdx
.Ltmp957:
    00000339: 	leaq	0x4(%rcx), %rax
    0000033d: 	cmpq	%rax, %rdx
    00000340: 	setae	%al
    00000343: 	cmpq	%r12, %rcx
    00000346: 	setae	%r10b
    0000034a: 	orl	%r10d, %eax
    0000034d: 	movq	%rdx, %r10
    00000350: 	subq	%r13, %r10
    00000353: 	cmpq	$0x8, %r10
    00000357: 	seta	%r10b
    0000035b: 	testb	%r10b, %al
    0000035e: 	je	.Ltmp952 # Offset: 862
    00000364: 	cmpq	$0x1, %r14
    00000368: 	je	.Ltmp952 # Offset: 872
    0000036e: 	cmpq	$0x2, 0x20(%rsp)
    00000374: 	jbe	.Ltmp953 # Offset: 884
    0000037a: 	movss	(%rcx), %xmm1
    0000037e: 	xorl	%eax, %eax
    00000380: 	shufps	$0x0, %xmm1, %xmm1
.Ltmp954:
    00000384: 	movups	(%rdi,%rax), %xmm0
    00000388: 	movups	(%rdx,%rax), %xmm7
    0000038c: 	mulps	%xmm1, %xmm0
    0000038f: 	addps	%xmm7, %xmm0
    00000392: 	movups	%xmm0, (%rdx,%rax)
    00000396: 	addq	$0x10, %rax
    0000039a: 	cmpq	%rbp, %rax
    0000039d: 	jne	.Ltmp954 # Offset: 925
    0000039f: 	movq	0x10(%rsp), %rax
    000003a4: 	cmpq	%rax, %r14
    000003a7: 	je	.Ltmp955 # Offset: 935
    000003a9: 	movq	0x50(%rsp), %r10
    000003ae: 	movq	%r10, %rbx
    000003b1: 	cmpq	$0x1, %r10
    000003b5: 	je	.Ltmp956 # Offset: 949
.Ltmp1007:
    000003b7: 	leaq	(%rax,%r8), %r10
    000003bb: 	movss	(%rcx), %xmm1
    000003bf: 	leaq	(%r11,%r10,4), %r10
    000003c3: 	movq	%r10, 0x28(%rsp)
    000003c8: 	leaq	(%rax,%rsi), %r10
    000003cc: 	shufps	$0xe0, %xmm1, %xmm1
    000003d0: 	movq	(%r15,%r10,4), %xmm0
    000003d6: 	movq	0x28(%rsp), %r10
    000003db: 	mulps	%xmm1, %xmm0
    000003de: 	movq	(%r10), %xmm1
    000003e3: 	addps	%xmm1, %xmm0
    000003e6: 	movlps	%xmm0, (%r10)
    000003ea: 	movq	%rbx, %r10
    000003ed: 	andq	$-0x2, %r10
    000003f1: 	addq	%r10, %rax
    000003f4: 	cmpq	%r10, %rbx
    000003f7: 	je	.Ltmp955 # Offset: 1015
.Ltmp956:
    000003f9: 	leaq	(%rax,%r8), %r10
    000003fd: 	addq	%rsi, %rax
    00000400: 	movss	(%r15,%rax,4), %xmm0
    00000406: 	leaq	(%r11,%r10,4), %r10
    0000040a: 	mulss	(%rcx), %xmm0
    0000040e: 	addss	(%r10), %xmm0
    00000413: 	movss	%xmm0, (%r10)
.Ltmp955:
    00000418: 	addq	$0x1, 0x8(%rsp)
    0000041e: 	addq	%r9, %rdx
    00000421: 	addq	%r9, %rcx
    00000424: 	addq	%r9, %r12
    00000427: 	movq	0x8(%rsp), %rax
    0000042c: 	addq	%r14, %r8
    0000042f: 	cmpq	%rax, 0x80(%rsp)
    00000437: 	jne	.Ltmp957 # Offset: 1079
    0000043d: 	movq	0x58(%rsp), %rbx
    00000442: 	addq	%r9, %rdi
    00000445: 	addq	%r14, %rsi
    00000448: 	addq	%r9, %r13
    0000044b: 	addq	$0x4, 0x18(%rsp)
    00000451: 	addq	$0x1, %rbx
    00000455: 	cmpq	%rbx, %r14
    00000458: 	jne	.Ltmp958 # Offset: 1112
.Ltmp936:
    0000045e: 	cmpq	$0x0, 0x80(%rsp)
    00000467: 	je	.Ltmp935 # Offset: 1127
    0000046d: 	movq	0x30(%rsp), %rsi
    00000472: 	leaq	0x180(%rsp), %rcx
    0000047a: 	movq	DATAat0x2d9e0(%rip), %xmm4
    00000482: 	leaq	(,%r14,4), %rbx
    0000048a: 	movq	%rcx, 0x8(%rsp)
    0000048f: 	movsd	DATAat0x2da10(%rip), %xmm3
    00000497: 	xorl	%edx, %edx
    00000499: 	movss	DATAat0x2d9d0(%rip), %xmm5
    000004a1: 	movq	%rcx, 0x100(%rsp)
    000004a9: 	movq	%rsi, 0x10(%rsp)
.Ltmp997:
    000004ae: 	xorl	%eax, %eax
    000004b0: 	testq	%r14, %r14
    000004b3: 	jne	.Ltmp959 # Offset: 1203
    000004b5: 	jmp	.Ltmp960 # Offset: 1205
    000004ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp962:
    000004c0: 	addq	$0x1, %rax
    000004c4: 	cmpq	%rax, %r14
    000004c7: 	je	.Ltmp960 # Offset: 1223
.Ltmp959:
    000004cd: 	movss	(%rcx,%rax,4), %xmm1
    000004d2: 	movaps	%xmm1, %xmm2
    000004d5: 	movaps	%xmm1, %xmm0
    000004d8: 	subss	(%rsi,%rax,4), %xmm0
    000004dd: 	andps	%xmm5, %xmm2
    000004e0: 	cvtss2sd	%xmm2, %xmm2
    000004e4: 	comisd	DATAat0x2da08(%rip), %xmm2
    000004ec: 	jbe	.Ltmp961 # Offset: 1260
    000004ee: 	divss	%xmm1, %xmm0
.Ltmp961:
    000004f2: 	cvtss2sd	%xmm0, %xmm0
    000004f6: 	andpd	%xmm4, %xmm0
    000004fa: 	comisd	%xmm0, %xmm3
    000004fe: 	ja	.Ltmp962 # Offset: 1278
    00000500: 	leaq	DATAat0x2d588(%rip), %rsi
    00000507: 	movl	$0x1, %edi
    0000050c: 	xorl	%eax, %eax
    0000050e: 	callq	__printf_chk@PLT # Offset: 1294
.Ltmp999:
    00000513: 	movq	0x30(%rsp), %rcx
    00000518: 	xorl	%ebp, %ebp
.Ltmp963:
    0000051a: 	movq	%rcx, %rdi
    0000051d: 	movq	%rbx, %rdx
    00000520: 	xorl	%esi, %esi
    00000522: 	addq	$0x1, %rbp
    00000526: 	callq	memset@PLT # Offset: 1318
    0000052b: 	movq	%rax, %rcx
    0000052e: 	addq	%rbx, %rcx
    00000531: 	cmpq	%rbp, 0x80(%rsp)
    00000539: 	jne	.Ltmp963 # Offset: 1337
    0000053b: 	movq	0x38(%rsp), %rax
    00000540: 	movq	0x30(%rsp), %rdx
    00000545: 	xorl	%edi, %edi
    00000547: 	xorl	%r10d, %r10d
    0000054a: 	addq	%rbx, %rax
    0000054d: 	leaq	(%rdx,%rbx), %r13
    00000551: 	movq	%rax, 0x20(%rsp)
    00000556: 	leaq	-0x1(%r14), %rax
    0000055a: 	movq	%rax, 0x40(%rsp)
    0000055f: 	movq	%r14, %rax
    00000562: 	shrq	$0x2, %rax
    00000566: 	shlq	$0x4, %rax
    0000056a: 	movq	%rax, %rbp
    0000056d: 	movq	%r14, %rax
    00000570: 	andq	$-0x4, %rax
    00000574: 	movq	%rax, 0x18(%rsp)
    00000579: 	movq	%r14, %rax
    0000057c: 	andl	$0x3, %eax
    0000057f: 	movq	%rax, 0x50(%rsp)
.Ltmp970:
    00000584: 	movq	0x38(%rsp), %rcx
    00000589: 	movq	0x30(%rsp), %r9
    0000058e: 	movq	%r10, 0x58(%rsp)
    00000593: 	xorl	%r11d, %r11d
    00000596: 	leaq	(,%rdi,4), %rax
    0000059e: 	leaq	(%rcx,%rax), %r12
    000005a2: 	addq	%r9, %rax
    000005a5: 	movq	%r15, %rcx
    000005a8: 	movq	%rax, 0x48(%rsp)
.Ltmp969:
    000005ad: 	movq	%r12, %rsi
    000005b0: 	addq	$0x4, %r12
    000005b4: 	cmpq	%r13, %rsi
    000005b7: 	setae	%r8b
    000005bb: 	cmpq	%r12, %rdx
    000005be: 	setae	%al
    000005c1: 	orl	%r8d, %eax
    000005c4: 	cmpq	$0x1, %r14
    000005c8: 	setne	%r8b
    000005cc: 	testb	%r8b, %al
    000005cf: 	je	.Ltmp964 # Offset: 1487
    000005d5: 	leaq	0x4(%rcx), %r8
    000005d9: 	movq	%rdx, %rax
    000005dc: 	subq	%r8, %rax
    000005df: 	cmpq	$0x8, %rax
    000005e3: 	jbe	.Ltmp964 # Offset: 1507
    000005e9: 	cmpq	$0x2, 0x40(%rsp)
    000005ef: 	jbe	.Ltmp965 # Offset: 1519
    000005f5: 	movss	(%rsi), %xmm1
    000005f9: 	xorl	%eax, %eax
    000005fb: 	shufps	$0x0, %xmm1, %xmm1
.Ltmp966:
    000005ff: 	movups	(%rcx,%rax), %xmm0
    00000603: 	movups	(%rdx,%rax), %xmm7
    00000607: 	mulps	%xmm1, %xmm0
    0000060a: 	addps	%xmm7, %xmm0
    0000060d: 	movups	%xmm0, (%rdx,%rax)
    00000611: 	addq	$0x10, %rax
    00000615: 	cmpq	%rax, %rbp
    00000618: 	jne	.Ltmp966 # Offset: 1560
    0000061a: 	movq	0x18(%rsp), %rax
    0000061f: 	cmpq	%rax, %r14
    00000622: 	je	.Ltmp967 # Offset: 1570
    00000624: 	movq	0x50(%rsp), %r8
    00000629: 	movq	%r8, %r10
    0000062c: 	cmpq	$0x1, %r8
    00000630: 	je	.Ltmp968 # Offset: 1584
.Ltmp1009:
    00000632: 	leaq	(%rax,%rdi), %r8
    00000636: 	movss	(%rsi), %xmm1
    0000063a: 	leaq	(%r9,%r8,4), %r8
    0000063e: 	movq	%r8, 0x28(%rsp)
    00000643: 	leaq	(%rax,%r11), %r8
    00000647: 	shufps	$0xe0, %xmm1, %xmm1
    0000064b: 	movq	(%r15,%r8,4), %xmm0
    00000651: 	movq	0x28(%rsp), %r8
    00000656: 	mulps	%xmm1, %xmm0
    00000659: 	movq	(%r8), %xmm1
    0000065e: 	addps	%xmm1, %xmm0
    00000661: 	movlps	%xmm0, (%r8)
    00000665: 	movq	%r10, %r8
    00000668: 	andq	$-0x2, %r8
    0000066c: 	addq	%r8, %rax
    0000066f: 	cmpq	%r10, %r8
    00000672: 	je	.Ltmp967 # Offset: 1650
.Ltmp968:
    00000674: 	leaq	(%rax,%rdi), %r8
    00000678: 	addq	%r11, %rax
    0000067b: 	movss	(%r15,%rax,4), %xmm0
    00000681: 	leaq	(%r9,%r8,4), %r8
    00000685: 	mulss	(%rsi), %xmm0
    00000689: 	addss	(%r8), %xmm0
    0000068e: 	movss	%xmm0, (%r8)
.Ltmp967:
    00000693: 	addq	%rbx, %rcx
    00000696: 	addq	%r14, %r11
    00000699: 	cmpq	0x20(%rsp), %r12
    0000069e: 	jne	.Ltmp969 # Offset: 1694
    000006a4: 	movq	0x58(%rsp), %r10
    000006a9: 	addq	%rbx, 0x20(%rsp)
    000006ae: 	addq	%rbx, %rdx
    000006b1: 	addq	%r14, %rdi
    000006b4: 	addq	%rbx, %r13
    000006b7: 	addq	$0x1, %r10
    000006bb: 	cmpq	%r10, 0x80(%rsp)
    000006c3: 	jne	.Ltmp970 # Offset: 1731
.Ltmp998:
    000006c9: 	movq	0x30(%rsp), %rsi
    000006ce: 	movq	0x100(%rsp), %rcx
    000006d6: 	xorl	%edx, %edx
    000006d8: 	movss	DATAat0x2d9d0(%rip), %xmm5
    000006e0: 	movq	DATAat0x2d9e0(%rip), %xmm4
    000006e8: 	movsd	DATAat0x2da10(%rip), %xmm3
.Ltmp1010:
    000006f0: 	xorl	%eax, %eax
    000006f2: 	testq	%r14, %r14
    000006f5: 	jne	.Ltmp971 # Offset: 1781
    000006f7: 	jmp	.Ltmp972 # Offset: 1783
    000006fc: 	nopl	(%rax) # Size: 4
.Ltmp974:
    00000700: 	addq	$0x1, %rax
    00000704: 	cmpq	%rax, %r14
    00000707: 	je	.Ltmp972 # Offset: 1799
.Ltmp971:
    0000070d: 	movss	(%rcx,%rax,4), %xmm1
    00000712: 	movaps	%xmm1, %xmm2
    00000715: 	movaps	%xmm1, %xmm0
    00000718: 	subss	(%rsi,%rax,4), %xmm0
    0000071d: 	andps	%xmm5, %xmm2
    00000720: 	cvtss2sd	%xmm2, %xmm2
    00000724: 	comisd	DATAat0x2da08(%rip), %xmm2
    0000072c: 	jbe	.Ltmp973 # Offset: 1836
    0000072e: 	divss	%xmm1, %xmm0
.Ltmp973:
    00000732: 	cvtss2sd	%xmm0, %xmm0
    00000736: 	andpd	%xmm4, %xmm0
    0000073a: 	comisd	%xmm0, %xmm3
    0000073e: 	ja	.Ltmp974 # Offset: 1854
    00000740: 	leaq	DATAat0x2d568(%rip), %rsi
    00000747: 	movl	$0x1, %edi
    0000074c: 	xorl	%eax, %eax
    0000074e: 	callq	__printf_chk@PLT # Offset: 1870
.Ltmp1012:
    00000753: 	movq	0x30(%rsp), %rcx
    00000758: 	xorl	%ebp, %ebp
.Ltmp975:
    0000075a: 	movq	%rcx, %rdi
    0000075d: 	movq	%rbx, %rdx
    00000760: 	xorl	%esi, %esi
    00000762: 	addq	$0x1, %rbp
    00000766: 	callq	memset@PLT # Offset: 1894
    0000076b: 	movq	%rax, %rcx
    0000076e: 	addq	%rbx, %rcx
    00000771: 	cmpq	%rbp, 0x80(%rsp)
    00000779: 	jne	.Ltmp975 # Offset: 1913
    0000077b: 	movq	0x38(%rsp), %rax
    00000780: 	movq	0x30(%rsp), %r10
    00000785: 	xorl	%r11d, %r11d
    00000788: 	movq	%rax, %r9
    0000078b: 	leaq	(%rax,%rbx), %rsi
.Ltmp978:
    0000078f: 	movq	%r15, %r8
    00000792: 	movq	%r10, %rcx
    00000795: 	xorl	%edi, %edi
.Ltmp977:
    00000797: 	movss	(%rcx), %xmm1
    0000079b: 	movq	%r9, %rax
    0000079e: 	movq	%r8, %rdx
    000007a1: 	nopl	(%rax) # Size: 7
.Ltmp976:
    000007a8: 	movss	(%rdx), %xmm0
    000007ac: 	mulss	(%rax), %xmm0
    000007b0: 	addq	$0x4, %rax
    000007b4: 	addq	%rbx, %rdx
    000007b7: 	addss	%xmm0, %xmm1
    000007bb: 	movss	%xmm1, (%rcx)
    000007bf: 	cmpq	%rax, %rsi
    000007c2: 	jne	.Ltmp976 # Offset: 1986
    000007c4: 	addq	$0x1, %rdi
    000007c8: 	addq	$0x4, %rcx
    000007cc: 	addq	$0x4, %r8
    000007d0: 	cmpq	%rdi, %r14
    000007d3: 	jne	.Ltmp977 # Offset: 2003
    000007d5: 	addq	$0x1, %r11
    000007d9: 	addq	%rbx, %r9
    000007dc: 	addq	%rbx, %rsi
    000007df: 	addq	%rbx, %r10
    000007e2: 	cmpq	%r11, 0x80(%rsp)
    000007ea: 	jne	.Ltmp978 # Offset: 2026
.Ltmp1011:
    000007ec: 	movq	0x30(%rsp), %rcx
    000007f1: 	movq	DATAat0x2d9e0(%rip), %xmm4
    000007f9: 	xorl	%edx, %edx
    000007fb: 	movss	DATAat0x2d9d0(%rip), %xmm5
    00000803: 	movsd	DATAat0x2da10(%rip), %xmm3
.Ltmp1013:
    0000080b: 	xorl	%eax, %eax
    0000080d: 	testq	%r14, %r14
    00000810: 	jne	.Ltmp979 # Offset: 2064
    00000812: 	jmp	.Ltmp980 # Offset: 2066
    00000817: 	nopw	(%rax,%rax) # Size: 9
.Ltmp982:
    00000820: 	addq	$0x1, %rax
    00000824: 	cmpq	%rax, %r14
    00000827: 	je	.Ltmp980 # Offset: 2087
.Ltmp979:
    0000082d: 	movq	0x8(%rsp), %rdi
    00000832: 	movss	(%rdi,%rax,4), %xmm1
    00000837: 	movaps	%xmm1, %xmm2
    0000083a: 	movaps	%xmm1, %xmm0
    0000083d: 	subss	(%rcx,%rax,4), %xmm0
    00000842: 	andps	%xmm5, %xmm2
    00000845: 	cvtss2sd	%xmm2, %xmm2
    00000849: 	comisd	DATAat0x2da08(%rip), %xmm2
    00000851: 	jbe	.Ltmp981 # Offset: 2129
    00000853: 	divss	%xmm1, %xmm0
.Ltmp981:
    00000857: 	cvtss2sd	%xmm0, %xmm0
    0000085b: 	andpd	%xmm4, %xmm0
    0000085f: 	comisd	%xmm0, %xmm3
    00000863: 	ja	.Ltmp982 # Offset: 2147
    00000865: 	leaq	DATAat0x2d548(%rip), %rsi
    0000086c: 	movl	$0x1, %edi
    00000871: 	xorl	%eax, %eax
    00000873: 	callq	__printf_chk@PLT # Offset: 2163
.Ltmp1014:
    00000878: 	xorl	%ebp, %ebp
.Ltmp983:
    0000087a: 	movq	0x10(%rsp), %r13
    0000087f: 	movq	%rbx, %rdx
    00000882: 	xorl	%esi, %esi
    00000884: 	addq	$0x1, %rbp
    00000888: 	movq	%r13, %rdi
    0000088b: 	callq	memset@PLT # Offset: 2187
    00000890: 	addq	%rbx, %rax
    00000893: 	movq	%rax, 0x10(%rsp)
    00000898: 	cmpq	%rbp, 0x80(%rsp)
    000008a0: 	jne	.Ltmp983 # Offset: 2208
    000008a2: 	testq	%r14, %r14
    000008a5: 	je	.Ltmp984 # Offset: 2213
    000008ab: 	movq	0x38(%rsp), %rax
    000008b0: 	movq	0x30(%rsp), %r9
    000008b5: 	movq	%r15, %r10
    000008b8: 	xorl	%r8d, %r8d
    000008bb: 	leaq	(,%r14,4), %rcx
    000008c3: 	leaq	(%rax,%rcx), %rbx
.Ltmp987:
    000008c7: 	movq	%rbx, %rdi
    000008ca: 	movq	%r9, %rsi
    000008cd: 	xorl	%r11d, %r11d
.Ltmp986:
    000008d0: 	movq	%rdi, %rax
    000008d3: 	movss	(%rsi), %xmm1
    000008d7: 	movq	%r10, %rdx
    000008da: 	subq	%rcx, %rax
    000008dd: 	nopl	(%rax) # Size: 3
.Ltmp985:
    000008e0: 	movss	(%rdx), %xmm0
    000008e4: 	mulss	(%rax), %xmm0
    000008e8: 	addq	$0x4, %rax
    000008ec: 	addq	%rcx, %rdx
    000008ef: 	addss	%xmm0, %xmm1
    000008f3: 	movss	%xmm1, (%rsi)
    000008f7: 	cmpq	%rax, %rdi
    000008fa: 	jne	.Ltmp985 # Offset: 2298
    000008fc: 	addq	$0x1, %r11
    00000900: 	addq	%rcx, %rsi
    00000903: 	addq	%rcx, %rdi
    00000906: 	cmpq	%r11, 0x80(%rsp)
    0000090e: 	jne	.Ltmp986 # Offset: 2318
    00000910: 	addq	$0x1, %r8
    00000914: 	addq	$0x4, %r10
    00000918: 	addq	$0x4, %r9
    0000091c: 	cmpq	%r8, %r14
    0000091f: 	jne	.Ltmp987 # Offset: 2335
    00000921: 	cmpq	$0x0, 0x80(%rsp)
    0000092a: 	je	.Ltmp935 # Offset: 2346
.Ltmp984:
    00000930: 	movq	0x30(%rsp), %rcx
    00000935: 	movq	0x100(%rsp), %rsi
    0000093d: 	leaq	(,%r14,4), %rbx
    00000945: 	xorl	%edx, %edx
    00000947: 	movq	DATAat0x2d9e0(%rip), %xmm4
    0000094f: 	movsd	DATAat0x2da10(%rip), %xmm3
    00000957: 	movss	DATAat0x2d9d0(%rip), %xmm5
    0000095f: 	movq	%rcx, %rbp
.Ltmp1015:
    00000962: 	xorl	%eax, %eax
    00000964: 	testq	%r14, %r14
    00000967: 	jne	.Ltmp988 # Offset: 2407
    00000969: 	jmp	.Ltmp989 # Offset: 2409
    0000096e: 	nop # Size: 2
.Ltmp991:
    00000970: 	addq	$0x1, %rax
    00000974: 	cmpq	%rax, %r14
    00000977: 	je	.Ltmp989 # Offset: 2423
.Ltmp988:
    0000097d: 	movss	(%rsi,%rax,4), %xmm1
    00000982: 	movaps	%xmm1, %xmm2
    00000985: 	movaps	%xmm1, %xmm0
    00000988: 	subss	(%rcx,%rax,4), %xmm0
    0000098d: 	andps	%xmm5, %xmm2
    00000990: 	cvtss2sd	%xmm2, %xmm2
    00000994: 	comisd	DATAat0x2da08(%rip), %xmm2
    0000099c: 	jbe	.Ltmp990 # Offset: 2460
    0000099e: 	divss	%xmm1, %xmm0
.Ltmp990:
    000009a2: 	cvtss2sd	%xmm0, %xmm0
    000009a6: 	andpd	%xmm4, %xmm0
    000009aa: 	comisd	%xmm0, %xmm3
    000009ae: 	ja	.Ltmp991 # Offset: 2478
    000009b0: 	leaq	DATAat0x2d528(%rip), %rsi
    000009b7: 	movl	$0x1, %edi
    000009bc: 	xorl	%eax, %eax
    000009be: 	callq	__printf_chk@PLT # Offset: 2494
.Ltmp1016:
    000009c3: 	xorl	%r12d, %r12d
.Ltmp992:
    000009c6: 	movq	%rbp, %rdi
    000009c9: 	movq	%rbx, %rdx
    000009cc: 	xorl	%esi, %esi
    000009ce: 	addq	$0x1, %r12
    000009d2: 	callq	memset@PLT # Offset: 2514
    000009d7: 	addq	%rbx, %rbp
    000009da: 	cmpq	%r12, 0x80(%rsp)
    000009e2: 	jne	.Ltmp992 # Offset: 2530
    000009e4: 	testq	%r14, %r14
    000009e7: 	je	.Ltmp993 # Offset: 2535
    000009ed: 	movq	0x30(%rsp), %r9
    000009f2: 	movq	%r15, %rbx
    000009f5: 	xorl	%r8d, %r8d
    000009f8: 	movq	0x80(%rsp), %r10
    00000a00: 	leaq	(,%r14,4), %rsi
.Ltmp1027:
    00000a08: 	movq	0x38(%rsp), %rbp
    00000a0d: 	movq	%rbx, %rdi
    00000a10: 	xorl	%r11d, %r11d
.Ltmp996:
    00000a13: 	movq	%rbp, %rcx
    00000a16: 	movq	%r9, %rax
    00000a19: 	xorl	%edx, %edx
    00000a1b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp994:
    00000a20: 	movss	(%rdi), %xmm0
    00000a24: 	mulss	(%rcx), %xmm0
    00000a28: 	addq	$0x1, %rdx
    00000a2c: 	addq	%rsi, %rcx
    00000a2f: 	addss	(%rax), %xmm0
    00000a33: 	movss	%xmm0, (%rax)
    00000a37: 	addq	%rsi, %rax
    00000a3a: 	cmpq	%rdx, %r10
    00000a3d: 	jne	.Ltmp994 # Offset: 2621
    00000a3f: 	leaq	0x1(%r11), %rax
    00000a43: 	addq	$0x4, %rbp
    00000a47: 	addq	%rsi, %rdi
    00000a4a: 	cmpq	%rax, %r14
    00000a4d: 	je	.Ltmp995 # Offset: 2637
    00000a53: 	movq	%rax, %r11
    00000a56: 	jmp	.Ltmp996 # Offset: 2646
.Ltmp960:
    00000a58: 	addq	$0x1, %rdx
    00000a5c: 	addq	%rbx, %rcx
    00000a5f: 	addq	%rbx, %rsi
    00000a62: 	cmpq	%rdx, 0x80(%rsp)
    00000a6a: 	jne	.Ltmp997 # Offset: 2666
    00000a70: 	testq	%r14, %r14
    00000a73: 	je	.Ltmp998 # Offset: 2675
    00000a79: 	jmp	.Ltmp999 # Offset: 2681
    00000a7e: 	nop # Size: 2
.Ltmp938:
    00000a80: 	movq	%rdx, %rax
    00000a83: 	movq	%rdx, %r10
    00000a86: 	pxor	%xmm0, %xmm0
    00000a8a: 	shrq	%rax
    00000a8d: 	andl	$0x1, %r10d
    00000a91: 	orq	%r10, %rax
    00000a94: 	cmpq	$0x2, 0x20(%rsp)
    00000a9a: 	cvtsi2ss	%rax, %xmm0
    00000a9f: 	addss	%xmm0, %xmm0
    00000aa3: 	ja	.Ltmp1000 # Offset: 2723
.Ltmp939:
    00000aa9: 	xorl	%eax, %eax
    00000aab: 	jmp	.Ltmp1001 # Offset: 2731
.Ltmp943:
    00000ab0: 	movq	%rdx, %rax
    00000ab3: 	movq	%rdx, %rdi
    00000ab6: 	pxor	%xmm0, %xmm0
    00000aba: 	shrq	%rax
    00000abd: 	andl	$0x1, %edi
    00000ac0: 	orq	%rdi, %rax
    00000ac3: 	cvtsi2ss	%rax, %xmm0
    00000ac8: 	addss	%xmm0, %xmm0
    00000acc: 	cmpq	$0x2, %r9
    00000ad0: 	ja	.Ltmp1002 # Offset: 2768
.Ltmp944:
    00000ad6: 	xorl	%eax, %eax
    00000ad8: 	jmp	.Ltmp1003 # Offset: 2776
.Ltmp949:
    00000add: 	leaq	0x1(%r8), %rax
    00000ae1: 	addq	$0x4, %r10
    00000ae5: 	addq	%rsi, %r9
    00000ae8: 	cmpq	%r8, %rdi
    00000aeb: 	je	.Ltmp1004 # Offset: 2795
    00000af1: 	movq	%rax, %r8
    00000af4: 	jmp	.Ltmp1005 # Offset: 2804
.Ltmp952:
    00000af9: 	movq	0x48(%rsp), %r10
    00000afe: 	movq	%rdx, %rax
.Ltmp1006:
    00000b01: 	movss	(%rcx), %xmm0
    00000b05: 	mulss	(%r10), %xmm0
    00000b0a: 	addq	$0x4, %rax
    00000b0e: 	addq	$0x4, %r10
    00000b12: 	addss	-0x4(%rax), %xmm0
    00000b17: 	movss	%xmm0, -0x4(%rax)
    00000b1c: 	cmpq	%r12, %rax
    00000b1f: 	jne	.Ltmp1006 # Offset: 2847
    00000b21: 	jmp	.Ltmp955 # Offset: 2849
.Ltmp953:
    00000b26: 	movq	%r14, %rbx
    00000b29: 	xorl	%eax, %eax
    00000b2b: 	jmp	.Ltmp1007 # Offset: 2859
.Ltmp964:
    00000b30: 	movq	0x48(%rsp), %rax
    00000b35: 	movq	%rcx, %r8
.Ltmp1008:
    00000b38: 	movss	(%rsi), %xmm0
    00000b3c: 	mulss	(%r8), %xmm0
    00000b41: 	addq	$0x4, %rax
    00000b45: 	addq	$0x4, %r8
    00000b49: 	addss	-0x4(%rax), %xmm0
    00000b4e: 	movss	%xmm0, -0x4(%rax)
    00000b53: 	cmpq	%r13, %rax
    00000b56: 	jne	.Ltmp1008 # Offset: 2902
    00000b58: 	jmp	.Ltmp967 # Offset: 2904
.Ltmp965:
    00000b5d: 	movq	%r14, %r10
    00000b60: 	xorl	%eax, %eax
    00000b62: 	jmp	.Ltmp1009 # Offset: 2914
.Ltmp972:
    00000b67: 	addq	$0x1, %rdx
    00000b6b: 	addq	%rbx, %rcx
    00000b6e: 	addq	%rbx, %rsi
    00000b71: 	cmpq	%rdx, 0x80(%rsp)
    00000b79: 	jne	.Ltmp1010 # Offset: 2937
    00000b7f: 	testq	%r14, %r14
    00000b82: 	je	.Ltmp1011 # Offset: 2946
    00000b88: 	jmp	.Ltmp1012 # Offset: 2952
    00000b8d: 	nopl	(%rax) # Size: 3
.Ltmp980:
    00000b90: 	addq	%rbx, 0x8(%rsp)
    00000b95: 	addq	$0x1, %rdx
    00000b99: 	addq	%rbx, %rcx
    00000b9c: 	cmpq	%rdx, 0x80(%rsp)
    00000ba4: 	jne	.Ltmp1013 # Offset: 2980
    00000baa: 	testq	%r14, %r14
    00000bad: 	je	.Ltmp984 # Offset: 2989
    00000bb3: 	jmp	.Ltmp1014 # Offset: 2995
    00000bb8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp989:
    00000bc0: 	addq	$0x1, %rdx
    00000bc4: 	addq	%rbx, %rsi
    00000bc7: 	addq	%rbx, %rcx
    00000bca: 	cmpq	%rdx, 0x80(%rsp)
    00000bd2: 	jne	.Ltmp1015 # Offset: 3026
    00000bd8: 	testq	%r14, %r14
    00000bdb: 	jne	.Ltmp1016 # Offset: 3035
.Ltmp993:
    00000be1: 	movq	0x30(%rsp), %rcx
    00000be6: 	movq	0x100(%rsp), %rsi
    00000bee: 	leaq	(,%r14,4), %rbx
    00000bf6: 	xorl	%edx, %edx
    00000bf8: 	movq	DATAat0x2d9e0(%rip), %xmm4
    00000c00: 	movsd	DATAat0x2da10(%rip), %xmm3
    00000c08: 	movss	DATAat0x2d9d0(%rip), %xmm5
    00000c10: 	movq	%rcx, %rbp
.Ltmp1028:
    00000c13: 	xorl	%eax, %eax
    00000c15: 	testq	%r14, %r14
    00000c18: 	jne	.Ltmp1017 # Offset: 3096
    00000c1a: 	jmp	.Ltmp1018 # Offset: 3098
    00000c1f: 	nop # Size: 1
.Ltmp1020:
    00000c20: 	addq	$0x1, %rax
    00000c24: 	cmpq	%rax, %r14
    00000c27: 	je	.Ltmp1018 # Offset: 3111
.Ltmp1017:
    00000c2d: 	movss	(%rsi,%rax,4), %xmm1
    00000c32: 	movaps	%xmm1, %xmm2
    00000c35: 	movaps	%xmm1, %xmm0
    00000c38: 	subss	(%rcx,%rax,4), %xmm0
    00000c3d: 	andps	%xmm5, %xmm2
    00000c40: 	cvtss2sd	%xmm2, %xmm2
    00000c44: 	comisd	DATAat0x2da08(%rip), %xmm2
    00000c4c: 	jbe	.Ltmp1019 # Offset: 3148
    00000c4e: 	divss	%xmm1, %xmm0
.Ltmp1019:
    00000c52: 	cvtss2sd	%xmm0, %xmm0
    00000c56: 	andpd	%xmm4, %xmm0
    00000c5a: 	comisd	%xmm0, %xmm3
    00000c5e: 	ja	.Ltmp1020 # Offset: 3166
    00000c60: 	leaq	DATAat0x2d508(%rip), %rsi
    00000c67: 	movl	$0x1, %edi
    00000c6c: 	xorl	%eax, %eax
    00000c6e: 	callq	__printf_chk@PLT # Offset: 3182
.Ltmp1029:
    00000c73: 	xorl	%r12d, %r12d
.Ltmp1021:
    00000c76: 	movq	%rbp, %rdi
    00000c79: 	movq	%rbx, %rdx
    00000c7c: 	xorl	%esi, %esi
    00000c7e: 	addq	$0x1, %r12
    00000c82: 	callq	memset@PLT # Offset: 3202
    00000c87: 	addq	%rbx, %rbp
    00000c8a: 	cmpq	%r12, 0x80(%rsp)
    00000c92: 	jne	.Ltmp1021 # Offset: 3218
    00000c94: 	testq	%r14, %r14
    00000c97: 	je	.Ltmp1022 # Offset: 3223
    00000c9d: 	movq	0x38(%rsp), %r10
    00000ca2: 	movq	0x80(%rsp), %rdi
    00000caa: 	movq	%r15, %r9
    00000cad: 	xorl	%r8d, %r8d
    00000cb0: 	leaq	(,%r14,4), %rsi
.Ltmp1219:
    00000cb8: 	movq	0x30(%rsp), %rbx
    00000cbd: 	xorl	%r11d, %r11d
.Ltmp1025:
    00000cc0: 	movss	(%r9,%r11,4), %xmm1
    00000cc6: 	movq	%r10, %rcx
    00000cc9: 	movq	%rbx, %rax
    00000ccc: 	xorl	%edx, %edx
    00000cce: 	nop # Size: 2
.Ltmp1023:
    00000cd0: 	movss	(%rcx), %xmm0
    00000cd4: 	addq	$0x1, %rdx
    00000cd8: 	addq	%rsi, %rcx
    00000cdb: 	mulss	%xmm1, %xmm0
    00000cdf: 	addss	(%rax), %xmm0
    00000ce3: 	movss	%xmm0, (%rax)
    00000ce7: 	addq	%rsi, %rax
    00000cea: 	cmpq	%rdx, %rdi
    00000ced: 	jne	.Ltmp1023 # Offset: 3309
    00000cef: 	leaq	0x1(%r11), %rax
    00000cf3: 	addq	$0x4, %rbx
    00000cf7: 	cmpq	%rax, %r14
    00000cfa: 	je	.Ltmp1024 # Offset: 3322
    00000d00: 	movq	%rax, %r11
    00000d03: 	jmp	.Ltmp1025 # Offset: 3331
.Ltmp995:
    00000d05: 	leaq	0x1(%r8), %rax
    00000d09: 	addq	$0x4, %r9
    00000d0d: 	addq	$0x4, %rbx
    00000d11: 	cmpq	%r11, %r8
    00000d14: 	je	.Ltmp1026 # Offset: 3348
    00000d1a: 	movq	%rax, %r8
    00000d1d: 	jmp	.Ltmp1027 # Offset: 3357
.Ltmp1018:
    00000d22: 	addq	$0x1, %rdx
    00000d26: 	addq	%rbx, %rsi
    00000d29: 	addq	%rbx, %rcx
    00000d2c: 	cmpq	%rdx, 0x80(%rsp)
    00000d34: 	jne	.Ltmp1028 # Offset: 3380
    00000d3a: 	testq	%r14, %r14
    00000d3d: 	jne	.Ltmp1029 # Offset: 3389
.Ltmp1022:
    00000d43: 	movq	0x30(%rsp), %rcx
    00000d48: 	movq	0x100(%rsp), %rsi
    00000d50: 	leaq	(,%r14,4), %rbx
    00000d58: 	xorl	%edx, %edx
    00000d5a: 	movq	DATAat0x2d9e0(%rip), %xmm4
    00000d62: 	movsd	DATAat0x2da10(%rip), %xmm3
    00000d6a: 	movss	DATAat0x2d9d0(%rip), %xmm5
    00000d72: 	movq	%rcx, %rbp
.Ltmp1220:
    00000d75: 	xorl	%eax, %eax
    00000d77: 	testq	%r14, %r14
    00000d7a: 	jne	.Ltmp1030 # Offset: 3450
    00000d7c: 	jmp	.Ltmp1031 # Offset: 3452
    00000d81: 	nopl	(%rax) # Size: 7
.Ltmp1033:
    00000d88: 	addq	$0x1, %rax
    00000d8c: 	cmpq	%rax, %r14
    00000d8f: 	je	.Ltmp1031 # Offset: 3471
.Ltmp1030:
    00000d95: 	movss	(%rsi,%rax,4), %xmm1
    00000d9a: 	movaps	%xmm1, %xmm2
    00000d9d: 	movaps	%xmm1, %xmm0
    00000da0: 	subss	(%rcx,%rax,4), %xmm0
    00000da5: 	andps	%xmm5, %xmm2
    00000da8: 	cvtss2sd	%xmm2, %xmm2
    00000dac: 	comisd	DATAat0x2da08(%rip), %xmm2
    00000db4: 	jbe	.Ltmp1032 # Offset: 3508
    00000db6: 	divss	%xmm1, %xmm0
.Ltmp1032:
    00000dba: 	cvtss2sd	%xmm0, %xmm0
    00000dbe: 	andpd	%xmm4, %xmm0
    00000dc2: 	comisd	%xmm0, %xmm3
    00000dc6: 	ja	.Ltmp1033 # Offset: 3526
    00000dc8: 	leaq	DATAat0x2d4e0(%rip), %rsi
    00000dcf: 	movl	$0x1, %edi
    00000dd4: 	xorl	%eax, %eax
    00000dd6: 	callq	__printf_chk@PLT # Offset: 3542
.Ltmp1221:
    00000ddb: 	xorl	%r12d, %r12d
.Ltmp1034:
    00000dde: 	movq	%rbp, %rdi
    00000de1: 	movq	%rbx, %rdx
    00000de4: 	xorl	%esi, %esi
    00000de6: 	addq	$0x1, %r12
    00000dea: 	callq	memset@PLT # Offset: 3562
    00000def: 	addq	%rbx, %rbp
    00000df2: 	cmpq	%r12, 0x80(%rsp)
    00000dfa: 	jne	.Ltmp1034 # Offset: 3578
    00000dfc: 	testq	%r14, %r14
    00000dff: 	je	.Ltmp1035 # Offset: 3583
    00000e05: 	leaq	-0x1(%r14), %rax
    00000e09: 	movq	0x38(%rsp), %r13
    00000e0e: 	leaq	0x4(%r15), %rdi
    00000e12: 	movq	%r15, %rcx
    00000e15: 	movq	%rax, 0x20(%rsp)
    00000e1a: 	movq	%r14, %rax
    00000e1d: 	leaq	(,%r14,4), %rbx
    00000e25: 	xorl	%ebp, %ebp
    00000e27: 	shrq	$0x2, %rax
    00000e2b: 	xorl	%r10d, %r10d
    00000e2e: 	shlq	$0x4, %rax
    00000e32: 	movq	%rax, %r12
    00000e35: 	movq	%r14, %rax
    00000e38: 	andq	$-0x4, %rax
    00000e3c: 	movq	%rax, 0x10(%rsp)
    00000e41: 	movq	%r14, %rax
    00000e44: 	andl	$0x3, %eax
    00000e47: 	movq	%rax, 0x28(%rsp)
.Ltmp1042:
    00000e4c: 	movq	0x30(%rsp), %rdx
    00000e51: 	leaq	(%r15,%rbp,4), %rsi
    00000e55: 	movq	%r10, 0x40(%rsp)
    00000e5a: 	movq	$0x0, 0x8(%rsp)
    00000e63: 	movq	%rsi, 0x18(%rsp)
    00000e68: 	movq	%rdx, %rax
    00000e6b: 	xorl	%esi, %esi
    00000e6d: 	movq	%rdx, %r10
.Ltmp1041:
    00000e70: 	movq	%rax, %rdx
    00000e73: 	movss	(%r13,%rsi,4), %xmm1
    00000e7a: 	subq	%rdi, %rdx
    00000e7d: 	cmpq	$0x8, %rdx
    00000e81: 	jbe	.Ltmp1036 # Offset: 3713
    00000e87: 	cmpq	$0x1, %r14
    00000e8b: 	je	.Ltmp1036 # Offset: 3723
    00000e91: 	cmpq	$0x2, 0x20(%rsp)
    00000e97: 	jbe	.Ltmp1037 # Offset: 3735
    00000e9d: 	movaps	%xmm1, %xmm2
    00000ea0: 	xorl	%edx, %edx
    00000ea2: 	shufps	$0x0, %xmm2, %xmm2
.Ltmp1038:
    00000ea6: 	movups	(%rcx,%rdx), %xmm0
    00000eaa: 	movups	(%rax,%rdx), %xmm7
    00000eae: 	mulps	%xmm2, %xmm0
    00000eb1: 	addps	%xmm7, %xmm0
    00000eb4: 	movups	%xmm0, (%rax,%rdx)
    00000eb8: 	addq	$0x10, %rdx
    00000ebc: 	cmpq	%rdx, %r12
    00000ebf: 	jne	.Ltmp1038 # Offset: 3775
    00000ec1: 	movq	0x10(%rsp), %rdx
    00000ec6: 	leaq	(%rbx,%rax), %r11
    00000eca: 	cmpq	%rdx, %r14
    00000ecd: 	je	.Ltmp1039 # Offset: 3789
    00000ecf: 	movq	0x28(%rsp), %r11
    00000ed4: 	movq	%r11, %r8
    00000ed7: 	cmpq	$0x1, %r11
    00000edb: 	je	.Ltmp1040 # Offset: 3803
.Ltmp1223:
    00000edd: 	leaq	(%rbp,%rdx), %r11
    00000ee2: 	movaps	%xmm1, %xmm2
    00000ee5: 	leaq	(%rsi,%rdx), %r9
    00000ee9: 	movq	(%r15,%r11,4), %xmm0
    00000eef: 	shufps	$0xe0, %xmm2, %xmm2
    00000ef3: 	leaq	(%r10,%r9,4), %r9
    00000ef7: 	leaq	(%rbx,%rax), %r11
    00000efb: 	mulps	%xmm2, %xmm0
    00000efe: 	movq	(%r9), %xmm2
    00000f03: 	addps	%xmm2, %xmm0
    00000f06: 	movlps	%xmm0, (%r9)
    00000f0a: 	movq	%r8, %r9
    00000f0d: 	andq	$-0x2, %r9
    00000f11: 	addq	%r9, %rdx
    00000f14: 	cmpq	%r9, %r8
    00000f17: 	je	.Ltmp1039 # Offset: 3863
.Ltmp1040:
    00000f19: 	leaq	(%rsi,%rdx), %r8
    00000f1d: 	addq	%rbp, %rdx
    00000f20: 	leaq	(%rbx,%rax), %r11
    00000f24: 	mulss	(%r15,%rdx,4), %xmm1
    00000f2a: 	leaq	(%r10,%r8,4), %r8
    00000f2e: 	addss	(%r8), %xmm1
    00000f33: 	movss	%xmm1, (%r8)
.Ltmp1039:
    00000f38: 	addq	$0x1, 0x8(%rsp)
    00000f3e: 	movq	%r11, %rax
    00000f41: 	movq	0x8(%rsp), %rdx
    00000f46: 	addq	%r14, %rsi
    00000f49: 	cmpq	%rdx, 0x80(%rsp)
    00000f51: 	jne	.Ltmp1041 # Offset: 3921
    00000f57: 	movq	0x40(%rsp), %r10
    00000f5c: 	addq	%rbx, %rcx
    00000f5f: 	addq	%r14, %rbp
    00000f62: 	addq	$0x4, %r13
    00000f66: 	addq	%rbx, %rdi
    00000f69: 	addq	$0x1, %r10
    00000f6d: 	cmpq	%r10, %r14
    00000f70: 	jne	.Ltmp1042 # Offset: 3952
.Ltmp1035:
    00000f76: 	movq	0x100(%rsp), %rcx
    00000f7e: 	movq	0x30(%rsp), %rsi
    00000f83: 	leaq	(,%r14,4), %rbx
    00000f8b: 	xorl	%edx, %edx
    00000f8d: 	movq	DATAat0x2d9e0(%rip), %xmm4
    00000f95: 	movsd	DATAat0x2da10(%rip), %xmm3
    00000f9d: 	movss	DATAat0x2d9d0(%rip), %xmm5
    00000fa5: 	movq	%rcx, 0x10(%rsp)
    00000faa: 	movq	%rsi, 0x28(%rsp)
.Ltmp1224:
    00000faf: 	xorl	%eax, %eax
    00000fb1: 	testq	%r14, %r14
    00000fb4: 	jne	.Ltmp1043 # Offset: 4020
    00000fb6: 	jmp	.Ltmp1044 # Offset: 4022
    00000fbb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1046:
    00000fc0: 	addq	$0x1, %rax
    00000fc4: 	cmpq	%rax, %r14
    00000fc7: 	je	.Ltmp1044 # Offset: 4039
.Ltmp1043:
    00000fcd: 	movss	(%rcx,%rax,4), %xmm1
    00000fd2: 	movaps	%xmm1, %xmm2
    00000fd5: 	movaps	%xmm1, %xmm0
    00000fd8: 	subss	(%rsi,%rax,4), %xmm0
    00000fdd: 	andps	%xmm5, %xmm2
    00000fe0: 	cvtss2sd	%xmm2, %xmm2
    00000fe4: 	comisd	DATAat0x2da08(%rip), %xmm2
    00000fec: 	jbe	.Ltmp1045 # Offset: 4076
    00000fee: 	divss	%xmm1, %xmm0
.Ltmp1045:
    00000ff2: 	cvtss2sd	%xmm0, %xmm0
    00000ff6: 	andpd	%xmm4, %xmm0
    00000ffa: 	comisd	%xmm0, %xmm3
    00000ffe: 	ja	.Ltmp1046 # Offset: 4094
    00001000: 	leaq	DATAat0x2d4b8(%rip), %rsi
    00001007: 	movl	$0x1, %edi
    0000100c: 	xorl	%eax, %eax
    0000100e: 	callq	__printf_chk@PLT # Offset: 4110
.Ltmp1226:
    00001013: 	movq	0x30(%rsp), %rcx
    00001018: 	xorl	%ebp, %ebp
.Ltmp1047:
    0000101a: 	movq	%rcx, %rdi
    0000101d: 	movq	%rbx, %rdx
    00001020: 	xorl	%esi, %esi
    00001022: 	addq	$0x1, %rbp
    00001026: 	callq	memset@PLT # Offset: 4134
    0000102b: 	movq	%rax, %rcx
    0000102e: 	addq	%rbx, %rcx
    00001031: 	cmpq	%rbp, 0x80(%rsp)
    00001039: 	jne	.Ltmp1047 # Offset: 4153
    0000103b: 	movq	0x38(%rsp), %rax
    00001040: 	movq	0x30(%rsp), %r10
    00001045: 	xorl	%ebp, %ebp
    00001047: 	xorl	%r11d, %r11d
    0000104a: 	addq	%rbx, %rax
    0000104d: 	leaq	(%r10,%rbx), %r13
    00001051: 	movq	%r10, %rdx
    00001054: 	movq	%rax, 0x8(%rsp)
    00001059: 	leaq	-0x1(%r14), %rax
    0000105d: 	movq	%rax, 0x48(%rsp)
    00001062: 	movq	%r14, %rax
    00001065: 	shrq	$0x2, %rax
    00001069: 	shlq	$0x4, %rax
    0000106d: 	movq	%rax, %r12
    00001070: 	movq	%r14, %rax
    00001073: 	andq	$-0x4, %rax
    00001077: 	movq	%rax, 0x18(%rsp)
    0000107c: 	movq	%r14, %rax
    0000107f: 	andl	$0x3, %eax
    00001082: 	movq	%rax, 0x50(%rsp)
.Ltmp1054:
    00001087: 	movq	0x38(%rsp), %rdi
    0000108c: 	leaq	(,%rbp,4), %rax
    00001094: 	movq	%r15, %rcx
    00001097: 	xorl	%esi, %esi
    00001099: 	addq	%rax, %rdi
    0000109c: 	addq	%r10, %rax
    0000109f: 	movq	%rax, 0x20(%rsp)
.Ltmp1053:
    000010a4: 	leaq	0x4(%rcx), %r8
    000010a8: 	movq	%rdx, %rax
    000010ab: 	movss	(%rdi), %xmm1
    000010af: 	subq	%r8, %rax
    000010b2: 	cmpq	$0x8, %rax
    000010b6: 	jbe	.Ltmp1048 # Offset: 4278
    000010bc: 	cmpq	$0x1, %r14
    000010c0: 	je	.Ltmp1048 # Offset: 4288
    000010c6: 	cmpq	$0x2, 0x48(%rsp)
    000010cc: 	jbe	.Ltmp1049 # Offset: 4300
    000010d2: 	movaps	%xmm1, %xmm2
    000010d5: 	xorl	%eax, %eax
    000010d7: 	shufps	$0x0, %xmm2, %xmm2
.Ltmp1050:
    000010db: 	movups	(%rcx,%rax), %xmm0
    000010df: 	movups	(%rdx,%rax), %xmm7
    000010e3: 	mulps	%xmm2, %xmm0
    000010e6: 	addps	%xmm7, %xmm0
    000010e9: 	movups	%xmm0, (%rdx,%rax)
    000010ed: 	addq	$0x10, %rax
    000010f1: 	cmpq	%rax, %r12
    000010f4: 	jne	.Ltmp1050 # Offset: 4340
    000010f6: 	movq	0x18(%rsp), %rax
    000010fb: 	cmpq	%rax, %r14
    000010fe: 	je	.Ltmp1051 # Offset: 4350
    00001100: 	movq	0x50(%rsp), %r8
    00001105: 	movq	%r8, %r9
    00001108: 	cmpq	$0x1, %r8
    0000110c: 	je	.Ltmp1052 # Offset: 4364
.Ltmp1228:
    0000110e: 	leaq	(%rax,%rbp), %r8
    00001112: 	movaps	%xmm1, %xmm2
    00001115: 	leaq	(%r10,%r8,4), %r8
    00001119: 	shufps	$0xe0, %xmm2, %xmm2
    0000111d: 	movq	%r8, 0x40(%rsp)
    00001122: 	leaq	(%rax,%rsi), %r8
    00001126: 	movq	(%r15,%r8,4), %xmm0
    0000112c: 	movq	0x40(%rsp), %r8
    00001131: 	mulps	%xmm2, %xmm0
    00001134: 	movq	(%r8), %xmm2
    00001139: 	addps	%xmm2, %xmm0
    0000113c: 	movlps	%xmm0, (%r8)
    00001140: 	movq	%r9, %r8
    00001143: 	andq	$-0x2, %r8
    00001147: 	addq	%r8, %rax
    0000114a: 	cmpq	%r8, %r9
    0000114d: 	je	.Ltmp1051 # Offset: 4429
.Ltmp1052:
    0000114f: 	leaq	(%rbp,%rax), %r8
    00001154: 	addq	%rsi, %rax
    00001157: 	mulss	(%r15,%rax,4), %xmm1
    0000115d: 	leaq	(%r10,%r8,4), %r8
    00001161: 	addss	(%r8), %xmm1
    00001166: 	movss	%xmm1, (%r8)
.Ltmp1051:
    0000116b: 	addq	$0x4, %rdi
    0000116f: 	addq	%rbx, %rcx
    00001172: 	addq	%r14, %rsi
    00001175: 	cmpq	%rdi, 0x8(%rsp)
    0000117a: 	jne	.Ltmp1053 # Offset: 4474
    00001180: 	addq	%rbx, 0x8(%rsp)
    00001185: 	addq	$0x1, %r11
    00001189: 	addq	%rbx, %rdx
    0000118c: 	addq	%r14, %rbp
    0000118f: 	addq	%rbx, %r13
    00001192: 	cmpq	%r11, 0x80(%rsp)
    0000119a: 	jne	.Ltmp1054 # Offset: 4506
.Ltmp1225:
    000011a0: 	movq	0x30(%rsp), %rsi
    000011a5: 	movq	0x100(%rsp), %rcx
    000011ad: 	xorl	%edx, %edx
    000011af: 	movss	DATAat0x2d9d0(%rip), %xmm5
    000011b7: 	movq	DATAat0x2d9e0(%rip), %xmm4
    000011bf: 	movsd	DATAat0x2da10(%rip), %xmm3
.Ltmp1229:
    000011c7: 	xorl	%eax, %eax
    000011c9: 	testq	%r14, %r14
    000011cc: 	jne	.Ltmp1055 # Offset: 4556
    000011ce: 	jmp	.Ltmp1056 # Offset: 4558
    000011d3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1058:
    000011d8: 	addq	$0x1, %rax
    000011dc: 	cmpq	%rax, %r14
    000011df: 	je	.Ltmp1056 # Offset: 4575
.Ltmp1055:
    000011e5: 	movss	(%rcx,%rax,4), %xmm1
    000011ea: 	movaps	%xmm1, %xmm2
    000011ed: 	movaps	%xmm1, %xmm0
    000011f0: 	subss	(%rsi,%rax,4), %xmm0
    000011f5: 	andps	%xmm5, %xmm2
    000011f8: 	cvtss2sd	%xmm2, %xmm2
    000011fc: 	comisd	DATAat0x2da08(%rip), %xmm2
    00001204: 	jbe	.Ltmp1057 # Offset: 4612
    00001206: 	divss	%xmm1, %xmm0
.Ltmp1057:
    0000120a: 	cvtss2sd	%xmm0, %xmm0
    0000120e: 	andpd	%xmm4, %xmm0
    00001212: 	comisd	%xmm0, %xmm3
    00001216: 	ja	.Ltmp1058 # Offset: 4630
    00001218: 	leaq	DATAat0x2d490(%rip), %rsi
    0000121f: 	movl	$0x1, %edi
    00001224: 	xorl	%eax, %eax
    00001226: 	callq	__printf_chk@PLT # Offset: 4646
.Ltmp1231:
    0000122b: 	movq	0x30(%rsp), %rcx
    00001230: 	xorl	%ebp, %ebp
.Ltmp1059:
    00001232: 	movq	%rcx, %rdi
    00001235: 	movq	%rbx, %rdx
    00001238: 	xorl	%esi, %esi
    0000123a: 	addq	$0x1, %rbp
    0000123e: 	callq	memset@PLT # Offset: 4670
    00001243: 	movq	%rax, %rcx
    00001246: 	addq	%rbx, %rcx
    00001249: 	cmpq	%rbp, 0x80(%rsp)
    00001251: 	jne	.Ltmp1059 # Offset: 4689
    00001253: 	movq	0x38(%rsp), %rax
    00001258: 	movq	0x30(%rsp), %rdi
    0000125d: 	xorl	%r10d, %r10d
    00001260: 	pxor	%xmm2, %xmm2
    00001264: 	movq	%rax, %r9
    00001267: 	leaq	(%rbx,%rax), %rcx
.Ltmp1062:
    0000126b: 	movq	%r15, %r8
    0000126e: 	xorl	%esi, %esi
.Ltmp1061:
    00001270: 	movq	%r9, %rax
    00001273: 	movq	%r8, %rdx
    00001276: 	movaps	%xmm2, %xmm1
    00001279: 	nopl	(%rax) # Size: 7
.Ltmp1060:
    00001280: 	movss	(%rdx), %xmm0
    00001284: 	mulss	(%rax), %xmm0
    00001288: 	addq	$0x4, %rax
    0000128c: 	addq	%rbx, %rdx
    0000128f: 	addss	%xmm0, %xmm1
    00001293: 	cmpq	%rax, %rcx
    00001296: 	jne	.Ltmp1060 # Offset: 4758
    00001298: 	addss	(%rdi,%rsi,4), %xmm1
    0000129d: 	addq	$0x4, %r8
    000012a1: 	movss	%xmm1, (%rdi,%rsi,4)
    000012a6: 	addq	$0x1, %rsi
    000012aa: 	cmpq	%rsi, %r14
    000012ad: 	jne	.Ltmp1061 # Offset: 4781
    000012af: 	addq	$0x1, %r10
    000012b3: 	addq	%rbx, %rdi
    000012b6: 	addq	%rbx, %r9
    000012b9: 	addq	%rbx, %rcx
    000012bc: 	cmpq	%r10, 0x80(%rsp)
    000012c4: 	jne	.Ltmp1062 # Offset: 4804
.Ltmp1230:
    000012c6: 	movq	0x30(%rsp), %rcx
    000012cb: 	movq	DATAat0x2d9e0(%rip), %xmm4
    000012d3: 	xorl	%edx, %edx
    000012d5: 	movss	DATAat0x2d9d0(%rip), %xmm5
    000012dd: 	movsd	DATAat0x2da10(%rip), %xmm3
.Ltmp1232:
    000012e5: 	xorl	%eax, %eax
    000012e7: 	testq	%r14, %r14
    000012ea: 	jne	.Ltmp1063 # Offset: 4842
    000012ec: 	jmp	.Ltmp1064 # Offset: 4844
    000012f1: 	nopl	(%rax) # Size: 7
.Ltmp1066:
    000012f8: 	addq	$0x1, %rax
    000012fc: 	cmpq	%rax, %r14
    000012ff: 	je	.Ltmp1064 # Offset: 4863
.Ltmp1063:
    00001305: 	movq	0x10(%rsp), %rdi
    0000130a: 	movss	(%rdi,%rax,4), %xmm1
    0000130f: 	movaps	%xmm1, %xmm2
    00001312: 	movaps	%xmm1, %xmm0
    00001315: 	subss	(%rcx,%rax,4), %xmm0
    0000131a: 	andps	%xmm5, %xmm2
    0000131d: 	cvtss2sd	%xmm2, %xmm2
    00001321: 	comisd	DATAat0x2da08(%rip), %xmm2
    00001329: 	jbe	.Ltmp1065 # Offset: 4905
    0000132b: 	divss	%xmm1, %xmm0
.Ltmp1065:
    0000132f: 	cvtss2sd	%xmm0, %xmm0
    00001333: 	andpd	%xmm4, %xmm0
    00001337: 	comisd	%xmm0, %xmm3
    0000133b: 	ja	.Ltmp1066 # Offset: 4923
    0000133d: 	leaq	DATAat0x2d468(%rip), %rsi
    00001344: 	movl	$0x1, %edi
    00001349: 	xorl	%eax, %eax
    0000134b: 	callq	__printf_chk@PLT # Offset: 4939
.Ltmp1233:
    00001350: 	movq	0x28(%rsp), %rcx
    00001355: 	xorl	%ebp, %ebp
.Ltmp1067:
    00001357: 	movq	%rcx, %rdi
    0000135a: 	movq	%rbx, %rdx
    0000135d: 	xorl	%esi, %esi
    0000135f: 	addq	$0x1, %rbp
    00001363: 	callq	memset@PLT # Offset: 4963
    00001368: 	movq	%rax, %rcx
    0000136b: 	addq	%rbx, %rcx
    0000136e: 	cmpq	%rbp, 0x80(%rsp)
    00001376: 	jne	.Ltmp1067 # Offset: 4982
    00001378: 	testq	%r14, %r14
    0000137b: 	je	.Ltmp1068 # Offset: 4987
    00001381: 	movq	0x38(%rsp), %rax
    00001386: 	movq	0x30(%rsp), %rdi
    0000138b: 	movq	%r15, %r10
    0000138e: 	xorl	%r9d, %r9d
    00001391: 	leaq	(,%r14,4), %rcx
    00001399: 	pxor	%xmm2, %xmm2
    0000139d: 	leaq	(%rax,%rcx), %rbx
.Ltmp1071:
    000013a1: 	movq	%rbx, %rsi
    000013a4: 	xorl	%r8d, %r8d
    000013a7: 	xorl	%r11d, %r11d
.Ltmp1070:
    000013aa: 	movq	%rsi, %rax
    000013ad: 	movq	%r10, %rdx
    000013b0: 	movaps	%xmm2, %xmm1
    000013b3: 	subq	%rcx, %rax
    000013b6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1069:
    000013c0: 	movss	(%rdx), %xmm0
    000013c4: 	mulss	(%rax), %xmm0
    000013c8: 	addq	$0x4, %rax
    000013cc: 	addq	%rcx, %rdx
    000013cf: 	addss	%xmm0, %xmm1
    000013d3: 	cmpq	%rax, %rsi
    000013d6: 	jne	.Ltmp1069 # Offset: 5078
    000013d8: 	addss	(%rdi,%r8,4), %xmm1
    000013de: 	addq	$0x1, %r11
    000013e2: 	addq	%rcx, %rsi
    000013e5: 	movss	%xmm1, (%rdi,%r8,4)
    000013eb: 	addq	%r14, %r8
    000013ee: 	cmpq	%r11, 0x80(%rsp)
    000013f6: 	jne	.Ltmp1070 # Offset: 5110
    000013f8: 	addq	$0x1, %r9
    000013fc: 	addq	$0x4, %rdi
    00001400: 	addq	$0x4, %r10
    00001404: 	cmpq	%r9, %r14
    00001407: 	jne	.Ltmp1071 # Offset: 5127
    00001409: 	cmpq	$0x0, 0x80(%rsp)
    00001412: 	je	.Ltmp935 # Offset: 5138
.Ltmp1068:
    00001418: 	movq	0x30(%rsp), %rcx
    0000141d: 	movq	0x100(%rsp), %rsi
    00001425: 	leaq	(,%r14,4), %rbx
    0000142d: 	xorl	%edx, %edx
    0000142f: 	movq	DATAat0x2d9e0(%rip), %xmm4
    00001437: 	movsd	DATAat0x2da10(%rip), %xmm3
    0000143f: 	movss	DATAat0x2d9d0(%rip), %xmm5
    00001447: 	movq	%rcx, %rbp
.Ltmp1234:
    0000144a: 	xorl	%eax, %eax
    0000144c: 	testq	%r14, %r14
    0000144f: 	jne	.Ltmp1072 # Offset: 5199
    00001451: 	jmp	.Ltmp1073 # Offset: 5201
    00001456: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1075:
    00001460: 	addq	$0x1, %rax
    00001464: 	cmpq	%rax, %r14
    00001467: 	je	.Ltmp1073 # Offset: 5223
.Ltmp1072:
    0000146d: 	movss	(%rsi,%rax,4), %xmm1
    00001472: 	movaps	%xmm1, %xmm2
    00001475: 	movaps	%xmm1, %xmm0
    00001478: 	subss	(%rcx,%rax,4), %xmm0
    0000147d: 	andps	%xmm5, %xmm2
    00001480: 	cvtss2sd	%xmm2, %xmm2
    00001484: 	comisd	DATAat0x2da08(%rip), %xmm2
    0000148c: 	jbe	.Ltmp1074 # Offset: 5260
    0000148e: 	divss	%xmm1, %xmm0
.Ltmp1074:
    00001492: 	cvtss2sd	%xmm0, %xmm0
    00001496: 	andpd	%xmm4, %xmm0
    0000149a: 	comisd	%xmm0, %xmm3
    0000149e: 	ja	.Ltmp1075 # Offset: 5278
    000014a0: 	leaq	DATAat0x2d440(%rip), %rsi
    000014a7: 	movl	$0x1, %edi
    000014ac: 	xorl	%eax, %eax
    000014ae: 	callq	__printf_chk@PLT # Offset: 5294
.Ltmp1236:
    000014b3: 	xorl	%r12d, %r12d
.Ltmp1076:
    000014b6: 	movq	%rbp, %rdi
    000014b9: 	movq	%rbx, %rdx
    000014bc: 	xorl	%esi, %esi
    000014be: 	addq	$0x1, %r12
    000014c2: 	callq	memset@PLT # Offset: 5314
    000014c7: 	addq	%rbx, %rbp
    000014ca: 	cmpq	%r12, 0x80(%rsp)
    000014d2: 	jne	.Ltmp1076 # Offset: 5330
    000014d4: 	movq	0x30(%rsp), %r9
    000014d9: 	movq	%r15, %r8
    000014dc: 	xorl	%edi, %edi
    000014de: 	movq	0x80(%rsp), %r10
    000014e6: 	leaq	(,%r14,4), %rsi
.Ltmp1079:
    000014ee: 	movq	0x38(%rsp), %rbp
    000014f3: 	movq	%r8, %rbx
    000014f6: 	xorl	%r11d, %r11d
.Ltmp1078:
    000014f9: 	movss	(%rbx), %xmm1
    000014fd: 	movq	%rbp, %rcx
    00001500: 	movq	%r9, %rax
    00001503: 	xorl	%edx, %edx
    00001505: 	nopl	(%rax) # Size: 3
.Ltmp1077:
    00001508: 	movss	(%rcx), %xmm0
    0000150c: 	addq	$0x1, %rdx
    00001510: 	addq	%rsi, %rcx
    00001513: 	mulss	%xmm1, %xmm0
    00001517: 	addss	(%rax), %xmm0
    0000151b: 	movss	%xmm0, (%rax)
    0000151f: 	addq	%rsi, %rax
    00001522: 	cmpq	%rdx, %r10
    00001525: 	jne	.Ltmp1077 # Offset: 5413
    00001527: 	addq	$0x1, %r11
    0000152b: 	addq	%rsi, %rbx
    0000152e: 	addq	$0x4, %rbp
    00001532: 	cmpq	%r11, %r14
    00001535: 	ja	.Ltmp1078 # Offset: 5429
    00001537: 	addq	$0x1, %rdi
    0000153b: 	addq	$0x4, %r9
    0000153f: 	addq	$0x4, %r8
    00001543: 	cmpq	%rdi, %r14
    00001546: 	ja	.Ltmp1079 # Offset: 5446
.Ltmp1235:
    00001548: 	movq	0x100(%rsp), %rcx
    00001550: 	movq	0x30(%rsp), %rsi
    00001555: 	leaq	(,%r14,4), %rbx
    0000155d: 	xorl	%edx, %edx
    0000155f: 	movq	DATAat0x2d9e0(%rip), %xmm4
    00001567: 	movsd	DATAat0x2da10(%rip), %xmm3
    0000156f: 	movss	DATAat0x2d9d0(%rip), %xmm5
    00001577: 	movq	%rcx, %rbp
    0000157a: 	movq	%rsi, %r12
.Ltmp1237:
    0000157d: 	xorl	%eax, %eax
    0000157f: 	testq	%r14, %r14
    00001582: 	jne	.Ltmp1080 # Offset: 5506
    00001584: 	jmp	.Ltmp1081 # Offset: 5508
    00001589: 	nopl	(%rax) # Size: 7
.Ltmp1083:
    00001590: 	addq	$0x1, %rax
    00001594: 	cmpq	%rax, %r14
    00001597: 	je	.Ltmp1081 # Offset: 5527
.Ltmp1080:
    0000159d: 	movss	(%rcx,%rax,4), %xmm1
    000015a2: 	movaps	%xmm1, %xmm2
    000015a5: 	movaps	%xmm1, %xmm0
    000015a8: 	subss	(%rsi,%rax,4), %xmm0
    000015ad: 	andps	%xmm5, %xmm2
    000015b0: 	cvtss2sd	%xmm2, %xmm2
    000015b4: 	comisd	DATAat0x2da08(%rip), %xmm2
    000015bc: 	jbe	.Ltmp1082 # Offset: 5564
    000015be: 	divss	%xmm1, %xmm0
.Ltmp1082:
    000015c2: 	cvtss2sd	%xmm0, %xmm0
    000015c6: 	andpd	%xmm4, %xmm0
    000015ca: 	comisd	%xmm0, %xmm3
    000015ce: 	ja	.Ltmp1083 # Offset: 5582
    000015d0: 	leaq	DATAat0x2d418(%rip), %rsi
    000015d7: 	movl	$0x1, %edi
    000015dc: 	xorl	%eax, %eax
    000015de: 	callq	__printf_chk@PLT # Offset: 5598
.Ltmp1239:
    000015e3: 	movq	0x30(%rsp), %rcx
    000015e8: 	xorl	%r13d, %r13d
.Ltmp1084:
    000015eb: 	movq	%rcx, %rdi
    000015ee: 	movq	%rbx, %rdx
    000015f1: 	xorl	%esi, %esi
    000015f3: 	addq	$0x1, %r13
    000015f7: 	callq	memset@PLT # Offset: 5623
    000015fc: 	movq	%rax, %rcx
    000015ff: 	addq	%rbx, %rcx
    00001602: 	cmpq	%r13, 0x80(%rsp)
    0000160a: 	ja	.Ltmp1084 # Offset: 5642
.Ltmp1238:
    0000160c: 	movq	0x30(%rsp), %r13
    00001611: 	movq	0x38(%rsp), %rdi
    00001616: 	movq	%r15, %rsi
    00001619: 	movq	%r14, %r8
    0000161c: 	movq	0x80(%rsp), %rcx
    00001624: 	movq	%r13, %rdx
    00001627: 	callq	"_ZN19matmul_KJI_unrolledIfEclEPKfS2_Pfmm.isra.0/1" # Offset: 5671
    0000162c: 	movq	0x100(%rsp), %rcx
    00001634: 	movq	%r13, %rsi
    00001637: 	xorl	%edx, %edx
    00001639: 	movq	DATAat0x2d9e0(%rip), %xmm4
    00001641: 	movsd	DATAat0x2da10(%rip), %xmm3
    00001649: 	movss	DATAat0x2d9d0(%rip), %xmm5
.Ltmp1240:
    00001651: 	xorl	%eax, %eax
    00001653: 	testq	%r14, %r14
    00001656: 	jne	.Ltmp1085 # Offset: 5718
    00001658: 	jmp	.Ltmp1086 # Offset: 5720
    0000165d: 	nopl	(%rax) # Size: 3
.Ltmp1088:
    00001660: 	addq	$0x1, %rax
    00001664: 	cmpq	%rax, %r14
    00001667: 	je	.Ltmp1086 # Offset: 5735
.Ltmp1085:
    0000166d: 	movss	(%rcx,%rax,4), %xmm1
    00001672: 	movaps	%xmm1, %xmm2
    00001675: 	movaps	%xmm1, %xmm0
    00001678: 	subss	(%rsi,%rax,4), %xmm0
    0000167d: 	andps	%xmm5, %xmm2
    00001680: 	cvtss2sd	%xmm2, %xmm2
    00001684: 	comisd	DATAat0x2da08(%rip), %xmm2
    0000168c: 	jbe	.Ltmp1087 # Offset: 5772
    0000168e: 	divss	%xmm1, %xmm0
.Ltmp1087:
    00001692: 	cvtss2sd	%xmm0, %xmm0
    00001696: 	andpd	%xmm4, %xmm0
    0000169a: 	comisd	%xmm0, %xmm3
    0000169e: 	ja	.Ltmp1088 # Offset: 5790
    000016a0: 	leaq	DATAat0x2d3e8(%rip), %rsi
    000016a7: 	movl	$0x1, %edi
    000016ac: 	xorl	%eax, %eax
    000016ae: 	callq	__printf_chk@PLT # Offset: 5806
.Ltmp1242:
    000016b3: 	movq	0x30(%rsp), %rcx
    000016b8: 	xorl	%r13d, %r13d
.Ltmp1089:
    000016bb: 	movq	%rcx, %rdi
    000016be: 	movq	%rbx, %rdx
    000016c1: 	xorl	%esi, %esi
    000016c3: 	addq	$0x1, %r13
    000016c7: 	callq	memset@PLT # Offset: 5831
    000016cc: 	movq	%rax, %rcx
    000016cf: 	addq	%rbx, %rcx
    000016d2: 	cmpq	%r13, 0x80(%rsp)
    000016da: 	ja	.Ltmp1089 # Offset: 5850
.Ltmp1241:
    000016dc: 	movq	0x30(%rsp), %r13
    000016e1: 	movq	0x38(%rsp), %rdi
    000016e6: 	movq	%r14, %r8
    000016e9: 	movq	%r15, %rsi
    000016ec: 	movq	0x80(%rsp), %rcx
    000016f4: 	movq	%r13, %rdx
    000016f7: 	callq	"_ZN19matmul_JKI_unrolledIfEclEPKfS2_Pfmm.isra.0/1" # Offset: 5879
    000016fc: 	movq	DATAat0x2d9e0(%rip), %xmm4
    00001704: 	movq	%r13, %rcx
    00001707: 	xorl	%edx, %edx
    00001709: 	movsd	DATAat0x2da10(%rip), %xmm3
    00001711: 	movss	DATAat0x2d9d0(%rip), %xmm5
.Ltmp1243:
    00001719: 	xorl	%eax, %eax
    0000171b: 	testq	%r14, %r14
    0000171e: 	jne	.Ltmp1090 # Offset: 5918
    00001720: 	jmp	.Ltmp1091 # Offset: 5920
    00001725: 	nopl	(%rax) # Size: 3
.Ltmp1093:
    00001728: 	addq	$0x1, %rax
    0000172c: 	cmpq	%rax, %r14
    0000172f: 	je	.Ltmp1091 # Offset: 5935
.Ltmp1090:
    00001735: 	movss	(%rbp,%rax,4), %xmm1
    0000173b: 	movaps	%xmm1, %xmm2
    0000173e: 	movaps	%xmm1, %xmm0
    00001741: 	subss	(%rcx,%rax,4), %xmm0
    00001746: 	andps	%xmm5, %xmm2
    00001749: 	cvtss2sd	%xmm2, %xmm2
    0000174d: 	comisd	DATAat0x2da08(%rip), %xmm2
    00001755: 	jbe	.Ltmp1092 # Offset: 5973
    00001757: 	divss	%xmm1, %xmm0
.Ltmp1092:
    0000175b: 	cvtss2sd	%xmm0, %xmm0
    0000175f: 	andpd	%xmm4, %xmm0
    00001763: 	comisd	%xmm0, %xmm3
    00001767: 	ja	.Ltmp1093 # Offset: 5991
    00001769: 	leaq	DATAat0x2d3b8(%rip), %rsi
    00001770: 	movl	$0x1, %edi
    00001775: 	xorl	%eax, %eax
    00001777: 	callq	__printf_chk@PLT # Offset: 6007
.Ltmp1245:
    0000177c: 	xorl	%ebp, %ebp
.Ltmp1094:
    0000177e: 	movq	%r12, %rdi
    00001781: 	movq	%rbx, %rdx
    00001784: 	xorl	%esi, %esi
    00001786: 	addq	$0x1, %rbp
    0000178a: 	callq	memset@PLT # Offset: 6026
    0000178f: 	addq	%rbx, %r12
    00001792: 	cmpq	%rbp, 0x80(%rsp)
    0000179a: 	ja	.Ltmp1094 # Offset: 6042
    0000179c: 	movq	%r14, %rax
    0000179f: 	movq	%r15, 0x20(%rsp)
    000017a4: 	leaq	(,%r14,4), %r8
    000017ac: 	pxor	%xmm2, %xmm2
    000017b0: 	shlq	$0x9, %rax
    000017b4: 	movq	%r15, 0x40(%rsp)
    000017b9: 	movq	%rax, 0x28(%rsp)
    000017be: 	movq	$0x0, 0x10(%rsp)
    000017c7: 	movq	%r14, 0x8(%rsp)
    000017cc: 	movq	0x80(%rsp), %r14
.Ltmp1101:
    000017d4: 	movq	0x10(%rsp), %r11
    000017d9: 	movq	0x8(%rsp), %rax
    000017de: 	movq	%r11, %r15
    000017e1: 	subq	$-0x80, %r11
    000017e5: 	cmpq	%r11, %rax
    000017e8: 	movq	%r11, 0x10(%rsp)
    000017ed: 	cmovbeq	%rax, %r11
    000017f1: 	cmpq	%r15, %r11
    000017f4: 	jbe	.Ltmp1095 # Offset: 6132
    000017fa: 	movq	$0x0, 0x18(%rsp)
    00001803: 	movq	0x20(%rsp), %r13
.Ltmp1100:
    00001808: 	movq	0x18(%rsp), %rbx
    0000180d: 	movq	0x8(%rsp), %rax
    00001812: 	movq	0x30(%rsp), %rdi
    00001817: 	movq	%rbx, %rbp
    0000181a: 	subq	$-0x80, %rbx
    0000181e: 	cmpq	%rbx, %rax
    00001821: 	movq	%rbx, 0x18(%rsp)
    00001826: 	cmovbeq	%rax, %rbx
    0000182a: 	movq	0x38(%rsp), %rax
    0000182f: 	xorl	%r12d, %r12d
    00001832: 	leaq	(%rax,%rbp,4), %r10
    00001836: 	leaq	(%rax,%rbx,4), %r9
    0000183a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1099:
    00001840: 	movq	%r13, %rsi
    00001843: 	movq	%r15, %rcx
    00001846: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1098:
    00001850: 	movq	%r10, %rax
    00001853: 	movq	%rsi, %rdx
    00001856: 	movaps	%xmm2, %xmm0
    00001859: 	cmpq	%rbp, %rbx
    0000185c: 	jbe	.Ltmp1096 # Offset: 6236
    0000185e: 	nop # Size: 2
.Ltmp1097:
    00001860: 	movss	(%rdx), %xmm1
    00001864: 	mulss	(%rax), %xmm1
    00001868: 	addq	$0x4, %rax
    0000186c: 	addq	%r8, %rdx
    0000186f: 	addss	%xmm1, %xmm0
    00001873: 	cmpq	%rax, %r9
    00001876: 	jne	.Ltmp1097 # Offset: 6262
.Ltmp1096:
    00001878: 	addss	(%rdi,%rcx,4), %xmm0
    0000187d: 	addq	$0x4, %rsi
    00001881: 	movss	%xmm0, (%rdi,%rcx,4)
    00001886: 	addq	$0x1, %rcx
    0000188a: 	cmpq	%rcx, %r11
    0000188d: 	jne	.Ltmp1098 # Offset: 6285
    0000188f: 	addq	$0x1, %r12
    00001893: 	addq	%r8, %rdi
    00001896: 	addq	%r8, %r10
    00001899: 	addq	%r8, %r9
    0000189c: 	cmpq	%r12, %r14
    0000189f: 	jne	.Ltmp1099 # Offset: 6303
    000018a1: 	movq	0x18(%rsp), %rdi
    000018a6: 	addq	0x28(%rsp), %r13
    000018ab: 	cmpq	%rdi, 0x8(%rsp)
    000018b0: 	ja	.Ltmp1100 # Offset: 6320
.Ltmp1095:
    000018b6: 	addq	$0x200, 0x20(%rsp)
    000018bf: 	movq	0x10(%rsp), %rdi
    000018c4: 	cmpq	%rdi, 0x8(%rsp)
    000018c9: 	ja	.Ltmp1101 # Offset: 6345
    000018cf: 	movq	0x40(%rsp), %r15
    000018d4: 	movq	0x8(%rsp), %r14
.Ltmp1244:
    000018d9: 	movq	0x30(%rsp), %rcx
    000018de: 	movq	0x100(%rsp), %rsi
    000018e6: 	leaq	(,%r14,4), %rbx
    000018ee: 	xorl	%edx, %edx
    000018f0: 	movq	DATAat0x2d9e0(%rip), %xmm4
    000018f8: 	movsd	DATAat0x2da10(%rip), %xmm3
    00001900: 	movss	DATAat0x2d9d0(%rip), %xmm5
    00001908: 	movq	%rcx, %rbp
.Ltmp1246:
    0000190b: 	xorl	%eax, %eax
    0000190d: 	testq	%r14, %r14
    00001910: 	jne	.Ltmp1102 # Offset: 6416
    00001912: 	jmp	.Ltmp1103 # Offset: 6418
    00001917: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1105:
    00001920: 	addq	$0x1, %rax
    00001924: 	cmpq	%rax, %r14
    00001927: 	je	.Ltmp1103 # Offset: 6439
.Ltmp1102:
    0000192d: 	movss	(%rsi,%rax,4), %xmm1
    00001932: 	movaps	%xmm1, %xmm2
    00001935: 	movaps	%xmm1, %xmm0
    00001938: 	subss	(%rcx,%rax,4), %xmm0
    0000193d: 	andps	%xmm5, %xmm2
    00001940: 	cvtss2sd	%xmm2, %xmm2
    00001944: 	comisd	DATAat0x2da08(%rip), %xmm2
    0000194c: 	jbe	.Ltmp1104 # Offset: 6476
    0000194e: 	divss	%xmm1, %xmm0
.Ltmp1104:
    00001952: 	cvtss2sd	%xmm0, %xmm0
    00001956: 	andpd	%xmm4, %xmm0
    0000195a: 	comisd	%xmm0, %xmm3
    0000195e: 	ja	.Ltmp1105 # Offset: 6494
    00001960: 	leaq	DATAat0x2d390(%rip), %rsi
    00001967: 	movl	$0x1, %edi
    0000196c: 	xorl	%eax, %eax
    0000196e: 	callq	__printf_chk@PLT # Offset: 6510
.Ltmp1248:
    00001973: 	xorl	%r12d, %r12d
.Ltmp1106:
    00001976: 	movq	%rbp, %rdi
    00001979: 	movq	%rbx, %rdx
    0000197c: 	xorl	%esi, %esi
    0000197e: 	addq	$0x1, %r12
    00001982: 	callq	memset@PLT # Offset: 6530
    00001987: 	addq	%rbx, %rbp
    0000198a: 	cmpq	%r12, 0x80(%rsp)
    00001992: 	ja	.Ltmp1106 # Offset: 6546
    00001994: 	movq	%r14, %rax
    00001997: 	movq	%r15, 0x98(%rsp)
    0000199f: 	shlq	$0x9, %rax
    000019a3: 	movq	%r14, 0x20(%rsp)
    000019a8: 	movq	%rax, 0xb0(%rsp)
    000019b0: 	movq	%r14, %rax
    000019b3: 	movq	$0x0, 0x68(%rsp)
    000019bc: 	shlq	$0x7, %rax
    000019c0: 	movq	%rax, 0xa8(%rsp)
    000019c8: 	leaq	(,%r14,4), %rax
    000019d0: 	movq	0x30(%rsp), %r14
    000019d5: 	movq	%rax, 0x28(%rsp)
    000019da: 	movq	$0x0, 0x88(%rsp)
.Ltmp1117:
    000019e6: 	movq	0x88(%rsp), %rax
    000019ee: 	movq	0x20(%rsp), %rdi
    000019f3: 	movq	%rax, %rdx
    000019f6: 	subq	$-0x80, %rax
    000019fa: 	cmpq	%rax, %rdi
    000019fd: 	movq	%rax, 0x88(%rsp)
    00001a05: 	cmovbeq	%rdi, %rax
    00001a09: 	cmpq	%rdx, %rax
    00001a0c: 	jbe	.Ltmp1107 # Offset: 6668
    00001a12: 	movq	0x38(%rsp), %rdi
    00001a17: 	shlq	$0x2, %rax
    00001a1b: 	shlq	$0x2, %rdx
    00001a1f: 	movq	%r14, 0xa0(%rsp)
    00001a27: 	movq	$0x0, 0x90(%rsp)
    00001a33: 	subq	%rax, %rdx
    00001a36: 	addq	%rax, %rdi
    00001a39: 	movq	0x98(%rsp), %rax
    00001a41: 	movq	%rdx, 0x78(%rsp)
    00001a46: 	movq	%rdi, 0xb8(%rsp)
    00001a4e: 	movq	%rax, 0x70(%rsp)
.Ltmp1116:
    00001a53: 	movq	0x90(%rsp), %r12
    00001a5b: 	movq	0x20(%rsp), %rdi
    00001a60: 	movq	%r12, 0x18(%rsp)
    00001a65: 	movq	%r12, %rax
    00001a68: 	addq	$0x384, %r12
    00001a6f: 	cmpq	%r12, %rdi
    00001a72: 	movq	%r12, 0x90(%rsp)
    00001a7a: 	cmovbeq	%rdi, %r12
    00001a7e: 	cmpq	%rax, %r12
    00001a81: 	jbe	.Ltmp1108 # Offset: 6785
    00001a87: 	leaq	(%r14,%r12,4), %rbx
    00001a8b: 	subq	%rax, %r12
    00001a8e: 	movq	%rax, 0x8(%rsp)
    00001a93: 	movq	0xa0(%rsp), %rcx
    00001a9b: 	leaq	-0x1(%r12), %rdi
    00001aa0: 	movq	%r12, %rsi
    00001aa3: 	movq	%r12, %rbp
    00001aa6: 	movq	$0x0, 0x60(%rsp)
    00001aaf: 	movq	%rdi, 0x40(%rsp)
    00001ab4: 	movq	%rax, %rdi
    00001ab7: 	andq	$-0x4, %rsi
    00001abb: 	shrq	$0x2, %rbp
    00001abf: 	movq	0xb8(%rsp), %rax
    00001ac7: 	addq	%rsi, %rdi
    00001aca: 	movq	%rsi, 0x48(%rsp)
    00001acf: 	shlq	$0x4, %rbp
    00001ad3: 	movq	%rdi, 0x50(%rsp)
    00001ad8: 	movq	%rax, 0x10(%rsp)
    00001add: 	movq	%r12, %rax
    00001ae0: 	subq	%rsi, %rax
    00001ae3: 	movq	%rax, 0x58(%rsp)
    00001ae8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1115:
    00001af0: 	movq	0x68(%rsp), %rdi
    00001af5: 	movq	0x70(%rsp), %rdx
    00001afa: 	movq	0x8(%rsp), %r13
    00001aff: 	movq	0x78(%rsp), %r8
    00001b04: 	subq	0x18(%rsp), %r13
    00001b09: 	addq	0x10(%rsp), %r8
    00001b0e: 	nop # Size: 2
.Ltmp1114:
    00001b10: 	movq	0x18(%rsp), %rax
    00001b15: 	leaq	0x4(%rdx), %rsi
    00001b19: 	movss	(%r8), %xmm0
    00001b1e: 	leaq	(%rax,%rdi), %r11
    00001b22: 	movq	%rcx, %rax
    00001b25: 	subq	%rsi, %rax
    00001b28: 	cmpq	$0x8, %rax
    00001b2c: 	jbe	.Ltmp1109 # Offset: 6956
    00001b32: 	cmpq	$0x1, %r12
    00001b36: 	je	.Ltmp1109 # Offset: 6966
    00001b3c: 	cmpq	$0x2, 0x40(%rsp)
    00001b42: 	jbe	.Ltmp1110 # Offset: 6978
    00001b48: 	movaps	%xmm0, %xmm2
    00001b4b: 	xorl	%eax, %eax
    00001b4d: 	shufps	$0x0, %xmm2, %xmm2
.Ltmp1111:
    00001b51: 	movups	(%rdx,%rax), %xmm1
    00001b55: 	movups	(%rcx,%rax), %xmm7
    00001b59: 	mulps	%xmm2, %xmm1
    00001b5c: 	addps	%xmm7, %xmm1
    00001b5f: 	movups	%xmm1, (%rcx,%rax)
    00001b63: 	addq	$0x10, %rax
    00001b67: 	cmpq	%rax, %rbp
    00001b6a: 	jne	.Ltmp1111 # Offset: 7018
    00001b6c: 	movq	0x48(%rsp), %rsi
    00001b71: 	cmpq	%r12, %rsi
    00001b74: 	je	.Ltmp1112 # Offset: 7028
    00001b76: 	movq	0x58(%rsp), %rax
    00001b7b: 	cmpq	$0x1, %rax
    00001b7f: 	movq	%rax, %r10
    00001b82: 	movq	0x50(%rsp), %rax
    00001b87: 	je	.Ltmp1113 # Offset: 7047
.Ltmp1250:
    00001b89: 	movq	0x8(%rsp), %r9
    00001b8e: 	movaps	%xmm0, %xmm2
    00001b91: 	shufps	$0xe0, %xmm2, %xmm2
    00001b95: 	addq	%rsi, %r9
    00001b98: 	addq	%r11, %rsi
    00001b9b: 	movq	(%r15,%rsi,4), %xmm1
    00001ba1: 	leaq	(%r14,%r9,4), %r9
    00001ba5: 	movq	%r10, %rsi
    00001ba8: 	andq	$-0x2, %rsi
    00001bac: 	mulps	%xmm2, %xmm1
    00001baf: 	movq	(%r9), %xmm2
    00001bb4: 	addq	%rsi, %rax
    00001bb7: 	addps	%xmm2, %xmm1
    00001bba: 	movlps	%xmm1, (%r9)
    00001bbe: 	cmpq	%rsi, %r10
    00001bc1: 	je	.Ltmp1112 # Offset: 7105
.Ltmp1113:
    00001bc3: 	leaq	(%rax,%r13), %rsi
    00001bc7: 	addq	%rdi, %rax
    00001bca: 	mulss	(%r15,%rax,4), %xmm0
    00001bd0: 	leaq	(%r14,%rsi,4), %rsi
    00001bd4: 	addss	(%rsi), %xmm0
    00001bd8: 	movss	%xmm0, (%rsi)
.Ltmp1112:
    00001bdc: 	addq	$0x4, %r8
    00001be0: 	addq	0x28(%rsp), %rdx
    00001be5: 	addq	0x20(%rsp), %rdi
    00001bea: 	cmpq	%r8, 0x10(%rsp)
    00001bef: 	jne	.Ltmp1114 # Offset: 7151
    00001bf5: 	movq	0x28(%rsp), %rdi
    00001bfa: 	addq	$0x1, 0x60(%rsp)
    00001c00: 	movq	0x20(%rsp), %rsi
    00001c05: 	addq	%rdi, 0x10(%rsp)
    00001c0a: 	addq	%rsi, 0x8(%rsp)
    00001c0f: 	movq	0x60(%rsp), %rax
    00001c14: 	addq	%rdi, %rcx
    00001c17: 	addq	%rdi, %rbx
    00001c1a: 	cmpq	%rax, 0x80(%rsp)
    00001c22: 	jne	.Ltmp1115 # Offset: 7202
.Ltmp1108:
    00001c28: 	addq	$0xe10, 0x70(%rsp)
    00001c31: 	movq	0x90(%rsp), %rdi
    00001c39: 	addq	$0xe10, 0xa0(%rsp)
    00001c45: 	cmpq	%rdi, 0x20(%rsp)
    00001c4a: 	ja	.Ltmp1116 # Offset: 7242
.Ltmp1107:
    00001c50: 	movq	0xb0(%rsp), %rdi
    00001c58: 	addq	%rdi, 0x98(%rsp)
    00001c60: 	movq	0xa8(%rsp), %rdi
    00001c68: 	addq	%rdi, 0x68(%rsp)
    00001c6d: 	movq	0x88(%rsp), %rdi
    00001c75: 	cmpq	%rdi, 0x20(%rsp)
    00001c7a: 	ja	.Ltmp1117 # Offset: 7290
    00001c80: 	movq	0x20(%rsp), %r14
.Ltmp1247:
    00001c85: 	movq	0x100(%rsp), %rcx
    00001c8d: 	movq	0x30(%rsp), %rsi
    00001c92: 	leaq	(,%r14,4), %r13
    00001c9a: 	xorl	%edx, %edx
    00001c9c: 	movq	DATAat0x2d9e0(%rip), %xmm4
    00001ca4: 	movsd	DATAat0x2da10(%rip), %xmm3
    00001cac: 	movss	DATAat0x2d9d0(%rip), %xmm5
    00001cb4: 	movq	%rcx, 0x40(%rsp)
    00001cb9: 	movq	%rsi, 0x60(%rsp)
.Ltmp1251:
    00001cbe: 	xorl	%eax, %eax
    00001cc0: 	testq	%r14, %r14
    00001cc3: 	jne	.Ltmp1118 # Offset: 7363
    00001cc5: 	jmp	.Ltmp1119 # Offset: 7365
    00001cca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1121:
    00001cd0: 	addq	$0x1, %rax
    00001cd4: 	cmpq	%rax, %r14
    00001cd7: 	je	.Ltmp1119 # Offset: 7383
.Ltmp1118:
    00001cdd: 	movss	(%rcx,%rax,4), %xmm1
    00001ce2: 	movaps	%xmm1, %xmm2
    00001ce5: 	movaps	%xmm1, %xmm0
    00001ce8: 	subss	(%rsi,%rax,4), %xmm0
    00001ced: 	andps	%xmm5, %xmm2
    00001cf0: 	cvtss2sd	%xmm2, %xmm2
    00001cf4: 	comisd	DATAat0x2da08(%rip), %xmm2
    00001cfc: 	jbe	.Ltmp1120 # Offset: 7420
    00001cfe: 	divss	%xmm1, %xmm0
.Ltmp1120:
    00001d02: 	cvtss2sd	%xmm0, %xmm0
    00001d06: 	andpd	%xmm4, %xmm0
    00001d0a: 	comisd	%xmm0, %xmm3
    00001d0e: 	ja	.Ltmp1121 # Offset: 7438
    00001d10: 	leaq	DATAat0x2d368(%rip), %rsi
    00001d17: 	movl	$0x1, %edi
    00001d1c: 	xorl	%eax, %eax
    00001d1e: 	callq	__printf_chk@PLT # Offset: 7454
.Ltmp1253:
    00001d23: 	movq	0x30(%rsp), %rcx
    00001d28: 	xorl	%ebx, %ebx
.Ltmp1122:
    00001d2a: 	movq	%rcx, %rdi
    00001d2d: 	movq	%r13, %rdx
    00001d30: 	xorl	%esi, %esi
    00001d32: 	addq	$0x1, %rbx
    00001d36: 	callq	memset@PLT # Offset: 7478
    00001d3b: 	movq	%rax, %rcx
    00001d3e: 	addq	%r13, %rcx
    00001d41: 	cmpq	%rbx, 0x80(%rsp)
    00001d49: 	ja	.Ltmp1122 # Offset: 7497
    00001d4b: 	movq	%r14, %rax
    00001d4e: 	movq	%r15, 0x48(%rsp)
    00001d53: 	pxor	%xmm2, %xmm2
    00001d57: 	movq	$0x0, 0x8(%rsp)
    00001d60: 	shlq	$0x7, %rax
    00001d64: 	movq	%rax, 0x50(%rsp)
    00001d69: 	movq	%r14, %rax
    00001d6c: 	movq	$0x0, 0x18(%rsp)
    00001d75: 	shlq	$0x9, %rax
    00001d79: 	movq	%rax, 0x58(%rsp)
.Ltmp1129:
    00001d7e: 	movq	0x18(%rsp), %rbx
    00001d83: 	movq	0x80(%rsp), %rax
    00001d8b: 	movq	$0x0, 0x20(%rsp)
    00001d94: 	movq	%rbx, %r15
    00001d97: 	subq	$-0x80, %rbx
    00001d9b: 	cmpq	%rbx, %rax
    00001d9e: 	movq	%rbx, 0x18(%rsp)
    00001da3: 	cmovbeq	%rax, %rbx
    00001da7: 	movq	0x48(%rsp), %rax
    00001dac: 	movq	%rax, 0x28(%rsp)
    00001db1: 	cmpq	%r15, %rbx
    00001db4: 	jbe	.Ltmp1123 # Offset: 7604
.Ltmp1128:
    00001dba: 	movq	0x20(%rsp), %rax
    00001dbf: 	movq	0x38(%rsp), %rdi
    00001dc4: 	movq	0x28(%rsp), %r9
    00001dc9: 	movq	0x30(%rsp), %r8
    00001dce: 	movq	%rax, %rbp
    00001dd1: 	subq	$-0x80, %rax
    00001dd5: 	cmpq	%rax, %r14
    00001dd8: 	movq	%rax, 0x20(%rsp)
    00001ddd: 	movq	%rbp, %r10
    00001de0: 	cmovbeq	%r14, %rax
    00001de4: 	xorl	%r12d, %r12d
    00001de7: 	movq	%rax, %r11
    00001dea: 	movq	0x8(%rsp), %rax
    00001def: 	subq	%r11, %r10
    00001df2: 	addq	%r11, %rax
    00001df5: 	shlq	$0x2, %r10
    00001df9: 	leaq	(%rdi,%rax,4), %rax
    00001dfd: 	movq	%rax, 0x10(%rsp)
    00001e02: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1127:
    00001e08: 	movq	0x10(%rsp), %rcx
    00001e0d: 	movq	0x8(%rsp), %rsi
    00001e12: 	movq	%r15, %rdi
    00001e15: 	nopl	(%rax) # Size: 3
.Ltmp1126:
    00001e18: 	leaq	(%r10,%rcx), %rax
    00001e1c: 	movq	%r9, %rdx
    00001e1f: 	movaps	%xmm2, %xmm0
    00001e22: 	cmpq	%rbp, %r11
    00001e25: 	jbe	.Ltmp1124 # Offset: 7717
    00001e27: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1125:
    00001e30: 	movss	(%rdx), %xmm1
    00001e34: 	mulss	(%rax), %xmm1
    00001e38: 	addq	$0x4, %rax
    00001e3c: 	addq	%r13, %rdx
    00001e3f: 	addss	%xmm1, %xmm0
    00001e43: 	cmpq	%rax, %rcx
    00001e46: 	jne	.Ltmp1125 # Offset: 7750
.Ltmp1124:
    00001e48: 	addss	(%r8,%rsi,4), %xmm0
    00001e4e: 	addq	$0x1, %rdi
    00001e52: 	addq	%r13, %rcx
    00001e55: 	movss	%xmm0, (%r8,%rsi,4)
    00001e5b: 	addq	%r14, %rsi
    00001e5e: 	cmpq	%rdi, %rbx
    00001e61: 	jne	.Ltmp1126 # Offset: 7777
    00001e63: 	addq	$0x1, %r12
    00001e67: 	addq	$0x4, %r8
    00001e6b: 	addq	$0x4, %r9
    00001e6f: 	cmpq	%r12, %r14
    00001e72: 	jne	.Ltmp1127 # Offset: 7794
    00001e74: 	movq	0x58(%rsp), %rdi
    00001e79: 	addq	%rdi, 0x28(%rsp)
    00001e7e: 	cmpq	%r14, 0x20(%rsp)
    00001e83: 	jb	.Ltmp1128 # Offset: 7811
.Ltmp1123:
    00001e89: 	movq	0x50(%rsp), %rdi
    00001e8e: 	addq	%rdi, 0x8(%rsp)
    00001e93: 	movq	0x18(%rsp), %rdi
    00001e98: 	cmpq	%rdi, 0x80(%rsp)
    00001ea0: 	ja	.Ltmp1129 # Offset: 7840
    00001ea6: 	movq	0x48(%rsp), %r15
.Ltmp1252:
    00001eab: 	movq	0x30(%rsp), %rcx
    00001eb0: 	movq	DATAat0x2d9e0(%rip), %xmm4
    00001eb8: 	xorl	%edx, %edx
    00001eba: 	movss	DATAat0x2d9d0(%rip), %xmm5
    00001ec2: 	movsd	DATAat0x2da10(%rip), %xmm3
.Ltmp1254:
    00001eca: 	xorl	%eax, %eax
    00001ecc: 	testq	%r14, %r14
    00001ecf: 	jne	.Ltmp1130 # Offset: 7887
    00001ed1: 	jmp	.Ltmp1131 # Offset: 7889
    00001ed6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1133:
    00001ee0: 	addq	$0x1, %rax
    00001ee4: 	cmpq	%rax, %r14
    00001ee7: 	je	.Ltmp1131 # Offset: 7911
.Ltmp1130:
    00001eed: 	movq	0x40(%rsp), %rdi
    00001ef2: 	movss	(%rdi,%rax,4), %xmm1
    00001ef7: 	movaps	%xmm1, %xmm2
    00001efa: 	movaps	%xmm1, %xmm0
    00001efd: 	subss	(%rcx,%rax,4), %xmm0
    00001f02: 	andps	%xmm5, %xmm2
    00001f05: 	cvtss2sd	%xmm2, %xmm2
    00001f09: 	comisd	DATAat0x2da08(%rip), %xmm2
    00001f11: 	jbe	.Ltmp1132 # Offset: 7953
    00001f13: 	divss	%xmm1, %xmm0
.Ltmp1132:
    00001f17: 	cvtss2sd	%xmm0, %xmm0
    00001f1b: 	andpd	%xmm4, %xmm0
    00001f1f: 	comisd	%xmm0, %xmm3
    00001f23: 	ja	.Ltmp1133 # Offset: 7971
    00001f25: 	leaq	DATAat0x2d340(%rip), %rsi
    00001f2c: 	movl	$0x1, %edi
    00001f31: 	xorl	%eax, %eax
    00001f33: 	callq	__printf_chk@PLT # Offset: 7987
.Ltmp1255:
    00001f38: 	movq	0x60(%rsp), %rcx
    00001f3d: 	xorl	%ebx, %ebx
.Ltmp1134:
    00001f3f: 	movq	%rcx, %rdi
    00001f42: 	movq	%r13, %rdx
    00001f45: 	xorl	%esi, %esi
    00001f47: 	addq	$0x1, %rbx
    00001f4b: 	callq	memset@PLT # Offset: 8011
    00001f50: 	movq	%rax, %rcx
    00001f53: 	addq	%r13, %rcx
    00001f56: 	cmpq	%rbx, 0x80(%rsp)
    00001f5e: 	ja	.Ltmp1134 # Offset: 8030
    00001f60: 	cmpq	$0x0, 0x80(%rsp)
    00001f69: 	je	.Ltmp1135 # Offset: 8041
    00001f6f: 	movq	%r14, %rax
    00001f72: 	movq	%r14, %rbp
    00001f75: 	leaq	(%r14,%r14), %r12
    00001f79: 	movq	%r15, 0x60(%rsp)
    00001f7e: 	shlq	$0x9, %rax
    00001f82: 	shlq	$0x4, %rbp
    00001f86: 	leaq	(%r12,%r14), %r13
    00001f8a: 	pxor	%xmm3, %xmm3
    00001f8e: 	movq	%rax, 0x68(%rsp)
    00001f93: 	leaq	(,%r14,4), %rbx
    00001f9b: 	movq	$0x0, 0x50(%rsp)
    00001fa4: 	movq	%r15, 0x20(%rsp)
    00001fa9: 	movq	%rbx, %r15
.Ltmp1144:
    00001fac: 	movq	0x50(%rsp), %rdi
    00001fb1: 	movq	%rdi, 0x48(%rsp)
    00001fb6: 	movq	%rdi, %rax
    00001fb9: 	subq	$-0x80, %rdi
    00001fbd: 	cmpq	%rdi, %r14
    00001fc0: 	movq	%rdi, 0x50(%rsp)
    00001fc5: 	cmovbeq	%r14, %rdi
    00001fc9: 	movq	%rdi, 0x8(%rsp)
    00001fce: 	cmpq	%rax, %rdi
    00001fd1: 	jbe	.Ltmp1136 # Offset: 8145
    00001fd7: 	movq	$0x0, 0x58(%rsp)
    00001fe0: 	movq	0x60(%rsp), %rax
    00001fe5: 	movq	%rax, 0x40(%rsp)
.Ltmp1143:
    00001fea: 	movq	0x58(%rsp), %rax
    00001fef: 	movq	0x38(%rsp), %rdi
    00001ff4: 	movq	$0x0, 0x28(%rsp)
    00001ffd: 	movq	0x30(%rsp), %r9
    00002002: 	movq	%rax, %r10
    00002005: 	subq	$-0x80, %rax
    00002009: 	cmpq	%rax, %r14
    0000200c: 	movq	%rax, 0x58(%rsp)
    00002011: 	leaq	(%rdi,%r10,4), %rcx
    00002015: 	cmovbeq	%r14, %rax
    00002019: 	movq	%rcx, 0x18(%rsp)
    0000201e: 	xorl	%ebx, %ebx
    00002020: 	movq	%rax, 0x10(%rsp)
    00002025: 	leaq	-0x3(%rax), %r8
    00002029: 	leaq	(%rdi,%rax,4), %r11
    0000202d: 	nopl	(%rax) # Size: 3
.Ltmp1142:
    00002030: 	movq	0x40(%rsp), %rdi
    00002035: 	movq	0x48(%rsp), %rsi
    0000203a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1141:
    00002040: 	cmpq	%r10, %r8
    00002043: 	jbe	.Ltmp1137 # Offset: 8259
    00002049: 	movq	0x18(%rsp), %rcx
    0000204e: 	movq	%rdi, %rdx
    00002051: 	movq	%r10, %rax
    00002054: 	movaps	%xmm3, %xmm4
    00002057: 	movaps	%xmm3, %xmm5
    0000205a: 	movaps	%xmm3, %xmm0
    0000205d: 	movaps	%xmm3, %xmm1
.Ltmp1138:
    00002060: 	movss	(%rdx), %xmm2
    00002064: 	mulss	(%rcx), %xmm2
    00002068: 	addq	$0x4, %rax
    0000206c: 	addq	$0x10, %rcx
    00002070: 	addss	%xmm2, %xmm1
    00002074: 	movss	(%rdx,%r14,4), %xmm2
    0000207a: 	mulss	-0xc(%rcx), %xmm2
    0000207f: 	addss	%xmm2, %xmm0
    00002083: 	movss	(%rdx,%r12,4), %xmm2
    00002089: 	mulss	-0x8(%rcx), %xmm2
    0000208e: 	addss	%xmm2, %xmm5
    00002092: 	movss	(%rdx,%r13,4), %xmm2
    00002098: 	mulss	-0x4(%rcx), %xmm2
    0000209d: 	addq	%rbp, %rdx
    000020a0: 	addss	%xmm2, %xmm4
    000020a4: 	cmpq	%r8, %rax
    000020a7: 	jb	.Ltmp1138 # Offset: 8359
.Ltmp1258:
    000020a9: 	cmpq	%rax, 0x10(%rsp)
    000020ae: 	jbe	.Ltmp1139 # Offset: 8366
    000020b0: 	movq	%r14, %rdx
    000020b3: 	movq	0x20(%rsp), %rcx
    000020b8: 	imulq	%rax, %rdx
    000020bc: 	addq	%rbx, %rax
    000020bf: 	addq	%rsi, %rdx
    000020c2: 	leaq	(%rcx,%rdx,4), %rdx
    000020c6: 	movq	0x38(%rsp), %rcx
    000020cb: 	leaq	(%rcx,%rax,4), %rax
    000020cf: 	nop # Size: 1
.Ltmp1140:
    000020d0: 	movss	(%rdx), %xmm2
    000020d4: 	mulss	(%rax), %xmm2
    000020d8: 	addq	$0x4, %rax
    000020dc: 	addq	%r15, %rdx
    000020df: 	addss	%xmm2, %xmm1
    000020e3: 	cmpq	%rax, %r11
    000020e6: 	jne	.Ltmp1140 # Offset: 8422
.Ltmp1139:
    000020e8: 	addss	%xmm1, %xmm0
    000020ec: 	addq	$0x4, %rdi
    000020f0: 	addss	%xmm5, %xmm0
    000020f4: 	addss	%xmm4, %xmm0
    000020f8: 	addss	(%r9,%rsi,4), %xmm0
    000020fe: 	movss	%xmm0, (%r9,%rsi,4)
    00002104: 	addq	$0x1, %rsi
    00002108: 	cmpq	%rsi, 0x8(%rsp)
    0000210d: 	jne	.Ltmp1141 # Offset: 8461
    00002113: 	addq	$0x1, 0x28(%rsp)
    00002119: 	addq	%r14, %rbx
    0000211c: 	addq	%r15, %r9
    0000211f: 	addq	%r15, %r11
    00002122: 	addq	%r15, 0x18(%rsp)
    00002127: 	movq	0x28(%rsp), %rax
    0000212c: 	cmpq	%rax, 0x80(%rsp)
    00002134: 	jne	.Ltmp1142 # Offset: 8500
    0000213a: 	movq	0x68(%rsp), %rdi
    0000213f: 	addq	%rdi, 0x40(%rsp)
    00002144: 	cmpq	0x58(%rsp), %r14
    00002149: 	ja	.Ltmp1143 # Offset: 8521
.Ltmp1136:
    0000214f: 	addq	$0x200, 0x60(%rsp)
    00002158: 	cmpq	0x50(%rsp), %r14
    0000215d: 	ja	.Ltmp1144 # Offset: 8541
    00002163: 	movq	0x20(%rsp), %r15
.Ltmp1256:
    00002168: 	movq	0x100(%rsp), %rcx
    00002170: 	movq	0x30(%rsp), %rsi
    00002175: 	leaq	(,%r14,4), %rbx
    0000217d: 	xorl	%edx, %edx
    0000217f: 	movq	DATAat0x2d9e0(%rip), %xmm4
    00002187: 	movsd	DATAat0x2da10(%rip), %xmm3
    0000218f: 	movss	DATAat0x2d9d0(%rip), %xmm5
    00002197: 	movq	%rcx, 0x68(%rsp)
    0000219c: 	movq	%rsi, 0x78(%rsp)
.Ltmp1259:
    000021a1: 	xorl	%eax, %eax
    000021a3: 	testq	%r14, %r14
    000021a6: 	jne	.Ltmp1145 # Offset: 8614
    000021a8: 	jmp	.Ltmp1146 # Offset: 8616
    000021ad: 	nopl	(%rax) # Size: 3
.Ltmp1148:
    000021b0: 	addq	$0x1, %rax
    000021b4: 	cmpq	%rax, %r14
    000021b7: 	je	.Ltmp1146 # Offset: 8631
.Ltmp1145:
    000021bd: 	movss	(%rcx,%rax,4), %xmm1
    000021c2: 	movaps	%xmm1, %xmm2
    000021c5: 	movaps	%xmm1, %xmm0
    000021c8: 	subss	(%rsi,%rax,4), %xmm0
    000021cd: 	andps	%xmm5, %xmm2
    000021d0: 	cvtss2sd	%xmm2, %xmm2
    000021d4: 	comisd	DATAat0x2da08(%rip), %xmm2
    000021dc: 	jbe	.Ltmp1147 # Offset: 8668
    000021de: 	divss	%xmm1, %xmm0
.Ltmp1147:
    000021e2: 	cvtss2sd	%xmm0, %xmm0
    000021e6: 	andpd	%xmm4, %xmm0
    000021ea: 	comisd	%xmm0, %xmm3
    000021ee: 	ja	.Ltmp1148 # Offset: 8686
    000021f0: 	leaq	DATAat0x2d308(%rip), %rsi
    000021f7: 	movl	$0x1, %edi
    000021fc: 	xorl	%eax, %eax
    000021fe: 	callq	__printf_chk@PLT # Offset: 8702
.Ltmp1261:
    00002203: 	movq	0x30(%rsp), %rcx
    00002208: 	xorl	%ebp, %ebp
.Ltmp1149:
    0000220a: 	movq	%rcx, %rdi
    0000220d: 	movq	%rbx, %rdx
    00002210: 	xorl	%esi, %esi
    00002212: 	addq	$0x1, %rbp
    00002216: 	callq	memset@PLT # Offset: 8726
    0000221b: 	movq	%rax, %rcx
    0000221e: 	addq	%rbx, %rcx
    00002221: 	cmpq	%rbp, 0x80(%rsp)
    00002229: 	jne	.Ltmp1149 # Offset: 8745
.Ltmp1260:
    0000222b: 	movq	0x30(%rsp), %rbp
    00002230: 	movq	0x38(%rsp), %rdi
    00002235: 	movq	%r15, %rsi
    00002238: 	movq	%r14, %r8
    0000223b: 	movq	0x80(%rsp), %rcx
    00002243: 	movq	%rbp, %rdx
    00002246: 	callq	"_ZN28matmul_JIK_blocked_unrolled2IfEclEPKfS2_Pfmm.isra.0/1" # Offset: 8774
    0000224b: 	movq	0x100(%rsp), %rcx
    00002253: 	movq	%rbp, %rsi
    00002256: 	xorl	%edx, %edx
    00002258: 	movq	DATAat0x2d9e0(%rip), %xmm4
    00002260: 	movsd	DATAat0x2da10(%rip), %xmm3
    00002268: 	movss	DATAat0x2d9d0(%rip), %xmm5
.Ltmp1262:
    00002270: 	xorl	%eax, %eax
    00002272: 	testq	%r14, %r14
    00002275: 	jne	.Ltmp1150 # Offset: 8821
    00002277: 	jmp	.Ltmp1151 # Offset: 8823
    0000227c: 	nopl	(%rax) # Size: 4
.Ltmp1153:
    00002280: 	addq	$0x1, %rax
    00002284: 	cmpq	%rax, %r14
    00002287: 	je	.Ltmp1151 # Offset: 8839
.Ltmp1150:
    0000228d: 	movss	(%rcx,%rax,4), %xmm1
    00002292: 	movaps	%xmm1, %xmm2
    00002295: 	movaps	%xmm1, %xmm0
    00002298: 	subss	(%rsi,%rax,4), %xmm0
    0000229d: 	andps	%xmm5, %xmm2
    000022a0: 	cvtss2sd	%xmm2, %xmm2
    000022a4: 	comisd	DATAat0x2da08(%rip), %xmm2
    000022ac: 	jbe	.Ltmp1152 # Offset: 8876
    000022ae: 	divss	%xmm1, %xmm0
.Ltmp1152:
    000022b2: 	cvtss2sd	%xmm0, %xmm0
    000022b6: 	andpd	%xmm4, %xmm0
    000022ba: 	comisd	%xmm0, %xmm3
    000022be: 	ja	.Ltmp1153 # Offset: 8894
    000022c0: 	leaq	DATAat0x2d2d0(%rip), %rsi
    000022c7: 	movl	$0x1, %edi
    000022cc: 	xorl	%eax, %eax
    000022ce: 	callq	__printf_chk@PLT # Offset: 8910
.Ltmp1264:
    000022d3: 	movq	0x30(%rsp), %rcx
    000022d8: 	xorl	%ebp, %ebp
.Ltmp1154:
    000022da: 	movq	%rcx, %rdi
    000022dd: 	movq	%rbx, %rdx
    000022e0: 	xorl	%esi, %esi
    000022e2: 	addq	$0x1, %rbp
    000022e6: 	callq	memset@PLT # Offset: 8934
    000022eb: 	movq	%rax, %rcx
    000022ee: 	addq	%rbx, %rcx
    000022f1: 	cmpq	%rbp, 0x80(%rsp)
    000022f9: 	jne	.Ltmp1154 # Offset: 8953
.Ltmp1263:
    000022fb: 	movq	0x30(%rsp), %rbp
    00002300: 	movq	0x38(%rsp), %rdi
    00002305: 	movq	%r15, %rsi
    00002308: 	movq	%r14, %r8
    0000230b: 	movq	0x80(%rsp), %rcx
    00002313: 	movq	%rbp, %rdx
    00002316: 	callq	"_ZN28matmul_JIK_blocked_unrolled3IfEclEPKfS2_Pfmm.isra.0/1" # Offset: 8982
    0000231b: 	movq	0x100(%rsp), %rcx
    00002323: 	movq	%rbp, %rsi
    00002326: 	xorl	%edx, %edx
    00002328: 	movq	DATAat0x2d9e0(%rip), %xmm4
    00002330: 	movsd	DATAat0x2da10(%rip), %xmm3
    00002338: 	movss	DATAat0x2d9d0(%rip), %xmm5
.Ltmp1265:
    00002340: 	xorl	%eax, %eax
    00002342: 	testq	%r14, %r14
    00002345: 	jne	.Ltmp1155 # Offset: 9029
    00002347: 	jmp	.Ltmp1156 # Offset: 9031
    0000234c: 	nopl	(%rax) # Size: 4
.Ltmp1158:
    00002350: 	addq	$0x1, %rax
    00002354: 	cmpq	%rax, %r14
    00002357: 	je	.Ltmp1156 # Offset: 9047
.Ltmp1155:
    0000235d: 	movss	(%rcx,%rax,4), %xmm1
    00002362: 	movaps	%xmm1, %xmm2
    00002365: 	movaps	%xmm1, %xmm0
    00002368: 	subss	(%rsi,%rax,4), %xmm0
    0000236d: 	andps	%xmm5, %xmm2
    00002370: 	cvtss2sd	%xmm2, %xmm2
    00002374: 	comisd	DATAat0x2da08(%rip), %xmm2
    0000237c: 	jbe	.Ltmp1157 # Offset: 9084
    0000237e: 	divss	%xmm1, %xmm0
.Ltmp1157:
    00002382: 	cvtss2sd	%xmm0, %xmm0
    00002386: 	andpd	%xmm4, %xmm0
    0000238a: 	comisd	%xmm0, %xmm3
    0000238e: 	ja	.Ltmp1158 # Offset: 9102
    00002390: 	leaq	DATAat0x2d298(%rip), %rsi
    00002397: 	movl	$0x1, %edi
    0000239c: 	xorl	%eax, %eax
    0000239e: 	callq	__printf_chk@PLT # Offset: 9118
.Ltmp1267:
    000023a3: 	movq	0x30(%rsp), %rcx
    000023a8: 	xorl	%ebp, %ebp
.Ltmp1159:
    000023aa: 	movq	%rcx, %rdi
    000023ad: 	movq	%rbx, %rdx
    000023b0: 	xorl	%esi, %esi
    000023b2: 	addq	$0x1, %rbp
    000023b6: 	callq	memset@PLT # Offset: 9142
    000023bb: 	movq	%rax, %rcx
    000023be: 	addq	%rbx, %rcx
    000023c1: 	cmpq	%rbp, 0x80(%rsp)
    000023c9: 	jne	.Ltmp1159 # Offset: 9161
    000023cb: 	movq	%r14, %rax
    000023ce: 	leaq	(%r14,%r14), %r12
    000023d2: 	movq	%r14, %rbp
    000023d5: 	movq	%r15, 0x20(%rsp)
    000023da: 	shlq	$0x7, %rax
    000023de: 	leaq	(%r12,%r14), %r13
    000023e2: 	shlq	$0x4, %rbp
    000023e6: 	pxor	%xmm3, %xmm3
    000023ea: 	movq	%rax, 0x88(%rsp)
    000023f2: 	movq	%r14, %rax
    000023f5: 	movq	%rbx, %r15
    000023f8: 	movq	$0x0, 0x40(%rsp)
    00002401: 	shlq	$0x9, %rax
    00002405: 	movq	$0x0, 0x58(%rsp)
    0000240e: 	movq	%rax, 0x90(%rsp)
    00002416: 	movq	%r13, %rax
    00002419: 	movq	%rbp, %r13
    0000241c: 	movq	%rax, %rbp
.Ltmp1168:
    0000241f: 	movq	0x58(%rsp), %rdi
    00002424: 	movq	0x80(%rsp), %rcx
    0000242c: 	movq	$0x0, 0x60(%rsp)
    00002435: 	movq	%rdi, 0x48(%rsp)
    0000243a: 	movq	%rdi, %rax
    0000243d: 	subq	$-0x80, %rdi
    00002441: 	cmpq	%rdi, %rcx
    00002444: 	movq	%rdi, 0x58(%rsp)
    00002449: 	cmovbeq	%rcx, %rdi
    0000244d: 	movq	0x20(%rsp), %rcx
    00002452: 	movq	%rdi, 0x8(%rsp)
    00002457: 	movq	%rcx, 0x70(%rsp)
    0000245c: 	cmpq	%rax, %rdi
    0000245f: 	jbe	.Ltmp1160 # Offset: 9311
.Ltmp1167:
    00002465: 	movq	0x60(%rsp), %rdi
    0000246a: 	movq	0x40(%rsp), %rax
    0000246f: 	movq	0x38(%rsp), %rcx
    00002474: 	movq	0x30(%rsp), %r10
    00002479: 	movq	%rdi, %r11
    0000247c: 	subq	$-0x80, %rdi
    00002480: 	cmpq	%rdi, %r14
    00002483: 	movq	%rdi, 0x60(%rsp)
    00002488: 	cmovbeq	%r14, %rdi
    0000248c: 	xorl	%ebx, %ebx
    0000248e: 	addq	%rdi, %rax
    00002491: 	movq	%rdi, 0x10(%rsp)
    00002496: 	leaq	-0x3(%rdi), %r9
    0000249a: 	leaq	(%rcx,%rax,4), %rax
    0000249e: 	movq	%rax, 0x50(%rsp)
    000024a3: 	movq	%r11, %rax
    000024a6: 	subq	%rdi, %rax
    000024a9: 	shlq	$0x2, %rax
    000024ad: 	movq	%rax, 0x28(%rsp)
    000024b2: 	movq	0x70(%rsp), %rax
    000024b7: 	movq	%rax, 0x18(%rsp)
    000024bc: 	nopl	(%rax) # Size: 4
.Ltmp1166:
    000024c0: 	movq	0x50(%rsp), %rdi
    000024c5: 	movq	0x40(%rsp), %rsi
    000024ca: 	movq	0x48(%rsp), %r8
    000024cf: 	nop # Size: 1
.Ltmp1165:
    000024d0: 	cmpq	%r11, %r9
    000024d3: 	jbe	.Ltmp1161 # Offset: 9427
    000024d9: 	movq	0x28(%rsp), %rax
    000024de: 	movq	0x18(%rsp), %rdx
    000024e3: 	movaps	%xmm3, %xmm4
    000024e6: 	movaps	%xmm3, %xmm5
    000024e9: 	movaps	%xmm3, %xmm0
    000024ec: 	movaps	%xmm3, %xmm1
    000024ef: 	leaq	(%rax,%rdi), %rcx
    000024f3: 	movq	%r11, %rax
    000024f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1162:
    00002500: 	movss	(%rdx), %xmm2
    00002504: 	mulss	(%rcx), %xmm2
    00002508: 	addq	$0x4, %rax
    0000250c: 	addq	$0x10, %rcx
    00002510: 	addss	%xmm2, %xmm1
    00002514: 	movss	(%rdx,%r14,4), %xmm2
    0000251a: 	mulss	-0xc(%rcx), %xmm2
    0000251f: 	addss	%xmm2, %xmm0
    00002523: 	movss	(%rdx,%r12,4), %xmm2
    00002529: 	mulss	-0x8(%rcx), %xmm2
    0000252e: 	addss	%xmm2, %xmm5
    00002532: 	movss	(%rdx,%rbp,4), %xmm2
    00002537: 	mulss	-0x4(%rcx), %xmm2
    0000253c: 	addq	%r13, %rdx
    0000253f: 	addss	%xmm2, %xmm4
    00002543: 	cmpq	%r9, %rax
    00002546: 	jb	.Ltmp1162 # Offset: 9542
.Ltmp1268:
    00002548: 	cmpq	%rax, 0x10(%rsp)
    0000254d: 	jbe	.Ltmp1163 # Offset: 9549
    0000254f: 	movq	%r14, %rdx
    00002552: 	movq	0x20(%rsp), %rcx
    00002557: 	imulq	%rax, %rdx
    0000255b: 	addq	%rsi, %rax
    0000255e: 	addq	%rbx, %rdx
    00002561: 	leaq	(%rcx,%rdx,4), %rdx
    00002565: 	movq	0x38(%rsp), %rcx
    0000256a: 	leaq	(%rcx,%rax,4), %rax
    0000256e: 	nop # Size: 2
.Ltmp1164:
    00002570: 	movss	(%rdx), %xmm2
    00002574: 	mulss	(%rax), %xmm2
    00002578: 	addq	$0x4, %rax
    0000257c: 	addq	%r15, %rdx
    0000257f: 	addss	%xmm2, %xmm1
    00002583: 	cmpq	%rax, %rdi
    00002586: 	jne	.Ltmp1164 # Offset: 9606
.Ltmp1163:
    00002588: 	addss	%xmm1, %xmm0
    0000258c: 	addq	$0x1, %r8
    00002590: 	addq	%r15, %rdi
    00002593: 	addss	%xmm5, %xmm0
    00002597: 	addss	%xmm4, %xmm0
    0000259b: 	addss	(%r10,%rsi,4), %xmm0
    000025a1: 	movss	%xmm0, (%r10,%rsi,4)
    000025a7: 	addq	%r14, %rsi
    000025aa: 	cmpq	%r8, 0x8(%rsp)
    000025af: 	jne	.Ltmp1165 # Offset: 9647
    000025b5: 	addq	$0x1, %rbx
    000025b9: 	addq	$0x4, 0x18(%rsp)
    000025bf: 	addq	$0x4, %r10
    000025c3: 	cmpq	%rbx, %r14
    000025c6: 	jne	.Ltmp1166 # Offset: 9670
    000025cc: 	movq	0x90(%rsp), %rdi
    000025d4: 	addq	%rdi, 0x70(%rsp)
    000025d9: 	cmpq	%r14, 0x60(%rsp)
    000025de: 	jb	.Ltmp1167 # Offset: 9694
.Ltmp1160:
    000025e4: 	movq	0x88(%rsp), %rdi
    000025ec: 	addq	%rdi, 0x40(%rsp)
    000025f1: 	movq	0x58(%rsp), %rdi
    000025f6: 	cmpq	%rdi, 0x80(%rsp)
    000025fe: 	ja	.Ltmp1168 # Offset: 9726
    00002604: 	movq	%r15, %rbx
    00002607: 	movq	0x20(%rsp), %r15
.Ltmp1266:
    0000260c: 	movq	0x30(%rsp), %rsi
    00002611: 	movq	0x100(%rsp), %rcx
    00002619: 	xorl	%edx, %edx
    0000261b: 	movss	DATAat0x2d9d0(%rip), %xmm5
    00002623: 	movq	DATAat0x2d9e0(%rip), %xmm4
    0000262b: 	movsd	DATAat0x2da10(%rip), %xmm3
.Ltmp1269:
    00002633: 	xorl	%eax, %eax
    00002635: 	testq	%r14, %r14
    00002638: 	jne	.Ltmp1169 # Offset: 9784
    0000263a: 	jmp	.Ltmp1170 # Offset: 9786
    0000263f: 	nop # Size: 1
.Ltmp1172:
    00002640: 	addq	$0x1, %rax
    00002644: 	cmpq	%rax, %r14
    00002647: 	je	.Ltmp1170 # Offset: 9799
.Ltmp1169:
    0000264d: 	movss	(%rcx,%rax,4), %xmm1
    00002652: 	movaps	%xmm1, %xmm2
    00002655: 	movaps	%xmm1, %xmm0
    00002658: 	subss	(%rsi,%rax,4), %xmm0
    0000265d: 	andps	%xmm5, %xmm2
    00002660: 	cvtss2sd	%xmm2, %xmm2
    00002664: 	comisd	DATAat0x2da08(%rip), %xmm2
    0000266c: 	jbe	.Ltmp1171 # Offset: 9836
    0000266e: 	divss	%xmm1, %xmm0
.Ltmp1171:
    00002672: 	cvtss2sd	%xmm0, %xmm0
    00002676: 	andpd	%xmm4, %xmm0
    0000267a: 	comisd	%xmm0, %xmm3
    0000267e: 	ja	.Ltmp1172 # Offset: 9854
    00002680: 	leaq	DATAat0x2d260(%rip), %rsi
    00002687: 	movl	$0x1, %edi
    0000268c: 	xorl	%eax, %eax
    0000268e: 	callq	__printf_chk@PLT # Offset: 9870
.Ltmp1271:
    00002693: 	movq	0x30(%rsp), %rcx
    00002698: 	xorl	%ebp, %ebp
.Ltmp1173:
    0000269a: 	movq	%rcx, %rdi
    0000269d: 	movq	%rbx, %rdx
    000026a0: 	xorl	%esi, %esi
    000026a2: 	addq	$0x1, %rbp
    000026a6: 	callq	memset@PLT # Offset: 9894
    000026ab: 	movq	%rax, %rcx
    000026ae: 	addq	%rbx, %rcx
    000026b1: 	cmpq	%rbp, 0x80(%rsp)
    000026b9: 	jne	.Ltmp1173 # Offset: 9913
.Ltmp1270:
    000026bb: 	movq	0x30(%rsp), %rbp
    000026c0: 	movq	0x38(%rsp), %rdi
    000026c5: 	movq	%r15, %rsi
    000026c8: 	movq	%r14, %r8
    000026cb: 	movq	0x80(%rsp), %rcx
    000026d3: 	movq	%rbp, %rdx
    000026d6: 	callq	"_ZN28matmul_IJK_blocked_unrolled2IfEclEPKfS2_Pfmm.isra.0/1" # Offset: 9942
    000026db: 	movq	0x100(%rsp), %rcx
    000026e3: 	movq	%rbp, %rsi
    000026e6: 	xorl	%edx, %edx
    000026e8: 	movq	DATAat0x2d9e0(%rip), %xmm4
    000026f0: 	movsd	DATAat0x2da10(%rip), %xmm3
    000026f8: 	movss	DATAat0x2d9d0(%rip), %xmm5
.Ltmp1272:
    00002700: 	xorl	%eax, %eax
    00002702: 	testq	%r14, %r14
    00002705: 	jne	.Ltmp1174 # Offset: 9989
    00002707: 	jmp	.Ltmp1175 # Offset: 9991
    0000270c: 	nopl	(%rax) # Size: 4
.Ltmp1177:
    00002710: 	addq	$0x1, %rax
    00002714: 	cmpq	%rax, %r14
    00002717: 	je	.Ltmp1175 # Offset: 10007
.Ltmp1174:
    0000271d: 	movss	(%rcx,%rax,4), %xmm1
    00002722: 	movaps	%xmm1, %xmm2
    00002725: 	movaps	%xmm1, %xmm0
    00002728: 	subss	(%rsi,%rax,4), %xmm0
    0000272d: 	andps	%xmm5, %xmm2
    00002730: 	cvtss2sd	%xmm2, %xmm2
    00002734: 	comisd	DATAat0x2da08(%rip), %xmm2
    0000273c: 	jbe	.Ltmp1176 # Offset: 10044
    0000273e: 	divss	%xmm1, %xmm0
.Ltmp1176:
    00002742: 	cvtss2sd	%xmm0, %xmm0
    00002746: 	andpd	%xmm4, %xmm0
    0000274a: 	comisd	%xmm0, %xmm3
    0000274e: 	ja	.Ltmp1177 # Offset: 10062
    00002750: 	leaq	DATAat0x2d228(%rip), %rsi
    00002757: 	movl	$0x1, %edi
    0000275c: 	xorl	%eax, %eax
    0000275e: 	callq	__printf_chk@PLT # Offset: 10078
.Ltmp1274:
    00002763: 	movq	0x30(%rsp), %rcx
    00002768: 	xorl	%ebp, %ebp
.Ltmp1178:
    0000276a: 	movq	%rcx, %rdi
    0000276d: 	movq	%rbx, %rdx
    00002770: 	xorl	%esi, %esi
    00002772: 	addq	$0x1, %rbp
    00002776: 	callq	memset@PLT # Offset: 10102
    0000277b: 	movq	%rax, %rcx
    0000277e: 	addq	%rbx, %rcx
    00002781: 	cmpq	%rbp, 0x80(%rsp)
    00002789: 	jne	.Ltmp1178 # Offset: 10121
.Ltmp1273:
    0000278b: 	movq	0x30(%rsp), %rbp
    00002790: 	movq	0x38(%rsp), %rdi
    00002795: 	movq	%r14, %r8
    00002798: 	movq	%r15, %rsi
    0000279b: 	movq	0x80(%rsp), %rcx
    000027a3: 	movq	%rbp, %rdx
    000027a6: 	callq	"_ZN28matmul_IJK_blocked_unrolled3IfEclEPKfS2_Pfmm.isra.0/1" # Offset: 10150
    000027ab: 	movq	DATAat0x2d9e0(%rip), %xmm4
    000027b3: 	movq	%rbp, %rcx
    000027b6: 	xorl	%edx, %edx
    000027b8: 	movsd	DATAat0x2da10(%rip), %xmm3
    000027c0: 	movss	DATAat0x2d9d0(%rip), %xmm5
.Ltmp1275:
    000027c8: 	xorl	%eax, %eax
    000027ca: 	testq	%r14, %r14
    000027cd: 	jne	.Ltmp1179 # Offset: 10189
    000027cf: 	jmp	.Ltmp1180 # Offset: 10191
    000027d4: 	nopl	(%rax) # Size: 4
.Ltmp1182:
    000027d8: 	addq	$0x1, %rax
    000027dc: 	cmpq	%rax, %r14
    000027df: 	je	.Ltmp1180 # Offset: 10207
.Ltmp1179:
    000027e5: 	movq	0x68(%rsp), %rdi
    000027ea: 	movss	(%rdi,%rax,4), %xmm1
    000027ef: 	movaps	%xmm1, %xmm2
    000027f2: 	movaps	%xmm1, %xmm0
    000027f5: 	subss	(%rcx,%rax,4), %xmm0
    000027fa: 	andps	%xmm5, %xmm2
    000027fd: 	cvtss2sd	%xmm2, %xmm2
    00002801: 	comisd	DATAat0x2da08(%rip), %xmm2
    00002809: 	jbe	.Ltmp1181 # Offset: 10249
    0000280b: 	divss	%xmm1, %xmm0
.Ltmp1181:
    0000280f: 	cvtss2sd	%xmm0, %xmm0
    00002813: 	andpd	%xmm4, %xmm0
    00002817: 	comisd	%xmm0, %xmm3
    0000281b: 	ja	.Ltmp1182 # Offset: 10267
    0000281d: 	leaq	DATAat0x2d1f0(%rip), %rsi
    00002824: 	movl	$0x1, %edi
    00002829: 	xorl	%eax, %eax
    0000282b: 	callq	__printf_chk@PLT # Offset: 10283
.Ltmp1277:
    00002830: 	movq	0x78(%rsp), %rcx
    00002835: 	xorl	%ebp, %ebp
.Ltmp1183:
    00002837: 	movq	%rcx, %rdi
    0000283a: 	movq	%rbx, %rdx
    0000283d: 	xorl	%esi, %esi
    0000283f: 	addq	$0x1, %rbp
    00002843: 	callq	memset@PLT # Offset: 10307
    00002848: 	movq	%rax, %rcx
    0000284b: 	addq	%rbx, %rcx
    0000284e: 	cmpq	%rbp, 0x80(%rsp)
    00002856: 	jne	.Ltmp1183 # Offset: 10326
    00002858: 	movq	%r14, %rax
    0000285b: 	movq	%r15, 0x138(%rsp)
    00002863: 	movdqa	DATAat0x2d9b0(%rip), %xmm8
    0000286c: 	shlq	$0x7, %rax
    00002870: 	movdqa	DATAat0x2d9c0(%rip), %xmm7
    00002878: 	movq	$0x0, 0x108(%rsp)
    00002884: 	movq	%rax, 0x148(%rsp)
    0000288c: 	movq	%r14, %rax
    0000288f: 	movq	0x30(%rsp), %r13
    00002894: 	shlq	$0x9, %rax
    00002898: 	movq	%r14, 0x28(%rsp)
    0000289d: 	movq	%rax, 0x150(%rsp)
    000028a5: 	leaq	(,%r14,4), %rax
    000028ad: 	movq	%r15, %r14
    000028b0: 	movq	%rax, 0x40(%rsp)
    000028b5: 	movq	$0x0, 0x128(%rsp)
.Ltmp1196:
    000028c1: 	movq	0x128(%rsp), %rax
    000028c9: 	movq	0x28(%rsp), %rdi
    000028ce: 	movq	%rax, %rdx
    000028d1: 	subq	$-0x80, %rax
    000028d5: 	cmpq	%rax, %rdi
    000028d8: 	movq	%rax, 0x128(%rsp)
    000028e0: 	cmovbeq	%rdi, %rax
    000028e4: 	cmpq	%rdx, %rax
    000028e7: 	jbe	.Ltmp1184 # Offset: 10471
    000028ed: 	movq	0x38(%rsp), %rdi
    000028f2: 	shlq	$0x2, %rax
    000028f6: 	shlq	$0x2, %rdx
    000028fa: 	movq	$0x4, 0x8(%rsp)
    00002903: 	subq	%rax, %rdx
    00002906: 	movq	%r13, 0x130(%rsp)
    0000290e: 	addq	%rax, %rdi
    00002911: 	movq	0x138(%rsp), %rax
    00002919: 	movq	%rdx, 0x118(%rsp)
    00002921: 	movq	%rdi, 0x140(%rsp)
    00002929: 	movq	$0x0, 0x18(%rsp)
    00002932: 	movq	%rax, 0x110(%rsp)
    0000293a: 	movq	%r13, %rax
    0000293d: 	movq	%r14, %r13
    00002940: 	movq	%rax, %r14
.Ltmp1195:
    00002943: 	movq	0x8(%rsp), %rax
    00002948: 	movq	0x28(%rsp), %rdi
    0000294d: 	movq	$0x0, 0xc8(%rsp)
    00002959: 	movq	0x130(%rsp), %rcx
    00002961: 	movq	0x18(%rsp), %rsi
    00002966: 	addq	$0x380, %rax
    0000296c: 	cmpq	%rdi, %rax
    0000296f: 	movq	%rcx, 0x48(%rsp)
    00002974: 	cmovaq	%rdi, %rax
    00002978: 	xorl	%r15d, %r15d
    0000297b: 	movq	%rax, %r12
    0000297e: 	leaq	-0x3(%rax), %rbp
    00002982: 	leaq	0x40(%rcx), %rax
    00002986: 	movq	%rax, 0x50(%rsp)
    0000298b: 	movq	%r12, %rax
    0000298e: 	subq	%rsi, %rax
    00002991: 	subq	$0x4, %rax
    00002995: 	movq	%rax, 0x58(%rsp)
    0000299a: 	shrq	$0x2, %rax
    0000299e: 	addq	$0x1, %rax
    000029a2: 	movq	%rax, %rdi
    000029a5: 	movq	%rax, 0x70(%rsp)
    000029aa: 	andq	$-0x4, %rax
    000029ae: 	shrq	$0x2, %rdi
    000029b2: 	movq	%rax, 0x60(%rsp)
    000029b7: 	leaq	(%rsi,%rax,4), %rax
    000029bb: 	movq	%rdi, 0x68(%rsp)
    000029c0: 	leaq	0x4(%rax), %rdi
    000029c4: 	movq	%rax, 0x88(%rsp)
    000029cc: 	movq	%rdi, 0x78(%rsp)
    000029d1: 	leaq	0x8(%rax), %rdi
    000029d5: 	addq	$0xc, %rax
    000029d9: 	movq	%rax, 0x120(%rsp)
    000029e1: 	movq	0x140(%rsp), %rax
    000029e9: 	movq	%rdi, 0xb0(%rsp)
    000029f1: 	movq	%rax, 0x20(%rsp)
    000029f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1194:
    00002a00: 	movq	0x88(%rsp), %rax
    00002a08: 	movq	0x110(%rsp), %rsi
    00002a10: 	movq	0x118(%rsp), %rdi
    00002a18: 	addq	0x20(%rsp), %rdi
    00002a1d: 	addq	%r15, %rax
    00002a20: 	shlq	$0x2, %rax
    00002a24: 	leaq	(%r14,%rax), %rcx
    00002a28: 	movq	%rcx, 0x90(%rsp)
    00002a30: 	leaq	0x4(%r14,%rax), %rcx
    00002a35: 	movq	%rcx, 0xa0(%rsp)
    00002a3d: 	leaq	0x8(%r14,%rax), %rcx
    00002a42: 	leaq	0xc(%r14,%rax), %rax
    00002a47: 	movq	%rax, 0xa8(%rsp)
    00002a4f: 	movq	0x78(%rsp), %rax
    00002a54: 	movq	%rcx, 0x98(%rsp)
    00002a5c: 	addq	%r15, %rax
    00002a5f: 	shlq	$0x2, %rax
    00002a63: 	leaq	(%r14,%rax), %rcx
    00002a67: 	movq	%rcx, 0xb8(%rsp)
    00002a6f: 	leaq	0x4(%r14,%rax), %rcx
    00002a74: 	movq	%rcx, 0xd8(%rsp)
    00002a7c: 	leaq	0x8(%r14,%rax), %rcx
    00002a81: 	leaq	0xc(%r14,%rax), %rax
    00002a86: 	movq	%rax, 0xd0(%rsp)
    00002a8e: 	movq	0xb0(%rsp), %rax
    00002a96: 	movq	%rcx, 0xc0(%rsp)
    00002a9e: 	addq	%r15, %rax
    00002aa1: 	shlq	$0x2, %rax
    00002aa5: 	leaq	(%r14,%rax), %rcx
    00002aa9: 	movq	%rcx, 0xf8(%rsp)
    00002ab1: 	leaq	0x4(%r14,%rax), %rcx
    00002ab6: 	movq	%rcx, 0xf0(%rsp)
    00002abe: 	leaq	0x8(%r14,%rax), %rcx
    00002ac3: 	leaq	0xc(%r14,%rax), %rax
    00002ac8: 	movq	%rax, 0xe0(%rsp)
    00002ad0: 	movq	%rcx, 0xe8(%rsp)
    00002ad8: 	movq	0x108(%rsp), %rcx
.Ltmp1193:
    00002ae0: 	movq	0x18(%rsp), %rbx
    00002ae5: 	movss	(%rdi), %xmm0
    00002ae9: 	cmpq	%rbx, %rbp
    00002aec: 	jbe	.Ltmp1185 # Offset: 10988
    00002af2: 	cmpq	$0x2, 0x8(%rsp)
    00002af8: 	seta	%dl
    00002afb: 	cmpq	$-0x4, %rbp
    00002aff: 	setbe	%al
    00002b02: 	andl	%edx, %eax
    00002b04: 	cmpq	$0xb, 0x58(%rsp)
    00002b0a: 	seta	%dl
    00002b0d: 	testb	%dl, %al
    00002b0f: 	je	.Ltmp1186 # Offset: 11023
    00002b15: 	movq	0x48(%rsp), %r11
    00002b1a: 	leaq	0x40(%rsi), %rax
    00002b1e: 	cmpq	%r11, %rax
    00002b21: 	setbe	%dl
    00002b24: 	cmpq	0x50(%rsp), %rsi
    00002b29: 	setae	%al
    00002b2c: 	orb	%dl, %al
    00002b2e: 	je	.Ltmp1186 # Offset: 11054
    00002b34: 	movq	%rbx, %xmm9
    00002b39: 	movq	0x68(%rsp), %r9
    00002b3e: 	movaps	%xmm0, %xmm5
    00002b41: 	movq	%rsi, %rdx
    00002b44: 	movhps	0x8(%rsp), %xmm9
    00002b4a: 	movq	%r11, %rax
    00002b4d: 	xorl	%r8d, %r8d
    00002b50: 	shufps	$0x0, %xmm5, %xmm5
.Ltmp1187:
    00002b54: 	movups	0x10(%rdx), %xmm3
    00002b58: 	movups	0x20(%rdx), %xmm2
    00002b5c: 	addq	$0x1, %r8
    00002b60: 	addq	$0x40, %rax
    00002b64: 	movups	0x30(%rdx), %xmm1
    00002b68: 	movups	-0x30(%rax), %xmm4
    00002b6c: 	movdqa	%xmm9, %xmm6
    00002b71: 	addq	$0x40, %rdx
    00002b75: 	mulps	%xmm5, %xmm3
    00002b78: 	movups	-0x40(%rax), %xmm10
    00002b7d: 	paddq	%xmm8, %xmm9
    00002b82: 	paddq	%xmm7, %xmm6
    00002b86: 	mulps	%xmm5, %xmm2
    00002b89: 	mulps	%xmm5, %xmm1
    00002b8c: 	addps	%xmm4, %xmm3
    00002b8f: 	movups	-0x20(%rax), %xmm4
    00002b93: 	addps	%xmm4, %xmm2
    00002b96: 	movups	-0x10(%rax), %xmm4
    00002b9a: 	addps	%xmm4, %xmm1
    00002b9d: 	movups	-0x40(%rdx), %xmm4
    00002ba1: 	movups	%xmm3, -0x30(%rax)
    00002ba5: 	movups	%xmm2, -0x20(%rax)
    00002ba9: 	mulps	%xmm5, %xmm4
    00002bac: 	movups	%xmm1, -0x10(%rax)
    00002bb0: 	addps	%xmm10, %xmm4
    00002bb4: 	movups	%xmm4, -0x40(%rax)
    00002bb8: 	cmpq	%r9, %r8
    00002bbb: 	jb	.Ltmp1187 # Offset: 11195
    00002bbd: 	psrldq	$0x8, %xmm6
    00002bc2: 	movq	0x70(%rsp), %rdx
    00002bc7: 	movq	%xmm6, %rax
    00002bcc: 	cmpq	%rdx, 0x60(%rsp)
    00002bd1: 	je	.Ltmp1188 # Offset: 11217
    00002bd7: 	movq	0x88(%rsp), %rax
    00002bdf: 	movq	0x90(%rsp), %rbx
    00002be7: 	addq	%rcx, %rax
    00002bea: 	movss	(%r13,%rax,4), %xmm1
    00002bf1: 	mulss	%xmm0, %xmm1
    00002bf5: 	addss	(%rbx), %xmm1
    00002bf9: 	movss	%xmm1, (%rbx)
    00002bfd: 	movss	0x4(%r13,%rax,4), %xmm1
    00002c04: 	movq	0xa0(%rsp), %rbx
    00002c0c: 	mulss	%xmm0, %xmm1
    00002c10: 	addss	(%rbx), %xmm1
    00002c14: 	movss	%xmm1, (%rbx)
    00002c18: 	movss	0x8(%r13,%rax,4), %xmm1
    00002c1f: 	movq	0x98(%rsp), %rbx
    00002c27: 	mulss	%xmm0, %xmm1
    00002c2b: 	addss	(%rbx), %xmm1
    00002c2f: 	movss	%xmm1, (%rbx)
    00002c33: 	movss	0xc(%r13,%rax,4), %xmm1
    00002c3a: 	movq	0xa8(%rsp), %rax
    00002c42: 	mulss	%xmm0, %xmm1
    00002c46: 	addss	(%rax), %xmm1
    00002c4a: 	movss	%xmm1, (%rax)
    00002c4e: 	movq	0x78(%rsp), %rax
    00002c53: 	cmpq	%rax, %rbp
    00002c56: 	jbe	.Ltmp1188 # Offset: 11350
    00002c5c: 	addq	%rcx, %rax
    00002c5f: 	movq	0xb8(%rsp), %rbx
    00002c67: 	movss	(%r13,%rax,4), %xmm1
    00002c6e: 	mulss	%xmm0, %xmm1
    00002c72: 	addss	(%rbx), %xmm1
    00002c76: 	movss	%xmm1, (%rbx)
    00002c7a: 	movss	0x4(%r13,%rax,4), %xmm1
    00002c81: 	movq	0xd8(%rsp), %rbx
    00002c89: 	mulss	%xmm0, %xmm1
    00002c8d: 	addss	(%rbx), %xmm1
    00002c91: 	movss	%xmm1, (%rbx)
    00002c95: 	movss	0x8(%r13,%rax,4), %xmm1
    00002c9c: 	movq	0xc0(%rsp), %rbx
    00002ca4: 	mulss	%xmm0, %xmm1
    00002ca8: 	addss	(%rbx), %xmm1
    00002cac: 	movss	%xmm1, (%rbx)
    00002cb0: 	movss	0xc(%r13,%rax,4), %xmm1
    00002cb7: 	movq	0xd0(%rsp), %rax
    00002cbf: 	mulss	%xmm0, %xmm1
    00002cc3: 	addss	(%rax), %xmm1
    00002cc7: 	movss	%xmm1, (%rax)
    00002ccb: 	movq	0xb0(%rsp), %rax
    00002cd3: 	cmpq	%rbp, %rax
    00002cd6: 	jae	.Ltmp1188 # Offset: 11478
    00002cd8: 	addq	%rcx, %rax
    00002cdb: 	movq	0xf8(%rsp), %rbx
    00002ce3: 	movss	(%r13,%rax,4), %xmm1
    00002cea: 	mulss	%xmm0, %xmm1
    00002cee: 	addss	(%rbx), %xmm1
    00002cf2: 	movss	%xmm1, (%rbx)
    00002cf6: 	movss	0x4(%r13,%rax,4), %xmm1
    00002cfd: 	movq	0xf0(%rsp), %rbx
    00002d05: 	mulss	%xmm0, %xmm1
    00002d09: 	addss	(%rbx), %xmm1
    00002d0d: 	movss	%xmm1, (%rbx)
    00002d11: 	movss	0x8(%r13,%rax,4), %xmm1
    00002d18: 	movq	0xe8(%rsp), %rbx
    00002d20: 	mulss	%xmm0, %xmm1
    00002d24: 	addss	(%rbx), %xmm1
    00002d28: 	movss	%xmm1, (%rbx)
    00002d2c: 	movss	0xc(%r13,%rax,4), %xmm1
    00002d33: 	movq	0xe0(%rsp), %rax
    00002d3b: 	mulss	%xmm0, %xmm1
    00002d3f: 	addss	(%rax), %xmm1
    00002d43: 	movss	%xmm1, (%rax)
    00002d47: 	movq	0x120(%rsp), %rax
    00002d4f: 	nop # Size: 1
.Ltmp1188:
    00002d50: 	cmpq	%rax, %r12
    00002d53: 	jbe	.Ltmp1189 # Offset: 11603
    00002d59: 	leaq	(%r15,%rax), %r8
    00002d5d: 	leaq	(%rax,%rcx), %r10
    00002d61: 	movq	%r12, %rdx
    00002d64: 	leaq	0x4(,%r10,4), %rbx
    00002d6c: 	leaq	(%r14,%r8,4), %r9
    00002d70: 	subq	%rax, %rdx
    00002d73: 	movq	%rbx, 0x10(%rsp)
    00002d78: 	movq	%r9, %r11
    00002d7b: 	addq	%r13, %rbx
    00002d7e: 	subq	%rbx, %r11
    00002d81: 	cmpq	$0x8, %r11
    00002d85: 	jbe	.Ltmp1190 # Offset: 11653
    00002d8b: 	cmpq	$0x1, %rdx
    00002d8f: 	je	.Ltmp1190 # Offset: 11663
    00002d95: 	leaq	-0x1(%rdx), %rbx
    00002d99: 	cmpq	$0x2, %rbx
    00002d9d: 	jbe	.Ltmp1191 # Offset: 11677
    00002da3: 	movq	0x10(%rsp), %rbx
    00002da8: 	movaps	%xmm0, %xmm2
    00002dab: 	movups	(%r9), %xmm6
    00002daf: 	shufps	$0x0, %xmm2, %xmm2
    00002db3: 	movups	-0x4(%r13,%rbx), %xmm1
    00002db9: 	mulps	%xmm2, %xmm1
    00002dbc: 	addps	%xmm6, %xmm1
    00002dbf: 	movups	%xmm1, (%r9)
    00002dc3: 	movq	%rdx, %r9
    00002dc6: 	andq	$-0x4, %r9
    00002dca: 	addq	%r9, %rax
    00002dcd: 	cmpq	%rdx, %r9
    00002dd0: 	je	.Ltmp1189 # Offset: 11728
    00002dd2: 	subq	%r9, %rdx
    00002dd5: 	cmpq	$0x1, %rdx
    00002dd9: 	je	.Ltmp1192 # Offset: 11737
.Ltmp1279:
    00002ddb: 	addq	%r9, %r8
    00002dde: 	addq	%r10, %r9
    00002de1: 	movaps	%xmm0, %xmm2
    00002de4: 	movq	(%r13,%r9,4), %xmm1
    00002deb: 	shufps	$0xe0, %xmm2, %xmm2
    00002def: 	leaq	(%r14,%r8,4), %r8
    00002df3: 	mulps	%xmm2, %xmm1
    00002df6: 	movq	(%r8), %xmm2
    00002dfb: 	addps	%xmm2, %xmm1
    00002dfe: 	movlps	%xmm1, (%r8)
    00002e02: 	movq	%rdx, %r8
    00002e05: 	andq	$-0x2, %r8
    00002e09: 	addq	%r8, %rax
    00002e0c: 	cmpq	%r8, %rdx
    00002e0f: 	je	.Ltmp1189 # Offset: 11791
.Ltmp1192:
    00002e11: 	leaq	(%r15,%rax), %rdx
    00002e15: 	addq	%rcx, %rax
    00002e18: 	mulss	(%r13,%rax,4), %xmm0
    00002e1f: 	leaq	(%r14,%rdx,4), %rdx
    00002e23: 	addss	(%rdx), %xmm0
    00002e27: 	movss	%xmm0, (%rdx)
.Ltmp1189:
    00002e2b: 	addq	$0x4, %rdi
    00002e2f: 	addq	0x28(%rsp), %rcx
    00002e34: 	addq	0x40(%rsp), %rsi
    00002e39: 	cmpq	%rdi, 0x20(%rsp)
    00002e3e: 	jne	.Ltmp1193 # Offset: 11838
    00002e44: 	movq	0x40(%rsp), %rdi
    00002e49: 	addq	0x28(%rsp), %r15
    00002e4e: 	addq	$0x1, 0xc8(%rsp)
    00002e57: 	movq	0xc8(%rsp), %rax
    00002e5f: 	addq	%rdi, 0x20(%rsp)
    00002e64: 	addq	%rdi, 0x48(%rsp)
    00002e69: 	addq	%rdi, 0x50(%rsp)
    00002e6e: 	cmpq	%rax, 0x80(%rsp)
    00002e76: 	jne	.Ltmp1194 # Offset: 11894
    00002e7c: 	addq	$0x384, 0x18(%rsp)
    00002e85: 	movq	0x18(%rsp), %rax
    00002e8a: 	addq	$0xe10, 0x110(%rsp)
    00002e96: 	addq	$0xe10, 0x130(%rsp)
    00002ea2: 	addq	$0x384, 0x8(%rsp)
    00002eab: 	cmpq	%rax, 0x28(%rsp)
    00002eb0: 	ja	.Ltmp1195 # Offset: 11952
    00002eb6: 	movq	%r14, %rax
    00002eb9: 	movq	%r13, %r14
    00002ebc: 	movq	%rax, %r13
.Ltmp1184:
    00002ebf: 	movq	0x148(%rsp), %rdi
    00002ec7: 	addq	%rdi, 0x108(%rsp)
    00002ecf: 	movq	0x150(%rsp), %rdi
    00002ed7: 	addq	%rdi, 0x138(%rsp)
    00002edf: 	movq	0x128(%rsp), %rdi
    00002ee7: 	cmpq	%rdi, 0x28(%rsp)
    00002eec: 	ja	.Ltmp1196 # Offset: 12012
    00002ef2: 	movq	%r14, %r15
    00002ef5: 	movq	0x28(%rsp), %r14
.Ltmp1276:
    00002efa: 	movq	0x30(%rsp), %rcx
    00002eff: 	movq	0x100(%rsp), %rsi
    00002f07: 	leaq	(,%r14,4), %rbx
    00002f0f: 	xorl	%edx, %edx
    00002f11: 	movq	DATAat0x2d9e0(%rip), %xmm4
    00002f19: 	movsd	DATAat0x2da10(%rip), %xmm3
    00002f21: 	movss	DATAat0x2d9d0(%rip), %xmm5
    00002f29: 	movq	%rcx, %rbp
.Ltmp1280:
    00002f2c: 	xorl	%eax, %eax
    00002f2e: 	testq	%r14, %r14
    00002f31: 	jne	.Ltmp1197 # Offset: 12081
    00002f33: 	jmp	.Ltmp1198 # Offset: 12083
    00002f38: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1200:
    00002f40: 	addq	$0x1, %rax
    00002f44: 	cmpq	%rax, %r14
    00002f47: 	je	.Ltmp1198 # Offset: 12103
.Ltmp1197:
    00002f4d: 	movss	(%rsi,%rax,4), %xmm1
    00002f52: 	movaps	%xmm1, %xmm2
    00002f55: 	movaps	%xmm1, %xmm0
    00002f58: 	subss	(%rcx,%rax,4), %xmm0
    00002f5d: 	andps	%xmm5, %xmm2
    00002f60: 	cvtss2sd	%xmm2, %xmm2
    00002f64: 	comisd	DATAat0x2da08(%rip), %xmm2
    00002f6c: 	jbe	.Ltmp1199 # Offset: 12140
    00002f6e: 	divss	%xmm1, %xmm0
.Ltmp1199:
    00002f72: 	cvtss2sd	%xmm0, %xmm0
    00002f76: 	andpd	%xmm4, %xmm0
    00002f7a: 	comisd	%xmm0, %xmm3
    00002f7e: 	ja	.Ltmp1200 # Offset: 12158
    00002f80: 	leaq	DATAat0x2d1b8(%rip), %rsi
    00002f87: 	movl	$0x1, %edi
    00002f8c: 	xorl	%eax, %eax
    00002f8e: 	callq	__printf_chk@PLT # Offset: 12174
.Ltmp1282:
    00002f93: 	xorl	%r12d, %r12d
.Ltmp1201:
    00002f96: 	movq	%rbp, %rdi
    00002f99: 	movq	%rbx, %rdx
    00002f9c: 	xorl	%esi, %esi
    00002f9e: 	addq	$0x1, %r12
    00002fa2: 	callq	memset@PLT # Offset: 12194
    00002fa7: 	addq	%rbx, %rbp
    00002faa: 	cmpq	%r12, 0x80(%rsp)
    00002fb2: 	ja	.Ltmp1201 # Offset: 12210
    00002fb4: 	cmpq	$0x0, 0x80(%rsp)
    00002fbd: 	je	.Ltmp1202 # Offset: 12221
    00002fc3: 	movq	%r14, %rax
    00002fc6: 	leaq	(,%r14,4), %rbp
    00002fce: 	movq	$0x0, 0x120(%rsp)
    00002fda: 	shlq	$0x7, %rax
    00002fde: 	movq	%r15, 0xf0(%rsp)
    00002fe6: 	movq	%rax, 0x160(%rsp)
    00002fee: 	leaq	(%r14,%r14), %rax
    00002ff2: 	movq	%rax, 0x118(%rsp)
    00002ffa: 	addq	%r14, %rax
    00002ffd: 	movq	%rax, 0x110(%rsp)
    00003005: 	movq	%r14, %rax
    00003008: 	shlq	$0x9, %rax
    0000300c: 	movq	%r14, 0xa0(%rsp)
    00003014: 	movq	%rax, 0x158(%rsp)
    0000301c: 	leaq	(%r15,%r14,8), %rax
    00003020: 	movq	%rax, 0xf8(%rsp)
    00003028: 	movq	%r14, %rax
    0000302b: 	movq	%r15, %r14
    0000302e: 	movq	%rbp, %r15
    00003031: 	movq	$0x0, 0x148(%rsp)
    0000303d: 	shlq	$0x4, %rax
    00003041: 	movq	%rax, 0x140(%rsp)
.Ltmp1286:
    00003049: 	movq	0x148(%rsp), %rax
    00003051: 	movq	%r15, %r11
    00003054: 	movq	0xa0(%rsp), %rcx
    0000305c: 	movq	$0x0, 0xd0(%rsp)
    00003068: 	movq	$0x0, 0x150(%rsp)
    00003074: 	movq	%r14, %rbp
    00003077: 	movq	%rax, %rdi
    0000307a: 	movq	%rax, 0xe0(%rsp)
    00003082: 	subq	$-0x80, %rax
    00003086: 	cmpq	%rax, %rcx
    00003089: 	movq	%rax, 0x148(%rsp)
    00003091: 	leaq	(,%rdi,4), %rdx
    00003099: 	cmovbeq	%rcx, %rax
    0000309d: 	leaq	-0x3(%rax), %rcx
    000030a1: 	movq	%rax, 0x108(%rsp)
    000030a9: 	shlq	$0x2, %rax
    000030ad: 	movq	%rcx, 0x88(%rsp)
    000030b5: 	movq	0x38(%rsp), %rcx
    000030ba: 	subq	%rax, %rdx
    000030bd: 	movq	%rdx, 0x128(%rsp)
    000030c5: 	addq	%rax, %rcx
    000030c8: 	movq	0xf0(%rsp), %rax
    000030d0: 	movq	%rcx, 0x178(%rsp)
    000030d8: 	addq	%r15, %rax
    000030db: 	movq	%rax, 0x170(%rsp)
    000030e3: 	movq	0xf8(%rsp), %rax
    000030eb: 	addq	%r15, %rax
    000030ee: 	movq	%rax, 0x168(%rsp)
.Ltmp1285:
    000030f6: 	movq	0x150(%rsp), %rax
    000030fe: 	movq	%r11, %r14
    00003101: 	movq	0xa0(%rsp), %rdi
    00003109: 	movq	$0x0, 0x60(%rsp)
    00003112: 	movq	0xd0(%rsp), %rcx
    0000311a: 	movq	$0x0, 0xc8(%rsp)
    00003126: 	movq	%rax, %rbx
    00003129: 	addq	$0x384, %rax
    0000312f: 	cmpq	%rax, %rdi
    00003132: 	movq	%rax, 0x150(%rsp)
    0000313a: 	movq	%rbx, %r15
    0000313d: 	cmovbeq	%rdi, %rax
    00003141: 	movq	0x30(%rsp), %rdi
    00003146: 	movq	%rbx, 0x68(%rsp)
    0000314b: 	movq	%rdi, %r10
    0000314e: 	movq	%rdi, 0xd8(%rsp)
    00003156: 	leaq	(%rdi,%rax,4), %rdi
    0000315a: 	movq	%rdi, 0xe8(%rsp)
    00003162: 	movq	0x170(%rsp), %rdi
    0000316a: 	subq	%rcx, %r10
    0000316d: 	movq	%rax, 0x78(%rsp)
    00003172: 	subq	%rbx, %rax
    00003175: 	subq	%rcx, %rdi
    00003178: 	movq	%rax, 0x58(%rsp)
    0000317d: 	movq	%rdi, 0x138(%rsp)
    00003185: 	movq	0x168(%rsp), %rdi
    0000318d: 	subq	%rcx, %rdi
    00003190: 	movq	%rdi, 0x130(%rsp)
    00003198: 	leaq	-0x1(%rax), %rdi
    0000319c: 	movq	%rdi, 0x90(%rsp)
    000031a4: 	movq	%rax, %rdi
    000031a7: 	shrq	$0x2, %rax
    000031ab: 	shlq	$0x4, %rax
    000031af: 	movq	%rax, 0x98(%rsp)
    000031b7: 	movq	%rdi, %rax
    000031ba: 	andq	$-0x4, %rdi
    000031be: 	leaq	(%rbx,%rdi), %rcx
    000031c2: 	subq	%rdi, %rax
    000031c5: 	movq	%rdi, 0xc0(%rsp)
    000031cd: 	movq	%rcx, 0xa8(%rsp)
    000031d5: 	movq	0x178(%rsp), %rcx
    000031dd: 	movq	%rax, 0xb0(%rsp)
    000031e5: 	movq	%rcx, 0xb8(%rsp)
    000031ed: 	nopl	(%rax) # Size: 3
.Ltmp1284:
    000031f0: 	movq	0xe0(%rsp), %rdi
    000031f8: 	cmpq	%rdi, 0x88(%rsp)
    00003200: 	jbe	.Ltmp1203 # Offset: 12800
    00003206: 	movq	0x120(%rsp), %rbx
    0000320e: 	movq	0xa0(%rsp), %rax
    00003216: 	movq	0xf0(%rsp), %r8
    0000321e: 	movq	0xf8(%rsp), %rdi
    00003226: 	addq	%rbx, %rax
    00003229: 	movq	%rbx, 0x20(%rsp)
    0000322e: 	movq	0x130(%rsp), %r9
    00003236: 	movq	%rax, 0x18(%rsp)
    0000323b: 	movq	0xd0(%rsp), %rax
    00003243: 	movq	0x138(%rsp), %rsi
    0000324b: 	movq	0x140(%rsp), %r11
    00003253: 	subq	%rax, %r8
    00003256: 	subq	%rax, %rdi
    00003259: 	movq	0x110(%rsp), %rax
    00003261: 	movq	0x128(%rsp), %rcx
    00003269: 	addq	0xb8(%rsp), %rcx
    00003271: 	movq	%rax, 0x28(%rsp)
    00003276: 	movq	0x118(%rsp), %rax
    0000327e: 	movq	%rax, 0x10(%rsp)
    00003283: 	movq	0xe0(%rsp), %rax
    0000328b: 	movq	%rax, 0x8(%rsp)
.Ltmp1209:
    00003290: 	movss	(%rcx), %xmm4
    00003294: 	movss	0x4(%rcx), %xmm1
    00003299: 	movss	0x8(%rcx), %xmm3
    0000329e: 	movss	0xc(%rcx), %xmm2
    000032a3: 	cmpq	%r15, 0x78(%rsp)
    000032a8: 	jbe	.Ltmp1204 # Offset: 12968
    000032ae: 	movq	0x20(%rsp), %rax
    000032b3: 	leaq	0x4(%rsi), %rdx
    000032b7: 	leaq	0x4(%r8), %r12
    000032bb: 	addq	%r15, %rax
    000032be: 	movq	%rax, 0x50(%rsp)
    000032c3: 	movq	0x18(%rsp), %rax
    000032c8: 	leaq	(%r15,%rax), %rbx
    000032cc: 	movq	0x10(%rsp), %rax
    000032d1: 	addq	%r15, %rax
    000032d4: 	movq	%rax, 0x48(%rsp)
    000032d9: 	movq	0x28(%rsp), %rax
    000032de: 	addq	%r15, %rax
    000032e1: 	movq	%rax, 0x40(%rsp)
    000032e6: 	movq	%r10, %rax
    000032e9: 	subq	%rdx, %rax
    000032ec: 	cmpq	$0x8, %rax
    000032f0: 	movq	%r10, %rax
    000032f3: 	seta	%dl
    000032f6: 	subq	%r12, %rax
    000032f9: 	leaq	0x4(%rdi), %r12
    000032fd: 	cmpq	$0x8, %rax
    00003301: 	seta	%al
    00003304: 	andl	%edx, %eax
    00003306: 	cmpq	$0x1, 0x58(%rsp)
    0000330c: 	setne	%dl
    0000330f: 	andl	%edx, %eax
    00003311: 	movq	%r10, %rdx
    00003314: 	subq	%r12, %rdx
    00003317: 	cmpq	$0x8, %rdx
    0000331b: 	seta	%dl
    0000331e: 	testb	%dl, %al
    00003320: 	je	.Ltmp1205 # Offset: 13088
    00003326: 	leaq	0x4(%r9), %rdx
    0000332a: 	movq	%r10, %rax
    0000332d: 	subq	%rdx, %rax
    00003330: 	cmpq	$0x8, %rax
    00003334: 	jbe	.Ltmp1205 # Offset: 13108
    0000333a: 	cmpq	$0x2, 0x90(%rsp)
    00003343: 	jbe	.Ltmp1206 # Offset: 13123
    00003349: 	movq	0x98(%rsp), %rdx
    00003351: 	movaps	%xmm3, %xmm7
    00003354: 	movaps	%xmm2, %xmm6
    00003357: 	xorl	%eax, %eax
    00003359: 	movaps	%xmm4, %xmm9
    0000335d: 	movaps	%xmm1, %xmm8
    00003361: 	shufps	$0x0, %xmm7, %xmm7
    00003365: 	shufps	$0x0, %xmm6, %xmm6
    00003369: 	shufps	$0x0, %xmm9, %xmm9
    0000336e: 	shufps	$0x0, %xmm8, %xmm8
.Ltmp1207:
    00003373: 	movups	(%rsi,%rax), %xmm0
    00003377: 	movups	(%r8,%rax), %xmm5
    0000337c: 	mulps	%xmm8, %xmm0
    00003380: 	mulps	%xmm9, %xmm5
    00003384: 	addps	%xmm5, %xmm0
    00003387: 	movups	(%rdi,%rax), %xmm5
    0000338b: 	mulps	%xmm7, %xmm5
    0000338e: 	addps	%xmm5, %xmm0
    00003391: 	movups	(%r9,%rax), %xmm5
    00003396: 	mulps	%xmm6, %xmm5
    00003399: 	addps	%xmm5, %xmm0
    0000339c: 	movups	(%r10,%rax), %xmm5
    000033a1: 	addps	%xmm5, %xmm0
    000033a4: 	movups	%xmm0, (%r10,%rax)
    000033a9: 	addq	$0x10, %rax
    000033ad: 	cmpq	%rax, %rdx
    000033b0: 	jne	.Ltmp1207 # Offset: 13232
    000033b2: 	movq	0xc0(%rsp), %rdx
    000033ba: 	cmpq	%rdx, 0x58(%rsp)
    000033bf: 	je	.Ltmp1204 # Offset: 13247
    000033c5: 	movq	0xb0(%rsp), %rax
    000033cd: 	cmpq	$0x1, %rax
    000033d1: 	movq	%rax, %r13
    000033d4: 	movq	0xa8(%rsp), %rax
    000033dc: 	je	.Ltmp1208 # Offset: 13276
    000033e2: 	movq	%rax, 0x70(%rsp)
.Ltmp1296:
    000033e7: 	addq	%rdx, %rbx
    000033ea: 	movaps	%xmm1, %xmm5
    000033ed: 	movaps	%xmm4, %xmm6
    000033f0: 	movq	0x68(%rsp), %r12
    000033f5: 	movq	(%rbp,%rbx,4), %xmm0
    000033fb: 	movq	0x50(%rsp), %rbx
    00003400: 	shufps	$0xe0, %xmm5, %xmm5
    00003404: 	shufps	$0xe0, %xmm6, %xmm6
    00003408: 	addq	%rdx, %r12
    0000340b: 	movq	0x30(%rsp), %rax
    00003410: 	mulps	%xmm5, %xmm0
    00003413: 	addq	%rdx, %rbx
    00003416: 	movq	(%rbp,%rbx,4), %xmm5
    0000341c: 	movq	0x48(%rsp), %rbx
    00003421: 	leaq	(%rax,%r12,4), %r12
    00003425: 	movq	0x70(%rsp), %rax
    0000342a: 	mulps	%xmm6, %xmm5
    0000342d: 	addq	%rdx, %rbx
    00003430: 	movaps	%xmm3, %xmm6
    00003433: 	addq	0x40(%rsp), %rdx
    00003438: 	shufps	$0xe0, %xmm6, %xmm6
    0000343c: 	addps	%xmm5, %xmm0
    0000343f: 	movq	(%rbp,%rbx,4), %xmm5
    00003445: 	mulps	%xmm6, %xmm5
    00003448: 	movaps	%xmm2, %xmm6
    0000344b: 	shufps	$0xe0, %xmm6, %xmm6
    0000344f: 	addps	%xmm5, %xmm0
    00003452: 	movq	(%rbp,%rdx,4), %xmm5
    00003458: 	movq	%r13, %rdx
    0000345b: 	andq	$-0x2, %rdx
    0000345f: 	mulps	%xmm6, %xmm5
    00003462: 	addq	%rdx, %rax
    00003465: 	addps	%xmm5, %xmm0
    00003468: 	movq	(%r12), %xmm5
    0000346e: 	addps	%xmm5, %xmm0
    00003471: 	movlps	%xmm0, (%r12)
    00003476: 	cmpq	%rdx, %r13
    00003479: 	je	.Ltmp1204 # Offset: 13433
.Ltmp1208:
    0000347b: 	movq	0x60(%rsp), %rbx
    00003480: 	leaq	(%rbx,%rax), %rdx
    00003484: 	movq	0x30(%rsp), %rbx
    00003489: 	leaq	(%rbx,%rdx,4), %rdx
    0000348d: 	movq	0x18(%rsp), %rbx
    00003492: 	addq	%rax, %rbx
    00003495: 	mulss	(%rbp,%rbx,4), %xmm1
    0000349b: 	movq	0x20(%rsp), %rbx
    000034a0: 	addq	%rax, %rbx
    000034a3: 	mulss	(%rbp,%rbx,4), %xmm4
    000034a9: 	movq	0x10(%rsp), %rbx
    000034ae: 	addq	%rax, %rbx
    000034b1: 	addq	0x28(%rsp), %rax
    000034b6: 	mulss	(%rbp,%rbx,4), %xmm3
    000034bc: 	mulss	(%rbp,%rax,4), %xmm2
    000034c2: 	addss	%xmm4, %xmm1
    000034c6: 	addss	%xmm3, %xmm1
    000034ca: 	addss	%xmm2, %xmm1
    000034ce: 	addss	(%rdx), %xmm1
    000034d2: 	movss	%xmm1, (%rdx)
.Ltmp1204:
    000034d6: 	addq	$0x4, 0x8(%rsp)
    000034dc: 	addq	$0x10, %rcx
    000034e0: 	addq	%r11, %r8
    000034e3: 	addq	%r11, %rsi
    000034e6: 	addq	%r14, 0x20(%rsp)
    000034eb: 	movq	0x8(%rsp), %rax
    000034f0: 	addq	%r11, %rdi
    000034f3: 	addq	%r11, %r9
    000034f6: 	addq	%r14, 0x18(%rsp)
    000034fb: 	addq	%r14, 0x10(%rsp)
    00003500: 	addq	%r14, 0x28(%rsp)
    00003505: 	cmpq	0x88(%rsp), %rax
    0000350d: 	jb	.Ltmp1209 # Offset: 13581
.Ltmp1299:
    00003513: 	movq	%rax, %rdi
    00003516: 	cmpq	%rdi, 0x108(%rsp)
    0000351e: 	jbe	.Ltmp1210 # Offset: 13598
    00003524: 	cmpq	%r15, 0x78(%rsp)
    00003529: 	jbe	.Ltmp1210 # Offset: 13609
    0000352f: 	movq	%rdi, %rax
    00003532: 	movq	0x60(%rsp), %rbx
    00003537: 	imulq	0xa0(%rsp), %rdi
    00003540: 	movq	0x38(%rsp), %rcx
    00003545: 	movq	0x98(%rsp), %r11
    0000354d: 	addq	%rbx, %rax
    00003550: 	leaq	(%rcx,%rax,4), %r8
    00003554: 	leaq	(%rdi,%r15), %rsi
    00003558: 	movq	0x30(%rsp), %rcx
    0000355d: 	leaq	(%rbp,%rsi,4), %rdx
.Ltmp1216:
    00003562: 	leaq	0x4(%rdx), %r9
    00003566: 	movq	%r10, %rax
    00003569: 	movss	(%r8), %xmm1
    0000356e: 	subq	%r9, %rax
    00003571: 	cmpq	$0x8, %rax
    00003575: 	jbe	.Ltmp1211 # Offset: 13685
    0000357b: 	cmpq	$0x1, 0x58(%rsp)
    00003581: 	je	.Ltmp1211 # Offset: 13697
    00003587: 	cmpq	$0x2, 0x90(%rsp)
    00003590: 	jbe	.Ltmp1212 # Offset: 13712
    00003596: 	movaps	%xmm1, %xmm2
    00003599: 	xorl	%eax, %eax
    0000359b: 	shufps	$0x0, %xmm2, %xmm2
    0000359f: 	nop # Size: 1
.Ltmp1213:
    000035a0: 	movups	(%rdx,%rax), %xmm0
    000035a4: 	movups	(%r10,%rax), %xmm7
    000035a9: 	mulps	%xmm2, %xmm0
    000035ac: 	addps	%xmm7, %xmm0
    000035af: 	movups	%xmm0, (%r10,%rax)
    000035b4: 	addq	$0x10, %rax
    000035b8: 	cmpq	%rax, %r11
    000035bb: 	jne	.Ltmp1213 # Offset: 13755
    000035bd: 	movq	0xc0(%rsp), %r9
    000035c5: 	cmpq	%r9, 0x58(%rsp)
    000035ca: 	je	.Ltmp1214 # Offset: 13770
    000035cc: 	movq	0xb0(%rsp), %rax
    000035d4: 	cmpq	$0x1, %rax
    000035d8: 	movq	%rax, %r13
    000035db: 	movq	0xa8(%rsp), %rax
    000035e3: 	je	.Ltmp1215 # Offset: 13795
.Ltmp1298:
    000035e5: 	movq	0x68(%rsp), %r12
    000035ea: 	movaps	%xmm1, %xmm2
    000035ed: 	shufps	$0xe0, %xmm2, %xmm2
    000035f1: 	addq	%r9, %r12
    000035f4: 	addq	%rsi, %r9
    000035f7: 	movq	%r13, %rsi
    000035fa: 	movq	(%rbp,%r9,4), %xmm0
    00003601: 	leaq	(%rcx,%r12,4), %r12
    00003605: 	andq	$-0x2, %rsi
    00003609: 	addq	%rsi, %rax
    0000360c: 	mulps	%xmm2, %xmm0
    0000360f: 	movq	(%r12), %xmm2
    00003615: 	addps	%xmm2, %xmm0
    00003618: 	movlps	%xmm0, (%r12)
    0000361d: 	cmpq	%r13, %rsi
    00003620: 	je	.Ltmp1214 # Offset: 13856
.Ltmp1215:
    00003622: 	leaq	(%rax,%rbx), %rsi
    00003626: 	addq	%rdi, %rax
    00003629: 	mulss	(%rbp,%rax,4), %xmm1
    0000362f: 	leaq	(%rcx,%rsi,4), %rsi
    00003633: 	addss	(%rsi), %xmm1
    00003637: 	movss	%xmm1, (%rsi)
.Ltmp1214:
    0000363b: 	addq	$0x4, %r8
    0000363f: 	addq	%r14, %rdx
    00003642: 	addq	0xa0(%rsp), %rdi
    0000364a: 	cmpq	%r8, 0xb8(%rsp)
    00003652: 	je	.Ltmp1210 # Offset: 13906
    00003658: 	leaq	(%rdi,%r15), %rsi
    0000365c: 	jmp	.Ltmp1216 # Offset: 13916
.Ltmp1026:
    00003661: 	cmpq	$0x0, 0x80(%rsp)
    0000366a: 	jne	.Ltmp993 # Offset: 13930
.Ltmp935:
    00003670: 	testq	%r14, %r14
    00003673: 	je	.Ltmp1217 # Offset: 13939
    00003679: 	movq	0x30(%rsp), %rbp
    0000367e: 	movq	0x38(%rsp), %rbx
    00003683: 	movq	%r14, %r8
    00003686: 	xorl	%ecx, %ecx
    00003688: 	movq	%r15, %rsi
    0000368b: 	movq	%rbp, %rdx
    0000368e: 	movq	%rbx, %rdi
    00003691: 	callq	"_ZN19matmul_KJI_unrolledIfEclEPKfS2_Pfmm.isra.0/1" # Offset: 13969
    00003696: 	movq	%r14, %r8
    00003699: 	xorl	%ecx, %ecx
    0000369b: 	movq	%rbp, %rdx
    0000369e: 	movq	%r15, %rsi
    000036a1: 	movq	%rbx, %rdi
    000036a4: 	callq	"_ZN19matmul_JKI_unrolledIfEclEPKfS2_Pfmm.isra.0/1" # Offset: 13988
.Ltmp1135:
    000036a9: 	movq	0x30(%rsp), %rbp
    000036ae: 	movq	0x38(%rsp), %rbx
    000036b3: 	movq	%r14, %r8
    000036b6: 	xorl	%ecx, %ecx
    000036b8: 	movq	%r15, %rsi
    000036bb: 	movq	%rbp, %rdx
    000036be: 	movq	%rbx, %rdi
    000036c1: 	callq	"_ZN28matmul_JIK_blocked_unrolled2IfEclEPKfS2_Pfmm.isra.0/1" # Offset: 14017
    000036c6: 	movq	%r14, %r8
    000036c9: 	xorl	%ecx, %ecx
    000036cb: 	movq	%rbp, %rdx
    000036ce: 	movq	%r15, %rsi
    000036d1: 	movq	%rbx, %rdi
    000036d4: 	callq	"_ZN28matmul_JIK_blocked_unrolled3IfEclEPKfS2_Pfmm.isra.0/1" # Offset: 14036
    000036d9: 	movq	%r14, %r8
    000036dc: 	xorl	%ecx, %ecx
    000036de: 	movq	%rbp, %rdx
    000036e1: 	movq	%r15, %rsi
    000036e4: 	movq	%rbx, %rdi
    000036e7: 	callq	"_ZN28matmul_IJK_blocked_unrolled2IfEclEPKfS2_Pfmm.isra.0/1" # Offset: 14055
    000036ec: 	movq	%r14, %r8
.Ltmp1304:
    000036ef: 	xorl	%ecx, %ecx
    000036f1: 	movq	%rbp, %rdx
    000036f4: 	movq	%r15, %rsi
    000036f7: 	movq	%rbx, %rdi
    000036fa: 	callq	"_ZN28matmul_IJK_blocked_unrolled3IfEclEPKfS2_Pfmm.isra.0/1" # Offset: 14074
.Ltmp1202:
    000036ff: 	movq	0x3ab08(%rsp), %rax
    00003707: 	subq	%fs:0x28, %rax
    00003710: 	jne	.Ltmp1218 # Offset: 14096
    00003716: 	movq	0x30(%rsp), %rdx
    0000371b: 	movq	0x38(%rsp), %rdi
    00003720: 	movq	%r14, %r8
    00003723: 	movq	%r15, %rsi
    00003726: 	addq	$0x3ab18, %rsp
    0000372d: 	xorl	%ecx, %ecx
    0000372f: 	popq	%rbx
    00003730: 	popq	%rbp
    00003731: 	popq	%r12
    00003733: 	popq	%r13
    00003735: 	popq	%r14
    00003737: 	popq	%r15
    00003739: 	jmp	"_ZN28matmul_JKI_blocked_unrolled3IfEclEPKfS2_Pfmm.isra.0/1" # TAILCALL  # Offset: 14137
    0000373e: 	nop # Size: 2
.Ltmp1024:
    00003740: 	leaq	0x1(%r8), %rax
    00003744: 	addq	$0x4, %r10
    00003748: 	addq	%rsi, %r9
    0000374b: 	cmpq	%r11, %r8
    0000374e: 	je	.Ltmp1022 # Offset: 14158
    00003754: 	movq	%rax, %r8
    00003757: 	jmp	.Ltmp1219 # Offset: 14167
.Ltmp1031:
    0000375c: 	addq	$0x1, %rdx
    00003760: 	addq	%rbx, %rsi
    00003763: 	addq	%rbx, %rcx
    00003766: 	cmpq	%rdx, 0x80(%rsp)
    0000376e: 	jne	.Ltmp1220 # Offset: 14190
    00003774: 	testq	%r14, %r14
    00003777: 	je	.Ltmp1035 # Offset: 14199
    0000377d: 	jmp	.Ltmp1221 # Offset: 14205
    00003782: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1036:
    00003788: 	movq	0x18(%rsp), %rdx
    0000378d: 	leaq	(%rbx,%rax), %r11
.Ltmp1222:
    00003791: 	movss	(%rdx), %xmm0
    00003795: 	addq	$0x4, %rax
    00003799: 	addq	$0x4, %rdx
    0000379d: 	mulss	%xmm1, %xmm0
    000037a1: 	addss	-0x4(%rax), %xmm0
    000037a6: 	movss	%xmm0, -0x4(%rax)
    000037ab: 	cmpq	%rax, %r11
    000037ae: 	jne	.Ltmp1222 # Offset: 14254
    000037b0: 	jmp	.Ltmp1039 # Offset: 14256
.Ltmp1037:
    000037b5: 	movq	%r14, %r8
    000037b8: 	xorl	%edx, %edx
    000037ba: 	jmp	.Ltmp1223 # Offset: 14266
.Ltmp1044:
    000037bf: 	addq	$0x1, %rdx
    000037c3: 	addq	%rbx, %rcx
    000037c6: 	addq	%rbx, %rsi
    000037c9: 	cmpq	%rdx, 0x80(%rsp)
    000037d1: 	jne	.Ltmp1224 # Offset: 14289
    000037d7: 	testq	%r14, %r14
    000037da: 	je	.Ltmp1225 # Offset: 14298
    000037e0: 	jmp	.Ltmp1226 # Offset: 14304
    000037e5: 	nopl	(%rax) # Size: 3
.Ltmp1048:
    000037e8: 	movq	0x20(%rsp), %rax
    000037ed: 	movq	%rcx, %r8
.Ltmp1227:
    000037f0: 	movss	(%r8), %xmm0
    000037f5: 	addq	$0x4, %rax
    000037f9: 	addq	$0x4, %r8
    000037fd: 	mulss	%xmm1, %xmm0
    00003801: 	addss	-0x4(%rax), %xmm0
    00003806: 	movss	%xmm0, -0x4(%rax)
    0000380b: 	cmpq	%rax, %r13
    0000380e: 	jne	.Ltmp1227 # Offset: 14350
    00003810: 	jmp	.Ltmp1051 # Offset: 14352
.Ltmp1049:
    00003815: 	movq	%r14, %r9
    00003818: 	xorl	%eax, %eax
    0000381a: 	jmp	.Ltmp1228 # Offset: 14362
.Ltmp1056:
    0000381f: 	addq	$0x1, %rdx
    00003823: 	addq	%rbx, %rcx
    00003826: 	addq	%rbx, %rsi
    00003829: 	cmpq	%rdx, 0x80(%rsp)
    00003831: 	jne	.Ltmp1229 # Offset: 14385
    00003837: 	testq	%r14, %r14
    0000383a: 	je	.Ltmp1230 # Offset: 14394
    00003840: 	jmp	.Ltmp1231 # Offset: 14400
    00003845: 	nopl	(%rax) # Size: 3
.Ltmp1064:
    00003848: 	addq	%rbx, 0x10(%rsp)
    0000384d: 	addq	$0x1, %rdx
    00003851: 	addq	%rbx, %rcx
    00003854: 	cmpq	%rdx, 0x80(%rsp)
    0000385c: 	jne	.Ltmp1232 # Offset: 14428
    00003862: 	testq	%r14, %r14
    00003865: 	je	.Ltmp1068 # Offset: 14437
    0000386b: 	jmp	.Ltmp1233 # Offset: 14443
.Ltmp1073:
    00003870: 	addq	$0x1, %rdx
    00003874: 	addq	%rbx, %rsi
    00003877: 	addq	%rbx, %rcx
    0000387a: 	cmpq	%rdx, 0x80(%rsp)
    00003882: 	jne	.Ltmp1234 # Offset: 14466
    00003888: 	testq	%r14, %r14
    0000388b: 	je	.Ltmp1235 # Offset: 14475
    00003891: 	jmp	.Ltmp1236 # Offset: 14481
    00003896: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1081:
    000038a0: 	addq	$0x1, %rdx
    000038a4: 	addq	%rbx, %rcx
    000038a7: 	addq	%rbx, %rsi
    000038aa: 	cmpq	%rdx, 0x80(%rsp)
    000038b2: 	ja	.Ltmp1237 # Offset: 14514
    000038b8: 	testq	%r14, %r14
    000038bb: 	je	.Ltmp1238 # Offset: 14523
    000038c1: 	jmp	.Ltmp1239 # Offset: 14529
    000038c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1086:
    000038d0: 	addq	$0x1, %rdx
    000038d4: 	addq	%rbx, %rcx
    000038d7: 	addq	%rbx, %rsi
    000038da: 	cmpq	%rdx, 0x80(%rsp)
    000038e2: 	ja	.Ltmp1240 # Offset: 14562
    000038e8: 	testq	%r14, %r14
    000038eb: 	je	.Ltmp1241 # Offset: 14571
    000038f1: 	jmp	.Ltmp1242 # Offset: 14577
    000038f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1091:
    00003900: 	addq	$0x1, %rdx
    00003904: 	addq	%rbx, %rbp
    00003907: 	addq	%rbx, %rcx
    0000390a: 	cmpq	%rdx, 0x80(%rsp)
    00003912: 	ja	.Ltmp1243 # Offset: 14610
    00003918: 	testq	%r14, %r14
    0000391b: 	je	.Ltmp1244 # Offset: 14619
    00003921: 	jmp	.Ltmp1245 # Offset: 14625
    00003926: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1103:
    00003930: 	addq	$0x1, %rdx
    00003934: 	addq	%rbx, %rsi
    00003937: 	addq	%rbx, %rcx
    0000393a: 	cmpq	%rdx, 0x80(%rsp)
    00003942: 	ja	.Ltmp1246 # Offset: 14658
    00003948: 	testq	%r14, %r14
    0000394b: 	je	.Ltmp1247 # Offset: 14667
    00003951: 	jmp	.Ltmp1248 # Offset: 14673
    00003956: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1109:
    00003960: 	movq	%rdx, %rsi
    00003963: 	movq	%rcx, %rax
    00003966: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1249:
    00003970: 	movss	(%rsi), %xmm1
    00003974: 	addq	$0x4, %rax
    00003978: 	addq	$0x4, %rsi
    0000397c: 	mulss	%xmm0, %xmm1
    00003980: 	addss	-0x4(%rax), %xmm1
    00003985: 	movss	%xmm1, -0x4(%rax)
    0000398a: 	cmpq	%rax, %rbx
    0000398d: 	jne	.Ltmp1249 # Offset: 14733
    0000398f: 	jmp	.Ltmp1112 # Offset: 14735
.Ltmp1110:
    00003994: 	movq	0x18(%rsp), %rax
    00003999: 	movq	%r12, %r10
    0000399c: 	xorl	%esi, %esi
    0000399e: 	jmp	.Ltmp1250 # Offset: 14750
.Ltmp1119:
    000039a3: 	addq	$0x1, %rdx
    000039a7: 	addq	%r13, %rcx
    000039aa: 	addq	%r13, %rsi
    000039ad: 	cmpq	%rdx, 0x80(%rsp)
    000039b5: 	ja	.Ltmp1251 # Offset: 14773
    000039bb: 	testq	%r14, %r14
    000039be: 	je	.Ltmp1252 # Offset: 14782
    000039c4: 	jmp	.Ltmp1253 # Offset: 14788
    000039c9: 	nopl	(%rax) # Size: 7
.Ltmp1131:
    000039d0: 	addq	%r13, 0x40(%rsp)
    000039d5: 	addq	$0x1, %rdx
    000039d9: 	addq	%r13, %rcx
    000039dc: 	cmpq	%rdx, 0x80(%rsp)
    000039e4: 	ja	.Ltmp1254 # Offset: 14820
    000039ea: 	testq	%r14, %r14
    000039ed: 	jne	.Ltmp1255 # Offset: 14829
    000039f3: 	cmpq	$0x0, 0x80(%rsp)
    000039fc: 	jne	.Ltmp1256 # Offset: 14844
    00003a02: 	jmp	.Ltmp1257 # Offset: 14850
    00003a07: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1137:
    00003a10: 	movaps	%xmm3, %xmm4
    00003a13: 	movaps	%xmm3, %xmm5
    00003a16: 	movaps	%xmm3, %xmm0
    00003a19: 	movq	%r10, %rax
    00003a1c: 	movaps	%xmm3, %xmm1
    00003a1f: 	jmp	.Ltmp1258 # Offset: 14879
.Ltmp1146:
    00003a24: 	addq	$0x1, %rdx
    00003a28: 	addq	%rbx, %rcx
    00003a2b: 	addq	%rbx, %rsi
    00003a2e: 	cmpq	%rdx, 0x80(%rsp)
    00003a36: 	jne	.Ltmp1259 # Offset: 14902
    00003a3c: 	testq	%r14, %r14
    00003a3f: 	je	.Ltmp1260 # Offset: 14911
    00003a45: 	jmp	.Ltmp1261 # Offset: 14917
    00003a4a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1151:
    00003a50: 	addq	$0x1, %rdx
    00003a54: 	addq	%rbx, %rcx
    00003a57: 	addq	%rbx, %rsi
    00003a5a: 	cmpq	%rdx, 0x80(%rsp)
    00003a62: 	jne	.Ltmp1262 # Offset: 14946
    00003a68: 	testq	%r14, %r14
    00003a6b: 	je	.Ltmp1263 # Offset: 14955
    00003a71: 	jmp	.Ltmp1264 # Offset: 14961
    00003a76: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1156:
    00003a80: 	addq	$0x1, %rdx
    00003a84: 	addq	%rbx, %rcx
    00003a87: 	addq	%rbx, %rsi
    00003a8a: 	cmpq	%rdx, 0x80(%rsp)
    00003a92: 	jne	.Ltmp1265 # Offset: 14994
    00003a98: 	testq	%r14, %r14
    00003a9b: 	je	.Ltmp1266 # Offset: 15003
    00003aa1: 	jmp	.Ltmp1267 # Offset: 15009
    00003aa6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1161:
    00003ab0: 	movaps	%xmm3, %xmm4
    00003ab3: 	movaps	%xmm3, %xmm5
    00003ab6: 	movaps	%xmm3, %xmm0
    00003ab9: 	movq	%r11, %rax
    00003abc: 	movaps	%xmm3, %xmm1
    00003abf: 	jmp	.Ltmp1268 # Offset: 15039
.Ltmp1170:
    00003ac4: 	addq	$0x1, %rdx
    00003ac8: 	addq	%rbx, %rcx
    00003acb: 	addq	%rbx, %rsi
    00003ace: 	cmpq	%rdx, 0x80(%rsp)
    00003ad6: 	jne	.Ltmp1269 # Offset: 15062
    00003adc: 	testq	%r14, %r14
    00003adf: 	je	.Ltmp1270 # Offset: 15071
    00003ae5: 	jmp	.Ltmp1271 # Offset: 15077
    00003aea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1175:
    00003af0: 	addq	$0x1, %rdx
    00003af4: 	addq	%rbx, %rcx
    00003af7: 	addq	%rbx, %rsi
    00003afa: 	cmpq	%rdx, 0x80(%rsp)
    00003b02: 	jne	.Ltmp1272 # Offset: 15106
    00003b08: 	testq	%r14, %r14
    00003b0b: 	je	.Ltmp1273 # Offset: 15115
    00003b11: 	jmp	.Ltmp1274 # Offset: 15121
    00003b16: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1180:
    00003b20: 	addq	%rbx, 0x68(%rsp)
    00003b25: 	addq	$0x1, %rdx
    00003b29: 	addq	%rbx, %rcx
    00003b2c: 	cmpq	%rdx, 0x80(%rsp)
    00003b34: 	jne	.Ltmp1275 # Offset: 15156
    00003b3a: 	testq	%r14, %r14
    00003b3d: 	je	.Ltmp1276 # Offset: 15165
    00003b43: 	jmp	.Ltmp1277 # Offset: 15171
    00003b48: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1186:
    00003b50: 	movq	0x48(%rsp), %rdx
    00003b55: 	movq	0x18(%rsp), %rax
    00003b5a: 	movq	%rsi, %r8
    00003b5d: 	nopl	(%rax) # Size: 3
.Ltmp1278:
    00003b60: 	movss	(%r8), %xmm1
    00003b65: 	addq	$0x4, %rax
    00003b69: 	addq	$0x10, %rdx
    00003b6d: 	addq	$0x10, %r8
    00003b71: 	mulss	%xmm0, %xmm1
    00003b75: 	addss	-0x10(%rdx), %xmm1
    00003b7a: 	movss	%xmm1, -0x10(%rdx)
    00003b7f: 	movss	-0xc(%r8), %xmm1
    00003b85: 	mulss	%xmm0, %xmm1
    00003b89: 	addss	-0xc(%rdx), %xmm1
    00003b8e: 	movss	%xmm1, -0xc(%rdx)
    00003b93: 	movss	-0x8(%r8), %xmm1
    00003b99: 	mulss	%xmm0, %xmm1
    00003b9d: 	addss	-0x8(%rdx), %xmm1
    00003ba2: 	movss	%xmm1, -0x8(%rdx)
    00003ba7: 	movss	-0x4(%r8), %xmm1
    00003bad: 	mulss	%xmm0, %xmm1
    00003bb1: 	addss	-0x4(%rdx), %xmm1
    00003bb6: 	movss	%xmm1, -0x4(%rdx)
    00003bbb: 	cmpq	%rax, %rbp
    00003bbe: 	ja	.Ltmp1278 # Offset: 15294
    00003bc0: 	jmp	.Ltmp1188 # Offset: 15296
    00003bc5: 	nopl	(%rax) # Size: 3
.Ltmp1190:
    00003bc8: 	movq	0x10(%rsp), %rbx
    00003bcd: 	movaps	%xmm0, %xmm1
    00003bd0: 	leaq	0x1(%rax), %rdx
    00003bd4: 	mulss	-0x4(%r13,%rbx), %xmm1
    00003bdb: 	addss	(%r9), %xmm1
    00003be0: 	movss	%xmm1, (%r9)
    00003be5: 	cmpq	%r12, %rdx
    00003be8: 	jae	.Ltmp1189 # Offset: 15336
    00003bee: 	leaq	(%r15,%rdx), %r8
    00003bf2: 	addq	%rcx, %rdx
    00003bf5: 	movss	(%r13,%rdx,4), %xmm1
    00003bfc: 	leaq	(%r14,%r8,4), %r8
    00003c00: 	leaq	0x2(%rax), %rdx
    00003c04: 	mulss	%xmm0, %xmm1
    00003c08: 	addss	(%r8), %xmm1
    00003c0d: 	movss	%xmm1, (%r8)
    00003c12: 	cmpq	%rdx, %r12
    00003c15: 	jbe	.Ltmp1189 # Offset: 15381
    00003c1b: 	leaq	(%r15,%rdx), %r8
    00003c1f: 	addq	%rcx, %rdx
    00003c22: 	addq	$0x3, %rax
    00003c26: 	movss	(%r13,%rdx,4), %xmm1
    00003c2d: 	leaq	(%r14,%r8,4), %r8
    00003c31: 	mulss	%xmm0, %xmm1
    00003c35: 	addss	(%r8), %xmm1
    00003c3a: 	movss	%xmm1, (%r8)
    00003c3f: 	cmpq	%r12, %rax
    00003c42: 	jb	.Ltmp1192 # Offset: 15426
    00003c48: 	jmp	.Ltmp1189 # Offset: 15432
    00003c4d: 	nopl	(%rax) # Size: 3
.Ltmp1185:
    00003c50: 	movq	%rbx, %rax
    00003c53: 	jmp	.Ltmp1188 # Offset: 15443
.Ltmp1191:
    00003c58: 	xorl	%r9d, %r9d
    00003c5b: 	jmp	.Ltmp1279 # Offset: 15451
.Ltmp1198:
    00003c60: 	addq	$0x1, %rdx
    00003c64: 	addq	%rbx, %rsi
    00003c67: 	addq	%rbx, %rcx
    00003c6a: 	cmpq	%rdx, 0x80(%rsp)
    00003c72: 	ja	.Ltmp1280 # Offset: 15474
    00003c78: 	testq	%r14, %r14
    00003c7b: 	je	.Ltmp1281 # Offset: 15483
    00003c81: 	jmp	.Ltmp1282 # Offset: 15489
    00003c86: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1205:
    00003c90: 	movq	0xd0(%rsp), %rdx
    00003c98: 	movq	%r9, 0x40(%rsp)
    00003c9d: 	movq	%r15, %rax
    00003ca0: 	movq	%rcx, 0x48(%rsp)
    00003ca5: 	movq	0x78(%rsp), %rcx
    00003caa: 	leaq	(%rdx,%r8), %r13
    00003cae: 	leaq	(%rdx,%rsi), %r12
    00003cb2: 	leaq	(%rdx,%rdi), %rbx
    00003cb6: 	addq	%r9, %rdx
    00003cb9: 	movq	0xd8(%rsp), %r9
    00003cc1: 	nopl	(%rax) # Size: 7
.Ltmp1283:
    00003cc8: 	movss	(%r13,%rax,4), %xmm0
    00003ccf: 	movss	(%r12,%rax,4), %xmm5
    00003cd5: 	mulss	%xmm4, %xmm0
    00003cd9: 	mulss	%xmm1, %xmm5
    00003cdd: 	addss	%xmm5, %xmm0
    00003ce1: 	movss	(%rbx,%rax,4), %xmm5
    00003ce6: 	mulss	%xmm3, %xmm5
    00003cea: 	addss	%xmm5, %xmm0
    00003cee: 	movss	(%rdx,%rax,4), %xmm5
    00003cf3: 	mulss	%xmm2, %xmm5
    00003cf7: 	addss	%xmm5, %xmm0
    00003cfb: 	addss	(%r9,%rax,4), %xmm0
    00003d01: 	movss	%xmm0, (%r9,%rax,4)
    00003d07: 	addq	$0x1, %rax
    00003d0b: 	cmpq	%rax, %rcx
    00003d0e: 	jne	.Ltmp1283 # Offset: 15630
    00003d10: 	movq	0x40(%rsp), %r9
    00003d15: 	movq	0x48(%rsp), %rcx
    00003d1a: 	jmp	.Ltmp1204 # Offset: 15642
    00003d1f: 	nop # Size: 1
.Ltmp1210:
    00003d20: 	movq	0xa0(%rsp), %rcx
    00003d28: 	addq	%r14, %r10
    00003d2b: 	addq	%rcx, 0x60(%rsp)
    00003d30: 	addq	$0x1, 0xc8(%rsp)
    00003d39: 	movq	0xc8(%rsp), %rax
    00003d41: 	addq	%r14, 0xb8(%rsp)
    00003d49: 	addq	%r14, 0xe8(%rsp)
    00003d51: 	addq	%rcx, 0x68(%rsp)
    00003d56: 	addq	%r14, 0xd8(%rsp)
    00003d5e: 	cmpq	%rax, 0x80(%rsp)
    00003d66: 	jne	.Ltmp1284 # Offset: 15718
    00003d6c: 	movq	0x150(%rsp), %rdi
    00003d74: 	movq	%r14, %r11
    00003d77: 	subq	$0xe10, 0xd0(%rsp)
    00003d83: 	cmpq	%rdi, %rcx
    00003d86: 	ja	.Ltmp1285 # Offset: 15750
    00003d8c: 	movq	0x160(%rsp), %rax
    00003d94: 	movq	0x158(%rsp), %rdi
    00003d9c: 	movq	%r14, %r15
    00003d9f: 	movq	%rbp, %r14
    00003da2: 	addq	%rdi, 0xf0(%rsp)
    00003daa: 	addq	%rdi, 0xf8(%rsp)
    00003db2: 	movq	0x148(%rsp), %rdi
    00003dba: 	addq	%rax, 0x120(%rsp)
    00003dc2: 	addq	%rax, 0x118(%rsp)
    00003dca: 	addq	%rax, 0x110(%rsp)
    00003dd2: 	cmpq	%rdi, 0xa0(%rsp)
    00003dda: 	ja	.Ltmp1286 # Offset: 15834
    00003de0: 	movq	0xa0(%rsp), %r14
    00003de8: 	movq	%rbp, %r15
.Ltmp1281:
    00003deb: 	movq	0x100(%rsp), %rbx
    00003df3: 	movq	0x30(%rsp), %rsi
    00003df8: 	leaq	(,%r14,4), %r12
    00003e00: 	xorl	%edx, %edx
    00003e02: 	movq	DATAat0x2d9e0(%rip), %xmm4
    00003e0a: 	movsd	DATAat0x2da10(%rip), %xmm3
    00003e12: 	movss	DATAat0x2d9d0(%rip), %xmm5
    00003e1a: 	movq	%rsi, %rbp
    00003e1d: 	movq	%rbx, %rcx
.Ltmp1300:
    00003e20: 	xorl	%eax, %eax
    00003e22: 	testq	%r14, %r14
    00003e25: 	jne	.Ltmp1287 # Offset: 15909
    00003e27: 	jmp	.Ltmp1288 # Offset: 15911
    00003e2c: 	nopl	(%rax) # Size: 4
.Ltmp1290:
    00003e30: 	addq	$0x1, %rax
    00003e34: 	cmpq	%rax, %r14
    00003e37: 	je	.Ltmp1288 # Offset: 15927
.Ltmp1287:
    00003e3d: 	movss	(%rcx,%rax,4), %xmm1
    00003e42: 	movaps	%xmm1, %xmm2
    00003e45: 	movaps	%xmm1, %xmm0
    00003e48: 	subss	(%rsi,%rax,4), %xmm0
    00003e4d: 	andps	%xmm5, %xmm2
    00003e50: 	cvtss2sd	%xmm2, %xmm2
    00003e54: 	comisd	DATAat0x2da08(%rip), %xmm2
    00003e5c: 	jbe	.Ltmp1289 # Offset: 15964
    00003e5e: 	divss	%xmm1, %xmm0
.Ltmp1289:
    00003e62: 	cvtss2sd	%xmm0, %xmm0
    00003e66: 	andpd	%xmm4, %xmm0
    00003e6a: 	comisd	%xmm0, %xmm3
    00003e6e: 	ja	.Ltmp1290 # Offset: 15982
    00003e70: 	leaq	DATAat0x2d180(%rip), %rsi
    00003e77: 	movl	$0x1, %edi
    00003e7c: 	xorl	%eax, %eax
    00003e7e: 	callq	__printf_chk@PLT # Offset: 15998
.Ltmp1302:
    00003e83: 	movq	0x30(%rsp), %rcx
    00003e88: 	xorl	%r13d, %r13d
.Ltmp1291:
    00003e8b: 	movq	%rcx, %rdi
    00003e8e: 	movq	%r12, %rdx
    00003e91: 	xorl	%esi, %esi
    00003e93: 	addq	$0x1, %r13
    00003e97: 	callq	memset@PLT # Offset: 16023
    00003e9c: 	movq	%rax, %rcx
    00003e9f: 	addq	%r12, %rcx
    00003ea2: 	cmpq	%r13, 0x80(%rsp)
    00003eaa: 	ja	.Ltmp1291 # Offset: 16042
.Ltmp1301:
    00003eac: 	movq	0x30(%rsp), %rdx
    00003eb1: 	movq	0x38(%rsp), %rdi
    00003eb6: 	movq	%r14, %r8
    00003eb9: 	movq	%r15, %rsi
    00003ebc: 	movq	0x80(%rsp), %rcx
    00003ec4: 	callq	"_ZN28matmul_JKI_blocked_unrolled3IfEclEPKfS2_Pfmm.isra.0/1" # Offset: 16068
    00003ec9: 	movq	DATAat0x2d9e0(%rip), %xmm4
    00003ed1: 	xorl	%edx, %edx
    00003ed3: 	movsd	DATAat0x2da10(%rip), %xmm3
    00003edb: 	movss	DATAat0x2d9d0(%rip), %xmm5
.Ltmp1303:
    00003ee3: 	xorl	%eax, %eax
    00003ee5: 	testq	%r14, %r14
    00003ee8: 	jne	.Ltmp1292 # Offset: 16104
    00003eea: 	jmp	.Ltmp1293 # Offset: 16106
    00003eef: 	nop # Size: 1
.Ltmp1295:
    00003ef0: 	addq	$0x1, %rax
    00003ef4: 	cmpq	%rax, %r14
    00003ef7: 	je	.Ltmp1293 # Offset: 16119
.Ltmp1292:
    00003efd: 	movss	(%rbx,%rax,4), %xmm1
    00003f02: 	movaps	%xmm1, %xmm2
    00003f05: 	movaps	%xmm1, %xmm0
    00003f08: 	subss	(%rbp,%rax,4), %xmm0
    00003f0e: 	andps	%xmm5, %xmm2
    00003f11: 	cvtss2sd	%xmm2, %xmm2
    00003f15: 	comisd	DATAat0x2da08(%rip), %xmm2
    00003f1d: 	jbe	.Ltmp1294 # Offset: 16157
    00003f1f: 	divss	%xmm1, %xmm0
.Ltmp1294:
    00003f23: 	cvtss2sd	%xmm0, %xmm0
    00003f27: 	andpd	%xmm4, %xmm0
    00003f2b: 	comisd	%xmm0, %xmm3
    00003f2f: 	ja	.Ltmp1295 # Offset: 16175
    00003f31: 	movq	0x3ab08(%rsp), %rax
    00003f39: 	subq	%fs:0x28, %rax
    00003f42: 	jne	.Ltmp1218 # Offset: 16194
    00003f48: 	addq	$0x3ab18, %rsp
    00003f4f: 	leaq	DATAat0x2d148(%rip), %rsi
    00003f56: 	movl	$0x1, %edi
    00003f5b: 	xorl	%eax, %eax
    00003f5d: 	popq	%rbx
    00003f5e: 	popq	%rbp
    00003f5f: 	popq	%r12
    00003f61: 	popq	%r13
    00003f63: 	popq	%r14
    00003f65: 	popq	%r15
    00003f67: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 16231
    00003f6c: 	nopl	(%rax) # Size: 4
.Ltmp1206:
    00003f70: 	movq	%r15, 0x70(%rsp)
    00003f75: 	movq	0x58(%rsp), %r13
    00003f7a: 	xorl	%edx, %edx
    00003f7c: 	jmp	.Ltmp1296 # Offset: 16252
.Ltmp1211:
    00003f81: 	movq	0xe8(%rsp), %r9
    00003f89: 	movq	%rdx, %rsi
    00003f8c: 	movq	%r10, %rax
    00003f8f: 	nop # Size: 1
.Ltmp1297:
    00003f90: 	movss	(%rsi), %xmm0
    00003f94: 	addq	$0x4, %rax
    00003f98: 	addq	$0x4, %rsi
    00003f9c: 	mulss	%xmm1, %xmm0
    00003fa0: 	addss	-0x4(%rax), %xmm0
    00003fa5: 	movss	%xmm0, -0x4(%rax)
    00003faa: 	cmpq	%rax, %r9
    00003fad: 	jne	.Ltmp1297 # Offset: 16301
    00003faf: 	jmp	.Ltmp1214 # Offset: 16303
.Ltmp1212:
    00003fb4: 	movq	0x58(%rsp), %r13
    00003fb9: 	movq	%r15, %rax
    00003fbc: 	xorl	%r9d, %r9d
    00003fbf: 	jmp	.Ltmp1298 # Offset: 16319
.Ltmp1203:
    00003fc4: 	movq	%rdi, 0x8(%rsp)
    00003fc9: 	movq	%rdi, %rax
    00003fcc: 	jmp	.Ltmp1299 # Offset: 16332
.Ltmp1288:
    00003fd1: 	addq	$0x1, %rdx
    00003fd5: 	addq	%r12, %rcx
    00003fd8: 	addq	%r12, %rsi
    00003fdb: 	cmpq	%rdx, 0x80(%rsp)
    00003fe3: 	ja	.Ltmp1300 # Offset: 16355
    00003fe9: 	testq	%r14, %r14
    00003fec: 	je	.Ltmp1301 # Offset: 16364
    00003ff2: 	jmp	.Ltmp1302 # Offset: 16370
    00003ff7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1293:
    00004000: 	addq	$0x1, %rdx
    00004004: 	addq	%r12, %rbx
    00004007: 	addq	%r12, %rbp
    0000400a: 	cmpq	%rdx, 0x80(%rsp)
    00004012: 	ja	.Ltmp1303 # Offset: 16402
    00004018: 	movq	0x3ab08(%rsp), %rax
    00004020: 	subq	%fs:0x28, %rax
    00004029: 	jne	.Ltmp1218 # Offset: 16425
    0000402f: 	addq	$0x3ab18, %rsp
    00004036: 	popq	%rbx
    00004037: 	popq	%rbp
    00004038: 	popq	%r12
    0000403a: 	popq	%r13
    0000403c: 	popq	%r14
    0000403e: 	popq	%r15
    00004040: 	retq # Offset: 16448
.Ltmp1217:
    00004041: 	movq	0x30(%rsp), %rbp
    00004046: 	movq	0x38(%rsp), %rbx
    0000404b: 	xorl	%r8d, %r8d
    0000404e: 	xorl	%ecx, %ecx
    00004050: 	movq	%r15, %rsi
    00004053: 	movq	%rbp, %rdx
    00004056: 	movq	%rbx, %rdi
    00004059: 	callq	"_ZN19matmul_KJI_unrolledIfEclEPKfS2_Pfmm.isra.0/1" # Offset: 16473
    0000405e: 	xorl	%r8d, %r8d
    00004061: 	xorl	%ecx, %ecx
    00004063: 	movq	%rbp, %rdx
    00004066: 	movq	%r15, %rsi
    00004069: 	movq	%rbx, %rdi
    0000406c: 	callq	"_ZN19matmul_JKI_unrolledIfEclEPKfS2_Pfmm.isra.0/1" # Offset: 16492
.Ltmp1257:
    00004071: 	movq	0x30(%rsp), %rbp
    00004076: 	movq	0x38(%rsp), %rbx
    0000407b: 	xorl	%r8d, %r8d
    0000407e: 	xorl	%ecx, %ecx
    00004080: 	movq	%r15, %rsi
    00004083: 	movq	%rbp, %rdx
    00004086: 	movq	%rbx, %rdi
    00004089: 	callq	"_ZN28matmul_JIK_blocked_unrolled2IfEclEPKfS2_Pfmm.isra.0/1" # Offset: 16521
    0000408e: 	xorl	%r8d, %r8d
    00004091: 	xorl	%ecx, %ecx
    00004093: 	movq	%rbp, %rdx
    00004096: 	movq	%r15, %rsi
    00004099: 	movq	%rbx, %rdi
    0000409c: 	callq	"_ZN28matmul_JIK_blocked_unrolled3IfEclEPKfS2_Pfmm.isra.0/1" # Offset: 16540
    000040a1: 	xorl	%r8d, %r8d
    000040a4: 	xorl	%ecx, %ecx
    000040a6: 	movq	%rbp, %rdx
    000040a9: 	movq	%r15, %rsi
    000040ac: 	movq	%rbx, %rdi
    000040af: 	callq	"_ZN28matmul_IJK_blocked_unrolled2IfEclEPKfS2_Pfmm.isra.0/1" # Offset: 16559
    000040b4: 	xorl	%r8d, %r8d
    000040b7: 	jmp	.Ltmp1304 # Offset: 16567
.Ltmp1218:
    000040bc: 	callq	__stack_chk_fail@PLT # Offset: 16572
DWARF CFI Instructions:
    <empty>
End of Function "_Z13verify_matmulIfEvPT_S1_S1_mm"

Binary Function "_Z13verify_matmulIdEvPT_S1_S1_mm" after disassembly {
  Number      : 74
  State       : disassembled
  Address     : 0x1f890
  Size        : 0x373e
  MaxSize     : 0x3740
  Offset      : 0x1f890
  Section     : .text
  Orc Section : .local.text._Z13verify_matmulIdEvPT_S1_S1_mm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB073:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0x75000(%rsp), %r11
.Ltmp1305:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp1305 # Offset: 37
    00000027: 	subq	$0x468, %rsp
    0000002e: 	movq	%rdi, 0x8(%rsp)
    00000033: 	movq	%rsi, %r15
    00000036: 	movq	%r8, %r14
    00000039: 	movq	%rdx, 0x70(%rsp)
    0000003e: 	movq	%rcx, 0x40(%rsp)
    00000043: 	movq	%fs:0x28, %rax
    0000004c: 	movq	%rax, 0x75458(%rsp)
    00000054: 	xorl	%eax, %eax
    00000056: 	testq	%rcx, %rcx
    00000059: 	je	.Ltmp1306 # Offset: 89
    0000005f: 	testq	%r8, %r8
    00000062: 	je	.Ltmp1307 # Offset: 98
    00000068: 	leaq	0x150(%rsp), %rcx
    00000070: 	leaq	(,%r8,8), %rbp
    00000078: 	xorl	%ebx, %ebx
    0000007a: 	movq	%rcx, 0xd0(%rsp)
.Ltmp1308:
    00000082: 	movq	%rcx, %rdi
    00000085: 	movq	%rbp, %rdx
    00000088: 	xorl	%esi, %esi
    0000008a: 	addq	$0x1, %rbx
    0000008e: 	callq	memset@PLT # Offset: 142
    00000093: 	movq	%rax, %rcx
    00000096: 	addq	%rbp, %rcx
    00000099: 	cmpq	%rbx, 0x40(%rsp)
    0000009e: 	jne	.Ltmp1308 # Offset: 158
    000000a0: 	movq	%r14, %rdi
    000000a3: 	movq	%r14, %r8
    000000a6: 	movq	0x8(%rsp), %rdx
    000000ab: 	xorl	%esi, %esi
    000000ad: 	shrq	%rdi
    000000b0: 	leaq	(,%r14,8), %r9
    000000b8: 	andq	$-0x2, %r8
    000000bc: 	xorl	%eax, %eax
    000000be: 	shlq	$0x4, %rdi
.Ltmp1313:
    000000c2: 	testq	%rax, %rax
    000000c5: 	js	.Ltmp1309 # Offset: 197
    000000cb: 	pxor	%xmm0, %xmm0
    000000cf: 	cvtsi2sd	%rax, %xmm0
    000000d4: 	cmpq	$0x1, %r14
    000000d8: 	je	.Ltmp1310 # Offset: 216
.Ltmp1367:
    000000de: 	movapd	%xmm0, %xmm1
    000000e2: 	leaq	(%rdi,%rdx), %r10
    000000e6: 	movq	%rdx, %rcx
    000000e9: 	unpcklpd	%xmm1, %xmm1
.Ltmp1311:
    000000ed: 	movups	%xmm1, (%rcx)
    000000f0: 	addq	$0x10, %rcx
    000000f4: 	cmpq	%r10, %rcx
    000000f7: 	jne	.Ltmp1311 # Offset: 247
    000000f9: 	movq	%r8, %rcx
    000000fc: 	cmpq	%r8, %r14
    000000ff: 	je	.Ltmp1312 # Offset: 255
.Ltmp1368:
    00000101: 	movq	0x8(%rsp), %rbx
    00000106: 	addq	%rsi, %rcx
    00000109: 	movsd	%xmm0, (%rbx,%rcx,8)
.Ltmp1312:
    0000010e: 	addq	$0x1, %rax
    00000112: 	addq	%r14, %rsi
    00000115: 	addq	%r9, %rdx
    00000118: 	cmpq	%rax, 0x40(%rsp)
    0000011d: 	jne	.Ltmp1313 # Offset: 285
    0000011f: 	movq	0x40(%rsp), %rax
    00000124: 	movq	%r15, %rdx
    00000127: 	xorl	%esi, %esi
    00000129: 	movq	%rax, %rdi
    0000012c: 	leaq	(,%rax,8), %r9
    00000134: 	andq	$-0x2, %rax
    00000138: 	shrq	%rdi
    0000013b: 	movq	%rax, %r8
    0000013e: 	xorl	%eax, %eax
    00000140: 	shlq	$0x4, %rdi
.Ltmp1318:
    00000144: 	testq	%rax, %rax
    00000147: 	js	.Ltmp1314 # Offset: 327
    0000014d: 	pxor	%xmm0, %xmm0
    00000151: 	cmpq	$0x1, 0x40(%rsp)
    00000157: 	cvtsi2sd	%rax, %xmm0
    0000015c: 	je	.Ltmp1315 # Offset: 348
.Ltmp1369:
    00000162: 	movapd	%xmm0, %xmm1
    00000166: 	leaq	(%rdx,%rdi), %r10
    0000016a: 	movq	%rdx, %rcx
    0000016d: 	unpcklpd	%xmm1, %xmm1
.Ltmp1316:
    00000171: 	movups	%xmm1, (%rcx)
    00000174: 	addq	$0x10, %rcx
    00000178: 	cmpq	%rcx, %r10
    0000017b: 	jne	.Ltmp1316 # Offset: 379
    0000017d: 	movq	%r8, %rcx
    00000180: 	cmpq	%r8, 0x40(%rsp)
    00000185: 	je	.Ltmp1317 # Offset: 389
.Ltmp1370:
    00000187: 	addq	%rsi, %rcx
    0000018a: 	movsd	%xmm0, (%r15,%rcx,8)
.Ltmp1317:
    00000190: 	addq	$0x1, %rax
    00000194: 	addq	0x40(%rsp), %rsi
    00000199: 	addq	%r9, %rdx
    0000019c: 	cmpq	%rax, %r14
    0000019f: 	jne	.Ltmp1318 # Offset: 415
    000001a1: 	movq	0x8(%rsp), %r10
    000001a6: 	leaq	(,%r14,8), %rsi
    000001ae: 	movq	%r15, %r9
    000001b1: 	xorl	%r8d, %r8d
.Ltmp1372:
    000001b4: 	movq	0xd0(%rsp), %r11
    000001bc: 	movq	0x40(%rsp), %rbx
    000001c1: 	xorl	%edi, %edi
.Ltmp1321:
    000001c3: 	movsd	(%r9,%rdi,8), %xmm1
    000001c9: 	movq	%r10, %rcx
    000001cc: 	movq	%r11, %rax
    000001cf: 	xorl	%edx, %edx
    000001d1: 	nopl	(%rax) # Size: 7
.Ltmp1319:
    000001d8: 	movsd	(%rcx), %xmm0
    000001dc: 	addq	$0x1, %rdx
    000001e0: 	addq	%rsi, %rcx
    000001e3: 	mulsd	%xmm1, %xmm0
    000001e7: 	addsd	(%rax), %xmm0
    000001eb: 	movsd	%xmm0, (%rax)
    000001ef: 	addq	%rsi, %rax
    000001f2: 	cmpq	%rdx, %rbx
    000001f5: 	jne	.Ltmp1319 # Offset: 501
    000001f7: 	leaq	0x1(%rdi), %rax
    000001fb: 	addq	$0x8, %r11
    000001ff: 	cmpq	%rax, %r14
    00000202: 	je	.Ltmp1320 # Offset: 514
    00000208: 	movq	%rax, %rdi
    0000020b: 	jmp	.Ltmp1321 # Offset: 523
.Ltmp1371:
    0000020d: 	movq	0x70(%rsp), %rcx
    00000212: 	leaq	(,%r14,8), %rbp
    0000021a: 	xorl	%ebx, %ebx
.Ltmp1322:
    0000021c: 	movq	%rcx, %rdi
    0000021f: 	movq	%rbp, %rdx
    00000222: 	xorl	%esi, %esi
    00000224: 	addq	$0x1, %rbx
    00000228: 	callq	memset@PLT # Offset: 552
    0000022d: 	movq	%rax, %rcx
    00000230: 	addq	%rbp, %rcx
    00000233: 	cmpq	%rbx, 0x40(%rsp)
    00000238: 	jne	.Ltmp1322 # Offset: 568
    0000023a: 	testq	%r14, %r14
    0000023d: 	je	.Ltmp1307 # Offset: 573
    00000243: 	movq	0x8(%rsp), %rax
    00000248: 	movq	%r14, %rsi
    0000024b: 	movq	%r14, %r8
    0000024e: 	movq	%r15, %rcx
    00000251: 	leaq	(,%r14,8), %r11
    00000259: 	shrq	%rsi
    0000025c: 	andq	$-0x2, %r8
    00000260: 	xorl	%r12d, %r12d
    00000263: 	movq	%rax, 0x18(%rsp)
    00000268: 	leaq	0x8(%r15), %rax
    0000026c: 	shlq	$0x4, %rsi
    00000270: 	movq	%rax, 0x10(%rsp)
    00000275: 	movq	0x70(%rsp), %rax
    0000027a: 	movq	$0x0, (%rsp)
    00000282: 	addq	%r11, %rax
    00000285: 	movq	%rax, 0x28(%rsp)
.Ltmp1327:
    0000028a: 	leaq	(%r12,%r8), %rdx
    0000028e: 	movq	0x70(%rsp), %rdi
    00000293: 	xorl	%r9d, %r9d
    00000296: 	xorl	%r13d, %r13d
    00000299: 	leaq	(%r15,%rdx,8), %r10
    0000029d: 	leaq	(%r15,%r12,8), %rdx
    000002a1: 	movq	0x28(%rsp), %rbp
    000002a6: 	movq	%r12, 0x30(%rsp)
    000002ab: 	movq	%rdx, 0x20(%rsp)
    000002b0: 	movq	0x18(%rsp), %rdx
    000002b5: 	movq	%rdi, %rax
    000002b8: 	movq	%rdi, %r12
.Ltmp1326:
    000002bb: 	leaq	0x8(%rdx), %rdi
    000002bf: 	cmpq	%rdi, %rax
    000002c2: 	setae	%bl
    000002c5: 	cmpq	%rbp, %rdx
    000002c8: 	setae	%dil
    000002cc: 	orb	%bl, %dil
    000002cf: 	je	.Ltmp1323 # Offset: 719
    000002d5: 	cmpq	0x10(%rsp), %rax
    000002da: 	setne	%bl
    000002dd: 	cmpq	$0x1, %r14
    000002e1: 	setne	%dil
    000002e5: 	testb	%dil, %bl
    000002e8: 	je	.Ltmp1323 # Offset: 744
    000002ee: 	movsd	(%rdx), %xmm1
    000002f2: 	xorl	%edi, %edi
    000002f4: 	unpcklpd	%xmm1, %xmm1
.Ltmp1324:
    000002f8: 	movupd	(%rcx,%rdi), %xmm0
    000002fd: 	movupd	(%rax,%rdi), %xmm7
    00000302: 	mulpd	%xmm1, %xmm0
    00000306: 	addpd	%xmm7, %xmm0
    0000030a: 	movups	%xmm0, (%rax,%rdi)
    0000030e: 	addq	$0x10, %rdi
    00000312: 	cmpq	%rdi, %rsi
    00000315: 	jne	.Ltmp1324 # Offset: 789
    00000317: 	cmpq	%r8, %r14
    0000031a: 	je	.Ltmp1325 # Offset: 794
    0000031c: 	leaq	(%r9,%r8), %rdi
    00000320: 	movsd	(%rdx), %xmm0
    00000324: 	mulsd	(%r10), %xmm0
    00000329: 	leaq	(%r12,%rdi,8), %rdi
    0000032d: 	addsd	(%rdi), %xmm0
    00000331: 	movsd	%xmm0, (%rdi)
.Ltmp1325:
    00000335: 	addq	$0x1, %r13
    00000339: 	addq	%r11, %rax
    0000033c: 	addq	%r11, %rdx
    0000033f: 	addq	%r11, %rbp
    00000342: 	addq	%r14, %r9
    00000345: 	cmpq	%r13, 0x40(%rsp)
    0000034a: 	jne	.Ltmp1326 # Offset: 842
    00000350: 	addq	$0x1, (%rsp)
    00000355: 	movq	0x30(%rsp), %r12
    0000035a: 	addq	%r11, %rcx
    0000035d: 	movq	(%rsp), %rax
    00000361: 	addq	$0x8, 0x18(%rsp)
    00000367: 	addq	%r11, 0x10(%rsp)
    0000036c: 	addq	%r14, %r12
    0000036f: 	cmpq	%rax, %r14
    00000372: 	jne	.Ltmp1327 # Offset: 882
.Ltmp1307:
    00000378: 	cmpq	$0x0, 0x40(%rsp)
    0000037e: 	je	.Ltmp1306 # Offset: 894
    00000384: 	movq	0x70(%rsp), %rsi
    00000389: 	leaq	0x150(%rsp), %rcx
    00000391: 	movq	DATAat0x2d9e0(%rip), %xmm2
    00000399: 	leaq	(,%r14,8), %rbx
    000003a1: 	movq	%rcx, 0x18(%rsp)
    000003a6: 	movsd	DATAat0x2da20(%rip), %xmm3
    000003ae: 	xorl	%edx, %edx
    000003b0: 	movq	%rcx, 0xd0(%rsp)
    000003b8: 	movq	%rsi, 0x20(%rsp)
.Ltmp1364:
    000003bd: 	xorl	%eax, %eax
    000003bf: 	testq	%r14, %r14
    000003c2: 	jne	.Ltmp1328 # Offset: 962
    000003c4: 	jmp	.Ltmp1329 # Offset: 964
    000003c9: 	nopl	(%rax) # Size: 7
.Ltmp1331:
    000003d0: 	addq	$0x1, %rax
    000003d4: 	cmpq	%rax, %r14
    000003d7: 	je	.Ltmp1329 # Offset: 983
.Ltmp1328:
    000003dd: 	movsd	(%rcx,%rax,8), %xmm1
    000003e2: 	movapd	%xmm1, %xmm4
    000003e6: 	movapd	%xmm1, %xmm0
    000003ea: 	subsd	(%rsi,%rax,8), %xmm0
    000003ef: 	andpd	%xmm2, %xmm4
    000003f3: 	comisd	DATAat0x2da18(%rip), %xmm4
    000003fb: 	jbe	.Ltmp1330 # Offset: 1019
    000003fd: 	divsd	%xmm1, %xmm0
.Ltmp1330:
    00000401: 	andpd	%xmm2, %xmm0
    00000405: 	comisd	%xmm0, %xmm3
    00000409: 	ja	.Ltmp1331 # Offset: 1033
    0000040b: 	leaq	DATAat0x2d588(%rip), %rsi
    00000412: 	movl	$0x1, %edi
    00000417: 	xorl	%eax, %eax
    00000419: 	callq	__printf_chk@PLT # Offset: 1049
.Ltmp1366:
    0000041e: 	movq	0x70(%rsp), %rcx
    00000423: 	xorl	%ebp, %ebp
.Ltmp1332:
    00000425: 	movq	%rcx, %rdi
    00000428: 	movq	%rbx, %rdx
    0000042b: 	xorl	%esi, %esi
    0000042d: 	addq	$0x1, %rbp
    00000431: 	callq	memset@PLT # Offset: 1073
    00000436: 	movq	%rax, %rcx
    00000439: 	addq	%rbx, %rcx
    0000043c: 	cmpq	%rbp, 0x40(%rsp)
    00000441: 	jne	.Ltmp1332 # Offset: 1089
    00000443: 	movq	0x8(%rsp), %rax
    00000448: 	movq	0x70(%rsp), %rdi
    0000044d: 	movq	%r14, %r8
    00000450: 	xorl	%r13d, %r13d
    00000453: 	movq	$0x0, (%rsp)
    0000045b: 	andq	$-0x2, %r8
    0000045f: 	addq	%rbx, %rax
    00000462: 	leaq	(%rdi,%rbx), %r12
    00000466: 	movq	%rax, 0x10(%rsp)
    0000046b: 	movq	%r14, %rax
    0000046e: 	shrq	%rax
    00000471: 	shlq	$0x4, %rax
    00000475: 	movq	%rax, %r11
    00000478: 	movq	%rdi, %rax
.Ltmp1337:
    0000047b: 	movq	0x8(%rsp), %rdi
    00000480: 	leaq	(%r13,%r8), %rdx
    00000485: 	movq	%r15, %rcx
    00000488: 	xorl	%r9d, %r9d
    0000048b: 	leaq	(,%r13,8), %rsi
    00000493: 	leaq	(%rdi,%rsi), %rbp
    00000497: 	movq	0x70(%rsp), %rdi
    0000049c: 	addq	%rdi, %rsi
    0000049f: 	leaq	(%rdi,%rdx,8), %rdx
    000004a3: 	movq	%rsi, 0x28(%rsp)
.Ltmp1336:
    000004a8: 	leaq	0x8(%rcx), %rsi
    000004ac: 	movq	%rbp, %rdi
    000004af: 	addq	$0x8, %rbp
    000004b3: 	cmpq	%rsi, %rax
    000004b6: 	setne	%r10b
    000004ba: 	cmpq	$0x1, %r14
    000004be: 	setne	%sil
    000004c2: 	testb	%sil, %r10b
    000004c5: 	je	.Ltmp1333 # Offset: 1221
    000004cb: 	cmpq	%r12, %rdi
    000004ce: 	setae	%sil
    000004d2: 	cmpq	%rbp, %rax
    000004d5: 	setae	%r10b
    000004d9: 	orb	%r10b, %sil
    000004dc: 	je	.Ltmp1333 # Offset: 1244
    000004e2: 	movsd	(%rdi), %xmm1
    000004e6: 	xorl	%esi, %esi
    000004e8: 	unpcklpd	%xmm1, %xmm1
.Ltmp1334:
    000004ec: 	movupd	(%rcx,%rsi), %xmm0
    000004f1: 	movupd	(%rax,%rsi), %xmm7
    000004f6: 	mulpd	%xmm1, %xmm0
    000004fa: 	addpd	%xmm7, %xmm0
    000004fe: 	movups	%xmm0, (%rax,%rsi)
    00000502: 	addq	$0x10, %rsi
    00000506: 	cmpq	%rsi, %r11
    00000509: 	jne	.Ltmp1334 # Offset: 1289
    0000050b: 	cmpq	%r8, %r14
    0000050e: 	je	.Ltmp1335 # Offset: 1294
    00000510: 	leaq	(%r9,%r8), %rsi
    00000514: 	movsd	(%r15,%rsi,8), %xmm0
    0000051a: 	mulsd	(%rdi), %xmm0
    0000051e: 	addsd	(%rdx), %xmm0
    00000522: 	movsd	%xmm0, (%rdx)
.Ltmp1335:
    00000526: 	addq	%rbx, %rcx
    00000529: 	addq	%r14, %r9
    0000052c: 	cmpq	%rbp, 0x10(%rsp)
    00000531: 	jne	.Ltmp1336 # Offset: 1329
    00000537: 	addq	$0x1, (%rsp)
    0000053c: 	addq	%rbx, %rax
    0000053f: 	movq	(%rsp), %rdi
    00000543: 	addq	%r14, %r13
    00000546: 	addq	%rbx, 0x10(%rsp)
    0000054b: 	addq	%rbx, %r12
    0000054e: 	cmpq	%rdi, 0x40(%rsp)
    00000553: 	jne	.Ltmp1337 # Offset: 1363
.Ltmp1365:
    00000559: 	movq	0x70(%rsp), %rsi
    0000055e: 	movq	0xd0(%rsp), %rcx
    00000566: 	xorl	%edx, %edx
    00000568: 	movq	DATAat0x2d9e0(%rip), %xmm2
    00000570: 	movsd	DATAat0x2da20(%rip), %xmm3
.Ltmp1375:
    00000578: 	xorl	%eax, %eax
    0000057a: 	testq	%r14, %r14
    0000057d: 	jne	.Ltmp1338 # Offset: 1405
    0000057f: 	jmp	.Ltmp1339 # Offset: 1407
    00000584: 	nopl	(%rax) # Size: 4
.Ltmp1341:
    00000588: 	addq	$0x1, %rax
    0000058c: 	cmpq	%rax, %r14
    0000058f: 	je	.Ltmp1339 # Offset: 1423
.Ltmp1338:
    00000595: 	movsd	(%rcx,%rax,8), %xmm1
    0000059a: 	movapd	%xmm1, %xmm4
    0000059e: 	movapd	%xmm1, %xmm0
    000005a2: 	subsd	(%rsi,%rax,8), %xmm0
    000005a7: 	andpd	%xmm2, %xmm4
    000005ab: 	comisd	DATAat0x2da18(%rip), %xmm4
    000005b3: 	jbe	.Ltmp1340 # Offset: 1459
    000005b5: 	divsd	%xmm1, %xmm0
.Ltmp1340:
    000005b9: 	andpd	%xmm2, %xmm0
    000005bd: 	comisd	%xmm0, %xmm3
    000005c1: 	ja	.Ltmp1341 # Offset: 1473
    000005c3: 	leaq	DATAat0x2d568(%rip), %rsi
    000005ca: 	movl	$0x1, %edi
    000005cf: 	xorl	%eax, %eax
    000005d1: 	callq	__printf_chk@PLT # Offset: 1489
.Ltmp1377:
    000005d6: 	movq	0x70(%rsp), %rcx
    000005db: 	xorl	%ebp, %ebp
.Ltmp1342:
    000005dd: 	movq	%rcx, %rdi
    000005e0: 	movq	%rbx, %rdx
    000005e3: 	xorl	%esi, %esi
    000005e5: 	addq	$0x1, %rbp
    000005e9: 	callq	memset@PLT # Offset: 1513
    000005ee: 	movq	%rax, %rcx
    000005f1: 	addq	%rbx, %rcx
    000005f4: 	cmpq	%rbp, 0x40(%rsp)
    000005f9: 	jne	.Ltmp1342 # Offset: 1529
    000005fb: 	movq	0x8(%rsp), %rax
    00000600: 	movq	0x70(%rsp), %r10
    00000605: 	xorl	%r11d, %r11d
    00000608: 	movq	%rax, %r9
    0000060b: 	leaq	(%rbx,%rax), %rsi
.Ltmp1345:
    0000060f: 	movq	%r15, %r8
    00000612: 	movq	%r10, %rcx
    00000615: 	xorl	%edi, %edi
.Ltmp1344:
    00000617: 	movsd	(%rcx), %xmm1
    0000061b: 	movq	%r9, %rax
    0000061e: 	movq	%r8, %rdx
    00000621: 	nopl	(%rax) # Size: 7
.Ltmp1343:
    00000628: 	movsd	(%rdx), %xmm0
    0000062c: 	mulsd	(%rax), %xmm0
    00000630: 	addq	$0x8, %rax
    00000634: 	addq	%rbx, %rdx
    00000637: 	addsd	%xmm0, %xmm1
    0000063b: 	movsd	%xmm1, (%rcx)
    0000063f: 	cmpq	%rax, %rsi
    00000642: 	jne	.Ltmp1343 # Offset: 1602
    00000644: 	addq	$0x1, %rdi
    00000648: 	addq	$0x8, %rcx
    0000064c: 	addq	$0x8, %r8
    00000650: 	cmpq	%rdi, %r14
    00000653: 	jne	.Ltmp1344 # Offset: 1619
    00000655: 	addq	$0x1, %r11
    00000659: 	addq	%rbx, %r9
    0000065c: 	addq	%rbx, %rsi
    0000065f: 	addq	%rbx, %r10
    00000662: 	cmpq	%r11, 0x40(%rsp)
    00000667: 	jne	.Ltmp1345 # Offset: 1639
.Ltmp1376:
    00000669: 	movq	0x70(%rsp), %rcx
    0000066e: 	movq	DATAat0x2d9e0(%rip), %xmm2
    00000676: 	xorl	%edx, %edx
    00000678: 	movsd	DATAat0x2da20(%rip), %xmm3
.Ltmp1378:
    00000680: 	xorl	%eax, %eax
    00000682: 	testq	%r14, %r14
    00000685: 	jne	.Ltmp1346 # Offset: 1669
    00000687: 	jmp	.Ltmp1347 # Offset: 1671
    0000068c: 	nopl	(%rax) # Size: 4
.Ltmp1349:
    00000690: 	addq	$0x1, %rax
    00000694: 	cmpq	%rax, %r14
    00000697: 	je	.Ltmp1347 # Offset: 1687
.Ltmp1346:
    0000069d: 	movq	0x18(%rsp), %rdi
    000006a2: 	movsd	(%rdi,%rax,8), %xmm1
    000006a7: 	movapd	%xmm1, %xmm4
    000006ab: 	movapd	%xmm1, %xmm0
    000006af: 	subsd	(%rcx,%rax,8), %xmm0
    000006b4: 	andpd	%xmm2, %xmm4
    000006b8: 	comisd	DATAat0x2da18(%rip), %xmm4
    000006c0: 	jbe	.Ltmp1348 # Offset: 1728
    000006c2: 	divsd	%xmm1, %xmm0
.Ltmp1348:
    000006c6: 	andpd	%xmm2, %xmm0
    000006ca: 	comisd	%xmm0, %xmm3
    000006ce: 	ja	.Ltmp1349 # Offset: 1742
    000006d0: 	leaq	DATAat0x2d548(%rip), %rsi
    000006d7: 	movl	$0x1, %edi
    000006dc: 	xorl	%eax, %eax
    000006de: 	callq	__printf_chk@PLT # Offset: 1758
.Ltmp1379:
    000006e3: 	xorl	%ebp, %ebp
.Ltmp1350:
    000006e5: 	movq	0x20(%rsp), %r13
    000006ea: 	movq	%rbx, %rdx
    000006ed: 	xorl	%esi, %esi
    000006ef: 	addq	$0x1, %rbp
    000006f3: 	movq	%r13, %rdi
    000006f6: 	callq	memset@PLT # Offset: 1782
    000006fb: 	addq	%rbx, %rax
    000006fe: 	movq	%rax, 0x20(%rsp)
    00000703: 	cmpq	%rbp, 0x40(%rsp)
    00000708: 	jne	.Ltmp1350 # Offset: 1800
    0000070a: 	testq	%r14, %r14
    0000070d: 	je	.Ltmp1351 # Offset: 1805
    00000713: 	movq	0x8(%rsp), %rax
    00000718: 	movq	0x70(%rsp), %r9
    0000071d: 	movq	%r15, %r10
    00000720: 	xorl	%r8d, %r8d
    00000723: 	leaq	(,%r14,8), %rcx
    0000072b: 	leaq	(%rax,%rcx), %rbx
.Ltmp1354:
    0000072f: 	movq	%rbx, %rdi
    00000732: 	movq	%r9, %rsi
    00000735: 	xorl	%r11d, %r11d
.Ltmp1353:
    00000738: 	movq	%rdi, %rax
    0000073b: 	movsd	(%rsi), %xmm1
    0000073f: 	movq	%r10, %rdx
    00000742: 	subq	%rcx, %rax
    00000745: 	nopl	(%rax) # Size: 3
.Ltmp1352:
    00000748: 	movsd	(%rdx), %xmm0
    0000074c: 	mulsd	(%rax), %xmm0
    00000750: 	addq	$0x8, %rax
    00000754: 	addq	%rcx, %rdx
    00000757: 	addsd	%xmm0, %xmm1
    0000075b: 	movsd	%xmm1, (%rsi)
    0000075f: 	cmpq	%rax, %rdi
    00000762: 	jne	.Ltmp1352 # Offset: 1890
    00000764: 	addq	$0x1, %r11
    00000768: 	addq	%rcx, %rsi
    0000076b: 	addq	%rcx, %rdi
    0000076e: 	cmpq	%r11, 0x40(%rsp)
    00000773: 	jne	.Ltmp1353 # Offset: 1907
    00000775: 	addq	$0x1, %r8
    00000779: 	addq	$0x8, %r10
    0000077d: 	addq	$0x8, %r9
    00000781: 	cmpq	%r8, %r14
    00000784: 	jne	.Ltmp1354 # Offset: 1924
    00000786: 	cmpq	$0x0, 0x40(%rsp)
    0000078c: 	je	.Ltmp1306 # Offset: 1932
.Ltmp1351:
    00000792: 	movq	0x70(%rsp), %rcx
    00000797: 	movq	0xd0(%rsp), %rsi
    0000079f: 	leaq	(,%r14,8), %rbx
    000007a7: 	xorl	%edx, %edx
    000007a9: 	movq	DATAat0x2d9e0(%rip), %xmm2
    000007b1: 	movsd	DATAat0x2da20(%rip), %xmm3
    000007b9: 	movq	%rcx, %rbp
.Ltmp1380:
    000007bc: 	xorl	%eax, %eax
    000007be: 	testq	%r14, %r14
    000007c1: 	jne	.Ltmp1355 # Offset: 1985
    000007c3: 	jmp	.Ltmp1356 # Offset: 1987
    000007c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1358:
    000007d0: 	addq	$0x1, %rax
    000007d4: 	cmpq	%rax, %r14
    000007d7: 	je	.Ltmp1356 # Offset: 2007
.Ltmp1355:
    000007dd: 	movsd	(%rsi,%rax,8), %xmm1
    000007e2: 	movapd	%xmm1, %xmm4
    000007e6: 	movapd	%xmm1, %xmm0
    000007ea: 	subsd	(%rcx,%rax,8), %xmm0
    000007ef: 	andpd	%xmm2, %xmm4
    000007f3: 	comisd	DATAat0x2da18(%rip), %xmm4
    000007fb: 	jbe	.Ltmp1357 # Offset: 2043
    000007fd: 	divsd	%xmm1, %xmm0
.Ltmp1357:
    00000801: 	andpd	%xmm2, %xmm0
    00000805: 	comisd	%xmm0, %xmm3
    00000809: 	ja	.Ltmp1358 # Offset: 2057
    0000080b: 	leaq	DATAat0x2d528(%rip), %rsi
    00000812: 	movl	$0x1, %edi
    00000817: 	xorl	%eax, %eax
    00000819: 	callq	__printf_chk@PLT # Offset: 2073
.Ltmp1381:
    0000081e: 	xorl	%r12d, %r12d
.Ltmp1359:
    00000821: 	movq	%rbp, %rdi
    00000824: 	movq	%rbx, %rdx
    00000827: 	xorl	%esi, %esi
    00000829: 	addq	$0x1, %r12
    0000082d: 	callq	memset@PLT # Offset: 2093
    00000832: 	addq	%rbx, %rbp
    00000835: 	cmpq	%r12, 0x40(%rsp)
    0000083a: 	jne	.Ltmp1359 # Offset: 2106
    0000083c: 	testq	%r14, %r14
    0000083f: 	je	.Ltmp1360 # Offset: 2111
    00000845: 	movq	0x70(%rsp), %r9
    0000084a: 	movq	0x40(%rsp), %r10
    0000084f: 	movq	%r15, %rbx
    00000852: 	xorl	%r8d, %r8d
    00000855: 	leaq	(,%r14,8), %rsi
.Ltmp1392:
    0000085d: 	movq	0x8(%rsp), %rbp
    00000862: 	movq	%rbx, %rdi
    00000865: 	xorl	%r11d, %r11d
.Ltmp1363:
    00000868: 	movq	%rbp, %rcx
    0000086b: 	movq	%r9, %rax
    0000086e: 	xorl	%edx, %edx
.Ltmp1361:
    00000870: 	movsd	(%rdi), %xmm0
    00000874: 	mulsd	(%rcx), %xmm0
    00000878: 	addq	$0x1, %rdx
    0000087c: 	addq	%rsi, %rcx
    0000087f: 	addsd	(%rax), %xmm0
    00000883: 	movsd	%xmm0, (%rax)
    00000887: 	addq	%rsi, %rax
    0000088a: 	cmpq	%rdx, %r10
    0000088d: 	jne	.Ltmp1361 # Offset: 2189
    0000088f: 	leaq	0x1(%r11), %rax
    00000893: 	addq	$0x8, %rbp
    00000897: 	addq	%rsi, %rdi
    0000089a: 	cmpq	%rax, %r14
    0000089d: 	je	.Ltmp1362 # Offset: 2205
    000008a3: 	movq	%rax, %r11
    000008a6: 	jmp	.Ltmp1363 # Offset: 2214
.Ltmp1329:
    000008a8: 	addq	$0x1, %rdx
    000008ac: 	addq	%rbx, %rcx
    000008af: 	addq	%rbx, %rsi
    000008b2: 	cmpq	%rdx, 0x40(%rsp)
    000008b7: 	jne	.Ltmp1364 # Offset: 2231
    000008bd: 	testq	%r14, %r14
    000008c0: 	je	.Ltmp1365 # Offset: 2240
    000008c6: 	jmp	.Ltmp1366 # Offset: 2246
    000008cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1309:
    000008d0: 	movq	%rax, %rcx
    000008d3: 	movq	%rax, %r10
    000008d6: 	pxor	%xmm0, %xmm0
    000008da: 	shrq	%rcx
    000008dd: 	andl	$0x1, %r10d
    000008e1: 	orq	%r10, %rcx
    000008e4: 	cvtsi2sd	%rcx, %xmm0
    000008e9: 	addsd	%xmm0, %xmm0
    000008ed: 	cmpq	$0x1, %r14
    000008f1: 	jne	.Ltmp1367 # Offset: 2289
.Ltmp1310:
    000008f7: 	xorl	%ecx, %ecx
    000008f9: 	jmp	.Ltmp1368 # Offset: 2297
.Ltmp1314:
    000008fe: 	movq	%rax, %rcx
    00000901: 	movq	%rax, %r10
    00000904: 	pxor	%xmm0, %xmm0
    00000908: 	shrq	%rcx
    0000090b: 	andl	$0x1, %r10d
    0000090f: 	orq	%r10, %rcx
    00000912: 	cmpq	$0x1, 0x40(%rsp)
    00000918: 	cvtsi2sd	%rcx, %xmm0
    0000091d: 	addsd	%xmm0, %xmm0
    00000921: 	jne	.Ltmp1369 # Offset: 2337
.Ltmp1315:
    00000927: 	xorl	%ecx, %ecx
    00000929: 	jmp	.Ltmp1370 # Offset: 2345
.Ltmp1320:
    0000092e: 	leaq	0x1(%r8), %rax
    00000932: 	addq	$0x8, %r10
    00000936: 	addq	%rsi, %r9
    00000939: 	cmpq	%r8, %rdi
    0000093c: 	je	.Ltmp1371 # Offset: 2364
    00000942: 	movq	%rax, %r8
    00000945: 	jmp	.Ltmp1372 # Offset: 2373
.Ltmp1323:
    0000094a: 	movq	0x20(%rsp), %rbx
    0000094f: 	movq	%rax, %rdi
.Ltmp1373:
    00000952: 	movsd	(%rdx), %xmm0
    00000956: 	mulsd	(%rbx), %xmm0
    0000095a: 	addq	$0x8, %rdi
    0000095e: 	addq	$0x8, %rbx
    00000962: 	addsd	-0x8(%rdi), %xmm0
    00000967: 	movsd	%xmm0, -0x8(%rdi)
    0000096c: 	cmpq	%rdi, %rbp
    0000096f: 	jne	.Ltmp1373 # Offset: 2415
    00000971: 	jmp	.Ltmp1325 # Offset: 2417
.Ltmp1333:
    00000976: 	movq	0x28(%rsp), %rsi
    0000097b: 	movq	%rcx, %r10
.Ltmp1374:
    0000097e: 	movsd	(%rdi), %xmm0
    00000982: 	mulsd	(%r10), %xmm0
    00000987: 	addq	$0x8, %rsi
    0000098b: 	addq	$0x8, %r10
    0000098f: 	addsd	-0x8(%rsi), %xmm0
    00000994: 	movsd	%xmm0, -0x8(%rsi)
    00000999: 	cmpq	%rsi, %r12
    0000099c: 	jne	.Ltmp1374 # Offset: 2460
    0000099e: 	jmp	.Ltmp1335 # Offset: 2462
.Ltmp1339:
    000009a3: 	addq	$0x1, %rdx
    000009a7: 	addq	%rbx, %rcx
    000009aa: 	addq	%rbx, %rsi
    000009ad: 	cmpq	%rdx, 0x40(%rsp)
    000009b2: 	jne	.Ltmp1375 # Offset: 2482
    000009b8: 	testq	%r14, %r14
    000009bb: 	je	.Ltmp1376 # Offset: 2491
    000009c1: 	jmp	.Ltmp1377 # Offset: 2497
    000009c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1347:
    000009d0: 	addq	%rbx, 0x18(%rsp)
    000009d5: 	addq	$0x1, %rdx
    000009d9: 	addq	%rbx, %rcx
    000009dc: 	cmpq	%rdx, 0x40(%rsp)
    000009e1: 	jne	.Ltmp1378 # Offset: 2529
    000009e7: 	testq	%r14, %r14
    000009ea: 	je	.Ltmp1351 # Offset: 2538
    000009f0: 	jmp	.Ltmp1379 # Offset: 2544
    000009f5: 	nopl	(%rax) # Size: 3
.Ltmp1356:
    000009f8: 	addq	$0x1, %rdx
    000009fc: 	addq	%rbx, %rsi
    000009ff: 	addq	%rbx, %rcx
    00000a02: 	cmpq	%rdx, 0x40(%rsp)
    00000a07: 	jne	.Ltmp1380 # Offset: 2567
    00000a0d: 	testq	%r14, %r14
    00000a10: 	jne	.Ltmp1381 # Offset: 2576
.Ltmp1360:
    00000a16: 	movq	0x70(%rsp), %rcx
    00000a1b: 	movq	0xd0(%rsp), %rsi
    00000a23: 	leaq	(,%r14,8), %rbx
    00000a2b: 	xorl	%edx, %edx
    00000a2d: 	movq	DATAat0x2d9e0(%rip), %xmm2
    00000a35: 	movsd	DATAat0x2da20(%rip), %xmm3
    00000a3d: 	movq	%rcx, %rbp
.Ltmp1393:
    00000a40: 	xorl	%eax, %eax
    00000a42: 	testq	%r14, %r14
    00000a45: 	jne	.Ltmp1382 # Offset: 2629
    00000a47: 	jmp	.Ltmp1383 # Offset: 2631
    00000a4c: 	nopl	(%rax) # Size: 4
.Ltmp1385:
    00000a50: 	addq	$0x1, %rax
    00000a54: 	cmpq	%rax, %r14
    00000a57: 	je	.Ltmp1383 # Offset: 2647
.Ltmp1382:
    00000a5d: 	movsd	(%rsi,%rax,8), %xmm1
    00000a62: 	movapd	%xmm1, %xmm4
    00000a66: 	movapd	%xmm1, %xmm0
    00000a6a: 	subsd	(%rcx,%rax,8), %xmm0
    00000a6f: 	andpd	%xmm2, %xmm4
    00000a73: 	comisd	DATAat0x2da18(%rip), %xmm4
    00000a7b: 	jbe	.Ltmp1384 # Offset: 2683
    00000a7d: 	divsd	%xmm1, %xmm0
.Ltmp1384:
    00000a81: 	andpd	%xmm2, %xmm0
    00000a85: 	comisd	%xmm0, %xmm3
    00000a89: 	ja	.Ltmp1385 # Offset: 2697
    00000a8b: 	leaq	DATAat0x2d508(%rip), %rsi
    00000a92: 	movl	$0x1, %edi
    00000a97: 	xorl	%eax, %eax
    00000a99: 	callq	__printf_chk@PLT # Offset: 2713
.Ltmp1394:
    00000a9e: 	xorl	%r12d, %r12d
.Ltmp1386:
    00000aa1: 	movq	%rbp, %rdi
    00000aa4: 	movq	%rbx, %rdx
    00000aa7: 	xorl	%esi, %esi
    00000aa9: 	addq	$0x1, %r12
    00000aad: 	callq	memset@PLT # Offset: 2733
    00000ab2: 	addq	%rbx, %rbp
    00000ab5: 	cmpq	%r12, 0x40(%rsp)
    00000aba: 	jne	.Ltmp1386 # Offset: 2746
    00000abc: 	testq	%r14, %r14
    00000abf: 	je	.Ltmp1387 # Offset: 2751
    00000ac5: 	movq	0x8(%rsp), %r10
    00000aca: 	movq	0x40(%rsp), %rdi
    00000acf: 	movq	%r15, %r9
    00000ad2: 	xorl	%r8d, %r8d
    00000ad5: 	leaq	(,%r14,8), %rsi
.Ltmp1585:
    00000add: 	movq	0x70(%rsp), %rbx
    00000ae2: 	xorl	%r11d, %r11d
.Ltmp1390:
    00000ae5: 	movsd	(%r9,%r11,8), %xmm1
    00000aeb: 	movq	%r10, %rcx
    00000aee: 	movq	%rbx, %rax
    00000af1: 	xorl	%edx, %edx
    00000af3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1388:
    00000af8: 	movsd	(%rcx), %xmm0
    00000afc: 	addq	$0x1, %rdx
    00000b00: 	addq	%rsi, %rcx
    00000b03: 	mulsd	%xmm1, %xmm0
    00000b07: 	addsd	(%rax), %xmm0
    00000b0b: 	movsd	%xmm0, (%rax)
    00000b0f: 	addq	%rsi, %rax
    00000b12: 	cmpq	%rdx, %rdi
    00000b15: 	jne	.Ltmp1388 # Offset: 2837
    00000b17: 	leaq	0x1(%r11), %rax
    00000b1b: 	addq	$0x8, %rbx
    00000b1f: 	cmpq	%rax, %r14
    00000b22: 	je	.Ltmp1389 # Offset: 2850
    00000b28: 	movq	%rax, %r11
    00000b2b: 	jmp	.Ltmp1390 # Offset: 2859
.Ltmp1362:
    00000b2d: 	leaq	0x1(%r8), %rax
    00000b31: 	addq	$0x8, %r9
    00000b35: 	addq	$0x8, %rbx
    00000b39: 	cmpq	%r11, %r8
    00000b3c: 	je	.Ltmp1391 # Offset: 2876
    00000b42: 	movq	%rax, %r8
    00000b45: 	jmp	.Ltmp1392 # Offset: 2885
.Ltmp1383:
    00000b4a: 	addq	$0x1, %rdx
    00000b4e: 	addq	%rbx, %rsi
    00000b51: 	addq	%rbx, %rcx
    00000b54: 	cmpq	%rdx, 0x40(%rsp)
    00000b59: 	jne	.Ltmp1393 # Offset: 2905
    00000b5f: 	testq	%r14, %r14
    00000b62: 	jne	.Ltmp1394 # Offset: 2914
.Ltmp1387:
    00000b68: 	movq	0x70(%rsp), %rcx
    00000b6d: 	movq	0xd0(%rsp), %rsi
    00000b75: 	leaq	(,%r14,8), %rbx
    00000b7d: 	xorl	%edx, %edx
    00000b7f: 	movq	DATAat0x2d9e0(%rip), %xmm2
    00000b87: 	movsd	DATAat0x2da20(%rip), %xmm3
    00000b8f: 	movq	%rcx, %rbp
.Ltmp1586:
    00000b92: 	xorl	%eax, %eax
    00000b94: 	testq	%r14, %r14
    00000b97: 	jne	.Ltmp1395 # Offset: 2967
    00000b99: 	jmp	.Ltmp1396 # Offset: 2969
    00000b9e: 	nop # Size: 2
.Ltmp1398:
    00000ba0: 	addq	$0x1, %rax
    00000ba4: 	cmpq	%rax, %r14
    00000ba7: 	je	.Ltmp1396 # Offset: 2983
.Ltmp1395:
    00000bad: 	movsd	(%rsi,%rax,8), %xmm1
    00000bb2: 	movapd	%xmm1, %xmm4
    00000bb6: 	movapd	%xmm1, %xmm0
    00000bba: 	subsd	(%rcx,%rax,8), %xmm0
    00000bbf: 	andpd	%xmm2, %xmm4
    00000bc3: 	comisd	DATAat0x2da18(%rip), %xmm4
    00000bcb: 	jbe	.Ltmp1397 # Offset: 3019
    00000bcd: 	divsd	%xmm1, %xmm0
.Ltmp1397:
    00000bd1: 	andpd	%xmm2, %xmm0
    00000bd5: 	comisd	%xmm0, %xmm3
    00000bd9: 	ja	.Ltmp1398 # Offset: 3033
    00000bdb: 	leaq	DATAat0x2d4e0(%rip), %rsi
    00000be2: 	movl	$0x1, %edi
    00000be7: 	xorl	%eax, %eax
    00000be9: 	callq	__printf_chk@PLT # Offset: 3049
.Ltmp1587:
    00000bee: 	xorl	%r12d, %r12d
.Ltmp1399:
    00000bf1: 	movq	%rbp, %rdi
    00000bf4: 	movq	%rbx, %rdx
    00000bf7: 	xorl	%esi, %esi
    00000bf9: 	addq	$0x1, %r12
    00000bfd: 	callq	memset@PLT # Offset: 3069
    00000c02: 	addq	%rbx, %rbp
    00000c05: 	cmpq	%r12, 0x40(%rsp)
    00000c0a: 	jne	.Ltmp1399 # Offset: 3082
    00000c0c: 	testq	%r14, %r14
    00000c0f: 	je	.Ltmp1400 # Offset: 3087
    00000c15: 	leaq	0x8(%r15), %rax
    00000c19: 	movq	%r14, %rsi
    00000c1c: 	movq	0x8(%rsp), %r13
    00000c21: 	movq	%r15, %rdx
    00000c24: 	movq	%rax, 0x10(%rsp)
    00000c29: 	movq	%r14, %rax
    00000c2c: 	movq	0x70(%rsp), %rdi
    00000c31: 	xorl	%r12d, %r12d
    00000c34: 	shrq	%rax
    00000c37: 	leaq	(,%r14,8), %rbp
    00000c3f: 	andq	$-0x2, %rsi
    00000c43: 	xorl	%r11d, %r11d
    00000c46: 	shlq	$0x4, %rax
    00000c4a: 	movq	%rax, %rbx
.Ltmp1405:
    00000c4d: 	leaq	(%r12,%rsi), %rcx
    00000c51: 	movq	$0x0, (%rsp)
    00000c59: 	movq	%rdi, %rax
    00000c5c: 	leaq	(%r15,%rcx,8), %r8
    00000c60: 	leaq	(%r15,%r12,8), %rcx
    00000c64: 	movq	%rcx, 0x18(%rsp)
    00000c69: 	xorl	%ecx, %ecx
.Ltmp1404:
    00000c6b: 	movsd	(%r13,%rcx,8), %xmm1
    00000c72: 	cmpq	0x10(%rsp), %rax
    00000c77: 	je	.Ltmp1401 # Offset: 3191
    00000c7d: 	cmpq	$0x1, %r14
    00000c81: 	je	.Ltmp1401 # Offset: 3201
    00000c87: 	movapd	%xmm1, %xmm2
    00000c8b: 	xorl	%r9d, %r9d
    00000c8e: 	unpcklpd	%xmm2, %xmm2
.Ltmp1402:
    00000c92: 	movupd	(%rdx,%r9), %xmm0
    00000c98: 	movupd	(%rax,%r9), %xmm7
    00000c9e: 	mulpd	%xmm2, %xmm0
    00000ca2: 	addpd	%xmm7, %xmm0
    00000ca6: 	movups	%xmm0, (%rax,%r9)
    00000cab: 	addq	$0x10, %r9
    00000caf: 	cmpq	%r9, %rbx
    00000cb2: 	jne	.Ltmp1402 # Offset: 3250
    00000cb4: 	leaq	(%rbp,%rax), %r10
    00000cb9: 	cmpq	%rsi, %r14
    00000cbc: 	je	.Ltmp1403 # Offset: 3260
    00000cbe: 	movsd	(%r8), %xmm0
    00000cc3: 	leaq	(%rcx,%rsi), %rax
    00000cc7: 	leaq	(%rdi,%rax,8), %rax
    00000ccb: 	mulsd	%xmm1, %xmm0
    00000ccf: 	addsd	(%rax), %xmm0
    00000cd3: 	movsd	%xmm0, (%rax)
.Ltmp1403:
    00000cd7: 	addq	$0x1, (%rsp)
    00000cdc: 	movq	%r10, %rax
    00000cdf: 	movq	(%rsp), %r9
    00000ce3: 	addq	%r14, %rcx
    00000ce6: 	cmpq	%r9, 0x40(%rsp)
    00000ceb: 	jne	.Ltmp1404 # Offset: 3307
    00000cf1: 	addq	$0x1, %r11
    00000cf5: 	addq	%rbp, 0x10(%rsp)
    00000cfa: 	addq	%rbp, %rdx
    00000cfd: 	addq	%r14, %r12
    00000d00: 	addq	$0x8, %r13
    00000d04: 	cmpq	%r11, %r14
    00000d07: 	jne	.Ltmp1405 # Offset: 3335
.Ltmp1400:
    00000d0d: 	movq	0xd0(%rsp), %rcx
    00000d15: 	movq	0x70(%rsp), %rsi
    00000d1a: 	leaq	(,%r14,8), %rbx
    00000d22: 	xorl	%edx, %edx
    00000d24: 	movq	DATAat0x2d9e0(%rip), %xmm2
    00000d2c: 	movsd	DATAat0x2da20(%rip), %xmm3
    00000d34: 	movq	%rcx, 0x18(%rsp)
    00000d39: 	movq	%rsi, 0x20(%rsp)
.Ltmp1589:
    00000d3e: 	xorl	%eax, %eax
    00000d40: 	testq	%r14, %r14
    00000d43: 	jne	.Ltmp1406 # Offset: 3395
    00000d45: 	jmp	.Ltmp1407 # Offset: 3397
    00000d4a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1409:
    00000d50: 	addq	$0x1, %rax
    00000d54: 	cmpq	%rax, %r14
    00000d57: 	je	.Ltmp1407 # Offset: 3415
.Ltmp1406:
    00000d5d: 	movsd	(%rcx,%rax,8), %xmm1
    00000d62: 	movapd	%xmm1, %xmm4
    00000d66: 	movapd	%xmm1, %xmm0
    00000d6a: 	subsd	(%rsi,%rax,8), %xmm0
    00000d6f: 	andpd	%xmm2, %xmm4
    00000d73: 	comisd	DATAat0x2da18(%rip), %xmm4
    00000d7b: 	jbe	.Ltmp1408 # Offset: 3451
    00000d7d: 	divsd	%xmm1, %xmm0
.Ltmp1408:
    00000d81: 	andpd	%xmm2, %xmm0
    00000d85: 	comisd	%xmm0, %xmm3
    00000d89: 	ja	.Ltmp1409 # Offset: 3465
    00000d8b: 	leaq	DATAat0x2d4b8(%rip), %rsi
    00000d92: 	movl	$0x1, %edi
    00000d97: 	xorl	%eax, %eax
    00000d99: 	callq	__printf_chk@PLT # Offset: 3481
.Ltmp1591:
    00000d9e: 	movq	0x70(%rsp), %rcx
    00000da3: 	xorl	%ebp, %ebp
.Ltmp1410:
    00000da5: 	movq	%rcx, %rdi
    00000da8: 	movq	%rbx, %rdx
    00000dab: 	xorl	%esi, %esi
    00000dad: 	addq	$0x1, %rbp
    00000db1: 	callq	memset@PLT # Offset: 3505
    00000db6: 	movq	%rax, %rcx
    00000db9: 	addq	%rbx, %rcx
    00000dbc: 	cmpq	%rbp, 0x40(%rsp)
    00000dc1: 	jne	.Ltmp1410 # Offset: 3521
    00000dc3: 	movq	0x8(%rsp), %rax
    00000dc8: 	movq	0x70(%rsp), %rdi
    00000dcd: 	movq	%r14, %r11
    00000dd0: 	xorl	%r12d, %r12d
    00000dd3: 	movq	$0x0, (%rsp)
    00000ddb: 	andq	$-0x2, %r11
    00000ddf: 	addq	%rbx, %rax
    00000de2: 	leaq	(%rdi,%rbx), %r13
    00000de6: 	movq	%rax, 0x10(%rsp)
    00000deb: 	movq	%r14, %rax
    00000dee: 	shrq	%rax
    00000df1: 	shlq	$0x4, %rax
    00000df5: 	movq	%rax, %rbp
    00000df8: 	movq	%rdi, %rax
.Ltmp1415:
    00000dfb: 	movq	0x8(%rsp), %rdi
    00000e00: 	leaq	(,%r12,8), %r9
    00000e08: 	leaq	(%r12,%r11), %rdx
    00000e0c: 	movq	%r15, %rcx
    00000e0f: 	leaq	(%rdi,%r9), %r10
    00000e13: 	movq	0x70(%rsp), %rdi
    00000e18: 	leaq	(%rdi,%rdx,8), %rdx
    00000e1c: 	addq	%rdi, %r9
    00000e1f: 	xorl	%edi, %edi
.Ltmp1414:
    00000e21: 	leaq	0x8(%rcx), %rsi
    00000e25: 	movsd	(%r10), %xmm1
    00000e2a: 	cmpq	%rsi, %rax
    00000e2d: 	je	.Ltmp1411 # Offset: 3629
    00000e33: 	cmpq	$0x1, %r14
    00000e37: 	je	.Ltmp1411 # Offset: 3639
    00000e3d: 	movapd	%xmm1, %xmm2
    00000e41: 	xorl	%esi, %esi
    00000e43: 	unpcklpd	%xmm2, %xmm2
.Ltmp1412:
    00000e47: 	movupd	(%rcx,%rsi), %xmm0
    00000e4c: 	movupd	(%rax,%rsi), %xmm7
    00000e51: 	mulpd	%xmm2, %xmm0
    00000e55: 	addpd	%xmm7, %xmm0
    00000e59: 	movups	%xmm0, (%rax,%rsi)
    00000e5d: 	addq	$0x10, %rsi
    00000e61: 	cmpq	%rsi, %rbp
    00000e64: 	jne	.Ltmp1412 # Offset: 3684
    00000e66: 	cmpq	%r11, %r14
    00000e69: 	je	.Ltmp1413 # Offset: 3689
    00000e6b: 	leaq	(%rdi,%r11), %rsi
    00000e6f: 	movsd	(%r15,%rsi,8), %xmm0
    00000e75: 	mulsd	%xmm1, %xmm0
    00000e79: 	addsd	(%rdx), %xmm0
    00000e7d: 	movsd	%xmm0, (%rdx)
.Ltmp1413:
    00000e81: 	addq	$0x8, %r10
    00000e85: 	addq	%rbx, %rcx
    00000e88: 	addq	%r14, %rdi
    00000e8b: 	cmpq	%r10, 0x10(%rsp)
    00000e90: 	jne	.Ltmp1414 # Offset: 3728
    00000e92: 	addq	$0x1, (%rsp)
    00000e97: 	addq	%rbx, %rax
    00000e9a: 	movq	(%rsp), %rdi
    00000e9e: 	addq	%r14, %r12
    00000ea1: 	addq	%rbx, 0x10(%rsp)
    00000ea6: 	addq	%rbx, %r13
    00000ea9: 	cmpq	%rdi, 0x40(%rsp)
    00000eae: 	jne	.Ltmp1415 # Offset: 3758
.Ltmp1590:
    00000eb4: 	movq	0x70(%rsp), %rsi
    00000eb9: 	movq	0xd0(%rsp), %rcx
    00000ec1: 	xorl	%edx, %edx
    00000ec3: 	movq	DATAat0x2d9e0(%rip), %xmm2
    00000ecb: 	movsd	DATAat0x2da20(%rip), %xmm3
.Ltmp1593:
    00000ed3: 	xorl	%eax, %eax
    00000ed5: 	testq	%r14, %r14
    00000ed8: 	jne	.Ltmp1416 # Offset: 3800
    00000eda: 	jmp	.Ltmp1417 # Offset: 3802
    00000edf: 	nop # Size: 1
.Ltmp1419:
    00000ee0: 	addq	$0x1, %rax
    00000ee4: 	cmpq	%rax, %r14
    00000ee7: 	je	.Ltmp1417 # Offset: 3815
.Ltmp1416:
    00000eed: 	movsd	(%rcx,%rax,8), %xmm1
    00000ef2: 	movapd	%xmm1, %xmm4
    00000ef6: 	movapd	%xmm1, %xmm0
    00000efa: 	subsd	(%rsi,%rax,8), %xmm0
    00000eff: 	andpd	%xmm2, %xmm4
    00000f03: 	comisd	DATAat0x2da18(%rip), %xmm4
    00000f0b: 	jbe	.Ltmp1418 # Offset: 3851
    00000f0d: 	divsd	%xmm1, %xmm0
.Ltmp1418:
    00000f11: 	andpd	%xmm2, %xmm0
    00000f15: 	comisd	%xmm0, %xmm3
    00000f19: 	ja	.Ltmp1419 # Offset: 3865
    00000f1b: 	leaq	DATAat0x2d490(%rip), %rsi
    00000f22: 	movl	$0x1, %edi
    00000f27: 	xorl	%eax, %eax
    00000f29: 	callq	__printf_chk@PLT # Offset: 3881
.Ltmp1595:
    00000f2e: 	movq	0x70(%rsp), %rcx
    00000f33: 	xorl	%ebp, %ebp
.Ltmp1420:
    00000f35: 	movq	%rcx, %rdi
    00000f38: 	movq	%rbx, %rdx
    00000f3b: 	xorl	%esi, %esi
    00000f3d: 	addq	$0x1, %rbp
    00000f41: 	callq	memset@PLT # Offset: 3905
    00000f46: 	movq	%rax, %rcx
    00000f49: 	addq	%rbx, %rcx
    00000f4c: 	cmpq	%rbp, 0x40(%rsp)
    00000f51: 	jne	.Ltmp1420 # Offset: 3921
    00000f53: 	movq	0x8(%rsp), %rax
    00000f58: 	movq	0x70(%rsp), %rdi
    00000f5d: 	xorl	%r10d, %r10d
    00000f60: 	pxor	%xmm2, %xmm2
    00000f64: 	movq	%rax, %r9
    00000f67: 	leaq	(%rbx,%rax), %rcx
.Ltmp1423:
    00000f6b: 	movq	%r15, %r8
    00000f6e: 	xorl	%esi, %esi
.Ltmp1422:
    00000f70: 	movq	%r9, %rax
    00000f73: 	movq	%r8, %rdx
    00000f76: 	movapd	%xmm2, %xmm1
    00000f7a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1421:
    00000f80: 	movsd	(%rdx), %xmm0
    00000f84: 	mulsd	(%rax), %xmm0
    00000f88: 	addq	$0x8, %rax
    00000f8c: 	addq	%rbx, %rdx
    00000f8f: 	addsd	%xmm0, %xmm1
    00000f93: 	cmpq	%rax, %rcx
    00000f96: 	jne	.Ltmp1421 # Offset: 3990
    00000f98: 	addsd	(%rdi,%rsi,8), %xmm1
    00000f9d: 	addq	$0x8, %r8
    00000fa1: 	movsd	%xmm1, (%rdi,%rsi,8)
    00000fa6: 	addq	$0x1, %rsi
    00000faa: 	cmpq	%rsi, %r14
    00000fad: 	jne	.Ltmp1422 # Offset: 4013
    00000faf: 	addq	$0x1, %r10
    00000fb3: 	addq	%rbx, %rdi
    00000fb6: 	addq	%rbx, %r9
    00000fb9: 	addq	%rbx, %rcx
    00000fbc: 	cmpq	%r10, 0x40(%rsp)
    00000fc1: 	jne	.Ltmp1423 # Offset: 4033
.Ltmp1594:
    00000fc3: 	movq	0x70(%rsp), %rcx
    00000fc8: 	movq	DATAat0x2d9e0(%rip), %xmm2
    00000fd0: 	xorl	%edx, %edx
    00000fd2: 	movsd	DATAat0x2da20(%rip), %xmm3
.Ltmp1596:
    00000fda: 	xorl	%eax, %eax
    00000fdc: 	testq	%r14, %r14
    00000fdf: 	jne	.Ltmp1424 # Offset: 4063
    00000fe1: 	jmp	.Ltmp1425 # Offset: 4065
    00000fe6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1427:
    00000ff0: 	addq	$0x1, %rax
    00000ff4: 	cmpq	%rax, %r14
    00000ff7: 	je	.Ltmp1425 # Offset: 4087
.Ltmp1424:
    00000ffd: 	movq	0x18(%rsp), %rdi
    00001002: 	movsd	(%rdi,%rax,8), %xmm1
    00001007: 	movapd	%xmm1, %xmm4
    0000100b: 	movapd	%xmm1, %xmm0
    0000100f: 	subsd	(%rcx,%rax,8), %xmm0
    00001014: 	andpd	%xmm2, %xmm4
    00001018: 	comisd	DATAat0x2da18(%rip), %xmm4
    00001020: 	jbe	.Ltmp1426 # Offset: 4128
    00001022: 	divsd	%xmm1, %xmm0
.Ltmp1426:
    00001026: 	andpd	%xmm2, %xmm0
    0000102a: 	comisd	%xmm0, %xmm3
    0000102e: 	ja	.Ltmp1427 # Offset: 4142
    00001030: 	leaq	DATAat0x2d468(%rip), %rsi
    00001037: 	movl	$0x1, %edi
    0000103c: 	xorl	%eax, %eax
    0000103e: 	callq	__printf_chk@PLT # Offset: 4158
.Ltmp1597:
    00001043: 	movq	0x20(%rsp), %rcx
    00001048: 	xorl	%ebp, %ebp
.Ltmp1428:
    0000104a: 	movq	%rcx, %rdi
    0000104d: 	movq	%rbx, %rdx
    00001050: 	xorl	%esi, %esi
    00001052: 	addq	$0x1, %rbp
    00001056: 	callq	memset@PLT # Offset: 4182
    0000105b: 	movq	%rax, %rcx
    0000105e: 	addq	%rbx, %rcx
    00001061: 	cmpq	%rbp, 0x40(%rsp)
    00001066: 	jne	.Ltmp1428 # Offset: 4198
    00001068: 	testq	%r14, %r14
    0000106b: 	je	.Ltmp1429 # Offset: 4203
    00001071: 	movq	0x8(%rsp), %rax
    00001076: 	movq	0x70(%rsp), %rdi
    0000107b: 	movq	%r15, %r10
    0000107e: 	xorl	%r9d, %r9d
    00001081: 	leaq	(,%r14,8), %rcx
    00001089: 	pxor	%xmm2, %xmm2
    0000108d: 	leaq	(%rax,%rcx), %rbx
.Ltmp1432:
    00001091: 	movq	%rbx, %rsi
    00001094: 	xorl	%r8d, %r8d
    00001097: 	xorl	%r11d, %r11d
.Ltmp1431:
    0000109a: 	movq	%rsi, %rax
    0000109d: 	movq	%r10, %rdx
    000010a0: 	movapd	%xmm2, %xmm1
    000010a4: 	subq	%rcx, %rax
    000010a7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1430:
    000010b0: 	movsd	(%rdx), %xmm0
    000010b4: 	mulsd	(%rax), %xmm0
    000010b8: 	addq	$0x8, %rax
    000010bc: 	addq	%rcx, %rdx
    000010bf: 	addsd	%xmm0, %xmm1
    000010c3: 	cmpq	%rax, %rsi
    000010c6: 	jne	.Ltmp1430 # Offset: 4294
    000010c8: 	addsd	(%rdi,%r8,8), %xmm1
    000010ce: 	addq	$0x1, %r11
    000010d2: 	addq	%rcx, %rsi
    000010d5: 	movsd	%xmm1, (%rdi,%r8,8)
    000010db: 	addq	%r14, %r8
    000010de: 	cmpq	%r11, 0x40(%rsp)
    000010e3: 	jne	.Ltmp1431 # Offset: 4323
    000010e5: 	addq	$0x1, %r9
    000010e9: 	addq	$0x8, %rdi
    000010ed: 	addq	$0x8, %r10
    000010f1: 	cmpq	%r9, %r14
    000010f4: 	jne	.Ltmp1432 # Offset: 4340
    000010f6: 	cmpq	$0x0, 0x40(%rsp)
    000010fc: 	je	.Ltmp1306 # Offset: 4348
.Ltmp1429:
    00001102: 	movq	0x70(%rsp), %rcx
    00001107: 	movq	0xd0(%rsp), %rsi
    0000110f: 	leaq	(,%r14,8), %rbx
    00001117: 	xorl	%edx, %edx
    00001119: 	movq	DATAat0x2d9e0(%rip), %xmm2
    00001121: 	movsd	DATAat0x2da20(%rip), %xmm3
    00001129: 	movq	%rcx, %rbp
.Ltmp1598:
    0000112c: 	xorl	%eax, %eax
    0000112e: 	testq	%r14, %r14
    00001131: 	jne	.Ltmp1433 # Offset: 4401
    00001133: 	jmp	.Ltmp1434 # Offset: 4403
    00001138: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1436:
    00001140: 	addq	$0x1, %rax
    00001144: 	cmpq	%rax, %r14
    00001147: 	je	.Ltmp1434 # Offset: 4423
.Ltmp1433:
    0000114d: 	movsd	(%rsi,%rax,8), %xmm1
    00001152: 	movapd	%xmm1, %xmm4
    00001156: 	movapd	%xmm1, %xmm0
    0000115a: 	subsd	(%rcx,%rax,8), %xmm0
    0000115f: 	andpd	%xmm2, %xmm4
    00001163: 	comisd	DATAat0x2da18(%rip), %xmm4
    0000116b: 	jbe	.Ltmp1435 # Offset: 4459
    0000116d: 	divsd	%xmm1, %xmm0
.Ltmp1435:
    00001171: 	andpd	%xmm2, %xmm0
    00001175: 	comisd	%xmm0, %xmm3
    00001179: 	ja	.Ltmp1436 # Offset: 4473
    0000117b: 	leaq	DATAat0x2d440(%rip), %rsi
    00001182: 	movl	$0x1, %edi
    00001187: 	xorl	%eax, %eax
    00001189: 	callq	__printf_chk@PLT # Offset: 4489
.Ltmp1600:
    0000118e: 	xorl	%r12d, %r12d
.Ltmp1437:
    00001191: 	movq	%rbp, %rdi
    00001194: 	movq	%rbx, %rdx
    00001197: 	xorl	%esi, %esi
    00001199: 	addq	$0x1, %r12
    0000119d: 	callq	memset@PLT # Offset: 4509
    000011a2: 	addq	%rbx, %rbp
    000011a5: 	cmpq	%r12, 0x40(%rsp)
    000011aa: 	jne	.Ltmp1437 # Offset: 4522
    000011ac: 	movq	0x70(%rsp), %r9
    000011b1: 	movq	0x40(%rsp), %r10
    000011b6: 	movq	%r15, %r8
    000011b9: 	xorl	%edi, %edi
    000011bb: 	leaq	(,%r14,8), %rsi
.Ltmp1440:
    000011c3: 	movq	0x8(%rsp), %rbp
    000011c8: 	movq	%r8, %rbx
    000011cb: 	xorl	%r11d, %r11d
.Ltmp1439:
    000011ce: 	movsd	(%rbx), %xmm1
    000011d2: 	movq	%rbp, %rcx
    000011d5: 	movq	%r9, %rax
    000011d8: 	xorl	%edx, %edx
    000011da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1438:
    000011e0: 	movsd	(%rcx), %xmm0
    000011e4: 	addq	$0x1, %rdx
    000011e8: 	addq	%rsi, %rcx
    000011eb: 	mulsd	%xmm1, %xmm0
    000011ef: 	addsd	(%rax), %xmm0
    000011f3: 	movsd	%xmm0, (%rax)
    000011f7: 	addq	%rsi, %rax
    000011fa: 	cmpq	%rdx, %r10
    000011fd: 	jne	.Ltmp1438 # Offset: 4605
    000011ff: 	addq	$0x1, %r11
    00001203: 	addq	%rsi, %rbx
    00001206: 	addq	$0x8, %rbp
    0000120a: 	cmpq	%r11, %r14
    0000120d: 	ja	.Ltmp1439 # Offset: 4621
    0000120f: 	addq	$0x1, %rdi
    00001213: 	addq	$0x8, %r9
    00001217: 	addq	$0x8, %r8
    0000121b: 	cmpq	%rdi, %r14
    0000121e: 	ja	.Ltmp1440 # Offset: 4638
.Ltmp1599:
    00001220: 	movq	0xd0(%rsp), %rcx
    00001228: 	movq	0x70(%rsp), %rsi
    0000122d: 	leaq	(,%r14,8), %rbx
    00001235: 	xorl	%edx, %edx
    00001237: 	movq	DATAat0x2d9e0(%rip), %xmm2
    0000123f: 	movsd	DATAat0x2da20(%rip), %xmm3
    00001247: 	movq	%rcx, %rbp
    0000124a: 	movq	%rsi, %r12
.Ltmp1601:
    0000124d: 	xorl	%eax, %eax
    0000124f: 	testq	%r14, %r14
    00001252: 	jne	.Ltmp1441 # Offset: 4690
    00001254: 	jmp	.Ltmp1442 # Offset: 4692
    00001259: 	nopl	(%rax) # Size: 7
.Ltmp1444:
    00001260: 	addq	$0x1, %rax
    00001264: 	cmpq	%rax, %r14
    00001267: 	je	.Ltmp1442 # Offset: 4711
.Ltmp1441:
    0000126d: 	movsd	(%rcx,%rax,8), %xmm1
    00001272: 	movapd	%xmm1, %xmm4
    00001276: 	movapd	%xmm1, %xmm0
    0000127a: 	subsd	(%rsi,%rax,8), %xmm0
    0000127f: 	andpd	%xmm2, %xmm4
    00001283: 	comisd	DATAat0x2da18(%rip), %xmm4
    0000128b: 	jbe	.Ltmp1443 # Offset: 4747
    0000128d: 	divsd	%xmm1, %xmm0
.Ltmp1443:
    00001291: 	andpd	%xmm2, %xmm0
    00001295: 	comisd	%xmm0, %xmm3
    00001299: 	ja	.Ltmp1444 # Offset: 4761
    0000129b: 	leaq	DATAat0x2d418(%rip), %rsi
    000012a2: 	movl	$0x1, %edi
    000012a7: 	xorl	%eax, %eax
    000012a9: 	callq	__printf_chk@PLT # Offset: 4777
.Ltmp1603:
    000012ae: 	movq	0x70(%rsp), %rcx
    000012b3: 	xorl	%r13d, %r13d
.Ltmp1445:
    000012b6: 	movq	%rcx, %rdi
    000012b9: 	movq	%rbx, %rdx
    000012bc: 	xorl	%esi, %esi
    000012be: 	addq	$0x1, %r13
    000012c2: 	callq	memset@PLT # Offset: 4802
    000012c7: 	movq	%rax, %rcx
    000012ca: 	addq	%rbx, %rcx
    000012cd: 	cmpq	%r13, 0x40(%rsp)
    000012d2: 	ja	.Ltmp1445 # Offset: 4818
.Ltmp1602:
    000012d4: 	movq	0x70(%rsp), %r13
    000012d9: 	movq	0x40(%rsp), %rcx
    000012de: 	movq	%r15, %rsi
    000012e1: 	movq	%r14, %r8
    000012e4: 	movq	0x8(%rsp), %rdi
    000012e9: 	movq	%r13, %rdx
    000012ec: 	callq	"_ZN19matmul_KJI_unrolledIdEclEPKdS2_Pdmm.isra.0/1" # Offset: 4844
    000012f1: 	movq	0xd0(%rsp), %rcx
    000012f9: 	movq	%r13, %rsi
    000012fc: 	xorl	%edx, %edx
    000012fe: 	movq	DATAat0x2d9e0(%rip), %xmm2
    00001306: 	movsd	DATAat0x2da20(%rip), %xmm3
.Ltmp1604:
    0000130e: 	xorl	%eax, %eax
    00001310: 	testq	%r14, %r14
    00001313: 	jne	.Ltmp1446 # Offset: 4883
    00001315: 	jmp	.Ltmp1447 # Offset: 4885
    0000131a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1449:
    00001320: 	addq	$0x1, %rax
    00001324: 	cmpq	%rax, %r14
    00001327: 	je	.Ltmp1447 # Offset: 4903
.Ltmp1446:
    0000132d: 	movsd	(%rcx,%rax,8), %xmm1
    00001332: 	movapd	%xmm1, %xmm4
    00001336: 	movapd	%xmm1, %xmm0
    0000133a: 	subsd	(%rsi,%rax,8), %xmm0
    0000133f: 	andpd	%xmm2, %xmm4
    00001343: 	comisd	DATAat0x2da18(%rip), %xmm4
    0000134b: 	jbe	.Ltmp1448 # Offset: 4939
    0000134d: 	divsd	%xmm1, %xmm0
.Ltmp1448:
    00001351: 	andpd	%xmm2, %xmm0
    00001355: 	comisd	%xmm0, %xmm3
    00001359: 	ja	.Ltmp1449 # Offset: 4953
    0000135b: 	leaq	DATAat0x2d3e8(%rip), %rsi
    00001362: 	movl	$0x1, %edi
    00001367: 	xorl	%eax, %eax
    00001369: 	callq	__printf_chk@PLT # Offset: 4969
.Ltmp1606:
    0000136e: 	movq	0x70(%rsp), %rcx
    00001373: 	xorl	%r13d, %r13d
.Ltmp1450:
    00001376: 	movq	%rcx, %rdi
    00001379: 	movq	%rbx, %rdx
    0000137c: 	xorl	%esi, %esi
    0000137e: 	addq	$0x1, %r13
    00001382: 	callq	memset@PLT # Offset: 4994
    00001387: 	movq	%rax, %rcx
    0000138a: 	addq	%rbx, %rcx
    0000138d: 	cmpq	%r13, 0x40(%rsp)
    00001392: 	ja	.Ltmp1450 # Offset: 5010
.Ltmp1605:
    00001394: 	movq	0x70(%rsp), %r13
    00001399: 	movq	0x40(%rsp), %rcx
    0000139e: 	movq	%r14, %r8
    000013a1: 	movq	%r15, %rsi
    000013a4: 	movq	0x8(%rsp), %rdi
    000013a9: 	movq	%r13, %rdx
    000013ac: 	callq	"_ZN19matmul_JKI_unrolledIdEclEPKdS2_Pdmm.isra.0/1" # Offset: 5036
    000013b1: 	movq	DATAat0x2d9e0(%rip), %xmm2
    000013b9: 	movq	%r13, %rcx
    000013bc: 	xorl	%edx, %edx
    000013be: 	movsd	DATAat0x2da20(%rip), %xmm3
.Ltmp1607:
    000013c6: 	xorl	%eax, %eax
    000013c8: 	testq	%r14, %r14
    000013cb: 	jne	.Ltmp1451 # Offset: 5067
    000013cd: 	jmp	.Ltmp1452 # Offset: 5069
    000013d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1454:
    000013d8: 	addq	$0x1, %rax
    000013dc: 	cmpq	%rax, %r14
    000013df: 	je	.Ltmp1452 # Offset: 5087
.Ltmp1451:
    000013e5: 	movsd	(%rbp,%rax,8), %xmm1
    000013eb: 	movapd	%xmm1, %xmm4
    000013ef: 	movapd	%xmm1, %xmm0
    000013f3: 	subsd	(%rcx,%rax,8), %xmm0
    000013f8: 	andpd	%xmm2, %xmm4
    000013fc: 	comisd	DATAat0x2da18(%rip), %xmm4
    00001404: 	jbe	.Ltmp1453 # Offset: 5124
    00001406: 	divsd	%xmm1, %xmm0
.Ltmp1453:
    0000140a: 	andpd	%xmm2, %xmm0
    0000140e: 	comisd	%xmm0, %xmm3
    00001412: 	ja	.Ltmp1454 # Offset: 5138
    00001414: 	leaq	DATAat0x2d3b8(%rip), %rsi
    0000141b: 	movl	$0x1, %edi
    00001420: 	xorl	%eax, %eax
    00001422: 	callq	__printf_chk@PLT # Offset: 5154
.Ltmp1609:
    00001427: 	xorl	%ebp, %ebp
.Ltmp1455:
    00001429: 	movq	%r12, %rdi
    0000142c: 	movq	%rbx, %rdx
    0000142f: 	xorl	%esi, %esi
    00001431: 	addq	$0x1, %rbp
    00001435: 	callq	memset@PLT # Offset: 5173
    0000143a: 	addq	%rbx, %r12
    0000143d: 	cmpq	%rbp, 0x40(%rsp)
    00001442: 	ja	.Ltmp1455 # Offset: 5186
    00001444: 	movq	%r14, %rax
    00001447: 	movq	%r15, 0x20(%rsp)
    0000144c: 	leaq	(,%r14,8), %r8
    00001454: 	pxor	%xmm2, %xmm2
    00001458: 	shlq	$0xa, %rax
    0000145c: 	movq	%r15, 0x30(%rsp)
    00001461: 	movq	%rax, 0x28(%rsp)
    00001466: 	movq	$0x0, 0x10(%rsp)
    0000146f: 	movq	%r14, (%rsp)
    00001473: 	movq	0x40(%rsp), %r14
.Ltmp1462:
    00001478: 	movq	0x10(%rsp), %r11
    0000147d: 	movq	(%rsp), %rax
    00001481: 	movq	%r11, %r15
    00001484: 	subq	$-0x80, %r11
    00001488: 	cmpq	%r11, %rax
    0000148b: 	movq	%r11, 0x10(%rsp)
    00001490: 	cmovbeq	%rax, %r11
    00001494: 	cmpq	%r15, %r11
    00001497: 	jbe	.Ltmp1456 # Offset: 5271
    0000149d: 	movq	$0x0, 0x18(%rsp)
    000014a6: 	movq	0x20(%rsp), %r13
.Ltmp1461:
    000014ab: 	movq	0x18(%rsp), %rbx
    000014b0: 	movq	(%rsp), %rax
    000014b4: 	movq	0x70(%rsp), %rdi
    000014b9: 	movq	%rbx, %rbp
    000014bc: 	subq	$-0x80, %rbx
    000014c0: 	cmpq	%rbx, %rax
    000014c3: 	movq	%rbx, 0x18(%rsp)
    000014c8: 	cmovbeq	%rax, %rbx
    000014cc: 	movq	0x8(%rsp), %rax
    000014d1: 	xorl	%r12d, %r12d
    000014d4: 	leaq	(%rax,%rbp,8), %r10
    000014d8: 	leaq	(%rax,%rbx,8), %r9
    000014dc: 	nopl	(%rax) # Size: 4
.Ltmp1460:
    000014e0: 	movq	%r13, %rsi
    000014e3: 	movq	%r15, %rcx
    000014e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1459:
    000014f0: 	movq	%r10, %rax
    000014f3: 	movq	%rsi, %rdx
    000014f6: 	movapd	%xmm2, %xmm0
    000014fa: 	cmpq	%rbp, %rbx
    000014fd: 	jbe	.Ltmp1457 # Offset: 5373
    000014ff: 	nop # Size: 1
.Ltmp1458:
    00001500: 	movsd	(%rdx), %xmm1
    00001504: 	mulsd	(%rax), %xmm1
    00001508: 	addq	$0x8, %rax
    0000150c: 	addq	%r8, %rdx
    0000150f: 	addsd	%xmm1, %xmm0
    00001513: 	cmpq	%rax, %r9
    00001516: 	jne	.Ltmp1458 # Offset: 5398
.Ltmp1457:
    00001518: 	addsd	(%rdi,%rcx,8), %xmm0
    0000151d: 	addq	$0x8, %rsi
    00001521: 	movsd	%xmm0, (%rdi,%rcx,8)
    00001526: 	addq	$0x1, %rcx
    0000152a: 	cmpq	%rcx, %r11
    0000152d: 	jne	.Ltmp1459 # Offset: 5421
    0000152f: 	addq	$0x1, %r12
    00001533: 	addq	%r8, %rdi
    00001536: 	addq	%r8, %r10
    00001539: 	addq	%r8, %r9
    0000153c: 	cmpq	%r12, %r14
    0000153f: 	jne	.Ltmp1460 # Offset: 5439
    00001541: 	movq	0x18(%rsp), %rdi
    00001546: 	addq	0x28(%rsp), %r13
    0000154b: 	cmpq	%rdi, (%rsp)
    0000154f: 	ja	.Ltmp1461 # Offset: 5455
.Ltmp1456:
    00001555: 	addq	$0x400, 0x20(%rsp)
    0000155e: 	movq	0x10(%rsp), %rdi
    00001563: 	cmpq	%rdi, (%rsp)
    00001567: 	ja	.Ltmp1462 # Offset: 5479
    0000156d: 	movq	0x30(%rsp), %r15
    00001572: 	movq	(%rsp), %r14
.Ltmp1608:
    00001576: 	movq	0x70(%rsp), %rcx
    0000157b: 	movq	0xd0(%rsp), %rsi
    00001583: 	leaq	(,%r14,8), %rbx
    0000158b: 	xorl	%edx, %edx
    0000158d: 	movq	DATAat0x2d9e0(%rip), %xmm2
    00001595: 	movsd	DATAat0x2da20(%rip), %xmm3
    0000159d: 	movq	%rcx, %rbp
.Ltmp1610:
    000015a0: 	xorl	%eax, %eax
    000015a2: 	testq	%r14, %r14
    000015a5: 	jne	.Ltmp1463 # Offset: 5541
    000015a7: 	jmp	.Ltmp1464 # Offset: 5543
    000015ac: 	nopl	(%rax) # Size: 4
.Ltmp1466:
    000015b0: 	addq	$0x1, %rax
    000015b4: 	cmpq	%rax, %r14
    000015b7: 	je	.Ltmp1464 # Offset: 5559
.Ltmp1463:
    000015bd: 	movsd	(%rsi,%rax,8), %xmm1
    000015c2: 	movapd	%xmm1, %xmm4
    000015c6: 	movapd	%xmm1, %xmm0
    000015ca: 	subsd	(%rcx,%rax,8), %xmm0
    000015cf: 	andpd	%xmm2, %xmm4
    000015d3: 	comisd	DATAat0x2da18(%rip), %xmm4
    000015db: 	jbe	.Ltmp1465 # Offset: 5595
    000015dd: 	divsd	%xmm1, %xmm0
.Ltmp1465:
    000015e1: 	andpd	%xmm2, %xmm0
    000015e5: 	comisd	%xmm0, %xmm3
    000015e9: 	ja	.Ltmp1466 # Offset: 5609
    000015eb: 	leaq	DATAat0x2d390(%rip), %rsi
    000015f2: 	movl	$0x1, %edi
    000015f7: 	xorl	%eax, %eax
    000015f9: 	callq	__printf_chk@PLT # Offset: 5625
.Ltmp1612:
    000015fe: 	xorl	%r12d, %r12d
.Ltmp1467:
    00001601: 	movq	%rbp, %rdi
    00001604: 	movq	%rbx, %rdx
    00001607: 	xorl	%esi, %esi
    00001609: 	addq	$0x1, %r12
    0000160d: 	callq	memset@PLT # Offset: 5645
    00001612: 	addq	%rbx, %rbp
    00001615: 	cmpq	%r12, 0x40(%rsp)
    0000161a: 	ja	.Ltmp1467 # Offset: 5658
    0000161c: 	movq	%r14, %rax
    0000161f: 	movq	%r15, 0x50(%rsp)
    00001624: 	leaq	(,%r14,8), %r13
    0000162c: 	movq	$0x0, 0x20(%rsp)
    00001635: 	shlq	$0x7, %rax
    00001639: 	movq	%rax, 0x68(%rsp)
    0000163e: 	movq	%r14, %rax
    00001641: 	movq	$0x0, 0x38(%rsp)
    0000164a: 	shlq	$0xa, %rax
    0000164e: 	movq	%rax, 0x60(%rsp)
    00001653: 	movq	%r14, %rax
    00001656: 	movq	%r13, %r14
    00001659: 	movq	%rax, %r13
.Ltmp1476:
    0000165c: 	movq	0x38(%rsp), %rdi
    00001661: 	movq	%rdi, %rdx
    00001664: 	subq	$-0x80, %rdi
    00001668: 	cmpq	%rdi, %r13
    0000166b: 	movq	%rdi, %rax
    0000166e: 	movq	%rdi, 0x38(%rsp)
    00001673: 	cmovbeq	%r13, %rax
    00001677: 	cmpq	%rdx, %rax
    0000167a: 	jbe	.Ltmp1468 # Offset: 5754
    00001680: 	movq	0x8(%rsp), %rsi
    00001685: 	shlq	$0x3, %rax
    00001689: 	leaq	-0x400(,%rdi,8), %rdx
    00001691: 	movq	$0x0, 0x48(%rsp)
    0000169a: 	subq	%rax, %rdx
    0000169d: 	addq	%rax, %rsi
    000016a0: 	movq	0x70(%rsp), %rax
    000016a5: 	movq	%rdx, 0x30(%rsp)
    000016aa: 	movq	%rsi, 0x78(%rsp)
    000016af: 	movq	%rax, 0x58(%rsp)
    000016b4: 	movq	0x50(%rsp), %rax
    000016b9: 	subq	$0x1c20, %rax
    000016bf: 	movq	%rax, 0x80(%rsp)
.Ltmp1475:
    000016c7: 	movq	0x48(%rsp), %rax
    000016cc: 	movq	%rax, %r10
    000016cf: 	addq	$0x384, %rax
    000016d5: 	cmpq	%rax, %r13
    000016d8: 	movq	%rax, %rbp
    000016db: 	movq	%rax, 0x48(%rsp)
    000016e0: 	cmovbeq	%r13, %rbp
    000016e4: 	cmpq	%r10, %rbp
    000016e7: 	jbe	.Ltmp1469 # Offset: 5863
    000016ed: 	movq	0x70(%rsp), %rdi
    000016f2: 	movq	0x58(%rsp), %rdx
    000016f7: 	movq	$0x0, 0x18(%rsp)
    00001700: 	movq	$0x0, 0x10(%rsp)
    00001709: 	movq	0x78(%rsp), %r12
    0000170e: 	leaq	(%rdi,%rbp,8), %rbx
    00001712: 	movq	0x80(%rsp), %rdi
    0000171a: 	subq	%r10, %rbp
    0000171d: 	movq	%rbp, %r11
    00001720: 	leaq	(%rdi,%rax,8), %rax
    00001724: 	shrq	%r11
    00001727: 	movq	%rax, 0x28(%rsp)
    0000172c: 	movq	%rbp, %rax
    0000172f: 	shlq	$0x4, %r11
    00001733: 	andq	$-0x2, %rax
    00001737: 	movq	%rax, (%rsp)
    0000173b: 	addq	%rax, %r10
    0000173e: 	nop # Size: 2
.Ltmp1474:
    00001740: 	movq	0x30(%rsp), %rax
    00001745: 	movq	0x70(%rsp), %rdi
    0000174a: 	movq	0x20(%rsp), %r8
    0000174f: 	movq	0x28(%rsp), %rsi
    00001754: 	leaq	(%r12,%rax), %r9
    00001758: 	movq	0x18(%rsp), %rax
    0000175d: 	addq	%r10, %rax
    00001760: 	leaq	(%rdi,%rax,8), %rdi
    00001764: 	nopl	(%rax) # Size: 4
.Ltmp1473:
    00001768: 	leaq	0x8(%rsi), %rax
    0000176c: 	movsd	(%r9), %xmm0
    00001771: 	cmpq	%rax, %rdx
    00001774: 	je	.Ltmp1470 # Offset: 6004
    0000177a: 	cmpq	$0x1, %rbp
    0000177e: 	je	.Ltmp1470 # Offset: 6014
    00001784: 	movapd	%xmm0, %xmm2
    00001788: 	xorl	%eax, %eax
    0000178a: 	unpcklpd	%xmm2, %xmm2
.Ltmp1471:
    0000178e: 	movupd	(%rsi,%rax), %xmm1
    00001793: 	movupd	(%rdx,%rax), %xmm6
    00001798: 	mulpd	%xmm2, %xmm1
    0000179c: 	addpd	%xmm6, %xmm1
    000017a0: 	movups	%xmm1, (%rdx,%rax)
    000017a4: 	addq	$0x10, %rax
    000017a8: 	cmpq	%rax, %r11
    000017ab: 	jne	.Ltmp1471 # Offset: 6059
    000017ad: 	cmpq	%rbp, (%rsp)
    000017b1: 	je	.Ltmp1472 # Offset: 6065
    000017b3: 	leaq	(%r8,%r10), %rax
    000017b7: 	mulsd	(%r15,%rax,8), %xmm0
    000017bd: 	addsd	(%rdi), %xmm0
    000017c1: 	movsd	%xmm0, (%rdi)
.Ltmp1472:
    000017c5: 	addq	$0x8, %r9
    000017c9: 	addq	%r14, %rsi
    000017cc: 	addq	%r13, %r8
    000017cf: 	cmpq	%r9, %r12
    000017d2: 	jne	.Ltmp1473 # Offset: 6098
    000017d4: 	addq	$0x1, 0x10(%rsp)
    000017da: 	addq	%r14, %r12
    000017dd: 	addq	%r14, %rdx
    000017e0: 	addq	%r14, %rbx
    000017e3: 	addq	%r13, 0x18(%rsp)
    000017e8: 	movq	0x10(%rsp), %rax
    000017ed: 	cmpq	%rax, 0x40(%rsp)
    000017f2: 	jne	.Ltmp1474 # Offset: 6130
.Ltmp1469:
    000017f8: 	addq	$0x1c20, 0x58(%rsp)
    00001801: 	cmpq	0x48(%rsp), %r13
    00001806: 	ja	.Ltmp1475 # Offset: 6150
.Ltmp1468:
    0000180c: 	movq	0x68(%rsp), %rdi
    00001811: 	addq	%rdi, 0x20(%rsp)
    00001816: 	movq	0x60(%rsp), %rdi
    0000181b: 	addq	%rdi, 0x50(%rsp)
    00001820: 	cmpq	0x38(%rsp), %r13
    00001825: 	ja	.Ltmp1476 # Offset: 6181
    0000182b: 	movq	%r13, %r14
.Ltmp1611:
    0000182e: 	movq	0xd0(%rsp), %rcx
    00001836: 	movq	0x70(%rsp), %rsi
    0000183b: 	leaq	(,%r14,8), %r13
    00001843: 	xorl	%edx, %edx
    00001845: 	movq	DATAat0x2d9e0(%rip), %xmm2
    0000184d: 	movsd	DATAat0x2da20(%rip), %xmm3
    00001855: 	movq	%rcx, 0x30(%rsp)
    0000185a: 	movq	%rsi, 0x58(%rsp)
.Ltmp1614:
    0000185f: 	xorl	%eax, %eax
    00001861: 	testq	%r14, %r14
    00001864: 	jne	.Ltmp1477 # Offset: 6244
    00001866: 	jmp	.Ltmp1478 # Offset: 6246
    0000186b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1480:
    00001870: 	addq	$0x1, %rax
    00001874: 	cmpq	%rax, %r14
    00001877: 	je	.Ltmp1478 # Offset: 6263
.Ltmp1477:
    0000187d: 	movsd	(%rcx,%rax,8), %xmm1
    00001882: 	movapd	%xmm1, %xmm4
    00001886: 	movapd	%xmm1, %xmm0
    0000188a: 	subsd	(%rsi,%rax,8), %xmm0
    0000188f: 	andpd	%xmm2, %xmm4
    00001893: 	comisd	DATAat0x2da18(%rip), %xmm4
    0000189b: 	jbe	.Ltmp1479 # Offset: 6299
    0000189d: 	divsd	%xmm1, %xmm0
.Ltmp1479:
    000018a1: 	andpd	%xmm2, %xmm0
    000018a5: 	comisd	%xmm0, %xmm3
    000018a9: 	ja	.Ltmp1480 # Offset: 6313
    000018ab: 	leaq	DATAat0x2d368(%rip), %rsi
    000018b2: 	movl	$0x1, %edi
    000018b7: 	xorl	%eax, %eax
    000018b9: 	callq	__printf_chk@PLT # Offset: 6329
.Ltmp1616:
    000018be: 	movq	0x70(%rsp), %rcx
    000018c3: 	xorl	%ebx, %ebx
.Ltmp1481:
    000018c5: 	movq	%rcx, %rdi
    000018c8: 	movq	%r13, %rdx
    000018cb: 	xorl	%esi, %esi
    000018cd: 	addq	$0x1, %rbx
    000018d1: 	callq	memset@PLT # Offset: 6353
    000018d6: 	movq	%rax, %rcx
    000018d9: 	addq	%r13, %rcx
    000018dc: 	cmpq	%rbx, 0x40(%rsp)
    000018e1: 	ja	.Ltmp1481 # Offset: 6369
    000018e3: 	movq	%r14, %rax
    000018e6: 	movq	%r15, 0x38(%rsp)
    000018eb: 	pxor	%xmm2, %xmm2
    000018ef: 	shlq	$0x7, %rax
    000018f3: 	movq	$0x0, (%rsp)
    000018fb: 	movq	%rax, 0x48(%rsp)
    00001900: 	movq	%r14, %rax
    00001903: 	movq	$0x0, 0x18(%rsp)
    0000190c: 	shlq	$0xa, %rax
    00001910: 	movq	%rax, 0x50(%rsp)
.Ltmp1488:
    00001915: 	movq	0x18(%rsp), %rbx
    0000191a: 	movq	0x40(%rsp), %rax
    0000191f: 	movq	$0x0, 0x20(%rsp)
    00001928: 	movq	%rbx, %r15
    0000192b: 	subq	$-0x80, %rbx
    0000192f: 	cmpq	%rbx, %rax
    00001932: 	movq	%rbx, 0x18(%rsp)
    00001937: 	cmovbeq	%rax, %rbx
    0000193b: 	movq	0x38(%rsp), %rax
    00001940: 	movq	%rax, 0x28(%rsp)
    00001945: 	cmpq	%r15, %rbx
    00001948: 	jbe	.Ltmp1482 # Offset: 6472
.Ltmp1487:
    0000194e: 	movq	0x20(%rsp), %rax
    00001953: 	movq	0x8(%rsp), %rdi
    00001958: 	movq	0x28(%rsp), %r9
    0000195d: 	movq	0x70(%rsp), %r8
    00001962: 	movq	%rax, %rbp
    00001965: 	subq	$-0x80, %rax
    00001969: 	cmpq	%rax, %r14
    0000196c: 	movq	%rax, 0x20(%rsp)
    00001971: 	movq	%rbp, %r10
    00001974: 	cmovbeq	%r14, %rax
    00001978: 	xorl	%r12d, %r12d
    0000197b: 	movq	%rax, %r11
    0000197e: 	movq	(%rsp), %rax
    00001982: 	subq	%r11, %r10
    00001985: 	addq	%r11, %rax
    00001988: 	shlq	$0x3, %r10
    0000198c: 	leaq	(%rdi,%rax,8), %rax
    00001990: 	movq	%rax, 0x10(%rsp)
    00001995: 	nopl	(%rax) # Size: 3
.Ltmp1486:
    00001998: 	movq	0x10(%rsp), %rcx
    0000199d: 	movq	(%rsp), %rsi
    000019a1: 	movq	%r15, %rdi
    000019a4: 	nopl	(%rax) # Size: 4
.Ltmp1485:
    000019a8: 	leaq	(%r10,%rcx), %rax
    000019ac: 	movq	%r9, %rdx
    000019af: 	movapd	%xmm2, %xmm0
    000019b3: 	cmpq	%rbp, %r11
    000019b6: 	jbe	.Ltmp1483 # Offset: 6582
    000019b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1484:
    000019c0: 	movsd	(%rdx), %xmm1
    000019c4: 	mulsd	(%rax), %xmm1
    000019c8: 	addq	$0x8, %rax
    000019cc: 	addq	%r13, %rdx
    000019cf: 	addsd	%xmm1, %xmm0
    000019d3: 	cmpq	%rax, %rcx
    000019d6: 	jne	.Ltmp1484 # Offset: 6614
.Ltmp1483:
    000019d8: 	addsd	(%r8,%rsi,8), %xmm0
    000019de: 	addq	$0x1, %rdi
    000019e2: 	addq	%r13, %rcx
    000019e5: 	movsd	%xmm0, (%r8,%rsi,8)
    000019eb: 	addq	%r14, %rsi
    000019ee: 	cmpq	%rdi, %rbx
    000019f1: 	jne	.Ltmp1485 # Offset: 6641
    000019f3: 	addq	$0x1, %r12
    000019f7: 	addq	$0x8, %r8
    000019fb: 	addq	$0x8, %r9
    000019ff: 	cmpq	%r12, %r14
    00001a02: 	jne	.Ltmp1486 # Offset: 6658
    00001a04: 	movq	0x50(%rsp), %rdi
    00001a09: 	addq	%rdi, 0x28(%rsp)
    00001a0e: 	cmpq	%r14, 0x20(%rsp)
    00001a13: 	jb	.Ltmp1487 # Offset: 6675
.Ltmp1482:
    00001a19: 	movq	0x48(%rsp), %rdi
    00001a1e: 	addq	%rdi, (%rsp)
    00001a22: 	movq	0x18(%rsp), %rdi
    00001a27: 	cmpq	%rdi, 0x40(%rsp)
    00001a2c: 	ja	.Ltmp1488 # Offset: 6700
    00001a32: 	movq	0x38(%rsp), %r15
.Ltmp1615:
    00001a37: 	movq	0x70(%rsp), %rcx
    00001a3c: 	movq	DATAat0x2d9e0(%rip), %xmm2
    00001a44: 	xorl	%edx, %edx
    00001a46: 	movsd	DATAat0x2da20(%rip), %xmm3
.Ltmp1617:
    00001a4e: 	xorl	%eax, %eax
    00001a50: 	testq	%r14, %r14
    00001a53: 	jne	.Ltmp1489 # Offset: 6739
    00001a55: 	jmp	.Ltmp1490 # Offset: 6741
    00001a5a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1492:
    00001a60: 	addq	$0x1, %rax
    00001a64: 	cmpq	%rax, %r14
    00001a67: 	je	.Ltmp1490 # Offset: 6759
.Ltmp1489:
    00001a6d: 	movq	0x30(%rsp), %rdi
    00001a72: 	movsd	(%rdi,%rax,8), %xmm1
    00001a77: 	movapd	%xmm1, %xmm4
    00001a7b: 	movapd	%xmm1, %xmm0
    00001a7f: 	subsd	(%rcx,%rax,8), %xmm0
    00001a84: 	andpd	%xmm2, %xmm4
    00001a88: 	comisd	DATAat0x2da18(%rip), %xmm4
    00001a90: 	jbe	.Ltmp1491 # Offset: 6800
    00001a92: 	divsd	%xmm1, %xmm0
.Ltmp1491:
    00001a96: 	andpd	%xmm2, %xmm0
    00001a9a: 	comisd	%xmm0, %xmm3
    00001a9e: 	ja	.Ltmp1492 # Offset: 6814
    00001aa0: 	leaq	DATAat0x2d340(%rip), %rsi
    00001aa7: 	movl	$0x1, %edi
    00001aac: 	xorl	%eax, %eax
    00001aae: 	callq	__printf_chk@PLT # Offset: 6830
.Ltmp1618:
    00001ab3: 	movq	0x58(%rsp), %rcx
    00001ab8: 	xorl	%ebx, %ebx
.Ltmp1493:
    00001aba: 	movq	%rcx, %rdi
    00001abd: 	movq	%r13, %rdx
    00001ac0: 	xorl	%esi, %esi
    00001ac2: 	addq	$0x1, %rbx
    00001ac6: 	callq	memset@PLT # Offset: 6854
    00001acb: 	movq	%rax, %rcx
    00001ace: 	addq	%r13, %rcx
    00001ad1: 	cmpq	%rbx, 0x40(%rsp)
    00001ad6: 	ja	.Ltmp1493 # Offset: 6870
    00001ad8: 	cmpq	$0x0, 0x40(%rsp)
    00001ade: 	je	.Ltmp1494 # Offset: 6878
    00001ae4: 	movq	%r14, %rax
    00001ae7: 	movq	%r14, %rbp
    00001aea: 	leaq	(%r14,%r14), %r12
    00001aee: 	movq	%r15, 0x58(%rsp)
    00001af3: 	shlq	$0xa, %rax
    00001af7: 	shlq	$0x5, %rbp
    00001afb: 	leaq	(%r12,%r14), %r13
    00001aff: 	pxor	%xmm3, %xmm3
    00001b03: 	movq	%rax, 0x60(%rsp)
    00001b08: 	leaq	(,%r14,8), %rbx
    00001b10: 	movq	$0x0, 0x48(%rsp)
    00001b19: 	movq	%r15, 0x20(%rsp)
    00001b1e: 	movq	%rbx, %r15
.Ltmp1503:
    00001b21: 	movq	0x48(%rsp), %rdi
    00001b26: 	movq	%rdi, 0x38(%rsp)
    00001b2b: 	movq	%rdi, %rax
    00001b2e: 	subq	$-0x80, %rdi
    00001b32: 	cmpq	%rdi, %r14
    00001b35: 	movq	%rdi, 0x48(%rsp)
    00001b3a: 	cmovbeq	%r14, %rdi
    00001b3e: 	movq	%rdi, (%rsp)
    00001b42: 	cmpq	%rax, %rdi
    00001b45: 	jbe	.Ltmp1495 # Offset: 6981
    00001b4b: 	movq	$0x0, 0x50(%rsp)
    00001b54: 	movq	0x58(%rsp), %rax
    00001b59: 	movq	%rax, 0x30(%rsp)
.Ltmp1502:
    00001b5e: 	movq	0x50(%rsp), %rax
    00001b63: 	movq	0x8(%rsp), %rdi
    00001b68: 	movq	$0x0, 0x28(%rsp)
    00001b71: 	movq	0x70(%rsp), %r9
    00001b76: 	movq	%rax, %r10
    00001b79: 	subq	$-0x80, %rax
    00001b7d: 	cmpq	%rax, %r14
    00001b80: 	movq	%rax, 0x50(%rsp)
    00001b85: 	leaq	(%rdi,%r10,8), %rsi
    00001b89: 	cmovbeq	%r14, %rax
    00001b8d: 	movq	%rsi, 0x18(%rsp)
    00001b92: 	xorl	%ebx, %ebx
    00001b94: 	movq	%rax, 0x10(%rsp)
    00001b99: 	leaq	-0x3(%rax), %r8
    00001b9d: 	leaq	(%rdi,%rax,8), %r11
    00001ba1: 	nopl	(%rax) # Size: 7
.Ltmp1501:
    00001ba8: 	movq	0x30(%rsp), %rdi
    00001bad: 	movq	0x38(%rsp), %rsi
    00001bb2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1500:
    00001bb8: 	cmpq	%r10, %r8
    00001bbb: 	jbe	.Ltmp1496 # Offset: 7099
    00001bc1: 	movq	0x18(%rsp), %rcx
    00001bc6: 	movq	%rdi, %rdx
    00001bc9: 	movq	%r10, %rax
    00001bcc: 	movapd	%xmm3, %xmm4
    00001bd0: 	movapd	%xmm3, %xmm5
    00001bd4: 	movapd	%xmm3, %xmm0
    00001bd8: 	movapd	%xmm3, %xmm1
    00001bdc: 	nopl	(%rax) # Size: 4
.Ltmp1497:
    00001be0: 	movsd	(%rdx), %xmm2
    00001be4: 	mulsd	(%rcx), %xmm2
    00001be8: 	addq	$0x4, %rax
    00001bec: 	addq	$0x20, %rcx
    00001bf0: 	addsd	%xmm2, %xmm1
    00001bf4: 	movsd	(%rdx,%r14,8), %xmm2
    00001bfa: 	mulsd	-0x18(%rcx), %xmm2
    00001bff: 	addsd	%xmm2, %xmm0
    00001c03: 	movsd	(%rdx,%r12,8), %xmm2
    00001c09: 	mulsd	-0x10(%rcx), %xmm2
    00001c0e: 	addsd	%xmm2, %xmm5
    00001c12: 	movsd	(%rdx,%r13,8), %xmm2
    00001c18: 	mulsd	-0x8(%rcx), %xmm2
    00001c1d: 	addq	%rbp, %rdx
    00001c20: 	addsd	%xmm2, %xmm4
    00001c24: 	cmpq	%r8, %rax
    00001c27: 	jb	.Ltmp1497 # Offset: 7207
.Ltmp1621:
    00001c29: 	cmpq	%rax, 0x10(%rsp)
    00001c2e: 	jbe	.Ltmp1498 # Offset: 7214
    00001c30: 	movq	%r14, %rdx
    00001c33: 	movq	0x20(%rsp), %rcx
    00001c38: 	imulq	%rax, %rdx
    00001c3c: 	addq	%rbx, %rax
    00001c3f: 	addq	%rsi, %rdx
    00001c42: 	leaq	(%rcx,%rdx,8), %rdx
    00001c46: 	movq	0x8(%rsp), %rcx
    00001c4b: 	leaq	(%rcx,%rax,8), %rax
    00001c4f: 	nop # Size: 1
.Ltmp1499:
    00001c50: 	movsd	(%rdx), %xmm2
    00001c54: 	mulsd	(%rax), %xmm2
    00001c58: 	addq	$0x8, %rax
    00001c5c: 	addq	%r15, %rdx
    00001c5f: 	addsd	%xmm2, %xmm1
    00001c63: 	cmpq	%rax, %r11
    00001c66: 	jne	.Ltmp1499 # Offset: 7270
.Ltmp1498:
    00001c68: 	addsd	%xmm1, %xmm0
    00001c6c: 	addq	$0x8, %rdi
    00001c70: 	addsd	%xmm5, %xmm0
    00001c74: 	addsd	%xmm4, %xmm0
    00001c78: 	addsd	(%r9,%rsi,8), %xmm0
    00001c7e: 	movsd	%xmm0, (%r9,%rsi,8)
    00001c84: 	addq	$0x1, %rsi
    00001c88: 	cmpq	%rsi, (%rsp)
    00001c8c: 	jne	.Ltmp1500 # Offset: 7308
    00001c92: 	addq	$0x1, 0x28(%rsp)
    00001c98: 	addq	%r14, %rbx
    00001c9b: 	addq	%r15, %r9
    00001c9e: 	addq	%r15, %r11
    00001ca1: 	addq	%r15, 0x18(%rsp)
    00001ca6: 	movq	0x28(%rsp), %rax
    00001cab: 	cmpq	%rax, 0x40(%rsp)
    00001cb0: 	jne	.Ltmp1501 # Offset: 7344
    00001cb6: 	movq	0x60(%rsp), %rdi
    00001cbb: 	addq	%rdi, 0x30(%rsp)
    00001cc0: 	cmpq	0x50(%rsp), %r14
    00001cc5: 	ja	.Ltmp1502 # Offset: 7365
.Ltmp1495:
    00001ccb: 	addq	$0x400, 0x58(%rsp)
    00001cd4: 	cmpq	0x48(%rsp), %r14
    00001cd9: 	ja	.Ltmp1503 # Offset: 7385
    00001cdf: 	movq	0x20(%rsp), %r15
.Ltmp1619:
    00001ce4: 	movq	0xd0(%rsp), %rcx
    00001cec: 	movq	0x70(%rsp), %rsi
    00001cf1: 	leaq	(,%r14,8), %rbx
    00001cf9: 	xorl	%edx, %edx
    00001cfb: 	movq	DATAat0x2d9e0(%rip), %xmm2
    00001d03: 	movsd	DATAat0x2da20(%rip), %xmm3
    00001d0b: 	movq	%rcx, 0x68(%rsp)
    00001d10: 	movq	%rsi, 0x88(%rsp)
.Ltmp1622:
    00001d18: 	xorl	%eax, %eax
    00001d1a: 	testq	%r14, %r14
    00001d1d: 	jne	.Ltmp1504 # Offset: 7453
    00001d1f: 	jmp	.Ltmp1505 # Offset: 7455
    00001d24: 	nopl	(%rax) # Size: 4
.Ltmp1507:
    00001d28: 	addq	$0x1, %rax
    00001d2c: 	cmpq	%rax, %r14
    00001d2f: 	je	.Ltmp1505 # Offset: 7471
.Ltmp1504:
    00001d35: 	movsd	(%rcx,%rax,8), %xmm1
    00001d3a: 	movapd	%xmm1, %xmm4
    00001d3e: 	movapd	%xmm1, %xmm0
    00001d42: 	subsd	(%rsi,%rax,8), %xmm0
    00001d47: 	andpd	%xmm2, %xmm4
    00001d4b: 	comisd	DATAat0x2da18(%rip), %xmm4
    00001d53: 	jbe	.Ltmp1506 # Offset: 7507
    00001d55: 	divsd	%xmm1, %xmm0
.Ltmp1506:
    00001d59: 	andpd	%xmm2, %xmm0
    00001d5d: 	comisd	%xmm0, %xmm3
    00001d61: 	ja	.Ltmp1507 # Offset: 7521
    00001d63: 	leaq	DATAat0x2d308(%rip), %rsi
    00001d6a: 	movl	$0x1, %edi
    00001d6f: 	xorl	%eax, %eax
    00001d71: 	callq	__printf_chk@PLT # Offset: 7537
.Ltmp1624:
    00001d76: 	movq	0x70(%rsp), %rcx
    00001d7b: 	xorl	%ebp, %ebp
.Ltmp1508:
    00001d7d: 	movq	%rcx, %rdi
    00001d80: 	movq	%rbx, %rdx
    00001d83: 	xorl	%esi, %esi
    00001d85: 	addq	$0x1, %rbp
    00001d89: 	callq	memset@PLT # Offset: 7561
    00001d8e: 	movq	%rax, %rcx
    00001d91: 	addq	%rbx, %rcx
    00001d94: 	cmpq	%rbp, 0x40(%rsp)
    00001d99: 	jne	.Ltmp1508 # Offset: 7577
.Ltmp1623:
    00001d9b: 	movq	0x70(%rsp), %rbp
    00001da0: 	movq	0x40(%rsp), %rcx
    00001da5: 	movq	%r15, %rsi
    00001da8: 	movq	%r14, %r8
    00001dab: 	movq	0x8(%rsp), %rdi
    00001db0: 	movq	%rbp, %rdx
    00001db3: 	callq	"_ZN28matmul_JIK_blocked_unrolled2IdEclEPKdS2_Pdmm.isra.0/1" # Offset: 7603
    00001db8: 	movq	0xd0(%rsp), %rcx
    00001dc0: 	movq	%rbp, %rsi
    00001dc3: 	xorl	%edx, %edx
    00001dc5: 	movq	DATAat0x2d9e0(%rip), %xmm2
    00001dcd: 	movsd	DATAat0x2da20(%rip), %xmm3
.Ltmp1625:
    00001dd5: 	xorl	%eax, %eax
    00001dd7: 	testq	%r14, %r14
    00001dda: 	jne	.Ltmp1509 # Offset: 7642
    00001ddc: 	jmp	.Ltmp1510 # Offset: 7644
    00001de1: 	nopl	(%rax) # Size: 7
.Ltmp1512:
    00001de8: 	addq	$0x1, %rax
    00001dec: 	cmpq	%rax, %r14
    00001def: 	je	.Ltmp1510 # Offset: 7663
.Ltmp1509:
    00001df5: 	movsd	(%rcx,%rax,8), %xmm1
    00001dfa: 	movapd	%xmm1, %xmm4
    00001dfe: 	movapd	%xmm1, %xmm0
    00001e02: 	subsd	(%rsi,%rax,8), %xmm0
    00001e07: 	andpd	%xmm2, %xmm4
    00001e0b: 	comisd	DATAat0x2da18(%rip), %xmm4
    00001e13: 	jbe	.Ltmp1511 # Offset: 7699
    00001e15: 	divsd	%xmm1, %xmm0
.Ltmp1511:
    00001e19: 	andpd	%xmm2, %xmm0
    00001e1d: 	comisd	%xmm0, %xmm3
    00001e21: 	ja	.Ltmp1512 # Offset: 7713
    00001e23: 	leaq	DATAat0x2d2d0(%rip), %rsi
    00001e2a: 	movl	$0x1, %edi
    00001e2f: 	xorl	%eax, %eax
    00001e31: 	callq	__printf_chk@PLT # Offset: 7729
.Ltmp1627:
    00001e36: 	movq	0x70(%rsp), %rcx
    00001e3b: 	xorl	%ebp, %ebp
.Ltmp1513:
    00001e3d: 	movq	%rcx, %rdi
    00001e40: 	movq	%rbx, %rdx
    00001e43: 	xorl	%esi, %esi
    00001e45: 	addq	$0x1, %rbp
    00001e49: 	callq	memset@PLT # Offset: 7753
    00001e4e: 	movq	%rax, %rcx
    00001e51: 	addq	%rbx, %rcx
    00001e54: 	cmpq	%rbp, 0x40(%rsp)
    00001e59: 	jne	.Ltmp1513 # Offset: 7769
.Ltmp1626:
    00001e5b: 	movq	0x70(%rsp), %rbp
    00001e60: 	movq	0x40(%rsp), %rcx
    00001e65: 	movq	%r15, %rsi
    00001e68: 	movq	%r14, %r8
    00001e6b: 	movq	0x8(%rsp), %rdi
    00001e70: 	movq	%rbp, %rdx
    00001e73: 	callq	"_ZN28matmul_JIK_blocked_unrolled3IdEclEPKdS2_Pdmm.isra.0/1" # Offset: 7795
    00001e78: 	movq	0xd0(%rsp), %rcx
    00001e80: 	movq	%rbp, %rsi
    00001e83: 	xorl	%edx, %edx
    00001e85: 	movq	DATAat0x2d9e0(%rip), %xmm2
    00001e8d: 	movsd	DATAat0x2da20(%rip), %xmm3
.Ltmp1628:
    00001e95: 	xorl	%eax, %eax
    00001e97: 	testq	%r14, %r14
    00001e9a: 	jne	.Ltmp1514 # Offset: 7834
    00001e9c: 	jmp	.Ltmp1515 # Offset: 7836
    00001ea1: 	nopl	(%rax) # Size: 7
.Ltmp1517:
    00001ea8: 	addq	$0x1, %rax
    00001eac: 	cmpq	%rax, %r14
    00001eaf: 	je	.Ltmp1515 # Offset: 7855
.Ltmp1514:
    00001eb5: 	movsd	(%rcx,%rax,8), %xmm1
    00001eba: 	movapd	%xmm1, %xmm4
    00001ebe: 	movapd	%xmm1, %xmm0
    00001ec2: 	subsd	(%rsi,%rax,8), %xmm0
    00001ec7: 	andpd	%xmm2, %xmm4
    00001ecb: 	comisd	DATAat0x2da18(%rip), %xmm4
    00001ed3: 	jbe	.Ltmp1516 # Offset: 7891
    00001ed5: 	divsd	%xmm1, %xmm0
.Ltmp1516:
    00001ed9: 	andpd	%xmm2, %xmm0
    00001edd: 	comisd	%xmm0, %xmm3
    00001ee1: 	ja	.Ltmp1517 # Offset: 7905
    00001ee3: 	leaq	DATAat0x2d298(%rip), %rsi
    00001eea: 	movl	$0x1, %edi
    00001eef: 	xorl	%eax, %eax
    00001ef1: 	callq	__printf_chk@PLT # Offset: 7921
.Ltmp1630:
    00001ef6: 	movq	0x70(%rsp), %rcx
    00001efb: 	xorl	%ebp, %ebp
.Ltmp1518:
    00001efd: 	movq	%rcx, %rdi
    00001f00: 	movq	%rbx, %rdx
    00001f03: 	xorl	%esi, %esi
    00001f05: 	addq	$0x1, %rbp
    00001f09: 	callq	memset@PLT # Offset: 7945
    00001f0e: 	movq	%rax, %rcx
    00001f11: 	addq	%rbx, %rcx
    00001f14: 	cmpq	%rbp, 0x40(%rsp)
    00001f19: 	jne	.Ltmp1518 # Offset: 7961
    00001f1b: 	movq	%r14, %rax
    00001f1e: 	leaq	(%r14,%r14), %r12
    00001f22: 	movq	%r14, %rbp
    00001f25: 	movq	%r15, 0x20(%rsp)
    00001f2a: 	shlq	$0x7, %rax
    00001f2e: 	leaq	(%r12,%r14), %r13
    00001f32: 	shlq	$0x5, %rbp
    00001f36: 	pxor	%xmm3, %xmm3
    00001f3a: 	movq	%rax, 0x78(%rsp)
    00001f3f: 	movq	%r14, %rax
    00001f42: 	movq	%rbx, %r15
    00001f45: 	movq	$0x0, 0x30(%rsp)
    00001f4e: 	shlq	$0xa, %rax
    00001f52: 	movq	$0x0, 0x50(%rsp)
    00001f5b: 	movq	%rax, 0x80(%rsp)
    00001f63: 	movq	%r13, %rax
    00001f66: 	movq	%rbp, %r13
    00001f69: 	movq	%rax, %rbp
.Ltmp1527:
    00001f6c: 	movq	0x50(%rsp), %rdi
    00001f71: 	movq	0x40(%rsp), %rsi
    00001f76: 	movq	$0x0, 0x58(%rsp)
    00001f7f: 	movq	%rdi, 0x38(%rsp)
    00001f84: 	movq	%rdi, %rax
    00001f87: 	subq	$-0x80, %rdi
    00001f8b: 	cmpq	%rdi, %rsi
    00001f8e: 	movq	%rdi, 0x50(%rsp)
    00001f93: 	cmovbeq	%rsi, %rdi
    00001f97: 	movq	0x20(%rsp), %rsi
    00001f9c: 	movq	%rdi, (%rsp)
    00001fa0: 	movq	%rsi, 0x60(%rsp)
    00001fa5: 	cmpq	%rax, %rdi
    00001fa8: 	jbe	.Ltmp1519 # Offset: 8104
.Ltmp1526:
    00001fae: 	movq	0x58(%rsp), %rdi
    00001fb3: 	movq	0x30(%rsp), %rax
    00001fb8: 	movq	0x8(%rsp), %rsi
    00001fbd: 	movq	0x70(%rsp), %r10
    00001fc2: 	movq	%rdi, %r11
    00001fc5: 	subq	$-0x80, %rdi
    00001fc9: 	cmpq	%rdi, %r14
    00001fcc: 	movq	%rdi, 0x58(%rsp)
    00001fd1: 	cmovbeq	%r14, %rdi
    00001fd5: 	xorl	%ebx, %ebx
    00001fd7: 	addq	%rdi, %rax
    00001fda: 	movq	%rdi, 0x10(%rsp)
    00001fdf: 	leaq	-0x3(%rdi), %r9
    00001fe3: 	leaq	(%rsi,%rax,8), %rax
    00001fe7: 	movq	%rax, 0x48(%rsp)
    00001fec: 	movq	%r11, %rax
    00001fef: 	subq	%rdi, %rax
    00001ff2: 	shlq	$0x3, %rax
    00001ff6: 	movq	%rax, 0x28(%rsp)
    00001ffb: 	movq	0x60(%rsp), %rax
    00002000: 	movq	%rax, 0x18(%rsp)
    00002005: 	nopl	(%rax) # Size: 3
.Ltmp1525:
    00002008: 	movq	0x48(%rsp), %rdi
    0000200d: 	movq	0x30(%rsp), %rsi
    00002012: 	movq	0x38(%rsp), %r8
    00002017: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1524:
    00002020: 	cmpq	%r11, %r9
    00002023: 	jbe	.Ltmp1520 # Offset: 8227
    00002029: 	movq	0x28(%rsp), %rax
    0000202e: 	movapd	%xmm3, %xmm4
    00002032: 	movapd	%xmm3, %xmm5
    00002036: 	movapd	%xmm3, %xmm0
    0000203a: 	movq	0x18(%rsp), %rdx
    0000203f: 	movapd	%xmm3, %xmm1
    00002043: 	leaq	(%rax,%rdi), %rcx
    00002047: 	movq	%r11, %rax
    0000204a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1521:
    00002050: 	movsd	(%rdx), %xmm2
    00002054: 	mulsd	(%rcx), %xmm2
    00002058: 	addq	$0x4, %rax
    0000205c: 	addq	$0x20, %rcx
    00002060: 	addsd	%xmm2, %xmm1
    00002064: 	movsd	(%rdx,%r14,8), %xmm2
    0000206a: 	mulsd	-0x18(%rcx), %xmm2
    0000206f: 	addsd	%xmm2, %xmm0
    00002073: 	movsd	(%rdx,%r12,8), %xmm2
    00002079: 	mulsd	-0x10(%rcx), %xmm2
    0000207e: 	addsd	%xmm2, %xmm5
    00002082: 	movsd	(%rdx,%rbp,8), %xmm2
    00002087: 	mulsd	-0x8(%rcx), %xmm2
    0000208c: 	addq	%r13, %rdx
    0000208f: 	addsd	%xmm2, %xmm4
    00002093: 	cmpq	%r9, %rax
    00002096: 	jb	.Ltmp1521 # Offset: 8342
.Ltmp1631:
    00002098: 	cmpq	%rax, 0x10(%rsp)
    0000209d: 	jbe	.Ltmp1522 # Offset: 8349
    0000209f: 	movq	%r14, %rdx
    000020a2: 	movq	0x20(%rsp), %rcx
    000020a7: 	imulq	%rax, %rdx
    000020ab: 	addq	%rsi, %rax
    000020ae: 	addq	%rbx, %rdx
    000020b1: 	leaq	(%rcx,%rdx,8), %rdx
    000020b5: 	movq	0x8(%rsp), %rcx
    000020ba: 	leaq	(%rcx,%rax,8), %rax
    000020be: 	nop # Size: 2
.Ltmp1523:
    000020c0: 	movsd	(%rdx), %xmm2
    000020c4: 	mulsd	(%rax), %xmm2
    000020c8: 	addq	$0x8, %rax
    000020cc: 	addq	%r15, %rdx
    000020cf: 	addsd	%xmm2, %xmm1
    000020d3: 	cmpq	%rax, %rdi
    000020d6: 	jne	.Ltmp1523 # Offset: 8406
.Ltmp1522:
    000020d8: 	addsd	%xmm1, %xmm0
    000020dc: 	addq	$0x1, %r8
    000020e0: 	addq	%r15, %rdi
    000020e3: 	addsd	%xmm5, %xmm0
    000020e7: 	addsd	%xmm4, %xmm0
    000020eb: 	addsd	(%r10,%rsi,8), %xmm0
    000020f1: 	movsd	%xmm0, (%r10,%rsi,8)
    000020f7: 	addq	%r14, %rsi
    000020fa: 	cmpq	%r8, (%rsp)
    000020fe: 	jne	.Ltmp1524 # Offset: 8446
    00002104: 	addq	$0x1, %rbx
    00002108: 	addq	$0x8, 0x18(%rsp)
    0000210e: 	addq	$0x8, %r10
    00002112: 	cmpq	%rbx, %r14
    00002115: 	jne	.Ltmp1525 # Offset: 8469
    0000211b: 	movq	0x80(%rsp), %rdi
    00002123: 	addq	%rdi, 0x60(%rsp)
    00002128: 	cmpq	%r14, 0x58(%rsp)
    0000212d: 	jb	.Ltmp1526 # Offset: 8493
.Ltmp1519:
    00002133: 	movq	0x78(%rsp), %rdi
    00002138: 	addq	%rdi, 0x30(%rsp)
    0000213d: 	movq	0x50(%rsp), %rdi
    00002142: 	cmpq	%rdi, 0x40(%rsp)
    00002147: 	ja	.Ltmp1527 # Offset: 8519
    0000214d: 	movq	%r15, %rbx
    00002150: 	movq	0x20(%rsp), %r15
.Ltmp1629:
    00002155: 	movq	0x70(%rsp), %rsi
    0000215a: 	movq	0xd0(%rsp), %rcx
    00002162: 	xorl	%edx, %edx
    00002164: 	movq	DATAat0x2d9e0(%rip), %xmm2
    0000216c: 	movsd	DATAat0x2da20(%rip), %xmm3
.Ltmp1632:
    00002174: 	xorl	%eax, %eax
    00002176: 	testq	%r14, %r14
    00002179: 	jne	.Ltmp1528 # Offset: 8569
    0000217b: 	jmp	.Ltmp1529 # Offset: 8571
.Ltmp1531:
    00002180: 	addq	$0x1, %rax
    00002184: 	cmpq	%rax, %r14
    00002187: 	je	.Ltmp1529 # Offset: 8583
.Ltmp1528:
    0000218d: 	movsd	(%rcx,%rax,8), %xmm1
    00002192: 	movapd	%xmm1, %xmm4
    00002196: 	movapd	%xmm1, %xmm0
    0000219a: 	subsd	(%rsi,%rax,8), %xmm0
    0000219f: 	andpd	%xmm2, %xmm4
    000021a3: 	comisd	DATAat0x2da18(%rip), %xmm4
    000021ab: 	jbe	.Ltmp1530 # Offset: 8619
    000021ad: 	divsd	%xmm1, %xmm0
.Ltmp1530:
    000021b1: 	andpd	%xmm2, %xmm0
    000021b5: 	comisd	%xmm0, %xmm3
    000021b9: 	ja	.Ltmp1531 # Offset: 8633
    000021bb: 	leaq	DATAat0x2d260(%rip), %rsi
    000021c2: 	movl	$0x1, %edi
    000021c7: 	xorl	%eax, %eax
    000021c9: 	callq	__printf_chk@PLT # Offset: 8649
.Ltmp1634:
    000021ce: 	movq	0x70(%rsp), %rcx
    000021d3: 	xorl	%ebp, %ebp
.Ltmp1532:
    000021d5: 	movq	%rcx, %rdi
    000021d8: 	movq	%rbx, %rdx
    000021db: 	xorl	%esi, %esi
    000021dd: 	addq	$0x1, %rbp
    000021e1: 	callq	memset@PLT # Offset: 8673
    000021e6: 	movq	%rax, %rcx
    000021e9: 	addq	%rbx, %rcx
    000021ec: 	cmpq	%rbp, 0x40(%rsp)
    000021f1: 	jne	.Ltmp1532 # Offset: 8689
.Ltmp1633:
    000021f3: 	movq	0x70(%rsp), %rbp
    000021f8: 	movq	0x40(%rsp), %rcx
    000021fd: 	movq	%r15, %rsi
    00002200: 	movq	%r14, %r8
    00002203: 	movq	0x8(%rsp), %rdi
    00002208: 	movq	%rbp, %rdx
    0000220b: 	callq	"_ZN28matmul_IJK_blocked_unrolled2IdEclEPKdS2_Pdmm.isra.0/1" # Offset: 8715
    00002210: 	movq	0xd0(%rsp), %rcx
    00002218: 	movq	%rbp, %rsi
    0000221b: 	xorl	%edx, %edx
    0000221d: 	movq	DATAat0x2d9e0(%rip), %xmm2
    00002225: 	movsd	DATAat0x2da20(%rip), %xmm3
.Ltmp1635:
    0000222d: 	xorl	%eax, %eax
    0000222f: 	testq	%r14, %r14
    00002232: 	jne	.Ltmp1533 # Offset: 8754
    00002234: 	jmp	.Ltmp1534 # Offset: 8756
    00002239: 	nopl	(%rax) # Size: 7
.Ltmp1536:
    00002240: 	addq	$0x1, %rax
    00002244: 	cmpq	%rax, %r14
    00002247: 	je	.Ltmp1534 # Offset: 8775
.Ltmp1533:
    0000224d: 	movsd	(%rcx,%rax,8), %xmm1
    00002252: 	movapd	%xmm1, %xmm4
    00002256: 	movapd	%xmm1, %xmm0
    0000225a: 	subsd	(%rsi,%rax,8), %xmm0
    0000225f: 	andpd	%xmm2, %xmm4
    00002263: 	comisd	DATAat0x2da18(%rip), %xmm4
    0000226b: 	jbe	.Ltmp1535 # Offset: 8811
    0000226d: 	divsd	%xmm1, %xmm0
.Ltmp1535:
    00002271: 	andpd	%xmm2, %xmm0
    00002275: 	comisd	%xmm0, %xmm3
    00002279: 	ja	.Ltmp1536 # Offset: 8825
    0000227b: 	leaq	DATAat0x2d228(%rip), %rsi
    00002282: 	movl	$0x1, %edi
    00002287: 	xorl	%eax, %eax
    00002289: 	callq	__printf_chk@PLT # Offset: 8841
.Ltmp1637:
    0000228e: 	movq	0x70(%rsp), %rcx
    00002293: 	xorl	%ebp, %ebp
.Ltmp1537:
    00002295: 	movq	%rcx, %rdi
    00002298: 	movq	%rbx, %rdx
    0000229b: 	xorl	%esi, %esi
    0000229d: 	addq	$0x1, %rbp
    000022a1: 	callq	memset@PLT # Offset: 8865
    000022a6: 	movq	%rax, %rcx
    000022a9: 	addq	%rbx, %rcx
    000022ac: 	cmpq	%rbp, 0x40(%rsp)
    000022b1: 	jne	.Ltmp1537 # Offset: 8881
.Ltmp1636:
    000022b3: 	movq	0x70(%rsp), %rbp
    000022b8: 	movq	0x40(%rsp), %rcx
    000022bd: 	movq	%r14, %r8
    000022c0: 	movq	%r15, %rsi
    000022c3: 	movq	0x8(%rsp), %rdi
    000022c8: 	movq	%rbp, %rdx
    000022cb: 	callq	"_ZN28matmul_IJK_blocked_unrolled3IdEclEPKdS2_Pdmm.isra.0/1" # Offset: 8907
    000022d0: 	movq	DATAat0x2d9e0(%rip), %xmm2
    000022d8: 	movq	%rbp, %rcx
    000022db: 	xorl	%edx, %edx
    000022dd: 	movsd	DATAat0x2da20(%rip), %xmm3
.Ltmp1638:
    000022e5: 	xorl	%eax, %eax
    000022e7: 	testq	%r14, %r14
    000022ea: 	jne	.Ltmp1538 # Offset: 8938
    000022ec: 	jmp	.Ltmp1539 # Offset: 8940
    000022f1: 	nopl	(%rax) # Size: 7
.Ltmp1541:
    000022f8: 	addq	$0x1, %rax
    000022fc: 	cmpq	%rax, %r14
    000022ff: 	je	.Ltmp1539 # Offset: 8959
.Ltmp1538:
    00002305: 	movq	0x68(%rsp), %rdi
    0000230a: 	movsd	(%rdi,%rax,8), %xmm1
    0000230f: 	movapd	%xmm1, %xmm4
    00002313: 	movapd	%xmm1, %xmm0
    00002317: 	subsd	(%rcx,%rax,8), %xmm0
    0000231c: 	andpd	%xmm2, %xmm4
    00002320: 	comisd	DATAat0x2da18(%rip), %xmm4
    00002328: 	jbe	.Ltmp1540 # Offset: 9000
    0000232a: 	divsd	%xmm1, %xmm0
.Ltmp1540:
    0000232e: 	andpd	%xmm2, %xmm0
    00002332: 	comisd	%xmm0, %xmm3
    00002336: 	ja	.Ltmp1541 # Offset: 9014
    00002338: 	leaq	DATAat0x2d1f0(%rip), %rsi
    0000233f: 	movl	$0x1, %edi
    00002344: 	xorl	%eax, %eax
    00002346: 	callq	__printf_chk@PLT # Offset: 9030
.Ltmp1640:
    0000234b: 	movq	0x88(%rsp), %rcx
    00002353: 	xorl	%ebp, %ebp
.Ltmp1542:
    00002355: 	movq	%rcx, %rdi
    00002358: 	movq	%rbx, %rdx
    0000235b: 	xorl	%esi, %esi
    0000235d: 	addq	$0x1, %rbp
    00002361: 	callq	memset@PLT # Offset: 9057
    00002366: 	movq	%rax, %rcx
    00002369: 	addq	%rbx, %rcx
    0000236c: 	cmpq	%rbp, 0x40(%rsp)
    00002371: 	jne	.Ltmp1542 # Offset: 9073
    00002373: 	movq	%r14, %rax
    00002376: 	movq	%r15, 0xb8(%rsp)
    0000237e: 	movdqa	DATAat0x2d980(%rip), %xmm7
    00002386: 	shlq	$0x7, %rax
    0000238a: 	movq	%r14, 0x48(%rsp)
    0000238f: 	movdqa	DATAat0x2d990(%rip), %xmm6
    00002397: 	movq	%rax, 0xd8(%rsp)
    0000239f: 	movq	%r14, %rax
    000023a2: 	movq	$0x0, 0x98(%rsp)
    000023ae: 	shlq	$0xa, %rax
    000023b2: 	movq	%rax, 0xc8(%rsp)
    000023ba: 	leaq	(,%r14,8), %rax
    000023c2: 	movq	0x70(%rsp), %r14
    000023c7: 	movq	%rax, 0x50(%rsp)
    000023cc: 	movq	$0x0, 0xb0(%rsp)
.Ltmp1554:
    000023d8: 	movq	0xb0(%rsp), %rax
    000023e0: 	movq	0x48(%rsp), %rdi
    000023e5: 	movq	%rax, %rdx
    000023e8: 	subq	$-0x80, %rax
    000023ec: 	cmpq	%rax, %rdi
    000023ef: 	movq	%rax, 0xb0(%rsp)
    000023f7: 	cmovbeq	%rdi, %rax
    000023fb: 	cmpq	%rdx, %rax
    000023fe: 	jbe	.Ltmp1543 # Offset: 9214
    00002404: 	movq	0x8(%rsp), %rdi
    00002409: 	shlq	$0x3, %rax
    0000240d: 	shlq	$0x3, %rdx
    00002411: 	movq	%r14, 0xc0(%rsp)
    00002419: 	movq	$0x4, 0x28(%rsp)
    00002422: 	subq	%rax, %rdx
    00002425: 	addq	%rax, %rdi
    00002428: 	movq	0xb8(%rsp), %rax
    00002430: 	movq	%rdx, 0xa8(%rsp)
    00002438: 	movq	%rdi, 0xe0(%rsp)
    00002440: 	movq	%rax, 0xa0(%rsp)
    00002448: 	movq	$0x0, 0x30(%rsp)
.Ltmp1553:
    00002451: 	movq	0x28(%rsp), %rax
    00002456: 	movq	0x48(%rsp), %rdi
    0000245b: 	movq	$0x0, 0x90(%rsp)
    00002467: 	movq	0x30(%rsp), %rcx
    0000246c: 	movq	0xc0(%rsp), %rsi
    00002474: 	addq	$0x380, %rax
    0000247a: 	cmpq	%rdi, %rax
    0000247d: 	movq	%rsi, 0x58(%rsp)
    00002482: 	cmovaq	%rdi, %rax
    00002486: 	leaq	0x40(%rsi), %rdi
    0000248a: 	xorl	%r13d, %r13d
    0000248d: 	movq	%rdi, 0x60(%rsp)
    00002492: 	movq	%rax, 0x20(%rsp)
    00002497: 	leaq	-0x3(%rax), %rbp
    0000249b: 	subq	%rcx, %rax
    0000249e: 	subq	$0x4, %rax
    000024a2: 	movq	%rax, 0x68(%rsp)
    000024a7: 	shrq	$0x2, %rax
    000024ab: 	addq	$0x1, %rax
    000024af: 	movq	%rax, %rdi
    000024b2: 	movq	%rax, 0x88(%rsp)
    000024ba: 	andq	$-0x2, %rax
    000024be: 	movq	%rax, 0x80(%rsp)
    000024c6: 	leaq	(%rcx,%rax,4), %rax
    000024ca: 	shrq	%rdi
    000024cd: 	movq	%rax, (%rsp)
    000024d1: 	addq	$0x4, %rax
    000024d5: 	movq	%rax, 0x10(%rsp)
    000024da: 	movq	0xe0(%rsp), %rax
    000024e2: 	movq	%rdi, 0x78(%rsp)
    000024e7: 	movq	%rax, 0x38(%rsp)
    000024ec: 	nopl	(%rax) # Size: 4
.Ltmp1552:
    000024f0: 	movq	(%rsp), %rax
    000024f4: 	movq	%rbp, 0x18(%rsp)
    000024f9: 	movq	0xa0(%rsp), %rcx
    00002501: 	movq	0x98(%rsp), %rdx
    00002509: 	addq	%r13, %rax
    0000250c: 	movq	0xa8(%rsp), %r10
    00002514: 	addq	0x38(%rsp), %r10
    00002519: 	shlq	$0x3, %rax
    0000251d: 	leaq	(%r14,%rax), %r9
    00002521: 	leaq	0x8(%r14,%rax), %r8
    00002526: 	leaq	0x10(%r14,%rax), %rdi
    0000252b: 	leaq	0x18(%r14,%rax), %rsi
.Ltmp1551:
    00002530: 	movq	0x30(%rsp), %rbx
    00002535: 	movq	0x18(%rsp), %rbp
    0000253a: 	movsd	(%r10), %xmm0
    0000253f: 	cmpq	%rbx, %rbp
    00002542: 	jbe	.Ltmp1544 # Offset: 9538
    00002548: 	cmpq	$0x2, 0x28(%rsp)
    0000254e: 	seta	%r11b
    00002552: 	cmpq	$-0x4, %rbp
    00002556: 	setbe	%al
    00002559: 	andl	%r11d, %eax
    0000255c: 	cmpq	$0x3, 0x68(%rsp)
    00002562: 	seta	%r11b
    00002566: 	testb	%r11b, %al
    00002569: 	je	.Ltmp1545 # Offset: 9577
    0000256f: 	movq	0x58(%rsp), %r12
    00002574: 	leaq	0x40(%rcx), %rax
    00002578: 	cmpq	%r12, %rax
    0000257b: 	setbe	%r11b
    0000257f: 	cmpq	%rcx, 0x60(%rsp)
    00002584: 	setbe	%al
    00002587: 	orb	%r11b, %al
    0000258a: 	je	.Ltmp1545 # Offset: 9610
    00002590: 	movq	%rbx, %xmm8
    00002595: 	movapd	%xmm0, %xmm5
    00002599: 	movq	%r12, %rax
    0000259c: 	movq	%rcx, %r11
    0000259f: 	movq	0x78(%rsp), %r12
    000025a4: 	unpcklpd	%xmm5, %xmm5
    000025a8: 	movhps	0x28(%rsp), %xmm8
    000025ae: 	xorl	%ebx, %ebx
.Ltmp1546:
    000025b0: 	movupd	0x10(%r11), %xmm3
    000025b6: 	movupd	0x20(%r11), %xmm2
    000025bc: 	movdqa	%xmm8, %xmm9
    000025c1: 	addq	$0x1, %rbx
    000025c5: 	movupd	0x30(%r11), %xmm1
    000025cb: 	movupd	0x10(%rax), %xmm4
    000025d0: 	paddq	%xmm7, %xmm8
    000025d5: 	paddq	%xmm6, %xmm9
    000025da: 	mulpd	%xmm5, %xmm3
    000025de: 	movupd	(%rax), %xmm10
    000025e3: 	addq	$0x40, %r11
    000025e7: 	addq	$0x40, %rax
    000025eb: 	mulpd	%xmm5, %xmm2
    000025ef: 	mulpd	%xmm5, %xmm1
    000025f3: 	addpd	%xmm4, %xmm3
    000025f7: 	movupd	-0x20(%rax), %xmm4
    000025fc: 	addpd	%xmm4, %xmm2
    00002600: 	movupd	-0x10(%rax), %xmm4
    00002605: 	addpd	%xmm4, %xmm1
    00002609: 	movupd	-0x40(%r11), %xmm4
    0000260f: 	movups	%xmm3, -0x30(%rax)
    00002613: 	movups	%xmm2, -0x20(%rax)
    00002617: 	mulpd	%xmm5, %xmm4
    0000261b: 	movups	%xmm1, -0x10(%rax)
    0000261f: 	addpd	%xmm10, %xmm4
    00002624: 	movups	%xmm4, -0x40(%rax)
    00002628: 	cmpq	%r12, %rbx
    0000262b: 	jb	.Ltmp1546 # Offset: 9771
    0000262d: 	movhlps	%xmm9, %xmm3
    00002631: 	movq	%rbp, 0x18(%rsp)
    00002636: 	movq	0x88(%rsp), %r11
    0000263e: 	movq	%xmm3, %rax
    00002643: 	cmpq	%r11, 0x80(%rsp)
    0000264b: 	je	.Ltmp1547 # Offset: 9803
    0000264d: 	movq	(%rsp), %rax
    00002651: 	addq	%rdx, %rax
    00002654: 	movsd	(%r15,%rax,8), %xmm1
    0000265a: 	mulsd	%xmm0, %xmm1
    0000265e: 	addsd	(%r9), %xmm1
    00002663: 	movsd	%xmm1, (%r9)
    00002668: 	movsd	0x8(%r15,%rax,8), %xmm1
    0000266f: 	mulsd	%xmm0, %xmm1
    00002673: 	addsd	(%r8), %xmm1
    00002678: 	movsd	%xmm1, (%r8)
    0000267d: 	movsd	0x10(%r15,%rax,8), %xmm1
    00002684: 	mulsd	%xmm0, %xmm1
    00002688: 	addsd	(%rdi), %xmm1
    0000268c: 	movsd	%xmm1, (%rdi)
    00002690: 	movsd	0x18(%r15,%rax,8), %xmm1
    00002697: 	movq	0x10(%rsp), %rax
    0000269c: 	mulsd	%xmm0, %xmm1
    000026a0: 	addsd	(%rsi), %xmm1
    000026a4: 	movsd	%xmm1, (%rsi)
.Ltmp1547:
    000026a8: 	cmpq	%rax, 0x20(%rsp)
    000026ad: 	jbe	.Ltmp1548 # Offset: 9901
    000026b3: 	leaq	(%rax,%r13), %r11
    000026b7: 	movq	0x20(%rsp), %r12
    000026bc: 	leaq	(%r14,%r11,8), %rbx
    000026c0: 	leaq	0x1(%rax,%rdx), %r11
    000026c5: 	shlq	$0x3, %r11
    000026c9: 	subq	%rax, %r12
    000026cc: 	leaq	(%r15,%r11), %rbp
    000026d0: 	cmpq	%rbp, %rbx
    000026d3: 	je	.Ltmp1549 # Offset: 9939
    000026d9: 	cmpq	$0x1, %r12
    000026dd: 	je	.Ltmp1549 # Offset: 9949
    000026e3: 	leaq	-0x8(%r15,%r11), %r11
    000026e8: 	movapd	%xmm0, %xmm2
    000026ec: 	movupd	(%rbx), %xmm3
    000026f0: 	movq	%r12, %rbp
    000026f3: 	movupd	(%r11), %xmm1
    000026f8: 	unpcklpd	%xmm2, %xmm2
    000026fc: 	shrq	%rbp
    000026ff: 	mulpd	%xmm2, %xmm1
    00002703: 	addpd	%xmm3, %xmm1
    00002707: 	movups	%xmm1, (%rbx)
    0000270a: 	cmpq	$0x1, %rbp
    0000270e: 	je	.Ltmp1550 # Offset: 9998
    00002710: 	movupd	0x10(%r11), %xmm1
    00002716: 	movupd	0x10(%rbx), %xmm3
    0000271b: 	mulpd	%xmm2, %xmm1
    0000271f: 	addpd	%xmm3, %xmm1
    00002723: 	movups	%xmm1, 0x10(%rbx)
.Ltmp1550:
    00002727: 	movq	%r12, %r11
    0000272a: 	andq	$-0x2, %r11
    0000272e: 	addq	%r11, %rax
    00002731: 	cmpq	%r12, %r11
    00002734: 	je	.Ltmp1548 # Offset: 10036
.Ltmp1642:
    00002736: 	leaq	(%rax,%r13), %r11
    0000273a: 	addq	%rdx, %rax
    0000273d: 	mulsd	(%r15,%rax,8), %xmm0
    00002743: 	leaq	(%r14,%r11,8), %r11
    00002747: 	addsd	(%r11), %xmm0
    0000274c: 	movsd	%xmm0, (%r11)
.Ltmp1548:
    00002751: 	addq	$0x8, %r10
    00002755: 	addq	0x48(%rsp), %rdx
    0000275a: 	addq	0x50(%rsp), %rcx
    0000275f: 	cmpq	%r10, 0x38(%rsp)
    00002764: 	jne	.Ltmp1551 # Offset: 10084
    0000276a: 	movq	0x50(%rsp), %rdi
    0000276f: 	movq	0x18(%rsp), %rbp
    00002774: 	addq	$0x1, 0x90(%rsp)
    0000277d: 	addq	0x48(%rsp), %r13
    00002782: 	addq	%rdi, 0x38(%rsp)
    00002787: 	movq	0x90(%rsp), %rax
    0000278f: 	addq	%rdi, 0x58(%rsp)
    00002794: 	addq	%rdi, 0x60(%rsp)
    00002799: 	cmpq	%rax, 0x40(%rsp)
    0000279e: 	jne	.Ltmp1552 # Offset: 10142
    000027a4: 	addq	$0x384, 0x30(%rsp)
    000027ad: 	movq	0x30(%rsp), %rax
    000027b2: 	addq	$0x1c20, 0xa0(%rsp)
    000027be: 	addq	$0x1c20, 0xc0(%rsp)
    000027ca: 	addq	$0x384, 0x28(%rsp)
    000027d3: 	cmpq	%rax, 0x48(%rsp)
    000027d8: 	ja	.Ltmp1553 # Offset: 10200
.Ltmp1543:
    000027de: 	movq	0xd8(%rsp), %rdi
    000027e6: 	addq	%rdi, 0x98(%rsp)
    000027ee: 	movq	0xc8(%rsp), %rdi
    000027f6: 	addq	%rdi, 0xb8(%rsp)
    000027fe: 	movq	0xb0(%rsp), %rdi
    00002806: 	cmpq	%rdi, 0x48(%rsp)
    0000280b: 	ja	.Ltmp1554 # Offset: 10251
    00002811: 	movq	0x48(%rsp), %r14
.Ltmp1639:
    00002816: 	movq	0x70(%rsp), %rcx
    0000281b: 	movq	0xd0(%rsp), %rsi
    00002823: 	leaq	(,%r14,8), %rbx
    0000282b: 	xorl	%edx, %edx
    0000282d: 	movq	DATAat0x2d9e0(%rip), %xmm2
    00002835: 	movsd	DATAat0x2da20(%rip), %xmm3
    0000283d: 	movq	%rcx, %rbp
.Ltmp1643:
    00002840: 	xorl	%eax, %eax
    00002842: 	testq	%r14, %r14
    00002845: 	jne	.Ltmp1555 # Offset: 10309
    00002847: 	jmp	.Ltmp1556 # Offset: 10311
    0000284c: 	nopl	(%rax) # Size: 4
.Ltmp1558:
    00002850: 	addq	$0x1, %rax
    00002854: 	cmpq	%rax, %r14
    00002857: 	je	.Ltmp1556 # Offset: 10327
.Ltmp1555:
    0000285d: 	movsd	(%rsi,%rax,8), %xmm1
    00002862: 	movapd	%xmm1, %xmm4
    00002866: 	movapd	%xmm1, %xmm0
    0000286a: 	subsd	(%rcx,%rax,8), %xmm0
    0000286f: 	andpd	%xmm2, %xmm4
    00002873: 	comisd	DATAat0x2da18(%rip), %xmm4
    0000287b: 	jbe	.Ltmp1557 # Offset: 10363
    0000287d: 	divsd	%xmm1, %xmm0
.Ltmp1557:
    00002881: 	andpd	%xmm2, %xmm0
    00002885: 	comisd	%xmm0, %xmm3
    00002889: 	ja	.Ltmp1558 # Offset: 10377
    0000288b: 	leaq	DATAat0x2d1b8(%rip), %rsi
    00002892: 	movl	$0x1, %edi
    00002897: 	xorl	%eax, %eax
    00002899: 	callq	__printf_chk@PLT # Offset: 10393
.Ltmp1645:
    0000289e: 	xorl	%r12d, %r12d
.Ltmp1559:
    000028a1: 	movq	%rbp, %rdi
    000028a4: 	movq	%rbx, %rdx
    000028a7: 	xorl	%esi, %esi
    000028a9: 	addq	$0x1, %r12
    000028ad: 	callq	memset@PLT # Offset: 10413
    000028b2: 	addq	%rbx, %rbp
    000028b5: 	cmpq	%r12, 0x40(%rsp)
    000028ba: 	ja	.Ltmp1559 # Offset: 10426
    000028bc: 	cmpq	$0x0, 0x40(%rsp)
    000028c2: 	je	.Ltmp1560 # Offset: 10434
    000028c8: 	movq	%r14, %rax
    000028cb: 	movq	%r14, %rbp
    000028ce: 	movq	%r15, 0xd8(%rsp)
    000028d6: 	shlq	$0x7, %rax
    000028da: 	shlq	$0x5, %rbp
    000028de: 	movq	%r14, 0x38(%rsp)
    000028e3: 	movq	%rax, 0x128(%rsp)
    000028eb: 	movq	%r14, %rax
    000028ee: 	movq	$0x0, 0xe8(%rsp)
    000028fa: 	shlq	$0xa, %rax
    000028fe: 	movq	%rax, 0x148(%rsp)
    00002906: 	leaq	(%r14,%r14), %rax
    0000290a: 	movq	%rax, 0x140(%rsp)
    00002912: 	movq	%r14, %rax
    00002915: 	movq	$0x0, 0x118(%rsp)
    00002921: 	shlq	$0x4, %rax
    00002925: 	addq	%r15, %rax
    00002928: 	movq	%rax, 0xe0(%rsp)
    00002930: 	leaq	(,%r14,8), %rax
    00002938: 	movq	%rax, 0x78(%rsp)
    0000293d: 	leaq	(,%r14,4), %rax
    00002945: 	movq	%rbp, %r14
    00002948: 	movq	%rax, 0x50(%rsp)
.Ltmp1573:
    0000294d: 	movq	0x118(%rsp), %rax
    00002955: 	movq	%r14, %r13
    00002958: 	movq	0x38(%rsp), %rsi
    0000295d: 	movq	$0x0, 0xb8(%rsp)
    00002969: 	movq	$0x0, 0x110(%rsp)
    00002975: 	movq	%rax, %rdi
    00002978: 	movq	%rax, 0xc0(%rsp)
    00002980: 	subq	$-0x80, %rax
    00002984: 	cmpq	%rax, %rsi
    00002987: 	movq	%rax, 0x118(%rsp)
    0000298f: 	leaq	(,%rdi,8), %rdx
    00002997: 	movq	0xd8(%rsp), %rdi
    0000299f: 	cmovbeq	%rsi, %rax
    000029a3: 	leaq	-0x3(%rax), %rsi
    000029a7: 	movq	%rax, 0xf0(%rsp)
    000029af: 	shlq	$0x3, %rax
    000029b3: 	movq	%rsi, 0x48(%rsp)
    000029b8: 	movq	0x8(%rsp), %rsi
    000029bd: 	subq	%rax, %rdx
    000029c0: 	movq	%rdx, 0x108(%rsp)
    000029c8: 	addq	%rax, %rsi
    000029cb: 	movq	0x78(%rsp), %rax
    000029d0: 	movq	%rsi, 0x130(%rsp)
    000029d8: 	addq	%rax, %rdi
    000029db: 	addq	0xe0(%rsp), %rax
    000029e3: 	movq	%rdi, 0x138(%rsp)
    000029eb: 	movq	%rax, 0x120(%rsp)
.Ltmp1572:
    000029f3: 	movq	0x110(%rsp), %rdi
    000029fb: 	movq	0x38(%rsp), %rcx
    00002a00: 	movq	$0x0, 0xb0(%rsp)
    00002a0c: 	movq	0x70(%rsp), %rsi
    00002a11: 	movq	0xb8(%rsp), %rbx
    00002a19: 	movq	$0x0, 0x80(%rsp)
    00002a25: 	movq	%rdi, %rax
    00002a28: 	movq	%rdi, 0x30(%rsp)
    00002a2d: 	addq	$0x384, %rdi
    00002a34: 	cmpq	%rdi, %rcx
    00002a37: 	movq	%rdi, 0x110(%rsp)
    00002a3f: 	movq	%rsi, %rdx
    00002a42: 	movq	%rsi, %r12
    00002a45: 	cmovbeq	%rcx, %rdi
    00002a49: 	subq	%rbx, %rdx
    00002a4c: 	leaq	(%rsi,%rdi,8), %rsi
    00002a50: 	movq	%rdi, 0x28(%rsp)
    00002a55: 	movq	%rsi, 0xc8(%rsp)
    00002a5d: 	movq	0x138(%rsp), %rsi
    00002a65: 	subq	%rbx, %rsi
    00002a68: 	movq	%rsi, 0x100(%rsp)
    00002a70: 	movq	0x120(%rsp), %rsi
    00002a78: 	subq	%rbx, %rsi
    00002a7b: 	movq	%rsi, 0xf8(%rsp)
    00002a83: 	movq	%rdi, %rsi
    00002a86: 	movq	%rax, %rdi
    00002a89: 	subq	%rax, %rsi
    00002a8c: 	movq	%rsi, %rax
    00002a8f: 	movq	%rsi, 0x20(%rsp)
    00002a94: 	andq	$-0x2, %rsi
    00002a98: 	shrq	%rax
    00002a9b: 	movq	%rsi, %r14
    00002a9e: 	movq	%rsi, 0x60(%rsp)
    00002aa3: 	shlq	$0x4, %rax
    00002aa7: 	addq	%rdi, %r14
    00002aaa: 	movq	%rax, 0x58(%rsp)
    00002aaf: 	movq	0x130(%rsp), %rax
    00002ab7: 	movq	%rax, 0x68(%rsp)
    00002abc: 	movq	0x140(%rsp), %rax
    00002ac4: 	addq	%r14, %rax
    00002ac7: 	addq	%rax, %rcx
    00002aca: 	movq	%rax, 0x10(%rsp)
    00002acf: 	movq	%rcx, 0x18(%rsp)
    00002ad4: 	nopl	(%rax) # Size: 4
.Ltmp1571:
    00002ad8: 	movq	0x48(%rsp), %rdi
    00002add: 	cmpq	%rdi, 0xc0(%rsp)
    00002ae5: 	jae	.Ltmp1561 # Offset: 10981
    00002aeb: 	movq	0xb8(%rsp), %rax
    00002af3: 	movq	0xd8(%rsp), %r9
    00002afb: 	movq	0xe0(%rsp), %r8
    00002b03: 	movq	0x70(%rsp), %rdi
    00002b08: 	subq	%rax, %r9
    00002b0b: 	movq	0xf8(%rsp), %r10
    00002b13: 	movq	0x68(%rsp), %rsi
    00002b18: 	subq	%rax, %r8
    00002b1b: 	movq	0xb0(%rsp), %rax
    00002b23: 	movq	0xe8(%rsp), %rcx
    00002b2b: 	addq	0x108(%rsp), %rsi
    00002b33: 	addq	%r14, %rax
    00002b36: 	leaq	(%rdi,%rax,8), %r11
    00002b3a: 	movq	0xc0(%rsp), %rax
    00002b42: 	movq	0x100(%rsp), %rdi
    00002b4a: 	movq	%rax, (%rsp)
    00002b4e: 	nop # Size: 2
.Ltmp1565:
    00002b50: 	movsd	(%rsi), %xmm2
    00002b54: 	movsd	0x8(%rsi), %xmm0
    00002b59: 	movsd	0x10(%rsi), %xmm4
    00002b5e: 	movsd	0x18(%rsi), %xmm3
    00002b63: 	movq	0x28(%rsp), %rbx
    00002b68: 	cmpq	%rbx, 0x30(%rsp)
    00002b6d: 	jae	.Ltmp1562 # Offset: 11117
    00002b73: 	movq	0x38(%rsp), %rax
    00002b78: 	leaq	0x8(%r9), %rbx
    00002b7c: 	addq	%rcx, %rax
    00002b7f: 	cmpq	%rbx, %rdx
    00002b82: 	leaq	0x8(%rdi), %rbx
    00002b86: 	setne	%bpl
    00002b8a: 	cmpq	%rbx, %rdx
    00002b8d: 	setne	%bl
    00002b90: 	andl	%ebp, %ebx
    00002b92: 	cmpq	$0x1, 0x20(%rsp)
    00002b98: 	setne	%bpl
    00002b9c: 	andl	%ebp, %ebx
    00002b9e: 	leaq	0x8(%r8), %rbp
    00002ba2: 	cmpq	%rbp, %rdx
    00002ba5: 	setne	%bpl
    00002ba9: 	testb	%bpl, %bl
    00002bac: 	je	.Ltmp1563 # Offset: 11180
    00002bb2: 	leaq	0x8(%r10), %rbx
    00002bb6: 	cmpq	%rbx, %rdx
    00002bb9: 	je	.Ltmp1563 # Offset: 11193
    00002bbf: 	movapd	%xmm2, %xmm9
    00002bc4: 	movapd	%xmm0, %xmm8
    00002bc9: 	movapd	%xmm4, %xmm7
    00002bcd: 	xorl	%ebx, %ebx
    00002bcf: 	movapd	%xmm3, %xmm6
    00002bd3: 	movq	0x58(%rsp), %rbp
    00002bd8: 	unpcklpd	%xmm9, %xmm9
    00002bdd: 	unpcklpd	%xmm8, %xmm8
    00002be2: 	unpcklpd	%xmm7, %xmm7
    00002be6: 	unpcklpd	%xmm6, %xmm6
.Ltmp1564:
    00002bea: 	movupd	(%rdi,%rbx), %xmm1
    00002bef: 	movupd	(%r9,%rbx), %xmm5
    00002bf5: 	mulpd	%xmm8, %xmm1
    00002bfa: 	mulpd	%xmm9, %xmm5
    00002bff: 	addpd	%xmm5, %xmm1
    00002c03: 	movupd	(%r8,%rbx), %xmm5
    00002c09: 	mulpd	%xmm7, %xmm5
    00002c0d: 	addpd	%xmm5, %xmm1
    00002c11: 	movupd	(%r10,%rbx), %xmm5
    00002c17: 	mulpd	%xmm6, %xmm5
    00002c1b: 	addpd	%xmm5, %xmm1
    00002c1f: 	movupd	(%rdx,%rbx), %xmm5
    00002c24: 	addpd	%xmm5, %xmm1
    00002c28: 	movups	%xmm1, (%rdx,%rbx)
    00002c2c: 	addq	$0x10, %rbx
    00002c30: 	cmpq	%rbx, %rbp
    00002c33: 	jne	.Ltmp1564 # Offset: 11315
    00002c35: 	movq	0x20(%rsp), %rbp
    00002c3a: 	cmpq	%rbp, 0x60(%rsp)
    00002c3f: 	je	.Ltmp1562 # Offset: 11327
    00002c41: 	addq	%r14, %rax
    00002c44: 	mulsd	(%r15,%rax,8), %xmm0
    00002c4a: 	leaq	(%r14,%rcx), %rax
    00002c4e: 	mulsd	(%r15,%rax,8), %xmm2
    00002c54: 	movq	0x10(%rsp), %rax
    00002c59: 	addq	%rcx, %rax
    00002c5c: 	mulsd	(%r15,%rax,8), %xmm4
    00002c62: 	movq	0x18(%rsp), %rax
    00002c67: 	addsd	%xmm2, %xmm0
    00002c6b: 	addq	%rcx, %rax
    00002c6e: 	mulsd	(%r15,%rax,8), %xmm3
    00002c74: 	addsd	%xmm4, %xmm0
    00002c78: 	addsd	%xmm3, %xmm0
    00002c7c: 	addsd	(%r11), %xmm0
    00002c81: 	movsd	%xmm0, (%r11)
.Ltmp1562:
    00002c86: 	addq	$0x4, (%rsp)
    00002c8b: 	addq	$0x20, %rsi
    00002c8f: 	movq	(%rsp), %rax
    00002c93: 	addq	%r13, %r9
    00002c96: 	addq	0x50(%rsp), %rcx
    00002c9b: 	addq	%r13, %rdi
    00002c9e: 	addq	%r13, %r8
    00002ca1: 	addq	%r13, %r10
    00002ca4: 	cmpq	0x48(%rsp), %rax
    00002ca9: 	jb	.Ltmp1565 # Offset: 11433
.Ltmp1648:
    00002caf: 	movq	%rax, %rdi
    00002cb2: 	cmpq	%rdi, 0xf0(%rsp)
    00002cba: 	jbe	.Ltmp1566 # Offset: 11450
    00002cc0: 	movq	0x30(%rsp), %rsi
    00002cc5: 	movq	0x28(%rsp), %rax
    00002cca: 	cmpq	%rax, %rsi
    00002ccd: 	jae	.Ltmp1566 # Offset: 11469
    00002cd3: 	movq	0xb0(%rsp), %rcx
    00002cdb: 	movq	0x38(%rsp), %rbp
    00002ce0: 	movq	0x8(%rsp), %rbx
    00002ce5: 	movq	0xc8(%rsp), %r11
    00002ced: 	movq	%rcx, %rax
    00002cf0: 	movq	0x58(%rsp), %r10
    00002cf5: 	addq	%rdi, %rax
    00002cf8: 	imulq	%rbp, %rdi
    00002cfc: 	leaq	(%rbx,%rax,8), %r8
    00002d00: 	movq	0x20(%rsp), %rbx
    00002d05: 	leaq	(%rsi,%rdi), %rax
    00002d09: 	leaq	(%r15,%rax,8), %rsi
    00002d0d: 	leaq	(%r14,%rcx), %rax
    00002d11: 	movq	0x70(%rsp), %rcx
    00002d16: 	leaq	(%rcx,%rax,8), %rax
.Ltmp1570:
    00002d1a: 	leaq	0x8(%rsi), %rcx
    00002d1e: 	movsd	(%r8), %xmm1
    00002d23: 	cmpq	%rcx, %rdx
    00002d26: 	je	.Ltmp1567 # Offset: 11558
    00002d2c: 	movapd	%xmm1, %xmm2
    00002d30: 	xorl	%ecx, %ecx
    00002d32: 	unpcklpd	%xmm2, %xmm2
    00002d36: 	cmpq	$0x1, %rbx
    00002d3a: 	je	.Ltmp1567 # Offset: 11578
.Ltmp1568:
    00002d40: 	movupd	(%rsi,%rcx), %xmm0
    00002d45: 	movupd	(%rdx,%rcx), %xmm7
    00002d4a: 	mulpd	%xmm2, %xmm0
    00002d4e: 	addpd	%xmm7, %xmm0
    00002d52: 	movups	%xmm0, (%rdx,%rcx)
    00002d56: 	addq	$0x10, %rcx
    00002d5a: 	cmpq	%r10, %rcx
    00002d5d: 	jne	.Ltmp1568 # Offset: 11613
    00002d5f: 	cmpq	%rbx, 0x60(%rsp)
    00002d64: 	je	.Ltmp1569 # Offset: 11620
    00002d66: 	leaq	(%r14,%rdi), %rcx
    00002d6a: 	movsd	(%r15,%rcx,8), %xmm0
    00002d70: 	mulsd	%xmm1, %xmm0
    00002d74: 	addsd	(%rax), %xmm0
    00002d78: 	movsd	%xmm0, (%rax)
.Ltmp1569:
    00002d7c: 	addq	$0x8, %r8
    00002d80: 	addq	0x78(%rsp), %rsi
    00002d85: 	addq	%rbp, %rdi
    00002d88: 	cmpq	0x68(%rsp), %r8
    00002d8d: 	jne	.Ltmp1570 # Offset: 11661
.Ltmp1566:
    00002d8f: 	movq	0x78(%rsp), %rax
    00002d94: 	movq	0x38(%rsp), %rcx
    00002d99: 	addq	$0x1, 0x80(%rsp)
    00002da2: 	movq	0x80(%rsp), %rdi
    00002daa: 	addq	%rax, 0x68(%rsp)
    00002daf: 	addq	%rax, %rdx
    00002db2: 	addq	%rax, %r12
    00002db5: 	addq	%rcx, 0xb0(%rsp)
    00002dbd: 	addq	%rax, 0xc8(%rsp)
    00002dc5: 	cmpq	%rdi, 0x40(%rsp)
    00002dca: 	jne	.Ltmp1571 # Offset: 11722
    00002dd0: 	movq	0x110(%rsp), %rdi
    00002dd8: 	subq	$0x1c20, 0xb8(%rsp)
    00002de4: 	cmpq	%rdi, %rcx
    00002de7: 	ja	.Ltmp1572 # Offset: 11751
    00002ded: 	movq	0x128(%rsp), %rdi
    00002df5: 	movq	%r13, %r14
    00002df8: 	addq	%rdi, 0xe8(%rsp)
    00002e00: 	movq	0x148(%rsp), %rdi
    00002e08: 	addq	%rdi, 0xd8(%rsp)
    00002e10: 	addq	%rdi, 0xe0(%rsp)
    00002e18: 	movq	0x118(%rsp), %rdi
    00002e20: 	cmpq	%rdi, 0x38(%rsp)
    00002e25: 	ja	.Ltmp1573 # Offset: 11813
    00002e2b: 	movq	%rcx, %r14
.Ltmp1644:
    00002e2e: 	movq	0xd0(%rsp), %rbx
    00002e36: 	movq	0x70(%rsp), %rsi
    00002e3b: 	leaq	(,%r14,8), %r12
    00002e43: 	xorl	%edx, %edx
    00002e45: 	movq	DATAat0x2d9e0(%rip), %xmm2
    00002e4d: 	movsd	DATAat0x2da20(%rip), %xmm3
    00002e55: 	movq	%rsi, %rbp
    00002e58: 	movq	%rbx, %rcx
.Ltmp1649:
    00002e5b: 	xorl	%eax, %eax
    00002e5d: 	testq	%r14, %r14
    00002e60: 	jne	.Ltmp1574 # Offset: 11872
    00002e62: 	jmp	.Ltmp1575 # Offset: 11874
    00002e67: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1577:
    00002e70: 	addq	$0x1, %rax
    00002e74: 	cmpq	%rax, %r14
    00002e77: 	je	.Ltmp1575 # Offset: 11895
.Ltmp1574:
    00002e7d: 	movsd	(%rcx,%rax,8), %xmm1
    00002e82: 	movapd	%xmm1, %xmm4
    00002e86: 	movapd	%xmm1, %xmm0
    00002e8a: 	subsd	(%rsi,%rax,8), %xmm0
    00002e8f: 	andpd	%xmm2, %xmm4
    00002e93: 	comisd	DATAat0x2da18(%rip), %xmm4
    00002e9b: 	jbe	.Ltmp1576 # Offset: 11931
    00002e9d: 	divsd	%xmm1, %xmm0
.Ltmp1576:
    00002ea1: 	andpd	%xmm2, %xmm0
    00002ea5: 	comisd	%xmm0, %xmm3
    00002ea9: 	ja	.Ltmp1577 # Offset: 11945
    00002eab: 	leaq	DATAat0x2d180(%rip), %rsi
    00002eb2: 	movl	$0x1, %edi
    00002eb7: 	xorl	%eax, %eax
    00002eb9: 	callq	__printf_chk@PLT # Offset: 11961
.Ltmp1651:
    00002ebe: 	movq	0x70(%rsp), %rcx
    00002ec3: 	xorl	%r13d, %r13d
.Ltmp1578:
    00002ec6: 	movq	%rcx, %rdi
    00002ec9: 	movq	%r12, %rdx
    00002ecc: 	xorl	%esi, %esi
    00002ece: 	addq	$0x1, %r13
    00002ed2: 	callq	memset@PLT # Offset: 11986
    00002ed7: 	movq	%rax, %rcx
    00002eda: 	addq	%r12, %rcx
    00002edd: 	cmpq	%r13, 0x40(%rsp)
    00002ee2: 	ja	.Ltmp1578 # Offset: 12002
.Ltmp1650:
    00002ee4: 	movq	0x70(%rsp), %rdx
    00002ee9: 	movq	0x40(%rsp), %rcx
    00002eee: 	movq	%r14, %r8
    00002ef1: 	movq	%r15, %rsi
    00002ef4: 	movq	0x8(%rsp), %rdi
    00002ef9: 	callq	"_ZN28matmul_JKI_blocked_unrolled3IdEclEPKdS2_Pdmm.isra.0/1" # Offset: 12025
    00002efe: 	movq	DATAat0x2d9e0(%rip), %xmm2
    00002f06: 	movsd	DATAat0x2da20(%rip), %xmm3
    00002f0e: 	xorl	%edx, %edx
.Ltmp1652:
    00002f10: 	xorl	%eax, %eax
    00002f12: 	testq	%r14, %r14
    00002f15: 	jne	.Ltmp1579 # Offset: 12053
    00002f17: 	jmp	.Ltmp1580 # Offset: 12055
    00002f1c: 	nopl	(%rax) # Size: 4
.Ltmp1582:
    00002f20: 	addq	$0x1, %rax
    00002f24: 	cmpq	%rax, %r14
    00002f27: 	je	.Ltmp1580 # Offset: 12071
.Ltmp1579:
    00002f2d: 	movsd	(%rbx,%rax,8), %xmm1
    00002f32: 	movapd	%xmm1, %xmm4
    00002f36: 	movapd	%xmm1, %xmm0
    00002f3a: 	subsd	(%rbp,%rax,8), %xmm0
    00002f40: 	andpd	%xmm2, %xmm4
    00002f44: 	comisd	DATAat0x2da18(%rip), %xmm4
    00002f4c: 	jbe	.Ltmp1581 # Offset: 12108
    00002f4e: 	divsd	%xmm1, %xmm0
.Ltmp1581:
    00002f52: 	andpd	%xmm2, %xmm0
    00002f56: 	comisd	%xmm0, %xmm3
    00002f5a: 	ja	.Ltmp1582 # Offset: 12122
    00002f5c: 	movq	0x75458(%rsp), %rax
    00002f64: 	subq	%fs:0x28, %rax
    00002f6d: 	jne	.Ltmp1583 # Offset: 12141
    00002f73: 	addq	$0x75468, %rsp
    00002f7a: 	leaq	DATAat0x2d148(%rip), %rsi
    00002f81: 	movl	$0x1, %edi
    00002f86: 	xorl	%eax, %eax
    00002f88: 	popq	%rbx
    00002f89: 	popq	%rbp
    00002f8a: 	popq	%r12
    00002f8c: 	popq	%r13
    00002f8e: 	popq	%r14
    00002f90: 	popq	%r15
    00002f92: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 12178
.Ltmp1391:
    00002f97: 	cmpq	$0x0, 0x40(%rsp)
    00002f9d: 	jne	.Ltmp1360 # Offset: 12189
.Ltmp1306:
    00002fa3: 	testq	%r14, %r14
    00002fa6: 	je	.Ltmp1584 # Offset: 12198
    00002fac: 	movq	0x70(%rsp), %rbp
    00002fb1: 	movq	0x8(%rsp), %rbx
    00002fb6: 	movq	%r14, %r8
    00002fb9: 	xorl	%ecx, %ecx
    00002fbb: 	movq	%r15, %rsi
    00002fbe: 	movq	%rbp, %rdx
    00002fc1: 	movq	%rbx, %rdi
    00002fc4: 	callq	"_ZN19matmul_KJI_unrolledIdEclEPKdS2_Pdmm.isra.0/1" # Offset: 12228
    00002fc9: 	movq	%r14, %r8
    00002fcc: 	xorl	%ecx, %ecx
    00002fce: 	movq	%rbp, %rdx
    00002fd1: 	movq	%r15, %rsi
    00002fd4: 	movq	%rbx, %rdi
    00002fd7: 	callq	"_ZN19matmul_JKI_unrolledIdEclEPKdS2_Pdmm.isra.0/1" # Offset: 12247
.Ltmp1494:
    00002fdc: 	movq	0x70(%rsp), %rbp
    00002fe1: 	movq	0x8(%rsp), %rbx
    00002fe6: 	movq	%r14, %r8
    00002fe9: 	xorl	%ecx, %ecx
    00002feb: 	movq	%r15, %rsi
    00002fee: 	movq	%rbp, %rdx
    00002ff1: 	movq	%rbx, %rdi
    00002ff4: 	callq	"_ZN28matmul_JIK_blocked_unrolled2IdEclEPKdS2_Pdmm.isra.0/1" # Offset: 12276
    00002ff9: 	movq	%r14, %r8
    00002ffc: 	xorl	%ecx, %ecx
    00002ffe: 	movq	%rbp, %rdx
    00003001: 	movq	%r15, %rsi
    00003004: 	movq	%rbx, %rdi
    00003007: 	callq	"_ZN28matmul_JIK_blocked_unrolled3IdEclEPKdS2_Pdmm.isra.0/1" # Offset: 12295
    0000300c: 	movq	%r14, %r8
    0000300f: 	xorl	%ecx, %ecx
    00003011: 	movq	%rbp, %rdx
    00003014: 	movq	%r15, %rsi
    00003017: 	movq	%rbx, %rdi
    0000301a: 	callq	"_ZN28matmul_IJK_blocked_unrolled2IdEclEPKdS2_Pdmm.isra.0/1" # Offset: 12314
    0000301f: 	movq	%r14, %r8
.Ltmp1653:
    00003022: 	xorl	%ecx, %ecx
    00003024: 	movq	%rbp, %rdx
    00003027: 	movq	%r15, %rsi
    0000302a: 	movq	%rbx, %rdi
    0000302d: 	callq	"_ZN28matmul_IJK_blocked_unrolled3IdEclEPKdS2_Pdmm.isra.0/1" # Offset: 12333
.Ltmp1560:
    00003032: 	movq	0x75458(%rsp), %rax
    0000303a: 	subq	%fs:0x28, %rax
    00003043: 	jne	.Ltmp1583 # Offset: 12355
    00003049: 	movq	0x70(%rsp), %rdx
    0000304e: 	movq	0x8(%rsp), %rdi
    00003053: 	movq	%r14, %r8
    00003056: 	movq	%r15, %rsi
    00003059: 	addq	$0x75468, %rsp
    00003060: 	xorl	%ecx, %ecx
    00003062: 	popq	%rbx
    00003063: 	popq	%rbp
    00003064: 	popq	%r12
    00003066: 	popq	%r13
    00003068: 	popq	%r14
    0000306a: 	popq	%r15
    0000306c: 	jmp	"_ZN28matmul_JKI_blocked_unrolled3IdEclEPKdS2_Pdmm.isra.0/1" # TAILCALL  # Offset: 12396
    00003071: 	nopl	(%rax) # Size: 7
.Ltmp1389:
    00003078: 	leaq	0x1(%r8), %rax
    0000307c: 	addq	$0x8, %r10
    00003080: 	addq	%rsi, %r9
    00003083: 	cmpq	%r11, %r8
    00003086: 	je	.Ltmp1387 # Offset: 12422
    0000308c: 	movq	%rax, %r8
    0000308f: 	jmp	.Ltmp1585 # Offset: 12431
.Ltmp1396:
    00003094: 	addq	$0x1, %rdx
    00003098: 	addq	%rbx, %rsi
    0000309b: 	addq	%rbx, %rcx
    0000309e: 	cmpq	%rdx, 0x40(%rsp)
    000030a3: 	jne	.Ltmp1586 # Offset: 12451
    000030a9: 	testq	%r14, %r14
    000030ac: 	je	.Ltmp1400 # Offset: 12460
    000030b2: 	jmp	.Ltmp1587 # Offset: 12466
    000030b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1401:
    000030c0: 	movq	0x18(%rsp), %r9
    000030c5: 	leaq	(%rbp,%rax), %r10
.Ltmp1588:
    000030ca: 	movsd	(%r9), %xmm0
    000030cf: 	addq	$0x8, %rax
    000030d3: 	addq	$0x8, %r9
    000030d7: 	mulsd	%xmm1, %xmm0
    000030db: 	addsd	-0x8(%rax), %xmm0
    000030e0: 	movsd	%xmm0, -0x8(%rax)
    000030e5: 	cmpq	%rax, %r10
    000030e8: 	jne	.Ltmp1588 # Offset: 12520
    000030ea: 	jmp	.Ltmp1403 # Offset: 12522
.Ltmp1407:
    000030ef: 	addq	$0x1, %rdx
    000030f3: 	addq	%rbx, %rcx
    000030f6: 	addq	%rbx, %rsi
    000030f9: 	cmpq	%rdx, 0x40(%rsp)
    000030fe: 	jne	.Ltmp1589 # Offset: 12542
    00003104: 	testq	%r14, %r14
    00003107: 	je	.Ltmp1590 # Offset: 12551
    0000310d: 	jmp	.Ltmp1591 # Offset: 12557
    00003112: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1411:
    00003118: 	movq	%rcx, %r8
    0000311b: 	movq	%r9, %rsi
.Ltmp1592:
    0000311e: 	movsd	(%r8), %xmm0
    00003123: 	addq	$0x8, %rsi
    00003127: 	addq	$0x8, %r8
    0000312b: 	mulsd	%xmm1, %xmm0
    0000312f: 	addsd	-0x8(%rsi), %xmm0
    00003134: 	movsd	%xmm0, -0x8(%rsi)
    00003139: 	cmpq	%rsi, %r13
    0000313c: 	jne	.Ltmp1592 # Offset: 12604
    0000313e: 	jmp	.Ltmp1413 # Offset: 12606
.Ltmp1417:
    00003143: 	addq	$0x1, %rdx
    00003147: 	addq	%rbx, %rcx
    0000314a: 	addq	%rbx, %rsi
    0000314d: 	cmpq	%rdx, 0x40(%rsp)
    00003152: 	jne	.Ltmp1593 # Offset: 12626
    00003158: 	testq	%r14, %r14
    0000315b: 	je	.Ltmp1594 # Offset: 12635
    00003161: 	jmp	.Ltmp1595 # Offset: 12641
    00003166: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1425:
    00003170: 	addq	%rbx, 0x18(%rsp)
    00003175: 	addq	$0x1, %rdx
    00003179: 	addq	%rbx, %rcx
    0000317c: 	cmpq	%rdx, 0x40(%rsp)
    00003181: 	jne	.Ltmp1596 # Offset: 12673
    00003187: 	testq	%r14, %r14
    0000318a: 	je	.Ltmp1429 # Offset: 12682
    00003190: 	jmp	.Ltmp1597 # Offset: 12688
    00003195: 	nopl	(%rax) # Size: 3
.Ltmp1434:
    00003198: 	addq	$0x1, %rdx
    0000319c: 	addq	%rbx, %rsi
    0000319f: 	addq	%rbx, %rcx
    000031a2: 	cmpq	%rdx, 0x40(%rsp)
    000031a7: 	jne	.Ltmp1598 # Offset: 12711
    000031ad: 	testq	%r14, %r14
    000031b0: 	je	.Ltmp1599 # Offset: 12720
    000031b6: 	jmp	.Ltmp1600 # Offset: 12726
    000031bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1442:
    000031c0: 	addq	$0x1, %rdx
    000031c4: 	addq	%rbx, %rcx
    000031c7: 	addq	%rbx, %rsi
    000031ca: 	cmpq	%rdx, 0x40(%rsp)
    000031cf: 	ja	.Ltmp1601 # Offset: 12751
    000031d5: 	testq	%r14, %r14
    000031d8: 	je	.Ltmp1602 # Offset: 12760
    000031de: 	jmp	.Ltmp1603 # Offset: 12766
    000031e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1447:
    000031e8: 	addq	$0x1, %rdx
    000031ec: 	addq	%rbx, %rcx
    000031ef: 	addq	%rbx, %rsi
    000031f2: 	cmpq	%rdx, 0x40(%rsp)
    000031f7: 	ja	.Ltmp1604 # Offset: 12791
    000031fd: 	testq	%r14, %r14
    00003200: 	je	.Ltmp1605 # Offset: 12800
    00003206: 	jmp	.Ltmp1606 # Offset: 12806
    0000320b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1452:
    00003210: 	addq	$0x1, %rdx
    00003214: 	addq	%rbx, %rbp
    00003217: 	addq	%rbx, %rcx
    0000321a: 	cmpq	%rdx, 0x40(%rsp)
    0000321f: 	ja	.Ltmp1607 # Offset: 12831
    00003225: 	testq	%r14, %r14
    00003228: 	je	.Ltmp1608 # Offset: 12840
    0000322e: 	jmp	.Ltmp1609 # Offset: 12846
    00003233: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1464:
    00003238: 	addq	$0x1, %rdx
    0000323c: 	addq	%rbx, %rsi
    0000323f: 	addq	%rbx, %rcx
    00003242: 	cmpq	%rdx, 0x40(%rsp)
    00003247: 	ja	.Ltmp1610 # Offset: 12871
    0000324d: 	testq	%r14, %r14
    00003250: 	je	.Ltmp1611 # Offset: 12880
    00003256: 	jmp	.Ltmp1612 # Offset: 12886
    0000325b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1470:
    00003260: 	movq	%rsi, %rcx
    00003263: 	movq	%rdx, %rax
    00003266: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1613:
    00003270: 	movsd	(%rcx), %xmm1
    00003274: 	addq	$0x8, %rax
    00003278: 	addq	$0x8, %rcx
    0000327c: 	mulsd	%xmm0, %xmm1
    00003280: 	addsd	-0x8(%rax), %xmm1
    00003285: 	movsd	%xmm1, -0x8(%rax)
    0000328a: 	cmpq	%rax, %rbx
    0000328d: 	jne	.Ltmp1613 # Offset: 12941
    0000328f: 	jmp	.Ltmp1472 # Offset: 12943
.Ltmp1478:
    00003294: 	addq	$0x1, %rdx
    00003298: 	addq	%r13, %rcx
    0000329b: 	addq	%r13, %rsi
    0000329e: 	cmpq	%rdx, 0x40(%rsp)
    000032a3: 	ja	.Ltmp1614 # Offset: 12963
    000032a9: 	testq	%r14, %r14
    000032ac: 	je	.Ltmp1615 # Offset: 12972
    000032b2: 	jmp	.Ltmp1616 # Offset: 12978
    000032b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1490:
    000032c0: 	addq	%r13, 0x30(%rsp)
    000032c5: 	addq	$0x1, %rdx
    000032c9: 	addq	%r13, %rcx
    000032cc: 	cmpq	%rdx, 0x40(%rsp)
    000032d1: 	ja	.Ltmp1617 # Offset: 13009
    000032d7: 	testq	%r14, %r14
    000032da: 	jne	.Ltmp1618 # Offset: 13018
    000032e0: 	cmpq	$0x0, 0x40(%rsp)
    000032e6: 	jne	.Ltmp1619 # Offset: 13030
    000032ec: 	jmp	.Ltmp1620 # Offset: 13036
    000032f1: 	nopl	(%rax) # Size: 7
.Ltmp1496:
    000032f8: 	movapd	%xmm3, %xmm4
    000032fc: 	movapd	%xmm3, %xmm5
    00003300: 	movapd	%xmm3, %xmm0
    00003304: 	movq	%r10, %rax
    00003307: 	movapd	%xmm3, %xmm1
    0000330b: 	jmp	.Ltmp1621 # Offset: 13067
.Ltmp1505:
    00003310: 	addq	$0x1, %rdx
    00003314: 	addq	%rbx, %rcx
    00003317: 	addq	%rbx, %rsi
    0000331a: 	cmpq	%rdx, 0x40(%rsp)
    0000331f: 	jne	.Ltmp1622 # Offset: 13087
    00003325: 	testq	%r14, %r14
    00003328: 	je	.Ltmp1623 # Offset: 13096
    0000332e: 	jmp	.Ltmp1624 # Offset: 13102
    00003333: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1510:
    00003338: 	addq	$0x1, %rdx
    0000333c: 	addq	%rbx, %rcx
    0000333f: 	addq	%rbx, %rsi
    00003342: 	cmpq	%rdx, 0x40(%rsp)
    00003347: 	jne	.Ltmp1625 # Offset: 13127
    0000334d: 	testq	%r14, %r14
    00003350: 	je	.Ltmp1626 # Offset: 13136
    00003356: 	jmp	.Ltmp1627 # Offset: 13142
    0000335b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1515:
    00003360: 	addq	$0x1, %rdx
    00003364: 	addq	%rbx, %rcx
    00003367: 	addq	%rbx, %rsi
    0000336a: 	cmpq	%rdx, 0x40(%rsp)
    0000336f: 	jne	.Ltmp1628 # Offset: 13167
    00003375: 	testq	%r14, %r14
    00003378: 	je	.Ltmp1629 # Offset: 13176
    0000337e: 	jmp	.Ltmp1630 # Offset: 13182
    00003383: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1520:
    00003388: 	movapd	%xmm3, %xmm4
    0000338c: 	movapd	%xmm3, %xmm5
    00003390: 	movapd	%xmm3, %xmm0
    00003394: 	movq	%r11, %rax
    00003397: 	movapd	%xmm3, %xmm1
    0000339b: 	jmp	.Ltmp1631 # Offset: 13211
.Ltmp1529:
    000033a0: 	addq	$0x1, %rdx
    000033a4: 	addq	%rbx, %rcx
    000033a7: 	addq	%rbx, %rsi
    000033aa: 	cmpq	%rdx, 0x40(%rsp)
    000033af: 	jne	.Ltmp1632 # Offset: 13231
    000033b5: 	testq	%r14, %r14
    000033b8: 	je	.Ltmp1633 # Offset: 13240
    000033be: 	jmp	.Ltmp1634 # Offset: 13246
    000033c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1534:
    000033c8: 	addq	$0x1, %rdx
    000033cc: 	addq	%rbx, %rcx
    000033cf: 	addq	%rbx, %rsi
    000033d2: 	cmpq	%rdx, 0x40(%rsp)
    000033d7: 	jne	.Ltmp1635 # Offset: 13271
    000033dd: 	testq	%r14, %r14
    000033e0: 	je	.Ltmp1636 # Offset: 13280
    000033e6: 	jmp	.Ltmp1637 # Offset: 13286
    000033eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1539:
    000033f0: 	addq	%rbx, 0x68(%rsp)
    000033f5: 	addq	$0x1, %rdx
    000033f9: 	addq	%rbx, %rcx
    000033fc: 	cmpq	%rdx, 0x40(%rsp)
    00003401: 	jne	.Ltmp1638 # Offset: 13313
    00003407: 	testq	%r14, %r14
    0000340a: 	je	.Ltmp1639 # Offset: 13322
    00003410: 	jmp	.Ltmp1640 # Offset: 13328
    00003415: 	nopl	(%rax) # Size: 3
.Ltmp1545:
    00003418: 	movq	0x58(%rsp), %r11
    0000341d: 	movq	0x30(%rsp), %rax
    00003422: 	movq	%rcx, %rbx
    00003425: 	movq	0x18(%rsp), %rbp
    0000342a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1641:
    00003430: 	movsd	(%rbx), %xmm1
    00003434: 	addq	$0x4, %rax
    00003438: 	addq	$0x20, %r11
    0000343c: 	addq	$0x20, %rbx
    00003440: 	mulsd	%xmm0, %xmm1
    00003444: 	addsd	-0x20(%r11), %xmm1
    0000344a: 	movsd	%xmm1, -0x20(%r11)
    00003450: 	movsd	-0x18(%rbx), %xmm1
    00003455: 	mulsd	%xmm0, %xmm1
    00003459: 	addsd	-0x18(%r11), %xmm1
    0000345f: 	movsd	%xmm1, -0x18(%r11)
    00003465: 	movsd	-0x10(%rbx), %xmm1
    0000346a: 	mulsd	%xmm0, %xmm1
    0000346e: 	addsd	-0x10(%r11), %xmm1
    00003474: 	movsd	%xmm1, -0x10(%r11)
    0000347a: 	movsd	-0x8(%rbx), %xmm1
    0000347f: 	mulsd	%xmm0, %xmm1
    00003483: 	addsd	-0x8(%r11), %xmm1
    00003489: 	movsd	%xmm1, -0x8(%r11)
    0000348f: 	cmpq	%rax, %rbp
    00003492: 	ja	.Ltmp1641 # Offset: 13458
    00003494: 	movq	%rbp, 0x18(%rsp)
    00003499: 	jmp	.Ltmp1547 # Offset: 13465
    0000349e: 	nop # Size: 2
.Ltmp1549:
    000034a0: 	movsd	-0x8(%r15,%r11), %xmm1
    000034a7: 	movq	0x20(%rsp), %rbp
    000034ac: 	leaq	0x1(%rax), %r11
    000034b0: 	mulsd	%xmm0, %xmm1
    000034b4: 	addsd	(%rbx), %xmm1
    000034b8: 	movsd	%xmm1, (%rbx)
    000034bc: 	cmpq	%rbp, %r11
    000034bf: 	jae	.Ltmp1548 # Offset: 13503
    000034c5: 	leaq	(%r11,%r13), %rbx
    000034c9: 	addq	%rdx, %r11
    000034cc: 	movsd	(%r15,%r11,8), %xmm1
    000034d2: 	leaq	(%r14,%rbx,8), %rbx
    000034d6: 	leaq	0x2(%rax), %r11
    000034da: 	mulsd	%xmm0, %xmm1
    000034de: 	addsd	(%rbx), %xmm1
    000034e2: 	movsd	%xmm1, (%rbx)
    000034e6: 	cmpq	%rbp, %r11
    000034e9: 	jae	.Ltmp1548 # Offset: 13545
    000034ef: 	leaq	(%r11,%r13), %rbx
    000034f3: 	addq	%rdx, %r11
    000034f6: 	addq	$0x3, %rax
    000034fa: 	movsd	(%r15,%r11,8), %xmm1
    00003500: 	leaq	(%r14,%rbx,8), %rbx
    00003504: 	mulsd	%xmm0, %xmm1
    00003508: 	addsd	(%rbx), %xmm1
    0000350c: 	movsd	%xmm1, (%rbx)
    00003510: 	cmpq	%rbp, %rax
    00003513: 	jb	.Ltmp1642 # Offset: 13587
    00003519: 	jmp	.Ltmp1548 # Offset: 13593
    0000351e: 	nop # Size: 2
.Ltmp1544:
    00003520: 	movq	%rbx, %rax
    00003523: 	jmp	.Ltmp1547 # Offset: 13603
.Ltmp1556:
    00003528: 	addq	$0x1, %rdx
    0000352c: 	addq	%rbx, %rsi
    0000352f: 	addq	%rbx, %rcx
    00003532: 	cmpq	%rdx, 0x40(%rsp)
    00003537: 	ja	.Ltmp1643 # Offset: 13623
    0000353d: 	testq	%r14, %r14
    00003540: 	je	.Ltmp1644 # Offset: 13632
    00003546: 	jmp	.Ltmp1645 # Offset: 13638
    0000354b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1563:
    00003550: 	movq	0xb8(%rsp), %rbx
    00003558: 	movq	%r11, 0x98(%rsp)
    00003560: 	movq	%r14, 0xa0(%rsp)
    00003568: 	movq	0x30(%rsp), %rax
    0000356d: 	leaq	(%rbx,%r9), %rbp
    00003571: 	movq	%rdx, 0xa8(%rsp)
    00003579: 	movq	0x28(%rsp), %rdx
    0000357e: 	movq	%rbp, 0x90(%rsp)
    00003586: 	leaq	(%rbx,%rdi), %rbp
    0000358a: 	movq	0x90(%rsp), %r14
    00003592: 	movq	%rbp, 0x88(%rsp)
    0000359a: 	movq	0x88(%rsp), %r11
    000035a2: 	leaq	(%rbx,%r8), %rbp
    000035a6: 	addq	%r10, %rbx
    000035a9: 	nopl	(%rax) # Size: 7
.Ltmp1646:
    000035b0: 	movsd	(%r14,%rax,8), %xmm1
    000035b6: 	movsd	(%r11,%rax,8), %xmm5
    000035bc: 	mulsd	%xmm2, %xmm1
    000035c0: 	mulsd	%xmm0, %xmm5
    000035c4: 	addsd	%xmm5, %xmm1
    000035c8: 	movsd	(%rbp,%rax,8), %xmm5
    000035ce: 	mulsd	%xmm4, %xmm5
    000035d2: 	addsd	%xmm5, %xmm1
    000035d6: 	movsd	(%rbx,%rax,8), %xmm5
    000035db: 	mulsd	%xmm3, %xmm5
    000035df: 	addsd	%xmm5, %xmm1
    000035e3: 	addsd	(%r12,%rax,8), %xmm1
    000035e9: 	movsd	%xmm1, (%r12,%rax,8)
    000035ef: 	addq	$0x1, %rax
    000035f3: 	cmpq	%rax, %rdx
    000035f6: 	jne	.Ltmp1646 # Offset: 13814
    000035f8: 	movq	0x98(%rsp), %r11
    00003600: 	movq	0xa0(%rsp), %r14
    00003608: 	movq	0xa8(%rsp), %rdx
    00003610: 	jmp	.Ltmp1562 # Offset: 13840
.Ltmp1567:
    00003615: 	movq	%rsi, %r9
    00003618: 	movq	%rdx, %rcx
    0000361b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1647:
    00003620: 	movsd	(%r9), %xmm0
    00003625: 	addq	$0x8, %rcx
    00003629: 	addq	$0x8, %r9
    0000362d: 	mulsd	%xmm1, %xmm0
    00003631: 	addsd	-0x8(%rcx), %xmm0
    00003636: 	movsd	%xmm0, -0x8(%rcx)
    0000363b: 	cmpq	%rcx, %r11
    0000363e: 	jne	.Ltmp1647 # Offset: 13886
    00003640: 	jmp	.Ltmp1569 # Offset: 13888
.Ltmp1561:
    00003645: 	movq	0xc0(%rsp), %rax
    0000364d: 	movq	%rax, (%rsp)
    00003651: 	jmp	.Ltmp1648 # Offset: 13905
.Ltmp1575:
    00003656: 	addq	$0x1, %rdx
    0000365a: 	addq	%r12, %rcx
    0000365d: 	addq	%r12, %rsi
    00003660: 	cmpq	%rdx, 0x40(%rsp)
    00003665: 	ja	.Ltmp1649 # Offset: 13925
    0000366b: 	testq	%r14, %r14
    0000366e: 	je	.Ltmp1650 # Offset: 13934
    00003674: 	jmp	.Ltmp1651 # Offset: 13940
    00003679: 	nopl	(%rax) # Size: 7
.Ltmp1580:
    00003680: 	addq	$0x1, %rdx
    00003684: 	addq	%r12, %rbx
    00003687: 	addq	%r12, %rbp
    0000368a: 	cmpq	%rdx, 0x40(%rsp)
    0000368f: 	ja	.Ltmp1652 # Offset: 13967
    00003695: 	movq	0x75458(%rsp), %rax
    0000369d: 	subq	%fs:0x28, %rax
    000036a6: 	jne	.Ltmp1583 # Offset: 13990
    000036ac: 	addq	$0x75468, %rsp
    000036b3: 	popq	%rbx
    000036b4: 	popq	%rbp
    000036b5: 	popq	%r12
    000036b7: 	popq	%r13
    000036b9: 	popq	%r14
    000036bb: 	popq	%r15
    000036bd: 	retq # Offset: 14013
.Ltmp1584:
    000036be: 	movq	0x70(%rsp), %rbp
    000036c3: 	movq	0x8(%rsp), %rbx
    000036c8: 	xorl	%r8d, %r8d
    000036cb: 	xorl	%ecx, %ecx
    000036cd: 	movq	%r15, %rsi
    000036d0: 	movq	%rbp, %rdx
    000036d3: 	movq	%rbx, %rdi
    000036d6: 	callq	"_ZN19matmul_KJI_unrolledIdEclEPKdS2_Pdmm.isra.0/1" # Offset: 14038
    000036db: 	xorl	%r8d, %r8d
    000036de: 	xorl	%ecx, %ecx
    000036e0: 	movq	%rbp, %rdx
    000036e3: 	movq	%r15, %rsi
    000036e6: 	movq	%rbx, %rdi
    000036e9: 	callq	"_ZN19matmul_JKI_unrolledIdEclEPKdS2_Pdmm.isra.0/1" # Offset: 14057
.Ltmp1620:
    000036ee: 	movq	0x70(%rsp), %rbp
    000036f3: 	movq	0x8(%rsp), %rbx
    000036f8: 	xorl	%r8d, %r8d
    000036fb: 	xorl	%ecx, %ecx
    000036fd: 	movq	%r15, %rsi
    00003700: 	movq	%rbp, %rdx
    00003703: 	movq	%rbx, %rdi
    00003706: 	callq	"_ZN28matmul_JIK_blocked_unrolled2IdEclEPKdS2_Pdmm.isra.0/1" # Offset: 14086
    0000370b: 	xorl	%r8d, %r8d
    0000370e: 	xorl	%ecx, %ecx
    00003710: 	movq	%rbp, %rdx
    00003713: 	movq	%r15, %rsi
    00003716: 	movq	%rbx, %rdi
    00003719: 	callq	"_ZN28matmul_JIK_blocked_unrolled3IdEclEPKdS2_Pdmm.isra.0/1" # Offset: 14105
    0000371e: 	xorl	%r8d, %r8d
    00003721: 	xorl	%ecx, %ecx
    00003723: 	movq	%rbp, %rdx
    00003726: 	movq	%r15, %rsi
    00003729: 	movq	%rbx, %rdi
    0000372c: 	callq	"_ZN28matmul_IJK_blocked_unrolled2IdEclEPKdS2_Pdmm.isra.0/1" # Offset: 14124
    00003731: 	xorl	%r8d, %r8d
    00003734: 	jmp	.Ltmp1653 # Offset: 14132
.Ltmp1583:
    00003739: 	callq	__stack_chk_fail@PLT # Offset: 14137
DWARF CFI Instructions:
    <empty>
End of Function "_Z13verify_matmulIdEvPT_S1_S1_mm"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E" after disassembly {
  Number      : 75
  State       : disassembled
  Address     : 0x22fd0
  Size        : 0x21d
  MaxSize     : 0x220
  Offset      : 0x22fd0
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB074:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x38, %rsp
    00000015: 	movq	0x30(%rdi), %rcx
    00000019: 	movq	0x48(%rdi), %rax
    0000001d: 	movq	0x38(%rdi), %r13
    00000021: 	movq	(%rsi), %rbp
    00000024: 	movq	%rdi, 0x20(%rsp)
    00000029: 	movq	%rcx, 0x10(%rsp)
    0000002e: 	movq	0x10(%rsi), %rcx
    00000032: 	movq	%rax, (%rsp)
    00000036: 	movq	%rcx, 0x18(%rsp)
    0000003b: 	movq	0x18(%rsi), %rcx
    0000003f: 	leaq	0x8(%rcx), %r12
    00000043: 	movq	%rcx, 0x28(%rsp)
    00000048: 	cmpq	%r12, %rax
    0000004b: 	jbe	.Ltmp1654 # Offset: 75
    0000004d: 	nopl	(%rax) # Size: 3
.Ltmp1657:
    00000050: 	movq	(%r12), %r14
    00000054: 	leaq	0x200(%r14), %rbx
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1656:
    00000060: 	movq	(%r14), %rdi
    00000063: 	leaq	0x10(%r14), %rdx
    00000067: 	cmpq	%rdx, %rdi
    0000006a: 	je	.Ltmp1655 # Offset: 106
    00000070: 	movq	0x10(%r14), %rax
    00000074: 	addq	$0x20, %r14
    00000078: 	leaq	0x1(%rax), %rsi
    0000007c: 	callq	_ZdlPvm@PLT # Offset: 124
    00000081: 	cmpq	%rbx, %r14
    00000084: 	jne	.Ltmp1656 # Offset: 132
    00000086: 	addq	$0x8, %r12
    0000008a: 	cmpq	%r12, (%rsp)
    0000008e: 	ja	.Ltmp1657 # Offset: 142
.Ltmp1654:
    00000090: 	movq	(%rsp), %rcx
    00000094: 	cmpq	%rcx, 0x28(%rsp)
    00000099: 	je	.Ltmp1658 # Offset: 153
    0000009f: 	cmpq	0x18(%rsp), %rbp
    000000a4: 	je	.Ltmp1659 # Offset: 164
    000000a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1661:
    000000b0: 	movq	(%rbp), %rdi
    000000b4: 	leaq	0x10(%rbp), %rax
    000000b8: 	cmpq	%rax, %rdi
    000000bb: 	je	.Ltmp1660 # Offset: 187
    000000c1: 	movq	0x10(%rbp), %rax
    000000c5: 	addq	$0x20, %rbp
    000000c9: 	leaq	0x1(%rax), %rsi
    000000cd: 	callq	_ZdlPvm@PLT # Offset: 205
    000000d2: 	cmpq	%rbp, 0x18(%rsp)
    000000d7: 	jne	.Ltmp1661 # Offset: 215
.Ltmp1659:
    000000d9: 	cmpq	%r13, 0x10(%rsp)
    000000de: 	je	.Ltmp1662 # Offset: 222
.Ltmp1664:
    000000e0: 	movq	(%r13), %rdi
    000000e4: 	leaq	0x10(%r13), %rax
    000000e8: 	cmpq	%rax, %rdi
    000000eb: 	je	.Ltmp1663 # Offset: 235
    000000f1: 	movq	0x10(%r13), %rax
    000000f5: 	addq	$0x20, %r13
    000000f9: 	leaq	0x1(%rax), %rsi
    000000fd: 	callq	_ZdlPvm@PLT # Offset: 253
    00000102: 	cmpq	%r13, 0x10(%rsp)
    00000107: 	jne	.Ltmp1664 # Offset: 263
.Ltmp1662:
    00000109: 	movq	0x20(%rsp), %rax
    0000010e: 	movq	0x48(%rax), %rax
    00000112: 	movq	%rax, (%rsp)
    00000116: 	leaq	0x8(%rax), %rbp
    0000011a: 	movq	0x18(%r15), %rax
    0000011e: 	leaq	0x8(%rax), %rbx
    00000122: 	cmpq	%rbx, %rbp
    00000125: 	jbe	.Ltmp1665 # Offset: 293
    00000127: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1666:
    00000130: 	movq	(%rbx), %rdi
    00000133: 	movl	$0x200, %esi
    00000138: 	addq	$0x8, %rbx
    0000013c: 	callq	_ZdlPvm@PLT # Offset: 316
    00000141: 	cmpq	%rbx, %rbp
    00000144: 	ja	.Ltmp1666 # Offset: 324
.Ltmp1665:
    00000146: 	movdqu	(%r15), %xmm0
    0000014b: 	movq	0x20(%rsp), %rax
    00000150: 	movups	%xmm0, 0x30(%rax)
    00000154: 	movdqu	0x10(%r15), %xmm1
    0000015a: 	movaps	%xmm1, (%rsp)
    0000015e: 	movups	%xmm1, 0x40(%rax)
    00000162: 	addq	$0x38, %rsp
    00000166: 	popq	%rbx
    00000167: 	popq	%rbp
    00000168: 	popq	%r12
    0000016a: 	popq	%r13
    0000016c: 	popq	%r14
    0000016e: 	popq	%r15
    00000170: 	retq # Offset: 368
    00000171: 	nopl	(%rax) # Size: 7
.Ltmp1655:
    00000178: 	addq	$0x20, %r14
    0000017c: 	cmpq	%r14, %rbx
    0000017f: 	jne	.Ltmp1656 # Offset: 383
    00000185: 	addq	$0x8, %r12
    00000189: 	cmpq	%r12, (%rsp)
    0000018d: 	ja	.Ltmp1657 # Offset: 397
    00000193: 	jmp	.Ltmp1654 # Offset: 403
    00000198: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1663:
    000001a0: 	addq	$0x20, %r13
    000001a4: 	cmpq	%r13, 0x10(%rsp)
    000001a9: 	jne	.Ltmp1664 # Offset: 425
    000001af: 	jmp	.Ltmp1662 # Offset: 431
    000001b4: 	nopl	(%rax) # Size: 4
.Ltmp1660:
    000001b8: 	addq	$0x20, %rbp
    000001bc: 	cmpq	%rbp, 0x18(%rsp)
    000001c1: 	jne	.Ltmp1661 # Offset: 449
    000001c7: 	jmp	.Ltmp1659 # Offset: 455
.Ltmp1658:
    000001cc: 	cmpq	0x10(%rsp), %rbp
    000001d1: 	je	.Ltmp1662 # Offset: 465
.Ltmp1669:
    000001d7: 	movq	(%rbp), %rdi
    000001db: 	leaq	0x10(%rbp), %rax
    000001df: 	cmpq	%rax, %rdi
    000001e2: 	je	.Ltmp1667 # Offset: 482
.Ltmp1668:
    000001e4: 	movq	0x10(%rbp), %rax
    000001e8: 	addq	$0x20, %rbp
    000001ec: 	leaq	0x1(%rax), %rsi
    000001f0: 	callq	_ZdlPvm@PLT # Offset: 496
    000001f5: 	cmpq	%rbp, 0x10(%rsp)
    000001fa: 	je	.Ltmp1662 # Offset: 506
    00000200: 	movq	(%rbp), %rdi
    00000204: 	leaq	0x10(%rbp), %rax
    00000208: 	cmpq	%rax, %rdi
    0000020b: 	jne	.Ltmp1668 # Offset: 523
.Ltmp1667:
    0000020d: 	addq	$0x20, %rbp
    00000211: 	cmpq	%rbp, 0x10(%rsp)
    00000216: 	jne	.Ltmp1669 # Offset: 534
    00000218: 	jmp	.Ltmp1662 # Offset: 536
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E"

Binary Function "_Z9check_sumIiEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 76
  State       : disassembled
  Address     : 0x231f0
  Size        : 0x36
  MaxSize     : 0x40
  Offset      : 0x231f0
  Section     : .text
  Orc Section : .local.text._Z9check_sumIiEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB075:
    00000000: 	endbr64
    00000004: 	cvttsd2si	init_value(%rip), %eax
    0000000c: 	imull	%eax, %eax
    0000000f: 	imull	$0xb71b00, %eax, %eax
    00000015: 	cmpl	%edi, %eax
    00000017: 	jne	.Ltmp1670 # Offset: 23
    00000019: 	retq # Offset: 25
    0000001a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1670:
    00000020: 	movq	(%rsi), %rdx
    00000023: 	movl	$0x1, %edi
    00000028: 	xorl	%eax, %eax
    0000002a: 	leaq	DATAat0x2d5ff(%rip), %rsi
    00000031: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 49
DWARF CFI Instructions:
    <empty>
End of Function "_Z9check_sumIiEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9check_sumIfEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 77
  State       : disassembled
  Address     : 0x23230
  Size        : 0x76
  MaxSize     : 0x80
  Offset      : 0x23230
  Section     : .text
  Orc Section : .local.text._Z9check_sumIfEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB076:
    00000000: 	endbr64
    00000004: 	movss	DATAat0x2da30(%rip), %xmm2
    0000000c: 	pxor	%xmm1, %xmm1
    00000010: 	cvtsd2ss	init_value(%rip), %xmm1
    00000018: 	mulss	%xmm1, %xmm2
    0000001c: 	mulss	%xmm1, %xmm2
    00000020: 	movaps	%xmm0, %xmm1
    00000023: 	subss	%xmm2, %xmm1
    00000027: 	movaps	%xmm0, %xmm2
    0000002a: 	andps	DATAat0x2d9d0(%rip), %xmm2
    00000031: 	cvtss2sd	%xmm2, %xmm2
    00000035: 	comisd	DATAat0x2da08(%rip), %xmm2
    0000003d: 	jbe	.Ltmp1671 # Offset: 61
    0000003f: 	divss	%xmm0, %xmm1
.Ltmp1671:
    00000043: 	movsd	DATAat0x2da10(%rip), %xmm0
    0000004b: 	cvtss2sd	%xmm1, %xmm1
    0000004f: 	andpd	DATAat0x2d9e0(%rip), %xmm1
    00000057: 	comisd	%xmm1, %xmm0
    0000005b: 	jbe	.Ltmp1672 # Offset: 91
    0000005d: 	retq # Offset: 93
    0000005e: 	nop # Size: 2
.Ltmp1672:
    00000060: 	movq	(%rdi), %rdx
    00000063: 	leaq	DATAat0x2d5ff(%rip), %rsi
    0000006a: 	movl	$0x1, %edi
    0000006f: 	xorl	%eax, %eax
    00000071: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 113
DWARF CFI Instructions:
    <empty>
End of Function "_Z9check_sumIfEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z9check_sumIdEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 78
  State       : disassembled
  Address     : 0x232b0
  Size        : 0x6e
  MaxSize     : 0x70
  Offset      : 0x232b0
  Section     : .text
  Orc Section : .local.text._Z9check_sumIdEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB077:
    00000000: 	endbr64
    00000004: 	movsd	init_value(%rip), %xmm1
    0000000c: 	movsd	DATAat0x2da28(%rip), %xmm2
    00000014: 	movapd	%xmm0, %xmm3
    00000018: 	mulsd	%xmm1, %xmm2
    0000001c: 	mulsd	%xmm1, %xmm2
    00000020: 	movapd	%xmm0, %xmm1
    00000024: 	subsd	%xmm2, %xmm1
    00000028: 	movq	DATAat0x2d9e0(%rip), %xmm2
    00000030: 	andpd	%xmm2, %xmm3
    00000034: 	comisd	DATAat0x2da18(%rip), %xmm3
    0000003c: 	jbe	.Ltmp1673 # Offset: 60
    0000003e: 	divsd	%xmm0, %xmm1
.Ltmp1673:
    00000042: 	movsd	DATAat0x2da20(%rip), %xmm0
    0000004a: 	andpd	%xmm2, %xmm1
    0000004e: 	comisd	%xmm1, %xmm0
    00000052: 	jbe	.Ltmp1674 # Offset: 82
    00000054: 	retq # Offset: 84
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp1674:
    00000058: 	movq	(%rdi), %rdx
    0000005b: 	leaq	DATAat0x2d5ff(%rip), %rsi
    00000062: 	movl	$0x1, %edi
    00000067: 	xorl	%eax, %eax
    00000069: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 105
DWARF CFI Instructions:
    <empty>
End of Function "_Z9check_sumIdEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_" after disassembly {
  Number      : 79
  State       : disassembled
  Address     : 0x23320
  Size        : 0x328
  MaxSize     : 0x330
  Offset      : 0x23320
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB078:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rsi, %rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x18, %rsp
    00000015: 	movq	0x48(%rdi), %r12
    00000019: 	movq	0x28(%rdi), %rsi
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x8(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	movq	0x30(%rdi), %rax
    00000031: 	subq	0x38(%rdi), %rax
    00000035: 	movq	%r12, %r13
    00000038: 	sarq	$0x5, %rax
    0000003c: 	subq	%rsi, %r13
    0000003f: 	movq	%r13, %rcx
    00000042: 	sarq	$0x3, %rcx
    00000046: 	cmpq	$0x1, %r12
    0000004a: 	movq	%rcx, %rdx
    0000004d: 	adcq	$-0x1, %rdx
    00000051: 	shlq	$0x4, %rdx
    00000055: 	addq	%rdx, %rax
    00000058: 	movq	0x20(%rdi), %rdx
    0000005c: 	subq	0x10(%rdi), %rdx
    00000060: 	sarq	$0x5, %rdx
    00000064: 	addq	%rdx, %rax
    00000067: 	movabsq	$0x3ffffffffffffff, %rdx
    00000071: 	cmpq	%rdx, %rax
    00000074: 	je	.Ltmp1675 # Offset: 116
    0000007a: 	movq	0x8(%rdi), %rdx
    0000007e: 	movq	%rdi, %rbx
    00000081: 	movq	(%rdi), %rdi
    00000084: 	movq	%r12, %rax
    00000087: 	subq	%rdi, %rax
    0000008a: 	movq	%rdx, %r8
    0000008d: 	sarq	$0x3, %rax
    00000091: 	subq	%rax, %r8
    00000094: 	cmpq	$0x1, %r8
    00000098: 	jbe	.Ltmp1676 # Offset: 152
.Ltmp1687:
    0000009e: 	movl	$0x200, %edi
    000000a3: 	callq	_Znwm@PLT # Offset: 163
    000000a8: 	movq	%rax, 0x8(%r12)
    000000ad: 	movq	0x30(%rbx), %r13
    000000b1: 	movq	0x8(%rbp), %r12
    000000b5: 	leaq	0x10(%r13), %rdi
    000000b9: 	movq	%rdi, (%r13)
    000000bd: 	movq	(%rbp), %r14
    000000c1: 	movq	%r14, %rax
    000000c4: 	addq	%r12, %rax
    000000c7: 	je	.Ltmp1677 # Offset: 199
    000000c9: 	testq	%r14, %r14
    000000cc: 	je	.Ltmp1678 # Offset: 204
.Ltmp1677:
    000000d2: 	movq	%r12, (%rsp)
    000000d6: 	cmpq	$0xf, %r12
    000000da: 	ja	.Ltmp1679 # Offset: 218
    000000e0: 	cmpq	$0x1, %r12
    000000e4: 	jne	.Ltmp1680 # Offset: 228
    000000e6: 	movzbl	(%r14), %eax
    000000ea: 	movb	%al, 0x10(%r13)
.Ltmp1682:
    000000ee: 	movq	%r12, 0x8(%r13)
    000000f2: 	movb	$0x0, (%rdi,%r12)
    000000f7: 	movq	0x48(%rbx), %rdx
    000000fb: 	movq	0x8(%rdx), %rax
    000000ff: 	addq	$0x8, %rdx
    00000103: 	movq	%rdx, %xmm1
    00000108: 	movq	%rax, %xmm0
    0000010d: 	addq	$0x200, %rax
    00000113: 	punpcklqdq	%xmm0, %xmm0
    00000117: 	movups	%xmm0, 0x30(%rbx)
    0000011b: 	movq	%rax, %xmm0
    00000120: 	punpcklqdq	%xmm1, %xmm0
    00000124: 	movups	%xmm0, 0x40(%rbx)
    00000128: 	movq	0x8(%rsp), %rax
    0000012d: 	subq	%fs:0x28, %rax
    00000136: 	jne	.Ltmp1681 # Offset: 310
    0000013c: 	addq	$0x18, %rsp
    00000140: 	popq	%rbx
    00000141: 	popq	%rbp
    00000142: 	popq	%r12
    00000144: 	popq	%r13
    00000146: 	popq	%r14
    00000148: 	popq	%r15
    0000014a: 	retq # Offset: 330
    0000014b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1680:
    00000150: 	testq	%r12, %r12
    00000153: 	je	.Ltmp1682 # Offset: 339
    00000155: 	jmp	.Ltmp1683 # Offset: 341
    0000015a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1676:
    00000160: 	leaq	0x2(%rcx), %r14
    00000164: 	leaq	(%r14,%r14), %rax
    00000168: 	cmpq	%rax, %rdx
    0000016b: 	ja	.Ltmp1684 # Offset: 363
    00000171: 	testq	%rdx, %rdx
    00000174: 	movl	$0x1, %eax
    00000179: 	cmovneq	%rdx, %rax
    0000017d: 	leaq	0x2(%rdx,%rax), %r15
    00000182: 	movq	%r15, %rax
    00000185: 	shrq	$0x3c, %rax
    00000189: 	jne	.Ltmp1685 # Offset: 393
    0000018f: 	leaq	(,%r15,8), %rdi
    00000197: 	callq	_Znwm@PLT # Offset: 407
    0000019c: 	movq	0x28(%rbx), %rsi
    000001a0: 	movq	%rax, %r12
    000001a3: 	movq	%r15, %rax
    000001a6: 	subq	%r14, %rax
    000001a9: 	shrq	%rax
    000001ac: 	leaq	(%r12,%rax,8), %r14
    000001b0: 	movq	0x48(%rbx), %rax
    000001b4: 	leaq	0x8(%rax), %rdx
    000001b8: 	cmpq	%rsi, %rdx
    000001bb: 	je	.Ltmp1686 # Offset: 443
    000001bd: 	subq	%rsi, %rdx
    000001c0: 	movq	%r14, %rdi
    000001c3: 	callq	memmove@PLT # Offset: 451
.Ltmp1686:
    000001c8: 	movq	0x8(%rbx), %rax
    000001cc: 	movq	(%rbx), %rdi
    000001cf: 	leaq	(,%rax,8), %rsi
    000001d7: 	callq	_ZdlPvm@PLT # Offset: 471
    000001dc: 	movq	%r12, (%rbx)
    000001df: 	movq	%r15, 0x8(%rbx)
.Ltmp1689:
    000001e3: 	movq	(%r14), %rax
    000001e6: 	movq	(%r14), %xmm0
    000001eb: 	leaq	(%r14,%r13), %r12
    000001ef: 	movq	%r14, 0x28(%rbx)
    000001f3: 	movq	%r12, 0x48(%rbx)
    000001f7: 	addq	$0x200, %rax
    000001fd: 	movq	%rax, %xmm2
    00000202: 	punpcklqdq	%xmm2, %xmm0
    00000206: 	movups	%xmm0, 0x18(%rbx)
    0000020a: 	movq	(%r12), %rax
    0000020e: 	movq	(%r12), %xmm0
    00000214: 	addq	$0x200, %rax
    0000021a: 	movq	%rax, %xmm3
    0000021f: 	punpcklqdq	%xmm3, %xmm0
    00000223: 	movups	%xmm0, 0x38(%rbx)
    00000227: 	jmp	.Ltmp1687 # Offset: 551
    0000022c: 	nopl	(%rax) # Size: 4
.Ltmp1679:
    00000230: 	movq	%rsp, %rsi
    00000233: 	xorl	%edx, %edx
    00000235: 	movq	%r13, %rdi
    00000238: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 568
    0000023d: 	movq	%rax, (%r13)
    00000241: 	movq	%rax, %rdi
    00000244: 	movq	(%rsp), %rax
    00000248: 	movq	%rax, 0x10(%r13)
.Ltmp1683:
    0000024c: 	movq	%r12, %rdx
    0000024f: 	movq	%r14, %rsi
    00000252: 	callq	memcpy@PLT # Offset: 594
    00000257: 	movq	(%rsp), %r12
    0000025b: 	movq	(%r13), %rdi
    0000025f: 	jmp	.Ltmp1682 # Offset: 607
    00000264: 	nopl	(%rax) # Size: 4
.Ltmp1684:
    00000268: 	subq	%r14, %rdx
    0000026b: 	addq	$0x8, %r12
    0000026f: 	shrq	%rdx
    00000272: 	leaq	(%rdi,%rdx,8), %r14
    00000276: 	movq	%r12, %rdx
    00000279: 	subq	%rsi, %rdx
    0000027c: 	cmpq	%r14, %rsi
    0000027f: 	jbe	.Ltmp1688 # Offset: 639
    00000281: 	cmpq	%r12, %rsi
    00000284: 	je	.Ltmp1689 # Offset: 644
    0000028a: 	movq	%r14, %rdi
    0000028d: 	callq	memmove@PLT # Offset: 653
    00000292: 	jmp	.Ltmp1689 # Offset: 658
    00000297: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1688:
    000002a0: 	cmpq	%r12, %rsi
    000002a3: 	je	.Ltmp1689 # Offset: 675
    000002a9: 	leaq	0x8(%r13), %rdi
    000002ad: 	subq	%rdx, %rdi
    000002b0: 	addq	%r14, %rdi
    000002b3: 	callq	memmove@PLT # Offset: 691
    000002b8: 	jmp	.Ltmp1689 # Offset: 696
.Ltmp1678:
    000002bd: 	leaq	DATAat0x2d008(%rip), %rdi
    000002c4: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 708
    000002c9: 	nopl	(%rax) # Size: 7
.Ltmp1685:
    000002d0: 	shrq	$0x3d, %r15
    000002d4: 	je	.Ltmp1690 # Offset: 724
    000002d6: 	callq	_ZSt28__throw_bad_array_new_lengthv@PLT # Offset: 726
.Ltmp1690:
    000002db: 	callq	_ZSt17__throw_bad_allocv@PLT # Offset: 731
.Ltmp1675:
    000002e0: 	leaq	DATAat0x2d610(%rip), %rdi
    000002e7: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 743
.Ltmp1681:
    000002ec: 	callq	__stack_chk_fail@PLT # Offset: 748
    000002f1: 	endbr64
    000002f5: 	movq	%rax, %rdi
    000002f8: 	callq	__cxa_begin_catch@PLT # Offset: 760
    000002fd: 	movq	0x48(%rbx), %rax
    00000301: 	movl	$0x200, %esi
    00000306: 	movq	0x8(%rax), %rdi
    0000030a: 	callq	_ZdlPvm@PLT # Offset: 778
    0000030f: 	callq	__cxa_rethrow@PLT # Offset: 783
    00000314: 	endbr64
    00000318: 	movq	%rax, %rbp
    0000031b: 	callq	__cxa_end_catch@PLT # Offset: 795
    00000320: 	movq	%rbp, %rdi
    00000323: 	callq	_Unwind_Resume@PLT # Offset: 803
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_"

Binary Function "_Z11TestOneTypeIdEvv" after disassembly {
  Number      : 80
  State       : disassembled
  Address     : 0x23650
  Size        : 0x2f2f
  MaxSize     : 0x2f30
  Offset      : 0x23650
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIdEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB079:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	leaq	DATAat0x2d640(%rip), %rsi
    0000000d: 	pushq	%r14
    0000000f: 	pushq	%r13
    00000011: 	pushq	%r12
    00000013: 	pushq	%rbp
    00000014: 	pushq	%rbx
    00000015: 	subq	$0x118, %rsp
    0000001c: 	movq	%fs:0x28, %rax
    00000025: 	movq	%rax, 0x108(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	leaq	0xc0(%rsp), %rax
    00000037: 	movq	%rax, %rdi
    0000003a: 	movq	%rax, 0x20(%rsp)
    0000003f: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1" # Offset: 63
    00000044: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm4
    0000004c: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm5
    00000054: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000005b: 	leaq	0xa0(%rsp), %rsi
    00000063: 	movaps	%xmm4, 0xa0(%rsp)
    0000006b: 	movaps	%xmm5, 0xb0(%rsp)
    00000073: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E # Offset: 115
    00000078: 	movl	$0x75300, %edi
    0000007d: 	callq	_Znam@PLT # Offset: 125
    00000082: 	movl	$0x75300, %edi
    00000087: 	movq	%rax, 0x10(%rsp)
    0000008c: 	movq	%rax, %rbx
    0000008f: 	callq	_Znam@PLT # Offset: 143
    00000094: 	movl	$0x75300, %edi
    00000099: 	movq	%rax, %r14
    0000009c: 	callq	_Znam@PLT # Offset: 156
    000000a1: 	movl	$0xc8, %r8d
    000000a7: 	movq	%rax, %rdx
    000000aa: 	movq	%r14, %rsi
    000000ad: 	movq	%rbx, %rdi
    000000b0: 	movl	$0x12c, %ecx
    000000b5: 	movq	%rax, %r13
    000000b8: 	callq	_Z13verify_matmulIdEvPT_S1_S1_mm # Offset: 184
    000000bd: 	movsd	init_value(%rip), %xmm0
    000000c5: 	movq	%rbx, %rax
    000000c8: 	leaq	0x75300(%rbx), %rbx
    000000cf: 	unpcklpd	%xmm0, %xmm0
.Ltmp1691:
    000000d3: 	movups	%xmm0, (%rax)
    000000d6: 	addq	$0x10, %rax
    000000da: 	cmpq	%rax, %rbx
    000000dd: 	jne	.Ltmp1691 # Offset: 221
    000000df: 	leaq	0x75300(%r14), %rdx
    000000e6: 	movq	%r14, %rax
.Ltmp1692:
    000000e9: 	movups	%xmm0, (%rax)
    000000ec: 	addq	$0x10, %rax
    000000f0: 	cmpq	%rdx, %rax
    000000f3: 	jne	.Ltmp1692 # Offset: 243
    000000f5: 	movq	%r13, 0x48(%rsp)
    000000fa: 	leaq	0x75300(%r13), %rax
    00000101: 	movq	%rax, 0x18(%rsp)
    00000106: 	movq	%r13, %rax
.Ltmp1693:
    00000109: 	movups	%xmm0, (%rax)
    0000010c: 	addq	$0x10, %rax
    00000110: 	cmpq	0x18(%rsp), %rax
    00000115: 	jne	.Ltmp1693 # Offset: 277
    00000117: 	leaq	0xe0(%rsp), %r15
    0000011f: 	movq	0x20(%rsp), %rsi
    00000124: 	leaq	DATAat0x2d647(%rip), %rdx
    0000012b: 	movq	%r15, %rdi
    0000012e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 302
    00000133: 	callq	clock@PLT # Offset: 307
    00000138: 	movq	iterations(%rip), %r10
    0000013f: 	xorl	%r12d, %r12d
    00000142: 	leaq	0x640(%r14), %rbp
    00000149: 	movq	%rax, start_time(%rip)
    00000150: 	testq	%r10, %r10
    00000153: 	je	.Ltmp1694 # Offset: 339
.Ltmp1698:
    00000159: 	xorl	%esi, %esi
    0000015b: 	movq	%r13, %rdi
    0000015e: 	movl	$0x75300, %edx
    00000163: 	movq	%r10, 0x8(%rsp)
    00000168: 	callq	memset@PLT # Offset: 360
    0000016d: 	movq	0x10(%rsp), %rsi
    00000172: 	movq	%rbp, %r9
    00000175: 	movq	%r14, %r8
    00000178: 	movq	0x8(%rsp), %r10
    0000017d: 	xorl	%edi, %edi
.Ltmp1697:
    0000017f: 	movq	%r13, %rdx
    00000182: 	movq	%r8, %rcx
.Ltmp1696:
    00000185: 	movupd	(%rcx), %xmm1
    00000189: 	xorl	%eax, %eax
.Ltmp1695:
    0000018b: 	movsd	(%rsi,%rax), %xmm0
    00000190: 	movupd	(%rdx,%rax), %xmm6
    00000195: 	unpcklpd	%xmm0, %xmm0
    00000199: 	mulpd	%xmm1, %xmm0
    0000019d: 	addpd	%xmm6, %xmm0
    000001a1: 	movups	%xmm0, (%rdx,%rax)
    000001a5: 	addq	$0x640, %rax
    000001ab: 	cmpq	$0x75300, %rax
    000001b1: 	jne	.Ltmp1695 # Offset: 433
    000001b3: 	addq	$0x10, %rcx
    000001b7: 	addq	$0x10, %rdx
    000001bb: 	cmpq	%r9, %rcx
    000001be: 	jne	.Ltmp1696 # Offset: 446
    000001c0: 	addq	$0x1, %rdi
    000001c4: 	leaq	0x640(%rcx), %r9
    000001cb: 	addq	$0x640, %r8
    000001d2: 	addq	$0x8, %rsi
    000001d6: 	cmpq	$0xc8, %rdi
    000001dd: 	jne	.Ltmp1697 # Offset: 477
    000001df: 	addq	$0x1, %r12
    000001e3: 	cmpq	%r10, %r12
    000001e6: 	jne	.Ltmp1698 # Offset: 486
.Ltmp1694:
    000001ec: 	movq	%r15, %rdi
    000001ef: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 495
    000001f4: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000001fb: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00000202: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000209: 	je	.Ltmp1699 # Offset: 521
.Ltmp1935:
    0000020f: 	movq	-0x20(%rax), %rbp
    00000213: 	callq	clock@PLT # Offset: 531
    00000218: 	pxor	%xmm0, %xmm0
    0000021c: 	movq	%rax, end_time(%rip)
    00000223: 	movq	%rbp, %rdi
    00000226: 	subq	start_time(%rip), %rax
    0000022d: 	cvtsi2sd	%rax, %xmm0
    00000232: 	divsd	DATAat0x2da00(%rip), %xmm0
    0000023a: 	callq	_Z13record_resultdPKc # Offset: 570
    0000023f: 	movq	%r13, %rax
    00000242: 	pxor	%xmm0, %xmm0
.Ltmp1701:
    00000246: 	leaq	0x640(%rax), %rdx
.Ltmp1700:
    0000024d: 	movsd	(%rax), %xmm1
    00000251: 	addq	$0x10, %rax
    00000255: 	addsd	%xmm1, %xmm0
    00000259: 	movsd	-0x8(%rax), %xmm1
    0000025e: 	addsd	%xmm1, %xmm0
    00000262: 	cmpq	%rdx, %rax
    00000265: 	jne	.Ltmp1700 # Offset: 613
    00000267: 	cmpq	0x18(%rsp), %rax
    0000026c: 	jne	.Ltmp1701 # Offset: 620
    0000026e: 	movq	%r15, %rdi
    00000271: 	callq	_Z9check_sumIdEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 625
    00000276: 	movq	0xe0(%rsp), %rdi
    0000027e: 	leaq	0xf0(%rsp), %rax
    00000286: 	movq	%rax, 0x8(%rsp)
    0000028b: 	cmpq	%rax, %rdi
    0000028e: 	je	.Ltmp1702 # Offset: 654
    00000290: 	movq	0xf0(%rsp), %rax
    00000298: 	leaq	0x1(%rax), %rsi
    0000029c: 	callq	_ZdlPvm@PLT # Offset: 668
.Ltmp1702:
    000002a1: 	movq	0x20(%rsp), %rsi
    000002a6: 	leaq	DATAat0x2d65c(%rip), %rdx
    000002ad: 	movq	%r15, %rdi
    000002b0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 688
    000002b5: 	callq	clock@PLT # Offset: 693
    000002ba: 	movq	iterations(%rip), %r12
    000002c1: 	xorl	%ebp, %ebp
    000002c3: 	movq	%rax, start_time(%rip)
    000002ca: 	testq	%r12, %r12
    000002cd: 	je	.Ltmp1703 # Offset: 717
.Ltmp1707:
    000002d3: 	xorl	%esi, %esi
    000002d5: 	movq	%r13, %rdi
    000002d8: 	movl	$0x75300, %edx
    000002dd: 	callq	memset@PLT # Offset: 733
    000002e2: 	movq	0x10(%rsp), %rdi
    000002e7: 	movq	%r14, %rcx
    000002ea: 	xorl	%esi, %esi
.Ltmp1706:
    000002ec: 	movq	%r13, %rdx
    000002ef: 	movq	%rdi, %r8
.Ltmp1705:
    000002f2: 	movsd	(%r8), %xmm1
    000002f7: 	xorl	%eax, %eax
    000002f9: 	unpcklpd	%xmm1, %xmm1
.Ltmp1704:
    000002fd: 	movupd	(%rcx,%rax), %xmm0
    00000302: 	movupd	(%rdx,%rax), %xmm6
    00000307: 	mulpd	%xmm1, %xmm0
    0000030b: 	addpd	%xmm6, %xmm0
    0000030f: 	movups	%xmm0, (%rdx,%rax)
    00000313: 	addq	$0x10, %rax
    00000317: 	cmpq	$0x640, %rax
    0000031d: 	jne	.Ltmp1704 # Offset: 797
    0000031f: 	addq	$0x640, %r8
    00000326: 	addq	$0x640, %rdx
    0000032d: 	cmpq	0x18(%rsp), %rdx
    00000332: 	jne	.Ltmp1705 # Offset: 818
    00000334: 	addq	$0x1, %rsi
    00000338: 	addq	$0x640, %rcx
    0000033f: 	addq	$0x8, %rdi
    00000343: 	cmpq	$0xc8, %rsi
    0000034a: 	jne	.Ltmp1706 # Offset: 842
    0000034c: 	addq	$0x1, %rbp
    00000350: 	cmpq	%r12, %rbp
    00000353: 	jne	.Ltmp1707 # Offset: 851
.Ltmp1703:
    00000359: 	movq	%r15, %rdi
    0000035c: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 860
    00000361: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000368: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    0000036f: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000376: 	je	.Ltmp1708 # Offset: 886
.Ltmp1960:
    0000037c: 	movq	-0x20(%rax), %rbp
    00000380: 	callq	clock@PLT # Offset: 896
    00000385: 	pxor	%xmm0, %xmm0
    00000389: 	movq	%rax, end_time(%rip)
    00000390: 	movq	%rbp, %rdi
    00000393: 	subq	start_time(%rip), %rax
    0000039a: 	cvtsi2sd	%rax, %xmm0
    0000039f: 	divsd	DATAat0x2da00(%rip), %xmm0
    000003a7: 	callq	_Z13record_resultdPKc # Offset: 935
    000003ac: 	movq	%r13, %rax
    000003af: 	pxor	%xmm0, %xmm0
.Ltmp1710:
    000003b3: 	leaq	0x640(%rax), %rdx
.Ltmp1709:
    000003ba: 	movsd	(%rax), %xmm1
    000003be: 	addq	$0x10, %rax
    000003c2: 	addsd	%xmm1, %xmm0
    000003c6: 	movsd	-0x8(%rax), %xmm1
    000003cb: 	addsd	%xmm1, %xmm0
    000003cf: 	cmpq	%rdx, %rax
    000003d2: 	jne	.Ltmp1709 # Offset: 978
    000003d4: 	cmpq	0x18(%rsp), %rax
    000003d9: 	jne	.Ltmp1710 # Offset: 985
    000003db: 	movq	%r15, %rdi
    000003de: 	callq	_Z9check_sumIdEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 990
    000003e3: 	movq	0xe0(%rsp), %rdi
    000003eb: 	cmpq	0x8(%rsp), %rdi
    000003f0: 	je	.Ltmp1711 # Offset: 1008
    000003f2: 	movq	0xf0(%rsp), %rax
    000003fa: 	leaq	0x1(%rax), %rsi
    000003fe: 	callq	_ZdlPvm@PLT # Offset: 1022
.Ltmp1711:
    00000403: 	movq	0x20(%rsp), %rsi
    00000408: 	leaq	DATAat0x2d671(%rip), %rdx
    0000040f: 	movq	%r15, %rdi
    00000412: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1042
    00000417: 	callq	clock@PLT # Offset: 1047
    0000041c: 	movq	iterations(%rip), %r9
    00000423: 	xorl	%r10d, %r10d
    00000426: 	leaq	0x4d580(%r14), %r12
    0000042d: 	movq	%rax, start_time(%rip)
    00000434: 	leaq	0x4e200(%r14), %rbp
    0000043b: 	testq	%r9, %r9
    0000043e: 	je	.Ltmp1712 # Offset: 1086
.Ltmp1718:
    00000444: 	movl	$0x75300, %edx
    00000449: 	xorl	%esi, %esi
    0000044b: 	movq	%r13, %rdi
    0000044e: 	movq	%r9, 0x30(%rsp)
    00000453: 	movq	%r10, 0x28(%rsp)
    00000458: 	callq	memset@PLT # Offset: 1112
    0000045d: 	movq	0x10(%rsp), %rcx
    00000462: 	movq	0x28(%rsp), %r10
    00000467: 	movq	%r13, %rdx
    0000046a: 	movq	0x30(%rsp), %r9
.Ltmp1717:
    0000046f: 	movq	%r14, %rdi
    00000472: 	xorl	%esi, %esi
.Ltmp1714:
    00000474: 	movsd	(%rcx,%rsi,8), %xmm3
    00000479: 	movsd	0x8(%rcx,%rsi,8), %xmm2
    0000047f: 	leaq	0x640(%rdi), %r8
    00000486: 	xorl	%eax, %eax
    00000488: 	unpcklpd	%xmm3, %xmm3
    0000048c: 	unpcklpd	%xmm2, %xmm2
.Ltmp1713:
    00000490: 	movupd	(%rdi,%rax), %xmm0
    00000495: 	movupd	(%r8,%rax), %xmm1
    0000049b: 	movupd	(%rdx,%rax), %xmm6
    000004a0: 	mulpd	%xmm3, %xmm0
    000004a4: 	mulpd	%xmm2, %xmm1
    000004a8: 	addpd	%xmm6, %xmm0
    000004ac: 	addpd	%xmm1, %xmm0
    000004b0: 	movups	%xmm0, (%rdx,%rax)
    000004b4: 	addq	$0x10, %rax
    000004b8: 	cmpq	$0x640, %rax
    000004be: 	jne	.Ltmp1713 # Offset: 1214
    000004c0: 	addq	$0x2, %rsi
    000004c4: 	addq	$0xc80, %rdi
    000004cb: 	cmpq	$0xc6, %rsi
    000004d2: 	jne	.Ltmp1714 # Offset: 1234
    000004d4: 	leaq	0x630(%rcx), %rdi
    000004db: 	movq	%r12, %rsi
.Ltmp1716:
    000004de: 	movsd	(%rdi), %xmm1
    000004e2: 	xorl	%eax, %eax
    000004e4: 	unpcklpd	%xmm1, %xmm1
.Ltmp1715:
    000004e8: 	movupd	(%rsi,%rax), %xmm0
    000004ed: 	movupd	(%rdx,%rax), %xmm7
    000004f2: 	mulpd	%xmm1, %xmm0
    000004f6: 	addpd	%xmm7, %xmm0
    000004fa: 	movups	%xmm0, (%rdx,%rax)
    000004fe: 	addq	$0x10, %rax
    00000502: 	cmpq	$0x640, %rax
    00000508: 	jne	.Ltmp1715 # Offset: 1288
    0000050a: 	addq	$0x640, %rsi
    00000511: 	addq	$0x8, %rdi
    00000515: 	cmpq	%rbp, %rsi
    00000518: 	jne	.Ltmp1716 # Offset: 1304
    0000051a: 	addq	$0x640, %rcx
    00000521: 	addq	$0x640, %rdx
    00000528: 	cmpq	%rcx, %rbx
    0000052b: 	jne	.Ltmp1717 # Offset: 1323
    00000531: 	addq	$0x1, %r10
    00000535: 	cmpq	%r9, %r10
    00000538: 	jne	.Ltmp1718 # Offset: 1336
.Ltmp1712:
    0000053e: 	movq	%r15, %rdi
    00000541: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1345
    00000546: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000054d: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00000554: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000055b: 	je	.Ltmp1719 # Offset: 1371
.Ltmp1959:
    00000561: 	movq	-0x20(%rax), %rbp
    00000565: 	callq	clock@PLT # Offset: 1381
    0000056a: 	pxor	%xmm0, %xmm0
    0000056e: 	movq	%rax, end_time(%rip)
    00000575: 	movq	%rbp, %rdi
    00000578: 	subq	start_time(%rip), %rax
    0000057f: 	cvtsi2sd	%rax, %xmm0
    00000584: 	divsd	DATAat0x2da00(%rip), %xmm0
    0000058c: 	callq	_Z13record_resultdPKc # Offset: 1420
    00000591: 	movq	%r13, %rax
    00000594: 	pxor	%xmm0, %xmm0
.Ltmp1721:
    00000598: 	leaq	0x640(%rax), %rdx
.Ltmp1720:
    0000059f: 	movsd	(%rax), %xmm1
    000005a3: 	addq	$0x10, %rax
    000005a7: 	addsd	%xmm1, %xmm0
    000005ab: 	movsd	-0x8(%rax), %xmm1
    000005b0: 	addsd	%xmm1, %xmm0
    000005b4: 	cmpq	%rdx, %rax
    000005b7: 	jne	.Ltmp1720 # Offset: 1463
    000005b9: 	cmpq	0x18(%rsp), %rax
    000005be: 	jne	.Ltmp1721 # Offset: 1470
    000005c0: 	movq	%r15, %rdi
    000005c3: 	callq	_Z9check_sumIdEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1475
    000005c8: 	movq	0xe0(%rsp), %rdi
    000005d0: 	cmpq	0x8(%rsp), %rdi
    000005d5: 	je	.Ltmp1722 # Offset: 1493
    000005d7: 	movq	0xf0(%rsp), %rax
    000005df: 	leaq	0x1(%rax), %rsi
    000005e3: 	callq	_ZdlPvm@PLT # Offset: 1507
.Ltmp1722:
    000005e8: 	movq	0x20(%rsp), %rsi
    000005ed: 	leaq	DATAat0x2d686(%rip), %rdx
    000005f4: 	movq	%r15, %rdi
    000005f7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1527
    000005fc: 	callq	clock@PLT # Offset: 1532
    00000601: 	movq	iterations(%rip), %r10
    00000608: 	xorl	%r12d, %r12d
    0000060b: 	leaq	0x4e200(%r14), %rbp
    00000612: 	movq	%rax, start_time(%rip)
    00000619: 	testq	%r10, %r10
    0000061c: 	je	.Ltmp1723 # Offset: 1564
.Ltmp1727:
    00000622: 	xorl	%esi, %esi
    00000624: 	movq	%r13, %rdi
    00000627: 	movl	$0x75300, %edx
    0000062c: 	movq	%r10, 0x28(%rsp)
    00000631: 	callq	memset@PLT # Offset: 1585
    00000636: 	movq	0x10(%rsp), %rdi
    0000063b: 	movq	0x28(%rsp), %r10
    00000640: 	movq	%r13, %rsi
.Ltmp1726:
    00000643: 	movq	%rbp, %r9
    00000646: 	movq	%r14, %r8
    00000649: 	xorl	%ecx, %ecx
.Ltmp1725:
    0000064b: 	movupd	(%rsi,%rcx), %xmm1
    00000650: 	movq	%rdi, %rdx
    00000653: 	movq	%r8, %rax
.Ltmp1724:
    00000656: 	movsd	(%rdx), %xmm0
    0000065a: 	movupd	(%rax), %xmm7
    0000065e: 	addq	$0x640, %rax
    00000664: 	addq	$0x8, %rdx
    00000668: 	unpcklpd	%xmm0, %xmm0
    0000066c: 	mulpd	%xmm7, %xmm0
    00000670: 	addpd	%xmm0, %xmm1
    00000674: 	cmpq	%r9, %rax
    00000677: 	jne	.Ltmp1724 # Offset: 1655
    00000679: 	movups	%xmm1, (%rsi,%rcx)
    0000067d: 	addq	$0x10, %rcx
    00000681: 	addq	$0x10, %r8
    00000685: 	leaq	0x10(%rax), %r9
    00000689: 	cmpq	$0x640, %rcx
    00000690: 	jne	.Ltmp1725 # Offset: 1680
    00000692: 	addq	$0x640, %rdi
    00000699: 	addq	$0x640, %rsi
    000006a0: 	cmpq	%rdi, %rbx
    000006a3: 	jne	.Ltmp1726 # Offset: 1699
    000006a5: 	addq	$0x1, %r12
    000006a9: 	cmpq	%r10, %r12
    000006ac: 	jne	.Ltmp1727 # Offset: 1708
.Ltmp1723:
    000006b2: 	movq	%r15, %rdi
    000006b5: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1717
    000006ba: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000006c1: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    000006c8: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000006cf: 	je	.Ltmp1728 # Offset: 1743
.Ltmp1958:
    000006d5: 	movq	-0x20(%rax), %rbp
    000006d9: 	callq	clock@PLT # Offset: 1753
    000006de: 	pxor	%xmm0, %xmm0
    000006e2: 	movq	%rax, end_time(%rip)
    000006e9: 	movq	%rbp, %rdi
    000006ec: 	subq	start_time(%rip), %rax
    000006f3: 	cvtsi2sd	%rax, %xmm0
    000006f8: 	divsd	DATAat0x2da00(%rip), %xmm0
    00000700: 	callq	_Z13record_resultdPKc # Offset: 1792
    00000705: 	movq	%r13, %rax
    00000708: 	pxor	%xmm0, %xmm0
.Ltmp1730:
    0000070c: 	leaq	0x640(%rax), %rdx
.Ltmp1729:
    00000713: 	movsd	(%rax), %xmm1
    00000717: 	addq	$0x10, %rax
    0000071b: 	addsd	%xmm1, %xmm0
    0000071f: 	movsd	-0x8(%rax), %xmm1
    00000724: 	addsd	%xmm1, %xmm0
    00000728: 	cmpq	%rdx, %rax
    0000072b: 	jne	.Ltmp1729 # Offset: 1835
    0000072d: 	cmpq	0x18(%rsp), %rax
    00000732: 	jne	.Ltmp1730 # Offset: 1842
    00000734: 	movq	%r15, %rdi
    00000737: 	callq	_Z9check_sumIdEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1847
    0000073c: 	movq	0xe0(%rsp), %rdi
    00000744: 	cmpq	0x8(%rsp), %rdi
    00000749: 	je	.Ltmp1731 # Offset: 1865
    0000074b: 	movq	0xf0(%rsp), %rax
    00000753: 	leaq	0x1(%rax), %rsi
    00000757: 	callq	_ZdlPvm@PLT # Offset: 1879
.Ltmp1731:
    0000075c: 	movq	0x20(%rsp), %rsi
    00000761: 	leaq	DATAat0x2d69b(%rip), %rdx
    00000768: 	movq	%r15, %rdi
    0000076b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1899
    00000770: 	callq	clock@PLT # Offset: 1904
    00000775: 	movq	iterations(%rip), %r11
    0000077c: 	xorl	%r12d, %r12d
    0000077f: 	leaq	0x4e200(%r14), %rbp
    00000786: 	movq	%rax, start_time(%rip)
    0000078d: 	testq	%r11, %r11
    00000790: 	je	.Ltmp1732 # Offset: 1936
.Ltmp1736:
    00000796: 	movl	$0x75300, %edx
    0000079b: 	xorl	%esi, %esi
    0000079d: 	movq	%r13, %rdi
    000007a0: 	movq	%r11, 0x28(%rsp)
    000007a5: 	callq	memset@PLT # Offset: 1957
    000007aa: 	movq	0x28(%rsp), %r11
    000007af: 	movq	%rbp, %rcx
    000007b2: 	movq	%r13, %r10
    000007b5: 	movq	%r14, %r9
    000007b8: 	xorl	%r8d, %r8d
.Ltmp1735:
    000007bb: 	movq	0x10(%rsp), %rdi
    000007c0: 	movq	%r10, %rsi
.Ltmp1734:
    000007c3: 	movsd	(%rsi), %xmm1
    000007c7: 	movq	%rdi, %rdx
    000007ca: 	movq	%r9, %rax
.Ltmp1733:
    000007cd: 	movsd	(%rax), %xmm0
    000007d1: 	movupd	(%rdx), %xmm4
    000007d5: 	addq	$0xc80, %rax
    000007db: 	addq	$0x10, %rdx
    000007df: 	movhpd	-0x640(%rax), %xmm0
    000007e7: 	mulpd	%xmm4, %xmm0
    000007eb: 	addsd	%xmm0, %xmm1
    000007ef: 	unpckhpd	%xmm0, %xmm0
    000007f3: 	addsd	%xmm0, %xmm1
    000007f7: 	cmpq	%rcx, %rax
    000007fa: 	jne	.Ltmp1733 # Offset: 2042
    000007fc: 	addq	$0x640, %rdi
    00000803: 	movsd	%xmm1, (%rsi)
    00000807: 	addq	$0x640, %rsi
    0000080e: 	cmpq	%rdi, %rbx
    00000811: 	jne	.Ltmp1734 # Offset: 2065
    00000813: 	addq	$0x1, %r8
    00000817: 	addq	$0x8, %r9
    0000081b: 	leaq	0x8(%rax), %rcx
    0000081f: 	addq	$0x8, %r10
    00000823: 	cmpq	$0xc8, %r8
    0000082a: 	jne	.Ltmp1735 # Offset: 2090
    0000082c: 	addq	$0x1, %r12
    00000830: 	cmpq	%r11, %r12
    00000833: 	jne	.Ltmp1736 # Offset: 2099
.Ltmp1732:
    00000839: 	movq	%r15, %rdi
    0000083c: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 2108
    00000841: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000848: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    0000084f: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000856: 	je	.Ltmp1737 # Offset: 2134
.Ltmp1957:
    0000085c: 	movq	-0x20(%rax), %rbp
    00000860: 	callq	clock@PLT # Offset: 2144
    00000865: 	pxor	%xmm0, %xmm0
    00000869: 	movq	%rax, end_time(%rip)
    00000870: 	movq	%rbp, %rdi
    00000873: 	subq	start_time(%rip), %rax
    0000087a: 	cvtsi2sd	%rax, %xmm0
    0000087f: 	divsd	DATAat0x2da00(%rip), %xmm0
    00000887: 	callq	_Z13record_resultdPKc # Offset: 2183
    0000088c: 	movq	%r13, %rax
    0000088f: 	pxor	%xmm0, %xmm0
.Ltmp1739:
    00000893: 	leaq	0x640(%rax), %rdx
.Ltmp1738:
    0000089a: 	movsd	(%rax), %xmm1
    0000089e: 	addq	$0x10, %rax
    000008a2: 	addsd	%xmm1, %xmm0
    000008a6: 	movsd	-0x8(%rax), %xmm1
    000008ab: 	addsd	%xmm1, %xmm0
    000008af: 	cmpq	%rdx, %rax
    000008b2: 	jne	.Ltmp1738 # Offset: 2226
    000008b4: 	cmpq	0x18(%rsp), %rax
    000008b9: 	jne	.Ltmp1739 # Offset: 2233
    000008bb: 	movq	%r15, %rdi
    000008be: 	callq	_Z9check_sumIdEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2238
    000008c3: 	movq	0xe0(%rsp), %rdi
    000008cb: 	cmpq	0x8(%rsp), %rdi
    000008d0: 	je	.Ltmp1740 # Offset: 2256
    000008d2: 	movq	0xf0(%rsp), %rax
    000008da: 	leaq	0x1(%rax), %rsi
    000008de: 	callq	_ZdlPvm@PLT # Offset: 2270
.Ltmp1740:
    000008e3: 	movq	0x20(%rsp), %rsi
    000008e8: 	leaq	DATAat0x2d6b0(%rip), %rdx
    000008ef: 	movq	%r15, %rdi
    000008f2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2290
    000008f7: 	callq	clock@PLT # Offset: 2295
    000008fc: 	movq	%rax, start_time(%rip)
    00000903: 	movq	iterations(%rip), %rax
    0000090a: 	movq	%rax, 0x50(%rsp)
    0000090f: 	testq	%rax, %rax
    00000912: 	je	.Ltmp1741 # Offset: 2322
    00000918: 	leaq	0x74680(%r13), %rax
    0000091f: 	leaq	0x4d580(%r14), %r12
    00000926: 	movq	$0x0, 0x28(%rsp)
    0000092f: 	movq	%rax, 0x38(%rsp)
    00000934: 	movq	0x10(%rsp), %rax
    00000939: 	leaq	0x4e200(%r14), %rbp
    00000940: 	addq	$0x630, %rax
    00000946: 	movq	%rax, 0x40(%rsp)
.Ltmp1747:
    0000094b: 	movl	$0x75300, %edx
    00000950: 	xorl	%esi, %esi
    00000952: 	movq	%r13, %rdi
    00000955: 	callq	memset@PLT # Offset: 2389
    0000095a: 	movq	0x38(%rsp), %rsi
    0000095f: 	movq	%r12, %r10
    00000962: 	movq	%rbp, %rdi
    00000965: 	movq	$0x0, 0x30(%rsp)
    0000096e: 	movq	%r13, %rdx
.Ltmp1746:
    00000971: 	movq	0x10(%rsp), %rcx
    00000976: 	leaq	-0x4e200(%rdi), %r8
    0000097d: 	xorl	%r11d, %r11d
.Ltmp1743:
    00000980: 	movsd	(%r8), %xmm0
    00000985: 	movq	%rcx, %r9
    00000988: 	movq	%rdx, %rax
    0000098b: 	movsd	0x640(%r8), %xmm3
    00000994: 	movapd	%xmm0, %xmm5
    00000998: 	movapd	%xmm3, %xmm4
    0000099c: 	unpcklpd	%xmm5, %xmm5
    000009a0: 	unpcklpd	%xmm4, %xmm4
.Ltmp1742:
    000009a4: 	movupd	(%r9), %xmm2
    000009a9: 	movupd	(%rax), %xmm1
    000009ad: 	addq	$0xc80, %rax
    000009b3: 	addq	$0xc80, %r9
    000009ba: 	movhpd	-0x640(%r9), %xmm2
    000009c3: 	movhpd	-0x640(%rax), %xmm1
    000009cb: 	mulpd	%xmm5, %xmm2
    000009cf: 	addpd	%xmm2, %xmm1
    000009d3: 	movupd	-0x640(%r9), %xmm2
    000009dc: 	movlpd	-0xc78(%r9), %xmm2
    000009e5: 	mulpd	%xmm4, %xmm2
    000009e9: 	movhps	%xmm1, -0x640(%rax)
    000009f0: 	movq	%xmm1, -0xc80(%rax)
    000009f8: 	movupd	-0xc80(%rax), %xmm1
    00000a00: 	movhpd	-0x640(%rax), %xmm1
    00000a08: 	addpd	%xmm2, %xmm1
    00000a0c: 	movq	%xmm1, -0xc80(%rax)
    00000a14: 	movhps	%xmm1, -0x640(%rax)
    00000a1b: 	cmpq	%rsi, %rax
    00000a1e: 	jne	.Ltmp1742 # Offset: 2590
    00000a20: 	movsd	0x74688(%rcx), %xmm2
    00000a28: 	addq	$0x2, %r11
    00000a2c: 	addq	$0x10, %rcx
    00000a30: 	movsd	0x74670(%rcx), %xmm1
    00000a38: 	addq	$0xc80, %r8
    00000a3f: 	mulsd	%xmm3, %xmm2
    00000a43: 	mulsd	%xmm0, %xmm1
    00000a47: 	addsd	(%rsi), %xmm1
    00000a4b: 	mulsd	0x74cb8(%rcx), %xmm3
    00000a53: 	mulsd	0x74cb0(%rcx), %xmm0
    00000a5b: 	addsd	%xmm2, %xmm1
    00000a5f: 	movsd	%xmm1, (%rsi)
    00000a63: 	addsd	0x74cc0(%rdx), %xmm0
    00000a6b: 	addsd	%xmm3, %xmm0
    00000a6f: 	movsd	%xmm0, 0x74cc0(%rdx)
    00000a77: 	cmpq	$0xc6, %r11
    00000a7e: 	jne	.Ltmp1743 # Offset: 2686
    00000a84: 	movq	0x40(%rsp), %r9
    00000a89: 	xorl	%r8d, %r8d
.Ltmp1745:
    00000a8c: 	movsd	(%rdx,%r8,8), %xmm1
    00000a92: 	movq	%r9, %rcx
    00000a95: 	movq	%r10, %rax
.Ltmp1744:
    00000a98: 	movsd	(%rcx), %xmm0
    00000a9c: 	mulsd	(%rax), %xmm0
    00000aa0: 	addq	$0x640, %rax
    00000aa6: 	addq	$0x8, %rcx
    00000aaa: 	addsd	%xmm0, %xmm1
    00000aae: 	cmpq	%rdi, %rax
    00000ab1: 	jne	.Ltmp1744 # Offset: 2737
    00000ab3: 	movsd	%xmm1, (%rdx,%r8,8)
    00000ab9: 	addq	$0xc8, %r8
    00000ac0: 	addq	$0x640, %r9
    00000ac7: 	cmpq	$0xea60, %r8
    00000ace: 	jne	.Ltmp1745 # Offset: 2766
    00000ad0: 	addq	$0x8, %r10
    00000ad4: 	addq	$0x8, %rdx
    00000ad8: 	leaq	0x8(%rax), %rdi
    00000adc: 	addq	$0x8, %rsi
    00000ae0: 	addq	$0x1, 0x30(%rsp)
    00000ae6: 	movq	0x30(%rsp), %rcx
    00000aeb: 	cmpq	$0xc8, %rcx
    00000af2: 	jne	.Ltmp1746 # Offset: 2802
    00000af8: 	addq	$0x1, 0x28(%rsp)
    00000afe: 	movq	0x28(%rsp), %rax
    00000b03: 	cmpq	0x50(%rsp), %rax
    00000b08: 	jne	.Ltmp1747 # Offset: 2824
.Ltmp1741:
    00000b0e: 	movq	%r15, %rdi
    00000b11: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 2833
    00000b16: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000b1d: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00000b24: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000b2b: 	je	.Ltmp1748 # Offset: 2859
.Ltmp1956:
    00000b31: 	movq	-0x20(%rax), %rbp
    00000b35: 	callq	clock@PLT # Offset: 2869
    00000b3a: 	pxor	%xmm0, %xmm0
    00000b3e: 	movq	%rax, end_time(%rip)
    00000b45: 	movq	%rbp, %rdi
    00000b48: 	subq	start_time(%rip), %rax
    00000b4f: 	cvtsi2sd	%rax, %xmm0
    00000b54: 	divsd	DATAat0x2da00(%rip), %xmm0
    00000b5c: 	callq	_Z13record_resultdPKc # Offset: 2908
    00000b61: 	movq	%r13, %rax
    00000b64: 	pxor	%xmm0, %xmm0
.Ltmp1750:
    00000b68: 	leaq	0x640(%rax), %rdx
.Ltmp1749:
    00000b6f: 	movsd	(%rax), %xmm1
    00000b73: 	addq	$0x10, %rax
    00000b77: 	addsd	%xmm1, %xmm0
    00000b7b: 	movsd	-0x8(%rax), %xmm1
    00000b80: 	addsd	%xmm1, %xmm0
    00000b84: 	cmpq	%rdx, %rax
    00000b87: 	jne	.Ltmp1749 # Offset: 2951
    00000b89: 	cmpq	0x18(%rsp), %rax
    00000b8e: 	jne	.Ltmp1750 # Offset: 2958
    00000b90: 	movq	%r15, %rdi
    00000b93: 	callq	_Z9check_sumIdEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2963
    00000b98: 	movq	0xe0(%rsp), %rdi
    00000ba0: 	cmpq	0x8(%rsp), %rdi
    00000ba5: 	je	.Ltmp1751 # Offset: 2981
    00000ba7: 	movq	0xf0(%rsp), %rax
    00000baf: 	leaq	0x1(%rax), %rsi
    00000bb3: 	callq	_ZdlPvm@PLT # Offset: 2995
.Ltmp1751:
    00000bb8: 	movq	0x20(%rsp), %rsi
    00000bbd: 	leaq	DATAat0x2d6c5(%rip), %rdx
    00000bc4: 	movq	%r15, %rdi
    00000bc7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3015
    00000bcc: 	callq	clock@PLT # Offset: 3020
    00000bd1: 	movq	iterations(%rip), %r10
    00000bd8: 	xorl	%r12d, %r12d
    00000bdb: 	leaq	0x640(%r14), %rbp
    00000be2: 	movq	%rax, start_time(%rip)
    00000be9: 	testq	%r10, %r10
    00000bec: 	je	.Ltmp1752 # Offset: 3052
.Ltmp1756:
    00000bf2: 	xorl	%esi, %esi
    00000bf4: 	movq	%r13, %rdi
    00000bf7: 	movl	$0x75300, %edx
    00000bfc: 	movq	%r10, 0x28(%rsp)
    00000c01: 	callq	memset@PLT # Offset: 3073
    00000c06: 	movq	0x10(%rsp), %rsi
    00000c0b: 	movq	%rbp, %r9
    00000c0e: 	movq	%r14, %r8
    00000c11: 	movq	0x28(%rsp), %r10
    00000c16: 	xorl	%edi, %edi
.Ltmp1755:
    00000c18: 	movq	%r13, %rdx
    00000c1b: 	movq	%r8, %rcx
.Ltmp1754:
    00000c1e: 	movupd	(%rcx), %xmm1
    00000c22: 	xorl	%eax, %eax
.Ltmp1753:
    00000c24: 	movsd	(%rsi,%rax), %xmm0
    00000c29: 	movupd	(%rdx,%rax), %xmm6
    00000c2e: 	unpcklpd	%xmm0, %xmm0
    00000c32: 	mulpd	%xmm1, %xmm0
    00000c36: 	addpd	%xmm6, %xmm0
    00000c3a: 	movups	%xmm0, (%rdx,%rax)
    00000c3e: 	addq	$0x640, %rax
    00000c44: 	cmpq	$0x75300, %rax
    00000c4a: 	jne	.Ltmp1753 # Offset: 3146
    00000c4c: 	addq	$0x10, %rcx
    00000c50: 	addq	$0x10, %rdx
    00000c54: 	cmpq	%r9, %rcx
    00000c57: 	jne	.Ltmp1754 # Offset: 3159
    00000c59: 	addq	$0x1, %rdi
    00000c5d: 	leaq	0x640(%rcx), %r9
    00000c64: 	addq	$0x640, %r8
    00000c6b: 	addq	$0x8, %rsi
    00000c6f: 	cmpq	$0xc8, %rdi
    00000c76: 	jne	.Ltmp1755 # Offset: 3190
    00000c78: 	addq	$0x1, %r12
    00000c7c: 	cmpq	%r10, %r12
    00000c7f: 	jne	.Ltmp1756 # Offset: 3199
.Ltmp1752:
    00000c85: 	movq	%r15, %rdi
    00000c88: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 3208
    00000c8d: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000c94: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00000c9b: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000ca2: 	je	.Ltmp1757 # Offset: 3234
.Ltmp1955:
    00000ca8: 	movq	-0x20(%rax), %rbp
    00000cac: 	callq	clock@PLT # Offset: 3244
    00000cb1: 	pxor	%xmm0, %xmm0
    00000cb5: 	movq	%rax, end_time(%rip)
    00000cbc: 	movq	%rbp, %rdi
    00000cbf: 	subq	start_time(%rip), %rax
    00000cc6: 	cvtsi2sd	%rax, %xmm0
    00000ccb: 	divsd	DATAat0x2da00(%rip), %xmm0
    00000cd3: 	callq	_Z13record_resultdPKc # Offset: 3283
    00000cd8: 	movq	%r13, %rax
    00000cdb: 	pxor	%xmm0, %xmm0
.Ltmp1759:
    00000cdf: 	leaq	0x640(%rax), %rdx
.Ltmp1758:
    00000ce6: 	movsd	(%rax), %xmm1
    00000cea: 	addq	$0x10, %rax
    00000cee: 	addsd	%xmm1, %xmm0
    00000cf2: 	movsd	-0x8(%rax), %xmm1
    00000cf7: 	addsd	%xmm1, %xmm0
    00000cfb: 	cmpq	%rdx, %rax
    00000cfe: 	jne	.Ltmp1758 # Offset: 3326
    00000d00: 	cmpq	0x18(%rsp), %rax
    00000d05: 	jne	.Ltmp1759 # Offset: 3333
    00000d07: 	movq	%r15, %rdi
    00000d0a: 	callq	_Z9check_sumIdEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3338
    00000d0f: 	movq	0xe0(%rsp), %rdi
    00000d17: 	cmpq	0x8(%rsp), %rdi
    00000d1c: 	je	.Ltmp1760 # Offset: 3356
    00000d1e: 	movq	0xf0(%rsp), %rax
    00000d26: 	leaq	0x1(%rax), %rsi
    00000d2a: 	callq	_ZdlPvm@PLT # Offset: 3370
.Ltmp1760:
    00000d2f: 	movq	0x20(%rsp), %rsi
    00000d34: 	leaq	DATAat0x2d6df(%rip), %rdx
    00000d3b: 	movq	%r15, %rdi
    00000d3e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3390
    00000d43: 	callq	clock@PLT # Offset: 3395
    00000d48: 	movq	iterations(%rip), %r12
    00000d4f: 	xorl	%ebp, %ebp
    00000d51: 	movq	%rax, start_time(%rip)
    00000d58: 	testq	%r12, %r12
    00000d5b: 	je	.Ltmp1761 # Offset: 3419
.Ltmp1765:
    00000d61: 	xorl	%esi, %esi
    00000d63: 	movq	%r13, %rdi
    00000d66: 	movl	$0x75300, %edx
    00000d6b: 	callq	memset@PLT # Offset: 3435
    00000d70: 	movq	0x10(%rsp), %rdi
    00000d75: 	movq	%r14, %rcx
    00000d78: 	xorl	%esi, %esi
.Ltmp1764:
    00000d7a: 	movq	%r13, %rdx
    00000d7d: 	movq	%rdi, %r8
.Ltmp1763:
    00000d80: 	movsd	(%r8), %xmm1
    00000d85: 	xorl	%eax, %eax
    00000d87: 	unpcklpd	%xmm1, %xmm1
.Ltmp1762:
    00000d8b: 	movupd	(%rcx,%rax), %xmm0
    00000d90: 	movupd	(%rdx,%rax), %xmm5
    00000d95: 	mulpd	%xmm1, %xmm0
    00000d99: 	addpd	%xmm5, %xmm0
    00000d9d: 	movups	%xmm0, (%rdx,%rax)
    00000da1: 	addq	$0x10, %rax
    00000da5: 	cmpq	$0x640, %rax
    00000dab: 	jne	.Ltmp1762 # Offset: 3499
    00000dad: 	addq	$0x640, %r8
    00000db4: 	addq	$0x640, %rdx
    00000dbb: 	cmpq	0x18(%rsp), %rdx
    00000dc0: 	jne	.Ltmp1763 # Offset: 3520
    00000dc2: 	addq	$0x1, %rsi
    00000dc6: 	addq	$0x640, %rcx
    00000dcd: 	addq	$0x8, %rdi
    00000dd1: 	cmpq	$0xc8, %rsi
    00000dd8: 	jne	.Ltmp1764 # Offset: 3544
    00000dda: 	addq	$0x1, %rbp
    00000dde: 	cmpq	%r12, %rbp
    00000de1: 	jne	.Ltmp1765 # Offset: 3553
.Ltmp1761:
    00000de7: 	movq	%r15, %rdi
    00000dea: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 3562
    00000def: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000df6: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00000dfd: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000e04: 	je	.Ltmp1766 # Offset: 3588
.Ltmp1954:
    00000e0a: 	movq	-0x20(%rax), %rbp
    00000e0e: 	callq	clock@PLT # Offset: 3598
    00000e13: 	pxor	%xmm0, %xmm0
    00000e17: 	movq	%rax, end_time(%rip)
    00000e1e: 	movq	%rbp, %rdi
    00000e21: 	subq	start_time(%rip), %rax
    00000e28: 	cvtsi2sd	%rax, %xmm0
    00000e2d: 	divsd	DATAat0x2da00(%rip), %xmm0
    00000e35: 	callq	_Z13record_resultdPKc # Offset: 3637
    00000e3a: 	movq	%r13, %rax
    00000e3d: 	pxor	%xmm0, %xmm0
.Ltmp1768:
    00000e41: 	leaq	0x640(%rax), %rdx
.Ltmp1767:
    00000e48: 	movsd	(%rax), %xmm1
    00000e4c: 	addq	$0x10, %rax
    00000e50: 	addsd	%xmm1, %xmm0
    00000e54: 	movsd	-0x8(%rax), %xmm1
    00000e59: 	addsd	%xmm1, %xmm0
    00000e5d: 	cmpq	%rdx, %rax
    00000e60: 	jne	.Ltmp1767 # Offset: 3680
    00000e62: 	cmpq	0x18(%rsp), %rax
    00000e67: 	jne	.Ltmp1768 # Offset: 3687
    00000e69: 	movq	%r15, %rdi
    00000e6c: 	callq	_Z9check_sumIdEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3692
    00000e71: 	movq	0xe0(%rsp), %rdi
    00000e79: 	cmpq	0x8(%rsp), %rdi
    00000e7e: 	je	.Ltmp1769 # Offset: 3710
    00000e80: 	movq	0xf0(%rsp), %rax
    00000e88: 	leaq	0x1(%rax), %rsi
    00000e8c: 	callq	_ZdlPvm@PLT # Offset: 3724
.Ltmp1769:
    00000e91: 	movq	0x20(%rsp), %rsi
    00000e96: 	leaq	DATAat0x2d6f9(%rip), %rdx
    00000e9d: 	movq	%r15, %rdi
    00000ea0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3744
    00000ea5: 	callq	clock@PLT # Offset: 3749
    00000eaa: 	movq	iterations(%rip), %r9
    00000eb1: 	xorl	%r10d, %r10d
    00000eb4: 	leaq	0x4d580(%r14), %r12
    00000ebb: 	movq	%rax, start_time(%rip)
    00000ec2: 	leaq	0x4e200(%r14), %rbp
    00000ec9: 	testq	%r9, %r9
    00000ecc: 	je	.Ltmp1770 # Offset: 3788
    00000ed2: 	movq	%r13, %rdi
    00000ed5: 	movq	%r15, %r8
    00000ed8: 	movq	%r12, %r13
    00000edb: 	movq	%rbp, %r15
    00000ede: 	movq	%rbx, %r12
    00000ee1: 	movq	%r9, %rbp
    00000ee4: 	movq	%r10, %rbx
.Ltmp1776:
    00000ee7: 	movl	$0x75300, %edx
    00000eec: 	xorl	%esi, %esi
    00000eee: 	movq	%r8, 0x28(%rsp)
    00000ef3: 	callq	memset@PLT # Offset: 3827
    00000ef8: 	movq	0x10(%rsp), %rcx
    00000efd: 	movq	0x28(%rsp), %r8
    00000f02: 	movq	%rax, %rdi
    00000f05: 	movq	%rax, %rdx
.Ltmp1775:
    00000f08: 	movq	%r14, %r9
    00000f0b: 	xorl	%esi, %esi
.Ltmp1772:
    00000f0d: 	movsd	(%rcx,%rsi,8), %xmm3
    00000f12: 	movsd	0x8(%rcx,%rsi,8), %xmm2
    00000f18: 	leaq	0x640(%r9), %r10
    00000f1f: 	xorl	%eax, %eax
    00000f21: 	unpcklpd	%xmm3, %xmm3
    00000f25: 	unpcklpd	%xmm2, %xmm2
.Ltmp1771:
    00000f29: 	movupd	(%r9,%rax), %xmm0
    00000f2f: 	movupd	(%r10,%rax), %xmm1
    00000f35: 	movupd	(%rdx,%rax), %xmm7
    00000f3a: 	mulpd	%xmm3, %xmm0
    00000f3e: 	mulpd	%xmm2, %xmm1
    00000f42: 	addpd	%xmm7, %xmm0
    00000f46: 	addpd	%xmm1, %xmm0
    00000f4a: 	movups	%xmm0, (%rdx,%rax)
    00000f4e: 	addq	$0x10, %rax
    00000f52: 	cmpq	$0x640, %rax
    00000f58: 	jne	.Ltmp1771 # Offset: 3928
    00000f5a: 	addq	$0x2, %rsi
    00000f5e: 	addq	$0xc80, %r9
    00000f65: 	cmpq	$0xc6, %rsi
    00000f6c: 	jne	.Ltmp1772 # Offset: 3948
    00000f6e: 	leaq	0x630(%rcx), %r9
    00000f75: 	movq	%r13, %rsi
.Ltmp1774:
    00000f78: 	movsd	(%r9), %xmm1
    00000f7d: 	xorl	%eax, %eax
    00000f7f: 	unpcklpd	%xmm1, %xmm1
.Ltmp1773:
    00000f83: 	movupd	(%rsi,%rax), %xmm0
    00000f88: 	movupd	(%rdx,%rax), %xmm6
    00000f8d: 	mulpd	%xmm1, %xmm0
    00000f91: 	addpd	%xmm6, %xmm0
    00000f95: 	movups	%xmm0, (%rdx,%rax)
    00000f99: 	addq	$0x10, %rax
    00000f9d: 	cmpq	$0x640, %rax
    00000fa3: 	jne	.Ltmp1773 # Offset: 4003
    00000fa5: 	addq	$0x640, %rsi
    00000fac: 	addq	$0x8, %r9
    00000fb0: 	cmpq	%r15, %rsi
    00000fb3: 	jne	.Ltmp1774 # Offset: 4019
    00000fb5: 	addq	$0x640, %rcx
    00000fbc: 	addq	$0x640, %rdx
    00000fc3: 	cmpq	%rcx, %r12
    00000fc6: 	jne	.Ltmp1775 # Offset: 4038
    00000fcc: 	addq	$0x1, %rbx
    00000fd0: 	cmpq	%rbp, %rbx
    00000fd3: 	jne	.Ltmp1776 # Offset: 4051
    00000fd9: 	movq	%rdi, %r13
    00000fdc: 	movq	%r12, %rbx
    00000fdf: 	movq	%r8, %r15
.Ltmp1770:
    00000fe2: 	movq	%r15, %rdi
    00000fe5: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 4069
    00000fea: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000ff1: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00000ff8: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000fff: 	je	.Ltmp1777 # Offset: 4095
.Ltmp1953:
    00001005: 	movq	-0x20(%rax), %rbp
    00001009: 	callq	clock@PLT # Offset: 4105
    0000100e: 	pxor	%xmm0, %xmm0
    00001012: 	movq	%rax, end_time(%rip)
    00001019: 	movq	%rbp, %rdi
    0000101c: 	subq	start_time(%rip), %rax
    00001023: 	cvtsi2sd	%rax, %xmm0
    00001028: 	divsd	DATAat0x2da00(%rip), %xmm0
    00001030: 	callq	_Z13record_resultdPKc # Offset: 4144
    00001035: 	movq	%r13, %rax
    00001038: 	pxor	%xmm0, %xmm0
.Ltmp1779:
    0000103c: 	leaq	0x640(%rax), %rdx
.Ltmp1778:
    00001043: 	movsd	(%rax), %xmm1
    00001047: 	addq	$0x10, %rax
    0000104b: 	addsd	%xmm1, %xmm0
    0000104f: 	movsd	-0x8(%rax), %xmm1
    00001054: 	addsd	%xmm1, %xmm0
    00001058: 	cmpq	%rdx, %rax
    0000105b: 	jne	.Ltmp1778 # Offset: 4187
    0000105d: 	cmpq	0x18(%rsp), %rax
    00001062: 	jne	.Ltmp1779 # Offset: 4194
    00001064: 	movq	%r15, %rdi
    00001067: 	callq	_Z9check_sumIdEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4199
    0000106c: 	movq	0xe0(%rsp), %rdi
    00001074: 	cmpq	0x8(%rsp), %rdi
    00001079: 	je	.Ltmp1780 # Offset: 4217
    0000107b: 	movq	0xf0(%rsp), %rax
    00001083: 	leaq	0x1(%rax), %rsi
    00001087: 	callq	_ZdlPvm@PLT # Offset: 4231
.Ltmp1780:
    0000108c: 	movq	0x20(%rsp), %rsi
    00001091: 	leaq	DATAat0x2d713(%rip), %rdx
    00001098: 	movq	%r15, %rdi
    0000109b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4251
    000010a0: 	callq	clock@PLT # Offset: 4256
    000010a5: 	movq	iterations(%rip), %r10
    000010ac: 	xorl	%r12d, %r12d
    000010af: 	leaq	0x4e200(%r14), %rbp
    000010b6: 	movq	%rax, start_time(%rip)
    000010bd: 	testq	%r10, %r10
    000010c0: 	je	.Ltmp1781 # Offset: 4288
    000010c6: 	movq	%r13, %r8
    000010c9: 	movq	%rbp, %r13
    000010cc: 	movq	%rbx, %rbp
    000010cf: 	movq	%r10, %rbx
.Ltmp1785:
    000010d2: 	movq	%r8, %rdi
    000010d5: 	xorl	%esi, %esi
    000010d7: 	movl	$0x75300, %edx
    000010dc: 	callq	memset@PLT # Offset: 4316
    000010e1: 	movq	0x10(%rsp), %rdi
    000010e6: 	movq	%rax, %r8
    000010e9: 	movq	%rax, %rsi
.Ltmp1784:
    000010ec: 	movq	%r13, %r10
    000010ef: 	movq	%r14, %r9
    000010f2: 	xorl	%ecx, %ecx
.Ltmp1783:
    000010f4: 	movq	%rdi, %rdx
    000010f7: 	movq	%r9, %rax
    000010fa: 	pxor	%xmm1, %xmm1
.Ltmp1782:
    000010fe: 	movsd	(%rdx), %xmm0
    00001102: 	movupd	(%rax), %xmm7
    00001106: 	addq	$0x640, %rax
    0000110c: 	addq	$0x8, %rdx
    00001110: 	unpcklpd	%xmm0, %xmm0
    00001114: 	mulpd	%xmm7, %xmm0
    00001118: 	addpd	%xmm0, %xmm1
    0000111c: 	cmpq	%r10, %rax
    0000111f: 	jne	.Ltmp1782 # Offset: 4383
    00001121: 	movupd	(%rsi,%rcx), %xmm0
    00001126: 	addq	$0x10, %r9
    0000112a: 	leaq	0x10(%rax), %r10
    0000112e: 	addpd	%xmm1, %xmm0
    00001132: 	movups	%xmm0, (%rsi,%rcx)
    00001136: 	addq	$0x10, %rcx
    0000113a: 	cmpq	$0x640, %rcx
    00001141: 	jne	.Ltmp1783 # Offset: 4417
    00001143: 	addq	$0x640, %rdi
    0000114a: 	addq	$0x640, %rsi
    00001151: 	cmpq	%rdi, %rbp
    00001154: 	jne	.Ltmp1784 # Offset: 4436
    00001156: 	addq	$0x1, %r12
    0000115a: 	cmpq	%rbx, %r12
    0000115d: 	jne	.Ltmp1785 # Offset: 4445
    00001163: 	movq	%r8, %r13
    00001166: 	movq	%rbp, %rbx
.Ltmp1781:
    00001169: 	movq	%r15, %rdi
    0000116c: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 4460
    00001171: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001178: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    0000117f: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001186: 	je	.Ltmp1786 # Offset: 4486
.Ltmp1952:
    0000118c: 	movq	-0x20(%rax), %rbp
    00001190: 	callq	clock@PLT # Offset: 4496
    00001195: 	pxor	%xmm0, %xmm0
    00001199: 	movq	%rax, end_time(%rip)
    000011a0: 	movq	%rbp, %rdi
    000011a3: 	subq	start_time(%rip), %rax
    000011aa: 	cvtsi2sd	%rax, %xmm0
    000011af: 	divsd	DATAat0x2da00(%rip), %xmm0
    000011b7: 	callq	_Z13record_resultdPKc # Offset: 4535
    000011bc: 	movq	%r13, %rax
    000011bf: 	pxor	%xmm0, %xmm0
.Ltmp1788:
    000011c3: 	leaq	0x640(%rax), %rdx
.Ltmp1787:
    000011ca: 	movsd	(%rax), %xmm1
    000011ce: 	addq	$0x10, %rax
    000011d2: 	addsd	%xmm1, %xmm0
    000011d6: 	movsd	-0x8(%rax), %xmm1
    000011db: 	addsd	%xmm1, %xmm0
    000011df: 	cmpq	%rdx, %rax
    000011e2: 	jne	.Ltmp1787 # Offset: 4578
    000011e4: 	cmpq	0x18(%rsp), %rax
    000011e9: 	jne	.Ltmp1788 # Offset: 4585
    000011eb: 	movq	%r15, %rdi
    000011ee: 	callq	_Z9check_sumIdEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4590
    000011f3: 	movq	0xe0(%rsp), %rdi
    000011fb: 	cmpq	0x8(%rsp), %rdi
    00001200: 	je	.Ltmp1789 # Offset: 4608
    00001202: 	movq	0xf0(%rsp), %rax
    0000120a: 	leaq	0x1(%rax), %rsi
    0000120e: 	callq	_ZdlPvm@PLT # Offset: 4622
.Ltmp1789:
    00001213: 	movq	0x20(%rsp), %rsi
    00001218: 	leaq	DATAat0x2d72d(%rip), %rdx
    0000121f: 	movq	%r15, %rdi
    00001222: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4642
    00001227: 	callq	clock@PLT # Offset: 4647
    0000122c: 	movq	iterations(%rip), %r11
    00001233: 	xorl	%r12d, %r12d
    00001236: 	leaq	0x4e200(%r14), %rbp
    0000123d: 	movq	%rax, start_time(%rip)
    00001244: 	testq	%r11, %r11
    00001247: 	je	.Ltmp1790 # Offset: 4679
    0000124d: 	movq	%r13, %r8
    00001250: 	movq	%rbp, %r13
    00001253: 	movq	%rbx, %rbp
    00001256: 	movq	%r11, %rbx
.Ltmp1794:
    00001259: 	movq	%r8, %rdi
    0000125c: 	movl	$0x75300, %edx
    00001261: 	xorl	%esi, %esi
    00001263: 	callq	memset@PLT # Offset: 4707
    00001268: 	movq	%r13, %rcx
    0000126b: 	movq	%r14, %r10
    0000126e: 	xorl	%r9d, %r9d
    00001271: 	movq	%rax, %r8
    00001274: 	movq	%rax, %r11
.Ltmp1793:
    00001277: 	movq	0x10(%rsp), %rdi
    0000127c: 	movq	%r11, %rsi
.Ltmp1792:
    0000127f: 	movq	%rdi, %rdx
    00001282: 	movq	%r10, %rax
    00001285: 	pxor	%xmm1, %xmm1
.Ltmp1791:
    00001289: 	movsd	(%rax), %xmm0
    0000128d: 	movupd	(%rdx), %xmm7
    00001291: 	addq	$0xc80, %rax
    00001297: 	addq	$0x10, %rdx
    0000129b: 	movhpd	-0x640(%rax), %xmm0
    000012a3: 	mulpd	%xmm7, %xmm0
    000012a7: 	addsd	%xmm0, %xmm1
    000012ab: 	unpckhpd	%xmm0, %xmm0
    000012af: 	addsd	%xmm0, %xmm1
    000012b3: 	cmpq	%rcx, %rax
    000012b6: 	jne	.Ltmp1791 # Offset: 4790
    000012b8: 	addsd	(%rsi), %xmm1
    000012bc: 	addq	$0x640, %rdi
    000012c3: 	addq	$0x640, %rsi
    000012ca: 	movsd	%xmm1, -0x640(%rsi)
    000012d2: 	cmpq	%rdi, %rbp
    000012d5: 	jne	.Ltmp1792 # Offset: 4821
    000012d7: 	addq	$0x1, %r9
    000012db: 	addq	$0x8, %r10
    000012df: 	leaq	0x8(%rax), %rcx
    000012e3: 	addq	$0x8, %r11
    000012e7: 	cmpq	$0xc8, %r9
    000012ee: 	jne	.Ltmp1793 # Offset: 4846
    000012f0: 	addq	$0x1, %r12
    000012f4: 	cmpq	%rbx, %r12
    000012f7: 	jne	.Ltmp1794 # Offset: 4855
    000012fd: 	movq	%r8, %r13
.Ltmp1790:
    00001300: 	movq	%r15, %rdi
    00001303: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 4867
    00001308: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000130f: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00001316: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000131d: 	je	.Ltmp1795 # Offset: 4893
.Ltmp1951:
    00001323: 	movq	-0x20(%rax), %rbp
    00001327: 	callq	clock@PLT # Offset: 4903
    0000132c: 	pxor	%xmm0, %xmm0
    00001330: 	movq	%rax, end_time(%rip)
    00001337: 	movq	%rbp, %rdi
    0000133a: 	subq	start_time(%rip), %rax
    00001341: 	cvtsi2sd	%rax, %xmm0
    00001346: 	divsd	DATAat0x2da00(%rip), %xmm0
    0000134e: 	callq	_Z13record_resultdPKc # Offset: 4942
    00001353: 	movq	%r13, %rax
    00001356: 	pxor	%xmm0, %xmm0
.Ltmp1797:
    0000135a: 	leaq	0x640(%rax), %rdx
.Ltmp1796:
    00001361: 	movsd	(%rax), %xmm1
    00001365: 	addq	$0x10, %rax
    00001369: 	addsd	%xmm1, %xmm0
    0000136d: 	movsd	-0x8(%rax), %xmm1
    00001372: 	addsd	%xmm1, %xmm0
    00001376: 	cmpq	%rdx, %rax
    00001379: 	jne	.Ltmp1796 # Offset: 4985
    0000137b: 	cmpq	0x18(%rsp), %rax
    00001380: 	jne	.Ltmp1797 # Offset: 4992
    00001382: 	movq	%r15, %rdi
    00001385: 	callq	_Z9check_sumIdEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4997
    0000138a: 	movq	0xe0(%rsp), %rdi
    00001392: 	cmpq	0x8(%rsp), %rdi
    00001397: 	je	.Ltmp1798 # Offset: 5015
    00001399: 	movq	0xf0(%rsp), %rax
    000013a1: 	leaq	0x1(%rax), %rsi
    000013a5: 	callq	_ZdlPvm@PLT # Offset: 5029
.Ltmp1798:
    000013aa: 	movq	0x20(%rsp), %rsi
    000013af: 	leaq	DATAat0x2d747(%rip), %rdx
    000013b6: 	movq	%r15, %rdi
    000013b9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5049
    000013be: 	callq	clock@PLT # Offset: 5054
    000013c3: 	movq	%rax, start_time(%rip)
    000013ca: 	movq	iterations(%rip), %rax
    000013d1: 	movq	%rax, 0x30(%rsp)
    000013d6: 	testq	%rax, %rax
    000013d9: 	je	.Ltmp1799 # Offset: 5081
    000013df: 	leaq	0x74680(%r13), %rax
    000013e6: 	leaq	0x4d580(%r14), %r12
    000013ed: 	movq	$0x0, 0x28(%rsp)
    000013f6: 	movq	%rax, 0x38(%rsp)
    000013fb: 	movq	0x10(%rsp), %rax
    00001400: 	leaq	0x4e200(%r14), %rbp
    00001407: 	addq	$0x630, %rax
    0000140d: 	movq	%rax, 0x40(%rsp)
.Ltmp1805:
    00001412: 	movl	$0x75300, %edx
    00001417: 	xorl	%esi, %esi
    00001419: 	movq	%r13, %rdi
    0000141c: 	callq	memset@PLT # Offset: 5148
    00001421: 	movq	0x38(%rsp), %rsi
    00001426: 	movq	%r12, %r11
    00001429: 	movq	%rbp, %rdi
    0000142c: 	movq	%r13, %rdx
    0000142f: 	xorl	%r10d, %r10d
.Ltmp1804:
    00001432: 	movq	0x10(%rsp), %rcx
    00001437: 	leaq	-0x4e200(%rdi), %r8
    0000143e: 	xorl	%ebx, %ebx
.Ltmp1801:
    00001440: 	movsd	(%r8), %xmm0
    00001445: 	movq	%rcx, %r9
    00001448: 	movq	%rdx, %rax
    0000144b: 	movsd	0x640(%r8), %xmm3
    00001454: 	movapd	%xmm0, %xmm5
    00001458: 	movapd	%xmm3, %xmm4
    0000145c: 	unpcklpd	%xmm5, %xmm5
    00001460: 	unpcklpd	%xmm4, %xmm4
.Ltmp1800:
    00001464: 	movupd	(%r9), %xmm2
    00001469: 	movupd	(%rax), %xmm1
    0000146d: 	addq	$0xc80, %rax
    00001473: 	addq	$0xc80, %r9
    0000147a: 	movhpd	-0x640(%r9), %xmm2
    00001483: 	movhpd	-0x640(%rax), %xmm1
    0000148b: 	mulpd	%xmm5, %xmm2
    0000148f: 	addpd	%xmm2, %xmm1
    00001493: 	movupd	-0x640(%r9), %xmm2
    0000149c: 	movlpd	-0xc78(%r9), %xmm2
    000014a5: 	mulpd	%xmm4, %xmm2
    000014a9: 	movhps	%xmm1, -0x640(%rax)
    000014b0: 	movq	%xmm1, -0xc80(%rax)
    000014b8: 	movupd	-0xc80(%rax), %xmm1
    000014c0: 	movhpd	-0x640(%rax), %xmm1
    000014c8: 	addpd	%xmm2, %xmm1
    000014cc: 	movq	%xmm1, -0xc80(%rax)
    000014d4: 	movhps	%xmm1, -0x640(%rax)
    000014db: 	cmpq	%rsi, %rax
    000014de: 	jne	.Ltmp1800 # Offset: 5342
    000014e0: 	movsd	0x74688(%rcx), %xmm2
    000014e8: 	addq	$0x2, %rbx
    000014ec: 	addq	$0x10, %rcx
    000014f0: 	movsd	0x74670(%rcx), %xmm1
    000014f8: 	addq	$0xc80, %r8
    000014ff: 	mulsd	%xmm3, %xmm2
    00001503: 	mulsd	%xmm0, %xmm1
    00001507: 	addsd	(%rsi), %xmm1
    0000150b: 	mulsd	0x74cb8(%rcx), %xmm3
    00001513: 	mulsd	0x74cb0(%rcx), %xmm0
    0000151b: 	addsd	%xmm2, %xmm1
    0000151f: 	movsd	%xmm1, (%rsi)
    00001523: 	addsd	0x74cc0(%rdx), %xmm0
    0000152b: 	addsd	%xmm3, %xmm0
    0000152f: 	movsd	%xmm0, 0x74cc0(%rdx)
    00001537: 	cmpq	$0xc6, %rbx
    0000153e: 	jne	.Ltmp1801 # Offset: 5438
    00001544: 	movq	0x40(%rsp), %r9
    00001549: 	xorl	%r8d, %r8d
.Ltmp1803:
    0000154c: 	movsd	(%rdx,%r8,8), %xmm1
    00001552: 	movq	%r9, %rcx
    00001555: 	movq	%r11, %rax
.Ltmp1802:
    00001558: 	movsd	(%rcx), %xmm0
    0000155c: 	mulsd	(%rax), %xmm0
    00001560: 	addq	$0x640, %rax
    00001566: 	addq	$0x8, %rcx
    0000156a: 	addsd	%xmm0, %xmm1
    0000156e: 	cmpq	%rdi, %rax
    00001571: 	jne	.Ltmp1802 # Offset: 5489
    00001573: 	movsd	%xmm1, (%rdx,%r8,8)
    00001579: 	addq	$0xc8, %r8
    00001580: 	addq	$0x640, %r9
    00001587: 	cmpq	$0xea60, %r8
    0000158e: 	jne	.Ltmp1803 # Offset: 5518
    00001590: 	addq	$0x1, %r10
    00001594: 	addq	$0x8, %r11
    00001598: 	addq	$0x8, %rdx
    0000159c: 	addq	$0x8, %rsi
    000015a0: 	leaq	0x8(%rax), %rdi
    000015a4: 	cmpq	$0xc8, %r10
    000015ab: 	jne	.Ltmp1804 # Offset: 5547
    000015b1: 	addq	$0x1, 0x28(%rsp)
    000015b7: 	movq	0x28(%rsp), %rax
    000015bc: 	cmpq	0x30(%rsp), %rax
    000015c1: 	jne	.Ltmp1805 # Offset: 5569
.Ltmp1799:
    000015c7: 	movq	%r15, %rdi
    000015ca: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 5578
    000015cf: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000015d6: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    000015dd: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000015e4: 	je	.Ltmp1806 # Offset: 5604
.Ltmp1950:
    000015ea: 	movq	-0x20(%rax), %rbp
    000015ee: 	callq	clock@PLT # Offset: 5614
    000015f3: 	pxor	%xmm0, %xmm0
    000015f7: 	movq	%rax, end_time(%rip)
    000015fe: 	movq	%rbp, %rdi
    00001601: 	subq	start_time(%rip), %rax
    00001608: 	cvtsi2sd	%rax, %xmm0
    0000160d: 	divsd	DATAat0x2da00(%rip), %xmm0
    00001615: 	callq	_Z13record_resultdPKc # Offset: 5653
    0000161a: 	movq	%r13, %rax
    0000161d: 	pxor	%xmm0, %xmm0
.Ltmp1809:
    00001621: 	leaq	0x640(%rax), %rdx
.Ltmp1807:
    00001628: 	movsd	(%rax), %xmm1
    0000162c: 	addq	$0x10, %rax
    00001630: 	addsd	%xmm1, %xmm0
    00001634: 	movsd	-0x8(%rax), %xmm1
    00001639: 	addsd	%xmm1, %xmm0
    0000163d: 	cmpq	%rax, %rdx
    00001640: 	jne	.Ltmp1807 # Offset: 5696
    00001642: 	cmpq	0x18(%rsp), %rdx
    00001647: 	je	.Ltmp1808 # Offset: 5703
    00001649: 	movq	%rdx, %rax
    0000164c: 	jmp	.Ltmp1809 # Offset: 5708
.Ltmp1808:
    0000164e: 	movq	%r15, %rdi
    00001651: 	callq	_Z9check_sumIdEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5713
    00001656: 	movq	0xe0(%rsp), %rdi
    0000165e: 	cmpq	0x8(%rsp), %rdi
    00001663: 	je	.Ltmp1810 # Offset: 5731
    00001665: 	movq	0xf0(%rsp), %rax
    0000166d: 	leaq	0x1(%rax), %rsi
    00001671: 	callq	_ZdlPvm@PLT # Offset: 5745
.Ltmp1810:
    00001676: 	movq	0x20(%rsp), %rsi
    0000167b: 	leaq	DATAat0x2d761(%rip), %rdx
    00001682: 	movq	%r15, %rdi
    00001685: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5765
    0000168a: 	callq	clock@PLT # Offset: 5770
    0000168f: 	movq	iterations(%rip), %rbp
    00001696: 	movq	%rax, start_time(%rip)
    0000169d: 	testq	%rbp, %rbp
    000016a0: 	je	.Ltmp1811 # Offset: 5792
    000016a2: 	xorl	%ebx, %ebx
.Ltmp1812:
    000016a4: 	movl	$0x75300, %edx
    000016a9: 	xorl	%esi, %esi
    000016ab: 	movq	%r13, %rdi
    000016ae: 	addq	$0x1, %rbx
    000016b2: 	callq	memset@PLT # Offset: 5810
    000016b7: 	movq	0x10(%rsp), %rdi
    000016bc: 	movq	%r13, %rdx
    000016bf: 	movq	%r14, %rsi
    000016c2: 	movl	$0xc8, %r8d
    000016c8: 	movl	$0x12c, %ecx
    000016cd: 	callq	"_ZN19matmul_KJI_unrolledIdEclEPKdS2_Pdmm.isra.0/1" # Offset: 5837
    000016d2: 	cmpq	%rbp, %rbx
    000016d5: 	jne	.Ltmp1812 # Offset: 5845
.Ltmp1811:
    000016d7: 	movq	%r15, %rdi
    000016da: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 5850
    000016df: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000016e6: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    000016ed: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000016f4: 	je	.Ltmp1813 # Offset: 5876
.Ltmp1949:
    000016fa: 	movq	-0x20(%rax), %rbp
    000016fe: 	callq	clock@PLT # Offset: 5886
    00001703: 	pxor	%xmm0, %xmm0
    00001707: 	movq	%rax, end_time(%rip)
    0000170e: 	movq	%rbp, %rdi
    00001711: 	subq	start_time(%rip), %rax
    00001718: 	cvtsi2sd	%rax, %xmm0
    0000171d: 	divsd	DATAat0x2da00(%rip), %xmm0
    00001725: 	callq	_Z13record_resultdPKc # Offset: 5925
    0000172a: 	movq	%r13, %rax
    0000172d: 	pxor	%xmm0, %xmm0
.Ltmp1815:
    00001731: 	leaq	0x640(%rax), %rdx
.Ltmp1814:
    00001738: 	movsd	(%rax), %xmm1
    0000173c: 	addq	$0x10, %rax
    00001740: 	addsd	%xmm1, %xmm0
    00001744: 	movsd	-0x8(%rax), %xmm1
    00001749: 	addsd	%xmm1, %xmm0
    0000174d: 	cmpq	%rdx, %rax
    00001750: 	jne	.Ltmp1814 # Offset: 5968
    00001752: 	cmpq	0x18(%rsp), %rax
    00001757: 	jne	.Ltmp1815 # Offset: 5975
    00001759: 	movq	%r15, %rdi
    0000175c: 	callq	_Z9check_sumIdEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5980
    00001761: 	movq	0xe0(%rsp), %rdi
    00001769: 	cmpq	0x8(%rsp), %rdi
    0000176e: 	je	.Ltmp1816 # Offset: 5998
    00001770: 	movq	0xf0(%rsp), %rax
    00001778: 	leaq	0x1(%rax), %rsi
    0000177c: 	callq	_ZdlPvm@PLT # Offset: 6012
.Ltmp1816:
    00001781: 	movq	0x20(%rsp), %rsi
    00001786: 	leaq	DATAat0x2d77f(%rip), %rdx
    0000178d: 	movq	%r15, %rdi
    00001790: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6032
    00001795: 	callq	clock@PLT # Offset: 6037
    0000179a: 	movq	iterations(%rip), %rbp
    000017a1: 	movq	%rax, start_time(%rip)
    000017a8: 	testq	%rbp, %rbp
    000017ab: 	je	.Ltmp1817 # Offset: 6059
    000017ad: 	xorl	%ebx, %ebx
.Ltmp1818:
    000017af: 	movl	$0x75300, %edx
    000017b4: 	xorl	%esi, %esi
    000017b6: 	movq	%r13, %rdi
    000017b9: 	addq	$0x1, %rbx
    000017bd: 	callq	memset@PLT # Offset: 6077
    000017c2: 	movq	0x10(%rsp), %rdi
    000017c7: 	movq	%r13, %rdx
    000017ca: 	movq	%r14, %rsi
    000017cd: 	movl	$0xc8, %r8d
    000017d3: 	movl	$0x12c, %ecx
    000017d8: 	callq	"_ZN19matmul_JKI_unrolledIdEclEPKdS2_Pdmm.isra.0/1" # Offset: 6104
    000017dd: 	cmpq	%rbp, %rbx
    000017e0: 	jne	.Ltmp1818 # Offset: 6112
.Ltmp1817:
    000017e2: 	movq	%r15, %rdi
    000017e5: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 6117
    000017ea: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000017f1: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    000017f8: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000017ff: 	je	.Ltmp1819 # Offset: 6143
.Ltmp1948:
    00001805: 	movq	-0x20(%rax), %rbp
    00001809: 	callq	clock@PLT # Offset: 6153
    0000180e: 	pxor	%xmm0, %xmm0
    00001812: 	movq	%rax, end_time(%rip)
    00001819: 	movq	%rbp, %rdi
    0000181c: 	subq	start_time(%rip), %rax
    00001823: 	cvtsi2sd	%rax, %xmm0
    00001828: 	divsd	DATAat0x2da00(%rip), %xmm0
    00001830: 	callq	_Z13record_resultdPKc # Offset: 6192
    00001835: 	movq	%r13, %rax
    00001838: 	pxor	%xmm0, %xmm0
.Ltmp1821:
    0000183c: 	leaq	0x640(%rax), %rdx
.Ltmp1820:
    00001843: 	movsd	(%rax), %xmm1
    00001847: 	addq	$0x10, %rax
    0000184b: 	addsd	%xmm1, %xmm0
    0000184f: 	movsd	-0x8(%rax), %xmm1
    00001854: 	addsd	%xmm1, %xmm0
    00001858: 	cmpq	%rdx, %rax
    0000185b: 	jne	.Ltmp1820 # Offset: 6235
    0000185d: 	cmpq	0x18(%rsp), %rax
    00001862: 	jne	.Ltmp1821 # Offset: 6242
    00001864: 	movq	%r15, %rdi
    00001867: 	callq	_Z9check_sumIdEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6247
    0000186c: 	movq	0xe0(%rsp), %rdi
    00001874: 	cmpq	0x8(%rsp), %rdi
    00001879: 	je	.Ltmp1822 # Offset: 6265
    0000187b: 	movq	0xf0(%rsp), %rax
    00001883: 	leaq	0x1(%rax), %rsi
    00001887: 	callq	_ZdlPvm@PLT # Offset: 6279
.Ltmp1822:
    0000188c: 	movq	0x20(%rsp), %rsi
    00001891: 	leaq	DATAat0x2d79d(%rip), %rdx
    00001898: 	movq	%r15, %rdi
    0000189b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6299
    000018a0: 	callq	clock@PLT # Offset: 6304
    000018a5: 	movq	$0x0, 0x30(%rsp)
    000018ae: 	movq	%rax, start_time(%rip)
    000018b5: 	movq	iterations(%rip), %rax
    000018bc: 	movq	%rax, 0x60(%rsp)
    000018c1: 	testq	%rax, %rax
    000018c4: 	je	.Ltmp1823 # Offset: 6340
    000018ca: 	movq	%r15, 0x78(%rsp)
    000018cf: 	movq	%r13, %r15
.Ltmp1832:
    000018d2: 	movq	%r15, %rdi
    000018d5: 	movl	$0x75300, %edx
    000018da: 	xorl	%esi, %esi
    000018dc: 	xorl	%r13d, %r13d
    000018df: 	callq	memset@PLT # Offset: 6367
    000018e4: 	movq	%r15, 0x58(%rsp)
    000018e9: 	movq	%r14, %r15
    000018ec: 	movq	%r13, %r14
.Ltmp1831:
    000018ef: 	movq	%r14, %rcx
    000018f2: 	movl	$0xc8, %eax
    000018f7: 	movq	%r14, 0x38(%rsp)
    000018fc: 	subq	$-0x80, %r14
    00001900: 	cmpq	%rax, %r14
    00001903: 	movq	%r14, 0x80(%rsp)
    0000190b: 	cmovbeq	%r14, %rax
    0000190f: 	xorl	%r13d, %r13d
    00001912: 	movq	%rax, 0x28(%rsp)
    00001917: 	leaq	(%r15,%rcx,8), %rax
    0000191b: 	movq	%rax, 0x40(%rsp)
.Ltmp1830:
    00001920: 	movl	$0xc8, %r8d
    00001926: 	movq	%r13, %rsi
    00001929: 	subq	$-0x80, %r13
    0000192d: 	movq	0x38(%rsp), %rcx
    00001932: 	cmpq	%r8, %r13
    00001935: 	cmovbeq	%r13, %r8
    00001939: 	cmpq	%rcx, 0x28(%rsp)
    0000193e: 	jbe	.Ltmp1824 # Offset: 6462
    00001944: 	movq	0x10(%rsp), %rax
    00001949: 	movq	%r8, %rdi
    0000194c: 	movq	0x58(%rsp), %rdx
    00001951: 	subq	%rsi, %rdi
    00001954: 	leaq	(%rax,%rsi,8), %r9
    00001958: 	movq	%rdi, %rbp
    0000195b: 	movq	%rdi, %rax
    0000195e: 	shrq	%rax
    00001961: 	andq	$-0x2, %rbp
    00001965: 	shlq	$0x4, %rax
    00001969: 	leaq	(%rbp,%rsi), %rbx
    0000196e: 	cmpq	$0x1, %rdi
    00001972: 	cmoveq	%rsi, %rbx
    00001976: 	movq	%rax, 0x68(%rsp)
    0000197b: 	xorl	%r14d, %r14d
    0000197e: 	leaq	(%rbx,%rbx,4), %rax
    00001982: 	leaq	(%rax,%rax,4), %rax
    00001986: 	shlq	$0x3, %rax
    0000198a: 	movq	%rax, 0x50(%rsp)
.Ltmp1829:
    0000198f: 	movq	0x68(%rsp), %rax
    00001994: 	movq	0x10(%rsp), %rcx
    00001999: 	addq	%r9, %rax
    0000199c: 	movq	%rax, 0x70(%rsp)
    000019a1: 	leaq	(%rbx,%r14), %rax
    000019a5: 	leaq	(%rcx,%rax,8), %r12
    000019a9: 	movq	0x40(%rsp), %rcx
    000019ae: 	movq	0x38(%rsp), %rax
    000019b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1828:
    000019b8: 	pxor	%xmm0, %xmm0
    000019bc: 	cmpq	%rsi, %r8
    000019bf: 	jbe	.Ltmp1825 # Offset: 6591
    000019c1: 	cmpq	$0x1, %rdi
    000019c5: 	je	.Ltmp1826 # Offset: 6597
    000019cb: 	movq	%rcx, %r11
    000019ce: 	movq	%r9, %r10
    000019d1: 	pxor	%xmm0, %xmm0
.Ltmp1827:
    000019d5: 	movsd	(%r11), %xmm2
    000019da: 	movupd	(%r10), %xmm4
    000019df: 	addq	$0xc80, %r11
    000019e6: 	addq	$0x10, %r10
    000019ea: 	movhpd	-0x640(%r11), %xmm2
    000019f3: 	mulpd	%xmm4, %xmm2
    000019f7: 	addsd	%xmm2, %xmm0
    000019fb: 	unpckhpd	%xmm2, %xmm2
    000019ff: 	addsd	%xmm2, %xmm0
    00001a03: 	cmpq	0x70(%rsp), %r10
    00001a08: 	jne	.Ltmp1827 # Offset: 6664
    00001a0a: 	cmpq	%rdi, %rbp
    00001a0d: 	je	.Ltmp1825 # Offset: 6669
.Ltmp1865:
    00001a0f: 	movq	0x50(%rsp), %r11
    00001a14: 	leaq	(%r11,%rax), %r10
    00001a18: 	movsd	(%r15,%r10,8), %xmm1
    00001a1e: 	mulsd	(%r12), %xmm1
    00001a24: 	addsd	%xmm1, %xmm0
.Ltmp1825:
    00001a28: 	addsd	(%rdx,%rax,8), %xmm0
    00001a2d: 	addq	$0x8, %rcx
    00001a31: 	movsd	%xmm0, (%rdx,%rax,8)
    00001a36: 	addq	$0x1, %rax
    00001a3a: 	cmpq	%rax, 0x28(%rsp)
    00001a3f: 	jne	.Ltmp1828 # Offset: 6719
    00001a45: 	addq	$0xc8, %r14
    00001a4c: 	addq	$0x640, %rdx
    00001a53: 	addq	$0x640, %r9
    00001a5a: 	cmpq	0x18(%rsp), %rdx
    00001a5f: 	jne	.Ltmp1829 # Offset: 6751
.Ltmp1824:
    00001a65: 	addq	$0x32000, 0x40(%rsp)
    00001a6e: 	cmpq	$0x100, %r13
    00001a75: 	jne	.Ltmp1830 # Offset: 6773
    00001a7b: 	movq	0x80(%rsp), %r14
    00001a83: 	cmpq	$0x100, %r14
    00001a8a: 	jne	.Ltmp1831 # Offset: 6794
    00001a90: 	addq	$0x1, 0x30(%rsp)
    00001a96: 	movq	%r15, %r14
    00001a99: 	movq	0x30(%rsp), %rax
    00001a9e: 	movq	0x58(%rsp), %r15
    00001aa3: 	cmpq	0x60(%rsp), %rax
    00001aa8: 	jne	.Ltmp1832 # Offset: 6824
    00001aae: 	movq	%r15, %r13
    00001ab1: 	movq	0x78(%rsp), %r15
.Ltmp1823:
    00001ab6: 	movq	%r15, %rdi
    00001ab9: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 6841
    00001abe: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001ac5: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00001acc: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001ad3: 	je	.Ltmp1833 # Offset: 6867
.Ltmp1947:
    00001ad9: 	movq	-0x20(%rax), %rbp
    00001add: 	callq	clock@PLT # Offset: 6877
    00001ae2: 	pxor	%xmm0, %xmm0
    00001ae6: 	movq	%rax, end_time(%rip)
    00001aed: 	movq	%rbp, %rdi
    00001af0: 	subq	start_time(%rip), %rax
    00001af7: 	cvtsi2sd	%rax, %xmm0
    00001afc: 	divsd	DATAat0x2da00(%rip), %xmm0
    00001b04: 	callq	_Z13record_resultdPKc # Offset: 6916
    00001b09: 	movq	%r13, %rax
    00001b0c: 	pxor	%xmm0, %xmm0
.Ltmp1835:
    00001b10: 	leaq	0x640(%rax), %rdx
.Ltmp1834:
    00001b17: 	movsd	(%rax), %xmm1
    00001b1b: 	addq	$0x10, %rax
    00001b1f: 	addsd	%xmm1, %xmm0
    00001b23: 	movsd	-0x8(%rax), %xmm1
    00001b28: 	addsd	%xmm1, %xmm0
    00001b2c: 	cmpq	%rdx, %rax
    00001b2f: 	jne	.Ltmp1834 # Offset: 6959
    00001b31: 	cmpq	0x18(%rsp), %rax
    00001b36: 	jne	.Ltmp1835 # Offset: 6966
    00001b38: 	movq	%r15, %rdi
    00001b3b: 	callq	_Z9check_sumIdEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6971
    00001b40: 	movq	0xe0(%rsp), %rdi
    00001b48: 	cmpq	0x8(%rsp), %rdi
    00001b4d: 	je	.Ltmp1836 # Offset: 6989
    00001b4f: 	movq	0xf0(%rsp), %rax
    00001b57: 	leaq	0x1(%rax), %rsi
    00001b5b: 	callq	_ZdlPvm@PLT # Offset: 7003
.Ltmp1836:
    00001b60: 	movq	0x20(%rsp), %rsi
    00001b65: 	leaq	DATAat0x2d7ba(%rip), %rdx
    00001b6c: 	movq	%r15, %rdi
    00001b6f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7023
    00001b74: 	callq	clock@PLT # Offset: 7028
    00001b79: 	xorl	%r12d, %r12d
    00001b7c: 	movq	%rax, start_time(%rip)
    00001b83: 	movq	iterations(%rip), %rax
    00001b8a: 	movq	%rax, 0x30(%rsp)
    00001b8f: 	testq	%rax, %rax
    00001b92: 	je	.Ltmp1837 # Offset: 7058
    00001b98: 	movq	%r15, 0x38(%rsp)
.Ltmp1846:
    00001b9d: 	movl	$0x75300, %edx
    00001ba2: 	xorl	%esi, %esi
    00001ba4: 	movq	%r13, %rdi
    00001ba7: 	movq	%r14, %rbx
    00001baa: 	callq	memset@PLT # Offset: 7082
    00001baf: 	movl	$0x1, %r9d
    00001bb5: 	xorl	%ecx, %ecx
.Ltmp1845:
    00001bb7: 	movl	$0xc8, %eax
    00001bbc: 	movq	%rcx, %rbp
    00001bbf: 	subq	$-0x80, %rcx
    00001bc3: 	cmpq	%rax, %rcx
    00001bc6: 	cmovbeq	%rcx, %rax
    00001bca: 	cmpq	%rbp, %rax
    00001bcd: 	jbe	.Ltmp1838 # Offset: 7117
    00001bd3: 	leaq	-0x1(%rax), %rsi
    00001bd7: 	movq	0x10(%rsp), %rdi
    00001bdc: 	xorl	%r11d, %r11d
    00001bdf: 	movq	%rsi, 0x28(%rsp)
    00001be4: 	movq	%r13, %rsi
.Ltmp1844:
    00001be7: 	movq	%rbx, %r10
    00001bea: 	movq	%r9, %r8
    00001bed: 	movq	%rbp, %rdx
    00001bf0: 	cmpq	%r9, 0x28(%rsp)
    00001bf5: 	jbe	.Ltmp1839 # Offset: 7157
.Ltmp1841:
    00001bf7: 	movsd	-0x8(%rdi,%r8,8), %xmm3
    00001bfe: 	movsd	(%rdi,%r8,8), %xmm2
    00001c04: 	leaq	0x640(%r10), %r15
    00001c0b: 	xorl	%edx, %edx
    00001c0d: 	unpcklpd	%xmm3, %xmm3
    00001c11: 	unpcklpd	%xmm2, %xmm2
.Ltmp1840:
    00001c15: 	movupd	(%r10,%rdx), %xmm0
    00001c1b: 	movupd	(%r15,%rdx), %xmm1
    00001c21: 	movupd	(%rsi,%rdx), %xmm6
    00001c26: 	mulpd	%xmm3, %xmm0
    00001c2a: 	mulpd	%xmm2, %xmm1
    00001c2e: 	addpd	%xmm6, %xmm0
    00001c32: 	addpd	%xmm1, %xmm0
    00001c36: 	movups	%xmm0, (%rsi,%rdx)
    00001c3a: 	addq	$0x10, %rdx
    00001c3e: 	cmpq	$0x640, %rdx
    00001c45: 	jne	.Ltmp1840 # Offset: 7237
    00001c47: 	leaq	0x1(%r8), %rdx
    00001c4b: 	addq	$0xc80, %r10
    00001c52: 	addq	$0x2, %r8
    00001c56: 	cmpq	0x28(%rsp), %r8
    00001c5b: 	jb	.Ltmp1841 # Offset: 7259
.Ltmp1839:
    00001c5d: 	leaq	(%rdx,%rdx,4), %r8
    00001c61: 	leaq	(%r8,%r8,4), %r8
    00001c65: 	shlq	$0x6, %r8
    00001c69: 	addq	%r14, %r8
    00001c6c: 	nopl	(%rax) # Size: 4
.Ltmp1843:
    00001c70: 	movsd	(%rdi,%rdx,8), %xmm1
    00001c75: 	xorl	%r10d, %r10d
    00001c78: 	unpcklpd	%xmm1, %xmm1
.Ltmp1842:
    00001c7c: 	movupd	(%r8,%r10), %xmm0
    00001c82: 	movupd	(%rsi,%r10), %xmm5
    00001c88: 	mulpd	%xmm1, %xmm0
    00001c8c: 	addpd	%xmm5, %xmm0
    00001c90: 	movups	%xmm0, (%rsi,%r10)
    00001c95: 	addq	$0x10, %r10
    00001c99: 	cmpq	$0x640, %r10
    00001ca0: 	jne	.Ltmp1842 # Offset: 7328
    00001ca2: 	addq	$0x1, %rdx
    00001ca6: 	addq	$0x640, %r8
    00001cad: 	cmpq	%rdx, %rax
    00001cb0: 	ja	.Ltmp1843 # Offset: 7344
    00001cb2: 	addq	$0xc8, %r11
    00001cb9: 	addq	$0x640, %rsi
    00001cc0: 	addq	$0x640, %rdi
    00001cc7: 	cmpq	$0xea60, %r11
    00001cce: 	jne	.Ltmp1844 # Offset: 7374
.Ltmp1838:
    00001cd4: 	subq	$-0x80, %r9
    00001cd8: 	addq	$0x32000, %rbx
    00001cdf: 	cmpq	$0x100, %rcx
    00001ce6: 	jne	.Ltmp1845 # Offset: 7398
    00001cec: 	addq	$0x1, %r12
    00001cf0: 	cmpq	0x30(%rsp), %r12
    00001cf5: 	jne	.Ltmp1846 # Offset: 7413
    00001cfb: 	movq	0x38(%rsp), %r15
.Ltmp1837:
    00001d00: 	movq	%r15, %rdi
    00001d03: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 7427
    00001d08: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001d0f: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00001d16: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001d1d: 	je	.Ltmp1847 # Offset: 7453
.Ltmp1946:
    00001d23: 	movq	-0x20(%rax), %rbp
    00001d27: 	callq	clock@PLT # Offset: 7463
    00001d2c: 	pxor	%xmm0, %xmm0
    00001d30: 	movq	%rax, end_time(%rip)
    00001d37: 	movq	%rbp, %rdi
    00001d3a: 	subq	start_time(%rip), %rax
    00001d41: 	cvtsi2sd	%rax, %xmm0
    00001d46: 	divsd	DATAat0x2da00(%rip), %xmm0
    00001d4e: 	callq	_Z13record_resultdPKc # Offset: 7502
    00001d53: 	movq	%r13, %rax
    00001d56: 	pxor	%xmm0, %xmm0
.Ltmp1849:
    00001d5a: 	leaq	0x640(%rax), %rdx
.Ltmp1848:
    00001d61: 	movsd	(%rax), %xmm1
    00001d65: 	addq	$0x10, %rax
    00001d69: 	addsd	%xmm1, %xmm0
    00001d6d: 	movsd	-0x8(%rax), %xmm1
    00001d72: 	addsd	%xmm1, %xmm0
    00001d76: 	cmpq	%rdx, %rax
    00001d79: 	jne	.Ltmp1848 # Offset: 7545
    00001d7b: 	cmpq	0x18(%rsp), %rax
    00001d80: 	jne	.Ltmp1849 # Offset: 7552
    00001d82: 	movq	%r15, %rdi
    00001d85: 	callq	_Z9check_sumIdEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7557
    00001d8a: 	movq	0xe0(%rsp), %rdi
    00001d92: 	cmpq	0x8(%rsp), %rdi
    00001d97: 	je	.Ltmp1850 # Offset: 7575
    00001d99: 	movq	0xf0(%rsp), %rax
    00001da1: 	leaq	0x1(%rax), %rsi
    00001da5: 	callq	_ZdlPvm@PLT # Offset: 7589
.Ltmp1850:
    00001daa: 	movq	0x20(%rsp), %rsi
    00001daf: 	leaq	DATAat0x2d7d7(%rip), %rdx
    00001db6: 	movq	%r15, %rdi
    00001db9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7609
    00001dbe: 	callq	clock@PLT # Offset: 7614
    00001dc3: 	movq	$0x0, 0x28(%rsp)
    00001dcc: 	movq	%rax, start_time(%rip)
    00001dd3: 	movq	iterations(%rip), %rax
    00001dda: 	movq	%rax, 0x78(%rsp)
    00001ddf: 	testq	%rax, %rax
    00001de2: 	je	.Ltmp1851 # Offset: 7650
    00001de8: 	movq	%r14, 0x40(%rsp)
    00001ded: 	movq	%r15, 0x88(%rsp)
    00001df5: 	movq	%r13, %r15
.Ltmp1860:
    00001df8: 	movq	%r15, %rdi
    00001dfb: 	movl	$0x75300, %edx
    00001e00: 	xorl	%esi, %esi
    00001e02: 	xorl	%r14d, %r14d
    00001e05: 	callq	memset@PLT # Offset: 7685
    00001e0a: 	movq	%r15, 0x60(%rsp)
    00001e0f: 	movq	%r14, %r15
    00001e12: 	movq	$0x0, 0x30(%rsp)
.Ltmp1859:
    00001e1b: 	movl	$0x12c, %eax
    00001e20: 	movq	%r15, 0x70(%rsp)
    00001e25: 	subq	$-0x80, %r15
    00001e29: 	movq	0x10(%rsp), %rcx
    00001e2e: 	cmpq	%rax, %r15
    00001e31: 	movq	0x30(%rsp), %rbx
    00001e36: 	movq	$0x0, 0x58(%rsp)
    00001e3f: 	cmovbeq	%r15, %rax
    00001e43: 	movq	%r15, 0x90(%rsp)
    00001e4b: 	xorl	%r14d, %r14d
    00001e4e: 	leaq	(%rcx,%rbx,8), %rcx
    00001e52: 	movq	%rax, 0x68(%rsp)
    00001e57: 	leaq	(%rax,%rax,4), %rax
    00001e5b: 	leaq	(%rax,%rax,4), %rax
    00001e5f: 	movq	%rcx, 0x50(%rsp)
    00001e64: 	shlq	$0x3, %rax
    00001e68: 	movq	%rax, 0x38(%rsp)
.Ltmp1858:
    00001e6d: 	movl	$0xc8, %edi
    00001e72: 	movq	%r14, %r9
    00001e75: 	subq	$-0x80, %r14
    00001e79: 	movq	0x70(%rsp), %rcx
    00001e7e: 	cmpq	%rdi, %r14
    00001e81: 	cmovbeq	%r14, %rdi
    00001e85: 	cmpq	%rcx, 0x68(%rsp)
    00001e8a: 	jbe	.Ltmp1852 # Offset: 7818
    00001e90: 	movq	0x40(%rsp), %rax
    00001e95: 	movq	0x58(%rsp), %rcx
    00001e9a: 	movq	%rdi, %rsi
    00001e9d: 	movq	%r14, 0x98(%rsp)
    00001ea5: 	subq	%r9, %rsi
    00001ea8: 	leaq	(%rax,%rcx,8), %rbx
    00001eac: 	movq	%rsi, %r12
    00001eaf: 	movq	%rsi, %rax
    00001eb2: 	movq	0x60(%rsp), %rcx
    00001eb7: 	shrq	%rax
    00001eba: 	andq	$-0x2, %r12
    00001ebe: 	shlq	$0x4, %rax
    00001ec2: 	leaq	(%r9,%r12), %r8
    00001ec6: 	cmpq	$0x1, %rsi
    00001eca: 	cmoveq	%r9, %r8
    00001ece: 	movq	%rax, %r15
    00001ed1: 	xorl	%ebp, %ebp
    00001ed3: 	leaq	(%r8,%r8,4), %rax
    00001ed7: 	leaq	(%rax,%rax,4), %rax
    00001edb: 	shlq	$0x3, %rax
    00001edf: 	movq	%rax, 0x80(%rsp)
.Ltmp1857:
    00001ee7: 	movq	0x80(%rsp), %rax
    00001eef: 	movq	0x40(%rsp), %rdx
    00001ef4: 	addq	%rbp, %rax
    00001ef7: 	leaq	(%rdx,%rax,8), %r14
    00001efb: 	movq	0x50(%rsp), %rdx
    00001f00: 	movq	0x30(%rsp), %rax
    00001f05: 	nopl	(%rax) # Size: 3
.Ltmp1856:
    00001f08: 	pxor	%xmm0, %xmm0
    00001f0c: 	cmpq	%r9, %rdi
    00001f0f: 	jbe	.Ltmp1853 # Offset: 7951
    00001f11: 	cmpq	$0x1, %rsi
    00001f15: 	je	.Ltmp1854 # Offset: 7957
    00001f1b: 	leaq	(%r15,%rdx), %r13
    00001f1f: 	movq	%rbx, %r11
    00001f22: 	pxor	%xmm0, %xmm0
    00001f26: 	movq	%rdx, %r10
.Ltmp1855:
    00001f29: 	movsd	(%r11), %xmm2
    00001f2e: 	movupd	(%r10), %xmm7
    00001f33: 	addq	$0x10, %r10
    00001f37: 	addq	$0xc80, %r11
    00001f3e: 	movhpd	-0x640(%r11), %xmm2
    00001f47: 	mulpd	%xmm7, %xmm2
    00001f4b: 	addsd	%xmm2, %xmm0
    00001f4f: 	unpckhpd	%xmm2, %xmm2
    00001f53: 	addsd	%xmm2, %xmm0
    00001f57: 	cmpq	%r13, %r10
    00001f5a: 	jne	.Ltmp1855 # Offset: 8026
    00001f5c: 	cmpq	%rsi, %r12
    00001f5f: 	je	.Ltmp1853 # Offset: 8031
.Ltmp1866:
    00001f61: 	movq	0x10(%rsp), %r11
    00001f66: 	leaq	(%r8,%rax), %r10
    00001f6a: 	movsd	(%r11,%r10,8), %xmm1
    00001f70: 	mulsd	(%r14), %xmm1
    00001f75: 	addsd	%xmm1, %xmm0
.Ltmp1853:
    00001f79: 	addsd	(%rcx,%rax,8), %xmm0
    00001f7e: 	addq	$0x640, %rdx
    00001f85: 	movsd	%xmm0, (%rcx,%rax,8)
    00001f8a: 	addq	$0xc8, %rax
    00001f90: 	cmpq	0x38(%rsp), %rax
    00001f95: 	jne	.Ltmp1856 # Offset: 8085
    00001f9b: 	addq	$0x1, %rbp
    00001f9f: 	addq	$0x8, %rcx
    00001fa3: 	addq	$0x8, %rbx
    00001fa7: 	cmpq	$0xc8, %rbp
    00001fae: 	jne	.Ltmp1857 # Offset: 8110
    00001fb4: 	movq	0x98(%rsp), %r14
.Ltmp1852:
    00001fbc: 	addq	$0x400, 0x50(%rsp)
    00001fc5: 	addq	$0x6400, 0x58(%rsp)
    00001fce: 	cmpq	$0x100, %r14
    00001fd5: 	jne	.Ltmp1858 # Offset: 8149
    00001fdb: 	movq	0x90(%rsp), %r15
    00001fe3: 	addq	$0x6400, 0x30(%rsp)
    00001fec: 	cmpq	$0x180, %r15
    00001ff3: 	jne	.Ltmp1859 # Offset: 8179
    00001ff9: 	addq	$0x1, 0x28(%rsp)
    00001fff: 	movq	0x60(%rsp), %r15
    00002004: 	movq	0x28(%rsp), %rax
    00002009: 	cmpq	0x78(%rsp), %rax
    0000200e: 	jne	.Ltmp1860 # Offset: 8206
    00002014: 	movq	%r15, %r13
    00002017: 	movq	0x40(%rsp), %r14
    0000201c: 	movq	0x88(%rsp), %r15
.Ltmp1851:
    00002024: 	movq	%r15, %rdi
    00002027: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 8231
    0000202c: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002033: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    0000203a: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00002041: 	je	.Ltmp1861 # Offset: 8257
.Ltmp1945:
    00002047: 	movq	-0x20(%rax), %rbp
    0000204b: 	callq	clock@PLT # Offset: 8267
    00002050: 	pxor	%xmm0, %xmm0
    00002054: 	movq	%rax, end_time(%rip)
    0000205b: 	movq	%rbp, %rdi
    0000205e: 	subq	start_time(%rip), %rax
    00002065: 	cvtsi2sd	%rax, %xmm0
    0000206a: 	divsd	DATAat0x2da00(%rip), %xmm0
    00002072: 	callq	_Z13record_resultdPKc # Offset: 8306
    00002077: 	movq	%r13, %rax
    0000207a: 	pxor	%xmm0, %xmm0
.Ltmp1864:
    0000207e: 	leaq	0x640(%rax), %rdx
.Ltmp1862:
    00002085: 	movsd	(%rax), %xmm1
    00002089: 	addq	$0x10, %rax
    0000208d: 	addsd	%xmm1, %xmm0
    00002091: 	movsd	-0x8(%rax), %xmm1
    00002096: 	addsd	%xmm1, %xmm0
    0000209a: 	cmpq	%rax, %rdx
    0000209d: 	jne	.Ltmp1862 # Offset: 8349
    0000209f: 	cmpq	0x18(%rsp), %rdx
    000020a4: 	je	.Ltmp1863 # Offset: 8356
    000020a6: 	movq	%rdx, %rax
    000020a9: 	jmp	.Ltmp1864 # Offset: 8361
.Ltmp1826:
    000020ab: 	pxor	%xmm0, %xmm0
    000020af: 	jmp	.Ltmp1865 # Offset: 8367
.Ltmp1854:
    000020b4: 	pxor	%xmm0, %xmm0
    000020b8: 	jmp	.Ltmp1866 # Offset: 8376
.Ltmp1863:
    000020bd: 	movq	%r15, %rdi
    000020c0: 	callq	_Z9check_sumIdEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 8384
    000020c5: 	movq	0xe0(%rsp), %rdi
    000020cd: 	cmpq	0x8(%rsp), %rdi
    000020d2: 	je	.Ltmp1867 # Offset: 8402
    000020d4: 	movq	0xf0(%rsp), %rax
    000020dc: 	leaq	0x1(%rax), %rsi
    000020e0: 	callq	_ZdlPvm@PLT # Offset: 8416
.Ltmp1867:
    000020e5: 	movq	0x20(%rsp), %rsi
    000020ea: 	leaq	DATAat0x2d808(%rip), %rdx
    000020f1: 	movq	%r15, %rdi
    000020f4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8436
    000020f9: 	callq	clock@PLT # Offset: 8441
    000020fe: 	movq	iterations(%rip), %rbp
    00002105: 	movq	%rax, start_time(%rip)
    0000210c: 	testq	%rbp, %rbp
    0000210f: 	je	.Ltmp1868 # Offset: 8463
    00002111: 	xorl	%ebx, %ebx
.Ltmp1869:
    00002113: 	movl	$0x75300, %edx
    00002118: 	xorl	%esi, %esi
    0000211a: 	movq	%r13, %rdi
    0000211d: 	addq	$0x1, %rbx
    00002121: 	callq	memset@PLT # Offset: 8481
    00002126: 	movq	0x10(%rsp), %rdi
    0000212b: 	movq	%r13, %rdx
    0000212e: 	movq	%r14, %rsi
    00002131: 	movl	$0xc8, %r8d
    00002137: 	movl	$0x12c, %ecx
    0000213c: 	callq	"_ZN28matmul_JIK_blocked_unrolled1IdEclEPKdS2_Pdmm.isra.0/1" # Offset: 8508
    00002141: 	cmpq	%rbp, %rbx
    00002144: 	jne	.Ltmp1869 # Offset: 8516
.Ltmp1868:
    00002146: 	movq	%r15, %rdi
    00002149: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 8521
    0000214e: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002155: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    0000215c: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00002163: 	je	.Ltmp1870 # Offset: 8547
.Ltmp1944:
    00002169: 	movq	-0x20(%rax), %rbp
    0000216d: 	callq	clock@PLT # Offset: 8557
    00002172: 	pxor	%xmm0, %xmm0
    00002176: 	movq	%rax, end_time(%rip)
    0000217d: 	movq	%rbp, %rdi
    00002180: 	subq	start_time(%rip), %rax
    00002187: 	cvtsi2sd	%rax, %xmm0
    0000218c: 	divsd	DATAat0x2da00(%rip), %xmm0
    00002194: 	callq	_Z13record_resultdPKc # Offset: 8596
    00002199: 	movq	%r13, %rax
    0000219c: 	pxor	%xmm0, %xmm0
.Ltmp1872:
    000021a0: 	leaq	0x640(%rax), %rdx
.Ltmp1871:
    000021a7: 	movsd	(%rax), %xmm1
    000021ab: 	addq	$0x10, %rax
    000021af: 	addsd	%xmm1, %xmm0
    000021b3: 	movsd	-0x8(%rax), %xmm1
    000021b8: 	addsd	%xmm1, %xmm0
    000021bc: 	cmpq	%rdx, %rax
    000021bf: 	jne	.Ltmp1871 # Offset: 8639
    000021c1: 	cmpq	0x18(%rsp), %rax
    000021c6: 	jne	.Ltmp1872 # Offset: 8646
    000021c8: 	movq	%r15, %rdi
    000021cb: 	callq	_Z9check_sumIdEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 8651
    000021d0: 	movq	0xe0(%rsp), %rdi
    000021d8: 	cmpq	0x8(%rsp), %rdi
    000021dd: 	je	.Ltmp1873 # Offset: 8669
    000021df: 	movq	0xf0(%rsp), %rax
    000021e7: 	leaq	0x1(%rax), %rsi
    000021eb: 	callq	_ZdlPvm@PLT # Offset: 8683
.Ltmp1873:
    000021f0: 	movq	0x20(%rsp), %rsi
    000021f5: 	leaq	DATAat0x2d830(%rip), %rdx
    000021fc: 	movq	%r15, %rdi
    000021ff: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8703
    00002204: 	callq	clock@PLT # Offset: 8708
    00002209: 	movq	iterations(%rip), %rbp
    00002210: 	movq	%rax, start_time(%rip)
    00002217: 	testq	%rbp, %rbp
    0000221a: 	je	.Ltmp1874 # Offset: 8730
    0000221c: 	xorl	%ebx, %ebx
.Ltmp1875:
    0000221e: 	movl	$0x75300, %edx
    00002223: 	xorl	%esi, %esi
    00002225: 	movq	%r13, %rdi
    00002228: 	addq	$0x1, %rbx
    0000222c: 	callq	memset@PLT # Offset: 8748
    00002231: 	movq	0x10(%rsp), %rdi
    00002236: 	movq	%r13, %rdx
    00002239: 	movq	%r14, %rsi
    0000223c: 	movl	$0xc8, %r8d
    00002242: 	movl	$0x12c, %ecx
    00002247: 	callq	"_ZN28matmul_JIK_blocked_unrolled2IdEclEPKdS2_Pdmm.isra.0/1" # Offset: 8775
    0000224c: 	cmpq	%rbp, %rbx
    0000224f: 	jne	.Ltmp1875 # Offset: 8783
.Ltmp1874:
    00002251: 	movq	%r15, %rdi
    00002254: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 8788
    00002259: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002260: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00002267: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000226e: 	je	.Ltmp1876 # Offset: 8814
.Ltmp1943:
    00002274: 	movq	-0x20(%rax), %rbp
    00002278: 	callq	clock@PLT # Offset: 8824
    0000227d: 	pxor	%xmm0, %xmm0
    00002281: 	movq	%rax, end_time(%rip)
    00002288: 	movq	%rbp, %rdi
    0000228b: 	subq	start_time(%rip), %rax
    00002292: 	cvtsi2sd	%rax, %xmm0
    00002297: 	divsd	DATAat0x2da00(%rip), %xmm0
    0000229f: 	callq	_Z13record_resultdPKc # Offset: 8863
    000022a4: 	movq	%r13, %rax
    000022a7: 	pxor	%xmm0, %xmm0
.Ltmp1879:
    000022ab: 	leaq	0x640(%rax), %rdx
.Ltmp1877:
    000022b2: 	movsd	(%rax), %xmm1
    000022b6: 	addq	$0x10, %rax
    000022ba: 	addsd	%xmm1, %xmm0
    000022be: 	movsd	-0x8(%rax), %xmm1
    000022c3: 	addsd	%xmm1, %xmm0
    000022c7: 	cmpq	%rax, %rdx
    000022ca: 	jne	.Ltmp1877 # Offset: 8906
    000022cc: 	cmpq	0x18(%rsp), %rdx
    000022d1: 	je	.Ltmp1878 # Offset: 8913
    000022d3: 	movq	%rdx, %rax
    000022d6: 	jmp	.Ltmp1879 # Offset: 8918
.Ltmp1878:
    000022d8: 	movq	%r15, %rdi
    000022db: 	callq	_Z9check_sumIdEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 8923
    000022e0: 	movq	0xe0(%rsp), %rdi
    000022e8: 	cmpq	0x8(%rsp), %rdi
    000022ed: 	je	.Ltmp1880 # Offset: 8941
    000022ef: 	movq	0xf0(%rsp), %rax
    000022f7: 	leaq	0x1(%rax), %rsi
    000022fb: 	callq	_ZdlPvm@PLT # Offset: 8955
.Ltmp1880:
    00002300: 	movq	0x20(%rsp), %rsi
    00002305: 	leaq	DATAat0x2d858(%rip), %rdx
    0000230c: 	movq	%r15, %rdi
    0000230f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8975
    00002314: 	callq	clock@PLT # Offset: 8980
    00002319: 	movq	iterations(%rip), %rbp
    00002320: 	movq	%rax, start_time(%rip)
    00002327: 	testq	%rbp, %rbp
    0000232a: 	je	.Ltmp1881 # Offset: 9002
    0000232c: 	xorl	%ebx, %ebx
.Ltmp1882:
    0000232e: 	movl	$0x75300, %edx
    00002333: 	xorl	%esi, %esi
    00002335: 	movq	%r13, %rdi
    00002338: 	addq	$0x1, %rbx
    0000233c: 	callq	memset@PLT # Offset: 9020
    00002341: 	movq	0x10(%rsp), %rdi
    00002346: 	movq	%r13, %rdx
    00002349: 	movq	%r14, %rsi
    0000234c: 	movl	$0xc8, %r8d
    00002352: 	movl	$0x12c, %ecx
    00002357: 	callq	"_ZN28matmul_JIK_blocked_unrolled3IdEclEPKdS2_Pdmm.isra.0/1" # Offset: 9047
    0000235c: 	cmpq	%rbp, %rbx
    0000235f: 	jne	.Ltmp1882 # Offset: 9055
.Ltmp1881:
    00002361: 	movq	%r15, %rdi
    00002364: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 9060
    00002369: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002370: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00002377: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000237e: 	je	.Ltmp1883 # Offset: 9086
.Ltmp1942:
    00002384: 	movq	-0x20(%rax), %rbp
    00002388: 	callq	clock@PLT # Offset: 9096
    0000238d: 	pxor	%xmm0, %xmm0
    00002391: 	movq	%rax, end_time(%rip)
    00002398: 	movq	%rbp, %rdi
    0000239b: 	subq	start_time(%rip), %rax
    000023a2: 	cvtsi2sd	%rax, %xmm0
    000023a7: 	divsd	DATAat0x2da00(%rip), %xmm0
    000023af: 	callq	_Z13record_resultdPKc # Offset: 9135
    000023b4: 	movq	%r13, %rax
    000023b7: 	pxor	%xmm0, %xmm0
.Ltmp1885:
    000023bb: 	leaq	0x640(%rax), %rdx
.Ltmp1884:
    000023c2: 	movsd	(%rax), %xmm1
    000023c6: 	addq	$0x10, %rax
    000023ca: 	addsd	%xmm1, %xmm0
    000023ce: 	movsd	-0x8(%rax), %xmm1
    000023d3: 	addsd	%xmm1, %xmm0
    000023d7: 	cmpq	%rdx, %rax
    000023da: 	jne	.Ltmp1884 # Offset: 9178
    000023dc: 	cmpq	0x18(%rsp), %rax
    000023e1: 	jne	.Ltmp1885 # Offset: 9185
    000023e3: 	movq	%r15, %rdi
    000023e6: 	callq	_Z9check_sumIdEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9190
    000023eb: 	movq	0xe0(%rsp), %rdi
    000023f3: 	cmpq	0x8(%rsp), %rdi
    000023f8: 	je	.Ltmp1886 # Offset: 9208
    000023fa: 	movq	0xf0(%rsp), %rax
    00002402: 	leaq	0x1(%rax), %rsi
    00002406: 	callq	_ZdlPvm@PLT # Offset: 9222
.Ltmp1886:
    0000240b: 	movq	0x20(%rsp), %rsi
    00002410: 	leaq	DATAat0x2d880(%rip), %rdx
    00002417: 	movq	%r15, %rdi
    0000241a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9242
    0000241f: 	callq	clock@PLT # Offset: 9247
    00002424: 	movq	iterations(%rip), %rbp
    0000242b: 	movq	%rax, start_time(%rip)
    00002432: 	testq	%rbp, %rbp
    00002435: 	je	.Ltmp1887 # Offset: 9269
    00002437: 	xorl	%ebx, %ebx
.Ltmp1888:
    00002439: 	movl	$0x75300, %edx
    0000243e: 	xorl	%esi, %esi
    00002440: 	movq	%r13, %rdi
    00002443: 	addq	$0x1, %rbx
    00002447: 	callq	memset@PLT # Offset: 9287
    0000244c: 	movq	0x10(%rsp), %rdi
    00002451: 	movq	%r13, %rdx
    00002454: 	movq	%r14, %rsi
    00002457: 	movl	$0xc8, %r8d
    0000245d: 	movl	$0x12c, %ecx
    00002462: 	callq	"_ZN28matmul_IJK_blocked_unrolled1IdEclEPKdS2_Pdmm.isra.0/1" # Offset: 9314
    00002467: 	cmpq	%rbp, %rbx
    0000246a: 	jne	.Ltmp1888 # Offset: 9322
.Ltmp1887:
    0000246c: 	movq	%r15, %rdi
    0000246f: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 9327
    00002474: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000247b: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00002482: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00002489: 	je	.Ltmp1889 # Offset: 9353
.Ltmp1941:
    0000248f: 	movq	-0x20(%rax), %rbp
    00002493: 	callq	clock@PLT # Offset: 9363
    00002498: 	pxor	%xmm0, %xmm0
    0000249c: 	movq	%rax, end_time(%rip)
    000024a3: 	movq	%rbp, %rdi
    000024a6: 	subq	start_time(%rip), %rax
    000024ad: 	cvtsi2sd	%rax, %xmm0
    000024b2: 	divsd	DATAat0x2da00(%rip), %xmm0
    000024ba: 	callq	_Z13record_resultdPKc # Offset: 9402
    000024bf: 	movq	%r13, %rax
    000024c2: 	pxor	%xmm0, %xmm0
.Ltmp1892:
    000024c6: 	leaq	0x640(%rax), %rdx
.Ltmp1890:
    000024cd: 	movsd	(%rax), %xmm1
    000024d1: 	addq	$0x10, %rax
    000024d5: 	addsd	%xmm1, %xmm0
    000024d9: 	movsd	-0x8(%rax), %xmm1
    000024de: 	addsd	%xmm1, %xmm0
    000024e2: 	cmpq	%rax, %rdx
    000024e5: 	jne	.Ltmp1890 # Offset: 9445
    000024e7: 	cmpq	0x18(%rsp), %rdx
    000024ec: 	je	.Ltmp1891 # Offset: 9452
    000024ee: 	movq	%rdx, %rax
    000024f1: 	jmp	.Ltmp1892 # Offset: 9457
.Ltmp1891:
    000024f3: 	movq	%r15, %rdi
    000024f6: 	callq	_Z9check_sumIdEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9462
    000024fb: 	movq	0xe0(%rsp), %rdi
    00002503: 	cmpq	0x8(%rsp), %rdi
    00002508: 	je	.Ltmp1893 # Offset: 9480
    0000250a: 	movq	0xf0(%rsp), %rax
    00002512: 	leaq	0x1(%rax), %rsi
    00002516: 	callq	_ZdlPvm@PLT # Offset: 9494
.Ltmp1893:
    0000251b: 	movq	0x20(%rsp), %rsi
    00002520: 	leaq	DATAat0x2d8a8(%rip), %rdx
    00002527: 	movq	%r15, %rdi
    0000252a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9514
    0000252f: 	callq	clock@PLT # Offset: 9519
    00002534: 	movq	iterations(%rip), %rbp
    0000253b: 	movq	%rax, start_time(%rip)
    00002542: 	testq	%rbp, %rbp
    00002545: 	je	.Ltmp1894 # Offset: 9541
    00002547: 	xorl	%ebx, %ebx
.Ltmp1895:
    00002549: 	movl	$0x75300, %edx
    0000254e: 	xorl	%esi, %esi
    00002550: 	movq	%r13, %rdi
    00002553: 	addq	$0x1, %rbx
    00002557: 	callq	memset@PLT # Offset: 9559
    0000255c: 	movq	0x10(%rsp), %rdi
    00002561: 	movq	%r13, %rdx
    00002564: 	movq	%r14, %rsi
    00002567: 	movl	$0xc8, %r8d
    0000256d: 	movl	$0x12c, %ecx
    00002572: 	callq	"_ZN28matmul_IJK_blocked_unrolled2IdEclEPKdS2_Pdmm.isra.0/1" # Offset: 9586
    00002577: 	cmpq	%rbp, %rbx
    0000257a: 	jne	.Ltmp1895 # Offset: 9594
.Ltmp1894:
    0000257c: 	movq	%r15, %rdi
    0000257f: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 9599
    00002584: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000258b: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00002592: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00002599: 	je	.Ltmp1896 # Offset: 9625
.Ltmp1940:
    0000259f: 	movq	-0x20(%rax), %rbp
    000025a3: 	callq	clock@PLT # Offset: 9635
    000025a8: 	pxor	%xmm0, %xmm0
    000025ac: 	movq	%rax, end_time(%rip)
    000025b3: 	movq	%rbp, %rdi
    000025b6: 	subq	start_time(%rip), %rax
    000025bd: 	cvtsi2sd	%rax, %xmm0
    000025c2: 	divsd	DATAat0x2da00(%rip), %xmm0
    000025ca: 	callq	_Z13record_resultdPKc # Offset: 9674
    000025cf: 	movq	%r13, %rax
    000025d2: 	pxor	%xmm0, %xmm0
.Ltmp1898:
    000025d6: 	leaq	0x640(%rax), %rdx
.Ltmp1897:
    000025dd: 	movsd	(%rax), %xmm1
    000025e1: 	addq	$0x10, %rax
    000025e5: 	addsd	%xmm1, %xmm0
    000025e9: 	movsd	-0x8(%rax), %xmm1
    000025ee: 	addsd	%xmm1, %xmm0
    000025f2: 	cmpq	%rdx, %rax
    000025f5: 	jne	.Ltmp1897 # Offset: 9717
    000025f7: 	cmpq	0x18(%rsp), %rax
    000025fc: 	jne	.Ltmp1898 # Offset: 9724
    000025fe: 	movq	%r15, %rdi
    00002601: 	callq	_Z9check_sumIdEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9729
    00002606: 	movq	0xe0(%rsp), %rdi
    0000260e: 	cmpq	0x8(%rsp), %rdi
    00002613: 	je	.Ltmp1899 # Offset: 9747
    00002615: 	movq	0xf0(%rsp), %rax
    0000261d: 	leaq	0x1(%rax), %rsi
    00002621: 	callq	_ZdlPvm@PLT # Offset: 9761
.Ltmp1899:
    00002626: 	movq	0x20(%rsp), %rsi
    0000262b: 	leaq	DATAat0x2d8d0(%rip), %rdx
    00002632: 	movq	%r15, %rdi
    00002635: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9781
    0000263a: 	callq	clock@PLT # Offset: 9786
    0000263f: 	movq	iterations(%rip), %rbp
    00002646: 	movq	%rax, start_time(%rip)
    0000264d: 	testq	%rbp, %rbp
    00002650: 	je	.Ltmp1900 # Offset: 9808
    00002652: 	xorl	%ebx, %ebx
.Ltmp1901:
    00002654: 	movl	$0x75300, %edx
    00002659: 	xorl	%esi, %esi
    0000265b: 	movq	%r13, %rdi
    0000265e: 	addq	$0x1, %rbx
    00002662: 	callq	memset@PLT # Offset: 9826
    00002667: 	movq	0x10(%rsp), %rdi
    0000266c: 	movq	%r13, %rdx
    0000266f: 	movq	%r14, %rsi
    00002672: 	movl	$0xc8, %r8d
    00002678: 	movl	$0x12c, %ecx
    0000267d: 	callq	"_ZN28matmul_IJK_blocked_unrolled3IdEclEPKdS2_Pdmm.isra.0/1" # Offset: 9853
    00002682: 	cmpq	%rbp, %rbx
    00002685: 	jne	.Ltmp1901 # Offset: 9861
.Ltmp1900:
    00002687: 	movq	%r15, %rdi
    0000268a: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 9866
    0000268f: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002696: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    0000269d: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000026a4: 	je	.Ltmp1902 # Offset: 9892
.Ltmp1939:
    000026aa: 	movq	-0x20(%rax), %rbp
    000026ae: 	callq	clock@PLT # Offset: 9902
    000026b3: 	pxor	%xmm0, %xmm0
    000026b7: 	movq	%rax, end_time(%rip)
    000026be: 	movq	%rbp, %rdi
    000026c1: 	subq	start_time(%rip), %rax
    000026c8: 	cvtsi2sd	%rax, %xmm0
    000026cd: 	divsd	DATAat0x2da00(%rip), %xmm0
    000026d5: 	callq	_Z13record_resultdPKc # Offset: 9941
    000026da: 	movq	%r13, %rax
    000026dd: 	pxor	%xmm0, %xmm0
.Ltmp1905:
    000026e1: 	leaq	0x640(%rax), %rdx
.Ltmp1903:
    000026e8: 	movsd	(%rax), %xmm1
    000026ec: 	addq	$0x10, %rax
    000026f0: 	addsd	%xmm1, %xmm0
    000026f4: 	movsd	-0x8(%rax), %xmm1
    000026f9: 	addsd	%xmm1, %xmm0
    000026fd: 	cmpq	%rax, %rdx
    00002700: 	jne	.Ltmp1903 # Offset: 9984
    00002702: 	cmpq	0x18(%rsp), %rdx
    00002707: 	je	.Ltmp1904 # Offset: 9991
    00002709: 	movq	%rdx, %rax
    0000270c: 	jmp	.Ltmp1905 # Offset: 9996
.Ltmp1904:
    0000270e: 	movq	%r15, %rdi
    00002711: 	callq	_Z9check_sumIdEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 10001
    00002716: 	movq	0xe0(%rsp), %rdi
    0000271e: 	cmpq	0x8(%rsp), %rdi
    00002723: 	je	.Ltmp1906 # Offset: 10019
    00002725: 	movq	0xf0(%rsp), %rax
    0000272d: 	leaq	0x1(%rax), %rsi
    00002731: 	callq	_ZdlPvm@PLT # Offset: 10033
.Ltmp1906:
    00002736: 	movq	0x20(%rsp), %rsi
    0000273b: 	leaq	DATAat0x2d8f8(%rip), %rdx
    00002742: 	movq	%r15, %rdi
    00002745: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10053
    0000274a: 	callq	clock@PLT # Offset: 10058
    0000274f: 	movq	iterations(%rip), %r12
    00002756: 	xorl	%ebp, %ebp
    00002758: 	movq	%rax, start_time(%rip)
    0000275f: 	testq	%r12, %r12
    00002762: 	je	.Ltmp1907 # Offset: 10082
.Ltmp1913:
    00002768: 	movl	$0x75300, %edx
    0000276d: 	xorl	%esi, %esi
    0000276f: 	movq	%r13, %rdi
    00002772: 	callq	memset@PLT # Offset: 10098
    00002777: 	movq	%r14, %r9
    0000277a: 	xorl	%r8d, %r8d
    0000277d: 	xorl	%edx, %edx
.Ltmp1912:
    0000277f: 	movl	$0xc8, %eax
    00002784: 	movq	%rdx, %rcx
    00002787: 	subq	$-0x80, %rdx
    0000278b: 	cmpq	%rax, %rdx
    0000278e: 	cmovbeq	%rdx, %rax
    00002792: 	cmpq	%rcx, %rax
    00002795: 	jbe	.Ltmp1908 # Offset: 10133
    0000279b: 	movq	0x10(%rsp), %rcx
    000027a0: 	shlq	$0x3, %rax
    000027a4: 	movq	%r8, %r11
    000027a7: 	xorl	%ebx, %ebx
    000027a9: 	subq	%rax, %r11
    000027ac: 	leaq	(%rcx,%rax), %rdi
    000027b0: 	movq	%r13, %rcx
.Ltmp1911:
    000027b3: 	leaq	(%rdi,%r11), %rsi
    000027b7: 	movq	%r9, %r10
    000027ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1910:
    000027c0: 	movsd	(%rsi), %xmm2
    000027c4: 	xorl	%eax, %eax
    000027c6: 	unpcklpd	%xmm2, %xmm2
.Ltmp1909:
    000027ca: 	movupd	0x10(%r10,%rax), %xmm0
    000027d1: 	movupd	(%r10,%rax), %xmm1
    000027d7: 	movupd	0x10(%rcx,%rax), %xmm4
    000027dd: 	movupd	(%rcx,%rax), %xmm5
    000027e2: 	mulpd	%xmm2, %xmm0
    000027e6: 	mulpd	%xmm2, %xmm1
    000027ea: 	addpd	%xmm4, %xmm0
    000027ee: 	addpd	%xmm5, %xmm1
    000027f2: 	movups	%xmm0, 0x10(%rcx,%rax)
    000027f7: 	movups	%xmm1, (%rcx,%rax)
    000027fb: 	addq	$0x20, %rax
    000027ff: 	cmpq	$0x640, %rax
    00002805: 	jne	.Ltmp1909 # Offset: 10245
    00002807: 	addq	$0x8, %rsi
    0000280b: 	addq	$0x640, %r10
    00002812: 	cmpq	%rsi, %rdi
    00002815: 	jne	.Ltmp1910 # Offset: 10261
    00002817: 	addq	$0xc8, %rbx
    0000281e: 	addq	$0x640, %rdi
    00002825: 	addq	$0x640, %rcx
    0000282c: 	cmpq	$0xea60, %rbx
    00002833: 	jne	.Ltmp1911 # Offset: 10291
.Ltmp1908:
    00002839: 	addq	$0x32000, %r9
    00002840: 	addq	$0x400, %r8
    00002847: 	cmpq	$0x100, %rdx
    0000284e: 	jne	.Ltmp1912 # Offset: 10318
    00002854: 	addq	$0x1, %rbp
    00002858: 	cmpq	%r12, %rbp
    0000285b: 	jne	.Ltmp1913 # Offset: 10331
.Ltmp1907:
    00002861: 	movq	%r15, %rdi
    00002864: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 10340
    00002869: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002870: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00002877: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000287e: 	je	.Ltmp1914 # Offset: 10366
.Ltmp1938:
    00002884: 	movq	-0x20(%rax), %rbp
    00002888: 	callq	clock@PLT # Offset: 10376
    0000288d: 	pxor	%xmm0, %xmm0
    00002891: 	movq	%rax, end_time(%rip)
    00002898: 	movq	%rbp, %rdi
    0000289b: 	subq	start_time(%rip), %rax
    000028a2: 	cvtsi2sd	%rax, %xmm0
    000028a7: 	divsd	DATAat0x2da00(%rip), %xmm0
    000028af: 	callq	_Z13record_resultdPKc # Offset: 10415
    000028b4: 	movq	%r13, %rax
    000028b7: 	pxor	%xmm0, %xmm0
.Ltmp1917:
    000028bb: 	leaq	0x640(%rax), %rdx
.Ltmp1915:
    000028c2: 	movsd	(%rax), %xmm1
    000028c6: 	addq	$0x10, %rax
    000028ca: 	addsd	%xmm1, %xmm0
    000028ce: 	movsd	-0x8(%rax), %xmm1
    000028d3: 	addsd	%xmm1, %xmm0
    000028d7: 	cmpq	%rax, %rdx
    000028da: 	jne	.Ltmp1915 # Offset: 10458
    000028dc: 	cmpq	0x18(%rsp), %rdx
    000028e1: 	je	.Ltmp1916 # Offset: 10465
    000028e3: 	movq	%rdx, %rax
    000028e6: 	jmp	.Ltmp1917 # Offset: 10470
.Ltmp1916:
    000028e8: 	movq	%r15, %rdi
    000028eb: 	callq	_Z9check_sumIdEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 10475
    000028f0: 	movq	0xe0(%rsp), %rdi
    000028f8: 	cmpq	0x8(%rsp), %rdi
    000028fd: 	je	.Ltmp1918 # Offset: 10493
    000028ff: 	movq	0xf0(%rsp), %rax
    00002907: 	leaq	0x1(%rax), %rsi
    0000290b: 	callq	_ZdlPvm@PLT # Offset: 10507
.Ltmp1918:
    00002910: 	movq	0x20(%rsp), %rsi
    00002915: 	leaq	DATAat0x2d920(%rip), %rdx
    0000291c: 	movq	%r15, %rdi
    0000291f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10527
    00002924: 	callq	clock@PLT # Offset: 10532
    00002929: 	movq	iterations(%rip), %rbp
    00002930: 	movq	%rax, start_time(%rip)
    00002937: 	testq	%rbp, %rbp
    0000293a: 	je	.Ltmp1919 # Offset: 10554
    0000293c: 	xorl	%ebx, %ebx
.Ltmp1920:
    0000293e: 	movl	$0x75300, %edx
    00002943: 	xorl	%esi, %esi
    00002945: 	movq	%r13, %rdi
    00002948: 	addq	$0x1, %rbx
    0000294c: 	callq	memset@PLT # Offset: 10572
    00002951: 	movq	0x10(%rsp), %rdi
    00002956: 	movq	%r13, %rdx
    00002959: 	movq	%r14, %rsi
    0000295c: 	movl	$0xc8, %r8d
    00002962: 	movl	$0x12c, %ecx
    00002967: 	callq	"_ZN28matmul_JKI_blocked_unrolled2IdEclEPKdS2_Pdmm.isra.0/1" # Offset: 10599
    0000296c: 	cmpq	%rbp, %rbx
    0000296f: 	jne	.Ltmp1920 # Offset: 10607
.Ltmp1919:
    00002971: 	movq	%r15, %rdi
    00002974: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 10612
    00002979: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002980: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00002987: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000298e: 	je	.Ltmp1921 # Offset: 10638
.Ltmp1937:
    00002994: 	movq	-0x20(%rax), %rbp
    00002998: 	callq	clock@PLT # Offset: 10648
    0000299d: 	pxor	%xmm0, %xmm0
    000029a1: 	movq	%rax, end_time(%rip)
    000029a8: 	movq	%rbp, %rdi
    000029ab: 	subq	start_time(%rip), %rax
    000029b2: 	cvtsi2sd	%rax, %xmm0
    000029b7: 	divsd	DATAat0x2da00(%rip), %xmm0
    000029bf: 	callq	_Z13record_resultdPKc # Offset: 10687
    000029c4: 	movq	%r13, %rax
    000029c7: 	pxor	%xmm0, %xmm0
.Ltmp1923:
    000029cb: 	leaq	0x640(%rax), %rdx
.Ltmp1922:
    000029d2: 	movsd	(%rax), %xmm1
    000029d6: 	addq	$0x10, %rax
    000029da: 	addsd	%xmm1, %xmm0
    000029de: 	movsd	-0x8(%rax), %xmm1
    000029e3: 	addsd	%xmm1, %xmm0
    000029e7: 	cmpq	%rdx, %rax
    000029ea: 	jne	.Ltmp1922 # Offset: 10730
    000029ec: 	cmpq	0x18(%rsp), %rax
    000029f1: 	jne	.Ltmp1923 # Offset: 10737
    000029f3: 	movq	%r15, %rdi
    000029f6: 	callq	_Z9check_sumIdEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 10742
    000029fb: 	movq	0xe0(%rsp), %rdi
    00002a03: 	cmpq	0x8(%rsp), %rdi
    00002a08: 	je	.Ltmp1924 # Offset: 10760
    00002a0a: 	movq	0xf0(%rsp), %rax
    00002a12: 	leaq	0x1(%rax), %rsi
    00002a16: 	callq	_ZdlPvm@PLT # Offset: 10774
.Ltmp1924:
    00002a1b: 	movq	0x20(%rsp), %rsi
    00002a20: 	leaq	DATAat0x2d948(%rip), %rdx
    00002a27: 	movq	%r15, %rdi
    00002a2a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10794
    00002a2f: 	callq	clock@PLT # Offset: 10799
    00002a34: 	movq	iterations(%rip), %rbp
    00002a3b: 	movq	%rax, start_time(%rip)
    00002a42: 	testq	%rbp, %rbp
    00002a45: 	je	.Ltmp1925 # Offset: 10821
    00002a47: 	xorl	%ebx, %ebx
.Ltmp1926:
    00002a49: 	movl	$0x75300, %edx
    00002a4e: 	xorl	%esi, %esi
    00002a50: 	movq	%r13, %rdi
    00002a53: 	addq	$0x1, %rbx
    00002a57: 	callq	memset@PLT # Offset: 10839
    00002a5c: 	movq	0x10(%rsp), %rdi
    00002a61: 	movq	%r13, %rdx
    00002a64: 	movq	%r14, %rsi
    00002a67: 	movl	$0xc8, %r8d
    00002a6d: 	movl	$0x12c, %ecx
    00002a72: 	callq	"_ZN28matmul_JKI_blocked_unrolled3IdEclEPKdS2_Pdmm.isra.0/1" # Offset: 10866
    00002a77: 	cmpq	%rbp, %rbx
    00002a7a: 	jne	.Ltmp1926 # Offset: 10874
.Ltmp1925:
    00002a7c: 	movq	%r15, %rdi
    00002a7f: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 10879
    00002a84: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002a8b: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00002a92: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00002a99: 	je	.Ltmp1927 # Offset: 10905
.Ltmp1936:
    00002a9f: 	movq	-0x20(%rax), %rbp
    00002aa3: 	callq	clock@PLT # Offset: 10915
    00002aa8: 	pxor	%xmm0, %xmm0
    00002aac: 	movq	%rax, end_time(%rip)
    00002ab3: 	movq	%rbp, %rdi
    00002ab6: 	subq	start_time(%rip), %rax
    00002abd: 	cvtsi2sd	%rax, %xmm0
    00002ac2: 	divsd	DATAat0x2da00(%rip), %xmm0
    00002aca: 	callq	_Z13record_resultdPKc # Offset: 10954
    00002acf: 	movq	0x48(%rsp), %rax
    00002ad4: 	pxor	%xmm0, %xmm0
.Ltmp1930:
    00002ad8: 	leaq	0x640(%rax), %rdx
.Ltmp1928:
    00002adf: 	movsd	(%rax), %xmm1
    00002ae3: 	addq	$0x10, %rax
    00002ae7: 	addsd	%xmm1, %xmm0
    00002aeb: 	movsd	-0x8(%rax), %xmm1
    00002af0: 	addsd	%xmm1, %xmm0
    00002af4: 	cmpq	%rax, %rdx
    00002af7: 	jne	.Ltmp1928 # Offset: 10999
    00002af9: 	cmpq	0x18(%rsp), %rdx
    00002afe: 	je	.Ltmp1929 # Offset: 11006
    00002b00: 	movq	%rdx, 0x48(%rsp)
    00002b05: 	movq	%rdx, %rax
    00002b08: 	jmp	.Ltmp1930 # Offset: 11016
.Ltmp1929:
    00002b0a: 	movq	%r15, %rdi
    00002b0d: 	callq	_Z9check_sumIdEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 11021
    00002b12: 	movq	0xe0(%rsp), %rdi
    00002b1a: 	cmpq	0x8(%rsp), %rdi
    00002b1f: 	je	.Ltmp1931 # Offset: 11039
    00002b21: 	movq	0xf0(%rsp), %rax
    00002b29: 	leaq	0x1(%rax), %rsi
    00002b2d: 	callq	_ZdlPvm@PLT # Offset: 11053
.Ltmp1931:
    00002b32: 	movq	0x20(%rsp), %rsi
    00002b37: 	leaq	DATAat0x2d7f4(%rip), %rdx
    00002b3e: 	movq	%r15, %rdi
    00002b41: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11073
    00002b46: 	movl	iterations(%rip), %edx
    00002b4c: 	xorl	%r8d, %r8d
    00002b4f: 	xorl	%ecx, %ecx
    00002b51: 	movl	$0x16e3600, %esi
    00002b56: 	movq	0xe0(%rsp), %rdi
    00002b5e: 	callq	_Z9summarizePKciiii # Offset: 11102
    00002b63: 	movq	0xe0(%rsp), %rdi
    00002b6b: 	cmpq	0x8(%rsp), %rdi
    00002b70: 	je	.Ltmp1932 # Offset: 11120
    00002b72: 	movq	0xf0(%rsp), %rax
    00002b7a: 	leaq	0x1(%rax), %rsi
    00002b7e: 	callq	_ZdlPvm@PLT # Offset: 11134
.Ltmp1932:
    00002b83: 	movl	$0x8, %esi
    00002b88: 	movq	%r13, %rdi
    00002b8b: 	callq	_ZdlPvm@PLT # Offset: 11147
    00002b90: 	movl	$0x8, %esi
    00002b95: 	movq	%r14, %rdi
    00002b98: 	callq	_ZdlPvm@PLT # Offset: 11160
    00002b9d: 	movq	0x10(%rsp), %rdi
    00002ba2: 	movl	$0x8, %esi
    00002ba7: 	callq	_ZdlPvm@PLT # Offset: 11175
    00002bac: 	movq	0xc0(%rsp), %rdi
    00002bb4: 	leaq	0xd0(%rsp), %rax
    00002bbc: 	cmpq	%rax, %rdi
    00002bbf: 	je	.Ltmp1933 # Offset: 11199
    00002bc1: 	movq	0xd0(%rsp), %rax
    00002bc9: 	leaq	0x1(%rax), %rsi
    00002bcd: 	callq	_ZdlPvm@PLT # Offset: 11213
.Ltmp1933:
    00002bd2: 	movq	0x108(%rsp), %rax
    00002bda: 	subq	%fs:0x28, %rax
    00002be3: 	jne	.Ltmp1934 # Offset: 11235
    00002be9: 	addq	$0x118, %rsp
    00002bf0: 	popq	%rbx
    00002bf1: 	popq	%rbp
    00002bf2: 	popq	%r12
    00002bf4: 	popq	%r13
    00002bf6: 	popq	%r14
    00002bf8: 	popq	%r15
    00002bfa: 	retq # Offset: 11258
.Ltmp1699:
    00002bfb: 	movq	-0x8(%rdx), %rax
    00002bff: 	addq	$0x200, %rax
    00002c05: 	jmp	.Ltmp1935 # Offset: 11269
.Ltmp1927:
    00002c0a: 	movq	-0x8(%rdx), %rax
    00002c0e: 	addq	$0x200, %rax
    00002c14: 	jmp	.Ltmp1936 # Offset: 11284
.Ltmp1921:
    00002c19: 	movq	-0x8(%rdx), %rax
    00002c1d: 	addq	$0x200, %rax
    00002c23: 	jmp	.Ltmp1937 # Offset: 11299
.Ltmp1914:
    00002c28: 	movq	-0x8(%rdx), %rax
    00002c2c: 	addq	$0x200, %rax
    00002c32: 	jmp	.Ltmp1938 # Offset: 11314
.Ltmp1902:
    00002c37: 	movq	-0x8(%rdx), %rax
    00002c3b: 	addq	$0x200, %rax
    00002c41: 	jmp	.Ltmp1939 # Offset: 11329
.Ltmp1896:
    00002c46: 	movq	-0x8(%rdx), %rax
    00002c4a: 	addq	$0x200, %rax
    00002c50: 	jmp	.Ltmp1940 # Offset: 11344
.Ltmp1889:
    00002c55: 	movq	-0x8(%rdx), %rax
    00002c59: 	addq	$0x200, %rax
    00002c5f: 	jmp	.Ltmp1941 # Offset: 11359
.Ltmp1883:
    00002c64: 	movq	-0x8(%rdx), %rax
    00002c68: 	addq	$0x200, %rax
    00002c6e: 	jmp	.Ltmp1942 # Offset: 11374
.Ltmp1876:
    00002c73: 	movq	-0x8(%rdx), %rax
    00002c77: 	addq	$0x200, %rax
    00002c7d: 	jmp	.Ltmp1943 # Offset: 11389
.Ltmp1870:
    00002c82: 	movq	-0x8(%rdx), %rax
    00002c86: 	addq	$0x200, %rax
    00002c8c: 	jmp	.Ltmp1944 # Offset: 11404
.Ltmp1861:
    00002c91: 	movq	-0x8(%rdx), %rax
    00002c95: 	addq	$0x200, %rax
    00002c9b: 	jmp	.Ltmp1945 # Offset: 11419
.Ltmp1847:
    00002ca0: 	movq	-0x8(%rdx), %rax
    00002ca4: 	addq	$0x200, %rax
    00002caa: 	jmp	.Ltmp1946 # Offset: 11434
.Ltmp1833:
    00002caf: 	movq	-0x8(%rdx), %rax
    00002cb3: 	addq	$0x200, %rax
    00002cb9: 	jmp	.Ltmp1947 # Offset: 11449
.Ltmp1819:
    00002cbe: 	movq	-0x8(%rdx), %rax
    00002cc2: 	addq	$0x200, %rax
    00002cc8: 	jmp	.Ltmp1948 # Offset: 11464
.Ltmp1813:
    00002ccd: 	movq	-0x8(%rdx), %rax
    00002cd1: 	addq	$0x200, %rax
    00002cd7: 	jmp	.Ltmp1949 # Offset: 11479
.Ltmp1806:
    00002cdc: 	movq	-0x8(%rdx), %rax
    00002ce0: 	addq	$0x200, %rax
    00002ce6: 	jmp	.Ltmp1950 # Offset: 11494
.Ltmp1795:
    00002ceb: 	movq	-0x8(%rdx), %rax
    00002cef: 	addq	$0x200, %rax
    00002cf5: 	jmp	.Ltmp1951 # Offset: 11509
.Ltmp1786:
    00002cfa: 	movq	-0x8(%rdx), %rax
    00002cfe: 	addq	$0x200, %rax
    00002d04: 	jmp	.Ltmp1952 # Offset: 11524
.Ltmp1777:
    00002d09: 	movq	-0x8(%rdx), %rax
    00002d0d: 	addq	$0x200, %rax
    00002d13: 	jmp	.Ltmp1953 # Offset: 11539
.Ltmp1766:
    00002d18: 	movq	-0x8(%rdx), %rax
    00002d1c: 	addq	$0x200, %rax
    00002d22: 	jmp	.Ltmp1954 # Offset: 11554
.Ltmp1757:
    00002d27: 	movq	-0x8(%rdx), %rax
    00002d2b: 	addq	$0x200, %rax
    00002d31: 	jmp	.Ltmp1955 # Offset: 11569
.Ltmp1748:
    00002d36: 	movq	-0x8(%rdx), %rax
    00002d3a: 	addq	$0x200, %rax
    00002d40: 	jmp	.Ltmp1956 # Offset: 11584
.Ltmp1737:
    00002d45: 	movq	-0x8(%rdx), %rax
    00002d49: 	addq	$0x200, %rax
    00002d4f: 	jmp	.Ltmp1957 # Offset: 11599
.Ltmp1728:
    00002d54: 	movq	-0x8(%rdx), %rax
    00002d58: 	addq	$0x200, %rax
    00002d5e: 	jmp	.Ltmp1958 # Offset: 11614
.Ltmp1719:
    00002d63: 	movq	-0x8(%rdx), %rax
    00002d67: 	addq	$0x200, %rax
    00002d6d: 	jmp	.Ltmp1959 # Offset: 11629
.Ltmp1708:
    00002d72: 	movq	-0x8(%rdx), %rax
    00002d76: 	addq	$0x200, %rax
    00002d7c: 	jmp	.Ltmp1960 # Offset: 11644
.Ltmp1934:
    00002d81: 	callq	__stack_chk_fail@PLT # Offset: 11649
    00002d86: 	endbr64
.Ltmp1962:
    00002d8a: 	movq	%rax, %rbx
    00002d8d: 	jmp	.Ltmp1961 # Offset: 11661
    00002d8f: 	endbr64
    00002d93: 	jmp	.Ltmp1962 # Offset: 11667
    00002d95: 	endbr64
    00002d99: 	jmp	.Ltmp1962 # Offset: 11673
    00002d9b: 	endbr64
    00002d9f: 	jmp	.Ltmp1962 # Offset: 11679
    00002da1: 	endbr64
    00002da5: 	jmp	.Ltmp1962 # Offset: 11685
    00002da7: 	endbr64
    00002dab: 	jmp	.Ltmp1962 # Offset: 11691
    00002dad: 	endbr64
    00002db1: 	jmp	.Ltmp1962 # Offset: 11697
.Ltmp1961:
    00002db3: 	movq	0xe0(%rsp), %rdi
    00002dbb: 	cmpq	0x8(%rsp), %rdi
    00002dc0: 	je	.Ltmp1963 # Offset: 11712
.Ltmp1967:
    00002dc2: 	movq	0xf0(%rsp), %rax
    00002dca: 	leaq	0x1(%rax), %rsi
    00002dce: 	callq	_ZdlPvm@PLT # Offset: 11726
.Ltmp1963:
    00002dd3: 	movl	$0x8, %esi
    00002dd8: 	movq	%r13, %rdi
    00002ddb: 	movq	%rbx, %rbp
    00002dde: 	callq	_ZdlPvm@PLT # Offset: 11742
.Ltmp1965:
    00002de3: 	movl	$0x8, %esi
    00002de8: 	movq	%r14, %rdi
    00002deb: 	callq	_ZdlPvm@PLT # Offset: 11755
.Ltmp1968:
    00002df0: 	movq	0x10(%rsp), %rdi
    00002df5: 	movl	$0x8, %esi
    00002dfa: 	callq	_ZdlPvm@PLT # Offset: 11770
.Ltmp1969:
    00002dff: 	movq	0xc0(%rsp), %rdi
    00002e07: 	leaq	0xd0(%rsp), %rax
    00002e0f: 	cmpq	%rax, %rdi
    00002e12: 	je	.Ltmp1964 # Offset: 11794
    00002e14: 	movq	0xd0(%rsp), %rax
    00002e1c: 	leaq	0x1(%rax), %rsi
    00002e20: 	callq	_ZdlPvm@PLT # Offset: 11808
.Ltmp1964:
    00002e25: 	movq	%rbp, %rdi
    00002e28: 	callq	_Unwind_Resume@PLT # Offset: 11816
    00002e2d: 	endbr64
    00002e31: 	jmp	.Ltmp1962 # Offset: 11825
    00002e36: 	endbr64
    00002e3a: 	jmp	.Ltmp1962 # Offset: 11834
    00002e3f: 	endbr64
    00002e43: 	jmp	.Ltmp1962 # Offset: 11843
    00002e48: 	endbr64
    00002e4c: 	jmp	.Ltmp1962 # Offset: 11852
    00002e51: 	endbr64
    00002e55: 	jmp	.Ltmp1962 # Offset: 11861
    00002e5a: 	endbr64
    00002e5e: 	jmp	.Ltmp1962 # Offset: 11870
    00002e63: 	endbr64
    00002e67: 	jmp	.Ltmp1962 # Offset: 11879
    00002e6c: 	endbr64
    00002e70: 	jmp	.Ltmp1962 # Offset: 11888
    00002e75: 	endbr64
    00002e79: 	movq	%rax, %rbx
    00002e7c: 	jmp	.Ltmp1963 # Offset: 11900
    00002e81: 	endbr64
    00002e85: 	movq	%rax, %rbp
    00002e88: 	jmp	.Ltmp1965 # Offset: 11912
    00002e8d: 	endbr64
    00002e91: 	jmp	.Ltmp1962 # Offset: 11921
    00002e96: 	endbr64
    00002e9a: 	jmp	.Ltmp1962 # Offset: 11930
    00002e9f: 	endbr64
    00002ea3: 	jmp	.Ltmp1962 # Offset: 11939
    00002ea8: 	endbr64
    00002eac: 	jmp	.Ltmp1962 # Offset: 11948
    00002eb1: 	endbr64
    00002eb5: 	jmp	.Ltmp1962 # Offset: 11957
    00002eba: 	endbr64
    00002ebe: 	jmp	.Ltmp1962 # Offset: 11966
    00002ec3: 	endbr64
    00002ec7: 	jmp	.Ltmp1962 # Offset: 11975
    00002ecc: 	endbr64
    00002ed0: 	jmp	.Ltmp1962 # Offset: 11984
    00002ed5: 	endbr64
    00002ed9: 	movq	%rax, %rbx
    00002edc: 	jmp	.Ltmp1966 # Offset: 11996
    00002ede: 	endbr64
    00002ee2: 	jmp	.Ltmp1962 # Offset: 12002
.Ltmp1966:
    00002ee7: 	movq	0xe0(%rsp), %rdi
    00002eef: 	leaq	0xf0(%rsp), %rax
    00002ef7: 	cmpq	%rax, %rdi
    00002efa: 	jne	.Ltmp1967 # Offset: 12026
    00002f00: 	jmp	.Ltmp1963 # Offset: 12032
    00002f05: 	endbr64
    00002f09: 	jmp	.Ltmp1962 # Offset: 12041
    00002f0e: 	endbr64
    00002f12: 	jmp	.Ltmp1962 # Offset: 12050
    00002f17: 	endbr64
    00002f1b: 	movq	%rax, %rbp
    00002f1e: 	jmp	.Ltmp1968 # Offset: 12062
    00002f23: 	endbr64
    00002f27: 	movq	%rax, %rbp
    00002f2a: 	jmp	.Ltmp1969 # Offset: 12074
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIdEvv"

Binary Function "_Z11TestOneTypeIfEvv" after disassembly {
  Number      : 81
  State       : disassembled
  Address     : 0x26580
  Size        : 0x31fe
  MaxSize     : 0x3200
  Offset      : 0x26580
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIfEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB080:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	leaq	DATAat0x2d96f(%rip), %rsi
    0000000d: 	pushq	%r14
    0000000f: 	pushq	%r13
    00000011: 	pushq	%r12
    00000013: 	pushq	%rbp
    00000014: 	pushq	%rbx
    00000015: 	subq	$0x148, %rsp
    0000001c: 	movq	%fs:0x28, %rax
    00000025: 	movq	%rax, 0x138(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	leaq	0xf0(%rsp), %rax
    00000037: 	movq	%rax, %rdi
    0000003a: 	movq	%rax, 0x18(%rsp)
    0000003f: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1" # Offset: 63
    00000044: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm4
    0000004c: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm5
    00000054: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000005b: 	leaq	0xd0(%rsp), %rsi
    00000063: 	movaps	%xmm4, 0xd0(%rsp)
    0000006b: 	movaps	%xmm5, 0xe0(%rsp)
    00000073: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E # Offset: 115
    00000078: 	movl	$0x3a980, %edi
    0000007d: 	callq	_Znam@PLT # Offset: 125
    00000082: 	movl	$0x3a980, %edi
    00000087: 	movq	%rax, 0x8(%rsp)
    0000008c: 	movq	%rax, %rbx
    0000008f: 	callq	_Znam@PLT # Offset: 143
    00000094: 	movl	$0x3a980, %edi
    00000099: 	movq	%rax, %r14
    0000009c: 	callq	_Znam@PLT # Offset: 156
    000000a1: 	movl	$0xc8, %r8d
    000000a7: 	movq	%rax, %rdx
    000000aa: 	movq	%r14, %rsi
    000000ad: 	movq	%rbx, %rdi
    000000b0: 	movl	$0x12c, %ecx
    000000b5: 	movq	%rax, %r13
    000000b8: 	callq	_Z13verify_matmulIfEvPT_S1_S1_mm # Offset: 184
    000000bd: 	pxor	%xmm0, %xmm0
    000000c1: 	movq	%rbx, %rax
    000000c4: 	leaq	0x3a980(%rbx), %rbx
    000000cb: 	cvtsd2ss	init_value(%rip), %xmm0
    000000d3: 	shufps	$0x0, %xmm0, %xmm0
.Ltmp1970:
    000000d7: 	movups	%xmm0, (%rax)
    000000da: 	addq	$0x10, %rax
    000000de: 	cmpq	%rax, %rbx
    000000e1: 	jne	.Ltmp1970 # Offset: 225
    000000e3: 	leaq	0x3a980(%r14), %rdx
    000000ea: 	movq	%r14, %rax
.Ltmp1971:
    000000ed: 	movups	%xmm0, (%rax)
    000000f0: 	addq	$0x10, %rax
    000000f4: 	cmpq	%rax, %rdx
    000000f7: 	jne	.Ltmp1971 # Offset: 247
    000000f9: 	movq	%r13, 0x48(%rsp)
    000000fe: 	leaq	0x3a980(%r13), %rax
    00000105: 	movq	%rax, 0x10(%rsp)
    0000010a: 	movq	%r13, %rax
.Ltmp1972:
    0000010d: 	movups	%xmm0, (%rax)
    00000110: 	addq	$0x10, %rax
    00000114: 	cmpq	%rax, 0x10(%rsp)
    00000119: 	jne	.Ltmp1972 # Offset: 281
    0000011b: 	leaq	0x110(%rsp), %r15
    00000123: 	movq	0x18(%rsp), %rsi
    00000128: 	leaq	DATAat0x2d647(%rip), %rdx
    0000012f: 	movq	%r15, %rdi
    00000132: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 306
    00000137: 	callq	clock@PLT # Offset: 311
    0000013c: 	movq	iterations(%rip), %r10
    00000143: 	xorl	%r12d, %r12d
    00000146: 	leaq	0x320(%r14), %rbp
    0000014d: 	movq	%rax, start_time(%rip)
    00000154: 	testq	%r10, %r10
    00000157: 	je	.Ltmp1973 # Offset: 343
.Ltmp1977:
    0000015d: 	movq	%r13, %rdi
    00000160: 	movl	$0x3a980, %edx
    00000165: 	xorl	%esi, %esi
    00000167: 	movq	%r10, (%rsp)
    0000016b: 	callq	memset@PLT # Offset: 363
    00000170: 	movq	0x8(%rsp), %rcx
    00000175: 	movq	(%rsp), %r10
    00000179: 	xorl	%edi, %edi
    0000017b: 	movq	%rbp, %r9
    0000017e: 	movq	%r14, %r8
.Ltmp1976:
    00000181: 	movq	%r8, %rsi
    00000184: 	movq	%r13, %rdx
.Ltmp1975:
    00000187: 	movups	(%rsi), %xmm1
    0000018a: 	xorl	%eax, %eax
.Ltmp1974:
    0000018c: 	movss	(%rcx,%rax), %xmm0
    00000191: 	movups	(%rdx,%rax), %xmm6
    00000195: 	shufps	$0x0, %xmm0, %xmm0
    00000199: 	mulps	%xmm1, %xmm0
    0000019c: 	addps	%xmm6, %xmm0
    0000019f: 	movups	%xmm0, (%rdx,%rax)
    000001a3: 	addq	$0x320, %rax
    000001a9: 	cmpq	$0x3a980, %rax
    000001af: 	jne	.Ltmp1974 # Offset: 431
    000001b1: 	addq	$0x10, %rsi
    000001b5: 	addq	$0x10, %rdx
    000001b9: 	cmpq	%rsi, %r9
    000001bc: 	jne	.Ltmp1975 # Offset: 444
    000001be: 	addq	$0x1, %rdi
    000001c2: 	addq	$0x320, %r9
    000001c9: 	addq	$0x320, %r8
    000001d0: 	addq	$0x4, %rcx
    000001d4: 	cmpq	$0xc8, %rdi
    000001db: 	jne	.Ltmp1976 # Offset: 475
    000001dd: 	addq	$0x1, %r12
    000001e1: 	cmpq	%r10, %r12
    000001e4: 	jne	.Ltmp1977 # Offset: 484
.Ltmp1973:
    000001ea: 	movq	%r15, %rdi
    000001ed: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 493
    000001f2: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000001f9: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00000200: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000207: 	je	.Ltmp1978 # Offset: 519
.Ltmp2221:
    0000020d: 	movq	-0x20(%rax), %rbp
    00000211: 	callq	clock@PLT # Offset: 529
    00000216: 	pxor	%xmm0, %xmm0
    0000021a: 	movq	%rax, end_time(%rip)
    00000221: 	movq	%rbp, %rdi
    00000224: 	subq	start_time(%rip), %rax
    0000022b: 	cvtsi2sd	%rax, %xmm0
    00000230: 	divsd	DATAat0x2da00(%rip), %xmm0
    00000238: 	callq	_Z13record_resultdPKc # Offset: 568
    0000023d: 	movq	%r13, %rax
    00000240: 	pxor	%xmm1, %xmm1
.Ltmp1981:
    00000244: 	leaq	0x320(%rax), %rdx
.Ltmp1979:
    0000024b: 	movups	(%rax), %xmm0
    0000024e: 	addq	$0x10, %rax
    00000252: 	addss	%xmm0, %xmm1
    00000256: 	movaps	%xmm0, %xmm2
    00000259: 	shufps	$0x55, %xmm0, %xmm2
    0000025d: 	addss	%xmm1, %xmm2
    00000261: 	movaps	%xmm0, %xmm1
    00000264: 	unpckhps	%xmm0, %xmm1
    00000267: 	shufps	$0xff, %xmm0, %xmm0
    0000026b: 	addss	%xmm2, %xmm1
    0000026f: 	addss	%xmm0, %xmm1
    00000273: 	cmpq	%rax, %rdx
    00000276: 	jne	.Ltmp1979 # Offset: 630
    00000278: 	cmpq	%rdx, 0x10(%rsp)
    0000027d: 	je	.Ltmp1980 # Offset: 637
    0000027f: 	movq	%rdx, %rax
    00000282: 	jmp	.Ltmp1981 # Offset: 642
.Ltmp1980:
    00000284: 	movq	%r15, %rdi
    00000287: 	movaps	%xmm1, %xmm0
    0000028a: 	callq	_Z9check_sumIfEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 650
    0000028f: 	movq	0x110(%rsp), %rdi
    00000297: 	leaq	0x120(%rsp), %rax
    0000029f: 	movq	%rax, (%rsp)
    000002a3: 	cmpq	%rax, %rdi
    000002a6: 	je	.Ltmp1982 # Offset: 678
    000002a8: 	movq	0x120(%rsp), %rax
    000002b0: 	leaq	0x1(%rax), %rsi
    000002b4: 	callq	_ZdlPvm@PLT # Offset: 692
.Ltmp1982:
    000002b9: 	movq	0x18(%rsp), %rsi
    000002be: 	leaq	DATAat0x2d65c(%rip), %rdx
    000002c5: 	movq	%r15, %rdi
    000002c8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 712
    000002cd: 	callq	clock@PLT # Offset: 717
    000002d2: 	movq	iterations(%rip), %r12
    000002d9: 	xorl	%ebp, %ebp
    000002db: 	movq	%rax, start_time(%rip)
    000002e2: 	testq	%r12, %r12
    000002e5: 	je	.Ltmp1983 # Offset: 741
.Ltmp1987:
    000002e7: 	xorl	%esi, %esi
    000002e9: 	movq	%r13, %rdi
    000002ec: 	movl	$0x3a980, %edx
    000002f1: 	callq	memset@PLT # Offset: 753
    000002f6: 	movq	0x8(%rsp), %rdi
    000002fb: 	movq	%r14, %rcx
    000002fe: 	xorl	%esi, %esi
.Ltmp1986:
    00000300: 	movq	%r13, %rdx
    00000303: 	movq	%rdi, %r8
.Ltmp1985:
    00000306: 	movss	(%r8), %xmm1
    0000030b: 	xorl	%eax, %eax
    0000030d: 	shufps	$0x0, %xmm1, %xmm1
.Ltmp1984:
    00000311: 	movups	(%rcx,%rax), %xmm0
    00000315: 	movups	(%rdx,%rax), %xmm4
    00000319: 	mulps	%xmm1, %xmm0
    0000031c: 	addps	%xmm4, %xmm0
    0000031f: 	movups	%xmm0, (%rdx,%rax)
    00000323: 	addq	$0x10, %rax
    00000327: 	cmpq	$0x320, %rax
    0000032d: 	jne	.Ltmp1984 # Offset: 813
    0000032f: 	addq	$0x320, %r8
    00000336: 	addq	$0x320, %rdx
    0000033d: 	cmpq	%rdx, 0x10(%rsp)
    00000342: 	jne	.Ltmp1985 # Offset: 834
    00000344: 	addq	$0x1, %rsi
    00000348: 	addq	$0x320, %rcx
    0000034f: 	addq	$0x4, %rdi
    00000353: 	cmpq	$0xc8, %rsi
    0000035a: 	jne	.Ltmp1986 # Offset: 858
    0000035c: 	addq	$0x1, %rbp
    00000360: 	cmpq	%r12, %rbp
    00000363: 	jne	.Ltmp1987 # Offset: 867
.Ltmp1983:
    00000365: 	movq	%r15, %rdi
    00000368: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 872
    0000036d: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000374: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    0000037b: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000382: 	je	.Ltmp1988 # Offset: 898
.Ltmp2246:
    00000388: 	movq	-0x20(%rax), %rbp
    0000038c: 	callq	clock@PLT # Offset: 908
    00000391: 	pxor	%xmm0, %xmm0
    00000395: 	movq	%rax, end_time(%rip)
    0000039c: 	movq	%rbp, %rdi
    0000039f: 	subq	start_time(%rip), %rax
    000003a6: 	cvtsi2sd	%rax, %xmm0
    000003ab: 	divsd	DATAat0x2da00(%rip), %xmm0
    000003b3: 	callq	_Z13record_resultdPKc # Offset: 947
    000003b8: 	movq	%r13, %rax
    000003bb: 	pxor	%xmm1, %xmm1
.Ltmp1991:
    000003bf: 	leaq	0x320(%rax), %rdx
.Ltmp1989:
    000003c6: 	movups	(%rax), %xmm0
    000003c9: 	addq	$0x10, %rax
    000003cd: 	addss	%xmm0, %xmm1
    000003d1: 	movaps	%xmm0, %xmm2
    000003d4: 	shufps	$0x55, %xmm0, %xmm2
    000003d8: 	addss	%xmm1, %xmm2
    000003dc: 	movaps	%xmm0, %xmm1
    000003df: 	unpckhps	%xmm0, %xmm1
    000003e2: 	shufps	$0xff, %xmm0, %xmm0
    000003e6: 	addss	%xmm2, %xmm1
    000003ea: 	addss	%xmm0, %xmm1
    000003ee: 	cmpq	%rax, %rdx
    000003f1: 	jne	.Ltmp1989 # Offset: 1009
    000003f3: 	cmpq	%rdx, 0x10(%rsp)
    000003f8: 	je	.Ltmp1990 # Offset: 1016
    000003fa: 	movq	%rdx, %rax
    000003fd: 	jmp	.Ltmp1991 # Offset: 1021
.Ltmp1990:
    000003ff: 	movq	%r15, %rdi
    00000402: 	movaps	%xmm1, %xmm0
    00000405: 	callq	_Z9check_sumIfEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1029
    0000040a: 	movq	0x110(%rsp), %rdi
    00000412: 	cmpq	(%rsp), %rdi
    00000416: 	je	.Ltmp1992 # Offset: 1046
    00000418: 	movq	0x120(%rsp), %rax
    00000420: 	leaq	0x1(%rax), %rsi
    00000424: 	callq	_ZdlPvm@PLT # Offset: 1060
.Ltmp1992:
    00000429: 	movq	0x18(%rsp), %rsi
    0000042e: 	leaq	DATAat0x2d671(%rip), %rdx
    00000435: 	movq	%r15, %rdi
    00000438: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1080
    0000043d: 	callq	clock@PLT # Offset: 1085
    00000442: 	movq	iterations(%rip), %r9
    00000449: 	xorl	%r10d, %r10d
    0000044c: 	leaq	0x26ac0(%r14), %r12
    00000453: 	movq	%rax, start_time(%rip)
    0000045a: 	leaq	0x27100(%r14), %rbp
    00000461: 	testq	%r9, %r9
    00000464: 	je	.Ltmp1993 # Offset: 1124
.Ltmp1999:
    0000046a: 	movl	$0x3a980, %edx
    0000046f: 	xorl	%esi, %esi
    00000471: 	movq	%r13, %rdi
    00000474: 	movq	%r9, 0x28(%rsp)
    00000479: 	movq	%r10, 0x20(%rsp)
    0000047e: 	callq	memset@PLT # Offset: 1150
    00000483: 	movq	0x8(%rsp), %rcx
    00000488: 	movq	0x20(%rsp), %r10
    0000048d: 	movq	%r13, %rdx
    00000490: 	movq	0x28(%rsp), %r9
.Ltmp1998:
    00000495: 	movq	%r14, %rdi
    00000498: 	xorl	%esi, %esi
.Ltmp1995:
    0000049a: 	movss	(%rcx,%rsi,4), %xmm3
    0000049f: 	movss	0x4(%rcx,%rsi,4), %xmm2
    000004a5: 	leaq	0x320(%rdi), %r8
    000004ac: 	xorl	%eax, %eax
    000004ae: 	shufps	$0x0, %xmm3, %xmm3
    000004b2: 	shufps	$0x0, %xmm2, %xmm2
.Ltmp1994:
    000004b6: 	movups	(%rdi,%rax), %xmm0
    000004ba: 	movups	(%r8,%rax), %xmm1
    000004bf: 	movups	(%rdx,%rax), %xmm4
    000004c3: 	mulps	%xmm3, %xmm0
    000004c6: 	mulps	%xmm2, %xmm1
    000004c9: 	addps	%xmm4, %xmm0
    000004cc: 	addps	%xmm1, %xmm0
    000004cf: 	movups	%xmm0, (%rdx,%rax)
    000004d3: 	addq	$0x10, %rax
    000004d7: 	cmpq	$0x320, %rax
    000004dd: 	jne	.Ltmp1994 # Offset: 1245
    000004df: 	addq	$0x2, %rsi
    000004e3: 	addq	$0x640, %rdi
    000004ea: 	cmpq	$0xc6, %rsi
    000004f1: 	jne	.Ltmp1995 # Offset: 1265
    000004f3: 	leaq	0x318(%rcx), %rdi
    000004fa: 	movq	%r12, %rsi
.Ltmp1997:
    000004fd: 	movss	(%rdi), %xmm1
    00000501: 	xorl	%eax, %eax
    00000503: 	shufps	$0x0, %xmm1, %xmm1
.Ltmp1996:
    00000507: 	movups	(%rsi,%rax), %xmm0
    0000050b: 	movups	(%rdx,%rax), %xmm5
    0000050f: 	mulps	%xmm1, %xmm0
    00000512: 	addps	%xmm5, %xmm0
    00000515: 	movups	%xmm0, (%rdx,%rax)
    00000519: 	addq	$0x10, %rax
    0000051d: 	cmpq	$0x320, %rax
    00000523: 	jne	.Ltmp1996 # Offset: 1315
    00000525: 	addq	$0x320, %rsi
    0000052c: 	addq	$0x4, %rdi
    00000530: 	cmpq	%rsi, %rbp
    00000533: 	jne	.Ltmp1997 # Offset: 1331
    00000535: 	addq	$0x320, %rcx
    0000053c: 	addq	$0x320, %rdx
    00000543: 	cmpq	%rcx, %rbx
    00000546: 	jne	.Ltmp1998 # Offset: 1350
    0000054c: 	addq	$0x1, %r10
    00000550: 	cmpq	%r9, %r10
    00000553: 	jne	.Ltmp1999 # Offset: 1363
.Ltmp1993:
    00000559: 	movq	%r15, %rdi
    0000055c: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1372
    00000561: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000568: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    0000056f: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000576: 	je	.Ltmp2000 # Offset: 1398
.Ltmp2245:
    0000057c: 	movq	-0x20(%rax), %rbp
    00000580: 	callq	clock@PLT # Offset: 1408
    00000585: 	pxor	%xmm0, %xmm0
    00000589: 	movq	%rax, end_time(%rip)
    00000590: 	movq	%rbp, %rdi
    00000593: 	subq	start_time(%rip), %rax
    0000059a: 	cvtsi2sd	%rax, %xmm0
    0000059f: 	divsd	DATAat0x2da00(%rip), %xmm0
    000005a7: 	callq	_Z13record_resultdPKc # Offset: 1447
    000005ac: 	movq	%r13, %rax
    000005af: 	pxor	%xmm1, %xmm1
.Ltmp2003:
    000005b3: 	leaq	0x320(%rax), %rdx
.Ltmp2001:
    000005ba: 	movups	(%rax), %xmm0
    000005bd: 	addq	$0x10, %rax
    000005c1: 	addss	%xmm0, %xmm1
    000005c5: 	movaps	%xmm0, %xmm2
    000005c8: 	shufps	$0x55, %xmm0, %xmm2
    000005cc: 	addss	%xmm1, %xmm2
    000005d0: 	movaps	%xmm0, %xmm1
    000005d3: 	unpckhps	%xmm0, %xmm1
    000005d6: 	shufps	$0xff, %xmm0, %xmm0
    000005da: 	addss	%xmm2, %xmm1
    000005de: 	addss	%xmm0, %xmm1
    000005e2: 	cmpq	%rax, %rdx
    000005e5: 	jne	.Ltmp2001 # Offset: 1509
    000005e7: 	cmpq	%rdx, 0x10(%rsp)
    000005ec: 	je	.Ltmp2002 # Offset: 1516
    000005ee: 	movq	%rdx, %rax
    000005f1: 	jmp	.Ltmp2003 # Offset: 1521
.Ltmp2002:
    000005f3: 	movq	%r15, %rdi
    000005f6: 	movaps	%xmm1, %xmm0
    000005f9: 	callq	_Z9check_sumIfEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1529
    000005fe: 	movq	0x110(%rsp), %rdi
    00000606: 	cmpq	(%rsp), %rdi
    0000060a: 	je	.Ltmp2004 # Offset: 1546
    0000060c: 	movq	0x120(%rsp), %rax
    00000614: 	leaq	0x1(%rax), %rsi
    00000618: 	callq	_ZdlPvm@PLT # Offset: 1560
.Ltmp2004:
    0000061d: 	movq	0x18(%rsp), %rsi
    00000622: 	leaq	DATAat0x2d686(%rip), %rdx
    00000629: 	movq	%r15, %rdi
    0000062c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1580
    00000631: 	callq	clock@PLT # Offset: 1585
    00000636: 	movq	iterations(%rip), %r10
    0000063d: 	xorl	%r12d, %r12d
    00000640: 	leaq	0x27100(%r14), %rbp
    00000647: 	movq	%rax, start_time(%rip)
    0000064e: 	testq	%r10, %r10
    00000651: 	je	.Ltmp2005 # Offset: 1617
.Ltmp2009:
    00000657: 	xorl	%esi, %esi
    00000659: 	movq	%r13, %rdi
    0000065c: 	movl	$0x3a980, %edx
    00000661: 	movq	%r10, 0x20(%rsp)
    00000666: 	callq	memset@PLT # Offset: 1638
    0000066b: 	movq	0x8(%rsp), %rdi
    00000670: 	movq	0x20(%rsp), %r10
    00000675: 	movq	%r13, %rsi
.Ltmp2008:
    00000678: 	movq	%rbp, %r8
    0000067b: 	movq	%r14, %r9
    0000067e: 	xorl	%ecx, %ecx
.Ltmp2007:
    00000680: 	movups	(%rsi,%rcx), %xmm1
    00000684: 	movq	%rdi, %rdx
    00000687: 	movq	%r9, %rax
.Ltmp2006:
    0000068a: 	movss	(%rdx), %xmm0
    0000068e: 	movups	(%rax), %xmm7
    00000691: 	addq	$0x320, %rax
    00000697: 	addq	$0x4, %rdx
    0000069b: 	shufps	$0x0, %xmm0, %xmm0
    0000069f: 	mulps	%xmm7, %xmm0
    000006a2: 	addps	%xmm0, %xmm1
    000006a5: 	cmpq	%rax, %r8
    000006a8: 	jne	.Ltmp2006 # Offset: 1704
    000006aa: 	movups	%xmm1, (%rsi,%rcx)
    000006ae: 	addq	$0x10, %rcx
    000006b2: 	addq	$0x10, %r9
    000006b6: 	addq	$0x10, %r8
    000006ba: 	cmpq	$0x320, %rcx
    000006c1: 	jne	.Ltmp2007 # Offset: 1729
    000006c3: 	addq	$0x320, %rdi
    000006ca: 	addq	$0x320, %rsi
    000006d1: 	cmpq	%rdi, %rbx
    000006d4: 	jne	.Ltmp2008 # Offset: 1748
    000006d6: 	addq	$0x1, %r12
    000006da: 	cmpq	%r10, %r12
    000006dd: 	jne	.Ltmp2009 # Offset: 1757
.Ltmp2005:
    000006e3: 	movq	%r15, %rdi
    000006e6: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1766
    000006eb: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000006f2: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    000006f9: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000700: 	je	.Ltmp2010 # Offset: 1792
.Ltmp2244:
    00000706: 	movq	-0x20(%rax), %rbp
    0000070a: 	callq	clock@PLT # Offset: 1802
    0000070f: 	pxor	%xmm0, %xmm0
    00000713: 	movq	%rax, end_time(%rip)
    0000071a: 	movq	%rbp, %rdi
    0000071d: 	subq	start_time(%rip), %rax
    00000724: 	cvtsi2sd	%rax, %xmm0
    00000729: 	divsd	DATAat0x2da00(%rip), %xmm0
    00000731: 	callq	_Z13record_resultdPKc # Offset: 1841
    00000736: 	movq	%r13, %rax
    00000739: 	pxor	%xmm1, %xmm1
.Ltmp2013:
    0000073d: 	leaq	0x320(%rax), %rdx
.Ltmp2011:
    00000744: 	movups	(%rax), %xmm0
    00000747: 	addq	$0x10, %rax
    0000074b: 	addss	%xmm0, %xmm1
    0000074f: 	movaps	%xmm0, %xmm2
    00000752: 	shufps	$0x55, %xmm0, %xmm2
    00000756: 	addss	%xmm1, %xmm2
    0000075a: 	movaps	%xmm0, %xmm1
    0000075d: 	unpckhps	%xmm0, %xmm1
    00000760: 	shufps	$0xff, %xmm0, %xmm0
    00000764: 	addss	%xmm2, %xmm1
    00000768: 	addss	%xmm0, %xmm1
    0000076c: 	cmpq	%rax, %rdx
    0000076f: 	jne	.Ltmp2011 # Offset: 1903
    00000771: 	cmpq	%rdx, 0x10(%rsp)
    00000776: 	je	.Ltmp2012 # Offset: 1910
    00000778: 	movq	%rdx, %rax
    0000077b: 	jmp	.Ltmp2013 # Offset: 1915
.Ltmp2012:
    0000077d: 	movq	%r15, %rdi
    00000780: 	movaps	%xmm1, %xmm0
    00000783: 	callq	_Z9check_sumIfEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1923
    00000788: 	movq	0x110(%rsp), %rdi
    00000790: 	cmpq	(%rsp), %rdi
    00000794: 	je	.Ltmp2014 # Offset: 1940
    00000796: 	movq	0x120(%rsp), %rax
    0000079e: 	leaq	0x1(%rax), %rsi
    000007a2: 	callq	_ZdlPvm@PLT # Offset: 1954
.Ltmp2014:
    000007a7: 	movq	0x18(%rsp), %rsi
    000007ac: 	leaq	DATAat0x2d69b(%rip), %rdx
    000007b3: 	movq	%r15, %rdi
    000007b6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1974
    000007bb: 	callq	clock@PLT # Offset: 1979
    000007c0: 	movq	iterations(%rip), %r11
    000007c7: 	xorl	%r12d, %r12d
    000007ca: 	movq	%rax, start_time(%rip)
    000007d1: 	movq	0x8(%rsp), %rax
    000007d6: 	leaq	0x320(%rax), %rbp
    000007dd: 	testq	%r11, %r11
    000007e0: 	je	.Ltmp2015 # Offset: 2016
.Ltmp2019:
    000007e6: 	movl	$0x3a980, %edx
    000007eb: 	xorl	%esi, %esi
    000007ed: 	movq	%r13, %rdi
    000007f0: 	movq	%r11, 0x20(%rsp)
    000007f5: 	callq	memset@PLT # Offset: 2037
    000007fa: 	movq	0x20(%rsp), %r11
    000007ff: 	movq	%r13, %r10
    00000802: 	movq	%r14, %r9
    00000805: 	xorl	%r8d, %r8d
.Ltmp2018:
    00000808: 	movq	0x8(%rsp), %rdi
    0000080d: 	movq	%rbp, %rcx
    00000810: 	movq	%r10, %rsi
.Ltmp2017:
    00000813: 	movss	(%rsi), %xmm1
    00000817: 	movq	%r9, %rax
    0000081a: 	movq	%rdi, %rdx
.Ltmp2016:
    0000081d: 	movss	0x960(%rax), %xmm0
    00000825: 	movups	(%rdx), %xmm6
    00000828: 	addq	$0x10, %rdx
    0000082c: 	addq	$0xc80, %rax
    00000832: 	movss	-0x640(%rax), %xmm2
    0000083a: 	movss	-0x960(%rax), %xmm3
    00000842: 	unpcklps	%xmm0, %xmm2
    00000845: 	movss	-0xc80(%rax), %xmm0
    0000084d: 	unpcklps	%xmm3, %xmm0
    00000850: 	movlhps	%xmm2, %xmm0
    00000853: 	mulps	%xmm6, %xmm0
    00000856: 	addss	%xmm0, %xmm1
    0000085a: 	movaps	%xmm0, %xmm2
    0000085d: 	shufps	$0x55, %xmm0, %xmm2
    00000861: 	addss	%xmm1, %xmm2
    00000865: 	movaps	%xmm0, %xmm1
    00000868: 	unpckhps	%xmm0, %xmm1
    0000086b: 	shufps	$0xff, %xmm0, %xmm0
    0000086f: 	addss	%xmm2, %xmm1
    00000873: 	addss	%xmm0, %xmm1
    00000877: 	cmpq	%rdx, %rcx
    0000087a: 	jne	.Ltmp2016 # Offset: 2170
    0000087c: 	addq	$0x320, %rdi
    00000883: 	movss	%xmm1, (%rsi)
    00000887: 	addq	$0x320, %rcx
    0000088e: 	addq	$0x320, %rsi
    00000895: 	cmpq	%rdi, %rbx
    00000898: 	jne	.Ltmp2017 # Offset: 2200
    0000089e: 	addq	$0x1, %r8
    000008a2: 	addq	$0x4, %r9
    000008a6: 	addq	$0x4, %r10
    000008aa: 	cmpq	$0xc8, %r8
    000008b1: 	jne	.Ltmp2018 # Offset: 2225
    000008b7: 	addq	$0x1, %r12
    000008bb: 	cmpq	%r11, %r12
    000008be: 	jne	.Ltmp2019 # Offset: 2238
.Ltmp2015:
    000008c4: 	movq	%r15, %rdi
    000008c7: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 2247
    000008cc: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000008d3: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    000008da: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000008e1: 	je	.Ltmp2020 # Offset: 2273
.Ltmp2243:
    000008e7: 	movq	-0x20(%rax), %rbp
    000008eb: 	callq	clock@PLT # Offset: 2283
    000008f0: 	pxor	%xmm0, %xmm0
    000008f4: 	movq	%rax, end_time(%rip)
    000008fb: 	movq	%rbp, %rdi
    000008fe: 	subq	start_time(%rip), %rax
    00000905: 	cvtsi2sd	%rax, %xmm0
    0000090a: 	divsd	DATAat0x2da00(%rip), %xmm0
    00000912: 	callq	_Z13record_resultdPKc # Offset: 2322
    00000917: 	movq	%r13, %rax
    0000091a: 	pxor	%xmm1, %xmm1
.Ltmp2023:
    0000091e: 	leaq	0x320(%rax), %rdx
.Ltmp2021:
    00000925: 	movups	(%rax), %xmm0
    00000928: 	addq	$0x10, %rax
    0000092c: 	addss	%xmm0, %xmm1
    00000930: 	movaps	%xmm0, %xmm2
    00000933: 	shufps	$0x55, %xmm0, %xmm2
    00000937: 	addss	%xmm1, %xmm2
    0000093b: 	movaps	%xmm0, %xmm1
    0000093e: 	unpckhps	%xmm0, %xmm1
    00000941: 	shufps	$0xff, %xmm0, %xmm0
    00000945: 	addss	%xmm2, %xmm1
    00000949: 	addss	%xmm0, %xmm1
    0000094d: 	cmpq	%rax, %rdx
    00000950: 	jne	.Ltmp2021 # Offset: 2384
    00000952: 	cmpq	%rdx, 0x10(%rsp)
    00000957: 	je	.Ltmp2022 # Offset: 2391
    00000959: 	movq	%rdx, %rax
    0000095c: 	jmp	.Ltmp2023 # Offset: 2396
.Ltmp2022:
    0000095e: 	movq	%r15, %rdi
    00000961: 	movaps	%xmm1, %xmm0
    00000964: 	callq	_Z9check_sumIfEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2404
    00000969: 	movq	0x110(%rsp), %rdi
    00000971: 	cmpq	(%rsp), %rdi
    00000975: 	je	.Ltmp2024 # Offset: 2421
    00000977: 	movq	0x120(%rsp), %rax
    0000097f: 	leaq	0x1(%rax), %rsi
    00000983: 	callq	_ZdlPvm@PLT # Offset: 2435
.Ltmp2024:
    00000988: 	movq	0x18(%rsp), %rsi
    0000098d: 	leaq	DATAat0x2d6b0(%rip), %rdx
    00000994: 	movq	%r15, %rdi
    00000997: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2455
    0000099c: 	callq	clock@PLT # Offset: 2460
    000009a1: 	movq	%rax, start_time(%rip)
    000009a8: 	movq	iterations(%rip), %rax
    000009af: 	movq	%rax, 0x38(%rsp)
    000009b4: 	testq	%rax, %rax
    000009b7: 	je	.Ltmp2025 # Offset: 2487
    000009bd: 	movq	0x8(%rsp), %rax
    000009c2: 	leaq	0x26ac0(%r14), %r12
    000009c9: 	movq	$0x0, 0x20(%rsp)
    000009d2: 	leaq	0x27100(%r14), %rbp
    000009d9: 	addq	$0x318, %rax
    000009df: 	movq	%rax, 0x30(%rsp)
.Ltmp2031:
    000009e4: 	movl	$0x3a980, %edx
    000009e9: 	xorl	%esi, %esi
    000009eb: 	movq	%r13, %rdi
    000009ee: 	callq	memset@PLT # Offset: 2542
    000009f3: 	movq	0x10(%rsp), %r8
    000009f8: 	movq	%r12, %r9
    000009fb: 	movq	%rbp, %rdx
    000009fe: 	movq	$0x0, 0x28(%rsp)
.Ltmp2030:
    00000a07: 	movq	0x8(%rsp), %r11
    00000a0c: 	leaq	-0x27100(%rdx), %rsi
    00000a13: 	xorl	%r10d, %r10d
.Ltmp2027:
    00000a16: 	movss	(%rsi), %xmm2
    00000a1a: 	movss	0x320(%rsi), %xmm1
    00000a22: 	movq	%r11, %rdi
    00000a25: 	movq	%rax, %rcx
.Ltmp2026:
    00000a28: 	movss	0x4(%rdi), %xmm3
    00000a2d: 	movss	(%rdi), %xmm0
    00000a31: 	addq	$0x320, %rcx
    00000a38: 	addq	$0x320, %rdi
    00000a3f: 	mulss	%xmm1, %xmm3
    00000a43: 	mulss	%xmm2, %xmm0
    00000a47: 	addss	-0x320(%rcx), %xmm0
    00000a4f: 	addss	%xmm3, %xmm0
    00000a53: 	movss	%xmm0, -0x320(%rcx)
    00000a5b: 	cmpq	%rcx, %r8
    00000a5e: 	jne	.Ltmp2026 # Offset: 2654
    00000a60: 	addq	$0x2, %r10
    00000a64: 	addq	$0x640, %rsi
    00000a6b: 	addq	$0x8, %r11
    00000a6f: 	cmpq	$0xc6, %r10
    00000a76: 	jne	.Ltmp2027 # Offset: 2678
    00000a78: 	movq	0x30(%rsp), %r10
    00000a7d: 	xorl	%edi, %edi
.Ltmp2029:
    00000a7f: 	movss	(%rax,%rdi,4), %xmm1
    00000a84: 	movq	%r10, %rsi
    00000a87: 	movq	%r9, %rcx
.Ltmp2028:
    00000a8a: 	movss	(%rsi), %xmm0
    00000a8e: 	mulss	(%rcx), %xmm0
    00000a92: 	addq	$0x320, %rcx
    00000a99: 	addq	$0x4, %rsi
    00000a9d: 	addss	%xmm0, %xmm1
    00000aa1: 	cmpq	%rcx, %rdx
    00000aa4: 	jne	.Ltmp2028 # Offset: 2724
    00000aa6: 	movss	%xmm1, (%rax,%rdi,4)
    00000aab: 	addq	$0xc8, %rdi
    00000ab2: 	addq	$0x320, %r10
    00000ab9: 	cmpq	$0xea60, %rdi
    00000ac0: 	jne	.Ltmp2029 # Offset: 2752
    00000ac2: 	addq	$0x4, %r9
    00000ac6: 	addq	$0x4, %rax
    00000aca: 	addq	$0x4, %rdx
    00000ace: 	addq	$0x4, %r8
    00000ad2: 	addq	$0x1, 0x28(%rsp)
    00000ad8: 	movq	0x28(%rsp), %rcx
    00000add: 	cmpq	$0xc8, %rcx
    00000ae4: 	jne	.Ltmp2030 # Offset: 2788
    00000aea: 	addq	$0x1, 0x20(%rsp)
    00000af0: 	movq	0x20(%rsp), %rax
    00000af5: 	cmpq	0x38(%rsp), %rax
    00000afa: 	jne	.Ltmp2031 # Offset: 2810
.Ltmp2025:
    00000b00: 	movq	%r15, %rdi
    00000b03: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 2819
    00000b08: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000b0f: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00000b16: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000b1d: 	je	.Ltmp2032 # Offset: 2845
.Ltmp2242:
    00000b23: 	movq	-0x20(%rax), %rbp
    00000b27: 	callq	clock@PLT # Offset: 2855
    00000b2c: 	pxor	%xmm0, %xmm0
    00000b30: 	movq	%rax, end_time(%rip)
    00000b37: 	movq	%rbp, %rdi
    00000b3a: 	subq	start_time(%rip), %rax
    00000b41: 	cvtsi2sd	%rax, %xmm0
    00000b46: 	divsd	DATAat0x2da00(%rip), %xmm0
    00000b4e: 	callq	_Z13record_resultdPKc # Offset: 2894
    00000b53: 	movq	%r13, %rax
    00000b56: 	pxor	%xmm1, %xmm1
.Ltmp2035:
    00000b5a: 	leaq	0x320(%rax), %rdx
.Ltmp2033:
    00000b61: 	movups	(%rax), %xmm0
    00000b64: 	addq	$0x10, %rax
    00000b68: 	addss	%xmm0, %xmm1
    00000b6c: 	movaps	%xmm0, %xmm2
    00000b6f: 	shufps	$0x55, %xmm0, %xmm2
    00000b73: 	addss	%xmm1, %xmm2
    00000b77: 	movaps	%xmm0, %xmm1
    00000b7a: 	unpckhps	%xmm0, %xmm1
    00000b7d: 	shufps	$0xff, %xmm0, %xmm0
    00000b81: 	addss	%xmm2, %xmm1
    00000b85: 	addss	%xmm0, %xmm1
    00000b89: 	cmpq	%rax, %rdx
    00000b8c: 	jne	.Ltmp2033 # Offset: 2956
    00000b8e: 	cmpq	%rdx, 0x10(%rsp)
    00000b93: 	je	.Ltmp2034 # Offset: 2963
    00000b95: 	movq	%rdx, %rax
    00000b98: 	jmp	.Ltmp2035 # Offset: 2968
.Ltmp2034:
    00000b9a: 	movq	%r15, %rdi
    00000b9d: 	movaps	%xmm1, %xmm0
    00000ba0: 	callq	_Z9check_sumIfEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2976
    00000ba5: 	movq	0x110(%rsp), %rdi
    00000bad: 	cmpq	(%rsp), %rdi
    00000bb1: 	je	.Ltmp2036 # Offset: 2993
    00000bb3: 	movq	0x120(%rsp), %rax
    00000bbb: 	leaq	0x1(%rax), %rsi
    00000bbf: 	callq	_ZdlPvm@PLT # Offset: 3007
.Ltmp2036:
    00000bc4: 	movq	0x18(%rsp), %rsi
    00000bc9: 	leaq	DATAat0x2d6c5(%rip), %rdx
    00000bd0: 	movq	%r15, %rdi
    00000bd3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3027
    00000bd8: 	callq	clock@PLT # Offset: 3032
    00000bdd: 	movq	iterations(%rip), %r10
    00000be4: 	xorl	%r12d, %r12d
    00000be7: 	leaq	0x320(%r14), %rbp
    00000bee: 	movq	%rax, start_time(%rip)
    00000bf5: 	testq	%r10, %r10
    00000bf8: 	je	.Ltmp2037 # Offset: 3064
.Ltmp2041:
    00000bfe: 	movq	%r13, %rdi
    00000c01: 	movl	$0x3a980, %edx
    00000c06: 	xorl	%esi, %esi
    00000c08: 	movq	%r10, 0x20(%rsp)
    00000c0d: 	callq	memset@PLT # Offset: 3085
    00000c12: 	movq	0x8(%rsp), %rcx
    00000c17: 	movq	%rbp, %r9
    00000c1a: 	movq	%r14, %r8
    00000c1d: 	movq	0x20(%rsp), %r10
    00000c22: 	xorl	%edi, %edi
.Ltmp2040:
    00000c24: 	movq	%r8, %rsi
    00000c27: 	movq	%r13, %rdx
.Ltmp2039:
    00000c2a: 	movups	(%rsi), %xmm1
    00000c2d: 	xorl	%eax, %eax
.Ltmp2038:
    00000c2f: 	movss	(%rcx,%rax), %xmm0
    00000c34: 	movups	(%rdx,%rax), %xmm6
    00000c38: 	shufps	$0x0, %xmm0, %xmm0
    00000c3c: 	mulps	%xmm1, %xmm0
    00000c3f: 	addps	%xmm6, %xmm0
    00000c42: 	movups	%xmm0, (%rdx,%rax)
    00000c46: 	addq	$0x320, %rax
    00000c4c: 	cmpq	$0x3a980, %rax
    00000c52: 	jne	.Ltmp2038 # Offset: 3154
    00000c54: 	addq	$0x10, %rsi
    00000c58: 	addq	$0x10, %rdx
    00000c5c: 	cmpq	%rsi, %r9
    00000c5f: 	jne	.Ltmp2039 # Offset: 3167
    00000c61: 	addq	$0x1, %rdi
    00000c65: 	addq	$0x320, %r9
    00000c6c: 	addq	$0x320, %r8
    00000c73: 	addq	$0x4, %rcx
    00000c77: 	cmpq	$0xc8, %rdi
    00000c7e: 	jne	.Ltmp2040 # Offset: 3198
    00000c80: 	addq	$0x1, %r12
    00000c84: 	cmpq	%r10, %r12
    00000c87: 	jne	.Ltmp2041 # Offset: 3207
.Ltmp2037:
    00000c8d: 	movq	%r15, %rdi
    00000c90: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 3216
    00000c95: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000c9c: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00000ca3: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000caa: 	je	.Ltmp2042 # Offset: 3242
.Ltmp2241:
    00000cb0: 	movq	-0x20(%rax), %rbp
    00000cb4: 	callq	clock@PLT # Offset: 3252
    00000cb9: 	pxor	%xmm0, %xmm0
    00000cbd: 	movq	%rax, end_time(%rip)
    00000cc4: 	movq	%rbp, %rdi
    00000cc7: 	subq	start_time(%rip), %rax
    00000cce: 	cvtsi2sd	%rax, %xmm0
    00000cd3: 	divsd	DATAat0x2da00(%rip), %xmm0
    00000cdb: 	callq	_Z13record_resultdPKc # Offset: 3291
    00000ce0: 	movq	%r13, %rax
    00000ce3: 	pxor	%xmm1, %xmm1
.Ltmp2045:
    00000ce7: 	leaq	0x320(%rax), %rdx
.Ltmp2043:
    00000cee: 	movups	(%rax), %xmm0
    00000cf1: 	addq	$0x10, %rax
    00000cf5: 	addss	%xmm0, %xmm1
    00000cf9: 	movaps	%xmm0, %xmm2
    00000cfc: 	shufps	$0x55, %xmm0, %xmm2
    00000d00: 	addss	%xmm1, %xmm2
    00000d04: 	movaps	%xmm0, %xmm1
    00000d07: 	unpckhps	%xmm0, %xmm1
    00000d0a: 	shufps	$0xff, %xmm0, %xmm0
    00000d0e: 	addss	%xmm2, %xmm1
    00000d12: 	addss	%xmm0, %xmm1
    00000d16: 	cmpq	%rax, %rdx
    00000d19: 	jne	.Ltmp2043 # Offset: 3353
    00000d1b: 	cmpq	%rdx, 0x10(%rsp)
    00000d20: 	je	.Ltmp2044 # Offset: 3360
    00000d22: 	movq	%rdx, %rax
    00000d25: 	jmp	.Ltmp2045 # Offset: 3365
.Ltmp2044:
    00000d27: 	movq	%r15, %rdi
    00000d2a: 	movaps	%xmm1, %xmm0
    00000d2d: 	callq	_Z9check_sumIfEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3373
    00000d32: 	movq	0x110(%rsp), %rdi
    00000d3a: 	cmpq	(%rsp), %rdi
    00000d3e: 	je	.Ltmp2046 # Offset: 3390
    00000d40: 	movq	0x120(%rsp), %rax
    00000d48: 	leaq	0x1(%rax), %rsi
    00000d4c: 	callq	_ZdlPvm@PLT # Offset: 3404
.Ltmp2046:
    00000d51: 	movq	0x18(%rsp), %rsi
    00000d56: 	leaq	DATAat0x2d6df(%rip), %rdx
    00000d5d: 	movq	%r15, %rdi
    00000d60: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3424
    00000d65: 	callq	clock@PLT # Offset: 3429
    00000d6a: 	movq	iterations(%rip), %r12
    00000d71: 	xorl	%ebp, %ebp
    00000d73: 	movq	%rax, start_time(%rip)
    00000d7a: 	testq	%r12, %r12
    00000d7d: 	je	.Ltmp2047 # Offset: 3453
.Ltmp2051:
    00000d7f: 	xorl	%esi, %esi
    00000d81: 	movq	%r13, %rdi
    00000d84: 	movl	$0x3a980, %edx
    00000d89: 	callq	memset@PLT # Offset: 3465
    00000d8e: 	movq	0x8(%rsp), %rdi
    00000d93: 	movq	%r14, %rcx
    00000d96: 	xorl	%esi, %esi
.Ltmp2050:
    00000d98: 	movq	%r13, %rdx
    00000d9b: 	movq	%rdi, %r8
.Ltmp2049:
    00000d9e: 	movss	(%r8), %xmm1
    00000da3: 	xorl	%eax, %eax
    00000da5: 	shufps	$0x0, %xmm1, %xmm1
.Ltmp2048:
    00000da9: 	movups	(%rcx,%rax), %xmm0
    00000dad: 	movups	(%rdx,%rax), %xmm7
    00000db1: 	mulps	%xmm1, %xmm0
    00000db4: 	addps	%xmm7, %xmm0
    00000db7: 	movups	%xmm0, (%rdx,%rax)
    00000dbb: 	addq	$0x10, %rax
    00000dbf: 	cmpq	$0x320, %rax
    00000dc5: 	jne	.Ltmp2048 # Offset: 3525
    00000dc7: 	addq	$0x320, %r8
    00000dce: 	addq	$0x320, %rdx
    00000dd5: 	cmpq	%rdx, 0x10(%rsp)
    00000dda: 	jne	.Ltmp2049 # Offset: 3546
    00000ddc: 	addq	$0x1, %rsi
    00000de0: 	addq	$0x320, %rcx
    00000de7: 	addq	$0x4, %rdi
    00000deb: 	cmpq	$0xc8, %rsi
    00000df2: 	jne	.Ltmp2050 # Offset: 3570
    00000df4: 	addq	$0x1, %rbp
    00000df8: 	cmpq	%r12, %rbp
    00000dfb: 	jne	.Ltmp2051 # Offset: 3579
.Ltmp2047:
    00000dfd: 	movq	%r15, %rdi
    00000e00: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 3584
    00000e05: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000e0c: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00000e13: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000e1a: 	je	.Ltmp2052 # Offset: 3610
.Ltmp2240:
    00000e20: 	movq	-0x20(%rax), %rbp
    00000e24: 	callq	clock@PLT # Offset: 3620
    00000e29: 	pxor	%xmm0, %xmm0
    00000e2d: 	movq	%rax, end_time(%rip)
    00000e34: 	movq	%rbp, %rdi
    00000e37: 	subq	start_time(%rip), %rax
    00000e3e: 	cvtsi2sd	%rax, %xmm0
    00000e43: 	divsd	DATAat0x2da00(%rip), %xmm0
    00000e4b: 	callq	_Z13record_resultdPKc # Offset: 3659
    00000e50: 	movq	%r13, %rax
    00000e53: 	pxor	%xmm1, %xmm1
.Ltmp2055:
    00000e57: 	leaq	0x320(%rax), %rdx
.Ltmp2053:
    00000e5e: 	movups	(%rax), %xmm0
    00000e61: 	addq	$0x10, %rax
    00000e65: 	addss	%xmm0, %xmm1
    00000e69: 	movaps	%xmm0, %xmm2
    00000e6c: 	shufps	$0x55, %xmm0, %xmm2
    00000e70: 	addss	%xmm1, %xmm2
    00000e74: 	movaps	%xmm0, %xmm1
    00000e77: 	unpckhps	%xmm0, %xmm1
    00000e7a: 	shufps	$0xff, %xmm0, %xmm0
    00000e7e: 	addss	%xmm2, %xmm1
    00000e82: 	addss	%xmm0, %xmm1
    00000e86: 	cmpq	%rax, %rdx
    00000e89: 	jne	.Ltmp2053 # Offset: 3721
    00000e8b: 	cmpq	%rdx, 0x10(%rsp)
    00000e90: 	je	.Ltmp2054 # Offset: 3728
    00000e92: 	movq	%rdx, %rax
    00000e95: 	jmp	.Ltmp2055 # Offset: 3733
.Ltmp2054:
    00000e97: 	movq	%r15, %rdi
    00000e9a: 	movaps	%xmm1, %xmm0
    00000e9d: 	callq	_Z9check_sumIfEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3741
    00000ea2: 	movq	0x110(%rsp), %rdi
    00000eaa: 	cmpq	(%rsp), %rdi
    00000eae: 	je	.Ltmp2056 # Offset: 3758
    00000eb0: 	movq	0x120(%rsp), %rax
    00000eb8: 	leaq	0x1(%rax), %rsi
    00000ebc: 	callq	_ZdlPvm@PLT # Offset: 3772
.Ltmp2056:
    00000ec1: 	movq	0x18(%rsp), %rsi
    00000ec6: 	leaq	DATAat0x2d6f9(%rip), %rdx
    00000ecd: 	movq	%r15, %rdi
    00000ed0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3792
    00000ed5: 	callq	clock@PLT # Offset: 3797
    00000eda: 	movq	iterations(%rip), %r9
    00000ee1: 	xorl	%r10d, %r10d
    00000ee4: 	leaq	0x26ac0(%r14), %r12
    00000eeb: 	movq	%rax, start_time(%rip)
    00000ef2: 	leaq	0x27100(%r14), %rbp
    00000ef9: 	testq	%r9, %r9
    00000efc: 	je	.Ltmp2057 # Offset: 3836
    00000f02: 	movq	%r13, %rdi
    00000f05: 	movq	%r15, %r8
    00000f08: 	movq	%r12, %r13
    00000f0b: 	movq	%rbp, %r15
    00000f0e: 	movq	%r9, %r12
    00000f11: 	movq	%rbx, %rbp
    00000f14: 	movq	%r10, %rbx
.Ltmp2063:
    00000f17: 	movl	$0x3a980, %edx
    00000f1c: 	xorl	%esi, %esi
    00000f1e: 	movq	%r8, 0x20(%rsp)
    00000f23: 	callq	memset@PLT # Offset: 3875
    00000f28: 	movq	0x8(%rsp), %rcx
    00000f2d: 	movq	0x20(%rsp), %r8
    00000f32: 	movq	%rax, %rdi
    00000f35: 	movq	%rax, %rdx
.Ltmp2062:
    00000f38: 	movq	%r14, %r9
    00000f3b: 	xorl	%esi, %esi
.Ltmp2059:
    00000f3d: 	movss	(%rcx,%rsi,4), %xmm3
    00000f42: 	movss	0x4(%rcx,%rsi,4), %xmm2
    00000f48: 	leaq	0x320(%r9), %r10
    00000f4f: 	xorl	%eax, %eax
    00000f51: 	shufps	$0x0, %xmm3, %xmm3
    00000f55: 	shufps	$0x0, %xmm2, %xmm2
.Ltmp2058:
    00000f59: 	movups	(%r9,%rax), %xmm0
    00000f5e: 	movups	(%r10,%rax), %xmm1
    00000f63: 	movups	(%rdx,%rax), %xmm5
    00000f67: 	mulps	%xmm3, %xmm0
    00000f6a: 	mulps	%xmm2, %xmm1
    00000f6d: 	addps	%xmm5, %xmm0
    00000f70: 	addps	%xmm1, %xmm0
    00000f73: 	movups	%xmm0, (%rdx,%rax)
    00000f77: 	addq	$0x10, %rax
    00000f7b: 	cmpq	$0x320, %rax
    00000f81: 	jne	.Ltmp2058 # Offset: 3969
    00000f83: 	addq	$0x2, %rsi
    00000f87: 	addq	$0x640, %r9
    00000f8e: 	cmpq	$0xc6, %rsi
    00000f95: 	jne	.Ltmp2059 # Offset: 3989
    00000f97: 	leaq	0x318(%rcx), %r9
    00000f9e: 	movq	%r13, %rsi
.Ltmp2061:
    00000fa1: 	movss	(%r9), %xmm1
    00000fa6: 	xorl	%eax, %eax
    00000fa8: 	shufps	$0x0, %xmm1, %xmm1
.Ltmp2060:
    00000fac: 	movups	(%rsi,%rax), %xmm0
    00000fb0: 	movups	(%rdx,%rax), %xmm4
    00000fb4: 	mulps	%xmm1, %xmm0
    00000fb7: 	addps	%xmm4, %xmm0
    00000fba: 	movups	%xmm0, (%rdx,%rax)
    00000fbe: 	addq	$0x10, %rax
    00000fc2: 	cmpq	$0x320, %rax
    00000fc8: 	jne	.Ltmp2060 # Offset: 4040
    00000fca: 	addq	$0x320, %rsi
    00000fd1: 	addq	$0x4, %r9
    00000fd5: 	cmpq	%rsi, %r15
    00000fd8: 	jne	.Ltmp2061 # Offset: 4056
    00000fda: 	addq	$0x320, %rcx
    00000fe1: 	addq	$0x320, %rdx
    00000fe8: 	cmpq	%rcx, %rbp
    00000feb: 	jne	.Ltmp2062 # Offset: 4075
    00000ff1: 	addq	$0x1, %rbx
    00000ff5: 	cmpq	%r12, %rbx
    00000ff8: 	jne	.Ltmp2063 # Offset: 4088
    00000ffe: 	movq	%rdi, %r13
    00001001: 	movq	%rbp, %rbx
    00001004: 	movq	%r8, %r15
.Ltmp2057:
    00001007: 	movq	%r15, %rdi
    0000100a: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 4106
    0000100f: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001016: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    0000101d: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001024: 	je	.Ltmp2064 # Offset: 4132
.Ltmp2239:
    0000102a: 	movq	-0x20(%rax), %rbp
    0000102e: 	callq	clock@PLT # Offset: 4142
    00001033: 	pxor	%xmm0, %xmm0
    00001037: 	movq	%rax, end_time(%rip)
    0000103e: 	movq	%rbp, %rdi
    00001041: 	subq	start_time(%rip), %rax
    00001048: 	cvtsi2sd	%rax, %xmm0
    0000104d: 	divsd	DATAat0x2da00(%rip), %xmm0
    00001055: 	callq	_Z13record_resultdPKc # Offset: 4181
    0000105a: 	movq	%r13, %rax
    0000105d: 	pxor	%xmm0, %xmm0
.Ltmp2067:
    00001061: 	leaq	0x320(%rax), %rdx
.Ltmp2065:
    00001068: 	movups	(%rax), %xmm2
    0000106b: 	addq	$0x10, %rax
    0000106f: 	addss	%xmm2, %xmm0
    00001073: 	movaps	%xmm2, %xmm1
    00001076: 	shufps	$0x55, %xmm2, %xmm1
    0000107a: 	addss	%xmm0, %xmm1
    0000107e: 	movaps	%xmm2, %xmm0
    00001081: 	unpckhps	%xmm2, %xmm0
    00001084: 	shufps	$0xff, %xmm2, %xmm2
    00001088: 	addss	%xmm1, %xmm0
    0000108c: 	addss	%xmm2, %xmm0
    00001090: 	cmpq	%rax, %rdx
    00001093: 	jne	.Ltmp2065 # Offset: 4243
    00001095: 	cmpq	%rdx, 0x10(%rsp)
    0000109a: 	je	.Ltmp2066 # Offset: 4250
    0000109c: 	movq	%rdx, %rax
    0000109f: 	jmp	.Ltmp2067 # Offset: 4255
.Ltmp2066:
    000010a1: 	movq	%r15, %rdi
    000010a4: 	callq	_Z9check_sumIfEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4260
    000010a9: 	movq	0x110(%rsp), %rdi
    000010b1: 	cmpq	(%rsp), %rdi
    000010b5: 	je	.Ltmp2068 # Offset: 4277
    000010b7: 	movq	0x120(%rsp), %rax
    000010bf: 	leaq	0x1(%rax), %rsi
    000010c3: 	callq	_ZdlPvm@PLT # Offset: 4291
.Ltmp2068:
    000010c8: 	movq	0x18(%rsp), %rsi
    000010cd: 	leaq	DATAat0x2d713(%rip), %rdx
    000010d4: 	movq	%r15, %rdi
    000010d7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4311
    000010dc: 	callq	clock@PLT # Offset: 4316
    000010e1: 	movq	iterations(%rip), %r10
    000010e8: 	xorl	%r12d, %r12d
    000010eb: 	leaq	0x27100(%r14), %rbp
    000010f2: 	movq	%rax, start_time(%rip)
    000010f9: 	testq	%r10, %r10
    000010fc: 	je	.Ltmp2069 # Offset: 4348
    00001102: 	movq	%r13, %r8
    00001105: 	movq	%rbp, %r13
    00001108: 	movq	%r10, %rbp
.Ltmp2073:
    0000110b: 	movq	%r8, %rdi
    0000110e: 	xorl	%esi, %esi
    00001110: 	movl	$0x3a980, %edx
    00001115: 	callq	memset@PLT # Offset: 4373
    0000111a: 	movq	0x8(%rsp), %rdi
    0000111f: 	movq	%rax, %r8
    00001122: 	movq	%rax, %rsi
.Ltmp2072:
    00001125: 	movq	%r13, %r9
    00001128: 	movq	%r14, %r10
    0000112b: 	xorl	%ecx, %ecx
.Ltmp2071:
    0000112d: 	movq	%rdi, %rdx
    00001130: 	movq	%r10, %rax
    00001133: 	pxor	%xmm1, %xmm1
.Ltmp2070:
    00001137: 	movss	(%rdx), %xmm0
    0000113b: 	movups	(%rax), %xmm7
    0000113e: 	addq	$0x320, %rax
    00001144: 	addq	$0x4, %rdx
    00001148: 	shufps	$0x0, %xmm0, %xmm0
    0000114c: 	mulps	%xmm7, %xmm0
    0000114f: 	addps	%xmm0, %xmm1
    00001152: 	cmpq	%rax, %r9
    00001155: 	jne	.Ltmp2070 # Offset: 4437
    00001157: 	movups	(%rsi,%rcx), %xmm0
    0000115b: 	addq	$0x10, %r10
    0000115f: 	addq	$0x10, %r9
    00001163: 	addps	%xmm1, %xmm0
    00001166: 	movups	%xmm0, (%rsi,%rcx)
    0000116a: 	addq	$0x10, %rcx
    0000116e: 	cmpq	$0x320, %rcx
    00001175: 	jne	.Ltmp2071 # Offset: 4469
    00001177: 	addq	$0x320, %rdi
    0000117e: 	addq	$0x320, %rsi
    00001185: 	cmpq	%rbx, %rdi
    00001188: 	jne	.Ltmp2072 # Offset: 4488
    0000118a: 	addq	$0x1, %r12
    0000118e: 	cmpq	%rbp, %r12
    00001191: 	jne	.Ltmp2073 # Offset: 4497
    00001197: 	movq	%r8, %r13
.Ltmp2069:
    0000119a: 	movq	%r15, %rdi
    0000119d: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 4509
    000011a2: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000011a9: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    000011b0: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000011b7: 	je	.Ltmp2074 # Offset: 4535
.Ltmp2238:
    000011bd: 	movq	-0x20(%rax), %rbp
    000011c1: 	callq	clock@PLT # Offset: 4545
    000011c6: 	pxor	%xmm0, %xmm0
    000011ca: 	movq	%rax, end_time(%rip)
    000011d1: 	movq	%rbp, %rdi
    000011d4: 	subq	start_time(%rip), %rax
    000011db: 	cvtsi2sd	%rax, %xmm0
    000011e0: 	divsd	DATAat0x2da00(%rip), %xmm0
    000011e8: 	callq	_Z13record_resultdPKc # Offset: 4584
    000011ed: 	movq	%r13, %rax
    000011f0: 	pxor	%xmm0, %xmm0
.Ltmp2076:
    000011f4: 	leaq	0x320(%rax), %rdx
.Ltmp2075:
    000011fb: 	movups	(%rax), %xmm2
    000011fe: 	addq	$0x10, %rax
    00001202: 	addss	%xmm2, %xmm0
    00001206: 	movaps	%xmm2, %xmm1
    00001209: 	shufps	$0x55, %xmm2, %xmm1
    0000120d: 	addss	%xmm0, %xmm1
    00001211: 	movaps	%xmm2, %xmm0
    00001214: 	unpckhps	%xmm2, %xmm0
    00001217: 	shufps	$0xff, %xmm2, %xmm2
    0000121b: 	addss	%xmm1, %xmm0
    0000121f: 	addss	%xmm2, %xmm0
    00001223: 	cmpq	%rdx, %rax
    00001226: 	jne	.Ltmp2075 # Offset: 4646
    00001228: 	cmpq	%rax, 0x10(%rsp)
    0000122d: 	jne	.Ltmp2076 # Offset: 4653
    0000122f: 	movq	%r15, %rdi
    00001232: 	callq	_Z9check_sumIfEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4658
    00001237: 	movq	0x110(%rsp), %rdi
    0000123f: 	cmpq	(%rsp), %rdi
    00001243: 	je	.Ltmp2077 # Offset: 4675
    00001245: 	movq	0x120(%rsp), %rax
    0000124d: 	leaq	0x1(%rax), %rsi
    00001251: 	callq	_ZdlPvm@PLT # Offset: 4689
.Ltmp2077:
    00001256: 	movq	0x18(%rsp), %rsi
    0000125b: 	leaq	DATAat0x2d72d(%rip), %rdx
    00001262: 	movq	%r15, %rdi
    00001265: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4709
    0000126a: 	callq	clock@PLT # Offset: 4714
    0000126f: 	movq	iterations(%rip), %r11
    00001276: 	xorl	%r12d, %r12d
    00001279: 	movq	%rax, start_time(%rip)
    00001280: 	movq	0x8(%rsp), %rax
    00001285: 	leaq	0x320(%rax), %rbp
    0000128c: 	testq	%r11, %r11
    0000128f: 	je	.Ltmp2078 # Offset: 4751
    00001295: 	movq	%r13, %r8
    00001298: 	movq	%rbp, %r13
    0000129b: 	movq	%r11, %rbp
.Ltmp2082:
    0000129e: 	movq	%r8, %rdi
    000012a1: 	movl	$0x3a980, %edx
    000012a6: 	xorl	%esi, %esi
    000012a8: 	callq	memset@PLT # Offset: 4776
    000012ad: 	movq	%r14, %r10
    000012b0: 	xorl	%r9d, %r9d
    000012b3: 	movq	%rax, %r8
    000012b6: 	movq	%rax, %r11
.Ltmp2081:
    000012b9: 	movq	0x8(%rsp), %rdi
    000012be: 	movq	%r13, %rcx
    000012c1: 	movq	%r11, %rsi
.Ltmp2080:
    000012c4: 	movq	%r10, %rax
    000012c7: 	movq	%rdi, %rdx
    000012ca: 	pxor	%xmm1, %xmm1
.Ltmp2079:
    000012ce: 	movss	0x960(%rax), %xmm0
    000012d6: 	movups	(%rdx), %xmm5
    000012d9: 	addq	$0x10, %rdx
    000012dd: 	addq	$0xc80, %rax
    000012e3: 	movss	-0x640(%rax), %xmm2
    000012eb: 	movss	-0x960(%rax), %xmm3
    000012f3: 	unpcklps	%xmm0, %xmm2
    000012f6: 	movss	-0xc80(%rax), %xmm0
    000012fe: 	unpcklps	%xmm3, %xmm0
    00001301: 	movlhps	%xmm2, %xmm0
    00001304: 	mulps	%xmm5, %xmm0
    00001307: 	addss	%xmm0, %xmm1
    0000130b: 	movaps	%xmm0, %xmm2
    0000130e: 	shufps	$0x55, %xmm0, %xmm2
    00001312: 	addss	%xmm1, %xmm2
    00001316: 	movaps	%xmm0, %xmm1
    00001319: 	unpckhps	%xmm0, %xmm1
    0000131c: 	shufps	$0xff, %xmm0, %xmm0
    00001320: 	addss	%xmm2, %xmm1
    00001324: 	addss	%xmm0, %xmm1
    00001328: 	cmpq	%rdx, %rcx
    0000132b: 	jne	.Ltmp2079 # Offset: 4907
    0000132d: 	addss	(%rsi), %xmm1
    00001331: 	addq	$0x320, %rdi
    00001338: 	addq	$0x320, %rsi
    0000133f: 	addq	$0x320, %rcx
    00001346: 	movss	%xmm1, -0x320(%rsi)
    0000134e: 	cmpq	%rbx, %rdi
    00001351: 	jne	.Ltmp2080 # Offset: 4945
    00001357: 	addq	$0x1, %r9
    0000135b: 	addq	$0x4, %r10
    0000135f: 	addq	$0x4, %r11
    00001363: 	cmpq	$0xc8, %r9
    0000136a: 	jne	.Ltmp2081 # Offset: 4970
    00001370: 	addq	$0x1, %r12
    00001374: 	cmpq	%rbp, %r12
    00001377: 	jne	.Ltmp2082 # Offset: 4983
    0000137d: 	movq	%r8, %r13
.Ltmp2078:
    00001380: 	movq	%r15, %rdi
    00001383: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 4995
    00001388: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000138f: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00001396: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000139d: 	je	.Ltmp2083 # Offset: 5021
.Ltmp2237:
    000013a3: 	movq	-0x20(%rax), %rbp
    000013a7: 	callq	clock@PLT # Offset: 5031
    000013ac: 	pxor	%xmm0, %xmm0
    000013b0: 	movq	%rax, end_time(%rip)
    000013b7: 	movq	%rbp, %rdi
    000013ba: 	subq	start_time(%rip), %rax
    000013c1: 	cvtsi2sd	%rax, %xmm0
    000013c6: 	divsd	DATAat0x2da00(%rip), %xmm0
    000013ce: 	callq	_Z13record_resultdPKc # Offset: 5070
    000013d3: 	movq	%r13, %rax
    000013d6: 	pxor	%xmm0, %xmm0
.Ltmp2085:
    000013da: 	leaq	0x320(%rax), %rdx
.Ltmp2084:
    000013e1: 	movups	(%rax), %xmm2
    000013e4: 	addq	$0x10, %rax
    000013e8: 	addss	%xmm2, %xmm0
    000013ec: 	movaps	%xmm2, %xmm1
    000013ef: 	shufps	$0x55, %xmm2, %xmm1
    000013f3: 	addss	%xmm0, %xmm1
    000013f7: 	movaps	%xmm2, %xmm0
    000013fa: 	unpckhps	%xmm2, %xmm0
    000013fd: 	shufps	$0xff, %xmm2, %xmm2
    00001401: 	addss	%xmm1, %xmm0
    00001405: 	addss	%xmm2, %xmm0
    00001409: 	cmpq	%rdx, %rax
    0000140c: 	jne	.Ltmp2084 # Offset: 5132
    0000140e: 	cmpq	%rax, 0x10(%rsp)
    00001413: 	jne	.Ltmp2085 # Offset: 5139
    00001415: 	movq	%r15, %rdi
    00001418: 	callq	_Z9check_sumIfEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5144
    0000141d: 	movq	0x110(%rsp), %rdi
    00001425: 	cmpq	(%rsp), %rdi
    00001429: 	je	.Ltmp2086 # Offset: 5161
    0000142b: 	movq	0x120(%rsp), %rax
    00001433: 	leaq	0x1(%rax), %rsi
    00001437: 	callq	_ZdlPvm@PLT # Offset: 5175
.Ltmp2086:
    0000143c: 	movq	0x18(%rsp), %rsi
    00001441: 	leaq	DATAat0x2d747(%rip), %rdx
    00001448: 	movq	%r15, %rdi
    0000144b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5195
    00001450: 	callq	clock@PLT # Offset: 5200
    00001455: 	movq	%rax, start_time(%rip)
    0000145c: 	movq	iterations(%rip), %rax
    00001463: 	movq	%rax, 0x28(%rsp)
    00001468: 	testq	%rax, %rax
    0000146b: 	je	.Ltmp2087 # Offset: 5227
    00001471: 	movq	0x8(%rsp), %rax
    00001476: 	leaq	0x26ac0(%r14), %r12
    0000147d: 	movq	$0x0, 0x20(%rsp)
    00001486: 	leaq	0x27100(%r14), %rbp
    0000148d: 	addq	$0x318, %rax
    00001493: 	movq	%rax, 0x30(%rsp)
.Ltmp2093:
    00001498: 	movl	$0x3a980, %edx
    0000149d: 	xorl	%esi, %esi
    0000149f: 	movq	%r13, %rdi
    000014a2: 	callq	memset@PLT # Offset: 5282
    000014a7: 	movq	0x10(%rsp), %r9
    000014ac: 	movq	%r12, %r10
    000014af: 	movq	%rbp, %rcx
    000014b2: 	xorl	%r8d, %r8d
.Ltmp2092:
    000014b5: 	movq	0x8(%rsp), %rbx
    000014ba: 	leaq	-0x27100(%rcx), %rsi
    000014c1: 	xorl	%r11d, %r11d
.Ltmp2089:
    000014c4: 	movss	(%rsi), %xmm2
    000014c8: 	movss	0x320(%rsi), %xmm1
    000014d0: 	movq	%rbx, %rdi
    000014d3: 	movq	%rax, %rdx
.Ltmp2088:
    000014d6: 	movss	0x4(%rdi), %xmm3
    000014db: 	movss	(%rdi), %xmm0
    000014df: 	addq	$0x320, %rdx
    000014e6: 	addq	$0x320, %rdi
    000014ed: 	mulss	%xmm1, %xmm3
    000014f1: 	mulss	%xmm2, %xmm0
    000014f5: 	addss	-0x320(%rdx), %xmm0
    000014fd: 	addss	%xmm3, %xmm0
    00001501: 	movss	%xmm0, -0x320(%rdx)
    00001509: 	cmpq	%r9, %rdx
    0000150c: 	jne	.Ltmp2088 # Offset: 5388
    0000150e: 	addq	$0x2, %r11
    00001512: 	addq	$0x640, %rsi
    00001519: 	addq	$0x8, %rbx
    0000151d: 	cmpq	$0xc6, %r11
    00001524: 	jne	.Ltmp2089 # Offset: 5412
    00001526: 	movq	0x30(%rsp), %r11
    0000152b: 	xorl	%edi, %edi
.Ltmp2091:
    0000152d: 	movss	(%rax,%rdi,4), %xmm1
    00001532: 	movq	%r11, %rsi
    00001535: 	movq	%r10, %rdx
.Ltmp2090:
    00001538: 	movss	(%rsi), %xmm0
    0000153c: 	mulss	(%rdx), %xmm0
    00001540: 	addq	$0x320, %rdx
    00001547: 	addq	$0x4, %rsi
    0000154b: 	addss	%xmm0, %xmm1
    0000154f: 	cmpq	%rcx, %rdx
    00001552: 	jne	.Ltmp2090 # Offset: 5458
    00001554: 	movss	%xmm1, (%rax,%rdi,4)
    00001559: 	addq	$0xc8, %rdi
    00001560: 	addq	$0x320, %r11
    00001567: 	cmpq	$0xea60, %rdi
    0000156e: 	jne	.Ltmp2091 # Offset: 5486
    00001570: 	addq	$0x1, %r8
    00001574: 	addq	$0x4, %r10
    00001578: 	addq	$0x4, %rax
    0000157c: 	addq	$0x4, %r9
    00001580: 	leaq	0x4(%rdx), %rcx
    00001584: 	cmpq	$0xc8, %r8
    0000158b: 	jne	.Ltmp2092 # Offset: 5515
    00001591: 	addq	$0x1, 0x20(%rsp)
    00001597: 	movq	0x20(%rsp), %rax
    0000159c: 	cmpq	0x28(%rsp), %rax
    000015a1: 	jne	.Ltmp2093 # Offset: 5537
.Ltmp2087:
    000015a7: 	movq	%r15, %rdi
    000015aa: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 5546
    000015af: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000015b6: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    000015bd: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000015c4: 	je	.Ltmp2094 # Offset: 5572
.Ltmp2236:
    000015ca: 	movq	-0x20(%rax), %rbp
    000015ce: 	callq	clock@PLT # Offset: 5582
    000015d3: 	pxor	%xmm0, %xmm0
    000015d7: 	movq	%rax, end_time(%rip)
    000015de: 	movq	%rbp, %rdi
    000015e1: 	subq	start_time(%rip), %rax
    000015e8: 	cvtsi2sd	%rax, %xmm0
    000015ed: 	divsd	DATAat0x2da00(%rip), %xmm0
    000015f5: 	callq	_Z13record_resultdPKc # Offset: 5621
    000015fa: 	movq	%r13, %rax
    000015fd: 	pxor	%xmm0, %xmm0
.Ltmp2096:
    00001601: 	leaq	0x320(%rax), %rdx
.Ltmp2095:
    00001608: 	movups	(%rax), %xmm2
    0000160b: 	addq	$0x10, %rax
    0000160f: 	addss	%xmm2, %xmm0
    00001613: 	movaps	%xmm2, %xmm1
    00001616: 	shufps	$0x55, %xmm2, %xmm1
    0000161a: 	addss	%xmm0, %xmm1
    0000161e: 	movaps	%xmm2, %xmm0
    00001621: 	unpckhps	%xmm2, %xmm0
    00001624: 	shufps	$0xff, %xmm2, %xmm2
    00001628: 	addss	%xmm1, %xmm0
    0000162c: 	addss	%xmm2, %xmm0
    00001630: 	cmpq	%rdx, %rax
    00001633: 	jne	.Ltmp2095 # Offset: 5683
    00001635: 	cmpq	%rax, 0x10(%rsp)
    0000163a: 	jne	.Ltmp2096 # Offset: 5690
    0000163c: 	movq	%r15, %rdi
    0000163f: 	callq	_Z9check_sumIfEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5695
    00001644: 	movq	0x110(%rsp), %rdi
    0000164c: 	cmpq	(%rsp), %rdi
    00001650: 	je	.Ltmp2097 # Offset: 5712
    00001652: 	movq	0x120(%rsp), %rax
    0000165a: 	leaq	0x1(%rax), %rsi
    0000165e: 	callq	_ZdlPvm@PLT # Offset: 5726
.Ltmp2097:
    00001663: 	movq	0x18(%rsp), %rsi
    00001668: 	leaq	DATAat0x2d761(%rip), %rdx
    0000166f: 	movq	%r15, %rdi
    00001672: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5746
    00001677: 	callq	clock@PLT # Offset: 5751
    0000167c: 	movq	iterations(%rip), %rbp
    00001683: 	movq	%rax, start_time(%rip)
    0000168a: 	testq	%rbp, %rbp
    0000168d: 	je	.Ltmp2098 # Offset: 5773
    0000168f: 	xorl	%ebx, %ebx
.Ltmp2099:
    00001691: 	movl	$0x3a980, %edx
    00001696: 	xorl	%esi, %esi
    00001698: 	movq	%r13, %rdi
    0000169b: 	addq	$0x1, %rbx
    0000169f: 	callq	memset@PLT # Offset: 5791
    000016a4: 	movq	0x8(%rsp), %rdi
    000016a9: 	movq	%r13, %rdx
    000016ac: 	movq	%r14, %rsi
    000016af: 	movl	$0xc8, %r8d
    000016b5: 	movl	$0x12c, %ecx
    000016ba: 	callq	"_ZN19matmul_KJI_unrolledIfEclEPKfS2_Pfmm.isra.0/1" # Offset: 5818
    000016bf: 	cmpq	%rbp, %rbx
    000016c2: 	jne	.Ltmp2099 # Offset: 5826
.Ltmp2098:
    000016c4: 	movq	%r15, %rdi
    000016c7: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 5831
    000016cc: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000016d3: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    000016da: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000016e1: 	je	.Ltmp2100 # Offset: 5857
.Ltmp2235:
    000016e7: 	movq	-0x20(%rax), %rbp
    000016eb: 	callq	clock@PLT # Offset: 5867
    000016f0: 	pxor	%xmm0, %xmm0
    000016f4: 	movq	%rax, end_time(%rip)
    000016fb: 	movq	%rbp, %rdi
    000016fe: 	subq	start_time(%rip), %rax
    00001705: 	cvtsi2sd	%rax, %xmm0
    0000170a: 	divsd	DATAat0x2da00(%rip), %xmm0
    00001712: 	callq	_Z13record_resultdPKc # Offset: 5906
    00001717: 	movq	%r13, %rax
    0000171a: 	pxor	%xmm0, %xmm0
.Ltmp2103:
    0000171e: 	leaq	0x320(%rax), %rdx
.Ltmp2101:
    00001725: 	movups	(%rax), %xmm2
    00001728: 	addq	$0x10, %rax
    0000172c: 	addss	%xmm2, %xmm0
    00001730: 	movaps	%xmm2, %xmm1
    00001733: 	shufps	$0x55, %xmm2, %xmm1
    00001737: 	addss	%xmm0, %xmm1
    0000173b: 	movaps	%xmm2, %xmm0
    0000173e: 	unpckhps	%xmm2, %xmm0
    00001741: 	shufps	$0xff, %xmm2, %xmm2
    00001745: 	addss	%xmm1, %xmm0
    00001749: 	addss	%xmm2, %xmm0
    0000174d: 	cmpq	%rax, %rdx
    00001750: 	jne	.Ltmp2101 # Offset: 5968
    00001752: 	cmpq	%rdx, 0x10(%rsp)
    00001757: 	je	.Ltmp2102 # Offset: 5975
    00001759: 	movq	%rdx, %rax
    0000175c: 	jmp	.Ltmp2103 # Offset: 5980
.Ltmp2102:
    0000175e: 	movq	%r15, %rdi
    00001761: 	callq	_Z9check_sumIfEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5985
    00001766: 	movq	0x110(%rsp), %rdi
    0000176e: 	cmpq	(%rsp), %rdi
    00001772: 	je	.Ltmp2104 # Offset: 6002
    00001774: 	movq	0x120(%rsp), %rax
    0000177c: 	leaq	0x1(%rax), %rsi
    00001780: 	callq	_ZdlPvm@PLT # Offset: 6016
.Ltmp2104:
    00001785: 	movq	0x18(%rsp), %rsi
    0000178a: 	leaq	DATAat0x2d77f(%rip), %rdx
    00001791: 	movq	%r15, %rdi
    00001794: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6036
    00001799: 	callq	clock@PLT # Offset: 6041
    0000179e: 	movq	iterations(%rip), %rbp
    000017a5: 	movq	%rax, start_time(%rip)
    000017ac: 	testq	%rbp, %rbp
    000017af: 	je	.Ltmp2105 # Offset: 6063
    000017b1: 	xorl	%ebx, %ebx
.Ltmp2106:
    000017b3: 	movl	$0x3a980, %edx
    000017b8: 	xorl	%esi, %esi
    000017ba: 	movq	%r13, %rdi
    000017bd: 	addq	$0x1, %rbx
    000017c1: 	callq	memset@PLT # Offset: 6081
    000017c6: 	movq	0x8(%rsp), %rdi
    000017cb: 	movq	%r13, %rdx
    000017ce: 	movq	%r14, %rsi
    000017d1: 	movl	$0xc8, %r8d
    000017d7: 	movl	$0x12c, %ecx
    000017dc: 	callq	"_ZN19matmul_JKI_unrolledIfEclEPKfS2_Pfmm.isra.0/1" # Offset: 6108
    000017e1: 	cmpq	%rbp, %rbx
    000017e4: 	jne	.Ltmp2106 # Offset: 6116
.Ltmp2105:
    000017e6: 	movq	%r15, %rdi
    000017e9: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 6121
    000017ee: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000017f5: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    000017fc: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001803: 	je	.Ltmp2107 # Offset: 6147
.Ltmp2234:
    00001809: 	movq	-0x20(%rax), %rbp
    0000180d: 	callq	clock@PLT # Offset: 6157
    00001812: 	pxor	%xmm0, %xmm0
    00001816: 	movq	%rax, end_time(%rip)
    0000181d: 	movq	%rbp, %rdi
    00001820: 	subq	start_time(%rip), %rax
    00001827: 	cvtsi2sd	%rax, %xmm0
    0000182c: 	divsd	DATAat0x2da00(%rip), %xmm0
    00001834: 	callq	_Z13record_resultdPKc # Offset: 6196
    00001839: 	movq	%r13, %rax
    0000183c: 	pxor	%xmm0, %xmm0
.Ltmp2109:
    00001840: 	leaq	0x320(%rax), %rdx
.Ltmp2108:
    00001847: 	movups	(%rax), %xmm2
    0000184a: 	addq	$0x10, %rax
    0000184e: 	addss	%xmm2, %xmm0
    00001852: 	movaps	%xmm2, %xmm1
    00001855: 	shufps	$0x55, %xmm2, %xmm1
    00001859: 	addss	%xmm0, %xmm1
    0000185d: 	movaps	%xmm2, %xmm0
    00001860: 	unpckhps	%xmm2, %xmm0
    00001863: 	shufps	$0xff, %xmm2, %xmm2
    00001867: 	addss	%xmm1, %xmm0
    0000186b: 	addss	%xmm2, %xmm0
    0000186f: 	cmpq	%rdx, %rax
    00001872: 	jne	.Ltmp2108 # Offset: 6258
    00001874: 	cmpq	%rax, 0x10(%rsp)
    00001879: 	jne	.Ltmp2109 # Offset: 6265
    0000187b: 	movq	%r15, %rdi
    0000187e: 	callq	_Z9check_sumIfEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6270
    00001883: 	movq	0x110(%rsp), %rdi
    0000188b: 	cmpq	(%rsp), %rdi
    0000188f: 	je	.Ltmp2110 # Offset: 6287
    00001891: 	movq	0x120(%rsp), %rax
    00001899: 	leaq	0x1(%rax), %rsi
    0000189d: 	callq	_ZdlPvm@PLT # Offset: 6301
.Ltmp2110:
    000018a2: 	movq	0x18(%rsp), %rsi
    000018a7: 	leaq	DATAat0x2d79d(%rip), %rdx
    000018ae: 	movq	%r15, %rdi
    000018b1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6321
    000018b6: 	callq	clock@PLT # Offset: 6326
    000018bb: 	movq	$0x0, 0x30(%rsp)
    000018c4: 	movq	%rax, start_time(%rip)
    000018cb: 	movq	iterations(%rip), %rax
    000018d2: 	movq	%rax, 0x78(%rsp)
    000018d7: 	testq	%rax, %rax
    000018da: 	je	.Ltmp2111 # Offset: 6362
    000018e0: 	movq	%r13, 0x38(%rsp)
    000018e5: 	movq	%r15, 0xa0(%rsp)
    000018ed: 	movq	%r14, %r15
.Ltmp2120:
    000018f0: 	movq	0x38(%rsp), %rdi
    000018f5: 	movl	$0x3a980, %edx
    000018fa: 	xorl	%esi, %esi
    000018fc: 	xorl	%r14d, %r14d
    000018ff: 	callq	memset@PLT # Offset: 6399
.Ltmp2119:
    00001904: 	movq	%r14, %rcx
    00001907: 	movl	$0xc8, %eax
    0000190c: 	movq	%r14, 0x58(%rsp)
    00001911: 	subq	$-0x80, %r14
    00001915: 	cmpq	%rax, %r14
    00001918: 	movq	%r14, 0xa8(%rsp)
    00001920: 	cmovbeq	%r14, %rax
    00001924: 	xorl	%r13d, %r13d
    00001927: 	movq	%rax, 0x20(%rsp)
    0000192c: 	leaq	(%r15,%rcx,4), %rax
    00001930: 	movq	%rax, 0x50(%rsp)
.Ltmp2118:
    00001935: 	movl	$0xc8, %edx
    0000193a: 	movq	%r13, %r8
    0000193d: 	subq	$-0x80, %r13
    00001941: 	movq	0x58(%rsp), %rcx
    00001946: 	cmpq	%rdx, %r13
    00001949: 	cmovbeq	%r13, %rdx
    0000194d: 	cmpq	%rcx, 0x20(%rsp)
    00001952: 	jbe	.Ltmp2112 # Offset: 6482
    00001958: 	movq	0x8(%rsp), %rax
    0000195d: 	movq	%rdx, %r9
    00001960: 	movq	%r13, 0xb0(%rsp)
    00001968: 	subq	%r8, %r9
    0000196b: 	leaq	(%rax,%r8,4), %r10
    0000196f: 	movq	%r9, %rax
    00001972: 	leaq	-0x1(%r9), %rcx
    00001976: 	movq	%r9, %rbx
    00001979: 	shrq	$0x2, %rax
    0000197d: 	andq	$-0x4, %rbx
    00001981: 	movq	%rcx, 0x68(%rsp)
    00001986: 	shlq	$0x4, %rax
    0000198a: 	cmpq	$0x2, %rcx
    0000198e: 	movq	0x38(%rsp), %rcx
    00001993: 	movq	%rax, 0x70(%rsp)
    00001998: 	leaq	(%r8,%rbx), %rax
    0000199c: 	cmovbeq	%r8, %rax
    000019a0: 	xorl	%r12d, %r12d
    000019a3: 	movq	%rax, %rbp
    000019a6: 	leaq	(%rax,%rax,4), %rax
    000019aa: 	leaq	(%rax,%rax,4), %rax
    000019ae: 	leaq	(,%rax,8), %r14
    000019b6: 	leaq	0x1(%rbp), %rax
    000019ba: 	movq	%rax, 0x28(%rsp)
    000019bf: 	leaq	0xc8(%r14), %rax
    000019c6: 	movq	%rax, 0x98(%rsp)
    000019ce: 	leaq	0x2(%rbp), %rax
    000019d2: 	movq	%rax, 0x40(%rsp)
    000019d7: 	leaq	0x190(%r14), %rax
    000019de: 	movq	%rax, 0x88(%rsp)
.Ltmp2117:
    000019e6: 	movq	0x70(%rsp), %rax
    000019eb: 	movq	0x8(%rsp), %rsi
    000019f0: 	addq	%r10, %rax
    000019f3: 	movq	%rax, 0x90(%rsp)
    000019fb: 	leaq	(%r12,%rbp), %rax
    000019ff: 	leaq	(%rsi,%rax,4), %r13
    00001a03: 	movq	0x28(%rsp), %rax
    00001a08: 	addq	%r12, %rax
    00001a0b: 	leaq	(%rsi,%rax,4), %rax
    00001a0f: 	movq	%rax, 0x60(%rsp)
    00001a14: 	movq	0x40(%rsp), %rax
    00001a19: 	addq	%r12, %rax
    00001a1c: 	leaq	(%rsi,%rax,4), %rax
    00001a20: 	movq	0x50(%rsp), %rsi
    00001a25: 	movq	%rax, 0x80(%rsp)
    00001a2d: 	movq	0x58(%rsp), %rax
    00001a32: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2116:
    00001a38: 	pxor	%xmm0, %xmm0
    00001a3c: 	cmpq	%rdx, %r8
    00001a3f: 	jae	.Ltmp2113 # Offset: 6719
    00001a45: 	cmpq	$0x2, 0x68(%rsp)
    00001a4b: 	jbe	.Ltmp2114 # Offset: 6731
    00001a51: 	movq	%rsi, %rdi
    00001a54: 	movq	%r10, %r11
    00001a57: 	pxor	%xmm0, %xmm0
.Ltmp2115:
    00001a5b: 	movss	0x960(%rdi), %xmm2
    00001a63: 	movss	0x640(%rdi), %xmm1
    00001a6b: 	addq	$0x10, %r11
    00001a6f: 	addq	$0xc80, %rdi
    00001a76: 	movss	-0x960(%rdi), %xmm3
    00001a7e: 	movups	-0x10(%r11), %xmm6
    00001a83: 	unpcklps	%xmm2, %xmm1
    00001a86: 	movss	-0xc80(%rdi), %xmm2
    00001a8e: 	unpcklps	%xmm3, %xmm2
    00001a91: 	movlhps	%xmm1, %xmm2
    00001a94: 	mulps	%xmm6, %xmm2
    00001a97: 	addss	%xmm2, %xmm0
    00001a9b: 	movaps	%xmm2, %xmm1
    00001a9e: 	shufps	$0x55, %xmm2, %xmm1
    00001aa2: 	addss	%xmm0, %xmm1
    00001aa6: 	movaps	%xmm2, %xmm0
    00001aa9: 	unpckhps	%xmm2, %xmm0
    00001aac: 	shufps	$0xff, %xmm2, %xmm2
    00001ab0: 	addss	%xmm1, %xmm0
    00001ab4: 	addss	%xmm2, %xmm0
    00001ab8: 	cmpq	0x90(%rsp), %r11
    00001ac0: 	jne	.Ltmp2115 # Offset: 6848
    00001ac2: 	cmpq	%rbx, %r9
    00001ac5: 	je	.Ltmp2113 # Offset: 6853
.Ltmp2139:
    00001ac7: 	leaq	(%r14,%rax), %rdi
    00001acb: 	movss	(%r15,%rdi,4), %xmm1
    00001ad1: 	mulss	(%r13), %xmm1
    00001ad7: 	addss	%xmm1, %xmm0
    00001adb: 	cmpq	%rdx, 0x28(%rsp)
    00001ae0: 	jae	.Ltmp2113 # Offset: 6880
    00001ae2: 	movq	0x98(%rsp), %rdi
    00001aea: 	addq	%rax, %rdi
    00001aed: 	movss	(%r15,%rdi,4), %xmm1
    00001af3: 	movq	0x60(%rsp), %rdi
    00001af8: 	mulss	(%rdi), %xmm1
    00001afc: 	addss	%xmm1, %xmm0
    00001b00: 	cmpq	%rdx, 0x40(%rsp)
    00001b05: 	jae	.Ltmp2113 # Offset: 6917
    00001b07: 	movq	0x88(%rsp), %rdi
    00001b0f: 	addq	%rax, %rdi
    00001b12: 	movss	(%r15,%rdi,4), %xmm1
    00001b18: 	movq	0x80(%rsp), %rdi
    00001b20: 	mulss	(%rdi), %xmm1
    00001b24: 	addss	%xmm1, %xmm0
    00001b28: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2113:
    00001b30: 	addss	(%rcx,%rax,4), %xmm0
    00001b35: 	addq	$0x4, %rsi
    00001b39: 	movss	%xmm0, (%rcx,%rax,4)
    00001b3e: 	addq	$0x1, %rax
    00001b42: 	cmpq	%rax, 0x20(%rsp)
    00001b47: 	jne	.Ltmp2116 # Offset: 6983
    00001b4d: 	addq	$0xc8, %r12
    00001b54: 	addq	$0x320, %rcx
    00001b5b: 	addq	$0x320, %r10
    00001b62: 	cmpq	0x10(%rsp), %rcx
    00001b67: 	jne	.Ltmp2117 # Offset: 7015
    00001b6d: 	movq	0xb0(%rsp), %r13
.Ltmp2112:
    00001b75: 	addq	$0x19000, 0x50(%rsp)
    00001b7e: 	cmpq	$0x100, %r13
    00001b85: 	jne	.Ltmp2118 # Offset: 7045
    00001b8b: 	movq	0xa8(%rsp), %r14
    00001b93: 	cmpq	$0x100, %r14
    00001b9a: 	jne	.Ltmp2119 # Offset: 7066
    00001ba0: 	addq	$0x1, 0x30(%rsp)
    00001ba6: 	movq	0x30(%rsp), %rax
    00001bab: 	cmpq	0x78(%rsp), %rax
    00001bb0: 	jne	.Ltmp2120 # Offset: 7088
    00001bb6: 	movq	%r15, %r14
    00001bb9: 	movq	0x38(%rsp), %r13
    00001bbe: 	movq	0xa0(%rsp), %r15
.Ltmp2111:
    00001bc6: 	movq	%r15, %rdi
    00001bc9: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 7113
    00001bce: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001bd5: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00001bdc: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001be3: 	je	.Ltmp2121 # Offset: 7139
.Ltmp2233:
    00001be9: 	movq	-0x20(%rax), %rbp
    00001bed: 	callq	clock@PLT # Offset: 7149
    00001bf2: 	pxor	%xmm0, %xmm0
    00001bf6: 	movq	%rax, end_time(%rip)
    00001bfd: 	movq	%rbp, %rdi
    00001c00: 	subq	start_time(%rip), %rax
    00001c07: 	cvtsi2sd	%rax, %xmm0
    00001c0c: 	divsd	DATAat0x2da00(%rip), %xmm0
    00001c14: 	callq	_Z13record_resultdPKc # Offset: 7188
    00001c19: 	movq	%r13, %rax
    00001c1c: 	pxor	%xmm0, %xmm0
.Ltmp2123:
    00001c20: 	leaq	0x320(%rax), %rdx
.Ltmp2122:
    00001c27: 	movups	(%rax), %xmm2
    00001c2a: 	addq	$0x10, %rax
    00001c2e: 	addss	%xmm2, %xmm0
    00001c32: 	movaps	%xmm2, %xmm1
    00001c35: 	shufps	$0x55, %xmm2, %xmm1
    00001c39: 	addss	%xmm0, %xmm1
    00001c3d: 	movaps	%xmm2, %xmm0
    00001c40: 	unpckhps	%xmm2, %xmm0
    00001c43: 	shufps	$0xff, %xmm2, %xmm2
    00001c47: 	addss	%xmm1, %xmm0
    00001c4b: 	addss	%xmm2, %xmm0
    00001c4f: 	cmpq	%rdx, %rax
    00001c52: 	jne	.Ltmp2122 # Offset: 7250
    00001c54: 	cmpq	0x10(%rsp), %rax
    00001c59: 	jne	.Ltmp2123 # Offset: 7257
    00001c5b: 	movq	%r15, %rdi
    00001c5e: 	callq	_Z9check_sumIfEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7262
    00001c63: 	movq	0x110(%rsp), %rdi
    00001c6b: 	cmpq	(%rsp), %rdi
    00001c6f: 	je	.Ltmp2124 # Offset: 7279
    00001c71: 	movq	0x120(%rsp), %rax
    00001c79: 	leaq	0x1(%rax), %rsi
    00001c7d: 	callq	_ZdlPvm@PLT # Offset: 7293
.Ltmp2124:
    00001c82: 	movq	0x18(%rsp), %rsi
    00001c87: 	leaq	DATAat0x2d7ba(%rip), %rdx
    00001c8e: 	movq	%r15, %rdi
    00001c91: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7313
    00001c96: 	callq	clock@PLT # Offset: 7318
    00001c9b: 	xorl	%r12d, %r12d
    00001c9e: 	movq	%rax, start_time(%rip)
    00001ca5: 	movq	iterations(%rip), %rax
    00001cac: 	movq	%rax, 0x28(%rsp)
    00001cb1: 	testq	%rax, %rax
    00001cb4: 	je	.Ltmp2125 # Offset: 7348
    00001cba: 	movq	%r15, 0x30(%rsp)
.Ltmp2134:
    00001cbf: 	movl	$0x3a980, %edx
    00001cc4: 	xorl	%esi, %esi
    00001cc6: 	movq	%r13, %rdi
    00001cc9: 	movq	%r14, %rbx
    00001ccc: 	callq	memset@PLT # Offset: 7372
    00001cd1: 	movl	$0x1, %r9d
    00001cd7: 	xorl	%ecx, %ecx
.Ltmp2133:
    00001cd9: 	movl	$0xc8, %eax
    00001cde: 	movq	%rcx, %rbp
    00001ce1: 	subq	$-0x80, %rcx
    00001ce5: 	cmpq	%rax, %rcx
    00001ce8: 	cmovbeq	%rcx, %rax
    00001cec: 	cmpq	%rbp, %rax
    00001cef: 	jbe	.Ltmp2126 # Offset: 7407
    00001cf5: 	leaq	-0x1(%rax), %rsi
    00001cf9: 	movq	0x8(%rsp), %rdi
    00001cfe: 	xorl	%r11d, %r11d
    00001d01: 	movq	%rsi, 0x20(%rsp)
    00001d06: 	movq	%r13, %rsi
.Ltmp2132:
    00001d09: 	movq	%rbx, %r10
    00001d0c: 	movq	%r9, %r8
    00001d0f: 	movq	%rbp, %rdx
    00001d12: 	cmpq	0x20(%rsp), %r9
    00001d17: 	jae	.Ltmp2127 # Offset: 7447
.Ltmp2129:
    00001d19: 	movss	-0x4(%rdi,%r8,4), %xmm3
    00001d20: 	movss	(%rdi,%r8,4), %xmm2
    00001d26: 	leaq	0x320(%r10), %r15
    00001d2d: 	xorl	%edx, %edx
    00001d2f: 	shufps	$0x0, %xmm3, %xmm3
    00001d33: 	shufps	$0x0, %xmm2, %xmm2
.Ltmp2128:
    00001d37: 	movups	(%r10,%rdx), %xmm0
    00001d3c: 	movups	(%r15,%rdx), %xmm1
    00001d41: 	movups	(%rsi,%rdx), %xmm4
    00001d45: 	mulps	%xmm3, %xmm0
    00001d48: 	mulps	%xmm2, %xmm1
    00001d4b: 	addps	%xmm4, %xmm0
    00001d4e: 	addps	%xmm1, %xmm0
    00001d51: 	movups	%xmm0, (%rsi,%rdx)
    00001d55: 	addq	$0x10, %rdx
    00001d59: 	cmpq	$0x320, %rdx
    00001d60: 	jne	.Ltmp2128 # Offset: 7520
    00001d62: 	leaq	0x1(%r8), %rdx
    00001d66: 	addq	$0x640, %r10
    00001d6d: 	addq	$0x2, %r8
    00001d71: 	cmpq	0x20(%rsp), %r8
    00001d76: 	jb	.Ltmp2129 # Offset: 7542
.Ltmp2127:
    00001d78: 	leaq	(%rdx,%rdx,4), %r8
    00001d7c: 	leaq	(%r8,%r8,4), %r8
    00001d80: 	shlq	$0x5, %r8
    00001d84: 	addq	%r14, %r8
    00001d87: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2131:
    00001d90: 	movss	(%rdi,%rdx,4), %xmm1
    00001d95: 	xorl	%r10d, %r10d
    00001d98: 	shufps	$0x0, %xmm1, %xmm1
.Ltmp2130:
    00001d9c: 	movups	(%r8,%r10), %xmm0
    00001da1: 	movups	(%rsi,%r10), %xmm7
    00001da6: 	mulps	%xmm1, %xmm0
    00001da9: 	addps	%xmm7, %xmm0
    00001dac: 	movups	%xmm0, (%rsi,%r10)
    00001db1: 	addq	$0x10, %r10
    00001db5: 	cmpq	$0x320, %r10
    00001dbc: 	jne	.Ltmp2130 # Offset: 7612
    00001dbe: 	addq	$0x1, %rdx
    00001dc2: 	addq	$0x320, %r8
    00001dc9: 	cmpq	%rdx, %rax
    00001dcc: 	ja	.Ltmp2131 # Offset: 7628
    00001dce: 	addq	$0xc8, %r11
    00001dd5: 	addq	$0x320, %rsi
    00001ddc: 	addq	$0x320, %rdi
    00001de3: 	cmpq	$0xea60, %r11
    00001dea: 	jne	.Ltmp2132 # Offset: 7658
.Ltmp2126:
    00001df0: 	subq	$-0x80, %r9
    00001df4: 	addq	$0x19000, %rbx
    00001dfb: 	cmpq	$0x100, %rcx
    00001e02: 	jne	.Ltmp2133 # Offset: 7682
    00001e08: 	addq	$0x1, %r12
    00001e0c: 	cmpq	0x28(%rsp), %r12
    00001e11: 	jne	.Ltmp2134 # Offset: 7697
    00001e17: 	movq	0x30(%rsp), %r15
.Ltmp2125:
    00001e1c: 	movq	%r15, %rdi
    00001e1f: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 7711
    00001e24: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001e2b: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00001e32: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001e39: 	je	.Ltmp2135 # Offset: 7737
.Ltmp2232:
    00001e3f: 	movq	-0x20(%rax), %rbp
    00001e43: 	callq	clock@PLT # Offset: 7747
    00001e48: 	pxor	%xmm0, %xmm0
    00001e4c: 	movq	%rax, end_time(%rip)
    00001e53: 	movq	%rbp, %rdi
    00001e56: 	subq	start_time(%rip), %rax
    00001e5d: 	cvtsi2sd	%rax, %xmm0
    00001e62: 	divsd	DATAat0x2da00(%rip), %xmm0
    00001e6a: 	callq	_Z13record_resultdPKc # Offset: 7786
    00001e6f: 	movq	%r13, %rax
    00001e72: 	pxor	%xmm1, %xmm1
.Ltmp2138:
    00001e76: 	leaq	0x320(%rax), %rdx
.Ltmp2136:
    00001e7d: 	movups	(%rax), %xmm0
    00001e80: 	addq	$0x10, %rax
    00001e84: 	addss	%xmm0, %xmm1
    00001e88: 	movaps	%xmm0, %xmm2
    00001e8b: 	shufps	$0x55, %xmm0, %xmm2
    00001e8f: 	addss	%xmm2, %xmm1
    00001e93: 	movaps	%xmm0, %xmm2
    00001e96: 	unpckhps	%xmm0, %xmm2
    00001e99: 	shufps	$0xff, %xmm0, %xmm0
    00001e9d: 	addss	%xmm2, %xmm1
    00001ea1: 	addss	%xmm0, %xmm1
    00001ea5: 	cmpq	%rax, %rdx
    00001ea8: 	jne	.Ltmp2136 # Offset: 7848
    00001eaa: 	cmpq	0x10(%rsp), %rdx
    00001eaf: 	je	.Ltmp2137 # Offset: 7855
    00001eb1: 	movq	%rdx, %rax
    00001eb4: 	jmp	.Ltmp2138 # Offset: 7860
.Ltmp2114:
    00001eb6: 	pxor	%xmm0, %xmm0
    00001eba: 	jmp	.Ltmp2139 # Offset: 7866
.Ltmp2137:
    00001ebf: 	movq	%r15, %rdi
    00001ec2: 	movaps	%xmm1, %xmm0
    00001ec5: 	callq	_Z9check_sumIfEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7877
    00001eca: 	movq	0x110(%rsp), %rdi
    00001ed2: 	cmpq	(%rsp), %rdi
    00001ed6: 	je	.Ltmp2140 # Offset: 7894
    00001ed8: 	movq	0x120(%rsp), %rax
    00001ee0: 	leaq	0x1(%rax), %rsi
    00001ee4: 	callq	_ZdlPvm@PLT # Offset: 7908
.Ltmp2140:
    00001ee9: 	movq	0x18(%rsp), %rsi
    00001eee: 	leaq	DATAat0x2d7d7(%rip), %rdx
    00001ef5: 	movq	%r15, %rdi
    00001ef8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7928
    00001efd: 	callq	clock@PLT # Offset: 7933
    00001f02: 	movq	$0x0, 0x28(%rsp)
    00001f0b: 	movq	%rax, start_time(%rip)
    00001f12: 	movq	iterations(%rip), %rax
    00001f19: 	movq	%rax, 0x98(%rsp)
    00001f21: 	testq	%rax, %rax
    00001f24: 	je	.Ltmp2141 # Offset: 7972
    00001f2a: 	movq	%r15, 0xb8(%rsp)
    00001f32: 	movq	%r14, %r15
    00001f35: 	movq	%r13, %r14
.Ltmp2150:
    00001f38: 	movq	%r14, %rdi
    00001f3b: 	movl	$0x3a980, %edx
    00001f40: 	xorl	%esi, %esi
    00001f42: 	xorl	%r13d, %r13d
    00001f45: 	callq	memset@PLT # Offset: 8005
    00001f4a: 	movq	%r14, 0x68(%rsp)
    00001f4f: 	movq	%r13, %r14
    00001f52: 	movq	$0x0, 0x30(%rsp)
.Ltmp2149:
    00001f5b: 	movl	$0x12c, %eax
    00001f60: 	movq	0x8(%rsp), %rcx
    00001f65: 	movq	0x30(%rsp), %rbx
    00001f6a: 	movq	%r14, 0x90(%rsp)
    00001f72: 	movq	$0x0, 0x60(%rsp)
    00001f7b: 	subq	$-0x80, %r14
    00001f7f: 	cmpq	%rax, %r14
    00001f82: 	leaq	(%rcx,%rbx,4), %rcx
    00001f86: 	movq	%r14, 0xc0(%rsp)
    00001f8e: 	cmovbeq	%r14, %rax
    00001f92: 	movq	%rcx, 0x50(%rsp)
    00001f97: 	xorl	%r13d, %r13d
    00001f9a: 	movq	%rax, 0x88(%rsp)
    00001fa2: 	leaq	(%rax,%rax,4), %rax
    00001fa6: 	leaq	(%rax,%rax,4), %rax
    00001faa: 	shlq	$0x3, %rax
    00001fae: 	movq	%rax, 0x38(%rsp)
.Ltmp2148:
    00001fb3: 	movl	$0xc8, %ecx
    00001fb8: 	movq	%r13, %r10
    00001fbb: 	subq	$-0x80, %r13
    00001fbf: 	movq	0x90(%rsp), %rbx
    00001fc7: 	cmpq	%rcx, %r13
    00001fca: 	cmovbeq	%r13, %rcx
    00001fce: 	cmpq	%rbx, 0x88(%rsp)
    00001fd6: 	jbe	.Ltmp2142 # Offset: 8150
    00001fdc: 	movq	0x60(%rsp), %rax
    00001fe1: 	movq	%rcx, %r12
    00001fe4: 	movq	%r13, 0xc8(%rsp)
    00001fec: 	subq	%r10, %r12
    00001fef: 	leaq	(%r15,%rax,4), %rbx
    00001ff3: 	movq	%r12, %rbp
    00001ff6: 	leaq	-0x1(%r12), %rsi
    00001ffb: 	movq	%r12, %rax
    00001ffe: 	shrq	$0x2, %rax
    00002002: 	andq	$-0x4, %rbp
    00002006: 	movq	%rsi, 0xa0(%rsp)
    0000200e: 	shlq	$0x4, %rax
    00002012: 	leaq	(%rbp,%r10), %rdi
    00002017: 	cmpq	$0x2, %rsi
    0000201b: 	movq	0x68(%rsp), %rsi
    00002020: 	cmovbeq	%r10, %rdi
    00002024: 	movq	%rax, 0x20(%rsp)
    00002029: 	xorl	%r9d, %r9d
    0000202c: 	leaq	(%rdi,%rdi,4), %rax
    00002030: 	leaq	(%rax,%rax,4), %rax
    00002034: 	leaq	(,%rax,8), %r14
    0000203c: 	leaq	0x1(%rdi), %rax
    00002040: 	movq	%rax, 0x58(%rsp)
    00002045: 	leaq	0xc8(%r14), %rax
    0000204c: 	movq	%rax, 0x70(%rsp)
    00002051: 	leaq	0x2(%rdi), %rax
    00002055: 	movq	%rax, 0x78(%rsp)
    0000205a: 	leaq	0x190(%r14), %rax
    00002061: 	movq	%rax, 0x80(%rsp)
.Ltmp2147:
    00002069: 	leaq	(%r14,%r9), %rax
    0000206d: 	movq	0x50(%rsp), %rdx
    00002072: 	leaq	(%r15,%rax,4), %rax
    00002076: 	movq	%rax, 0x40(%rsp)
    0000207b: 	movq	0x70(%rsp), %rax
    00002080: 	addq	%r9, %rax
    00002083: 	leaq	(%r15,%rax,4), %rax
    00002087: 	movq	%rax, 0xb0(%rsp)
    0000208f: 	movq	0x80(%rsp), %rax
    00002097: 	addq	%r9, %rax
    0000209a: 	leaq	(%r15,%rax,4), %rax
    0000209e: 	movq	%rax, 0xa8(%rsp)
    000020a6: 	movq	0x30(%rsp), %rax
    000020ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2146:
    000020b0: 	pxor	%xmm0, %xmm0
    000020b4: 	cmpq	%r10, %rcx
    000020b7: 	jbe	.Ltmp2143 # Offset: 8375
    000020bd: 	cmpq	$0x2, 0xa0(%rsp)
    000020c6: 	jbe	.Ltmp2144 # Offset: 8390
    000020cc: 	movq	0x20(%rsp), %r11
    000020d1: 	movq	%rbx, %r8
    000020d4: 	pxor	%xmm0, %xmm0
    000020d8: 	leaq	(%r11,%rdx), %r13
    000020dc: 	movq	%rdx, %r11
.Ltmp2145:
    000020df: 	movups	(%r11), %xmm5
    000020e3: 	addq	$0x10, %r11
    000020e7: 	addq	$0xc80, %r8
    000020ee: 	movss	-0x320(%r8), %xmm2
    000020f7: 	movss	-0x640(%r8), %xmm1
    00002100: 	movss	-0x960(%r8), %xmm3
    00002109: 	unpcklps	%xmm2, %xmm1
    0000210c: 	movss	-0xc80(%r8), %xmm2
    00002115: 	unpcklps	%xmm3, %xmm2
    00002118: 	movlhps	%xmm1, %xmm2
    0000211b: 	mulps	%xmm5, %xmm2
    0000211e: 	addss	%xmm2, %xmm0
    00002122: 	movaps	%xmm2, %xmm1
    00002125: 	shufps	$0x55, %xmm2, %xmm1
    00002129: 	addss	%xmm1, %xmm0
    0000212d: 	movaps	%xmm2, %xmm1
    00002130: 	unpckhps	%xmm2, %xmm1
    00002133: 	shufps	$0xff, %xmm2, %xmm2
    00002137: 	addss	%xmm0, %xmm1
    0000213b: 	movaps	%xmm2, %xmm0
    0000213e: 	addss	%xmm1, %xmm0
    00002142: 	cmpq	%r13, %r11
    00002145: 	jne	.Ltmp2145 # Offset: 8517
    00002147: 	cmpq	%r12, %rbp
    0000214a: 	je	.Ltmp2143 # Offset: 8522
.Ltmp2185:
    0000214c: 	movq	0x8(%rsp), %r11
    00002151: 	leaq	(%rax,%rdi), %r8
    00002155: 	movss	(%r11,%r8,4), %xmm1
    0000215b: 	movq	0x40(%rsp), %r8
    00002160: 	mulss	(%r8), %xmm1
    00002165: 	movq	0x58(%rsp), %r8
    0000216a: 	addss	%xmm1, %xmm0
    0000216e: 	cmpq	%r8, %rcx
    00002171: 	jbe	.Ltmp2143 # Offset: 8561
    00002173: 	addq	%rax, %r8
    00002176: 	movss	(%r11,%r8,4), %xmm1
    0000217c: 	movq	0xb0(%rsp), %r8
    00002184: 	mulss	(%r8), %xmm1
    00002189: 	movq	0x78(%rsp), %r8
    0000218e: 	addss	%xmm1, %xmm0
    00002192: 	cmpq	%rcx, %r8
    00002195: 	jae	.Ltmp2143 # Offset: 8597
    00002197: 	addq	%rax, %r8
    0000219a: 	movss	(%r11,%r8,4), %xmm1
    000021a0: 	movq	0xa8(%rsp), %r11
    000021a8: 	mulss	(%r11), %xmm1
    000021ad: 	addss	%xmm1, %xmm0
    000021b1: 	nopl	(%rax) # Size: 7
.Ltmp2143:
    000021b8: 	addss	(%rsi,%rax,4), %xmm0
    000021bd: 	addq	$0x320, %rdx
    000021c4: 	movss	%xmm0, (%rsi,%rax,4)
    000021c9: 	addq	$0xc8, %rax
    000021cf: 	cmpq	0x38(%rsp), %rax
    000021d4: 	jne	.Ltmp2146 # Offset: 8660
    000021da: 	addq	$0x1, %r9
    000021de: 	addq	$0x4, %rsi
    000021e2: 	addq	$0x4, %rbx
    000021e6: 	cmpq	$0xc8, %r9
    000021ed: 	jne	.Ltmp2147 # Offset: 8685
    000021f3: 	movq	0xc8(%rsp), %r13
.Ltmp2142:
    000021fb: 	addq	$0x200, 0x50(%rsp)
    00002204: 	addq	$0x6400, 0x60(%rsp)
    0000220d: 	cmpq	$0x100, %r13
    00002214: 	jne	.Ltmp2148 # Offset: 8724
    0000221a: 	movq	0xc0(%rsp), %r14
    00002222: 	addq	$0x6400, 0x30(%rsp)
    0000222b: 	cmpq	$0x180, %r14
    00002232: 	jne	.Ltmp2149 # Offset: 8754
    00002238: 	addq	$0x1, 0x28(%rsp)
    0000223e: 	movq	0x68(%rsp), %r14
    00002243: 	movq	0x28(%rsp), %rax
    00002248: 	cmpq	0x98(%rsp), %rax
    00002250: 	jne	.Ltmp2150 # Offset: 8784
    00002256: 	movq	%r14, %r13
    00002259: 	movq	%r15, %r14
    0000225c: 	movq	0xb8(%rsp), %r15
.Ltmp2141:
    00002264: 	movq	%r15, %rdi
    00002267: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 8807
    0000226c: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002273: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    0000227a: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00002281: 	je	.Ltmp2151 # Offset: 8833
.Ltmp2231:
    00002287: 	movq	-0x20(%rax), %rbp
    0000228b: 	callq	clock@PLT # Offset: 8843
    00002290: 	pxor	%xmm0, %xmm0
    00002294: 	movq	%rax, end_time(%rip)
    0000229b: 	movq	%rbp, %rdi
    0000229e: 	subq	start_time(%rip), %rax
    000022a5: 	cvtsi2sd	%rax, %xmm0
    000022aa: 	divsd	DATAat0x2da00(%rip), %xmm0
    000022b2: 	callq	_Z13record_resultdPKc # Offset: 8882
    000022b7: 	movq	%r13, %rax
    000022ba: 	pxor	%xmm1, %xmm1
.Ltmp2153:
    000022be: 	leaq	0x320(%rax), %rdx
.Ltmp2152:
    000022c5: 	movups	(%rax), %xmm0
    000022c8: 	addq	$0x10, %rax
    000022cc: 	addss	%xmm0, %xmm1
    000022d0: 	movaps	%xmm0, %xmm2
    000022d3: 	shufps	$0x55, %xmm0, %xmm2
    000022d7: 	addss	%xmm2, %xmm1
    000022db: 	movaps	%xmm0, %xmm2
    000022de: 	unpckhps	%xmm0, %xmm2
    000022e1: 	shufps	$0xff, %xmm0, %xmm0
    000022e5: 	addss	%xmm2, %xmm1
    000022e9: 	addss	%xmm0, %xmm1
    000022ed: 	cmpq	%rdx, %rax
    000022f0: 	jne	.Ltmp2152 # Offset: 8944
    000022f2: 	cmpq	%rax, 0x10(%rsp)
    000022f7: 	jne	.Ltmp2153 # Offset: 8951
    000022f9: 	movq	%r15, %rdi
    000022fc: 	movaps	%xmm1, %xmm0
    000022ff: 	callq	_Z9check_sumIfEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 8959
    00002304: 	movq	0x110(%rsp), %rdi
    0000230c: 	cmpq	(%rsp), %rdi
    00002310: 	je	.Ltmp2154 # Offset: 8976
    00002312: 	movq	0x120(%rsp), %rax
    0000231a: 	leaq	0x1(%rax), %rsi
    0000231e: 	callq	_ZdlPvm@PLT # Offset: 8990
.Ltmp2154:
    00002323: 	movq	0x18(%rsp), %rsi
    00002328: 	leaq	DATAat0x2d808(%rip), %rdx
    0000232f: 	movq	%r15, %rdi
    00002332: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9010
    00002337: 	callq	clock@PLT # Offset: 9015
    0000233c: 	movq	iterations(%rip), %rbp
    00002343: 	movq	%rax, start_time(%rip)
    0000234a: 	testq	%rbp, %rbp
    0000234d: 	je	.Ltmp2155 # Offset: 9037
    0000234f: 	xorl	%ebx, %ebx
.Ltmp2156:
    00002351: 	movl	$0x3a980, %edx
    00002356: 	xorl	%esi, %esi
    00002358: 	movq	%r13, %rdi
    0000235b: 	addq	$0x1, %rbx
    0000235f: 	callq	memset@PLT # Offset: 9055
    00002364: 	movq	0x8(%rsp), %rdi
    00002369: 	movq	%r13, %rdx
    0000236c: 	movq	%r14, %rsi
    0000236f: 	movl	$0xc8, %r8d
    00002375: 	movl	$0x12c, %ecx
    0000237a: 	callq	"_ZN28matmul_JIK_blocked_unrolled1IfEclEPKfS2_Pfmm.isra.0/1" # Offset: 9082
    0000237f: 	cmpq	%rbp, %rbx
    00002382: 	jne	.Ltmp2156 # Offset: 9090
.Ltmp2155:
    00002384: 	movq	%r15, %rdi
    00002387: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 9095
    0000238c: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002393: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    0000239a: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000023a1: 	je	.Ltmp2157 # Offset: 9121
.Ltmp2230:
    000023a7: 	movq	-0x20(%rax), %rbp
    000023ab: 	callq	clock@PLT # Offset: 9131
    000023b0: 	pxor	%xmm0, %xmm0
    000023b4: 	movq	%rax, end_time(%rip)
    000023bb: 	movq	%rbp, %rdi
    000023be: 	subq	start_time(%rip), %rax
    000023c5: 	cvtsi2sd	%rax, %xmm0
    000023ca: 	divsd	DATAat0x2da00(%rip), %xmm0
    000023d2: 	callq	_Z13record_resultdPKc # Offset: 9170
    000023d7: 	movq	%r13, %rax
    000023da: 	pxor	%xmm1, %xmm1
.Ltmp2159:
    000023de: 	leaq	0x320(%rax), %rdx
.Ltmp2158:
    000023e5: 	movups	(%rax), %xmm0
    000023e8: 	addq	$0x10, %rax
    000023ec: 	addss	%xmm0, %xmm1
    000023f0: 	movaps	%xmm0, %xmm2
    000023f3: 	shufps	$0x55, %xmm0, %xmm2
    000023f7: 	addss	%xmm2, %xmm1
    000023fb: 	movaps	%xmm0, %xmm2
    000023fe: 	unpckhps	%xmm0, %xmm2
    00002401: 	shufps	$0xff, %xmm0, %xmm0
    00002405: 	addss	%xmm2, %xmm1
    00002409: 	addss	%xmm0, %xmm1
    0000240d: 	cmpq	%rdx, %rax
    00002410: 	jne	.Ltmp2158 # Offset: 9232
    00002412: 	cmpq	0x10(%rsp), %rax
    00002417: 	jne	.Ltmp2159 # Offset: 9239
    00002419: 	movq	%r15, %rdi
    0000241c: 	movaps	%xmm1, %xmm0
    0000241f: 	callq	_Z9check_sumIfEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9247
    00002424: 	movq	0x110(%rsp), %rdi
    0000242c: 	cmpq	(%rsp), %rdi
    00002430: 	je	.Ltmp2160 # Offset: 9264
    00002432: 	movq	0x120(%rsp), %rax
    0000243a: 	leaq	0x1(%rax), %rsi
    0000243e: 	callq	_ZdlPvm@PLT # Offset: 9278
.Ltmp2160:
    00002443: 	movq	0x18(%rsp), %rsi
    00002448: 	leaq	DATAat0x2d830(%rip), %rdx
    0000244f: 	movq	%r15, %rdi
    00002452: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9298
    00002457: 	callq	clock@PLT # Offset: 9303
    0000245c: 	movq	iterations(%rip), %rbp
    00002463: 	movq	%rax, start_time(%rip)
    0000246a: 	testq	%rbp, %rbp
    0000246d: 	je	.Ltmp2161 # Offset: 9325
    0000246f: 	xorl	%ebx, %ebx
.Ltmp2162:
    00002471: 	movl	$0x3a980, %edx
    00002476: 	xorl	%esi, %esi
    00002478: 	movq	%r13, %rdi
    0000247b: 	addq	$0x1, %rbx
    0000247f: 	callq	memset@PLT # Offset: 9343
    00002484: 	movq	0x8(%rsp), %rdi
    00002489: 	movq	%r13, %rdx
    0000248c: 	movq	%r14, %rsi
    0000248f: 	movl	$0xc8, %r8d
    00002495: 	movl	$0x12c, %ecx
    0000249a: 	callq	"_ZN28matmul_JIK_blocked_unrolled2IfEclEPKfS2_Pfmm.isra.0/1" # Offset: 9370
    0000249f: 	cmpq	%rbp, %rbx
    000024a2: 	jne	.Ltmp2162 # Offset: 9378
.Ltmp2161:
    000024a4: 	movq	%r15, %rdi
    000024a7: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 9383
    000024ac: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000024b3: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    000024ba: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000024c1: 	je	.Ltmp2163 # Offset: 9409
.Ltmp2229:
    000024c7: 	movq	-0x20(%rax), %rbp
    000024cb: 	callq	clock@PLT # Offset: 9419
    000024d0: 	pxor	%xmm0, %xmm0
    000024d4: 	movq	%rax, end_time(%rip)
    000024db: 	movq	%rbp, %rdi
    000024de: 	subq	start_time(%rip), %rax
    000024e5: 	cvtsi2sd	%rax, %xmm0
    000024ea: 	divsd	DATAat0x2da00(%rip), %xmm0
    000024f2: 	callq	_Z13record_resultdPKc # Offset: 9458
    000024f7: 	movq	%r13, %rax
    000024fa: 	pxor	%xmm1, %xmm1
.Ltmp2165:
    000024fe: 	leaq	0x320(%rax), %rdx
.Ltmp2164:
    00002505: 	movups	(%rax), %xmm0
    00002508: 	addq	$0x10, %rax
    0000250c: 	addss	%xmm0, %xmm1
    00002510: 	movaps	%xmm0, %xmm2
    00002513: 	shufps	$0x55, %xmm0, %xmm2
    00002517: 	addss	%xmm2, %xmm1
    0000251b: 	movaps	%xmm0, %xmm2
    0000251e: 	unpckhps	%xmm0, %xmm2
    00002521: 	shufps	$0xff, %xmm0, %xmm0
    00002525: 	addss	%xmm2, %xmm1
    00002529: 	addss	%xmm0, %xmm1
    0000252d: 	cmpq	%rdx, %rax
    00002530: 	jne	.Ltmp2164 # Offset: 9520
    00002532: 	cmpq	%rax, 0x10(%rsp)
    00002537: 	jne	.Ltmp2165 # Offset: 9527
    00002539: 	movq	%r15, %rdi
    0000253c: 	movaps	%xmm1, %xmm0
    0000253f: 	callq	_Z9check_sumIfEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9535
    00002544: 	movq	0x110(%rsp), %rdi
    0000254c: 	cmpq	(%rsp), %rdi
    00002550: 	je	.Ltmp2166 # Offset: 9552
    00002552: 	movq	0x120(%rsp), %rax
    0000255a: 	leaq	0x1(%rax), %rsi
    0000255e: 	callq	_ZdlPvm@PLT # Offset: 9566
.Ltmp2166:
    00002563: 	movq	0x18(%rsp), %rsi
    00002568: 	leaq	DATAat0x2d858(%rip), %rdx
    0000256f: 	movq	%r15, %rdi
    00002572: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9586
    00002577: 	callq	clock@PLT # Offset: 9591
    0000257c: 	movq	iterations(%rip), %rbp
    00002583: 	movq	%rax, start_time(%rip)
    0000258a: 	testq	%rbp, %rbp
    0000258d: 	je	.Ltmp2167 # Offset: 9613
    0000258f: 	xorl	%ebx, %ebx
.Ltmp2168:
    00002591: 	movl	$0x3a980, %edx
    00002596: 	xorl	%esi, %esi
    00002598: 	movq	%r13, %rdi
    0000259b: 	addq	$0x1, %rbx
    0000259f: 	callq	memset@PLT # Offset: 9631
    000025a4: 	movq	0x8(%rsp), %rdi
    000025a9: 	movq	%r13, %rdx
    000025ac: 	movq	%r14, %rsi
    000025af: 	movl	$0xc8, %r8d
    000025b5: 	movl	$0x12c, %ecx
    000025ba: 	callq	"_ZN28matmul_JIK_blocked_unrolled3IfEclEPKfS2_Pfmm.isra.0/1" # Offset: 9658
    000025bf: 	cmpq	%rbp, %rbx
    000025c2: 	jne	.Ltmp2168 # Offset: 9666
.Ltmp2167:
    000025c4: 	movq	%r15, %rdi
    000025c7: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 9671
    000025cc: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000025d3: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    000025da: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000025e1: 	je	.Ltmp2169 # Offset: 9697
.Ltmp2228:
    000025e7: 	movq	-0x20(%rax), %rbp
    000025eb: 	callq	clock@PLT # Offset: 9707
    000025f0: 	pxor	%xmm0, %xmm0
    000025f4: 	movq	%rax, end_time(%rip)
    000025fb: 	movq	%rbp, %rdi
    000025fe: 	subq	start_time(%rip), %rax
    00002605: 	cvtsi2sd	%rax, %xmm0
    0000260a: 	divsd	DATAat0x2da00(%rip), %xmm0
    00002612: 	callq	_Z13record_resultdPKc # Offset: 9746
    00002617: 	movq	%r13, %rax
    0000261a: 	pxor	%xmm1, %xmm1
.Ltmp2171:
    0000261e: 	leaq	0x320(%rax), %rdx
.Ltmp2170:
    00002625: 	movups	(%rax), %xmm0
    00002628: 	addq	$0x10, %rax
    0000262c: 	addss	%xmm0, %xmm1
    00002630: 	movaps	%xmm0, %xmm2
    00002633: 	shufps	$0x55, %xmm0, %xmm2
    00002637: 	addss	%xmm2, %xmm1
    0000263b: 	movaps	%xmm0, %xmm2
    0000263e: 	unpckhps	%xmm0, %xmm2
    00002641: 	shufps	$0xff, %xmm0, %xmm0
    00002645: 	addss	%xmm2, %xmm1
    00002649: 	addss	%xmm0, %xmm1
    0000264d: 	cmpq	%rdx, %rax
    00002650: 	jne	.Ltmp2170 # Offset: 9808
    00002652: 	cmpq	0x10(%rsp), %rax
    00002657: 	jne	.Ltmp2171 # Offset: 9815
    00002659: 	movq	%r15, %rdi
    0000265c: 	movaps	%xmm1, %xmm0
    0000265f: 	callq	_Z9check_sumIfEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9823
    00002664: 	movq	0x110(%rsp), %rdi
    0000266c: 	cmpq	(%rsp), %rdi
    00002670: 	je	.Ltmp2172 # Offset: 9840
    00002672: 	movq	0x120(%rsp), %rax
    0000267a: 	leaq	0x1(%rax), %rsi
    0000267e: 	callq	_ZdlPvm@PLT # Offset: 9854
.Ltmp2172:
    00002683: 	movq	0x18(%rsp), %rsi
    00002688: 	leaq	DATAat0x2d880(%rip), %rdx
    0000268f: 	movq	%r15, %rdi
    00002692: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9874
    00002697: 	callq	clock@PLT # Offset: 9879
    0000269c: 	movq	iterations(%rip), %rbp
    000026a3: 	movq	%rax, start_time(%rip)
    000026aa: 	testq	%rbp, %rbp
    000026ad: 	je	.Ltmp2173 # Offset: 9901
    000026af: 	xorl	%ebx, %ebx
.Ltmp2174:
    000026b1: 	movl	$0x3a980, %edx
    000026b6: 	xorl	%esi, %esi
    000026b8: 	movq	%r13, %rdi
    000026bb: 	addq	$0x1, %rbx
    000026bf: 	callq	memset@PLT # Offset: 9919
    000026c4: 	movq	0x8(%rsp), %rdi
    000026c9: 	movq	%r13, %rdx
    000026cc: 	movq	%r14, %rsi
    000026cf: 	movl	$0xc8, %r8d
    000026d5: 	movl	$0x12c, %ecx
    000026da: 	callq	"_ZN28matmul_IJK_blocked_unrolled1IfEclEPKfS2_Pfmm.isra.0/1" # Offset: 9946
    000026df: 	cmpq	%rbp, %rbx
    000026e2: 	jne	.Ltmp2174 # Offset: 9954
.Ltmp2173:
    000026e4: 	movq	%r15, %rdi
    000026e7: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 9959
    000026ec: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000026f3: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    000026fa: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00002701: 	je	.Ltmp2175 # Offset: 9985
.Ltmp2227:
    00002707: 	movq	-0x20(%rax), %rbp
    0000270b: 	callq	clock@PLT # Offset: 9995
    00002710: 	pxor	%xmm0, %xmm0
    00002714: 	movq	%rax, end_time(%rip)
    0000271b: 	movq	%rbp, %rdi
    0000271e: 	subq	start_time(%rip), %rax
    00002725: 	cvtsi2sd	%rax, %xmm0
    0000272a: 	divsd	DATAat0x2da00(%rip), %xmm0
    00002732: 	callq	_Z13record_resultdPKc # Offset: 10034
    00002737: 	movq	%r13, %rax
    0000273a: 	pxor	%xmm1, %xmm1
.Ltmp2177:
    0000273e: 	leaq	0x320(%rax), %rdx
.Ltmp2176:
    00002745: 	movups	(%rax), %xmm0
    00002748: 	addq	$0x10, %rax
    0000274c: 	addss	%xmm0, %xmm1
    00002750: 	movaps	%xmm0, %xmm2
    00002753: 	shufps	$0x55, %xmm0, %xmm2
    00002757: 	addss	%xmm2, %xmm1
    0000275b: 	movaps	%xmm0, %xmm2
    0000275e: 	unpckhps	%xmm0, %xmm2
    00002761: 	shufps	$0xff, %xmm0, %xmm0
    00002765: 	addss	%xmm2, %xmm1
    00002769: 	addss	%xmm0, %xmm1
    0000276d: 	cmpq	%rdx, %rax
    00002770: 	jne	.Ltmp2176 # Offset: 10096
    00002772: 	cmpq	0x10(%rsp), %rax
    00002777: 	jne	.Ltmp2177 # Offset: 10103
    00002779: 	movq	%r15, %rdi
    0000277c: 	movaps	%xmm1, %xmm0
    0000277f: 	callq	_Z9check_sumIfEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 10111
    00002784: 	movq	0x110(%rsp), %rdi
    0000278c: 	cmpq	(%rsp), %rdi
    00002790: 	je	.Ltmp2178 # Offset: 10128
    00002792: 	movq	0x120(%rsp), %rax
    0000279a: 	leaq	0x1(%rax), %rsi
    0000279e: 	callq	_ZdlPvm@PLT # Offset: 10142
.Ltmp2178:
    000027a3: 	movq	0x18(%rsp), %rsi
    000027a8: 	leaq	DATAat0x2d8a8(%rip), %rdx
    000027af: 	movq	%r15, %rdi
    000027b2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10162
    000027b7: 	callq	clock@PLT # Offset: 10167
    000027bc: 	movq	iterations(%rip), %rbp
    000027c3: 	movq	%rax, start_time(%rip)
    000027ca: 	testq	%rbp, %rbp
    000027cd: 	je	.Ltmp2179 # Offset: 10189
    000027cf: 	xorl	%ebx, %ebx
.Ltmp2180:
    000027d1: 	movl	$0x3a980, %edx
    000027d6: 	xorl	%esi, %esi
    000027d8: 	movq	%r13, %rdi
    000027db: 	addq	$0x1, %rbx
    000027df: 	callq	memset@PLT # Offset: 10207
    000027e4: 	movq	0x8(%rsp), %rdi
    000027e9: 	movq	%r13, %rdx
    000027ec: 	movq	%r14, %rsi
    000027ef: 	movl	$0xc8, %r8d
    000027f5: 	movl	$0x12c, %ecx
    000027fa: 	callq	"_ZN28matmul_IJK_blocked_unrolled2IfEclEPKfS2_Pfmm.isra.0/1" # Offset: 10234
    000027ff: 	cmpq	%rbp, %rbx
    00002802: 	jne	.Ltmp2180 # Offset: 10242
.Ltmp2179:
    00002804: 	movq	%r15, %rdi
    00002807: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 10247
    0000280c: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002813: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    0000281a: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00002821: 	je	.Ltmp2181 # Offset: 10273
.Ltmp2226:
    00002827: 	movq	-0x20(%rax), %rbp
    0000282b: 	callq	clock@PLT # Offset: 10283
    00002830: 	pxor	%xmm0, %xmm0
    00002834: 	movq	%rax, end_time(%rip)
    0000283b: 	movq	%rbp, %rdi
    0000283e: 	subq	start_time(%rip), %rax
    00002845: 	cvtsi2sd	%rax, %xmm0
    0000284a: 	divsd	DATAat0x2da00(%rip), %xmm0
    00002852: 	callq	_Z13record_resultdPKc # Offset: 10322
    00002857: 	movq	%r13, %rax
    0000285a: 	pxor	%xmm1, %xmm1
.Ltmp2184:
    0000285e: 	leaq	0x320(%rax), %rdx
.Ltmp2182:
    00002865: 	movups	(%rax), %xmm0
    00002868: 	addq	$0x10, %rax
    0000286c: 	addss	%xmm0, %xmm1
    00002870: 	movaps	%xmm0, %xmm2
    00002873: 	shufps	$0x55, %xmm0, %xmm2
    00002877: 	addss	%xmm2, %xmm1
    0000287b: 	movaps	%xmm0, %xmm2
    0000287e: 	unpckhps	%xmm0, %xmm2
    00002881: 	shufps	$0xff, %xmm0, %xmm0
    00002885: 	addss	%xmm2, %xmm1
    00002889: 	addss	%xmm0, %xmm1
    0000288d: 	cmpq	%rax, %rdx
    00002890: 	jne	.Ltmp2182 # Offset: 10384
    00002892: 	cmpq	0x10(%rsp), %rdx
    00002897: 	je	.Ltmp2183 # Offset: 10391
    00002899: 	movq	%rdx, %rax
    0000289c: 	jmp	.Ltmp2184 # Offset: 10396
.Ltmp2144:
    0000289e: 	pxor	%xmm0, %xmm0
    000028a2: 	jmp	.Ltmp2185 # Offset: 10402
.Ltmp2183:
    000028a7: 	movq	%r15, %rdi
    000028aa: 	movaps	%xmm1, %xmm0
    000028ad: 	callq	_Z9check_sumIfEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 10413
    000028b2: 	movq	0x110(%rsp), %rdi
    000028ba: 	cmpq	(%rsp), %rdi
    000028be: 	je	.Ltmp2186 # Offset: 10430
    000028c0: 	movq	0x120(%rsp), %rax
    000028c8: 	leaq	0x1(%rax), %rsi
    000028cc: 	callq	_ZdlPvm@PLT # Offset: 10444
.Ltmp2186:
    000028d1: 	movq	0x18(%rsp), %rsi
    000028d6: 	leaq	DATAat0x2d8d0(%rip), %rdx
    000028dd: 	movq	%r15, %rdi
    000028e0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10464
    000028e5: 	callq	clock@PLT # Offset: 10469
    000028ea: 	movq	iterations(%rip), %rbp
    000028f1: 	movq	%rax, start_time(%rip)
    000028f8: 	testq	%rbp, %rbp
    000028fb: 	je	.Ltmp2187 # Offset: 10491
    000028fd: 	xorl	%ebx, %ebx
.Ltmp2188:
    000028ff: 	movl	$0x3a980, %edx
    00002904: 	xorl	%esi, %esi
    00002906: 	movq	%r13, %rdi
    00002909: 	addq	$0x1, %rbx
    0000290d: 	callq	memset@PLT # Offset: 10509
    00002912: 	movq	0x8(%rsp), %rdi
    00002917: 	movq	%r13, %rdx
    0000291a: 	movq	%r14, %rsi
    0000291d: 	movl	$0xc8, %r8d
    00002923: 	movl	$0x12c, %ecx
    00002928: 	callq	"_ZN28matmul_IJK_blocked_unrolled3IfEclEPKfS2_Pfmm.isra.0/1" # Offset: 10536
    0000292d: 	cmpq	%rbp, %rbx
    00002930: 	jne	.Ltmp2188 # Offset: 10544
.Ltmp2187:
    00002932: 	movq	%r15, %rdi
    00002935: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 10549
    0000293a: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002941: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00002948: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000294f: 	je	.Ltmp2189 # Offset: 10575
.Ltmp2225:
    00002955: 	movq	-0x20(%rax), %rbp
    00002959: 	callq	clock@PLT # Offset: 10585
    0000295e: 	pxor	%xmm0, %xmm0
    00002962: 	movq	%rax, end_time(%rip)
    00002969: 	movq	%rbp, %rdi
    0000296c: 	subq	start_time(%rip), %rax
    00002973: 	cvtsi2sd	%rax, %xmm0
    00002978: 	divsd	DATAat0x2da00(%rip), %xmm0
    00002980: 	callq	_Z13record_resultdPKc # Offset: 10624
    00002985: 	movq	%r13, %rax
    00002988: 	pxor	%xmm1, %xmm1
.Ltmp2191:
    0000298c: 	leaq	0x320(%rax), %rdx
.Ltmp2190:
    00002993: 	movups	(%rax), %xmm0
    00002996: 	addq	$0x10, %rax
    0000299a: 	addss	%xmm0, %xmm1
    0000299e: 	movaps	%xmm0, %xmm2
    000029a1: 	shufps	$0x55, %xmm0, %xmm2
    000029a5: 	addss	%xmm2, %xmm1
    000029a9: 	movaps	%xmm0, %xmm2
    000029ac: 	unpckhps	%xmm0, %xmm2
    000029af: 	shufps	$0xff, %xmm0, %xmm0
    000029b3: 	addss	%xmm2, %xmm1
    000029b7: 	addss	%xmm0, %xmm1
    000029bb: 	cmpq	%rdx, %rax
    000029be: 	jne	.Ltmp2190 # Offset: 10686
    000029c0: 	cmpq	%rax, 0x10(%rsp)
    000029c5: 	jne	.Ltmp2191 # Offset: 10693
    000029c7: 	movq	%r15, %rdi
    000029ca: 	movaps	%xmm1, %xmm0
    000029cd: 	callq	_Z9check_sumIfEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 10701
    000029d2: 	movq	0x110(%rsp), %rdi
    000029da: 	cmpq	(%rsp), %rdi
    000029de: 	je	.Ltmp2192 # Offset: 10718
    000029e0: 	movq	0x120(%rsp), %rax
    000029e8: 	leaq	0x1(%rax), %rsi
    000029ec: 	callq	_ZdlPvm@PLT # Offset: 10732
.Ltmp2192:
    000029f1: 	movq	0x18(%rsp), %rsi
    000029f6: 	leaq	DATAat0x2d8f8(%rip), %rdx
    000029fd: 	movq	%r15, %rdi
    00002a00: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10752
    00002a05: 	callq	clock@PLT # Offset: 10757
    00002a0a: 	movq	iterations(%rip), %r12
    00002a11: 	xorl	%ebp, %ebp
    00002a13: 	movq	%rax, start_time(%rip)
    00002a1a: 	testq	%r12, %r12
    00002a1d: 	je	.Ltmp2193 # Offset: 10781
.Ltmp2199:
    00002a23: 	movl	$0x3a980, %edx
    00002a28: 	xorl	%esi, %esi
    00002a2a: 	movq	%r13, %rdi
    00002a2d: 	callq	memset@PLT # Offset: 10797
    00002a32: 	movq	%r14, %r9
    00002a35: 	xorl	%r8d, %r8d
    00002a38: 	xorl	%edx, %edx
.Ltmp2198:
    00002a3a: 	movl	$0xc8, %eax
    00002a3f: 	movq	%rdx, %rcx
    00002a42: 	subq	$-0x80, %rdx
    00002a46: 	cmpq	%rax, %rdx
    00002a49: 	cmovbeq	%rdx, %rax
    00002a4d: 	cmpq	%rcx, %rax
    00002a50: 	jbe	.Ltmp2194 # Offset: 10832
    00002a52: 	movq	0x8(%rsp), %rcx
    00002a57: 	shlq	$0x2, %rax
    00002a5b: 	movq	%r8, %r11
    00002a5e: 	movq	%r13, %rsi
    00002a61: 	subq	%rax, %r11
    00002a64: 	xorl	%r10d, %r10d
    00002a67: 	leaq	(%rcx,%rax), %rdi
.Ltmp2197:
    00002a6b: 	leaq	(%r11,%rdi), %rcx
    00002a6f: 	movq	%r9, %rbx
    00002a72: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2196:
    00002a78: 	movss	(%rcx), %xmm1
    00002a7c: 	xorl	%eax, %eax
    00002a7e: 	shufps	$0x0, %xmm1, %xmm1
.Ltmp2195:
    00002a82: 	movups	(%rbx,%rax), %xmm0
    00002a86: 	movups	(%rsi,%rax), %xmm6
    00002a8a: 	mulps	%xmm1, %xmm0
    00002a8d: 	addps	%xmm6, %xmm0
    00002a90: 	movups	%xmm0, (%rsi,%rax)
    00002a94: 	addq	$0x10, %rax
    00002a98: 	cmpq	$0x320, %rax
    00002a9e: 	jne	.Ltmp2195 # Offset: 10910
    00002aa0: 	addq	$0x4, %rcx
    00002aa4: 	addq	$0x320, %rbx
    00002aab: 	cmpq	%rcx, %rdi
    00002aae: 	jne	.Ltmp2196 # Offset: 10926
    00002ab0: 	addq	$0xc8, %r10
    00002ab7: 	addq	$0x320, %rdi
    00002abe: 	addq	$0x320, %rsi
    00002ac5: 	cmpq	$0xea60, %r10
    00002acc: 	jne	.Ltmp2197 # Offset: 10956
.Ltmp2194:
    00002ace: 	addq	$0x19000, %r9
    00002ad5: 	addq	$0x200, %r8
    00002adc: 	cmpq	$0x100, %rdx
    00002ae3: 	jne	.Ltmp2198 # Offset: 10979
    00002ae9: 	addq	$0x1, %rbp
    00002aed: 	cmpq	%r12, %rbp
    00002af0: 	jne	.Ltmp2199 # Offset: 10992
.Ltmp2193:
    00002af6: 	movq	%r15, %rdi
    00002af9: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 11001
    00002afe: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002b05: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00002b0c: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00002b13: 	je	.Ltmp2200 # Offset: 11027
.Ltmp2224:
    00002b19: 	movq	-0x20(%rax), %rbp
    00002b1d: 	callq	clock@PLT # Offset: 11037
    00002b22: 	pxor	%xmm0, %xmm0
    00002b26: 	movq	%rax, end_time(%rip)
    00002b2d: 	movq	%rbp, %rdi
    00002b30: 	subq	start_time(%rip), %rax
    00002b37: 	cvtsi2sd	%rax, %xmm0
    00002b3c: 	divsd	DATAat0x2da00(%rip), %xmm0
    00002b44: 	callq	_Z13record_resultdPKc # Offset: 11076
    00002b49: 	movq	%r13, %rax
    00002b4c: 	pxor	%xmm1, %xmm1
.Ltmp2203:
    00002b50: 	leaq	0x320(%rax), %rdx
.Ltmp2201:
    00002b57: 	movups	(%rax), %xmm0
    00002b5a: 	addq	$0x10, %rax
    00002b5e: 	addss	%xmm0, %xmm1
    00002b62: 	movaps	%xmm0, %xmm2
    00002b65: 	shufps	$0x55, %xmm0, %xmm2
    00002b69: 	addss	%xmm2, %xmm1
    00002b6d: 	movaps	%xmm0, %xmm2
    00002b70: 	unpckhps	%xmm0, %xmm2
    00002b73: 	shufps	$0xff, %xmm0, %xmm0
    00002b77: 	addss	%xmm2, %xmm1
    00002b7b: 	addss	%xmm0, %xmm1
    00002b7f: 	cmpq	%rax, %rdx
    00002b82: 	jne	.Ltmp2201 # Offset: 11138
    00002b84: 	cmpq	0x10(%rsp), %rdx
    00002b89: 	je	.Ltmp2202 # Offset: 11145
    00002b8b: 	movq	%rdx, %rax
    00002b8e: 	jmp	.Ltmp2203 # Offset: 11150
.Ltmp2202:
    00002b90: 	movq	%r15, %rdi
    00002b93: 	movaps	%xmm1, %xmm0
    00002b96: 	callq	_Z9check_sumIfEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 11158
    00002b9b: 	movq	0x110(%rsp), %rdi
    00002ba3: 	cmpq	(%rsp), %rdi
    00002ba7: 	je	.Ltmp2204 # Offset: 11175
    00002ba9: 	movq	0x120(%rsp), %rax
    00002bb1: 	leaq	0x1(%rax), %rsi
    00002bb5: 	callq	_ZdlPvm@PLT # Offset: 11189
.Ltmp2204:
    00002bba: 	movq	0x18(%rsp), %rsi
    00002bbf: 	leaq	DATAat0x2d920(%rip), %rdx
    00002bc6: 	movq	%r15, %rdi
    00002bc9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11209
    00002bce: 	callq	clock@PLT # Offset: 11214
    00002bd3: 	movq	iterations(%rip), %rbp
    00002bda: 	movq	%rax, start_time(%rip)
    00002be1: 	testq	%rbp, %rbp
    00002be4: 	je	.Ltmp2205 # Offset: 11236
    00002be6: 	xorl	%ebx, %ebx
.Ltmp2206:
    00002be8: 	movl	$0x3a980, %edx
    00002bed: 	xorl	%esi, %esi
    00002bef: 	movq	%r13, %rdi
    00002bf2: 	addq	$0x1, %rbx
    00002bf6: 	callq	memset@PLT # Offset: 11254
    00002bfb: 	movq	0x8(%rsp), %rdi
    00002c00: 	movq	%r13, %rdx
    00002c03: 	movq	%r14, %rsi
    00002c06: 	movl	$0xc8, %r8d
    00002c0c: 	movl	$0x12c, %ecx
    00002c11: 	callq	"_ZN28matmul_JKI_blocked_unrolled2IfEclEPKfS2_Pfmm.isra.0/1" # Offset: 11281
    00002c16: 	cmpq	%rbp, %rbx
    00002c19: 	jne	.Ltmp2206 # Offset: 11289
.Ltmp2205:
    00002c1b: 	movq	%r15, %rdi
    00002c1e: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 11294
    00002c23: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002c2a: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00002c31: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00002c38: 	je	.Ltmp2207 # Offset: 11320
.Ltmp2223:
    00002c3e: 	movq	-0x20(%rax), %rbp
    00002c42: 	callq	clock@PLT # Offset: 11330
    00002c47: 	pxor	%xmm0, %xmm0
    00002c4b: 	movq	%rax, end_time(%rip)
    00002c52: 	movq	%rbp, %rdi
    00002c55: 	subq	start_time(%rip), %rax
    00002c5c: 	cvtsi2sd	%rax, %xmm0
    00002c61: 	divsd	DATAat0x2da00(%rip), %xmm0
    00002c69: 	callq	_Z13record_resultdPKc # Offset: 11369
    00002c6e: 	movq	%r13, %rax
    00002c71: 	pxor	%xmm1, %xmm1
.Ltmp2209:
    00002c75: 	leaq	0x320(%rax), %rdx
.Ltmp2208:
    00002c7c: 	movups	(%rax), %xmm0
    00002c7f: 	addq	$0x10, %rax
    00002c83: 	addss	%xmm0, %xmm1
    00002c87: 	movaps	%xmm0, %xmm2
    00002c8a: 	shufps	$0x55, %xmm0, %xmm2
    00002c8e: 	addss	%xmm2, %xmm1
    00002c92: 	movaps	%xmm0, %xmm2
    00002c95: 	unpckhps	%xmm0, %xmm2
    00002c98: 	shufps	$0xff, %xmm0, %xmm0
    00002c9c: 	addss	%xmm2, %xmm1
    00002ca0: 	addss	%xmm0, %xmm1
    00002ca4: 	cmpq	%rdx, %rax
    00002ca7: 	jne	.Ltmp2208 # Offset: 11431
    00002ca9: 	cmpq	%rax, 0x10(%rsp)
    00002cae: 	jne	.Ltmp2209 # Offset: 11438
    00002cb0: 	movq	%r15, %rdi
    00002cb3: 	movaps	%xmm1, %xmm0
    00002cb6: 	callq	_Z9check_sumIfEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 11446
    00002cbb: 	movq	0x110(%rsp), %rdi
    00002cc3: 	cmpq	(%rsp), %rdi
    00002cc7: 	je	.Ltmp2210 # Offset: 11463
    00002cc9: 	movq	0x120(%rsp), %rax
    00002cd1: 	leaq	0x1(%rax), %rsi
    00002cd5: 	callq	_ZdlPvm@PLT # Offset: 11477
.Ltmp2210:
    00002cda: 	movq	0x18(%rsp), %rsi
    00002cdf: 	leaq	DATAat0x2d948(%rip), %rdx
    00002ce6: 	movq	%r15, %rdi
    00002ce9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11497
    00002cee: 	callq	clock@PLT # Offset: 11502
    00002cf3: 	movq	iterations(%rip), %rbp
    00002cfa: 	movq	%rax, start_time(%rip)
    00002d01: 	testq	%rbp, %rbp
    00002d04: 	je	.Ltmp2211 # Offset: 11524
    00002d06: 	xorl	%ebx, %ebx
.Ltmp2212:
    00002d08: 	movl	$0x3a980, %edx
    00002d0d: 	xorl	%esi, %esi
    00002d0f: 	movq	%r13, %rdi
    00002d12: 	addq	$0x1, %rbx
    00002d16: 	callq	memset@PLT # Offset: 11542
    00002d1b: 	movq	0x8(%rsp), %rdi
    00002d20: 	movq	%r13, %rdx
    00002d23: 	movq	%r14, %rsi
    00002d26: 	movl	$0xc8, %r8d
    00002d2c: 	movl	$0x12c, %ecx
    00002d31: 	callq	"_ZN28matmul_JKI_blocked_unrolled3IfEclEPKfS2_Pfmm.isra.0/1" # Offset: 11569
    00002d36: 	cmpq	%rbp, %rbx
    00002d39: 	jne	.Ltmp2212 # Offset: 11577
.Ltmp2211:
    00002d3b: 	movq	%r15, %rdi
    00002d3e: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 11582
    00002d43: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002d4a: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00002d51: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00002d58: 	je	.Ltmp2213 # Offset: 11608
.Ltmp2222:
    00002d5e: 	movq	-0x20(%rax), %rbp
    00002d62: 	callq	clock@PLT # Offset: 11618
    00002d67: 	pxor	%xmm0, %xmm0
    00002d6b: 	movq	%rax, end_time(%rip)
    00002d72: 	movq	%rbp, %rdi
    00002d75: 	subq	start_time(%rip), %rax
    00002d7c: 	cvtsi2sd	%rax, %xmm0
    00002d81: 	divsd	DATAat0x2da00(%rip), %xmm0
    00002d89: 	callq	_Z13record_resultdPKc # Offset: 11657
    00002d8e: 	movq	0x48(%rsp), %rax
    00002d93: 	pxor	%xmm0, %xmm0
.Ltmp2216:
    00002d97: 	leaq	0x320(%rax), %rdx
.Ltmp2214:
    00002d9e: 	movups	(%rax), %xmm2
    00002da1: 	addq	$0x10, %rax
    00002da5: 	addss	%xmm2, %xmm0
    00002da9: 	movaps	%xmm2, %xmm1
    00002dac: 	shufps	$0x55, %xmm2, %xmm1
    00002db0: 	addss	%xmm1, %xmm0
    00002db4: 	movaps	%xmm2, %xmm1
    00002db7: 	unpckhps	%xmm2, %xmm1
    00002dba: 	shufps	$0xff, %xmm2, %xmm2
    00002dbe: 	addss	%xmm0, %xmm1
    00002dc2: 	movaps	%xmm2, %xmm0
    00002dc5: 	addss	%xmm1, %xmm0
    00002dc9: 	cmpq	%rdx, %rax
    00002dcc: 	jne	.Ltmp2214 # Offset: 11724
    00002dce: 	cmpq	%rax, 0x10(%rsp)
    00002dd3: 	je	.Ltmp2215 # Offset: 11731
    00002dd5: 	movq	%rax, 0x48(%rsp)
    00002dda: 	jmp	.Ltmp2216 # Offset: 11738
.Ltmp2215:
    00002ddc: 	movq	%r15, %rdi
    00002ddf: 	callq	_Z9check_sumIfEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 11743
    00002de4: 	movq	0x110(%rsp), %rdi
    00002dec: 	cmpq	(%rsp), %rdi
    00002df0: 	je	.Ltmp2217 # Offset: 11760
    00002df2: 	movq	0x120(%rsp), %rax
    00002dfa: 	leaq	0x1(%rax), %rsi
    00002dfe: 	callq	_ZdlPvm@PLT # Offset: 11774
.Ltmp2217:
    00002e03: 	movq	0x18(%rsp), %rsi
    00002e08: 	leaq	DATAat0x2d7f4(%rip), %rdx
    00002e0f: 	movq	%r15, %rdi
    00002e12: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11794
    00002e17: 	movl	iterations(%rip), %edx
    00002e1d: 	xorl	%r8d, %r8d
    00002e20: 	xorl	%ecx, %ecx
    00002e22: 	movl	$0x16e3600, %esi
    00002e27: 	movq	0x110(%rsp), %rdi
    00002e2f: 	callq	_Z9summarizePKciiii # Offset: 11823
    00002e34: 	movq	0x110(%rsp), %rdi
    00002e3c: 	cmpq	(%rsp), %rdi
    00002e40: 	je	.Ltmp2218 # Offset: 11840
    00002e42: 	movq	0x120(%rsp), %rax
    00002e4a: 	leaq	0x1(%rax), %rsi
    00002e4e: 	callq	_ZdlPvm@PLT # Offset: 11854
.Ltmp2218:
    00002e53: 	movl	$0x4, %esi
    00002e58: 	movq	%r13, %rdi
    00002e5b: 	callq	_ZdlPvm@PLT # Offset: 11867
    00002e60: 	movl	$0x4, %esi
    00002e65: 	movq	%r14, %rdi
    00002e68: 	callq	_ZdlPvm@PLT # Offset: 11880
    00002e6d: 	movq	0x8(%rsp), %rdi
    00002e72: 	movl	$0x4, %esi
    00002e77: 	callq	_ZdlPvm@PLT # Offset: 11895
    00002e7c: 	movq	0xf0(%rsp), %rdi
    00002e84: 	leaq	0x100(%rsp), %rax
    00002e8c: 	cmpq	%rax, %rdi
    00002e8f: 	je	.Ltmp2219 # Offset: 11919
    00002e91: 	movq	0x100(%rsp), %rax
    00002e99: 	leaq	0x1(%rax), %rsi
    00002e9d: 	callq	_ZdlPvm@PLT # Offset: 11933
.Ltmp2219:
    00002ea2: 	movq	0x138(%rsp), %rax
    00002eaa: 	subq	%fs:0x28, %rax
    00002eb3: 	jne	.Ltmp2220 # Offset: 11955
    00002eb9: 	addq	$0x148, %rsp
    00002ec0: 	popq	%rbx
    00002ec1: 	popq	%rbp
    00002ec2: 	popq	%r12
    00002ec4: 	popq	%r13
    00002ec6: 	popq	%r14
    00002ec8: 	popq	%r15
    00002eca: 	retq # Offset: 11978
.Ltmp1978:
    00002ecb: 	movq	-0x8(%rdx), %rax
    00002ecf: 	addq	$0x200, %rax
    00002ed5: 	jmp	.Ltmp2221 # Offset: 11989
.Ltmp2213:
    00002eda: 	movq	-0x8(%rdx), %rax
    00002ede: 	addq	$0x200, %rax
    00002ee4: 	jmp	.Ltmp2222 # Offset: 12004
.Ltmp2207:
    00002ee9: 	movq	-0x8(%rdx), %rax
    00002eed: 	addq	$0x200, %rax
    00002ef3: 	jmp	.Ltmp2223 # Offset: 12019
.Ltmp2200:
    00002ef8: 	movq	-0x8(%rdx), %rax
    00002efc: 	addq	$0x200, %rax
    00002f02: 	jmp	.Ltmp2224 # Offset: 12034
.Ltmp2189:
    00002f07: 	movq	-0x8(%rdx), %rax
    00002f0b: 	addq	$0x200, %rax
    00002f11: 	jmp	.Ltmp2225 # Offset: 12049
.Ltmp2181:
    00002f16: 	movq	-0x8(%rdx), %rax
    00002f1a: 	addq	$0x200, %rax
    00002f20: 	jmp	.Ltmp2226 # Offset: 12064
.Ltmp2175:
    00002f25: 	movq	-0x8(%rdx), %rax
    00002f29: 	addq	$0x200, %rax
    00002f2f: 	jmp	.Ltmp2227 # Offset: 12079
.Ltmp2169:
    00002f34: 	movq	-0x8(%rdx), %rax
    00002f38: 	addq	$0x200, %rax
    00002f3e: 	jmp	.Ltmp2228 # Offset: 12094
.Ltmp2163:
    00002f43: 	movq	-0x8(%rdx), %rax
    00002f47: 	addq	$0x200, %rax
    00002f4d: 	jmp	.Ltmp2229 # Offset: 12109
.Ltmp2157:
    00002f52: 	movq	-0x8(%rdx), %rax
    00002f56: 	addq	$0x200, %rax
    00002f5c: 	jmp	.Ltmp2230 # Offset: 12124
.Ltmp2151:
    00002f61: 	movq	-0x8(%rdx), %rax
    00002f65: 	addq	$0x200, %rax
    00002f6b: 	jmp	.Ltmp2231 # Offset: 12139
.Ltmp2135:
    00002f70: 	movq	-0x8(%rdx), %rax
    00002f74: 	addq	$0x200, %rax
    00002f7a: 	jmp	.Ltmp2232 # Offset: 12154
.Ltmp2121:
    00002f7f: 	movq	-0x8(%rdx), %rax
    00002f83: 	addq	$0x200, %rax
    00002f89: 	jmp	.Ltmp2233 # Offset: 12169
.Ltmp2107:
    00002f8e: 	movq	-0x8(%rdx), %rax
    00002f92: 	addq	$0x200, %rax
    00002f98: 	jmp	.Ltmp2234 # Offset: 12184
.Ltmp2100:
    00002f9d: 	movq	-0x8(%rdx), %rax
    00002fa1: 	addq	$0x200, %rax
    00002fa7: 	jmp	.Ltmp2235 # Offset: 12199
.Ltmp2094:
    00002fac: 	movq	-0x8(%rdx), %rax
    00002fb0: 	addq	$0x200, %rax
    00002fb6: 	jmp	.Ltmp2236 # Offset: 12214
.Ltmp2083:
    00002fbb: 	movq	-0x8(%rdx), %rax
    00002fbf: 	addq	$0x200, %rax
    00002fc5: 	jmp	.Ltmp2237 # Offset: 12229
.Ltmp2074:
    00002fca: 	movq	-0x8(%rdx), %rax
    00002fce: 	addq	$0x200, %rax
    00002fd4: 	jmp	.Ltmp2238 # Offset: 12244
.Ltmp2064:
    00002fd9: 	movq	-0x8(%rdx), %rax
    00002fdd: 	addq	$0x200, %rax
    00002fe3: 	jmp	.Ltmp2239 # Offset: 12259
.Ltmp2052:
    00002fe8: 	movq	-0x8(%rdx), %rax
    00002fec: 	addq	$0x200, %rax
    00002ff2: 	jmp	.Ltmp2240 # Offset: 12274
.Ltmp2042:
    00002ff7: 	movq	-0x8(%rdx), %rax
    00002ffb: 	addq	$0x200, %rax
    00003001: 	jmp	.Ltmp2241 # Offset: 12289
.Ltmp2032:
    00003006: 	movq	-0x8(%rdx), %rax
    0000300a: 	addq	$0x200, %rax
    00003010: 	jmp	.Ltmp2242 # Offset: 12304
.Ltmp2020:
    00003015: 	movq	-0x8(%rdx), %rax
    00003019: 	addq	$0x200, %rax
    0000301f: 	jmp	.Ltmp2243 # Offset: 12319
.Ltmp2010:
    00003024: 	movq	-0x8(%rdx), %rax
    00003028: 	addq	$0x200, %rax
    0000302e: 	jmp	.Ltmp2244 # Offset: 12334
.Ltmp2000:
    00003033: 	movq	-0x8(%rdx), %rax
    00003037: 	addq	$0x200, %rax
    0000303d: 	jmp	.Ltmp2245 # Offset: 12349
.Ltmp1988:
    00003042: 	movq	-0x8(%rdx), %rax
    00003046: 	addq	$0x200, %rax
    0000304c: 	jmp	.Ltmp2246 # Offset: 12364
.Ltmp2220:
    00003051: 	callq	__stack_chk_fail@PLT # Offset: 12369
    00003056: 	endbr64
.Ltmp2248:
    0000305a: 	movq	%rax, %rbx
    0000305d: 	jmp	.Ltmp2247 # Offset: 12381
    0000305f: 	endbr64
    00003063: 	jmp	.Ltmp2248 # Offset: 12387
    00003065: 	endbr64
    00003069: 	jmp	.Ltmp2248 # Offset: 12393
    0000306b: 	endbr64
    0000306f: 	jmp	.Ltmp2248 # Offset: 12399
    00003071: 	endbr64
    00003075: 	jmp	.Ltmp2248 # Offset: 12405
    00003077: 	endbr64
    0000307b: 	jmp	.Ltmp2248 # Offset: 12411
    0000307d: 	endbr64
    00003081: 	jmp	.Ltmp2248 # Offset: 12417
.Ltmp2247:
    00003083: 	movq	0x110(%rsp), %rdi
    0000308b: 	cmpq	(%rsp), %rdi
    0000308f: 	je	.Ltmp2249 # Offset: 12431
.Ltmp2253:
    00003091: 	movq	0x120(%rsp), %rax
    00003099: 	leaq	0x1(%rax), %rsi
    0000309d: 	callq	_ZdlPvm@PLT # Offset: 12445
.Ltmp2249:
    000030a2: 	movl	$0x4, %esi
    000030a7: 	movq	%r13, %rdi
    000030aa: 	movq	%rbx, %rbp
    000030ad: 	callq	_ZdlPvm@PLT # Offset: 12461
.Ltmp2251:
    000030b2: 	movl	$0x4, %esi
    000030b7: 	movq	%r14, %rdi
    000030ba: 	callq	_ZdlPvm@PLT # Offset: 12474
.Ltmp2254:
    000030bf: 	movq	0x8(%rsp), %rdi
    000030c4: 	movl	$0x4, %esi
    000030c9: 	callq	_ZdlPvm@PLT # Offset: 12489
.Ltmp2255:
    000030ce: 	movq	0xf0(%rsp), %rdi
    000030d6: 	leaq	0x100(%rsp), %rax
    000030de: 	cmpq	%rax, %rdi
    000030e1: 	je	.Ltmp2250 # Offset: 12513
    000030e3: 	movq	0x100(%rsp), %rax
    000030eb: 	leaq	0x1(%rax), %rsi
    000030ef: 	callq	_ZdlPvm@PLT # Offset: 12527
.Ltmp2250:
    000030f4: 	movq	%rbp, %rdi
    000030f7: 	callq	_Unwind_Resume@PLT # Offset: 12535
    000030fc: 	endbr64
    00003100: 	jmp	.Ltmp2248 # Offset: 12544
    00003105: 	endbr64
    00003109: 	jmp	.Ltmp2248 # Offset: 12553
    0000310e: 	endbr64
    00003112: 	jmp	.Ltmp2248 # Offset: 12562
    00003117: 	endbr64
    0000311b: 	jmp	.Ltmp2248 # Offset: 12571
    00003120: 	endbr64
    00003124: 	jmp	.Ltmp2248 # Offset: 12580
    00003129: 	endbr64
    0000312d: 	jmp	.Ltmp2248 # Offset: 12589
    00003132: 	endbr64
    00003136: 	jmp	.Ltmp2248 # Offset: 12598
    0000313b: 	endbr64
    0000313f: 	jmp	.Ltmp2248 # Offset: 12607
    00003144: 	endbr64
    00003148: 	movq	%rax, %rbx
    0000314b: 	jmp	.Ltmp2249 # Offset: 12619
    00003150: 	endbr64
    00003154: 	movq	%rax, %rbp
    00003157: 	jmp	.Ltmp2251 # Offset: 12631
    0000315c: 	endbr64
    00003160: 	jmp	.Ltmp2248 # Offset: 12640
    00003165: 	endbr64
    00003169: 	jmp	.Ltmp2248 # Offset: 12649
    0000316e: 	endbr64
    00003172: 	jmp	.Ltmp2248 # Offset: 12658
    00003177: 	endbr64
    0000317b: 	jmp	.Ltmp2248 # Offset: 12667
    00003180: 	endbr64
    00003184: 	jmp	.Ltmp2248 # Offset: 12676
    00003189: 	endbr64
    0000318d: 	jmp	.Ltmp2248 # Offset: 12685
    00003192: 	endbr64
    00003196: 	jmp	.Ltmp2248 # Offset: 12694
    0000319b: 	endbr64
    0000319f: 	jmp	.Ltmp2248 # Offset: 12703
    000031a4: 	endbr64
    000031a8: 	movq	%rax, %rbx
    000031ab: 	jmp	.Ltmp2252 # Offset: 12715
    000031ad: 	endbr64
    000031b1: 	jmp	.Ltmp2248 # Offset: 12721
.Ltmp2252:
    000031b6: 	movq	0x110(%rsp), %rdi
    000031be: 	leaq	0x120(%rsp), %rax
    000031c6: 	cmpq	%rax, %rdi
    000031c9: 	jne	.Ltmp2253 # Offset: 12745
    000031cf: 	jmp	.Ltmp2249 # Offset: 12751
    000031d4: 	endbr64
    000031d8: 	jmp	.Ltmp2248 # Offset: 12760
    000031dd: 	endbr64
    000031e1: 	jmp	.Ltmp2248 # Offset: 12769
    000031e6: 	endbr64
    000031ea: 	movq	%rax, %rbp
    000031ed: 	jmp	.Ltmp2254 # Offset: 12781
    000031f2: 	endbr64
    000031f6: 	movq	%rax, %rbp
    000031f9: 	jmp	.Ltmp2255 # Offset: 12793
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIfEvv"

Binary Function "_Z11TestOneTypeIiEvv" after disassembly {
  Number      : 82
  State       : disassembled
  Address     : 0x29780
  Size        : 0x35e2
  MaxSize     : 0x35e2
  Offset      : 0x29780
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIiEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB081:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	leaq	DATAat0x2d975(%rip), %rsi
    0000000d: 	pushq	%r14
    0000000f: 	pushq	%r13
    00000011: 	pushq	%r12
    00000013: 	pushq	%rbp
    00000014: 	pushq	%rbx
    00000015: 	subq	$0x158, %rsp
    0000001c: 	movq	%fs:0x28, %rax
    00000025: 	movq	%rax, 0x148(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	leaq	0x100(%rsp), %rax
    00000037: 	movq	%rax, %rdi
    0000003a: 	movq	%rax, 0x20(%rsp)
    0000003f: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1" # Offset: 63
    00000044: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm7
    0000004c: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm4
    00000054: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000005b: 	leaq	0xe0(%rsp), %rsi
    00000063: 	movaps	%xmm7, 0xe0(%rsp)
    0000006b: 	movaps	%xmm4, 0xf0(%rsp)
    00000073: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_erase_at_endESt15_Deque_iteratorIS5_RS5_PS5_E # Offset: 115
    00000078: 	movl	$0x3a980, %edi
    0000007d: 	callq	_Znam@PLT # Offset: 125
    00000082: 	movl	$0x3a980, %edi
    00000087: 	movq	%rax, 0x10(%rsp)
    0000008c: 	movq	%rax, %rbx
    0000008f: 	callq	_Znam@PLT # Offset: 143
    00000094: 	movl	$0x3a980, %edi
    00000099: 	movq	%rax, %r13
    0000009c: 	callq	_Znam@PLT # Offset: 156
    000000a1: 	movq	%rax, %rdx
    000000a4: 	movq	%r13, %rsi
    000000a7: 	movq	%rbx, %rdi
    000000aa: 	movq	%rax, %r15
    000000ad: 	callq	"_Z13verify_matmulIiEvPT_S1_S1_mm.constprop.0/1" # Offset: 173
    000000b2: 	cvttsd2si	init_value(%rip), %eax
    000000ba: 	movd	%eax, %xmm0
    000000be: 	movq	%rbx, %rax
    000000c1: 	leaq	0x3a980(%rbx), %rbx
    000000c8: 	pshufd	$0x0, %xmm0, %xmm0
.Ltmp2256:
    000000cd: 	movups	%xmm0, (%rax)
    000000d0: 	addq	$0x10, %rax
    000000d4: 	cmpq	%rax, %rbx
    000000d7: 	jne	.Ltmp2256 # Offset: 215
    000000d9: 	leaq	0x3a980(%r13), %rdx
    000000e0: 	movq	%r13, %rax
.Ltmp2257:
    000000e3: 	movups	%xmm0, (%rax)
    000000e6: 	addq	$0x10, %rax
    000000ea: 	cmpq	%rax, %rdx
    000000ed: 	jne	.Ltmp2257 # Offset: 237
    000000ef: 	movq	%r15, 0x58(%rsp)
    000000f4: 	leaq	0x3a980(%r15), %rax
    000000fb: 	movq	%rax, 0x18(%rsp)
    00000100: 	movq	%r15, %rax
.Ltmp2258:
    00000103: 	movups	%xmm0, (%rax)
    00000106: 	addq	$0x10, %rax
    0000010a: 	cmpq	%rax, 0x18(%rsp)
    0000010f: 	jne	.Ltmp2258 # Offset: 271
    00000111: 	leaq	0x120(%rsp), %r14
    00000119: 	movq	0x20(%rsp), %rsi
    0000011e: 	leaq	DATAat0x2d647(%rip), %rdx
    00000125: 	movq	%r14, %rdi
    00000128: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 296
    0000012d: 	callq	clock@PLT # Offset: 301
    00000132: 	movq	iterations(%rip), %r10
    00000139: 	xorl	%r12d, %r12d
    0000013c: 	leaq	0x320(%r13), %rbp
    00000143: 	movq	%rax, start_time(%rip)
    0000014a: 	testq	%r10, %r10
    0000014d: 	je	.Ltmp2259 # Offset: 333
.Ltmp2263:
    00000153: 	movq	%r15, %rdi
    00000156: 	movl	$0x3a980, %edx
    0000015b: 	xorl	%esi, %esi
    0000015d: 	movq	%r10, 0x8(%rsp)
    00000162: 	callq	memset@PLT # Offset: 354
    00000167: 	movq	0x10(%rsp), %rcx
    0000016c: 	movq	%rbp, %r9
    0000016f: 	movq	%r13, %r8
    00000172: 	movq	0x8(%rsp), %r10
    00000177: 	xorl	%edi, %edi
.Ltmp2262:
    00000179: 	movq	%r8, %rsi
    0000017c: 	movq	%r15, %rdx
.Ltmp2261:
    0000017f: 	movdqu	(%rsi), %xmm2
    00000183: 	xorl	%eax, %eax
    00000185: 	movdqa	%xmm2, %xmm3
    00000189: 	psrlq	$0x20, %xmm3
.Ltmp2260:
    0000018e: 	movd	(%rcx,%rax), %xmm4
    00000193: 	pshufd	$0x0, %xmm4, %xmm0
    00000198: 	movdqa	%xmm0, %xmm1
    0000019c: 	psrlq	$0x20, %xmm0
    000001a1: 	pmuludq	%xmm2, %xmm1
    000001a5: 	pmuludq	%xmm3, %xmm0
    000001a9: 	pshufd	$0x8, %xmm1, %xmm1
    000001ae: 	pshufd	$0x8, %xmm0, %xmm0
    000001b3: 	punpckldq	%xmm0, %xmm1
    000001b7: 	movdqu	(%rdx,%rax), %xmm0
    000001bc: 	paddd	%xmm1, %xmm0
    000001c0: 	movups	%xmm0, (%rdx,%rax)
    000001c4: 	addq	$0x320, %rax
    000001ca: 	cmpq	$0x3a980, %rax
    000001d0: 	jne	.Ltmp2260 # Offset: 464
    000001d2: 	addq	$0x10, %rsi
    000001d6: 	addq	$0x10, %rdx
    000001da: 	cmpq	%rsi, %r9
    000001dd: 	jne	.Ltmp2261 # Offset: 477
    000001df: 	addq	$0x1, %rdi
    000001e3: 	addq	$0x320, %r9
    000001ea: 	addq	$0x320, %r8
    000001f1: 	addq	$0x4, %rcx
    000001f5: 	cmpq	$0xc8, %rdi
    000001fc: 	jne	.Ltmp2262 # Offset: 508
    00000202: 	addq	$0x1, %r12
    00000206: 	cmpq	%r10, %r12
    00000209: 	jne	.Ltmp2263 # Offset: 521
.Ltmp2259:
    0000020f: 	movq	%r14, %rdi
    00000212: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 530
    00000217: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000021e: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00000225: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000022c: 	je	.Ltmp2264 # Offset: 556
.Ltmp2511:
    00000232: 	movq	-0x20(%rax), %rbp
    00000236: 	callq	clock@PLT # Offset: 566
    0000023b: 	pxor	%xmm0, %xmm0
    0000023f: 	movq	%rax, end_time(%rip)
    00000246: 	movq	%rbp, %rdi
    00000249: 	subq	start_time(%rip), %rax
    00000250: 	cvtsi2sd	%rax, %xmm0
    00000255: 	divsd	DATAat0x2da00(%rip), %xmm0
    0000025d: 	callq	_Z13record_resultdPKc # Offset: 605
    00000262: 	movq	%r15, %rax
    00000265: 	xorl	%edi, %edi
.Ltmp2267:
    00000267: 	pxor	%xmm0, %xmm0
    0000026b: 	leaq	0x320(%rax), %rdx
.Ltmp2265:
    00000272: 	movdqu	(%rax), %xmm7
    00000276: 	addq	$0x10, %rax
    0000027a: 	paddd	%xmm7, %xmm0
    0000027e: 	cmpq	%rax, %rdx
    00000281: 	jne	.Ltmp2265 # Offset: 641
    00000283: 	movdqa	%xmm0, %xmm1
    00000287: 	psrldq	$0x8, %xmm1
    0000028c: 	paddd	%xmm1, %xmm0
    00000290: 	movdqa	%xmm0, %xmm1
    00000294: 	psrldq	$0x4, %xmm1
    00000299: 	paddd	%xmm1, %xmm0
    0000029d: 	movd	%xmm0, %eax
    000002a1: 	addl	%eax, %edi
    000002a3: 	cmpq	%rdx, 0x18(%rsp)
    000002a8: 	je	.Ltmp2266 # Offset: 680
    000002aa: 	movq	%rdx, %rax
    000002ad: 	jmp	.Ltmp2267 # Offset: 685
.Ltmp2266:
    000002af: 	movq	%r14, %rsi
    000002b2: 	callq	_Z9check_sumIiEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 690
    000002b7: 	movq	0x120(%rsp), %rdi
    000002bf: 	leaq	0x130(%rsp), %rax
    000002c7: 	movq	%rax, 0x8(%rsp)
    000002cc: 	cmpq	%rax, %rdi
    000002cf: 	je	.Ltmp2268 # Offset: 719
    000002d1: 	movq	0x130(%rsp), %rax
    000002d9: 	leaq	0x1(%rax), %rsi
    000002dd: 	callq	_ZdlPvm@PLT # Offset: 733
.Ltmp2268:
    000002e2: 	movq	0x20(%rsp), %rsi
    000002e7: 	leaq	DATAat0x2d65c(%rip), %rdx
    000002ee: 	movq	%r14, %rdi
    000002f1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 753
    000002f6: 	callq	clock@PLT # Offset: 758
    000002fb: 	movq	iterations(%rip), %r12
    00000302: 	xorl	%ebp, %ebp
    00000304: 	movq	%rax, start_time(%rip)
    0000030b: 	testq	%r12, %r12
    0000030e: 	je	.Ltmp2269 # Offset: 782
.Ltmp2273:
    00000314: 	xorl	%esi, %esi
    00000316: 	movq	%r15, %rdi
    00000319: 	movl	$0x3a980, %edx
    0000031e: 	callq	memset@PLT # Offset: 798
    00000323: 	movq	0x10(%rsp), %rdi
    00000328: 	movq	%r13, %rcx
    0000032b: 	xorl	%esi, %esi
.Ltmp2272:
    0000032d: 	movq	%r15, %rdx
    00000330: 	movq	%rdi, %r8
.Ltmp2271:
    00000333: 	movd	(%r8), %xmm4
    00000338: 	xorl	%eax, %eax
    0000033a: 	pshufd	$0x0, %xmm4, %xmm2
    0000033f: 	movdqa	%xmm2, %xmm3
    00000343: 	psrlq	$0x20, %xmm3
.Ltmp2270:
    00000348: 	movdqu	(%rcx,%rax), %xmm0
    0000034d: 	movdqu	(%rcx,%rax), %xmm1
    00000352: 	psrlq	$0x20, %xmm0
    00000357: 	pmuludq	%xmm2, %xmm1
    0000035b: 	pmuludq	%xmm3, %xmm0
    0000035f: 	pshufd	$0x8, %xmm1, %xmm1
    00000364: 	pshufd	$0x8, %xmm0, %xmm0
    00000369: 	punpckldq	%xmm0, %xmm1
    0000036d: 	movdqu	(%rdx,%rax), %xmm0
    00000372: 	paddd	%xmm1, %xmm0
    00000376: 	movups	%xmm0, (%rdx,%rax)
    0000037a: 	addq	$0x10, %rax
    0000037e: 	cmpq	$0x320, %rax
    00000384: 	jne	.Ltmp2270 # Offset: 900
    00000386: 	addq	$0x320, %r8
    0000038d: 	addq	$0x320, %rdx
    00000394: 	cmpq	%rdx, 0x18(%rsp)
    00000399: 	jne	.Ltmp2271 # Offset: 921
    0000039b: 	addq	$0x1, %rsi
    0000039f: 	addq	$0x320, %rcx
    000003a6: 	addq	$0x4, %rdi
    000003aa: 	cmpq	$0xc8, %rsi
    000003b1: 	jne	.Ltmp2272 # Offset: 945
    000003b7: 	addq	$0x1, %rbp
    000003bb: 	cmpq	%r12, %rbp
    000003be: 	jne	.Ltmp2273 # Offset: 958
.Ltmp2269:
    000003c4: 	movq	%r14, %rdi
    000003c7: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 967
    000003cc: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000003d3: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    000003da: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000003e1: 	je	.Ltmp2274 # Offset: 993
.Ltmp2536:
    000003e7: 	movq	-0x20(%rax), %rbp
    000003eb: 	callq	clock@PLT # Offset: 1003
    000003f0: 	pxor	%xmm0, %xmm0
    000003f4: 	movq	%rax, end_time(%rip)
    000003fb: 	movq	%rbp, %rdi
    000003fe: 	subq	start_time(%rip), %rax
    00000405: 	cvtsi2sd	%rax, %xmm0
    0000040a: 	divsd	DATAat0x2da00(%rip), %xmm0
    00000412: 	callq	_Z13record_resultdPKc # Offset: 1042
    00000417: 	movq	%r15, %rax
    0000041a: 	xorl	%edi, %edi
.Ltmp2277:
    0000041c: 	pxor	%xmm0, %xmm0
    00000420: 	leaq	0x320(%rax), %rdx
.Ltmp2275:
    00000427: 	movdqu	(%rax), %xmm7
    0000042b: 	addq	$0x10, %rax
    0000042f: 	paddd	%xmm7, %xmm0
    00000433: 	cmpq	%rax, %rdx
    00000436: 	jne	.Ltmp2275 # Offset: 1078
    00000438: 	movdqa	%xmm0, %xmm1
    0000043c: 	psrldq	$0x8, %xmm1
    00000441: 	paddd	%xmm1, %xmm0
    00000445: 	movdqa	%xmm0, %xmm1
    00000449: 	psrldq	$0x4, %xmm1
    0000044e: 	paddd	%xmm1, %xmm0
    00000452: 	movd	%xmm0, %eax
    00000456: 	addl	%eax, %edi
    00000458: 	cmpq	%rdx, 0x18(%rsp)
    0000045d: 	je	.Ltmp2276 # Offset: 1117
    0000045f: 	movq	%rdx, %rax
    00000462: 	jmp	.Ltmp2277 # Offset: 1122
.Ltmp2276:
    00000464: 	movq	%r14, %rsi
    00000467: 	callq	_Z9check_sumIiEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1127
    0000046c: 	movq	0x120(%rsp), %rdi
    00000474: 	cmpq	0x8(%rsp), %rdi
    00000479: 	je	.Ltmp2278 # Offset: 1145
    0000047b: 	movq	0x130(%rsp), %rax
    00000483: 	leaq	0x1(%rax), %rsi
    00000487: 	callq	_ZdlPvm@PLT # Offset: 1159
.Ltmp2278:
    0000048c: 	movq	0x20(%rsp), %rsi
    00000491: 	leaq	DATAat0x2d671(%rip), %rdx
    00000498: 	movq	%r14, %rdi
    0000049b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1179
    000004a0: 	callq	clock@PLT # Offset: 1184
    000004a5: 	movq	iterations(%rip), %r12
    000004ac: 	xorl	%ebp, %ebp
    000004ae: 	movq	%rax, start_time(%rip)
    000004b5: 	leaq	0x26ac0(%r13), %rax
    000004bc: 	movq	%rax, 0x30(%rsp)
    000004c1: 	leaq	0x27100(%r13), %rax
    000004c8: 	movq	%rax, 0x28(%rsp)
    000004cd: 	testq	%r12, %r12
    000004d0: 	je	.Ltmp2279 # Offset: 1232
.Ltmp2285:
    000004d6: 	movl	$0x3a980, %edx
    000004db: 	xorl	%esi, %esi
    000004dd: 	movq	%r15, %rdi
    000004e0: 	callq	memset@PLT # Offset: 1248
    000004e5: 	movq	0x10(%rsp), %rcx
    000004ea: 	movq	%r15, %rdx
.Ltmp2284:
    000004ed: 	movq	%r13, %rdi
    000004f0: 	xorl	%esi, %esi
.Ltmp2281:
    000004f2: 	movd	(%rcx,%rsi,4), %xmm4
    000004f7: 	movd	0x4(%rcx,%rsi,4), %xmm7
    000004fd: 	leaq	0x320(%rdi), %r8
    00000504: 	xorl	%eax, %eax
    00000506: 	pshufd	$0x0, %xmm4, %xmm4
    0000050b: 	pshufd	$0x0, %xmm7, %xmm3
    00000510: 	movdqa	%xmm4, %xmm6
    00000514: 	movdqa	%xmm3, %xmm5
    00000518: 	psrlq	$0x20, %xmm6
    0000051d: 	psrlq	$0x20, %xmm5
.Ltmp2280:
    00000522: 	movdqu	(%rdi,%rax), %xmm1
    00000527: 	movdqu	(%rdi,%rax), %xmm0
    0000052c: 	movdqu	(%r8,%rax), %xmm2
    00000532: 	movdqu	(%rdx,%rax), %xmm7
    00000537: 	psrlq	$0x20, %xmm1
    0000053c: 	pmuludq	%xmm4, %xmm0
    00000540: 	pmuludq	%xmm6, %xmm1
    00000544: 	pmuludq	%xmm3, %xmm2
    00000548: 	pshufd	$0x8, %xmm0, %xmm0
    0000054d: 	pshufd	$0x8, %xmm1, %xmm1
    00000552: 	pshufd	$0x8, %xmm2, %xmm2
    00000557: 	punpckldq	%xmm1, %xmm0
    0000055b: 	movdqu	(%r8,%rax), %xmm1
    00000561: 	paddd	%xmm7, %xmm0
    00000565: 	psrlq	$0x20, %xmm1
    0000056a: 	pmuludq	%xmm5, %xmm1
    0000056e: 	pshufd	$0x8, %xmm1, %xmm1
    00000573: 	punpckldq	%xmm1, %xmm2
    00000577: 	paddd	%xmm2, %xmm0
    0000057b: 	movups	%xmm0, (%rdx,%rax)
    0000057f: 	addq	$0x10, %rax
    00000583: 	cmpq	$0x320, %rax
    00000589: 	jne	.Ltmp2280 # Offset: 1417
    0000058b: 	addq	$0x2, %rsi
    0000058f: 	addq	$0x640, %rdi
    00000596: 	cmpq	$0xc6, %rsi
    0000059d: 	jne	.Ltmp2281 # Offset: 1437
    000005a3: 	movq	0x30(%rsp), %rsi
    000005a8: 	leaq	0x318(%rcx), %rdi
.Ltmp2283:
    000005af: 	movd	(%rdi), %xmm4
    000005b3: 	xorl	%eax, %eax
    000005b5: 	pshufd	$0x0, %xmm4, %xmm2
    000005ba: 	movdqa	%xmm2, %xmm3
    000005be: 	psrlq	$0x20, %xmm3
.Ltmp2282:
    000005c3: 	movdqu	(%rsi,%rax), %xmm0
    000005c8: 	movdqu	(%rsi,%rax), %xmm1
    000005cd: 	psrlq	$0x20, %xmm0
    000005d2: 	pmuludq	%xmm2, %xmm1
    000005d6: 	pmuludq	%xmm3, %xmm0
    000005da: 	pshufd	$0x8, %xmm1, %xmm1
    000005df: 	pshufd	$0x8, %xmm0, %xmm0
    000005e4: 	punpckldq	%xmm0, %xmm1
    000005e8: 	movdqu	(%rdx,%rax), %xmm0
    000005ed: 	paddd	%xmm1, %xmm0
    000005f1: 	movups	%xmm0, (%rdx,%rax)
    000005f5: 	addq	$0x10, %rax
    000005f9: 	cmpq	$0x320, %rax
    000005ff: 	jne	.Ltmp2282 # Offset: 1535
    00000601: 	addq	$0x4, %rdi
    00000605: 	addq	$0x320, %rsi
    0000060c: 	cmpq	%rsi, 0x28(%rsp)
    00000611: 	jne	.Ltmp2283 # Offset: 1553
    00000613: 	addq	$0x320, %rcx
    0000061a: 	addq	$0x320, %rdx
    00000621: 	cmpq	%rcx, %rbx
    00000624: 	jne	.Ltmp2284 # Offset: 1572
    0000062a: 	addq	$0x1, %rbp
    0000062e: 	cmpq	%r12, %rbp
    00000631: 	jne	.Ltmp2285 # Offset: 1585
.Ltmp2279:
    00000637: 	movq	%r14, %rdi
    0000063a: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1594
    0000063f: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000646: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    0000064d: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000654: 	je	.Ltmp2286 # Offset: 1620
.Ltmp2535:
    0000065a: 	movq	-0x20(%rax), %rbp
    0000065e: 	callq	clock@PLT # Offset: 1630
    00000663: 	pxor	%xmm0, %xmm0
    00000667: 	movq	%rax, end_time(%rip)
    0000066e: 	movq	%rbp, %rdi
    00000671: 	subq	start_time(%rip), %rax
    00000678: 	cvtsi2sd	%rax, %xmm0
    0000067d: 	divsd	DATAat0x2da00(%rip), %xmm0
    00000685: 	callq	_Z13record_resultdPKc # Offset: 1669
    0000068a: 	movq	%r15, %rax
    0000068d: 	xorl	%edi, %edi
.Ltmp2289:
    0000068f: 	pxor	%xmm0, %xmm0
    00000693: 	leaq	0x320(%rax), %rdx
.Ltmp2287:
    0000069a: 	movdqu	(%rax), %xmm4
    0000069e: 	addq	$0x10, %rax
    000006a2: 	paddd	%xmm4, %xmm0
    000006a6: 	cmpq	%rax, %rdx
    000006a9: 	jne	.Ltmp2287 # Offset: 1705
    000006ab: 	movdqa	%xmm0, %xmm1
    000006af: 	psrldq	$0x8, %xmm1
    000006b4: 	paddd	%xmm1, %xmm0
    000006b8: 	movdqa	%xmm0, %xmm1
    000006bc: 	psrldq	$0x4, %xmm1
    000006c1: 	paddd	%xmm1, %xmm0
    000006c5: 	movd	%xmm0, %eax
    000006c9: 	addl	%eax, %edi
    000006cb: 	cmpq	%rdx, 0x18(%rsp)
    000006d0: 	je	.Ltmp2288 # Offset: 1744
    000006d2: 	movq	%rdx, %rax
    000006d5: 	jmp	.Ltmp2289 # Offset: 1749
.Ltmp2288:
    000006d7: 	movq	%r14, %rsi
    000006da: 	callq	_Z9check_sumIiEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1754
    000006df: 	movq	0x120(%rsp), %rdi
    000006e7: 	cmpq	0x8(%rsp), %rdi
    000006ec: 	je	.Ltmp2290 # Offset: 1772
    000006ee: 	movq	0x130(%rsp), %rax
    000006f6: 	leaq	0x1(%rax), %rsi
    000006fa: 	callq	_ZdlPvm@PLT # Offset: 1786
.Ltmp2290:
    000006ff: 	movq	0x20(%rsp), %rsi
    00000704: 	leaq	DATAat0x2d686(%rip), %rdx
    0000070b: 	movq	%r14, %rdi
    0000070e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1806
    00000713: 	callq	clock@PLT # Offset: 1811
    00000718: 	movq	iterations(%rip), %r12
    0000071f: 	xorl	%ebp, %ebp
    00000721: 	movq	%rax, start_time(%rip)
    00000728: 	leaq	0x27100(%r13), %rax
    0000072f: 	movq	%rax, 0x28(%rsp)
    00000734: 	testq	%r12, %r12
    00000737: 	je	.Ltmp2291 # Offset: 1847
.Ltmp2295:
    0000073d: 	xorl	%esi, %esi
    0000073f: 	movq	%r15, %rdi
    00000742: 	movl	$0x3a980, %edx
    00000747: 	callq	memset@PLT # Offset: 1863
    0000074c: 	movq	0x10(%rsp), %rdi
    00000751: 	movq	%r15, %rsi
.Ltmp2294:
    00000754: 	movq	0x28(%rsp), %r8
    00000759: 	movq	%r13, %r9
    0000075c: 	xorl	%ecx, %ecx
.Ltmp2293:
    0000075e: 	movdqu	(%rsi,%rcx), %xmm3
    00000763: 	movq	%rdi, %rdx
    00000766: 	movq	%r9, %rax
.Ltmp2292:
    00000769: 	movd	(%rdx), %xmm5
    0000076d: 	movdqu	(%rax), %xmm1
    00000771: 	addq	$0x320, %rax
    00000777: 	addq	$0x4, %rdx
    0000077b: 	movdqu	-0x320(%rax), %xmm0
    00000783: 	pshufd	$0x0, %xmm5, %xmm2
    00000788: 	pmuludq	%xmm2, %xmm1
    0000078c: 	psrlq	$0x20, %xmm0
    00000791: 	psrlq	$0x20, %xmm2
    00000796: 	pmuludq	%xmm2, %xmm0
    0000079a: 	pshufd	$0x8, %xmm1, %xmm1
    0000079f: 	pshufd	$0x8, %xmm0, %xmm0
    000007a4: 	punpckldq	%xmm0, %xmm1
    000007a8: 	paddd	%xmm1, %xmm3
    000007ac: 	cmpq	%rax, %r8
    000007af: 	jne	.Ltmp2292 # Offset: 1967
    000007b1: 	movups	%xmm3, (%rsi,%rcx)
    000007b5: 	addq	$0x10, %rcx
    000007b9: 	addq	$0x10, %r9
    000007bd: 	addq	$0x10, %r8
    000007c1: 	cmpq	$0x320, %rcx
    000007c8: 	jne	.Ltmp2293 # Offset: 1992
    000007ca: 	addq	$0x320, %rdi
    000007d1: 	addq	$0x320, %rsi
    000007d8: 	cmpq	%rdi, %rbx
    000007db: 	jne	.Ltmp2294 # Offset: 2011
    000007e1: 	addq	$0x1, %rbp
    000007e5: 	cmpq	%r12, %rbp
    000007e8: 	jne	.Ltmp2295 # Offset: 2024
.Ltmp2291:
    000007ee: 	movq	%r14, %rdi
    000007f1: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 2033
    000007f6: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000007fd: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00000804: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000080b: 	je	.Ltmp2296 # Offset: 2059
.Ltmp2534:
    00000811: 	movq	-0x20(%rax), %rbp
    00000815: 	callq	clock@PLT # Offset: 2069
    0000081a: 	pxor	%xmm0, %xmm0
    0000081e: 	movq	%rax, end_time(%rip)
    00000825: 	movq	%rbp, %rdi
    00000828: 	subq	start_time(%rip), %rax
    0000082f: 	cvtsi2sd	%rax, %xmm0
    00000834: 	divsd	DATAat0x2da00(%rip), %xmm0
    0000083c: 	callq	_Z13record_resultdPKc # Offset: 2108
    00000841: 	movq	%r15, %rax
    00000844: 	xorl	%edi, %edi
.Ltmp2299:
    00000846: 	pxor	%xmm0, %xmm0
    0000084a: 	leaq	0x320(%rax), %rdx
.Ltmp2297:
    00000851: 	movdqu	(%rax), %xmm6
    00000855: 	addq	$0x10, %rax
    00000859: 	paddd	%xmm6, %xmm0
    0000085d: 	cmpq	%rax, %rdx
    00000860: 	jne	.Ltmp2297 # Offset: 2144
    00000862: 	movdqa	%xmm0, %xmm1
    00000866: 	psrldq	$0x8, %xmm1
    0000086b: 	paddd	%xmm1, %xmm0
    0000086f: 	movdqa	%xmm0, %xmm1
    00000873: 	psrldq	$0x4, %xmm1
    00000878: 	paddd	%xmm1, %xmm0
    0000087c: 	movd	%xmm0, %eax
    00000880: 	addl	%eax, %edi
    00000882: 	cmpq	%rdx, 0x18(%rsp)
    00000887: 	je	.Ltmp2298 # Offset: 2183
    00000889: 	movq	%rdx, %rax
    0000088c: 	jmp	.Ltmp2299 # Offset: 2188
.Ltmp2298:
    0000088e: 	movq	%r14, %rsi
    00000891: 	callq	_Z9check_sumIiEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2193
    00000896: 	movq	0x120(%rsp), %rdi
    0000089e: 	cmpq	0x8(%rsp), %rdi
    000008a3: 	je	.Ltmp2300 # Offset: 2211
    000008a5: 	movq	0x130(%rsp), %rax
    000008ad: 	leaq	0x1(%rax), %rsi
    000008b1: 	callq	_ZdlPvm@PLT # Offset: 2225
.Ltmp2300:
    000008b6: 	movq	0x20(%rsp), %rsi
    000008bb: 	leaq	DATAat0x2d69b(%rip), %rdx
    000008c2: 	movq	%r14, %rdi
    000008c5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2245
    000008ca: 	callq	clock@PLT # Offset: 2250
    000008cf: 	movq	0x10(%rsp), %rcx
    000008d4: 	xorl	%r12d, %r12d
    000008d7: 	movq	%rax, start_time(%rip)
    000008de: 	movq	iterations(%rip), %rax
    000008e5: 	leaq	0x320(%rcx), %rbp
    000008ec: 	movq	%rax, 0x28(%rsp)
    000008f1: 	testq	%rax, %rax
    000008f4: 	je	.Ltmp2301 # Offset: 2292
.Ltmp2305:
    000008fa: 	movl	$0x3a980, %edx
    000008ff: 	xorl	%esi, %esi
    00000901: 	movq	%r15, %rdi
    00000904: 	callq	memset@PLT # Offset: 2308
    00000909: 	movq	%r15, %r10
    0000090c: 	movq	%r13, %r9
    0000090f: 	xorl	%r8d, %r8d
.Ltmp2304:
    00000912: 	movq	0x10(%rsp), %rdi
    00000917: 	movq	%rbp, %rcx
    0000091a: 	movq	%r10, %rsi
.Ltmp2303:
    0000091d: 	movl	(%rsi), %r11d
    00000920: 	movq	%r9, %rax
    00000923: 	movq	%rdi, %rdx
    00000926: 	pxor	%xmm3, %xmm3
.Ltmp2302:
    0000092a: 	movd	0x640(%rax), %xmm1
    00000932: 	movd	(%rax), %xmm0
    00000936: 	addq	$0x10, %rdx
    0000093a: 	addq	$0xc80, %rax
    00000940: 	movd	-0x320(%rax), %xmm7
    00000948: 	movd	-0x960(%rax), %xmm5
    00000950: 	movdqu	-0x10(%rdx), %xmm2
    00000955: 	punpckldq	%xmm7, %xmm1
    00000959: 	punpckldq	%xmm5, %xmm0
    0000095d: 	punpcklqdq	%xmm1, %xmm0
    00000961: 	movdqu	-0x10(%rdx), %xmm1
    00000966: 	psrlq	$0x20, %xmm2
    0000096b: 	pmuludq	%xmm0, %xmm1
    0000096f: 	psrlq	$0x20, %xmm0
    00000974: 	pmuludq	%xmm2, %xmm0
    00000978: 	pshufd	$0x8, %xmm1, %xmm1
    0000097d: 	pshufd	$0x8, %xmm0, %xmm0
    00000982: 	punpckldq	%xmm0, %xmm1
    00000986: 	paddd	%xmm1, %xmm3
    0000098a: 	cmpq	%rdx, %rcx
    0000098d: 	jne	.Ltmp2302 # Offset: 2445
    0000098f: 	movdqa	%xmm3, %xmm0
    00000993: 	addq	$0x320, %rdi
    0000099a: 	addq	$0x320, %rsi
    000009a1: 	addq	$0x320, %rcx
    000009a8: 	psrldq	$0x8, %xmm0
    000009ad: 	paddd	%xmm0, %xmm3
    000009b1: 	movdqa	%xmm3, %xmm0
    000009b5: 	psrldq	$0x4, %xmm0
    000009ba: 	paddd	%xmm0, %xmm3
    000009be: 	movd	%xmm3, %eax
    000009c2: 	addl	%r11d, %eax
    000009c5: 	movl	%eax, -0x320(%rsi)
    000009cb: 	cmpq	%rdi, %rbx
    000009ce: 	jne	.Ltmp2303 # Offset: 2510
    000009d4: 	addq	$0x1, %r8
    000009d8: 	addq	$0x4, %r9
    000009dc: 	addq	$0x4, %r10
    000009e0: 	cmpq	$0xc8, %r8
    000009e7: 	jne	.Ltmp2304 # Offset: 2535
    000009ed: 	addq	$0x1, %r12
    000009f1: 	cmpq	0x28(%rsp), %r12
    000009f6: 	jne	.Ltmp2305 # Offset: 2550
.Ltmp2301:
    000009fc: 	movq	%r14, %rdi
    000009ff: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 2559
    00000a04: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000a0b: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00000a12: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000a19: 	je	.Ltmp2306 # Offset: 2585
.Ltmp2533:
    00000a1f: 	movq	-0x20(%rax), %rbp
    00000a23: 	callq	clock@PLT # Offset: 2595
    00000a28: 	pxor	%xmm0, %xmm0
    00000a2c: 	movq	%rax, end_time(%rip)
    00000a33: 	movq	%rbp, %rdi
    00000a36: 	subq	start_time(%rip), %rax
    00000a3d: 	cvtsi2sd	%rax, %xmm0
    00000a42: 	divsd	DATAat0x2da00(%rip), %xmm0
    00000a4a: 	callq	_Z13record_resultdPKc # Offset: 2634
    00000a4f: 	movq	%r15, %rax
    00000a52: 	xorl	%edi, %edi
.Ltmp2309:
    00000a54: 	pxor	%xmm0, %xmm0
    00000a58: 	leaq	0x320(%rax), %rdx
.Ltmp2307:
    00000a5f: 	movdqu	(%rax), %xmm7
    00000a63: 	addq	$0x10, %rax
    00000a67: 	paddd	%xmm7, %xmm0
    00000a6b: 	cmpq	%rax, %rdx
    00000a6e: 	jne	.Ltmp2307 # Offset: 2670
    00000a70: 	movdqa	%xmm0, %xmm1
    00000a74: 	psrldq	$0x8, %xmm1
    00000a79: 	paddd	%xmm1, %xmm0
    00000a7d: 	movdqa	%xmm0, %xmm1
    00000a81: 	psrldq	$0x4, %xmm1
    00000a86: 	paddd	%xmm1, %xmm0
    00000a8a: 	movd	%xmm0, %eax
    00000a8e: 	addl	%eax, %edi
    00000a90: 	cmpq	%rdx, 0x18(%rsp)
    00000a95: 	je	.Ltmp2308 # Offset: 2709
    00000a97: 	movq	%rdx, %rax
    00000a9a: 	jmp	.Ltmp2309 # Offset: 2714
.Ltmp2308:
    00000a9c: 	movq	%r14, %rsi
    00000a9f: 	callq	_Z9check_sumIiEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2719
    00000aa4: 	movq	0x120(%rsp), %rdi
    00000aac: 	cmpq	0x8(%rsp), %rdi
    00000ab1: 	je	.Ltmp2310 # Offset: 2737
    00000ab3: 	movq	0x130(%rsp), %rax
    00000abb: 	leaq	0x1(%rax), %rsi
    00000abf: 	callq	_ZdlPvm@PLT # Offset: 2751
.Ltmp2310:
    00000ac4: 	movq	0x20(%rsp), %rsi
    00000ac9: 	leaq	DATAat0x2d6b0(%rip), %rdx
    00000ad0: 	movq	%r14, %rdi
    00000ad3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2771
    00000ad8: 	callq	clock@PLT # Offset: 2776
    00000add: 	movq	%rax, start_time(%rip)
    00000ae4: 	movq	iterations(%rip), %rax
    00000aeb: 	movq	%rax, 0x60(%rsp)
    00000af0: 	testq	%rax, %rax
    00000af3: 	je	.Ltmp2311 # Offset: 2803
    00000af9: 	movq	$0x0, 0x38(%rsp)
    00000b02: 	leaq	0x26ac0(%r13), %rax
    00000b09: 	movq	%rax, 0x30(%rsp)
    00000b0e: 	leaq	0x27100(%r13), %rax
    00000b15: 	movq	%rax, 0x28(%rsp)
    00000b1a: 	movq	0x10(%rsp), %rax
    00000b1f: 	addq	$0x318, %rax
    00000b25: 	movq	%rax, 0x40(%rsp)
.Ltmp2317:
    00000b2a: 	movl	$0x3a980, %edx
    00000b2f: 	xorl	%esi, %esi
    00000b31: 	movq	%r15, %rdi
    00000b34: 	movq	%r15, %rbp
    00000b37: 	callq	memset@PLT # Offset: 2871
    00000b3c: 	movq	0x30(%rsp), %rax
    00000b41: 	movq	0x28(%rsp), %r12
    00000b46: 	xorl	%r9d, %r9d
    00000b49: 	movq	0x18(%rsp), %r11
    00000b4e: 	movq	%rax, 0x48(%rsp)
.Ltmp2316:
    00000b53: 	movq	0x10(%rsp), %rdi
    00000b58: 	leaq	-0x27100(%r12), %rdx
    00000b60: 	xorl	%esi, %esi
.Ltmp2313:
    00000b62: 	movl	(%rdx), %eax
    00000b64: 	movq	%rdi, %rcx
    00000b67: 	movl	%eax, 0x50(%rsp)
    00000b6b: 	movl	0x320(%rdx), %eax
    00000b71: 	movl	%eax, 0x68(%rsp)
    00000b75: 	movq	%rbp, %rax
.Ltmp2312:
    00000b78: 	movl	0x50(%rsp), %r10d
    00000b7d: 	movl	0x68(%rsp), %r8d
    00000b82: 	addq	$0x320, %rcx
    00000b89: 	imull	-0x320(%rcx), %r10d
    00000b91: 	imull	-0x31c(%rcx), %r8d
    00000b99: 	addl	%r10d, %r8d
    00000b9c: 	addl	%r8d, (%rax)
    00000b9f: 	addq	$0x320, %rax
    00000ba5: 	cmpq	%rax, %r11
    00000ba8: 	jne	.Ltmp2312 # Offset: 2984
    00000baa: 	addq	$0x2, %rsi
    00000bae: 	addq	$0x640, %rdx
    00000bb5: 	addq	$0x8, %rdi
    00000bb9: 	cmpq	$0xc6, %rsi
    00000bc0: 	jne	.Ltmp2313 # Offset: 3008
    00000bc2: 	movq	0x40(%rsp), %r8
    00000bc7: 	xorl	%esi, %esi
.Ltmp2315:
    00000bc9: 	movl	(%rbp,%rsi,4), %edi
    00000bcd: 	movq	0x48(%rsp), %rax
    00000bd2: 	movq	%r8, %rcx
.Ltmp2314:
    00000bd5: 	movl	(%rcx), %edx
    00000bd7: 	imull	(%rax), %edx
    00000bda: 	addq	$0x320, %rax
    00000be0: 	addq	$0x4, %rcx
    00000be4: 	addl	%edx, %edi
    00000be6: 	cmpq	%rax, %r12
    00000be9: 	jne	.Ltmp2314 # Offset: 3049
    00000beb: 	movl	%edi, (%rbp,%rsi,4)
    00000bef: 	addq	$0xc8, %rsi
    00000bf6: 	addq	$0x320, %r8
    00000bfd: 	cmpq	$0xea60, %rsi
    00000c04: 	jne	.Ltmp2315 # Offset: 3076
    00000c06: 	addq	$0x1, %r9
    00000c0a: 	addq	$0x4, %rbp
    00000c0e: 	addq	$0x4, %r12
    00000c12: 	addq	$0x4, %r11
    00000c16: 	addq	$0x4, 0x48(%rsp)
    00000c1c: 	cmpq	$0xc8, %r9
    00000c23: 	jne	.Ltmp2316 # Offset: 3107
    00000c29: 	addq	$0x1, 0x38(%rsp)
    00000c2f: 	movq	0x38(%rsp), %rax
    00000c34: 	cmpq	0x60(%rsp), %rax
    00000c39: 	jne	.Ltmp2317 # Offset: 3129
.Ltmp2311:
    00000c3f: 	movq	%r14, %rdi
    00000c42: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 3138
    00000c47: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000c4e: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00000c55: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000c5c: 	je	.Ltmp2318 # Offset: 3164
.Ltmp2532:
    00000c62: 	movq	-0x20(%rax), %rbp
    00000c66: 	callq	clock@PLT # Offset: 3174
    00000c6b: 	pxor	%xmm0, %xmm0
    00000c6f: 	movq	%rax, end_time(%rip)
    00000c76: 	movq	%rbp, %rdi
    00000c79: 	subq	start_time(%rip), %rax
    00000c80: 	cvtsi2sd	%rax, %xmm0
    00000c85: 	divsd	DATAat0x2da00(%rip), %xmm0
    00000c8d: 	callq	_Z13record_resultdPKc # Offset: 3213
    00000c92: 	movq	%r15, %rax
    00000c95: 	xorl	%edi, %edi
.Ltmp2321:
    00000c97: 	pxor	%xmm0, %xmm0
    00000c9b: 	leaq	0x320(%rax), %rdx
.Ltmp2319:
    00000ca2: 	movdqu	(%rax), %xmm4
    00000ca6: 	addq	$0x10, %rax
    00000caa: 	paddd	%xmm4, %xmm0
    00000cae: 	cmpq	%rax, %rdx
    00000cb1: 	jne	.Ltmp2319 # Offset: 3249
    00000cb3: 	movdqa	%xmm0, %xmm1
    00000cb7: 	psrldq	$0x8, %xmm1
    00000cbc: 	paddd	%xmm1, %xmm0
    00000cc0: 	movdqa	%xmm0, %xmm1
    00000cc4: 	psrldq	$0x4, %xmm1
    00000cc9: 	paddd	%xmm1, %xmm0
    00000ccd: 	movd	%xmm0, %eax
    00000cd1: 	addl	%eax, %edi
    00000cd3: 	cmpq	%rdx, 0x18(%rsp)
    00000cd8: 	je	.Ltmp2320 # Offset: 3288
    00000cda: 	movq	%rdx, %rax
    00000cdd: 	jmp	.Ltmp2321 # Offset: 3293
.Ltmp2320:
    00000cdf: 	movq	%r14, %rsi
    00000ce2: 	callq	_Z9check_sumIiEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3298
    00000ce7: 	movq	0x120(%rsp), %rdi
    00000cef: 	cmpq	0x8(%rsp), %rdi
    00000cf4: 	je	.Ltmp2322 # Offset: 3316
    00000cf6: 	movq	0x130(%rsp), %rax
    00000cfe: 	leaq	0x1(%rax), %rsi
    00000d02: 	callq	_ZdlPvm@PLT # Offset: 3330
.Ltmp2322:
    00000d07: 	movq	0x20(%rsp), %rsi
    00000d0c: 	leaq	DATAat0x2d6c5(%rip), %rdx
    00000d13: 	movq	%r14, %rdi
    00000d16: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3350
    00000d1b: 	callq	clock@PLT # Offset: 3355
    00000d20: 	movq	iterations(%rip), %r10
    00000d27: 	xorl	%r12d, %r12d
    00000d2a: 	leaq	0x320(%r13), %rbp
    00000d31: 	movq	%rax, start_time(%rip)
    00000d38: 	testq	%r10, %r10
    00000d3b: 	je	.Ltmp2323 # Offset: 3387
.Ltmp2327:
    00000d41: 	movq	%r15, %rdi
    00000d44: 	movl	$0x3a980, %edx
    00000d49: 	xorl	%esi, %esi
    00000d4b: 	movq	%r10, 0x28(%rsp)
    00000d50: 	callq	memset@PLT # Offset: 3408
    00000d55: 	movq	0x10(%rsp), %rcx
    00000d5a: 	movq	%rbp, %r9
    00000d5d: 	movq	%r13, %r8
    00000d60: 	movq	0x28(%rsp), %r10
    00000d65: 	xorl	%edi, %edi
.Ltmp2326:
    00000d67: 	movq	%r8, %rsi
    00000d6a: 	movq	%r15, %rdx
.Ltmp2325:
    00000d6d: 	movdqu	(%rsi), %xmm2
    00000d71: 	xorl	%eax, %eax
    00000d73: 	movdqa	%xmm2, %xmm3
    00000d77: 	psrlq	$0x20, %xmm3
.Ltmp2324:
    00000d7c: 	movd	(%rcx,%rax), %xmm6
    00000d81: 	pshufd	$0x0, %xmm6, %xmm0
    00000d86: 	movdqa	%xmm0, %xmm1
    00000d8a: 	psrlq	$0x20, %xmm0
    00000d8f: 	pmuludq	%xmm2, %xmm1
    00000d93: 	pmuludq	%xmm3, %xmm0
    00000d97: 	pshufd	$0x8, %xmm1, %xmm1
    00000d9c: 	pshufd	$0x8, %xmm0, %xmm0
    00000da1: 	punpckldq	%xmm0, %xmm1
    00000da5: 	movdqu	(%rdx,%rax), %xmm0
    00000daa: 	paddd	%xmm1, %xmm0
    00000dae: 	movups	%xmm0, (%rdx,%rax)
    00000db2: 	addq	$0x320, %rax
    00000db8: 	cmpq	$0x3a980, %rax
    00000dbe: 	jne	.Ltmp2324 # Offset: 3518
    00000dc0: 	addq	$0x10, %rsi
    00000dc4: 	addq	$0x10, %rdx
    00000dc8: 	cmpq	%rsi, %r9
    00000dcb: 	jne	.Ltmp2325 # Offset: 3531
    00000dcd: 	addq	$0x1, %rdi
    00000dd1: 	addq	$0x320, %r9
    00000dd8: 	addq	$0x320, %r8
    00000ddf: 	addq	$0x4, %rcx
    00000de3: 	cmpq	$0xc8, %rdi
    00000dea: 	jne	.Ltmp2326 # Offset: 3562
    00000df0: 	addq	$0x1, %r12
    00000df4: 	cmpq	%r10, %r12
    00000df7: 	jne	.Ltmp2327 # Offset: 3575
.Ltmp2323:
    00000dfd: 	movq	%r14, %rdi
    00000e00: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 3584
    00000e05: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000e0c: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00000e13: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000e1a: 	je	.Ltmp2328 # Offset: 3610
.Ltmp2531:
    00000e20: 	movq	-0x20(%rax), %rbp
    00000e24: 	callq	clock@PLT # Offset: 3620
    00000e29: 	pxor	%xmm0, %xmm0
    00000e2d: 	movq	%rax, end_time(%rip)
    00000e34: 	movq	%rbp, %rdi
    00000e37: 	subq	start_time(%rip), %rax
    00000e3e: 	cvtsi2sd	%rax, %xmm0
    00000e43: 	divsd	DATAat0x2da00(%rip), %xmm0
    00000e4b: 	callq	_Z13record_resultdPKc # Offset: 3659
    00000e50: 	movq	%r15, %rdx
    00000e53: 	xorl	%edi, %edi
.Ltmp2330:
    00000e55: 	pxor	%xmm0, %xmm0
    00000e59: 	leaq	0x320(%rdx), %rax
.Ltmp2329:
    00000e60: 	movdqu	(%rdx), %xmm6
    00000e64: 	addq	$0x10, %rdx
    00000e68: 	paddd	%xmm6, %xmm0
    00000e6c: 	cmpq	%rax, %rdx
    00000e6f: 	jne	.Ltmp2329 # Offset: 3695
    00000e71: 	movdqa	%xmm0, %xmm1
    00000e75: 	psrldq	$0x8, %xmm1
    00000e7a: 	paddd	%xmm1, %xmm0
    00000e7e: 	movdqa	%xmm0, %xmm1
    00000e82: 	psrldq	$0x4, %xmm1
    00000e87: 	paddd	%xmm1, %xmm0
    00000e8b: 	movd	%xmm0, %eax
    00000e8f: 	addl	%eax, %edi
    00000e91: 	cmpq	%rdx, 0x18(%rsp)
    00000e96: 	jne	.Ltmp2330 # Offset: 3734
    00000e98: 	movq	%r14, %rsi
    00000e9b: 	callq	_Z9check_sumIiEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3739
    00000ea0: 	movq	0x120(%rsp), %rdi
    00000ea8: 	cmpq	0x8(%rsp), %rdi
    00000ead: 	je	.Ltmp2331 # Offset: 3757
    00000eaf: 	movq	0x130(%rsp), %rax
    00000eb7: 	leaq	0x1(%rax), %rsi
    00000ebb: 	callq	_ZdlPvm@PLT # Offset: 3771
.Ltmp2331:
    00000ec0: 	movq	0x20(%rsp), %rsi
    00000ec5: 	leaq	DATAat0x2d6df(%rip), %rdx
    00000ecc: 	movq	%r14, %rdi
    00000ecf: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3791
    00000ed4: 	callq	clock@PLT # Offset: 3796
    00000ed9: 	movq	iterations(%rip), %r12
    00000ee0: 	xorl	%ebp, %ebp
    00000ee2: 	movq	%rax, start_time(%rip)
    00000ee9: 	testq	%r12, %r12
    00000eec: 	je	.Ltmp2332 # Offset: 3820
.Ltmp2336:
    00000ef2: 	xorl	%esi, %esi
    00000ef4: 	movq	%r15, %rdi
    00000ef7: 	movl	$0x3a980, %edx
    00000efc: 	callq	memset@PLT # Offset: 3836
    00000f01: 	movq	0x10(%rsp), %rdi
    00000f06: 	movq	%r13, %rcx
    00000f09: 	xorl	%esi, %esi
.Ltmp2335:
    00000f0b: 	movq	%r15, %rdx
    00000f0e: 	movq	%rdi, %r8
.Ltmp2334:
    00000f11: 	movd	(%r8), %xmm7
    00000f16: 	xorl	%eax, %eax
    00000f18: 	pshufd	$0x0, %xmm7, %xmm2
    00000f1d: 	movdqa	%xmm2, %xmm3
    00000f21: 	psrlq	$0x20, %xmm3
.Ltmp2333:
    00000f26: 	movdqu	(%rcx,%rax), %xmm0
    00000f2b: 	movdqu	(%rcx,%rax), %xmm1
    00000f30: 	psrlq	$0x20, %xmm0
    00000f35: 	pmuludq	%xmm2, %xmm1
    00000f39: 	pmuludq	%xmm3, %xmm0
    00000f3d: 	pshufd	$0x8, %xmm1, %xmm1
    00000f42: 	pshufd	$0x8, %xmm0, %xmm0
    00000f47: 	punpckldq	%xmm0, %xmm1
    00000f4b: 	movdqu	(%rdx,%rax), %xmm0
    00000f50: 	paddd	%xmm1, %xmm0
    00000f54: 	movups	%xmm0, (%rdx,%rax)
    00000f58: 	addq	$0x10, %rax
    00000f5c: 	cmpq	$0x320, %rax
    00000f62: 	jne	.Ltmp2333 # Offset: 3938
    00000f64: 	addq	$0x320, %r8
    00000f6b: 	addq	$0x320, %rdx
    00000f72: 	cmpq	%rdx, 0x18(%rsp)
    00000f77: 	jne	.Ltmp2334 # Offset: 3959
    00000f79: 	addq	$0x1, %rsi
    00000f7d: 	addq	$0x320, %rcx
    00000f84: 	addq	$0x4, %rdi
    00000f88: 	cmpq	$0xc8, %rsi
    00000f8f: 	jne	.Ltmp2335 # Offset: 3983
    00000f95: 	addq	$0x1, %rbp
    00000f99: 	cmpq	%r12, %rbp
    00000f9c: 	jne	.Ltmp2336 # Offset: 3996
.Ltmp2332:
    00000fa2: 	movq	%r14, %rdi
    00000fa5: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 4005
    00000faa: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000fb1: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00000fb8: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000fbf: 	je	.Ltmp2337 # Offset: 4031
.Ltmp2530:
    00000fc5: 	movq	-0x20(%rax), %rbp
    00000fc9: 	callq	clock@PLT # Offset: 4041
    00000fce: 	pxor	%xmm0, %xmm0
    00000fd2: 	movq	%rax, end_time(%rip)
    00000fd9: 	movq	%rbp, %rdi
    00000fdc: 	subq	start_time(%rip), %rax
    00000fe3: 	cvtsi2sd	%rax, %xmm0
    00000fe8: 	divsd	DATAat0x2da00(%rip), %xmm0
    00000ff0: 	callq	_Z13record_resultdPKc # Offset: 4080
    00000ff5: 	movq	%r15, %rdx
    00000ff8: 	xorl	%edi, %edi
.Ltmp2339:
    00000ffa: 	pxor	%xmm0, %xmm0
    00000ffe: 	leaq	0x320(%rdx), %rax
.Ltmp2338:
    00001005: 	movdqu	(%rdx), %xmm4
    00001009: 	addq	$0x10, %rdx
    0000100d: 	paddd	%xmm4, %xmm0
    00001011: 	cmpq	%rax, %rdx
    00001014: 	jne	.Ltmp2338 # Offset: 4116
    00001016: 	movdqa	%xmm0, %xmm1
    0000101a: 	psrldq	$0x8, %xmm1
    0000101f: 	paddd	%xmm1, %xmm0
    00001023: 	movdqa	%xmm0, %xmm1
    00001027: 	psrldq	$0x4, %xmm1
    0000102c: 	paddd	%xmm1, %xmm0
    00001030: 	movd	%xmm0, %eax
    00001034: 	addl	%eax, %edi
    00001036: 	cmpq	%rdx, 0x18(%rsp)
    0000103b: 	jne	.Ltmp2339 # Offset: 4155
    0000103d: 	movq	%r14, %rsi
    00001040: 	callq	_Z9check_sumIiEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4160
    00001045: 	movq	0x120(%rsp), %rdi
    0000104d: 	cmpq	0x8(%rsp), %rdi
    00001052: 	je	.Ltmp2340 # Offset: 4178
    00001054: 	movq	0x130(%rsp), %rax
    0000105c: 	leaq	0x1(%rax), %rsi
    00001060: 	callq	_ZdlPvm@PLT # Offset: 4192
.Ltmp2340:
    00001065: 	movq	0x20(%rsp), %rsi
    0000106a: 	leaq	DATAat0x2d6f9(%rip), %rdx
    00001071: 	movq	%r14, %rdi
    00001074: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4212
    00001079: 	callq	clock@PLT # Offset: 4217
    0000107e: 	movq	iterations(%rip), %r12
    00001085: 	xorl	%ebp, %ebp
    00001087: 	movq	%rax, start_time(%rip)
    0000108e: 	leaq	0x26ac0(%r13), %rax
    00001095: 	movq	%rax, 0x30(%rsp)
    0000109a: 	leaq	0x27100(%r13), %rax
    000010a1: 	movq	%rax, 0x28(%rsp)
    000010a6: 	testq	%r12, %r12
    000010a9: 	je	.Ltmp2341 # Offset: 4265
.Ltmp2347:
    000010af: 	movl	$0x3a980, %edx
    000010b4: 	xorl	%esi, %esi
    000010b6: 	movq	%r15, %rdi
    000010b9: 	callq	memset@PLT # Offset: 4281
    000010be: 	movq	0x10(%rsp), %rcx
    000010c3: 	movq	%r15, %rdx
.Ltmp2346:
    000010c6: 	movq	%r13, %rdi
    000010c9: 	xorl	%esi, %esi
.Ltmp2343:
    000010cb: 	movd	(%rcx,%rsi,4), %xmm6
    000010d0: 	movd	0x4(%rcx,%rsi,4), %xmm7
    000010d6: 	leaq	0x320(%rdi), %r8
    000010dd: 	xorl	%eax, %eax
    000010df: 	pshufd	$0x0, %xmm6, %xmm4
    000010e4: 	pshufd	$0x0, %xmm7, %xmm3
    000010e9: 	movdqa	%xmm4, %xmm6
    000010ed: 	movdqa	%xmm3, %xmm5
    000010f1: 	psrlq	$0x20, %xmm6
    000010f6: 	psrlq	$0x20, %xmm5
.Ltmp2342:
    000010fb: 	movdqu	(%rdi,%rax), %xmm1
    00001100: 	movdqu	(%rdi,%rax), %xmm0
    00001105: 	movdqu	(%r8,%rax), %xmm2
    0000110b: 	movdqu	(%rdx,%rax), %xmm7
    00001110: 	psrlq	$0x20, %xmm1
    00001115: 	pmuludq	%xmm4, %xmm0
    00001119: 	pmuludq	%xmm6, %xmm1
    0000111d: 	pmuludq	%xmm3, %xmm2
    00001121: 	pshufd	$0x8, %xmm0, %xmm0
    00001126: 	pshufd	$0x8, %xmm1, %xmm1
    0000112b: 	pshufd	$0x8, %xmm2, %xmm2
    00001130: 	punpckldq	%xmm1, %xmm0
    00001134: 	movdqu	(%r8,%rax), %xmm1
    0000113a: 	paddd	%xmm7, %xmm0
    0000113e: 	psrlq	$0x20, %xmm1
    00001143: 	pmuludq	%xmm5, %xmm1
    00001147: 	pshufd	$0x8, %xmm1, %xmm1
    0000114c: 	punpckldq	%xmm1, %xmm2
    00001150: 	paddd	%xmm2, %xmm0
    00001154: 	movups	%xmm0, (%rdx,%rax)
    00001158: 	addq	$0x10, %rax
    0000115c: 	cmpq	$0x320, %rax
    00001162: 	jne	.Ltmp2342 # Offset: 4450
    00001164: 	addq	$0x2, %rsi
    00001168: 	addq	$0x640, %rdi
    0000116f: 	cmpq	$0xc6, %rsi
    00001176: 	jne	.Ltmp2343 # Offset: 4470
    0000117c: 	movq	0x30(%rsp), %rsi
    00001181: 	leaq	0x318(%rcx), %rdi
.Ltmp2345:
    00001188: 	movd	(%rdi), %xmm5
    0000118c: 	xorl	%eax, %eax
    0000118e: 	pshufd	$0x0, %xmm5, %xmm2
    00001193: 	movdqa	%xmm2, %xmm3
    00001197: 	psrlq	$0x20, %xmm3
.Ltmp2344:
    0000119c: 	movdqu	(%rsi,%rax), %xmm0
    000011a1: 	movdqu	(%rsi,%rax), %xmm1
    000011a6: 	psrlq	$0x20, %xmm0
    000011ab: 	pmuludq	%xmm2, %xmm1
    000011af: 	pmuludq	%xmm3, %xmm0
    000011b3: 	pshufd	$0x8, %xmm1, %xmm1
    000011b8: 	pshufd	$0x8, %xmm0, %xmm0
    000011bd: 	punpckldq	%xmm0, %xmm1
    000011c1: 	movdqu	(%rdx,%rax), %xmm0
    000011c6: 	paddd	%xmm1, %xmm0
    000011ca: 	movups	%xmm0, (%rdx,%rax)
    000011ce: 	addq	$0x10, %rax
    000011d2: 	cmpq	$0x320, %rax
    000011d8: 	jne	.Ltmp2344 # Offset: 4568
    000011da: 	addq	$0x4, %rdi
    000011de: 	addq	$0x320, %rsi
    000011e5: 	cmpq	%rsi, 0x28(%rsp)
    000011ea: 	jne	.Ltmp2345 # Offset: 4586
    000011ec: 	addq	$0x320, %rcx
    000011f3: 	addq	$0x320, %rdx
    000011fa: 	cmpq	%rbx, %rcx
    000011fd: 	jne	.Ltmp2346 # Offset: 4605
    00001203: 	addq	$0x1, %rbp
    00001207: 	cmpq	%r12, %rbp
    0000120a: 	jne	.Ltmp2347 # Offset: 4618
.Ltmp2341:
    00001210: 	movq	%r14, %rdi
    00001213: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 4627
    00001218: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000121f: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00001226: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000122d: 	je	.Ltmp2348 # Offset: 4653
.Ltmp2529:
    00001233: 	movq	-0x20(%rax), %rbp
    00001237: 	callq	clock@PLT # Offset: 4663
    0000123c: 	pxor	%xmm0, %xmm0
    00001240: 	movq	%rax, end_time(%rip)
    00001247: 	movq	%rbp, %rdi
    0000124a: 	subq	start_time(%rip), %rax
    00001251: 	cvtsi2sd	%rax, %xmm0
    00001256: 	divsd	DATAat0x2da00(%rip), %xmm0
    0000125e: 	callq	_Z13record_resultdPKc # Offset: 4702
    00001263: 	movq	%r15, %rax
    00001266: 	xorl	%edi, %edi
.Ltmp2351:
    00001268: 	pxor	%xmm0, %xmm0
    0000126c: 	leaq	0x320(%rax), %rdx
.Ltmp2349:
    00001273: 	movdqu	(%rax), %xmm4
    00001277: 	addq	$0x10, %rax
    0000127b: 	paddd	%xmm4, %xmm0
    0000127f: 	cmpq	%rax, %rdx
    00001282: 	jne	.Ltmp2349 # Offset: 4738
    00001284: 	movdqa	%xmm0, %xmm1
    00001288: 	psrldq	$0x8, %xmm1
    0000128d: 	paddd	%xmm1, %xmm0
    00001291: 	movdqa	%xmm0, %xmm1
    00001295: 	psrldq	$0x4, %xmm1
    0000129a: 	paddd	%xmm1, %xmm0
    0000129e: 	movd	%xmm0, %eax
    000012a2: 	addl	%eax, %edi
    000012a4: 	cmpq	0x18(%rsp), %rdx
    000012a9: 	je	.Ltmp2350 # Offset: 4777
    000012ab: 	movq	%rdx, %rax
    000012ae: 	jmp	.Ltmp2351 # Offset: 4782
.Ltmp2350:
    000012b0: 	movq	%r14, %rsi
    000012b3: 	callq	_Z9check_sumIiEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4787
    000012b8: 	movq	0x120(%rsp), %rdi
    000012c0: 	cmpq	0x8(%rsp), %rdi
    000012c5: 	je	.Ltmp2352 # Offset: 4805
    000012c7: 	movq	0x130(%rsp), %rax
    000012cf: 	leaq	0x1(%rax), %rsi
    000012d3: 	callq	_ZdlPvm@PLT # Offset: 4819
.Ltmp2352:
    000012d8: 	movq	0x20(%rsp), %rsi
    000012dd: 	leaq	DATAat0x2d713(%rip), %rdx
    000012e4: 	movq	%r14, %rdi
    000012e7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4839
    000012ec: 	callq	clock@PLT # Offset: 4844
    000012f1: 	movq	iterations(%rip), %r12
    000012f8: 	xorl	%ebp, %ebp
    000012fa: 	movq	%rax, start_time(%rip)
    00001301: 	leaq	0x27100(%r13), %rax
    00001308: 	movq	%rax, 0x28(%rsp)
    0000130d: 	testq	%r12, %r12
    00001310: 	je	.Ltmp2353 # Offset: 4880
.Ltmp2357:
    00001316: 	xorl	%esi, %esi
    00001318: 	movq	%r15, %rdi
    0000131b: 	movl	$0x3a980, %edx
    00001320: 	callq	memset@PLT # Offset: 4896
    00001325: 	movq	0x10(%rsp), %rdi
    0000132a: 	movq	%r15, %rsi
.Ltmp2356:
    0000132d: 	movq	0x28(%rsp), %r8
    00001332: 	movq	%r13, %r9
    00001335: 	xorl	%ecx, %ecx
.Ltmp2355:
    00001337: 	movq	%rdi, %rdx
    0000133a: 	movq	%r9, %rax
    0000133d: 	pxor	%xmm3, %xmm3
.Ltmp2354:
    00001341: 	movd	(%rdx), %xmm7
    00001345: 	movdqu	(%rax), %xmm1
    00001349: 	addq	$0x320, %rax
    0000134f: 	addq	$0x4, %rdx
    00001353: 	movdqu	-0x320(%rax), %xmm0
    0000135b: 	pshufd	$0x0, %xmm7, %xmm2
    00001360: 	pmuludq	%xmm2, %xmm1
    00001364: 	psrlq	$0x20, %xmm0
    00001369: 	psrlq	$0x20, %xmm2
    0000136e: 	pmuludq	%xmm2, %xmm0
    00001372: 	pshufd	$0x8, %xmm1, %xmm1
    00001377: 	pshufd	$0x8, %xmm0, %xmm0
    0000137c: 	punpckldq	%xmm0, %xmm1
    00001380: 	paddd	%xmm1, %xmm3
    00001384: 	cmpq	%rax, %r8
    00001387: 	jne	.Ltmp2354 # Offset: 4999
    00001389: 	movdqu	(%rsi,%rcx), %xmm0
    0000138e: 	addq	$0x10, %r9
    00001392: 	addq	$0x10, %r8
    00001396: 	paddd	%xmm3, %xmm0
    0000139a: 	movups	%xmm0, (%rsi,%rcx)
    0000139e: 	addq	$0x10, %rcx
    000013a2: 	cmpq	$0x320, %rcx
    000013a9: 	jne	.Ltmp2355 # Offset: 5033
    000013ab: 	addq	$0x320, %rdi
    000013b2: 	addq	$0x320, %rsi
    000013b9: 	cmpq	%rdi, %rbx
    000013bc: 	jne	.Ltmp2356 # Offset: 5052
    000013c2: 	addq	$0x1, %rbp
    000013c6: 	cmpq	%r12, %rbp
    000013c9: 	jne	.Ltmp2357 # Offset: 5065
.Ltmp2353:
    000013cf: 	movq	%r14, %rdi
    000013d2: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 5074
    000013d7: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000013de: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    000013e5: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000013ec: 	je	.Ltmp2358 # Offset: 5100
.Ltmp2528:
    000013f2: 	movq	-0x20(%rax), %rbp
    000013f6: 	callq	clock@PLT # Offset: 5110
    000013fb: 	pxor	%xmm0, %xmm0
    000013ff: 	movq	%rax, end_time(%rip)
    00001406: 	movq	%rbp, %rdi
    00001409: 	subq	start_time(%rip), %rax
    00001410: 	cvtsi2sd	%rax, %xmm0
    00001415: 	divsd	DATAat0x2da00(%rip), %xmm0
    0000141d: 	callq	_Z13record_resultdPKc # Offset: 5149
    00001422: 	movq	%r15, %rax
    00001425: 	xorl	%edi, %edi
.Ltmp2361:
    00001427: 	pxor	%xmm0, %xmm0
    0000142b: 	leaq	0x320(%rax), %rdx
.Ltmp2359:
    00001432: 	movdqu	(%rax), %xmm5
    00001436: 	addq	$0x10, %rax
    0000143a: 	paddd	%xmm5, %xmm0
    0000143e: 	cmpq	%rax, %rdx
    00001441: 	jne	.Ltmp2359 # Offset: 5185
    00001443: 	movdqa	%xmm0, %xmm1
    00001447: 	psrldq	$0x8, %xmm1
    0000144c: 	paddd	%xmm1, %xmm0
    00001450: 	movdqa	%xmm0, %xmm1
    00001454: 	psrldq	$0x4, %xmm1
    00001459: 	paddd	%xmm1, %xmm0
    0000145d: 	movd	%xmm0, %eax
    00001461: 	addl	%eax, %edi
    00001463: 	cmpq	%rdx, 0x18(%rsp)
    00001468: 	je	.Ltmp2360 # Offset: 5224
    0000146a: 	movq	%rdx, %rax
    0000146d: 	jmp	.Ltmp2361 # Offset: 5229
.Ltmp2360:
    0000146f: 	movq	%r14, %rsi
    00001472: 	callq	_Z9check_sumIiEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5234
    00001477: 	movq	0x120(%rsp), %rdi
    0000147f: 	cmpq	0x8(%rsp), %rdi
    00001484: 	je	.Ltmp2362 # Offset: 5252
    00001486: 	movq	0x130(%rsp), %rax
    0000148e: 	leaq	0x1(%rax), %rsi
    00001492: 	callq	_ZdlPvm@PLT # Offset: 5266
.Ltmp2362:
    00001497: 	movq	0x20(%rsp), %rsi
    0000149c: 	leaq	DATAat0x2d72d(%rip), %rdx
    000014a3: 	movq	%r14, %rdi
    000014a6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5286
    000014ab: 	callq	clock@PLT # Offset: 5291
    000014b0: 	movq	iterations(%rip), %r11
    000014b7: 	xorl	%r12d, %r12d
    000014ba: 	movq	%rax, start_time(%rip)
    000014c1: 	movq	0x10(%rsp), %rax
    000014c6: 	leaq	0x320(%rax), %rbp
    000014cd: 	testq	%r11, %r11
    000014d0: 	je	.Ltmp2363 # Offset: 5328
    000014d6: 	movq	%r15, %r8
    000014d9: 	movq	%r14, %r15
    000014dc: 	movq	%rbp, %r14
    000014df: 	movq	%r11, %rbp
.Ltmp2367:
    000014e2: 	movq	%r8, %rdi
    000014e5: 	movl	$0x3a980, %edx
    000014ea: 	xorl	%esi, %esi
    000014ec: 	callq	memset@PLT # Offset: 5356
    000014f1: 	movq	%r13, %r10
    000014f4: 	xorl	%r9d, %r9d
    000014f7: 	movq	%rax, %r8
    000014fa: 	movq	%rax, %r11
.Ltmp2366:
    000014fd: 	movq	0x10(%rsp), %rsi
    00001502: 	movq	%r14, %rdi
    00001505: 	movq	%r11, %rcx
.Ltmp2365:
    00001508: 	movq	%r10, %rax
    0000150b: 	movq	%rsi, %rdx
    0000150e: 	pxor	%xmm2, %xmm2
.Ltmp2364:
    00001512: 	movd	0x640(%rax), %xmm1
    0000151a: 	movd	(%rax), %xmm0
    0000151e: 	addq	$0x10, %rdx
    00001522: 	addq	$0xc80, %rax
    00001528: 	movd	-0x320(%rax), %xmm6
    00001530: 	movd	-0x960(%rax), %xmm7
    00001538: 	movdqu	-0x10(%rdx), %xmm3
    0000153d: 	punpckldq	%xmm6, %xmm1
    00001541: 	punpckldq	%xmm7, %xmm0
    00001545: 	punpcklqdq	%xmm1, %xmm0
    00001549: 	movdqu	-0x10(%rdx), %xmm1
    0000154e: 	psrlq	$0x20, %xmm3
    00001553: 	pmuludq	%xmm0, %xmm1
    00001557: 	psrlq	$0x20, %xmm0
    0000155c: 	pmuludq	%xmm3, %xmm0
    00001560: 	pshufd	$0x8, %xmm1, %xmm1
    00001565: 	pshufd	$0x8, %xmm0, %xmm0
    0000156a: 	punpckldq	%xmm0, %xmm1
    0000156e: 	paddd	%xmm1, %xmm2
    00001572: 	cmpq	%rdi, %rdx
    00001575: 	jne	.Ltmp2364 # Offset: 5493
    00001577: 	movdqa	%xmm2, %xmm0
    0000157b: 	addq	$0x320, %rsi
    00001582: 	leaq	0x320(%rdx), %rdi
    00001589: 	psrldq	$0x8, %xmm0
    0000158e: 	paddd	%xmm0, %xmm2
    00001592: 	movdqa	%xmm2, %xmm0
    00001596: 	psrldq	$0x4, %xmm0
    0000159b: 	paddd	%xmm0, %xmm2
    0000159f: 	movd	%xmm2, %eax
    000015a3: 	addl	%eax, (%rcx)
    000015a5: 	addq	$0x320, %rcx
    000015ac: 	cmpq	%rsi, %rbx
    000015af: 	jne	.Ltmp2365 # Offset: 5551
    000015b5: 	addq	$0x1, %r9
    000015b9: 	addq	$0x4, %r10
    000015bd: 	addq	$0x4, %r11
    000015c1: 	cmpq	$0xc8, %r9
    000015c8: 	jne	.Ltmp2366 # Offset: 5576
    000015ce: 	addq	$0x1, %r12
    000015d2: 	cmpq	%rbp, %r12
    000015d5: 	jne	.Ltmp2367 # Offset: 5589
    000015db: 	movq	%r15, %r14
    000015de: 	movq	%r8, %r15
.Ltmp2363:
    000015e1: 	movq	%r14, %rdi
    000015e4: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 5604
    000015e9: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000015f0: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    000015f7: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000015fe: 	je	.Ltmp2368 # Offset: 5630
.Ltmp2527:
    00001604: 	movq	-0x20(%rax), %rbp
    00001608: 	callq	clock@PLT # Offset: 5640
    0000160d: 	pxor	%xmm0, %xmm0
    00001611: 	movq	%rax, end_time(%rip)
    00001618: 	movq	%rbp, %rdi
    0000161b: 	subq	start_time(%rip), %rax
    00001622: 	cvtsi2sd	%rax, %xmm0
    00001627: 	divsd	DATAat0x2da00(%rip), %xmm0
    0000162f: 	callq	_Z13record_resultdPKc # Offset: 5679
    00001634: 	xorl	%edi, %edi
    00001636: 	movq	%r15, %rax
.Ltmp2370:
    00001639: 	pxor	%xmm0, %xmm0
    0000163d: 	leaq	0x320(%rax), %rdx
.Ltmp2369:
    00001644: 	movdqu	(%rax), %xmm6
    00001648: 	addq	$0x10, %rax
    0000164c: 	paddd	%xmm6, %xmm0
    00001650: 	cmpq	%rdx, %rax
    00001653: 	jne	.Ltmp2369 # Offset: 5715
    00001655: 	movdqa	%xmm0, %xmm1
    00001659: 	psrldq	$0x8, %xmm1
    0000165e: 	paddd	%xmm1, %xmm0
    00001662: 	movdqa	%xmm0, %xmm1
    00001666: 	psrldq	$0x4, %xmm1
    0000166b: 	paddd	%xmm1, %xmm0
    0000166f: 	movd	%xmm0, %edx
    00001673: 	addl	%edx, %edi
    00001675: 	cmpq	%rax, 0x18(%rsp)
    0000167a: 	jne	.Ltmp2370 # Offset: 5754
    0000167c: 	movq	%r14, %rsi
    0000167f: 	callq	_Z9check_sumIiEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5759
    00001684: 	movq	0x120(%rsp), %rdi
    0000168c: 	cmpq	0x8(%rsp), %rdi
    00001691: 	je	.Ltmp2371 # Offset: 5777
    00001693: 	movq	0x130(%rsp), %rax
    0000169b: 	leaq	0x1(%rax), %rsi
    0000169f: 	callq	_ZdlPvm@PLT # Offset: 5791
.Ltmp2371:
    000016a4: 	movq	0x20(%rsp), %rsi
    000016a9: 	leaq	DATAat0x2d747(%rip), %rdx
    000016b0: 	movq	%r14, %rdi
    000016b3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5811
    000016b8: 	callq	clock@PLT # Offset: 5816
    000016bd: 	movq	%rax, start_time(%rip)
    000016c4: 	movq	iterations(%rip), %rax
    000016cb: 	movq	%rax, 0x48(%rsp)
    000016d0: 	testq	%rax, %rax
    000016d3: 	je	.Ltmp2372 # Offset: 5843
    000016d9: 	leaq	0x26ac0(%r13), %rax
    000016e0: 	movq	%r13, 0x60(%rsp)
    000016e5: 	xorl	%r12d, %r12d
    000016e8: 	movq	%rax, 0x30(%rsp)
    000016ed: 	leaq	0x27100(%r13), %rax
    000016f4: 	movq	%rax, 0x28(%rsp)
    000016f9: 	movq	0x10(%rsp), %rax
    000016fe: 	addq	$0x318, %rax
    00001704: 	movq	%rax, 0x40(%rsp)
.Ltmp2378:
    00001709: 	movl	$0x3a980, %edx
    0000170e: 	xorl	%esi, %esi
    00001710: 	movq	%r15, %rdi
    00001713: 	callq	memset@PLT # Offset: 5907
    00001718: 	movq	0x30(%rsp), %r13
    0000171d: 	movq	0x28(%rsp), %rcx
    00001722: 	xorl	%r11d, %r11d
    00001725: 	movq	0x18(%rsp), %rbp
.Ltmp2377:
    0000172a: 	movq	0x10(%rsp), %r9
    0000172f: 	leaq	-0x27100(%rcx), %rsi
    00001736: 	xorl	%r8d, %r8d
.Ltmp2374:
    00001739: 	movl	(%rsi), %ebx
    0000173b: 	movq	%r9, %rdi
    0000173e: 	movq	%rax, %rdx
    00001741: 	movl	%ebx, 0x38(%rsp)
    00001745: 	movl	0x320(%rsi), %ebx
    0000174b: 	movl	%ebx, 0x50(%rsp)
.Ltmp2373:
    0000174f: 	movl	0x38(%rsp), %ebx
    00001753: 	movl	0x50(%rsp), %r10d
    00001758: 	addq	$0x320, %rdi
    0000175f: 	imull	-0x320(%rdi), %ebx
    00001766: 	imull	-0x31c(%rdi), %r10d
    0000176e: 	addl	%ebx, %r10d
    00001771: 	addl	%r10d, (%rdx)
    00001774: 	addq	$0x320, %rdx
    0000177b: 	cmpq	%rdx, %rbp
    0000177e: 	jne	.Ltmp2373 # Offset: 6014
    00001780: 	addq	$0x2, %r8
    00001784: 	addq	$0x640, %rsi
    0000178b: 	addq	$0x8, %r9
    0000178f: 	cmpq	$0xc6, %r8
    00001796: 	jne	.Ltmp2374 # Offset: 6038
    00001798: 	movq	0x40(%rsp), %r10
    0000179d: 	xorl	%r8d, %r8d
.Ltmp2376:
    000017a0: 	movl	(%rax,%r8,4), %r9d
    000017a4: 	movq	%r10, %rdi
    000017a7: 	movq	%r13, %rdx
.Ltmp2375:
    000017aa: 	movl	(%rdi), %esi
    000017ac: 	imull	(%rdx), %esi
    000017af: 	addq	$0x320, %rdx
    000017b6: 	addq	$0x4, %rdi
    000017ba: 	addl	%esi, %r9d
    000017bd: 	cmpq	%rcx, %rdx
    000017c0: 	jne	.Ltmp2375 # Offset: 6080
    000017c2: 	movl	%r9d, (%rax,%r8,4)
    000017c6: 	addq	$0xc8, %r8
    000017cd: 	addq	$0x320, %r10
    000017d4: 	cmpq	$0xea60, %r8
    000017db: 	jne	.Ltmp2376 # Offset: 6107
    000017dd: 	addq	$0x1, %r11
    000017e1: 	addq	$0x4, %r13
    000017e5: 	addq	$0x4, %rax
    000017e9: 	addq	$0x4, %rbp
    000017ed: 	leaq	0x4(%rdx), %rcx
    000017f1: 	cmpq	$0xc8, %r11
    000017f8: 	jne	.Ltmp2377 # Offset: 6136
    000017fe: 	addq	$0x1, %r12
    00001802: 	cmpq	0x48(%rsp), %r12
    00001807: 	jne	.Ltmp2378 # Offset: 6151
    0000180d: 	movq	0x60(%rsp), %r13
.Ltmp2372:
    00001812: 	movq	%r14, %rdi
    00001815: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 6165
    0000181a: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001821: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00001828: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000182f: 	je	.Ltmp2379 # Offset: 6191
.Ltmp2526:
    00001835: 	movq	-0x20(%rax), %rbp
    00001839: 	callq	clock@PLT # Offset: 6201
    0000183e: 	pxor	%xmm0, %xmm0
    00001842: 	movq	%rax, end_time(%rip)
    00001849: 	movq	%rbp, %rdi
    0000184c: 	subq	start_time(%rip), %rax
    00001853: 	cvtsi2sd	%rax, %xmm0
    00001858: 	divsd	DATAat0x2da00(%rip), %xmm0
    00001860: 	callq	_Z13record_resultdPKc # Offset: 6240
    00001865: 	movq	%r15, %rax
    00001868: 	xorl	%edi, %edi
.Ltmp2382:
    0000186a: 	pxor	%xmm0, %xmm0
    0000186e: 	leaq	0x320(%rax), %rdx
.Ltmp2380:
    00001875: 	movdqu	(%rax), %xmm4
    00001879: 	addq	$0x10, %rax
    0000187d: 	paddd	%xmm4, %xmm0
    00001881: 	cmpq	%rax, %rdx
    00001884: 	jne	.Ltmp2380 # Offset: 6276
    00001886: 	movdqa	%xmm0, %xmm1
    0000188a: 	psrldq	$0x8, %xmm1
    0000188f: 	paddd	%xmm1, %xmm0
    00001893: 	movdqa	%xmm0, %xmm1
    00001897: 	psrldq	$0x4, %xmm1
    0000189c: 	paddd	%xmm1, %xmm0
    000018a0: 	movd	%xmm0, %eax
    000018a4: 	addl	%eax, %edi
    000018a6: 	cmpq	0x18(%rsp), %rdx
    000018ab: 	je	.Ltmp2381 # Offset: 6315
    000018ad: 	movq	%rdx, %rax
    000018b0: 	jmp	.Ltmp2382 # Offset: 6320
.Ltmp2381:
    000018b2: 	movq	%r14, %rsi
    000018b5: 	callq	_Z9check_sumIiEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6325
    000018ba: 	movq	0x120(%rsp), %rdi
    000018c2: 	cmpq	0x8(%rsp), %rdi
    000018c7: 	je	.Ltmp2383 # Offset: 6343
    000018c9: 	movq	0x130(%rsp), %rax
    000018d1: 	leaq	0x1(%rax), %rsi
    000018d5: 	callq	_ZdlPvm@PLT # Offset: 6357
.Ltmp2383:
    000018da: 	movq	0x20(%rsp), %rsi
    000018df: 	leaq	DATAat0x2d761(%rip), %rdx
    000018e6: 	movq	%r14, %rdi
    000018e9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6377
    000018ee: 	callq	clock@PLT # Offset: 6382
    000018f3: 	movq	iterations(%rip), %rbp
    000018fa: 	movq	%rax, start_time(%rip)
    00001901: 	testq	%rbp, %rbp
    00001904: 	je	.Ltmp2384 # Offset: 6404
    00001906: 	xorl	%ebx, %ebx
.Ltmp2385:
    00001908: 	movl	$0x3a980, %edx
    0000190d: 	xorl	%esi, %esi
    0000190f: 	movq	%r15, %rdi
    00001912: 	addq	$0x1, %rbx
    00001916: 	callq	memset@PLT # Offset: 6422
    0000191b: 	movq	0x10(%rsp), %rdi
    00001920: 	movq	%r15, %rdx
    00001923: 	movq	%r13, %rsi
    00001926: 	movl	$0xc8, %r8d
    0000192c: 	movl	$0x12c, %ecx
    00001931: 	callq	"_ZN19matmul_KJI_unrolledIiEclEPKiS2_Pimm.isra.0/1" # Offset: 6449
    00001936: 	cmpq	%rbp, %rbx
    00001939: 	jne	.Ltmp2385 # Offset: 6457
.Ltmp2384:
    0000193b: 	movq	%r14, %rdi
    0000193e: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 6462
    00001943: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000194a: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00001951: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001958: 	je	.Ltmp2386 # Offset: 6488
.Ltmp2525:
    0000195e: 	movq	-0x20(%rax), %rbp
    00001962: 	callq	clock@PLT # Offset: 6498
    00001967: 	pxor	%xmm0, %xmm0
    0000196b: 	movq	%rax, end_time(%rip)
    00001972: 	movq	%rbp, %rdi
    00001975: 	subq	start_time(%rip), %rax
    0000197c: 	cvtsi2sd	%rax, %xmm0
    00001981: 	divsd	DATAat0x2da00(%rip), %xmm0
    00001989: 	callq	_Z13record_resultdPKc # Offset: 6537
    0000198e: 	movq	%r15, %rax
    00001991: 	xorl	%edi, %edi
.Ltmp2389:
    00001993: 	pxor	%xmm0, %xmm0
    00001997: 	leaq	0x320(%rax), %rdx
.Ltmp2387:
    0000199e: 	movdqu	(%rax), %xmm5
    000019a2: 	addq	$0x10, %rax
    000019a6: 	paddd	%xmm5, %xmm0
    000019aa: 	cmpq	%rax, %rdx
    000019ad: 	jne	.Ltmp2387 # Offset: 6573
    000019af: 	movdqa	%xmm0, %xmm1
    000019b3: 	psrldq	$0x8, %xmm1
    000019b8: 	paddd	%xmm1, %xmm0
    000019bc: 	movdqa	%xmm0, %xmm1
    000019c0: 	psrldq	$0x4, %xmm1
    000019c5: 	paddd	%xmm1, %xmm0
    000019c9: 	movd	%xmm0, %eax
    000019cd: 	addl	%eax, %edi
    000019cf: 	cmpq	0x18(%rsp), %rdx
    000019d4: 	je	.Ltmp2388 # Offset: 6612
    000019d6: 	movq	%rdx, %rax
    000019d9: 	jmp	.Ltmp2389 # Offset: 6617
.Ltmp2388:
    000019db: 	movq	%r14, %rsi
    000019de: 	callq	_Z9check_sumIiEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6622
    000019e3: 	movq	0x120(%rsp), %rdi
    000019eb: 	cmpq	0x8(%rsp), %rdi
    000019f0: 	je	.Ltmp2390 # Offset: 6640
    000019f2: 	movq	0x130(%rsp), %rax
    000019fa: 	leaq	0x1(%rax), %rsi
    000019fe: 	callq	_ZdlPvm@PLT # Offset: 6654
.Ltmp2390:
    00001a03: 	movq	0x20(%rsp), %rsi
    00001a08: 	leaq	DATAat0x2d77f(%rip), %rdx
    00001a0f: 	movq	%r14, %rdi
    00001a12: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6674
    00001a17: 	callq	clock@PLT # Offset: 6679
    00001a1c: 	movq	iterations(%rip), %rbp
    00001a23: 	movq	%rax, start_time(%rip)
    00001a2a: 	testq	%rbp, %rbp
    00001a2d: 	je	.Ltmp2391 # Offset: 6701
    00001a2f: 	xorl	%ebx, %ebx
.Ltmp2392:
    00001a31: 	movl	$0x3a980, %edx
    00001a36: 	xorl	%esi, %esi
    00001a38: 	movq	%r15, %rdi
    00001a3b: 	addq	$0x1, %rbx
    00001a3f: 	callq	memset@PLT # Offset: 6719
    00001a44: 	movq	0x10(%rsp), %rdi
    00001a49: 	movq	%r15, %rdx
    00001a4c: 	movq	%r13, %rsi
    00001a4f: 	movl	$0xc8, %r8d
    00001a55: 	movl	$0x12c, %ecx
    00001a5a: 	callq	"_ZN19matmul_JKI_unrolledIiEclEPKiS2_Pimm.isra.0/1" # Offset: 6746
    00001a5f: 	cmpq	%rbp, %rbx
    00001a62: 	jne	.Ltmp2392 # Offset: 6754
.Ltmp2391:
    00001a64: 	movq	%r14, %rdi
    00001a67: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 6759
    00001a6c: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001a73: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00001a7a: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001a81: 	je	.Ltmp2393 # Offset: 6785
.Ltmp2524:
    00001a87: 	movq	-0x20(%rax), %rbp
    00001a8b: 	callq	clock@PLT # Offset: 6795
    00001a90: 	pxor	%xmm0, %xmm0
    00001a94: 	movq	%rax, end_time(%rip)
    00001a9b: 	movq	%rbp, %rdi
    00001a9e: 	subq	start_time(%rip), %rax
    00001aa5: 	cvtsi2sd	%rax, %xmm0
    00001aaa: 	divsd	DATAat0x2da00(%rip), %xmm0
    00001ab2: 	callq	_Z13record_resultdPKc # Offset: 6834
    00001ab7: 	movq	%r15, %rax
    00001aba: 	xorl	%edi, %edi
.Ltmp2396:
    00001abc: 	pxor	%xmm0, %xmm0
    00001ac0: 	leaq	0x320(%rax), %rdx
.Ltmp2394:
    00001ac7: 	movdqu	(%rax), %xmm6
    00001acb: 	addq	$0x10, %rax
    00001acf: 	paddd	%xmm6, %xmm0
    00001ad3: 	cmpq	%rax, %rdx
    00001ad6: 	jne	.Ltmp2394 # Offset: 6870
    00001ad8: 	movdqa	%xmm0, %xmm1
    00001adc: 	psrldq	$0x8, %xmm1
    00001ae1: 	paddd	%xmm1, %xmm0
    00001ae5: 	movdqa	%xmm0, %xmm1
    00001ae9: 	psrldq	$0x4, %xmm1
    00001aee: 	paddd	%xmm1, %xmm0
    00001af2: 	movd	%xmm0, %eax
    00001af6: 	addl	%eax, %edi
    00001af8: 	cmpq	0x18(%rsp), %rdx
    00001afd: 	je	.Ltmp2395 # Offset: 6909
    00001aff: 	movq	%rdx, %rax
    00001b02: 	jmp	.Ltmp2396 # Offset: 6914
.Ltmp2395:
    00001b04: 	movq	%r14, %rsi
    00001b07: 	callq	_Z9check_sumIiEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 6919
    00001b0c: 	movq	0x120(%rsp), %rdi
    00001b14: 	cmpq	0x8(%rsp), %rdi
    00001b19: 	je	.Ltmp2397 # Offset: 6937
    00001b1b: 	movq	0x130(%rsp), %rax
    00001b23: 	leaq	0x1(%rax), %rsi
    00001b27: 	callq	_ZdlPvm@PLT # Offset: 6951
.Ltmp2397:
    00001b2c: 	movq	0x20(%rsp), %rsi
    00001b31: 	leaq	DATAat0x2d79d(%rip), %rdx
    00001b38: 	movq	%r14, %rdi
    00001b3b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6971
    00001b40: 	callq	clock@PLT # Offset: 6976
    00001b45: 	movq	$0x0, 0x38(%rsp)
    00001b4e: 	movq	%rax, start_time(%rip)
    00001b55: 	movq	iterations(%rip), %rax
    00001b5c: 	movq	%rax, 0xa8(%rsp)
    00001b64: 	testq	%rax, %rax
    00001b67: 	je	.Ltmp2398 # Offset: 7015
    00001b6d: 	movq	%r15, 0x48(%rsp)
    00001b72: 	movq	%r14, 0xb0(%rsp)
    00001b7a: 	movq	%r13, %r14
.Ltmp2407:
    00001b7d: 	movq	0x48(%rsp), %rdi
    00001b82: 	movl	$0x3a980, %edx
    00001b87: 	xorl	%esi, %esi
    00001b89: 	xorl	%r13d, %r13d
    00001b8c: 	callq	memset@PLT # Offset: 7052
.Ltmp2406:
    00001b91: 	movq	%r13, %rcx
    00001b94: 	movl	$0xc8, %eax
    00001b99: 	movq	%r13, 0x68(%rsp)
    00001b9e: 	subq	$-0x80, %r13
    00001ba2: 	cmpq	%rax, %r13
    00001ba5: 	movq	%r13, 0xb8(%rsp)
    00001bad: 	cmovbeq	%r13, %rax
    00001bb1: 	xorl	%r12d, %r12d
    00001bb4: 	movq	%rax, 0x30(%rsp)
    00001bb9: 	leaq	(%r14,%rcx,4), %rax
    00001bbd: 	movq	%rax, 0x60(%rsp)
.Ltmp2405:
    00001bc2: 	movl	$0xc8, %ecx
    00001bc7: 	movq	%r12, %r8
    00001bca: 	subq	$-0x80, %r12
    00001bce: 	movq	0x68(%rsp), %rbx
    00001bd3: 	cmpq	%rcx, %r12
    00001bd6: 	cmovbeq	%r12, %rcx
    00001bda: 	cmpq	%rbx, 0x30(%rsp)
    00001bdf: 	jbe	.Ltmp2399 # Offset: 7135
    00001be5: 	movq	0x10(%rsp), %rax
    00001bea: 	movq	%rcx, %r9
    00001bed: 	movq	0x48(%rsp), %rsi
    00001bf2: 	movq	%r12, 0xc0(%rsp)
    00001bfa: 	subq	%r8, %r9
    00001bfd: 	leaq	(%rax,%r8,4), %r10
    00001c01: 	movq	%r9, %rax
    00001c04: 	leaq	-0x1(%r9), %rbx
    00001c08: 	movq	%r9, %r11
    00001c0b: 	shrq	$0x2, %rax
    00001c0f: 	andq	$-0x4, %r11
    00001c13: 	movq	%rbx, 0xa0(%rsp)
    00001c1b: 	shlq	$0x4, %rax
    00001c1f: 	cmpq	$0x2, %rbx
    00001c23: 	movq	%rax, 0x90(%rsp)
    00001c2b: 	leaq	(%r8,%r11), %rax
    00001c2f: 	cmovbeq	%r8, %rax
    00001c33: 	xorl	%ebp, %ebp
    00001c35: 	movq	%rax, %rbx
    00001c38: 	leaq	(%rax,%rax,4), %rax
    00001c3c: 	leaq	(%rax,%rax,4), %rax
    00001c40: 	leaq	(,%rax,8), %r13
    00001c48: 	leaq	0x1(%rbx), %rax
    00001c4c: 	movq	%rax, 0x40(%rsp)
    00001c51: 	leaq	0xc8(%r13), %rax
    00001c58: 	movq	%rax, 0x70(%rsp)
    00001c5d: 	leaq	0x2(%rbx), %rax
    00001c61: 	movq	%rax, 0x50(%rsp)
    00001c66: 	leaq	0x190(%r13), %rax
    00001c6d: 	movq	%rax, 0x88(%rsp)
.Ltmp2404:
    00001c75: 	movq	0x10(%rsp), %rdx
    00001c7a: 	movq	0x60(%rsp), %rdi
    00001c7f: 	movq	%rbx, 0x28(%rsp)
    00001c84: 	movq	0x90(%rsp), %rax
    00001c8c: 	addq	%r10, %rax
    00001c8f: 	movq	%rax, 0x98(%rsp)
    00001c97: 	leaq	(%rbx,%rbp), %rax
    00001c9b: 	leaq	(%rdx,%rax,4), %r12
    00001c9f: 	movq	0x40(%rsp), %rax
    00001ca4: 	addq	%rbp, %rax
    00001ca7: 	leaq	(%rdx,%rax,4), %rax
    00001cab: 	movq	%rax, 0x78(%rsp)
    00001cb0: 	movq	0x50(%rsp), %rax
    00001cb5: 	addq	%rbp, %rax
    00001cb8: 	leaq	(%rdx,%rax,4), %rax
    00001cbc: 	movq	0x68(%rsp), %rdx
    00001cc1: 	movq	%rax, 0x80(%rsp)
    00001cc9: 	nopl	(%rax) # Size: 7
.Ltmp2403:
    00001cd0: 	xorl	%eax, %eax
    00001cd2: 	cmpq	%rcx, %r8
    00001cd5: 	jae	.Ltmp2400 # Offset: 7381
    00001cdb: 	cmpq	$0x2, 0xa0(%rsp)
    00001ce4: 	jbe	.Ltmp2401 # Offset: 7396
    00001cea: 	movq	0x28(%rsp), %rbx
    00001cef: 	movq	%rdi, %rax
    00001cf2: 	movq	%r10, %r15
    00001cf5: 	pxor	%xmm0, %xmm0
.Ltmp2402:
    00001cf9: 	movd	0x640(%rax), %xmm2
    00001d01: 	movd	(%rax), %xmm1
    00001d05: 	addq	$0x10, %r15
    00001d09: 	addq	$0xc80, %rax
    00001d0f: 	movd	-0x320(%rax), %xmm7
    00001d17: 	movd	-0x960(%rax), %xmm4
    00001d1f: 	movdqu	-0x10(%r15), %xmm3
    00001d25: 	punpckldq	%xmm7, %xmm2
    00001d29: 	punpckldq	%xmm4, %xmm1
    00001d2d: 	punpcklqdq	%xmm2, %xmm1
    00001d31: 	movdqu	-0x10(%r15), %xmm2
    00001d37: 	psrlq	$0x20, %xmm3
    00001d3c: 	pmuludq	%xmm1, %xmm2
    00001d40: 	psrlq	$0x20, %xmm1
    00001d45: 	pmuludq	%xmm3, %xmm1
    00001d49: 	pshufd	$0x8, %xmm2, %xmm2
    00001d4e: 	pshufd	$0x8, %xmm1, %xmm1
    00001d53: 	punpckldq	%xmm1, %xmm2
    00001d57: 	paddd	%xmm2, %xmm0
    00001d5b: 	cmpq	%r15, 0x98(%rsp)
    00001d63: 	jne	.Ltmp2402 # Offset: 7523
    00001d65: 	movdqa	%xmm0, %xmm1
    00001d69: 	movq	%rbx, 0x28(%rsp)
    00001d6e: 	psrldq	$0x8, %xmm1
    00001d73: 	paddd	%xmm1, %xmm0
    00001d77: 	movdqa	%xmm0, %xmm1
    00001d7b: 	psrldq	$0x4, %xmm1
    00001d80: 	paddd	%xmm1, %xmm0
    00001d84: 	movd	%xmm0, %eax
    00001d88: 	cmpq	%r11, %r9
    00001d8b: 	je	.Ltmp2400 # Offset: 7563
.Ltmp2426:
    00001d8d: 	leaq	(%r13,%rdx), %r15
    00001d92: 	movl	(%r14,%r15,4), %r15d
    00001d96: 	imull	(%r12), %r15d
    00001d9b: 	addl	%r15d, %eax
    00001d9e: 	cmpq	0x40(%rsp), %rcx
    00001da3: 	jbe	.Ltmp2400 # Offset: 7587
    00001da5: 	movq	0x70(%rsp), %r15
    00001daa: 	movq	0x78(%rsp), %rbx
    00001daf: 	addq	%rdx, %r15
    00001db2: 	movl	(%r14,%r15,4), %r15d
    00001db6: 	imull	(%rbx), %r15d
    00001dba: 	addl	%r15d, %eax
    00001dbd: 	cmpq	%rcx, 0x50(%rsp)
    00001dc2: 	jae	.Ltmp2400 # Offset: 7618
    00001dc4: 	movq	0x88(%rsp), %rbx
    00001dcc: 	leaq	(%rbx,%rdx), %r15
    00001dd0: 	movq	0x80(%rsp), %rbx
    00001dd8: 	movl	(%r14,%r15,4), %r15d
    00001ddc: 	imull	(%rbx), %r15d
    00001de0: 	addl	%r15d, %eax
    00001de3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2400:
    00001de8: 	addl	%eax, (%rsi,%rdx,4)
    00001deb: 	addq	$0x4, %rdi
    00001def: 	addq	$0x1, %rdx
    00001df3: 	cmpq	%rdx, 0x30(%rsp)
    00001df8: 	jne	.Ltmp2403 # Offset: 7672
    00001dfe: 	movq	0x28(%rsp), %rbx
    00001e03: 	addq	$0xc8, %rbp
    00001e0a: 	addq	$0x320, %rsi
    00001e11: 	addq	$0x320, %r10
    00001e18: 	cmpq	0x18(%rsp), %rsi
    00001e1d: 	jne	.Ltmp2404 # Offset: 7709
    00001e23: 	movq	0xc0(%rsp), %r12
.Ltmp2399:
    00001e2b: 	addq	$0x19000, 0x60(%rsp)
    00001e34: 	cmpq	$0x100, %r12
    00001e3b: 	jne	.Ltmp2405 # Offset: 7739
    00001e41: 	movq	0xb8(%rsp), %r13
    00001e49: 	cmpq	$0x100, %r13
    00001e50: 	jne	.Ltmp2406 # Offset: 7760
    00001e56: 	addq	$0x1, 0x38(%rsp)
    00001e5c: 	movq	0x38(%rsp), %rax
    00001e61: 	cmpq	0xa8(%rsp), %rax
    00001e69: 	jne	.Ltmp2407 # Offset: 7785
    00001e6f: 	movq	%r14, %r13
    00001e72: 	movq	0x48(%rsp), %r15
    00001e77: 	movq	0xb0(%rsp), %r14
.Ltmp2398:
    00001e7f: 	movq	%r14, %rdi
    00001e82: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 7810
    00001e87: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001e8e: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00001e95: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001e9c: 	je	.Ltmp2408 # Offset: 7836
.Ltmp2523:
    00001ea2: 	movq	-0x20(%rax), %rbp
    00001ea6: 	callq	clock@PLT # Offset: 7846
    00001eab: 	pxor	%xmm0, %xmm0
    00001eaf: 	movq	%rax, end_time(%rip)
    00001eb6: 	movq	%rbp, %rdi
    00001eb9: 	subq	start_time(%rip), %rax
    00001ec0: 	cvtsi2sd	%rax, %xmm0
    00001ec5: 	divsd	DATAat0x2da00(%rip), %xmm0
    00001ecd: 	callq	_Z13record_resultdPKc # Offset: 7885
    00001ed2: 	xorl	%edi, %edi
    00001ed4: 	movq	%r15, %rax
.Ltmp2410:
    00001ed7: 	pxor	%xmm0, %xmm0
    00001edb: 	leaq	0x320(%rax), %rdx
.Ltmp2409:
    00001ee2: 	movdqu	(%rax), %xmm5
    00001ee6: 	addq	$0x10, %rax
    00001eea: 	paddd	%xmm5, %xmm0
    00001eee: 	cmpq	%rdx, %rax
    00001ef1: 	jne	.Ltmp2409 # Offset: 7921
    00001ef3: 	movdqa	%xmm0, %xmm1
    00001ef7: 	psrldq	$0x8, %xmm1
    00001efc: 	paddd	%xmm1, %xmm0
    00001f00: 	movdqa	%xmm0, %xmm1
    00001f04: 	psrldq	$0x4, %xmm1
    00001f09: 	paddd	%xmm1, %xmm0
    00001f0d: 	movd	%xmm0, %edx
    00001f11: 	addl	%edx, %edi
    00001f13: 	cmpq	%rax, 0x18(%rsp)
    00001f18: 	jne	.Ltmp2410 # Offset: 7960
    00001f1a: 	movq	%r14, %rsi
    00001f1d: 	callq	_Z9check_sumIiEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7965
    00001f22: 	movq	0x120(%rsp), %rdi
    00001f2a: 	cmpq	0x8(%rsp), %rdi
    00001f2f: 	je	.Ltmp2411 # Offset: 7983
    00001f31: 	movq	0x130(%rsp), %rax
    00001f39: 	leaq	0x1(%rax), %rsi
    00001f3d: 	callq	_ZdlPvm@PLT # Offset: 7997
.Ltmp2411:
    00001f42: 	movq	0x20(%rsp), %rsi
    00001f47: 	leaq	DATAat0x2d7ba(%rip), %rdx
    00001f4e: 	movq	%r14, %rdi
    00001f51: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8017
    00001f56: 	callq	clock@PLT # Offset: 8022
    00001f5b: 	xorl	%r12d, %r12d
    00001f5e: 	movq	%rax, start_time(%rip)
    00001f65: 	movq	iterations(%rip), %rax
    00001f6c: 	movq	%rax, 0x30(%rsp)
    00001f71: 	testq	%rax, %rax
    00001f74: 	je	.Ltmp2412 # Offset: 8052
    00001f7a: 	movq	%r14, 0x38(%rsp)
.Ltmp2421:
    00001f7f: 	movl	$0x3a980, %edx
    00001f84: 	xorl	%esi, %esi
    00001f86: 	movq	%r15, %rdi
    00001f89: 	movq	%r13, %rbx
    00001f8c: 	callq	memset@PLT # Offset: 8076
    00001f91: 	movl	$0x1, %r9d
    00001f97: 	xorl	%ecx, %ecx
.Ltmp2420:
    00001f99: 	movl	$0xc8, %eax
    00001f9e: 	movq	%rcx, %rbp
    00001fa1: 	subq	$-0x80, %rcx
    00001fa5: 	cmpq	%rax, %rcx
    00001fa8: 	cmovbeq	%rcx, %rax
    00001fac: 	cmpq	%rbp, %rax
    00001faf: 	jbe	.Ltmp2413 # Offset: 8111
    00001fb5: 	leaq	-0x1(%rax), %rsi
    00001fb9: 	movq	0x10(%rsp), %rdi
    00001fbe: 	xorl	%r11d, %r11d
    00001fc1: 	movq	%rsi, 0x28(%rsp)
    00001fc6: 	movq	%r15, %rsi
.Ltmp2419:
    00001fc9: 	movq	%rbx, %r10
    00001fcc: 	movq	%r9, %r8
    00001fcf: 	movq	%rbp, %rdx
    00001fd2: 	cmpq	0x28(%rsp), %r9
    00001fd7: 	jae	.Ltmp2414 # Offset: 8151
.Ltmp2416:
    00001fdd: 	movd	-0x4(%rdi,%r8,4), %xmm6
    00001fe4: 	movd	(%rdi,%r8,4), %xmm7
    00001fea: 	leaq	0x320(%r10), %r14
    00001ff1: 	xorl	%edx, %edx
    00001ff3: 	pshufd	$0x0, %xmm6, %xmm4
    00001ff8: 	pshufd	$0x0, %xmm7, %xmm3
    00001ffd: 	movdqa	%xmm4, %xmm6
    00002001: 	movdqa	%xmm3, %xmm5
    00002005: 	psrlq	$0x20, %xmm6
    0000200a: 	psrlq	$0x20, %xmm5
.Ltmp2415:
    0000200f: 	movdqu	(%r10,%rdx), %xmm1
    00002015: 	movdqu	(%r10,%rdx), %xmm0
    0000201b: 	movdqu	(%r14,%rdx), %xmm2
    00002021: 	movdqu	(%rsi,%rdx), %xmm7
    00002026: 	psrlq	$0x20, %xmm1
    0000202b: 	pmuludq	%xmm4, %xmm0
    0000202f: 	pmuludq	%xmm6, %xmm1
    00002033: 	pmuludq	%xmm3, %xmm2
    00002037: 	pshufd	$0x8, %xmm0, %xmm0
    0000203c: 	pshufd	$0x8, %xmm1, %xmm1
    00002041: 	pshufd	$0x8, %xmm2, %xmm2
    00002046: 	punpckldq	%xmm1, %xmm0
    0000204a: 	movdqu	(%r14,%rdx), %xmm1
    00002050: 	paddd	%xmm7, %xmm0
    00002054: 	psrlq	$0x20, %xmm1
    00002059: 	pmuludq	%xmm5, %xmm1
    0000205d: 	pshufd	$0x8, %xmm1, %xmm1
    00002062: 	punpckldq	%xmm1, %xmm2
    00002066: 	paddd	%xmm2, %xmm0
    0000206a: 	movups	%xmm0, (%rsi,%rdx)
    0000206e: 	addq	$0x10, %rdx
    00002072: 	cmpq	$0x320, %rdx
    00002079: 	jne	.Ltmp2415 # Offset: 8313
    0000207b: 	leaq	0x1(%r8), %rdx
    0000207f: 	addq	$0x640, %r10
    00002086: 	addq	$0x2, %r8
    0000208a: 	cmpq	0x28(%rsp), %r8
    0000208f: 	jb	.Ltmp2416 # Offset: 8335
.Ltmp2414:
    00002095: 	leaq	(%rdx,%rdx,4), %r8
    00002099: 	leaq	(%r8,%r8,4), %r8
    0000209d: 	shlq	$0x5, %r8
    000020a1: 	addq	%r13, %r8
    000020a4: 	nopl	(%rax) # Size: 4
.Ltmp2418:
    000020a8: 	movd	(%rdi,%rdx,4), %xmm4
    000020ad: 	xorl	%r10d, %r10d
    000020b0: 	pshufd	$0x0, %xmm4, %xmm2
    000020b5: 	movdqa	%xmm2, %xmm3
    000020b9: 	psrlq	$0x20, %xmm3
.Ltmp2417:
    000020be: 	movdqu	(%r8,%r10), %xmm0
    000020c4: 	movdqu	(%r8,%r10), %xmm1
    000020ca: 	psrlq	$0x20, %xmm0
    000020cf: 	pmuludq	%xmm2, %xmm1
    000020d3: 	pmuludq	%xmm3, %xmm0
    000020d7: 	pshufd	$0x8, %xmm1, %xmm1
    000020dc: 	pshufd	$0x8, %xmm0, %xmm0
    000020e1: 	punpckldq	%xmm0, %xmm1
    000020e5: 	movdqu	(%rsi,%r10), %xmm0
    000020eb: 	paddd	%xmm1, %xmm0
    000020ef: 	movups	%xmm0, (%rsi,%r10)
    000020f4: 	addq	$0x10, %r10
    000020f8: 	cmpq	$0x320, %r10
    000020ff: 	jne	.Ltmp2417 # Offset: 8447
    00002101: 	addq	$0x1, %rdx
    00002105: 	addq	$0x320, %r8
    0000210c: 	cmpq	%rdx, %rax
    0000210f: 	ja	.Ltmp2418 # Offset: 8463
    00002111: 	addq	$0xc8, %r11
    00002118: 	addq	$0x320, %rsi
    0000211f: 	addq	$0x320, %rdi
    00002126: 	cmpq	$0xea60, %r11
    0000212d: 	jne	.Ltmp2419 # Offset: 8493
.Ltmp2413:
    00002133: 	subq	$-0x80, %r9
    00002137: 	addq	$0x19000, %rbx
    0000213e: 	cmpq	$0x100, %rcx
    00002145: 	jne	.Ltmp2420 # Offset: 8517
    0000214b: 	addq	$0x1, %r12
    0000214f: 	cmpq	0x30(%rsp), %r12
    00002154: 	jne	.Ltmp2421 # Offset: 8532
    0000215a: 	movq	0x38(%rsp), %r14
.Ltmp2412:
    0000215f: 	movq	%r14, %rdi
    00002162: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 8546
    00002167: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000216e: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00002175: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000217c: 	je	.Ltmp2422 # Offset: 8572
.Ltmp2522:
    00002182: 	movq	-0x20(%rax), %rbp
    00002186: 	callq	clock@PLT # Offset: 8582
    0000218b: 	pxor	%xmm0, %xmm0
    0000218f: 	movq	%rax, end_time(%rip)
    00002196: 	movq	%rbp, %rdi
    00002199: 	subq	start_time(%rip), %rax
    000021a0: 	cvtsi2sd	%rax, %xmm0
    000021a5: 	divsd	DATAat0x2da00(%rip), %xmm0
    000021ad: 	callq	_Z13record_resultdPKc # Offset: 8621
    000021b2: 	movq	%r15, %rax
    000021b5: 	xorl	%edi, %edi
.Ltmp2425:
    000021b7: 	pxor	%xmm0, %xmm0
    000021bb: 	leaq	0x320(%rax), %rdx
.Ltmp2423:
    000021c2: 	movdqu	(%rax), %xmm4
    000021c6: 	addq	$0x10, %rax
    000021ca: 	paddd	%xmm4, %xmm0
    000021ce: 	cmpq	%rax, %rdx
    000021d1: 	jne	.Ltmp2423 # Offset: 8657
    000021d3: 	movdqa	%xmm0, %xmm1
    000021d7: 	psrldq	$0x8, %xmm1
    000021dc: 	paddd	%xmm1, %xmm0
    000021e0: 	movdqa	%xmm0, %xmm1
    000021e4: 	psrldq	$0x4, %xmm1
    000021e9: 	paddd	%xmm1, %xmm0
    000021ed: 	movd	%xmm0, %eax
    000021f1: 	addl	%eax, %edi
    000021f3: 	cmpq	0x18(%rsp), %rdx
    000021f8: 	je	.Ltmp2424 # Offset: 8696
    000021fa: 	movq	%rdx, %rax
    000021fd: 	jmp	.Ltmp2425 # Offset: 8701
.Ltmp2401:
    000021ff: 	xorl	%eax, %eax
    00002201: 	jmp	.Ltmp2426 # Offset: 8705
.Ltmp2424:
    00002206: 	movq	%r14, %rsi
    00002209: 	callq	_Z9check_sumIiEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 8713
    0000220e: 	movq	0x120(%rsp), %rdi
    00002216: 	cmpq	0x8(%rsp), %rdi
    0000221b: 	je	.Ltmp2427 # Offset: 8731
    0000221d: 	movq	0x130(%rsp), %rax
    00002225: 	leaq	0x1(%rax), %rsi
    00002229: 	callq	_ZdlPvm@PLT # Offset: 8745
.Ltmp2427:
    0000222e: 	movq	0x20(%rsp), %rsi
    00002233: 	leaq	DATAat0x2d7d7(%rip), %rdx
    0000223a: 	movq	%r14, %rdi
    0000223d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8765
    00002242: 	callq	clock@PLT # Offset: 8770
    00002247: 	movq	$0x0, 0x38(%rsp)
    00002250: 	movq	%rax, start_time(%rip)
    00002257: 	movq	iterations(%rip), %rax
    0000225e: 	movq	%rax, 0xb0(%rsp)
    00002266: 	testq	%rax, %rax
    00002269: 	je	.Ltmp2428 # Offset: 8809
    0000226f: 	movq	%r14, 0xc8(%rsp)
    00002277: 	movq	%r15, %r14
    0000227a: 	movq	%r13, %r15
.Ltmp2437:
    0000227d: 	movq	%r14, %rdi
    00002280: 	movl	$0x3a980, %edx
    00002285: 	xorl	%esi, %esi
    00002287: 	xorl	%r13d, %r13d
    0000228a: 	callq	memset@PLT # Offset: 8842
    0000228f: 	movq	%r14, 0x78(%rsp)
    00002294: 	movq	%r13, %r14
    00002297: 	movq	$0x0, 0x40(%rsp)
.Ltmp2436:
    000022a0: 	movl	$0x12c, %eax
    000022a5: 	movq	0x10(%rsp), %rcx
    000022aa: 	movq	0x40(%rsp), %rbx
    000022af: 	movq	%r14, 0xa8(%rsp)
    000022b7: 	movq	$0x0, 0x68(%rsp)
    000022c0: 	subq	$-0x80, %r14
    000022c4: 	cmpq	%rax, %r14
    000022c7: 	leaq	(%rcx,%rbx,4), %rcx
    000022cb: 	movq	%r14, 0xd0(%rsp)
    000022d3: 	cmovbeq	%r14, %rax
    000022d7: 	movq	%rcx, 0x60(%rsp)
    000022dc: 	xorl	%r13d, %r13d
    000022df: 	movq	%rax, 0xa0(%rsp)
    000022e7: 	leaq	(%rax,%rax,4), %rax
    000022eb: 	leaq	(%rax,%rax,4), %rax
    000022ef: 	shlq	$0x3, %rax
    000022f3: 	movq	%rax, 0x48(%rsp)
.Ltmp2435:
    000022f8: 	movl	$0xc8, %ecx
    000022fd: 	movq	%r13, %r10
    00002300: 	subq	$-0x80, %r13
    00002304: 	movq	0xa8(%rsp), %rbx
    0000230c: 	cmpq	%rcx, %r13
    0000230f: 	cmovbeq	%r13, %rcx
    00002313: 	cmpq	%rbx, 0xa0(%rsp)
    0000231b: 	jbe	.Ltmp2429 # Offset: 8987
    00002321: 	movq	0x68(%rsp), %rax
    00002326: 	movq	%rcx, %r12
    00002329: 	movq	%r13, 0xd8(%rsp)
    00002331: 	subq	%r10, %r12
    00002334: 	leaq	(%r15,%rax,4), %rbx
    00002338: 	movq	%r12, %rbp
    0000233b: 	leaq	-0x1(%r12), %rsi
    00002340: 	movq	%r12, %rax
    00002343: 	shrq	$0x2, %rax
    00002347: 	andq	$-0x4, %rbp
    0000234b: 	movq	%rsi, 0xc0(%rsp)
    00002353: 	shlq	$0x4, %rax
    00002357: 	leaq	(%r10,%rbp), %rdi
    0000235b: 	cmpq	$0x2, %rsi
    0000235f: 	movq	0x78(%rsp), %rsi
    00002364: 	cmovbeq	%r10, %rdi
    00002368: 	movq	%rax, 0x30(%rsp)
    0000236d: 	xorl	%r9d, %r9d
    00002370: 	leaq	(%rdi,%rdi,4), %rax
    00002374: 	leaq	(%rax,%rax,4), %rax
    00002378: 	leaq	(,%rax,8), %r14
    00002380: 	leaq	0x1(%rdi), %rax
    00002384: 	movq	%rax, 0x70(%rsp)
    00002389: 	leaq	0xc8(%r14), %rax
    00002390: 	movq	%rax, 0x80(%rsp)
    00002398: 	leaq	0x2(%rdi), %rax
    0000239c: 	movq	%rax, 0x90(%rsp)
    000023a4: 	leaq	0x190(%r14), %rax
    000023ab: 	movq	%rax, 0x98(%rsp)
.Ltmp2434:
    000023b3: 	leaq	(%r14,%r9), %rax
    000023b7: 	movq	%r9, 0x28(%rsp)
    000023bc: 	movq	0x60(%rsp), %rdx
    000023c1: 	leaq	(%r15,%rax,4), %rax
    000023c5: 	movq	%rax, 0x50(%rsp)
    000023ca: 	movq	0x80(%rsp), %rax
    000023d2: 	addq	%r9, %rax
    000023d5: 	leaq	(%r15,%rax,4), %rax
    000023d9: 	movq	%rax, 0x88(%rsp)
    000023e1: 	movq	0x98(%rsp), %rax
    000023e9: 	addq	%r9, %rax
    000023ec: 	leaq	(%r15,%rax,4), %rax
    000023f0: 	movq	%rax, 0xb8(%rsp)
    000023f8: 	movq	0x40(%rsp), %rax
    000023fd: 	nopl	(%rax) # Size: 3
.Ltmp2433:
    00002400: 	xorl	%r8d, %r8d
    00002403: 	cmpq	%r10, %rcx
    00002406: 	jbe	.Ltmp2430 # Offset: 9222
    0000240c: 	cmpq	$0x2, 0xc0(%rsp)
    00002415: 	jbe	.Ltmp2431 # Offset: 9237
    0000241b: 	movq	0x30(%rsp), %r11
    00002420: 	movq	0x28(%rsp), %r9
    00002425: 	movq	%rbx, %r8
    00002428: 	pxor	%xmm0, %xmm0
    0000242c: 	leaq	(%r11,%rdx), %r13
    00002430: 	movq	%rdx, %r11
.Ltmp2432:
    00002433: 	movd	(%r8), %xmm1
    00002438: 	movdqu	(%r11), %xmm3
    0000243d: 	addq	$0x10, %r11
    00002441: 	addq	$0xc80, %r8
    00002448: 	movd	-0x640(%r8), %xmm2
    00002451: 	movd	-0x320(%r8), %xmm5
    0000245a: 	movd	-0x960(%r8), %xmm6
    00002463: 	psrlq	$0x20, %xmm3
    00002468: 	punpckldq	%xmm5, %xmm2
    0000246c: 	punpckldq	%xmm6, %xmm1
    00002470: 	punpcklqdq	%xmm2, %xmm1
    00002474: 	movdqu	-0x10(%r11), %xmm2
    0000247a: 	pmuludq	%xmm1, %xmm2
    0000247e: 	psrlq	$0x20, %xmm1
    00002483: 	pmuludq	%xmm3, %xmm1
    00002487: 	pshufd	$0x8, %xmm2, %xmm2
    0000248c: 	pshufd	$0x8, %xmm1, %xmm1
    00002491: 	punpckldq	%xmm1, %xmm2
    00002495: 	paddd	%xmm2, %xmm0
    00002499: 	cmpq	%r13, %r11
    0000249c: 	jne	.Ltmp2432 # Offset: 9372
    0000249e: 	movdqa	%xmm0, %xmm1
    000024a2: 	movq	%r9, 0x28(%rsp)
    000024a7: 	psrldq	$0x8, %xmm1
    000024ac: 	paddd	%xmm1, %xmm0
    000024b0: 	movdqa	%xmm0, %xmm1
    000024b4: 	psrldq	$0x4, %xmm1
    000024b9: 	paddd	%xmm1, %xmm0
    000024bd: 	movd	%xmm0, %r8d
    000024c2: 	cmpq	%rbp, %r12
    000024c5: 	je	.Ltmp2430 # Offset: 9413
.Ltmp2442:
    000024c7: 	movq	0x10(%rsp), %r13
    000024cc: 	movq	0x50(%rsp), %r9
    000024d1: 	leaq	(%rax,%rdi), %r11
    000024d5: 	movl	(%r13,%r11,4), %r11d
    000024da: 	imull	(%r9), %r11d
    000024de: 	addl	%r11d, %r8d
    000024e1: 	movq	0x70(%rsp), %r11
    000024e6: 	cmpq	%r11, %rcx
    000024e9: 	jbe	.Ltmp2430 # Offset: 9449
    000024eb: 	movq	0x88(%rsp), %r9
    000024f3: 	addq	%rax, %r11
    000024f6: 	movl	(%r13,%r11,4), %r11d
    000024fb: 	imull	(%r9), %r11d
    000024ff: 	addl	%r11d, %r8d
    00002502: 	movq	0x90(%rsp), %r11
    0000250a: 	cmpq	%rcx, %r11
    0000250d: 	jae	.Ltmp2430 # Offset: 9485
    0000250f: 	movq	0xb8(%rsp), %r9
    00002517: 	addq	%rax, %r11
    0000251a: 	movl	(%r13,%r11,4), %r11d
    0000251f: 	imull	(%r9), %r11d
    00002523: 	addl	%r11d, %r8d
    00002526: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2430:
    00002530: 	addl	%r8d, (%rsi,%rax,4)
    00002534: 	addq	$0x320, %rdx
    0000253b: 	addq	$0xc8, %rax
    00002541: 	cmpq	%rax, 0x48(%rsp)
    00002546: 	jne	.Ltmp2433 # Offset: 9542
    0000254c: 	movq	0x28(%rsp), %r9
    00002551: 	addq	$0x4, %rsi
    00002555: 	addq	$0x4, %rbx
    00002559: 	addq	$0x1, %r9
    0000255d: 	cmpq	$0xc8, %r9
    00002564: 	jne	.Ltmp2434 # Offset: 9572
    0000256a: 	movq	0xd8(%rsp), %r13
.Ltmp2429:
    00002572: 	addq	$0x200, 0x60(%rsp)
    0000257b: 	addq	$0x6400, 0x68(%rsp)
    00002584: 	cmpq	$0x100, %r13
    0000258b: 	jne	.Ltmp2435 # Offset: 9611
    00002591: 	movq	0xd0(%rsp), %r14
    00002599: 	addq	$0x6400, 0x40(%rsp)
    000025a2: 	cmpq	$0x180, %r14
    000025a9: 	jne	.Ltmp2436 # Offset: 9641
    000025af: 	addq	$0x1, 0x38(%rsp)
    000025b5: 	movq	0x78(%rsp), %r14
    000025ba: 	movq	0x38(%rsp), %rax
    000025bf: 	cmpq	0xb0(%rsp), %rax
    000025c7: 	jne	.Ltmp2437 # Offset: 9671
    000025cd: 	movq	%r15, %r13
    000025d0: 	movq	%r14, %r15
    000025d3: 	movq	0xc8(%rsp), %r14
.Ltmp2428:
    000025db: 	movq	%r14, %rdi
    000025de: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 9694
    000025e3: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000025ea: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    000025f1: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000025f8: 	je	.Ltmp2438 # Offset: 9720
.Ltmp2521:
    000025fe: 	movq	-0x20(%rax), %rbp
    00002602: 	callq	clock@PLT # Offset: 9730
    00002607: 	pxor	%xmm0, %xmm0
    0000260b: 	movq	%rax, end_time(%rip)
    00002612: 	movq	%rbp, %rdi
    00002615: 	subq	start_time(%rip), %rax
    0000261c: 	cvtsi2sd	%rax, %xmm0
    00002621: 	divsd	DATAat0x2da00(%rip), %xmm0
    00002629: 	callq	_Z13record_resultdPKc # Offset: 9769
    0000262e: 	movq	%r15, %rax
    00002631: 	xorl	%edi, %edi
.Ltmp2441:
    00002633: 	pxor	%xmm0, %xmm0
    00002637: 	leaq	0x320(%rax), %rdx
.Ltmp2439:
    0000263e: 	movdqu	(%rax), %xmm4
    00002642: 	addq	$0x10, %rax
    00002646: 	paddd	%xmm4, %xmm0
    0000264a: 	cmpq	%rax, %rdx
    0000264d: 	jne	.Ltmp2439 # Offset: 9805
    0000264f: 	movdqa	%xmm0, %xmm1
    00002653: 	psrldq	$0x8, %xmm1
    00002658: 	paddd	%xmm1, %xmm0
    0000265c: 	movdqa	%xmm0, %xmm1
    00002660: 	psrldq	$0x4, %xmm1
    00002665: 	paddd	%xmm1, %xmm0
    00002669: 	movd	%xmm0, %eax
    0000266d: 	addl	%eax, %edi
    0000266f: 	cmpq	0x18(%rsp), %rdx
    00002674: 	je	.Ltmp2440 # Offset: 9844
    00002676: 	movq	%rdx, %rax
    00002679: 	jmp	.Ltmp2441 # Offset: 9849
.Ltmp2431:
    0000267b: 	xorl	%r8d, %r8d
    0000267e: 	jmp	.Ltmp2442 # Offset: 9854
.Ltmp2440:
    00002683: 	movq	%r14, %rsi
    00002686: 	callq	_Z9check_sumIiEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 9862
    0000268b: 	movq	0x120(%rsp), %rdi
    00002693: 	cmpq	0x8(%rsp), %rdi
    00002698: 	je	.Ltmp2443 # Offset: 9880
    0000269a: 	movq	0x130(%rsp), %rax
    000026a2: 	leaq	0x1(%rax), %rsi
    000026a6: 	callq	_ZdlPvm@PLT # Offset: 9894
.Ltmp2443:
    000026ab: 	movq	0x20(%rsp), %rsi
    000026b0: 	leaq	DATAat0x2d808(%rip), %rdx
    000026b7: 	movq	%r14, %rdi
    000026ba: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 9914
    000026bf: 	callq	clock@PLT # Offset: 9919
    000026c4: 	movq	iterations(%rip), %rbp
    000026cb: 	movq	%rax, start_time(%rip)
    000026d2: 	testq	%rbp, %rbp
    000026d5: 	je	.Ltmp2444 # Offset: 9941
    000026d7: 	xorl	%ebx, %ebx
.Ltmp2445:
    000026d9: 	movl	$0x3a980, %edx
    000026de: 	xorl	%esi, %esi
    000026e0: 	movq	%r15, %rdi
    000026e3: 	addq	$0x1, %rbx
    000026e7: 	callq	memset@PLT # Offset: 9959
    000026ec: 	movq	0x10(%rsp), %rdi
    000026f1: 	movq	%r15, %rdx
    000026f4: 	movq	%r13, %rsi
    000026f7: 	movl	$0xc8, %r8d
    000026fd: 	movl	$0x12c, %ecx
    00002702: 	callq	"_ZN28matmul_JIK_blocked_unrolled1IiEclEPKiS2_Pimm.isra.0/1" # Offset: 9986
    00002707: 	cmpq	%rbp, %rbx
    0000270a: 	jne	.Ltmp2445 # Offset: 9994
.Ltmp2444:
    0000270c: 	movq	%r14, %rdi
    0000270f: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 9999
    00002714: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000271b: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00002722: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00002729: 	je	.Ltmp2446 # Offset: 10025
.Ltmp2520:
    0000272f: 	movq	-0x20(%rax), %rbp
    00002733: 	callq	clock@PLT # Offset: 10035
    00002738: 	pxor	%xmm0, %xmm0
    0000273c: 	movq	%rax, end_time(%rip)
    00002743: 	movq	%rbp, %rdi
    00002746: 	subq	start_time(%rip), %rax
    0000274d: 	cvtsi2sd	%rax, %xmm0
    00002752: 	divsd	DATAat0x2da00(%rip), %xmm0
    0000275a: 	callq	_Z13record_resultdPKc # Offset: 10074
    0000275f: 	movq	%r15, %rax
    00002762: 	xorl	%edi, %edi
.Ltmp2449:
    00002764: 	pxor	%xmm0, %xmm0
    00002768: 	leaq	0x320(%rax), %rdx
.Ltmp2447:
    0000276f: 	movdqu	(%rax), %xmm5
    00002773: 	addq	$0x10, %rax
    00002777: 	paddd	%xmm5, %xmm0
    0000277b: 	cmpq	%rax, %rdx
    0000277e: 	jne	.Ltmp2447 # Offset: 10110
    00002780: 	movdqa	%xmm0, %xmm1
    00002784: 	psrldq	$0x8, %xmm1
    00002789: 	paddd	%xmm1, %xmm0
    0000278d: 	movdqa	%xmm0, %xmm1
    00002791: 	psrldq	$0x4, %xmm1
    00002796: 	paddd	%xmm1, %xmm0
    0000279a: 	movd	%xmm0, %eax
    0000279e: 	addl	%eax, %edi
    000027a0: 	cmpq	0x18(%rsp), %rdx
    000027a5: 	je	.Ltmp2448 # Offset: 10149
    000027a7: 	movq	%rdx, %rax
    000027aa: 	jmp	.Ltmp2449 # Offset: 10154
.Ltmp2448:
    000027ac: 	movq	%r14, %rsi
    000027af: 	callq	_Z9check_sumIiEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 10159
    000027b4: 	movq	0x120(%rsp), %rdi
    000027bc: 	cmpq	0x8(%rsp), %rdi
    000027c1: 	je	.Ltmp2450 # Offset: 10177
    000027c3: 	movq	0x130(%rsp), %rax
    000027cb: 	leaq	0x1(%rax), %rsi
    000027cf: 	callq	_ZdlPvm@PLT # Offset: 10191
.Ltmp2450:
    000027d4: 	movq	0x20(%rsp), %rsi
    000027d9: 	leaq	DATAat0x2d830(%rip), %rdx
    000027e0: 	movq	%r14, %rdi
    000027e3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10211
    000027e8: 	callq	clock@PLT # Offset: 10216
    000027ed: 	movq	iterations(%rip), %rbp
    000027f4: 	movq	%rax, start_time(%rip)
    000027fb: 	testq	%rbp, %rbp
    000027fe: 	je	.Ltmp2451 # Offset: 10238
    00002800: 	xorl	%ebx, %ebx
.Ltmp2452:
    00002802: 	movl	$0x3a980, %edx
    00002807: 	xorl	%esi, %esi
    00002809: 	movq	%r15, %rdi
    0000280c: 	addq	$0x1, %rbx
    00002810: 	callq	memset@PLT # Offset: 10256
    00002815: 	movq	0x10(%rsp), %rdi
    0000281a: 	movq	%r15, %rdx
    0000281d: 	movq	%r13, %rsi
    00002820: 	movl	$0xc8, %r8d
    00002826: 	movl	$0x12c, %ecx
    0000282b: 	callq	"_ZN28matmul_JIK_blocked_unrolled2IiEclEPKiS2_Pimm.isra.0/1" # Offset: 10283
    00002830: 	cmpq	%rbp, %rbx
    00002833: 	jne	.Ltmp2452 # Offset: 10291
.Ltmp2451:
    00002835: 	movq	%r14, %rdi
    00002838: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 10296
    0000283d: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002844: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    0000284b: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00002852: 	je	.Ltmp2453 # Offset: 10322
.Ltmp2519:
    00002858: 	movq	-0x20(%rax), %rbp
    0000285c: 	callq	clock@PLT # Offset: 10332
    00002861: 	pxor	%xmm0, %xmm0
    00002865: 	movq	%rax, end_time(%rip)
    0000286c: 	movq	%rbp, %rdi
    0000286f: 	subq	start_time(%rip), %rax
    00002876: 	cvtsi2sd	%rax, %xmm0
    0000287b: 	divsd	DATAat0x2da00(%rip), %xmm0
    00002883: 	callq	_Z13record_resultdPKc # Offset: 10371
    00002888: 	movq	%r15, %rax
    0000288b: 	xorl	%edi, %edi
.Ltmp2456:
    0000288d: 	pxor	%xmm0, %xmm0
    00002891: 	leaq	0x320(%rax), %rdx
.Ltmp2454:
    00002898: 	movdqu	(%rax), %xmm6
    0000289c: 	addq	$0x10, %rax
    000028a0: 	paddd	%xmm6, %xmm0
    000028a4: 	cmpq	%rax, %rdx
    000028a7: 	jne	.Ltmp2454 # Offset: 10407
    000028a9: 	movdqa	%xmm0, %xmm1
    000028ad: 	psrldq	$0x8, %xmm1
    000028b2: 	paddd	%xmm1, %xmm0
    000028b6: 	movdqa	%xmm0, %xmm1
    000028ba: 	psrldq	$0x4, %xmm1
    000028bf: 	paddd	%xmm1, %xmm0
    000028c3: 	movd	%xmm0, %eax
    000028c7: 	addl	%eax, %edi
    000028c9: 	cmpq	%rdx, 0x18(%rsp)
    000028ce: 	je	.Ltmp2455 # Offset: 10446
    000028d0: 	movq	%rdx, %rax
    000028d3: 	jmp	.Ltmp2456 # Offset: 10451
.Ltmp2455:
    000028d5: 	movq	%r14, %rsi
    000028d8: 	callq	_Z9check_sumIiEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 10456
    000028dd: 	movq	0x120(%rsp), %rdi
    000028e5: 	cmpq	0x8(%rsp), %rdi
    000028ea: 	je	.Ltmp2457 # Offset: 10474
    000028ec: 	movq	0x130(%rsp), %rax
    000028f4: 	leaq	0x1(%rax), %rsi
    000028f8: 	callq	_ZdlPvm@PLT # Offset: 10488
.Ltmp2457:
    000028fd: 	movq	0x20(%rsp), %rsi
    00002902: 	leaq	DATAat0x2d858(%rip), %rdx
    00002909: 	movq	%r14, %rdi
    0000290c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10508
    00002911: 	callq	clock@PLT # Offset: 10513
    00002916: 	movq	iterations(%rip), %rbp
    0000291d: 	movq	%rax, start_time(%rip)
    00002924: 	testq	%rbp, %rbp
    00002927: 	je	.Ltmp2458 # Offset: 10535
    00002929: 	xorl	%ebx, %ebx
.Ltmp2459:
    0000292b: 	movl	$0x3a980, %edx
    00002930: 	xorl	%esi, %esi
    00002932: 	movq	%r15, %rdi
    00002935: 	addq	$0x1, %rbx
    00002939: 	callq	memset@PLT # Offset: 10553
    0000293e: 	movq	0x10(%rsp), %rdi
    00002943: 	movq	%r15, %rdx
    00002946: 	movq	%r13, %rsi
    00002949: 	movl	$0xc8, %r8d
    0000294f: 	movl	$0x12c, %ecx
    00002954: 	callq	"_ZN28matmul_JIK_blocked_unrolled3IiEclEPKiS2_Pimm.isra.0/1" # Offset: 10580
    00002959: 	cmpq	%rbp, %rbx
    0000295c: 	jne	.Ltmp2459 # Offset: 10588
.Ltmp2458:
    0000295e: 	movq	%r14, %rdi
    00002961: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 10593
    00002966: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000296d: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00002974: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000297b: 	je	.Ltmp2460 # Offset: 10619
.Ltmp2518:
    00002981: 	movq	-0x20(%rax), %rbp
    00002985: 	callq	clock@PLT # Offset: 10629
    0000298a: 	pxor	%xmm0, %xmm0
    0000298e: 	movq	%rax, end_time(%rip)
    00002995: 	movq	%rbp, %rdi
    00002998: 	subq	start_time(%rip), %rax
    0000299f: 	cvtsi2sd	%rax, %xmm0
    000029a4: 	divsd	DATAat0x2da00(%rip), %xmm0
    000029ac: 	callq	_Z13record_resultdPKc # Offset: 10668
    000029b1: 	xorl	%edi, %edi
    000029b3: 	movq	%r15, %rax
.Ltmp2462:
    000029b6: 	pxor	%xmm0, %xmm0
    000029ba: 	leaq	0x320(%rax), %rdx
.Ltmp2461:
    000029c1: 	movdqu	(%rax), %xmm7
    000029c5: 	addq	$0x10, %rax
    000029c9: 	paddd	%xmm7, %xmm0
    000029cd: 	cmpq	%rdx, %rax
    000029d0: 	jne	.Ltmp2461 # Offset: 10704
    000029d2: 	movdqa	%xmm0, %xmm1
    000029d6: 	psrldq	$0x8, %xmm1
    000029db: 	paddd	%xmm1, %xmm0
    000029df: 	movdqa	%xmm0, %xmm1
    000029e3: 	psrldq	$0x4, %xmm1
    000029e8: 	paddd	%xmm1, %xmm0
    000029ec: 	movd	%xmm0, %edx
    000029f0: 	addl	%edx, %edi
    000029f2: 	cmpq	%rax, 0x18(%rsp)
    000029f7: 	jne	.Ltmp2462 # Offset: 10743
    000029f9: 	movq	%r14, %rsi
    000029fc: 	callq	_Z9check_sumIiEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 10748
    00002a01: 	movq	0x120(%rsp), %rdi
    00002a09: 	cmpq	0x8(%rsp), %rdi
    00002a0e: 	je	.Ltmp2463 # Offset: 10766
    00002a10: 	movq	0x130(%rsp), %rax
    00002a18: 	leaq	0x1(%rax), %rsi
    00002a1c: 	callq	_ZdlPvm@PLT # Offset: 10780
.Ltmp2463:
    00002a21: 	movq	0x20(%rsp), %rsi
    00002a26: 	leaq	DATAat0x2d880(%rip), %rdx
    00002a2d: 	movq	%r14, %rdi
    00002a30: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 10800
    00002a35: 	callq	clock@PLT # Offset: 10805
    00002a3a: 	movq	iterations(%rip), %rbp
    00002a41: 	movq	%rax, start_time(%rip)
    00002a48: 	testq	%rbp, %rbp
    00002a4b: 	je	.Ltmp2464 # Offset: 10827
    00002a4d: 	xorl	%ebx, %ebx
.Ltmp2465:
    00002a4f: 	movl	$0x3a980, %edx
    00002a54: 	xorl	%esi, %esi
    00002a56: 	movq	%r15, %rdi
    00002a59: 	addq	$0x1, %rbx
    00002a5d: 	callq	memset@PLT # Offset: 10845
    00002a62: 	movq	0x10(%rsp), %rdi
    00002a67: 	movq	%r15, %rdx
    00002a6a: 	movq	%r13, %rsi
    00002a6d: 	movl	$0xc8, %r8d
    00002a73: 	movl	$0x12c, %ecx
    00002a78: 	callq	"_ZN28matmul_IJK_blocked_unrolled1IiEclEPKiS2_Pimm.isra.0/1" # Offset: 10872
    00002a7d: 	cmpq	%rbp, %rbx
    00002a80: 	jne	.Ltmp2465 # Offset: 10880
.Ltmp2464:
    00002a82: 	movq	%r14, %rdi
    00002a85: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 10885
    00002a8a: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002a91: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00002a98: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00002a9f: 	je	.Ltmp2466 # Offset: 10911
.Ltmp2517:
    00002aa5: 	movq	-0x20(%rax), %rbp
    00002aa9: 	callq	clock@PLT # Offset: 10921
    00002aae: 	pxor	%xmm0, %xmm0
    00002ab2: 	movq	%rax, end_time(%rip)
    00002ab9: 	movq	%rbp, %rdi
    00002abc: 	subq	start_time(%rip), %rax
    00002ac3: 	cvtsi2sd	%rax, %xmm0
    00002ac8: 	divsd	DATAat0x2da00(%rip), %xmm0
    00002ad0: 	callq	_Z13record_resultdPKc # Offset: 10960
    00002ad5: 	xorl	%edi, %edi
    00002ad7: 	movq	%r15, %rax
.Ltmp2468:
    00002ada: 	pxor	%xmm0, %xmm0
    00002ade: 	leaq	0x320(%rax), %rdx
.Ltmp2467:
    00002ae5: 	movdqu	(%rax), %xmm4
    00002ae9: 	addq	$0x10, %rax
    00002aed: 	paddd	%xmm4, %xmm0
    00002af1: 	cmpq	%rdx, %rax
    00002af4: 	jne	.Ltmp2467 # Offset: 10996
    00002af6: 	movdqa	%xmm0, %xmm1
    00002afa: 	psrldq	$0x8, %xmm1
    00002aff: 	paddd	%xmm1, %xmm0
    00002b03: 	movdqa	%xmm0, %xmm1
    00002b07: 	psrldq	$0x4, %xmm1
    00002b0c: 	paddd	%xmm1, %xmm0
    00002b10: 	movd	%xmm0, %edx
    00002b14: 	addl	%edx, %edi
    00002b16: 	cmpq	%rax, 0x18(%rsp)
    00002b1b: 	jne	.Ltmp2468 # Offset: 11035
    00002b1d: 	movq	%r14, %rsi
    00002b20: 	callq	_Z9check_sumIiEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 11040
    00002b25: 	movq	0x120(%rsp), %rdi
    00002b2d: 	cmpq	0x8(%rsp), %rdi
    00002b32: 	je	.Ltmp2469 # Offset: 11058
    00002b34: 	movq	0x130(%rsp), %rax
    00002b3c: 	leaq	0x1(%rax), %rsi
    00002b40: 	callq	_ZdlPvm@PLT # Offset: 11072
.Ltmp2469:
    00002b45: 	movq	0x20(%rsp), %rsi
    00002b4a: 	leaq	DATAat0x2d8a8(%rip), %rdx
    00002b51: 	movq	%r14, %rdi
    00002b54: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11092
    00002b59: 	callq	clock@PLT # Offset: 11097
    00002b5e: 	movq	iterations(%rip), %rbp
    00002b65: 	movq	%rax, start_time(%rip)
    00002b6c: 	testq	%rbp, %rbp
    00002b6f: 	je	.Ltmp2470 # Offset: 11119
    00002b71: 	xorl	%ebx, %ebx
.Ltmp2471:
    00002b73: 	movl	$0x3a980, %edx
    00002b78: 	xorl	%esi, %esi
    00002b7a: 	movq	%r15, %rdi
    00002b7d: 	addq	$0x1, %rbx
    00002b81: 	callq	memset@PLT # Offset: 11137
    00002b86: 	movq	0x10(%rsp), %rdi
    00002b8b: 	movq	%r15, %rdx
    00002b8e: 	movq	%r13, %rsi
    00002b91: 	movl	$0xc8, %r8d
    00002b97: 	movl	$0x12c, %ecx
    00002b9c: 	callq	"_ZN28matmul_IJK_blocked_unrolled2IiEclEPKiS2_Pimm.isra.0/1" # Offset: 11164
    00002ba1: 	cmpq	%rbp, %rbx
    00002ba4: 	jne	.Ltmp2471 # Offset: 11172
.Ltmp2470:
    00002ba6: 	movq	%r14, %rdi
    00002ba9: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 11177
    00002bae: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002bb5: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00002bbc: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00002bc3: 	je	.Ltmp2472 # Offset: 11203
.Ltmp2516:
    00002bc9: 	movq	-0x20(%rax), %rbp
    00002bcd: 	callq	clock@PLT # Offset: 11213
    00002bd2: 	pxor	%xmm0, %xmm0
    00002bd6: 	movq	%rax, end_time(%rip)
    00002bdd: 	movq	%rbp, %rdi
    00002be0: 	subq	start_time(%rip), %rax
    00002be7: 	cvtsi2sd	%rax, %xmm0
    00002bec: 	divsd	DATAat0x2da00(%rip), %xmm0
    00002bf4: 	callq	_Z13record_resultdPKc # Offset: 11252
    00002bf9: 	xorl	%edi, %edi
    00002bfb: 	movq	%r15, %rax
.Ltmp2474:
    00002bfe: 	pxor	%xmm0, %xmm0
    00002c02: 	leaq	0x320(%rax), %rdx
.Ltmp2473:
    00002c09: 	movdqu	(%rax), %xmm5
    00002c0d: 	addq	$0x10, %rax
    00002c11: 	paddd	%xmm5, %xmm0
    00002c15: 	cmpq	%rdx, %rax
    00002c18: 	jne	.Ltmp2473 # Offset: 11288
    00002c1a: 	movdqa	%xmm0, %xmm1
    00002c1e: 	psrldq	$0x8, %xmm1
    00002c23: 	paddd	%xmm1, %xmm0
    00002c27: 	movdqa	%xmm0, %xmm1
    00002c2b: 	psrldq	$0x4, %xmm1
    00002c30: 	paddd	%xmm1, %xmm0
    00002c34: 	movd	%xmm0, %edx
    00002c38: 	addl	%edx, %edi
    00002c3a: 	cmpq	0x18(%rsp), %rax
    00002c3f: 	jne	.Ltmp2474 # Offset: 11327
    00002c41: 	movq	%r14, %rsi
    00002c44: 	callq	_Z9check_sumIiEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 11332
    00002c49: 	movq	0x120(%rsp), %rdi
    00002c51: 	cmpq	0x8(%rsp), %rdi
    00002c56: 	je	.Ltmp2475 # Offset: 11350
    00002c58: 	movq	0x130(%rsp), %rax
    00002c60: 	leaq	0x1(%rax), %rsi
    00002c64: 	callq	_ZdlPvm@PLT # Offset: 11364
.Ltmp2475:
    00002c69: 	movq	0x20(%rsp), %rsi
    00002c6e: 	leaq	DATAat0x2d8d0(%rip), %rdx
    00002c75: 	movq	%r14, %rdi
    00002c78: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11384
    00002c7d: 	callq	clock@PLT # Offset: 11389
    00002c82: 	movq	iterations(%rip), %rbp
    00002c89: 	movq	%rax, start_time(%rip)
    00002c90: 	testq	%rbp, %rbp
    00002c93: 	je	.Ltmp2476 # Offset: 11411
    00002c95: 	xorl	%ebx, %ebx
.Ltmp2477:
    00002c97: 	movl	$0x3a980, %edx
    00002c9c: 	xorl	%esi, %esi
    00002c9e: 	movq	%r15, %rdi
    00002ca1: 	addq	$0x1, %rbx
    00002ca5: 	callq	memset@PLT # Offset: 11429
    00002caa: 	movq	0x10(%rsp), %rdi
    00002caf: 	movq	%r15, %rdx
    00002cb2: 	movq	%r13, %rsi
    00002cb5: 	movl	$0xc8, %r8d
    00002cbb: 	movl	$0x12c, %ecx
    00002cc0: 	callq	"_ZN28matmul_IJK_blocked_unrolled3IiEclEPKiS2_Pimm.isra.0/1" # Offset: 11456
    00002cc5: 	cmpq	%rbp, %rbx
    00002cc8: 	jne	.Ltmp2477 # Offset: 11464
.Ltmp2476:
    00002cca: 	movq	%r14, %rdi
    00002ccd: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 11469
    00002cd2: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002cd9: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00002ce0: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00002ce7: 	je	.Ltmp2478 # Offset: 11495
.Ltmp2515:
    00002ced: 	movq	-0x20(%rax), %rbp
    00002cf1: 	callq	clock@PLT # Offset: 11505
    00002cf6: 	pxor	%xmm0, %xmm0
    00002cfa: 	movq	%rax, end_time(%rip)
    00002d01: 	movq	%rbp, %rdi
    00002d04: 	subq	start_time(%rip), %rax
    00002d0b: 	cvtsi2sd	%rax, %xmm0
    00002d10: 	divsd	DATAat0x2da00(%rip), %xmm0
    00002d18: 	callq	_Z13record_resultdPKc # Offset: 11544
    00002d1d: 	movq	%r15, %rax
    00002d20: 	xorl	%edi, %edi
.Ltmp2481:
    00002d22: 	pxor	%xmm0, %xmm0
    00002d26: 	leaq	0x320(%rax), %rdx
.Ltmp2479:
    00002d2d: 	movdqu	(%rax), %xmm6
    00002d31: 	addq	$0x10, %rax
    00002d35: 	paddd	%xmm6, %xmm0
    00002d39: 	cmpq	%rax, %rdx
    00002d3c: 	jne	.Ltmp2479 # Offset: 11580
    00002d3e: 	movdqa	%xmm0, %xmm1
    00002d42: 	psrldq	$0x8, %xmm1
    00002d47: 	paddd	%xmm1, %xmm0
    00002d4b: 	movdqa	%xmm0, %xmm1
    00002d4f: 	psrldq	$0x4, %xmm1
    00002d54: 	paddd	%xmm1, %xmm0
    00002d58: 	movd	%xmm0, %eax
    00002d5c: 	addl	%eax, %edi
    00002d5e: 	cmpq	0x18(%rsp), %rdx
    00002d63: 	je	.Ltmp2480 # Offset: 11619
    00002d65: 	movq	%rdx, %rax
    00002d68: 	jmp	.Ltmp2481 # Offset: 11624
.Ltmp2480:
    00002d6a: 	movq	%r14, %rsi
    00002d6d: 	callq	_Z9check_sumIiEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 11629
    00002d72: 	movq	0x120(%rsp), %rdi
    00002d7a: 	cmpq	0x8(%rsp), %rdi
    00002d7f: 	je	.Ltmp2482 # Offset: 11647
    00002d81: 	movq	0x130(%rsp), %rax
    00002d89: 	leaq	0x1(%rax), %rsi
    00002d8d: 	callq	_ZdlPvm@PLT # Offset: 11661
.Ltmp2482:
    00002d92: 	movq	0x20(%rsp), %rsi
    00002d97: 	leaq	DATAat0x2d8f8(%rip), %rdx
    00002d9e: 	movq	%r14, %rdi
    00002da1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 11681
    00002da6: 	callq	clock@PLT # Offset: 11686
    00002dab: 	movq	iterations(%rip), %r12
    00002db2: 	xorl	%ebp, %ebp
    00002db4: 	movq	%rax, start_time(%rip)
    00002dbb: 	testq	%r12, %r12
    00002dbe: 	je	.Ltmp2483 # Offset: 11710
.Ltmp2489:
    00002dc4: 	movl	$0x3a980, %edx
    00002dc9: 	xorl	%esi, %esi
    00002dcb: 	movq	%r15, %rdi
    00002dce: 	callq	memset@PLT # Offset: 11726
    00002dd3: 	movq	%r13, %r9
    00002dd6: 	xorl	%r8d, %r8d
    00002dd9: 	xorl	%edx, %edx
.Ltmp2488:
    00002ddb: 	movl	$0xc8, %eax
    00002de0: 	movq	%rdx, %rcx
    00002de3: 	subq	$-0x80, %rdx
    00002de7: 	cmpq	%rax, %rdx
    00002dea: 	cmovbeq	%rdx, %rax
    00002dee: 	cmpq	%rcx, %rax
    00002df1: 	jbe	.Ltmp2484 # Offset: 11761
    00002df7: 	movq	0x10(%rsp), %rcx
    00002dfc: 	shlq	$0x2, %rax
    00002e00: 	movq	%r8, %r11
    00002e03: 	movq	%r15, %rsi
    00002e06: 	subq	%rax, %r11
    00002e09: 	xorl	%r10d, %r10d
    00002e0c: 	leaq	(%rcx,%rax), %rdi
.Ltmp2487:
    00002e10: 	leaq	(%r11,%rdi), %rcx
    00002e14: 	movq	%r9, %rbx
    00002e17: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2486:
    00002e20: 	movd	(%rcx), %xmm5
    00002e24: 	xorl	%eax, %eax
    00002e26: 	pshufd	$0x0, %xmm5, %xmm2
    00002e2b: 	movdqa	%xmm2, %xmm3
    00002e2f: 	psrlq	$0x20, %xmm3
.Ltmp2485:
    00002e34: 	movdqu	(%rbx,%rax), %xmm0
    00002e39: 	movdqu	(%rbx,%rax), %xmm1
    00002e3e: 	psrlq	$0x20, %xmm0
    00002e43: 	pmuludq	%xmm2, %xmm1
    00002e47: 	pmuludq	%xmm3, %xmm0
    00002e4b: 	pshufd	$0x8, %xmm1, %xmm1
    00002e50: 	pshufd	$0x8, %xmm0, %xmm0
    00002e55: 	punpckldq	%xmm0, %xmm1
    00002e59: 	movdqu	(%rsi,%rax), %xmm0
    00002e5e: 	paddd	%xmm1, %xmm0
    00002e62: 	movups	%xmm0, (%rsi,%rax)
    00002e66: 	addq	$0x10, %rax
    00002e6a: 	cmpq	$0x320, %rax
    00002e70: 	jne	.Ltmp2485 # Offset: 11888
    00002e72: 	addq	$0x4, %rcx
    00002e76: 	addq	$0x320, %rbx
    00002e7d: 	cmpq	%rdi, %rcx
    00002e80: 	jne	.Ltmp2486 # Offset: 11904
    00002e82: 	addq	$0xc8, %r10
    00002e89: 	addq	$0x320, %rdi
    00002e90: 	addq	$0x320, %rsi
    00002e97: 	cmpq	$0xea60, %r10
    00002e9e: 	jne	.Ltmp2487 # Offset: 11934
.Ltmp2484:
    00002ea4: 	addq	$0x19000, %r9
    00002eab: 	addq	$0x200, %r8
    00002eb2: 	cmpq	$0x100, %rdx
    00002eb9: 	jne	.Ltmp2488 # Offset: 11961
    00002ebf: 	addq	$0x1, %rbp
    00002ec3: 	cmpq	%r12, %rbp
    00002ec6: 	jne	.Ltmp2489 # Offset: 11974
.Ltmp2483:
    00002ecc: 	movq	%r14, %rdi
    00002ecf: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 11983
    00002ed4: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002edb: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00002ee2: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00002ee9: 	je	.Ltmp2490 # Offset: 12009
.Ltmp2514:
    00002eef: 	movq	-0x20(%rax), %rbp
    00002ef3: 	callq	clock@PLT # Offset: 12019
    00002ef8: 	pxor	%xmm0, %xmm0
    00002efc: 	movq	%rax, end_time(%rip)
    00002f03: 	movq	%rbp, %rdi
    00002f06: 	subq	start_time(%rip), %rax
    00002f0d: 	cvtsi2sd	%rax, %xmm0
    00002f12: 	divsd	DATAat0x2da00(%rip), %xmm0
    00002f1a: 	callq	_Z13record_resultdPKc # Offset: 12058
    00002f1f: 	movq	%r15, %rax
    00002f22: 	xorl	%edi, %edi
.Ltmp2493:
    00002f24: 	pxor	%xmm0, %xmm0
    00002f28: 	leaq	0x320(%rax), %rdx
.Ltmp2491:
    00002f2f: 	movdqu	(%rax), %xmm7
    00002f33: 	addq	$0x10, %rax
    00002f37: 	paddd	%xmm7, %xmm0
    00002f3b: 	cmpq	%rax, %rdx
    00002f3e: 	jne	.Ltmp2491 # Offset: 12094
    00002f40: 	movdqa	%xmm0, %xmm1
    00002f44: 	psrldq	$0x8, %xmm1
    00002f49: 	paddd	%xmm1, %xmm0
    00002f4d: 	movdqa	%xmm0, %xmm1
    00002f51: 	psrldq	$0x4, %xmm1
    00002f56: 	paddd	%xmm1, %xmm0
    00002f5a: 	movd	%xmm0, %eax
    00002f5e: 	addl	%eax, %edi
    00002f60: 	cmpq	%rdx, 0x18(%rsp)
    00002f65: 	je	.Ltmp2492 # Offset: 12133
    00002f67: 	movq	%rdx, %rax
    00002f6a: 	jmp	.Ltmp2493 # Offset: 12138
.Ltmp2492:
    00002f6c: 	movq	%r14, %rsi
    00002f6f: 	callq	_Z9check_sumIiEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 12143
    00002f74: 	movq	0x120(%rsp), %rdi
    00002f7c: 	cmpq	0x8(%rsp), %rdi
    00002f81: 	je	.Ltmp2494 # Offset: 12161
    00002f83: 	movq	0x130(%rsp), %rax
    00002f8b: 	leaq	0x1(%rax), %rsi
    00002f8f: 	callq	_ZdlPvm@PLT # Offset: 12175
.Ltmp2494:
    00002f94: 	movq	0x20(%rsp), %rsi
    00002f99: 	leaq	DATAat0x2d920(%rip), %rdx
    00002fa0: 	movq	%r14, %rdi
    00002fa3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12195
    00002fa8: 	callq	clock@PLT # Offset: 12200
    00002fad: 	movq	iterations(%rip), %rbp
    00002fb4: 	movq	%rax, start_time(%rip)
    00002fbb: 	testq	%rbp, %rbp
    00002fbe: 	je	.Ltmp2495 # Offset: 12222
    00002fc0: 	xorl	%ebx, %ebx
.Ltmp2496:
    00002fc2: 	movl	$0x3a980, %edx
    00002fc7: 	xorl	%esi, %esi
    00002fc9: 	movq	%r15, %rdi
    00002fcc: 	addq	$0x1, %rbx
    00002fd0: 	callq	memset@PLT # Offset: 12240
    00002fd5: 	movq	0x10(%rsp), %rdi
    00002fda: 	movq	%r15, %rdx
    00002fdd: 	movq	%r13, %rsi
    00002fe0: 	movl	$0xc8, %r8d
    00002fe6: 	movl	$0x12c, %ecx
    00002feb: 	callq	"_ZN28matmul_JKI_blocked_unrolled2IiEclEPKiS2_Pimm.isra.0/1" # Offset: 12267
    00002ff0: 	cmpq	%rbp, %rbx
    00002ff3: 	jne	.Ltmp2496 # Offset: 12275
.Ltmp2495:
    00002ff5: 	movq	%r14, %rdi
    00002ff8: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 12280
    00002ffd: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00003004: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    0000300b: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00003012: 	je	.Ltmp2497 # Offset: 12306
.Ltmp2513:
    00003018: 	movq	-0x20(%rax), %rbp
    0000301c: 	callq	clock@PLT # Offset: 12316
    00003021: 	pxor	%xmm0, %xmm0
    00003025: 	movq	%rax, end_time(%rip)
    0000302c: 	movq	%rbp, %rdi
    0000302f: 	subq	start_time(%rip), %rax
    00003036: 	cvtsi2sd	%rax, %xmm0
    0000303b: 	divsd	DATAat0x2da00(%rip), %xmm0
    00003043: 	callq	_Z13record_resultdPKc # Offset: 12355
    00003048: 	xorl	%edi, %edi
    0000304a: 	movq	%r15, %rax
.Ltmp2499:
    0000304d: 	pxor	%xmm0, %xmm0
    00003051: 	leaq	0x320(%rax), %rdx
.Ltmp2498:
    00003058: 	movdqu	(%rax), %xmm4
    0000305c: 	addq	$0x10, %rax
    00003060: 	paddd	%xmm4, %xmm0
    00003064: 	cmpq	%rdx, %rax
    00003067: 	jne	.Ltmp2498 # Offset: 12391
    00003069: 	movdqa	%xmm0, %xmm1
    0000306d: 	psrldq	$0x8, %xmm1
    00003072: 	paddd	%xmm1, %xmm0
    00003076: 	movdqa	%xmm0, %xmm1
    0000307a: 	psrldq	$0x4, %xmm1
    0000307f: 	paddd	%xmm1, %xmm0
    00003083: 	movd	%xmm0, %edx
    00003087: 	addl	%edx, %edi
    00003089: 	cmpq	%rax, 0x18(%rsp)
    0000308e: 	jne	.Ltmp2499 # Offset: 12430
    00003090: 	movq	%r14, %rsi
    00003093: 	callq	_Z9check_sumIiEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 12435
    00003098: 	movq	0x120(%rsp), %rdi
    000030a0: 	cmpq	0x8(%rsp), %rdi
    000030a5: 	je	.Ltmp2500 # Offset: 12453
    000030a7: 	movq	0x130(%rsp), %rax
    000030af: 	leaq	0x1(%rax), %rsi
    000030b3: 	callq	_ZdlPvm@PLT # Offset: 12467
.Ltmp2500:
    000030b8: 	movq	0x20(%rsp), %rsi
    000030bd: 	leaq	DATAat0x2d948(%rip), %rdx
    000030c4: 	movq	%r14, %rdi
    000030c7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12487
    000030cc: 	callq	clock@PLT # Offset: 12492
    000030d1: 	movq	iterations(%rip), %rbp
    000030d8: 	movq	%rax, start_time(%rip)
    000030df: 	testq	%rbp, %rbp
    000030e2: 	je	.Ltmp2501 # Offset: 12514
    000030e4: 	xorl	%ebx, %ebx
.Ltmp2502:
    000030e6: 	movl	$0x3a980, %edx
    000030eb: 	xorl	%esi, %esi
    000030ed: 	movq	%r15, %rdi
    000030f0: 	addq	$0x1, %rbx
    000030f4: 	callq	memset@PLT # Offset: 12532
    000030f9: 	movq	0x10(%rsp), %rdi
    000030fe: 	movq	%r15, %rdx
    00003101: 	movq	%r13, %rsi
    00003104: 	movl	$0xc8, %r8d
    0000310a: 	movl	$0x12c, %ecx
    0000310f: 	callq	"_ZN28matmul_JKI_blocked_unrolled3IiEclEPKiS2_Pimm.isra.0/1" # Offset: 12559
    00003114: 	cmpq	%rbp, %rbx
    00003117: 	jne	.Ltmp2502 # Offset: 12567
.Ltmp2501:
    00003119: 	movq	%r14, %rdi
    0000311c: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 12572
    00003121: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00003128: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    0000312f: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00003136: 	je	.Ltmp2503 # Offset: 12598
.Ltmp2512:
    0000313c: 	movq	-0x20(%rax), %rbp
    00003140: 	callq	clock@PLT # Offset: 12608
    00003145: 	pxor	%xmm0, %xmm0
    00003149: 	movq	%rax, end_time(%rip)
    00003150: 	movq	%rbp, %rdi
    00003153: 	subq	start_time(%rip), %rax
    0000315a: 	cvtsi2sd	%rax, %xmm0
    0000315f: 	divsd	DATAat0x2da00(%rip), %xmm0
    00003167: 	callq	_Z13record_resultdPKc # Offset: 12647
    0000316c: 	movq	0x58(%rsp), %rax
    00003171: 	xorl	%edi, %edi
.Ltmp2506:
    00003173: 	pxor	%xmm0, %xmm0
    00003177: 	leaq	0x320(%rax), %rdx
.Ltmp2504:
    0000317e: 	movdqu	(%rax), %xmm5
    00003182: 	addq	$0x10, %rax
    00003186: 	paddd	%xmm5, %xmm0
    0000318a: 	cmpq	%rdx, %rax
    0000318d: 	jne	.Ltmp2504 # Offset: 12685
    0000318f: 	movdqa	%xmm0, %xmm1
    00003193: 	psrldq	$0x8, %xmm1
    00003198: 	paddd	%xmm1, %xmm0
    0000319c: 	movdqa	%xmm0, %xmm1
    000031a0: 	psrldq	$0x4, %xmm1
    000031a5: 	paddd	%xmm1, %xmm0
    000031a9: 	movd	%xmm0, %edx
    000031ad: 	addl	%edx, %edi
    000031af: 	cmpq	0x18(%rsp), %rax
    000031b4: 	je	.Ltmp2505 # Offset: 12724
    000031b6: 	movq	%rax, 0x58(%rsp)
    000031bb: 	jmp	.Ltmp2506 # Offset: 12731
.Ltmp2505:
    000031bd: 	movq	%r14, %rsi
    000031c0: 	callq	_Z9check_sumIiEvT_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 12736
    000031c5: 	movq	0x120(%rsp), %rdi
    000031cd: 	cmpq	0x8(%rsp), %rdi
    000031d2: 	je	.Ltmp2507 # Offset: 12754
    000031d4: 	movq	0x130(%rsp), %rax
    000031dc: 	leaq	0x1(%rax), %rsi
    000031e0: 	callq	_ZdlPvm@PLT # Offset: 12768
.Ltmp2507:
    000031e5: 	movq	0x20(%rsp), %rsi
    000031ea: 	leaq	DATAat0x2d7f4(%rip), %rdx
    000031f1: 	movq	%r14, %rdi
    000031f4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 12788
    000031f9: 	movl	iterations(%rip), %edx
    000031ff: 	xorl	%r8d, %r8d
    00003202: 	xorl	%ecx, %ecx
    00003204: 	movl	$0x16e3600, %esi
    00003209: 	movq	0x120(%rsp), %rdi
    00003211: 	callq	_Z9summarizePKciiii # Offset: 12817
    00003216: 	movq	0x120(%rsp), %rdi
    0000321e: 	cmpq	0x8(%rsp), %rdi
    00003223: 	je	.Ltmp2508 # Offset: 12835
    00003225: 	movq	0x130(%rsp), %rax
    0000322d: 	leaq	0x1(%rax), %rsi
    00003231: 	callq	_ZdlPvm@PLT # Offset: 12849
.Ltmp2508:
    00003236: 	movl	$0x4, %esi
    0000323b: 	movq	%r15, %rdi
    0000323e: 	callq	_ZdlPvm@PLT # Offset: 12862
    00003243: 	movl	$0x4, %esi
    00003248: 	movq	%r13, %rdi
    0000324b: 	callq	_ZdlPvm@PLT # Offset: 12875
    00003250: 	movq	0x10(%rsp), %rdi
    00003255: 	movl	$0x4, %esi
    0000325a: 	callq	_ZdlPvm@PLT # Offset: 12890
    0000325f: 	movq	0x100(%rsp), %rdi
    00003267: 	leaq	0x110(%rsp), %rax
    0000326f: 	cmpq	%rax, %rdi
    00003272: 	je	.Ltmp2509 # Offset: 12914
    00003274: 	movq	0x110(%rsp), %rax
    0000327c: 	leaq	0x1(%rax), %rsi
    00003280: 	callq	_ZdlPvm@PLT # Offset: 12928
.Ltmp2509:
    00003285: 	movq	0x148(%rsp), %rax
    0000328d: 	subq	%fs:0x28, %rax
    00003296: 	jne	.Ltmp2510 # Offset: 12950
    0000329c: 	addq	$0x158, %rsp
    000032a3: 	popq	%rbx
    000032a4: 	popq	%rbp
    000032a5: 	popq	%r12
    000032a7: 	popq	%r13
    000032a9: 	popq	%r14
    000032ab: 	popq	%r15
    000032ad: 	retq # Offset: 12973
.Ltmp2264:
    000032ae: 	movq	-0x8(%rdx), %rax
    000032b2: 	addq	$0x200, %rax
    000032b8: 	jmp	.Ltmp2511 # Offset: 12984
.Ltmp2503:
    000032bd: 	movq	-0x8(%rdx), %rax
    000032c1: 	addq	$0x200, %rax
    000032c7: 	jmp	.Ltmp2512 # Offset: 12999
.Ltmp2497:
    000032cc: 	movq	-0x8(%rdx), %rax
    000032d0: 	addq	$0x200, %rax
    000032d6: 	jmp	.Ltmp2513 # Offset: 13014
.Ltmp2490:
    000032db: 	movq	-0x8(%rdx), %rax
    000032df: 	addq	$0x200, %rax
    000032e5: 	jmp	.Ltmp2514 # Offset: 13029
.Ltmp2478:
    000032ea: 	movq	-0x8(%rdx), %rax
    000032ee: 	addq	$0x200, %rax
    000032f4: 	jmp	.Ltmp2515 # Offset: 13044
.Ltmp2472:
    000032f9: 	movq	-0x8(%rdx), %rax
    000032fd: 	addq	$0x200, %rax
    00003303: 	jmp	.Ltmp2516 # Offset: 13059
.Ltmp2466:
    00003308: 	movq	-0x8(%rdx), %rax
    0000330c: 	addq	$0x200, %rax
    00003312: 	jmp	.Ltmp2517 # Offset: 13074
.Ltmp2460:
    00003317: 	movq	-0x8(%rdx), %rax
    0000331b: 	addq	$0x200, %rax
    00003321: 	jmp	.Ltmp2518 # Offset: 13089
.Ltmp2453:
    00003326: 	movq	-0x8(%rdx), %rax
    0000332a: 	addq	$0x200, %rax
    00003330: 	jmp	.Ltmp2519 # Offset: 13104
.Ltmp2446:
    00003335: 	movq	-0x8(%rdx), %rax
    00003339: 	addq	$0x200, %rax
    0000333f: 	jmp	.Ltmp2520 # Offset: 13119
.Ltmp2438:
    00003344: 	movq	-0x8(%rdx), %rax
    00003348: 	addq	$0x200, %rax
    0000334e: 	jmp	.Ltmp2521 # Offset: 13134
.Ltmp2422:
    00003353: 	movq	-0x8(%rdx), %rax
    00003357: 	addq	$0x200, %rax
    0000335d: 	jmp	.Ltmp2522 # Offset: 13149
.Ltmp2408:
    00003362: 	movq	-0x8(%rdx), %rax
    00003366: 	addq	$0x200, %rax
    0000336c: 	jmp	.Ltmp2523 # Offset: 13164
.Ltmp2393:
    00003371: 	movq	-0x8(%rdx), %rax
    00003375: 	addq	$0x200, %rax
    0000337b: 	jmp	.Ltmp2524 # Offset: 13179
.Ltmp2386:
    00003380: 	movq	-0x8(%rdx), %rax
    00003384: 	addq	$0x200, %rax
    0000338a: 	jmp	.Ltmp2525 # Offset: 13194
.Ltmp2379:
    0000338f: 	movq	-0x8(%rdx), %rax
    00003393: 	addq	$0x200, %rax
    00003399: 	jmp	.Ltmp2526 # Offset: 13209
.Ltmp2368:
    0000339e: 	movq	-0x8(%rdx), %rax
    000033a2: 	addq	$0x200, %rax
    000033a8: 	jmp	.Ltmp2527 # Offset: 13224
.Ltmp2358:
    000033ad: 	movq	-0x8(%rdx), %rax
    000033b1: 	addq	$0x200, %rax
    000033b7: 	jmp	.Ltmp2528 # Offset: 13239
.Ltmp2348:
    000033bc: 	movq	-0x8(%rdx), %rax
    000033c0: 	addq	$0x200, %rax
    000033c6: 	jmp	.Ltmp2529 # Offset: 13254
.Ltmp2337:
    000033cb: 	movq	-0x8(%rdx), %rax
    000033cf: 	addq	$0x200, %rax
    000033d5: 	jmp	.Ltmp2530 # Offset: 13269
.Ltmp2328:
    000033da: 	movq	-0x8(%rdx), %rax
    000033de: 	addq	$0x200, %rax
    000033e4: 	jmp	.Ltmp2531 # Offset: 13284
.Ltmp2318:
    000033e9: 	movq	-0x8(%rdx), %rax
    000033ed: 	addq	$0x200, %rax
    000033f3: 	jmp	.Ltmp2532 # Offset: 13299
.Ltmp2306:
    000033f8: 	movq	-0x8(%rdx), %rax
    000033fc: 	addq	$0x200, %rax
    00003402: 	jmp	.Ltmp2533 # Offset: 13314
.Ltmp2296:
    00003407: 	movq	-0x8(%rdx), %rax
    0000340b: 	addq	$0x200, %rax
    00003411: 	jmp	.Ltmp2534 # Offset: 13329
.Ltmp2286:
    00003416: 	movq	-0x8(%rdx), %rax
    0000341a: 	addq	$0x200, %rax
    00003420: 	jmp	.Ltmp2535 # Offset: 13344
.Ltmp2274:
    00003425: 	movq	-0x8(%rdx), %rax
    00003429: 	addq	$0x200, %rax
    0000342f: 	jmp	.Ltmp2536 # Offset: 13359
.Ltmp2510:
    00003434: 	callq	__stack_chk_fail@PLT # Offset: 13364
    00003439: 	endbr64
.Ltmp2538:
    0000343d: 	movq	%rax, %rbx
    00003440: 	jmp	.Ltmp2537 # Offset: 13376
    00003442: 	endbr64
    00003446: 	jmp	.Ltmp2538 # Offset: 13382
    00003448: 	endbr64
    0000344c: 	jmp	.Ltmp2538 # Offset: 13388
    0000344e: 	endbr64
    00003452: 	jmp	.Ltmp2538 # Offset: 13394
    00003454: 	endbr64
    00003458: 	jmp	.Ltmp2538 # Offset: 13400
    0000345a: 	endbr64
    0000345e: 	jmp	.Ltmp2538 # Offset: 13406
    00003460: 	endbr64
    00003464: 	jmp	.Ltmp2538 # Offset: 13412
.Ltmp2537:
    00003466: 	movq	0x120(%rsp), %rdi
    0000346e: 	cmpq	0x8(%rsp), %rdi
    00003473: 	je	.Ltmp2539 # Offset: 13427
.Ltmp2543:
    00003475: 	movq	0x130(%rsp), %rax
    0000347d: 	leaq	0x1(%rax), %rsi
    00003481: 	callq	_ZdlPvm@PLT # Offset: 13441
.Ltmp2539:
    00003486: 	movl	$0x4, %esi
    0000348b: 	movq	%r15, %rdi
    0000348e: 	movq	%rbx, %rbp
    00003491: 	callq	_ZdlPvm@PLT # Offset: 13457
.Ltmp2541:
    00003496: 	movl	$0x4, %esi
    0000349b: 	movq	%r13, %rdi
    0000349e: 	callq	_ZdlPvm@PLT # Offset: 13470
.Ltmp2544:
    000034a3: 	movq	0x10(%rsp), %rdi
    000034a8: 	movl	$0x4, %esi
    000034ad: 	callq	_ZdlPvm@PLT # Offset: 13485
.Ltmp2545:
    000034b2: 	movq	0x100(%rsp), %rdi
    000034ba: 	leaq	0x110(%rsp), %rax
    000034c2: 	cmpq	%rax, %rdi
    000034c5: 	je	.Ltmp2540 # Offset: 13509
    000034c7: 	movq	0x110(%rsp), %rax
    000034cf: 	leaq	0x1(%rax), %rsi
    000034d3: 	callq	_ZdlPvm@PLT # Offset: 13523
.Ltmp2540:
    000034d8: 	movq	%rbp, %rdi
    000034db: 	callq	_Unwind_Resume@PLT # Offset: 13531
    000034e0: 	endbr64
    000034e4: 	jmp	.Ltmp2538 # Offset: 13540
    000034e9: 	endbr64
    000034ed: 	jmp	.Ltmp2538 # Offset: 13549
    000034f2: 	endbr64
    000034f6: 	jmp	.Ltmp2538 # Offset: 13558
    000034fb: 	endbr64
    000034ff: 	jmp	.Ltmp2538 # Offset: 13567
    00003504: 	endbr64
    00003508: 	jmp	.Ltmp2538 # Offset: 13576
    0000350d: 	endbr64
    00003511: 	jmp	.Ltmp2538 # Offset: 13585
    00003516: 	endbr64
    0000351a: 	jmp	.Ltmp2538 # Offset: 13594
    0000351f: 	endbr64
    00003523: 	jmp	.Ltmp2538 # Offset: 13603
    00003528: 	endbr64
    0000352c: 	movq	%rax, %rbx
    0000352f: 	jmp	.Ltmp2539 # Offset: 13615
    00003534: 	endbr64
    00003538: 	movq	%rax, %rbp
    0000353b: 	jmp	.Ltmp2541 # Offset: 13627
    00003540: 	endbr64
    00003544: 	jmp	.Ltmp2538 # Offset: 13636
    00003549: 	endbr64
    0000354d: 	jmp	.Ltmp2538 # Offset: 13645
    00003552: 	endbr64
    00003556: 	jmp	.Ltmp2538 # Offset: 13654
    0000355b: 	endbr64
    0000355f: 	jmp	.Ltmp2538 # Offset: 13663
    00003564: 	endbr64
    00003568: 	jmp	.Ltmp2538 # Offset: 13672
    0000356d: 	endbr64
    00003571: 	jmp	.Ltmp2538 # Offset: 13681
    00003576: 	endbr64
    0000357a: 	jmp	.Ltmp2538 # Offset: 13690
    0000357f: 	endbr64
    00003583: 	jmp	.Ltmp2538 # Offset: 13699
    00003588: 	endbr64
    0000358c: 	movq	%rax, %rbx
    0000358f: 	jmp	.Ltmp2542 # Offset: 13711
    00003591: 	endbr64
    00003595: 	jmp	.Ltmp2538 # Offset: 13717
.Ltmp2542:
    0000359a: 	movq	0x120(%rsp), %rdi
    000035a2: 	leaq	0x130(%rsp), %rax
    000035aa: 	cmpq	%rax, %rdi
    000035ad: 	jne	.Ltmp2543 # Offset: 13741
    000035b3: 	jmp	.Ltmp2539 # Offset: 13747
    000035b8: 	endbr64
    000035bc: 	jmp	.Ltmp2538 # Offset: 13756
    000035c1: 	endbr64
    000035c5: 	jmp	.Ltmp2538 # Offset: 13765
    000035ca: 	endbr64
    000035ce: 	movq	%rax, %rbp
    000035d1: 	jmp	.Ltmp2544 # Offset: 13777
    000035d6: 	endbr64
    000035da: 	movq	%rax, %rbp
    000035dd: 	jmp	.Ltmp2545 # Offset: 13789
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIiEvv"

Binary Function "_fini" after disassembly {
  Number      : 83
  State       : disassembled
  Address     : 0x2cd64
  Size        : 0xd
  MaxSize     : 0xd
  Offset      : 0x2cd64
  Section     : .fini
  Orc Section : .local.text._fini
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB082:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	addq	$0x8, %rsp
    0000000c: 	retq # Offset: 12
DWARF CFI Instructions:
    <empty>
End of Function "_fini"

BOLT-INFO: 0 out of 84 functions in the binary (0.0%) have non-empty execution profile
BOLT-INFO: 1847 instructions were shortened
BOLT-INFO: removed 211 empty blocks
BOLT-INFO: patched build-id (flipped last bit)
BOLT: 79 out of 113 functions were overwritten.
BOLT-INFO: rewriting .eh_frame_hdr in-place
BOLT-INFO: setting _end to 0x202b64
