BOLT-INFO: shared object or position-independent executable detected
BOLT-INFO: Target architecture: x86_64
BOLT-INFO: BOLT version: <unknown>
BOLT-INFO: first alloc address is 0x0
BOLT-INFO: creating new program header table at address 0x200000, offset 0x200000
BOLT-INFO: enabling lite mode
BOLT-WARNING: ignoring symbol __bss_start at 0x3e028, which lies outside .bss
BOLT-WARNING: split function detected on input : _Z13record_resultdmmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.cold
Binary Function "_init" after disassembly {
  Number      : 1
  State       : disassembled
  Address     : 0x1000
  Size        : 0x1b
  MaxSize     : 0x1b
  Offset      : 0x1000
  Section     : .init
  Orc Section : .local.text._init
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB00:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	movq	DATAat0x3dff0(%rip), %rax
    0000000f: 	testq	%rax, %rax
    00000012: 	je	.Ltmp0 # Offset: 18
    00000014: 	callq	*%rax # Offset: 20
.Ltmp0:
    00000016: 	addq	$0x8, %rsp
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_init"

Binary Function "main" after disassembly {
  Number      : 4
  State       : disassembled
  Address     : 0x1420
  Size        : 0x9d
  MaxSize     : 0xa0
  Offset      : 0x1420
  Section     : .text
  Orc Section : .local.text.main
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB03:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	movq	%rsi, %r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x8, %rsp
    00000011: 	cmpl	$0x1, %edi
    00000014: 	jg	.Ltmp3 # Offset: 20
    00000016: 	jne	.Ltmp4 # Offset: 22
    00000018: 	movq	(%rsi), %rdx
    0000001b: 	movl	$0x1, %edi
    00000020: 	xorl	%eax, %eax
    00000022: 	leaq	DATAat0x34147(%rip), %rsi
    00000029: 	callq	__printf_chk@PLT # Offset: 41
.Ltmp4:
    0000002e: 	leaq	DATAat0x34145(%rip), %rsi
    00000035: 	movl	$0x1, %edi
    0000003a: 	xorl	%eax, %eax
    0000003c: 	callq	__printf_chk@PLT # Offset: 60
    00000041: 	callq	_Z11TestOneTypeIaEvv # Offset: 65
    00000046: 	callq	_Z11TestOneTypeItEvv # Offset: 70
    0000004b: 	callq	_Z11TestOneTypeIiEvv # Offset: 75
    00000050: 	callq	_Z11TestOneTypeIfEvv # Offset: 80
    00000055: 	addq	$0x8, %rsp
    00000059: 	xorl	%eax, %eax
    0000005b: 	popq	%rbx
    0000005c: 	popq	%rbp
    0000005d: 	popq	%r12
    0000005f: 	popq	%r13
    00000061: 	retq # Offset: 97
.Ltmp3:
    00000062: 	movl	%edi, %ebp
    00000064: 	movq	0x8(%rsi), %rdi
    00000068: 	xorl	%esi, %esi
    0000006a: 	xorl	%ebx, %ebx
    0000006c: 	leaq	DATAat0x34147(%rip), %r13
    00000073: 	callq	strtod@PLT # Offset: 115
    00000078: 	movsd	%xmm0, gMinimumTimeTarget(%rip)
.Ltmp5:
    00000080: 	movq	(%r12,%rbx,8), %rdx
    00000084: 	movq	%r13, %rsi
    00000087: 	movl	$0x1, %edi
    0000008c: 	xorl	%eax, %eax
    0000008e: 	addq	$0x1, %rbx
    00000092: 	callq	__printf_chk@PLT # Offset: 146
    00000097: 	cmpl	%ebx, %ebp
    00000099: 	jg	.Ltmp5 # Offset: 153
    0000009b: 	jmp	.Ltmp4 # Offset: 155
DWARF CFI Instructions:
    <empty>
End of Function "main"

Binary Function "_start" after disassembly {
  Number      : 6
  State       : disassembled
  Address     : 0x15a0
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x15a0
  Section     : .text
  Orc Section : .local.text._start
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB05:
    00000000: 	endbr64
    00000004: 	xorl	%ebp, %ebp
    00000006: 	movq	%rdx, %r9
    00000009: 	popq	%rsi
    0000000a: 	movq	%rsp, %rdx
    0000000d: 	andq	$-0x10, %rsp
    00000011: 	pushq	%rax
    00000012: 	pushq	%rsp
    00000013: 	xorl	%r8d, %r8d
    00000016: 	xorl	%ecx, %ecx
    00000018: 	leaq	main(%rip), %rdi
    0000001f: 	callq	*DATAat0x3dfe0(%rip) # Offset: 31
    00000025: 	hlt
DWARF CFI Instructions:
    <empty>
End of Function "_start"

Binary Function "deregister_tm_clones/1(*2)" after disassembly {
  All names   : deregister_tm_clones/1
                deregister_tm_clones/crtstuff.c/1
  Number      : 7
  State       : disassembled
  Address     : 0x15d0
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x15d0
  Section     : .text
  Orc Section : .local.text.deregister_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB06:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rax
    0000000e: 	cmpq	%rdi, %rax
    00000011: 	je	.Ltmp6 # Offset: 17
    00000013: 	movq	DATAat0x3dfe8(%rip), %rax
    0000001a: 	testq	%rax, %rax
    0000001d: 	je	.Ltmp6 # Offset: 29
    0000001f: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 31
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp6:
    00000028: 	retq # Offset: 40
    00000029: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "deregister_tm_clones/1(*2)"

Binary Function "register_tm_clones/1(*2)" after disassembly {
  All names   : register_tm_clones/1
                register_tm_clones/crtstuff.c/1
  Number      : 8
  State       : disassembled
  Address     : 0x1600
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x1600
  Section     : .text
  Orc Section : .local.text.register_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB07:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rsi
    0000000e: 	subq	%rdi, %rsi
    00000011: 	movq	%rsi, %rax
    00000014: 	shrq	$0x3f, %rsi
    00000018: 	sarq	$0x3, %rax
    0000001c: 	addq	%rax, %rsi
    0000001f: 	sarq	%rsi
    00000022: 	je	.Ltmp7 # Offset: 34
    00000024: 	movq	DATAat0x3dff8(%rip), %rax
    0000002b: 	testq	%rax, %rax
    0000002e: 	je	.Ltmp7 # Offset: 46
    00000030: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 48
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp7:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "register_tm_clones/1(*2)"

Binary Function "__do_global_dtors_aux/1(*2)" after disassembly {
  All names   : __do_global_dtors_aux/1
                __do_global_dtors_aux/crtstuff.c/1
  Number      : 9
  State       : disassembled
  Address     : 0x1640
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x1640
  Section     : .text
  Orc Section : .local.text.__do_global_dtors_aux/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB08:
    00000000: 	endbr64
    00000004: 	cmpb	$0x0, "completed.0/1"(%rip)
    0000000b: 	jne	.Ltmp8 # Offset: 11
    0000000d: 	pushq	%rbp
    0000000e: 	cmpq	$0x0, __cxa_finalize@GOT(%rip)
    00000016: 	movq	%rsp, %rbp
    00000019: 	je	.Ltmp9 # Offset: 25
    0000001b: 	movq	__dso_handle(%rip), %rdi
    00000022: 	callq	__cxa_finalize@PLT # Offset: 34
.Ltmp9:
    00000027: 	callq	"deregister_tm_clones/1" # Offset: 39
    0000002c: 	movb	$0x1, "completed.0/1"(%rip)
    00000033: 	popq	%rbp
    00000034: 	retq # Offset: 52
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp8:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "__do_global_dtors_aux/1(*2)"

Binary Function "frame_dummy/1(*2)" after disassembly {
  All names   : frame_dummy/1
                frame_dummy/crtstuff.c/1
  Number      : 10
  State       : disassembled
  Address     : 0x1680
  Size        : 0x10
  MaxSize     : 0x10
  Offset      : 0x1680
  Section     : .text
  Orc Section : .local.text.frame_dummy/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB09:
    00000000: 	endbr64
    00000004: 	jmp	"register_tm_clones/1" # TAILCALL  # Offset: 4
    00000009: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "frame_dummy/1(*2)"

Binary Function "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1(*2)" after disassembly {
  All names   : _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1
                _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/binary_search.cpp/1
  Number      : 11
  State       : disassembled
  Address     : 0x1690
  Size        : 0xd3
  MaxSize     : 0xe0
  Offset      : 0x1690
  Section     : .text
  Orc Section : .local.text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB010:
    00000000: 	pushq	%r13
    00000002: 	pushq	%r12
    00000004: 	leaq	0x10(%rdi), %r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	subq	$0x18, %rsp
    0000000e: 	movq	%fs:0x28, %rax
    00000017: 	movq	%rax, 0x8(%rsp)
    0000001c: 	xorl	%eax, %eax
    0000001e: 	movq	%r12, (%rdi)
    00000021: 	testq	%rsi, %rsi
    00000024: 	je	.Ltmp10 # Offset: 36
    0000002a: 	movq	%rdi, %rbx
    0000002d: 	movq	%rsi, %rdi
    00000030: 	movq	%rsi, %rbp
    00000033: 	callq	strlen@PLT # Offset: 51
    00000038: 	movq	%rax, (%rsp)
    0000003c: 	movq	%rax, %r13
    0000003f: 	cmpq	$0xf, %rax
    00000043: 	ja	.Ltmp11 # Offset: 67
    00000045: 	cmpq	$0x1, %rax
    00000049: 	jne	.Ltmp12 # Offset: 73
    0000004b: 	movzbl	(%rbp), %edx
    0000004f: 	movb	%dl, 0x10(%rbx)
.Ltmp14:
    00000052: 	movq	%rax, 0x8(%rbx)
    00000056: 	movb	$0x0, (%r12,%rax)
    0000005b: 	movq	0x8(%rsp), %rax
    00000060: 	subq	%fs:0x28, %rax
    00000069: 	jne	.Ltmp13 # Offset: 105
    0000006b: 	addq	$0x18, %rsp
    0000006f: 	popq	%rbx
    00000070: 	popq	%rbp
    00000071: 	popq	%r12
    00000073: 	popq	%r13
    00000075: 	retq # Offset: 117
    00000076: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp12:
    00000080: 	testq	%rax, %rax
    00000083: 	je	.Ltmp14 # Offset: 131
    00000085: 	jmp	.Ltmp15 # Offset: 133
    00000087: 	nopw	(%rax,%rax) # Size: 9
.Ltmp11:
    00000090: 	movq	%rsp, %rsi
    00000093: 	xorl	%edx, %edx
    00000095: 	movq	%rbx, %rdi
    00000098: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 152
    0000009d: 	movq	%rax, (%rbx)
    000000a0: 	movq	%rax, %r12
    000000a3: 	movq	(%rsp), %rax
    000000a7: 	movq	%rax, 0x10(%rbx)
.Ltmp15:
    000000ab: 	movq	%r12, %rdi
    000000ae: 	movq	%r13, %rdx
    000000b1: 	movq	%rbp, %rsi
    000000b4: 	callq	memcpy@PLT # Offset: 180
    000000b9: 	movq	(%rsp), %rax
    000000bd: 	movq	(%rbx), %r12
    000000c0: 	jmp	.Ltmp14 # Offset: 192
.Ltmp13:
    000000c2: 	callq	__stack_chk_fail@PLT # Offset: 194
.Ltmp10:
    000000c7: 	leaq	DATAat0x34008(%rip), %rdi
    000000ce: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 206
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1(*2)"

Binary Function "_Z11start_timerv" after disassembly {
  Number      : 12
  State       : disassembled
  Address     : 0x1770
  Size        : 0x19
  MaxSize     : 0x20
  Offset      : 0x1770
  Section     : .text
  Orc Section : .local.text._Z11start_timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB011:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	movq	%rax, start_time(%rip)
    00000014: 	addq	$0x8, %rsp
    00000018: 	retq # Offset: 24
DWARF CFI Instructions:
    <empty>
End of Function "_Z11start_timerv"

Binary Function "_Z5timerv" after disassembly {
  Number      : 13
  State       : disassembled
  Address     : 0x1790
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x1790
  Section     : .text
  Orc Section : .local.text._Z5timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB012:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	pxor	%xmm0, %xmm0
    00000011: 	movq	%rax, end_time(%rip)
    00000018: 	subq	start_time(%rip), %rax
    0000001f: 	cvtsi2sd	%rax, %xmm0
    00000024: 	divsd	DATAat0x34410(%rip), %xmm0
    0000002c: 	addq	$0x8, %rsp
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z5timerv"

Binary Function "_ZN9benchmark6scrandEm" after disassembly {
  Number      : 14
  State       : disassembled
  Address     : 0x17d0
  Size        : 0xc
  MaxSize     : 0x10
  Offset      : 0x17d0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark6scrandEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB013:
    00000000: 	endbr64
    00000004: 	movq	%rdi, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    0000000b: 	retq # Offset: 11
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark6scrandEm"

Binary Function "_ZN9benchmark7crand64Ev" after disassembly {
  Number      : 15
  State       : disassembled
  Address     : 0x17e0
  Size        : 0x42
  MaxSize     : 0x50
  Offset      : 0x17e0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark7crand64Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB014:
    00000000: 	endbr64
    00000004: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rdx
    0000000b: 	movabsq	$0x5851f42d4c957f2d, %rax
    00000015: 	imulq	%rax, %rdx
    00000019: 	movabsq	$0x14057b7ef767814f, %rax
    00000023: 	addq	%rax, %rdx
    00000026: 	movq	%rdx, %rax
    00000029: 	movq	%rdx, %rcx
    0000002c: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000033: 	shrq	$0x14, %rax
    00000037: 	shlq	$0x17, %rcx
    0000003b: 	xorq	%rcx, %rax
    0000003e: 	xorq	%rdx, %rax
    00000041: 	retq # Offset: 65
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark7crand64Ev"

Binary Function "_ZN9benchmark7crand32Ev" after disassembly {
  Number      : 16
  State       : disassembled
  Address     : 0x1830
  Size        : 0x41
  MaxSize     : 0x50
  Offset      : 0x1830
  Section     : .text
  Orc Section : .local.text._ZN9benchmark7crand32Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB015:
    00000000: 	endbr64
    00000004: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    0000000b: 	movabsq	$0x5851f42d4c957f2d, %rdx
    00000015: 	imulq	%rdx, %rax
    00000019: 	movabsq	$0x14057b7ef767814f, %rdx
    00000023: 	addq	%rdx, %rax
    00000026: 	movq	%rax, %rdx
    00000029: 	movq	%rax, %rcx
    0000002c: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000033: 	shrq	$0x14, %rdx
    00000037: 	shlq	$0x17, %rcx
    0000003b: 	xorq	%rcx, %rdx
    0000003e: 	xorl	%edx, %eax
    00000040: 	retq # Offset: 64
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark7crand32Ev"

Binary Function "_ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 17
  State       : disassembled
  Address     : 0x1880
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x1880
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB016:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f38, %edx
    00000017: 	movl	$0x746e6975, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 18
  State       : disassembled
  Address     : 0x18b0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x18b0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB017:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3631746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 19
  State       : disassembled
  Address     : 0x18e0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x18e0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB018:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3233746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 20
  State       : disassembled
  Address     : 0x1910
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x1910
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB019:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3436746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 21
  State       : disassembled
  Address     : 0x1940
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x1940
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB020:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x38746e69, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x745f, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 22
  State       : disassembled
  Address     : 0x1970
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x1970
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB021:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x38746e69, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x745f, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 23
  State       : disassembled
  Address     : 0x19a0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x19a0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB022:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f36, %edx
    00000017: 	movl	$0x31746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 24
  State       : disassembled
  Address     : 0x19d0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x19d0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB023:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f32, %edx
    00000017: 	movl	$0x33746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 25
  State       : disassembled
  Address     : 0x1a00
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x1a00
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB024:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f34, %edx
    00000017: 	movl	$0x36746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 26
  State       : disassembled
  Address     : 0x1a30
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x1a30
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB025:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x14(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x616f6c66, 0x10(%rdi)
    00000019: 	movq	$0x5, 0x8(%rdi)
    00000021: 	movb	$0x0, 0x15(%rdi)
    00000025: 	retq # Offset: 37
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 27
  State       : disassembled
  Address     : 0x1a60
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x1a60
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB026:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x62756f64, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x656c, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 28
  State       : disassembled
  Address     : 0x1a90
  Size        : 0x36
  MaxSize     : 0x40
  Offset      : 0x1a90
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB027:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x65, 0x1a(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x756f6420676e6f6c, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movl	$0x6c62, %edx
    00000021: 	movq	%rcx, 0x10(%rdi)
    00000025: 	movw	%dx, 0x18(%rdi)
    00000029: 	movq	$0xb, 0x8(%rdi)
    00000031: 	movb	$0x0, 0x1b(%rdi)
    00000035: 	retq # Offset: 53
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 29
  State       : disassembled
  Address     : 0x1ad0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x1ad0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB028:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f38746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 30
  State       : disassembled
  Address     : 0x1b00
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x1b00
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB029:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3631746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 31
  State       : disassembled
  Address     : 0x1b30
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x1b30
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB030:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3233746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 32
  State       : disassembled
  Address     : 0x1b60
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x1b60
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB031:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3436746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 33
  State       : disassembled
  Address     : 0x1b90
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x1b90
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB032:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x745f, %edx
    00000017: 	movl	$0x38746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 34
  State       : disassembled
  Address     : 0x1bc0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x1bc0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB033:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3631746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 35
  State       : disassembled
  Address     : 0x1bf0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x1bf0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB034:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3233746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 36
  State       : disassembled
  Address     : 0x1c20
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x1c20
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB035:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3436746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 37
  State       : disassembled
  Address     : 0x1c50
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x1c50
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB036:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x616f6c66, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x2a74, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 38
  State       : disassembled
  Address     : 0x1c80
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x1c80
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB037:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x656c, %edx
    00000017: 	movl	$0x62756f64, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 39
  State       : disassembled
  Address     : 0x1cb0
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x1cb0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB038:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x0, 0x1c(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x756f6420676e6f6c, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movl	$0x2a656c62, 0x18(%rdi)
    00000027: 	movq	$0xc, 0x8(%rdi)
    0000002f: 	retq # Offset: 47
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_Z9summarizeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 41
  State       : disassembled
  Address     : 0x2260
  Size        : 0x79d
  MaxSize     : 0x7a0
  Offset      : 0x2260
  Section     : .text
  Orc Section : .local.text._Z9summarizeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB040:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x58, %rsp
    00000012: 	movq	gResults+72(%rip), %rdx
    00000019: 	movq	gResults+40(%rip), %r8
    00000020: 	movq	gResults+16(%rip), %rsi
    00000027: 	movq	%rdi, 0x10(%rsp)
    0000002c: 	movq	%rdx, %rax
    0000002f: 	subq	%r8, %rax
    00000032: 	sarq	$0x3, %rax
    00000036: 	cmpq	$0x1, %rdx
    0000003a: 	movabsq	$0x6db6db6db6db6db7, %rdx
    00000044: 	adcq	$-0x1, %rax
    00000048: 	leaq	(%rax,%rax,8), %rbp
    0000004c: 	movq	gResults+48(%rip), %rax
    00000053: 	subq	gResults+56(%rip), %rax
    0000005a: 	sarq	$0x3, %rax
    0000005e: 	imulq	%rdx, %rax
    00000062: 	addq	%rax, %rbp
    00000065: 	movq	gResults+32(%rip), %rax
    0000006c: 	subq	%rsi, %rax
    0000006f: 	sarq	$0x3, %rax
    00000073: 	imulq	%rdx, %rax
    00000077: 	addq	%rax, %rbp
    0000007a: 	je	.Ltmp47 # Offset: 122
    00000080: 	movq	%rsi, %rcx
    00000083: 	movl	$0xc, %ebx
    00000088: 	subq	gResults+24(%rip), %rcx
    0000008f: 	movabsq	$-0x1c71c71c71c71c71, %r10
    00000099: 	movabsq	$0x1c71c71c71c71c72, %r9
    000000a3: 	sarq	$0x3, %rcx
    000000a7: 	imulq	%rdx, %rcx
    000000ab: 	leaq	(%rbp,%rcx), %rdi
    000000b0: 	jmp	.Ltmp48 # Offset: 176
    000000b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp51:
    000000b8: 	movq	%rsi, %rax
    000000bb: 	cmpq	$0x8, %rcx
    000000bf: 	jle	.Ltmp49 # Offset: 191
    000000c1: 	movq	%rcx, %rax
    000000c4: 	imulq	%r9
    000000c7: 	movq	%rcx, %rax
    000000ca: 	sarq	$0x3f, %rax
    000000ce: 	subq	%rax, %rdx
.Ltmp52:
    000000d1: 	leaq	(%rdx,%rdx,8), %rax
    000000d5: 	movq	%rcx, %r11
    000000d8: 	movq	(%r8,%rdx,8), %rdx
    000000dc: 	subq	%rax, %r11
    000000df: 	leaq	(,%r11,8), %rax
    000000e7: 	subq	%r11, %rax
    000000ea: 	leaq	(%rdx,%rax,8), %rax
.Ltmp49:
    000000ee: 	movq	0x20(%rax), %rax
    000000f2: 	cmpq	%rax, %rbx
    000000f5: 	cmovbq	%rax, %rbx
    000000f9: 	addq	$0x1, %rcx
    000000fd: 	addq	$0x38, %rsi
    00000101: 	cmpq	%rcx, %rdi
    00000104: 	je	.Ltmp50 # Offset: 260
.Ltmp48:
    0000010a: 	testq	%rcx, %rcx
    0000010d: 	jns	.Ltmp51 # Offset: 269
    0000010f: 	movq	%rcx, %rdx
    00000112: 	notq	%rdx
    00000115: 	movq	%rdx, %rax
    00000118: 	mulq	%r10
    0000011b: 	shrq	$0x3, %rdx
    0000011f: 	notq	%rdx
    00000122: 	jmp	.Ltmp52 # Offset: 290
    00000124: 	nopl	(%rax) # Size: 4
.Ltmp54:
    00000128: 	addq	$0x38, %r14
.Ltmp86:
    0000012c: 	cmpq	%r14, 0x8(%rsp)
    00000131: 	je	.Ltmp53 # Offset: 305
.Ltmp55:
    00000133: 	movq	0x18(%r14), %rdi
    00000137: 	leaq	0x28(%r14), %rax
    0000013b: 	cmpq	%rax, %rdi
    0000013e: 	je	.Ltmp54 # Offset: 318
    00000140: 	movq	0x28(%r14), %rax
    00000144: 	addq	$0x38, %r14
    00000148: 	leaq	0x1(%rax), %rsi
    0000014c: 	callq	_ZdlPvm@PLT # Offset: 332
    00000151: 	cmpq	0x8(%rsp), %r14
    00000156: 	jne	.Ltmp55 # Offset: 342
.Ltmp53:
    00000158: 	movq	gResults+72(%rip), %rax
    0000015f: 	leaq	0x8(%rax), %rbx
    00000163: 	cmpq	%r12, %rbx
    00000166: 	jbe	.Ltmp56 # Offset: 358
    00000168: 	nopl	(%rax,%rax) # Size: 8
.Ltmp57:
    00000170: 	movq	(%r12), %rdi
    00000174: 	movl	$0x1f8, %esi
    00000179: 	addq	$0x8, %r12
    0000017d: 	callq	_ZdlPvm@PLT # Offset: 381
    00000182: 	cmpq	%r12, %rbx
    00000185: 	ja	.Ltmp57 # Offset: 389
.Ltmp56:
    00000187: 	movdqa	0x30(%rsp), %xmm6
    0000018d: 	movaps	%xmm6, gResults+48(%rip)
    00000194: 	movdqa	0x20(%rsp), %xmm6
    0000019a: 	movaps	%xmm6, gResults+64(%rip)
.Ltmp47:
    000001a1: 	addq	$0x58, %rsp
    000001a5: 	popq	%rbx
    000001a6: 	popq	%rbp
    000001a7: 	popq	%r12
    000001a9: 	popq	%r13
    000001ab: 	popq	%r14
    000001ad: 	popq	%r15
    000001af: 	retq # Offset: 431
.Ltmp50:
    000001b0: 	leaq	DATAat0x34149(%rip), %r12
    000001b7: 	leal	-0xc(%rbx), %edx
    000001ba: 	xorl	%eax, %eax
    000001bc: 	xorl	%r14d, %r14d
    000001bf: 	movq	%r12, %rcx
    000001c2: 	leaq	DATAat0x34068(%rip), %rsi
    000001c9: 	movl	$0x1, %edi
    000001ce: 	xorl	%r15d, %r15d
    000001d1: 	callq	__printf_chk@PLT # Offset: 465
    000001d6: 	movq	%r12, %rcx
    000001d9: 	movl	%ebx, %edx
    000001db: 	movl	$0x1, %edi
    000001e0: 	leaq	DATAat0x340a8(%rip), %rsi
    000001e7: 	xorl	%eax, %eax
    000001e9: 	leaq	DATAat0x340e0(%rip), %r13
    000001f0: 	movabsq	$0x6db6db6db6db6db7, %r12
    000001fa: 	callq	__printf_chk@PLT # Offset: 506
    000001ff: 	pxor	%xmm3, %xmm3
    00000203: 	jmp	.Ltmp58 # Offset: 515
    00000205: 	nopl	(%rax) # Size: 3
.Ltmp62:
    00000208: 	cmpq	$0x8, %rcx
    0000020c: 	jg	.Ltmp59 # Offset: 524
    00000212: 	leaq	(%rdi,%r14), %rax
    00000216: 	movsd	DATAat0x34420(%rip), %xmm6
    0000021e: 	movsd	DATAat0x34418(%rip), %xmm1
    00000226: 	pxor	%xmm2, %xmm2
    0000022a: 	movsd	(%rax), %xmm0
    0000022e: 	movq	0x10(%rax), %rdx
    00000232: 	comisd	%xmm0, %xmm6
    00000236: 	addsd	%xmm0, %xmm3
    0000023a: 	jbe	.Ltmp60 # Offset: 570
.Ltmp65:
    00000240: 	movq	0x18(%rax), %r9
    00000244: 	movl	%r15d, %edx
    00000247: 	movl	%ebx, %ecx
    00000249: 	leaq	DATAat0x34146(%rip), %r8
    00000250: 	subl	0x20(%rax), %ecx
    00000253: 	movq	%r13, %rsi
    00000256: 	movl	$0x1, %edi
    0000025b: 	movl	$0x3, %eax
    00000260: 	addq	$0x1, %r15
    00000264: 	movsd	%xmm3, 0x8(%rsp)
    0000026a: 	addq	$0x38, %r14
    0000026e: 	callq	__printf_chk@PLT # Offset: 622
    00000273: 	cmpq	%rbp, %r15
    00000276: 	movsd	0x8(%rsp), %xmm3
    0000027c: 	je	.Ltmp61 # Offset: 636
.Ltmp58:
    00000282: 	movq	gResults+16(%rip), %rdi
    00000289: 	movq	gResults+40(%rip), %rsi
    00000290: 	movq	%rdi, %rcx
    00000293: 	subq	gResults+24(%rip), %rcx
    0000029a: 	sarq	$0x3, %rcx
    0000029e: 	imulq	%r12, %rcx
    000002a2: 	addq	%r15, %rcx
    000002a5: 	jns	.Ltmp62 # Offset: 677
    000002ab: 	movabsq	$-0x1c71c71c71c71c71, %rax
    000002b5: 	movq	%rcx, %rdi
    000002b8: 	movq	%rcx, %r8
    000002bb: 	notq	%rdi
    000002be: 	mulq	%rdi
    000002c1: 	shrq	$0x3, %rdx
    000002c5: 	notq	%rdx
    000002c8: 	leaq	(%rdx,%rdx,8), %rax
    000002cc: 	movq	(%rsi,%rdx,8), %rdx
    000002d0: 	subq	%rax, %r8
    000002d3: 	leaq	(,%r8,8), %rax
    000002db: 	subq	%r8, %rax
    000002de: 	leaq	(%rdx,%rax,8), %rax
    000002e2: 	movsd	(%rax), %xmm4
    000002e6: 	movq	0x10(%rax), %rax
    000002ea: 	addsd	%xmm4, %xmm3
    000002ee: 	testq	%rax, %rax
    000002f1: 	js	.Ltmp63 # Offset: 753
    000002f7: 	pxor	%xmm0, %xmm0
    000002fb: 	cvtsi2sd	%rax, %xmm0
.Ltmp70:
    00000300: 	movsd	DATAat0x34420(%rip), %xmm7
    00000308: 	movq	DATAat0x34418(%rip), %rax
    0000030f: 	pxor	%xmm2, %xmm2
    00000313: 	divsd	DATAat0x34410(%rip), %xmm0
    0000031b: 	comisd	%xmm4, %xmm7
    0000031f: 	movq	%rax, %xmm1
    00000324: 	jbe	.Ltmp64 # Offset: 804
.Ltmp75:
    0000032a: 	movabsq	$-0x1c71c71c71c71c71, %rax
    00000334: 	mulq	%rdi
    00000337: 	shrq	$0x3, %rdx
    0000033b: 	notq	%rdx
.Ltmp68:
    0000033e: 	leaq	(%rdx,%rdx,8), %rax
    00000342: 	movq	(%rsi,%rdx,8), %rdx
    00000346: 	subq	%rax, %rcx
    00000349: 	leaq	(,%rcx,8), %rax
    00000351: 	subq	%rcx, %rax
    00000354: 	leaq	(%rdx,%rax,8), %rax
    00000358: 	movsd	(%rax), %xmm0
    0000035c: 	jmp	.Ltmp65 # Offset: 860
    00000361: 	nopl	(%rax) # Size: 7
.Ltmp59:
    00000368: 	movabsq	$0x1c71c71c71c71c72, %rdx
    00000372: 	movq	%rcx, %rax
    00000375: 	movq	%rcx, %r8
    00000378: 	imulq	%rdx
    0000037b: 	movq	%rcx, %rax
    0000037e: 	sarq	$0x3f, %rax
    00000382: 	subq	%rax, %rdx
    00000385: 	leaq	(%rdx,%rdx,8), %rax
    00000389: 	movq	(%rsi,%rdx,8), %rdx
    0000038d: 	subq	%rax, %r8
    00000390: 	leaq	(,%r8,8), %rax
    00000398: 	subq	%r8, %rax
    0000039b: 	leaq	(%rdx,%rax,8), %rax
    0000039f: 	movsd	(%rax), %xmm5
    000003a3: 	movq	0x10(%rax), %rax
    000003a7: 	addsd	%xmm5, %xmm3
    000003ab: 	testq	%rax, %rax
    000003ae: 	js	.Ltmp66 # Offset: 942
    000003b0: 	pxor	%xmm4, %xmm4
    000003b4: 	cvtsi2sd	%rax, %xmm4
.Ltmp69:
    000003b9: 	movsd	DATAat0x34420(%rip), %xmm6
    000003c1: 	movsd	DATAat0x34418(%rip), %xmm1
    000003c9: 	pxor	%xmm2, %xmm2
    000003cd: 	divsd	DATAat0x34410(%rip), %xmm4
    000003d5: 	comisd	%xmm5, %xmm6
    000003d9: 	jbe	.Ltmp67 # Offset: 985
.Ltmp73:
    000003db: 	movabsq	$0x1c71c71c71c71c72, %rdx
    000003e5: 	movq	%rcx, %rax
    000003e8: 	imulq	%rdx
    000003eb: 	movq	%rcx, %rax
    000003ee: 	sarq	$0x3f, %rax
    000003f2: 	subq	%rax, %rdx
    000003f5: 	jmp	.Ltmp68 # Offset: 1013
    000003fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp66:
    00000400: 	movq	%rax, %rdx
    00000403: 	andl	$0x1, %eax
    00000406: 	pxor	%xmm0, %xmm0
    0000040a: 	shrq	%rdx
    0000040d: 	orq	%rax, %rdx
    00000410: 	cvtsi2sd	%rdx, %xmm0
    00000415: 	movapd	%xmm0, %xmm4
    00000419: 	addsd	%xmm0, %xmm4
    0000041d: 	jmp	.Ltmp69 # Offset: 1053
    0000041f: 	nop # Size: 1
.Ltmp63:
    00000420: 	movq	%rax, %rdx
    00000423: 	andl	$0x1, %eax
    00000426: 	pxor	%xmm0, %xmm0
    0000042a: 	shrq	%rdx
    0000042d: 	orq	%rax, %rdx
    00000430: 	cvtsi2sd	%rdx, %xmm0
    00000435: 	addsd	%xmm0, %xmm0
    00000439: 	jmp	.Ltmp70 # Offset: 1081
    0000043e: 	nop # Size: 2
.Ltmp67:
    00000440: 	cmpq	$0x8, %rcx
    00000444: 	jle	.Ltmp71 # Offset: 1092
    0000044a: 	movq	%rcx, %rax
    0000044d: 	movq	%rcx, %r8
    00000450: 	movapd	%xmm4, %xmm1
    00000454: 	movabsq	$0x1c71c71c71c71c72, %rdx
    0000045e: 	imulq	%rdx
    00000461: 	movq	%rcx, %rax
    00000464: 	sarq	$0x3f, %rax
    00000468: 	subq	%rax, %rdx
    0000046b: 	leaq	(%rdx,%rdx,8), %rax
    0000046f: 	subq	%rax, %r8
    00000472: 	leaq	(,%r8,8), %rax
    0000047a: 	subq	%r8, %rax
    0000047d: 	movq	(%rsi,%rdx,8), %r8
    00000481: 	leaq	(%r8,%rax,8), %rax
    00000485: 	movsd	(%rax), %xmm2
    00000489: 	movq	0x10(%rax), %rax
    0000048d: 	divsd	%xmm2, %xmm1
    00000491: 	mulsd	DATAat0x34428(%rip), %xmm2
    00000499: 	testq	%rax, %rax
    0000049c: 	js	.Ltmp72 # Offset: 1180
    000004a2: 	pxor	%xmm0, %xmm0
    000004a6: 	cvtsi2sd	%rax, %xmm0
.Ltmp91:
    000004ab: 	divsd	%xmm0, %xmm2
.Ltmp90:
    000004af: 	cmpq	$0x8, %rcx
    000004b3: 	jg	.Ltmp73 # Offset: 1203
    000004b9: 	leaq	(%rdi,%r14), %rax
    000004bd: 	movsd	(%rax), %xmm0
    000004c1: 	jmp	.Ltmp65 # Offset: 1217
    000004c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp64:
    000004d0: 	movabsq	$-0x1c71c71c71c71c71, %rax
    000004da: 	movq	%rcx, %r8
    000004dd: 	movapd	%xmm0, %xmm1
    000004e1: 	mulq	%rdi
    000004e4: 	movq	%rdx, %rax
    000004e7: 	shrq	$0x3, %rax
    000004eb: 	notq	%rax
    000004ee: 	leaq	(%rax,%rax,8), %rdx
    000004f2: 	movq	(%rsi,%rax,8), %rax
    000004f6: 	subq	%rdx, %r8
    000004f9: 	leaq	(,%r8,8), %rdx
    00000501: 	subq	%r8, %rdx
    00000504: 	leaq	(%rax,%rdx,8), %rax
    00000508: 	movsd	(%rax), %xmm2
    0000050c: 	movq	0x10(%rax), %rax
    00000510: 	divsd	%xmm2, %xmm1
    00000514: 	mulsd	DATAat0x34428(%rip), %xmm2
    0000051c: 	testq	%rax, %rax
    0000051f: 	js	.Ltmp74 # Offset: 1311
    00000525: 	pxor	%xmm0, %xmm0
    00000529: 	cvtsi2sd	%rax, %xmm0
.Ltmp92:
    0000052e: 	divsd	%xmm0, %xmm2
    00000532: 	jmp	.Ltmp75 # Offset: 1330
    00000537: 	nopw	(%rax,%rax) # Size: 9
.Ltmp61:
    00000540: 	movq	0x10(%rsp), %rax
    00000545: 	movapd	%xmm3, %xmm0
    00000549: 	movl	$0x1, %edi
    0000054e: 	leaq	DATAat0x34110(%rip), %rsi
    00000555: 	movq	(%rax), %rdx
    00000558: 	movl	$0x1, %eax
    0000055d: 	callq	__printf_chk@PLT # Offset: 1373
    00000562: 	movdqa	gResults+16(%rip), %xmm5
    0000056a: 	movdqa	gResults+32(%rip), %xmm7
    00000572: 	movq	gResults+48(%rip), %rax
    00000579: 	movq	gResults+56(%rip), %r14
    00000580: 	movaps	%xmm5, 0x30(%rsp)
    00000585: 	movq	%xmm5, %rbp
    0000058a: 	movhlps	%xmm7, %xmm5
    0000058d: 	movq	%rax, 0x8(%rsp)
    00000592: 	movq	%xmm5, %rbx
    00000597: 	movq	gResults+72(%rip), %rax
    0000059e: 	leaq	0x8(%rbx), %r12
    000005a2: 	movaps	%xmm7, 0x20(%rsp)
    000005a7: 	movq	%rax, 0x18(%rsp)
    000005ac: 	movq	%r12, %r13
    000005af: 	movq	%xmm5, 0x40(%rsp)
    000005b5: 	movq	%xmm7, 0x10(%rsp)
    000005bb: 	cmpq	%r12, %rax
    000005be: 	jbe	.Ltmp76 # Offset: 1470
    000005c0: 	movq	%rbp, 0x48(%rsp)
    000005c5: 	movq	%rax, %r15
    000005c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp79:
    000005d0: 	movq	(%r13), %rbp
    000005d4: 	leaq	0x1f8(%rbp), %rbx
    000005db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp78:
    000005e0: 	movq	0x18(%rbp), %rdi
    000005e4: 	leaq	0x28(%rbp), %rdx
    000005e8: 	cmpq	%rdx, %rdi
    000005eb: 	je	.Ltmp77 # Offset: 1515
    000005f1: 	movq	0x28(%rbp), %rax
    000005f5: 	addq	$0x38, %rbp
    000005f9: 	leaq	0x1(%rax), %rsi
    000005fd: 	callq	_ZdlPvm@PLT # Offset: 1533
    00000602: 	cmpq	%rbx, %rbp
    00000605: 	jne	.Ltmp78 # Offset: 1541
    00000607: 	addq	$0x8, %r13
    0000060b: 	cmpq	%r13, %r15
    0000060e: 	ja	.Ltmp79 # Offset: 1550
.Ltmp87:
    00000610: 	movq	0x48(%rsp), %rbp
.Ltmp76:
    00000615: 	movq	0x40(%rsp), %rbx
    0000061a: 	cmpq	%rbx, 0x18(%rsp)
    0000061f: 	jne	.Ltmp80 # Offset: 1567
.Ltmp83:
    00000621: 	cmpq	%rbp, 0x8(%rsp)
    00000626: 	je	.Ltmp53 # Offset: 1574
    0000062c: 	movq	0x18(%rbp), %rdi
    00000630: 	leaq	0x28(%rbp), %rax
    00000634: 	cmpq	%rax, %rdi
    00000637: 	je	.Ltmp81 # Offset: 1591
.Ltmp82:
    00000639: 	movq	0x28(%rbp), %rax
    0000063d: 	addq	$0x38, %rbp
    00000641: 	leaq	0x1(%rax), %rsi
    00000645: 	callq	_ZdlPvm@PLT # Offset: 1605
    0000064a: 	cmpq	0x8(%rsp), %rbp
    0000064f: 	je	.Ltmp53 # Offset: 1615
    00000655: 	movq	0x18(%rbp), %rdi
    00000659: 	leaq	0x28(%rbp), %rax
    0000065d: 	cmpq	%rax, %rdi
    00000660: 	jne	.Ltmp82 # Offset: 1632
.Ltmp81:
    00000662: 	addq	$0x38, %rbp
    00000666: 	jmp	.Ltmp83 # Offset: 1638
    00000668: 	nopl	(%rax,%rax) # Size: 8
.Ltmp85:
    00000670: 	movq	0x18(%rbp), %rdi
    00000674: 	leaq	0x28(%rbp), %rax
    00000678: 	cmpq	%rax, %rdi
    0000067b: 	je	.Ltmp84 # Offset: 1659
    0000067d: 	movq	0x28(%rbp), %rax
    00000681: 	leaq	0x1(%rax), %rsi
    00000685: 	callq	_ZdlPvm@PLT # Offset: 1669
.Ltmp84:
    0000068a: 	addq	$0x38, %rbp
.Ltmp80:
    0000068e: 	cmpq	0x10(%rsp), %rbp
    00000693: 	jne	.Ltmp85 # Offset: 1683
    00000695: 	jmp	.Ltmp86 # Offset: 1685
    0000069a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp77:
    000006a0: 	addq	$0x38, %rbp
    000006a4: 	cmpq	%rbx, %rbp
    000006a7: 	jne	.Ltmp78 # Offset: 1703
    000006ad: 	addq	$0x8, %r13
    000006b1: 	cmpq	%r13, %r15
    000006b4: 	ja	.Ltmp79 # Offset: 1716
    000006ba: 	jmp	.Ltmp87 # Offset: 1722
    000006bf: 	nop # Size: 1
.Ltmp60:
    000006c0: 	testq	%rdx, %rdx
    000006c3: 	js	.Ltmp88 # Offset: 1731
    000006c9: 	pxor	%xmm4, %xmm4
    000006cd: 	cvtsi2sd	%rdx, %xmm4
.Ltmp93:
    000006d2: 	divsd	DATAat0x34410(%rip), %xmm4
.Ltmp95:
    000006da: 	divsd	%xmm0, %xmm4
    000006de: 	movsd	DATAat0x34428(%rip), %xmm2
    000006e6: 	movq	0x10(%rax), %rax
    000006ea: 	mulsd	%xmm0, %xmm2
    000006ee: 	movapd	%xmm4, %xmm1
    000006f2: 	testq	%rax, %rax
    000006f5: 	js	.Ltmp89 # Offset: 1781
    000006f7: 	pxor	%xmm0, %xmm0
    000006fb: 	cvtsi2sd	%rax, %xmm0
.Ltmp94:
    00000700: 	divsd	%xmm0, %xmm2
    00000704: 	testq	%rcx, %rcx
    00000707: 	jns	.Ltmp90 # Offset: 1799
    0000070d: 	movq	%rcx, %rdi
    00000710: 	notq	%rdi
    00000713: 	jmp	.Ltmp75 # Offset: 1811
.Ltmp72:
    00000718: 	movq	%rax, %rdx
    0000071b: 	andl	$0x1, %eax
    0000071e: 	pxor	%xmm0, %xmm0
    00000722: 	shrq	%rdx
    00000725: 	orq	%rax, %rdx
    00000728: 	cvtsi2sd	%rdx, %xmm0
    0000072d: 	addsd	%xmm0, %xmm0
    00000731: 	jmp	.Ltmp91 # Offset: 1841
.Ltmp74:
    00000736: 	movq	%rax, %rdx
    00000739: 	andl	$0x1, %eax
    0000073c: 	pxor	%xmm0, %xmm0
    00000740: 	shrq	%rdx
    00000743: 	orq	%rax, %rdx
    00000746: 	cvtsi2sd	%rdx, %xmm0
    0000074b: 	addsd	%xmm0, %xmm0
    0000074f: 	jmp	.Ltmp92 # Offset: 1871
.Ltmp88:
    00000754: 	movq	%rdx, %r8
    00000757: 	andl	$0x1, %edx
    0000075a: 	pxor	%xmm4, %xmm4
    0000075e: 	shrq	%r8
    00000761: 	orq	%rdx, %r8
    00000764: 	cvtsi2sd	%r8, %xmm4
    00000769: 	addsd	%xmm4, %xmm4
    0000076d: 	jmp	.Ltmp93 # Offset: 1901
.Ltmp89:
    00000772: 	movq	%rax, %rdx
    00000775: 	andl	$0x1, %eax
    00000778: 	pxor	%xmm0, %xmm0
    0000077c: 	shrq	%rdx
    0000077f: 	orq	%rax, %rdx
    00000782: 	cvtsi2sd	%rdx, %xmm0
    00000787: 	addsd	%xmm0, %xmm0
    0000078b: 	jmp	.Ltmp94 # Offset: 1931
.Ltmp71:
    00000790: 	leaq	(%rdi,%r14), %rax
    00000794: 	movsd	(%rax), %xmm0
    00000798: 	jmp	.Ltmp95 # Offset: 1944
DWARF CFI Instructions:
    <empty>
End of Function "_Z9summarizeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z14std_lowerboundISt18_Fwd_list_iteratorIaEaET_S2_S2_T0_" after disassembly {
  Number      : 42
  State       : disassembled
  Address     : 0x2a00
  Size        : 0x72
  MaxSize     : 0x80
  Offset      : 0x2a00
  Section     : .text
  Orc Section : .local.text._Z14std_lowerboundISt18_Fwd_list_iteratorIaEaET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB041:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	cmpq	%rdi, %rsi
    0000000a: 	je	.Ltmp96 # Offset: 10
    0000000c: 	movq	%rdi, %rax
    0000000f: 	xorl	%r8d, %r8d
    00000012: 	nopw	(%rax,%rax) # Size: 6
.Ltmp97:
    00000018: 	movq	(%rax), %rax
    0000001b: 	addq	$0x1, %r8
    0000001f: 	cmpq	%rsi, %rax
    00000022: 	jne	.Ltmp97 # Offset: 34
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp103:
    00000028: 	testq	%r8, %r8
    0000002b: 	jle	.Ltmp98 # Offset: 43
.Ltmp102:
    0000002d: 	movq	%r8, %rsi
    00000030: 	movq	%r9, %rcx
    00000033: 	sarq	%rsi
    00000036: 	leaq	-0x1(%rsi), %rax
    0000003a: 	je	.Ltmp99 # Offset: 58
    0000003c: 	nopl	(%rax) # Size: 4
.Ltmp100:
    00000040: 	movq	(%rcx), %rcx
    00000043: 	subq	$0x1, %rax
    00000047: 	jae	.Ltmp100 # Offset: 71
.Ltmp99:
    00000049: 	cmpb	%dl, 0x8(%rcx)
    0000004c: 	jge	.Ltmp101 # Offset: 76
    0000004e: 	subq	%rsi, %r8
    00000051: 	movq	(%rcx), %r9
    00000054: 	subq	$0x1, %r8
    00000058: 	testq	%r8, %r8
    0000005b: 	jg	.Ltmp102 # Offset: 91
.Ltmp98:
    0000005d: 	movq	%r9, %rax
    00000060: 	retq # Offset: 96
    00000061: 	nopl	(%rax) # Size: 7
.Ltmp101:
    00000068: 	movq	%rsi, %r8
    0000006b: 	jmp	.Ltmp103 # Offset: 107
.Ltmp96:
    0000006d: 	xorl	%r8d, %r8d
    00000070: 	jmp	.Ltmp103 # Offset: 112
DWARF CFI Instructions:
    <empty>
End of Function "_Z14std_lowerboundISt18_Fwd_list_iteratorIaEaET_S2_S2_T0_"

Binary Function "_Z12lower_bound1ISt18_Fwd_list_iteratorIaEaET_S2_S2_T0_" after disassembly {
  Number      : 43
  State       : disassembled
  Address     : 0x2a80
  Size        : 0x7c
  MaxSize     : 0x80
  Offset      : 0x2a80
  Section     : .text
  Orc Section : .local.text._Z12lower_bound1ISt18_Fwd_list_iteratorIaEaET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB042:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r8
    00000007: 	nopw	(%rax,%rax) # Size: 9
.Ltmp111:
    00000010: 	cmpq	%r8, %rdi
    00000013: 	je	.Ltmp104 # Offset: 19
.Ltmp109:
    00000015: 	movq	%rdi, %rax
    00000018: 	xorl	%ecx, %ecx
    0000001a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp105:
    00000020: 	movq	(%rax), %rax
    00000023: 	addq	$0x1, %rcx
    00000027: 	cmpq	%r8, %rax
    0000002a: 	jne	.Ltmp105 # Offset: 42
    0000002c: 	sarq	%rcx
    0000002f: 	leaq	-0x1(%rcx), %rax
    00000033: 	je	.Ltmp106 # Offset: 51
    00000035: 	movq	%rdi, %rcx
    00000038: 	nopl	(%rax,%rax) # Size: 8
.Ltmp107:
    00000040: 	movq	(%rcx), %rcx
    00000043: 	subq	$0x1, %rax
    00000047: 	jae	.Ltmp107 # Offset: 71
    00000049: 	cmpb	%dl, 0x8(%rcx)
    0000004c: 	jl	.Ltmp108 # Offset: 76
    0000004e: 	movq	%rcx, %r8
    00000051: 	cmpq	%r8, %rdi
    00000054: 	jne	.Ltmp109 # Offset: 84
.Ltmp104:
    00000056: 	movq	%r8, %rax
    00000059: 	retq # Offset: 89
    0000005a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp106:
    00000060: 	cmpb	0x8(%rdi), %dl
    00000063: 	jle	.Ltmp110 # Offset: 99
    00000065: 	movq	%rdi, %rcx
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp108:
    00000070: 	movq	(%rcx), %rdi
    00000073: 	jmp	.Ltmp111 # Offset: 115
.Ltmp110:
    00000075: 	movq	%rdi, %r8
    00000078: 	movq	%r8, %rax
    0000007b: 	retq # Offset: 123
DWARF CFI Instructions:
    <empty>
End of Function "_Z12lower_bound1ISt18_Fwd_list_iteratorIaEaET_S2_S2_T0_"

Binary Function "_Z12lower_bound2ISt18_Fwd_list_iteratorIaEaET_S2_S2_T0_" after disassembly {
  Number      : 44
  State       : disassembled
  Address     : 0x2b00
  Size        : 0x7f
  MaxSize     : 0x80
  Offset      : 0x2b00
  Section     : .text
  Orc Section : .local.text._Z12lower_bound2ISt18_Fwd_list_iteratorIaEaET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB043:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r10
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp112 # Offset: 10
    0000000c: 	movq	%rdi, %rax
    0000000f: 	xorl	%r8d, %r8d
    00000012: 	nopw	(%rax,%rax) # Size: 6
.Ltmp113:
    00000018: 	movq	(%rax), %rax
    0000001b: 	addq	$0x1, %r8
    0000001f: 	cmpq	%rsi, %rax
    00000022: 	jne	.Ltmp113 # Offset: 34
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp117:
    00000028: 	movq	%r8, %rsi
    0000002b: 	shrq	$0x3f, %rsi
    0000002f: 	addq	%r8, %rsi
    00000032: 	sarq	%rsi
    00000035: 	movq	%rsi, %r9
    00000038: 	leaq	-0x1(%rsi), %rax
    0000003c: 	je	.Ltmp114 # Offset: 60
    0000003e: 	movq	%r10, %rcx
    00000041: 	nopl	(%rax) # Size: 7
.Ltmp115:
    00000048: 	movq	(%rcx), %rcx
    0000004b: 	subq	$0x1, %rax
    0000004f: 	jae	.Ltmp115 # Offset: 79
    00000051: 	cmpb	%dl, 0x8(%rcx)
    00000054: 	jge	.Ltmp116 # Offset: 84
.Ltmp119:
    00000056: 	addq	$0x1, %rsi
    0000005a: 	movq	%r8, %r9
    0000005d: 	movq	(%rcx), %r10
    00000060: 	subq	%rsi, %r9
    00000063: 	je	.Ltmp112 # Offset: 99
.Ltmp116:
    00000065: 	movq	%r9, %r8
    00000068: 	jmp	.Ltmp117 # Offset: 104
    0000006a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp114:
    00000070: 	cmpb	0x8(%r10), %dl
    00000074: 	jg	.Ltmp118 # Offset: 116
.Ltmp112:
    00000076: 	movq	%r10, %rax
    00000079: 	retq # Offset: 121
.Ltmp118:
    0000007a: 	movq	%r10, %rcx
    0000007d: 	jmp	.Ltmp119 # Offset: 125
DWARF CFI Instructions:
    <empty>
End of Function "_Z12lower_bound2ISt18_Fwd_list_iteratorIaEaET_S2_S2_T0_"

Binary Function "_Z14std_upperboundISt18_Fwd_list_iteratorIaEaET_S2_S2_T0_" after disassembly {
  Number      : 45
  State       : disassembled
  Address     : 0x2b80
  Size        : 0x72
  MaxSize     : 0x80
  Offset      : 0x2b80
  Section     : .text
  Orc Section : .local.text._Z14std_upperboundISt18_Fwd_list_iteratorIaEaET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB044:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	cmpq	%rdi, %rsi
    0000000a: 	je	.Ltmp120 # Offset: 10
    0000000c: 	movq	%rdi, %rax
    0000000f: 	xorl	%r8d, %r8d
    00000012: 	nopw	(%rax,%rax) # Size: 6
.Ltmp121:
    00000018: 	movq	(%rax), %rax
    0000001b: 	addq	$0x1, %r8
    0000001f: 	cmpq	%rsi, %rax
    00000022: 	jne	.Ltmp121 # Offset: 34
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp127:
    00000028: 	testq	%r8, %r8
    0000002b: 	jle	.Ltmp122 # Offset: 43
.Ltmp126:
    0000002d: 	movq	%r8, %rsi
    00000030: 	movq	%r9, %rcx
    00000033: 	sarq	%rsi
    00000036: 	leaq	-0x1(%rsi), %rax
    0000003a: 	je	.Ltmp123 # Offset: 58
    0000003c: 	nopl	(%rax) # Size: 4
.Ltmp124:
    00000040: 	movq	(%rcx), %rcx
    00000043: 	subq	$0x1, %rax
    00000047: 	jae	.Ltmp124 # Offset: 71
.Ltmp123:
    00000049: 	cmpb	%dl, 0x8(%rcx)
    0000004c: 	jg	.Ltmp125 # Offset: 76
    0000004e: 	subq	%rsi, %r8
    00000051: 	movq	(%rcx), %r9
    00000054: 	subq	$0x1, %r8
    00000058: 	testq	%r8, %r8
    0000005b: 	jg	.Ltmp126 # Offset: 91
.Ltmp122:
    0000005d: 	movq	%r9, %rax
    00000060: 	retq # Offset: 96
    00000061: 	nopl	(%rax) # Size: 7
.Ltmp125:
    00000068: 	movq	%rsi, %r8
    0000006b: 	jmp	.Ltmp127 # Offset: 107
.Ltmp120:
    0000006d: 	xorl	%r8d, %r8d
    00000070: 	jmp	.Ltmp127 # Offset: 112
DWARF CFI Instructions:
    <empty>
End of Function "_Z14std_upperboundISt18_Fwd_list_iteratorIaEaET_S2_S2_T0_"

Binary Function "_Z12upper_bound1ISt18_Fwd_list_iteratorIaEaET_S2_S2_T0_" after disassembly {
  Number      : 46
  State       : disassembled
  Address     : 0x2c00
  Size        : 0x7c
  MaxSize     : 0x80
  Offset      : 0x2c00
  Section     : .text
  Orc Section : .local.text._Z12upper_bound1ISt18_Fwd_list_iteratorIaEaET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB045:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r8
    00000007: 	nopw	(%rax,%rax) # Size: 9
.Ltmp135:
    00000010: 	cmpq	%r8, %rdi
    00000013: 	je	.Ltmp128 # Offset: 19
.Ltmp133:
    00000015: 	movq	%rdi, %rax
    00000018: 	xorl	%ecx, %ecx
    0000001a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp129:
    00000020: 	movq	(%rax), %rax
    00000023: 	addq	$0x1, %rcx
    00000027: 	cmpq	%r8, %rax
    0000002a: 	jne	.Ltmp129 # Offset: 42
    0000002c: 	sarq	%rcx
    0000002f: 	leaq	-0x1(%rcx), %rax
    00000033: 	je	.Ltmp130 # Offset: 51
    00000035: 	movq	%rdi, %rcx
    00000038: 	nopl	(%rax,%rax) # Size: 8
.Ltmp131:
    00000040: 	movq	(%rcx), %rcx
    00000043: 	subq	$0x1, %rax
    00000047: 	jae	.Ltmp131 # Offset: 71
    00000049: 	cmpb	%dl, 0x8(%rcx)
    0000004c: 	jle	.Ltmp132 # Offset: 76
    0000004e: 	movq	%rcx, %r8
    00000051: 	cmpq	%r8, %rdi
    00000054: 	jne	.Ltmp133 # Offset: 84
.Ltmp128:
    00000056: 	movq	%r8, %rax
    00000059: 	retq # Offset: 89
    0000005a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp130:
    00000060: 	cmpb	0x8(%rdi), %dl
    00000063: 	jl	.Ltmp134 # Offset: 99
    00000065: 	movq	%rdi, %rcx
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp132:
    00000070: 	movq	(%rcx), %rdi
    00000073: 	jmp	.Ltmp135 # Offset: 115
.Ltmp134:
    00000075: 	movq	%rdi, %r8
    00000078: 	movq	%r8, %rax
    0000007b: 	retq # Offset: 123
DWARF CFI Instructions:
    <empty>
End of Function "_Z12upper_bound1ISt18_Fwd_list_iteratorIaEaET_S2_S2_T0_"

Binary Function "_Z12upper_bound2ISt18_Fwd_list_iteratorIaEaET_S2_S2_T0_" after disassembly {
  Number      : 47
  State       : disassembled
  Address     : 0x2c80
  Size        : 0x7f
  MaxSize     : 0x80
  Offset      : 0x2c80
  Section     : .text
  Orc Section : .local.text._Z12upper_bound2ISt18_Fwd_list_iteratorIaEaET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB046:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r10
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp136 # Offset: 10
    0000000c: 	movq	%rdi, %rax
    0000000f: 	xorl	%r8d, %r8d
    00000012: 	nopw	(%rax,%rax) # Size: 6
.Ltmp137:
    00000018: 	movq	(%rax), %rax
    0000001b: 	addq	$0x1, %r8
    0000001f: 	cmpq	%rsi, %rax
    00000022: 	jne	.Ltmp137 # Offset: 34
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp141:
    00000028: 	movq	%r8, %rsi
    0000002b: 	shrq	$0x3f, %rsi
    0000002f: 	addq	%r8, %rsi
    00000032: 	sarq	%rsi
    00000035: 	movq	%rsi, %r9
    00000038: 	leaq	-0x1(%rsi), %rax
    0000003c: 	je	.Ltmp138 # Offset: 60
    0000003e: 	movq	%r10, %rcx
    00000041: 	nopl	(%rax) # Size: 7
.Ltmp139:
    00000048: 	movq	(%rcx), %rcx
    0000004b: 	subq	$0x1, %rax
    0000004f: 	jae	.Ltmp139 # Offset: 79
    00000051: 	cmpb	%dl, 0x8(%rcx)
    00000054: 	jg	.Ltmp140 # Offset: 84
.Ltmp143:
    00000056: 	addq	$0x1, %rsi
    0000005a: 	movq	%r8, %r9
    0000005d: 	movq	(%rcx), %r10
    00000060: 	subq	%rsi, %r9
    00000063: 	je	.Ltmp136 # Offset: 99
.Ltmp140:
    00000065: 	movq	%r9, %r8
    00000068: 	jmp	.Ltmp141 # Offset: 104
    0000006a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp138:
    00000070: 	cmpb	0x8(%r10), %dl
    00000074: 	jge	.Ltmp142 # Offset: 116
.Ltmp136:
    00000076: 	movq	%r10, %rax
    00000079: 	retq # Offset: 121
.Ltmp142:
    0000007a: 	movq	%r10, %rcx
    0000007d: 	jmp	.Ltmp143 # Offset: 125
DWARF CFI Instructions:
    <empty>
End of Function "_Z12upper_bound2ISt18_Fwd_list_iteratorIaEaET_S2_S2_T0_"

Binary Function "_Z13binarysearch1ISt18_Fwd_list_iteratorIaEaEbT_S2_T0_" after disassembly {
  Number      : 48
  State       : disassembled
  Address     : 0x2d00
  Size        : 0x5d
  MaxSize     : 0x60
  Offset      : 0x2d00
  Section     : .text
  Orc Section : .local.text._Z13binarysearch1ISt18_Fwd_list_iteratorIaEaEbT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB047:
    00000000: 	endbr64
    00000004: 	cmpq	%rdi, %rsi
    00000007: 	je	.Ltmp144 # Offset: 7
    00000009: 	nopl	(%rax) # Size: 7
.Ltmp149:
    00000010: 	movq	%rdi, %rax
    00000013: 	xorl	%ecx, %ecx
    00000015: 	nopl	(%rax) # Size: 3
.Ltmp145:
    00000018: 	movq	(%rax), %rax
    0000001b: 	addq	$0x1, %rcx
    0000001f: 	cmpq	%rsi, %rax
    00000022: 	jne	.Ltmp145 # Offset: 34
    00000024: 	sarq	%rcx
    00000027: 	leaq	-0x1(%rcx), %rax
    0000002b: 	movq	%rdi, %rcx
    0000002e: 	je	.Ltmp146 # Offset: 46
.Ltmp147:
    00000030: 	movq	(%rcx), %rcx
    00000033: 	subq	$0x1, %rax
    00000037: 	jae	.Ltmp147 # Offset: 55
.Ltmp146:
    00000039: 	cmpb	%dl, 0x8(%rcx)
    0000003c: 	jge	.Ltmp148 # Offset: 60
    0000003e: 	movq	(%rcx), %rdi
.Ltmp151:
    00000041: 	cmpq	%rsi, %rdi
    00000044: 	jne	.Ltmp149 # Offset: 68
.Ltmp144:
    00000046: 	xorl	%eax, %eax
    00000048: 	retq # Offset: 72
    00000049: 	nopl	(%rax) # Size: 7
.Ltmp148:
    00000050: 	jle	.Ltmp150 # Offset: 80
    00000052: 	movq	%rcx, %rsi
    00000055: 	jmp	.Ltmp151 # Offset: 85
.Ltmp150:
    00000057: 	movl	$0x1, %eax
    0000005c: 	retq # Offset: 92
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch1ISt18_Fwd_list_iteratorIaEaEbT_S2_T0_"

Binary Function "_Z13binarysearch2ISt18_Fwd_list_iteratorIaEaEbT_S2_T0_" after disassembly {
  Number      : 49
  State       : disassembled
  Address     : 0x2d60
  Size        : 0x6d
  MaxSize     : 0x70
  Offset      : 0x2d60
  Section     : .text
  Orc Section : .local.text._Z13binarysearch2ISt18_Fwd_list_iteratorIaEaEbT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB048:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp152 # Offset: 7
    00000009: 	movq	%rdi, %rax
    0000000c: 	xorl	%r8d, %r8d
    0000000f: 	nop # Size: 1
.Ltmp153:
    00000010: 	movq	(%rax), %rax
    00000013: 	addq	$0x1, %r8
    00000017: 	cmpq	%rsi, %rax
    0000001a: 	jne	.Ltmp153 # Offset: 26
    0000001c: 	nopl	(%rax) # Size: 4
.Ltmp157:
    00000020: 	movq	%r8, %rsi
    00000023: 	movq	%rdi, %rcx
    00000026: 	shrq	$0x3f, %rsi
    0000002a: 	addq	%r8, %rsi
    0000002d: 	sarq	%rsi
    00000030: 	leaq	-0x1(%rsi), %rax
    00000034: 	je	.Ltmp154 # Offset: 52
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp155:
    00000040: 	movq	(%rcx), %rcx
    00000043: 	subq	$0x1, %rax
    00000047: 	jae	.Ltmp155 # Offset: 71
.Ltmp154:
    00000049: 	cmpb	%dl, 0x8(%rcx)
    0000004c: 	jge	.Ltmp156 # Offset: 76
    0000004e: 	addq	$0x1, %rsi
    00000052: 	movq	(%rcx), %rdi
    00000055: 	subq	%rsi, %r8
.Ltmp159:
    00000058: 	testq	%r8, %r8
    0000005b: 	jne	.Ltmp157 # Offset: 91
.Ltmp152:
    0000005d: 	xorl	%eax, %eax
    0000005f: 	retq # Offset: 95
.Ltmp156:
    00000060: 	jle	.Ltmp158 # Offset: 96
    00000062: 	movq	%rsi, %r8
    00000065: 	jmp	.Ltmp159 # Offset: 101
.Ltmp158:
    00000067: 	movl	$0x1, %eax
    0000006c: 	retq # Offset: 108
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch2ISt18_Fwd_list_iteratorIaEaEbT_S2_T0_"

Binary Function "_Z13binarysearch3ISt18_Fwd_list_iteratorIaEaEbT_S2_T0_" after disassembly {
  Number      : 50
  State       : disassembled
  Address     : 0x2dd0
  Size        : 0x82
  MaxSize     : 0x90
  Offset      : 0x2dd0
  Section     : .text
  Orc Section : .local.text._Z13binarysearch3ISt18_Fwd_list_iteratorIaEaEbT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB049:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r9
    00000007: 	movl	%edx, %r10d
    0000000a: 	cmpq	%rdi, %rsi
    0000000d: 	je	.Ltmp160 # Offset: 13
    0000000f: 	movq	%rdi, %rax
    00000012: 	xorl	%r8d, %r8d
    00000015: 	nopl	(%rax) # Size: 3
.Ltmp161:
    00000018: 	movq	(%rax), %rax
    0000001b: 	addq	$0x1, %r8
    0000001f: 	cmpq	%r9, %rax
    00000022: 	jne	.Ltmp161 # Offset: 34
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp168:
    00000028: 	testq	%r8, %r8
    0000002b: 	je	.Ltmp162 # Offset: 43
.Ltmp166:
    0000002d: 	movq	%r8, %rsi
    00000030: 	movq	%rdi, %rcx
    00000033: 	shrq	$0x3f, %rsi
    00000037: 	addq	%r8, %rsi
    0000003a: 	sarq	%rsi
    0000003d: 	leaq	-0x1(%rsi), %rax
    00000041: 	je	.Ltmp163 # Offset: 65
    00000043: 	nopl	(%rax,%rax) # Size: 5
.Ltmp164:
    00000048: 	movq	(%rcx), %rcx
    0000004b: 	subq	$0x1, %rax
    0000004f: 	jae	.Ltmp164 # Offset: 79
.Ltmp163:
    00000051: 	cmpb	0x8(%rcx), %r10b
    00000055: 	jle	.Ltmp165 # Offset: 85
    00000057: 	addq	$0x1, %rsi
    0000005b: 	movq	(%rcx), %rdi
    0000005e: 	subq	%rsi, %r8
    00000061: 	testq	%r8, %r8
    00000064: 	jne	.Ltmp166 # Offset: 100
.Ltmp162:
    00000066: 	xorl	%eax, %eax
    00000068: 	cmpq	%rdi, %r9
    0000006b: 	je	.Ltmp167 # Offset: 107
    0000006d: 	cmpb	%dl, 0x8(%rdi)
    00000070: 	sete	%al
.Ltmp167:
    00000073: 	retq # Offset: 115
    00000074: 	nopl	(%rax) # Size: 4
.Ltmp165:
    00000078: 	movq	%rsi, %r8
    0000007b: 	jmp	.Ltmp168 # Offset: 123
.Ltmp160:
    0000007d: 	xorl	%r8d, %r8d
    00000080: 	jmp	.Ltmp168 # Offset: 128
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch3ISt18_Fwd_list_iteratorIaEaEbT_S2_T0_"

Binary Function "_Z13binarysearch4ISt18_Fwd_list_iteratorIaEaEbT_S2_T0_" after disassembly {
  Number      : 51
  State       : disassembled
  Address     : 0x2e60
  Size        : 0x5d
  MaxSize     : 0x60
  Offset      : 0x2e60
  Section     : .text
  Orc Section : .local.text._Z13binarysearch4ISt18_Fwd_list_iteratorIaEaEbT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB050:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp169 # Offset: 7
    00000009: 	movq	%rdi, %rax
    0000000c: 	xorl	%r8d, %r8d
    0000000f: 	nop # Size: 1
.Ltmp170:
    00000010: 	movq	(%rax), %rax
    00000013: 	addq	$0x1, %r8
    00000017: 	cmpq	%rsi, %rax
    0000001a: 	jne	.Ltmp170 # Offset: 26
    0000001c: 	nopl	(%rax) # Size: 4
.Ltmp174:
    00000020: 	movq	%r8, %rsi
    00000023: 	movq	%rdi, %rcx
    00000026: 	sarq	%rsi
    00000029: 	leaq	-0x1(%rsi), %rax
    0000002d: 	je	.Ltmp171 # Offset: 45
    0000002f: 	nop # Size: 1
.Ltmp172:
    00000030: 	movq	(%rcx), %rcx
    00000033: 	subq	$0x1, %rax
    00000037: 	jae	.Ltmp172 # Offset: 55
.Ltmp171:
    00000039: 	cmpb	%dl, 0x8(%rcx)
    0000003c: 	jge	.Ltmp173 # Offset: 60
    0000003e: 	addq	$0x1, %rsi
    00000042: 	movq	(%rcx), %rdi
    00000045: 	subq	%rsi, %r8
.Ltmp176:
    00000048: 	testq	%r8, %r8
    0000004b: 	jg	.Ltmp174 # Offset: 75
.Ltmp169:
    0000004d: 	xorl	%eax, %eax
    0000004f: 	retq # Offset: 79
.Ltmp173:
    00000050: 	jle	.Ltmp175 # Offset: 80
    00000052: 	movq	%rsi, %r8
    00000055: 	jmp	.Ltmp176 # Offset: 85
.Ltmp175:
    00000057: 	movl	$0x1, %eax
    0000005c: 	retq # Offset: 92
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch4ISt18_Fwd_list_iteratorIaEaEbT_S2_T0_"

Binary Function "_Z14std_lowerboundISt18_Fwd_list_iteratorItEtET_S2_S2_T0_" after disassembly {
  Number      : 52
  State       : disassembled
  Address     : 0x2ec0
  Size        : 0x72
  MaxSize     : 0x80
  Offset      : 0x2ec0
  Section     : .text
  Orc Section : .local.text._Z14std_lowerboundISt18_Fwd_list_iteratorItEtET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB051:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	cmpq	%rdi, %rsi
    0000000a: 	je	.Ltmp177 # Offset: 10
    0000000c: 	movq	%rdi, %rax
    0000000f: 	xorl	%r8d, %r8d
    00000012: 	nopw	(%rax,%rax) # Size: 6
.Ltmp178:
    00000018: 	movq	(%rax), %rax
    0000001b: 	addq	$0x1, %r8
    0000001f: 	cmpq	%rsi, %rax
    00000022: 	jne	.Ltmp178 # Offset: 34
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp184:
    00000028: 	testq	%r8, %r8
    0000002b: 	jle	.Ltmp179 # Offset: 43
.Ltmp183:
    0000002d: 	movq	%r8, %rsi
    00000030: 	movq	%r9, %rcx
    00000033: 	sarq	%rsi
    00000036: 	leaq	-0x1(%rsi), %rax
    0000003a: 	je	.Ltmp180 # Offset: 58
    0000003c: 	nopl	(%rax) # Size: 4
.Ltmp181:
    00000040: 	movq	(%rcx), %rcx
    00000043: 	subq	$0x1, %rax
    00000047: 	jae	.Ltmp181 # Offset: 71
.Ltmp180:
    00000049: 	cmpw	%dx, 0x8(%rcx)
    0000004d: 	jae	.Ltmp182 # Offset: 77
    0000004f: 	subq	%rsi, %r8
    00000052: 	movq	(%rcx), %r9
    00000055: 	subq	$0x1, %r8
    00000059: 	testq	%r8, %r8
    0000005c: 	jg	.Ltmp183 # Offset: 92
.Ltmp179:
    0000005e: 	movq	%r9, %rax
    00000061: 	retq # Offset: 97
    00000062: 	nopw	(%rax,%rax) # Size: 6
.Ltmp182:
    00000068: 	movq	%rsi, %r8
    0000006b: 	jmp	.Ltmp184 # Offset: 107
.Ltmp177:
    0000006d: 	xorl	%r8d, %r8d
    00000070: 	jmp	.Ltmp184 # Offset: 112
DWARF CFI Instructions:
    <empty>
End of Function "_Z14std_lowerboundISt18_Fwd_list_iteratorItEtET_S2_S2_T0_"

Binary Function "_Z12lower_bound1ISt18_Fwd_list_iteratorItEtET_S2_S2_T0_" after disassembly {
  Number      : 53
  State       : disassembled
  Address     : 0x2f40
  Size        : 0x7c
  MaxSize     : 0x80
  Offset      : 0x2f40
  Section     : .text
  Orc Section : .local.text._Z12lower_bound1ISt18_Fwd_list_iteratorItEtET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB052:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r8
    00000007: 	nopw	(%rax,%rax) # Size: 9
.Ltmp192:
    00000010: 	cmpq	%r8, %rdi
    00000013: 	je	.Ltmp185 # Offset: 19
.Ltmp190:
    00000015: 	movq	%rdi, %rax
    00000018: 	xorl	%ecx, %ecx
    0000001a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp186:
    00000020: 	movq	(%rax), %rax
    00000023: 	addq	$0x1, %rcx
    00000027: 	cmpq	%r8, %rax
    0000002a: 	jne	.Ltmp186 # Offset: 42
    0000002c: 	sarq	%rcx
    0000002f: 	leaq	-0x1(%rcx), %rax
    00000033: 	je	.Ltmp187 # Offset: 51
    00000035: 	movq	%rdi, %rcx
    00000038: 	nopl	(%rax,%rax) # Size: 8
.Ltmp188:
    00000040: 	movq	(%rcx), %rcx
    00000043: 	subq	$0x1, %rax
    00000047: 	jae	.Ltmp188 # Offset: 71
    00000049: 	cmpw	%dx, 0x8(%rcx)
    0000004d: 	jb	.Ltmp189 # Offset: 77
    0000004f: 	movq	%rcx, %r8
    00000052: 	cmpq	%r8, %rdi
    00000055: 	jne	.Ltmp190 # Offset: 85
.Ltmp185:
    00000057: 	movq	%r8, %rax
    0000005a: 	retq # Offset: 90
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp187:
    00000060: 	cmpw	0x8(%rdi), %dx
    00000064: 	jbe	.Ltmp191 # Offset: 100
    00000066: 	movq	%rdi, %rcx
    00000069: 	nopl	(%rax) # Size: 7
.Ltmp189:
    00000070: 	movq	(%rcx), %rdi
    00000073: 	jmp	.Ltmp192 # Offset: 115
.Ltmp191:
    00000075: 	movq	%rdi, %r8
    00000078: 	movq	%r8, %rax
    0000007b: 	retq # Offset: 123
DWARF CFI Instructions:
    <empty>
End of Function "_Z12lower_bound1ISt18_Fwd_list_iteratorItEtET_S2_S2_T0_"

Binary Function "_Z12lower_bound2ISt18_Fwd_list_iteratorItEtET_S2_S2_T0_" after disassembly {
  Number      : 54
  State       : disassembled
  Address     : 0x2fc0
  Size        : 0x80
  MaxSize     : 0x80
  Offset      : 0x2fc0
  Section     : .text
  Orc Section : .local.text._Z12lower_bound2ISt18_Fwd_list_iteratorItEtET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB053:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r10
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp193 # Offset: 10
    0000000c: 	movq	%rdi, %rax
    0000000f: 	xorl	%r8d, %r8d
    00000012: 	nopw	(%rax,%rax) # Size: 6
.Ltmp194:
    00000018: 	movq	(%rax), %rax
    0000001b: 	addq	$0x1, %r8
    0000001f: 	cmpq	%rsi, %rax
    00000022: 	jne	.Ltmp194 # Offset: 34
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp198:
    00000028: 	movq	%r8, %rsi
    0000002b: 	shrq	$0x3f, %rsi
    0000002f: 	addq	%r8, %rsi
    00000032: 	sarq	%rsi
    00000035: 	movq	%rsi, %r9
    00000038: 	leaq	-0x1(%rsi), %rax
    0000003c: 	je	.Ltmp195 # Offset: 60
    0000003e: 	movq	%r10, %rcx
    00000041: 	nopl	(%rax) # Size: 7
.Ltmp196:
    00000048: 	movq	(%rcx), %rcx
    0000004b: 	subq	$0x1, %rax
    0000004f: 	jae	.Ltmp196 # Offset: 79
    00000051: 	cmpw	%dx, 0x8(%rcx)
    00000055: 	jae	.Ltmp197 # Offset: 85
.Ltmp200:
    00000057: 	addq	$0x1, %rsi
    0000005b: 	movq	%r8, %r9
    0000005e: 	movq	(%rcx), %r10
    00000061: 	subq	%rsi, %r9
    00000064: 	je	.Ltmp193 # Offset: 100
.Ltmp197:
    00000066: 	movq	%r9, %r8
    00000069: 	jmp	.Ltmp198 # Offset: 105
    0000006b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp195:
    00000070: 	cmpw	0x8(%r10), %dx
    00000075: 	ja	.Ltmp199 # Offset: 117
.Ltmp193:
    00000077: 	movq	%r10, %rax
    0000007a: 	retq # Offset: 122
.Ltmp199:
    0000007b: 	movq	%r10, %rcx
    0000007e: 	jmp	.Ltmp200 # Offset: 126
DWARF CFI Instructions:
    <empty>
End of Function "_Z12lower_bound2ISt18_Fwd_list_iteratorItEtET_S2_S2_T0_"

Binary Function "_Z14std_upperboundISt18_Fwd_list_iteratorItEtET_S2_S2_T0_" after disassembly {
  Number      : 55
  State       : disassembled
  Address     : 0x3040
  Size        : 0x72
  MaxSize     : 0x80
  Offset      : 0x3040
  Section     : .text
  Orc Section : .local.text._Z14std_upperboundISt18_Fwd_list_iteratorItEtET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB054:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	cmpq	%rdi, %rsi
    0000000a: 	je	.Ltmp201 # Offset: 10
    0000000c: 	movq	%rdi, %rax
    0000000f: 	xorl	%r8d, %r8d
    00000012: 	nopw	(%rax,%rax) # Size: 6
.Ltmp202:
    00000018: 	movq	(%rax), %rax
    0000001b: 	addq	$0x1, %r8
    0000001f: 	cmpq	%rsi, %rax
    00000022: 	jne	.Ltmp202 # Offset: 34
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp208:
    00000028: 	testq	%r8, %r8
    0000002b: 	jle	.Ltmp203 # Offset: 43
.Ltmp207:
    0000002d: 	movq	%r8, %rsi
    00000030: 	movq	%r9, %rcx
    00000033: 	sarq	%rsi
    00000036: 	leaq	-0x1(%rsi), %rax
    0000003a: 	je	.Ltmp204 # Offset: 58
    0000003c: 	nopl	(%rax) # Size: 4
.Ltmp205:
    00000040: 	movq	(%rcx), %rcx
    00000043: 	subq	$0x1, %rax
    00000047: 	jae	.Ltmp205 # Offset: 71
.Ltmp204:
    00000049: 	cmpw	%dx, 0x8(%rcx)
    0000004d: 	ja	.Ltmp206 # Offset: 77
    0000004f: 	subq	%rsi, %r8
    00000052: 	movq	(%rcx), %r9
    00000055: 	subq	$0x1, %r8
    00000059: 	testq	%r8, %r8
    0000005c: 	jg	.Ltmp207 # Offset: 92
.Ltmp203:
    0000005e: 	movq	%r9, %rax
    00000061: 	retq # Offset: 97
    00000062: 	nopw	(%rax,%rax) # Size: 6
.Ltmp206:
    00000068: 	movq	%rsi, %r8
    0000006b: 	jmp	.Ltmp208 # Offset: 107
.Ltmp201:
    0000006d: 	xorl	%r8d, %r8d
    00000070: 	jmp	.Ltmp208 # Offset: 112
DWARF CFI Instructions:
    <empty>
End of Function "_Z14std_upperboundISt18_Fwd_list_iteratorItEtET_S2_S2_T0_"

Binary Function "_Z12upper_bound1ISt18_Fwd_list_iteratorItEtET_S2_S2_T0_" after disassembly {
  Number      : 56
  State       : disassembled
  Address     : 0x30c0
  Size        : 0x7c
  MaxSize     : 0x80
  Offset      : 0x30c0
  Section     : .text
  Orc Section : .local.text._Z12upper_bound1ISt18_Fwd_list_iteratorItEtET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB055:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r8
    00000007: 	nopw	(%rax,%rax) # Size: 9
.Ltmp216:
    00000010: 	cmpq	%r8, %rdi
    00000013: 	je	.Ltmp209 # Offset: 19
.Ltmp214:
    00000015: 	movq	%rdi, %rax
    00000018: 	xorl	%ecx, %ecx
    0000001a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp210:
    00000020: 	movq	(%rax), %rax
    00000023: 	addq	$0x1, %rcx
    00000027: 	cmpq	%r8, %rax
    0000002a: 	jne	.Ltmp210 # Offset: 42
    0000002c: 	sarq	%rcx
    0000002f: 	leaq	-0x1(%rcx), %rax
    00000033: 	je	.Ltmp211 # Offset: 51
    00000035: 	movq	%rdi, %rcx
    00000038: 	nopl	(%rax,%rax) # Size: 8
.Ltmp212:
    00000040: 	movq	(%rcx), %rcx
    00000043: 	subq	$0x1, %rax
    00000047: 	jae	.Ltmp212 # Offset: 71
    00000049: 	cmpw	%dx, 0x8(%rcx)
    0000004d: 	jbe	.Ltmp213 # Offset: 77
    0000004f: 	movq	%rcx, %r8
    00000052: 	cmpq	%r8, %rdi
    00000055: 	jne	.Ltmp214 # Offset: 85
.Ltmp209:
    00000057: 	movq	%r8, %rax
    0000005a: 	retq # Offset: 90
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp211:
    00000060: 	cmpw	0x8(%rdi), %dx
    00000064: 	jb	.Ltmp215 # Offset: 100
    00000066: 	movq	%rdi, %rcx
    00000069: 	nopl	(%rax) # Size: 7
.Ltmp213:
    00000070: 	movq	(%rcx), %rdi
    00000073: 	jmp	.Ltmp216 # Offset: 115
.Ltmp215:
    00000075: 	movq	%rdi, %r8
    00000078: 	movq	%r8, %rax
    0000007b: 	retq # Offset: 123
DWARF CFI Instructions:
    <empty>
End of Function "_Z12upper_bound1ISt18_Fwd_list_iteratorItEtET_S2_S2_T0_"

Binary Function "_Z12upper_bound2ISt18_Fwd_list_iteratorItEtET_S2_S2_T0_" after disassembly {
  Number      : 57
  State       : disassembled
  Address     : 0x3140
  Size        : 0x80
  MaxSize     : 0x80
  Offset      : 0x3140
  Section     : .text
  Orc Section : .local.text._Z12upper_bound2ISt18_Fwd_list_iteratorItEtET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB056:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r10
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp217 # Offset: 10
    0000000c: 	movq	%rdi, %rax
    0000000f: 	xorl	%r8d, %r8d
    00000012: 	nopw	(%rax,%rax) # Size: 6
.Ltmp218:
    00000018: 	movq	(%rax), %rax
    0000001b: 	addq	$0x1, %r8
    0000001f: 	cmpq	%rsi, %rax
    00000022: 	jne	.Ltmp218 # Offset: 34
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp222:
    00000028: 	movq	%r8, %rsi
    0000002b: 	shrq	$0x3f, %rsi
    0000002f: 	addq	%r8, %rsi
    00000032: 	sarq	%rsi
    00000035: 	movq	%rsi, %r9
    00000038: 	leaq	-0x1(%rsi), %rax
    0000003c: 	je	.Ltmp219 # Offset: 60
    0000003e: 	movq	%r10, %rcx
    00000041: 	nopl	(%rax) # Size: 7
.Ltmp220:
    00000048: 	movq	(%rcx), %rcx
    0000004b: 	subq	$0x1, %rax
    0000004f: 	jae	.Ltmp220 # Offset: 79
    00000051: 	cmpw	%dx, 0x8(%rcx)
    00000055: 	ja	.Ltmp221 # Offset: 85
.Ltmp224:
    00000057: 	addq	$0x1, %rsi
    0000005b: 	movq	%r8, %r9
    0000005e: 	movq	(%rcx), %r10
    00000061: 	subq	%rsi, %r9
    00000064: 	je	.Ltmp217 # Offset: 100
.Ltmp221:
    00000066: 	movq	%r9, %r8
    00000069: 	jmp	.Ltmp222 # Offset: 105
    0000006b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp219:
    00000070: 	cmpw	0x8(%r10), %dx
    00000075: 	jae	.Ltmp223 # Offset: 117
.Ltmp217:
    00000077: 	movq	%r10, %rax
    0000007a: 	retq # Offset: 122
.Ltmp223:
    0000007b: 	movq	%r10, %rcx
    0000007e: 	jmp	.Ltmp224 # Offset: 126
DWARF CFI Instructions:
    <empty>
End of Function "_Z12upper_bound2ISt18_Fwd_list_iteratorItEtET_S2_S2_T0_"

Binary Function "_Z13binarysearch1ISt18_Fwd_list_iteratorItEtEbT_S2_T0_" after disassembly {
  Number      : 58
  State       : disassembled
  Address     : 0x31c0
  Size        : 0x5d
  MaxSize     : 0x60
  Offset      : 0x31c0
  Section     : .text
  Orc Section : .local.text._Z13binarysearch1ISt18_Fwd_list_iteratorItEtEbT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB057:
    00000000: 	endbr64
    00000004: 	cmpq	%rdi, %rsi
    00000007: 	je	.Ltmp225 # Offset: 7
    00000009: 	nopl	(%rax) # Size: 7
.Ltmp230:
    00000010: 	movq	%rdi, %rax
    00000013: 	xorl	%ecx, %ecx
    00000015: 	nopl	(%rax) # Size: 3
.Ltmp226:
    00000018: 	movq	(%rax), %rax
    0000001b: 	addq	$0x1, %rcx
    0000001f: 	cmpq	%rsi, %rax
    00000022: 	jne	.Ltmp226 # Offset: 34
    00000024: 	sarq	%rcx
    00000027: 	leaq	-0x1(%rcx), %rax
    0000002b: 	movq	%rdi, %rcx
    0000002e: 	je	.Ltmp227 # Offset: 46
.Ltmp228:
    00000030: 	movq	(%rcx), %rcx
    00000033: 	subq	$0x1, %rax
    00000037: 	jae	.Ltmp228 # Offset: 55
.Ltmp227:
    00000039: 	cmpw	%dx, 0x8(%rcx)
    0000003d: 	jae	.Ltmp229 # Offset: 61
    0000003f: 	movq	(%rcx), %rdi
.Ltmp232:
    00000042: 	cmpq	%rsi, %rdi
    00000045: 	jne	.Ltmp230 # Offset: 69
.Ltmp225:
    00000047: 	xorl	%eax, %eax
    00000049: 	retq # Offset: 73
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp229:
    00000050: 	jbe	.Ltmp231 # Offset: 80
    00000052: 	movq	%rcx, %rsi
    00000055: 	jmp	.Ltmp232 # Offset: 85
.Ltmp231:
    00000057: 	movl	$0x1, %eax
    0000005c: 	retq # Offset: 92
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch1ISt18_Fwd_list_iteratorItEtEbT_S2_T0_"

Binary Function "_Z13binarysearch2ISt18_Fwd_list_iteratorItEtEbT_S2_T0_" after disassembly {
  Number      : 59
  State       : disassembled
  Address     : 0x3220
  Size        : 0x75
  MaxSize     : 0x80
  Offset      : 0x3220
  Section     : .text
  Orc Section : .local.text._Z13binarysearch2ISt18_Fwd_list_iteratorItEtEbT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB058:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp233 # Offset: 7
    00000009: 	movq	%rdi, %rax
    0000000c: 	xorl	%r8d, %r8d
    0000000f: 	nop # Size: 1
.Ltmp234:
    00000010: 	movq	(%rax), %rax
    00000013: 	addq	$0x1, %r8
    00000017: 	cmpq	%rsi, %rax
    0000001a: 	jne	.Ltmp234 # Offset: 26
    0000001c: 	nopl	(%rax) # Size: 4
.Ltmp238:
    00000020: 	movq	%r8, %rsi
    00000023: 	movq	%rdi, %rcx
    00000026: 	shrq	$0x3f, %rsi
    0000002a: 	addq	%r8, %rsi
    0000002d: 	sarq	%rsi
    00000030: 	leaq	-0x1(%rsi), %rax
    00000034: 	je	.Ltmp235 # Offset: 52
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp236:
    00000040: 	movq	(%rcx), %rcx
    00000043: 	subq	$0x1, %rax
    00000047: 	jae	.Ltmp236 # Offset: 71
.Ltmp235:
    00000049: 	cmpw	%dx, 0x8(%rcx)
    0000004d: 	jae	.Ltmp237 # Offset: 77
    0000004f: 	addq	$0x1, %rsi
    00000053: 	movq	(%rcx), %rdi
    00000056: 	subq	%rsi, %r8
.Ltmp240:
    00000059: 	testq	%r8, %r8
    0000005c: 	jne	.Ltmp238 # Offset: 92
.Ltmp233:
    0000005e: 	xorl	%eax, %eax
    00000060: 	retq # Offset: 96
    00000061: 	nopl	(%rax) # Size: 7
.Ltmp237:
    00000068: 	jbe	.Ltmp239 # Offset: 104
    0000006a: 	movq	%rsi, %r8
    0000006d: 	jmp	.Ltmp240 # Offset: 109
.Ltmp239:
    0000006f: 	movl	$0x1, %eax
    00000074: 	retq # Offset: 116
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch2ISt18_Fwd_list_iteratorItEtEbT_S2_T0_"

Binary Function "_Z13binarysearch3ISt18_Fwd_list_iteratorItEtEbT_S2_T0_" after disassembly {
  Number      : 60
  State       : disassembled
  Address     : 0x32a0
  Size        : 0x8a
  MaxSize     : 0x90
  Offset      : 0x32a0
  Section     : .text
  Orc Section : .local.text._Z13binarysearch3ISt18_Fwd_list_iteratorItEtEbT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB059:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r9
    00000007: 	movl	%edx, %r10d
    0000000a: 	cmpq	%rdi, %rsi
    0000000d: 	je	.Ltmp241 # Offset: 13
    0000000f: 	movq	%rdi, %rax
    00000012: 	xorl	%r8d, %r8d
    00000015: 	nopl	(%rax) # Size: 3
.Ltmp242:
    00000018: 	movq	(%rax), %rax
    0000001b: 	addq	$0x1, %r8
    0000001f: 	cmpq	%r9, %rax
    00000022: 	jne	.Ltmp242 # Offset: 34
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp249:
    00000028: 	testq	%r8, %r8
    0000002b: 	je	.Ltmp243 # Offset: 43
.Ltmp247:
    0000002d: 	movq	%r8, %rsi
    00000030: 	movq	%rdi, %rcx
    00000033: 	shrq	$0x3f, %rsi
    00000037: 	addq	%r8, %rsi
    0000003a: 	sarq	%rsi
    0000003d: 	leaq	-0x1(%rsi), %rax
    00000041: 	je	.Ltmp244 # Offset: 65
    00000043: 	nopl	(%rax,%rax) # Size: 5
.Ltmp245:
    00000048: 	movq	(%rcx), %rcx
    0000004b: 	subq	$0x1, %rax
    0000004f: 	jae	.Ltmp245 # Offset: 79
.Ltmp244:
    00000051: 	cmpw	0x8(%rcx), %r10w
    00000056: 	jbe	.Ltmp246 # Offset: 86
    00000058: 	addq	$0x1, %rsi
    0000005c: 	movq	(%rcx), %rdi
    0000005f: 	subq	%rsi, %r8
    00000062: 	testq	%r8, %r8
    00000065: 	jne	.Ltmp247 # Offset: 101
.Ltmp243:
    00000067: 	xorl	%eax, %eax
    00000069: 	cmpq	%rdi, %r9
    0000006c: 	je	.Ltmp248 # Offset: 108
    0000006e: 	cmpw	%dx, 0x8(%rdi)
    00000072: 	sete	%al
.Ltmp248:
    00000075: 	retq # Offset: 117
    00000076: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp246:
    00000080: 	movq	%rsi, %r8
    00000083: 	jmp	.Ltmp249 # Offset: 131
.Ltmp241:
    00000085: 	xorl	%r8d, %r8d
    00000088: 	jmp	.Ltmp249 # Offset: 136
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch3ISt18_Fwd_list_iteratorItEtEbT_S2_T0_"

Binary Function "_Z13binarysearch4ISt18_Fwd_list_iteratorItEtEbT_S2_T0_" after disassembly {
  Number      : 61
  State       : disassembled
  Address     : 0x3330
  Size        : 0x65
  MaxSize     : 0x70
  Offset      : 0x3330
  Section     : .text
  Orc Section : .local.text._Z13binarysearch4ISt18_Fwd_list_iteratorItEtEbT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB060:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp250 # Offset: 7
    00000009: 	movq	%rdi, %rax
    0000000c: 	xorl	%r8d, %r8d
    0000000f: 	nop # Size: 1
.Ltmp251:
    00000010: 	movq	(%rax), %rax
    00000013: 	addq	$0x1, %r8
    00000017: 	cmpq	%rsi, %rax
    0000001a: 	jne	.Ltmp251 # Offset: 26
    0000001c: 	nopl	(%rax) # Size: 4
.Ltmp255:
    00000020: 	movq	%r8, %rsi
    00000023: 	movq	%rdi, %rcx
    00000026: 	sarq	%rsi
    00000029: 	leaq	-0x1(%rsi), %rax
    0000002d: 	je	.Ltmp252 # Offset: 45
    0000002f: 	nop # Size: 1
.Ltmp253:
    00000030: 	movq	(%rcx), %rcx
    00000033: 	subq	$0x1, %rax
    00000037: 	jae	.Ltmp253 # Offset: 55
.Ltmp252:
    00000039: 	cmpw	%dx, 0x8(%rcx)
    0000003d: 	jae	.Ltmp254 # Offset: 61
    0000003f: 	addq	$0x1, %rsi
    00000043: 	movq	(%rcx), %rdi
    00000046: 	subq	%rsi, %r8
.Ltmp257:
    00000049: 	testq	%r8, %r8
    0000004c: 	jg	.Ltmp255 # Offset: 76
.Ltmp250:
    0000004e: 	xorl	%eax, %eax
    00000050: 	retq # Offset: 80
    00000051: 	nopl	(%rax) # Size: 7
.Ltmp254:
    00000058: 	jbe	.Ltmp256 # Offset: 88
    0000005a: 	movq	%rsi, %r8
    0000005d: 	jmp	.Ltmp257 # Offset: 93
.Ltmp256:
    0000005f: 	movl	$0x1, %eax
    00000064: 	retq # Offset: 100
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch4ISt18_Fwd_list_iteratorItEtEbT_S2_T0_"

Binary Function "_Z14std_lowerboundISt18_Fwd_list_iteratorIiEiET_S2_S2_T0_" after disassembly {
  Number      : 62
  State       : disassembled
  Address     : 0x33a0
  Size        : 0x72
  MaxSize     : 0x80
  Offset      : 0x33a0
  Section     : .text
  Orc Section : .local.text._Z14std_lowerboundISt18_Fwd_list_iteratorIiEiET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB061:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	cmpq	%rdi, %rsi
    0000000a: 	je	.Ltmp258 # Offset: 10
    0000000c: 	movq	%rdi, %rax
    0000000f: 	xorl	%r8d, %r8d
    00000012: 	nopw	(%rax,%rax) # Size: 6
.Ltmp259:
    00000018: 	movq	(%rax), %rax
    0000001b: 	addq	$0x1, %r8
    0000001f: 	cmpq	%rsi, %rax
    00000022: 	jne	.Ltmp259 # Offset: 34
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp265:
    00000028: 	testq	%r8, %r8
    0000002b: 	jle	.Ltmp260 # Offset: 43
.Ltmp264:
    0000002d: 	movq	%r8, %rsi
    00000030: 	movq	%r9, %rcx
    00000033: 	sarq	%rsi
    00000036: 	leaq	-0x1(%rsi), %rax
    0000003a: 	je	.Ltmp261 # Offset: 58
    0000003c: 	nopl	(%rax) # Size: 4
.Ltmp262:
    00000040: 	movq	(%rcx), %rcx
    00000043: 	subq	$0x1, %rax
    00000047: 	jae	.Ltmp262 # Offset: 71
.Ltmp261:
    00000049: 	cmpl	%edx, 0x8(%rcx)
    0000004c: 	jge	.Ltmp263 # Offset: 76
    0000004e: 	subq	%rsi, %r8
    00000051: 	movq	(%rcx), %r9
    00000054: 	subq	$0x1, %r8
    00000058: 	testq	%r8, %r8
    0000005b: 	jg	.Ltmp264 # Offset: 91
.Ltmp260:
    0000005d: 	movq	%r9, %rax
    00000060: 	retq # Offset: 96
    00000061: 	nopl	(%rax) # Size: 7
.Ltmp263:
    00000068: 	movq	%rsi, %r8
    0000006b: 	jmp	.Ltmp265 # Offset: 107
.Ltmp258:
    0000006d: 	xorl	%r8d, %r8d
    00000070: 	jmp	.Ltmp265 # Offset: 112
DWARF CFI Instructions:
    <empty>
End of Function "_Z14std_lowerboundISt18_Fwd_list_iteratorIiEiET_S2_S2_T0_"

Binary Function "_Z12lower_bound1ISt18_Fwd_list_iteratorIiEiET_S2_S2_T0_" after disassembly {
  Number      : 63
  State       : disassembled
  Address     : 0x3420
  Size        : 0x7c
  MaxSize     : 0x80
  Offset      : 0x3420
  Section     : .text
  Orc Section : .local.text._Z12lower_bound1ISt18_Fwd_list_iteratorIiEiET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB062:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r8
    00000007: 	nopw	(%rax,%rax) # Size: 9
.Ltmp273:
    00000010: 	cmpq	%r8, %rdi
    00000013: 	je	.Ltmp266 # Offset: 19
.Ltmp271:
    00000015: 	movq	%rdi, %rax
    00000018: 	xorl	%ecx, %ecx
    0000001a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp267:
    00000020: 	movq	(%rax), %rax
    00000023: 	addq	$0x1, %rcx
    00000027: 	cmpq	%r8, %rax
    0000002a: 	jne	.Ltmp267 # Offset: 42
    0000002c: 	sarq	%rcx
    0000002f: 	leaq	-0x1(%rcx), %rax
    00000033: 	je	.Ltmp268 # Offset: 51
    00000035: 	movq	%rdi, %rcx
    00000038: 	nopl	(%rax,%rax) # Size: 8
.Ltmp269:
    00000040: 	movq	(%rcx), %rcx
    00000043: 	subq	$0x1, %rax
    00000047: 	jae	.Ltmp269 # Offset: 71
    00000049: 	cmpl	%edx, 0x8(%rcx)
    0000004c: 	jl	.Ltmp270 # Offset: 76
    0000004e: 	movq	%rcx, %r8
    00000051: 	cmpq	%r8, %rdi
    00000054: 	jne	.Ltmp271 # Offset: 84
.Ltmp266:
    00000056: 	movq	%r8, %rax
    00000059: 	retq # Offset: 89
    0000005a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp268:
    00000060: 	cmpl	0x8(%rdi), %edx
    00000063: 	jle	.Ltmp272 # Offset: 99
    00000065: 	movq	%rdi, %rcx
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp270:
    00000070: 	movq	(%rcx), %rdi
    00000073: 	jmp	.Ltmp273 # Offset: 115
.Ltmp272:
    00000075: 	movq	%rdi, %r8
    00000078: 	movq	%r8, %rax
    0000007b: 	retq # Offset: 123
DWARF CFI Instructions:
    <empty>
End of Function "_Z12lower_bound1ISt18_Fwd_list_iteratorIiEiET_S2_S2_T0_"

Binary Function "_Z12lower_bound2ISt18_Fwd_list_iteratorIiEiET_S2_S2_T0_" after disassembly {
  Number      : 64
  State       : disassembled
  Address     : 0x34a0
  Size        : 0x7f
  MaxSize     : 0x80
  Offset      : 0x34a0
  Section     : .text
  Orc Section : .local.text._Z12lower_bound2ISt18_Fwd_list_iteratorIiEiET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB063:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r10
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp274 # Offset: 10
    0000000c: 	movq	%rdi, %rax
    0000000f: 	xorl	%r8d, %r8d
    00000012: 	nopw	(%rax,%rax) # Size: 6
.Ltmp275:
    00000018: 	movq	(%rax), %rax
    0000001b: 	addq	$0x1, %r8
    0000001f: 	cmpq	%rsi, %rax
    00000022: 	jne	.Ltmp275 # Offset: 34
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp279:
    00000028: 	movq	%r8, %rsi
    0000002b: 	shrq	$0x3f, %rsi
    0000002f: 	addq	%r8, %rsi
    00000032: 	sarq	%rsi
    00000035: 	movq	%rsi, %r9
    00000038: 	leaq	-0x1(%rsi), %rax
    0000003c: 	je	.Ltmp276 # Offset: 60
    0000003e: 	movq	%r10, %rcx
    00000041: 	nopl	(%rax) # Size: 7
.Ltmp277:
    00000048: 	movq	(%rcx), %rcx
    0000004b: 	subq	$0x1, %rax
    0000004f: 	jae	.Ltmp277 # Offset: 79
    00000051: 	cmpl	%edx, 0x8(%rcx)
    00000054: 	jge	.Ltmp278 # Offset: 84
.Ltmp281:
    00000056: 	addq	$0x1, %rsi
    0000005a: 	movq	%r8, %r9
    0000005d: 	movq	(%rcx), %r10
    00000060: 	subq	%rsi, %r9
    00000063: 	je	.Ltmp274 # Offset: 99
.Ltmp278:
    00000065: 	movq	%r9, %r8
    00000068: 	jmp	.Ltmp279 # Offset: 104
    0000006a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp276:
    00000070: 	cmpl	0x8(%r10), %edx
    00000074: 	jg	.Ltmp280 # Offset: 116
.Ltmp274:
    00000076: 	movq	%r10, %rax
    00000079: 	retq # Offset: 121
.Ltmp280:
    0000007a: 	movq	%r10, %rcx
    0000007d: 	jmp	.Ltmp281 # Offset: 125
DWARF CFI Instructions:
    <empty>
End of Function "_Z12lower_bound2ISt18_Fwd_list_iteratorIiEiET_S2_S2_T0_"

Binary Function "_Z14std_upperboundISt18_Fwd_list_iteratorIiEiET_S2_S2_T0_" after disassembly {
  Number      : 65
  State       : disassembled
  Address     : 0x3520
  Size        : 0x72
  MaxSize     : 0x80
  Offset      : 0x3520
  Section     : .text
  Orc Section : .local.text._Z14std_upperboundISt18_Fwd_list_iteratorIiEiET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB064:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	cmpq	%rdi, %rsi
    0000000a: 	je	.Ltmp282 # Offset: 10
    0000000c: 	movq	%rdi, %rax
    0000000f: 	xorl	%r8d, %r8d
    00000012: 	nopw	(%rax,%rax) # Size: 6
.Ltmp283:
    00000018: 	movq	(%rax), %rax
    0000001b: 	addq	$0x1, %r8
    0000001f: 	cmpq	%rsi, %rax
    00000022: 	jne	.Ltmp283 # Offset: 34
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp289:
    00000028: 	testq	%r8, %r8
    0000002b: 	jle	.Ltmp284 # Offset: 43
.Ltmp288:
    0000002d: 	movq	%r8, %rsi
    00000030: 	movq	%r9, %rcx
    00000033: 	sarq	%rsi
    00000036: 	leaq	-0x1(%rsi), %rax
    0000003a: 	je	.Ltmp285 # Offset: 58
    0000003c: 	nopl	(%rax) # Size: 4
.Ltmp286:
    00000040: 	movq	(%rcx), %rcx
    00000043: 	subq	$0x1, %rax
    00000047: 	jae	.Ltmp286 # Offset: 71
.Ltmp285:
    00000049: 	cmpl	%edx, 0x8(%rcx)
    0000004c: 	jg	.Ltmp287 # Offset: 76
    0000004e: 	subq	%rsi, %r8
    00000051: 	movq	(%rcx), %r9
    00000054: 	subq	$0x1, %r8
    00000058: 	testq	%r8, %r8
    0000005b: 	jg	.Ltmp288 # Offset: 91
.Ltmp284:
    0000005d: 	movq	%r9, %rax
    00000060: 	retq # Offset: 96
    00000061: 	nopl	(%rax) # Size: 7
.Ltmp287:
    00000068: 	movq	%rsi, %r8
    0000006b: 	jmp	.Ltmp289 # Offset: 107
.Ltmp282:
    0000006d: 	xorl	%r8d, %r8d
    00000070: 	jmp	.Ltmp289 # Offset: 112
DWARF CFI Instructions:
    <empty>
End of Function "_Z14std_upperboundISt18_Fwd_list_iteratorIiEiET_S2_S2_T0_"

Binary Function "_Z12upper_bound1ISt18_Fwd_list_iteratorIiEiET_S2_S2_T0_" after disassembly {
  Number      : 66
  State       : disassembled
  Address     : 0x35a0
  Size        : 0x7c
  MaxSize     : 0x80
  Offset      : 0x35a0
  Section     : .text
  Orc Section : .local.text._Z12upper_bound1ISt18_Fwd_list_iteratorIiEiET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB065:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r8
    00000007: 	nopw	(%rax,%rax) # Size: 9
.Ltmp297:
    00000010: 	cmpq	%r8, %rdi
    00000013: 	je	.Ltmp290 # Offset: 19
.Ltmp295:
    00000015: 	movq	%rdi, %rax
    00000018: 	xorl	%ecx, %ecx
    0000001a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp291:
    00000020: 	movq	(%rax), %rax
    00000023: 	addq	$0x1, %rcx
    00000027: 	cmpq	%r8, %rax
    0000002a: 	jne	.Ltmp291 # Offset: 42
    0000002c: 	sarq	%rcx
    0000002f: 	leaq	-0x1(%rcx), %rax
    00000033: 	je	.Ltmp292 # Offset: 51
    00000035: 	movq	%rdi, %rcx
    00000038: 	nopl	(%rax,%rax) # Size: 8
.Ltmp293:
    00000040: 	movq	(%rcx), %rcx
    00000043: 	subq	$0x1, %rax
    00000047: 	jae	.Ltmp293 # Offset: 71
    00000049: 	cmpl	%edx, 0x8(%rcx)
    0000004c: 	jle	.Ltmp294 # Offset: 76
    0000004e: 	movq	%rcx, %r8
    00000051: 	cmpq	%r8, %rdi
    00000054: 	jne	.Ltmp295 # Offset: 84
.Ltmp290:
    00000056: 	movq	%r8, %rax
    00000059: 	retq # Offset: 89
    0000005a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp292:
    00000060: 	cmpl	0x8(%rdi), %edx
    00000063: 	jl	.Ltmp296 # Offset: 99
    00000065: 	movq	%rdi, %rcx
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp294:
    00000070: 	movq	(%rcx), %rdi
    00000073: 	jmp	.Ltmp297 # Offset: 115
.Ltmp296:
    00000075: 	movq	%rdi, %r8
    00000078: 	movq	%r8, %rax
    0000007b: 	retq # Offset: 123
DWARF CFI Instructions:
    <empty>
End of Function "_Z12upper_bound1ISt18_Fwd_list_iteratorIiEiET_S2_S2_T0_"

Binary Function "_Z12upper_bound2ISt18_Fwd_list_iteratorIiEiET_S2_S2_T0_" after disassembly {
  Number      : 67
  State       : disassembled
  Address     : 0x3620
  Size        : 0x7f
  MaxSize     : 0x80
  Offset      : 0x3620
  Section     : .text
  Orc Section : .local.text._Z12upper_bound2ISt18_Fwd_list_iteratorIiEiET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB066:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r10
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp298 # Offset: 10
    0000000c: 	movq	%rdi, %rax
    0000000f: 	xorl	%r8d, %r8d
    00000012: 	nopw	(%rax,%rax) # Size: 6
.Ltmp299:
    00000018: 	movq	(%rax), %rax
    0000001b: 	addq	$0x1, %r8
    0000001f: 	cmpq	%rsi, %rax
    00000022: 	jne	.Ltmp299 # Offset: 34
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp303:
    00000028: 	movq	%r8, %rsi
    0000002b: 	shrq	$0x3f, %rsi
    0000002f: 	addq	%r8, %rsi
    00000032: 	sarq	%rsi
    00000035: 	movq	%rsi, %r9
    00000038: 	leaq	-0x1(%rsi), %rax
    0000003c: 	je	.Ltmp300 # Offset: 60
    0000003e: 	movq	%r10, %rcx
    00000041: 	nopl	(%rax) # Size: 7
.Ltmp301:
    00000048: 	movq	(%rcx), %rcx
    0000004b: 	subq	$0x1, %rax
    0000004f: 	jae	.Ltmp301 # Offset: 79
    00000051: 	cmpl	%edx, 0x8(%rcx)
    00000054: 	jg	.Ltmp302 # Offset: 84
.Ltmp305:
    00000056: 	addq	$0x1, %rsi
    0000005a: 	movq	%r8, %r9
    0000005d: 	movq	(%rcx), %r10
    00000060: 	subq	%rsi, %r9
    00000063: 	je	.Ltmp298 # Offset: 99
.Ltmp302:
    00000065: 	movq	%r9, %r8
    00000068: 	jmp	.Ltmp303 # Offset: 104
    0000006a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp300:
    00000070: 	cmpl	0x8(%r10), %edx
    00000074: 	jge	.Ltmp304 # Offset: 116
.Ltmp298:
    00000076: 	movq	%r10, %rax
    00000079: 	retq # Offset: 121
.Ltmp304:
    0000007a: 	movq	%r10, %rcx
    0000007d: 	jmp	.Ltmp305 # Offset: 125
DWARF CFI Instructions:
    <empty>
End of Function "_Z12upper_bound2ISt18_Fwd_list_iteratorIiEiET_S2_S2_T0_"

Binary Function "_Z13binarysearch1ISt18_Fwd_list_iteratorIiEiEbT_S2_T0_" after disassembly {
  Number      : 68
  State       : disassembled
  Address     : 0x36a0
  Size        : 0x5d
  MaxSize     : 0x60
  Offset      : 0x36a0
  Section     : .text
  Orc Section : .local.text._Z13binarysearch1ISt18_Fwd_list_iteratorIiEiEbT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB067:
    00000000: 	endbr64
    00000004: 	cmpq	%rdi, %rsi
    00000007: 	je	.Ltmp306 # Offset: 7
    00000009: 	nopl	(%rax) # Size: 7
.Ltmp311:
    00000010: 	movq	%rdi, %rax
    00000013: 	xorl	%ecx, %ecx
    00000015: 	nopl	(%rax) # Size: 3
.Ltmp307:
    00000018: 	movq	(%rax), %rax
    0000001b: 	addq	$0x1, %rcx
    0000001f: 	cmpq	%rsi, %rax
    00000022: 	jne	.Ltmp307 # Offset: 34
    00000024: 	sarq	%rcx
    00000027: 	leaq	-0x1(%rcx), %rax
    0000002b: 	movq	%rdi, %rcx
    0000002e: 	je	.Ltmp308 # Offset: 46
.Ltmp309:
    00000030: 	movq	(%rcx), %rcx
    00000033: 	subq	$0x1, %rax
    00000037: 	jae	.Ltmp309 # Offset: 55
.Ltmp308:
    00000039: 	cmpl	%edx, 0x8(%rcx)
    0000003c: 	jge	.Ltmp310 # Offset: 60
    0000003e: 	movq	(%rcx), %rdi
.Ltmp313:
    00000041: 	cmpq	%rsi, %rdi
    00000044: 	jne	.Ltmp311 # Offset: 68
.Ltmp306:
    00000046: 	xorl	%eax, %eax
    00000048: 	retq # Offset: 72
    00000049: 	nopl	(%rax) # Size: 7
.Ltmp310:
    00000050: 	jle	.Ltmp312 # Offset: 80
    00000052: 	movq	%rcx, %rsi
    00000055: 	jmp	.Ltmp313 # Offset: 85
.Ltmp312:
    00000057: 	movl	$0x1, %eax
    0000005c: 	retq # Offset: 92
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch1ISt18_Fwd_list_iteratorIiEiEbT_S2_T0_"

Binary Function "_Z13binarysearch2ISt18_Fwd_list_iteratorIiEiEbT_S2_T0_" after disassembly {
  Number      : 69
  State       : disassembled
  Address     : 0x3700
  Size        : 0x6d
  MaxSize     : 0x70
  Offset      : 0x3700
  Section     : .text
  Orc Section : .local.text._Z13binarysearch2ISt18_Fwd_list_iteratorIiEiEbT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB068:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp314 # Offset: 7
    00000009: 	movq	%rdi, %rax
    0000000c: 	xorl	%r8d, %r8d
    0000000f: 	nop # Size: 1
.Ltmp315:
    00000010: 	movq	(%rax), %rax
    00000013: 	addq	$0x1, %r8
    00000017: 	cmpq	%rsi, %rax
    0000001a: 	jne	.Ltmp315 # Offset: 26
    0000001c: 	nopl	(%rax) # Size: 4
.Ltmp319:
    00000020: 	movq	%r8, %rsi
    00000023: 	movq	%rdi, %rcx
    00000026: 	shrq	$0x3f, %rsi
    0000002a: 	addq	%r8, %rsi
    0000002d: 	sarq	%rsi
    00000030: 	leaq	-0x1(%rsi), %rax
    00000034: 	je	.Ltmp316 # Offset: 52
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp317:
    00000040: 	movq	(%rcx), %rcx
    00000043: 	subq	$0x1, %rax
    00000047: 	jae	.Ltmp317 # Offset: 71
.Ltmp316:
    00000049: 	cmpl	%edx, 0x8(%rcx)
    0000004c: 	jge	.Ltmp318 # Offset: 76
    0000004e: 	addq	$0x1, %rsi
    00000052: 	movq	(%rcx), %rdi
    00000055: 	subq	%rsi, %r8
.Ltmp321:
    00000058: 	testq	%r8, %r8
    0000005b: 	jne	.Ltmp319 # Offset: 91
.Ltmp314:
    0000005d: 	xorl	%eax, %eax
    0000005f: 	retq # Offset: 95
.Ltmp318:
    00000060: 	jle	.Ltmp320 # Offset: 96
    00000062: 	movq	%rsi, %r8
    00000065: 	jmp	.Ltmp321 # Offset: 101
.Ltmp320:
    00000067: 	movl	$0x1, %eax
    0000006c: 	retq # Offset: 108
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch2ISt18_Fwd_list_iteratorIiEiEbT_S2_T0_"

Binary Function "_Z13binarysearch3ISt18_Fwd_list_iteratorIiEiEbT_S2_T0_" after disassembly {
  Number      : 70
  State       : disassembled
  Address     : 0x3770
  Size        : 0x7a
  MaxSize     : 0x80
  Offset      : 0x3770
  Section     : .text
  Orc Section : .local.text._Z13binarysearch3ISt18_Fwd_list_iteratorIiEiEbT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB069:
    00000000: 	endbr64
    00000004: 	cmpq	%rdi, %rsi
    00000007: 	je	.Ltmp322 # Offset: 7
    00000009: 	movq	%rdi, %rax
    0000000c: 	xorl	%r9d, %r9d
    0000000f: 	nop # Size: 1
.Ltmp323:
    00000010: 	movq	(%rax), %rax
    00000013: 	addq	$0x1, %r9
    00000017: 	cmpq	%rsi, %rax
    0000001a: 	jne	.Ltmp323 # Offset: 26
    0000001c: 	nopl	(%rax) # Size: 4
.Ltmp330:
    00000020: 	testq	%r9, %r9
    00000023: 	je	.Ltmp324 # Offset: 35
.Ltmp328:
    00000025: 	movq	%r9, %r8
    00000028: 	movq	%rdi, %rcx
    0000002b: 	shrq	$0x3f, %r8
    0000002f: 	addq	%r9, %r8
    00000032: 	sarq	%r8
    00000035: 	leaq	-0x1(%r8), %rax
    00000039: 	je	.Ltmp325 # Offset: 57
    0000003b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp326:
    00000040: 	movq	(%rcx), %rcx
    00000043: 	subq	$0x1, %rax
    00000047: 	jae	.Ltmp326 # Offset: 71
.Ltmp325:
    00000049: 	cmpl	0x8(%rcx), %edx
    0000004c: 	jle	.Ltmp327 # Offset: 76
    0000004e: 	addq	$0x1, %r8
    00000052: 	movq	(%rcx), %rdi
    00000055: 	subq	%r8, %r9
    00000058: 	testq	%r9, %r9
    0000005b: 	jne	.Ltmp328 # Offset: 91
.Ltmp324:
    0000005d: 	xorl	%eax, %eax
    0000005f: 	cmpq	%rdi, %rsi
    00000062: 	je	.Ltmp329 # Offset: 98
    00000064: 	cmpl	%edx, 0x8(%rdi)
    00000067: 	sete	%al
.Ltmp329:
    0000006a: 	retq # Offset: 106
    0000006b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp327:
    00000070: 	movq	%r8, %r9
    00000073: 	jmp	.Ltmp330 # Offset: 115
.Ltmp322:
    00000075: 	xorl	%r9d, %r9d
    00000078: 	jmp	.Ltmp330 # Offset: 120
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch3ISt18_Fwd_list_iteratorIiEiEbT_S2_T0_"

Binary Function "_Z13binarysearch4ISt18_Fwd_list_iteratorIiEiEbT_S2_T0_" after disassembly {
  Number      : 71
  State       : disassembled
  Address     : 0x37f0
  Size        : 0x5d
  MaxSize     : 0x60
  Offset      : 0x37f0
  Section     : .text
  Orc Section : .local.text._Z13binarysearch4ISt18_Fwd_list_iteratorIiEiEbT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB070:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp331 # Offset: 7
    00000009: 	movq	%rdi, %rax
    0000000c: 	xorl	%r8d, %r8d
    0000000f: 	nop # Size: 1
.Ltmp332:
    00000010: 	movq	(%rax), %rax
    00000013: 	addq	$0x1, %r8
    00000017: 	cmpq	%rsi, %rax
    0000001a: 	jne	.Ltmp332 # Offset: 26
    0000001c: 	nopl	(%rax) # Size: 4
.Ltmp336:
    00000020: 	movq	%r8, %rsi
    00000023: 	movq	%rdi, %rcx
    00000026: 	sarq	%rsi
    00000029: 	leaq	-0x1(%rsi), %rax
    0000002d: 	je	.Ltmp333 # Offset: 45
    0000002f: 	nop # Size: 1
.Ltmp334:
    00000030: 	movq	(%rcx), %rcx
    00000033: 	subq	$0x1, %rax
    00000037: 	jae	.Ltmp334 # Offset: 55
.Ltmp333:
    00000039: 	cmpl	%edx, 0x8(%rcx)
    0000003c: 	jge	.Ltmp335 # Offset: 60
    0000003e: 	addq	$0x1, %rsi
    00000042: 	movq	(%rcx), %rdi
    00000045: 	subq	%rsi, %r8
.Ltmp338:
    00000048: 	testq	%r8, %r8
    0000004b: 	jg	.Ltmp336 # Offset: 75
.Ltmp331:
    0000004d: 	xorl	%eax, %eax
    0000004f: 	retq # Offset: 79
.Ltmp335:
    00000050: 	jle	.Ltmp337 # Offset: 80
    00000052: 	movq	%rsi, %r8
    00000055: 	jmp	.Ltmp338 # Offset: 85
.Ltmp337:
    00000057: 	movl	$0x1, %eax
    0000005c: 	retq # Offset: 92
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch4ISt18_Fwd_list_iteratorIiEiEbT_S2_T0_"

Binary Function "_Z14std_lowerboundISt18_Fwd_list_iteratorIfEfET_S2_S2_T0_" after disassembly {
  Number      : 72
  State       : disassembled
  Address     : 0x3850
  Size        : 0x71
  MaxSize     : 0x80
  Offset      : 0x3850
  Section     : .text
  Orc Section : .local.text._Z14std_lowerboundISt18_Fwd_list_iteratorIfEfET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB071:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	cmpq	%rdi, %rsi
    0000000a: 	je	.Ltmp339 # Offset: 10
    0000000c: 	movq	%rdi, %rax
    0000000f: 	xorl	%ecx, %ecx
    00000011: 	nopl	(%rax) # Size: 7
.Ltmp340:
    00000018: 	movq	(%rax), %rax
    0000001b: 	addq	$0x1, %rcx
    0000001f: 	cmpq	%rsi, %rax
    00000022: 	jne	.Ltmp340 # Offset: 34
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp346:
    00000028: 	testq	%rcx, %rcx
    0000002b: 	jle	.Ltmp341 # Offset: 43
.Ltmp345:
    0000002d: 	movq	%rcx, %rsi
    00000030: 	movq	%r8, %rdx
    00000033: 	sarq	%rsi
    00000036: 	leaq	-0x1(%rsi), %rax
    0000003a: 	je	.Ltmp342 # Offset: 58
    0000003c: 	nopl	(%rax) # Size: 4
.Ltmp343:
    00000040: 	movq	(%rdx), %rdx
    00000043: 	subq	$0x1, %rax
    00000047: 	jae	.Ltmp343 # Offset: 71
.Ltmp342:
    00000049: 	comiss	0x8(%rdx), %xmm0
    0000004d: 	jbe	.Ltmp344 # Offset: 77
    0000004f: 	subq	%rsi, %rcx
    00000052: 	movq	(%rdx), %r8
    00000055: 	subq	$0x1, %rcx
    00000059: 	testq	%rcx, %rcx
    0000005c: 	jg	.Ltmp345 # Offset: 92
.Ltmp341:
    0000005e: 	movq	%r8, %rax
    00000061: 	retq # Offset: 97
    00000062: 	nopw	(%rax,%rax) # Size: 6
.Ltmp344:
    00000068: 	movq	%rsi, %rcx
    0000006b: 	jmp	.Ltmp346 # Offset: 107
.Ltmp339:
    0000006d: 	xorl	%ecx, %ecx
    0000006f: 	jmp	.Ltmp346 # Offset: 111
DWARF CFI Instructions:
    <empty>
End of Function "_Z14std_lowerboundISt18_Fwd_list_iteratorIfEfET_S2_S2_T0_"

Binary Function "_Z12lower_bound1ISt18_Fwd_list_iteratorIfEfET_S2_S2_T0_" after disassembly {
  Number      : 73
  State       : disassembled
  Address     : 0x38d0
  Size        : 0x7c
  MaxSize     : 0x80
  Offset      : 0x38d0
  Section     : .text
  Orc Section : .local.text._Z12lower_bound1ISt18_Fwd_list_iteratorIfEfET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB072:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r8
    00000007: 	nopw	(%rax,%rax) # Size: 9
.Ltmp354:
    00000010: 	cmpq	%r8, %rdi
    00000013: 	je	.Ltmp347 # Offset: 19
.Ltmp352:
    00000015: 	movq	%rdi, %rax
    00000018: 	xorl	%edx, %edx
    0000001a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp348:
    00000020: 	movq	(%rax), %rax
    00000023: 	addq	$0x1, %rdx
    00000027: 	cmpq	%r8, %rax
    0000002a: 	jne	.Ltmp348 # Offset: 42
    0000002c: 	sarq	%rdx
    0000002f: 	leaq	-0x1(%rdx), %rax
    00000033: 	je	.Ltmp349 # Offset: 51
    00000035: 	movq	%rdi, %rdx
    00000038: 	nopl	(%rax,%rax) # Size: 8
.Ltmp350:
    00000040: 	movq	(%rdx), %rdx
    00000043: 	subq	$0x1, %rax
    00000047: 	jae	.Ltmp350 # Offset: 71
    00000049: 	comiss	0x8(%rdx), %xmm0
    0000004d: 	ja	.Ltmp351 # Offset: 77
    0000004f: 	movq	%rdx, %r8
    00000052: 	cmpq	%r8, %rdi
    00000055: 	jne	.Ltmp352 # Offset: 85
.Ltmp347:
    00000057: 	movq	%r8, %rax
    0000005a: 	retq # Offset: 90
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp349:
    00000060: 	comiss	0x8(%rdi), %xmm0
    00000064: 	jbe	.Ltmp353 # Offset: 100
    00000066: 	movq	%rdi, %rdx
    00000069: 	nopl	(%rax) # Size: 7
.Ltmp351:
    00000070: 	movq	(%rdx), %rdi
    00000073: 	jmp	.Ltmp354 # Offset: 115
.Ltmp353:
    00000075: 	movq	%rdi, %r8
    00000078: 	movq	%r8, %rax
    0000007b: 	retq # Offset: 123
DWARF CFI Instructions:
    <empty>
End of Function "_Z12lower_bound1ISt18_Fwd_list_iteratorIfEfET_S2_S2_T0_"

Binary Function "_Z12lower_bound2ISt18_Fwd_list_iteratorIfEfET_S2_S2_T0_" after disassembly {
  Number      : 74
  State       : disassembled
  Address     : 0x3950
  Size        : 0x80
  MaxSize     : 0x80
  Offset      : 0x3950
  Section     : .text
  Orc Section : .local.text._Z12lower_bound2ISt18_Fwd_list_iteratorIfEfET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB073:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp355 # Offset: 10
    0000000c: 	movq	%rdi, %rax
    0000000f: 	xorl	%r8d, %r8d
    00000012: 	nopw	(%rax,%rax) # Size: 6
.Ltmp356:
    00000018: 	movq	(%rax), %rax
    0000001b: 	addq	$0x1, %r8
    0000001f: 	cmpq	%rsi, %rax
    00000022: 	jne	.Ltmp356 # Offset: 34
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp360:
    00000028: 	movq	%r8, %rcx
    0000002b: 	shrq	$0x3f, %rcx
    0000002f: 	addq	%r8, %rcx
    00000032: 	sarq	%rcx
    00000035: 	movq	%rcx, %rsi
    00000038: 	leaq	-0x1(%rcx), %rax
    0000003c: 	je	.Ltmp357 # Offset: 60
    0000003e: 	movq	%r9, %rdx
    00000041: 	nopl	(%rax) # Size: 7
.Ltmp358:
    00000048: 	movq	(%rdx), %rdx
    0000004b: 	subq	$0x1, %rax
    0000004f: 	jae	.Ltmp358 # Offset: 79
    00000051: 	comiss	0x8(%rdx), %xmm0
    00000055: 	jbe	.Ltmp359 # Offset: 85
.Ltmp362:
    00000057: 	addq	$0x1, %rcx
    0000005b: 	movq	%r8, %rsi
    0000005e: 	movq	(%rdx), %r9
    00000061: 	subq	%rcx, %rsi
    00000064: 	je	.Ltmp355 # Offset: 100
.Ltmp359:
    00000066: 	movq	%rsi, %r8
    00000069: 	jmp	.Ltmp360 # Offset: 105
    0000006b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp357:
    00000070: 	comiss	0x8(%r9), %xmm0
    00000075: 	ja	.Ltmp361 # Offset: 117
.Ltmp355:
    00000077: 	movq	%r9, %rax
    0000007a: 	retq # Offset: 122
.Ltmp361:
    0000007b: 	movq	%r9, %rdx
    0000007e: 	jmp	.Ltmp362 # Offset: 126
DWARF CFI Instructions:
    <empty>
End of Function "_Z12lower_bound2ISt18_Fwd_list_iteratorIfEfET_S2_S2_T0_"

Binary Function "_Z14std_upperboundISt18_Fwd_list_iteratorIfEfET_S2_S2_T0_" after disassembly {
  Number      : 75
  State       : disassembled
  Address     : 0x39d0
  Size        : 0x79
  MaxSize     : 0x80
  Offset      : 0x39d0
  Section     : .text
  Orc Section : .local.text._Z14std_upperboundISt18_Fwd_list_iteratorIfEfET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB074:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	cmpq	%rdi, %rsi
    0000000a: 	je	.Ltmp363 # Offset: 10
    0000000c: 	movq	%rdi, %rax
    0000000f: 	xorl	%ecx, %ecx
    00000011: 	nopl	(%rax) # Size: 7
.Ltmp364:
    00000018: 	movq	(%rax), %rax
    0000001b: 	addq	$0x1, %rcx
    0000001f: 	cmpq	%rsi, %rax
    00000022: 	jne	.Ltmp364 # Offset: 34
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp370:
    00000028: 	testq	%rcx, %rcx
    0000002b: 	jle	.Ltmp365 # Offset: 43
.Ltmp369:
    0000002d: 	movq	%rcx, %rsi
    00000030: 	movq	%r8, %rdx
    00000033: 	sarq	%rsi
    00000036: 	leaq	-0x1(%rsi), %rax
    0000003a: 	je	.Ltmp366 # Offset: 58
    0000003c: 	nopl	(%rax) # Size: 4
.Ltmp367:
    00000040: 	movq	(%rdx), %rdx
    00000043: 	subq	$0x1, %rax
    00000047: 	jae	.Ltmp367 # Offset: 71
.Ltmp366:
    00000049: 	movss	0x8(%rdx), %xmm1
    0000004e: 	comiss	%xmm0, %xmm1
    00000051: 	ja	.Ltmp368 # Offset: 81
    00000053: 	subq	%rsi, %rcx
    00000056: 	movq	(%rdx), %r8
    00000059: 	subq	$0x1, %rcx
    0000005d: 	testq	%rcx, %rcx
    00000060: 	jg	.Ltmp369 # Offset: 96
.Ltmp365:
    00000062: 	movq	%r8, %rax
    00000065: 	retq # Offset: 101
    00000066: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp368:
    00000070: 	movq	%rsi, %rcx
    00000073: 	jmp	.Ltmp370 # Offset: 115
.Ltmp363:
    00000075: 	xorl	%ecx, %ecx
    00000077: 	jmp	.Ltmp370 # Offset: 119
DWARF CFI Instructions:
    <empty>
End of Function "_Z14std_upperboundISt18_Fwd_list_iteratorIfEfET_S2_S2_T0_"

Binary Function "_Z12upper_bound1ISt18_Fwd_list_iteratorIfEfET_S2_S2_T0_" after disassembly {
  Number      : 76
  State       : disassembled
  Address     : 0x3a50
  Size        : 0x7c
  MaxSize     : 0x80
  Offset      : 0x3a50
  Section     : .text
  Orc Section : .local.text._Z12upper_bound1ISt18_Fwd_list_iteratorIfEfET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB075:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r8
    00000007: 	nopw	(%rax,%rax) # Size: 9
.Ltmp378:
    00000010: 	cmpq	%r8, %rdi
    00000013: 	je	.Ltmp371 # Offset: 19
.Ltmp376:
    00000015: 	movq	%rdi, %rax
    00000018: 	xorl	%edx, %edx
    0000001a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp372:
    00000020: 	movq	(%rax), %rax
    00000023: 	addq	$0x1, %rdx
    00000027: 	cmpq	%r8, %rax
    0000002a: 	jne	.Ltmp372 # Offset: 42
    0000002c: 	sarq	%rdx
    0000002f: 	leaq	-0x1(%rdx), %rax
    00000033: 	je	.Ltmp373 # Offset: 51
    00000035: 	movq	%rdi, %rdx
    00000038: 	nopl	(%rax,%rax) # Size: 8
.Ltmp374:
    00000040: 	movq	(%rdx), %rdx
    00000043: 	subq	$0x1, %rax
    00000047: 	jae	.Ltmp374 # Offset: 71
    00000049: 	movss	0x8(%rdx), %xmm1
    0000004e: 	comiss	%xmm0, %xmm1
    00000051: 	jbe	.Ltmp375 # Offset: 81
    00000053: 	movq	%rdx, %r8
    00000056: 	cmpq	%r8, %rdi
    00000059: 	jne	.Ltmp376 # Offset: 89
.Ltmp371:
    0000005b: 	movq	%r8, %rax
    0000005e: 	retq # Offset: 94
    0000005f: 	nop # Size: 1
.Ltmp373:
    00000060: 	movss	0x8(%rdi), %xmm1
    00000065: 	comiss	%xmm0, %xmm1
    00000068: 	ja	.Ltmp377 # Offset: 104
    0000006a: 	movq	%rdi, %rdx
    0000006d: 	nopl	(%rax) # Size: 3
.Ltmp375:
    00000070: 	movq	(%rdx), %rdi
    00000073: 	jmp	.Ltmp378 # Offset: 115
.Ltmp377:
    00000075: 	movq	%rdi, %r8
    00000078: 	movq	%r8, %rax
    0000007b: 	retq # Offset: 123
DWARF CFI Instructions:
    <empty>
End of Function "_Z12upper_bound1ISt18_Fwd_list_iteratorIfEfET_S2_S2_T0_"

Binary Function "_Z12upper_bound2ISt18_Fwd_list_iteratorIfEfET_S2_S2_T0_" after disassembly {
  Number      : 77
  State       : disassembled
  Address     : 0x3ad0
  Size        : 0x84
  MaxSize     : 0x90
  Offset      : 0x3ad0
  Section     : .text
  Orc Section : .local.text._Z12upper_bound2ISt18_Fwd_list_iteratorIfEfET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB076:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp379 # Offset: 10
    0000000c: 	movq	%rdi, %rax
    0000000f: 	xorl	%r8d, %r8d
    00000012: 	nopw	(%rax,%rax) # Size: 6
.Ltmp380:
    00000018: 	movq	(%rax), %rax
    0000001b: 	addq	$0x1, %r8
    0000001f: 	cmpq	%rsi, %rax
    00000022: 	jne	.Ltmp380 # Offset: 34
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp384:
    00000028: 	movq	%r8, %rcx
    0000002b: 	shrq	$0x3f, %rcx
    0000002f: 	addq	%r8, %rcx
    00000032: 	sarq	%rcx
    00000035: 	movq	%rcx, %rsi
    00000038: 	leaq	-0x1(%rcx), %rax
    0000003c: 	je	.Ltmp381 # Offset: 60
    0000003e: 	movq	%r9, %rdx
    00000041: 	nopl	(%rax) # Size: 7
.Ltmp382:
    00000048: 	movq	(%rdx), %rdx
    0000004b: 	subq	$0x1, %rax
    0000004f: 	jae	.Ltmp382 # Offset: 79
    00000051: 	movss	0x8(%rdx), %xmm1
    00000056: 	comiss	%xmm0, %xmm1
    00000059: 	ja	.Ltmp383 # Offset: 89
.Ltmp386:
    0000005b: 	addq	$0x1, %rcx
    0000005f: 	movq	%r8, %rsi
    00000062: 	movq	(%rdx), %r9
    00000065: 	subq	%rcx, %rsi
    00000068: 	je	.Ltmp379 # Offset: 104
.Ltmp383:
    0000006a: 	movq	%rsi, %r8
    0000006d: 	jmp	.Ltmp384 # Offset: 109
    0000006f: 	nop # Size: 1
.Ltmp381:
    00000070: 	movss	0x8(%r9), %xmm1
    00000076: 	comiss	%xmm0, %xmm1
    00000079: 	jbe	.Ltmp385 # Offset: 121
.Ltmp379:
    0000007b: 	movq	%r9, %rax
    0000007e: 	retq # Offset: 126
.Ltmp385:
    0000007f: 	movq	%r9, %rdx
    00000082: 	jmp	.Ltmp386 # Offset: 130
DWARF CFI Instructions:
    <empty>
End of Function "_Z12upper_bound2ISt18_Fwd_list_iteratorIfEfET_S2_S2_T0_"

Binary Function "_Z13binarysearch1ISt18_Fwd_list_iteratorIfEfEbT_S2_T0_" after disassembly {
  Number      : 78
  State       : disassembled
  Address     : 0x3b60
  Size        : 0x60
  MaxSize     : 0x60
  Offset      : 0x3b60
  Section     : .text
  Orc Section : .local.text._Z13binarysearch1ISt18_Fwd_list_iteratorIfEfEbT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB077:
    00000000: 	endbr64
    00000004: 	cmpq	%rdi, %rsi
    00000007: 	je	.Ltmp387 # Offset: 7
    00000009: 	nopl	(%rax) # Size: 7
.Ltmp392:
    00000010: 	movq	%rdi, %rax
    00000013: 	xorl	%edx, %edx
    00000015: 	nopl	(%rax) # Size: 3
.Ltmp388:
    00000018: 	movq	(%rax), %rax
    0000001b: 	addq	$0x1, %rdx
    0000001f: 	cmpq	%rsi, %rax
    00000022: 	jne	.Ltmp388 # Offset: 34
    00000024: 	sarq	%rdx
    00000027: 	leaq	-0x1(%rdx), %rax
    0000002b: 	movq	%rdi, %rdx
    0000002e: 	je	.Ltmp389 # Offset: 46
.Ltmp390:
    00000030: 	movq	(%rdx), %rdx
    00000033: 	subq	$0x1, %rax
    00000037: 	jae	.Ltmp390 # Offset: 55
.Ltmp389:
    00000039: 	movss	0x8(%rdx), %xmm1
    0000003e: 	comiss	%xmm1, %xmm0
    00000041: 	jbe	.Ltmp391 # Offset: 65
    00000043: 	movq	(%rdx), %rdi
.Ltmp394:
    00000046: 	cmpq	%rsi, %rdi
    00000049: 	jne	.Ltmp392 # Offset: 73
.Ltmp387:
    0000004b: 	xorl	%eax, %eax
    0000004d: 	retq # Offset: 77
    0000004e: 	nop # Size: 2
.Ltmp391:
    00000050: 	comiss	%xmm0, %xmm1
    00000053: 	jbe	.Ltmp393 # Offset: 83
    00000055: 	movq	%rdx, %rsi
    00000058: 	jmp	.Ltmp394 # Offset: 88
.Ltmp393:
    0000005a: 	movl	$0x1, %eax
    0000005f: 	retq # Offset: 95
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch1ISt18_Fwd_list_iteratorIfEfEbT_S2_T0_"

Binary Function "_Z13binarysearch2ISt18_Fwd_list_iteratorIfEfEbT_S2_T0_" after disassembly {
  Number      : 79
  State       : disassembled
  Address     : 0x3bc0
  Size        : 0x78
  MaxSize     : 0x80
  Offset      : 0x3bc0
  Section     : .text
  Orc Section : .local.text._Z13binarysearch2ISt18_Fwd_list_iteratorIfEfEbT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB078:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp395 # Offset: 7
    00000009: 	movq	%rdi, %rax
    0000000c: 	xorl	%r8d, %r8d
    0000000f: 	nop # Size: 1
.Ltmp396:
    00000010: 	movq	(%rax), %rax
    00000013: 	addq	$0x1, %r8
    00000017: 	cmpq	%rsi, %rax
    0000001a: 	jne	.Ltmp396 # Offset: 26
    0000001c: 	nopl	(%rax) # Size: 4
.Ltmp400:
    00000020: 	movq	%r8, %rcx
    00000023: 	movq	%rdi, %rdx
    00000026: 	shrq	$0x3f, %rcx
    0000002a: 	addq	%r8, %rcx
    0000002d: 	sarq	%rcx
    00000030: 	leaq	-0x1(%rcx), %rax
    00000034: 	je	.Ltmp397 # Offset: 52
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp398:
    00000040: 	movq	(%rdx), %rdx
    00000043: 	subq	$0x1, %rax
    00000047: 	jae	.Ltmp398 # Offset: 71
.Ltmp397:
    00000049: 	movss	0x8(%rdx), %xmm1
    0000004e: 	comiss	%xmm1, %xmm0
    00000051: 	jbe	.Ltmp399 # Offset: 81
    00000053: 	addq	$0x1, %rcx
    00000057: 	movq	(%rdx), %rdi
    0000005a: 	subq	%rcx, %r8
.Ltmp402:
    0000005d: 	testq	%r8, %r8
    00000060: 	jne	.Ltmp400 # Offset: 96
.Ltmp395:
    00000062: 	xorl	%eax, %eax
    00000064: 	retq # Offset: 100
    00000065: 	nopl	(%rax) # Size: 3
.Ltmp399:
    00000068: 	comiss	%xmm0, %xmm1
    0000006b: 	jbe	.Ltmp401 # Offset: 107
    0000006d: 	movq	%rcx, %r8
    00000070: 	jmp	.Ltmp402 # Offset: 112
.Ltmp401:
    00000072: 	movl	$0x1, %eax
    00000077: 	retq # Offset: 119
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch2ISt18_Fwd_list_iteratorIfEfEbT_S2_T0_"

Binary Function "_Z13binarysearch3ISt18_Fwd_list_iteratorIfEfEbT_S2_T0_" after disassembly {
  Number      : 80
  State       : disassembled
  Address     : 0x3c40
  Size        : 0x7a
  MaxSize     : 0x80
  Offset      : 0x3c40
  Section     : .text
  Orc Section : .local.text._Z13binarysearch3ISt18_Fwd_list_iteratorIfEfEbT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB079:
    00000000: 	endbr64
    00000004: 	cmpq	%rdi, %rsi
    00000007: 	je	.Ltmp403 # Offset: 7
    00000009: 	movq	%rdi, %rax
    0000000c: 	xorl	%r8d, %r8d
    0000000f: 	nop # Size: 1
.Ltmp404:
    00000010: 	movq	(%rax), %rax
    00000013: 	addq	$0x1, %r8
    00000017: 	cmpq	%rsi, %rax
    0000001a: 	jne	.Ltmp404 # Offset: 26
    0000001c: 	nopl	(%rax) # Size: 4
.Ltmp411:
    00000020: 	testq	%r8, %r8
    00000023: 	je	.Ltmp405 # Offset: 35
.Ltmp409:
    00000025: 	movq	%r8, %rcx
    00000028: 	movq	%rdi, %rdx
    0000002b: 	shrq	$0x3f, %rcx
    0000002f: 	addq	%r8, %rcx
    00000032: 	sarq	%rcx
    00000035: 	leaq	-0x1(%rcx), %rax
    00000039: 	je	.Ltmp406 # Offset: 57
    0000003b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp407:
    00000040: 	movq	(%rdx), %rdx
    00000043: 	subq	$0x1, %rax
    00000047: 	jae	.Ltmp407 # Offset: 71
.Ltmp406:
    00000049: 	comiss	0x8(%rdx), %xmm0
    0000004d: 	jbe	.Ltmp408 # Offset: 77
    0000004f: 	addq	$0x1, %rcx
    00000053: 	movq	(%rdx), %rdi
    00000056: 	subq	%rcx, %r8
    00000059: 	testq	%r8, %r8
    0000005c: 	jne	.Ltmp409 # Offset: 92
.Ltmp405:
    0000005e: 	xorl	%eax, %eax
    00000060: 	cmpq	%rdi, %rsi
    00000063: 	je	.Ltmp410 # Offset: 99
    00000065: 	ucomiss	0x8(%rdi), %xmm0
    00000069: 	setnp	%dl
    0000006c: 	cmovel	%edx, %eax
.Ltmp410:
    0000006f: 	retq # Offset: 111
.Ltmp408:
    00000070: 	movq	%rcx, %r8
    00000073: 	jmp	.Ltmp411 # Offset: 115
.Ltmp403:
    00000075: 	xorl	%r8d, %r8d
    00000078: 	jmp	.Ltmp411 # Offset: 120
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch3ISt18_Fwd_list_iteratorIfEfEbT_S2_T0_"

Binary Function "_Z13binarysearch4ISt18_Fwd_list_iteratorIfEfEbT_S2_T0_" after disassembly {
  Number      : 81
  State       : disassembled
  Address     : 0x3cc0
  Size        : 0x68
  MaxSize     : 0x70
  Offset      : 0x3cc0
  Section     : .text
  Orc Section : .local.text._Z13binarysearch4ISt18_Fwd_list_iteratorIfEfEbT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB080:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp412 # Offset: 7
    00000009: 	movq	%rdi, %rax
    0000000c: 	xorl	%r8d, %r8d
    0000000f: 	nop # Size: 1
.Ltmp413:
    00000010: 	movq	(%rax), %rax
    00000013: 	addq	$0x1, %r8
    00000017: 	cmpq	%rsi, %rax
    0000001a: 	jne	.Ltmp413 # Offset: 26
    0000001c: 	nopl	(%rax) # Size: 4
.Ltmp417:
    00000020: 	movq	%r8, %rcx
    00000023: 	movq	%rdi, %rdx
    00000026: 	sarq	%rcx
    00000029: 	leaq	-0x1(%rcx), %rax
    0000002d: 	je	.Ltmp414 # Offset: 45
    0000002f: 	nop # Size: 1
.Ltmp415:
    00000030: 	movq	(%rdx), %rdx
    00000033: 	subq	$0x1, %rax
    00000037: 	jae	.Ltmp415 # Offset: 55
.Ltmp414:
    00000039: 	movss	0x8(%rdx), %xmm1
    0000003e: 	comiss	%xmm1, %xmm0
    00000041: 	jbe	.Ltmp416 # Offset: 65
    00000043: 	addq	$0x1, %rcx
    00000047: 	movq	(%rdx), %rdi
    0000004a: 	subq	%rcx, %r8
.Ltmp419:
    0000004d: 	testq	%r8, %r8
    00000050: 	jg	.Ltmp417 # Offset: 80
.Ltmp412:
    00000052: 	xorl	%eax, %eax
    00000054: 	retq # Offset: 84
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp416:
    00000058: 	comiss	%xmm0, %xmm1
    0000005b: 	jbe	.Ltmp418 # Offset: 91
    0000005d: 	movq	%rcx, %r8
    00000060: 	jmp	.Ltmp419 # Offset: 96
.Ltmp418:
    00000062: 	movl	$0x1, %eax
    00000067: 	retq # Offset: 103
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch4ISt18_Fwd_list_iteratorIfEfEbT_S2_T0_"

Binary Function "_Z16std_binarysearchISt18_Fwd_list_iteratorIaEaEbT_S2_T0_" after disassembly {
  Number      : 82
  State       : disassembled
  Address     : 0x3d30
  Size        : 0x7a
  MaxSize     : 0x80
  Offset      : 0x3d30
  Section     : .text
  Orc Section : .local.text._Z16std_binarysearchISt18_Fwd_list_iteratorIaEaEbT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB081:
    00000000: 	endbr64
    00000004: 	movl	%edx, %r10d
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp420 # Offset: 10
    0000000c: 	movq	%rdi, %rax
    0000000f: 	xorl	%r8d, %r8d
    00000012: 	nopw	(%rax,%rax) # Size: 6
.Ltmp421:
    00000018: 	movq	(%rax), %rax
    0000001b: 	addq	$0x1, %r8
    0000001f: 	cmpq	%rsi, %rax
    00000022: 	jne	.Ltmp421 # Offset: 34
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp428:
    00000028: 	testq	%r8, %r8
    0000002b: 	jle	.Ltmp422 # Offset: 43
.Ltmp426:
    0000002d: 	movq	%r8, %r9
    00000030: 	movq	%rdi, %rcx
    00000033: 	sarq	%r9
    00000036: 	leaq	-0x1(%r9), %rax
    0000003a: 	je	.Ltmp423 # Offset: 58
    0000003c: 	nopl	(%rax) # Size: 4
.Ltmp424:
    00000040: 	movq	(%rcx), %rcx
    00000043: 	subq	$0x1, %rax
    00000047: 	jae	.Ltmp424 # Offset: 71
.Ltmp423:
    00000049: 	cmpb	%r10b, 0x8(%rcx)
    0000004d: 	jge	.Ltmp425 # Offset: 77
    0000004f: 	subq	%r9, %r8
    00000052: 	movq	(%rcx), %rdi
    00000055: 	subq	$0x1, %r8
    00000059: 	testq	%r8, %r8
    0000005c: 	jg	.Ltmp426 # Offset: 92
.Ltmp422:
    0000005e: 	xorl	%eax, %eax
    00000060: 	cmpq	%rdi, %rsi
    00000063: 	je	.Ltmp427 # Offset: 99
    00000065: 	cmpb	%dl, 0x8(%rdi)
    00000068: 	setle	%al
.Ltmp427:
    0000006b: 	retq # Offset: 107
    0000006c: 	nopl	(%rax) # Size: 4
.Ltmp425:
    00000070: 	movq	%r9, %r8
    00000073: 	jmp	.Ltmp428 # Offset: 115
.Ltmp420:
    00000075: 	xorl	%r8d, %r8d
    00000078: 	jmp	.Ltmp428 # Offset: 120
DWARF CFI Instructions:
    <empty>
End of Function "_Z16std_binarysearchISt18_Fwd_list_iteratorIaEaEbT_S2_T0_"

Binary Function "_Z16std_binarysearchISt18_Fwd_list_iteratorItEtEbT_S2_T0_" after disassembly {
  Number      : 83
  State       : disassembled
  Address     : 0x3db0
  Size        : 0x7a
  MaxSize     : 0x80
  Offset      : 0x3db0
  Section     : .text
  Orc Section : .local.text._Z16std_binarysearchISt18_Fwd_list_iteratorItEtEbT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB082:
    00000000: 	endbr64
    00000004: 	movl	%edx, %r10d
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp429 # Offset: 10
    0000000c: 	movq	%rdi, %rax
    0000000f: 	xorl	%r8d, %r8d
    00000012: 	nopw	(%rax,%rax) # Size: 6
.Ltmp430:
    00000018: 	movq	(%rax), %rax
    0000001b: 	addq	$0x1, %r8
    0000001f: 	cmpq	%rsi, %rax
    00000022: 	jne	.Ltmp430 # Offset: 34
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp437:
    00000028: 	testq	%r8, %r8
    0000002b: 	jle	.Ltmp431 # Offset: 43
.Ltmp435:
    0000002d: 	movq	%r8, %r9
    00000030: 	movq	%rdi, %rcx
    00000033: 	sarq	%r9
    00000036: 	leaq	-0x1(%r9), %rax
    0000003a: 	je	.Ltmp432 # Offset: 58
    0000003c: 	nopl	(%rax) # Size: 4
.Ltmp433:
    00000040: 	movq	(%rcx), %rcx
    00000043: 	subq	$0x1, %rax
    00000047: 	jae	.Ltmp433 # Offset: 71
.Ltmp432:
    00000049: 	cmpw	%r10w, 0x8(%rcx)
    0000004e: 	jae	.Ltmp434 # Offset: 78
    00000050: 	subq	%r9, %r8
    00000053: 	movq	(%rcx), %rdi
    00000056: 	subq	$0x1, %r8
    0000005a: 	testq	%r8, %r8
    0000005d: 	jg	.Ltmp435 # Offset: 93
.Ltmp431:
    0000005f: 	xorl	%eax, %eax
    00000061: 	cmpq	%rdi, %rsi
    00000064: 	je	.Ltmp436 # Offset: 100
    00000066: 	cmpw	%dx, 0x8(%rdi)
    0000006a: 	setbe	%al
.Ltmp436:
    0000006d: 	retq # Offset: 109
    0000006e: 	nop # Size: 2
.Ltmp434:
    00000070: 	movq	%r9, %r8
    00000073: 	jmp	.Ltmp437 # Offset: 115
.Ltmp429:
    00000075: 	xorl	%r8d, %r8d
    00000078: 	jmp	.Ltmp437 # Offset: 120
DWARF CFI Instructions:
    <empty>
End of Function "_Z16std_binarysearchISt18_Fwd_list_iteratorItEtEbT_S2_T0_"

Binary Function "_Z16std_binarysearchISt18_Fwd_list_iteratorIiEiEbT_S2_T0_" after disassembly {
  Number      : 84
  State       : disassembled
  Address     : 0x3e30
  Size        : 0x72
  MaxSize     : 0x80
  Offset      : 0x3e30
  Section     : .text
  Orc Section : .local.text._Z16std_binarysearchISt18_Fwd_list_iteratorIiEiEbT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB083:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp438 # Offset: 7
    00000009: 	movq	%rdi, %rax
    0000000c: 	xorl	%r8d, %r8d
    0000000f: 	nop # Size: 1
.Ltmp439:
    00000010: 	movq	(%rax), %rax
    00000013: 	addq	$0x1, %r8
    00000017: 	cmpq	%rsi, %rax
    0000001a: 	jne	.Ltmp439 # Offset: 26
    0000001c: 	nopl	(%rax) # Size: 4
.Ltmp446:
    00000020: 	testq	%r8, %r8
    00000023: 	jle	.Ltmp440 # Offset: 35
.Ltmp444:
    00000025: 	movq	%r8, %r9
    00000028: 	movq	%rdi, %rcx
    0000002b: 	sarq	%r9
    0000002e: 	leaq	-0x1(%r9), %rax
    00000032: 	je	.Ltmp441 # Offset: 50
    00000034: 	nopl	(%rax) # Size: 4
.Ltmp442:
    00000038: 	movq	(%rcx), %rcx
    0000003b: 	subq	$0x1, %rax
    0000003f: 	jae	.Ltmp442 # Offset: 63
.Ltmp441:
    00000041: 	cmpl	%edx, 0x8(%rcx)
    00000044: 	jge	.Ltmp443 # Offset: 68
    00000046: 	subq	%r9, %r8
    00000049: 	movq	(%rcx), %rdi
    0000004c: 	subq	$0x1, %r8
    00000050: 	testq	%r8, %r8
    00000053: 	jg	.Ltmp444 # Offset: 83
.Ltmp440:
    00000055: 	xorl	%eax, %eax
    00000057: 	cmpq	%rdi, %rsi
    0000005a: 	je	.Ltmp445 # Offset: 90
    0000005c: 	cmpl	%edx, 0x8(%rdi)
    0000005f: 	setle	%al
.Ltmp445:
    00000062: 	retq # Offset: 98
    00000063: 	nopl	(%rax,%rax) # Size: 5
.Ltmp443:
    00000068: 	movq	%r9, %r8
    0000006b: 	jmp	.Ltmp446 # Offset: 107
.Ltmp438:
    0000006d: 	xorl	%r8d, %r8d
    00000070: 	jmp	.Ltmp446 # Offset: 112
DWARF CFI Instructions:
    <empty>
End of Function "_Z16std_binarysearchISt18_Fwd_list_iteratorIiEiEbT_S2_T0_"

Binary Function "_Z16std_binarysearchISt18_Fwd_list_iteratorIfEfEbT_S2_T0_" after disassembly {
  Number      : 85
  State       : disassembled
  Address     : 0x3eb0
  Size        : 0x79
  MaxSize     : 0x80
  Offset      : 0x3eb0
  Section     : .text
  Orc Section : .local.text._Z16std_binarysearchISt18_Fwd_list_iteratorIfEfEbT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB084:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp447 # Offset: 7
    00000009: 	movq	%rdi, %rax
    0000000c: 	xorl	%ecx, %ecx
    0000000e: 	nop # Size: 2
.Ltmp448:
    00000010: 	movq	(%rax), %rax
    00000013: 	addq	$0x1, %rcx
    00000017: 	cmpq	%rsi, %rax
    0000001a: 	jne	.Ltmp448 # Offset: 26
    0000001c: 	nopl	(%rax) # Size: 4
.Ltmp455:
    00000020: 	testq	%rcx, %rcx
    00000023: 	jle	.Ltmp449 # Offset: 35
.Ltmp453:
    00000025: 	movq	%rcx, %r8
    00000028: 	movq	%rdi, %rdx
    0000002b: 	sarq	%r8
    0000002e: 	leaq	-0x1(%r8), %rax
    00000032: 	je	.Ltmp450 # Offset: 50
    00000034: 	nopl	(%rax) # Size: 4
.Ltmp451:
    00000038: 	movq	(%rdx), %rdx
    0000003b: 	subq	$0x1, %rax
    0000003f: 	jae	.Ltmp451 # Offset: 63
.Ltmp450:
    00000041: 	comiss	0x8(%rdx), %xmm0
    00000045: 	jbe	.Ltmp452 # Offset: 69
    00000047: 	subq	%r8, %rcx
    0000004a: 	movq	(%rdx), %rdi
    0000004d: 	subq	$0x1, %rcx
    00000051: 	testq	%rcx, %rcx
    00000054: 	jg	.Ltmp453 # Offset: 84
.Ltmp449:
    00000056: 	xorl	%eax, %eax
    00000058: 	cmpq	%rdi, %rsi
    0000005b: 	je	.Ltmp454 # Offset: 91
    0000005d: 	movss	0x8(%rdi), %xmm1
    00000062: 	comiss	%xmm0, %xmm1
    00000065: 	setbe	%al
.Ltmp454:
    00000068: 	retq # Offset: 104
    00000069: 	nopl	(%rax) # Size: 7
.Ltmp452:
    00000070: 	movq	%r8, %rcx
    00000073: 	jmp	.Ltmp455 # Offset: 115
.Ltmp447:
    00000075: 	xorl	%ecx, %ecx
    00000077: 	jmp	.Ltmp455 # Offset: 119
DWARF CFI Instructions:
    <empty>
End of Function "_Z16std_binarysearchISt18_Fwd_list_iteratorIfEfEbT_S2_T0_"

Binary Function "_Z13binarysearch4IPaaEbT_S1_T0_" after disassembly {
  Number      : 86
  State       : disassembled
  Address     : 0x3f30
  Size        : 0x56
  MaxSize     : 0x60
  Offset      : 0x3f30
  Section     : .text
  Orc Section : .local.text._Z13binarysearch4IPaaEbT_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB085:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	nopw	(%rax,%rax) # Size: 9
.Ltmp460:
    00000010: 	testq	%rsi, %rsi
    00000013: 	jle	.Ltmp456 # Offset: 19
.Ltmp458:
    00000015: 	movq	%rsi, %rax
    00000018: 	sarq	%rax
    0000001b: 	leaq	(%rdi,%rax), %rcx
    0000001f: 	cmpb	%dl, (%rcx)
    00000021: 	jge	.Ltmp457 # Offset: 33
    00000023: 	addq	$0x1, %rax
    00000027: 	leaq	0x1(%rcx), %rdi
    0000002b: 	subq	%rax, %rsi
    0000002e: 	testq	%rsi, %rsi
    00000031: 	jg	.Ltmp458 # Offset: 49
.Ltmp456:
    00000033: 	xorl	%eax, %eax
    00000035: 	retq # Offset: 53
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp457:
    00000040: 	jle	.Ltmp459 # Offset: 64
    00000042: 	movq	%rax, %rsi
    00000045: 	jmp	.Ltmp460 # Offset: 69
    00000047: 	nopw	(%rax,%rax) # Size: 9
.Ltmp459:
    00000050: 	movl	$0x1, %eax
    00000055: 	retq # Offset: 85
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch4IPaaEbT_S1_T0_"

Binary Function "_Z13binarysearch2IPaaEbT_S1_T0_" after disassembly {
  Number      : 87
  State       : disassembled
  Address     : 0x3f90
  Size        : 0x4e
  MaxSize     : 0x50
  Offset      : 0x3f90
  Section     : .text
  Orc Section : .local.text._Z13binarysearch2IPaaEbT_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB086:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	jne	.Ltmp461 # Offset: 7
    00000009: 	jmp	.Ltmp462 # Offset: 9
    0000000b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp463:
    00000010: 	addq	$0x1, %rax
    00000014: 	leaq	0x1(%rcx), %rdi
    00000018: 	subq	%rax, %rsi
    0000001b: 	testq	%rsi, %rsi
    0000001e: 	je	.Ltmp462 # Offset: 30
.Ltmp461:
    00000020: 	movq	%rsi, %rax
    00000023: 	shrq	$0x3f, %rax
    00000027: 	addq	%rsi, %rax
    0000002a: 	sarq	%rax
    0000002d: 	leaq	(%rdi,%rax), %rcx
    00000031: 	cmpb	%dl, (%rcx)
    00000033: 	jl	.Ltmp463 # Offset: 51
    00000035: 	jle	.Ltmp464 # Offset: 53
    00000037: 	movq	%rax, %rsi
    0000003a: 	testq	%rsi, %rsi
    0000003d: 	jne	.Ltmp461 # Offset: 61
.Ltmp462:
    0000003f: 	xorl	%eax, %eax
    00000041: 	retq # Offset: 65
    00000042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp464:
    00000048: 	movl	$0x1, %eax
    0000004d: 	retq # Offset: 77
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch2IPaaEbT_S1_T0_"

Binary Function "_Z13binarysearch1IPaaEbT_S1_T0_" after disassembly {
  Number      : 88
  State       : disassembled
  Address     : 0x3fe0
  Size        : 0x46
  MaxSize     : 0x50
  Offset      : 0x3fe0
  Section     : .text
  Orc Section : .local.text._Z13binarysearch1IPaaEbT_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB087:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	jne	.Ltmp465 # Offset: 7
    00000009: 	jmp	.Ltmp466 # Offset: 9
    0000000b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp467:
    00000010: 	leaq	0x1(%rax), %rdi
    00000014: 	cmpq	%rdi, %rsi
    00000017: 	je	.Ltmp466 # Offset: 23
.Ltmp465:
    00000019: 	movq	%rsi, %rcx
    0000001c: 	subq	%rdi, %rcx
    0000001f: 	movq	%rcx, %rax
    00000022: 	shrq	$0x3f, %rax
    00000026: 	addq	%rcx, %rax
    00000029: 	sarq	%rax
    0000002c: 	addq	%rdi, %rax
    0000002f: 	cmpb	%dl, (%rax)
    00000031: 	jl	.Ltmp467 # Offset: 49
    00000033: 	jle	.Ltmp468 # Offset: 51
    00000035: 	movq	%rax, %rsi
    00000038: 	cmpq	%rdi, %rsi
    0000003b: 	jne	.Ltmp465 # Offset: 59
.Ltmp466:
    0000003d: 	xorl	%eax, %eax
    0000003f: 	retq # Offset: 63
.Ltmp468:
    00000040: 	movl	$0x1, %eax
    00000045: 	retq # Offset: 69
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch1IPaaEbT_S1_T0_"

Binary Function "_Z12upper_bound2IPaaET_S1_S1_T0_" after disassembly {
  Number      : 89
  State       : disassembled
  Address     : 0x4030
  Size        : 0x45
  MaxSize     : 0x50
  Offset      : 0x4030
  Section     : .text
  Orc Section : .local.text._Z12upper_bound2IPaaET_S1_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB088:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	subq	%rdi, %rsi
    0000000a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp472:
    00000010: 	testq	%rsi, %rsi
    00000013: 	je	.Ltmp469 # Offset: 19
.Ltmp471:
    00000015: 	movq	%rsi, %rcx
    00000018: 	shrq	$0x3f, %rcx
    0000001c: 	addq	%rsi, %rcx
    0000001f: 	sarq	%rcx
    00000022: 	leaq	(%rax,%rcx), %r8
    00000026: 	cmpb	%dl, (%r8)
    00000029: 	jg	.Ltmp470 # Offset: 41
    0000002b: 	addq	$0x1, %rcx
    0000002f: 	leaq	0x1(%r8), %rax
    00000033: 	subq	%rcx, %rsi
    00000036: 	testq	%rsi, %rsi
    00000039: 	jne	.Ltmp471 # Offset: 57
.Ltmp469:
    0000003b: 	retq # Offset: 59
    0000003c: 	nopl	(%rax) # Size: 4
.Ltmp470:
    00000040: 	movq	%rcx, %rsi
    00000043: 	jmp	.Ltmp472 # Offset: 67
DWARF CFI Instructions:
    <empty>
End of Function "_Z12upper_bound2IPaaET_S1_S1_T0_"

Binary Function "_Z12upper_bound1IPaaET_S1_S1_T0_" after disassembly {
  Number      : 90
  State       : disassembled
  Address     : 0x4080
  Size        : 0x45
  MaxSize     : 0x50
  Offset      : 0x4080
  Section     : .text
  Orc Section : .local.text._Z12upper_bound1IPaaET_S1_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB089:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	nopw	(%rax,%rax) # Size: 9
.Ltmp476:
    00000010: 	cmpq	%rsi, %rax
    00000013: 	je	.Ltmp473 # Offset: 19
.Ltmp475:
    00000015: 	movq	%rsi, %rdi
    00000018: 	subq	%rax, %rdi
    0000001b: 	movq	%rdi, %rcx
    0000001e: 	shrq	$0x3f, %rcx
    00000022: 	addq	%rdi, %rcx
    00000025: 	sarq	%rcx
    00000028: 	addq	%rax, %rcx
    0000002b: 	cmpb	%dl, (%rcx)
    0000002d: 	jg	.Ltmp474 # Offset: 45
    0000002f: 	leaq	0x1(%rcx), %rax
    00000033: 	cmpq	%rsi, %rax
    00000036: 	jne	.Ltmp475 # Offset: 54
.Ltmp473:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
.Ltmp474:
    00000040: 	movq	%rcx, %rsi
    00000043: 	jmp	.Ltmp476 # Offset: 67
DWARF CFI Instructions:
    <empty>
End of Function "_Z12upper_bound1IPaaET_S1_S1_T0_"

Binary Function "_Z12lower_bound2IPaaET_S1_S1_T0_" after disassembly {
  Number      : 91
  State       : disassembled
  Address     : 0x40d0
  Size        : 0x45
  MaxSize     : 0x50
  Offset      : 0x40d0
  Section     : .text
  Orc Section : .local.text._Z12lower_bound2IPaaET_S1_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB090:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	subq	%rdi, %rsi
    0000000a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp480:
    00000010: 	testq	%rsi, %rsi
    00000013: 	je	.Ltmp477 # Offset: 19
.Ltmp479:
    00000015: 	movq	%rsi, %rcx
    00000018: 	shrq	$0x3f, %rcx
    0000001c: 	addq	%rsi, %rcx
    0000001f: 	sarq	%rcx
    00000022: 	leaq	(%rax,%rcx), %r8
    00000026: 	cmpb	%dl, (%r8)
    00000029: 	jge	.Ltmp478 # Offset: 41
    0000002b: 	addq	$0x1, %rcx
    0000002f: 	leaq	0x1(%r8), %rax
    00000033: 	subq	%rcx, %rsi
    00000036: 	testq	%rsi, %rsi
    00000039: 	jne	.Ltmp479 # Offset: 57
.Ltmp477:
    0000003b: 	retq # Offset: 59
    0000003c: 	nopl	(%rax) # Size: 4
.Ltmp478:
    00000040: 	movq	%rcx, %rsi
    00000043: 	jmp	.Ltmp480 # Offset: 67
DWARF CFI Instructions:
    <empty>
End of Function "_Z12lower_bound2IPaaET_S1_S1_T0_"

Binary Function "_Z13binarysearch3IPaaEbT_S1_T0_" after disassembly {
  Number      : 92
  State       : disassembled
  Address     : 0x4120
  Size        : 0x55
  MaxSize     : 0x60
  Offset      : 0x4120
  Section     : .text
  Orc Section : .local.text._Z13binarysearch3IPaaEbT_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB091:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rcx
    00000007: 	movl	%edx, %r9d
    0000000a: 	subq	%rdi, %rcx
    0000000d: 	nopl	(%rax) # Size: 3
.Ltmp485:
    00000010: 	testq	%rcx, %rcx
    00000013: 	je	.Ltmp481 # Offset: 19
.Ltmp483:
    00000015: 	movq	%rcx, %rax
    00000018: 	shrq	$0x3f, %rax
    0000001c: 	addq	%rcx, %rax
    0000001f: 	sarq	%rax
    00000022: 	leaq	(%rdi,%rax), %r8
    00000026: 	cmpb	(%r8), %r9b
    00000029: 	jle	.Ltmp482 # Offset: 41
    0000002b: 	addq	$0x1, %rax
    0000002f: 	leaq	0x1(%r8), %rdi
    00000033: 	subq	%rax, %rcx
    00000036: 	testq	%rcx, %rcx
    00000039: 	jne	.Ltmp483 # Offset: 57
.Ltmp481:
    0000003b: 	xorl	%eax, %eax
    0000003d: 	cmpq	%rdi, %rsi
    00000040: 	je	.Ltmp484 # Offset: 64
    00000042: 	cmpb	%dl, (%rdi)
    00000044: 	sete	%al
.Ltmp484:
    00000047: 	retq # Offset: 71
    00000048: 	nopl	(%rax,%rax) # Size: 8
.Ltmp482:
    00000050: 	movq	%rax, %rcx
    00000053: 	jmp	.Ltmp485 # Offset: 83
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch3IPaaEbT_S1_T0_"

Binary Function "_Z12lower_bound1IPaaET_S1_S1_T0_" after disassembly {
  Number      : 93
  State       : disassembled
  Address     : 0x4180
  Size        : 0x45
  MaxSize     : 0x50
  Offset      : 0x4180
  Section     : .text
  Orc Section : .local.text._Z12lower_bound1IPaaET_S1_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB092:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	nopw	(%rax,%rax) # Size: 9
.Ltmp489:
    00000010: 	cmpq	%rsi, %rax
    00000013: 	je	.Ltmp486 # Offset: 19
.Ltmp488:
    00000015: 	movq	%rsi, %rdi
    00000018: 	subq	%rax, %rdi
    0000001b: 	movq	%rdi, %rcx
    0000001e: 	shrq	$0x3f, %rcx
    00000022: 	addq	%rdi, %rcx
    00000025: 	sarq	%rcx
    00000028: 	addq	%rax, %rcx
    0000002b: 	cmpb	%dl, (%rcx)
    0000002d: 	jge	.Ltmp487 # Offset: 45
    0000002f: 	leaq	0x1(%rcx), %rax
    00000033: 	cmpq	%rsi, %rax
    00000036: 	jne	.Ltmp488 # Offset: 54
.Ltmp486:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
.Ltmp487:
    00000040: 	movq	%rcx, %rsi
    00000043: 	jmp	.Ltmp489 # Offset: 67
DWARF CFI Instructions:
    <empty>
End of Function "_Z12lower_bound1IPaaET_S1_S1_T0_"

Binary Function "_Z13binarysearch4IPttEbT_S1_T0_" after disassembly {
  Number      : 94
  State       : disassembled
  Address     : 0x41d0
  Size        : 0x56
  MaxSize     : 0x60
  Offset      : 0x41d0
  Section     : .text
  Orc Section : .local.text._Z13binarysearch4IPttEbT_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB093:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %rax
    0000000a: 	sarq	%rax
    0000000d: 	testq	%rsi, %rsi
    00000010: 	jg	.Ltmp490 # Offset: 16
    00000012: 	jmp	.Ltmp491 # Offset: 18
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp492:
    00000018: 	addq	$0x1, %rsi
    0000001c: 	leaq	0x2(%rcx), %rdi
    00000020: 	subq	%rsi, %rax
    00000023: 	testq	%rax, %rax
    00000026: 	jle	.Ltmp491 # Offset: 38
.Ltmp490:
    00000028: 	movq	%rax, %rcx
    0000002b: 	movq	%rax, %rsi
    0000002e: 	andq	$-0x2, %rcx
    00000032: 	sarq	%rsi
    00000035: 	addq	%rdi, %rcx
    00000038: 	cmpw	%dx, (%rcx)
    0000003b: 	jb	.Ltmp492 # Offset: 59
    0000003d: 	jbe	.Ltmp493 # Offset: 61
    0000003f: 	movq	%rsi, %rax
    00000042: 	testq	%rax, %rax
    00000045: 	jg	.Ltmp490 # Offset: 69
.Ltmp491:
    00000047: 	xorl	%eax, %eax
    00000049: 	retq # Offset: 73
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp493:
    00000050: 	movl	$0x1, %eax
    00000055: 	retq # Offset: 85
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch4IPttEbT_S1_T0_"

Binary Function "_Z13binarysearch2IPttEbT_S1_T0_" after disassembly {
  Number      : 95
  State       : disassembled
  Address     : 0x4230
  Size        : 0x5e
  MaxSize     : 0x60
  Offset      : 0x4230
  Section     : .text
  Orc Section : .local.text._Z13binarysearch2IPttEbT_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB094:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rcx
    00000007: 	subq	%rdi, %rcx
    0000000a: 	sarq	%rcx
    0000000d: 	cmpq	%rsi, %rdi
    00000010: 	jne	.Ltmp494 # Offset: 16
    00000012: 	jmp	.Ltmp495 # Offset: 18
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp496:
    00000018: 	addq	$0x1, %rsi
    0000001c: 	leaq	0x2(%rax), %rdi
    00000020: 	subq	%rsi, %rcx
    00000023: 	testq	%rcx, %rcx
    00000026: 	je	.Ltmp495 # Offset: 38
.Ltmp494:
    00000028: 	movq	%rcx, %rax
    0000002b: 	shrq	$0x3f, %rax
    0000002f: 	addq	%rcx, %rax
    00000032: 	movq	%rax, %rsi
    00000035: 	andq	$-0x2, %rax
    00000039: 	addq	%rdi, %rax
    0000003c: 	sarq	%rsi
    0000003f: 	cmpw	%dx, (%rax)
    00000042: 	jb	.Ltmp496 # Offset: 66
    00000044: 	jbe	.Ltmp497 # Offset: 68
    00000046: 	movq	%rsi, %rcx
    00000049: 	testq	%rcx, %rcx
    0000004c: 	jne	.Ltmp494 # Offset: 76
.Ltmp495:
    0000004e: 	xorl	%eax, %eax
    00000050: 	retq # Offset: 80
    00000051: 	nopl	(%rax) # Size: 7
.Ltmp497:
    00000058: 	movl	$0x1, %eax
    0000005d: 	retq # Offset: 93
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch2IPttEbT_S1_T0_"

Binary Function "_Z13binarysearch1IPttEbT_S1_T0_" after disassembly {
  Number      : 96
  State       : disassembled
  Address     : 0x4290
  Size        : 0x4e
  MaxSize     : 0x50
  Offset      : 0x4290
  Section     : .text
  Orc Section : .local.text._Z13binarysearch1IPttEbT_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB095:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	jne	.Ltmp498 # Offset: 7
    00000009: 	jmp	.Ltmp499 # Offset: 9
    0000000b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp500:
    00000010: 	leaq	0x2(%rax), %rdi
    00000014: 	cmpq	%rdi, %rsi
    00000017: 	je	.Ltmp499 # Offset: 23
.Ltmp498:
    00000019: 	movq	%rsi, %rax
    0000001c: 	subq	%rdi, %rax
    0000001f: 	movq	%rax, %rcx
    00000022: 	shrq	$0x3f, %rax
    00000026: 	sarq	%rcx
    00000029: 	addq	%rcx, %rax
    0000002c: 	andq	$-0x2, %rax
    00000030: 	addq	%rdi, %rax
    00000033: 	cmpw	%dx, (%rax)
    00000036: 	jb	.Ltmp500 # Offset: 54
    00000038: 	jbe	.Ltmp501 # Offset: 56
    0000003a: 	movq	%rax, %rsi
    0000003d: 	cmpq	%rdi, %rsi
    00000040: 	jne	.Ltmp498 # Offset: 64
.Ltmp499:
    00000042: 	xorl	%eax, %eax
    00000044: 	retq # Offset: 68
    00000045: 	nopl	(%rax) # Size: 3
.Ltmp501:
    00000048: 	movl	$0x1, %eax
    0000004d: 	retq # Offset: 77
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch1IPttEbT_S1_T0_"

Binary Function "_Z12upper_bound2IPttET_S1_S1_T0_" after disassembly {
  Number      : 97
  State       : disassembled
  Address     : 0x42e0
  Size        : 0x4d
  MaxSize     : 0x50
  Offset      : 0x42e0
  Section     : .text
  Orc Section : .local.text._Z12upper_bound2IPttET_S1_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB096:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rdi, %rax
    0000000a: 	sarq	%rsi
    0000000d: 	nopl	(%rax) # Size: 3
.Ltmp505:
    00000010: 	testq	%rsi, %rsi
    00000013: 	je	.Ltmp502 # Offset: 19
.Ltmp504:
    00000015: 	movq	%rsi, %rcx
    00000018: 	shrq	$0x3f, %rcx
    0000001c: 	addq	%rsi, %rcx
    0000001f: 	movq	%rcx, %r8
    00000022: 	andq	$-0x2, %rcx
    00000026: 	addq	%rax, %rcx
    00000029: 	sarq	%r8
    0000002c: 	cmpw	%dx, (%rcx)
    0000002f: 	ja	.Ltmp503 # Offset: 47
    00000031: 	addq	$0x1, %r8
    00000035: 	leaq	0x2(%rcx), %rax
    00000039: 	subq	%r8, %rsi
    0000003c: 	testq	%rsi, %rsi
    0000003f: 	jne	.Ltmp504 # Offset: 63
.Ltmp502:
    00000041: 	retq # Offset: 65
    00000042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp503:
    00000048: 	movq	%r8, %rsi
    0000004b: 	jmp	.Ltmp505 # Offset: 75
DWARF CFI Instructions:
    <empty>
End of Function "_Z12upper_bound2IPttET_S1_S1_T0_"

Binary Function "_Z12upper_bound1IPttET_S1_S1_T0_" after disassembly {
  Number      : 98
  State       : disassembled
  Address     : 0x4330
  Size        : 0x45
  MaxSize     : 0x50
  Offset      : 0x4330
  Section     : .text
  Orc Section : .local.text._Z12upper_bound1IPttET_S1_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB097:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	nopw	(%rax,%rax) # Size: 9
.Ltmp509:
    00000010: 	cmpq	%rsi, %rax
    00000013: 	je	.Ltmp506 # Offset: 19
.Ltmp508:
    00000015: 	movq	%rsi, %rcx
    00000018: 	subq	%rax, %rcx
    0000001b: 	movq	%rcx, %rdi
    0000001e: 	shrq	$0x3f, %rcx
    00000022: 	sarq	%rdi
    00000025: 	addq	%rdi, %rcx
    00000028: 	andq	$-0x2, %rcx
    0000002c: 	addq	%rax, %rcx
    0000002f: 	cmpw	%dx, (%rcx)
    00000032: 	ja	.Ltmp507 # Offset: 50
    00000034: 	leaq	0x2(%rcx), %rax
    00000038: 	cmpq	%rsi, %rax
    0000003b: 	jne	.Ltmp508 # Offset: 59
.Ltmp506:
    0000003d: 	retq # Offset: 61
    0000003e: 	nop # Size: 2
.Ltmp507:
    00000040: 	movq	%rcx, %rsi
    00000043: 	jmp	.Ltmp509 # Offset: 67
DWARF CFI Instructions:
    <empty>
End of Function "_Z12upper_bound1IPttET_S1_S1_T0_"

Binary Function "_Z12lower_bound2IPttET_S1_S1_T0_" after disassembly {
  Number      : 99
  State       : disassembled
  Address     : 0x4380
  Size        : 0x4d
  MaxSize     : 0x50
  Offset      : 0x4380
  Section     : .text
  Orc Section : .local.text._Z12lower_bound2IPttET_S1_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB098:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rdi, %rax
    0000000a: 	sarq	%rsi
    0000000d: 	nopl	(%rax) # Size: 3
.Ltmp513:
    00000010: 	testq	%rsi, %rsi
    00000013: 	je	.Ltmp510 # Offset: 19
.Ltmp512:
    00000015: 	movq	%rsi, %rcx
    00000018: 	shrq	$0x3f, %rcx
    0000001c: 	addq	%rsi, %rcx
    0000001f: 	movq	%rcx, %r8
    00000022: 	andq	$-0x2, %rcx
    00000026: 	addq	%rax, %rcx
    00000029: 	sarq	%r8
    0000002c: 	cmpw	%dx, (%rcx)
    0000002f: 	jae	.Ltmp511 # Offset: 47
    00000031: 	addq	$0x1, %r8
    00000035: 	leaq	0x2(%rcx), %rax
    00000039: 	subq	%r8, %rsi
    0000003c: 	testq	%rsi, %rsi
    0000003f: 	jne	.Ltmp512 # Offset: 63
.Ltmp510:
    00000041: 	retq # Offset: 65
    00000042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp511:
    00000048: 	movq	%r8, %rsi
    0000004b: 	jmp	.Ltmp513 # Offset: 75
DWARF CFI Instructions:
    <empty>
End of Function "_Z12lower_bound2IPttET_S1_S1_T0_"

Binary Function "_Z13binarysearch3IPttEbT_S1_T0_" after disassembly {
  Number      : 100
  State       : disassembled
  Address     : 0x43d0
  Size        : 0x65
  MaxSize     : 0x70
  Offset      : 0x43d0
  Section     : .text
  Orc Section : .local.text._Z13binarysearch3IPttEbT_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB099:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rcx
    00000007: 	movq	%rdi, %r8
    0000000a: 	movl	%edx, %r9d
    0000000d: 	subq	%rdi, %rcx
    00000010: 	sarq	%rcx
    00000013: 	nopl	(%rax,%rax) # Size: 5
.Ltmp518:
    00000018: 	testq	%rcx, %rcx
    0000001b: 	je	.Ltmp514 # Offset: 27
.Ltmp516:
    0000001d: 	movq	%rcx, %rax
    00000020: 	shrq	$0x3f, %rax
    00000024: 	addq	%rcx, %rax
    00000027: 	movq	%rax, %rdi
    0000002a: 	andq	$-0x2, %rax
    0000002e: 	addq	%r8, %rax
    00000031: 	sarq	%rdi
    00000034: 	cmpw	(%rax), %r9w
    00000038: 	jbe	.Ltmp515 # Offset: 56
    0000003a: 	addq	$0x1, %rdi
    0000003e: 	leaq	0x2(%rax), %r8
    00000042: 	subq	%rdi, %rcx
    00000045: 	testq	%rcx, %rcx
    00000048: 	jne	.Ltmp516 # Offset: 72
.Ltmp514:
    0000004a: 	xorl	%eax, %eax
    0000004c: 	cmpq	%r8, %rsi
    0000004f: 	je	.Ltmp517 # Offset: 79
    00000051: 	cmpw	%dx, (%r8)
    00000055: 	sete	%al
.Ltmp517:
    00000058: 	retq # Offset: 88
    00000059: 	nopl	(%rax) # Size: 7
.Ltmp515:
    00000060: 	movq	%rdi, %rcx
    00000063: 	jmp	.Ltmp518 # Offset: 99
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch3IPttEbT_S1_T0_"

Binary Function "_Z12lower_bound1IPttET_S1_S1_T0_" after disassembly {
  Number      : 101
  State       : disassembled
  Address     : 0x4440
  Size        : 0x45
  MaxSize     : 0x50
  Offset      : 0x4440
  Section     : .text
  Orc Section : .local.text._Z12lower_bound1IPttET_S1_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0100:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	nopw	(%rax,%rax) # Size: 9
.Ltmp522:
    00000010: 	cmpq	%rsi, %rax
    00000013: 	je	.Ltmp519 # Offset: 19
.Ltmp521:
    00000015: 	movq	%rsi, %rcx
    00000018: 	subq	%rax, %rcx
    0000001b: 	movq	%rcx, %rdi
    0000001e: 	shrq	$0x3f, %rcx
    00000022: 	sarq	%rdi
    00000025: 	addq	%rdi, %rcx
    00000028: 	andq	$-0x2, %rcx
    0000002c: 	addq	%rax, %rcx
    0000002f: 	cmpw	%dx, (%rcx)
    00000032: 	jae	.Ltmp520 # Offset: 50
    00000034: 	leaq	0x2(%rcx), %rax
    00000038: 	cmpq	%rsi, %rax
    0000003b: 	jne	.Ltmp521 # Offset: 59
.Ltmp519:
    0000003d: 	retq # Offset: 61
    0000003e: 	nop # Size: 2
.Ltmp520:
    00000040: 	movq	%rcx, %rsi
    00000043: 	jmp	.Ltmp522 # Offset: 67
DWARF CFI Instructions:
    <empty>
End of Function "_Z12lower_bound1IPttET_S1_S1_T0_"

Binary Function "_Z13binarysearch4IPiiEbT_S1_T0_" after disassembly {
  Number      : 102
  State       : disassembled
  Address     : 0x4490
  Size        : 0x4e
  MaxSize     : 0x50
  Offset      : 0x4490
  Section     : .text
  Orc Section : .local.text._Z13binarysearch4IPiiEbT_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0101:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %rcx
    0000000a: 	sarq	$0x2, %rcx
    0000000e: 	testq	%rsi, %rsi
    00000011: 	jg	.Ltmp523 # Offset: 17
    00000013: 	jmp	.Ltmp524 # Offset: 19
    00000015: 	nopl	(%rax) # Size: 3
.Ltmp525:
    00000018: 	addq	$0x1, %rax
    0000001c: 	leaq	0x4(%rsi), %rdi
    00000020: 	subq	%rax, %rcx
    00000023: 	testq	%rcx, %rcx
    00000026: 	jle	.Ltmp524 # Offset: 38
.Ltmp523:
    00000028: 	movq	%rcx, %rax
    0000002b: 	sarq	%rax
    0000002e: 	leaq	(%rdi,%rax,4), %rsi
    00000032: 	cmpl	%edx, (%rsi)
    00000034: 	jl	.Ltmp525 # Offset: 52
    00000036: 	jle	.Ltmp526 # Offset: 54
    00000038: 	movq	%rax, %rcx
    0000003b: 	testq	%rcx, %rcx
    0000003e: 	jg	.Ltmp523 # Offset: 62
.Ltmp524:
    00000040: 	xorl	%eax, %eax
    00000042: 	retq # Offset: 66
    00000043: 	nopl	(%rax,%rax) # Size: 5
.Ltmp526:
    00000048: 	movl	$0x1, %eax
    0000004d: 	retq # Offset: 77
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch4IPiiEbT_S1_T0_"

Binary Function "_Z13binarysearch2IPiiEbT_S1_T0_" after disassembly {
  Number      : 103
  State       : disassembled
  Address     : 0x44e0
  Size        : 0x56
  MaxSize     : 0x60
  Offset      : 0x44e0
  Section     : .text
  Orc Section : .local.text._Z13binarysearch2IPiiEbT_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0102:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rcx
    00000007: 	subq	%rdi, %rcx
    0000000a: 	sarq	$0x2, %rcx
    0000000e: 	cmpq	%rsi, %rdi
    00000011: 	jne	.Ltmp527 # Offset: 17
    00000013: 	jmp	.Ltmp528 # Offset: 19
    00000015: 	nopl	(%rax) # Size: 3
.Ltmp529:
    00000018: 	addq	$0x1, %rax
    0000001c: 	leaq	0x4(%rsi), %rdi
    00000020: 	subq	%rax, %rcx
    00000023: 	testq	%rcx, %rcx
    00000026: 	je	.Ltmp528 # Offset: 38
.Ltmp527:
    00000028: 	movq	%rcx, %rax
    0000002b: 	shrq	$0x3f, %rax
    0000002f: 	addq	%rcx, %rax
    00000032: 	sarq	%rax
    00000035: 	leaq	(%rdi,%rax,4), %rsi
    00000039: 	cmpl	%edx, (%rsi)
    0000003b: 	jl	.Ltmp529 # Offset: 59
    0000003d: 	jle	.Ltmp530 # Offset: 61
    0000003f: 	movq	%rax, %rcx
    00000042: 	testq	%rcx, %rcx
    00000045: 	jne	.Ltmp527 # Offset: 69
.Ltmp528:
    00000047: 	xorl	%eax, %eax
    00000049: 	retq # Offset: 73
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp530:
    00000050: 	movl	$0x1, %eax
    00000055: 	retq # Offset: 85
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch2IPiiEbT_S1_T0_"

Binary Function "_Z13binarysearch1IPiiEbT_S1_T0_" after disassembly {
  Number      : 104
  State       : disassembled
  Address     : 0x4540
  Size        : 0x4e
  MaxSize     : 0x50
  Offset      : 0x4540
  Section     : .text
  Orc Section : .local.text._Z13binarysearch1IPiiEbT_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0103:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	jne	.Ltmp531 # Offset: 7
    00000009: 	jmp	.Ltmp532 # Offset: 9
    0000000b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp533:
    00000010: 	leaq	0x4(%rax), %rdi
    00000014: 	cmpq	%rdi, %rsi
    00000017: 	je	.Ltmp532 # Offset: 23
.Ltmp531:
    00000019: 	movq	%rsi, %rax
    0000001c: 	subq	%rdi, %rax
    0000001f: 	movq	%rax, %rcx
    00000022: 	shrq	$0x3f, %rax
    00000026: 	sarq	$0x2, %rcx
    0000002a: 	addq	%rcx, %rax
    0000002d: 	sarq	%rax
    00000030: 	leaq	(%rdi,%rax,4), %rax
    00000034: 	cmpl	%edx, (%rax)
    00000036: 	jl	.Ltmp533 # Offset: 54
    00000038: 	jle	.Ltmp534 # Offset: 56
    0000003a: 	movq	%rax, %rsi
    0000003d: 	cmpq	%rdi, %rsi
    00000040: 	jne	.Ltmp531 # Offset: 64
.Ltmp532:
    00000042: 	xorl	%eax, %eax
    00000044: 	retq # Offset: 68
    00000045: 	nopl	(%rax) # Size: 3
.Ltmp534:
    00000048: 	movl	$0x1, %eax
    0000004d: 	retq # Offset: 77
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch1IPiiEbT_S1_T0_"

Binary Function "_Z12upper_bound2IPiiET_S1_S1_T0_" after disassembly {
  Number      : 105
  State       : disassembled
  Address     : 0x4590
  Size        : 0x45
  MaxSize     : 0x50
  Offset      : 0x4590
  Section     : .text
  Orc Section : .local.text._Z12upper_bound2IPiiET_S1_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0104:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rdi, %rax
    0000000a: 	sarq	$0x2, %rsi
    0000000e: 	nop # Size: 2
.Ltmp538:
    00000010: 	testq	%rsi, %rsi
    00000013: 	je	.Ltmp535 # Offset: 19
.Ltmp537:
    00000015: 	movq	%rsi, %rcx
    00000018: 	shrq	$0x3f, %rcx
    0000001c: 	addq	%rsi, %rcx
    0000001f: 	sarq	%rcx
    00000022: 	leaq	(%rax,%rcx,4), %r8
    00000026: 	cmpl	%edx, (%r8)
    00000029: 	jg	.Ltmp536 # Offset: 41
    0000002b: 	addq	$0x1, %rcx
    0000002f: 	leaq	0x4(%r8), %rax
    00000033: 	subq	%rcx, %rsi
    00000036: 	testq	%rsi, %rsi
    00000039: 	jne	.Ltmp537 # Offset: 57
.Ltmp535:
    0000003b: 	retq # Offset: 59
    0000003c: 	nopl	(%rax) # Size: 4
.Ltmp536:
    00000040: 	movq	%rcx, %rsi
    00000043: 	jmp	.Ltmp538 # Offset: 67
DWARF CFI Instructions:
    <empty>
End of Function "_Z12upper_bound2IPiiET_S1_S1_T0_"

Binary Function "_Z12upper_bound1IPiiET_S1_S1_T0_" after disassembly {
  Number      : 106
  State       : disassembled
  Address     : 0x45e0
  Size        : 0x45
  MaxSize     : 0x50
  Offset      : 0x45e0
  Section     : .text
  Orc Section : .local.text._Z12upper_bound1IPiiET_S1_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0105:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	nopw	(%rax,%rax) # Size: 9
.Ltmp542:
    00000010: 	cmpq	%rsi, %rax
    00000013: 	je	.Ltmp539 # Offset: 19
.Ltmp541:
    00000015: 	movq	%rsi, %rcx
    00000018: 	subq	%rax, %rcx
    0000001b: 	movq	%rcx, %rdi
    0000001e: 	shrq	$0x3f, %rcx
    00000022: 	sarq	$0x2, %rdi
    00000026: 	addq	%rdi, %rcx
    00000029: 	sarq	%rcx
    0000002c: 	leaq	(%rax,%rcx,4), %rcx
    00000030: 	cmpl	%edx, (%rcx)
    00000032: 	jg	.Ltmp540 # Offset: 50
    00000034: 	leaq	0x4(%rcx), %rax
    00000038: 	cmpq	%rsi, %rax
    0000003b: 	jne	.Ltmp541 # Offset: 59
.Ltmp539:
    0000003d: 	retq # Offset: 61
    0000003e: 	nop # Size: 2
.Ltmp540:
    00000040: 	movq	%rcx, %rsi
    00000043: 	jmp	.Ltmp542 # Offset: 67
DWARF CFI Instructions:
    <empty>
End of Function "_Z12upper_bound1IPiiET_S1_S1_T0_"

Binary Function "_Z12lower_bound2IPiiET_S1_S1_T0_" after disassembly {
  Number      : 107
  State       : disassembled
  Address     : 0x4630
  Size        : 0x45
  MaxSize     : 0x50
  Offset      : 0x4630
  Section     : .text
  Orc Section : .local.text._Z12lower_bound2IPiiET_S1_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0106:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rdi, %rax
    0000000a: 	sarq	$0x2, %rsi
    0000000e: 	nop # Size: 2
.Ltmp546:
    00000010: 	testq	%rsi, %rsi
    00000013: 	je	.Ltmp543 # Offset: 19
.Ltmp545:
    00000015: 	movq	%rsi, %rcx
    00000018: 	shrq	$0x3f, %rcx
    0000001c: 	addq	%rsi, %rcx
    0000001f: 	sarq	%rcx
    00000022: 	leaq	(%rax,%rcx,4), %r8
    00000026: 	cmpl	%edx, (%r8)
    00000029: 	jge	.Ltmp544 # Offset: 41
    0000002b: 	addq	$0x1, %rcx
    0000002f: 	leaq	0x4(%r8), %rax
    00000033: 	subq	%rcx, %rsi
    00000036: 	testq	%rsi, %rsi
    00000039: 	jne	.Ltmp545 # Offset: 57
.Ltmp543:
    0000003b: 	retq # Offset: 59
    0000003c: 	nopl	(%rax) # Size: 4
.Ltmp544:
    00000040: 	movq	%rcx, %rsi
    00000043: 	jmp	.Ltmp546 # Offset: 67
DWARF CFI Instructions:
    <empty>
End of Function "_Z12lower_bound2IPiiET_S1_S1_T0_"

Binary Function "_Z13binarysearch3IPiiEbT_S1_T0_" after disassembly {
  Number      : 108
  State       : disassembled
  Address     : 0x4680
  Size        : 0x55
  MaxSize     : 0x60
  Offset      : 0x4680
  Section     : .text
  Orc Section : .local.text._Z13binarysearch3IPiiEbT_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0107:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rcx
    00000007: 	subq	%rdi, %rcx
    0000000a: 	sarq	$0x2, %rcx
    0000000e: 	nop # Size: 2
.Ltmp551:
    00000010: 	testq	%rcx, %rcx
    00000013: 	je	.Ltmp547 # Offset: 19
.Ltmp549:
    00000015: 	movq	%rcx, %rax
    00000018: 	shrq	$0x3f, %rax
    0000001c: 	addq	%rcx, %rax
    0000001f: 	sarq	%rax
    00000022: 	leaq	(%rdi,%rax,4), %r8
    00000026: 	cmpl	(%r8), %edx
    00000029: 	jle	.Ltmp548 # Offset: 41
    0000002b: 	addq	$0x1, %rax
    0000002f: 	leaq	0x4(%r8), %rdi
    00000033: 	subq	%rax, %rcx
    00000036: 	testq	%rcx, %rcx
    00000039: 	jne	.Ltmp549 # Offset: 57
.Ltmp547:
    0000003b: 	xorl	%eax, %eax
    0000003d: 	cmpq	%rdi, %rsi
    00000040: 	je	.Ltmp550 # Offset: 64
    00000042: 	cmpl	%edx, (%rdi)
    00000044: 	sete	%al
.Ltmp550:
    00000047: 	retq # Offset: 71
    00000048: 	nopl	(%rax,%rax) # Size: 8
.Ltmp548:
    00000050: 	movq	%rax, %rcx
    00000053: 	jmp	.Ltmp551 # Offset: 83
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch3IPiiEbT_S1_T0_"

Binary Function "_Z12lower_bound1IPiiET_S1_S1_T0_" after disassembly {
  Number      : 109
  State       : disassembled
  Address     : 0x46e0
  Size        : 0x45
  MaxSize     : 0x50
  Offset      : 0x46e0
  Section     : .text
  Orc Section : .local.text._Z12lower_bound1IPiiET_S1_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0108:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	nopw	(%rax,%rax) # Size: 9
.Ltmp555:
    00000010: 	cmpq	%rsi, %rax
    00000013: 	je	.Ltmp552 # Offset: 19
.Ltmp554:
    00000015: 	movq	%rsi, %rcx
    00000018: 	subq	%rax, %rcx
    0000001b: 	movq	%rcx, %rdi
    0000001e: 	shrq	$0x3f, %rcx
    00000022: 	sarq	$0x2, %rdi
    00000026: 	addq	%rdi, %rcx
    00000029: 	sarq	%rcx
    0000002c: 	leaq	(%rax,%rcx,4), %rcx
    00000030: 	cmpl	%edx, (%rcx)
    00000032: 	jge	.Ltmp553 # Offset: 50
    00000034: 	leaq	0x4(%rcx), %rax
    00000038: 	cmpq	%rsi, %rax
    0000003b: 	jne	.Ltmp554 # Offset: 59
.Ltmp552:
    0000003d: 	retq # Offset: 61
    0000003e: 	nop # Size: 2
.Ltmp553:
    00000040: 	movq	%rcx, %rsi
    00000043: 	jmp	.Ltmp555 # Offset: 67
DWARF CFI Instructions:
    <empty>
End of Function "_Z12lower_bound1IPiiET_S1_S1_T0_"

Binary Function "_Z13binarysearch4IPffEbT_S1_T0_" after disassembly {
  Number      : 110
  State       : disassembled
  Address     : 0x4730
  Size        : 0x56
  MaxSize     : 0x60
  Offset      : 0x4730
  Section     : .text
  Orc Section : .local.text._Z13binarysearch4IPffEbT_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0109:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %rdx
    0000000a: 	sarq	$0x2, %rdx
    0000000e: 	testq	%rsi, %rsi
    00000011: 	jg	.Ltmp556 # Offset: 17
    00000013: 	jmp	.Ltmp557 # Offset: 19
    00000015: 	nopl	(%rax) # Size: 3
.Ltmp558:
    00000018: 	addq	$0x1, %rax
    0000001c: 	leaq	0x4(%rcx), %rdi
    00000020: 	subq	%rax, %rdx
    00000023: 	testq	%rdx, %rdx
    00000026: 	jle	.Ltmp557 # Offset: 38
.Ltmp556:
    00000028: 	movq	%rdx, %rax
    0000002b: 	sarq	%rax
    0000002e: 	leaq	(%rdi,%rax,4), %rcx
    00000032: 	movss	(%rcx), %xmm1
    00000036: 	comiss	%xmm1, %xmm0
    00000039: 	ja	.Ltmp558 # Offset: 57
    0000003b: 	comiss	%xmm0, %xmm1
    0000003e: 	jbe	.Ltmp559 # Offset: 62
    00000040: 	movq	%rax, %rdx
    00000043: 	testq	%rdx, %rdx
    00000046: 	jg	.Ltmp556 # Offset: 70
.Ltmp557:
    00000048: 	xorl	%eax, %eax
    0000004a: 	retq # Offset: 74
    0000004b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp559:
    00000050: 	movl	$0x1, %eax
    00000055: 	retq # Offset: 85
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch4IPffEbT_S1_T0_"

Binary Function "_Z13binarysearch2IPffEbT_S1_T0_" after disassembly {
  Number      : 111
  State       : disassembled
  Address     : 0x4790
  Size        : 0x5e
  MaxSize     : 0x60
  Offset      : 0x4790
  Section     : .text
  Orc Section : .local.text._Z13binarysearch2IPffEbT_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0110:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rdx
    00000007: 	subq	%rdi, %rdx
    0000000a: 	sarq	$0x2, %rdx
    0000000e: 	cmpq	%rsi, %rdi
    00000011: 	jne	.Ltmp560 # Offset: 17
    00000013: 	jmp	.Ltmp561 # Offset: 19
    00000015: 	nopl	(%rax) # Size: 3
.Ltmp562:
    00000018: 	addq	$0x1, %rax
    0000001c: 	leaq	0x4(%rcx), %rdi
    00000020: 	subq	%rax, %rdx
    00000023: 	testq	%rdx, %rdx
    00000026: 	je	.Ltmp561 # Offset: 38
.Ltmp560:
    00000028: 	movq	%rdx, %rax
    0000002b: 	shrq	$0x3f, %rax
    0000002f: 	addq	%rdx, %rax
    00000032: 	sarq	%rax
    00000035: 	leaq	(%rdi,%rax,4), %rcx
    00000039: 	movss	(%rcx), %xmm1
    0000003d: 	comiss	%xmm1, %xmm0
    00000040: 	ja	.Ltmp562 # Offset: 64
    00000042: 	comiss	%xmm0, %xmm1
    00000045: 	jbe	.Ltmp563 # Offset: 69
    00000047: 	movq	%rax, %rdx
    0000004a: 	testq	%rdx, %rdx
    0000004d: 	jne	.Ltmp560 # Offset: 77
.Ltmp561:
    0000004f: 	xorl	%eax, %eax
    00000051: 	retq # Offset: 81
    00000052: 	nopw	(%rax,%rax) # Size: 6
.Ltmp563:
    00000058: 	movl	$0x1, %eax
    0000005d: 	retq # Offset: 93
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch2IPffEbT_S1_T0_"

Binary Function "_Z13binarysearch1IPffEbT_S1_T0_" after disassembly {
  Number      : 112
  State       : disassembled
  Address     : 0x47f0
  Size        : 0x56
  MaxSize     : 0x60
  Offset      : 0x47f0
  Section     : .text
  Orc Section : .local.text._Z13binarysearch1IPffEbT_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0111:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	jne	.Ltmp564 # Offset: 7
    00000009: 	jmp	.Ltmp565 # Offset: 9
    0000000b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp566:
    00000010: 	leaq	0x4(%rax), %rdi
    00000014: 	cmpq	%rdi, %rsi
    00000017: 	je	.Ltmp565 # Offset: 23
.Ltmp564:
    00000019: 	movq	%rsi, %rax
    0000001c: 	subq	%rdi, %rax
    0000001f: 	movq	%rax, %rdx
    00000022: 	shrq	$0x3f, %rax
    00000026: 	sarq	$0x2, %rdx
    0000002a: 	addq	%rdx, %rax
    0000002d: 	sarq	%rax
    00000030: 	leaq	(%rdi,%rax,4), %rax
    00000034: 	movss	(%rax), %xmm1
    00000038: 	comiss	%xmm1, %xmm0
    0000003b: 	ja	.Ltmp566 # Offset: 59
    0000003d: 	comiss	%xmm0, %xmm1
    00000040: 	jbe	.Ltmp567 # Offset: 64
    00000042: 	movq	%rax, %rsi
    00000045: 	cmpq	%rdi, %rsi
    00000048: 	jne	.Ltmp564 # Offset: 72
.Ltmp565:
    0000004a: 	xorl	%eax, %eax
    0000004c: 	retq # Offset: 76
    0000004d: 	nopl	(%rax) # Size: 3
.Ltmp567:
    00000050: 	movl	$0x1, %eax
    00000055: 	retq # Offset: 85
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch1IPffEbT_S1_T0_"

Binary Function "_Z12upper_bound2IPffET_S1_S1_T0_" after disassembly {
  Number      : 113
  State       : disassembled
  Address     : 0x4850
  Size        : 0x45
  MaxSize     : 0x50
  Offset      : 0x4850
  Section     : .text
  Orc Section : .local.text._Z12upper_bound2IPffET_S1_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0112:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rdi, %rax
    0000000a: 	sarq	$0x2, %rsi
    0000000e: 	nop # Size: 2
.Ltmp571:
    00000010: 	testq	%rsi, %rsi
    00000013: 	je	.Ltmp568 # Offset: 19
.Ltmp570:
    00000015: 	movq	%rsi, %rdx
    00000018: 	shrq	$0x3f, %rdx
    0000001c: 	addq	%rsi, %rdx
    0000001f: 	sarq	%rdx
    00000022: 	leaq	(%rax,%rdx,4), %rcx
    00000026: 	movss	(%rcx), %xmm1
    0000002a: 	comiss	%xmm0, %xmm1
    0000002d: 	ja	.Ltmp569 # Offset: 45
    0000002f: 	addq	$0x1, %rdx
    00000033: 	leaq	0x4(%rcx), %rax
    00000037: 	subq	%rdx, %rsi
    0000003a: 	testq	%rsi, %rsi
    0000003d: 	jne	.Ltmp570 # Offset: 61
.Ltmp568:
    0000003f: 	retq # Offset: 63
.Ltmp569:
    00000040: 	movq	%rdx, %rsi
    00000043: 	jmp	.Ltmp571 # Offset: 67
DWARF CFI Instructions:
    <empty>
End of Function "_Z12upper_bound2IPffET_S1_S1_T0_"

Binary Function "_Z12upper_bound1IPffET_S1_S1_T0_" after disassembly {
  Number      : 114
  State       : disassembled
  Address     : 0x48a0
  Size        : 0x4d
  MaxSize     : 0x50
  Offset      : 0x48a0
  Section     : .text
  Orc Section : .local.text._Z12upper_bound1IPffET_S1_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0113:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	nopw	(%rax,%rax) # Size: 9
.Ltmp575:
    00000010: 	cmpq	%rsi, %rax
    00000013: 	je	.Ltmp572 # Offset: 19
.Ltmp574:
    00000015: 	movq	%rsi, %rdx
    00000018: 	subq	%rax, %rdx
    0000001b: 	movq	%rdx, %rcx
    0000001e: 	shrq	$0x3f, %rdx
    00000022: 	sarq	$0x2, %rcx
    00000026: 	addq	%rcx, %rdx
    00000029: 	sarq	%rdx
    0000002c: 	leaq	(%rax,%rdx,4), %rdx
    00000030: 	movss	(%rdx), %xmm1
    00000034: 	comiss	%xmm0, %xmm1
    00000037: 	ja	.Ltmp573 # Offset: 55
    00000039: 	leaq	0x4(%rdx), %rax
    0000003d: 	cmpq	%rsi, %rax
    00000040: 	jne	.Ltmp574 # Offset: 64
.Ltmp572:
    00000042: 	retq # Offset: 66
    00000043: 	nopl	(%rax,%rax) # Size: 5
.Ltmp573:
    00000048: 	movq	%rdx, %rsi
    0000004b: 	jmp	.Ltmp575 # Offset: 75
DWARF CFI Instructions:
    <empty>
End of Function "_Z12upper_bound1IPffET_S1_S1_T0_"

Binary Function "_Z12lower_bound2IPffET_S1_S1_T0_" after disassembly {
  Number      : 115
  State       : disassembled
  Address     : 0x48f0
  Size        : 0x45
  MaxSize     : 0x50
  Offset      : 0x48f0
  Section     : .text
  Orc Section : .local.text._Z12lower_bound2IPffET_S1_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0114:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rdi, %rax
    0000000a: 	sarq	$0x2, %rsi
    0000000e: 	nop # Size: 2
.Ltmp579:
    00000010: 	testq	%rsi, %rsi
    00000013: 	je	.Ltmp576 # Offset: 19
.Ltmp578:
    00000015: 	movq	%rsi, %rdx
    00000018: 	shrq	$0x3f, %rdx
    0000001c: 	addq	%rsi, %rdx
    0000001f: 	sarq	%rdx
    00000022: 	leaq	(%rax,%rdx,4), %rcx
    00000026: 	comiss	(%rcx), %xmm0
    00000029: 	jbe	.Ltmp577 # Offset: 41
    0000002b: 	addq	$0x1, %rdx
    0000002f: 	leaq	0x4(%rcx), %rax
    00000033: 	subq	%rdx, %rsi
    00000036: 	testq	%rsi, %rsi
    00000039: 	jne	.Ltmp578 # Offset: 57
.Ltmp576:
    0000003b: 	retq # Offset: 59
    0000003c: 	nopl	(%rax) # Size: 4
.Ltmp577:
    00000040: 	movq	%rdx, %rsi
    00000043: 	jmp	.Ltmp579 # Offset: 67
DWARF CFI Instructions:
    <empty>
End of Function "_Z12lower_bound2IPffET_S1_S1_T0_"

Binary Function "_Z13binarysearch3IPffEbT_S1_T0_" after disassembly {
  Number      : 116
  State       : disassembled
  Address     : 0x4940
  Size        : 0x55
  MaxSize     : 0x60
  Offset      : 0x4940
  Section     : .text
  Orc Section : .local.text._Z13binarysearch3IPffEbT_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0115:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rdx
    00000007: 	subq	%rdi, %rdx
    0000000a: 	sarq	$0x2, %rdx
    0000000e: 	nop # Size: 2
.Ltmp584:
    00000010: 	testq	%rdx, %rdx
    00000013: 	je	.Ltmp580 # Offset: 19
.Ltmp582:
    00000015: 	movq	%rdx, %rax
    00000018: 	shrq	$0x3f, %rax
    0000001c: 	addq	%rdx, %rax
    0000001f: 	sarq	%rax
    00000022: 	leaq	(%rdi,%rax,4), %rcx
    00000026: 	comiss	(%rcx), %xmm0
    00000029: 	jbe	.Ltmp581 # Offset: 41
    0000002b: 	addq	$0x1, %rax
    0000002f: 	leaq	0x4(%rcx), %rdi
    00000033: 	subq	%rax, %rdx
    00000036: 	testq	%rdx, %rdx
    00000039: 	jne	.Ltmp582 # Offset: 57
.Ltmp580:
    0000003b: 	xorl	%eax, %eax
    0000003d: 	cmpq	%rdi, %rsi
    00000040: 	je	.Ltmp583 # Offset: 64
    00000042: 	ucomiss	(%rdi), %xmm0
    00000045: 	setnp	%dl
    00000048: 	cmovel	%edx, %eax
.Ltmp583:
    0000004b: 	retq # Offset: 75
    0000004c: 	nopl	(%rax) # Size: 4
.Ltmp581:
    00000050: 	movq	%rax, %rdx
    00000053: 	jmp	.Ltmp584 # Offset: 83
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch3IPffEbT_S1_T0_"

Binary Function "_Z12lower_bound1IPffET_S1_S1_T0_" after disassembly {
  Number      : 117
  State       : disassembled
  Address     : 0x49a0
  Size        : 0x45
  MaxSize     : 0x50
  Offset      : 0x49a0
  Section     : .text
  Orc Section : .local.text._Z12lower_bound1IPffET_S1_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0116:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	nopw	(%rax,%rax) # Size: 9
.Ltmp588:
    00000010: 	cmpq	%rsi, %rax
    00000013: 	je	.Ltmp585 # Offset: 19
.Ltmp587:
    00000015: 	movq	%rsi, %rdx
    00000018: 	subq	%rax, %rdx
    0000001b: 	movq	%rdx, %rcx
    0000001e: 	shrq	$0x3f, %rdx
    00000022: 	sarq	$0x2, %rcx
    00000026: 	addq	%rcx, %rdx
    00000029: 	sarq	%rdx
    0000002c: 	leaq	(%rax,%rdx,4), %rdx
    00000030: 	comiss	(%rdx), %xmm0
    00000033: 	jbe	.Ltmp586 # Offset: 51
    00000035: 	leaq	0x4(%rdx), %rax
    00000039: 	cmpq	%rsi, %rax
    0000003c: 	jne	.Ltmp587 # Offset: 60
.Ltmp585:
    0000003e: 	retq # Offset: 62
    0000003f: 	nop # Size: 1
.Ltmp586:
    00000040: 	movq	%rdx, %rsi
    00000043: 	jmp	.Ltmp588 # Offset: 67
DWARF CFI Instructions:
    <empty>
End of Function "_Z12lower_bound1IPffET_S1_S1_T0_"

Binary Function "_Z16std_binarysearchIPaaEbT_S1_T0_" after disassembly {
  Number      : 118
  State       : disassembled
  Address     : 0x49f0
  Size        : 0x4d
  MaxSize     : 0x50
  Offset      : 0x49f0
  Section     : .text
  Orc Section : .local.text._Z16std_binarysearchIPaaEbT_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0117:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	movl	%edx, %r9d
    0000000a: 	subq	%rdi, %rax
    0000000d: 	nopl	(%rax) # Size: 3
.Ltmp593:
    00000010: 	testq	%rax, %rax
    00000013: 	jle	.Ltmp589 # Offset: 19
.Ltmp591:
    00000015: 	movq	%rax, %rcx
    00000018: 	sarq	%rcx
    0000001b: 	leaq	(%rdi,%rcx), %r8
    0000001f: 	cmpb	%r9b, (%r8)
    00000022: 	jge	.Ltmp590 # Offset: 34
    00000024: 	subq	%rcx, %rax
    00000027: 	leaq	0x1(%r8), %rdi
    0000002b: 	subq	$0x1, %rax
    0000002f: 	testq	%rax, %rax
    00000032: 	jg	.Ltmp591 # Offset: 50
.Ltmp589:
    00000034: 	xorl	%eax, %eax
    00000036: 	cmpq	%rdi, %rsi
    00000039: 	je	.Ltmp592 # Offset: 57
    0000003b: 	cmpb	%dl, (%rdi)
    0000003d: 	setle	%al
.Ltmp592:
    00000040: 	retq # Offset: 64
    00000041: 	nopl	(%rax) # Size: 7
.Ltmp590:
    00000048: 	movq	%rcx, %rax
    0000004b: 	jmp	.Ltmp593 # Offset: 75
DWARF CFI Instructions:
    <empty>
End of Function "_Z16std_binarysearchIPaaEbT_S1_T0_"

Binary Function "_Z14std_lowerboundIPaaET_S1_S1_T0_" after disassembly {
  Number      : 119
  State       : disassembled
  Address     : 0x4a40
  Size        : 0x3d
  MaxSize     : 0x40
  Offset      : 0x4a40
  Section     : .text
  Orc Section : .local.text._Z14std_lowerboundIPaaET_S1_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0118:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	subq	%rdi, %rsi
    0000000a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp597:
    00000010: 	testq	%rsi, %rsi
    00000013: 	jle	.Ltmp594 # Offset: 19
.Ltmp596:
    00000015: 	movq	%rsi, %rcx
    00000018: 	sarq	%rcx
    0000001b: 	leaq	(%rax,%rcx), %r8
    0000001f: 	cmpb	%dl, (%r8)
    00000022: 	jge	.Ltmp595 # Offset: 34
    00000024: 	subq	%rcx, %rsi
    00000027: 	leaq	0x1(%r8), %rax
    0000002b: 	subq	$0x1, %rsi
    0000002f: 	testq	%rsi, %rsi
    00000032: 	jg	.Ltmp596 # Offset: 50
.Ltmp594:
    00000034: 	retq # Offset: 52
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp595:
    00000038: 	movq	%rcx, %rsi
    0000003b: 	jmp	.Ltmp597 # Offset: 59
DWARF CFI Instructions:
    <empty>
End of Function "_Z14std_lowerboundIPaaET_S1_S1_T0_"

Binary Function "_Z14std_upperboundIPaaET_S1_S1_T0_" after disassembly {
  Number      : 120
  State       : disassembled
  Address     : 0x4a80
  Size        : 0x3d
  MaxSize     : 0x40
  Offset      : 0x4a80
  Section     : .text
  Orc Section : .local.text._Z14std_upperboundIPaaET_S1_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0119:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	subq	%rdi, %rsi
    0000000a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp601:
    00000010: 	testq	%rsi, %rsi
    00000013: 	jle	.Ltmp598 # Offset: 19
.Ltmp600:
    00000015: 	movq	%rsi, %rcx
    00000018: 	sarq	%rcx
    0000001b: 	leaq	(%rax,%rcx), %r8
    0000001f: 	cmpb	%dl, (%r8)
    00000022: 	jg	.Ltmp599 # Offset: 34
    00000024: 	subq	%rcx, %rsi
    00000027: 	leaq	0x1(%r8), %rax
    0000002b: 	subq	$0x1, %rsi
    0000002f: 	testq	%rsi, %rsi
    00000032: 	jg	.Ltmp600 # Offset: 50
.Ltmp598:
    00000034: 	retq # Offset: 52
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp599:
    00000038: 	movq	%rcx, %rsi
    0000003b: 	jmp	.Ltmp601 # Offset: 59
DWARF CFI Instructions:
    <empty>
End of Function "_Z14std_upperboundIPaaET_S1_S1_T0_"

Binary Function "_Z13binarysearch4IN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaEbT_S7_T0_" after disassembly {
  Number      : 121
  State       : disassembled
  Address     : 0x4ac0
  Size        : 0x56
  MaxSize     : 0x60
  Offset      : 0x4ac0
  Section     : .text
  Orc Section : .local.text._Z13binarysearch4IN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaEbT_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0120:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	nopw	(%rax,%rax) # Size: 9
.Ltmp606:
    00000010: 	testq	%rsi, %rsi
    00000013: 	jle	.Ltmp602 # Offset: 19
.Ltmp604:
    00000015: 	movq	%rsi, %rax
    00000018: 	sarq	%rax
    0000001b: 	leaq	(%rdi,%rax), %rcx
    0000001f: 	cmpb	%dl, (%rcx)
    00000021: 	jge	.Ltmp603 # Offset: 33
    00000023: 	addq	$0x1, %rax
    00000027: 	leaq	0x1(%rcx), %rdi
    0000002b: 	subq	%rax, %rsi
    0000002e: 	testq	%rsi, %rsi
    00000031: 	jg	.Ltmp604 # Offset: 49
.Ltmp602:
    00000033: 	xorl	%eax, %eax
    00000035: 	retq # Offset: 53
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp603:
    00000040: 	jle	.Ltmp605 # Offset: 64
    00000042: 	movq	%rax, %rsi
    00000045: 	jmp	.Ltmp606 # Offset: 69
    00000047: 	nopw	(%rax,%rax) # Size: 9
.Ltmp605:
    00000050: 	movl	$0x1, %eax
    00000055: 	retq # Offset: 85
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch4IN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaEbT_S7_T0_"

Binary Function "_Z13binarysearch2IN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaEbT_S7_T0_" after disassembly {
  Number      : 122
  State       : disassembled
  Address     : 0x4b20
  Size        : 0x4e
  MaxSize     : 0x50
  Offset      : 0x4b20
  Section     : .text
  Orc Section : .local.text._Z13binarysearch2IN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaEbT_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0121:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	jne	.Ltmp607 # Offset: 7
    00000009: 	jmp	.Ltmp608 # Offset: 9
    0000000b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp609:
    00000010: 	addq	$0x1, %rax
    00000014: 	leaq	0x1(%rcx), %rdi
    00000018: 	subq	%rax, %rsi
    0000001b: 	testq	%rsi, %rsi
    0000001e: 	je	.Ltmp608 # Offset: 30
.Ltmp607:
    00000020: 	movq	%rsi, %rax
    00000023: 	shrq	$0x3f, %rax
    00000027: 	addq	%rsi, %rax
    0000002a: 	sarq	%rax
    0000002d: 	leaq	(%rdi,%rax), %rcx
    00000031: 	cmpb	%dl, (%rcx)
    00000033: 	jl	.Ltmp609 # Offset: 51
    00000035: 	jle	.Ltmp610 # Offset: 53
    00000037: 	movq	%rax, %rsi
    0000003a: 	testq	%rsi, %rsi
    0000003d: 	jne	.Ltmp607 # Offset: 61
.Ltmp608:
    0000003f: 	xorl	%eax, %eax
    00000041: 	retq # Offset: 65
    00000042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp610:
    00000048: 	movl	$0x1, %eax
    0000004d: 	retq # Offset: 77
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch2IN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaEbT_S7_T0_"

Binary Function "_Z13binarysearch1IN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaEbT_S7_T0_" after disassembly {
  Number      : 123
  State       : disassembled
  Address     : 0x4b70
  Size        : 0x46
  MaxSize     : 0x50
  Offset      : 0x4b70
  Section     : .text
  Orc Section : .local.text._Z13binarysearch1IN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaEbT_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0122:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	jne	.Ltmp611 # Offset: 7
    00000009: 	jmp	.Ltmp612 # Offset: 9
    0000000b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp613:
    00000010: 	leaq	0x1(%rax), %rdi
    00000014: 	cmpq	%rdi, %rsi
    00000017: 	je	.Ltmp612 # Offset: 23
.Ltmp611:
    00000019: 	movq	%rsi, %rcx
    0000001c: 	subq	%rdi, %rcx
    0000001f: 	movq	%rcx, %rax
    00000022: 	shrq	$0x3f, %rax
    00000026: 	addq	%rcx, %rax
    00000029: 	sarq	%rax
    0000002c: 	addq	%rdi, %rax
    0000002f: 	cmpb	%dl, (%rax)
    00000031: 	jl	.Ltmp613 # Offset: 49
    00000033: 	jle	.Ltmp614 # Offset: 51
    00000035: 	movq	%rax, %rsi
    00000038: 	cmpq	%rdi, %rsi
    0000003b: 	jne	.Ltmp611 # Offset: 59
.Ltmp612:
    0000003d: 	xorl	%eax, %eax
    0000003f: 	retq # Offset: 63
.Ltmp614:
    00000040: 	movl	$0x1, %eax
    00000045: 	retq # Offset: 69
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch1IN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaEbT_S7_T0_"

Binary Function "_Z16std_binarysearchIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaEbT_S7_T0_" after disassembly {
  Number      : 124
  State       : disassembled
  Address     : 0x4bc0
  Size        : 0x4d
  MaxSize     : 0x50
  Offset      : 0x4bc0
  Section     : .text
  Orc Section : .local.text._Z16std_binarysearchIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaEbT_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0123:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	movl	%edx, %r9d
    0000000a: 	subq	%rdi, %rax
    0000000d: 	nopl	(%rax) # Size: 3
.Ltmp619:
    00000010: 	testq	%rax, %rax
    00000013: 	jle	.Ltmp615 # Offset: 19
.Ltmp617:
    00000015: 	movq	%rax, %rcx
    00000018: 	sarq	%rcx
    0000001b: 	leaq	(%rdi,%rcx), %r8
    0000001f: 	cmpb	%r9b, (%r8)
    00000022: 	jge	.Ltmp616 # Offset: 34
    00000024: 	subq	%rcx, %rax
    00000027: 	leaq	0x1(%r8), %rdi
    0000002b: 	subq	$0x1, %rax
    0000002f: 	testq	%rax, %rax
    00000032: 	jg	.Ltmp617 # Offset: 50
.Ltmp615:
    00000034: 	xorl	%eax, %eax
    00000036: 	cmpq	%rdi, %rsi
    00000039: 	je	.Ltmp618 # Offset: 57
    0000003b: 	cmpb	%dl, (%rdi)
    0000003d: 	setle	%al
.Ltmp618:
    00000040: 	retq # Offset: 64
    00000041: 	nopl	(%rax) # Size: 7
.Ltmp616:
    00000048: 	movq	%rcx, %rax
    0000004b: 	jmp	.Ltmp619 # Offset: 75
DWARF CFI Instructions:
    <empty>
End of Function "_Z16std_binarysearchIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaEbT_S7_T0_"

Binary Function "_Z14std_lowerboundIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaET_S7_S7_T0_" after disassembly {
  Number      : 125
  State       : disassembled
  Address     : 0x4c10
  Size        : 0x3d
  MaxSize     : 0x40
  Offset      : 0x4c10
  Section     : .text
  Orc Section : .local.text._Z14std_lowerboundIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaET_S7_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0124:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	subq	%rdi, %rsi
    0000000a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp623:
    00000010: 	testq	%rsi, %rsi
    00000013: 	jle	.Ltmp620 # Offset: 19
.Ltmp622:
    00000015: 	movq	%rsi, %rcx
    00000018: 	sarq	%rcx
    0000001b: 	leaq	(%rax,%rcx), %r8
    0000001f: 	cmpb	%dl, (%r8)
    00000022: 	jge	.Ltmp621 # Offset: 34
    00000024: 	subq	%rcx, %rsi
    00000027: 	leaq	0x1(%r8), %rax
    0000002b: 	subq	$0x1, %rsi
    0000002f: 	testq	%rsi, %rsi
    00000032: 	jg	.Ltmp622 # Offset: 50
.Ltmp620:
    00000034: 	retq # Offset: 52
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp621:
    00000038: 	movq	%rcx, %rsi
    0000003b: 	jmp	.Ltmp623 # Offset: 59
DWARF CFI Instructions:
    <empty>
End of Function "_Z14std_lowerboundIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaET_S7_S7_T0_"

Binary Function "_Z12upper_bound2IN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaET_S7_S7_T0_" after disassembly {
  Number      : 126
  State       : disassembled
  Address     : 0x4c50
  Size        : 0x45
  MaxSize     : 0x50
  Offset      : 0x4c50
  Section     : .text
  Orc Section : .local.text._Z12upper_bound2IN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaET_S7_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0125:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	subq	%rdi, %rsi
    0000000a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp627:
    00000010: 	testq	%rsi, %rsi
    00000013: 	je	.Ltmp624 # Offset: 19
.Ltmp626:
    00000015: 	movq	%rsi, %rcx
    00000018: 	shrq	$0x3f, %rcx
    0000001c: 	addq	%rsi, %rcx
    0000001f: 	sarq	%rcx
    00000022: 	leaq	(%rax,%rcx), %r8
    00000026: 	cmpb	%dl, (%r8)
    00000029: 	jg	.Ltmp625 # Offset: 41
    0000002b: 	addq	$0x1, %rcx
    0000002f: 	leaq	0x1(%r8), %rax
    00000033: 	subq	%rcx, %rsi
    00000036: 	testq	%rsi, %rsi
    00000039: 	jne	.Ltmp626 # Offset: 57
.Ltmp624:
    0000003b: 	retq # Offset: 59
    0000003c: 	nopl	(%rax) # Size: 4
.Ltmp625:
    00000040: 	movq	%rcx, %rsi
    00000043: 	jmp	.Ltmp627 # Offset: 67
DWARF CFI Instructions:
    <empty>
End of Function "_Z12upper_bound2IN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaET_S7_S7_T0_"

Binary Function "_Z12upper_bound1IN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaET_S7_S7_T0_" after disassembly {
  Number      : 127
  State       : disassembled
  Address     : 0x4ca0
  Size        : 0x45
  MaxSize     : 0x50
  Offset      : 0x4ca0
  Section     : .text
  Orc Section : .local.text._Z12upper_bound1IN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaET_S7_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0126:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	nopw	(%rax,%rax) # Size: 9
.Ltmp631:
    00000010: 	cmpq	%rdi, %rax
    00000013: 	je	.Ltmp628 # Offset: 19
.Ltmp630:
    00000015: 	movq	%rax, %rsi
    00000018: 	subq	%rdi, %rsi
    0000001b: 	movq	%rsi, %rcx
    0000001e: 	shrq	$0x3f, %rcx
    00000022: 	addq	%rsi, %rcx
    00000025: 	sarq	%rcx
    00000028: 	addq	%rdi, %rcx
    0000002b: 	cmpb	%dl, (%rcx)
    0000002d: 	jg	.Ltmp629 # Offset: 45
    0000002f: 	leaq	0x1(%rcx), %rdi
    00000033: 	cmpq	%rdi, %rax
    00000036: 	jne	.Ltmp630 # Offset: 54
.Ltmp628:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
.Ltmp629:
    00000040: 	movq	%rcx, %rax
    00000043: 	jmp	.Ltmp631 # Offset: 67
DWARF CFI Instructions:
    <empty>
End of Function "_Z12upper_bound1IN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaET_S7_S7_T0_"

Binary Function "_Z12lower_bound2IN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaET_S7_S7_T0_" after disassembly {
  Number      : 128
  State       : disassembled
  Address     : 0x4cf0
  Size        : 0x45
  MaxSize     : 0x50
  Offset      : 0x4cf0
  Section     : .text
  Orc Section : .local.text._Z12lower_bound2IN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaET_S7_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0127:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	subq	%rdi, %rsi
    0000000a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp635:
    00000010: 	testq	%rsi, %rsi
    00000013: 	je	.Ltmp632 # Offset: 19
.Ltmp634:
    00000015: 	movq	%rsi, %rcx
    00000018: 	shrq	$0x3f, %rcx
    0000001c: 	addq	%rsi, %rcx
    0000001f: 	sarq	%rcx
    00000022: 	leaq	(%rax,%rcx), %r8
    00000026: 	cmpb	%dl, (%r8)
    00000029: 	jge	.Ltmp633 # Offset: 41
    0000002b: 	addq	$0x1, %rcx
    0000002f: 	leaq	0x1(%r8), %rax
    00000033: 	subq	%rcx, %rsi
    00000036: 	testq	%rsi, %rsi
    00000039: 	jne	.Ltmp634 # Offset: 57
.Ltmp632:
    0000003b: 	retq # Offset: 59
    0000003c: 	nopl	(%rax) # Size: 4
.Ltmp633:
    00000040: 	movq	%rcx, %rsi
    00000043: 	jmp	.Ltmp635 # Offset: 67
DWARF CFI Instructions:
    <empty>
End of Function "_Z12lower_bound2IN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaET_S7_S7_T0_"

Binary Function "_Z13binarysearch3IN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaEbT_S7_T0_" after disassembly {
  Number      : 129
  State       : disassembled
  Address     : 0x4d40
  Size        : 0x55
  MaxSize     : 0x60
  Offset      : 0x4d40
  Section     : .text
  Orc Section : .local.text._Z13binarysearch3IN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaEbT_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0128:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rcx
    00000007: 	movl	%edx, %r9d
    0000000a: 	subq	%rdi, %rcx
    0000000d: 	nopl	(%rax) # Size: 3
.Ltmp640:
    00000010: 	testq	%rcx, %rcx
    00000013: 	je	.Ltmp636 # Offset: 19
.Ltmp638:
    00000015: 	movq	%rcx, %rax
    00000018: 	shrq	$0x3f, %rax
    0000001c: 	addq	%rcx, %rax
    0000001f: 	sarq	%rax
    00000022: 	leaq	(%rdi,%rax), %r8
    00000026: 	cmpb	(%r8), %r9b
    00000029: 	jle	.Ltmp637 # Offset: 41
    0000002b: 	addq	$0x1, %rax
    0000002f: 	leaq	0x1(%r8), %rdi
    00000033: 	subq	%rax, %rcx
    00000036: 	testq	%rcx, %rcx
    00000039: 	jne	.Ltmp638 # Offset: 57
.Ltmp636:
    0000003b: 	xorl	%eax, %eax
    0000003d: 	cmpq	%rdi, %rsi
    00000040: 	je	.Ltmp639 # Offset: 64
    00000042: 	cmpb	%dl, (%rdi)
    00000044: 	sete	%al
.Ltmp639:
    00000047: 	retq # Offset: 71
    00000048: 	nopl	(%rax,%rax) # Size: 8
.Ltmp637:
    00000050: 	movq	%rax, %rcx
    00000053: 	jmp	.Ltmp640 # Offset: 83
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch3IN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaEbT_S7_T0_"

Binary Function "_Z12lower_bound1IN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaET_S7_S7_T0_" after disassembly {
  Number      : 130
  State       : disassembled
  Address     : 0x4da0
  Size        : 0x45
  MaxSize     : 0x50
  Offset      : 0x4da0
  Section     : .text
  Orc Section : .local.text._Z12lower_bound1IN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaET_S7_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0129:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	nopw	(%rax,%rax) # Size: 9
.Ltmp644:
    00000010: 	cmpq	%rdi, %rax
    00000013: 	je	.Ltmp641 # Offset: 19
.Ltmp643:
    00000015: 	movq	%rax, %rsi
    00000018: 	subq	%rdi, %rsi
    0000001b: 	movq	%rsi, %rcx
    0000001e: 	shrq	$0x3f, %rcx
    00000022: 	addq	%rsi, %rcx
    00000025: 	sarq	%rcx
    00000028: 	addq	%rdi, %rcx
    0000002b: 	cmpb	%dl, (%rcx)
    0000002d: 	jge	.Ltmp642 # Offset: 45
    0000002f: 	leaq	0x1(%rcx), %rdi
    00000033: 	cmpq	%rdi, %rax
    00000036: 	jne	.Ltmp643 # Offset: 54
.Ltmp641:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
.Ltmp642:
    00000040: 	movq	%rcx, %rax
    00000043: 	jmp	.Ltmp644 # Offset: 67
DWARF CFI Instructions:
    <empty>
End of Function "_Z12lower_bound1IN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaET_S7_S7_T0_"

Binary Function "_Z14std_upperboundIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaET_S7_S7_T0_" after disassembly {
  Number      : 131
  State       : disassembled
  Address     : 0x4df0
  Size        : 0x3d
  MaxSize     : 0x40
  Offset      : 0x4df0
  Section     : .text
  Orc Section : .local.text._Z14std_upperboundIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaET_S7_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0130:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	subq	%rdi, %rsi
    0000000a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp648:
    00000010: 	testq	%rsi, %rsi
    00000013: 	jle	.Ltmp645 # Offset: 19
.Ltmp647:
    00000015: 	movq	%rsi, %rcx
    00000018: 	sarq	%rcx
    0000001b: 	leaq	(%rax,%rcx), %r8
    0000001f: 	cmpb	%dl, (%r8)
    00000022: 	jg	.Ltmp646 # Offset: 34
    00000024: 	subq	%rcx, %rsi
    00000027: 	leaq	0x1(%r8), %rax
    0000002b: 	subq	$0x1, %rsi
    0000002f: 	testq	%rsi, %rsi
    00000032: 	jg	.Ltmp647 # Offset: 50
.Ltmp645:
    00000034: 	retq # Offset: 52
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp646:
    00000038: 	movq	%rcx, %rsi
    0000003b: 	jmp	.Ltmp648 # Offset: 59
DWARF CFI Instructions:
    <empty>
End of Function "_Z14std_upperboundIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaET_S7_S7_T0_"

Binary Function "_Z16std_binarysearchIPttEbT_S1_T0_" after disassembly {
  Number      : 132
  State       : disassembled
  Address     : 0x4e30
  Size        : 0x55
  MaxSize     : 0x60
  Offset      : 0x4e30
  Section     : .text
  Orc Section : .local.text._Z16std_binarysearchIPttEbT_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0131:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	movl	%edx, %r9d
    0000000a: 	subq	%rdi, %rax
    0000000d: 	sarq	%rax
.Ltmp653:
    00000010: 	testq	%rax, %rax
    00000013: 	jle	.Ltmp649 # Offset: 19
.Ltmp651:
    00000015: 	movq	%rax, %rcx
    00000018: 	movq	%rax, %r8
    0000001b: 	andq	$-0x2, %rcx
    0000001f: 	sarq	%r8
    00000022: 	addq	%rdi, %rcx
    00000025: 	cmpw	%r9w, (%rcx)
    00000029: 	jae	.Ltmp650 # Offset: 41
    0000002b: 	subq	%r8, %rax
    0000002e: 	leaq	0x2(%rcx), %rdi
    00000032: 	subq	$0x1, %rax
    00000036: 	testq	%rax, %rax
    00000039: 	jg	.Ltmp651 # Offset: 57
.Ltmp649:
    0000003b: 	xorl	%eax, %eax
    0000003d: 	cmpq	%rdi, %rsi
    00000040: 	je	.Ltmp652 # Offset: 64
    00000042: 	cmpw	%dx, (%rdi)
    00000045: 	setbe	%al
.Ltmp652:
    00000048: 	retq # Offset: 72
    00000049: 	nopl	(%rax) # Size: 7
.Ltmp650:
    00000050: 	movq	%r8, %rax
    00000053: 	jmp	.Ltmp653 # Offset: 83
DWARF CFI Instructions:
    <empty>
End of Function "_Z16std_binarysearchIPttEbT_S1_T0_"

Binary Function "_Z14std_lowerboundIPttET_S1_S1_T0_" after disassembly {
  Number      : 133
  State       : disassembled
  Address     : 0x4e90
  Size        : 0x45
  MaxSize     : 0x50
  Offset      : 0x4e90
  Section     : .text
  Orc Section : .local.text._Z14std_lowerboundIPttET_S1_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0132:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rdi, %rax
    0000000a: 	sarq	%rsi
    0000000d: 	nopl	(%rax) # Size: 3
.Ltmp657:
    00000010: 	testq	%rsi, %rsi
    00000013: 	jle	.Ltmp654 # Offset: 19
.Ltmp656:
    00000015: 	movq	%rsi, %rcx
    00000018: 	movq	%rsi, %rdi
    0000001b: 	andq	$-0x2, %rcx
    0000001f: 	sarq	%rdi
    00000022: 	addq	%rax, %rcx
    00000025: 	cmpw	%dx, (%rcx)
    00000028: 	jae	.Ltmp655 # Offset: 40
    0000002a: 	subq	%rdi, %rsi
    0000002d: 	leaq	0x2(%rcx), %rax
    00000031: 	subq	$0x1, %rsi
    00000035: 	testq	%rsi, %rsi
    00000038: 	jg	.Ltmp656 # Offset: 56
.Ltmp654:
    0000003a: 	retq # Offset: 58
    0000003b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp655:
    00000040: 	movq	%rdi, %rsi
    00000043: 	jmp	.Ltmp657 # Offset: 67
DWARF CFI Instructions:
    <empty>
End of Function "_Z14std_lowerboundIPttET_S1_S1_T0_"

Binary Function "_Z14std_upperboundIPttET_S1_S1_T0_" after disassembly {
  Number      : 134
  State       : disassembled
  Address     : 0x4ee0
  Size        : 0x45
  MaxSize     : 0x50
  Offset      : 0x4ee0
  Section     : .text
  Orc Section : .local.text._Z14std_upperboundIPttET_S1_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0133:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rdi, %rax
    0000000a: 	sarq	%rsi
    0000000d: 	nopl	(%rax) # Size: 3
.Ltmp661:
    00000010: 	testq	%rsi, %rsi
    00000013: 	jle	.Ltmp658 # Offset: 19
.Ltmp660:
    00000015: 	movq	%rsi, %rcx
    00000018: 	movq	%rsi, %rdi
    0000001b: 	andq	$-0x2, %rcx
    0000001f: 	sarq	%rdi
    00000022: 	addq	%rax, %rcx
    00000025: 	cmpw	%dx, (%rcx)
    00000028: 	ja	.Ltmp659 # Offset: 40
    0000002a: 	subq	%rdi, %rsi
    0000002d: 	leaq	0x2(%rcx), %rax
    00000031: 	subq	$0x1, %rsi
    00000035: 	testq	%rsi, %rsi
    00000038: 	jg	.Ltmp660 # Offset: 56
.Ltmp658:
    0000003a: 	retq # Offset: 58
    0000003b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp659:
    00000040: 	movq	%rdi, %rsi
    00000043: 	jmp	.Ltmp661 # Offset: 67
DWARF CFI Instructions:
    <empty>
End of Function "_Z14std_upperboundIPttET_S1_S1_T0_"

Binary Function "_Z13binarysearch4IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtEbT_S7_T0_" after disassembly {
  Number      : 135
  State       : disassembled
  Address     : 0x4f30
  Size        : 0x56
  MaxSize     : 0x60
  Offset      : 0x4f30
  Section     : .text
  Orc Section : .local.text._Z13binarysearch4IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtEbT_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0134:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %rax
    0000000a: 	sarq	%rax
    0000000d: 	testq	%rsi, %rsi
    00000010: 	jg	.Ltmp662 # Offset: 16
    00000012: 	jmp	.Ltmp663 # Offset: 18
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp664:
    00000018: 	addq	$0x1, %rsi
    0000001c: 	leaq	0x2(%rcx), %rdi
    00000020: 	subq	%rsi, %rax
    00000023: 	testq	%rax, %rax
    00000026: 	jle	.Ltmp663 # Offset: 38
.Ltmp662:
    00000028: 	movq	%rax, %rcx
    0000002b: 	movq	%rax, %rsi
    0000002e: 	andq	$-0x2, %rcx
    00000032: 	sarq	%rsi
    00000035: 	addq	%rdi, %rcx
    00000038: 	cmpw	%dx, (%rcx)
    0000003b: 	jb	.Ltmp664 # Offset: 59
    0000003d: 	jbe	.Ltmp665 # Offset: 61
    0000003f: 	movq	%rsi, %rax
    00000042: 	testq	%rax, %rax
    00000045: 	jg	.Ltmp662 # Offset: 69
.Ltmp663:
    00000047: 	xorl	%eax, %eax
    00000049: 	retq # Offset: 73
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp665:
    00000050: 	movl	$0x1, %eax
    00000055: 	retq # Offset: 85
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch4IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtEbT_S7_T0_"

Binary Function "_Z13binarysearch2IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtEbT_S7_T0_" after disassembly {
  Number      : 136
  State       : disassembled
  Address     : 0x4f90
  Size        : 0x5e
  MaxSize     : 0x60
  Offset      : 0x4f90
  Section     : .text
  Orc Section : .local.text._Z13binarysearch2IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtEbT_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0135:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rcx
    00000007: 	subq	%rdi, %rcx
    0000000a: 	sarq	%rcx
    0000000d: 	cmpq	%rsi, %rdi
    00000010: 	jne	.Ltmp666 # Offset: 16
    00000012: 	jmp	.Ltmp667 # Offset: 18
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp668:
    00000018: 	addq	$0x1, %rsi
    0000001c: 	leaq	0x2(%rax), %rdi
    00000020: 	subq	%rsi, %rcx
    00000023: 	testq	%rcx, %rcx
    00000026: 	je	.Ltmp667 # Offset: 38
.Ltmp666:
    00000028: 	movq	%rcx, %rax
    0000002b: 	shrq	$0x3f, %rax
    0000002f: 	addq	%rcx, %rax
    00000032: 	movq	%rax, %rsi
    00000035: 	andq	$-0x2, %rax
    00000039: 	addq	%rdi, %rax
    0000003c: 	sarq	%rsi
    0000003f: 	cmpw	%dx, (%rax)
    00000042: 	jb	.Ltmp668 # Offset: 66
    00000044: 	jbe	.Ltmp669 # Offset: 68
    00000046: 	movq	%rsi, %rcx
    00000049: 	testq	%rcx, %rcx
    0000004c: 	jne	.Ltmp666 # Offset: 76
.Ltmp667:
    0000004e: 	xorl	%eax, %eax
    00000050: 	retq # Offset: 80
    00000051: 	nopl	(%rax) # Size: 7
.Ltmp669:
    00000058: 	movl	$0x1, %eax
    0000005d: 	retq # Offset: 93
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch2IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtEbT_S7_T0_"

Binary Function "_Z13binarysearch1IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtEbT_S7_T0_" after disassembly {
  Number      : 137
  State       : disassembled
  Address     : 0x4ff0
  Size        : 0x4e
  MaxSize     : 0x50
  Offset      : 0x4ff0
  Section     : .text
  Orc Section : .local.text._Z13binarysearch1IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtEbT_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0136:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	jne	.Ltmp670 # Offset: 7
    00000009: 	jmp	.Ltmp671 # Offset: 9
    0000000b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp672:
    00000010: 	leaq	0x2(%rax), %rdi
    00000014: 	cmpq	%rdi, %rsi
    00000017: 	je	.Ltmp671 # Offset: 23
.Ltmp670:
    00000019: 	movq	%rsi, %rax
    0000001c: 	subq	%rdi, %rax
    0000001f: 	movq	%rax, %rcx
    00000022: 	shrq	$0x3f, %rax
    00000026: 	sarq	%rcx
    00000029: 	addq	%rcx, %rax
    0000002c: 	andq	$-0x2, %rax
    00000030: 	addq	%rdi, %rax
    00000033: 	cmpw	%dx, (%rax)
    00000036: 	jb	.Ltmp672 # Offset: 54
    00000038: 	jbe	.Ltmp673 # Offset: 56
    0000003a: 	movq	%rax, %rsi
    0000003d: 	cmpq	%rdi, %rsi
    00000040: 	jne	.Ltmp670 # Offset: 64
.Ltmp671:
    00000042: 	xorl	%eax, %eax
    00000044: 	retq # Offset: 68
    00000045: 	nopl	(%rax) # Size: 3
.Ltmp673:
    00000048: 	movl	$0x1, %eax
    0000004d: 	retq # Offset: 77
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch1IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtEbT_S7_T0_"

Binary Function "_Z16std_binarysearchIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtEbT_S7_T0_" after disassembly {
  Number      : 138
  State       : disassembled
  Address     : 0x5040
  Size        : 0x55
  MaxSize     : 0x60
  Offset      : 0x5040
  Section     : .text
  Orc Section : .local.text._Z16std_binarysearchIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtEbT_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0137:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	movl	%edx, %r9d
    0000000a: 	subq	%rdi, %rax
    0000000d: 	sarq	%rax
.Ltmp678:
    00000010: 	testq	%rax, %rax
    00000013: 	jle	.Ltmp674 # Offset: 19
.Ltmp676:
    00000015: 	movq	%rax, %rcx
    00000018: 	movq	%rax, %r8
    0000001b: 	andq	$-0x2, %rcx
    0000001f: 	sarq	%r8
    00000022: 	addq	%rdi, %rcx
    00000025: 	cmpw	%r9w, (%rcx)
    00000029: 	jae	.Ltmp675 # Offset: 41
    0000002b: 	subq	%r8, %rax
    0000002e: 	leaq	0x2(%rcx), %rdi
    00000032: 	subq	$0x1, %rax
    00000036: 	testq	%rax, %rax
    00000039: 	jg	.Ltmp676 # Offset: 57
.Ltmp674:
    0000003b: 	xorl	%eax, %eax
    0000003d: 	cmpq	%rdi, %rsi
    00000040: 	je	.Ltmp677 # Offset: 64
    00000042: 	cmpw	%dx, (%rdi)
    00000045: 	setbe	%al
.Ltmp677:
    00000048: 	retq # Offset: 72
    00000049: 	nopl	(%rax) # Size: 7
.Ltmp675:
    00000050: 	movq	%r8, %rax
    00000053: 	jmp	.Ltmp678 # Offset: 83
DWARF CFI Instructions:
    <empty>
End of Function "_Z16std_binarysearchIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtEbT_S7_T0_"

Binary Function "_Z14std_lowerboundIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET_S7_S7_T0_" after disassembly {
  Number      : 139
  State       : disassembled
  Address     : 0x50a0
  Size        : 0x45
  MaxSize     : 0x50
  Offset      : 0x50a0
  Section     : .text
  Orc Section : .local.text._Z14std_lowerboundIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET_S7_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0138:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rdi, %rax
    0000000a: 	sarq	%rsi
    0000000d: 	nopl	(%rax) # Size: 3
.Ltmp682:
    00000010: 	testq	%rsi, %rsi
    00000013: 	jle	.Ltmp679 # Offset: 19
.Ltmp681:
    00000015: 	movq	%rsi, %rcx
    00000018: 	movq	%rsi, %rdi
    0000001b: 	andq	$-0x2, %rcx
    0000001f: 	sarq	%rdi
    00000022: 	addq	%rax, %rcx
    00000025: 	cmpw	%dx, (%rcx)
    00000028: 	jae	.Ltmp680 # Offset: 40
    0000002a: 	subq	%rdi, %rsi
    0000002d: 	leaq	0x2(%rcx), %rax
    00000031: 	subq	$0x1, %rsi
    00000035: 	testq	%rsi, %rsi
    00000038: 	jg	.Ltmp681 # Offset: 56
.Ltmp679:
    0000003a: 	retq # Offset: 58
    0000003b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp680:
    00000040: 	movq	%rdi, %rsi
    00000043: 	jmp	.Ltmp682 # Offset: 67
DWARF CFI Instructions:
    <empty>
End of Function "_Z14std_lowerboundIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET_S7_S7_T0_"

Binary Function "_Z12upper_bound2IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET_S7_S7_T0_" after disassembly {
  Number      : 140
  State       : disassembled
  Address     : 0x50f0
  Size        : 0x4d
  MaxSize     : 0x50
  Offset      : 0x50f0
  Section     : .text
  Orc Section : .local.text._Z12upper_bound2IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET_S7_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0139:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rdi, %rax
    0000000a: 	sarq	%rsi
    0000000d: 	nopl	(%rax) # Size: 3
.Ltmp686:
    00000010: 	testq	%rsi, %rsi
    00000013: 	je	.Ltmp683 # Offset: 19
.Ltmp685:
    00000015: 	movq	%rsi, %rcx
    00000018: 	shrq	$0x3f, %rcx
    0000001c: 	addq	%rsi, %rcx
    0000001f: 	movq	%rcx, %r8
    00000022: 	andq	$-0x2, %rcx
    00000026: 	addq	%rax, %rcx
    00000029: 	sarq	%r8
    0000002c: 	cmpw	%dx, (%rcx)
    0000002f: 	ja	.Ltmp684 # Offset: 47
    00000031: 	addq	$0x1, %r8
    00000035: 	leaq	0x2(%rcx), %rax
    00000039: 	subq	%r8, %rsi
    0000003c: 	testq	%rsi, %rsi
    0000003f: 	jne	.Ltmp685 # Offset: 63
.Ltmp683:
    00000041: 	retq # Offset: 65
    00000042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp684:
    00000048: 	movq	%r8, %rsi
    0000004b: 	jmp	.Ltmp686 # Offset: 75
DWARF CFI Instructions:
    <empty>
End of Function "_Z12upper_bound2IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET_S7_S7_T0_"

Binary Function "_Z12upper_bound1IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET_S7_S7_T0_" after disassembly {
  Number      : 141
  State       : disassembled
  Address     : 0x5140
  Size        : 0x45
  MaxSize     : 0x50
  Offset      : 0x5140
  Section     : .text
  Orc Section : .local.text._Z12upper_bound1IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET_S7_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0140:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	nopw	(%rax,%rax) # Size: 9
.Ltmp690:
    00000010: 	cmpq	%rdi, %rax
    00000013: 	je	.Ltmp687 # Offset: 19
.Ltmp689:
    00000015: 	movq	%rax, %rcx
    00000018: 	subq	%rdi, %rcx
    0000001b: 	movq	%rcx, %rsi
    0000001e: 	shrq	$0x3f, %rcx
    00000022: 	sarq	%rsi
    00000025: 	addq	%rsi, %rcx
    00000028: 	andq	$-0x2, %rcx
    0000002c: 	addq	%rdi, %rcx
    0000002f: 	cmpw	%dx, (%rcx)
    00000032: 	ja	.Ltmp688 # Offset: 50
    00000034: 	leaq	0x2(%rcx), %rdi
    00000038: 	cmpq	%rdi, %rax
    0000003b: 	jne	.Ltmp689 # Offset: 59
.Ltmp687:
    0000003d: 	retq # Offset: 61
    0000003e: 	nop # Size: 2
.Ltmp688:
    00000040: 	movq	%rcx, %rax
    00000043: 	jmp	.Ltmp690 # Offset: 67
DWARF CFI Instructions:
    <empty>
End of Function "_Z12upper_bound1IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET_S7_S7_T0_"

Binary Function "_Z12lower_bound2IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET_S7_S7_T0_" after disassembly {
  Number      : 142
  State       : disassembled
  Address     : 0x5190
  Size        : 0x4d
  MaxSize     : 0x50
  Offset      : 0x5190
  Section     : .text
  Orc Section : .local.text._Z12lower_bound2IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET_S7_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0141:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rdi, %rax
    0000000a: 	sarq	%rsi
    0000000d: 	nopl	(%rax) # Size: 3
.Ltmp694:
    00000010: 	testq	%rsi, %rsi
    00000013: 	je	.Ltmp691 # Offset: 19
.Ltmp693:
    00000015: 	movq	%rsi, %rcx
    00000018: 	shrq	$0x3f, %rcx
    0000001c: 	addq	%rsi, %rcx
    0000001f: 	movq	%rcx, %r8
    00000022: 	andq	$-0x2, %rcx
    00000026: 	addq	%rax, %rcx
    00000029: 	sarq	%r8
    0000002c: 	cmpw	%dx, (%rcx)
    0000002f: 	jae	.Ltmp692 # Offset: 47
    00000031: 	addq	$0x1, %r8
    00000035: 	leaq	0x2(%rcx), %rax
    00000039: 	subq	%r8, %rsi
    0000003c: 	testq	%rsi, %rsi
    0000003f: 	jne	.Ltmp693 # Offset: 63
.Ltmp691:
    00000041: 	retq # Offset: 65
    00000042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp692:
    00000048: 	movq	%r8, %rsi
    0000004b: 	jmp	.Ltmp694 # Offset: 75
DWARF CFI Instructions:
    <empty>
End of Function "_Z12lower_bound2IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET_S7_S7_T0_"

Binary Function "_Z12lower_bound1IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET_S7_S7_T0_" after disassembly {
  Number      : 143
  State       : disassembled
  Address     : 0x51e0
  Size        : 0x45
  MaxSize     : 0x50
  Offset      : 0x51e0
  Section     : .text
  Orc Section : .local.text._Z12lower_bound1IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET_S7_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0142:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	nopw	(%rax,%rax) # Size: 9
.Ltmp698:
    00000010: 	cmpq	%rdi, %rax
    00000013: 	je	.Ltmp695 # Offset: 19
.Ltmp697:
    00000015: 	movq	%rax, %rcx
    00000018: 	subq	%rdi, %rcx
    0000001b: 	movq	%rcx, %rsi
    0000001e: 	shrq	$0x3f, %rcx
    00000022: 	sarq	%rsi
    00000025: 	addq	%rsi, %rcx
    00000028: 	andq	$-0x2, %rcx
    0000002c: 	addq	%rdi, %rcx
    0000002f: 	cmpw	%dx, (%rcx)
    00000032: 	jae	.Ltmp696 # Offset: 50
    00000034: 	leaq	0x2(%rcx), %rdi
    00000038: 	cmpq	%rdi, %rax
    0000003b: 	jne	.Ltmp697 # Offset: 59
.Ltmp695:
    0000003d: 	retq # Offset: 61
    0000003e: 	nop # Size: 2
.Ltmp696:
    00000040: 	movq	%rcx, %rax
    00000043: 	jmp	.Ltmp698 # Offset: 67
DWARF CFI Instructions:
    <empty>
End of Function "_Z12lower_bound1IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET_S7_S7_T0_"

Binary Function "_Z14std_upperboundIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET_S7_S7_T0_" after disassembly {
  Number      : 144
  State       : disassembled
  Address     : 0x5230
  Size        : 0x45
  MaxSize     : 0x50
  Offset      : 0x5230
  Section     : .text
  Orc Section : .local.text._Z14std_upperboundIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET_S7_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0143:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rdi, %rax
    0000000a: 	sarq	%rsi
    0000000d: 	nopl	(%rax) # Size: 3
.Ltmp702:
    00000010: 	testq	%rsi, %rsi
    00000013: 	jle	.Ltmp699 # Offset: 19
.Ltmp701:
    00000015: 	movq	%rsi, %rcx
    00000018: 	movq	%rsi, %rdi
    0000001b: 	andq	$-0x2, %rcx
    0000001f: 	sarq	%rdi
    00000022: 	addq	%rax, %rcx
    00000025: 	cmpw	%dx, (%rcx)
    00000028: 	ja	.Ltmp700 # Offset: 40
    0000002a: 	subq	%rdi, %rsi
    0000002d: 	leaq	0x2(%rcx), %rax
    00000031: 	subq	$0x1, %rsi
    00000035: 	testq	%rsi, %rsi
    00000038: 	jg	.Ltmp701 # Offset: 56
.Ltmp699:
    0000003a: 	retq # Offset: 58
    0000003b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp700:
    00000040: 	movq	%rdi, %rsi
    00000043: 	jmp	.Ltmp702 # Offset: 67
DWARF CFI Instructions:
    <empty>
End of Function "_Z14std_upperboundIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET_S7_S7_T0_"

Binary Function "_Z16std_binarysearchIPiiEbT_S1_T0_" after disassembly {
  Number      : 145
  State       : disassembled
  Address     : 0x5280
  Size        : 0x4d
  MaxSize     : 0x50
  Offset      : 0x5280
  Section     : .text
  Orc Section : .local.text._Z16std_binarysearchIPiiEbT_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0144:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	subq	%rdi, %rax
    0000000a: 	sarq	$0x2, %rax
    0000000e: 	nop # Size: 2
.Ltmp707:
    00000010: 	testq	%rax, %rax
    00000013: 	jle	.Ltmp703 # Offset: 19
.Ltmp705:
    00000015: 	movq	%rax, %rcx
    00000018: 	sarq	%rcx
    0000001b: 	leaq	(%rdi,%rcx,4), %r8
    0000001f: 	cmpl	%edx, (%r8)
    00000022: 	jge	.Ltmp704 # Offset: 34
    00000024: 	subq	%rcx, %rax
    00000027: 	leaq	0x4(%r8), %rdi
    0000002b: 	subq	$0x1, %rax
    0000002f: 	testq	%rax, %rax
    00000032: 	jg	.Ltmp705 # Offset: 50
.Ltmp703:
    00000034: 	xorl	%eax, %eax
    00000036: 	cmpq	%rdi, %rsi
    00000039: 	je	.Ltmp706 # Offset: 57
    0000003b: 	cmpl	%edx, (%rdi)
    0000003d: 	setle	%al
.Ltmp706:
    00000040: 	retq # Offset: 64
    00000041: 	nopl	(%rax) # Size: 7
.Ltmp704:
    00000048: 	movq	%rcx, %rax
    0000004b: 	jmp	.Ltmp707 # Offset: 75
DWARF CFI Instructions:
    <empty>
End of Function "_Z16std_binarysearchIPiiEbT_S1_T0_"

Binary Function "_Z14std_lowerboundIPiiET_S1_S1_T0_" after disassembly {
  Number      : 146
  State       : disassembled
  Address     : 0x52d0
  Size        : 0x3d
  MaxSize     : 0x40
  Offset      : 0x52d0
  Section     : .text
  Orc Section : .local.text._Z14std_lowerboundIPiiET_S1_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0145:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rdi, %rax
    0000000a: 	sarq	$0x2, %rsi
    0000000e: 	nop # Size: 2
.Ltmp711:
    00000010: 	testq	%rsi, %rsi
    00000013: 	jle	.Ltmp708 # Offset: 19
.Ltmp710:
    00000015: 	movq	%rsi, %rcx
    00000018: 	sarq	%rcx
    0000001b: 	leaq	(%rax,%rcx,4), %r8
    0000001f: 	cmpl	%edx, (%r8)
    00000022: 	jge	.Ltmp709 # Offset: 34
    00000024: 	subq	%rcx, %rsi
    00000027: 	leaq	0x4(%r8), %rax
    0000002b: 	subq	$0x1, %rsi
    0000002f: 	testq	%rsi, %rsi
    00000032: 	jg	.Ltmp710 # Offset: 50
.Ltmp708:
    00000034: 	retq # Offset: 52
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp709:
    00000038: 	movq	%rcx, %rsi
    0000003b: 	jmp	.Ltmp711 # Offset: 59
DWARF CFI Instructions:
    <empty>
End of Function "_Z14std_lowerboundIPiiET_S1_S1_T0_"

Binary Function "_Z14std_upperboundIPiiET_S1_S1_T0_" after disassembly {
  Number      : 147
  State       : disassembled
  Address     : 0x5310
  Size        : 0x3d
  MaxSize     : 0x40
  Offset      : 0x5310
  Section     : .text
  Orc Section : .local.text._Z14std_upperboundIPiiET_S1_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0146:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rdi, %rax
    0000000a: 	sarq	$0x2, %rsi
    0000000e: 	nop # Size: 2
.Ltmp715:
    00000010: 	testq	%rsi, %rsi
    00000013: 	jle	.Ltmp712 # Offset: 19
.Ltmp714:
    00000015: 	movq	%rsi, %rcx
    00000018: 	sarq	%rcx
    0000001b: 	leaq	(%rax,%rcx,4), %r8
    0000001f: 	cmpl	%edx, (%r8)
    00000022: 	jg	.Ltmp713 # Offset: 34
    00000024: 	subq	%rcx, %rsi
    00000027: 	leaq	0x4(%r8), %rax
    0000002b: 	subq	$0x1, %rsi
    0000002f: 	testq	%rsi, %rsi
    00000032: 	jg	.Ltmp714 # Offset: 50
.Ltmp712:
    00000034: 	retq # Offset: 52
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp713:
    00000038: 	movq	%rcx, %rsi
    0000003b: 	jmp	.Ltmp715 # Offset: 59
DWARF CFI Instructions:
    <empty>
End of Function "_Z14std_upperboundIPiiET_S1_S1_T0_"

Binary Function "_Z13binarysearch4IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEbT_S7_T0_" after disassembly {
  Number      : 148
  State       : disassembled
  Address     : 0x5350
  Size        : 0x4e
  MaxSize     : 0x50
  Offset      : 0x5350
  Section     : .text
  Orc Section : .local.text._Z13binarysearch4IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEbT_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0147:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %rcx
    0000000a: 	sarq	$0x2, %rcx
    0000000e: 	testq	%rsi, %rsi
    00000011: 	jg	.Ltmp716 # Offset: 17
    00000013: 	jmp	.Ltmp717 # Offset: 19
    00000015: 	nopl	(%rax) # Size: 3
.Ltmp718:
    00000018: 	addq	$0x1, %rax
    0000001c: 	leaq	0x4(%rsi), %rdi
    00000020: 	subq	%rax, %rcx
    00000023: 	testq	%rcx, %rcx
    00000026: 	jle	.Ltmp717 # Offset: 38
.Ltmp716:
    00000028: 	movq	%rcx, %rax
    0000002b: 	sarq	%rax
    0000002e: 	leaq	(%rdi,%rax,4), %rsi
    00000032: 	cmpl	%edx, (%rsi)
    00000034: 	jl	.Ltmp718 # Offset: 52
    00000036: 	jle	.Ltmp719 # Offset: 54
    00000038: 	movq	%rax, %rcx
    0000003b: 	testq	%rcx, %rcx
    0000003e: 	jg	.Ltmp716 # Offset: 62
.Ltmp717:
    00000040: 	xorl	%eax, %eax
    00000042: 	retq # Offset: 66
    00000043: 	nopl	(%rax,%rax) # Size: 5
.Ltmp719:
    00000048: 	movl	$0x1, %eax
    0000004d: 	retq # Offset: 77
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch4IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEbT_S7_T0_"

Binary Function "_Z13binarysearch2IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEbT_S7_T0_" after disassembly {
  Number      : 149
  State       : disassembled
  Address     : 0x53a0
  Size        : 0x56
  MaxSize     : 0x60
  Offset      : 0x53a0
  Section     : .text
  Orc Section : .local.text._Z13binarysearch2IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEbT_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0148:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rcx
    00000007: 	subq	%rdi, %rcx
    0000000a: 	sarq	$0x2, %rcx
    0000000e: 	cmpq	%rsi, %rdi
    00000011: 	jne	.Ltmp720 # Offset: 17
    00000013: 	jmp	.Ltmp721 # Offset: 19
    00000015: 	nopl	(%rax) # Size: 3
.Ltmp722:
    00000018: 	addq	$0x1, %rax
    0000001c: 	leaq	0x4(%rsi), %rdi
    00000020: 	subq	%rax, %rcx
    00000023: 	testq	%rcx, %rcx
    00000026: 	je	.Ltmp721 # Offset: 38
.Ltmp720:
    00000028: 	movq	%rcx, %rax
    0000002b: 	shrq	$0x3f, %rax
    0000002f: 	addq	%rcx, %rax
    00000032: 	sarq	%rax
    00000035: 	leaq	(%rdi,%rax,4), %rsi
    00000039: 	cmpl	%edx, (%rsi)
    0000003b: 	jl	.Ltmp722 # Offset: 59
    0000003d: 	jle	.Ltmp723 # Offset: 61
    0000003f: 	movq	%rax, %rcx
    00000042: 	testq	%rcx, %rcx
    00000045: 	jne	.Ltmp720 # Offset: 69
.Ltmp721:
    00000047: 	xorl	%eax, %eax
    00000049: 	retq # Offset: 73
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp723:
    00000050: 	movl	$0x1, %eax
    00000055: 	retq # Offset: 85
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch2IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEbT_S7_T0_"

Binary Function "_Z13binarysearch1IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEbT_S7_T0_" after disassembly {
  Number      : 150
  State       : disassembled
  Address     : 0x5400
  Size        : 0x4e
  MaxSize     : 0x50
  Offset      : 0x5400
  Section     : .text
  Orc Section : .local.text._Z13binarysearch1IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEbT_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0149:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	jne	.Ltmp724 # Offset: 7
    00000009: 	jmp	.Ltmp725 # Offset: 9
    0000000b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp726:
    00000010: 	leaq	0x4(%rax), %rdi
    00000014: 	cmpq	%rdi, %rsi
    00000017: 	je	.Ltmp725 # Offset: 23
.Ltmp724:
    00000019: 	movq	%rsi, %rax
    0000001c: 	subq	%rdi, %rax
    0000001f: 	movq	%rax, %rcx
    00000022: 	shrq	$0x3f, %rax
    00000026: 	sarq	$0x2, %rcx
    0000002a: 	addq	%rcx, %rax
    0000002d: 	sarq	%rax
    00000030: 	leaq	(%rdi,%rax,4), %rax
    00000034: 	cmpl	%edx, (%rax)
    00000036: 	jl	.Ltmp726 # Offset: 54
    00000038: 	jle	.Ltmp727 # Offset: 56
    0000003a: 	movq	%rax, %rsi
    0000003d: 	cmpq	%rdi, %rsi
    00000040: 	jne	.Ltmp724 # Offset: 64
.Ltmp725:
    00000042: 	xorl	%eax, %eax
    00000044: 	retq # Offset: 68
    00000045: 	nopl	(%rax) # Size: 3
.Ltmp727:
    00000048: 	movl	$0x1, %eax
    0000004d: 	retq # Offset: 77
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch1IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEbT_S7_T0_"

Binary Function "_Z16std_binarysearchIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEbT_S7_T0_" after disassembly {
  Number      : 151
  State       : disassembled
  Address     : 0x5450
  Size        : 0x4d
  MaxSize     : 0x50
  Offset      : 0x5450
  Section     : .text
  Orc Section : .local.text._Z16std_binarysearchIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEbT_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0150:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	subq	%rdi, %rax
    0000000a: 	sarq	$0x2, %rax
    0000000e: 	nop # Size: 2
.Ltmp732:
    00000010: 	testq	%rax, %rax
    00000013: 	jle	.Ltmp728 # Offset: 19
.Ltmp730:
    00000015: 	movq	%rax, %rcx
    00000018: 	sarq	%rcx
    0000001b: 	leaq	(%rdi,%rcx,4), %r8
    0000001f: 	cmpl	%edx, (%r8)
    00000022: 	jge	.Ltmp729 # Offset: 34
    00000024: 	subq	%rcx, %rax
    00000027: 	leaq	0x4(%r8), %rdi
    0000002b: 	subq	$0x1, %rax
    0000002f: 	testq	%rax, %rax
    00000032: 	jg	.Ltmp730 # Offset: 50
.Ltmp728:
    00000034: 	xorl	%eax, %eax
    00000036: 	cmpq	%rdi, %rsi
    00000039: 	je	.Ltmp731 # Offset: 57
    0000003b: 	cmpl	%edx, (%rdi)
    0000003d: 	setle	%al
.Ltmp731:
    00000040: 	retq # Offset: 64
    00000041: 	nopl	(%rax) # Size: 7
.Ltmp729:
    00000048: 	movq	%rcx, %rax
    0000004b: 	jmp	.Ltmp732 # Offset: 75
DWARF CFI Instructions:
    <empty>
End of Function "_Z16std_binarysearchIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEbT_S7_T0_"

Binary Function "_Z14std_lowerboundIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiET_S7_S7_T0_" after disassembly {
  Number      : 152
  State       : disassembled
  Address     : 0x54a0
  Size        : 0x3d
  MaxSize     : 0x40
  Offset      : 0x54a0
  Section     : .text
  Orc Section : .local.text._Z14std_lowerboundIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiET_S7_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0151:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rdi, %rax
    0000000a: 	sarq	$0x2, %rsi
    0000000e: 	nop # Size: 2
.Ltmp736:
    00000010: 	testq	%rsi, %rsi
    00000013: 	jle	.Ltmp733 # Offset: 19
.Ltmp735:
    00000015: 	movq	%rsi, %rcx
    00000018: 	sarq	%rcx
    0000001b: 	leaq	(%rax,%rcx,4), %r8
    0000001f: 	cmpl	%edx, (%r8)
    00000022: 	jge	.Ltmp734 # Offset: 34
    00000024: 	subq	%rcx, %rsi
    00000027: 	leaq	0x4(%r8), %rax
    0000002b: 	subq	$0x1, %rsi
    0000002f: 	testq	%rsi, %rsi
    00000032: 	jg	.Ltmp735 # Offset: 50
.Ltmp733:
    00000034: 	retq # Offset: 52
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp734:
    00000038: 	movq	%rcx, %rsi
    0000003b: 	jmp	.Ltmp736 # Offset: 59
DWARF CFI Instructions:
    <empty>
End of Function "_Z14std_lowerboundIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiET_S7_S7_T0_"

Binary Function "_Z12upper_bound2IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiET_S7_S7_T0_" after disassembly {
  Number      : 153
  State       : disassembled
  Address     : 0x54e0
  Size        : 0x45
  MaxSize     : 0x50
  Offset      : 0x54e0
  Section     : .text
  Orc Section : .local.text._Z12upper_bound2IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiET_S7_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0152:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rdi, %rax
    0000000a: 	sarq	$0x2, %rsi
    0000000e: 	nop # Size: 2
.Ltmp740:
    00000010: 	testq	%rsi, %rsi
    00000013: 	je	.Ltmp737 # Offset: 19
.Ltmp739:
    00000015: 	movq	%rsi, %rcx
    00000018: 	shrq	$0x3f, %rcx
    0000001c: 	addq	%rsi, %rcx
    0000001f: 	sarq	%rcx
    00000022: 	leaq	(%rax,%rcx,4), %r8
    00000026: 	cmpl	%edx, (%r8)
    00000029: 	jg	.Ltmp738 # Offset: 41
    0000002b: 	addq	$0x1, %rcx
    0000002f: 	leaq	0x4(%r8), %rax
    00000033: 	subq	%rcx, %rsi
    00000036: 	testq	%rsi, %rsi
    00000039: 	jne	.Ltmp739 # Offset: 57
.Ltmp737:
    0000003b: 	retq # Offset: 59
    0000003c: 	nopl	(%rax) # Size: 4
.Ltmp738:
    00000040: 	movq	%rcx, %rsi
    00000043: 	jmp	.Ltmp740 # Offset: 67
DWARF CFI Instructions:
    <empty>
End of Function "_Z12upper_bound2IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiET_S7_S7_T0_"

Binary Function "_Z12upper_bound1IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiET_S7_S7_T0_" after disassembly {
  Number      : 154
  State       : disassembled
  Address     : 0x5530
  Size        : 0x45
  MaxSize     : 0x50
  Offset      : 0x5530
  Section     : .text
  Orc Section : .local.text._Z12upper_bound1IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiET_S7_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0153:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	nopw	(%rax,%rax) # Size: 9
.Ltmp744:
    00000010: 	cmpq	%rdi, %rax
    00000013: 	je	.Ltmp741 # Offset: 19
.Ltmp743:
    00000015: 	movq	%rax, %rcx
    00000018: 	subq	%rdi, %rcx
    0000001b: 	movq	%rcx, %rsi
    0000001e: 	shrq	$0x3f, %rcx
    00000022: 	sarq	$0x2, %rsi
    00000026: 	addq	%rsi, %rcx
    00000029: 	sarq	%rcx
    0000002c: 	leaq	(%rdi,%rcx,4), %rcx
    00000030: 	cmpl	%edx, (%rcx)
    00000032: 	jg	.Ltmp742 # Offset: 50
    00000034: 	leaq	0x4(%rcx), %rdi
    00000038: 	cmpq	%rdi, %rax
    0000003b: 	jne	.Ltmp743 # Offset: 59
.Ltmp741:
    0000003d: 	retq # Offset: 61
    0000003e: 	nop # Size: 2
.Ltmp742:
    00000040: 	movq	%rcx, %rax
    00000043: 	jmp	.Ltmp744 # Offset: 67
DWARF CFI Instructions:
    <empty>
End of Function "_Z12upper_bound1IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiET_S7_S7_T0_"

Binary Function "_Z12lower_bound2IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiET_S7_S7_T0_" after disassembly {
  Number      : 155
  State       : disassembled
  Address     : 0x5580
  Size        : 0x45
  MaxSize     : 0x50
  Offset      : 0x5580
  Section     : .text
  Orc Section : .local.text._Z12lower_bound2IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiET_S7_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0154:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rdi, %rax
    0000000a: 	sarq	$0x2, %rsi
    0000000e: 	nop # Size: 2
.Ltmp748:
    00000010: 	testq	%rsi, %rsi
    00000013: 	je	.Ltmp745 # Offset: 19
.Ltmp747:
    00000015: 	movq	%rsi, %rcx
    00000018: 	shrq	$0x3f, %rcx
    0000001c: 	addq	%rsi, %rcx
    0000001f: 	sarq	%rcx
    00000022: 	leaq	(%rax,%rcx,4), %r8
    00000026: 	cmpl	%edx, (%r8)
    00000029: 	jge	.Ltmp746 # Offset: 41
    0000002b: 	addq	$0x1, %rcx
    0000002f: 	leaq	0x4(%r8), %rax
    00000033: 	subq	%rcx, %rsi
    00000036: 	testq	%rsi, %rsi
    00000039: 	jne	.Ltmp747 # Offset: 57
.Ltmp745:
    0000003b: 	retq # Offset: 59
    0000003c: 	nopl	(%rax) # Size: 4
.Ltmp746:
    00000040: 	movq	%rcx, %rsi
    00000043: 	jmp	.Ltmp748 # Offset: 67
DWARF CFI Instructions:
    <empty>
End of Function "_Z12lower_bound2IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiET_S7_S7_T0_"

Binary Function "_Z12lower_bound1IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiET_S7_S7_T0_" after disassembly {
  Number      : 156
  State       : disassembled
  Address     : 0x55d0
  Size        : 0x45
  MaxSize     : 0x50
  Offset      : 0x55d0
  Section     : .text
  Orc Section : .local.text._Z12lower_bound1IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiET_S7_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0155:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	nopw	(%rax,%rax) # Size: 9
.Ltmp752:
    00000010: 	cmpq	%rdi, %rax
    00000013: 	je	.Ltmp749 # Offset: 19
.Ltmp751:
    00000015: 	movq	%rax, %rcx
    00000018: 	subq	%rdi, %rcx
    0000001b: 	movq	%rcx, %rsi
    0000001e: 	shrq	$0x3f, %rcx
    00000022: 	sarq	$0x2, %rsi
    00000026: 	addq	%rsi, %rcx
    00000029: 	sarq	%rcx
    0000002c: 	leaq	(%rdi,%rcx,4), %rcx
    00000030: 	cmpl	%edx, (%rcx)
    00000032: 	jge	.Ltmp750 # Offset: 50
    00000034: 	leaq	0x4(%rcx), %rdi
    00000038: 	cmpq	%rdi, %rax
    0000003b: 	jne	.Ltmp751 # Offset: 59
.Ltmp749:
    0000003d: 	retq # Offset: 61
    0000003e: 	nop # Size: 2
.Ltmp750:
    00000040: 	movq	%rcx, %rax
    00000043: 	jmp	.Ltmp752 # Offset: 67
DWARF CFI Instructions:
    <empty>
End of Function "_Z12lower_bound1IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiET_S7_S7_T0_"

Binary Function "_Z14std_upperboundIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiET_S7_S7_T0_" after disassembly {
  Number      : 157
  State       : disassembled
  Address     : 0x5620
  Size        : 0x3d
  MaxSize     : 0x40
  Offset      : 0x5620
  Section     : .text
  Orc Section : .local.text._Z14std_upperboundIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiET_S7_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0156:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rdi, %rax
    0000000a: 	sarq	$0x2, %rsi
    0000000e: 	nop # Size: 2
.Ltmp756:
    00000010: 	testq	%rsi, %rsi
    00000013: 	jle	.Ltmp753 # Offset: 19
.Ltmp755:
    00000015: 	movq	%rsi, %rcx
    00000018: 	sarq	%rcx
    0000001b: 	leaq	(%rax,%rcx,4), %r8
    0000001f: 	cmpl	%edx, (%r8)
    00000022: 	jg	.Ltmp754 # Offset: 34
    00000024: 	subq	%rcx, %rsi
    00000027: 	leaq	0x4(%r8), %rax
    0000002b: 	subq	$0x1, %rsi
    0000002f: 	testq	%rsi, %rsi
    00000032: 	jg	.Ltmp755 # Offset: 50
.Ltmp753:
    00000034: 	retq # Offset: 52
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp754:
    00000038: 	movq	%rcx, %rsi
    0000003b: 	jmp	.Ltmp756 # Offset: 59
DWARF CFI Instructions:
    <empty>
End of Function "_Z14std_upperboundIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiET_S7_S7_T0_"

Binary Function "_Z16std_binarysearchIPffEbT_S1_T0_" after disassembly {
  Number      : 158
  State       : disassembled
  Address     : 0x5660
  Size        : 0x55
  MaxSize     : 0x60
  Offset      : 0x5660
  Section     : .text
  Orc Section : .local.text._Z16std_binarysearchIPffEbT_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0157:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	subq	%rdi, %rax
    0000000a: 	sarq	$0x2, %rax
    0000000e: 	nop # Size: 2
.Ltmp761:
    00000010: 	testq	%rax, %rax
    00000013: 	jle	.Ltmp757 # Offset: 19
.Ltmp759:
    00000015: 	movq	%rax, %rdx
    00000018: 	sarq	%rdx
    0000001b: 	leaq	(%rdi,%rdx,4), %rcx
    0000001f: 	comiss	(%rcx), %xmm0
    00000022: 	jbe	.Ltmp758 # Offset: 34
    00000024: 	subq	%rdx, %rax
    00000027: 	leaq	0x4(%rcx), %rdi
    0000002b: 	subq	$0x1, %rax
    0000002f: 	testq	%rax, %rax
    00000032: 	jg	.Ltmp759 # Offset: 50
.Ltmp757:
    00000034: 	xorl	%eax, %eax
    00000036: 	cmpq	%rdi, %rsi
    00000039: 	je	.Ltmp760 # Offset: 57
    0000003b: 	movss	(%rdi), %xmm1
    0000003f: 	comiss	%xmm0, %xmm1
    00000042: 	setbe	%al
.Ltmp760:
    00000045: 	retq # Offset: 69
    00000046: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp758:
    00000050: 	movq	%rdx, %rax
    00000053: 	jmp	.Ltmp761 # Offset: 83
DWARF CFI Instructions:
    <empty>
End of Function "_Z16std_binarysearchIPffEbT_S1_T0_"

Binary Function "_Z14std_lowerboundIPffET_S1_S1_T0_" after disassembly {
  Number      : 159
  State       : disassembled
  Address     : 0x56c0
  Size        : 0x3d
  MaxSize     : 0x40
  Offset      : 0x56c0
  Section     : .text
  Orc Section : .local.text._Z14std_lowerboundIPffET_S1_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0158:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rdi, %rax
    0000000a: 	sarq	$0x2, %rsi
    0000000e: 	nop # Size: 2
.Ltmp765:
    00000010: 	testq	%rsi, %rsi
    00000013: 	jle	.Ltmp762 # Offset: 19
.Ltmp764:
    00000015: 	movq	%rsi, %rdx
    00000018: 	sarq	%rdx
    0000001b: 	leaq	(%rax,%rdx,4), %rcx
    0000001f: 	comiss	(%rcx), %xmm0
    00000022: 	jbe	.Ltmp763 # Offset: 34
    00000024: 	subq	%rdx, %rsi
    00000027: 	leaq	0x4(%rcx), %rax
    0000002b: 	subq	$0x1, %rsi
    0000002f: 	testq	%rsi, %rsi
    00000032: 	jg	.Ltmp764 # Offset: 50
.Ltmp762:
    00000034: 	retq # Offset: 52
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp763:
    00000038: 	movq	%rdx, %rsi
    0000003b: 	jmp	.Ltmp765 # Offset: 59
DWARF CFI Instructions:
    <empty>
End of Function "_Z14std_lowerboundIPffET_S1_S1_T0_"

Binary Function "_Z14std_upperboundIPffET_S1_S1_T0_" after disassembly {
  Number      : 160
  State       : disassembled
  Address     : 0x5700
  Size        : 0x45
  MaxSize     : 0x50
  Offset      : 0x5700
  Section     : .text
  Orc Section : .local.text._Z14std_upperboundIPffET_S1_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0159:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rdi, %rax
    0000000a: 	sarq	$0x2, %rsi
    0000000e: 	nop # Size: 2
.Ltmp769:
    00000010: 	testq	%rsi, %rsi
    00000013: 	jle	.Ltmp766 # Offset: 19
.Ltmp768:
    00000015: 	movq	%rsi, %rdx
    00000018: 	sarq	%rdx
    0000001b: 	leaq	(%rax,%rdx,4), %rcx
    0000001f: 	movss	(%rcx), %xmm1
    00000023: 	comiss	%xmm0, %xmm1
    00000026: 	ja	.Ltmp767 # Offset: 38
    00000028: 	subq	%rdx, %rsi
    0000002b: 	leaq	0x4(%rcx), %rax
    0000002f: 	subq	$0x1, %rsi
    00000033: 	testq	%rsi, %rsi
    00000036: 	jg	.Ltmp768 # Offset: 54
.Ltmp766:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
.Ltmp767:
    00000040: 	movq	%rdx, %rsi
    00000043: 	jmp	.Ltmp769 # Offset: 67
DWARF CFI Instructions:
    <empty>
End of Function "_Z14std_upperboundIPffET_S1_S1_T0_"

Binary Function "_Z13binarysearch4IN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEbT_S7_T0_" after disassembly {
  Number      : 161
  State       : disassembled
  Address     : 0x5750
  Size        : 0x56
  MaxSize     : 0x60
  Offset      : 0x5750
  Section     : .text
  Orc Section : .local.text._Z13binarysearch4IN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEbT_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0160:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rsi, %rdx
    0000000a: 	sarq	$0x2, %rdx
    0000000e: 	testq	%rsi, %rsi
    00000011: 	jg	.Ltmp770 # Offset: 17
    00000013: 	jmp	.Ltmp771 # Offset: 19
    00000015: 	nopl	(%rax) # Size: 3
.Ltmp772:
    00000018: 	addq	$0x1, %rax
    0000001c: 	leaq	0x4(%rcx), %rdi
    00000020: 	subq	%rax, %rdx
    00000023: 	testq	%rdx, %rdx
    00000026: 	jle	.Ltmp771 # Offset: 38
.Ltmp770:
    00000028: 	movq	%rdx, %rax
    0000002b: 	sarq	%rax
    0000002e: 	leaq	(%rdi,%rax,4), %rcx
    00000032: 	movss	(%rcx), %xmm1
    00000036: 	comiss	%xmm1, %xmm0
    00000039: 	ja	.Ltmp772 # Offset: 57
    0000003b: 	comiss	%xmm0, %xmm1
    0000003e: 	jbe	.Ltmp773 # Offset: 62
    00000040: 	movq	%rax, %rdx
    00000043: 	testq	%rdx, %rdx
    00000046: 	jg	.Ltmp770 # Offset: 70
.Ltmp771:
    00000048: 	xorl	%eax, %eax
    0000004a: 	retq # Offset: 74
    0000004b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp773:
    00000050: 	movl	$0x1, %eax
    00000055: 	retq # Offset: 85
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch4IN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEbT_S7_T0_"

Binary Function "_Z13binarysearch2IN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEbT_S7_T0_" after disassembly {
  Number      : 162
  State       : disassembled
  Address     : 0x57b0
  Size        : 0x5e
  MaxSize     : 0x60
  Offset      : 0x57b0
  Section     : .text
  Orc Section : .local.text._Z13binarysearch2IN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEbT_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0161:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rdx
    00000007: 	subq	%rdi, %rdx
    0000000a: 	sarq	$0x2, %rdx
    0000000e: 	cmpq	%rsi, %rdi
    00000011: 	jne	.Ltmp774 # Offset: 17
    00000013: 	jmp	.Ltmp775 # Offset: 19
    00000015: 	nopl	(%rax) # Size: 3
.Ltmp776:
    00000018: 	addq	$0x1, %rax
    0000001c: 	leaq	0x4(%rcx), %rdi
    00000020: 	subq	%rax, %rdx
    00000023: 	testq	%rdx, %rdx
    00000026: 	je	.Ltmp775 # Offset: 38
.Ltmp774:
    00000028: 	movq	%rdx, %rax
    0000002b: 	shrq	$0x3f, %rax
    0000002f: 	addq	%rdx, %rax
    00000032: 	sarq	%rax
    00000035: 	leaq	(%rdi,%rax,4), %rcx
    00000039: 	movss	(%rcx), %xmm1
    0000003d: 	comiss	%xmm1, %xmm0
    00000040: 	ja	.Ltmp776 # Offset: 64
    00000042: 	comiss	%xmm0, %xmm1
    00000045: 	jbe	.Ltmp777 # Offset: 69
    00000047: 	movq	%rax, %rdx
    0000004a: 	testq	%rdx, %rdx
    0000004d: 	jne	.Ltmp774 # Offset: 77
.Ltmp775:
    0000004f: 	xorl	%eax, %eax
    00000051: 	retq # Offset: 81
    00000052: 	nopw	(%rax,%rax) # Size: 6
.Ltmp777:
    00000058: 	movl	$0x1, %eax
    0000005d: 	retq # Offset: 93
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch2IN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEbT_S7_T0_"

Binary Function "_Z13binarysearch1IN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEbT_S7_T0_" after disassembly {
  Number      : 163
  State       : disassembled
  Address     : 0x5810
  Size        : 0x56
  MaxSize     : 0x60
  Offset      : 0x5810
  Section     : .text
  Orc Section : .local.text._Z13binarysearch1IN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEbT_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0162:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	jne	.Ltmp778 # Offset: 7
    00000009: 	jmp	.Ltmp779 # Offset: 9
    0000000b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp780:
    00000010: 	leaq	0x4(%rax), %rdi
    00000014: 	cmpq	%rdi, %rsi
    00000017: 	je	.Ltmp779 # Offset: 23
.Ltmp778:
    00000019: 	movq	%rsi, %rax
    0000001c: 	subq	%rdi, %rax
    0000001f: 	movq	%rax, %rdx
    00000022: 	shrq	$0x3f, %rax
    00000026: 	sarq	$0x2, %rdx
    0000002a: 	addq	%rdx, %rax
    0000002d: 	sarq	%rax
    00000030: 	leaq	(%rdi,%rax,4), %rax
    00000034: 	movss	(%rax), %xmm1
    00000038: 	comiss	%xmm1, %xmm0
    0000003b: 	ja	.Ltmp780 # Offset: 59
    0000003d: 	comiss	%xmm0, %xmm1
    00000040: 	jbe	.Ltmp781 # Offset: 64
    00000042: 	movq	%rax, %rsi
    00000045: 	cmpq	%rdi, %rsi
    00000048: 	jne	.Ltmp778 # Offset: 72
.Ltmp779:
    0000004a: 	xorl	%eax, %eax
    0000004c: 	retq # Offset: 76
    0000004d: 	nopl	(%rax) # Size: 3
.Ltmp781:
    00000050: 	movl	$0x1, %eax
    00000055: 	retq # Offset: 85
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch1IN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEbT_S7_T0_"

Binary Function "_Z16std_binarysearchIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEbT_S7_T0_" after disassembly {
  Number      : 164
  State       : disassembled
  Address     : 0x5870
  Size        : 0x55
  MaxSize     : 0x60
  Offset      : 0x5870
  Section     : .text
  Orc Section : .local.text._Z16std_binarysearchIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEbT_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0163:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	subq	%rdi, %rax
    0000000a: 	sarq	$0x2, %rax
    0000000e: 	nop # Size: 2
.Ltmp786:
    00000010: 	testq	%rax, %rax
    00000013: 	jle	.Ltmp782 # Offset: 19
.Ltmp784:
    00000015: 	movq	%rax, %rdx
    00000018: 	sarq	%rdx
    0000001b: 	leaq	(%rdi,%rdx,4), %rcx
    0000001f: 	comiss	(%rcx), %xmm0
    00000022: 	jbe	.Ltmp783 # Offset: 34
    00000024: 	subq	%rdx, %rax
    00000027: 	leaq	0x4(%rcx), %rdi
    0000002b: 	subq	$0x1, %rax
    0000002f: 	testq	%rax, %rax
    00000032: 	jg	.Ltmp784 # Offset: 50
.Ltmp782:
    00000034: 	xorl	%eax, %eax
    00000036: 	cmpq	%rdi, %rsi
    00000039: 	je	.Ltmp785 # Offset: 57
    0000003b: 	movss	(%rdi), %xmm1
    0000003f: 	comiss	%xmm0, %xmm1
    00000042: 	setbe	%al
.Ltmp785:
    00000045: 	retq # Offset: 69
    00000046: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp783:
    00000050: 	movq	%rdx, %rax
    00000053: 	jmp	.Ltmp786 # Offset: 83
DWARF CFI Instructions:
    <empty>
End of Function "_Z16std_binarysearchIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEbT_S7_T0_"

Binary Function "_Z14std_lowerboundIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfET_S7_S7_T0_" after disassembly {
  Number      : 165
  State       : disassembled
  Address     : 0x58d0
  Size        : 0x3d
  MaxSize     : 0x40
  Offset      : 0x58d0
  Section     : .text
  Orc Section : .local.text._Z14std_lowerboundIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfET_S7_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0164:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rdi, %rax
    0000000a: 	sarq	$0x2, %rsi
    0000000e: 	nop # Size: 2
.Ltmp790:
    00000010: 	testq	%rsi, %rsi
    00000013: 	jle	.Ltmp787 # Offset: 19
.Ltmp789:
    00000015: 	movq	%rsi, %rdx
    00000018: 	sarq	%rdx
    0000001b: 	leaq	(%rax,%rdx,4), %rcx
    0000001f: 	comiss	(%rcx), %xmm0
    00000022: 	jbe	.Ltmp788 # Offset: 34
    00000024: 	subq	%rdx, %rsi
    00000027: 	leaq	0x4(%rcx), %rax
    0000002b: 	subq	$0x1, %rsi
    0000002f: 	testq	%rsi, %rsi
    00000032: 	jg	.Ltmp789 # Offset: 50
.Ltmp787:
    00000034: 	retq # Offset: 52
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp788:
    00000038: 	movq	%rdx, %rsi
    0000003b: 	jmp	.Ltmp790 # Offset: 59
DWARF CFI Instructions:
    <empty>
End of Function "_Z14std_lowerboundIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfET_S7_S7_T0_"

Binary Function "_Z12upper_bound2IN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfET_S7_S7_T0_" after disassembly {
  Number      : 166
  State       : disassembled
  Address     : 0x5910
  Size        : 0x45
  MaxSize     : 0x50
  Offset      : 0x5910
  Section     : .text
  Orc Section : .local.text._Z12upper_bound2IN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfET_S7_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0165:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rdi, %rax
    0000000a: 	sarq	$0x2, %rsi
    0000000e: 	nop # Size: 2
.Ltmp794:
    00000010: 	testq	%rsi, %rsi
    00000013: 	je	.Ltmp791 # Offset: 19
.Ltmp793:
    00000015: 	movq	%rsi, %rdx
    00000018: 	shrq	$0x3f, %rdx
    0000001c: 	addq	%rsi, %rdx
    0000001f: 	sarq	%rdx
    00000022: 	leaq	(%rax,%rdx,4), %rcx
    00000026: 	movss	(%rcx), %xmm1
    0000002a: 	comiss	%xmm0, %xmm1
    0000002d: 	ja	.Ltmp792 # Offset: 45
    0000002f: 	addq	$0x1, %rdx
    00000033: 	leaq	0x4(%rcx), %rax
    00000037: 	subq	%rdx, %rsi
    0000003a: 	testq	%rsi, %rsi
    0000003d: 	jne	.Ltmp793 # Offset: 61
.Ltmp791:
    0000003f: 	retq # Offset: 63
.Ltmp792:
    00000040: 	movq	%rdx, %rsi
    00000043: 	jmp	.Ltmp794 # Offset: 67
DWARF CFI Instructions:
    <empty>
End of Function "_Z12upper_bound2IN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfET_S7_S7_T0_"

Binary Function "_Z12upper_bound1IN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfET_S7_S7_T0_" after disassembly {
  Number      : 167
  State       : disassembled
  Address     : 0x5960
  Size        : 0x4d
  MaxSize     : 0x50
  Offset      : 0x5960
  Section     : .text
  Orc Section : .local.text._Z12upper_bound1IN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfET_S7_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0166:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	nopw	(%rax,%rax) # Size: 9
.Ltmp798:
    00000010: 	cmpq	%rdi, %rax
    00000013: 	je	.Ltmp795 # Offset: 19
.Ltmp797:
    00000015: 	movq	%rax, %rdx
    00000018: 	subq	%rdi, %rdx
    0000001b: 	movq	%rdx, %rcx
    0000001e: 	shrq	$0x3f, %rdx
    00000022: 	sarq	$0x2, %rcx
    00000026: 	addq	%rcx, %rdx
    00000029: 	sarq	%rdx
    0000002c: 	leaq	(%rdi,%rdx,4), %rdx
    00000030: 	movss	(%rdx), %xmm1
    00000034: 	comiss	%xmm0, %xmm1
    00000037: 	ja	.Ltmp796 # Offset: 55
    00000039: 	leaq	0x4(%rdx), %rdi
    0000003d: 	cmpq	%rdi, %rax
    00000040: 	jne	.Ltmp797 # Offset: 64
.Ltmp795:
    00000042: 	retq # Offset: 66
    00000043: 	nopl	(%rax,%rax) # Size: 5
.Ltmp796:
    00000048: 	movq	%rdx, %rax
    0000004b: 	jmp	.Ltmp798 # Offset: 75
DWARF CFI Instructions:
    <empty>
End of Function "_Z12upper_bound1IN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfET_S7_S7_T0_"

Binary Function "_Z12lower_bound2IN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfET_S7_S7_T0_" after disassembly {
  Number      : 168
  State       : disassembled
  Address     : 0x59b0
  Size        : 0x45
  MaxSize     : 0x50
  Offset      : 0x59b0
  Section     : .text
  Orc Section : .local.text._Z12lower_bound2IN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfET_S7_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0167:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rdi, %rax
    0000000a: 	sarq	$0x2, %rsi
    0000000e: 	nop # Size: 2
.Ltmp802:
    00000010: 	testq	%rsi, %rsi
    00000013: 	je	.Ltmp799 # Offset: 19
.Ltmp801:
    00000015: 	movq	%rsi, %rdx
    00000018: 	shrq	$0x3f, %rdx
    0000001c: 	addq	%rsi, %rdx
    0000001f: 	sarq	%rdx
    00000022: 	leaq	(%rax,%rdx,4), %rcx
    00000026: 	comiss	(%rcx), %xmm0
    00000029: 	jbe	.Ltmp800 # Offset: 41
    0000002b: 	addq	$0x1, %rdx
    0000002f: 	leaq	0x4(%rcx), %rax
    00000033: 	subq	%rdx, %rsi
    00000036: 	testq	%rsi, %rsi
    00000039: 	jne	.Ltmp801 # Offset: 57
.Ltmp799:
    0000003b: 	retq # Offset: 59
    0000003c: 	nopl	(%rax) # Size: 4
.Ltmp800:
    00000040: 	movq	%rdx, %rsi
    00000043: 	jmp	.Ltmp802 # Offset: 67
DWARF CFI Instructions:
    <empty>
End of Function "_Z12lower_bound2IN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfET_S7_S7_T0_"

Binary Function "_Z12lower_bound1IN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfET_S7_S7_T0_" after disassembly {
  Number      : 169
  State       : disassembled
  Address     : 0x5a00
  Size        : 0x45
  MaxSize     : 0x50
  Offset      : 0x5a00
  Section     : .text
  Orc Section : .local.text._Z12lower_bound1IN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfET_S7_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0168:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	nopw	(%rax,%rax) # Size: 9
.Ltmp806:
    00000010: 	cmpq	%rdi, %rax
    00000013: 	je	.Ltmp803 # Offset: 19
.Ltmp805:
    00000015: 	movq	%rax, %rdx
    00000018: 	subq	%rdi, %rdx
    0000001b: 	movq	%rdx, %rcx
    0000001e: 	shrq	$0x3f, %rdx
    00000022: 	sarq	$0x2, %rcx
    00000026: 	addq	%rcx, %rdx
    00000029: 	sarq	%rdx
    0000002c: 	leaq	(%rdi,%rdx,4), %rdx
    00000030: 	comiss	(%rdx), %xmm0
    00000033: 	jbe	.Ltmp804 # Offset: 51
    00000035: 	leaq	0x4(%rdx), %rdi
    00000039: 	cmpq	%rdi, %rax
    0000003c: 	jne	.Ltmp805 # Offset: 60
.Ltmp803:
    0000003e: 	retq # Offset: 62
    0000003f: 	nop # Size: 1
.Ltmp804:
    00000040: 	movq	%rdx, %rax
    00000043: 	jmp	.Ltmp806 # Offset: 67
DWARF CFI Instructions:
    <empty>
End of Function "_Z12lower_bound1IN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfET_S7_S7_T0_"

Binary Function "_Z14std_upperboundIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfET_S7_S7_T0_" after disassembly {
  Number      : 170
  State       : disassembled
  Address     : 0x5a50
  Size        : 0x45
  MaxSize     : 0x50
  Offset      : 0x5a50
  Section     : .text
  Orc Section : .local.text._Z14std_upperboundIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfET_S7_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0169:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	movq	%rdi, %rax
    0000000a: 	sarq	$0x2, %rsi
    0000000e: 	nop # Size: 2
.Ltmp810:
    00000010: 	testq	%rsi, %rsi
    00000013: 	jle	.Ltmp807 # Offset: 19
.Ltmp809:
    00000015: 	movq	%rsi, %rdx
    00000018: 	sarq	%rdx
    0000001b: 	leaq	(%rax,%rdx,4), %rcx
    0000001f: 	movss	(%rcx), %xmm1
    00000023: 	comiss	%xmm0, %xmm1
    00000026: 	ja	.Ltmp808 # Offset: 38
    00000028: 	subq	%rdx, %rsi
    0000002b: 	leaq	0x4(%rcx), %rax
    0000002f: 	subq	$0x1, %rsi
    00000033: 	testq	%rsi, %rsi
    00000036: 	jg	.Ltmp809 # Offset: 54
.Ltmp807:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
.Ltmp808:
    00000040: 	movq	%rdx, %rsi
    00000043: 	jmp	.Ltmp810 # Offset: 67
DWARF CFI Instructions:
    <empty>
End of Function "_Z14std_upperboundIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfET_S7_S7_T0_"

Binary Function "_Z13binarysearch4ISt14_List_iteratorIaEaEbT_S2_T0_" after disassembly {
  Number      : 171
  State       : disassembled
  Address     : 0x5aa0
  Size        : 0x5d
  MaxSize     : 0x60
  Offset      : 0x5aa0
  Section     : .text
  Orc Section : .local.text._Z13binarysearch4ISt14_List_iteratorIaEaEbT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0170:
    00000000: 	endbr64
    00000004: 	cmpq	%rdi, %rsi
    00000007: 	je	.Ltmp811 # Offset: 7
    00000009: 	movq	%rdi, %rax
    0000000c: 	xorl	%r8d, %r8d
    0000000f: 	nop # Size: 1
.Ltmp812:
    00000010: 	movq	(%rax), %rax
    00000013: 	addq	$0x1, %r8
    00000017: 	cmpq	%rax, %rsi
    0000001a: 	jne	.Ltmp812 # Offset: 26
    0000001c: 	nopl	(%rax) # Size: 4
.Ltmp816:
    00000020: 	movq	%r8, %rsi
    00000023: 	movq	%rdi, %rcx
    00000026: 	sarq	%rsi
    00000029: 	je	.Ltmp813 # Offset: 41
    0000002b: 	leaq	-0x1(%rsi), %rax
    0000002f: 	nop # Size: 1
.Ltmp814:
    00000030: 	movq	(%rcx), %rcx
    00000033: 	subq	$0x1, %rax
    00000037: 	jae	.Ltmp814 # Offset: 55
.Ltmp813:
    00000039: 	cmpb	%dl, 0x10(%rcx)
    0000003c: 	jge	.Ltmp815 # Offset: 60
    0000003e: 	addq	$0x1, %rsi
    00000042: 	movq	(%rcx), %rdi
    00000045: 	subq	%rsi, %r8
.Ltmp818:
    00000048: 	testq	%r8, %r8
    0000004b: 	jg	.Ltmp816 # Offset: 75
.Ltmp811:
    0000004d: 	xorl	%eax, %eax
    0000004f: 	retq # Offset: 79
.Ltmp815:
    00000050: 	jle	.Ltmp817 # Offset: 80
    00000052: 	movq	%rsi, %r8
    00000055: 	jmp	.Ltmp818 # Offset: 85
.Ltmp817:
    00000057: 	movl	$0x1, %eax
    0000005c: 	retq # Offset: 92
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch4ISt14_List_iteratorIaEaEbT_S2_T0_"

Binary Function "_Z13binarysearch2ISt14_List_iteratorIaEaEbT_S2_T0_" after disassembly {
  Number      : 172
  State       : disassembled
  Address     : 0x5b00
  Size        : 0x96
  MaxSize     : 0xa0
  Offset      : 0x5b00
  Section     : .text
  Orc Section : .local.text._Z13binarysearch2ISt14_List_iteratorIaEaEbT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0171:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp819 # Offset: 7
    00000009: 	movq	%rdi, %rax
    0000000c: 	xorl	%r8d, %r8d
    0000000f: 	nop # Size: 1
.Ltmp820:
    00000010: 	movq	(%rax), %rax
    00000013: 	addq	$0x1, %r8
    00000017: 	cmpq	%rax, %rsi
    0000001a: 	jne	.Ltmp820 # Offset: 26
    0000001c: 	nopl	(%rax) # Size: 4
.Ltmp825:
    00000020: 	movq	%r8, %rsi
    00000023: 	shrq	$0x3f, %rsi
    00000027: 	addq	%r8, %rsi
    0000002a: 	sarq	%rsi
    0000002d: 	cmpq	$0x1, %r8
    00000031: 	jle	.Ltmp821 # Offset: 49
    00000033: 	leaq	-0x1(%rsi), %rcx
    00000037: 	movq	%rdi, %rax
    0000003a: 	testq	%rsi, %rsi
    0000003d: 	je	.Ltmp822 # Offset: 61
    0000003f: 	nop # Size: 1
.Ltmp823:
    00000040: 	movq	(%rax), %rax
    00000043: 	subq	$0x1, %rcx
    00000047: 	jae	.Ltmp823 # Offset: 71
.Ltmp822:
    00000049: 	cmpb	%dl, 0x10(%rax)
    0000004c: 	jge	.Ltmp824 # Offset: 76
    0000004e: 	addq	$0x1, %rsi
    00000052: 	movq	(%rax), %rdi
    00000055: 	subq	%rsi, %r8
.Ltmp827:
    00000058: 	testq	%r8, %r8
    0000005b: 	jne	.Ltmp825 # Offset: 91
.Ltmp819:
    0000005d: 	xorl	%eax, %eax
    0000005f: 	retq # Offset: 95
.Ltmp824:
    00000060: 	jle	.Ltmp826 # Offset: 96
    00000062: 	movq	%rsi, %r8
    00000065: 	jmp	.Ltmp827 # Offset: 101
    00000067: 	nopw	(%rax,%rax) # Size: 9
.Ltmp821:
    00000070: 	leaq	0x1(%rsi), %rcx
    00000074: 	movq	%rdi, %rax
    00000077: 	testq	%rsi, %rsi
    0000007a: 	je	.Ltmp822 # Offset: 122
    0000007c: 	nopl	(%rax) # Size: 4
.Ltmp828:
    00000080: 	addq	$0x1, %rcx
    00000084: 	movq	0x8(%rax), %rax
    00000088: 	cmpq	$0x1, %rcx
    0000008c: 	jne	.Ltmp828 # Offset: 140
    0000008e: 	jmp	.Ltmp822 # Offset: 142
.Ltmp826:
    00000090: 	movl	$0x1, %eax
    00000095: 	retq # Offset: 149
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch2ISt14_List_iteratorIaEaEbT_S2_T0_"

Binary Function "_Z13binarysearch1ISt14_List_iteratorIaEaEbT_S2_T0_" after disassembly {
  Number      : 173
  State       : disassembled
  Address     : 0x5ba0
  Size        : 0x8b
  MaxSize     : 0x90
  Offset      : 0x5ba0
  Section     : .text
  Orc Section : .local.text._Z13binarysearch1ISt14_List_iteratorIaEaEbT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0172:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp829 # Offset: 7
    00000009: 	nopl	(%rax) # Size: 7
.Ltmp835:
    00000010: 	movq	%rdi, %rax
    00000013: 	xorl	%ecx, %ecx
    00000015: 	nopl	(%rax) # Size: 3
.Ltmp830:
    00000018: 	movq	(%rax), %rax
    0000001b: 	addq	$0x1, %rcx
    0000001f: 	cmpq	%rsi, %rax
    00000022: 	jne	.Ltmp830 # Offset: 34
    00000024: 	movq	%rcx, %r8
    00000027: 	sarq	%r8
    0000002a: 	cmpq	$0x1, %rcx
    0000002e: 	je	.Ltmp831 # Offset: 46
    00000030: 	leaq	-0x1(%r8), %rax
    00000034: 	movq	%rdi, %rcx
    00000037: 	testq	%r8, %r8
    0000003a: 	je	.Ltmp832 # Offset: 58
    0000003c: 	nopl	(%rax) # Size: 4
.Ltmp833:
    00000040: 	movq	(%rcx), %rcx
    00000043: 	subq	$0x1, %rax
    00000047: 	jae	.Ltmp833 # Offset: 71
.Ltmp832:
    00000049: 	cmpb	%dl, 0x10(%rcx)
    0000004c: 	jge	.Ltmp834 # Offset: 76
    0000004e: 	movq	(%rcx), %rdi
.Ltmp837:
    00000051: 	cmpq	%rdi, %rsi
    00000054: 	jne	.Ltmp835 # Offset: 84
.Ltmp829:
    00000056: 	xorl	%eax, %eax
    00000058: 	retq # Offset: 88
    00000059: 	nopl	(%rax) # Size: 7
.Ltmp834:
    00000060: 	jle	.Ltmp836 # Offset: 96
    00000062: 	movq	%rcx, %rsi
    00000065: 	jmp	.Ltmp837 # Offset: 101
    00000067: 	nopw	(%rax,%rax) # Size: 9
.Ltmp831:
    00000070: 	testq	%r8, %r8
    00000073: 	je	.Ltmp838 # Offset: 115
.Ltmp839:
    00000075: 	jmp	.Ltmp839 # Offset: 117
    00000077: 	nopw	(%rax,%rax) # Size: 9
.Ltmp838:
    00000080: 	movq	%rdi, %rcx
    00000083: 	jmp	.Ltmp832 # Offset: 131
.Ltmp836:
    00000085: 	movl	$0x1, %eax
    0000008a: 	retq # Offset: 138
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch1ISt14_List_iteratorIaEaEbT_S2_T0_"

Binary Function "_Z12upper_bound2ISt14_List_iteratorIaEaET_S2_S2_T0_" after disassembly {
  Number      : 174
  State       : disassembled
  Address     : 0x5c30
  Size        : 0xa1
  MaxSize     : 0xb0
  Offset      : 0x5c30
  Section     : .text
  Orc Section : .local.text._Z12upper_bound2ISt14_List_iteratorIaEaET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0173:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp840 # Offset: 10
    00000010: 	movq	%rdi, %rcx
    00000013: 	xorl	%r9d, %r9d
    00000016: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp841:
    00000020: 	movq	(%rcx), %rcx
    00000023: 	addq	$0x1, %r9
    00000027: 	cmpq	%rsi, %rcx
    0000002a: 	jne	.Ltmp841 # Offset: 42
    0000002c: 	nopl	(%rax) # Size: 4
.Ltmp846:
    00000030: 	movq	%r9, %r8
    00000033: 	shrq	$0x3f, %r8
    00000037: 	addq	%r9, %r8
    0000003a: 	sarq	%r8
    0000003d: 	cmpq	$0x1, %r9
    00000041: 	jle	.Ltmp842 # Offset: 65
    00000043: 	leaq	-0x1(%r8), %rsi
    00000047: 	testq	%r8, %r8
    0000004a: 	je	.Ltmp843 # Offset: 74
    0000004c: 	movq	%rax, %rcx
    0000004f: 	nop # Size: 1
.Ltmp844:
    00000050: 	movq	(%rcx), %rcx
    00000053: 	subq	$0x1, %rsi
    00000057: 	jae	.Ltmp844 # Offset: 87
.Ltmp848:
    00000059: 	cmpb	0x10(%rcx), %dl
    0000005c: 	jge	.Ltmp845 # Offset: 92
    0000005e: 	movq	%r8, %r9
    00000061: 	jmp	.Ltmp846 # Offset: 97
    00000063: 	nopl	(%rax,%rax) # Size: 5
.Ltmp843:
    00000068: 	cmpb	%dl, 0x10(%rax)
    0000006b: 	jg	.Ltmp840 # Offset: 107
    0000006d: 	movq	%rax, %rcx
.Ltmp845:
    00000070: 	addq	$0x1, %r8
    00000074: 	movq	(%rcx), %rax
    00000077: 	subq	%r8, %r9
    0000007a: 	jne	.Ltmp846 # Offset: 122
    0000007c: 	retq # Offset: 124
    0000007d: 	nopl	(%rax) # Size: 3
.Ltmp842:
    00000080: 	leaq	0x1(%r8), %rsi
    00000084: 	movq	%rax, %rcx
    00000087: 	testq	%r8, %r8
    0000008a: 	je	.Ltmp843 # Offset: 138
    0000008c: 	nopl	(%rax) # Size: 4
.Ltmp847:
    00000090: 	addq	$0x1, %rsi
    00000094: 	movq	0x8(%rcx), %rcx
    00000098: 	cmpq	$0x1, %rsi
    0000009c: 	jne	.Ltmp847 # Offset: 156
    0000009e: 	jmp	.Ltmp848 # Offset: 158
.Ltmp840:
    000000a0: 	retq # Offset: 160
DWARF CFI Instructions:
    <empty>
End of Function "_Z12upper_bound2ISt14_List_iteratorIaEaET_S2_S2_T0_"

Binary Function "_Z12upper_bound1ISt14_List_iteratorIaEaET_S2_S2_T0_" after disassembly {
  Number      : 175
  State       : disassembled
  Address     : 0x5ce0
  Size        : 0x87
  MaxSize     : 0x90
  Offset      : 0x5ce0
  Section     : .text
  Orc Section : .local.text._Z12upper_bound1ISt14_List_iteratorIaEaET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0174:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r8
    00000007: 	nopw	(%rax,%rax) # Size: 9
.Ltmp857:
    00000010: 	cmpq	%r8, %rdi
    00000013: 	je	.Ltmp849 # Offset: 19
.Ltmp855:
    00000015: 	movq	%rdi, %rax
    00000018: 	xorl	%ecx, %ecx
    0000001a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp850:
    00000020: 	movq	(%rax), %rax
    00000023: 	addq	$0x1, %rcx
    00000027: 	cmpq	%r8, %rax
    0000002a: 	jne	.Ltmp850 # Offset: 42
    0000002c: 	movq	%rcx, %rsi
    0000002f: 	sarq	%rsi
    00000032: 	cmpq	$0x1, %rcx
    00000036: 	je	.Ltmp851 # Offset: 54
    00000038: 	leaq	-0x1(%rsi), %rax
    0000003c: 	testq	%rsi, %rsi
    0000003f: 	je	.Ltmp852 # Offset: 63
    00000041: 	movq	%rdi, %rcx
    00000044: 	nopl	(%rax) # Size: 4
.Ltmp853:
    00000048: 	movq	(%rcx), %rcx
    0000004b: 	subq	$0x1, %rax
    0000004f: 	jae	.Ltmp853 # Offset: 79
    00000051: 	cmpb	%dl, 0x10(%rcx)
    00000054: 	jle	.Ltmp854 # Offset: 84
    00000056: 	movq	%rcx, %r8
    00000059: 	cmpq	%r8, %rdi
    0000005c: 	jne	.Ltmp855 # Offset: 92
.Ltmp849:
    0000005e: 	movq	%r8, %rax
    00000061: 	retq # Offset: 97
    00000062: 	nopw	(%rax,%rax) # Size: 6
.Ltmp852:
    00000068: 	cmpb	0x10(%rdi), %dl
    0000006b: 	jl	.Ltmp856 # Offset: 107
    0000006d: 	movq	%rdi, %rcx
.Ltmp854:
    00000070: 	movq	(%rcx), %rdi
    00000073: 	jmp	.Ltmp857 # Offset: 115
    00000075: 	nopl	(%rax) # Size: 3
.Ltmp851:
    00000078: 	testq	%rsi, %rsi
    0000007b: 	je	.Ltmp852 # Offset: 123
.Ltmp858:
    0000007d: 	jmp	.Ltmp858 # Offset: 125
    0000007f: 	nop # Size: 1
.Ltmp856:
    00000080: 	movq	%rdi, %r8
    00000083: 	movq	%r8, %rax
    00000086: 	retq # Offset: 134
DWARF CFI Instructions:
    <empty>
End of Function "_Z12upper_bound1ISt14_List_iteratorIaEaET_S2_S2_T0_"

Binary Function "_Z12lower_bound2ISt14_List_iteratorIaEaET_S2_S2_T0_" after disassembly {
  Number      : 176
  State       : disassembled
  Address     : 0x5d70
  Size        : 0xa9
  MaxSize     : 0xb0
  Offset      : 0x5d70
  Section     : .text
  Orc Section : .local.text._Z12lower_bound2ISt14_List_iteratorIaEaET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0175:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	cmpq	%rdi, %rsi
    0000000a: 	je	.Ltmp859 # Offset: 10
    00000010: 	movq	%rdi, %rcx
    00000013: 	xorl	%r9d, %r9d
    00000016: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp860:
    00000020: 	movq	(%rcx), %rcx
    00000023: 	addq	$0x1, %r9
    00000027: 	cmpq	%rcx, %rsi
    0000002a: 	jne	.Ltmp860 # Offset: 42
    0000002c: 	nopl	(%rax) # Size: 4
.Ltmp865:
    00000030: 	movq	%r9, %r8
    00000033: 	shrq	$0x3f, %r8
    00000037: 	addq	%r9, %r8
    0000003a: 	sarq	%r8
    0000003d: 	cmpq	$0x1, %r9
    00000041: 	jle	.Ltmp861 # Offset: 65
    00000043: 	leaq	-0x1(%r8), %rsi
    00000047: 	testq	%r8, %r8
    0000004a: 	je	.Ltmp862 # Offset: 74
    0000004c: 	movq	%rax, %rcx
    0000004f: 	nop # Size: 1
.Ltmp863:
    00000050: 	movq	(%rcx), %rcx
    00000053: 	subq	$0x1, %rsi
    00000057: 	jae	.Ltmp863 # Offset: 87
.Ltmp868:
    00000059: 	cmpb	0x10(%rcx), %dl
    0000005c: 	jg	.Ltmp864 # Offset: 92
    0000005e: 	movq	%r8, %r9
    00000061: 	jmp	.Ltmp865 # Offset: 97
    00000063: 	nopl	(%rax,%rax) # Size: 5
.Ltmp862:
    00000068: 	cmpb	%dl, 0x10(%rax)
    0000006b: 	jge	.Ltmp866 # Offset: 107
    0000006d: 	movq	%rax, %rcx
.Ltmp864:
    00000070: 	addq	$0x1, %r8
    00000074: 	movq	(%rcx), %rax
    00000077: 	subq	%r8, %r9
    0000007a: 	jne	.Ltmp865 # Offset: 122
    0000007c: 	retq # Offset: 124
    0000007d: 	nopl	(%rax) # Size: 3
.Ltmp861:
    00000080: 	leaq	0x1(%r8), %rsi
    00000084: 	movq	%rax, %rcx
    00000087: 	testq	%r8, %r8
    0000008a: 	je	.Ltmp862 # Offset: 138
    0000008c: 	nopl	(%rax) # Size: 4
.Ltmp867:
    00000090: 	addq	$0x1, %rsi
    00000094: 	movq	0x8(%rcx), %rcx
    00000098: 	cmpq	$0x1, %rsi
    0000009c: 	jne	.Ltmp867 # Offset: 156
    0000009e: 	jmp	.Ltmp868 # Offset: 158
.Ltmp859:
    000000a0: 	retq # Offset: 160
    000000a1: 	nopl	(%rax) # Size: 7
.Ltmp866:
    000000a8: 	retq # Offset: 168
DWARF CFI Instructions:
    <empty>
End of Function "_Z12lower_bound2ISt14_List_iteratorIaEaET_S2_S2_T0_"

Binary Function "_Z12lower_bound1ISt14_List_iteratorIaEaET_S2_S2_T0_" after disassembly {
  Number      : 177
  State       : disassembled
  Address     : 0x5e20
  Size        : 0x87
  MaxSize     : 0x90
  Offset      : 0x5e20
  Section     : .text
  Orc Section : .local.text._Z12lower_bound1ISt14_List_iteratorIaEaET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0176:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r8
    00000007: 	nopw	(%rax,%rax) # Size: 9
.Ltmp877:
    00000010: 	cmpq	%r8, %rdi
    00000013: 	je	.Ltmp869 # Offset: 19
.Ltmp875:
    00000015: 	movq	%rdi, %rax
    00000018: 	xorl	%ecx, %ecx
    0000001a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp870:
    00000020: 	movq	(%rax), %rax
    00000023: 	addq	$0x1, %rcx
    00000027: 	cmpq	%r8, %rax
    0000002a: 	jne	.Ltmp870 # Offset: 42
    0000002c: 	movq	%rcx, %rsi
    0000002f: 	sarq	%rsi
    00000032: 	cmpq	$0x1, %rcx
    00000036: 	je	.Ltmp871 # Offset: 54
    00000038: 	leaq	-0x1(%rsi), %rax
    0000003c: 	testq	%rsi, %rsi
    0000003f: 	je	.Ltmp872 # Offset: 63
    00000041: 	movq	%rdi, %rcx
    00000044: 	nopl	(%rax) # Size: 4
.Ltmp873:
    00000048: 	movq	(%rcx), %rcx
    0000004b: 	subq	$0x1, %rax
    0000004f: 	jae	.Ltmp873 # Offset: 79
    00000051: 	cmpb	%dl, 0x10(%rcx)
    00000054: 	jl	.Ltmp874 # Offset: 84
    00000056: 	movq	%rcx, %r8
    00000059: 	cmpq	%r8, %rdi
    0000005c: 	jne	.Ltmp875 # Offset: 92
.Ltmp869:
    0000005e: 	movq	%r8, %rax
    00000061: 	retq # Offset: 97
    00000062: 	nopw	(%rax,%rax) # Size: 6
.Ltmp872:
    00000068: 	cmpb	0x10(%rdi), %dl
    0000006b: 	jle	.Ltmp876 # Offset: 107
    0000006d: 	movq	%rdi, %rcx
.Ltmp874:
    00000070: 	movq	(%rcx), %rdi
    00000073: 	jmp	.Ltmp877 # Offset: 115
    00000075: 	nopl	(%rax) # Size: 3
.Ltmp871:
    00000078: 	testq	%rsi, %rsi
    0000007b: 	je	.Ltmp872 # Offset: 123
.Ltmp878:
    0000007d: 	jmp	.Ltmp878 # Offset: 125
    0000007f: 	nop # Size: 1
.Ltmp876:
    00000080: 	movq	%rdi, %r8
    00000083: 	movq	%r8, %rax
    00000086: 	retq # Offset: 134
DWARF CFI Instructions:
    <empty>
End of Function "_Z12lower_bound1ISt14_List_iteratorIaEaET_S2_S2_T0_"

Binary Function "_Z13binarysearch4ISt14_List_iteratorItEtEbT_S2_T0_" after disassembly {
  Number      : 178
  State       : disassembled
  Address     : 0x5eb0
  Size        : 0x65
  MaxSize     : 0x70
  Offset      : 0x5eb0
  Section     : .text
  Orc Section : .local.text._Z13binarysearch4ISt14_List_iteratorItEtEbT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0177:
    00000000: 	endbr64
    00000004: 	cmpq	%rdi, %rsi
    00000007: 	je	.Ltmp879 # Offset: 7
    00000009: 	movq	%rdi, %rax
    0000000c: 	xorl	%r8d, %r8d
    0000000f: 	nop # Size: 1
.Ltmp880:
    00000010: 	movq	(%rax), %rax
    00000013: 	addq	$0x1, %r8
    00000017: 	cmpq	%rax, %rsi
    0000001a: 	jne	.Ltmp880 # Offset: 26
    0000001c: 	nopl	(%rax) # Size: 4
.Ltmp884:
    00000020: 	movq	%r8, %rsi
    00000023: 	movq	%rdi, %rcx
    00000026: 	sarq	%rsi
    00000029: 	je	.Ltmp881 # Offset: 41
    0000002b: 	leaq	-0x1(%rsi), %rax
    0000002f: 	nop # Size: 1
.Ltmp882:
    00000030: 	movq	(%rcx), %rcx
    00000033: 	subq	$0x1, %rax
    00000037: 	jae	.Ltmp882 # Offset: 55
.Ltmp881:
    00000039: 	cmpw	%dx, 0x10(%rcx)
    0000003d: 	jae	.Ltmp883 # Offset: 61
    0000003f: 	addq	$0x1, %rsi
    00000043: 	movq	(%rcx), %rdi
    00000046: 	subq	%rsi, %r8
.Ltmp886:
    00000049: 	testq	%r8, %r8
    0000004c: 	jg	.Ltmp884 # Offset: 76
.Ltmp879:
    0000004e: 	xorl	%eax, %eax
    00000050: 	retq # Offset: 80
    00000051: 	nopl	(%rax) # Size: 7
.Ltmp883:
    00000058: 	jbe	.Ltmp885 # Offset: 88
    0000005a: 	movq	%rsi, %r8
    0000005d: 	jmp	.Ltmp886 # Offset: 93
.Ltmp885:
    0000005f: 	movl	$0x1, %eax
    00000064: 	retq # Offset: 100
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch4ISt14_List_iteratorItEtEbT_S2_T0_"

Binary Function "_Z13binarysearch2ISt14_List_iteratorItEtEbT_S2_T0_" after disassembly {
  Number      : 179
  State       : disassembled
  Address     : 0x5f20
  Size        : 0x96
  MaxSize     : 0xa0
  Offset      : 0x5f20
  Section     : .text
  Orc Section : .local.text._Z13binarysearch2ISt14_List_iteratorItEtEbT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0178:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp887 # Offset: 7
    00000009: 	movq	%rdi, %rax
    0000000c: 	xorl	%r8d, %r8d
    0000000f: 	nop # Size: 1
.Ltmp888:
    00000010: 	movq	(%rax), %rax
    00000013: 	addq	$0x1, %r8
    00000017: 	cmpq	%rax, %rsi
    0000001a: 	jne	.Ltmp888 # Offset: 26
    0000001c: 	nopl	(%rax) # Size: 4
.Ltmp893:
    00000020: 	movq	%r8, %rsi
    00000023: 	shrq	$0x3f, %rsi
    00000027: 	addq	%r8, %rsi
    0000002a: 	sarq	%rsi
    0000002d: 	cmpq	$0x1, %r8
    00000031: 	jle	.Ltmp889 # Offset: 49
    00000033: 	leaq	-0x1(%rsi), %rcx
    00000037: 	movq	%rdi, %rax
    0000003a: 	testq	%rsi, %rsi
    0000003d: 	je	.Ltmp890 # Offset: 61
    0000003f: 	nop # Size: 1
.Ltmp891:
    00000040: 	movq	(%rax), %rax
    00000043: 	subq	$0x1, %rcx
    00000047: 	jae	.Ltmp891 # Offset: 71
.Ltmp890:
    00000049: 	cmpw	%dx, 0x10(%rax)
    0000004d: 	jae	.Ltmp892 # Offset: 77
    0000004f: 	addq	$0x1, %rsi
    00000053: 	movq	(%rax), %rdi
    00000056: 	subq	%rsi, %r8
.Ltmp895:
    00000059: 	testq	%r8, %r8
    0000005c: 	jne	.Ltmp893 # Offset: 92
.Ltmp887:
    0000005e: 	xorl	%eax, %eax
    00000060: 	retq # Offset: 96
    00000061: 	nopl	(%rax) # Size: 7
.Ltmp892:
    00000068: 	jbe	.Ltmp894 # Offset: 104
    0000006a: 	movq	%rsi, %r8
    0000006d: 	jmp	.Ltmp895 # Offset: 109
    0000006f: 	nop # Size: 1
.Ltmp889:
    00000070: 	leaq	0x1(%rsi), %rcx
    00000074: 	movq	%rdi, %rax
    00000077: 	testq	%rsi, %rsi
    0000007a: 	je	.Ltmp890 # Offset: 122
    0000007c: 	nopl	(%rax) # Size: 4
.Ltmp896:
    00000080: 	addq	$0x1, %rcx
    00000084: 	movq	0x8(%rax), %rax
    00000088: 	cmpq	$0x1, %rcx
    0000008c: 	jne	.Ltmp896 # Offset: 140
    0000008e: 	jmp	.Ltmp890 # Offset: 142
.Ltmp894:
    00000090: 	movl	$0x1, %eax
    00000095: 	retq # Offset: 149
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch2ISt14_List_iteratorItEtEbT_S2_T0_"

Binary Function "_Z13binarysearch1ISt14_List_iteratorItEtEbT_S2_T0_" after disassembly {
  Number      : 180
  State       : disassembled
  Address     : 0x5fc0
  Size        : 0x8b
  MaxSize     : 0x90
  Offset      : 0x5fc0
  Section     : .text
  Orc Section : .local.text._Z13binarysearch1ISt14_List_iteratorItEtEbT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0179:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp897 # Offset: 7
    00000009: 	nopl	(%rax) # Size: 7
.Ltmp903:
    00000010: 	movq	%rdi, %rax
    00000013: 	xorl	%ecx, %ecx
    00000015: 	nopl	(%rax) # Size: 3
.Ltmp898:
    00000018: 	movq	(%rax), %rax
    0000001b: 	addq	$0x1, %rcx
    0000001f: 	cmpq	%rsi, %rax
    00000022: 	jne	.Ltmp898 # Offset: 34
    00000024: 	movq	%rcx, %r8
    00000027: 	sarq	%r8
    0000002a: 	cmpq	$0x1, %rcx
    0000002e: 	je	.Ltmp899 # Offset: 46
    00000030: 	leaq	-0x1(%r8), %rax
    00000034: 	movq	%rdi, %rcx
    00000037: 	testq	%r8, %r8
    0000003a: 	je	.Ltmp900 # Offset: 58
    0000003c: 	nopl	(%rax) # Size: 4
.Ltmp901:
    00000040: 	movq	(%rcx), %rcx
    00000043: 	subq	$0x1, %rax
    00000047: 	jae	.Ltmp901 # Offset: 71
.Ltmp900:
    00000049: 	cmpw	%dx, 0x10(%rcx)
    0000004d: 	jae	.Ltmp902 # Offset: 77
    0000004f: 	movq	(%rcx), %rdi
.Ltmp905:
    00000052: 	cmpq	%rdi, %rsi
    00000055: 	jne	.Ltmp903 # Offset: 85
.Ltmp897:
    00000057: 	xorl	%eax, %eax
    00000059: 	retq # Offset: 89
    0000005a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp902:
    00000060: 	jbe	.Ltmp904 # Offset: 96
    00000062: 	movq	%rcx, %rsi
    00000065: 	jmp	.Ltmp905 # Offset: 101
    00000067: 	nopw	(%rax,%rax) # Size: 9
.Ltmp899:
    00000070: 	testq	%r8, %r8
    00000073: 	je	.Ltmp906 # Offset: 115
.Ltmp907:
    00000075: 	jmp	.Ltmp907 # Offset: 117
    00000077: 	nopw	(%rax,%rax) # Size: 9
.Ltmp906:
    00000080: 	movq	%rdi, %rcx
    00000083: 	jmp	.Ltmp900 # Offset: 131
.Ltmp904:
    00000085: 	movl	$0x1, %eax
    0000008a: 	retq # Offset: 138
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch1ISt14_List_iteratorItEtEbT_S2_T0_"

Binary Function "_Z12upper_bound2ISt14_List_iteratorItEtET_S2_S2_T0_" after disassembly {
  Number      : 181
  State       : disassembled
  Address     : 0x6050
  Size        : 0xb1
  MaxSize     : 0xc0
  Offset      : 0x6050
  Section     : .text
  Orc Section : .local.text._Z12upper_bound2ISt14_List_iteratorItEtET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0180:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp908 # Offset: 10
    00000010: 	movq	%rdi, %rcx
    00000013: 	xorl	%r9d, %r9d
    00000016: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp909:
    00000020: 	movq	(%rcx), %rcx
    00000023: 	addq	$0x1, %r9
    00000027: 	cmpq	%rsi, %rcx
    0000002a: 	jne	.Ltmp909 # Offset: 42
    0000002c: 	nopl	(%rax) # Size: 4
.Ltmp914:
    00000030: 	movq	%r9, %r8
    00000033: 	shrq	$0x3f, %r8
    00000037: 	addq	%r9, %r8
    0000003a: 	sarq	%r8
    0000003d: 	cmpq	$0x1, %r9
    00000041: 	jle	.Ltmp910 # Offset: 65
    00000043: 	leaq	-0x1(%r8), %rsi
    00000047: 	testq	%r8, %r8
    0000004a: 	je	.Ltmp911 # Offset: 74
    0000004c: 	movq	%rax, %rcx
    0000004f: 	nop # Size: 1
.Ltmp912:
    00000050: 	movq	(%rcx), %rcx
    00000053: 	subq	$0x1, %rsi
    00000057: 	jae	.Ltmp912 # Offset: 87
.Ltmp916:
    00000059: 	cmpw	0x10(%rcx), %dx
    0000005d: 	jae	.Ltmp913 # Offset: 93
    0000005f: 	movq	%r8, %r9
    00000062: 	jmp	.Ltmp914 # Offset: 98
    00000064: 	nopl	(%rax) # Size: 4
.Ltmp911:
    00000068: 	cmpw	%dx, 0x10(%rax)
    0000006c: 	ja	.Ltmp908 # Offset: 108
    0000006e: 	movq	%rax, %rcx
    00000071: 	nopl	(%rax) # Size: 7
.Ltmp913:
    00000078: 	addq	$0x1, %r8
    0000007c: 	movq	(%rcx), %rax
    0000007f: 	subq	%r8, %r9
    00000082: 	jne	.Ltmp914 # Offset: 130
    00000084: 	retq # Offset: 132
    00000085: 	nopl	(%rax) # Size: 3
.Ltmp910:
    00000088: 	leaq	0x1(%r8), %rsi
    0000008c: 	movq	%rax, %rcx
    0000008f: 	testq	%r8, %r8
    00000092: 	je	.Ltmp911 # Offset: 146
    00000094: 	nopl	(%rax) # Size: 4
.Ltmp915:
    00000098: 	addq	$0x1, %rsi
    0000009c: 	movq	0x8(%rcx), %rcx
    000000a0: 	cmpq	$0x1, %rsi
    000000a4: 	jne	.Ltmp915 # Offset: 164
    000000a6: 	jmp	.Ltmp916 # Offset: 166
    000000a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp908:
    000000b0: 	retq # Offset: 176
DWARF CFI Instructions:
    <empty>
End of Function "_Z12upper_bound2ISt14_List_iteratorItEtET_S2_S2_T0_"

Binary Function "_Z12upper_bound1ISt14_List_iteratorItEtET_S2_S2_T0_" after disassembly {
  Number      : 182
  State       : disassembled
  Address     : 0x6110
  Size        : 0x97
  MaxSize     : 0xa0
  Offset      : 0x6110
  Section     : .text
  Orc Section : .local.text._Z12upper_bound1ISt14_List_iteratorItEtET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0181:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r8
    00000007: 	nopw	(%rax,%rax) # Size: 9
.Ltmp925:
    00000010: 	cmpq	%r8, %rdi
    00000013: 	je	.Ltmp917 # Offset: 19
.Ltmp923:
    00000015: 	movq	%rdi, %rax
    00000018: 	xorl	%ecx, %ecx
    0000001a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp918:
    00000020: 	movq	(%rax), %rax
    00000023: 	addq	$0x1, %rcx
    00000027: 	cmpq	%r8, %rax
    0000002a: 	jne	.Ltmp918 # Offset: 42
    0000002c: 	movq	%rcx, %rsi
    0000002f: 	sarq	%rsi
    00000032: 	cmpq	$0x1, %rcx
    00000036: 	je	.Ltmp919 # Offset: 54
    00000038: 	leaq	-0x1(%rsi), %rax
    0000003c: 	testq	%rsi, %rsi
    0000003f: 	je	.Ltmp920 # Offset: 63
    00000041: 	movq	%rdi, %rcx
    00000044: 	nopl	(%rax) # Size: 4
.Ltmp921:
    00000048: 	movq	(%rcx), %rcx
    0000004b: 	subq	$0x1, %rax
    0000004f: 	jae	.Ltmp921 # Offset: 79
    00000051: 	cmpw	%dx, 0x10(%rcx)
    00000055: 	jbe	.Ltmp922 # Offset: 85
    00000057: 	movq	%rcx, %r8
    0000005a: 	cmpq	%r8, %rdi
    0000005d: 	jne	.Ltmp923 # Offset: 93
.Ltmp917:
    0000005f: 	movq	%r8, %rax
    00000062: 	retq # Offset: 98
    00000063: 	nopl	(%rax,%rax) # Size: 5
.Ltmp920:
    00000068: 	cmpw	0x10(%rdi), %dx
    0000006c: 	jb	.Ltmp924 # Offset: 108
    0000006e: 	movq	%rdi, %rcx
    00000071: 	nopl	(%rax) # Size: 7
.Ltmp922:
    00000078: 	movq	(%rcx), %rdi
    0000007b: 	jmp	.Ltmp925 # Offset: 123
    0000007d: 	nopl	(%rax) # Size: 3
.Ltmp919:
    00000080: 	testq	%rsi, %rsi
    00000083: 	je	.Ltmp920 # Offset: 131
.Ltmp926:
    00000085: 	jmp	.Ltmp926 # Offset: 133
    00000087: 	nopw	(%rax,%rax) # Size: 9
.Ltmp924:
    00000090: 	movq	%rdi, %r8
    00000093: 	movq	%r8, %rax
    00000096: 	retq # Offset: 150
DWARF CFI Instructions:
    <empty>
End of Function "_Z12upper_bound1ISt14_List_iteratorItEtET_S2_S2_T0_"

Binary Function "_Z12lower_bound2ISt14_List_iteratorItEtET_S2_S2_T0_" after disassembly {
  Number      : 183
  State       : disassembled
  Address     : 0x61b0
  Size        : 0xb1
  MaxSize     : 0xc0
  Offset      : 0x61b0
  Section     : .text
  Orc Section : .local.text._Z12lower_bound2ISt14_List_iteratorItEtET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0182:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	cmpq	%rdi, %rsi
    0000000a: 	je	.Ltmp927 # Offset: 10
    00000010: 	movq	%rdi, %rcx
    00000013: 	xorl	%r9d, %r9d
    00000016: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp928:
    00000020: 	movq	(%rcx), %rcx
    00000023: 	addq	$0x1, %r9
    00000027: 	cmpq	%rcx, %rsi
    0000002a: 	jne	.Ltmp928 # Offset: 42
    0000002c: 	nopl	(%rax) # Size: 4
.Ltmp933:
    00000030: 	movq	%r9, %r8
    00000033: 	shrq	$0x3f, %r8
    00000037: 	addq	%r9, %r8
    0000003a: 	sarq	%r8
    0000003d: 	cmpq	$0x1, %r9
    00000041: 	jle	.Ltmp929 # Offset: 65
    00000043: 	leaq	-0x1(%r8), %rsi
    00000047: 	testq	%r8, %r8
    0000004a: 	je	.Ltmp930 # Offset: 74
    0000004c: 	movq	%rax, %rcx
    0000004f: 	nop # Size: 1
.Ltmp931:
    00000050: 	movq	(%rcx), %rcx
    00000053: 	subq	$0x1, %rsi
    00000057: 	jae	.Ltmp931 # Offset: 87
.Ltmp936:
    00000059: 	cmpw	0x10(%rcx), %dx
    0000005d: 	ja	.Ltmp932 # Offset: 93
    0000005f: 	movq	%r8, %r9
    00000062: 	jmp	.Ltmp933 # Offset: 98
    00000064: 	nopl	(%rax) # Size: 4
.Ltmp930:
    00000068: 	cmpw	%dx, 0x10(%rax)
    0000006c: 	jae	.Ltmp934 # Offset: 108
    0000006e: 	movq	%rax, %rcx
    00000071: 	nopl	(%rax) # Size: 7
.Ltmp932:
    00000078: 	addq	$0x1, %r8
    0000007c: 	movq	(%rcx), %rax
    0000007f: 	subq	%r8, %r9
    00000082: 	jne	.Ltmp933 # Offset: 130
    00000084: 	retq # Offset: 132
    00000085: 	nopl	(%rax) # Size: 3
.Ltmp929:
    00000088: 	leaq	0x1(%r8), %rsi
    0000008c: 	movq	%rax, %rcx
    0000008f: 	testq	%r8, %r8
    00000092: 	je	.Ltmp930 # Offset: 146
    00000094: 	nopl	(%rax) # Size: 4
.Ltmp935:
    00000098: 	addq	$0x1, %rsi
    0000009c: 	movq	0x8(%rcx), %rcx
    000000a0: 	cmpq	$0x1, %rsi
    000000a4: 	jne	.Ltmp935 # Offset: 164
    000000a6: 	jmp	.Ltmp936 # Offset: 166
.Ltmp927:
    000000a8: 	retq # Offset: 168
    000000a9: 	nopl	(%rax) # Size: 7
.Ltmp934:
    000000b0: 	retq # Offset: 176
DWARF CFI Instructions:
    <empty>
End of Function "_Z12lower_bound2ISt14_List_iteratorItEtET_S2_S2_T0_"

Binary Function "_Z12lower_bound1ISt14_List_iteratorItEtET_S2_S2_T0_" after disassembly {
  Number      : 184
  State       : disassembled
  Address     : 0x6270
  Size        : 0x97
  MaxSize     : 0xa0
  Offset      : 0x6270
  Section     : .text
  Orc Section : .local.text._Z12lower_bound1ISt14_List_iteratorItEtET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0183:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r8
    00000007: 	nopw	(%rax,%rax) # Size: 9
.Ltmp945:
    00000010: 	cmpq	%r8, %rdi
    00000013: 	je	.Ltmp937 # Offset: 19
.Ltmp943:
    00000015: 	movq	%rdi, %rax
    00000018: 	xorl	%ecx, %ecx
    0000001a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp938:
    00000020: 	movq	(%rax), %rax
    00000023: 	addq	$0x1, %rcx
    00000027: 	cmpq	%r8, %rax
    0000002a: 	jne	.Ltmp938 # Offset: 42
    0000002c: 	movq	%rcx, %rsi
    0000002f: 	sarq	%rsi
    00000032: 	cmpq	$0x1, %rcx
    00000036: 	je	.Ltmp939 # Offset: 54
    00000038: 	leaq	-0x1(%rsi), %rax
    0000003c: 	testq	%rsi, %rsi
    0000003f: 	je	.Ltmp940 # Offset: 63
    00000041: 	movq	%rdi, %rcx
    00000044: 	nopl	(%rax) # Size: 4
.Ltmp941:
    00000048: 	movq	(%rcx), %rcx
    0000004b: 	subq	$0x1, %rax
    0000004f: 	jae	.Ltmp941 # Offset: 79
    00000051: 	cmpw	%dx, 0x10(%rcx)
    00000055: 	jb	.Ltmp942 # Offset: 85
    00000057: 	movq	%rcx, %r8
    0000005a: 	cmpq	%r8, %rdi
    0000005d: 	jne	.Ltmp943 # Offset: 93
.Ltmp937:
    0000005f: 	movq	%r8, %rax
    00000062: 	retq # Offset: 98
    00000063: 	nopl	(%rax,%rax) # Size: 5
.Ltmp940:
    00000068: 	cmpw	0x10(%rdi), %dx
    0000006c: 	jbe	.Ltmp944 # Offset: 108
    0000006e: 	movq	%rdi, %rcx
    00000071: 	nopl	(%rax) # Size: 7
.Ltmp942:
    00000078: 	movq	(%rcx), %rdi
    0000007b: 	jmp	.Ltmp945 # Offset: 123
    0000007d: 	nopl	(%rax) # Size: 3
.Ltmp939:
    00000080: 	testq	%rsi, %rsi
    00000083: 	je	.Ltmp940 # Offset: 131
.Ltmp946:
    00000085: 	jmp	.Ltmp946 # Offset: 133
    00000087: 	nopw	(%rax,%rax) # Size: 9
.Ltmp944:
    00000090: 	movq	%rdi, %r8
    00000093: 	movq	%r8, %rax
    00000096: 	retq # Offset: 150
DWARF CFI Instructions:
    <empty>
End of Function "_Z12lower_bound1ISt14_List_iteratorItEtET_S2_S2_T0_"

Binary Function "_Z13binarysearch4ISt14_List_iteratorIiEiEbT_S2_T0_" after disassembly {
  Number      : 185
  State       : disassembled
  Address     : 0x6310
  Size        : 0x5d
  MaxSize     : 0x60
  Offset      : 0x6310
  Section     : .text
  Orc Section : .local.text._Z13binarysearch4ISt14_List_iteratorIiEiEbT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0184:
    00000000: 	endbr64
    00000004: 	cmpq	%rdi, %rsi
    00000007: 	je	.Ltmp947 # Offset: 7
    00000009: 	movq	%rdi, %rax
    0000000c: 	xorl	%r8d, %r8d
    0000000f: 	nop # Size: 1
.Ltmp948:
    00000010: 	movq	(%rax), %rax
    00000013: 	addq	$0x1, %r8
    00000017: 	cmpq	%rax, %rsi
    0000001a: 	jne	.Ltmp948 # Offset: 26
    0000001c: 	nopl	(%rax) # Size: 4
.Ltmp952:
    00000020: 	movq	%r8, %rsi
    00000023: 	movq	%rdi, %rcx
    00000026: 	sarq	%rsi
    00000029: 	je	.Ltmp949 # Offset: 41
    0000002b: 	leaq	-0x1(%rsi), %rax
    0000002f: 	nop # Size: 1
.Ltmp950:
    00000030: 	movq	(%rcx), %rcx
    00000033: 	subq	$0x1, %rax
    00000037: 	jae	.Ltmp950 # Offset: 55
.Ltmp949:
    00000039: 	cmpl	%edx, 0x10(%rcx)
    0000003c: 	jge	.Ltmp951 # Offset: 60
    0000003e: 	addq	$0x1, %rsi
    00000042: 	movq	(%rcx), %rdi
    00000045: 	subq	%rsi, %r8
.Ltmp954:
    00000048: 	testq	%r8, %r8
    0000004b: 	jg	.Ltmp952 # Offset: 75
.Ltmp947:
    0000004d: 	xorl	%eax, %eax
    0000004f: 	retq # Offset: 79
.Ltmp951:
    00000050: 	jle	.Ltmp953 # Offset: 80
    00000052: 	movq	%rsi, %r8
    00000055: 	jmp	.Ltmp954 # Offset: 85
.Ltmp953:
    00000057: 	movl	$0x1, %eax
    0000005c: 	retq # Offset: 92
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch4ISt14_List_iteratorIiEiEbT_S2_T0_"

Binary Function "_Z13binarysearch2ISt14_List_iteratorIiEiEbT_S2_T0_" after disassembly {
  Number      : 186
  State       : disassembled
  Address     : 0x6370
  Size        : 0x96
  MaxSize     : 0xa0
  Offset      : 0x6370
  Section     : .text
  Orc Section : .local.text._Z13binarysearch2ISt14_List_iteratorIiEiEbT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0185:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp955 # Offset: 7
    00000009: 	movq	%rdi, %rax
    0000000c: 	xorl	%r8d, %r8d
    0000000f: 	nop # Size: 1
.Ltmp956:
    00000010: 	movq	(%rax), %rax
    00000013: 	addq	$0x1, %r8
    00000017: 	cmpq	%rax, %rsi
    0000001a: 	jne	.Ltmp956 # Offset: 26
    0000001c: 	nopl	(%rax) # Size: 4
.Ltmp961:
    00000020: 	movq	%r8, %rsi
    00000023: 	shrq	$0x3f, %rsi
    00000027: 	addq	%r8, %rsi
    0000002a: 	sarq	%rsi
    0000002d: 	cmpq	$0x1, %r8
    00000031: 	jle	.Ltmp957 # Offset: 49
    00000033: 	leaq	-0x1(%rsi), %rcx
    00000037: 	movq	%rdi, %rax
    0000003a: 	testq	%rsi, %rsi
    0000003d: 	je	.Ltmp958 # Offset: 61
    0000003f: 	nop # Size: 1
.Ltmp959:
    00000040: 	movq	(%rax), %rax
    00000043: 	subq	$0x1, %rcx
    00000047: 	jae	.Ltmp959 # Offset: 71
.Ltmp958:
    00000049: 	cmpl	%edx, 0x10(%rax)
    0000004c: 	jge	.Ltmp960 # Offset: 76
    0000004e: 	addq	$0x1, %rsi
    00000052: 	movq	(%rax), %rdi
    00000055: 	subq	%rsi, %r8
.Ltmp963:
    00000058: 	testq	%r8, %r8
    0000005b: 	jne	.Ltmp961 # Offset: 91
.Ltmp955:
    0000005d: 	xorl	%eax, %eax
    0000005f: 	retq # Offset: 95
.Ltmp960:
    00000060: 	jle	.Ltmp962 # Offset: 96
    00000062: 	movq	%rsi, %r8
    00000065: 	jmp	.Ltmp963 # Offset: 101
    00000067: 	nopw	(%rax,%rax) # Size: 9
.Ltmp957:
    00000070: 	leaq	0x1(%rsi), %rcx
    00000074: 	movq	%rdi, %rax
    00000077: 	testq	%rsi, %rsi
    0000007a: 	je	.Ltmp958 # Offset: 122
    0000007c: 	nopl	(%rax) # Size: 4
.Ltmp964:
    00000080: 	addq	$0x1, %rcx
    00000084: 	movq	0x8(%rax), %rax
    00000088: 	cmpq	$0x1, %rcx
    0000008c: 	jne	.Ltmp964 # Offset: 140
    0000008e: 	jmp	.Ltmp958 # Offset: 142
.Ltmp962:
    00000090: 	movl	$0x1, %eax
    00000095: 	retq # Offset: 149
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch2ISt14_List_iteratorIiEiEbT_S2_T0_"

Binary Function "_Z13binarysearch1ISt14_List_iteratorIiEiEbT_S2_T0_" after disassembly {
  Number      : 187
  State       : disassembled
  Address     : 0x6410
  Size        : 0x8b
  MaxSize     : 0x90
  Offset      : 0x6410
  Section     : .text
  Orc Section : .local.text._Z13binarysearch1ISt14_List_iteratorIiEiEbT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0186:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp965 # Offset: 7
    00000009: 	nopl	(%rax) # Size: 7
.Ltmp971:
    00000010: 	movq	%rdi, %rax
    00000013: 	xorl	%ecx, %ecx
    00000015: 	nopl	(%rax) # Size: 3
.Ltmp966:
    00000018: 	movq	(%rax), %rax
    0000001b: 	addq	$0x1, %rcx
    0000001f: 	cmpq	%rsi, %rax
    00000022: 	jne	.Ltmp966 # Offset: 34
    00000024: 	movq	%rcx, %r8
    00000027: 	sarq	%r8
    0000002a: 	cmpq	$0x1, %rcx
    0000002e: 	je	.Ltmp967 # Offset: 46
    00000030: 	leaq	-0x1(%r8), %rax
    00000034: 	movq	%rdi, %rcx
    00000037: 	testq	%r8, %r8
    0000003a: 	je	.Ltmp968 # Offset: 58
    0000003c: 	nopl	(%rax) # Size: 4
.Ltmp969:
    00000040: 	movq	(%rcx), %rcx
    00000043: 	subq	$0x1, %rax
    00000047: 	jae	.Ltmp969 # Offset: 71
.Ltmp968:
    00000049: 	cmpl	%edx, 0x10(%rcx)
    0000004c: 	jge	.Ltmp970 # Offset: 76
    0000004e: 	movq	(%rcx), %rdi
.Ltmp973:
    00000051: 	cmpq	%rdi, %rsi
    00000054: 	jne	.Ltmp971 # Offset: 84
.Ltmp965:
    00000056: 	xorl	%eax, %eax
    00000058: 	retq # Offset: 88
    00000059: 	nopl	(%rax) # Size: 7
.Ltmp970:
    00000060: 	jle	.Ltmp972 # Offset: 96
    00000062: 	movq	%rcx, %rsi
    00000065: 	jmp	.Ltmp973 # Offset: 101
    00000067: 	nopw	(%rax,%rax) # Size: 9
.Ltmp967:
    00000070: 	testq	%r8, %r8
    00000073: 	je	.Ltmp974 # Offset: 115
.Ltmp975:
    00000075: 	jmp	.Ltmp975 # Offset: 117
    00000077: 	nopw	(%rax,%rax) # Size: 9
.Ltmp974:
    00000080: 	movq	%rdi, %rcx
    00000083: 	jmp	.Ltmp968 # Offset: 131
.Ltmp972:
    00000085: 	movl	$0x1, %eax
    0000008a: 	retq # Offset: 138
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch1ISt14_List_iteratorIiEiEbT_S2_T0_"

Binary Function "_Z12upper_bound2ISt14_List_iteratorIiEiET_S2_S2_T0_" after disassembly {
  Number      : 188
  State       : disassembled
  Address     : 0x64a0
  Size        : 0xa1
  MaxSize     : 0xb0
  Offset      : 0x64a0
  Section     : .text
  Orc Section : .local.text._Z12upper_bound2ISt14_List_iteratorIiEiET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0187:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp976 # Offset: 10
    00000010: 	movq	%rdi, %rcx
    00000013: 	xorl	%r9d, %r9d
    00000016: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp977:
    00000020: 	movq	(%rcx), %rcx
    00000023: 	addq	$0x1, %r9
    00000027: 	cmpq	%rsi, %rcx
    0000002a: 	jne	.Ltmp977 # Offset: 42
    0000002c: 	nopl	(%rax) # Size: 4
.Ltmp982:
    00000030: 	movq	%r9, %r8
    00000033: 	shrq	$0x3f, %r8
    00000037: 	addq	%r9, %r8
    0000003a: 	sarq	%r8
    0000003d: 	cmpq	$0x1, %r9
    00000041: 	jle	.Ltmp978 # Offset: 65
    00000043: 	leaq	-0x1(%r8), %rsi
    00000047: 	testq	%r8, %r8
    0000004a: 	je	.Ltmp979 # Offset: 74
    0000004c: 	movq	%rax, %rcx
    0000004f: 	nop # Size: 1
.Ltmp980:
    00000050: 	movq	(%rcx), %rcx
    00000053: 	subq	$0x1, %rsi
    00000057: 	jae	.Ltmp980 # Offset: 87
.Ltmp984:
    00000059: 	cmpl	0x10(%rcx), %edx
    0000005c: 	jge	.Ltmp981 # Offset: 92
    0000005e: 	movq	%r8, %r9
    00000061: 	jmp	.Ltmp982 # Offset: 97
    00000063: 	nopl	(%rax,%rax) # Size: 5
.Ltmp979:
    00000068: 	cmpl	%edx, 0x10(%rax)
    0000006b: 	jg	.Ltmp976 # Offset: 107
    0000006d: 	movq	%rax, %rcx
.Ltmp981:
    00000070: 	addq	$0x1, %r8
    00000074: 	movq	(%rcx), %rax
    00000077: 	subq	%r8, %r9
    0000007a: 	jne	.Ltmp982 # Offset: 122
    0000007c: 	retq # Offset: 124
    0000007d: 	nopl	(%rax) # Size: 3
.Ltmp978:
    00000080: 	leaq	0x1(%r8), %rsi
    00000084: 	movq	%rax, %rcx
    00000087: 	testq	%r8, %r8
    0000008a: 	je	.Ltmp979 # Offset: 138
    0000008c: 	nopl	(%rax) # Size: 4
.Ltmp983:
    00000090: 	addq	$0x1, %rsi
    00000094: 	movq	0x8(%rcx), %rcx
    00000098: 	cmpq	$0x1, %rsi
    0000009c: 	jne	.Ltmp983 # Offset: 156
    0000009e: 	jmp	.Ltmp984 # Offset: 158
.Ltmp976:
    000000a0: 	retq # Offset: 160
DWARF CFI Instructions:
    <empty>
End of Function "_Z12upper_bound2ISt14_List_iteratorIiEiET_S2_S2_T0_"

Binary Function "_Z12upper_bound1ISt14_List_iteratorIiEiET_S2_S2_T0_" after disassembly {
  Number      : 189
  State       : disassembled
  Address     : 0x6550
  Size        : 0x87
  MaxSize     : 0x90
  Offset      : 0x6550
  Section     : .text
  Orc Section : .local.text._Z12upper_bound1ISt14_List_iteratorIiEiET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0188:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r8
    00000007: 	nopw	(%rax,%rax) # Size: 9
.Ltmp993:
    00000010: 	cmpq	%r8, %rdi
    00000013: 	je	.Ltmp985 # Offset: 19
.Ltmp991:
    00000015: 	movq	%rdi, %rax
    00000018: 	xorl	%ecx, %ecx
    0000001a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp986:
    00000020: 	movq	(%rax), %rax
    00000023: 	addq	$0x1, %rcx
    00000027: 	cmpq	%r8, %rax
    0000002a: 	jne	.Ltmp986 # Offset: 42
    0000002c: 	movq	%rcx, %rsi
    0000002f: 	sarq	%rsi
    00000032: 	cmpq	$0x1, %rcx
    00000036: 	je	.Ltmp987 # Offset: 54
    00000038: 	leaq	-0x1(%rsi), %rax
    0000003c: 	testq	%rsi, %rsi
    0000003f: 	je	.Ltmp988 # Offset: 63
    00000041: 	movq	%rdi, %rcx
    00000044: 	nopl	(%rax) # Size: 4
.Ltmp989:
    00000048: 	movq	(%rcx), %rcx
    0000004b: 	subq	$0x1, %rax
    0000004f: 	jae	.Ltmp989 # Offset: 79
    00000051: 	cmpl	%edx, 0x10(%rcx)
    00000054: 	jle	.Ltmp990 # Offset: 84
    00000056: 	movq	%rcx, %r8
    00000059: 	cmpq	%r8, %rdi
    0000005c: 	jne	.Ltmp991 # Offset: 92
.Ltmp985:
    0000005e: 	movq	%r8, %rax
    00000061: 	retq # Offset: 97
    00000062: 	nopw	(%rax,%rax) # Size: 6
.Ltmp988:
    00000068: 	cmpl	0x10(%rdi), %edx
    0000006b: 	jl	.Ltmp992 # Offset: 107
    0000006d: 	movq	%rdi, %rcx
.Ltmp990:
    00000070: 	movq	(%rcx), %rdi
    00000073: 	jmp	.Ltmp993 # Offset: 115
    00000075: 	nopl	(%rax) # Size: 3
.Ltmp987:
    00000078: 	testq	%rsi, %rsi
    0000007b: 	je	.Ltmp988 # Offset: 123
.Ltmp994:
    0000007d: 	jmp	.Ltmp994 # Offset: 125
    0000007f: 	nop # Size: 1
.Ltmp992:
    00000080: 	movq	%rdi, %r8
    00000083: 	movq	%r8, %rax
    00000086: 	retq # Offset: 134
DWARF CFI Instructions:
    <empty>
End of Function "_Z12upper_bound1ISt14_List_iteratorIiEiET_S2_S2_T0_"

Binary Function "_Z12lower_bound2ISt14_List_iteratorIiEiET_S2_S2_T0_" after disassembly {
  Number      : 190
  State       : disassembled
  Address     : 0x65e0
  Size        : 0xa9
  MaxSize     : 0xb0
  Offset      : 0x65e0
  Section     : .text
  Orc Section : .local.text._Z12lower_bound2ISt14_List_iteratorIiEiET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0189:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	cmpq	%rdi, %rsi
    0000000a: 	je	.Ltmp995 # Offset: 10
    00000010: 	movq	%rdi, %rcx
    00000013: 	xorl	%r9d, %r9d
    00000016: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp996:
    00000020: 	movq	(%rcx), %rcx
    00000023: 	addq	$0x1, %r9
    00000027: 	cmpq	%rcx, %rsi
    0000002a: 	jne	.Ltmp996 # Offset: 42
    0000002c: 	nopl	(%rax) # Size: 4
.Ltmp1001:
    00000030: 	movq	%r9, %r8
    00000033: 	shrq	$0x3f, %r8
    00000037: 	addq	%r9, %r8
    0000003a: 	sarq	%r8
    0000003d: 	cmpq	$0x1, %r9
    00000041: 	jle	.Ltmp997 # Offset: 65
    00000043: 	leaq	-0x1(%r8), %rsi
    00000047: 	testq	%r8, %r8
    0000004a: 	je	.Ltmp998 # Offset: 74
    0000004c: 	movq	%rax, %rcx
    0000004f: 	nop # Size: 1
.Ltmp999:
    00000050: 	movq	(%rcx), %rcx
    00000053: 	subq	$0x1, %rsi
    00000057: 	jae	.Ltmp999 # Offset: 87
.Ltmp1004:
    00000059: 	cmpl	0x10(%rcx), %edx
    0000005c: 	jg	.Ltmp1000 # Offset: 92
    0000005e: 	movq	%r8, %r9
    00000061: 	jmp	.Ltmp1001 # Offset: 97
    00000063: 	nopl	(%rax,%rax) # Size: 5
.Ltmp998:
    00000068: 	cmpl	%edx, 0x10(%rax)
    0000006b: 	jge	.Ltmp1002 # Offset: 107
    0000006d: 	movq	%rax, %rcx
.Ltmp1000:
    00000070: 	addq	$0x1, %r8
    00000074: 	movq	(%rcx), %rax
    00000077: 	subq	%r8, %r9
    0000007a: 	jne	.Ltmp1001 # Offset: 122
    0000007c: 	retq # Offset: 124
    0000007d: 	nopl	(%rax) # Size: 3
.Ltmp997:
    00000080: 	leaq	0x1(%r8), %rsi
    00000084: 	movq	%rax, %rcx
    00000087: 	testq	%r8, %r8
    0000008a: 	je	.Ltmp998 # Offset: 138
    0000008c: 	nopl	(%rax) # Size: 4
.Ltmp1003:
    00000090: 	addq	$0x1, %rsi
    00000094: 	movq	0x8(%rcx), %rcx
    00000098: 	cmpq	$0x1, %rsi
    0000009c: 	jne	.Ltmp1003 # Offset: 156
    0000009e: 	jmp	.Ltmp1004 # Offset: 158
.Ltmp995:
    000000a0: 	retq # Offset: 160
    000000a1: 	nopl	(%rax) # Size: 7
.Ltmp1002:
    000000a8: 	retq # Offset: 168
DWARF CFI Instructions:
    <empty>
End of Function "_Z12lower_bound2ISt14_List_iteratorIiEiET_S2_S2_T0_"

Binary Function "_Z12lower_bound1ISt14_List_iteratorIiEiET_S2_S2_T0_" after disassembly {
  Number      : 191
  State       : disassembled
  Address     : 0x6690
  Size        : 0x87
  MaxSize     : 0x90
  Offset      : 0x6690
  Section     : .text
  Orc Section : .local.text._Z12lower_bound1ISt14_List_iteratorIiEiET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0190:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r8
    00000007: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1013:
    00000010: 	cmpq	%r8, %rdi
    00000013: 	je	.Ltmp1005 # Offset: 19
.Ltmp1011:
    00000015: 	movq	%rdi, %rax
    00000018: 	xorl	%ecx, %ecx
    0000001a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1006:
    00000020: 	movq	(%rax), %rax
    00000023: 	addq	$0x1, %rcx
    00000027: 	cmpq	%r8, %rax
    0000002a: 	jne	.Ltmp1006 # Offset: 42
    0000002c: 	movq	%rcx, %rsi
    0000002f: 	sarq	%rsi
    00000032: 	cmpq	$0x1, %rcx
    00000036: 	je	.Ltmp1007 # Offset: 54
    00000038: 	leaq	-0x1(%rsi), %rax
    0000003c: 	testq	%rsi, %rsi
    0000003f: 	je	.Ltmp1008 # Offset: 63
    00000041: 	movq	%rdi, %rcx
    00000044: 	nopl	(%rax) # Size: 4
.Ltmp1009:
    00000048: 	movq	(%rcx), %rcx
    0000004b: 	subq	$0x1, %rax
    0000004f: 	jae	.Ltmp1009 # Offset: 79
    00000051: 	cmpl	%edx, 0x10(%rcx)
    00000054: 	jl	.Ltmp1010 # Offset: 84
    00000056: 	movq	%rcx, %r8
    00000059: 	cmpq	%r8, %rdi
    0000005c: 	jne	.Ltmp1011 # Offset: 92
.Ltmp1005:
    0000005e: 	movq	%r8, %rax
    00000061: 	retq # Offset: 97
    00000062: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1008:
    00000068: 	cmpl	0x10(%rdi), %edx
    0000006b: 	jle	.Ltmp1012 # Offset: 107
    0000006d: 	movq	%rdi, %rcx
.Ltmp1010:
    00000070: 	movq	(%rcx), %rdi
    00000073: 	jmp	.Ltmp1013 # Offset: 115
    00000075: 	nopl	(%rax) # Size: 3
.Ltmp1007:
    00000078: 	testq	%rsi, %rsi
    0000007b: 	je	.Ltmp1008 # Offset: 123
.Ltmp1014:
    0000007d: 	jmp	.Ltmp1014 # Offset: 125
    0000007f: 	nop # Size: 1
.Ltmp1012:
    00000080: 	movq	%rdi, %r8
    00000083: 	movq	%r8, %rax
    00000086: 	retq # Offset: 134
DWARF CFI Instructions:
    <empty>
End of Function "_Z12lower_bound1ISt14_List_iteratorIiEiET_S2_S2_T0_"

Binary Function "_Z13binarysearch4ISt14_List_iteratorIfEfEbT_S2_T0_" after disassembly {
  Number      : 192
  State       : disassembled
  Address     : 0x6720
  Size        : 0x68
  MaxSize     : 0x70
  Offset      : 0x6720
  Section     : .text
  Orc Section : .local.text._Z13binarysearch4ISt14_List_iteratorIfEfEbT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0191:
    00000000: 	endbr64
    00000004: 	cmpq	%rdi, %rsi
    00000007: 	je	.Ltmp1015 # Offset: 7
    00000009: 	movq	%rdi, %rax
    0000000c: 	xorl	%ecx, %ecx
    0000000e: 	nop # Size: 2
.Ltmp1016:
    00000010: 	movq	(%rax), %rax
    00000013: 	addq	$0x1, %rcx
    00000017: 	cmpq	%rax, %rsi
    0000001a: 	jne	.Ltmp1016 # Offset: 26
    0000001c: 	nopl	(%rax) # Size: 4
.Ltmp1020:
    00000020: 	movq	%rcx, %rsi
    00000023: 	movq	%rdi, %rdx
    00000026: 	sarq	%rsi
    00000029: 	je	.Ltmp1017 # Offset: 41
    0000002b: 	leaq	-0x1(%rsi), %rax
    0000002f: 	nop # Size: 1
.Ltmp1018:
    00000030: 	movq	(%rdx), %rdx
    00000033: 	subq	$0x1, %rax
    00000037: 	jae	.Ltmp1018 # Offset: 55
.Ltmp1017:
    00000039: 	movss	0x10(%rdx), %xmm1
    0000003e: 	comiss	%xmm1, %xmm0
    00000041: 	jbe	.Ltmp1019 # Offset: 65
    00000043: 	addq	$0x1, %rsi
    00000047: 	movq	(%rdx), %rdi
    0000004a: 	subq	%rsi, %rcx
.Ltmp1022:
    0000004d: 	testq	%rcx, %rcx
    00000050: 	jg	.Ltmp1020 # Offset: 80
.Ltmp1015:
    00000052: 	xorl	%eax, %eax
    00000054: 	retq # Offset: 84
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp1019:
    00000058: 	comiss	%xmm0, %xmm1
    0000005b: 	jbe	.Ltmp1021 # Offset: 91
    0000005d: 	movq	%rsi, %rcx
    00000060: 	jmp	.Ltmp1022 # Offset: 96
.Ltmp1021:
    00000062: 	movl	$0x1, %eax
    00000067: 	retq # Offset: 103
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch4ISt14_List_iteratorIfEfEbT_S2_T0_"

Binary Function "_Z13binarysearch2ISt14_List_iteratorIfEfEbT_S2_T0_" after disassembly {
  Number      : 193
  State       : disassembled
  Address     : 0x6790
  Size        : 0x9e
  MaxSize     : 0xa0
  Offset      : 0x6790
  Section     : .text
  Orc Section : .local.text._Z13binarysearch2ISt14_List_iteratorIfEfEbT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0192:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp1023 # Offset: 7
    00000009: 	movq	%rdi, %rax
    0000000c: 	xorl	%r8d, %r8d
    0000000f: 	nop # Size: 1
.Ltmp1024:
    00000010: 	movq	(%rax), %rax
    00000013: 	addq	$0x1, %r8
    00000017: 	cmpq	%rax, %rsi
    0000001a: 	jne	.Ltmp1024 # Offset: 26
    0000001c: 	nopl	(%rax) # Size: 4
.Ltmp1029:
    00000020: 	movq	%r8, %rcx
    00000023: 	shrq	$0x3f, %rcx
    00000027: 	addq	%r8, %rcx
    0000002a: 	sarq	%rcx
    0000002d: 	cmpq	$0x1, %r8
    00000031: 	jle	.Ltmp1025 # Offset: 49
    00000033: 	leaq	-0x1(%rcx), %rdx
    00000037: 	movq	%rdi, %rax
    0000003a: 	testq	%rcx, %rcx
    0000003d: 	je	.Ltmp1026 # Offset: 61
    0000003f: 	nop # Size: 1
.Ltmp1027:
    00000040: 	movq	(%rax), %rax
    00000043: 	subq	$0x1, %rdx
    00000047: 	jae	.Ltmp1027 # Offset: 71
.Ltmp1026:
    00000049: 	movss	0x10(%rax), %xmm1
    0000004e: 	comiss	%xmm1, %xmm0
    00000051: 	jbe	.Ltmp1028 # Offset: 81
    00000053: 	addq	$0x1, %rcx
    00000057: 	movq	(%rax), %rdi
    0000005a: 	subq	%rcx, %r8
.Ltmp1031:
    0000005d: 	testq	%r8, %r8
    00000060: 	jne	.Ltmp1029 # Offset: 96
.Ltmp1023:
    00000062: 	xorl	%eax, %eax
    00000064: 	retq # Offset: 100
    00000065: 	nopl	(%rax) # Size: 3
.Ltmp1028:
    00000068: 	comiss	%xmm0, %xmm1
    0000006b: 	jbe	.Ltmp1030 # Offset: 107
    0000006d: 	movq	%rcx, %r8
    00000070: 	jmp	.Ltmp1031 # Offset: 112
    00000072: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1025:
    00000078: 	leaq	0x1(%rcx), %rdx
    0000007c: 	movq	%rdi, %rax
    0000007f: 	testq	%rcx, %rcx
    00000082: 	je	.Ltmp1026 # Offset: 130
    00000084: 	nopl	(%rax) # Size: 4
.Ltmp1032:
    00000088: 	addq	$0x1, %rdx
    0000008c: 	movq	0x8(%rax), %rax
    00000090: 	cmpq	$0x1, %rdx
    00000094: 	jne	.Ltmp1032 # Offset: 148
    00000096: 	jmp	.Ltmp1026 # Offset: 150
.Ltmp1030:
    00000098: 	movl	$0x1, %eax
    0000009d: 	retq # Offset: 157
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch2ISt14_List_iteratorIfEfEbT_S2_T0_"

Binary Function "_Z13binarysearch1ISt14_List_iteratorIfEfEbT_S2_T0_" after disassembly {
  Number      : 194
  State       : disassembled
  Address     : 0x6830
  Size        : 0x8b
  MaxSize     : 0x90
  Offset      : 0x6830
  Section     : .text
  Orc Section : .local.text._Z13binarysearch1ISt14_List_iteratorIfEfEbT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0193:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp1033 # Offset: 7
    00000009: 	nopl	(%rax) # Size: 7
.Ltmp1039:
    00000010: 	movq	%rdi, %rax
    00000013: 	xorl	%edx, %edx
    00000015: 	nopl	(%rax) # Size: 3
.Ltmp1034:
    00000018: 	movq	(%rax), %rax
    0000001b: 	addq	$0x1, %rdx
    0000001f: 	cmpq	%rsi, %rax
    00000022: 	jne	.Ltmp1034 # Offset: 34
    00000024: 	movq	%rdx, %rcx
    00000027: 	sarq	%rcx
    0000002a: 	cmpq	$0x1, %rdx
    0000002e: 	je	.Ltmp1035 # Offset: 46
    00000030: 	leaq	-0x1(%rcx), %rax
    00000034: 	movq	%rdi, %rdx
    00000037: 	testq	%rcx, %rcx
    0000003a: 	je	.Ltmp1036 # Offset: 58
    0000003c: 	nopl	(%rax) # Size: 4
.Ltmp1037:
    00000040: 	movq	(%rdx), %rdx
    00000043: 	subq	$0x1, %rax
    00000047: 	jae	.Ltmp1037 # Offset: 71
.Ltmp1036:
    00000049: 	movss	0x10(%rdx), %xmm1
    0000004e: 	comiss	%xmm1, %xmm0
    00000051: 	jbe	.Ltmp1038 # Offset: 81
    00000053: 	movq	(%rdx), %rdi
.Ltmp1041:
    00000056: 	cmpq	%rdi, %rsi
    00000059: 	jne	.Ltmp1039 # Offset: 89
.Ltmp1033:
    0000005b: 	xorl	%eax, %eax
    0000005d: 	retq # Offset: 93
    0000005e: 	nop # Size: 2
.Ltmp1038:
    00000060: 	comiss	%xmm0, %xmm1
    00000063: 	jbe	.Ltmp1040 # Offset: 99
    00000065: 	movq	%rdx, %rsi
    00000068: 	jmp	.Ltmp1041 # Offset: 104
    0000006a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1035:
    00000070: 	testq	%rcx, %rcx
    00000073: 	je	.Ltmp1042 # Offset: 115
.Ltmp1043:
    00000075: 	jmp	.Ltmp1043 # Offset: 117
    00000077: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1042:
    00000080: 	movq	%rdi, %rdx
    00000083: 	jmp	.Ltmp1036 # Offset: 131
.Ltmp1040:
    00000085: 	movl	$0x1, %eax
    0000008a: 	retq # Offset: 138
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch1ISt14_List_iteratorIfEfEbT_S2_T0_"

Binary Function "_Z12upper_bound2ISt14_List_iteratorIfEfET_S2_S2_T0_" after disassembly {
  Number      : 195
  State       : disassembled
  Address     : 0x68c0
  Size        : 0xb1
  MaxSize     : 0xc0
  Offset      : 0x68c0
  Section     : .text
  Orc Section : .local.text._Z12upper_bound2ISt14_List_iteratorIfEfET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0194:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp1044 # Offset: 10
    00000010: 	movq	%rdi, %rdx
    00000013: 	xorl	%r8d, %r8d
    00000016: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1045:
    00000020: 	movq	(%rdx), %rdx
    00000023: 	addq	$0x1, %r8
    00000027: 	cmpq	%rsi, %rdx
    0000002a: 	jne	.Ltmp1045 # Offset: 42
    0000002c: 	nopl	(%rax) # Size: 4
.Ltmp1050:
    00000030: 	movq	%r8, %rsi
    00000033: 	shrq	$0x3f, %rsi
    00000037: 	addq	%r8, %rsi
    0000003a: 	sarq	%rsi
    0000003d: 	cmpq	$0x1, %r8
    00000041: 	jle	.Ltmp1046 # Offset: 65
    00000043: 	leaq	-0x1(%rsi), %rcx
    00000047: 	testq	%rsi, %rsi
    0000004a: 	je	.Ltmp1047 # Offset: 74
    0000004c: 	movq	%rax, %rdx
    0000004f: 	nop # Size: 1
.Ltmp1048:
    00000050: 	movq	(%rdx), %rdx
    00000053: 	subq	$0x1, %rcx
    00000057: 	jae	.Ltmp1048 # Offset: 87
.Ltmp1052:
    00000059: 	movss	0x10(%rdx), %xmm1
    0000005e: 	comiss	%xmm0, %xmm1
    00000061: 	jbe	.Ltmp1049 # Offset: 97
    00000063: 	movq	%rsi, %r8
    00000066: 	jmp	.Ltmp1050 # Offset: 102
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1047:
    00000070: 	movss	0x10(%rax), %xmm1
    00000075: 	comiss	%xmm0, %xmm1
    00000078: 	ja	.Ltmp1044 # Offset: 120
    0000007a: 	movq	%rax, %rdx
    0000007d: 	nopl	(%rax) # Size: 3
.Ltmp1049:
    00000080: 	addq	$0x1, %rsi
    00000084: 	movq	(%rdx), %rax
    00000087: 	subq	%rsi, %r8
    0000008a: 	jne	.Ltmp1050 # Offset: 138
    0000008c: 	retq # Offset: 140
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp1046:
    00000090: 	leaq	0x1(%rsi), %rcx
    00000094: 	movq	%rax, %rdx
    00000097: 	testq	%rsi, %rsi
    0000009a: 	je	.Ltmp1047 # Offset: 154
    0000009c: 	nopl	(%rax) # Size: 4
.Ltmp1051:
    000000a0: 	addq	$0x1, %rcx
    000000a4: 	movq	0x8(%rdx), %rdx
    000000a8: 	cmpq	$0x1, %rcx
    000000ac: 	jne	.Ltmp1051 # Offset: 172
    000000ae: 	jmp	.Ltmp1052 # Offset: 174
.Ltmp1044:
    000000b0: 	retq # Offset: 176
DWARF CFI Instructions:
    <empty>
End of Function "_Z12upper_bound2ISt14_List_iteratorIfEfET_S2_S2_T0_"

Binary Function "_Z12upper_bound1ISt14_List_iteratorIfEfET_S2_S2_T0_" after disassembly {
  Number      : 196
  State       : disassembled
  Address     : 0x6980
  Size        : 0x97
  MaxSize     : 0xa0
  Offset      : 0x6980
  Section     : .text
  Orc Section : .local.text._Z12upper_bound1ISt14_List_iteratorIfEfET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0195:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r8
    00000007: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1061:
    00000010: 	cmpq	%r8, %rdi
    00000013: 	je	.Ltmp1053 # Offset: 19
.Ltmp1059:
    00000015: 	movq	%rdi, %rax
    00000018: 	xorl	%edx, %edx
    0000001a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1054:
    00000020: 	movq	(%rax), %rax
    00000023: 	addq	$0x1, %rdx
    00000027: 	cmpq	%r8, %rax
    0000002a: 	jne	.Ltmp1054 # Offset: 42
    0000002c: 	movq	%rdx, %rcx
    0000002f: 	sarq	%rcx
    00000032: 	cmpq	$0x1, %rdx
    00000036: 	je	.Ltmp1055 # Offset: 54
    00000038: 	leaq	-0x1(%rcx), %rax
    0000003c: 	testq	%rcx, %rcx
    0000003f: 	je	.Ltmp1056 # Offset: 63
    00000041: 	movq	%rdi, %rdx
    00000044: 	nopl	(%rax) # Size: 4
.Ltmp1057:
    00000048: 	movq	(%rdx), %rdx
    0000004b: 	subq	$0x1, %rax
    0000004f: 	jae	.Ltmp1057 # Offset: 79
    00000051: 	movss	0x10(%rdx), %xmm1
    00000056: 	comiss	%xmm0, %xmm1
    00000059: 	jbe	.Ltmp1058 # Offset: 89
    0000005b: 	movq	%rdx, %r8
    0000005e: 	cmpq	%r8, %rdi
    00000061: 	jne	.Ltmp1059 # Offset: 97
.Ltmp1053:
    00000063: 	movq	%r8, %rax
    00000066: 	retq # Offset: 102
    00000067: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1056:
    00000070: 	movss	0x10(%rdi), %xmm1
    00000075: 	comiss	%xmm0, %xmm1
    00000078: 	ja	.Ltmp1060 # Offset: 120
    0000007a: 	movq	%rdi, %rdx
    0000007d: 	nopl	(%rax) # Size: 3
.Ltmp1058:
    00000080: 	movq	(%rdx), %rdi
    00000083: 	jmp	.Ltmp1061 # Offset: 131
    00000085: 	nopl	(%rax) # Size: 3
.Ltmp1055:
    00000088: 	testq	%rcx, %rcx
    0000008b: 	je	.Ltmp1056 # Offset: 139
.Ltmp1062:
    0000008d: 	jmp	.Ltmp1062 # Offset: 141
    0000008f: 	nop # Size: 1
.Ltmp1060:
    00000090: 	movq	%rdi, %r8
    00000093: 	movq	%r8, %rax
    00000096: 	retq # Offset: 150
DWARF CFI Instructions:
    <empty>
End of Function "_Z12upper_bound1ISt14_List_iteratorIfEfET_S2_S2_T0_"

Binary Function "_Z12lower_bound2ISt14_List_iteratorIfEfET_S2_S2_T0_" after disassembly {
  Number      : 197
  State       : disassembled
  Address     : 0x6a20
  Size        : 0xb1
  MaxSize     : 0xc0
  Offset      : 0x6a20
  Section     : .text
  Orc Section : .local.text._Z12lower_bound2ISt14_List_iteratorIfEfET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0196:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	cmpq	%rdi, %rsi
    0000000a: 	je	.Ltmp1063 # Offset: 10
    00000010: 	movq	%rdi, %rdx
    00000013: 	xorl	%r8d, %r8d
    00000016: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1064:
    00000020: 	movq	(%rdx), %rdx
    00000023: 	addq	$0x1, %r8
    00000027: 	cmpq	%rdx, %rsi
    0000002a: 	jne	.Ltmp1064 # Offset: 42
    0000002c: 	nopl	(%rax) # Size: 4
.Ltmp1069:
    00000030: 	movq	%r8, %rsi
    00000033: 	shrq	$0x3f, %rsi
    00000037: 	addq	%r8, %rsi
    0000003a: 	sarq	%rsi
    0000003d: 	cmpq	$0x1, %r8
    00000041: 	jle	.Ltmp1065 # Offset: 65
    00000043: 	leaq	-0x1(%rsi), %rcx
    00000047: 	testq	%rsi, %rsi
    0000004a: 	je	.Ltmp1066 # Offset: 74
    0000004c: 	movq	%rax, %rdx
    0000004f: 	nop # Size: 1
.Ltmp1067:
    00000050: 	movq	(%rdx), %rdx
    00000053: 	subq	$0x1, %rcx
    00000057: 	jae	.Ltmp1067 # Offset: 87
.Ltmp1072:
    00000059: 	comiss	0x10(%rdx), %xmm0
    0000005d: 	ja	.Ltmp1068 # Offset: 93
    0000005f: 	movq	%rsi, %r8
    00000062: 	jmp	.Ltmp1069 # Offset: 98
    00000064: 	nopl	(%rax) # Size: 4
.Ltmp1066:
    00000068: 	comiss	0x10(%rax), %xmm0
    0000006c: 	jbe	.Ltmp1070 # Offset: 108
    0000006e: 	movq	%rax, %rdx
    00000071: 	nopl	(%rax) # Size: 7
.Ltmp1068:
    00000078: 	addq	$0x1, %rsi
    0000007c: 	movq	(%rdx), %rax
    0000007f: 	subq	%rsi, %r8
    00000082: 	jne	.Ltmp1069 # Offset: 130
    00000084: 	retq # Offset: 132
    00000085: 	nopl	(%rax) # Size: 3
.Ltmp1065:
    00000088: 	leaq	0x1(%rsi), %rcx
    0000008c: 	movq	%rax, %rdx
    0000008f: 	testq	%rsi, %rsi
    00000092: 	je	.Ltmp1066 # Offset: 146
    00000094: 	nopl	(%rax) # Size: 4
.Ltmp1071:
    00000098: 	addq	$0x1, %rcx
    0000009c: 	movq	0x8(%rdx), %rdx
    000000a0: 	cmpq	$0x1, %rcx
    000000a4: 	jne	.Ltmp1071 # Offset: 164
    000000a6: 	jmp	.Ltmp1072 # Offset: 166
.Ltmp1063:
    000000a8: 	retq # Offset: 168
    000000a9: 	nopl	(%rax) # Size: 7
.Ltmp1070:
    000000b0: 	retq # Offset: 176
DWARF CFI Instructions:
    <empty>
End of Function "_Z12lower_bound2ISt14_List_iteratorIfEfET_S2_S2_T0_"

Binary Function "_Z12lower_bound1ISt14_List_iteratorIfEfET_S2_S2_T0_" after disassembly {
  Number      : 198
  State       : disassembled
  Address     : 0x6ae0
  Size        : 0x97
  MaxSize     : 0xa0
  Offset      : 0x6ae0
  Section     : .text
  Orc Section : .local.text._Z12lower_bound1ISt14_List_iteratorIfEfET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0197:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r8
    00000007: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1081:
    00000010: 	cmpq	%r8, %rdi
    00000013: 	je	.Ltmp1073 # Offset: 19
.Ltmp1079:
    00000015: 	movq	%rdi, %rax
    00000018: 	xorl	%edx, %edx
    0000001a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1074:
    00000020: 	movq	(%rax), %rax
    00000023: 	addq	$0x1, %rdx
    00000027: 	cmpq	%r8, %rax
    0000002a: 	jne	.Ltmp1074 # Offset: 42
    0000002c: 	movq	%rdx, %rcx
    0000002f: 	sarq	%rcx
    00000032: 	cmpq	$0x1, %rdx
    00000036: 	je	.Ltmp1075 # Offset: 54
    00000038: 	leaq	-0x1(%rcx), %rax
    0000003c: 	testq	%rcx, %rcx
    0000003f: 	je	.Ltmp1076 # Offset: 63
    00000041: 	movq	%rdi, %rdx
    00000044: 	nopl	(%rax) # Size: 4
.Ltmp1077:
    00000048: 	movq	(%rdx), %rdx
    0000004b: 	subq	$0x1, %rax
    0000004f: 	jae	.Ltmp1077 # Offset: 79
    00000051: 	comiss	0x10(%rdx), %xmm0
    00000055: 	ja	.Ltmp1078 # Offset: 85
    00000057: 	movq	%rdx, %r8
    0000005a: 	cmpq	%r8, %rdi
    0000005d: 	jne	.Ltmp1079 # Offset: 93
.Ltmp1073:
    0000005f: 	movq	%r8, %rax
    00000062: 	retq # Offset: 98
    00000063: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1076:
    00000068: 	comiss	0x10(%rdi), %xmm0
    0000006c: 	jbe	.Ltmp1080 # Offset: 108
    0000006e: 	movq	%rdi, %rdx
    00000071: 	nopl	(%rax) # Size: 7
.Ltmp1078:
    00000078: 	movq	(%rdx), %rdi
    0000007b: 	jmp	.Ltmp1081 # Offset: 123
    0000007d: 	nopl	(%rax) # Size: 3
.Ltmp1075:
    00000080: 	testq	%rcx, %rcx
    00000083: 	je	.Ltmp1076 # Offset: 131
.Ltmp1082:
    00000085: 	jmp	.Ltmp1082 # Offset: 133
    00000087: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1080:
    00000090: 	movq	%rdi, %r8
    00000093: 	movq	%r8, %rax
    00000096: 	retq # Offset: 150
DWARF CFI Instructions:
    <empty>
End of Function "_Z12lower_bound1ISt14_List_iteratorIfEfET_S2_S2_T0_"

Binary Function "_Z14std_upperboundISt14_List_iteratorIfEfET_S2_S2_T0_" after disassembly {
  Number      : 199
  State       : disassembled
  Address     : 0x6b80
  Size        : 0x72
  MaxSize     : 0x80
  Offset      : 0x6b80
  Section     : .text
  Orc Section : .local.text._Z14std_upperboundISt14_List_iteratorIfEfET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0198:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp1083 # Offset: 10
    0000000c: 	movq	%rdi, %rdx
    0000000f: 	xorl	%r8d, %r8d
    00000012: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1084:
    00000018: 	movq	(%rdx), %rdx
    0000001b: 	addq	$0x1, %r8
    0000001f: 	cmpq	%rsi, %rdx
    00000022: 	jne	.Ltmp1084 # Offset: 34
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp1090:
    00000028: 	testq	%r8, %r8
    0000002b: 	jle	.Ltmp1085 # Offset: 43
.Ltmp1089:
    0000002d: 	movq	%r8, %rsi
    00000030: 	movq	%rax, %rcx
    00000033: 	sarq	%rsi
    00000036: 	je	.Ltmp1086 # Offset: 54
    00000038: 	leaq	-0x1(%rsi), %rdx
    0000003c: 	nopl	(%rax) # Size: 4
.Ltmp1087:
    00000040: 	movq	(%rcx), %rcx
    00000043: 	subq	$0x1, %rdx
    00000047: 	jae	.Ltmp1087 # Offset: 71
.Ltmp1086:
    00000049: 	movss	0x10(%rcx), %xmm1
    0000004e: 	comiss	%xmm0, %xmm1
    00000051: 	ja	.Ltmp1088 # Offset: 81
    00000053: 	subq	%rsi, %r8
    00000056: 	movq	(%rcx), %rax
    00000059: 	subq	$0x1, %r8
    0000005d: 	testq	%r8, %r8
    00000060: 	jg	.Ltmp1089 # Offset: 96
.Ltmp1085:
    00000062: 	retq # Offset: 98
    00000063: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1088:
    00000068: 	movq	%rsi, %r8
    0000006b: 	jmp	.Ltmp1090 # Offset: 107
.Ltmp1083:
    0000006d: 	xorl	%r8d, %r8d
    00000070: 	jmp	.Ltmp1090 # Offset: 112
DWARF CFI Instructions:
    <empty>
End of Function "_Z14std_upperboundISt14_List_iteratorIfEfET_S2_S2_T0_"

Binary Function "_Z16std_binarysearchISt14_List_iteratorIfEfEbT_S2_T0_" after disassembly {
  Number      : 200
  State       : disassembled
  Address     : 0x6c00
  Size        : 0x79
  MaxSize     : 0x80
  Offset      : 0x6c00
  Section     : .text
  Orc Section : .local.text._Z16std_binarysearchISt14_List_iteratorIfEfEbT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0199:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp1091 # Offset: 7
    00000009: 	movq	%rdi, %rax
    0000000c: 	xorl	%ecx, %ecx
    0000000e: 	nop # Size: 2
.Ltmp1092:
    00000010: 	movq	(%rax), %rax
    00000013: 	addq	$0x1, %rcx
    00000017: 	cmpq	%rsi, %rax
    0000001a: 	jne	.Ltmp1092 # Offset: 26
    0000001c: 	nopl	(%rax) # Size: 4
.Ltmp1099:
    00000020: 	testq	%rcx, %rcx
    00000023: 	jle	.Ltmp1093 # Offset: 35
.Ltmp1097:
    00000025: 	movq	%rcx, %r8
    00000028: 	movq	%rdi, %rdx
    0000002b: 	sarq	%r8
    0000002e: 	je	.Ltmp1094 # Offset: 46
    00000030: 	leaq	-0x1(%r8), %rax
    00000034: 	nopl	(%rax) # Size: 4
.Ltmp1095:
    00000038: 	movq	(%rdx), %rdx
    0000003b: 	subq	$0x1, %rax
    0000003f: 	jae	.Ltmp1095 # Offset: 63
.Ltmp1094:
    00000041: 	comiss	0x10(%rdx), %xmm0
    00000045: 	jbe	.Ltmp1096 # Offset: 69
    00000047: 	subq	%r8, %rcx
    0000004a: 	movq	(%rdx), %rdi
    0000004d: 	subq	$0x1, %rcx
    00000051: 	testq	%rcx, %rcx
    00000054: 	jg	.Ltmp1097 # Offset: 84
.Ltmp1093:
    00000056: 	xorl	%eax, %eax
    00000058: 	cmpq	%rdi, %rsi
    0000005b: 	je	.Ltmp1098 # Offset: 91
    0000005d: 	movss	0x10(%rdi), %xmm1
    00000062: 	comiss	%xmm0, %xmm1
    00000065: 	setbe	%al
.Ltmp1098:
    00000068: 	retq # Offset: 104
    00000069: 	nopl	(%rax) # Size: 7
.Ltmp1096:
    00000070: 	movq	%r8, %rcx
    00000073: 	jmp	.Ltmp1099 # Offset: 115
.Ltmp1091:
    00000075: 	xorl	%ecx, %ecx
    00000077: 	jmp	.Ltmp1099 # Offset: 119
DWARF CFI Instructions:
    <empty>
End of Function "_Z16std_binarysearchISt14_List_iteratorIfEfEbT_S2_T0_"

Binary Function "_Z14std_upperboundISt14_List_iteratorIiEiET_S2_S2_T0_" after disassembly {
  Number      : 201
  State       : disassembled
  Address     : 0x6c80
  Size        : 0x6a
  MaxSize     : 0x70
  Offset      : 0x6c80
  Section     : .text
  Orc Section : .local.text._Z14std_upperboundISt14_List_iteratorIiEiET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0200:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp1100 # Offset: 10
    0000000c: 	movq	%rdi, %rcx
    0000000f: 	xorl	%r8d, %r8d
    00000012: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1101:
    00000018: 	movq	(%rcx), %rcx
    0000001b: 	addq	$0x1, %r8
    0000001f: 	cmpq	%rsi, %rcx
    00000022: 	jne	.Ltmp1101 # Offset: 34
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp1107:
    00000028: 	testq	%r8, %r8
    0000002b: 	jle	.Ltmp1102 # Offset: 43
.Ltmp1106:
    0000002d: 	movq	%r8, %r9
    00000030: 	movq	%rax, %rsi
    00000033: 	sarq	%r9
    00000036: 	je	.Ltmp1103 # Offset: 54
    00000038: 	leaq	-0x1(%r9), %rcx
    0000003c: 	nopl	(%rax) # Size: 4
.Ltmp1104:
    00000040: 	movq	(%rsi), %rsi
    00000043: 	subq	$0x1, %rcx
    00000047: 	jae	.Ltmp1104 # Offset: 71
.Ltmp1103:
    00000049: 	cmpl	%edx, 0x10(%rsi)
    0000004c: 	jg	.Ltmp1105 # Offset: 76
    0000004e: 	subq	%r9, %r8
    00000051: 	movq	(%rsi), %rax
    00000054: 	subq	$0x1, %r8
    00000058: 	testq	%r8, %r8
    0000005b: 	jg	.Ltmp1106 # Offset: 91
.Ltmp1102:
    0000005d: 	retq # Offset: 93
    0000005e: 	nop # Size: 2
.Ltmp1105:
    00000060: 	movq	%r9, %r8
    00000063: 	jmp	.Ltmp1107 # Offset: 99
.Ltmp1100:
    00000065: 	xorl	%r8d, %r8d
    00000068: 	jmp	.Ltmp1107 # Offset: 104
DWARF CFI Instructions:
    <empty>
End of Function "_Z14std_upperboundISt14_List_iteratorIiEiET_S2_S2_T0_"

Binary Function "_Z16std_binarysearchISt14_List_iteratorIiEiEbT_S2_T0_" after disassembly {
  Number      : 202
  State       : disassembled
  Address     : 0x6cf0
  Size        : 0x72
  MaxSize     : 0x80
  Offset      : 0x6cf0
  Section     : .text
  Orc Section : .local.text._Z16std_binarysearchISt14_List_iteratorIiEiEbT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0201:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp1108 # Offset: 7
    00000009: 	movq	%rdi, %rax
    0000000c: 	xorl	%r8d, %r8d
    0000000f: 	nop # Size: 1
.Ltmp1109:
    00000010: 	movq	(%rax), %rax
    00000013: 	addq	$0x1, %r8
    00000017: 	cmpq	%rsi, %rax
    0000001a: 	jne	.Ltmp1109 # Offset: 26
    0000001c: 	nopl	(%rax) # Size: 4
.Ltmp1116:
    00000020: 	testq	%r8, %r8
    00000023: 	jle	.Ltmp1110 # Offset: 35
.Ltmp1114:
    00000025: 	movq	%r8, %r9
    00000028: 	movq	%rdi, %rcx
    0000002b: 	sarq	%r9
    0000002e: 	je	.Ltmp1111 # Offset: 46
    00000030: 	leaq	-0x1(%r9), %rax
    00000034: 	nopl	(%rax) # Size: 4
.Ltmp1112:
    00000038: 	movq	(%rcx), %rcx
    0000003b: 	subq	$0x1, %rax
    0000003f: 	jae	.Ltmp1112 # Offset: 63
.Ltmp1111:
    00000041: 	cmpl	%edx, 0x10(%rcx)
    00000044: 	jge	.Ltmp1113 # Offset: 68
    00000046: 	subq	%r9, %r8
    00000049: 	movq	(%rcx), %rdi
    0000004c: 	subq	$0x1, %r8
    00000050: 	testq	%r8, %r8
    00000053: 	jg	.Ltmp1114 # Offset: 83
.Ltmp1110:
    00000055: 	xorl	%eax, %eax
    00000057: 	cmpq	%rdi, %rsi
    0000005a: 	je	.Ltmp1115 # Offset: 90
    0000005c: 	cmpl	%edx, 0x10(%rdi)
    0000005f: 	setle	%al
.Ltmp1115:
    00000062: 	retq # Offset: 98
    00000063: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1113:
    00000068: 	movq	%r9, %r8
    0000006b: 	jmp	.Ltmp1116 # Offset: 107
.Ltmp1108:
    0000006d: 	xorl	%r8d, %r8d
    00000070: 	jmp	.Ltmp1116 # Offset: 112
DWARF CFI Instructions:
    <empty>
End of Function "_Z16std_binarysearchISt14_List_iteratorIiEiEbT_S2_T0_"

Binary Function "_Z14std_upperboundISt14_List_iteratorItEtET_S2_S2_T0_" after disassembly {
  Number      : 203
  State       : disassembled
  Address     : 0x6d70
  Size        : 0x6a
  MaxSize     : 0x70
  Offset      : 0x6d70
  Section     : .text
  Orc Section : .local.text._Z14std_upperboundISt14_List_iteratorItEtET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0202:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp1117 # Offset: 10
    0000000c: 	movq	%rdi, %rcx
    0000000f: 	xorl	%r8d, %r8d
    00000012: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1118:
    00000018: 	movq	(%rcx), %rcx
    0000001b: 	addq	$0x1, %r8
    0000001f: 	cmpq	%rsi, %rcx
    00000022: 	jne	.Ltmp1118 # Offset: 34
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp1124:
    00000028: 	testq	%r8, %r8
    0000002b: 	jle	.Ltmp1119 # Offset: 43
.Ltmp1123:
    0000002d: 	movq	%r8, %r9
    00000030: 	movq	%rax, %rsi
    00000033: 	sarq	%r9
    00000036: 	je	.Ltmp1120 # Offset: 54
    00000038: 	leaq	-0x1(%r9), %rcx
    0000003c: 	nopl	(%rax) # Size: 4
.Ltmp1121:
    00000040: 	movq	(%rsi), %rsi
    00000043: 	subq	$0x1, %rcx
    00000047: 	jae	.Ltmp1121 # Offset: 71
.Ltmp1120:
    00000049: 	cmpw	%dx, 0x10(%rsi)
    0000004d: 	ja	.Ltmp1122 # Offset: 77
    0000004f: 	subq	%r9, %r8
    00000052: 	movq	(%rsi), %rax
    00000055: 	subq	$0x1, %r8
    00000059: 	testq	%r8, %r8
    0000005c: 	jg	.Ltmp1123 # Offset: 92
.Ltmp1119:
    0000005e: 	retq # Offset: 94
    0000005f: 	nop # Size: 1
.Ltmp1122:
    00000060: 	movq	%r9, %r8
    00000063: 	jmp	.Ltmp1124 # Offset: 99
.Ltmp1117:
    00000065: 	xorl	%r8d, %r8d
    00000068: 	jmp	.Ltmp1124 # Offset: 104
DWARF CFI Instructions:
    <empty>
End of Function "_Z14std_upperboundISt14_List_iteratorItEtET_S2_S2_T0_"

Binary Function "_Z16std_binarysearchISt14_List_iteratorItEtEbT_S2_T0_" after disassembly {
  Number      : 204
  State       : disassembled
  Address     : 0x6de0
  Size        : 0x7a
  MaxSize     : 0x80
  Offset      : 0x6de0
  Section     : .text
  Orc Section : .local.text._Z16std_binarysearchISt14_List_iteratorItEtEbT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0203:
    00000000: 	endbr64
    00000004: 	movl	%edx, %r10d
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp1125 # Offset: 10
    0000000c: 	movq	%rdi, %rax
    0000000f: 	xorl	%r8d, %r8d
    00000012: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1126:
    00000018: 	movq	(%rax), %rax
    0000001b: 	addq	$0x1, %r8
    0000001f: 	cmpq	%rsi, %rax
    00000022: 	jne	.Ltmp1126 # Offset: 34
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp1133:
    00000028: 	testq	%r8, %r8
    0000002b: 	jle	.Ltmp1127 # Offset: 43
.Ltmp1131:
    0000002d: 	movq	%r8, %r9
    00000030: 	movq	%rdi, %rcx
    00000033: 	sarq	%r9
    00000036: 	je	.Ltmp1128 # Offset: 54
    00000038: 	leaq	-0x1(%r9), %rax
    0000003c: 	nopl	(%rax) # Size: 4
.Ltmp1129:
    00000040: 	movq	(%rcx), %rcx
    00000043: 	subq	$0x1, %rax
    00000047: 	jae	.Ltmp1129 # Offset: 71
.Ltmp1128:
    00000049: 	cmpw	%r10w, 0x10(%rcx)
    0000004e: 	jae	.Ltmp1130 # Offset: 78
    00000050: 	subq	%r9, %r8
    00000053: 	movq	(%rcx), %rdi
    00000056: 	subq	$0x1, %r8
    0000005a: 	testq	%r8, %r8
    0000005d: 	jg	.Ltmp1131 # Offset: 93
.Ltmp1127:
    0000005f: 	xorl	%eax, %eax
    00000061: 	cmpq	%rdi, %rsi
    00000064: 	je	.Ltmp1132 # Offset: 100
    00000066: 	cmpw	%dx, 0x10(%rdi)
    0000006a: 	setbe	%al
.Ltmp1132:
    0000006d: 	retq # Offset: 109
    0000006e: 	nop # Size: 2
.Ltmp1130:
    00000070: 	movq	%r9, %r8
    00000073: 	jmp	.Ltmp1133 # Offset: 115
.Ltmp1125:
    00000075: 	xorl	%r8d, %r8d
    00000078: 	jmp	.Ltmp1133 # Offset: 120
DWARF CFI Instructions:
    <empty>
End of Function "_Z16std_binarysearchISt14_List_iteratorItEtEbT_S2_T0_"

Binary Function "_Z14std_upperboundISt14_List_iteratorIaEaET_S2_S2_T0_" after disassembly {
  Number      : 205
  State       : disassembled
  Address     : 0x6e60
  Size        : 0x6a
  MaxSize     : 0x70
  Offset      : 0x6e60
  Section     : .text
  Orc Section : .local.text._Z14std_upperboundISt14_List_iteratorIaEaET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0204:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp1134 # Offset: 10
    0000000c: 	movq	%rdi, %rcx
    0000000f: 	xorl	%r8d, %r8d
    00000012: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1135:
    00000018: 	movq	(%rcx), %rcx
    0000001b: 	addq	$0x1, %r8
    0000001f: 	cmpq	%rsi, %rcx
    00000022: 	jne	.Ltmp1135 # Offset: 34
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp1141:
    00000028: 	testq	%r8, %r8
    0000002b: 	jle	.Ltmp1136 # Offset: 43
.Ltmp1140:
    0000002d: 	movq	%r8, %r9
    00000030: 	movq	%rax, %rsi
    00000033: 	sarq	%r9
    00000036: 	je	.Ltmp1137 # Offset: 54
    00000038: 	leaq	-0x1(%r9), %rcx
    0000003c: 	nopl	(%rax) # Size: 4
.Ltmp1138:
    00000040: 	movq	(%rsi), %rsi
    00000043: 	subq	$0x1, %rcx
    00000047: 	jae	.Ltmp1138 # Offset: 71
.Ltmp1137:
    00000049: 	cmpb	%dl, 0x10(%rsi)
    0000004c: 	jg	.Ltmp1139 # Offset: 76
    0000004e: 	subq	%r9, %r8
    00000051: 	movq	(%rsi), %rax
    00000054: 	subq	$0x1, %r8
    00000058: 	testq	%r8, %r8
    0000005b: 	jg	.Ltmp1140 # Offset: 91
.Ltmp1136:
    0000005d: 	retq # Offset: 93
    0000005e: 	nop # Size: 2
.Ltmp1139:
    00000060: 	movq	%r9, %r8
    00000063: 	jmp	.Ltmp1141 # Offset: 99
.Ltmp1134:
    00000065: 	xorl	%r8d, %r8d
    00000068: 	jmp	.Ltmp1141 # Offset: 104
DWARF CFI Instructions:
    <empty>
End of Function "_Z14std_upperboundISt14_List_iteratorIaEaET_S2_S2_T0_"

Binary Function "_Z16std_binarysearchISt14_List_iteratorIaEaEbT_S2_T0_" after disassembly {
  Number      : 206
  State       : disassembled
  Address     : 0x6ed0
  Size        : 0x7a
  MaxSize     : 0x80
  Offset      : 0x6ed0
  Section     : .text
  Orc Section : .local.text._Z16std_binarysearchISt14_List_iteratorIaEaEbT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0205:
    00000000: 	endbr64
    00000004: 	movl	%edx, %r10d
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp1142 # Offset: 10
    0000000c: 	movq	%rdi, %rax
    0000000f: 	xorl	%r8d, %r8d
    00000012: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1143:
    00000018: 	movq	(%rax), %rax
    0000001b: 	addq	$0x1, %r8
    0000001f: 	cmpq	%rsi, %rax
    00000022: 	jne	.Ltmp1143 # Offset: 34
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp1150:
    00000028: 	testq	%r8, %r8
    0000002b: 	jle	.Ltmp1144 # Offset: 43
.Ltmp1148:
    0000002d: 	movq	%r8, %r9
    00000030: 	movq	%rdi, %rcx
    00000033: 	sarq	%r9
    00000036: 	je	.Ltmp1145 # Offset: 54
    00000038: 	leaq	-0x1(%r9), %rax
    0000003c: 	nopl	(%rax) # Size: 4
.Ltmp1146:
    00000040: 	movq	(%rcx), %rcx
    00000043: 	subq	$0x1, %rax
    00000047: 	jae	.Ltmp1146 # Offset: 71
.Ltmp1145:
    00000049: 	cmpb	%r10b, 0x10(%rcx)
    0000004d: 	jge	.Ltmp1147 # Offset: 77
    0000004f: 	subq	%r9, %r8
    00000052: 	movq	(%rcx), %rdi
    00000055: 	subq	$0x1, %r8
    00000059: 	testq	%r8, %r8
    0000005c: 	jg	.Ltmp1148 # Offset: 92
.Ltmp1144:
    0000005e: 	xorl	%eax, %eax
    00000060: 	cmpq	%rdi, %rsi
    00000063: 	je	.Ltmp1149 # Offset: 99
    00000065: 	cmpb	%dl, 0x10(%rdi)
    00000068: 	setle	%al
.Ltmp1149:
    0000006b: 	retq # Offset: 107
    0000006c: 	nopl	(%rax) # Size: 4
.Ltmp1147:
    00000070: 	movq	%r9, %r8
    00000073: 	jmp	.Ltmp1150 # Offset: 115
.Ltmp1142:
    00000075: 	xorl	%r8d, %r8d
    00000078: 	jmp	.Ltmp1150 # Offset: 120
DWARF CFI Instructions:
    <empty>
End of Function "_Z16std_binarysearchISt14_List_iteratorIaEaEbT_S2_T0_"

Binary Function "_Z23upper_bound_recur_innerIPaalET_S1_T0_T1_.part.0/1(*2)" after disassembly {
  All names   : _Z23upper_bound_recur_innerIPaalET_S1_T0_T1_.part.0/1
                _Z23upper_bound_recur_innerIPaalET_S1_T0_T1_.part.0/binary_search.cpp/1
  Number      : 207
  State       : disassembled
  Address     : 0x6f50
  Size        : 0x54
  MaxSize     : 0x60
  Offset      : 0x6f50
  Section     : .text
  Orc Section : .local.text._Z23upper_bound_recur_innerIPaalET_S1_T0_T1_.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0206:
    00000000: 	movq	%rdx, %rcx
    00000003: 	movq	%rdx, %r8
    00000006: 	movsbl	%sil, %r9d
    0000000a: 	shrq	$0x3f, %rcx
    0000000e: 	leaq	(%rcx,%rdx), %rdx
    00000012: 	sarq	%rdx
    00000015: 	leaq	(%rdi,%rdx), %rax
    00000019: 	cmpb	%sil, (%rax)
    0000001c: 	jle	.Ltmp1151 # Offset: 28
    0000001e: 	testq	%rdx, %rdx
    00000021: 	je	.Ltmp1152 # Offset: 33
    00000023: 	movl	%r9d, %esi
    00000026: 	jmp	.LBB0206 # Offset: 38
    00000028: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1151:
    00000030: 	leaq	0x1(%rdx), %rcx
    00000034: 	addq	$0x1, %rax
    00000038: 	subq	%rcx, %r8
    0000003b: 	je	.Ltmp1153 # Offset: 59
    0000003d: 	movq	%r8, %rdx
    00000040: 	movl	%r9d, %esi
    00000043: 	movq	%rax, %rdi
    00000046: 	jmp	.LBB0206 # Offset: 70
    00000048: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1152:
    00000050: 	movq	%rdi, %rax
.Ltmp1153:
    00000053: 	retq # Offset: 83
DWARF CFI Instructions:
    <empty>
End of Function "_Z23upper_bound_recur_innerIPaalET_S1_T0_T1_.part.0/1(*2)"

Binary Function "_Z23lower_bound_recur_innerIPaalET_S1_T0_T1_.part.0/1(*2)" after disassembly {
  All names   : _Z23lower_bound_recur_innerIPaalET_S1_T0_T1_.part.0/1
                _Z23lower_bound_recur_innerIPaalET_S1_T0_T1_.part.0/binary_search.cpp/1
  Number      : 208
  State       : disassembled
  Address     : 0x6fb0
  Size        : 0x55
  MaxSize     : 0x60
  Offset      : 0x6fb0
  Section     : .text
  Orc Section : .local.text._Z23lower_bound_recur_innerIPaalET_S1_T0_T1_.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0207:
    00000000: 	movq	%rdx, %rcx
    00000003: 	movq	%rdx, %r8
    00000006: 	movsbl	%sil, %r9d
    0000000a: 	shrq	$0x3f, %rcx
    0000000e: 	leaq	(%rcx,%rdx), %rdx
    00000012: 	sarq	%rdx
    00000015: 	leaq	(%rdi,%rdx), %rax
    00000019: 	cmpb	%sil, (%rax)
    0000001c: 	jge	.Ltmp1154 # Offset: 28
    0000001e: 	leaq	0x1(%rdx), %rcx
    00000022: 	addq	$0x1, %rax
    00000026: 	subq	%rcx, %r8
    00000029: 	je	.Ltmp1155 # Offset: 41
    0000002b: 	movq	%r8, %rdx
    0000002e: 	movl	%r9d, %esi
    00000031: 	movq	%rax, %rdi
    00000034: 	jmp	.LBB0207 # Offset: 52
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1154:
    00000040: 	testq	%rdx, %rdx
    00000043: 	jne	.Ltmp1156 # Offset: 67
    00000045: 	movq	%rdi, %rax
.Ltmp1155:
    00000048: 	retq # Offset: 72
    00000049: 	nopl	(%rax) # Size: 7
.Ltmp1156:
    00000050: 	movl	%r9d, %esi
    00000053: 	jmp	.LBB0207 # Offset: 83
DWARF CFI Instructions:
    <empty>
End of Function "_Z23lower_bound_recur_innerIPaalET_S1_T0_T1_.part.0/1(*2)"

Binary Function "_Z23upper_bound_recur_innerIPfflET_S1_T0_T1_.part.0/1(*2)" after disassembly {
  All names   : _Z23upper_bound_recur_innerIPfflET_S1_T0_T1_.part.0/1
                _Z23upper_bound_recur_innerIPfflET_S1_T0_T1_.part.0/binary_search.cpp/1
  Number      : 209
  State       : disassembled
  Address     : 0x7010
  Size        : 0x45
  MaxSize     : 0x50
  Offset      : 0x7010
  Section     : .text
  Orc Section : .local.text._Z23upper_bound_recur_innerIPfflET_S1_T0_T1_.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0208:
    00000000: 	movq	%rdi, %rax
.Ltmp1159:
    00000003: 	movq	%rsi, %rdx
    00000006: 	shrq	$0x3f, %rdx
    0000000a: 	addq	%rsi, %rdx
    0000000d: 	sarq	%rdx
    00000010: 	leaq	(%rax,%rdx,4), %rcx
    00000014: 	movss	(%rcx), %xmm1
    00000018: 	comiss	%xmm0, %xmm1
    0000001b: 	jbe	.Ltmp1157 # Offset: 27
    0000001d: 	testq	%rdx, %rdx
    00000020: 	jne	.Ltmp1158 # Offset: 32
    00000022: 	retq # Offset: 34
    00000023: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1157:
    00000028: 	leaq	0x4(%rcx), %rax
    0000002c: 	leaq	0x1(%rdx), %rcx
    00000030: 	subq	%rcx, %rsi
    00000033: 	movq	%rsi, %rdx
    00000036: 	jne	.Ltmp1158 # Offset: 54
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
.Ltmp1158:
    00000040: 	movq	%rdx, %rsi
    00000043: 	jmp	.Ltmp1159 # Offset: 67
DWARF CFI Instructions:
    <empty>
End of Function "_Z23upper_bound_recur_innerIPfflET_S1_T0_T1_.part.0/1(*2)"

Binary Function "_Z23upper_bound_recur_innerIPiilET_S1_T0_T1_.part.0/1(*2)" after disassembly {
  All names   : _Z23upper_bound_recur_innerIPiilET_S1_T0_T1_.part.0/1
                _Z23upper_bound_recur_innerIPiilET_S1_T0_T1_.part.0/binary_search.cpp/1
  Number      : 210
  State       : disassembled
  Address     : 0x7060
  Size        : 0x3d
  MaxSize     : 0x40
  Offset      : 0x7060
  Section     : .text
  Orc Section : .local.text._Z23upper_bound_recur_innerIPiilET_S1_T0_T1_.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0209:
    00000000: 	movq	%rdi, %rax
.Ltmp1162:
    00000003: 	movq	%rdx, %rcx
    00000006: 	shrq	$0x3f, %rcx
    0000000a: 	addq	%rdx, %rcx
    0000000d: 	sarq	%rcx
    00000010: 	leaq	(%rax,%rcx,4), %rdi
    00000014: 	cmpl	%esi, (%rdi)
    00000016: 	jle	.Ltmp1160 # Offset: 22
    00000018: 	testq	%rcx, %rcx
    0000001b: 	jne	.Ltmp1161 # Offset: 27
    0000001d: 	retq # Offset: 29
    0000001e: 	nop # Size: 2
.Ltmp1160:
    00000020: 	leaq	0x4(%rdi), %rax
    00000024: 	leaq	0x1(%rcx), %rdi
    00000028: 	subq	%rdi, %rdx
    0000002b: 	movq	%rdx, %rcx
    0000002e: 	jne	.Ltmp1161 # Offset: 46
    00000030: 	retq # Offset: 48
    00000031: 	nopl	(%rax) # Size: 7
.Ltmp1161:
    00000038: 	movq	%rcx, %rdx
    0000003b: 	jmp	.Ltmp1162 # Offset: 59
DWARF CFI Instructions:
    <empty>
End of Function "_Z23upper_bound_recur_innerIPiilET_S1_T0_T1_.part.0/1(*2)"

Binary Function "_Z23lower_bound_recur_innerIPfflET_S1_T0_T1_.part.0/1(*2)" after disassembly {
  All names   : _Z23lower_bound_recur_innerIPfflET_S1_T0_T1_.part.0/1
                _Z23lower_bound_recur_innerIPfflET_S1_T0_T1_.part.0/binary_search.cpp/1
  Number      : 211
  State       : disassembled
  Address     : 0x70a0
  Size        : 0x45
  MaxSize     : 0x50
  Offset      : 0x70a0
  Section     : .text
  Orc Section : .local.text._Z23lower_bound_recur_innerIPfflET_S1_T0_T1_.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0210:
    00000000: 	movq	%rdi, %rax
.Ltmp1165:
    00000003: 	movq	%rsi, %rdx
    00000006: 	shrq	$0x3f, %rdx
    0000000a: 	addq	%rsi, %rdx
    0000000d: 	sarq	%rdx
    00000010: 	leaq	(%rax,%rdx,4), %rcx
    00000014: 	comiss	(%rcx), %xmm0
    00000017: 	jbe	.Ltmp1163 # Offset: 23
    00000019: 	leaq	0x4(%rcx), %rax
    0000001d: 	leaq	0x1(%rdx), %rcx
    00000021: 	subq	%rcx, %rsi
    00000024: 	movq	%rsi, %rdx
    00000027: 	jne	.Ltmp1164 # Offset: 39
    00000029: 	retq # Offset: 41
    0000002a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1163:
    00000030: 	testq	%rdx, %rdx
    00000033: 	jne	.Ltmp1164 # Offset: 51
    00000035: 	retq # Offset: 53
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1164:
    00000040: 	movq	%rdx, %rsi
    00000043: 	jmp	.Ltmp1165 # Offset: 67
DWARF CFI Instructions:
    <empty>
End of Function "_Z23lower_bound_recur_innerIPfflET_S1_T0_T1_.part.0/1(*2)"

Binary Function "_Z23lower_bound_recur_innerIPiilET_S1_T0_T1_.part.0/1(*2)" after disassembly {
  All names   : _Z23lower_bound_recur_innerIPiilET_S1_T0_T1_.part.0/1
                _Z23lower_bound_recur_innerIPiilET_S1_T0_T1_.part.0/binary_search.cpp/1
  Number      : 212
  State       : disassembled
  Address     : 0x70f0
  Size        : 0x45
  MaxSize     : 0x50
  Offset      : 0x70f0
  Section     : .text
  Orc Section : .local.text._Z23lower_bound_recur_innerIPiilET_S1_T0_T1_.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0211:
    00000000: 	movq	%rdi, %rax
.Ltmp1168:
    00000003: 	movq	%rdx, %rcx
    00000006: 	shrq	$0x3f, %rcx
    0000000a: 	addq	%rdx, %rcx
    0000000d: 	sarq	%rcx
    00000010: 	leaq	(%rax,%rcx,4), %rdi
    00000014: 	cmpl	%esi, (%rdi)
    00000016: 	jge	.Ltmp1166 # Offset: 22
    00000018: 	leaq	0x4(%rdi), %rax
    0000001c: 	leaq	0x1(%rcx), %rdi
    00000020: 	subq	%rdi, %rdx
    00000023: 	movq	%rdx, %rcx
    00000026: 	jne	.Ltmp1167 # Offset: 38
    00000028: 	retq # Offset: 40
    00000029: 	nopl	(%rax) # Size: 7
.Ltmp1166:
    00000030: 	testq	%rcx, %rcx
    00000033: 	jne	.Ltmp1167 # Offset: 51
    00000035: 	retq # Offset: 53
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1167:
    00000040: 	movq	%rcx, %rdx
    00000043: 	jmp	.Ltmp1168 # Offset: 67
DWARF CFI Instructions:
    <empty>
End of Function "_Z23lower_bound_recur_innerIPiilET_S1_T0_T1_.part.0/1(*2)"

Binary Function "_Z23upper_bound_recur_innerIPttlET_S1_T0_T1_.part.0/1(*2)" after disassembly {
  All names   : _Z23upper_bound_recur_innerIPttlET_S1_T0_T1_.part.0/1
                _Z23upper_bound_recur_innerIPttlET_S1_T0_T1_.part.0/binary_search.cpp/1
  Number      : 213
  State       : disassembled
  Address     : 0x7140
  Size        : 0x4c
  MaxSize     : 0x50
  Offset      : 0x7140
  Section     : .text
  Orc Section : .local.text._Z23upper_bound_recur_innerIPttlET_S1_T0_T1_.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0212:
    00000000: 	movq	%rdx, %rcx
    00000003: 	movzwl	%si, %r9d
    00000007: 	shrq	$0x3f, %rcx
    0000000b: 	addq	%rdx, %rcx
    0000000e: 	movq	%rcx, %r8
    00000011: 	andq	$-0x2, %rcx
    00000015: 	addq	%rdi, %rcx
    00000018: 	sarq	%r8
    0000001b: 	cmpw	%si, (%rcx)
    0000001e: 	jbe	.Ltmp1169 # Offset: 30
    00000020: 	testq	%r8, %r8
    00000023: 	je	.Ltmp1170 # Offset: 35
    00000025: 	movq	%r8, %rdx
    00000028: 	movl	%r9d, %esi
    0000002b: 	jmp	.LBB0212 # Offset: 43
    0000002d: 	nopl	(%rax) # Size: 3
.Ltmp1169:
    00000030: 	addq	$0x1, %r8
    00000034: 	leaq	0x2(%rcx), %rax
    00000038: 	subq	%r8, %rdx
    0000003b: 	je	.Ltmp1171 # Offset: 59
    0000003d: 	movl	%r9d, %esi
    00000040: 	movq	%rax, %rdi
    00000043: 	jmp	.LBB0212 # Offset: 67
    00000045: 	nopl	(%rax) # Size: 3
.Ltmp1170:
    00000048: 	movq	%rdi, %rax
.Ltmp1171:
    0000004b: 	retq # Offset: 75
DWARF CFI Instructions:
    <empty>
End of Function "_Z23upper_bound_recur_innerIPttlET_S1_T0_T1_.part.0/1(*2)"

Binary Function "_Z23lower_bound_recur_innerIPttlET_S1_T0_T1_.part.0/1(*2)" after disassembly {
  All names   : _Z23lower_bound_recur_innerIPttlET_S1_T0_T1_.part.0/1
                _Z23lower_bound_recur_innerIPttlET_S1_T0_T1_.part.0/binary_search.cpp/1
  Number      : 214
  State       : disassembled
  Address     : 0x7190
  Size        : 0x50
  MaxSize     : 0x50
  Offset      : 0x7190
  Section     : .text
  Orc Section : .local.text._Z23lower_bound_recur_innerIPttlET_S1_T0_T1_.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0213:
    00000000: 	movq	%rdx, %rcx
    00000003: 	movzwl	%si, %r9d
    00000007: 	shrq	$0x3f, %rcx
    0000000b: 	addq	%rdx, %rcx
    0000000e: 	movq	%rcx, %r8
    00000011: 	andq	$-0x2, %rcx
    00000015: 	addq	%rdi, %rcx
    00000018: 	sarq	%r8
    0000001b: 	cmpw	%si, (%rcx)
    0000001e: 	jae	.Ltmp1172 # Offset: 30
    00000020: 	addq	$0x1, %r8
    00000024: 	leaq	0x2(%rcx), %rax
    00000028: 	subq	%r8, %rdx
    0000002b: 	je	.Ltmp1173 # Offset: 43
    0000002d: 	movl	%r9d, %esi
    00000030: 	movq	%rax, %rdi
    00000033: 	jmp	.LBB0213 # Offset: 51
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp1172:
    00000038: 	testq	%r8, %r8
    0000003b: 	jne	.Ltmp1174 # Offset: 59
    0000003d: 	movq	%rdi, %rax
.Ltmp1173:
    00000040: 	retq # Offset: 64
    00000041: 	nopl	(%rax) # Size: 7
.Ltmp1174:
    00000048: 	movq	%r8, %rdx
    0000004b: 	movl	%r9d, %esi
    0000004e: 	jmp	.LBB0213 # Offset: 78
DWARF CFI Instructions:
    <empty>
End of Function "_Z23lower_bound_recur_innerIPttlET_S1_T0_T1_.part.0/1(*2)"

Binary Function "_Z24binarysearch_recur_innerIPaalEbT_T0_T1_.part.0/1(*2)" after disassembly {
  All names   : _Z24binarysearch_recur_innerIPaalEbT_T0_T1_.part.0/1
                _Z24binarysearch_recur_innerIPaalEbT_T0_T1_.part.0/binary_search.cpp/1
  Number      : 215
  State       : disassembled
  Address     : 0x71e0
  Size        : 0x4a
  MaxSize     : 0x50
  Offset      : 0x71e0
  Section     : .text
  Orc Section : .local.text._Z24binarysearch_recur_innerIPaalEbT_T0_T1_.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0214:
    00000000: 	movq	%rdx, %r8
    00000003: 	shrq	$0x3f, %r8
    00000007: 	addq	%rdx, %r8
    0000000a: 	sarq	%r8
    0000000d: 	leaq	(%rdi,%r8), %rax
    00000011: 	cmpb	%sil, (%rax)
    00000014: 	jl	.Ltmp1175 # Offset: 20
    00000016: 	movl	$0x1, %eax
    0000001b: 	jg	.Ltmp1176 # Offset: 27
    0000001d: 	retq # Offset: 29
    0000001e: 	nop # Size: 2
.Ltmp1176:
    00000020: 	testq	%r8, %r8
    00000023: 	je	.Ltmp1177 # Offset: 35
    00000025: 	movsbl	%sil, %esi
    00000029: 	movq	%r8, %rdx
    0000002c: 	jmp	.LBB0214 # Offset: 44
    0000002e: 	nop # Size: 2
.Ltmp1175:
    00000030: 	addq	$0x1, %r8
    00000034: 	subq	%r8, %rdx
    00000037: 	jne	.Ltmp1178 # Offset: 55
.Ltmp1177:
    00000039: 	xorl	%eax, %eax
    0000003b: 	retq # Offset: 59
    0000003c: 	nopl	(%rax) # Size: 4
.Ltmp1178:
    00000040: 	movsbl	%sil, %esi
    00000044: 	leaq	0x1(%rax), %rdi
    00000048: 	jmp	.LBB0214 # Offset: 72
DWARF CFI Instructions:
    <empty>
End of Function "_Z24binarysearch_recur_innerIPaalEbT_T0_T1_.part.0/1(*2)"

Binary Function "_Z24binarysearch_recur_innerIPttlEbT_T0_T1_.part.0/1(*2)" after disassembly {
  All names   : _Z24binarysearch_recur_innerIPttlEbT_T0_T1_.part.0/1
                _Z24binarysearch_recur_innerIPttlEbT_T0_T1_.part.0/binary_search.cpp/1
  Number      : 216
  State       : disassembled
  Address     : 0x7230
  Size        : 0x51
  MaxSize     : 0x60
  Offset      : 0x7230
  Section     : .text
  Orc Section : .local.text._Z24binarysearch_recur_innerIPttlEbT_T0_T1_.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0215:
    00000000: 	movq	%rdx, %rax
    00000003: 	shrq	$0x3f, %rax
    00000007: 	addq	%rdx, %rax
    0000000a: 	movq	%rax, %r8
    0000000d: 	andq	$-0x2, %rax
    00000011: 	addq	%rdi, %rax
    00000014: 	sarq	%r8
    00000017: 	cmpw	%si, (%rax)
    0000001a: 	jb	.Ltmp1179 # Offset: 26
    0000001c: 	movl	$0x1, %eax
    00000021: 	ja	.Ltmp1180 # Offset: 33
    00000023: 	retq # Offset: 35
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp1180:
    00000028: 	testq	%r8, %r8
    0000002b: 	je	.Ltmp1181 # Offset: 43
    0000002d: 	movzwl	%si, %esi
    00000030: 	movq	%r8, %rdx
    00000033: 	jmp	.LBB0215 # Offset: 51
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp1179:
    00000038: 	addq	$0x1, %r8
    0000003c: 	subq	%r8, %rdx
    0000003f: 	jne	.Ltmp1182 # Offset: 63
.Ltmp1181:
    00000041: 	xorl	%eax, %eax
    00000043: 	retq # Offset: 67
    00000044: 	nopl	(%rax) # Size: 4
.Ltmp1182:
    00000048: 	movzwl	%si, %esi
    0000004b: 	leaq	0x2(%rax), %rdi
    0000004f: 	jmp	.LBB0215 # Offset: 79
DWARF CFI Instructions:
    <empty>
End of Function "_Z24binarysearch_recur_innerIPttlEbT_T0_T1_.part.0/1(*2)"

Binary Function "_Z24binarysearch_recur_innerIPiilEbT_T0_T1_.part.0/1(*2)" after disassembly {
  All names   : _Z24binarysearch_recur_innerIPiilEbT_T0_T1_.part.0/1
                _Z24binarysearch_recur_innerIPiilEbT_T0_T1_.part.0/binary_search.cpp/1
  Number      : 217
  State       : disassembled
  Address     : 0x7290
  Size        : 0x55
  MaxSize     : 0x60
  Offset      : 0x7290
  Section     : .text
  Orc Section : .local.text._Z24binarysearch_recur_innerIPiilEbT_T0_T1_.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0216:
    00000000: 	movq	%rdx, %rax
    00000003: 	shrq	$0x3f, %rax
    00000007: 	addq	%rdx, %rax
    0000000a: 	sarq	%rax
    0000000d: 	leaq	(%rdi,%rax,4), %rcx
    00000011: 	cmpl	%esi, (%rcx)
    00000013: 	jl	.Ltmp1183 # Offset: 19
    00000015: 	jg	.Ltmp1184 # Offset: 21
    00000017: 	movl	$0x1, %eax
    0000001c: 	retq # Offset: 28
    0000001d: 	nopl	(%rax) # Size: 3
.Ltmp1183:
    00000020: 	addq	$0x1, %rax
    00000024: 	subq	%rax, %rdx
    00000027: 	jne	.Ltmp1185 # Offset: 39
    00000029: 	xorl	%eax, %eax
    0000002b: 	retq # Offset: 43
    0000002c: 	nopl	(%rax) # Size: 4
.Ltmp1184:
    00000030: 	testq	%rax, %rax
    00000033: 	jne	.Ltmp1186 # Offset: 51
    00000035: 	retq # Offset: 53
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1185:
    00000040: 	leaq	0x4(%rcx), %rdi
    00000044: 	jmp	.LBB0216 # Offset: 68
    00000046: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1186:
    00000050: 	movq	%rax, %rdx
    00000053: 	jmp	.LBB0216 # Offset: 83
DWARF CFI Instructions:
    <empty>
End of Function "_Z24binarysearch_recur_innerIPiilEbT_T0_T1_.part.0/1(*2)"

Binary Function "_Z24binarysearch_recur_innerIPfflEbT_T0_T1_.part.0/1(*2)" after disassembly {
  All names   : _Z24binarysearch_recur_innerIPfflEbT_T0_T1_.part.0/1
                _Z24binarysearch_recur_innerIPfflEbT_T0_T1_.part.0/binary_search.cpp/1
  Number      : 218
  State       : disassembled
  Address     : 0x72f0
  Size        : 0x55
  MaxSize     : 0x60
  Offset      : 0x72f0
  Section     : .text
  Orc Section : .local.text._Z24binarysearch_recur_innerIPfflEbT_T0_T1_.part.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0217:
    00000000: 	movq	%rsi, %rax
    00000003: 	shrq	$0x3f, %rax
    00000007: 	addq	%rsi, %rax
    0000000a: 	sarq	%rax
    0000000d: 	leaq	(%rdi,%rax,4), %rdx
    00000011: 	movss	(%rdx), %xmm1
    00000015: 	comiss	%xmm1, %xmm0
    00000018: 	ja	.Ltmp1187 # Offset: 24
    0000001a: 	comiss	%xmm0, %xmm1
    0000001d: 	ja	.Ltmp1188 # Offset: 29
    0000001f: 	movl	$0x1, %eax
    00000024: 	retq # Offset: 36
    00000025: 	nopl	(%rax) # Size: 3
.Ltmp1187:
    00000028: 	addq	$0x1, %rax
    0000002c: 	subq	%rax, %rsi
    0000002f: 	jne	.Ltmp1189 # Offset: 47
    00000031: 	xorl	%eax, %eax
    00000033: 	retq # Offset: 51
    00000034: 	nopl	(%rax) # Size: 4
.Ltmp1188:
    00000038: 	testq	%rax, %rax
    0000003b: 	jne	.Ltmp1190 # Offset: 59
    0000003d: 	retq # Offset: 61
    0000003e: 	nop # Size: 2
.Ltmp1189:
    00000040: 	leaq	0x4(%rdx), %rdi
    00000044: 	jmp	.LBB0217 # Offset: 68
    00000046: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1190:
    00000050: 	movq	%rax, %rsi
    00000053: 	jmp	.LBB0217 # Offset: 83
DWARF CFI Instructions:
    <empty>
End of Function "_Z24binarysearch_recur_innerIPfflEbT_T0_T1_.part.0/1(*2)"

Binary Function "_Z13binarysearch3IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEbT_S7_T0_" after disassembly {
  Number      : 219
  State       : disassembled
  Address     : 0x7350
  Size        : 0x55
  MaxSize     : 0x60
  Offset      : 0x7350
  Section     : .text
  Orc Section : .local.text._Z13binarysearch3IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEbT_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0218:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rcx
    00000007: 	subq	%rdi, %rcx
    0000000a: 	sarq	$0x2, %rcx
    0000000e: 	nop # Size: 2
.Ltmp1195:
    00000010: 	testq	%rcx, %rcx
    00000013: 	je	.Ltmp1191 # Offset: 19
.Ltmp1193:
    00000015: 	movq	%rcx, %rax
    00000018: 	shrq	$0x3f, %rax
    0000001c: 	addq	%rcx, %rax
    0000001f: 	sarq	%rax
    00000022: 	leaq	(%rdi,%rax,4), %r8
    00000026: 	cmpl	(%r8), %edx
    00000029: 	jle	.Ltmp1192 # Offset: 41
    0000002b: 	addq	$0x1, %rax
    0000002f: 	leaq	0x4(%r8), %rdi
    00000033: 	subq	%rax, %rcx
    00000036: 	testq	%rcx, %rcx
    00000039: 	jne	.Ltmp1193 # Offset: 57
.Ltmp1191:
    0000003b: 	xorl	%eax, %eax
    0000003d: 	cmpq	%rdi, %rsi
    00000040: 	je	.Ltmp1194 # Offset: 64
    00000042: 	cmpl	%edx, (%rdi)
    00000044: 	sete	%al
.Ltmp1194:
    00000047: 	retq # Offset: 71
    00000048: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1192:
    00000050: 	movq	%rax, %rcx
    00000053: 	jmp	.Ltmp1195 # Offset: 83
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch3IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEbT_S7_T0_"

Binary Function "_Z13binarysearch3IN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEbT_S7_T0_" after disassembly {
  Number      : 220
  State       : disassembled
  Address     : 0x73b0
  Size        : 0x55
  MaxSize     : 0x60
  Offset      : 0x73b0
  Section     : .text
  Orc Section : .local.text._Z13binarysearch3IN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEbT_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0219:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rdx
    00000007: 	subq	%rdi, %rdx
    0000000a: 	sarq	$0x2, %rdx
    0000000e: 	nop # Size: 2
.Ltmp1200:
    00000010: 	testq	%rdx, %rdx
    00000013: 	je	.Ltmp1196 # Offset: 19
.Ltmp1198:
    00000015: 	movq	%rdx, %rax
    00000018: 	shrq	$0x3f, %rax
    0000001c: 	addq	%rdx, %rax
    0000001f: 	sarq	%rax
    00000022: 	leaq	(%rdi,%rax,4), %rcx
    00000026: 	comiss	(%rcx), %xmm0
    00000029: 	jbe	.Ltmp1197 # Offset: 41
    0000002b: 	addq	$0x1, %rax
    0000002f: 	leaq	0x4(%rcx), %rdi
    00000033: 	subq	%rax, %rdx
    00000036: 	testq	%rdx, %rdx
    00000039: 	jne	.Ltmp1198 # Offset: 57
.Ltmp1196:
    0000003b: 	xorl	%eax, %eax
    0000003d: 	cmpq	%rdi, %rsi
    00000040: 	je	.Ltmp1199 # Offset: 64
    00000042: 	ucomiss	(%rdi), %xmm0
    00000045: 	setnp	%dl
    00000048: 	cmovel	%edx, %eax
.Ltmp1199:
    0000004b: 	retq # Offset: 75
    0000004c: 	nopl	(%rax) # Size: 4
.Ltmp1197:
    00000050: 	movq	%rax, %rdx
    00000053: 	jmp	.Ltmp1200 # Offset: 83
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch3IN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEbT_S7_T0_"

Binary Function "_Z13binarysearch3IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtEbT_S7_T0_" after disassembly {
  Number      : 221
  State       : disassembled
  Address     : 0x7410
  Size        : 0x65
  MaxSize     : 0x70
  Offset      : 0x7410
  Section     : .text
  Orc Section : .local.text._Z13binarysearch3IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtEbT_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0220:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rcx
    00000007: 	movq	%rsi, %r9
    0000000a: 	movl	%edx, %r8d
    0000000d: 	subq	%rdi, %rcx
    00000010: 	sarq	%rcx
    00000013: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1205:
    00000018: 	testq	%rcx, %rcx
    0000001b: 	je	.Ltmp1201 # Offset: 27
.Ltmp1203:
    0000001d: 	movq	%rcx, %rax
    00000020: 	shrq	$0x3f, %rax
    00000024: 	addq	%rcx, %rax
    00000027: 	movq	%rax, %rsi
    0000002a: 	andq	$-0x2, %rax
    0000002e: 	addq	%rdi, %rax
    00000031: 	sarq	%rsi
    00000034: 	cmpw	(%rax), %r8w
    00000038: 	jbe	.Ltmp1202 # Offset: 56
    0000003a: 	addq	$0x1, %rsi
    0000003e: 	leaq	0x2(%rax), %rdi
    00000042: 	subq	%rsi, %rcx
    00000045: 	testq	%rcx, %rcx
    00000048: 	jne	.Ltmp1203 # Offset: 72
.Ltmp1201:
    0000004a: 	xorl	%eax, %eax
    0000004c: 	cmpq	%rdi, %r9
    0000004f: 	je	.Ltmp1204 # Offset: 79
    00000051: 	cmpw	%dx, (%rdi)
    00000054: 	sete	%al
.Ltmp1204:
    00000057: 	retq # Offset: 87
    00000058: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1202:
    00000060: 	movq	%rsi, %rcx
    00000063: 	jmp	.Ltmp1205 # Offset: 99
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch3IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtEbT_S7_T0_"

Binary Function "_Z14std_lowerboundISt14_List_iteratorIaEaET_S2_S2_T0_" after disassembly {
  Number      : 222
  State       : disassembled
  Address     : 0x7480
  Size        : 0x6a
  MaxSize     : 0x70
  Offset      : 0x7480
  Section     : .text
  Orc Section : .local.text._Z14std_lowerboundISt14_List_iteratorIaEaET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0221:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp1206 # Offset: 10
    0000000c: 	movq	%rdi, %rcx
    0000000f: 	xorl	%r8d, %r8d
    00000012: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1207:
    00000018: 	movq	(%rcx), %rcx
    0000001b: 	addq	$0x1, %r8
    0000001f: 	cmpq	%rsi, %rcx
    00000022: 	jne	.Ltmp1207 # Offset: 34
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp1213:
    00000028: 	testq	%r8, %r8
    0000002b: 	jle	.Ltmp1208 # Offset: 43
.Ltmp1212:
    0000002d: 	movq	%r8, %r9
    00000030: 	movq	%rax, %rsi
    00000033: 	sarq	%r9
    00000036: 	je	.Ltmp1209 # Offset: 54
    00000038: 	leaq	-0x1(%r9), %rcx
    0000003c: 	nopl	(%rax) # Size: 4
.Ltmp1210:
    00000040: 	movq	(%rsi), %rsi
    00000043: 	subq	$0x1, %rcx
    00000047: 	jae	.Ltmp1210 # Offset: 71
.Ltmp1209:
    00000049: 	cmpb	%dl, 0x10(%rsi)
    0000004c: 	jge	.Ltmp1211 # Offset: 76
    0000004e: 	subq	%r9, %r8
    00000051: 	movq	(%rsi), %rax
    00000054: 	subq	$0x1, %r8
    00000058: 	testq	%r8, %r8
    0000005b: 	jg	.Ltmp1212 # Offset: 91
.Ltmp1208:
    0000005d: 	retq # Offset: 93
    0000005e: 	nop # Size: 2
.Ltmp1211:
    00000060: 	movq	%r9, %r8
    00000063: 	jmp	.Ltmp1213 # Offset: 99
.Ltmp1206:
    00000065: 	xorl	%r8d, %r8d
    00000068: 	jmp	.Ltmp1213 # Offset: 104
DWARF CFI Instructions:
    <empty>
End of Function "_Z14std_lowerboundISt14_List_iteratorIaEaET_S2_S2_T0_"

Binary Function "_Z14std_lowerboundISt14_List_iteratorItEtET_S2_S2_T0_" after disassembly {
  Number      : 223
  State       : disassembled
  Address     : 0x74f0
  Size        : 0x6a
  MaxSize     : 0x70
  Offset      : 0x74f0
  Section     : .text
  Orc Section : .local.text._Z14std_lowerboundISt14_List_iteratorItEtET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0222:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp1214 # Offset: 10
    0000000c: 	movq	%rdi, %rcx
    0000000f: 	xorl	%r8d, %r8d
    00000012: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1215:
    00000018: 	movq	(%rcx), %rcx
    0000001b: 	addq	$0x1, %r8
    0000001f: 	cmpq	%rsi, %rcx
    00000022: 	jne	.Ltmp1215 # Offset: 34
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp1221:
    00000028: 	testq	%r8, %r8
    0000002b: 	jle	.Ltmp1216 # Offset: 43
.Ltmp1220:
    0000002d: 	movq	%r8, %r9
    00000030: 	movq	%rax, %rsi
    00000033: 	sarq	%r9
    00000036: 	je	.Ltmp1217 # Offset: 54
    00000038: 	leaq	-0x1(%r9), %rcx
    0000003c: 	nopl	(%rax) # Size: 4
.Ltmp1218:
    00000040: 	movq	(%rsi), %rsi
    00000043: 	subq	$0x1, %rcx
    00000047: 	jae	.Ltmp1218 # Offset: 71
.Ltmp1217:
    00000049: 	cmpw	%dx, 0x10(%rsi)
    0000004d: 	jae	.Ltmp1219 # Offset: 77
    0000004f: 	subq	%r9, %r8
    00000052: 	movq	(%rsi), %rax
    00000055: 	subq	$0x1, %r8
    00000059: 	testq	%r8, %r8
    0000005c: 	jg	.Ltmp1220 # Offset: 92
.Ltmp1216:
    0000005e: 	retq # Offset: 94
    0000005f: 	nop # Size: 1
.Ltmp1219:
    00000060: 	movq	%r9, %r8
    00000063: 	jmp	.Ltmp1221 # Offset: 99
.Ltmp1214:
    00000065: 	xorl	%r8d, %r8d
    00000068: 	jmp	.Ltmp1221 # Offset: 104
DWARF CFI Instructions:
    <empty>
End of Function "_Z14std_lowerboundISt14_List_iteratorItEtET_S2_S2_T0_"

Binary Function "_Z14std_lowerboundISt14_List_iteratorIiEiET_S2_S2_T0_" after disassembly {
  Number      : 224
  State       : disassembled
  Address     : 0x7560
  Size        : 0x6a
  MaxSize     : 0x70
  Offset      : 0x7560
  Section     : .text
  Orc Section : .local.text._Z14std_lowerboundISt14_List_iteratorIiEiET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0223:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp1222 # Offset: 10
    0000000c: 	movq	%rdi, %rcx
    0000000f: 	xorl	%r8d, %r8d
    00000012: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1223:
    00000018: 	movq	(%rcx), %rcx
    0000001b: 	addq	$0x1, %r8
    0000001f: 	cmpq	%rsi, %rcx
    00000022: 	jne	.Ltmp1223 # Offset: 34
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp1229:
    00000028: 	testq	%r8, %r8
    0000002b: 	jle	.Ltmp1224 # Offset: 43
.Ltmp1228:
    0000002d: 	movq	%r8, %r9
    00000030: 	movq	%rax, %rsi
    00000033: 	sarq	%r9
    00000036: 	je	.Ltmp1225 # Offset: 54
    00000038: 	leaq	-0x1(%r9), %rcx
    0000003c: 	nopl	(%rax) # Size: 4
.Ltmp1226:
    00000040: 	movq	(%rsi), %rsi
    00000043: 	subq	$0x1, %rcx
    00000047: 	jae	.Ltmp1226 # Offset: 71
.Ltmp1225:
    00000049: 	cmpl	%edx, 0x10(%rsi)
    0000004c: 	jge	.Ltmp1227 # Offset: 76
    0000004e: 	subq	%r9, %r8
    00000051: 	movq	(%rsi), %rax
    00000054: 	subq	$0x1, %r8
    00000058: 	testq	%r8, %r8
    0000005b: 	jg	.Ltmp1228 # Offset: 91
.Ltmp1224:
    0000005d: 	retq # Offset: 93
    0000005e: 	nop # Size: 2
.Ltmp1227:
    00000060: 	movq	%r9, %r8
    00000063: 	jmp	.Ltmp1229 # Offset: 99
.Ltmp1222:
    00000065: 	xorl	%r8d, %r8d
    00000068: 	jmp	.Ltmp1229 # Offset: 104
DWARF CFI Instructions:
    <empty>
End of Function "_Z14std_lowerboundISt14_List_iteratorIiEiET_S2_S2_T0_"

Binary Function "_Z14std_lowerboundISt14_List_iteratorIfEfET_S2_S2_T0_" after disassembly {
  Number      : 225
  State       : disassembled
  Address     : 0x75d0
  Size        : 0x6a
  MaxSize     : 0x70
  Offset      : 0x75d0
  Section     : .text
  Orc Section : .local.text._Z14std_lowerboundISt14_List_iteratorIfEfET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0224:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp1230 # Offset: 10
    0000000c: 	movq	%rdi, %rdx
    0000000f: 	xorl	%r8d, %r8d
    00000012: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1231:
    00000018: 	movq	(%rdx), %rdx
    0000001b: 	addq	$0x1, %r8
    0000001f: 	cmpq	%rsi, %rdx
    00000022: 	jne	.Ltmp1231 # Offset: 34
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp1237:
    00000028: 	testq	%r8, %r8
    0000002b: 	jle	.Ltmp1232 # Offset: 43
.Ltmp1236:
    0000002d: 	movq	%r8, %rsi
    00000030: 	movq	%rax, %rcx
    00000033: 	sarq	%rsi
    00000036: 	je	.Ltmp1233 # Offset: 54
    00000038: 	leaq	-0x1(%rsi), %rdx
    0000003c: 	nopl	(%rax) # Size: 4
.Ltmp1234:
    00000040: 	movq	(%rcx), %rcx
    00000043: 	subq	$0x1, %rdx
    00000047: 	jae	.Ltmp1234 # Offset: 71
.Ltmp1233:
    00000049: 	comiss	0x10(%rcx), %xmm0
    0000004d: 	jbe	.Ltmp1235 # Offset: 77
    0000004f: 	subq	%rsi, %r8
    00000052: 	movq	(%rcx), %rax
    00000055: 	subq	$0x1, %r8
    00000059: 	testq	%r8, %r8
    0000005c: 	jg	.Ltmp1236 # Offset: 92
.Ltmp1232:
    0000005e: 	retq # Offset: 94
    0000005f: 	nop # Size: 1
.Ltmp1235:
    00000060: 	movq	%rsi, %r8
    00000063: 	jmp	.Ltmp1237 # Offset: 99
.Ltmp1230:
    00000065: 	xorl	%r8d, %r8d
    00000068: 	jmp	.Ltmp1237 # Offset: 104
DWARF CFI Instructions:
    <empty>
End of Function "_Z14std_lowerboundISt14_List_iteratorIfEfET_S2_S2_T0_"

Binary Function "_ZNSt5dequeI10one_resultSaIS0_EED1Ev(*2)" after disassembly {
  All names   : _ZNSt5dequeI10one_resultSaIS0_EED1Ev
                _ZNSt5dequeI10one_resultSaIS0_EED2Ev
  Number      : 226
  State       : disassembled
  Address     : 0x7640
  Size        : 0x1f7
  MaxSize     : 0x200
  Offset      : 0x7640
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeI10one_resultSaIS0_EED1Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0225:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x28, %rsp
    00000015: 	movq	0x20(%rdi), %rcx
    00000019: 	movq	0x30(%rdi), %rax
    0000001d: 	movq	0x38(%rdi), %r13
    00000021: 	movq	0x10(%rdi), %rbp
    00000025: 	movq	%rcx, 0x10(%rsp)
    0000002a: 	movq	0x28(%rdi), %rcx
    0000002e: 	movq	%rax, 0x8(%rsp)
    00000033: 	movq	0x48(%rdi), %rax
    00000037: 	leaq	0x8(%rcx), %r12
    0000003b: 	movq	%rcx, 0x18(%rsp)
    00000040: 	movq	%rax, (%rsp)
    00000044: 	cmpq	%r12, %rax
    00000047: 	jbe	.Ltmp1238 # Offset: 71
    00000049: 	nopl	(%rax) # Size: 7
.Ltmp1241:
    00000050: 	movq	(%r12), %r15
    00000054: 	leaq	0x1f8(%r15), %rbx
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1240:
    00000060: 	movq	0x18(%r15), %rdi
    00000064: 	leaq	0x28(%r15), %rdx
    00000068: 	cmpq	%rdx, %rdi
    0000006b: 	je	.Ltmp1239 # Offset: 107
    00000071: 	movq	0x28(%r15), %rax
    00000075: 	addq	$0x38, %r15
    00000079: 	leaq	0x1(%rax), %rsi
    0000007d: 	callq	_ZdlPvm@PLT # Offset: 125
    00000082: 	cmpq	%r15, %rbx
    00000085: 	jne	.Ltmp1240 # Offset: 133
    00000087: 	addq	$0x8, %r12
    0000008b: 	cmpq	%r12, (%rsp)
    0000008f: 	ja	.Ltmp1241 # Offset: 143
.Ltmp1238:
    00000091: 	movq	(%rsp), %rcx
    00000095: 	cmpq	%rcx, 0x18(%rsp)
    0000009a: 	je	.Ltmp1242 # Offset: 154
    000000a0: 	cmpq	0x10(%rsp), %rbp
    000000a5: 	je	.Ltmp1243 # Offset: 165
.Ltmp1246:
    000000a7: 	movq	0x18(%rbp), %rdi
    000000ab: 	leaq	0x28(%rbp), %rax
    000000af: 	cmpq	%rax, %rdi
    000000b2: 	je	.Ltmp1244 # Offset: 178
.Ltmp1245:
    000000b4: 	movq	0x28(%rbp), %rax
    000000b8: 	addq	$0x38, %rbp
    000000bc: 	leaq	0x1(%rax), %rsi
    000000c0: 	callq	_ZdlPvm@PLT # Offset: 192
    000000c5: 	cmpq	%rbp, 0x10(%rsp)
    000000ca: 	je	.Ltmp1243 # Offset: 202
    000000cc: 	movq	0x18(%rbp), %rdi
    000000d0: 	leaq	0x28(%rbp), %rax
    000000d4: 	cmpq	%rax, %rdi
    000000d7: 	jne	.Ltmp1245 # Offset: 215
.Ltmp1244:
    000000d9: 	addq	$0x38, %rbp
    000000dd: 	cmpq	%rbp, 0x10(%rsp)
    000000e2: 	jne	.Ltmp1246 # Offset: 226
    000000e4: 	cmpq	%r13, 0x8(%rsp)
    000000e9: 	je	.Ltmp1247 # Offset: 233
    000000eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1249:
    000000f0: 	movq	0x18(%r13), %rdi
    000000f4: 	leaq	0x28(%r13), %rax
    000000f8: 	cmpq	%rax, %rdi
    000000fb: 	je	.Ltmp1248 # Offset: 251
    000000fd: 	movq	0x28(%r13), %rax
    00000101: 	leaq	0x1(%rax), %rsi
    00000105: 	callq	_ZdlPvm@PLT # Offset: 261
.Ltmp1248:
    0000010a: 	addq	$0x38, %r13
.Ltmp1243:
    0000010e: 	cmpq	%r13, 0x8(%rsp)
    00000113: 	jne	.Ltmp1249 # Offset: 275
.Ltmp1247:
    00000115: 	movq	(%r14), %rdi
    00000118: 	testq	%rdi, %rdi
    0000011b: 	je	.Ltmp1250 # Offset: 283
.Ltmp1256:
    00000121: 	movq	0x48(%r14), %rax
    00000125: 	movq	0x28(%r14), %rbx
    00000129: 	leaq	0x8(%rax), %rbp
    0000012d: 	cmpq	%rbx, %rbp
    00000130: 	jbe	.Ltmp1251 # Offset: 304
    00000132: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1252:
    00000138: 	movq	(%rbx), %rdi
    0000013b: 	movl	$0x1f8, %esi
    00000140: 	addq	$0x8, %rbx
    00000144: 	callq	_ZdlPvm@PLT # Offset: 324
    00000149: 	cmpq	%rbx, %rbp
    0000014c: 	ja	.Ltmp1252 # Offset: 332
    0000014e: 	movq	(%r14), %rdi
.Ltmp1251:
    00000151: 	movq	0x8(%r14), %rsi
    00000155: 	addq	$0x28, %rsp
    00000159: 	popq	%rbx
    0000015a: 	popq	%rbp
    0000015b: 	shlq	$0x3, %rsi
    0000015f: 	popq	%r12
    00000161: 	popq	%r13
    00000163: 	popq	%r14
    00000165: 	popq	%r15
    00000167: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 359
    0000016c: 	nopl	(%rax) # Size: 4
.Ltmp1239:
    00000170: 	addq	$0x38, %r15
    00000174: 	cmpq	%r15, %rbx
    00000177: 	jne	.Ltmp1240 # Offset: 375
    0000017d: 	addq	$0x8, %r12
    00000181: 	cmpq	%r12, (%rsp)
    00000185: 	ja	.Ltmp1241 # Offset: 389
    0000018b: 	jmp	.Ltmp1238 # Offset: 395
.Ltmp1242:
    00000190: 	cmpq	0x8(%rsp), %rbp
    00000195: 	je	.Ltmp1247 # Offset: 405
.Ltmp1255:
    0000019b: 	movq	0x18(%rbp), %rdi
    0000019f: 	leaq	0x28(%rbp), %rax
    000001a3: 	cmpq	%rax, %rdi
    000001a6: 	je	.Ltmp1253 # Offset: 422
.Ltmp1254:
    000001a8: 	movq	0x28(%rbp), %rax
    000001ac: 	addq	$0x38, %rbp
    000001b0: 	leaq	0x1(%rax), %rsi
    000001b4: 	callq	_ZdlPvm@PLT # Offset: 436
    000001b9: 	cmpq	%rbp, 0x8(%rsp)
    000001be: 	je	.Ltmp1247 # Offset: 446
    000001c4: 	movq	0x18(%rbp), %rdi
    000001c8: 	leaq	0x28(%rbp), %rax
    000001cc: 	cmpq	%rax, %rdi
    000001cf: 	jne	.Ltmp1254 # Offset: 463
.Ltmp1253:
    000001d1: 	addq	$0x38, %rbp
    000001d5: 	cmpq	%rbp, 0x8(%rsp)
    000001da: 	jne	.Ltmp1255 # Offset: 474
    000001dc: 	movq	(%r14), %rdi
    000001df: 	testq	%rdi, %rdi
    000001e2: 	jne	.Ltmp1256 # Offset: 482
.Ltmp1250:
    000001e8: 	addq	$0x28, %rsp
    000001ec: 	popq	%rbx
    000001ed: 	popq	%rbp
    000001ee: 	popq	%r12
    000001f0: 	popq	%r13
    000001f2: 	popq	%r14
    000001f4: 	popq	%r15
    000001f6: 	retq # Offset: 502
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeI10one_resultSaIS0_EED1Ev(*2)"

Binary Function "_Z13binarysearch3ISt14_List_iteratorIiEiEbT_S2_T0_" after disassembly {
  Number      : 227
  State       : disassembled
  Address     : 0x7840
  Size        : 0xb8
  MaxSize     : 0xc0
  Offset      : 0x7840
  Section     : .text
  Orc Section : .local.text._Z13binarysearch3ISt14_List_iteratorIiEiEbT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0226:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r9
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp1257 # Offset: 10
    00000010: 	movq	%rdi, %rax
    00000013: 	xorl	%r8d, %r8d
    00000016: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1258:
    00000020: 	movq	(%rax), %rax
    00000023: 	addq	$0x1, %r8
    00000027: 	cmpq	%r9, %rax
    0000002a: 	jne	.Ltmp1258 # Offset: 42
    0000002c: 	nopl	(%rax) # Size: 4
.Ltmp1266:
    00000030: 	testq	%r8, %r8
    00000033: 	je	.Ltmp1259 # Offset: 51
.Ltmp1264:
    00000035: 	movq	%r8, %rsi
    00000038: 	shrq	$0x3f, %rsi
    0000003c: 	addq	%r8, %rsi
    0000003f: 	sarq	%rsi
    00000042: 	cmpq	$0x1, %r8
    00000046: 	jle	.Ltmp1260 # Offset: 70
    00000048: 	leaq	-0x1(%rsi), %rcx
    0000004c: 	movq	%rdi, %rax
    0000004f: 	testq	%rsi, %rsi
    00000052: 	je	.Ltmp1261 # Offset: 82
    00000054: 	nopl	(%rax) # Size: 4
.Ltmp1262:
    00000058: 	movq	(%rax), %rax
    0000005b: 	subq	$0x1, %rcx
    0000005f: 	jae	.Ltmp1262 # Offset: 95
.Ltmp1261:
    00000061: 	cmpl	0x10(%rax), %edx
    00000064: 	jle	.Ltmp1263 # Offset: 100
    00000066: 	addq	$0x1, %rsi
    0000006a: 	movq	(%rax), %rdi
    0000006d: 	subq	%rsi, %r8
    00000070: 	testq	%r8, %r8
    00000073: 	jne	.Ltmp1264 # Offset: 115
.Ltmp1259:
    00000075: 	xorl	%eax, %eax
    00000077: 	cmpq	%rdi, %r9
    0000007a: 	je	.Ltmp1265 # Offset: 122
    0000007c: 	cmpl	%edx, 0x10(%rdi)
    0000007f: 	sete	%al
.Ltmp1265:
    00000082: 	retq # Offset: 130
    00000083: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1263:
    00000088: 	movq	%rsi, %r8
    0000008b: 	jmp	.Ltmp1266 # Offset: 139
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp1260:
    00000090: 	leaq	0x1(%rsi), %rcx
    00000094: 	movq	%rdi, %rax
    00000097: 	testq	%rsi, %rsi
    0000009a: 	je	.Ltmp1261 # Offset: 154
    0000009c: 	nopl	(%rax) # Size: 4
.Ltmp1267:
    000000a0: 	addq	$0x1, %rcx
    000000a4: 	movq	0x8(%rax), %rax
    000000a8: 	cmpq	$0x1, %rcx
    000000ac: 	jne	.Ltmp1267 # Offset: 172
    000000ae: 	jmp	.Ltmp1261 # Offset: 174
.Ltmp1257:
    000000b0: 	xorl	%r8d, %r8d
    000000b3: 	jmp	.Ltmp1266 # Offset: 179
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch3ISt14_List_iteratorIiEiEbT_S2_T0_"

Binary Function "_Z13binarysearch3ISt14_List_iteratorIfEfEbT_S2_T0_" after disassembly {
  Number      : 228
  State       : disassembled
  Address     : 0x7900
  Size        : 0xb0
  MaxSize     : 0xb0
  Offset      : 0x7900
  Section     : .text
  Orc Section : .local.text._Z13binarysearch3ISt14_List_iteratorIfEfEbT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0227:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp1268 # Offset: 7
    0000000d: 	movq	%rdi, %rax
    00000010: 	xorl	%r8d, %r8d
    00000013: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1269:
    00000018: 	movq	(%rax), %rax
    0000001b: 	addq	$0x1, %r8
    0000001f: 	cmpq	%rsi, %rax
    00000022: 	jne	.Ltmp1269 # Offset: 34
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp1277:
    00000028: 	testq	%r8, %r8
    0000002b: 	je	.Ltmp1270 # Offset: 43
.Ltmp1275:
    0000002d: 	movq	%r8, %rcx
    00000030: 	shrq	$0x3f, %rcx
    00000034: 	addq	%r8, %rcx
    00000037: 	sarq	%rcx
    0000003a: 	cmpq	$0x1, %r8
    0000003e: 	jle	.Ltmp1271 # Offset: 62
    00000040: 	leaq	-0x1(%rcx), %rdx
    00000044: 	movq	%rdi, %rax
    00000047: 	testq	%rcx, %rcx
    0000004a: 	je	.Ltmp1272 # Offset: 74
    0000004c: 	nopl	(%rax) # Size: 4
.Ltmp1273:
    00000050: 	movq	(%rax), %rax
    00000053: 	subq	$0x1, %rdx
    00000057: 	jae	.Ltmp1273 # Offset: 87
.Ltmp1272:
    00000059: 	comiss	0x10(%rax), %xmm0
    0000005d: 	jbe	.Ltmp1274 # Offset: 93
    0000005f: 	addq	$0x1, %rcx
    00000063: 	movq	(%rax), %rdi
    00000066: 	subq	%rcx, %r8
    00000069: 	testq	%r8, %r8
    0000006c: 	jne	.Ltmp1275 # Offset: 108
.Ltmp1270:
    0000006e: 	xorl	%eax, %eax
    00000070: 	cmpq	%rdi, %rsi
    00000073: 	je	.Ltmp1276 # Offset: 115
    00000075: 	ucomiss	0x10(%rdi), %xmm0
    00000079: 	setnp	%dl
    0000007c: 	cmovel	%edx, %eax
.Ltmp1276:
    0000007f: 	retq # Offset: 127
.Ltmp1274:
    00000080: 	movq	%rcx, %r8
    00000083: 	jmp	.Ltmp1277 # Offset: 131
    00000085: 	nopl	(%rax) # Size: 3
.Ltmp1271:
    00000088: 	leaq	0x1(%rcx), %rdx
    0000008c: 	movq	%rdi, %rax
    0000008f: 	testq	%rcx, %rcx
    00000092: 	je	.Ltmp1272 # Offset: 146
    00000094: 	nopl	(%rax) # Size: 4
.Ltmp1278:
    00000098: 	addq	$0x1, %rdx
    0000009c: 	movq	0x8(%rax), %rax
    000000a0: 	cmpq	$0x1, %rdx
    000000a4: 	jne	.Ltmp1278 # Offset: 164
    000000a6: 	jmp	.Ltmp1272 # Offset: 166
.Ltmp1268:
    000000a8: 	xorl	%r8d, %r8d
    000000ab: 	jmp	.Ltmp1277 # Offset: 171
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch3ISt14_List_iteratorIfEfEbT_S2_T0_"

Binary Function "_Z13binarysearch3ISt14_List_iteratorItEtEbT_S2_T0_" after disassembly {
  Number      : 229
  State       : disassembled
  Address     : 0x79b0
  Size        : 0xc0
  MaxSize     : 0xc0
  Offset      : 0x79b0
  Section     : .text
  Orc Section : .local.text._Z13binarysearch3ISt14_List_iteratorItEtEbT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0228:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r9
    00000007: 	movl	%edx, %r10d
    0000000a: 	cmpq	%rsi, %rdi
    0000000d: 	je	.Ltmp1279 # Offset: 13
    00000013: 	movq	%rdi, %rax
    00000016: 	xorl	%r8d, %r8d
    00000019: 	nopl	(%rax) # Size: 7
.Ltmp1280:
    00000020: 	movq	(%rax), %rax
    00000023: 	addq	$0x1, %r8
    00000027: 	cmpq	%r9, %rax
    0000002a: 	jne	.Ltmp1280 # Offset: 42
    0000002c: 	nopl	(%rax) # Size: 4
.Ltmp1288:
    00000030: 	testq	%r8, %r8
    00000033: 	je	.Ltmp1281 # Offset: 51
.Ltmp1286:
    00000035: 	movq	%r8, %rsi
    00000038: 	shrq	$0x3f, %rsi
    0000003c: 	addq	%r8, %rsi
    0000003f: 	sarq	%rsi
    00000042: 	cmpq	$0x1, %r8
    00000046: 	jle	.Ltmp1282 # Offset: 70
    00000048: 	leaq	-0x1(%rsi), %rcx
    0000004c: 	movq	%rdi, %rax
    0000004f: 	testq	%rsi, %rsi
    00000052: 	je	.Ltmp1283 # Offset: 82
    00000054: 	nopl	(%rax) # Size: 4
.Ltmp1284:
    00000058: 	movq	(%rax), %rax
    0000005b: 	subq	$0x1, %rcx
    0000005f: 	jae	.Ltmp1284 # Offset: 95
.Ltmp1283:
    00000061: 	cmpw	0x10(%rax), %r10w
    00000066: 	jbe	.Ltmp1285 # Offset: 102
    00000068: 	addq	$0x1, %rsi
    0000006c: 	movq	(%rax), %rdi
    0000006f: 	subq	%rsi, %r8
    00000072: 	testq	%r8, %r8
    00000075: 	jne	.Ltmp1286 # Offset: 117
.Ltmp1281:
    00000077: 	xorl	%eax, %eax
    00000079: 	cmpq	%rdi, %r9
    0000007c: 	je	.Ltmp1287 # Offset: 124
    0000007e: 	cmpw	%dx, 0x10(%rdi)
    00000082: 	sete	%al
.Ltmp1287:
    00000085: 	retq # Offset: 133
    00000086: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1285:
    00000090: 	movq	%rsi, %r8
    00000093: 	jmp	.Ltmp1288 # Offset: 147
    00000095: 	nopl	(%rax) # Size: 3
.Ltmp1282:
    00000098: 	leaq	0x1(%rsi), %rcx
    0000009c: 	movq	%rdi, %rax
    0000009f: 	testq	%rsi, %rsi
    000000a2: 	je	.Ltmp1283 # Offset: 162
    000000a4: 	nopl	(%rax) # Size: 4
.Ltmp1289:
    000000a8: 	addq	$0x1, %rcx
    000000ac: 	movq	0x8(%rax), %rax
    000000b0: 	cmpq	$0x1, %rcx
    000000b4: 	jne	.Ltmp1289 # Offset: 180
    000000b6: 	jmp	.Ltmp1283 # Offset: 182
.Ltmp1279:
    000000b8: 	xorl	%r8d, %r8d
    000000bb: 	jmp	.Ltmp1288 # Offset: 187
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch3ISt14_List_iteratorItEtEbT_S2_T0_"

Binary Function "_Z13binarysearch3ISt14_List_iteratorIaEaEbT_S2_T0_" after disassembly {
  Number      : 230
  State       : disassembled
  Address     : 0x7a70
  Size        : 0xb8
  MaxSize     : 0xc0
  Offset      : 0x7a70
  Section     : .text
  Orc Section : .local.text._Z13binarysearch3ISt14_List_iteratorIaEaEbT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0229:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r9
    00000007: 	movl	%edx, %r10d
    0000000a: 	cmpq	%rsi, %rdi
    0000000d: 	je	.Ltmp1290 # Offset: 13
    00000013: 	movq	%rdi, %rax
    00000016: 	xorl	%r8d, %r8d
    00000019: 	nopl	(%rax) # Size: 7
.Ltmp1291:
    00000020: 	movq	(%rax), %rax
    00000023: 	addq	$0x1, %r8
    00000027: 	cmpq	%r9, %rax
    0000002a: 	jne	.Ltmp1291 # Offset: 42
    0000002c: 	nopl	(%rax) # Size: 4
.Ltmp1299:
    00000030: 	testq	%r8, %r8
    00000033: 	je	.Ltmp1292 # Offset: 51
.Ltmp1297:
    00000035: 	movq	%r8, %rsi
    00000038: 	shrq	$0x3f, %rsi
    0000003c: 	addq	%r8, %rsi
    0000003f: 	sarq	%rsi
    00000042: 	cmpq	$0x1, %r8
    00000046: 	jle	.Ltmp1293 # Offset: 70
    00000048: 	leaq	-0x1(%rsi), %rcx
    0000004c: 	movq	%rdi, %rax
    0000004f: 	testq	%rsi, %rsi
    00000052: 	je	.Ltmp1294 # Offset: 82
    00000054: 	nopl	(%rax) # Size: 4
.Ltmp1295:
    00000058: 	movq	(%rax), %rax
    0000005b: 	subq	$0x1, %rcx
    0000005f: 	jae	.Ltmp1295 # Offset: 95
.Ltmp1294:
    00000061: 	cmpb	0x10(%rax), %r10b
    00000065: 	jle	.Ltmp1296 # Offset: 101
    00000067: 	addq	$0x1, %rsi
    0000006b: 	movq	(%rax), %rdi
    0000006e: 	subq	%rsi, %r8
    00000071: 	testq	%r8, %r8
    00000074: 	jne	.Ltmp1297 # Offset: 116
.Ltmp1292:
    00000076: 	xorl	%eax, %eax
    00000078: 	cmpq	%rdi, %r9
    0000007b: 	je	.Ltmp1298 # Offset: 123
    0000007d: 	cmpb	%dl, 0x10(%rdi)
    00000080: 	sete	%al
.Ltmp1298:
    00000083: 	retq # Offset: 131
    00000084: 	nopl	(%rax) # Size: 4
.Ltmp1296:
    00000088: 	movq	%rsi, %r8
    0000008b: 	jmp	.Ltmp1299 # Offset: 139
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp1293:
    00000090: 	leaq	0x1(%rsi), %rcx
    00000094: 	movq	%rdi, %rax
    00000097: 	testq	%rsi, %rsi
    0000009a: 	je	.Ltmp1294 # Offset: 154
    0000009c: 	nopl	(%rax) # Size: 4
.Ltmp1300:
    000000a0: 	addq	$0x1, %rcx
    000000a4: 	movq	0x8(%rax), %rax
    000000a8: 	cmpq	$0x1, %rcx
    000000ac: 	jne	.Ltmp1300 # Offset: 172
    000000ae: 	jmp	.Ltmp1294 # Offset: 174
.Ltmp1290:
    000000b0: 	xorl	%r8d, %r8d
    000000b3: 	jmp	.Ltmp1299 # Offset: 179
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch3ISt14_List_iteratorIaEaEbT_S2_T0_"

Binary Function "_Z13binarysearch1ISt15_Deque_iteratorIaRaPaEaEbT_S4_T0_" after disassembly {
  Number      : 231
  State       : disassembled
  Address     : 0x7b30
  Size        : 0x162
  MaxSize     : 0x170
  Offset      : 0x7b30
  Section     : .text
  Orc Section : .local.text._Z13binarysearch1ISt15_Deque_iteratorIaRaPaEaEbT_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0230:
    00000000: 	endbr64
    00000004: 	movq	(%rdi), %r11
    00000007: 	movq	(%rsi), %rax
    0000000a: 	cmpq	%rax, %r11
    0000000d: 	je	.Ltmp1301 # Offset: 13
    00000013: 	pushq	%rbx
    00000014: 	movq	%rsi, %r9
    00000017: 	movl	%edx, %r10d
    0000001a: 	jmp	.Ltmp1302 # Offset: 26
    0000001c: 	nopl	(%rax) # Size: 4
.Ltmp1307:
    00000020: 	leaq	0x1(%rax), %r11
    00000024: 	cmpq	%r8, %r11
    00000027: 	je	.Ltmp1303 # Offset: 39
.Ltmp1311:
    0000002d: 	movq	%r11, %xmm1
    00000032: 	movq	%rcx, %xmm4
    00000037: 	movups	%xmm0, 0x10(%rdi)
    0000003b: 	punpcklqdq	%xmm4, %xmm1
    0000003f: 	movups	%xmm1, (%rdi)
    00000042: 	movq	(%r9), %rax
    00000045: 	cmpq	%rax, %r11
    00000048: 	je	.Ltmp1304 # Offset: 72
.Ltmp1302:
    0000004e: 	movq	0x18(%r9), %rbx
    00000052: 	movq	0x18(%rdi), %rsi
    00000056: 	movq	0x10(%rdi), %r8
    0000005a: 	movq	0x8(%rdi), %rcx
    0000005e: 	movq	%rbx, %rdx
    00000061: 	subq	%rsi, %rdx
    00000064: 	sarq	$0x3, %rdx
    00000068: 	cmpq	$0x1, %rbx
    0000006c: 	adcq	$-0x1, %rdx
    00000070: 	subq	0x8(%r9), %rax
    00000074: 	shlq	$0x9, %rdx
    00000078: 	addq	%rdx, %rax
    0000007b: 	movq	%r8, %rdx
    0000007e: 	subq	%r11, %rdx
    00000081: 	addq	%rdx, %rax
    00000084: 	movq	%rax, %rdx
    00000087: 	shrq	$0x3f, %rdx
    0000008b: 	addq	%rax, %rdx
    0000008e: 	movq	%r11, %rax
    00000091: 	sarq	%rdx
    00000094: 	subq	%rcx, %rax
    00000097: 	addq	%rdx, %rax
    0000009a: 	js	.Ltmp1305 # Offset: 154
    0000009c: 	cmpq	$0x1ff, %rax
    000000a2: 	jg	.Ltmp1306 # Offset: 162
    000000a4: 	leaq	(%r11,%rdx), %rax
.Ltmp1309:
    000000a8: 	movq	%rax, %xmm1
    000000ad: 	movq	%rcx, %xmm2
    000000b2: 	movq	%r8, %xmm0
    000000b7: 	movq	%rsi, %xmm3
    000000bc: 	punpcklqdq	%xmm2, %xmm1
    000000c0: 	punpcklqdq	%xmm3, %xmm0
    000000c4: 	cmpb	%r10b, (%rax)
    000000c7: 	jl	.Ltmp1307 # Offset: 199
    000000cd: 	jle	.Ltmp1308 # Offset: 205
    000000d3: 	movups	%xmm1, (%r9)
    000000d7: 	movups	%xmm0, 0x10(%r9)
    000000dc: 	movq	(%rdi), %r11
    000000df: 	cmpq	%rax, %r11
    000000e2: 	jne	.Ltmp1302 # Offset: 226
.Ltmp1304:
    000000e8: 	xorl	%eax, %eax
    000000ea: 	popq	%rbx
    000000eb: 	retq # Offset: 235
    000000ec: 	nopl	(%rax) # Size: 4
.Ltmp1306:
    000000f0: 	movq	%rax, %rdx
    000000f3: 	sarq	$0x9, %rdx
.Ltmp1310:
    000000f7: 	leaq	(%rsi,%rdx,8), %rsi
    000000fb: 	shlq	$0x9, %rdx
    000000ff: 	movq	(%rsi), %rcx
    00000102: 	subq	%rdx, %rax
    00000105: 	leaq	0x200(%rcx), %r8
    0000010c: 	addq	%rcx, %rax
    0000010f: 	jmp	.Ltmp1309 # Offset: 271
    00000111: 	nopl	(%rax) # Size: 7
.Ltmp1305:
    00000118: 	movq	%rax, %rdx
    0000011b: 	notq	%rdx
    0000011e: 	shrq	$0x9, %rdx
    00000122: 	notq	%rdx
    00000125: 	jmp	.Ltmp1310 # Offset: 293
    00000127: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1303:
    00000130: 	movq	0x8(%rsi), %r11
    00000134: 	leaq	0x8(%rsi), %rax
    00000138: 	movq	%rax, %xmm5
    0000013d: 	leaq	0x200(%r11), %r8
    00000144: 	movq	%r11, %rcx
    00000147: 	movq	%r8, %xmm0
    0000014c: 	punpcklqdq	%xmm5, %xmm0
    00000150: 	jmp	.Ltmp1311 # Offset: 336
    00000155: 	nopl	(%rax) # Size: 3
.Ltmp1308:
    00000158: 	movl	$0x1, %eax
    0000015d: 	popq	%rbx
    0000015e: 	retq # Offset: 350
.Ltmp1301:
    0000015f: 	xorl	%eax, %eax
    00000161: 	retq # Offset: 353
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch1ISt15_Deque_iteratorIaRaPaEaEbT_S4_T0_"

Binary Function "_Z13binarysearch4ISt15_Deque_iteratorIaRaPaEaEbT_S4_T0_" after disassembly {
  Number      : 232
  State       : disassembled
  Address     : 0x7ca0
  Size        : 0x14c
  MaxSize     : 0x150
  Offset      : 0x7ca0
  Section     : .text
  Orc Section : .local.text._Z13binarysearch4ISt15_Deque_iteratorIaRaPaEaEbT_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0231:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	movq	%rdi, %rbx
    0000000d: 	movq	0x18(%rsi), %rax
    00000011: 	movq	0x18(%rbx), %rbp
    00000015: 	movq	0x10(%rbx), %r13
    00000019: 	movq	%rax, %rcx
    0000001c: 	movq	(%rdi), %rdi
    0000001f: 	subq	%rbp, %rcx
    00000022: 	sarq	$0x3, %rcx
    00000026: 	cmpq	$0x1, %rax
    0000002a: 	movq	(%rsi), %rax
    0000002d: 	adcq	$-0x1, %rcx
    00000031: 	subq	0x8(%rsi), %rax
    00000035: 	shlq	$0x9, %rcx
    00000039: 	addq	%rax, %rcx
    0000003c: 	movq	%r13, %rax
    0000003f: 	subq	%rdi, %rax
    00000042: 	addq	%rax, %rcx
    00000045: 	testq	%rcx, %rcx
    00000048: 	jle	.Ltmp1312 # Offset: 72
    0000004e: 	movq	0x8(%rbx), %r11
    00000052: 	movl	%edx, %r12d
    00000055: 	jmp	.Ltmp1313 # Offset: 85
    00000057: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1317:
    00000060: 	leaq	0x1(%rax), %rdi
    00000064: 	cmpq	%r10, %rdi
    00000067: 	je	.Ltmp1314 # Offset: 103
.Ltmp1321:
    0000006d: 	movq	%rdi, %xmm0
    00000072: 	movq	%r8, %xmm1
    00000077: 	movq	%r9, %rbp
    0000007a: 	movq	%r10, %r13
    0000007d: 	punpcklqdq	%xmm1, %xmm0
    00000081: 	movq	%r9, %xmm2
    00000086: 	addq	$0x1, %rdx
    0000008a: 	movq	%r8, %r11
    0000008d: 	movups	%xmm0, (%rbx)
    00000090: 	movq	%r10, %xmm0
    00000095: 	subq	%rdx, %rcx
    00000098: 	punpcklqdq	%xmm2, %xmm0
    0000009c: 	movups	%xmm0, 0x10(%rbx)
    000000a0: 	testq	%rcx, %rcx
    000000a3: 	jle	.Ltmp1312 # Offset: 163
.Ltmp1313:
    000000a5: 	movq	%rcx, %rdx
    000000a8: 	movq	%rdi, %rax
    000000ab: 	sarq	%rdx
    000000ae: 	subq	%r11, %rax
    000000b1: 	addq	%rdx, %rax
    000000b4: 	js	.Ltmp1315 # Offset: 180
    000000b6: 	cmpq	$0x1ff, %rax
    000000bc: 	jg	.Ltmp1316 # Offset: 188
    000000be: 	leaq	(%rdi,%rdx), %rax
    000000c2: 	movq	%rbp, %r9
    000000c5: 	movq	%r13, %r10
    000000c8: 	movq	%r11, %r8
.Ltmp1319:
    000000cb: 	cmpb	%r12b, (%rax)
    000000ce: 	jl	.Ltmp1317 # Offset: 206
    000000d0: 	jle	.Ltmp1318 # Offset: 208
    000000d2: 	movq	%rdx, %rcx
    000000d5: 	testq	%rcx, %rcx
    000000d8: 	jg	.Ltmp1313 # Offset: 216
.Ltmp1312:
    000000da: 	popq	%rbx
    000000db: 	xorl	%eax, %eax
    000000dd: 	popq	%rbp
    000000de: 	popq	%r12
    000000e0: 	popq	%r13
    000000e2: 	retq # Offset: 226
    000000e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1316:
    000000e8: 	movq	%rax, %rsi
    000000eb: 	sarq	$0x9, %rsi
.Ltmp1320:
    000000ef: 	leaq	(%rbp,%rsi,8), %r9
    000000f4: 	shlq	$0x9, %rsi
    000000f8: 	movq	(%r9), %r8
    000000fb: 	subq	%rsi, %rax
    000000fe: 	leaq	0x200(%r8), %r10
    00000105: 	addq	%r8, %rax
    00000108: 	jmp	.Ltmp1319 # Offset: 264
    0000010a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1315:
    00000110: 	movq	%rax, %rsi
    00000113: 	notq	%rsi
    00000116: 	shrq	$0x9, %rsi
    0000011a: 	notq	%rsi
    0000011d: 	jmp	.Ltmp1320 # Offset: 285
    0000011f: 	nop # Size: 1
.Ltmp1314:
    00000120: 	movq	0x8(%r9), %rdi
    00000124: 	addq	$0x8, %r9
    00000128: 	leaq	0x200(%rdi), %r10
    0000012f: 	movq	%rdi, %r8
    00000132: 	jmp	.Ltmp1321 # Offset: 306
    00000137: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1318:
    00000140: 	popq	%rbx
    00000141: 	movl	$0x1, %eax
    00000146: 	popq	%rbp
    00000147: 	popq	%r12
    00000149: 	popq	%r13
    0000014b: 	retq # Offset: 331
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch4ISt15_Deque_iteratorIaRaPaEaEbT_S4_T0_"

Binary Function "_Z13binarysearch2ISt15_Deque_iteratorIaRaPaEaEbT_S4_T0_" after disassembly {
  Number      : 233
  State       : disassembled
  Address     : 0x7df0
  Size        : 0x14c
  MaxSize     : 0x150
  Offset      : 0x7df0
  Section     : .text
  Orc Section : .local.text._Z13binarysearch2ISt15_Deque_iteratorIaRaPaEaEbT_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0232:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	movq	%rdi, %r9
    00000009: 	pushq	%r12
    0000000b: 	movq	0x18(%r9), %r10
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	0x18(%rsi), %rax
    00000015: 	movq	0x10(%r9), %rbx
    00000019: 	movq	(%rdi), %rdi
    0000001c: 	movq	%rax, %rcx
    0000001f: 	subq	%r10, %rcx
    00000022: 	sarq	$0x3, %rcx
    00000026: 	cmpq	$0x1, %rax
    0000002a: 	movq	(%rsi), %rax
    0000002d: 	adcq	$-0x1, %rcx
    00000031: 	subq	0x8(%rsi), %rax
    00000035: 	shlq	$0x9, %rcx
    00000039: 	addq	%rax, %rcx
    0000003c: 	movq	%rbx, %rax
    0000003f: 	subq	%rdi, %rax
    00000042: 	addq	%rax, %rcx
    00000045: 	je	.Ltmp1322 # Offset: 69
    0000004b: 	movq	0x8(%r9), %r8
    0000004f: 	movl	%edx, %r11d
    00000052: 	jmp	.Ltmp1323 # Offset: 82
    00000054: 	nopl	(%rax) # Size: 4
.Ltmp1327:
    00000058: 	leaq	0x1(%rdx), %rdi
    0000005c: 	cmpq	%r13, %rdi
    0000005f: 	je	.Ltmp1324 # Offset: 95
.Ltmp1331:
    00000065: 	movq	%rdi, %xmm0
    0000006a: 	movq	%rbp, %xmm1
    0000006f: 	movq	%r12, %r10
    00000072: 	movq	%r13, %rbx
    00000075: 	punpcklqdq	%xmm1, %xmm0
    00000079: 	movq	%r12, %xmm2
    0000007e: 	addq	$0x1, %rax
    00000082: 	movq	%rbp, %r8
    00000085: 	movups	%xmm0, (%r9)
    00000089: 	movq	%r13, %xmm0
    0000008e: 	subq	%rax, %rcx
    00000091: 	punpcklqdq	%xmm2, %xmm0
    00000095: 	movups	%xmm0, 0x10(%r9)
    0000009a: 	testq	%rcx, %rcx
    0000009d: 	je	.Ltmp1322 # Offset: 157
.Ltmp1323:
    0000009f: 	movq	%rcx, %rax
    000000a2: 	movq	%rdi, %rdx
    000000a5: 	shrq	$0x3f, %rax
    000000a9: 	subq	%r8, %rdx
    000000ac: 	addq	%rcx, %rax
    000000af: 	sarq	%rax
    000000b2: 	addq	%rax, %rdx
    000000b5: 	js	.Ltmp1325 # Offset: 181
    000000b7: 	cmpq	$0x1ff, %rdx
    000000be: 	jg	.Ltmp1326 # Offset: 190
    000000c0: 	leaq	(%rdi,%rax), %rdx
    000000c4: 	movq	%r10, %r12
    000000c7: 	movq	%rbx, %r13
    000000ca: 	movq	%r8, %rbp
.Ltmp1329:
    000000cd: 	cmpb	%r11b, (%rdx)
    000000d0: 	jl	.Ltmp1327 # Offset: 208
    000000d2: 	jle	.Ltmp1328 # Offset: 210
    000000d4: 	movq	%rax, %rcx
    000000d7: 	testq	%rcx, %rcx
    000000da: 	jne	.Ltmp1323 # Offset: 218
.Ltmp1322:
    000000dc: 	popq	%rbx
    000000dd: 	xorl	%eax, %eax
    000000df: 	popq	%rbp
    000000e0: 	popq	%r12
    000000e2: 	popq	%r13
    000000e4: 	retq # Offset: 228
    000000e5: 	nopl	(%rax) # Size: 3
.Ltmp1326:
    000000e8: 	movq	%rdx, %rsi
    000000eb: 	sarq	$0x9, %rsi
.Ltmp1330:
    000000ef: 	leaq	(%r10,%rsi,8), %r12
    000000f3: 	shlq	$0x9, %rsi
    000000f7: 	movq	(%r12), %rbp
    000000fb: 	subq	%rsi, %rdx
    000000fe: 	leaq	0x200(%rbp), %r13
    00000105: 	addq	%rbp, %rdx
    00000108: 	jmp	.Ltmp1329 # Offset: 264
    0000010a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1325:
    00000110: 	movq	%rdx, %rsi
    00000113: 	notq	%rsi
    00000116: 	shrq	$0x9, %rsi
    0000011a: 	notq	%rsi
    0000011d: 	jmp	.Ltmp1330 # Offset: 285
    0000011f: 	nop # Size: 1
.Ltmp1324:
    00000120: 	movq	0x8(%r12), %rdi
    00000125: 	addq	$0x8, %r12
    00000129: 	leaq	0x200(%rdi), %r13
    00000130: 	movq	%rdi, %rbp
    00000133: 	jmp	.Ltmp1331 # Offset: 307
    00000138: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1328:
    00000140: 	popq	%rbx
    00000141: 	movl	$0x1, %eax
    00000146: 	popq	%rbp
    00000147: 	popq	%r12
    00000149: 	popq	%r13
    0000014b: 	retq # Offset: 331
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch2ISt15_Deque_iteratorIaRaPaEaEbT_S4_T0_"

Binary Function "_Z13binarysearch1ISt15_Deque_iteratorIfRfPfEfEbT_S4_T0_" after disassembly {
  Number      : 234
  State       : disassembled
  Address     : 0x7f40
  Size        : 0x16e
  MaxSize     : 0x170
  Offset      : 0x7f40
  Section     : .text
  Orc Section : .local.text._Z13binarysearch1ISt15_Deque_iteratorIfRfPfEfEbT_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0233:
    00000000: 	endbr64
    00000004: 	movq	(%rdi), %rcx
    00000007: 	movq	(%rsi), %rdx
    0000000a: 	movq	%rsi, %r10
    0000000d: 	nopl	(%rax) # Size: 3
.Ltmp1339:
    00000010: 	cmpq	%rdx, %rcx
    00000013: 	je	.Ltmp1332 # Offset: 19
.Ltmp1337:
    00000019: 	movq	0x18(%r10), %r11
    0000001d: 	movq	0x18(%rdi), %r8
    00000021: 	movq	0x10(%rdi), %r9
    00000025: 	movq	0x8(%rdi), %rsi
    00000029: 	movq	%r11, %rax
    0000002c: 	subq	%r8, %rax
    0000002f: 	sarq	$0x3, %rax
    00000033: 	cmpq	$0x1, %r11
    00000037: 	adcq	$-0x1, %rax
    0000003b: 	subq	0x8(%r10), %rdx
    0000003f: 	sarq	$0x2, %rdx
    00000043: 	shlq	$0x7, %rax
    00000047: 	addq	%rdx, %rax
    0000004a: 	movq	%r9, %rdx
    0000004d: 	subq	%rcx, %rdx
    00000050: 	sarq	$0x2, %rdx
    00000054: 	addq	%rdx, %rax
    00000057: 	movq	%rax, %rdx
    0000005a: 	shrq	$0x3f, %rdx
    0000005e: 	addq	%rax, %rdx
    00000061: 	movq	%rcx, %rax
    00000064: 	subq	%rsi, %rax
    00000067: 	sarq	%rdx
    0000006a: 	sarq	$0x2, %rax
    0000006e: 	addq	%rdx, %rax
    00000071: 	js	.Ltmp1333 # Offset: 113
    00000077: 	cmpq	$0x7f, %rax
    0000007b: 	jg	.Ltmp1334 # Offset: 123
    00000081: 	leaq	(%rcx,%rdx,4), %rdx
.Ltmp1340:
    00000085: 	movss	(%rdx), %xmm1
    00000089: 	movq	%rdx, %xmm3
    0000008e: 	movq	%rsi, %xmm4
    00000093: 	movq	%r9, %xmm2
    00000098: 	movq	%r8, %xmm5
    0000009d: 	punpcklqdq	%xmm4, %xmm3
    000000a1: 	comiss	%xmm1, %xmm0
    000000a4: 	punpcklqdq	%xmm5, %xmm2
    000000a8: 	jbe	.Ltmp1335 # Offset: 168
    000000aa: 	leaq	0x4(%rdx), %rcx
    000000ae: 	cmpq	%r9, %rcx
    000000b1: 	je	.Ltmp1336 # Offset: 177
.Ltmp1342:
    000000b7: 	movq	%rcx, %xmm1
    000000bc: 	movq	%rsi, %xmm6
    000000c1: 	movups	%xmm2, 0x10(%rdi)
    000000c5: 	punpcklqdq	%xmm6, %xmm1
    000000c9: 	movups	%xmm1, (%rdi)
    000000cc: 	movq	(%r10), %rdx
    000000cf: 	cmpq	%rdx, %rcx
    000000d2: 	jne	.Ltmp1337 # Offset: 210
.Ltmp1332:
    000000d8: 	xorl	%eax, %eax
    000000da: 	retq # Offset: 218
    000000db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1335:
    000000e0: 	comiss	%xmm0, %xmm1
    000000e3: 	jbe	.Ltmp1338 # Offset: 227
    000000e9: 	movups	%xmm3, (%r10)
    000000ed: 	movups	%xmm2, 0x10(%r10)
    000000f2: 	movq	(%rdi), %rcx
    000000f5: 	jmp	.Ltmp1339 # Offset: 245
    000000fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1334:
    00000100: 	movq	%rax, %rdx
    00000103: 	sarq	$0x7, %rdx
.Ltmp1341:
    00000107: 	leaq	(%r8,%rdx,8), %r8
    0000010b: 	shlq	$0x7, %rdx
    0000010f: 	movq	(%r8), %rsi
    00000112: 	subq	%rdx, %rax
    00000115: 	leaq	0x200(%rsi), %r9
    0000011c: 	leaq	(%rsi,%rax,4), %rdx
    00000120: 	jmp	.Ltmp1340 # Offset: 288
    00000125: 	nopl	(%rax) # Size: 3
.Ltmp1333:
    00000128: 	movq	%rax, %rdx
    0000012b: 	notq	%rdx
    0000012e: 	shrq	$0x7, %rdx
    00000132: 	notq	%rdx
    00000135: 	jmp	.Ltmp1341 # Offset: 309
    00000137: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1336:
    00000140: 	movq	0x8(%r8), %rcx
    00000144: 	leaq	0x8(%r8), %rax
    00000148: 	movq	%rax, %xmm7
    0000014d: 	leaq	0x200(%rcx), %r9
    00000154: 	movq	%rcx, %rsi
    00000157: 	movq	%r9, %xmm2
    0000015c: 	punpcklqdq	%xmm7, %xmm2
    00000160: 	jmp	.Ltmp1342 # Offset: 352
    00000165: 	nopl	(%rax) # Size: 3
.Ltmp1338:
    00000168: 	movl	$0x1, %eax
    0000016d: 	retq # Offset: 365
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch1ISt15_Deque_iteratorIfRfPfEfEbT_S4_T0_"

Binary Function "_Z13binarysearch1ISt15_Deque_iteratorItRtPtEtEbT_S4_T0_" after disassembly {
  Number      : 235
  State       : disassembled
  Address     : 0x80b0
  Size        : 0x162
  MaxSize     : 0x170
  Offset      : 0x80b0
  Section     : .text
  Orc Section : .local.text._Z13binarysearch1ISt15_Deque_iteratorItRtPtEtEbT_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0234:
    00000000: 	endbr64
    00000004: 	movl	%edx, %r11d
    00000007: 	movq	(%rdi), %rcx
    0000000a: 	movq	(%rsi), %rdx
    0000000d: 	cmpq	%rdx, %rcx
    00000010: 	je	.Ltmp1343 # Offset: 16
    00000016: 	pushq	%rbx
    00000017: 	movq	%rsi, %r10
    0000001a: 	jmp	.Ltmp1344 # Offset: 26
    0000001c: 	nopl	(%rax) # Size: 4
.Ltmp1349:
    00000020: 	leaq	0x2(%rdx), %rcx
    00000024: 	cmpq	%r9, %rcx
    00000027: 	je	.Ltmp1345 # Offset: 39
.Ltmp1353:
    0000002d: 	movq	%rcx, %xmm1
    00000032: 	movq	%rsi, %xmm4
    00000037: 	movups	%xmm0, 0x10(%rdi)
    0000003b: 	punpcklqdq	%xmm4, %xmm1
    0000003f: 	movups	%xmm1, (%rdi)
    00000042: 	movq	(%r10), %rdx
    00000045: 	cmpq	%rdx, %rcx
    00000048: 	je	.Ltmp1346 # Offset: 72
.Ltmp1344:
    0000004e: 	movq	0x18(%r10), %rbx
    00000052: 	movq	0x18(%rdi), %r8
    00000056: 	movq	0x10(%rdi), %r9
    0000005a: 	movq	0x8(%rdi), %rsi
    0000005e: 	movq	%rbx, %rax
    00000061: 	subq	%r8, %rax
    00000064: 	sarq	$0x3, %rax
    00000068: 	cmpq	$0x1, %rbx
    0000006c: 	adcq	$-0x1, %rax
    00000070: 	subq	0x8(%r10), %rdx
    00000074: 	sarq	%rdx
    00000077: 	shlq	$0x8, %rax
    0000007b: 	addq	%rdx, %rax
    0000007e: 	movq	%r9, %rdx
    00000081: 	subq	%rcx, %rdx
    00000084: 	sarq	%rdx
    00000087: 	addq	%rdx, %rax
    0000008a: 	movq	%rax, %rdx
    0000008d: 	shrq	$0x3f, %rdx
    00000091: 	addq	%rax, %rdx
    00000094: 	movq	%rcx, %rax
    00000097: 	subq	%rsi, %rax
    0000009a: 	sarq	%rdx
    0000009d: 	sarq	%rax
    000000a0: 	addq	%rdx, %rax
    000000a3: 	js	.Ltmp1347 # Offset: 163
    000000a5: 	cmpq	$0xff, %rax
    000000ab: 	jg	.Ltmp1348 # Offset: 171
    000000ad: 	leaq	(%rcx,%rdx,2), %rdx
.Ltmp1351:
    000000b1: 	movq	%rdx, %xmm1
    000000b6: 	movq	%rsi, %xmm2
    000000bb: 	movq	%r9, %xmm0
    000000c0: 	movq	%r8, %xmm3
    000000c5: 	punpcklqdq	%xmm2, %xmm1
    000000c9: 	punpcklqdq	%xmm3, %xmm0
    000000cd: 	cmpw	%r11w, (%rdx)
    000000d1: 	jb	.Ltmp1349 # Offset: 209
    000000d7: 	jbe	.Ltmp1350 # Offset: 215
    000000d9: 	movups	%xmm1, (%r10)
    000000dd: 	movups	%xmm0, 0x10(%r10)
    000000e2: 	movq	(%rdi), %rcx
    000000e5: 	cmpq	%rdx, %rcx
    000000e8: 	jne	.Ltmp1344 # Offset: 232
.Ltmp1346:
    000000ee: 	xorl	%eax, %eax
    000000f0: 	popq	%rbx
    000000f1: 	retq # Offset: 241
    000000f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1348:
    000000f8: 	movq	%rax, %rdx
    000000fb: 	sarq	$0x8, %rdx
.Ltmp1352:
    000000ff: 	leaq	(%r8,%rdx,8), %r8
    00000103: 	shlq	$0x8, %rdx
    00000107: 	movq	(%r8), %rsi
    0000010a: 	subq	%rdx, %rax
    0000010d: 	leaq	0x200(%rsi), %r9
    00000114: 	leaq	(%rsi,%rax,2), %rdx
    00000118: 	jmp	.Ltmp1351 # Offset: 280
    0000011a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1347:
    00000120: 	movq	%rax, %rdx
    00000123: 	notq	%rdx
    00000126: 	shrq	$0x8, %rdx
    0000012a: 	notq	%rdx
    0000012d: 	jmp	.Ltmp1352 # Offset: 301
    0000012f: 	nop # Size: 1
.Ltmp1345:
    00000130: 	movq	0x8(%r8), %rcx
    00000134: 	leaq	0x8(%r8), %rax
    00000138: 	movq	%rax, %xmm5
    0000013d: 	leaq	0x200(%rcx), %r9
    00000144: 	movq	%rcx, %rsi
    00000147: 	movq	%r9, %xmm0
    0000014c: 	punpcklqdq	%xmm5, %xmm0
    00000150: 	jmp	.Ltmp1353 # Offset: 336
    00000155: 	nopl	(%rax) # Size: 3
.Ltmp1350:
    00000158: 	movl	$0x1, %eax
    0000015d: 	popq	%rbx
    0000015e: 	retq # Offset: 350
.Ltmp1343:
    0000015f: 	xorl	%eax, %eax
    00000161: 	retq # Offset: 353
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch1ISt15_Deque_iteratorItRtPtEtEbT_S4_T0_"

Binary Function "_Z13binarysearch1ISt15_Deque_iteratorIiRiPiEiEbT_S4_T0_" after disassembly {
  Number      : 236
  State       : disassembled
  Address     : 0x8220
  Size        : 0x162
  MaxSize     : 0x170
  Offset      : 0x8220
  Section     : .text
  Orc Section : .local.text._Z13binarysearch1ISt15_Deque_iteratorIiRiPiEiEbT_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0235:
    00000000: 	endbr64
    00000004: 	movl	%edx, %r11d
    00000007: 	movq	(%rdi), %rcx
    0000000a: 	movq	(%rsi), %rdx
    0000000d: 	cmpq	%rdx, %rcx
    00000010: 	je	.Ltmp1354 # Offset: 16
    00000016: 	pushq	%rbx
    00000017: 	movq	%rsi, %r10
    0000001a: 	jmp	.Ltmp1355 # Offset: 26
    0000001c: 	nopl	(%rax) # Size: 4
.Ltmp1360:
    00000020: 	leaq	0x4(%rdx), %rcx
    00000024: 	cmpq	%r9, %rcx
    00000027: 	je	.Ltmp1356 # Offset: 39
.Ltmp1364:
    0000002d: 	movq	%rcx, %xmm1
    00000032: 	movq	%rsi, %xmm4
    00000037: 	movups	%xmm0, 0x10(%rdi)
    0000003b: 	punpcklqdq	%xmm4, %xmm1
    0000003f: 	movups	%xmm1, (%rdi)
    00000042: 	movq	(%r10), %rdx
    00000045: 	cmpq	%rdx, %rcx
    00000048: 	je	.Ltmp1357 # Offset: 72
.Ltmp1355:
    0000004e: 	movq	0x18(%r10), %rbx
    00000052: 	movq	0x18(%rdi), %r8
    00000056: 	movq	0x10(%rdi), %r9
    0000005a: 	movq	0x8(%rdi), %rsi
    0000005e: 	movq	%rbx, %rax
    00000061: 	subq	%r8, %rax
    00000064: 	sarq	$0x3, %rax
    00000068: 	cmpq	$0x1, %rbx
    0000006c: 	adcq	$-0x1, %rax
    00000070: 	subq	0x8(%r10), %rdx
    00000074: 	sarq	$0x2, %rdx
    00000078: 	shlq	$0x7, %rax
    0000007c: 	addq	%rdx, %rax
    0000007f: 	movq	%r9, %rdx
    00000082: 	subq	%rcx, %rdx
    00000085: 	sarq	$0x2, %rdx
    00000089: 	addq	%rdx, %rax
    0000008c: 	movq	%rax, %rdx
    0000008f: 	shrq	$0x3f, %rdx
    00000093: 	addq	%rax, %rdx
    00000096: 	movq	%rcx, %rax
    00000099: 	subq	%rsi, %rax
    0000009c: 	sarq	%rdx
    0000009f: 	sarq	$0x2, %rax
    000000a3: 	addq	%rdx, %rax
    000000a6: 	js	.Ltmp1358 # Offset: 166
    000000a8: 	cmpq	$0x7f, %rax
    000000ac: 	jg	.Ltmp1359 # Offset: 172
    000000ae: 	leaq	(%rcx,%rdx,4), %rdx
.Ltmp1362:
    000000b2: 	movq	%rdx, %xmm1
    000000b7: 	movq	%rsi, %xmm2
    000000bc: 	movq	%r9, %xmm0
    000000c1: 	movq	%r8, %xmm3
    000000c6: 	punpcklqdq	%xmm2, %xmm1
    000000ca: 	punpcklqdq	%xmm3, %xmm0
    000000ce: 	cmpl	%r11d, (%rdx)
    000000d1: 	jl	.Ltmp1360 # Offset: 209
    000000d7: 	jle	.Ltmp1361 # Offset: 215
    000000d9: 	movups	%xmm1, (%r10)
    000000dd: 	movups	%xmm0, 0x10(%r10)
    000000e2: 	movq	(%rdi), %rcx
    000000e5: 	cmpq	%rdx, %rcx
    000000e8: 	jne	.Ltmp1355 # Offset: 232
.Ltmp1357:
    000000ee: 	xorl	%eax, %eax
    000000f0: 	popq	%rbx
    000000f1: 	retq # Offset: 241
    000000f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1359:
    000000f8: 	movq	%rax, %rdx
    000000fb: 	sarq	$0x7, %rdx
.Ltmp1363:
    000000ff: 	leaq	(%r8,%rdx,8), %r8
    00000103: 	shlq	$0x7, %rdx
    00000107: 	movq	(%r8), %rsi
    0000010a: 	subq	%rdx, %rax
    0000010d: 	leaq	0x200(%rsi), %r9
    00000114: 	leaq	(%rsi,%rax,4), %rdx
    00000118: 	jmp	.Ltmp1362 # Offset: 280
    0000011a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1358:
    00000120: 	movq	%rax, %rdx
    00000123: 	notq	%rdx
    00000126: 	shrq	$0x7, %rdx
    0000012a: 	notq	%rdx
    0000012d: 	jmp	.Ltmp1363 # Offset: 301
    0000012f: 	nop # Size: 1
.Ltmp1356:
    00000130: 	movq	0x8(%r8), %rcx
    00000134: 	leaq	0x8(%r8), %rax
    00000138: 	movq	%rax, %xmm5
    0000013d: 	leaq	0x200(%rcx), %r9
    00000144: 	movq	%rcx, %rsi
    00000147: 	movq	%r9, %xmm0
    0000014c: 	punpcklqdq	%xmm5, %xmm0
    00000150: 	jmp	.Ltmp1364 # Offset: 336
    00000155: 	nopl	(%rax) # Size: 3
.Ltmp1361:
    00000158: 	movl	$0x1, %eax
    0000015d: 	popq	%rbx
    0000015e: 	retq # Offset: 350
.Ltmp1354:
    0000015f: 	xorl	%eax, %eax
    00000161: 	retq # Offset: 353
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch1ISt15_Deque_iteratorIiRiPiEiEbT_S4_T0_"

Binary Function "_Z13binarysearch2ISt15_Deque_iteratorItRtPtEtEbT_S4_T0_" after disassembly {
  Number      : 237
  State       : disassembled
  Address     : 0x8390
  Size        : 0x15c
  MaxSize     : 0x160
  Offset      : 0x8390
  Section     : .text
  Orc Section : .local.text._Z13binarysearch2ISt15_Deque_iteratorItRtPtEtEbT_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0236:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	movq	%rdi, %r9
    00000009: 	pushq	%r12
    0000000b: 	movq	0x18(%r9), %r10
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	0x18(%rsi), %rax
    00000015: 	movq	0x10(%r9), %rbx
    00000019: 	movq	(%rdi), %rdi
    0000001c: 	movq	%rax, %rcx
    0000001f: 	subq	%r10, %rcx
    00000022: 	sarq	$0x3, %rcx
    00000026: 	cmpq	$0x1, %rax
    0000002a: 	movq	(%rsi), %rax
    0000002d: 	adcq	$-0x1, %rcx
    00000031: 	subq	0x8(%rsi), %rax
    00000035: 	sarq	%rax
    00000038: 	shlq	$0x8, %rcx
    0000003c: 	addq	%rax, %rcx
    0000003f: 	movq	%rbx, %rax
    00000042: 	subq	%rdi, %rax
    00000045: 	sarq	%rax
    00000048: 	addq	%rax, %rcx
    0000004b: 	je	.Ltmp1365 # Offset: 75
    00000051: 	movq	0x8(%r9), %r8
    00000055: 	movl	%edx, %r11d
    00000058: 	jmp	.Ltmp1366 # Offset: 88
    0000005a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1370:
    00000060: 	leaq	0x2(%rdx), %rdi
    00000064: 	cmpq	%r13, %rdi
    00000067: 	je	.Ltmp1367 # Offset: 103
.Ltmp1374:
    0000006d: 	movq	%rdi, %xmm0
    00000072: 	movq	%rbp, %xmm1
    00000077: 	movq	%r12, %r10
    0000007a: 	movq	%r13, %rbx
    0000007d: 	punpcklqdq	%xmm1, %xmm0
    00000081: 	movq	%r12, %xmm2
    00000086: 	addq	$0x1, %rax
    0000008a: 	movq	%rbp, %r8
    0000008d: 	movups	%xmm0, (%r9)
    00000091: 	movq	%r13, %xmm0
    00000096: 	subq	%rax, %rcx
    00000099: 	punpcklqdq	%xmm2, %xmm0
    0000009d: 	movups	%xmm0, 0x10(%r9)
    000000a2: 	testq	%rcx, %rcx
    000000a5: 	je	.Ltmp1365 # Offset: 165
.Ltmp1366:
    000000a7: 	movq	%rcx, %rax
    000000aa: 	movq	%rdi, %rdx
    000000ad: 	shrq	$0x3f, %rax
    000000b1: 	subq	%r8, %rdx
    000000b4: 	addq	%rcx, %rax
    000000b7: 	sarq	%rdx
    000000ba: 	sarq	%rax
    000000bd: 	addq	%rax, %rdx
    000000c0: 	js	.Ltmp1368 # Offset: 192
    000000c2: 	cmpq	$0xff, %rdx
    000000c9: 	jg	.Ltmp1369 # Offset: 201
    000000cb: 	leaq	(%rdi,%rax,2), %rdx
    000000cf: 	movq	%r10, %r12
    000000d2: 	movq	%rbx, %r13
    000000d5: 	movq	%r8, %rbp
.Ltmp1372:
    000000d8: 	cmpw	%r11w, (%rdx)
    000000dc: 	jb	.Ltmp1370 # Offset: 220
    000000de: 	jbe	.Ltmp1371 # Offset: 222
    000000e0: 	movq	%rax, %rcx
    000000e3: 	testq	%rcx, %rcx
    000000e6: 	jne	.Ltmp1366 # Offset: 230
.Ltmp1365:
    000000e8: 	popq	%rbx
    000000e9: 	xorl	%eax, %eax
    000000eb: 	popq	%rbp
    000000ec: 	popq	%r12
    000000ee: 	popq	%r13
    000000f0: 	retq # Offset: 240
    000000f1: 	nopl	(%rax) # Size: 7
.Ltmp1369:
    000000f8: 	movq	%rdx, %rsi
    000000fb: 	sarq	$0x8, %rsi
.Ltmp1373:
    000000ff: 	leaq	(%r10,%rsi,8), %r12
    00000103: 	shlq	$0x8, %rsi
    00000107: 	movq	(%r12), %rbp
    0000010b: 	subq	%rsi, %rdx
    0000010e: 	leaq	0x200(%rbp), %r13
    00000115: 	leaq	(%rbp,%rdx,2), %rdx
    0000011a: 	jmp	.Ltmp1372 # Offset: 282
    0000011c: 	nopl	(%rax) # Size: 4
.Ltmp1368:
    00000120: 	movq	%rdx, %rsi
    00000123: 	notq	%rsi
    00000126: 	shrq	$0x8, %rsi
    0000012a: 	notq	%rsi
    0000012d: 	jmp	.Ltmp1373 # Offset: 301
    0000012f: 	nop # Size: 1
.Ltmp1367:
    00000130: 	movq	0x8(%r12), %rdi
    00000135: 	addq	$0x8, %r12
    00000139: 	leaq	0x200(%rdi), %r13
    00000140: 	movq	%rdi, %rbp
    00000143: 	jmp	.Ltmp1374 # Offset: 323
    00000148: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1371:
    00000150: 	popq	%rbx
    00000151: 	movl	$0x1, %eax
    00000156: 	popq	%rbp
    00000157: 	popq	%r12
    00000159: 	popq	%r13
    0000015b: 	retq # Offset: 347
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch2ISt15_Deque_iteratorItRtPtEtEbT_S4_T0_"

Binary Function "_Z13binarysearch4ISt15_Deque_iteratorItRtPtEtEbT_S4_T0_" after disassembly {
  Number      : 238
  State       : disassembled
  Address     : 0x84f0
  Size        : 0x15c
  MaxSize     : 0x160
  Offset      : 0x84f0
  Section     : .text
  Orc Section : .local.text._Z13binarysearch4ISt15_Deque_iteratorItRtPtEtEbT_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0237:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	movq	%rdi, %r9
    00000009: 	pushq	%r12
    0000000b: 	movq	0x18(%r9), %r10
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	0x18(%rsi), %rax
    00000015: 	movq	0x10(%r9), %rbx
    00000019: 	movq	(%rdi), %rdi
    0000001c: 	movq	%rax, %rcx
    0000001f: 	subq	%r10, %rcx
    00000022: 	sarq	$0x3, %rcx
    00000026: 	cmpq	$0x1, %rax
    0000002a: 	movq	(%rsi), %rax
    0000002d: 	adcq	$-0x1, %rcx
    00000031: 	subq	0x8(%rsi), %rax
    00000035: 	sarq	%rax
    00000038: 	shlq	$0x8, %rcx
    0000003c: 	addq	%rax, %rcx
    0000003f: 	movq	%rbx, %rax
    00000042: 	subq	%rdi, %rax
    00000045: 	sarq	%rax
    00000048: 	addq	%rax, %rcx
    0000004b: 	testq	%rcx, %rcx
    0000004e: 	jle	.Ltmp1375 # Offset: 78
    00000054: 	movq	0x8(%r9), %r8
    00000058: 	movl	%edx, %r11d
    0000005b: 	jmp	.Ltmp1376 # Offset: 91
    0000005d: 	nopl	(%rax) # Size: 3
.Ltmp1380:
    00000060: 	leaq	0x2(%rax), %rdi
    00000064: 	cmpq	%r13, %rdi
    00000067: 	je	.Ltmp1377 # Offset: 103
.Ltmp1384:
    0000006d: 	movq	%rdi, %xmm0
    00000072: 	movq	%rbp, %xmm1
    00000077: 	movq	%r12, %r10
    0000007a: 	movq	%r13, %rbx
    0000007d: 	punpcklqdq	%xmm1, %xmm0
    00000081: 	movq	%r12, %xmm2
    00000086: 	addq	$0x1, %rdx
    0000008a: 	movq	%rbp, %r8
    0000008d: 	movups	%xmm0, (%r9)
    00000091: 	movq	%r13, %xmm0
    00000096: 	subq	%rdx, %rcx
    00000099: 	punpcklqdq	%xmm2, %xmm0
    0000009d: 	movups	%xmm0, 0x10(%r9)
    000000a2: 	testq	%rcx, %rcx
    000000a5: 	jle	.Ltmp1375 # Offset: 165
.Ltmp1376:
    000000a7: 	movq	%rdi, %rax
    000000aa: 	movq	%rcx, %rdx
    000000ad: 	subq	%r8, %rax
    000000b0: 	sarq	%rdx
    000000b3: 	sarq	%rax
    000000b6: 	addq	%rdx, %rax
    000000b9: 	js	.Ltmp1378 # Offset: 185
    000000bb: 	cmpq	$0xff, %rax
    000000c1: 	jg	.Ltmp1379 # Offset: 193
    000000c3: 	leaq	(%rdi,%rdx,2), %rax
    000000c7: 	movq	%r10, %r12
    000000ca: 	movq	%rbx, %r13
    000000cd: 	movq	%r8, %rbp
.Ltmp1382:
    000000d0: 	cmpw	%r11w, (%rax)
    000000d4: 	jb	.Ltmp1380 # Offset: 212
    000000d6: 	jbe	.Ltmp1381 # Offset: 214
    000000d8: 	movq	%rdx, %rcx
    000000db: 	testq	%rcx, %rcx
    000000de: 	jg	.Ltmp1376 # Offset: 222
.Ltmp1375:
    000000e0: 	popq	%rbx
    000000e1: 	xorl	%eax, %eax
    000000e3: 	popq	%rbp
    000000e4: 	popq	%r12
    000000e6: 	popq	%r13
    000000e8: 	retq # Offset: 232
    000000e9: 	nopl	(%rax) # Size: 7
.Ltmp1379:
    000000f0: 	movq	%rax, %rsi
    000000f3: 	sarq	$0x8, %rsi
.Ltmp1383:
    000000f7: 	leaq	(%r10,%rsi,8), %r12
    000000fb: 	shlq	$0x8, %rsi
    000000ff: 	movq	(%r12), %rbp
    00000103: 	subq	%rsi, %rax
    00000106: 	leaq	0x200(%rbp), %r13
    0000010d: 	leaq	(%rbp,%rax,2), %rax
    00000112: 	jmp	.Ltmp1382 # Offset: 274
    00000114: 	nopl	(%rax) # Size: 4
.Ltmp1378:
    00000118: 	movq	%rax, %rsi
    0000011b: 	notq	%rsi
    0000011e: 	shrq	$0x8, %rsi
    00000122: 	notq	%rsi
    00000125: 	jmp	.Ltmp1383 # Offset: 293
    00000127: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1377:
    00000130: 	movq	0x8(%r12), %rdi
    00000135: 	addq	$0x8, %r12
    00000139: 	leaq	0x200(%rdi), %r13
    00000140: 	movq	%rdi, %rbp
    00000143: 	jmp	.Ltmp1384 # Offset: 323
    00000148: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1381:
    00000150: 	popq	%rbx
    00000151: 	movl	$0x1, %eax
    00000156: 	popq	%rbp
    00000157: 	popq	%r12
    00000159: 	popq	%r13
    0000015b: 	retq # Offset: 347
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch4ISt15_Deque_iteratorItRtPtEtEbT_S4_T0_"

Binary Function "_Z13binarysearch2ISt15_Deque_iteratorIiRiPiEiEbT_S4_T0_" after disassembly {
  Number      : 239
  State       : disassembled
  Address     : 0x8650
  Size        : 0x15c
  MaxSize     : 0x160
  Offset      : 0x8650
  Section     : .text
  Orc Section : .local.text._Z13binarysearch2ISt15_Deque_iteratorIiRiPiEiEbT_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0238:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	movq	%rdi, %r9
    00000009: 	pushq	%r12
    0000000b: 	movq	0x18(%r9), %r10
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	0x18(%rsi), %rax
    00000015: 	movq	0x10(%r9), %rbx
    00000019: 	movq	(%rdi), %rdi
    0000001c: 	movq	%rax, %rcx
    0000001f: 	subq	%r10, %rcx
    00000022: 	sarq	$0x3, %rcx
    00000026: 	cmpq	$0x1, %rax
    0000002a: 	movq	(%rsi), %rax
    0000002d: 	adcq	$-0x1, %rcx
    00000031: 	subq	0x8(%rsi), %rax
    00000035: 	sarq	$0x2, %rax
    00000039: 	shlq	$0x7, %rcx
    0000003d: 	addq	%rax, %rcx
    00000040: 	movq	%rbx, %rax
    00000043: 	subq	%rdi, %rax
    00000046: 	sarq	$0x2, %rax
    0000004a: 	addq	%rax, %rcx
    0000004d: 	je	.Ltmp1385 # Offset: 77
    00000053: 	movq	0x8(%r9), %r8
    00000057: 	movl	%edx, %r11d
    0000005a: 	jmp	.Ltmp1386 # Offset: 90
    0000005c: 	nopl	(%rax) # Size: 4
.Ltmp1390:
    00000060: 	leaq	0x4(%rdx), %rdi
    00000064: 	cmpq	%r13, %rdi
    00000067: 	je	.Ltmp1387 # Offset: 103
.Ltmp1394:
    0000006d: 	movq	%rdi, %xmm0
    00000072: 	movq	%rbp, %xmm1
    00000077: 	movq	%r12, %r10
    0000007a: 	movq	%r13, %rbx
    0000007d: 	punpcklqdq	%xmm1, %xmm0
    00000081: 	movq	%r12, %xmm2
    00000086: 	addq	$0x1, %rax
    0000008a: 	movq	%rbp, %r8
    0000008d: 	movups	%xmm0, (%r9)
    00000091: 	movq	%r13, %xmm0
    00000096: 	subq	%rax, %rcx
    00000099: 	punpcklqdq	%xmm2, %xmm0
    0000009d: 	movups	%xmm0, 0x10(%r9)
    000000a2: 	testq	%rcx, %rcx
    000000a5: 	je	.Ltmp1385 # Offset: 165
.Ltmp1386:
    000000a7: 	movq	%rcx, %rax
    000000aa: 	movq	%rdi, %rdx
    000000ad: 	shrq	$0x3f, %rax
    000000b1: 	subq	%r8, %rdx
    000000b4: 	addq	%rcx, %rax
    000000b7: 	sarq	$0x2, %rdx
    000000bb: 	sarq	%rax
    000000be: 	addq	%rax, %rdx
    000000c1: 	js	.Ltmp1388 # Offset: 193
    000000c3: 	cmpq	$0x7f, %rdx
    000000c7: 	jg	.Ltmp1389 # Offset: 199
    000000c9: 	leaq	(%rdi,%rax,4), %rdx
    000000cd: 	movq	%r10, %r12
    000000d0: 	movq	%rbx, %r13
    000000d3: 	movq	%r8, %rbp
.Ltmp1392:
    000000d6: 	cmpl	%r11d, (%rdx)
    000000d9: 	jl	.Ltmp1390 # Offset: 217
    000000db: 	jle	.Ltmp1391 # Offset: 219
    000000dd: 	movq	%rax, %rcx
    000000e0: 	testq	%rcx, %rcx
    000000e3: 	jne	.Ltmp1386 # Offset: 227
.Ltmp1385:
    000000e5: 	popq	%rbx
    000000e6: 	xorl	%eax, %eax
    000000e8: 	popq	%rbp
    000000e9: 	popq	%r12
    000000eb: 	popq	%r13
    000000ed: 	retq # Offset: 237
    000000ee: 	nop # Size: 2
.Ltmp1389:
    000000f0: 	movq	%rdx, %rsi
    000000f3: 	sarq	$0x7, %rsi
.Ltmp1393:
    000000f7: 	leaq	(%r10,%rsi,8), %r12
    000000fb: 	shlq	$0x7, %rsi
    000000ff: 	movq	(%r12), %rbp
    00000103: 	subq	%rsi, %rdx
    00000106: 	leaq	0x200(%rbp), %r13
    0000010d: 	leaq	(%rbp,%rdx,4), %rdx
    00000112: 	jmp	.Ltmp1392 # Offset: 274
    00000114: 	nopl	(%rax) # Size: 4
.Ltmp1388:
    00000118: 	movq	%rdx, %rsi
    0000011b: 	notq	%rsi
    0000011e: 	shrq	$0x7, %rsi
    00000122: 	notq	%rsi
    00000125: 	jmp	.Ltmp1393 # Offset: 293
    00000127: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1387:
    00000130: 	movq	0x8(%r12), %rdi
    00000135: 	addq	$0x8, %r12
    00000139: 	leaq	0x200(%rdi), %r13
    00000140: 	movq	%rdi, %rbp
    00000143: 	jmp	.Ltmp1394 # Offset: 323
    00000148: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1391:
    00000150: 	popq	%rbx
    00000151: 	movl	$0x1, %eax
    00000156: 	popq	%rbp
    00000157: 	popq	%r12
    00000159: 	popq	%r13
    0000015b: 	retq # Offset: 347
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch2ISt15_Deque_iteratorIiRiPiEiEbT_S4_T0_"

Binary Function "_Z13binarysearch2ISt15_Deque_iteratorIfRfPfEfEbT_S4_T0_" after disassembly {
  Number      : 240
  State       : disassembled
  Address     : 0x87b0
  Size        : 0x15d
  MaxSize     : 0x160
  Offset      : 0x87b0
  Section     : .text
  Orc Section : .local.text._Z13binarysearch2ISt15_Deque_iteratorIfRfPfEfEbT_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0239:
    00000000: 	endbr64
    00000004: 	movq	0x18(%rsi), %rax
    00000008: 	movq	%rdi, %r9
    0000000b: 	movq	(%rdi), %rdi
    0000000e: 	movq	0x18(%r9), %r10
    00000012: 	movq	0x10(%r9), %r11
    00000016: 	movq	%rax, %rcx
    00000019: 	subq	%r10, %rcx
    0000001c: 	sarq	$0x3, %rcx
    00000020: 	cmpq	$0x1, %rax
    00000024: 	movq	(%rsi), %rax
    00000027: 	adcq	$-0x1, %rcx
    0000002b: 	subq	0x8(%rsi), %rax
    0000002f: 	sarq	$0x2, %rax
    00000033: 	shlq	$0x7, %rcx
    00000037: 	addq	%rax, %rcx
    0000003a: 	movq	%r11, %rax
    0000003d: 	subq	%rdi, %rax
    00000040: 	sarq	$0x2, %rax
    00000044: 	addq	%rax, %rcx
    00000047: 	je	.Ltmp1395 # Offset: 71
    0000004d: 	pushq	%r12
    0000004f: 	movq	0x8(%r9), %r8
    00000053: 	pushq	%rbp
    00000054: 	pushq	%rbx
    00000055: 	jmp	.Ltmp1396 # Offset: 85
    00000057: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1401:
    00000060: 	leaq	0x4(%rdx), %rdi
    00000064: 	cmpq	%r12, %rdi
    00000067: 	je	.Ltmp1397 # Offset: 103
.Ltmp1405:
    0000006d: 	movq	%rdi, %xmm1
    00000072: 	movq	%rbx, %xmm2
    00000077: 	movq	%rbp, %r10
    0000007a: 	movq	%r12, %r11
    0000007d: 	punpcklqdq	%xmm2, %xmm1
    00000081: 	movq	%rbp, %xmm3
    00000086: 	addq	$0x1, %rax
    0000008a: 	movq	%rbx, %r8
    0000008d: 	movups	%xmm1, (%r9)
    00000091: 	movq	%r12, %xmm1
    00000096: 	subq	%rax, %rcx
    00000099: 	punpcklqdq	%xmm3, %xmm1
    0000009d: 	movups	%xmm1, 0x10(%r9)
    000000a2: 	testq	%rcx, %rcx
    000000a5: 	je	.Ltmp1398 # Offset: 165
.Ltmp1396:
    000000a7: 	movq	%rcx, %rax
    000000aa: 	movq	%rdi, %rdx
    000000ad: 	shrq	$0x3f, %rax
    000000b1: 	subq	%r8, %rdx
    000000b4: 	addq	%rcx, %rax
    000000b7: 	sarq	$0x2, %rdx
    000000bb: 	sarq	%rax
    000000be: 	addq	%rax, %rdx
    000000c1: 	js	.Ltmp1399 # Offset: 193
    000000c3: 	cmpq	$0x7f, %rdx
    000000c7: 	jg	.Ltmp1400 # Offset: 199
    000000c9: 	leaq	(%rdi,%rax,4), %rdx
    000000cd: 	movq	%r10, %rbp
    000000d0: 	movq	%r11, %r12
    000000d3: 	movq	%r8, %rbx
.Ltmp1403:
    000000d6: 	movss	(%rdx), %xmm1
    000000da: 	comiss	%xmm1, %xmm0
    000000dd: 	ja	.Ltmp1401 # Offset: 221
    000000df: 	comiss	%xmm0, %xmm1
    000000e2: 	jbe	.Ltmp1402 # Offset: 226
    000000e4: 	movq	%rax, %rcx
    000000e7: 	testq	%rcx, %rcx
    000000ea: 	jne	.Ltmp1396 # Offset: 234
.Ltmp1398:
    000000ec: 	popq	%rbx
    000000ed: 	xorl	%eax, %eax
    000000ef: 	popq	%rbp
    000000f0: 	popq	%r12
    000000f2: 	retq # Offset: 242
    000000f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1400:
    000000f8: 	movq	%rdx, %rsi
    000000fb: 	sarq	$0x7, %rsi
.Ltmp1404:
    000000ff: 	leaq	(%r10,%rsi,8), %rbp
    00000103: 	shlq	$0x7, %rsi
    00000107: 	movq	(%rbp), %rbx
    0000010b: 	subq	%rsi, %rdx
    0000010e: 	leaq	0x200(%rbx), %r12
    00000115: 	leaq	(%rbx,%rdx,4), %rdx
    00000119: 	jmp	.Ltmp1403 # Offset: 281
    0000011b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1399:
    00000120: 	movq	%rdx, %rsi
    00000123: 	notq	%rsi
    00000126: 	shrq	$0x7, %rsi
    0000012a: 	notq	%rsi
    0000012d: 	jmp	.Ltmp1404 # Offset: 301
    0000012f: 	nop # Size: 1
.Ltmp1397:
    00000130: 	movq	0x8(%rbp), %rdi
    00000134: 	addq	$0x8, %rbp
    00000138: 	leaq	0x200(%rdi), %r12
    0000013f: 	movq	%rdi, %rbx
    00000142: 	jmp	.Ltmp1405 # Offset: 322
    00000147: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1402:
    00000150: 	popq	%rbx
    00000151: 	movl	$0x1, %eax
    00000156: 	popq	%rbp
    00000157: 	popq	%r12
    00000159: 	retq # Offset: 345
.Ltmp1395:
    0000015a: 	xorl	%eax, %eax
    0000015c: 	retq # Offset: 348
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch2ISt15_Deque_iteratorIfRfPfEfEbT_S4_T0_"

Binary Function "_Z13binarysearch4ISt15_Deque_iteratorIiRiPiEiEbT_S4_T0_" after disassembly {
  Number      : 241
  State       : disassembled
  Address     : 0x8910
  Size        : 0x15c
  MaxSize     : 0x160
  Offset      : 0x8910
  Section     : .text
  Orc Section : .local.text._Z13binarysearch4ISt15_Deque_iteratorIiRiPiEiEbT_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0240:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	movq	%rdi, %r9
    00000009: 	pushq	%r12
    0000000b: 	movq	0x18(%r9), %r10
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	0x18(%rsi), %rax
    00000015: 	movq	0x10(%r9), %rbx
    00000019: 	movq	(%rdi), %rdi
    0000001c: 	movq	%rax, %rcx
    0000001f: 	subq	%r10, %rcx
    00000022: 	sarq	$0x3, %rcx
    00000026: 	cmpq	$0x1, %rax
    0000002a: 	movq	(%rsi), %rax
    0000002d: 	adcq	$-0x1, %rcx
    00000031: 	subq	0x8(%rsi), %rax
    00000035: 	sarq	$0x2, %rax
    00000039: 	shlq	$0x7, %rcx
    0000003d: 	addq	%rax, %rcx
    00000040: 	movq	%rbx, %rax
    00000043: 	subq	%rdi, %rax
    00000046: 	sarq	$0x2, %rax
    0000004a: 	addq	%rax, %rcx
    0000004d: 	testq	%rcx, %rcx
    00000050: 	jle	.Ltmp1406 # Offset: 80
    00000056: 	movq	0x8(%r9), %r8
    0000005a: 	movl	%edx, %r11d
    0000005d: 	jmp	.Ltmp1407 # Offset: 93
    0000005f: 	nop # Size: 1
.Ltmp1411:
    00000060: 	leaq	0x4(%rax), %rdi
    00000064: 	cmpq	%r13, %rdi
    00000067: 	je	.Ltmp1408 # Offset: 103
.Ltmp1415:
    0000006d: 	movq	%rdi, %xmm0
    00000072: 	movq	%rbp, %xmm1
    00000077: 	movq	%r12, %r10
    0000007a: 	movq	%r13, %rbx
    0000007d: 	punpcklqdq	%xmm1, %xmm0
    00000081: 	movq	%r12, %xmm2
    00000086: 	addq	$0x1, %rdx
    0000008a: 	movq	%rbp, %r8
    0000008d: 	movups	%xmm0, (%r9)
    00000091: 	movq	%r13, %xmm0
    00000096: 	subq	%rdx, %rcx
    00000099: 	punpcklqdq	%xmm2, %xmm0
    0000009d: 	movups	%xmm0, 0x10(%r9)
    000000a2: 	testq	%rcx, %rcx
    000000a5: 	jle	.Ltmp1406 # Offset: 165
.Ltmp1407:
    000000a7: 	movq	%rdi, %rax
    000000aa: 	movq	%rcx, %rdx
    000000ad: 	subq	%r8, %rax
    000000b0: 	sarq	%rdx
    000000b3: 	sarq	$0x2, %rax
    000000b7: 	addq	%rdx, %rax
    000000ba: 	js	.Ltmp1409 # Offset: 186
    000000bc: 	cmpq	$0x7f, %rax
    000000c0: 	jg	.Ltmp1410 # Offset: 192
    000000c2: 	leaq	(%rdi,%rdx,4), %rax
    000000c6: 	movq	%r10, %r12
    000000c9: 	movq	%rbx, %r13
    000000cc: 	movq	%r8, %rbp
.Ltmp1413:
    000000cf: 	cmpl	%r11d, (%rax)
    000000d2: 	jl	.Ltmp1411 # Offset: 210
    000000d4: 	jle	.Ltmp1412 # Offset: 212
    000000d6: 	movq	%rdx, %rcx
    000000d9: 	testq	%rcx, %rcx
    000000dc: 	jg	.Ltmp1407 # Offset: 220
.Ltmp1406:
    000000de: 	popq	%rbx
    000000df: 	xorl	%eax, %eax
    000000e1: 	popq	%rbp
    000000e2: 	popq	%r12
    000000e4: 	popq	%r13
    000000e6: 	retq # Offset: 230
    000000e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1410:
    000000f0: 	movq	%rax, %rsi
    000000f3: 	sarq	$0x7, %rsi
.Ltmp1414:
    000000f7: 	leaq	(%r10,%rsi,8), %r12
    000000fb: 	shlq	$0x7, %rsi
    000000ff: 	movq	(%r12), %rbp
    00000103: 	subq	%rsi, %rax
    00000106: 	leaq	0x200(%rbp), %r13
    0000010d: 	leaq	(%rbp,%rax,4), %rax
    00000112: 	jmp	.Ltmp1413 # Offset: 274
    00000114: 	nopl	(%rax) # Size: 4
.Ltmp1409:
    00000118: 	movq	%rax, %rsi
    0000011b: 	notq	%rsi
    0000011e: 	shrq	$0x7, %rsi
    00000122: 	notq	%rsi
    00000125: 	jmp	.Ltmp1414 # Offset: 293
    00000127: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1408:
    00000130: 	movq	0x8(%r12), %rdi
    00000135: 	addq	$0x8, %r12
    00000139: 	leaq	0x200(%rdi), %r13
    00000140: 	movq	%rdi, %rbp
    00000143: 	jmp	.Ltmp1415 # Offset: 323
    00000148: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1412:
    00000150: 	popq	%rbx
    00000151: 	movl	$0x1, %eax
    00000156: 	popq	%rbp
    00000157: 	popq	%r12
    00000159: 	popq	%r13
    0000015b: 	retq # Offset: 347
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch4ISt15_Deque_iteratorIiRiPiEiEbT_S4_T0_"

Binary Function "_Z13binarysearch4ISt15_Deque_iteratorIfRfPfEfEbT_S4_T0_" after disassembly {
  Number      : 242
  State       : disassembled
  Address     : 0x8a70
  Size        : 0x15d
  MaxSize     : 0x160
  Offset      : 0x8a70
  Section     : .text
  Orc Section : .local.text._Z13binarysearch4ISt15_Deque_iteratorIfRfPfEfEbT_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0241:
    00000000: 	endbr64
    00000004: 	movq	0x18(%rsi), %rax
    00000008: 	movq	%rdi, %r9
    0000000b: 	movq	(%rdi), %rdi
    0000000e: 	movq	0x18(%r9), %r10
    00000012: 	movq	0x10(%r9), %r11
    00000016: 	movq	%rax, %rcx
    00000019: 	subq	%r10, %rcx
    0000001c: 	sarq	$0x3, %rcx
    00000020: 	cmpq	$0x1, %rax
    00000024: 	movq	(%rsi), %rax
    00000027: 	adcq	$-0x1, %rcx
    0000002b: 	subq	0x8(%rsi), %rax
    0000002f: 	sarq	$0x2, %rax
    00000033: 	shlq	$0x7, %rcx
    00000037: 	addq	%rax, %rcx
    0000003a: 	movq	%r11, %rax
    0000003d: 	subq	%rdi, %rax
    00000040: 	sarq	$0x2, %rax
    00000044: 	addq	%rax, %rcx
    00000047: 	testq	%rcx, %rcx
    0000004a: 	jle	.Ltmp1416 # Offset: 74
    00000050: 	pushq	%r12
    00000052: 	movq	0x8(%r9), %r8
    00000056: 	pushq	%rbp
    00000057: 	pushq	%rbx
    00000058: 	jmp	.Ltmp1417 # Offset: 88
    0000005a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1422:
    00000060: 	leaq	0x4(%rax), %rdi
    00000064: 	cmpq	%r12, %rdi
    00000067: 	je	.Ltmp1418 # Offset: 103
.Ltmp1426:
    0000006d: 	movq	%rdi, %xmm1
    00000072: 	movq	%rbx, %xmm2
    00000077: 	movq	%rbp, %r10
    0000007a: 	movq	%r12, %r11
    0000007d: 	punpcklqdq	%xmm2, %xmm1
    00000081: 	movq	%rbp, %xmm3
    00000086: 	addq	$0x1, %rdx
    0000008a: 	movq	%rbx, %r8
    0000008d: 	movups	%xmm1, (%r9)
    00000091: 	movq	%r12, %xmm1
    00000096: 	subq	%rdx, %rcx
    00000099: 	punpcklqdq	%xmm3, %xmm1
    0000009d: 	movups	%xmm1, 0x10(%r9)
    000000a2: 	testq	%rcx, %rcx
    000000a5: 	jle	.Ltmp1419 # Offset: 165
.Ltmp1417:
    000000a7: 	movq	%rdi, %rax
    000000aa: 	movq	%rcx, %rdx
    000000ad: 	subq	%r8, %rax
    000000b0: 	sarq	%rdx
    000000b3: 	sarq	$0x2, %rax
    000000b7: 	addq	%rdx, %rax
    000000ba: 	js	.Ltmp1420 # Offset: 186
    000000bc: 	cmpq	$0x7f, %rax
    000000c0: 	jg	.Ltmp1421 # Offset: 192
    000000c2: 	leaq	(%rdi,%rdx,4), %rax
    000000c6: 	movq	%r10, %rbp
    000000c9: 	movq	%r11, %r12
    000000cc: 	movq	%r8, %rbx
.Ltmp1424:
    000000cf: 	movss	(%rax), %xmm1
    000000d3: 	comiss	%xmm1, %xmm0
    000000d6: 	ja	.Ltmp1422 # Offset: 214
    000000d8: 	comiss	%xmm0, %xmm1
    000000db: 	jbe	.Ltmp1423 # Offset: 219
    000000dd: 	movq	%rdx, %rcx
    000000e0: 	testq	%rcx, %rcx
    000000e3: 	jg	.Ltmp1417 # Offset: 227
.Ltmp1419:
    000000e5: 	popq	%rbx
    000000e6: 	xorl	%eax, %eax
    000000e8: 	popq	%rbp
    000000e9: 	popq	%r12
    000000eb: 	retq # Offset: 235
    000000ec: 	nopl	(%rax) # Size: 4
.Ltmp1421:
    000000f0: 	movq	%rax, %rsi
    000000f3: 	sarq	$0x7, %rsi
.Ltmp1425:
    000000f7: 	leaq	(%r10,%rsi,8), %rbp
    000000fb: 	shlq	$0x7, %rsi
    000000ff: 	movq	(%rbp), %rbx
    00000103: 	subq	%rsi, %rax
    00000106: 	leaq	0x200(%rbx), %r12
    0000010d: 	leaq	(%rbx,%rax,4), %rax
    00000111: 	jmp	.Ltmp1424 # Offset: 273
    00000113: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1420:
    00000118: 	movq	%rax, %rsi
    0000011b: 	notq	%rsi
    0000011e: 	shrq	$0x7, %rsi
    00000122: 	notq	%rsi
    00000125: 	jmp	.Ltmp1425 # Offset: 293
    00000127: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1418:
    00000130: 	movq	0x8(%rbp), %rdi
    00000134: 	addq	$0x8, %rbp
    00000138: 	leaq	0x200(%rdi), %r12
    0000013f: 	movq	%rdi, %rbx
    00000142: 	jmp	.Ltmp1426 # Offset: 322
    00000147: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1423:
    00000150: 	popq	%rbx
    00000151: 	movl	$0x1, %eax
    00000156: 	popq	%rbp
    00000157: 	popq	%r12
    00000159: 	retq # Offset: 345
.Ltmp1416:
    0000015a: 	xorl	%eax, %eax
    0000015c: 	retq # Offset: 348
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch4ISt15_Deque_iteratorIfRfPfEfEbT_S4_T0_"

Binary Function "_Z12lower_bound1ISt15_Deque_iteratorIaRaPaEaET_S4_S4_T0_" after disassembly {
  Number      : 243
  State       : disassembled
  Address     : 0x8bd0
  Size        : 0x185
  MaxSize     : 0x190
  Offset      : 0x8bd0
  Section     : .text
  Orc Section : .local.text._Z12lower_bound1ISt15_Deque_iteratorIaRaPaEaET_S4_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0242:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rdi, %r8
    00000008: 	movq	%rsi, %r9
    0000000b: 	movl	%ecx, %r11d
    0000000e: 	pushq	%rbx
    0000000f: 	movq	(%rsi), %rbx
    00000012: 	movq	(%rdx), %rax
    00000015: 	movq	0x8(%rsi), %rcx
    00000019: 	movq	0x10(%rsi), %rdi
    0000001d: 	movq	0x18(%rsi), %rsi
    00000021: 	cmpq	%rbx, %rax
    00000024: 	je	.Ltmp1427 # Offset: 36
    0000002a: 	movq	%rdx, %r10
    0000002d: 	jmp	.Ltmp1428 # Offset: 45
    0000002f: 	nop # Size: 1
.Ltmp1432:
    00000030: 	leaq	0x1(%rax), %rbx
    00000034: 	cmpq	%rdi, %rbx
    00000037: 	je	.Ltmp1429 # Offset: 55
.Ltmp1435:
    0000003d: 	movq	%rbx, %xmm1
    00000042: 	movq	%rcx, %xmm4
    00000047: 	movups	%xmm0, 0x10(%r9)
    0000004c: 	punpcklqdq	%xmm4, %xmm1
    00000050: 	movups	%xmm1, (%r9)
    00000054: 	movq	(%r10), %rax
    00000057: 	cmpq	%rax, %rbx
    0000005a: 	je	.Ltmp1427 # Offset: 90
.Ltmp1428:
    00000060: 	movq	0x18(%r10), %rbp
    00000064: 	movq	%rbp, %rdx
    00000067: 	subq	%rsi, %rdx
    0000006a: 	sarq	$0x3, %rdx
    0000006e: 	cmpq	$0x1, %rbp
    00000072: 	adcq	$-0x1, %rdx
    00000076: 	subq	0x8(%r10), %rax
    0000007a: 	shlq	$0x9, %rdx
    0000007e: 	addq	%rdx, %rax
    00000081: 	movq	%rdi, %rdx
    00000084: 	subq	%rbx, %rdx
    00000087: 	addq	%rdx, %rax
    0000008a: 	movq	%rax, %rdx
    0000008d: 	shrq	$0x3f, %rdx
    00000091: 	addq	%rax, %rdx
    00000094: 	movq	%rbx, %rax
    00000097: 	sarq	%rdx
    0000009a: 	subq	%rcx, %rax
    0000009d: 	addq	%rdx, %rax
    000000a0: 	js	.Ltmp1430 # Offset: 160
    000000a6: 	cmpq	$0x1ff, %rax
    000000ac: 	jg	.Ltmp1431 # Offset: 172
    000000ae: 	leaq	(%rbx,%rdx), %rax
.Ltmp1433:
    000000b2: 	movq	%rax, %xmm1
    000000b7: 	movq	%rcx, %xmm2
    000000bc: 	movq	%rdi, %xmm0
    000000c1: 	movq	%rsi, %xmm3
    000000c6: 	punpcklqdq	%xmm2, %xmm1
    000000ca: 	punpcklqdq	%xmm3, %xmm0
    000000ce: 	cmpb	%r11b, (%rax)
    000000d1: 	jl	.Ltmp1432 # Offset: 209
    000000d7: 	movups	%xmm1, (%r10)
    000000db: 	movups	%xmm0, 0x10(%r10)
    000000e0: 	movq	(%r9), %rbx
    000000e3: 	movq	0x8(%r9), %rcx
    000000e7: 	movq	0x10(%r9), %rdi
    000000eb: 	movq	0x18(%r9), %rsi
    000000ef: 	cmpq	%rax, %rbx
    000000f2: 	jne	.Ltmp1428 # Offset: 242
.Ltmp1427:
    000000f8: 	movq	%rax, %xmm0
    000000fd: 	movq	%rcx, %xmm6
    00000102: 	movq	%rsi, %xmm7
    00000107: 	popq	%rbx
    00000108: 	punpcklqdq	%xmm6, %xmm0
    0000010c: 	movq	%r8, %rax
    0000010f: 	popq	%rbp
    00000110: 	movups	%xmm0, (%r8)
    00000114: 	movq	%rdi, %xmm0
    00000119: 	punpcklqdq	%xmm7, %xmm0
    0000011d: 	movups	%xmm0, 0x10(%r8)
    00000122: 	retq # Offset: 290
    00000123: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1431:
    00000128: 	movq	%rax, %rdx
    0000012b: 	sarq	$0x9, %rdx
.Ltmp1434:
    0000012f: 	leaq	(%rsi,%rdx,8), %rsi
    00000133: 	shlq	$0x9, %rdx
    00000137: 	movq	(%rsi), %rcx
    0000013a: 	subq	%rdx, %rax
    0000013d: 	leaq	0x200(%rcx), %rdi
    00000144: 	addq	%rcx, %rax
    00000147: 	jmp	.Ltmp1433 # Offset: 327
    0000014c: 	nopl	(%rax) # Size: 4
.Ltmp1430:
    00000150: 	movq	%rax, %rdx
    00000153: 	notq	%rdx
    00000156: 	shrq	$0x9, %rdx
    0000015a: 	notq	%rdx
    0000015d: 	jmp	.Ltmp1434 # Offset: 349
    0000015f: 	nop # Size: 1
.Ltmp1429:
    00000160: 	movq	0x8(%rsi), %rbx
    00000164: 	addq	$0x8, %rsi
    00000168: 	movq	%rsi, %xmm5
    0000016d: 	leaq	0x200(%rbx), %rdi
    00000174: 	movq	%rbx, %rcx
    00000177: 	movq	%rdi, %xmm0
    0000017c: 	punpcklqdq	%xmm5, %xmm0
    00000180: 	jmp	.Ltmp1435 # Offset: 384
DWARF CFI Instructions:
    <empty>
End of Function "_Z12lower_bound1ISt15_Deque_iteratorIaRaPaEaET_S4_S4_T0_"

Binary Function "_Z12upper_bound1ISt15_Deque_iteratorIaRaPaEaET_S4_S4_T0_" after disassembly {
  Number      : 244
  State       : disassembled
  Address     : 0x8d60
  Size        : 0x195
  MaxSize     : 0x1a0
  Offset      : 0x8d60
  Section     : .text
  Orc Section : .local.text._Z12upper_bound1ISt15_Deque_iteratorIaRaPaEaET_S4_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0243:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rdi, %r8
    00000008: 	movq	%rsi, %r9
    0000000b: 	movl	%ecx, %r11d
    0000000e: 	pushq	%rbx
    0000000f: 	movq	(%rsi), %rbx
    00000012: 	movq	(%rdx), %rax
    00000015: 	movq	0x8(%rsi), %rcx
    00000019: 	movq	0x10(%rsi), %rdi
    0000001d: 	movq	0x18(%rsi), %rsi
    00000021: 	cmpq	%rbx, %rax
    00000024: 	je	.Ltmp1436 # Offset: 36
    0000002a: 	movq	%rdx, %r10
    0000002d: 	jmp	.Ltmp1437 # Offset: 45
    0000002f: 	nop # Size: 1
.Ltmp1440:
    00000030: 	movups	%xmm1, (%r10)
    00000034: 	movups	%xmm0, 0x10(%r10)
    00000039: 	movq	(%r9), %rbx
    0000003c: 	movq	0x8(%r9), %rcx
    00000040: 	movq	0x10(%r9), %rdi
    00000044: 	movq	0x18(%r9), %rsi
    00000048: 	cmpq	%rax, %rbx
    0000004b: 	je	.Ltmp1436 # Offset: 75
.Ltmp1437:
    00000051: 	movq	0x18(%r10), %rbp
    00000055: 	movq	%rbp, %rdx
    00000058: 	subq	%rsi, %rdx
    0000005b: 	sarq	$0x3, %rdx
    0000005f: 	cmpq	$0x1, %rbp
    00000063: 	adcq	$-0x1, %rdx
    00000067: 	subq	0x8(%r10), %rax
    0000006b: 	shlq	$0x9, %rdx
    0000006f: 	addq	%rdx, %rax
    00000072: 	movq	%rdi, %rdx
    00000075: 	subq	%rbx, %rdx
    00000078: 	addq	%rdx, %rax
    0000007b: 	movq	%rax, %rdx
    0000007e: 	shrq	$0x3f, %rdx
    00000082: 	addq	%rax, %rdx
    00000085: 	movq	%rbx, %rax
    00000088: 	sarq	%rdx
    0000008b: 	subq	%rcx, %rax
    0000008e: 	addq	%rdx, %rax
    00000091: 	js	.Ltmp1438 # Offset: 145
    00000097: 	cmpq	$0x1ff, %rax
    0000009d: 	jg	.Ltmp1439 # Offset: 157
    000000a3: 	leaq	(%rbx,%rdx), %rax
.Ltmp1442:
    000000a7: 	movq	%rax, %xmm1
    000000ac: 	movq	%rcx, %xmm2
    000000b1: 	movq	%rdi, %xmm0
    000000b6: 	movq	%rsi, %xmm3
    000000bb: 	punpcklqdq	%xmm2, %xmm1
    000000bf: 	punpcklqdq	%xmm3, %xmm0
    000000c3: 	cmpb	%r11b, (%rax)
    000000c6: 	jg	.Ltmp1440 # Offset: 198
    000000cc: 	leaq	0x1(%rax), %rbx
    000000d0: 	cmpq	%rdi, %rbx
    000000d3: 	je	.Ltmp1441 # Offset: 211
.Ltmp1444:
    000000d9: 	movq	%rbx, %xmm1
    000000de: 	movq	%rcx, %xmm4
    000000e3: 	movups	%xmm0, 0x10(%r9)
    000000e8: 	punpcklqdq	%xmm4, %xmm1
    000000ec: 	movups	%xmm1, (%r9)
    000000f0: 	movq	(%r10), %rax
    000000f3: 	cmpq	%rax, %rbx
    000000f6: 	jne	.Ltmp1437 # Offset: 246
.Ltmp1436:
    000000fc: 	movq	%rax, %xmm0
    00000101: 	movq	%rcx, %xmm6
    00000106: 	movq	%rsi, %xmm7
    0000010b: 	popq	%rbx
    0000010c: 	punpcklqdq	%xmm6, %xmm0
    00000110: 	movq	%r8, %rax
    00000113: 	popq	%rbp
    00000114: 	movups	%xmm0, (%r8)
    00000118: 	movq	%rdi, %xmm0
    0000011d: 	punpcklqdq	%xmm7, %xmm0
    00000121: 	movups	%xmm0, 0x10(%r8)
    00000126: 	retq # Offset: 294
    00000127: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1439:
    00000130: 	movq	%rax, %rdx
    00000133: 	sarq	$0x9, %rdx
.Ltmp1443:
    00000137: 	leaq	(%rsi,%rdx,8), %rsi
    0000013b: 	shlq	$0x9, %rdx
    0000013f: 	movq	(%rsi), %rcx
    00000142: 	subq	%rdx, %rax
    00000145: 	leaq	0x200(%rcx), %rdi
    0000014c: 	addq	%rcx, %rax
    0000014f: 	jmp	.Ltmp1442 # Offset: 335
    00000154: 	nopl	(%rax) # Size: 4
.Ltmp1438:
    00000158: 	movq	%rax, %rdx
    0000015b: 	notq	%rdx
    0000015e: 	shrq	$0x9, %rdx
    00000162: 	notq	%rdx
    00000165: 	jmp	.Ltmp1443 # Offset: 357
    00000167: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1441:
    00000170: 	movq	0x8(%rsi), %rbx
    00000174: 	addq	$0x8, %rsi
    00000178: 	movq	%rsi, %xmm5
    0000017d: 	leaq	0x200(%rbx), %rdi
    00000184: 	movq	%rbx, %rcx
    00000187: 	movq	%rdi, %xmm0
    0000018c: 	punpcklqdq	%xmm5, %xmm0
    00000190: 	jmp	.Ltmp1444 # Offset: 400
DWARF CFI Instructions:
    <empty>
End of Function "_Z12upper_bound1ISt15_Deque_iteratorIaRaPaEaET_S4_S4_T0_"

Binary Function "_Z12lower_bound2ISt15_Deque_iteratorIaRaPaEaET_S4_S4_T0_" after disassembly {
  Number      : 245
  State       : disassembled
  Address     : 0x8f00
  Size        : 0x158
  MaxSize     : 0x160
  Offset      : 0x8f00
  Section     : .text
  Orc Section : .local.text._Z12lower_bound2ISt15_Deque_iteratorIaRaPaEaET_S4_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0244:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	movq	%rdi, %r8
    00000009: 	movq	0x18(%rsi), %rdi
    0000000d: 	movl	%ecx, %r9d
    00000010: 	movq	0x10(%rsi), %r10
    00000014: 	movq	(%rsi), %rcx
    00000017: 	pushq	%r13
    00000019: 	pushq	%r12
    0000001b: 	pushq	%rbp
    0000001c: 	pushq	%rbx
    0000001d: 	movq	0x18(%rdx), %r11
    00000021: 	movq	%r11, %rax
    00000024: 	subq	%rdi, %rax
    00000027: 	sarq	$0x3, %rax
    0000002b: 	cmpq	$0x1, %r11
    0000002f: 	movq	(%rdx), %r11
    00000032: 	adcq	$-0x1, %rax
    00000036: 	subq	0x8(%rdx), %r11
    0000003a: 	movq	%r10, %rdx
    0000003d: 	shlq	$0x9, %rax
    00000041: 	subq	%rcx, %rdx
    00000044: 	addq	%r11, %rax
    00000047: 	movq	0x8(%rsi), %r11
    0000004b: 	addq	%rdx, %rax
    0000004e: 	je	.Ltmp1445 # Offset: 78
    00000054: 	movq	%rax, %rbx
    00000057: 	jmp	.Ltmp1446 # Offset: 87
    00000059: 	nopl	(%rax) # Size: 7
.Ltmp1450:
    00000060: 	leaq	0x1(%rdx), %rcx
    00000064: 	cmpq	%r13, %rcx
    00000067: 	je	.Ltmp1447 # Offset: 103
.Ltmp1453:
    0000006d: 	movq	%rcx, %xmm0
    00000072: 	movq	%rbp, %xmm1
    00000077: 	movq	%r12, %rdi
    0000007a: 	movq	%r13, %r10
    0000007d: 	punpcklqdq	%xmm1, %xmm0
    00000081: 	movq	%r12, %xmm2
    00000086: 	addq	$0x1, %rax
    0000008a: 	movq	%rbp, %r11
    0000008d: 	movups	%xmm0, (%rsi)
    00000090: 	movq	%r13, %xmm0
    00000095: 	subq	%rax, %rbx
    00000098: 	punpcklqdq	%xmm2, %xmm0
    0000009c: 	movups	%xmm0, 0x10(%rsi)
    000000a0: 	testq	%rbx, %rbx
    000000a3: 	je	.Ltmp1445 # Offset: 163
.Ltmp1446:
    000000a5: 	movq	%rbx, %rax
    000000a8: 	movq	%rcx, %rdx
    000000ab: 	shrq	$0x3f, %rax
    000000af: 	subq	%r11, %rdx
    000000b2: 	addq	%rbx, %rax
    000000b5: 	sarq	%rax
    000000b8: 	addq	%rax, %rdx
    000000bb: 	js	.Ltmp1448 # Offset: 187
    000000bd: 	cmpq	$0x1ff, %rdx
    000000c4: 	jg	.Ltmp1449 # Offset: 196
    000000c6: 	leaq	(%rcx,%rax), %rdx
    000000ca: 	movq	%rdi, %r12
    000000cd: 	movq	%r10, %r13
    000000d0: 	movq	%r11, %rbp
.Ltmp1451:
    000000d3: 	cmpb	%r9b, (%rdx)
    000000d6: 	jl	.Ltmp1450 # Offset: 214
    000000d8: 	movq	%rax, %rbx
    000000db: 	testq	%rbx, %rbx
    000000de: 	jne	.Ltmp1446 # Offset: 222
.Ltmp1445:
    000000e0: 	popq	%rbx
    000000e1: 	movq	%r8, %rax
    000000e4: 	popq	%rbp
    000000e5: 	movq	%rcx, (%r8)
    000000e8: 	popq	%r12
    000000ea: 	popq	%r13
    000000ec: 	movq	%r11, 0x8(%r8)
    000000f0: 	movq	%r10, 0x10(%r8)
    000000f4: 	popq	%r14
    000000f6: 	movq	%rdi, 0x18(%r8)
    000000fa: 	retq # Offset: 250
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1449:
    00000100: 	movq	%rdx, %r14
    00000103: 	sarq	$0x9, %r14
.Ltmp1452:
    00000107: 	leaq	(%rdi,%r14,8), %r12
    0000010b: 	shlq	$0x9, %r14
    0000010f: 	movq	(%r12), %rbp
    00000113: 	subq	%r14, %rdx
    00000116: 	leaq	0x200(%rbp), %r13
    0000011d: 	addq	%rbp, %rdx
    00000120: 	jmp	.Ltmp1451 # Offset: 288
    00000122: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1448:
    00000128: 	movq	%rdx, %r14
    0000012b: 	notq	%r14
    0000012e: 	shrq	$0x9, %r14
    00000132: 	notq	%r14
    00000135: 	jmp	.Ltmp1452 # Offset: 309
    00000137: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1447:
    00000140: 	movq	0x8(%r12), %rcx
    00000145: 	addq	$0x8, %r12
    00000149: 	leaq	0x200(%rcx), %r13
    00000150: 	movq	%rcx, %rbp
    00000153: 	jmp	.Ltmp1453 # Offset: 339
DWARF CFI Instructions:
    <empty>
End of Function "_Z12lower_bound2ISt15_Deque_iteratorIaRaPaEaET_S4_S4_T0_"

Binary Function "_Z13binarysearch3ISt15_Deque_iteratorIaRaPaEaEbT_S4_T0_" after disassembly {
  Number      : 246
  State       : disassembled
  Address     : 0x9060
  Size        : 0x8c
  MaxSize     : 0x90
  Offset      : 0x9060
  Section     : .text
  Orc Section : .local.text._Z13binarysearch3ISt15_Deque_iteratorIaRaPaEaEbT_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0245:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movsbl	%dl, %ecx
    00000008: 	movl	%edx, %ebp
    0000000a: 	pushq	%rbx
    0000000b: 	movq	%rsi, %rbx
    0000000e: 	subq	$0x78, %rsp
    00000012: 	movdqu	(%rsi), %xmm1
    00000016: 	movdqu	0x10(%rsi), %xmm2
    0000001b: 	movdqu	0x10(%rdi), %xmm0
    00000020: 	movdqu	(%rdi), %xmm3
    00000024: 	leaq	0x40(%rsp), %rdx
    00000029: 	movq	%rsp, %rdi
    0000002c: 	movq	%fs:0x28, %rax
    00000035: 	movq	%rax, 0x68(%rsp)
    0000003a: 	xorl	%eax, %eax
    0000003c: 	leaq	0x20(%rsp), %rsi
    00000041: 	movaps	%xmm1, 0x40(%rsp)
    00000046: 	movaps	%xmm2, 0x50(%rsp)
    0000004b: 	movaps	%xmm3, 0x20(%rsp)
    00000050: 	movaps	%xmm0, 0x30(%rsp)
    00000055: 	callq	_Z12lower_bound2ISt15_Deque_iteratorIaRaPaEaET_S4_S4_T0_ # Offset: 85
    0000005a: 	movq	(%rsp), %rax
    0000005e: 	xorl	%r8d, %r8d
    00000061: 	cmpq	%rax, (%rbx)
    00000064: 	je	.Ltmp1454 # Offset: 100
    00000066: 	cmpb	%bpl, (%rax)
    00000069: 	sete	%r8b
.Ltmp1454:
    0000006d: 	movq	0x68(%rsp), %rax
    00000072: 	subq	%fs:0x28, %rax
    0000007b: 	jne	.Ltmp1455 # Offset: 123
    0000007d: 	addq	$0x78, %rsp
    00000081: 	movl	%r8d, %eax
    00000084: 	popq	%rbx
    00000085: 	popq	%rbp
    00000086: 	retq # Offset: 134
.Ltmp1455:
    00000087: 	callq	__stack_chk_fail@PLT # Offset: 135
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch3ISt15_Deque_iteratorIaRaPaEaEbT_S4_T0_"

Binary Function "_Z12upper_bound2ISt15_Deque_iteratorIaRaPaEaET_S4_S4_T0_" after disassembly {
  Number      : 247
  State       : disassembled
  Address     : 0x90f0
  Size        : 0x158
  MaxSize     : 0x160
  Offset      : 0x90f0
  Section     : .text
  Orc Section : .local.text._Z12upper_bound2ISt15_Deque_iteratorIaRaPaEaET_S4_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0246:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	movq	%rdi, %r8
    00000009: 	movq	0x18(%rsi), %rdi
    0000000d: 	movl	%ecx, %r9d
    00000010: 	movq	0x10(%rsi), %r10
    00000014: 	movq	(%rsi), %rcx
    00000017: 	pushq	%r13
    00000019: 	pushq	%r12
    0000001b: 	pushq	%rbp
    0000001c: 	pushq	%rbx
    0000001d: 	movq	0x18(%rdx), %r11
    00000021: 	movq	%r11, %rax
    00000024: 	subq	%rdi, %rax
    00000027: 	sarq	$0x3, %rax
    0000002b: 	cmpq	$0x1, %r11
    0000002f: 	movq	(%rdx), %r11
    00000032: 	adcq	$-0x1, %rax
    00000036: 	subq	0x8(%rdx), %r11
    0000003a: 	movq	%r10, %rdx
    0000003d: 	shlq	$0x9, %rax
    00000041: 	subq	%rcx, %rdx
    00000044: 	addq	%r11, %rax
    00000047: 	movq	0x8(%rsi), %r11
    0000004b: 	addq	%rdx, %rax
    0000004e: 	je	.Ltmp1456 # Offset: 78
    00000054: 	movq	%rax, %rbx
    00000057: 	jmp	.Ltmp1457 # Offset: 87
    00000059: 	nopl	(%rax) # Size: 7
.Ltmp1461:
    00000060: 	leaq	0x1(%rdx), %rcx
    00000064: 	cmpq	%r13, %rcx
    00000067: 	je	.Ltmp1458 # Offset: 103
.Ltmp1464:
    0000006d: 	movq	%rcx, %xmm0
    00000072: 	movq	%rbp, %xmm1
    00000077: 	movq	%r12, %rdi
    0000007a: 	movq	%r13, %r10
    0000007d: 	punpcklqdq	%xmm1, %xmm0
    00000081: 	movq	%r12, %xmm2
    00000086: 	addq	$0x1, %rax
    0000008a: 	movq	%rbp, %r11
    0000008d: 	movups	%xmm0, (%rsi)
    00000090: 	movq	%r13, %xmm0
    00000095: 	subq	%rax, %rbx
    00000098: 	punpcklqdq	%xmm2, %xmm0
    0000009c: 	movups	%xmm0, 0x10(%rsi)
    000000a0: 	testq	%rbx, %rbx
    000000a3: 	je	.Ltmp1456 # Offset: 163
.Ltmp1457:
    000000a5: 	movq	%rbx, %rax
    000000a8: 	movq	%rcx, %rdx
    000000ab: 	shrq	$0x3f, %rax
    000000af: 	subq	%r11, %rdx
    000000b2: 	addq	%rbx, %rax
    000000b5: 	sarq	%rax
    000000b8: 	addq	%rax, %rdx
    000000bb: 	js	.Ltmp1459 # Offset: 187
    000000bd: 	cmpq	$0x1ff, %rdx
    000000c4: 	jg	.Ltmp1460 # Offset: 196
    000000c6: 	leaq	(%rcx,%rax), %rdx
    000000ca: 	movq	%rdi, %r12
    000000cd: 	movq	%r10, %r13
    000000d0: 	movq	%r11, %rbp
.Ltmp1462:
    000000d3: 	cmpb	%r9b, (%rdx)
    000000d6: 	jle	.Ltmp1461 # Offset: 214
    000000d8: 	movq	%rax, %rbx
    000000db: 	testq	%rbx, %rbx
    000000de: 	jne	.Ltmp1457 # Offset: 222
.Ltmp1456:
    000000e0: 	popq	%rbx
    000000e1: 	movq	%r8, %rax
    000000e4: 	popq	%rbp
    000000e5: 	movq	%rcx, (%r8)
    000000e8: 	popq	%r12
    000000ea: 	popq	%r13
    000000ec: 	movq	%r11, 0x8(%r8)
    000000f0: 	movq	%r10, 0x10(%r8)
    000000f4: 	popq	%r14
    000000f6: 	movq	%rdi, 0x18(%r8)
    000000fa: 	retq # Offset: 250
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1460:
    00000100: 	movq	%rdx, %r14
    00000103: 	sarq	$0x9, %r14
.Ltmp1463:
    00000107: 	leaq	(%rdi,%r14,8), %r12
    0000010b: 	shlq	$0x9, %r14
    0000010f: 	movq	(%r12), %rbp
    00000113: 	subq	%r14, %rdx
    00000116: 	leaq	0x200(%rbp), %r13
    0000011d: 	addq	%rbp, %rdx
    00000120: 	jmp	.Ltmp1462 # Offset: 288
    00000122: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1459:
    00000128: 	movq	%rdx, %r14
    0000012b: 	notq	%r14
    0000012e: 	shrq	$0x9, %r14
    00000132: 	notq	%r14
    00000135: 	jmp	.Ltmp1463 # Offset: 309
    00000137: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1458:
    00000140: 	movq	0x8(%r12), %rcx
    00000145: 	addq	$0x8, %r12
    00000149: 	leaq	0x200(%rcx), %r13
    00000150: 	movq	%rcx, %rbp
    00000153: 	jmp	.Ltmp1464 # Offset: 339
DWARF CFI Instructions:
    <empty>
End of Function "_Z12upper_bound2ISt15_Deque_iteratorIaRaPaEaET_S4_S4_T0_"

Binary Function "_Z16std_binarysearchISt15_Deque_iteratorIaRaPaEaEbT_S4_T0_" after disassembly {
  Number      : 248
  State       : disassembled
  Address     : 0x9250
  Size        : 0x114
  MaxSize     : 0x120
  Offset      : 0x9250
  Section     : .text
  Orc Section : .local.text._Z16std_binarysearchISt15_Deque_iteratorIaRaPaEaEbT_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0247:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	movq	%rsi, %rax
    00000009: 	pushq	%r13
    0000000b: 	pushq	%r12
    0000000d: 	movl	%edx, %r12d
    00000010: 	pushq	%rbp
    00000011: 	pushq	%rbx
    00000012: 	movq	0x18(%rsi), %rcx
    00000016: 	movl	%edx, %ebx
    00000018: 	movq	0x18(%rdi), %r11
    0000001c: 	movq	(%rsi), %r13
    0000001f: 	movq	%rcx, %rdx
    00000022: 	movq	0x10(%rdi), %rbp
    00000026: 	movq	(%rdi), %rsi
    00000029: 	subq	%r11, %rdx
    0000002c: 	movq	0x8(%rdi), %r10
    00000030: 	movq	%r13, %rdi
    00000033: 	sarq	$0x3, %rdx
    00000037: 	cmpq	$0x1, %rcx
    0000003b: 	adcq	$-0x1, %rdx
    0000003f: 	subq	0x8(%rax), %rdi
    00000043: 	movq	%rbp, %rax
    00000046: 	shlq	$0x9, %rdx
    0000004a: 	subq	%rsi, %rax
    0000004d: 	addq	%rdi, %rdx
    00000050: 	addq	%rax, %rdx
    00000053: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1472:
    00000058: 	testq	%rdx, %rdx
    0000005b: 	jle	.Ltmp1465 # Offset: 91
.Ltmp1470:
    0000005d: 	movq	%rdx, %rcx
    00000060: 	movq	%rsi, %rax
    00000063: 	sarq	%rcx
    00000066: 	subq	%r10, %rax
    00000069: 	addq	%rcx, %rax
    0000006c: 	js	.Ltmp1466 # Offset: 108
    00000072: 	cmpq	$0x1ff, %rax
    00000078: 	jg	.Ltmp1467 # Offset: 120
    0000007a: 	leaq	(%rsi,%rcx), %rax
    0000007e: 	movq	%r11, %r8
    00000081: 	movq	%rbp, %r9
    00000084: 	movq	%r10, %rdi
.Ltmp1473:
    00000087: 	cmpb	%bl, (%rax)
    00000089: 	jge	.Ltmp1468 # Offset: 137
    0000008b: 	leaq	0x1(%rax), %rsi
    0000008f: 	cmpq	%r9, %rsi
    00000092: 	je	.Ltmp1469 # Offset: 146
.Ltmp1475:
    00000094: 	subq	%rcx, %rdx
    00000097: 	movq	%r8, %r11
    0000009a: 	movq	%r9, %rbp
    0000009d: 	movq	%rdi, %r10
    000000a0: 	subq	$0x1, %rdx
    000000a4: 	testq	%rdx, %rdx
    000000a7: 	jg	.Ltmp1470 # Offset: 167
.Ltmp1465:
    000000a9: 	xorl	%eax, %eax
    000000ab: 	cmpq	%rsi, %r13
    000000ae: 	je	.Ltmp1471 # Offset: 174
    000000b0: 	cmpb	%r12b, (%rsi)
    000000b3: 	setle	%al
.Ltmp1471:
    000000b6: 	popq	%rbx
    000000b7: 	popq	%rbp
    000000b8: 	popq	%r12
    000000ba: 	popq	%r13
    000000bc: 	popq	%r14
    000000be: 	retq # Offset: 190
    000000bf: 	nop # Size: 1
.Ltmp1468:
    000000c0: 	movq	%rcx, %rdx
    000000c3: 	jmp	.Ltmp1472 # Offset: 195
    000000c5: 	nopl	(%rax) # Size: 3
.Ltmp1467:
    000000c8: 	movq	%rax, %r14
    000000cb: 	sarq	$0x9, %r14
.Ltmp1474:
    000000cf: 	leaq	(%r11,%r14,8), %r8
    000000d3: 	shlq	$0x9, %r14
    000000d7: 	movq	(%r8), %rdi
    000000da: 	subq	%r14, %rax
    000000dd: 	leaq	0x200(%rdi), %r9
    000000e4: 	addq	%rdi, %rax
    000000e7: 	jmp	.Ltmp1473 # Offset: 231
    000000e9: 	nopl	(%rax) # Size: 7
.Ltmp1466:
    000000f0: 	movq	%rax, %r14
    000000f3: 	notq	%r14
    000000f6: 	shrq	$0x9, %r14
    000000fa: 	notq	%r14
    000000fd: 	jmp	.Ltmp1474 # Offset: 253
    000000ff: 	nop # Size: 1
.Ltmp1469:
    00000100: 	movq	0x8(%r8), %rsi
    00000104: 	addq	$0x8, %r8
    00000108: 	leaq	0x200(%rsi), %r9
    0000010f: 	movq	%rsi, %rdi
    00000112: 	jmp	.Ltmp1475 # Offset: 274
DWARF CFI Instructions:
    <empty>
End of Function "_Z16std_binarysearchISt15_Deque_iteratorIaRaPaEaEbT_S4_T0_"

Binary Function "_Z12lower_bound1ISt15_Deque_iteratorItRtPtEtET_S4_S4_T0_" after disassembly {
  Number      : 249
  State       : disassembled
  Address     : 0x9370
  Size        : 0x195
  MaxSize     : 0x1a0
  Offset      : 0x9370
  Section     : .text
  Orc Section : .local.text._Z12lower_bound1ISt15_Deque_iteratorItRtPtEtET_S4_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0248:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rdx, %r11
    00000008: 	movq	%rsi, %r10
    0000000b: 	movq	%rdi, %r9
    0000000e: 	movq	0x10(%r10), %r8
    00000012: 	movq	0x18(%r10), %rdi
    00000016: 	pushq	%rbx
    00000017: 	movl	%ecx, %ebx
    00000019: 	movq	(%rdx), %rdx
    0000001c: 	movq	(%rsi), %rcx
    0000001f: 	movq	0x8(%rsi), %rsi
    00000023: 	cmpq	%rcx, %rdx
    00000026: 	jne	.Ltmp1476 # Offset: 38
    00000028: 	jmp	.Ltmp1477 # Offset: 40
    0000002d: 	nopl	(%rax) # Size: 3
.Ltmp1481:
    00000030: 	leaq	0x2(%rdx), %rcx
    00000034: 	cmpq	%r8, %rcx
    00000037: 	je	.Ltmp1478 # Offset: 55
.Ltmp1484:
    0000003d: 	movq	%rcx, %xmm1
    00000042: 	movq	%rsi, %xmm4
    00000047: 	movups	%xmm0, 0x10(%r10)
    0000004c: 	punpcklqdq	%xmm4, %xmm1
    00000050: 	movups	%xmm1, (%r10)
    00000054: 	movq	(%r11), %rdx
    00000057: 	cmpq	%rdx, %rcx
    0000005a: 	je	.Ltmp1477 # Offset: 90
.Ltmp1476:
    00000060: 	movq	0x18(%r11), %rbp
    00000064: 	movq	%rbp, %rax
    00000067: 	subq	%rdi, %rax
    0000006a: 	sarq	$0x3, %rax
    0000006e: 	cmpq	$0x1, %rbp
    00000072: 	adcq	$-0x1, %rax
    00000076: 	subq	0x8(%r11), %rdx
    0000007a: 	sarq	%rdx
    0000007d: 	shlq	$0x8, %rax
    00000081: 	addq	%rdx, %rax
    00000084: 	movq	%r8, %rdx
    00000087: 	subq	%rcx, %rdx
    0000008a: 	sarq	%rdx
    0000008d: 	addq	%rdx, %rax
    00000090: 	movq	%rax, %rdx
    00000093: 	shrq	$0x3f, %rdx
    00000097: 	addq	%rax, %rdx
    0000009a: 	movq	%rcx, %rax
    0000009d: 	subq	%rsi, %rax
    000000a0: 	sarq	%rdx
    000000a3: 	sarq	%rax
    000000a6: 	addq	%rdx, %rax
    000000a9: 	js	.Ltmp1479 # Offset: 169
    000000af: 	cmpq	$0xff, %rax
    000000b5: 	jg	.Ltmp1480 # Offset: 181
    000000b7: 	leaq	(%rcx,%rdx,2), %rdx
.Ltmp1482:
    000000bb: 	movq	%rdx, %xmm1
    000000c0: 	movq	%rsi, %xmm2
    000000c5: 	movq	%r8, %xmm0
    000000ca: 	movq	%rdi, %xmm3
    000000cf: 	punpcklqdq	%xmm2, %xmm1
    000000d3: 	punpcklqdq	%xmm3, %xmm0
    000000d7: 	cmpw	%bx, (%rdx)
    000000da: 	jb	.Ltmp1481 # Offset: 218
    000000e0: 	movups	%xmm1, (%r11)
    000000e4: 	movups	%xmm0, 0x10(%r11)
    000000e9: 	movq	(%r10), %rcx
    000000ec: 	movq	0x8(%r10), %rsi
    000000f0: 	movq	0x10(%r10), %r8
    000000f4: 	movq	0x18(%r10), %rdi
    000000f8: 	cmpq	%rdx, %rcx
    000000fb: 	jne	.Ltmp1476 # Offset: 251
.Ltmp1477:
    00000101: 	movq	%rdx, %xmm0
    00000106: 	movq	%rsi, %xmm6
    0000010b: 	movq	%rdi, %xmm7
    00000110: 	popq	%rbx
    00000111: 	punpcklqdq	%xmm6, %xmm0
    00000115: 	movq	%r9, %rax
    00000118: 	popq	%rbp
    00000119: 	movups	%xmm0, (%r9)
    0000011d: 	movq	%r8, %xmm0
    00000122: 	punpcklqdq	%xmm7, %xmm0
    00000126: 	movups	%xmm0, 0x10(%r9)
    0000012b: 	retq # Offset: 299
    0000012c: 	nopl	(%rax) # Size: 4
.Ltmp1480:
    00000130: 	movq	%rax, %rdx
    00000133: 	sarq	$0x8, %rdx
.Ltmp1483:
    00000137: 	leaq	(%rdi,%rdx,8), %rdi
    0000013b: 	shlq	$0x8, %rdx
    0000013f: 	movq	(%rdi), %rsi
    00000142: 	subq	%rdx, %rax
    00000145: 	leaq	0x200(%rsi), %r8
    0000014c: 	leaq	(%rsi,%rax,2), %rdx
    00000150: 	jmp	.Ltmp1482 # Offset: 336
    00000155: 	nopl	(%rax) # Size: 3
.Ltmp1479:
    00000158: 	movq	%rax, %rdx
    0000015b: 	notq	%rdx
    0000015e: 	shrq	$0x8, %rdx
    00000162: 	notq	%rdx
    00000165: 	jmp	.Ltmp1483 # Offset: 357
    00000167: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1478:
    00000170: 	movq	0x8(%rdi), %rcx
    00000174: 	addq	$0x8, %rdi
    00000178: 	movq	%rdi, %xmm5
    0000017d: 	leaq	0x200(%rcx), %r8
    00000184: 	movq	%rcx, %rsi
    00000187: 	movq	%r8, %xmm0
    0000018c: 	punpcklqdq	%xmm5, %xmm0
    00000190: 	jmp	.Ltmp1484 # Offset: 400
DWARF CFI Instructions:
    <empty>
End of Function "_Z12lower_bound1ISt15_Deque_iteratorItRtPtEtET_S4_S4_T0_"

Binary Function "_Z12lower_bound1ISt15_Deque_iteratorIiRiPiEiET_S4_S4_T0_" after disassembly {
  Number      : 250
  State       : disassembled
  Address     : 0x9510
  Size        : 0x195
  MaxSize     : 0x1a0
  Offset      : 0x9510
  Section     : .text
  Orc Section : .local.text._Z12lower_bound1ISt15_Deque_iteratorIiRiPiEiET_S4_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0249:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rdx, %r11
    00000008: 	movq	%rsi, %r10
    0000000b: 	movq	%rdi, %r9
    0000000e: 	movq	0x10(%r10), %r8
    00000012: 	movq	0x18(%r10), %rdi
    00000016: 	pushq	%rbx
    00000017: 	movl	%ecx, %ebx
    00000019: 	movq	(%rdx), %rdx
    0000001c: 	movq	(%rsi), %rcx
    0000001f: 	movq	0x8(%rsi), %rsi
    00000023: 	cmpq	%rcx, %rdx
    00000026: 	jne	.Ltmp1485 # Offset: 38
    00000028: 	jmp	.Ltmp1486 # Offset: 40
    0000002d: 	nopl	(%rax) # Size: 3
.Ltmp1490:
    00000030: 	leaq	0x4(%rdx), %rcx
    00000034: 	cmpq	%r8, %rcx
    00000037: 	je	.Ltmp1487 # Offset: 55
.Ltmp1493:
    0000003d: 	movq	%rcx, %xmm1
    00000042: 	movq	%rsi, %xmm4
    00000047: 	movups	%xmm0, 0x10(%r10)
    0000004c: 	punpcklqdq	%xmm4, %xmm1
    00000050: 	movups	%xmm1, (%r10)
    00000054: 	movq	(%r11), %rdx
    00000057: 	cmpq	%rdx, %rcx
    0000005a: 	je	.Ltmp1486 # Offset: 90
.Ltmp1485:
    00000060: 	movq	0x18(%r11), %rbp
    00000064: 	movq	%rbp, %rax
    00000067: 	subq	%rdi, %rax
    0000006a: 	sarq	$0x3, %rax
    0000006e: 	cmpq	$0x1, %rbp
    00000072: 	adcq	$-0x1, %rax
    00000076: 	subq	0x8(%r11), %rdx
    0000007a: 	sarq	$0x2, %rdx
    0000007e: 	shlq	$0x7, %rax
    00000082: 	addq	%rdx, %rax
    00000085: 	movq	%r8, %rdx
    00000088: 	subq	%rcx, %rdx
    0000008b: 	sarq	$0x2, %rdx
    0000008f: 	addq	%rdx, %rax
    00000092: 	movq	%rax, %rdx
    00000095: 	shrq	$0x3f, %rdx
    00000099: 	addq	%rax, %rdx
    0000009c: 	movq	%rcx, %rax
    0000009f: 	subq	%rsi, %rax
    000000a2: 	sarq	%rdx
    000000a5: 	sarq	$0x2, %rax
    000000a9: 	addq	%rdx, %rax
    000000ac: 	js	.Ltmp1488 # Offset: 172
    000000b2: 	cmpq	$0x7f, %rax
    000000b6: 	jg	.Ltmp1489 # Offset: 182
    000000b8: 	leaq	(%rcx,%rdx,4), %rdx
.Ltmp1491:
    000000bc: 	movq	%rdx, %xmm1
    000000c1: 	movq	%rsi, %xmm2
    000000c6: 	movq	%r8, %xmm0
    000000cb: 	movq	%rdi, %xmm3
    000000d0: 	punpcklqdq	%xmm2, %xmm1
    000000d4: 	punpcklqdq	%xmm3, %xmm0
    000000d8: 	cmpl	%ebx, (%rdx)
    000000da: 	jl	.Ltmp1490 # Offset: 218
    000000e0: 	movups	%xmm1, (%r11)
    000000e4: 	movups	%xmm0, 0x10(%r11)
    000000e9: 	movq	(%r10), %rcx
    000000ec: 	movq	0x8(%r10), %rsi
    000000f0: 	movq	0x10(%r10), %r8
    000000f4: 	movq	0x18(%r10), %rdi
    000000f8: 	cmpq	%rdx, %rcx
    000000fb: 	jne	.Ltmp1485 # Offset: 251
.Ltmp1486:
    00000101: 	movq	%rdx, %xmm0
    00000106: 	movq	%rsi, %xmm6
    0000010b: 	movq	%rdi, %xmm7
    00000110: 	popq	%rbx
    00000111: 	punpcklqdq	%xmm6, %xmm0
    00000115: 	movq	%r9, %rax
    00000118: 	popq	%rbp
    00000119: 	movups	%xmm0, (%r9)
    0000011d: 	movq	%r8, %xmm0
    00000122: 	punpcklqdq	%xmm7, %xmm0
    00000126: 	movups	%xmm0, 0x10(%r9)
    0000012b: 	retq # Offset: 299
    0000012c: 	nopl	(%rax) # Size: 4
.Ltmp1489:
    00000130: 	movq	%rax, %rdx
    00000133: 	sarq	$0x7, %rdx
.Ltmp1492:
    00000137: 	leaq	(%rdi,%rdx,8), %rdi
    0000013b: 	shlq	$0x7, %rdx
    0000013f: 	movq	(%rdi), %rsi
    00000142: 	subq	%rdx, %rax
    00000145: 	leaq	0x200(%rsi), %r8
    0000014c: 	leaq	(%rsi,%rax,4), %rdx
    00000150: 	jmp	.Ltmp1491 # Offset: 336
    00000155: 	nopl	(%rax) # Size: 3
.Ltmp1488:
    00000158: 	movq	%rax, %rdx
    0000015b: 	notq	%rdx
    0000015e: 	shrq	$0x7, %rdx
    00000162: 	notq	%rdx
    00000165: 	jmp	.Ltmp1492 # Offset: 357
    00000167: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1487:
    00000170: 	movq	0x8(%rdi), %rcx
    00000174: 	addq	$0x8, %rdi
    00000178: 	movq	%rdi, %xmm5
    0000017d: 	leaq	0x200(%rcx), %r8
    00000184: 	movq	%rcx, %rsi
    00000187: 	movq	%r8, %xmm0
    0000018c: 	punpcklqdq	%xmm5, %xmm0
    00000190: 	jmp	.Ltmp1493 # Offset: 400
DWARF CFI Instructions:
    <empty>
End of Function "_Z12lower_bound1ISt15_Deque_iteratorIiRiPiEiET_S4_S4_T0_"

Binary Function "_Z12upper_bound1ISt15_Deque_iteratorIfRfPfEfET_S4_S4_T0_" after disassembly {
  Number      : 251
  State       : disassembled
  Address     : 0x96b0
  Size        : 0x195
  MaxSize     : 0x1a0
  Offset      : 0x96b0
  Section     : .text
  Orc Section : .local.text._Z12upper_bound1ISt15_Deque_iteratorIfRfPfEfET_S4_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0250:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdx, %r11
    00000008: 	movq	(%rsi), %rcx
    0000000b: 	movq	%rsi, %r10
    0000000e: 	movq	(%rdx), %rdx
    00000011: 	movq	%rdi, %r9
    00000014: 	movq	0x8(%rsi), %rsi
    00000018: 	movq	0x10(%r10), %r8
    0000001c: 	movq	0x18(%r10), %rdi
    00000020: 	cmpq	%rcx, %rdx
    00000023: 	jne	.Ltmp1494 # Offset: 35
    00000025: 	jmp	.Ltmp1495 # Offset: 37
    0000002a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1498:
    00000030: 	movups	%xmm3, (%r11)
    00000034: 	movups	%xmm1, 0x10(%r11)
    00000039: 	movq	(%r10), %rcx
    0000003c: 	movq	0x8(%r10), %rsi
    00000040: 	movq	0x10(%r10), %r8
    00000044: 	movq	0x18(%r10), %rdi
    00000048: 	cmpq	%rdx, %rcx
    0000004b: 	je	.Ltmp1495 # Offset: 75
.Ltmp1494:
    00000051: 	movq	0x18(%r11), %rbx
    00000055: 	movq	%rbx, %rax
    00000058: 	subq	%rdi, %rax
    0000005b: 	sarq	$0x3, %rax
    0000005f: 	cmpq	$0x1, %rbx
    00000063: 	adcq	$-0x1, %rax
    00000067: 	subq	0x8(%r11), %rdx
    0000006b: 	sarq	$0x2, %rdx
    0000006f: 	shlq	$0x7, %rax
    00000073: 	addq	%rdx, %rax
    00000076: 	movq	%r8, %rdx
    00000079: 	subq	%rcx, %rdx
    0000007c: 	sarq	$0x2, %rdx
    00000080: 	addq	%rdx, %rax
    00000083: 	movq	%rax, %rdx
    00000086: 	shrq	$0x3f, %rdx
    0000008a: 	addq	%rax, %rdx
    0000008d: 	movq	%rcx, %rax
    00000090: 	subq	%rsi, %rax
    00000093: 	sarq	%rdx
    00000096: 	sarq	$0x2, %rax
    0000009a: 	addq	%rdx, %rax
    0000009d: 	js	.Ltmp1496 # Offset: 157
    000000a3: 	cmpq	$0x7f, %rax
    000000a7: 	jg	.Ltmp1497 # Offset: 167
    000000ad: 	leaq	(%rcx,%rdx,4), %rdx
.Ltmp1500:
    000000b1: 	movss	(%rdx), %xmm2
    000000b5: 	movq	%rdx, %xmm3
    000000ba: 	movq	%rsi, %xmm4
    000000bf: 	movq	%r8, %xmm1
    000000c4: 	movq	%rdi, %xmm5
    000000c9: 	punpcklqdq	%xmm4, %xmm3
    000000cd: 	comiss	%xmm0, %xmm2
    000000d0: 	punpcklqdq	%xmm5, %xmm1
    000000d4: 	ja	.Ltmp1498 # Offset: 212
    000000da: 	leaq	0x4(%rdx), %rcx
    000000de: 	cmpq	%r8, %rcx
    000000e1: 	je	.Ltmp1499 # Offset: 225
.Ltmp1502:
    000000e7: 	movq	%rcx, %xmm2
    000000ec: 	movq	%rsi, %xmm6
    000000f1: 	movups	%xmm1, 0x10(%r10)
    000000f6: 	punpcklqdq	%xmm6, %xmm2
    000000fa: 	movups	%xmm2, (%r10)
    000000fe: 	movq	(%r11), %rdx
    00000101: 	cmpq	%rdx, %rcx
    00000104: 	jne	.Ltmp1494 # Offset: 260
.Ltmp1495:
    0000010a: 	movq	%rsi, %xmm7
    0000010f: 	movq	%rdx, %xmm0
    00000114: 	movq	%r9, %rax
    00000117: 	popq	%rbx
    00000118: 	punpcklqdq	%xmm7, %xmm0
    0000011c: 	movq	%rdi, %xmm7
    00000121: 	movups	%xmm0, (%r9)
    00000125: 	movq	%r8, %xmm0
    0000012a: 	punpcklqdq	%xmm7, %xmm0
    0000012e: 	movups	%xmm0, 0x10(%r9)
    00000133: 	retq # Offset: 307
    00000134: 	nopl	(%rax) # Size: 4
.Ltmp1497:
    00000138: 	movq	%rax, %rdx
    0000013b: 	sarq	$0x7, %rdx
.Ltmp1501:
    0000013f: 	leaq	(%rdi,%rdx,8), %rdi
    00000143: 	shlq	$0x7, %rdx
    00000147: 	movq	(%rdi), %rsi
    0000014a: 	subq	%rdx, %rax
    0000014d: 	leaq	0x200(%rsi), %r8
    00000154: 	leaq	(%rsi,%rax,4), %rdx
    00000158: 	jmp	.Ltmp1500 # Offset: 344
    0000015d: 	nopl	(%rax) # Size: 3
.Ltmp1496:
    00000160: 	movq	%rax, %rdx
    00000163: 	notq	%rdx
    00000166: 	shrq	$0x7, %rdx
    0000016a: 	notq	%rdx
    0000016d: 	jmp	.Ltmp1501 # Offset: 365
    0000016f: 	nop # Size: 1
.Ltmp1499:
    00000170: 	movq	0x8(%rdi), %rcx
    00000174: 	addq	$0x8, %rdi
    00000178: 	movq	%rdi, %xmm7
    0000017d: 	leaq	0x200(%rcx), %r8
    00000184: 	movq	%rcx, %rsi
    00000187: 	movq	%r8, %xmm1
    0000018c: 	punpcklqdq	%xmm7, %xmm1
    00000190: 	jmp	.Ltmp1502 # Offset: 400
DWARF CFI Instructions:
    <empty>
End of Function "_Z12upper_bound1ISt15_Deque_iteratorIfRfPfEfET_S4_S4_T0_"

Binary Function "_Z12upper_bound1ISt15_Deque_iteratorItRtPtEtET_S4_S4_T0_" after disassembly {
  Number      : 252
  State       : disassembled
  Address     : 0x9850
  Size        : 0x195
  MaxSize     : 0x1a0
  Offset      : 0x9850
  Section     : .text
  Orc Section : .local.text._Z12upper_bound1ISt15_Deque_iteratorItRtPtEtET_S4_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0251:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rdx, %r11
    00000008: 	movq	%rsi, %r10
    0000000b: 	movq	%rdi, %r9
    0000000e: 	movq	0x10(%r10), %r8
    00000012: 	movq	0x18(%r10), %rdi
    00000016: 	pushq	%rbx
    00000017: 	movl	%ecx, %ebx
    00000019: 	movq	(%rdx), %rdx
    0000001c: 	movq	(%rsi), %rcx
    0000001f: 	movq	0x8(%rsi), %rsi
    00000023: 	cmpq	%rcx, %rdx
    00000026: 	jne	.Ltmp1503 # Offset: 38
    00000028: 	jmp	.Ltmp1504 # Offset: 40
    0000002d: 	nopl	(%rax) # Size: 3
.Ltmp1507:
    00000030: 	movups	%xmm1, (%r11)
    00000034: 	movups	%xmm0, 0x10(%r11)
    00000039: 	movq	(%r10), %rcx
    0000003c: 	movq	0x8(%r10), %rsi
    00000040: 	movq	0x10(%r10), %r8
    00000044: 	movq	0x18(%r10), %rdi
    00000048: 	cmpq	%rdx, %rcx
    0000004b: 	je	.Ltmp1504 # Offset: 75
.Ltmp1503:
    00000051: 	movq	0x18(%r11), %rbp
    00000055: 	movq	%rbp, %rax
    00000058: 	subq	%rdi, %rax
    0000005b: 	sarq	$0x3, %rax
    0000005f: 	cmpq	$0x1, %rbp
    00000063: 	adcq	$-0x1, %rax
    00000067: 	subq	0x8(%r11), %rdx
    0000006b: 	sarq	%rdx
    0000006e: 	shlq	$0x8, %rax
    00000072: 	addq	%rdx, %rax
    00000075: 	movq	%r8, %rdx
    00000078: 	subq	%rcx, %rdx
    0000007b: 	sarq	%rdx
    0000007e: 	addq	%rdx, %rax
    00000081: 	movq	%rax, %rdx
    00000084: 	shrq	$0x3f, %rdx
    00000088: 	addq	%rax, %rdx
    0000008b: 	movq	%rcx, %rax
    0000008e: 	subq	%rsi, %rax
    00000091: 	sarq	%rdx
    00000094: 	sarq	%rax
    00000097: 	addq	%rdx, %rax
    0000009a: 	js	.Ltmp1505 # Offset: 154
    000000a0: 	cmpq	$0xff, %rax
    000000a6: 	jg	.Ltmp1506 # Offset: 166
    000000ac: 	leaq	(%rcx,%rdx,2), %rdx
.Ltmp1509:
    000000b0: 	movq	%rdx, %xmm1
    000000b5: 	movq	%rsi, %xmm2
    000000ba: 	movq	%r8, %xmm0
    000000bf: 	movq	%rdi, %xmm3
    000000c4: 	punpcklqdq	%xmm2, %xmm1
    000000c8: 	punpcklqdq	%xmm3, %xmm0
    000000cc: 	cmpw	%bx, (%rdx)
    000000cf: 	ja	.Ltmp1507 # Offset: 207
    000000d5: 	leaq	0x2(%rdx), %rcx
    000000d9: 	cmpq	%r8, %rcx
    000000dc: 	je	.Ltmp1508 # Offset: 220
.Ltmp1511:
    000000e2: 	movq	%rcx, %xmm1
    000000e7: 	movq	%rsi, %xmm4
    000000ec: 	movups	%xmm0, 0x10(%r10)
    000000f1: 	punpcklqdq	%xmm4, %xmm1
    000000f5: 	movups	%xmm1, (%r10)
    000000f9: 	movq	(%r11), %rdx
    000000fc: 	cmpq	%rdx, %rcx
    000000ff: 	jne	.Ltmp1503 # Offset: 255
.Ltmp1504:
    00000105: 	movq	%rdx, %xmm0
    0000010a: 	movq	%rsi, %xmm6
    0000010f: 	movq	%rdi, %xmm7
    00000114: 	popq	%rbx
    00000115: 	punpcklqdq	%xmm6, %xmm0
    00000119: 	movq	%r9, %rax
    0000011c: 	popq	%rbp
    0000011d: 	movups	%xmm0, (%r9)
    00000121: 	movq	%r8, %xmm0
    00000126: 	punpcklqdq	%xmm7, %xmm0
    0000012a: 	movups	%xmm0, 0x10(%r9)
    0000012f: 	retq # Offset: 303
.Ltmp1506:
    00000130: 	movq	%rax, %rdx
    00000133: 	sarq	$0x8, %rdx
.Ltmp1510:
    00000137: 	leaq	(%rdi,%rdx,8), %rdi
    0000013b: 	shlq	$0x8, %rdx
    0000013f: 	movq	(%rdi), %rsi
    00000142: 	subq	%rdx, %rax
    00000145: 	leaq	0x200(%rsi), %r8
    0000014c: 	leaq	(%rsi,%rax,2), %rdx
    00000150: 	jmp	.Ltmp1509 # Offset: 336
    00000155: 	nopl	(%rax) # Size: 3
.Ltmp1505:
    00000158: 	movq	%rax, %rdx
    0000015b: 	notq	%rdx
    0000015e: 	shrq	$0x8, %rdx
    00000162: 	notq	%rdx
    00000165: 	jmp	.Ltmp1510 # Offset: 357
    00000167: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1508:
    00000170: 	movq	0x8(%rdi), %rcx
    00000174: 	addq	$0x8, %rdi
    00000178: 	movq	%rdi, %xmm5
    0000017d: 	leaq	0x200(%rcx), %r8
    00000184: 	movq	%rcx, %rsi
    00000187: 	movq	%r8, %xmm0
    0000018c: 	punpcklqdq	%xmm5, %xmm0
    00000190: 	jmp	.Ltmp1511 # Offset: 400
DWARF CFI Instructions:
    <empty>
End of Function "_Z12upper_bound1ISt15_Deque_iteratorItRtPtEtET_S4_S4_T0_"

Binary Function "_Z12upper_bound1ISt15_Deque_iteratorIiRiPiEiET_S4_S4_T0_" after disassembly {
  Number      : 253
  State       : disassembled
  Address     : 0x99f0
  Size        : 0x195
  MaxSize     : 0x1a0
  Offset      : 0x99f0
  Section     : .text
  Orc Section : .local.text._Z12upper_bound1ISt15_Deque_iteratorIiRiPiEiET_S4_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0252:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rdx, %r11
    00000008: 	movq	%rsi, %r10
    0000000b: 	movq	%rdi, %r9
    0000000e: 	movq	0x10(%r10), %r8
    00000012: 	movq	0x18(%r10), %rdi
    00000016: 	pushq	%rbx
    00000017: 	movl	%ecx, %ebx
    00000019: 	movq	(%rdx), %rdx
    0000001c: 	movq	(%rsi), %rcx
    0000001f: 	movq	0x8(%rsi), %rsi
    00000023: 	cmpq	%rcx, %rdx
    00000026: 	jne	.Ltmp1512 # Offset: 38
    00000028: 	jmp	.Ltmp1513 # Offset: 40
    0000002d: 	nopl	(%rax) # Size: 3
.Ltmp1516:
    00000030: 	movups	%xmm1, (%r11)
    00000034: 	movups	%xmm0, 0x10(%r11)
    00000039: 	movq	(%r10), %rcx
    0000003c: 	movq	0x8(%r10), %rsi
    00000040: 	movq	0x10(%r10), %r8
    00000044: 	movq	0x18(%r10), %rdi
    00000048: 	cmpq	%rdx, %rcx
    0000004b: 	je	.Ltmp1513 # Offset: 75
.Ltmp1512:
    00000051: 	movq	0x18(%r11), %rbp
    00000055: 	movq	%rbp, %rax
    00000058: 	subq	%rdi, %rax
    0000005b: 	sarq	$0x3, %rax
    0000005f: 	cmpq	$0x1, %rbp
    00000063: 	adcq	$-0x1, %rax
    00000067: 	subq	0x8(%r11), %rdx
    0000006b: 	sarq	$0x2, %rdx
    0000006f: 	shlq	$0x7, %rax
    00000073: 	addq	%rdx, %rax
    00000076: 	movq	%r8, %rdx
    00000079: 	subq	%rcx, %rdx
    0000007c: 	sarq	$0x2, %rdx
    00000080: 	addq	%rdx, %rax
    00000083: 	movq	%rax, %rdx
    00000086: 	shrq	$0x3f, %rdx
    0000008a: 	addq	%rax, %rdx
    0000008d: 	movq	%rcx, %rax
    00000090: 	subq	%rsi, %rax
    00000093: 	sarq	%rdx
    00000096: 	sarq	$0x2, %rax
    0000009a: 	addq	%rdx, %rax
    0000009d: 	js	.Ltmp1514 # Offset: 157
    000000a3: 	cmpq	$0x7f, %rax
    000000a7: 	jg	.Ltmp1515 # Offset: 167
    000000ad: 	leaq	(%rcx,%rdx,4), %rdx
.Ltmp1518:
    000000b1: 	movq	%rdx, %xmm1
    000000b6: 	movq	%rsi, %xmm2
    000000bb: 	movq	%r8, %xmm0
    000000c0: 	movq	%rdi, %xmm3
    000000c5: 	punpcklqdq	%xmm2, %xmm1
    000000c9: 	punpcklqdq	%xmm3, %xmm0
    000000cd: 	cmpl	%ebx, (%rdx)
    000000cf: 	jg	.Ltmp1516 # Offset: 207
    000000d5: 	leaq	0x4(%rdx), %rcx
    000000d9: 	cmpq	%r8, %rcx
    000000dc: 	je	.Ltmp1517 # Offset: 220
.Ltmp1520:
    000000e2: 	movq	%rcx, %xmm1
    000000e7: 	movq	%rsi, %xmm4
    000000ec: 	movups	%xmm0, 0x10(%r10)
    000000f1: 	punpcklqdq	%xmm4, %xmm1
    000000f5: 	movups	%xmm1, (%r10)
    000000f9: 	movq	(%r11), %rdx
    000000fc: 	cmpq	%rdx, %rcx
    000000ff: 	jne	.Ltmp1512 # Offset: 255
.Ltmp1513:
    00000105: 	movq	%rdx, %xmm0
    0000010a: 	movq	%rsi, %xmm6
    0000010f: 	movq	%rdi, %xmm7
    00000114: 	popq	%rbx
    00000115: 	punpcklqdq	%xmm6, %xmm0
    00000119: 	movq	%r9, %rax
    0000011c: 	popq	%rbp
    0000011d: 	movups	%xmm0, (%r9)
    00000121: 	movq	%r8, %xmm0
    00000126: 	punpcklqdq	%xmm7, %xmm0
    0000012a: 	movups	%xmm0, 0x10(%r9)
    0000012f: 	retq # Offset: 303
.Ltmp1515:
    00000130: 	movq	%rax, %rdx
    00000133: 	sarq	$0x7, %rdx
.Ltmp1519:
    00000137: 	leaq	(%rdi,%rdx,8), %rdi
    0000013b: 	shlq	$0x7, %rdx
    0000013f: 	movq	(%rdi), %rsi
    00000142: 	subq	%rdx, %rax
    00000145: 	leaq	0x200(%rsi), %r8
    0000014c: 	leaq	(%rsi,%rax,4), %rdx
    00000150: 	jmp	.Ltmp1518 # Offset: 336
    00000155: 	nopl	(%rax) # Size: 3
.Ltmp1514:
    00000158: 	movq	%rax, %rdx
    0000015b: 	notq	%rdx
    0000015e: 	shrq	$0x7, %rdx
    00000162: 	notq	%rdx
    00000165: 	jmp	.Ltmp1519 # Offset: 357
    00000167: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1517:
    00000170: 	movq	0x8(%rdi), %rcx
    00000174: 	addq	$0x8, %rdi
    00000178: 	movq	%rdi, %xmm5
    0000017d: 	leaq	0x200(%rcx), %r8
    00000184: 	movq	%rcx, %rsi
    00000187: 	movq	%r8, %xmm0
    0000018c: 	punpcklqdq	%xmm5, %xmm0
    00000190: 	jmp	.Ltmp1520 # Offset: 400
DWARF CFI Instructions:
    <empty>
End of Function "_Z12upper_bound1ISt15_Deque_iteratorIiRiPiEiET_S4_S4_T0_"

Binary Function "_Z12lower_bound1ISt15_Deque_iteratorIfRfPfEfET_S4_S4_T0_" after disassembly {
  Number      : 254
  State       : disassembled
  Address     : 0x9b90
  Size        : 0x195
  MaxSize     : 0x1a0
  Offset      : 0x9b90
  Section     : .text
  Orc Section : .local.text._Z12lower_bound1ISt15_Deque_iteratorIfRfPfEfET_S4_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0253:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdx, %r11
    00000008: 	movq	(%rsi), %rcx
    0000000b: 	movq	%rsi, %r10
    0000000e: 	movq	(%rdx), %rdx
    00000011: 	movq	%rdi, %r9
    00000014: 	movq	0x8(%rsi), %rsi
    00000018: 	movq	0x10(%r10), %r8
    0000001c: 	movq	0x18(%r10), %rdi
    00000020: 	cmpq	%rcx, %rdx
    00000023: 	jne	.Ltmp1521 # Offset: 35
    00000025: 	jmp	.Ltmp1522 # Offset: 37
    0000002a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1526:
    00000030: 	leaq	0x4(%rdx), %rcx
    00000034: 	cmpq	%r8, %rcx
    00000037: 	je	.Ltmp1523 # Offset: 55
.Ltmp1529:
    0000003d: 	movq	%rcx, %xmm2
    00000042: 	movq	%rsi, %xmm5
    00000047: 	movups	%xmm1, 0x10(%r10)
    0000004c: 	punpcklqdq	%xmm5, %xmm2
    00000050: 	movups	%xmm2, (%r10)
    00000054: 	movq	(%r11), %rdx
    00000057: 	cmpq	%rdx, %rcx
    0000005a: 	je	.Ltmp1522 # Offset: 90
.Ltmp1521:
    00000060: 	movq	0x18(%r11), %rbx
    00000064: 	movq	%rbx, %rax
    00000067: 	subq	%rdi, %rax
    0000006a: 	sarq	$0x3, %rax
    0000006e: 	cmpq	$0x1, %rbx
    00000072: 	adcq	$-0x1, %rax
    00000076: 	subq	0x8(%r11), %rdx
    0000007a: 	sarq	$0x2, %rdx
    0000007e: 	shlq	$0x7, %rax
    00000082: 	addq	%rdx, %rax
    00000085: 	movq	%r8, %rdx
    00000088: 	subq	%rcx, %rdx
    0000008b: 	sarq	$0x2, %rdx
    0000008f: 	addq	%rdx, %rax
    00000092: 	movq	%rax, %rdx
    00000095: 	shrq	$0x3f, %rdx
    00000099: 	addq	%rax, %rdx
    0000009c: 	movq	%rcx, %rax
    0000009f: 	subq	%rsi, %rax
    000000a2: 	sarq	%rdx
    000000a5: 	sarq	$0x2, %rax
    000000a9: 	addq	%rdx, %rax
    000000ac: 	js	.Ltmp1524 # Offset: 172
    000000b2: 	cmpq	$0x7f, %rax
    000000b6: 	jg	.Ltmp1525 # Offset: 182
    000000b8: 	leaq	(%rcx,%rdx,4), %rdx
.Ltmp1527:
    000000bc: 	comiss	(%rdx), %xmm0
    000000bf: 	movq	%rdx, %xmm2
    000000c4: 	movq	%rsi, %xmm3
    000000c9: 	movq	%r8, %xmm1
    000000ce: 	movq	%rdi, %xmm4
    000000d3: 	punpcklqdq	%xmm3, %xmm2
    000000d7: 	punpcklqdq	%xmm4, %xmm1
    000000db: 	ja	.Ltmp1526 # Offset: 219
    000000e1: 	movups	%xmm2, (%r11)
    000000e5: 	movups	%xmm1, 0x10(%r11)
    000000ea: 	movq	(%r10), %rcx
    000000ed: 	movq	0x8(%r10), %rsi
    000000f1: 	movq	0x10(%r10), %r8
    000000f5: 	movq	0x18(%r10), %rdi
    000000f9: 	cmpq	%rdx, %rcx
    000000fc: 	jne	.Ltmp1521 # Offset: 252
.Ltmp1522:
    00000102: 	movq	%rsi, %xmm7
    00000107: 	movq	%rdx, %xmm0
    0000010c: 	movq	%r9, %rax
    0000010f: 	popq	%rbx
    00000110: 	punpcklqdq	%xmm7, %xmm0
    00000114: 	movq	%rdi, %xmm7
    00000119: 	movups	%xmm0, (%r9)
    0000011d: 	movq	%r8, %xmm0
    00000122: 	punpcklqdq	%xmm7, %xmm0
    00000126: 	movups	%xmm0, 0x10(%r9)
    0000012b: 	retq # Offset: 299
    0000012c: 	nopl	(%rax) # Size: 4
.Ltmp1525:
    00000130: 	movq	%rax, %rdx
    00000133: 	sarq	$0x7, %rdx
.Ltmp1528:
    00000137: 	leaq	(%rdi,%rdx,8), %rdi
    0000013b: 	shlq	$0x7, %rdx
    0000013f: 	movq	(%rdi), %rsi
    00000142: 	subq	%rdx, %rax
    00000145: 	leaq	0x200(%rsi), %r8
    0000014c: 	leaq	(%rsi,%rax,4), %rdx
    00000150: 	jmp	.Ltmp1527 # Offset: 336
    00000155: 	nopl	(%rax) # Size: 3
.Ltmp1524:
    00000158: 	movq	%rax, %rdx
    0000015b: 	notq	%rdx
    0000015e: 	shrq	$0x7, %rdx
    00000162: 	notq	%rdx
    00000165: 	jmp	.Ltmp1528 # Offset: 357
    00000167: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1523:
    00000170: 	movq	0x8(%rdi), %rcx
    00000174: 	addq	$0x8, %rdi
    00000178: 	movq	%rdi, %xmm6
    0000017d: 	leaq	0x200(%rcx), %r8
    00000184: 	movq	%rcx, %rsi
    00000187: 	movq	%r8, %xmm1
    0000018c: 	punpcklqdq	%xmm6, %xmm1
    00000190: 	jmp	.Ltmp1529 # Offset: 400
DWARF CFI Instructions:
    <empty>
End of Function "_Z12lower_bound1ISt15_Deque_iteratorIfRfPfEfET_S4_S4_T0_"

Binary Function "_Z12upper_bound2ISt15_Deque_iteratorIfRfPfEfET_S4_S4_T0_" after disassembly {
  Number      : 255
  State       : disassembled
  Address     : 0x9d30
  Size        : 0x158
  MaxSize     : 0x160
  Offset      : 0x9d30
  Section     : .text
  Orc Section : .local.text._Z12upper_bound2ISt15_Deque_iteratorIfRfPfEfET_S4_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0254:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	movq	%rdx, %r10
    00000009: 	movq	%rdi, %r8
    0000000c: 	movq	0x18(%rsi), %rdi
    00000010: 	movq	0x10(%rsi), %r9
    00000014: 	movq	(%rsi), %rcx
    00000017: 	pushq	%r12
    00000019: 	pushq	%rbp
    0000001a: 	movq	0x8(%rsi), %r11
    0000001e: 	pushq	%rbx
    0000001f: 	movq	0x18(%rdx), %rdx
    00000023: 	movq	%rdx, %rax
    00000026: 	subq	%rdi, %rax
    00000029: 	sarq	$0x3, %rax
    0000002d: 	cmpq	$0x1, %rdx
    00000031: 	movq	(%r10), %rdx
    00000034: 	adcq	$-0x1, %rax
    00000038: 	subq	0x8(%r10), %rdx
    0000003c: 	sarq	$0x2, %rdx
    00000040: 	shlq	$0x7, %rax
    00000044: 	addq	%rdx, %rax
    00000047: 	movq	%r9, %rdx
    0000004a: 	subq	%rcx, %rdx
    0000004d: 	sarq	$0x2, %rdx
    00000051: 	addq	%rdx, %rax
    00000054: 	je	.Ltmp1530 # Offset: 84
    0000005a: 	movq	%rax, %r10
    0000005d: 	jmp	.Ltmp1531 # Offset: 93
    0000005f: 	nop # Size: 1
.Ltmp1535:
    00000060: 	leaq	0x4(%rdx), %rcx
    00000064: 	cmpq	%r13, %rcx
    00000067: 	je	.Ltmp1532 # Offset: 103
.Ltmp1538:
    0000006d: 	movq	%rcx, %xmm1
    00000072: 	movq	%rbp, %xmm2
    00000077: 	movq	%r12, %rdi
    0000007a: 	movq	%r13, %r9
    0000007d: 	punpcklqdq	%xmm2, %xmm1
    00000081: 	movq	%r12, %xmm3
    00000086: 	addq	$0x1, %rax
    0000008a: 	movq	%rbp, %r11
    0000008d: 	movups	%xmm1, (%rsi)
    00000090: 	movq	%r13, %xmm1
    00000095: 	subq	%rax, %r10
    00000098: 	punpcklqdq	%xmm3, %xmm1
    0000009c: 	movups	%xmm1, 0x10(%rsi)
    000000a0: 	testq	%r10, %r10
    000000a3: 	je	.Ltmp1530 # Offset: 163
.Ltmp1531:
    000000a5: 	movq	%r10, %rax
    000000a8: 	movq	%rcx, %rdx
    000000ab: 	shrq	$0x3f, %rax
    000000af: 	subq	%r11, %rdx
    000000b2: 	addq	%r10, %rax
    000000b5: 	sarq	$0x2, %rdx
    000000b9: 	sarq	%rax
    000000bc: 	addq	%rax, %rdx
    000000bf: 	js	.Ltmp1533 # Offset: 191
    000000c1: 	cmpq	$0x7f, %rdx
    000000c5: 	jg	.Ltmp1534 # Offset: 197
    000000c7: 	leaq	(%rcx,%rax,4), %rdx
    000000cb: 	movq	%rdi, %r12
    000000ce: 	movq	%r9, %r13
    000000d1: 	movq	%r11, %rbp
.Ltmp1536:
    000000d4: 	movss	(%rdx), %xmm1
    000000d8: 	comiss	%xmm0, %xmm1
    000000db: 	jbe	.Ltmp1535 # Offset: 219
    000000dd: 	movq	%rax, %r10
    000000e0: 	testq	%r10, %r10
    000000e3: 	jne	.Ltmp1531 # Offset: 227
.Ltmp1530:
    000000e5: 	popq	%rbx
    000000e6: 	movq	%r8, %rax
    000000e9: 	popq	%rbp
    000000ea: 	movq	%rcx, (%r8)
    000000ed: 	popq	%r12
    000000ef: 	popq	%r13
    000000f1: 	movq	%r11, 0x8(%r8)
    000000f5: 	movq	%r9, 0x10(%r8)
    000000f9: 	movq	%rdi, 0x18(%r8)
    000000fd: 	retq # Offset: 253
    000000fe: 	nop # Size: 2
.Ltmp1534:
    00000100: 	movq	%rdx, %rbx
    00000103: 	sarq	$0x7, %rbx
.Ltmp1537:
    00000107: 	leaq	(%rdi,%rbx,8), %r12
    0000010b: 	shlq	$0x7, %rbx
    0000010f: 	movq	(%r12), %rbp
    00000113: 	subq	%rbx, %rdx
    00000116: 	leaq	0x200(%rbp), %r13
    0000011d: 	leaq	(%rbp,%rdx,4), %rdx
    00000122: 	jmp	.Ltmp1536 # Offset: 290
    00000124: 	nopl	(%rax) # Size: 4
.Ltmp1533:
    00000128: 	movq	%rdx, %rbx
    0000012b: 	notq	%rbx
    0000012e: 	shrq	$0x7, %rbx
    00000132: 	notq	%rbx
    00000135: 	jmp	.Ltmp1537 # Offset: 309
    00000137: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1532:
    00000140: 	movq	0x8(%r12), %rcx
    00000145: 	addq	$0x8, %r12
    00000149: 	leaq	0x200(%rcx), %r13
    00000150: 	movq	%rcx, %rbp
    00000153: 	jmp	.Ltmp1538 # Offset: 339
DWARF CFI Instructions:
    <empty>
End of Function "_Z12upper_bound2ISt15_Deque_iteratorIfRfPfEfET_S4_S4_T0_"

Binary Function "_Z12upper_bound2ISt15_Deque_iteratorIiRiPiEiET_S4_S4_T0_" after disassembly {
  Number      : 256
  State       : disassembled
  Address     : 0x9e90
  Size        : 0x157
  MaxSize     : 0x160
  Offset      : 0x9e90
  Section     : .text
  Orc Section : .local.text._Z12upper_bound2ISt15_Deque_iteratorIiRiPiEiET_S4_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0255:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	movq	%rdx, %r11
    00000009: 	movq	%rdi, %r8
    0000000c: 	movq	0x18(%rsi), %rdi
    00000010: 	pushq	%r13
    00000012: 	movq	0x10(%rsi), %r10
    00000016: 	movl	%ecx, %r9d
    00000019: 	pushq	%r12
    0000001b: 	movq	(%rsi), %rcx
    0000001e: 	pushq	%rbp
    0000001f: 	pushq	%rbx
    00000020: 	movq	0x18(%rdx), %rdx
    00000024: 	movq	%rdx, %rax
    00000027: 	subq	%rdi, %rax
    0000002a: 	sarq	$0x3, %rax
    0000002e: 	cmpq	$0x1, %rdx
    00000032: 	movq	(%r11), %rdx
    00000035: 	adcq	$-0x1, %rax
    00000039: 	subq	0x8(%r11), %rdx
    0000003d: 	movq	0x8(%rsi), %r11
    00000041: 	sarq	$0x2, %rdx
    00000045: 	shlq	$0x7, %rax
    00000049: 	addq	%rdx, %rax
    0000004c: 	movq	%r10, %rdx
    0000004f: 	subq	%rcx, %rdx
    00000052: 	sarq	$0x2, %rdx
    00000056: 	addq	%rdx, %rax
    00000059: 	je	.Ltmp1539 # Offset: 89
    0000005f: 	movq	%rax, %rbx
    00000062: 	jmp	.Ltmp1540 # Offset: 98
    00000064: 	nopl	(%rax) # Size: 4
.Ltmp1544:
    00000068: 	leaq	0x4(%rdx), %rcx
    0000006c: 	cmpq	%r14, %rcx
    0000006f: 	je	.Ltmp1541 # Offset: 111
.Ltmp1547:
    00000075: 	movq	%rcx, %xmm0
    0000007a: 	movq	%r12, %xmm1
    0000007f: 	movq	%r13, %rdi
    00000082: 	movq	%r14, %r10
    00000085: 	punpcklqdq	%xmm1, %xmm0
    00000089: 	movq	%r13, %xmm2
    0000008e: 	addq	$0x1, %rax
    00000092: 	movq	%r12, %r11
    00000095: 	movups	%xmm0, (%rsi)
    00000098: 	movq	%r14, %xmm0
    0000009d: 	subq	%rax, %rbx
    000000a0: 	punpcklqdq	%xmm2, %xmm0
    000000a4: 	movups	%xmm0, 0x10(%rsi)
    000000a8: 	testq	%rbx, %rbx
    000000ab: 	je	.Ltmp1539 # Offset: 171
.Ltmp1540:
    000000ad: 	movq	%rbx, %rax
    000000b0: 	movq	%rcx, %rdx
    000000b3: 	shrq	$0x3f, %rax
    000000b7: 	subq	%r11, %rdx
    000000ba: 	addq	%rbx, %rax
    000000bd: 	sarq	$0x2, %rdx
    000000c1: 	sarq	%rax
    000000c4: 	addq	%rax, %rdx
    000000c7: 	js	.Ltmp1542 # Offset: 199
    000000c9: 	cmpq	$0x7f, %rdx
    000000cd: 	jg	.Ltmp1543 # Offset: 205
    000000cf: 	leaq	(%rcx,%rax,4), %rdx
    000000d3: 	movq	%rdi, %r13
    000000d6: 	movq	%r10, %r14
    000000d9: 	movq	%r11, %r12
.Ltmp1545:
    000000dc: 	cmpl	%r9d, (%rdx)
    000000df: 	jle	.Ltmp1544 # Offset: 223
    000000e1: 	movq	%rax, %rbx
    000000e4: 	testq	%rbx, %rbx
    000000e7: 	jne	.Ltmp1540 # Offset: 231
.Ltmp1539:
    000000e9: 	popq	%rbx
    000000ea: 	movq	%r8, %rax
    000000ed: 	popq	%rbp
    000000ee: 	movq	%rcx, (%r8)
    000000f1: 	popq	%r12
    000000f3: 	popq	%r13
    000000f5: 	movq	%r11, 0x8(%r8)
    000000f9: 	movq	%r10, 0x10(%r8)
    000000fd: 	popq	%r14
    000000ff: 	movq	%rdi, 0x18(%r8)
    00000103: 	retq # Offset: 259
    00000104: 	nopl	(%rax) # Size: 4
.Ltmp1543:
    00000108: 	movq	%rdx, %rbp
    0000010b: 	sarq	$0x7, %rbp
.Ltmp1546:
    0000010f: 	leaq	(%rdi,%rbp,8), %r13
    00000113: 	shlq	$0x7, %rbp
    00000117: 	movq	(%r13), %r12
    0000011b: 	subq	%rbp, %rdx
    0000011e: 	leaq	0x200(%r12), %r14
    00000126: 	leaq	(%r12,%rdx,4), %rdx
    0000012a: 	jmp	.Ltmp1545 # Offset: 298
    0000012c: 	nopl	(%rax) # Size: 4
.Ltmp1542:
    00000130: 	movq	%rdx, %rbp
    00000133: 	notq	%rbp
    00000136: 	shrq	$0x7, %rbp
    0000013a: 	notq	%rbp
    0000013d: 	jmp	.Ltmp1546 # Offset: 317
    0000013f: 	nop # Size: 1
.Ltmp1541:
    00000140: 	movq	0x8(%r13), %rcx
    00000144: 	addq	$0x8, %r13
    00000148: 	leaq	0x200(%rcx), %r14
    0000014f: 	movq	%rcx, %r12
    00000152: 	jmp	.Ltmp1547 # Offset: 338
DWARF CFI Instructions:
    <empty>
End of Function "_Z12upper_bound2ISt15_Deque_iteratorIiRiPiEiET_S4_S4_T0_"

Binary Function "_Z12lower_bound2ISt15_Deque_iteratorIfRfPfEfET_S4_S4_T0_" after disassembly {
  Number      : 257
  State       : disassembled
  Address     : 0x9ff0
  Size        : 0x158
  MaxSize     : 0x160
  Offset      : 0x9ff0
  Section     : .text
  Orc Section : .local.text._Z12lower_bound2ISt15_Deque_iteratorIfRfPfEfET_S4_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0256:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	movq	%rdx, %r10
    00000009: 	movq	%rdi, %r8
    0000000c: 	movq	0x18(%rsi), %rdi
    00000010: 	movq	0x10(%rsi), %r9
    00000014: 	movq	(%rsi), %rcx
    00000017: 	pushq	%r12
    00000019: 	pushq	%rbp
    0000001a: 	movq	0x8(%rsi), %r11
    0000001e: 	pushq	%rbx
    0000001f: 	movq	0x18(%rdx), %rdx
    00000023: 	movq	%rdx, %rax
    00000026: 	subq	%rdi, %rax
    00000029: 	sarq	$0x3, %rax
    0000002d: 	cmpq	$0x1, %rdx
    00000031: 	movq	(%r10), %rdx
    00000034: 	adcq	$-0x1, %rax
    00000038: 	subq	0x8(%r10), %rdx
    0000003c: 	sarq	$0x2, %rdx
    00000040: 	shlq	$0x7, %rax
    00000044: 	addq	%rdx, %rax
    00000047: 	movq	%r9, %rdx
    0000004a: 	subq	%rcx, %rdx
    0000004d: 	sarq	$0x2, %rdx
    00000051: 	addq	%rdx, %rax
    00000054: 	je	.Ltmp1548 # Offset: 84
    0000005a: 	movq	%rax, %r10
    0000005d: 	jmp	.Ltmp1549 # Offset: 93
    0000005f: 	nop # Size: 1
.Ltmp1553:
    00000060: 	leaq	0x4(%rdx), %rcx
    00000064: 	cmpq	%r13, %rcx
    00000067: 	je	.Ltmp1550 # Offset: 103
.Ltmp1556:
    0000006d: 	movq	%rcx, %xmm1
    00000072: 	movq	%rbp, %xmm2
    00000077: 	movq	%r12, %rdi
    0000007a: 	movq	%r13, %r9
    0000007d: 	punpcklqdq	%xmm2, %xmm1
    00000081: 	movq	%r12, %xmm3
    00000086: 	addq	$0x1, %rax
    0000008a: 	movq	%rbp, %r11
    0000008d: 	movups	%xmm1, (%rsi)
    00000090: 	movq	%r13, %xmm1
    00000095: 	subq	%rax, %r10
    00000098: 	punpcklqdq	%xmm3, %xmm1
    0000009c: 	movups	%xmm1, 0x10(%rsi)
    000000a0: 	testq	%r10, %r10
    000000a3: 	je	.Ltmp1548 # Offset: 163
.Ltmp1549:
    000000a5: 	movq	%r10, %rax
    000000a8: 	movq	%rcx, %rdx
    000000ab: 	shrq	$0x3f, %rax
    000000af: 	subq	%r11, %rdx
    000000b2: 	addq	%r10, %rax
    000000b5: 	sarq	$0x2, %rdx
    000000b9: 	sarq	%rax
    000000bc: 	addq	%rax, %rdx
    000000bf: 	js	.Ltmp1551 # Offset: 191
    000000c1: 	cmpq	$0x7f, %rdx
    000000c5: 	jg	.Ltmp1552 # Offset: 197
    000000c7: 	leaq	(%rcx,%rax,4), %rdx
    000000cb: 	movq	%rdi, %r12
    000000ce: 	movq	%r9, %r13
    000000d1: 	movq	%r11, %rbp
.Ltmp1554:
    000000d4: 	comiss	(%rdx), %xmm0
    000000d7: 	ja	.Ltmp1553 # Offset: 215
    000000d9: 	movq	%rax, %r10
    000000dc: 	testq	%r10, %r10
    000000df: 	jne	.Ltmp1549 # Offset: 223
.Ltmp1548:
    000000e1: 	popq	%rbx
    000000e2: 	movq	%r8, %rax
    000000e5: 	popq	%rbp
    000000e6: 	movq	%rcx, (%r8)
    000000e9: 	popq	%r12
    000000eb: 	popq	%r13
    000000ed: 	movq	%r11, 0x8(%r8)
    000000f1: 	movq	%r9, 0x10(%r8)
    000000f5: 	movq	%rdi, 0x18(%r8)
    000000f9: 	retq # Offset: 249
    000000fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1552:
    00000100: 	movq	%rdx, %rbx
    00000103: 	sarq	$0x7, %rbx
.Ltmp1555:
    00000107: 	leaq	(%rdi,%rbx,8), %r12
    0000010b: 	shlq	$0x7, %rbx
    0000010f: 	movq	(%r12), %rbp
    00000113: 	subq	%rbx, %rdx
    00000116: 	leaq	0x200(%rbp), %r13
    0000011d: 	leaq	(%rbp,%rdx,4), %rdx
    00000122: 	jmp	.Ltmp1554 # Offset: 290
    00000124: 	nopl	(%rax) # Size: 4
.Ltmp1551:
    00000128: 	movq	%rdx, %rbx
    0000012b: 	notq	%rbx
    0000012e: 	shrq	$0x7, %rbx
    00000132: 	notq	%rbx
    00000135: 	jmp	.Ltmp1555 # Offset: 309
    00000137: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1550:
    00000140: 	movq	0x8(%r12), %rcx
    00000145: 	addq	$0x8, %r12
    00000149: 	leaq	0x200(%rcx), %r13
    00000150: 	movq	%rcx, %rbp
    00000153: 	jmp	.Ltmp1556 # Offset: 339
DWARF CFI Instructions:
    <empty>
End of Function "_Z12lower_bound2ISt15_Deque_iteratorIfRfPfEfET_S4_S4_T0_"

Binary Function "_Z13binarysearch3ISt15_Deque_iteratorIfRfPfEfEbT_S4_T0_" after disassembly {
  Number      : 258
  State       : disassembled
  Address     : 0xa150
  Size        : 0x92
  MaxSize     : 0xa0
  Offset      : 0xa150
  Section     : .text
  Orc Section : .local.text._Z13binarysearch3ISt15_Deque_iteratorIfRfPfEfEbT_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0257:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rsi, %rbx
    00000008: 	addq	$-0x80, %rsp
    0000000c: 	movdqu	(%rsi), %xmm2
    00000010: 	movdqu	0x10(%rsi), %xmm3
    00000015: 	movdqu	0x10(%rdi), %xmm1
    0000001a: 	movdqu	(%rdi), %xmm4
    0000001e: 	leaq	0x50(%rsp), %rdx
    00000023: 	leaq	0x10(%rsp), %rdi
    00000028: 	movq	%fs:0x28, %rax
    00000031: 	movq	%rax, 0x78(%rsp)
    00000036: 	xorl	%eax, %eax
    00000038: 	leaq	0x30(%rsp), %rsi
    0000003d: 	movaps	%xmm2, 0x50(%rsp)
    00000042: 	movaps	%xmm3, 0x60(%rsp)
    00000047: 	movaps	%xmm4, 0x30(%rsp)
    0000004c: 	movaps	%xmm1, 0x40(%rsp)
    00000051: 	movss	%xmm0, 0xc(%rsp)
    00000057: 	callq	_Z12lower_bound2ISt15_Deque_iteratorIfRfPfEfET_S4_S4_T0_ # Offset: 87
    0000005c: 	movq	0x10(%rsp), %rdx
    00000061: 	xorl	%eax, %eax
    00000063: 	cmpq	%rdx, (%rbx)
    00000066: 	je	.Ltmp1557 # Offset: 102
    00000068: 	movss	0xc(%rsp), %xmm0
    0000006e: 	ucomiss	(%rdx), %xmm0
    00000071: 	setnp	%dl
    00000074: 	cmovel	%edx, %eax
.Ltmp1557:
    00000077: 	movq	0x78(%rsp), %rdx
    0000007c: 	subq	%fs:0x28, %rdx
    00000085: 	jne	.Ltmp1558 # Offset: 133
    00000087: 	subq	$-0x80, %rsp
    0000008b: 	popq	%rbx
    0000008c: 	retq # Offset: 140
.Ltmp1558:
    0000008d: 	callq	__stack_chk_fail@PLT # Offset: 141
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch3ISt15_Deque_iteratorIfRfPfEfEbT_S4_T0_"

Binary Function "_Z12lower_bound2ISt15_Deque_iteratorIiRiPiEiET_S4_S4_T0_" after disassembly {
  Number      : 259
  State       : disassembled
  Address     : 0xa1f0
  Size        : 0x157
  MaxSize     : 0x160
  Offset      : 0xa1f0
  Section     : .text
  Orc Section : .local.text._Z12lower_bound2ISt15_Deque_iteratorIiRiPiEiET_S4_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0258:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	movq	%rdx, %r11
    00000009: 	movq	%rdi, %r8
    0000000c: 	movq	0x18(%rsi), %rdi
    00000010: 	pushq	%r13
    00000012: 	movq	0x10(%rsi), %r10
    00000016: 	movl	%ecx, %r9d
    00000019: 	pushq	%r12
    0000001b: 	movq	(%rsi), %rcx
    0000001e: 	pushq	%rbp
    0000001f: 	pushq	%rbx
    00000020: 	movq	0x18(%rdx), %rdx
    00000024: 	movq	%rdx, %rax
    00000027: 	subq	%rdi, %rax
    0000002a: 	sarq	$0x3, %rax
    0000002e: 	cmpq	$0x1, %rdx
    00000032: 	movq	(%r11), %rdx
    00000035: 	adcq	$-0x1, %rax
    00000039: 	subq	0x8(%r11), %rdx
    0000003d: 	movq	0x8(%rsi), %r11
    00000041: 	sarq	$0x2, %rdx
    00000045: 	shlq	$0x7, %rax
    00000049: 	addq	%rdx, %rax
    0000004c: 	movq	%r10, %rdx
    0000004f: 	subq	%rcx, %rdx
    00000052: 	sarq	$0x2, %rdx
    00000056: 	addq	%rdx, %rax
    00000059: 	je	.Ltmp1559 # Offset: 89
    0000005f: 	movq	%rax, %rbx
    00000062: 	jmp	.Ltmp1560 # Offset: 98
    00000064: 	nopl	(%rax) # Size: 4
.Ltmp1564:
    00000068: 	leaq	0x4(%rdx), %rcx
    0000006c: 	cmpq	%r14, %rcx
    0000006f: 	je	.Ltmp1561 # Offset: 111
.Ltmp1567:
    00000075: 	movq	%rcx, %xmm0
    0000007a: 	movq	%r12, %xmm1
    0000007f: 	movq	%r13, %rdi
    00000082: 	movq	%r14, %r10
    00000085: 	punpcklqdq	%xmm1, %xmm0
    00000089: 	movq	%r13, %xmm2
    0000008e: 	addq	$0x1, %rax
    00000092: 	movq	%r12, %r11
    00000095: 	movups	%xmm0, (%rsi)
    00000098: 	movq	%r14, %xmm0
    0000009d: 	subq	%rax, %rbx
    000000a0: 	punpcklqdq	%xmm2, %xmm0
    000000a4: 	movups	%xmm0, 0x10(%rsi)
    000000a8: 	testq	%rbx, %rbx
    000000ab: 	je	.Ltmp1559 # Offset: 171
.Ltmp1560:
    000000ad: 	movq	%rbx, %rax
    000000b0: 	movq	%rcx, %rdx
    000000b3: 	shrq	$0x3f, %rax
    000000b7: 	subq	%r11, %rdx
    000000ba: 	addq	%rbx, %rax
    000000bd: 	sarq	$0x2, %rdx
    000000c1: 	sarq	%rax
    000000c4: 	addq	%rax, %rdx
    000000c7: 	js	.Ltmp1562 # Offset: 199
    000000c9: 	cmpq	$0x7f, %rdx
    000000cd: 	jg	.Ltmp1563 # Offset: 205
    000000cf: 	leaq	(%rcx,%rax,4), %rdx
    000000d3: 	movq	%rdi, %r13
    000000d6: 	movq	%r10, %r14
    000000d9: 	movq	%r11, %r12
.Ltmp1565:
    000000dc: 	cmpl	%r9d, (%rdx)
    000000df: 	jl	.Ltmp1564 # Offset: 223
    000000e1: 	movq	%rax, %rbx
    000000e4: 	testq	%rbx, %rbx
    000000e7: 	jne	.Ltmp1560 # Offset: 231
.Ltmp1559:
    000000e9: 	popq	%rbx
    000000ea: 	movq	%r8, %rax
    000000ed: 	popq	%rbp
    000000ee: 	movq	%rcx, (%r8)
    000000f1: 	popq	%r12
    000000f3: 	popq	%r13
    000000f5: 	movq	%r11, 0x8(%r8)
    000000f9: 	movq	%r10, 0x10(%r8)
    000000fd: 	popq	%r14
    000000ff: 	movq	%rdi, 0x18(%r8)
    00000103: 	retq # Offset: 259
    00000104: 	nopl	(%rax) # Size: 4
.Ltmp1563:
    00000108: 	movq	%rdx, %rbp
    0000010b: 	sarq	$0x7, %rbp
.Ltmp1566:
    0000010f: 	leaq	(%rdi,%rbp,8), %r13
    00000113: 	shlq	$0x7, %rbp
    00000117: 	movq	(%r13), %r12
    0000011b: 	subq	%rbp, %rdx
    0000011e: 	leaq	0x200(%r12), %r14
    00000126: 	leaq	(%r12,%rdx,4), %rdx
    0000012a: 	jmp	.Ltmp1565 # Offset: 298
    0000012c: 	nopl	(%rax) # Size: 4
.Ltmp1562:
    00000130: 	movq	%rdx, %rbp
    00000133: 	notq	%rbp
    00000136: 	shrq	$0x7, %rbp
    0000013a: 	notq	%rbp
    0000013d: 	jmp	.Ltmp1566 # Offset: 317
    0000013f: 	nop # Size: 1
.Ltmp1561:
    00000140: 	movq	0x8(%r13), %rcx
    00000144: 	addq	$0x8, %r13
    00000148: 	leaq	0x200(%rcx), %r14
    0000014f: 	movq	%rcx, %r12
    00000152: 	jmp	.Ltmp1567 # Offset: 338
DWARF CFI Instructions:
    <empty>
End of Function "_Z12lower_bound2ISt15_Deque_iteratorIiRiPiEiET_S4_S4_T0_"

Binary Function "_Z13binarysearch3ISt15_Deque_iteratorIiRiPiEiEbT_S4_T0_" after disassembly {
  Number      : 260
  State       : disassembled
  Address     : 0xa350
  Size        : 0x8a
  MaxSize     : 0x90
  Offset      : 0xa350
  Section     : .text
  Orc Section : .local.text._Z13binarysearch3ISt15_Deque_iteratorIiRiPiEiEbT_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0259:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movl	%edx, %ebp
    00000007: 	pushq	%rbx
    00000008: 	movl	%ebp, %ecx
    0000000a: 	movq	%rsi, %rbx
    0000000d: 	subq	$0x78, %rsp
    00000011: 	movdqu	(%rsi), %xmm1
    00000015: 	movdqu	0x10(%rsi), %xmm2
    0000001a: 	movdqu	0x10(%rdi), %xmm0
    0000001f: 	movdqu	(%rdi), %xmm3
    00000023: 	leaq	0x40(%rsp), %rdx
    00000028: 	movq	%rsp, %rdi
    0000002b: 	movq	%fs:0x28, %rax
    00000034: 	movq	%rax, 0x68(%rsp)
    00000039: 	xorl	%eax, %eax
    0000003b: 	leaq	0x20(%rsp), %rsi
    00000040: 	movaps	%xmm1, 0x40(%rsp)
    00000045: 	movaps	%xmm2, 0x50(%rsp)
    0000004a: 	movaps	%xmm3, 0x20(%rsp)
    0000004f: 	movaps	%xmm0, 0x30(%rsp)
    00000054: 	callq	_Z12lower_bound2ISt15_Deque_iteratorIiRiPiEiET_S4_S4_T0_ # Offset: 84
    00000059: 	movq	(%rsp), %rax
    0000005d: 	xorl	%r8d, %r8d
    00000060: 	cmpq	%rax, (%rbx)
    00000063: 	je	.Ltmp1568 # Offset: 99
    00000065: 	cmpl	%ebp, (%rax)
    00000067: 	sete	%r8b
.Ltmp1568:
    0000006b: 	movq	0x68(%rsp), %rax
    00000070: 	subq	%fs:0x28, %rax
    00000079: 	jne	.Ltmp1569 # Offset: 121
    0000007b: 	addq	$0x78, %rsp
    0000007f: 	movl	%r8d, %eax
    00000082: 	popq	%rbx
    00000083: 	popq	%rbp
    00000084: 	retq # Offset: 132
.Ltmp1569:
    00000085: 	callq	__stack_chk_fail@PLT # Offset: 133
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch3ISt15_Deque_iteratorIiRiPiEiEbT_S4_T0_"

Binary Function "_Z12lower_bound2ISt15_Deque_iteratorItRtPtEtET_S4_S4_T0_" after disassembly {
  Number      : 261
  State       : disassembled
  Address     : 0xa3e0
  Size        : 0x167
  MaxSize     : 0x170
  Offset      : 0xa3e0
  Section     : .text
  Orc Section : .local.text._Z12lower_bound2ISt15_Deque_iteratorItRtPtEtET_S4_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0260:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	movq	%rdx, %r11
    00000009: 	movq	%rdi, %r8
    0000000c: 	movq	0x18(%rsi), %rdi
    00000010: 	pushq	%r13
    00000012: 	movq	0x10(%rsi), %r10
    00000016: 	movl	%ecx, %r9d
    00000019: 	pushq	%r12
    0000001b: 	movq	(%rsi), %rcx
    0000001e: 	pushq	%rbp
    0000001f: 	pushq	%rbx
    00000020: 	movq	0x18(%rdx), %rdx
    00000024: 	movq	%rdx, %rax
    00000027: 	subq	%rdi, %rax
    0000002a: 	sarq	$0x3, %rax
    0000002e: 	cmpq	$0x1, %rdx
    00000032: 	movq	(%r11), %rdx
    00000035: 	adcq	$-0x1, %rax
    00000039: 	subq	0x8(%r11), %rdx
    0000003d: 	movq	0x8(%rsi), %r11
    00000041: 	sarq	%rdx
    00000044: 	shlq	$0x8, %rax
    00000048: 	addq	%rdx, %rax
    0000004b: 	movq	%r10, %rdx
    0000004e: 	subq	%rcx, %rdx
    00000051: 	sarq	%rdx
    00000054: 	addq	%rdx, %rax
    00000057: 	je	.Ltmp1570 # Offset: 87
    0000005d: 	movq	%rax, %rbx
    00000060: 	jmp	.Ltmp1571 # Offset: 96
    00000062: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1575:
    00000068: 	leaq	0x2(%rdx), %rcx
    0000006c: 	cmpq	%r14, %rcx
    0000006f: 	je	.Ltmp1572 # Offset: 111
.Ltmp1578:
    00000075: 	movq	%rcx, %xmm0
    0000007a: 	movq	%r12, %xmm1
    0000007f: 	movq	%r13, %rdi
    00000082: 	movq	%r14, %r10
    00000085: 	punpcklqdq	%xmm1, %xmm0
    00000089: 	movq	%r13, %xmm2
    0000008e: 	addq	$0x1, %rax
    00000092: 	movq	%r12, %r11
    00000095: 	movups	%xmm0, (%rsi)
    00000098: 	movq	%r14, %xmm0
    0000009d: 	subq	%rax, %rbx
    000000a0: 	punpcklqdq	%xmm2, %xmm0
    000000a4: 	movups	%xmm0, 0x10(%rsi)
    000000a8: 	testq	%rbx, %rbx
    000000ab: 	je	.Ltmp1570 # Offset: 171
.Ltmp1571:
    000000ad: 	movq	%rbx, %rax
    000000b0: 	movq	%rcx, %rdx
    000000b3: 	shrq	$0x3f, %rax
    000000b7: 	subq	%r11, %rdx
    000000ba: 	addq	%rbx, %rax
    000000bd: 	sarq	%rdx
    000000c0: 	sarq	%rax
    000000c3: 	addq	%rax, %rdx
    000000c6: 	js	.Ltmp1573 # Offset: 198
    000000c8: 	cmpq	$0xff, %rdx
    000000cf: 	jg	.Ltmp1574 # Offset: 207
    000000d1: 	leaq	(%rcx,%rax,2), %rdx
    000000d5: 	movq	%rdi, %r13
    000000d8: 	movq	%r10, %r14
    000000db: 	movq	%r11, %r12
.Ltmp1576:
    000000de: 	cmpw	%r9w, (%rdx)
    000000e2: 	jb	.Ltmp1575 # Offset: 226
    000000e4: 	movq	%rax, %rbx
    000000e7: 	testq	%rbx, %rbx
    000000ea: 	jne	.Ltmp1571 # Offset: 234
.Ltmp1570:
    000000ec: 	popq	%rbx
    000000ed: 	movq	%r8, %rax
    000000f0: 	popq	%rbp
    000000f1: 	movq	%rcx, (%r8)
    000000f4: 	popq	%r12
    000000f6: 	popq	%r13
    000000f8: 	movq	%r11, 0x8(%r8)
    000000fc: 	movq	%r10, 0x10(%r8)
    00000100: 	popq	%r14
    00000102: 	movq	%rdi, 0x18(%r8)
    00000106: 	retq # Offset: 262
    00000107: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1574:
    00000110: 	movq	%rdx, %rbp
    00000113: 	sarq	$0x8, %rbp
.Ltmp1577:
    00000117: 	leaq	(%rdi,%rbp,8), %r13
    0000011b: 	shlq	$0x8, %rbp
    0000011f: 	movq	(%r13), %r12
    00000123: 	subq	%rbp, %rdx
    00000126: 	leaq	0x200(%r12), %r14
    0000012e: 	leaq	(%r12,%rdx,2), %rdx
    00000132: 	jmp	.Ltmp1576 # Offset: 306
    00000134: 	nopl	(%rax) # Size: 4
.Ltmp1573:
    00000138: 	movq	%rdx, %rbp
    0000013b: 	notq	%rbp
    0000013e: 	shrq	$0x8, %rbp
    00000142: 	notq	%rbp
    00000145: 	jmp	.Ltmp1577 # Offset: 325
    00000147: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1572:
    00000150: 	movq	0x8(%r13), %rcx
    00000154: 	addq	$0x8, %r13
    00000158: 	leaq	0x200(%rcx), %r14
    0000015f: 	movq	%rcx, %r12
    00000162: 	jmp	.Ltmp1578 # Offset: 354
DWARF CFI Instructions:
    <empty>
End of Function "_Z12lower_bound2ISt15_Deque_iteratorItRtPtEtET_S4_S4_T0_"

Binary Function "_Z13binarysearch3ISt15_Deque_iteratorItRtPtEtEbT_S4_T0_" after disassembly {
  Number      : 262
  State       : disassembled
  Address     : 0xa550
  Size        : 0x8c
  MaxSize     : 0x90
  Offset      : 0xa550
  Section     : .text
  Orc Section : .local.text._Z13binarysearch3ISt15_Deque_iteratorItRtPtEtEbT_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0261:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movzwl	%dx, %ecx
    00000008: 	movl	%edx, %ebp
    0000000a: 	pushq	%rbx
    0000000b: 	movq	%rsi, %rbx
    0000000e: 	subq	$0x78, %rsp
    00000012: 	movdqu	(%rsi), %xmm1
    00000016: 	movdqu	0x10(%rsi), %xmm2
    0000001b: 	movdqu	0x10(%rdi), %xmm0
    00000020: 	movdqu	(%rdi), %xmm3
    00000024: 	leaq	0x40(%rsp), %rdx
    00000029: 	movq	%rsp, %rdi
    0000002c: 	movq	%fs:0x28, %rax
    00000035: 	movq	%rax, 0x68(%rsp)
    0000003a: 	xorl	%eax, %eax
    0000003c: 	leaq	0x20(%rsp), %rsi
    00000041: 	movaps	%xmm1, 0x40(%rsp)
    00000046: 	movaps	%xmm2, 0x50(%rsp)
    0000004b: 	movaps	%xmm3, 0x20(%rsp)
    00000050: 	movaps	%xmm0, 0x30(%rsp)
    00000055: 	callq	_Z12lower_bound2ISt15_Deque_iteratorItRtPtEtET_S4_S4_T0_ # Offset: 85
    0000005a: 	movq	(%rsp), %rax
    0000005e: 	xorl	%r8d, %r8d
    00000061: 	cmpq	%rax, (%rbx)
    00000064: 	je	.Ltmp1579 # Offset: 100
    00000066: 	cmpw	%bp, (%rax)
    00000069: 	sete	%r8b
.Ltmp1579:
    0000006d: 	movq	0x68(%rsp), %rax
    00000072: 	subq	%fs:0x28, %rax
    0000007b: 	jne	.Ltmp1580 # Offset: 123
    0000007d: 	addq	$0x78, %rsp
    00000081: 	movl	%r8d, %eax
    00000084: 	popq	%rbx
    00000085: 	popq	%rbp
    00000086: 	retq # Offset: 134
.Ltmp1580:
    00000087: 	callq	__stack_chk_fail@PLT # Offset: 135
DWARF CFI Instructions:
    <empty>
End of Function "_Z13binarysearch3ISt15_Deque_iteratorItRtPtEtEbT_S4_T0_"

Binary Function "_Z12upper_bound2ISt15_Deque_iteratorItRtPtEtET_S4_S4_T0_" after disassembly {
  Number      : 263
  State       : disassembled
  Address     : 0xa5e0
  Size        : 0x167
  MaxSize     : 0x170
  Offset      : 0xa5e0
  Section     : .text
  Orc Section : .local.text._Z12upper_bound2ISt15_Deque_iteratorItRtPtEtET_S4_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0262:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	movq	%rdx, %r11
    00000009: 	movq	%rdi, %r8
    0000000c: 	movq	0x18(%rsi), %rdi
    00000010: 	pushq	%r13
    00000012: 	movq	0x10(%rsi), %r10
    00000016: 	movl	%ecx, %r9d
    00000019: 	pushq	%r12
    0000001b: 	movq	(%rsi), %rcx
    0000001e: 	pushq	%rbp
    0000001f: 	pushq	%rbx
    00000020: 	movq	0x18(%rdx), %rdx
    00000024: 	movq	%rdx, %rax
    00000027: 	subq	%rdi, %rax
    0000002a: 	sarq	$0x3, %rax
    0000002e: 	cmpq	$0x1, %rdx
    00000032: 	movq	(%r11), %rdx
    00000035: 	adcq	$-0x1, %rax
    00000039: 	subq	0x8(%r11), %rdx
    0000003d: 	movq	0x8(%rsi), %r11
    00000041: 	sarq	%rdx
    00000044: 	shlq	$0x8, %rax
    00000048: 	addq	%rdx, %rax
    0000004b: 	movq	%r10, %rdx
    0000004e: 	subq	%rcx, %rdx
    00000051: 	sarq	%rdx
    00000054: 	addq	%rdx, %rax
    00000057: 	je	.Ltmp1581 # Offset: 87
    0000005d: 	movq	%rax, %rbx
    00000060: 	jmp	.Ltmp1582 # Offset: 96
    00000062: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1586:
    00000068: 	leaq	0x2(%rdx), %rcx
    0000006c: 	cmpq	%r14, %rcx
    0000006f: 	je	.Ltmp1583 # Offset: 111
.Ltmp1589:
    00000075: 	movq	%rcx, %xmm0
    0000007a: 	movq	%r12, %xmm1
    0000007f: 	movq	%r13, %rdi
    00000082: 	movq	%r14, %r10
    00000085: 	punpcklqdq	%xmm1, %xmm0
    00000089: 	movq	%r13, %xmm2
    0000008e: 	addq	$0x1, %rax
    00000092: 	movq	%r12, %r11
    00000095: 	movups	%xmm0, (%rsi)
    00000098: 	movq	%r14, %xmm0
    0000009d: 	subq	%rax, %rbx
    000000a0: 	punpcklqdq	%xmm2, %xmm0
    000000a4: 	movups	%xmm0, 0x10(%rsi)
    000000a8: 	testq	%rbx, %rbx
    000000ab: 	je	.Ltmp1581 # Offset: 171
.Ltmp1582:
    000000ad: 	movq	%rbx, %rax
    000000b0: 	movq	%rcx, %rdx
    000000b3: 	shrq	$0x3f, %rax
    000000b7: 	subq	%r11, %rdx
    000000ba: 	addq	%rbx, %rax
    000000bd: 	sarq	%rdx
    000000c0: 	sarq	%rax
    000000c3: 	addq	%rax, %rdx
    000000c6: 	js	.Ltmp1584 # Offset: 198
    000000c8: 	cmpq	$0xff, %rdx
    000000cf: 	jg	.Ltmp1585 # Offset: 207
    000000d1: 	leaq	(%rcx,%rax,2), %rdx
    000000d5: 	movq	%rdi, %r13
    000000d8: 	movq	%r10, %r14
    000000db: 	movq	%r11, %r12
.Ltmp1587:
    000000de: 	cmpw	%r9w, (%rdx)
    000000e2: 	jbe	.Ltmp1586 # Offset: 226
    000000e4: 	movq	%rax, %rbx
    000000e7: 	testq	%rbx, %rbx
    000000ea: 	jne	.Ltmp1582 # Offset: 234
.Ltmp1581:
    000000ec: 	popq	%rbx
    000000ed: 	movq	%r8, %rax
    000000f0: 	popq	%rbp
    000000f1: 	movq	%rcx, (%r8)
    000000f4: 	popq	%r12
    000000f6: 	popq	%r13
    000000f8: 	movq	%r11, 0x8(%r8)
    000000fc: 	movq	%r10, 0x10(%r8)
    00000100: 	popq	%r14
    00000102: 	movq	%rdi, 0x18(%r8)
    00000106: 	retq # Offset: 262
    00000107: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1585:
    00000110: 	movq	%rdx, %rbp
    00000113: 	sarq	$0x8, %rbp
.Ltmp1588:
    00000117: 	leaq	(%rdi,%rbp,8), %r13
    0000011b: 	shlq	$0x8, %rbp
    0000011f: 	movq	(%r13), %r12
    00000123: 	subq	%rbp, %rdx
    00000126: 	leaq	0x200(%r12), %r14
    0000012e: 	leaq	(%r12,%rdx,2), %rdx
    00000132: 	jmp	.Ltmp1587 # Offset: 306
    00000134: 	nopl	(%rax) # Size: 4
.Ltmp1584:
    00000138: 	movq	%rdx, %rbp
    0000013b: 	notq	%rbp
    0000013e: 	shrq	$0x8, %rbp
    00000142: 	notq	%rbp
    00000145: 	jmp	.Ltmp1588 # Offset: 325
    00000147: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1583:
    00000150: 	movq	0x8(%r13), %rcx
    00000154: 	addq	$0x8, %r13
    00000158: 	leaq	0x200(%rcx), %r14
    0000015f: 	movq	%rcx, %r12
    00000162: 	jmp	.Ltmp1589 # Offset: 354
DWARF CFI Instructions:
    <empty>
End of Function "_Z12upper_bound2ISt15_Deque_iteratorItRtPtEtET_S4_S4_T0_"

Binary Function "_Z16std_binarysearchISt15_Deque_iteratorIiRiPiEiEbT_S4_T0_" after disassembly {
  Number      : 264
  State       : disassembled
  Address     : 0xa750
  Size        : 0x118
  MaxSize     : 0x120
  Offset      : 0xa750
  Section     : .text
  Orc Section : .local.text._Z16std_binarysearchISt15_Deque_iteratorIiRiPiEiEbT_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0263:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	movl	%edx, %r10d
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movq	0x18(%rsi), %rax
    00000011: 	movq	(%rdi), %r8
    00000014: 	movq	0x10(%rdi), %r11
    00000018: 	movq	0x8(%rdi), %r9
    0000001c: 	movq	0x18(%rdi), %rdi
    00000020: 	movq	%rax, %rdx
    00000023: 	movq	(%rsi), %rbx
    00000026: 	subq	%rdi, %rdx
    00000029: 	sarq	$0x3, %rdx
    0000002d: 	cmpq	$0x1, %rax
    00000031: 	movq	%rbx, %rax
    00000034: 	adcq	$-0x1, %rdx
    00000038: 	subq	0x8(%rsi), %rax
    0000003c: 	sarq	$0x2, %rax
    00000040: 	shlq	$0x7, %rdx
    00000044: 	addq	%rax, %rdx
    00000047: 	movq	%r11, %rax
    0000004a: 	subq	%r8, %rax
    0000004d: 	sarq	$0x2, %rax
    00000051: 	addq	%rax, %rdx
    00000054: 	nopl	(%rax) # Size: 4
.Ltmp1597:
    00000058: 	testq	%rdx, %rdx
    0000005b: 	jle	.Ltmp1590 # Offset: 91
.Ltmp1595:
    0000005d: 	movq	%r8, %rax
    00000060: 	movq	%rdx, %rcx
    00000063: 	subq	%r9, %rax
    00000066: 	sarq	%rcx
    00000069: 	sarq	$0x2, %rax
    0000006d: 	addq	%rcx, %rax
    00000070: 	js	.Ltmp1591 # Offset: 112
    00000072: 	cmpq	$0x7f, %rax
    00000076: 	jg	.Ltmp1592 # Offset: 118
    00000078: 	leaq	(%r8,%rcx,4), %rax
    0000007c: 	movq	%rdi, %r12
    0000007f: 	movq	%r11, %r13
    00000082: 	movq	%r9, %rbp
.Ltmp1598:
    00000085: 	cmpl	%r10d, (%rax)
    00000088: 	jge	.Ltmp1593 # Offset: 136
    0000008a: 	leaq	0x4(%rax), %r8
    0000008e: 	cmpq	%r13, %r8
    00000091: 	je	.Ltmp1594 # Offset: 145
.Ltmp1600:
    00000093: 	subq	%rcx, %rdx
    00000096: 	movq	%r12, %rdi
    00000099: 	movq	%r13, %r11
    0000009c: 	movq	%rbp, %r9
    0000009f: 	subq	$0x1, %rdx
    000000a3: 	testq	%rdx, %rdx
    000000a6: 	jg	.Ltmp1595 # Offset: 166
.Ltmp1590:
    000000a8: 	xorl	%eax, %eax
    000000aa: 	cmpq	%r8, %rbx
    000000ad: 	je	.Ltmp1596 # Offset: 173
    000000af: 	cmpl	%r10d, (%r8)
    000000b2: 	setle	%al
.Ltmp1596:
    000000b5: 	popq	%rbx
    000000b6: 	popq	%rbp
    000000b7: 	popq	%r12
    000000b9: 	popq	%r13
    000000bb: 	retq # Offset: 187
    000000bc: 	nopl	(%rax) # Size: 4
.Ltmp1593:
    000000c0: 	movq	%rcx, %rdx
    000000c3: 	jmp	.Ltmp1597 # Offset: 195
    000000c5: 	nopl	(%rax) # Size: 3
.Ltmp1592:
    000000c8: 	movq	%rax, %rsi
    000000cb: 	sarq	$0x7, %rsi
.Ltmp1599:
    000000cf: 	leaq	(%rdi,%rsi,8), %r12
    000000d3: 	shlq	$0x7, %rsi
    000000d7: 	movq	(%r12), %rbp
    000000db: 	subq	%rsi, %rax
    000000de: 	leaq	0x200(%rbp), %r13
    000000e5: 	leaq	(%rbp,%rax,4), %rax
    000000ea: 	jmp	.Ltmp1598 # Offset: 234
    000000ec: 	nopl	(%rax) # Size: 4
.Ltmp1591:
    000000f0: 	movq	%rax, %rsi
    000000f3: 	notq	%rsi
    000000f6: 	shrq	$0x7, %rsi
    000000fa: 	notq	%rsi
    000000fd: 	jmp	.Ltmp1599 # Offset: 253
    000000ff: 	nop # Size: 1
.Ltmp1594:
    00000100: 	movq	0x8(%r12), %r8
    00000105: 	addq	$0x8, %r12
    00000109: 	leaq	0x200(%r8), %r13
    00000110: 	movq	%r8, %rbp
    00000113: 	jmp	.Ltmp1600 # Offset: 275
DWARF CFI Instructions:
    <empty>
End of Function "_Z16std_binarysearchISt15_Deque_iteratorIiRiPiEiEbT_S4_T0_"

Binary Function "_Z16std_binarysearchISt15_Deque_iteratorItRtPtEtEbT_S4_T0_" after disassembly {
  Number      : 265
  State       : disassembled
  Address     : 0xa870
  Size        : 0x127
  MaxSize     : 0x130
  Offset      : 0xa870
  Section     : .text
  Orc Section : .local.text._Z16std_binarysearchISt15_Deque_iteratorItRtPtEtEbT_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0264:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	movl	%edx, %r10d
    00000009: 	movq	%rsi, %rax
    0000000c: 	pushq	%r13
    0000000e: 	pushq	%r12
    00000010: 	pushq	%rbp
    00000011: 	pushq	%rbx
    00000012: 	movq	0x18(%rsi), %rcx
    00000016: 	movl	%edx, %ebx
    00000018: 	movq	(%rdi), %r8
    0000001b: 	movq	0x10(%rdi), %r11
    0000001f: 	movq	0x8(%rdi), %r9
    00000023: 	movq	0x18(%rdi), %rdi
    00000027: 	movq	%rcx, %rdx
    0000002a: 	movq	(%rsi), %rbp
    0000002d: 	subq	%rdi, %rdx
    00000030: 	sarq	$0x3, %rdx
    00000034: 	cmpq	$0x1, %rcx
    00000038: 	movq	%rbp, %rsi
    0000003b: 	adcq	$-0x1, %rdx
    0000003f: 	subq	0x8(%rax), %rsi
    00000043: 	movq	%rsi, %rax
    00000046: 	shlq	$0x8, %rdx
    0000004a: 	sarq	%rax
    0000004d: 	addq	%rax, %rdx
    00000050: 	movq	%r11, %rax
    00000053: 	subq	%r8, %rax
    00000056: 	sarq	%rax
    00000059: 	addq	%rax, %rdx
    0000005c: 	nopl	(%rax) # Size: 4
.Ltmp1608:
    00000060: 	testq	%rdx, %rdx
    00000063: 	jle	.Ltmp1601 # Offset: 99
.Ltmp1606:
    00000065: 	movq	%r8, %rax
    00000068: 	movq	%rdx, %rcx
    0000006b: 	subq	%r9, %rax
    0000006e: 	sarq	%rcx
    00000071: 	sarq	%rax
    00000074: 	addq	%rcx, %rax
    00000077: 	js	.Ltmp1602 # Offset: 119
    0000007d: 	cmpq	$0xff, %rax
    00000083: 	jg	.Ltmp1603 # Offset: 131
    00000085: 	leaq	(%r8,%rcx,2), %rax
    00000089: 	movq	%rdi, %r13
    0000008c: 	movq	%r11, %r14
    0000008f: 	movq	%r9, %r12
.Ltmp1609:
    00000092: 	cmpw	%r10w, (%rax)
    00000096: 	jae	.Ltmp1604 # Offset: 150
    00000098: 	leaq	0x2(%rax), %r8
    0000009c: 	cmpq	%r14, %r8
    0000009f: 	je	.Ltmp1605 # Offset: 159
.Ltmp1611:
    000000a1: 	subq	%rcx, %rdx
    000000a4: 	movq	%r13, %rdi
    000000a7: 	movq	%r14, %r11
    000000aa: 	movq	%r12, %r9
    000000ad: 	subq	$0x1, %rdx
    000000b1: 	testq	%rdx, %rdx
    000000b4: 	jg	.Ltmp1606 # Offset: 180
.Ltmp1601:
    000000b6: 	xorl	%eax, %eax
    000000b8: 	cmpq	%r8, %rbp
    000000bb: 	je	.Ltmp1607 # Offset: 187
    000000bd: 	cmpw	%bx, (%r8)
    000000c1: 	setbe	%al
.Ltmp1607:
    000000c4: 	popq	%rbx
    000000c5: 	popq	%rbp
    000000c6: 	popq	%r12
    000000c8: 	popq	%r13
    000000ca: 	popq	%r14
    000000cc: 	retq # Offset: 204
    000000cd: 	nopl	(%rax) # Size: 3
.Ltmp1604:
    000000d0: 	movq	%rcx, %rdx
    000000d3: 	jmp	.Ltmp1608 # Offset: 211
    000000d5: 	nopl	(%rax) # Size: 3
.Ltmp1603:
    000000d8: 	movq	%rax, %rsi
    000000db: 	sarq	$0x8, %rsi
.Ltmp1610:
    000000df: 	leaq	(%rdi,%rsi,8), %r13
    000000e3: 	shlq	$0x8, %rsi
    000000e7: 	movq	(%r13), %r12
    000000eb: 	subq	%rsi, %rax
    000000ee: 	leaq	0x200(%r12), %r14
    000000f6: 	leaq	(%r12,%rax,2), %rax
    000000fa: 	jmp	.Ltmp1609 # Offset: 250
    000000fc: 	nopl	(%rax) # Size: 4
.Ltmp1602:
    00000100: 	movq	%rax, %rsi
    00000103: 	notq	%rsi
    00000106: 	shrq	$0x8, %rsi
    0000010a: 	notq	%rsi
    0000010d: 	jmp	.Ltmp1610 # Offset: 269
    0000010f: 	nop # Size: 1
.Ltmp1605:
    00000110: 	movq	0x8(%r13), %r8
    00000114: 	addq	$0x8, %r13
    00000118: 	leaq	0x200(%r8), %r14
    0000011f: 	movq	%r8, %r12
    00000122: 	jmp	.Ltmp1611 # Offset: 290
DWARF CFI Instructions:
    <empty>
End of Function "_Z16std_binarysearchISt15_Deque_iteratorItRtPtEtEbT_S4_T0_"

Binary Function "_Z16std_binarysearchISt15_Deque_iteratorIfRfPfEfEbT_S4_T0_" after disassembly {
  Number      : 266
  State       : disassembled
  Address     : 0xa9a0
  Size        : 0x144
  MaxSize     : 0x150
  Offset      : 0xa9a0
  Section     : .text
  Orc Section : .local.text._Z16std_binarysearchISt15_Deque_iteratorIfRfPfEfEbT_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0265:
    00000000: 	endbr64
    00000004: 	movq	0x18(%rsi), %rax
    00000008: 	movq	(%rdi), %r8
    0000000b: 	movq	0x10(%rdi), %r10
    0000000f: 	movq	0x8(%rdi), %r9
    00000013: 	movq	0x18(%rdi), %rdi
    00000017: 	movq	%rax, %rdx
    0000001a: 	movq	(%rsi), %r11
    0000001d: 	subq	%rdi, %rdx
    00000020: 	sarq	$0x3, %rdx
    00000024: 	cmpq	$0x1, %rax
    00000028: 	movq	%r11, %rax
    0000002b: 	adcq	$-0x1, %rdx
    0000002f: 	subq	0x8(%rsi), %rax
    00000033: 	sarq	$0x2, %rax
    00000037: 	shlq	$0x7, %rdx
    0000003b: 	addq	%rax, %rdx
    0000003e: 	movq	%r10, %rax
    00000041: 	subq	%r8, %rax
    00000044: 	sarq	$0x2, %rax
    00000048: 	addq	%rax, %rdx
    0000004b: 	testq	%rdx, %rdx
    0000004e: 	jle	.Ltmp1612 # Offset: 78
    00000054: 	pushq	%r12
    00000056: 	pushq	%rbp
    00000057: 	pushq	%rbx
    00000058: 	jmp	.Ltmp1613 # Offset: 88
    0000005a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1618:
    00000060: 	leaq	0x4(%rax), %r8
    00000064: 	cmpq	%r12, %r8
    00000067: 	je	.Ltmp1614 # Offset: 103
.Ltmp1622:
    0000006d: 	subq	%rcx, %rdx
    00000070: 	movq	%rbp, %rdi
    00000073: 	movq	%r12, %r10
    00000076: 	movq	%rbx, %r9
    00000079: 	subq	$0x1, %rdx
    0000007d: 	testq	%rdx, %rdx
    00000080: 	jle	.Ltmp1615 # Offset: 128
.Ltmp1613:
    00000082: 	movq	%r8, %rax
    00000085: 	movq	%rdx, %rcx
    00000088: 	subq	%r9, %rax
    0000008b: 	sarq	%rcx
    0000008e: 	sarq	$0x2, %rax
    00000092: 	addq	%rcx, %rax
    00000095: 	js	.Ltmp1616 # Offset: 149
    00000097: 	cmpq	$0x7f, %rax
    0000009b: 	jg	.Ltmp1617 # Offset: 155
    0000009d: 	leaq	(%r8,%rcx,4), %rax
    000000a1: 	movq	%rdi, %rbp
    000000a4: 	movq	%r10, %r12
    000000a7: 	movq	%r9, %rbx
.Ltmp1620:
    000000aa: 	comiss	(%rax), %xmm0
    000000ad: 	ja	.Ltmp1618 # Offset: 173
    000000af: 	movq	%rcx, %rdx
    000000b2: 	testq	%rdx, %rdx
    000000b5: 	jg	.Ltmp1613 # Offset: 181
.Ltmp1615:
    000000b7: 	xorl	%eax, %eax
    000000b9: 	cmpq	%r8, %r11
    000000bc: 	je	.Ltmp1619 # Offset: 188
    000000be: 	movss	(%r8), %xmm1
    000000c3: 	comiss	%xmm0, %xmm1
    000000c6: 	setbe	%al
.Ltmp1619:
    000000c9: 	popq	%rbx
    000000ca: 	popq	%rbp
    000000cb: 	popq	%r12
    000000cd: 	retq # Offset: 205
    000000ce: 	nop # Size: 2
.Ltmp1617:
    000000d0: 	movq	%rax, %rsi
    000000d3: 	sarq	$0x7, %rsi
.Ltmp1621:
    000000d7: 	leaq	(%rdi,%rsi,8), %rbp
    000000db: 	shlq	$0x7, %rsi
    000000df: 	movq	(%rbp), %rbx
    000000e3: 	subq	%rsi, %rax
    000000e6: 	leaq	0x200(%rbx), %r12
    000000ed: 	leaq	(%rbx,%rax,4), %rax
    000000f1: 	jmp	.Ltmp1620 # Offset: 241
    000000f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1616:
    000000f8: 	movq	%rax, %rsi
    000000fb: 	notq	%rsi
    000000fe: 	shrq	$0x7, %rsi
    00000102: 	notq	%rsi
    00000105: 	jmp	.Ltmp1621 # Offset: 261
    00000107: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1614:
    00000110: 	movq	0x8(%rbp), %r8
    00000114: 	addq	$0x8, %rbp
    00000118: 	leaq	0x200(%r8), %r12
    0000011f: 	movq	%r8, %rbx
    00000122: 	jmp	.Ltmp1622 # Offset: 290
    00000127: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1612:
    00000130: 	xorl	%eax, %eax
    00000132: 	cmpq	%r8, %r11
    00000135: 	je	.Ltmp1623 # Offset: 309
    00000137: 	movss	(%r8), %xmm1
    0000013c: 	comiss	%xmm0, %xmm1
    0000013f: 	setbe	%al
    00000142: 	retq # Offset: 322
.Ltmp1623:
    00000143: 	retq # Offset: 323
DWARF CFI Instructions:
    <empty>
End of Function "_Z16std_binarysearchISt15_Deque_iteratorIfRfPfEfEbT_S4_T0_"

Binary Function "_Z14std_upperboundISt15_Deque_iteratorIaRaPaEaET_S4_S4_T0_" after disassembly {
  Number      : 267
  State       : disassembled
  Address     : 0xaaf0
  Size        : 0x117
  MaxSize     : 0x120
  Offset      : 0xaaf0
  Section     : .text
  Orc Section : .local.text._Z14std_upperboundISt15_Deque_iteratorIaRaPaEaET_S4_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0266:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	movq	%rdx, %rax
    00000009: 	pushq	%r12
    0000000b: 	movq	%rdi, %r12
    0000000e: 	pushq	%rbp
    0000000f: 	movl	%ecx, %ebp
    00000011: 	pushq	%rbx
    00000012: 	movq	0x18(%rdx), %rcx
    00000016: 	movq	0x18(%rsi), %rbx
    0000001a: 	movq	0x10(%rsi), %r13
    0000001e: 	movq	%rcx, %rdx
    00000021: 	movq	(%rsi), %rdi
    00000024: 	movq	0x8(%rsi), %r10
    00000028: 	subq	%rbx, %rdx
    0000002b: 	sarq	$0x3, %rdx
    0000002f: 	cmpq	$0x1, %rcx
    00000033: 	movq	(%rax), %rcx
    00000036: 	adcq	$-0x1, %rdx
    0000003a: 	subq	0x8(%rax), %rcx
    0000003e: 	movq	%r13, %rax
    00000041: 	shlq	$0x9, %rdx
    00000045: 	subq	%rdi, %rax
    00000048: 	addq	%rcx, %rdx
    0000004b: 	addq	%rax, %rdx
    0000004e: 	nop # Size: 2
.Ltmp1630:
    00000050: 	testq	%rdx, %rdx
    00000053: 	jle	.Ltmp1624 # Offset: 83
.Ltmp1629:
    00000055: 	movq	%rdx, %rcx
    00000058: 	movq	%rdi, %rax
    0000005b: 	sarq	%rcx
    0000005e: 	subq	%r10, %rax
    00000061: 	addq	%rcx, %rax
    00000064: 	js	.Ltmp1625 # Offset: 100
    0000006a: 	cmpq	$0x1ff, %rax
    00000070: 	jg	.Ltmp1626 # Offset: 112
    00000072: 	leaq	(%rdi,%rcx), %rax
    00000076: 	movq	%rbx, %r9
    00000079: 	movq	%r13, %r11
    0000007c: 	movq	%r10, %r8
.Ltmp1631:
    0000007f: 	cmpb	%bpl, (%rax)
    00000082: 	jg	.Ltmp1627 # Offset: 130
    00000084: 	leaq	0x1(%rax), %rdi
    00000088: 	cmpq	%r11, %rdi
    0000008b: 	je	.Ltmp1628 # Offset: 139
.Ltmp1633:
    0000008d: 	subq	%rcx, %rdx
    00000090: 	movq	%r9, %rbx
    00000093: 	movq	%r11, %r13
    00000096: 	movq	%r8, %r10
    00000099: 	subq	$0x1, %rdx
    0000009d: 	testq	%rdx, %rdx
    000000a0: 	jg	.Ltmp1629 # Offset: 160
.Ltmp1624:
    000000a2: 	movq	%r13, 0x10(%r12)
    000000a7: 	movq	%r12, %rax
    000000aa: 	movq	%rbx, 0x18(%r12)
    000000af: 	popq	%rbx
    000000b0: 	movq	%rdi, (%r12)
    000000b4: 	popq	%rbp
    000000b5: 	movq	%r10, 0x8(%r12)
    000000ba: 	popq	%r12
    000000bc: 	popq	%r13
    000000be: 	retq # Offset: 190
    000000bf: 	nop # Size: 1
.Ltmp1627:
    000000c0: 	movq	%rcx, %rdx
    000000c3: 	jmp	.Ltmp1630 # Offset: 195
    000000c5: 	nopl	(%rax) # Size: 3
.Ltmp1626:
    000000c8: 	movq	%rax, %rsi
    000000cb: 	sarq	$0x9, %rsi
.Ltmp1632:
    000000cf: 	leaq	(%rbx,%rsi,8), %r9
    000000d3: 	shlq	$0x9, %rsi
    000000d7: 	movq	(%r9), %r8
    000000da: 	subq	%rsi, %rax
    000000dd: 	leaq	0x200(%r8), %r11
    000000e4: 	addq	%r8, %rax
    000000e7: 	jmp	.Ltmp1631 # Offset: 231
    000000e9: 	nopl	(%rax) # Size: 7
.Ltmp1625:
    000000f0: 	movq	%rax, %rsi
    000000f3: 	notq	%rsi
    000000f6: 	shrq	$0x9, %rsi
    000000fa: 	notq	%rsi
    000000fd: 	jmp	.Ltmp1632 # Offset: 253
    000000ff: 	nop # Size: 1
.Ltmp1628:
    00000100: 	movq	0x8(%r9), %rdi
    00000104: 	addq	$0x8, %r9
    00000108: 	leaq	0x200(%rdi), %r11
    0000010f: 	movq	%rdi, %r8
    00000112: 	jmp	.Ltmp1633 # Offset: 274
DWARF CFI Instructions:
    <empty>
End of Function "_Z14std_upperboundISt15_Deque_iteratorIaRaPaEaET_S4_S4_T0_"

Binary Function "_Z14std_upperboundISt15_Deque_iteratorIiRiPiEiET_S4_S4_T0_" after disassembly {
  Number      : 268
  State       : disassembled
  Address     : 0xac10
  Size        : 0x128
  MaxSize     : 0x130
  Offset      : 0xac10
  Section     : .text
  Orc Section : .local.text._Z14std_upperboundISt15_Deque_iteratorIiRiPiEiET_S4_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0267:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	movq	%rdi, %r9
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	movq	%rdx, %rbp
    0000000f: 	pushq	%rbx
    00000010: 	movq	0x18(%rdx), %rax
    00000014: 	movq	0x18(%rsi), %r10
    00000018: 	movq	0x10(%rsi), %rbx
    0000001c: 	movq	%rax, %rdx
    0000001f: 	movq	(%rsi), %rdi
    00000022: 	movq	0x8(%rsi), %r8
    00000026: 	subq	%r10, %rdx
    00000029: 	sarq	$0x3, %rdx
    0000002d: 	cmpq	$0x1, %rax
    00000031: 	movq	(%rbp), %rax
    00000035: 	adcq	$-0x1, %rdx
    00000039: 	subq	0x8(%rbp), %rax
    0000003d: 	sarq	$0x2, %rax
    00000041: 	shlq	$0x7, %rdx
    00000045: 	addq	%rax, %rdx
    00000048: 	movq	%rbx, %rax
    0000004b: 	subq	%rdi, %rax
    0000004e: 	sarq	$0x2, %rax
    00000052: 	addq	%rax, %rdx
    00000055: 	testq	%rdx, %rdx
    00000058: 	jle	.Ltmp1634 # Offset: 88
    0000005a: 	movl	%ecx, %r11d
    0000005d: 	jmp	.Ltmp1635 # Offset: 93
    0000005f: 	nop # Size: 1
.Ltmp1639:
    00000060: 	leaq	0x4(%rax), %rdi
    00000064: 	cmpq	%r13, %rdi
    00000067: 	je	.Ltmp1636 # Offset: 103
.Ltmp1642:
    0000006d: 	subq	%rcx, %rdx
    00000070: 	movq	%r12, %r10
    00000073: 	movq	%r13, %rbx
    00000076: 	movq	%rbp, %r8
    00000079: 	subq	$0x1, %rdx
    0000007d: 	testq	%rdx, %rdx
    00000080: 	jle	.Ltmp1634 # Offset: 128
.Ltmp1635:
    00000082: 	movq	%rdi, %rax
    00000085: 	movq	%rdx, %rcx
    00000088: 	subq	%r8, %rax
    0000008b: 	sarq	%rcx
    0000008e: 	sarq	$0x2, %rax
    00000092: 	addq	%rcx, %rax
    00000095: 	js	.Ltmp1637 # Offset: 149
    00000097: 	cmpq	$0x7f, %rax
    0000009b: 	jg	.Ltmp1638 # Offset: 155
    0000009d: 	leaq	(%rdi,%rcx,4), %rax
    000000a1: 	movq	%r10, %r12
    000000a4: 	movq	%rbx, %r13
    000000a7: 	movq	%r8, %rbp
.Ltmp1640:
    000000aa: 	cmpl	%r11d, (%rax)
    000000ad: 	jle	.Ltmp1639 # Offset: 173
    000000af: 	movq	%rcx, %rdx
    000000b2: 	testq	%rdx, %rdx
    000000b5: 	jg	.Ltmp1635 # Offset: 181
.Ltmp1634:
    000000b7: 	movq	%rbx, 0x10(%r9)
    000000bb: 	movq	%r9, %rax
    000000be: 	popq	%rbx
    000000bf: 	popq	%rbp
    000000c0: 	popq	%r12
    000000c2: 	movq	%rdi, (%r9)
    000000c5: 	movq	%r8, 0x8(%r9)
    000000c9: 	popq	%r13
    000000cb: 	movq	%r10, 0x18(%r9)
    000000cf: 	retq # Offset: 207
.Ltmp1638:
    000000d0: 	movq	%rax, %rsi
    000000d3: 	sarq	$0x7, %rsi
.Ltmp1641:
    000000d7: 	leaq	(%r10,%rsi,8), %r12
    000000db: 	shlq	$0x7, %rsi
    000000df: 	movq	(%r12), %rbp
    000000e3: 	subq	%rsi, %rax
    000000e6: 	leaq	0x200(%rbp), %r13
    000000ed: 	leaq	(%rbp,%rax,4), %rax
    000000f2: 	jmp	.Ltmp1640 # Offset: 242
    000000f4: 	nopl	(%rax) # Size: 4
.Ltmp1637:
    000000f8: 	movq	%rax, %rsi
    000000fb: 	notq	%rsi
    000000fe: 	shrq	$0x7, %rsi
    00000102: 	notq	%rsi
    00000105: 	jmp	.Ltmp1641 # Offset: 261
    00000107: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1636:
    00000110: 	movq	0x8(%r12), %rdi
    00000115: 	addq	$0x8, %r12
    00000119: 	leaq	0x200(%rdi), %r13
    00000120: 	movq	%rdi, %rbp
    00000123: 	jmp	.Ltmp1642 # Offset: 291
DWARF CFI Instructions:
    <empty>
End of Function "_Z14std_upperboundISt15_Deque_iteratorIiRiPiEiET_S4_S4_T0_"

Binary Function "_Z14std_upperboundISt15_Deque_iteratorItRtPtEtET_S4_S4_T0_" after disassembly {
  Number      : 269
  State       : disassembled
  Address     : 0xad40
  Size        : 0x128
  MaxSize     : 0x130
  Offset      : 0xad40
  Section     : .text
  Orc Section : .local.text._Z14std_upperboundISt15_Deque_iteratorItRtPtEtET_S4_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0268:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	movq	%rdi, %r9
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	movq	%rdx, %rbp
    0000000f: 	pushq	%rbx
    00000010: 	movq	0x18(%rdx), %rax
    00000014: 	movq	0x18(%rsi), %r10
    00000018: 	movq	0x10(%rsi), %rbx
    0000001c: 	movq	%rax, %rdx
    0000001f: 	movq	(%rsi), %rdi
    00000022: 	movq	0x8(%rsi), %r8
    00000026: 	subq	%r10, %rdx
    00000029: 	sarq	$0x3, %rdx
    0000002d: 	cmpq	$0x1, %rax
    00000031: 	movq	(%rbp), %rax
    00000035: 	adcq	$-0x1, %rdx
    00000039: 	subq	0x8(%rbp), %rax
    0000003d: 	sarq	%rax
    00000040: 	shlq	$0x8, %rdx
    00000044: 	addq	%rax, %rdx
    00000047: 	movq	%rbx, %rax
    0000004a: 	subq	%rdi, %rax
    0000004d: 	sarq	%rax
    00000050: 	addq	%rax, %rdx
    00000053: 	testq	%rdx, %rdx
    00000056: 	jle	.Ltmp1643 # Offset: 86
    00000058: 	movl	%ecx, %r11d
    0000005b: 	jmp	.Ltmp1644 # Offset: 91
    0000005d: 	nopl	(%rax) # Size: 3
.Ltmp1648:
    00000060: 	leaq	0x2(%rax), %rdi
    00000064: 	cmpq	%r13, %rdi
    00000067: 	je	.Ltmp1645 # Offset: 103
.Ltmp1651:
    0000006d: 	subq	%rcx, %rdx
    00000070: 	movq	%r12, %r10
    00000073: 	movq	%r13, %rbx
    00000076: 	movq	%rbp, %r8
    00000079: 	subq	$0x1, %rdx
    0000007d: 	testq	%rdx, %rdx
    00000080: 	jle	.Ltmp1643 # Offset: 128
.Ltmp1644:
    00000082: 	movq	%rdi, %rax
    00000085: 	movq	%rdx, %rcx
    00000088: 	subq	%r8, %rax
    0000008b: 	sarq	%rcx
    0000008e: 	sarq	%rax
    00000091: 	addq	%rcx, %rax
    00000094: 	js	.Ltmp1646 # Offset: 148
    00000096: 	cmpq	$0xff, %rax
    0000009c: 	jg	.Ltmp1647 # Offset: 156
    0000009e: 	leaq	(%rdi,%rcx,2), %rax
    000000a2: 	movq	%r10, %r12
    000000a5: 	movq	%rbx, %r13
    000000a8: 	movq	%r8, %rbp
.Ltmp1649:
    000000ab: 	cmpw	%r11w, (%rax)
    000000af: 	jbe	.Ltmp1648 # Offset: 175
    000000b1: 	movq	%rcx, %rdx
    000000b4: 	testq	%rdx, %rdx
    000000b7: 	jg	.Ltmp1644 # Offset: 183
.Ltmp1643:
    000000b9: 	movq	%rbx, 0x10(%r9)
    000000bd: 	movq	%r9, %rax
    000000c0: 	popq	%rbx
    000000c1: 	popq	%rbp
    000000c2: 	popq	%r12
    000000c4: 	movq	%rdi, (%r9)
    000000c7: 	movq	%r8, 0x8(%r9)
    000000cb: 	popq	%r13
    000000cd: 	movq	%r10, 0x18(%r9)
    000000d1: 	retq # Offset: 209
    000000d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1647:
    000000d8: 	movq	%rax, %rsi
    000000db: 	sarq	$0x8, %rsi
.Ltmp1650:
    000000df: 	leaq	(%r10,%rsi,8), %r12
    000000e3: 	shlq	$0x8, %rsi
    000000e7: 	movq	(%r12), %rbp
    000000eb: 	subq	%rsi, %rax
    000000ee: 	leaq	0x200(%rbp), %r13
    000000f5: 	leaq	(%rbp,%rax,2), %rax
    000000fa: 	jmp	.Ltmp1649 # Offset: 250
    000000fc: 	nopl	(%rax) # Size: 4
.Ltmp1646:
    00000100: 	movq	%rax, %rsi
    00000103: 	notq	%rsi
    00000106: 	shrq	$0x8, %rsi
    0000010a: 	notq	%rsi
    0000010d: 	jmp	.Ltmp1650 # Offset: 269
    0000010f: 	nop # Size: 1
.Ltmp1645:
    00000110: 	movq	0x8(%r12), %rdi
    00000115: 	addq	$0x8, %r12
    00000119: 	leaq	0x200(%rdi), %r13
    00000120: 	movq	%rdi, %rbp
    00000123: 	jmp	.Ltmp1651 # Offset: 291
DWARF CFI Instructions:
    <empty>
End of Function "_Z14std_upperboundISt15_Deque_iteratorItRtPtEtET_S4_S4_T0_"

Binary Function "_Z14std_upperboundISt15_Deque_iteratorIfRfPfEfET_S4_S4_T0_" after disassembly {
  Number      : 270
  State       : disassembled
  Address     : 0xae70
  Size        : 0x127
  MaxSize     : 0x130
  Offset      : 0xae70
  Section     : .text
  Orc Section : .local.text._Z14std_upperboundISt15_Deque_iteratorIfRfPfEfET_S4_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0269:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movq	%rdx, %rcx
    00000009: 	movq	%rdi, %r9
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movq	0x18(%rdx), %rax
    00000012: 	movq	0x18(%rsi), %r10
    00000016: 	movq	0x10(%rsi), %r11
    0000001a: 	movq	%rax, %rdx
    0000001d: 	movq	(%rsi), %rdi
    00000020: 	movq	0x8(%rsi), %r8
    00000024: 	subq	%r10, %rdx
    00000027: 	sarq	$0x3, %rdx
    0000002b: 	cmpq	$0x1, %rax
    0000002f: 	movq	(%rcx), %rax
    00000032: 	adcq	$-0x1, %rdx
    00000036: 	subq	0x8(%rcx), %rax
    0000003a: 	sarq	$0x2, %rax
    0000003e: 	shlq	$0x7, %rdx
    00000042: 	addq	%rax, %rdx
    00000045: 	movq	%r11, %rax
    00000048: 	subq	%rdi, %rax
    0000004b: 	sarq	$0x2, %rax
    0000004f: 	addq	%rax, %rdx
    00000052: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1658:
    00000058: 	testq	%rdx, %rdx
    0000005b: 	jle	.Ltmp1652 # Offset: 91
.Ltmp1657:
    0000005d: 	movq	%rdi, %rax
    00000060: 	movq	%rdx, %rcx
    00000063: 	subq	%r8, %rax
    00000066: 	sarq	%rcx
    00000069: 	sarq	$0x2, %rax
    0000006d: 	addq	%rcx, %rax
    00000070: 	js	.Ltmp1653 # Offset: 112
    00000076: 	cmpq	$0x7f, %rax
    0000007a: 	jg	.Ltmp1654 # Offset: 122
    0000007c: 	leaq	(%rdi,%rcx,4), %rax
    00000080: 	movq	%r10, %rbp
    00000083: 	movq	%r11, %r12
    00000086: 	movq	%r8, %rbx
.Ltmp1659:
    00000089: 	movss	(%rax), %xmm1
    0000008d: 	comiss	%xmm0, %xmm1
    00000090: 	ja	.Ltmp1655 # Offset: 144
    00000092: 	leaq	0x4(%rax), %rdi
    00000096: 	cmpq	%r12, %rdi
    00000099: 	je	.Ltmp1656 # Offset: 153
.Ltmp1661:
    0000009b: 	subq	%rcx, %rdx
    0000009e: 	movq	%rbp, %r10
    000000a1: 	movq	%r12, %r11
    000000a4: 	movq	%rbx, %r8
    000000a7: 	subq	$0x1, %rdx
    000000ab: 	testq	%rdx, %rdx
    000000ae: 	jg	.Ltmp1657 # Offset: 174
.Ltmp1652:
    000000b0: 	popq	%rbx
    000000b1: 	movq	%r9, %rax
    000000b4: 	popq	%rbp
    000000b5: 	movq	%rdi, (%r9)
    000000b8: 	movq	%r8, 0x8(%r9)
    000000bc: 	popq	%r12
    000000be: 	movq	%r11, 0x10(%r9)
    000000c2: 	movq	%r10, 0x18(%r9)
    000000c6: 	retq # Offset: 198
    000000c7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1655:
    000000d0: 	movq	%rcx, %rdx
    000000d3: 	jmp	.Ltmp1658 # Offset: 211
    000000d5: 	nopl	(%rax) # Size: 3
.Ltmp1654:
    000000d8: 	movq	%rax, %rsi
    000000db: 	sarq	$0x7, %rsi
.Ltmp1660:
    000000df: 	leaq	(%r10,%rsi,8), %rbp
    000000e3: 	shlq	$0x7, %rsi
    000000e7: 	movq	(%rbp), %rbx
    000000eb: 	subq	%rsi, %rax
    000000ee: 	leaq	0x200(%rbx), %r12
    000000f5: 	leaq	(%rbx,%rax,4), %rax
    000000f9: 	jmp	.Ltmp1659 # Offset: 249
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1653:
    00000100: 	movq	%rax, %rsi
    00000103: 	notq	%rsi
    00000106: 	shrq	$0x7, %rsi
    0000010a: 	notq	%rsi
    0000010d: 	jmp	.Ltmp1660 # Offset: 269
    0000010f: 	nop # Size: 1
.Ltmp1656:
    00000110: 	movq	0x8(%rbp), %rdi
    00000114: 	addq	$0x8, %rbp
    00000118: 	leaq	0x200(%rdi), %r12
    0000011f: 	movq	%rdi, %rbx
    00000122: 	jmp	.Ltmp1661 # Offset: 290
DWARF CFI Instructions:
    <empty>
End of Function "_Z14std_upperboundISt15_Deque_iteratorIfRfPfEfET_S4_S4_T0_"

Binary Function "_Z14std_lowerboundISt15_Deque_iteratorIaRaPaEaET_S4_S4_T0_" after disassembly {
  Number      : 271
  State       : disassembled
  Address     : 0xafa0
  Size        : 0x117
  MaxSize     : 0x120
  Offset      : 0xafa0
  Section     : .text
  Orc Section : .local.text._Z14std_lowerboundISt15_Deque_iteratorIaRaPaEaET_S4_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0270:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	movq	%rdx, %rax
    00000009: 	pushq	%r12
    0000000b: 	movq	%rdi, %r12
    0000000e: 	pushq	%rbp
    0000000f: 	movl	%ecx, %ebp
    00000011: 	pushq	%rbx
    00000012: 	movq	0x18(%rdx), %rcx
    00000016: 	movq	0x18(%rsi), %rbx
    0000001a: 	movq	0x10(%rsi), %r13
    0000001e: 	movq	%rcx, %rdx
    00000021: 	movq	(%rsi), %rdi
    00000024: 	movq	0x8(%rsi), %r10
    00000028: 	subq	%rbx, %rdx
    0000002b: 	sarq	$0x3, %rdx
    0000002f: 	cmpq	$0x1, %rcx
    00000033: 	movq	(%rax), %rcx
    00000036: 	adcq	$-0x1, %rdx
    0000003a: 	subq	0x8(%rax), %rcx
    0000003e: 	movq	%r13, %rax
    00000041: 	shlq	$0x9, %rdx
    00000045: 	subq	%rdi, %rax
    00000048: 	addq	%rcx, %rdx
    0000004b: 	addq	%rax, %rdx
    0000004e: 	nop # Size: 2
.Ltmp1668:
    00000050: 	testq	%rdx, %rdx
    00000053: 	jle	.Ltmp1662 # Offset: 83
.Ltmp1667:
    00000055: 	movq	%rdx, %rcx
    00000058: 	movq	%rdi, %rax
    0000005b: 	sarq	%rcx
    0000005e: 	subq	%r10, %rax
    00000061: 	addq	%rcx, %rax
    00000064: 	js	.Ltmp1663 # Offset: 100
    0000006a: 	cmpq	$0x1ff, %rax
    00000070: 	jg	.Ltmp1664 # Offset: 112
    00000072: 	leaq	(%rdi,%rcx), %rax
    00000076: 	movq	%rbx, %r9
    00000079: 	movq	%r13, %r11
    0000007c: 	movq	%r10, %r8
.Ltmp1669:
    0000007f: 	cmpb	%bpl, (%rax)
    00000082: 	jge	.Ltmp1665 # Offset: 130
    00000084: 	leaq	0x1(%rax), %rdi
    00000088: 	cmpq	%r11, %rdi
    0000008b: 	je	.Ltmp1666 # Offset: 139
.Ltmp1671:
    0000008d: 	subq	%rcx, %rdx
    00000090: 	movq	%r9, %rbx
    00000093: 	movq	%r11, %r13
    00000096: 	movq	%r8, %r10
    00000099: 	subq	$0x1, %rdx
    0000009d: 	testq	%rdx, %rdx
    000000a0: 	jg	.Ltmp1667 # Offset: 160
.Ltmp1662:
    000000a2: 	movq	%r13, 0x10(%r12)
    000000a7: 	movq	%r12, %rax
    000000aa: 	movq	%rbx, 0x18(%r12)
    000000af: 	popq	%rbx
    000000b0: 	movq	%rdi, (%r12)
    000000b4: 	popq	%rbp
    000000b5: 	movq	%r10, 0x8(%r12)
    000000ba: 	popq	%r12
    000000bc: 	popq	%r13
    000000be: 	retq # Offset: 190
    000000bf: 	nop # Size: 1
.Ltmp1665:
    000000c0: 	movq	%rcx, %rdx
    000000c3: 	jmp	.Ltmp1668 # Offset: 195
    000000c5: 	nopl	(%rax) # Size: 3
.Ltmp1664:
    000000c8: 	movq	%rax, %rsi
    000000cb: 	sarq	$0x9, %rsi
.Ltmp1670:
    000000cf: 	leaq	(%rbx,%rsi,8), %r9
    000000d3: 	shlq	$0x9, %rsi
    000000d7: 	movq	(%r9), %r8
    000000da: 	subq	%rsi, %rax
    000000dd: 	leaq	0x200(%r8), %r11
    000000e4: 	addq	%r8, %rax
    000000e7: 	jmp	.Ltmp1669 # Offset: 231
    000000e9: 	nopl	(%rax) # Size: 7
.Ltmp1663:
    000000f0: 	movq	%rax, %rsi
    000000f3: 	notq	%rsi
    000000f6: 	shrq	$0x9, %rsi
    000000fa: 	notq	%rsi
    000000fd: 	jmp	.Ltmp1670 # Offset: 253
    000000ff: 	nop # Size: 1
.Ltmp1666:
    00000100: 	movq	0x8(%r9), %rdi
    00000104: 	addq	$0x8, %r9
    00000108: 	leaq	0x200(%rdi), %r11
    0000010f: 	movq	%rdi, %r8
    00000112: 	jmp	.Ltmp1671 # Offset: 274
DWARF CFI Instructions:
    <empty>
End of Function "_Z14std_lowerboundISt15_Deque_iteratorIaRaPaEaET_S4_S4_T0_"

Binary Function "_Z14std_lowerboundISt15_Deque_iteratorIiRiPiEiET_S4_S4_T0_" after disassembly {
  Number      : 272
  State       : disassembled
  Address     : 0xb0c0
  Size        : 0x128
  MaxSize     : 0x130
  Offset      : 0xb0c0
  Section     : .text
  Orc Section : .local.text._Z14std_lowerboundISt15_Deque_iteratorIiRiPiEiET_S4_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0271:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	movq	%rdi, %r9
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	movq	%rdx, %rbp
    0000000f: 	pushq	%rbx
    00000010: 	movq	0x18(%rdx), %rax
    00000014: 	movq	0x18(%rsi), %r10
    00000018: 	movq	0x10(%rsi), %rbx
    0000001c: 	movq	%rax, %rdx
    0000001f: 	movq	(%rsi), %rdi
    00000022: 	movq	0x8(%rsi), %r8
    00000026: 	subq	%r10, %rdx
    00000029: 	sarq	$0x3, %rdx
    0000002d: 	cmpq	$0x1, %rax
    00000031: 	movq	(%rbp), %rax
    00000035: 	adcq	$-0x1, %rdx
    00000039: 	subq	0x8(%rbp), %rax
    0000003d: 	sarq	$0x2, %rax
    00000041: 	shlq	$0x7, %rdx
    00000045: 	addq	%rax, %rdx
    00000048: 	movq	%rbx, %rax
    0000004b: 	subq	%rdi, %rax
    0000004e: 	sarq	$0x2, %rax
    00000052: 	addq	%rax, %rdx
    00000055: 	testq	%rdx, %rdx
    00000058: 	jle	.Ltmp1672 # Offset: 88
    0000005a: 	movl	%ecx, %r11d
    0000005d: 	jmp	.Ltmp1673 # Offset: 93
    0000005f: 	nop # Size: 1
.Ltmp1677:
    00000060: 	leaq	0x4(%rax), %rdi
    00000064: 	cmpq	%r13, %rdi
    00000067: 	je	.Ltmp1674 # Offset: 103
.Ltmp1680:
    0000006d: 	subq	%rcx, %rdx
    00000070: 	movq	%r12, %r10
    00000073: 	movq	%r13, %rbx
    00000076: 	movq	%rbp, %r8
    00000079: 	subq	$0x1, %rdx
    0000007d: 	testq	%rdx, %rdx
    00000080: 	jle	.Ltmp1672 # Offset: 128
.Ltmp1673:
    00000082: 	movq	%rdi, %rax
    00000085: 	movq	%rdx, %rcx
    00000088: 	subq	%r8, %rax
    0000008b: 	sarq	%rcx
    0000008e: 	sarq	$0x2, %rax
    00000092: 	addq	%rcx, %rax
    00000095: 	js	.Ltmp1675 # Offset: 149
    00000097: 	cmpq	$0x7f, %rax
    0000009b: 	jg	.Ltmp1676 # Offset: 155
    0000009d: 	leaq	(%rdi,%rcx,4), %rax
    000000a1: 	movq	%r10, %r12
    000000a4: 	movq	%rbx, %r13
    000000a7: 	movq	%r8, %rbp
.Ltmp1678:
    000000aa: 	cmpl	%r11d, (%rax)
    000000ad: 	jl	.Ltmp1677 # Offset: 173
    000000af: 	movq	%rcx, %rdx
    000000b2: 	testq	%rdx, %rdx
    000000b5: 	jg	.Ltmp1673 # Offset: 181
.Ltmp1672:
    000000b7: 	movq	%rbx, 0x10(%r9)
    000000bb: 	movq	%r9, %rax
    000000be: 	popq	%rbx
    000000bf: 	popq	%rbp
    000000c0: 	popq	%r12
    000000c2: 	movq	%rdi, (%r9)
    000000c5: 	movq	%r8, 0x8(%r9)
    000000c9: 	popq	%r13
    000000cb: 	movq	%r10, 0x18(%r9)
    000000cf: 	retq # Offset: 207
.Ltmp1676:
    000000d0: 	movq	%rax, %rsi
    000000d3: 	sarq	$0x7, %rsi
.Ltmp1679:
    000000d7: 	leaq	(%r10,%rsi,8), %r12
    000000db: 	shlq	$0x7, %rsi
    000000df: 	movq	(%r12), %rbp
    000000e3: 	subq	%rsi, %rax
    000000e6: 	leaq	0x200(%rbp), %r13
    000000ed: 	leaq	(%rbp,%rax,4), %rax
    000000f2: 	jmp	.Ltmp1678 # Offset: 242
    000000f4: 	nopl	(%rax) # Size: 4
.Ltmp1675:
    000000f8: 	movq	%rax, %rsi
    000000fb: 	notq	%rsi
    000000fe: 	shrq	$0x7, %rsi
    00000102: 	notq	%rsi
    00000105: 	jmp	.Ltmp1679 # Offset: 261
    00000107: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1674:
    00000110: 	movq	0x8(%r12), %rdi
    00000115: 	addq	$0x8, %r12
    00000119: 	leaq	0x200(%rdi), %r13
    00000120: 	movq	%rdi, %rbp
    00000123: 	jmp	.Ltmp1680 # Offset: 291
DWARF CFI Instructions:
    <empty>
End of Function "_Z14std_lowerboundISt15_Deque_iteratorIiRiPiEiET_S4_S4_T0_"

Binary Function "_Z14std_lowerboundISt15_Deque_iteratorItRtPtEtET_S4_S4_T0_" after disassembly {
  Number      : 273
  State       : disassembled
  Address     : 0xb1f0
  Size        : 0x128
  MaxSize     : 0x130
  Offset      : 0xb1f0
  Section     : .text
  Orc Section : .local.text._Z14std_lowerboundISt15_Deque_iteratorItRtPtEtET_S4_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0272:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	movq	%rdi, %r9
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	movq	%rdx, %rbp
    0000000f: 	pushq	%rbx
    00000010: 	movq	0x18(%rdx), %rax
    00000014: 	movq	0x18(%rsi), %r10
    00000018: 	movq	0x10(%rsi), %rbx
    0000001c: 	movq	%rax, %rdx
    0000001f: 	movq	(%rsi), %rdi
    00000022: 	movq	0x8(%rsi), %r8
    00000026: 	subq	%r10, %rdx
    00000029: 	sarq	$0x3, %rdx
    0000002d: 	cmpq	$0x1, %rax
    00000031: 	movq	(%rbp), %rax
    00000035: 	adcq	$-0x1, %rdx
    00000039: 	subq	0x8(%rbp), %rax
    0000003d: 	sarq	%rax
    00000040: 	shlq	$0x8, %rdx
    00000044: 	addq	%rax, %rdx
    00000047: 	movq	%rbx, %rax
    0000004a: 	subq	%rdi, %rax
    0000004d: 	sarq	%rax
    00000050: 	addq	%rax, %rdx
    00000053: 	testq	%rdx, %rdx
    00000056: 	jle	.Ltmp1681 # Offset: 86
    00000058: 	movl	%ecx, %r11d
    0000005b: 	jmp	.Ltmp1682 # Offset: 91
    0000005d: 	nopl	(%rax) # Size: 3
.Ltmp1686:
    00000060: 	leaq	0x2(%rax), %rdi
    00000064: 	cmpq	%r13, %rdi
    00000067: 	je	.Ltmp1683 # Offset: 103
.Ltmp1689:
    0000006d: 	subq	%rcx, %rdx
    00000070: 	movq	%r12, %r10
    00000073: 	movq	%r13, %rbx
    00000076: 	movq	%rbp, %r8
    00000079: 	subq	$0x1, %rdx
    0000007d: 	testq	%rdx, %rdx
    00000080: 	jle	.Ltmp1681 # Offset: 128
.Ltmp1682:
    00000082: 	movq	%rdi, %rax
    00000085: 	movq	%rdx, %rcx
    00000088: 	subq	%r8, %rax
    0000008b: 	sarq	%rcx
    0000008e: 	sarq	%rax
    00000091: 	addq	%rcx, %rax
    00000094: 	js	.Ltmp1684 # Offset: 148
    00000096: 	cmpq	$0xff, %rax
    0000009c: 	jg	.Ltmp1685 # Offset: 156
    0000009e: 	leaq	(%rdi,%rcx,2), %rax
    000000a2: 	movq	%r10, %r12
    000000a5: 	movq	%rbx, %r13
    000000a8: 	movq	%r8, %rbp
.Ltmp1687:
    000000ab: 	cmpw	%r11w, (%rax)
    000000af: 	jb	.Ltmp1686 # Offset: 175
    000000b1: 	movq	%rcx, %rdx
    000000b4: 	testq	%rdx, %rdx
    000000b7: 	jg	.Ltmp1682 # Offset: 183
.Ltmp1681:
    000000b9: 	movq	%rbx, 0x10(%r9)
    000000bd: 	movq	%r9, %rax
    000000c0: 	popq	%rbx
    000000c1: 	popq	%rbp
    000000c2: 	popq	%r12
    000000c4: 	movq	%rdi, (%r9)
    000000c7: 	movq	%r8, 0x8(%r9)
    000000cb: 	popq	%r13
    000000cd: 	movq	%r10, 0x18(%r9)
    000000d1: 	retq # Offset: 209
    000000d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1685:
    000000d8: 	movq	%rax, %rsi
    000000db: 	sarq	$0x8, %rsi
.Ltmp1688:
    000000df: 	leaq	(%r10,%rsi,8), %r12
    000000e3: 	shlq	$0x8, %rsi
    000000e7: 	movq	(%r12), %rbp
    000000eb: 	subq	%rsi, %rax
    000000ee: 	leaq	0x200(%rbp), %r13
    000000f5: 	leaq	(%rbp,%rax,2), %rax
    000000fa: 	jmp	.Ltmp1687 # Offset: 250
    000000fc: 	nopl	(%rax) # Size: 4
.Ltmp1684:
    00000100: 	movq	%rax, %rsi
    00000103: 	notq	%rsi
    00000106: 	shrq	$0x8, %rsi
    0000010a: 	notq	%rsi
    0000010d: 	jmp	.Ltmp1688 # Offset: 269
    0000010f: 	nop # Size: 1
.Ltmp1683:
    00000110: 	movq	0x8(%r12), %rdi
    00000115: 	addq	$0x8, %r12
    00000119: 	leaq	0x200(%rdi), %r13
    00000120: 	movq	%rdi, %rbp
    00000123: 	jmp	.Ltmp1689 # Offset: 291
DWARF CFI Instructions:
    <empty>
End of Function "_Z14std_lowerboundISt15_Deque_iteratorItRtPtEtET_S4_S4_T0_"

Binary Function "_Z14std_lowerboundISt15_Deque_iteratorIfRfPfEfET_S4_S4_T0_" after disassembly {
  Number      : 274
  State       : disassembled
  Address     : 0xb320
  Size        : 0x117
  MaxSize     : 0x120
  Offset      : 0xb320
  Section     : .text
  Orc Section : .local.text._Z14std_lowerboundISt15_Deque_iteratorIfRfPfEfET_S4_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0273:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movq	%rdi, %r9
    00000009: 	pushq	%rbp
    0000000a: 	pushq	%rbx
    0000000b: 	movq	0x18(%rdx), %rax
    0000000f: 	movq	0x18(%rsi), %r10
    00000013: 	movq	0x10(%rsi), %r11
    00000017: 	movq	%rax, %rcx
    0000001a: 	movq	(%rsi), %rdi
    0000001d: 	movq	0x8(%rsi), %r8
    00000021: 	subq	%r10, %rcx
    00000024: 	sarq	$0x3, %rcx
    00000028: 	cmpq	$0x1, %rax
    0000002c: 	movq	(%rdx), %rax
    0000002f: 	adcq	$-0x1, %rcx
    00000033: 	subq	0x8(%rdx), %rax
    00000037: 	sarq	$0x2, %rax
    0000003b: 	shlq	$0x7, %rcx
    0000003f: 	addq	%rax, %rcx
    00000042: 	movq	%r11, %rax
    00000045: 	subq	%rdi, %rax
    00000048: 	sarq	$0x2, %rax
    0000004c: 	addq	%rax, %rcx
    0000004f: 	nop # Size: 1
.Ltmp1696:
    00000050: 	testq	%rcx, %rcx
    00000053: 	jle	.Ltmp1690 # Offset: 83
.Ltmp1695:
    00000055: 	movq	%rdi, %rax
    00000058: 	movq	%rcx, %rsi
    0000005b: 	subq	%r8, %rax
    0000005e: 	sarq	%rsi
    00000061: 	sarq	$0x2, %rax
    00000065: 	addq	%rsi, %rax
    00000068: 	js	.Ltmp1691 # Offset: 104
    0000006e: 	cmpq	$0x7f, %rax
    00000072: 	jg	.Ltmp1692 # Offset: 114
    00000074: 	leaq	(%rdi,%rsi,4), %rax
    00000078: 	movq	%r10, %rbp
    0000007b: 	movq	%r11, %r12
    0000007e: 	movq	%r8, %rbx
.Ltmp1697:
    00000081: 	comiss	(%rax), %xmm0
    00000084: 	jbe	.Ltmp1693 # Offset: 132
    00000086: 	leaq	0x4(%rax), %rdi
    0000008a: 	cmpq	%r12, %rdi
    0000008d: 	je	.Ltmp1694 # Offset: 141
.Ltmp1699:
    0000008f: 	subq	%rsi, %rcx
    00000092: 	movq	%rbp, %r10
    00000095: 	movq	%r12, %r11
    00000098: 	movq	%rbx, %r8
    0000009b: 	subq	$0x1, %rcx
    0000009f: 	testq	%rcx, %rcx
    000000a2: 	jg	.Ltmp1695 # Offset: 162
.Ltmp1690:
    000000a4: 	popq	%rbx
    000000a5: 	movq	%r9, %rax
    000000a8: 	popq	%rbp
    000000a9: 	movq	%rdi, (%r9)
    000000ac: 	movq	%r8, 0x8(%r9)
    000000b0: 	popq	%r12
    000000b2: 	movq	%r11, 0x10(%r9)
    000000b6: 	movq	%r10, 0x18(%r9)
    000000ba: 	retq # Offset: 186
    000000bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1693:
    000000c0: 	movq	%rsi, %rcx
    000000c3: 	jmp	.Ltmp1696 # Offset: 195
    000000c5: 	nopl	(%rax) # Size: 3
.Ltmp1692:
    000000c8: 	movq	%rax, %rdx
    000000cb: 	sarq	$0x7, %rdx
.Ltmp1698:
    000000cf: 	leaq	(%r10,%rdx,8), %rbp
    000000d3: 	shlq	$0x7, %rdx
    000000d7: 	movq	(%rbp), %rbx
    000000db: 	subq	%rdx, %rax
    000000de: 	leaq	0x200(%rbx), %r12
    000000e5: 	leaq	(%rbx,%rax,4), %rax
    000000e9: 	jmp	.Ltmp1697 # Offset: 233
    000000eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1691:
    000000f0: 	movq	%rax, %rdx
    000000f3: 	notq	%rdx
    000000f6: 	shrq	$0x7, %rdx
    000000fa: 	notq	%rdx
    000000fd: 	jmp	.Ltmp1698 # Offset: 253
    000000ff: 	nop # Size: 1
.Ltmp1694:
    00000100: 	movq	0x8(%rbp), %rdi
    00000104: 	addq	$0x8, %rbp
    00000108: 	leaq	0x200(%rdi), %r12
    0000010f: 	movq	%rdi, %rbx
    00000112: 	jmp	.Ltmp1699 # Offset: 274
DWARF CFI Instructions:
    <empty>
End of Function "_Z14std_lowerboundISt15_Deque_iteratorIfRfPfEfET_S4_S4_T0_"

Binary Function "_Z18binarysearch_recurIPiiEbT_S1_T0_" after disassembly {
  Number      : 275
  State       : disassembled
  Address     : 0xb440
  Size        : 0x62
  MaxSize     : 0x70
  Offset      : 0xb440
  Section     : .text
  Orc Section : .local.text._Z18binarysearch_recurIPiiEbT_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0274:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	movl	%edx, %esi
    00000009: 	cmpq	%rax, %rdi
    0000000c: 	je	.Ltmp1700 # Offset: 12
    0000000e: 	subq	%rdi, %rax
    00000011: 	movq	%rax, %rcx
    00000014: 	shrq	$0x3f, %rax
    00000018: 	sarq	$0x2, %rcx
    0000001c: 	leaq	(%rax,%rcx), %rdx
    00000020: 	sarq	%rdx
    00000023: 	leaq	(%rdi,%rdx,4), %r8
    00000027: 	cmpl	(%r8), %esi
    0000002a: 	jg	.Ltmp1701 # Offset: 42
    0000002c: 	movl	$0x1, %eax
    00000031: 	jl	.Ltmp1702 # Offset: 49
    00000033: 	retq # Offset: 51
    00000034: 	nopl	(%rax) # Size: 4
.Ltmp1700:
    00000038: 	xorl	%eax, %eax
    0000003a: 	retq # Offset: 58
    0000003b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1701:
    00000040: 	leaq	0x1(%rdx), %rax
    00000044: 	subq	%rax, %rcx
    00000047: 	movq	%rcx, %rdx
    0000004a: 	je	.Ltmp1700 # Offset: 74
    0000004c: 	leaq	0x4(%r8), %rdi
    00000050: 	jmp	"_Z24binarysearch_recur_innerIPiilEbT_T0_T1_.part.0/1" # TAILCALL  # Offset: 80
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp1702:
    00000058: 	testq	%rdx, %rdx
    0000005b: 	je	.Ltmp1700 # Offset: 91
    0000005d: 	jmp	"_Z24binarysearch_recur_innerIPiilEbT_T0_T1_.part.0/1" # TAILCALL  # Offset: 93
DWARF CFI Instructions:
    <empty>
End of Function "_Z18binarysearch_recurIPiiEbT_S1_T0_"

Binary Function "_Z18binarysearch_recurIPttEbT_S1_T0_" after disassembly {
  Number      : 276
  State       : disassembled
  Address     : 0xb4b0
  Size        : 0x70
  MaxSize     : 0x70
  Offset      : 0xb4b0
  Section     : .text
  Orc Section : .local.text._Z18binarysearch_recurIPttEbT_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0275:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp1703 # Offset: 7
    00000009: 	subq	%rdi, %rsi
    0000000c: 	movzwl	%dx, %r9d
    00000010: 	movq	%rsi, %rax
    00000013: 	shrq	$0x3f, %rsi
    00000017: 	sarq	%rax
    0000001a: 	addq	%rax, %rsi
    0000001d: 	movq	%rsi, %r8
    00000020: 	andq	$-0x2, %rsi
    00000024: 	addq	%rdi, %rsi
    00000027: 	sarq	%r8
    0000002a: 	cmpw	(%rsi), %dx
    0000002d: 	ja	.Ltmp1704 # Offset: 45
    0000002f: 	movl	$0x1, %eax
    00000034: 	jb	.Ltmp1705 # Offset: 52
    00000036: 	retq # Offset: 54
    00000037: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1703:
    00000040: 	xorl	%eax, %eax
    00000042: 	retq # Offset: 66
    00000043: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1704:
    00000048: 	addq	$0x1, %r8
    0000004c: 	subq	%r8, %rax
    0000004f: 	movq	%rax, %rdx
    00000052: 	je	.Ltmp1703 # Offset: 82
    00000054: 	leaq	0x2(%rsi), %rdi
    00000058: 	movl	%r9d, %esi
    0000005b: 	jmp	"_Z24binarysearch_recur_innerIPttlEbT_T0_T1_.part.0/1" # TAILCALL  # Offset: 91
.Ltmp1705:
    00000060: 	testq	%r8, %r8
    00000063: 	je	.Ltmp1703 # Offset: 99
    00000065: 	movq	%r8, %rdx
    00000068: 	movl	%r9d, %esi
    0000006b: 	jmp	"_Z24binarysearch_recur_innerIPttlEbT_T0_T1_.part.0/1" # TAILCALL  # Offset: 107
DWARF CFI Instructions:
    <empty>
End of Function "_Z18binarysearch_recurIPttEbT_S1_T0_"

Binary Function "_Z18binarysearch_recurIPffEbT_S1_T0_" after disassembly {
  Number      : 277
  State       : disassembled
  Address     : 0xb520
  Size        : 0x62
  MaxSize     : 0x70
  Offset      : 0xb520
  Section     : .text
  Orc Section : .local.text._Z18binarysearch_recurIPffEbT_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0276:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp1706 # Offset: 7
    00000009: 	subq	%rdi, %rsi
    0000000c: 	movq	%rsi, %rdx
    0000000f: 	shrq	$0x3f, %rsi
    00000013: 	sarq	$0x2, %rdx
    00000017: 	addq	%rdx, %rsi
    0000001a: 	sarq	%rsi
    0000001d: 	leaq	(%rdi,%rsi,4), %rcx
    00000021: 	movss	(%rcx), %xmm1
    00000025: 	comiss	%xmm1, %xmm0
    00000028: 	ja	.Ltmp1707 # Offset: 40
    0000002a: 	comiss	%xmm0, %xmm1
    0000002d: 	ja	.Ltmp1708 # Offset: 45
    0000002f: 	movl	$0x1, %eax
    00000034: 	retq # Offset: 52
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp1706:
    00000038: 	xorl	%eax, %eax
    0000003a: 	retq # Offset: 58
    0000003b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1707:
    00000040: 	leaq	0x1(%rsi), %rax
    00000044: 	subq	%rax, %rdx
    00000047: 	movq	%rdx, %rsi
    0000004a: 	je	.Ltmp1706 # Offset: 74
    0000004c: 	leaq	0x4(%rcx), %rdi
    00000050: 	jmp	"_Z24binarysearch_recur_innerIPfflEbT_T0_T1_.part.0/1" # TAILCALL  # Offset: 80
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp1708:
    00000058: 	testq	%rsi, %rsi
    0000005b: 	je	.Ltmp1706 # Offset: 91
    0000005d: 	jmp	"_Z24binarysearch_recur_innerIPfflEbT_T0_T1_.part.0/1" # TAILCALL  # Offset: 93
DWARF CFI Instructions:
    <empty>
End of Function "_Z18binarysearch_recurIPffEbT_S1_T0_"

Binary Function "_Z17lower_bound_recurIPaaET_S1_S1_T0_" after disassembly {
  Number      : 278
  State       : disassembled
  Address     : 0xb590
  Size        : 0xbf
  MaxSize     : 0xc0
  Offset      : 0xb590
  Section     : .text
  Orc Section : .local.text._Z17lower_bound_recurIPaaET_S1_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0277:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	movl	%edx, %edi
    00000009: 	subq	%rax, %rsi
    0000000c: 	je	.Ltmp1709 # Offset: 12
    0000000e: 	movq	%rsi, %rcx
    00000011: 	movsbl	%dl, %r8d
    00000015: 	shrq	$0x3f, %rcx
    00000019: 	addq	%rsi, %rcx
    0000001c: 	sarq	%rcx
    0000001f: 	leaq	(%rax,%rcx), %rdx
    00000023: 	cmpb	(%rdx), %dil
    00000026: 	jle	.Ltmp1710 # Offset: 38
    00000028: 	addq	$0x1, %rcx
    0000002c: 	leaq	0x1(%rdx), %rax
    00000030: 	subq	%rcx, %rsi
    00000033: 	je	.Ltmp1709 # Offset: 51
    00000035: 	movq	%rsi, %rdx
    00000038: 	shrq	$0x3f, %rdx
    0000003c: 	addq	%rsi, %rdx
    0000003f: 	sarq	%rdx
    00000042: 	leaq	(%rax,%rdx), %rcx
    00000046: 	cmpb	(%rcx), %dil
    00000049: 	jle	.Ltmp1711 # Offset: 73
    0000004b: 	addq	$0x1, %rdx
    0000004f: 	leaq	0x1(%rcx), %rax
    00000053: 	subq	%rdx, %rsi
    00000056: 	je	.Ltmp1709 # Offset: 86
    00000058: 	movq	%rsi, %rdx
    0000005b: 	movq	%rax, %rdi
    0000005e: 	movl	%r8d, %esi
    00000061: 	jmp	"_Z23lower_bound_recur_innerIPaalET_S1_T0_T1_.part.0/1" # TAILCALL  # Offset: 97
    00000066: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1710:
    00000070: 	testq	%rcx, %rcx
    00000073: 	jne	.Ltmp1712 # Offset: 115
.Ltmp1709:
    00000075: 	retq # Offset: 117
    00000076: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1712:
    00000080: 	testq	%rsi, %rsi
    00000083: 	leaq	0x3(%rsi), %rdx
    00000087: 	cmovnsq	%rsi, %rdx
    0000008b: 	sarq	$0x2, %rdx
    0000008f: 	leaq	(%rax,%rdx), %rsi
    00000093: 	cmpb	(%rsi), %dil
    00000096: 	jle	.Ltmp1711 # Offset: 150
    00000098: 	leaq	0x1(%rsi), %rax
    0000009c: 	leaq	0x1(%rdx), %rsi
    000000a0: 	subq	%rsi, %rcx
    000000a3: 	movq	%rcx, %rdx
    000000a6: 	je	.Ltmp1709 # Offset: 166
.Ltmp1713:
    000000a8: 	movl	%r8d, %esi
    000000ab: 	movq	%rax, %rdi
    000000ae: 	jmp	"_Z23lower_bound_recur_innerIPaalET_S1_T0_T1_.part.0/1" # TAILCALL  # Offset: 174
    000000b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1711:
    000000b8: 	testq	%rdx, %rdx
    000000bb: 	je	.Ltmp1709 # Offset: 187
    000000bd: 	jmp	.Ltmp1713 # Offset: 189
DWARF CFI Instructions:
    <empty>
End of Function "_Z17lower_bound_recurIPaaET_S1_S1_T0_"

Binary Function "_Z17upper_bound_recurIPaaET_S1_S1_T0_" after disassembly {
  Number      : 279
  State       : disassembled
  Address     : 0xb650
  Size        : 0xa7
  MaxSize     : 0xb0
  Offset      : 0xb650
  Section     : .text
  Orc Section : .local.text._Z17upper_bound_recurIPaaET_S1_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0278:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	movl	%edx, %edi
    00000009: 	subq	%rax, %rsi
    0000000c: 	je	.Ltmp1714 # Offset: 12
    0000000e: 	movq	%rsi, %rcx
    00000011: 	movsbl	%dl, %r8d
    00000015: 	shrq	$0x3f, %rcx
    00000019: 	addq	%rsi, %rcx
    0000001c: 	sarq	%rcx
    0000001f: 	leaq	(%rax,%rcx), %rdx
    00000023: 	cmpb	(%rdx), %dil
    00000026: 	jge	.Ltmp1715 # Offset: 38
    00000028: 	testq	%rcx, %rcx
    0000002b: 	je	.Ltmp1714 # Offset: 43
    0000002d: 	testq	%rsi, %rsi
    00000030: 	leaq	0x3(%rsi), %rdx
    00000034: 	cmovnsq	%rsi, %rdx
    00000038: 	sarq	$0x2, %rdx
    0000003c: 	leaq	(%rax,%rdx), %rsi
    00000040: 	cmpb	(%rsi), %dil
    00000043: 	jl	.Ltmp1716 # Offset: 67
    00000045: 	leaq	0x1(%rsi), %rax
    00000049: 	leaq	0x1(%rdx), %rsi
    0000004d: 	subq	%rsi, %rcx
    00000050: 	movq	%rcx, %rdx
    00000053: 	je	.Ltmp1714 # Offset: 83
.Ltmp1718:
    00000055: 	movl	%r8d, %esi
    00000058: 	movq	%rax, %rdi
    0000005b: 	jmp	"_Z23upper_bound_recur_innerIPaalET_S1_T0_T1_.part.0/1" # TAILCALL  # Offset: 91
.Ltmp1715:
    00000060: 	addq	$0x1, %rcx
    00000064: 	leaq	0x1(%rdx), %rax
    00000068: 	subq	%rcx, %rsi
    0000006b: 	jne	.Ltmp1717 # Offset: 107
.Ltmp1714:
    0000006d: 	retq # Offset: 109
    0000006e: 	nop # Size: 2
.Ltmp1717:
    00000070: 	movq	%rsi, %rdx
    00000073: 	shrq	$0x3f, %rdx
    00000077: 	addq	%rsi, %rdx
    0000007a: 	sarq	%rdx
    0000007d: 	leaq	(%rax,%rdx), %rcx
    00000081: 	cmpb	(%rcx), %dil
    00000084: 	jl	.Ltmp1716 # Offset: 132
    00000086: 	addq	$0x1, %rdx
    0000008a: 	leaq	0x1(%rcx), %rax
    0000008e: 	subq	%rdx, %rsi
    00000091: 	je	.Ltmp1714 # Offset: 145
    00000093: 	movq	%rsi, %rdx
    00000096: 	jmp	.Ltmp1718 # Offset: 150
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1716:
    000000a0: 	testq	%rdx, %rdx
    000000a3: 	je	.Ltmp1714 # Offset: 163
    000000a5: 	jmp	.Ltmp1718 # Offset: 165
DWARF CFI Instructions:
    <empty>
End of Function "_Z17upper_bound_recurIPaaET_S1_S1_T0_"

Binary Function "_Z17lower_bound_recurIPiiET_S1_S1_T0_" after disassembly {
  Number      : 280
  State       : disassembled
  Address     : 0xb700
  Size        : 0xcf
  MaxSize     : 0xd0
  Offset      : 0xb700
  Section     : .text
  Orc Section : .local.text._Z17lower_bound_recurIPiiET_S1_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0279:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	movl	%edx, %esi
    00000009: 	cmpq	%rax, %rdi
    0000000c: 	je	.Ltmp1719 # Offset: 12
    0000000e: 	subq	%rdi, %rax
    00000011: 	movq	%rax, %rdx
    00000014: 	movq	%rax, %rcx
    00000017: 	sarq	$0x2, %rcx
    0000001b: 	shrq	$0x3f, %rdx
    0000001f: 	addq	%rcx, %rdx
    00000022: 	sarq	%rdx
    00000025: 	leaq	(%rdi,%rdx,4), %rax
    00000029: 	cmpl	(%rax), %esi
    0000002b: 	jle	.Ltmp1720 # Offset: 43
    0000002d: 	addq	$0x1, %rdx
    00000031: 	addq	$0x4, %rax
    00000035: 	subq	%rdx, %rcx
    00000038: 	je	.Ltmp1719 # Offset: 56
    0000003a: 	movq	%rcx, %rdx
    0000003d: 	shrq	$0x3f, %rdx
    00000041: 	addq	%rcx, %rdx
    00000044: 	sarq	%rdx
    00000047: 	leaq	(%rax,%rdx,4), %rdi
    0000004b: 	cmpl	(%rdi), %esi
    0000004d: 	jle	.Ltmp1721 # Offset: 77
    0000004f: 	addq	$0x1, %rdx
    00000053: 	leaq	0x4(%rdi), %rax
    00000057: 	subq	%rdx, %rcx
    0000005a: 	je	.Ltmp1719 # Offset: 90
    0000005c: 	movq	%rcx, %rdx
    0000005f: 	movq	%rax, %rdi
    00000062: 	jmp	"_Z23lower_bound_recur_innerIPiilET_S1_T0_T1_.part.0/1" # TAILCALL  # Offset: 98
    00000067: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1720:
    00000070: 	testq	%rdx, %rdx
    00000073: 	jne	.Ltmp1722 # Offset: 115
.Ltmp1724:
    00000075: 	movq	%rdi, %rax
.Ltmp1719:
    00000078: 	retq # Offset: 120
    00000079: 	nopl	(%rax) # Size: 7
.Ltmp1722:
    00000080: 	testq	%rcx, %rcx
    00000083: 	leaq	0x3(%rcx), %rax
    00000087: 	cmovnsq	%rcx, %rax
    0000008b: 	movq	%rax, %r8
    0000008e: 	andq	$-0x4, %rax
    00000092: 	addq	%rdi, %rax
    00000095: 	sarq	$0x2, %r8
    00000099: 	cmpl	(%rax), %esi
    0000009b: 	jle	.Ltmp1723 # Offset: 155
    0000009d: 	addq	$0x1, %r8
    000000a1: 	addq	$0x4, %rax
    000000a5: 	subq	%r8, %rdx
    000000a8: 	je	.Ltmp1719 # Offset: 168
.Ltmp1725:
    000000aa: 	movq	%rax, %rdi
    000000ad: 	jmp	"_Z23lower_bound_recur_innerIPiilET_S1_T0_T1_.part.0/1" # TAILCALL  # Offset: 173
    000000b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1723:
    000000b8: 	testq	%r8, %r8
    000000bb: 	je	.Ltmp1724 # Offset: 187
    000000bd: 	movq	%r8, %rdx
    000000c0: 	jmp	"_Z23lower_bound_recur_innerIPiilET_S1_T0_T1_.part.0/1" # TAILCALL  # Offset: 192
    000000c5: 	nopl	(%rax) # Size: 3
.Ltmp1721:
    000000c8: 	testq	%rdx, %rdx
    000000cb: 	je	.Ltmp1719 # Offset: 203
    000000cd: 	jmp	.Ltmp1725 # Offset: 205
DWARF CFI Instructions:
    <empty>
End of Function "_Z17lower_bound_recurIPiiET_S1_S1_T0_"

Binary Function "_Z17upper_bound_recurIPttET_S1_S1_T0_" after disassembly {
  Number      : 281
  State       : disassembled
  Address     : 0xb7d0
  Size        : 0xda
  MaxSize     : 0xe0
  Offset      : 0xb7d0
  Section     : .text
  Orc Section : .local.text._Z17upper_bound_recurIPttET_S1_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0280:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp1726 # Offset: 10
    0000000c: 	subq	%rdi, %rax
    0000000f: 	movzwl	%dx, %r8d
    00000013: 	movq	%rax, %rcx
    00000016: 	shrq	$0x3f, %rax
    0000001a: 	sarq	%rcx
    0000001d: 	addq	%rcx, %rax
    00000020: 	movq	%rax, %rsi
    00000023: 	andq	$-0x2, %rax
    00000027: 	addq	%rdi, %rax
    0000002a: 	sarq	%rsi
    0000002d: 	cmpw	(%rax), %dx
    00000030: 	jae	.Ltmp1727 # Offset: 48
    00000032: 	testq	%rsi, %rsi
    00000035: 	je	.Ltmp1728 # Offset: 53
    00000037: 	testq	%rcx, %rcx
    0000003a: 	leaq	0x3(%rcx), %r9
    0000003e: 	cmovnsq	%rcx, %r9
    00000042: 	sarq	$0x2, %r9
    00000046: 	leaq	(%rdi,%r9,2), %rax
    0000004a: 	cmpw	(%rax), %dx
    0000004d: 	jae	.Ltmp1729 # Offset: 77
    0000004f: 	testq	%r9, %r9
    00000052: 	je	.Ltmp1728 # Offset: 82
    00000054: 	movq	%r9, %rdx
    00000057: 	movl	%r8d, %esi
    0000005a: 	jmp	"_Z23upper_bound_recur_innerIPttlET_S1_T0_T1_.part.0/1" # TAILCALL  # Offset: 90
    0000005f: 	nop # Size: 1
.Ltmp1728:
    00000060: 	movq	%rdi, %rax
.Ltmp1726:
    00000063: 	retq # Offset: 99
    00000064: 	nopl	(%rax) # Size: 4
.Ltmp1727:
    00000068: 	addq	$0x1, %rsi
    0000006c: 	addq	$0x2, %rax
    00000070: 	subq	%rsi, %rcx
    00000073: 	je	.Ltmp1726 # Offset: 115
    00000075: 	movq	%rcx, %rsi
    00000078: 	shrq	$0x3f, %rsi
    0000007c: 	addq	%rcx, %rsi
    0000007f: 	movq	%rsi, %r9
    00000082: 	andq	$-0x2, %rsi
    00000086: 	addq	%rax, %rsi
    00000089: 	sarq	%r9
    0000008c: 	cmpw	(%rsi), %dx
    0000008f: 	jae	.Ltmp1730 # Offset: 143
    00000091: 	testq	%r9, %r9
    00000094: 	je	.Ltmp1726 # Offset: 148
    00000096: 	movq	%r9, %rdx
    00000099: 	movl	%r8d, %esi
    0000009c: 	movq	%rax, %rdi
    0000009f: 	jmp	"_Z23upper_bound_recur_innerIPttlET_S1_T0_T1_.part.0/1" # TAILCALL  # Offset: 159
    000000a4: 	nopl	(%rax) # Size: 4
.Ltmp1729:
    000000a8: 	addq	$0x1, %r9
    000000ac: 	movq	%rsi, %rdx
    000000af: 	addq	$0x2, %rax
    000000b3: 	subq	%r9, %rdx
    000000b6: 	je	.Ltmp1726 # Offset: 182
.Ltmp1731:
    000000b8: 	movl	%r8d, %esi
    000000bb: 	movq	%rax, %rdi
    000000be: 	jmp	"_Z23upper_bound_recur_innerIPttlET_S1_T0_T1_.part.0/1" # TAILCALL  # Offset: 190
    000000c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1730:
    000000c8: 	addq	$0x1, %r9
    000000cc: 	leaq	0x2(%rsi), %rax
    000000d0: 	subq	%r9, %rcx
    000000d3: 	movq	%rcx, %rdx
    000000d6: 	je	.Ltmp1726 # Offset: 214
    000000d8: 	jmp	.Ltmp1731 # Offset: 216
DWARF CFI Instructions:
    <empty>
End of Function "_Z17upper_bound_recurIPttET_S1_S1_T0_"

Binary Function "_Z17lower_bound_recurIPttET_S1_S1_T0_" after disassembly {
  Number      : 282
  State       : disassembled
  Address     : 0xb8b0
  Size        : 0xda
  MaxSize     : 0xe0
  Offset      : 0xb8b0
  Section     : .text
  Orc Section : .local.text._Z17lower_bound_recurIPttET_S1_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0281:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp1732 # Offset: 10
    0000000c: 	subq	%rdi, %rax
    0000000f: 	movzwl	%dx, %r8d
    00000013: 	movq	%rax, %rcx
    00000016: 	shrq	$0x3f, %rax
    0000001a: 	sarq	%rcx
    0000001d: 	addq	%rcx, %rax
    00000020: 	movq	%rax, %rsi
    00000023: 	andq	$-0x2, %rax
    00000027: 	addq	%rdi, %rax
    0000002a: 	sarq	%rsi
    0000002d: 	cmpw	(%rax), %dx
    00000030: 	jbe	.Ltmp1733 # Offset: 48
    00000032: 	addq	$0x1, %rsi
    00000036: 	addq	$0x2, %rax
    0000003a: 	subq	%rsi, %rcx
    0000003d: 	je	.Ltmp1732 # Offset: 61
    0000003f: 	movq	%rcx, %rsi
    00000042: 	shrq	$0x3f, %rsi
    00000046: 	addq	%rcx, %rsi
    00000049: 	movq	%rsi, %r9
    0000004c: 	andq	$-0x2, %rsi
    00000050: 	addq	%rax, %rsi
    00000053: 	sarq	%r9
    00000056: 	cmpw	(%rsi), %dx
    00000059: 	jbe	.Ltmp1734 # Offset: 89
    0000005b: 	addq	$0x1, %r9
    0000005f: 	leaq	0x2(%rsi), %rax
    00000063: 	subq	%r9, %rcx
    00000066: 	movq	%rcx, %rdx
    00000069: 	je	.Ltmp1732 # Offset: 105
.Ltmp1737:
    0000006b: 	movl	%r8d, %esi
    0000006e: 	movq	%rax, %rdi
    00000071: 	jmp	"_Z23lower_bound_recur_innerIPttlET_S1_T0_T1_.part.0/1" # TAILCALL  # Offset: 113
    00000076: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1733:
    00000080: 	testq	%rsi, %rsi
    00000083: 	jne	.Ltmp1735 # Offset: 131
.Ltmp1738:
    00000085: 	movq	%rdi, %rax
.Ltmp1732:
    00000088: 	retq # Offset: 136
    00000089: 	nopl	(%rax) # Size: 7
.Ltmp1735:
    00000090: 	testq	%rcx, %rcx
    00000093: 	leaq	0x3(%rcx), %r9
    00000097: 	cmovnsq	%rcx, %r9
    0000009b: 	sarq	$0x2, %r9
    0000009f: 	leaq	(%rdi,%r9,2), %rax
    000000a3: 	cmpw	(%rax), %dx
    000000a6: 	jbe	.Ltmp1736 # Offset: 166
    000000a8: 	addq	$0x1, %r9
    000000ac: 	movq	%rsi, %rdx
    000000af: 	addq	$0x2, %rax
    000000b3: 	subq	%r9, %rdx
    000000b6: 	je	.Ltmp1732 # Offset: 182
    000000b8: 	jmp	.Ltmp1737 # Offset: 184
    000000ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1736:
    000000c0: 	testq	%r9, %r9
    000000c3: 	je	.Ltmp1738 # Offset: 195
    000000c5: 	movq	%r9, %rdx
    000000c8: 	movl	%r8d, %esi
    000000cb: 	jmp	"_Z23lower_bound_recur_innerIPttlET_S1_T0_T1_.part.0/1" # TAILCALL  # Offset: 203
.Ltmp1734:
    000000d0: 	testq	%r9, %r9
    000000d3: 	je	.Ltmp1732 # Offset: 211
    000000d5: 	movq	%r9, %rdx
    000000d8: 	jmp	.Ltmp1737 # Offset: 216
DWARF CFI Instructions:
    <empty>
End of Function "_Z17lower_bound_recurIPttET_S1_S1_T0_"

Binary Function "_Z17lower_bound_recurIPffET_S1_S1_T0_" after disassembly {
  Number      : 283
  State       : disassembled
  Address     : 0xb990
  Size        : 0xcf
  MaxSize     : 0xd0
  Offset      : 0xb990
  Section     : .text
  Orc Section : .local.text._Z17lower_bound_recurIPffET_S1_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0282:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp1739 # Offset: 10
    0000000c: 	subq	%rdi, %rax
    0000000f: 	movq	%rax, %rsi
    00000012: 	movq	%rax, %rdx
    00000015: 	sarq	$0x2, %rdx
    00000019: 	shrq	$0x3f, %rsi
    0000001d: 	addq	%rdx, %rsi
    00000020: 	sarq	%rsi
    00000023: 	leaq	(%rdi,%rsi,4), %rax
    00000027: 	comiss	(%rax), %xmm0
    0000002a: 	jbe	.Ltmp1740 # Offset: 42
    0000002c: 	addq	$0x1, %rsi
    00000030: 	addq	$0x4, %rax
    00000034: 	subq	%rsi, %rdx
    00000037: 	je	.Ltmp1739 # Offset: 55
    00000039: 	movq	%rdx, %rsi
    0000003c: 	shrq	$0x3f, %rsi
    00000040: 	addq	%rdx, %rsi
    00000043: 	sarq	%rsi
    00000046: 	leaq	(%rax,%rsi,4), %rcx
    0000004a: 	comiss	(%rcx), %xmm0
    0000004d: 	jbe	.Ltmp1741 # Offset: 77
    0000004f: 	addq	$0x1, %rsi
    00000053: 	leaq	0x4(%rcx), %rax
    00000057: 	subq	%rsi, %rdx
    0000005a: 	je	.Ltmp1739 # Offset: 90
    0000005c: 	movq	%rdx, %rsi
    0000005f: 	movq	%rax, %rdi
    00000062: 	jmp	"_Z23lower_bound_recur_innerIPfflET_S1_T0_T1_.part.0/1" # TAILCALL  # Offset: 98
    00000067: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1740:
    00000070: 	testq	%rsi, %rsi
    00000073: 	jne	.Ltmp1742 # Offset: 115
.Ltmp1744:
    00000075: 	movq	%rdi, %rax
.Ltmp1739:
    00000078: 	retq # Offset: 120
    00000079: 	nopl	(%rax) # Size: 7
.Ltmp1742:
    00000080: 	testq	%rdx, %rdx
    00000083: 	leaq	0x3(%rdx), %rax
    00000087: 	cmovnsq	%rdx, %rax
    0000008b: 	movq	%rax, %r8
    0000008e: 	andq	$-0x4, %rax
    00000092: 	addq	%rdi, %rax
    00000095: 	sarq	$0x2, %r8
    00000099: 	comiss	(%rax), %xmm0
    0000009c: 	jbe	.Ltmp1743 # Offset: 156
    0000009e: 	addq	$0x1, %r8
    000000a2: 	addq	$0x4, %rax
    000000a6: 	subq	%r8, %rsi
    000000a9: 	je	.Ltmp1739 # Offset: 169
.Ltmp1745:
    000000ab: 	movq	%rax, %rdi
    000000ae: 	jmp	"_Z23lower_bound_recur_innerIPfflET_S1_T0_T1_.part.0/1" # TAILCALL  # Offset: 174
    000000b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1743:
    000000b8: 	testq	%r8, %r8
    000000bb: 	je	.Ltmp1744 # Offset: 187
    000000bd: 	movq	%r8, %rsi
    000000c0: 	jmp	"_Z23lower_bound_recur_innerIPfflET_S1_T0_T1_.part.0/1" # TAILCALL  # Offset: 192
    000000c5: 	nopl	(%rax) # Size: 3
.Ltmp1741:
    000000c8: 	testq	%rsi, %rsi
    000000cb: 	je	.Ltmp1739 # Offset: 203
    000000cd: 	jmp	.Ltmp1745 # Offset: 205
DWARF CFI Instructions:
    <empty>
End of Function "_Z17lower_bound_recurIPffET_S1_S1_T0_"

Binary Function "_Z17upper_bound_recurIPiiET_S1_S1_T0_" after disassembly {
  Number      : 284
  State       : disassembled
  Address     : 0xba60
  Size        : 0xc7
  MaxSize     : 0xd0
  Offset      : 0xba60
  Section     : .text
  Orc Section : .local.text._Z17upper_bound_recurIPiiET_S1_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0283:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	movl	%edx, %esi
    00000009: 	cmpq	%rax, %rdi
    0000000c: 	je	.Ltmp1746 # Offset: 12
    0000000e: 	subq	%rdi, %rax
    00000011: 	movq	%rax, %rdx
    00000014: 	movq	%rax, %rcx
    00000017: 	sarq	$0x2, %rcx
    0000001b: 	shrq	$0x3f, %rdx
    0000001f: 	addq	%rcx, %rdx
    00000022: 	sarq	%rdx
    00000025: 	leaq	(%rdi,%rdx,4), %rax
    00000029: 	cmpl	(%rax), %esi
    0000002b: 	jge	.Ltmp1747 # Offset: 43
    0000002d: 	testq	%rdx, %rdx
    00000030: 	je	.Ltmp1748 # Offset: 48
    00000032: 	testq	%rcx, %rcx
    00000035: 	leaq	0x3(%rcx), %rax
    00000039: 	cmovnsq	%rcx, %rax
    0000003d: 	movq	%rax, %r8
    00000040: 	andq	$-0x4, %rax
    00000044: 	addq	%rdi, %rax
    00000047: 	sarq	$0x2, %r8
    0000004b: 	cmpl	(%rax), %esi
    0000004d: 	jge	.Ltmp1749 # Offset: 77
    0000004f: 	testq	%r8, %r8
    00000052: 	je	.Ltmp1748 # Offset: 82
    00000054: 	movq	%r8, %rdx
    00000057: 	jmp	"_Z23upper_bound_recur_innerIPiilET_S1_T0_T1_.part.0/1" # TAILCALL  # Offset: 87
    0000005c: 	nopl	(%rax) # Size: 4
.Ltmp1748:
    00000060: 	movq	%rdi, %rax
.Ltmp1746:
    00000063: 	retq # Offset: 99
    00000064: 	nopl	(%rax) # Size: 4
.Ltmp1747:
    00000068: 	addq	$0x1, %rdx
    0000006c: 	addq	$0x4, %rax
    00000070: 	subq	%rdx, %rcx
    00000073: 	je	.Ltmp1746 # Offset: 115
    00000075: 	movq	%rcx, %rdx
    00000078: 	shrq	$0x3f, %rdx
    0000007c: 	addq	%rcx, %rdx
    0000007f: 	sarq	%rdx
    00000082: 	leaq	(%rax,%rdx,4), %rdi
    00000086: 	cmpl	(%rdi), %esi
    00000088: 	jge	.Ltmp1750 # Offset: 136
    0000008a: 	testq	%rdx, %rdx
    0000008d: 	je	.Ltmp1746 # Offset: 141
.Ltmp1751:
    0000008f: 	movq	%rax, %rdi
    00000092: 	jmp	"_Z23upper_bound_recur_innerIPiilET_S1_T0_T1_.part.0/1" # TAILCALL  # Offset: 146
    00000097: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1750:
    000000a0: 	addq	$0x1, %rdx
    000000a4: 	leaq	0x4(%rdi), %rax
    000000a8: 	subq	%rdx, %rcx
    000000ab: 	je	.Ltmp1746 # Offset: 171
    000000ad: 	movq	%rcx, %rdx
    000000b0: 	jmp	.Ltmp1751 # Offset: 176
    000000b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1749:
    000000b8: 	addq	$0x1, %r8
    000000bc: 	addq	$0x4, %rax
    000000c0: 	subq	%r8, %rdx
    000000c3: 	je	.Ltmp1746 # Offset: 195
    000000c5: 	jmp	.Ltmp1751 # Offset: 197
DWARF CFI Instructions:
    <empty>
End of Function "_Z17upper_bound_recurIPiiET_S1_S1_T0_"

Binary Function "_Z17upper_bound_recurIPffET_S1_S1_T0_" after disassembly {
  Number      : 285
  State       : disassembled
  Address     : 0xbb30
  Size        : 0xcf
  MaxSize     : 0xd0
  Offset      : 0xbb30
  Section     : .text
  Orc Section : .local.text._Z17upper_bound_recurIPffET_S1_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0284:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp1752 # Offset: 10
    0000000c: 	subq	%rdi, %rax
    0000000f: 	movq	%rax, %rsi
    00000012: 	movq	%rax, %rdx
    00000015: 	sarq	$0x2, %rdx
    00000019: 	shrq	$0x3f, %rsi
    0000001d: 	addq	%rdx, %rsi
    00000020: 	sarq	%rsi
    00000023: 	leaq	(%rdi,%rsi,4), %rax
    00000027: 	movss	(%rax), %xmm1
    0000002b: 	comiss	%xmm0, %xmm1
    0000002e: 	jbe	.Ltmp1753 # Offset: 46
    00000030: 	testq	%rsi, %rsi
    00000033: 	je	.Ltmp1754 # Offset: 51
    00000035: 	testq	%rdx, %rdx
    00000038: 	leaq	0x3(%rdx), %rax
    0000003c: 	cmovnsq	%rdx, %rax
    00000040: 	movq	%rax, %r8
    00000043: 	andq	$-0x4, %rax
    00000047: 	addq	%rdi, %rax
    0000004a: 	sarq	$0x2, %r8
    0000004e: 	movss	(%rax), %xmm1
    00000052: 	comiss	%xmm0, %xmm1
    00000055: 	jbe	.Ltmp1755 # Offset: 85
    00000057: 	testq	%r8, %r8
    0000005a: 	je	.Ltmp1754 # Offset: 90
    0000005c: 	movq	%r8, %rsi
    0000005f: 	jmp	"_Z23upper_bound_recur_innerIPfflET_S1_T0_T1_.part.0/1" # TAILCALL  # Offset: 95
    00000064: 	nopl	(%rax) # Size: 4
.Ltmp1754:
    00000068: 	movq	%rdi, %rax
.Ltmp1752:
    0000006b: 	retq # Offset: 107
    0000006c: 	nopl	(%rax) # Size: 4
.Ltmp1753:
    00000070: 	addq	$0x1, %rsi
    00000074: 	addq	$0x4, %rax
    00000078: 	subq	%rsi, %rdx
    0000007b: 	je	.Ltmp1752 # Offset: 123
    0000007d: 	movq	%rdx, %rsi
    00000080: 	shrq	$0x3f, %rsi
    00000084: 	addq	%rdx, %rsi
    00000087: 	sarq	%rsi
    0000008a: 	leaq	(%rax,%rsi,4), %rcx
    0000008e: 	movss	(%rcx), %xmm1
    00000092: 	comiss	%xmm0, %xmm1
    00000095: 	jbe	.Ltmp1756 # Offset: 149
    00000097: 	testq	%rsi, %rsi
    0000009a: 	je	.Ltmp1752 # Offset: 154
.Ltmp1757:
    0000009c: 	movq	%rax, %rdi
    0000009f: 	jmp	"_Z23upper_bound_recur_innerIPfflET_S1_T0_T1_.part.0/1" # TAILCALL  # Offset: 159
    000000a4: 	nopl	(%rax) # Size: 4
.Ltmp1756:
    000000a8: 	addq	$0x1, %rsi
    000000ac: 	leaq	0x4(%rcx), %rax
    000000b0: 	subq	%rsi, %rdx
    000000b3: 	je	.Ltmp1752 # Offset: 179
    000000b5: 	movq	%rdx, %rsi
    000000b8: 	jmp	.Ltmp1757 # Offset: 184
    000000ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1755:
    000000c0: 	addq	$0x1, %r8
    000000c4: 	addq	$0x4, %rax
    000000c8: 	subq	%r8, %rsi
    000000cb: 	je	.Ltmp1752 # Offset: 203
    000000cd: 	jmp	.Ltmp1757 # Offset: 205
DWARF CFI Instructions:
    <empty>
End of Function "_Z17upper_bound_recurIPffET_S1_S1_T0_"

Binary Function "_Z18binarysearch_recurIPaaEbT_S1_T0_" after disassembly {
  Number      : 286
  State       : disassembled
  Address     : 0xbc00
  Size        : 0xd8
  MaxSize     : 0xe0
  Offset      : 0xbc00
  Section     : .text
  Orc Section : .local.text._Z18binarysearch_recurIPaaEbT_S1_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0285:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	je	.Ltmp1758 # Offset: 7
    00000009: 	movq	%rsi, %rax
    0000000c: 	movsbl	%dl, %r9d
    00000010: 	shrq	$0x3f, %rax
    00000014: 	addq	%rsi, %rax
    00000017: 	sarq	%rax
    0000001a: 	leaq	(%rdi,%rax), %rcx
    0000001e: 	cmpb	(%rcx), %dl
    00000020: 	jg	.Ltmp1759 # Offset: 32
    00000022: 	movl	$0x1, %r8d
    00000028: 	jge	.Ltmp1760 # Offset: 40
    0000002a: 	testq	%rax, %rax
    0000002d: 	je	.Ltmp1758 # Offset: 45
    0000002f: 	testq	%rsi, %rsi
    00000032: 	leaq	0x3(%rsi), %r10
    00000036: 	cmovnsq	%rsi, %r10
    0000003a: 	sarq	$0x2, %r10
    0000003e: 	leaq	(%rdi,%r10), %rcx
    00000042: 	cmpb	(%rcx), %dl
    00000044: 	jg	.Ltmp1761 # Offset: 68
    00000046: 	jge	.Ltmp1760 # Offset: 70
.Ltmp1764:
    00000048: 	testq	%r10, %r10
    0000004b: 	jne	.Ltmp1762 # Offset: 75
    0000004d: 	nopl	(%rax) # Size: 3
.Ltmp1758:
    00000050: 	xorl	%r8d, %r8d
.Ltmp1760:
    00000053: 	movl	%r8d, %eax
    00000056: 	retq # Offset: 86
    00000057: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1759:
    00000060: 	addq	$0x1, %rax
    00000064: 	subq	%rax, %rsi
    00000067: 	je	.Ltmp1758 # Offset: 103
    00000069: 	movq	%rsi, %r10
    0000006c: 	leaq	0x1(%rcx), %rdi
    00000070: 	shrq	$0x3f, %r10
    00000074: 	addq	%rsi, %r10
    00000077: 	sarq	%r10
    0000007a: 	leaq	(%rdi,%r10), %rax
    0000007e: 	cmpb	(%rax), %dl
    00000080: 	jg	.Ltmp1763 # Offset: 128
    00000082: 	movl	$0x1, %r8d
    00000088: 	jge	.Ltmp1760 # Offset: 136
    0000008a: 	jmp	.Ltmp1764 # Offset: 138
    0000008c: 	nopl	(%rax) # Size: 4
.Ltmp1762:
    00000090: 	movq	%r10, %rdx
    00000093: 	movl	%r9d, %esi
    00000096: 	jmp	"_Z24binarysearch_recur_innerIPaalEbT_T0_T1_.part.0/1" # TAILCALL  # Offset: 150
    0000009b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1763:
    000000a0: 	addq	$0x1, %r10
    000000a4: 	movq	%rsi, %rdx
    000000a7: 	subq	%r10, %rdx
    000000aa: 	je	.Ltmp1758 # Offset: 170
    000000ac: 	leaq	0x1(%rax), %rdi
    000000b0: 	movl	%r9d, %esi
    000000b3: 	jmp	"_Z24binarysearch_recur_innerIPaalEbT_T0_T1_.part.0/1" # TAILCALL  # Offset: 179
    000000b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1761:
    000000c0: 	addq	$0x1, %r10
    000000c4: 	subq	%r10, %rax
    000000c7: 	movq	%rax, %rdx
    000000ca: 	je	.Ltmp1758 # Offset: 202
    000000cc: 	leaq	0x1(%rcx), %rdi
    000000d0: 	movl	%r9d, %esi
    000000d3: 	jmp	"_Z24binarysearch_recur_innerIPaalEbT_T0_T1_.part.0/1" # TAILCALL  # Offset: 211
DWARF CFI Instructions:
    <empty>
End of Function "_Z18binarysearch_recurIPaaEbT_S1_T0_"

Binary Function "_Z15TestSearchArrayISt18_Fwd_list_iteratorIaEPFS1_S1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1(*2)" after disassembly {
  All names   : _Z15TestSearchArrayISt18_Fwd_list_iteratorIaEPFS1_S1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1
                _Z15TestSearchArrayISt18_Fwd_list_iteratorIaEPFS1_S1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/binary_search.cpp/1
  Number      : 287
  State       : disassembled
  Address     : 0xbce0
  Size        : 0x20e
  MaxSize     : 0x210
  Offset      : 0xbce0
  Section     : .text
  Orc Section : .local.text._Z15TestSearchArrayISt18_Fwd_list_iteratorIaEPFS1_S1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0286:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	movq	%rcx, %r14
    00000007: 	pushq	%r13
    00000009: 	movq	%rsi, %r13
    0000000c: 	pushq	%r12
    0000000e: 	pushq	%rbp
    0000000f: 	pushq	%rbx
    00000010: 	movq	%rdi, %rbx
    00000013: 	movl	$0x400, %edi
    00000018: 	subq	$0x28, %rsp
    0000001c: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000023: 	movq	%r8, 0x18(%rsp)
    00000028: 	movq	%rdx, 0x8(%rsp)
    0000002d: 	movb	%r9b, 0x17(%rsp)
    00000032: 	callq	_Znwm@PLT # Offset: 50
    00000037: 	movabsq	$0x5851f42d4c957f2d, %r8
    00000041: 	leaq	0x9(%rax), %rdi
    00000045: 	movb	$0x0, (%rax)
    00000048: 	movq	%rax, %r12
    0000004b: 	leaq	0x400(%rax), %rsi
    00000052: 	andq	$-0x8, %rdi
    00000056: 	movq	$0x0, 0x1(%rax)
    0000005e: 	movq	$0x0, 0x3f8(%rax)
    00000069: 	subl	%edi, %eax
    0000006b: 	leal	0x400(%rax), %ecx
    00000071: 	xorl	%eax, %eax
    00000073: 	shrl	$0x3, %ecx
    00000076: 	rep		stosq	%rax, %es:(%rdi)
    00000079: 	movq	%r12, %rcx
    0000007c: 	movabsq	$0x14057b7ef767814f, %rdi
    00000086: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1767:
    00000090: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    00000097: 	imulq	%r8, %rax
    0000009b: 	addq	%rdi, %rax
    0000009e: 	movq	%rax, %rdx
    000000a1: 	movq	%rax, %r9
    000000a4: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000000ab: 	shrq	$0x14, %rdx
    000000af: 	shlq	$0x17, %r9
    000000b3: 	xorq	%r9, %rdx
    000000b6: 	xorq	%rdx, %rax
    000000b9: 	xorl	%edx, %edx
    000000bb: 	divq	0x8(%rsp)
    000000c0: 	testq	%rdx, %rdx
    000000c3: 	leaq	-0x1(%rdx), %rax
    000000c7: 	movq	%rbx, %rdx
    000000ca: 	je	.Ltmp1765 # Offset: 202
    000000cc: 	nopl	(%rax) # Size: 4
.Ltmp1766:
    000000d0: 	movq	(%rdx), %rdx
    000000d3: 	subq	$0x1, %rax
    000000d7: 	jae	.Ltmp1766 # Offset: 215
.Ltmp1765:
    000000d9: 	movzbl	0x8(%rdx), %eax
    000000dd: 	addq	$0x1, %rcx
    000000e1: 	movb	%al, -0x1(%rcx)
    000000e4: 	cmpq	%rcx, %rsi
    000000e7: 	jne	.Ltmp1767 # Offset: 231
    000000e9: 	callq	clock@PLT # Offset: 233
    000000ee: 	xorl	%r15d, %r15d
    000000f1: 	xorl	%ebp, %ebp
    000000f3: 	movq	%rax, start_time(%rip)
.Ltmp1771:
    000000fa: 	leaq	0xc8(%rbp), %rax
    00000101: 	cmpb	$0x0, 0x17(%rsp)
    00000106: 	movq	%rax, (%rsp)
    0000010a: 	jne	.Ltmp1768 # Offset: 266
.Ltmp1769:
    00000110: 	movq	%rbp, %rax
    00000113: 	movq	%r13, %rsi
    00000116: 	addq	$0x1, %rbp
    0000011a: 	movq	%rbx, %rdi
    0000011d: 	andl	$0x3ff, %eax
    00000122: 	movsbl	(%r12,%rax), %edx
    00000127: 	callq	*%r14 # Offset: 295
    0000012a: 	testq	%rax, %rax
    0000012d: 	movl	$0x1, %eax
    00000132: 	cmovel	%eax, %r15d
    00000136: 	cmpq	(%rsp), %rbp
    0000013a: 	jne	.Ltmp1769 # Offset: 314
.Ltmp1773:
    0000013c: 	callq	clock@PLT # Offset: 316
    00000141: 	movsd	gMinimumTimeTarget(%rip), %xmm1
    00000149: 	pxor	%xmm0, %xmm0
    0000014d: 	movq	%rax, end_time(%rip)
    00000154: 	subq	start_time(%rip), %rax
    0000015b: 	cvtsi2sd	%rax, %xmm0
    00000160: 	divsd	DATAat0x34410(%rip), %xmm0
    00000168: 	comisd	%xmm0, %xmm1
    0000016c: 	jbe	.Ltmp1770 # Offset: 364
    0000016e: 	cmpq	$0x5f5e0ff, %rbp
    00000175: 	jbe	.Ltmp1771 # Offset: 373
.Ltmp1770:
    00000177: 	movq	0x18(%rsp), %rdx
    0000017c: 	movq	0x8(%rsp), %rdi
    00000181: 	movq	%rbp, %rsi
    00000184: 	callq	_Z13record_resultdmmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 388
    00000189: 	testb	%r15b, %r15b
    0000018c: 	jne	.Ltmp1772 # Offset: 396
.Ltmp1774:
    0000018e: 	addq	$0x28, %rsp
    00000192: 	movq	%r12, %rdi
    00000195: 	movl	$0x400, %esi
    0000019a: 	popq	%rbx
    0000019b: 	popq	%rbp
    0000019c: 	popq	%r12
    0000019e: 	popq	%r13
    000001a0: 	popq	%r14
    000001a2: 	popq	%r15
    000001a4: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 420
    000001a9: 	nopl	(%rax) # Size: 7
.Ltmp1768:
    000001b0: 	movq	%rbp, %rax
    000001b3: 	movq	%r13, %rsi
    000001b6: 	addq	$0x1, %rbp
    000001ba: 	movq	%rbx, %rdi
    000001bd: 	andl	$0x3ff, %eax
    000001c2: 	movsbl	(%r12,%rax), %edx
    000001c7: 	callq	*%r14 # Offset: 455
    000001ca: 	cmpq	(%rsp), %rbp
    000001ce: 	jne	.Ltmp1768 # Offset: 462
    000001d0: 	jmp	.Ltmp1773 # Offset: 464
.Ltmp1772:
    000001d5: 	movq	0x18(%rsp), %rax
    000001da: 	leaq	DATAat0x34137(%rip), %rsi
    000001e1: 	movl	$0x1, %edi
    000001e6: 	movq	(%rax), %rdx
    000001e9: 	xorl	%eax, %eax
    000001eb: 	callq	__printf_chk@PLT # Offset: 491
    000001f0: 	jmp	.Ltmp1774 # Offset: 496
    000001f2: 	endbr64
    000001f6: 	movq	%rax, %rbp
    000001f9: 	movq	%r12, %rdi
    000001fc: 	movl	$0x400, %esi
    00000201: 	callq	_ZdlPvm@PLT # Offset: 513
    00000206: 	movq	%rbp, %rdi
    00000209: 	callq	_Unwind_Resume@PLT # Offset: 521
DWARF CFI Instructions:
    <empty>
End of Function "_Z15TestSearchArrayISt18_Fwd_list_iteratorIaEPFS1_S1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1(*2)"

Binary Function "_Z15TestSearchArrayISt18_Fwd_list_iteratorItEPFS1_S1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1(*2)" after disassembly {
  All names   : _Z15TestSearchArrayISt18_Fwd_list_iteratorItEPFS1_S1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1
                _Z15TestSearchArrayISt18_Fwd_list_iteratorItEPFS1_S1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/binary_search.cpp/1
  Number      : 288
  State       : disassembled
  Address     : 0xbef0
  Size        : 0x226
  MaxSize     : 0x230
  Offset      : 0xbef0
  Section     : .text
  Orc Section : .local.text._Z15TestSearchArrayISt18_Fwd_list_iteratorItEPFS1_S1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0287:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	movq	%rcx, %r14
    00000007: 	pushq	%r13
    00000009: 	movq	%rsi, %r13
    0000000c: 	pushq	%r12
    0000000e: 	pushq	%rbp
    0000000f: 	pushq	%rbx
    00000010: 	movq	%rdi, %rbx
    00000013: 	movl	$0x800, %edi
    00000018: 	subq	$0x28, %rsp
    0000001c: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000023: 	movq	%rdx, 0x8(%rsp)
    00000028: 	movq	%r8, 0x18(%rsp)
    0000002d: 	movb	%r9b, 0x17(%rsp)
    00000032: 	callq	_Znwm@PLT # Offset: 50
    00000037: 	xorl	%edx, %edx
    00000039: 	movq	%rax, %r12
    0000003c: 	movw	%dx, (%rax)
    0000003f: 	addq	$0x2, %rax
    00000043: 	leaq	0x800(%r12), %rsi
    0000004b: 	cmpq	%rsi, %rax
    0000004e: 	je	.Ltmp1775 # Offset: 78
    00000050: 	movq	$0x0, 0x2(%r12)
    00000059: 	leaq	0xa(%r12), %rdi
    0000005e: 	movq	$0x0, 0x7f8(%r12)
    0000006a: 	andq	$-0x8, %rdi
    0000006e: 	subq	%rdi, %rax
    00000071: 	movq	%rax, %rcx
    00000074: 	xorl	%eax, %eax
    00000076: 	addl	$0x7fe, %ecx
    0000007c: 	shrl	$0x3, %ecx
    0000007f: 	rep		stosq	%rax, %es:(%rdi)
.Ltmp1775:
    00000082: 	movabsq	$0x5851f42d4c957f2d, %r8
    0000008c: 	movq	%r12, %rcx
    0000008f: 	movabsq	$0x14057b7ef767814f, %rdi
    00000099: 	nopl	(%rax) # Size: 7
.Ltmp1778:
    000000a0: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000000a7: 	imulq	%r8, %rax
    000000ab: 	addq	%rdi, %rax
    000000ae: 	movq	%rax, %rdx
    000000b1: 	movq	%rax, %r9
    000000b4: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000000bb: 	shrq	$0x14, %rdx
    000000bf: 	shlq	$0x17, %r9
    000000c3: 	xorq	%r9, %rdx
    000000c6: 	xorq	%rdx, %rax
    000000c9: 	xorl	%edx, %edx
    000000cb: 	divq	0x8(%rsp)
    000000d0: 	testq	%rdx, %rdx
    000000d3: 	leaq	-0x1(%rdx), %rax
    000000d7: 	movq	%rbx, %rdx
    000000da: 	je	.Ltmp1776 # Offset: 218
    000000dc: 	nopl	(%rax) # Size: 4
.Ltmp1777:
    000000e0: 	movq	(%rdx), %rdx
    000000e3: 	subq	$0x1, %rax
    000000e7: 	jae	.Ltmp1777 # Offset: 231
.Ltmp1776:
    000000e9: 	movzwl	0x8(%rdx), %eax
    000000ed: 	addq	$0x2, %rcx
    000000f1: 	movw	%ax, -0x2(%rcx)
    000000f5: 	cmpq	%rsi, %rcx
    000000f8: 	jne	.Ltmp1778 # Offset: 248
    000000fa: 	callq	clock@PLT # Offset: 250
    000000ff: 	xorl	%r15d, %r15d
    00000102: 	xorl	%ebp, %ebp
    00000104: 	movq	%rax, start_time(%rip)
.Ltmp1782:
    0000010b: 	leaq	0xc8(%rbp), %rax
    00000112: 	cmpb	$0x0, 0x17(%rsp)
    00000117: 	movq	%rax, (%rsp)
    0000011b: 	jne	.Ltmp1779 # Offset: 283
    00000121: 	nopl	(%rax) # Size: 7
.Ltmp1780:
    00000128: 	movq	%rbp, %rax
    0000012b: 	movq	%r13, %rsi
    0000012e: 	addq	$0x1, %rbp
    00000132: 	movq	%rbx, %rdi
    00000135: 	andl	$0x3ff, %eax
    0000013a: 	movzwl	(%r12,%rax,2), %edx
    0000013f: 	callq	*%r14 # Offset: 319
    00000142: 	testq	%rax, %rax
    00000145: 	movl	$0x1, %eax
    0000014a: 	cmovel	%eax, %r15d
    0000014e: 	cmpq	(%rsp), %rbp
    00000152: 	jne	.Ltmp1780 # Offset: 338
.Ltmp1784:
    00000154: 	callq	clock@PLT # Offset: 340
    00000159: 	movsd	gMinimumTimeTarget(%rip), %xmm1
    00000161: 	pxor	%xmm0, %xmm0
    00000165: 	movq	%rax, end_time(%rip)
    0000016c: 	subq	start_time(%rip), %rax
    00000173: 	cvtsi2sd	%rax, %xmm0
    00000178: 	divsd	DATAat0x34410(%rip), %xmm0
    00000180: 	comisd	%xmm0, %xmm1
    00000184: 	jbe	.Ltmp1781 # Offset: 388
    00000186: 	cmpq	$0x5f5e0ff, %rbp
    0000018d: 	jbe	.Ltmp1782 # Offset: 397
.Ltmp1781:
    00000193: 	movq	0x18(%rsp), %rdx
    00000198: 	movq	0x8(%rsp), %rdi
    0000019d: 	movq	%rbp, %rsi
    000001a0: 	callq	_Z13record_resultdmmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 416
    000001a5: 	testb	%r15b, %r15b
    000001a8: 	jne	.Ltmp1783 # Offset: 424
.Ltmp1785:
    000001aa: 	addq	$0x28, %rsp
    000001ae: 	movq	%r12, %rdi
    000001b1: 	movl	$0x800, %esi
    000001b6: 	popq	%rbx
    000001b7: 	popq	%rbp
    000001b8: 	popq	%r12
    000001ba: 	popq	%r13
    000001bc: 	popq	%r14
    000001be: 	popq	%r15
    000001c0: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 448
    000001c5: 	nopl	(%rax) # Size: 3
.Ltmp1779:
    000001c8: 	movq	%rbp, %rax
    000001cb: 	movq	%r13, %rsi
    000001ce: 	addq	$0x1, %rbp
    000001d2: 	movq	%rbx, %rdi
    000001d5: 	andl	$0x3ff, %eax
    000001da: 	movzwl	(%r12,%rax,2), %edx
    000001df: 	callq	*%r14 # Offset: 479
    000001e2: 	cmpq	(%rsp), %rbp
    000001e6: 	jne	.Ltmp1779 # Offset: 486
    000001e8: 	jmp	.Ltmp1784 # Offset: 488
.Ltmp1783:
    000001ed: 	movq	0x18(%rsp), %rax
    000001f2: 	leaq	DATAat0x34137(%rip), %rsi
    000001f9: 	movl	$0x1, %edi
    000001fe: 	movq	(%rax), %rdx
    00000201: 	xorl	%eax, %eax
    00000203: 	callq	__printf_chk@PLT # Offset: 515
    00000208: 	jmp	.Ltmp1785 # Offset: 520
    0000020a: 	endbr64
    0000020e: 	movq	%rax, %rbp
    00000211: 	movq	%r12, %rdi
    00000214: 	movl	$0x800, %esi
    00000219: 	callq	_ZdlPvm@PLT # Offset: 537
    0000021e: 	movq	%rbp, %rdi
    00000221: 	callq	_Unwind_Resume@PLT # Offset: 545
DWARF CFI Instructions:
    <empty>
End of Function "_Z15TestSearchArrayISt18_Fwd_list_iteratorItEPFS1_S1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1(*2)"

Binary Function "_Z15TestSearchArrayISt18_Fwd_list_iteratorIiEPFS1_S1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1(*2)" after disassembly {
  All names   : _Z15TestSearchArrayISt18_Fwd_list_iteratorIiEPFS1_S1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1
                _Z15TestSearchArrayISt18_Fwd_list_iteratorIiEPFS1_S1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/binary_search.cpp/1
  Number      : 289
  State       : disassembled
  Address     : 0xc120
  Size        : 0x21d
  MaxSize     : 0x220
  Offset      : 0xc120
  Section     : .text
  Orc Section : .local.text._Z15TestSearchArrayISt18_Fwd_list_iteratorIiEPFS1_S1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0288:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	movq	%rcx, %r14
    00000007: 	pushq	%r13
    00000009: 	movq	%rsi, %r13
    0000000c: 	pushq	%r12
    0000000e: 	pushq	%rbp
    0000000f: 	pushq	%rbx
    00000010: 	movq	%rdi, %rbx
    00000013: 	movl	$0x1000, %edi
    00000018: 	subq	$0x28, %rsp
    0000001c: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000023: 	movq	%rdx, 0x8(%rsp)
    00000028: 	movq	%r8, 0x18(%rsp)
    0000002d: 	movb	%r9b, 0x17(%rsp)
    00000032: 	callq	_Znwm@PLT # Offset: 50
    00000037: 	movq	%rax, %r12
    0000003a: 	movl	$0x0, (%rax)
    00000040: 	addq	$0x4, %rax
    00000044: 	leaq	0x1000(%r12), %rsi
    0000004c: 	cmpq	%rsi, %rax
    0000004f: 	je	.Ltmp1786 # Offset: 79
    00000051: 	movq	$0x0, 0x4(%r12)
    0000005a: 	leaq	0xc(%r12), %rdi
    0000005f: 	movq	$0x0, 0xff8(%r12)
    0000006b: 	andq	$-0x8, %rdi
    0000006f: 	subq	%rdi, %rax
    00000072: 	movq	%rax, %rcx
    00000075: 	xorl	%eax, %eax
    00000077: 	addl	$0xffc, %ecx
    0000007d: 	shrl	$0x3, %ecx
    00000080: 	rep		stosq	%rax, %es:(%rdi)
.Ltmp1786:
    00000083: 	movabsq	$0x5851f42d4c957f2d, %r8
    0000008d: 	movq	%r12, %rcx
    00000090: 	movabsq	$0x14057b7ef767814f, %rdi
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1789:
    000000a0: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000000a7: 	imulq	%r8, %rax
    000000ab: 	addq	%rdi, %rax
    000000ae: 	movq	%rax, %rdx
    000000b1: 	movq	%rax, %r9
    000000b4: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000000bb: 	shrq	$0x14, %rdx
    000000bf: 	shlq	$0x17, %r9
    000000c3: 	xorq	%r9, %rdx
    000000c6: 	xorq	%rdx, %rax
    000000c9: 	xorl	%edx, %edx
    000000cb: 	divq	0x8(%rsp)
    000000d0: 	testq	%rdx, %rdx
    000000d3: 	leaq	-0x1(%rdx), %rax
    000000d7: 	movq	%rbx, %rdx
    000000da: 	je	.Ltmp1787 # Offset: 218
    000000dc: 	nopl	(%rax) # Size: 4
.Ltmp1788:
    000000e0: 	movq	(%rdx), %rdx
    000000e3: 	subq	$0x1, %rax
    000000e7: 	jae	.Ltmp1788 # Offset: 231
.Ltmp1787:
    000000e9: 	movl	0x8(%rdx), %eax
    000000ec: 	addq	$0x4, %rcx
    000000f0: 	movl	%eax, -0x4(%rcx)
    000000f3: 	cmpq	%rcx, %rsi
    000000f6: 	jne	.Ltmp1789 # Offset: 246
    000000f8: 	callq	clock@PLT # Offset: 248
    000000fd: 	xorl	%r15d, %r15d
    00000100: 	xorl	%ebp, %ebp
    00000102: 	movq	%rax, start_time(%rip)
.Ltmp1793:
    00000109: 	leaq	0xc8(%rbp), %rax
    00000110: 	cmpb	$0x0, 0x17(%rsp)
    00000115: 	movq	%rax, (%rsp)
    00000119: 	jne	.Ltmp1790 # Offset: 281
    0000011f: 	nop # Size: 1
.Ltmp1791:
    00000120: 	movq	%rbp, %rax
    00000123: 	movq	%r13, %rsi
    00000126: 	addq	$0x1, %rbp
    0000012a: 	movq	%rbx, %rdi
    0000012d: 	andl	$0x3ff, %eax
    00000132: 	movl	(%r12,%rax,4), %edx
    00000136: 	callq	*%r14 # Offset: 310
    00000139: 	testq	%rax, %rax
    0000013c: 	movl	$0x1, %eax
    00000141: 	cmovel	%eax, %r15d
    00000145: 	cmpq	(%rsp), %rbp
    00000149: 	jne	.Ltmp1791 # Offset: 329
.Ltmp1795:
    0000014b: 	callq	clock@PLT # Offset: 331
    00000150: 	movsd	gMinimumTimeTarget(%rip), %xmm1
    00000158: 	pxor	%xmm0, %xmm0
    0000015c: 	movq	%rax, end_time(%rip)
    00000163: 	subq	start_time(%rip), %rax
    0000016a: 	cvtsi2sd	%rax, %xmm0
    0000016f: 	divsd	DATAat0x34410(%rip), %xmm0
    00000177: 	comisd	%xmm0, %xmm1
    0000017b: 	jbe	.Ltmp1792 # Offset: 379
    0000017d: 	cmpq	$0x5f5e0ff, %rbp
    00000184: 	jbe	.Ltmp1793 # Offset: 388
.Ltmp1792:
    00000186: 	movq	0x18(%rsp), %rdx
    0000018b: 	movq	0x8(%rsp), %rdi
    00000190: 	movq	%rbp, %rsi
    00000193: 	callq	_Z13record_resultdmmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 403
    00000198: 	testb	%r15b, %r15b
    0000019b: 	jne	.Ltmp1794 # Offset: 411
.Ltmp1796:
    0000019d: 	addq	$0x28, %rsp
    000001a1: 	movq	%r12, %rdi
    000001a4: 	movl	$0x1000, %esi
    000001a9: 	popq	%rbx
    000001aa: 	popq	%rbp
    000001ab: 	popq	%r12
    000001ad: 	popq	%r13
    000001af: 	popq	%r14
    000001b1: 	popq	%r15
    000001b3: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 435
    000001b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1790:
    000001c0: 	movq	%rbp, %rax
    000001c3: 	movq	%r13, %rsi
    000001c6: 	addq	$0x1, %rbp
    000001ca: 	movq	%rbx, %rdi
    000001cd: 	andl	$0x3ff, %eax
    000001d2: 	movl	(%r12,%rax,4), %edx
    000001d6: 	callq	*%r14 # Offset: 470
    000001d9: 	cmpq	(%rsp), %rbp
    000001dd: 	jne	.Ltmp1790 # Offset: 477
    000001df: 	jmp	.Ltmp1795 # Offset: 479
.Ltmp1794:
    000001e4: 	movq	0x18(%rsp), %rax
    000001e9: 	leaq	DATAat0x34137(%rip), %rsi
    000001f0: 	movl	$0x1, %edi
    000001f5: 	movq	(%rax), %rdx
    000001f8: 	xorl	%eax, %eax
    000001fa: 	callq	__printf_chk@PLT # Offset: 506
    000001ff: 	jmp	.Ltmp1796 # Offset: 511
    00000201: 	endbr64
    00000205: 	movq	%rax, %rbp
    00000208: 	movq	%r12, %rdi
    0000020b: 	movl	$0x1000, %esi
    00000210: 	callq	_ZdlPvm@PLT # Offset: 528
    00000215: 	movq	%rbp, %rdi
    00000218: 	callq	_Unwind_Resume@PLT # Offset: 536
DWARF CFI Instructions:
    <empty>
End of Function "_Z15TestSearchArrayISt18_Fwd_list_iteratorIiEPFS1_S1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1(*2)"

Binary Function "_Z15TestSearchArrayISt18_Fwd_list_iteratorIfEPFS1_S1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1(*2)" after disassembly {
  All names   : _Z15TestSearchArrayISt18_Fwd_list_iteratorIfEPFS1_S1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1
                _Z15TestSearchArrayISt18_Fwd_list_iteratorIfEPFS1_S1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/binary_search.cpp/1
  Number      : 290
  State       : disassembled
  Address     : 0xc340
  Size        : 0x22f
  MaxSize     : 0x230
  Offset      : 0xc340
  Section     : .text
  Orc Section : .local.text._Z15TestSearchArrayISt18_Fwd_list_iteratorIfEPFS1_S1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0289:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	movq	%rcx, %r14
    00000007: 	pushq	%r13
    00000009: 	movq	%rsi, %r13
    0000000c: 	pushq	%r12
    0000000e: 	pushq	%rbp
    0000000f: 	pushq	%rbx
    00000010: 	movq	%rdi, %rbx
    00000013: 	movl	$0x1000, %edi
    00000018: 	subq	$0x28, %rsp
    0000001c: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000023: 	movq	%rdx, 0x8(%rsp)
    00000028: 	movq	%r8, 0x18(%rsp)
    0000002d: 	movb	%r9b, 0x17(%rsp)
    00000032: 	callq	_Znwm@PLT # Offset: 50
    00000037: 	movq	%rax, %r12
    0000003a: 	movl	$0x0, (%rax)
    00000040: 	addq	$0x4, %rax
    00000044: 	leaq	0x1000(%r12), %rsi
    0000004c: 	cmpq	%rsi, %rax
    0000004f: 	je	.Ltmp1797 # Offset: 79
    00000051: 	movq	$0x0, 0x4(%r12)
    0000005a: 	leaq	0xc(%r12), %rdi
    0000005f: 	movq	$0x0, 0xff8(%r12)
    0000006b: 	andq	$-0x8, %rdi
    0000006f: 	subq	%rdi, %rax
    00000072: 	movq	%rax, %rcx
    00000075: 	xorl	%eax, %eax
    00000077: 	addl	$0xffc, %ecx
    0000007d: 	shrl	$0x3, %ecx
    00000080: 	rep		stosq	%rax, %es:(%rdi)
.Ltmp1797:
    00000083: 	movabsq	$0x5851f42d4c957f2d, %r8
    0000008d: 	movq	%r12, %rcx
    00000090: 	movabsq	$0x14057b7ef767814f, %rdi
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1800:
    000000a0: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000000a7: 	imulq	%r8, %rax
    000000ab: 	addq	%rdi, %rax
    000000ae: 	movq	%rax, %rdx
    000000b1: 	movq	%rax, %r9
    000000b4: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000000bb: 	shrq	$0x14, %rdx
    000000bf: 	shlq	$0x17, %r9
    000000c3: 	xorq	%r9, %rdx
    000000c6: 	xorq	%rdx, %rax
    000000c9: 	xorl	%edx, %edx
    000000cb: 	divq	0x8(%rsp)
    000000d0: 	testq	%rdx, %rdx
    000000d3: 	leaq	-0x1(%rdx), %rax
    000000d7: 	movq	%rbx, %rdx
    000000da: 	je	.Ltmp1798 # Offset: 218
    000000dc: 	nopl	(%rax) # Size: 4
.Ltmp1799:
    000000e0: 	movq	(%rdx), %rdx
    000000e3: 	subq	$0x1, %rax
    000000e7: 	jae	.Ltmp1799 # Offset: 231
.Ltmp1798:
    000000e9: 	movss	0x8(%rdx), %xmm0
    000000ee: 	addq	$0x4, %rcx
    000000f2: 	movss	%xmm0, -0x4(%rcx)
    000000f7: 	cmpq	%rcx, %rsi
    000000fa: 	jne	.Ltmp1800 # Offset: 250
    000000fc: 	callq	clock@PLT # Offset: 252
    00000101: 	xorl	%r15d, %r15d
    00000104: 	xorl	%ebp, %ebp
    00000106: 	movq	%rax, start_time(%rip)
.Ltmp1804:
    0000010d: 	leaq	0xc8(%rbp), %rax
    00000114: 	cmpb	$0x0, 0x17(%rsp)
    00000119: 	movq	%rax, (%rsp)
    0000011d: 	jne	.Ltmp1801 # Offset: 285
    00000123: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1802:
    00000128: 	movq	%rbp, %rax
    0000012b: 	movq	%r13, %rsi
    0000012e: 	addq	$0x1, %rbp
    00000132: 	movq	%rbx, %rdi
    00000135: 	andl	$0x3ff, %eax
    0000013a: 	movss	(%r12,%rax,4), %xmm0
    00000140: 	callq	*%r14 # Offset: 320
    00000143: 	testq	%rax, %rax
    00000146: 	movl	$0x1, %eax
    0000014b: 	cmovel	%eax, %r15d
    0000014f: 	cmpq	(%rsp), %rbp
    00000153: 	jne	.Ltmp1802 # Offset: 339
.Ltmp1806:
    00000155: 	callq	clock@PLT # Offset: 341
    0000015a: 	movsd	gMinimumTimeTarget(%rip), %xmm1
    00000162: 	pxor	%xmm0, %xmm0
    00000166: 	movq	%rax, end_time(%rip)
    0000016d: 	subq	start_time(%rip), %rax
    00000174: 	cvtsi2sd	%rax, %xmm0
    00000179: 	divsd	DATAat0x34410(%rip), %xmm0
    00000181: 	comisd	%xmm0, %xmm1
    00000185: 	jbe	.Ltmp1803 # Offset: 389
    00000187: 	cmpq	$0x5f5e0ff, %rbp
    0000018e: 	jbe	.Ltmp1804 # Offset: 398
.Ltmp1803:
    00000194: 	movq	0x18(%rsp), %rdx
    00000199: 	movq	0x8(%rsp), %rdi
    0000019e: 	movq	%rbp, %rsi
    000001a1: 	callq	_Z13record_resultdmmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 417
    000001a6: 	testb	%r15b, %r15b
    000001a9: 	jne	.Ltmp1805 # Offset: 425
.Ltmp1807:
    000001ab: 	addq	$0x28, %rsp
    000001af: 	movq	%r12, %rdi
    000001b2: 	movl	$0x1000, %esi
    000001b7: 	popq	%rbx
    000001b8: 	popq	%rbp
    000001b9: 	popq	%r12
    000001bb: 	popq	%r13
    000001bd: 	popq	%r14
    000001bf: 	popq	%r15
    000001c1: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 449
    000001c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1801:
    000001d0: 	movq	%rbp, %rax
    000001d3: 	movq	%r13, %rsi
    000001d6: 	addq	$0x1, %rbp
    000001da: 	movq	%rbx, %rdi
    000001dd: 	andl	$0x3ff, %eax
    000001e2: 	movss	(%r12,%rax,4), %xmm0
    000001e8: 	callq	*%r14 # Offset: 488
    000001eb: 	cmpq	(%rsp), %rbp
    000001ef: 	jne	.Ltmp1801 # Offset: 495
    000001f1: 	jmp	.Ltmp1806 # Offset: 497
.Ltmp1805:
    000001f6: 	movq	0x18(%rsp), %rax
    000001fb: 	leaq	DATAat0x34137(%rip), %rsi
    00000202: 	movl	$0x1, %edi
    00000207: 	movq	(%rax), %rdx
    0000020a: 	xorl	%eax, %eax
    0000020c: 	callq	__printf_chk@PLT # Offset: 524
    00000211: 	jmp	.Ltmp1807 # Offset: 529
    00000213: 	endbr64
    00000217: 	movq	%rax, %rbp
    0000021a: 	movq	%r12, %rdi
    0000021d: 	movl	$0x1000, %esi
    00000222: 	callq	_ZdlPvm@PLT # Offset: 546
    00000227: 	movq	%rbp, %rdi
    0000022a: 	callq	_Unwind_Resume@PLT # Offset: 554
DWARF CFI Instructions:
    <empty>
End of Function "_Z15TestSearchArrayISt18_Fwd_list_iteratorIfEPFS1_S1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1(*2)"

Binary Function "_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_" after disassembly {
  Number      : 291
  State       : disassembled
  Address     : 0xc570
  Size        : 0x145
  MaxSize     : 0x150
  Offset      : 0xc570
  Section     : .text
  Orc Section : .local.text._ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0290:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	movq	%rdi, %r12
    0000000d: 	pushq	%rbp
    0000000e: 	movq	%rdx, %rbp
    00000011: 	pushq	%rbx
    00000012: 	leaq	0x10(%rdi), %rbx
    00000016: 	subq	$0x10, %rsp
    0000001a: 	movq	0x8(%rsi), %r13
    0000001e: 	movq	%fs:0x28, %rax
    00000027: 	movq	%rax, 0x8(%rsp)
    0000002c: 	xorl	%eax, %eax
    0000002e: 	movq	%rbx, (%rdi)
    00000031: 	movq	(%rsi), %r14
    00000034: 	movq	%r14, %rax
    00000037: 	addq	%r13, %rax
    0000003a: 	je	.Ltmp1808 # Offset: 58
    0000003c: 	testq	%r14, %r14
    0000003f: 	je	.Ltmp1809 # Offset: 63
.Ltmp1808:
    00000045: 	movq	%r13, (%rsp)
    00000049: 	cmpq	$0xf, %r13
    0000004d: 	ja	.Ltmp1810 # Offset: 77
    0000004f: 	cmpq	$0x1, %r13
    00000053: 	jne	.Ltmp1811 # Offset: 83
    00000055: 	movzbl	(%r14), %eax
    00000059: 	movb	%al, 0x10(%r12)
    0000005e: 	movq	%rbx, %rax
.Ltmp1815:
    00000061: 	movq	%r13, 0x8(%r12)
    00000066: 	movq	%rbp, %rdi
    00000069: 	movb	$0x0, (%rax,%r13)
    0000006e: 	callq	strlen@PLT # Offset: 110
    00000073: 	movq	%rax, %rdx
    00000076: 	movabsq	$0x3fffffffffffffff, %rax
    00000080: 	subq	0x8(%r12), %rax
    00000085: 	cmpq	%rax, %rdx
    00000088: 	ja	.Ltmp1812 # Offset: 136
    0000008a: 	movq	%rbp, %rsi
    0000008d: 	movq	%r12, %rdi
    00000090: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 144
    00000095: 	movq	0x8(%rsp), %rax
    0000009a: 	subq	%fs:0x28, %rax
    000000a3: 	jne	.Ltmp1813 # Offset: 163
    000000a5: 	addq	$0x10, %rsp
    000000a9: 	movq	%r12, %rax
    000000ac: 	popq	%rbx
    000000ad: 	popq	%rbp
    000000ae: 	popq	%r12
    000000b0: 	popq	%r13
    000000b2: 	popq	%r14
    000000b4: 	retq # Offset: 180
    000000b5: 	nopl	(%rax) # Size: 3
.Ltmp1811:
    000000b8: 	testq	%r13, %r13
    000000bb: 	jne	.Ltmp1814 # Offset: 187
    000000bd: 	movq	%rbx, %rax
    000000c0: 	jmp	.Ltmp1815 # Offset: 192
    000000c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1810:
    000000c8: 	movq	%r12, %rdi
    000000cb: 	movq	%rsp, %rsi
    000000ce: 	xorl	%edx, %edx
    000000d0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 208
    000000d5: 	movq	%rax, (%r12)
    000000d9: 	movq	%rax, %rdi
    000000dc: 	movq	(%rsp), %rax
    000000e0: 	movq	%rax, 0x10(%r12)
.Ltmp1816:
    000000e5: 	movq	%r13, %rdx
    000000e8: 	movq	%r14, %rsi
    000000eb: 	callq	memcpy@PLT # Offset: 235
    000000f0: 	movq	(%rsp), %r13
    000000f4: 	movq	(%r12), %rax
    000000f8: 	jmp	.Ltmp1815 # Offset: 248
.Ltmp1809:
    000000fd: 	leaq	DATAat0x34008(%rip), %rdi
    00000104: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 260
.Ltmp1812:
    00000109: 	leaq	DATAat0x3414b(%rip), %rdi
    00000110: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 272
.Ltmp1813:
    00000115: 	callq	__stack_chk_fail@PLT # Offset: 277
.Ltmp1814:
    0000011a: 	movq	%rbx, %rdi
    0000011d: 	jmp	.Ltmp1816 # Offset: 285
    0000011f: 	endbr64
    00000123: 	movq	%rax, %rbp
    00000126: 	movq	(%r12), %rdi
    0000012a: 	cmpq	%rdi, %rbx
    0000012d: 	je	.Ltmp1817 # Offset: 301
    0000012f: 	movq	0x10(%r12), %rsi
    00000134: 	addq	$0x1, %rsi
    00000138: 	callq	_ZdlPvm@PLT # Offset: 312
.Ltmp1817:
    0000013d: 	movq	%rbp, %rdi
    00000140: 	callq	_Unwind_Resume@PLT # Offset: 320
DWARF CFI Instructions:
    <empty>
End of Function "_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_"

Binary Function "_Z15TestSearchArrayIPaPFS0_S0_S0_aEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 292
  State       : disassembled
  Address     : 0xc6c0
  Size        : 0x1d4
  MaxSize     : 0x1e0
  Offset      : 0xc6c0
  Section     : .text
  Orc Section : .local.text._Z15TestSearchArrayIPaPFS0_S0_S0_aEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0291:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rcx, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	movl	$0x400, %edi
    00000015: 	pushq	%r12
    00000017: 	pushq	%rbp
    00000018: 	pushq	%rbx
    00000019: 	movq	%rsi, %rbx
    0000001c: 	subq	$0x28, %rsp
    00000020: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000027: 	movq	%r8, 0x18(%rsp)
    0000002c: 	movq	%rdx, 0x10(%rsp)
    00000031: 	movb	%r9b, (%rsp)
    00000035: 	callq	_Znwm@PLT # Offset: 53
    0000003a: 	movabsq	$0x5851f42d4c957f2d, %r8
    00000044: 	leaq	0x9(%rax), %rdi
    00000048: 	movb	$0x0, (%rax)
    0000004b: 	movq	%rax, %r14
    0000004e: 	leaq	0x400(%rax), %rsi
    00000055: 	andq	$-0x8, %rdi
    00000059: 	movq	$0x0, 0x1(%rax)
    00000061: 	movq	$0x0, 0x3f8(%rax)
    0000006c: 	subl	%edi, %eax
    0000006e: 	leal	0x400(%rax), %ecx
    00000074: 	xorl	%eax, %eax
    00000076: 	shrl	$0x3, %ecx
    00000079: 	rep		stosq	%rax, %es:(%rdi)
    0000007c: 	movq	%r14, %rcx
    0000007f: 	movabsq	$0x14057b7ef767814f, %rdi
    00000089: 	nopl	(%rax) # Size: 7
.Ltmp1818:
    00000090: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    00000097: 	addq	$0x1, %rcx
    0000009b: 	imulq	%r8, %rax
    0000009f: 	addq	%rdi, %rax
    000000a2: 	movq	%rax, %rdx
    000000a5: 	movq	%rax, %r9
    000000a8: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000000af: 	shrq	$0x14, %rdx
    000000b3: 	shlq	$0x17, %r9
    000000b7: 	xorq	%r9, %rdx
    000000ba: 	xorq	%rdx, %rax
    000000bd: 	xorl	%edx, %edx
    000000bf: 	divq	0x10(%rsp)
    000000c4: 	movzbl	(%r13,%rdx), %eax
    000000ca: 	movb	%al, -0x1(%rcx)
    000000cd: 	cmpq	%rcx, %rsi
    000000d0: 	jne	.Ltmp1818 # Offset: 208
    000000d2: 	callq	clock@PLT # Offset: 210
    000000d7: 	xorl	%r12d, %r12d
    000000da: 	xorl	%ebp, %ebp
    000000dc: 	movq	%rax, start_time(%rip)
    000000e3: 	movzbl	(%rsp), %eax
    000000e7: 	xorl	$0x1, %eax
    000000ea: 	movb	%al, 0xf(%rsp)
.Ltmp1821:
    000000ee: 	leaq	0xc8(%rbp), %rax
    000000f5: 	movq	%rax, (%rsp)
    000000f9: 	nopl	(%rax) # Size: 7
.Ltmp1819:
    00000100: 	movq	%rbp, %rax
    00000103: 	movq	%rbx, %rsi
    00000106: 	addq	$0x1, %rbp
    0000010a: 	movq	%r13, %rdi
    0000010d: 	andl	$0x3ff, %eax
    00000112: 	movsbl	(%r14,%rax), %edx
    00000117: 	callq	*%r15 # Offset: 279
    0000011a: 	cmpq	%rax, %rbx
    0000011d: 	sete	%al
    00000120: 	andb	0xf(%rsp), %al
    00000124: 	cmovnel	%eax, %r12d
    00000128: 	cmpq	(%rsp), %rbp
    0000012c: 	jne	.Ltmp1819 # Offset: 300
    0000012e: 	callq	clock@PLT # Offset: 302
    00000133: 	movsd	gMinimumTimeTarget(%rip), %xmm1
    0000013b: 	pxor	%xmm0, %xmm0
    0000013f: 	movq	%rax, end_time(%rip)
    00000146: 	subq	start_time(%rip), %rax
    0000014d: 	cvtsi2sd	%rax, %xmm0
    00000152: 	divsd	DATAat0x34410(%rip), %xmm0
    0000015a: 	comisd	%xmm0, %xmm1
    0000015e: 	jbe	.Ltmp1820 # Offset: 350
    00000160: 	cmpq	$0x5f5e0ff, %rbp
    00000167: 	jbe	.Ltmp1821 # Offset: 359
.Ltmp1820:
    00000169: 	movq	0x18(%rsp), %rdx
    0000016e: 	movq	0x10(%rsp), %rdi
    00000173: 	movq	%rbp, %rsi
    00000176: 	callq	_Z13record_resultdmmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 374
    0000017b: 	testb	%r12b, %r12b
    0000017e: 	jne	.Ltmp1822 # Offset: 382
.Ltmp1823:
    00000180: 	addq	$0x28, %rsp
    00000184: 	movq	%r14, %rdi
    00000187: 	movl	$0x400, %esi
    0000018c: 	popq	%rbx
    0000018d: 	popq	%rbp
    0000018e: 	popq	%r12
    00000190: 	popq	%r13
    00000192: 	popq	%r14
    00000194: 	popq	%r15
    00000196: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 406
.Ltmp1822:
    0000019b: 	movq	0x18(%rsp), %rax
    000001a0: 	leaq	DATAat0x34137(%rip), %rsi
    000001a7: 	movl	$0x1, %edi
    000001ac: 	movq	(%rax), %rdx
    000001af: 	xorl	%eax, %eax
    000001b1: 	callq	__printf_chk@PLT # Offset: 433
    000001b6: 	jmp	.Ltmp1823 # Offset: 438
    000001b8: 	endbr64
    000001bc: 	movq	%rax, %rbp
    000001bf: 	movq	%r14, %rdi
    000001c2: 	movl	$0x400, %esi
    000001c7: 	callq	_ZdlPvm@PLT # Offset: 455
    000001cc: 	movq	%rbp, %rdi
    000001cf: 	callq	_Unwind_Resume@PLT # Offset: 463
DWARF CFI Instructions:
    <empty>
End of Function "_Z15TestSearchArrayIPaPFS0_S0_S0_aEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z18quicksort2_forwardIPaEvT_S1_" after disassembly {
  Number      : 293
  State       : disassembled
  Address     : 0xc8a0
  Size        : 0x120
  MaxSize     : 0x120
  Offset      : 0xc8a0
  Section     : .text
  Orc Section : .local.text._Z18quicksort2_forwardIPaEvT_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0292:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp1824 # Offset: 7
    0000000d: 	leaq	0x1(%rdi), %r8
    00000011: 	pushq	%r12
    00000013: 	movq	%rdi, %r12
    00000016: 	pushq	%rbp
    00000017: 	movq	%rsi, %rbp
    0000001a: 	pushq	%rbx
    0000001b: 	cmpq	%r8, %rsi
    0000001e: 	je	.Ltmp1825 # Offset: 30
.Ltmp1832:
    00000024: 	leaq	0x2(%r12), %rax
    00000029: 	cmpq	%rax, %rbp
    0000002c: 	je	.Ltmp1826 # Offset: 44
    00000032: 	movzwl	(%r12), %edx
    00000037: 	movzbl	0x1(%r12), %ecx
    0000003d: 	movzbl	(%r12), %eax
    00000042: 	rolw	$0x8, %dx
    00000046: 	cmpb	%al, %cl
    00000048: 	jge	.Ltmp1827 # Offset: 72
    0000004a: 	movw	%dx, (%r12)
    0000004f: 	movl	%ecx, %edx
    00000051: 	movl	%eax, %ecx
    00000053: 	movl	%edx, %eax
.Ltmp1827:
    00000055: 	movzbl	0x2(%r12), %edx
    0000005b: 	cmpb	%dl, %cl
    0000005d: 	jle	.Ltmp1828 # Offset: 93
    0000005f: 	movb	%cl, 0x2(%r12)
    00000064: 	movl	%edx, %ecx
    00000066: 	movb	%dl, 0x1(%r12)
    0000006b: 	cmpb	%al, %dl
    0000006d: 	jge	.Ltmp1828 # Offset: 109
    0000006f: 	movb	%al, 0x1(%r12)
    00000074: 	movl	%eax, %ecx
    00000076: 	movb	%dl, (%r12)
.Ltmp1828:
    0000007a: 	leaq	0x3(%r12), %rax
    0000007f: 	cmpq	%rax, %rbp
    00000082: 	je	.Ltmp1825 # Offset: 130
    00000084: 	leaq	0x1(%r8), %rax
    00000088: 	movq	%r8, %rbx
    0000008b: 	cmpq	%rax, %rbp
    0000008e: 	je	.Ltmp1829 # Offset: 142
    00000090: 	movl	$0x1, %esi
    00000095: 	nopl	(%rax) # Size: 3
.Ltmp1831:
    00000098: 	movzbl	(%rax), %edx
    0000009b: 	cmpb	%cl, %dl
    0000009d: 	jge	.Ltmp1830 # Offset: 157
    0000009f: 	movzbl	(%rbx), %edi
    000000a2: 	addq	$0x1, %rsi
    000000a6: 	addq	$0x1, %rbx
    000000aa: 	movb	%dil, (%rax)
    000000ad: 	movb	%dl, -0x1(%rbx)
.Ltmp1830:
    000000b0: 	addq	$0x1, %rax
    000000b4: 	cmpq	%rbp, %rax
    000000b7: 	jne	.Ltmp1831 # Offset: 183
    000000b9: 	leaq	0x1(%rbp), %rax
    000000bd: 	subq	%r8, %rax
    000000c0: 	subq	%rsi, %rax
    000000c3: 	cmpq	%rax, %rsi
    000000c6: 	jbe	.Ltmp1829 # Offset: 198
    000000c8: 	movq	%rbp, %rsi
    000000cb: 	movq	%rbx, %rdi
    000000ce: 	movq	%rbx, %rbp
    000000d1: 	callq	_Z18quicksort2_forwardIPaEvT_S1_ # Offset: 209
.Ltmp1833:
    000000d6: 	cmpq	%r12, %rbp
    000000d9: 	je	.Ltmp1825 # Offset: 217
    000000db: 	leaq	0x1(%r12), %r8
    000000e0: 	cmpq	%rbp, %r8
    000000e3: 	jne	.Ltmp1832 # Offset: 227
.Ltmp1825:
    000000e9: 	popq	%rbx
    000000ea: 	popq	%rbp
    000000eb: 	popq	%r12
    000000ed: 	retq # Offset: 237
    000000ee: 	nop # Size: 2
.Ltmp1829:
    000000f0: 	movq	%r12, %rdi
    000000f3: 	movq	%rbx, %rsi
    000000f6: 	movq	%rbx, %r12
    000000f9: 	callq	_Z18quicksort2_forwardIPaEvT_S1_ # Offset: 249
    000000fe: 	jmp	.Ltmp1833 # Offset: 254
.Ltmp1826:
    00000100: 	movzwl	(%r12), %eax
    00000105: 	movzbl	(%r12), %esi
    0000010a: 	rolw	$0x8, %ax
    0000010e: 	cmpb	%sil, 0x1(%r12)
    00000113: 	jge	.Ltmp1825 # Offset: 275
    00000115: 	movw	%ax, (%r12)
    0000011a: 	popq	%rbx
    0000011b: 	popq	%rbp
    0000011c: 	popq	%r12
    0000011e: 	retq # Offset: 286
.Ltmp1824:
    0000011f: 	retq # Offset: 287
DWARF CFI Instructions:
    <empty>
End of Function "_Z18quicksort2_forwardIPaEvT_S1_"

Binary Function "_Z13TestOneSearchIPaPFS0_S0_S0_aEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 294
  State       : disassembled
  Address     : 0xc9c0
  Size        : 0x56c
  MaxSize     : 0x570
  Offset      : 0xc9c0
  Section     : .text
  Orc Section : .local.text._Z13TestOneSearchIPaPFS0_S0_S0_aEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0293:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%r8, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdx, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rsi, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	movl	%r9d, %ebx
    0000001d: 	subq	$0x68, %rsp
    00000021: 	movq	%rcx, 0x8(%rsp)
    00000026: 	movq	%fs:0x28, %rax
    0000002f: 	movq	%rax, 0x58(%rsp)
    00000034: 	xorl	%eax, %eax
    00000036: 	cmpq	%rsi, %rdi
    00000039: 	je	.Ltmp1834 # Offset: 57
    0000003b: 	movq	%rsi, %rdx
    0000003e: 	movl	$0x5, %esi
    00000043: 	subq	%rdi, %rdx
    00000046: 	callq	memset@PLT # Offset: 70
.Ltmp1834:
    0000004b: 	leaq	0x30(%rsp), %r14
    00000050: 	leaq	DATAat0x34160(%rip), %rdx
    00000057: 	movq	%r15, %rsi
    0000005a: 	movzbl	%bl, %ebx
    0000005d: 	movq	%r14, %rdi
    00000060: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 96
    00000065: 	movq	0x8(%rsp), %rcx
    0000006a: 	movl	%ebx, %r9d
    0000006d: 	movq	%r14, %r8
    00000070: 	movq	%r12, %rdx
    00000073: 	movq	%rbp, %rsi
    00000076: 	movq	%r13, %rdi
    00000079: 	callq	_Z15TestSearchArrayIPaPFS0_S0_S0_aEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 121
    0000007e: 	movq	0x30(%rsp), %rdi
    00000083: 	leaq	0x40(%rsp), %rax
    00000088: 	movq	%rax, (%rsp)
    0000008c: 	cmpq	%rax, %rdi
    0000008f: 	je	.Ltmp1835 # Offset: 143
    00000091: 	movq	0x40(%rsp), %rax
    00000096: 	leaq	0x1(%rax), %rsi
    0000009a: 	callq	_ZdlPvm@PLT # Offset: 154
.Ltmp1835:
    0000009f: 	cmpq	$0x9, %r12
    000000a3: 	jbe	.Ltmp1836 # Offset: 163
    000000a9: 	movabsq	$-0x3333333333333333, %rdx
    000000b3: 	movq	%r12, %rax
    000000b6: 	mulq	%rdx
    000000b9: 	shrq	$0x3, %rdx
.Ltmp1854:
    000000bd: 	movq	%r13, %rsi
    000000c0: 	xorl	%ecx, %ecx
    000000c2: 	xorl	%edi, %edi
    000000c4: 	cmpq	$0x0, %r12
    000000c8: 	jbe	.Ltmp1837 # Offset: 200
    000000ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1840:
    000000d0: 	xorl	%eax, %eax
    000000d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1839:
    000000d8: 	addq	$0x1, %rax
    000000dc: 	addq	$0x1, %rsi
    000000e0: 	addq	$0x1, %rcx
    000000e4: 	movb	%dil, -0x1(%rsi)
    000000e8: 	cmpq	%rdx, %rax
    000000eb: 	jae	.Ltmp1838 # Offset: 235
    000000ed: 	cmpq	%rcx, %r12
    000000f0: 	ja	.Ltmp1839 # Offset: 240
.Ltmp1838:
    000000f2: 	addl	$0x1, %edi
    000000f5: 	cmpq	%rcx, %r12
    000000f8: 	ja	.Ltmp1840 # Offset: 248
.Ltmp1837:
    000000fa: 	movq	(%rsp), %rax
    000000fe: 	movq	(%r15), %r9
    00000101: 	movq	0x8(%r15), %r8
    00000105: 	movq	%rax, 0x30(%rsp)
    0000010a: 	movq	%r9, %rax
    0000010d: 	addq	%r8, %rax
    00000110: 	je	.Ltmp1841 # Offset: 272
    00000112: 	testq	%r9, %r9
    00000115: 	je	.Ltmp1842 # Offset: 277
.Ltmp1841:
    0000011b: 	movq	%r8, 0x28(%rsp)
    00000120: 	cmpq	$0xf, %r8
    00000124: 	ja	.Ltmp1843 # Offset: 292
    0000012a: 	cmpq	$0x1, %r8
    0000012e: 	jne	.Ltmp1844 # Offset: 302
    00000134: 	movzbl	(%r9), %eax
    00000138: 	movb	%al, 0x40(%rsp)
    0000013c: 	movq	(%rsp), %rax
.Ltmp1853:
    00000140: 	movq	%r8, 0x38(%rsp)
    00000145: 	movb	$0x0, (%rax,%r8)
    0000014a: 	movabsq	$0x3fffffffffffffff, %rax
    00000154: 	subq	0x38(%rsp), %rax
    00000159: 	cmpq	$0x14, %rax
    0000015d: 	jbe	.Ltmp1845 # Offset: 349
    00000163: 	movl	$0x15, %edx
    00000168: 	leaq	DATAat0x3416e(%rip), %rsi
    0000016f: 	movq	%r14, %rdi
    00000172: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 370
    00000177: 	movq	0x8(%rsp), %rcx
    0000017c: 	movl	%ebx, %r9d
    0000017f: 	movq	%r14, %r8
    00000182: 	movq	%r12, %rdx
    00000185: 	movq	%rbp, %rsi
    00000188: 	movq	%r13, %rdi
    0000018b: 	callq	_Z15TestSearchArrayIPaPFS0_S0_S0_aEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 395
    00000190: 	movq	0x30(%rsp), %rdi
    00000195: 	cmpq	(%rsp), %rdi
    00000199: 	je	.Ltmp1846 # Offset: 409
    0000019b: 	movq	0x40(%rsp), %rax
    000001a0: 	leaq	0x1(%rax), %rsi
    000001a4: 	callq	_ZdlPvm@PLT # Offset: 420
.Ltmp1846:
    000001a9: 	cmpq	%rbp, %r13
    000001ac: 	je	.Ltmp1847 # Offset: 428
    000001b2: 	movq	%rbp, %rcx
    000001b5: 	movq	%r13, %rax
    000001b8: 	subq	%r13, %rcx
    000001bb: 	leaq	-0x1(%rcx), %rdx
    000001bf: 	cmpq	$0xe, %rdx
    000001c3: 	jbe	.Ltmp1848 # Offset: 451
    000001c9: 	movq	%rcx, %rdx
    000001cc: 	movdqa	DATAat0x34430(%rip), %xmm2
    000001d4: 	movdqa	DATAat0x34440(%rip), %xmm11
    000001dd: 	andq	$-0x10, %rdx
    000001e1: 	movdqa	DATAat0x34450(%rip), %xmm10
    000001ea: 	movdqa	DATAat0x34460(%rip), %xmm9
    000001f3: 	movdqa	DATAat0x34470(%rip), %xmm8
    000001fc: 	movdqa	DATAat0x34480(%rip), %xmm7
    00000204: 	addq	%r13, %rdx
    00000207: 	movdqa	DATAat0x34490(%rip), %xmm6
    0000020f: 	movdqa	DATAat0x344a0(%rip), %xmm5
    00000217: 	movdqa	DATAat0x344b0(%rip), %xmm4
    0000021f: 	movdqa	DATAat0x344c0(%rip), %xmm3
    00000227: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1849:
    00000230: 	movdqa	%xmm2, %xmm12
    00000235: 	addq	$0x10, %rax
    00000239: 	paddq	%xmm11, %xmm2
    0000023e: 	movdqa	%xmm12, %xmm1
    00000243: 	movdqa	%xmm12, %xmm0
    00000248: 	movdqa	%xmm12, %xmm13
    0000024d: 	paddq	%xmm10, %xmm1
    00000252: 	paddq	%xmm8, %xmm13
    00000257: 	shufps	$0x88, %xmm1, %xmm0
    0000025b: 	movdqa	%xmm12, %xmm1
    00000260: 	paddq	%xmm9, %xmm1
    00000265: 	shufps	$0x88, %xmm13, %xmm1
    0000026a: 	movdqa	%xmm0, %xmm13
    0000026f: 	punpcklwd	%xmm1, %xmm0
    00000273: 	punpckhwd	%xmm1, %xmm13
    00000278: 	movdqa	%xmm0, %xmm1
    0000027c: 	punpckhwd	%xmm13, %xmm1
    00000281: 	punpcklwd	%xmm13, %xmm0
    00000286: 	movdqa	%xmm12, %xmm13
    0000028b: 	punpcklwd	%xmm1, %xmm0
    0000028f: 	movdqa	%xmm12, %xmm1
    00000294: 	paddq	%xmm6, %xmm13
    00000299: 	paddq	%xmm7, %xmm1
    0000029d: 	pand	%xmm3, %xmm0
    000002a1: 	shufps	$0x88, %xmm13, %xmm1
    000002a6: 	movdqa	%xmm12, %xmm13
    000002ab: 	paddq	%xmm4, %xmm12
    000002b0: 	paddq	%xmm5, %xmm13
    000002b5: 	shufps	$0x88, %xmm12, %xmm13
    000002ba: 	movdqa	%xmm1, %xmm12
    000002bf: 	punpcklwd	%xmm13, %xmm1
    000002c4: 	punpckhwd	%xmm13, %xmm12
    000002c9: 	movdqa	%xmm1, %xmm13
    000002ce: 	punpckhwd	%xmm12, %xmm13
    000002d3: 	punpcklwd	%xmm12, %xmm1
    000002d8: 	punpcklwd	%xmm13, %xmm1
    000002dd: 	pand	%xmm3, %xmm1
    000002e1: 	packuswb	%xmm1, %xmm0
    000002e5: 	movups	%xmm0, -0x10(%rax)
    000002e9: 	cmpq	%rax, %rdx
    000002ec: 	jne	.Ltmp1849 # Offset: 748
    000002f2: 	movq	%rcx, %rdx
    000002f5: 	andq	$-0x10, %rdx
    000002f9: 	leaq	(%r13,%rdx), %rax
    000002fe: 	cmpq	%rdx, %rcx
    00000301: 	je	.Ltmp1847 # Offset: 769
.Ltmp1855:
    00000307: 	leaq	0x1(%rax), %rcx
    0000030b: 	movb	%dl, (%rax)
    0000030d: 	leaq	0x1(%rdx), %rsi
    00000311: 	cmpq	%rcx, %rbp
    00000314: 	je	.Ltmp1847 # Offset: 788
    0000031a: 	leaq	0x2(%rax), %rcx
    0000031e: 	movb	%sil, 0x1(%rax)
    00000322: 	leaq	0x2(%rdx), %rdi
    00000326: 	cmpq	%rcx, %rbp
    00000329: 	je	.Ltmp1847 # Offset: 809
    0000032f: 	leaq	0x3(%rax), %rcx
    00000333: 	movb	%dil, 0x2(%rax)
    00000337: 	leaq	0x3(%rdx), %rsi
    0000033b: 	cmpq	%rcx, %rbp
    0000033e: 	je	.Ltmp1847 # Offset: 830
    00000344: 	leaq	0x4(%rax), %rcx
    00000348: 	movb	%sil, 0x3(%rax)
    0000034c: 	leaq	0x4(%rdx), %rdi
    00000350: 	cmpq	%rcx, %rbp
    00000353: 	je	.Ltmp1847 # Offset: 851
    00000359: 	leaq	0x5(%rax), %rcx
    0000035d: 	movb	%dil, 0x4(%rax)
    00000361: 	leaq	0x5(%rdx), %rsi
    00000365: 	cmpq	%rcx, %rbp
    00000368: 	je	.Ltmp1847 # Offset: 872
    0000036e: 	leaq	0x6(%rax), %rcx
    00000372: 	movb	%sil, 0x5(%rax)
    00000376: 	leaq	0x6(%rdx), %rdi
    0000037a: 	cmpq	%rcx, %rbp
    0000037d: 	je	.Ltmp1847 # Offset: 893
    00000383: 	leaq	0x7(%rax), %rsi
    00000387: 	movb	%dil, 0x6(%rax)
    0000038b: 	leaq	0x7(%rdx), %rcx
    0000038f: 	cmpq	%rsi, %rbp
    00000392: 	je	.Ltmp1847 # Offset: 914
    00000394: 	movb	%cl, 0x7(%rax)
    00000397: 	leaq	0x8(%rax), %rcx
    0000039b: 	leaq	0x8(%rdx), %rsi
    0000039f: 	cmpq	%rcx, %rbp
    000003a2: 	je	.Ltmp1847 # Offset: 930
    000003a4: 	movb	%sil, 0x8(%rax)
    000003a8: 	leaq	0x9(%rax), %rsi
    000003ac: 	leaq	0x9(%rdx), %rcx
    000003b0: 	cmpq	%rsi, %rbp
    000003b3: 	je	.Ltmp1847 # Offset: 947
    000003b5: 	movb	%cl, 0x9(%rax)
    000003b8: 	leaq	0xa(%rax), %rcx
    000003bc: 	leaq	0xa(%rdx), %rsi
    000003c0: 	cmpq	%rcx, %rbp
    000003c3: 	je	.Ltmp1847 # Offset: 963
    000003c5: 	movb	%sil, 0xa(%rax)
    000003c9: 	leaq	0xb(%rax), %rsi
    000003cd: 	leaq	0xb(%rdx), %rcx
    000003d1: 	cmpq	%rsi, %rbp
    000003d4: 	je	.Ltmp1847 # Offset: 980
    000003d6: 	movb	%cl, 0xb(%rax)
    000003d9: 	leaq	0xc(%rax), %rcx
    000003dd: 	leaq	0xc(%rdx), %rsi
    000003e1: 	cmpq	%rcx, %rbp
    000003e4: 	je	.Ltmp1847 # Offset: 996
    000003e6: 	movb	%sil, 0xc(%rax)
    000003ea: 	leaq	0xd(%rax), %rsi
    000003ee: 	leaq	0xd(%rdx), %rcx
    000003f2: 	cmpq	%rsi, %rbp
    000003f5: 	je	.Ltmp1847 # Offset: 1013
    000003f7: 	movb	%cl, 0xd(%rax)
    000003fa: 	leaq	0xe(%rax), %rcx
    000003fe: 	addq	$0xe, %rdx
    00000402: 	cmpq	%rcx, %rbp
    00000405: 	je	.Ltmp1847 # Offset: 1029
    00000407: 	movb	%dl, 0xe(%rax)
    0000040a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1847:
    00000410: 	movq	%rbp, %rsi
    00000413: 	movq	%r13, %rdi
    00000416: 	callq	_Z18quicksort2_forwardIPaEvT_S1_ # Offset: 1046
    0000041b: 	leaq	DATAat0x34184(%rip), %rdx
    00000422: 	movq	%r15, %rsi
    00000425: 	movq	%r14, %rdi
    00000428: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1064
    0000042d: 	movq	0x8(%rsp), %rcx
    00000432: 	movl	%ebx, %r9d
    00000435: 	movq	%r14, %r8
    00000438: 	movq	%r12, %rdx
    0000043b: 	movq	%rbp, %rsi
    0000043e: 	movq	%r13, %rdi
    00000441: 	callq	_Z15TestSearchArrayIPaPFS0_S0_S0_aEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 1089
    00000446: 	movq	0x30(%rsp), %rdi
    0000044b: 	cmpq	(%rsp), %rdi
    0000044f: 	je	.Ltmp1850 # Offset: 1103
    00000451: 	movq	0x40(%rsp), %rax
    00000456: 	leaq	0x1(%rax), %rsi
    0000045a: 	callq	_ZdlPvm@PLT # Offset: 1114
.Ltmp1850:
    0000045f: 	movq	0x58(%rsp), %rax
    00000464: 	subq	%fs:0x28, %rax
    0000046d: 	jne	.Ltmp1851 # Offset: 1133
    00000473: 	addq	$0x68, %rsp
    00000477: 	popq	%rbx
    00000478: 	popq	%rbp
    00000479: 	popq	%r12
    0000047b: 	popq	%r13
    0000047d: 	popq	%r14
    0000047f: 	popq	%r15
    00000481: 	retq # Offset: 1153
.Ltmp1844:
    00000482: 	testq	%r8, %r8
    00000485: 	jne	.Ltmp1852 # Offset: 1157
    00000487: 	movq	(%rsp), %rax
    0000048b: 	jmp	.Ltmp1853 # Offset: 1163
.Ltmp1836:
    00000490: 	testq	%r12, %r12
    00000493: 	je	.Ltmp1837 # Offset: 1171
    00000499: 	movl	$0x1, %edx
    0000049e: 	jmp	.Ltmp1854 # Offset: 1182
.Ltmp1843:
    000004a3: 	movq	%r14, %rdi
    000004a6: 	leaq	0x28(%rsp), %rsi
    000004ab: 	xorl	%edx, %edx
    000004ad: 	movq	%r8, 0x18(%rsp)
    000004b2: 	movq	%r9, 0x10(%rsp)
    000004b7: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1207
    000004bc: 	movq	0x10(%rsp), %r9
    000004c1: 	movq	0x18(%rsp), %r8
    000004c6: 	movq	%rax, 0x30(%rsp)
    000004cb: 	movq	%rax, %rdi
    000004ce: 	movq	0x28(%rsp), %rax
    000004d3: 	movq	%rax, 0x40(%rsp)
.Ltmp1856:
    000004d8: 	movq	%r8, %rdx
    000004db: 	movq	%r9, %rsi
    000004de: 	callq	memcpy@PLT # Offset: 1246
    000004e3: 	movq	0x28(%rsp), %r8
    000004e8: 	movq	0x30(%rsp), %rax
    000004ed: 	jmp	.Ltmp1853 # Offset: 1261
.Ltmp1848:
    000004f2: 	xorl	%edx, %edx
    000004f4: 	jmp	.Ltmp1855 # Offset: 1268
.Ltmp1845:
    000004f9: 	leaq	DATAat0x3414b(%rip), %rdi
    00000500: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 1280
.Ltmp1852:
    00000505: 	movq	(%rsp), %rdi
    00000509: 	jmp	.Ltmp1856 # Offset: 1289
.Ltmp1851:
    0000050b: 	callq	__stack_chk_fail@PLT # Offset: 1291
.Ltmp1842:
    00000510: 	leaq	DATAat0x34008(%rip), %rdi
    00000517: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1303
    0000051c: 	endbr64
.Ltmp1858:
    00000520: 	movq	%rax, %rbp
    00000523: 	jmp	.Ltmp1857 # Offset: 1315
    00000525: 	endbr64
    00000529: 	jmp	.Ltmp1858 # Offset: 1321
    0000052b: 	endbr64
    0000052f: 	jmp	.Ltmp1858 # Offset: 1327
    00000531: 	endbr64
    00000535: 	movq	%rax, %rbp
    00000538: 	jmp	.Ltmp1859 # Offset: 1336
.Ltmp1857:
    0000053a: 	movq	0x30(%rsp), %rdi
    0000053f: 	cmpq	(%rsp), %rdi
    00000543: 	je	.Ltmp1860 # Offset: 1347
.Ltmp1861:
    00000545: 	movq	0x40(%rsp), %rax
    0000054a: 	leaq	0x1(%rax), %rsi
    0000054e: 	callq	_ZdlPvm@PLT # Offset: 1358
.Ltmp1860:
    00000553: 	movq	%rbp, %rdi
    00000556: 	callq	_Unwind_Resume@PLT # Offset: 1366
.Ltmp1859:
    0000055b: 	movq	0x30(%rsp), %rdi
    00000560: 	leaq	0x40(%rsp), %rax
    00000565: 	cmpq	%rax, %rdi
    00000568: 	jne	.Ltmp1861 # Offset: 1384
    0000056a: 	jmp	.Ltmp1860 # Offset: 1386
DWARF CFI Instructions:
    <empty>
End of Function "_Z13TestOneSearchIPaPFS0_S0_S0_aEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z15TestSearchArrayIPaPFbS0_S0_aEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 295
  State       : disassembled
  Address     : 0xcf30
  Size        : 0x1c7
  MaxSize     : 0x1d0
  Offset      : 0xcf30
  Section     : .text
  Orc Section : .local.text._Z15TestSearchArrayIPaPFbS0_S0_aEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0294:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rcx, %r15
    00000009: 	pushq	%r14
    0000000b: 	movq	%rsi, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %r12
    00000015: 	movl	$0x400, %edi
    0000001a: 	pushq	%rbp
    0000001b: 	pushq	%rbx
    0000001c: 	subq	$0x28, %rsp
    00000020: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000027: 	movq	%r8, 0x18(%rsp)
    0000002c: 	movq	%rdx, 0x10(%rsp)
    00000031: 	movb	%r9b, 0xf(%rsp)
    00000036: 	callq	_Znwm@PLT # Offset: 54
    0000003b: 	movabsq	$0x5851f42d4c957f2d, %r8
    00000045: 	leaq	0x9(%rax), %rdi
    00000049: 	movb	$0x0, (%rax)
    0000004c: 	movq	%rax, %r13
    0000004f: 	leaq	0x400(%rax), %rsi
    00000056: 	andq	$-0x8, %rdi
    0000005a: 	movq	$0x0, 0x1(%rax)
    00000062: 	movq	$0x0, 0x3f8(%rax)
    0000006d: 	subl	%edi, %eax
    0000006f: 	leal	0x400(%rax), %ecx
    00000075: 	xorl	%eax, %eax
    00000077: 	shrl	$0x3, %ecx
    0000007a: 	rep		stosq	%rax, %es:(%rdi)
    0000007d: 	movq	%r13, %rcx
    00000080: 	movabsq	$0x14057b7ef767814f, %rdi
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1862:
    00000090: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    00000097: 	addq	$0x1, %rcx
    0000009b: 	imulq	%r8, %rax
    0000009f: 	addq	%rdi, %rax
    000000a2: 	movq	%rax, %rdx
    000000a5: 	movq	%rax, %r9
    000000a8: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000000af: 	shrq	$0x14, %rdx
    000000b3: 	shlq	$0x17, %r9
    000000b7: 	xorq	%r9, %rdx
    000000ba: 	xorq	%rdx, %rax
    000000bd: 	xorl	%edx, %edx
    000000bf: 	divq	0x10(%rsp)
    000000c4: 	movzbl	(%r12,%rdx), %eax
    000000c9: 	movb	%al, -0x1(%rcx)
    000000cc: 	cmpq	%rsi, %rcx
    000000cf: 	jne	.Ltmp1862 # Offset: 207
    000000d1: 	callq	clock@PLT # Offset: 209
    000000d6: 	xorl	%ebx, %ebx
    000000d8: 	xorl	%ebp, %ebp
    000000da: 	movq	%rax, start_time(%rip)
.Ltmp1866:
    000000e1: 	leaq	0xc8(%rbp), %rax
    000000e8: 	movq	%rax, (%rsp)
    000000ec: 	nopl	(%rax) # Size: 4
.Ltmp1864:
    000000f0: 	movq	%rbp, %rax
    000000f3: 	movq	%r14, %rsi
    000000f6: 	addq	$0x1, %rbp
    000000fa: 	movq	%r12, %rdi
    000000fd: 	andl	$0x3ff, %eax
    00000102: 	movsbl	(%r13,%rax), %edx
    00000108: 	callq	*%r15 # Offset: 264
    0000010b: 	testb	%al, %al
    0000010d: 	jne	.Ltmp1863 # Offset: 269
    0000010f: 	cmpb	$0x0, 0xf(%rsp)
    00000114: 	movl	$0x1, %eax
    00000119: 	cmovel	%eax, %ebx
.Ltmp1863:
    0000011c: 	cmpq	(%rsp), %rbp
    00000120: 	jne	.Ltmp1864 # Offset: 288
    00000122: 	callq	clock@PLT # Offset: 290
    00000127: 	movsd	gMinimumTimeTarget(%rip), %xmm1
    0000012f: 	pxor	%xmm0, %xmm0
    00000133: 	movq	%rax, end_time(%rip)
    0000013a: 	subq	start_time(%rip), %rax
    00000141: 	cvtsi2sd	%rax, %xmm0
    00000146: 	divsd	DATAat0x34410(%rip), %xmm0
    0000014e: 	comisd	%xmm0, %xmm1
    00000152: 	jbe	.Ltmp1865 # Offset: 338
    00000154: 	cmpq	$0x5f5e0ff, %rbp
    0000015b: 	jbe	.Ltmp1866 # Offset: 347
.Ltmp1865:
    0000015d: 	movq	0x18(%rsp), %rdx
    00000162: 	movq	0x10(%rsp), %rdi
    00000167: 	movq	%rbp, %rsi
    0000016a: 	callq	_Z13record_resultdmmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 362
    0000016f: 	testb	%bl, %bl
    00000171: 	jne	.Ltmp1867 # Offset: 369
.Ltmp1868:
    00000173: 	addq	$0x28, %rsp
    00000177: 	movq	%r13, %rdi
    0000017a: 	movl	$0x400, %esi
    0000017f: 	popq	%rbx
    00000180: 	popq	%rbp
    00000181: 	popq	%r12
    00000183: 	popq	%r13
    00000185: 	popq	%r14
    00000187: 	popq	%r15
    00000189: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 393
.Ltmp1867:
    0000018e: 	movq	0x18(%rsp), %rax
    00000193: 	leaq	DATAat0x34137(%rip), %rsi
    0000019a: 	movl	$0x1, %edi
    0000019f: 	movq	(%rax), %rdx
    000001a2: 	xorl	%eax, %eax
    000001a4: 	callq	__printf_chk@PLT # Offset: 420
    000001a9: 	jmp	.Ltmp1868 # Offset: 425
    000001ab: 	endbr64
    000001af: 	movq	%rax, %rbp
    000001b2: 	movq	%r13, %rdi
    000001b5: 	movl	$0x400, %esi
    000001ba: 	callq	_ZdlPvm@PLT # Offset: 442
    000001bf: 	movq	%rbp, %rdi
    000001c2: 	callq	_Unwind_Resume@PLT # Offset: 450
DWARF CFI Instructions:
    <empty>
End of Function "_Z15TestSearchArrayIPaPFbS0_S0_aEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z13TestOneSearchIPaPFbS0_S0_aEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 296
  State       : disassembled
  Address     : 0xd100
  Size        : 0x563
  MaxSize     : 0x570
  Offset      : 0xd100
  Section     : .text
  Orc Section : .local.text._Z13TestOneSearchIPaPFbS0_S0_aEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0295:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%r8, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdx, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rsi, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	movl	%r9d, %ebx
    0000001d: 	subq	$0x68, %rsp
    00000021: 	movq	%rcx, 0x10(%rsp)
    00000026: 	movq	%fs:0x28, %rax
    0000002f: 	movq	%rax, 0x58(%rsp)
    00000034: 	xorl	%eax, %eax
    00000036: 	cmpq	%rsi, %rdi
    00000039: 	je	.Ltmp1869 # Offset: 57
    0000003b: 	movq	%rsi, %rdx
    0000003e: 	movl	$0x5, %esi
    00000043: 	subq	%rdi, %rdx
    00000046: 	callq	memset@PLT # Offset: 70
.Ltmp1869:
    0000004b: 	leaq	0x30(%rsp), %r14
    00000050: 	leaq	DATAat0x34160(%rip), %rdx
    00000057: 	movq	%r15, %rsi
    0000005a: 	movzbl	%bl, %ebx
    0000005d: 	movq	%r14, %rdi
    00000060: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 96
    00000065: 	movq	0x10(%rsp), %rcx
    0000006a: 	movl	%ebx, %r9d
    0000006d: 	movq	%r14, %r8
    00000070: 	movq	%r12, %rdx
    00000073: 	movq	%rbp, %rsi
    00000076: 	movq	%r13, %rdi
    00000079: 	callq	_Z15TestSearchArrayIPaPFbS0_S0_aEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 121
    0000007e: 	movq	0x30(%rsp), %rdi
    00000083: 	leaq	0x40(%rsp), %rax
    00000088: 	movq	%rax, 0x8(%rsp)
    0000008d: 	cmpq	%rax, %rdi
    00000090: 	je	.Ltmp1870 # Offset: 144
    00000092: 	movq	0x40(%rsp), %rax
    00000097: 	leaq	0x1(%rax), %rsi
    0000009b: 	callq	_ZdlPvm@PLT # Offset: 155
.Ltmp1870:
    000000a0: 	cmpq	$0x9, %r12
    000000a4: 	jbe	.Ltmp1871 # Offset: 164
    000000aa: 	movabsq	$-0x3333333333333333, %rdx
    000000b4: 	movq	%r12, %rax
    000000b7: 	mulq	%rdx
    000000ba: 	shrq	$0x3, %rdx
.Ltmp1889:
    000000be: 	movq	%r13, %rsi
    000000c1: 	xorl	%ecx, %ecx
    000000c3: 	xorl	%edi, %edi
    000000c5: 	cmpq	$0x0, %r12
    000000c9: 	jbe	.Ltmp1872 # Offset: 201
    000000cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1875:
    000000d0: 	xorl	%eax, %eax
    000000d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1874:
    000000d8: 	addq	$0x1, %rax
    000000dc: 	addq	$0x1, %rsi
    000000e0: 	addq	$0x1, %rcx
    000000e4: 	movb	%dil, -0x1(%rsi)
    000000e8: 	cmpq	%rdx, %rax
    000000eb: 	jae	.Ltmp1873 # Offset: 235
    000000ed: 	cmpq	%rcx, %r12
    000000f0: 	ja	.Ltmp1874 # Offset: 240
.Ltmp1873:
    000000f2: 	addl	$0x1, %edi
    000000f5: 	cmpq	%rcx, %r12
    000000f8: 	ja	.Ltmp1875 # Offset: 248
.Ltmp1872:
    000000fa: 	leaq	DATAat0x3416e(%rip), %rdx
    00000101: 	movq	%r15, %rsi
    00000104: 	movq	%r14, %rdi
    00000107: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 263
    0000010c: 	movq	0x10(%rsp), %rcx
    00000111: 	movl	%ebx, %r9d
    00000114: 	movq	%r14, %r8
    00000117: 	movq	%r12, %rdx
    0000011a: 	movq	%rbp, %rsi
    0000011d: 	movq	%r13, %rdi
    00000120: 	callq	_Z15TestSearchArrayIPaPFbS0_S0_aEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 288
    00000125: 	movq	0x30(%rsp), %rdi
    0000012a: 	cmpq	0x8(%rsp), %rdi
    0000012f: 	je	.Ltmp1876 # Offset: 303
    00000131: 	movq	0x40(%rsp), %rax
    00000136: 	leaq	0x1(%rax), %rsi
    0000013a: 	callq	_ZdlPvm@PLT # Offset: 314
.Ltmp1876:
    0000013f: 	cmpq	%rbp, %r13
    00000142: 	je	.Ltmp1877 # Offset: 322
    00000148: 	movq	%rbp, %rcx
    0000014b: 	movq	%r13, %rax
    0000014e: 	subq	%r13, %rcx
    00000151: 	leaq	-0x1(%rcx), %rdx
    00000155: 	cmpq	$0xe, %rdx
    00000159: 	jbe	.Ltmp1878 # Offset: 345
    0000015f: 	movq	%rcx, %rdx
    00000162: 	movdqa	DATAat0x34430(%rip), %xmm2
    0000016a: 	movdqa	DATAat0x34440(%rip), %xmm11
    00000173: 	andq	$-0x10, %rdx
    00000177: 	movdqa	DATAat0x34450(%rip), %xmm10
    00000180: 	movdqa	DATAat0x34460(%rip), %xmm9
    00000189: 	movdqa	DATAat0x34470(%rip), %xmm8
    00000192: 	movdqa	DATAat0x34480(%rip), %xmm7
    0000019a: 	addq	%r13, %rdx
    0000019d: 	movdqa	DATAat0x34490(%rip), %xmm6
    000001a5: 	movdqa	DATAat0x344a0(%rip), %xmm5
    000001ad: 	movdqa	DATAat0x344b0(%rip), %xmm4
    000001b5: 	movdqa	DATAat0x344c0(%rip), %xmm3
    000001bd: 	nopl	(%rax) # Size: 3
.Ltmp1879:
    000001c0: 	movdqa	%xmm2, %xmm12
    000001c5: 	addq	$0x10, %rax
    000001c9: 	paddq	%xmm11, %xmm2
    000001ce: 	movdqa	%xmm12, %xmm1
    000001d3: 	movdqa	%xmm12, %xmm0
    000001d8: 	movdqa	%xmm12, %xmm13
    000001dd: 	paddq	%xmm10, %xmm1
    000001e2: 	paddq	%xmm8, %xmm13
    000001e7: 	shufps	$0x88, %xmm1, %xmm0
    000001eb: 	movdqa	%xmm12, %xmm1
    000001f0: 	paddq	%xmm9, %xmm1
    000001f5: 	shufps	$0x88, %xmm13, %xmm1
    000001fa: 	movdqa	%xmm0, %xmm13
    000001ff: 	punpcklwd	%xmm1, %xmm0
    00000203: 	punpckhwd	%xmm1, %xmm13
    00000208: 	movdqa	%xmm0, %xmm1
    0000020c: 	punpckhwd	%xmm13, %xmm1
    00000211: 	punpcklwd	%xmm13, %xmm0
    00000216: 	movdqa	%xmm12, %xmm13
    0000021b: 	punpcklwd	%xmm1, %xmm0
    0000021f: 	movdqa	%xmm12, %xmm1
    00000224: 	paddq	%xmm6, %xmm13
    00000229: 	paddq	%xmm7, %xmm1
    0000022d: 	pand	%xmm3, %xmm0
    00000231: 	shufps	$0x88, %xmm13, %xmm1
    00000236: 	movdqa	%xmm12, %xmm13
    0000023b: 	paddq	%xmm4, %xmm12
    00000240: 	paddq	%xmm5, %xmm13
    00000245: 	shufps	$0x88, %xmm12, %xmm13
    0000024a: 	movdqa	%xmm1, %xmm12
    0000024f: 	punpcklwd	%xmm13, %xmm1
    00000254: 	punpckhwd	%xmm13, %xmm12
    00000259: 	movdqa	%xmm1, %xmm13
    0000025e: 	punpckhwd	%xmm12, %xmm13
    00000263: 	punpcklwd	%xmm12, %xmm1
    00000268: 	punpcklwd	%xmm13, %xmm1
    0000026d: 	pand	%xmm3, %xmm1
    00000271: 	packuswb	%xmm1, %xmm0
    00000275: 	movups	%xmm0, -0x10(%rax)
    00000279: 	cmpq	%rax, %rdx
    0000027c: 	jne	.Ltmp1879 # Offset: 636
    00000282: 	movq	%rcx, %rdx
    00000285: 	andq	$-0x10, %rdx
    00000289: 	leaq	(%r13,%rdx), %rax
    0000028e: 	cmpq	%rdx, %rcx
    00000291: 	je	.Ltmp1877 # Offset: 657
.Ltmp1890:
    00000297: 	leaq	0x1(%rax), %rcx
    0000029b: 	movb	%dl, (%rax)
    0000029d: 	leaq	0x1(%rdx), %rsi
    000002a1: 	cmpq	%rcx, %rbp
    000002a4: 	je	.Ltmp1877 # Offset: 676
    000002aa: 	leaq	0x2(%rax), %rcx
    000002ae: 	movb	%sil, 0x1(%rax)
    000002b2: 	leaq	0x2(%rdx), %rdi
    000002b6: 	cmpq	%rcx, %rbp
    000002b9: 	je	.Ltmp1877 # Offset: 697
    000002bf: 	leaq	0x3(%rax), %rcx
    000002c3: 	movb	%dil, 0x2(%rax)
    000002c7: 	leaq	0x3(%rdx), %rsi
    000002cb: 	cmpq	%rcx, %rbp
    000002ce: 	je	.Ltmp1877 # Offset: 718
    000002d4: 	leaq	0x4(%rax), %rcx
    000002d8: 	movb	%sil, 0x3(%rax)
    000002dc: 	leaq	0x4(%rdx), %rdi
    000002e0: 	cmpq	%rcx, %rbp
    000002e3: 	je	.Ltmp1877 # Offset: 739
    000002e9: 	leaq	0x5(%rax), %rcx
    000002ed: 	movb	%dil, 0x4(%rax)
    000002f1: 	leaq	0x5(%rdx), %rsi
    000002f5: 	cmpq	%rcx, %rbp
    000002f8: 	je	.Ltmp1877 # Offset: 760
    000002fe: 	leaq	0x6(%rax), %rcx
    00000302: 	movb	%sil, 0x5(%rax)
    00000306: 	leaq	0x6(%rdx), %rdi
    0000030a: 	cmpq	%rcx, %rbp
    0000030d: 	je	.Ltmp1877 # Offset: 781
    00000313: 	leaq	0x7(%rax), %rsi
    00000317: 	movb	%dil, 0x6(%rax)
    0000031b: 	leaq	0x7(%rdx), %rcx
    0000031f: 	cmpq	%rsi, %rbp
    00000322: 	je	.Ltmp1877 # Offset: 802
    00000324: 	movb	%cl, 0x7(%rax)
    00000327: 	leaq	0x8(%rax), %rcx
    0000032b: 	leaq	0x8(%rdx), %rsi
    0000032f: 	cmpq	%rcx, %rbp
    00000332: 	je	.Ltmp1877 # Offset: 818
    00000334: 	movb	%sil, 0x8(%rax)
    00000338: 	leaq	0x9(%rax), %rsi
    0000033c: 	leaq	0x9(%rdx), %rcx
    00000340: 	cmpq	%rsi, %rbp
    00000343: 	je	.Ltmp1877 # Offset: 835
    00000345: 	movb	%cl, 0x9(%rax)
    00000348: 	leaq	0xa(%rax), %rcx
    0000034c: 	leaq	0xa(%rdx), %rsi
    00000350: 	cmpq	%rcx, %rbp
    00000353: 	je	.Ltmp1877 # Offset: 851
    00000355: 	movb	%sil, 0xa(%rax)
    00000359: 	leaq	0xb(%rax), %rsi
    0000035d: 	leaq	0xb(%rdx), %rcx
    00000361: 	cmpq	%rsi, %rbp
    00000364: 	je	.Ltmp1877 # Offset: 868
    00000366: 	movb	%cl, 0xb(%rax)
    00000369: 	leaq	0xc(%rax), %rcx
    0000036d: 	leaq	0xc(%rdx), %rsi
    00000371: 	cmpq	%rcx, %rbp
    00000374: 	je	.Ltmp1877 # Offset: 884
    00000376: 	movb	%sil, 0xc(%rax)
    0000037a: 	leaq	0xd(%rax), %rsi
    0000037e: 	leaq	0xd(%rdx), %rcx
    00000382: 	cmpq	%rsi, %rbp
    00000385: 	je	.Ltmp1877 # Offset: 901
    00000387: 	movb	%cl, 0xd(%rax)
    0000038a: 	leaq	0xe(%rax), %rcx
    0000038e: 	addq	$0xe, %rdx
    00000392: 	cmpq	%rcx, %rbp
    00000395: 	je	.Ltmp1877 # Offset: 917
    00000397: 	movb	%dl, 0xe(%rax)
    0000039a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1877:
    000003a0: 	movq	%rbp, %rsi
    000003a3: 	movq	%r13, %rdi
    000003a6: 	callq	_Z18quicksort2_forwardIPaEvT_S1_ # Offset: 934
    000003ab: 	movq	0x8(%rsp), %rax
    000003b0: 	movq	(%r15), %r8
    000003b3: 	movq	0x8(%r15), %r15
    000003b7: 	movq	%rax, 0x30(%rsp)
    000003bc: 	movq	%r8, %rax
    000003bf: 	addq	%r15, %rax
    000003c2: 	je	.Ltmp1880 # Offset: 962
    000003c4: 	testq	%r8, %r8
    000003c7: 	je	.Ltmp1881 # Offset: 967
.Ltmp1880:
    000003cd: 	movq	%r15, 0x28(%rsp)
    000003d2: 	cmpq	$0xf, %r15
    000003d6: 	ja	.Ltmp1882 # Offset: 982
    000003dc: 	cmpq	$0x1, %r15
    000003e0: 	jne	.Ltmp1883 # Offset: 992
    000003e6: 	movzbl	(%r8), %eax
    000003ea: 	movb	%al, 0x40(%rsp)
    000003ee: 	movq	0x8(%rsp), %rax
.Ltmp1888:
    000003f3: 	movq	%r15, 0x38(%rsp)
    000003f8: 	movb	$0x0, (%rax,%r15)
    000003fd: 	movabsq	$0x3fffffffffffffff, %rax
    00000407: 	subq	0x38(%rsp), %rax
    0000040c: 	cmpq	$0x9, %rax
    00000410: 	jbe	.Ltmp1884 # Offset: 1040
    00000416: 	movl	$0xa, %edx
    0000041b: 	leaq	DATAat0x34184(%rip), %rsi
    00000422: 	movq	%r14, %rdi
    00000425: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1061
    0000042a: 	movq	0x10(%rsp), %rcx
    0000042f: 	movl	%ebx, %r9d
    00000432: 	movq	%r14, %r8
    00000435: 	movq	%r12, %rdx
    00000438: 	movq	%rbp, %rsi
    0000043b: 	movq	%r13, %rdi
    0000043e: 	callq	_Z15TestSearchArrayIPaPFbS0_S0_aEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 1086
    00000443: 	movq	0x30(%rsp), %rdi
    00000448: 	cmpq	0x8(%rsp), %rdi
    0000044d: 	je	.Ltmp1885 # Offset: 1101
    0000044f: 	movq	0x40(%rsp), %rax
    00000454: 	leaq	0x1(%rax), %rsi
    00000458: 	callq	_ZdlPvm@PLT # Offset: 1112
.Ltmp1885:
    0000045d: 	movq	0x58(%rsp), %rax
    00000462: 	subq	%fs:0x28, %rax
    0000046b: 	jne	.Ltmp1886 # Offset: 1131
    00000471: 	addq	$0x68, %rsp
    00000475: 	popq	%rbx
    00000476: 	popq	%rbp
    00000477: 	popq	%r12
    00000479: 	popq	%r13
    0000047b: 	popq	%r14
    0000047d: 	popq	%r15
    0000047f: 	retq # Offset: 1151
.Ltmp1883:
    00000480: 	testq	%r15, %r15
    00000483: 	jne	.Ltmp1887 # Offset: 1155
    00000485: 	movq	0x8(%rsp), %rax
    0000048a: 	jmp	.Ltmp1888 # Offset: 1162
.Ltmp1871:
    0000048f: 	testq	%r12, %r12
    00000492: 	je	.Ltmp1872 # Offset: 1170
    00000498: 	movl	$0x1, %edx
    0000049d: 	jmp	.Ltmp1889 # Offset: 1181
.Ltmp1882:
    000004a2: 	movq	%r14, %rdi
    000004a5: 	leaq	0x28(%rsp), %rsi
    000004aa: 	xorl	%edx, %edx
    000004ac: 	movq	%r8, 0x18(%rsp)
    000004b1: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1201
    000004b6: 	movq	0x18(%rsp), %r8
    000004bb: 	movq	%rax, 0x30(%rsp)
    000004c0: 	movq	%rax, %rdi
    000004c3: 	movq	0x28(%rsp), %rax
    000004c8: 	movq	%rax, 0x40(%rsp)
.Ltmp1891:
    000004cd: 	movq	%r15, %rdx
    000004d0: 	movq	%r8, %rsi
    000004d3: 	callq	memcpy@PLT # Offset: 1235
    000004d8: 	movq	0x28(%rsp), %r15
    000004dd: 	movq	0x30(%rsp), %rax
    000004e2: 	jmp	.Ltmp1888 # Offset: 1250
.Ltmp1878:
    000004e7: 	xorl	%edx, %edx
    000004e9: 	jmp	.Ltmp1890 # Offset: 1257
.Ltmp1887:
    000004ee: 	movq	0x8(%rsp), %rdi
    000004f3: 	jmp	.Ltmp1891 # Offset: 1267
.Ltmp1884:
    000004f5: 	leaq	DATAat0x3414b(%rip), %rdi
    000004fc: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 1276
.Ltmp1886:
    00000501: 	callq	__stack_chk_fail@PLT # Offset: 1281
.Ltmp1881:
    00000506: 	leaq	DATAat0x34008(%rip), %rdi
    0000050d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1293
    00000512: 	endbr64
    00000516: 	movq	%rax, %rbp
    00000519: 	jmp	.Ltmp1892 # Offset: 1305
    0000051b: 	endbr64
.Ltmp1895:
    0000051f: 	movq	%rax, %rbp
    00000522: 	jmp	.Ltmp1893 # Offset: 1314
.Ltmp1892:
    00000524: 	movq	0x30(%rsp), %rdi
    00000529: 	leaq	0x40(%rsp), %rax
    0000052e: 	cmpq	%rax, %rdi
    00000531: 	je	.Ltmp1894 # Offset: 1329
.Ltmp1896:
    00000533: 	movq	0x40(%rsp), %rax
    00000538: 	leaq	0x1(%rax), %rsi
    0000053c: 	callq	_ZdlPvm@PLT # Offset: 1340
.Ltmp1894:
    00000541: 	movq	%rbp, %rdi
    00000544: 	callq	_Unwind_Resume@PLT # Offset: 1348
    00000549: 	endbr64
    0000054d: 	jmp	.Ltmp1895 # Offset: 1357
    0000054f: 	endbr64
    00000553: 	jmp	.Ltmp1895 # Offset: 1363
.Ltmp1893:
    00000555: 	movq	0x30(%rsp), %rdi
    0000055a: 	cmpq	0x8(%rsp), %rdi
    0000055f: 	jne	.Ltmp1896 # Offset: 1375
    00000561: 	jmp	.Ltmp1894 # Offset: 1377
DWARF CFI Instructions:
    <empty>
End of Function "_Z13TestOneSearchIPaPFbS0_S0_aEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z16TestOneContainerIPaEvT_S1_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 297
  State       : disassembled
  Address     : 0xd670
  Size        : 0x4de
  MaxSize     : 0x4e0
  Offset      : 0xd670
  Section     : .text
  Orc Section : .local.text._Z16TestOneContainerIPaEvT_S1_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0296:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdx, %r15
    00000009: 	leaq	DATAat0x3418f(%rip), %rdx
    00000010: 	pushq	%r14
    00000012: 	movq	%rsi, %r14
    00000015: 	movq	%rcx, %rsi
    00000018: 	pushq	%r13
    0000001a: 	movq	%rdi, %r13
    0000001d: 	pushq	%r12
    0000001f: 	movq	%rcx, %r12
    00000022: 	pushq	%rbp
    00000023: 	pushq	%rbx
    00000024: 	subq	$0x38, %rsp
    00000028: 	movq	%fs:0x28, %rax
    00000031: 	movq	%rax, 0x28(%rsp)
    00000036: 	xorl	%eax, %eax
    00000038: 	movq	%rsp, %rbp
    0000003b: 	movq	%rbp, %rdi
    0000003e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 62
    00000043: 	xorl	%r9d, %r9d
    00000046: 	movq	%rbp, %r8
    00000049: 	movq	%r15, %rdx
    0000004c: 	leaq	_Z14std_lowerboundIPaaET_S1_S1_T0_(%rip), %rcx
    00000053: 	movq	%r14, %rsi
    00000056: 	movq	%r13, %rdi
    00000059: 	callq	_Z13TestOneSearchIPaPFS0_S0_S0_aEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 89
    0000005e: 	movq	(%rsp), %rdi
    00000062: 	leaq	0x10(%rsp), %rbx
    00000067: 	cmpq	%rbx, %rdi
    0000006a: 	je	.Ltmp1897 # Offset: 106
    0000006c: 	movq	0x10(%rsp), %rax
    00000071: 	leaq	0x1(%rax), %rsi
    00000075: 	callq	_ZdlPvm@PLT # Offset: 117
.Ltmp1897:
    0000007a: 	leaq	DATAat0x341a1(%rip), %rdx
    00000081: 	movq	%r12, %rsi
    00000084: 	movq	%rbp, %rdi
    00000087: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 135
    0000008c: 	xorl	%r9d, %r9d
    0000008f: 	movq	%rbp, %r8
    00000092: 	movq	%r15, %rdx
    00000095: 	leaq	_Z12lower_bound1IPaaET_S1_S1_T0_(%rip), %rcx
    0000009c: 	movq	%r14, %rsi
    0000009f: 	movq	%r13, %rdi
    000000a2: 	callq	_Z13TestOneSearchIPaPFS0_S0_S0_aEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 162
    000000a7: 	movq	(%rsp), %rdi
    000000ab: 	cmpq	%rbx, %rdi
    000000ae: 	je	.Ltmp1898 # Offset: 174
    000000b0: 	movq	0x10(%rsp), %rax
    000000b5: 	leaq	0x1(%rax), %rsi
    000000b9: 	callq	_ZdlPvm@PLT # Offset: 185
.Ltmp1898:
    000000be: 	leaq	DATAat0x341af(%rip), %rdx
    000000c5: 	movq	%r12, %rsi
    000000c8: 	movq	%rbp, %rdi
    000000cb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 203
    000000d0: 	xorl	%r9d, %r9d
    000000d3: 	movq	%rbp, %r8
    000000d6: 	movq	%r15, %rdx
    000000d9: 	leaq	_Z12lower_bound2IPaaET_S1_S1_T0_(%rip), %rcx
    000000e0: 	movq	%r14, %rsi
    000000e3: 	movq	%r13, %rdi
    000000e6: 	callq	_Z13TestOneSearchIPaPFS0_S0_S0_aEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 230
    000000eb: 	movq	(%rsp), %rdi
    000000ef: 	cmpq	%rbx, %rdi
    000000f2: 	je	.Ltmp1899 # Offset: 242
    000000f4: 	movq	0x10(%rsp), %rax
    000000f9: 	leaq	0x1(%rax), %rsi
    000000fd: 	callq	_ZdlPvm@PLT # Offset: 253
.Ltmp1899:
    00000102: 	leaq	DATAat0x341bd(%rip), %rdx
    00000109: 	movq	%r12, %rsi
    0000010c: 	movq	%rbp, %rdi
    0000010f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 271
    00000114: 	xorl	%r9d, %r9d
    00000117: 	movq	%rbp, %r8
    0000011a: 	movq	%r15, %rdx
    0000011d: 	leaq	_Z17lower_bound_recurIPaaET_S1_S1_T0_(%rip), %rcx
    00000124: 	movq	%r14, %rsi
    00000127: 	movq	%r13, %rdi
    0000012a: 	callq	_Z13TestOneSearchIPaPFS0_S0_S0_aEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 298
    0000012f: 	movq	(%rsp), %rdi
    00000133: 	cmpq	%rbx, %rdi
    00000136: 	je	.Ltmp1900 # Offset: 310
    00000138: 	movq	0x10(%rsp), %rax
    0000013d: 	leaq	0x1(%rax), %rsi
    00000141: 	callq	_ZdlPvm@PLT # Offset: 321
.Ltmp1900:
    00000146: 	leaq	DATAat0x341d4(%rip), %rdx
    0000014d: 	movq	%r12, %rsi
    00000150: 	movq	%rbp, %rdi
    00000153: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 339
    00000158: 	movq	%rbp, %r8
    0000015b: 	movq	%r15, %rdx
    0000015e: 	movq	%r14, %rsi
    00000161: 	movl	$0x1, %r9d
    00000167: 	leaq	_Z14std_upperboundIPaaET_S1_S1_T0_(%rip), %rcx
    0000016e: 	movq	%r13, %rdi
    00000171: 	callq	_Z13TestOneSearchIPaPFS0_S0_S0_aEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 369
    00000176: 	movq	(%rsp), %rdi
    0000017a: 	cmpq	%rbx, %rdi
    0000017d: 	je	.Ltmp1901 # Offset: 381
    0000017f: 	movq	0x10(%rsp), %rax
    00000184: 	leaq	0x1(%rax), %rsi
    00000188: 	callq	_ZdlPvm@PLT # Offset: 392
.Ltmp1901:
    0000018d: 	leaq	DATAat0x341e6(%rip), %rdx
    00000194: 	movq	%r12, %rsi
    00000197: 	movq	%rbp, %rdi
    0000019a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 410
    0000019f: 	movq	%rbp, %r8
    000001a2: 	movq	%r15, %rdx
    000001a5: 	movq	%r14, %rsi
    000001a8: 	movl	$0x1, %r9d
    000001ae: 	leaq	_Z12upper_bound1IPaaET_S1_S1_T0_(%rip), %rcx
    000001b5: 	movq	%r13, %rdi
    000001b8: 	callq	_Z13TestOneSearchIPaPFS0_S0_S0_aEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 440
    000001bd: 	movq	(%rsp), %rdi
    000001c1: 	cmpq	%rbx, %rdi
    000001c4: 	je	.Ltmp1902 # Offset: 452
    000001c6: 	movq	0x10(%rsp), %rax
    000001cb: 	leaq	0x1(%rax), %rsi
    000001cf: 	callq	_ZdlPvm@PLT # Offset: 463
.Ltmp1902:
    000001d4: 	leaq	DATAat0x341f4(%rip), %rdx
    000001db: 	movq	%r12, %rsi
    000001de: 	movq	%rbp, %rdi
    000001e1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 481
    000001e6: 	movq	%rbp, %r8
    000001e9: 	movq	%r15, %rdx
    000001ec: 	movq	%r14, %rsi
    000001ef: 	movl	$0x1, %r9d
    000001f5: 	leaq	_Z12upper_bound2IPaaET_S1_S1_T0_(%rip), %rcx
    000001fc: 	movq	%r13, %rdi
    000001ff: 	callq	_Z13TestOneSearchIPaPFS0_S0_S0_aEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 511
    00000204: 	movq	(%rsp), %rdi
    00000208: 	cmpq	%rbx, %rdi
    0000020b: 	je	.Ltmp1903 # Offset: 523
    0000020d: 	movq	0x10(%rsp), %rax
    00000212: 	leaq	0x1(%rax), %rsi
    00000216: 	callq	_ZdlPvm@PLT # Offset: 534
.Ltmp1903:
    0000021b: 	leaq	DATAat0x34202(%rip), %rdx
    00000222: 	movq	%r12, %rsi
    00000225: 	movq	%rbp, %rdi
    00000228: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 552
    0000022d: 	movq	%rbp, %r8
    00000230: 	movq	%r15, %rdx
    00000233: 	movq	%r14, %rsi
    00000236: 	movl	$0x1, %r9d
    0000023c: 	leaq	_Z17upper_bound_recurIPaaET_S1_S1_T0_(%rip), %rcx
    00000243: 	movq	%r13, %rdi
    00000246: 	callq	_Z13TestOneSearchIPaPFS0_S0_S0_aEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 582
    0000024b: 	movq	(%rsp), %rdi
    0000024f: 	cmpq	%rbx, %rdi
    00000252: 	je	.Ltmp1904 # Offset: 594
    00000254: 	movq	0x10(%rsp), %rax
    00000259: 	leaq	0x1(%rax), %rsi
    0000025d: 	callq	_ZdlPvm@PLT # Offset: 605
.Ltmp1904:
    00000262: 	leaq	DATAat0x34219(%rip), %rdx
    00000269: 	movq	%r12, %rsi
    0000026c: 	movq	%rbp, %rdi
    0000026f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 623
    00000274: 	xorl	%r9d, %r9d
    00000277: 	movq	%rbp, %r8
    0000027a: 	movq	%r15, %rdx
    0000027d: 	leaq	_Z16std_binarysearchIPaaEbT_S1_T0_(%rip), %rcx
    00000284: 	movq	%r14, %rsi
    00000287: 	movq	%r13, %rdi
    0000028a: 	callq	_Z13TestOneSearchIPaPFbS0_S0_aEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 650
    0000028f: 	movq	(%rsp), %rdi
    00000293: 	cmpq	%rbx, %rdi
    00000296: 	je	.Ltmp1905 # Offset: 662
    00000298: 	movq	0x10(%rsp), %rax
    0000029d: 	leaq	0x1(%rax), %rsi
    000002a1: 	callq	_ZdlPvm@PLT # Offset: 673
.Ltmp1905:
    000002a6: 	leaq	DATAat0x3422d(%rip), %rdx
    000002ad: 	movq	%r12, %rsi
    000002b0: 	movq	%rbp, %rdi
    000002b3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 691
    000002b8: 	xorl	%r9d, %r9d
    000002bb: 	movq	%rbp, %r8
    000002be: 	movq	%r15, %rdx
    000002c1: 	leaq	_Z13binarysearch1IPaaEbT_S1_T0_(%rip), %rcx
    000002c8: 	movq	%r14, %rsi
    000002cb: 	movq	%r13, %rdi
    000002ce: 	callq	_Z13TestOneSearchIPaPFbS0_S0_aEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 718
    000002d3: 	movq	(%rsp), %rdi
    000002d7: 	cmpq	%rbx, %rdi
    000002da: 	je	.Ltmp1906 # Offset: 730
    000002dc: 	movq	0x10(%rsp), %rax
    000002e1: 	leaq	0x1(%rax), %rsi
    000002e5: 	callq	_ZdlPvm@PLT # Offset: 741
.Ltmp1906:
    000002ea: 	leaq	DATAat0x3423d(%rip), %rdx
    000002f1: 	movq	%r12, %rsi
    000002f4: 	movq	%rbp, %rdi
    000002f7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 759
    000002fc: 	xorl	%r9d, %r9d
    000002ff: 	movq	%rbp, %r8
    00000302: 	movq	%r15, %rdx
    00000305: 	leaq	_Z13binarysearch2IPaaEbT_S1_T0_(%rip), %rcx
    0000030c: 	movq	%r14, %rsi
    0000030f: 	movq	%r13, %rdi
    00000312: 	callq	_Z13TestOneSearchIPaPFbS0_S0_aEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 786
    00000317: 	movq	(%rsp), %rdi
    0000031b: 	cmpq	%rbx, %rdi
    0000031e: 	je	.Ltmp1907 # Offset: 798
    00000320: 	movq	0x10(%rsp), %rax
    00000325: 	leaq	0x1(%rax), %rsi
    00000329: 	callq	_ZdlPvm@PLT # Offset: 809
.Ltmp1907:
    0000032e: 	leaq	DATAat0x3424d(%rip), %rdx
    00000335: 	movq	%r12, %rsi
    00000338: 	movq	%rbp, %rdi
    0000033b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 827
    00000340: 	xorl	%r9d, %r9d
    00000343: 	movq	%rbp, %r8
    00000346: 	movq	%r15, %rdx
    00000349: 	leaq	_Z13binarysearch3IPaaEbT_S1_T0_(%rip), %rcx
    00000350: 	movq	%r14, %rsi
    00000353: 	movq	%r13, %rdi
    00000356: 	callq	_Z13TestOneSearchIPaPFbS0_S0_aEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 854
    0000035b: 	movq	(%rsp), %rdi
    0000035f: 	cmpq	%rbx, %rdi
    00000362: 	je	.Ltmp1908 # Offset: 866
    00000364: 	movq	0x10(%rsp), %rax
    00000369: 	leaq	0x1(%rax), %rsi
    0000036d: 	callq	_ZdlPvm@PLT # Offset: 877
.Ltmp1908:
    00000372: 	leaq	DATAat0x3425d(%rip), %rdx
    00000379: 	movq	%r12, %rsi
    0000037c: 	movq	%rbp, %rdi
    0000037f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 895
    00000384: 	xorl	%r9d, %r9d
    00000387: 	movq	%rbp, %r8
    0000038a: 	movq	%r15, %rdx
    0000038d: 	leaq	_Z13binarysearch4IPaaEbT_S1_T0_(%rip), %rcx
    00000394: 	movq	%r14, %rsi
    00000397: 	movq	%r13, %rdi
    0000039a: 	callq	_Z13TestOneSearchIPaPFbS0_S0_aEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 922
    0000039f: 	movq	(%rsp), %rdi
    000003a3: 	cmpq	%rbx, %rdi
    000003a6: 	je	.Ltmp1909 # Offset: 934
    000003a8: 	movq	0x10(%rsp), %rax
    000003ad: 	leaq	0x1(%rax), %rsi
    000003b1: 	callq	_ZdlPvm@PLT # Offset: 945
.Ltmp1909:
    000003b6: 	leaq	DATAat0x3426d(%rip), %rdx
    000003bd: 	movq	%r12, %rsi
    000003c0: 	movq	%rbp, %rdi
    000003c3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 963
    000003c8: 	xorl	%r9d, %r9d
    000003cb: 	movq	%rbp, %r8
    000003ce: 	movq	%r15, %rdx
    000003d1: 	leaq	_Z18binarysearch_recurIPaaEbT_S1_T0_(%rip), %rcx
    000003d8: 	movq	%r14, %rsi
    000003db: 	movq	%r13, %rdi
    000003de: 	callq	_Z13TestOneSearchIPaPFbS0_S0_aEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 990
    000003e3: 	movq	(%rsp), %rdi
    000003e7: 	cmpq	%rbx, %rdi
    000003ea: 	je	.Ltmp1910 # Offset: 1002
    000003ec: 	movq	0x10(%rsp), %rax
    000003f1: 	leaq	0x1(%rax), %rsi
    000003f5: 	callq	_ZdlPvm@PLT # Offset: 1013
.Ltmp1910:
    000003fa: 	movq	%rbp, %rdi
    000003fd: 	leaq	DATAat0x34286(%rip), %rdx
    00000404: 	movq	%r12, %rsi
    00000407: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1031
    0000040c: 	movq	%rbp, %rdi
    0000040f: 	callq	_Z9summarizeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1039
    00000414: 	movq	(%rsp), %rdi
    00000418: 	cmpq	%rbx, %rdi
    0000041b: 	je	.Ltmp1911 # Offset: 1051
    0000041d: 	movq	0x10(%rsp), %rax
    00000422: 	leaq	0x1(%rax), %rsi
    00000426: 	callq	_ZdlPvm@PLT # Offset: 1062
.Ltmp1911:
    0000042b: 	movq	0x28(%rsp), %rax
    00000430: 	subq	%fs:0x28, %rax
    00000439: 	jne	.Ltmp1912 # Offset: 1081
    0000043b: 	addq	$0x38, %rsp
    0000043f: 	popq	%rbx
    00000440: 	popq	%rbp
    00000441: 	popq	%r12
    00000443: 	popq	%r13
    00000445: 	popq	%r14
    00000447: 	popq	%r15
    00000449: 	retq # Offset: 1097
.Ltmp1912:
    0000044a: 	callq	__stack_chk_fail@PLT # Offset: 1098
    0000044f: 	endbr64
.Ltmp1914:
    00000453: 	movq	%rax, %rbp
    00000456: 	jmp	.Ltmp1913 # Offset: 1110
    00000458: 	endbr64
    0000045c: 	jmp	.Ltmp1914 # Offset: 1116
    0000045e: 	endbr64
    00000462: 	jmp	.Ltmp1914 # Offset: 1122
    00000464: 	endbr64
    00000468: 	jmp	.Ltmp1914 # Offset: 1128
    0000046a: 	endbr64
    0000046e: 	jmp	.Ltmp1914 # Offset: 1134
    00000470: 	endbr64
    00000474: 	jmp	.Ltmp1914 # Offset: 1140
    00000476: 	endbr64
    0000047a: 	jmp	.Ltmp1914 # Offset: 1146
.Ltmp1913:
    0000047c: 	movq	(%rsp), %rdi
    00000480: 	cmpq	%rbx, %rdi
    00000483: 	je	.Ltmp1915 # Offset: 1155
.Ltmp1917:
    00000485: 	movq	0x10(%rsp), %rax
    0000048a: 	leaq	0x1(%rax), %rsi
    0000048e: 	callq	_ZdlPvm@PLT # Offset: 1166
.Ltmp1915:
    00000493: 	movq	%rbp, %rdi
    00000496: 	callq	_Unwind_Resume@PLT # Offset: 1174
    0000049b: 	endbr64
    0000049f: 	jmp	.Ltmp1914 # Offset: 1183
    000004a1: 	endbr64
    000004a5: 	jmp	.Ltmp1914 # Offset: 1189
    000004a7: 	endbr64
    000004ab: 	jmp	.Ltmp1914 # Offset: 1195
    000004ad: 	endbr64
    000004b1: 	jmp	.Ltmp1914 # Offset: 1201
    000004b3: 	endbr64
    000004b7: 	jmp	.Ltmp1914 # Offset: 1207
    000004b9: 	endbr64
    000004bd: 	movq	%rax, %rbp
    000004c0: 	jmp	.Ltmp1916 # Offset: 1216
    000004c2: 	endbr64
    000004c6: 	jmp	.Ltmp1914 # Offset: 1222
    000004c8: 	endbr64
    000004cc: 	jmp	.Ltmp1914 # Offset: 1228
.Ltmp1916:
    000004ce: 	movq	(%rsp), %rdi
    000004d2: 	leaq	0x10(%rsp), %rax
    000004d7: 	cmpq	%rax, %rdi
    000004da: 	jne	.Ltmp1917 # Offset: 1242
    000004dc: 	jmp	.Ltmp1915 # Offset: 1244
DWARF CFI Instructions:
    <empty>
End of Function "_Z16TestOneContainerIPaEvT_S1_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z15TestSearchArrayIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEPFS6_S6_S6_aEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 298
  State       : disassembled
  Address     : 0xdb50
  Size        : 0x1ff
  MaxSize     : 0x200
  Offset      : 0xdb50
  Section     : .text
  Orc Section : .local.text._Z15TestSearchArrayIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEPFS6_S6_S6_aEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0297:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rcx, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	movl	$0x400, %edi
    00000017: 	pushq	%rbp
    00000018: 	pushq	%rbx
    00000019: 	movq	%rsi, %rbx
    0000001c: 	subq	$0x28, %rsp
    00000020: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000027: 	movq	%r8, 0x18(%rsp)
    0000002c: 	movq	%rdx, 0x8(%rsp)
    00000031: 	movb	%r9b, 0x17(%rsp)
    00000036: 	callq	_Znwm@PLT # Offset: 54
    0000003b: 	movabsq	$0x5851f42d4c957f2d, %r8
    00000045: 	leaq	0x9(%rax), %rdi
    00000049: 	movb	$0x0, (%rax)
    0000004c: 	movq	%rax, %r13
    0000004f: 	leaq	0x400(%rax), %rsi
    00000056: 	andq	$-0x8, %rdi
    0000005a: 	movq	$0x0, 0x1(%rax)
    00000062: 	movq	$0x0, 0x3f8(%rax)
    0000006d: 	subl	%edi, %eax
    0000006f: 	leal	0x400(%rax), %ecx
    00000075: 	xorl	%eax, %eax
    00000077: 	shrl	$0x3, %ecx
    0000007a: 	rep		stosq	%rax, %es:(%rdi)
    0000007d: 	movq	%r13, %rcx
    00000080: 	movabsq	$0x14057b7ef767814f, %rdi
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1918:
    00000090: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    00000097: 	addq	$0x1, %rcx
    0000009b: 	imulq	%r8, %rax
    0000009f: 	addq	%rdi, %rax
    000000a2: 	movq	%rax, %rdx
    000000a5: 	movq	%rax, %r9
    000000a8: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000000af: 	shrq	$0x14, %rdx
    000000b3: 	shlq	$0x17, %r9
    000000b7: 	xorq	%r9, %rdx
    000000ba: 	xorq	%rdx, %rax
    000000bd: 	xorl	%edx, %edx
    000000bf: 	divq	0x8(%rsp)
    000000c4: 	movzbl	(%r12,%rdx), %eax
    000000c9: 	movb	%al, -0x1(%rcx)
    000000cc: 	cmpq	%rsi, %rcx
    000000cf: 	jne	.Ltmp1918 # Offset: 207
    000000d1: 	callq	clock@PLT # Offset: 209
    000000d6: 	xorl	%r15d, %r15d
    000000d9: 	xorl	%ebp, %ebp
    000000db: 	movq	%rax, start_time(%rip)
.Ltmp1922:
    000000e2: 	leaq	0xc8(%rbp), %rax
    000000e9: 	cmpb	$0x0, 0x17(%rsp)
    000000ee: 	movq	%rax, (%rsp)
    000000f2: 	jne	.Ltmp1919 # Offset: 242
    000000f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1920:
    00000100: 	movq	%rbp, %rax
    00000103: 	movq	%rbx, %rsi
    00000106: 	addq	$0x1, %rbp
    0000010a: 	movq	%r12, %rdi
    0000010d: 	andl	$0x3ff, %eax
    00000112: 	movsbl	(%r13,%rax), %edx
    00000118: 	callq	*%r14 # Offset: 280
    0000011b: 	cmpq	%rax, %rbx
    0000011e: 	movl	$0x1, %eax
    00000123: 	cmovel	%eax, %r15d
    00000127: 	cmpq	(%rsp), %rbp
    0000012b: 	jne	.Ltmp1920 # Offset: 299
.Ltmp1924:
    0000012d: 	callq	clock@PLT # Offset: 301
    00000132: 	movsd	gMinimumTimeTarget(%rip), %xmm1
    0000013a: 	pxor	%xmm0, %xmm0
    0000013e: 	movq	%rax, end_time(%rip)
    00000145: 	subq	start_time(%rip), %rax
    0000014c: 	cvtsi2sd	%rax, %xmm0
    00000151: 	divsd	DATAat0x34410(%rip), %xmm0
    00000159: 	comisd	%xmm0, %xmm1
    0000015d: 	jbe	.Ltmp1921 # Offset: 349
    0000015f: 	cmpq	$0x5f5e0ff, %rbp
    00000166: 	jbe	.Ltmp1922 # Offset: 358
.Ltmp1921:
    0000016c: 	movq	0x18(%rsp), %rdx
    00000171: 	movq	0x8(%rsp), %rdi
    00000176: 	movq	%rbp, %rsi
    00000179: 	callq	_Z13record_resultdmmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 377
    0000017e: 	testb	%r15b, %r15b
    00000181: 	jne	.Ltmp1923 # Offset: 385
.Ltmp1925:
    00000183: 	addq	$0x28, %rsp
    00000187: 	movq	%r13, %rdi
    0000018a: 	movl	$0x400, %esi
    0000018f: 	popq	%rbx
    00000190: 	popq	%rbp
    00000191: 	popq	%r12
    00000193: 	popq	%r13
    00000195: 	popq	%r14
    00000197: 	popq	%r15
    00000199: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 409
    0000019e: 	nop # Size: 2
.Ltmp1919:
    000001a0: 	movq	%rbp, %rax
    000001a3: 	movq	%rbx, %rsi
    000001a6: 	addq	$0x1, %rbp
    000001aa: 	movq	%r12, %rdi
    000001ad: 	andl	$0x3ff, %eax
    000001b2: 	movsbl	(%r13,%rax), %edx
    000001b8: 	callq	*%r14 # Offset: 440
    000001bb: 	cmpq	(%rsp), %rbp
    000001bf: 	jne	.Ltmp1919 # Offset: 447
    000001c1: 	jmp	.Ltmp1924 # Offset: 449
.Ltmp1923:
    000001c6: 	movq	0x18(%rsp), %rax
    000001cb: 	leaq	DATAat0x34137(%rip), %rsi
    000001d2: 	movl	$0x1, %edi
    000001d7: 	movq	(%rax), %rdx
    000001da: 	xorl	%eax, %eax
    000001dc: 	callq	__printf_chk@PLT # Offset: 476
    000001e1: 	jmp	.Ltmp1925 # Offset: 481
    000001e3: 	endbr64
    000001e7: 	movq	%rax, %rbp
    000001ea: 	movq	%r13, %rdi
    000001ed: 	movl	$0x400, %esi
    000001f2: 	callq	_ZdlPvm@PLT # Offset: 498
    000001f7: 	movq	%rbp, %rdi
    000001fa: 	callq	_Unwind_Resume@PLT # Offset: 506
DWARF CFI Instructions:
    <empty>
End of Function "_Z15TestSearchArrayIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEPFS6_S6_S6_aEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z18quicksort2_forwardIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEEvT_S7_" after disassembly {
  Number      : 299
  State       : disassembled
  Address     : 0xdd50
  Size        : 0x120
  MaxSize     : 0x120
  Offset      : 0xdd50
  Section     : .text
  Orc Section : .local.text._Z18quicksort2_forwardIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEEvT_S7_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0298:
    00000000: 	endbr64
    00000004: 	cmpq	%rdi, %rsi
    00000007: 	je	.Ltmp1926 # Offset: 7
    0000000d: 	leaq	0x1(%rdi), %r8
    00000011: 	pushq	%r12
    00000013: 	movq	%rdi, %r12
    00000016: 	pushq	%rbp
    00000017: 	movq	%rsi, %rbp
    0000001a: 	pushq	%rbx
    0000001b: 	cmpq	%r8, %rsi
    0000001e: 	je	.Ltmp1927 # Offset: 30
.Ltmp1934:
    00000024: 	leaq	0x2(%r12), %rax
    00000029: 	cmpq	%rax, %rbp
    0000002c: 	je	.Ltmp1928 # Offset: 44
    00000032: 	movzwl	(%r12), %edx
    00000037: 	movzbl	0x1(%r12), %ecx
    0000003d: 	movzbl	(%r12), %eax
    00000042: 	rolw	$0x8, %dx
    00000046: 	cmpb	%al, %cl
    00000048: 	jge	.Ltmp1929 # Offset: 72
    0000004a: 	movw	%dx, (%r12)
    0000004f: 	movl	%ecx, %edx
    00000051: 	movl	%eax, %ecx
    00000053: 	movl	%edx, %eax
.Ltmp1929:
    00000055: 	movzbl	0x2(%r12), %edx
    0000005b: 	cmpb	%cl, %dl
    0000005d: 	jge	.Ltmp1930 # Offset: 93
    0000005f: 	movb	%cl, 0x2(%r12)
    00000064: 	movl	%edx, %ecx
    00000066: 	movb	%dl, 0x1(%r12)
    0000006b: 	cmpb	%al, %dl
    0000006d: 	jge	.Ltmp1930 # Offset: 109
    0000006f: 	movb	%al, 0x1(%r12)
    00000074: 	movl	%eax, %ecx
    00000076: 	movb	%dl, (%r12)
.Ltmp1930:
    0000007a: 	leaq	0x3(%r12), %rax
    0000007f: 	cmpq	%rax, %rbp
    00000082: 	je	.Ltmp1927 # Offset: 130
    00000084: 	leaq	0x1(%r8), %rax
    00000088: 	movq	%r8, %rbx
    0000008b: 	cmpq	%rbp, %rax
    0000008e: 	je	.Ltmp1931 # Offset: 142
    00000090: 	movl	$0x1, %esi
    00000095: 	nopl	(%rax) # Size: 3
.Ltmp1933:
    00000098: 	movzbl	(%rax), %edx
    0000009b: 	cmpb	%cl, %dl
    0000009d: 	jge	.Ltmp1932 # Offset: 157
    0000009f: 	movzbl	(%rbx), %edi
    000000a2: 	addq	$0x1, %rsi
    000000a6: 	addq	$0x1, %rbx
    000000aa: 	movb	%dil, (%rax)
    000000ad: 	movb	%dl, -0x1(%rbx)
.Ltmp1932:
    000000b0: 	addq	$0x1, %rax
    000000b4: 	cmpq	%rbp, %rax
    000000b7: 	jne	.Ltmp1933 # Offset: 183
    000000b9: 	leaq	0x1(%rbp), %rax
    000000bd: 	subq	%r8, %rax
    000000c0: 	subq	%rsi, %rax
    000000c3: 	cmpq	%rax, %rsi
    000000c6: 	jbe	.Ltmp1931 # Offset: 198
    000000c8: 	movq	%rbp, %rsi
    000000cb: 	movq	%rbx, %rdi
    000000ce: 	movq	%rbx, %rbp
    000000d1: 	callq	_Z18quicksort2_forwardIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEEvT_S7_ # Offset: 209
.Ltmp1935:
    000000d6: 	cmpq	%r12, %rbp
    000000d9: 	je	.Ltmp1927 # Offset: 217
    000000db: 	leaq	0x1(%r12), %r8
    000000e0: 	cmpq	%r8, %rbp
    000000e3: 	jne	.Ltmp1934 # Offset: 227
.Ltmp1927:
    000000e9: 	popq	%rbx
    000000ea: 	popq	%rbp
    000000eb: 	popq	%r12
    000000ed: 	retq # Offset: 237
    000000ee: 	nop # Size: 2
.Ltmp1931:
    000000f0: 	movq	%r12, %rdi
    000000f3: 	movq	%rbx, %rsi
    000000f6: 	movq	%rbx, %r12
    000000f9: 	callq	_Z18quicksort2_forwardIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEEvT_S7_ # Offset: 249
    000000fe: 	jmp	.Ltmp1935 # Offset: 254
.Ltmp1928:
    00000100: 	movzwl	(%r12), %eax
    00000105: 	movzbl	(%r12), %esi
    0000010a: 	rolw	$0x8, %ax
    0000010e: 	cmpb	%sil, 0x1(%r12)
    00000113: 	jge	.Ltmp1927 # Offset: 275
    00000115: 	movw	%ax, (%r12)
    0000011a: 	popq	%rbx
    0000011b: 	popq	%rbp
    0000011c: 	popq	%r12
    0000011e: 	retq # Offset: 286
.Ltmp1926:
    0000011f: 	retq # Offset: 287
DWARF CFI Instructions:
    <empty>
End of Function "_Z18quicksort2_forwardIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEEvT_S7_"

Binary Function "_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEPFS6_S6_S6_aEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 300
  State       : disassembled
  Address     : 0xde70
  Size        : 0x483
  MaxSize     : 0x490
  Offset      : 0xde70
  Section     : .text
  Orc Section : .local.text._Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEPFS6_S6_S6_aEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0299:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%r9d, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdx, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rsi, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	movq	%rdi, %rbx
    0000001d: 	subq	$0x58, %rsp
    00000021: 	movq	%rcx, 0x8(%rsp)
    00000026: 	movq	%r8, 0x10(%rsp)
    0000002b: 	movq	%fs:0x28, %rax
    00000034: 	movq	%rax, 0x48(%rsp)
    00000039: 	xorl	%eax, %eax
    0000003b: 	cmpq	%rsi, %rdi
    0000003e: 	je	.Ltmp1936 # Offset: 62
    00000040: 	movq	%rsi, %rdx
    00000043: 	movl	$0x5, %esi
    00000048: 	subq	%rdi, %rdx
    0000004b: 	callq	memset@PLT # Offset: 75
.Ltmp1936:
    00000050: 	movq	0x10(%rsp), %rsi
    00000055: 	leaq	0x20(%rsp), %r15
    0000005a: 	leaq	DATAat0x34160(%rip), %rdx
    00000061: 	movzbl	%r14b, %r14d
    00000065: 	movq	%r15, %rdi
    00000068: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 104
    0000006d: 	movq	0x8(%rsp), %rcx
    00000072: 	movl	%r14d, %r9d
    00000075: 	movq	%r15, %r8
    00000078: 	movq	%r12, %rdx
    0000007b: 	movq	%rbp, %rsi
    0000007e: 	movq	%r13, %rdi
    00000081: 	callq	_Z15TestSearchArrayIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEPFS6_S6_S6_aEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 129
    00000086: 	movq	0x20(%rsp), %rdi
    0000008b: 	leaq	0x30(%rsp), %rax
    00000090: 	movq	%rax, 0x18(%rsp)
    00000095: 	cmpq	%rax, %rdi
    00000098: 	je	.Ltmp1937 # Offset: 152
    0000009a: 	movq	0x30(%rsp), %rax
    0000009f: 	leaq	0x1(%rax), %rsi
    000000a3: 	callq	_ZdlPvm@PLT # Offset: 163
.Ltmp1937:
    000000a8: 	cmpq	$0x9, %r12
    000000ac: 	jbe	.Ltmp1938 # Offset: 172
    000000b2: 	movabsq	$-0x3333333333333333, %rdx
    000000bc: 	movq	%r12, %rax
    000000bf: 	mulq	%rdx
    000000c2: 	shrq	$0x3, %rdx
.Ltmp1949:
    000000c6: 	xorl	%ecx, %ecx
    000000c8: 	movq	%r13, %rdi
    000000cb: 	xorl	%esi, %esi
    000000cd: 	cmpq	%rcx, %r12
    000000d0: 	jbe	.Ltmp1939 # Offset: 208
    000000d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1942:
    000000d8: 	xorl	%eax, %eax
    000000da: 	leaq	0x1(%rdi), %r9
    000000de: 	nop # Size: 2
.Ltmp1941:
    000000e0: 	movb	%sil, (%rdi,%rax)
    000000e4: 	leaq	(%r9,%rax), %r8
    000000e8: 	addq	$0x1, %rax
    000000ec: 	addq	$0x1, %rcx
    000000f0: 	cmpq	%rdx, %rax
    000000f3: 	jae	.Ltmp1940 # Offset: 243
    000000f5: 	cmpq	%rcx, %r12
    000000f8: 	ja	.Ltmp1941 # Offset: 248
.Ltmp1940:
    000000fa: 	addl	$0x1, %esi
    000000fd: 	cmpq	%rcx, %r12
    00000100: 	jbe	.Ltmp1939 # Offset: 256
    00000102: 	movq	%r8, %rdi
    00000105: 	cmpq	%rcx, %r12
    00000108: 	ja	.Ltmp1942 # Offset: 264
.Ltmp1939:
    0000010a: 	movq	0x10(%rsp), %rsi
    0000010f: 	leaq	DATAat0x3416e(%rip), %rdx
    00000116: 	movq	%r15, %rdi
    00000119: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 281
    0000011e: 	movq	0x8(%rsp), %rcx
    00000123: 	movl	%r14d, %r9d
    00000126: 	movq	%r15, %r8
    00000129: 	movq	%r12, %rdx
    0000012c: 	movq	%rbp, %rsi
    0000012f: 	movq	%r13, %rdi
    00000132: 	callq	_Z15TestSearchArrayIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEPFS6_S6_S6_aEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 306
    00000137: 	movq	0x20(%rsp), %rdi
    0000013c: 	cmpq	0x18(%rsp), %rdi
    00000141: 	je	.Ltmp1943 # Offset: 321
    00000143: 	movq	0x30(%rsp), %rax
    00000148: 	leaq	0x1(%rax), %rsi
    0000014c: 	callq	_ZdlPvm@PLT # Offset: 332
.Ltmp1943:
    00000151: 	cmpq	%rbp, %r13
    00000154: 	je	.Ltmp1944 # Offset: 340
    0000015a: 	movq	%rbp, %rcx
    0000015d: 	movq	%r13, %rax
    00000160: 	subq	%r13, %rcx
    00000163: 	leaq	-0x1(%rcx), %rdx
    00000167: 	cmpq	$0xe, %rdx
    0000016b: 	jbe	.Ltmp1945 # Offset: 363
    00000171: 	movq	%rcx, %rdx
    00000174: 	movdqa	DATAat0x34430(%rip), %xmm2
    0000017c: 	movdqa	DATAat0x34440(%rip), %xmm11
    00000185: 	andq	$-0x10, %rdx
    00000189: 	movdqa	DATAat0x34450(%rip), %xmm10
    00000192: 	movdqa	DATAat0x34460(%rip), %xmm9
    0000019b: 	movdqa	DATAat0x34470(%rip), %xmm8
    000001a4: 	movdqa	DATAat0x34480(%rip), %xmm7
    000001ac: 	addq	%r13, %rdx
    000001af: 	movdqa	DATAat0x34490(%rip), %xmm6
    000001b7: 	movdqa	DATAat0x344a0(%rip), %xmm5
    000001bf: 	movdqa	DATAat0x344b0(%rip), %xmm4
    000001c7: 	movdqa	DATAat0x344c0(%rip), %xmm3
    000001cf: 	nop # Size: 1
.Ltmp1946:
    000001d0: 	movdqa	%xmm2, %xmm12
    000001d5: 	addq	$0x10, %rax
    000001d9: 	paddq	%xmm11, %xmm2
    000001de: 	movdqa	%xmm12, %xmm1
    000001e3: 	movdqa	%xmm12, %xmm0
    000001e8: 	movdqa	%xmm12, %xmm13
    000001ed: 	paddq	%xmm10, %xmm1
    000001f2: 	paddq	%xmm8, %xmm13
    000001f7: 	shufps	$0x88, %xmm1, %xmm0
    000001fb: 	movdqa	%xmm12, %xmm1
    00000200: 	paddq	%xmm9, %xmm1
    00000205: 	shufps	$0x88, %xmm13, %xmm1
    0000020a: 	movdqa	%xmm0, %xmm13
    0000020f: 	punpcklwd	%xmm1, %xmm0
    00000213: 	punpckhwd	%xmm1, %xmm13
    00000218: 	movdqa	%xmm0, %xmm1
    0000021c: 	punpckhwd	%xmm13, %xmm1
    00000221: 	punpcklwd	%xmm13, %xmm0
    00000226: 	movdqa	%xmm12, %xmm13
    0000022b: 	punpcklwd	%xmm1, %xmm0
    0000022f: 	movdqa	%xmm12, %xmm1
    00000234: 	paddq	%xmm6, %xmm13
    00000239: 	paddq	%xmm7, %xmm1
    0000023d: 	pand	%xmm3, %xmm0
    00000241: 	shufps	$0x88, %xmm13, %xmm1
    00000246: 	movdqa	%xmm12, %xmm13
    0000024b: 	paddq	%xmm4, %xmm12
    00000250: 	paddq	%xmm5, %xmm13
    00000255: 	shufps	$0x88, %xmm12, %xmm13
    0000025a: 	movdqa	%xmm1, %xmm12
    0000025f: 	punpcklwd	%xmm13, %xmm1
    00000264: 	punpckhwd	%xmm13, %xmm12
    00000269: 	movdqa	%xmm1, %xmm13
    0000026e: 	punpckhwd	%xmm12, %xmm13
    00000273: 	punpcklwd	%xmm12, %xmm1
    00000278: 	punpcklwd	%xmm13, %xmm1
    0000027d: 	pand	%xmm3, %xmm1
    00000281: 	packuswb	%xmm1, %xmm0
    00000285: 	movups	%xmm0, -0x10(%rax)
    00000289: 	cmpq	%rdx, %rax
    0000028c: 	jne	.Ltmp1946 # Offset: 652
    00000292: 	movq	%rcx, %rax
    00000295: 	andq	$-0x10, %rax
    00000299: 	leaq	(%r13,%rax), %rbx
    0000029e: 	cmpq	%rax, %rcx
    000002a1: 	je	.Ltmp1944 # Offset: 673
.Ltmp1950:
    000002a7: 	leaq	0x1(%rbx), %rdx
    000002ab: 	movb	%al, (%rbx)
    000002ad: 	leaq	0x1(%rax), %rcx
    000002b1: 	cmpq	%rdx, %rbp
    000002b4: 	je	.Ltmp1944 # Offset: 692
    000002ba: 	leaq	0x2(%rbx), %rdx
    000002be: 	movb	%cl, 0x1(%rbx)
    000002c1: 	leaq	0x2(%rax), %rsi
    000002c5: 	cmpq	%rdx, %rbp
    000002c8: 	je	.Ltmp1944 # Offset: 712
    000002ce: 	leaq	0x3(%rbx), %rdx
    000002d2: 	movb	%sil, 0x2(%rbx)
    000002d6: 	leaq	0x3(%rax), %rcx
    000002da: 	cmpq	%rdx, %rbp
    000002dd: 	je	.Ltmp1944 # Offset: 733
    000002e3: 	leaq	0x4(%rbx), %rdx
    000002e7: 	movb	%cl, 0x3(%rbx)
    000002ea: 	leaq	0x4(%rax), %rsi
    000002ee: 	cmpq	%rdx, %rbp
    000002f1: 	je	.Ltmp1944 # Offset: 753
    000002f7: 	leaq	0x5(%rbx), %rdx
    000002fb: 	movb	%sil, 0x4(%rbx)
    000002ff: 	leaq	0x5(%rax), %rcx
    00000303: 	cmpq	%rdx, %rbp
    00000306: 	je	.Ltmp1944 # Offset: 774
    0000030c: 	leaq	0x6(%rbx), %rdx
    00000310: 	movb	%cl, 0x5(%rbx)
    00000313: 	leaq	0x6(%rax), %rsi
    00000317: 	cmpq	%rdx, %rbp
    0000031a: 	je	.Ltmp1944 # Offset: 794
    00000320: 	leaq	0x7(%rbx), %rcx
    00000324: 	movb	%sil, 0x6(%rbx)
    00000328: 	leaq	0x7(%rax), %rdx
    0000032c: 	cmpq	%rcx, %rbp
    0000032f: 	je	.Ltmp1944 # Offset: 815
    00000331: 	movb	%dl, 0x7(%rbx)
    00000334: 	leaq	0x8(%rbx), %rdx
    00000338: 	leaq	0x8(%rax), %rcx
    0000033c: 	cmpq	%rdx, %rbp
    0000033f: 	je	.Ltmp1944 # Offset: 831
    00000341: 	movb	%cl, 0x8(%rbx)
    00000344: 	leaq	0x9(%rbx), %rcx
    00000348: 	leaq	0x9(%rax), %rdx
    0000034c: 	cmpq	%rcx, %rbp
    0000034f: 	je	.Ltmp1944 # Offset: 847
    00000351: 	movb	%dl, 0x9(%rbx)
    00000354: 	leaq	0xa(%rbx), %rdx
    00000358: 	leaq	0xa(%rax), %rcx
    0000035c: 	cmpq	%rdx, %rbp
    0000035f: 	je	.Ltmp1944 # Offset: 863
    00000361: 	movb	%cl, 0xa(%rbx)
    00000364: 	leaq	0xb(%rbx), %rcx
    00000368: 	leaq	0xb(%rax), %rdx
    0000036c: 	cmpq	%rcx, %rbp
    0000036f: 	je	.Ltmp1944 # Offset: 879
    00000371: 	movb	%dl, 0xb(%rbx)
    00000374: 	leaq	0xc(%rbx), %rdx
    00000378: 	leaq	0xc(%rax), %rcx
    0000037c: 	cmpq	%rdx, %rbp
    0000037f: 	je	.Ltmp1944 # Offset: 895
    00000381: 	movb	%cl, 0xc(%rbx)
    00000384: 	leaq	0xd(%rbx), %rcx
    00000388: 	leaq	0xd(%rax), %rdx
    0000038c: 	cmpq	%rcx, %rbp
    0000038f: 	je	.Ltmp1944 # Offset: 911
    00000391: 	movb	%dl, 0xd(%rbx)
    00000394: 	leaq	0xe(%rbx), %rdx
    00000398: 	addq	$0xe, %rax
    0000039c: 	cmpq	%rdx, %rbp
    0000039f: 	je	.Ltmp1944 # Offset: 927
    000003a1: 	movb	%al, 0xe(%rbx)
    000003a4: 	nopl	(%rax) # Size: 4
.Ltmp1944:
    000003a8: 	movq	%rbp, %rsi
    000003ab: 	movq	%r13, %rdi
    000003ae: 	callq	_Z18quicksort2_forwardIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEEvT_S7_ # Offset: 942
    000003b3: 	movq	0x10(%rsp), %rsi
    000003b8: 	leaq	DATAat0x34184(%rip), %rdx
    000003bf: 	movq	%r15, %rdi
    000003c2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 962
    000003c7: 	movq	0x8(%rsp), %rcx
    000003cc: 	movl	%r14d, %r9d
    000003cf: 	movq	%r15, %r8
    000003d2: 	movq	%r12, %rdx
    000003d5: 	movq	%rbp, %rsi
    000003d8: 	movq	%r13, %rdi
    000003db: 	callq	_Z15TestSearchArrayIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEPFS6_S6_S6_aEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 987
    000003e0: 	movq	0x20(%rsp), %rdi
    000003e5: 	cmpq	0x18(%rsp), %rdi
    000003ea: 	je	.Ltmp1947 # Offset: 1002
    000003ec: 	movq	0x30(%rsp), %rax
    000003f1: 	leaq	0x1(%rax), %rsi
    000003f5: 	callq	_ZdlPvm@PLT # Offset: 1013
.Ltmp1947:
    000003fa: 	movq	0x48(%rsp), %rax
    000003ff: 	subq	%fs:0x28, %rax
    00000408: 	jne	.Ltmp1948 # Offset: 1032
    0000040a: 	addq	$0x58, %rsp
    0000040e: 	popq	%rbx
    0000040f: 	popq	%rbp
    00000410: 	popq	%r12
    00000412: 	popq	%r13
    00000414: 	popq	%r14
    00000416: 	popq	%r15
    00000418: 	retq # Offset: 1048
.Ltmp1938:
    00000419: 	testq	%r12, %r12
    0000041c: 	je	.Ltmp1939 # Offset: 1052
    00000422: 	movl	$0x1, %edx
    00000427: 	jmp	.Ltmp1949 # Offset: 1063
.Ltmp1945:
    0000042c: 	xorl	%eax, %eax
    0000042e: 	jmp	.Ltmp1950 # Offset: 1070
.Ltmp1948:
    00000433: 	callq	__stack_chk_fail@PLT # Offset: 1075
    00000438: 	endbr64
.Ltmp1953:
    0000043c: 	movq	%rax, %rbp
    0000043f: 	jmp	.Ltmp1951 # Offset: 1087
    00000441: 	endbr64
    00000445: 	movq	%rax, %rbp
    00000448: 	jmp	.Ltmp1952 # Offset: 1096
    0000044a: 	endbr64
    0000044e: 	jmp	.Ltmp1953 # Offset: 1102
.Ltmp1952:
    00000450: 	movq	0x20(%rsp), %rdi
    00000455: 	leaq	0x30(%rsp), %rax
    0000045a: 	cmpq	%rax, %rdi
    0000045d: 	je	.Ltmp1954 # Offset: 1117
.Ltmp1955:
    0000045f: 	movq	0x30(%rsp), %rax
    00000464: 	leaq	0x1(%rax), %rsi
    00000468: 	callq	_ZdlPvm@PLT # Offset: 1128
.Ltmp1954:
    0000046d: 	movq	%rbp, %rdi
    00000470: 	callq	_Unwind_Resume@PLT # Offset: 1136
.Ltmp1951:
    00000475: 	movq	0x20(%rsp), %rdi
    0000047a: 	cmpq	0x18(%rsp), %rdi
    0000047f: 	jne	.Ltmp1955 # Offset: 1151
    00000481: 	jmp	.Ltmp1954 # Offset: 1153
DWARF CFI Instructions:
    <empty>
End of Function "_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEPFS6_S6_S6_aEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z23lower_bound_recur_innerIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEalET_S7_T0_T1_" after disassembly {
  Number      : 301
  State       : disassembled
  Address     : 0xe300
  Size        : 0x51
  MaxSize     : 0x60
  Offset      : 0xe300
  Section     : .text
  Orc Section : .local.text._Z23lower_bound_recur_innerIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEalET_S7_T0_T1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0300:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	testq	%rdx, %rdx
    0000000a: 	je	.Ltmp1956 # Offset: 10
    0000000c: 	movq	%rdx, %r8
    0000000f: 	movsbl	%sil, %r9d
    00000013: 	shrq	$0x3f, %r8
    00000017: 	addq	%rdx, %r8
    0000001a: 	sarq	%r8
    0000001d: 	leaq	(%rdi,%r8), %rdi
    00000021: 	cmpb	%sil, (%rdi)
    00000024: 	jge	.Ltmp1957 # Offset: 36
    00000026: 	addq	$0x1, %r8
    0000002a: 	addq	$0x1, %rdi
    0000002e: 	movl	%r9d, %esi
    00000031: 	subq	%r8, %rdx
    00000034: 	jmp	.LBB0300 # Offset: 52
    00000039: 	nopl	(%rax) # Size: 7
.Ltmp1957:
    00000040: 	movq	%r8, %rdx
    00000043: 	movl	%r9d, %esi
    00000046: 	movq	%rax, %rdi
    00000049: 	jmp	.LBB0300 # Offset: 73
    0000004e: 	nop # Size: 2
.Ltmp1956:
    00000050: 	retq # Offset: 80
DWARF CFI Instructions:
    <empty>
End of Function "_Z23lower_bound_recur_innerIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEalET_S7_T0_T1_"

Binary Function "_Z17lower_bound_recurIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaET_S7_S7_T0_" after disassembly {
  Number      : 302
  State       : disassembled
  Address     : 0xe360
  Size        : 0xf7
  MaxSize     : 0x100
  Offset      : 0xe360
  Section     : .text
  Orc Section : .local.text._Z17lower_bound_recurIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaET_S7_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0301:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	subq	%rdi, %rsi
    0000000a: 	je	.Ltmp1958 # Offset: 10
    0000000c: 	movl	%edx, %ecx
    0000000e: 	movsbl	%dl, %r9d
    00000012: 	movq	%rsi, %rdx
    00000015: 	subq	$0x8, %rsp
    00000019: 	shrq	$0x3f, %rdx
    0000001d: 	addq	%rsi, %rdx
    00000020: 	sarq	%rdx
    00000023: 	leaq	(%rdi,%rdx), %rdi
    00000027: 	cmpb	(%rdi), %cl
    00000029: 	jle	.Ltmp1959 # Offset: 41
    0000002b: 	addq	$0x1, %rdx
    0000002f: 	leaq	0x1(%rdi), %rax
    00000033: 	subq	%rdx, %rsi
    00000036: 	je	.Ltmp1960 # Offset: 54
    00000038: 	movq	%rsi, %rdx
    0000003b: 	shrq	$0x3f, %rdx
    0000003f: 	addq	%rsi, %rdx
    00000042: 	sarq	%rdx
    00000045: 	leaq	(%rax,%rdx), %rdi
    00000049: 	cmpb	(%rdi), %cl
    0000004b: 	jle	.Ltmp1961 # Offset: 75
    0000004d: 	addq	$0x1, %rdx
    00000051: 	addq	$0x1, %rdi
    00000055: 	subq	%rdx, %rsi
    00000058: 	movq	%rsi, %rdx
    0000005b: 	movl	%r9d, %esi
    0000005e: 	callq	_Z23lower_bound_recur_innerIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEalET_S7_T0_T1_ # Offset: 94
.Ltmp1960:
    00000063: 	addq	$0x8, %rsp
    00000067: 	retq # Offset: 103
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1958:
    00000070: 	retq # Offset: 112
    00000071: 	nopl	(%rax) # Size: 7
.Ltmp1959:
    00000078: 	testq	%rdx, %rdx
    0000007b: 	je	.Ltmp1960 # Offset: 123
    0000007d: 	testq	%rsi, %rsi
    00000080: 	leaq	0x3(%rsi), %r8
    00000084: 	cmovnsq	%rsi, %r8
    00000088: 	sarq	$0x2, %r8
    0000008c: 	leaq	(%rax,%r8), %rdi
    00000090: 	cmpb	(%rdi), %cl
    00000092: 	jle	.Ltmp1962 # Offset: 146
    00000094: 	addq	$0x1, %r8
    00000098: 	addq	$0x1, %rdi
    0000009c: 	movl	%r9d, %esi
    0000009f: 	subq	%r8, %rdx
    000000a2: 	callq	_Z23lower_bound_recur_innerIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEalET_S7_T0_T1_ # Offset: 162
    000000a7: 	jmp	.Ltmp1960 # Offset: 167
    000000a9: 	nopl	(%rax) # Size: 7
.Ltmp1961:
    000000b0: 	movl	%r9d, %esi
    000000b3: 	movq	%rax, %rdi
    000000b6: 	callq	_Z23lower_bound_recur_innerIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEalET_S7_T0_T1_ # Offset: 182
    000000bb: 	jmp	.Ltmp1960 # Offset: 187
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp1962:
    000000c0: 	testq	%r8, %r8
    000000c3: 	je	.Ltmp1960 # Offset: 195
    000000c5: 	testq	%rsi, %rsi
    000000c8: 	leaq	0x7(%rsi), %rdx
    000000cc: 	cmovnsq	%rsi, %rdx
    000000d0: 	sarq	$0x3, %rdx
    000000d4: 	leaq	(%rax,%rdx), %rsi
    000000d8: 	cmpb	(%rsi), %cl
    000000da: 	jle	.Ltmp1961 # Offset: 218
    000000dc: 	leaq	0x1(%rdx), %rax
    000000e0: 	movq	%r8, %rdx
    000000e3: 	leaq	0x1(%rsi), %rdi
    000000e7: 	movl	%r9d, %esi
    000000ea: 	subq	%rax, %rdx
    000000ed: 	callq	_Z23lower_bound_recur_innerIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEalET_S7_T0_T1_ # Offset: 237
    000000f2: 	jmp	.Ltmp1960 # Offset: 242
DWARF CFI Instructions:
    <empty>
End of Function "_Z17lower_bound_recurIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaET_S7_S7_T0_"

Binary Function "_Z23upper_bound_recur_innerIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEalET_S7_T0_T1_" after disassembly {
  Number      : 303
  State       : disassembled
  Address     : 0xe460
  Size        : 0x51
  MaxSize     : 0x60
  Offset      : 0xe460
  Section     : .text
  Orc Section : .local.text._Z23upper_bound_recur_innerIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEalET_S7_T0_T1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0302:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	testq	%rdx, %rdx
    0000000a: 	je	.Ltmp1963 # Offset: 10
    0000000c: 	movq	%rdx, %r8
    0000000f: 	movsbl	%sil, %r9d
    00000013: 	shrq	$0x3f, %r8
    00000017: 	addq	%rdx, %r8
    0000001a: 	sarq	%r8
    0000001d: 	leaq	(%rdi,%r8), %rdi
    00000021: 	cmpb	%sil, (%rdi)
    00000024: 	jle	.Ltmp1964 # Offset: 36
    00000026: 	movq	%r8, %rdx
    00000029: 	movl	%r9d, %esi
    0000002c: 	movq	%rax, %rdi
    0000002f: 	jmp	.LBB0302 # Offset: 47
    00000034: 	nopl	(%rax) # Size: 4
.Ltmp1964:
    00000038: 	addq	$0x1, %r8
    0000003c: 	addq	$0x1, %rdi
    00000040: 	movl	%r9d, %esi
    00000043: 	subq	%r8, %rdx
    00000046: 	jmp	.LBB0302 # Offset: 70
    0000004b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1963:
    00000050: 	retq # Offset: 80
DWARF CFI Instructions:
    <empty>
End of Function "_Z23upper_bound_recur_innerIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEalET_S7_T0_T1_"

Binary Function "_Z17upper_bound_recurIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaET_S7_S7_T0_" after disassembly {
  Number      : 304
  State       : disassembled
  Address     : 0xe4c0
  Size        : 0xf8
  MaxSize     : 0x100
  Offset      : 0xe4c0
  Section     : .text
  Orc Section : .local.text._Z17upper_bound_recurIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaET_S7_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0303:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	subq	%rdi, %rsi
    0000000a: 	je	.Ltmp1965 # Offset: 10
    0000000c: 	movq	%rsi, %rcx
    0000000f: 	movl	%edx, %r8d
    00000012: 	movsbl	%dl, %r9d
    00000016: 	subq	$0x8, %rsp
    0000001a: 	shrq	$0x3f, %rcx
    0000001e: 	addq	%rsi, %rcx
    00000021: 	sarq	%rcx
    00000024: 	leaq	(%rdi,%rcx), %rdx
    00000028: 	cmpb	(%rdx), %r8b
    0000002b: 	jge	.Ltmp1966 # Offset: 43
    0000002d: 	testq	%rcx, %rcx
    00000030: 	je	.Ltmp1967 # Offset: 48
    00000032: 	testq	%rsi, %rsi
    00000035: 	leaq	0x3(%rsi), %rdx
    00000039: 	cmovnsq	%rsi, %rdx
    0000003d: 	sarq	$0x2, %rdx
    00000041: 	leaq	(%rdi,%rdx), %rsi
    00000045: 	cmpb	(%rsi), %r8b
    00000048: 	jl	.Ltmp1968 # Offset: 72
    0000004a: 	addq	$0x1, %rdx
    0000004e: 	leaq	0x1(%rsi), %rax
    00000052: 	subq	%rdx, %rcx
    00000055: 	je	.Ltmp1967 # Offset: 85
    00000057: 	movq	%rcx, %rdx
    0000005a: 	shrq	$0x3f, %rdx
    0000005e: 	addq	%rcx, %rdx
    00000061: 	sarq	%rdx
    00000064: 	leaq	(%rax,%rdx), %rsi
    00000068: 	cmpb	(%rsi), %r8b
    0000006b: 	jge	.Ltmp1969 # Offset: 107
    0000006d: 	nopl	(%rax) # Size: 3
.Ltmp1968:
    00000070: 	movl	%r9d, %esi
    00000073: 	movq	%rax, %rdi
    00000076: 	callq	_Z23upper_bound_recur_innerIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEalET_S7_T0_T1_ # Offset: 118
.Ltmp1967:
    0000007b: 	addq	$0x8, %rsp
    0000007f: 	retq # Offset: 127
.Ltmp1965:
    00000080: 	retq # Offset: 128
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp1966:
    00000088: 	addq	$0x1, %rcx
    0000008c: 	leaq	0x1(%rdx), %rax
    00000090: 	subq	%rcx, %rsi
    00000093: 	je	.Ltmp1967 # Offset: 147
    00000095: 	movq	%rsi, %rcx
    00000098: 	shrq	$0x3f, %rcx
    0000009c: 	addq	%rsi, %rcx
    0000009f: 	sarq	%rcx
    000000a2: 	leaq	(%rax,%rcx), %rdi
    000000a6: 	cmpb	(%rdi), %r8b
    000000a9: 	jge	.Ltmp1970 # Offset: 169
    000000ab: 	testq	%rcx, %rcx
    000000ae: 	je	.Ltmp1967 # Offset: 174
    000000b0: 	testq	%rsi, %rsi
    000000b3: 	leaq	0x3(%rsi), %rdx
    000000b7: 	cmovnsq	%rsi, %rdx
    000000bb: 	sarq	$0x2, %rdx
    000000bf: 	leaq	(%rax,%rdx), %rsi
    000000c3: 	cmpb	(%rsi), %r8b
    000000c6: 	jl	.Ltmp1968 # Offset: 198
.Ltmp1969:
    000000c8: 	leaq	0x1(%rdx), %rax
    000000cc: 	movq	%rcx, %rdx
    000000cf: 	leaq	0x1(%rsi), %rdi
    000000d3: 	movl	%r9d, %esi
    000000d6: 	subq	%rax, %rdx
    000000d9: 	callq	_Z23upper_bound_recur_innerIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEalET_S7_T0_T1_ # Offset: 217
    000000de: 	jmp	.Ltmp1967 # Offset: 222
.Ltmp1970:
    000000e0: 	addq	$0x1, %rcx
    000000e4: 	movq	%rsi, %rdx
    000000e7: 	addq	$0x1, %rdi
    000000eb: 	movl	%r9d, %esi
    000000ee: 	subq	%rcx, %rdx
    000000f1: 	callq	_Z23upper_bound_recur_innerIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEalET_S7_T0_T1_ # Offset: 241
    000000f6: 	jmp	.Ltmp1967 # Offset: 246
DWARF CFI Instructions:
    <empty>
End of Function "_Z17upper_bound_recurIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaET_S7_S7_T0_"

Binary Function "_Z15TestSearchArrayIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEPFbS6_S6_aEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 305
  State       : disassembled
  Address     : 0xe5c0
  Size        : 0x1c7
  MaxSize     : 0x1d0
  Offset      : 0xe5c0
  Section     : .text
  Orc Section : .local.text._Z15TestSearchArrayIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEPFbS6_S6_aEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0304:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rcx, %r15
    00000009: 	pushq	%r14
    0000000b: 	movq	%rsi, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %r12
    00000015: 	movl	$0x400, %edi
    0000001a: 	pushq	%rbp
    0000001b: 	pushq	%rbx
    0000001c: 	subq	$0x28, %rsp
    00000020: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000027: 	movq	%r8, 0x18(%rsp)
    0000002c: 	movq	%rdx, 0x10(%rsp)
    00000031: 	movb	%r9b, 0xf(%rsp)
    00000036: 	callq	_Znwm@PLT # Offset: 54
    0000003b: 	movabsq	$0x5851f42d4c957f2d, %r8
    00000045: 	leaq	0x9(%rax), %rdi
    00000049: 	movb	$0x0, (%rax)
    0000004c: 	movq	%rax, %r13
    0000004f: 	leaq	0x400(%rax), %rsi
    00000056: 	andq	$-0x8, %rdi
    0000005a: 	movq	$0x0, 0x1(%rax)
    00000062: 	movq	$0x0, 0x3f8(%rax)
    0000006d: 	subl	%edi, %eax
    0000006f: 	leal	0x400(%rax), %ecx
    00000075: 	xorl	%eax, %eax
    00000077: 	shrl	$0x3, %ecx
    0000007a: 	rep		stosq	%rax, %es:(%rdi)
    0000007d: 	movq	%r13, %rcx
    00000080: 	movabsq	$0x14057b7ef767814f, %rdi
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1971:
    00000090: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    00000097: 	addq	$0x1, %rcx
    0000009b: 	imulq	%r8, %rax
    0000009f: 	addq	%rdi, %rax
    000000a2: 	movq	%rax, %rdx
    000000a5: 	movq	%rax, %r9
    000000a8: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000000af: 	shrq	$0x14, %rdx
    000000b3: 	shlq	$0x17, %r9
    000000b7: 	xorq	%r9, %rdx
    000000ba: 	xorq	%rdx, %rax
    000000bd: 	xorl	%edx, %edx
    000000bf: 	divq	0x10(%rsp)
    000000c4: 	movzbl	(%r12,%rdx), %eax
    000000c9: 	movb	%al, -0x1(%rcx)
    000000cc: 	cmpq	%rsi, %rcx
    000000cf: 	jne	.Ltmp1971 # Offset: 207
    000000d1: 	callq	clock@PLT # Offset: 209
    000000d6: 	xorl	%ebx, %ebx
    000000d8: 	xorl	%ebp, %ebp
    000000da: 	movq	%rax, start_time(%rip)
.Ltmp1975:
    000000e1: 	leaq	0xc8(%rbp), %rax
    000000e8: 	movq	%rax, (%rsp)
    000000ec: 	nopl	(%rax) # Size: 4
.Ltmp1973:
    000000f0: 	movq	%rbp, %rax
    000000f3: 	movq	%r14, %rsi
    000000f6: 	addq	$0x1, %rbp
    000000fa: 	movq	%r12, %rdi
    000000fd: 	andl	$0x3ff, %eax
    00000102: 	movsbl	(%r13,%rax), %edx
    00000108: 	callq	*%r15 # Offset: 264
    0000010b: 	testb	%al, %al
    0000010d: 	jne	.Ltmp1972 # Offset: 269
    0000010f: 	cmpb	$0x0, 0xf(%rsp)
    00000114: 	movl	$0x1, %eax
    00000119: 	cmovel	%eax, %ebx
.Ltmp1972:
    0000011c: 	cmpq	(%rsp), %rbp
    00000120: 	jne	.Ltmp1973 # Offset: 288
    00000122: 	callq	clock@PLT # Offset: 290
    00000127: 	movsd	gMinimumTimeTarget(%rip), %xmm1
    0000012f: 	pxor	%xmm0, %xmm0
    00000133: 	movq	%rax, end_time(%rip)
    0000013a: 	subq	start_time(%rip), %rax
    00000141: 	cvtsi2sd	%rax, %xmm0
    00000146: 	divsd	DATAat0x34410(%rip), %xmm0
    0000014e: 	comisd	%xmm0, %xmm1
    00000152: 	jbe	.Ltmp1974 # Offset: 338
    00000154: 	cmpq	$0x5f5e0ff, %rbp
    0000015b: 	jbe	.Ltmp1975 # Offset: 347
.Ltmp1974:
    0000015d: 	movq	0x18(%rsp), %rdx
    00000162: 	movq	0x10(%rsp), %rdi
    00000167: 	movq	%rbp, %rsi
    0000016a: 	callq	_Z13record_resultdmmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 362
    0000016f: 	testb	%bl, %bl
    00000171: 	jne	.Ltmp1976 # Offset: 369
.Ltmp1977:
    00000173: 	addq	$0x28, %rsp
    00000177: 	movq	%r13, %rdi
    0000017a: 	movl	$0x400, %esi
    0000017f: 	popq	%rbx
    00000180: 	popq	%rbp
    00000181: 	popq	%r12
    00000183: 	popq	%r13
    00000185: 	popq	%r14
    00000187: 	popq	%r15
    00000189: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 393
.Ltmp1976:
    0000018e: 	movq	0x18(%rsp), %rax
    00000193: 	leaq	DATAat0x34137(%rip), %rsi
    0000019a: 	movl	$0x1, %edi
    0000019f: 	movq	(%rax), %rdx
    000001a2: 	xorl	%eax, %eax
    000001a4: 	callq	__printf_chk@PLT # Offset: 420
    000001a9: 	jmp	.Ltmp1977 # Offset: 425
    000001ab: 	endbr64
    000001af: 	movq	%rax, %rbp
    000001b2: 	movq	%r13, %rdi
    000001b5: 	movl	$0x400, %esi
    000001ba: 	callq	_ZdlPvm@PLT # Offset: 442
    000001bf: 	movq	%rbp, %rdi
    000001c2: 	callq	_Unwind_Resume@PLT # Offset: 450
DWARF CFI Instructions:
    <empty>
End of Function "_Z15TestSearchArrayIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEPFbS6_S6_aEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEPFbS6_S6_aEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 306
  State       : disassembled
  Address     : 0xe790
  Size        : 0x483
  MaxSize     : 0x490
  Offset      : 0xe790
  Section     : .text
  Orc Section : .local.text._Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEPFbS6_S6_aEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0305:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movl	%r9d, %r14d
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdx, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rsi, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	movq	%rdi, %rbx
    0000001d: 	subq	$0x58, %rsp
    00000021: 	movq	%rcx, 0x8(%rsp)
    00000026: 	movq	%r8, 0x10(%rsp)
    0000002b: 	movq	%fs:0x28, %rax
    00000034: 	movq	%rax, 0x48(%rsp)
    00000039: 	xorl	%eax, %eax
    0000003b: 	cmpq	%rsi, %rdi
    0000003e: 	je	.Ltmp1978 # Offset: 62
    00000040: 	movq	%rsi, %rdx
    00000043: 	movl	$0x5, %esi
    00000048: 	subq	%rdi, %rdx
    0000004b: 	callq	memset@PLT # Offset: 75
.Ltmp1978:
    00000050: 	movq	0x10(%rsp), %rsi
    00000055: 	leaq	0x20(%rsp), %r15
    0000005a: 	leaq	DATAat0x34160(%rip), %rdx
    00000061: 	movzbl	%r14b, %r14d
    00000065: 	movq	%r15, %rdi
    00000068: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 104
    0000006d: 	movq	0x8(%rsp), %rcx
    00000072: 	movl	%r14d, %r9d
    00000075: 	movq	%r15, %r8
    00000078: 	movq	%r12, %rdx
    0000007b: 	movq	%rbp, %rsi
    0000007e: 	movq	%r13, %rdi
    00000081: 	callq	_Z15TestSearchArrayIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEPFbS6_S6_aEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 129
    00000086: 	movq	0x20(%rsp), %rdi
    0000008b: 	leaq	0x30(%rsp), %rax
    00000090: 	movq	%rax, 0x18(%rsp)
    00000095: 	cmpq	%rax, %rdi
    00000098: 	je	.Ltmp1979 # Offset: 152
    0000009a: 	movq	0x30(%rsp), %rax
    0000009f: 	leaq	0x1(%rax), %rsi
    000000a3: 	callq	_ZdlPvm@PLT # Offset: 163
.Ltmp1979:
    000000a8: 	cmpq	$0x9, %r12
    000000ac: 	jbe	.Ltmp1980 # Offset: 172
    000000b2: 	movabsq	$-0x3333333333333333, %rdx
    000000bc: 	movq	%r12, %rax
    000000bf: 	mulq	%rdx
    000000c2: 	shrq	$0x3, %rdx
.Ltmp1991:
    000000c6: 	xorl	%ecx, %ecx
    000000c8: 	movq	%r13, %rdi
    000000cb: 	xorl	%esi, %esi
    000000cd: 	cmpq	%rcx, %r12
    000000d0: 	jbe	.Ltmp1981 # Offset: 208
    000000d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1984:
    000000d8: 	xorl	%eax, %eax
    000000da: 	leaq	0x1(%rdi), %r9
    000000de: 	nop # Size: 2
.Ltmp1983:
    000000e0: 	movb	%sil, (%rdi,%rax)
    000000e4: 	leaq	(%r9,%rax), %r8
    000000e8: 	addq	$0x1, %rax
    000000ec: 	addq	$0x1, %rcx
    000000f0: 	cmpq	%rdx, %rax
    000000f3: 	jae	.Ltmp1982 # Offset: 243
    000000f5: 	cmpq	%rcx, %r12
    000000f8: 	ja	.Ltmp1983 # Offset: 248
.Ltmp1982:
    000000fa: 	addl	$0x1, %esi
    000000fd: 	cmpq	%rcx, %r12
    00000100: 	jbe	.Ltmp1981 # Offset: 256
    00000102: 	movq	%r8, %rdi
    00000105: 	cmpq	%rcx, %r12
    00000108: 	ja	.Ltmp1984 # Offset: 264
.Ltmp1981:
    0000010a: 	movq	0x10(%rsp), %rsi
    0000010f: 	leaq	DATAat0x3416e(%rip), %rdx
    00000116: 	movq	%r15, %rdi
    00000119: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 281
    0000011e: 	movq	0x8(%rsp), %rcx
    00000123: 	movl	%r14d, %r9d
    00000126: 	movq	%r15, %r8
    00000129: 	movq	%r12, %rdx
    0000012c: 	movq	%rbp, %rsi
    0000012f: 	movq	%r13, %rdi
    00000132: 	callq	_Z15TestSearchArrayIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEPFbS6_S6_aEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 306
    00000137: 	movq	0x20(%rsp), %rdi
    0000013c: 	cmpq	0x18(%rsp), %rdi
    00000141: 	je	.Ltmp1985 # Offset: 321
    00000143: 	movq	0x30(%rsp), %rax
    00000148: 	leaq	0x1(%rax), %rsi
    0000014c: 	callq	_ZdlPvm@PLT # Offset: 332
.Ltmp1985:
    00000151: 	cmpq	%rbp, %r13
    00000154: 	je	.Ltmp1986 # Offset: 340
    0000015a: 	movq	%rbp, %rcx
    0000015d: 	movq	%r13, %rax
    00000160: 	subq	%r13, %rcx
    00000163: 	leaq	-0x1(%rcx), %rdx
    00000167: 	cmpq	$0xe, %rdx
    0000016b: 	jbe	.Ltmp1987 # Offset: 363
    00000171: 	movq	%rcx, %rdx
    00000174: 	movdqa	DATAat0x34430(%rip), %xmm2
    0000017c: 	movdqa	DATAat0x34440(%rip), %xmm11
    00000185: 	andq	$-0x10, %rdx
    00000189: 	movdqa	DATAat0x34450(%rip), %xmm10
    00000192: 	movdqa	DATAat0x34460(%rip), %xmm9
    0000019b: 	movdqa	DATAat0x34470(%rip), %xmm8
    000001a4: 	movdqa	DATAat0x34480(%rip), %xmm7
    000001ac: 	addq	%r13, %rdx
    000001af: 	movdqa	DATAat0x34490(%rip), %xmm6
    000001b7: 	movdqa	DATAat0x344a0(%rip), %xmm5
    000001bf: 	movdqa	DATAat0x344b0(%rip), %xmm4
    000001c7: 	movdqa	DATAat0x344c0(%rip), %xmm3
    000001cf: 	nop # Size: 1
.Ltmp1988:
    000001d0: 	movdqa	%xmm2, %xmm12
    000001d5: 	addq	$0x10, %rax
    000001d9: 	paddq	%xmm11, %xmm2
    000001de: 	movdqa	%xmm12, %xmm1
    000001e3: 	movdqa	%xmm12, %xmm0
    000001e8: 	movdqa	%xmm12, %xmm13
    000001ed: 	paddq	%xmm10, %xmm1
    000001f2: 	paddq	%xmm8, %xmm13
    000001f7: 	shufps	$0x88, %xmm1, %xmm0
    000001fb: 	movdqa	%xmm12, %xmm1
    00000200: 	paddq	%xmm9, %xmm1
    00000205: 	shufps	$0x88, %xmm13, %xmm1
    0000020a: 	movdqa	%xmm0, %xmm13
    0000020f: 	punpcklwd	%xmm1, %xmm0
    00000213: 	punpckhwd	%xmm1, %xmm13
    00000218: 	movdqa	%xmm0, %xmm1
    0000021c: 	punpckhwd	%xmm13, %xmm1
    00000221: 	punpcklwd	%xmm13, %xmm0
    00000226: 	movdqa	%xmm12, %xmm13
    0000022b: 	punpcklwd	%xmm1, %xmm0
    0000022f: 	movdqa	%xmm12, %xmm1
    00000234: 	paddq	%xmm6, %xmm13
    00000239: 	paddq	%xmm7, %xmm1
    0000023d: 	pand	%xmm3, %xmm0
    00000241: 	shufps	$0x88, %xmm13, %xmm1
    00000246: 	movdqa	%xmm12, %xmm13
    0000024b: 	paddq	%xmm4, %xmm12
    00000250: 	paddq	%xmm5, %xmm13
    00000255: 	shufps	$0x88, %xmm12, %xmm13
    0000025a: 	movdqa	%xmm1, %xmm12
    0000025f: 	punpcklwd	%xmm13, %xmm1
    00000264: 	punpckhwd	%xmm13, %xmm12
    00000269: 	movdqa	%xmm1, %xmm13
    0000026e: 	punpckhwd	%xmm12, %xmm13
    00000273: 	punpcklwd	%xmm12, %xmm1
    00000278: 	punpcklwd	%xmm13, %xmm1
    0000027d: 	pand	%xmm3, %xmm1
    00000281: 	packuswb	%xmm1, %xmm0
    00000285: 	movups	%xmm0, -0x10(%rax)
    00000289: 	cmpq	%rdx, %rax
    0000028c: 	jne	.Ltmp1988 # Offset: 652
    00000292: 	movq	%rcx, %rax
    00000295: 	andq	$-0x10, %rax
    00000299: 	leaq	(%r13,%rax), %rbx
    0000029e: 	cmpq	%rax, %rcx
    000002a1: 	je	.Ltmp1986 # Offset: 673
.Ltmp1992:
    000002a7: 	leaq	0x1(%rbx), %rdx
    000002ab: 	movb	%al, (%rbx)
    000002ad: 	leaq	0x1(%rax), %rcx
    000002b1: 	cmpq	%rdx, %rbp
    000002b4: 	je	.Ltmp1986 # Offset: 692
    000002ba: 	leaq	0x2(%rbx), %rdx
    000002be: 	movb	%cl, 0x1(%rbx)
    000002c1: 	leaq	0x2(%rax), %rsi
    000002c5: 	cmpq	%rdx, %rbp
    000002c8: 	je	.Ltmp1986 # Offset: 712
    000002ce: 	leaq	0x3(%rbx), %rdx
    000002d2: 	movb	%sil, 0x2(%rbx)
    000002d6: 	leaq	0x3(%rax), %rcx
    000002da: 	cmpq	%rdx, %rbp
    000002dd: 	je	.Ltmp1986 # Offset: 733
    000002e3: 	leaq	0x4(%rbx), %rdx
    000002e7: 	movb	%cl, 0x3(%rbx)
    000002ea: 	leaq	0x4(%rax), %rsi
    000002ee: 	cmpq	%rdx, %rbp
    000002f1: 	je	.Ltmp1986 # Offset: 753
    000002f7: 	leaq	0x5(%rbx), %rdx
    000002fb: 	movb	%sil, 0x4(%rbx)
    000002ff: 	leaq	0x5(%rax), %rcx
    00000303: 	cmpq	%rdx, %rbp
    00000306: 	je	.Ltmp1986 # Offset: 774
    0000030c: 	leaq	0x6(%rbx), %rdx
    00000310: 	movb	%cl, 0x5(%rbx)
    00000313: 	leaq	0x6(%rax), %rsi
    00000317: 	cmpq	%rdx, %rbp
    0000031a: 	je	.Ltmp1986 # Offset: 794
    00000320: 	leaq	0x7(%rbx), %rcx
    00000324: 	movb	%sil, 0x6(%rbx)
    00000328: 	leaq	0x7(%rax), %rdx
    0000032c: 	cmpq	%rcx, %rbp
    0000032f: 	je	.Ltmp1986 # Offset: 815
    00000331: 	movb	%dl, 0x7(%rbx)
    00000334: 	leaq	0x8(%rbx), %rdx
    00000338: 	leaq	0x8(%rax), %rcx
    0000033c: 	cmpq	%rdx, %rbp
    0000033f: 	je	.Ltmp1986 # Offset: 831
    00000341: 	movb	%cl, 0x8(%rbx)
    00000344: 	leaq	0x9(%rbx), %rcx
    00000348: 	leaq	0x9(%rax), %rdx
    0000034c: 	cmpq	%rcx, %rbp
    0000034f: 	je	.Ltmp1986 # Offset: 847
    00000351: 	movb	%dl, 0x9(%rbx)
    00000354: 	leaq	0xa(%rbx), %rdx
    00000358: 	leaq	0xa(%rax), %rcx
    0000035c: 	cmpq	%rdx, %rbp
    0000035f: 	je	.Ltmp1986 # Offset: 863
    00000361: 	movb	%cl, 0xa(%rbx)
    00000364: 	leaq	0xb(%rbx), %rcx
    00000368: 	leaq	0xb(%rax), %rdx
    0000036c: 	cmpq	%rcx, %rbp
    0000036f: 	je	.Ltmp1986 # Offset: 879
    00000371: 	movb	%dl, 0xb(%rbx)
    00000374: 	leaq	0xc(%rbx), %rdx
    00000378: 	leaq	0xc(%rax), %rcx
    0000037c: 	cmpq	%rdx, %rbp
    0000037f: 	je	.Ltmp1986 # Offset: 895
    00000381: 	movb	%cl, 0xc(%rbx)
    00000384: 	leaq	0xd(%rbx), %rcx
    00000388: 	leaq	0xd(%rax), %rdx
    0000038c: 	cmpq	%rcx, %rbp
    0000038f: 	je	.Ltmp1986 # Offset: 911
    00000391: 	movb	%dl, 0xd(%rbx)
    00000394: 	leaq	0xe(%rbx), %rdx
    00000398: 	addq	$0xe, %rax
    0000039c: 	cmpq	%rdx, %rbp
    0000039f: 	je	.Ltmp1986 # Offset: 927
    000003a1: 	movb	%al, 0xe(%rbx)
    000003a4: 	nopl	(%rax) # Size: 4
.Ltmp1986:
    000003a8: 	movq	%rbp, %rsi
    000003ab: 	movq	%r13, %rdi
    000003ae: 	callq	_Z18quicksort2_forwardIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEEvT_S7_ # Offset: 942
    000003b3: 	movq	0x10(%rsp), %rsi
    000003b8: 	leaq	DATAat0x34184(%rip), %rdx
    000003bf: 	movq	%r15, %rdi
    000003c2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 962
    000003c7: 	movq	0x8(%rsp), %rcx
    000003cc: 	movl	%r14d, %r9d
    000003cf: 	movq	%r15, %r8
    000003d2: 	movq	%r12, %rdx
    000003d5: 	movq	%rbp, %rsi
    000003d8: 	movq	%r13, %rdi
    000003db: 	callq	_Z15TestSearchArrayIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEPFbS6_S6_aEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 987
    000003e0: 	movq	0x20(%rsp), %rdi
    000003e5: 	cmpq	0x18(%rsp), %rdi
    000003ea: 	je	.Ltmp1989 # Offset: 1002
    000003ec: 	movq	0x30(%rsp), %rax
    000003f1: 	leaq	0x1(%rax), %rsi
    000003f5: 	callq	_ZdlPvm@PLT # Offset: 1013
.Ltmp1989:
    000003fa: 	movq	0x48(%rsp), %rax
    000003ff: 	subq	%fs:0x28, %rax
    00000408: 	jne	.Ltmp1990 # Offset: 1032
    0000040a: 	addq	$0x58, %rsp
    0000040e: 	popq	%rbx
    0000040f: 	popq	%rbp
    00000410: 	popq	%r12
    00000412: 	popq	%r13
    00000414: 	popq	%r14
    00000416: 	popq	%r15
    00000418: 	retq # Offset: 1048
.Ltmp1980:
    00000419: 	testq	%r12, %r12
    0000041c: 	je	.Ltmp1981 # Offset: 1052
    00000422: 	movl	$0x1, %edx
    00000427: 	jmp	.Ltmp1991 # Offset: 1063
.Ltmp1987:
    0000042c: 	xorl	%eax, %eax
    0000042e: 	jmp	.Ltmp1992 # Offset: 1070
.Ltmp1990:
    00000433: 	callq	__stack_chk_fail@PLT # Offset: 1075
    00000438: 	endbr64
.Ltmp1995:
    0000043c: 	movq	%rax, %rbp
    0000043f: 	jmp	.Ltmp1993 # Offset: 1087
    00000441: 	endbr64
    00000445: 	movq	%rax, %rbp
    00000448: 	jmp	.Ltmp1994 # Offset: 1096
    0000044a: 	endbr64
    0000044e: 	jmp	.Ltmp1995 # Offset: 1102
.Ltmp1994:
    00000450: 	movq	0x20(%rsp), %rdi
    00000455: 	leaq	0x30(%rsp), %rax
    0000045a: 	cmpq	%rax, %rdi
    0000045d: 	je	.Ltmp1996 # Offset: 1117
.Ltmp1997:
    0000045f: 	movq	0x30(%rsp), %rax
    00000464: 	leaq	0x1(%rax), %rsi
    00000468: 	callq	_ZdlPvm@PLT # Offset: 1128
.Ltmp1996:
    0000046d: 	movq	%rbp, %rdi
    00000470: 	callq	_Unwind_Resume@PLT # Offset: 1136
.Ltmp1993:
    00000475: 	movq	0x20(%rsp), %rdi
    0000047a: 	cmpq	0x18(%rsp), %rdi
    0000047f: 	jne	.Ltmp1997 # Offset: 1151
    00000481: 	jmp	.Ltmp1996 # Offset: 1153
DWARF CFI Instructions:
    <empty>
End of Function "_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEPFbS6_S6_aEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z16TestOneContainerIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEEvT_S7_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 307
  State       : disassembled
  Address     : 0xec20
  Size        : 0x4de
  MaxSize     : 0x4e0
  Offset      : 0xec20
  Section     : .text
  Orc Section : .local.text._Z16TestOneContainerIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEEvT_S7_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0306:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdx, %r15
    00000009: 	leaq	DATAat0x3418f(%rip), %rdx
    00000010: 	pushq	%r14
    00000012: 	movq	%rsi, %r14
    00000015: 	movq	%rcx, %rsi
    00000018: 	pushq	%r13
    0000001a: 	movq	%rdi, %r13
    0000001d: 	pushq	%r12
    0000001f: 	movq	%rcx, %r12
    00000022: 	pushq	%rbp
    00000023: 	pushq	%rbx
    00000024: 	subq	$0x38, %rsp
    00000028: 	movq	%fs:0x28, %rax
    00000031: 	movq	%rax, 0x28(%rsp)
    00000036: 	xorl	%eax, %eax
    00000038: 	movq	%rsp, %rbp
    0000003b: 	movq	%rbp, %rdi
    0000003e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 62
    00000043: 	xorl	%r9d, %r9d
    00000046: 	movq	%rbp, %r8
    00000049: 	movq	%r15, %rdx
    0000004c: 	leaq	_Z14std_lowerboundIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaET_S7_S7_T0_(%rip), %rcx
    00000053: 	movq	%r14, %rsi
    00000056: 	movq	%r13, %rdi
    00000059: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEPFS6_S6_S6_aEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 89
    0000005e: 	movq	(%rsp), %rdi
    00000062: 	leaq	0x10(%rsp), %rbx
    00000067: 	cmpq	%rbx, %rdi
    0000006a: 	je	.Ltmp1998 # Offset: 106
    0000006c: 	movq	0x10(%rsp), %rax
    00000071: 	leaq	0x1(%rax), %rsi
    00000075: 	callq	_ZdlPvm@PLT # Offset: 117
.Ltmp1998:
    0000007a: 	leaq	DATAat0x341a1(%rip), %rdx
    00000081: 	movq	%r12, %rsi
    00000084: 	movq	%rbp, %rdi
    00000087: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 135
    0000008c: 	xorl	%r9d, %r9d
    0000008f: 	movq	%rbp, %r8
    00000092: 	movq	%r15, %rdx
    00000095: 	leaq	_Z12lower_bound1IN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaET_S7_S7_T0_(%rip), %rcx
    0000009c: 	movq	%r14, %rsi
    0000009f: 	movq	%r13, %rdi
    000000a2: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEPFS6_S6_S6_aEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 162
    000000a7: 	movq	(%rsp), %rdi
    000000ab: 	cmpq	%rbx, %rdi
    000000ae: 	je	.Ltmp1999 # Offset: 174
    000000b0: 	movq	0x10(%rsp), %rax
    000000b5: 	leaq	0x1(%rax), %rsi
    000000b9: 	callq	_ZdlPvm@PLT # Offset: 185
.Ltmp1999:
    000000be: 	leaq	DATAat0x341af(%rip), %rdx
    000000c5: 	movq	%r12, %rsi
    000000c8: 	movq	%rbp, %rdi
    000000cb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 203
    000000d0: 	xorl	%r9d, %r9d
    000000d3: 	movq	%rbp, %r8
    000000d6: 	movq	%r15, %rdx
    000000d9: 	leaq	_Z12lower_bound2IN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaET_S7_S7_T0_(%rip), %rcx
    000000e0: 	movq	%r14, %rsi
    000000e3: 	movq	%r13, %rdi
    000000e6: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEPFS6_S6_S6_aEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 230
    000000eb: 	movq	(%rsp), %rdi
    000000ef: 	cmpq	%rbx, %rdi
    000000f2: 	je	.Ltmp2000 # Offset: 242
    000000f4: 	movq	0x10(%rsp), %rax
    000000f9: 	leaq	0x1(%rax), %rsi
    000000fd: 	callq	_ZdlPvm@PLT # Offset: 253
.Ltmp2000:
    00000102: 	leaq	DATAat0x341bd(%rip), %rdx
    00000109: 	movq	%r12, %rsi
    0000010c: 	movq	%rbp, %rdi
    0000010f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 271
    00000114: 	xorl	%r9d, %r9d
    00000117: 	movq	%rbp, %r8
    0000011a: 	movq	%r15, %rdx
    0000011d: 	leaq	_Z17lower_bound_recurIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaET_S7_S7_T0_(%rip), %rcx
    00000124: 	movq	%r14, %rsi
    00000127: 	movq	%r13, %rdi
    0000012a: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEPFS6_S6_S6_aEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 298
    0000012f: 	movq	(%rsp), %rdi
    00000133: 	cmpq	%rbx, %rdi
    00000136: 	je	.Ltmp2001 # Offset: 310
    00000138: 	movq	0x10(%rsp), %rax
    0000013d: 	leaq	0x1(%rax), %rsi
    00000141: 	callq	_ZdlPvm@PLT # Offset: 321
.Ltmp2001:
    00000146: 	leaq	DATAat0x341d4(%rip), %rdx
    0000014d: 	movq	%r12, %rsi
    00000150: 	movq	%rbp, %rdi
    00000153: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 339
    00000158: 	movq	%rbp, %r8
    0000015b: 	movq	%r15, %rdx
    0000015e: 	movq	%r14, %rsi
    00000161: 	movl	$0x1, %r9d
    00000167: 	leaq	_Z14std_upperboundIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaET_S7_S7_T0_(%rip), %rcx
    0000016e: 	movq	%r13, %rdi
    00000171: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEPFS6_S6_S6_aEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 369
    00000176: 	movq	(%rsp), %rdi
    0000017a: 	cmpq	%rbx, %rdi
    0000017d: 	je	.Ltmp2002 # Offset: 381
    0000017f: 	movq	0x10(%rsp), %rax
    00000184: 	leaq	0x1(%rax), %rsi
    00000188: 	callq	_ZdlPvm@PLT # Offset: 392
.Ltmp2002:
    0000018d: 	leaq	DATAat0x341e6(%rip), %rdx
    00000194: 	movq	%r12, %rsi
    00000197: 	movq	%rbp, %rdi
    0000019a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 410
    0000019f: 	movq	%rbp, %r8
    000001a2: 	movq	%r15, %rdx
    000001a5: 	movq	%r14, %rsi
    000001a8: 	movl	$0x1, %r9d
    000001ae: 	leaq	_Z12upper_bound1IN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaET_S7_S7_T0_(%rip), %rcx
    000001b5: 	movq	%r13, %rdi
    000001b8: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEPFS6_S6_S6_aEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 440
    000001bd: 	movq	(%rsp), %rdi
    000001c1: 	cmpq	%rbx, %rdi
    000001c4: 	je	.Ltmp2003 # Offset: 452
    000001c6: 	movq	0x10(%rsp), %rax
    000001cb: 	leaq	0x1(%rax), %rsi
    000001cf: 	callq	_ZdlPvm@PLT # Offset: 463
.Ltmp2003:
    000001d4: 	leaq	DATAat0x341f4(%rip), %rdx
    000001db: 	movq	%r12, %rsi
    000001de: 	movq	%rbp, %rdi
    000001e1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 481
    000001e6: 	movq	%rbp, %r8
    000001e9: 	movq	%r15, %rdx
    000001ec: 	movq	%r14, %rsi
    000001ef: 	movl	$0x1, %r9d
    000001f5: 	leaq	_Z12upper_bound2IN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaET_S7_S7_T0_(%rip), %rcx
    000001fc: 	movq	%r13, %rdi
    000001ff: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEPFS6_S6_S6_aEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 511
    00000204: 	movq	(%rsp), %rdi
    00000208: 	cmpq	%rbx, %rdi
    0000020b: 	je	.Ltmp2004 # Offset: 523
    0000020d: 	movq	0x10(%rsp), %rax
    00000212: 	leaq	0x1(%rax), %rsi
    00000216: 	callq	_ZdlPvm@PLT # Offset: 534
.Ltmp2004:
    0000021b: 	leaq	DATAat0x34202(%rip), %rdx
    00000222: 	movq	%r12, %rsi
    00000225: 	movq	%rbp, %rdi
    00000228: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 552
    0000022d: 	movq	%rbp, %r8
    00000230: 	movq	%r15, %rdx
    00000233: 	movq	%r14, %rsi
    00000236: 	movl	$0x1, %r9d
    0000023c: 	leaq	_Z17upper_bound_recurIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaET_S7_S7_T0_(%rip), %rcx
    00000243: 	movq	%r13, %rdi
    00000246: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEPFS6_S6_S6_aEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 582
    0000024b: 	movq	(%rsp), %rdi
    0000024f: 	cmpq	%rbx, %rdi
    00000252: 	je	.Ltmp2005 # Offset: 594
    00000254: 	movq	0x10(%rsp), %rax
    00000259: 	leaq	0x1(%rax), %rsi
    0000025d: 	callq	_ZdlPvm@PLT # Offset: 605
.Ltmp2005:
    00000262: 	leaq	DATAat0x34219(%rip), %rdx
    00000269: 	movq	%r12, %rsi
    0000026c: 	movq	%rbp, %rdi
    0000026f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 623
    00000274: 	xorl	%r9d, %r9d
    00000277: 	movq	%rbp, %r8
    0000027a: 	movq	%r15, %rdx
    0000027d: 	leaq	_Z16std_binarysearchIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaEbT_S7_T0_(%rip), %rcx
    00000284: 	movq	%r14, %rsi
    00000287: 	movq	%r13, %rdi
    0000028a: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEPFbS6_S6_aEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 650
    0000028f: 	movq	(%rsp), %rdi
    00000293: 	cmpq	%rbx, %rdi
    00000296: 	je	.Ltmp2006 # Offset: 662
    00000298: 	movq	0x10(%rsp), %rax
    0000029d: 	leaq	0x1(%rax), %rsi
    000002a1: 	callq	_ZdlPvm@PLT # Offset: 673
.Ltmp2006:
    000002a6: 	leaq	DATAat0x3422d(%rip), %rdx
    000002ad: 	movq	%r12, %rsi
    000002b0: 	movq	%rbp, %rdi
    000002b3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 691
    000002b8: 	xorl	%r9d, %r9d
    000002bb: 	movq	%rbp, %r8
    000002be: 	movq	%r15, %rdx
    000002c1: 	leaq	_Z13binarysearch1IN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaEbT_S7_T0_(%rip), %rcx
    000002c8: 	movq	%r14, %rsi
    000002cb: 	movq	%r13, %rdi
    000002ce: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEPFbS6_S6_aEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 718
    000002d3: 	movq	(%rsp), %rdi
    000002d7: 	cmpq	%rbx, %rdi
    000002da: 	je	.Ltmp2007 # Offset: 730
    000002dc: 	movq	0x10(%rsp), %rax
    000002e1: 	leaq	0x1(%rax), %rsi
    000002e5: 	callq	_ZdlPvm@PLT # Offset: 741
.Ltmp2007:
    000002ea: 	leaq	DATAat0x3423d(%rip), %rdx
    000002f1: 	movq	%r12, %rsi
    000002f4: 	movq	%rbp, %rdi
    000002f7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 759
    000002fc: 	xorl	%r9d, %r9d
    000002ff: 	movq	%rbp, %r8
    00000302: 	movq	%r15, %rdx
    00000305: 	leaq	_Z13binarysearch2IN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaEbT_S7_T0_(%rip), %rcx
    0000030c: 	movq	%r14, %rsi
    0000030f: 	movq	%r13, %rdi
    00000312: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEPFbS6_S6_aEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 786
    00000317: 	movq	(%rsp), %rdi
    0000031b: 	cmpq	%rbx, %rdi
    0000031e: 	je	.Ltmp2008 # Offset: 798
    00000320: 	movq	0x10(%rsp), %rax
    00000325: 	leaq	0x1(%rax), %rsi
    00000329: 	callq	_ZdlPvm@PLT # Offset: 809
.Ltmp2008:
    0000032e: 	leaq	DATAat0x3424d(%rip), %rdx
    00000335: 	movq	%r12, %rsi
    00000338: 	movq	%rbp, %rdi
    0000033b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 827
    00000340: 	xorl	%r9d, %r9d
    00000343: 	movq	%rbp, %r8
    00000346: 	movq	%r15, %rdx
    00000349: 	leaq	_Z13binarysearch3IN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaEbT_S7_T0_(%rip), %rcx
    00000350: 	movq	%r14, %rsi
    00000353: 	movq	%r13, %rdi
    00000356: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEPFbS6_S6_aEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 854
    0000035b: 	movq	(%rsp), %rdi
    0000035f: 	cmpq	%rbx, %rdi
    00000362: 	je	.Ltmp2009 # Offset: 866
    00000364: 	movq	0x10(%rsp), %rax
    00000369: 	leaq	0x1(%rax), %rsi
    0000036d: 	callq	_ZdlPvm@PLT # Offset: 877
.Ltmp2009:
    00000372: 	leaq	DATAat0x3425d(%rip), %rdx
    00000379: 	movq	%r12, %rsi
    0000037c: 	movq	%rbp, %rdi
    0000037f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 895
    00000384: 	xorl	%r9d, %r9d
    00000387: 	movq	%rbp, %r8
    0000038a: 	movq	%r15, %rdx
    0000038d: 	leaq	_Z13binarysearch4IN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaEbT_S7_T0_(%rip), %rcx
    00000394: 	movq	%r14, %rsi
    00000397: 	movq	%r13, %rdi
    0000039a: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEPFbS6_S6_aEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 922
    0000039f: 	movq	(%rsp), %rdi
    000003a3: 	cmpq	%rbx, %rdi
    000003a6: 	je	.Ltmp2010 # Offset: 934
    000003a8: 	movq	0x10(%rsp), %rax
    000003ad: 	leaq	0x1(%rax), %rsi
    000003b1: 	callq	_ZdlPvm@PLT # Offset: 945
.Ltmp2010:
    000003b6: 	leaq	DATAat0x3426d(%rip), %rdx
    000003bd: 	movq	%r12, %rsi
    000003c0: 	movq	%rbp, %rdi
    000003c3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 963
    000003c8: 	xorl	%r9d, %r9d
    000003cb: 	movq	%rbp, %r8
    000003ce: 	movq	%r15, %rdx
    000003d1: 	leaq	_Z18binarysearch_recurIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaEbT_S7_T0_(%rip), %rcx
    000003d8: 	movq	%r14, %rsi
    000003db: 	movq	%r13, %rdi
    000003de: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEPFbS6_S6_aEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 990
    000003e3: 	movq	(%rsp), %rdi
    000003e7: 	cmpq	%rbx, %rdi
    000003ea: 	je	.Ltmp2011 # Offset: 1002
    000003ec: 	movq	0x10(%rsp), %rax
    000003f1: 	leaq	0x1(%rax), %rsi
    000003f5: 	callq	_ZdlPvm@PLT # Offset: 1013
.Ltmp2011:
    000003fa: 	movq	%rbp, %rdi
    000003fd: 	leaq	DATAat0x34286(%rip), %rdx
    00000404: 	movq	%r12, %rsi
    00000407: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1031
    0000040c: 	movq	%rbp, %rdi
    0000040f: 	callq	_Z9summarizeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1039
    00000414: 	movq	(%rsp), %rdi
    00000418: 	cmpq	%rbx, %rdi
    0000041b: 	je	.Ltmp2012 # Offset: 1051
    0000041d: 	movq	0x10(%rsp), %rax
    00000422: 	leaq	0x1(%rax), %rsi
    00000426: 	callq	_ZdlPvm@PLT # Offset: 1062
.Ltmp2012:
    0000042b: 	movq	0x28(%rsp), %rax
    00000430: 	subq	%fs:0x28, %rax
    00000439: 	jne	.Ltmp2013 # Offset: 1081
    0000043b: 	addq	$0x38, %rsp
    0000043f: 	popq	%rbx
    00000440: 	popq	%rbp
    00000441: 	popq	%r12
    00000443: 	popq	%r13
    00000445: 	popq	%r14
    00000447: 	popq	%r15
    00000449: 	retq # Offset: 1097
.Ltmp2013:
    0000044a: 	callq	__stack_chk_fail@PLT # Offset: 1098
    0000044f: 	endbr64
.Ltmp2015:
    00000453: 	movq	%rax, %rbp
    00000456: 	jmp	.Ltmp2014 # Offset: 1110
    00000458: 	endbr64
    0000045c: 	jmp	.Ltmp2015 # Offset: 1116
    0000045e: 	endbr64
    00000462: 	jmp	.Ltmp2015 # Offset: 1122
    00000464: 	endbr64
    00000468: 	jmp	.Ltmp2015 # Offset: 1128
    0000046a: 	endbr64
    0000046e: 	jmp	.Ltmp2015 # Offset: 1134
    00000470: 	endbr64
    00000474: 	jmp	.Ltmp2015 # Offset: 1140
    00000476: 	endbr64
    0000047a: 	jmp	.Ltmp2015 # Offset: 1146
.Ltmp2014:
    0000047c: 	movq	(%rsp), %rdi
    00000480: 	cmpq	%rbx, %rdi
    00000483: 	je	.Ltmp2016 # Offset: 1155
.Ltmp2018:
    00000485: 	movq	0x10(%rsp), %rax
    0000048a: 	leaq	0x1(%rax), %rsi
    0000048e: 	callq	_ZdlPvm@PLT # Offset: 1166
.Ltmp2016:
    00000493: 	movq	%rbp, %rdi
    00000496: 	callq	_Unwind_Resume@PLT # Offset: 1174
    0000049b: 	endbr64
    0000049f: 	jmp	.Ltmp2015 # Offset: 1183
    000004a1: 	endbr64
    000004a5: 	jmp	.Ltmp2015 # Offset: 1189
    000004a7: 	endbr64
    000004ab: 	jmp	.Ltmp2015 # Offset: 1195
    000004ad: 	endbr64
    000004b1: 	jmp	.Ltmp2015 # Offset: 1201
    000004b3: 	endbr64
    000004b7: 	jmp	.Ltmp2015 # Offset: 1207
    000004b9: 	endbr64
    000004bd: 	movq	%rax, %rbp
    000004c0: 	jmp	.Ltmp2017 # Offset: 1216
    000004c2: 	endbr64
    000004c6: 	jmp	.Ltmp2015 # Offset: 1222
    000004c8: 	endbr64
    000004cc: 	jmp	.Ltmp2015 # Offset: 1228
.Ltmp2017:
    000004ce: 	movq	(%rsp), %rdi
    000004d2: 	leaq	0x10(%rsp), %rax
    000004d7: 	cmpq	%rax, %rdi
    000004da: 	jne	.Ltmp2018 # Offset: 1242
    000004dc: 	jmp	.Ltmp2016 # Offset: 1244
DWARF CFI Instructions:
    <empty>
End of Function "_Z16TestOneContainerIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEEvT_S7_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z24binarysearch_recur_innerIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEalEbT_T0_T1_" after disassembly {
  Number      : 308
  State       : disassembled
  Address     : 0xf100
  Size        : 0x5c
  MaxSize     : 0x60
  Offset      : 0xf100
  Section     : .text
  Orc Section : .local.text._Z24binarysearch_recur_innerIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEalEbT_T0_T1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0307:
    00000000: 	endbr64
    00000004: 	testq	%rdx, %rdx
    00000007: 	je	.Ltmp2019 # Offset: 7
    00000009: 	movq	%rdx, %r8
    0000000c: 	shrq	$0x3f, %r8
    00000010: 	addq	%rdx, %r8
    00000013: 	sarq	%r8
    00000016: 	leaq	(%rdi,%r8), %rax
    0000001a: 	cmpb	%sil, (%rax)
    0000001d: 	jl	.Ltmp2020 # Offset: 29
    0000001f: 	movl	$0x1, %eax
    00000024: 	jg	.Ltmp2021 # Offset: 36
    00000026: 	retq # Offset: 38
    00000027: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2019:
    00000030: 	xorl	%eax, %eax
    00000032: 	retq # Offset: 50
    00000033: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2020:
    00000038: 	addq	$0x1, %r8
    0000003c: 	leaq	0x1(%rax), %rdi
    00000040: 	movsbl	%sil, %esi
    00000044: 	subq	%r8, %rdx
    00000047: 	jmp	.LBB0307 # Offset: 71
    0000004c: 	nopl	(%rax) # Size: 4
.Ltmp2021:
    00000050: 	movsbl	%sil, %esi
    00000054: 	movq	%r8, %rdx
    00000057: 	jmp	.LBB0307 # Offset: 87
DWARF CFI Instructions:
    <empty>
End of Function "_Z24binarysearch_recur_innerIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEalEbT_T0_T1_"

Binary Function "_Z18binarysearch_recurIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaEbT_S7_T0_" after disassembly {
  Number      : 309
  State       : disassembled
  Address     : 0xf160
  Size        : 0xc6
  MaxSize     : 0xd0
  Offset      : 0xf160
  Section     : .text
  Orc Section : .local.text._Z18binarysearch_recurIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaEbT_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0308:
    00000000: 	endbr64
    00000004: 	subq	%rdi, %rsi
    00000007: 	je	.Ltmp2022 # Offset: 7
    00000009: 	movq	%rsi, %rax
    0000000c: 	movsbl	%dl, %r9d
    00000010: 	shrq	$0x3f, %rax
    00000014: 	addq	%rsi, %rax
    00000017: 	sarq	%rax
    0000001a: 	leaq	(%rdi,%rax), %rcx
    0000001e: 	cmpb	(%rcx), %dl
    00000020: 	jg	.Ltmp2023 # Offset: 32
    00000022: 	movl	$0x1, %r8d
    00000028: 	jge	.Ltmp2024 # Offset: 40
    0000002a: 	testq	%rax, %rax
    0000002d: 	je	.Ltmp2022 # Offset: 45
    0000002f: 	testq	%rsi, %rsi
    00000032: 	leaq	0x3(%rsi), %r10
    00000036: 	cmovnsq	%rsi, %r10
    0000003a: 	sarq	$0x2, %r10
    0000003e: 	leaq	(%rdi,%r10), %rcx
    00000042: 	cmpb	(%rcx), %dl
    00000044: 	jg	.Ltmp2025 # Offset: 68
    00000046: 	jge	.Ltmp2024 # Offset: 70
.Ltmp2027:
    00000048: 	movq	%r10, %rdx
    0000004b: 	movl	%r9d, %esi
    0000004e: 	jmp	_Z24binarysearch_recur_innerIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEalEbT_T0_T1_ # TAILCALL  # Offset: 78
    00000053: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2022:
    00000058: 	xorl	%r8d, %r8d
.Ltmp2024:
    0000005b: 	movl	%r8d, %eax
    0000005e: 	retq # Offset: 94
    0000005f: 	nop # Size: 1
.Ltmp2023:
    00000060: 	addq	$0x1, %rax
    00000064: 	leaq	0x1(%rcx), %rdi
    00000068: 	subq	%rax, %rsi
    0000006b: 	je	.Ltmp2022 # Offset: 107
    0000006d: 	movq	%rsi, %r10
    00000070: 	shrq	$0x3f, %r10
    00000074: 	addq	%rsi, %r10
    00000077: 	sarq	%r10
    0000007a: 	leaq	(%rdi,%r10), %rax
    0000007e: 	cmpb	(%rax), %dl
    00000080: 	jg	.Ltmp2026 # Offset: 128
    00000082: 	movl	$0x1, %r8d
    00000088: 	jge	.Ltmp2024 # Offset: 136
    0000008a: 	jmp	.Ltmp2027 # Offset: 138
    0000008c: 	nopl	(%rax) # Size: 4
.Ltmp2026:
    00000090: 	movq	%rsi, %rdx
    00000093: 	addq	$0x1, %r10
    00000097: 	leaq	0x1(%rax), %rdi
    0000009b: 	movl	%r9d, %esi
    0000009e: 	subq	%r10, %rdx
    000000a1: 	jmp	_Z24binarysearch_recur_innerIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEalEbT_T0_T1_ # TAILCALL  # Offset: 161
    000000a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2025:
    000000b0: 	addq	$0x1, %r10
    000000b4: 	leaq	0x1(%rcx), %rdi
    000000b8: 	movl	%r9d, %esi
    000000bb: 	subq	%r10, %rax
    000000be: 	movq	%rax, %rdx
    000000c1: 	jmp	_Z24binarysearch_recur_innerIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEalEbT_T0_T1_ # TAILCALL  # Offset: 193
DWARF CFI Instructions:
    <empty>
End of Function "_Z18binarysearch_recurIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEaEbT_S7_T0_"

Binary Function "_ZNSt11_Deque_baseIaSaIaEE17_M_initialize_mapEm" after disassembly {
  Number      : 310
  State       : disassembled
  Address     : 0xf230
  Size        : 0x170
  MaxSize     : 0x170
  Offset      : 0xf230
  Section     : .text
  Orc Section : .local.text._ZNSt11_Deque_baseIaSaIaEE17_M_initialize_mapEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0309:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	pushq	%r14
    00000009: 	shrq	$0x9, %rax
    0000000d: 	pushq	%r13
    0000000f: 	movq	%rdi, %r13
    00000012: 	pushq	%r12
    00000014: 	movq	%rsi, %r12
    00000017: 	pushq	%rbp
    00000018: 	pushq	%rbx
    00000019: 	leaq	0x1(%rax), %rbx
    0000001d: 	addq	$0x3, %rax
    00000021: 	cmpq	$0x8, %rax
    00000025: 	ja	.Ltmp2028 # Offset: 37
    0000002b: 	movl	$0x8, %eax
    00000030: 	movl	$0x40, %edi
.Ltmp2031:
    00000035: 	movq	%rax, 0x8(%r13)
    00000039: 	callq	_Znwm@PLT # Offset: 57
    0000003e: 	movq	0x8(%r13), %rdx
    00000042: 	movq	%rax, (%r13)
    00000046: 	subq	%rbx, %rdx
    00000049: 	shrq	%rdx
    0000004c: 	leaq	(%rax,%rdx,8), %r14
    00000050: 	leaq	(%r14,%rbx,8), %rbp
    00000054: 	cmpq	%rbp, %r14
    00000057: 	jae	.Ltmp2029 # Offset: 87
    00000059: 	movq	%r14, %rbx
    0000005c: 	nopl	(%rax) # Size: 4
.Ltmp2030:
    00000060: 	movl	$0x200, %edi
    00000065: 	callq	_Znwm@PLT # Offset: 101
    0000006a: 	movq	%rax, (%rbx)
    0000006d: 	addq	$0x8, %rbx
    00000071: 	cmpq	%rbx, %rbp
    00000074: 	ja	.Ltmp2030 # Offset: 116
.Ltmp2029:
    00000076: 	movq	(%r14), %xmm0
    0000007b: 	movq	%r14, %xmm1
    00000080: 	subq	$0x8, %rbp
    00000084: 	popq	%rbx
    00000085: 	movq	(%r14), %rax
    00000088: 	andl	$0x1ff, %r12d
    0000008f: 	addq	(%rbp), %r12
    00000093: 	punpcklqdq	%xmm0, %xmm0
    00000097: 	addq	$0x200, %rax
    0000009d: 	movups	%xmm0, 0x10(%r13)
    000000a2: 	movq	%rax, %xmm0
    000000a7: 	movq	(%rbp), %rax
    000000ab: 	punpcklqdq	%xmm1, %xmm0
    000000af: 	movups	%xmm0, 0x20(%r13)
    000000b4: 	movq	%r12, %xmm0
    000000b9: 	addq	$0x200, %rax
    000000bf: 	movhps	(%rbp), %xmm0
    000000c3: 	movq	%rbp, %xmm2
    000000c8: 	popq	%rbp
    000000c9: 	popq	%r12
    000000cb: 	movups	%xmm0, 0x30(%r13)
    000000d0: 	movq	%rax, %xmm0
    000000d5: 	punpcklqdq	%xmm2, %xmm0
    000000d9: 	movups	%xmm0, 0x40(%r13)
    000000de: 	popq	%r13
    000000e0: 	popq	%r14
    000000e2: 	retq # Offset: 226
    000000e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2028:
    000000e8: 	leaq	(,%rax,8), %rdi
    000000f0: 	jmp	.Ltmp2031 # Offset: 240
    000000f5: 	endbr64
    000000f9: 	movq	%rax, %rdi
    000000fc: 	callq	__cxa_begin_catch@PLT # Offset: 252
.Ltmp2033:
    00000101: 	cmpq	%rbx, %r14
    00000104: 	jae	.Ltmp2032 # Offset: 260
    00000106: 	movq	(%r14), %rdi
    00000109: 	movl	$0x200, %esi
    0000010e: 	addq	$0x8, %r14
    00000112: 	callq	_ZdlPvm@PLT # Offset: 274
    00000117: 	jmp	.Ltmp2033 # Offset: 279
.Ltmp2032:
    00000119: 	callq	__cxa_rethrow@PLT # Offset: 281
    0000011e: 	endbr64
    00000122: 	movq	%rax, %rbp
    00000125: 	callq	__cxa_end_catch@PLT # Offset: 293
    0000012a: 	movq	%rbp, %rdi
    0000012d: 	callq	__cxa_begin_catch@PLT # Offset: 301
    00000132: 	movq	0x8(%r13), %rax
    00000136: 	movq	(%r13), %rdi
    0000013a: 	leaq	(,%rax,8), %rsi
    00000142: 	callq	_ZdlPvm@PLT # Offset: 322
    00000147: 	movq	$0x0, (%r13)
    0000014f: 	movq	$0x0, 0x8(%r13)
    00000157: 	callq	__cxa_rethrow@PLT # Offset: 343
    0000015c: 	endbr64
    00000160: 	movq	%rax, %rbp
    00000163: 	callq	__cxa_end_catch@PLT # Offset: 355
    00000168: 	movq	%rbp, %rdi
    0000016b: 	callq	_Unwind_Resume@PLT # Offset: 363
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt11_Deque_baseIaSaIaEE17_M_initialize_mapEm"

Binary Function "_Z15TestSearchArrayISt15_Deque_iteratorIaRaPaEPFS3_S3_S3_aEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 311
  State       : disassembled
  Address     : 0xf3a0
  Size        : 0x337
  MaxSize     : 0x340
  Offset      : 0xf3a0
  Section     : .text
  Orc Section : .local.text._Z15TestSearchArrayISt15_Deque_iteratorIaRaPaEPFS3_S3_S3_aEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0310:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rdi, %r12
    0000000f: 	movl	$0x400, %edi
    00000014: 	pushq	%rbp
    00000015: 	movq	%rdx, %rbp
    00000018: 	pushq	%rbx
    00000019: 	movq	%rsi, %rbx
    0000001c: 	subq	$0xa8, %rsp
    00000023: 	movq	%rdx, 0x28(%rsp)
    00000028: 	movq	%rcx, 0x8(%rsp)
    0000002d: 	movq	%r8, 0x20(%rsp)
    00000032: 	movb	%r9b, 0x1f(%rsp)
    00000037: 	movq	%fs:0x28, %rax
    00000040: 	movq	%rax, 0x98(%rsp)
    00000048: 	xorl	%eax, %eax
    0000004a: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000051: 	callq	_Znwm@PLT # Offset: 81
    00000056: 	movabsq	$0x5851f42d4c957f2d, %r8
    00000060: 	leaq	0x9(%rax), %rdi
    00000064: 	movb	$0x0, (%rax)
    00000067: 	movq	%rax, %rdx
    0000006a: 	leaq	0x400(%rax), %r9
    00000071: 	andq	$-0x8, %rdi
    00000075: 	movq	%rax, (%rsp)
    00000079: 	movq	$0x0, 0x1(%rax)
    00000081: 	movq	$0x0, 0x3f8(%rax)
    0000008c: 	subl	%edi, %eax
    0000008e: 	leal	0x400(%rax), %ecx
    00000094: 	xorl	%eax, %eax
    00000096: 	shrl	$0x3, %ecx
    00000099: 	rep		stosq	%rax, %es:(%rdi)
    0000009c: 	movq	%rdx, %rcx
    0000009f: 	movabsq	$0x14057b7ef767814f, %rdi
    000000a9: 	movq	(%r12), %r11
    000000ad: 	movq	0x18(%r12), %r10
    000000b2: 	movq	%r11, %rsi
    000000b5: 	subq	0x8(%r12), %rsi
    000000ba: 	jmp	.Ltmp2034 # Offset: 186
    000000bc: 	nopl	(%rax) # Size: 4
.Ltmp2037:
    000000c0: 	cmpq	$0x1ff, %rax
    000000c6: 	jg	.Ltmp2035 # Offset: 198
    000000cc: 	leaq	(%r11,%rdx), %rax
    000000d0: 	addq	$0x1, %rcx
    000000d4: 	movzbl	(%rax), %eax
    000000d7: 	movb	%al, -0x1(%rcx)
    000000da: 	cmpq	%rcx, %r9
    000000dd: 	je	.Ltmp2036 # Offset: 221
.Ltmp2034:
    000000df: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000000e6: 	imulq	%r8, %rax
    000000ea: 	addq	%rdi, %rax
    000000ed: 	movq	%rax, %rdx
    000000f0: 	movq	%rax, %r13
    000000f3: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000000fa: 	shrq	$0x14, %rdx
    000000fe: 	shlq	$0x17, %r13
    00000102: 	xorq	%r13, %rdx
    00000105: 	xorq	%rdx, %rax
    00000108: 	xorl	%edx, %edx
    0000010a: 	divq	%rbp
    0000010d: 	movq	%rdx, %rax
    00000110: 	addq	%rsi, %rax
    00000113: 	jns	.Ltmp2037 # Offset: 275
    00000115: 	movq	%rax, %rdx
    00000118: 	notq	%rdx
    0000011b: 	shrq	$0x9, %rdx
    0000011f: 	notq	%rdx
.Ltmp2044:
    00000122: 	movq	%rdx, %r13
    00000125: 	addq	$0x1, %rcx
    00000129: 	shlq	$0x9, %r13
    0000012d: 	subq	%r13, %rax
    00000130: 	addq	(%r10,%rdx,8), %rax
    00000134: 	movzbl	(%rax), %eax
    00000137: 	movb	%al, -0x1(%rcx)
    0000013a: 	cmpq	%rcx, %r9
    0000013d: 	jne	.Ltmp2034 # Offset: 317
.Ltmp2036:
    0000013f: 	callq	clock@PLT # Offset: 319
    00000144: 	movb	$0x0, 0x1e(%rsp)
    00000149: 	xorl	%ebp, %ebp
    0000014b: 	leaq	0x30(%rsp), %r13
    00000150: 	movq	%rax, start_time(%rip)
    00000157: 	leaq	0x70(%rsp), %r14
    0000015c: 	leaq	0x50(%rsp), %r15
.Ltmp2041:
    00000161: 	leaq	0xc8(%rbp), %rax
    00000168: 	cmpb	$0x0, 0x1f(%rsp)
    0000016d: 	movq	%rax, 0x10(%rsp)
    00000172: 	jne	.Ltmp2038 # Offset: 370
    00000178: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2039:
    00000180: 	movq	(%rsp), %rsi
    00000184: 	movq	%rbp, %rax
    00000187: 	movdqu	(%rbx), %xmm2
    0000018b: 	addq	$0x1, %rbp
    0000018f: 	movdqu	0x10(%rbx), %xmm3
    00000194: 	andl	$0x3ff, %eax
    00000199: 	movq	%r14, %rdx
    0000019c: 	movq	%r13, %rdi
    0000019f: 	movdqu	(%r12), %xmm4
    000001a5: 	movsbl	(%rsi,%rax), %ecx
    000001a9: 	movaps	%xmm2, 0x70(%rsp)
    000001ae: 	movq	%r15, %rsi
    000001b1: 	movdqu	0x10(%r12), %xmm5
    000001b8: 	movq	0x8(%rsp), %rax
    000001bd: 	movaps	%xmm3, 0x80(%rsp)
    000001c5: 	movaps	%xmm4, 0x50(%rsp)
    000001ca: 	movaps	%xmm5, 0x60(%rsp)
    000001cf: 	callq	*%rax # Offset: 463
    000001d1: 	movq	0x30(%rsp), %rax
    000001d6: 	cmpq	%rax, (%rbx)
    000001d9: 	movl	$0x1, %edi
    000001de: 	movzbl	0x1e(%rsp), %eax
    000001e3: 	cmovel	%edi, %eax
    000001e6: 	movb	%al, 0x1e(%rsp)
    000001ea: 	cmpq	%rbp, 0x10(%rsp)
    000001ef: 	jne	.Ltmp2039 # Offset: 495
.Ltmp2045:
    000001f1: 	callq	clock@PLT # Offset: 497
    000001f6: 	movsd	gMinimumTimeTarget(%rip), %xmm1
    000001fe: 	pxor	%xmm0, %xmm0
    00000202: 	movq	%rax, end_time(%rip)
    00000209: 	subq	start_time(%rip), %rax
    00000210: 	cvtsi2sd	%rax, %xmm0
    00000215: 	divsd	DATAat0x34410(%rip), %xmm0
    0000021d: 	comisd	%xmm0, %xmm1
    00000221: 	jbe	.Ltmp2040 # Offset: 545
    00000223: 	cmpq	$0x5f5e0ff, %rbp
    0000022a: 	jbe	.Ltmp2041 # Offset: 554
.Ltmp2040:
    00000230: 	movq	0x20(%rsp), %rdx
    00000235: 	movq	0x28(%rsp), %rdi
    0000023a: 	movq	%rbp, %rsi
    0000023d: 	callq	_Z13record_resultdmmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 573
    00000242: 	cmpb	$0x0, 0x1e(%rsp)
    00000247: 	jne	.Ltmp2042 # Offset: 583
.Ltmp2046:
    0000024d: 	movq	0x98(%rsp), %rax
    00000255: 	subq	%fs:0x28, %rax
    0000025e: 	jne	.Ltmp2043 # Offset: 606
    00000264: 	movq	(%rsp), %rdi
    00000268: 	addq	$0xa8, %rsp
    0000026f: 	movl	$0x400, %esi
    00000274: 	popq	%rbx
    00000275: 	popq	%rbp
    00000276: 	popq	%r12
    00000278: 	popq	%r13
    0000027a: 	popq	%r14
    0000027c: 	popq	%r15
    0000027e: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 638
    00000283: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2035:
    00000288: 	movq	%rax, %rdx
    0000028b: 	sarq	$0x9, %rdx
    0000028f: 	jmp	.Ltmp2044 # Offset: 655
    00000294: 	nopl	(%rax) # Size: 4
.Ltmp2038:
    00000298: 	movq	(%rsp), %rdx
    0000029c: 	movq	%rbp, %rax
    0000029f: 	movdqu	(%rbx), %xmm6
    000002a3: 	addq	$0x1, %rbp
    000002a7: 	movdqu	0x10(%rbx), %xmm7
    000002ac: 	andl	$0x3ff, %eax
    000002b1: 	movq	%r15, %rsi
    000002b4: 	movq	%r13, %rdi
    000002b7: 	movdqu	(%r12), %xmm1
    000002bd: 	movsbl	(%rdx,%rax), %ecx
    000002c1: 	movaps	%xmm6, 0x70(%rsp)
    000002c6: 	movq	%r14, %rdx
    000002c9: 	movdqu	0x10(%r12), %xmm0
    000002d0: 	movq	0x8(%rsp), %rax
    000002d5: 	movaps	%xmm7, 0x80(%rsp)
    000002dd: 	movaps	%xmm1, 0x50(%rsp)
    000002e2: 	movaps	%xmm0, 0x60(%rsp)
    000002e7: 	callq	*%rax # Offset: 743
    000002e9: 	cmpq	0x10(%rsp), %rbp
    000002ee: 	jne	.Ltmp2038 # Offset: 750
    000002f0: 	jmp	.Ltmp2045 # Offset: 752
.Ltmp2042:
    000002f5: 	movq	0x20(%rsp), %rax
    000002fa: 	leaq	DATAat0x34137(%rip), %rsi
    00000301: 	movl	$0x1, %edi
    00000306: 	movq	(%rax), %rdx
    00000309: 	xorl	%eax, %eax
    0000030b: 	callq	__printf_chk@PLT # Offset: 779
    00000310: 	jmp	.Ltmp2046 # Offset: 784
.Ltmp2043:
    00000315: 	callq	__stack_chk_fail@PLT # Offset: 789
    0000031a: 	endbr64
    0000031e: 	movq	%rax, %rbp
    00000321: 	movq	(%rsp), %rdi
    00000325: 	movl	$0x400, %esi
    0000032a: 	callq	_ZdlPvm@PLT # Offset: 810
    0000032f: 	movq	%rbp, %rdi
    00000332: 	callq	_Unwind_Resume@PLT # Offset: 818
DWARF CFI Instructions:
    <empty>
End of Function "_Z15TestSearchArrayISt15_Deque_iteratorIaRaPaEPFS3_S3_S3_aEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z18quicksort2_forwardISt15_Deque_iteratorIaRaPaEEvT_S4_" after disassembly {
  Number      : 312
  State       : disassembled
  Address     : 0xf6e0
  Size        : 0x2ae
  MaxSize     : 0x2b0
  Offset      : 0xf6e0
  Section     : .text
  Orc Section : .local.text._Z18quicksort2_forwardISt15_Deque_iteratorIaRaPaEEvT_S4_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0311:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rsi, %r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x68, %rsp
    00000018: 	movq	(%rsi), %rdi
    0000001b: 	movq	(%r12), %rbx
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x58(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	leaq	0x30(%rsp), %rax
    00000034: 	movq	%rax, 0x8(%rsp)
    00000039: 	cmpq	%rbx, %rdi
    0000003c: 	je	.Ltmp2047 # Offset: 60
.Ltmp2061:
    00000042: 	movq	0x10(%r12), %rsi
    00000047: 	leaq	0x1(%rbx), %rax
    0000004b: 	movq	0x8(%r12), %rbp
    00000050: 	movq	0x18(%r12), %r10
    00000055: 	cmpq	%rsi, %rax
    00000058: 	je	.Ltmp2048 # Offset: 88
.Ltmp2064:
    0000005e: 	cmpq	%rdi, %rax
    00000061: 	je	.Ltmp2047 # Offset: 97
    00000067: 	leaq	0x1(%rax), %rdx
    0000006b: 	movq	%r10, %r14
    0000006e: 	movq	%rsi, %r11
    00000071: 	movq	%rdx, %rcx
    00000074: 	cmpq	%rsi, %rdx
    00000077: 	je	.Ltmp2049 # Offset: 119
    0000007d: 	movzbl	(%rax), %r8d
    00000081: 	movzbl	(%rbx), %r15d
    00000085: 	cmpq	%rcx, %rdi
    00000088: 	je	.Ltmp2050 # Offset: 136
.Ltmp2065:
    0000008e: 	cmpb	%r15b, %r8b
    00000091: 	jge	.Ltmp2051 # Offset: 145
    00000093: 	movb	%r8b, (%rbx)
    00000096: 	movl	%r15d, %r8d
    00000099: 	movb	%r15b, (%rax)
.Ltmp2051:
    0000009c: 	movzbl	(%rcx), %edi
    0000009f: 	cmpb	%dil, %r8b
    000000a2: 	jle	.Ltmp2052 # Offset: 162
    000000a4: 	movb	%dil, (%rax)
    000000a7: 	movb	%r8b, (%rcx)
    000000aa: 	movzbl	(%rax), %r8d
    000000ae: 	movzbl	(%rbx), %edi
    000000b1: 	cmpb	%dil, %r8b
    000000b4: 	jge	.Ltmp2052 # Offset: 180
    000000b6: 	movb	%dil, (%rax)
    000000b9: 	movb	%r8b, (%rbx)
    000000bc: 	movzbl	(%rax), %r8d
.Ltmp2052:
    000000c0: 	addq	$0x1, %rcx
    000000c4: 	cmpq	%r11, %rcx
    000000c7: 	je	.Ltmp2053 # Offset: 199
.Ltmp2066:
    000000cd: 	movq	(%r13), %rdi
    000000d1: 	cmpq	%rcx, %rdi
    000000d4: 	je	.Ltmp2047 # Offset: 212
    000000da: 	movq	%r10, %r15
    000000dd: 	movq	%rsi, %r14
    000000e0: 	movq	%rax, %rbx
    000000e3: 	movl	$0x2, %ecx
    000000e8: 	movl	$0x1, %r11d
    000000ee: 	jmp	.Ltmp2054 # Offset: 238
.Ltmp2058:
    000000f0: 	cmpq	%rax, %rdi
    000000f3: 	je	.Ltmp2055 # Offset: 243
.Ltmp2059:
    000000f5: 	movzbl	(%rax), %edx
    000000f8: 	cmpb	%r8b, %dl
    000000fb: 	jge	.Ltmp2056 # Offset: 251
    000000fd: 	movzbl	(%rbx), %edi
    00000100: 	addq	$0x1, %rbx
    00000104: 	movb	%dil, (%rax)
    00000107: 	movb	%dl, -0x1(%rbx)
    0000010a: 	cmpq	%r14, %rbx
    0000010d: 	je	.Ltmp2057 # Offset: 269
.Ltmp2062:
    00000113: 	movq	(%r13), %rdi
    00000117: 	addq	$0x1, %r11
.Ltmp2056:
    0000011b: 	addq	$0x1, %rcx
    0000011f: 	leaq	0x1(%rax), %rdx
.Ltmp2054:
    00000123: 	movq	%rdx, %rax
    00000126: 	cmpq	%rsi, %rdx
    00000129: 	jne	.Ltmp2058 # Offset: 297
    0000012b: 	movq	0x8(%r10), %rax
    0000012f: 	addq	$0x8, %r10
    00000133: 	leaq	0x200(%rax), %rsi
    0000013a: 	cmpq	%rax, %rdi
    0000013d: 	jne	.Ltmp2059 # Offset: 317
.Ltmp2055:
    0000013f: 	subq	%r11, %rcx
    00000142: 	cmpq	%rcx, %r11
    00000145: 	jbe	.Ltmp2060 # Offset: 325
    0000014b: 	movq	0x10(%r13), %xmm1
    00000151: 	movq	%rdi, %xmm0
    00000156: 	movq	0x8(%rsp), %rsi
    0000015b: 	leaq	0x10(%rsp), %rdi
    00000160: 	movhps	0x8(%r13), %xmm0
    00000165: 	movq	%rbx, 0x10(%rsp)
    0000016a: 	movhps	0x18(%r13), %xmm1
    0000016f: 	movq	%rbp, 0x18(%rsp)
    00000174: 	movq	%r14, 0x20(%rsp)
    00000179: 	movq	%r15, 0x28(%rsp)
    0000017e: 	movaps	%xmm0, 0x30(%rsp)
    00000183: 	movaps	%xmm1, 0x40(%rsp)
    00000188: 	callq	_Z18quicksort2_forwardISt15_Deque_iteratorIaRaPaEEvT_S4_ # Offset: 392
    0000018d: 	movq	%rbx, (%r13)
    00000191: 	movq	(%r12), %rax
    00000195: 	movq	%rbp, 0x8(%r13)
    00000199: 	movq	%r14, 0x10(%r13)
    0000019d: 	movq	%r15, 0x18(%r13)
    000001a1: 	cmpq	%rbx, %rax
    000001a4: 	je	.Ltmp2047 # Offset: 420
    000001aa: 	movq	%rbx, %rdi
    000001ad: 	movq	%rax, %rbx
    000001b0: 	jmp	.Ltmp2061 # Offset: 432
    000001b5: 	nopl	(%rax) # Size: 3
.Ltmp2057:
    000001b8: 	movq	0x8(%r15), %rbx
    000001bc: 	addq	$0x8, %r15
    000001c0: 	leaq	0x200(%rbx), %r14
    000001c7: 	movq	%rbx, %rbp
    000001ca: 	jmp	.Ltmp2062 # Offset: 458
    000001cf: 	nop # Size: 1
.Ltmp2060:
    000001d0: 	movdqu	(%r12), %xmm2
    000001d6: 	movq	0x8(%rsp), %rsi
    000001db: 	leaq	0x10(%rsp), %rdi
    000001e0: 	movq	%rbx, 0x30(%rsp)
    000001e5: 	movdqu	0x10(%r12), %xmm3
    000001ec: 	movq	%rbp, 0x38(%rsp)
    000001f1: 	movq	%r14, 0x40(%rsp)
    000001f6: 	movq	%r15, 0x48(%rsp)
    000001fb: 	movaps	%xmm2, 0x10(%rsp)
    00000200: 	movaps	%xmm3, 0x20(%rsp)
    00000205: 	callq	_Z18quicksort2_forwardISt15_Deque_iteratorIaRaPaEEvT_S4_ # Offset: 517
    0000020a: 	movq	%rbx, (%r12)
    0000020e: 	movq	(%r13), %rdi
    00000212: 	movq	%rbp, 0x8(%r12)
    00000217: 	movq	%r14, 0x10(%r12)
    0000021c: 	movq	%r15, 0x18(%r12)
    00000221: 	cmpq	%rbx, %rdi
    00000224: 	jne	.Ltmp2061 # Offset: 548
    0000022a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2047:
    00000230: 	movq	0x58(%rsp), %rax
    00000235: 	subq	%fs:0x28, %rax
    0000023e: 	jne	.Ltmp2063 # Offset: 574
    00000240: 	addq	$0x68, %rsp
    00000244: 	popq	%rbx
    00000245: 	popq	%rbp
    00000246: 	popq	%r12
    00000248: 	popq	%r13
    0000024a: 	popq	%r14
    0000024c: 	popq	%r15
    0000024e: 	retq # Offset: 590
    0000024f: 	nop # Size: 1
.Ltmp2048:
    00000250: 	movq	0x8(%r10), %rax
    00000254: 	addq	$0x8, %r10
    00000258: 	leaq	0x200(%rax), %rsi
    0000025f: 	movq	%rax, %rbp
    00000262: 	jmp	.Ltmp2064 # Offset: 610
    00000267: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2049:
    00000270: 	movq	0x8(%r10), %rcx
    00000274: 	movzbl	(%rax), %r8d
    00000278: 	leaq	0x8(%r10), %r14
    0000027c: 	movzbl	(%rbx), %r15d
    00000280: 	leaq	0x200(%rcx), %r11
    00000287: 	cmpq	%rcx, %rdi
    0000028a: 	jne	.Ltmp2065 # Offset: 650
.Ltmp2050:
    00000290: 	cmpb	%r15b, %r8b
    00000293: 	jge	.Ltmp2047 # Offset: 659
    00000295: 	movb	%r15b, (%rax)
    00000298: 	movb	%r8b, (%rbx)
    0000029b: 	jmp	.Ltmp2047 # Offset: 667
    0000029d: 	nopl	(%rax) # Size: 3
.Ltmp2053:
    000002a0: 	movq	0x8(%r14), %rcx
    000002a4: 	jmp	.Ltmp2066 # Offset: 676
.Ltmp2063:
    000002a9: 	callq	__stack_chk_fail@PLT # Offset: 681
DWARF CFI Instructions:
    <empty>
End of Function "_Z18quicksort2_forwardISt15_Deque_iteratorIaRaPaEEvT_S4_"

Binary Function "_Z13TestOneSearchISt15_Deque_iteratorIaRaPaEPFS3_S3_S3_aEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 313
  State       : disassembled
  Address     : 0xf990
  Size        : 0x3bd
  MaxSize     : 0x3c0
  Offset      : 0xf990
  Section     : .text
  Orc Section : .local.text._Z13TestOneSearchISt15_Deque_iteratorIaRaPaEPFS3_S3_S3_aEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0312:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rdx, %r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rsi, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x98, %rsp
    0000001e: 	movq	(%rdi), %rdx
    00000021: 	movq	(%rsi), %rsi
    00000024: 	movq	%rcx, 0x8(%rsp)
    00000029: 	movq	0x10(%rdi), %rcx
    0000002d: 	movq	%r8, 0x10(%rsp)
    00000032: 	movq	0x18(%rdi), %rdi
    00000036: 	movq	%fs:0x28, %rax
    0000003f: 	movq	%rax, 0x88(%rsp)
    00000047: 	xorl	%eax, %eax
    00000049: 	cmpq	%rsi, %rdx
    0000004c: 	jne	.Ltmp2067 # Offset: 76
    0000004e: 	jmp	.Ltmp2068 # Offset: 78
.Ltmp2069:
    00000050: 	movb	$0x5, (%rdx)
    00000053: 	cmpq	%rsi, %rax
    00000056: 	je	.Ltmp2068 # Offset: 86
.Ltmp2070:
    00000058: 	movq	%rax, %rdx
.Ltmp2067:
    0000005b: 	leaq	0x1(%rdx), %rax
    0000005f: 	cmpq	%rcx, %rax
    00000062: 	jne	.Ltmp2069 # Offset: 98
    00000064: 	movq	0x8(%rdi), %rax
    00000068: 	leaq	0x8(%rdi), %r8
    0000006c: 	movb	$0x5, (%rdx)
    0000006f: 	leaq	0x200(%rax), %rcx
    00000076: 	cmpq	%rax, %rsi
    00000079: 	je	.Ltmp2068 # Offset: 121
    0000007b: 	movq	%r8, %rdi
    0000007e: 	jmp	.Ltmp2070 # Offset: 126
.Ltmp2068:
    00000080: 	movq	0x10(%rsp), %rsi
    00000085: 	leaq	0x60(%rsp), %r13
    0000008a: 	movzbl	%r9b, %eax
    0000008e: 	leaq	DATAat0x34160(%rip), %rdx
    00000095: 	movq	%r13, %rdi
    00000098: 	movl	%eax, 0x4(%rsp)
    0000009c: 	leaq	0x40(%rsp), %r14
    000000a1: 	leaq	0x20(%rsp), %r15
    000000a6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 166
    000000ab: 	movdqu	(%rbp), %xmm2
    000000b0: 	movdqu	0x10(%rbp), %xmm3
    000000b5: 	movq	%r13, %r8
    000000b8: 	movdqu	(%rbx), %xmm4
    000000bc: 	movdqu	0x10(%rbx), %xmm5
    000000c1: 	movq	%r12, %rdx
    000000c4: 	movq	%r14, %rsi
    000000c7: 	movl	0x4(%rsp), %r9d
    000000cc: 	movq	0x8(%rsp), %rcx
    000000d1: 	movq	%r15, %rdi
    000000d4: 	movaps	%xmm2, 0x40(%rsp)
    000000d9: 	movaps	%xmm3, 0x50(%rsp)
    000000de: 	movaps	%xmm4, 0x20(%rsp)
    000000e3: 	movaps	%xmm5, 0x30(%rsp)
    000000e8: 	callq	_Z15TestSearchArrayISt15_Deque_iteratorIaRaPaEPFS3_S3_S3_aEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 232
    000000ed: 	movq	0x60(%rsp), %rdi
    000000f2: 	leaq	0x70(%rsp), %rax
    000000f7: 	movq	%rax, 0x18(%rsp)
    000000fc: 	cmpq	%rax, %rdi
    000000ff: 	je	.Ltmp2071 # Offset: 255
    00000101: 	movq	0x70(%rsp), %rax
    00000106: 	leaq	0x1(%rax), %rsi
    0000010a: 	callq	_ZdlPvm@PLT # Offset: 266
.Ltmp2071:
    0000010f: 	movq	(%rbx), %rdi
    00000112: 	movq	0x10(%rbx), %r8
    00000116: 	movq	0x18(%rbx), %r10
    0000011a: 	cmpq	$0x9, %r12
    0000011e: 	jbe	.Ltmp2072 # Offset: 286
    00000124: 	movabsq	$-0x3333333333333333, %rdx
    0000012e: 	movq	%r12, %rax
    00000131: 	mulq	%rdx
    00000134: 	shrq	$0x3, %rdx
.Ltmp2087:
    00000138: 	xorl	%esi, %esi
    0000013a: 	xorl	%r9d, %r9d
    0000013d: 	cmpq	$0x0, %r12
    00000141: 	jbe	.Ltmp2073 # Offset: 321
    00000143: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2078:
    00000148: 	xorl	%ecx, %ecx
    0000014a: 	jmp	.Ltmp2074 # Offset: 330
    0000014c: 	nopl	(%rax) # Size: 4
.Ltmp2076:
    00000150: 	addq	$0x1, %rcx
    00000154: 	movb	%r9b, (%rdi)
    00000157: 	addq	$0x1, %rsi
    0000015b: 	cmpq	%rdx, %rcx
    0000015e: 	jae	.Ltmp2075 # Offset: 350
.Ltmp2077:
    00000160: 	cmpq	%rsi, %r12
    00000163: 	jbe	.Ltmp2075 # Offset: 355
    00000165: 	movq	%rax, %rdi
.Ltmp2074:
    00000168: 	leaq	0x1(%rdi), %rax
    0000016c: 	cmpq	%r8, %rax
    0000016f: 	jne	.Ltmp2076 # Offset: 367
    00000171: 	movq	0x8(%r10), %rax
    00000175: 	leaq	0x8(%r10), %r11
    00000179: 	addq	$0x1, %rcx
    0000017d: 	movb	%r9b, (%rdi)
    00000180: 	addq	$0x1, %rsi
    00000184: 	movq	%r11, %r10
    00000187: 	leaq	0x200(%rax), %r8
    0000018e: 	cmpq	%rdx, %rcx
    00000191: 	jb	.Ltmp2077 # Offset: 401
    00000193: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2075:
    00000198: 	movq	%rax, %rdi
    0000019b: 	addl	$0x1, %r9d
    0000019f: 	cmpq	%rsi, %r12
    000001a2: 	ja	.Ltmp2078 # Offset: 418
.Ltmp2073:
    000001a4: 	movq	0x10(%rsp), %rsi
    000001a9: 	leaq	DATAat0x3416e(%rip), %rdx
    000001b0: 	movq	%r13, %rdi
    000001b3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 435
    000001b8: 	movdqu	(%rbp), %xmm6
    000001bd: 	movdqu	0x10(%rbp), %xmm7
    000001c2: 	movq	%r13, %r8
    000001c5: 	movdqu	(%rbx), %xmm2
    000001c9: 	movdqu	0x10(%rbx), %xmm3
    000001ce: 	movq	%r12, %rdx
    000001d1: 	movq	%r14, %rsi
    000001d4: 	movl	0x4(%rsp), %r9d
    000001d9: 	movq	0x8(%rsp), %rcx
    000001de: 	movq	%r15, %rdi
    000001e1: 	movaps	%xmm6, 0x40(%rsp)
    000001e6: 	movaps	%xmm7, 0x50(%rsp)
    000001eb: 	movaps	%xmm2, 0x20(%rsp)
    000001f0: 	movaps	%xmm3, 0x30(%rsp)
    000001f5: 	callq	_Z15TestSearchArrayISt15_Deque_iteratorIaRaPaEPFS3_S3_S3_aEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 501
    000001fa: 	movq	0x60(%rsp), %rdi
    000001ff: 	cmpq	0x18(%rsp), %rdi
    00000204: 	je	.Ltmp2079 # Offset: 516
    00000206: 	movq	0x70(%rsp), %rax
    0000020b: 	leaq	0x1(%rax), %rsi
    0000020f: 	callq	_ZdlPvm@PLT # Offset: 527
.Ltmp2079:
    00000214: 	movq	(%rbp), %rdi
    00000218: 	movq	(%rbx), %rdx
    0000021b: 	movq	0x10(%rbx), %rsi
    0000021f: 	movq	0x18(%rbx), %r8
    00000223: 	cmpq	%rdi, %rdx
    00000226: 	je	.Ltmp2080 # Offset: 550
    0000022c: 	xorl	%ecx, %ecx
    0000022e: 	jmp	.Ltmp2081 # Offset: 558
.Ltmp2083:
    00000230: 	movb	%cl, (%rdx)
    00000232: 	addl	$0x1, %ecx
    00000235: 	cmpq	%rax, %rdi
    00000238: 	je	.Ltmp2082 # Offset: 568
.Ltmp2084:
    0000023a: 	movq	%rax, %rdx
.Ltmp2081:
    0000023d: 	leaq	0x1(%rdx), %rax
    00000241: 	cmpq	%rsi, %rax
    00000244: 	jne	.Ltmp2083 # Offset: 580
    00000246: 	movq	0x8(%r8), %rax
    0000024a: 	leaq	0x8(%r8), %r9
    0000024e: 	movb	%cl, (%rdx)
    00000250: 	addl	$0x1, %ecx
    00000253: 	leaq	0x200(%rax), %rsi
    0000025a: 	cmpq	%rax, %rdi
    0000025d: 	je	.Ltmp2082 # Offset: 605
    0000025f: 	movq	%r9, %r8
    00000262: 	jmp	.Ltmp2084 # Offset: 610
    00000264: 	nopl	(%rax) # Size: 4
.Ltmp2082:
    00000268: 	movq	(%rbx), %rdi
    0000026b: 	movq	0x10(%rbx), %rsi
    0000026f: 	movq	0x18(%rbx), %r8
    00000273: 	movq	(%rbp), %xmm1
.Ltmp2088:
    00000278: 	movq	0x10(%rbp), %xmm0
    0000027d: 	movq	%r8, %xmm4
    00000282: 	movhps	0x8(%rbp), %xmm1
    00000286: 	movaps	%xmm1, 0x40(%rsp)
    0000028b: 	movhps	0x18(%rbp), %xmm0
    0000028f: 	movaps	%xmm0, 0x50(%rsp)
    00000294: 	movq	%rdi, %xmm0
    00000299: 	movq	%r15, %rdi
    0000029c: 	movhps	0x8(%rbx), %xmm0
    000002a0: 	movaps	%xmm0, 0x20(%rsp)
    000002a5: 	movq	%rsi, %xmm0
    000002aa: 	movq	%r14, %rsi
    000002ad: 	punpcklqdq	%xmm4, %xmm0
    000002b1: 	movaps	%xmm0, 0x30(%rsp)
    000002b6: 	callq	_Z18quicksort2_forwardISt15_Deque_iteratorIaRaPaEEvT_S4_ # Offset: 694
    000002bb: 	movq	0x10(%rsp), %rsi
    000002c0: 	leaq	DATAat0x34184(%rip), %rdx
    000002c7: 	movq	%r13, %rdi
    000002ca: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 714
    000002cf: 	movdqu	0x10(%rbp), %xmm0
    000002d4: 	movdqu	(%rbp), %xmm5
    000002d9: 	movq	%r13, %r8
    000002dc: 	movdqu	(%rbx), %xmm6
    000002e0: 	movl	0x4(%rsp), %r9d
    000002e5: 	movq	%r12, %rdx
    000002e8: 	movq	%r14, %rsi
    000002eb: 	movaps	%xmm0, 0x50(%rsp)
    000002f0: 	movq	0x8(%rsp), %rcx
    000002f5: 	movdqu	0x10(%rbx), %xmm0
    000002fa: 	movq	%r15, %rdi
    000002fd: 	movaps	%xmm5, 0x40(%rsp)
    00000302: 	movaps	%xmm6, 0x20(%rsp)
    00000307: 	movaps	%xmm0, 0x30(%rsp)
    0000030c: 	callq	_Z15TestSearchArrayISt15_Deque_iteratorIaRaPaEPFS3_S3_S3_aEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 780
    00000311: 	movq	0x60(%rsp), %rdi
    00000316: 	cmpq	0x18(%rsp), %rdi
    0000031b: 	je	.Ltmp2085 # Offset: 795
    0000031d: 	movq	0x70(%rsp), %rax
    00000322: 	leaq	0x1(%rax), %rsi
    00000326: 	callq	_ZdlPvm@PLT # Offset: 806
.Ltmp2085:
    0000032b: 	movq	0x88(%rsp), %rax
    00000333: 	subq	%fs:0x28, %rax
    0000033c: 	jne	.Ltmp2086 # Offset: 828
    0000033e: 	addq	$0x98, %rsp
    00000345: 	popq	%rbx
    00000346: 	popq	%rbp
    00000347: 	popq	%r12
    00000349: 	popq	%r13
    0000034b: 	popq	%r14
    0000034d: 	popq	%r15
    0000034f: 	retq # Offset: 847
.Ltmp2072:
    00000350: 	testq	%r12, %r12
    00000353: 	je	.Ltmp2073 # Offset: 851
    00000359: 	movl	$0x1, %edx
    0000035e: 	jmp	.Ltmp2087 # Offset: 862
.Ltmp2080:
    00000363: 	movq	%rdi, %xmm1
    00000368: 	jmp	.Ltmp2088 # Offset: 872
.Ltmp2086:
    0000036d: 	callq	__stack_chk_fail@PLT # Offset: 877
    00000372: 	endbr64
.Ltmp2091:
    00000376: 	movq	%rax, %rbp
    00000379: 	jmp	.Ltmp2089 # Offset: 889
    0000037b: 	endbr64
    0000037f: 	movq	%rax, %rbp
    00000382: 	jmp	.Ltmp2090 # Offset: 898
    00000384: 	endbr64
    00000388: 	jmp	.Ltmp2091 # Offset: 904
.Ltmp2090:
    0000038a: 	movq	0x60(%rsp), %rdi
    0000038f: 	leaq	0x70(%rsp), %rax
    00000394: 	cmpq	%rax, %rdi
    00000397: 	je	.Ltmp2092 # Offset: 919
.Ltmp2093:
    00000399: 	movq	0x70(%rsp), %rax
    0000039e: 	leaq	0x1(%rax), %rsi
    000003a2: 	callq	_ZdlPvm@PLT # Offset: 930
.Ltmp2092:
    000003a7: 	movq	%rbp, %rdi
    000003aa: 	callq	_Unwind_Resume@PLT # Offset: 938
.Ltmp2089:
    000003af: 	movq	0x60(%rsp), %rdi
    000003b4: 	cmpq	0x18(%rsp), %rdi
    000003b9: 	jne	.Ltmp2093 # Offset: 953
    000003bb: 	jmp	.Ltmp2092 # Offset: 955
DWARF CFI Instructions:
    <empty>
End of Function "_Z13TestOneSearchISt15_Deque_iteratorIaRaPaEPFS3_S3_S3_aEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z23lower_bound_recur_innerISt15_Deque_iteratorIaRaPaEalET_S4_T0_T1_" after disassembly {
  Number      : 314
  State       : disassembled
  Address     : 0xfd50
  Size        : 0x194
  MaxSize     : 0x1a0
  Offset      : 0xfd50
  Section     : .text
  Orc Section : .local.text._Z23lower_bound_recur_innerISt15_Deque_iteratorIaRaPaEalET_S4_T0_T1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0313:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	movq	%rsi, %rax
    00000009: 	movl	%edx, %esi
    0000000b: 	pushq	%r12
    0000000d: 	movq	%rdi, %r12
    00000010: 	subq	$0x38, %rsp
    00000014: 	movdqu	(%rax), %xmm1
    00000018: 	movdqu	0x10(%rax), %xmm0
    0000001d: 	movq	%fs:0x28, %rdx
    00000026: 	movq	%rdx, 0x28(%rsp)
    0000002b: 	xorl	%edx, %edx
    0000002d: 	movhlps	%xmm1, %xmm2
    00000030: 	movhlps	%xmm0, %xmm3
    00000033: 	testq	%rcx, %rcx
    00000036: 	jne	.Ltmp2094 # Offset: 54
    00000038: 	movups	%xmm1, (%rdi)
    0000003b: 	movups	%xmm0, 0x10(%rdi)
.Ltmp2100:
    0000003f: 	movq	0x28(%rsp), %rax
    00000044: 	subq	%fs:0x28, %rax
    0000004d: 	jne	.Ltmp2095 # Offset: 77
    00000053: 	addq	$0x38, %rsp
    00000057: 	movq	%r12, %rax
    0000005a: 	popq	%r12
    0000005c: 	popq	%r13
    0000005e: 	retq # Offset: 94
    0000005f: 	nop # Size: 1
.Ltmp2094:
    00000060: 	movq	%rcx, %r8
    00000063: 	movq	%xmm2, %r10
    00000068: 	movq	%xmm1, %rdx
    0000006d: 	shrq	$0x3f, %r8
    00000071: 	subq	%r10, %rdx
    00000074: 	movq	%xmm1, %rdi
    00000079: 	addq	%rcx, %r8
    0000007c: 	movq	%xmm3, %r11
    00000081: 	sarq	%r8
    00000084: 	addq	%r8, %rdx
    00000087: 	js	.Ltmp2096 # Offset: 135
    0000008d: 	cmpq	$0x1ff, %rdx
    00000094: 	jg	.Ltmp2097 # Offset: 148
    0000009a: 	leaq	(%rdi,%r8), %rdx
    0000009e: 	movq	%xmm0, %r9
    000000a3: 	movsbl	%sil, %r13d
    000000a7: 	cmpb	%sil, (%rdx)
    000000aa: 	jge	.Ltmp2098 # Offset: 170
.Ltmp2101:
    000000b0: 	addq	$0x1, %rdx
    000000b4: 	cmpq	%r9, %rdx
    000000b7: 	je	.Ltmp2099 # Offset: 183
.Ltmp2103:
    000000bd: 	movq	%rdx, %xmm0
    000000c2: 	movq	%r10, %xmm4
    000000c7: 	movq	%rdx, (%rax)
    000000ca: 	movq	%rsp, %rsi
    000000cd: 	punpcklqdq	%xmm4, %xmm0
    000000d1: 	movq	%r10, 0x8(%rax)
    000000d5: 	movq	%r11, %xmm5
    000000da: 	movl	%r13d, %edx
    000000dd: 	movq	%r9, 0x10(%rax)
    000000e1: 	addq	$0x1, %r8
    000000e5: 	movq	%r12, %rdi
    000000e8: 	movq	%r11, 0x18(%rax)
    000000ec: 	subq	%r8, %rcx
    000000ef: 	movaps	%xmm0, (%rsp)
    000000f3: 	movq	%r9, %xmm0
    000000f8: 	punpcklqdq	%xmm5, %xmm0
    000000fc: 	movaps	%xmm0, 0x10(%rsp)
    00000101: 	callq	_Z23lower_bound_recur_innerISt15_Deque_iteratorIaRaPaEalET_S4_T0_T1_ # Offset: 257
    00000106: 	jmp	.Ltmp2100 # Offset: 262
    0000010b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2096:
    00000110: 	movq	%rdx, %rdi
    00000113: 	notq	%rdi
    00000116: 	shrq	$0x9, %rdi
    0000011a: 	notq	%rdi
.Ltmp2102:
    0000011d: 	leaq	(%r11,%rdi,8), %r11
    00000121: 	shlq	$0x9, %rdi
    00000125: 	movsbl	%sil, %r13d
    00000129: 	movq	(%r11), %r10
    0000012c: 	subq	%rdi, %rdx
    0000012f: 	addq	%r10, %rdx
    00000132: 	leaq	0x200(%r10), %r9
    00000139: 	cmpb	%sil, (%rdx)
    0000013c: 	jl	.Ltmp2101 # Offset: 316
.Ltmp2098:
    00000142: 	movq	%rsp, %rsi
    00000145: 	movq	%r8, %rcx
    00000148: 	movl	%r13d, %edx
    0000014b: 	movq	%r12, %rdi
    0000014e: 	movaps	%xmm1, (%rsp)
    00000152: 	movaps	%xmm0, 0x10(%rsp)
    00000157: 	callq	_Z23lower_bound_recur_innerISt15_Deque_iteratorIaRaPaEalET_S4_T0_T1_ # Offset: 343
    0000015c: 	jmp	.Ltmp2100 # Offset: 348
    00000161: 	nopl	(%rax) # Size: 7
.Ltmp2097:
    00000168: 	movq	%rdx, %rdi
    0000016b: 	sarq	$0x9, %rdi
    0000016f: 	jmp	.Ltmp2102 # Offset: 367
    00000171: 	nopl	(%rax) # Size: 7
.Ltmp2099:
    00000178: 	movq	0x8(%r11), %rdx
    0000017c: 	addq	$0x8, %r11
    00000180: 	leaq	0x200(%rdx), %r9
    00000187: 	movq	%rdx, %r10
    0000018a: 	jmp	.Ltmp2103 # Offset: 394
.Ltmp2095:
    0000018f: 	callq	__stack_chk_fail@PLT # Offset: 399
DWARF CFI Instructions:
    <empty>
End of Function "_Z23lower_bound_recur_innerISt15_Deque_iteratorIaRaPaEalET_S4_T0_T1_"

Binary Function "_Z17lower_bound_recurISt15_Deque_iteratorIaRaPaEaET_S4_S4_T0_" after disassembly {
  Number      : 315
  State       : disassembled
  Address     : 0xfef0
  Size        : 0x19c
  MaxSize     : 0x1a0
  Offset      : 0xfef0
  Section     : .text
  Orc Section : .local.text._Z17lower_bound_recurISt15_Deque_iteratorIaRaPaEaET_S4_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0314:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movq	%rdx, %r10
    00000009: 	movq	%rdi, %r12
    0000000c: 	subq	$0x30, %rsp
    00000010: 	movdqu	0x10(%rsi), %xmm0
    00000015: 	movq	0x18(%rdx), %rdx
    00000019: 	movq	%fs:0x28, %rax
    00000022: 	movq	%rax, 0x28(%rsp)
    00000027: 	xorl	%eax, %eax
    00000029: 	movdqu	(%rsi), %xmm1
    0000002d: 	movhlps	%xmm0, %xmm3
    00000030: 	movq	%rdx, %rax
    00000033: 	movq	%xmm3, %r8
    00000038: 	movq	%xmm1, %r9
    0000003d: 	movhlps	%xmm1, %xmm2
    00000040: 	subq	%r8, %rax
    00000043: 	sarq	$0x3, %rax
    00000047: 	cmpq	$0x1, %rdx
    0000004b: 	movq	(%r10), %rdx
    0000004e: 	adcq	$-0x1, %rax
    00000052: 	subq	0x8(%r10), %rdx
    00000056: 	shlq	$0x9, %rax
    0000005a: 	addq	%rdx, %rax
    0000005d: 	movq	%xmm0, %rdx
    00000062: 	subq	%r9, %rdx
    00000065: 	addq	%rdx, %rax
    00000068: 	jne	.Ltmp2104 # Offset: 104
    0000006a: 	movups	%xmm1, (%rdi)
    0000006d: 	movups	%xmm0, 0x10(%rdi)
.Ltmp2110:
    00000071: 	movq	0x28(%rsp), %rax
    00000076: 	subq	%fs:0x28, %rax
    0000007f: 	jne	.Ltmp2105 # Offset: 127
    00000085: 	addq	$0x30, %rsp
    00000089: 	movq	%r12, %rax
    0000008c: 	popq	%r12
    0000008e: 	retq # Offset: 142
    0000008f: 	nop # Size: 1
.Ltmp2104:
    00000090: 	movq	%rax, %r10
    00000093: 	movq	%xmm2, %rdi
    00000098: 	movq	%xmm1, %rdx
    0000009d: 	shrq	$0x3f, %r10
    000000a1: 	subq	%rdi, %rdx
    000000a4: 	addq	%rax, %r10
    000000a7: 	sarq	%r10
    000000aa: 	addq	%r10, %rdx
    000000ad: 	js	.Ltmp2106 # Offset: 173
    000000af: 	cmpq	$0x1ff, %rdx
    000000b6: 	jg	.Ltmp2107 # Offset: 182
    000000bc: 	leaq	(%r9,%r10), %rdx
    000000c0: 	movq	%xmm0, %rsi
    000000c5: 	movsbl	%cl, %r9d
    000000c9: 	cmpb	(%rdx), %cl
    000000cb: 	jle	.Ltmp2108 # Offset: 203
.Ltmp2111:
    000000d1: 	addq	$0x1, %rdx
    000000d5: 	cmpq	%rsi, %rdx
    000000d8: 	je	.Ltmp2109 # Offset: 216
.Ltmp2113:
    000000de: 	movq	%rdi, %xmm4
    000000e3: 	movq	%rdx, %xmm0
    000000e8: 	addq	$0x1, %r10
    000000ec: 	movl	%r9d, %edx
    000000ef: 	punpcklqdq	%xmm4, %xmm0
    000000f3: 	movq	%r8, %xmm5
    000000f8: 	subq	%r10, %rax
    000000fb: 	movq	%r12, %rdi
    000000fe: 	movaps	%xmm0, (%rsp)
    00000102: 	movq	%rsi, %xmm0
    00000107: 	movq	%rax, %rcx
    0000010a: 	movq	%rsp, %rsi
    0000010d: 	punpcklqdq	%xmm5, %xmm0
    00000111: 	movaps	%xmm0, 0x10(%rsp)
    00000116: 	callq	_Z23lower_bound_recur_innerISt15_Deque_iteratorIaRaPaEalET_S4_T0_T1_ # Offset: 278
    0000011b: 	jmp	.Ltmp2110 # Offset: 283
.Ltmp2106:
    00000120: 	movq	%rdx, %r9
    00000123: 	notq	%r9
    00000126: 	shrq	$0x9, %r9
    0000012a: 	notq	%r9
.Ltmp2112:
    0000012d: 	leaq	(%r8,%r9,8), %r8
    00000131: 	shlq	$0x9, %r9
    00000135: 	movq	(%r8), %rdi
    00000138: 	subq	%r9, %rdx
    0000013b: 	movsbl	%cl, %r9d
    0000013f: 	addq	%rdi, %rdx
    00000142: 	leaq	0x200(%rdi), %rsi
    00000149: 	cmpb	(%rdx), %cl
    0000014b: 	jg	.Ltmp2111 # Offset: 331
.Ltmp2108:
    0000014d: 	movq	%rsp, %rsi
    00000150: 	movq	%r10, %rcx
    00000153: 	movl	%r9d, %edx
    00000156: 	movq	%r12, %rdi
    00000159: 	movaps	%xmm1, (%rsp)
    0000015d: 	movaps	%xmm0, 0x10(%rsp)
    00000162: 	callq	_Z23lower_bound_recur_innerISt15_Deque_iteratorIaRaPaEalET_S4_T0_T1_ # Offset: 354
    00000167: 	jmp	.Ltmp2110 # Offset: 359
    0000016c: 	nopl	(%rax) # Size: 4
.Ltmp2107:
    00000170: 	movq	%rdx, %r9
    00000173: 	sarq	$0x9, %r9
    00000177: 	jmp	.Ltmp2112 # Offset: 375
    00000179: 	nopl	(%rax) # Size: 7
.Ltmp2109:
    00000180: 	movq	0x8(%r8), %rdx
    00000184: 	addq	$0x8, %r8
    00000188: 	leaq	0x200(%rdx), %rsi
    0000018f: 	movq	%rdx, %rdi
    00000192: 	jmp	.Ltmp2113 # Offset: 402
.Ltmp2105:
    00000197: 	callq	__stack_chk_fail@PLT # Offset: 407
DWARF CFI Instructions:
    <empty>
End of Function "_Z17lower_bound_recurISt15_Deque_iteratorIaRaPaEaET_S4_S4_T0_"

Binary Function "_Z23upper_bound_recur_innerISt15_Deque_iteratorIaRaPaEalET_S4_T0_T1_" after disassembly {
  Number      : 316
  State       : disassembled
  Address     : 0x10090
  Size        : 0x194
  MaxSize     : 0x1a0
  Offset      : 0x10090
  Section     : .text
  Orc Section : .local.text._Z23upper_bound_recur_innerISt15_Deque_iteratorIaRaPaEalET_S4_T0_T1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0315:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	movq	%rsi, %rax
    00000009: 	movl	%edx, %esi
    0000000b: 	pushq	%r12
    0000000d: 	movq	%rdi, %r12
    00000010: 	subq	$0x38, %rsp
    00000014: 	movdqu	(%rax), %xmm1
    00000018: 	movdqu	0x10(%rax), %xmm0
    0000001d: 	movq	%fs:0x28, %rdx
    00000026: 	movq	%rdx, 0x28(%rsp)
    0000002b: 	xorl	%edx, %edx
    0000002d: 	movhlps	%xmm1, %xmm2
    00000030: 	movhlps	%xmm0, %xmm3
    00000033: 	testq	%rcx, %rcx
    00000036: 	jne	.Ltmp2114 # Offset: 54
    00000038: 	movups	%xmm1, (%rdi)
    0000003b: 	movups	%xmm0, 0x10(%rdi)
.Ltmp2120:
    0000003f: 	movq	0x28(%rsp), %rax
    00000044: 	subq	%fs:0x28, %rax
    0000004d: 	jne	.Ltmp2115 # Offset: 77
    00000053: 	addq	$0x38, %rsp
    00000057: 	movq	%r12, %rax
    0000005a: 	popq	%r12
    0000005c: 	popq	%r13
    0000005e: 	retq # Offset: 94
    0000005f: 	nop # Size: 1
.Ltmp2114:
    00000060: 	movq	%rcx, %r8
    00000063: 	movq	%xmm2, %r10
    00000068: 	movq	%xmm1, %rdx
    0000006d: 	shrq	$0x3f, %r8
    00000071: 	subq	%r10, %rdx
    00000074: 	movq	%xmm1, %rdi
    00000079: 	addq	%rcx, %r8
    0000007c: 	movq	%xmm3, %r11
    00000081: 	sarq	%r8
    00000084: 	addq	%r8, %rdx
    00000087: 	js	.Ltmp2116 # Offset: 135
    0000008d: 	cmpq	$0x1ff, %rdx
    00000094: 	jg	.Ltmp2117 # Offset: 148
    0000009a: 	leaq	(%rdi,%r8), %rdx
    0000009e: 	movq	%xmm0, %r9
    000000a3: 	movsbl	%sil, %r13d
    000000a7: 	cmpb	%sil, (%rdx)
    000000aa: 	jg	.Ltmp2118 # Offset: 170
.Ltmp2121:
    000000b0: 	addq	$0x1, %rdx
    000000b4: 	cmpq	%r9, %rdx
    000000b7: 	je	.Ltmp2119 # Offset: 183
.Ltmp2123:
    000000bd: 	movq	%rdx, %xmm0
    000000c2: 	movq	%r10, %xmm4
    000000c7: 	movq	%rdx, (%rax)
    000000ca: 	movq	%rsp, %rsi
    000000cd: 	punpcklqdq	%xmm4, %xmm0
    000000d1: 	movq	%r10, 0x8(%rax)
    000000d5: 	movq	%r11, %xmm5
    000000da: 	movl	%r13d, %edx
    000000dd: 	movq	%r9, 0x10(%rax)
    000000e1: 	addq	$0x1, %r8
    000000e5: 	movq	%r12, %rdi
    000000e8: 	movq	%r11, 0x18(%rax)
    000000ec: 	subq	%r8, %rcx
    000000ef: 	movaps	%xmm0, (%rsp)
    000000f3: 	movq	%r9, %xmm0
    000000f8: 	punpcklqdq	%xmm5, %xmm0
    000000fc: 	movaps	%xmm0, 0x10(%rsp)
    00000101: 	callq	_Z23upper_bound_recur_innerISt15_Deque_iteratorIaRaPaEalET_S4_T0_T1_ # Offset: 257
    00000106: 	jmp	.Ltmp2120 # Offset: 262
    0000010b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2116:
    00000110: 	movq	%rdx, %rdi
    00000113: 	notq	%rdi
    00000116: 	shrq	$0x9, %rdi
    0000011a: 	notq	%rdi
.Ltmp2122:
    0000011d: 	leaq	(%r11,%rdi,8), %r11
    00000121: 	shlq	$0x9, %rdi
    00000125: 	movsbl	%sil, %r13d
    00000129: 	movq	(%r11), %r10
    0000012c: 	subq	%rdi, %rdx
    0000012f: 	addq	%r10, %rdx
    00000132: 	leaq	0x200(%r10), %r9
    00000139: 	cmpb	%sil, (%rdx)
    0000013c: 	jle	.Ltmp2121 # Offset: 316
.Ltmp2118:
    00000142: 	movq	%rsp, %rsi
    00000145: 	movq	%r8, %rcx
    00000148: 	movl	%r13d, %edx
    0000014b: 	movq	%r12, %rdi
    0000014e: 	movaps	%xmm1, (%rsp)
    00000152: 	movaps	%xmm0, 0x10(%rsp)
    00000157: 	callq	_Z23upper_bound_recur_innerISt15_Deque_iteratorIaRaPaEalET_S4_T0_T1_ # Offset: 343
    0000015c: 	jmp	.Ltmp2120 # Offset: 348
    00000161: 	nopl	(%rax) # Size: 7
.Ltmp2117:
    00000168: 	movq	%rdx, %rdi
    0000016b: 	sarq	$0x9, %rdi
    0000016f: 	jmp	.Ltmp2122 # Offset: 367
    00000171: 	nopl	(%rax) # Size: 7
.Ltmp2119:
    00000178: 	movq	0x8(%r11), %rdx
    0000017c: 	addq	$0x8, %r11
    00000180: 	leaq	0x200(%rdx), %r9
    00000187: 	movq	%rdx, %r10
    0000018a: 	jmp	.Ltmp2123 # Offset: 394
.Ltmp2115:
    0000018f: 	callq	__stack_chk_fail@PLT # Offset: 399
DWARF CFI Instructions:
    <empty>
End of Function "_Z23upper_bound_recur_innerISt15_Deque_iteratorIaRaPaEalET_S4_T0_T1_"

Binary Function "_Z17upper_bound_recurISt15_Deque_iteratorIaRaPaEaET_S4_S4_T0_" after disassembly {
  Number      : 317
  State       : disassembled
  Address     : 0x10230
  Size        : 0x19c
  MaxSize     : 0x1a0
  Offset      : 0x10230
  Section     : .text
  Orc Section : .local.text._Z17upper_bound_recurISt15_Deque_iteratorIaRaPaEaET_S4_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0316:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movq	%rdx, %r10
    00000009: 	movq	%rdi, %r12
    0000000c: 	subq	$0x30, %rsp
    00000010: 	movdqu	0x10(%rsi), %xmm0
    00000015: 	movq	0x18(%rdx), %rdx
    00000019: 	movq	%fs:0x28, %rax
    00000022: 	movq	%rax, 0x28(%rsp)
    00000027: 	xorl	%eax, %eax
    00000029: 	movdqu	(%rsi), %xmm1
    0000002d: 	movhlps	%xmm0, %xmm3
    00000030: 	movq	%rdx, %rax
    00000033: 	movq	%xmm3, %r8
    00000038: 	movq	%xmm1, %r9
    0000003d: 	movhlps	%xmm1, %xmm2
    00000040: 	subq	%r8, %rax
    00000043: 	sarq	$0x3, %rax
    00000047: 	cmpq	$0x1, %rdx
    0000004b: 	movq	(%r10), %rdx
    0000004e: 	adcq	$-0x1, %rax
    00000052: 	subq	0x8(%r10), %rdx
    00000056: 	shlq	$0x9, %rax
    0000005a: 	addq	%rdx, %rax
    0000005d: 	movq	%xmm0, %rdx
    00000062: 	subq	%r9, %rdx
    00000065: 	addq	%rdx, %rax
    00000068: 	jne	.Ltmp2124 # Offset: 104
    0000006a: 	movups	%xmm1, (%rdi)
    0000006d: 	movups	%xmm0, 0x10(%rdi)
.Ltmp2130:
    00000071: 	movq	0x28(%rsp), %rax
    00000076: 	subq	%fs:0x28, %rax
    0000007f: 	jne	.Ltmp2125 # Offset: 127
    00000085: 	addq	$0x30, %rsp
    00000089: 	movq	%r12, %rax
    0000008c: 	popq	%r12
    0000008e: 	retq # Offset: 142
    0000008f: 	nop # Size: 1
.Ltmp2124:
    00000090: 	movq	%rax, %r10
    00000093: 	movq	%xmm2, %rdi
    00000098: 	movq	%xmm1, %rdx
    0000009d: 	shrq	$0x3f, %r10
    000000a1: 	subq	%rdi, %rdx
    000000a4: 	addq	%rax, %r10
    000000a7: 	sarq	%r10
    000000aa: 	addq	%r10, %rdx
    000000ad: 	js	.Ltmp2126 # Offset: 173
    000000af: 	cmpq	$0x1ff, %rdx
    000000b6: 	jg	.Ltmp2127 # Offset: 182
    000000bc: 	leaq	(%r9,%r10), %rdx
    000000c0: 	movq	%xmm0, %rsi
    000000c5: 	movsbl	%cl, %r9d
    000000c9: 	cmpb	(%rdx), %cl
    000000cb: 	jl	.Ltmp2128 # Offset: 203
.Ltmp2131:
    000000d1: 	addq	$0x1, %rdx
    000000d5: 	cmpq	%rsi, %rdx
    000000d8: 	je	.Ltmp2129 # Offset: 216
.Ltmp2133:
    000000de: 	movq	%rdi, %xmm4
    000000e3: 	movq	%rdx, %xmm0
    000000e8: 	addq	$0x1, %r10
    000000ec: 	movl	%r9d, %edx
    000000ef: 	punpcklqdq	%xmm4, %xmm0
    000000f3: 	movq	%r8, %xmm5
    000000f8: 	subq	%r10, %rax
    000000fb: 	movq	%r12, %rdi
    000000fe: 	movaps	%xmm0, (%rsp)
    00000102: 	movq	%rsi, %xmm0
    00000107: 	movq	%rax, %rcx
    0000010a: 	movq	%rsp, %rsi
    0000010d: 	punpcklqdq	%xmm5, %xmm0
    00000111: 	movaps	%xmm0, 0x10(%rsp)
    00000116: 	callq	_Z23upper_bound_recur_innerISt15_Deque_iteratorIaRaPaEalET_S4_T0_T1_ # Offset: 278
    0000011b: 	jmp	.Ltmp2130 # Offset: 283
.Ltmp2126:
    00000120: 	movq	%rdx, %r9
    00000123: 	notq	%r9
    00000126: 	shrq	$0x9, %r9
    0000012a: 	notq	%r9
.Ltmp2132:
    0000012d: 	leaq	(%r8,%r9,8), %r8
    00000131: 	shlq	$0x9, %r9
    00000135: 	movq	(%r8), %rdi
    00000138: 	subq	%r9, %rdx
    0000013b: 	movsbl	%cl, %r9d
    0000013f: 	addq	%rdi, %rdx
    00000142: 	leaq	0x200(%rdi), %rsi
    00000149: 	cmpb	(%rdx), %cl
    0000014b: 	jge	.Ltmp2131 # Offset: 331
.Ltmp2128:
    0000014d: 	movq	%rsp, %rsi
    00000150: 	movq	%r10, %rcx
    00000153: 	movl	%r9d, %edx
    00000156: 	movq	%r12, %rdi
    00000159: 	movaps	%xmm1, (%rsp)
    0000015d: 	movaps	%xmm0, 0x10(%rsp)
    00000162: 	callq	_Z23upper_bound_recur_innerISt15_Deque_iteratorIaRaPaEalET_S4_T0_T1_ # Offset: 354
    00000167: 	jmp	.Ltmp2130 # Offset: 359
    0000016c: 	nopl	(%rax) # Size: 4
.Ltmp2127:
    00000170: 	movq	%rdx, %r9
    00000173: 	sarq	$0x9, %r9
    00000177: 	jmp	.Ltmp2132 # Offset: 375
    00000179: 	nopl	(%rax) # Size: 7
.Ltmp2129:
    00000180: 	movq	0x8(%r8), %rdx
    00000184: 	addq	$0x8, %r8
    00000188: 	leaq	0x200(%rdx), %rsi
    0000018f: 	movq	%rdx, %rdi
    00000192: 	jmp	.Ltmp2133 # Offset: 402
.Ltmp2125:
    00000197: 	callq	__stack_chk_fail@PLT # Offset: 407
DWARF CFI Instructions:
    <empty>
End of Function "_Z17upper_bound_recurISt15_Deque_iteratorIaRaPaEaET_S4_S4_T0_"

Binary Function "_Z15TestSearchArrayISt15_Deque_iteratorIaRaPaEPFbS3_S3_aEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 318
  State       : disassembled
  Address     : 0x103d0
  Size        : 0x2a4
  MaxSize     : 0x2b0
  Offset      : 0x103d0
  Section     : .text
  Orc Section : .local.text._Z15TestSearchArrayISt15_Deque_iteratorIaRaPaEPFbS3_S3_aEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0317:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	movl	$0x400, %edi
    0000000e: 	pushq	%r14
    00000010: 	movq	%rdx, %r14
    00000013: 	pushq	%r13
    00000015: 	pushq	%r12
    00000017: 	movq	%rsi, %r12
    0000001a: 	pushq	%rbp
    0000001b: 	pushq	%rbx
    0000001c: 	subq	$0x88, %rsp
    00000023: 	movq	%rcx, 0x10(%rsp)
    00000028: 	movq	%r8, 0x20(%rsp)
    0000002d: 	movb	%r9b, 0x1f(%rsp)
    00000032: 	movq	%rdx, 0x28(%rsp)
    00000037: 	movq	%fs:0x28, %rax
    00000040: 	movq	%rax, 0x78(%rsp)
    00000045: 	xorl	%eax, %eax
    00000047: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    0000004e: 	callq	_Znwm@PLT # Offset: 78
    00000053: 	movq	%r14, %r11
    00000056: 	movabsq	$0x5851f42d4c957f2d, %r9
    00000060: 	leaq	0x9(%rax), %rdi
    00000064: 	movb	$0x0, (%rax)
    00000067: 	movq	%rax, %rbx
    0000006a: 	leaq	0x400(%rax), %r8
    00000071: 	andq	$-0x8, %rdi
    00000075: 	movq	%rax, 0x8(%rsp)
    0000007a: 	movq	$0x0, 0x1(%rax)
    00000082: 	movq	$0x0, 0x3f8(%rax)
    0000008d: 	subl	%edi, %eax
    0000008f: 	leal	0x400(%rax), %ecx
    00000095: 	xorl	%eax, %eax
    00000097: 	shrl	$0x3, %ecx
    0000009a: 	rep		stosq	%rax, %es:(%rdi)
    0000009d: 	movq	%rbx, %rcx
    000000a0: 	movabsq	$0x14057b7ef767814f, %rdi
    000000aa: 	movq	(%r15), %rbp
    000000ad: 	movq	0x18(%r15), %r10
    000000b1: 	movq	%rbp, %rsi
    000000b4: 	subq	0x8(%r15), %rsi
    000000b8: 	jmp	.Ltmp2134 # Offset: 184
    000000ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2137:
    000000c0: 	cmpq	$0x1ff, %rax
    000000c6: 	jg	.Ltmp2135 # Offset: 198
    000000cc: 	leaq	(%rbp,%rdx), %rax
    000000d1: 	addq	$0x1, %rcx
    000000d5: 	movzbl	(%rax), %eax
    000000d8: 	movb	%al, -0x1(%rcx)
    000000db: 	cmpq	%r8, %rcx
    000000de: 	je	.Ltmp2136 # Offset: 222
.Ltmp2134:
    000000e0: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000000e7: 	imulq	%r9, %rax
    000000eb: 	addq	%rdi, %rax
    000000ee: 	movq	%rax, %rdx
    000000f1: 	movq	%rax, %rbx
    000000f4: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000000fb: 	shrq	$0x14, %rdx
    000000ff: 	shlq	$0x17, %rbx
    00000103: 	xorq	%rbx, %rdx
    00000106: 	xorq	%rdx, %rax
    00000109: 	xorl	%edx, %edx
    0000010b: 	divq	%r11
    0000010e: 	movq	%rdx, %rax
    00000111: 	addq	%rsi, %rax
    00000114: 	jns	.Ltmp2137 # Offset: 276
    00000116: 	movq	%rax, %rdx
    00000119: 	notq	%rdx
    0000011c: 	shrq	$0x9, %rdx
    00000120: 	notq	%rdx
.Ltmp2144:
    00000123: 	movq	%rdx, %rbx
    00000126: 	addq	$0x1, %rcx
    0000012a: 	shlq	$0x9, %rbx
    0000012e: 	subq	%rbx, %rax
    00000131: 	addq	(%r10,%rdx,8), %rax
    00000135: 	movzbl	(%rax), %eax
    00000138: 	movb	%al, -0x1(%rcx)
    0000013b: 	cmpq	%r8, %rcx
    0000013e: 	jne	.Ltmp2134 # Offset: 318
.Ltmp2136:
    00000140: 	callq	clock@PLT # Offset: 320
    00000145: 	xorl	%ebx, %ebx
    00000147: 	xorl	%ebp, %ebp
    00000149: 	leaq	0x50(%rsp), %r13
    0000014e: 	movq	%rax, start_time(%rip)
    00000155: 	leaq	0x30(%rsp), %r14
.Ltmp2141:
    0000015a: 	leaq	0xc8(%rbp), %rax
    00000161: 	movq	%rax, (%rsp)
    00000165: 	nopl	(%rax) # Size: 3
.Ltmp2139:
    00000168: 	movq	%rbp, %rax
    0000016b: 	movdqu	(%r15), %xmm4
    00000170: 	movq	0x8(%rsp), %rcx
    00000175: 	movq	%r13, %rsi
    00000178: 	movdqu	(%r12), %xmm2
    0000017e: 	movdqu	0x10(%r12), %xmm3
    00000185: 	addq	$0x1, %rbp
    00000189: 	movq	%r14, %rdi
    0000018c: 	movdqu	0x10(%r15), %xmm5
    00000192: 	andl	$0x3ff, %eax
    00000197: 	movaps	%xmm4, 0x30(%rsp)
    0000019c: 	movsbl	(%rcx,%rax), %edx
    000001a0: 	movaps	%xmm2, 0x50(%rsp)
    000001a5: 	movq	0x10(%rsp), %rax
    000001aa: 	movaps	%xmm3, 0x60(%rsp)
    000001af: 	movaps	%xmm5, 0x40(%rsp)
    000001b4: 	callq	*%rax # Offset: 436
    000001b6: 	testb	%al, %al
    000001b8: 	jne	.Ltmp2138 # Offset: 440
    000001ba: 	cmpb	$0x0, 0x1f(%rsp)
    000001bf: 	movl	$0x1, %eax
    000001c4: 	cmovel	%eax, %ebx
.Ltmp2138:
    000001c7: 	cmpq	(%rsp), %rbp
    000001cb: 	jne	.Ltmp2139 # Offset: 459
    000001cd: 	callq	clock@PLT # Offset: 461
    000001d2: 	movsd	gMinimumTimeTarget(%rip), %xmm1
    000001da: 	pxor	%xmm0, %xmm0
    000001de: 	movq	%rax, end_time(%rip)
    000001e5: 	subq	start_time(%rip), %rax
    000001ec: 	cvtsi2sd	%rax, %xmm0
    000001f1: 	divsd	DATAat0x34410(%rip), %xmm0
    000001f9: 	comisd	%xmm0, %xmm1
    000001fd: 	jbe	.Ltmp2140 # Offset: 509
    000001ff: 	cmpq	$0x5f5e0ff, %rbp
    00000206: 	jbe	.Ltmp2141 # Offset: 518
.Ltmp2140:
    0000020c: 	movq	0x20(%rsp), %rdx
    00000211: 	movq	0x28(%rsp), %rdi
    00000216: 	movq	%rbp, %rsi
    00000219: 	callq	_Z13record_resultdmmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 537
    0000021e: 	testb	%bl, %bl
    00000220: 	jne	.Ltmp2142 # Offset: 544
.Ltmp2145:
    00000222: 	movq	0x78(%rsp), %rax
    00000227: 	subq	%fs:0x28, %rax
    00000230: 	jne	.Ltmp2143 # Offset: 560
    00000232: 	movq	0x8(%rsp), %rdi
    00000237: 	addq	$0x88, %rsp
    0000023e: 	movl	$0x400, %esi
    00000243: 	popq	%rbx
    00000244: 	popq	%rbp
    00000245: 	popq	%r12
    00000247: 	popq	%r13
    00000249: 	popq	%r14
    0000024b: 	popq	%r15
    0000024d: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 589
    00000252: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2135:
    00000258: 	movq	%rax, %rdx
    0000025b: 	sarq	$0x9, %rdx
    0000025f: 	jmp	.Ltmp2144 # Offset: 607
.Ltmp2142:
    00000264: 	movq	0x20(%rsp), %rax
    00000269: 	leaq	DATAat0x34137(%rip), %rsi
    00000270: 	movl	$0x1, %edi
    00000275: 	movq	(%rax), %rdx
    00000278: 	xorl	%eax, %eax
    0000027a: 	callq	__printf_chk@PLT # Offset: 634
    0000027f: 	jmp	.Ltmp2145 # Offset: 639
.Ltmp2143:
    00000281: 	callq	__stack_chk_fail@PLT # Offset: 641
    00000286: 	endbr64
    0000028a: 	movq	%rax, %rbp
    0000028d: 	movq	0x8(%rsp), %rdi
    00000292: 	movl	$0x400, %esi
    00000297: 	callq	_ZdlPvm@PLT # Offset: 663
    0000029c: 	movq	%rbp, %rdi
    0000029f: 	callq	_Unwind_Resume@PLT # Offset: 671
DWARF CFI Instructions:
    <empty>
End of Function "_Z15TestSearchArrayISt15_Deque_iteratorIaRaPaEPFbS3_S3_aEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z13TestOneSearchISt15_Deque_iteratorIaRaPaEPFbS3_S3_aEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 319
  State       : disassembled
  Address     : 0x10680
  Size        : 0x3bd
  MaxSize     : 0x3c0
  Offset      : 0x10680
  Section     : .text
  Orc Section : .local.text._Z13TestOneSearchISt15_Deque_iteratorIaRaPaEPFbS3_S3_aEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0318:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rdx, %r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rsi, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x98, %rsp
    0000001e: 	movq	(%rdi), %rdx
    00000021: 	movq	(%rsi), %rsi
    00000024: 	movq	%rcx, 0x8(%rsp)
    00000029: 	movq	0x10(%rdi), %rcx
    0000002d: 	movq	%r8, 0x10(%rsp)
    00000032: 	movq	0x18(%rdi), %rdi
    00000036: 	movq	%fs:0x28, %rax
    0000003f: 	movq	%rax, 0x88(%rsp)
    00000047: 	xorl	%eax, %eax
    00000049: 	cmpq	%rsi, %rdx
    0000004c: 	jne	.Ltmp2146 # Offset: 76
    0000004e: 	jmp	.Ltmp2147 # Offset: 78
.Ltmp2148:
    00000050: 	movb	$0x5, (%rdx)
    00000053: 	cmpq	%rsi, %rax
    00000056: 	je	.Ltmp2147 # Offset: 86
.Ltmp2149:
    00000058: 	movq	%rax, %rdx
.Ltmp2146:
    0000005b: 	leaq	0x1(%rdx), %rax
    0000005f: 	cmpq	%rcx, %rax
    00000062: 	jne	.Ltmp2148 # Offset: 98
    00000064: 	movq	0x8(%rdi), %rax
    00000068: 	leaq	0x8(%rdi), %r8
    0000006c: 	movb	$0x5, (%rdx)
    0000006f: 	leaq	0x200(%rax), %rcx
    00000076: 	cmpq	%rax, %rsi
    00000079: 	je	.Ltmp2147 # Offset: 121
    0000007b: 	movq	%r8, %rdi
    0000007e: 	jmp	.Ltmp2149 # Offset: 126
.Ltmp2147:
    00000080: 	movq	0x10(%rsp), %rsi
    00000085: 	leaq	0x60(%rsp), %r13
    0000008a: 	movzbl	%r9b, %eax
    0000008e: 	leaq	DATAat0x34160(%rip), %rdx
    00000095: 	movq	%r13, %rdi
    00000098: 	movl	%eax, 0x4(%rsp)
    0000009c: 	leaq	0x40(%rsp), %r14
    000000a1: 	leaq	0x20(%rsp), %r15
    000000a6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 166
    000000ab: 	movdqu	(%rbp), %xmm2
    000000b0: 	movdqu	0x10(%rbp), %xmm3
    000000b5: 	movq	%r13, %r8
    000000b8: 	movdqu	(%rbx), %xmm4
    000000bc: 	movdqu	0x10(%rbx), %xmm5
    000000c1: 	movq	%r12, %rdx
    000000c4: 	movq	%r14, %rsi
    000000c7: 	movl	0x4(%rsp), %r9d
    000000cc: 	movq	0x8(%rsp), %rcx
    000000d1: 	movq	%r15, %rdi
    000000d4: 	movaps	%xmm2, 0x40(%rsp)
    000000d9: 	movaps	%xmm3, 0x50(%rsp)
    000000de: 	movaps	%xmm4, 0x20(%rsp)
    000000e3: 	movaps	%xmm5, 0x30(%rsp)
    000000e8: 	callq	_Z15TestSearchArrayISt15_Deque_iteratorIaRaPaEPFbS3_S3_aEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 232
    000000ed: 	movq	0x60(%rsp), %rdi
    000000f2: 	leaq	0x70(%rsp), %rax
    000000f7: 	movq	%rax, 0x18(%rsp)
    000000fc: 	cmpq	%rax, %rdi
    000000ff: 	je	.Ltmp2150 # Offset: 255
    00000101: 	movq	0x70(%rsp), %rax
    00000106: 	leaq	0x1(%rax), %rsi
    0000010a: 	callq	_ZdlPvm@PLT # Offset: 266
.Ltmp2150:
    0000010f: 	movq	(%rbx), %rdi
    00000112: 	movq	0x10(%rbx), %r8
    00000116: 	movq	0x18(%rbx), %r10
    0000011a: 	cmpq	$0x9, %r12
    0000011e: 	jbe	.Ltmp2151 # Offset: 286
    00000124: 	movabsq	$-0x3333333333333333, %rdx
    0000012e: 	movq	%r12, %rax
    00000131: 	mulq	%rdx
    00000134: 	shrq	$0x3, %rdx
.Ltmp2166:
    00000138: 	xorl	%esi, %esi
    0000013a: 	xorl	%r9d, %r9d
    0000013d: 	cmpq	$0x0, %r12
    00000141: 	jbe	.Ltmp2152 # Offset: 321
    00000143: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2157:
    00000148: 	xorl	%ecx, %ecx
    0000014a: 	jmp	.Ltmp2153 # Offset: 330
    0000014c: 	nopl	(%rax) # Size: 4
.Ltmp2155:
    00000150: 	addq	$0x1, %rcx
    00000154: 	movb	%r9b, (%rdi)
    00000157: 	addq	$0x1, %rsi
    0000015b: 	cmpq	%rdx, %rcx
    0000015e: 	jae	.Ltmp2154 # Offset: 350
.Ltmp2156:
    00000160: 	cmpq	%rsi, %r12
    00000163: 	jbe	.Ltmp2154 # Offset: 355
    00000165: 	movq	%rax, %rdi
.Ltmp2153:
    00000168: 	leaq	0x1(%rdi), %rax
    0000016c: 	cmpq	%r8, %rax
    0000016f: 	jne	.Ltmp2155 # Offset: 367
    00000171: 	movq	0x8(%r10), %rax
    00000175: 	leaq	0x8(%r10), %r11
    00000179: 	addq	$0x1, %rcx
    0000017d: 	movb	%r9b, (%rdi)
    00000180: 	addq	$0x1, %rsi
    00000184: 	movq	%r11, %r10
    00000187: 	leaq	0x200(%rax), %r8
    0000018e: 	cmpq	%rdx, %rcx
    00000191: 	jb	.Ltmp2156 # Offset: 401
    00000193: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2154:
    00000198: 	movq	%rax, %rdi
    0000019b: 	addl	$0x1, %r9d
    0000019f: 	cmpq	%rsi, %r12
    000001a2: 	ja	.Ltmp2157 # Offset: 418
.Ltmp2152:
    000001a4: 	movq	0x10(%rsp), %rsi
    000001a9: 	leaq	DATAat0x3416e(%rip), %rdx
    000001b0: 	movq	%r13, %rdi
    000001b3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 435
    000001b8: 	movdqu	(%rbp), %xmm6
    000001bd: 	movdqu	0x10(%rbp), %xmm7
    000001c2: 	movq	%r13, %r8
    000001c5: 	movdqu	(%rbx), %xmm2
    000001c9: 	movdqu	0x10(%rbx), %xmm3
    000001ce: 	movq	%r12, %rdx
    000001d1: 	movq	%r14, %rsi
    000001d4: 	movl	0x4(%rsp), %r9d
    000001d9: 	movq	0x8(%rsp), %rcx
    000001de: 	movq	%r15, %rdi
    000001e1: 	movaps	%xmm6, 0x40(%rsp)
    000001e6: 	movaps	%xmm7, 0x50(%rsp)
    000001eb: 	movaps	%xmm2, 0x20(%rsp)
    000001f0: 	movaps	%xmm3, 0x30(%rsp)
    000001f5: 	callq	_Z15TestSearchArrayISt15_Deque_iteratorIaRaPaEPFbS3_S3_aEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 501
    000001fa: 	movq	0x60(%rsp), %rdi
    000001ff: 	cmpq	0x18(%rsp), %rdi
    00000204: 	je	.Ltmp2158 # Offset: 516
    00000206: 	movq	0x70(%rsp), %rax
    0000020b: 	leaq	0x1(%rax), %rsi
    0000020f: 	callq	_ZdlPvm@PLT # Offset: 527
.Ltmp2158:
    00000214: 	movq	(%rbp), %rdi
    00000218: 	movq	(%rbx), %rdx
    0000021b: 	movq	0x10(%rbx), %rsi
    0000021f: 	movq	0x18(%rbx), %r8
    00000223: 	cmpq	%rdi, %rdx
    00000226: 	je	.Ltmp2159 # Offset: 550
    0000022c: 	xorl	%ecx, %ecx
    0000022e: 	jmp	.Ltmp2160 # Offset: 558
.Ltmp2162:
    00000230: 	movb	%cl, (%rdx)
    00000232: 	addl	$0x1, %ecx
    00000235: 	cmpq	%rax, %rdi
    00000238: 	je	.Ltmp2161 # Offset: 568
.Ltmp2163:
    0000023a: 	movq	%rax, %rdx
.Ltmp2160:
    0000023d: 	leaq	0x1(%rdx), %rax
    00000241: 	cmpq	%rsi, %rax
    00000244: 	jne	.Ltmp2162 # Offset: 580
    00000246: 	movq	0x8(%r8), %rax
    0000024a: 	leaq	0x8(%r8), %r9
    0000024e: 	movb	%cl, (%rdx)
    00000250: 	addl	$0x1, %ecx
    00000253: 	leaq	0x200(%rax), %rsi
    0000025a: 	cmpq	%rax, %rdi
    0000025d: 	je	.Ltmp2161 # Offset: 605
    0000025f: 	movq	%r9, %r8
    00000262: 	jmp	.Ltmp2163 # Offset: 610
    00000264: 	nopl	(%rax) # Size: 4
.Ltmp2161:
    00000268: 	movq	(%rbx), %rdi
    0000026b: 	movq	0x10(%rbx), %rsi
    0000026f: 	movq	0x18(%rbx), %r8
    00000273: 	movq	(%rbp), %xmm1
.Ltmp2167:
    00000278: 	movq	0x10(%rbp), %xmm0
    0000027d: 	movq	%r8, %xmm4
    00000282: 	movhps	0x8(%rbp), %xmm1
    00000286: 	movaps	%xmm1, 0x40(%rsp)
    0000028b: 	movhps	0x18(%rbp), %xmm0
    0000028f: 	movaps	%xmm0, 0x50(%rsp)
    00000294: 	movq	%rdi, %xmm0
    00000299: 	movq	%r15, %rdi
    0000029c: 	movhps	0x8(%rbx), %xmm0
    000002a0: 	movaps	%xmm0, 0x20(%rsp)
    000002a5: 	movq	%rsi, %xmm0
    000002aa: 	movq	%r14, %rsi
    000002ad: 	punpcklqdq	%xmm4, %xmm0
    000002b1: 	movaps	%xmm0, 0x30(%rsp)
    000002b6: 	callq	_Z18quicksort2_forwardISt15_Deque_iteratorIaRaPaEEvT_S4_ # Offset: 694
    000002bb: 	movq	0x10(%rsp), %rsi
    000002c0: 	leaq	DATAat0x34184(%rip), %rdx
    000002c7: 	movq	%r13, %rdi
    000002ca: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 714
    000002cf: 	movdqu	0x10(%rbp), %xmm0
    000002d4: 	movdqu	(%rbp), %xmm5
    000002d9: 	movq	%r13, %r8
    000002dc: 	movdqu	(%rbx), %xmm6
    000002e0: 	movl	0x4(%rsp), %r9d
    000002e5: 	movq	%r12, %rdx
    000002e8: 	movq	%r14, %rsi
    000002eb: 	movaps	%xmm0, 0x50(%rsp)
    000002f0: 	movq	0x8(%rsp), %rcx
    000002f5: 	movdqu	0x10(%rbx), %xmm0
    000002fa: 	movq	%r15, %rdi
    000002fd: 	movaps	%xmm5, 0x40(%rsp)
    00000302: 	movaps	%xmm6, 0x20(%rsp)
    00000307: 	movaps	%xmm0, 0x30(%rsp)
    0000030c: 	callq	_Z15TestSearchArrayISt15_Deque_iteratorIaRaPaEPFbS3_S3_aEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 780
    00000311: 	movq	0x60(%rsp), %rdi
    00000316: 	cmpq	0x18(%rsp), %rdi
    0000031b: 	je	.Ltmp2164 # Offset: 795
    0000031d: 	movq	0x70(%rsp), %rax
    00000322: 	leaq	0x1(%rax), %rsi
    00000326: 	callq	_ZdlPvm@PLT # Offset: 806
.Ltmp2164:
    0000032b: 	movq	0x88(%rsp), %rax
    00000333: 	subq	%fs:0x28, %rax
    0000033c: 	jne	.Ltmp2165 # Offset: 828
    0000033e: 	addq	$0x98, %rsp
    00000345: 	popq	%rbx
    00000346: 	popq	%rbp
    00000347: 	popq	%r12
    00000349: 	popq	%r13
    0000034b: 	popq	%r14
    0000034d: 	popq	%r15
    0000034f: 	retq # Offset: 847
.Ltmp2151:
    00000350: 	testq	%r12, %r12
    00000353: 	je	.Ltmp2152 # Offset: 851
    00000359: 	movl	$0x1, %edx
    0000035e: 	jmp	.Ltmp2166 # Offset: 862
.Ltmp2159:
    00000363: 	movq	%rdi, %xmm1
    00000368: 	jmp	.Ltmp2167 # Offset: 872
.Ltmp2165:
    0000036d: 	callq	__stack_chk_fail@PLT # Offset: 877
    00000372: 	endbr64
.Ltmp2170:
    00000376: 	movq	%rax, %rbp
    00000379: 	jmp	.Ltmp2168 # Offset: 889
    0000037b: 	endbr64
    0000037f: 	movq	%rax, %rbp
    00000382: 	jmp	.Ltmp2169 # Offset: 898
    00000384: 	endbr64
    00000388: 	jmp	.Ltmp2170 # Offset: 904
.Ltmp2169:
    0000038a: 	movq	0x60(%rsp), %rdi
    0000038f: 	leaq	0x70(%rsp), %rax
    00000394: 	cmpq	%rax, %rdi
    00000397: 	je	.Ltmp2171 # Offset: 919
.Ltmp2172:
    00000399: 	movq	0x70(%rsp), %rax
    0000039e: 	leaq	0x1(%rax), %rsi
    000003a2: 	callq	_ZdlPvm@PLT # Offset: 930
.Ltmp2171:
    000003a7: 	movq	%rbp, %rdi
    000003aa: 	callq	_Unwind_Resume@PLT # Offset: 938
.Ltmp2168:
    000003af: 	movq	0x60(%rsp), %rdi
    000003b4: 	cmpq	0x18(%rsp), %rdi
    000003b9: 	jne	.Ltmp2172 # Offset: 953
    000003bb: 	jmp	.Ltmp2171 # Offset: 955
DWARF CFI Instructions:
    <empty>
End of Function "_Z13TestOneSearchISt15_Deque_iteratorIaRaPaEPFbS3_S3_aEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z16TestOneContainerISt15_Deque_iteratorIaRaPaEEvT_S4_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 320
  State       : disassembled
  Address     : 0x10a40
  Size        : 0x77c
  MaxSize     : 0x780
  Offset      : 0x10a40
  Section     : .text
  Orc Section : .local.text._Z16TestOneContainerISt15_Deque_iteratorIaRaPaEEvT_S4_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0319:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdx, %r14
    0000000b: 	leaq	DATAat0x3418f(%rip), %rdx
    00000012: 	pushq	%r13
    00000014: 	movq	%rcx, %r13
    00000017: 	pushq	%r12
    00000019: 	movq	%rsi, %r12
    0000001c: 	movq	%rcx, %rsi
    0000001f: 	pushq	%rbp
    00000020: 	pushq	%rbx
    00000021: 	movq	%rdi, %rbx
    00000024: 	subq	$0x88, %rsp
    0000002b: 	movq	%fs:0x28, %rax
    00000034: 	movq	%rax, 0x78(%rsp)
    00000039: 	xorl	%eax, %eax
    0000003b: 	leaq	0x50(%rsp), %rbp
    00000040: 	leaq	0x30(%rsp), %r15
    00000045: 	movq	%rbp, %rdi
    00000048: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 72
    0000004d: 	movdqu	0x10(%rbx), %xmm4
    00000052: 	xorl	%r9d, %r9d
    00000055: 	movq	%rbp, %r8
    00000058: 	movdqu	(%r12), %xmm1
    0000005e: 	movdqu	(%rbx), %xmm3
    00000062: 	movq	%r14, %rdx
    00000065: 	movq	%r15, %rsi
    00000068: 	movdqu	0x10(%r12), %xmm2
    0000006f: 	leaq	0x10(%rsp), %rdi
    00000074: 	movaps	%xmm4, 0x20(%rsp)
    00000079: 	leaq	_Z14std_lowerboundISt15_Deque_iteratorIaRaPaEaET_S4_S4_T0_(%rip), %rcx
    00000080: 	movq	%rdi, 0x8(%rsp)
    00000085: 	movaps	%xmm1, 0x30(%rsp)
    0000008a: 	movaps	%xmm2, 0x40(%rsp)
    0000008f: 	movaps	%xmm3, 0x10(%rsp)
    00000094: 	callq	_Z13TestOneSearchISt15_Deque_iteratorIaRaPaEPFS3_S3_S3_aEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 148
    00000099: 	movq	0x50(%rsp), %rdi
    0000009e: 	leaq	0x60(%rsp), %rax
    000000a3: 	movq	%rax, (%rsp)
    000000a7: 	cmpq	%rax, %rdi
    000000aa: 	je	.Ltmp2173 # Offset: 170
    000000ac: 	movq	0x60(%rsp), %rax
    000000b1: 	leaq	0x1(%rax), %rsi
    000000b5: 	callq	_ZdlPvm@PLT # Offset: 181
.Ltmp2173:
    000000ba: 	leaq	DATAat0x341a1(%rip), %rdx
    000000c1: 	movq	%r13, %rsi
    000000c4: 	movq	%rbp, %rdi
    000000c7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 199
    000000cc: 	movdqu	0x10(%rbx), %xmm1
    000000d1: 	xorl	%r9d, %r9d
    000000d4: 	movq	%rbp, %r8
    000000d7: 	movdqu	(%r12), %xmm5
    000000dd: 	movdqu	(%rbx), %xmm7
    000000e1: 	movq	%r14, %rdx
    000000e4: 	movq	%r15, %rsi
    000000e7: 	movdqu	0x10(%r12), %xmm6
    000000ee: 	movq	0x8(%rsp), %rdi
    000000f3: 	movaps	%xmm1, 0x20(%rsp)
    000000f8: 	leaq	_Z12lower_bound1ISt15_Deque_iteratorIaRaPaEaET_S4_S4_T0_(%rip), %rcx
    000000ff: 	movaps	%xmm5, 0x30(%rsp)
    00000104: 	movaps	%xmm6, 0x40(%rsp)
    00000109: 	movaps	%xmm7, 0x10(%rsp)
    0000010e: 	callq	_Z13TestOneSearchISt15_Deque_iteratorIaRaPaEPFS3_S3_S3_aEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 270
    00000113: 	movq	0x50(%rsp), %rdi
    00000118: 	cmpq	(%rsp), %rdi
    0000011c: 	je	.Ltmp2174 # Offset: 284
    0000011e: 	movq	0x60(%rsp), %rax
    00000123: 	leaq	0x1(%rax), %rsi
    00000127: 	callq	_ZdlPvm@PLT # Offset: 295
.Ltmp2174:
    0000012c: 	leaq	DATAat0x341af(%rip), %rdx
    00000133: 	movq	%r13, %rsi
    00000136: 	movq	%rbp, %rdi
    00000139: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 313
    0000013e: 	movdqu	0x10(%rbx), %xmm5
    00000143: 	xorl	%r9d, %r9d
    00000146: 	movq	%rbp, %r8
    00000149: 	movdqu	(%r12), %xmm2
    0000014f: 	movdqu	(%rbx), %xmm4
    00000153: 	movq	%r14, %rdx
    00000156: 	movq	%r15, %rsi
    00000159: 	movdqu	0x10(%r12), %xmm3
    00000160: 	movq	0x8(%rsp), %rdi
    00000165: 	movaps	%xmm5, 0x20(%rsp)
    0000016a: 	leaq	_Z12lower_bound2ISt15_Deque_iteratorIaRaPaEaET_S4_S4_T0_(%rip), %rcx
    00000171: 	movaps	%xmm2, 0x30(%rsp)
    00000176: 	movaps	%xmm3, 0x40(%rsp)
    0000017b: 	movaps	%xmm4, 0x10(%rsp)
    00000180: 	callq	_Z13TestOneSearchISt15_Deque_iteratorIaRaPaEPFS3_S3_S3_aEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 384
    00000185: 	movq	0x50(%rsp), %rdi
    0000018a: 	cmpq	(%rsp), %rdi
    0000018e: 	je	.Ltmp2175 # Offset: 398
    00000190: 	movq	0x60(%rsp), %rax
    00000195: 	leaq	0x1(%rax), %rsi
    00000199: 	callq	_ZdlPvm@PLT # Offset: 409
.Ltmp2175:
    0000019e: 	leaq	DATAat0x341bd(%rip), %rdx
    000001a5: 	movq	%r13, %rsi
    000001a8: 	movq	%rbp, %rdi
    000001ab: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 427
    000001b0: 	movdqu	0x10(%rbx), %xmm1
    000001b5: 	xorl	%r9d, %r9d
    000001b8: 	movq	%rbp, %r8
    000001bb: 	movdqu	(%r12), %xmm6
    000001c1: 	movdqu	(%rbx), %xmm0
    000001c5: 	movq	%r14, %rdx
    000001c8: 	movq	%r15, %rsi
    000001cb: 	movdqu	0x10(%r12), %xmm7
    000001d2: 	movq	0x8(%rsp), %rdi
    000001d7: 	movaps	%xmm1, 0x20(%rsp)
    000001dc: 	leaq	_Z17lower_bound_recurISt15_Deque_iteratorIaRaPaEaET_S4_S4_T0_(%rip), %rcx
    000001e3: 	movaps	%xmm6, 0x30(%rsp)
    000001e8: 	movaps	%xmm7, 0x40(%rsp)
    000001ed: 	movaps	%xmm0, 0x10(%rsp)
    000001f2: 	callq	_Z13TestOneSearchISt15_Deque_iteratorIaRaPaEPFS3_S3_S3_aEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 498
    000001f7: 	movq	0x50(%rsp), %rdi
    000001fc: 	cmpq	(%rsp), %rdi
    00000200: 	je	.Ltmp2176 # Offset: 512
    00000202: 	movq	0x60(%rsp), %rax
    00000207: 	leaq	0x1(%rax), %rsi
    0000020b: 	callq	_ZdlPvm@PLT # Offset: 523
.Ltmp2176:
    00000210: 	leaq	DATAat0x341d4(%rip), %rdx
    00000217: 	movq	%r13, %rsi
    0000021a: 	movq	%rbp, %rdi
    0000021d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 541
    00000222: 	movdqu	(%r12), %xmm2
    00000228: 	movdqu	(%rbx), %xmm4
    0000022c: 	movl	$0x1, %r9d
    00000232: 	movdqu	0x10(%r12), %xmm3
    00000239: 	movq	%rbp, %r8
    0000023c: 	movq	%r14, %rdx
    0000023f: 	movq	%r15, %rsi
    00000242: 	movdqu	0x10(%rbx), %xmm5
    00000247: 	movq	0x8(%rsp), %rdi
    0000024c: 	movaps	%xmm2, 0x30(%rsp)
    00000251: 	leaq	_Z14std_upperboundISt15_Deque_iteratorIaRaPaEaET_S4_S4_T0_(%rip), %rcx
    00000258: 	movaps	%xmm3, 0x40(%rsp)
    0000025d: 	movaps	%xmm4, 0x10(%rsp)
    00000262: 	movaps	%xmm5, 0x20(%rsp)
    00000267: 	callq	_Z13TestOneSearchISt15_Deque_iteratorIaRaPaEPFS3_S3_S3_aEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 615
    0000026c: 	movq	0x50(%rsp), %rdi
    00000271: 	cmpq	(%rsp), %rdi
    00000275: 	je	.Ltmp2177 # Offset: 629
    00000277: 	movq	0x60(%rsp), %rax
    0000027c: 	leaq	0x1(%rax), %rsi
    00000280: 	callq	_ZdlPvm@PLT # Offset: 640
.Ltmp2177:
    00000285: 	leaq	DATAat0x341e6(%rip), %rdx
    0000028c: 	movq	%r13, %rsi
    0000028f: 	movq	%rbp, %rdi
    00000292: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 658
    00000297: 	movdqu	(%r12), %xmm6
    0000029d: 	movdqu	(%rbx), %xmm0
    000002a1: 	movl	$0x1, %r9d
    000002a7: 	movdqu	0x10(%r12), %xmm7
    000002ae: 	movq	%rbp, %r8
    000002b1: 	movq	%r14, %rdx
    000002b4: 	movq	%r15, %rsi
    000002b7: 	movdqu	0x10(%rbx), %xmm1
    000002bc: 	movq	0x8(%rsp), %rdi
    000002c1: 	movaps	%xmm6, 0x30(%rsp)
    000002c6: 	leaq	_Z12upper_bound1ISt15_Deque_iteratorIaRaPaEaET_S4_S4_T0_(%rip), %rcx
    000002cd: 	movaps	%xmm7, 0x40(%rsp)
    000002d2: 	movaps	%xmm0, 0x10(%rsp)
    000002d7: 	movaps	%xmm1, 0x20(%rsp)
    000002dc: 	callq	_Z13TestOneSearchISt15_Deque_iteratorIaRaPaEPFS3_S3_S3_aEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 732
    000002e1: 	movq	0x50(%rsp), %rdi
    000002e6: 	cmpq	(%rsp), %rdi
    000002ea: 	je	.Ltmp2178 # Offset: 746
    000002ec: 	movq	0x60(%rsp), %rax
    000002f1: 	leaq	0x1(%rax), %rsi
    000002f5: 	callq	_ZdlPvm@PLT # Offset: 757
.Ltmp2178:
    000002fa: 	leaq	DATAat0x341f4(%rip), %rdx
    00000301: 	movq	%r13, %rsi
    00000304: 	movq	%rbp, %rdi
    00000307: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 775
    0000030c: 	movdqu	(%r12), %xmm2
    00000312: 	movdqu	(%rbx), %xmm4
    00000316: 	movl	$0x1, %r9d
    0000031c: 	movdqu	0x10(%r12), %xmm3
    00000323: 	movq	%rbp, %r8
    00000326: 	movq	%r14, %rdx
    00000329: 	movq	%r15, %rsi
    0000032c: 	movdqu	0x10(%rbx), %xmm5
    00000331: 	movq	0x8(%rsp), %rdi
    00000336: 	movaps	%xmm2, 0x30(%rsp)
    0000033b: 	leaq	_Z12upper_bound2ISt15_Deque_iteratorIaRaPaEaET_S4_S4_T0_(%rip), %rcx
    00000342: 	movaps	%xmm3, 0x40(%rsp)
    00000347: 	movaps	%xmm4, 0x10(%rsp)
    0000034c: 	movaps	%xmm5, 0x20(%rsp)
    00000351: 	callq	_Z13TestOneSearchISt15_Deque_iteratorIaRaPaEPFS3_S3_S3_aEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 849
    00000356: 	movq	0x50(%rsp), %rdi
    0000035b: 	cmpq	(%rsp), %rdi
    0000035f: 	je	.Ltmp2179 # Offset: 863
    00000361: 	movq	0x60(%rsp), %rax
    00000366: 	leaq	0x1(%rax), %rsi
    0000036a: 	callq	_ZdlPvm@PLT # Offset: 874
.Ltmp2179:
    0000036f: 	leaq	DATAat0x34202(%rip), %rdx
    00000376: 	movq	%r13, %rsi
    00000379: 	movq	%rbp, %rdi
    0000037c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 892
    00000381: 	movdqu	(%r12), %xmm6
    00000387: 	movdqu	(%rbx), %xmm0
    0000038b: 	movl	$0x1, %r9d
    00000391: 	movdqu	0x10(%r12), %xmm7
    00000398: 	movq	%rbp, %r8
    0000039b: 	movq	%r14, %rdx
    0000039e: 	movq	%r15, %rsi
    000003a1: 	movdqu	0x10(%rbx), %xmm1
    000003a6: 	movq	0x8(%rsp), %rdi
    000003ab: 	movaps	%xmm6, 0x30(%rsp)
    000003b0: 	leaq	_Z17upper_bound_recurISt15_Deque_iteratorIaRaPaEaET_S4_S4_T0_(%rip), %rcx
    000003b7: 	movaps	%xmm7, 0x40(%rsp)
    000003bc: 	movaps	%xmm0, 0x10(%rsp)
    000003c1: 	movaps	%xmm1, 0x20(%rsp)
    000003c6: 	callq	_Z13TestOneSearchISt15_Deque_iteratorIaRaPaEPFS3_S3_S3_aEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 966
    000003cb: 	movq	0x50(%rsp), %rdi
    000003d0: 	cmpq	(%rsp), %rdi
    000003d4: 	je	.Ltmp2180 # Offset: 980
    000003d6: 	movq	0x60(%rsp), %rax
    000003db: 	leaq	0x1(%rax), %rsi
    000003df: 	callq	_ZdlPvm@PLT # Offset: 991
.Ltmp2180:
    000003e4: 	leaq	DATAat0x34219(%rip), %rdx
    000003eb: 	movq	%r13, %rsi
    000003ee: 	movq	%rbp, %rdi
    000003f1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1009
    000003f6: 	movdqu	0x10(%rbx), %xmm5
    000003fb: 	xorl	%r9d, %r9d
    000003fe: 	movq	%rbp, %r8
    00000401: 	movdqu	(%r12), %xmm2
    00000407: 	movdqu	(%rbx), %xmm4
    0000040b: 	movq	%r14, %rdx
    0000040e: 	movq	%r15, %rsi
    00000411: 	movdqu	0x10(%r12), %xmm3
    00000418: 	movq	0x8(%rsp), %rdi
    0000041d: 	movaps	%xmm5, 0x20(%rsp)
    00000422: 	leaq	_Z16std_binarysearchISt15_Deque_iteratorIaRaPaEaEbT_S4_T0_(%rip), %rcx
    00000429: 	movaps	%xmm2, 0x30(%rsp)
    0000042e: 	movaps	%xmm3, 0x40(%rsp)
    00000433: 	movaps	%xmm4, 0x10(%rsp)
    00000438: 	callq	_Z13TestOneSearchISt15_Deque_iteratorIaRaPaEPFbS3_S3_aEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 1080
    0000043d: 	movq	0x50(%rsp), %rdi
    00000442: 	cmpq	(%rsp), %rdi
    00000446: 	je	.Ltmp2181 # Offset: 1094
    00000448: 	movq	0x60(%rsp), %rax
    0000044d: 	leaq	0x1(%rax), %rsi
    00000451: 	callq	_ZdlPvm@PLT # Offset: 1105
.Ltmp2181:
    00000456: 	leaq	DATAat0x3422d(%rip), %rdx
    0000045d: 	movq	%r13, %rsi
    00000460: 	movq	%rbp, %rdi
    00000463: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1123
    00000468: 	movdqu	0x10(%rbx), %xmm1
    0000046d: 	xorl	%r9d, %r9d
    00000470: 	movq	%rbp, %r8
    00000473: 	movdqu	(%r12), %xmm6
    00000479: 	movdqu	(%rbx), %xmm0
    0000047d: 	movq	%r14, %rdx
    00000480: 	movq	%r15, %rsi
    00000483: 	movdqu	0x10(%r12), %xmm7
    0000048a: 	movq	0x8(%rsp), %rdi
    0000048f: 	movaps	%xmm1, 0x20(%rsp)
    00000494: 	leaq	_Z13binarysearch1ISt15_Deque_iteratorIaRaPaEaEbT_S4_T0_(%rip), %rcx
    0000049b: 	movaps	%xmm6, 0x30(%rsp)
    000004a0: 	movaps	%xmm7, 0x40(%rsp)
    000004a5: 	movaps	%xmm0, 0x10(%rsp)
    000004aa: 	callq	_Z13TestOneSearchISt15_Deque_iteratorIaRaPaEPFbS3_S3_aEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 1194
    000004af: 	movq	0x50(%rsp), %rdi
    000004b4: 	cmpq	(%rsp), %rdi
    000004b8: 	je	.Ltmp2182 # Offset: 1208
    000004ba: 	movq	0x60(%rsp), %rax
    000004bf: 	leaq	0x1(%rax), %rsi
    000004c3: 	callq	_ZdlPvm@PLT # Offset: 1219
.Ltmp2182:
    000004c8: 	leaq	DATAat0x3423d(%rip), %rdx
    000004cf: 	movq	%r13, %rsi
    000004d2: 	movq	%rbp, %rdi
    000004d5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1237
    000004da: 	movdqu	0x10(%rbx), %xmm5
    000004df: 	xorl	%r9d, %r9d
    000004e2: 	movq	%rbp, %r8
    000004e5: 	movdqu	(%r12), %xmm2
    000004eb: 	movdqu	(%rbx), %xmm4
    000004ef: 	movq	%r14, %rdx
    000004f2: 	movq	%r15, %rsi
    000004f5: 	movdqu	0x10(%r12), %xmm3
    000004fc: 	movq	0x8(%rsp), %rdi
    00000501: 	movaps	%xmm5, 0x20(%rsp)
    00000506: 	leaq	_Z13binarysearch2ISt15_Deque_iteratorIaRaPaEaEbT_S4_T0_(%rip), %rcx
    0000050d: 	movaps	%xmm2, 0x30(%rsp)
    00000512: 	movaps	%xmm3, 0x40(%rsp)
    00000517: 	movaps	%xmm4, 0x10(%rsp)
    0000051c: 	callq	_Z13TestOneSearchISt15_Deque_iteratorIaRaPaEPFbS3_S3_aEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 1308
    00000521: 	movq	0x50(%rsp), %rdi
    00000526: 	cmpq	(%rsp), %rdi
    0000052a: 	je	.Ltmp2183 # Offset: 1322
    0000052c: 	movq	0x60(%rsp), %rax
    00000531: 	leaq	0x1(%rax), %rsi
    00000535: 	callq	_ZdlPvm@PLT # Offset: 1333
.Ltmp2183:
    0000053a: 	leaq	DATAat0x3424d(%rip), %rdx
    00000541: 	movq	%r13, %rsi
    00000544: 	movq	%rbp, %rdi
    00000547: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1351
    0000054c: 	movdqu	0x10(%rbx), %xmm1
    00000551: 	xorl	%r9d, %r9d
    00000554: 	movq	%rbp, %r8
    00000557: 	movdqu	(%r12), %xmm6
    0000055d: 	movdqu	(%rbx), %xmm0
    00000561: 	movq	%r14, %rdx
    00000564: 	movq	%r15, %rsi
    00000567: 	movdqu	0x10(%r12), %xmm7
    0000056e: 	movq	0x8(%rsp), %rdi
    00000573: 	movaps	%xmm1, 0x20(%rsp)
    00000578: 	leaq	_Z13binarysearch3ISt15_Deque_iteratorIaRaPaEaEbT_S4_T0_(%rip), %rcx
    0000057f: 	movaps	%xmm6, 0x30(%rsp)
    00000584: 	movaps	%xmm7, 0x40(%rsp)
    00000589: 	movaps	%xmm0, 0x10(%rsp)
    0000058e: 	callq	_Z13TestOneSearchISt15_Deque_iteratorIaRaPaEPFbS3_S3_aEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 1422
    00000593: 	movq	0x50(%rsp), %rdi
    00000598: 	cmpq	(%rsp), %rdi
    0000059c: 	je	.Ltmp2184 # Offset: 1436
    0000059e: 	movq	0x60(%rsp), %rax
    000005a3: 	leaq	0x1(%rax), %rsi
    000005a7: 	callq	_ZdlPvm@PLT # Offset: 1447
.Ltmp2184:
    000005ac: 	leaq	DATAat0x3425d(%rip), %rdx
    000005b3: 	movq	%r13, %rsi
    000005b6: 	movq	%rbp, %rdi
    000005b9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1465
    000005be: 	movdqu	0x10(%rbx), %xmm5
    000005c3: 	xorl	%r9d, %r9d
    000005c6: 	movq	%rbp, %r8
    000005c9: 	movdqu	(%r12), %xmm2
    000005cf: 	movdqu	(%rbx), %xmm4
    000005d3: 	movq	%r14, %rdx
    000005d6: 	movq	%r15, %rsi
    000005d9: 	movdqu	0x10(%r12), %xmm3
    000005e0: 	movq	0x8(%rsp), %rdi
    000005e5: 	movaps	%xmm5, 0x20(%rsp)
    000005ea: 	leaq	_Z13binarysearch4ISt15_Deque_iteratorIaRaPaEaEbT_S4_T0_(%rip), %rcx
    000005f1: 	movaps	%xmm2, 0x30(%rsp)
    000005f6: 	movaps	%xmm3, 0x40(%rsp)
    000005fb: 	movaps	%xmm4, 0x10(%rsp)
    00000600: 	callq	_Z13TestOneSearchISt15_Deque_iteratorIaRaPaEPFbS3_S3_aEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 1536
    00000605: 	movq	0x50(%rsp), %rdi
    0000060a: 	cmpq	(%rsp), %rdi
    0000060e: 	je	.Ltmp2185 # Offset: 1550
    00000610: 	movq	0x60(%rsp), %rax
    00000615: 	leaq	0x1(%rax), %rsi
    00000619: 	callq	_ZdlPvm@PLT # Offset: 1561
.Ltmp2185:
    0000061e: 	leaq	DATAat0x3426d(%rip), %rdx
    00000625: 	movq	%r13, %rsi
    00000628: 	movq	%rbp, %rdi
    0000062b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1579
    00000630: 	movdqu	(%rbx), %xmm7
    00000634: 	xorl	%r9d, %r9d
    00000637: 	movq	%rbp, %r8
    0000063a: 	movdqu	0x10(%r12), %xmm0
    00000641: 	movdqu	(%r12), %xmm6
    00000647: 	movq	%r14, %rdx
    0000064a: 	movq	%r15, %rsi
    0000064d: 	movq	0x8(%rsp), %rdi
    00000652: 	leaq	_Z18binarysearch_recurISt15_Deque_iteratorIaRaPaEaEbT_S4_T0_(%rip), %rcx
    00000659: 	movaps	%xmm7, 0x10(%rsp)
    0000065e: 	movaps	%xmm0, 0x40(%rsp)
    00000663: 	movdqu	0x10(%rbx), %xmm0
    00000668: 	movaps	%xmm6, 0x30(%rsp)
    0000066d: 	movaps	%xmm0, 0x20(%rsp)
    00000672: 	callq	_Z13TestOneSearchISt15_Deque_iteratorIaRaPaEPFbS3_S3_aEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 1650
    00000677: 	movq	0x50(%rsp), %rdi
    0000067c: 	cmpq	(%rsp), %rdi
    00000680: 	je	.Ltmp2186 # Offset: 1664
    00000682: 	movq	0x60(%rsp), %rax
    00000687: 	leaq	0x1(%rax), %rsi
    0000068b: 	callq	_ZdlPvm@PLT # Offset: 1675
.Ltmp2186:
    00000690: 	movq	%rbp, %rdi
    00000693: 	leaq	DATAat0x34286(%rip), %rdx
    0000069a: 	movq	%r13, %rsi
    0000069d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1693
    000006a2: 	movq	%rbp, %rdi
    000006a5: 	callq	_Z9summarizeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1701
    000006aa: 	movq	0x50(%rsp), %rdi
    000006af: 	cmpq	(%rsp), %rdi
    000006b3: 	je	.Ltmp2187 # Offset: 1715
    000006b5: 	movq	0x60(%rsp), %rax
    000006ba: 	leaq	0x1(%rax), %rsi
    000006be: 	callq	_ZdlPvm@PLT # Offset: 1726
.Ltmp2187:
    000006c3: 	movq	0x78(%rsp), %rax
    000006c8: 	subq	%fs:0x28, %rax
    000006d1: 	jne	.Ltmp2188 # Offset: 1745
    000006d3: 	addq	$0x88, %rsp
    000006da: 	popq	%rbx
    000006db: 	popq	%rbp
    000006dc: 	popq	%r12
    000006de: 	popq	%r13
    000006e0: 	popq	%r14
    000006e2: 	popq	%r15
    000006e4: 	retq # Offset: 1764
.Ltmp2188:
    000006e5: 	callq	__stack_chk_fail@PLT # Offset: 1765
    000006ea: 	endbr64
.Ltmp2190:
    000006ee: 	movq	%rax, %rbp
    000006f1: 	jmp	.Ltmp2189 # Offset: 1777
    000006f3: 	endbr64
    000006f7: 	jmp	.Ltmp2190 # Offset: 1783
    000006f9: 	endbr64
    000006fd: 	jmp	.Ltmp2190 # Offset: 1789
    000006ff: 	endbr64
    00000703: 	jmp	.Ltmp2190 # Offset: 1795
    00000705: 	endbr64
    00000709: 	jmp	.Ltmp2190 # Offset: 1801
    0000070b: 	endbr64
    0000070f: 	jmp	.Ltmp2190 # Offset: 1807
    00000711: 	endbr64
    00000715: 	jmp	.Ltmp2190 # Offset: 1813
.Ltmp2189:
    00000717: 	movq	0x50(%rsp), %rdi
    0000071c: 	cmpq	(%rsp), %rdi
    00000720: 	je	.Ltmp2191 # Offset: 1824
.Ltmp2193:
    00000722: 	movq	0x60(%rsp), %rax
    00000727: 	leaq	0x1(%rax), %rsi
    0000072b: 	callq	_ZdlPvm@PLT # Offset: 1835
.Ltmp2191:
    00000730: 	movq	%rbp, %rdi
    00000733: 	callq	_Unwind_Resume@PLT # Offset: 1843
    00000738: 	endbr64
    0000073c: 	jmp	.Ltmp2190 # Offset: 1852
    0000073e: 	endbr64
    00000742: 	jmp	.Ltmp2190 # Offset: 1858
    00000744: 	endbr64
    00000748: 	jmp	.Ltmp2190 # Offset: 1864
    0000074a: 	endbr64
    0000074e: 	jmp	.Ltmp2190 # Offset: 1870
    00000750: 	endbr64
    00000754: 	jmp	.Ltmp2190 # Offset: 1876
    00000756: 	endbr64
    0000075a: 	movq	%rax, %rbp
    0000075d: 	jmp	.Ltmp2192 # Offset: 1885
    0000075f: 	endbr64
    00000763: 	jmp	.Ltmp2190 # Offset: 1891
    00000765: 	endbr64
    00000769: 	jmp	.Ltmp2190 # Offset: 1897
.Ltmp2192:
    0000076b: 	movq	0x50(%rsp), %rdi
    00000770: 	leaq	0x60(%rsp), %rax
    00000775: 	cmpq	%rax, %rdi
    00000778: 	jne	.Ltmp2193 # Offset: 1912
    0000077a: 	jmp	.Ltmp2191 # Offset: 1914
DWARF CFI Instructions:
    <empty>
End of Function "_Z16TestOneContainerISt15_Deque_iteratorIaRaPaEEvT_S4_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z24binarysearch_recur_innerISt15_Deque_iteratorIaRaPaEalEbT_T0_T1_" after disassembly {
  Number      : 321
  State       : disassembled
  Address     : 0x111c0
  Size        : 0x17c
  MaxSize     : 0x180
  Offset      : 0x111c0
  Section     : .text
  Orc Section : .local.text._Z24binarysearch_recur_innerISt15_Deque_iteratorIaRaPaEalEbT_T0_T1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0320:
    00000000: 	endbr64
    00000004: 	subq	$0x38, %rsp
    00000008: 	movq	%fs:0x28, %rax
    00000011: 	movq	%rax, 0x28(%rsp)
    00000016: 	xorl	%eax, %eax
    00000018: 	testq	%rdx, %rdx
    0000001b: 	jne	.Ltmp2194 # Offset: 27
.Ltmp2200:
    0000001d: 	movq	0x28(%rsp), %rdx
    00000022: 	subq	%fs:0x28, %rdx
    0000002b: 	jne	.Ltmp2195 # Offset: 43
    00000031: 	addq	$0x38, %rsp
    00000035: 	retq # Offset: 53
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2194:
    00000040: 	movdqu	(%rdi), %xmm1
    00000044: 	movq	%rdi, %rcx
    00000047: 	movq	%rdx, %r8
    0000004a: 	movdqu	0x10(%rcx), %xmm0
    0000004f: 	shrq	$0x3f, %r8
    00000053: 	movhlps	%xmm1, %xmm2
    00000056: 	movq	%xmm1, %rax
    0000005b: 	movq	%xmm1, %r11
    00000060: 	addq	%rdx, %r8
    00000063: 	movq	%xmm2, %rdi
    00000068: 	movhlps	%xmm0, %xmm3
    0000006b: 	sarq	%r8
    0000006e: 	movq	%xmm0, %r9
    00000073: 	subq	%rdi, %rax
    00000076: 	movq	%xmm3, %r10
    0000007b: 	addq	%r8, %rax
    0000007e: 	js	.Ltmp2196 # Offset: 126
    00000080: 	cmpq	$0x1ff, %rax
    00000086: 	jg	.Ltmp2197 # Offset: 134
    0000008c: 	leaq	(%r11,%r8), %rax
    00000090: 	cmpb	%sil, (%rax)
    00000093: 	jge	.Ltmp2198 # Offset: 147
.Ltmp2201:
    00000099: 	addq	$0x1, %rax
    0000009d: 	cmpq	%r9, %rax
    000000a0: 	je	.Ltmp2199 # Offset: 160
.Ltmp2203:
    000000a6: 	movq	%rdi, %xmm4
    000000ab: 	movq	%rax, (%rcx)
    000000ae: 	addq	$0x1, %r8
    000000b2: 	movsbl	%sil, %esi
    000000b6: 	movq	%rax, %xmm0
    000000bb: 	movq	%rdi, 0x8(%rcx)
    000000bf: 	movq	%r10, %xmm5
    000000c4: 	subq	%r8, %rdx
    000000c7: 	punpcklqdq	%xmm4, %xmm0
    000000cb: 	movq	%r9, 0x10(%rcx)
    000000cf: 	movq	%rsp, %rdi
    000000d2: 	movq	%r10, 0x18(%rcx)
    000000d6: 	movaps	%xmm0, (%rsp)
    000000da: 	movq	%r9, %xmm0
    000000df: 	punpcklqdq	%xmm5, %xmm0
    000000e3: 	movaps	%xmm0, 0x10(%rsp)
    000000e8: 	callq	_Z24binarysearch_recur_innerISt15_Deque_iteratorIaRaPaEalEbT_T0_T1_ # Offset: 232
    000000ed: 	jmp	.Ltmp2200 # Offset: 237
    000000f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2196:
    000000f8: 	movq	%rax, %r11
    000000fb: 	notq	%r11
    000000fe: 	shrq	$0x9, %r11
    00000102: 	notq	%r11
.Ltmp2202:
    00000105: 	leaq	(%r10,%r11,8), %r10
    00000109: 	shlq	$0x9, %r11
    0000010d: 	movq	(%r10), %rdi
    00000110: 	subq	%r11, %rax
    00000113: 	addq	%rdi, %rax
    00000116: 	leaq	0x200(%rdi), %r9
    0000011d: 	cmpb	%sil, (%rax)
    00000120: 	jl	.Ltmp2201 # Offset: 288
.Ltmp2198:
    00000126: 	movl	$0x1, %eax
    0000012b: 	jle	.Ltmp2200 # Offset: 299
    00000131: 	movsbl	%sil, %esi
    00000135: 	movq	%rsp, %rdi
    00000138: 	movq	%r8, %rdx
    0000013b: 	movaps	%xmm1, (%rsp)
    0000013f: 	movaps	%xmm0, 0x10(%rsp)
    00000144: 	callq	_Z24binarysearch_recur_innerISt15_Deque_iteratorIaRaPaEalEbT_T0_T1_ # Offset: 324
    00000149: 	jmp	.Ltmp2200 # Offset: 329
    0000014e: 	nop # Size: 2
.Ltmp2197:
    00000150: 	movq	%rax, %r11
    00000153: 	sarq	$0x9, %r11
    00000157: 	jmp	.Ltmp2202 # Offset: 343
    00000159: 	nopl	(%rax) # Size: 7
.Ltmp2199:
    00000160: 	movq	0x8(%r10), %rax
    00000164: 	addq	$0x8, %r10
    00000168: 	leaq	0x200(%rax), %r9
    0000016f: 	movq	%rax, %rdi
    00000172: 	jmp	.Ltmp2203 # Offset: 370
.Ltmp2195:
    00000177: 	callq	__stack_chk_fail@PLT # Offset: 375
DWARF CFI Instructions:
    <empty>
End of Function "_Z24binarysearch_recur_innerISt15_Deque_iteratorIaRaPaEalEbT_T0_T1_"

Binary Function "_Z18binarysearch_recurISt15_Deque_iteratorIaRaPaEaEbT_S4_T0_" after disassembly {
  Number      : 322
  State       : disassembled
  Address     : 0x11340
  Size        : 0x194
  MaxSize     : 0x1a0
  Offset      : 0x11340
  Section     : .text
  Orc Section : .local.text._Z18binarysearch_recurISt15_Deque_iteratorIaRaPaEaEbT_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0321:
    00000000: 	endbr64
    00000004: 	subq	$0x38, %rsp
    00000008: 	movq	%rdi, %rcx
    0000000b: 	movl	%edx, %r9d
    0000000e: 	movq	(%rdi), %r10
    00000011: 	movq	%fs:0x28, %rax
    0000001a: 	movq	%rax, 0x28(%rsp)
    0000001f: 	movq	0x18(%rsi), %rax
    00000023: 	movq	0x18(%rcx), %r8
    00000027: 	movq	0x10(%rdi), %rdi
    0000002b: 	movq	%r8, %xmm2
    00000030: 	movq	%rdi, %xmm0
    00000035: 	punpcklqdq	%xmm2, %xmm0
    00000039: 	movq	%rax, %rdx
    0000003c: 	subq	%r8, %rdx
    0000003f: 	sarq	$0x3, %rdx
    00000043: 	cmpq	$0x1, %rax
    00000047: 	movq	(%rsi), %rax
    0000004a: 	adcq	$-0x1, %rdx
    0000004e: 	subq	0x8(%rsi), %rax
    00000052: 	movq	%rdi, %rsi
    00000055: 	shlq	$0x9, %rdx
    00000059: 	subq	%r10, %rsi
    0000005c: 	addq	%rax, %rdx
    0000005f: 	xorl	%eax, %eax
    00000061: 	addq	%rsi, %rdx
    00000064: 	jne	.Ltmp2204 # Offset: 100
.Ltmp2210:
    00000066: 	movq	0x28(%rsp), %rdx
    0000006b: 	subq	%fs:0x28, %rdx
    00000074: 	jne	.Ltmp2205 # Offset: 116
    0000007a: 	addq	$0x38, %rsp
    0000007e: 	retq # Offset: 126
    0000007f: 	nop # Size: 1
.Ltmp2204:
    00000080: 	movq	%rdx, %r11
    00000083: 	movq	0x8(%rcx), %rcx
    00000087: 	movq	%r10, %rax
    0000008a: 	movq	%r10, %xmm1
    0000008f: 	shrq	$0x3f, %r11
    00000093: 	addq	%rdx, %r11
    00000096: 	movq	%rcx, %xmm3
    0000009b: 	subq	%rcx, %rax
    0000009e: 	sarq	%r11
    000000a1: 	punpcklqdq	%xmm3, %xmm1
    000000a5: 	addq	%r11, %rax
    000000a8: 	js	.Ltmp2206 # Offset: 168
    000000aa: 	cmpq	$0x1ff, %rax
    000000b0: 	jg	.Ltmp2207 # Offset: 176
    000000b6: 	leaq	(%r10,%r11), %rax
    000000ba: 	movsbl	%r9b, %esi
    000000be: 	cmpb	(%rax), %r9b
    000000c1: 	jle	.Ltmp2208 # Offset: 193
.Ltmp2211:
    000000c3: 	addq	$0x1, %rax
    000000c7: 	cmpq	%rdi, %rax
    000000ca: 	je	.Ltmp2209 # Offset: 202
.Ltmp2213:
    000000d0: 	movq	%rcx, %xmm4
    000000d5: 	movq	%rax, %xmm0
    000000da: 	movq	%r8, %xmm5
    000000df: 	addq	$0x1, %r11
    000000e3: 	punpcklqdq	%xmm4, %xmm0
    000000e7: 	subq	%r11, %rdx
    000000ea: 	movaps	%xmm0, (%rsp)
    000000ee: 	movq	%rdi, %xmm0
    000000f3: 	movq	%rsp, %rdi
    000000f6: 	punpcklqdq	%xmm5, %xmm0
    000000fa: 	movaps	%xmm0, 0x10(%rsp)
    000000ff: 	callq	_Z24binarysearch_recur_innerISt15_Deque_iteratorIaRaPaEalEbT_T0_T1_ # Offset: 255
    00000104: 	jmp	.Ltmp2210 # Offset: 260
    00000109: 	nopl	(%rax) # Size: 7
.Ltmp2206:
    00000110: 	movq	%rax, %rsi
    00000113: 	notq	%rsi
    00000116: 	shrq	$0x9, %rsi
    0000011a: 	notq	%rsi
.Ltmp2212:
    0000011d: 	leaq	(%r8,%rsi,8), %r8
    00000121: 	shlq	$0x9, %rsi
    00000125: 	movq	(%r8), %rcx
    00000128: 	subq	%rsi, %rax
    0000012b: 	movsbl	%r9b, %esi
    0000012f: 	addq	%rcx, %rax
    00000132: 	leaq	0x200(%rcx), %rdi
    00000139: 	cmpb	(%rax), %r9b
    0000013c: 	jg	.Ltmp2211 # Offset: 316
.Ltmp2208:
    0000013e: 	movl	$0x1, %eax
    00000143: 	jge	.Ltmp2210 # Offset: 323
    00000149: 	movq	%rsp, %rdi
    0000014c: 	movq	%r11, %rdx
    0000014f: 	movaps	%xmm1, (%rsp)
    00000153: 	movaps	%xmm0, 0x10(%rsp)
    00000158: 	callq	_Z24binarysearch_recur_innerISt15_Deque_iteratorIaRaPaEalEbT_T0_T1_ # Offset: 344
    0000015d: 	jmp	.Ltmp2210 # Offset: 349
    00000162: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2207:
    00000168: 	movq	%rax, %rsi
    0000016b: 	sarq	$0x9, %rsi
    0000016f: 	jmp	.Ltmp2212 # Offset: 367
    00000171: 	nopl	(%rax) # Size: 7
.Ltmp2209:
    00000178: 	movq	0x8(%r8), %rax
    0000017c: 	addq	$0x8, %r8
    00000180: 	leaq	0x200(%rax), %rdi
    00000187: 	movq	%rax, %rcx
    0000018a: 	jmp	.Ltmp2213 # Offset: 394
.Ltmp2205:
    0000018f: 	callq	__stack_chk_fail@PLT # Offset: 399
DWARF CFI Instructions:
    <empty>
End of Function "_Z18binarysearch_recurISt15_Deque_iteratorIaRaPaEaEbT_S4_T0_"

Binary Function "_Z15TestSearchArrayISt14_List_iteratorIaEPFS1_S1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 323
  State       : disassembled
  Address     : 0x114e0
  Size        : 0x253
  MaxSize     : 0x260
  Offset      : 0x114e0
  Section     : .text
  Orc Section : .local.text._Z15TestSearchArrayISt14_List_iteratorIaEPFS1_S1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0322:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rcx, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	movl	$0x400, %edi
    00000017: 	pushq	%rbp
    00000018: 	pushq	%rbx
    00000019: 	movq	%rsi, %rbx
    0000001c: 	subq	$0x28, %rsp
    00000020: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000027: 	movq	%r8, 0x18(%rsp)
    0000002c: 	movb	%r9b, 0x17(%rsp)
    00000031: 	movq	%rdx, 0x8(%rsp)
    00000036: 	callq	_Znwm@PLT # Offset: 54
    0000003b: 	movabsq	$0x5851f42d4c957f2d, %r9
    00000045: 	leaq	0x9(%rax), %rdi
    00000049: 	movb	$0x0, (%rax)
    0000004c: 	movq	%rax, %r13
    0000004f: 	leaq	0x400(%rax), %r8
    00000056: 	andq	$-0x8, %rdi
    0000005a: 	movq	$0x0, 0x1(%rax)
    00000062: 	movq	%r13, %rsi
    00000065: 	movq	$0x0, 0x3f8(%rax)
    00000070: 	subl	%edi, %eax
    00000072: 	leal	0x400(%rax), %ecx
    00000078: 	xorl	%eax, %eax
    0000007a: 	shrl	$0x3, %ecx
    0000007d: 	rep		stosq	%rax, %es:(%rdi)
    00000080: 	movabsq	$0x14057b7ef767814f, %rdi
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2216:
    00000090: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    00000097: 	imulq	%r9, %rax
    0000009b: 	addq	%rdi, %rax
    0000009e: 	movq	%rax, %rdx
    000000a1: 	movq	%rax, %rcx
    000000a4: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000000ab: 	shlq	$0x17, %rcx
    000000af: 	shrq	$0x14, %rdx
    000000b3: 	xorq	%rcx, %rdx
    000000b6: 	xorq	%rdx, %rax
    000000b9: 	xorl	%edx, %edx
    000000bb: 	divq	0x8(%rsp)
    000000c0: 	movq	%r12, %rax
    000000c3: 	leaq	-0x1(%rdx), %rcx
    000000c7: 	testq	%rdx, %rdx
    000000ca: 	jle	.Ltmp2214 # Offset: 202
.Ltmp2215:
    000000d0: 	movq	(%rax), %rax
    000000d3: 	subq	$0x1, %rcx
    000000d7: 	jae	.Ltmp2215 # Offset: 215
.Ltmp2223:
    000000d9: 	movzbl	0x10(%rax), %eax
    000000dd: 	addq	$0x1, %rsi
    000000e1: 	movb	%al, -0x1(%rsi)
    000000e4: 	cmpq	%r8, %rsi
    000000e7: 	jne	.Ltmp2216 # Offset: 231
.Ltmp2225:
    000000e9: 	callq	clock@PLT # Offset: 233
    000000ee: 	xorl	%r15d, %r15d
    000000f1: 	xorl	%ebp, %ebp
    000000f3: 	movq	%rax, start_time(%rip)
.Ltmp2220:
    000000fa: 	leaq	0xc8(%rbp), %rax
    00000101: 	cmpb	$0x0, 0x17(%rsp)
    00000106: 	movq	%rax, (%rsp)
    0000010a: 	jne	.Ltmp2217 # Offset: 266
.Ltmp2218:
    00000110: 	movq	%rbp, %rax
    00000113: 	movq	%rbx, %rsi
    00000116: 	addq	$0x1, %rbp
    0000011a: 	movq	%r12, %rdi
    0000011d: 	andl	$0x3ff, %eax
    00000122: 	movsbl	(%r13,%rax), %edx
    00000128: 	callq	*%r14 # Offset: 296
    0000012b: 	cmpq	%rax, %rbx
    0000012e: 	movl	$0x1, %eax
    00000133: 	cmovel	%eax, %r15d
    00000137: 	cmpq	(%rsp), %rbp
    0000013b: 	jne	.Ltmp2218 # Offset: 315
.Ltmp2222:
    0000013d: 	callq	clock@PLT # Offset: 317
    00000142: 	movsd	gMinimumTimeTarget(%rip), %xmm1
    0000014a: 	pxor	%xmm0, %xmm0
    0000014e: 	movq	%rax, end_time(%rip)
    00000155: 	subq	start_time(%rip), %rax
    0000015c: 	cvtsi2sd	%rax, %xmm0
    00000161: 	divsd	DATAat0x34410(%rip), %xmm0
    00000169: 	comisd	%xmm0, %xmm1
    0000016d: 	jbe	.Ltmp2219 # Offset: 365
    0000016f: 	cmpq	$0x5f5e0ff, %rbp
    00000176: 	jbe	.Ltmp2220 # Offset: 374
.Ltmp2219:
    00000178: 	movq	0x18(%rsp), %rdx
    0000017d: 	movq	0x8(%rsp), %rdi
    00000182: 	movq	%rbp, %rsi
    00000185: 	callq	_Z13record_resultdmmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 389
    0000018a: 	testb	%r15b, %r15b
    0000018d: 	jne	.Ltmp2221 # Offset: 397
.Ltmp2226:
    00000193: 	addq	$0x28, %rsp
    00000197: 	movq	%r13, %rdi
    0000019a: 	movl	$0x400, %esi
    0000019f: 	popq	%rbx
    000001a0: 	popq	%rbp
    000001a1: 	popq	%r12
    000001a3: 	popq	%r13
    000001a5: 	popq	%r14
    000001a7: 	popq	%r15
    000001a9: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 425
    000001ae: 	nop # Size: 2
.Ltmp2217:
    000001b0: 	movq	%rbp, %rax
    000001b3: 	movq	%rbx, %rsi
    000001b6: 	addq	$0x1, %rbp
    000001ba: 	movq	%r12, %rdi
    000001bd: 	andl	$0x3ff, %eax
    000001c2: 	movsbl	(%r13,%rax), %edx
    000001c8: 	callq	*%r14 # Offset: 456
    000001cb: 	cmpq	(%rsp), %rbp
    000001cf: 	jne	.Ltmp2217 # Offset: 463
    000001d1: 	jmp	.Ltmp2222 # Offset: 465
    000001d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2214:
    000001e0: 	leaq	0x1(%rdx), %rcx
    000001e4: 	je	.Ltmp2223 # Offset: 484
    000001ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2224:
    000001f0: 	addq	$0x1, %rcx
    000001f4: 	movq	0x8(%rax), %rax
    000001f8: 	cmpq	$0x1, %rcx
    000001fc: 	jne	.Ltmp2224 # Offset: 508
    000001fe: 	movzbl	0x10(%rax), %eax
    00000202: 	addq	$0x1, %rsi
    00000206: 	movb	%al, -0x1(%rsi)
    00000209: 	cmpq	%r8, %rsi
    0000020c: 	jne	.Ltmp2216 # Offset: 524
    00000212: 	jmp	.Ltmp2225 # Offset: 530
.Ltmp2221:
    00000217: 	movq	0x18(%rsp), %rax
    0000021c: 	leaq	DATAat0x34137(%rip), %rsi
    00000223: 	movl	$0x1, %edi
    00000228: 	movq	(%rax), %rdx
    0000022b: 	xorl	%eax, %eax
    0000022d: 	callq	__printf_chk@PLT # Offset: 557
    00000232: 	jmp	.Ltmp2226 # Offset: 562
    00000237: 	endbr64
    0000023b: 	movq	%rax, %rbp
    0000023e: 	movq	%r13, %rdi
    00000241: 	movl	$0x400, %esi
    00000246: 	callq	_ZdlPvm@PLT # Offset: 582
    0000024b: 	movq	%rbp, %rdi
    0000024e: 	callq	_Unwind_Resume@PLT # Offset: 590
DWARF CFI Instructions:
    <empty>
End of Function "_Z15TestSearchArrayISt14_List_iteratorIaEPFS1_S1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z18quicksort2_forwardISt14_List_iteratorIaEEvT_S2_" after disassembly {
  Number      : 324
  State       : disassembled
  Address     : 0x11740
  Size        : 0x117
  MaxSize     : 0x120
  Offset      : 0x11740
  Section     : .text
  Orc Section : .local.text._Z18quicksort2_forwardISt14_List_iteratorIaEEvT_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0323:
    00000000: 	endbr64
    00000004: 	cmpq	%rdi, %rsi
    00000007: 	je	.Ltmp2227 # Offset: 7
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rsi, %rbp
    00000016: 	pushq	%rbx
.Ltmp2235:
    00000017: 	movq	(%r12), %rbx
    0000001b: 	cmpq	%rbp, %rbx
    0000001e: 	je	.Ltmp2228 # Offset: 30
    00000024: 	movq	(%rbx), %rax
    00000027: 	movzbl	0x10(%rbx), %esi
    0000002b: 	movzbl	0x10(%r12), %edx
    00000031: 	cmpq	%rbp, %rax
    00000034: 	je	.Ltmp2229 # Offset: 52
    0000003a: 	cmpb	%dl, %sil
    0000003d: 	jge	.Ltmp2230 # Offset: 61
    0000003f: 	movb	%sil, 0x10(%r12)
    00000044: 	movl	%edx, %esi
    00000046: 	movb	%dl, 0x10(%rbx)
.Ltmp2230:
    00000049: 	movzbl	0x10(%rax), %edx
    0000004d: 	cmpb	%dl, %sil
    00000050: 	jle	.Ltmp2231 # Offset: 80
    00000052: 	movb	%dl, 0x10(%rbx)
    00000055: 	movb	%sil, 0x10(%rax)
    00000059: 	movzbl	0x10(%rbx), %esi
    0000005d: 	movzbl	0x10(%r12), %edx
    00000063: 	cmpb	%dl, %sil
    00000066: 	jge	.Ltmp2231 # Offset: 102
    00000068: 	movb	%dl, 0x10(%rbx)
    0000006b: 	movb	%sil, 0x10(%r12)
    00000070: 	movzbl	0x10(%rbx), %esi
.Ltmp2231:
    00000074: 	cmpq	%rbp, (%rax)
    00000077: 	je	.Ltmp2228 # Offset: 119
    00000079: 	movq	(%rbx), %rax
    0000007c: 	cmpq	%rax, %rbp
    0000007f: 	je	.Ltmp2232 # Offset: 127
    00000081: 	movl	$0x2, %ecx
    00000086: 	movl	$0x1, %edi
    0000008b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2234:
    00000090: 	movzbl	0x10(%rax), %edx
    00000094: 	cmpb	%sil, %dl
    00000097: 	jge	.Ltmp2233 # Offset: 151
    00000099: 	movzbl	0x10(%rbx), %r8d
    0000009e: 	addq	$0x1, %rdi
    000000a2: 	addq	$0x1, %rcx
    000000a6: 	movb	%r8b, 0x10(%rax)
    000000aa: 	movb	%dl, 0x10(%rbx)
    000000ad: 	movq	(%rax), %rax
    000000b0: 	movq	(%rbx), %rbx
    000000b3: 	cmpq	%rbp, %rax
    000000b6: 	jne	.Ltmp2234 # Offset: 182
    000000b8: 	subq	%rdi, %rcx
    000000bb: 	cmpq	%rdi, %rcx
    000000be: 	jae	.Ltmp2232 # Offset: 190
.Ltmp2236:
    000000c0: 	movq	%rbp, %rsi
    000000c3: 	movq	%rbx, %rdi
    000000c6: 	movq	%rbx, %rbp
    000000c9: 	callq	_Z18quicksort2_forwardISt14_List_iteratorIaEEvT_S2_ # Offset: 201
.Ltmp2237:
    000000ce: 	cmpq	%r12, %rbp
    000000d1: 	jne	.Ltmp2235 # Offset: 209
.Ltmp2228:
    000000d7: 	popq	%rbx
    000000d8: 	popq	%rbp
    000000d9: 	popq	%r12
    000000db: 	retq # Offset: 219
    000000dc: 	nopl	(%rax) # Size: 4
.Ltmp2233:
    000000e0: 	movq	(%rax), %rax
    000000e3: 	addq	$0x1, %rcx
    000000e7: 	cmpq	%rbp, %rax
    000000ea: 	jne	.Ltmp2234 # Offset: 234
    000000ec: 	subq	%rdi, %rcx
    000000ef: 	cmpq	%rdi, %rcx
    000000f2: 	jb	.Ltmp2236 # Offset: 242
.Ltmp2232:
    000000f4: 	movq	%r12, %rdi
    000000f7: 	movq	%rbx, %rsi
    000000fa: 	movq	%rbx, %r12
    000000fd: 	callq	_Z18quicksort2_forwardISt14_List_iteratorIaEEvT_S2_ # Offset: 253
    00000102: 	jmp	.Ltmp2237 # Offset: 258
.Ltmp2229:
    00000104: 	cmpb	%dl, %sil
    00000107: 	jge	.Ltmp2228 # Offset: 263
    00000109: 	movb	%dl, 0x10(%rbx)
    0000010c: 	movb	%sil, 0x10(%r12)
    00000111: 	popq	%rbx
    00000112: 	popq	%rbp
    00000113: 	popq	%r12
    00000115: 	retq # Offset: 277
.Ltmp2227:
    00000116: 	retq # Offset: 278
DWARF CFI Instructions:
    <empty>
End of Function "_Z18quicksort2_forwardISt14_List_iteratorIaEEvT_S2_"

Binary Function "_Z13TestOneSearchISt14_List_iteratorIaEPFS1_S1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 325
  State       : disassembled
  Address     : 0x11860
  Size        : 0x23b
  MaxSize     : 0x240
  Offset      : 0x11860
  Section     : .text
  Orc Section : .local.text._Z13TestOneSearchISt14_List_iteratorIaEPFS1_S1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0324:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdi, %r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdx, %r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rsi, %rbp
    00000016: 	pushq	%rbx
    00000017: 	movq	%rdi, %rbx
    0000001a: 	subq	$0x58, %rsp
    0000001e: 	movq	%rcx, 0x8(%rsp)
    00000023: 	movq	%r8, 0x10(%rsp)
    00000028: 	movq	%fs:0x28, %rax
    00000031: 	movq	%rax, 0x48(%rsp)
    00000036: 	xorl	%eax, %eax
    00000038: 	movq	%rdi, %rax
    0000003b: 	cmpq	%rsi, %rdi
    0000003e: 	je	.Ltmp2238 # Offset: 62
.Ltmp2239:
    00000040: 	movq	%rax, %rdx
    00000043: 	movq	(%rax), %rax
    00000046: 	movb	$0x5, 0x10(%rdx)
    0000004a: 	cmpq	%rbp, %rax
    0000004d: 	jne	.Ltmp2239 # Offset: 77
.Ltmp2238:
    0000004f: 	movq	0x10(%rsp), %rsi
    00000054: 	leaq	0x20(%rsp), %r15
    00000059: 	leaq	DATAat0x34160(%rip), %rdx
    00000060: 	movzbl	%r9b, %r14d
    00000064: 	movq	%r15, %rdi
    00000067: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 103
    0000006c: 	movq	0x8(%rsp), %rcx
    00000071: 	movl	%r14d, %r9d
    00000074: 	movq	%r15, %r8
    00000077: 	movq	%r12, %rdx
    0000007a: 	movq	%rbp, %rsi
    0000007d: 	movq	%r13, %rdi
    00000080: 	callq	_Z15TestSearchArrayISt14_List_iteratorIaEPFS1_S1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 128
    00000085: 	movq	0x20(%rsp), %rdi
    0000008a: 	leaq	0x30(%rsp), %rax
    0000008f: 	movq	%rax, 0x18(%rsp)
    00000094: 	cmpq	%rax, %rdi
    00000097: 	je	.Ltmp2240 # Offset: 151
    00000099: 	movq	0x30(%rsp), %rax
    0000009e: 	leaq	0x1(%rax), %rsi
    000000a2: 	callq	_ZdlPvm@PLT # Offset: 162
.Ltmp2240:
    000000a7: 	cmpq	$0x9, %r12
    000000ab: 	jbe	.Ltmp2241 # Offset: 171
    000000b1: 	movabsq	$-0x3333333333333333, %rdx
    000000bb: 	movq	%r12, %rax
    000000be: 	mulq	%rdx
    000000c1: 	shrq	$0x3, %rdx
.Ltmp2251:
    000000c5: 	movq	%r13, %rsi
    000000c8: 	xorl	%ecx, %ecx
    000000ca: 	xorl	%r8d, %r8d
    000000cd: 	cmpq	$0x0, %r12
    000000d1: 	jbe	.Ltmp2242 # Offset: 209
    000000d3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2245:
    000000d8: 	xorl	%eax, %eax
    000000da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2244:
    000000e0: 	movq	%rsi, %rdi
    000000e3: 	addq	$0x1, %rax
    000000e7: 	movq	(%rsi), %rsi
    000000ea: 	addq	$0x1, %rcx
    000000ee: 	movb	%r8b, 0x10(%rdi)
    000000f2: 	cmpq	%rdx, %rax
    000000f5: 	jae	.Ltmp2243 # Offset: 245
    000000f7: 	cmpq	%rcx, %r12
    000000fa: 	ja	.Ltmp2244 # Offset: 250
.Ltmp2243:
    000000fc: 	addl	$0x1, %r8d
    00000100: 	cmpq	%rcx, %r12
    00000103: 	ja	.Ltmp2245 # Offset: 259
.Ltmp2242:
    00000105: 	movq	0x10(%rsp), %rsi
    0000010a: 	leaq	DATAat0x3416e(%rip), %rdx
    00000111: 	movq	%r15, %rdi
    00000114: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 276
    00000119: 	movq	0x8(%rsp), %rcx
    0000011e: 	movl	%r14d, %r9d
    00000121: 	movq	%r15, %r8
    00000124: 	movq	%r12, %rdx
    00000127: 	movq	%rbp, %rsi
    0000012a: 	movq	%r13, %rdi
    0000012d: 	callq	_Z15TestSearchArrayISt14_List_iteratorIaEPFS1_S1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 301
    00000132: 	movq	0x20(%rsp), %rdi
    00000137: 	cmpq	0x18(%rsp), %rdi
    0000013c: 	je	.Ltmp2246 # Offset: 316
    0000013e: 	movq	0x30(%rsp), %rax
    00000143: 	leaq	0x1(%rax), %rsi
    00000147: 	callq	_ZdlPvm@PLT # Offset: 327
.Ltmp2246:
    0000014c: 	xorl	%eax, %eax
    0000014e: 	cmpq	%rbp, %r13
    00000151: 	je	.Ltmp2247 # Offset: 337
    00000153: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2248:
    00000158: 	movq	%rbx, %rdx
    0000015b: 	movq	(%rbx), %rbx
    0000015e: 	movb	%al, 0x10(%rdx)
    00000161: 	addl	$0x1, %eax
    00000164: 	cmpq	%rbx, %rbp
    00000167: 	jne	.Ltmp2248 # Offset: 359
.Ltmp2247:
    00000169: 	movq	%rbp, %rsi
    0000016c: 	movq	%r13, %rdi
    0000016f: 	callq	_Z18quicksort2_forwardISt14_List_iteratorIaEEvT_S2_ # Offset: 367
    00000174: 	movq	0x10(%rsp), %rsi
    00000179: 	leaq	DATAat0x34184(%rip), %rdx
    00000180: 	movq	%r15, %rdi
    00000183: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 387
    00000188: 	movq	0x8(%rsp), %rcx
    0000018d: 	movl	%r14d, %r9d
    00000190: 	movq	%r15, %r8
    00000193: 	movq	%r12, %rdx
    00000196: 	movq	%rbp, %rsi
    00000199: 	movq	%r13, %rdi
    0000019c: 	callq	_Z15TestSearchArrayISt14_List_iteratorIaEPFS1_S1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 412
    000001a1: 	movq	0x20(%rsp), %rdi
    000001a6: 	cmpq	0x18(%rsp), %rdi
    000001ab: 	je	.Ltmp2249 # Offset: 427
    000001ad: 	movq	0x30(%rsp), %rax
    000001b2: 	leaq	0x1(%rax), %rsi
    000001b6: 	callq	_ZdlPvm@PLT # Offset: 438
.Ltmp2249:
    000001bb: 	movq	0x48(%rsp), %rax
    000001c0: 	subq	%fs:0x28, %rax
    000001c9: 	jne	.Ltmp2250 # Offset: 457
    000001cb: 	addq	$0x58, %rsp
    000001cf: 	popq	%rbx
    000001d0: 	popq	%rbp
    000001d1: 	popq	%r12
    000001d3: 	popq	%r13
    000001d5: 	popq	%r14
    000001d7: 	popq	%r15
    000001d9: 	retq # Offset: 473
.Ltmp2241:
    000001da: 	testq	%r12, %r12
    000001dd: 	je	.Ltmp2242 # Offset: 477
    000001e3: 	movl	$0x1, %edx
    000001e8: 	jmp	.Ltmp2251 # Offset: 488
.Ltmp2250:
    000001ed: 	callq	__stack_chk_fail@PLT # Offset: 493
    000001f2: 	endbr64
.Ltmp2253:
    000001f6: 	movq	%rax, %rbp
    000001f9: 	jmp	.Ltmp2252 # Offset: 505
    000001fb: 	endbr64
    000001ff: 	jmp	.Ltmp2253 # Offset: 511
    00000201: 	endbr64
    00000205: 	movq	%rax, %rbp
    00000208: 	movq	0x20(%rsp), %rdi
    0000020d: 	leaq	0x30(%rsp), %rax
    00000212: 	cmpq	%rax, %rdi
    00000215: 	je	.Ltmp2254 # Offset: 533
.Ltmp2255:
    00000217: 	movq	0x30(%rsp), %rax
    0000021c: 	leaq	0x1(%rax), %rsi
    00000220: 	callq	_ZdlPvm@PLT # Offset: 544
.Ltmp2254:
    00000225: 	movq	%rbp, %rdi
    00000228: 	callq	_Unwind_Resume@PLT # Offset: 552
.Ltmp2252:
    0000022d: 	movq	0x20(%rsp), %rdi
    00000232: 	cmpq	0x18(%rsp), %rdi
    00000237: 	jne	.Ltmp2255 # Offset: 567
    00000239: 	jmp	.Ltmp2254 # Offset: 569
DWARF CFI Instructions:
    <empty>
End of Function "_Z13TestOneSearchISt14_List_iteratorIaEPFS1_S1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z23lower_bound_recur_innerISt14_List_iteratorIaEalET_S2_T0_T1_" after disassembly {
  Number      : 326
  State       : disassembled
  Address     : 0x11aa0
  Size        : 0xa3
  MaxSize     : 0xb0
  Offset      : 0x11aa0
  Section     : .text
  Orc Section : .local.text._Z23lower_bound_recur_innerISt14_List_iteratorIaEalET_S2_T0_T1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0325:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	testq	%rdx, %rdx
    0000000a: 	je	.Ltmp2256 # Offset: 10
    00000010: 	movq	%rdx, %r8
    00000013: 	shrq	$0x3f, %r8
    00000017: 	addq	%rdx, %r8
    0000001a: 	sarq	%r8
    0000001d: 	cmpq	$0x1, %rdx
    00000021: 	jle	.Ltmp2257 # Offset: 33
    00000023: 	leaq	-0x1(%r8), %rcx
    00000027: 	testq	%r8, %r8
    0000002a: 	je	.Ltmp2258 # Offset: 42
    0000002c: 	nopl	(%rax) # Size: 4
.Ltmp2259:
    00000030: 	movq	(%rax), %rax
    00000033: 	subq	$0x1, %rcx
    00000037: 	jae	.Ltmp2259 # Offset: 55
.Ltmp2258:
    00000039: 	movsbl	%sil, %r9d
    0000003d: 	cmpb	%sil, 0x10(%rax)
    00000041: 	jge	.Ltmp2260 # Offset: 65
    00000043: 	addq	$0x1, %r8
    00000047: 	movq	(%rax), %rdi
    0000004a: 	movl	%r9d, %esi
    0000004d: 	subq	%r8, %rdx
    00000050: 	jmp	.LBB0325 # Offset: 80
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp2257:
    00000058: 	leaq	0x1(%r8), %rcx
    0000005c: 	testq	%r8, %r8
    0000005f: 	je	.Ltmp2258 # Offset: 95
    00000061: 	nopl	(%rax) # Size: 7
.Ltmp2261:
    00000068: 	addq	$0x1, %rcx
    0000006c: 	movq	0x8(%rax), %rax
    00000070: 	cmpq	$0x1, %rcx
    00000074: 	je	.Ltmp2258 # Offset: 116
    00000076: 	addq	$0x1, %rcx
    0000007a: 	movq	0x8(%rax), %rax
    0000007e: 	cmpq	$0x1, %rcx
    00000082: 	jne	.Ltmp2261 # Offset: 130
    00000084: 	jmp	.Ltmp2258 # Offset: 132
    00000086: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2256:
    00000090: 	retq # Offset: 144
    00000091: 	nopl	(%rax) # Size: 7
.Ltmp2260:
    00000098: 	movq	%r8, %rdx
    0000009b: 	movl	%r9d, %esi
    0000009e: 	jmp	.LBB0325 # Offset: 158
DWARF CFI Instructions:
    <empty>
End of Function "_Z23lower_bound_recur_innerISt14_List_iteratorIaEalET_S2_T0_T1_"

Binary Function "_Z17lower_bound_recurISt14_List_iteratorIaEaET_S2_S2_T0_" after disassembly {
  Number      : 327
  State       : disassembled
  Address     : 0x11b50
  Size        : 0x29b
  MaxSize     : 0x2a0
  Offset      : 0x11b50
  Section     : .text
  Orc Section : .local.text._Z17lower_bound_recurISt14_List_iteratorIaEaET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0326:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	cmpq	%rdi, %rsi
    0000000a: 	je	.Ltmp2262 # Offset: 10
    00000010: 	movl	%edx, %r8d
    00000013: 	xorl	%eax, %eax
    00000015: 	movq	%rdi, %rdx
    00000018: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2263:
    00000020: 	movq	(%rdx), %rdx
    00000023: 	movq	%rax, %rcx
    00000026: 	addq	$0x1, %rax
    0000002a: 	cmpq	%rdx, %rsi
    0000002d: 	jne	.Ltmp2263 # Offset: 45
    0000002f: 	movq	%rax, %r10
    00000032: 	movsbl	%r8b, %r11d
    00000036: 	sarq	%r10
    00000039: 	cmpq	$0x1, %rax
    0000003d: 	je	.Ltmp2264 # Offset: 61
    00000043: 	pushq	%r12
    00000045: 	leaq	-0x1(%r10), %rdx
    00000049: 	testq	%r10, %r10
    0000004c: 	je	.Ltmp2265 # Offset: 76
    00000052: 	movq	%rdi, %rsi
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp2266:
    00000058: 	movq	(%rsi), %rsi
    0000005b: 	subq	$0x1, %rdx
    0000005f: 	jae	.Ltmp2266 # Offset: 95
    00000061: 	cmpb	0x10(%rsi), %r8b
    00000065: 	jle	.Ltmp2267 # Offset: 101
    0000006b: 	movq	(%rsi), %r9
    0000006e: 	subq	%r10, %rcx
    00000071: 	je	.Ltmp2268 # Offset: 113
.Ltmp2287:
    00000073: 	movq	%rcx, %rsi
    00000076: 	shrq	$0x3f, %rsi
    0000007a: 	addq	%rcx, %rsi
    0000007d: 	sarq	%rsi
    00000080: 	cmpq	$0x1, %rcx
    00000084: 	jle	.Ltmp2269 # Offset: 132
    0000008a: 	leaq	-0x1(%rsi), %rdx
    0000008e: 	testq	%rsi, %rsi
    00000091: 	je	.Ltmp2270 # Offset: 145
    00000097: 	movq	%r9, %rax
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2271:
    000000a0: 	movq	(%rax), %rax
    000000a3: 	subq	$0x1, %rdx
    000000a7: 	jae	.Ltmp2271 # Offset: 167
    000000a9: 	leaq	0x1(%rsi), %rdi
    000000ad: 	cmpb	0x10(%rax), %r8b
    000000b1: 	jle	.Ltmp2272 # Offset: 177
.Ltmp2284:
    000000b7: 	movq	(%rax), %r8
    000000ba: 	subq	%rdi, %rcx
    000000bd: 	movl	%r11d, %esi
    000000c0: 	movq	%rcx, %rdx
    000000c3: 	movq	%r8, %rdi
    000000c6: 	callq	_Z23lower_bound_recur_innerISt14_List_iteratorIaEalET_S2_T0_T1_ # Offset: 198
    000000cb: 	movq	%rax, %r9
.Ltmp2268:
    000000ce: 	movq	%r9, %rax
    000000d1: 	popq	%r12
    000000d3: 	retq # Offset: 211
    000000d4: 	nopl	(%rax) # Size: 4
.Ltmp2264:
    000000d8: 	cmpb	0x10(%rdi), %r8b
    000000dc: 	jg	.Ltmp2273 # Offset: 220
.Ltmp2262:
    000000e2: 	movq	%r9, %rax
    000000e5: 	retq # Offset: 229
    000000e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2267:
    000000f0: 	movq	%rax, %r12
    000000f3: 	sarq	$0x2, %r12
    000000f7: 	cmpq	$0x3, %rax
    000000fb: 	jle	.Ltmp2274 # Offset: 251
    00000101: 	leaq	-0x1(%r12), %rax
    00000106: 	movq	%rdi, %rdx
    00000109: 	testq	%r12, %r12
    0000010c: 	je	.Ltmp2275 # Offset: 268
    0000010e: 	nop # Size: 2
.Ltmp2276:
    00000110: 	movq	(%rdx), %rdx
    00000113: 	subq	$0x1, %rax
    00000117: 	jae	.Ltmp2276 # Offset: 279
.Ltmp2275:
    00000119: 	cmpb	0x10(%rdx), %r8b
    0000011d: 	jle	.Ltmp2277 # Offset: 285
    0000011f: 	movq	(%rdx), %r9
    00000122: 	addq	$0x1, %r12
    00000126: 	movq	%r9, %rdi
    00000129: 	subq	%r12, %r10
    0000012c: 	je	.Ltmp2268 # Offset: 300
    0000012e: 	movq	%r10, %rdx
    00000131: 	shrq	$0x3f, %rdx
    00000135: 	addq	%r10, %rdx
    00000138: 	sarq	%rdx
    0000013b: 	cmpq	$0x1, %r10
    0000013f: 	jle	.Ltmp2278 # Offset: 319
    00000145: 	leaq	-0x1(%rdx), %rax
    00000149: 	testq	%rdx, %rdx
    0000014c: 	je	.Ltmp2279 # Offset: 332
    0000014e: 	nop # Size: 2
.Ltmp2280:
    00000150: 	movq	(%r9), %r9
    00000153: 	subq	$0x1, %rax
    00000157: 	jae	.Ltmp2280 # Offset: 343
.Ltmp2279:
    00000159: 	cmpb	0x10(%r9), %r8b
    0000015d: 	jle	.Ltmp2281 # Offset: 349
    0000015f: 	addq	$0x1, %rdx
    00000163: 	movq	(%r9), %rdi
    00000166: 	subq	%rdx, %r10
    00000169: 	movq	%r10, %rdx
    0000016c: 	jmp	.Ltmp2281 # Offset: 364
    0000016e: 	nop # Size: 2
.Ltmp2273:
    00000170: 	movq	(%rdi), %r9
    00000173: 	jmp	.Ltmp2262 # Offset: 371
.Ltmp2277:
    00000178: 	movq	%r12, %rdx
.Ltmp2281:
    0000017b: 	movl	%r11d, %esi
    0000017e: 	callq	_Z23lower_bound_recur_innerISt14_List_iteratorIaEalET_S2_T0_T1_ # Offset: 382
    00000183: 	popq	%r12
    00000185: 	movq	%rax, %r9
    00000188: 	movq	%r9, %rax
    0000018b: 	retq # Offset: 395
.Ltmp2274:
    0000018c: 	movq	%rdi, %rdx
    0000018f: 	testq	%r12, %r12
    00000192: 	je	.Ltmp2275 # Offset: 402
.Ltmp2282:
    00000198: 	jmp	.Ltmp2282 # Offset: 408
    0000019a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2269:
    000001a0: 	leaq	0x1(%rsi), %rdi
    000001a4: 	movq	%r9, %rax
    000001a7: 	movq	%rdi, %rdx
    000001aa: 	testq	%rsi, %rsi
    000001ad: 	je	.Ltmp2270 # Offset: 429
    000001b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2283:
    000001b8: 	addq	$0x1, %rdx
    000001bc: 	movq	0x8(%rax), %rax
    000001c0: 	cmpq	$0x1, %rdx
    000001c4: 	jne	.Ltmp2283 # Offset: 452
    000001c6: 	cmpb	0x10(%rax), %r8b
    000001ca: 	jg	.Ltmp2284 # Offset: 458
    000001d0: 	testq	%rcx, %rcx
    000001d3: 	leaq	0x3(%rcx), %rdx
    000001d7: 	movq	%r9, %rdi
    000001da: 	cmovnsq	%rcx, %rdx
    000001de: 	sarq	$0x2, %rdx
.Ltmp2288:
    000001e2: 	leaq	0x1(%rdx), %rax
    000001e6: 	testq	%rdx, %rdx
    000001e9: 	je	.Ltmp2285 # Offset: 489
    000001eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2286:
    000001f0: 	addq	$0x1, %rax
    000001f4: 	movq	0x8(%r9), %r9
    000001f8: 	cmpq	$0x1, %rax
    000001fc: 	jne	.Ltmp2286 # Offset: 508
.Ltmp2285:
    000001fe: 	cmpb	0x10(%r9), %r8b
    00000202: 	jle	.Ltmp2281 # Offset: 514
    00000208: 	addq	$0x1, %rdx
    0000020c: 	movq	(%r9), %rdi
    0000020f: 	subq	%rdx, %rsi
    00000212: 	movq	%rsi, %rdx
    00000215: 	movl	%r11d, %esi
    00000218: 	callq	_Z23lower_bound_recur_innerISt14_List_iteratorIaEalET_S2_T0_T1_ # Offset: 536
    0000021d: 	movq	%rax, %r9
    00000220: 	jmp	.Ltmp2268 # Offset: 544
.Ltmp2265:
    00000225: 	cmpb	0x10(%rdi), %r8b
    00000229: 	jle	.Ltmp2268 # Offset: 553
    0000022f: 	movq	(%rdi), %r9
    00000232: 	jmp	.Ltmp2287 # Offset: 562
.Ltmp2272:
    00000237: 	movq	%rcx, %rdx
    0000023a: 	movq	%r9, %rdi
    0000023d: 	sarq	$0x2, %rdx
    00000241: 	cmpq	$0x3, %rcx
    00000245: 	jle	.Ltmp2288 # Offset: 581
    00000247: 	leaq	-0x1(%rdx), %rax
    0000024b: 	testq	%rdx, %rdx
    0000024e: 	je	.Ltmp2285 # Offset: 590
.Ltmp2289:
    00000250: 	movq	(%r9), %r9
    00000253: 	subq	$0x1, %rax
    00000257: 	jae	.Ltmp2289 # Offset: 599
    00000259: 	jmp	.Ltmp2285 # Offset: 601
.Ltmp2270:
    0000025b: 	cmpb	0x10(%r9), %r8b
    0000025f: 	jle	.Ltmp2268 # Offset: 607
    00000265: 	movq	%r9, %rax
    00000268: 	movl	$0x1, %edi
    0000026d: 	jmp	.Ltmp2284 # Offset: 621
    00000272: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2278:
    00000278: 	leaq	0x1(%rdx), %rax
    0000027c: 	testq	%rdx, %rdx
    0000027f: 	je	.Ltmp2279 # Offset: 639
    00000285: 	nopl	(%rax) # Size: 3
.Ltmp2290:
    00000288: 	addq	$0x1, %rax
    0000028c: 	movq	0x8(%r9), %r9
    00000290: 	cmpq	$0x1, %rax
    00000294: 	jne	.Ltmp2290 # Offset: 660
    00000296: 	jmp	.Ltmp2279 # Offset: 662
DWARF CFI Instructions:
    <empty>
End of Function "_Z17lower_bound_recurISt14_List_iteratorIaEaET_S2_S2_T0_"

Binary Function "_Z23upper_bound_recur_innerISt14_List_iteratorIaEalET_S2_T0_T1_" after disassembly {
  Number      : 328
  State       : disassembled
  Address     : 0x11df0
  Size        : 0x9a
  MaxSize     : 0xa0
  Offset      : 0x11df0
  Section     : .text
  Orc Section : .local.text._Z23upper_bound_recur_innerISt14_List_iteratorIaEalET_S2_T0_T1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0327:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	testq	%rdx, %rdx
    0000000a: 	je	.Ltmp2291 # Offset: 10
    0000000c: 	movq	%rdx, %r8
    0000000f: 	shrq	$0x3f, %r8
    00000013: 	addq	%rdx, %r8
    00000016: 	sarq	%r8
    00000019: 	cmpq	$0x1, %rdx
    0000001d: 	jle	.Ltmp2292 # Offset: 29
    0000001f: 	leaq	-0x1(%r8), %rcx
    00000023: 	testq	%r8, %r8
    00000026: 	je	.Ltmp2293 # Offset: 38
    00000028: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2294:
    00000030: 	movq	(%rax), %rax
    00000033: 	subq	$0x1, %rcx
    00000037: 	jae	.Ltmp2294 # Offset: 55
.Ltmp2293:
    00000039: 	movsbl	%sil, %r9d
    0000003d: 	cmpb	%sil, 0x10(%rax)
    00000041: 	jle	.Ltmp2295 # Offset: 65
    00000043: 	movq	%r8, %rdx
    00000046: 	movl	%r9d, %esi
    00000049: 	jmp	.LBB0327 # Offset: 73
    0000004e: 	nop # Size: 2
.Ltmp2292:
    00000050: 	leaq	0x1(%r8), %rcx
    00000054: 	testq	%r8, %r8
    00000057: 	je	.Ltmp2293 # Offset: 87
    00000059: 	nopl	(%rax) # Size: 7
.Ltmp2296:
    00000060: 	addq	$0x1, %rcx
    00000064: 	movq	0x8(%rax), %rax
    00000068: 	cmpq	$0x1, %rcx
    0000006c: 	je	.Ltmp2293 # Offset: 108
    0000006e: 	addq	$0x1, %rcx
    00000072: 	movq	0x8(%rax), %rax
    00000076: 	cmpq	$0x1, %rcx
    0000007a: 	jne	.Ltmp2296 # Offset: 122
    0000007c: 	jmp	.Ltmp2293 # Offset: 124
    0000007e: 	nop # Size: 2
.Ltmp2291:
    00000080: 	retq # Offset: 128
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp2295:
    00000088: 	addq	$0x1, %r8
    0000008c: 	movq	(%rax), %rdi
    0000008f: 	movl	%r9d, %esi
    00000092: 	subq	%r8, %rdx
    00000095: 	jmp	.LBB0327 # Offset: 149
DWARF CFI Instructions:
    <empty>
End of Function "_Z23upper_bound_recur_innerISt14_List_iteratorIaEalET_S2_T0_T1_"

Binary Function "_Z17upper_bound_recurISt14_List_iteratorIaEaET_S2_S2_T0_" after disassembly {
  Number      : 329
  State       : disassembled
  Address     : 0x11e90
  Size        : 0x2ab
  MaxSize     : 0x2b0
  Offset      : 0x11e90
  Section     : .text
  Orc Section : .local.text._Z17upper_bound_recurISt14_List_iteratorIaEaET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0328:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	cmpq	%rdi, %rsi
    0000000a: 	je	.Ltmp2297 # Offset: 10
    00000010: 	movl	%edx, %r10d
    00000013: 	xorl	%eax, %eax
    00000015: 	movq	%rdi, %rdx
    00000018: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2298:
    00000020: 	movq	(%rdx), %rdx
    00000023: 	movq	%rax, %rcx
    00000026: 	addq	$0x1, %rax
    0000002a: 	cmpq	%rdx, %rsi
    0000002d: 	jne	.Ltmp2298 # Offset: 45
    0000002f: 	movq	%rax, %rdx
    00000032: 	movsbl	%r10b, %r11d
    00000036: 	sarq	%rdx
    00000039: 	cmpq	$0x1, %rax
    0000003d: 	je	.Ltmp2299 # Offset: 61
    00000043: 	subq	$0x8, %rsp
    00000047: 	leaq	-0x1(%rdx), %rsi
    0000004b: 	testq	%rdx, %rdx
    0000004e: 	je	.Ltmp2300 # Offset: 78
    00000054: 	movq	%rdi, %r8
    00000057: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2301:
    00000060: 	movq	(%r8), %r8
    00000063: 	subq	$0x1, %rsi
    00000067: 	jae	.Ltmp2301 # Offset: 103
    00000069: 	cmpb	0x10(%r8), %r10b
    0000006d: 	jl	.Ltmp2302 # Offset: 109
    00000073: 	movq	(%r8), %r9
    00000076: 	subq	%rdx, %rcx
    00000079: 	je	.Ltmp2303 # Offset: 121
.Ltmp2323:
    0000007f: 	movq	%rcx, %rsi
    00000082: 	shrq	$0x3f, %rsi
    00000086: 	addq	%rcx, %rsi
    00000089: 	sarq	%rsi
    0000008c: 	cmpq	$0x1, %rcx
    00000090: 	jle	.Ltmp2304 # Offset: 144
    00000096: 	leaq	-0x1(%rsi), %rdx
    0000009a: 	testq	%rsi, %rsi
    0000009d: 	je	.Ltmp2305 # Offset: 157
    000000a3: 	movq	%r9, %rax
    000000a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2306:
    000000b0: 	movq	(%rax), %rax
    000000b3: 	subq	$0x1, %rdx
    000000b7: 	jae	.Ltmp2306 # Offset: 183
    000000b9: 	leaq	0x1(%rsi), %rdi
    000000bd: 	cmpb	0x10(%rax), %r10b
    000000c1: 	jl	.Ltmp2307 # Offset: 193
.Ltmp2319:
    000000c7: 	movq	(%rax), %r9
    000000ca: 	movq	%r9, %r8
    000000cd: 	subq	%rdi, %rcx
    000000d0: 	je	.Ltmp2303 # Offset: 208
    000000d6: 	movq	%rcx, %rdx
    000000d9: 	shrq	$0x3f, %rdx
    000000dd: 	addq	%rcx, %rdx
    000000e0: 	sarq	%rdx
    000000e3: 	cmpq	$0x1, %rcx
    000000e7: 	jle	.Ltmp2308 # Offset: 231
    000000ed: 	leaq	-0x1(%rdx), %rax
    000000f1: 	testq	%rdx, %rdx
    000000f4: 	je	.Ltmp2309 # Offset: 244
    000000f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2310:
    00000100: 	movq	(%r9), %r9
    00000103: 	subq	$0x1, %rax
    00000107: 	jae	.Ltmp2310 # Offset: 263
.Ltmp2309:
    00000109: 	cmpb	0x10(%r9), %r10b
    0000010d: 	jl	.Ltmp2311 # Offset: 269
    0000010f: 	addq	$0x1, %rdx
    00000113: 	movq	(%r9), %r8
    00000116: 	subq	%rdx, %rcx
    00000119: 	movq	%rcx, %rdx
.Ltmp2311:
    0000011c: 	movl	%r11d, %esi
    0000011f: 	movq	%r8, %rdi
    00000122: 	callq	_Z23upper_bound_recur_innerISt14_List_iteratorIaEalET_S2_T0_T1_ # Offset: 290
    00000127: 	movq	%rax, %r9
    0000012a: 	jmp	.Ltmp2303 # Offset: 298
    0000012c: 	nopl	(%rax) # Size: 4
.Ltmp2299:
    00000130: 	cmpb	0x10(%rdi), %r10b
    00000134: 	jge	.Ltmp2312 # Offset: 308
.Ltmp2297:
    00000136: 	movq	%r9, %rax
    00000139: 	retq # Offset: 313
    0000013a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2302:
    00000140: 	movq	%rax, %r8
    00000143: 	sarq	$0x2, %r8
    00000147: 	cmpq	$0x3, %rax
    0000014b: 	jle	.Ltmp2313 # Offset: 331
    0000014d: 	leaq	-0x1(%r8), %rax
    00000151: 	testq	%r8, %r8
    00000154: 	je	.Ltmp2314 # Offset: 340
    00000156: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2315:
    00000160: 	movq	(%r9), %r9
    00000163: 	subq	$0x1, %rax
    00000167: 	jae	.Ltmp2315 # Offset: 359
.Ltmp2314:
    00000169: 	cmpb	0x10(%r9), %r10b
    0000016d: 	jge	.Ltmp2316 # Offset: 365
    0000016f: 	movq	%r8, %rdx
    00000172: 	movl	%r11d, %esi
    00000175: 	callq	_Z23upper_bound_recur_innerISt14_List_iteratorIaEalET_S2_T0_T1_ # Offset: 373
    0000017a: 	movq	%rax, %r9
.Ltmp2303:
    0000017d: 	movq	%r9, %rax
    00000180: 	addq	$0x8, %rsp
    00000184: 	retq # Offset: 388
    00000185: 	nopl	(%rax) # Size: 3
.Ltmp2312:
    00000188: 	movq	(%rdi), %r9
    0000018b: 	jmp	.Ltmp2297 # Offset: 395
.Ltmp2316:
    0000018d: 	movq	(%r9), %rdi
    00000190: 	addq	$0x1, %r8
    00000194: 	movl	%r11d, %esi
    00000197: 	subq	%r8, %rdx
    0000019a: 	callq	_Z23upper_bound_recur_innerISt14_List_iteratorIaEalET_S2_T0_T1_ # Offset: 410
    0000019f: 	movq	%rax, %r9
    000001a2: 	jmp	.Ltmp2303 # Offset: 418
.Ltmp2313:
    000001a4: 	testq	%r8, %r8
    000001a7: 	je	.Ltmp2314 # Offset: 423
.Ltmp2317:
    000001a9: 	jmp	.Ltmp2317 # Offset: 425
    000001ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2304:
    000001b0: 	leaq	0x1(%rsi), %rdi
    000001b4: 	movq	%r9, %rax
    000001b7: 	movq	%rdi, %rdx
    000001ba: 	testq	%rsi, %rsi
    000001bd: 	je	.Ltmp2305 # Offset: 445
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2318:
    000001c8: 	addq	$0x1, %rdx
    000001cc: 	movq	0x8(%rax), %rax
    000001d0: 	cmpq	$0x1, %rdx
    000001d4: 	jne	.Ltmp2318 # Offset: 468
    000001d6: 	cmpb	0x10(%rax), %r10b
    000001da: 	jge	.Ltmp2319 # Offset: 474
    000001e0: 	testq	%rcx, %rcx
    000001e3: 	leaq	0x3(%rcx), %rdx
    000001e7: 	movq	%r9, %rdi
    000001ea: 	cmovnsq	%rcx, %rdx
    000001ee: 	sarq	$0x2, %rdx
.Ltmp2324:
    000001f2: 	leaq	0x1(%rdx), %rax
    000001f6: 	testq	%rdx, %rdx
    000001f9: 	je	.Ltmp2320 # Offset: 505
    000001fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2321:
    00000200: 	addq	$0x1, %rax
    00000204: 	movq	0x8(%r9), %r9
    00000208: 	cmpq	$0x1, %rax
    0000020c: 	jne	.Ltmp2321 # Offset: 524
.Ltmp2320:
    0000020e: 	cmpb	0x10(%r9), %r10b
    00000212: 	jl	.Ltmp2322 # Offset: 530
    00000214: 	addq	$0x1, %rdx
    00000218: 	movq	(%r9), %rdi
    0000021b: 	subq	%rdx, %rsi
    0000021e: 	movq	%rsi, %rdx
.Ltmp2322:
    00000221: 	movl	%r11d, %esi
    00000224: 	callq	_Z23upper_bound_recur_innerISt14_List_iteratorIaEalET_S2_T0_T1_ # Offset: 548
    00000229: 	movq	%rax, %r9
    0000022c: 	jmp	.Ltmp2303 # Offset: 556
.Ltmp2300:
    00000231: 	cmpb	0x10(%rdi), %r10b
    00000235: 	jl	.Ltmp2303 # Offset: 565
    0000023b: 	movq	(%rdi), %r9
    0000023e: 	jmp	.Ltmp2323 # Offset: 574
.Ltmp2307:
    00000243: 	movq	%rcx, %rdx
    00000246: 	movq	%r9, %rdi
    00000249: 	sarq	$0x2, %rdx
    0000024d: 	cmpq	$0x3, %rcx
    00000251: 	jle	.Ltmp2324 # Offset: 593
    00000253: 	leaq	-0x1(%rdx), %rax
    00000257: 	testq	%rdx, %rdx
    0000025a: 	je	.Ltmp2320 # Offset: 602
    0000025c: 	nopl	(%rax) # Size: 4
.Ltmp2325:
    00000260: 	movq	(%r9), %r9
    00000263: 	subq	$0x1, %rax
    00000267: 	jae	.Ltmp2325 # Offset: 615
    00000269: 	jmp	.Ltmp2320 # Offset: 617
.Ltmp2305:
    0000026b: 	cmpb	0x10(%r9), %r10b
    0000026f: 	jl	.Ltmp2303 # Offset: 623
    00000275: 	movq	%r9, %rax
    00000278: 	movl	$0x1, %edi
    0000027d: 	jmp	.Ltmp2319 # Offset: 637
    00000282: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2308:
    00000288: 	leaq	0x1(%rdx), %rax
    0000028c: 	testq	%rdx, %rdx
    0000028f: 	je	.Ltmp2309 # Offset: 655
    00000295: 	nopl	(%rax) # Size: 3
.Ltmp2326:
    00000298: 	addq	$0x1, %rax
    0000029c: 	movq	0x8(%r9), %r9
    000002a0: 	cmpq	$0x1, %rax
    000002a4: 	jne	.Ltmp2326 # Offset: 676
    000002a6: 	jmp	.Ltmp2309 # Offset: 678
DWARF CFI Instructions:
    <empty>
End of Function "_Z17upper_bound_recurISt14_List_iteratorIaEaET_S2_S2_T0_"

Binary Function "_Z15TestSearchArrayISt14_List_iteratorIaEPFbS1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 330
  State       : disassembled
  Address     : 0x12140
  Size        : 0x220
  MaxSize     : 0x220
  Offset      : 0x12140
  Section     : .text
  Orc Section : .local.text._Z15TestSearchArrayISt14_List_iteratorIaEPFbS1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0329:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rcx, %r15
    00000009: 	pushq	%r14
    0000000b: 	movq	%rsi, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %r12
    00000015: 	movl	$0x400, %edi
    0000001a: 	pushq	%rbp
    0000001b: 	pushq	%rbx
    0000001c: 	subq	$0x28, %rsp
    00000020: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000027: 	movq	%r8, 0x18(%rsp)
    0000002c: 	movb	%r9b, 0xf(%rsp)
    00000031: 	movq	%rdx, 0x10(%rsp)
    00000036: 	callq	_Znwm@PLT # Offset: 54
    0000003b: 	movabsq	$0x5851f42d4c957f2d, %r9
    00000045: 	leaq	0x9(%rax), %rdi
    00000049: 	movb	$0x0, (%rax)
    0000004c: 	movq	%rax, %r13
    0000004f: 	leaq	0x400(%rax), %r8
    00000056: 	andq	$-0x8, %rdi
    0000005a: 	movq	$0x0, 0x1(%rax)
    00000062: 	movq	%r13, %rsi
    00000065: 	movq	$0x0, 0x3f8(%rax)
    00000070: 	subl	%edi, %eax
    00000072: 	leal	0x400(%rax), %ecx
    00000078: 	xorl	%eax, %eax
    0000007a: 	shrl	$0x3, %ecx
    0000007d: 	rep		stosq	%rax, %es:(%rdi)
    00000080: 	movabsq	$0x14057b7ef767814f, %rdi
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2329:
    00000090: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    00000097: 	imulq	%r9, %rax
    0000009b: 	addq	%rdi, %rax
    0000009e: 	movq	%rax, %rdx
    000000a1: 	movq	%rax, %rcx
    000000a4: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000000ab: 	shlq	$0x17, %rcx
    000000af: 	shrq	$0x14, %rdx
    000000b3: 	xorq	%rcx, %rdx
    000000b6: 	xorq	%rdx, %rax
    000000b9: 	xorl	%edx, %edx
    000000bb: 	divq	0x10(%rsp)
    000000c0: 	movq	%r12, %rax
    000000c3: 	leaq	-0x1(%rdx), %rcx
    000000c7: 	testq	%rdx, %rdx
    000000ca: 	jle	.Ltmp2327 # Offset: 202
.Ltmp2328:
    000000d0: 	movq	(%rax), %rax
    000000d3: 	subq	$0x1, %rcx
    000000d7: 	jae	.Ltmp2328 # Offset: 215
.Ltmp2335:
    000000d9: 	movzbl	0x10(%rax), %eax
    000000dd: 	addq	$0x1, %rsi
    000000e1: 	movb	%al, -0x1(%rsi)
    000000e4: 	cmpq	%rsi, %r8
    000000e7: 	jne	.Ltmp2329 # Offset: 231
.Ltmp2337:
    000000e9: 	callq	clock@PLT # Offset: 233
    000000ee: 	xorl	%ebx, %ebx
    000000f0: 	xorl	%ebp, %ebp
    000000f2: 	movq	%rax, start_time(%rip)
.Ltmp2333:
    000000f9: 	leaq	0xc8(%rbp), %rax
    00000100: 	movq	%rax, (%rsp)
    00000104: 	nopl	(%rax) # Size: 4
.Ltmp2331:
    00000108: 	movq	%rbp, %rax
    0000010b: 	movq	%r14, %rsi
    0000010e: 	addq	$0x1, %rbp
    00000112: 	movq	%r12, %rdi
    00000115: 	andl	$0x3ff, %eax
    0000011a: 	movsbl	(%r13,%rax), %edx
    00000120: 	callq	*%r15 # Offset: 288
    00000123: 	testb	%al, %al
    00000125: 	jne	.Ltmp2330 # Offset: 293
    00000127: 	cmpb	$0x0, 0xf(%rsp)
    0000012c: 	movl	$0x1, %eax
    00000131: 	cmovel	%eax, %ebx
.Ltmp2330:
    00000134: 	cmpq	(%rsp), %rbp
    00000138: 	jne	.Ltmp2331 # Offset: 312
    0000013a: 	callq	clock@PLT # Offset: 314
    0000013f: 	movsd	gMinimumTimeTarget(%rip), %xmm1
    00000147: 	pxor	%xmm0, %xmm0
    0000014b: 	movq	%rax, end_time(%rip)
    00000152: 	subq	start_time(%rip), %rax
    00000159: 	cvtsi2sd	%rax, %xmm0
    0000015e: 	divsd	DATAat0x34410(%rip), %xmm0
    00000166: 	comisd	%xmm0, %xmm1
    0000016a: 	jbe	.Ltmp2332 # Offset: 362
    0000016c: 	cmpq	$0x5f5e0ff, %rbp
    00000173: 	jbe	.Ltmp2333 # Offset: 371
.Ltmp2332:
    00000175: 	movq	0x18(%rsp), %rdx
    0000017a: 	movq	0x10(%rsp), %rdi
    0000017f: 	movq	%rbp, %rsi
    00000182: 	callq	_Z13record_resultdmmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 386
    00000187: 	testb	%bl, %bl
    00000189: 	jne	.Ltmp2334 # Offset: 393
.Ltmp2338:
    0000018b: 	addq	$0x28, %rsp
    0000018f: 	movq	%r13, %rdi
    00000192: 	movl	$0x400, %esi
    00000197: 	popq	%rbx
    00000198: 	popq	%rbp
    00000199: 	popq	%r12
    0000019b: 	popq	%r13
    0000019d: 	popq	%r14
    0000019f: 	popq	%r15
    000001a1: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 417
    000001a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2327:
    000001b0: 	leaq	0x1(%rdx), %rcx
    000001b4: 	je	.Ltmp2335 # Offset: 436
    000001ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2336:
    000001c0: 	addq	$0x1, %rcx
    000001c4: 	movq	0x8(%rax), %rax
    000001c8: 	cmpq	$0x1, %rcx
    000001cc: 	jne	.Ltmp2336 # Offset: 460
    000001ce: 	movzbl	0x10(%rax), %eax
    000001d2: 	addq	$0x1, %rsi
    000001d6: 	movb	%al, -0x1(%rsi)
    000001d9: 	cmpq	%rsi, %r8
    000001dc: 	jne	.Ltmp2329 # Offset: 476
    000001e2: 	jmp	.Ltmp2337 # Offset: 482
.Ltmp2334:
    000001e7: 	movq	0x18(%rsp), %rax
    000001ec: 	leaq	DATAat0x34137(%rip), %rsi
    000001f3: 	movl	$0x1, %edi
    000001f8: 	movq	(%rax), %rdx
    000001fb: 	xorl	%eax, %eax
    000001fd: 	callq	__printf_chk@PLT # Offset: 509
    00000202: 	jmp	.Ltmp2338 # Offset: 514
    00000204: 	endbr64
    00000208: 	movq	%rax, %rbp
    0000020b: 	movq	%r13, %rdi
    0000020e: 	movl	$0x400, %esi
    00000213: 	callq	_ZdlPvm@PLT # Offset: 531
    00000218: 	movq	%rbp, %rdi
    0000021b: 	callq	_Unwind_Resume@PLT # Offset: 539
DWARF CFI Instructions:
    <empty>
End of Function "_Z15TestSearchArrayISt14_List_iteratorIaEPFbS1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z13TestOneSearchISt14_List_iteratorIaEPFbS1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 331
  State       : disassembled
  Address     : 0x12360
  Size        : 0x23b
  MaxSize     : 0x240
  Offset      : 0x12360
  Section     : .text
  Orc Section : .local.text._Z13TestOneSearchISt14_List_iteratorIaEPFbS1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0330:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdi, %r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdx, %r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rsi, %rbp
    00000016: 	pushq	%rbx
    00000017: 	movq	%rdi, %rbx
    0000001a: 	subq	$0x58, %rsp
    0000001e: 	movq	%rcx, 0x8(%rsp)
    00000023: 	movq	%r8, 0x10(%rsp)
    00000028: 	movq	%fs:0x28, %rax
    00000031: 	movq	%rax, 0x48(%rsp)
    00000036: 	xorl	%eax, %eax
    00000038: 	movq	%rdi, %rax
    0000003b: 	cmpq	%rsi, %rdi
    0000003e: 	je	.Ltmp2339 # Offset: 62
.Ltmp2340:
    00000040: 	movq	%rax, %rdx
    00000043: 	movq	(%rax), %rax
    00000046: 	movb	$0x5, 0x10(%rdx)
    0000004a: 	cmpq	%rbp, %rax
    0000004d: 	jne	.Ltmp2340 # Offset: 77
.Ltmp2339:
    0000004f: 	movq	0x10(%rsp), %rsi
    00000054: 	leaq	0x20(%rsp), %r15
    00000059: 	leaq	DATAat0x34160(%rip), %rdx
    00000060: 	movzbl	%r9b, %r14d
    00000064: 	movq	%r15, %rdi
    00000067: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 103
    0000006c: 	movq	0x8(%rsp), %rcx
    00000071: 	movl	%r14d, %r9d
    00000074: 	movq	%r15, %r8
    00000077: 	movq	%r12, %rdx
    0000007a: 	movq	%rbp, %rsi
    0000007d: 	movq	%r13, %rdi
    00000080: 	callq	_Z15TestSearchArrayISt14_List_iteratorIaEPFbS1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 128
    00000085: 	movq	0x20(%rsp), %rdi
    0000008a: 	leaq	0x30(%rsp), %rax
    0000008f: 	movq	%rax, 0x18(%rsp)
    00000094: 	cmpq	%rax, %rdi
    00000097: 	je	.Ltmp2341 # Offset: 151
    00000099: 	movq	0x30(%rsp), %rax
    0000009e: 	leaq	0x1(%rax), %rsi
    000000a2: 	callq	_ZdlPvm@PLT # Offset: 162
.Ltmp2341:
    000000a7: 	cmpq	$0x9, %r12
    000000ab: 	jbe	.Ltmp2342 # Offset: 171
    000000b1: 	movabsq	$-0x3333333333333333, %rdx
    000000bb: 	movq	%r12, %rax
    000000be: 	mulq	%rdx
    000000c1: 	shrq	$0x3, %rdx
.Ltmp2352:
    000000c5: 	movq	%r13, %rsi
    000000c8: 	xorl	%ecx, %ecx
    000000ca: 	xorl	%r8d, %r8d
    000000cd: 	cmpq	$0x0, %r12
    000000d1: 	jbe	.Ltmp2343 # Offset: 209
    000000d3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2346:
    000000d8: 	xorl	%eax, %eax
    000000da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2345:
    000000e0: 	movq	%rsi, %rdi
    000000e3: 	addq	$0x1, %rax
    000000e7: 	movq	(%rsi), %rsi
    000000ea: 	addq	$0x1, %rcx
    000000ee: 	movb	%r8b, 0x10(%rdi)
    000000f2: 	cmpq	%rdx, %rax
    000000f5: 	jae	.Ltmp2344 # Offset: 245
    000000f7: 	cmpq	%rcx, %r12
    000000fa: 	ja	.Ltmp2345 # Offset: 250
.Ltmp2344:
    000000fc: 	addl	$0x1, %r8d
    00000100: 	cmpq	%rcx, %r12
    00000103: 	ja	.Ltmp2346 # Offset: 259
.Ltmp2343:
    00000105: 	movq	0x10(%rsp), %rsi
    0000010a: 	leaq	DATAat0x3416e(%rip), %rdx
    00000111: 	movq	%r15, %rdi
    00000114: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 276
    00000119: 	movq	0x8(%rsp), %rcx
    0000011e: 	movl	%r14d, %r9d
    00000121: 	movq	%r15, %r8
    00000124: 	movq	%r12, %rdx
    00000127: 	movq	%rbp, %rsi
    0000012a: 	movq	%r13, %rdi
    0000012d: 	callq	_Z15TestSearchArrayISt14_List_iteratorIaEPFbS1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 301
    00000132: 	movq	0x20(%rsp), %rdi
    00000137: 	cmpq	0x18(%rsp), %rdi
    0000013c: 	je	.Ltmp2347 # Offset: 316
    0000013e: 	movq	0x30(%rsp), %rax
    00000143: 	leaq	0x1(%rax), %rsi
    00000147: 	callq	_ZdlPvm@PLT # Offset: 327
.Ltmp2347:
    0000014c: 	xorl	%eax, %eax
    0000014e: 	cmpq	%rbp, %r13
    00000151: 	je	.Ltmp2348 # Offset: 337
    00000153: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2349:
    00000158: 	movq	%rbx, %rdx
    0000015b: 	movq	(%rbx), %rbx
    0000015e: 	movb	%al, 0x10(%rdx)
    00000161: 	addl	$0x1, %eax
    00000164: 	cmpq	%rbx, %rbp
    00000167: 	jne	.Ltmp2349 # Offset: 359
.Ltmp2348:
    00000169: 	movq	%rbp, %rsi
    0000016c: 	movq	%r13, %rdi
    0000016f: 	callq	_Z18quicksort2_forwardISt14_List_iteratorIaEEvT_S2_ # Offset: 367
    00000174: 	movq	0x10(%rsp), %rsi
    00000179: 	leaq	DATAat0x34184(%rip), %rdx
    00000180: 	movq	%r15, %rdi
    00000183: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 387
    00000188: 	movq	0x8(%rsp), %rcx
    0000018d: 	movl	%r14d, %r9d
    00000190: 	movq	%r15, %r8
    00000193: 	movq	%r12, %rdx
    00000196: 	movq	%rbp, %rsi
    00000199: 	movq	%r13, %rdi
    0000019c: 	callq	_Z15TestSearchArrayISt14_List_iteratorIaEPFbS1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 412
    000001a1: 	movq	0x20(%rsp), %rdi
    000001a6: 	cmpq	0x18(%rsp), %rdi
    000001ab: 	je	.Ltmp2350 # Offset: 427
    000001ad: 	movq	0x30(%rsp), %rax
    000001b2: 	leaq	0x1(%rax), %rsi
    000001b6: 	callq	_ZdlPvm@PLT # Offset: 438
.Ltmp2350:
    000001bb: 	movq	0x48(%rsp), %rax
    000001c0: 	subq	%fs:0x28, %rax
    000001c9: 	jne	.Ltmp2351 # Offset: 457
    000001cb: 	addq	$0x58, %rsp
    000001cf: 	popq	%rbx
    000001d0: 	popq	%rbp
    000001d1: 	popq	%r12
    000001d3: 	popq	%r13
    000001d5: 	popq	%r14
    000001d7: 	popq	%r15
    000001d9: 	retq # Offset: 473
.Ltmp2342:
    000001da: 	testq	%r12, %r12
    000001dd: 	je	.Ltmp2343 # Offset: 477
    000001e3: 	movl	$0x1, %edx
    000001e8: 	jmp	.Ltmp2352 # Offset: 488
.Ltmp2351:
    000001ed: 	callq	__stack_chk_fail@PLT # Offset: 493
    000001f2: 	endbr64
.Ltmp2354:
    000001f6: 	movq	%rax, %rbp
    000001f9: 	jmp	.Ltmp2353 # Offset: 505
    000001fb: 	endbr64
    000001ff: 	jmp	.Ltmp2354 # Offset: 511
    00000201: 	endbr64
    00000205: 	movq	%rax, %rbp
    00000208: 	movq	0x20(%rsp), %rdi
    0000020d: 	leaq	0x30(%rsp), %rax
    00000212: 	cmpq	%rax, %rdi
    00000215: 	je	.Ltmp2355 # Offset: 533
.Ltmp2356:
    00000217: 	movq	0x30(%rsp), %rax
    0000021c: 	leaq	0x1(%rax), %rsi
    00000220: 	callq	_ZdlPvm@PLT # Offset: 544
.Ltmp2355:
    00000225: 	movq	%rbp, %rdi
    00000228: 	callq	_Unwind_Resume@PLT # Offset: 552
.Ltmp2353:
    0000022d: 	movq	0x20(%rsp), %rdi
    00000232: 	cmpq	0x18(%rsp), %rdi
    00000237: 	jne	.Ltmp2356 # Offset: 567
    00000239: 	jmp	.Ltmp2355 # Offset: 569
DWARF CFI Instructions:
    <empty>
End of Function "_Z13TestOneSearchISt14_List_iteratorIaEPFbS1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z16TestOneContainerISt14_List_iteratorIaEEvT_S2_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 332
  State       : disassembled
  Address     : 0x125a0
  Size        : 0x4de
  MaxSize     : 0x4e0
  Offset      : 0x125a0
  Section     : .text
  Orc Section : .local.text._Z16TestOneContainerISt14_List_iteratorIaEEvT_S2_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0331:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdx, %r15
    00000009: 	leaq	DATAat0x3418f(%rip), %rdx
    00000010: 	pushq	%r14
    00000012: 	movq	%rsi, %r14
    00000015: 	movq	%rcx, %rsi
    00000018: 	pushq	%r13
    0000001a: 	movq	%rdi, %r13
    0000001d: 	pushq	%r12
    0000001f: 	movq	%rcx, %r12
    00000022: 	pushq	%rbp
    00000023: 	pushq	%rbx
    00000024: 	subq	$0x38, %rsp
    00000028: 	movq	%fs:0x28, %rax
    00000031: 	movq	%rax, 0x28(%rsp)
    00000036: 	xorl	%eax, %eax
    00000038: 	movq	%rsp, %rbp
    0000003b: 	movq	%rbp, %rdi
    0000003e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 62
    00000043: 	xorl	%r9d, %r9d
    00000046: 	movq	%rbp, %r8
    00000049: 	movq	%r15, %rdx
    0000004c: 	leaq	_Z14std_lowerboundISt14_List_iteratorIaEaET_S2_S2_T0_(%rip), %rcx
    00000053: 	movq	%r14, %rsi
    00000056: 	movq	%r13, %rdi
    00000059: 	callq	_Z13TestOneSearchISt14_List_iteratorIaEPFS1_S1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 89
    0000005e: 	movq	(%rsp), %rdi
    00000062: 	leaq	0x10(%rsp), %rbx
    00000067: 	cmpq	%rbx, %rdi
    0000006a: 	je	.Ltmp2357 # Offset: 106
    0000006c: 	movq	0x10(%rsp), %rax
    00000071: 	leaq	0x1(%rax), %rsi
    00000075: 	callq	_ZdlPvm@PLT # Offset: 117
.Ltmp2357:
    0000007a: 	leaq	DATAat0x341a1(%rip), %rdx
    00000081: 	movq	%r12, %rsi
    00000084: 	movq	%rbp, %rdi
    00000087: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 135
    0000008c: 	xorl	%r9d, %r9d
    0000008f: 	movq	%rbp, %r8
    00000092: 	movq	%r15, %rdx
    00000095: 	leaq	_Z12lower_bound1ISt14_List_iteratorIaEaET_S2_S2_T0_(%rip), %rcx
    0000009c: 	movq	%r14, %rsi
    0000009f: 	movq	%r13, %rdi
    000000a2: 	callq	_Z13TestOneSearchISt14_List_iteratorIaEPFS1_S1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 162
    000000a7: 	movq	(%rsp), %rdi
    000000ab: 	cmpq	%rbx, %rdi
    000000ae: 	je	.Ltmp2358 # Offset: 174
    000000b0: 	movq	0x10(%rsp), %rax
    000000b5: 	leaq	0x1(%rax), %rsi
    000000b9: 	callq	_ZdlPvm@PLT # Offset: 185
.Ltmp2358:
    000000be: 	leaq	DATAat0x341af(%rip), %rdx
    000000c5: 	movq	%r12, %rsi
    000000c8: 	movq	%rbp, %rdi
    000000cb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 203
    000000d0: 	xorl	%r9d, %r9d
    000000d3: 	movq	%rbp, %r8
    000000d6: 	movq	%r15, %rdx
    000000d9: 	leaq	_Z12lower_bound2ISt14_List_iteratorIaEaET_S2_S2_T0_(%rip), %rcx
    000000e0: 	movq	%r14, %rsi
    000000e3: 	movq	%r13, %rdi
    000000e6: 	callq	_Z13TestOneSearchISt14_List_iteratorIaEPFS1_S1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 230
    000000eb: 	movq	(%rsp), %rdi
    000000ef: 	cmpq	%rbx, %rdi
    000000f2: 	je	.Ltmp2359 # Offset: 242
    000000f4: 	movq	0x10(%rsp), %rax
    000000f9: 	leaq	0x1(%rax), %rsi
    000000fd: 	callq	_ZdlPvm@PLT # Offset: 253
.Ltmp2359:
    00000102: 	leaq	DATAat0x341bd(%rip), %rdx
    00000109: 	movq	%r12, %rsi
    0000010c: 	movq	%rbp, %rdi
    0000010f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 271
    00000114: 	xorl	%r9d, %r9d
    00000117: 	movq	%rbp, %r8
    0000011a: 	movq	%r15, %rdx
    0000011d: 	leaq	_Z17lower_bound_recurISt14_List_iteratorIaEaET_S2_S2_T0_(%rip), %rcx
    00000124: 	movq	%r14, %rsi
    00000127: 	movq	%r13, %rdi
    0000012a: 	callq	_Z13TestOneSearchISt14_List_iteratorIaEPFS1_S1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 298
    0000012f: 	movq	(%rsp), %rdi
    00000133: 	cmpq	%rbx, %rdi
    00000136: 	je	.Ltmp2360 # Offset: 310
    00000138: 	movq	0x10(%rsp), %rax
    0000013d: 	leaq	0x1(%rax), %rsi
    00000141: 	callq	_ZdlPvm@PLT # Offset: 321
.Ltmp2360:
    00000146: 	leaq	DATAat0x341d4(%rip), %rdx
    0000014d: 	movq	%r12, %rsi
    00000150: 	movq	%rbp, %rdi
    00000153: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 339
    00000158: 	movq	%rbp, %r8
    0000015b: 	movq	%r15, %rdx
    0000015e: 	movq	%r14, %rsi
    00000161: 	movl	$0x1, %r9d
    00000167: 	leaq	_Z14std_upperboundISt14_List_iteratorIaEaET_S2_S2_T0_(%rip), %rcx
    0000016e: 	movq	%r13, %rdi
    00000171: 	callq	_Z13TestOneSearchISt14_List_iteratorIaEPFS1_S1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 369
    00000176: 	movq	(%rsp), %rdi
    0000017a: 	cmpq	%rbx, %rdi
    0000017d: 	je	.Ltmp2361 # Offset: 381
    0000017f: 	movq	0x10(%rsp), %rax
    00000184: 	leaq	0x1(%rax), %rsi
    00000188: 	callq	_ZdlPvm@PLT # Offset: 392
.Ltmp2361:
    0000018d: 	leaq	DATAat0x341e6(%rip), %rdx
    00000194: 	movq	%r12, %rsi
    00000197: 	movq	%rbp, %rdi
    0000019a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 410
    0000019f: 	movq	%rbp, %r8
    000001a2: 	movq	%r15, %rdx
    000001a5: 	movq	%r14, %rsi
    000001a8: 	movl	$0x1, %r9d
    000001ae: 	leaq	_Z12upper_bound1ISt14_List_iteratorIaEaET_S2_S2_T0_(%rip), %rcx
    000001b5: 	movq	%r13, %rdi
    000001b8: 	callq	_Z13TestOneSearchISt14_List_iteratorIaEPFS1_S1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 440
    000001bd: 	movq	(%rsp), %rdi
    000001c1: 	cmpq	%rbx, %rdi
    000001c4: 	je	.Ltmp2362 # Offset: 452
    000001c6: 	movq	0x10(%rsp), %rax
    000001cb: 	leaq	0x1(%rax), %rsi
    000001cf: 	callq	_ZdlPvm@PLT # Offset: 463
.Ltmp2362:
    000001d4: 	leaq	DATAat0x341f4(%rip), %rdx
    000001db: 	movq	%r12, %rsi
    000001de: 	movq	%rbp, %rdi
    000001e1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 481
    000001e6: 	movq	%rbp, %r8
    000001e9: 	movq	%r15, %rdx
    000001ec: 	movq	%r14, %rsi
    000001ef: 	movl	$0x1, %r9d
    000001f5: 	leaq	_Z12upper_bound2ISt14_List_iteratorIaEaET_S2_S2_T0_(%rip), %rcx
    000001fc: 	movq	%r13, %rdi
    000001ff: 	callq	_Z13TestOneSearchISt14_List_iteratorIaEPFS1_S1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 511
    00000204: 	movq	(%rsp), %rdi
    00000208: 	cmpq	%rbx, %rdi
    0000020b: 	je	.Ltmp2363 # Offset: 523
    0000020d: 	movq	0x10(%rsp), %rax
    00000212: 	leaq	0x1(%rax), %rsi
    00000216: 	callq	_ZdlPvm@PLT # Offset: 534
.Ltmp2363:
    0000021b: 	leaq	DATAat0x34202(%rip), %rdx
    00000222: 	movq	%r12, %rsi
    00000225: 	movq	%rbp, %rdi
    00000228: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 552
    0000022d: 	movq	%rbp, %r8
    00000230: 	movq	%r15, %rdx
    00000233: 	movq	%r14, %rsi
    00000236: 	movl	$0x1, %r9d
    0000023c: 	leaq	_Z17upper_bound_recurISt14_List_iteratorIaEaET_S2_S2_T0_(%rip), %rcx
    00000243: 	movq	%r13, %rdi
    00000246: 	callq	_Z13TestOneSearchISt14_List_iteratorIaEPFS1_S1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 582
    0000024b: 	movq	(%rsp), %rdi
    0000024f: 	cmpq	%rbx, %rdi
    00000252: 	je	.Ltmp2364 # Offset: 594
    00000254: 	movq	0x10(%rsp), %rax
    00000259: 	leaq	0x1(%rax), %rsi
    0000025d: 	callq	_ZdlPvm@PLT # Offset: 605
.Ltmp2364:
    00000262: 	leaq	DATAat0x34219(%rip), %rdx
    00000269: 	movq	%r12, %rsi
    0000026c: 	movq	%rbp, %rdi
    0000026f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 623
    00000274: 	xorl	%r9d, %r9d
    00000277: 	movq	%rbp, %r8
    0000027a: 	movq	%r15, %rdx
    0000027d: 	leaq	_Z16std_binarysearchISt14_List_iteratorIaEaEbT_S2_T0_(%rip), %rcx
    00000284: 	movq	%r14, %rsi
    00000287: 	movq	%r13, %rdi
    0000028a: 	callq	_Z13TestOneSearchISt14_List_iteratorIaEPFbS1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 650
    0000028f: 	movq	(%rsp), %rdi
    00000293: 	cmpq	%rbx, %rdi
    00000296: 	je	.Ltmp2365 # Offset: 662
    00000298: 	movq	0x10(%rsp), %rax
    0000029d: 	leaq	0x1(%rax), %rsi
    000002a1: 	callq	_ZdlPvm@PLT # Offset: 673
.Ltmp2365:
    000002a6: 	leaq	DATAat0x3422d(%rip), %rdx
    000002ad: 	movq	%r12, %rsi
    000002b0: 	movq	%rbp, %rdi
    000002b3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 691
    000002b8: 	xorl	%r9d, %r9d
    000002bb: 	movq	%rbp, %r8
    000002be: 	movq	%r15, %rdx
    000002c1: 	leaq	_Z13binarysearch1ISt14_List_iteratorIaEaEbT_S2_T0_(%rip), %rcx
    000002c8: 	movq	%r14, %rsi
    000002cb: 	movq	%r13, %rdi
    000002ce: 	callq	_Z13TestOneSearchISt14_List_iteratorIaEPFbS1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 718
    000002d3: 	movq	(%rsp), %rdi
    000002d7: 	cmpq	%rbx, %rdi
    000002da: 	je	.Ltmp2366 # Offset: 730
    000002dc: 	movq	0x10(%rsp), %rax
    000002e1: 	leaq	0x1(%rax), %rsi
    000002e5: 	callq	_ZdlPvm@PLT # Offset: 741
.Ltmp2366:
    000002ea: 	leaq	DATAat0x3423d(%rip), %rdx
    000002f1: 	movq	%r12, %rsi
    000002f4: 	movq	%rbp, %rdi
    000002f7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 759
    000002fc: 	xorl	%r9d, %r9d
    000002ff: 	movq	%rbp, %r8
    00000302: 	movq	%r15, %rdx
    00000305: 	leaq	_Z13binarysearch2ISt14_List_iteratorIaEaEbT_S2_T0_(%rip), %rcx
    0000030c: 	movq	%r14, %rsi
    0000030f: 	movq	%r13, %rdi
    00000312: 	callq	_Z13TestOneSearchISt14_List_iteratorIaEPFbS1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 786
    00000317: 	movq	(%rsp), %rdi
    0000031b: 	cmpq	%rbx, %rdi
    0000031e: 	je	.Ltmp2367 # Offset: 798
    00000320: 	movq	0x10(%rsp), %rax
    00000325: 	leaq	0x1(%rax), %rsi
    00000329: 	callq	_ZdlPvm@PLT # Offset: 809
.Ltmp2367:
    0000032e: 	leaq	DATAat0x3424d(%rip), %rdx
    00000335: 	movq	%r12, %rsi
    00000338: 	movq	%rbp, %rdi
    0000033b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 827
    00000340: 	xorl	%r9d, %r9d
    00000343: 	movq	%rbp, %r8
    00000346: 	movq	%r15, %rdx
    00000349: 	leaq	_Z13binarysearch3ISt14_List_iteratorIaEaEbT_S2_T0_(%rip), %rcx
    00000350: 	movq	%r14, %rsi
    00000353: 	movq	%r13, %rdi
    00000356: 	callq	_Z13TestOneSearchISt14_List_iteratorIaEPFbS1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 854
    0000035b: 	movq	(%rsp), %rdi
    0000035f: 	cmpq	%rbx, %rdi
    00000362: 	je	.Ltmp2368 # Offset: 866
    00000364: 	movq	0x10(%rsp), %rax
    00000369: 	leaq	0x1(%rax), %rsi
    0000036d: 	callq	_ZdlPvm@PLT # Offset: 877
.Ltmp2368:
    00000372: 	leaq	DATAat0x3425d(%rip), %rdx
    00000379: 	movq	%r12, %rsi
    0000037c: 	movq	%rbp, %rdi
    0000037f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 895
    00000384: 	xorl	%r9d, %r9d
    00000387: 	movq	%rbp, %r8
    0000038a: 	movq	%r15, %rdx
    0000038d: 	leaq	_Z13binarysearch4ISt14_List_iteratorIaEaEbT_S2_T0_(%rip), %rcx
    00000394: 	movq	%r14, %rsi
    00000397: 	movq	%r13, %rdi
    0000039a: 	callq	_Z13TestOneSearchISt14_List_iteratorIaEPFbS1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 922
    0000039f: 	movq	(%rsp), %rdi
    000003a3: 	cmpq	%rbx, %rdi
    000003a6: 	je	.Ltmp2369 # Offset: 934
    000003a8: 	movq	0x10(%rsp), %rax
    000003ad: 	leaq	0x1(%rax), %rsi
    000003b1: 	callq	_ZdlPvm@PLT # Offset: 945
.Ltmp2369:
    000003b6: 	leaq	DATAat0x3426d(%rip), %rdx
    000003bd: 	movq	%r12, %rsi
    000003c0: 	movq	%rbp, %rdi
    000003c3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 963
    000003c8: 	xorl	%r9d, %r9d
    000003cb: 	movq	%rbp, %r8
    000003ce: 	movq	%r15, %rdx
    000003d1: 	leaq	_Z18binarysearch_recurISt14_List_iteratorIaEaEbT_S2_T0_(%rip), %rcx
    000003d8: 	movq	%r14, %rsi
    000003db: 	movq	%r13, %rdi
    000003de: 	callq	_Z13TestOneSearchISt14_List_iteratorIaEPFbS1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 990
    000003e3: 	movq	(%rsp), %rdi
    000003e7: 	cmpq	%rbx, %rdi
    000003ea: 	je	.Ltmp2370 # Offset: 1002
    000003ec: 	movq	0x10(%rsp), %rax
    000003f1: 	leaq	0x1(%rax), %rsi
    000003f5: 	callq	_ZdlPvm@PLT # Offset: 1013
.Ltmp2370:
    000003fa: 	movq	%rbp, %rdi
    000003fd: 	leaq	DATAat0x34286(%rip), %rdx
    00000404: 	movq	%r12, %rsi
    00000407: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1031
    0000040c: 	movq	%rbp, %rdi
    0000040f: 	callq	_Z9summarizeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1039
    00000414: 	movq	(%rsp), %rdi
    00000418: 	cmpq	%rbx, %rdi
    0000041b: 	je	.Ltmp2371 # Offset: 1051
    0000041d: 	movq	0x10(%rsp), %rax
    00000422: 	leaq	0x1(%rax), %rsi
    00000426: 	callq	_ZdlPvm@PLT # Offset: 1062
.Ltmp2371:
    0000042b: 	movq	0x28(%rsp), %rax
    00000430: 	subq	%fs:0x28, %rax
    00000439: 	jne	.Ltmp2372 # Offset: 1081
    0000043b: 	addq	$0x38, %rsp
    0000043f: 	popq	%rbx
    00000440: 	popq	%rbp
    00000441: 	popq	%r12
    00000443: 	popq	%r13
    00000445: 	popq	%r14
    00000447: 	popq	%r15
    00000449: 	retq # Offset: 1097
.Ltmp2372:
    0000044a: 	callq	__stack_chk_fail@PLT # Offset: 1098
    0000044f: 	endbr64
.Ltmp2374:
    00000453: 	movq	%rax, %rbp
    00000456: 	jmp	.Ltmp2373 # Offset: 1110
    00000458: 	endbr64
    0000045c: 	jmp	.Ltmp2374 # Offset: 1116
    0000045e: 	endbr64
    00000462: 	jmp	.Ltmp2374 # Offset: 1122
    00000464: 	endbr64
    00000468: 	jmp	.Ltmp2374 # Offset: 1128
    0000046a: 	endbr64
    0000046e: 	jmp	.Ltmp2374 # Offset: 1134
    00000470: 	endbr64
    00000474: 	jmp	.Ltmp2374 # Offset: 1140
    00000476: 	endbr64
    0000047a: 	jmp	.Ltmp2374 # Offset: 1146
.Ltmp2373:
    0000047c: 	movq	(%rsp), %rdi
    00000480: 	cmpq	%rbx, %rdi
    00000483: 	je	.Ltmp2375 # Offset: 1155
.Ltmp2377:
    00000485: 	movq	0x10(%rsp), %rax
    0000048a: 	leaq	0x1(%rax), %rsi
    0000048e: 	callq	_ZdlPvm@PLT # Offset: 1166
.Ltmp2375:
    00000493: 	movq	%rbp, %rdi
    00000496: 	callq	_Unwind_Resume@PLT # Offset: 1174
    0000049b: 	endbr64
    0000049f: 	jmp	.Ltmp2374 # Offset: 1183
    000004a1: 	endbr64
    000004a5: 	jmp	.Ltmp2374 # Offset: 1189
    000004a7: 	endbr64
    000004ab: 	jmp	.Ltmp2374 # Offset: 1195
    000004ad: 	endbr64
    000004b1: 	jmp	.Ltmp2374 # Offset: 1201
    000004b3: 	endbr64
    000004b7: 	jmp	.Ltmp2374 # Offset: 1207
    000004b9: 	endbr64
    000004bd: 	movq	%rax, %rbp
    000004c0: 	jmp	.Ltmp2376 # Offset: 1216
    000004c2: 	endbr64
    000004c6: 	jmp	.Ltmp2374 # Offset: 1222
    000004c8: 	endbr64
    000004cc: 	jmp	.Ltmp2374 # Offset: 1228
.Ltmp2376:
    000004ce: 	movq	(%rsp), %rdi
    000004d2: 	leaq	0x10(%rsp), %rax
    000004d7: 	cmpq	%rax, %rdi
    000004da: 	jne	.Ltmp2377 # Offset: 1242
    000004dc: 	jmp	.Ltmp2375 # Offset: 1244
DWARF CFI Instructions:
    <empty>
End of Function "_Z16TestOneContainerISt14_List_iteratorIaEEvT_S2_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z24binarysearch_recur_innerISt14_List_iteratorIaEalEbT_T0_T1_" after disassembly {
  Number      : 333
  State       : disassembled
  Address     : 0x12a80
  Size        : 0xb3
  MaxSize     : 0xc0
  Offset      : 0x12a80
  Section     : .text
  Orc Section : .local.text._Z24binarysearch_recur_innerISt14_List_iteratorIaEalEbT_T0_T1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0332:
    00000000: 	endbr64
    00000004: 	testq	%rdx, %rdx
    00000007: 	je	.Ltmp2378 # Offset: 7
    00000009: 	movq	%rdx, %r8
    0000000c: 	movq	%rdi, %rax
    0000000f: 	shrq	$0x3f, %r8
    00000013: 	addq	%rdx, %r8
    00000016: 	sarq	%r8
    00000019: 	cmpq	$0x1, %rdx
    0000001d: 	jle	.Ltmp2379 # Offset: 29
    0000001f: 	leaq	-0x1(%r8), %rcx
    00000023: 	testq	%r8, %r8
    00000026: 	je	.Ltmp2380 # Offset: 38
    00000028: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2381:
    00000030: 	movq	(%rax), %rax
    00000033: 	subq	$0x1, %rcx
    00000037: 	jae	.Ltmp2381 # Offset: 55
.Ltmp2380:
    00000039: 	cmpb	%sil, 0x10(%rax)
    0000003d: 	jl	.Ltmp2382 # Offset: 61
    0000003f: 	movl	$0x1, %eax
    00000044: 	jg	.Ltmp2383 # Offset: 68
    00000046: 	retq # Offset: 70
    00000047: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2378:
    00000050: 	xorl	%eax, %eax
    00000052: 	retq # Offset: 82
    00000053: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2379:
    00000058: 	leaq	0x1(%r8), %rcx
    0000005c: 	testq	%r8, %r8
    0000005f: 	je	.Ltmp2380 # Offset: 95
    00000061: 	nopl	(%rax) # Size: 7
.Ltmp2384:
    00000068: 	addq	$0x1, %rcx
    0000006c: 	movq	0x8(%rax), %rax
    00000070: 	cmpq	$0x1, %rcx
    00000074: 	je	.Ltmp2380 # Offset: 116
    00000076: 	addq	$0x1, %rcx
    0000007a: 	movq	0x8(%rax), %rax
    0000007e: 	cmpq	$0x1, %rcx
    00000082: 	jne	.Ltmp2384 # Offset: 130
    00000084: 	jmp	.Ltmp2380 # Offset: 132
    00000086: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2383:
    00000090: 	movsbl	%sil, %esi
    00000094: 	movq	%r8, %rdx
    00000097: 	jmp	.LBB0332 # Offset: 151
    0000009c: 	nopl	(%rax) # Size: 4
.Ltmp2382:
    000000a0: 	addq	$0x1, %r8
    000000a4: 	movq	(%rax), %rdi
    000000a7: 	movsbl	%sil, %esi
    000000ab: 	subq	%r8, %rdx
    000000ae: 	jmp	.LBB0332 # Offset: 174
DWARF CFI Instructions:
    <empty>
End of Function "_Z24binarysearch_recur_innerISt14_List_iteratorIaEalEbT_T0_T1_"

Binary Function "_Z18binarysearch_recurISt14_List_iteratorIaEaEbT_S2_T0_" after disassembly {
  Number      : 334
  State       : disassembled
  Address     : 0x12b40
  Size        : 0x1bc
  MaxSize     : 0x1c0
  Offset      : 0x12b40
  Section     : .text
  Orc Section : .local.text._Z18binarysearch_recurISt14_List_iteratorIaEaEbT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0333:
    00000000: 	endbr64
    00000004: 	cmpq	%rdi, %rsi
    00000007: 	je	.Ltmp2385 # Offset: 7
    0000000d: 	pushq	%rbp
    0000000e: 	movl	%edx, %r8d
    00000011: 	movq	%rdi, %r9
    00000014: 	movq	%rdi, %rdx
    00000017: 	xorl	%eax, %eax
    00000019: 	nopl	(%rax) # Size: 7
.Ltmp2386:
    00000020: 	movq	(%rdx), %rdx
    00000023: 	movq	%rax, %rcx
    00000026: 	addq	$0x1, %rax
    0000002a: 	cmpq	%rdx, %rsi
    0000002d: 	jne	.Ltmp2386 # Offset: 45
    0000002f: 	movq	%rax, %r10
    00000032: 	sarq	%r10
    00000035: 	cmpq	$0x1, %rax
    00000039: 	je	.Ltmp2387 # Offset: 57
    0000003f: 	leaq	-0x1(%r10), %rdx
    00000043: 	testq	%r10, %r10
    00000046: 	je	.Ltmp2388 # Offset: 70
    0000004c: 	movq	%rdi, %rsi
    0000004f: 	nop # Size: 1
.Ltmp2389:
    00000050: 	movq	(%rsi), %rsi
    00000053: 	subq	$0x1, %rdx
    00000057: 	jae	.Ltmp2389 # Offset: 87
    00000059: 	movsbl	%r8b, %ebp
    0000005d: 	cmpb	0x10(%rsi), %r8b
    00000061: 	jle	.Ltmp2390 # Offset: 97
    00000067: 	movq	(%rsi), %rax
    0000006a: 	movq	%rax, %rdi
    0000006d: 	subq	%r10, %rcx
    00000070: 	je	.Ltmp2391 # Offset: 112
.Ltmp2405:
    00000076: 	movq	%rcx, %r9
    00000079: 	shrq	$0x3f, %r9
    0000007d: 	addq	%rcx, %r9
    00000080: 	sarq	%r9
    00000083: 	cmpq	$0x1, %rcx
    00000087: 	jle	.Ltmp2392 # Offset: 135
    0000008d: 	leaq	-0x1(%r9), %rdx
    00000091: 	testq	%r9, %r9
    00000094: 	je	.Ltmp2393 # Offset: 148
    00000096: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2394:
    000000a0: 	movq	(%rax), %rax
    000000a3: 	subq	$0x1, %rdx
    000000a7: 	jae	.Ltmp2394 # Offset: 167
.Ltmp2393:
    000000a9: 	cmpb	0x10(%rax), %r8b
    000000ad: 	jg	.Ltmp2395 # Offset: 173
    000000b3: 	movl	$0x1, %r11d
    000000b9: 	jge	.Ltmp2396 # Offset: 185
    000000bb: 	movl	%ebp, %esi
    000000bd: 	movq	%r9, %rdx
    000000c0: 	popq	%rbp
    000000c1: 	jmp	_Z24binarysearch_recur_innerISt14_List_iteratorIaEalEbT_T0_T1_ # TAILCALL  # Offset: 193
    000000c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2387:
    000000d0: 	movsbl	%r8b, %ebp
    000000d4: 	cmpb	0x10(%rdi), %r8b
    000000d8: 	jg	.Ltmp2391 # Offset: 216
    000000da: 	movl	$0x1, %r11d
    000000e0: 	jl	.Ltmp2397 # Offset: 224
.Ltmp2396:
    000000e2: 	movl	%r11d, %eax
    000000e5: 	popq	%rbp
    000000e6: 	retq # Offset: 230
    000000e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2397:
    000000f0: 	xorl	%r11d, %r11d
    000000f3: 	testq	%r10, %r10
    000000f6: 	je	.Ltmp2396 # Offset: 246
.Ltmp2406:
    000000f8: 	movq	%rax, %rdx
    000000fb: 	sarq	$0x2, %rdx
    000000ff: 	cmpq	$0x3, %rax
    00000103: 	jle	.Ltmp2398 # Offset: 259
    00000105: 	leaq	-0x1(%rdx), %rax
    00000109: 	testq	%rdx, %rdx
    0000010c: 	je	.Ltmp2399 # Offset: 268
    0000010e: 	nop # Size: 2
.Ltmp2400:
    00000110: 	movq	(%r9), %r9
    00000113: 	subq	$0x1, %rax
    00000117: 	jae	.Ltmp2400 # Offset: 279
.Ltmp2399:
    00000119: 	cmpb	0x10(%r9), %r8b
    0000011d: 	jg	.Ltmp2401 # Offset: 285
    0000011f: 	movl	$0x1, %r11d
    00000125: 	jge	.Ltmp2396 # Offset: 293
    00000127: 	movl	%ebp, %esi
    00000129: 	popq	%rbp
    0000012a: 	jmp	_Z24binarysearch_recur_innerISt14_List_iteratorIaEalEbT_T0_T1_ # TAILCALL  # Offset: 298
    0000012f: 	nop # Size: 1
.Ltmp2385:
    00000130: 	xorl	%eax, %eax
    00000132: 	retq # Offset: 306
.Ltmp2391:
    00000133: 	xorl	%r11d, %r11d
    00000136: 	jmp	.Ltmp2396 # Offset: 310
.Ltmp2398:
    00000138: 	testq	%rdx, %rdx
    0000013b: 	je	.Ltmp2399 # Offset: 315
.Ltmp2402:
    0000013d: 	jmp	.Ltmp2402 # Offset: 317
    0000013f: 	nop # Size: 1
.Ltmp2392:
    00000140: 	leaq	0x1(%r9), %rdx
    00000144: 	testq	%r9, %r9
    00000147: 	je	.Ltmp2393 # Offset: 327
    0000014d: 	nopl	(%rax) # Size: 3
.Ltmp2403:
    00000150: 	addq	$0x1, %rdx
    00000154: 	movq	0x8(%rax), %rax
    00000158: 	cmpq	$0x1, %rdx
    0000015c: 	jne	.Ltmp2403 # Offset: 348
    0000015e: 	jmp	.Ltmp2393 # Offset: 350
.Ltmp2388:
    00000163: 	movsbl	%r8b, %ebp
    00000167: 	cmpb	0x10(%rdi), %r8b
    0000016b: 	jle	.Ltmp2404 # Offset: 363
    0000016d: 	movq	(%rdi), %rax
    00000170: 	movq	%rax, %rdi
    00000173: 	jmp	.Ltmp2405 # Offset: 371
.Ltmp2390:
    00000178: 	movl	$0x1, %r11d
    0000017e: 	jge	.Ltmp2396 # Offset: 382
    00000184: 	jmp	.Ltmp2406 # Offset: 388
.Ltmp2401:
    00000189: 	addq	$0x1, %rdx
    0000018d: 	movq	(%r9), %rdi
    00000190: 	movl	%ebp, %esi
    00000192: 	popq	%rbp
    00000193: 	subq	%rdx, %r10
    00000196: 	movq	%r10, %rdx
    00000199: 	jmp	_Z24binarysearch_recur_innerISt14_List_iteratorIaEalEbT_T0_T1_ # TAILCALL  # Offset: 409
.Ltmp2395:
    0000019e: 	addq	$0x1, %r9
    000001a2: 	movq	(%rax), %rdi
    000001a5: 	movl	%ebp, %esi
    000001a7: 	popq	%rbp
    000001a8: 	subq	%r9, %rcx
    000001ab: 	movq	%rcx, %rdx
    000001ae: 	jmp	_Z24binarysearch_recur_innerISt14_List_iteratorIaEalEbT_T0_T1_ # TAILCALL  # Offset: 430
.Ltmp2404:
    000001b3: 	setge	%r11b
    000001b7: 	jmp	.Ltmp2396 # Offset: 439
DWARF CFI Instructions:
    <empty>
End of Function "_Z18binarysearch_recurISt14_List_iteratorIaEaEbT_S2_T0_"

Binary Function "_Z18quicksort2_forwardISt18_Fwd_list_iteratorIaEEvT_S2_" after disassembly {
  Number      : 335
  State       : disassembled
  Address     : 0x12d00
  Size        : 0x117
  MaxSize     : 0x120
  Offset      : 0x12d00
  Section     : .text
  Orc Section : .local.text._Z18quicksort2_forwardISt18_Fwd_list_iteratorIaEEvT_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0334:
    00000000: 	endbr64
    00000004: 	cmpq	%rdi, %rsi
    00000007: 	je	.Ltmp2407 # Offset: 7
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rsi, %rbp
    00000016: 	pushq	%rbx
.Ltmp2415:
    00000017: 	movq	(%r12), %rbx
    0000001b: 	cmpq	%rbp, %rbx
    0000001e: 	je	.Ltmp2408 # Offset: 30
    00000024: 	movq	(%rbx), %rax
    00000027: 	movzbl	0x8(%rbx), %esi
    0000002b: 	movzbl	0x8(%r12), %edx
    00000031: 	cmpq	%rbp, %rax
    00000034: 	je	.Ltmp2409 # Offset: 52
    0000003a: 	cmpb	%dl, %sil
    0000003d: 	jge	.Ltmp2410 # Offset: 61
    0000003f: 	movb	%sil, 0x8(%r12)
    00000044: 	movl	%edx, %esi
    00000046: 	movb	%dl, 0x8(%rbx)
.Ltmp2410:
    00000049: 	movzbl	0x8(%rax), %edx
    0000004d: 	cmpb	%dl, %sil
    00000050: 	jle	.Ltmp2411 # Offset: 80
    00000052: 	movb	%dl, 0x8(%rbx)
    00000055: 	movb	%sil, 0x8(%rax)
    00000059: 	movzbl	0x8(%rbx), %esi
    0000005d: 	movzbl	0x8(%r12), %edx
    00000063: 	cmpb	%dl, %sil
    00000066: 	jge	.Ltmp2411 # Offset: 102
    00000068: 	movb	%dl, 0x8(%rbx)
    0000006b: 	movb	%sil, 0x8(%r12)
    00000070: 	movzbl	0x8(%rbx), %esi
.Ltmp2411:
    00000074: 	cmpq	%rbp, (%rax)
    00000077: 	je	.Ltmp2408 # Offset: 119
    00000079: 	movq	(%rbx), %rax
    0000007c: 	cmpq	%rax, %rbp
    0000007f: 	je	.Ltmp2412 # Offset: 127
    00000081: 	movl	$0x2, %ecx
    00000086: 	movl	$0x1, %edi
    0000008b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2414:
    00000090: 	movzbl	0x8(%rax), %edx
    00000094: 	cmpb	%sil, %dl
    00000097: 	jge	.Ltmp2413 # Offset: 151
    00000099: 	movzbl	0x8(%rbx), %r8d
    0000009e: 	addq	$0x1, %rdi
    000000a2: 	addq	$0x1, %rcx
    000000a6: 	movb	%r8b, 0x8(%rax)
    000000aa: 	movb	%dl, 0x8(%rbx)
    000000ad: 	movq	(%rax), %rax
    000000b0: 	movq	(%rbx), %rbx
    000000b3: 	cmpq	%rbp, %rax
    000000b6: 	jne	.Ltmp2414 # Offset: 182
    000000b8: 	subq	%rdi, %rcx
    000000bb: 	cmpq	%rdi, %rcx
    000000be: 	jae	.Ltmp2412 # Offset: 190
.Ltmp2416:
    000000c0: 	movq	%rbp, %rsi
    000000c3: 	movq	%rbx, %rdi
    000000c6: 	movq	%rbx, %rbp
    000000c9: 	callq	_Z18quicksort2_forwardISt18_Fwd_list_iteratorIaEEvT_S2_ # Offset: 201
.Ltmp2417:
    000000ce: 	cmpq	%r12, %rbp
    000000d1: 	jne	.Ltmp2415 # Offset: 209
.Ltmp2408:
    000000d7: 	popq	%rbx
    000000d8: 	popq	%rbp
    000000d9: 	popq	%r12
    000000db: 	retq # Offset: 219
    000000dc: 	nopl	(%rax) # Size: 4
.Ltmp2413:
    000000e0: 	movq	(%rax), %rax
    000000e3: 	addq	$0x1, %rcx
    000000e7: 	cmpq	%rbp, %rax
    000000ea: 	jne	.Ltmp2414 # Offset: 234
    000000ec: 	subq	%rdi, %rcx
    000000ef: 	cmpq	%rdi, %rcx
    000000f2: 	jb	.Ltmp2416 # Offset: 242
.Ltmp2412:
    000000f4: 	movq	%r12, %rdi
    000000f7: 	movq	%rbx, %rsi
    000000fa: 	movq	%rbx, %r12
    000000fd: 	callq	_Z18quicksort2_forwardISt18_Fwd_list_iteratorIaEEvT_S2_ # Offset: 253
    00000102: 	jmp	.Ltmp2417 # Offset: 258
.Ltmp2409:
    00000104: 	cmpb	%dl, %sil
    00000107: 	jge	.Ltmp2408 # Offset: 263
    00000109: 	movb	%dl, 0x8(%rbx)
    0000010c: 	movb	%sil, 0x8(%r12)
    00000111: 	popq	%rbx
    00000112: 	popq	%rbp
    00000113: 	popq	%r12
    00000115: 	retq # Offset: 277
.Ltmp2407:
    00000116: 	retq # Offset: 278
DWARF CFI Instructions:
    <empty>
End of Function "_Z18quicksort2_forwardISt18_Fwd_list_iteratorIaEEvT_S2_"

Binary Function "_Z13TestOneSearchISt18_Fwd_list_iteratorIaEPFS1_S1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1(*2)" after disassembly {
  All names   : _Z13TestOneSearchISt18_Fwd_list_iteratorIaEPFS1_S1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1
                _Z13TestOneSearchISt18_Fwd_list_iteratorIaEPFS1_S1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/binary_search.cpp/1
  Number      : 336
  State       : disassembled
  Address     : 0x12e20
  Size        : 0x23b
  MaxSize     : 0x240
  Offset      : 0x12e20
  Section     : .text
  Orc Section : .local.text._Z13TestOneSearchISt18_Fwd_list_iteratorIaEPFS1_S1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0335:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	movq	%rsi, %r14
    00000007: 	pushq	%r13
    00000009: 	pushq	%r12
    0000000b: 	movq	%rdx, %r12
    0000000e: 	pushq	%rbp
    0000000f: 	movq	%rdi, %rbp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdi, %rbx
    00000016: 	subq	$0x58, %rsp
    0000001a: 	movq	%rcx, 0x8(%rsp)
    0000001f: 	movq	%r8, 0x10(%rsp)
    00000024: 	movq	%fs:0x28, %rax
    0000002d: 	movq	%rax, 0x48(%rsp)
    00000032: 	xorl	%eax, %eax
    00000034: 	movq	%rdi, %rax
    00000037: 	testq	%rdi, %rdi
    0000003a: 	je	.Ltmp2418 # Offset: 58
    0000003c: 	nopl	(%rax) # Size: 4
.Ltmp2419:
    00000040: 	movq	%rax, %rdx
    00000043: 	movq	(%rax), %rax
    00000046: 	movb	$0x5, 0x8(%rdx)
    0000004a: 	testq	%rax, %rax
    0000004d: 	jne	.Ltmp2419 # Offset: 77
.Ltmp2418:
    0000004f: 	movq	0x10(%rsp), %rsi
    00000054: 	leaq	0x20(%rsp), %r15
    00000059: 	leaq	DATAat0x34160(%rip), %rdx
    00000060: 	movzbl	%r9b, %r13d
    00000064: 	movq	%r15, %rdi
    00000067: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 103
    0000006c: 	movq	0x8(%rsp), %rcx
    00000071: 	movl	%r13d, %r9d
    00000074: 	movq	%r15, %r8
    00000077: 	movq	%r12, %rdx
    0000007a: 	movq	%r14, %rsi
    0000007d: 	movq	%rbp, %rdi
    00000080: 	callq	"_Z15TestSearchArrayISt18_Fwd_list_iteratorIaEPFS1_S1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1" # Offset: 128
    00000085: 	movq	0x20(%rsp), %rdi
    0000008a: 	leaq	0x30(%rsp), %rax
    0000008f: 	movq	%rax, 0x18(%rsp)
    00000094: 	cmpq	%rax, %rdi
    00000097: 	je	.Ltmp2420 # Offset: 151
    00000099: 	movq	0x30(%rsp), %rax
    0000009e: 	leaq	0x1(%rax), %rsi
    000000a2: 	callq	_ZdlPvm@PLT # Offset: 162
.Ltmp2420:
    000000a7: 	cmpq	$0x9, %r12
    000000ab: 	jbe	.Ltmp2421 # Offset: 171
    000000b1: 	movabsq	$-0x3333333333333333, %rdx
    000000bb: 	movq	%r12, %rax
    000000be: 	mulq	%rdx
    000000c1: 	shrq	$0x3, %rdx
.Ltmp2431:
    000000c5: 	movq	%rbp, %rsi
    000000c8: 	xorl	%ecx, %ecx
    000000ca: 	xorl	%r8d, %r8d
    000000cd: 	cmpq	$0x0, %r12
    000000d1: 	jbe	.Ltmp2422 # Offset: 209
    000000d3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2425:
    000000d8: 	xorl	%eax, %eax
    000000da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2424:
    000000e0: 	movq	%rsi, %rdi
    000000e3: 	addq	$0x1, %rax
    000000e7: 	movq	(%rsi), %rsi
    000000ea: 	addq	$0x1, %rcx
    000000ee: 	movb	%r8b, 0x8(%rdi)
    000000f2: 	cmpq	%rdx, %rax
    000000f5: 	jae	.Ltmp2423 # Offset: 245
    000000f7: 	cmpq	%rcx, %r12
    000000fa: 	ja	.Ltmp2424 # Offset: 250
.Ltmp2423:
    000000fc: 	addl	$0x1, %r8d
    00000100: 	cmpq	%rcx, %r12
    00000103: 	ja	.Ltmp2425 # Offset: 259
.Ltmp2422:
    00000105: 	movq	0x10(%rsp), %rsi
    0000010a: 	leaq	DATAat0x3416e(%rip), %rdx
    00000111: 	movq	%r15, %rdi
    00000114: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 276
    00000119: 	movq	0x8(%rsp), %rcx
    0000011e: 	movl	%r13d, %r9d
    00000121: 	movq	%r15, %r8
    00000124: 	movq	%r12, %rdx
    00000127: 	movq	%r14, %rsi
    0000012a: 	movq	%rbp, %rdi
    0000012d: 	callq	"_Z15TestSearchArrayISt18_Fwd_list_iteratorIaEPFS1_S1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1" # Offset: 301
    00000132: 	movq	0x20(%rsp), %rdi
    00000137: 	cmpq	0x18(%rsp), %rdi
    0000013c: 	je	.Ltmp2426 # Offset: 316
    0000013e: 	movq	0x30(%rsp), %rax
    00000143: 	leaq	0x1(%rax), %rsi
    00000147: 	callq	_ZdlPvm@PLT # Offset: 327
.Ltmp2426:
    0000014c: 	xorl	%eax, %eax
    0000014e: 	testq	%rbp, %rbp
    00000151: 	je	.Ltmp2427 # Offset: 337
    00000153: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2428:
    00000158: 	movq	%rbx, %rdx
    0000015b: 	movq	(%rbx), %rbx
    0000015e: 	movb	%al, 0x8(%rdx)
    00000161: 	addl	$0x1, %eax
    00000164: 	testq	%rbx, %rbx
    00000167: 	jne	.Ltmp2428 # Offset: 359
.Ltmp2427:
    00000169: 	movq	%r14, %rsi
    0000016c: 	movq	%rbp, %rdi
    0000016f: 	callq	_Z18quicksort2_forwardISt18_Fwd_list_iteratorIaEEvT_S2_ # Offset: 367
    00000174: 	movq	0x10(%rsp), %rsi
    00000179: 	leaq	DATAat0x34184(%rip), %rdx
    00000180: 	movq	%r15, %rdi
    00000183: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 387
    00000188: 	movq	0x8(%rsp), %rcx
    0000018d: 	movl	%r13d, %r9d
    00000190: 	movq	%r15, %r8
    00000193: 	movq	%r12, %rdx
    00000196: 	movq	%r14, %rsi
    00000199: 	movq	%rbp, %rdi
    0000019c: 	callq	"_Z15TestSearchArrayISt18_Fwd_list_iteratorIaEPFS1_S1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1" # Offset: 412
    000001a1: 	movq	0x20(%rsp), %rdi
    000001a6: 	cmpq	0x18(%rsp), %rdi
    000001ab: 	je	.Ltmp2429 # Offset: 427
    000001ad: 	movq	0x30(%rsp), %rax
    000001b2: 	leaq	0x1(%rax), %rsi
    000001b6: 	callq	_ZdlPvm@PLT # Offset: 438
.Ltmp2429:
    000001bb: 	movq	0x48(%rsp), %rax
    000001c0: 	subq	%fs:0x28, %rax
    000001c9: 	jne	.Ltmp2430 # Offset: 457
    000001cb: 	addq	$0x58, %rsp
    000001cf: 	popq	%rbx
    000001d0: 	popq	%rbp
    000001d1: 	popq	%r12
    000001d3: 	popq	%r13
    000001d5: 	popq	%r14
    000001d7: 	popq	%r15
    000001d9: 	retq # Offset: 473
.Ltmp2421:
    000001da: 	testq	%r12, %r12
    000001dd: 	je	.Ltmp2422 # Offset: 477
    000001e3: 	movl	$0x1, %edx
    000001e8: 	jmp	.Ltmp2431 # Offset: 488
.Ltmp2430:
    000001ed: 	callq	__stack_chk_fail@PLT # Offset: 493
    000001f2: 	endbr64
.Ltmp2433:
    000001f6: 	movq	%rax, %rbp
    000001f9: 	jmp	.Ltmp2432 # Offset: 505
    000001fb: 	endbr64
    000001ff: 	jmp	.Ltmp2433 # Offset: 511
    00000201: 	endbr64
    00000205: 	movq	%rax, %rbp
    00000208: 	movq	0x20(%rsp), %rdi
    0000020d: 	leaq	0x30(%rsp), %rax
    00000212: 	cmpq	%rax, %rdi
    00000215: 	je	.Ltmp2434 # Offset: 533
.Ltmp2435:
    00000217: 	movq	0x30(%rsp), %rax
    0000021c: 	leaq	0x1(%rax), %rsi
    00000220: 	callq	_ZdlPvm@PLT # Offset: 544
.Ltmp2434:
    00000225: 	movq	%rbp, %rdi
    00000228: 	callq	_Unwind_Resume@PLT # Offset: 552
.Ltmp2432:
    0000022d: 	movq	0x20(%rsp), %rdi
    00000232: 	cmpq	0x18(%rsp), %rdi
    00000237: 	jne	.Ltmp2435 # Offset: 567
    00000239: 	jmp	.Ltmp2434 # Offset: 569
DWARF CFI Instructions:
    <empty>
End of Function "_Z13TestOneSearchISt18_Fwd_list_iteratorIaEPFS1_S1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1(*2)"

Binary Function "_Z23lower_bound_recur_innerISt18_Fwd_list_iteratorIaEalET_S2_T0_T1_" after disassembly {
  Number      : 337
  State       : disassembled
  Address     : 0x13060
  Size        : 0x11a
  MaxSize     : 0x120
  Offset      : 0x13060
  Section     : .text
  Orc Section : .local.text._Z23lower_bound_recur_innerISt18_Fwd_list_iteratorIaEalET_S2_T0_T1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0336:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	testq	%rdx, %rdx
    0000000a: 	je	.Ltmp2436 # Offset: 10
    00000010: 	movq	%rdx, %r8
    00000013: 	subq	$0x8, %rsp
    00000017: 	movl	%esi, %r9d
    0000001a: 	movq	%rdi, %r10
    0000001d: 	shrq	$0x3f, %r8
    00000021: 	addq	%rdx, %r8
    00000024: 	sarq	%r8
    00000027: 	leaq	-0x1(%r8), %rcx
    0000002b: 	je	.Ltmp2437 # Offset: 43
    0000002d: 	movq	%rdi, %rsi
.Ltmp2438:
    00000030: 	movq	(%rsi), %rsi
    00000033: 	subq	$0x1, %rcx
    00000037: 	jae	.Ltmp2438 # Offset: 55
    00000039: 	cmpb	0x8(%rsi), %r9b
    0000003d: 	jle	.Ltmp2439 # Offset: 61
.Ltmp2449:
    0000003f: 	movq	(%rsi), %rax
    00000042: 	addq	$0x1, %r8
    00000046: 	movq	%rax, %rdi
    00000049: 	subq	%r8, %rdx
    0000004c: 	je	.Ltmp2440 # Offset: 76
    0000004e: 	movq	%rdx, %r8
    00000051: 	shrq	$0x3f, %r8
    00000055: 	addq	%rdx, %r8
    00000058: 	sarq	%r8
    0000005b: 	leaq	-0x1(%r8), %rcx
    0000005f: 	je	.Ltmp2441 # Offset: 95
    00000061: 	nopl	(%rax) # Size: 7
.Ltmp2442:
    00000068: 	movq	(%rax), %rax
    0000006b: 	subq	$0x1, %rcx
    0000006f: 	jae	.Ltmp2442 # Offset: 111
.Ltmp2441:
    00000071: 	movsbl	%r9b, %esi
    00000075: 	cmpb	0x8(%rax), %r9b
    00000079: 	jle	.Ltmp2443 # Offset: 121
    0000007b: 	addq	$0x1, %r8
    0000007f: 	movq	(%rax), %rdi
    00000082: 	subq	%r8, %rdx
    00000085: 	callq	_Z23lower_bound_recur_innerISt18_Fwd_list_iteratorIaEalET_S2_T0_T1_ # Offset: 133
.Ltmp2440:
    0000008a: 	addq	$0x8, %rsp
    0000008e: 	retq # Offset: 142
    0000008f: 	nop # Size: 1
.Ltmp2436:
    00000090: 	retq # Offset: 144
    00000091: 	nopl	(%rax) # Size: 7
.Ltmp2437:
    00000098: 	cmpb	0x8(%rdi), %sil
    0000009c: 	jg	.Ltmp2444 # Offset: 156
.Ltmp2448:
    0000009e: 	movq	%r10, %rax
    000000a1: 	addq	$0x8, %rsp
    000000a5: 	retq # Offset: 165
    000000a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2439:
    000000b0: 	leaq	0x3(%rdx), %rax
    000000b4: 	testq	%rdx, %rdx
    000000b7: 	cmovsq	%rax, %rdx
    000000bb: 	sarq	$0x2, %rdx
    000000bf: 	leaq	-0x1(%rdx), %rax
    000000c3: 	je	.Ltmp2445 # Offset: 195
    000000c5: 	nopl	(%rax) # Size: 3
.Ltmp2446:
    000000c8: 	movq	(%r10), %r10
    000000cb: 	subq	$0x1, %rax
    000000cf: 	jae	.Ltmp2446 # Offset: 207
.Ltmp2445:
    000000d1: 	movsbl	%r9b, %esi
    000000d5: 	cmpb	0x8(%r10), %r9b
    000000d9: 	jle	.Ltmp2447 # Offset: 217
    000000db: 	leaq	0x1(%rdx), %rax
    000000df: 	movq	(%r10), %rdi
    000000e2: 	movq	%r8, %rdx
    000000e5: 	subq	%rax, %rdx
    000000e8: 	callq	_Z23lower_bound_recur_innerISt18_Fwd_list_iteratorIaEalET_S2_T0_T1_ # Offset: 232
    000000ed: 	movq	%rax, %r10
    000000f0: 	jmp	.Ltmp2448 # Offset: 240
    000000f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2443:
    000000f8: 	movq	%r8, %rdx
    000000fb: 	callq	_Z23lower_bound_recur_innerISt18_Fwd_list_iteratorIaEalET_S2_T0_T1_ # Offset: 251
    00000100: 	jmp	.Ltmp2440 # Offset: 256
    00000102: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2447:
    00000108: 	callq	_Z23lower_bound_recur_innerISt18_Fwd_list_iteratorIaEalET_S2_T0_T1_ # Offset: 264
    0000010d: 	movq	%rax, %r10
    00000110: 	jmp	.Ltmp2448 # Offset: 272
.Ltmp2444:
    00000112: 	movq	%rdi, %rsi
    00000115: 	jmp	.Ltmp2449 # Offset: 277
DWARF CFI Instructions:
    <empty>
End of Function "_Z23lower_bound_recur_innerISt18_Fwd_list_iteratorIaEalET_S2_T0_T1_"

Binary Function "_Z17lower_bound_recurISt18_Fwd_list_iteratorIaEaET_S2_S2_T0_" after disassembly {
  Number      : 338
  State       : disassembled
  Address     : 0x13180
  Size        : 0x24a
  MaxSize     : 0x250
  Offset      : 0x13180
  Section     : .text
  Orc Section : .local.text._Z17lower_bound_recurISt18_Fwd_list_iteratorIaEaET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0337:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp2450 # Offset: 10
    00000010: 	movl	%edx, %r9d
    00000013: 	subq	$0x8, %rsp
    00000017: 	movq	%rdi, %r8
    0000001a: 	movq	%rdi, %r11
    0000001d: 	movq	%rdi, %rax
    00000020: 	xorl	%edx, %edx
    00000022: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2451:
    00000028: 	movq	(%rax), %rax
    0000002b: 	movq	%rdx, %rdi
    0000002e: 	addq	$0x1, %rdx
    00000032: 	cmpq	%rsi, %rax
    00000035: 	jne	.Ltmp2451 # Offset: 53
    00000037: 	movq	%rdx, %rsi
    0000003a: 	movsbl	%r9b, %r10d
    0000003e: 	sarq	%rsi
    00000041: 	leaq	-0x1(%rsi), %rax
    00000045: 	je	.Ltmp2452 # Offset: 69
    0000004b: 	movq	%r8, %rcx
    0000004e: 	nop # Size: 2
.Ltmp2453:
    00000050: 	movq	(%rcx), %rcx
    00000053: 	subq	$0x1, %rax
    00000057: 	jae	.Ltmp2453 # Offset: 87
    00000059: 	cmpb	0x8(%rcx), %r9b
    0000005d: 	jle	.Ltmp2454 # Offset: 93
.Ltmp2475:
    00000063: 	movq	(%rcx), %rax
    00000066: 	subq	%rsi, %rdi
    00000069: 	je	.Ltmp2455 # Offset: 105
    0000006f: 	movq	%rdi, %rsi
    00000072: 	shrq	$0x3f, %rsi
    00000076: 	addq	%rdi, %rsi
    00000079: 	sarq	%rsi
    0000007c: 	leaq	-0x1(%rsi), %rdx
    00000080: 	je	.Ltmp2456 # Offset: 128
    00000086: 	movq	%rax, %rcx
    00000089: 	nopl	(%rax) # Size: 7
.Ltmp2457:
    00000090: 	movq	(%rcx), %rcx
    00000093: 	subq	$0x1, %rdx
    00000097: 	jae	.Ltmp2457 # Offset: 151
    00000099: 	cmpb	0x8(%rcx), %r9b
    0000009d: 	jle	.Ltmp2458 # Offset: 157
.Ltmp2474:
    000000a3: 	movq	(%rcx), %rax
    000000a6: 	addq	$0x1, %rsi
    000000aa: 	movq	%rax, %r11
    000000ad: 	subq	%rsi, %rdi
    000000b0: 	je	.Ltmp2455 # Offset: 176
    000000b2: 	movq	%rdi, %r8
    000000b5: 	shrq	$0x3f, %r8
    000000b9: 	addq	%rdi, %r8
    000000bc: 	sarq	%r8
    000000bf: 	leaq	-0x1(%r8), %rdx
    000000c3: 	je	.Ltmp2459 # Offset: 195
    000000c5: 	nopl	(%rax) # Size: 3
.Ltmp2460:
    000000c8: 	movq	(%rax), %rax
    000000cb: 	subq	$0x1, %rdx
    000000cf: 	jae	.Ltmp2460 # Offset: 207
.Ltmp2459:
    000000d1: 	cmpb	0x8(%rax), %r9b
    000000d5: 	jle	.Ltmp2461 # Offset: 213
    000000db: 	movq	(%rax), %r11
    000000de: 	addq	$0x1, %r8
    000000e2: 	movl	%r10d, %esi
    000000e5: 	subq	%r8, %rdi
    000000e8: 	movq	%rdi, %rdx
    000000eb: 	movq	%r11, %rdi
    000000ee: 	callq	_Z23lower_bound_recur_innerISt18_Fwd_list_iteratorIaEalET_S2_T0_T1_ # Offset: 238
.Ltmp2455:
    000000f3: 	addq	$0x8, %rsp
    000000f7: 	retq # Offset: 247
    000000f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2454:
    00000100: 	movq	%rdx, %rdi
    00000103: 	movq	%r8, %rcx
    00000106: 	sarq	$0x2, %rdi
    0000010a: 	leaq	-0x1(%rdi), %rax
    0000010e: 	je	.Ltmp2462 # Offset: 270
    00000114: 	nopl	(%rax) # Size: 4
.Ltmp2463:
    00000118: 	movq	(%rcx), %rcx
    0000011b: 	subq	$0x1, %rax
    0000011f: 	jae	.Ltmp2463 # Offset: 287
    00000121: 	cmpb	0x8(%rcx), %r9b
    00000125: 	jle	.Ltmp2464 # Offset: 293
.Ltmp2473:
    0000012b: 	movq	(%rcx), %rax
    0000012e: 	addq	$0x1, %rdi
    00000132: 	movq	%rax, %r11
    00000135: 	subq	%rdi, %rsi
    00000138: 	je	.Ltmp2455 # Offset: 312
    0000013a: 	movq	%rsi, %r8
    0000013d: 	shrq	$0x3f, %r8
    00000141: 	addq	%rsi, %r8
    00000144: 	sarq	%r8
    00000147: 	leaq	-0x1(%r8), %rdx
    0000014b: 	je	.Ltmp2465 # Offset: 331
    0000014d: 	nopl	(%rax) # Size: 3
.Ltmp2466:
    00000150: 	movq	(%rax), %rax
    00000153: 	subq	$0x1, %rdx
    00000157: 	jae	.Ltmp2466 # Offset: 343
.Ltmp2465:
    00000159: 	cmpb	0x8(%rax), %r9b
    0000015d: 	jle	.Ltmp2461 # Offset: 349
    0000015f: 	movq	(%rax), %r11
    00000162: 	addq	$0x1, %r8
    00000166: 	subq	%r8, %rsi
    00000169: 	movq	%rsi, %rdx
    0000016c: 	movq	%r11, %rdi
    0000016f: 	movl	%r10d, %esi
    00000172: 	callq	_Z23lower_bound_recur_innerISt18_Fwd_list_iteratorIaEalET_S2_T0_T1_ # Offset: 370
    00000177: 	jmp	.Ltmp2455 # Offset: 375
    0000017c: 	nopl	(%rax) # Size: 4
.Ltmp2450:
    00000180: 	retq # Offset: 384
    00000181: 	nopl	(%rax) # Size: 7
.Ltmp2452:
    00000188: 	cmpb	0x8(%r8), %r9b
    0000018c: 	jg	.Ltmp2467 # Offset: 396
.Ltmp2472:
    00000192: 	movq	%r8, %rax
    00000195: 	jmp	.Ltmp2455 # Offset: 405
.Ltmp2461:
    0000019a: 	movq	%r8, %rdx
    0000019d: 	movl	%r10d, %esi
    000001a0: 	movq	%r11, %rdi
    000001a3: 	callq	_Z23lower_bound_recur_innerISt18_Fwd_list_iteratorIaEalET_S2_T0_T1_ # Offset: 419
    000001a8: 	jmp	.Ltmp2455 # Offset: 424
.Ltmp2458:
    000001ad: 	testq	%rdi, %rdi
    000001b0: 	leaq	0x3(%rdi), %r8
    000001b4: 	movq	%rax, %r11
    000001b7: 	cmovnsq	%rdi, %r8
    000001bb: 	sarq	$0x2, %r8
    000001bf: 	leaq	-0x1(%r8), %rdx
    000001c3: 	je	.Ltmp2465 # Offset: 451
    000001c5: 	nopl	(%rax) # Size: 3
.Ltmp2468:
    000001c8: 	movq	(%rax), %rax
    000001cb: 	subq	$0x1, %rdx
    000001cf: 	jae	.Ltmp2468 # Offset: 463
    000001d1: 	jmp	.Ltmp2465 # Offset: 465
.Ltmp2464:
    000001d3: 	sarq	$0x3, %rdx
    000001d7: 	leaq	-0x1(%rdx), %rax
    000001db: 	je	.Ltmp2469 # Offset: 475
    000001dd: 	nopl	(%rax) # Size: 3
.Ltmp2470:
    000001e0: 	movq	(%r11), %r11
    000001e3: 	subq	$0x1, %rax
    000001e7: 	jae	.Ltmp2470 # Offset: 487
.Ltmp2469:
    000001e9: 	cmpb	0x8(%r11), %r9b
    000001ed: 	jle	.Ltmp2471 # Offset: 493
    000001ef: 	addq	$0x1, %rdx
    000001f3: 	movq	(%r11), %r8
    000001f6: 	movl	%r10d, %esi
    000001f9: 	subq	%rdx, %rdi
    000001fc: 	movq	%rdi, %rdx
    000001ff: 	movq	%r8, %rdi
    00000202: 	callq	_Z23lower_bound_recur_innerISt18_Fwd_list_iteratorIaEalET_S2_T0_T1_ # Offset: 514
    00000207: 	jmp	.Ltmp2455 # Offset: 519
.Ltmp2471:
    0000020c: 	movl	%r10d, %esi
    0000020f: 	movq	%r8, %rdi
    00000212: 	callq	_Z23lower_bound_recur_innerISt18_Fwd_list_iteratorIaEalET_S2_T0_T1_ # Offset: 530
    00000217: 	jmp	.Ltmp2455 # Offset: 535
.Ltmp2462:
    0000021c: 	cmpb	0x8(%r8), %r9b
    00000220: 	jle	.Ltmp2472 # Offset: 544
    00000226: 	jmp	.Ltmp2473 # Offset: 550
    0000022b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2456:
    00000230: 	cmpb	0x8(%rax), %r9b
    00000234: 	jle	.Ltmp2455 # Offset: 564
    0000023a: 	movq	%rax, %rcx
    0000023d: 	jmp	.Ltmp2474 # Offset: 573
.Ltmp2467:
    00000242: 	movq	%r8, %rcx
    00000245: 	jmp	.Ltmp2475 # Offset: 581
DWARF CFI Instructions:
    <empty>
End of Function "_Z17lower_bound_recurISt18_Fwd_list_iteratorIaEaET_S2_S2_T0_"

Binary Function "_Z23upper_bound_recur_innerISt18_Fwd_list_iteratorIaEalET_S2_T0_T1_" after disassembly {
  Number      : 339
  State       : disassembled
  Address     : 0x133d0
  Size        : 0x114
  MaxSize     : 0x120
  Offset      : 0x133d0
  Section     : .text
  Orc Section : .local.text._Z23upper_bound_recur_innerISt18_Fwd_list_iteratorIaEalET_S2_T0_T1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0338:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	testq	%rdx, %rdx
    0000000a: 	je	.Ltmp2476 # Offset: 10
    00000010: 	movq	%rdx, %r8
    00000013: 	subq	$0x8, %rsp
    00000017: 	movl	%esi, %r9d
    0000001a: 	movq	%rdi, %r10
    0000001d: 	shrq	$0x3f, %r8
    00000021: 	addq	%rdx, %r8
    00000024: 	sarq	%r8
    00000027: 	leaq	-0x1(%r8), %rcx
    0000002b: 	je	.Ltmp2477 # Offset: 43
    0000002d: 	movq	%rdi, %rsi
.Ltmp2478:
    00000030: 	movq	(%rsi), %rsi
    00000033: 	subq	$0x1, %rcx
    00000037: 	jae	.Ltmp2478 # Offset: 55
    00000039: 	cmpb	0x8(%rsi), %r9b
    0000003d: 	jl	.Ltmp2479 # Offset: 61
.Ltmp2489:
    0000003f: 	movq	(%rsi), %rax
    00000042: 	addq	$0x1, %r8
    00000046: 	movq	%rax, %rdi
    00000049: 	subq	%r8, %rdx
    0000004c: 	je	.Ltmp2480 # Offset: 76
    0000004e: 	movq	%rdx, %r8
    00000051: 	shrq	$0x3f, %r8
    00000055: 	addq	%rdx, %r8
    00000058: 	sarq	%r8
    0000005b: 	leaq	-0x1(%r8), %rcx
    0000005f: 	je	.Ltmp2481 # Offset: 95
    00000061: 	nopl	(%rax) # Size: 7
.Ltmp2482:
    00000068: 	movq	(%rax), %rax
    0000006b: 	subq	$0x1, %rcx
    0000006f: 	jae	.Ltmp2482 # Offset: 111
.Ltmp2481:
    00000071: 	movsbl	%r9b, %esi
    00000075: 	cmpb	0x8(%rax), %r9b
    00000079: 	jge	.Ltmp2483 # Offset: 121
    0000007b: 	movq	%r8, %rdx
    0000007e: 	callq	_Z23upper_bound_recur_innerISt18_Fwd_list_iteratorIaEalET_S2_T0_T1_ # Offset: 126
.Ltmp2480:
    00000083: 	addq	$0x8, %rsp
    00000087: 	retq # Offset: 135
    00000088: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2476:
    00000090: 	retq # Offset: 144
    00000091: 	nopl	(%rax) # Size: 7
.Ltmp2477:
    00000098: 	cmpb	0x8(%rdi), %sil
    0000009c: 	jge	.Ltmp2484 # Offset: 156
.Ltmp2488:
    0000009e: 	movq	%r10, %rax
    000000a1: 	addq	$0x8, %rsp
    000000a5: 	retq # Offset: 165
    000000a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2479:
    000000b0: 	leaq	0x3(%rdx), %rax
    000000b4: 	testq	%rdx, %rdx
    000000b7: 	cmovsq	%rax, %rdx
    000000bb: 	sarq	$0x2, %rdx
    000000bf: 	leaq	-0x1(%rdx), %rax
    000000c3: 	je	.Ltmp2485 # Offset: 195
    000000c5: 	nopl	(%rax) # Size: 3
.Ltmp2486:
    000000c8: 	movq	(%r10), %r10
    000000cb: 	subq	$0x1, %rax
    000000cf: 	jae	.Ltmp2486 # Offset: 207
.Ltmp2485:
    000000d1: 	movsbl	%r9b, %esi
    000000d5: 	cmpb	0x8(%r10), %r9b
    000000d9: 	jl	.Ltmp2487 # Offset: 217
    000000db: 	leaq	0x1(%rdx), %rax
    000000df: 	movq	(%r10), %rdi
    000000e2: 	movq	%r8, %rdx
    000000e5: 	subq	%rax, %rdx
.Ltmp2487:
    000000e8: 	callq	_Z23upper_bound_recur_innerISt18_Fwd_list_iteratorIaEalET_S2_T0_T1_ # Offset: 232
    000000ed: 	movq	%rax, %r10
    000000f0: 	jmp	.Ltmp2488 # Offset: 240
    000000f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2483:
    000000f8: 	addq	$0x1, %r8
    000000fc: 	movq	(%rax), %rdi
    000000ff: 	subq	%r8, %rdx
    00000102: 	callq	_Z23upper_bound_recur_innerISt18_Fwd_list_iteratorIaEalET_S2_T0_T1_ # Offset: 258
    00000107: 	jmp	.Ltmp2480 # Offset: 263
.Ltmp2484:
    0000010c: 	movq	%rdi, %rsi
    0000010f: 	jmp	.Ltmp2489 # Offset: 271
DWARF CFI Instructions:
    <empty>
End of Function "_Z23upper_bound_recur_innerISt18_Fwd_list_iteratorIaEalET_S2_T0_T1_"

Binary Function "_Z17upper_bound_recurISt18_Fwd_list_iteratorIaEaET_S2_S2_T0_" after disassembly {
  Number      : 340
  State       : disassembled
  Address     : 0x134f0
  Size        : 0x23a
  MaxSize     : 0x240
  Offset      : 0x134f0
  Section     : .text
  Orc Section : .local.text._Z17upper_bound_recurISt18_Fwd_list_iteratorIaEaET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0339:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp2490 # Offset: 10
    00000010: 	movl	%edx, %r9d
    00000013: 	subq	$0x8, %rsp
    00000017: 	movq	%rdi, %r8
    0000001a: 	movq	%rdi, %r11
    0000001d: 	movq	%rdi, %rax
    00000020: 	xorl	%edx, %edx
    00000022: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2491:
    00000028: 	movq	(%rax), %rax
    0000002b: 	movq	%rdx, %rdi
    0000002e: 	addq	$0x1, %rdx
    00000032: 	cmpq	%rsi, %rax
    00000035: 	jne	.Ltmp2491 # Offset: 53
    00000037: 	movq	%rdx, %rsi
    0000003a: 	movsbl	%r9b, %r10d
    0000003e: 	sarq	%rsi
    00000041: 	leaq	-0x1(%rsi), %rax
    00000045: 	je	.Ltmp2492 # Offset: 69
    0000004b: 	movq	%r8, %rcx
    0000004e: 	nop # Size: 2
.Ltmp2493:
    00000050: 	movq	(%rcx), %rcx
    00000053: 	subq	$0x1, %rax
    00000057: 	jae	.Ltmp2493 # Offset: 87
    00000059: 	cmpb	0x8(%rcx), %r9b
    0000005d: 	jl	.Ltmp2494 # Offset: 93
.Ltmp2515:
    00000063: 	movq	(%rcx), %rax
    00000066: 	subq	%rsi, %rdi
    00000069: 	je	.Ltmp2495 # Offset: 105
    0000006f: 	movq	%rdi, %rsi
    00000072: 	shrq	$0x3f, %rsi
    00000076: 	addq	%rdi, %rsi
    00000079: 	sarq	%rsi
    0000007c: 	leaq	-0x1(%rsi), %rdx
    00000080: 	je	.Ltmp2496 # Offset: 128
    00000086: 	movq	%rax, %rcx
    00000089: 	nopl	(%rax) # Size: 7
.Ltmp2497:
    00000090: 	movq	(%rcx), %rcx
    00000093: 	subq	$0x1, %rdx
    00000097: 	jae	.Ltmp2497 # Offset: 151
    00000099: 	cmpb	0x8(%rcx), %r9b
    0000009d: 	jl	.Ltmp2498 # Offset: 157
.Ltmp2514:
    000000a3: 	movq	(%rcx), %rax
    000000a6: 	addq	$0x1, %rsi
    000000aa: 	movq	%rax, %r11
    000000ad: 	subq	%rsi, %rdi
    000000b0: 	je	.Ltmp2495 # Offset: 176
    000000b2: 	movq	%rdi, %r8
    000000b5: 	shrq	$0x3f, %r8
    000000b9: 	addq	%rdi, %r8
    000000bc: 	sarq	%r8
    000000bf: 	leaq	-0x1(%r8), %rdx
    000000c3: 	je	.Ltmp2499 # Offset: 195
    000000c5: 	nopl	(%rax) # Size: 3
.Ltmp2500:
    000000c8: 	movq	(%rax), %rax
    000000cb: 	subq	$0x1, %rdx
    000000cf: 	jae	.Ltmp2500 # Offset: 207
.Ltmp2499:
    000000d1: 	cmpb	0x8(%rax), %r9b
    000000d5: 	jl	.Ltmp2501 # Offset: 213
    000000db: 	movq	(%rax), %r11
    000000de: 	addq	$0x1, %r8
    000000e2: 	movl	%r10d, %esi
    000000e5: 	subq	%r8, %rdi
    000000e8: 	movq	%rdi, %rdx
    000000eb: 	movq	%r11, %rdi
    000000ee: 	callq	_Z23upper_bound_recur_innerISt18_Fwd_list_iteratorIaEalET_S2_T0_T1_ # Offset: 238
.Ltmp2495:
    000000f3: 	addq	$0x8, %rsp
    000000f7: 	retq # Offset: 247
    000000f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2494:
    00000100: 	movq	%rdx, %rdi
    00000103: 	movq	%r8, %rcx
    00000106: 	sarq	$0x2, %rdi
    0000010a: 	leaq	-0x1(%rdi), %rax
    0000010e: 	je	.Ltmp2502 # Offset: 270
    00000114: 	nopl	(%rax) # Size: 4
.Ltmp2503:
    00000118: 	movq	(%rcx), %rcx
    0000011b: 	subq	$0x1, %rax
    0000011f: 	jae	.Ltmp2503 # Offset: 287
    00000121: 	cmpb	0x8(%rcx), %r9b
    00000125: 	jl	.Ltmp2504 # Offset: 293
.Ltmp2513:
    0000012b: 	movq	(%rcx), %rax
    0000012e: 	addq	$0x1, %rdi
    00000132: 	movq	%rax, %r11
    00000135: 	subq	%rdi, %rsi
    00000138: 	je	.Ltmp2495 # Offset: 312
    0000013a: 	movq	%rsi, %r8
    0000013d: 	shrq	$0x3f, %r8
    00000141: 	addq	%rsi, %r8
    00000144: 	sarq	%r8
    00000147: 	leaq	-0x1(%r8), %rdx
    0000014b: 	je	.Ltmp2505 # Offset: 331
    0000014d: 	nopl	(%rax) # Size: 3
.Ltmp2506:
    00000150: 	movq	(%rax), %rax
    00000153: 	subq	$0x1, %rdx
    00000157: 	jae	.Ltmp2506 # Offset: 343
.Ltmp2505:
    00000159: 	cmpb	0x8(%rax), %r9b
    0000015d: 	jl	.Ltmp2501 # Offset: 349
    0000015f: 	movq	(%rax), %r11
    00000162: 	addq	$0x1, %r8
    00000166: 	subq	%r8, %rsi
    00000169: 	movq	%rsi, %rdx
    0000016c: 	movq	%r11, %rdi
    0000016f: 	movl	%r10d, %esi
    00000172: 	callq	_Z23upper_bound_recur_innerISt18_Fwd_list_iteratorIaEalET_S2_T0_T1_ # Offset: 370
    00000177: 	jmp	.Ltmp2495 # Offset: 375
    0000017c: 	nopl	(%rax) # Size: 4
.Ltmp2490:
    00000180: 	retq # Offset: 384
    00000181: 	nopl	(%rax) # Size: 7
.Ltmp2492:
    00000188: 	cmpb	0x8(%r8), %r9b
    0000018c: 	jge	.Ltmp2507 # Offset: 396
.Ltmp2512:
    00000192: 	movq	%r8, %rax
    00000195: 	jmp	.Ltmp2495 # Offset: 405
.Ltmp2501:
    0000019a: 	movq	%r8, %rdx
    0000019d: 	movl	%r10d, %esi
    000001a0: 	movq	%r11, %rdi
    000001a3: 	callq	_Z23upper_bound_recur_innerISt18_Fwd_list_iteratorIaEalET_S2_T0_T1_ # Offset: 419
    000001a8: 	jmp	.Ltmp2495 # Offset: 424
.Ltmp2498:
    000001ad: 	testq	%rdi, %rdi
    000001b0: 	leaq	0x3(%rdi), %r8
    000001b4: 	movq	%rax, %r11
    000001b7: 	cmovnsq	%rdi, %r8
    000001bb: 	sarq	$0x2, %r8
    000001bf: 	leaq	-0x1(%r8), %rdx
    000001c3: 	je	.Ltmp2505 # Offset: 451
    000001c5: 	nopl	(%rax) # Size: 3
.Ltmp2508:
    000001c8: 	movq	(%rax), %rax
    000001cb: 	subq	$0x1, %rdx
    000001cf: 	jae	.Ltmp2508 # Offset: 463
    000001d1: 	jmp	.Ltmp2505 # Offset: 465
.Ltmp2504:
    000001d3: 	sarq	$0x3, %rdx
    000001d7: 	leaq	-0x1(%rdx), %rax
    000001db: 	je	.Ltmp2509 # Offset: 475
    000001dd: 	nopl	(%rax) # Size: 3
.Ltmp2510:
    000001e0: 	movq	(%r11), %r11
    000001e3: 	subq	$0x1, %rax
    000001e7: 	jae	.Ltmp2510 # Offset: 487
.Ltmp2509:
    000001e9: 	cmpb	0x8(%r11), %r9b
    000001ed: 	jl	.Ltmp2511 # Offset: 493
    000001ef: 	addq	$0x1, %rdx
    000001f3: 	movq	(%r11), %r8
    000001f6: 	subq	%rdx, %rdi
    000001f9: 	movq	%rdi, %rdx
.Ltmp2511:
    000001fc: 	movl	%r10d, %esi
    000001ff: 	movq	%r8, %rdi
    00000202: 	callq	_Z23upper_bound_recur_innerISt18_Fwd_list_iteratorIaEalET_S2_T0_T1_ # Offset: 514
    00000207: 	jmp	.Ltmp2495 # Offset: 519
.Ltmp2502:
    0000020c: 	cmpb	0x8(%rcx), %r9b
    00000210: 	jl	.Ltmp2512 # Offset: 528
    00000216: 	jmp	.Ltmp2513 # Offset: 534
    0000021b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2496:
    00000220: 	cmpb	0x8(%rax), %r9b
    00000224: 	jl	.Ltmp2495 # Offset: 548
    0000022a: 	movq	%rax, %rcx
    0000022d: 	jmp	.Ltmp2514 # Offset: 557
.Ltmp2507:
    00000232: 	movq	%r8, %rcx
    00000235: 	jmp	.Ltmp2515 # Offset: 565
DWARF CFI Instructions:
    <empty>
End of Function "_Z17upper_bound_recurISt18_Fwd_list_iteratorIaEaET_S2_S2_T0_"

Binary Function "_Z15TestSearchArrayISt18_Fwd_list_iteratorIaEPFbS1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 341
  State       : disassembled
  Address     : 0x13730
  Size        : 0x1df
  MaxSize     : 0x1e0
  Offset      : 0x13730
  Section     : .text
  Orc Section : .local.text._Z15TestSearchArrayISt18_Fwd_list_iteratorIaEPFbS1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0340:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rcx, %r15
    00000009: 	pushq	%r14
    0000000b: 	movq	%rsi, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %r12
    00000015: 	movl	$0x400, %edi
    0000001a: 	pushq	%rbp
    0000001b: 	pushq	%rbx
    0000001c: 	subq	$0x28, %rsp
    00000020: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000027: 	movq	%r8, 0x18(%rsp)
    0000002c: 	movq	%rdx, 0x10(%rsp)
    00000031: 	movb	%r9b, 0xf(%rsp)
    00000036: 	callq	_Znwm@PLT # Offset: 54
    0000003b: 	movabsq	$0x5851f42d4c957f2d, %r8
    00000045: 	leaq	0x9(%rax), %rdi
    00000049: 	movb	$0x0, (%rax)
    0000004c: 	movq	%rax, %r13
    0000004f: 	leaq	0x400(%rax), %rsi
    00000056: 	andq	$-0x8, %rdi
    0000005a: 	movq	$0x0, 0x1(%rax)
    00000062: 	movq	$0x0, 0x3f8(%rax)
    0000006d: 	subl	%edi, %eax
    0000006f: 	leal	0x400(%rax), %ecx
    00000075: 	xorl	%eax, %eax
    00000077: 	shrl	$0x3, %ecx
    0000007a: 	rep		stosq	%rax, %es:(%rdi)
    0000007d: 	movq	%r13, %rcx
    00000080: 	movabsq	$0x14057b7ef767814f, %rdi
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2518:
    00000090: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    00000097: 	imulq	%r8, %rax
    0000009b: 	addq	%rdi, %rax
    0000009e: 	movq	%rax, %rdx
    000000a1: 	movq	%rax, %r9
    000000a4: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000000ab: 	shrq	$0x14, %rdx
    000000af: 	shlq	$0x17, %r9
    000000b3: 	xorq	%r9, %rdx
    000000b6: 	xorq	%rdx, %rax
    000000b9: 	xorl	%edx, %edx
    000000bb: 	divq	0x10(%rsp)
    000000c0: 	testq	%rdx, %rdx
    000000c3: 	leaq	-0x1(%rdx), %rax
    000000c7: 	movq	%r12, %rdx
    000000ca: 	je	.Ltmp2516 # Offset: 202
    000000cc: 	nopl	(%rax) # Size: 4
.Ltmp2517:
    000000d0: 	movq	(%rdx), %rdx
    000000d3: 	subq	$0x1, %rax
    000000d7: 	jae	.Ltmp2517 # Offset: 215
.Ltmp2516:
    000000d9: 	movzbl	0x8(%rdx), %eax
    000000dd: 	addq	$0x1, %rcx
    000000e1: 	movb	%al, -0x1(%rcx)
    000000e4: 	cmpq	%rsi, %rcx
    000000e7: 	jne	.Ltmp2518 # Offset: 231
    000000e9: 	callq	clock@PLT # Offset: 233
    000000ee: 	xorl	%ebx, %ebx
    000000f0: 	xorl	%ebp, %ebp
    000000f2: 	movq	%rax, start_time(%rip)
.Ltmp2522:
    000000f9: 	leaq	0xc8(%rbp), %rax
    00000100: 	movq	%rax, (%rsp)
    00000104: 	nopl	(%rax) # Size: 4
.Ltmp2520:
    00000108: 	movq	%rbp, %rax
    0000010b: 	movq	%r14, %rsi
    0000010e: 	addq	$0x1, %rbp
    00000112: 	movq	%r12, %rdi
    00000115: 	andl	$0x3ff, %eax
    0000011a: 	movsbl	(%r13,%rax), %edx
    00000120: 	callq	*%r15 # Offset: 288
    00000123: 	testb	%al, %al
    00000125: 	jne	.Ltmp2519 # Offset: 293
    00000127: 	cmpb	$0x0, 0xf(%rsp)
    0000012c: 	movl	$0x1, %eax
    00000131: 	cmovel	%eax, %ebx
.Ltmp2519:
    00000134: 	cmpq	(%rsp), %rbp
    00000138: 	jne	.Ltmp2520 # Offset: 312
    0000013a: 	callq	clock@PLT # Offset: 314
    0000013f: 	movsd	gMinimumTimeTarget(%rip), %xmm1
    00000147: 	pxor	%xmm0, %xmm0
    0000014b: 	movq	%rax, end_time(%rip)
    00000152: 	subq	start_time(%rip), %rax
    00000159: 	cvtsi2sd	%rax, %xmm0
    0000015e: 	divsd	DATAat0x34410(%rip), %xmm0
    00000166: 	comisd	%xmm0, %xmm1
    0000016a: 	jbe	.Ltmp2521 # Offset: 362
    0000016c: 	cmpq	$0x5f5e0ff, %rbp
    00000173: 	jbe	.Ltmp2522 # Offset: 371
.Ltmp2521:
    00000175: 	movq	0x18(%rsp), %rdx
    0000017a: 	movq	0x10(%rsp), %rdi
    0000017f: 	movq	%rbp, %rsi
    00000182: 	callq	_Z13record_resultdmmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 386
    00000187: 	testb	%bl, %bl
    00000189: 	jne	.Ltmp2523 # Offset: 393
.Ltmp2524:
    0000018b: 	addq	$0x28, %rsp
    0000018f: 	movq	%r13, %rdi
    00000192: 	movl	$0x400, %esi
    00000197: 	popq	%rbx
    00000198: 	popq	%rbp
    00000199: 	popq	%r12
    0000019b: 	popq	%r13
    0000019d: 	popq	%r14
    0000019f: 	popq	%r15
    000001a1: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 417
.Ltmp2523:
    000001a6: 	movq	0x18(%rsp), %rax
    000001ab: 	leaq	DATAat0x34137(%rip), %rsi
    000001b2: 	movl	$0x1, %edi
    000001b7: 	movq	(%rax), %rdx
    000001ba: 	xorl	%eax, %eax
    000001bc: 	callq	__printf_chk@PLT # Offset: 444
    000001c1: 	jmp	.Ltmp2524 # Offset: 449
    000001c3: 	endbr64
    000001c7: 	movq	%rax, %rbp
    000001ca: 	movq	%r13, %rdi
    000001cd: 	movl	$0x400, %esi
    000001d2: 	callq	_ZdlPvm@PLT # Offset: 466
    000001d7: 	movq	%rbp, %rdi
    000001da: 	callq	_Unwind_Resume@PLT # Offset: 474
DWARF CFI Instructions:
    <empty>
End of Function "_Z15TestSearchArrayISt18_Fwd_list_iteratorIaEPFbS1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z13TestOneSearchISt18_Fwd_list_iteratorIaEPFbS1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 342
  State       : disassembled
  Address     : 0x13910
  Size        : 0x23b
  MaxSize     : 0x240
  Offset      : 0x13910
  Section     : .text
  Orc Section : .local.text._Z13TestOneSearchISt18_Fwd_list_iteratorIaEPFbS1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0341:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdi, %r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdx, %r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rsi, %rbp
    00000016: 	pushq	%rbx
    00000017: 	movq	%rdi, %rbx
    0000001a: 	subq	$0x58, %rsp
    0000001e: 	movq	%rcx, 0x8(%rsp)
    00000023: 	movq	%r8, 0x10(%rsp)
    00000028: 	movq	%fs:0x28, %rax
    00000031: 	movq	%rax, 0x48(%rsp)
    00000036: 	xorl	%eax, %eax
    00000038: 	movq	%rdi, %rax
    0000003b: 	cmpq	%rsi, %rdi
    0000003e: 	je	.Ltmp2525 # Offset: 62
.Ltmp2526:
    00000040: 	movq	%rax, %rdx
    00000043: 	movq	(%rax), %rax
    00000046: 	movb	$0x5, 0x8(%rdx)
    0000004a: 	cmpq	%rbp, %rax
    0000004d: 	jne	.Ltmp2526 # Offset: 77
.Ltmp2525:
    0000004f: 	movq	0x10(%rsp), %rsi
    00000054: 	leaq	0x20(%rsp), %r15
    00000059: 	leaq	DATAat0x34160(%rip), %rdx
    00000060: 	movzbl	%r9b, %r14d
    00000064: 	movq	%r15, %rdi
    00000067: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 103
    0000006c: 	movq	0x8(%rsp), %rcx
    00000071: 	movl	%r14d, %r9d
    00000074: 	movq	%r15, %r8
    00000077: 	movq	%r12, %rdx
    0000007a: 	movq	%rbp, %rsi
    0000007d: 	movq	%r13, %rdi
    00000080: 	callq	_Z15TestSearchArrayISt18_Fwd_list_iteratorIaEPFbS1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 128
    00000085: 	movq	0x20(%rsp), %rdi
    0000008a: 	leaq	0x30(%rsp), %rax
    0000008f: 	movq	%rax, 0x18(%rsp)
    00000094: 	cmpq	%rax, %rdi
    00000097: 	je	.Ltmp2527 # Offset: 151
    00000099: 	movq	0x30(%rsp), %rax
    0000009e: 	leaq	0x1(%rax), %rsi
    000000a2: 	callq	_ZdlPvm@PLT # Offset: 162
.Ltmp2527:
    000000a7: 	cmpq	$0x9, %r12
    000000ab: 	jbe	.Ltmp2528 # Offset: 171
    000000b1: 	movabsq	$-0x3333333333333333, %rdx
    000000bb: 	movq	%r12, %rax
    000000be: 	mulq	%rdx
    000000c1: 	shrq	$0x3, %rdx
.Ltmp2538:
    000000c5: 	movq	%r13, %rsi
    000000c8: 	xorl	%ecx, %ecx
    000000ca: 	xorl	%r8d, %r8d
    000000cd: 	cmpq	$0x0, %r12
    000000d1: 	jbe	.Ltmp2529 # Offset: 209
    000000d3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2532:
    000000d8: 	xorl	%eax, %eax
    000000da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2531:
    000000e0: 	movq	%rsi, %rdi
    000000e3: 	addq	$0x1, %rax
    000000e7: 	movq	(%rsi), %rsi
    000000ea: 	addq	$0x1, %rcx
    000000ee: 	movb	%r8b, 0x8(%rdi)
    000000f2: 	cmpq	%rdx, %rax
    000000f5: 	jae	.Ltmp2530 # Offset: 245
    000000f7: 	cmpq	%rcx, %r12
    000000fa: 	ja	.Ltmp2531 # Offset: 250
.Ltmp2530:
    000000fc: 	addl	$0x1, %r8d
    00000100: 	cmpq	%rcx, %r12
    00000103: 	ja	.Ltmp2532 # Offset: 259
.Ltmp2529:
    00000105: 	movq	0x10(%rsp), %rsi
    0000010a: 	leaq	DATAat0x3416e(%rip), %rdx
    00000111: 	movq	%r15, %rdi
    00000114: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 276
    00000119: 	movq	0x8(%rsp), %rcx
    0000011e: 	movl	%r14d, %r9d
    00000121: 	movq	%r15, %r8
    00000124: 	movq	%r12, %rdx
    00000127: 	movq	%rbp, %rsi
    0000012a: 	movq	%r13, %rdi
    0000012d: 	callq	_Z15TestSearchArrayISt18_Fwd_list_iteratorIaEPFbS1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 301
    00000132: 	movq	0x20(%rsp), %rdi
    00000137: 	cmpq	0x18(%rsp), %rdi
    0000013c: 	je	.Ltmp2533 # Offset: 316
    0000013e: 	movq	0x30(%rsp), %rax
    00000143: 	leaq	0x1(%rax), %rsi
    00000147: 	callq	_ZdlPvm@PLT # Offset: 327
.Ltmp2533:
    0000014c: 	xorl	%eax, %eax
    0000014e: 	cmpq	%rbp, %r13
    00000151: 	je	.Ltmp2534 # Offset: 337
    00000153: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2535:
    00000158: 	movq	%rbx, %rdx
    0000015b: 	movq	(%rbx), %rbx
    0000015e: 	movb	%al, 0x8(%rdx)
    00000161: 	addl	$0x1, %eax
    00000164: 	cmpq	%rbx, %rbp
    00000167: 	jne	.Ltmp2535 # Offset: 359
.Ltmp2534:
    00000169: 	movq	%rbp, %rsi
    0000016c: 	movq	%r13, %rdi
    0000016f: 	callq	_Z18quicksort2_forwardISt18_Fwd_list_iteratorIaEEvT_S2_ # Offset: 367
    00000174: 	movq	0x10(%rsp), %rsi
    00000179: 	leaq	DATAat0x34184(%rip), %rdx
    00000180: 	movq	%r15, %rdi
    00000183: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 387
    00000188: 	movq	0x8(%rsp), %rcx
    0000018d: 	movl	%r14d, %r9d
    00000190: 	movq	%r15, %r8
    00000193: 	movq	%r12, %rdx
    00000196: 	movq	%rbp, %rsi
    00000199: 	movq	%r13, %rdi
    0000019c: 	callq	_Z15TestSearchArrayISt18_Fwd_list_iteratorIaEPFbS1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 412
    000001a1: 	movq	0x20(%rsp), %rdi
    000001a6: 	cmpq	0x18(%rsp), %rdi
    000001ab: 	je	.Ltmp2536 # Offset: 427
    000001ad: 	movq	0x30(%rsp), %rax
    000001b2: 	leaq	0x1(%rax), %rsi
    000001b6: 	callq	_ZdlPvm@PLT # Offset: 438
.Ltmp2536:
    000001bb: 	movq	0x48(%rsp), %rax
    000001c0: 	subq	%fs:0x28, %rax
    000001c9: 	jne	.Ltmp2537 # Offset: 457
    000001cb: 	addq	$0x58, %rsp
    000001cf: 	popq	%rbx
    000001d0: 	popq	%rbp
    000001d1: 	popq	%r12
    000001d3: 	popq	%r13
    000001d5: 	popq	%r14
    000001d7: 	popq	%r15
    000001d9: 	retq # Offset: 473
.Ltmp2528:
    000001da: 	testq	%r12, %r12
    000001dd: 	je	.Ltmp2529 # Offset: 477
    000001e3: 	movl	$0x1, %edx
    000001e8: 	jmp	.Ltmp2538 # Offset: 488
.Ltmp2537:
    000001ed: 	callq	__stack_chk_fail@PLT # Offset: 493
    000001f2: 	endbr64
.Ltmp2540:
    000001f6: 	movq	%rax, %rbp
    000001f9: 	jmp	.Ltmp2539 # Offset: 505
    000001fb: 	endbr64
    000001ff: 	jmp	.Ltmp2540 # Offset: 511
    00000201: 	endbr64
    00000205: 	movq	%rax, %rbp
    00000208: 	movq	0x20(%rsp), %rdi
    0000020d: 	leaq	0x30(%rsp), %rax
    00000212: 	cmpq	%rax, %rdi
    00000215: 	je	.Ltmp2541 # Offset: 533
.Ltmp2542:
    00000217: 	movq	0x30(%rsp), %rax
    0000021c: 	leaq	0x1(%rax), %rsi
    00000220: 	callq	_ZdlPvm@PLT # Offset: 544
.Ltmp2541:
    00000225: 	movq	%rbp, %rdi
    00000228: 	callq	_Unwind_Resume@PLT # Offset: 552
.Ltmp2539:
    0000022d: 	movq	0x20(%rsp), %rdi
    00000232: 	cmpq	0x18(%rsp), %rdi
    00000237: 	jne	.Ltmp2542 # Offset: 567
    00000239: 	jmp	.Ltmp2541 # Offset: 569
DWARF CFI Instructions:
    <empty>
End of Function "_Z13TestOneSearchISt18_Fwd_list_iteratorIaEPFbS1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z11TestOneTypeIaEvv" after disassembly {
  Number      : 343
  State       : disassembled
  Address     : 0x13b50
  Size        : 0x2885
  MaxSize     : 0x2890
  Offset      : 0x13b50
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIaEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0342:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	leaq	DATAat0x34295(%rip), %rsi
    0000000d: 	pushq	%r14
    0000000f: 	pushq	%r13
    00000011: 	movabsq	$0x28f5c28f5c28f5c3, %r13
    0000001b: 	pushq	%r12
    0000001d: 	pushq	%rbp
    0000001e: 	movabsq	$0x346dc5d63886594b, %rbp
    00000028: 	pushq	%rbx
    00000029: 	subq	$0x258, %rsp
    00000030: 	movdqa	DATAat0x344d0(%rip), %xmm0
    00000038: 	movq	%fs:0x28, %rax
    00000041: 	movq	%rax, 0x248(%rsp)
    00000049: 	xorl	%eax, %eax
    0000004b: 	leaq	0x110(%rsp), %rdi
    00000053: 	movq	$0x30d40, 0x240(%rsp)
    0000005f: 	leaq	0x248(%rsp), %rbx
    00000067: 	movaps	%xmm0, 0x1d0(%rsp)
    0000006f: 	movdqa	DATAat0x344e0(%rip), %xmm0
    00000077: 	movaps	%xmm0, 0x1e0(%rsp)
    0000007f: 	movdqa	DATAat0x344f0(%rip), %xmm0
    00000087: 	movaps	%xmm0, 0x1f0(%rsp)
    0000008f: 	movdqa	DATAat0x34500(%rip), %xmm0
    00000097: 	movaps	%xmm0, 0x200(%rsp)
    0000009f: 	movdqa	DATAat0x34510(%rip), %xmm0
    000000a7: 	movaps	%xmm0, 0x210(%rsp)
    000000af: 	movdqa	DATAat0x34520(%rip), %xmm0
    000000b7: 	movaps	%xmm0, 0x220(%rsp)
    000000bf: 	movdqa	DATAat0x34530(%rip), %xmm0
    000000c7: 	movaps	%xmm0, 0x230(%rsp)
    000000cf: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1" # Offset: 207
    000000d4: 	leaq	0x1d0(%rsp), %rax
    000000dc: 	movq	%rbx, 0x50(%rsp)
    000000e1: 	leaq	_ZZNSt8__detail18__to_chars_10_implImEEvPcjT_E8__digits(%rip), %rbx
    000000e8: 	movq	%rax, 0x78(%rsp)
    000000ed: 	movq	%rax, 0x20(%rsp)
    000000f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2569:
    000000f8: 	movq	0x20(%rsp), %rax
    000000fd: 	movq	(%rax), %r12
    00000100: 	movq	%r12, %rdi
    00000103: 	callq	_Znam@PLT # Offset: 259
    00000108: 	movq	%rax, 0x30(%rsp)
    0000010d: 	cmpq	$0x9, %r12
    00000111: 	jbe	.Ltmp2543 # Offset: 273
    00000117: 	cmpq	$0x63, %r12
    0000011b: 	jbe	.Ltmp2544 # Offset: 283
    00000121: 	cmpq	$0x3e7, %r12
    00000128: 	jbe	.Ltmp2545 # Offset: 296
    0000012e: 	cmpq	$0x270f, %r12
    00000135: 	jbe	.Ltmp2546 # Offset: 309
    0000013b: 	movq	%r12, %rdx
    0000013e: 	movl	$0x1, %esi
    00000143: 	jmp	.Ltmp2547 # Offset: 323
    00000145: 	nopl	(%rax) # Size: 3
.Ltmp2551:
    00000148: 	cmpq	$0xf423f, %rcx
    0000014f: 	jbe	.Ltmp2548 # Offset: 335
    00000155: 	cmpq	$0x98967f, %rcx
    0000015c: 	jbe	.Ltmp2549 # Offset: 348
    00000162: 	cmpq	$0x5f5e0ff, %rcx
    00000169: 	jbe	.Ltmp2550 # Offset: 361
.Ltmp2547:
    0000016f: 	movq	%rdx, %rax
    00000172: 	movq	%rdx, %rcx
    00000175: 	mulq	%rbp
    00000178: 	movl	%esi, %eax
    0000017a: 	addl	$0x4, %esi
    0000017d: 	shrq	$0xb, %rdx
    00000181: 	cmpq	$0x1869f, %rcx
    00000188: 	ja	.Ltmp2551 # Offset: 392
.Ltmp2606:
    0000018a: 	leaq	0x180(%rsp), %rax
    00000192: 	leaq	0x170(%rsp), %rdi
    0000019a: 	xorl	%edx, %edx
    0000019c: 	movq	%rdi, 0x38(%rsp)
    000001a1: 	movq	%rax, 0x10(%rsp)
    000001a6: 	movq	%rax, 0x170(%rsp)
    000001ae: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEmc@PLT # Offset: 430
    000001b3: 	movl	0x178(%rsp), %eax
    000001ba: 	movq	0x170(%rsp), %rdi
    000001c2: 	movq	%r12, %rcx
    000001c5: 	leal	-0x1(%rax), %esi
    000001c8: 	cmpq	$0x63, %r12
    000001cc: 	jbe	.Ltmp2552 # Offset: 460
    000001ce: 	nop # Size: 2
.Ltmp2553:
    000001d0: 	movq	%rcx, %rdx
    000001d3: 	shrq	$0x2, %rdx
    000001d7: 	movq	%rdx, %rax
    000001da: 	mulq	%r13
    000001dd: 	movq	%rdx, %r8
    000001e0: 	andq	$-0x4, %rdx
    000001e4: 	shrq	$0x2, %r8
    000001e8: 	addq	%r8, %rdx
    000001eb: 	leaq	(%rdx,%rdx,4), %rax
    000001ef: 	movq	%rcx, %rdx
    000001f2: 	shlq	$0x2, %rax
    000001f6: 	subq	%rax, %rdx
    000001f9: 	movq	%rcx, %rax
    000001fc: 	movq	%r8, %rcx
    000001ff: 	movl	%esi, %r8d
    00000202: 	movzbl	0x1(%rbx,%rdx,2), %r9d
    00000208: 	movzbl	(%rbx,%rdx,2), %edx
    0000020c: 	movb	%r9b, (%rdi,%r8)
    00000210: 	leal	-0x1(%rsi), %r8d
    00000214: 	subl	$0x2, %esi
    00000217: 	movb	%dl, (%rdi,%r8)
    0000021b: 	cmpq	$0x270f, %rax
    00000221: 	ja	.Ltmp2553 # Offset: 545
.Ltmp2552:
    00000223: 	leal	0x30(%rcx), %eax
    00000226: 	cmpq	$0x9, %rcx
    0000022a: 	jbe	.Ltmp2554 # Offset: 554
    0000022c: 	movzbl	0x1(%rbx,%rcx,2), %eax
    00000231: 	movb	%al, 0x1(%rdi)
    00000234: 	movzbl	(%rbx,%rcx,2), %eax
.Ltmp2554:
    00000238: 	movb	%al, (%rdi)
    0000023a: 	movq	0x110(%rsp), %r15
    00000242: 	leaq	0x160(%rsp), %rax
    0000024a: 	movq	0x118(%rsp), %r14
    00000252: 	movq	%rax, 0x8(%rsp)
    00000257: 	movq	%rax, 0x150(%rsp)
    0000025f: 	movq	%r15, %rax
    00000262: 	addq	%r14, %rax
    00000265: 	je	.Ltmp2555 # Offset: 613
    00000267: 	testq	%r15, %r15
    0000026a: 	je	.Ltmp2556 # Offset: 618
.Ltmp2555:
    00000270: 	movq	%r14, 0xc0(%rsp)
    00000278: 	cmpq	$0xf, %r14
    0000027c: 	ja	.Ltmp2557 # Offset: 636
    00000282: 	cmpq	$0x1, %r14
    00000286: 	jne	.Ltmp2558 # Offset: 646
    0000028c: 	movzbl	(%r15), %eax
    00000290: 	movb	%al, 0x160(%rsp)
    00000297: 	movq	0x8(%rsp), %rax
.Ltmp2603:
    0000029c: 	movq	%r14, 0x158(%rsp)
    000002a4: 	movb	$0x0, (%rax,%r14)
    000002a9: 	movabsq	$0x3fffffffffffffff, %rax
    000002b3: 	cmpq	%rax, 0x158(%rsp)
    000002bb: 	je	.Ltmp2559 # Offset: 699
    000002c1: 	leaq	0x150(%rsp), %r15
    000002c9: 	movl	$0x1, %edx
    000002ce: 	leaq	DATAat0x34149(%rip), %rsi
    000002d5: 	movq	%r15, %rdi
    000002d8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 728
    000002dd: 	movq	0x158(%rsp), %r8
    000002e5: 	movq	0x178(%rsp), %rdx
    000002ed: 	movl	$0xf, %eax
    000002f2: 	movq	0x150(%rsp), %r9
    000002fa: 	movq	%rax, %rdi
    000002fd: 	cmpq	0x8(%rsp), %r9
    00000302: 	cmovneq	0x160(%rsp), %rdi
    0000030b: 	leaq	(%r8,%rdx), %rcx
    0000030f: 	movq	0x170(%rsp), %rsi
    00000317: 	cmpq	%rdi, %rcx
    0000031a: 	jbe	.Ltmp2560 # Offset: 794
    0000031c: 	cmpq	0x10(%rsp), %rsi
    00000321: 	cmovneq	0x180(%rsp), %rax
    0000032a: 	cmpq	%rax, %rcx
    0000032d: 	jbe	.Ltmp2561 # Offset: 813
.Ltmp2560:
    00000333: 	movq	%r15, %rdi
    00000336: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 822
    0000033b: 	leaq	0x1a0(%rsp), %rdi
    00000343: 	leaq	0x10(%rax), %rdx
    00000347: 	movq	%rdi, 0x190(%rsp)
    0000034f: 	movq	(%rax), %rcx
    00000352: 	movq	%rdi, 0x28(%rsp)
    00000357: 	cmpq	%rdx, %rcx
    0000035a: 	je	.Ltmp2562 # Offset: 858
.Ltmp2607:
    00000360: 	movq	%rcx, 0x190(%rsp)
    00000368: 	movq	0x10(%rax), %rcx
    0000036c: 	movq	%rcx, 0x1a0(%rsp)
.Ltmp2605:
    00000374: 	movq	0x8(%rax), %rcx
    00000378: 	movq	%rcx, 0x198(%rsp)
    00000380: 	movq	$0x0, 0x8(%rax)
    00000388: 	movb	$0x0, 0x10(%rax)
    0000038c: 	movq	%rdx, (%rax)
    0000038f: 	movabsq	$0x3fffffffffffffff, %rax
    00000399: 	subq	0x198(%rsp), %rax
    000003a1: 	cmpq	$0x7, %rax
    000003a5: 	jbe	.Ltmp2563 # Offset: 933
    000003ab: 	leaq	0x190(%rsp), %rax
    000003b3: 	movl	$0x8, %edx
    000003b8: 	leaq	DATAat0x3429c(%rip), %rsi
    000003bf: 	movq	%rax, %rdi
    000003c2: 	movq	%rax, 0x40(%rsp)
    000003c7: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 967
    000003cc: 	leaq	0x1c0(%rsp), %rdi
    000003d4: 	leaq	0x10(%rax), %rdx
    000003d8: 	movq	%rdi, 0x1b0(%rsp)
    000003e0: 	movq	(%rax), %rcx
    000003e3: 	movq	%rdi, 0x18(%rsp)
    000003e8: 	cmpq	%rdx, %rcx
    000003eb: 	je	.Ltmp2564 # Offset: 1003
    000003f1: 	movq	%rcx, 0x1b0(%rsp)
    000003f9: 	movq	0x10(%rax), %rcx
    000003fd: 	movq	%rcx, 0x1c0(%rsp)
.Ltmp2604:
    00000405: 	movq	0x8(%rax), %rcx
    00000409: 	movq	0x30(%rsp), %rdi
    0000040e: 	movq	%rcx, 0x1b8(%rsp)
    00000416: 	leaq	(%rdi,%r12), %rsi
    0000041a: 	leaq	0x1b0(%rsp), %rcx
    00000422: 	movq	%rdx, (%rax)
    00000425: 	movq	%r12, %rdx
    00000428: 	movq	$0x0, 0x8(%rax)
    00000430: 	movb	$0x0, 0x10(%rax)
    00000434: 	movq	%rcx, 0x48(%rsp)
    00000439: 	callq	_Z16TestOneContainerIPaEvT_S1_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1081
    0000043e: 	movq	0x1b0(%rsp), %rdi
    00000446: 	cmpq	0x18(%rsp), %rdi
    0000044b: 	je	.Ltmp2565 # Offset: 1099
    0000044d: 	movq	0x1c0(%rsp), %rax
    00000455: 	leaq	0x1(%rax), %rsi
    00000459: 	callq	_ZdlPvm@PLT # Offset: 1113
.Ltmp2565:
    0000045e: 	movq	0x190(%rsp), %rdi
    00000466: 	cmpq	0x28(%rsp), %rdi
    0000046b: 	je	.Ltmp2566 # Offset: 1131
    0000046d: 	movq	0x1a0(%rsp), %rax
    00000475: 	leaq	0x1(%rax), %rsi
    00000479: 	callq	_ZdlPvm@PLT # Offset: 1145
.Ltmp2566:
    0000047e: 	movq	0x150(%rsp), %rdi
    00000486: 	cmpq	0x8(%rsp), %rdi
    0000048b: 	je	.Ltmp2567 # Offset: 1163
    0000048d: 	movq	0x160(%rsp), %rax
    00000495: 	leaq	0x1(%rax), %rsi
    00000499: 	callq	_ZdlPvm@PLT # Offset: 1177
.Ltmp2567:
    0000049e: 	movq	0x170(%rsp), %rdi
    000004a6: 	cmpq	0x10(%rsp), %rdi
    000004ab: 	je	.Ltmp2568 # Offset: 1195
    000004ad: 	movq	0x180(%rsp), %rax
    000004b5: 	leaq	0x1(%rax), %rsi
    000004b9: 	callq	_ZdlPvm@PLT # Offset: 1209
.Ltmp2568:
    000004be: 	movq	0x30(%rsp), %rdi
    000004c3: 	movl	$0x1, %esi
    000004c8: 	callq	_ZdlPvm@PLT # Offset: 1224
    000004cd: 	addq	$0x8, 0x20(%rsp)
    000004d3: 	movq	0x20(%rsp), %rax
    000004d8: 	cmpq	%rax, 0x50(%rsp)
    000004dd: 	jne	.Ltmp2569 # Offset: 1245
    000004e3: 	leaq	0x1d8(%rsp), %rax
    000004eb: 	movl	$0x5, %ebp
    000004f0: 	movabsq	$0x346dc5d63886594b, %r12
    000004fa: 	movabsq	$0x28f5c28f5c28f5c3, %r13
    00000504: 	movq	%rax, 0x30(%rsp)
    00000509: 	leaq	_ZZNSt8__detail18__to_chars_10_implImEEvPcjT_E8__digits(%rip), %rbx
    00000510: 	movq	%rax, 0x20(%rsp)
    00000515: 	nopl	(%rax) # Size: 3
.Ltmp2591:
    00000518: 	testq	%rbp, %rbp
    0000051b: 	je	.Ltmp2570 # Offset: 1307
    00000521: 	movq	%rbp, %rdi
    00000524: 	callq	_Znwm@PLT # Offset: 1316
    00000529: 	leaq	(%rax,%rbp), %rsi
    0000052d: 	movq	%rbp, %rdx
    00000530: 	movq	%rax, 0x60(%rsp)
    00000535: 	leaq	0x1(%rax), %rdi
    00000539: 	movq	%rsi, 0x68(%rsp)
    0000053e: 	movb	$0x0, (%rax)
    00000541: 	subq	$0x1, %rdx
    00000545: 	jne	.Ltmp2571 # Offset: 1349
.Ltmp2610:
    0000054b: 	movq	%rdi, 0x68(%rsp)
    00000550: 	movl	$0x1, %esi
    00000555: 	nopl	(%rax) # Size: 3
.Ltmp2601:
    00000558: 	movq	0x10(%rsp), %rax
    0000055d: 	movq	0x38(%rsp), %rdi
    00000562: 	xorl	%edx, %edx
    00000564: 	movq	%rax, 0x170(%rsp)
    0000056c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEmc@PLT # Offset: 1388
    00000571: 	movl	0x178(%rsp), %eax
    00000578: 	movq	0x170(%rsp), %rdi
    00000580: 	movq	%rbp, %rcx
    00000583: 	leal	-0x1(%rax), %esi
    00000586: 	cmpq	$0x63, %rbp
    0000058a: 	jbe	.Ltmp2572 # Offset: 1418
    0000058c: 	nopl	(%rax) # Size: 4
.Ltmp2573:
    00000590: 	movq	%rcx, %rdx
    00000593: 	shrq	$0x2, %rdx
    00000597: 	movq	%rdx, %rax
    0000059a: 	mulq	%r13
    0000059d: 	movq	%rdx, %r8
    000005a0: 	andq	$-0x4, %rdx
    000005a4: 	shrq	$0x2, %r8
    000005a8: 	addq	%r8, %rdx
    000005ab: 	leaq	(%rdx,%rdx,4), %rax
    000005af: 	movq	%rcx, %rdx
    000005b2: 	shlq	$0x2, %rax
    000005b6: 	subq	%rax, %rdx
    000005b9: 	movq	%rcx, %rax
    000005bc: 	movq	%r8, %rcx
    000005bf: 	movl	%esi, %r8d
    000005c2: 	movzbl	0x1(%rbx,%rdx,2), %r9d
    000005c8: 	movzbl	(%rbx,%rdx,2), %edx
    000005cc: 	movb	%r9b, (%rdi,%r8)
    000005d0: 	leal	-0x1(%rsi), %r8d
    000005d4: 	subl	$0x2, %esi
    000005d7: 	movb	%dl, (%rdi,%r8)
    000005db: 	cmpq	$0x270f, %rax
    000005e1: 	ja	.Ltmp2573 # Offset: 1505
.Ltmp2572:
    000005e3: 	leal	0x30(%rcx), %eax
    000005e6: 	cmpq	$0x9, %rcx
    000005ea: 	jbe	.Ltmp2574 # Offset: 1514
    000005ec: 	movzbl	0x1(%rbx,%rcx,2), %eax
    000005f1: 	movb	%al, 0x1(%rdi)
    000005f4: 	movzbl	(%rbx,%rcx,2), %eax
.Ltmp2574:
    000005f8: 	movb	%al, (%rdi)
    000005fa: 	movq	0x8(%rsp), %rax
    000005ff: 	movq	0x118(%rsp), %r14
    00000607: 	movq	%rax, 0x150(%rsp)
    0000060f: 	movq	0x110(%rsp), %rax
    00000617: 	movq	%rax, %rdi
    0000061a: 	movq	%rax, 0x70(%rsp)
    0000061f: 	addq	%r14, %rdi
    00000622: 	je	.Ltmp2575 # Offset: 1570
    00000624: 	testq	%rax, %rax
    00000627: 	je	.Ltmp2576 # Offset: 1575
.Ltmp2575:
    0000062d: 	movq	%r14, 0xc0(%rsp)
    00000635: 	cmpq	$0xf, %r14
    00000639: 	ja	.Ltmp2577 # Offset: 1593
    0000063f: 	cmpq	$0x1, %r14
    00000643: 	jne	.Ltmp2578 # Offset: 1603
    00000649: 	movq	0x70(%rsp), %rax
    0000064e: 	movzbl	(%rax), %eax
    00000651: 	movb	%al, 0x160(%rsp)
    00000658: 	movq	0x8(%rsp), %rax
.Ltmp2609:
    0000065d: 	movq	%r14, 0x158(%rsp)
    00000665: 	movb	$0x0, (%rax,%r14)
    0000066a: 	movabsq	$0x3fffffffffffffff, %rax
    00000674: 	cmpq	%rax, 0x158(%rsp)
    0000067c: 	je	.Ltmp2579 # Offset: 1660
    00000682: 	movl	$0x1, %edx
    00000687: 	leaq	DATAat0x34149(%rip), %rsi
    0000068e: 	movq	%r15, %rdi
    00000691: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1681
    00000696: 	movq	0x158(%rsp), %r8
    0000069e: 	movq	0x178(%rsp), %rdx
    000006a6: 	movl	$0xf, %eax
    000006ab: 	movq	0x150(%rsp), %r9
    000006b3: 	movq	%rax, %rdi
    000006b6: 	cmpq	0x8(%rsp), %r9
    000006bb: 	cmovneq	0x160(%rsp), %rdi
    000006c4: 	leaq	(%r8,%rdx), %rcx
    000006c8: 	movq	0x170(%rsp), %rsi
    000006d0: 	cmpq	%rdi, %rcx
    000006d3: 	jbe	.Ltmp2580 # Offset: 1747
    000006d5: 	cmpq	0x10(%rsp), %rsi
    000006da: 	cmovneq	0x180(%rsp), %rax
    000006e3: 	cmpq	%rax, %rcx
    000006e6: 	jbe	.Ltmp2581 # Offset: 1766
.Ltmp2580:
    000006ec: 	movq	%r15, %rdi
    000006ef: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1775
    000006f4: 	movq	0x28(%rsp), %rsi
    000006f9: 	leaq	0x10(%rax), %rdx
    000006fd: 	movq	%rsi, 0x190(%rsp)
    00000705: 	movq	(%rax), %rcx
    00000708: 	cmpq	%rdx, %rcx
    0000070b: 	je	.Ltmp2582 # Offset: 1803
.Ltmp2613:
    00000711: 	movq	%rcx, 0x190(%rsp)
    00000719: 	movq	0x10(%rax), %rcx
    0000071d: 	movq	%rcx, 0x1a0(%rsp)
.Ltmp2612:
    00000725: 	movq	0x8(%rax), %rcx
    00000729: 	movq	%rcx, 0x198(%rsp)
    00000731: 	movq	$0x0, 0x8(%rax)
    00000739: 	movb	$0x0, 0x10(%rax)
    0000073d: 	movq	%rdx, (%rax)
    00000740: 	movabsq	$0x3fffffffffffffff, %rax
    0000074a: 	subq	0x198(%rsp), %rax
    00000752: 	cmpq	$0xb, %rax
    00000756: 	jbe	.Ltmp2583 # Offset: 1878
    0000075c: 	movq	0x40(%rsp), %rdi
    00000761: 	movl	$0xc, %edx
    00000766: 	leaq	DATAat0x342a5(%rip), %rsi
    0000076d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1901
    00000772: 	movq	0x18(%rsp), %rdi
    00000777: 	leaq	0x10(%rax), %rdx
    0000077b: 	movq	%rdi, 0x1b0(%rsp)
    00000783: 	movq	(%rax), %rcx
    00000786: 	cmpq	%rdx, %rcx
    00000789: 	je	.Ltmp2584 # Offset: 1929
    0000078f: 	movq	%rcx, 0x1b0(%rsp)
    00000797: 	movq	0x10(%rax), %rcx
    0000079b: 	movq	%rcx, 0x1c0(%rsp)
.Ltmp2611:
    000007a3: 	movq	0x8(%rax), %rcx
    000007a7: 	movq	0x68(%rsp), %rsi
    000007ac: 	movq	0x60(%rsp), %rdi
    000007b1: 	movq	%rcx, 0x1b8(%rsp)
    000007b9: 	movq	0x48(%rsp), %rcx
    000007be: 	movq	%rdx, (%rax)
    000007c1: 	movq	%rbp, %rdx
    000007c4: 	movq	$0x0, 0x8(%rax)
    000007cc: 	movb	$0x0, 0x10(%rax)
    000007d0: 	callq	_Z16TestOneContainerIN9__gnu_cxx17__normal_iteratorIPaSt6vectorIaSaIaEEEEEvT_S7_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2000
    000007d5: 	movq	0x1b0(%rsp), %rdi
    000007dd: 	cmpq	0x18(%rsp), %rdi
    000007e2: 	je	.Ltmp2585 # Offset: 2018
    000007e4: 	movq	0x1c0(%rsp), %rax
    000007ec: 	leaq	0x1(%rax), %rsi
    000007f0: 	callq	_ZdlPvm@PLT # Offset: 2032
.Ltmp2585:
    000007f5: 	movq	0x190(%rsp), %rdi
    000007fd: 	cmpq	0x28(%rsp), %rdi
    00000802: 	je	.Ltmp2586 # Offset: 2050
    00000804: 	movq	0x1a0(%rsp), %rax
    0000080c: 	leaq	0x1(%rax), %rsi
    00000810: 	callq	_ZdlPvm@PLT # Offset: 2064
.Ltmp2586:
    00000815: 	movq	0x150(%rsp), %rdi
    0000081d: 	cmpq	0x8(%rsp), %rdi
    00000822: 	je	.Ltmp2587 # Offset: 2082
    00000824: 	movq	0x160(%rsp), %rax
    0000082c: 	leaq	0x1(%rax), %rsi
    00000830: 	callq	_ZdlPvm@PLT # Offset: 2096
.Ltmp2587:
    00000835: 	movq	0x170(%rsp), %rdi
    0000083d: 	cmpq	0x10(%rsp), %rdi
    00000842: 	je	.Ltmp2588 # Offset: 2114
    00000844: 	movq	0x180(%rsp), %rax
    0000084c: 	leaq	0x1(%rax), %rsi
    00000850: 	callq	_ZdlPvm@PLT # Offset: 2128
.Ltmp2588:
    00000855: 	movq	0x60(%rsp), %rax
    0000085a: 	testq	%rax, %rax
    0000085d: 	je	.Ltmp2589 # Offset: 2141
    0000085f: 	movq	%rbp, %rsi
    00000862: 	movq	%rax, %rdi
    00000865: 	callq	_ZdlPvm@PLT # Offset: 2149
.Ltmp2589:
    0000086a: 	movq	0x20(%rsp), %rsi
    0000086f: 	cmpq	%rsi, 0x50(%rsp)
    00000874: 	je	.Ltmp2590 # Offset: 2164
    0000087a: 	movq	%rsi, %rax
    0000087d: 	movq	(%rsi), %rbp
    00000880: 	addq	$0x8, %rax
    00000884: 	movq	%rax, 0x20(%rsp)
    00000889: 	testq	%rbp, %rbp
    0000088c: 	jns	.Ltmp2591 # Offset: 2188
    00000892: 	leaq	DATAat0x342e0(%rip), %rdi
    00000899: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 2201
    0000089e: 	nop # Size: 2
.Ltmp2571:
    000008a0: 	xorl	%esi, %esi
    000008a2: 	callq	memset@PLT # Offset: 2210
    000008a7: 	cmpq	$0x9, %rbp
    000008ab: 	jbe	.Ltmp2592 # Offset: 2219
    000008b1: 	cmpq	$0x63, %rbp
    000008b5: 	jbe	.Ltmp2593 # Offset: 2229
    000008bb: 	cmpq	$0x3e7, %rbp
    000008c2: 	jbe	.Ltmp2594 # Offset: 2242
    000008c8: 	cmpq	$0x270f, %rbp
    000008cf: 	jbe	.Ltmp2595 # Offset: 2255
    000008d5: 	movq	%rbp, %rdx
    000008d8: 	movl	$0x1, %esi
    000008dd: 	jmp	.Ltmp2596 # Offset: 2269
    000008df: 	nop # Size: 1
.Ltmp2600:
    000008e0: 	cmpq	$0xf423f, %rcx
    000008e7: 	jbe	.Ltmp2597 # Offset: 2279
    000008ed: 	cmpq	$0x98967f, %rcx
    000008f4: 	jbe	.Ltmp2598 # Offset: 2292
    000008fa: 	cmpq	$0x5f5e0ff, %rcx
    00000901: 	jbe	.Ltmp2599 # Offset: 2305
.Ltmp2596:
    00000907: 	movq	%rdx, %rax
    0000090a: 	movq	%rdx, %rcx
    0000090d: 	mulq	%r12
    00000910: 	movl	%esi, %eax
    00000912: 	addl	$0x4, %esi
    00000915: 	shrq	$0xb, %rdx
    00000919: 	cmpq	$0x1869f, %rcx
    00000920: 	ja	.Ltmp2600 # Offset: 2336
    00000922: 	jmp	.Ltmp2601 # Offset: 2338
    00000927: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2558:
    00000930: 	testq	%r14, %r14
    00000933: 	jne	.Ltmp2602 # Offset: 2355
    00000939: 	movq	0x8(%rsp), %rax
    0000093e: 	jmp	.Ltmp2603 # Offset: 2366
    00000943: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2557:
    00000948: 	leaq	0xc0(%rsp), %rax
    00000950: 	leaq	0x150(%rsp), %rdi
    00000958: 	xorl	%edx, %edx
    0000095a: 	movq	%rax, %rsi
    0000095d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 2397
    00000962: 	movq	%rax, 0x150(%rsp)
    0000096a: 	movq	%rax, %rdi
    0000096d: 	movq	0xc0(%rsp), %rax
    00000975: 	movq	%rax, 0x160(%rsp)
.Ltmp2746:
    0000097d: 	movq	%r14, %rdx
    00000980: 	movq	%r15, %rsi
    00000983: 	callq	memcpy@PLT # Offset: 2435
    00000988: 	movq	0xc0(%rsp), %r14
    00000990: 	movq	0x150(%rsp), %rax
    00000998: 	jmp	.Ltmp2603 # Offset: 2456
    0000099d: 	nopl	(%rax) # Size: 3
.Ltmp2564:
    000009a0: 	movdqu	0x10(%rax), %xmm4
    000009a5: 	movaps	%xmm4, 0x1c0(%rsp)
    000009ad: 	jmp	.Ltmp2604 # Offset: 2477
    000009b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2562:
    000009b8: 	movdqu	0x10(%rax), %xmm5
    000009bd: 	movaps	%xmm5, 0x1a0(%rsp)
    000009c5: 	jmp	.Ltmp2605 # Offset: 2501
    000009ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2548:
    000009d0: 	leal	0x5(%rax), %esi
    000009d3: 	jmp	.Ltmp2606 # Offset: 2515
    000009d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2549:
    000009e0: 	leal	0x6(%rax), %esi
    000009e3: 	jmp	.Ltmp2606 # Offset: 2531
    000009e8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2561:
    000009f0: 	movq	0x38(%rsp), %rdi
    000009f5: 	movq	%r9, %rcx
    000009f8: 	xorl	%edx, %edx
    000009fa: 	xorl	%esi, %esi
    000009fc: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@PLT # Offset: 2556
    00000a01: 	leaq	0x1a0(%rsp), %rdi
    00000a09: 	leaq	0x10(%rax), %rdx
    00000a0d: 	movq	%rdi, 0x190(%rsp)
    00000a15: 	movq	(%rax), %rcx
    00000a18: 	movq	%rdi, 0x28(%rsp)
    00000a1d: 	cmpq	%rdx, %rcx
    00000a20: 	jne	.Ltmp2607 # Offset: 2592
    00000a26: 	movdqu	0x10(%rax), %xmm6
    00000a2b: 	movaps	%xmm6, 0x1a0(%rsp)
    00000a33: 	jmp	.Ltmp2605 # Offset: 2611
    00000a38: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2550:
    00000a40: 	leal	0x7(%rax), %esi
    00000a43: 	jmp	.Ltmp2606 # Offset: 2627
    00000a48: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2578:
    00000a50: 	testq	%r14, %r14
    00000a53: 	jne	.Ltmp2608 # Offset: 2643
    00000a59: 	movq	0x8(%rsp), %rax
    00000a5e: 	jmp	.Ltmp2609 # Offset: 2654
    00000a63: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2577:
    00000a68: 	leaq	0xc0(%rsp), %rax
    00000a70: 	xorl	%edx, %edx
    00000a72: 	movq	%r15, %rdi
    00000a75: 	movq	%rax, %rsi
    00000a78: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 2680
    00000a7d: 	movq	%rax, 0x150(%rsp)
    00000a85: 	movq	%rax, %rdi
    00000a88: 	movq	0xc0(%rsp), %rax
    00000a90: 	movq	%rax, 0x160(%rsp)
.Ltmp2748:
    00000a98: 	movq	0x70(%rsp), %rsi
    00000a9d: 	movq	%r14, %rdx
    00000aa0: 	callq	memcpy@PLT # Offset: 2720
    00000aa5: 	movq	0xc0(%rsp), %r14
    00000aad: 	movq	0x150(%rsp), %rax
    00000ab5: 	jmp	.Ltmp2609 # Offset: 2741
    00000aba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2570:
    00000ac0: 	movq	$0x0, 0x60(%rsp)
    00000ac9: 	xorl	%edi, %edi
    00000acb: 	jmp	.Ltmp2610 # Offset: 2763
.Ltmp2584:
    00000ad0: 	movdqu	0x10(%rax), %xmm6
    00000ad5: 	movaps	%xmm6, 0x1c0(%rsp)
    00000add: 	jmp	.Ltmp2611 # Offset: 2781
    00000ae2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2582:
    00000ae8: 	movdqu	0x10(%rax), %xmm6
    00000aed: 	movaps	%xmm6, 0x1a0(%rsp)
    00000af5: 	jmp	.Ltmp2612 # Offset: 2805
    00000afa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2597:
    00000b00: 	leal	0x5(%rax), %esi
    00000b03: 	jmp	.Ltmp2601 # Offset: 2819
    00000b08: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2598:
    00000b10: 	leal	0x6(%rax), %esi
    00000b13: 	jmp	.Ltmp2601 # Offset: 2835
    00000b18: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2581:
    00000b20: 	movq	0x38(%rsp), %rdi
    00000b25: 	movq	%r9, %rcx
    00000b28: 	xorl	%edx, %edx
    00000b2a: 	xorl	%esi, %esi
    00000b2c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@PLT # Offset: 2860
    00000b31: 	movq	0x28(%rsp), %rsi
    00000b36: 	leaq	0x10(%rax), %rdx
    00000b3a: 	movq	%rsi, 0x190(%rsp)
    00000b42: 	movq	(%rax), %rcx
    00000b45: 	cmpq	%rdx, %rcx
    00000b48: 	jne	.Ltmp2613 # Offset: 2888
    00000b4e: 	movdqu	0x10(%rax), %xmm4
    00000b53: 	movaps	%xmm4, 0x1a0(%rsp)
    00000b5b: 	jmp	.Ltmp2612 # Offset: 2907
.Ltmp2599:
    00000b60: 	leal	0x7(%rax), %esi
    00000b63: 	jmp	.Ltmp2601 # Offset: 2915
.Ltmp2590:
    00000b68: 	leaq	0xc0(%rsp), %rax
    00000b70: 	movl	$0x5, %r13d
    00000b76: 	leaq	_ZZNSt8__detail18__to_chars_10_implImEEvPcjT_E8__digits(%rip), %r12
    00000b7d: 	movq	%rax, 0x68(%rsp)
    00000b82: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2647:
    00000b88: 	movq	0x68(%rsp), %rdi
    00000b8d: 	pxor	%xmm0, %xmm0
    00000b91: 	movq	%r13, %rsi
    00000b94: 	movq	$0x0, 0xc0(%rsp)
    00000ba0: 	movq	$0x0, 0xc8(%rsp)
    00000bac: 	movaps	%xmm0, 0xd0(%rsp)
    00000bb4: 	movaps	%xmm0, 0xe0(%rsp)
    00000bbc: 	movaps	%xmm0, 0xf0(%rsp)
    00000bc4: 	movaps	%xmm0, 0x100(%rsp)
    00000bcc: 	callq	_ZNSt11_Deque_baseIaSaIaEE17_M_initialize_mapEm # Offset: 3020
    00000bd1: 	movq	0xe8(%rsp), %rbx
    00000bd9: 	movq	0x108(%rsp), %rbp
    00000be1: 	xorl	%eax, %eax
    00000be3: 	movq	%rbx, %rsi
    00000be6: 	cmpq	%rbp, %rbx
    00000be9: 	jae	.Ltmp2614 # Offset: 3049
    00000beb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2615:
    00000bf0: 	movq	(%rsi), %rdx
    00000bf3: 	addq	$0x8, %rsi
    00000bf7: 	leaq	0x9(%rdx), %rdi
    00000bfb: 	movb	$0x0, (%rdx)
    00000bfe: 	andq	$-0x8, %rdi
    00000c02: 	movq	$0x0, 0x1(%rdx)
    00000c0a: 	movq	$0x0, 0x1f8(%rdx)
    00000c15: 	subl	%edi, %edx
    00000c17: 	leal	0x200(%rdx), %ecx
    00000c1d: 	shrl	$0x3, %ecx
    00000c20: 	rep		stosq	%rax, %es:(%rdi)
    00000c23: 	cmpq	%rbp, %rsi
    00000c26: 	jb	.Ltmp2615 # Offset: 3110
.Ltmp2614:
    00000c28: 	movq	0xf0(%rsp), %rax
    00000c30: 	movq	0xf8(%rsp), %rdi
    00000c38: 	movq	%rax, 0x50(%rsp)
    00000c3d: 	movq	%rdi, 0x60(%rsp)
    00000c42: 	cmpq	%rdi, %rax
    00000c45: 	je	.Ltmp2616 # Offset: 3141
    00000c47: 	movq	0x50(%rsp), %rax
    00000c4c: 	movb	$0x0, (%rdi)
    00000c4f: 	leaq	0x1(%rdi), %rdi
    00000c53: 	cmpq	%rdi, %rax
    00000c56: 	je	.Ltmp2616 # Offset: 3158
    00000c58: 	movq	%rax, %rdx
    00000c5b: 	xorl	%esi, %esi
    00000c5d: 	subq	%rdi, %rdx
    00000c60: 	callq	memset@PLT # Offset: 3168
.Ltmp2616:
    00000c65: 	cmpq	$0x9, %r13
    00000c69: 	jbe	.Ltmp2617 # Offset: 3177
    00000c6f: 	cmpq	$0x63, %r13
    00000c73: 	jbe	.Ltmp2618 # Offset: 3187
    00000c79: 	cmpq	$0x3e7, %r13
    00000c80: 	jbe	.Ltmp2619 # Offset: 3200
    00000c86: 	cmpq	$0x270f, %r13
    00000c8d: 	jbe	.Ltmp2620 # Offset: 3213
    00000c93: 	movq	%r13, %rdx
    00000c96: 	movl	$0x1, %esi
    00000c9b: 	jmp	.Ltmp2621 # Offset: 3227
    00000c9d: 	nopl	(%rax) # Size: 3
.Ltmp2625:
    00000ca0: 	cmpq	$0xf423f, %rcx
    00000ca7: 	jbe	.Ltmp2622 # Offset: 3239
    00000cad: 	cmpq	$0x98967f, %rcx
    00000cb4: 	jbe	.Ltmp2623 # Offset: 3252
    00000cba: 	cmpq	$0x5f5e0ff, %rcx
    00000cc1: 	jbe	.Ltmp2624 # Offset: 3265
.Ltmp2621:
    00000cc7: 	movabsq	$0x346dc5d63886594b, %rax
    00000cd1: 	movq	%rdx, %rcx
    00000cd4: 	mulq	%rdx
    00000cd7: 	movl	%esi, %eax
    00000cd9: 	addl	$0x4, %esi
    00000cdc: 	shrq	$0xb, %rdx
    00000ce0: 	cmpq	$0x1869f, %rcx
    00000ce7: 	ja	.Ltmp2625 # Offset: 3303
.Ltmp2653:
    00000ce9: 	movq	0x10(%rsp), %rax
    00000cee: 	movq	0x38(%rsp), %rdi
    00000cf3: 	xorl	%edx, %edx
    00000cf5: 	movq	%rax, 0x170(%rsp)
    00000cfd: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEmc@PLT # Offset: 3325
    00000d02: 	movl	0x178(%rsp), %eax
    00000d09: 	movq	0x170(%rsp), %rdi
    00000d11: 	movq	%r13, %rcx
    00000d14: 	leal	-0x1(%rax), %esi
    00000d17: 	cmpq	$0x63, %r13
    00000d1b: 	jbe	.Ltmp2626 # Offset: 3355
    00000d1d: 	nopl	(%rax) # Size: 3
.Ltmp2627:
    00000d20: 	movabsq	$0x28f5c28f5c28f5c3, %rax
    00000d2a: 	movq	%rcx, %rdx
    00000d2d: 	shrq	$0x2, %rdx
    00000d31: 	mulq	%rdx
    00000d34: 	movq	%rdx, %r8
    00000d37: 	andq	$-0x4, %rdx
    00000d3b: 	shrq	$0x2, %r8
    00000d3f: 	addq	%r8, %rdx
    00000d42: 	leaq	(%rdx,%rdx,4), %rax
    00000d46: 	movq	%rcx, %rdx
    00000d49: 	shlq	$0x2, %rax
    00000d4d: 	subq	%rax, %rdx
    00000d50: 	movq	%rcx, %rax
    00000d53: 	movq	%r8, %rcx
    00000d56: 	movl	%esi, %r8d
    00000d59: 	movzbl	0x1(%r12,%rdx,2), %r9d
    00000d5f: 	movzbl	(%r12,%rdx,2), %edx
    00000d64: 	movb	%r9b, (%rdi,%r8)
    00000d68: 	leal	-0x1(%rsi), %r8d
    00000d6c: 	subl	$0x2, %esi
    00000d6f: 	movb	%dl, (%rdi,%r8)
    00000d73: 	cmpq	$0x270f, %rax
    00000d79: 	ja	.Ltmp2627 # Offset: 3449
.Ltmp2626:
    00000d7b: 	leal	0x30(%rcx), %eax
    00000d7e: 	cmpq	$0x9, %rcx
    00000d82: 	jbe	.Ltmp2628 # Offset: 3458
    00000d84: 	movzbl	0x1(%r12,%rcx,2), %eax
    00000d8a: 	movb	%al, 0x1(%rdi)
    00000d8d: 	movzbl	(%r12,%rcx,2), %eax
.Ltmp2628:
    00000d92: 	movb	%al, (%rdi)
    00000d94: 	movq	0x8(%rsp), %rax
    00000d99: 	movq	0x118(%rsp), %r14
    00000da1: 	movq	%rax, 0x150(%rsp)
    00000da9: 	movq	0x110(%rsp), %rax
    00000db1: 	movq	%rax, %rdi
    00000db4: 	movq	%rax, 0x70(%rsp)
    00000db9: 	addq	%r14, %rdi
    00000dbc: 	je	.Ltmp2629 # Offset: 3516
    00000dbe: 	testq	%rax, %rax
    00000dc1: 	je	.Ltmp2630 # Offset: 3521
.Ltmp2629:
    00000dc7: 	movq	%r14, 0xa0(%rsp)
    00000dcf: 	cmpq	$0xf, %r14
    00000dd3: 	ja	.Ltmp2631 # Offset: 3539
    00000dd9: 	cmpq	$0x1, %r14
    00000ddd: 	jne	.Ltmp2632 # Offset: 3549
    00000de3: 	movq	0x70(%rsp), %rax
    00000de8: 	movzbl	(%rax), %eax
    00000deb: 	movb	%al, 0x160(%rsp)
    00000df2: 	movq	0x8(%rsp), %rax
.Ltmp2649:
    00000df7: 	movq	%r14, 0x158(%rsp)
    00000dff: 	movb	$0x0, (%rax,%r14)
    00000e04: 	movabsq	$0x3fffffffffffffff, %rax
    00000e0e: 	cmpq	%rax, 0x158(%rsp)
    00000e16: 	je	.Ltmp2633 # Offset: 3606
    00000e1c: 	movl	$0x1, %edx
    00000e21: 	leaq	DATAat0x34149(%rip), %rsi
    00000e28: 	movq	%r15, %rdi
    00000e2b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3627
    00000e30: 	movq	0x158(%rsp), %r8
    00000e38: 	movq	0x178(%rsp), %rdx
    00000e40: 	movl	$0xf, %eax
    00000e45: 	movq	0x150(%rsp), %r9
    00000e4d: 	movq	%rax, %rdi
    00000e50: 	cmpq	0x8(%rsp), %r9
    00000e55: 	cmovneq	0x160(%rsp), %rdi
    00000e5e: 	leaq	(%r8,%rdx), %rcx
    00000e62: 	movq	0x170(%rsp), %rsi
    00000e6a: 	cmpq	%rdi, %rcx
    00000e6d: 	jbe	.Ltmp2634 # Offset: 3693
    00000e6f: 	cmpq	0x10(%rsp), %rsi
    00000e74: 	cmovneq	0x180(%rsp), %rax
    00000e7d: 	cmpq	%rax, %rcx
    00000e80: 	jbe	.Ltmp2635 # Offset: 3712
.Ltmp2634:
    00000e86: 	movq	%r15, %rdi
    00000e89: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3721
    00000e8e: 	movq	0x28(%rsp), %rdi
    00000e93: 	leaq	0x10(%rax), %rdx
    00000e97: 	movq	%rdi, 0x190(%rsp)
    00000e9f: 	movq	(%rax), %rcx
    00000ea2: 	cmpq	%rdx, %rcx
    00000ea5: 	je	.Ltmp2636 # Offset: 3749
.Ltmp2651:
    00000eab: 	movq	%rcx, 0x190(%rsp)
    00000eb3: 	movq	0x10(%rax), %rcx
    00000eb7: 	movq	%rcx, 0x1a0(%rsp)
.Ltmp2652:
    00000ebf: 	movq	0x8(%rax), %rcx
    00000ec3: 	movq	%rcx, 0x198(%rsp)
    00000ecb: 	movq	$0x0, 0x8(%rax)
    00000ed3: 	movb	$0x0, 0x10(%rax)
    00000ed7: 	movq	%rdx, (%rax)
    00000eda: 	movabsq	$0x3fffffffffffffff, %rax
    00000ee4: 	subq	0x198(%rsp), %rax
    00000eec: 	cmpq	$0xa, %rax
    00000ef0: 	jbe	.Ltmp2637 # Offset: 3824
    00000ef6: 	movq	0x40(%rsp), %rdi
    00000efb: 	movl	$0xb, %edx
    00000f00: 	leaq	DATAat0x342b2(%rip), %rsi
    00000f07: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3847
    00000f0c: 	movq	0x18(%rsp), %rdi
    00000f11: 	movq	0x50(%rsp), %xmm0
    00000f17: 	leaq	0x10(%rax), %rdx
    00000f1b: 	movq	%rdi, 0x1b0(%rsp)
    00000f23: 	movq	(%rax), %rcx
    00000f26: 	movhps	0x60(%rsp), %xmm0
    00000f2b: 	cmpq	%rdx, %rcx
    00000f2e: 	je	.Ltmp2638 # Offset: 3886
    00000f34: 	movq	%rcx, 0x1b0(%rsp)
    00000f3c: 	movq	0x10(%rax), %rcx
    00000f40: 	movq	%rcx, 0x1c0(%rsp)
.Ltmp2650:
    00000f48: 	movq	0x8(%rax), %rcx
    00000f4c: 	movq	%rbp, %xmm2
    00000f51: 	movq	%rbx, %xmm3
    00000f56: 	leaq	0xa0(%rsp), %r14
    00000f5e: 	leaq	0x80(%rsp), %rdi
    00000f66: 	movq	%r14, %rsi
    00000f69: 	movq	%rcx, 0x1b8(%rsp)
    00000f71: 	movq	0x48(%rsp), %rcx
    00000f76: 	movb	$0x0, 0x10(%rax)
    00000f7a: 	movq	0x100(%rsp), %xmm1
    00000f83: 	movq	%rdx, (%rax)
    00000f86: 	movq	%r13, %rdx
    00000f89: 	punpcklqdq	%xmm2, %xmm1
    00000f8d: 	movq	$0x0, 0x8(%rax)
    00000f95: 	movaps	%xmm0, 0xa0(%rsp)
    00000f9d: 	movq	0xe0(%rsp), %xmm0
    00000fa6: 	movaps	%xmm1, 0xb0(%rsp)
    00000fae: 	movq	0xd0(%rsp), %xmm1
    00000fb7: 	punpcklqdq	%xmm3, %xmm0
    00000fbb: 	movhps	0xd8(%rsp), %xmm1
    00000fc3: 	movaps	%xmm0, 0x90(%rsp)
    00000fcb: 	movaps	%xmm1, 0x80(%rsp)
    00000fd3: 	callq	_Z16TestOneContainerISt15_Deque_iteratorIaRaPaEEvT_S4_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4051
    00000fd8: 	movq	0x1b0(%rsp), %rdi
    00000fe0: 	cmpq	0x18(%rsp), %rdi
    00000fe5: 	je	.Ltmp2639 # Offset: 4069
    00000fe7: 	movq	0x1c0(%rsp), %rax
    00000fef: 	leaq	0x1(%rax), %rsi
    00000ff3: 	callq	_ZdlPvm@PLT # Offset: 4083
.Ltmp2639:
    00000ff8: 	movq	0x190(%rsp), %rdi
    00001000: 	cmpq	0x28(%rsp), %rdi
    00001005: 	je	.Ltmp2640 # Offset: 4101
    00001007: 	movq	0x1a0(%rsp), %rax
    0000100f: 	leaq	0x1(%rax), %rsi
    00001013: 	callq	_ZdlPvm@PLT # Offset: 4115
.Ltmp2640:
    00001018: 	movq	0x150(%rsp), %rdi
    00001020: 	cmpq	0x8(%rsp), %rdi
    00001025: 	je	.Ltmp2641 # Offset: 4133
    00001027: 	movq	0x160(%rsp), %rax
    0000102f: 	leaq	0x1(%rax), %rsi
    00001033: 	callq	_ZdlPvm@PLT # Offset: 4147
.Ltmp2641:
    00001038: 	movq	0x170(%rsp), %rdi
    00001040: 	cmpq	0x10(%rsp), %rdi
    00001045: 	je	.Ltmp2642 # Offset: 4165
    00001047: 	movq	0x180(%rsp), %rax
    0000104f: 	leaq	0x1(%rax), %rsi
    00001053: 	callq	_ZdlPvm@PLT # Offset: 4179
.Ltmp2642:
    00001058: 	movq	0xc0(%rsp), %r13
    00001060: 	testq	%r13, %r13
    00001063: 	je	.Ltmp2643 # Offset: 4195
    00001065: 	addq	$0x8, %rbp
    00001069: 	cmpq	%rbp, %rbx
    0000106c: 	jae	.Ltmp2644 # Offset: 4204
    0000106e: 	nop # Size: 2
.Ltmp2645:
    00001070: 	movq	(%rbx), %rdi
    00001073: 	movl	$0x200, %esi
    00001078: 	addq	$0x8, %rbx
    0000107c: 	callq	_ZdlPvm@PLT # Offset: 4220
    00001081: 	cmpq	%rbx, %rbp
    00001084: 	ja	.Ltmp2645 # Offset: 4228
.Ltmp2644:
    00001086: 	movq	0xc8(%rsp), %rax
    0000108e: 	movq	%r13, %rdi
    00001091: 	leaq	(,%rax,8), %rsi
    00001099: 	callq	_ZdlPvm@PLT # Offset: 4249
.Ltmp2643:
    0000109e: 	movq	0x30(%rsp), %rbx
    000010a3: 	cmpq	%rbx, 0x20(%rsp)
    000010a8: 	je	.Ltmp2646 # Offset: 4264
    000010ae: 	movq	%rbx, %rax
    000010b1: 	movq	(%rbx), %r13
    000010b4: 	addq	$0x8, %rax
    000010b8: 	movq	%rax, 0x30(%rsp)
    000010bd: 	testq	%r13, %r13
    000010c0: 	jns	.Ltmp2647 # Offset: 4288
    000010c6: 	leaq	DATAat0x34038(%rip), %rdi
    000010cd: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4301
    000010d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2632:
    000010d8: 	testq	%r14, %r14
    000010db: 	jne	.Ltmp2648 # Offset: 4315
    000010e1: 	movq	0x8(%rsp), %rax
    000010e6: 	jmp	.Ltmp2649 # Offset: 4326
    000010eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2631:
    000010f0: 	leaq	0xa0(%rsp), %rsi
    000010f8: 	xorl	%edx, %edx
    000010fa: 	movq	%r15, %rdi
    000010fd: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4349
    00001102: 	movq	%rax, 0x150(%rsp)
    0000110a: 	movq	%rax, %rdi
    0000110d: 	movq	0xa0(%rsp), %rax
    00001115: 	movq	%rax, 0x160(%rsp)
.Ltmp2747:
    0000111d: 	movq	0x70(%rsp), %rsi
    00001122: 	movq	%r14, %rdx
    00001125: 	callq	memcpy@PLT # Offset: 4389
    0000112a: 	movq	0xa0(%rsp), %r14
    00001132: 	movq	0x150(%rsp), %rax
    0000113a: 	jmp	.Ltmp2649 # Offset: 4410
    0000113f: 	nop # Size: 1
.Ltmp2638:
    00001140: 	movdqu	0x10(%rax), %xmm7
    00001145: 	movaps	%xmm7, 0x1c0(%rsp)
    0000114d: 	jmp	.Ltmp2650 # Offset: 4429
    00001152: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2635:
    00001158: 	movq	0x38(%rsp), %rdi
    0000115d: 	movq	%r9, %rcx
    00001160: 	xorl	%edx, %edx
    00001162: 	xorl	%esi, %esi
    00001164: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@PLT # Offset: 4452
    00001169: 	movq	0x28(%rsp), %rsi
    0000116e: 	leaq	0x10(%rax), %rdx
    00001172: 	movq	%rsi, 0x190(%rsp)
    0000117a: 	movq	(%rax), %rcx
    0000117d: 	cmpq	%rdx, %rcx
    00001180: 	jne	.Ltmp2651 # Offset: 4480
.Ltmp2636:
    00001186: 	movdqu	0x10(%rax), %xmm7
    0000118b: 	movaps	%xmm7, 0x1a0(%rsp)
    00001193: 	jmp	.Ltmp2652 # Offset: 4499
    00001198: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2622:
    000011a0: 	leal	0x5(%rax), %esi
    000011a3: 	jmp	.Ltmp2653 # Offset: 4515
    000011a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2623:
    000011b0: 	leal	0x6(%rax), %esi
    000011b3: 	jmp	.Ltmp2653 # Offset: 4531
    000011b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2624:
    000011c0: 	leal	0x7(%rax), %esi
    000011c3: 	jmp	.Ltmp2653 # Offset: 4547
.Ltmp2646:
    000011c8: 	movq	0x78(%rsp), %rax
    000011cd: 	movq	0x68(%rsp), %xmm5
    000011d3: 	movabsq	$0x346dc5d63886594b, %r12
    000011dd: 	leaq	_ZZNSt8__detail18__to_chars_10_implImEEvPcjT_E8__digits(%rip), %rbx
    000011e4: 	movq	%rax, 0x30(%rsp)
    000011e9: 	punpcklqdq	%xmm5, %xmm5
    000011ed: 	movaps	%xmm5, 0x50(%rsp)
.Ltmp2685:
    000011f2: 	movq	0x30(%rsp), %rax
    000011f7: 	movdqa	0x50(%rsp), %xmm7
    000011fd: 	movq	$0x0, 0xd0(%rsp)
    00001209: 	movq	(%rax), %r13
    0000120c: 	movaps	%xmm7, 0xc0(%rsp)
    00001214: 	movq	%r13, %rbp
    00001217: 	testq	%r13, %r13
    0000121a: 	je	.Ltmp2654 # Offset: 4634
.Ltmp2655:
    00001220: 	movl	$0x18, %edi
    00001225: 	callq	_Znwm@PLT # Offset: 4645
    0000122a: 	movb	$0x0, 0x10(%rax)
    0000122e: 	movq	0x68(%rsp), %rsi
    00001233: 	movq	%rax, %rdi
    00001236: 	callq	_ZNSt8__detail15_List_node_base7_M_hookEPS0_@PLT # Offset: 4662
    0000123b: 	addq	$0x1, 0xd0(%rsp)
    00001244: 	subq	$0x1, %rbp
    00001248: 	jne	.Ltmp2655 # Offset: 4680
    0000124a: 	cmpq	$0x9, %r13
    0000124e: 	jbe	.Ltmp2654 # Offset: 4686
    00001254: 	cmpq	$0x63, %r13
    00001258: 	jbe	.Ltmp2656 # Offset: 4696
    0000125e: 	cmpq	$0x3e7, %r13
    00001265: 	jbe	.Ltmp2657 # Offset: 4709
    0000126b: 	cmpq	$0x270f, %r13
    00001272: 	jbe	.Ltmp2658 # Offset: 4722
    00001278: 	movq	%r13, %rdx
    0000127b: 	movl	$0x1, %esi
    00001280: 	jmp	.Ltmp2659 # Offset: 4736
    00001282: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2663:
    00001288: 	cmpq	$0xf423f, %rcx
    0000128f: 	jbe	.Ltmp2660 # Offset: 4751
    00001295: 	cmpq	$0x98967f, %rcx
    0000129c: 	jbe	.Ltmp2661 # Offset: 4764
    000012a2: 	cmpq	$0x5f5e0ff, %rcx
    000012a9: 	jbe	.Ltmp2662 # Offset: 4777
.Ltmp2659:
    000012af: 	movq	%rdx, %rax
    000012b2: 	movq	%rdx, %rcx
    000012b5: 	mulq	%r12
    000012b8: 	movl	%esi, %eax
    000012ba: 	addl	$0x4, %esi
    000012bd: 	shrq	$0xb, %rdx
    000012c1: 	cmpq	$0x1869f, %rcx
    000012c8: 	ja	.Ltmp2663 # Offset: 4808
.Ltmp2735:
    000012ca: 	movq	0x10(%rsp), %rax
    000012cf: 	movq	0x38(%rsp), %rdi
    000012d4: 	xorl	%edx, %edx
    000012d6: 	movq	%rax, 0x170(%rsp)
    000012de: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEmc@PLT # Offset: 4830
    000012e3: 	movl	0x178(%rsp), %eax
    000012ea: 	movq	0x170(%rsp), %rdi
    000012f2: 	movq	%r13, %rcx
    000012f5: 	leal	-0x1(%rax), %esi
    000012f8: 	cmpq	$0x63, %r13
    000012fc: 	jbe	.Ltmp2664 # Offset: 4860
    000012fe: 	nop # Size: 2
.Ltmp2665:
    00001300: 	movabsq	$0x28f5c28f5c28f5c3, %rax
    0000130a: 	movq	%rcx, %rdx
    0000130d: 	shrq	$0x2, %rdx
    00001311: 	mulq	%rdx
    00001314: 	movq	%rdx, %r8
    00001317: 	andq	$-0x4, %rdx
    0000131b: 	shrq	$0x2, %r8
    0000131f: 	addq	%r8, %rdx
    00001322: 	leaq	(%rdx,%rdx,4), %rax
    00001326: 	movq	%rcx, %rdx
    00001329: 	shlq	$0x2, %rax
    0000132d: 	subq	%rax, %rdx
    00001330: 	movq	%rcx, %rax
    00001333: 	movq	%r8, %rcx
    00001336: 	movl	%esi, %r8d
    00001339: 	movzbl	0x1(%rbx,%rdx,2), %r9d
    0000133f: 	movzbl	(%rbx,%rdx,2), %edx
    00001343: 	movb	%r9b, (%rdi,%r8)
    00001347: 	leal	-0x1(%rsi), %r8d
    0000134b: 	subl	$0x2, %esi
    0000134e: 	movb	%dl, (%rdi,%r8)
    00001352: 	cmpq	$0x270f, %rax
    00001358: 	ja	.Ltmp2665 # Offset: 4952
.Ltmp2664:
    0000135a: 	leal	0x30(%rcx), %eax
    0000135d: 	cmpq	$0x9, %rcx
    00001361: 	jbe	.Ltmp2666 # Offset: 4961
    00001363: 	movzbl	0x1(%rbx,%rcx,2), %eax
    00001368: 	movb	%al, 0x1(%rdi)
    0000136b: 	movzbl	(%rbx,%rcx,2), %eax
.Ltmp2666:
    0000136f: 	movb	%al, (%rdi)
    00001371: 	movq	0x8(%rsp), %rax
    00001376: 	movq	0x118(%rsp), %rbp
    0000137e: 	movq	%rax, 0x150(%rsp)
    00001386: 	movq	0x110(%rsp), %rax
    0000138e: 	movq	%rax, 0x60(%rsp)
    00001393: 	movq	%rax, %rsi
    00001396: 	addq	%rbp, %rax
    00001399: 	je	.Ltmp2667 # Offset: 5017
    0000139b: 	testq	%rsi, %rsi
    0000139e: 	je	.Ltmp2668 # Offset: 5022
.Ltmp2667:
    000013a4: 	movq	%rbp, 0xa0(%rsp)
    000013ac: 	cmpq	$0xf, %rbp
    000013b0: 	ja	.Ltmp2669 # Offset: 5040
    000013b6: 	cmpq	$0x1, %rbp
    000013ba: 	jne	.Ltmp2670 # Offset: 5050
    000013bc: 	movq	0x60(%rsp), %rax
    000013c1: 	movzbl	(%rax), %eax
    000013c4: 	movb	%al, 0x160(%rsp)
    000013cb: 	movq	0x8(%rsp), %rax
    000013d0: 	jmp	.Ltmp2671 # Offset: 5072
.Ltmp2543:
    000013d2: 	movl	$0x1, %esi
    000013d7: 	jmp	.Ltmp2606 # Offset: 5079
.Ltmp2544:
    000013dc: 	movl	$0x2, %esi
    000013e1: 	jmp	.Ltmp2606 # Offset: 5089
.Ltmp2545:
    000013e6: 	movl	$0x3, %esi
    000013eb: 	jmp	.Ltmp2606 # Offset: 5099
.Ltmp2546:
    000013f0: 	movl	$0x4, %esi
    000013f5: 	jmp	.Ltmp2606 # Offset: 5109
.Ltmp2670:
    000013fa: 	testq	%rbp, %rbp
    000013fd: 	jne	.Ltmp2672 # Offset: 5117
    00001403: 	movq	0x8(%rsp), %rax
.Ltmp2671:
    00001408: 	movq	%rbp, 0x158(%rsp)
    00001410: 	movb	$0x0, (%rax,%rbp)
    00001414: 	movabsq	$0x3fffffffffffffff, %rax
    0000141e: 	cmpq	%rax, 0x158(%rsp)
    00001426: 	je	.Ltmp2673 # Offset: 5158
    0000142c: 	movl	$0x1, %edx
    00001431: 	leaq	DATAat0x34149(%rip), %rsi
    00001438: 	movq	%r15, %rdi
    0000143b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5179
    00001440: 	movq	0x158(%rsp), %r8
    00001448: 	movq	0x178(%rsp), %rdx
    00001450: 	movl	$0xf, %eax
    00001455: 	movq	0x150(%rsp), %r9
    0000145d: 	movq	%rax, %rdi
    00001460: 	cmpq	0x8(%rsp), %r9
    00001465: 	cmovneq	0x160(%rsp), %rdi
    0000146e: 	leaq	(%r8,%rdx), %rcx
    00001472: 	movq	0x170(%rsp), %rsi
    0000147a: 	cmpq	%rdi, %rcx
    0000147d: 	jbe	.Ltmp2674 # Offset: 5245
    0000147f: 	cmpq	0x10(%rsp), %rsi
    00001484: 	cmovneq	0x180(%rsp), %rax
    0000148d: 	cmpq	%rax, %rcx
    00001490: 	jbe	.Ltmp2675 # Offset: 5264
.Ltmp2674:
    00001496: 	movq	%r15, %rdi
    00001499: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5273
    0000149e: 	movq	0x28(%rsp), %rsi
    000014a3: 	leaq	0x10(%rax), %rdx
    000014a7: 	movq	%rsi, 0x190(%rsp)
    000014af: 	movq	(%rax), %rcx
    000014b2: 	cmpq	%rdx, %rcx
    000014b5: 	je	.Ltmp2676 # Offset: 5301
.Ltmp2737:
    000014bb: 	movq	%rcx, 0x190(%rsp)
    000014c3: 	movq	0x10(%rax), %rcx
    000014c7: 	movq	%rcx, 0x1a0(%rsp)
.Ltmp2736:
    000014cf: 	movq	0x8(%rax), %rcx
    000014d3: 	movq	%rcx, 0x198(%rsp)
    000014db: 	movq	$0x0, 0x8(%rax)
    000014e3: 	movb	$0x0, 0x10(%rax)
    000014e7: 	movq	%rdx, (%rax)
    000014ea: 	movabsq	$0x3fffffffffffffff, %rax
    000014f4: 	subq	0x198(%rsp), %rax
    000014fc: 	cmpq	$0x9, %rax
    00001500: 	jbe	.Ltmp2677 # Offset: 5376
    00001506: 	movq	0x40(%rsp), %rdi
    0000150b: 	movl	$0xa, %edx
    00001510: 	leaq	DATAat0x342be(%rip), %rsi
    00001517: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5399
    0000151c: 	movq	0x18(%rsp), %rsi
    00001521: 	leaq	0x10(%rax), %rdx
    00001525: 	movq	%rsi, 0x1b0(%rsp)
    0000152d: 	movq	(%rax), %rcx
    00001530: 	cmpq	%rdx, %rcx
    00001533: 	je	.Ltmp2678 # Offset: 5427
    00001539: 	movq	%rcx, 0x1b0(%rsp)
    00001541: 	movq	0x10(%rax), %rcx
    00001545: 	movq	%rcx, 0x1c0(%rsp)
.Ltmp2734:
    0000154d: 	movq	0x8(%rax), %rcx
    00001551: 	movq	0x68(%rsp), %rsi
    00001556: 	movq	%rcx, 0x1b8(%rsp)
    0000155e: 	movq	0x48(%rsp), %rcx
    00001563: 	movq	%rdx, (%rax)
    00001566: 	movq	%r13, %rdx
    00001569: 	movb	$0x0, 0x10(%rax)
    0000156d: 	movq	0xc0(%rsp), %rdi
    00001575: 	movq	$0x0, 0x8(%rax)
    0000157d: 	callq	_Z16TestOneContainerISt14_List_iteratorIaEEvT_S2_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5501
    00001582: 	movq	0x1b0(%rsp), %rdi
    0000158a: 	cmpq	0x18(%rsp), %rdi
    0000158f: 	je	.Ltmp2679 # Offset: 5519
    00001591: 	movq	0x1c0(%rsp), %rax
    00001599: 	leaq	0x1(%rax), %rsi
    0000159d: 	callq	_ZdlPvm@PLT # Offset: 5533
.Ltmp2679:
    000015a2: 	movq	0x190(%rsp), %rdi
    000015aa: 	cmpq	0x28(%rsp), %rdi
    000015af: 	je	.Ltmp2680 # Offset: 5551
    000015b1: 	movq	0x1a0(%rsp), %rax
    000015b9: 	leaq	0x1(%rax), %rsi
    000015bd: 	callq	_ZdlPvm@PLT # Offset: 5565
.Ltmp2680:
    000015c2: 	movq	0x150(%rsp), %rdi
    000015ca: 	cmpq	0x8(%rsp), %rdi
    000015cf: 	je	.Ltmp2681 # Offset: 5583
    000015d1: 	movq	0x160(%rsp), %rax
    000015d9: 	leaq	0x1(%rax), %rsi
    000015dd: 	callq	_ZdlPvm@PLT # Offset: 5597
.Ltmp2681:
    000015e2: 	movq	0x170(%rsp), %rdi
    000015ea: 	cmpq	0x10(%rsp), %rdi
    000015ef: 	je	.Ltmp2682 # Offset: 5615
    000015f1: 	movq	0x180(%rsp), %rax
    000015f9: 	leaq	0x1(%rax), %rsi
    000015fd: 	callq	_ZdlPvm@PLT # Offset: 5629
.Ltmp2682:
    00001602: 	movq	0xc0(%rsp), %rbp
    0000160a: 	movq	0x68(%rsp), %r13
    0000160f: 	cmpq	0x68(%rsp), %rbp
    00001614: 	je	.Ltmp2683 # Offset: 5652
    00001616: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2684:
    00001620: 	movq	%rbp, %rdi
    00001623: 	movq	(%rbp), %rbp
    00001627: 	movl	$0x18, %esi
    0000162c: 	callq	_ZdlPvm@PLT # Offset: 5676
    00001631: 	cmpq	%r13, %rbp
    00001634: 	jne	.Ltmp2684 # Offset: 5684
.Ltmp2683:
    00001636: 	addq	$0x8, 0x30(%rsp)
    0000163c: 	movq	0x30(%rsp), %rax
    00001641: 	cmpq	%rax, 0x20(%rsp)
    00001646: 	jne	.Ltmp2685 # Offset: 5702
    0000164c: 	leaq	_ZZNSt8__detail18__to_chars_10_implImEEvPcjT_E8__digits(%rip), %r13
.Ltmp2731:
    00001653: 	movq	0x78(%rsp), %rax
    00001658: 	movq	$0x0, 0xa0(%rsp)
    00001664: 	movq	(%rax), %r12
    00001667: 	testq	%r12, %r12
    0000166a: 	je	.Ltmp2686 # Offset: 5738
    00001670: 	movq	%r12, %rbx
    00001673: 	movq	%r14, %rax
.Ltmp2687:
    00001676: 	movl	$0x10, %edi
    0000167b: 	movq	%rax, %rbp
    0000167e: 	callq	_Znwm@PLT # Offset: 5758
    00001683: 	movq	$0x0, (%rax)
    0000168a: 	movb	$0x0, 0x8(%rax)
    0000168e: 	movq	%rax, (%rbp)
    00001692: 	subq	$0x1, %rbx
    00001696: 	jne	.Ltmp2687 # Offset: 5782
    00001698: 	movq	0xa0(%rsp), %rbp
    000016a0: 	cmpq	$0x9, %r12
    000016a4: 	jbe	.Ltmp2688 # Offset: 5796
    000016aa: 	cmpq	$0x63, %r12
    000016ae: 	jbe	.Ltmp2689 # Offset: 5806
    000016b4: 	cmpq	$0x3e7, %r12
    000016bb: 	jbe	.Ltmp2690 # Offset: 5819
    000016c1: 	cmpq	$0x270f, %r12
    000016c8: 	jbe	.Ltmp2691 # Offset: 5832
    000016ce: 	movq	%r12, %rdx
    000016d1: 	movl	$0x1, %ecx
    000016d6: 	jmp	.Ltmp2692 # Offset: 5846
.Ltmp2696:
    000016d8: 	cmpq	$0xf423f, %rsi
    000016df: 	jbe	.Ltmp2693 # Offset: 5855
    000016e5: 	cmpq	$0x98967f, %rsi
    000016ec: 	jbe	.Ltmp2694 # Offset: 5868
    000016f2: 	cmpq	$0x5f5e0ff, %rsi
    000016f9: 	jbe	.Ltmp2695 # Offset: 5881
.Ltmp2692:
    000016ff: 	movabsq	$0x346dc5d63886594b, %rax
    00001709: 	movq	%rdx, %rsi
    0000170c: 	mulq	%rdx
    0000170f: 	movl	%ecx, %eax
    00001711: 	addl	$0x4, %ecx
    00001714: 	shrq	$0xb, %rdx
    00001718: 	cmpq	$0x1869f, %rsi
    0000171f: 	ja	.Ltmp2696 # Offset: 5919
    00001721: 	movl	%ecx, %esi
.Ltmp2742:
    00001723: 	movq	0x8(%rsp), %rax
    00001728: 	xorl	%edx, %edx
    0000172a: 	movq	%r15, %rdi
    0000172d: 	movq	%rax, 0x150(%rsp)
    00001735: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEmc@PLT # Offset: 5941
    0000173a: 	movl	0x158(%rsp), %eax
    00001741: 	movq	0x150(%rsp), %rdi
    00001749: 	movq	%r12, %rcx
    0000174c: 	leal	-0x1(%rax), %esi
    0000174f: 	cmpq	$0x63, %r12
    00001753: 	jbe	.Ltmp2697 # Offset: 5971
.Ltmp2698:
    00001755: 	movabsq	$0x28f5c28f5c28f5c3, %rax
    0000175f: 	movq	%rcx, %rdx
    00001762: 	shrq	$0x2, %rdx
    00001766: 	mulq	%rdx
    00001769: 	movq	%rdx, %r8
    0000176c: 	andq	$-0x4, %rdx
    00001770: 	shrq	$0x2, %r8
    00001774: 	leaq	(%rdx,%r8), %rax
    00001778: 	movq	%rcx, %rdx
    0000177b: 	leaq	(%rax,%rax,4), %rax
    0000177f: 	shlq	$0x2, %rax
    00001783: 	subq	%rax, %rdx
    00001786: 	movq	%rcx, %rax
    00001789: 	movq	%r8, %rcx
    0000178c: 	movl	%esi, %r8d
    0000178f: 	movzbl	0x1(%r13,%rdx,2), %r9d
    00001795: 	movzbl	(%r13,%rdx,2), %edx
    0000179b: 	movb	%r9b, (%rdi,%r8)
    0000179f: 	leal	-0x1(%rsi), %r8d
    000017a3: 	subl	$0x2, %esi
    000017a6: 	movb	%dl, (%rdi,%r8)
    000017aa: 	cmpq	$0x270f, %rax
    000017b0: 	ja	.Ltmp2698 # Offset: 6064
.Ltmp2697:
    000017b2: 	leal	0x30(%rcx), %eax
    000017b5: 	cmpq	$0x9, %rcx
    000017b9: 	jbe	.Ltmp2699 # Offset: 6073
    000017bb: 	movzbl	0x1(%r13,%rcx,2), %eax
    000017c1: 	movb	%al, 0x1(%rdi)
    000017c4: 	movzbl	(%r13,%rcx,2), %eax
.Ltmp2699:
    000017ca: 	movb	%al, (%rdi)
    000017cc: 	leaq	0x140(%rsp), %rax
    000017d4: 	movq	0x118(%rsp), %rbx
    000017dc: 	movq	%rax, 0x30(%rsp)
    000017e1: 	movq	%rax, 0x130(%rsp)
    000017e9: 	movq	0x110(%rsp), %rax
    000017f1: 	movq	%rax, 0x50(%rsp)
    000017f6: 	movq	%rax, %rsi
    000017f9: 	addq	%rbx, %rax
    000017fc: 	je	.Ltmp2700 # Offset: 6140
    000017fe: 	testq	%rsi, %rsi
    00001801: 	je	.Ltmp2701 # Offset: 6145
.Ltmp2700:
    00001807: 	movq	%rbx, 0xc0(%rsp)
    0000180f: 	cmpq	$0xf, %rbx
    00001813: 	ja	.Ltmp2702 # Offset: 6163
    00001819: 	cmpq	$0x1, %rbx
    0000181d: 	jne	.Ltmp2703 # Offset: 6173
    00001823: 	movq	0x50(%rsp), %rax
    00001828: 	movzbl	(%rax), %eax
    0000182b: 	movb	%al, 0x140(%rsp)
    00001832: 	movq	0x30(%rsp), %rax
.Ltmp2739:
    00001837: 	movq	%rbx, 0x138(%rsp)
    0000183f: 	movb	$0x0, (%rax,%rbx)
    00001843: 	movabsq	$0x3fffffffffffffff, %rax
    0000184d: 	cmpq	%rax, 0x138(%rsp)
    00001855: 	je	.Ltmp2704 # Offset: 6229
    0000185b: 	leaq	0x130(%rsp), %rbx
    00001863: 	movl	$0x1, %edx
    00001868: 	leaq	DATAat0x34149(%rip), %rsi
    0000186f: 	movq	%rbx, %rdi
    00001872: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 6258
    00001877: 	movq	0x138(%rsp), %r8
    0000187f: 	movq	0x158(%rsp), %rdx
    00001887: 	movl	$0xf, %eax
    0000188c: 	movq	0x130(%rsp), %rcx
    00001894: 	movq	%rax, %r9
    00001897: 	cmpq	0x30(%rsp), %rcx
    0000189c: 	cmovneq	0x140(%rsp), %r9
    000018a5: 	leaq	(%r8,%rdx), %rdi
    000018a9: 	movq	0x150(%rsp), %rsi
    000018b1: 	cmpq	%r9, %rdi
    000018b4: 	jbe	.Ltmp2705 # Offset: 6324
    000018b6: 	cmpq	0x8(%rsp), %rsi
    000018bb: 	cmovneq	0x160(%rsp), %rax
    000018c4: 	cmpq	%rax, %rdi
    000018c7: 	jbe	.Ltmp2706 # Offset: 6343
.Ltmp2705:
    000018cd: 	movq	%rbx, %rdi
    000018d0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 6352
    000018d5: 	movq	0x10(%rsp), %rbx
    000018da: 	leaq	0x10(%rax), %rdx
    000018de: 	movq	%rbx, 0x170(%rsp)
    000018e6: 	movq	(%rax), %rcx
    000018e9: 	cmpq	%rdx, %rcx
    000018ec: 	je	.Ltmp2707 # Offset: 6380
.Ltmp2743:
    000018f2: 	movq	%rcx, 0x170(%rsp)
    000018fa: 	movq	0x10(%rax), %rcx
    000018fe: 	movq	%rcx, 0x180(%rsp)
.Ltmp2741:
    00001906: 	movq	0x8(%rax), %rcx
    0000190a: 	movq	%rcx, 0x178(%rsp)
    00001912: 	movq	$0x0, 0x8(%rax)
    0000191a: 	movb	$0x0, 0x10(%rax)
    0000191e: 	movq	%rdx, (%rax)
    00001921: 	movabsq	$0x3fffffffffffffff, %rax
    0000192b: 	subq	0x178(%rsp), %rax
    00001933: 	cmpq	$0x11, %rax
    00001937: 	jbe	.Ltmp2708 # Offset: 6455
    0000193d: 	movq	0x38(%rsp), %rdi
    00001942: 	movl	$0x12, %edx
    00001947: 	leaq	DATAat0x342c9(%rip), %rsi
    0000194e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 6478
    00001953: 	movq	0x28(%rsp), %rbx
    00001958: 	leaq	0x10(%rax), %rdx
    0000195c: 	movq	%rbx, 0x190(%rsp)
    00001964: 	movq	(%rax), %rcx
    00001967: 	cmpq	%rdx, %rcx
    0000196a: 	je	.Ltmp2709 # Offset: 6506
    00001970: 	movq	%rcx, 0x190(%rsp)
    00001978: 	movq	0x10(%rax), %rcx
    0000197c: 	movq	%rcx, 0x1a0(%rsp)
.Ltmp2740:
    00001984: 	movq	0x8(%rax), %rcx
    00001988: 	movq	0x48(%rsp), %rbx
    0000198d: 	movq	0x40(%rsp), %rsi
    00001992: 	movq	%rcx, 0x198(%rsp)
    0000199a: 	movq	%rbx, %rdi
    0000199d: 	movq	%rdx, (%rax)
    000019a0: 	leaq	DATAat0x3418f(%rip), %rdx
    000019a7: 	movq	$0x0, 0x8(%rax)
    000019af: 	movb	$0x0, 0x10(%rax)
    000019b3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6579
    000019b8: 	xorl	%r9d, %r9d
    000019bb: 	movq	%rbx, %r8
    000019be: 	leaq	_Z14std_lowerboundISt18_Fwd_list_iteratorIaEaET_S2_S2_T0_(%rip), %rcx
    000019c5: 	movq	%r12, %rdx
    000019c8: 	xorl	%esi, %esi
    000019ca: 	movq	%rbp, %rdi
    000019cd: 	callq	"_Z13TestOneSearchISt18_Fwd_list_iteratorIaEPFS1_S1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1" # Offset: 6605
    000019d2: 	movq	0x1b0(%rsp), %rdi
    000019da: 	cmpq	0x18(%rsp), %rdi
    000019df: 	je	.Ltmp2710 # Offset: 6623
    000019e1: 	movq	0x1c0(%rsp), %rax
    000019e9: 	leaq	0x1(%rax), %rsi
    000019ed: 	callq	_ZdlPvm@PLT # Offset: 6637
.Ltmp2710:
    000019f2: 	movq	0x48(%rsp), %rbx
    000019f7: 	movq	0x40(%rsp), %rsi
    000019fc: 	leaq	DATAat0x341a1(%rip), %rdx
    00001a03: 	movq	%rbx, %rdi
    00001a06: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6662
    00001a0b: 	xorl	%r9d, %r9d
    00001a0e: 	movq	%rbx, %r8
    00001a11: 	leaq	_Z12lower_bound1ISt18_Fwd_list_iteratorIaEaET_S2_S2_T0_(%rip), %rcx
    00001a18: 	movq	%r12, %rdx
    00001a1b: 	xorl	%esi, %esi
    00001a1d: 	movq	%rbp, %rdi
    00001a20: 	callq	"_Z13TestOneSearchISt18_Fwd_list_iteratorIaEPFS1_S1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1" # Offset: 6688
    00001a25: 	movq	0x1b0(%rsp), %rdi
    00001a2d: 	cmpq	0x18(%rsp), %rdi
    00001a32: 	je	.Ltmp2711 # Offset: 6706
    00001a34: 	movq	0x1c0(%rsp), %rax
    00001a3c: 	leaq	0x1(%rax), %rsi
    00001a40: 	callq	_ZdlPvm@PLT # Offset: 6720
.Ltmp2711:
    00001a45: 	movq	0x48(%rsp), %rbx
    00001a4a: 	movq	0x40(%rsp), %rsi
    00001a4f: 	leaq	DATAat0x341af(%rip), %rdx
    00001a56: 	movq	%rbx, %rdi
    00001a59: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6745
    00001a5e: 	xorl	%r9d, %r9d
    00001a61: 	movq	%rbx, %r8
    00001a64: 	leaq	_Z12lower_bound2ISt18_Fwd_list_iteratorIaEaET_S2_S2_T0_(%rip), %rcx
    00001a6b: 	movq	%r12, %rdx
    00001a6e: 	xorl	%esi, %esi
    00001a70: 	movq	%rbp, %rdi
    00001a73: 	callq	"_Z13TestOneSearchISt18_Fwd_list_iteratorIaEPFS1_S1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1" # Offset: 6771
    00001a78: 	movq	0x1b0(%rsp), %rdi
    00001a80: 	cmpq	0x18(%rsp), %rdi
    00001a85: 	je	.Ltmp2712 # Offset: 6789
    00001a87: 	movq	0x1c0(%rsp), %rax
    00001a8f: 	leaq	0x1(%rax), %rsi
    00001a93: 	callq	_ZdlPvm@PLT # Offset: 6803
.Ltmp2712:
    00001a98: 	movq	0x48(%rsp), %rbx
    00001a9d: 	movq	0x40(%rsp), %rsi
    00001aa2: 	leaq	DATAat0x341bd(%rip), %rdx
    00001aa9: 	movq	%rbx, %rdi
    00001aac: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6828
    00001ab1: 	xorl	%r9d, %r9d
    00001ab4: 	movq	%rbx, %r8
    00001ab7: 	leaq	_Z17lower_bound_recurISt18_Fwd_list_iteratorIaEaET_S2_S2_T0_(%rip), %rcx
    00001abe: 	movq	%r12, %rdx
    00001ac1: 	xorl	%esi, %esi
    00001ac3: 	movq	%rbp, %rdi
    00001ac6: 	callq	"_Z13TestOneSearchISt18_Fwd_list_iteratorIaEPFS1_S1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1" # Offset: 6854
    00001acb: 	movq	0x1b0(%rsp), %rdi
    00001ad3: 	cmpq	0x18(%rsp), %rdi
    00001ad8: 	je	.Ltmp2713 # Offset: 6872
    00001ada: 	movq	0x1c0(%rsp), %rax
    00001ae2: 	leaq	0x1(%rax), %rsi
    00001ae6: 	callq	_ZdlPvm@PLT # Offset: 6886
.Ltmp2713:
    00001aeb: 	movq	0x48(%rsp), %rbx
    00001af0: 	movq	0x40(%rsp), %rsi
    00001af5: 	leaq	DATAat0x341d4(%rip), %rdx
    00001afc: 	movq	%rbx, %rdi
    00001aff: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6911
    00001b04: 	movl	$0x1, %r9d
    00001b0a: 	movq	%rbx, %r8
    00001b0d: 	movq	%r12, %rdx
    00001b10: 	xorl	%esi, %esi
    00001b12: 	leaq	_Z14std_upperboundISt18_Fwd_list_iteratorIaEaET_S2_S2_T0_(%rip), %rcx
    00001b19: 	movq	%rbp, %rdi
    00001b1c: 	callq	"_Z13TestOneSearchISt18_Fwd_list_iteratorIaEPFS1_S1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1" # Offset: 6940
    00001b21: 	movq	0x1b0(%rsp), %rdi
    00001b29: 	cmpq	0x18(%rsp), %rdi
    00001b2e: 	je	.Ltmp2714 # Offset: 6958
    00001b30: 	movq	0x1c0(%rsp), %rax
    00001b38: 	leaq	0x1(%rax), %rsi
    00001b3c: 	callq	_ZdlPvm@PLT # Offset: 6972
.Ltmp2714:
    00001b41: 	movq	0x48(%rsp), %rbx
    00001b46: 	movq	0x40(%rsp), %rsi
    00001b4b: 	leaq	DATAat0x341e6(%rip), %rdx
    00001b52: 	movq	%rbx, %rdi
    00001b55: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6997
    00001b5a: 	movl	$0x1, %r9d
    00001b60: 	movq	%rbx, %r8
    00001b63: 	movq	%r12, %rdx
    00001b66: 	xorl	%esi, %esi
    00001b68: 	leaq	_Z12upper_bound1ISt18_Fwd_list_iteratorIaEaET_S2_S2_T0_(%rip), %rcx
    00001b6f: 	movq	%rbp, %rdi
    00001b72: 	callq	"_Z13TestOneSearchISt18_Fwd_list_iteratorIaEPFS1_S1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1" # Offset: 7026
    00001b77: 	movq	0x1b0(%rsp), %rdi
    00001b7f: 	cmpq	0x18(%rsp), %rdi
    00001b84: 	je	.Ltmp2715 # Offset: 7044
    00001b86: 	movq	0x1c0(%rsp), %rax
    00001b8e: 	leaq	0x1(%rax), %rsi
    00001b92: 	callq	_ZdlPvm@PLT # Offset: 7058
.Ltmp2715:
    00001b97: 	movq	0x48(%rsp), %rbx
    00001b9c: 	movq	0x40(%rsp), %rsi
    00001ba1: 	leaq	DATAat0x341f4(%rip), %rdx
    00001ba8: 	movq	%rbx, %rdi
    00001bab: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7083
    00001bb0: 	movl	$0x1, %r9d
    00001bb6: 	movq	%rbx, %r8
    00001bb9: 	movq	%r12, %rdx
    00001bbc: 	xorl	%esi, %esi
    00001bbe: 	leaq	_Z12upper_bound2ISt18_Fwd_list_iteratorIaEaET_S2_S2_T0_(%rip), %rcx
    00001bc5: 	movq	%rbp, %rdi
    00001bc8: 	callq	"_Z13TestOneSearchISt18_Fwd_list_iteratorIaEPFS1_S1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1" # Offset: 7112
    00001bcd: 	movq	0x1b0(%rsp), %rdi
    00001bd5: 	cmpq	0x18(%rsp), %rdi
    00001bda: 	je	.Ltmp2716 # Offset: 7130
    00001bdc: 	movq	0x1c0(%rsp), %rax
    00001be4: 	leaq	0x1(%rax), %rsi
    00001be8: 	callq	_ZdlPvm@PLT # Offset: 7144
.Ltmp2716:
    00001bed: 	movq	0x48(%rsp), %rbx
    00001bf2: 	movq	0x40(%rsp), %rsi
    00001bf7: 	leaq	DATAat0x34202(%rip), %rdx
    00001bfe: 	movq	%rbx, %rdi
    00001c01: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7169
    00001c06: 	movl	$0x1, %r9d
    00001c0c: 	movq	%rbx, %r8
    00001c0f: 	movq	%r12, %rdx
    00001c12: 	xorl	%esi, %esi
    00001c14: 	leaq	_Z17upper_bound_recurISt18_Fwd_list_iteratorIaEaET_S2_S2_T0_(%rip), %rcx
    00001c1b: 	movq	%rbp, %rdi
    00001c1e: 	callq	"_Z13TestOneSearchISt18_Fwd_list_iteratorIaEPFS1_S1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1" # Offset: 7198
    00001c23: 	movq	0x1b0(%rsp), %rdi
    00001c2b: 	cmpq	0x18(%rsp), %rdi
    00001c30: 	je	.Ltmp2717 # Offset: 7216
    00001c32: 	movq	0x1c0(%rsp), %rax
    00001c3a: 	leaq	0x1(%rax), %rsi
    00001c3e: 	callq	_ZdlPvm@PLT # Offset: 7230
.Ltmp2717:
    00001c43: 	movq	0x48(%rsp), %rbx
    00001c48: 	movq	0x40(%rsp), %rsi
    00001c4d: 	leaq	DATAat0x34219(%rip), %rdx
    00001c54: 	movq	%rbx, %rdi
    00001c57: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7255
    00001c5c: 	xorl	%r9d, %r9d
    00001c5f: 	movq	%rbx, %r8
    00001c62: 	leaq	_Z16std_binarysearchISt18_Fwd_list_iteratorIaEaEbT_S2_T0_(%rip), %rcx
    00001c69: 	movq	%r12, %rdx
    00001c6c: 	xorl	%esi, %esi
    00001c6e: 	movq	%rbp, %rdi
    00001c71: 	callq	_Z13TestOneSearchISt18_Fwd_list_iteratorIaEPFbS1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 7281
    00001c76: 	movq	0x1b0(%rsp), %rdi
    00001c7e: 	cmpq	0x18(%rsp), %rdi
    00001c83: 	je	.Ltmp2718 # Offset: 7299
    00001c85: 	movq	0x1c0(%rsp), %rax
    00001c8d: 	leaq	0x1(%rax), %rsi
    00001c91: 	callq	_ZdlPvm@PLT # Offset: 7313
.Ltmp2718:
    00001c96: 	movq	0x48(%rsp), %rbx
    00001c9b: 	movq	0x40(%rsp), %rsi
    00001ca0: 	leaq	DATAat0x3422d(%rip), %rdx
    00001ca7: 	movq	%rbx, %rdi
    00001caa: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7338
    00001caf: 	xorl	%r9d, %r9d
    00001cb2: 	movq	%rbx, %r8
    00001cb5: 	leaq	_Z13binarysearch1ISt18_Fwd_list_iteratorIaEaEbT_S2_T0_(%rip), %rcx
    00001cbc: 	movq	%r12, %rdx
    00001cbf: 	xorl	%esi, %esi
    00001cc1: 	movq	%rbp, %rdi
    00001cc4: 	callq	_Z13TestOneSearchISt18_Fwd_list_iteratorIaEPFbS1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 7364
    00001cc9: 	movq	0x1b0(%rsp), %rdi
    00001cd1: 	cmpq	0x18(%rsp), %rdi
    00001cd6: 	je	.Ltmp2719 # Offset: 7382
    00001cd8: 	movq	0x1c0(%rsp), %rax
    00001ce0: 	leaq	0x1(%rax), %rsi
    00001ce4: 	callq	_ZdlPvm@PLT # Offset: 7396
.Ltmp2719:
    00001ce9: 	movq	0x48(%rsp), %rbx
    00001cee: 	movq	0x40(%rsp), %rsi
    00001cf3: 	leaq	DATAat0x3423d(%rip), %rdx
    00001cfa: 	movq	%rbx, %rdi
    00001cfd: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7421
    00001d02: 	xorl	%r9d, %r9d
    00001d05: 	movq	%rbx, %r8
    00001d08: 	leaq	_Z13binarysearch2ISt18_Fwd_list_iteratorIaEaEbT_S2_T0_(%rip), %rcx
    00001d0f: 	movq	%r12, %rdx
    00001d12: 	xorl	%esi, %esi
    00001d14: 	movq	%rbp, %rdi
    00001d17: 	callq	_Z13TestOneSearchISt18_Fwd_list_iteratorIaEPFbS1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 7447
    00001d1c: 	movq	0x1b0(%rsp), %rdi
    00001d24: 	cmpq	0x18(%rsp), %rdi
    00001d29: 	je	.Ltmp2720 # Offset: 7465
    00001d2b: 	movq	0x1c0(%rsp), %rax
    00001d33: 	leaq	0x1(%rax), %rsi
    00001d37: 	callq	_ZdlPvm@PLT # Offset: 7479
.Ltmp2720:
    00001d3c: 	movq	0x48(%rsp), %rbx
    00001d41: 	movq	0x40(%rsp), %rsi
    00001d46: 	leaq	DATAat0x3424d(%rip), %rdx
    00001d4d: 	movq	%rbx, %rdi
    00001d50: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7504
    00001d55: 	xorl	%r9d, %r9d
    00001d58: 	movq	%rbx, %r8
    00001d5b: 	leaq	_Z13binarysearch3ISt18_Fwd_list_iteratorIaEaEbT_S2_T0_(%rip), %rcx
    00001d62: 	movq	%r12, %rdx
    00001d65: 	xorl	%esi, %esi
    00001d67: 	movq	%rbp, %rdi
    00001d6a: 	callq	_Z13TestOneSearchISt18_Fwd_list_iteratorIaEPFbS1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 7530
    00001d6f: 	movq	0x1b0(%rsp), %rdi
    00001d77: 	cmpq	0x18(%rsp), %rdi
    00001d7c: 	je	.Ltmp2721 # Offset: 7548
    00001d7e: 	movq	0x1c0(%rsp), %rax
    00001d86: 	leaq	0x1(%rax), %rsi
    00001d8a: 	callq	_ZdlPvm@PLT # Offset: 7562
.Ltmp2721:
    00001d8f: 	movq	0x48(%rsp), %rbx
    00001d94: 	movq	0x40(%rsp), %rsi
    00001d99: 	leaq	DATAat0x3425d(%rip), %rdx
    00001da0: 	movq	%rbx, %rdi
    00001da3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7587
    00001da8: 	xorl	%r9d, %r9d
    00001dab: 	movq	%rbx, %r8
    00001dae: 	leaq	_Z13binarysearch4ISt18_Fwd_list_iteratorIaEaEbT_S2_T0_(%rip), %rcx
    00001db5: 	movq	%r12, %rdx
    00001db8: 	xorl	%esi, %esi
    00001dba: 	movq	%rbp, %rdi
    00001dbd: 	callq	_Z13TestOneSearchISt18_Fwd_list_iteratorIaEPFbS1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 7613
    00001dc2: 	movq	0x1b0(%rsp), %rdi
    00001dca: 	cmpq	0x18(%rsp), %rdi
    00001dcf: 	je	.Ltmp2722 # Offset: 7631
    00001dd1: 	movq	0x1c0(%rsp), %rax
    00001dd9: 	leaq	0x1(%rax), %rsi
    00001ddd: 	callq	_ZdlPvm@PLT # Offset: 7645
.Ltmp2722:
    00001de2: 	movq	0x48(%rsp), %rbx
    00001de7: 	movq	0x40(%rsp), %rsi
    00001dec: 	leaq	DATAat0x3426d(%rip), %rdx
    00001df3: 	movq	%rbx, %rdi
    00001df6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7670
    00001dfb: 	xorl	%r9d, %r9d
    00001dfe: 	movq	%rbx, %r8
    00001e01: 	leaq	_Z18binarysearch_recurISt18_Fwd_list_iteratorIaEaEbT_S2_T0_(%rip), %rcx
    00001e08: 	movq	%r12, %rdx
    00001e0b: 	xorl	%esi, %esi
    00001e0d: 	movq	%rbp, %rdi
    00001e10: 	callq	_Z13TestOneSearchISt18_Fwd_list_iteratorIaEPFbS1_S1_aEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 7696
    00001e15: 	movq	0x1b0(%rsp), %rdi
    00001e1d: 	cmpq	0x18(%rsp), %rdi
    00001e22: 	je	.Ltmp2723 # Offset: 7714
    00001e24: 	movq	0x1c0(%rsp), %rax
    00001e2c: 	leaq	0x1(%rax), %rsi
    00001e30: 	callq	_ZdlPvm@PLT # Offset: 7728
.Ltmp2723:
    00001e35: 	movq	0x48(%rsp), %rbx
    00001e3a: 	movq	0x40(%rsp), %rsi
    00001e3f: 	leaq	DATAat0x34286(%rip), %rdx
    00001e46: 	movq	%rbx, %rdi
    00001e49: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7753
    00001e4e: 	movq	%rbx, %rdi
    00001e51: 	callq	_Z9summarizeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 7761
    00001e56: 	movq	0x1b0(%rsp), %rdi
    00001e5e: 	cmpq	0x18(%rsp), %rdi
    00001e63: 	je	.Ltmp2724 # Offset: 7779
    00001e65: 	movq	0x1c0(%rsp), %rax
    00001e6d: 	leaq	0x1(%rax), %rsi
    00001e71: 	callq	_ZdlPvm@PLT # Offset: 7793
.Ltmp2724:
    00001e76: 	movq	0x190(%rsp), %rdi
    00001e7e: 	cmpq	0x28(%rsp), %rdi
    00001e83: 	je	.Ltmp2725 # Offset: 7811
    00001e85: 	movq	0x1a0(%rsp), %rax
    00001e8d: 	leaq	0x1(%rax), %rsi
    00001e91: 	callq	_ZdlPvm@PLT # Offset: 7825
.Ltmp2725:
    00001e96: 	movq	0x170(%rsp), %rdi
    00001e9e: 	cmpq	0x10(%rsp), %rdi
    00001ea3: 	je	.Ltmp2726 # Offset: 7843
    00001ea5: 	movq	0x180(%rsp), %rax
    00001ead: 	leaq	0x1(%rax), %rsi
    00001eb1: 	callq	_ZdlPvm@PLT # Offset: 7857
.Ltmp2726:
    00001eb6: 	movq	0x130(%rsp), %rdi
    00001ebe: 	cmpq	0x30(%rsp), %rdi
    00001ec3: 	je	.Ltmp2727 # Offset: 7875
    00001ec5: 	movq	0x140(%rsp), %rax
    00001ecd: 	leaq	0x1(%rax), %rsi
    00001ed1: 	callq	_ZdlPvm@PLT # Offset: 7889
.Ltmp2727:
    00001ed6: 	movq	0x150(%rsp), %rdi
    00001ede: 	cmpq	0x8(%rsp), %rdi
    00001ee3: 	je	.Ltmp2728 # Offset: 7907
    00001ee5: 	movq	0x160(%rsp), %rax
    00001eed: 	leaq	0x1(%rax), %rsi
    00001ef1: 	callq	_ZdlPvm@PLT # Offset: 7921
.Ltmp2728:
    00001ef6: 	testq	%rbp, %rbp
    00001ef9: 	je	.Ltmp2729 # Offset: 7929
.Ltmp2730:
    00001efb: 	movq	%rbp, %rdi
    00001efe: 	movq	(%rbp), %rbp
    00001f02: 	movl	$0x10, %esi
    00001f07: 	callq	_ZdlPvm@PLT # Offset: 7943
    00001f0c: 	testq	%rbp, %rbp
    00001f0f: 	jne	.Ltmp2730 # Offset: 7951
.Ltmp2729:
    00001f11: 	addq	$0x8, 0x78(%rsp)
    00001f17: 	movq	0x78(%rsp), %rax
    00001f1c: 	cmpq	%rax, 0x20(%rsp)
    00001f21: 	jne	.Ltmp2731 # Offset: 7969
    00001f27: 	movq	0x110(%rsp), %rdi
    00001f2f: 	leaq	0x120(%rsp), %rax
    00001f37: 	cmpq	%rax, %rdi
    00001f3a: 	je	.Ltmp2732 # Offset: 7994
    00001f3c: 	movq	0x120(%rsp), %rax
    00001f44: 	leaq	0x1(%rax), %rsi
    00001f48: 	callq	_ZdlPvm@PLT # Offset: 8008
.Ltmp2732:
    00001f4d: 	movq	0x248(%rsp), %rax
    00001f55: 	subq	%fs:0x28, %rax
    00001f5e: 	jne	.Ltmp2733 # Offset: 8030
    00001f64: 	addq	$0x258, %rsp
    00001f6b: 	popq	%rbx
    00001f6c: 	popq	%rbp
    00001f6d: 	popq	%r12
    00001f6f: 	popq	%r13
    00001f71: 	popq	%r14
    00001f73: 	popq	%r15
    00001f75: 	retq # Offset: 8053
    00001f76: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2617:
    00001f80: 	movl	$0x1, %esi
    00001f85: 	jmp	.Ltmp2653 # Offset: 8069
.Ltmp2618:
    00001f8a: 	movl	$0x2, %esi
    00001f8f: 	jmp	.Ltmp2653 # Offset: 8079
.Ltmp2620:
    00001f94: 	movl	$0x4, %esi
    00001f99: 	jmp	.Ltmp2653 # Offset: 8089
.Ltmp2619:
    00001f9e: 	movl	$0x3, %esi
    00001fa3: 	jmp	.Ltmp2653 # Offset: 8099
.Ltmp2593:
    00001fa8: 	movl	$0x2, %esi
    00001fad: 	jmp	.Ltmp2601 # Offset: 8109
.Ltmp2594:
    00001fb2: 	movl	$0x3, %esi
    00001fb7: 	jmp	.Ltmp2601 # Offset: 8119
.Ltmp2595:
    00001fbc: 	movl	$0x4, %esi
    00001fc1: 	jmp	.Ltmp2601 # Offset: 8129
.Ltmp2669:
    00001fc6: 	xorl	%edx, %edx
    00001fc8: 	movq	%r14, %rsi
    00001fcb: 	movq	%r15, %rdi
    00001fce: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8142
    00001fd3: 	movq	%rax, 0x150(%rsp)
    00001fdb: 	movq	%rax, %rdi
    00001fde: 	movq	0xa0(%rsp), %rax
    00001fe6: 	movq	%rax, 0x160(%rsp)
.Ltmp2745:
    00001fee: 	movq	0x60(%rsp), %rsi
    00001ff3: 	movq	%rbp, %rdx
    00001ff6: 	callq	memcpy@PLT # Offset: 8182
    00001ffb: 	movq	0xa0(%rsp), %rbp
    00002003: 	movq	0x150(%rsp), %rax
    0000200b: 	jmp	.Ltmp2671 # Offset: 8203
.Ltmp2678:
    00002010: 	movdqu	0x10(%rax), %xmm5
    00002015: 	movaps	%xmm5, 0x1c0(%rsp)
    0000201d: 	jmp	.Ltmp2734 # Offset: 8221
.Ltmp2662:
    00002022: 	leal	0x7(%rax), %esi
    00002025: 	jmp	.Ltmp2735 # Offset: 8229
.Ltmp2676:
    0000202a: 	movdqu	0x10(%rax), %xmm6
    0000202f: 	movaps	%xmm6, 0x1a0(%rsp)
    00002037: 	jmp	.Ltmp2736 # Offset: 8247
.Ltmp2661:
    0000203c: 	leal	0x6(%rax), %esi
    0000203f: 	jmp	.Ltmp2735 # Offset: 8255
.Ltmp2660:
    00002044: 	leal	0x5(%rax), %esi
    00002047: 	jmp	.Ltmp2735 # Offset: 8263
.Ltmp2675:
    0000204c: 	movq	0x38(%rsp), %rdi
    00002051: 	movq	%r9, %rcx
    00002054: 	xorl	%edx, %edx
    00002056: 	xorl	%esi, %esi
    00002058: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@PLT # Offset: 8280
    0000205d: 	movq	0x28(%rsp), %rsi
    00002062: 	leaq	0x10(%rax), %rdx
    00002066: 	movq	%rsi, 0x190(%rsp)
    0000206e: 	movq	(%rax), %rcx
    00002071: 	cmpq	%rdx, %rcx
    00002074: 	jne	.Ltmp2737 # Offset: 8308
    0000207a: 	movdqu	0x10(%rax), %xmm5
    0000207f: 	movaps	%xmm5, 0x1a0(%rsp)
    00002087: 	jmp	.Ltmp2736 # Offset: 8327
.Ltmp2654:
    0000208c: 	movl	$0x1, %esi
    00002091: 	jmp	.Ltmp2735 # Offset: 8337
.Ltmp2703:
    00002096: 	testq	%rbx, %rbx
    00002099: 	jne	.Ltmp2738 # Offset: 8345
    0000209f: 	movq	0x30(%rsp), %rax
    000020a4: 	jmp	.Ltmp2739 # Offset: 8356
.Ltmp2702:
    000020a9: 	movq	0x68(%rsp), %rsi
    000020ae: 	leaq	0x130(%rsp), %rdi
    000020b6: 	xorl	%edx, %edx
    000020b8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8376
    000020bd: 	movq	%rax, 0x130(%rsp)
    000020c5: 	movq	%rax, %rdi
    000020c8: 	movq	0xc0(%rsp), %rax
    000020d0: 	movq	%rax, 0x140(%rsp)
.Ltmp2744:
    000020d8: 	movq	0x50(%rsp), %rsi
    000020dd: 	movq	%rbx, %rdx
    000020e0: 	callq	memcpy@PLT # Offset: 8416
    000020e5: 	movq	0xc0(%rsp), %rbx
    000020ed: 	movq	0x130(%rsp), %rax
    000020f5: 	jmp	.Ltmp2739 # Offset: 8437
.Ltmp2709:
    000020fa: 	movdqu	0x10(%rax), %xmm4
    000020ff: 	movaps	%xmm4, 0x1a0(%rsp)
    00002107: 	jmp	.Ltmp2740 # Offset: 8455
.Ltmp2707:
    0000210c: 	movdqu	0x10(%rax), %xmm5
    00002111: 	movaps	%xmm5, 0x180(%rsp)
    00002119: 	jmp	.Ltmp2741 # Offset: 8473
.Ltmp2657:
    0000211e: 	movl	$0x3, %esi
    00002123: 	jmp	.Ltmp2735 # Offset: 8483
.Ltmp2658:
    00002128: 	movl	$0x4, %esi
    0000212d: 	jmp	.Ltmp2735 # Offset: 8493
.Ltmp2656:
    00002132: 	movl	$0x2, %esi
    00002137: 	jmp	.Ltmp2735 # Offset: 8503
.Ltmp2686:
    0000213c: 	movl	$0x1, %esi
    00002141: 	xorl	%ebp, %ebp
    00002143: 	jmp	.Ltmp2742 # Offset: 8515
.Ltmp2695:
    00002148: 	leal	0x7(%rax), %esi
    0000214b: 	jmp	.Ltmp2742 # Offset: 8523
.Ltmp2694:
    00002150: 	leal	0x6(%rax), %esi
    00002153: 	jmp	.Ltmp2742 # Offset: 8531
.Ltmp2693:
    00002158: 	leal	0x5(%rax), %esi
    0000215b: 	jmp	.Ltmp2742 # Offset: 8539
.Ltmp2706:
    00002160: 	xorl	%edx, %edx
    00002162: 	xorl	%esi, %esi
    00002164: 	movq	%r15, %rdi
    00002167: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@PLT # Offset: 8551
    0000216c: 	movq	0x10(%rsp), %rbx
    00002171: 	leaq	0x10(%rax), %rdx
    00002175: 	movq	%rbx, 0x170(%rsp)
    0000217d: 	movq	(%rax), %rcx
    00002180: 	cmpq	%rdx, %rcx
    00002183: 	jne	.Ltmp2743 # Offset: 8579
    00002189: 	movdqu	0x10(%rax), %xmm6
    0000218e: 	movaps	%xmm6, 0x180(%rsp)
    00002196: 	jmp	.Ltmp2741 # Offset: 8598
.Ltmp2690:
    0000219b: 	movl	$0x3, %esi
    000021a0: 	jmp	.Ltmp2742 # Offset: 8608
.Ltmp2689:
    000021a5: 	movl	$0x2, %esi
    000021aa: 	jmp	.Ltmp2742 # Offset: 8618
.Ltmp2688:
    000021af: 	movl	$0x1, %esi
    000021b4: 	jmp	.Ltmp2742 # Offset: 8628
.Ltmp2701:
    000021b9: 	leaq	DATAat0x34008(%rip), %rdi
    000021c0: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8640
    000021c5: 	nopl	(%rax) # Size: 3
.Ltmp2691:
    000021c8: 	movl	$0x4, %esi
    000021cd: 	jmp	.Ltmp2742 # Offset: 8653
.Ltmp2704:
    000021d2: 	leaq	DATAat0x3414b(%rip), %rdi
    000021d9: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8665
.Ltmp2733:
    000021de: 	callq	__stack_chk_fail@PLT # Offset: 8670
.Ltmp2738:
    000021e3: 	movq	0x30(%rsp), %rdi
    000021e8: 	jmp	.Ltmp2744 # Offset: 8680
.Ltmp2708:
    000021ed: 	leaq	DATAat0x3414b(%rip), %rdi
    000021f4: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8692
.Ltmp2668:
    000021f9: 	leaq	DATAat0x34008(%rip), %rdi
    00002200: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8704
.Ltmp2677:
    00002205: 	leaq	DATAat0x3414b(%rip), %rdi
    0000220c: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8716
.Ltmp2673:
    00002211: 	leaq	DATAat0x3414b(%rip), %rdi
    00002218: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8728
.Ltmp2672:
    0000221d: 	movq	0x8(%rsp), %rdi
    00002222: 	jmp	.Ltmp2745 # Offset: 8738
    00002227: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2556:
    00002230: 	leaq	DATAat0x34008(%rip), %rdi
    00002237: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8759
.Ltmp2592:
    0000223c: 	movl	$0x1, %esi
    00002241: 	jmp	.Ltmp2601 # Offset: 8769
.Ltmp2630:
    00002246: 	leaq	DATAat0x34008(%rip), %rdi
    0000224d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8781
.Ltmp2602:
    00002252: 	movq	0x8(%rsp), %rdi
    00002257: 	jmp	.Ltmp2746 # Offset: 8791
.Ltmp2648:
    0000225c: 	movq	0x8(%rsp), %rdi
    00002261: 	jmp	.Ltmp2747 # Offset: 8801
    00002266: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2583:
    00002270: 	leaq	DATAat0x3414b(%rip), %rdi
    00002277: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8823
.Ltmp2579:
    0000227c: 	leaq	DATAat0x3414b(%rip), %rdi
    00002283: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8835
.Ltmp2576:
    00002288: 	leaq	DATAat0x34008(%rip), %rdi
    0000228f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8847
.Ltmp2563:
    00002294: 	leaq	DATAat0x3414b(%rip), %rdi
    0000229b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8859
.Ltmp2608:
    000022a0: 	movq	0x8(%rsp), %rdi
    000022a5: 	jmp	.Ltmp2748 # Offset: 8869
    000022aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2559:
    000022b0: 	leaq	DATAat0x3414b(%rip), %rdi
    000022b7: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8887
.Ltmp2633:
    000022bc: 	leaq	DATAat0x3414b(%rip), %rdi
    000022c3: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8899
.Ltmp2637:
    000022c8: 	leaq	DATAat0x3414b(%rip), %rdi
    000022cf: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8911
    000022d4: 	endbr64
    000022d8: 	movq	%rax, %rbp
    000022db: 	jmp	.Ltmp2749 # Offset: 8923
    000022dd: 	endbr64
    000022e1: 	movq	%rax, %rbx
    000022e4: 	jmp	.Ltmp2750 # Offset: 8932
.Ltmp2749:
    000022e9: 	movq	0xa0(%rsp), %rdi
.Ltmp2752:
    000022f1: 	testq	%rdi, %rdi
    000022f4: 	je	.Ltmp2751 # Offset: 8948
    000022fa: 	movq	(%rdi), %rbx
    000022fd: 	movl	$0x10, %esi
    00002302: 	callq	_ZdlPvm@PLT # Offset: 8962
    00002307: 	movq	%rbx, %rdi
    0000230a: 	jmp	.Ltmp2752 # Offset: 8970
.Ltmp2791:
    0000230c: 	movq	0x1b0(%rsp), %rdi
    00002314: 	cmpq	0x18(%rsp), %rdi
    00002319: 	je	.Ltmp2753 # Offset: 8985
    0000231b: 	movq	0x1c0(%rsp), %rax
    00002323: 	leaq	0x1(%rax), %rsi
    00002327: 	callq	_ZdlPvm@PLT # Offset: 8999
.Ltmp2753:
    0000232c: 	movq	0x190(%rsp), %rdi
    00002334: 	cmpq	0x28(%rsp), %rdi
    00002339: 	je	.Ltmp2754 # Offset: 9017
    0000233b: 	movq	0x1a0(%rsp), %rax
    00002343: 	leaq	0x1(%rax), %rsi
    00002347: 	callq	_ZdlPvm@PLT # Offset: 9031
.Ltmp2754:
    0000234c: 	movq	0x150(%rsp), %rdi
    00002354: 	cmpq	0x8(%rsp), %rdi
    00002359: 	je	.Ltmp2750 # Offset: 9049
    0000235b: 	movq	0x160(%rsp), %rax
    00002363: 	leaq	0x1(%rax), %rsi
    00002367: 	callq	_ZdlPvm@PLT # Offset: 9063
.Ltmp2750:
    0000236c: 	movq	0x170(%rsp), %rdi
    00002374: 	cmpq	0x10(%rsp), %rdi
    00002379: 	je	.Ltmp2755 # Offset: 9081
    0000237b: 	movq	0x180(%rsp), %rax
    00002383: 	leaq	0x1(%rax), %rsi
    00002387: 	callq	_ZdlPvm@PLT # Offset: 9095
.Ltmp2755:
    0000238c: 	movq	0xc0(%rsp), %rdi
.Ltmp2757:
    00002394: 	cmpq	0x68(%rsp), %rdi
    00002399: 	je	.Ltmp2756 # Offset: 9113
    0000239b: 	movq	(%rdi), %rbp
    0000239e: 	movl	$0x18, %esi
    000023a3: 	callq	_ZdlPvm@PLT # Offset: 9123
    000023a8: 	movq	%rbp, %rdi
    000023ab: 	jmp	.Ltmp2757 # Offset: 9131
    000023ad: 	endbr64
.Ltmp2759:
    000023b1: 	movq	%rax, %rbx
    000023b4: 	jmp	.Ltmp2758 # Offset: 9140
    000023b9: 	endbr64
    000023bd: 	jmp	.Ltmp2759 # Offset: 9149
    000023bf: 	endbr64
    000023c3: 	jmp	.Ltmp2759 # Offset: 9155
    000023c5: 	endbr64
    000023c9: 	jmp	.Ltmp2759 # Offset: 9161
    000023cb: 	endbr64
    000023cf: 	jmp	.Ltmp2759 # Offset: 9167
    000023d1: 	endbr64
    000023d5: 	jmp	.Ltmp2759 # Offset: 9173
    000023d7: 	endbr64
    000023db: 	jmp	.Ltmp2759 # Offset: 9179
    000023dd: 	endbr64
    000023e1: 	jmp	.Ltmp2759 # Offset: 9185
    000023e3: 	endbr64
    000023e7: 	jmp	.Ltmp2759 # Offset: 9191
.Ltmp2760:
    000023e9: 	movq	(%rbx), %rdi
    000023ec: 	movl	$0x200, %esi
    000023f1: 	addq	$0x8, %rbx
    000023f5: 	callq	_ZdlPvm@PLT # Offset: 9205
.Ltmp2775:
    000023fa: 	cmpq	%rbx, %rbp
    000023fd: 	ja	.Ltmp2760 # Offset: 9213
    000023ff: 	movq	0xc8(%rsp), %rax
    00002407: 	movq	%r13, %rdi
    0000240a: 	leaq	(,%rax,8), %rsi
    00002412: 	callq	_ZdlPvm@PLT # Offset: 9234
.Ltmp2774:
    00002417: 	movq	%r12, %rbx
.Ltmp2756:
    0000241a: 	movq	0x110(%rsp), %rdi
    00002422: 	leaq	0x120(%rsp), %rax
    0000242a: 	cmpq	%rax, %rdi
    0000242d: 	je	.Ltmp2761 # Offset: 9261
    0000242f: 	movq	0x120(%rsp), %rax
    00002437: 	leaq	0x1(%rax), %rsi
    0000243b: 	callq	_ZdlPvm@PLT # Offset: 9275
.Ltmp2761:
    00002440: 	movq	%rbx, %rdi
    00002443: 	callq	_Unwind_Resume@PLT # Offset: 9283
    00002448: 	endbr64
    0000244c: 	movq	%rax, %rbx
    0000244f: 	jmp	.Ltmp2762 # Offset: 9295
    00002454: 	endbr64
.Ltmp2792:
    00002458: 	movq	%rax, %rbx
    0000245b: 	jmp	.Ltmp2763 # Offset: 9307
.Ltmp2758:
    0000245d: 	movq	0x1b0(%rsp), %rdi
    00002465: 	cmpq	0x18(%rsp), %rdi
    0000246a: 	je	.Ltmp2764 # Offset: 9322
    0000246c: 	movq	0x1c0(%rsp), %rax
    00002474: 	leaq	0x1(%rax), %rsi
    00002478: 	callq	_ZdlPvm@PLT # Offset: 9336
.Ltmp2764:
    0000247d: 	movq	0x190(%rsp), %rdi
    00002485: 	cmpq	0x28(%rsp), %rdi
    0000248a: 	je	.Ltmp2765 # Offset: 9354
    0000248c: 	movq	0x1a0(%rsp), %rax
    00002494: 	leaq	0x1(%rax), %rsi
    00002498: 	callq	_ZdlPvm@PLT # Offset: 9368
.Ltmp2765:
    0000249d: 	movq	0x170(%rsp), %rdi
    000024a5: 	cmpq	0x10(%rsp), %rdi
    000024aa: 	je	.Ltmp2763 # Offset: 9386
    000024ac: 	movq	0x180(%rsp), %rax
    000024b4: 	leaq	0x1(%rax), %rsi
    000024b8: 	callq	_ZdlPvm@PLT # Offset: 9400
.Ltmp2763:
    000024bd: 	movq	0x130(%rsp), %rdi
    000024c5: 	cmpq	0x30(%rsp), %rdi
    000024ca: 	je	.Ltmp2766 # Offset: 9418
    000024cc: 	movq	0x140(%rsp), %rax
    000024d4: 	leaq	0x1(%rax), %rsi
    000024d8: 	callq	_ZdlPvm@PLT # Offset: 9432
.Ltmp2766:
    000024dd: 	movq	0x150(%rsp), %rdi
    000024e5: 	cmpq	0x8(%rsp), %rdi
    000024ea: 	je	.Ltmp2762 # Offset: 9450
    000024ec: 	movq	0x160(%rsp), %rax
    000024f4: 	leaq	0x1(%rax), %rsi
    000024f8: 	callq	_ZdlPvm@PLT # Offset: 9464
.Ltmp2762:
    000024fd: 	movq	%rbp, %rdi
.Ltmp2767:
    00002500: 	testq	%rdi, %rdi
    00002503: 	je	.Ltmp2756 # Offset: 9475
    00002509: 	movq	(%rdi), %r12
    0000250c: 	movl	$0x10, %esi
    00002511: 	callq	_ZdlPvm@PLT # Offset: 9489
    00002516: 	movq	%r12, %rdi
    00002519: 	jmp	.Ltmp2767 # Offset: 9497
.Ltmp2788:
    0000251b: 	movq	0xc0(%rsp), %rdi
.Ltmp2793:
    00002523: 	cmpq	0x68(%rsp), %rdi
    00002528: 	jne	.Ltmp2768 # Offset: 9512
.Ltmp2751:
    0000252e: 	movq	%rbp, %rbx
    00002531: 	jmp	.Ltmp2756 # Offset: 9521
    00002536: 	endbr64
    0000253a: 	movq	%rax, %rbx
    0000253d: 	jmp	.Ltmp2764 # Offset: 9533
    00002542: 	endbr64
    00002546: 	movq	%rax, %rbx
    00002549: 	jmp	.Ltmp2766 # Offset: 9545
    0000254b: 	endbr64
    0000254f: 	jmp	.Ltmp2759 # Offset: 9551
    00002554: 	endbr64
.Ltmp2769:
    00002558: 	movq	%rax, %rbx
    0000255b: 	jmp	.Ltmp2754 # Offset: 9563
    00002560: 	endbr64
    00002564: 	jmp	.Ltmp2769 # Offset: 9572
    00002566: 	endbr64
    0000256a: 	movq	%rax, %rbx
    0000256d: 	jmp	.Ltmp2753 # Offset: 9581
    00002572: 	endbr64
.Ltmp2776:
    00002576: 	movq	%rax, %r12
    00002579: 	jmp	.Ltmp2770 # Offset: 9593
.Ltmp2778:
    0000257b: 	movq	0x1b0(%rsp), %rdi
    00002583: 	cmpq	0x18(%rsp), %rdi
    00002588: 	je	.Ltmp2771 # Offset: 9608
    0000258a: 	movq	0x1c0(%rsp), %rax
    00002592: 	leaq	0x1(%rax), %rsi
    00002596: 	callq	_ZdlPvm@PLT # Offset: 9622
.Ltmp2771:
    0000259b: 	movq	0x190(%rsp), %rdi
    000025a3: 	cmpq	0x28(%rsp), %rdi
    000025a8: 	je	.Ltmp2770 # Offset: 9640
    000025aa: 	movq	0x1a0(%rsp), %rax
    000025b2: 	leaq	0x1(%rax), %rsi
    000025b6: 	callq	_ZdlPvm@PLT # Offset: 9654
.Ltmp2770:
    000025bb: 	movq	0x150(%rsp), %rdi
    000025c3: 	cmpq	0x8(%rsp), %rdi
    000025c8: 	je	.Ltmp2772 # Offset: 9672
    000025ca: 	movq	0x160(%rsp), %rax
    000025d2: 	leaq	0x1(%rax), %rsi
    000025d6: 	callq	_ZdlPvm@PLT # Offset: 9686
.Ltmp2772:
    000025db: 	movq	0x170(%rsp), %rdi
    000025e3: 	cmpq	0x10(%rsp), %rdi
    000025e8: 	je	.Ltmp2773 # Offset: 9704
    000025ea: 	movq	0x180(%rsp), %rax
    000025f2: 	leaq	0x1(%rax), %rsi
    000025f6: 	callq	_ZdlPvm@PLT # Offset: 9718
.Ltmp2773:
    000025fb: 	movq	0xc0(%rsp), %r13
    00002603: 	addq	$0x8, %rbp
    00002607: 	testq	%r13, %r13
    0000260a: 	je	.Ltmp2774 # Offset: 9738
    00002610: 	jmp	.Ltmp2775 # Offset: 9744
    00002615: 	endbr64
    00002619: 	jmp	.Ltmp2776 # Offset: 9753
    0000261e: 	endbr64
    00002622: 	movq	%rax, %rbx
    00002625: 	jmp	.Ltmp2777 # Offset: 9765
    00002627: 	endbr64
    0000262b: 	movq	%rax, %r12
    0000262e: 	jmp	.Ltmp2771 # Offset: 9774
    00002633: 	endbr64
    00002637: 	movq	%rax, %r12
    0000263a: 	jmp	.Ltmp2778 # Offset: 9786
.Ltmp2783:
    0000263f: 	movq	0x1b0(%rsp), %rdi
    00002647: 	cmpq	0x18(%rsp), %rdi
    0000264c: 	je	.Ltmp2777 # Offset: 9804
    0000264e: 	movq	0x1c0(%rsp), %rax
    00002656: 	leaq	0x1(%rax), %rsi
    0000265a: 	callq	_ZdlPvm@PLT # Offset: 9818
.Ltmp2777:
    0000265f: 	movq	0x190(%rsp), %rdi
    00002667: 	cmpq	0x28(%rsp), %rdi
    0000266c: 	je	.Ltmp2779 # Offset: 9836
    0000266e: 	movq	0x1a0(%rsp), %rax
    00002676: 	leaq	0x1(%rax), %rsi
    0000267a: 	callq	_ZdlPvm@PLT # Offset: 9850
.Ltmp2779:
    0000267f: 	movq	0x150(%rsp), %rdi
    00002687: 	cmpq	0x8(%rsp), %rdi
    0000268c: 	je	.Ltmp2780 # Offset: 9868
    0000268e: 	movq	0x160(%rsp), %rax
    00002696: 	leaq	0x1(%rax), %rsi
    0000269a: 	callq	_ZdlPvm@PLT # Offset: 9882
.Ltmp2780:
    0000269f: 	movq	0x170(%rsp), %rdi
    000026a7: 	cmpq	0x10(%rsp), %rdi
    000026ac: 	je	.Ltmp2781 # Offset: 9900
    000026ae: 	movq	0x180(%rsp), %rax
    000026b6: 	leaq	0x1(%rax), %rsi
    000026ba: 	callq	_ZdlPvm@PLT # Offset: 9914
.Ltmp2781:
    000026bf: 	movq	0x30(%rsp), %rdi
    000026c4: 	movl	$0x1, %esi
    000026c9: 	callq	_ZdlPvm@PLT # Offset: 9929
    000026ce: 	jmp	.Ltmp2756 # Offset: 9934
    000026d3: 	endbr64
    000026d7: 	movq	%rax, %rbx
    000026da: 	jmp	.Ltmp2782 # Offset: 9946
    000026df: 	endbr64
    000026e3: 	movq	%rax, %rbx
    000026e6: 	jmp	.Ltmp2783 # Offset: 9958
.Ltmp2787:
    000026eb: 	movq	0x1b0(%rsp), %rdi
    000026f3: 	cmpq	0x18(%rsp), %rdi
    000026f8: 	je	.Ltmp2784 # Offset: 9976
    000026fa: 	movq	0x1c0(%rsp), %rax
    00002702: 	leaq	0x1(%rax), %rsi
    00002706: 	callq	_ZdlPvm@PLT # Offset: 9990
.Ltmp2784:
    0000270b: 	movq	0x190(%rsp), %rdi
    00002713: 	cmpq	0x28(%rsp), %rdi
    00002718: 	je	.Ltmp2785 # Offset: 10008
    0000271a: 	movq	0x1a0(%rsp), %rax
    00002722: 	leaq	0x1(%rax), %rsi
    00002726: 	callq	_ZdlPvm@PLT # Offset: 10022
.Ltmp2785:
    0000272b: 	movq	0x150(%rsp), %rdi
    00002733: 	cmpq	0x8(%rsp), %rdi
    00002738: 	je	.Ltmp2786 # Offset: 10040
    0000273a: 	movq	0x160(%rsp), %rax
    00002742: 	leaq	0x1(%rax), %rsi
    00002746: 	callq	_ZdlPvm@PLT # Offset: 10054
.Ltmp2786:
    0000274b: 	movq	0x170(%rsp), %rdi
    00002753: 	cmpq	0x10(%rsp), %rdi
    00002758: 	je	.Ltmp2782 # Offset: 10072
    0000275a: 	movq	0x180(%rsp), %rax
    00002762: 	leaq	0x1(%rax), %rsi
    00002766: 	callq	_ZdlPvm@PLT # Offset: 10086
.Ltmp2782:
    0000276b: 	cmpq	$0x0, 0x60(%rsp)
    00002771: 	je	.Ltmp2756 # Offset: 10097
    00002777: 	movq	0x60(%rsp), %rdi
    0000277c: 	movq	%rbp, %rsi
    0000277f: 	callq	_ZdlPvm@PLT # Offset: 10111
    00002784: 	jmp	.Ltmp2756 # Offset: 10116
    00002789: 	endbr64
    0000278d: 	movq	%rax, %r12
    00002790: 	jmp	.Ltmp2773 # Offset: 10128
    00002795: 	endbr64
    00002799: 	movq	%rax, %r12
    0000279c: 	jmp	.Ltmp2772 # Offset: 10140
    000027a1: 	endbr64
    000027a5: 	movq	%rax, %rbx
    000027a8: 	jmp	.Ltmp2786 # Offset: 10152
    000027aa: 	endbr64
    000027ae: 	movq	%rax, %rbx
    000027b1: 	jmp	.Ltmp2787 # Offset: 10161
    000027b6: 	endbr64
    000027ba: 	movq	%rax, %rbx
    000027bd: 	jmp	.Ltmp2755 # Offset: 10173
    000027c2: 	endbr64
    000027c6: 	movq	%rax, %rbp
    000027c9: 	jmp	.Ltmp2788 # Offset: 10185
    000027ce: 	endbr64
.Ltmp2790:
    000027d2: 	movq	%rax, %rbx
    000027d5: 	jmp	.Ltmp2779 # Offset: 10197
    000027da: 	endbr64
    000027de: 	jmp	.Ltmp2759 # Offset: 10206
    000027e3: 	endbr64
.Ltmp2789:
    000027e7: 	movq	%rax, %rbx
    000027ea: 	jmp	.Ltmp2785 # Offset: 10218
    000027ef: 	endbr64
    000027f3: 	jmp	.Ltmp2789 # Offset: 10227
    000027f5: 	endbr64
    000027f9: 	movq	%rax, %rbx
    000027fc: 	jmp	.Ltmp2756 # Offset: 10236
    00002801: 	endbr64
    00002805: 	movq	%rax, %rbx
    00002808: 	jmp	.Ltmp2781 # Offset: 10248
    0000280d: 	endbr64
    00002811: 	movq	%rax, %rbx
    00002814: 	jmp	.Ltmp2780 # Offset: 10260
    00002819: 	endbr64
    0000281d: 	movq	%rax, %rbx
    00002820: 	jmp	.Ltmp2784 # Offset: 10272
    00002825: 	endbr64
    00002829: 	jmp	.Ltmp2790 # Offset: 10281
    0000282b: 	endbr64
    0000282f: 	jmp	.Ltmp2759 # Offset: 10287
    00002834: 	endbr64
    00002838: 	movq	%rax, %rbx
    0000283b: 	jmp	.Ltmp2765 # Offset: 10299
    00002840: 	endbr64
    00002844: 	movq	%rax, %rbx
    00002847: 	jmp	.Ltmp2791 # Offset: 10311
    0000284c: 	endbr64
    00002850: 	jmp	.Ltmp2792 # Offset: 10320
    00002855: 	endbr64
    00002859: 	jmp	.Ltmp2759 # Offset: 10329
    0000285e: 	endbr64
    00002862: 	jmp	.Ltmp2759 # Offset: 10338
    00002867: 	endbr64
    0000286b: 	jmp	.Ltmp2759 # Offset: 10347
.Ltmp2768:
    00002870: 	movq	(%rdi), %rbx
    00002873: 	movl	$0x18, %esi
    00002878: 	callq	_ZdlPvm@PLT # Offset: 10360
    0000287d: 	movq	%rbx, %rdi
    00002880: 	jmp	.Ltmp2793 # Offset: 10368
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIaEvv"

Binary Function "_Z24binarysearch_recur_innerISt18_Fwd_list_iteratorIaEalEbT_T0_T1_" after disassembly {
  Number      : 344
  State       : disassembled
  Address     : 0x163e0
  Size        : 0x6c
  MaxSize     : 0x70
  Offset      : 0x163e0
  Section     : .text
  Orc Section : .local.text._Z24binarysearch_recur_innerISt18_Fwd_list_iteratorIaEalEbT_T0_T1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0343:
    00000000: 	endbr64
    00000004: 	testq	%rdx, %rdx
    00000007: 	je	.Ltmp2794 # Offset: 7
    00000009: 	movq	%rdx, %r8
    0000000c: 	movq	%rdi, %rcx
    0000000f: 	shrq	$0x3f, %r8
    00000013: 	addq	%rdx, %r8
    00000016: 	sarq	%r8
    00000019: 	leaq	-0x1(%r8), %rax
    0000001d: 	je	.Ltmp2795 # Offset: 29
    0000001f: 	nop # Size: 1
.Ltmp2796:
    00000020: 	movq	(%rcx), %rcx
    00000023: 	subq	$0x1, %rax
    00000027: 	jae	.Ltmp2796 # Offset: 39
.Ltmp2795:
    00000029: 	cmpb	%sil, 0x8(%rcx)
    0000002d: 	jl	.Ltmp2797 # Offset: 45
    0000002f: 	movl	$0x1, %eax
    00000034: 	jg	.Ltmp2798 # Offset: 52
    00000036: 	retq # Offset: 54
    00000037: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2794:
    00000040: 	xorl	%eax, %eax
    00000042: 	retq # Offset: 66
    00000043: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2797:
    00000048: 	addq	$0x1, %r8
    0000004c: 	movq	(%rcx), %rdi
    0000004f: 	movsbl	%sil, %esi
    00000053: 	subq	%r8, %rdx
    00000056: 	jmp	.LBB0343 # Offset: 86
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2798:
    00000060: 	movsbl	%sil, %esi
    00000064: 	movq	%r8, %rdx
    00000067: 	jmp	.LBB0343 # Offset: 103
DWARF CFI Instructions:
    <empty>
End of Function "_Z24binarysearch_recur_innerISt18_Fwd_list_iteratorIaEalEbT_T0_T1_"

Binary Function "_Z18binarysearch_recurISt18_Fwd_list_iteratorIaEaEbT_S2_T0_" after disassembly {
  Number      : 345
  State       : disassembled
  Address     : 0x16450
  Size        : 0x160
  MaxSize     : 0x160
  Offset      : 0x16450
  Section     : .text
  Orc Section : .local.text._Z18binarysearch_recurISt18_Fwd_list_iteratorIaEaEbT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0344:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	movl	%edx, %r9d
    0000000a: 	movq	%rdi, %r10
    0000000d: 	cmpq	%rsi, %rdi
    00000010: 	je	.Ltmp2799 # Offset: 16
    00000012: 	movq	%rdi, %rax
    00000015: 	xorl	%edx, %edx
    00000017: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2800:
    00000020: 	movq	(%rax), %rax
    00000023: 	movq	%rdx, %rdi
    00000026: 	addq	$0x1, %rdx
    0000002a: 	cmpq	%rsi, %rax
    0000002d: 	jne	.Ltmp2800 # Offset: 45
    0000002f: 	movq	%rdx, %rsi
    00000032: 	movq	%r8, %rcx
    00000035: 	sarq	%rsi
    00000038: 	leaq	-0x1(%rsi), %rax
    0000003c: 	je	.Ltmp2801 # Offset: 60
    0000003e: 	nop # Size: 2
.Ltmp2802:
    00000040: 	movq	(%rcx), %rcx
    00000043: 	subq	$0x1, %rax
    00000047: 	jae	.Ltmp2802 # Offset: 71
.Ltmp2801:
    00000049: 	movsbl	%r9b, %r11d
    0000004d: 	cmpb	0x8(%rcx), %r9b
    00000051: 	jg	.Ltmp2803 # Offset: 81
    00000053: 	movl	$0x1, %eax
    00000058: 	jl	.Ltmp2804 # Offset: 88
.Ltmp2808:
    0000005a: 	retq # Offset: 90
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2799:
    00000060: 	xorl	%eax, %eax
    00000062: 	retq # Offset: 98
    00000063: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2803:
    00000068: 	subq	%rsi, %rdi
    0000006b: 	je	.Ltmp2799 # Offset: 107
    0000006d: 	movq	%rdi, %r8
    00000070: 	movq	(%rcx), %r10
    00000073: 	shrq	$0x3f, %r8
    00000077: 	addq	%rdi, %r8
    0000007a: 	movq	%r10, %rdx
    0000007d: 	sarq	%r8
    00000080: 	leaq	-0x1(%r8), %rax
    00000084: 	je	.Ltmp2805 # Offset: 132
    00000086: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2806:
    00000090: 	movq	(%rdx), %rdx
    00000093: 	subq	$0x1, %rax
    00000097: 	jae	.Ltmp2806 # Offset: 151
.Ltmp2805:
    00000099: 	cmpb	0x8(%rdx), %r9b
    0000009d: 	jg	.Ltmp2807 # Offset: 157
.Ltmp2814:
    0000009f: 	movl	$0x1, %eax
    000000a4: 	jge	.Ltmp2808 # Offset: 164
    000000a6: 	movq	%r8, %rdx
    000000a9: 	movl	%r11d, %esi
    000000ac: 	movq	%r10, %rdi
    000000af: 	jmp	_Z24binarysearch_recur_innerISt18_Fwd_list_iteratorIaEalEbT_T0_T1_ # TAILCALL  # Offset: 175
    000000b4: 	nopl	(%rax) # Size: 4
.Ltmp2804:
    000000b8: 	testq	%rsi, %rsi
    000000bb: 	je	.Ltmp2799 # Offset: 187
    000000bd: 	sarq	$0x2, %rdx
    000000c1: 	leaq	-0x1(%rdx), %rax
    000000c5: 	je	.Ltmp2809 # Offset: 197
    000000c7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2810:
    000000d0: 	movq	(%r10), %r10
    000000d3: 	subq	$0x1, %rax
    000000d7: 	jae	.Ltmp2810 # Offset: 215
.Ltmp2809:
    000000d9: 	cmpb	0x8(%r10), %r9b
    000000dd: 	jg	.Ltmp2811 # Offset: 221
    000000df: 	movl	$0x1, %eax
    000000e4: 	jge	.Ltmp2808 # Offset: 228
    000000ea: 	movl	%r11d, %esi
    000000ed: 	movq	%r8, %rdi
    000000f0: 	jmp	_Z24binarysearch_recur_innerISt18_Fwd_list_iteratorIaEalEbT_T0_T1_ # TAILCALL  # Offset: 240
.Ltmp2807:
    000000f5: 	movq	(%rdx), %rdx
    000000f8: 	addq	$0x1, %r8
    000000fc: 	movq	%rdx, %r10
    000000ff: 	subq	%r8, %rdi
    00000102: 	je	.Ltmp2799 # Offset: 258
    00000108: 	movq	%rdi, %r8
    0000010b: 	shrq	$0x3f, %r8
    0000010f: 	addq	%rdi, %r8
    00000112: 	sarq	%r8
    00000115: 	leaq	-0x1(%r8), %rax
    00000119: 	je	.Ltmp2812 # Offset: 281
    0000011b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2813:
    00000120: 	movq	(%rdx), %rdx
    00000123: 	subq	$0x1, %rax
    00000127: 	jae	.Ltmp2813 # Offset: 295
.Ltmp2812:
    00000129: 	cmpb	0x8(%rdx), %r9b
    0000012d: 	jle	.Ltmp2814 # Offset: 301
    00000133: 	movq	(%rdx), %r10
    00000136: 	addq	$0x1, %r8
    0000013a: 	movl	%r11d, %esi
    0000013d: 	subq	%r8, %rdi
    00000140: 	movq	%rdi, %rdx
    00000143: 	movq	%r10, %rdi
    00000146: 	jmp	_Z24binarysearch_recur_innerISt18_Fwd_list_iteratorIaEalEbT_T0_T1_ # TAILCALL  # Offset: 326
.Ltmp2811:
    0000014b: 	addq	$0x1, %rdx
    0000014f: 	movq	(%r10), %rdi
    00000152: 	subq	%rdx, %rsi
    00000155: 	movq	%rsi, %rdx
    00000158: 	movl	%r11d, %esi
    0000015b: 	jmp	_Z24binarysearch_recur_innerISt18_Fwd_list_iteratorIaEalEbT_T0_T1_ # TAILCALL  # Offset: 347
DWARF CFI Instructions:
    <empty>
End of Function "_Z18binarysearch_recurISt18_Fwd_list_iteratorIaEaEbT_S2_T0_"

Binary Function "_Z15TestSearchArrayIPtPFS0_S0_S0_tEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 346
  State       : disassembled
  Address     : 0x165b0
  Size        : 0x1e4
  MaxSize     : 0x1f0
  Offset      : 0x165b0
  Section     : .text
  Orc Section : .local.text._Z15TestSearchArrayIPtPFS0_S0_S0_tEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0345:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rcx, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	movl	$0x800, %edi
    00000015: 	pushq	%r12
    00000017: 	pushq	%rbp
    00000018: 	pushq	%rbx
    00000019: 	movq	%rsi, %rbx
    0000001c: 	subq	$0x28, %rsp
    00000020: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000027: 	movq	%rdx, 0x10(%rsp)
    0000002c: 	movq	%r8, 0x18(%rsp)
    00000031: 	movb	%r9b, (%rsp)
    00000035: 	callq	_Znwm@PLT # Offset: 53
    0000003a: 	xorl	%edx, %edx
    0000003c: 	movq	%rax, %r14
    0000003f: 	movw	%dx, (%rax)
    00000042: 	addq	$0x2, %rax
    00000046: 	leaq	0x800(%r14), %rsi
    0000004d: 	cmpq	%rsi, %rax
    00000050: 	je	.Ltmp2815 # Offset: 80
    00000052: 	leaq	0xa(%r14), %rdi
    00000056: 	movq	$0x0, 0x2(%r14)
    0000005e: 	movq	$0x0, 0x7f8(%r14)
    00000069: 	andq	$-0x8, %rdi
    0000006d: 	subq	%rdi, %rax
    00000070: 	movq	%rax, %rcx
    00000073: 	xorl	%eax, %eax
    00000075: 	addl	$0x7fe, %ecx
    0000007b: 	shrl	$0x3, %ecx
    0000007e: 	rep		stosq	%rax, %es:(%rdi)
.Ltmp2815:
    00000081: 	movabsq	$0x5851f42d4c957f2d, %r8
    0000008b: 	movq	%r14, %rcx
    0000008e: 	movabsq	$0x14057b7ef767814f, %rdi
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2816:
    000000a0: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000000a7: 	addq	$0x2, %rcx
    000000ab: 	imulq	%r8, %rax
    000000af: 	addq	%rdi, %rax
    000000b2: 	movq	%rax, %rdx
    000000b5: 	movq	%rax, %r9
    000000b8: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000000bf: 	shrq	$0x14, %rdx
    000000c3: 	shlq	$0x17, %r9
    000000c7: 	xorq	%r9, %rdx
    000000ca: 	xorq	%rdx, %rax
    000000cd: 	xorl	%edx, %edx
    000000cf: 	divq	0x10(%rsp)
    000000d4: 	movzwl	(%r13,%rdx,2), %eax
    000000da: 	movw	%ax, -0x2(%rcx)
    000000de: 	cmpq	%rcx, %rsi
    000000e1: 	jne	.Ltmp2816 # Offset: 225
    000000e3: 	callq	clock@PLT # Offset: 227
    000000e8: 	xorl	%r12d, %r12d
    000000eb: 	xorl	%ebp, %ebp
    000000ed: 	movq	%rax, start_time(%rip)
    000000f4: 	movzbl	(%rsp), %eax
    000000f8: 	xorl	$0x1, %eax
    000000fb: 	movb	%al, 0xf(%rsp)
.Ltmp2819:
    000000ff: 	leaq	0xc8(%rbp), %rax
    00000106: 	movq	%rax, (%rsp)
    0000010a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2817:
    00000110: 	movq	%rbp, %rax
    00000113: 	movq	%rbx, %rsi
    00000116: 	addq	$0x1, %rbp
    0000011a: 	movq	%r13, %rdi
    0000011d: 	andl	$0x3ff, %eax
    00000122: 	movzwl	(%r14,%rax,2), %edx
    00000127: 	callq	*%r15 # Offset: 295
    0000012a: 	cmpq	%rax, %rbx
    0000012d: 	sete	%al
    00000130: 	andb	0xf(%rsp), %al
    00000134: 	cmovnel	%eax, %r12d
    00000138: 	cmpq	(%rsp), %rbp
    0000013c: 	jne	.Ltmp2817 # Offset: 316
    0000013e: 	callq	clock@PLT # Offset: 318
    00000143: 	movsd	gMinimumTimeTarget(%rip), %xmm1
    0000014b: 	pxor	%xmm0, %xmm0
    0000014f: 	movq	%rax, end_time(%rip)
    00000156: 	subq	start_time(%rip), %rax
    0000015d: 	cvtsi2sd	%rax, %xmm0
    00000162: 	divsd	DATAat0x34410(%rip), %xmm0
    0000016a: 	comisd	%xmm0, %xmm1
    0000016e: 	jbe	.Ltmp2818 # Offset: 366
    00000170: 	cmpq	$0x5f5e0ff, %rbp
    00000177: 	jbe	.Ltmp2819 # Offset: 375
.Ltmp2818:
    00000179: 	movq	0x18(%rsp), %rdx
    0000017e: 	movq	0x10(%rsp), %rdi
    00000183: 	movq	%rbp, %rsi
    00000186: 	callq	_Z13record_resultdmmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 390
    0000018b: 	testb	%r12b, %r12b
    0000018e: 	jne	.Ltmp2820 # Offset: 398
.Ltmp2821:
    00000190: 	addq	$0x28, %rsp
    00000194: 	movq	%r14, %rdi
    00000197: 	movl	$0x800, %esi
    0000019c: 	popq	%rbx
    0000019d: 	popq	%rbp
    0000019e: 	popq	%r12
    000001a0: 	popq	%r13
    000001a2: 	popq	%r14
    000001a4: 	popq	%r15
    000001a6: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 422
.Ltmp2820:
    000001ab: 	movq	0x18(%rsp), %rax
    000001b0: 	leaq	DATAat0x34137(%rip), %rsi
    000001b7: 	movl	$0x1, %edi
    000001bc: 	movq	(%rax), %rdx
    000001bf: 	xorl	%eax, %eax
    000001c1: 	callq	__printf_chk@PLT # Offset: 449
    000001c6: 	jmp	.Ltmp2821 # Offset: 454
    000001c8: 	endbr64
    000001cc: 	movq	%rax, %rbp
    000001cf: 	movq	%r14, %rdi
    000001d2: 	movl	$0x800, %esi
    000001d7: 	callq	_ZdlPvm@PLT # Offset: 471
    000001dc: 	movq	%rbp, %rdi
    000001df: 	callq	_Unwind_Resume@PLT # Offset: 479
DWARF CFI Instructions:
    <empty>
End of Function "_Z15TestSearchArrayIPtPFS0_S0_S0_tEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z18quicksort2_forwardIPtEvT_S1_" after disassembly {
  Number      : 347
  State       : disassembled
  Address     : 0x167a0
  Size        : 0x131
  MaxSize     : 0x140
  Offset      : 0x167a0
  Section     : .text
  Orc Section : .local.text._Z18quicksort2_forwardIPtEvT_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0346:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp2822 # Offset: 7
    0000000d: 	leaq	0x2(%rdi), %r8
    00000011: 	pushq	%r12
    00000013: 	movq	%rdi, %r12
    00000016: 	pushq	%rbp
    00000017: 	movq	%rsi, %rbp
    0000001a: 	pushq	%rbx
    0000001b: 	cmpq	%r8, %rsi
    0000001e: 	je	.Ltmp2823 # Offset: 30
.Ltmp2830:
    00000024: 	leaq	0x4(%r12), %rax
    00000029: 	cmpq	%rax, %rbp
    0000002c: 	je	.Ltmp2824 # Offset: 44
    00000032: 	movzwl	0x2(%r12), %ecx
    00000038: 	movzwl	(%r12), %eax
    0000003d: 	cmpw	%ax, %cx
    00000040: 	jae	.Ltmp2825 # Offset: 64
    00000042: 	movl	%ecx, %edx
    00000044: 	movw	%cx, (%r12)
    00000049: 	movl	%eax, %ecx
    0000004b: 	movw	%ax, 0x2(%r12)
    00000051: 	movl	%edx, %eax
.Ltmp2825:
    00000053: 	movzwl	0x4(%r12), %edx
    00000059: 	cmpw	%dx, %cx
    0000005c: 	jbe	.Ltmp2826 # Offset: 92
    0000005e: 	movw	%cx, 0x4(%r12)
    00000064: 	movl	%edx, %ecx
    00000066: 	movw	%dx, 0x2(%r12)
    0000006c: 	cmpw	%ax, %dx
    0000006f: 	jae	.Ltmp2826 # Offset: 111
    00000071: 	movw	%ax, 0x2(%r12)
    00000077: 	movl	%eax, %ecx
    00000079: 	movw	%dx, (%r12)
.Ltmp2826:
    0000007e: 	leaq	0x6(%r12), %rax
    00000083: 	cmpq	%rax, %rbp
    00000086: 	je	.Ltmp2823 # Offset: 134
    00000088: 	leaq	0x2(%r8), %rax
    0000008c: 	movq	%r8, %rbx
    0000008f: 	cmpq	%rax, %rbp
    00000092: 	je	.Ltmp2827 # Offset: 146
    00000094: 	movl	$0x1, %esi
    00000099: 	nopl	(%rax) # Size: 7
.Ltmp2829:
    000000a0: 	movzwl	(%rax), %edx
    000000a3: 	cmpw	%cx, %dx
    000000a6: 	jae	.Ltmp2828 # Offset: 166
    000000a8: 	movzwl	(%rbx), %edi
    000000ab: 	addq	$0x1, %rsi
    000000af: 	addq	$0x2, %rbx
    000000b3: 	movw	%di, (%rax)
    000000b6: 	movw	%dx, -0x2(%rbx)
.Ltmp2828:
    000000ba: 	addq	$0x2, %rax
    000000be: 	cmpq	%rbp, %rax
    000000c1: 	jne	.Ltmp2829 # Offset: 193
    000000c3: 	leaq	-0x4(%rbp), %rax
    000000c7: 	subq	%r8, %rax
    000000ca: 	shrq	%rax
    000000cd: 	addq	$0x3, %rax
    000000d1: 	subq	%rsi, %rax
    000000d4: 	cmpq	%rax, %rsi
    000000d7: 	jbe	.Ltmp2827 # Offset: 215
    000000d9: 	movq	%rbp, %rsi
    000000dc: 	movq	%rbx, %rdi
    000000df: 	movq	%rbx, %rbp
    000000e2: 	callq	_Z18quicksort2_forwardIPtEvT_S1_ # Offset: 226
.Ltmp2831:
    000000e7: 	cmpq	%r12, %rbp
    000000ea: 	je	.Ltmp2823 # Offset: 234
    000000ec: 	leaq	0x2(%r12), %r8
    000000f1: 	cmpq	%rbp, %r8
    000000f4: 	jne	.Ltmp2830 # Offset: 244
.Ltmp2823:
    000000fa: 	popq	%rbx
    000000fb: 	popq	%rbp
    000000fc: 	popq	%r12
    000000fe: 	retq # Offset: 254
    000000ff: 	nop # Size: 1
.Ltmp2827:
    00000100: 	movq	%r12, %rdi
    00000103: 	movq	%rbx, %rsi
    00000106: 	movq	%rbx, %r12
    00000109: 	callq	_Z18quicksort2_forwardIPtEvT_S1_ # Offset: 265
    0000010e: 	jmp	.Ltmp2831 # Offset: 270
.Ltmp2824:
    00000110: 	movzwl	0x2(%r12), %eax
    00000116: 	movzwl	(%r12), %edx
    0000011b: 	cmpw	%dx, %ax
    0000011e: 	jae	.Ltmp2823 # Offset: 286
    00000120: 	movw	%dx, 0x2(%r12)
    00000126: 	movw	%ax, (%r12)
    0000012b: 	popq	%rbx
    0000012c: 	popq	%rbp
    0000012d: 	popq	%r12
    0000012f: 	retq # Offset: 303
.Ltmp2822:
    00000130: 	retq # Offset: 304
DWARF CFI Instructions:
    <empty>
End of Function "_Z18quicksort2_forwardIPtEvT_S1_"

Binary Function "_Z13TestOneSearchIPtPFS0_S0_S0_tEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 348
  State       : disassembled
  Address     : 0x168e0
  Size        : 0x4ba
  MaxSize     : 0x4c0
  Offset      : 0x168e0
  Section     : .text
  Orc Section : .local.text._Z13TestOneSearchIPtPFS0_S0_S0_tEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0347:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%r8, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rsi, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdx, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rdi, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	subq	$0x68, %rsp
    0000001e: 	movq	%rcx, 0x10(%rsp)
    00000023: 	movq	%fs:0x28, %rax
    0000002c: 	movq	%rax, 0x58(%rsp)
    00000031: 	xorl	%eax, %eax
    00000033: 	cmpq	%rsi, %rdi
    00000036: 	je	.Ltmp2832 # Offset: 54
    0000003c: 	leaq	-0x2(%rsi), %rdx
    00000040: 	movq	%rdi, %rax
    00000043: 	subq	%rdi, %rdx
    00000046: 	movq	%rdx, %rcx
    00000049: 	shrq	%rcx
    0000004c: 	leaq	0x1(%rcx), %rsi
    00000050: 	cmpq	$0xc, %rdx
    00000054: 	jbe	.Ltmp2833 # Offset: 84
    0000005a: 	movq	%rsi, %rdx
    0000005d: 	movdqa	DATAat0x34540(%rip), %xmm0
    00000065: 	shrq	$0x3, %rdx
    00000069: 	shlq	$0x4, %rdx
    0000006d: 	addq	%rdi, %rdx
.Ltmp2834:
    00000070: 	movups	%xmm0, (%rax)
    00000073: 	addq	$0x10, %rax
    00000077: 	cmpq	%rdx, %rax
    0000007a: 	jne	.Ltmp2834 # Offset: 122
    0000007c: 	movq	%rsi, %rdx
    0000007f: 	andq	$-0x8, %rdx
    00000083: 	leaq	(%rbp,%rdx,2), %rax
    00000088: 	cmpq	%rdx, %rsi
    0000008b: 	je	.Ltmp2832 # Offset: 139
.Ltmp2857:
    0000008d: 	subq	%rdx, %rcx
    00000090: 	leaq	0x1(%rcx), %rsi
    00000094: 	cmpq	$0x2, %rcx
    00000098: 	jbe	.Ltmp2835 # Offset: 152
    0000009a: 	movq	DATAat0x34540(%rip), %rcx
    000000a1: 	movq	%rcx, (%rbp,%rdx,2)
    000000a6: 	movq	%rsi, %rdx
    000000a9: 	andq	$-0x4, %rdx
    000000ad: 	leaq	(%rax,%rdx,2), %rax
    000000b1: 	cmpq	%rdx, %rsi
    000000b4: 	je	.Ltmp2832 # Offset: 180
.Ltmp2835:
    000000b6: 	movl	$0x5, %esi
    000000bb: 	leaq	0x2(%rax), %rdx
    000000bf: 	movw	%si, (%rax)
    000000c2: 	cmpq	%rdx, %r13
    000000c5: 	je	.Ltmp2832 # Offset: 197
    000000c7: 	movl	$0x5, %ecx
    000000cc: 	leaq	0x4(%rax), %rdx
    000000d0: 	movw	%cx, 0x2(%rax)
    000000d4: 	cmpq	%rdx, %r13
    000000d7: 	je	.Ltmp2832 # Offset: 215
    000000d9: 	movl	$0x5, %edx
    000000de: 	movw	%dx, 0x4(%rax)
.Ltmp2832:
    000000e2: 	movq	(%r14), %r8
    000000e5: 	leaq	0x40(%rsp), %rax
    000000ea: 	movq	0x8(%r14), %r15
    000000ee: 	movzbl	%r9b, %ebx
    000000f2: 	movq	%rax, 0x8(%rsp)
    000000f7: 	movq	%rax, 0x30(%rsp)
    000000fc: 	movq	%r8, %rax
    000000ff: 	addq	%r15, %rax
    00000102: 	je	.Ltmp2836 # Offset: 258
    00000104: 	testq	%r8, %r8
    00000107: 	je	.Ltmp2837 # Offset: 263
.Ltmp2836:
    0000010d: 	movq	%r15, 0x28(%rsp)
    00000112: 	cmpq	$0xf, %r15
    00000116: 	ja	.Ltmp2838 # Offset: 278
    0000011c: 	cmpq	$0x1, %r15
    00000120: 	jne	.Ltmp2839 # Offset: 288
    00000126: 	movzbl	(%r8), %eax
    0000012a: 	movb	%al, 0x40(%rsp)
    0000012e: 	movq	0x8(%rsp), %rax
.Ltmp2854:
    00000133: 	movq	%r15, 0x38(%rsp)
    00000138: 	movb	$0x0, (%rax,%r15)
    0000013d: 	movabsq	$0x3fffffffffffffff, %rax
    00000147: 	subq	0x38(%rsp), %rax
    0000014c: 	cmpq	$0xc, %rax
    00000150: 	jbe	.Ltmp2840 # Offset: 336
    00000156: 	leaq	0x30(%rsp), %r15
    0000015b: 	movl	$0xd, %edx
    00000160: 	leaq	DATAat0x34160(%rip), %rsi
    00000167: 	movq	%r15, %rdi
    0000016a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 362
    0000016f: 	movq	0x10(%rsp), %rcx
    00000174: 	movl	%ebx, %r9d
    00000177: 	movq	%r15, %r8
    0000017a: 	movq	%r12, %rdx
    0000017d: 	movq	%r13, %rsi
    00000180: 	movq	%rbp, %rdi
    00000183: 	callq	_Z15TestSearchArrayIPtPFS0_S0_S0_tEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 387
    00000188: 	movq	0x30(%rsp), %rdi
    0000018d: 	cmpq	0x8(%rsp), %rdi
    00000192: 	je	.Ltmp2841 # Offset: 402
    00000194: 	movq	0x40(%rsp), %rax
    00000199: 	leaq	0x1(%rax), %rsi
    0000019d: 	callq	_ZdlPvm@PLT # Offset: 413
.Ltmp2841:
    000001a2: 	cmpq	$0x9, %r12
    000001a6: 	jbe	.Ltmp2842 # Offset: 422
    000001ac: 	movabsq	$-0x3333333333333333, %rdx
    000001b6: 	movq	%r12, %rax
    000001b9: 	mulq	%rdx
    000001bc: 	shrq	$0x3, %rdx
.Ltmp2855:
    000001c0: 	movq	%rbp, %rsi
    000001c3: 	xorl	%ecx, %ecx
    000001c5: 	xorl	%edi, %edi
    000001c7: 	cmpq	$0x0, %r12
    000001cb: 	jbe	.Ltmp2843 # Offset: 459
    000001cd: 	nopl	(%rax) # Size: 3
.Ltmp2846:
    000001d0: 	xorl	%eax, %eax
    000001d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2845:
    000001d8: 	addq	$0x1, %rax
    000001dc: 	addq	$0x2, %rsi
    000001e0: 	addq	$0x1, %rcx
    000001e4: 	movw	%di, -0x2(%rsi)
    000001e8: 	cmpq	%rdx, %rax
    000001eb: 	jae	.Ltmp2844 # Offset: 491
    000001ed: 	cmpq	%rcx, %r12
    000001f0: 	ja	.Ltmp2845 # Offset: 496
.Ltmp2844:
    000001f2: 	addl	$0x1, %edi
    000001f5: 	cmpq	%rcx, %r12
    000001f8: 	ja	.Ltmp2846 # Offset: 504
.Ltmp2843:
    000001fa: 	leaq	DATAat0x3416e(%rip), %rdx
    00000201: 	movq	%r14, %rsi
    00000204: 	movq	%r15, %rdi
    00000207: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 519
    0000020c: 	movq	0x10(%rsp), %rcx
    00000211: 	movl	%ebx, %r9d
    00000214: 	movq	%r15, %r8
    00000217: 	movq	%r12, %rdx
    0000021a: 	movq	%r13, %rsi
    0000021d: 	movq	%rbp, %rdi
    00000220: 	callq	_Z15TestSearchArrayIPtPFS0_S0_S0_tEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 544
    00000225: 	movq	0x30(%rsp), %rdi
    0000022a: 	cmpq	0x8(%rsp), %rdi
    0000022f: 	je	.Ltmp2847 # Offset: 559
    00000231: 	movq	0x40(%rsp), %rax
    00000236: 	leaq	0x1(%rax), %rsi
    0000023a: 	callq	_ZdlPvm@PLT # Offset: 570
.Ltmp2847:
    0000023f: 	cmpq	%r13, %rbp
    00000242: 	je	.Ltmp2848 # Offset: 578
    00000248: 	leaq	-0x2(%r13), %rdx
    0000024c: 	movq	%rbp, %rax
    0000024f: 	subq	%rbp, %rdx
    00000252: 	movq	%rdx, %rcx
    00000255: 	shrq	%rcx
    00000258: 	addq	$0x1, %rcx
    0000025c: 	cmpq	$0xc, %rdx
    00000260: 	jbe	.Ltmp2849 # Offset: 608
    00000266: 	movq	%rcx, %rdx
    00000269: 	movdqa	DATAat0x34430(%rip), %xmm3
    00000271: 	movdqa	DATAat0x34480(%rip), %xmm7
    00000279: 	shrq	$0x3, %rdx
    0000027d: 	movdqa	DATAat0x34450(%rip), %xmm6
    00000285: 	movdqa	DATAat0x34460(%rip), %xmm5
    0000028d: 	shlq	$0x4, %rdx
    00000291: 	movdqa	DATAat0x34470(%rip), %xmm4
    00000299: 	addq	%rbp, %rdx
    0000029c: 	nopl	(%rax) # Size: 4
.Ltmp2850:
    000002a0: 	movdqa	%xmm3, %xmm1
    000002a4: 	addq	$0x10, %rax
    000002a8: 	paddq	%xmm7, %xmm3
    000002ac: 	movdqa	%xmm1, %xmm2
    000002b0: 	movdqa	%xmm1, %xmm0
    000002b4: 	paddq	%xmm6, %xmm2
    000002b8: 	shufps	$0x88, %xmm2, %xmm0
    000002bc: 	movdqa	%xmm1, %xmm2
    000002c0: 	paddq	%xmm4, %xmm1
    000002c4: 	paddq	%xmm5, %xmm2
    000002c8: 	shufps	$0x88, %xmm1, %xmm2
    000002cc: 	movdqa	%xmm0, %xmm1
    000002d0: 	punpcklwd	%xmm2, %xmm0
    000002d4: 	punpckhwd	%xmm2, %xmm1
    000002d8: 	movdqa	%xmm0, %xmm2
    000002dc: 	punpckhwd	%xmm1, %xmm2
    000002e0: 	punpcklwd	%xmm1, %xmm0
    000002e4: 	punpcklwd	%xmm2, %xmm0
    000002e8: 	movups	%xmm0, -0x10(%rax)
    000002ec: 	cmpq	%rdx, %rax
    000002ef: 	jne	.Ltmp2850 # Offset: 751
    000002f1: 	movq	%rcx, %rdx
    000002f4: 	andq	$-0x8, %rdx
    000002f8: 	leaq	(%rbp,%rdx,2), %rax
    000002fd: 	cmpq	%rcx, %rdx
    00000300: 	je	.Ltmp2848 # Offset: 768
.Ltmp2856:
    00000302: 	leaq	0x2(%rax), %rcx
    00000306: 	movw	%dx, (%rax)
    00000309: 	leaq	0x1(%rdx), %rsi
    0000030d: 	cmpq	%rcx, %r13
    00000310: 	je	.Ltmp2848 # Offset: 784
    00000312: 	leaq	0x4(%rax), %rcx
    00000316: 	movw	%si, 0x2(%rax)
    0000031a: 	leaq	0x2(%rdx), %rdi
    0000031e: 	cmpq	%rcx, %r13
    00000321: 	je	.Ltmp2848 # Offset: 801
    00000323: 	leaq	0x6(%rax), %rcx
    00000327: 	movw	%di, 0x4(%rax)
    0000032b: 	leaq	0x3(%rdx), %rsi
    0000032f: 	cmpq	%rcx, %r13
    00000332: 	je	.Ltmp2848 # Offset: 818
    00000334: 	leaq	0x8(%rax), %rcx
    00000338: 	movw	%si, 0x6(%rax)
    0000033c: 	leaq	0x4(%rdx), %rdi
    00000340: 	cmpq	%rcx, %r13
    00000343: 	je	.Ltmp2848 # Offset: 835
    00000345: 	leaq	0xa(%rax), %rsi
    00000349: 	movw	%di, 0x8(%rax)
    0000034d: 	leaq	0x5(%rdx), %rcx
    00000351: 	cmpq	%rsi, %r13
    00000354: 	je	.Ltmp2848 # Offset: 852
    00000356: 	movw	%cx, 0xa(%rax)
    0000035a: 	leaq	0xc(%rax), %rcx
    0000035e: 	addq	$0x6, %rdx
    00000362: 	cmpq	%rcx, %r13
    00000365: 	je	.Ltmp2848 # Offset: 869
    00000367: 	movw	%dx, 0xc(%rax)
.Ltmp2848:
    0000036b: 	movq	%r13, %rsi
    0000036e: 	movq	%rbp, %rdi
    00000371: 	callq	_Z18quicksort2_forwardIPtEvT_S1_ # Offset: 881
    00000376: 	leaq	DATAat0x34184(%rip), %rdx
    0000037d: 	movq	%r14, %rsi
    00000380: 	movq	%r15, %rdi
    00000383: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 899
    00000388: 	movq	0x10(%rsp), %rcx
    0000038d: 	movl	%ebx, %r9d
    00000390: 	movq	%r15, %r8
    00000393: 	movq	%r12, %rdx
    00000396: 	movq	%r13, %rsi
    00000399: 	movq	%rbp, %rdi
    0000039c: 	callq	_Z15TestSearchArrayIPtPFS0_S0_S0_tEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 924
    000003a1: 	movq	0x30(%rsp), %rdi
    000003a6: 	cmpq	0x8(%rsp), %rdi
    000003ab: 	je	.Ltmp2851 # Offset: 939
    000003ad: 	movq	0x40(%rsp), %rax
    000003b2: 	leaq	0x1(%rax), %rsi
    000003b6: 	callq	_ZdlPvm@PLT # Offset: 950
.Ltmp2851:
    000003bb: 	movq	0x58(%rsp), %rax
    000003c0: 	subq	%fs:0x28, %rax
    000003c9: 	jne	.Ltmp2852 # Offset: 969
    000003cf: 	addq	$0x68, %rsp
    000003d3: 	popq	%rbx
    000003d4: 	popq	%rbp
    000003d5: 	popq	%r12
    000003d7: 	popq	%r13
    000003d9: 	popq	%r14
    000003db: 	popq	%r15
    000003dd: 	retq # Offset: 989
.Ltmp2839:
    000003de: 	testq	%r15, %r15
    000003e1: 	jne	.Ltmp2853 # Offset: 993
    000003e7: 	movq	0x8(%rsp), %rax
    000003ec: 	jmp	.Ltmp2854 # Offset: 1004
.Ltmp2842:
    000003f1: 	testq	%r12, %r12
    000003f4: 	je	.Ltmp2843 # Offset: 1012
    000003fa: 	movl	$0x1, %edx
    000003ff: 	jmp	.Ltmp2855 # Offset: 1023
.Ltmp2838:
    00000404: 	leaq	0x30(%rsp), %rdi
    00000409: 	leaq	0x28(%rsp), %rsi
    0000040e: 	xorl	%edx, %edx
    00000410: 	movq	%r8, 0x18(%rsp)
    00000415: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1045
    0000041a: 	movq	0x18(%rsp), %r8
    0000041f: 	movq	%rax, 0x30(%rsp)
    00000424: 	movq	%rax, %rdi
    00000427: 	movq	0x28(%rsp), %rax
    0000042c: 	movq	%rax, 0x40(%rsp)
.Ltmp2858:
    00000431: 	movq	%r15, %rdx
    00000434: 	movq	%r8, %rsi
    00000437: 	callq	memcpy@PLT # Offset: 1079
    0000043c: 	movq	0x28(%rsp), %r15
    00000441: 	movq	0x30(%rsp), %rax
    00000446: 	jmp	.Ltmp2854 # Offset: 1094
.Ltmp2849:
    0000044b: 	xorl	%edx, %edx
    0000044d: 	jmp	.Ltmp2856 # Offset: 1101
.Ltmp2833:
    00000452: 	xorl	%edx, %edx
    00000454: 	jmp	.Ltmp2857 # Offset: 1108
.Ltmp2837:
    00000459: 	leaq	DATAat0x34008(%rip), %rdi
    00000460: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1120
.Ltmp2840:
    00000465: 	leaq	DATAat0x3414b(%rip), %rdi
    0000046c: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 1132
.Ltmp2853:
    00000471: 	movq	0x8(%rsp), %rdi
    00000476: 	jmp	.Ltmp2858 # Offset: 1142
.Ltmp2852:
    00000478: 	callq	__stack_chk_fail@PLT # Offset: 1144
    0000047d: 	endbr64
.Ltmp2860:
    00000481: 	movq	%rax, %rbp
    00000484: 	jmp	.Ltmp2859 # Offset: 1156
    00000486: 	endbr64
    0000048a: 	jmp	.Ltmp2860 # Offset: 1162
    0000048c: 	endbr64
    00000490: 	jmp	.Ltmp2860 # Offset: 1168
    00000492: 	endbr64
    00000496: 	jmp	.Ltmp2860 # Offset: 1174
.Ltmp2859:
    00000498: 	movq	0x30(%rsp), %rdi
    0000049d: 	cmpq	0x8(%rsp), %rdi
    000004a2: 	je	.Ltmp2861 # Offset: 1186
    000004a4: 	movq	0x40(%rsp), %rax
    000004a9: 	leaq	0x1(%rax), %rsi
    000004ad: 	callq	_ZdlPvm@PLT # Offset: 1197
.Ltmp2861:
    000004b2: 	movq	%rbp, %rdi
    000004b5: 	callq	_Unwind_Resume@PLT # Offset: 1205
DWARF CFI Instructions:
    <empty>
End of Function "_Z13TestOneSearchIPtPFS0_S0_S0_tEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z15TestSearchArrayIPtPFbS0_S0_tEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 349
  State       : disassembled
  Address     : 0x16da0
  Size        : 0x1d7
  MaxSize     : 0x1e0
  Offset      : 0x16da0
  Section     : .text
  Orc Section : .local.text._Z15TestSearchArrayIPtPFbS0_S0_tEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0348:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rcx, %r15
    00000009: 	pushq	%r14
    0000000b: 	movq	%rsi, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %r12
    00000015: 	movl	$0x800, %edi
    0000001a: 	pushq	%rbp
    0000001b: 	pushq	%rbx
    0000001c: 	subq	$0x28, %rsp
    00000020: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000027: 	movq	%rdx, 0x10(%rsp)
    0000002c: 	movq	%r8, 0x18(%rsp)
    00000031: 	movb	%r9b, 0xf(%rsp)
    00000036: 	callq	_Znwm@PLT # Offset: 54
    0000003b: 	xorl	%edx, %edx
    0000003d: 	movq	%rax, %r13
    00000040: 	movw	%dx, (%rax)
    00000043: 	addq	$0x2, %rax
    00000047: 	leaq	0x800(%r13), %rsi
    0000004e: 	cmpq	%rsi, %rax
    00000051: 	je	.Ltmp2862 # Offset: 81
    00000053: 	leaq	0xa(%r13), %rdi
    00000057: 	movq	$0x0, 0x2(%r13)
    0000005f: 	movq	$0x0, 0x7f8(%r13)
    0000006a: 	andq	$-0x8, %rdi
    0000006e: 	subq	%rdi, %rax
    00000071: 	movq	%rax, %rcx
    00000074: 	xorl	%eax, %eax
    00000076: 	addl	$0x7fe, %ecx
    0000007c: 	shrl	$0x3, %ecx
    0000007f: 	rep		stosq	%rax, %es:(%rdi)
.Ltmp2862:
    00000082: 	movabsq	$0x5851f42d4c957f2d, %r8
    0000008c: 	movq	%r13, %rcx
    0000008f: 	movabsq	$0x14057b7ef767814f, %rdi
    00000099: 	nopl	(%rax) # Size: 7
.Ltmp2863:
    000000a0: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000000a7: 	addq	$0x2, %rcx
    000000ab: 	imulq	%r8, %rax
    000000af: 	addq	%rdi, %rax
    000000b2: 	movq	%rax, %rdx
    000000b5: 	movq	%rax, %r9
    000000b8: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000000bf: 	shrq	$0x14, %rdx
    000000c3: 	shlq	$0x17, %r9
    000000c7: 	xorq	%r9, %rdx
    000000ca: 	xorq	%rdx, %rax
    000000cd: 	xorl	%edx, %edx
    000000cf: 	divq	0x10(%rsp)
    000000d4: 	movzwl	(%r12,%rdx,2), %eax
    000000d9: 	movw	%ax, -0x2(%rcx)
    000000dd: 	cmpq	%rcx, %rsi
    000000e0: 	jne	.Ltmp2863 # Offset: 224
    000000e2: 	callq	clock@PLT # Offset: 226
    000000e7: 	xorl	%ebx, %ebx
    000000e9: 	xorl	%ebp, %ebp
    000000eb: 	movq	%rax, start_time(%rip)
.Ltmp2867:
    000000f2: 	leaq	0xc8(%rbp), %rax
    000000f9: 	movq	%rax, (%rsp)
    000000fd: 	nopl	(%rax) # Size: 3
.Ltmp2865:
    00000100: 	movq	%rbp, %rax
    00000103: 	movq	%r14, %rsi
    00000106: 	addq	$0x1, %rbp
    0000010a: 	movq	%r12, %rdi
    0000010d: 	andl	$0x3ff, %eax
    00000112: 	movzwl	(%r13,%rax,2), %edx
    00000118: 	callq	*%r15 # Offset: 280
    0000011b: 	testb	%al, %al
    0000011d: 	jne	.Ltmp2864 # Offset: 285
    0000011f: 	cmpb	$0x0, 0xf(%rsp)
    00000124: 	movl	$0x1, %eax
    00000129: 	cmovel	%eax, %ebx
.Ltmp2864:
    0000012c: 	cmpq	(%rsp), %rbp
    00000130: 	jne	.Ltmp2865 # Offset: 304
    00000132: 	callq	clock@PLT # Offset: 306
    00000137: 	movsd	gMinimumTimeTarget(%rip), %xmm1
    0000013f: 	pxor	%xmm0, %xmm0
    00000143: 	movq	%rax, end_time(%rip)
    0000014a: 	subq	start_time(%rip), %rax
    00000151: 	cvtsi2sd	%rax, %xmm0
    00000156: 	divsd	DATAat0x34410(%rip), %xmm0
    0000015e: 	comisd	%xmm0, %xmm1
    00000162: 	jbe	.Ltmp2866 # Offset: 354
    00000164: 	cmpq	$0x5f5e0ff, %rbp
    0000016b: 	jbe	.Ltmp2867 # Offset: 363
.Ltmp2866:
    0000016d: 	movq	0x18(%rsp), %rdx
    00000172: 	movq	0x10(%rsp), %rdi
    00000177: 	movq	%rbp, %rsi
    0000017a: 	callq	_Z13record_resultdmmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 378
    0000017f: 	testb	%bl, %bl
    00000181: 	jne	.Ltmp2868 # Offset: 385
.Ltmp2869:
    00000183: 	addq	$0x28, %rsp
    00000187: 	movq	%r13, %rdi
    0000018a: 	movl	$0x800, %esi
    0000018f: 	popq	%rbx
    00000190: 	popq	%rbp
    00000191: 	popq	%r12
    00000193: 	popq	%r13
    00000195: 	popq	%r14
    00000197: 	popq	%r15
    00000199: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 409
.Ltmp2868:
    0000019e: 	movq	0x18(%rsp), %rax
    000001a3: 	leaq	DATAat0x34137(%rip), %rsi
    000001aa: 	movl	$0x1, %edi
    000001af: 	movq	(%rax), %rdx
    000001b2: 	xorl	%eax, %eax
    000001b4: 	callq	__printf_chk@PLT # Offset: 436
    000001b9: 	jmp	.Ltmp2869 # Offset: 441
    000001bb: 	endbr64
    000001bf: 	movq	%rax, %rbp
    000001c2: 	movq	%r13, %rdi
    000001c5: 	movl	$0x800, %esi
    000001ca: 	callq	_ZdlPvm@PLT # Offset: 458
    000001cf: 	movq	%rbp, %rdi
    000001d2: 	callq	_Unwind_Resume@PLT # Offset: 466
DWARF CFI Instructions:
    <empty>
End of Function "_Z15TestSearchArrayIPtPFbS0_S0_tEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z13TestOneSearchIPtPFbS0_S0_tEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 350
  State       : disassembled
  Address     : 0x16f80
  Size        : 0x4cc
  MaxSize     : 0x4d0
  Offset      : 0x16f80
  Section     : .text
  Orc Section : .local.text._Z13TestOneSearchIPtPFbS0_S0_tEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0349:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%r8, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rsi, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdx, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rdi, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	subq	$0x68, %rsp
    0000001e: 	movq	%rcx, 0x8(%rsp)
    00000023: 	movq	%fs:0x28, %rax
    0000002c: 	movq	%rax, 0x58(%rsp)
    00000031: 	xorl	%eax, %eax
    00000033: 	cmpq	%rsi, %rdi
    00000036: 	je	.Ltmp2870 # Offset: 54
    0000003c: 	leaq	-0x2(%rsi), %rdx
    00000040: 	movq	%rdi, %rax
    00000043: 	subq	%rdi, %rdx
    00000046: 	movq	%rdx, %rcx
    00000049: 	shrq	%rcx
    0000004c: 	leaq	0x1(%rcx), %rsi
    00000050: 	cmpq	$0xc, %rdx
    00000054: 	jbe	.Ltmp2871 # Offset: 84
    0000005a: 	movq	%rsi, %rdx
    0000005d: 	movdqa	DATAat0x34540(%rip), %xmm0
    00000065: 	shrq	$0x3, %rdx
    00000069: 	shlq	$0x4, %rdx
    0000006d: 	addq	%rdi, %rdx
.Ltmp2872:
    00000070: 	movups	%xmm0, (%rax)
    00000073: 	addq	$0x10, %rax
    00000077: 	cmpq	%rdx, %rax
    0000007a: 	jne	.Ltmp2872 # Offset: 122
    0000007c: 	movq	%rsi, %rdx
    0000007f: 	andq	$-0x8, %rdx
    00000083: 	leaq	(%rbp,%rdx,2), %rax
    00000088: 	cmpq	%rdx, %rsi
    0000008b: 	je	.Ltmp2870 # Offset: 139
.Ltmp2895:
    0000008d: 	subq	%rdx, %rcx
    00000090: 	leaq	0x1(%rcx), %rsi
    00000094: 	cmpq	$0x2, %rcx
    00000098: 	jbe	.Ltmp2873 # Offset: 152
    0000009a: 	movq	DATAat0x34540(%rip), %rcx
    000000a1: 	movq	%rcx, (%rbp,%rdx,2)
    000000a6: 	movq	%rsi, %rdx
    000000a9: 	andq	$-0x4, %rdx
    000000ad: 	leaq	(%rax,%rdx,2), %rax
    000000b1: 	cmpq	%rdx, %rsi
    000000b4: 	je	.Ltmp2870 # Offset: 180
.Ltmp2873:
    000000b6: 	movl	$0x5, %esi
    000000bb: 	leaq	0x2(%rax), %rdx
    000000bf: 	movw	%si, (%rax)
    000000c2: 	cmpq	%rdx, %r13
    000000c5: 	je	.Ltmp2870 # Offset: 197
    000000c7: 	movl	$0x5, %ecx
    000000cc: 	leaq	0x4(%rax), %rdx
    000000d0: 	movw	%cx, 0x2(%rax)
    000000d4: 	cmpq	%rdx, %r13
    000000d7: 	je	.Ltmp2870 # Offset: 215
    000000d9: 	movl	$0x5, %edx
    000000de: 	movw	%dx, 0x4(%rax)
.Ltmp2870:
    000000e2: 	leaq	0x30(%rsp), %r14
    000000e7: 	leaq	DATAat0x34160(%rip), %rdx
    000000ee: 	movq	%r15, %rsi
    000000f1: 	movzbl	%r9b, %ebx
    000000f5: 	movq	%r14, %rdi
    000000f8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 248
    000000fd: 	movq	0x8(%rsp), %rcx
    00000102: 	movl	%ebx, %r9d
    00000105: 	movq	%r14, %r8
    00000108: 	movq	%r12, %rdx
    0000010b: 	movq	%r13, %rsi
    0000010e: 	movq	%rbp, %rdi
    00000111: 	callq	_Z15TestSearchArrayIPtPFbS0_S0_tEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 273
    00000116: 	movq	0x30(%rsp), %rdi
    0000011b: 	leaq	0x40(%rsp), %rax
    00000120: 	movq	%rax, (%rsp)
    00000124: 	cmpq	%rax, %rdi
    00000127: 	je	.Ltmp2874 # Offset: 295
    00000129: 	movq	0x40(%rsp), %rax
    0000012e: 	leaq	0x1(%rax), %rsi
    00000132: 	callq	_ZdlPvm@PLT # Offset: 306
.Ltmp2874:
    00000137: 	cmpq	$0x9, %r12
    0000013b: 	jbe	.Ltmp2875 # Offset: 315
    00000141: 	movabsq	$-0x3333333333333333, %rdx
    0000014b: 	movq	%r12, %rax
    0000014e: 	mulq	%rdx
    00000151: 	shrq	$0x3, %rdx
.Ltmp2893:
    00000155: 	movq	%rbp, %rsi
    00000158: 	xorl	%ecx, %ecx
    0000015a: 	xorl	%edi, %edi
    0000015c: 	cmpq	$0x0, %r12
    00000160: 	jbe	.Ltmp2876 # Offset: 352
    00000162: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2879:
    00000168: 	xorl	%eax, %eax
    0000016a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2878:
    00000170: 	addq	$0x1, %rax
    00000174: 	addq	$0x2, %rsi
    00000178: 	addq	$0x1, %rcx
    0000017c: 	movw	%di, -0x2(%rsi)
    00000180: 	cmpq	%rdx, %rax
    00000183: 	jae	.Ltmp2877 # Offset: 387
    00000185: 	cmpq	%rcx, %r12
    00000188: 	ja	.Ltmp2878 # Offset: 392
.Ltmp2877:
    0000018a: 	addl	$0x1, %edi
    0000018d: 	cmpq	%rcx, %r12
    00000190: 	ja	.Ltmp2879 # Offset: 400
.Ltmp2876:
    00000192: 	movq	(%rsp), %rax
    00000196: 	movq	(%r15), %r9
    00000199: 	movq	0x8(%r15), %r8
    0000019d: 	movq	%rax, 0x30(%rsp)
    000001a2: 	movq	%r9, %rax
    000001a5: 	addq	%r8, %rax
    000001a8: 	je	.Ltmp2880 # Offset: 424
    000001aa: 	testq	%r9, %r9
    000001ad: 	je	.Ltmp2881 # Offset: 429
.Ltmp2880:
    000001b3: 	movq	%r8, 0x28(%rsp)
    000001b8: 	cmpq	$0xf, %r8
    000001bc: 	ja	.Ltmp2882 # Offset: 444
    000001c2: 	cmpq	$0x1, %r8
    000001c6: 	jne	.Ltmp2883 # Offset: 454
    000001cc: 	movzbl	(%r9), %eax
    000001d0: 	movb	%al, 0x40(%rsp)
    000001d4: 	movq	(%rsp), %rax
.Ltmp2892:
    000001d8: 	movq	%r8, 0x38(%rsp)
    000001dd: 	movb	$0x0, (%rax,%r8)
    000001e2: 	movabsq	$0x3fffffffffffffff, %rax
    000001ec: 	subq	0x38(%rsp), %rax
    000001f1: 	cmpq	$0x14, %rax
    000001f5: 	jbe	.Ltmp2884 # Offset: 501
    000001fb: 	movl	$0x15, %edx
    00000200: 	leaq	DATAat0x3416e(%rip), %rsi
    00000207: 	movq	%r14, %rdi
    0000020a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 522
    0000020f: 	movq	0x8(%rsp), %rcx
    00000214: 	movl	%ebx, %r9d
    00000217: 	movq	%r14, %r8
    0000021a: 	movq	%r12, %rdx
    0000021d: 	movq	%r13, %rsi
    00000220: 	movq	%rbp, %rdi
    00000223: 	callq	_Z15TestSearchArrayIPtPFbS0_S0_tEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 547
    00000228: 	movq	0x30(%rsp), %rdi
    0000022d: 	cmpq	(%rsp), %rdi
    00000231: 	je	.Ltmp2885 # Offset: 561
    00000233: 	movq	0x40(%rsp), %rax
    00000238: 	leaq	0x1(%rax), %rsi
    0000023c: 	callq	_ZdlPvm@PLT # Offset: 572
.Ltmp2885:
    00000241: 	cmpq	%r13, %rbp
    00000244: 	je	.Ltmp2886 # Offset: 580
    0000024a: 	leaq	-0x2(%r13), %rdx
    0000024e: 	movq	%rbp, %rax
    00000251: 	subq	%rbp, %rdx
    00000254: 	movq	%rdx, %rcx
    00000257: 	shrq	%rcx
    0000025a: 	addq	$0x1, %rcx
    0000025e: 	cmpq	$0xc, %rdx
    00000262: 	jbe	.Ltmp2887 # Offset: 610
    00000268: 	movq	%rcx, %rdx
    0000026b: 	movdqa	DATAat0x34430(%rip), %xmm3
    00000273: 	movdqa	DATAat0x34480(%rip), %xmm7
    0000027b: 	shrq	$0x3, %rdx
    0000027f: 	movdqa	DATAat0x34450(%rip), %xmm6
    00000287: 	movdqa	DATAat0x34460(%rip), %xmm5
    0000028f: 	shlq	$0x4, %rdx
    00000293: 	movdqa	DATAat0x34470(%rip), %xmm4
    0000029b: 	addq	%rbp, %rdx
    0000029e: 	nop # Size: 2
.Ltmp2888:
    000002a0: 	movdqa	%xmm3, %xmm1
    000002a4: 	addq	$0x10, %rax
    000002a8: 	paddq	%xmm7, %xmm3
    000002ac: 	movdqa	%xmm1, %xmm2
    000002b0: 	movdqa	%xmm1, %xmm0
    000002b4: 	paddq	%xmm6, %xmm2
    000002b8: 	shufps	$0x88, %xmm2, %xmm0
    000002bc: 	movdqa	%xmm1, %xmm2
    000002c0: 	paddq	%xmm4, %xmm1
    000002c4: 	paddq	%xmm5, %xmm2
    000002c8: 	shufps	$0x88, %xmm1, %xmm2
    000002cc: 	movdqa	%xmm0, %xmm1
    000002d0: 	punpcklwd	%xmm2, %xmm0
    000002d4: 	punpckhwd	%xmm2, %xmm1
    000002d8: 	movdqa	%xmm0, %xmm2
    000002dc: 	punpckhwd	%xmm1, %xmm2
    000002e0: 	punpcklwd	%xmm1, %xmm0
    000002e4: 	punpcklwd	%xmm2, %xmm0
    000002e8: 	movups	%xmm0, -0x10(%rax)
    000002ec: 	cmpq	%rdx, %rax
    000002ef: 	jne	.Ltmp2888 # Offset: 751
    000002f1: 	movq	%rcx, %rdx
    000002f4: 	andq	$-0x8, %rdx
    000002f8: 	leaq	(%rbp,%rdx,2), %rax
    000002fd: 	cmpq	%rdx, %rcx
    00000300: 	je	.Ltmp2886 # Offset: 768
.Ltmp2894:
    00000302: 	leaq	0x2(%rax), %rcx
    00000306: 	movw	%dx, (%rax)
    00000309: 	leaq	0x1(%rdx), %rsi
    0000030d: 	cmpq	%rcx, %r13
    00000310: 	je	.Ltmp2886 # Offset: 784
    00000312: 	leaq	0x4(%rax), %rcx
    00000316: 	movw	%si, 0x2(%rax)
    0000031a: 	leaq	0x2(%rdx), %rdi
    0000031e: 	cmpq	%rcx, %r13
    00000321: 	je	.Ltmp2886 # Offset: 801
    00000323: 	leaq	0x6(%rax), %rcx
    00000327: 	movw	%di, 0x4(%rax)
    0000032b: 	leaq	0x3(%rdx), %rsi
    0000032f: 	cmpq	%rcx, %r13
    00000332: 	je	.Ltmp2886 # Offset: 818
    00000334: 	leaq	0x8(%rax), %rcx
    00000338: 	movw	%si, 0x6(%rax)
    0000033c: 	leaq	0x4(%rdx), %rdi
    00000340: 	cmpq	%rcx, %r13
    00000343: 	je	.Ltmp2886 # Offset: 835
    00000345: 	leaq	0xa(%rax), %rsi
    00000349: 	movw	%di, 0x8(%rax)
    0000034d: 	leaq	0x5(%rdx), %rcx
    00000351: 	cmpq	%rsi, %r13
    00000354: 	je	.Ltmp2886 # Offset: 852
    00000356: 	movw	%cx, 0xa(%rax)
    0000035a: 	leaq	0xc(%rax), %rcx
    0000035e: 	addq	$0x6, %rdx
    00000362: 	cmpq	%rcx, %r13
    00000365: 	je	.Ltmp2886 # Offset: 869
    00000367: 	movw	%dx, 0xc(%rax)
.Ltmp2886:
    0000036b: 	movq	%r13, %rsi
    0000036e: 	movq	%rbp, %rdi
    00000371: 	callq	_Z18quicksort2_forwardIPtEvT_S1_ # Offset: 881
    00000376: 	leaq	DATAat0x34184(%rip), %rdx
    0000037d: 	movq	%r15, %rsi
    00000380: 	movq	%r14, %rdi
    00000383: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 899
    00000388: 	movq	0x8(%rsp), %rcx
    0000038d: 	movl	%ebx, %r9d
    00000390: 	movq	%r14, %r8
    00000393: 	movq	%r12, %rdx
    00000396: 	movq	%r13, %rsi
    00000399: 	movq	%rbp, %rdi
    0000039c: 	callq	_Z15TestSearchArrayIPtPFbS0_S0_tEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 924
    000003a1: 	movq	0x30(%rsp), %rdi
    000003a6: 	cmpq	(%rsp), %rdi
    000003aa: 	je	.Ltmp2889 # Offset: 938
    000003ac: 	movq	0x40(%rsp), %rax
    000003b1: 	leaq	0x1(%rax), %rsi
    000003b5: 	callq	_ZdlPvm@PLT # Offset: 949
.Ltmp2889:
    000003ba: 	movq	0x58(%rsp), %rax
    000003bf: 	subq	%fs:0x28, %rax
    000003c8: 	jne	.Ltmp2890 # Offset: 968
    000003ce: 	addq	$0x68, %rsp
    000003d2: 	popq	%rbx
    000003d3: 	popq	%rbp
    000003d4: 	popq	%r12
    000003d6: 	popq	%r13
    000003d8: 	popq	%r14
    000003da: 	popq	%r15
    000003dc: 	retq # Offset: 988
.Ltmp2883:
    000003dd: 	testq	%r8, %r8
    000003e0: 	jne	.Ltmp2891 # Offset: 992
    000003e2: 	movq	(%rsp), %rax
    000003e6: 	jmp	.Ltmp2892 # Offset: 998
.Ltmp2875:
    000003eb: 	testq	%r12, %r12
    000003ee: 	je	.Ltmp2876 # Offset: 1006
    000003f4: 	movl	$0x1, %edx
    000003f9: 	jmp	.Ltmp2893 # Offset: 1017
.Ltmp2882:
    000003fe: 	movq	%r14, %rdi
    00000401: 	leaq	0x28(%rsp), %rsi
    00000406: 	xorl	%edx, %edx
    00000408: 	movq	%r8, 0x18(%rsp)
    0000040d: 	movq	%r9, 0x10(%rsp)
    00000412: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1042
    00000417: 	movq	0x10(%rsp), %r9
    0000041c: 	movq	0x18(%rsp), %r8
    00000421: 	movq	%rax, 0x30(%rsp)
    00000426: 	movq	%rax, %rdi
    00000429: 	movq	0x28(%rsp), %rax
    0000042e: 	movq	%rax, 0x40(%rsp)
.Ltmp2896:
    00000433: 	movq	%r8, %rdx
    00000436: 	movq	%r9, %rsi
    00000439: 	callq	memcpy@PLT # Offset: 1081
    0000043e: 	movq	0x28(%rsp), %r8
    00000443: 	movq	0x30(%rsp), %rax
    00000448: 	jmp	.Ltmp2892 # Offset: 1096
.Ltmp2887:
    0000044d: 	xorl	%edx, %edx
    0000044f: 	jmp	.Ltmp2894 # Offset: 1103
.Ltmp2871:
    00000454: 	xorl	%edx, %edx
    00000456: 	jmp	.Ltmp2895 # Offset: 1110
.Ltmp2891:
    0000045b: 	movq	(%rsp), %rdi
    0000045f: 	jmp	.Ltmp2896 # Offset: 1119
.Ltmp2881:
    00000461: 	leaq	DATAat0x34008(%rip), %rdi
    00000468: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1128
.Ltmp2884:
    0000046d: 	leaq	DATAat0x3414b(%rip), %rdi
    00000474: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 1140
.Ltmp2890:
    00000479: 	callq	__stack_chk_fail@PLT # Offset: 1145
    0000047e: 	endbr64
.Ltmp2900:
    00000482: 	movq	%rax, %rbp
    00000485: 	jmp	.Ltmp2897 # Offset: 1157
    00000487: 	endbr64
    0000048b: 	movq	%rax, %rbp
    0000048e: 	movq	0x30(%rsp), %rdi
    00000493: 	leaq	0x40(%rsp), %rax
    00000498: 	cmpq	%rax, %rdi
    0000049b: 	je	.Ltmp2898 # Offset: 1179
.Ltmp2899:
    0000049d: 	movq	0x40(%rsp), %rax
    000004a2: 	leaq	0x1(%rax), %rsi
    000004a6: 	callq	_ZdlPvm@PLT # Offset: 1190
.Ltmp2898:
    000004ab: 	movq	%rbp, %rdi
    000004ae: 	callq	_Unwind_Resume@PLT # Offset: 1198
.Ltmp2897:
    000004b3: 	movq	0x30(%rsp), %rdi
    000004b8: 	cmpq	(%rsp), %rdi
    000004bc: 	jne	.Ltmp2899 # Offset: 1212
    000004be: 	jmp	.Ltmp2898 # Offset: 1214
    000004c0: 	endbr64
    000004c4: 	jmp	.Ltmp2900 # Offset: 1220
    000004c6: 	endbr64
    000004ca: 	jmp	.Ltmp2900 # Offset: 1226
DWARF CFI Instructions:
    <empty>
End of Function "_Z13TestOneSearchIPtPFbS0_S0_tEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z16TestOneContainerIPtEvT_S1_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 351
  State       : disassembled
  Address     : 0x17450
  Size        : 0x4de
  MaxSize     : 0x4e0
  Offset      : 0x17450
  Section     : .text
  Orc Section : .local.text._Z16TestOneContainerIPtEvT_S1_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0350:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdx, %r15
    00000009: 	leaq	DATAat0x3418f(%rip), %rdx
    00000010: 	pushq	%r14
    00000012: 	movq	%rsi, %r14
    00000015: 	movq	%rcx, %rsi
    00000018: 	pushq	%r13
    0000001a: 	movq	%rdi, %r13
    0000001d: 	pushq	%r12
    0000001f: 	movq	%rcx, %r12
    00000022: 	pushq	%rbp
    00000023: 	pushq	%rbx
    00000024: 	subq	$0x38, %rsp
    00000028: 	movq	%fs:0x28, %rax
    00000031: 	movq	%rax, 0x28(%rsp)
    00000036: 	xorl	%eax, %eax
    00000038: 	movq	%rsp, %rbp
    0000003b: 	movq	%rbp, %rdi
    0000003e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 62
    00000043: 	xorl	%r9d, %r9d
    00000046: 	movq	%rbp, %r8
    00000049: 	movq	%r15, %rdx
    0000004c: 	leaq	_Z14std_lowerboundIPttET_S1_S1_T0_(%rip), %rcx
    00000053: 	movq	%r14, %rsi
    00000056: 	movq	%r13, %rdi
    00000059: 	callq	_Z13TestOneSearchIPtPFS0_S0_S0_tEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 89
    0000005e: 	movq	(%rsp), %rdi
    00000062: 	leaq	0x10(%rsp), %rbx
    00000067: 	cmpq	%rbx, %rdi
    0000006a: 	je	.Ltmp2901 # Offset: 106
    0000006c: 	movq	0x10(%rsp), %rax
    00000071: 	leaq	0x1(%rax), %rsi
    00000075: 	callq	_ZdlPvm@PLT # Offset: 117
.Ltmp2901:
    0000007a: 	leaq	DATAat0x341a1(%rip), %rdx
    00000081: 	movq	%r12, %rsi
    00000084: 	movq	%rbp, %rdi
    00000087: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 135
    0000008c: 	xorl	%r9d, %r9d
    0000008f: 	movq	%rbp, %r8
    00000092: 	movq	%r15, %rdx
    00000095: 	leaq	_Z12lower_bound1IPttET_S1_S1_T0_(%rip), %rcx
    0000009c: 	movq	%r14, %rsi
    0000009f: 	movq	%r13, %rdi
    000000a2: 	callq	_Z13TestOneSearchIPtPFS0_S0_S0_tEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 162
    000000a7: 	movq	(%rsp), %rdi
    000000ab: 	cmpq	%rbx, %rdi
    000000ae: 	je	.Ltmp2902 # Offset: 174
    000000b0: 	movq	0x10(%rsp), %rax
    000000b5: 	leaq	0x1(%rax), %rsi
    000000b9: 	callq	_ZdlPvm@PLT # Offset: 185
.Ltmp2902:
    000000be: 	leaq	DATAat0x341af(%rip), %rdx
    000000c5: 	movq	%r12, %rsi
    000000c8: 	movq	%rbp, %rdi
    000000cb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 203
    000000d0: 	xorl	%r9d, %r9d
    000000d3: 	movq	%rbp, %r8
    000000d6: 	movq	%r15, %rdx
    000000d9: 	leaq	_Z12lower_bound2IPttET_S1_S1_T0_(%rip), %rcx
    000000e0: 	movq	%r14, %rsi
    000000e3: 	movq	%r13, %rdi
    000000e6: 	callq	_Z13TestOneSearchIPtPFS0_S0_S0_tEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 230
    000000eb: 	movq	(%rsp), %rdi
    000000ef: 	cmpq	%rbx, %rdi
    000000f2: 	je	.Ltmp2903 # Offset: 242
    000000f4: 	movq	0x10(%rsp), %rax
    000000f9: 	leaq	0x1(%rax), %rsi
    000000fd: 	callq	_ZdlPvm@PLT # Offset: 253
.Ltmp2903:
    00000102: 	leaq	DATAat0x341bd(%rip), %rdx
    00000109: 	movq	%r12, %rsi
    0000010c: 	movq	%rbp, %rdi
    0000010f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 271
    00000114: 	xorl	%r9d, %r9d
    00000117: 	movq	%rbp, %r8
    0000011a: 	movq	%r15, %rdx
    0000011d: 	leaq	_Z17lower_bound_recurIPttET_S1_S1_T0_(%rip), %rcx
    00000124: 	movq	%r14, %rsi
    00000127: 	movq	%r13, %rdi
    0000012a: 	callq	_Z13TestOneSearchIPtPFS0_S0_S0_tEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 298
    0000012f: 	movq	(%rsp), %rdi
    00000133: 	cmpq	%rbx, %rdi
    00000136: 	je	.Ltmp2904 # Offset: 310
    00000138: 	movq	0x10(%rsp), %rax
    0000013d: 	leaq	0x1(%rax), %rsi
    00000141: 	callq	_ZdlPvm@PLT # Offset: 321
.Ltmp2904:
    00000146: 	leaq	DATAat0x341d4(%rip), %rdx
    0000014d: 	movq	%r12, %rsi
    00000150: 	movq	%rbp, %rdi
    00000153: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 339
    00000158: 	movq	%rbp, %r8
    0000015b: 	movq	%r15, %rdx
    0000015e: 	movq	%r14, %rsi
    00000161: 	movl	$0x1, %r9d
    00000167: 	leaq	_Z14std_upperboundIPttET_S1_S1_T0_(%rip), %rcx
    0000016e: 	movq	%r13, %rdi
    00000171: 	callq	_Z13TestOneSearchIPtPFS0_S0_S0_tEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 369
    00000176: 	movq	(%rsp), %rdi
    0000017a: 	cmpq	%rbx, %rdi
    0000017d: 	je	.Ltmp2905 # Offset: 381
    0000017f: 	movq	0x10(%rsp), %rax
    00000184: 	leaq	0x1(%rax), %rsi
    00000188: 	callq	_ZdlPvm@PLT # Offset: 392
.Ltmp2905:
    0000018d: 	leaq	DATAat0x341e6(%rip), %rdx
    00000194: 	movq	%r12, %rsi
    00000197: 	movq	%rbp, %rdi
    0000019a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 410
    0000019f: 	movq	%rbp, %r8
    000001a2: 	movq	%r15, %rdx
    000001a5: 	movq	%r14, %rsi
    000001a8: 	movl	$0x1, %r9d
    000001ae: 	leaq	_Z12upper_bound1IPttET_S1_S1_T0_(%rip), %rcx
    000001b5: 	movq	%r13, %rdi
    000001b8: 	callq	_Z13TestOneSearchIPtPFS0_S0_S0_tEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 440
    000001bd: 	movq	(%rsp), %rdi
    000001c1: 	cmpq	%rbx, %rdi
    000001c4: 	je	.Ltmp2906 # Offset: 452
    000001c6: 	movq	0x10(%rsp), %rax
    000001cb: 	leaq	0x1(%rax), %rsi
    000001cf: 	callq	_ZdlPvm@PLT # Offset: 463
.Ltmp2906:
    000001d4: 	leaq	DATAat0x341f4(%rip), %rdx
    000001db: 	movq	%r12, %rsi
    000001de: 	movq	%rbp, %rdi
    000001e1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 481
    000001e6: 	movq	%rbp, %r8
    000001e9: 	movq	%r15, %rdx
    000001ec: 	movq	%r14, %rsi
    000001ef: 	movl	$0x1, %r9d
    000001f5: 	leaq	_Z12upper_bound2IPttET_S1_S1_T0_(%rip), %rcx
    000001fc: 	movq	%r13, %rdi
    000001ff: 	callq	_Z13TestOneSearchIPtPFS0_S0_S0_tEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 511
    00000204: 	movq	(%rsp), %rdi
    00000208: 	cmpq	%rbx, %rdi
    0000020b: 	je	.Ltmp2907 # Offset: 523
    0000020d: 	movq	0x10(%rsp), %rax
    00000212: 	leaq	0x1(%rax), %rsi
    00000216: 	callq	_ZdlPvm@PLT # Offset: 534
.Ltmp2907:
    0000021b: 	leaq	DATAat0x34202(%rip), %rdx
    00000222: 	movq	%r12, %rsi
    00000225: 	movq	%rbp, %rdi
    00000228: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 552
    0000022d: 	movq	%rbp, %r8
    00000230: 	movq	%r15, %rdx
    00000233: 	movq	%r14, %rsi
    00000236: 	movl	$0x1, %r9d
    0000023c: 	leaq	_Z17upper_bound_recurIPttET_S1_S1_T0_(%rip), %rcx
    00000243: 	movq	%r13, %rdi
    00000246: 	callq	_Z13TestOneSearchIPtPFS0_S0_S0_tEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 582
    0000024b: 	movq	(%rsp), %rdi
    0000024f: 	cmpq	%rbx, %rdi
    00000252: 	je	.Ltmp2908 # Offset: 594
    00000254: 	movq	0x10(%rsp), %rax
    00000259: 	leaq	0x1(%rax), %rsi
    0000025d: 	callq	_ZdlPvm@PLT # Offset: 605
.Ltmp2908:
    00000262: 	leaq	DATAat0x34219(%rip), %rdx
    00000269: 	movq	%r12, %rsi
    0000026c: 	movq	%rbp, %rdi
    0000026f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 623
    00000274: 	xorl	%r9d, %r9d
    00000277: 	movq	%rbp, %r8
    0000027a: 	movq	%r15, %rdx
    0000027d: 	leaq	_Z16std_binarysearchIPttEbT_S1_T0_(%rip), %rcx
    00000284: 	movq	%r14, %rsi
    00000287: 	movq	%r13, %rdi
    0000028a: 	callq	_Z13TestOneSearchIPtPFbS0_S0_tEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 650
    0000028f: 	movq	(%rsp), %rdi
    00000293: 	cmpq	%rbx, %rdi
    00000296: 	je	.Ltmp2909 # Offset: 662
    00000298: 	movq	0x10(%rsp), %rax
    0000029d: 	leaq	0x1(%rax), %rsi
    000002a1: 	callq	_ZdlPvm@PLT # Offset: 673
.Ltmp2909:
    000002a6: 	leaq	DATAat0x3422d(%rip), %rdx
    000002ad: 	movq	%r12, %rsi
    000002b0: 	movq	%rbp, %rdi
    000002b3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 691
    000002b8: 	xorl	%r9d, %r9d
    000002bb: 	movq	%rbp, %r8
    000002be: 	movq	%r15, %rdx
    000002c1: 	leaq	_Z13binarysearch1IPttEbT_S1_T0_(%rip), %rcx
    000002c8: 	movq	%r14, %rsi
    000002cb: 	movq	%r13, %rdi
    000002ce: 	callq	_Z13TestOneSearchIPtPFbS0_S0_tEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 718
    000002d3: 	movq	(%rsp), %rdi
    000002d7: 	cmpq	%rbx, %rdi
    000002da: 	je	.Ltmp2910 # Offset: 730
    000002dc: 	movq	0x10(%rsp), %rax
    000002e1: 	leaq	0x1(%rax), %rsi
    000002e5: 	callq	_ZdlPvm@PLT # Offset: 741
.Ltmp2910:
    000002ea: 	leaq	DATAat0x3423d(%rip), %rdx
    000002f1: 	movq	%r12, %rsi
    000002f4: 	movq	%rbp, %rdi
    000002f7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 759
    000002fc: 	xorl	%r9d, %r9d
    000002ff: 	movq	%rbp, %r8
    00000302: 	movq	%r15, %rdx
    00000305: 	leaq	_Z13binarysearch2IPttEbT_S1_T0_(%rip), %rcx
    0000030c: 	movq	%r14, %rsi
    0000030f: 	movq	%r13, %rdi
    00000312: 	callq	_Z13TestOneSearchIPtPFbS0_S0_tEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 786
    00000317: 	movq	(%rsp), %rdi
    0000031b: 	cmpq	%rbx, %rdi
    0000031e: 	je	.Ltmp2911 # Offset: 798
    00000320: 	movq	0x10(%rsp), %rax
    00000325: 	leaq	0x1(%rax), %rsi
    00000329: 	callq	_ZdlPvm@PLT # Offset: 809
.Ltmp2911:
    0000032e: 	leaq	DATAat0x3424d(%rip), %rdx
    00000335: 	movq	%r12, %rsi
    00000338: 	movq	%rbp, %rdi
    0000033b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 827
    00000340: 	xorl	%r9d, %r9d
    00000343: 	movq	%rbp, %r8
    00000346: 	movq	%r15, %rdx
    00000349: 	leaq	_Z13binarysearch3IPttEbT_S1_T0_(%rip), %rcx
    00000350: 	movq	%r14, %rsi
    00000353: 	movq	%r13, %rdi
    00000356: 	callq	_Z13TestOneSearchIPtPFbS0_S0_tEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 854
    0000035b: 	movq	(%rsp), %rdi
    0000035f: 	cmpq	%rbx, %rdi
    00000362: 	je	.Ltmp2912 # Offset: 866
    00000364: 	movq	0x10(%rsp), %rax
    00000369: 	leaq	0x1(%rax), %rsi
    0000036d: 	callq	_ZdlPvm@PLT # Offset: 877
.Ltmp2912:
    00000372: 	leaq	DATAat0x3425d(%rip), %rdx
    00000379: 	movq	%r12, %rsi
    0000037c: 	movq	%rbp, %rdi
    0000037f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 895
    00000384: 	xorl	%r9d, %r9d
    00000387: 	movq	%rbp, %r8
    0000038a: 	movq	%r15, %rdx
    0000038d: 	leaq	_Z13binarysearch4IPttEbT_S1_T0_(%rip), %rcx
    00000394: 	movq	%r14, %rsi
    00000397: 	movq	%r13, %rdi
    0000039a: 	callq	_Z13TestOneSearchIPtPFbS0_S0_tEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 922
    0000039f: 	movq	(%rsp), %rdi
    000003a3: 	cmpq	%rbx, %rdi
    000003a6: 	je	.Ltmp2913 # Offset: 934
    000003a8: 	movq	0x10(%rsp), %rax
    000003ad: 	leaq	0x1(%rax), %rsi
    000003b1: 	callq	_ZdlPvm@PLT # Offset: 945
.Ltmp2913:
    000003b6: 	leaq	DATAat0x3426d(%rip), %rdx
    000003bd: 	movq	%r12, %rsi
    000003c0: 	movq	%rbp, %rdi
    000003c3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 963
    000003c8: 	xorl	%r9d, %r9d
    000003cb: 	movq	%rbp, %r8
    000003ce: 	movq	%r15, %rdx
    000003d1: 	leaq	_Z18binarysearch_recurIPttEbT_S1_T0_(%rip), %rcx
    000003d8: 	movq	%r14, %rsi
    000003db: 	movq	%r13, %rdi
    000003de: 	callq	_Z13TestOneSearchIPtPFbS0_S0_tEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 990
    000003e3: 	movq	(%rsp), %rdi
    000003e7: 	cmpq	%rbx, %rdi
    000003ea: 	je	.Ltmp2914 # Offset: 1002
    000003ec: 	movq	0x10(%rsp), %rax
    000003f1: 	leaq	0x1(%rax), %rsi
    000003f5: 	callq	_ZdlPvm@PLT # Offset: 1013
.Ltmp2914:
    000003fa: 	movq	%rbp, %rdi
    000003fd: 	leaq	DATAat0x34286(%rip), %rdx
    00000404: 	movq	%r12, %rsi
    00000407: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1031
    0000040c: 	movq	%rbp, %rdi
    0000040f: 	callq	_Z9summarizeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1039
    00000414: 	movq	(%rsp), %rdi
    00000418: 	cmpq	%rbx, %rdi
    0000041b: 	je	.Ltmp2915 # Offset: 1051
    0000041d: 	movq	0x10(%rsp), %rax
    00000422: 	leaq	0x1(%rax), %rsi
    00000426: 	callq	_ZdlPvm@PLT # Offset: 1062
.Ltmp2915:
    0000042b: 	movq	0x28(%rsp), %rax
    00000430: 	subq	%fs:0x28, %rax
    00000439: 	jne	.Ltmp2916 # Offset: 1081
    0000043b: 	addq	$0x38, %rsp
    0000043f: 	popq	%rbx
    00000440: 	popq	%rbp
    00000441: 	popq	%r12
    00000443: 	popq	%r13
    00000445: 	popq	%r14
    00000447: 	popq	%r15
    00000449: 	retq # Offset: 1097
.Ltmp2916:
    0000044a: 	callq	__stack_chk_fail@PLT # Offset: 1098
    0000044f: 	endbr64
.Ltmp2918:
    00000453: 	movq	%rax, %rbp
    00000456: 	jmp	.Ltmp2917 # Offset: 1110
    00000458: 	endbr64
    0000045c: 	jmp	.Ltmp2918 # Offset: 1116
    0000045e: 	endbr64
    00000462: 	jmp	.Ltmp2918 # Offset: 1122
    00000464: 	endbr64
    00000468: 	jmp	.Ltmp2918 # Offset: 1128
    0000046a: 	endbr64
    0000046e: 	jmp	.Ltmp2918 # Offset: 1134
    00000470: 	endbr64
    00000474: 	jmp	.Ltmp2918 # Offset: 1140
    00000476: 	endbr64
    0000047a: 	jmp	.Ltmp2918 # Offset: 1146
.Ltmp2917:
    0000047c: 	movq	(%rsp), %rdi
    00000480: 	cmpq	%rbx, %rdi
    00000483: 	je	.Ltmp2919 # Offset: 1155
.Ltmp2921:
    00000485: 	movq	0x10(%rsp), %rax
    0000048a: 	leaq	0x1(%rax), %rsi
    0000048e: 	callq	_ZdlPvm@PLT # Offset: 1166
.Ltmp2919:
    00000493: 	movq	%rbp, %rdi
    00000496: 	callq	_Unwind_Resume@PLT # Offset: 1174
    0000049b: 	endbr64
    0000049f: 	jmp	.Ltmp2918 # Offset: 1183
    000004a1: 	endbr64
    000004a5: 	jmp	.Ltmp2918 # Offset: 1189
    000004a7: 	endbr64
    000004ab: 	jmp	.Ltmp2918 # Offset: 1195
    000004ad: 	endbr64
    000004b1: 	jmp	.Ltmp2918 # Offset: 1201
    000004b3: 	endbr64
    000004b7: 	jmp	.Ltmp2918 # Offset: 1207
    000004b9: 	endbr64
    000004bd: 	movq	%rax, %rbp
    000004c0: 	jmp	.Ltmp2920 # Offset: 1216
    000004c2: 	endbr64
    000004c6: 	jmp	.Ltmp2918 # Offset: 1222
    000004c8: 	endbr64
    000004cc: 	jmp	.Ltmp2918 # Offset: 1228
.Ltmp2920:
    000004ce: 	movq	(%rsp), %rdi
    000004d2: 	leaq	0x10(%rsp), %rax
    000004d7: 	cmpq	%rax, %rdi
    000004da: 	jne	.Ltmp2921 # Offset: 1242
    000004dc: 	jmp	.Ltmp2919 # Offset: 1244
DWARF CFI Instructions:
    <empty>
End of Function "_Z16TestOneContainerIPtEvT_S1_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z15TestSearchArrayIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEPFS6_S6_S6_tEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 352
  State       : disassembled
  Address     : 0x17930
  Size        : 0x20f
  MaxSize     : 0x210
  Offset      : 0x17930
  Section     : .text
  Orc Section : .local.text._Z15TestSearchArrayIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEPFS6_S6_S6_tEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0351:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rcx, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	movl	$0x800, %edi
    00000017: 	pushq	%rbp
    00000018: 	pushq	%rbx
    00000019: 	movq	%rsi, %rbx
    0000001c: 	subq	$0x28, %rsp
    00000020: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000027: 	movq	%rdx, 0x8(%rsp)
    0000002c: 	movq	%r8, 0x18(%rsp)
    00000031: 	movb	%r9b, 0x17(%rsp)
    00000036: 	callq	_Znwm@PLT # Offset: 54
    0000003b: 	xorl	%edx, %edx
    0000003d: 	movq	%rax, %r13
    00000040: 	movw	%dx, (%rax)
    00000043: 	addq	$0x2, %rax
    00000047: 	leaq	0x800(%r13), %rsi
    0000004e: 	cmpq	%rsi, %rax
    00000051: 	je	.Ltmp2922 # Offset: 81
    00000053: 	leaq	0xa(%r13), %rdi
    00000057: 	movq	$0x0, 0x2(%r13)
    0000005f: 	movq	$0x0, 0x7f8(%r13)
    0000006a: 	andq	$-0x8, %rdi
    0000006e: 	subq	%rdi, %rax
    00000071: 	movq	%rax, %rcx
    00000074: 	xorl	%eax, %eax
    00000076: 	addl	$0x7fe, %ecx
    0000007c: 	shrl	$0x3, %ecx
    0000007f: 	rep		stosq	%rax, %es:(%rdi)
.Ltmp2922:
    00000082: 	movabsq	$0x5851f42d4c957f2d, %r8
    0000008c: 	movq	%r13, %rcx
    0000008f: 	movabsq	$0x14057b7ef767814f, %rdi
    00000099: 	nopl	(%rax) # Size: 7
.Ltmp2923:
    000000a0: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000000a7: 	addq	$0x2, %rcx
    000000ab: 	imulq	%r8, %rax
    000000af: 	addq	%rdi, %rax
    000000b2: 	movq	%rax, %rdx
    000000b5: 	movq	%rax, %r9
    000000b8: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000000bf: 	shrq	$0x14, %rdx
    000000c3: 	shlq	$0x17, %r9
    000000c7: 	xorq	%r9, %rdx
    000000ca: 	xorq	%rdx, %rax
    000000cd: 	xorl	%edx, %edx
    000000cf: 	divq	0x8(%rsp)
    000000d4: 	movzwl	(%r12,%rdx,2), %eax
    000000d9: 	movw	%ax, -0x2(%rcx)
    000000dd: 	cmpq	%rcx, %rsi
    000000e0: 	jne	.Ltmp2923 # Offset: 224
    000000e2: 	callq	clock@PLT # Offset: 226
    000000e7: 	xorl	%r15d, %r15d
    000000ea: 	xorl	%ebp, %ebp
    000000ec: 	movq	%rax, start_time(%rip)
.Ltmp2927:
    000000f3: 	leaq	0xc8(%rbp), %rax
    000000fa: 	cmpb	$0x0, 0x17(%rsp)
    000000ff: 	movq	%rax, (%rsp)
    00000103: 	jne	.Ltmp2924 # Offset: 259
    00000109: 	nopl	(%rax) # Size: 7
.Ltmp2925:
    00000110: 	movq	%rbp, %rax
    00000113: 	movq	%rbx, %rsi
    00000116: 	addq	$0x1, %rbp
    0000011a: 	movq	%r12, %rdi
    0000011d: 	andl	$0x3ff, %eax
    00000122: 	movzwl	(%r13,%rax,2), %edx
    00000128: 	callq	*%r14 # Offset: 296
    0000012b: 	cmpq	%rax, %rbx
    0000012e: 	movl	$0x1, %eax
    00000133: 	cmovel	%eax, %r15d
    00000137: 	cmpq	(%rsp), %rbp
    0000013b: 	jne	.Ltmp2925 # Offset: 315
.Ltmp2929:
    0000013d: 	callq	clock@PLT # Offset: 317
    00000142: 	movsd	gMinimumTimeTarget(%rip), %xmm1
    0000014a: 	pxor	%xmm0, %xmm0
    0000014e: 	movq	%rax, end_time(%rip)
    00000155: 	subq	start_time(%rip), %rax
    0000015c: 	cvtsi2sd	%rax, %xmm0
    00000161: 	divsd	DATAat0x34410(%rip), %xmm0
    00000169: 	comisd	%xmm0, %xmm1
    0000016d: 	jbe	.Ltmp2926 # Offset: 365
    0000016f: 	cmpq	$0x5f5e0ff, %rbp
    00000176: 	jbe	.Ltmp2927 # Offset: 374
.Ltmp2926:
    0000017c: 	movq	0x18(%rsp), %rdx
    00000181: 	movq	0x8(%rsp), %rdi
    00000186: 	movq	%rbp, %rsi
    00000189: 	callq	_Z13record_resultdmmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 393
    0000018e: 	testb	%r15b, %r15b
    00000191: 	jne	.Ltmp2928 # Offset: 401
.Ltmp2930:
    00000193: 	addq	$0x28, %rsp
    00000197: 	movq	%r13, %rdi
    0000019a: 	movl	$0x800, %esi
    0000019f: 	popq	%rbx
    000001a0: 	popq	%rbp
    000001a1: 	popq	%r12
    000001a3: 	popq	%r13
    000001a5: 	popq	%r14
    000001a7: 	popq	%r15
    000001a9: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 425
    000001ae: 	nop # Size: 2
.Ltmp2924:
    000001b0: 	movq	%rbp, %rax
    000001b3: 	movq	%rbx, %rsi
    000001b6: 	addq	$0x1, %rbp
    000001ba: 	movq	%r12, %rdi
    000001bd: 	andl	$0x3ff, %eax
    000001c2: 	movzwl	(%r13,%rax,2), %edx
    000001c8: 	callq	*%r14 # Offset: 456
    000001cb: 	cmpq	(%rsp), %rbp
    000001cf: 	jne	.Ltmp2924 # Offset: 463
    000001d1: 	jmp	.Ltmp2929 # Offset: 465
.Ltmp2928:
    000001d6: 	movq	0x18(%rsp), %rax
    000001db: 	leaq	DATAat0x34137(%rip), %rsi
    000001e2: 	movl	$0x1, %edi
    000001e7: 	movq	(%rax), %rdx
    000001ea: 	xorl	%eax, %eax
    000001ec: 	callq	__printf_chk@PLT # Offset: 492
    000001f1: 	jmp	.Ltmp2930 # Offset: 497
    000001f3: 	endbr64
    000001f7: 	movq	%rax, %rbp
    000001fa: 	movq	%r13, %rdi
    000001fd: 	movl	$0x800, %esi
    00000202: 	callq	_ZdlPvm@PLT # Offset: 514
    00000207: 	movq	%rbp, %rdi
    0000020a: 	callq	_Unwind_Resume@PLT # Offset: 522
DWARF CFI Instructions:
    <empty>
End of Function "_Z15TestSearchArrayIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEPFS6_S6_S6_tEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z18quicksort2_forwardIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEvT_S7_" after disassembly {
  Number      : 353
  State       : disassembled
  Address     : 0x17b40
  Size        : 0x131
  MaxSize     : 0x140
  Offset      : 0x17b40
  Section     : .text
  Orc Section : .local.text._Z18quicksort2_forwardIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEvT_S7_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0352:
    00000000: 	endbr64
    00000004: 	cmpq	%rdi, %rsi
    00000007: 	je	.Ltmp2931 # Offset: 7
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rsi, %rbp
    00000016: 	pushq	%rbx
    00000017: 	leaq	0x2(%rdi), %rbx
    0000001b: 	cmpq	%rbx, %rsi
    0000001e: 	je	.Ltmp2932 # Offset: 30
.Ltmp2939:
    00000024: 	leaq	0x4(%r12), %rax
    00000029: 	cmpq	%rax, %rbp
    0000002c: 	je	.Ltmp2933 # Offset: 44
    00000032: 	movzwl	0x2(%r12), %ecx
    00000038: 	movzwl	(%r12), %eax
    0000003d: 	cmpw	%ax, %cx
    00000040: 	jae	.Ltmp2934 # Offset: 64
    00000042: 	movl	%ecx, %edx
    00000044: 	movw	%cx, (%r12)
    00000049: 	movl	%eax, %ecx
    0000004b: 	movw	%ax, 0x2(%r12)
    00000051: 	movl	%edx, %eax
.Ltmp2934:
    00000053: 	movzwl	0x4(%r12), %edx
    00000059: 	cmpw	%cx, %dx
    0000005c: 	jae	.Ltmp2935 # Offset: 92
    0000005e: 	movw	%cx, 0x4(%r12)
    00000064: 	movl	%edx, %ecx
    00000066: 	movw	%dx, 0x2(%r12)
    0000006c: 	cmpw	%ax, %dx
    0000006f: 	jae	.Ltmp2935 # Offset: 111
    00000071: 	movw	%ax, 0x2(%r12)
    00000077: 	movl	%eax, %ecx
    00000079: 	movw	%dx, (%r12)
.Ltmp2935:
    0000007e: 	leaq	0x6(%r12), %rax
    00000083: 	cmpq	%rax, %rbp
    00000086: 	je	.Ltmp2932 # Offset: 134
    00000088: 	leaq	0x2(%rbx), %rax
    0000008c: 	cmpq	%rbp, %rax
    0000008f: 	je	.Ltmp2936 # Offset: 143
    00000091: 	movq	%rbx, %r8
    00000094: 	movl	$0x1, %esi
    00000099: 	nopl	(%rax) # Size: 7
.Ltmp2938:
    000000a0: 	movzwl	(%rax), %edx
    000000a3: 	cmpw	%cx, %dx
    000000a6: 	jae	.Ltmp2937 # Offset: 166
    000000a8: 	movzwl	(%rbx), %edi
    000000ab: 	addq	$0x1, %rsi
    000000af: 	addq	$0x2, %rbx
    000000b3: 	movw	%di, (%rax)
    000000b6: 	movw	%dx, -0x2(%rbx)
.Ltmp2937:
    000000ba: 	addq	$0x2, %rax
    000000be: 	cmpq	%rbp, %rax
    000000c1: 	jne	.Ltmp2938 # Offset: 193
    000000c3: 	leaq	-0x4(%rbp), %rax
    000000c7: 	subq	%r8, %rax
    000000ca: 	shrq	%rax
    000000cd: 	addq	$0x3, %rax
    000000d1: 	subq	%rsi, %rax
    000000d4: 	cmpq	%rax, %rsi
    000000d7: 	jbe	.Ltmp2936 # Offset: 215
    000000d9: 	movq	%rbp, %rsi
    000000dc: 	movq	%rbx, %rdi
    000000df: 	movq	%rbx, %rbp
    000000e2: 	callq	_Z18quicksort2_forwardIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEvT_S7_ # Offset: 226
.Ltmp2940:
    000000e7: 	cmpq	%r12, %rbp
    000000ea: 	je	.Ltmp2932 # Offset: 234
    000000ec: 	leaq	0x2(%r12), %rbx
    000000f1: 	cmpq	%rbx, %rbp
    000000f4: 	jne	.Ltmp2939 # Offset: 244
.Ltmp2932:
    000000fa: 	popq	%rbx
    000000fb: 	popq	%rbp
    000000fc: 	popq	%r12
    000000fe: 	retq # Offset: 254
    000000ff: 	nop # Size: 1
.Ltmp2936:
    00000100: 	movq	%r12, %rdi
    00000103: 	movq	%rbx, %rsi
    00000106: 	movq	%rbx, %r12
    00000109: 	callq	_Z18quicksort2_forwardIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEvT_S7_ # Offset: 265
    0000010e: 	jmp	.Ltmp2940 # Offset: 270
.Ltmp2933:
    00000110: 	movzwl	0x2(%r12), %eax
    00000116: 	movzwl	(%r12), %edx
    0000011b: 	cmpw	%dx, %ax
    0000011e: 	jae	.Ltmp2932 # Offset: 286
    00000120: 	movw	%dx, 0x2(%r12)
    00000126: 	movw	%ax, (%r12)
    0000012b: 	popq	%rbx
    0000012c: 	popq	%rbp
    0000012d: 	popq	%r12
    0000012f: 	retq # Offset: 303
.Ltmp2931:
    00000130: 	retq # Offset: 304
DWARF CFI Instructions:
    <empty>
End of Function "_Z18quicksort2_forwardIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEvT_S7_"

Binary Function "_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEPFS6_S6_S6_tEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 354
  State       : disassembled
  Address     : 0x17c80
  Size        : 0x3fb
  MaxSize     : 0x400
  Offset      : 0x17c80
  Section     : .text
  Orc Section : .local.text._Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEPFS6_S6_S6_tEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0353:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rsi, %r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdx, %r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rdi, %rbp
    00000016: 	pushq	%rbx
    00000017: 	movq	%rdi, %rbx
    0000001a: 	subq	$0x58, %rsp
    0000001e: 	movq	%rcx, 0x8(%rsp)
    00000023: 	movq	%r8, 0x10(%rsp)
    00000028: 	movq	%fs:0x28, %rax
    00000031: 	movq	%rax, 0x48(%rsp)
    00000036: 	xorl	%eax, %eax
    00000038: 	cmpq	%rsi, %rdi
    0000003b: 	je	.Ltmp2941 # Offset: 59
    00000041: 	leaq	-0x2(%rsi), %rdx
    00000045: 	movq	%rdi, %rax
    00000048: 	subq	%rdi, %rdx
    0000004b: 	movq	%rdx, %rcx
    0000004e: 	shrq	%rcx
    00000051: 	leaq	0x1(%rcx), %rsi
    00000055: 	cmpq	$0xc, %rdx
    00000059: 	jbe	.Ltmp2942 # Offset: 89
    0000005f: 	movq	%rsi, %rdx
    00000062: 	movdqa	DATAat0x34540(%rip), %xmm0
    0000006a: 	shrq	$0x3, %rdx
    0000006e: 	shlq	$0x4, %rdx
    00000072: 	addq	%rdi, %rdx
    00000075: 	nopl	(%rax) # Size: 3
.Ltmp2943:
    00000078: 	movups	%xmm0, (%rax)
    0000007b: 	addq	$0x10, %rax
    0000007f: 	cmpq	%rdx, %rax
    00000082: 	jne	.Ltmp2943 # Offset: 130
    00000084: 	movq	%rsi, %rdx
    00000087: 	andq	$-0x8, %rdx
    0000008b: 	leaq	(%rbp,%rdx,2), %rax
    00000090: 	cmpq	%rdx, %rsi
    00000093: 	je	.Ltmp2941 # Offset: 147
.Ltmp2959:
    00000095: 	subq	%rdx, %rcx
    00000098: 	leaq	0x1(%rcx), %rsi
    0000009c: 	cmpq	$0x2, %rcx
    000000a0: 	jbe	.Ltmp2944 # Offset: 160
    000000a2: 	movq	DATAat0x34540(%rip), %rcx
    000000a9: 	movq	%rcx, (%rbp,%rdx,2)
    000000ae: 	movq	%rsi, %rdx
    000000b1: 	andq	$-0x4, %rdx
    000000b5: 	leaq	(%rax,%rdx,2), %rax
    000000b9: 	cmpq	%rdx, %rsi
    000000bc: 	je	.Ltmp2941 # Offset: 188
.Ltmp2944:
    000000be: 	movl	$0x5, %esi
    000000c3: 	leaq	0x2(%rax), %rdx
    000000c7: 	movw	%si, (%rax)
    000000ca: 	cmpq	%rdx, %r13
    000000cd: 	je	.Ltmp2941 # Offset: 205
    000000cf: 	movl	$0x5, %ecx
    000000d4: 	leaq	0x4(%rax), %rdx
    000000d8: 	movw	%cx, 0x2(%rax)
    000000dc: 	cmpq	%rdx, %r13
    000000df: 	je	.Ltmp2941 # Offset: 223
    000000e1: 	movl	$0x5, %edx
    000000e6: 	movw	%dx, 0x4(%rax)
.Ltmp2941:
    000000ea: 	movq	0x10(%rsp), %rsi
    000000ef: 	leaq	0x20(%rsp), %r15
    000000f4: 	leaq	DATAat0x34160(%rip), %rdx
    000000fb: 	movzbl	%r9b, %r14d
    000000ff: 	movq	%r15, %rdi
    00000102: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 258
    00000107: 	movq	0x8(%rsp), %rcx
    0000010c: 	movl	%r14d, %r9d
    0000010f: 	movq	%r15, %r8
    00000112: 	movq	%r12, %rdx
    00000115: 	movq	%r13, %rsi
    00000118: 	movq	%rbp, %rdi
    0000011b: 	callq	_Z15TestSearchArrayIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEPFS6_S6_S6_tEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 283
    00000120: 	movq	0x20(%rsp), %rdi
    00000125: 	leaq	0x30(%rsp), %rax
    0000012a: 	movq	%rax, 0x18(%rsp)
    0000012f: 	cmpq	%rax, %rdi
    00000132: 	je	.Ltmp2945 # Offset: 306
    00000134: 	movq	0x30(%rsp), %rax
    00000139: 	leaq	0x1(%rax), %rsi
    0000013d: 	callq	_ZdlPvm@PLT # Offset: 317
.Ltmp2945:
    00000142: 	cmpq	$0x9, %r12
    00000146: 	jbe	.Ltmp2946 # Offset: 326
    0000014c: 	movabsq	$-0x3333333333333333, %rdx
    00000156: 	movq	%r12, %rax
    00000159: 	mulq	%rdx
    0000015c: 	shrq	$0x3, %rdx
.Ltmp2957:
    00000160: 	movq	%rbp, %r8
    00000163: 	xorl	%esi, %esi
    00000165: 	xorl	%edi, %edi
    00000167: 	cmpq	$0x0, %r12
    0000016b: 	jbe	.Ltmp2947 # Offset: 363
    0000016d: 	nopl	(%rax) # Size: 3
.Ltmp2950:
    00000170: 	leaq	0x2(%r8), %rax
    00000174: 	xorl	%ecx, %ecx
    00000176: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2949:
    00000180: 	addq	$0x1, %rcx
    00000184: 	movw	%di, -0x2(%rax)
    00000188: 	movq	%rax, %r8
    0000018b: 	addq	$0x1, %rsi
    0000018f: 	addq	$0x2, %rax
    00000193: 	cmpq	%rdx, %rcx
    00000196: 	jae	.Ltmp2948 # Offset: 406
    00000198: 	cmpq	%rsi, %r12
    0000019b: 	ja	.Ltmp2949 # Offset: 411
.Ltmp2948:
    0000019d: 	addl	$0x1, %edi
    000001a0: 	cmpq	%rsi, %r12
    000001a3: 	ja	.Ltmp2950 # Offset: 419
.Ltmp2947:
    000001a5: 	movq	0x10(%rsp), %rsi
    000001aa: 	leaq	DATAat0x3416e(%rip), %rdx
    000001b1: 	movq	%r15, %rdi
    000001b4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 436
    000001b9: 	movq	0x8(%rsp), %rcx
    000001be: 	movl	%r14d, %r9d
    000001c1: 	movq	%r15, %r8
    000001c4: 	movq	%r12, %rdx
    000001c7: 	movq	%r13, %rsi
    000001ca: 	movq	%rbp, %rdi
    000001cd: 	callq	_Z15TestSearchArrayIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEPFS6_S6_S6_tEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 461
    000001d2: 	movq	0x20(%rsp), %rdi
    000001d7: 	cmpq	0x18(%rsp), %rdi
    000001dc: 	je	.Ltmp2951 # Offset: 476
    000001de: 	movq	0x30(%rsp), %rax
    000001e3: 	leaq	0x1(%rax), %rsi
    000001e7: 	callq	_ZdlPvm@PLT # Offset: 487
.Ltmp2951:
    000001ec: 	cmpq	%r13, %rbp
    000001ef: 	je	.Ltmp2952 # Offset: 495
    000001f5: 	leaq	-0x2(%r13), %rdx
    000001f9: 	movq	%rbp, %rax
    000001fc: 	subq	%rbp, %rdx
    000001ff: 	movq	%rdx, %rcx
    00000202: 	shrq	%rcx
    00000205: 	addq	$0x1, %rcx
    00000209: 	cmpq	$0xc, %rdx
    0000020d: 	jbe	.Ltmp2953 # Offset: 525
    00000213: 	movq	%rcx, %rdx
    00000216: 	movdqa	DATAat0x34430(%rip), %xmm3
    0000021e: 	movdqa	DATAat0x34480(%rip), %xmm7
    00000226: 	shrq	$0x3, %rdx
    0000022a: 	movdqa	DATAat0x34450(%rip), %xmm6
    00000232: 	movdqa	DATAat0x34460(%rip), %xmm5
    0000023a: 	shlq	$0x4, %rdx
    0000023e: 	movdqa	DATAat0x34470(%rip), %xmm4
    00000246: 	addq	%rbp, %rdx
    00000249: 	nopl	(%rax) # Size: 7
.Ltmp2954:
    00000250: 	movdqa	%xmm3, %xmm1
    00000254: 	addq	$0x10, %rax
    00000258: 	paddq	%xmm7, %xmm3
    0000025c: 	movdqa	%xmm1, %xmm2
    00000260: 	movdqa	%xmm1, %xmm0
    00000264: 	paddq	%xmm6, %xmm2
    00000268: 	shufps	$0x88, %xmm2, %xmm0
    0000026c: 	movdqa	%xmm1, %xmm2
    00000270: 	paddq	%xmm4, %xmm1
    00000274: 	paddq	%xmm5, %xmm2
    00000278: 	shufps	$0x88, %xmm1, %xmm2
    0000027c: 	movdqa	%xmm0, %xmm1
    00000280: 	punpcklwd	%xmm2, %xmm0
    00000284: 	punpckhwd	%xmm2, %xmm1
    00000288: 	movdqa	%xmm0, %xmm2
    0000028c: 	punpckhwd	%xmm1, %xmm2
    00000290: 	punpcklwd	%xmm1, %xmm0
    00000294: 	punpcklwd	%xmm2, %xmm0
    00000298: 	movups	%xmm0, -0x10(%rax)
    0000029c: 	cmpq	%rdx, %rax
    0000029f: 	jne	.Ltmp2954 # Offset: 671
    000002a1: 	movq	%rcx, %rax
    000002a4: 	andq	$-0x8, %rax
    000002a8: 	leaq	(%rbp,%rax,2), %rbx
    000002ad: 	cmpq	%rcx, %rax
    000002b0: 	je	.Ltmp2952 # Offset: 688
.Ltmp2958:
    000002b2: 	leaq	0x2(%rbx), %rdx
    000002b6: 	movw	%ax, (%rbx)
    000002b9: 	leaq	0x1(%rax), %rcx
    000002bd: 	cmpq	%rdx, %r13
    000002c0: 	je	.Ltmp2952 # Offset: 704
    000002c2: 	leaq	0x4(%rbx), %rdx
    000002c6: 	movw	%cx, 0x2(%rbx)
    000002ca: 	leaq	0x2(%rax), %rsi
    000002ce: 	cmpq	%rdx, %r13
    000002d1: 	je	.Ltmp2952 # Offset: 721
    000002d3: 	leaq	0x6(%rbx), %rdx
    000002d7: 	movw	%si, 0x4(%rbx)
    000002db: 	leaq	0x3(%rax), %rcx
    000002df: 	cmpq	%rdx, %r13
    000002e2: 	je	.Ltmp2952 # Offset: 738
    000002e4: 	leaq	0x8(%rbx), %rdx
    000002e8: 	movw	%cx, 0x6(%rbx)
    000002ec: 	leaq	0x4(%rax), %rsi
    000002f0: 	cmpq	%rdx, %r13
    000002f3: 	je	.Ltmp2952 # Offset: 755
    000002f5: 	leaq	0xa(%rbx), %rcx
    000002f9: 	movw	%si, 0x8(%rbx)
    000002fd: 	leaq	0x5(%rax), %rdx
    00000301: 	cmpq	%rcx, %r13
    00000304: 	je	.Ltmp2952 # Offset: 772
    00000306: 	movw	%dx, 0xa(%rbx)
    0000030a: 	leaq	0xc(%rbx), %rdx
    0000030e: 	addq	$0x6, %rax
    00000312: 	cmpq	%rdx, %r13
    00000315: 	je	.Ltmp2952 # Offset: 789
    00000317: 	movw	%ax, 0xc(%rbx)
.Ltmp2952:
    0000031b: 	movq	%r13, %rsi
    0000031e: 	movq	%rbp, %rdi
    00000321: 	callq	_Z18quicksort2_forwardIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEvT_S7_ # Offset: 801
    00000326: 	movq	0x10(%rsp), %rsi
    0000032b: 	leaq	DATAat0x34184(%rip), %rdx
    00000332: 	movq	%r15, %rdi
    00000335: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 821
    0000033a: 	movq	0x8(%rsp), %rcx
    0000033f: 	movl	%r14d, %r9d
    00000342: 	movq	%r15, %r8
    00000345: 	movq	%r12, %rdx
    00000348: 	movq	%r13, %rsi
    0000034b: 	movq	%rbp, %rdi
    0000034e: 	callq	_Z15TestSearchArrayIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEPFS6_S6_S6_tEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 846
    00000353: 	movq	0x20(%rsp), %rdi
    00000358: 	cmpq	0x18(%rsp), %rdi
    0000035d: 	je	.Ltmp2955 # Offset: 861
    0000035f: 	movq	0x30(%rsp), %rax
    00000364: 	leaq	0x1(%rax), %rsi
    00000368: 	callq	_ZdlPvm@PLT # Offset: 872
.Ltmp2955:
    0000036d: 	movq	0x48(%rsp), %rax
    00000372: 	subq	%fs:0x28, %rax
    0000037b: 	jne	.Ltmp2956 # Offset: 891
    0000037d: 	addq	$0x58, %rsp
    00000381: 	popq	%rbx
    00000382: 	popq	%rbp
    00000383: 	popq	%r12
    00000385: 	popq	%r13
    00000387: 	popq	%r14
    00000389: 	popq	%r15
    0000038b: 	retq # Offset: 907
.Ltmp2946:
    0000038c: 	testq	%r12, %r12
    0000038f: 	je	.Ltmp2947 # Offset: 911
    00000395: 	movl	$0x1, %edx
    0000039a: 	jmp	.Ltmp2957 # Offset: 922
.Ltmp2953:
    0000039f: 	xorl	%eax, %eax
    000003a1: 	jmp	.Ltmp2958 # Offset: 929
.Ltmp2942:
    000003a6: 	xorl	%edx, %edx
    000003a8: 	jmp	.Ltmp2959 # Offset: 936
.Ltmp2956:
    000003ad: 	callq	__stack_chk_fail@PLT # Offset: 941
    000003b2: 	endbr64
.Ltmp2961:
    000003b6: 	movq	%rax, %rbp
    000003b9: 	jmp	.Ltmp2960 # Offset: 953
    000003bb: 	endbr64
    000003bf: 	jmp	.Ltmp2961 # Offset: 959
    000003c1: 	endbr64
    000003c5: 	movq	%rax, %rbp
    000003c8: 	movq	0x20(%rsp), %rdi
    000003cd: 	leaq	0x30(%rsp), %rax
    000003d2: 	cmpq	%rax, %rdi
    000003d5: 	je	.Ltmp2962 # Offset: 981
.Ltmp2963:
    000003d7: 	movq	0x30(%rsp), %rax
    000003dc: 	leaq	0x1(%rax), %rsi
    000003e0: 	callq	_ZdlPvm@PLT # Offset: 992
.Ltmp2962:
    000003e5: 	movq	%rbp, %rdi
    000003e8: 	callq	_Unwind_Resume@PLT # Offset: 1000
.Ltmp2960:
    000003ed: 	movq	0x20(%rsp), %rdi
    000003f2: 	cmpq	0x18(%rsp), %rdi
    000003f7: 	jne	.Ltmp2963 # Offset: 1015
    000003f9: 	jmp	.Ltmp2962 # Offset: 1017
DWARF CFI Instructions:
    <empty>
End of Function "_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEPFS6_S6_S6_tEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z23lower_bound_recur_innerIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtlET_S7_T0_T1_" after disassembly {
  Number      : 355
  State       : disassembled
  Address     : 0x18080
  Size        : 0x54
  MaxSize     : 0x60
  Offset      : 0x18080
  Section     : .text
  Orc Section : .local.text._Z23lower_bound_recur_innerIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtlET_S7_T0_T1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0354:
    00000000: 	endbr64
    00000004: 	testq	%rdx, %rdx
    00000007: 	je	.Ltmp2964 # Offset: 7
    00000009: 	movq	%rdx, %rcx
    0000000c: 	movzwl	%si, %r9d
    00000010: 	shrq	$0x3f, %rcx
    00000014: 	addq	%rdx, %rcx
    00000017: 	movq	%rcx, %r8
    0000001a: 	andq	$-0x2, %rcx
    0000001e: 	addq	%rdi, %rcx
    00000021: 	sarq	%r8
    00000024: 	cmpw	%si, (%rcx)
    00000027: 	jae	.Ltmp2965 # Offset: 39
    00000029: 	addq	$0x1, %r8
    0000002d: 	leaq	0x2(%rcx), %rdi
    00000031: 	movl	%r9d, %esi
    00000034: 	subq	%r8, %rdx
    00000037: 	jmp	.LBB0354 # Offset: 55
    0000003c: 	nopl	(%rax) # Size: 4
.Ltmp2965:
    00000040: 	movq	%r8, %rdx
    00000043: 	movl	%r9d, %esi
    00000046: 	jmp	.LBB0354 # Offset: 70
    0000004b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2964:
    00000050: 	movq	%rdi, %rax
    00000053: 	retq # Offset: 83
DWARF CFI Instructions:
    <empty>
End of Function "_Z23lower_bound_recur_innerIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtlET_S7_T0_T1_"

Binary Function "_Z17lower_bound_recurIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET_S7_S7_T0_" after disassembly {
  Number      : 356
  State       : disassembled
  Address     : 0x180e0
  Size        : 0x108
  MaxSize     : 0x110
  Offset      : 0x180e0
  Section     : .text
  Orc Section : .local.text._Z17lower_bound_recurIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET_S7_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0355:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	cmpq	%rdi, %rsi
    0000000a: 	je	.Ltmp2966 # Offset: 10
    0000000c: 	subq	%rdi, %rsi
    0000000f: 	movl	%edx, %ecx
    00000011: 	movzwl	%dx, %r9d
    00000015: 	subq	$0x8, %rsp
    00000019: 	movq	%rsi, %r8
    0000001c: 	shrq	$0x3f, %rsi
    00000020: 	sarq	%r8
    00000023: 	addq	%r8, %rsi
    00000026: 	movq	%rsi, %rdx
    00000029: 	andq	$-0x2, %rsi
    0000002d: 	addq	%rdi, %rsi
    00000030: 	sarq	%rdx
    00000033: 	cmpw	(%rsi), %cx
    00000036: 	jbe	.Ltmp2967 # Offset: 54
    00000038: 	addq	$0x1, %rdx
    0000003c: 	leaq	0x2(%rsi), %rax
    00000040: 	subq	%rdx, %r8
    00000043: 	je	.Ltmp2968 # Offset: 67
    00000045: 	movq	%r8, %rdi
    00000048: 	shrq	$0x3f, %rdi
    0000004c: 	addq	%r8, %rdi
    0000004f: 	movq	%rdi, %rdx
    00000052: 	andq	$-0x2, %rdi
    00000056: 	addq	%rax, %rdi
    00000059: 	sarq	%rdx
    0000005c: 	cmpw	(%rdi), %cx
    0000005f: 	jbe	.Ltmp2969 # Offset: 95
    00000061: 	addq	$0x1, %rdx
    00000065: 	addq	$0x2, %rdi
    00000069: 	movl	%r9d, %esi
    0000006c: 	subq	%rdx, %r8
    0000006f: 	movq	%r8, %rdx
    00000072: 	callq	_Z23lower_bound_recur_innerIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtlET_S7_T0_T1_ # Offset: 114
.Ltmp2968:
    00000077: 	addq	$0x8, %rsp
    0000007b: 	retq # Offset: 123
    0000007c: 	nopl	(%rax) # Size: 4
.Ltmp2966:
    00000080: 	retq # Offset: 128
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp2967:
    00000088: 	testq	%rdx, %rdx
    0000008b: 	je	.Ltmp2968 # Offset: 139
    0000008d: 	testq	%r8, %r8
    00000090: 	leaq	0x3(%r8), %rsi
    00000094: 	cmovnsq	%r8, %rsi
    00000098: 	sarq	$0x2, %rsi
    0000009c: 	leaq	(%rdi,%rsi,2), %rdi
    000000a0: 	cmpw	(%rdi), %cx
    000000a3: 	jbe	.Ltmp2970 # Offset: 163
    000000a5: 	addq	$0x1, %rsi
    000000a9: 	addq	$0x2, %rdi
    000000ad: 	subq	%rsi, %rdx
    000000b0: 	movl	%r9d, %esi
    000000b3: 	callq	_Z23lower_bound_recur_innerIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtlET_S7_T0_T1_ # Offset: 179
    000000b8: 	jmp	.Ltmp2968 # Offset: 184
    000000ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2969:
    000000c0: 	movl	%r9d, %esi
    000000c3: 	movq	%rax, %rdi
    000000c6: 	callq	_Z23lower_bound_recur_innerIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtlET_S7_T0_T1_ # Offset: 198
    000000cb: 	jmp	.Ltmp2968 # Offset: 203
    000000cd: 	nopl	(%rax) # Size: 3
.Ltmp2970:
    000000d0: 	testq	%rsi, %rsi
    000000d3: 	je	.Ltmp2968 # Offset: 211
    000000d5: 	testq	%r8, %r8
    000000d8: 	leaq	0x7(%r8), %rdx
    000000dc: 	cmovnsq	%r8, %rdx
    000000e0: 	sarq	$0x3, %rdx
    000000e4: 	leaq	(%rax,%rdx,2), %rdi
    000000e8: 	cmpw	(%rdi), %cx
    000000eb: 	jbe	.Ltmp2969 # Offset: 235
    000000ed: 	leaq	0x1(%rdx), %rax
    000000f1: 	movq	%rsi, %rdx
    000000f4: 	addq	$0x2, %rdi
    000000f8: 	movl	%r9d, %esi
    000000fb: 	subq	%rax, %rdx
    000000fe: 	callq	_Z23lower_bound_recur_innerIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtlET_S7_T0_T1_ # Offset: 254
    00000103: 	jmp	.Ltmp2968 # Offset: 259
DWARF CFI Instructions:
    <empty>
End of Function "_Z17lower_bound_recurIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET_S7_S7_T0_"

Binary Function "_Z23upper_bound_recur_innerIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtlET_S7_T0_T1_" after disassembly {
  Number      : 357
  State       : disassembled
  Address     : 0x181f0
  Size        : 0x54
  MaxSize     : 0x60
  Offset      : 0x181f0
  Section     : .text
  Orc Section : .local.text._Z23upper_bound_recur_innerIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtlET_S7_T0_T1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0356:
    00000000: 	endbr64
    00000004: 	testq	%rdx, %rdx
    00000007: 	je	.Ltmp2971 # Offset: 7
    00000009: 	movq	%rdx, %rcx
    0000000c: 	movzwl	%si, %r9d
    00000010: 	shrq	$0x3f, %rcx
    00000014: 	addq	%rdx, %rcx
    00000017: 	movq	%rcx, %r8
    0000001a: 	andq	$-0x2, %rcx
    0000001e: 	addq	%rdi, %rcx
    00000021: 	sarq	%r8
    00000024: 	cmpw	%si, (%rcx)
    00000027: 	jbe	.Ltmp2972 # Offset: 39
    00000029: 	movq	%r8, %rdx
    0000002c: 	movl	%r9d, %esi
    0000002f: 	jmp	.LBB0356 # Offset: 47
    00000034: 	nopl	(%rax) # Size: 4
.Ltmp2972:
    00000038: 	addq	$0x1, %r8
    0000003c: 	leaq	0x2(%rcx), %rdi
    00000040: 	movl	%r9d, %esi
    00000043: 	subq	%r8, %rdx
    00000046: 	jmp	.LBB0356 # Offset: 70
    0000004b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2971:
    00000050: 	movq	%rdi, %rax
    00000053: 	retq # Offset: 83
DWARF CFI Instructions:
    <empty>
End of Function "_Z23upper_bound_recur_innerIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtlET_S7_T0_T1_"

Binary Function "_Z17upper_bound_recurIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET_S7_S7_T0_" after disassembly {
  Number      : 358
  State       : disassembled
  Address     : 0x18250
  Size        : 0x10e
  MaxSize     : 0x110
  Offset      : 0x18250
  Section     : .text
  Orc Section : .local.text._Z17upper_bound_recurIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET_S7_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0357:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	cmpq	%rdi, %rsi
    0000000a: 	je	.Ltmp2973 # Offset: 10
    0000000c: 	subq	%rdi, %rsi
    0000000f: 	subq	$0x8, %rsp
    00000013: 	movl	%edx, %ecx
    00000015: 	movzwl	%dx, %r9d
    00000019: 	movq	%rsi, %rdi
    0000001c: 	shrq	$0x3f, %rsi
    00000020: 	sarq	%rdi
    00000023: 	addq	%rdi, %rsi
    00000026: 	movq	%rsi, %r8
    00000029: 	andq	$-0x2, %rsi
    0000002d: 	addq	%rax, %rsi
    00000030: 	sarq	%r8
    00000033: 	cmpw	(%rsi), %dx
    00000036: 	jae	.Ltmp2974 # Offset: 54
    00000038: 	testq	%r8, %r8
    0000003b: 	je	.Ltmp2975 # Offset: 59
    0000003d: 	testq	%rdi, %rdi
    00000040: 	leaq	0x3(%rdi), %rdx
    00000044: 	cmovnsq	%rdi, %rdx
    00000048: 	sarq	$0x2, %rdx
    0000004c: 	leaq	(%rax,%rdx,2), %rdi
    00000050: 	cmpw	(%rdi), %cx
    00000053: 	jb	.Ltmp2976 # Offset: 83
    00000059: 	leaq	0x1(%rdx), %rax
    0000005d: 	movq	%r8, %rdx
    00000060: 	addq	$0x2, %rdi
    00000064: 	movl	%r9d, %esi
    00000067: 	subq	%rax, %rdx
    0000006a: 	callq	_Z23upper_bound_recur_innerIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtlET_S7_T0_T1_ # Offset: 106
.Ltmp2975:
    0000006f: 	addq	$0x8, %rsp
    00000073: 	retq # Offset: 115
    00000074: 	nopl	(%rax) # Size: 4
.Ltmp2973:
    00000078: 	retq # Offset: 120
    00000079: 	nopl	(%rax) # Size: 7
.Ltmp2974:
    00000080: 	addq	$0x1, %r8
    00000084: 	leaq	0x2(%rsi), %rax
    00000088: 	subq	%r8, %rdi
    0000008b: 	je	.Ltmp2975 # Offset: 139
    0000008d: 	movq	%rdi, %rsi
    00000090: 	shrq	$0x3f, %rsi
    00000094: 	addq	%rdi, %rsi
    00000097: 	movq	%rsi, %r10
    0000009a: 	andq	$-0x2, %rsi
    0000009e: 	addq	%rax, %rsi
    000000a1: 	sarq	%r10
    000000a4: 	cmpw	(%rsi), %dx
    000000a7: 	jae	.Ltmp2977 # Offset: 167
    000000a9: 	testq	%r10, %r10
    000000ac: 	je	.Ltmp2975 # Offset: 172
    000000ae: 	testq	%rdi, %rdi
    000000b1: 	leaq	0x3(%rdi), %rdx
    000000b5: 	cmovnsq	%rdi, %rdx
    000000b9: 	sarq	$0x2, %rdx
    000000bd: 	leaq	(%rax,%rdx,2), %rsi
    000000c1: 	cmpw	(%rsi), %cx
    000000c4: 	jb	.Ltmp2976 # Offset: 196
    000000c6: 	leaq	0x1(%rdx), %rax
    000000ca: 	movq	%r10, %rdx
    000000cd: 	leaq	0x2(%rsi), %rdi
    000000d1: 	movl	%r9d, %esi
    000000d4: 	subq	%rax, %rdx
    000000d7: 	callq	_Z23upper_bound_recur_innerIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtlET_S7_T0_T1_ # Offset: 215
    000000dc: 	jmp	.Ltmp2975 # Offset: 220
    000000de: 	nop # Size: 2
.Ltmp2976:
    000000e0: 	movl	%r9d, %esi
    000000e3: 	movq	%rax, %rdi
    000000e6: 	callq	_Z23upper_bound_recur_innerIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtlET_S7_T0_T1_ # Offset: 230
    000000eb: 	jmp	.Ltmp2975 # Offset: 235
    000000ed: 	nopl	(%rax) # Size: 3
.Ltmp2977:
    000000f0: 	leaq	0x2(%rsi), %r8
    000000f4: 	addq	$0x1, %r10
    000000f8: 	movq	%rdi, %rdx
    000000fb: 	movl	%r9d, %esi
    000000fe: 	subq	%r10, %rdx
    00000101: 	movq	%r8, %rdi
    00000104: 	callq	_Z23upper_bound_recur_innerIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtlET_S7_T0_T1_ # Offset: 260
    00000109: 	jmp	.Ltmp2975 # Offset: 265
DWARF CFI Instructions:
    <empty>
End of Function "_Z17upper_bound_recurIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET_S7_S7_T0_"

Binary Function "_Z15TestSearchArrayIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEPFbS6_S6_tEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 359
  State       : disassembled
  Address     : 0x18360
  Size        : 0x1d7
  MaxSize     : 0x1e0
  Offset      : 0x18360
  Section     : .text
  Orc Section : .local.text._Z15TestSearchArrayIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEPFbS6_S6_tEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0358:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rcx, %r15
    00000009: 	pushq	%r14
    0000000b: 	movq	%rsi, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %r12
    00000015: 	movl	$0x800, %edi
    0000001a: 	pushq	%rbp
    0000001b: 	pushq	%rbx
    0000001c: 	subq	$0x28, %rsp
    00000020: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000027: 	movq	%rdx, 0x10(%rsp)
    0000002c: 	movq	%r8, 0x18(%rsp)
    00000031: 	movb	%r9b, 0xf(%rsp)
    00000036: 	callq	_Znwm@PLT # Offset: 54
    0000003b: 	xorl	%edx, %edx
    0000003d: 	movq	%rax, %r13
    00000040: 	movw	%dx, (%rax)
    00000043: 	addq	$0x2, %rax
    00000047: 	leaq	0x800(%r13), %rsi
    0000004e: 	cmpq	%rsi, %rax
    00000051: 	je	.Ltmp2978 # Offset: 81
    00000053: 	leaq	0xa(%r13), %rdi
    00000057: 	movq	$0x0, 0x2(%r13)
    0000005f: 	movq	$0x0, 0x7f8(%r13)
    0000006a: 	andq	$-0x8, %rdi
    0000006e: 	subq	%rdi, %rax
    00000071: 	movq	%rax, %rcx
    00000074: 	xorl	%eax, %eax
    00000076: 	addl	$0x7fe, %ecx
    0000007c: 	shrl	$0x3, %ecx
    0000007f: 	rep		stosq	%rax, %es:(%rdi)
.Ltmp2978:
    00000082: 	movabsq	$0x5851f42d4c957f2d, %r8
    0000008c: 	movq	%r13, %rcx
    0000008f: 	movabsq	$0x14057b7ef767814f, %rdi
    00000099: 	nopl	(%rax) # Size: 7
.Ltmp2979:
    000000a0: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000000a7: 	addq	$0x2, %rcx
    000000ab: 	imulq	%r8, %rax
    000000af: 	addq	%rdi, %rax
    000000b2: 	movq	%rax, %rdx
    000000b5: 	movq	%rax, %r9
    000000b8: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000000bf: 	shrq	$0x14, %rdx
    000000c3: 	shlq	$0x17, %r9
    000000c7: 	xorq	%r9, %rdx
    000000ca: 	xorq	%rdx, %rax
    000000cd: 	xorl	%edx, %edx
    000000cf: 	divq	0x10(%rsp)
    000000d4: 	movzwl	(%r12,%rdx,2), %eax
    000000d9: 	movw	%ax, -0x2(%rcx)
    000000dd: 	cmpq	%rcx, %rsi
    000000e0: 	jne	.Ltmp2979 # Offset: 224
    000000e2: 	callq	clock@PLT # Offset: 226
    000000e7: 	xorl	%ebx, %ebx
    000000e9: 	xorl	%ebp, %ebp
    000000eb: 	movq	%rax, start_time(%rip)
.Ltmp2983:
    000000f2: 	leaq	0xc8(%rbp), %rax
    000000f9: 	movq	%rax, (%rsp)
    000000fd: 	nopl	(%rax) # Size: 3
.Ltmp2981:
    00000100: 	movq	%rbp, %rax
    00000103: 	movq	%r14, %rsi
    00000106: 	addq	$0x1, %rbp
    0000010a: 	movq	%r12, %rdi
    0000010d: 	andl	$0x3ff, %eax
    00000112: 	movzwl	(%r13,%rax,2), %edx
    00000118: 	callq	*%r15 # Offset: 280
    0000011b: 	testb	%al, %al
    0000011d: 	jne	.Ltmp2980 # Offset: 285
    0000011f: 	cmpb	$0x0, 0xf(%rsp)
    00000124: 	movl	$0x1, %eax
    00000129: 	cmovel	%eax, %ebx
.Ltmp2980:
    0000012c: 	cmpq	(%rsp), %rbp
    00000130: 	jne	.Ltmp2981 # Offset: 304
    00000132: 	callq	clock@PLT # Offset: 306
    00000137: 	movsd	gMinimumTimeTarget(%rip), %xmm1
    0000013f: 	pxor	%xmm0, %xmm0
    00000143: 	movq	%rax, end_time(%rip)
    0000014a: 	subq	start_time(%rip), %rax
    00000151: 	cvtsi2sd	%rax, %xmm0
    00000156: 	divsd	DATAat0x34410(%rip), %xmm0
    0000015e: 	comisd	%xmm0, %xmm1
    00000162: 	jbe	.Ltmp2982 # Offset: 354
    00000164: 	cmpq	$0x5f5e0ff, %rbp
    0000016b: 	jbe	.Ltmp2983 # Offset: 363
.Ltmp2982:
    0000016d: 	movq	0x18(%rsp), %rdx
    00000172: 	movq	0x10(%rsp), %rdi
    00000177: 	movq	%rbp, %rsi
    0000017a: 	callq	_Z13record_resultdmmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 378
    0000017f: 	testb	%bl, %bl
    00000181: 	jne	.Ltmp2984 # Offset: 385
.Ltmp2985:
    00000183: 	addq	$0x28, %rsp
    00000187: 	movq	%r13, %rdi
    0000018a: 	movl	$0x800, %esi
    0000018f: 	popq	%rbx
    00000190: 	popq	%rbp
    00000191: 	popq	%r12
    00000193: 	popq	%r13
    00000195: 	popq	%r14
    00000197: 	popq	%r15
    00000199: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 409
.Ltmp2984:
    0000019e: 	movq	0x18(%rsp), %rax
    000001a3: 	leaq	DATAat0x34137(%rip), %rsi
    000001aa: 	movl	$0x1, %edi
    000001af: 	movq	(%rax), %rdx
    000001b2: 	xorl	%eax, %eax
    000001b4: 	callq	__printf_chk@PLT # Offset: 436
    000001b9: 	jmp	.Ltmp2985 # Offset: 441
    000001bb: 	endbr64
    000001bf: 	movq	%rax, %rbp
    000001c2: 	movq	%r13, %rdi
    000001c5: 	movl	$0x800, %esi
    000001ca: 	callq	_ZdlPvm@PLT # Offset: 458
    000001cf: 	movq	%rbp, %rdi
    000001d2: 	callq	_Unwind_Resume@PLT # Offset: 466
DWARF CFI Instructions:
    <empty>
End of Function "_Z15TestSearchArrayIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEPFbS6_S6_tEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEPFbS6_S6_tEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 360
  State       : disassembled
  Address     : 0x18540
  Size        : 0x3fb
  MaxSize     : 0x400
  Offset      : 0x18540
  Section     : .text
  Orc Section : .local.text._Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEPFbS6_S6_tEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0359:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rsi, %r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdx, %r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rdi, %rbp
    00000016: 	pushq	%rbx
    00000017: 	movq	%rdi, %rbx
    0000001a: 	subq	$0x58, %rsp
    0000001e: 	movq	%rcx, 0x8(%rsp)
    00000023: 	movq	%r8, 0x10(%rsp)
    00000028: 	movq	%fs:0x28, %rax
    00000031: 	movq	%rax, 0x48(%rsp)
    00000036: 	xorl	%eax, %eax
    00000038: 	cmpq	%rsi, %rdi
    0000003b: 	je	.Ltmp2986 # Offset: 59
    00000041: 	leaq	-0x2(%rsi), %rdx
    00000045: 	movq	%rdi, %rax
    00000048: 	subq	%rdi, %rdx
    0000004b: 	movq	%rdx, %rcx
    0000004e: 	shrq	%rcx
    00000051: 	leaq	0x1(%rcx), %rsi
    00000055: 	cmpq	$0xc, %rdx
    00000059: 	jbe	.Ltmp2987 # Offset: 89
    0000005f: 	movq	%rsi, %rdx
    00000062: 	movdqa	DATAat0x34540(%rip), %xmm0
    0000006a: 	shrq	$0x3, %rdx
    0000006e: 	shlq	$0x4, %rdx
    00000072: 	addq	%rdi, %rdx
    00000075: 	nopl	(%rax) # Size: 3
.Ltmp2988:
    00000078: 	movups	%xmm0, (%rax)
    0000007b: 	addq	$0x10, %rax
    0000007f: 	cmpq	%rdx, %rax
    00000082: 	jne	.Ltmp2988 # Offset: 130
    00000084: 	movq	%rsi, %rdx
    00000087: 	andq	$-0x8, %rdx
    0000008b: 	leaq	(%rbp,%rdx,2), %rax
    00000090: 	cmpq	%rdx, %rsi
    00000093: 	je	.Ltmp2986 # Offset: 147
.Ltmp3004:
    00000095: 	subq	%rdx, %rcx
    00000098: 	leaq	0x1(%rcx), %rsi
    0000009c: 	cmpq	$0x2, %rcx
    000000a0: 	jbe	.Ltmp2989 # Offset: 160
    000000a2: 	movq	DATAat0x34540(%rip), %rcx
    000000a9: 	movq	%rcx, (%rbp,%rdx,2)
    000000ae: 	movq	%rsi, %rdx
    000000b1: 	andq	$-0x4, %rdx
    000000b5: 	leaq	(%rax,%rdx,2), %rax
    000000b9: 	cmpq	%rdx, %rsi
    000000bc: 	je	.Ltmp2986 # Offset: 188
.Ltmp2989:
    000000be: 	movl	$0x5, %esi
    000000c3: 	leaq	0x2(%rax), %rdx
    000000c7: 	movw	%si, (%rax)
    000000ca: 	cmpq	%rdx, %r13
    000000cd: 	je	.Ltmp2986 # Offset: 205
    000000cf: 	movl	$0x5, %ecx
    000000d4: 	leaq	0x4(%rax), %rdx
    000000d8: 	movw	%cx, 0x2(%rax)
    000000dc: 	cmpq	%rdx, %r13
    000000df: 	je	.Ltmp2986 # Offset: 223
    000000e1: 	movl	$0x5, %edx
    000000e6: 	movw	%dx, 0x4(%rax)
.Ltmp2986:
    000000ea: 	movq	0x10(%rsp), %rsi
    000000ef: 	leaq	0x20(%rsp), %r15
    000000f4: 	leaq	DATAat0x34160(%rip), %rdx
    000000fb: 	movzbl	%r9b, %r14d
    000000ff: 	movq	%r15, %rdi
    00000102: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 258
    00000107: 	movq	0x8(%rsp), %rcx
    0000010c: 	movl	%r14d, %r9d
    0000010f: 	movq	%r15, %r8
    00000112: 	movq	%r12, %rdx
    00000115: 	movq	%r13, %rsi
    00000118: 	movq	%rbp, %rdi
    0000011b: 	callq	_Z15TestSearchArrayIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEPFbS6_S6_tEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 283
    00000120: 	movq	0x20(%rsp), %rdi
    00000125: 	leaq	0x30(%rsp), %rax
    0000012a: 	movq	%rax, 0x18(%rsp)
    0000012f: 	cmpq	%rax, %rdi
    00000132: 	je	.Ltmp2990 # Offset: 306
    00000134: 	movq	0x30(%rsp), %rax
    00000139: 	leaq	0x1(%rax), %rsi
    0000013d: 	callq	_ZdlPvm@PLT # Offset: 317
.Ltmp2990:
    00000142: 	cmpq	$0x9, %r12
    00000146: 	jbe	.Ltmp2991 # Offset: 326
    0000014c: 	movabsq	$-0x3333333333333333, %rdx
    00000156: 	movq	%r12, %rax
    00000159: 	mulq	%rdx
    0000015c: 	shrq	$0x3, %rdx
.Ltmp3002:
    00000160: 	movq	%rbp, %r8
    00000163: 	xorl	%esi, %esi
    00000165: 	xorl	%edi, %edi
    00000167: 	cmpq	$0x0, %r12
    0000016b: 	jbe	.Ltmp2992 # Offset: 363
    0000016d: 	nopl	(%rax) # Size: 3
.Ltmp2995:
    00000170: 	leaq	0x2(%r8), %rax
    00000174: 	xorl	%ecx, %ecx
    00000176: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2994:
    00000180: 	addq	$0x1, %rcx
    00000184: 	movw	%di, -0x2(%rax)
    00000188: 	movq	%rax, %r8
    0000018b: 	addq	$0x1, %rsi
    0000018f: 	addq	$0x2, %rax
    00000193: 	cmpq	%rdx, %rcx
    00000196: 	jae	.Ltmp2993 # Offset: 406
    00000198: 	cmpq	%rsi, %r12
    0000019b: 	ja	.Ltmp2994 # Offset: 411
.Ltmp2993:
    0000019d: 	addl	$0x1, %edi
    000001a0: 	cmpq	%rsi, %r12
    000001a3: 	ja	.Ltmp2995 # Offset: 419
.Ltmp2992:
    000001a5: 	movq	0x10(%rsp), %rsi
    000001aa: 	leaq	DATAat0x3416e(%rip), %rdx
    000001b1: 	movq	%r15, %rdi
    000001b4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 436
    000001b9: 	movq	0x8(%rsp), %rcx
    000001be: 	movl	%r14d, %r9d
    000001c1: 	movq	%r15, %r8
    000001c4: 	movq	%r12, %rdx
    000001c7: 	movq	%r13, %rsi
    000001ca: 	movq	%rbp, %rdi
    000001cd: 	callq	_Z15TestSearchArrayIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEPFbS6_S6_tEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 461
    000001d2: 	movq	0x20(%rsp), %rdi
    000001d7: 	cmpq	0x18(%rsp), %rdi
    000001dc: 	je	.Ltmp2996 # Offset: 476
    000001de: 	movq	0x30(%rsp), %rax
    000001e3: 	leaq	0x1(%rax), %rsi
    000001e7: 	callq	_ZdlPvm@PLT # Offset: 487
.Ltmp2996:
    000001ec: 	cmpq	%r13, %rbp
    000001ef: 	je	.Ltmp2997 # Offset: 495
    000001f5: 	leaq	-0x2(%r13), %rdx
    000001f9: 	movq	%rbp, %rax
    000001fc: 	subq	%rbp, %rdx
    000001ff: 	movq	%rdx, %rcx
    00000202: 	shrq	%rcx
    00000205: 	addq	$0x1, %rcx
    00000209: 	cmpq	$0xc, %rdx
    0000020d: 	jbe	.Ltmp2998 # Offset: 525
    00000213: 	movq	%rcx, %rdx
    00000216: 	movdqa	DATAat0x34430(%rip), %xmm3
    0000021e: 	movdqa	DATAat0x34480(%rip), %xmm7
    00000226: 	shrq	$0x3, %rdx
    0000022a: 	movdqa	DATAat0x34450(%rip), %xmm6
    00000232: 	movdqa	DATAat0x34460(%rip), %xmm5
    0000023a: 	shlq	$0x4, %rdx
    0000023e: 	movdqa	DATAat0x34470(%rip), %xmm4
    00000246: 	addq	%rbp, %rdx
    00000249: 	nopl	(%rax) # Size: 7
.Ltmp2999:
    00000250: 	movdqa	%xmm3, %xmm1
    00000254: 	addq	$0x10, %rax
    00000258: 	paddq	%xmm7, %xmm3
    0000025c: 	movdqa	%xmm1, %xmm2
    00000260: 	movdqa	%xmm1, %xmm0
    00000264: 	paddq	%xmm6, %xmm2
    00000268: 	shufps	$0x88, %xmm2, %xmm0
    0000026c: 	movdqa	%xmm1, %xmm2
    00000270: 	paddq	%xmm4, %xmm1
    00000274: 	paddq	%xmm5, %xmm2
    00000278: 	shufps	$0x88, %xmm1, %xmm2
    0000027c: 	movdqa	%xmm0, %xmm1
    00000280: 	punpcklwd	%xmm2, %xmm0
    00000284: 	punpckhwd	%xmm2, %xmm1
    00000288: 	movdqa	%xmm0, %xmm2
    0000028c: 	punpckhwd	%xmm1, %xmm2
    00000290: 	punpcklwd	%xmm1, %xmm0
    00000294: 	punpcklwd	%xmm2, %xmm0
    00000298: 	movups	%xmm0, -0x10(%rax)
    0000029c: 	cmpq	%rdx, %rax
    0000029f: 	jne	.Ltmp2999 # Offset: 671
    000002a1: 	movq	%rcx, %rax
    000002a4: 	andq	$-0x8, %rax
    000002a8: 	leaq	(%rbp,%rax,2), %rbx
    000002ad: 	cmpq	%rcx, %rax
    000002b0: 	je	.Ltmp2997 # Offset: 688
.Ltmp3003:
    000002b2: 	leaq	0x2(%rbx), %rdx
    000002b6: 	movw	%ax, (%rbx)
    000002b9: 	leaq	0x1(%rax), %rcx
    000002bd: 	cmpq	%rdx, %r13
    000002c0: 	je	.Ltmp2997 # Offset: 704
    000002c2: 	leaq	0x4(%rbx), %rdx
    000002c6: 	movw	%cx, 0x2(%rbx)
    000002ca: 	leaq	0x2(%rax), %rsi
    000002ce: 	cmpq	%rdx, %r13
    000002d1: 	je	.Ltmp2997 # Offset: 721
    000002d3: 	leaq	0x6(%rbx), %rdx
    000002d7: 	movw	%si, 0x4(%rbx)
    000002db: 	leaq	0x3(%rax), %rcx
    000002df: 	cmpq	%rdx, %r13
    000002e2: 	je	.Ltmp2997 # Offset: 738
    000002e4: 	leaq	0x8(%rbx), %rdx
    000002e8: 	movw	%cx, 0x6(%rbx)
    000002ec: 	leaq	0x4(%rax), %rsi
    000002f0: 	cmpq	%rdx, %r13
    000002f3: 	je	.Ltmp2997 # Offset: 755
    000002f5: 	leaq	0xa(%rbx), %rcx
    000002f9: 	movw	%si, 0x8(%rbx)
    000002fd: 	leaq	0x5(%rax), %rdx
    00000301: 	cmpq	%rcx, %r13
    00000304: 	je	.Ltmp2997 # Offset: 772
    00000306: 	movw	%dx, 0xa(%rbx)
    0000030a: 	leaq	0xc(%rbx), %rdx
    0000030e: 	addq	$0x6, %rax
    00000312: 	cmpq	%rdx, %r13
    00000315: 	je	.Ltmp2997 # Offset: 789
    00000317: 	movw	%ax, 0xc(%rbx)
.Ltmp2997:
    0000031b: 	movq	%r13, %rsi
    0000031e: 	movq	%rbp, %rdi
    00000321: 	callq	_Z18quicksort2_forwardIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEvT_S7_ # Offset: 801
    00000326: 	movq	0x10(%rsp), %rsi
    0000032b: 	leaq	DATAat0x34184(%rip), %rdx
    00000332: 	movq	%r15, %rdi
    00000335: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 821
    0000033a: 	movq	0x8(%rsp), %rcx
    0000033f: 	movl	%r14d, %r9d
    00000342: 	movq	%r15, %r8
    00000345: 	movq	%r12, %rdx
    00000348: 	movq	%r13, %rsi
    0000034b: 	movq	%rbp, %rdi
    0000034e: 	callq	_Z15TestSearchArrayIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEPFbS6_S6_tEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 846
    00000353: 	movq	0x20(%rsp), %rdi
    00000358: 	cmpq	0x18(%rsp), %rdi
    0000035d: 	je	.Ltmp3000 # Offset: 861
    0000035f: 	movq	0x30(%rsp), %rax
    00000364: 	leaq	0x1(%rax), %rsi
    00000368: 	callq	_ZdlPvm@PLT # Offset: 872
.Ltmp3000:
    0000036d: 	movq	0x48(%rsp), %rax
    00000372: 	subq	%fs:0x28, %rax
    0000037b: 	jne	.Ltmp3001 # Offset: 891
    0000037d: 	addq	$0x58, %rsp
    00000381: 	popq	%rbx
    00000382: 	popq	%rbp
    00000383: 	popq	%r12
    00000385: 	popq	%r13
    00000387: 	popq	%r14
    00000389: 	popq	%r15
    0000038b: 	retq # Offset: 907
.Ltmp2991:
    0000038c: 	testq	%r12, %r12
    0000038f: 	je	.Ltmp2992 # Offset: 911
    00000395: 	movl	$0x1, %edx
    0000039a: 	jmp	.Ltmp3002 # Offset: 922
.Ltmp2998:
    0000039f: 	xorl	%eax, %eax
    000003a1: 	jmp	.Ltmp3003 # Offset: 929
.Ltmp2987:
    000003a6: 	xorl	%edx, %edx
    000003a8: 	jmp	.Ltmp3004 # Offset: 936
.Ltmp3001:
    000003ad: 	callq	__stack_chk_fail@PLT # Offset: 941
    000003b2: 	endbr64
.Ltmp3006:
    000003b6: 	movq	%rax, %rbp
    000003b9: 	jmp	.Ltmp3005 # Offset: 953
    000003bb: 	endbr64
    000003bf: 	jmp	.Ltmp3006 # Offset: 959
    000003c1: 	endbr64
    000003c5: 	movq	%rax, %rbp
    000003c8: 	movq	0x20(%rsp), %rdi
    000003cd: 	leaq	0x30(%rsp), %rax
    000003d2: 	cmpq	%rax, %rdi
    000003d5: 	je	.Ltmp3007 # Offset: 981
.Ltmp3008:
    000003d7: 	movq	0x30(%rsp), %rax
    000003dc: 	leaq	0x1(%rax), %rsi
    000003e0: 	callq	_ZdlPvm@PLT # Offset: 992
.Ltmp3007:
    000003e5: 	movq	%rbp, %rdi
    000003e8: 	callq	_Unwind_Resume@PLT # Offset: 1000
.Ltmp3005:
    000003ed: 	movq	0x20(%rsp), %rdi
    000003f2: 	cmpq	0x18(%rsp), %rdi
    000003f7: 	jne	.Ltmp3008 # Offset: 1015
    000003f9: 	jmp	.Ltmp3007 # Offset: 1017
DWARF CFI Instructions:
    <empty>
End of Function "_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEPFbS6_S6_tEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z16TestOneContainerIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEvT_S7_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 361
  State       : disassembled
  Address     : 0x18940
  Size        : 0x4de
  MaxSize     : 0x4e0
  Offset      : 0x18940
  Section     : .text
  Orc Section : .local.text._Z16TestOneContainerIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEvT_S7_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0360:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdx, %r15
    00000009: 	leaq	DATAat0x3418f(%rip), %rdx
    00000010: 	pushq	%r14
    00000012: 	movq	%rsi, %r14
    00000015: 	movq	%rcx, %rsi
    00000018: 	pushq	%r13
    0000001a: 	movq	%rdi, %r13
    0000001d: 	pushq	%r12
    0000001f: 	movq	%rcx, %r12
    00000022: 	pushq	%rbp
    00000023: 	pushq	%rbx
    00000024: 	subq	$0x38, %rsp
    00000028: 	movq	%fs:0x28, %rax
    00000031: 	movq	%rax, 0x28(%rsp)
    00000036: 	xorl	%eax, %eax
    00000038: 	movq	%rsp, %rbp
    0000003b: 	movq	%rbp, %rdi
    0000003e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 62
    00000043: 	xorl	%r9d, %r9d
    00000046: 	movq	%rbp, %r8
    00000049: 	movq	%r15, %rdx
    0000004c: 	leaq	_Z14std_lowerboundIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET_S7_S7_T0_(%rip), %rcx
    00000053: 	movq	%r14, %rsi
    00000056: 	movq	%r13, %rdi
    00000059: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEPFS6_S6_S6_tEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 89
    0000005e: 	movq	(%rsp), %rdi
    00000062: 	leaq	0x10(%rsp), %rbx
    00000067: 	cmpq	%rbx, %rdi
    0000006a: 	je	.Ltmp3009 # Offset: 106
    0000006c: 	movq	0x10(%rsp), %rax
    00000071: 	leaq	0x1(%rax), %rsi
    00000075: 	callq	_ZdlPvm@PLT # Offset: 117
.Ltmp3009:
    0000007a: 	leaq	DATAat0x341a1(%rip), %rdx
    00000081: 	movq	%r12, %rsi
    00000084: 	movq	%rbp, %rdi
    00000087: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 135
    0000008c: 	xorl	%r9d, %r9d
    0000008f: 	movq	%rbp, %r8
    00000092: 	movq	%r15, %rdx
    00000095: 	leaq	_Z12lower_bound1IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET_S7_S7_T0_(%rip), %rcx
    0000009c: 	movq	%r14, %rsi
    0000009f: 	movq	%r13, %rdi
    000000a2: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEPFS6_S6_S6_tEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 162
    000000a7: 	movq	(%rsp), %rdi
    000000ab: 	cmpq	%rbx, %rdi
    000000ae: 	je	.Ltmp3010 # Offset: 174
    000000b0: 	movq	0x10(%rsp), %rax
    000000b5: 	leaq	0x1(%rax), %rsi
    000000b9: 	callq	_ZdlPvm@PLT # Offset: 185
.Ltmp3010:
    000000be: 	leaq	DATAat0x341af(%rip), %rdx
    000000c5: 	movq	%r12, %rsi
    000000c8: 	movq	%rbp, %rdi
    000000cb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 203
    000000d0: 	xorl	%r9d, %r9d
    000000d3: 	movq	%rbp, %r8
    000000d6: 	movq	%r15, %rdx
    000000d9: 	leaq	_Z12lower_bound2IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET_S7_S7_T0_(%rip), %rcx
    000000e0: 	movq	%r14, %rsi
    000000e3: 	movq	%r13, %rdi
    000000e6: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEPFS6_S6_S6_tEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 230
    000000eb: 	movq	(%rsp), %rdi
    000000ef: 	cmpq	%rbx, %rdi
    000000f2: 	je	.Ltmp3011 # Offset: 242
    000000f4: 	movq	0x10(%rsp), %rax
    000000f9: 	leaq	0x1(%rax), %rsi
    000000fd: 	callq	_ZdlPvm@PLT # Offset: 253
.Ltmp3011:
    00000102: 	leaq	DATAat0x341bd(%rip), %rdx
    00000109: 	movq	%r12, %rsi
    0000010c: 	movq	%rbp, %rdi
    0000010f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 271
    00000114: 	xorl	%r9d, %r9d
    00000117: 	movq	%rbp, %r8
    0000011a: 	movq	%r15, %rdx
    0000011d: 	leaq	_Z17lower_bound_recurIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET_S7_S7_T0_(%rip), %rcx
    00000124: 	movq	%r14, %rsi
    00000127: 	movq	%r13, %rdi
    0000012a: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEPFS6_S6_S6_tEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 298
    0000012f: 	movq	(%rsp), %rdi
    00000133: 	cmpq	%rbx, %rdi
    00000136: 	je	.Ltmp3012 # Offset: 310
    00000138: 	movq	0x10(%rsp), %rax
    0000013d: 	leaq	0x1(%rax), %rsi
    00000141: 	callq	_ZdlPvm@PLT # Offset: 321
.Ltmp3012:
    00000146: 	leaq	DATAat0x341d4(%rip), %rdx
    0000014d: 	movq	%r12, %rsi
    00000150: 	movq	%rbp, %rdi
    00000153: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 339
    00000158: 	movq	%rbp, %r8
    0000015b: 	movq	%r15, %rdx
    0000015e: 	movq	%r14, %rsi
    00000161: 	movl	$0x1, %r9d
    00000167: 	leaq	_Z14std_upperboundIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET_S7_S7_T0_(%rip), %rcx
    0000016e: 	movq	%r13, %rdi
    00000171: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEPFS6_S6_S6_tEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 369
    00000176: 	movq	(%rsp), %rdi
    0000017a: 	cmpq	%rbx, %rdi
    0000017d: 	je	.Ltmp3013 # Offset: 381
    0000017f: 	movq	0x10(%rsp), %rax
    00000184: 	leaq	0x1(%rax), %rsi
    00000188: 	callq	_ZdlPvm@PLT # Offset: 392
.Ltmp3013:
    0000018d: 	leaq	DATAat0x341e6(%rip), %rdx
    00000194: 	movq	%r12, %rsi
    00000197: 	movq	%rbp, %rdi
    0000019a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 410
    0000019f: 	movq	%rbp, %r8
    000001a2: 	movq	%r15, %rdx
    000001a5: 	movq	%r14, %rsi
    000001a8: 	movl	$0x1, %r9d
    000001ae: 	leaq	_Z12upper_bound1IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET_S7_S7_T0_(%rip), %rcx
    000001b5: 	movq	%r13, %rdi
    000001b8: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEPFS6_S6_S6_tEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 440
    000001bd: 	movq	(%rsp), %rdi
    000001c1: 	cmpq	%rbx, %rdi
    000001c4: 	je	.Ltmp3014 # Offset: 452
    000001c6: 	movq	0x10(%rsp), %rax
    000001cb: 	leaq	0x1(%rax), %rsi
    000001cf: 	callq	_ZdlPvm@PLT # Offset: 463
.Ltmp3014:
    000001d4: 	leaq	DATAat0x341f4(%rip), %rdx
    000001db: 	movq	%r12, %rsi
    000001de: 	movq	%rbp, %rdi
    000001e1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 481
    000001e6: 	movq	%rbp, %r8
    000001e9: 	movq	%r15, %rdx
    000001ec: 	movq	%r14, %rsi
    000001ef: 	movl	$0x1, %r9d
    000001f5: 	leaq	_Z12upper_bound2IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET_S7_S7_T0_(%rip), %rcx
    000001fc: 	movq	%r13, %rdi
    000001ff: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEPFS6_S6_S6_tEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 511
    00000204: 	movq	(%rsp), %rdi
    00000208: 	cmpq	%rbx, %rdi
    0000020b: 	je	.Ltmp3015 # Offset: 523
    0000020d: 	movq	0x10(%rsp), %rax
    00000212: 	leaq	0x1(%rax), %rsi
    00000216: 	callq	_ZdlPvm@PLT # Offset: 534
.Ltmp3015:
    0000021b: 	leaq	DATAat0x34202(%rip), %rdx
    00000222: 	movq	%r12, %rsi
    00000225: 	movq	%rbp, %rdi
    00000228: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 552
    0000022d: 	movq	%rbp, %r8
    00000230: 	movq	%r15, %rdx
    00000233: 	movq	%r14, %rsi
    00000236: 	movl	$0x1, %r9d
    0000023c: 	leaq	_Z17upper_bound_recurIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtET_S7_S7_T0_(%rip), %rcx
    00000243: 	movq	%r13, %rdi
    00000246: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEPFS6_S6_S6_tEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 582
    0000024b: 	movq	(%rsp), %rdi
    0000024f: 	cmpq	%rbx, %rdi
    00000252: 	je	.Ltmp3016 # Offset: 594
    00000254: 	movq	0x10(%rsp), %rax
    00000259: 	leaq	0x1(%rax), %rsi
    0000025d: 	callq	_ZdlPvm@PLT # Offset: 605
.Ltmp3016:
    00000262: 	leaq	DATAat0x34219(%rip), %rdx
    00000269: 	movq	%r12, %rsi
    0000026c: 	movq	%rbp, %rdi
    0000026f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 623
    00000274: 	xorl	%r9d, %r9d
    00000277: 	movq	%rbp, %r8
    0000027a: 	movq	%r15, %rdx
    0000027d: 	leaq	_Z16std_binarysearchIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtEbT_S7_T0_(%rip), %rcx
    00000284: 	movq	%r14, %rsi
    00000287: 	movq	%r13, %rdi
    0000028a: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEPFbS6_S6_tEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 650
    0000028f: 	movq	(%rsp), %rdi
    00000293: 	cmpq	%rbx, %rdi
    00000296: 	je	.Ltmp3017 # Offset: 662
    00000298: 	movq	0x10(%rsp), %rax
    0000029d: 	leaq	0x1(%rax), %rsi
    000002a1: 	callq	_ZdlPvm@PLT # Offset: 673
.Ltmp3017:
    000002a6: 	leaq	DATAat0x3422d(%rip), %rdx
    000002ad: 	movq	%r12, %rsi
    000002b0: 	movq	%rbp, %rdi
    000002b3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 691
    000002b8: 	xorl	%r9d, %r9d
    000002bb: 	movq	%rbp, %r8
    000002be: 	movq	%r15, %rdx
    000002c1: 	leaq	_Z13binarysearch1IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtEbT_S7_T0_(%rip), %rcx
    000002c8: 	movq	%r14, %rsi
    000002cb: 	movq	%r13, %rdi
    000002ce: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEPFbS6_S6_tEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 718
    000002d3: 	movq	(%rsp), %rdi
    000002d7: 	cmpq	%rbx, %rdi
    000002da: 	je	.Ltmp3018 # Offset: 730
    000002dc: 	movq	0x10(%rsp), %rax
    000002e1: 	leaq	0x1(%rax), %rsi
    000002e5: 	callq	_ZdlPvm@PLT # Offset: 741
.Ltmp3018:
    000002ea: 	leaq	DATAat0x3423d(%rip), %rdx
    000002f1: 	movq	%r12, %rsi
    000002f4: 	movq	%rbp, %rdi
    000002f7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 759
    000002fc: 	xorl	%r9d, %r9d
    000002ff: 	movq	%rbp, %r8
    00000302: 	movq	%r15, %rdx
    00000305: 	leaq	_Z13binarysearch2IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtEbT_S7_T0_(%rip), %rcx
    0000030c: 	movq	%r14, %rsi
    0000030f: 	movq	%r13, %rdi
    00000312: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEPFbS6_S6_tEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 786
    00000317: 	movq	(%rsp), %rdi
    0000031b: 	cmpq	%rbx, %rdi
    0000031e: 	je	.Ltmp3019 # Offset: 798
    00000320: 	movq	0x10(%rsp), %rax
    00000325: 	leaq	0x1(%rax), %rsi
    00000329: 	callq	_ZdlPvm@PLT # Offset: 809
.Ltmp3019:
    0000032e: 	leaq	DATAat0x3424d(%rip), %rdx
    00000335: 	movq	%r12, %rsi
    00000338: 	movq	%rbp, %rdi
    0000033b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 827
    00000340: 	xorl	%r9d, %r9d
    00000343: 	movq	%rbp, %r8
    00000346: 	movq	%r15, %rdx
    00000349: 	leaq	_Z13binarysearch3IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtEbT_S7_T0_(%rip), %rcx
    00000350: 	movq	%r14, %rsi
    00000353: 	movq	%r13, %rdi
    00000356: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEPFbS6_S6_tEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 854
    0000035b: 	movq	(%rsp), %rdi
    0000035f: 	cmpq	%rbx, %rdi
    00000362: 	je	.Ltmp3020 # Offset: 866
    00000364: 	movq	0x10(%rsp), %rax
    00000369: 	leaq	0x1(%rax), %rsi
    0000036d: 	callq	_ZdlPvm@PLT # Offset: 877
.Ltmp3020:
    00000372: 	leaq	DATAat0x3425d(%rip), %rdx
    00000379: 	movq	%r12, %rsi
    0000037c: 	movq	%rbp, %rdi
    0000037f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 895
    00000384: 	xorl	%r9d, %r9d
    00000387: 	movq	%rbp, %r8
    0000038a: 	movq	%r15, %rdx
    0000038d: 	leaq	_Z13binarysearch4IN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtEbT_S7_T0_(%rip), %rcx
    00000394: 	movq	%r14, %rsi
    00000397: 	movq	%r13, %rdi
    0000039a: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEPFbS6_S6_tEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 922
    0000039f: 	movq	(%rsp), %rdi
    000003a3: 	cmpq	%rbx, %rdi
    000003a6: 	je	.Ltmp3021 # Offset: 934
    000003a8: 	movq	0x10(%rsp), %rax
    000003ad: 	leaq	0x1(%rax), %rsi
    000003b1: 	callq	_ZdlPvm@PLT # Offset: 945
.Ltmp3021:
    000003b6: 	leaq	DATAat0x3426d(%rip), %rdx
    000003bd: 	movq	%r12, %rsi
    000003c0: 	movq	%rbp, %rdi
    000003c3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 963
    000003c8: 	xorl	%r9d, %r9d
    000003cb: 	movq	%rbp, %r8
    000003ce: 	movq	%r15, %rdx
    000003d1: 	leaq	_Z18binarysearch_recurIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtEbT_S7_T0_(%rip), %rcx
    000003d8: 	movq	%r14, %rsi
    000003db: 	movq	%r13, %rdi
    000003de: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEPFbS6_S6_tEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 990
    000003e3: 	movq	(%rsp), %rdi
    000003e7: 	cmpq	%rbx, %rdi
    000003ea: 	je	.Ltmp3022 # Offset: 1002
    000003ec: 	movq	0x10(%rsp), %rax
    000003f1: 	leaq	0x1(%rax), %rsi
    000003f5: 	callq	_ZdlPvm@PLT # Offset: 1013
.Ltmp3022:
    000003fa: 	movq	%rbp, %rdi
    000003fd: 	leaq	DATAat0x34286(%rip), %rdx
    00000404: 	movq	%r12, %rsi
    00000407: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1031
    0000040c: 	movq	%rbp, %rdi
    0000040f: 	callq	_Z9summarizeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1039
    00000414: 	movq	(%rsp), %rdi
    00000418: 	cmpq	%rbx, %rdi
    0000041b: 	je	.Ltmp3023 # Offset: 1051
    0000041d: 	movq	0x10(%rsp), %rax
    00000422: 	leaq	0x1(%rax), %rsi
    00000426: 	callq	_ZdlPvm@PLT # Offset: 1062
.Ltmp3023:
    0000042b: 	movq	0x28(%rsp), %rax
    00000430: 	subq	%fs:0x28, %rax
    00000439: 	jne	.Ltmp3024 # Offset: 1081
    0000043b: 	addq	$0x38, %rsp
    0000043f: 	popq	%rbx
    00000440: 	popq	%rbp
    00000441: 	popq	%r12
    00000443: 	popq	%r13
    00000445: 	popq	%r14
    00000447: 	popq	%r15
    00000449: 	retq # Offset: 1097
.Ltmp3024:
    0000044a: 	callq	__stack_chk_fail@PLT # Offset: 1098
    0000044f: 	endbr64
.Ltmp3026:
    00000453: 	movq	%rax, %rbp
    00000456: 	jmp	.Ltmp3025 # Offset: 1110
    00000458: 	endbr64
    0000045c: 	jmp	.Ltmp3026 # Offset: 1116
    0000045e: 	endbr64
    00000462: 	jmp	.Ltmp3026 # Offset: 1122
    00000464: 	endbr64
    00000468: 	jmp	.Ltmp3026 # Offset: 1128
    0000046a: 	endbr64
    0000046e: 	jmp	.Ltmp3026 # Offset: 1134
    00000470: 	endbr64
    00000474: 	jmp	.Ltmp3026 # Offset: 1140
    00000476: 	endbr64
    0000047a: 	jmp	.Ltmp3026 # Offset: 1146
.Ltmp3025:
    0000047c: 	movq	(%rsp), %rdi
    00000480: 	cmpq	%rbx, %rdi
    00000483: 	je	.Ltmp3027 # Offset: 1155
.Ltmp3029:
    00000485: 	movq	0x10(%rsp), %rax
    0000048a: 	leaq	0x1(%rax), %rsi
    0000048e: 	callq	_ZdlPvm@PLT # Offset: 1166
.Ltmp3027:
    00000493: 	movq	%rbp, %rdi
    00000496: 	callq	_Unwind_Resume@PLT # Offset: 1174
    0000049b: 	endbr64
    0000049f: 	jmp	.Ltmp3026 # Offset: 1183
    000004a1: 	endbr64
    000004a5: 	jmp	.Ltmp3026 # Offset: 1189
    000004a7: 	endbr64
    000004ab: 	jmp	.Ltmp3026 # Offset: 1195
    000004ad: 	endbr64
    000004b1: 	jmp	.Ltmp3026 # Offset: 1201
    000004b3: 	endbr64
    000004b7: 	jmp	.Ltmp3026 # Offset: 1207
    000004b9: 	endbr64
    000004bd: 	movq	%rax, %rbp
    000004c0: 	jmp	.Ltmp3028 # Offset: 1216
    000004c2: 	endbr64
    000004c6: 	jmp	.Ltmp3026 # Offset: 1222
    000004c8: 	endbr64
    000004cc: 	jmp	.Ltmp3026 # Offset: 1228
.Ltmp3028:
    000004ce: 	movq	(%rsp), %rdi
    000004d2: 	leaq	0x10(%rsp), %rax
    000004d7: 	cmpq	%rax, %rdi
    000004da: 	jne	.Ltmp3029 # Offset: 1242
    000004dc: 	jmp	.Ltmp3027 # Offset: 1244
DWARF CFI Instructions:
    <empty>
End of Function "_Z16TestOneContainerIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEvT_S7_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z24binarysearch_recur_innerIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtlEbT_T0_T1_" after disassembly {
  Number      : 362
  State       : disassembled
  Address     : 0x18e20
  Size        : 0x5b
  MaxSize     : 0x60
  Offset      : 0x18e20
  Section     : .text
  Orc Section : .local.text._Z24binarysearch_recur_innerIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtlEbT_T0_T1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0361:
    00000000: 	endbr64
    00000004: 	testq	%rdx, %rdx
    00000007: 	je	.Ltmp3030 # Offset: 7
    00000009: 	movq	%rdx, %rax
    0000000c: 	shrq	$0x3f, %rax
    00000010: 	addq	%rdx, %rax
    00000013: 	movq	%rax, %r8
    00000016: 	andq	$-0x2, %rax
    0000001a: 	addq	%rdi, %rax
    0000001d: 	sarq	%r8
    00000020: 	cmpw	%si, (%rax)
    00000023: 	jb	.Ltmp3031 # Offset: 35
    00000025: 	movl	$0x1, %eax
    0000002a: 	ja	.Ltmp3032 # Offset: 42
    0000002c: 	retq # Offset: 44
    0000002d: 	nopl	(%rax) # Size: 3
.Ltmp3030:
    00000030: 	xorl	%eax, %eax
    00000032: 	retq # Offset: 50
    00000033: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3031:
    00000038: 	addq	$0x1, %r8
    0000003c: 	leaq	0x2(%rax), %rdi
    00000040: 	movzwl	%si, %esi
    00000043: 	subq	%r8, %rdx
    00000046: 	jmp	.LBB0361 # Offset: 70
    0000004b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3032:
    00000050: 	movzwl	%si, %esi
    00000053: 	movq	%r8, %rdx
    00000056: 	jmp	.LBB0361 # Offset: 86
DWARF CFI Instructions:
    <empty>
End of Function "_Z24binarysearch_recur_innerIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtlEbT_T0_T1_"

Binary Function "_Z18binarysearch_recurIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtEbT_S7_T0_" after disassembly {
  Number      : 363
  State       : disassembled
  Address     : 0x18e80
  Size        : 0xde
  MaxSize     : 0xe0
  Offset      : 0x18e80
  Section     : .text
  Orc Section : .local.text._Z18binarysearch_recurIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtEbT_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0362:
    00000000: 	endbr64
    00000004: 	movl	%edx, %eax
    00000006: 	cmpq	%rdi, %rsi
    00000009: 	je	.Ltmp3033 # Offset: 9
    0000000b: 	subq	%rdi, %rsi
    0000000e: 	movzwl	%ax, %r9d
    00000012: 	movq	%rsi, %rdx
    00000015: 	shrq	$0x3f, %rsi
    00000019: 	sarq	%rdx
    0000001c: 	addq	%rdx, %rsi
    0000001f: 	movq	%rsi, %rcx
    00000022: 	andq	$-0x2, %rsi
    00000026: 	addq	%rdi, %rsi
    00000029: 	sarq	%rcx
    0000002c: 	cmpw	(%rsi), %ax
    0000002f: 	ja	.Ltmp3034 # Offset: 47
    00000031: 	movl	$0x1, %r8d
    00000037: 	jae	.Ltmp3035 # Offset: 55
    00000039: 	testq	%rcx, %rcx
    0000003c: 	je	.Ltmp3033 # Offset: 60
    0000003e: 	leaq	0x3(%rdx), %rsi
    00000042: 	testq	%rdx, %rdx
    00000045: 	cmovsq	%rsi, %rdx
    00000049: 	sarq	$0x2, %rdx
    0000004d: 	leaq	(%rdi,%rdx,2), %rsi
    00000051: 	cmpw	(%rsi), %ax
    00000054: 	ja	.Ltmp3036 # Offset: 84
    00000056: 	jae	.Ltmp3035 # Offset: 86
    00000058: 	movl	%r9d, %esi
    0000005b: 	jmp	_Z24binarysearch_recur_innerIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtlEbT_T0_T1_ # TAILCALL  # Offset: 91
.Ltmp3033:
    00000060: 	xorl	%r8d, %r8d
.Ltmp3035:
    00000063: 	movl	%r8d, %eax
    00000066: 	retq # Offset: 102
    00000067: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3034:
    00000070: 	addq	$0x1, %rcx
    00000074: 	leaq	0x2(%rsi), %rdi
    00000078: 	subq	%rcx, %rdx
    0000007b: 	je	.Ltmp3033 # Offset: 123
    0000007d: 	movq	%rdx, %rcx
    00000080: 	shrq	$0x3f, %rcx
    00000084: 	addq	%rdx, %rcx
    00000087: 	movq	%rcx, %r10
    0000008a: 	andq	$-0x2, %rcx
    0000008e: 	addq	%rdi, %rcx
    00000091: 	sarq	%r10
    00000094: 	cmpw	(%rcx), %ax
    00000097: 	ja	.Ltmp3037 # Offset: 151
    00000099: 	movl	$0x1, %r8d
    0000009f: 	jae	.Ltmp3035 # Offset: 159
    000000a1: 	movq	%r10, %rdx
    000000a4: 	movl	%r9d, %esi
    000000a7: 	jmp	_Z24binarysearch_recur_innerIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtlEbT_T0_T1_ # TAILCALL  # Offset: 167
    000000ac: 	nopl	(%rax) # Size: 4
.Ltmp3037:
    000000b0: 	addq	$0x1, %r10
    000000b4: 	leaq	0x2(%rcx), %rdi
    000000b8: 	movl	%r9d, %esi
    000000bb: 	subq	%r10, %rdx
    000000be: 	jmp	_Z24binarysearch_recur_innerIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtlEbT_T0_T1_ # TAILCALL  # Offset: 190
    000000c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3036:
    000000c8: 	leaq	0x1(%rdx), %rax
    000000cc: 	leaq	0x2(%rsi), %rdi
    000000d0: 	movl	%r9d, %esi
    000000d3: 	subq	%rax, %rcx
    000000d6: 	movq	%rcx, %rdx
    000000d9: 	jmp	_Z24binarysearch_recur_innerIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtlEbT_T0_T1_ # TAILCALL  # Offset: 217
DWARF CFI Instructions:
    <empty>
End of Function "_Z18binarysearch_recurIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEtEbT_S7_T0_"

Binary Function "_ZNSt11_Deque_baseItSaItEE17_M_initialize_mapEm" after disassembly {
  Number      : 364
  State       : disassembled
  Address     : 0x18f60
  Size        : 0x17a
  MaxSize     : 0x180
  Offset      : 0x18f60
  Section     : .text
  Orc Section : .local.text._ZNSt11_Deque_baseItSaItEE17_M_initialize_mapEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0363:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	pushq	%r14
    00000009: 	shrq	$0x8, %rax
    0000000d: 	pushq	%r13
    0000000f: 	movq	%rsi, %r13
    00000012: 	pushq	%r12
    00000014: 	movq	%rdi, %r12
    00000017: 	pushq	%rbp
    00000018: 	pushq	%rbx
    00000019: 	leaq	0x1(%rax), %rbx
    0000001d: 	addq	$0x3, %rax
    00000021: 	cmpq	$0x8, %rax
    00000025: 	ja	.Ltmp3038 # Offset: 37
    0000002b: 	movl	$0x8, %eax
    00000030: 	movl	$0x40, %edi
.Ltmp3041:
    00000035: 	movq	%rax, 0x8(%r12)
    0000003a: 	callq	_Znwm@PLT # Offset: 58
    0000003f: 	movq	0x8(%r12), %rdx
    00000044: 	movq	%rax, (%r12)
    00000048: 	subq	%rbx, %rdx
    0000004b: 	shrq	%rdx
    0000004e: 	leaq	(%rax,%rdx,8), %r14
    00000052: 	leaq	(%r14,%rbx,8), %rbp
    00000056: 	cmpq	%rbp, %r14
    00000059: 	jae	.Ltmp3039 # Offset: 89
    0000005b: 	movq	%r14, %rbx
    0000005e: 	nop # Size: 2
.Ltmp3040:
    00000060: 	movl	$0x200, %edi
    00000065: 	callq	_Znwm@PLT # Offset: 101
    0000006a: 	movq	%rax, (%rbx)
    0000006d: 	addq	$0x8, %rbx
    00000071: 	cmpq	%rbx, %rbp
    00000074: 	ja	.Ltmp3040 # Offset: 116
.Ltmp3039:
    00000076: 	movq	(%r14), %xmm0
    0000007b: 	movq	(%r14), %rcx
    0000007e: 	movzbl	%r13b, %r13d
    00000082: 	subq	$0x8, %rbp
    00000086: 	movq	(%rbp), %rax
    0000008a: 	movq	%r14, %xmm1
    0000008f: 	movq	%rbp, %xmm3
    00000094: 	popq	%rbx
    00000095: 	punpcklqdq	%xmm0, %xmm0
    00000099: 	addq	$0x200, %rcx
    000000a0: 	popq	%rbp
    000000a1: 	movups	%xmm0, 0x10(%r12)
    000000a7: 	movq	%rcx, %xmm0
    000000ac: 	leaq	(%rax,%r13,2), %rcx
    000000b0: 	movq	%rax, %xmm2
    000000b5: 	punpcklqdq	%xmm1, %xmm0
    000000b9: 	addq	$0x200, %rax
    000000bf: 	movups	%xmm0, 0x20(%r12)
    000000c5: 	movq	%rcx, %xmm0
    000000ca: 	punpcklqdq	%xmm2, %xmm0
    000000ce: 	movups	%xmm0, 0x30(%r12)
    000000d4: 	movq	%rax, %xmm0
    000000d9: 	punpcklqdq	%xmm3, %xmm0
    000000dd: 	movups	%xmm0, 0x40(%r12)
    000000e3: 	popq	%r12
    000000e5: 	popq	%r13
    000000e7: 	popq	%r14
    000000e9: 	retq # Offset: 233
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3038:
    000000f0: 	leaq	(,%rax,8), %rdi
    000000f8: 	jmp	.Ltmp3041 # Offset: 248
    000000fd: 	endbr64
    00000101: 	movq	%rax, %rdi
    00000104: 	callq	__cxa_begin_catch@PLT # Offset: 260
.Ltmp3043:
    00000109: 	cmpq	%r14, %rbx
    0000010c: 	jbe	.Ltmp3042 # Offset: 268
    0000010e: 	movq	(%r14), %rdi
    00000111: 	movl	$0x200, %esi
    00000116: 	addq	$0x8, %r14
    0000011a: 	callq	_ZdlPvm@PLT # Offset: 282
    0000011f: 	jmp	.Ltmp3043 # Offset: 287
.Ltmp3042:
    00000121: 	callq	__cxa_rethrow@PLT # Offset: 289
    00000126: 	endbr64
    0000012a: 	movq	%rax, %rbp
    0000012d: 	callq	__cxa_end_catch@PLT # Offset: 301
    00000132: 	movq	%rbp, %rdi
    00000135: 	callq	__cxa_begin_catch@PLT # Offset: 309
    0000013a: 	movq	0x8(%r12), %rax
    0000013f: 	movq	(%r12), %rdi
    00000143: 	leaq	(,%rax,8), %rsi
    0000014b: 	callq	_ZdlPvm@PLT # Offset: 331
    00000150: 	movq	$0x0, (%r12)
    00000158: 	movq	$0x0, 0x8(%r12)
    00000161: 	callq	__cxa_rethrow@PLT # Offset: 353
    00000166: 	endbr64
    0000016a: 	movq	%rax, %rbp
    0000016d: 	callq	__cxa_end_catch@PLT # Offset: 365
    00000172: 	movq	%rbp, %rdi
    00000175: 	callq	_Unwind_Resume@PLT # Offset: 373
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt11_Deque_baseItSaItEE17_M_initialize_mapEm"

Binary Function "_Z15TestSearchArrayISt15_Deque_iteratorItRtPtEPFS3_S3_S3_tEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 365
  State       : disassembled
  Address     : 0x190e0
  Size        : 0x357
  MaxSize     : 0x360
  Offset      : 0x190e0
  Section     : .text
  Orc Section : .local.text._Z15TestSearchArrayISt15_Deque_iteratorItRtPtEPFS3_S3_S3_tEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0364:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rdi, %r12
    0000000f: 	movl	$0x800, %edi
    00000014: 	pushq	%rbp
    00000015: 	pushq	%rbx
    00000016: 	movq	%rsi, %rbx
    00000019: 	subq	$0xa8, %rsp
    00000020: 	movq	%rdx, 0x20(%rsp)
    00000025: 	movq	%r8, 0x28(%rsp)
    0000002a: 	movq	%rcx, 0x8(%rsp)
    0000002f: 	movb	%r9b, 0x1f(%rsp)
    00000034: 	movq	%fs:0x28, %rax
    0000003d: 	movq	%rax, 0x98(%rsp)
    00000045: 	xorl	%eax, %eax
    00000047: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    0000004e: 	callq	_Znwm@PLT # Offset: 78
    00000053: 	xorl	%edx, %edx
    00000055: 	movq	%rax, %rsi
    00000058: 	movq	%rax, (%rsp)
    0000005c: 	addq	$0x2, %rax
    00000060: 	leaq	0x800(%rsi), %r8
    00000067: 	movw	%dx, -0x2(%rax)
    0000006b: 	cmpq	%r8, %rax
    0000006e: 	je	.Ltmp3044 # Offset: 110
    00000070: 	movq	%rsi, %rdi
    00000073: 	movq	$0x0, 0x2(%rsi)
    0000007b: 	movq	$0x0, 0x7f8(%rsi)
    00000086: 	addq	$0xa, %rdi
    0000008a: 	andq	$-0x8, %rdi
    0000008e: 	subq	%rdi, %rax
    00000091: 	movq	%rax, %rcx
    00000094: 	xorl	%eax, %eax
    00000096: 	addl	$0x7fe, %ecx
    0000009c: 	shrl	$0x3, %ecx
    0000009f: 	rep		stosq	%rax, %es:(%rdi)
.Ltmp3044:
    000000a2: 	movq	(%r12), %r11
    000000a6: 	movq	0x18(%r12), %r10
    000000ab: 	movabsq	$0x5851f42d4c957f2d, %r9
    000000b5: 	movabsq	$0x14057b7ef767814f, %rdi
    000000bf: 	movq	(%rsp), %rcx
    000000c3: 	movq	0x20(%rsp), %rbp
    000000c8: 	movq	%r11, %rsi
    000000cb: 	subq	0x8(%r12), %rsi
    000000d0: 	sarq	%rsi
    000000d3: 	jmp	.Ltmp3045 # Offset: 211
    000000d5: 	nopl	(%rax) # Size: 3
.Ltmp3048:
    000000d8: 	cmpq	$0xff, %rax
    000000de: 	jg	.Ltmp3046 # Offset: 222
    000000e4: 	leaq	(%r11,%rdx,2), %rax
    000000e8: 	addq	$0x2, %rcx
    000000ec: 	movzwl	(%rax), %eax
    000000ef: 	movw	%ax, -0x2(%rcx)
    000000f3: 	cmpq	%rcx, %r8
    000000f6: 	je	.Ltmp3047 # Offset: 246
.Ltmp3045:
    000000f8: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000000ff: 	imulq	%r9, %rax
    00000103: 	addq	%rdi, %rax
    00000106: 	movq	%rax, %rdx
    00000109: 	movq	%rax, %r13
    0000010c: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000113: 	shrq	$0x14, %rdx
    00000117: 	shlq	$0x17, %r13
    0000011b: 	xorq	%r13, %rdx
    0000011e: 	xorq	%rdx, %rax
    00000121: 	xorl	%edx, %edx
    00000123: 	divq	%rbp
    00000126: 	movq	%rdx, %rax
    00000129: 	addq	%rsi, %rax
    0000012c: 	jns	.Ltmp3048 # Offset: 300
    0000012e: 	movq	%rax, %rdx
    00000131: 	notq	%rdx
    00000134: 	shrq	$0x8, %rdx
    00000138: 	notq	%rdx
.Ltmp3055:
    0000013b: 	movq	%rdx, %r13
    0000013e: 	movq	(%r10,%rdx,8), %rdx
    00000142: 	addq	$0x2, %rcx
    00000146: 	shlq	$0x8, %r13
    0000014a: 	subq	%r13, %rax
    0000014d: 	leaq	(%rdx,%rax,2), %rax
    00000151: 	movzwl	(%rax), %eax
    00000154: 	movw	%ax, -0x2(%rcx)
    00000158: 	cmpq	%rcx, %r8
    0000015b: 	jne	.Ltmp3045 # Offset: 347
.Ltmp3047:
    0000015d: 	callq	clock@PLT # Offset: 349
    00000162: 	movb	$0x0, 0x1e(%rsp)
    00000167: 	xorl	%ebp, %ebp
    00000169: 	leaq	0x30(%rsp), %r15
    0000016e: 	movq	%rax, start_time(%rip)
    00000175: 	leaq	0x70(%rsp), %r14
    0000017a: 	leaq	0x50(%rsp), %r13
.Ltmp3052:
    0000017f: 	leaq	0xc8(%rbp), %rax
    00000186: 	cmpb	$0x0, 0x1f(%rsp)
    0000018b: 	movq	%rax, 0x10(%rsp)
    00000190: 	jne	.Ltmp3049 # Offset: 400
    00000196: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3050:
    000001a0: 	movq	(%rsp), %rsi
    000001a4: 	movq	%rbp, %rax
    000001a7: 	movdqu	(%rbx), %xmm2
    000001ab: 	addq	$0x1, %rbp
    000001af: 	movdqu	0x10(%rbx), %xmm3
    000001b4: 	andl	$0x3ff, %eax
    000001b9: 	movq	%r14, %rdx
    000001bc: 	movq	%r15, %rdi
    000001bf: 	movdqu	(%r12), %xmm4
    000001c5: 	movzwl	(%rsi,%rax,2), %ecx
    000001c9: 	movaps	%xmm2, 0x70(%rsp)
    000001ce: 	movq	%r13, %rsi
    000001d1: 	movdqu	0x10(%r12), %xmm5
    000001d8: 	movq	0x8(%rsp), %rax
    000001dd: 	movaps	%xmm3, 0x80(%rsp)
    000001e5: 	movaps	%xmm4, 0x50(%rsp)
    000001ea: 	movaps	%xmm5, 0x60(%rsp)
    000001ef: 	callq	*%rax # Offset: 495
    000001f1: 	movq	(%rbx), %rax
    000001f4: 	cmpq	%rax, 0x30(%rsp)
    000001f9: 	movl	$0x1, %edi
    000001fe: 	movzbl	0x1e(%rsp), %eax
    00000203: 	cmovel	%edi, %eax
    00000206: 	movb	%al, 0x1e(%rsp)
    0000020a: 	cmpq	%rbp, 0x10(%rsp)
    0000020f: 	jne	.Ltmp3050 # Offset: 527
.Ltmp3056:
    00000211: 	callq	clock@PLT # Offset: 529
    00000216: 	movsd	gMinimumTimeTarget(%rip), %xmm1
    0000021e: 	pxor	%xmm0, %xmm0
    00000222: 	movq	%rax, end_time(%rip)
    00000229: 	subq	start_time(%rip), %rax
    00000230: 	cvtsi2sd	%rax, %xmm0
    00000235: 	divsd	DATAat0x34410(%rip), %xmm0
    0000023d: 	comisd	%xmm0, %xmm1
    00000241: 	jbe	.Ltmp3051 # Offset: 577
    00000243: 	cmpq	$0x5f5e0ff, %rbp
    0000024a: 	jbe	.Ltmp3052 # Offset: 586
.Ltmp3051:
    00000250: 	movq	0x28(%rsp), %rdx
    00000255: 	movq	0x20(%rsp), %rdi
    0000025a: 	movq	%rbp, %rsi
    0000025d: 	callq	_Z13record_resultdmmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 605
    00000262: 	cmpb	$0x0, 0x1e(%rsp)
    00000267: 	jne	.Ltmp3053 # Offset: 615
.Ltmp3057:
    0000026d: 	movq	0x98(%rsp), %rax
    00000275: 	subq	%fs:0x28, %rax
    0000027e: 	jne	.Ltmp3054 # Offset: 638
    00000284: 	movq	(%rsp), %rdi
    00000288: 	addq	$0xa8, %rsp
    0000028f: 	movl	$0x800, %esi
    00000294: 	popq	%rbx
    00000295: 	popq	%rbp
    00000296: 	popq	%r12
    00000298: 	popq	%r13
    0000029a: 	popq	%r14
    0000029c: 	popq	%r15
    0000029e: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 670
    000002a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3046:
    000002a8: 	movq	%rax, %rdx
    000002ab: 	sarq	$0x8, %rdx
    000002af: 	jmp	.Ltmp3055 # Offset: 687
    000002b4: 	nopl	(%rax) # Size: 4
.Ltmp3049:
    000002b8: 	movq	(%rsp), %rdx
    000002bc: 	movq	%rbp, %rax
    000002bf: 	movdqu	(%rbx), %xmm6
    000002c3: 	addq	$0x1, %rbp
    000002c7: 	movdqu	0x10(%rbx), %xmm7
    000002cc: 	andl	$0x3ff, %eax
    000002d1: 	movq	%r13, %rsi
    000002d4: 	movq	%r15, %rdi
    000002d7: 	movdqu	(%r12), %xmm1
    000002dd: 	movzwl	(%rdx,%rax,2), %ecx
    000002e1: 	movaps	%xmm6, 0x70(%rsp)
    000002e6: 	movq	%r14, %rdx
    000002e9: 	movdqu	0x10(%r12), %xmm0
    000002f0: 	movq	0x8(%rsp), %rax
    000002f5: 	movaps	%xmm7, 0x80(%rsp)
    000002fd: 	movaps	%xmm1, 0x50(%rsp)
    00000302: 	movaps	%xmm0, 0x60(%rsp)
    00000307: 	callq	*%rax # Offset: 775
    00000309: 	cmpq	0x10(%rsp), %rbp
    0000030e: 	jne	.Ltmp3049 # Offset: 782
    00000310: 	jmp	.Ltmp3056 # Offset: 784
.Ltmp3053:
    00000315: 	movq	0x28(%rsp), %rax
    0000031a: 	leaq	DATAat0x34137(%rip), %rsi
    00000321: 	movl	$0x1, %edi
    00000326: 	movq	(%rax), %rdx
    00000329: 	xorl	%eax, %eax
    0000032b: 	callq	__printf_chk@PLT # Offset: 811
    00000330: 	jmp	.Ltmp3057 # Offset: 816
.Ltmp3054:
    00000335: 	callq	__stack_chk_fail@PLT # Offset: 821
    0000033a: 	endbr64
    0000033e: 	movq	%rax, %rbp
    00000341: 	movq	(%rsp), %rdi
    00000345: 	movl	$0x800, %esi
    0000034a: 	callq	_ZdlPvm@PLT # Offset: 842
    0000034f: 	movq	%rbp, %rdi
    00000352: 	callq	_Unwind_Resume@PLT # Offset: 850
DWARF CFI Instructions:
    <empty>
End of Function "_Z15TestSearchArrayISt15_Deque_iteratorItRtPtEPFS3_S3_S3_tEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z18quicksort2_forwardISt15_Deque_iteratorItRtPtEEvT_S4_" after disassembly {
  Number      : 366
  State       : disassembled
  Address     : 0x19440
  Size        : 0x2ce
  MaxSize     : 0x2d0
  Offset      : 0x19440
  Section     : .text
  Orc Section : .local.text._Z18quicksort2_forwardISt15_Deque_iteratorItRtPtEEvT_S4_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0365:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdi, %r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rsi, %rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x68, %rsp
    00000018: 	movq	(%rsi), %rdi
    0000001b: 	movq	(%r13), %rbx
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x58(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	leaq	0x30(%rsp), %rax
    00000034: 	movq	%rax, 0x8(%rsp)
    00000039: 	cmpq	%rdi, %rbx
    0000003c: 	je	.Ltmp3058 # Offset: 60
.Ltmp3072:
    00000042: 	movq	0x8(%r13), %r15
    00000046: 	movq	0x10(%r13), %rsi
    0000004a: 	movq	%rbx, %xmm1
    0000004f: 	leaq	0x2(%rbx), %rax
    00000053: 	movq	0x18(%r13), %r9
    00000057: 	movq	%rax, %rdx
    0000005a: 	movq	%r15, %xmm2
    0000005f: 	movq	%rsi, %xmm0
    00000064: 	movq	%r9, %xmm3
    00000069: 	punpcklqdq	%xmm2, %xmm1
    0000006d: 	punpcklqdq	%xmm3, %xmm0
    00000071: 	cmpq	%rsi, %rax
    00000074: 	je	.Ltmp3059 # Offset: 116
.Ltmp3075:
    0000007a: 	movq	%rdx, %rax
    0000007d: 	cmpq	%rdi, %rdx
    00000080: 	je	.Ltmp3058 # Offset: 128
    00000086: 	addq	$0x2, %rax
    0000008a: 	movq	%r9, %r11
    0000008d: 	movq	%rsi, %r10
    00000090: 	movq	%rax, %rcx
    00000093: 	cmpq	%rsi, %rax
    00000096: 	je	.Ltmp3060 # Offset: 150
    0000009c: 	movzwl	(%rdx), %r8d
    000000a0: 	movzwl	(%rbx), %r14d
    000000a4: 	cmpq	%rcx, %rdi
    000000a7: 	je	.Ltmp3061 # Offset: 167
.Ltmp3076:
    000000ad: 	cmpw	%r14w, %r8w
    000000b1: 	jae	.Ltmp3062 # Offset: 177
    000000b3: 	movw	%r8w, (%rbx)
    000000b7: 	movl	%r14d, %r8d
    000000ba: 	movw	%r14w, (%rdx)
.Ltmp3062:
    000000be: 	movzwl	(%rcx), %r12d
    000000c2: 	cmpw	%r12w, %r8w
    000000c6: 	jbe	.Ltmp3063 # Offset: 198
    000000c8: 	movw	%r12w, (%rdx)
    000000cc: 	movw	%r8w, (%rcx)
    000000d0: 	movzwl	(%rdx), %r8d
    000000d4: 	movzwl	(%rbx), %r12d
    000000d8: 	cmpw	%r12w, %r8w
    000000dc: 	jae	.Ltmp3063 # Offset: 220
    000000de: 	movw	%r12w, (%rdx)
    000000e2: 	movw	%r8w, (%rbx)
    000000e6: 	movzwl	(%rdx), %r8d
.Ltmp3063:
    000000ea: 	addq	$0x2, %rcx
    000000ee: 	cmpq	%r10, %rcx
    000000f1: 	je	.Ltmp3064 # Offset: 241
.Ltmp3077:
    000000f7: 	cmpq	%rcx, %rdi
    000000fa: 	je	.Ltmp3058 # Offset: 250
    00000100: 	movq	%r9, %r14
    00000103: 	movq	%rsi, %r12
    00000106: 	movq	%rdx, %rbx
    00000109: 	movl	$0x2, %ecx
    0000010e: 	movl	$0x1, %r10d
    00000114: 	jmp	.Ltmp3065 # Offset: 276
    00000116: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3069:
    00000120: 	cmpq	%rax, %rdi
    00000123: 	je	.Ltmp3066 # Offset: 291
.Ltmp3070:
    00000125: 	movzwl	(%rax), %edx
    00000128: 	cmpw	%r8w, %dx
    0000012c: 	jae	.Ltmp3067 # Offset: 300
    0000012e: 	movzwl	(%rbx), %r11d
    00000132: 	addq	$0x2, %rbx
    00000136: 	movw	%r11w, (%rax)
    0000013a: 	movw	%dx, -0x2(%rbx)
    0000013e: 	cmpq	%r12, %rbx
    00000141: 	je	.Ltmp3068 # Offset: 321
.Ltmp3073:
    00000147: 	addq	$0x1, %r10
.Ltmp3067:
    0000014b: 	addq	$0x1, %rcx
    0000014f: 	addq	$0x2, %rax
.Ltmp3065:
    00000153: 	cmpq	%rsi, %rax
    00000156: 	jne	.Ltmp3069 # Offset: 342
    00000158: 	movq	0x8(%r9), %rax
    0000015c: 	addq	$0x8, %r9
    00000160: 	leaq	0x200(%rax), %rsi
    00000167: 	cmpq	%rax, %rdi
    0000016a: 	jne	.Ltmp3070 # Offset: 362
.Ltmp3066:
    0000016c: 	subq	%r10, %rcx
    0000016f: 	cmpq	%rcx, %r10
    00000172: 	jbe	.Ltmp3071 # Offset: 370
    00000178: 	movq	0x10(%rbp), %xmm0
    0000017d: 	movq	%rdi, %xmm1
    00000182: 	movq	0x8(%rsp), %rsi
    00000187: 	leaq	0x10(%rsp), %rdi
    0000018c: 	movhps	0x8(%rbp), %xmm1
    00000190: 	movq	%rbx, 0x10(%rsp)
    00000195: 	movhps	0x18(%rbp), %xmm0
    00000199: 	movq	%r15, 0x18(%rsp)
    0000019e: 	movq	%r12, 0x20(%rsp)
    000001a3: 	movq	%r14, 0x28(%rsp)
    000001a8: 	movaps	%xmm1, 0x30(%rsp)
    000001ad: 	movaps	%xmm0, 0x40(%rsp)
    000001b2: 	callq	_Z18quicksort2_forwardISt15_Deque_iteratorItRtPtEEvT_S4_ # Offset: 434
    000001b7: 	movq	%rbx, (%rbp)
    000001bb: 	movq	(%r13), %rax
    000001bf: 	movq	%r15, 0x8(%rbp)
    000001c3: 	movq	%r12, 0x10(%rbp)
    000001c7: 	movq	%r14, 0x18(%rbp)
    000001cb: 	cmpq	%rbx, %rax
    000001ce: 	je	.Ltmp3058 # Offset: 462
    000001d4: 	movq	%rbx, %rdi
    000001d7: 	movq	%rax, %rbx
    000001da: 	jmp	.Ltmp3072 # Offset: 474
    000001df: 	nop # Size: 1
.Ltmp3068:
    000001e0: 	movq	0x8(%r14), %rbx
    000001e4: 	addq	$0x8, %r14
    000001e8: 	leaq	0x200(%rbx), %r12
    000001ef: 	movq	%rbx, %r15
    000001f2: 	jmp	.Ltmp3073 # Offset: 498
    000001f7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3071:
    00000200: 	movq	0x8(%rsp), %rsi
    00000205: 	leaq	0x10(%rsp), %rdi
    0000020a: 	movq	%rbx, 0x30(%rsp)
    0000020f: 	movq	%r15, 0x38(%rsp)
    00000214: 	movq	%r12, 0x40(%rsp)
    00000219: 	movq	%r14, 0x48(%rsp)
    0000021e: 	movaps	%xmm1, 0x10(%rsp)
    00000223: 	movaps	%xmm0, 0x20(%rsp)
    00000228: 	callq	_Z18quicksort2_forwardISt15_Deque_iteratorItRtPtEEvT_S4_ # Offset: 552
    0000022d: 	movq	%rbx, (%r13)
    00000231: 	movq	(%rbp), %rdi
    00000235: 	movq	%r15, 0x8(%r13)
    00000239: 	movq	%r12, 0x10(%r13)
    0000023d: 	movq	%r14, 0x18(%r13)
    00000241: 	cmpq	%rbx, %rdi
    00000244: 	jne	.Ltmp3072 # Offset: 580
    0000024a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3058:
    00000250: 	movq	0x58(%rsp), %rax
    00000255: 	subq	%fs:0x28, %rax
    0000025e: 	jne	.Ltmp3074 # Offset: 606
    00000260: 	addq	$0x68, %rsp
    00000264: 	popq	%rbx
    00000265: 	popq	%rbp
    00000266: 	popq	%r12
    00000268: 	popq	%r13
    0000026a: 	popq	%r14
    0000026c: 	popq	%r15
    0000026e: 	retq # Offset: 622
    0000026f: 	nop # Size: 1
.Ltmp3059:
    00000270: 	movq	0x8(%r9), %r15
    00000274: 	addq	$0x8, %r9
    00000278: 	movq	%r15, %rdx
    0000027b: 	leaq	0x200(%r15), %rsi
    00000282: 	jmp	.Ltmp3075 # Offset: 642
    00000287: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3060:
    00000290: 	movq	0x8(%r9), %rcx
    00000294: 	movzwl	(%rdx), %r8d
    00000298: 	leaq	0x8(%r9), %r11
    0000029c: 	movzwl	(%rbx), %r14d
    000002a0: 	leaq	0x200(%rcx), %r10
    000002a7: 	cmpq	%rcx, %rdi
    000002aa: 	jne	.Ltmp3076 # Offset: 682
.Ltmp3061:
    000002b0: 	cmpw	%r14w, %r8w
    000002b4: 	jae	.Ltmp3058 # Offset: 692
    000002b6: 	movw	%r14w, (%rdx)
    000002ba: 	movw	%r8w, (%rbx)
    000002be: 	jmp	.Ltmp3058 # Offset: 702
.Ltmp3064:
    000002c0: 	movq	0x8(%r11), %rcx
    000002c4: 	jmp	.Ltmp3077 # Offset: 708
.Ltmp3074:
    000002c9: 	callq	__stack_chk_fail@PLT # Offset: 713
DWARF CFI Instructions:
    <empty>
End of Function "_Z18quicksort2_forwardISt15_Deque_iteratorItRtPtEEvT_S4_"

Binary Function "_Z13TestOneSearchISt15_Deque_iteratorItRtPtEPFS3_S3_S3_tEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 367
  State       : disassembled
  Address     : 0x19710
  Size        : 0x3b5
  MaxSize     : 0x3c0
  Offset      : 0x19710
  Section     : .text
  Orc Section : .local.text._Z13TestOneSearchISt15_Deque_iteratorItRtPtEPFS3_S3_S3_tEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0366:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rdx, %r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rsi, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x98, %rsp
    0000001e: 	movq	(%rdi), %rdx
    00000021: 	movq	(%rsi), %rsi
    00000024: 	movq	%rcx, 0x8(%rsp)
    00000029: 	movq	0x10(%rdi), %rcx
    0000002d: 	movq	%r8, 0x10(%rsp)
    00000032: 	movq	0x18(%rdi), %rdi
    00000036: 	movq	%fs:0x28, %rax
    0000003f: 	movq	%rax, 0x88(%rsp)
    00000047: 	xorl	%eax, %eax
    00000049: 	cmpq	%rsi, %rdx
    0000004c: 	jne	.Ltmp3078 # Offset: 76
    0000004e: 	jmp	.Ltmp3079 # Offset: 78
.Ltmp3080:
    00000050: 	movl	$0x5, %r8d
    00000056: 	movw	%r8w, (%rdx)
    0000005a: 	cmpq	%rsi, %rax
    0000005d: 	je	.Ltmp3079 # Offset: 93
.Ltmp3081:
    0000005f: 	movq	%rax, %rdx
.Ltmp3078:
    00000062: 	leaq	0x2(%rdx), %rax
    00000066: 	cmpq	%rcx, %rax
    00000069: 	jne	.Ltmp3080 # Offset: 105
    0000006b: 	movq	0x8(%rdi), %rax
    0000006f: 	movl	$0x5, %r10d
    00000075: 	leaq	0x8(%rdi), %r8
    00000079: 	movw	%r10w, (%rdx)
    0000007d: 	leaq	0x200(%rax), %rcx
    00000084: 	cmpq	%rax, %rsi
    00000087: 	je	.Ltmp3079 # Offset: 135
    00000089: 	movq	%r8, %rdi
    0000008c: 	jmp	.Ltmp3081 # Offset: 140
    0000008e: 	nop # Size: 2
.Ltmp3079:
    00000090: 	movq	0x10(%rsp), %rsi
    00000095: 	leaq	0x60(%rsp), %r13
    0000009a: 	movzbl	%r9b, %eax
    0000009e: 	leaq	DATAat0x34160(%rip), %rdx
    000000a5: 	movq	%r13, %rdi
    000000a8: 	movl	%eax, 0x4(%rsp)
    000000ac: 	leaq	0x40(%rsp), %r15
    000000b1: 	leaq	0x20(%rsp), %r14
    000000b6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 182
    000000bb: 	movdqu	(%rbp), %xmm4
    000000c0: 	movdqu	0x10(%rbp), %xmm5
    000000c5: 	movq	%r13, %r8
    000000c8: 	movdqu	(%rbx), %xmm6
    000000cc: 	movdqu	0x10(%rbx), %xmm7
    000000d1: 	movq	%r12, %rdx
    000000d4: 	movq	%r15, %rsi
    000000d7: 	movl	0x4(%rsp), %r9d
    000000dc: 	movq	0x8(%rsp), %rcx
    000000e1: 	movq	%r14, %rdi
    000000e4: 	movaps	%xmm4, 0x40(%rsp)
    000000e9: 	movaps	%xmm5, 0x50(%rsp)
    000000ee: 	movaps	%xmm6, 0x20(%rsp)
    000000f3: 	movaps	%xmm7, 0x30(%rsp)
    000000f8: 	callq	_Z15TestSearchArrayISt15_Deque_iteratorItRtPtEPFS3_S3_S3_tEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 248
    000000fd: 	movq	0x60(%rsp), %rdi
    00000102: 	leaq	0x70(%rsp), %rax
    00000107: 	movq	%rax, 0x18(%rsp)
    0000010c: 	cmpq	%rax, %rdi
    0000010f: 	je	.Ltmp3082 # Offset: 271
    00000111: 	movq	0x70(%rsp), %rax
    00000116: 	leaq	0x1(%rax), %rsi
    0000011a: 	callq	_ZdlPvm@PLT # Offset: 282
.Ltmp3082:
    0000011f: 	movq	(%rbx), %rdi
    00000122: 	movq	0x10(%rbx), %r8
    00000126: 	movq	0x18(%rbx), %r10
    0000012a: 	cmpq	$0x9, %r12
    0000012e: 	jbe	.Ltmp3083 # Offset: 302
    00000134: 	movabsq	$-0x3333333333333333, %rdx
    0000013e: 	movq	%r12, %rax
    00000141: 	mulq	%rdx
    00000144: 	shrq	$0x3, %rdx
.Ltmp3097:
    00000148: 	xorl	%esi, %esi
    0000014a: 	xorl	%r9d, %r9d
    0000014d: 	cmpq	$0x0, %r12
    00000151: 	jbe	.Ltmp3084 # Offset: 337
    00000153: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3089:
    00000158: 	xorl	%ecx, %ecx
    0000015a: 	jmp	.Ltmp3085 # Offset: 346
    0000015c: 	nopl	(%rax) # Size: 4
.Ltmp3087:
    00000160: 	addq	$0x1, %rcx
    00000164: 	movw	%r9w, (%rdi)
    00000168: 	addq	$0x1, %rsi
    0000016c: 	cmpq	%rdx, %rcx
    0000016f: 	jae	.Ltmp3086 # Offset: 367
    00000171: 	cmpq	%rsi, %r12
    00000174: 	jbe	.Ltmp3086 # Offset: 372
.Ltmp3088:
    00000176: 	movq	%rax, %rdi
.Ltmp3085:
    00000179: 	leaq	0x2(%rdi), %rax
    0000017d: 	cmpq	%r8, %rax
    00000180: 	jne	.Ltmp3087 # Offset: 384
    00000182: 	movq	0x8(%r10), %rax
    00000186: 	leaq	0x8(%r10), %r11
    0000018a: 	addq	$0x1, %rsi
    0000018e: 	movw	%r9w, (%rdi)
    00000192: 	addq	$0x1, %rcx
    00000196: 	movq	%r11, %r10
    00000199: 	leaq	0x200(%rax), %r8
    000001a0: 	cmpq	%rsi, %r12
    000001a3: 	jbe	.Ltmp3086 # Offset: 419
    000001a5: 	cmpq	%rdx, %rcx
    000001a8: 	jb	.Ltmp3088 # Offset: 424
    000001aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3086:
    000001b0: 	movq	%rax, %rdi
    000001b3: 	addl	$0x1, %r9d
    000001b7: 	cmpq	%rsi, %r12
    000001ba: 	ja	.Ltmp3089 # Offset: 442
.Ltmp3084:
    000001bc: 	movq	0x10(%rsp), %rsi
    000001c1: 	leaq	DATAat0x3416e(%rip), %rdx
    000001c8: 	movq	%r13, %rdi
    000001cb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 459
    000001d0: 	movdqu	(%rbp), %xmm3
    000001d5: 	movdqu	0x10(%rbp), %xmm4
    000001da: 	movq	%r13, %r8
    000001dd: 	movdqu	(%rbx), %xmm5
    000001e1: 	movdqu	0x10(%rbx), %xmm6
    000001e6: 	movq	%r12, %rdx
    000001e9: 	movq	%r15, %rsi
    000001ec: 	movl	0x4(%rsp), %r9d
    000001f1: 	movq	0x8(%rsp), %rcx
    000001f6: 	movq	%r14, %rdi
    000001f9: 	movaps	%xmm3, 0x40(%rsp)
    000001fe: 	movaps	%xmm4, 0x50(%rsp)
    00000203: 	movaps	%xmm5, 0x20(%rsp)
    00000208: 	movaps	%xmm6, 0x30(%rsp)
    0000020d: 	callq	_Z15TestSearchArrayISt15_Deque_iteratorItRtPtEPFS3_S3_S3_tEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 525
    00000212: 	movq	0x60(%rsp), %rdi
    00000217: 	cmpq	0x18(%rsp), %rdi
    0000021c: 	je	.Ltmp3090 # Offset: 540
    0000021e: 	movq	0x70(%rsp), %rax
    00000223: 	leaq	0x1(%rax), %rsi
    00000227: 	callq	_ZdlPvm@PLT # Offset: 551
.Ltmp3090:
    0000022c: 	movdqu	0x10(%rbx), %xmm0
    00000231: 	movdqu	(%rbp), %xmm2
    00000236: 	xorl	%ecx, %ecx
    00000238: 	movdqu	(%rbx), %xmm1
    0000023c: 	movdqu	0x10(%rbp), %xmm3
    00000241: 	movhlps	%xmm0, %xmm7
    00000244: 	movq	%xmm2, %rdi
    00000249: 	movq	%xmm0, %rsi
    0000024e: 	movq	%xmm1, %rdx
    00000253: 	movq	%xmm7, %r8
    00000258: 	cmpq	%rdi, %rdx
    0000025b: 	jne	.Ltmp3091 # Offset: 603
    0000025d: 	jmp	.Ltmp3092 # Offset: 605
    0000025f: 	nop # Size: 1
.Ltmp3093:
    00000260: 	movw	%cx, (%rdx)
    00000263: 	addl	$0x1, %ecx
    00000266: 	cmpq	%rdi, %rax
    00000269: 	je	.Ltmp3092 # Offset: 617
.Ltmp3094:
    0000026b: 	movq	%rax, %rdx
.Ltmp3091:
    0000026e: 	leaq	0x2(%rdx), %rax
    00000272: 	cmpq	%rax, %rsi
    00000275: 	jne	.Ltmp3093 # Offset: 629
    00000277: 	movq	0x8(%r8), %rax
    0000027b: 	leaq	0x8(%r8), %r9
    0000027f: 	movw	%cx, (%rdx)
    00000282: 	addl	$0x1, %ecx
    00000285: 	leaq	0x200(%rax), %rsi
    0000028c: 	cmpq	%rdi, %rax
    0000028f: 	je	.Ltmp3092 # Offset: 655
    00000291: 	movq	%r9, %r8
    00000294: 	jmp	.Ltmp3094 # Offset: 660
    00000296: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3092:
    000002a0: 	movq	%r15, %rsi
    000002a3: 	movq	%r14, %rdi
    000002a6: 	movaps	%xmm2, 0x40(%rsp)
    000002ab: 	movaps	%xmm1, 0x20(%rsp)
    000002b0: 	movaps	%xmm0, 0x30(%rsp)
    000002b5: 	movaps	%xmm3, 0x50(%rsp)
    000002ba: 	callq	_Z18quicksort2_forwardISt15_Deque_iteratorItRtPtEEvT_S4_ # Offset: 698
    000002bf: 	movq	0x10(%rsp), %rsi
    000002c4: 	leaq	DATAat0x34184(%rip), %rdx
    000002cb: 	movq	%r13, %rdi
    000002ce: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 718
    000002d3: 	movdqu	0x10(%rbp), %xmm0
    000002d8: 	movdqu	(%rbp), %xmm1
    000002dd: 	movq	%r13, %r8
    000002e0: 	movdqu	(%rbx), %xmm2
    000002e4: 	movl	0x4(%rsp), %r9d
    000002e9: 	movq	%r12, %rdx
    000002ec: 	movq	%r15, %rsi
    000002ef: 	movaps	%xmm0, 0x50(%rsp)
    000002f4: 	movq	0x8(%rsp), %rcx
    000002f9: 	movdqu	0x10(%rbx), %xmm0
    000002fe: 	movq	%r14, %rdi
    00000301: 	movaps	%xmm1, 0x40(%rsp)
    00000306: 	movaps	%xmm2, 0x20(%rsp)
    0000030b: 	movaps	%xmm0, 0x30(%rsp)
    00000310: 	callq	_Z15TestSearchArrayISt15_Deque_iteratorItRtPtEPFS3_S3_S3_tEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 784
    00000315: 	movq	0x60(%rsp), %rdi
    0000031a: 	cmpq	0x18(%rsp), %rdi
    0000031f: 	je	.Ltmp3095 # Offset: 799
    00000321: 	movq	0x70(%rsp), %rax
    00000326: 	leaq	0x1(%rax), %rsi
    0000032a: 	callq	_ZdlPvm@PLT # Offset: 810
.Ltmp3095:
    0000032f: 	movq	0x88(%rsp), %rax
    00000337: 	subq	%fs:0x28, %rax
    00000340: 	jne	.Ltmp3096 # Offset: 832
    00000342: 	addq	$0x98, %rsp
    00000349: 	popq	%rbx
    0000034a: 	popq	%rbp
    0000034b: 	popq	%r12
    0000034d: 	popq	%r13
    0000034f: 	popq	%r14
    00000351: 	popq	%r15
    00000353: 	retq # Offset: 851
.Ltmp3083:
    00000354: 	testq	%r12, %r12
    00000357: 	je	.Ltmp3084 # Offset: 855
    0000035d: 	movl	$0x1, %edx
    00000362: 	jmp	.Ltmp3097 # Offset: 866
.Ltmp3096:
    00000367: 	callq	__stack_chk_fail@PLT # Offset: 871
    0000036c: 	endbr64
.Ltmp3099:
    00000370: 	movq	%rax, %rbp
    00000373: 	jmp	.Ltmp3098 # Offset: 883
    00000375: 	endbr64
    00000379: 	jmp	.Ltmp3099 # Offset: 889
    0000037b: 	endbr64
    0000037f: 	movq	%rax, %rbp
    00000382: 	movq	0x60(%rsp), %rdi
    00000387: 	leaq	0x70(%rsp), %rax
    0000038c: 	cmpq	%rax, %rdi
    0000038f: 	je	.Ltmp3100 # Offset: 911
.Ltmp3101:
    00000391: 	movq	0x70(%rsp), %rax
    00000396: 	leaq	0x1(%rax), %rsi
    0000039a: 	callq	_ZdlPvm@PLT # Offset: 922
.Ltmp3100:
    0000039f: 	movq	%rbp, %rdi
    000003a2: 	callq	_Unwind_Resume@PLT # Offset: 930
.Ltmp3098:
    000003a7: 	movq	0x60(%rsp), %rdi
    000003ac: 	cmpq	0x18(%rsp), %rdi
    000003b1: 	jne	.Ltmp3101 # Offset: 945
    000003b3: 	jmp	.Ltmp3100 # Offset: 947
DWARF CFI Instructions:
    <empty>
End of Function "_Z13TestOneSearchISt15_Deque_iteratorItRtPtEPFS3_S3_S3_tEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z23lower_bound_recur_innerISt15_Deque_iteratorItRtPtEtlET_S4_T0_T1_" after disassembly {
  Number      : 368
  State       : disassembled
  Address     : 0x19ad0
  Size        : 0x19c
  MaxSize     : 0x1a0
  Offset      : 0x19ad0
  Section     : .text
  Orc Section : .local.text._Z23lower_bound_recur_innerISt15_Deque_iteratorItRtPtEtlET_S4_T0_T1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0367:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movl	%edx, %r10d
    00000009: 	movq	%rdi, %r12
    0000000c: 	subq	$0x30, %rsp
    00000010: 	movdqu	(%rsi), %xmm1
    00000014: 	movdqu	0x10(%rsi), %xmm0
    00000019: 	movq	%fs:0x28, %rdx
    00000022: 	movq	%rdx, 0x28(%rsp)
    00000027: 	xorl	%edx, %edx
    00000029: 	movhlps	%xmm1, %xmm2
    0000002c: 	movhlps	%xmm0, %xmm3
    0000002f: 	testq	%rcx, %rcx
    00000032: 	jne	.Ltmp3102 # Offset: 50
    00000034: 	movups	%xmm1, (%rdi)
    00000037: 	movups	%xmm0, 0x10(%rdi)
.Ltmp3108:
    0000003b: 	movq	0x28(%rsp), %rax
    00000040: 	subq	%fs:0x28, %rax
    00000049: 	jne	.Ltmp3103 # Offset: 73
    0000004f: 	addq	$0x30, %rsp
    00000053: 	movq	%r12, %rax
    00000056: 	popq	%r12
    00000058: 	retq # Offset: 88
    00000059: 	nopl	(%rax) # Size: 7
.Ltmp3102:
    00000060: 	movq	%rcx, %r8
    00000063: 	movq	%xmm2, %rdi
    00000068: 	movq	%xmm1, %rdx
    0000006d: 	movq	%rsi, %rax
    00000070: 	shrq	$0x3f, %r8
    00000074: 	subq	%rdi, %rdx
    00000077: 	movq	%xmm1, %r11
    0000007c: 	addq	%rcx, %r8
    0000007f: 	sarq	%rdx
    00000082: 	movq	%xmm3, %r9
    00000087: 	sarq	%r8
    0000008a: 	addq	%r8, %rdx
    0000008d: 	js	.Ltmp3104 # Offset: 141
    00000093: 	cmpq	$0xff, %rdx
    0000009a: 	jg	.Ltmp3105 # Offset: 154
    000000a0: 	leaq	(%r11,%r8,2), %rdx
    000000a4: 	movq	%xmm0, %rsi
    000000a9: 	movzwl	%r10w, %r11d
    000000ad: 	cmpw	%r10w, (%rdx)
    000000b1: 	jae	.Ltmp3106 # Offset: 177
.Ltmp3109:
    000000b7: 	addq	$0x2, %rdx
    000000bb: 	cmpq	%rsi, %rdx
    000000be: 	je	.Ltmp3107 # Offset: 190
.Ltmp3111:
    000000c4: 	movq	%rdi, %xmm4
    000000c9: 	movq	%rdx, %xmm0
    000000ce: 	movq	%rdx, (%rax)
    000000d1: 	addq	$0x1, %r8
    000000d5: 	punpcklqdq	%xmm4, %xmm0
    000000d9: 	movq	%rdi, 0x8(%rax)
    000000dd: 	movq	%r9, %xmm5
    000000e2: 	subq	%r8, %rcx
    000000e5: 	movq	%rsi, 0x10(%rax)
    000000e9: 	movl	%r11d, %edx
    000000ec: 	movq	%r12, %rdi
    000000ef: 	movq	%r9, 0x18(%rax)
    000000f3: 	movaps	%xmm0, (%rsp)
    000000f7: 	movq	%rsi, %xmm0
    000000fc: 	movq	%rsp, %rsi
    000000ff: 	punpcklqdq	%xmm5, %xmm0
    00000103: 	movaps	%xmm0, 0x10(%rsp)
    00000108: 	callq	_Z23lower_bound_recur_innerISt15_Deque_iteratorItRtPtEtlET_S4_T0_T1_ # Offset: 264
    0000010d: 	jmp	.Ltmp3108 # Offset: 269
    00000112: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3104:
    00000118: 	movq	%rdx, %r11
    0000011b: 	notq	%r11
    0000011e: 	shrq	$0x8, %r11
    00000122: 	notq	%r11
.Ltmp3110:
    00000125: 	leaq	(%r9,%r11,8), %r9
    00000129: 	shlq	$0x8, %r11
    0000012d: 	movq	(%r9), %rdi
    00000130: 	subq	%r11, %rdx
    00000133: 	movzwl	%r10w, %r11d
    00000137: 	leaq	(%rdi,%rdx,2), %rdx
    0000013b: 	leaq	0x200(%rdi), %rsi
    00000142: 	cmpw	%r10w, (%rdx)
    00000146: 	jb	.Ltmp3109 # Offset: 326
.Ltmp3106:
    0000014c: 	movq	%rsp, %rsi
    0000014f: 	movq	%r8, %rcx
    00000152: 	movl	%r11d, %edx
    00000155: 	movq	%r12, %rdi
    00000158: 	movaps	%xmm1, (%rsp)
    0000015c: 	movaps	%xmm0, 0x10(%rsp)
    00000161: 	callq	_Z23lower_bound_recur_innerISt15_Deque_iteratorItRtPtEtlET_S4_T0_T1_ # Offset: 353
    00000166: 	jmp	.Ltmp3108 # Offset: 358
    0000016b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3105:
    00000170: 	movq	%rdx, %r11
    00000173: 	sarq	$0x8, %r11
    00000177: 	jmp	.Ltmp3110 # Offset: 375
    00000179: 	nopl	(%rax) # Size: 7
.Ltmp3107:
    00000180: 	movq	0x8(%r9), %rdx
    00000184: 	addq	$0x8, %r9
    00000188: 	leaq	0x200(%rdx), %rsi
    0000018f: 	movq	%rdx, %rdi
    00000192: 	jmp	.Ltmp3111 # Offset: 402
.Ltmp3103:
    00000197: 	callq	__stack_chk_fail@PLT # Offset: 407
DWARF CFI Instructions:
    <empty>
End of Function "_Z23lower_bound_recur_innerISt15_Deque_iteratorItRtPtEtlET_S4_T0_T1_"

Binary Function "_Z17lower_bound_recurISt15_Deque_iteratorItRtPtEtET_S4_S4_T0_" after disassembly {
  Number      : 369
  State       : disassembled
  Address     : 0x19c70
  Size        : 0x1ac
  MaxSize     : 0x1b0
  Offset      : 0x19c70
  Section     : .text
  Orc Section : .local.text._Z17lower_bound_recurISt15_Deque_iteratorItRtPtEtET_S4_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0368:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movq	%rdx, %r10
    00000009: 	movq	%rdi, %r12
    0000000c: 	subq	$0x30, %rsp
    00000010: 	movdqu	0x10(%rsi), %xmm0
    00000015: 	movq	0x18(%rdx), %rdx
    00000019: 	movq	%fs:0x28, %rax
    00000022: 	movq	%rax, 0x28(%rsp)
    00000027: 	xorl	%eax, %eax
    00000029: 	movdqu	(%rsi), %xmm1
    0000002d: 	movhlps	%xmm0, %xmm3
    00000030: 	movq	%rdx, %rax
    00000033: 	movq	%xmm3, %rdi
    00000038: 	movq	%xmm1, %r8
    0000003d: 	movhlps	%xmm1, %xmm2
    00000040: 	subq	%rdi, %rax
    00000043: 	sarq	$0x3, %rax
    00000047: 	cmpq	$0x1, %rdx
    0000004b: 	movq	(%r10), %rdx
    0000004e: 	adcq	$-0x1, %rax
    00000052: 	subq	0x8(%r10), %rdx
    00000056: 	sarq	%rdx
    00000059: 	shlq	$0x8, %rax
    0000005d: 	addq	%rdx, %rax
    00000060: 	movq	%xmm0, %rdx
    00000065: 	subq	%r8, %rdx
    00000068: 	sarq	%rdx
    0000006b: 	addq	%rdx, %rax
    0000006e: 	jne	.Ltmp3112 # Offset: 110
    00000070: 	movups	%xmm1, (%r12)
    00000075: 	movups	%xmm0, 0x10(%r12)
.Ltmp3118:
    0000007b: 	movq	0x28(%rsp), %rax
    00000080: 	subq	%fs:0x28, %rax
    00000089: 	jne	.Ltmp3113 # Offset: 137
    0000008f: 	addq	$0x30, %rsp
    00000093: 	movq	%r12, %rax
    00000096: 	popq	%r12
    00000098: 	retq # Offset: 152
    00000099: 	nopl	(%rax) # Size: 7
.Ltmp3112:
    000000a0: 	movq	%rax, %r10
    000000a3: 	movq	%xmm2, %r9
    000000a8: 	movq	%xmm1, %rdx
    000000ad: 	shrq	$0x3f, %r10
    000000b1: 	subq	%r9, %rdx
    000000b4: 	addq	%rax, %r10
    000000b7: 	sarq	%rdx
    000000ba: 	sarq	%r10
    000000bd: 	addq	%r10, %rdx
    000000c0: 	js	.Ltmp3114 # Offset: 192
    000000c2: 	cmpq	$0xff, %rdx
    000000c9: 	jg	.Ltmp3115 # Offset: 201
    000000cf: 	leaq	(%r8,%r10,2), %rdx
    000000d3: 	movq	%xmm0, %rsi
    000000d8: 	movzwl	%cx, %r8d
    000000dc: 	cmpw	(%rdx), %cx
    000000df: 	jbe	.Ltmp3116 # Offset: 223
.Ltmp3119:
    000000e1: 	addq	$0x2, %rdx
    000000e5: 	cmpq	%rsi, %rdx
    000000e8: 	je	.Ltmp3117 # Offset: 232
.Ltmp3121:
    000000ee: 	movq	%rdx, %xmm0
    000000f3: 	movq	%r9, %xmm4
    000000f8: 	addq	$0x1, %r10
    000000fc: 	movl	%r8d, %edx
    000000ff: 	punpcklqdq	%xmm4, %xmm0
    00000103: 	movq	%rdi, %xmm5
    00000108: 	subq	%r10, %rax
    0000010b: 	movq	%r12, %rdi
    0000010e: 	movaps	%xmm0, (%rsp)
    00000112: 	movq	%rsi, %xmm0
    00000117: 	movq	%rax, %rcx
    0000011a: 	movq	%rsp, %rsi
    0000011d: 	punpcklqdq	%xmm5, %xmm0
    00000121: 	movaps	%xmm0, 0x10(%rsp)
    00000126: 	callq	_Z23lower_bound_recur_innerISt15_Deque_iteratorItRtPtEtlET_S4_T0_T1_ # Offset: 294
    0000012b: 	jmp	.Ltmp3118 # Offset: 299
.Ltmp3114:
    00000130: 	movq	%rdx, %r8
    00000133: 	notq	%r8
    00000136: 	shrq	$0x8, %r8
    0000013a: 	notq	%r8
.Ltmp3120:
    0000013d: 	leaq	(%rdi,%r8,8), %rdi
    00000141: 	shlq	$0x8, %r8
    00000145: 	movq	(%rdi), %r9
    00000148: 	subq	%r8, %rdx
    0000014b: 	movzwl	%cx, %r8d
    0000014f: 	leaq	(%r9,%rdx,2), %rdx
    00000153: 	leaq	0x200(%r9), %rsi
    0000015a: 	cmpw	(%rdx), %cx
    0000015d: 	ja	.Ltmp3119 # Offset: 349
.Ltmp3116:
    0000015f: 	movq	%rsp, %rsi
    00000162: 	movq	%r10, %rcx
    00000165: 	movl	%r8d, %edx
    00000168: 	movq	%r12, %rdi
    0000016b: 	movaps	%xmm1, (%rsp)
    0000016f: 	movaps	%xmm0, 0x10(%rsp)
    00000174: 	callq	_Z23lower_bound_recur_innerISt15_Deque_iteratorItRtPtEtlET_S4_T0_T1_ # Offset: 372
    00000179: 	jmp	.Ltmp3118 # Offset: 377
    0000017e: 	nop # Size: 2
.Ltmp3115:
    00000180: 	movq	%rdx, %r8
    00000183: 	sarq	$0x8, %r8
    00000187: 	jmp	.Ltmp3120 # Offset: 391
    00000189: 	nopl	(%rax) # Size: 7
.Ltmp3117:
    00000190: 	movq	0x8(%rdi), %rdx
    00000194: 	addq	$0x8, %rdi
    00000198: 	leaq	0x200(%rdx), %rsi
    0000019f: 	movq	%rdx, %r9
    000001a2: 	jmp	.Ltmp3121 # Offset: 418
.Ltmp3113:
    000001a7: 	callq	__stack_chk_fail@PLT # Offset: 423
DWARF CFI Instructions:
    <empty>
End of Function "_Z17lower_bound_recurISt15_Deque_iteratorItRtPtEtET_S4_S4_T0_"

Binary Function "_Z23upper_bound_recur_innerISt15_Deque_iteratorItRtPtEtlET_S4_T0_T1_" after disassembly {
  Number      : 370
  State       : disassembled
  Address     : 0x19e20
  Size        : 0x194
  MaxSize     : 0x1a0
  Offset      : 0x19e20
  Section     : .text
  Orc Section : .local.text._Z23upper_bound_recur_innerISt15_Deque_iteratorItRtPtEtlET_S4_T0_T1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0369:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movq	%rsi, %rax
    00000009: 	movq	%rdi, %r12
    0000000c: 	movl	%edx, %esi
    0000000e: 	subq	$0x30, %rsp
    00000012: 	movdqu	(%rax), %xmm1
    00000016: 	movdqu	0x10(%rax), %xmm0
    0000001b: 	movq	%fs:0x28, %rdx
    00000024: 	movq	%rdx, 0x28(%rsp)
    00000029: 	xorl	%edx, %edx
    0000002b: 	movhlps	%xmm1, %xmm2
    0000002e: 	movhlps	%xmm0, %xmm3
    00000031: 	testq	%rcx, %rcx
    00000034: 	jne	.Ltmp3122 # Offset: 52
    00000036: 	movups	%xmm1, (%rdi)
    00000039: 	movups	%xmm0, 0x10(%rdi)
.Ltmp3128:
    0000003d: 	movq	0x28(%rsp), %rax
    00000042: 	subq	%fs:0x28, %rax
    0000004b: 	jne	.Ltmp3123 # Offset: 75
    00000051: 	addq	$0x30, %rsp
    00000055: 	movq	%r12, %rax
    00000058: 	popq	%r12
    0000005a: 	retq # Offset: 90
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3122:
    00000060: 	movq	%rcx, %r8
    00000063: 	movq	%xmm2, %r9
    00000068: 	movq	%xmm1, %rdx
    0000006d: 	shrq	$0x3f, %r8
    00000071: 	subq	%r9, %rdx
    00000074: 	movq	%xmm1, %r11
    00000079: 	addq	%rcx, %r8
    0000007c: 	sarq	%rdx
    0000007f: 	movq	%xmm3, %r10
    00000084: 	sarq	%r8
    00000087: 	addq	%r8, %rdx
    0000008a: 	js	.Ltmp3124 # Offset: 138
    00000090: 	cmpq	$0xff, %rdx
    00000097: 	jg	.Ltmp3125 # Offset: 151
    0000009d: 	leaq	(%r11,%r8,2), %rdx
    000000a1: 	movq	%xmm0, %rdi
    000000a6: 	movzwl	%si, %r11d
    000000aa: 	cmpw	%si, (%rdx)
    000000ad: 	ja	.Ltmp3126 # Offset: 173
.Ltmp3129:
    000000b3: 	addq	$0x2, %rdx
    000000b7: 	cmpq	%rdi, %rdx
    000000ba: 	je	.Ltmp3127 # Offset: 186
.Ltmp3131:
    000000c0: 	movq	%rdx, %xmm0
    000000c5: 	movq	%r9, %xmm4
    000000ca: 	movq	%rdx, (%rax)
    000000cd: 	movq	%rsp, %rsi
    000000d0: 	punpcklqdq	%xmm4, %xmm0
    000000d4: 	movq	%rdi, 0x10(%rax)
    000000d8: 	movq	%r10, %xmm5
    000000dd: 	movl	%r11d, %edx
    000000e0: 	movq	%r9, 0x8(%rax)
    000000e4: 	addq	$0x1, %r8
    000000e8: 	movq	%r10, 0x18(%rax)
    000000ec: 	subq	%r8, %rcx
    000000ef: 	movaps	%xmm0, (%rsp)
    000000f3: 	movq	%rdi, %xmm0
    000000f8: 	movq	%r12, %rdi
    000000fb: 	punpcklqdq	%xmm5, %xmm0
    000000ff: 	movaps	%xmm0, 0x10(%rsp)
    00000104: 	callq	_Z23upper_bound_recur_innerISt15_Deque_iteratorItRtPtEtlET_S4_T0_T1_ # Offset: 260
    00000109: 	jmp	.Ltmp3128 # Offset: 265
    0000010e: 	nop # Size: 2
.Ltmp3124:
    00000110: 	movq	%rdx, %r11
    00000113: 	notq	%r11
    00000116: 	shrq	$0x8, %r11
    0000011a: 	notq	%r11
.Ltmp3130:
    0000011d: 	leaq	(%r10,%r11,8), %r10
    00000121: 	shlq	$0x8, %r11
    00000125: 	movq	(%r10), %r9
    00000128: 	subq	%r11, %rdx
    0000012b: 	movzwl	%si, %r11d
    0000012f: 	leaq	(%r9,%rdx,2), %rdx
    00000133: 	leaq	0x200(%r9), %rdi
    0000013a: 	cmpw	%si, (%rdx)
    0000013d: 	jbe	.Ltmp3129 # Offset: 317
.Ltmp3126:
    00000143: 	movq	%rsp, %rsi
    00000146: 	movq	%r8, %rcx
    00000149: 	movl	%r11d, %edx
    0000014c: 	movq	%r12, %rdi
    0000014f: 	movaps	%xmm1, (%rsp)
    00000153: 	movaps	%xmm0, 0x10(%rsp)
    00000158: 	callq	_Z23upper_bound_recur_innerISt15_Deque_iteratorItRtPtEtlET_S4_T0_T1_ # Offset: 344
    0000015d: 	jmp	.Ltmp3128 # Offset: 349
    00000162: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3125:
    00000168: 	movq	%rdx, %r11
    0000016b: 	sarq	$0x8, %r11
    0000016f: 	jmp	.Ltmp3130 # Offset: 367
    00000171: 	nopl	(%rax) # Size: 7
.Ltmp3127:
    00000178: 	movq	0x8(%r10), %rdx
    0000017c: 	addq	$0x8, %r10
    00000180: 	leaq	0x200(%rdx), %rdi
    00000187: 	movq	%rdx, %r9
    0000018a: 	jmp	.Ltmp3131 # Offset: 394
.Ltmp3123:
    0000018f: 	callq	__stack_chk_fail@PLT # Offset: 399
DWARF CFI Instructions:
    <empty>
End of Function "_Z23upper_bound_recur_innerISt15_Deque_iteratorItRtPtEtlET_S4_T0_T1_"

Binary Function "_Z17upper_bound_recurISt15_Deque_iteratorItRtPtEtET_S4_S4_T0_" after disassembly {
  Number      : 371
  State       : disassembled
  Address     : 0x19fc0
  Size        : 0x1ac
  MaxSize     : 0x1b0
  Offset      : 0x19fc0
  Section     : .text
  Orc Section : .local.text._Z17upper_bound_recurISt15_Deque_iteratorItRtPtEtET_S4_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0370:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movq	%rdx, %r10
    00000009: 	movq	%rdi, %r12
    0000000c: 	subq	$0x30, %rsp
    00000010: 	movdqu	0x10(%rsi), %xmm0
    00000015: 	movq	0x18(%rdx), %rdx
    00000019: 	movq	%fs:0x28, %rax
    00000022: 	movq	%rax, 0x28(%rsp)
    00000027: 	xorl	%eax, %eax
    00000029: 	movdqu	(%rsi), %xmm1
    0000002d: 	movhlps	%xmm0, %xmm3
    00000030: 	movq	%rdx, %rax
    00000033: 	movq	%xmm3, %rdi
    00000038: 	movq	%xmm1, %r8
    0000003d: 	movhlps	%xmm1, %xmm2
    00000040: 	subq	%rdi, %rax
    00000043: 	sarq	$0x3, %rax
    00000047: 	cmpq	$0x1, %rdx
    0000004b: 	movq	(%r10), %rdx
    0000004e: 	adcq	$-0x1, %rax
    00000052: 	subq	0x8(%r10), %rdx
    00000056: 	sarq	%rdx
    00000059: 	shlq	$0x8, %rax
    0000005d: 	addq	%rdx, %rax
    00000060: 	movq	%xmm0, %rdx
    00000065: 	subq	%r8, %rdx
    00000068: 	sarq	%rdx
    0000006b: 	addq	%rdx, %rax
    0000006e: 	jne	.Ltmp3132 # Offset: 110
    00000070: 	movups	%xmm1, (%r12)
    00000075: 	movups	%xmm0, 0x10(%r12)
.Ltmp3138:
    0000007b: 	movq	0x28(%rsp), %rax
    00000080: 	subq	%fs:0x28, %rax
    00000089: 	jne	.Ltmp3133 # Offset: 137
    0000008f: 	addq	$0x30, %rsp
    00000093: 	movq	%r12, %rax
    00000096: 	popq	%r12
    00000098: 	retq # Offset: 152
    00000099: 	nopl	(%rax) # Size: 7
.Ltmp3132:
    000000a0: 	movq	%rax, %r10
    000000a3: 	movq	%xmm2, %r9
    000000a8: 	movq	%xmm1, %rdx
    000000ad: 	shrq	$0x3f, %r10
    000000b1: 	subq	%r9, %rdx
    000000b4: 	addq	%rax, %r10
    000000b7: 	sarq	%rdx
    000000ba: 	sarq	%r10
    000000bd: 	addq	%r10, %rdx
    000000c0: 	js	.Ltmp3134 # Offset: 192
    000000c2: 	cmpq	$0xff, %rdx
    000000c9: 	jg	.Ltmp3135 # Offset: 201
    000000cf: 	leaq	(%r8,%r10,2), %rdx
    000000d3: 	movq	%xmm0, %rsi
    000000d8: 	movzwl	%cx, %r8d
    000000dc: 	cmpw	(%rdx), %cx
    000000df: 	jb	.Ltmp3136 # Offset: 223
.Ltmp3139:
    000000e1: 	addq	$0x2, %rdx
    000000e5: 	cmpq	%rsi, %rdx
    000000e8: 	je	.Ltmp3137 # Offset: 232
.Ltmp3141:
    000000ee: 	movq	%rdx, %xmm0
    000000f3: 	movq	%r9, %xmm4
    000000f8: 	addq	$0x1, %r10
    000000fc: 	movl	%r8d, %edx
    000000ff: 	punpcklqdq	%xmm4, %xmm0
    00000103: 	movq	%rdi, %xmm5
    00000108: 	subq	%r10, %rax
    0000010b: 	movq	%r12, %rdi
    0000010e: 	movaps	%xmm0, (%rsp)
    00000112: 	movq	%rsi, %xmm0
    00000117: 	movq	%rax, %rcx
    0000011a: 	movq	%rsp, %rsi
    0000011d: 	punpcklqdq	%xmm5, %xmm0
    00000121: 	movaps	%xmm0, 0x10(%rsp)
    00000126: 	callq	_Z23upper_bound_recur_innerISt15_Deque_iteratorItRtPtEtlET_S4_T0_T1_ # Offset: 294
    0000012b: 	jmp	.Ltmp3138 # Offset: 299
.Ltmp3134:
    00000130: 	movq	%rdx, %r8
    00000133: 	notq	%r8
    00000136: 	shrq	$0x8, %r8
    0000013a: 	notq	%r8
.Ltmp3140:
    0000013d: 	leaq	(%rdi,%r8,8), %rdi
    00000141: 	shlq	$0x8, %r8
    00000145: 	movq	(%rdi), %r9
    00000148: 	subq	%r8, %rdx
    0000014b: 	movzwl	%cx, %r8d
    0000014f: 	leaq	(%r9,%rdx,2), %rdx
    00000153: 	leaq	0x200(%r9), %rsi
    0000015a: 	cmpw	(%rdx), %cx
    0000015d: 	jae	.Ltmp3139 # Offset: 349
.Ltmp3136:
    0000015f: 	movq	%rsp, %rsi
    00000162: 	movq	%r10, %rcx
    00000165: 	movl	%r8d, %edx
    00000168: 	movq	%r12, %rdi
    0000016b: 	movaps	%xmm1, (%rsp)
    0000016f: 	movaps	%xmm0, 0x10(%rsp)
    00000174: 	callq	_Z23upper_bound_recur_innerISt15_Deque_iteratorItRtPtEtlET_S4_T0_T1_ # Offset: 372
    00000179: 	jmp	.Ltmp3138 # Offset: 377
    0000017e: 	nop # Size: 2
.Ltmp3135:
    00000180: 	movq	%rdx, %r8
    00000183: 	sarq	$0x8, %r8
    00000187: 	jmp	.Ltmp3140 # Offset: 391
    00000189: 	nopl	(%rax) # Size: 7
.Ltmp3137:
    00000190: 	movq	0x8(%rdi), %rdx
    00000194: 	addq	$0x8, %rdi
    00000198: 	leaq	0x200(%rdx), %rsi
    0000019f: 	movq	%rdx, %r9
    000001a2: 	jmp	.Ltmp3141 # Offset: 418
.Ltmp3133:
    000001a7: 	callq	__stack_chk_fail@PLT # Offset: 423
DWARF CFI Instructions:
    <empty>
End of Function "_Z17upper_bound_recurISt15_Deque_iteratorItRtPtEtET_S4_S4_T0_"

Binary Function "_Z15TestSearchArrayISt15_Deque_iteratorItRtPtEPFbS3_S3_tEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 372
  State       : disassembled
  Address     : 0x1a170
  Size        : 0x2bc
  MaxSize     : 0x2c0
  Offset      : 0x1a170
  Section     : .text
  Orc Section : .local.text._Z15TestSearchArrayISt15_Deque_iteratorItRtPtEPFbS3_S3_tEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0371:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	movl	$0x800, %edi
    0000000e: 	pushq	%r14
    00000010: 	pushq	%r13
    00000012: 	pushq	%r12
    00000014: 	movq	%rsi, %r12
    00000017: 	pushq	%rbp
    00000018: 	pushq	%rbx
    00000019: 	subq	$0x88, %rsp
    00000020: 	movq	%rdx, 0x20(%rsp)
    00000025: 	movq	%r8, 0x28(%rsp)
    0000002a: 	movq	%rcx, 0x10(%rsp)
    0000002f: 	movb	%r9b, 0x1f(%rsp)
    00000034: 	movq	%fs:0x28, %rax
    0000003d: 	movq	%rax, 0x78(%rsp)
    00000042: 	xorl	%eax, %eax
    00000044: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    0000004b: 	callq	_Znwm@PLT # Offset: 75
    00000050: 	xorl	%edx, %edx
    00000052: 	movq	%rax, %rbx
    00000055: 	movq	%rax, 0x8(%rsp)
    0000005a: 	addq	$0x2, %rax
    0000005e: 	leaq	0x800(%rbx), %r8
    00000065: 	movw	%dx, -0x2(%rax)
    00000069: 	cmpq	%r8, %rax
    0000006c: 	je	.Ltmp3142 # Offset: 108
    0000006e: 	leaq	0xa(%rbx), %rdi
    00000072: 	movq	$0x0, 0x2(%rbx)
    0000007a: 	movq	$0x0, 0x7f8(%rbx)
    00000085: 	andq	$-0x8, %rdi
    00000089: 	subq	%rdi, %rax
    0000008c: 	movq	%rax, %rcx
    0000008f: 	xorl	%eax, %eax
    00000091: 	addl	$0x7fe, %ecx
    00000097: 	shrl	$0x3, %ecx
    0000009a: 	rep		stosq	%rax, %es:(%rdi)
.Ltmp3142:
    0000009d: 	movq	(%r15), %rbx
    000000a0: 	movq	0x18(%r15), %r10
    000000a4: 	movabsq	$0x5851f42d4c957f2d, %r9
    000000ae: 	movabsq	$0x14057b7ef767814f, %rdi
    000000b8: 	movq	0x8(%rsp), %rcx
    000000bd: 	movq	0x20(%rsp), %r11
    000000c2: 	movq	%rbx, %rsi
    000000c5: 	subq	0x8(%r15), %rsi
    000000c9: 	sarq	%rsi
    000000cc: 	jmp	.Ltmp3143 # Offset: 204
    000000ce: 	nop # Size: 2
.Ltmp3146:
    000000d0: 	cmpq	$0xff, %rax
    000000d6: 	jg	.Ltmp3144 # Offset: 214
    000000dc: 	leaq	(%rbx,%rdx,2), %rax
    000000e0: 	addq	$0x2, %rcx
    000000e4: 	movzwl	(%rax), %eax
    000000e7: 	movw	%ax, -0x2(%rcx)
    000000eb: 	cmpq	%rcx, %r8
    000000ee: 	je	.Ltmp3145 # Offset: 238
.Ltmp3143:
    000000f0: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000000f7: 	imulq	%r9, %rax
    000000fb: 	addq	%rdi, %rax
    000000fe: 	movq	%rax, %rdx
    00000101: 	movq	%rax, %rbp
    00000104: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    0000010b: 	shrq	$0x14, %rdx
    0000010f: 	shlq	$0x17, %rbp
    00000113: 	xorq	%rbp, %rdx
    00000116: 	xorq	%rdx, %rax
    00000119: 	xorl	%edx, %edx
    0000011b: 	divq	%r11
    0000011e: 	movq	%rdx, %rax
    00000121: 	addq	%rsi, %rax
    00000124: 	jns	.Ltmp3146 # Offset: 292
    00000126: 	movq	%rax, %rdx
    00000129: 	notq	%rdx
    0000012c: 	shrq	$0x8, %rdx
    00000130: 	notq	%rdx
.Ltmp3153:
    00000133: 	movq	%rdx, %rbp
    00000136: 	movq	(%r10,%rdx,8), %rdx
    0000013a: 	addq	$0x2, %rcx
    0000013e: 	shlq	$0x8, %rbp
    00000142: 	subq	%rbp, %rax
    00000145: 	leaq	(%rdx,%rax,2), %rax
    00000149: 	movzwl	(%rax), %eax
    0000014c: 	movw	%ax, -0x2(%rcx)
    00000150: 	cmpq	%rcx, %r8
    00000153: 	jne	.Ltmp3143 # Offset: 339
.Ltmp3145:
    00000155: 	callq	clock@PLT # Offset: 341
    0000015a: 	xorl	%ebx, %ebx
    0000015c: 	xorl	%ebp, %ebp
    0000015e: 	leaq	0x50(%rsp), %r13
    00000163: 	movq	%rax, start_time(%rip)
    0000016a: 	leaq	0x30(%rsp), %r14
.Ltmp3150:
    0000016f: 	leaq	0xc8(%rbp), %rax
    00000176: 	movq	%rax, (%rsp)
    0000017a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3148:
    00000180: 	movq	%rbp, %rax
    00000183: 	movdqu	(%r15), %xmm4
    00000188: 	movq	0x8(%rsp), %rcx
    0000018d: 	movq	%r13, %rsi
    00000190: 	movdqu	(%r12), %xmm2
    00000196: 	movdqu	0x10(%r12), %xmm3
    0000019d: 	addq	$0x1, %rbp
    000001a1: 	movq	%r14, %rdi
    000001a4: 	movdqu	0x10(%r15), %xmm5
    000001aa: 	andl	$0x3ff, %eax
    000001af: 	movaps	%xmm4, 0x30(%rsp)
    000001b4: 	movzwl	(%rcx,%rax,2), %edx
    000001b8: 	movaps	%xmm2, 0x50(%rsp)
    000001bd: 	movq	0x10(%rsp), %rax
    000001c2: 	movaps	%xmm3, 0x60(%rsp)
    000001c7: 	movaps	%xmm5, 0x40(%rsp)
    000001cc: 	callq	*%rax # Offset: 460
    000001ce: 	testb	%al, %al
    000001d0: 	jne	.Ltmp3147 # Offset: 464
    000001d2: 	cmpb	$0x0, 0x1f(%rsp)
    000001d7: 	movl	$0x1, %eax
    000001dc: 	cmovel	%eax, %ebx
.Ltmp3147:
    000001df: 	cmpq	(%rsp), %rbp
    000001e3: 	jne	.Ltmp3148 # Offset: 483
    000001e5: 	callq	clock@PLT # Offset: 485
    000001ea: 	movsd	gMinimumTimeTarget(%rip), %xmm1
    000001f2: 	pxor	%xmm0, %xmm0
    000001f6: 	movq	%rax, end_time(%rip)
    000001fd: 	subq	start_time(%rip), %rax
    00000204: 	cvtsi2sd	%rax, %xmm0
    00000209: 	divsd	DATAat0x34410(%rip), %xmm0
    00000211: 	comisd	%xmm0, %xmm1
    00000215: 	jbe	.Ltmp3149 # Offset: 533
    00000217: 	cmpq	$0x5f5e0ff, %rbp
    0000021e: 	jbe	.Ltmp3150 # Offset: 542
.Ltmp3149:
    00000224: 	movq	0x28(%rsp), %rdx
    00000229: 	movq	0x20(%rsp), %rdi
    0000022e: 	movq	%rbp, %rsi
    00000231: 	callq	_Z13record_resultdmmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 561
    00000236: 	testb	%bl, %bl
    00000238: 	jne	.Ltmp3151 # Offset: 568
.Ltmp3154:
    0000023a: 	movq	0x78(%rsp), %rax
    0000023f: 	subq	%fs:0x28, %rax
    00000248: 	jne	.Ltmp3152 # Offset: 584
    0000024a: 	movq	0x8(%rsp), %rdi
    0000024f: 	addq	$0x88, %rsp
    00000256: 	movl	$0x800, %esi
    0000025b: 	popq	%rbx
    0000025c: 	popq	%rbp
    0000025d: 	popq	%r12
    0000025f: 	popq	%r13
    00000261: 	popq	%r14
    00000263: 	popq	%r15
    00000265: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 613
    0000026a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3144:
    00000270: 	movq	%rax, %rdx
    00000273: 	sarq	$0x8, %rdx
    00000277: 	jmp	.Ltmp3153 # Offset: 631
.Ltmp3151:
    0000027c: 	movq	0x28(%rsp), %rax
    00000281: 	leaq	DATAat0x34137(%rip), %rsi
    00000288: 	movl	$0x1, %edi
    0000028d: 	movq	(%rax), %rdx
    00000290: 	xorl	%eax, %eax
    00000292: 	callq	__printf_chk@PLT # Offset: 658
    00000297: 	jmp	.Ltmp3154 # Offset: 663
.Ltmp3152:
    00000299: 	callq	__stack_chk_fail@PLT # Offset: 665
    0000029e: 	endbr64
    000002a2: 	movq	%rax, %rbp
    000002a5: 	movq	0x8(%rsp), %rdi
    000002aa: 	movl	$0x800, %esi
    000002af: 	callq	_ZdlPvm@PLT # Offset: 687
    000002b4: 	movq	%rbp, %rdi
    000002b7: 	callq	_Unwind_Resume@PLT # Offset: 695
DWARF CFI Instructions:
    <empty>
End of Function "_Z15TestSearchArrayISt15_Deque_iteratorItRtPtEPFbS3_S3_tEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z13TestOneSearchISt15_Deque_iteratorItRtPtEPFbS3_S3_tEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 373
  State       : disassembled
  Address     : 0x1a430
  Size        : 0x3b5
  MaxSize     : 0x3c0
  Offset      : 0x1a430
  Section     : .text
  Orc Section : .local.text._Z13TestOneSearchISt15_Deque_iteratorItRtPtEPFbS3_S3_tEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0372:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rdx, %r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rsi, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x98, %rsp
    0000001e: 	movq	(%rdi), %rdx
    00000021: 	movq	(%rsi), %rsi
    00000024: 	movq	%rcx, 0x8(%rsp)
    00000029: 	movq	0x10(%rdi), %rcx
    0000002d: 	movq	%r8, 0x10(%rsp)
    00000032: 	movq	0x18(%rdi), %rdi
    00000036: 	movq	%fs:0x28, %rax
    0000003f: 	movq	%rax, 0x88(%rsp)
    00000047: 	xorl	%eax, %eax
    00000049: 	cmpq	%rsi, %rdx
    0000004c: 	jne	.Ltmp3155 # Offset: 76
    0000004e: 	jmp	.Ltmp3156 # Offset: 78
.Ltmp3157:
    00000050: 	movl	$0x5, %r8d
    00000056: 	movw	%r8w, (%rdx)
    0000005a: 	cmpq	%rsi, %rax
    0000005d: 	je	.Ltmp3156 # Offset: 93
.Ltmp3158:
    0000005f: 	movq	%rax, %rdx
.Ltmp3155:
    00000062: 	leaq	0x2(%rdx), %rax
    00000066: 	cmpq	%rcx, %rax
    00000069: 	jne	.Ltmp3157 # Offset: 105
    0000006b: 	movq	0x8(%rdi), %rax
    0000006f: 	movl	$0x5, %r10d
    00000075: 	leaq	0x8(%rdi), %r8
    00000079: 	movw	%r10w, (%rdx)
    0000007d: 	leaq	0x200(%rax), %rcx
    00000084: 	cmpq	%rax, %rsi
    00000087: 	je	.Ltmp3156 # Offset: 135
    00000089: 	movq	%r8, %rdi
    0000008c: 	jmp	.Ltmp3158 # Offset: 140
    0000008e: 	nop # Size: 2
.Ltmp3156:
    00000090: 	movq	0x10(%rsp), %rsi
    00000095: 	leaq	0x60(%rsp), %r13
    0000009a: 	movzbl	%r9b, %eax
    0000009e: 	leaq	DATAat0x34160(%rip), %rdx
    000000a5: 	movq	%r13, %rdi
    000000a8: 	movl	%eax, 0x4(%rsp)
    000000ac: 	leaq	0x40(%rsp), %r15
    000000b1: 	leaq	0x20(%rsp), %r14
    000000b6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 182
    000000bb: 	movdqu	(%rbp), %xmm4
    000000c0: 	movdqu	0x10(%rbp), %xmm5
    000000c5: 	movq	%r13, %r8
    000000c8: 	movdqu	(%rbx), %xmm6
    000000cc: 	movdqu	0x10(%rbx), %xmm7
    000000d1: 	movq	%r12, %rdx
    000000d4: 	movq	%r15, %rsi
    000000d7: 	movl	0x4(%rsp), %r9d
    000000dc: 	movq	0x8(%rsp), %rcx
    000000e1: 	movq	%r14, %rdi
    000000e4: 	movaps	%xmm4, 0x40(%rsp)
    000000e9: 	movaps	%xmm5, 0x50(%rsp)
    000000ee: 	movaps	%xmm6, 0x20(%rsp)
    000000f3: 	movaps	%xmm7, 0x30(%rsp)
    000000f8: 	callq	_Z15TestSearchArrayISt15_Deque_iteratorItRtPtEPFbS3_S3_tEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 248
    000000fd: 	movq	0x60(%rsp), %rdi
    00000102: 	leaq	0x70(%rsp), %rax
    00000107: 	movq	%rax, 0x18(%rsp)
    0000010c: 	cmpq	%rax, %rdi
    0000010f: 	je	.Ltmp3159 # Offset: 271
    00000111: 	movq	0x70(%rsp), %rax
    00000116: 	leaq	0x1(%rax), %rsi
    0000011a: 	callq	_ZdlPvm@PLT # Offset: 282
.Ltmp3159:
    0000011f: 	movq	(%rbx), %rdi
    00000122: 	movq	0x10(%rbx), %r8
    00000126: 	movq	0x18(%rbx), %r10
    0000012a: 	cmpq	$0x9, %r12
    0000012e: 	jbe	.Ltmp3160 # Offset: 302
    00000134: 	movabsq	$-0x3333333333333333, %rdx
    0000013e: 	movq	%r12, %rax
    00000141: 	mulq	%rdx
    00000144: 	shrq	$0x3, %rdx
.Ltmp3174:
    00000148: 	xorl	%esi, %esi
    0000014a: 	xorl	%r9d, %r9d
    0000014d: 	cmpq	$0x0, %r12
    00000151: 	jbe	.Ltmp3161 # Offset: 337
    00000153: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3166:
    00000158: 	xorl	%ecx, %ecx
    0000015a: 	jmp	.Ltmp3162 # Offset: 346
    0000015c: 	nopl	(%rax) # Size: 4
.Ltmp3164:
    00000160: 	addq	$0x1, %rcx
    00000164: 	movw	%r9w, (%rdi)
    00000168: 	addq	$0x1, %rsi
    0000016c: 	cmpq	%rdx, %rcx
    0000016f: 	jae	.Ltmp3163 # Offset: 367
    00000171: 	cmpq	%rsi, %r12
    00000174: 	jbe	.Ltmp3163 # Offset: 372
.Ltmp3165:
    00000176: 	movq	%rax, %rdi
.Ltmp3162:
    00000179: 	leaq	0x2(%rdi), %rax
    0000017d: 	cmpq	%r8, %rax
    00000180: 	jne	.Ltmp3164 # Offset: 384
    00000182: 	movq	0x8(%r10), %rax
    00000186: 	leaq	0x8(%r10), %r11
    0000018a: 	addq	$0x1, %rsi
    0000018e: 	movw	%r9w, (%rdi)
    00000192: 	addq	$0x1, %rcx
    00000196: 	movq	%r11, %r10
    00000199: 	leaq	0x200(%rax), %r8
    000001a0: 	cmpq	%rsi, %r12
    000001a3: 	jbe	.Ltmp3163 # Offset: 419
    000001a5: 	cmpq	%rdx, %rcx
    000001a8: 	jb	.Ltmp3165 # Offset: 424
    000001aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3163:
    000001b0: 	movq	%rax, %rdi
    000001b3: 	addl	$0x1, %r9d
    000001b7: 	cmpq	%rsi, %r12
    000001ba: 	ja	.Ltmp3166 # Offset: 442
.Ltmp3161:
    000001bc: 	movq	0x10(%rsp), %rsi
    000001c1: 	leaq	DATAat0x3416e(%rip), %rdx
    000001c8: 	movq	%r13, %rdi
    000001cb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 459
    000001d0: 	movdqu	(%rbp), %xmm3
    000001d5: 	movdqu	0x10(%rbp), %xmm4
    000001da: 	movq	%r13, %r8
    000001dd: 	movdqu	(%rbx), %xmm5
    000001e1: 	movdqu	0x10(%rbx), %xmm6
    000001e6: 	movq	%r12, %rdx
    000001e9: 	movq	%r15, %rsi
    000001ec: 	movl	0x4(%rsp), %r9d
    000001f1: 	movq	0x8(%rsp), %rcx
    000001f6: 	movq	%r14, %rdi
    000001f9: 	movaps	%xmm3, 0x40(%rsp)
    000001fe: 	movaps	%xmm4, 0x50(%rsp)
    00000203: 	movaps	%xmm5, 0x20(%rsp)
    00000208: 	movaps	%xmm6, 0x30(%rsp)
    0000020d: 	callq	_Z15TestSearchArrayISt15_Deque_iteratorItRtPtEPFbS3_S3_tEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 525
    00000212: 	movq	0x60(%rsp), %rdi
    00000217: 	cmpq	0x18(%rsp), %rdi
    0000021c: 	je	.Ltmp3167 # Offset: 540
    0000021e: 	movq	0x70(%rsp), %rax
    00000223: 	leaq	0x1(%rax), %rsi
    00000227: 	callq	_ZdlPvm@PLT # Offset: 551
.Ltmp3167:
    0000022c: 	movdqu	0x10(%rbx), %xmm0
    00000231: 	movdqu	(%rbp), %xmm2
    00000236: 	xorl	%ecx, %ecx
    00000238: 	movdqu	(%rbx), %xmm1
    0000023c: 	movdqu	0x10(%rbp), %xmm3
    00000241: 	movhlps	%xmm0, %xmm7
    00000244: 	movq	%xmm2, %rdi
    00000249: 	movq	%xmm0, %rsi
    0000024e: 	movq	%xmm1, %rdx
    00000253: 	movq	%xmm7, %r8
    00000258: 	cmpq	%rdi, %rdx
    0000025b: 	jne	.Ltmp3168 # Offset: 603
    0000025d: 	jmp	.Ltmp3169 # Offset: 605
    0000025f: 	nop # Size: 1
.Ltmp3170:
    00000260: 	movw	%cx, (%rdx)
    00000263: 	addl	$0x1, %ecx
    00000266: 	cmpq	%rdi, %rax
    00000269: 	je	.Ltmp3169 # Offset: 617
.Ltmp3171:
    0000026b: 	movq	%rax, %rdx
.Ltmp3168:
    0000026e: 	leaq	0x2(%rdx), %rax
    00000272: 	cmpq	%rax, %rsi
    00000275: 	jne	.Ltmp3170 # Offset: 629
    00000277: 	movq	0x8(%r8), %rax
    0000027b: 	leaq	0x8(%r8), %r9
    0000027f: 	movw	%cx, (%rdx)
    00000282: 	addl	$0x1, %ecx
    00000285: 	leaq	0x200(%rax), %rsi
    0000028c: 	cmpq	%rdi, %rax
    0000028f: 	je	.Ltmp3169 # Offset: 655
    00000291: 	movq	%r9, %r8
    00000294: 	jmp	.Ltmp3171 # Offset: 660
    00000296: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3169:
    000002a0: 	movq	%r15, %rsi
    000002a3: 	movq	%r14, %rdi
    000002a6: 	movaps	%xmm2, 0x40(%rsp)
    000002ab: 	movaps	%xmm1, 0x20(%rsp)
    000002b0: 	movaps	%xmm0, 0x30(%rsp)
    000002b5: 	movaps	%xmm3, 0x50(%rsp)
    000002ba: 	callq	_Z18quicksort2_forwardISt15_Deque_iteratorItRtPtEEvT_S4_ # Offset: 698
    000002bf: 	movq	0x10(%rsp), %rsi
    000002c4: 	leaq	DATAat0x34184(%rip), %rdx
    000002cb: 	movq	%r13, %rdi
    000002ce: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 718
    000002d3: 	movdqu	0x10(%rbp), %xmm0
    000002d8: 	movdqu	(%rbp), %xmm1
    000002dd: 	movq	%r13, %r8
    000002e0: 	movdqu	(%rbx), %xmm2
    000002e4: 	movl	0x4(%rsp), %r9d
    000002e9: 	movq	%r12, %rdx
    000002ec: 	movq	%r15, %rsi
    000002ef: 	movaps	%xmm0, 0x50(%rsp)
    000002f4: 	movq	0x8(%rsp), %rcx
    000002f9: 	movdqu	0x10(%rbx), %xmm0
    000002fe: 	movq	%r14, %rdi
    00000301: 	movaps	%xmm1, 0x40(%rsp)
    00000306: 	movaps	%xmm2, 0x20(%rsp)
    0000030b: 	movaps	%xmm0, 0x30(%rsp)
    00000310: 	callq	_Z15TestSearchArrayISt15_Deque_iteratorItRtPtEPFbS3_S3_tEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 784
    00000315: 	movq	0x60(%rsp), %rdi
    0000031a: 	cmpq	0x18(%rsp), %rdi
    0000031f: 	je	.Ltmp3172 # Offset: 799
    00000321: 	movq	0x70(%rsp), %rax
    00000326: 	leaq	0x1(%rax), %rsi
    0000032a: 	callq	_ZdlPvm@PLT # Offset: 810
.Ltmp3172:
    0000032f: 	movq	0x88(%rsp), %rax
    00000337: 	subq	%fs:0x28, %rax
    00000340: 	jne	.Ltmp3173 # Offset: 832
    00000342: 	addq	$0x98, %rsp
    00000349: 	popq	%rbx
    0000034a: 	popq	%rbp
    0000034b: 	popq	%r12
    0000034d: 	popq	%r13
    0000034f: 	popq	%r14
    00000351: 	popq	%r15
    00000353: 	retq # Offset: 851
.Ltmp3160:
    00000354: 	testq	%r12, %r12
    00000357: 	je	.Ltmp3161 # Offset: 855
    0000035d: 	movl	$0x1, %edx
    00000362: 	jmp	.Ltmp3174 # Offset: 866
.Ltmp3173:
    00000367: 	callq	__stack_chk_fail@PLT # Offset: 871
    0000036c: 	endbr64
.Ltmp3176:
    00000370: 	movq	%rax, %rbp
    00000373: 	jmp	.Ltmp3175 # Offset: 883
    00000375: 	endbr64
    00000379: 	jmp	.Ltmp3176 # Offset: 889
    0000037b: 	endbr64
    0000037f: 	movq	%rax, %rbp
    00000382: 	movq	0x60(%rsp), %rdi
    00000387: 	leaq	0x70(%rsp), %rax
    0000038c: 	cmpq	%rax, %rdi
    0000038f: 	je	.Ltmp3177 # Offset: 911
.Ltmp3178:
    00000391: 	movq	0x70(%rsp), %rax
    00000396: 	leaq	0x1(%rax), %rsi
    0000039a: 	callq	_ZdlPvm@PLT # Offset: 922
.Ltmp3177:
    0000039f: 	movq	%rbp, %rdi
    000003a2: 	callq	_Unwind_Resume@PLT # Offset: 930
.Ltmp3175:
    000003a7: 	movq	0x60(%rsp), %rdi
    000003ac: 	cmpq	0x18(%rsp), %rdi
    000003b1: 	jne	.Ltmp3178 # Offset: 945
    000003b3: 	jmp	.Ltmp3177 # Offset: 947
DWARF CFI Instructions:
    <empty>
End of Function "_Z13TestOneSearchISt15_Deque_iteratorItRtPtEPFbS3_S3_tEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z16TestOneContainerISt15_Deque_iteratorItRtPtEEvT_S4_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 374
  State       : disassembled
  Address     : 0x1a7f0
  Size        : 0x77c
  MaxSize     : 0x780
  Offset      : 0x1a7f0
  Section     : .text
  Orc Section : .local.text._Z16TestOneContainerISt15_Deque_iteratorItRtPtEEvT_S4_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0373:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdx, %r14
    0000000b: 	leaq	DATAat0x3418f(%rip), %rdx
    00000012: 	pushq	%r13
    00000014: 	movq	%rcx, %r13
    00000017: 	pushq	%r12
    00000019: 	movq	%rsi, %r12
    0000001c: 	movq	%rcx, %rsi
    0000001f: 	pushq	%rbp
    00000020: 	pushq	%rbx
    00000021: 	movq	%rdi, %rbx
    00000024: 	subq	$0x88, %rsp
    0000002b: 	movq	%fs:0x28, %rax
    00000034: 	movq	%rax, 0x78(%rsp)
    00000039: 	xorl	%eax, %eax
    0000003b: 	leaq	0x50(%rsp), %rbp
    00000040: 	leaq	0x30(%rsp), %r15
    00000045: 	movq	%rbp, %rdi
    00000048: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 72
    0000004d: 	movdqu	0x10(%rbx), %xmm4
    00000052: 	xorl	%r9d, %r9d
    00000055: 	movq	%rbp, %r8
    00000058: 	movdqu	(%r12), %xmm1
    0000005e: 	movdqu	(%rbx), %xmm3
    00000062: 	movq	%r14, %rdx
    00000065: 	movq	%r15, %rsi
    00000068: 	movdqu	0x10(%r12), %xmm2
    0000006f: 	leaq	0x10(%rsp), %rdi
    00000074: 	movaps	%xmm4, 0x20(%rsp)
    00000079: 	leaq	_Z14std_lowerboundISt15_Deque_iteratorItRtPtEtET_S4_S4_T0_(%rip), %rcx
    00000080: 	movq	%rdi, 0x8(%rsp)
    00000085: 	movaps	%xmm1, 0x30(%rsp)
    0000008a: 	movaps	%xmm2, 0x40(%rsp)
    0000008f: 	movaps	%xmm3, 0x10(%rsp)
    00000094: 	callq	_Z13TestOneSearchISt15_Deque_iteratorItRtPtEPFS3_S3_S3_tEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 148
    00000099: 	movq	0x50(%rsp), %rdi
    0000009e: 	leaq	0x60(%rsp), %rax
    000000a3: 	movq	%rax, (%rsp)
    000000a7: 	cmpq	%rax, %rdi
    000000aa: 	je	.Ltmp3179 # Offset: 170
    000000ac: 	movq	0x60(%rsp), %rax
    000000b1: 	leaq	0x1(%rax), %rsi
    000000b5: 	callq	_ZdlPvm@PLT # Offset: 181
.Ltmp3179:
    000000ba: 	leaq	DATAat0x341a1(%rip), %rdx
    000000c1: 	movq	%r13, %rsi
    000000c4: 	movq	%rbp, %rdi
    000000c7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 199
    000000cc: 	movdqu	0x10(%rbx), %xmm1
    000000d1: 	xorl	%r9d, %r9d
    000000d4: 	movq	%rbp, %r8
    000000d7: 	movdqu	(%r12), %xmm5
    000000dd: 	movdqu	(%rbx), %xmm7
    000000e1: 	movq	%r14, %rdx
    000000e4: 	movq	%r15, %rsi
    000000e7: 	movdqu	0x10(%r12), %xmm6
    000000ee: 	movq	0x8(%rsp), %rdi
    000000f3: 	movaps	%xmm1, 0x20(%rsp)
    000000f8: 	leaq	_Z12lower_bound1ISt15_Deque_iteratorItRtPtEtET_S4_S4_T0_(%rip), %rcx
    000000ff: 	movaps	%xmm5, 0x30(%rsp)
    00000104: 	movaps	%xmm6, 0x40(%rsp)
    00000109: 	movaps	%xmm7, 0x10(%rsp)
    0000010e: 	callq	_Z13TestOneSearchISt15_Deque_iteratorItRtPtEPFS3_S3_S3_tEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 270
    00000113: 	movq	0x50(%rsp), %rdi
    00000118: 	cmpq	(%rsp), %rdi
    0000011c: 	je	.Ltmp3180 # Offset: 284
    0000011e: 	movq	0x60(%rsp), %rax
    00000123: 	leaq	0x1(%rax), %rsi
    00000127: 	callq	_ZdlPvm@PLT # Offset: 295
.Ltmp3180:
    0000012c: 	leaq	DATAat0x341af(%rip), %rdx
    00000133: 	movq	%r13, %rsi
    00000136: 	movq	%rbp, %rdi
    00000139: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 313
    0000013e: 	movdqu	0x10(%rbx), %xmm5
    00000143: 	xorl	%r9d, %r9d
    00000146: 	movq	%rbp, %r8
    00000149: 	movdqu	(%r12), %xmm2
    0000014f: 	movdqu	(%rbx), %xmm4
    00000153: 	movq	%r14, %rdx
    00000156: 	movq	%r15, %rsi
    00000159: 	movdqu	0x10(%r12), %xmm3
    00000160: 	movq	0x8(%rsp), %rdi
    00000165: 	movaps	%xmm5, 0x20(%rsp)
    0000016a: 	leaq	_Z12lower_bound2ISt15_Deque_iteratorItRtPtEtET_S4_S4_T0_(%rip), %rcx
    00000171: 	movaps	%xmm2, 0x30(%rsp)
    00000176: 	movaps	%xmm3, 0x40(%rsp)
    0000017b: 	movaps	%xmm4, 0x10(%rsp)
    00000180: 	callq	_Z13TestOneSearchISt15_Deque_iteratorItRtPtEPFS3_S3_S3_tEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 384
    00000185: 	movq	0x50(%rsp), %rdi
    0000018a: 	cmpq	(%rsp), %rdi
    0000018e: 	je	.Ltmp3181 # Offset: 398
    00000190: 	movq	0x60(%rsp), %rax
    00000195: 	leaq	0x1(%rax), %rsi
    00000199: 	callq	_ZdlPvm@PLT # Offset: 409
.Ltmp3181:
    0000019e: 	leaq	DATAat0x341bd(%rip), %rdx
    000001a5: 	movq	%r13, %rsi
    000001a8: 	movq	%rbp, %rdi
    000001ab: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 427
    000001b0: 	movdqu	0x10(%rbx), %xmm1
    000001b5: 	xorl	%r9d, %r9d
    000001b8: 	movq	%rbp, %r8
    000001bb: 	movdqu	(%r12), %xmm6
    000001c1: 	movdqu	(%rbx), %xmm0
    000001c5: 	movq	%r14, %rdx
    000001c8: 	movq	%r15, %rsi
    000001cb: 	movdqu	0x10(%r12), %xmm7
    000001d2: 	movq	0x8(%rsp), %rdi
    000001d7: 	movaps	%xmm1, 0x20(%rsp)
    000001dc: 	leaq	_Z17lower_bound_recurISt15_Deque_iteratorItRtPtEtET_S4_S4_T0_(%rip), %rcx
    000001e3: 	movaps	%xmm6, 0x30(%rsp)
    000001e8: 	movaps	%xmm7, 0x40(%rsp)
    000001ed: 	movaps	%xmm0, 0x10(%rsp)
    000001f2: 	callq	_Z13TestOneSearchISt15_Deque_iteratorItRtPtEPFS3_S3_S3_tEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 498
    000001f7: 	movq	0x50(%rsp), %rdi
    000001fc: 	cmpq	(%rsp), %rdi
    00000200: 	je	.Ltmp3182 # Offset: 512
    00000202: 	movq	0x60(%rsp), %rax
    00000207: 	leaq	0x1(%rax), %rsi
    0000020b: 	callq	_ZdlPvm@PLT # Offset: 523
.Ltmp3182:
    00000210: 	leaq	DATAat0x341d4(%rip), %rdx
    00000217: 	movq	%r13, %rsi
    0000021a: 	movq	%rbp, %rdi
    0000021d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 541
    00000222: 	movdqu	(%r12), %xmm2
    00000228: 	movdqu	(%rbx), %xmm4
    0000022c: 	movl	$0x1, %r9d
    00000232: 	movdqu	0x10(%r12), %xmm3
    00000239: 	movq	%rbp, %r8
    0000023c: 	movq	%r14, %rdx
    0000023f: 	movq	%r15, %rsi
    00000242: 	movdqu	0x10(%rbx), %xmm5
    00000247: 	movq	0x8(%rsp), %rdi
    0000024c: 	movaps	%xmm2, 0x30(%rsp)
    00000251: 	leaq	_Z14std_upperboundISt15_Deque_iteratorItRtPtEtET_S4_S4_T0_(%rip), %rcx
    00000258: 	movaps	%xmm3, 0x40(%rsp)
    0000025d: 	movaps	%xmm4, 0x10(%rsp)
    00000262: 	movaps	%xmm5, 0x20(%rsp)
    00000267: 	callq	_Z13TestOneSearchISt15_Deque_iteratorItRtPtEPFS3_S3_S3_tEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 615
    0000026c: 	movq	0x50(%rsp), %rdi
    00000271: 	cmpq	(%rsp), %rdi
    00000275: 	je	.Ltmp3183 # Offset: 629
    00000277: 	movq	0x60(%rsp), %rax
    0000027c: 	leaq	0x1(%rax), %rsi
    00000280: 	callq	_ZdlPvm@PLT # Offset: 640
.Ltmp3183:
    00000285: 	leaq	DATAat0x341e6(%rip), %rdx
    0000028c: 	movq	%r13, %rsi
    0000028f: 	movq	%rbp, %rdi
    00000292: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 658
    00000297: 	movdqu	(%r12), %xmm6
    0000029d: 	movdqu	(%rbx), %xmm0
    000002a1: 	movl	$0x1, %r9d
    000002a7: 	movdqu	0x10(%r12), %xmm7
    000002ae: 	movq	%rbp, %r8
    000002b1: 	movq	%r14, %rdx
    000002b4: 	movq	%r15, %rsi
    000002b7: 	movdqu	0x10(%rbx), %xmm1
    000002bc: 	movq	0x8(%rsp), %rdi
    000002c1: 	movaps	%xmm6, 0x30(%rsp)
    000002c6: 	leaq	_Z12upper_bound1ISt15_Deque_iteratorItRtPtEtET_S4_S4_T0_(%rip), %rcx
    000002cd: 	movaps	%xmm7, 0x40(%rsp)
    000002d2: 	movaps	%xmm0, 0x10(%rsp)
    000002d7: 	movaps	%xmm1, 0x20(%rsp)
    000002dc: 	callq	_Z13TestOneSearchISt15_Deque_iteratorItRtPtEPFS3_S3_S3_tEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 732
    000002e1: 	movq	0x50(%rsp), %rdi
    000002e6: 	cmpq	(%rsp), %rdi
    000002ea: 	je	.Ltmp3184 # Offset: 746
    000002ec: 	movq	0x60(%rsp), %rax
    000002f1: 	leaq	0x1(%rax), %rsi
    000002f5: 	callq	_ZdlPvm@PLT # Offset: 757
.Ltmp3184:
    000002fa: 	leaq	DATAat0x341f4(%rip), %rdx
    00000301: 	movq	%r13, %rsi
    00000304: 	movq	%rbp, %rdi
    00000307: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 775
    0000030c: 	movdqu	(%r12), %xmm2
    00000312: 	movdqu	(%rbx), %xmm4
    00000316: 	movl	$0x1, %r9d
    0000031c: 	movdqu	0x10(%r12), %xmm3
    00000323: 	movq	%rbp, %r8
    00000326: 	movq	%r14, %rdx
    00000329: 	movq	%r15, %rsi
    0000032c: 	movdqu	0x10(%rbx), %xmm5
    00000331: 	movq	0x8(%rsp), %rdi
    00000336: 	movaps	%xmm2, 0x30(%rsp)
    0000033b: 	leaq	_Z12upper_bound2ISt15_Deque_iteratorItRtPtEtET_S4_S4_T0_(%rip), %rcx
    00000342: 	movaps	%xmm3, 0x40(%rsp)
    00000347: 	movaps	%xmm4, 0x10(%rsp)
    0000034c: 	movaps	%xmm5, 0x20(%rsp)
    00000351: 	callq	_Z13TestOneSearchISt15_Deque_iteratorItRtPtEPFS3_S3_S3_tEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 849
    00000356: 	movq	0x50(%rsp), %rdi
    0000035b: 	cmpq	(%rsp), %rdi
    0000035f: 	je	.Ltmp3185 # Offset: 863
    00000361: 	movq	0x60(%rsp), %rax
    00000366: 	leaq	0x1(%rax), %rsi
    0000036a: 	callq	_ZdlPvm@PLT # Offset: 874
.Ltmp3185:
    0000036f: 	leaq	DATAat0x34202(%rip), %rdx
    00000376: 	movq	%r13, %rsi
    00000379: 	movq	%rbp, %rdi
    0000037c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 892
    00000381: 	movdqu	(%r12), %xmm6
    00000387: 	movdqu	(%rbx), %xmm0
    0000038b: 	movl	$0x1, %r9d
    00000391: 	movdqu	0x10(%r12), %xmm7
    00000398: 	movq	%rbp, %r8
    0000039b: 	movq	%r14, %rdx
    0000039e: 	movq	%r15, %rsi
    000003a1: 	movdqu	0x10(%rbx), %xmm1
    000003a6: 	movq	0x8(%rsp), %rdi
    000003ab: 	movaps	%xmm6, 0x30(%rsp)
    000003b0: 	leaq	_Z17upper_bound_recurISt15_Deque_iteratorItRtPtEtET_S4_S4_T0_(%rip), %rcx
    000003b7: 	movaps	%xmm7, 0x40(%rsp)
    000003bc: 	movaps	%xmm0, 0x10(%rsp)
    000003c1: 	movaps	%xmm1, 0x20(%rsp)
    000003c6: 	callq	_Z13TestOneSearchISt15_Deque_iteratorItRtPtEPFS3_S3_S3_tEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 966
    000003cb: 	movq	0x50(%rsp), %rdi
    000003d0: 	cmpq	(%rsp), %rdi
    000003d4: 	je	.Ltmp3186 # Offset: 980
    000003d6: 	movq	0x60(%rsp), %rax
    000003db: 	leaq	0x1(%rax), %rsi
    000003df: 	callq	_ZdlPvm@PLT # Offset: 991
.Ltmp3186:
    000003e4: 	leaq	DATAat0x34219(%rip), %rdx
    000003eb: 	movq	%r13, %rsi
    000003ee: 	movq	%rbp, %rdi
    000003f1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1009
    000003f6: 	movdqu	0x10(%rbx), %xmm5
    000003fb: 	xorl	%r9d, %r9d
    000003fe: 	movq	%rbp, %r8
    00000401: 	movdqu	(%r12), %xmm2
    00000407: 	movdqu	(%rbx), %xmm4
    0000040b: 	movq	%r14, %rdx
    0000040e: 	movq	%r15, %rsi
    00000411: 	movdqu	0x10(%r12), %xmm3
    00000418: 	movq	0x8(%rsp), %rdi
    0000041d: 	movaps	%xmm5, 0x20(%rsp)
    00000422: 	leaq	_Z16std_binarysearchISt15_Deque_iteratorItRtPtEtEbT_S4_T0_(%rip), %rcx
    00000429: 	movaps	%xmm2, 0x30(%rsp)
    0000042e: 	movaps	%xmm3, 0x40(%rsp)
    00000433: 	movaps	%xmm4, 0x10(%rsp)
    00000438: 	callq	_Z13TestOneSearchISt15_Deque_iteratorItRtPtEPFbS3_S3_tEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 1080
    0000043d: 	movq	0x50(%rsp), %rdi
    00000442: 	cmpq	(%rsp), %rdi
    00000446: 	je	.Ltmp3187 # Offset: 1094
    00000448: 	movq	0x60(%rsp), %rax
    0000044d: 	leaq	0x1(%rax), %rsi
    00000451: 	callq	_ZdlPvm@PLT # Offset: 1105
.Ltmp3187:
    00000456: 	leaq	DATAat0x3422d(%rip), %rdx
    0000045d: 	movq	%r13, %rsi
    00000460: 	movq	%rbp, %rdi
    00000463: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1123
    00000468: 	movdqu	0x10(%rbx), %xmm1
    0000046d: 	xorl	%r9d, %r9d
    00000470: 	movq	%rbp, %r8
    00000473: 	movdqu	(%r12), %xmm6
    00000479: 	movdqu	(%rbx), %xmm0
    0000047d: 	movq	%r14, %rdx
    00000480: 	movq	%r15, %rsi
    00000483: 	movdqu	0x10(%r12), %xmm7
    0000048a: 	movq	0x8(%rsp), %rdi
    0000048f: 	movaps	%xmm1, 0x20(%rsp)
    00000494: 	leaq	_Z13binarysearch1ISt15_Deque_iteratorItRtPtEtEbT_S4_T0_(%rip), %rcx
    0000049b: 	movaps	%xmm6, 0x30(%rsp)
    000004a0: 	movaps	%xmm7, 0x40(%rsp)
    000004a5: 	movaps	%xmm0, 0x10(%rsp)
    000004aa: 	callq	_Z13TestOneSearchISt15_Deque_iteratorItRtPtEPFbS3_S3_tEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 1194
    000004af: 	movq	0x50(%rsp), %rdi
    000004b4: 	cmpq	(%rsp), %rdi
    000004b8: 	je	.Ltmp3188 # Offset: 1208
    000004ba: 	movq	0x60(%rsp), %rax
    000004bf: 	leaq	0x1(%rax), %rsi
    000004c3: 	callq	_ZdlPvm@PLT # Offset: 1219
.Ltmp3188:
    000004c8: 	leaq	DATAat0x3423d(%rip), %rdx
    000004cf: 	movq	%r13, %rsi
    000004d2: 	movq	%rbp, %rdi
    000004d5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1237
    000004da: 	movdqu	0x10(%rbx), %xmm5
    000004df: 	xorl	%r9d, %r9d
    000004e2: 	movq	%rbp, %r8
    000004e5: 	movdqu	(%r12), %xmm2
    000004eb: 	movdqu	(%rbx), %xmm4
    000004ef: 	movq	%r14, %rdx
    000004f2: 	movq	%r15, %rsi
    000004f5: 	movdqu	0x10(%r12), %xmm3
    000004fc: 	movq	0x8(%rsp), %rdi
    00000501: 	movaps	%xmm5, 0x20(%rsp)
    00000506: 	leaq	_Z13binarysearch2ISt15_Deque_iteratorItRtPtEtEbT_S4_T0_(%rip), %rcx
    0000050d: 	movaps	%xmm2, 0x30(%rsp)
    00000512: 	movaps	%xmm3, 0x40(%rsp)
    00000517: 	movaps	%xmm4, 0x10(%rsp)
    0000051c: 	callq	_Z13TestOneSearchISt15_Deque_iteratorItRtPtEPFbS3_S3_tEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 1308
    00000521: 	movq	0x50(%rsp), %rdi
    00000526: 	cmpq	(%rsp), %rdi
    0000052a: 	je	.Ltmp3189 # Offset: 1322
    0000052c: 	movq	0x60(%rsp), %rax
    00000531: 	leaq	0x1(%rax), %rsi
    00000535: 	callq	_ZdlPvm@PLT # Offset: 1333
.Ltmp3189:
    0000053a: 	leaq	DATAat0x3424d(%rip), %rdx
    00000541: 	movq	%r13, %rsi
    00000544: 	movq	%rbp, %rdi
    00000547: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1351
    0000054c: 	movdqu	0x10(%rbx), %xmm1
    00000551: 	xorl	%r9d, %r9d
    00000554: 	movq	%rbp, %r8
    00000557: 	movdqu	(%r12), %xmm6
    0000055d: 	movdqu	(%rbx), %xmm0
    00000561: 	movq	%r14, %rdx
    00000564: 	movq	%r15, %rsi
    00000567: 	movdqu	0x10(%r12), %xmm7
    0000056e: 	movq	0x8(%rsp), %rdi
    00000573: 	movaps	%xmm1, 0x20(%rsp)
    00000578: 	leaq	_Z13binarysearch3ISt15_Deque_iteratorItRtPtEtEbT_S4_T0_(%rip), %rcx
    0000057f: 	movaps	%xmm6, 0x30(%rsp)
    00000584: 	movaps	%xmm7, 0x40(%rsp)
    00000589: 	movaps	%xmm0, 0x10(%rsp)
    0000058e: 	callq	_Z13TestOneSearchISt15_Deque_iteratorItRtPtEPFbS3_S3_tEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 1422
    00000593: 	movq	0x50(%rsp), %rdi
    00000598: 	cmpq	(%rsp), %rdi
    0000059c: 	je	.Ltmp3190 # Offset: 1436
    0000059e: 	movq	0x60(%rsp), %rax
    000005a3: 	leaq	0x1(%rax), %rsi
    000005a7: 	callq	_ZdlPvm@PLT # Offset: 1447
.Ltmp3190:
    000005ac: 	leaq	DATAat0x3425d(%rip), %rdx
    000005b3: 	movq	%r13, %rsi
    000005b6: 	movq	%rbp, %rdi
    000005b9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1465
    000005be: 	movdqu	0x10(%rbx), %xmm5
    000005c3: 	xorl	%r9d, %r9d
    000005c6: 	movq	%rbp, %r8
    000005c9: 	movdqu	(%r12), %xmm2
    000005cf: 	movdqu	(%rbx), %xmm4
    000005d3: 	movq	%r14, %rdx
    000005d6: 	movq	%r15, %rsi
    000005d9: 	movdqu	0x10(%r12), %xmm3
    000005e0: 	movq	0x8(%rsp), %rdi
    000005e5: 	movaps	%xmm5, 0x20(%rsp)
    000005ea: 	leaq	_Z13binarysearch4ISt15_Deque_iteratorItRtPtEtEbT_S4_T0_(%rip), %rcx
    000005f1: 	movaps	%xmm2, 0x30(%rsp)
    000005f6: 	movaps	%xmm3, 0x40(%rsp)
    000005fb: 	movaps	%xmm4, 0x10(%rsp)
    00000600: 	callq	_Z13TestOneSearchISt15_Deque_iteratorItRtPtEPFbS3_S3_tEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 1536
    00000605: 	movq	0x50(%rsp), %rdi
    0000060a: 	cmpq	(%rsp), %rdi
    0000060e: 	je	.Ltmp3191 # Offset: 1550
    00000610: 	movq	0x60(%rsp), %rax
    00000615: 	leaq	0x1(%rax), %rsi
    00000619: 	callq	_ZdlPvm@PLT # Offset: 1561
.Ltmp3191:
    0000061e: 	leaq	DATAat0x3426d(%rip), %rdx
    00000625: 	movq	%r13, %rsi
    00000628: 	movq	%rbp, %rdi
    0000062b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1579
    00000630: 	movdqu	(%rbx), %xmm7
    00000634: 	xorl	%r9d, %r9d
    00000637: 	movq	%rbp, %r8
    0000063a: 	movdqu	0x10(%r12), %xmm0
    00000641: 	movdqu	(%r12), %xmm6
    00000647: 	movq	%r14, %rdx
    0000064a: 	movq	%r15, %rsi
    0000064d: 	movq	0x8(%rsp), %rdi
    00000652: 	leaq	_Z18binarysearch_recurISt15_Deque_iteratorItRtPtEtEbT_S4_T0_(%rip), %rcx
    00000659: 	movaps	%xmm7, 0x10(%rsp)
    0000065e: 	movaps	%xmm0, 0x40(%rsp)
    00000663: 	movdqu	0x10(%rbx), %xmm0
    00000668: 	movaps	%xmm6, 0x30(%rsp)
    0000066d: 	movaps	%xmm0, 0x20(%rsp)
    00000672: 	callq	_Z13TestOneSearchISt15_Deque_iteratorItRtPtEPFbS3_S3_tEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 1650
    00000677: 	movq	0x50(%rsp), %rdi
    0000067c: 	cmpq	(%rsp), %rdi
    00000680: 	je	.Ltmp3192 # Offset: 1664
    00000682: 	movq	0x60(%rsp), %rax
    00000687: 	leaq	0x1(%rax), %rsi
    0000068b: 	callq	_ZdlPvm@PLT # Offset: 1675
.Ltmp3192:
    00000690: 	movq	%rbp, %rdi
    00000693: 	leaq	DATAat0x34286(%rip), %rdx
    0000069a: 	movq	%r13, %rsi
    0000069d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1693
    000006a2: 	movq	%rbp, %rdi
    000006a5: 	callq	_Z9summarizeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1701
    000006aa: 	movq	0x50(%rsp), %rdi
    000006af: 	cmpq	(%rsp), %rdi
    000006b3: 	je	.Ltmp3193 # Offset: 1715
    000006b5: 	movq	0x60(%rsp), %rax
    000006ba: 	leaq	0x1(%rax), %rsi
    000006be: 	callq	_ZdlPvm@PLT # Offset: 1726
.Ltmp3193:
    000006c3: 	movq	0x78(%rsp), %rax
    000006c8: 	subq	%fs:0x28, %rax
    000006d1: 	jne	.Ltmp3194 # Offset: 1745
    000006d3: 	addq	$0x88, %rsp
    000006da: 	popq	%rbx
    000006db: 	popq	%rbp
    000006dc: 	popq	%r12
    000006de: 	popq	%r13
    000006e0: 	popq	%r14
    000006e2: 	popq	%r15
    000006e4: 	retq # Offset: 1764
.Ltmp3194:
    000006e5: 	callq	__stack_chk_fail@PLT # Offset: 1765
    000006ea: 	endbr64
.Ltmp3196:
    000006ee: 	movq	%rax, %rbp
    000006f1: 	jmp	.Ltmp3195 # Offset: 1777
    000006f3: 	endbr64
    000006f7: 	jmp	.Ltmp3196 # Offset: 1783
    000006f9: 	endbr64
    000006fd: 	jmp	.Ltmp3196 # Offset: 1789
    000006ff: 	endbr64
    00000703: 	jmp	.Ltmp3196 # Offset: 1795
    00000705: 	endbr64
    00000709: 	jmp	.Ltmp3196 # Offset: 1801
    0000070b: 	endbr64
    0000070f: 	jmp	.Ltmp3196 # Offset: 1807
    00000711: 	endbr64
    00000715: 	jmp	.Ltmp3196 # Offset: 1813
.Ltmp3195:
    00000717: 	movq	0x50(%rsp), %rdi
    0000071c: 	cmpq	(%rsp), %rdi
    00000720: 	je	.Ltmp3197 # Offset: 1824
.Ltmp3199:
    00000722: 	movq	0x60(%rsp), %rax
    00000727: 	leaq	0x1(%rax), %rsi
    0000072b: 	callq	_ZdlPvm@PLT # Offset: 1835
.Ltmp3197:
    00000730: 	movq	%rbp, %rdi
    00000733: 	callq	_Unwind_Resume@PLT # Offset: 1843
    00000738: 	endbr64
    0000073c: 	jmp	.Ltmp3196 # Offset: 1852
    0000073e: 	endbr64
    00000742: 	jmp	.Ltmp3196 # Offset: 1858
    00000744: 	endbr64
    00000748: 	jmp	.Ltmp3196 # Offset: 1864
    0000074a: 	endbr64
    0000074e: 	jmp	.Ltmp3196 # Offset: 1870
    00000750: 	endbr64
    00000754: 	jmp	.Ltmp3196 # Offset: 1876
    00000756: 	endbr64
    0000075a: 	movq	%rax, %rbp
    0000075d: 	jmp	.Ltmp3198 # Offset: 1885
    0000075f: 	endbr64
    00000763: 	jmp	.Ltmp3196 # Offset: 1891
    00000765: 	endbr64
    00000769: 	jmp	.Ltmp3196 # Offset: 1897
.Ltmp3198:
    0000076b: 	movq	0x50(%rsp), %rdi
    00000770: 	leaq	0x60(%rsp), %rax
    00000775: 	cmpq	%rax, %rdi
    00000778: 	jne	.Ltmp3199 # Offset: 1912
    0000077a: 	jmp	.Ltmp3197 # Offset: 1914
DWARF CFI Instructions:
    <empty>
End of Function "_Z16TestOneContainerISt15_Deque_iteratorItRtPtEEvT_S4_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z24binarysearch_recur_innerISt15_Deque_iteratorItRtPtEtlEbT_T0_T1_" after disassembly {
  Number      : 375
  State       : disassembled
  Address     : 0x1af70
  Size        : 0x17c
  MaxSize     : 0x180
  Offset      : 0x1af70
  Section     : .text
  Orc Section : .local.text._Z24binarysearch_recur_innerISt15_Deque_iteratorItRtPtEtlEbT_T0_T1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0374:
    00000000: 	endbr64
    00000004: 	subq	$0x38, %rsp
    00000008: 	movq	%fs:0x28, %rax
    00000011: 	movq	%rax, 0x28(%rsp)
    00000016: 	xorl	%eax, %eax
    00000018: 	testq	%rdx, %rdx
    0000001b: 	jne	.Ltmp3200 # Offset: 27
.Ltmp3206:
    0000001d: 	movq	0x28(%rsp), %rdx
    00000022: 	subq	%fs:0x28, %rdx
    0000002b: 	jne	.Ltmp3201 # Offset: 43
    00000031: 	addq	$0x38, %rsp
    00000035: 	retq # Offset: 53
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3200:
    00000040: 	movdqu	(%rdi), %xmm1
    00000044: 	movq	%rdi, %rcx
    00000047: 	movq	%rdx, %r8
    0000004a: 	movdqu	0x10(%rcx), %xmm0
    0000004f: 	shrq	$0x3f, %r8
    00000053: 	movhlps	%xmm1, %xmm2
    00000056: 	movq	%xmm1, %rax
    0000005b: 	movq	%xmm1, %r11
    00000060: 	addq	%rdx, %r8
    00000063: 	movq	%xmm2, %rdi
    00000068: 	movhlps	%xmm0, %xmm3
    0000006b: 	sarq	%r8
    0000006e: 	movq	%xmm0, %r9
    00000073: 	subq	%rdi, %rax
    00000076: 	movq	%xmm3, %r10
    0000007b: 	sarq	%rax
    0000007e: 	addq	%r8, %rax
    00000081: 	js	.Ltmp3202 # Offset: 129
    00000083: 	cmpq	$0xff, %rax
    00000089: 	jg	.Ltmp3203 # Offset: 137
    0000008f: 	leaq	(%r11,%r8,2), %rax
    00000093: 	cmpw	%si, (%rax)
    00000096: 	jae	.Ltmp3204 # Offset: 150
.Ltmp3207:
    0000009c: 	addq	$0x2, %rax
    000000a0: 	cmpq	%r9, %rax
    000000a3: 	je	.Ltmp3205 # Offset: 163
.Ltmp3209:
    000000a9: 	movq	%rdi, %xmm4
    000000ae: 	movq	%rax, %xmm0
    000000b3: 	movq	%rax, (%rcx)
    000000b6: 	movzwl	%si, %esi
    000000b9: 	punpcklqdq	%xmm4, %xmm0
    000000bd: 	movq	%rdi, 0x8(%rcx)
    000000c1: 	addq	$0x1, %r8
    000000c5: 	movq	%rsp, %rdi
    000000c8: 	movq	%r9, 0x10(%rcx)
    000000cc: 	movq	%r10, %xmm5
    000000d1: 	subq	%r8, %rdx
    000000d4: 	movq	%r10, 0x18(%rcx)
    000000d8: 	movaps	%xmm0, (%rsp)
    000000dc: 	movq	%r9, %xmm0
    000000e1: 	punpcklqdq	%xmm5, %xmm0
    000000e5: 	movaps	%xmm0, 0x10(%rsp)
    000000ea: 	callq	_Z24binarysearch_recur_innerISt15_Deque_iteratorItRtPtEtlEbT_T0_T1_ # Offset: 234
    000000ef: 	jmp	.Ltmp3206 # Offset: 239
    000000f4: 	nopl	(%rax) # Size: 4
.Ltmp3202:
    000000f8: 	movq	%rax, %r11
    000000fb: 	notq	%r11
    000000fe: 	shrq	$0x8, %r11
    00000102: 	notq	%r11
.Ltmp3208:
    00000105: 	leaq	(%r10,%r11,8), %r10
    00000109: 	shlq	$0x8, %r11
    0000010d: 	movq	(%r10), %rdi
    00000110: 	subq	%r11, %rax
    00000113: 	leaq	(%rdi,%rax,2), %rax
    00000117: 	leaq	0x200(%rdi), %r9
    0000011e: 	cmpw	%si, (%rax)
    00000121: 	jb	.Ltmp3207 # Offset: 289
.Ltmp3204:
    00000127: 	movl	$0x1, %eax
    0000012c: 	jbe	.Ltmp3206 # Offset: 300
    00000132: 	movzwl	%si, %esi
    00000135: 	movq	%rsp, %rdi
    00000138: 	movq	%r8, %rdx
    0000013b: 	movaps	%xmm1, (%rsp)
    0000013f: 	movaps	%xmm0, 0x10(%rsp)
    00000144: 	callq	_Z24binarysearch_recur_innerISt15_Deque_iteratorItRtPtEtlEbT_T0_T1_ # Offset: 324
    00000149: 	jmp	.Ltmp3206 # Offset: 329
    0000014e: 	nop # Size: 2
.Ltmp3203:
    00000150: 	movq	%rax, %r11
    00000153: 	sarq	$0x8, %r11
    00000157: 	jmp	.Ltmp3208 # Offset: 343
    00000159: 	nopl	(%rax) # Size: 7
.Ltmp3205:
    00000160: 	movq	0x8(%r10), %rax
    00000164: 	addq	$0x8, %r10
    00000168: 	leaq	0x200(%rax), %r9
    0000016f: 	movq	%rax, %rdi
    00000172: 	jmp	.Ltmp3209 # Offset: 370
.Ltmp3201:
    00000177: 	callq	__stack_chk_fail@PLT # Offset: 375
DWARF CFI Instructions:
    <empty>
End of Function "_Z24binarysearch_recur_innerISt15_Deque_iteratorItRtPtEtlEbT_T0_T1_"

Binary Function "_Z18binarysearch_recurISt15_Deque_iteratorItRtPtEtEbT_S4_T0_" after disassembly {
  Number      : 376
  State       : disassembled
  Address     : 0x1b0f0
  Size        : 0x19c
  MaxSize     : 0x1a0
  Offset      : 0x1b0f0
  Section     : .text
  Orc Section : .local.text._Z18binarysearch_recurISt15_Deque_iteratorItRtPtEtEbT_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0375:
    00000000: 	endbr64
    00000004: 	subq	$0x38, %rsp
    00000008: 	movq	%rdi, %rcx
    0000000b: 	movl	%edx, %r9d
    0000000e: 	movq	(%rdi), %r10
    00000011: 	movq	%fs:0x28, %rax
    0000001a: 	movq	%rax, 0x28(%rsp)
    0000001f: 	movq	0x18(%rsi), %rax
    00000023: 	movq	0x18(%rcx), %r8
    00000027: 	movq	0x10(%rdi), %rdi
    0000002b: 	movq	%r8, %xmm2
    00000030: 	movq	%rdi, %xmm0
    00000035: 	punpcklqdq	%xmm2, %xmm0
    00000039: 	movq	%rax, %rdx
    0000003c: 	subq	%r8, %rdx
    0000003f: 	sarq	$0x3, %rdx
    00000043: 	cmpq	$0x1, %rax
    00000047: 	movq	(%rsi), %rax
    0000004a: 	adcq	$-0x1, %rdx
    0000004e: 	subq	0x8(%rsi), %rax
    00000052: 	movq	%rdi, %rsi
    00000055: 	sarq	%rax
    00000058: 	shlq	$0x8, %rdx
    0000005c: 	subq	%r10, %rsi
    0000005f: 	addq	%rax, %rdx
    00000062: 	sarq	%rsi
    00000065: 	xorl	%eax, %eax
    00000067: 	addq	%rsi, %rdx
    0000006a: 	jne	.Ltmp3210 # Offset: 106
.Ltmp3216:
    0000006c: 	movq	0x28(%rsp), %rdx
    00000071: 	subq	%fs:0x28, %rdx
    0000007a: 	jne	.Ltmp3211 # Offset: 122
    00000080: 	addq	$0x38, %rsp
    00000084: 	retq # Offset: 132
    00000085: 	nopl	(%rax) # Size: 3
.Ltmp3210:
    00000088: 	movq	0x8(%rcx), %rcx
    0000008c: 	movq	%rdx, %r11
    0000008f: 	movq	%r10, %rax
    00000092: 	movq	%r10, %xmm1
    00000097: 	shrq	$0x3f, %r11
    0000009b: 	addq	%rdx, %r11
    0000009e: 	subq	%rcx, %rax
    000000a1: 	movq	%rcx, %xmm3
    000000a6: 	sarq	%r11
    000000a9: 	sarq	%rax
    000000ac: 	punpcklqdq	%xmm3, %xmm1
    000000b0: 	addq	%r11, %rax
    000000b3: 	js	.Ltmp3212 # Offset: 179
    000000b5: 	cmpq	$0xff, %rax
    000000bb: 	jg	.Ltmp3213 # Offset: 187
    000000c1: 	leaq	(%r10,%r11,2), %rax
    000000c5: 	movzwl	%r9w, %esi
    000000c9: 	cmpw	(%rax), %r9w
    000000cd: 	jbe	.Ltmp3214 # Offset: 205
.Ltmp3217:
    000000cf: 	addq	$0x2, %rax
    000000d3: 	cmpq	%rdi, %rax
    000000d6: 	je	.Ltmp3215 # Offset: 214
.Ltmp3219:
    000000dc: 	movq	%rcx, %xmm4
    000000e1: 	movq	%rax, %xmm0
    000000e6: 	movq	%r8, %xmm5
    000000eb: 	addq	$0x1, %r11
    000000ef: 	punpcklqdq	%xmm4, %xmm0
    000000f3: 	subq	%r11, %rdx
    000000f6: 	movaps	%xmm0, (%rsp)
    000000fa: 	movq	%rdi, %xmm0
    000000ff: 	movq	%rsp, %rdi
    00000102: 	punpcklqdq	%xmm5, %xmm0
    00000106: 	movaps	%xmm0, 0x10(%rsp)
    0000010b: 	callq	_Z24binarysearch_recur_innerISt15_Deque_iteratorItRtPtEtlEbT_T0_T1_ # Offset: 267
    00000110: 	jmp	.Ltmp3216 # Offset: 272
    00000115: 	nopl	(%rax) # Size: 3
.Ltmp3212:
    00000118: 	movq	%rax, %rsi
    0000011b: 	notq	%rsi
    0000011e: 	shrq	$0x8, %rsi
    00000122: 	notq	%rsi
.Ltmp3218:
    00000125: 	leaq	(%r8,%rsi,8), %r8
    00000129: 	shlq	$0x8, %rsi
    0000012d: 	movq	(%r8), %rcx
    00000130: 	subq	%rsi, %rax
    00000133: 	movzwl	%r9w, %esi
    00000137: 	leaq	(%rcx,%rax,2), %rax
    0000013b: 	leaq	0x200(%rcx), %rdi
    00000142: 	cmpw	(%rax), %r9w
    00000146: 	ja	.Ltmp3217 # Offset: 326
.Ltmp3214:
    00000148: 	movl	$0x1, %eax
    0000014d: 	jae	.Ltmp3216 # Offset: 333
    00000153: 	movq	%rsp, %rdi
    00000156: 	movq	%r11, %rdx
    00000159: 	movaps	%xmm1, (%rsp)
    0000015d: 	movaps	%xmm0, 0x10(%rsp)
    00000162: 	callq	_Z24binarysearch_recur_innerISt15_Deque_iteratorItRtPtEtlEbT_T0_T1_ # Offset: 354
    00000167: 	jmp	.Ltmp3216 # Offset: 359
    0000016c: 	nopl	(%rax) # Size: 4
.Ltmp3213:
    00000170: 	movq	%rax, %rsi
    00000173: 	sarq	$0x8, %rsi
    00000177: 	jmp	.Ltmp3218 # Offset: 375
    00000179: 	nopl	(%rax) # Size: 7
.Ltmp3215:
    00000180: 	movq	0x8(%r8), %rax
    00000184: 	addq	$0x8, %r8
    00000188: 	leaq	0x200(%rax), %rdi
    0000018f: 	movq	%rax, %rcx
    00000192: 	jmp	.Ltmp3219 # Offset: 402
.Ltmp3211:
    00000197: 	callq	__stack_chk_fail@PLT # Offset: 407
DWARF CFI Instructions:
    <empty>
End of Function "_Z18binarysearch_recurISt15_Deque_iteratorItRtPtEtEbT_S4_T0_"

Binary Function "_Z15TestSearchArrayISt14_List_iteratorItEPFS1_S1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 377
  State       : disassembled
  Address     : 0x1b290
  Size        : 0x274
  MaxSize     : 0x280
  Offset      : 0x1b290
  Section     : .text
  Orc Section : .local.text._Z15TestSearchArrayISt14_List_iteratorItEPFS1_S1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0376:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rcx, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	movl	$0x800, %edi
    00000017: 	pushq	%rbp
    00000018: 	pushq	%rbx
    00000019: 	movq	%rsi, %rbx
    0000001c: 	subq	$0x28, %rsp
    00000020: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000027: 	movq	%rdx, 0x8(%rsp)
    0000002c: 	movq	%r8, 0x18(%rsp)
    00000031: 	movb	%r9b, 0x17(%rsp)
    00000036: 	callq	_Znwm@PLT # Offset: 54
    0000003b: 	xorl	%edx, %edx
    0000003d: 	movq	%rax, %r13
    00000040: 	movw	%dx, (%rax)
    00000043: 	addq	$0x2, %rax
    00000047: 	leaq	0x800(%r13), %r8
    0000004e: 	cmpq	%r8, %rax
    00000051: 	je	.Ltmp3220 # Offset: 81
    00000053: 	leaq	0xa(%r13), %rdi
    00000057: 	movq	$0x0, 0x2(%r13)
    0000005f: 	movq	$0x0, 0x7f8(%r13)
    0000006a: 	andq	$-0x8, %rdi
    0000006e: 	subq	%rdi, %rax
    00000071: 	movq	%rax, %rcx
    00000074: 	xorl	%eax, %eax
    00000076: 	addl	$0x7fe, %ecx
    0000007c: 	shrl	$0x3, %ecx
    0000007f: 	rep		stosq	%rax, %es:(%rdi)
.Ltmp3220:
    00000082: 	movabsq	$0x5851f42d4c957f2d, %r9
    0000008c: 	movq	%r13, %rsi
    0000008f: 	movabsq	$0x14057b7ef767814f, %rdi
    00000099: 	nopl	(%rax) # Size: 7
.Ltmp3223:
    000000a0: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000000a7: 	imulq	%r9, %rax
    000000ab: 	addq	%rdi, %rax
    000000ae: 	movq	%rax, %rdx
    000000b1: 	movq	%rax, %rcx
    000000b4: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000000bb: 	shlq	$0x17, %rcx
    000000bf: 	shrq	$0x14, %rdx
    000000c3: 	xorq	%rcx, %rdx
    000000c6: 	xorq	%rdx, %rax
    000000c9: 	xorl	%edx, %edx
    000000cb: 	divq	0x8(%rsp)
    000000d0: 	movq	%r12, %rax
    000000d3: 	leaq	-0x1(%rdx), %rcx
    000000d7: 	testq	%rdx, %rdx
    000000da: 	jle	.Ltmp3221 # Offset: 218
.Ltmp3222:
    000000e0: 	movq	(%rax), %rax
    000000e3: 	subq	$0x1, %rcx
    000000e7: 	jae	.Ltmp3222 # Offset: 231
.Ltmp3230:
    000000e9: 	movzwl	0x10(%rax), %eax
    000000ed: 	addq	$0x2, %rsi
    000000f1: 	movw	%ax, -0x2(%rsi)
    000000f5: 	cmpq	%r8, %rsi
    000000f8: 	jne	.Ltmp3223 # Offset: 248
.Ltmp3232:
    000000fa: 	callq	clock@PLT # Offset: 250
    000000ff: 	xorl	%r15d, %r15d
    00000102: 	xorl	%ebp, %ebp
    00000104: 	movq	%rax, start_time(%rip)
.Ltmp3227:
    0000010b: 	leaq	0xc8(%rbp), %rax
    00000112: 	cmpb	$0x0, 0x17(%rsp)
    00000117: 	movq	%rax, (%rsp)
    0000011b: 	jne	.Ltmp3224 # Offset: 283
    00000121: 	nopl	(%rax) # Size: 7
.Ltmp3225:
    00000128: 	movq	%rbp, %rax
    0000012b: 	movq	%rbx, %rsi
    0000012e: 	addq	$0x1, %rbp
    00000132: 	movq	%r12, %rdi
    00000135: 	andl	$0x3ff, %eax
    0000013a: 	movzwl	(%r13,%rax,2), %edx
    00000140: 	callq	*%r14 # Offset: 320
    00000143: 	cmpq	%rax, %rbx
    00000146: 	movl	$0x1, %eax
    0000014b: 	cmovel	%eax, %r15d
    0000014f: 	cmpq	(%rsp), %rbp
    00000153: 	jne	.Ltmp3225 # Offset: 339
.Ltmp3229:
    00000155: 	callq	clock@PLT # Offset: 341
    0000015a: 	movsd	gMinimumTimeTarget(%rip), %xmm1
    00000162: 	pxor	%xmm0, %xmm0
    00000166: 	movq	%rax, end_time(%rip)
    0000016d: 	subq	start_time(%rip), %rax
    00000174: 	cvtsi2sd	%rax, %xmm0
    00000179: 	divsd	DATAat0x34410(%rip), %xmm0
    00000181: 	comisd	%xmm0, %xmm1
    00000185: 	jbe	.Ltmp3226 # Offset: 389
    00000187: 	cmpq	$0x5f5e0ff, %rbp
    0000018e: 	jbe	.Ltmp3227 # Offset: 398
.Ltmp3226:
    00000194: 	movq	0x18(%rsp), %rdx
    00000199: 	movq	0x8(%rsp), %rdi
    0000019e: 	movq	%rbp, %rsi
    000001a1: 	callq	_Z13record_resultdmmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 417
    000001a6: 	testb	%r15b, %r15b
    000001a9: 	jne	.Ltmp3228 # Offset: 425
.Ltmp3233:
    000001af: 	addq	$0x28, %rsp
    000001b3: 	movq	%r13, %rdi
    000001b6: 	movl	$0x800, %esi
    000001bb: 	popq	%rbx
    000001bc: 	popq	%rbp
    000001bd: 	popq	%r12
    000001bf: 	popq	%r13
    000001c1: 	popq	%r14
    000001c3: 	popq	%r15
    000001c5: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 453
    000001ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3224:
    000001d0: 	movq	%rbp, %rax
    000001d3: 	movq	%rbx, %rsi
    000001d6: 	addq	$0x1, %rbp
    000001da: 	movq	%r12, %rdi
    000001dd: 	andl	$0x3ff, %eax
    000001e2: 	movzwl	(%r13,%rax,2), %edx
    000001e8: 	callq	*%r14 # Offset: 488
    000001eb: 	cmpq	(%rsp), %rbp
    000001ef: 	jne	.Ltmp3224 # Offset: 495
    000001f1: 	jmp	.Ltmp3229 # Offset: 497
    000001f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3221:
    00000200: 	leaq	0x1(%rdx), %rcx
    00000204: 	je	.Ltmp3230 # Offset: 516
    0000020a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3231:
    00000210: 	addq	$0x1, %rcx
    00000214: 	movq	0x8(%rax), %rax
    00000218: 	cmpq	$0x1, %rcx
    0000021c: 	jne	.Ltmp3231 # Offset: 540
    0000021e: 	movzwl	0x10(%rax), %eax
    00000222: 	addq	$0x2, %rsi
    00000226: 	movw	%ax, -0x2(%rsi)
    0000022a: 	cmpq	%r8, %rsi
    0000022d: 	jne	.Ltmp3223 # Offset: 557
    00000233: 	jmp	.Ltmp3232 # Offset: 563
.Ltmp3228:
    00000238: 	movq	0x18(%rsp), %rax
    0000023d: 	leaq	DATAat0x34137(%rip), %rsi
    00000244: 	movl	$0x1, %edi
    00000249: 	movq	(%rax), %rdx
    0000024c: 	xorl	%eax, %eax
    0000024e: 	callq	__printf_chk@PLT # Offset: 590
    00000253: 	jmp	.Ltmp3233 # Offset: 595
    00000258: 	endbr64
    0000025c: 	movq	%rax, %rbp
    0000025f: 	movq	%r13, %rdi
    00000262: 	movl	$0x800, %esi
    00000267: 	callq	_ZdlPvm@PLT # Offset: 615
    0000026c: 	movq	%rbp, %rdi
    0000026f: 	callq	_Unwind_Resume@PLT # Offset: 623
DWARF CFI Instructions:
    <empty>
End of Function "_Z15TestSearchArrayISt14_List_iteratorItEPFS1_S1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z18quicksort2_forwardISt14_List_iteratorItEEvT_S2_" after disassembly {
  Number      : 378
  State       : disassembled
  Address     : 0x1b510
  Size        : 0x11a
  MaxSize     : 0x120
  Offset      : 0x1b510
  Section     : .text
  Orc Section : .local.text._Z18quicksort2_forwardISt14_List_iteratorItEEvT_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0377:
    00000000: 	endbr64
    00000004: 	cmpq	%rdi, %rsi
    00000007: 	je	.Ltmp3234 # Offset: 7
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rsi, %rbp
    00000016: 	pushq	%rbx
    00000017: 	movq	(%r12), %rbx
    0000001b: 	cmpq	%rbp, %rbx
    0000001e: 	je	.Ltmp3235 # Offset: 30
.Ltmp3243:
    00000024: 	movq	(%rbx), %rdx
    00000027: 	movzwl	0x10(%rbx), %edi
    0000002b: 	movzwl	0x10(%r12), %eax
    00000031: 	cmpq	%rbp, %rdx
    00000034: 	je	.Ltmp3236 # Offset: 52
    0000003a: 	cmpw	%di, %ax
    0000003d: 	jbe	.Ltmp3237 # Offset: 61
    0000003f: 	movw	%di, 0x10(%r12)
    00000045: 	movl	%eax, %edi
    00000047: 	movw	%ax, 0x10(%rbx)
.Ltmp3237:
    0000004b: 	movzwl	0x10(%rdx), %eax
    0000004f: 	cmpw	%di, %ax
    00000052: 	jae	.Ltmp3238 # Offset: 82
    00000054: 	movw	%ax, 0x10(%rbx)
    00000058: 	movw	%di, 0x10(%rdx)
    0000005c: 	movzwl	0x10(%rbx), %edi
    00000060: 	movzwl	0x10(%r12), %eax
    00000066: 	cmpw	%ax, %di
    00000069: 	jae	.Ltmp3238 # Offset: 105
    0000006b: 	movw	%ax, 0x10(%rbx)
    0000006f: 	movw	%di, 0x10(%r12)
    00000075: 	movzwl	0x10(%rbx), %edi
.Ltmp3238:
    00000079: 	movq	(%rdx), %rax
    0000007c: 	cmpq	%rbp, %rax
    0000007f: 	je	.Ltmp3235 # Offset: 127
    00000081: 	movl	$0x2, %esi
    00000086: 	movl	$0x1, %r8d
    0000008c: 	jmp	.Ltmp3239 # Offset: 140
    0000008e: 	nop # Size: 2
.Ltmp3241:
    00000090: 	movq	%rax, %rdx
    00000093: 	movq	(%rax), %rax
.Ltmp3239:
    00000096: 	movzwl	0x10(%rdx), %ecx
    0000009a: 	cmpw	%di, %cx
    0000009d: 	jae	.Ltmp3240 # Offset: 157
    0000009f: 	movzwl	0x10(%rbx), %r9d
    000000a4: 	addq	$0x1, %r8
    000000a8: 	movw	%r9w, 0x10(%rdx)
    000000ad: 	movw	%cx, 0x10(%rbx)
    000000b1: 	movq	(%rbx), %rbx
.Ltmp3240:
    000000b4: 	addq	$0x1, %rsi
    000000b8: 	cmpq	%rax, %rbp
    000000bb: 	jne	.Ltmp3241 # Offset: 187
    000000bd: 	subq	%r8, %rsi
    000000c0: 	cmpq	%rsi, %r8
    000000c3: 	jbe	.Ltmp3242 # Offset: 195
    000000c5: 	movq	%rbp, %rsi
    000000c8: 	movq	%rbx, %rdi
    000000cb: 	callq	_Z18quicksort2_forwardISt14_List_iteratorItEEvT_S2_ # Offset: 203
    000000d0: 	cmpq	%r12, %rbx
    000000d3: 	je	.Ltmp3235 # Offset: 211
    000000d5: 	movq	%rbx, %rbp
    000000d8: 	movq	%r12, %rbx
.Ltmp3244:
    000000db: 	movq	%rbx, %r12
    000000de: 	movq	(%r12), %rbx
    000000e2: 	cmpq	%rbp, %rbx
    000000e5: 	jne	.Ltmp3243 # Offset: 229
.Ltmp3235:
    000000eb: 	popq	%rbx
    000000ec: 	popq	%rbp
    000000ed: 	popq	%r12
    000000ef: 	retq # Offset: 239
.Ltmp3242:
    000000f0: 	movq	%rbx, %rsi
    000000f3: 	movq	%r12, %rdi
    000000f6: 	callq	_Z18quicksort2_forwardISt14_List_iteratorItEEvT_S2_ # Offset: 246
    000000fb: 	cmpq	%rbp, %rbx
    000000fe: 	jne	.Ltmp3244 # Offset: 254
    00000100: 	popq	%rbx
    00000101: 	popq	%rbp
    00000102: 	popq	%r12
    00000104: 	retq # Offset: 260
.Ltmp3236:
    00000105: 	cmpw	%di, %ax
    00000108: 	jbe	.Ltmp3235 # Offset: 264
    0000010a: 	movw	%ax, 0x10(%rbx)
    0000010e: 	movw	%di, 0x10(%r12)
    00000114: 	popq	%rbx
    00000115: 	popq	%rbp
    00000116: 	popq	%r12
    00000118: 	retq # Offset: 280
.Ltmp3234:
    00000119: 	retq # Offset: 281
DWARF CFI Instructions:
    <empty>
End of Function "_Z18quicksort2_forwardISt14_List_iteratorItEEvT_S2_"

Binary Function "_Z13TestOneSearchISt14_List_iteratorItEPFS1_S1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 379
  State       : disassembled
  Address     : 0x1b630
  Size        : 0x244
  MaxSize     : 0x250
  Offset      : 0x1b630
  Section     : .text
  Orc Section : .local.text._Z13TestOneSearchISt14_List_iteratorItEPFS1_S1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0378:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdi, %r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdx, %r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rsi, %rbp
    00000016: 	pushq	%rbx
    00000017: 	movq	%rdi, %rbx
    0000001a: 	subq	$0x58, %rsp
    0000001e: 	movq	%rcx, 0x8(%rsp)
    00000023: 	movq	%r8, 0x10(%rsp)
    00000028: 	movq	%fs:0x28, %rax
    00000031: 	movq	%rax, 0x48(%rsp)
    00000036: 	xorl	%eax, %eax
    00000038: 	movq	%rdi, %rax
    0000003b: 	cmpq	%rsi, %rdi
    0000003e: 	je	.Ltmp3245 # Offset: 62
.Ltmp3246:
    00000040: 	movq	%rax, %rdx
    00000043: 	movq	(%rax), %rax
    00000046: 	movl	$0x5, %ecx
    0000004b: 	movw	%cx, 0x10(%rdx)
    0000004f: 	cmpq	%rbp, %rax
    00000052: 	jne	.Ltmp3246 # Offset: 82
.Ltmp3245:
    00000054: 	movq	0x10(%rsp), %rsi
    00000059: 	leaq	0x20(%rsp), %r15
    0000005e: 	leaq	DATAat0x34160(%rip), %rdx
    00000065: 	movzbl	%r9b, %r14d
    00000069: 	movq	%r15, %rdi
    0000006c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 108
    00000071: 	movq	0x8(%rsp), %rcx
    00000076: 	movl	%r14d, %r9d
    00000079: 	movq	%r15, %r8
    0000007c: 	movq	%r12, %rdx
    0000007f: 	movq	%rbp, %rsi
    00000082: 	movq	%r13, %rdi
    00000085: 	callq	_Z15TestSearchArrayISt14_List_iteratorItEPFS1_S1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 133
    0000008a: 	movq	0x20(%rsp), %rdi
    0000008f: 	leaq	0x30(%rsp), %rax
    00000094: 	movq	%rax, 0x18(%rsp)
    00000099: 	cmpq	%rax, %rdi
    0000009c: 	je	.Ltmp3247 # Offset: 156
    0000009e: 	movq	0x30(%rsp), %rax
    000000a3: 	leaq	0x1(%rax), %rsi
    000000a7: 	callq	_ZdlPvm@PLT # Offset: 167
.Ltmp3247:
    000000ac: 	cmpq	$0x9, %r12
    000000b0: 	jbe	.Ltmp3248 # Offset: 176
    000000b6: 	movabsq	$-0x3333333333333333, %rdx
    000000c0: 	movq	%r12, %rax
    000000c3: 	mulq	%rdx
    000000c6: 	shrq	$0x3, %rdx
.Ltmp3258:
    000000ca: 	movq	%r13, %rsi
    000000cd: 	xorl	%ecx, %ecx
    000000cf: 	xorl	%r8d, %r8d
    000000d2: 	cmpq	$0x0, %r12
    000000d6: 	jbe	.Ltmp3249 # Offset: 214
    000000d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3252:
    000000e0: 	xorl	%eax, %eax
    000000e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3251:
    000000e8: 	movq	%rsi, %rdi
    000000eb: 	addq	$0x1, %rax
    000000ef: 	movq	(%rsi), %rsi
    000000f2: 	addq	$0x1, %rcx
    000000f6: 	movw	%r8w, 0x10(%rdi)
    000000fb: 	cmpq	%rdx, %rax
    000000fe: 	jae	.Ltmp3250 # Offset: 254
    00000100: 	cmpq	%rcx, %r12
    00000103: 	ja	.Ltmp3251 # Offset: 259
.Ltmp3250:
    00000105: 	addl	$0x1, %r8d
    00000109: 	cmpq	%rcx, %r12
    0000010c: 	ja	.Ltmp3252 # Offset: 268
.Ltmp3249:
    0000010e: 	movq	0x10(%rsp), %rsi
    00000113: 	leaq	DATAat0x3416e(%rip), %rdx
    0000011a: 	movq	%r15, %rdi
    0000011d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 285
    00000122: 	movq	0x8(%rsp), %rcx
    00000127: 	movl	%r14d, %r9d
    0000012a: 	movq	%r15, %r8
    0000012d: 	movq	%r12, %rdx
    00000130: 	movq	%rbp, %rsi
    00000133: 	movq	%r13, %rdi
    00000136: 	callq	_Z15TestSearchArrayISt14_List_iteratorItEPFS1_S1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 310
    0000013b: 	movq	0x20(%rsp), %rdi
    00000140: 	cmpq	0x18(%rsp), %rdi
    00000145: 	je	.Ltmp3253 # Offset: 325
    00000147: 	movq	0x30(%rsp), %rax
    0000014c: 	leaq	0x1(%rax), %rsi
    00000150: 	callq	_ZdlPvm@PLT # Offset: 336
.Ltmp3253:
    00000155: 	xorl	%eax, %eax
    00000157: 	cmpq	%rbp, %r13
    0000015a: 	je	.Ltmp3254 # Offset: 346
    0000015c: 	nopl	(%rax) # Size: 4
.Ltmp3255:
    00000160: 	movq	%rbx, %rdx
    00000163: 	movq	(%rbx), %rbx
    00000166: 	movw	%ax, 0x10(%rdx)
    0000016a: 	addl	$0x1, %eax
    0000016d: 	cmpq	%rbx, %rbp
    00000170: 	jne	.Ltmp3255 # Offset: 368
.Ltmp3254:
    00000172: 	movq	%rbp, %rsi
    00000175: 	movq	%r13, %rdi
    00000178: 	callq	_Z18quicksort2_forwardISt14_List_iteratorItEEvT_S2_ # Offset: 376
    0000017d: 	movq	0x10(%rsp), %rsi
    00000182: 	leaq	DATAat0x34184(%rip), %rdx
    00000189: 	movq	%r15, %rdi
    0000018c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 396
    00000191: 	movq	0x8(%rsp), %rcx
    00000196: 	movl	%r14d, %r9d
    00000199: 	movq	%r15, %r8
    0000019c: 	movq	%r12, %rdx
    0000019f: 	movq	%rbp, %rsi
    000001a2: 	movq	%r13, %rdi
    000001a5: 	callq	_Z15TestSearchArrayISt14_List_iteratorItEPFS1_S1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 421
    000001aa: 	movq	0x20(%rsp), %rdi
    000001af: 	cmpq	0x18(%rsp), %rdi
    000001b4: 	je	.Ltmp3256 # Offset: 436
    000001b6: 	movq	0x30(%rsp), %rax
    000001bb: 	leaq	0x1(%rax), %rsi
    000001bf: 	callq	_ZdlPvm@PLT # Offset: 447
.Ltmp3256:
    000001c4: 	movq	0x48(%rsp), %rax
    000001c9: 	subq	%fs:0x28, %rax
    000001d2: 	jne	.Ltmp3257 # Offset: 466
    000001d4: 	addq	$0x58, %rsp
    000001d8: 	popq	%rbx
    000001d9: 	popq	%rbp
    000001da: 	popq	%r12
    000001dc: 	popq	%r13
    000001de: 	popq	%r14
    000001e0: 	popq	%r15
    000001e2: 	retq # Offset: 482
.Ltmp3248:
    000001e3: 	testq	%r12, %r12
    000001e6: 	je	.Ltmp3249 # Offset: 486
    000001ec: 	movl	$0x1, %edx
    000001f1: 	jmp	.Ltmp3258 # Offset: 497
.Ltmp3257:
    000001f6: 	callq	__stack_chk_fail@PLT # Offset: 502
    000001fb: 	endbr64
.Ltmp3260:
    000001ff: 	movq	%rax, %rbp
    00000202: 	jmp	.Ltmp3259 # Offset: 514
    00000204: 	endbr64
    00000208: 	jmp	.Ltmp3260 # Offset: 520
    0000020a: 	endbr64
    0000020e: 	movq	%rax, %rbp
    00000211: 	movq	0x20(%rsp), %rdi
    00000216: 	leaq	0x30(%rsp), %rax
    0000021b: 	cmpq	%rax, %rdi
    0000021e: 	je	.Ltmp3261 # Offset: 542
.Ltmp3262:
    00000220: 	movq	0x30(%rsp), %rax
    00000225: 	leaq	0x1(%rax), %rsi
    00000229: 	callq	_ZdlPvm@PLT # Offset: 553
.Ltmp3261:
    0000022e: 	movq	%rbp, %rdi
    00000231: 	callq	_Unwind_Resume@PLT # Offset: 561
.Ltmp3259:
    00000236: 	movq	0x20(%rsp), %rdi
    0000023b: 	cmpq	0x18(%rsp), %rdi
    00000240: 	jne	.Ltmp3262 # Offset: 576
    00000242: 	jmp	.Ltmp3261 # Offset: 578
DWARF CFI Instructions:
    <empty>
End of Function "_Z13TestOneSearchISt14_List_iteratorItEPFS1_S1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z23lower_bound_recur_innerISt14_List_iteratorItEtlET_S2_T0_T1_" after disassembly {
  Number      : 380
  State       : disassembled
  Address     : 0x1b880
  Size        : 0xa3
  MaxSize     : 0xb0
  Offset      : 0x1b880
  Section     : .text
  Orc Section : .local.text._Z23lower_bound_recur_innerISt14_List_iteratorItEtlET_S2_T0_T1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0379:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	testq	%rdx, %rdx
    0000000a: 	je	.Ltmp3263 # Offset: 10
    00000010: 	movq	%rdx, %r8
    00000013: 	shrq	$0x3f, %r8
    00000017: 	addq	%rdx, %r8
    0000001a: 	sarq	%r8
    0000001d: 	cmpq	$0x1, %rdx
    00000021: 	jle	.Ltmp3264 # Offset: 33
    00000023: 	leaq	-0x1(%r8), %rcx
    00000027: 	testq	%r8, %r8
    0000002a: 	je	.Ltmp3265 # Offset: 42
    0000002c: 	nopl	(%rax) # Size: 4
.Ltmp3266:
    00000030: 	movq	(%rax), %rax
    00000033: 	subq	$0x1, %rcx
    00000037: 	jae	.Ltmp3266 # Offset: 55
.Ltmp3265:
    00000039: 	movzwl	%si, %r9d
    0000003d: 	cmpw	%si, 0x10(%rax)
    00000041: 	jae	.Ltmp3267 # Offset: 65
    00000043: 	addq	$0x1, %r8
    00000047: 	movq	(%rax), %rdi
    0000004a: 	movl	%r9d, %esi
    0000004d: 	subq	%r8, %rdx
    00000050: 	jmp	.LBB0379 # Offset: 80
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp3264:
    00000058: 	leaq	0x1(%r8), %rcx
    0000005c: 	testq	%r8, %r8
    0000005f: 	je	.Ltmp3265 # Offset: 95
    00000061: 	nopl	(%rax) # Size: 7
.Ltmp3268:
    00000068: 	addq	$0x1, %rcx
    0000006c: 	movq	0x8(%rax), %rax
    00000070: 	cmpq	$0x1, %rcx
    00000074: 	je	.Ltmp3265 # Offset: 116
    00000076: 	addq	$0x1, %rcx
    0000007a: 	movq	0x8(%rax), %rax
    0000007e: 	cmpq	$0x1, %rcx
    00000082: 	jne	.Ltmp3268 # Offset: 130
    00000084: 	jmp	.Ltmp3265 # Offset: 132
    00000086: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3263:
    00000090: 	retq # Offset: 144
    00000091: 	nopl	(%rax) # Size: 7
.Ltmp3267:
    00000098: 	movq	%r8, %rdx
    0000009b: 	movl	%r9d, %esi
    0000009e: 	jmp	.LBB0379 # Offset: 158
DWARF CFI Instructions:
    <empty>
End of Function "_Z23lower_bound_recur_innerISt14_List_iteratorItEtlET_S2_T0_T1_"

Binary Function "_Z17lower_bound_recurISt14_List_iteratorItEtET_S2_S2_T0_" after disassembly {
  Number      : 381
  State       : disassembled
  Address     : 0x1b930
  Size        : 0x283
  MaxSize     : 0x290
  Offset      : 0x1b930
  Section     : .text
  Orc Section : .local.text._Z17lower_bound_recurISt14_List_iteratorItEtET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0380:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	cmpq	%rdi, %rsi
    0000000a: 	je	.Ltmp3269 # Offset: 10
    00000010: 	movl	%edx, %r8d
    00000013: 	xorl	%eax, %eax
    00000015: 	movq	%rdi, %rdx
    00000018: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3270:
    00000020: 	movq	(%rdx), %rdx
    00000023: 	movq	%rax, %rcx
    00000026: 	addq	$0x1, %rax
    0000002a: 	cmpq	%rdx, %rsi
    0000002d: 	jne	.Ltmp3270 # Offset: 45
    0000002f: 	movq	%rax, %r10
    00000032: 	movzwl	%r8w, %r11d
    00000036: 	sarq	%r10
    00000039: 	cmpq	$0x1, %rax
    0000003d: 	je	.Ltmp3271 # Offset: 61
    00000043: 	pushq	%r12
    00000045: 	leaq	-0x1(%r10), %rdx
    00000049: 	testq	%r10, %r10
    0000004c: 	je	.Ltmp3272 # Offset: 76
    00000052: 	movq	%rdi, %rsi
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp3273:
    00000058: 	movq	(%rsi), %rsi
    0000005b: 	subq	$0x1, %rdx
    0000005f: 	jae	.Ltmp3273 # Offset: 95
    00000061: 	cmpw	0x10(%rsi), %r8w
    00000066: 	jbe	.Ltmp3274 # Offset: 102
    0000006c: 	movq	(%rsi), %r9
    0000006f: 	subq	%r10, %rcx
    00000072: 	je	.Ltmp3275 # Offset: 114
.Ltmp3294:
    00000078: 	movq	%rcx, %r10
    0000007b: 	shrq	$0x3f, %r10
    0000007f: 	addq	%rcx, %r10
    00000082: 	sarq	%r10
    00000085: 	cmpq	$0x1, %rcx
    00000089: 	jle	.Ltmp3276 # Offset: 137
    0000008f: 	leaq	-0x1(%r10), %rdx
    00000093: 	movq	%r9, %rax
    00000096: 	testq	%r10, %r10
    00000099: 	je	.Ltmp3277 # Offset: 153
    0000009b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3278:
    000000a0: 	movq	(%rax), %rax
    000000a3: 	subq	$0x1, %rdx
    000000a7: 	jae	.Ltmp3278 # Offset: 167
.Ltmp3277:
    000000a9: 	cmpw	0x10(%rax), %r8w
    000000ae: 	jbe	.Ltmp3279 # Offset: 174
    000000b4: 	movq	(%rax), %r9
    000000b7: 	addq	$0x1, %r10
    000000bb: 	movq	%r9, %rdi
    000000be: 	subq	%r10, %rcx
    000000c1: 	je	.Ltmp3275 # Offset: 193
    000000c3: 	movq	%rcx, %rdx
    000000c6: 	shrq	$0x3f, %rdx
    000000ca: 	addq	%rcx, %rdx
    000000cd: 	sarq	%rdx
    000000d0: 	cmpq	$0x1, %rcx
    000000d4: 	jle	.Ltmp3280 # Offset: 212
    000000da: 	leaq	-0x1(%rdx), %rax
    000000de: 	testq	%rdx, %rdx
    000000e1: 	je	.Ltmp3281 # Offset: 225
    000000e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3282:
    000000e8: 	movq	(%r9), %r9
    000000eb: 	subq	$0x1, %rax
    000000ef: 	jae	.Ltmp3282 # Offset: 239
.Ltmp3281:
    000000f1: 	cmpw	0x10(%r9), %r8w
    000000f6: 	jbe	.Ltmp3283 # Offset: 246
    000000fc: 	addq	$0x1, %rdx
    00000100: 	movq	(%r9), %rdi
    00000103: 	movl	%r11d, %esi
    00000106: 	subq	%rdx, %rcx
    00000109: 	movq	%rcx, %rdx
    0000010c: 	callq	_Z23lower_bound_recur_innerISt14_List_iteratorItEtlET_S2_T0_T1_ # Offset: 268
    00000111: 	movq	%rax, %r9
.Ltmp3275:
    00000114: 	movq	%r9, %rax
    00000117: 	popq	%r12
    00000119: 	retq # Offset: 281
    0000011a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3271:
    00000120: 	cmpw	0x10(%rdi), %r8w
    00000125: 	ja	.Ltmp3284 # Offset: 293
.Ltmp3269:
    0000012b: 	movq	%r9, %rax
    0000012e: 	retq # Offset: 302
    0000012f: 	nop # Size: 1
.Ltmp3274:
    00000130: 	movq	%rax, %r12
    00000133: 	sarq	$0x2, %r12
    00000137: 	cmpq	$0x3, %rax
    0000013b: 	jle	.Ltmp3285 # Offset: 315
    00000141: 	leaq	-0x1(%r12), %rax
    00000146: 	movq	%rdi, %rdx
    00000149: 	testq	%r12, %r12
    0000014c: 	je	.Ltmp3286 # Offset: 332
    0000014e: 	nop # Size: 2
.Ltmp3287:
    00000150: 	movq	(%rdx), %rdx
    00000153: 	subq	$0x1, %rax
    00000157: 	jae	.Ltmp3287 # Offset: 343
.Ltmp3286:
    00000159: 	cmpw	0x10(%rdx), %r8w
    0000015e: 	jbe	.Ltmp3288 # Offset: 350
    00000160: 	movq	(%rdx), %r9
    00000163: 	addq	$0x1, %r12
    00000167: 	movq	%r9, %rdi
    0000016a: 	subq	%r12, %r10
    0000016d: 	je	.Ltmp3275 # Offset: 365
    0000016f: 	movq	%r10, %rdx
    00000172: 	shrq	$0x3f, %rdx
    00000176: 	addq	%r10, %rdx
    00000179: 	sarq	%rdx
    0000017c: 	cmpq	$0x1, %r10
    00000180: 	jle	.Ltmp3289 # Offset: 384
    00000186: 	leaq	-0x1(%rdx), %rax
    0000018a: 	testq	%rdx, %rdx
    0000018d: 	je	.Ltmp3290 # Offset: 397
    0000018f: 	nop # Size: 1
.Ltmp3291:
    00000190: 	movq	(%r9), %r9
    00000193: 	subq	$0x1, %rax
    00000197: 	jae	.Ltmp3291 # Offset: 407
.Ltmp3290:
    00000199: 	cmpw	0x10(%r9), %r8w
    0000019e: 	jbe	.Ltmp3283 # Offset: 414
    000001a0: 	addq	$0x1, %rdx
    000001a4: 	movq	(%r9), %rdi
    000001a7: 	subq	%rdx, %r10
    000001aa: 	movq	%r10, %rdx
    000001ad: 	jmp	.Ltmp3283 # Offset: 429
    000001af: 	nop # Size: 1
.Ltmp3284:
    000001b0: 	movq	(%rdi), %r9
    000001b3: 	jmp	.Ltmp3269 # Offset: 435
.Ltmp3288:
    000001b8: 	movq	%r12, %rdx
.Ltmp3283:
    000001bb: 	movl	%r11d, %esi
    000001be: 	callq	_Z23lower_bound_recur_innerISt14_List_iteratorItEtlET_S2_T0_T1_ # Offset: 446
    000001c3: 	popq	%r12
    000001c5: 	movq	%rax, %r9
    000001c8: 	movq	%r9, %rax
    000001cb: 	retq # Offset: 459
.Ltmp3279:
    000001cc: 	movq	%r9, %rdi
    000001cf: 	movq	%r10, %rdx
    000001d2: 	movl	%r11d, %esi
    000001d5: 	callq	_Z23lower_bound_recur_innerISt14_List_iteratorItEtlET_S2_T0_T1_ # Offset: 469
    000001da: 	movq	%rax, %r9
    000001dd: 	jmp	.Ltmp3275 # Offset: 477
.Ltmp3285:
    000001e2: 	movq	%rdi, %rdx
    000001e5: 	testq	%r12, %r12
    000001e8: 	je	.Ltmp3286 # Offset: 488
.Ltmp3292:
    000001ee: 	jmp	.Ltmp3292 # Offset: 494
.Ltmp3276:
    000001f0: 	leaq	0x1(%r10), %rdx
    000001f4: 	movq	%r9, %rax
    000001f7: 	testq	%r10, %r10
    000001fa: 	je	.Ltmp3277 # Offset: 506
.Ltmp3293:
    00000200: 	addq	$0x1, %rdx
    00000204: 	movq	0x8(%rax), %rax
    00000208: 	cmpq	$0x1, %rdx
    0000020c: 	je	.Ltmp3277 # Offset: 524
    00000212: 	addq	$0x1, %rdx
    00000216: 	movq	0x8(%rax), %rax
    0000021a: 	cmpq	$0x1, %rdx
    0000021e: 	jne	.Ltmp3293 # Offset: 542
    00000220: 	jmp	.Ltmp3277 # Offset: 544
.Ltmp3272:
    00000225: 	cmpw	0x10(%rdi), %r8w
    0000022a: 	jbe	.Ltmp3275 # Offset: 554
    00000230: 	movq	(%rdi), %r9
    00000233: 	jmp	.Ltmp3294 # Offset: 563
.Ltmp3289:
    00000238: 	leaq	0x1(%rdx), %rax
    0000023c: 	testq	%rdx, %rdx
    0000023f: 	je	.Ltmp3290 # Offset: 575
    00000245: 	nopl	(%rax) # Size: 3
.Ltmp3295:
    00000248: 	addq	$0x1, %rax
    0000024c: 	movq	0x8(%r9), %r9
    00000250: 	cmpq	$0x1, %rax
    00000254: 	jne	.Ltmp3295 # Offset: 596
    00000256: 	jmp	.Ltmp3290 # Offset: 598
.Ltmp3280:
    0000025b: 	leaq	0x1(%rdx), %rax
    0000025f: 	testq	%rdx, %rdx
    00000262: 	je	.Ltmp3281 # Offset: 610
    00000268: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3296:
    00000270: 	addq	$0x1, %rax
    00000274: 	movq	0x8(%r9), %r9
    00000278: 	cmpq	$0x1, %rax
    0000027c: 	jne	.Ltmp3296 # Offset: 636
    0000027e: 	jmp	.Ltmp3281 # Offset: 638
DWARF CFI Instructions:
    <empty>
End of Function "_Z17lower_bound_recurISt14_List_iteratorItEtET_S2_S2_T0_"

Binary Function "_Z23upper_bound_recur_innerISt14_List_iteratorItEtlET_S2_T0_T1_" after disassembly {
  Number      : 382
  State       : disassembled
  Address     : 0x1bbc0
  Size        : 0x9a
  MaxSize     : 0xa0
  Offset      : 0x1bbc0
  Section     : .text
  Orc Section : .local.text._Z23upper_bound_recur_innerISt14_List_iteratorItEtlET_S2_T0_T1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0381:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	testq	%rdx, %rdx
    0000000a: 	je	.Ltmp3297 # Offset: 10
    0000000c: 	movq	%rdx, %r8
    0000000f: 	shrq	$0x3f, %r8
    00000013: 	addq	%rdx, %r8
    00000016: 	sarq	%r8
    00000019: 	cmpq	$0x1, %rdx
    0000001d: 	jle	.Ltmp3298 # Offset: 29
    0000001f: 	leaq	-0x1(%r8), %rcx
    00000023: 	testq	%r8, %r8
    00000026: 	je	.Ltmp3299 # Offset: 38
    00000028: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3300:
    00000030: 	movq	(%rax), %rax
    00000033: 	subq	$0x1, %rcx
    00000037: 	jae	.Ltmp3300 # Offset: 55
.Ltmp3299:
    00000039: 	movzwl	%si, %r9d
    0000003d: 	cmpw	%si, 0x10(%rax)
    00000041: 	jbe	.Ltmp3301 # Offset: 65
    00000043: 	movq	%r8, %rdx
    00000046: 	movl	%r9d, %esi
    00000049: 	jmp	.LBB0381 # Offset: 73
    0000004e: 	nop # Size: 2
.Ltmp3298:
    00000050: 	leaq	0x1(%r8), %rcx
    00000054: 	testq	%r8, %r8
    00000057: 	je	.Ltmp3299 # Offset: 87
    00000059: 	nopl	(%rax) # Size: 7
.Ltmp3302:
    00000060: 	addq	$0x1, %rcx
    00000064: 	movq	0x8(%rax), %rax
    00000068: 	cmpq	$0x1, %rcx
    0000006c: 	je	.Ltmp3299 # Offset: 108
    0000006e: 	addq	$0x1, %rcx
    00000072: 	movq	0x8(%rax), %rax
    00000076: 	cmpq	$0x1, %rcx
    0000007a: 	jne	.Ltmp3302 # Offset: 122
    0000007c: 	jmp	.Ltmp3299 # Offset: 124
    0000007e: 	nop # Size: 2
.Ltmp3297:
    00000080: 	retq # Offset: 128
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp3301:
    00000088: 	addq	$0x1, %r8
    0000008c: 	movq	(%rax), %rdi
    0000008f: 	movl	%r9d, %esi
    00000092: 	subq	%r8, %rdx
    00000095: 	jmp	.LBB0381 # Offset: 149
DWARF CFI Instructions:
    <empty>
End of Function "_Z23upper_bound_recur_innerISt14_List_iteratorItEtlET_S2_T0_T1_"

Binary Function "_Z17upper_bound_recurISt14_List_iteratorItEtET_S2_S2_T0_" after disassembly {
  Number      : 383
  State       : disassembled
  Address     : 0x1bc60
  Size        : 0x2bb
  MaxSize     : 0x2c0
  Offset      : 0x1bc60
  Section     : .text
  Orc Section : .local.text._Z17upper_bound_recurISt14_List_iteratorItEtET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0382:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	cmpq	%rdi, %rsi
    0000000a: 	je	.Ltmp3303 # Offset: 10
    00000010: 	movl	%edx, %r10d
    00000013: 	xorl	%eax, %eax
    00000015: 	movq	%rdi, %rdx
    00000018: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3304:
    00000020: 	movq	(%rdx), %rdx
    00000023: 	movq	%rax, %rcx
    00000026: 	addq	$0x1, %rax
    0000002a: 	cmpq	%rdx, %rsi
    0000002d: 	jne	.Ltmp3304 # Offset: 45
    0000002f: 	movq	%rax, %rdx
    00000032: 	movzwl	%r10w, %r11d
    00000036: 	sarq	%rdx
    00000039: 	cmpq	$0x1, %rax
    0000003d: 	je	.Ltmp3305 # Offset: 61
    00000043: 	subq	$0x8, %rsp
    00000047: 	leaq	-0x1(%rdx), %rsi
    0000004b: 	testq	%rdx, %rdx
    0000004e: 	je	.Ltmp3306 # Offset: 78
    00000054: 	movq	%rdi, %r8
    00000057: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3307:
    00000060: 	movq	(%r8), %r8
    00000063: 	subq	$0x1, %rsi
    00000067: 	jae	.Ltmp3307 # Offset: 103
    00000069: 	cmpw	0x10(%r8), %r10w
    0000006e: 	jb	.Ltmp3308 # Offset: 110
    00000074: 	movq	(%r8), %r9
    00000077: 	subq	%rdx, %rcx
    0000007a: 	je	.Ltmp3309 # Offset: 122
.Ltmp3329:
    00000080: 	movq	%rcx, %rsi
    00000083: 	shrq	$0x3f, %rsi
    00000087: 	addq	%rcx, %rsi
    0000008a: 	sarq	%rsi
    0000008d: 	cmpq	$0x1, %rcx
    00000091: 	jle	.Ltmp3310 # Offset: 145
    00000097: 	leaq	-0x1(%rsi), %rdx
    0000009b: 	testq	%rsi, %rsi
    0000009e: 	je	.Ltmp3311 # Offset: 158
    000000a4: 	movq	%r9, %rax
    000000a7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3312:
    000000b0: 	movq	(%rax), %rax
    000000b3: 	subq	$0x1, %rdx
    000000b7: 	jae	.Ltmp3312 # Offset: 183
    000000b9: 	leaq	0x1(%rsi), %rdi
    000000bd: 	cmpw	0x10(%rax), %r10w
    000000c2: 	jb	.Ltmp3313 # Offset: 194
.Ltmp3325:
    000000c8: 	movq	(%rax), %r9
    000000cb: 	movq	%r9, %r8
    000000ce: 	subq	%rdi, %rcx
    000000d1: 	je	.Ltmp3309 # Offset: 209
    000000d7: 	movq	%rcx, %rdx
    000000da: 	shrq	$0x3f, %rdx
    000000de: 	addq	%rcx, %rdx
    000000e1: 	sarq	%rdx
    000000e4: 	cmpq	$0x1, %rcx
    000000e8: 	jle	.Ltmp3314 # Offset: 232
    000000ee: 	leaq	-0x1(%rdx), %rax
    000000f2: 	testq	%rdx, %rdx
    000000f5: 	je	.Ltmp3315 # Offset: 245
    000000f7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3316:
    00000100: 	movq	(%r9), %r9
    00000103: 	subq	$0x1, %rax
    00000107: 	jae	.Ltmp3316 # Offset: 263
.Ltmp3315:
    00000109: 	cmpw	0x10(%r9), %r10w
    0000010e: 	jb	.Ltmp3317 # Offset: 270
    00000110: 	addq	$0x1, %rdx
    00000114: 	movq	(%r9), %r8
    00000117: 	subq	%rdx, %rcx
    0000011a: 	movq	%rcx, %rdx
.Ltmp3317:
    0000011d: 	movl	%r11d, %esi
    00000120: 	movq	%r8, %rdi
    00000123: 	callq	_Z23upper_bound_recur_innerISt14_List_iteratorItEtlET_S2_T0_T1_ # Offset: 291
    00000128: 	movq	%rax, %r9
    0000012b: 	jmp	.Ltmp3309 # Offset: 299
    0000012d: 	nopl	(%rax) # Size: 3
.Ltmp3305:
    00000130: 	cmpw	0x10(%rdi), %r10w
    00000135: 	jae	.Ltmp3318 # Offset: 309
.Ltmp3303:
    00000137: 	movq	%r9, %rax
    0000013a: 	retq # Offset: 314
    0000013b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3308:
    00000140: 	movq	%rax, %r8
    00000143: 	sarq	$0x2, %r8
    00000147: 	cmpq	$0x3, %rax
    0000014b: 	jle	.Ltmp3319 # Offset: 331
    0000014d: 	leaq	-0x1(%r8), %rax
    00000151: 	testq	%r8, %r8
    00000154: 	je	.Ltmp3320 # Offset: 340
    00000156: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3321:
    00000160: 	movq	(%r9), %r9
    00000163: 	subq	$0x1, %rax
    00000167: 	jae	.Ltmp3321 # Offset: 359
.Ltmp3320:
    00000169: 	cmpw	0x10(%r9), %r10w
    0000016e: 	jae	.Ltmp3322 # Offset: 366
    00000170: 	movq	%r8, %rdx
    00000173: 	movl	%r11d, %esi
    00000176: 	callq	_Z23upper_bound_recur_innerISt14_List_iteratorItEtlET_S2_T0_T1_ # Offset: 374
    0000017b: 	movq	%rax, %r9
.Ltmp3309:
    0000017e: 	movq	%r9, %rax
    00000181: 	addq	$0x8, %rsp
    00000185: 	retq # Offset: 389
    00000186: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3318:
    00000190: 	movq	(%rdi), %r9
    00000193: 	jmp	.Ltmp3303 # Offset: 403
.Ltmp3322:
    00000195: 	movq	(%r9), %rdi
    00000198: 	addq	$0x1, %r8
    0000019c: 	movl	%r11d, %esi
    0000019f: 	subq	%r8, %rdx
    000001a2: 	callq	_Z23upper_bound_recur_innerISt14_List_iteratorItEtlET_S2_T0_T1_ # Offset: 418
    000001a7: 	movq	%rax, %r9
    000001aa: 	jmp	.Ltmp3309 # Offset: 426
.Ltmp3319:
    000001ac: 	testq	%r8, %r8
    000001af: 	je	.Ltmp3320 # Offset: 431
.Ltmp3323:
    000001b1: 	jmp	.Ltmp3323 # Offset: 433
    000001b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3310:
    000001b8: 	leaq	0x1(%rsi), %rdi
    000001bc: 	movq	%r9, %rax
    000001bf: 	movq	%rdi, %rdx
    000001c2: 	testq	%rsi, %rsi
    000001c5: 	je	.Ltmp3311 # Offset: 453
    000001cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3324:
    000001d0: 	addq	$0x1, %rdx
    000001d4: 	movq	0x8(%rax), %rax
    000001d8: 	cmpq	$0x1, %rdx
    000001dc: 	jne	.Ltmp3324 # Offset: 476
    000001de: 	cmpw	0x10(%rax), %r10w
    000001e3: 	jae	.Ltmp3325 # Offset: 483
    000001e9: 	testq	%rcx, %rcx
    000001ec: 	leaq	0x3(%rcx), %rdx
    000001f0: 	movq	%r9, %rdi
    000001f3: 	cmovnsq	%rcx, %rdx
    000001f7: 	sarq	$0x2, %rdx
.Ltmp3330:
    000001fb: 	leaq	0x1(%rdx), %rax
    000001ff: 	testq	%rdx, %rdx
    00000202: 	je	.Ltmp3326 # Offset: 514
    00000204: 	nopl	(%rax) # Size: 4
.Ltmp3327:
    00000208: 	addq	$0x1, %rax
    0000020c: 	movq	0x8(%r9), %r9
    00000210: 	cmpq	$0x1, %rax
    00000214: 	jne	.Ltmp3327 # Offset: 532
.Ltmp3326:
    00000216: 	cmpw	0x10(%r9), %r10w
    0000021b: 	jb	.Ltmp3328 # Offset: 539
    0000021d: 	addq	$0x1, %rdx
    00000221: 	movq	(%r9), %rdi
    00000224: 	subq	%rdx, %rsi
    00000227: 	movq	%rsi, %rdx
.Ltmp3328:
    0000022a: 	movl	%r11d, %esi
    0000022d: 	callq	_Z23upper_bound_recur_innerISt14_List_iteratorItEtlET_S2_T0_T1_ # Offset: 557
    00000232: 	movq	%rax, %r9
    00000235: 	jmp	.Ltmp3309 # Offset: 565
.Ltmp3306:
    0000023a: 	cmpw	0x10(%rdi), %r10w
    0000023f: 	jb	.Ltmp3309 # Offset: 575
    00000245: 	movq	(%rdi), %r9
    00000248: 	jmp	.Ltmp3329 # Offset: 584
.Ltmp3313:
    0000024d: 	movq	%rcx, %rdx
    00000250: 	movq	%r9, %rdi
    00000253: 	sarq	$0x2, %rdx
    00000257: 	cmpq	$0x3, %rcx
    0000025b: 	jle	.Ltmp3330 # Offset: 603
    0000025d: 	leaq	-0x1(%rdx), %rax
    00000261: 	testq	%rdx, %rdx
    00000264: 	je	.Ltmp3326 # Offset: 612
    00000266: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3331:
    00000270: 	movq	(%r9), %r9
    00000273: 	subq	$0x1, %rax
    00000277: 	jae	.Ltmp3331 # Offset: 631
    00000279: 	jmp	.Ltmp3326 # Offset: 633
.Ltmp3311:
    0000027b: 	cmpw	0x10(%r9), %r10w
    00000280: 	jb	.Ltmp3309 # Offset: 640
    00000286: 	movq	%r9, %rax
    00000289: 	movl	$0x1, %edi
    0000028e: 	jmp	.Ltmp3325 # Offset: 654
    00000293: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3314:
    00000298: 	leaq	0x1(%rdx), %rax
    0000029c: 	testq	%rdx, %rdx
    0000029f: 	je	.Ltmp3315 # Offset: 671
    000002a5: 	nopl	(%rax) # Size: 3
.Ltmp3332:
    000002a8: 	addq	$0x1, %rax
    000002ac: 	movq	0x8(%r9), %r9
    000002b0: 	cmpq	$0x1, %rax
    000002b4: 	jne	.Ltmp3332 # Offset: 692
    000002b6: 	jmp	.Ltmp3315 # Offset: 694
DWARF CFI Instructions:
    <empty>
End of Function "_Z17upper_bound_recurISt14_List_iteratorItEtET_S2_S2_T0_"

Binary Function "_Z15TestSearchArrayISt14_List_iteratorItEPFbS1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 384
  State       : disassembled
  Address     : 0x1bf20
  Size        : 0x231
  MaxSize     : 0x240
  Offset      : 0x1bf20
  Section     : .text
  Orc Section : .local.text._Z15TestSearchArrayISt14_List_iteratorItEPFbS1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0383:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rcx, %r15
    00000009: 	pushq	%r14
    0000000b: 	movq	%rsi, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %r12
    00000015: 	movl	$0x800, %edi
    0000001a: 	pushq	%rbp
    0000001b: 	pushq	%rbx
    0000001c: 	subq	$0x28, %rsp
    00000020: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000027: 	movq	%rdx, 0x10(%rsp)
    0000002c: 	movq	%r8, 0x18(%rsp)
    00000031: 	movb	%r9b, 0xf(%rsp)
    00000036: 	callq	_Znwm@PLT # Offset: 54
    0000003b: 	xorl	%edx, %edx
    0000003d: 	movq	%rax, %r13
    00000040: 	movw	%dx, (%rax)
    00000043: 	addq	$0x2, %rax
    00000047: 	leaq	0x800(%r13), %r8
    0000004e: 	cmpq	%r8, %rax
    00000051: 	je	.Ltmp3333 # Offset: 81
    00000053: 	leaq	0xa(%r13), %rdi
    00000057: 	movq	$0x0, 0x2(%r13)
    0000005f: 	movq	$0x0, 0x7f8(%r13)
    0000006a: 	andq	$-0x8, %rdi
    0000006e: 	subq	%rdi, %rax
    00000071: 	movq	%rax, %rcx
    00000074: 	xorl	%eax, %eax
    00000076: 	addl	$0x7fe, %ecx
    0000007c: 	shrl	$0x3, %ecx
    0000007f: 	rep		stosq	%rax, %es:(%rdi)
.Ltmp3333:
    00000082: 	movabsq	$0x5851f42d4c957f2d, %r9
    0000008c: 	movq	%r13, %rsi
    0000008f: 	movabsq	$0x14057b7ef767814f, %rdi
    00000099: 	nopl	(%rax) # Size: 7
.Ltmp3336:
    000000a0: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000000a7: 	imulq	%r9, %rax
    000000ab: 	addq	%rdi, %rax
    000000ae: 	movq	%rax, %rdx
    000000b1: 	movq	%rax, %rcx
    000000b4: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000000bb: 	shlq	$0x17, %rcx
    000000bf: 	shrq	$0x14, %rdx
    000000c3: 	xorq	%rcx, %rdx
    000000c6: 	xorq	%rdx, %rax
    000000c9: 	xorl	%edx, %edx
    000000cb: 	divq	0x10(%rsp)
    000000d0: 	movq	%r12, %rax
    000000d3: 	leaq	-0x1(%rdx), %rcx
    000000d7: 	testq	%rdx, %rdx
    000000da: 	jle	.Ltmp3334 # Offset: 218
.Ltmp3335:
    000000e0: 	movq	(%rax), %rax
    000000e3: 	subq	$0x1, %rcx
    000000e7: 	jae	.Ltmp3335 # Offset: 231
.Ltmp3342:
    000000e9: 	movzwl	0x10(%rax), %eax
    000000ed: 	addq	$0x2, %rsi
    000000f1: 	movw	%ax, -0x2(%rsi)
    000000f5: 	cmpq	%r8, %rsi
    000000f8: 	jne	.Ltmp3336 # Offset: 248
.Ltmp3344:
    000000fa: 	callq	clock@PLT # Offset: 250
    000000ff: 	xorl	%ebx, %ebx
    00000101: 	xorl	%ebp, %ebp
    00000103: 	movq	%rax, start_time(%rip)
.Ltmp3340:
    0000010a: 	leaq	0xc8(%rbp), %rax
    00000111: 	movq	%rax, (%rsp)
    00000115: 	nopl	(%rax) # Size: 3
.Ltmp3338:
    00000118: 	movq	%rbp, %rax
    0000011b: 	movq	%r14, %rsi
    0000011e: 	addq	$0x1, %rbp
    00000122: 	movq	%r12, %rdi
    00000125: 	andl	$0x3ff, %eax
    0000012a: 	movzwl	(%r13,%rax,2), %edx
    00000130: 	callq	*%r15 # Offset: 304
    00000133: 	testb	%al, %al
    00000135: 	jne	.Ltmp3337 # Offset: 309
    00000137: 	cmpb	$0x0, 0xf(%rsp)
    0000013c: 	movl	$0x1, %eax
    00000141: 	cmovel	%eax, %ebx
.Ltmp3337:
    00000144: 	cmpq	(%rsp), %rbp
    00000148: 	jne	.Ltmp3338 # Offset: 328
    0000014a: 	callq	clock@PLT # Offset: 330
    0000014f: 	movsd	gMinimumTimeTarget(%rip), %xmm1
    00000157: 	pxor	%xmm0, %xmm0
    0000015b: 	movq	%rax, end_time(%rip)
    00000162: 	subq	start_time(%rip), %rax
    00000169: 	cvtsi2sd	%rax, %xmm0
    0000016e: 	divsd	DATAat0x34410(%rip), %xmm0
    00000176: 	comisd	%xmm0, %xmm1
    0000017a: 	jbe	.Ltmp3339 # Offset: 378
    0000017c: 	cmpq	$0x5f5e0ff, %rbp
    00000183: 	jbe	.Ltmp3340 # Offset: 387
.Ltmp3339:
    00000185: 	movq	0x18(%rsp), %rdx
    0000018a: 	movq	0x10(%rsp), %rdi
    0000018f: 	movq	%rbp, %rsi
    00000192: 	callq	_Z13record_resultdmmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 402
    00000197: 	testb	%bl, %bl
    00000199: 	jne	.Ltmp3341 # Offset: 409
.Ltmp3345:
    0000019b: 	addq	$0x28, %rsp
    0000019f: 	movq	%r13, %rdi
    000001a2: 	movl	$0x800, %esi
    000001a7: 	popq	%rbx
    000001a8: 	popq	%rbp
    000001a9: 	popq	%r12
    000001ab: 	popq	%r13
    000001ad: 	popq	%r14
    000001af: 	popq	%r15
    000001b1: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 433
    000001b6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3334:
    000001c0: 	leaq	0x1(%rdx), %rcx
    000001c4: 	je	.Ltmp3342 # Offset: 452
    000001ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3343:
    000001d0: 	addq	$0x1, %rcx
    000001d4: 	movq	0x8(%rax), %rax
    000001d8: 	cmpq	$0x1, %rcx
    000001dc: 	jne	.Ltmp3343 # Offset: 476
    000001de: 	movzwl	0x10(%rax), %eax
    000001e2: 	addq	$0x2, %rsi
    000001e6: 	movw	%ax, -0x2(%rsi)
    000001ea: 	cmpq	%r8, %rsi
    000001ed: 	jne	.Ltmp3336 # Offset: 493
    000001f3: 	jmp	.Ltmp3344 # Offset: 499
.Ltmp3341:
    000001f8: 	movq	0x18(%rsp), %rax
    000001fd: 	leaq	DATAat0x34137(%rip), %rsi
    00000204: 	movl	$0x1, %edi
    00000209: 	movq	(%rax), %rdx
    0000020c: 	xorl	%eax, %eax
    0000020e: 	callq	__printf_chk@PLT # Offset: 526
    00000213: 	jmp	.Ltmp3345 # Offset: 531
    00000215: 	endbr64
    00000219: 	movq	%rax, %rbp
    0000021c: 	movq	%r13, %rdi
    0000021f: 	movl	$0x800, %esi
    00000224: 	callq	_ZdlPvm@PLT # Offset: 548
    00000229: 	movq	%rbp, %rdi
    0000022c: 	callq	_Unwind_Resume@PLT # Offset: 556
DWARF CFI Instructions:
    <empty>
End of Function "_Z15TestSearchArrayISt14_List_iteratorItEPFbS1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z13TestOneSearchISt14_List_iteratorItEPFbS1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 385
  State       : disassembled
  Address     : 0x1c160
  Size        : 0x244
  MaxSize     : 0x250
  Offset      : 0x1c160
  Section     : .text
  Orc Section : .local.text._Z13TestOneSearchISt14_List_iteratorItEPFbS1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0384:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdi, %r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdx, %r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rsi, %rbp
    00000016: 	pushq	%rbx
    00000017: 	movq	%rdi, %rbx
    0000001a: 	subq	$0x58, %rsp
    0000001e: 	movq	%rcx, 0x8(%rsp)
    00000023: 	movq	%r8, 0x10(%rsp)
    00000028: 	movq	%fs:0x28, %rax
    00000031: 	movq	%rax, 0x48(%rsp)
    00000036: 	xorl	%eax, %eax
    00000038: 	movq	%rdi, %rax
    0000003b: 	cmpq	%rsi, %rdi
    0000003e: 	je	.Ltmp3346 # Offset: 62
.Ltmp3347:
    00000040: 	movq	%rax, %rdx
    00000043: 	movq	(%rax), %rax
    00000046: 	movl	$0x5, %ecx
    0000004b: 	movw	%cx, 0x10(%rdx)
    0000004f: 	cmpq	%rbp, %rax
    00000052: 	jne	.Ltmp3347 # Offset: 82
.Ltmp3346:
    00000054: 	movq	0x10(%rsp), %rsi
    00000059: 	leaq	0x20(%rsp), %r15
    0000005e: 	leaq	DATAat0x34160(%rip), %rdx
    00000065: 	movzbl	%r9b, %r14d
    00000069: 	movq	%r15, %rdi
    0000006c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 108
    00000071: 	movq	0x8(%rsp), %rcx
    00000076: 	movl	%r14d, %r9d
    00000079: 	movq	%r15, %r8
    0000007c: 	movq	%r12, %rdx
    0000007f: 	movq	%rbp, %rsi
    00000082: 	movq	%r13, %rdi
    00000085: 	callq	_Z15TestSearchArrayISt14_List_iteratorItEPFbS1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 133
    0000008a: 	movq	0x20(%rsp), %rdi
    0000008f: 	leaq	0x30(%rsp), %rax
    00000094: 	movq	%rax, 0x18(%rsp)
    00000099: 	cmpq	%rax, %rdi
    0000009c: 	je	.Ltmp3348 # Offset: 156
    0000009e: 	movq	0x30(%rsp), %rax
    000000a3: 	leaq	0x1(%rax), %rsi
    000000a7: 	callq	_ZdlPvm@PLT # Offset: 167
.Ltmp3348:
    000000ac: 	cmpq	$0x9, %r12
    000000b0: 	jbe	.Ltmp3349 # Offset: 176
    000000b6: 	movabsq	$-0x3333333333333333, %rdx
    000000c0: 	movq	%r12, %rax
    000000c3: 	mulq	%rdx
    000000c6: 	shrq	$0x3, %rdx
.Ltmp3359:
    000000ca: 	movq	%r13, %rsi
    000000cd: 	xorl	%ecx, %ecx
    000000cf: 	xorl	%r8d, %r8d
    000000d2: 	cmpq	$0x0, %r12
    000000d6: 	jbe	.Ltmp3350 # Offset: 214
    000000d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3353:
    000000e0: 	xorl	%eax, %eax
    000000e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3352:
    000000e8: 	movq	%rsi, %rdi
    000000eb: 	addq	$0x1, %rax
    000000ef: 	movq	(%rsi), %rsi
    000000f2: 	addq	$0x1, %rcx
    000000f6: 	movw	%r8w, 0x10(%rdi)
    000000fb: 	cmpq	%rdx, %rax
    000000fe: 	jae	.Ltmp3351 # Offset: 254
    00000100: 	cmpq	%rcx, %r12
    00000103: 	ja	.Ltmp3352 # Offset: 259
.Ltmp3351:
    00000105: 	addl	$0x1, %r8d
    00000109: 	cmpq	%rcx, %r12
    0000010c: 	ja	.Ltmp3353 # Offset: 268
.Ltmp3350:
    0000010e: 	movq	0x10(%rsp), %rsi
    00000113: 	leaq	DATAat0x3416e(%rip), %rdx
    0000011a: 	movq	%r15, %rdi
    0000011d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 285
    00000122: 	movq	0x8(%rsp), %rcx
    00000127: 	movl	%r14d, %r9d
    0000012a: 	movq	%r15, %r8
    0000012d: 	movq	%r12, %rdx
    00000130: 	movq	%rbp, %rsi
    00000133: 	movq	%r13, %rdi
    00000136: 	callq	_Z15TestSearchArrayISt14_List_iteratorItEPFbS1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 310
    0000013b: 	movq	0x20(%rsp), %rdi
    00000140: 	cmpq	0x18(%rsp), %rdi
    00000145: 	je	.Ltmp3354 # Offset: 325
    00000147: 	movq	0x30(%rsp), %rax
    0000014c: 	leaq	0x1(%rax), %rsi
    00000150: 	callq	_ZdlPvm@PLT # Offset: 336
.Ltmp3354:
    00000155: 	xorl	%eax, %eax
    00000157: 	cmpq	%rbp, %r13
    0000015a: 	je	.Ltmp3355 # Offset: 346
    0000015c: 	nopl	(%rax) # Size: 4
.Ltmp3356:
    00000160: 	movq	%rbx, %rdx
    00000163: 	movq	(%rbx), %rbx
    00000166: 	movw	%ax, 0x10(%rdx)
    0000016a: 	addl	$0x1, %eax
    0000016d: 	cmpq	%rbx, %rbp
    00000170: 	jne	.Ltmp3356 # Offset: 368
.Ltmp3355:
    00000172: 	movq	%rbp, %rsi
    00000175: 	movq	%r13, %rdi
    00000178: 	callq	_Z18quicksort2_forwardISt14_List_iteratorItEEvT_S2_ # Offset: 376
    0000017d: 	movq	0x10(%rsp), %rsi
    00000182: 	leaq	DATAat0x34184(%rip), %rdx
    00000189: 	movq	%r15, %rdi
    0000018c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 396
    00000191: 	movq	0x8(%rsp), %rcx
    00000196: 	movl	%r14d, %r9d
    00000199: 	movq	%r15, %r8
    0000019c: 	movq	%r12, %rdx
    0000019f: 	movq	%rbp, %rsi
    000001a2: 	movq	%r13, %rdi
    000001a5: 	callq	_Z15TestSearchArrayISt14_List_iteratorItEPFbS1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 421
    000001aa: 	movq	0x20(%rsp), %rdi
    000001af: 	cmpq	0x18(%rsp), %rdi
    000001b4: 	je	.Ltmp3357 # Offset: 436
    000001b6: 	movq	0x30(%rsp), %rax
    000001bb: 	leaq	0x1(%rax), %rsi
    000001bf: 	callq	_ZdlPvm@PLT # Offset: 447
.Ltmp3357:
    000001c4: 	movq	0x48(%rsp), %rax
    000001c9: 	subq	%fs:0x28, %rax
    000001d2: 	jne	.Ltmp3358 # Offset: 466
    000001d4: 	addq	$0x58, %rsp
    000001d8: 	popq	%rbx
    000001d9: 	popq	%rbp
    000001da: 	popq	%r12
    000001dc: 	popq	%r13
    000001de: 	popq	%r14
    000001e0: 	popq	%r15
    000001e2: 	retq # Offset: 482
.Ltmp3349:
    000001e3: 	testq	%r12, %r12
    000001e6: 	je	.Ltmp3350 # Offset: 486
    000001ec: 	movl	$0x1, %edx
    000001f1: 	jmp	.Ltmp3359 # Offset: 497
.Ltmp3358:
    000001f6: 	callq	__stack_chk_fail@PLT # Offset: 502
    000001fb: 	endbr64
.Ltmp3361:
    000001ff: 	movq	%rax, %rbp
    00000202: 	jmp	.Ltmp3360 # Offset: 514
    00000204: 	endbr64
    00000208: 	jmp	.Ltmp3361 # Offset: 520
    0000020a: 	endbr64
    0000020e: 	movq	%rax, %rbp
    00000211: 	movq	0x20(%rsp), %rdi
    00000216: 	leaq	0x30(%rsp), %rax
    0000021b: 	cmpq	%rax, %rdi
    0000021e: 	je	.Ltmp3362 # Offset: 542
.Ltmp3363:
    00000220: 	movq	0x30(%rsp), %rax
    00000225: 	leaq	0x1(%rax), %rsi
    00000229: 	callq	_ZdlPvm@PLT # Offset: 553
.Ltmp3362:
    0000022e: 	movq	%rbp, %rdi
    00000231: 	callq	_Unwind_Resume@PLT # Offset: 561
.Ltmp3360:
    00000236: 	movq	0x20(%rsp), %rdi
    0000023b: 	cmpq	0x18(%rsp), %rdi
    00000240: 	jne	.Ltmp3363 # Offset: 576
    00000242: 	jmp	.Ltmp3362 # Offset: 578
DWARF CFI Instructions:
    <empty>
End of Function "_Z13TestOneSearchISt14_List_iteratorItEPFbS1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z16TestOneContainerISt14_List_iteratorItEEvT_S2_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 386
  State       : disassembled
  Address     : 0x1c3b0
  Size        : 0x4de
  MaxSize     : 0x4e0
  Offset      : 0x1c3b0
  Section     : .text
  Orc Section : .local.text._Z16TestOneContainerISt14_List_iteratorItEEvT_S2_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0385:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdx, %r15
    00000009: 	leaq	DATAat0x3418f(%rip), %rdx
    00000010: 	pushq	%r14
    00000012: 	movq	%rsi, %r14
    00000015: 	movq	%rcx, %rsi
    00000018: 	pushq	%r13
    0000001a: 	movq	%rdi, %r13
    0000001d: 	pushq	%r12
    0000001f: 	movq	%rcx, %r12
    00000022: 	pushq	%rbp
    00000023: 	pushq	%rbx
    00000024: 	subq	$0x38, %rsp
    00000028: 	movq	%fs:0x28, %rax
    00000031: 	movq	%rax, 0x28(%rsp)
    00000036: 	xorl	%eax, %eax
    00000038: 	movq	%rsp, %rbp
    0000003b: 	movq	%rbp, %rdi
    0000003e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 62
    00000043: 	xorl	%r9d, %r9d
    00000046: 	movq	%rbp, %r8
    00000049: 	movq	%r15, %rdx
    0000004c: 	leaq	_Z14std_lowerboundISt14_List_iteratorItEtET_S2_S2_T0_(%rip), %rcx
    00000053: 	movq	%r14, %rsi
    00000056: 	movq	%r13, %rdi
    00000059: 	callq	_Z13TestOneSearchISt14_List_iteratorItEPFS1_S1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 89
    0000005e: 	movq	(%rsp), %rdi
    00000062: 	leaq	0x10(%rsp), %rbx
    00000067: 	cmpq	%rbx, %rdi
    0000006a: 	je	.Ltmp3364 # Offset: 106
    0000006c: 	movq	0x10(%rsp), %rax
    00000071: 	leaq	0x1(%rax), %rsi
    00000075: 	callq	_ZdlPvm@PLT # Offset: 117
.Ltmp3364:
    0000007a: 	leaq	DATAat0x341a1(%rip), %rdx
    00000081: 	movq	%r12, %rsi
    00000084: 	movq	%rbp, %rdi
    00000087: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 135
    0000008c: 	xorl	%r9d, %r9d
    0000008f: 	movq	%rbp, %r8
    00000092: 	movq	%r15, %rdx
    00000095: 	leaq	_Z12lower_bound1ISt14_List_iteratorItEtET_S2_S2_T0_(%rip), %rcx
    0000009c: 	movq	%r14, %rsi
    0000009f: 	movq	%r13, %rdi
    000000a2: 	callq	_Z13TestOneSearchISt14_List_iteratorItEPFS1_S1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 162
    000000a7: 	movq	(%rsp), %rdi
    000000ab: 	cmpq	%rbx, %rdi
    000000ae: 	je	.Ltmp3365 # Offset: 174
    000000b0: 	movq	0x10(%rsp), %rax
    000000b5: 	leaq	0x1(%rax), %rsi
    000000b9: 	callq	_ZdlPvm@PLT # Offset: 185
.Ltmp3365:
    000000be: 	leaq	DATAat0x341af(%rip), %rdx
    000000c5: 	movq	%r12, %rsi
    000000c8: 	movq	%rbp, %rdi
    000000cb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 203
    000000d0: 	xorl	%r9d, %r9d
    000000d3: 	movq	%rbp, %r8
    000000d6: 	movq	%r15, %rdx
    000000d9: 	leaq	_Z12lower_bound2ISt14_List_iteratorItEtET_S2_S2_T0_(%rip), %rcx
    000000e0: 	movq	%r14, %rsi
    000000e3: 	movq	%r13, %rdi
    000000e6: 	callq	_Z13TestOneSearchISt14_List_iteratorItEPFS1_S1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 230
    000000eb: 	movq	(%rsp), %rdi
    000000ef: 	cmpq	%rbx, %rdi
    000000f2: 	je	.Ltmp3366 # Offset: 242
    000000f4: 	movq	0x10(%rsp), %rax
    000000f9: 	leaq	0x1(%rax), %rsi
    000000fd: 	callq	_ZdlPvm@PLT # Offset: 253
.Ltmp3366:
    00000102: 	leaq	DATAat0x341bd(%rip), %rdx
    00000109: 	movq	%r12, %rsi
    0000010c: 	movq	%rbp, %rdi
    0000010f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 271
    00000114: 	xorl	%r9d, %r9d
    00000117: 	movq	%rbp, %r8
    0000011a: 	movq	%r15, %rdx
    0000011d: 	leaq	_Z17lower_bound_recurISt14_List_iteratorItEtET_S2_S2_T0_(%rip), %rcx
    00000124: 	movq	%r14, %rsi
    00000127: 	movq	%r13, %rdi
    0000012a: 	callq	_Z13TestOneSearchISt14_List_iteratorItEPFS1_S1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 298
    0000012f: 	movq	(%rsp), %rdi
    00000133: 	cmpq	%rbx, %rdi
    00000136: 	je	.Ltmp3367 # Offset: 310
    00000138: 	movq	0x10(%rsp), %rax
    0000013d: 	leaq	0x1(%rax), %rsi
    00000141: 	callq	_ZdlPvm@PLT # Offset: 321
.Ltmp3367:
    00000146: 	leaq	DATAat0x341d4(%rip), %rdx
    0000014d: 	movq	%r12, %rsi
    00000150: 	movq	%rbp, %rdi
    00000153: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 339
    00000158: 	movq	%rbp, %r8
    0000015b: 	movq	%r15, %rdx
    0000015e: 	movq	%r14, %rsi
    00000161: 	movl	$0x1, %r9d
    00000167: 	leaq	_Z14std_upperboundISt14_List_iteratorItEtET_S2_S2_T0_(%rip), %rcx
    0000016e: 	movq	%r13, %rdi
    00000171: 	callq	_Z13TestOneSearchISt14_List_iteratorItEPFS1_S1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 369
    00000176: 	movq	(%rsp), %rdi
    0000017a: 	cmpq	%rbx, %rdi
    0000017d: 	je	.Ltmp3368 # Offset: 381
    0000017f: 	movq	0x10(%rsp), %rax
    00000184: 	leaq	0x1(%rax), %rsi
    00000188: 	callq	_ZdlPvm@PLT # Offset: 392
.Ltmp3368:
    0000018d: 	leaq	DATAat0x341e6(%rip), %rdx
    00000194: 	movq	%r12, %rsi
    00000197: 	movq	%rbp, %rdi
    0000019a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 410
    0000019f: 	movq	%rbp, %r8
    000001a2: 	movq	%r15, %rdx
    000001a5: 	movq	%r14, %rsi
    000001a8: 	movl	$0x1, %r9d
    000001ae: 	leaq	_Z12upper_bound1ISt14_List_iteratorItEtET_S2_S2_T0_(%rip), %rcx
    000001b5: 	movq	%r13, %rdi
    000001b8: 	callq	_Z13TestOneSearchISt14_List_iteratorItEPFS1_S1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 440
    000001bd: 	movq	(%rsp), %rdi
    000001c1: 	cmpq	%rbx, %rdi
    000001c4: 	je	.Ltmp3369 # Offset: 452
    000001c6: 	movq	0x10(%rsp), %rax
    000001cb: 	leaq	0x1(%rax), %rsi
    000001cf: 	callq	_ZdlPvm@PLT # Offset: 463
.Ltmp3369:
    000001d4: 	leaq	DATAat0x341f4(%rip), %rdx
    000001db: 	movq	%r12, %rsi
    000001de: 	movq	%rbp, %rdi
    000001e1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 481
    000001e6: 	movq	%rbp, %r8
    000001e9: 	movq	%r15, %rdx
    000001ec: 	movq	%r14, %rsi
    000001ef: 	movl	$0x1, %r9d
    000001f5: 	leaq	_Z12upper_bound2ISt14_List_iteratorItEtET_S2_S2_T0_(%rip), %rcx
    000001fc: 	movq	%r13, %rdi
    000001ff: 	callq	_Z13TestOneSearchISt14_List_iteratorItEPFS1_S1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 511
    00000204: 	movq	(%rsp), %rdi
    00000208: 	cmpq	%rbx, %rdi
    0000020b: 	je	.Ltmp3370 # Offset: 523
    0000020d: 	movq	0x10(%rsp), %rax
    00000212: 	leaq	0x1(%rax), %rsi
    00000216: 	callq	_ZdlPvm@PLT # Offset: 534
.Ltmp3370:
    0000021b: 	leaq	DATAat0x34202(%rip), %rdx
    00000222: 	movq	%r12, %rsi
    00000225: 	movq	%rbp, %rdi
    00000228: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 552
    0000022d: 	movq	%rbp, %r8
    00000230: 	movq	%r15, %rdx
    00000233: 	movq	%r14, %rsi
    00000236: 	movl	$0x1, %r9d
    0000023c: 	leaq	_Z17upper_bound_recurISt14_List_iteratorItEtET_S2_S2_T0_(%rip), %rcx
    00000243: 	movq	%r13, %rdi
    00000246: 	callq	_Z13TestOneSearchISt14_List_iteratorItEPFS1_S1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 582
    0000024b: 	movq	(%rsp), %rdi
    0000024f: 	cmpq	%rbx, %rdi
    00000252: 	je	.Ltmp3371 # Offset: 594
    00000254: 	movq	0x10(%rsp), %rax
    00000259: 	leaq	0x1(%rax), %rsi
    0000025d: 	callq	_ZdlPvm@PLT # Offset: 605
.Ltmp3371:
    00000262: 	leaq	DATAat0x34219(%rip), %rdx
    00000269: 	movq	%r12, %rsi
    0000026c: 	movq	%rbp, %rdi
    0000026f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 623
    00000274: 	xorl	%r9d, %r9d
    00000277: 	movq	%rbp, %r8
    0000027a: 	movq	%r15, %rdx
    0000027d: 	leaq	_Z16std_binarysearchISt14_List_iteratorItEtEbT_S2_T0_(%rip), %rcx
    00000284: 	movq	%r14, %rsi
    00000287: 	movq	%r13, %rdi
    0000028a: 	callq	_Z13TestOneSearchISt14_List_iteratorItEPFbS1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 650
    0000028f: 	movq	(%rsp), %rdi
    00000293: 	cmpq	%rbx, %rdi
    00000296: 	je	.Ltmp3372 # Offset: 662
    00000298: 	movq	0x10(%rsp), %rax
    0000029d: 	leaq	0x1(%rax), %rsi
    000002a1: 	callq	_ZdlPvm@PLT # Offset: 673
.Ltmp3372:
    000002a6: 	leaq	DATAat0x3422d(%rip), %rdx
    000002ad: 	movq	%r12, %rsi
    000002b0: 	movq	%rbp, %rdi
    000002b3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 691
    000002b8: 	xorl	%r9d, %r9d
    000002bb: 	movq	%rbp, %r8
    000002be: 	movq	%r15, %rdx
    000002c1: 	leaq	_Z13binarysearch1ISt14_List_iteratorItEtEbT_S2_T0_(%rip), %rcx
    000002c8: 	movq	%r14, %rsi
    000002cb: 	movq	%r13, %rdi
    000002ce: 	callq	_Z13TestOneSearchISt14_List_iteratorItEPFbS1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 718
    000002d3: 	movq	(%rsp), %rdi
    000002d7: 	cmpq	%rbx, %rdi
    000002da: 	je	.Ltmp3373 # Offset: 730
    000002dc: 	movq	0x10(%rsp), %rax
    000002e1: 	leaq	0x1(%rax), %rsi
    000002e5: 	callq	_ZdlPvm@PLT # Offset: 741
.Ltmp3373:
    000002ea: 	leaq	DATAat0x3423d(%rip), %rdx
    000002f1: 	movq	%r12, %rsi
    000002f4: 	movq	%rbp, %rdi
    000002f7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 759
    000002fc: 	xorl	%r9d, %r9d
    000002ff: 	movq	%rbp, %r8
    00000302: 	movq	%r15, %rdx
    00000305: 	leaq	_Z13binarysearch2ISt14_List_iteratorItEtEbT_S2_T0_(%rip), %rcx
    0000030c: 	movq	%r14, %rsi
    0000030f: 	movq	%r13, %rdi
    00000312: 	callq	_Z13TestOneSearchISt14_List_iteratorItEPFbS1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 786
    00000317: 	movq	(%rsp), %rdi
    0000031b: 	cmpq	%rbx, %rdi
    0000031e: 	je	.Ltmp3374 # Offset: 798
    00000320: 	movq	0x10(%rsp), %rax
    00000325: 	leaq	0x1(%rax), %rsi
    00000329: 	callq	_ZdlPvm@PLT # Offset: 809
.Ltmp3374:
    0000032e: 	leaq	DATAat0x3424d(%rip), %rdx
    00000335: 	movq	%r12, %rsi
    00000338: 	movq	%rbp, %rdi
    0000033b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 827
    00000340: 	xorl	%r9d, %r9d
    00000343: 	movq	%rbp, %r8
    00000346: 	movq	%r15, %rdx
    00000349: 	leaq	_Z13binarysearch3ISt14_List_iteratorItEtEbT_S2_T0_(%rip), %rcx
    00000350: 	movq	%r14, %rsi
    00000353: 	movq	%r13, %rdi
    00000356: 	callq	_Z13TestOneSearchISt14_List_iteratorItEPFbS1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 854
    0000035b: 	movq	(%rsp), %rdi
    0000035f: 	cmpq	%rbx, %rdi
    00000362: 	je	.Ltmp3375 # Offset: 866
    00000364: 	movq	0x10(%rsp), %rax
    00000369: 	leaq	0x1(%rax), %rsi
    0000036d: 	callq	_ZdlPvm@PLT # Offset: 877
.Ltmp3375:
    00000372: 	leaq	DATAat0x3425d(%rip), %rdx
    00000379: 	movq	%r12, %rsi
    0000037c: 	movq	%rbp, %rdi
    0000037f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 895
    00000384: 	xorl	%r9d, %r9d
    00000387: 	movq	%rbp, %r8
    0000038a: 	movq	%r15, %rdx
    0000038d: 	leaq	_Z13binarysearch4ISt14_List_iteratorItEtEbT_S2_T0_(%rip), %rcx
    00000394: 	movq	%r14, %rsi
    00000397: 	movq	%r13, %rdi
    0000039a: 	callq	_Z13TestOneSearchISt14_List_iteratorItEPFbS1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 922
    0000039f: 	movq	(%rsp), %rdi
    000003a3: 	cmpq	%rbx, %rdi
    000003a6: 	je	.Ltmp3376 # Offset: 934
    000003a8: 	movq	0x10(%rsp), %rax
    000003ad: 	leaq	0x1(%rax), %rsi
    000003b1: 	callq	_ZdlPvm@PLT # Offset: 945
.Ltmp3376:
    000003b6: 	leaq	DATAat0x3426d(%rip), %rdx
    000003bd: 	movq	%r12, %rsi
    000003c0: 	movq	%rbp, %rdi
    000003c3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 963
    000003c8: 	xorl	%r9d, %r9d
    000003cb: 	movq	%rbp, %r8
    000003ce: 	movq	%r15, %rdx
    000003d1: 	leaq	_Z18binarysearch_recurISt14_List_iteratorItEtEbT_S2_T0_(%rip), %rcx
    000003d8: 	movq	%r14, %rsi
    000003db: 	movq	%r13, %rdi
    000003de: 	callq	_Z13TestOneSearchISt14_List_iteratorItEPFbS1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 990
    000003e3: 	movq	(%rsp), %rdi
    000003e7: 	cmpq	%rbx, %rdi
    000003ea: 	je	.Ltmp3377 # Offset: 1002
    000003ec: 	movq	0x10(%rsp), %rax
    000003f1: 	leaq	0x1(%rax), %rsi
    000003f5: 	callq	_ZdlPvm@PLT # Offset: 1013
.Ltmp3377:
    000003fa: 	movq	%rbp, %rdi
    000003fd: 	leaq	DATAat0x34286(%rip), %rdx
    00000404: 	movq	%r12, %rsi
    00000407: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1031
    0000040c: 	movq	%rbp, %rdi
    0000040f: 	callq	_Z9summarizeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1039
    00000414: 	movq	(%rsp), %rdi
    00000418: 	cmpq	%rbx, %rdi
    0000041b: 	je	.Ltmp3378 # Offset: 1051
    0000041d: 	movq	0x10(%rsp), %rax
    00000422: 	leaq	0x1(%rax), %rsi
    00000426: 	callq	_ZdlPvm@PLT # Offset: 1062
.Ltmp3378:
    0000042b: 	movq	0x28(%rsp), %rax
    00000430: 	subq	%fs:0x28, %rax
    00000439: 	jne	.Ltmp3379 # Offset: 1081
    0000043b: 	addq	$0x38, %rsp
    0000043f: 	popq	%rbx
    00000440: 	popq	%rbp
    00000441: 	popq	%r12
    00000443: 	popq	%r13
    00000445: 	popq	%r14
    00000447: 	popq	%r15
    00000449: 	retq # Offset: 1097
.Ltmp3379:
    0000044a: 	callq	__stack_chk_fail@PLT # Offset: 1098
    0000044f: 	endbr64
.Ltmp3381:
    00000453: 	movq	%rax, %rbp
    00000456: 	jmp	.Ltmp3380 # Offset: 1110
    00000458: 	endbr64
    0000045c: 	jmp	.Ltmp3381 # Offset: 1116
    0000045e: 	endbr64
    00000462: 	jmp	.Ltmp3381 # Offset: 1122
    00000464: 	endbr64
    00000468: 	jmp	.Ltmp3381 # Offset: 1128
    0000046a: 	endbr64
    0000046e: 	jmp	.Ltmp3381 # Offset: 1134
    00000470: 	endbr64
    00000474: 	jmp	.Ltmp3381 # Offset: 1140
    00000476: 	endbr64
    0000047a: 	jmp	.Ltmp3381 # Offset: 1146
.Ltmp3380:
    0000047c: 	movq	(%rsp), %rdi
    00000480: 	cmpq	%rbx, %rdi
    00000483: 	je	.Ltmp3382 # Offset: 1155
.Ltmp3384:
    00000485: 	movq	0x10(%rsp), %rax
    0000048a: 	leaq	0x1(%rax), %rsi
    0000048e: 	callq	_ZdlPvm@PLT # Offset: 1166
.Ltmp3382:
    00000493: 	movq	%rbp, %rdi
    00000496: 	callq	_Unwind_Resume@PLT # Offset: 1174
    0000049b: 	endbr64
    0000049f: 	jmp	.Ltmp3381 # Offset: 1183
    000004a1: 	endbr64
    000004a5: 	jmp	.Ltmp3381 # Offset: 1189
    000004a7: 	endbr64
    000004ab: 	jmp	.Ltmp3381 # Offset: 1195
    000004ad: 	endbr64
    000004b1: 	jmp	.Ltmp3381 # Offset: 1201
    000004b3: 	endbr64
    000004b7: 	jmp	.Ltmp3381 # Offset: 1207
    000004b9: 	endbr64
    000004bd: 	movq	%rax, %rbp
    000004c0: 	jmp	.Ltmp3383 # Offset: 1216
    000004c2: 	endbr64
    000004c6: 	jmp	.Ltmp3381 # Offset: 1222
    000004c8: 	endbr64
    000004cc: 	jmp	.Ltmp3381 # Offset: 1228
.Ltmp3383:
    000004ce: 	movq	(%rsp), %rdi
    000004d2: 	leaq	0x10(%rsp), %rax
    000004d7: 	cmpq	%rax, %rdi
    000004da: 	jne	.Ltmp3384 # Offset: 1242
    000004dc: 	jmp	.Ltmp3382 # Offset: 1244
DWARF CFI Instructions:
    <empty>
End of Function "_Z16TestOneContainerISt14_List_iteratorItEEvT_S2_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z24binarysearch_recur_innerISt14_List_iteratorItEtlEbT_T0_T1_" after disassembly {
  Number      : 387
  State       : disassembled
  Address     : 0x1c890
  Size        : 0xb2
  MaxSize     : 0xc0
  Offset      : 0x1c890
  Section     : .text
  Orc Section : .local.text._Z24binarysearch_recur_innerISt14_List_iteratorItEtlEbT_T0_T1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0386:
    00000000: 	endbr64
    00000004: 	testq	%rdx, %rdx
    00000007: 	je	.Ltmp3385 # Offset: 7
    00000009: 	movq	%rdx, %r8
    0000000c: 	movq	%rdi, %rax
    0000000f: 	shrq	$0x3f, %r8
    00000013: 	addq	%rdx, %r8
    00000016: 	sarq	%r8
    00000019: 	cmpq	$0x1, %rdx
    0000001d: 	jle	.Ltmp3386 # Offset: 29
    0000001f: 	leaq	-0x1(%r8), %rcx
    00000023: 	testq	%r8, %r8
    00000026: 	je	.Ltmp3387 # Offset: 38
    00000028: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3388:
    00000030: 	movq	(%rax), %rax
    00000033: 	subq	$0x1, %rcx
    00000037: 	jae	.Ltmp3388 # Offset: 55
.Ltmp3387:
    00000039: 	cmpw	%si, 0x10(%rax)
    0000003d: 	jb	.Ltmp3389 # Offset: 61
    0000003f: 	movl	$0x1, %eax
    00000044: 	ja	.Ltmp3390 # Offset: 68
    00000046: 	retq # Offset: 70
    00000047: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3385:
    00000050: 	xorl	%eax, %eax
    00000052: 	retq # Offset: 82
    00000053: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3386:
    00000058: 	leaq	0x1(%r8), %rcx
    0000005c: 	testq	%r8, %r8
    0000005f: 	je	.Ltmp3387 # Offset: 95
    00000061: 	nopl	(%rax) # Size: 7
.Ltmp3391:
    00000068: 	addq	$0x1, %rcx
    0000006c: 	movq	0x8(%rax), %rax
    00000070: 	cmpq	$0x1, %rcx
    00000074: 	je	.Ltmp3387 # Offset: 116
    00000076: 	addq	$0x1, %rcx
    0000007a: 	movq	0x8(%rax), %rax
    0000007e: 	cmpq	$0x1, %rcx
    00000082: 	jne	.Ltmp3391 # Offset: 130
    00000084: 	jmp	.Ltmp3387 # Offset: 132
    00000086: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3390:
    00000090: 	movzwl	%si, %esi
    00000093: 	movq	%r8, %rdx
    00000096: 	jmp	.LBB0386 # Offset: 150
    0000009b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3389:
    000000a0: 	addq	$0x1, %r8
    000000a4: 	movq	(%rax), %rdi
    000000a7: 	movzwl	%si, %esi
    000000aa: 	subq	%r8, %rdx
    000000ad: 	jmp	.LBB0386 # Offset: 173
DWARF CFI Instructions:
    <empty>
End of Function "_Z24binarysearch_recur_innerISt14_List_iteratorItEtlEbT_T0_T1_"

Binary Function "_Z18binarysearch_recurISt14_List_iteratorItEtEbT_S2_T0_" after disassembly {
  Number      : 388
  State       : disassembled
  Address     : 0x1c950
  Size        : 0x1bd
  MaxSize     : 0x1c0
  Offset      : 0x1c950
  Section     : .text
  Orc Section : .local.text._Z18binarysearch_recurISt14_List_iteratorItEtEbT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0387:
    00000000: 	endbr64
    00000004: 	cmpq	%rdi, %rsi
    00000007: 	je	.Ltmp3392 # Offset: 7
    0000000d: 	pushq	%rbp
    0000000e: 	movl	%edx, %r8d
    00000011: 	movq	%rdi, %r9
    00000014: 	movq	%rdi, %rdx
    00000017: 	xorl	%eax, %eax
    00000019: 	nopl	(%rax) # Size: 7
.Ltmp3393:
    00000020: 	movq	(%rdx), %rdx
    00000023: 	movq	%rax, %rcx
    00000026: 	addq	$0x1, %rax
    0000002a: 	cmpq	%rdx, %rsi
    0000002d: 	jne	.Ltmp3393 # Offset: 45
    0000002f: 	movq	%rax, %r10
    00000032: 	sarq	%r10
    00000035: 	cmpq	$0x1, %rax
    00000039: 	je	.Ltmp3394 # Offset: 57
    0000003f: 	leaq	-0x1(%r10), %rdx
    00000043: 	testq	%r10, %r10
    00000046: 	je	.Ltmp3395 # Offset: 70
    0000004c: 	movq	%rdi, %rsi
    0000004f: 	nop # Size: 1
.Ltmp3396:
    00000050: 	movq	(%rsi), %rsi
    00000053: 	subq	$0x1, %rdx
    00000057: 	jae	.Ltmp3396 # Offset: 87
    00000059: 	movzwl	%r8w, %ebp
    0000005d: 	cmpw	0x10(%rsi), %r8w
    00000062: 	jbe	.Ltmp3397 # Offset: 98
    00000068: 	movq	(%rsi), %rax
    0000006b: 	movq	%rax, %rdi
    0000006e: 	subq	%r10, %rcx
    00000071: 	je	.Ltmp3398 # Offset: 113
.Ltmp3412:
    00000077: 	movq	%rcx, %r9
    0000007a: 	shrq	$0x3f, %r9
    0000007e: 	addq	%rcx, %r9
    00000081: 	sarq	%r9
    00000084: 	cmpq	$0x1, %rcx
    00000088: 	jle	.Ltmp3399 # Offset: 136
    0000008e: 	leaq	-0x1(%r9), %rdx
    00000092: 	testq	%r9, %r9
    00000095: 	je	.Ltmp3400 # Offset: 149
    00000097: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3401:
    000000a0: 	movq	(%rax), %rax
    000000a3: 	subq	$0x1, %rdx
    000000a7: 	jae	.Ltmp3401 # Offset: 167
.Ltmp3400:
    000000a9: 	cmpw	0x10(%rax), %r8w
    000000ae: 	ja	.Ltmp3402 # Offset: 174
    000000b4: 	movl	$0x1, %r11d
    000000ba: 	jae	.Ltmp3403 # Offset: 186
    000000bc: 	movl	%ebp, %esi
    000000be: 	movq	%r9, %rdx
    000000c1: 	popq	%rbp
    000000c2: 	jmp	_Z24binarysearch_recur_innerISt14_List_iteratorItEtlEbT_T0_T1_ # TAILCALL  # Offset: 194
    000000c7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3394:
    000000d0: 	movzwl	%r8w, %ebp
    000000d4: 	cmpw	0x10(%rdi), %r8w
    000000d9: 	ja	.Ltmp3398 # Offset: 217
    000000db: 	movl	$0x1, %r11d
    000000e1: 	jb	.Ltmp3404 # Offset: 225
.Ltmp3403:
    000000e3: 	movl	%r11d, %eax
    000000e6: 	popq	%rbp
    000000e7: 	retq # Offset: 231
    000000e8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3404:
    000000f0: 	xorl	%r11d, %r11d
    000000f3: 	testq	%r10, %r10
    000000f6: 	je	.Ltmp3403 # Offset: 246
.Ltmp3413:
    000000f8: 	movq	%rax, %rdx
    000000fb: 	sarq	$0x2, %rdx
    000000ff: 	cmpq	$0x3, %rax
    00000103: 	jle	.Ltmp3405 # Offset: 259
    00000105: 	leaq	-0x1(%rdx), %rax
    00000109: 	testq	%rdx, %rdx
    0000010c: 	je	.Ltmp3406 # Offset: 268
    0000010e: 	nop # Size: 2
.Ltmp3407:
    00000110: 	movq	(%r9), %r9
    00000113: 	subq	$0x1, %rax
    00000117: 	jae	.Ltmp3407 # Offset: 279
.Ltmp3406:
    00000119: 	cmpw	0x10(%r9), %r8w
    0000011e: 	ja	.Ltmp3408 # Offset: 286
    00000120: 	movl	$0x1, %r11d
    00000126: 	jae	.Ltmp3403 # Offset: 294
    00000128: 	movl	%ebp, %esi
    0000012a: 	popq	%rbp
    0000012b: 	jmp	_Z24binarysearch_recur_innerISt14_List_iteratorItEtlEbT_T0_T1_ # TAILCALL  # Offset: 299
.Ltmp3392:
    00000130: 	xorl	%eax, %eax
    00000132: 	retq # Offset: 306
.Ltmp3398:
    00000133: 	xorl	%r11d, %r11d
    00000136: 	jmp	.Ltmp3403 # Offset: 310
.Ltmp3405:
    00000138: 	testq	%rdx, %rdx
    0000013b: 	je	.Ltmp3406 # Offset: 315
.Ltmp3409:
    0000013d: 	jmp	.Ltmp3409 # Offset: 317
    0000013f: 	nop # Size: 1
.Ltmp3399:
    00000140: 	leaq	0x1(%r9), %rdx
    00000144: 	testq	%r9, %r9
    00000147: 	je	.Ltmp3400 # Offset: 327
    0000014d: 	nopl	(%rax) # Size: 3
.Ltmp3410:
    00000150: 	addq	$0x1, %rdx
    00000154: 	movq	0x8(%rax), %rax
    00000158: 	cmpq	$0x1, %rdx
    0000015c: 	jne	.Ltmp3410 # Offset: 348
    0000015e: 	jmp	.Ltmp3400 # Offset: 350
.Ltmp3395:
    00000163: 	movzwl	%r8w, %ebp
    00000167: 	cmpw	0x10(%rdi), %r8w
    0000016c: 	jbe	.Ltmp3411 # Offset: 364
    0000016e: 	movq	(%rdi), %rax
    00000171: 	movq	%rax, %rdi
    00000174: 	jmp	.Ltmp3412 # Offset: 372
.Ltmp3397:
    00000179: 	movl	$0x1, %r11d
    0000017f: 	jae	.Ltmp3403 # Offset: 383
    00000185: 	jmp	.Ltmp3413 # Offset: 389
.Ltmp3408:
    0000018a: 	addq	$0x1, %rdx
    0000018e: 	movq	(%r9), %rdi
    00000191: 	movl	%ebp, %esi
    00000193: 	popq	%rbp
    00000194: 	subq	%rdx, %r10
    00000197: 	movq	%r10, %rdx
    0000019a: 	jmp	_Z24binarysearch_recur_innerISt14_List_iteratorItEtlEbT_T0_T1_ # TAILCALL  # Offset: 410
.Ltmp3402:
    0000019f: 	addq	$0x1, %r9
    000001a3: 	movq	(%rax), %rdi
    000001a6: 	movl	%ebp, %esi
    000001a8: 	popq	%rbp
    000001a9: 	subq	%r9, %rcx
    000001ac: 	movq	%rcx, %rdx
    000001af: 	jmp	_Z24binarysearch_recur_innerISt14_List_iteratorItEtlEbT_T0_T1_ # TAILCALL  # Offset: 431
.Ltmp3411:
    000001b4: 	setae	%r11b
    000001b8: 	jmp	.Ltmp3403 # Offset: 440
DWARF CFI Instructions:
    <empty>
End of Function "_Z18binarysearch_recurISt14_List_iteratorItEtEbT_S2_T0_"

Binary Function "_Z18quicksort2_forwardISt18_Fwd_list_iteratorItEEvT_S2_" after disassembly {
  Number      : 389
  State       : disassembled
  Address     : 0x1cb10
  Size        : 0x11a
  MaxSize     : 0x120
  Offset      : 0x1cb10
  Section     : .text
  Orc Section : .local.text._Z18quicksort2_forwardISt18_Fwd_list_iteratorItEEvT_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0388:
    00000000: 	endbr64
    00000004: 	cmpq	%rdi, %rsi
    00000007: 	je	.Ltmp3414 # Offset: 7
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rsi, %rbp
    00000016: 	pushq	%rbx
    00000017: 	movq	(%r12), %rbx
    0000001b: 	cmpq	%rbp, %rbx
    0000001e: 	je	.Ltmp3415 # Offset: 30
.Ltmp3423:
    00000024: 	movq	(%rbx), %rdx
    00000027: 	movzwl	0x8(%rbx), %edi
    0000002b: 	movzwl	0x8(%r12), %eax
    00000031: 	cmpq	%rbp, %rdx
    00000034: 	je	.Ltmp3416 # Offset: 52
    0000003a: 	cmpw	%di, %ax
    0000003d: 	jbe	.Ltmp3417 # Offset: 61
    0000003f: 	movw	%di, 0x8(%r12)
    00000045: 	movl	%eax, %edi
    00000047: 	movw	%ax, 0x8(%rbx)
.Ltmp3417:
    0000004b: 	movzwl	0x8(%rdx), %eax
    0000004f: 	cmpw	%di, %ax
    00000052: 	jae	.Ltmp3418 # Offset: 82
    00000054: 	movw	%ax, 0x8(%rbx)
    00000058: 	movw	%di, 0x8(%rdx)
    0000005c: 	movzwl	0x8(%rbx), %edi
    00000060: 	movzwl	0x8(%r12), %eax
    00000066: 	cmpw	%ax, %di
    00000069: 	jae	.Ltmp3418 # Offset: 105
    0000006b: 	movw	%ax, 0x8(%rbx)
    0000006f: 	movw	%di, 0x8(%r12)
    00000075: 	movzwl	0x8(%rbx), %edi
.Ltmp3418:
    00000079: 	movq	(%rdx), %rax
    0000007c: 	cmpq	%rbp, %rax
    0000007f: 	je	.Ltmp3415 # Offset: 127
    00000081: 	movl	$0x2, %esi
    00000086: 	movl	$0x1, %r8d
    0000008c: 	jmp	.Ltmp3419 # Offset: 140
    0000008e: 	nop # Size: 2
.Ltmp3421:
    00000090: 	movq	%rax, %rdx
    00000093: 	movq	(%rax), %rax
.Ltmp3419:
    00000096: 	movzwl	0x8(%rdx), %ecx
    0000009a: 	cmpw	%di, %cx
    0000009d: 	jae	.Ltmp3420 # Offset: 157
    0000009f: 	movzwl	0x8(%rbx), %r9d
    000000a4: 	addq	$0x1, %r8
    000000a8: 	movw	%r9w, 0x8(%rdx)
    000000ad: 	movw	%cx, 0x8(%rbx)
    000000b1: 	movq	(%rbx), %rbx
.Ltmp3420:
    000000b4: 	addq	$0x1, %rsi
    000000b8: 	cmpq	%rax, %rbp
    000000bb: 	jne	.Ltmp3421 # Offset: 187
    000000bd: 	subq	%r8, %rsi
    000000c0: 	cmpq	%rsi, %r8
    000000c3: 	jbe	.Ltmp3422 # Offset: 195
    000000c5: 	movq	%rbp, %rsi
    000000c8: 	movq	%rbx, %rdi
    000000cb: 	callq	_Z18quicksort2_forwardISt18_Fwd_list_iteratorItEEvT_S2_ # Offset: 203
    000000d0: 	cmpq	%r12, %rbx
    000000d3: 	je	.Ltmp3415 # Offset: 211
    000000d5: 	movq	%rbx, %rbp
    000000d8: 	movq	%r12, %rbx
.Ltmp3424:
    000000db: 	movq	%rbx, %r12
    000000de: 	movq	(%r12), %rbx
    000000e2: 	cmpq	%rbp, %rbx
    000000e5: 	jne	.Ltmp3423 # Offset: 229
.Ltmp3415:
    000000eb: 	popq	%rbx
    000000ec: 	popq	%rbp
    000000ed: 	popq	%r12
    000000ef: 	retq # Offset: 239
.Ltmp3422:
    000000f0: 	movq	%rbx, %rsi
    000000f3: 	movq	%r12, %rdi
    000000f6: 	callq	_Z18quicksort2_forwardISt18_Fwd_list_iteratorItEEvT_S2_ # Offset: 246
    000000fb: 	cmpq	%rbp, %rbx
    000000fe: 	jne	.Ltmp3424 # Offset: 254
    00000100: 	popq	%rbx
    00000101: 	popq	%rbp
    00000102: 	popq	%r12
    00000104: 	retq # Offset: 260
.Ltmp3416:
    00000105: 	cmpw	%di, %ax
    00000108: 	jbe	.Ltmp3415 # Offset: 264
    0000010a: 	movw	%ax, 0x8(%rbx)
    0000010e: 	movw	%di, 0x8(%r12)
    00000114: 	popq	%rbx
    00000115: 	popq	%rbp
    00000116: 	popq	%r12
    00000118: 	retq # Offset: 280
.Ltmp3414:
    00000119: 	retq # Offset: 281
DWARF CFI Instructions:
    <empty>
End of Function "_Z18quicksort2_forwardISt18_Fwd_list_iteratorItEEvT_S2_"

Binary Function "_Z13TestOneSearchISt18_Fwd_list_iteratorItEPFS1_S1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1(*2)" after disassembly {
  All names   : _Z13TestOneSearchISt18_Fwd_list_iteratorItEPFS1_S1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1
                _Z13TestOneSearchISt18_Fwd_list_iteratorItEPFS1_S1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/binary_search.cpp/1
  Number      : 390
  State       : disassembled
  Address     : 0x1cc30
  Size        : 0x315
  MaxSize     : 0x320
  Offset      : 0x1cc30
  Section     : .text
  Orc Section : .local.text._Z13TestOneSearchISt18_Fwd_list_iteratorItEPFS1_S1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0389:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	movq	%rsi, %r14
    00000007: 	pushq	%r13
    00000009: 	movq	%r8, %r13
    0000000c: 	pushq	%r12
    0000000e: 	movq	%rdx, %r12
    00000011: 	pushq	%rbp
    00000012: 	movq	%rdi, %rbp
    00000015: 	pushq	%rbx
    00000016: 	movq	%rdi, %rbx
    00000019: 	subq	$0x68, %rsp
    0000001d: 	movq	%rcx, 0x10(%rsp)
    00000022: 	movq	%fs:0x28, %rax
    0000002b: 	movq	%rax, 0x58(%rsp)
    00000030: 	xorl	%eax, %eax
    00000032: 	movq	%rdi, %rax
    00000035: 	testq	%rdi, %rdi
    00000038: 	je	.Ltmp3425 # Offset: 56
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3426:
    00000040: 	movq	%rax, %rdx
    00000043: 	movq	(%rax), %rax
    00000046: 	movl	$0x5, %ecx
    0000004b: 	movw	%cx, 0x8(%rdx)
    0000004f: 	testq	%rax, %rax
    00000052: 	jne	.Ltmp3426 # Offset: 82
.Ltmp3425:
    00000054: 	movzbl	%r9b, %eax
    00000058: 	movq	(%r13), %r8
    0000005c: 	movq	0x8(%r13), %r15
    00000060: 	movl	%eax, 0xc(%rsp)
    00000064: 	leaq	0x40(%rsp), %rax
    00000069: 	movq	%rax, (%rsp)
    0000006d: 	movq	%rax, 0x30(%rsp)
    00000072: 	movq	%r8, %rax
    00000075: 	addq	%r15, %rax
    00000078: 	je	.Ltmp3427 # Offset: 120
    0000007a: 	testq	%r8, %r8
    0000007d: 	je	.Ltmp3428 # Offset: 125
.Ltmp3427:
    00000083: 	movq	%r15, 0x28(%rsp)
    00000088: 	cmpq	$0xf, %r15
    0000008c: 	ja	.Ltmp3429 # Offset: 140
    00000092: 	cmpq	$0x1, %r15
    00000096: 	jne	.Ltmp3430 # Offset: 150
    0000009c: 	movzbl	(%r8), %eax
    000000a0: 	movb	%al, 0x40(%rsp)
    000000a4: 	movq	(%rsp), %rax
.Ltmp3444:
    000000a8: 	movq	%r15, 0x38(%rsp)
    000000ad: 	movb	$0x0, (%rax,%r15)
    000000b2: 	movabsq	$0x3fffffffffffffff, %rax
    000000bc: 	subq	0x38(%rsp), %rax
    000000c1: 	cmpq	$0xc, %rax
    000000c5: 	jbe	.Ltmp3431 # Offset: 197
    000000cb: 	leaq	0x30(%rsp), %r15
    000000d0: 	movl	$0xd, %edx
    000000d5: 	leaq	DATAat0x34160(%rip), %rsi
    000000dc: 	movq	%r15, %rdi
    000000df: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 223
    000000e4: 	movl	0xc(%rsp), %r9d
    000000e9: 	movq	0x10(%rsp), %rcx
    000000ee: 	movq	%r15, %r8
    000000f1: 	movq	%r12, %rdx
    000000f4: 	movq	%r14, %rsi
    000000f7: 	movq	%rbp, %rdi
    000000fa: 	callq	"_Z15TestSearchArrayISt18_Fwd_list_iteratorItEPFS1_S1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1" # Offset: 250
    000000ff: 	movq	0x30(%rsp), %rdi
    00000104: 	cmpq	(%rsp), %rdi
    00000108: 	je	.Ltmp3432 # Offset: 264
    0000010a: 	movq	0x40(%rsp), %rax
    0000010f: 	leaq	0x1(%rax), %rsi
    00000113: 	callq	_ZdlPvm@PLT # Offset: 275
.Ltmp3432:
    00000118: 	cmpq	$0x9, %r12
    0000011c: 	jbe	.Ltmp3433 # Offset: 284
    00000122: 	movabsq	$-0x3333333333333333, %rdx
    0000012c: 	movq	%r12, %rax
    0000012f: 	mulq	%rdx
    00000132: 	shrq	$0x3, %rdx
.Ltmp3445:
    00000136: 	movq	%rbp, %rsi
    00000139: 	xorl	%ecx, %ecx
    0000013b: 	xorl	%r8d, %r8d
    0000013e: 	cmpq	$0x0, %r12
    00000142: 	jbe	.Ltmp3434 # Offset: 322
    00000144: 	nopl	(%rax) # Size: 4
.Ltmp3437:
    00000148: 	xorl	%eax, %eax
    0000014a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3436:
    00000150: 	movq	%rsi, %rdi
    00000153: 	addq	$0x1, %rax
    00000157: 	movq	(%rsi), %rsi
    0000015a: 	addq	$0x1, %rcx
    0000015e: 	movw	%r8w, 0x8(%rdi)
    00000163: 	cmpq	%rdx, %rax
    00000166: 	jae	.Ltmp3435 # Offset: 358
    00000168: 	cmpq	%rcx, %r12
    0000016b: 	ja	.Ltmp3436 # Offset: 363
.Ltmp3435:
    0000016d: 	addl	$0x1, %r8d
    00000171: 	cmpq	%rcx, %r12
    00000174: 	ja	.Ltmp3437 # Offset: 372
.Ltmp3434:
    00000176: 	leaq	DATAat0x3416e(%rip), %rdx
    0000017d: 	movq	%r13, %rsi
    00000180: 	movq	%r15, %rdi
    00000183: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 387
    00000188: 	movl	0xc(%rsp), %r9d
    0000018d: 	movq	%r15, %r8
    00000190: 	movq	%r12, %rdx
    00000193: 	movq	0x10(%rsp), %rcx
    00000198: 	movq	%r14, %rsi
    0000019b: 	movq	%rbp, %rdi
    0000019e: 	callq	"_Z15TestSearchArrayISt18_Fwd_list_iteratorItEPFS1_S1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1" # Offset: 414
    000001a3: 	movq	0x30(%rsp), %rdi
    000001a8: 	cmpq	(%rsp), %rdi
    000001ac: 	je	.Ltmp3438 # Offset: 428
    000001ae: 	movq	0x40(%rsp), %rax
    000001b3: 	leaq	0x1(%rax), %rsi
    000001b7: 	callq	_ZdlPvm@PLT # Offset: 439
.Ltmp3438:
    000001bc: 	xorl	%eax, %eax
    000001be: 	testq	%rbp, %rbp
    000001c1: 	je	.Ltmp3439 # Offset: 449
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3440:
    000001c8: 	movq	%rbx, %rdx
    000001cb: 	movq	(%rbx), %rbx
    000001ce: 	movw	%ax, 0x8(%rdx)
    000001d2: 	addl	$0x1, %eax
    000001d5: 	testq	%rbx, %rbx
    000001d8: 	jne	.Ltmp3440 # Offset: 472
.Ltmp3439:
    000001da: 	movq	%r14, %rsi
    000001dd: 	movq	%rbp, %rdi
    000001e0: 	callq	_Z18quicksort2_forwardISt18_Fwd_list_iteratorItEEvT_S2_ # Offset: 480
    000001e5: 	leaq	DATAat0x34184(%rip), %rdx
    000001ec: 	movq	%r13, %rsi
    000001ef: 	movq	%r15, %rdi
    000001f2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 498
    000001f7: 	movl	0xc(%rsp), %r9d
    000001fc: 	movq	%r15, %r8
    000001ff: 	movq	%r12, %rdx
    00000202: 	movq	0x10(%rsp), %rcx
    00000207: 	movq	%r14, %rsi
    0000020a: 	movq	%rbp, %rdi
    0000020d: 	callq	"_Z15TestSearchArrayISt18_Fwd_list_iteratorItEPFS1_S1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1" # Offset: 525
    00000212: 	movq	0x30(%rsp), %rdi
    00000217: 	cmpq	(%rsp), %rdi
    0000021b: 	je	.Ltmp3441 # Offset: 539
    0000021d: 	movq	0x40(%rsp), %rax
    00000222: 	leaq	0x1(%rax), %rsi
    00000226: 	callq	_ZdlPvm@PLT # Offset: 550
.Ltmp3441:
    0000022b: 	movq	0x58(%rsp), %rax
    00000230: 	subq	%fs:0x28, %rax
    00000239: 	jne	.Ltmp3442 # Offset: 569
    0000023f: 	addq	$0x68, %rsp
    00000243: 	popq	%rbx
    00000244: 	popq	%rbp
    00000245: 	popq	%r12
    00000247: 	popq	%r13
    00000249: 	popq	%r14
    0000024b: 	popq	%r15
    0000024d: 	retq # Offset: 589
.Ltmp3430:
    0000024e: 	testq	%r15, %r15
    00000251: 	jne	.Ltmp3443 # Offset: 593
    00000253: 	movq	(%rsp), %rax
    00000257: 	jmp	.Ltmp3444 # Offset: 599
.Ltmp3433:
    0000025c: 	testq	%r12, %r12
    0000025f: 	je	.Ltmp3434 # Offset: 607
    00000265: 	movl	$0x1, %edx
    0000026a: 	jmp	.Ltmp3445 # Offset: 618
.Ltmp3429:
    0000026f: 	leaq	0x30(%rsp), %rdi
    00000274: 	leaq	0x28(%rsp), %rsi
    00000279: 	xorl	%edx, %edx
    0000027b: 	movq	%r8, 0x18(%rsp)
    00000280: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 640
    00000285: 	movq	0x18(%rsp), %r8
    0000028a: 	movq	%rax, 0x30(%rsp)
    0000028f: 	movq	%rax, %rdi
    00000292: 	movq	0x28(%rsp), %rax
    00000297: 	movq	%rax, 0x40(%rsp)
.Ltmp3446:
    0000029c: 	movq	%r15, %rdx
    0000029f: 	movq	%r8, %rsi
    000002a2: 	callq	memcpy@PLT # Offset: 674
    000002a7: 	movq	0x28(%rsp), %r15
    000002ac: 	movq	0x30(%rsp), %rax
    000002b1: 	jmp	.Ltmp3444 # Offset: 689
.Ltmp3431:
    000002b6: 	leaq	DATAat0x3414b(%rip), %rdi
    000002bd: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 701
.Ltmp3443:
    000002c2: 	movq	(%rsp), %rdi
    000002c6: 	jmp	.Ltmp3446 # Offset: 710
.Ltmp3442:
    000002c8: 	callq	__stack_chk_fail@PLT # Offset: 712
.Ltmp3428:
    000002cd: 	leaq	DATAat0x34008(%rip), %rdi
    000002d4: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 724
    000002d9: 	endbr64
.Ltmp3448:
    000002dd: 	movq	%rax, %rbp
    000002e0: 	jmp	.Ltmp3447 # Offset: 736
    000002e2: 	endbr64
    000002e6: 	jmp	.Ltmp3448 # Offset: 742
    000002e8: 	endbr64
    000002ec: 	jmp	.Ltmp3448 # Offset: 748
    000002ee: 	endbr64
    000002f2: 	jmp	.Ltmp3448 # Offset: 754
.Ltmp3447:
    000002f4: 	movq	0x30(%rsp), %rdi
    000002f9: 	cmpq	(%rsp), %rdi
    000002fd: 	je	.Ltmp3449 # Offset: 765
    000002ff: 	movq	0x40(%rsp), %rax
    00000304: 	leaq	0x1(%rax), %rsi
    00000308: 	callq	_ZdlPvm@PLT # Offset: 776
.Ltmp3449:
    0000030d: 	movq	%rbp, %rdi
    00000310: 	callq	_Unwind_Resume@PLT # Offset: 784
DWARF CFI Instructions:
    <empty>
End of Function "_Z13TestOneSearchISt18_Fwd_list_iteratorItEPFS1_S1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1(*2)"

Binary Function "_Z23lower_bound_recur_innerISt18_Fwd_list_iteratorItEtlET_S2_T0_T1_" after disassembly {
  Number      : 391
  State       : disassembled
  Address     : 0x1cf50
  Size        : 0x11a
  MaxSize     : 0x120
  Offset      : 0x1cf50
  Section     : .text
  Orc Section : .local.text._Z23lower_bound_recur_innerISt18_Fwd_list_iteratorItEtlET_S2_T0_T1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0390:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	testq	%rdx, %rdx
    0000000a: 	je	.Ltmp3450 # Offset: 10
    00000010: 	movq	%rdx, %r8
    00000013: 	subq	$0x8, %rsp
    00000017: 	movl	%esi, %r9d
    0000001a: 	movq	%rdi, %r10
    0000001d: 	shrq	$0x3f, %r8
    00000021: 	addq	%rdx, %r8
    00000024: 	sarq	%r8
    00000027: 	leaq	-0x1(%r8), %rcx
    0000002b: 	je	.Ltmp3451 # Offset: 43
    0000002d: 	movq	%rdi, %rsi
.Ltmp3452:
    00000030: 	movq	(%rsi), %rsi
    00000033: 	subq	$0x1, %rcx
    00000037: 	jae	.Ltmp3452 # Offset: 55
    00000039: 	cmpw	0x8(%rsi), %r9w
    0000003e: 	jbe	.Ltmp3453 # Offset: 62
.Ltmp3463:
    00000040: 	movq	(%rsi), %rax
    00000043: 	addq	$0x1, %r8
    00000047: 	movq	%rax, %rdi
    0000004a: 	subq	%r8, %rdx
    0000004d: 	je	.Ltmp3454 # Offset: 77
    0000004f: 	movq	%rdx, %r8
    00000052: 	shrq	$0x3f, %r8
    00000056: 	addq	%rdx, %r8
    00000059: 	sarq	%r8
    0000005c: 	leaq	-0x1(%r8), %rcx
    00000060: 	je	.Ltmp3455 # Offset: 96
    00000062: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3456:
    00000068: 	movq	(%rax), %rax
    0000006b: 	subq	$0x1, %rcx
    0000006f: 	jae	.Ltmp3456 # Offset: 111
.Ltmp3455:
    00000071: 	movzwl	%r9w, %esi
    00000075: 	cmpw	0x8(%rax), %r9w
    0000007a: 	jbe	.Ltmp3457 # Offset: 122
    0000007c: 	addq	$0x1, %r8
    00000080: 	movq	(%rax), %rdi
    00000083: 	subq	%r8, %rdx
    00000086: 	callq	_Z23lower_bound_recur_innerISt18_Fwd_list_iteratorItEtlET_S2_T0_T1_ # Offset: 134
.Ltmp3454:
    0000008b: 	addq	$0x8, %rsp
    0000008f: 	retq # Offset: 143
.Ltmp3450:
    00000090: 	retq # Offset: 144
    00000091: 	nopl	(%rax) # Size: 7
.Ltmp3451:
    00000098: 	cmpw	0x8(%rdi), %si
    0000009c: 	ja	.Ltmp3458 # Offset: 156
.Ltmp3462:
    0000009e: 	movq	%r10, %rax
    000000a1: 	addq	$0x8, %rsp
    000000a5: 	retq # Offset: 165
    000000a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3453:
    000000b0: 	leaq	0x3(%rdx), %rax
    000000b4: 	testq	%rdx, %rdx
    000000b7: 	cmovsq	%rax, %rdx
    000000bb: 	sarq	$0x2, %rdx
    000000bf: 	leaq	-0x1(%rdx), %rax
    000000c3: 	je	.Ltmp3459 # Offset: 195
    000000c5: 	nopl	(%rax) # Size: 3
.Ltmp3460:
    000000c8: 	movq	(%r10), %r10
    000000cb: 	subq	$0x1, %rax
    000000cf: 	jae	.Ltmp3460 # Offset: 207
.Ltmp3459:
    000000d1: 	movzwl	%r9w, %esi
    000000d5: 	cmpw	0x8(%r10), %r9w
    000000da: 	jbe	.Ltmp3461 # Offset: 218
    000000dc: 	leaq	0x1(%rdx), %rax
    000000e0: 	movq	(%r10), %rdi
    000000e3: 	movq	%r8, %rdx
    000000e6: 	subq	%rax, %rdx
    000000e9: 	callq	_Z23lower_bound_recur_innerISt18_Fwd_list_iteratorItEtlET_S2_T0_T1_ # Offset: 233
    000000ee: 	movq	%rax, %r10
    000000f1: 	jmp	.Ltmp3462 # Offset: 241
    000000f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3457:
    000000f8: 	movq	%r8, %rdx
    000000fb: 	callq	_Z23lower_bound_recur_innerISt18_Fwd_list_iteratorItEtlET_S2_T0_T1_ # Offset: 251
    00000100: 	jmp	.Ltmp3454 # Offset: 256
    00000102: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3461:
    00000108: 	callq	_Z23lower_bound_recur_innerISt18_Fwd_list_iteratorItEtlET_S2_T0_T1_ # Offset: 264
    0000010d: 	movq	%rax, %r10
    00000110: 	jmp	.Ltmp3462 # Offset: 272
.Ltmp3458:
    00000112: 	movq	%rdi, %rsi
    00000115: 	jmp	.Ltmp3463 # Offset: 277
DWARF CFI Instructions:
    <empty>
End of Function "_Z23lower_bound_recur_innerISt18_Fwd_list_iteratorItEtlET_S2_T0_T1_"

Binary Function "_Z17lower_bound_recurISt18_Fwd_list_iteratorItEtET_S2_S2_T0_" after disassembly {
  Number      : 392
  State       : disassembled
  Address     : 0x1d070
  Size        : 0x26b
  MaxSize     : 0x270
  Offset      : 0x1d070
  Section     : .text
  Orc Section : .local.text._Z17lower_bound_recurISt18_Fwd_list_iteratorItEtET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0391:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp3464 # Offset: 10
    00000010: 	movl	%edx, %r9d
    00000013: 	subq	$0x8, %rsp
    00000017: 	movq	%rdi, %r8
    0000001a: 	movq	%rdi, %r11
    0000001d: 	movq	%rdi, %rax
    00000020: 	xorl	%edx, %edx
    00000022: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3465:
    00000028: 	movq	(%rax), %rax
    0000002b: 	movq	%rdx, %rdi
    0000002e: 	addq	$0x1, %rdx
    00000032: 	cmpq	%rsi, %rax
    00000035: 	jne	.Ltmp3465 # Offset: 53
    00000037: 	movq	%rdx, %rsi
    0000003a: 	movzwl	%r9w, %r10d
    0000003e: 	sarq	%rsi
    00000041: 	leaq	-0x1(%rsi), %rax
    00000045: 	je	.Ltmp3466 # Offset: 69
    0000004b: 	movq	%r8, %rcx
    0000004e: 	nop # Size: 2
.Ltmp3467:
    00000050: 	movq	(%rcx), %rcx
    00000053: 	subq	$0x1, %rax
    00000057: 	jae	.Ltmp3467 # Offset: 87
    00000059: 	cmpw	0x8(%rcx), %r9w
    0000005e: 	jbe	.Ltmp3468 # Offset: 94
.Ltmp3489:
    00000064: 	movq	(%rcx), %rax
    00000067: 	subq	%rsi, %rdi
    0000006a: 	je	.Ltmp3469 # Offset: 106
    00000070: 	movq	%rdi, %rsi
    00000073: 	shrq	$0x3f, %rsi
    00000077: 	addq	%rdi, %rsi
    0000007a: 	sarq	%rsi
    0000007d: 	leaq	-0x1(%rsi), %rdx
    00000081: 	je	.Ltmp3470 # Offset: 129
    00000087: 	movq	%rax, %rcx
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3471:
    00000090: 	movq	(%rcx), %rcx
    00000093: 	subq	$0x1, %rdx
    00000097: 	jae	.Ltmp3471 # Offset: 151
    00000099: 	cmpw	0x8(%rcx), %r9w
    0000009e: 	jbe	.Ltmp3472 # Offset: 158
.Ltmp3488:
    000000a4: 	movq	(%rcx), %rax
    000000a7: 	addq	$0x1, %rsi
    000000ab: 	movq	%rax, %r11
    000000ae: 	subq	%rsi, %rdi
    000000b1: 	je	.Ltmp3469 # Offset: 177
    000000b3: 	movq	%rdi, %r8
    000000b6: 	shrq	$0x3f, %r8
    000000ba: 	addq	%rdi, %r8
    000000bd: 	sarq	%r8
    000000c0: 	leaq	-0x1(%r8), %rdx
    000000c4: 	je	.Ltmp3473 # Offset: 196
    000000c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3474:
    000000d0: 	movq	(%rax), %rax
    000000d3: 	subq	$0x1, %rdx
    000000d7: 	jae	.Ltmp3474 # Offset: 215
.Ltmp3473:
    000000d9: 	cmpw	0x8(%rax), %r9w
    000000de: 	jbe	.Ltmp3475 # Offset: 222
    000000e4: 	movq	(%rax), %r11
    000000e7: 	addq	$0x1, %r8
    000000eb: 	movl	%r10d, %esi
    000000ee: 	subq	%r8, %rdi
    000000f1: 	movq	%rdi, %rdx
    000000f4: 	movq	%r11, %rdi
    000000f7: 	callq	_Z23lower_bound_recur_innerISt18_Fwd_list_iteratorItEtlET_S2_T0_T1_ # Offset: 247
.Ltmp3469:
    000000fc: 	addq	$0x8, %rsp
    00000100: 	retq # Offset: 256
    00000101: 	nopl	(%rax) # Size: 7
.Ltmp3468:
    00000108: 	movq	%rdx, %rdi
    0000010b: 	movq	%r8, %rcx
    0000010e: 	sarq	$0x2, %rdi
    00000112: 	leaq	-0x1(%rdi), %rax
    00000116: 	je	.Ltmp3476 # Offset: 278
    0000011c: 	nopl	(%rax) # Size: 4
.Ltmp3477:
    00000120: 	movq	(%rcx), %rcx
    00000123: 	subq	$0x1, %rax
    00000127: 	jae	.Ltmp3477 # Offset: 295
    00000129: 	cmpw	0x8(%rcx), %r9w
    0000012e: 	jbe	.Ltmp3478 # Offset: 302
.Ltmp3487:
    00000134: 	movq	(%rcx), %rax
    00000137: 	addq	$0x1, %rdi
    0000013b: 	movq	%rax, %r11
    0000013e: 	subq	%rdi, %rsi
    00000141: 	je	.Ltmp3469 # Offset: 321
    00000143: 	movq	%rsi, %r8
    00000146: 	shrq	$0x3f, %r8
    0000014a: 	addq	%rsi, %r8
    0000014d: 	sarq	%r8
    00000150: 	leaq	-0x1(%r8), %rdx
    00000154: 	je	.Ltmp3479 # Offset: 340
    00000156: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3480:
    00000160: 	movq	(%rax), %rax
    00000163: 	subq	$0x1, %rdx
    00000167: 	jae	.Ltmp3480 # Offset: 359
.Ltmp3479:
    00000169: 	cmpw	0x8(%rax), %r9w
    0000016e: 	jbe	.Ltmp3475 # Offset: 366
    00000170: 	movq	(%rax), %r11
    00000173: 	addq	$0x1, %r8
    00000177: 	subq	%r8, %rsi
    0000017a: 	movq	%rsi, %rdx
    0000017d: 	movq	%r11, %rdi
    00000180: 	movl	%r10d, %esi
    00000183: 	callq	_Z23lower_bound_recur_innerISt18_Fwd_list_iteratorItEtlET_S2_T0_T1_ # Offset: 387
    00000188: 	jmp	.Ltmp3469 # Offset: 392
    0000018d: 	nopl	(%rax) # Size: 3
.Ltmp3464:
    00000190: 	retq # Offset: 400
    00000191: 	nopl	(%rax) # Size: 7
.Ltmp3466:
    00000198: 	cmpw	0x8(%r8), %r9w
    0000019d: 	ja	.Ltmp3481 # Offset: 413
.Ltmp3486:
    000001a3: 	movq	%r8, %rax
    000001a6: 	jmp	.Ltmp3469 # Offset: 422
.Ltmp3475:
    000001ab: 	movq	%r8, %rdx
    000001ae: 	movl	%r10d, %esi
    000001b1: 	movq	%r11, %rdi
    000001b4: 	callq	_Z23lower_bound_recur_innerISt18_Fwd_list_iteratorItEtlET_S2_T0_T1_ # Offset: 436
    000001b9: 	jmp	.Ltmp3469 # Offset: 441
.Ltmp3472:
    000001be: 	testq	%rdi, %rdi
    000001c1: 	leaq	0x3(%rdi), %r8
    000001c5: 	movq	%rax, %r11
    000001c8: 	cmovnsq	%rdi, %r8
    000001cc: 	sarq	$0x2, %r8
    000001d0: 	leaq	-0x1(%r8), %rdx
    000001d4: 	je	.Ltmp3479 # Offset: 468
    000001d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3482:
    000001e0: 	movq	(%rax), %rax
    000001e3: 	subq	$0x1, %rdx
    000001e7: 	jae	.Ltmp3482 # Offset: 487
    000001e9: 	jmp	.Ltmp3479 # Offset: 489
.Ltmp3478:
    000001ee: 	sarq	$0x3, %rdx
    000001f2: 	leaq	-0x1(%rdx), %rax
    000001f6: 	je	.Ltmp3483 # Offset: 502
    000001f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3484:
    00000200: 	movq	(%r11), %r11
    00000203: 	subq	$0x1, %rax
    00000207: 	jae	.Ltmp3484 # Offset: 519
.Ltmp3483:
    00000209: 	cmpw	0x8(%r11), %r9w
    0000020e: 	jbe	.Ltmp3485 # Offset: 526
    00000210: 	addq	$0x1, %rdx
    00000214: 	movq	(%r11), %r8
    00000217: 	movl	%r10d, %esi
    0000021a: 	subq	%rdx, %rdi
    0000021d: 	movq	%rdi, %rdx
    00000220: 	movq	%r8, %rdi
    00000223: 	callq	_Z23lower_bound_recur_innerISt18_Fwd_list_iteratorItEtlET_S2_T0_T1_ # Offset: 547
    00000228: 	jmp	.Ltmp3469 # Offset: 552
.Ltmp3485:
    0000022d: 	movl	%r10d, %esi
    00000230: 	movq	%r8, %rdi
    00000233: 	callq	_Z23lower_bound_recur_innerISt18_Fwd_list_iteratorItEtlET_S2_T0_T1_ # Offset: 563
    00000238: 	jmp	.Ltmp3469 # Offset: 568
.Ltmp3476:
    0000023d: 	cmpw	0x8(%r8), %r9w
    00000242: 	jbe	.Ltmp3486 # Offset: 578
    00000248: 	jmp	.Ltmp3487 # Offset: 584
    0000024d: 	nopl	(%rax) # Size: 3
.Ltmp3470:
    00000250: 	cmpw	0x8(%rax), %r9w
    00000255: 	jbe	.Ltmp3469 # Offset: 597
    0000025b: 	movq	%rax, %rcx
    0000025e: 	jmp	.Ltmp3488 # Offset: 606
.Ltmp3481:
    00000263: 	movq	%r8, %rcx
    00000266: 	jmp	.Ltmp3489 # Offset: 614
DWARF CFI Instructions:
    <empty>
End of Function "_Z17lower_bound_recurISt18_Fwd_list_iteratorItEtET_S2_S2_T0_"

Binary Function "_Z23upper_bound_recur_innerISt18_Fwd_list_iteratorItEtlET_S2_T0_T1_" after disassembly {
  Number      : 393
  State       : disassembled
  Address     : 0x1d2e0
  Size        : 0x114
  MaxSize     : 0x120
  Offset      : 0x1d2e0
  Section     : .text
  Orc Section : .local.text._Z23upper_bound_recur_innerISt18_Fwd_list_iteratorItEtlET_S2_T0_T1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0392:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	testq	%rdx, %rdx
    0000000a: 	je	.Ltmp3490 # Offset: 10
    00000010: 	movq	%rdx, %r8
    00000013: 	subq	$0x8, %rsp
    00000017: 	movl	%esi, %r9d
    0000001a: 	movq	%rdi, %r10
    0000001d: 	shrq	$0x3f, %r8
    00000021: 	addq	%rdx, %r8
    00000024: 	sarq	%r8
    00000027: 	leaq	-0x1(%r8), %rcx
    0000002b: 	je	.Ltmp3491 # Offset: 43
    0000002d: 	movq	%rdi, %rsi
.Ltmp3492:
    00000030: 	movq	(%rsi), %rsi
    00000033: 	subq	$0x1, %rcx
    00000037: 	jae	.Ltmp3492 # Offset: 55
    00000039: 	cmpw	0x8(%rsi), %r9w
    0000003e: 	jb	.Ltmp3493 # Offset: 62
.Ltmp3503:
    00000040: 	movq	(%rsi), %rax
    00000043: 	addq	$0x1, %r8
    00000047: 	movq	%rax, %rdi
    0000004a: 	subq	%r8, %rdx
    0000004d: 	je	.Ltmp3494 # Offset: 77
    0000004f: 	movq	%rdx, %r8
    00000052: 	shrq	$0x3f, %r8
    00000056: 	addq	%rdx, %r8
    00000059: 	sarq	%r8
    0000005c: 	leaq	-0x1(%r8), %rcx
    00000060: 	je	.Ltmp3495 # Offset: 96
    00000062: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3496:
    00000068: 	movq	(%rax), %rax
    0000006b: 	subq	$0x1, %rcx
    0000006f: 	jae	.Ltmp3496 # Offset: 111
.Ltmp3495:
    00000071: 	movzwl	%r9w, %esi
    00000075: 	cmpw	0x8(%rax), %r9w
    0000007a: 	jae	.Ltmp3497 # Offset: 122
    0000007c: 	movq	%r8, %rdx
    0000007f: 	callq	_Z23upper_bound_recur_innerISt18_Fwd_list_iteratorItEtlET_S2_T0_T1_ # Offset: 127
.Ltmp3494:
    00000084: 	addq	$0x8, %rsp
    00000088: 	retq # Offset: 136
    00000089: 	nopl	(%rax) # Size: 7
.Ltmp3490:
    00000090: 	retq # Offset: 144
    00000091: 	nopl	(%rax) # Size: 7
.Ltmp3491:
    00000098: 	cmpw	0x8(%rdi), %si
    0000009c: 	jae	.Ltmp3498 # Offset: 156
.Ltmp3502:
    0000009e: 	movq	%r10, %rax
    000000a1: 	addq	$0x8, %rsp
    000000a5: 	retq # Offset: 165
    000000a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3493:
    000000b0: 	leaq	0x3(%rdx), %rax
    000000b4: 	testq	%rdx, %rdx
    000000b7: 	cmovsq	%rax, %rdx
    000000bb: 	sarq	$0x2, %rdx
    000000bf: 	leaq	-0x1(%rdx), %rax
    000000c3: 	je	.Ltmp3499 # Offset: 195
    000000c5: 	nopl	(%rax) # Size: 3
.Ltmp3500:
    000000c8: 	movq	(%r10), %r10
    000000cb: 	subq	$0x1, %rax
    000000cf: 	jae	.Ltmp3500 # Offset: 207
.Ltmp3499:
    000000d1: 	movzwl	%r9w, %esi
    000000d5: 	cmpw	0x8(%r10), %r9w
    000000da: 	jb	.Ltmp3501 # Offset: 218
    000000dc: 	leaq	0x1(%rdx), %rax
    000000e0: 	movq	(%r10), %rdi
    000000e3: 	movq	%r8, %rdx
    000000e6: 	subq	%rax, %rdx
.Ltmp3501:
    000000e9: 	callq	_Z23upper_bound_recur_innerISt18_Fwd_list_iteratorItEtlET_S2_T0_T1_ # Offset: 233
    000000ee: 	movq	%rax, %r10
    000000f1: 	jmp	.Ltmp3502 # Offset: 241
    000000f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3497:
    000000f8: 	addq	$0x1, %r8
    000000fc: 	movq	(%rax), %rdi
    000000ff: 	subq	%r8, %rdx
    00000102: 	callq	_Z23upper_bound_recur_innerISt18_Fwd_list_iteratorItEtlET_S2_T0_T1_ # Offset: 258
    00000107: 	jmp	.Ltmp3494 # Offset: 263
.Ltmp3498:
    0000010c: 	movq	%rdi, %rsi
    0000010f: 	jmp	.Ltmp3503 # Offset: 271
DWARF CFI Instructions:
    <empty>
End of Function "_Z23upper_bound_recur_innerISt18_Fwd_list_iteratorItEtlET_S2_T0_T1_"

Binary Function "_Z17upper_bound_recurISt18_Fwd_list_iteratorItEtET_S2_S2_T0_" after disassembly {
  Number      : 394
  State       : disassembled
  Address     : 0x1d400
  Size        : 0x25b
  MaxSize     : 0x260
  Offset      : 0x1d400
  Section     : .text
  Orc Section : .local.text._Z17upper_bound_recurISt18_Fwd_list_iteratorItEtET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0393:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp3504 # Offset: 10
    00000010: 	movl	%edx, %r9d
    00000013: 	subq	$0x8, %rsp
    00000017: 	movq	%rdi, %r8
    0000001a: 	movq	%rdi, %r11
    0000001d: 	movq	%rdi, %rax
    00000020: 	xorl	%edx, %edx
    00000022: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3505:
    00000028: 	movq	(%rax), %rax
    0000002b: 	movq	%rdx, %rdi
    0000002e: 	addq	$0x1, %rdx
    00000032: 	cmpq	%rsi, %rax
    00000035: 	jne	.Ltmp3505 # Offset: 53
    00000037: 	movq	%rdx, %rsi
    0000003a: 	movzwl	%r9w, %r10d
    0000003e: 	sarq	%rsi
    00000041: 	leaq	-0x1(%rsi), %rax
    00000045: 	je	.Ltmp3506 # Offset: 69
    0000004b: 	movq	%r8, %rcx
    0000004e: 	nop # Size: 2
.Ltmp3507:
    00000050: 	movq	(%rcx), %rcx
    00000053: 	subq	$0x1, %rax
    00000057: 	jae	.Ltmp3507 # Offset: 87
    00000059: 	cmpw	0x8(%rcx), %r9w
    0000005e: 	jb	.Ltmp3508 # Offset: 94
.Ltmp3529:
    00000064: 	movq	(%rcx), %rax
    00000067: 	subq	%rsi, %rdi
    0000006a: 	je	.Ltmp3509 # Offset: 106
    00000070: 	movq	%rdi, %rsi
    00000073: 	shrq	$0x3f, %rsi
    00000077: 	addq	%rdi, %rsi
    0000007a: 	sarq	%rsi
    0000007d: 	leaq	-0x1(%rsi), %rdx
    00000081: 	je	.Ltmp3510 # Offset: 129
    00000087: 	movq	%rax, %rcx
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3511:
    00000090: 	movq	(%rcx), %rcx
    00000093: 	subq	$0x1, %rdx
    00000097: 	jae	.Ltmp3511 # Offset: 151
    00000099: 	cmpw	0x8(%rcx), %r9w
    0000009e: 	jb	.Ltmp3512 # Offset: 158
.Ltmp3528:
    000000a4: 	movq	(%rcx), %rax
    000000a7: 	addq	$0x1, %rsi
    000000ab: 	movq	%rax, %r11
    000000ae: 	subq	%rsi, %rdi
    000000b1: 	je	.Ltmp3509 # Offset: 177
    000000b3: 	movq	%rdi, %r8
    000000b6: 	shrq	$0x3f, %r8
    000000ba: 	addq	%rdi, %r8
    000000bd: 	sarq	%r8
    000000c0: 	leaq	-0x1(%r8), %rdx
    000000c4: 	je	.Ltmp3513 # Offset: 196
    000000c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3514:
    000000d0: 	movq	(%rax), %rax
    000000d3: 	subq	$0x1, %rdx
    000000d7: 	jae	.Ltmp3514 # Offset: 215
.Ltmp3513:
    000000d9: 	cmpw	0x8(%rax), %r9w
    000000de: 	jb	.Ltmp3515 # Offset: 222
    000000e4: 	movq	(%rax), %r11
    000000e7: 	addq	$0x1, %r8
    000000eb: 	movl	%r10d, %esi
    000000ee: 	subq	%r8, %rdi
    000000f1: 	movq	%rdi, %rdx
    000000f4: 	movq	%r11, %rdi
    000000f7: 	callq	_Z23upper_bound_recur_innerISt18_Fwd_list_iteratorItEtlET_S2_T0_T1_ # Offset: 247
.Ltmp3509:
    000000fc: 	addq	$0x8, %rsp
    00000100: 	retq # Offset: 256
    00000101: 	nopl	(%rax) # Size: 7
.Ltmp3508:
    00000108: 	movq	%rdx, %rdi
    0000010b: 	movq	%r8, %rcx
    0000010e: 	sarq	$0x2, %rdi
    00000112: 	leaq	-0x1(%rdi), %rax
    00000116: 	je	.Ltmp3516 # Offset: 278
    0000011c: 	nopl	(%rax) # Size: 4
.Ltmp3517:
    00000120: 	movq	(%rcx), %rcx
    00000123: 	subq	$0x1, %rax
    00000127: 	jae	.Ltmp3517 # Offset: 295
    00000129: 	cmpw	0x8(%rcx), %r9w
    0000012e: 	jb	.Ltmp3518 # Offset: 302
.Ltmp3527:
    00000134: 	movq	(%rcx), %rax
    00000137: 	addq	$0x1, %rdi
    0000013b: 	movq	%rax, %r11
    0000013e: 	subq	%rdi, %rsi
    00000141: 	je	.Ltmp3509 # Offset: 321
    00000143: 	movq	%rsi, %r8
    00000146: 	shrq	$0x3f, %r8
    0000014a: 	addq	%rsi, %r8
    0000014d: 	sarq	%r8
    00000150: 	leaq	-0x1(%r8), %rdx
    00000154: 	je	.Ltmp3519 # Offset: 340
    00000156: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3520:
    00000160: 	movq	(%rax), %rax
    00000163: 	subq	$0x1, %rdx
    00000167: 	jae	.Ltmp3520 # Offset: 359
.Ltmp3519:
    00000169: 	cmpw	0x8(%rax), %r9w
    0000016e: 	jb	.Ltmp3515 # Offset: 366
    00000170: 	movq	(%rax), %r11
    00000173: 	addq	$0x1, %r8
    00000177: 	subq	%r8, %rsi
    0000017a: 	movq	%rsi, %rdx
    0000017d: 	movq	%r11, %rdi
    00000180: 	movl	%r10d, %esi
    00000183: 	callq	_Z23upper_bound_recur_innerISt18_Fwd_list_iteratorItEtlET_S2_T0_T1_ # Offset: 387
    00000188: 	jmp	.Ltmp3509 # Offset: 392
    0000018d: 	nopl	(%rax) # Size: 3
.Ltmp3504:
    00000190: 	retq # Offset: 400
    00000191: 	nopl	(%rax) # Size: 7
.Ltmp3506:
    00000198: 	cmpw	0x8(%r8), %r9w
    0000019d: 	jae	.Ltmp3521 # Offset: 413
.Ltmp3526:
    000001a3: 	movq	%r8, %rax
    000001a6: 	jmp	.Ltmp3509 # Offset: 422
.Ltmp3515:
    000001ab: 	movq	%r8, %rdx
    000001ae: 	movl	%r10d, %esi
    000001b1: 	movq	%r11, %rdi
    000001b4: 	callq	_Z23upper_bound_recur_innerISt18_Fwd_list_iteratorItEtlET_S2_T0_T1_ # Offset: 436
    000001b9: 	jmp	.Ltmp3509 # Offset: 441
.Ltmp3512:
    000001be: 	testq	%rdi, %rdi
    000001c1: 	leaq	0x3(%rdi), %r8
    000001c5: 	movq	%rax, %r11
    000001c8: 	cmovnsq	%rdi, %r8
    000001cc: 	sarq	$0x2, %r8
    000001d0: 	leaq	-0x1(%r8), %rdx
    000001d4: 	je	.Ltmp3519 # Offset: 468
    000001d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3522:
    000001e0: 	movq	(%rax), %rax
    000001e3: 	subq	$0x1, %rdx
    000001e7: 	jae	.Ltmp3522 # Offset: 487
    000001e9: 	jmp	.Ltmp3519 # Offset: 489
.Ltmp3518:
    000001ee: 	sarq	$0x3, %rdx
    000001f2: 	leaq	-0x1(%rdx), %rax
    000001f6: 	je	.Ltmp3523 # Offset: 502
    000001f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3524:
    00000200: 	movq	(%r11), %r11
    00000203: 	subq	$0x1, %rax
    00000207: 	jae	.Ltmp3524 # Offset: 519
.Ltmp3523:
    00000209: 	cmpw	0x8(%r11), %r9w
    0000020e: 	jb	.Ltmp3525 # Offset: 526
    00000210: 	addq	$0x1, %rdx
    00000214: 	movq	(%r11), %r8
    00000217: 	subq	%rdx, %rdi
    0000021a: 	movq	%rdi, %rdx
.Ltmp3525:
    0000021d: 	movl	%r10d, %esi
    00000220: 	movq	%r8, %rdi
    00000223: 	callq	_Z23upper_bound_recur_innerISt18_Fwd_list_iteratorItEtlET_S2_T0_T1_ # Offset: 547
    00000228: 	jmp	.Ltmp3509 # Offset: 552
.Ltmp3516:
    0000022d: 	cmpw	0x8(%rcx), %r9w
    00000232: 	jb	.Ltmp3526 # Offset: 562
    00000238: 	jmp	.Ltmp3527 # Offset: 568
    0000023d: 	nopl	(%rax) # Size: 3
.Ltmp3510:
    00000240: 	cmpw	0x8(%rax), %r9w
    00000245: 	jb	.Ltmp3509 # Offset: 581
    0000024b: 	movq	%rax, %rcx
    0000024e: 	jmp	.Ltmp3528 # Offset: 590
.Ltmp3521:
    00000253: 	movq	%r8, %rcx
    00000256: 	jmp	.Ltmp3529 # Offset: 598
DWARF CFI Instructions:
    <empty>
End of Function "_Z17upper_bound_recurISt18_Fwd_list_iteratorItEtET_S2_S2_T0_"

Binary Function "_Z15TestSearchArrayISt18_Fwd_list_iteratorItEPFbS1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 395
  State       : disassembled
  Address     : 0x1d660
  Size        : 0x1ef
  MaxSize     : 0x1f0
  Offset      : 0x1d660
  Section     : .text
  Orc Section : .local.text._Z15TestSearchArrayISt18_Fwd_list_iteratorItEPFbS1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0394:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rcx, %r15
    00000009: 	pushq	%r14
    0000000b: 	movq	%rsi, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %r12
    00000015: 	movl	$0x800, %edi
    0000001a: 	pushq	%rbp
    0000001b: 	pushq	%rbx
    0000001c: 	subq	$0x28, %rsp
    00000020: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000027: 	movq	%rdx, 0x10(%rsp)
    0000002c: 	movq	%r8, 0x18(%rsp)
    00000031: 	movb	%r9b, 0xf(%rsp)
    00000036: 	callq	_Znwm@PLT # Offset: 54
    0000003b: 	xorl	%edx, %edx
    0000003d: 	movq	%rax, %r13
    00000040: 	movw	%dx, (%rax)
    00000043: 	addq	$0x2, %rax
    00000047: 	leaq	0x800(%r13), %rsi
    0000004e: 	cmpq	%rsi, %rax
    00000051: 	je	.Ltmp3530 # Offset: 81
    00000053: 	leaq	0xa(%r13), %rdi
    00000057: 	movq	$0x0, 0x2(%r13)
    0000005f: 	movq	$0x0, 0x7f8(%r13)
    0000006a: 	andq	$-0x8, %rdi
    0000006e: 	subq	%rdi, %rax
    00000071: 	movq	%rax, %rcx
    00000074: 	xorl	%eax, %eax
    00000076: 	addl	$0x7fe, %ecx
    0000007c: 	shrl	$0x3, %ecx
    0000007f: 	rep		stosq	%rax, %es:(%rdi)
.Ltmp3530:
    00000082: 	movabsq	$0x5851f42d4c957f2d, %r8
    0000008c: 	movq	%r13, %rcx
    0000008f: 	movabsq	$0x14057b7ef767814f, %rdi
    00000099: 	nopl	(%rax) # Size: 7
.Ltmp3533:
    000000a0: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000000a7: 	imulq	%r8, %rax
    000000ab: 	addq	%rdi, %rax
    000000ae: 	movq	%rax, %rdx
    000000b1: 	movq	%rax, %r9
    000000b4: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000000bb: 	shrq	$0x14, %rdx
    000000bf: 	shlq	$0x17, %r9
    000000c3: 	xorq	%r9, %rdx
    000000c6: 	xorq	%rdx, %rax
    000000c9: 	xorl	%edx, %edx
    000000cb: 	divq	0x10(%rsp)
    000000d0: 	testq	%rdx, %rdx
    000000d3: 	leaq	-0x1(%rdx), %rax
    000000d7: 	movq	%r12, %rdx
    000000da: 	je	.Ltmp3531 # Offset: 218
    000000dc: 	nopl	(%rax) # Size: 4
.Ltmp3532:
    000000e0: 	movq	(%rdx), %rdx
    000000e3: 	subq	$0x1, %rax
    000000e7: 	jae	.Ltmp3532 # Offset: 231
.Ltmp3531:
    000000e9: 	movzwl	0x8(%rdx), %eax
    000000ed: 	addq	$0x2, %rcx
    000000f1: 	movw	%ax, -0x2(%rcx)
    000000f5: 	cmpq	%rcx, %rsi
    000000f8: 	jne	.Ltmp3533 # Offset: 248
    000000fa: 	callq	clock@PLT # Offset: 250
    000000ff: 	xorl	%ebx, %ebx
    00000101: 	xorl	%ebp, %ebp
    00000103: 	movq	%rax, start_time(%rip)
.Ltmp3537:
    0000010a: 	leaq	0xc8(%rbp), %rax
    00000111: 	movq	%rax, (%rsp)
    00000115: 	nopl	(%rax) # Size: 3
.Ltmp3535:
    00000118: 	movq	%rbp, %rax
    0000011b: 	movq	%r14, %rsi
    0000011e: 	addq	$0x1, %rbp
    00000122: 	movq	%r12, %rdi
    00000125: 	andl	$0x3ff, %eax
    0000012a: 	movzwl	(%r13,%rax,2), %edx
    00000130: 	callq	*%r15 # Offset: 304
    00000133: 	testb	%al, %al
    00000135: 	jne	.Ltmp3534 # Offset: 309
    00000137: 	cmpb	$0x0, 0xf(%rsp)
    0000013c: 	movl	$0x1, %eax
    00000141: 	cmovel	%eax, %ebx
.Ltmp3534:
    00000144: 	cmpq	(%rsp), %rbp
    00000148: 	jne	.Ltmp3535 # Offset: 328
    0000014a: 	callq	clock@PLT # Offset: 330
    0000014f: 	movsd	gMinimumTimeTarget(%rip), %xmm1
    00000157: 	pxor	%xmm0, %xmm0
    0000015b: 	movq	%rax, end_time(%rip)
    00000162: 	subq	start_time(%rip), %rax
    00000169: 	cvtsi2sd	%rax, %xmm0
    0000016e: 	divsd	DATAat0x34410(%rip), %xmm0
    00000176: 	comisd	%xmm0, %xmm1
    0000017a: 	jbe	.Ltmp3536 # Offset: 378
    0000017c: 	cmpq	$0x5f5e0ff, %rbp
    00000183: 	jbe	.Ltmp3537 # Offset: 387
.Ltmp3536:
    00000185: 	movq	0x18(%rsp), %rdx
    0000018a: 	movq	0x10(%rsp), %rdi
    0000018f: 	movq	%rbp, %rsi
    00000192: 	callq	_Z13record_resultdmmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 402
    00000197: 	testb	%bl, %bl
    00000199: 	jne	.Ltmp3538 # Offset: 409
.Ltmp3539:
    0000019b: 	addq	$0x28, %rsp
    0000019f: 	movq	%r13, %rdi
    000001a2: 	movl	$0x800, %esi
    000001a7: 	popq	%rbx
    000001a8: 	popq	%rbp
    000001a9: 	popq	%r12
    000001ab: 	popq	%r13
    000001ad: 	popq	%r14
    000001af: 	popq	%r15
    000001b1: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 433
.Ltmp3538:
    000001b6: 	movq	0x18(%rsp), %rax
    000001bb: 	leaq	DATAat0x34137(%rip), %rsi
    000001c2: 	movl	$0x1, %edi
    000001c7: 	movq	(%rax), %rdx
    000001ca: 	xorl	%eax, %eax
    000001cc: 	callq	__printf_chk@PLT # Offset: 460
    000001d1: 	jmp	.Ltmp3539 # Offset: 465
    000001d3: 	endbr64
    000001d7: 	movq	%rax, %rbp
    000001da: 	movq	%r13, %rdi
    000001dd: 	movl	$0x800, %esi
    000001e2: 	callq	_ZdlPvm@PLT # Offset: 482
    000001e7: 	movq	%rbp, %rdi
    000001ea: 	callq	_Unwind_Resume@PLT # Offset: 490
DWARF CFI Instructions:
    <empty>
End of Function "_Z15TestSearchArrayISt18_Fwd_list_iteratorItEPFbS1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z13TestOneSearchISt18_Fwd_list_iteratorItEPFbS1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 396
  State       : disassembled
  Address     : 0x1d850
  Size        : 0x315
  MaxSize     : 0x320
  Offset      : 0x1d850
  Section     : .text
  Orc Section : .local.text._Z13TestOneSearchISt18_Fwd_list_iteratorItEPFbS1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0395:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%r8, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdx, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rsi, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	movq	%rdi, %rbx
    0000001d: 	subq	$0x68, %rsp
    00000021: 	movq	%rcx, 0x10(%rsp)
    00000026: 	movq	%fs:0x28, %rax
    0000002f: 	movq	%rax, 0x58(%rsp)
    00000034: 	xorl	%eax, %eax
    00000036: 	movq	%rdi, %rax
    00000039: 	cmpq	%rsi, %rdi
    0000003c: 	je	.Ltmp3540 # Offset: 60
    0000003e: 	nop # Size: 2
.Ltmp3541:
    00000040: 	movq	%rax, %rdx
    00000043: 	movq	(%rax), %rax
    00000046: 	movl	$0x5, %ecx
    0000004b: 	movw	%cx, 0x8(%rdx)
    0000004f: 	cmpq	%rbp, %rax
    00000052: 	jne	.Ltmp3541 # Offset: 82
.Ltmp3540:
    00000054: 	movzbl	%r9b, %eax
    00000058: 	movq	(%r14), %r8
    0000005b: 	movq	0x8(%r14), %r15
    0000005f: 	movl	%eax, 0xc(%rsp)
    00000063: 	leaq	0x40(%rsp), %rax
    00000068: 	movq	%rax, (%rsp)
    0000006c: 	movq	%rax, 0x30(%rsp)
    00000071: 	movq	%r8, %rax
    00000074: 	addq	%r15, %rax
    00000077: 	je	.Ltmp3542 # Offset: 119
    00000079: 	testq	%r8, %r8
    0000007c: 	je	.Ltmp3543 # Offset: 124
.Ltmp3542:
    00000082: 	movq	%r15, 0x28(%rsp)
    00000087: 	cmpq	$0xf, %r15
    0000008b: 	ja	.Ltmp3544 # Offset: 139
    00000091: 	cmpq	$0x1, %r15
    00000095: 	jne	.Ltmp3545 # Offset: 149
    0000009b: 	movzbl	(%r8), %eax
    0000009f: 	movb	%al, 0x40(%rsp)
    000000a3: 	movq	(%rsp), %rax
.Ltmp3559:
    000000a7: 	movq	%r15, 0x38(%rsp)
    000000ac: 	movb	$0x0, (%rax,%r15)
    000000b1: 	movabsq	$0x3fffffffffffffff, %rax
    000000bb: 	subq	0x38(%rsp), %rax
    000000c0: 	cmpq	$0xc, %rax
    000000c4: 	jbe	.Ltmp3546 # Offset: 196
    000000ca: 	leaq	0x30(%rsp), %r15
    000000cf: 	movl	$0xd, %edx
    000000d4: 	leaq	DATAat0x34160(%rip), %rsi
    000000db: 	movq	%r15, %rdi
    000000de: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 222
    000000e3: 	movl	0xc(%rsp), %r9d
    000000e8: 	movq	0x10(%rsp), %rcx
    000000ed: 	movq	%r15, %r8
    000000f0: 	movq	%r12, %rdx
    000000f3: 	movq	%rbp, %rsi
    000000f6: 	movq	%r13, %rdi
    000000f9: 	callq	_Z15TestSearchArrayISt18_Fwd_list_iteratorItEPFbS1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 249
    000000fe: 	movq	0x30(%rsp), %rdi
    00000103: 	cmpq	(%rsp), %rdi
    00000107: 	je	.Ltmp3547 # Offset: 263
    00000109: 	movq	0x40(%rsp), %rax
    0000010e: 	leaq	0x1(%rax), %rsi
    00000112: 	callq	_ZdlPvm@PLT # Offset: 274
.Ltmp3547:
    00000117: 	cmpq	$0x9, %r12
    0000011b: 	jbe	.Ltmp3548 # Offset: 283
    00000121: 	movabsq	$-0x3333333333333333, %rdx
    0000012b: 	movq	%r12, %rax
    0000012e: 	mulq	%rdx
    00000131: 	shrq	$0x3, %rdx
.Ltmp3560:
    00000135: 	movq	%r13, %rsi
    00000138: 	xorl	%ecx, %ecx
    0000013a: 	xorl	%r8d, %r8d
    0000013d: 	cmpq	$0x0, %r12
    00000141: 	jbe	.Ltmp3549 # Offset: 321
    00000143: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3552:
    00000148: 	xorl	%eax, %eax
    0000014a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3551:
    00000150: 	movq	%rsi, %rdi
    00000153: 	addq	$0x1, %rax
    00000157: 	movq	(%rsi), %rsi
    0000015a: 	addq	$0x1, %rcx
    0000015e: 	movw	%r8w, 0x8(%rdi)
    00000163: 	cmpq	%rdx, %rax
    00000166: 	jae	.Ltmp3550 # Offset: 358
    00000168: 	cmpq	%rcx, %r12
    0000016b: 	ja	.Ltmp3551 # Offset: 363
.Ltmp3550:
    0000016d: 	addl	$0x1, %r8d
    00000171: 	cmpq	%rcx, %r12
    00000174: 	ja	.Ltmp3552 # Offset: 372
.Ltmp3549:
    00000176: 	leaq	DATAat0x3416e(%rip), %rdx
    0000017d: 	movq	%r14, %rsi
    00000180: 	movq	%r15, %rdi
    00000183: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 387
    00000188: 	movl	0xc(%rsp), %r9d
    0000018d: 	movq	%r15, %r8
    00000190: 	movq	%r12, %rdx
    00000193: 	movq	0x10(%rsp), %rcx
    00000198: 	movq	%rbp, %rsi
    0000019b: 	movq	%r13, %rdi
    0000019e: 	callq	_Z15TestSearchArrayISt18_Fwd_list_iteratorItEPFbS1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 414
    000001a3: 	movq	0x30(%rsp), %rdi
    000001a8: 	cmpq	(%rsp), %rdi
    000001ac: 	je	.Ltmp3553 # Offset: 428
    000001ae: 	movq	0x40(%rsp), %rax
    000001b3: 	leaq	0x1(%rax), %rsi
    000001b7: 	callq	_ZdlPvm@PLT # Offset: 439
.Ltmp3553:
    000001bc: 	xorl	%eax, %eax
    000001be: 	cmpq	%rbp, %r13
    000001c1: 	je	.Ltmp3554 # Offset: 449
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3555:
    000001c8: 	movq	%rbx, %rdx
    000001cb: 	movq	(%rbx), %rbx
    000001ce: 	movw	%ax, 0x8(%rdx)
    000001d2: 	addl	$0x1, %eax
    000001d5: 	cmpq	%rbx, %rbp
    000001d8: 	jne	.Ltmp3555 # Offset: 472
.Ltmp3554:
    000001da: 	movq	%rbp, %rsi
    000001dd: 	movq	%r13, %rdi
    000001e0: 	callq	_Z18quicksort2_forwardISt18_Fwd_list_iteratorItEEvT_S2_ # Offset: 480
    000001e5: 	leaq	DATAat0x34184(%rip), %rdx
    000001ec: 	movq	%r14, %rsi
    000001ef: 	movq	%r15, %rdi
    000001f2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 498
    000001f7: 	movl	0xc(%rsp), %r9d
    000001fc: 	movq	%r15, %r8
    000001ff: 	movq	%r12, %rdx
    00000202: 	movq	0x10(%rsp), %rcx
    00000207: 	movq	%rbp, %rsi
    0000020a: 	movq	%r13, %rdi
    0000020d: 	callq	_Z15TestSearchArrayISt18_Fwd_list_iteratorItEPFbS1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 525
    00000212: 	movq	0x30(%rsp), %rdi
    00000217: 	cmpq	(%rsp), %rdi
    0000021b: 	je	.Ltmp3556 # Offset: 539
    0000021d: 	movq	0x40(%rsp), %rax
    00000222: 	leaq	0x1(%rax), %rsi
    00000226: 	callq	_ZdlPvm@PLT # Offset: 550
.Ltmp3556:
    0000022b: 	movq	0x58(%rsp), %rax
    00000230: 	subq	%fs:0x28, %rax
    00000239: 	jne	.Ltmp3557 # Offset: 569
    0000023f: 	addq	$0x68, %rsp
    00000243: 	popq	%rbx
    00000244: 	popq	%rbp
    00000245: 	popq	%r12
    00000247: 	popq	%r13
    00000249: 	popq	%r14
    0000024b: 	popq	%r15
    0000024d: 	retq # Offset: 589
.Ltmp3545:
    0000024e: 	testq	%r15, %r15
    00000251: 	jne	.Ltmp3558 # Offset: 593
    00000253: 	movq	(%rsp), %rax
    00000257: 	jmp	.Ltmp3559 # Offset: 599
.Ltmp3548:
    0000025c: 	testq	%r12, %r12
    0000025f: 	je	.Ltmp3549 # Offset: 607
    00000265: 	movl	$0x1, %edx
    0000026a: 	jmp	.Ltmp3560 # Offset: 618
.Ltmp3544:
    0000026f: 	leaq	0x30(%rsp), %rdi
    00000274: 	leaq	0x28(%rsp), %rsi
    00000279: 	xorl	%edx, %edx
    0000027b: 	movq	%r8, 0x18(%rsp)
    00000280: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 640
    00000285: 	movq	0x18(%rsp), %r8
    0000028a: 	movq	%rax, 0x30(%rsp)
    0000028f: 	movq	%rax, %rdi
    00000292: 	movq	0x28(%rsp), %rax
    00000297: 	movq	%rax, 0x40(%rsp)
.Ltmp3561:
    0000029c: 	movq	%r15, %rdx
    0000029f: 	movq	%r8, %rsi
    000002a2: 	callq	memcpy@PLT # Offset: 674
    000002a7: 	movq	0x28(%rsp), %r15
    000002ac: 	movq	0x30(%rsp), %rax
    000002b1: 	jmp	.Ltmp3559 # Offset: 689
.Ltmp3546:
    000002b6: 	leaq	DATAat0x3414b(%rip), %rdi
    000002bd: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 701
.Ltmp3558:
    000002c2: 	movq	(%rsp), %rdi
    000002c6: 	jmp	.Ltmp3561 # Offset: 710
.Ltmp3557:
    000002c8: 	callq	__stack_chk_fail@PLT # Offset: 712
.Ltmp3543:
    000002cd: 	leaq	DATAat0x34008(%rip), %rdi
    000002d4: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 724
    000002d9: 	endbr64
.Ltmp3563:
    000002dd: 	movq	%rax, %rbp
    000002e0: 	jmp	.Ltmp3562 # Offset: 736
    000002e2: 	endbr64
    000002e6: 	jmp	.Ltmp3563 # Offset: 742
    000002e8: 	endbr64
    000002ec: 	jmp	.Ltmp3563 # Offset: 748
    000002ee: 	endbr64
    000002f2: 	jmp	.Ltmp3563 # Offset: 754
.Ltmp3562:
    000002f4: 	movq	0x30(%rsp), %rdi
    000002f9: 	cmpq	(%rsp), %rdi
    000002fd: 	je	.Ltmp3564 # Offset: 765
    000002ff: 	movq	0x40(%rsp), %rax
    00000304: 	leaq	0x1(%rax), %rsi
    00000308: 	callq	_ZdlPvm@PLT # Offset: 776
.Ltmp3564:
    0000030d: 	movq	%rbp, %rdi
    00000310: 	callq	_Unwind_Resume@PLT # Offset: 784
DWARF CFI Instructions:
    <empty>
End of Function "_Z13TestOneSearchISt18_Fwd_list_iteratorItEPFbS1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z11TestOneTypeItEvv" after disassembly {
  Number      : 397
  State       : disassembled
  Address     : 0x1db70
  Size        : 0x28b0
  MaxSize     : 0x28b0
  Offset      : 0x1db70
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeItEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0396:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	leaq	DATAat0x34311(%rip), %rsi
    0000000d: 	pushq	%r14
    0000000f: 	pushq	%r13
    00000011: 	movabsq	$0x28f5c28f5c28f5c3, %r13
    0000001b: 	pushq	%r12
    0000001d: 	movl	$0x5, %r12d
    00000023: 	pushq	%rbp
    00000024: 	movabsq	$0x346dc5d63886594b, %rbp
    0000002e: 	pushq	%rbx
    0000002f: 	subq	$0x268, %rsp
    00000036: 	movdqa	DATAat0x344d0(%rip), %xmm0
    0000003e: 	movq	%fs:0x28, %rax
    00000047: 	movq	%rax, 0x258(%rsp)
    0000004f: 	xorl	%eax, %eax
    00000051: 	leaq	0x120(%rsp), %rdi
    00000059: 	movq	$0x30d40, 0x250(%rsp)
    00000065: 	leaq	0x1e8(%rsp), %rbx
    0000006d: 	movaps	%xmm0, 0x1e0(%rsp)
    00000075: 	movdqa	DATAat0x344e0(%rip), %xmm0
    0000007d: 	movaps	%xmm0, 0x1f0(%rsp)
    00000085: 	movdqa	DATAat0x344f0(%rip), %xmm0
    0000008d: 	movaps	%xmm0, 0x200(%rsp)
    00000095: 	movdqa	DATAat0x34500(%rip), %xmm0
    0000009d: 	movaps	%xmm0, 0x210(%rsp)
    000000a5: 	movdqa	DATAat0x34510(%rip), %xmm0
    000000ad: 	movaps	%xmm0, 0x220(%rsp)
    000000b5: 	movdqa	DATAat0x34520(%rip), %xmm0
    000000bd: 	movaps	%xmm0, 0x230(%rsp)
    000000c5: 	movdqa	DATAat0x34530(%rip), %xmm0
    000000cd: 	movaps	%xmm0, 0x240(%rsp)
    000000d5: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1" # Offset: 213
    000000da: 	leaq	0x1e0(%rsp), %rax
    000000e2: 	movq	%rbx, 0x68(%rsp)
    000000e7: 	movq	%rax, 0x88(%rsp)
    000000ef: 	movq	%rax, 0x80(%rsp)
    000000f7: 	leaq	0x258(%rsp), %rax
    000000ff: 	movq	%rax, 0x58(%rsp)
    00000104: 	movq	%rbx, 0x28(%rsp)
    00000109: 	leaq	_ZZNSt8__detail18__to_chars_10_implImEEvPcjT_E8__digits(%rip), %rbx
.Ltmp3592:
    00000110: 	leaq	(%r12,%r12), %rax
    00000114: 	movq	%rax, %rdi
    00000117: 	movq	%rax, 0x60(%rsp)
    0000011c: 	callq	_Znam@PLT # Offset: 284
    00000121: 	movq	%rax, 0x30(%rsp)
    00000126: 	cmpq	$0x9, %r12
    0000012a: 	jbe	.Ltmp3565 # Offset: 298
    00000130: 	cmpq	$0x63, %r12
    00000134: 	jbe	.Ltmp3566 # Offset: 308
    0000013a: 	cmpq	$0x3e7, %r12
    00000141: 	jbe	.Ltmp3567 # Offset: 321
    00000147: 	cmpq	$0x270f, %r12
    0000014e: 	jbe	.Ltmp3568 # Offset: 334
    00000154: 	movq	%r12, %rdx
    00000157: 	movl	$0x1, %esi
    0000015c: 	jmp	.Ltmp3569 # Offset: 348
    0000015e: 	nop # Size: 2
.Ltmp3573:
    00000160: 	cmpq	$0xf423f, %rcx
    00000167: 	jbe	.Ltmp3570 # Offset: 359
    0000016d: 	cmpq	$0x98967f, %rcx
    00000174: 	jbe	.Ltmp3571 # Offset: 372
    0000017a: 	cmpq	$0x5f5e0ff, %rcx
    00000181: 	jbe	.Ltmp3572 # Offset: 385
.Ltmp3569:
    00000187: 	movq	%rdx, %rax
    0000018a: 	movq	%rdx, %rcx
    0000018d: 	mulq	%rbp
    00000190: 	movl	%esi, %eax
    00000192: 	addl	$0x4, %esi
    00000195: 	shrq	$0xb, %rdx
    00000199: 	cmpq	$0x1869f, %rcx
    000001a0: 	ja	.Ltmp3573 # Offset: 416
.Ltmp3597:
    000001a2: 	leaq	0x190(%rsp), %rax
    000001aa: 	leaq	0x180(%rsp), %rdi
    000001b2: 	xorl	%edx, %edx
    000001b4: 	movq	%rdi, 0x40(%rsp)
    000001b9: 	movq	%rax, 0x10(%rsp)
    000001be: 	movq	%rax, 0x180(%rsp)
    000001c6: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEmc@PLT # Offset: 454
    000001cb: 	movl	0x188(%rsp), %eax
    000001d2: 	movq	0x180(%rsp), %rdi
    000001da: 	movq	%r12, %rcx
    000001dd: 	leal	-0x1(%rax), %esi
    000001e0: 	cmpq	$0x63, %r12
    000001e4: 	jbe	.Ltmp3574 # Offset: 484
    000001e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3575:
    000001f0: 	movq	%rcx, %rdx
    000001f3: 	shrq	$0x2, %rdx
    000001f7: 	movq	%rdx, %rax
    000001fa: 	mulq	%r13
    000001fd: 	movq	%rdx, %r8
    00000200: 	andq	$-0x4, %rdx
    00000204: 	shrq	$0x2, %r8
    00000208: 	addq	%r8, %rdx
    0000020b: 	leaq	(%rdx,%rdx,4), %rax
    0000020f: 	movq	%rcx, %rdx
    00000212: 	shlq	$0x2, %rax
    00000216: 	subq	%rax, %rdx
    00000219: 	movq	%rcx, %rax
    0000021c: 	movq	%r8, %rcx
    0000021f: 	movl	%esi, %r8d
    00000222: 	movzbl	0x1(%rbx,%rdx,2), %r9d
    00000228: 	movzbl	(%rbx,%rdx,2), %edx
    0000022c: 	movb	%r9b, (%rdi,%r8)
    00000230: 	leal	-0x1(%rsi), %r8d
    00000234: 	subl	$0x2, %esi
    00000237: 	movb	%dl, (%rdi,%r8)
    0000023b: 	cmpq	$0x270f, %rax
    00000241: 	ja	.Ltmp3575 # Offset: 577
.Ltmp3574:
    00000243: 	leal	0x30(%rcx), %eax
    00000246: 	cmpq	$0x9, %rcx
    0000024a: 	jbe	.Ltmp3576 # Offset: 586
    0000024c: 	movzbl	0x1(%rbx,%rcx,2), %eax
    00000251: 	movb	%al, 0x1(%rdi)
    00000254: 	movzbl	(%rbx,%rcx,2), %eax
.Ltmp3576:
    00000258: 	movb	%al, (%rdi)
    0000025a: 	movq	0x120(%rsp), %r15
    00000262: 	leaq	0x170(%rsp), %rax
    0000026a: 	movq	0x128(%rsp), %r14
    00000272: 	movq	%rax, 0x8(%rsp)
    00000277: 	movq	%rax, 0x160(%rsp)
    0000027f: 	movq	%r15, %rax
    00000282: 	addq	%r14, %rax
    00000285: 	je	.Ltmp3577 # Offset: 645
    00000287: 	testq	%r15, %r15
    0000028a: 	je	.Ltmp3578 # Offset: 650
.Ltmp3577:
    00000290: 	movq	%r14, 0xd0(%rsp)
    00000298: 	cmpq	$0xf, %r14
    0000029c: 	ja	.Ltmp3579 # Offset: 668
    000002a2: 	cmpq	$0x1, %r14
    000002a6: 	jne	.Ltmp3580 # Offset: 678
    000002ac: 	movzbl	(%r15), %eax
    000002b0: 	movb	%al, 0x170(%rsp)
    000002b7: 	movq	0x8(%rsp), %rax
.Ltmp3594:
    000002bc: 	movq	%r14, 0x168(%rsp)
    000002c4: 	movb	$0x0, (%rax,%r14)
    000002c9: 	movabsq	$0x3fffffffffffffff, %rax
    000002d3: 	cmpq	%rax, 0x168(%rsp)
    000002db: 	je	.Ltmp3581 # Offset: 731
    000002e1: 	leaq	0x160(%rsp), %r15
    000002e9: 	movl	$0x1, %edx
    000002ee: 	leaq	DATAat0x34149(%rip), %rsi
    000002f5: 	movq	%r15, %rdi
    000002f8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 760
    000002fd: 	movq	0x168(%rsp), %r8
    00000305: 	movq	0x188(%rsp), %rdx
    0000030d: 	movl	$0xf, %eax
    00000312: 	movq	0x160(%rsp), %r9
    0000031a: 	movq	%rax, %rdi
    0000031d: 	cmpq	0x8(%rsp), %r9
    00000322: 	cmovneq	0x170(%rsp), %rdi
    0000032b: 	leaq	(%r8,%rdx), %rcx
    0000032f: 	movq	0x180(%rsp), %rsi
    00000337: 	cmpq	%rdi, %rcx
    0000033a: 	jbe	.Ltmp3582 # Offset: 826
    0000033c: 	cmpq	0x10(%rsp), %rsi
    00000341: 	cmovneq	0x190(%rsp), %rax
    0000034a: 	cmpq	%rax, %rcx
    0000034d: 	jbe	.Ltmp3583 # Offset: 845
.Ltmp3582:
    00000353: 	movq	%r15, %rdi
    00000356: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 854
    0000035b: 	leaq	0x1b0(%rsp), %rdi
    00000363: 	leaq	0x10(%rax), %rdx
    00000367: 	movq	%rdi, 0x1a0(%rsp)
    0000036f: 	movq	(%rax), %rcx
    00000372: 	movq	%rdi, 0x20(%rsp)
    00000377: 	cmpq	%rdx, %rcx
    0000037a: 	je	.Ltmp3584 # Offset: 890
.Ltmp3598:
    00000380: 	movq	%rcx, 0x1a0(%rsp)
    00000388: 	movq	0x10(%rax), %rcx
    0000038c: 	movq	%rcx, 0x1b0(%rsp)
.Ltmp3596:
    00000394: 	movq	0x8(%rax), %rcx
    00000398: 	movq	%rcx, 0x1a8(%rsp)
    000003a0: 	movq	$0x0, 0x8(%rax)
    000003a8: 	movb	$0x0, 0x10(%rax)
    000003ac: 	movq	%rdx, (%rax)
    000003af: 	movabsq	$0x3fffffffffffffff, %rax
    000003b9: 	subq	0x1a8(%rsp), %rax
    000003c1: 	cmpq	$0x7, %rax
    000003c5: 	jbe	.Ltmp3585 # Offset: 965
    000003cb: 	leaq	0x1a0(%rsp), %rax
    000003d3: 	movl	$0x8, %edx
    000003d8: 	leaq	DATAat0x3429c(%rip), %rsi
    000003df: 	movq	%rax, %rdi
    000003e2: 	movq	%rax, 0x48(%rsp)
    000003e7: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 999
    000003ec: 	leaq	0x1d0(%rsp), %rdi
    000003f4: 	leaq	0x10(%rax), %rdx
    000003f8: 	movq	%rdi, 0x1c0(%rsp)
    00000400: 	movq	(%rax), %rcx
    00000403: 	movq	%rdi, 0x18(%rsp)
    00000408: 	cmpq	%rdx, %rcx
    0000040b: 	je	.Ltmp3586 # Offset: 1035
    00000411: 	movq	%rcx, 0x1c0(%rsp)
    00000419: 	movq	0x10(%rax), %rcx
    0000041d: 	movq	%rcx, 0x1d0(%rsp)
.Ltmp3595:
    00000425: 	movq	0x8(%rax), %rcx
    00000429: 	movq	0x60(%rsp), %rsi
    0000042e: 	movq	0x30(%rsp), %rdi
    00000433: 	movq	%rcx, 0x1c8(%rsp)
    0000043b: 	leaq	0x1c0(%rsp), %rcx
    00000443: 	movq	%rdx, (%rax)
    00000446: 	addq	%rdi, %rsi
    00000449: 	movq	%r12, %rdx
    0000044c: 	movq	$0x0, 0x8(%rax)
    00000454: 	movb	$0x0, 0x10(%rax)
    00000458: 	movq	%rcx, 0x50(%rsp)
    0000045d: 	callq	_Z16TestOneContainerIPtEvT_S1_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1117
    00000462: 	movq	0x1c0(%rsp), %rdi
    0000046a: 	cmpq	0x18(%rsp), %rdi
    0000046f: 	je	.Ltmp3587 # Offset: 1135
    00000471: 	movq	0x1d0(%rsp), %rax
    00000479: 	leaq	0x1(%rax), %rsi
    0000047d: 	callq	_ZdlPvm@PLT # Offset: 1149
.Ltmp3587:
    00000482: 	movq	0x1a0(%rsp), %rdi
    0000048a: 	cmpq	0x20(%rsp), %rdi
    0000048f: 	je	.Ltmp3588 # Offset: 1167
    00000491: 	movq	0x1b0(%rsp), %rax
    00000499: 	leaq	0x1(%rax), %rsi
    0000049d: 	callq	_ZdlPvm@PLT # Offset: 1181
.Ltmp3588:
    000004a2: 	movq	0x160(%rsp), %rdi
    000004aa: 	cmpq	0x8(%rsp), %rdi
    000004af: 	je	.Ltmp3589 # Offset: 1199
    000004b1: 	movq	0x170(%rsp), %rax
    000004b9: 	leaq	0x1(%rax), %rsi
    000004bd: 	callq	_ZdlPvm@PLT # Offset: 1213
.Ltmp3589:
    000004c2: 	movq	0x180(%rsp), %rdi
    000004ca: 	cmpq	0x10(%rsp), %rdi
    000004cf: 	je	.Ltmp3590 # Offset: 1231
    000004d1: 	movq	0x190(%rsp), %rax
    000004d9: 	leaq	0x1(%rax), %rsi
    000004dd: 	callq	_ZdlPvm@PLT # Offset: 1245
.Ltmp3590:
    000004e2: 	movq	0x30(%rsp), %rdi
    000004e7: 	movl	$0x2, %esi
    000004ec: 	callq	_ZdlPvm@PLT # Offset: 1260
    000004f1: 	movq	0x58(%rsp), %rdi
    000004f6: 	cmpq	%rdi, 0x28(%rsp)
    000004fb: 	je	.Ltmp3591 # Offset: 1275
    00000501: 	addq	$0x8, 0x28(%rsp)
    00000507: 	movq	0x28(%rsp), %rax
    0000050c: 	movq	-0x8(%rax), %r12
    00000510: 	movabsq	$0x3ffffffffffffffc, %rax
    0000051a: 	cmpq	%rax, %r12
    0000051d: 	jbe	.Ltmp3592 # Offset: 1309
    00000523: 	callq	__cxa_throw_bad_array_new_length@PLT # Offset: 1315
    00000528: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3580:
    00000530: 	testq	%r14, %r14
    00000533: 	jne	.Ltmp3593 # Offset: 1331
    00000539: 	movq	0x8(%rsp), %rax
    0000053e: 	jmp	.Ltmp3594 # Offset: 1342
    00000543: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3579:
    00000548: 	leaq	0xd0(%rsp), %rax
    00000550: 	leaq	0x160(%rsp), %rdi
    00000558: 	xorl	%edx, %edx
    0000055a: 	movq	%rax, %rsi
    0000055d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1373
    00000562: 	movq	%rax, 0x160(%rsp)
    0000056a: 	movq	%rax, %rdi
    0000056d: 	movq	0xd0(%rsp), %rax
    00000575: 	movq	%rax, 0x170(%rsp)
.Ltmp3768:
    0000057d: 	movq	%r14, %rdx
    00000580: 	movq	%r15, %rsi
    00000583: 	callq	memcpy@PLT # Offset: 1411
    00000588: 	movq	0xd0(%rsp), %r14
    00000590: 	movq	0x160(%rsp), %rax
    00000598: 	jmp	.Ltmp3594 # Offset: 1432
    0000059d: 	nopl	(%rax) # Size: 3
.Ltmp3586:
    000005a0: 	movdqu	0x10(%rax), %xmm4
    000005a5: 	movaps	%xmm4, 0x1d0(%rsp)
    000005ad: 	jmp	.Ltmp3595 # Offset: 1453
.Ltmp3584:
    000005b2: 	movdqu	0x10(%rax), %xmm5
    000005b7: 	movaps	%xmm5, 0x1b0(%rsp)
    000005bf: 	jmp	.Ltmp3596 # Offset: 1471
.Ltmp3570:
    000005c4: 	leal	0x5(%rax), %esi
    000005c7: 	jmp	.Ltmp3597 # Offset: 1479
.Ltmp3583:
    000005cc: 	movq	0x40(%rsp), %rdi
    000005d1: 	movq	%r9, %rcx
    000005d4: 	xorl	%edx, %edx
    000005d6: 	xorl	%esi, %esi
    000005d8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@PLT # Offset: 1496
    000005dd: 	leaq	0x1b0(%rsp), %rsi
    000005e5: 	leaq	0x10(%rax), %rdx
    000005e9: 	movq	%rsi, 0x1a0(%rsp)
    000005f1: 	movq	(%rax), %rcx
    000005f4: 	movq	%rsi, 0x20(%rsp)
    000005f9: 	cmpq	%rdx, %rcx
    000005fc: 	jne	.Ltmp3598 # Offset: 1532
    00000602: 	movdqu	0x10(%rax), %xmm6
    00000607: 	movaps	%xmm6, 0x1b0(%rsp)
    0000060f: 	jmp	.Ltmp3596 # Offset: 1551
.Ltmp3571:
    00000614: 	leal	0x6(%rax), %esi
    00000617: 	jmp	.Ltmp3597 # Offset: 1559
.Ltmp3572:
    0000061c: 	leal	0x7(%rax), %esi
    0000061f: 	jmp	.Ltmp3597 # Offset: 1567
.Ltmp3591:
    00000624: 	movq	0x68(%rsp), %rax
    00000629: 	movl	$0x5, %r12d
    0000062f: 	movabsq	$0x346dc5d63886594b, %rbp
    00000639: 	leaq	_ZZNSt8__detail18__to_chars_10_implImEEvPcjT_E8__digits(%rip), %rbx
    00000640: 	movabsq	$0x28f5c28f5c28f5c3, %r13
    0000064a: 	movq	%rax, 0x30(%rsp)
    0000064f: 	nop # Size: 1
.Ltmp3629:
    00000650: 	leaq	(%r12,%r12), %r14
    00000654: 	testq	%r12, %r12
    00000657: 	je	.Ltmp3599 # Offset: 1623
    0000065d: 	movq	%r14, %rdi
    00000660: 	callq	_Znwm@PLT # Offset: 1632
    00000665: 	leaq	(%rax,%r14), %rsi
    00000669: 	xorl	%r8d, %r8d
    0000066c: 	leaq	0x2(%rax), %rdi
    00000670: 	movq	%rax, 0x28(%rsp)
    00000675: 	movq	%rsi, 0x70(%rsp)
    0000067a: 	movw	%r8w, (%rax)
    0000067e: 	movq	%rdi, 0x60(%rsp)
    00000683: 	cmpq	$0x1, %r12
    00000687: 	je	.Ltmp3600 # Offset: 1671
    0000068d: 	cmpq	%rdi, %rsi
    00000690: 	je	.Ltmp3601 # Offset: 1680
    00000692: 	xorl	%esi, %esi
    00000694: 	leaq	-0x2(%r14), %rdx
    00000698: 	callq	memset@PLT # Offset: 1688
    0000069d: 	movq	0x70(%rsp), %rsi
    000006a2: 	movq	%rsi, 0x60(%rsp)
.Ltmp3601:
    000006a7: 	cmpq	$0x9, %r12
    000006ab: 	jbe	.Ltmp3600 # Offset: 1707
    000006b1: 	cmpq	$0x63, %r12
    000006b5: 	jbe	.Ltmp3602 # Offset: 1717
    000006bb: 	cmpq	$0x3e7, %r12
    000006c2: 	jbe	.Ltmp3603 # Offset: 1730
    000006c8: 	cmpq	$0x270f, %r12
    000006cf: 	jbe	.Ltmp3604 # Offset: 1743
    000006d5: 	movq	%r12, %rdx
    000006d8: 	movl	$0x1, %esi
    000006dd: 	jmp	.Ltmp3605 # Offset: 1757
    000006df: 	nop # Size: 1
.Ltmp3609:
    000006e0: 	cmpq	$0xf423f, %rcx
    000006e7: 	jbe	.Ltmp3606 # Offset: 1767
    000006ed: 	cmpq	$0x98967f, %rcx
    000006f4: 	jbe	.Ltmp3607 # Offset: 1780
    000006fa: 	cmpq	$0x5f5e0ff, %rcx
    00000701: 	jbe	.Ltmp3608 # Offset: 1793
.Ltmp3605:
    00000707: 	movq	%rdx, %rax
    0000070a: 	movq	%rdx, %rcx
    0000070d: 	mulq	%rbp
    00000710: 	movl	%esi, %eax
    00000712: 	addl	$0x4, %esi
    00000715: 	shrq	$0xb, %rdx
    00000719: 	cmpq	$0x1869f, %rcx
    00000720: 	ja	.Ltmp3609 # Offset: 1824
.Ltmp3630:
    00000722: 	movq	0x10(%rsp), %rax
    00000727: 	movq	0x40(%rsp), %rdi
    0000072c: 	xorl	%edx, %edx
    0000072e: 	movq	%rax, 0x180(%rsp)
    00000736: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEmc@PLT # Offset: 1846
    0000073b: 	movl	0x188(%rsp), %eax
    00000742: 	movq	0x180(%rsp), %rdi
    0000074a: 	movq	%r12, %rcx
    0000074d: 	leal	-0x1(%rax), %esi
    00000750: 	cmpq	$0x63, %r12
    00000754: 	jbe	.Ltmp3610 # Offset: 1876
    00000756: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3611:
    00000760: 	movq	%rcx, %rdx
    00000763: 	shrq	$0x2, %rdx
    00000767: 	movq	%rdx, %rax
    0000076a: 	mulq	%r13
    0000076d: 	movq	%rdx, %r8
    00000770: 	andq	$-0x4, %rdx
    00000774: 	shrq	$0x2, %r8
    00000778: 	addq	%r8, %rdx
    0000077b: 	leaq	(%rdx,%rdx,4), %rax
    0000077f: 	movq	%rcx, %rdx
    00000782: 	shlq	$0x2, %rax
    00000786: 	subq	%rax, %rdx
    00000789: 	movq	%rcx, %rax
    0000078c: 	movq	%r8, %rcx
    0000078f: 	movl	%esi, %r8d
    00000792: 	movzbl	0x1(%rbx,%rdx,2), %r9d
    00000798: 	movzbl	(%rbx,%rdx,2), %edx
    0000079c: 	movb	%r9b, (%rdi,%r8)
    000007a0: 	leal	-0x1(%rsi), %r8d
    000007a4: 	subl	$0x2, %esi
    000007a7: 	movb	%dl, (%rdi,%r8)
    000007ab: 	cmpq	$0x270f, %rax
    000007b1: 	ja	.Ltmp3611 # Offset: 1969
.Ltmp3610:
    000007b3: 	leal	0x30(%rcx), %eax
    000007b6: 	cmpq	$0x9, %rcx
    000007ba: 	jbe	.Ltmp3612 # Offset: 1978
    000007bc: 	movzbl	0x1(%rbx,%rcx,2), %eax
    000007c1: 	movb	%al, 0x1(%rdi)
    000007c4: 	movzbl	(%rbx,%rcx,2), %eax
.Ltmp3612:
    000007c8: 	movb	%al, (%rdi)
    000007ca: 	movq	0x8(%rsp), %rax
    000007cf: 	movq	0x128(%rsp), %r14
    000007d7: 	movq	%rax, 0x160(%rsp)
    000007df: 	movq	0x120(%rsp), %rax
    000007e7: 	movq	%rax, %rdi
    000007ea: 	movq	%rax, 0x78(%rsp)
    000007ef: 	addq	%r14, %rdi
    000007f2: 	je	.Ltmp3613 # Offset: 2034
    000007f4: 	testq	%rax, %rax
    000007f7: 	je	.Ltmp3614 # Offset: 2039
.Ltmp3613:
    000007fd: 	movq	%r14, 0xd0(%rsp)
    00000805: 	cmpq	$0xf, %r14
    00000809: 	ja	.Ltmp3615 # Offset: 2057
    0000080f: 	cmpq	$0x1, %r14
    00000813: 	jne	.Ltmp3616 # Offset: 2067
    00000819: 	movq	0x78(%rsp), %rax
    0000081e: 	movzbl	(%rax), %eax
    00000821: 	movb	%al, 0x170(%rsp)
    00000828: 	movq	0x8(%rsp), %rax
.Ltmp3632:
    0000082d: 	movq	%r14, 0x168(%rsp)
    00000835: 	movb	$0x0, (%rax,%r14)
    0000083a: 	movabsq	$0x3fffffffffffffff, %rax
    00000844: 	cmpq	%rax, 0x168(%rsp)
    0000084c: 	je	.Ltmp3617 # Offset: 2124
    00000852: 	movl	$0x1, %edx
    00000857: 	leaq	DATAat0x34149(%rip), %rsi
    0000085e: 	movq	%r15, %rdi
    00000861: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2145
    00000866: 	movq	0x168(%rsp), %r8
    0000086e: 	movq	0x188(%rsp), %rdx
    00000876: 	movl	$0xf, %eax
    0000087b: 	movq	0x160(%rsp), %r9
    00000883: 	movq	%rax, %rdi
    00000886: 	cmpq	0x8(%rsp), %r9
    0000088b: 	cmovneq	0x170(%rsp), %rdi
    00000894: 	leaq	(%r8,%rdx), %rcx
    00000898: 	movq	0x180(%rsp), %rsi
    000008a0: 	cmpq	%rdi, %rcx
    000008a3: 	jbe	.Ltmp3618 # Offset: 2211
    000008a5: 	cmpq	0x10(%rsp), %rsi
    000008aa: 	cmovneq	0x190(%rsp), %rax
    000008b3: 	cmpq	%rax, %rcx
    000008b6: 	jbe	.Ltmp3619 # Offset: 2230
.Ltmp3618:
    000008bc: 	movq	%r15, %rdi
    000008bf: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2239
    000008c4: 	movq	0x20(%rsp), %rsi
    000008c9: 	leaq	0x10(%rax), %rdx
    000008cd: 	movq	%rsi, 0x1a0(%rsp)
    000008d5: 	movq	(%rax), %rcx
    000008d8: 	cmpq	%rdx, %rcx
    000008db: 	je	.Ltmp3620 # Offset: 2267
.Ltmp3635:
    000008e1: 	movq	%rcx, 0x1a0(%rsp)
    000008e9: 	movq	0x10(%rax), %rcx
    000008ed: 	movq	%rcx, 0x1b0(%rsp)
.Ltmp3634:
    000008f5: 	movq	0x8(%rax), %rcx
    000008f9: 	movq	%rcx, 0x1a8(%rsp)
    00000901: 	movq	$0x0, 0x8(%rax)
    00000909: 	movb	$0x0, 0x10(%rax)
    0000090d: 	movq	%rdx, (%rax)
    00000910: 	movabsq	$0x3fffffffffffffff, %rax
    0000091a: 	subq	0x1a8(%rsp), %rax
    00000922: 	cmpq	$0xb, %rax
    00000926: 	jbe	.Ltmp3621 # Offset: 2342
    0000092c: 	movq	0x48(%rsp), %rdi
    00000931: 	movl	$0xc, %edx
    00000936: 	leaq	DATAat0x342a5(%rip), %rsi
    0000093d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2365
    00000942: 	movq	0x18(%rsp), %rsi
    00000947: 	leaq	0x10(%rax), %rdx
    0000094b: 	movq	%rsi, 0x1c0(%rsp)
    00000953: 	movq	(%rax), %rcx
    00000956: 	cmpq	%rdx, %rcx
    00000959: 	je	.Ltmp3622 # Offset: 2393
    0000095f: 	movq	%rcx, 0x1c0(%rsp)
    00000967: 	movq	0x10(%rax), %rcx
    0000096b: 	movq	%rcx, 0x1d0(%rsp)
.Ltmp3633:
    00000973: 	movq	0x8(%rax), %rcx
    00000977: 	movq	0x60(%rsp), %rsi
    0000097c: 	movq	0x28(%rsp), %rdi
    00000981: 	movq	%rcx, 0x1c8(%rsp)
    00000989: 	movq	0x50(%rsp), %rcx
    0000098e: 	movq	%rdx, (%rax)
    00000991: 	movq	%r12, %rdx
    00000994: 	movq	$0x0, 0x8(%rax)
    0000099c: 	movb	$0x0, 0x10(%rax)
    000009a0: 	callq	_Z16TestOneContainerIN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEEEvT_S7_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2464
    000009a5: 	movq	0x1c0(%rsp), %rdi
    000009ad: 	cmpq	0x18(%rsp), %rdi
    000009b2: 	je	.Ltmp3623 # Offset: 2482
    000009b4: 	movq	0x1d0(%rsp), %rax
    000009bc: 	leaq	0x1(%rax), %rsi
    000009c0: 	callq	_ZdlPvm@PLT # Offset: 2496
.Ltmp3623:
    000009c5: 	movq	0x1a0(%rsp), %rdi
    000009cd: 	cmpq	0x20(%rsp), %rdi
    000009d2: 	je	.Ltmp3624 # Offset: 2514
    000009d4: 	movq	0x1b0(%rsp), %rax
    000009dc: 	leaq	0x1(%rax), %rsi
    000009e0: 	callq	_ZdlPvm@PLT # Offset: 2528
.Ltmp3624:
    000009e5: 	movq	0x160(%rsp), %rdi
    000009ed: 	cmpq	0x8(%rsp), %rdi
    000009f2: 	je	.Ltmp3625 # Offset: 2546
    000009f4: 	movq	0x170(%rsp), %rax
    000009fc: 	leaq	0x1(%rax), %rsi
    00000a00: 	callq	_ZdlPvm@PLT # Offset: 2560
.Ltmp3625:
    00000a05: 	movq	0x180(%rsp), %rdi
    00000a0d: 	cmpq	0x10(%rsp), %rdi
    00000a12: 	je	.Ltmp3626 # Offset: 2578
    00000a14: 	movq	0x190(%rsp), %rax
    00000a1c: 	leaq	0x1(%rax), %rsi
    00000a20: 	callq	_ZdlPvm@PLT # Offset: 2592
.Ltmp3626:
    00000a25: 	movq	0x28(%rsp), %rdi
    00000a2a: 	testq	%rdi, %rdi
    00000a2d: 	je	.Ltmp3627 # Offset: 2605
    00000a2f: 	movq	0x70(%rsp), %rsi
    00000a34: 	subq	%rdi, %rsi
    00000a37: 	callq	_ZdlPvm@PLT # Offset: 2615
.Ltmp3627:
    00000a3c: 	movq	0x58(%rsp), %rdi
    00000a41: 	cmpq	%rdi, 0x30(%rsp)
    00000a46: 	je	.Ltmp3628 # Offset: 2630
    00000a4c: 	movq	0x30(%rsp), %rax
    00000a51: 	movq	(%rax), %r12
    00000a54: 	addq	$0x8, %rax
    00000a58: 	movq	%rax, 0x30(%rsp)
    00000a5d: 	movabsq	$0x3fffffffffffffff, %rax
    00000a67: 	cmpq	%rax, %r12
    00000a6a: 	jbe	.Ltmp3629 # Offset: 2666
    00000a70: 	leaq	DATAat0x342e0(%rip), %rdi
    00000a77: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 2679
    00000a7c: 	nopl	(%rax) # Size: 4
.Ltmp3599:
    00000a80: 	movq	$0x0, 0x70(%rsp)
    00000a89: 	movq	$0x0, 0x28(%rsp)
    00000a92: 	movq	$0x0, 0x60(%rsp)
.Ltmp3600:
    00000a9b: 	movl	$0x1, %esi
    00000aa0: 	jmp	.Ltmp3630 # Offset: 2720
    00000aa5: 	nopl	(%rax) # Size: 3
.Ltmp3616:
    00000aa8: 	testq	%r14, %r14
    00000aab: 	jne	.Ltmp3631 # Offset: 2731
    00000ab1: 	movq	0x8(%rsp), %rax
    00000ab6: 	jmp	.Ltmp3632 # Offset: 2742
.Ltmp3615:
    00000abb: 	leaq	0xd0(%rsp), %rax
    00000ac3: 	xorl	%edx, %edx
    00000ac5: 	movq	%r15, %rdi
    00000ac8: 	movq	%rax, %rsi
    00000acb: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 2763
    00000ad0: 	movq	%rax, 0x160(%rsp)
    00000ad8: 	movq	%rax, %rdi
    00000adb: 	movq	0xd0(%rsp), %rax
    00000ae3: 	movq	%rax, 0x170(%rsp)
.Ltmp3767:
    00000aeb: 	movq	0x78(%rsp), %rsi
    00000af0: 	movq	%r14, %rdx
    00000af3: 	callq	memcpy@PLT # Offset: 2803
    00000af8: 	movq	0xd0(%rsp), %r14
    00000b00: 	movq	0x160(%rsp), %rax
    00000b08: 	jmp	.Ltmp3632 # Offset: 2824
.Ltmp3622:
    00000b0d: 	movdqu	0x10(%rax), %xmm6
    00000b12: 	movaps	%xmm6, 0x1d0(%rsp)
    00000b1a: 	jmp	.Ltmp3633 # Offset: 2842
.Ltmp3620:
    00000b1f: 	movdqu	0x10(%rax), %xmm6
    00000b24: 	movaps	%xmm6, 0x1b0(%rsp)
    00000b2c: 	jmp	.Ltmp3634 # Offset: 2860
.Ltmp3606:
    00000b31: 	leal	0x5(%rax), %esi
    00000b34: 	jmp	.Ltmp3630 # Offset: 2868
.Ltmp3619:
    00000b39: 	movq	0x40(%rsp), %rdi
    00000b3e: 	movq	%r9, %rcx
    00000b41: 	xorl	%edx, %edx
    00000b43: 	xorl	%esi, %esi
    00000b45: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@PLT # Offset: 2885
    00000b4a: 	movq	0x20(%rsp), %rdi
    00000b4f: 	leaq	0x10(%rax), %rdx
    00000b53: 	movq	%rdi, 0x1a0(%rsp)
    00000b5b: 	movq	(%rax), %rcx
    00000b5e: 	cmpq	%rdx, %rcx
    00000b61: 	jne	.Ltmp3635 # Offset: 2913
    00000b67: 	movdqu	0x10(%rax), %xmm4
    00000b6c: 	movaps	%xmm4, 0x1b0(%rsp)
    00000b74: 	jmp	.Ltmp3634 # Offset: 2932
.Ltmp3607:
    00000b79: 	leal	0x6(%rax), %esi
    00000b7c: 	jmp	.Ltmp3630 # Offset: 2940
.Ltmp3608:
    00000b81: 	leal	0x7(%rax), %esi
    00000b84: 	jmp	.Ltmp3630 # Offset: 2948
.Ltmp3628:
    00000b89: 	leaq	0xd0(%rsp), %rax
    00000b91: 	movl	$0x5, %r13d
    00000b97: 	leaq	_ZZNSt8__detail18__to_chars_10_implImEEvPcjT_E8__digits(%rip), %r12
    00000b9e: 	movq	%rax, 0x60(%rsp)
    00000ba3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3669:
    00000ba8: 	movq	0x60(%rsp), %rdi
    00000bad: 	pxor	%xmm0, %xmm0
    00000bb1: 	movq	%r13, %rsi
    00000bb4: 	movq	$0x0, 0xd0(%rsp)
    00000bc0: 	movq	$0x0, 0xd8(%rsp)
    00000bcc: 	movaps	%xmm0, 0xe0(%rsp)
    00000bd4: 	movaps	%xmm0, 0xf0(%rsp)
    00000bdc: 	movaps	%xmm0, 0x100(%rsp)
    00000be4: 	movaps	%xmm0, 0x110(%rsp)
    00000bec: 	callq	_ZNSt11_Deque_baseItSaItEE17_M_initialize_mapEm # Offset: 3052
    00000bf1: 	movq	0xf8(%rsp), %rbx
    00000bf9: 	movq	0x118(%rsp), %rbp
    00000c01: 	xorl	%eax, %eax
    00000c03: 	movq	%rbx, %rsi
    00000c06: 	cmpq	%rbp, %rbx
    00000c09: 	jae	.Ltmp3636 # Offset: 3081
    00000c0b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3637:
    00000c10: 	movq	(%rsi), %rdx
    00000c13: 	xorl	%edi, %edi
    00000c15: 	addq	$0x8, %rsi
    00000c19: 	movw	%di, (%rdx)
    00000c1c: 	leaq	0xa(%rdx), %rdi
    00000c20: 	andq	$-0x8, %rdi
    00000c24: 	movq	$0x0, 0x2(%rdx)
    00000c2c: 	movq	$0x0, 0x1f8(%rdx)
    00000c37: 	subl	%edi, %edx
    00000c39: 	leal	0x200(%rdx), %ecx
    00000c3f: 	shrl	$0x3, %ecx
    00000c42: 	rep		stosq	%rax, %es:(%rdi)
    00000c45: 	cmpq	%rbp, %rsi
    00000c48: 	jb	.Ltmp3637 # Offset: 3144
.Ltmp3636:
    00000c4a: 	movq	0x100(%rsp), %rax
    00000c52: 	movq	0x108(%rsp), %rdi
    00000c5a: 	movq	%rax, 0x28(%rsp)
    00000c5f: 	movq	%rdi, 0x30(%rsp)
    00000c64: 	cmpq	%rdi, %rax
    00000c67: 	je	.Ltmp3638 # Offset: 3175
    00000c69: 	xorl	%esi, %esi
    00000c6b: 	movq	%rdi, %rax
    00000c6e: 	leaq	0x2(%rdi), %rdi
    00000c72: 	movw	%si, -0x2(%rdi)
    00000c76: 	movq	0x28(%rsp), %rsi
    00000c7b: 	cmpq	%rdi, %rsi
    00000c7e: 	je	.Ltmp3638 # Offset: 3198
    00000c80: 	leaq	-0x2(%rsi), %rdx
    00000c84: 	xorl	%esi, %esi
    00000c86: 	subq	%rax, %rdx
    00000c89: 	callq	memset@PLT # Offset: 3209
.Ltmp3638:
    00000c8e: 	cmpq	$0x9, %r13
    00000c92: 	jbe	.Ltmp3639 # Offset: 3218
    00000c98: 	cmpq	$0x63, %r13
    00000c9c: 	jbe	.Ltmp3640 # Offset: 3228
    00000ca2: 	cmpq	$0x3e7, %r13
    00000ca9: 	jbe	.Ltmp3641 # Offset: 3241
    00000caf: 	cmpq	$0x270f, %r13
    00000cb6: 	jbe	.Ltmp3642 # Offset: 3254
    00000cbc: 	movq	%r13, %rdx
    00000cbf: 	movl	$0x1, %esi
    00000cc4: 	jmp	.Ltmp3643 # Offset: 3268
    00000cc6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3647:
    00000cd0: 	cmpq	$0xf423f, %rcx
    00000cd7: 	jbe	.Ltmp3644 # Offset: 3287
    00000cdd: 	cmpq	$0x98967f, %rcx
    00000ce4: 	jbe	.Ltmp3645 # Offset: 3300
    00000cea: 	cmpq	$0x5f5e0ff, %rcx
    00000cf1: 	jbe	.Ltmp3646 # Offset: 3313
.Ltmp3643:
    00000cf7: 	movabsq	$0x346dc5d63886594b, %rax
    00000d01: 	movq	%rdx, %rcx
    00000d04: 	mulq	%rdx
    00000d07: 	movl	%esi, %eax
    00000d09: 	addl	$0x4, %esi
    00000d0c: 	shrq	$0xb, %rdx
    00000d10: 	cmpq	$0x1869f, %rcx
    00000d17: 	ja	.Ltmp3647 # Offset: 3351
.Ltmp3674:
    00000d19: 	movq	0x10(%rsp), %rax
    00000d1e: 	movq	0x40(%rsp), %rdi
    00000d23: 	xorl	%edx, %edx
    00000d25: 	movq	%rax, 0x180(%rsp)
    00000d2d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEmc@PLT # Offset: 3373
    00000d32: 	movl	0x188(%rsp), %eax
    00000d39: 	movq	0x180(%rsp), %rdi
    00000d41: 	movq	%r13, %rcx
    00000d44: 	leal	-0x1(%rax), %esi
    00000d47: 	cmpq	$0x63, %r13
    00000d4b: 	jbe	.Ltmp3648 # Offset: 3403
    00000d4d: 	nopl	(%rax) # Size: 3
.Ltmp3649:
    00000d50: 	movabsq	$0x28f5c28f5c28f5c3, %rax
    00000d5a: 	movq	%rcx, %rdx
    00000d5d: 	shrq	$0x2, %rdx
    00000d61: 	mulq	%rdx
    00000d64: 	movq	%rdx, %r8
    00000d67: 	andq	$-0x4, %rdx
    00000d6b: 	shrq	$0x2, %r8
    00000d6f: 	addq	%r8, %rdx
    00000d72: 	leaq	(%rdx,%rdx,4), %rax
    00000d76: 	movq	%rcx, %rdx
    00000d79: 	shlq	$0x2, %rax
    00000d7d: 	subq	%rax, %rdx
    00000d80: 	movq	%rcx, %rax
    00000d83: 	movq	%r8, %rcx
    00000d86: 	movl	%esi, %r8d
    00000d89: 	movzbl	0x1(%r12,%rdx,2), %r9d
    00000d8f: 	movzbl	(%r12,%rdx,2), %edx
    00000d94: 	movb	%r9b, (%rdi,%r8)
    00000d98: 	leal	-0x1(%rsi), %r8d
    00000d9c: 	subl	$0x2, %esi
    00000d9f: 	movb	%dl, (%rdi,%r8)
    00000da3: 	cmpq	$0x270f, %rax
    00000da9: 	ja	.Ltmp3649 # Offset: 3497
.Ltmp3648:
    00000dab: 	leal	0x30(%rcx), %eax
    00000dae: 	cmpq	$0x9, %rcx
    00000db2: 	jbe	.Ltmp3650 # Offset: 3506
    00000db4: 	movzbl	0x1(%r12,%rcx,2), %eax
    00000dba: 	movb	%al, 0x1(%rdi)
    00000dbd: 	movzbl	(%r12,%rcx,2), %eax
.Ltmp3650:
    00000dc2: 	movb	%al, (%rdi)
    00000dc4: 	movq	0x8(%rsp), %rax
    00000dc9: 	movq	0x128(%rsp), %r14
    00000dd1: 	movq	%rax, 0x160(%rsp)
    00000dd9: 	movq	0x120(%rsp), %rax
    00000de1: 	movq	%rax, %rdi
    00000de4: 	movq	%rax, 0x70(%rsp)
    00000de9: 	addq	%r14, %rdi
    00000dec: 	je	.Ltmp3651 # Offset: 3564
    00000dee: 	testq	%rax, %rax
    00000df1: 	je	.Ltmp3652 # Offset: 3569
.Ltmp3651:
    00000df7: 	movq	%r14, 0xb0(%rsp)
    00000dff: 	cmpq	$0xf, %r14
    00000e03: 	ja	.Ltmp3653 # Offset: 3587
    00000e09: 	cmpq	$0x1, %r14
    00000e0d: 	jne	.Ltmp3654 # Offset: 3597
    00000e13: 	movq	0x70(%rsp), %rax
    00000e18: 	movzbl	(%rax), %eax
    00000e1b: 	movb	%al, 0x170(%rsp)
    00000e22: 	movq	0x8(%rsp), %rax
.Ltmp3671:
    00000e27: 	movq	%r14, 0x168(%rsp)
    00000e2f: 	movb	$0x0, (%rax,%r14)
    00000e34: 	movabsq	$0x3fffffffffffffff, %rax
    00000e3e: 	cmpq	%rax, 0x168(%rsp)
    00000e46: 	je	.Ltmp3655 # Offset: 3654
    00000e4c: 	movl	$0x1, %edx
    00000e51: 	leaq	DATAat0x34149(%rip), %rsi
    00000e58: 	movq	%r15, %rdi
    00000e5b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3675
    00000e60: 	movq	0x168(%rsp), %r8
    00000e68: 	movq	0x188(%rsp), %rdx
    00000e70: 	movl	$0xf, %eax
    00000e75: 	movq	0x160(%rsp), %r9
    00000e7d: 	movq	%rax, %rdi
    00000e80: 	cmpq	0x8(%rsp), %r9
    00000e85: 	cmovneq	0x170(%rsp), %rdi
    00000e8e: 	leaq	(%r8,%rdx), %rcx
    00000e92: 	movq	0x180(%rsp), %rsi
    00000e9a: 	cmpq	%rdi, %rcx
    00000e9d: 	jbe	.Ltmp3656 # Offset: 3741
    00000e9f: 	cmpq	0x10(%rsp), %rsi
    00000ea4: 	cmovneq	0x190(%rsp), %rax
    00000ead: 	cmpq	%rax, %rcx
    00000eb0: 	jbe	.Ltmp3657 # Offset: 3760
.Ltmp3656:
    00000eb6: 	movq	%r15, %rdi
    00000eb9: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3769
    00000ebe: 	movq	0x20(%rsp), %rdi
    00000ec3: 	leaq	0x10(%rax), %rdx
    00000ec7: 	movq	%rdi, 0x1a0(%rsp)
    00000ecf: 	movq	(%rax), %rcx
    00000ed2: 	cmpq	%rdx, %rcx
    00000ed5: 	je	.Ltmp3658 # Offset: 3797
.Ltmp3675:
    00000edb: 	movq	%rcx, 0x1a0(%rsp)
    00000ee3: 	movq	0x10(%rax), %rcx
    00000ee7: 	movq	%rcx, 0x1b0(%rsp)
.Ltmp3673:
    00000eef: 	movq	0x8(%rax), %rcx
    00000ef3: 	movq	%rcx, 0x1a8(%rsp)
    00000efb: 	movq	$0x0, 0x8(%rax)
    00000f03: 	movb	$0x0, 0x10(%rax)
    00000f07: 	movq	%rdx, (%rax)
    00000f0a: 	movabsq	$0x3fffffffffffffff, %rax
    00000f14: 	subq	0x1a8(%rsp), %rax
    00000f1c: 	cmpq	$0xa, %rax
    00000f20: 	jbe	.Ltmp3659 # Offset: 3872
    00000f26: 	movq	0x48(%rsp), %rdi
    00000f2b: 	movl	$0xb, %edx
    00000f30: 	leaq	DATAat0x342b2(%rip), %rsi
    00000f37: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3895
    00000f3c: 	movq	0x18(%rsp), %rdi
    00000f41: 	movq	0x28(%rsp), %xmm0
    00000f47: 	leaq	0x10(%rax), %rdx
    00000f4b: 	movq	%rdi, 0x1c0(%rsp)
    00000f53: 	movq	(%rax), %rcx
    00000f56: 	movhps	0x30(%rsp), %xmm0
    00000f5b: 	cmpq	%rdx, %rcx
    00000f5e: 	je	.Ltmp3660 # Offset: 3934
    00000f64: 	movq	%rcx, 0x1c0(%rsp)
    00000f6c: 	movq	0x10(%rax), %rcx
    00000f70: 	movq	%rcx, 0x1d0(%rsp)
.Ltmp3672:
    00000f78: 	movq	0x8(%rax), %rcx
    00000f7c: 	movq	%rbp, %xmm2
    00000f81: 	movq	%rbx, %xmm3
    00000f86: 	leaq	0xb0(%rsp), %r14
    00000f8e: 	leaq	0x90(%rsp), %rdi
    00000f96: 	movq	%r14, %rsi
    00000f99: 	movq	%rcx, 0x1c8(%rsp)
    00000fa1: 	movq	0x50(%rsp), %rcx
    00000fa6: 	movb	$0x0, 0x10(%rax)
    00000faa: 	movq	0x110(%rsp), %xmm1
    00000fb3: 	movq	%rdx, (%rax)
    00000fb6: 	movq	%r13, %rdx
    00000fb9: 	punpcklqdq	%xmm2, %xmm1
    00000fbd: 	movq	$0x0, 0x8(%rax)
    00000fc5: 	movaps	%xmm0, 0xb0(%rsp)
    00000fcd: 	movq	0xf0(%rsp), %xmm0
    00000fd6: 	movaps	%xmm1, 0xc0(%rsp)
    00000fde: 	movq	0xe0(%rsp), %xmm1
    00000fe7: 	punpcklqdq	%xmm3, %xmm0
    00000feb: 	movhps	0xe8(%rsp), %xmm1
    00000ff3: 	movaps	%xmm0, 0xa0(%rsp)
    00000ffb: 	movaps	%xmm1, 0x90(%rsp)
    00001003: 	callq	_Z16TestOneContainerISt15_Deque_iteratorItRtPtEEvT_S4_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4099
    00001008: 	movq	0x1c0(%rsp), %rdi
    00001010: 	cmpq	0x18(%rsp), %rdi
    00001015: 	je	.Ltmp3661 # Offset: 4117
    00001017: 	movq	0x1d0(%rsp), %rax
    0000101f: 	leaq	0x1(%rax), %rsi
    00001023: 	callq	_ZdlPvm@PLT # Offset: 4131
.Ltmp3661:
    00001028: 	movq	0x1a0(%rsp), %rdi
    00001030: 	cmpq	0x20(%rsp), %rdi
    00001035: 	je	.Ltmp3662 # Offset: 4149
    00001037: 	movq	0x1b0(%rsp), %rax
    0000103f: 	leaq	0x1(%rax), %rsi
    00001043: 	callq	_ZdlPvm@PLT # Offset: 4163
.Ltmp3662:
    00001048: 	movq	0x160(%rsp), %rdi
    00001050: 	cmpq	0x8(%rsp), %rdi
    00001055: 	je	.Ltmp3663 # Offset: 4181
    00001057: 	movq	0x170(%rsp), %rax
    0000105f: 	leaq	0x1(%rax), %rsi
    00001063: 	callq	_ZdlPvm@PLT # Offset: 4195
.Ltmp3663:
    00001068: 	movq	0x180(%rsp), %rdi
    00001070: 	cmpq	0x10(%rsp), %rdi
    00001075: 	je	.Ltmp3664 # Offset: 4213
    00001077: 	movq	0x190(%rsp), %rax
    0000107f: 	leaq	0x1(%rax), %rsi
    00001083: 	callq	_ZdlPvm@PLT # Offset: 4227
.Ltmp3664:
    00001088: 	movq	0xd0(%rsp), %r13
    00001090: 	testq	%r13, %r13
    00001093: 	je	.Ltmp3665 # Offset: 4243
    00001095: 	addq	$0x8, %rbp
    00001099: 	cmpq	%rbp, %rbx
    0000109c: 	jae	.Ltmp3666 # Offset: 4252
    0000109e: 	nop # Size: 2
.Ltmp3667:
    000010a0: 	movq	(%rbx), %rdi
    000010a3: 	movl	$0x200, %esi
    000010a8: 	addq	$0x8, %rbx
    000010ac: 	callq	_ZdlPvm@PLT # Offset: 4268
    000010b1: 	cmpq	%rbx, %rbp
    000010b4: 	ja	.Ltmp3667 # Offset: 4276
.Ltmp3666:
    000010b6: 	movq	0xd8(%rsp), %rax
    000010be: 	movq	%r13, %rdi
    000010c1: 	leaq	(,%rax,8), %rsi
    000010c9: 	callq	_ZdlPvm@PLT # Offset: 4297
.Ltmp3665:
    000010ce: 	movq	0x58(%rsp), %rbx
    000010d3: 	cmpq	%rbx, 0x68(%rsp)
    000010d8: 	je	.Ltmp3668 # Offset: 4312
    000010de: 	movq	0x68(%rsp), %rax
    000010e3: 	movq	(%rax), %r13
    000010e6: 	addq	$0x8, %rax
    000010ea: 	movq	%rax, 0x68(%rsp)
    000010ef: 	movabsq	$0x3fffffffffffffff, %rax
    000010f9: 	cmpq	%rax, %r13
    000010fc: 	jbe	.Ltmp3669 # Offset: 4348
    00001102: 	leaq	DATAat0x34038(%rip), %rdi
    00001109: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4361
    0000110e: 	nop # Size: 2
.Ltmp3654:
    00001110: 	testq	%r14, %r14
    00001113: 	jne	.Ltmp3670 # Offset: 4371
    00001119: 	movq	0x8(%rsp), %rax
    0000111e: 	jmp	.Ltmp3671 # Offset: 4382
.Ltmp3653:
    00001123: 	leaq	0xb0(%rsp), %rsi
    0000112b: 	xorl	%edx, %edx
    0000112d: 	movq	%r15, %rdi
    00001130: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4400
    00001135: 	movq	%rax, 0x160(%rsp)
    0000113d: 	movq	%rax, %rdi
    00001140: 	movq	0xb0(%rsp), %rax
    00001148: 	movq	%rax, 0x170(%rsp)
.Ltmp3769:
    00001150: 	movq	0x70(%rsp), %rsi
    00001155: 	movq	%r14, %rdx
    00001158: 	callq	memcpy@PLT # Offset: 4440
    0000115d: 	movq	0xb0(%rsp), %r14
    00001165: 	movq	0x160(%rsp), %rax
    0000116d: 	jmp	.Ltmp3671 # Offset: 4461
.Ltmp3660:
    00001172: 	movdqu	0x10(%rax), %xmm7
    00001177: 	movaps	%xmm7, 0x1d0(%rsp)
    0000117f: 	jmp	.Ltmp3672 # Offset: 4479
.Ltmp3658:
    00001184: 	movdqu	0x10(%rax), %xmm7
    00001189: 	movaps	%xmm7, 0x1b0(%rsp)
    00001191: 	jmp	.Ltmp3673 # Offset: 4497
.Ltmp3644:
    00001196: 	leal	0x5(%rax), %esi
    00001199: 	jmp	.Ltmp3674 # Offset: 4505
.Ltmp3645:
    0000119e: 	leal	0x6(%rax), %esi
    000011a1: 	jmp	.Ltmp3674 # Offset: 4513
.Ltmp3657:
    000011a6: 	movq	0x40(%rsp), %rdi
    000011ab: 	movq	%r9, %rcx
    000011ae: 	xorl	%edx, %edx
    000011b0: 	xorl	%esi, %esi
    000011b2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@PLT # Offset: 4530
    000011b7: 	movq	0x20(%rsp), %rdi
    000011bc: 	leaq	0x10(%rax), %rdx
    000011c0: 	movq	%rdi, 0x1a0(%rsp)
    000011c8: 	movq	(%rax), %rcx
    000011cb: 	cmpq	%rdx, %rcx
    000011ce: 	jne	.Ltmp3675 # Offset: 4558
    000011d4: 	movdqu	0x10(%rax), %xmm5
    000011d9: 	movaps	%xmm5, 0x1b0(%rsp)
    000011e1: 	jmp	.Ltmp3673 # Offset: 4577
.Ltmp3646:
    000011e6: 	leal	0x7(%rax), %esi
    000011e9: 	jmp	.Ltmp3674 # Offset: 4585
.Ltmp3668:
    000011ee: 	movq	0x88(%rsp), %rax
    000011f6: 	movq	0x60(%rsp), %xmm5
    000011fc: 	leaq	_ZZNSt8__detail18__to_chars_10_implImEEvPcjT_E8__digits(%rip), %rbp
    00001203: 	movq	%rax, 0x28(%rsp)
    00001208: 	punpcklqdq	%xmm5, %xmm5
    0000120c: 	movaps	%xmm5, 0x30(%rsp)
.Ltmp3707:
    00001211: 	movq	0x28(%rsp), %rax
    00001216: 	movdqa	0x30(%rsp), %xmm7
    0000121c: 	movq	$0x0, 0xe0(%rsp)
    00001228: 	movq	(%rax), %r12
    0000122b: 	movaps	%xmm7, 0xd0(%rsp)
    00001233: 	movq	%r12, %rbx
    00001236: 	testq	%r12, %r12
    00001239: 	je	.Ltmp3676 # Offset: 4665
    0000123f: 	nop # Size: 1
.Ltmp3677:
    00001240: 	movl	$0x18, %edi
    00001245: 	callq	_Znwm@PLT # Offset: 4677
    0000124a: 	xorl	%ecx, %ecx
    0000124c: 	movq	0x60(%rsp), %rsi
    00001251: 	movq	%rax, %rdi
    00001254: 	movw	%cx, 0x10(%rax)
    00001258: 	callq	_ZNSt8__detail15_List_node_base7_M_hookEPS0_@PLT # Offset: 4696
    0000125d: 	addq	$0x1, 0xe0(%rsp)
    00001266: 	subq	$0x1, %rbx
    0000126a: 	jne	.Ltmp3677 # Offset: 4714
    0000126c: 	cmpq	$0x9, %r12
    00001270: 	jbe	.Ltmp3676 # Offset: 4720
    00001276: 	cmpq	$0x63, %r12
    0000127a: 	jbe	.Ltmp3678 # Offset: 4730
    00001280: 	cmpq	$0x3e7, %r12
    00001287: 	jbe	.Ltmp3679 # Offset: 4743
    0000128d: 	cmpq	$0x270f, %r12
    00001294: 	jbe	.Ltmp3680 # Offset: 4756
    0000129a: 	movq	%r12, %rdx
    0000129d: 	movl	$0x1, %esi
    000012a2: 	jmp	.Ltmp3681 # Offset: 4770
    000012a4: 	nopl	(%rax) # Size: 4
.Ltmp3685:
    000012a8: 	cmpq	$0xf423f, %rcx
    000012af: 	jbe	.Ltmp3682 # Offset: 4783
    000012b5: 	cmpq	$0x98967f, %rcx
    000012bc: 	jbe	.Ltmp3683 # Offset: 4796
    000012c2: 	cmpq	$0x5f5e0ff, %rcx
    000012c9: 	jbe	.Ltmp3684 # Offset: 4809
.Ltmp3681:
    000012cf: 	movabsq	$0x346dc5d63886594b, %rax
    000012d9: 	movq	%rdx, %rcx
    000012dc: 	mulq	%rdx
    000012df: 	movl	%esi, %eax
    000012e1: 	addl	$0x4, %esi
    000012e4: 	shrq	$0xb, %rdx
    000012e8: 	cmpq	$0x1869f, %rcx
    000012ef: 	ja	.Ltmp3685 # Offset: 4847
.Ltmp3726:
    000012f1: 	movq	0x10(%rsp), %rax
    000012f6: 	movq	0x40(%rsp), %rdi
    000012fb: 	xorl	%edx, %edx
    000012fd: 	movq	%rax, 0x180(%rsp)
    00001305: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEmc@PLT # Offset: 4869
    0000130a: 	movl	0x188(%rsp), %eax
    00001311: 	movq	0x180(%rsp), %rdi
    00001319: 	movq	%r12, %rcx
    0000131c: 	leal	-0x1(%rax), %esi
    0000131f: 	cmpq	$0x63, %r12
    00001323: 	jbe	.Ltmp3686 # Offset: 4899
    00001325: 	nopl	(%rax) # Size: 3
.Ltmp3687:
    00001328: 	movabsq	$0x28f5c28f5c28f5c3, %rax
    00001332: 	movq	%rcx, %rdx
    00001335: 	shrq	$0x2, %rdx
    00001339: 	mulq	%rdx
    0000133c: 	movq	%rdx, %r8
    0000133f: 	andq	$-0x4, %rdx
    00001343: 	shrq	$0x2, %r8
    00001347: 	leaq	(%rdx,%r8), %rax
    0000134b: 	movq	%rcx, %rdx
    0000134e: 	leaq	(%rax,%rax,4), %rax
    00001352: 	shlq	$0x2, %rax
    00001356: 	subq	%rax, %rdx
    00001359: 	movq	%rcx, %rax
    0000135c: 	movq	%r8, %rcx
    0000135f: 	movl	%esi, %r8d
    00001362: 	movzbl	0x1(%rbp,%rdx,2), %r9d
    00001368: 	movzbl	(%rbp,%rdx,2), %edx
    0000136d: 	movb	%r9b, (%rdi,%r8)
    00001371: 	leal	-0x1(%rsi), %r8d
    00001375: 	subl	$0x2, %esi
    00001378: 	movb	%dl, (%rdi,%r8)
    0000137c: 	cmpq	$0x270f, %rax
    00001382: 	ja	.Ltmp3687 # Offset: 4994
.Ltmp3686:
    00001384: 	leal	0x30(%rcx), %eax
    00001387: 	cmpq	$0x9, %rcx
    0000138b: 	jbe	.Ltmp3688 # Offset: 5003
    0000138d: 	movzbl	0x1(%rbp,%rcx,2), %eax
    00001392: 	movb	%al, 0x1(%rdi)
    00001395: 	movzbl	(%rbp,%rcx,2), %eax
.Ltmp3688:
    0000139a: 	movb	%al, (%rdi)
    0000139c: 	movq	0x8(%rsp), %rax
    000013a1: 	movq	0x120(%rsp), %rbx
    000013a9: 	movq	0x128(%rsp), %r13
    000013b1: 	movq	%rax, 0x160(%rsp)
    000013b9: 	movq	%rbx, %rax
    000013bc: 	addq	%r13, %rax
    000013bf: 	je	.Ltmp3689 # Offset: 5055
    000013c1: 	testq	%rbx, %rbx
    000013c4: 	je	.Ltmp3690 # Offset: 5060
.Ltmp3689:
    000013ca: 	movq	%r13, 0xb0(%rsp)
    000013d2: 	cmpq	$0xf, %r13
    000013d6: 	ja	.Ltmp3691 # Offset: 5078
    000013dc: 	cmpq	$0x1, %r13
    000013e0: 	jne	.Ltmp3692 # Offset: 5088
    000013e2: 	movzbl	(%rbx), %eax
    000013e5: 	movb	%al, 0x170(%rsp)
    000013ec: 	movq	0x8(%rsp), %rax
    000013f1: 	jmp	.Ltmp3693 # Offset: 5105
.Ltmp3566:
    000013f3: 	movl	$0x2, %esi
    000013f8: 	jmp	.Ltmp3597 # Offset: 5112
.Ltmp3565:
    000013fd: 	movl	$0x1, %esi
    00001402: 	jmp	.Ltmp3597 # Offset: 5122
.Ltmp3567:
    00001407: 	movl	$0x3, %esi
    0000140c: 	jmp	.Ltmp3597 # Offset: 5132
.Ltmp3568:
    00001411: 	movl	$0x4, %esi
    00001416: 	jmp	.Ltmp3597 # Offset: 5142
.Ltmp3641:
    0000141b: 	movl	$0x3, %esi
    00001420: 	jmp	.Ltmp3674 # Offset: 5152
.Ltmp3640:
    00001425: 	movl	$0x2, %esi
    0000142a: 	jmp	.Ltmp3674 # Offset: 5162
.Ltmp3639:
    0000142f: 	movl	$0x1, %esi
    00001434: 	jmp	.Ltmp3674 # Offset: 5172
.Ltmp3602:
    00001439: 	movl	$0x2, %esi
    0000143e: 	jmp	.Ltmp3630 # Offset: 5182
.Ltmp3692:
    00001443: 	testq	%r13, %r13
    00001446: 	jne	.Ltmp3694 # Offset: 5190
    0000144c: 	movq	0x8(%rsp), %rax
.Ltmp3693:
    00001451: 	movq	%r13, 0x168(%rsp)
    00001459: 	movb	$0x0, (%rax,%r13)
    0000145e: 	movabsq	$0x3fffffffffffffff, %rax
    00001468: 	cmpq	%rax, 0x168(%rsp)
    00001470: 	je	.Ltmp3695 # Offset: 5232
    00001476: 	movl	$0x1, %edx
    0000147b: 	leaq	DATAat0x34149(%rip), %rsi
    00001482: 	movq	%r15, %rdi
    00001485: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5253
    0000148a: 	movq	0x168(%rsp), %r8
    00001492: 	movq	0x188(%rsp), %rdx
    0000149a: 	movl	$0xf, %eax
    0000149f: 	movq	0x160(%rsp), %rcx
    000014a7: 	movq	%rax, %r9
    000014aa: 	cmpq	0x8(%rsp), %rcx
    000014af: 	cmovneq	0x170(%rsp), %r9
    000014b8: 	leaq	(%r8,%rdx), %rdi
    000014bc: 	movq	0x180(%rsp), %rsi
    000014c4: 	cmpq	%r9, %rdi
    000014c7: 	jbe	.Ltmp3696 # Offset: 5319
    000014c9: 	cmpq	0x10(%rsp), %rsi
    000014ce: 	cmovneq	0x190(%rsp), %rax
    000014d7: 	cmpq	%rax, %rdi
    000014da: 	jbe	.Ltmp3697 # Offset: 5338
.Ltmp3696:
    000014e0: 	movq	%r15, %rdi
    000014e3: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5347
    000014e8: 	movq	0x20(%rsp), %rbx
    000014ed: 	leaq	0x10(%rax), %rdx
    000014f1: 	movq	%rbx, 0x1a0(%rsp)
    000014f9: 	movq	(%rax), %rcx
    000014fc: 	cmpq	%rdx, %rcx
    000014ff: 	je	.Ltmp3698 # Offset: 5375
.Ltmp3725:
    00001505: 	movq	%rcx, 0x1a0(%rsp)
    0000150d: 	movq	0x10(%rax), %rcx
    00001511: 	movq	%rcx, 0x1b0(%rsp)
.Ltmp3724:
    00001519: 	movq	0x8(%rax), %rcx
    0000151d: 	movq	%rcx, 0x1a8(%rsp)
    00001525: 	movq	$0x0, 0x8(%rax)
    0000152d: 	movb	$0x0, 0x10(%rax)
    00001531: 	movq	%rdx, (%rax)
    00001534: 	movabsq	$0x3fffffffffffffff, %rax
    0000153e: 	subq	0x1a8(%rsp), %rax
    00001546: 	cmpq	$0x9, %rax
    0000154a: 	jbe	.Ltmp3699 # Offset: 5450
    00001550: 	movq	0x48(%rsp), %rdi
    00001555: 	movl	$0xa, %edx
    0000155a: 	leaq	DATAat0x342be(%rip), %rsi
    00001561: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5473
    00001566: 	movq	0x18(%rsp), %rbx
    0000156b: 	leaq	0x10(%rax), %rdx
    0000156f: 	movq	%rbx, 0x1c0(%rsp)
    00001577: 	movq	(%rax), %rcx
    0000157a: 	cmpq	%rdx, %rcx
    0000157d: 	je	.Ltmp3700 # Offset: 5501
    00001583: 	movq	%rcx, 0x1c0(%rsp)
    0000158b: 	movq	0x10(%rax), %rcx
    0000158f: 	movq	%rcx, 0x1d0(%rsp)
.Ltmp3723:
    00001597: 	movq	0x8(%rax), %rcx
    0000159b: 	movq	0x60(%rsp), %rsi
    000015a0: 	movq	%rcx, 0x1c8(%rsp)
    000015a8: 	movq	0x50(%rsp), %rcx
    000015ad: 	movq	%rdx, (%rax)
    000015b0: 	movq	%r12, %rdx
    000015b3: 	movb	$0x0, 0x10(%rax)
    000015b7: 	movq	0xd0(%rsp), %rdi
    000015bf: 	movq	$0x0, 0x8(%rax)
    000015c7: 	callq	_Z16TestOneContainerISt14_List_iteratorItEEvT_S2_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5575
    000015cc: 	movq	0x1c0(%rsp), %rdi
    000015d4: 	cmpq	0x18(%rsp), %rdi
    000015d9: 	je	.Ltmp3701 # Offset: 5593
    000015db: 	movq	0x1d0(%rsp), %rax
    000015e3: 	leaq	0x1(%rax), %rsi
    000015e7: 	callq	_ZdlPvm@PLT # Offset: 5607
.Ltmp3701:
    000015ec: 	movq	0x1a0(%rsp), %rdi
    000015f4: 	cmpq	0x20(%rsp), %rdi
    000015f9: 	je	.Ltmp3702 # Offset: 5625
    000015fb: 	movq	0x1b0(%rsp), %rax
    00001603: 	leaq	0x1(%rax), %rsi
    00001607: 	callq	_ZdlPvm@PLT # Offset: 5639
.Ltmp3702:
    0000160c: 	movq	0x160(%rsp), %rdi
    00001614: 	cmpq	0x8(%rsp), %rdi
    00001619: 	je	.Ltmp3703 # Offset: 5657
    0000161b: 	movq	0x170(%rsp), %rax
    00001623: 	leaq	0x1(%rax), %rsi
    00001627: 	callq	_ZdlPvm@PLT # Offset: 5671
.Ltmp3703:
    0000162c: 	movq	0x180(%rsp), %rdi
    00001634: 	cmpq	0x10(%rsp), %rdi
    00001639: 	je	.Ltmp3704 # Offset: 5689
    0000163b: 	movq	0x190(%rsp), %rax
    00001643: 	leaq	0x1(%rax), %rsi
    00001647: 	callq	_ZdlPvm@PLT # Offset: 5703
.Ltmp3704:
    0000164c: 	movq	0xd0(%rsp), %rbx
    00001654: 	movq	0x60(%rsp), %r12
    00001659: 	cmpq	0x60(%rsp), %rbx
    0000165e: 	je	.Ltmp3705 # Offset: 5726
.Ltmp3706:
    00001660: 	movq	%rbx, %rdi
    00001663: 	movq	(%rbx), %rbx
    00001666: 	movl	$0x18, %esi
    0000166b: 	callq	_ZdlPvm@PLT # Offset: 5739
    00001670: 	cmpq	%r12, %rbx
    00001673: 	jne	.Ltmp3706 # Offset: 5747
.Ltmp3705:
    00001675: 	addq	$0x8, 0x28(%rsp)
    0000167b: 	movq	0x28(%rsp), %rax
    00001680: 	cmpq	0x58(%rsp), %rax
    00001685: 	jne	.Ltmp3707 # Offset: 5765
    0000168b: 	leaq	_ZZNSt8__detail18__to_chars_10_implImEEvPcjT_E8__digits(%rip), %rbx
.Ltmp3756:
    00001692: 	movq	0x80(%rsp), %rax
    0000169a: 	movq	$0x0, 0xb0(%rsp)
    000016a6: 	movq	(%rax), %r12
    000016a9: 	testq	%r12, %r12
    000016ac: 	je	.Ltmp3708 # Offset: 5804
    000016b2: 	movq	%r12, %rbp
    000016b5: 	movq	%r14, %rax
.Ltmp3709:
    000016b8: 	movl	$0x10, %edi
    000016bd: 	movq	%rax, %r13
    000016c0: 	callq	_Znwm@PLT # Offset: 5824
    000016c5: 	xorl	%edx, %edx
    000016c7: 	movq	$0x0, (%rax)
    000016ce: 	movw	%dx, 0x8(%rax)
    000016d2: 	movq	%rax, (%r13)
    000016d6: 	subq	$0x1, %rbp
    000016da: 	jne	.Ltmp3709 # Offset: 5850
    000016dc: 	movq	0xb0(%rsp), %rbp
    000016e4: 	cmpq	$0x9, %r12
    000016e8: 	jbe	.Ltmp3710 # Offset: 5864
    000016ee: 	cmpq	$0x63, %r12
    000016f2: 	jbe	.Ltmp3711 # Offset: 5874
    000016f8: 	cmpq	$0x3e7, %r12
    000016ff: 	jbe	.Ltmp3712 # Offset: 5887
    00001705: 	cmpq	$0x270f, %r12
    0000170c: 	jbe	.Ltmp3713 # Offset: 5900
    00001712: 	movq	%r12, %rax
    00001715: 	movl	$0x1, %esi
    0000171a: 	jmp	.Ltmp3714 # Offset: 5914
.Ltmp3718:
    0000171c: 	cmpq	$0xf423f, %rcx
    00001723: 	jbe	.Ltmp3715 # Offset: 5923
    00001729: 	cmpq	$0x98967f, %rcx
    00001730: 	jbe	.Ltmp3716 # Offset: 5936
    00001736: 	cmpq	$0x5f5e0ff, %rcx
    0000173d: 	jbe	.Ltmp3717 # Offset: 5949
.Ltmp3714:
    00001743: 	movq	%rax, %rcx
    00001746: 	movabsq	$0x346dc5d63886594b, %rax
    00001750: 	mulq	%rcx
    00001753: 	movq	%rdx, %rax
    00001756: 	movl	%esi, %edx
    00001758: 	addl	$0x4, %esi
    0000175b: 	shrq	$0xb, %rax
    0000175f: 	cmpq	$0x1869f, %rcx
    00001766: 	ja	.Ltmp3718 # Offset: 5990
.Ltmp3765:
    00001768: 	movq	0x8(%rsp), %rax
    0000176d: 	xorl	%edx, %edx
    0000176f: 	movq	%r15, %rdi
    00001772: 	movq	%rax, 0x160(%rsp)
    0000177a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEmc@PLT # Offset: 6010
    0000177f: 	movl	0x168(%rsp), %eax
    00001786: 	movq	0x160(%rsp), %rdi
    0000178e: 	movq	%r12, %rcx
    00001791: 	leal	-0x1(%rax), %esi
    00001794: 	cmpq	$0x63, %r12
    00001798: 	jbe	.Ltmp3719 # Offset: 6040
.Ltmp3720:
    0000179a: 	movabsq	$0x28f5c28f5c28f5c3, %rax
    000017a4: 	movq	%rcx, %rdx
    000017a7: 	shrq	$0x2, %rdx
    000017ab: 	mulq	%rdx
    000017ae: 	movq	%rdx, %r8
    000017b1: 	movq	%rdx, %rax
    000017b4: 	movq	%rcx, %rdx
    000017b7: 	shrq	$0x2, %r8
    000017bb: 	andq	$-0x4, %rax
    000017bf: 	addq	%r8, %rax
    000017c2: 	leaq	(%rax,%rax,4), %rax
    000017c6: 	shlq	$0x2, %rax
    000017ca: 	subq	%rax, %rdx
    000017cd: 	movq	%rcx, %rax
    000017d0: 	movq	%r8, %rcx
    000017d3: 	movl	%esi, %r8d
    000017d6: 	movzbl	0x1(%rbx,%rdx,2), %r9d
    000017dc: 	movzbl	(%rbx,%rdx,2), %edx
    000017e0: 	movb	%r9b, (%rdi,%r8)
    000017e4: 	leal	-0x1(%rsi), %r8d
    000017e8: 	subl	$0x2, %esi
    000017eb: 	movb	%dl, (%rdi,%r8)
    000017ef: 	cmpq	$0x270f, %rax
    000017f5: 	ja	.Ltmp3720 # Offset: 6133
.Ltmp3719:
    000017f7: 	leal	0x30(%rcx), %eax
    000017fa: 	cmpq	$0x9, %rcx
    000017fe: 	jbe	.Ltmp3721 # Offset: 6142
    00001800: 	movzbl	0x1(%rbx,%rcx,2), %eax
    00001805: 	movb	%al, 0x1(%rdi)
    00001808: 	movzbl	(%rbx,%rcx,2), %eax
.Ltmp3721:
    0000180c: 	movb	%al, (%rdi)
    0000180e: 	leaq	0x150(%rsp), %rax
    00001816: 	movq	0x128(%rsp), %r13
    0000181e: 	movq	%rax, 0x28(%rsp)
    00001823: 	movq	%rax, 0x140(%rsp)
    0000182b: 	movq	0x120(%rsp), %rax
    00001833: 	movq	%rax, 0x30(%rsp)
    00001838: 	movq	%rax, %rdi
    0000183b: 	addq	%r13, %rax
    0000183e: 	je	.Ltmp3722 # Offset: 6206
    00001844: 	testq	%rdi, %rdi
    00001847: 	jne	.Ltmp3722 # Offset: 6215
    0000184d: 	leaq	DATAat0x34008(%rip), %rdi
    00001854: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6228
    00001859: 	nopl	(%rax) # Size: 7
.Ltmp3691:
    00001860: 	xorl	%edx, %edx
    00001862: 	movq	%r14, %rsi
    00001865: 	movq	%r15, %rdi
    00001868: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6248
    0000186d: 	movq	%rax, 0x160(%rsp)
    00001875: 	movq	%rax, %rdi
    00001878: 	movq	0xb0(%rsp), %rax
    00001880: 	movq	%rax, 0x170(%rsp)
.Ltmp3766:
    00001888: 	movq	%r13, %rdx
    0000188b: 	movq	%rbx, %rsi
    0000188e: 	callq	memcpy@PLT # Offset: 6286
    00001893: 	movq	0xb0(%rsp), %r13
    0000189b: 	movq	0x160(%rsp), %rax
    000018a3: 	jmp	.Ltmp3693 # Offset: 6307
.Ltmp3604:
    000018a8: 	movl	$0x4, %esi
    000018ad: 	jmp	.Ltmp3630 # Offset: 6317
.Ltmp3642:
    000018b2: 	movl	$0x4, %esi
    000018b7: 	jmp	.Ltmp3674 # Offset: 6327
.Ltmp3603:
    000018bc: 	movl	$0x3, %esi
    000018c1: 	jmp	.Ltmp3630 # Offset: 6337
.Ltmp3700:
    000018c6: 	movdqu	0x10(%rax), %xmm7
    000018cb: 	movaps	%xmm7, 0x1d0(%rsp)
    000018d3: 	jmp	.Ltmp3723 # Offset: 6355
.Ltmp3698:
    000018d8: 	movdqu	0x10(%rax), %xmm6
    000018dd: 	movaps	%xmm6, 0x1b0(%rsp)
    000018e5: 	jmp	.Ltmp3724 # Offset: 6373
.Ltmp3697:
    000018ea: 	movq	0x40(%rsp), %rdi
    000018ef: 	xorl	%edx, %edx
    000018f1: 	xorl	%esi, %esi
    000018f3: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@PLT # Offset: 6387
    000018f8: 	movq	0x20(%rsp), %rbx
    000018fd: 	leaq	0x10(%rax), %rdx
    00001901: 	movq	%rbx, 0x1a0(%rsp)
    00001909: 	movq	(%rax), %rcx
    0000190c: 	cmpq	%rdx, %rcx
    0000190f: 	jne	.Ltmp3725 # Offset: 6415
    00001915: 	movdqu	0x10(%rax), %xmm4
    0000191a: 	movaps	%xmm4, 0x1b0(%rsp)
    00001922: 	jmp	.Ltmp3724 # Offset: 6434
.Ltmp3683:
    00001927: 	leal	0x6(%rax), %esi
    0000192a: 	jmp	.Ltmp3726 # Offset: 6442
.Ltmp3684:
    0000192f: 	leal	0x7(%rax), %esi
    00001932: 	jmp	.Ltmp3726 # Offset: 6450
.Ltmp3682:
    00001937: 	leal	0x5(%rax), %esi
    0000193a: 	jmp	.Ltmp3726 # Offset: 6458
.Ltmp3676:
    0000193f: 	movl	$0x1, %esi
    00001944: 	jmp	.Ltmp3726 # Offset: 6468
.Ltmp3722:
    00001949: 	movq	%r13, 0xd0(%rsp)
    00001951: 	cmpq	$0xf, %r13
    00001955: 	ja	.Ltmp3727 # Offset: 6485
    0000195b: 	cmpq	$0x1, %r13
    0000195f: 	jne	.Ltmp3728 # Offset: 6495
    00001965: 	movq	0x30(%rsp), %rax
    0000196a: 	movzbl	(%rax), %eax
    0000196d: 	movb	%al, 0x150(%rsp)
    00001974: 	movq	0x28(%rsp), %rax
.Ltmp3759:
    00001979: 	movq	%r13, 0x148(%rsp)
    00001981: 	movb	$0x0, (%rax,%r13)
    00001986: 	movabsq	$0x3fffffffffffffff, %rax
    00001990: 	cmpq	%rax, 0x148(%rsp)
    00001998: 	je	.Ltmp3729 # Offset: 6552
    0000199e: 	leaq	0x140(%rsp), %r13
    000019a6: 	movl	$0x1, %edx
    000019ab: 	leaq	DATAat0x34149(%rip), %rsi
    000019b2: 	movq	%r13, %rdi
    000019b5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 6581
    000019ba: 	movq	0x148(%rsp), %r8
    000019c2: 	movq	0x168(%rsp), %rdx
    000019ca: 	movl	$0xf, %eax
    000019cf: 	movq	0x140(%rsp), %rcx
    000019d7: 	movq	%rax, %r9
    000019da: 	cmpq	0x28(%rsp), %rcx
    000019df: 	cmovneq	0x150(%rsp), %r9
    000019e8: 	leaq	(%r8,%rdx), %rdi
    000019ec: 	movq	0x160(%rsp), %rsi
    000019f4: 	cmpq	%r9, %rdi
    000019f7: 	jbe	.Ltmp3730 # Offset: 6647
    000019f9: 	cmpq	0x8(%rsp), %rsi
    000019fe: 	cmovneq	0x170(%rsp), %rax
    00001a07: 	cmpq	%rax, %rdi
    00001a0a: 	jbe	.Ltmp3731 # Offset: 6666
.Ltmp3730:
    00001a10: 	movq	%r13, %rdi
    00001a13: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 6675
    00001a18: 	movq	0x10(%rsp), %rdi
    00001a1d: 	leaq	0x10(%rax), %rdx
    00001a21: 	movq	%rdi, 0x180(%rsp)
    00001a29: 	movq	(%rax), %rcx
    00001a2c: 	cmpq	%rdx, %rcx
    00001a2f: 	je	.Ltmp3732 # Offset: 6703
.Ltmp3762:
    00001a35: 	movq	%rcx, 0x180(%rsp)
    00001a3d: 	movq	0x10(%rax), %rcx
    00001a41: 	movq	%rcx, 0x190(%rsp)
.Ltmp3763:
    00001a49: 	movq	0x8(%rax), %rcx
    00001a4d: 	movq	%rcx, 0x188(%rsp)
    00001a55: 	movq	$0x0, 0x8(%rax)
    00001a5d: 	movb	$0x0, 0x10(%rax)
    00001a61: 	movq	%rdx, (%rax)
    00001a64: 	movabsq	$0x3fffffffffffffff, %rax
    00001a6e: 	subq	0x188(%rsp), %rax
    00001a76: 	cmpq	$0x11, %rax
    00001a7a: 	jbe	.Ltmp3733 # Offset: 6778
    00001a80: 	movq	0x40(%rsp), %rdi
    00001a85: 	movl	$0x12, %edx
    00001a8a: 	leaq	DATAat0x342c9(%rip), %rsi
    00001a91: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 6801
    00001a96: 	movq	0x20(%rsp), %rdi
    00001a9b: 	leaq	0x10(%rax), %rdx
    00001a9f: 	movq	%rdi, 0x1a0(%rsp)
    00001aa7: 	movq	(%rax), %rcx
    00001aaa: 	cmpq	%rdx, %rcx
    00001aad: 	je	.Ltmp3734 # Offset: 6829
    00001ab3: 	movq	%rcx, 0x1a0(%rsp)
    00001abb: 	movq	0x10(%rax), %rcx
    00001abf: 	movq	%rcx, 0x1b0(%rsp)
.Ltmp3760:
    00001ac7: 	movq	0x8(%rax), %rcx
    00001acb: 	movq	0x50(%rsp), %r13
    00001ad0: 	movq	0x48(%rsp), %rsi
    00001ad5: 	movq	%rcx, 0x1a8(%rsp)
    00001add: 	movq	%r13, %rdi
    00001ae0: 	movq	%rdx, (%rax)
    00001ae3: 	leaq	DATAat0x3418f(%rip), %rdx
    00001aea: 	movq	$0x0, 0x8(%rax)
    00001af2: 	movb	$0x0, 0x10(%rax)
    00001af6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6902
    00001afb: 	xorl	%r9d, %r9d
    00001afe: 	movq	%r13, %r8
    00001b01: 	leaq	_Z14std_lowerboundISt18_Fwd_list_iteratorItEtET_S2_S2_T0_(%rip), %rcx
    00001b08: 	movq	%r12, %rdx
    00001b0b: 	xorl	%esi, %esi
    00001b0d: 	movq	%rbp, %rdi
    00001b10: 	callq	"_Z13TestOneSearchISt18_Fwd_list_iteratorItEPFS1_S1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1" # Offset: 6928
    00001b15: 	movq	0x1c0(%rsp), %rdi
    00001b1d: 	cmpq	0x18(%rsp), %rdi
    00001b22: 	je	.Ltmp3735 # Offset: 6946
    00001b24: 	movq	0x1d0(%rsp), %rax
    00001b2c: 	leaq	0x1(%rax), %rsi
    00001b30: 	callq	_ZdlPvm@PLT # Offset: 6960
.Ltmp3735:
    00001b35: 	movq	0x50(%rsp), %r13
    00001b3a: 	movq	0x48(%rsp), %rsi
    00001b3f: 	leaq	DATAat0x341a1(%rip), %rdx
    00001b46: 	movq	%r13, %rdi
    00001b49: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6985
    00001b4e: 	xorl	%r9d, %r9d
    00001b51: 	movq	%r13, %r8
    00001b54: 	leaq	_Z12lower_bound1ISt18_Fwd_list_iteratorItEtET_S2_S2_T0_(%rip), %rcx
    00001b5b: 	movq	%r12, %rdx
    00001b5e: 	xorl	%esi, %esi
    00001b60: 	movq	%rbp, %rdi
    00001b63: 	callq	"_Z13TestOneSearchISt18_Fwd_list_iteratorItEPFS1_S1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1" # Offset: 7011
    00001b68: 	movq	0x1c0(%rsp), %rdi
    00001b70: 	cmpq	0x18(%rsp), %rdi
    00001b75: 	je	.Ltmp3736 # Offset: 7029
    00001b77: 	movq	0x1d0(%rsp), %rax
    00001b7f: 	leaq	0x1(%rax), %rsi
    00001b83: 	callq	_ZdlPvm@PLT # Offset: 7043
.Ltmp3736:
    00001b88: 	movq	0x50(%rsp), %r13
    00001b8d: 	movq	0x48(%rsp), %rsi
    00001b92: 	leaq	DATAat0x341af(%rip), %rdx
    00001b99: 	movq	%r13, %rdi
    00001b9c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7068
    00001ba1: 	xorl	%r9d, %r9d
    00001ba4: 	movq	%r13, %r8
    00001ba7: 	leaq	_Z12lower_bound2ISt18_Fwd_list_iteratorItEtET_S2_S2_T0_(%rip), %rcx
    00001bae: 	movq	%r12, %rdx
    00001bb1: 	xorl	%esi, %esi
    00001bb3: 	movq	%rbp, %rdi
    00001bb6: 	callq	"_Z13TestOneSearchISt18_Fwd_list_iteratorItEPFS1_S1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1" # Offset: 7094
    00001bbb: 	movq	0x1c0(%rsp), %rdi
    00001bc3: 	cmpq	0x18(%rsp), %rdi
    00001bc8: 	je	.Ltmp3737 # Offset: 7112
    00001bca: 	movq	0x1d0(%rsp), %rax
    00001bd2: 	leaq	0x1(%rax), %rsi
    00001bd6: 	callq	_ZdlPvm@PLT # Offset: 7126
.Ltmp3737:
    00001bdb: 	movq	0x50(%rsp), %r13
    00001be0: 	movq	0x48(%rsp), %rsi
    00001be5: 	leaq	DATAat0x341bd(%rip), %rdx
    00001bec: 	movq	%r13, %rdi
    00001bef: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7151
    00001bf4: 	xorl	%r9d, %r9d
    00001bf7: 	movq	%r13, %r8
    00001bfa: 	leaq	_Z17lower_bound_recurISt18_Fwd_list_iteratorItEtET_S2_S2_T0_(%rip), %rcx
    00001c01: 	movq	%r12, %rdx
    00001c04: 	xorl	%esi, %esi
    00001c06: 	movq	%rbp, %rdi
    00001c09: 	callq	"_Z13TestOneSearchISt18_Fwd_list_iteratorItEPFS1_S1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1" # Offset: 7177
    00001c0e: 	movq	0x1c0(%rsp), %rdi
    00001c16: 	cmpq	0x18(%rsp), %rdi
    00001c1b: 	je	.Ltmp3738 # Offset: 7195
    00001c1d: 	movq	0x1d0(%rsp), %rax
    00001c25: 	leaq	0x1(%rax), %rsi
    00001c29: 	callq	_ZdlPvm@PLT # Offset: 7209
.Ltmp3738:
    00001c2e: 	movq	0x50(%rsp), %r13
    00001c33: 	movq	0x48(%rsp), %rsi
    00001c38: 	leaq	DATAat0x341d4(%rip), %rdx
    00001c3f: 	movq	%r13, %rdi
    00001c42: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7234
    00001c47: 	movl	$0x1, %r9d
    00001c4d: 	movq	%r13, %r8
    00001c50: 	movq	%r12, %rdx
    00001c53: 	xorl	%esi, %esi
    00001c55: 	leaq	_Z14std_upperboundISt18_Fwd_list_iteratorItEtET_S2_S2_T0_(%rip), %rcx
    00001c5c: 	movq	%rbp, %rdi
    00001c5f: 	callq	"_Z13TestOneSearchISt18_Fwd_list_iteratorItEPFS1_S1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1" # Offset: 7263
    00001c64: 	movq	0x1c0(%rsp), %rdi
    00001c6c: 	cmpq	0x18(%rsp), %rdi
    00001c71: 	je	.Ltmp3739 # Offset: 7281
    00001c73: 	movq	0x1d0(%rsp), %rax
    00001c7b: 	leaq	0x1(%rax), %rsi
    00001c7f: 	callq	_ZdlPvm@PLT # Offset: 7295
.Ltmp3739:
    00001c84: 	movq	0x50(%rsp), %r13
    00001c89: 	movq	0x48(%rsp), %rsi
    00001c8e: 	leaq	DATAat0x341e6(%rip), %rdx
    00001c95: 	movq	%r13, %rdi
    00001c98: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7320
    00001c9d: 	movl	$0x1, %r9d
    00001ca3: 	movq	%r13, %r8
    00001ca6: 	movq	%r12, %rdx
    00001ca9: 	xorl	%esi, %esi
    00001cab: 	leaq	_Z12upper_bound1ISt18_Fwd_list_iteratorItEtET_S2_S2_T0_(%rip), %rcx
    00001cb2: 	movq	%rbp, %rdi
    00001cb5: 	callq	"_Z13TestOneSearchISt18_Fwd_list_iteratorItEPFS1_S1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1" # Offset: 7349
    00001cba: 	movq	0x1c0(%rsp), %rdi
    00001cc2: 	cmpq	0x18(%rsp), %rdi
    00001cc7: 	je	.Ltmp3740 # Offset: 7367
    00001cc9: 	movq	0x1d0(%rsp), %rax
    00001cd1: 	leaq	0x1(%rax), %rsi
    00001cd5: 	callq	_ZdlPvm@PLT # Offset: 7381
.Ltmp3740:
    00001cda: 	movq	0x50(%rsp), %r13
    00001cdf: 	movq	0x48(%rsp), %rsi
    00001ce4: 	leaq	DATAat0x341f4(%rip), %rdx
    00001ceb: 	movq	%r13, %rdi
    00001cee: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7406
    00001cf3: 	movl	$0x1, %r9d
    00001cf9: 	movq	%r13, %r8
    00001cfc: 	movq	%r12, %rdx
    00001cff: 	xorl	%esi, %esi
    00001d01: 	leaq	_Z12upper_bound2ISt18_Fwd_list_iteratorItEtET_S2_S2_T0_(%rip), %rcx
    00001d08: 	movq	%rbp, %rdi
    00001d0b: 	callq	"_Z13TestOneSearchISt18_Fwd_list_iteratorItEPFS1_S1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1" # Offset: 7435
    00001d10: 	movq	0x1c0(%rsp), %rdi
    00001d18: 	cmpq	0x18(%rsp), %rdi
    00001d1d: 	je	.Ltmp3741 # Offset: 7453
    00001d1f: 	movq	0x1d0(%rsp), %rax
    00001d27: 	leaq	0x1(%rax), %rsi
    00001d2b: 	callq	_ZdlPvm@PLT # Offset: 7467
.Ltmp3741:
    00001d30: 	movq	0x50(%rsp), %r13
    00001d35: 	movq	0x48(%rsp), %rsi
    00001d3a: 	leaq	DATAat0x34202(%rip), %rdx
    00001d41: 	movq	%r13, %rdi
    00001d44: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7492
    00001d49: 	movl	$0x1, %r9d
    00001d4f: 	movq	%r13, %r8
    00001d52: 	movq	%r12, %rdx
    00001d55: 	xorl	%esi, %esi
    00001d57: 	leaq	_Z17upper_bound_recurISt18_Fwd_list_iteratorItEtET_S2_S2_T0_(%rip), %rcx
    00001d5e: 	movq	%rbp, %rdi
    00001d61: 	callq	"_Z13TestOneSearchISt18_Fwd_list_iteratorItEPFS1_S1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1" # Offset: 7521
    00001d66: 	movq	0x1c0(%rsp), %rdi
    00001d6e: 	cmpq	0x18(%rsp), %rdi
    00001d73: 	je	.Ltmp3742 # Offset: 7539
    00001d75: 	movq	0x1d0(%rsp), %rax
    00001d7d: 	leaq	0x1(%rax), %rsi
    00001d81: 	callq	_ZdlPvm@PLT # Offset: 7553
.Ltmp3742:
    00001d86: 	movq	0x50(%rsp), %r13
    00001d8b: 	movq	0x48(%rsp), %rsi
    00001d90: 	leaq	DATAat0x34219(%rip), %rdx
    00001d97: 	movq	%r13, %rdi
    00001d9a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7578
    00001d9f: 	xorl	%r9d, %r9d
    00001da2: 	movq	%r13, %r8
    00001da5: 	leaq	_Z16std_binarysearchISt18_Fwd_list_iteratorItEtEbT_S2_T0_(%rip), %rcx
    00001dac: 	movq	%r12, %rdx
    00001daf: 	xorl	%esi, %esi
    00001db1: 	movq	%rbp, %rdi
    00001db4: 	callq	_Z13TestOneSearchISt18_Fwd_list_iteratorItEPFbS1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 7604
    00001db9: 	movq	0x1c0(%rsp), %rdi
    00001dc1: 	cmpq	0x18(%rsp), %rdi
    00001dc6: 	je	.Ltmp3743 # Offset: 7622
    00001dc8: 	movq	0x1d0(%rsp), %rax
    00001dd0: 	leaq	0x1(%rax), %rsi
    00001dd4: 	callq	_ZdlPvm@PLT # Offset: 7636
.Ltmp3743:
    00001dd9: 	movq	0x50(%rsp), %r13
    00001dde: 	movq	0x48(%rsp), %rsi
    00001de3: 	leaq	DATAat0x3422d(%rip), %rdx
    00001dea: 	movq	%r13, %rdi
    00001ded: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7661
    00001df2: 	xorl	%r9d, %r9d
    00001df5: 	movq	%r13, %r8
    00001df8: 	leaq	_Z13binarysearch1ISt18_Fwd_list_iteratorItEtEbT_S2_T0_(%rip), %rcx
    00001dff: 	movq	%r12, %rdx
    00001e02: 	xorl	%esi, %esi
    00001e04: 	movq	%rbp, %rdi
    00001e07: 	callq	_Z13TestOneSearchISt18_Fwd_list_iteratorItEPFbS1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 7687
    00001e0c: 	movq	0x1c0(%rsp), %rdi
    00001e14: 	cmpq	0x18(%rsp), %rdi
    00001e19: 	je	.Ltmp3744 # Offset: 7705
    00001e1b: 	movq	0x1d0(%rsp), %rax
    00001e23: 	leaq	0x1(%rax), %rsi
    00001e27: 	callq	_ZdlPvm@PLT # Offset: 7719
.Ltmp3744:
    00001e2c: 	movq	0x50(%rsp), %r13
    00001e31: 	movq	0x48(%rsp), %rsi
    00001e36: 	leaq	DATAat0x3423d(%rip), %rdx
    00001e3d: 	movq	%r13, %rdi
    00001e40: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7744
    00001e45: 	xorl	%r9d, %r9d
    00001e48: 	movq	%r13, %r8
    00001e4b: 	leaq	_Z13binarysearch2ISt18_Fwd_list_iteratorItEtEbT_S2_T0_(%rip), %rcx
    00001e52: 	movq	%r12, %rdx
    00001e55: 	xorl	%esi, %esi
    00001e57: 	movq	%rbp, %rdi
    00001e5a: 	callq	_Z13TestOneSearchISt18_Fwd_list_iteratorItEPFbS1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 7770
    00001e5f: 	movq	0x1c0(%rsp), %rdi
    00001e67: 	cmpq	0x18(%rsp), %rdi
    00001e6c: 	je	.Ltmp3745 # Offset: 7788
    00001e6e: 	movq	0x1d0(%rsp), %rax
    00001e76: 	leaq	0x1(%rax), %rsi
    00001e7a: 	callq	_ZdlPvm@PLT # Offset: 7802
.Ltmp3745:
    00001e7f: 	movq	0x50(%rsp), %r13
    00001e84: 	movq	0x48(%rsp), %rsi
    00001e89: 	leaq	DATAat0x3424d(%rip), %rdx
    00001e90: 	movq	%r13, %rdi
    00001e93: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7827
    00001e98: 	xorl	%r9d, %r9d
    00001e9b: 	movq	%r13, %r8
    00001e9e: 	leaq	_Z13binarysearch3ISt18_Fwd_list_iteratorItEtEbT_S2_T0_(%rip), %rcx
    00001ea5: 	movq	%r12, %rdx
    00001ea8: 	xorl	%esi, %esi
    00001eaa: 	movq	%rbp, %rdi
    00001ead: 	callq	_Z13TestOneSearchISt18_Fwd_list_iteratorItEPFbS1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 7853
    00001eb2: 	movq	0x1c0(%rsp), %rdi
    00001eba: 	cmpq	0x18(%rsp), %rdi
    00001ebf: 	je	.Ltmp3746 # Offset: 7871
    00001ec1: 	movq	0x1d0(%rsp), %rax
    00001ec9: 	leaq	0x1(%rax), %rsi
    00001ecd: 	callq	_ZdlPvm@PLT # Offset: 7885
.Ltmp3746:
    00001ed2: 	movq	0x50(%rsp), %r13
    00001ed7: 	movq	0x48(%rsp), %rsi
    00001edc: 	leaq	DATAat0x3425d(%rip), %rdx
    00001ee3: 	movq	%r13, %rdi
    00001ee6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7910
    00001eeb: 	xorl	%r9d, %r9d
    00001eee: 	movq	%r13, %r8
    00001ef1: 	leaq	_Z13binarysearch4ISt18_Fwd_list_iteratorItEtEbT_S2_T0_(%rip), %rcx
    00001ef8: 	movq	%r12, %rdx
    00001efb: 	xorl	%esi, %esi
    00001efd: 	movq	%rbp, %rdi
    00001f00: 	callq	_Z13TestOneSearchISt18_Fwd_list_iteratorItEPFbS1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 7936
    00001f05: 	movq	0x1c0(%rsp), %rdi
    00001f0d: 	cmpq	0x18(%rsp), %rdi
    00001f12: 	je	.Ltmp3747 # Offset: 7954
    00001f14: 	movq	0x1d0(%rsp), %rax
    00001f1c: 	leaq	0x1(%rax), %rsi
    00001f20: 	callq	_ZdlPvm@PLT # Offset: 7968
.Ltmp3747:
    00001f25: 	movq	0x50(%rsp), %r13
    00001f2a: 	movq	0x48(%rsp), %rsi
    00001f2f: 	leaq	DATAat0x3426d(%rip), %rdx
    00001f36: 	movq	%r13, %rdi
    00001f39: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7993
    00001f3e: 	xorl	%r9d, %r9d
    00001f41: 	movq	%r13, %r8
    00001f44: 	leaq	_Z18binarysearch_recurISt18_Fwd_list_iteratorItEtEbT_S2_T0_(%rip), %rcx
    00001f4b: 	movq	%r12, %rdx
    00001f4e: 	xorl	%esi, %esi
    00001f50: 	movq	%rbp, %rdi
    00001f53: 	callq	_Z13TestOneSearchISt18_Fwd_list_iteratorItEPFbS1_S1_tEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 8019
    00001f58: 	movq	0x1c0(%rsp), %rdi
    00001f60: 	cmpq	0x18(%rsp), %rdi
    00001f65: 	je	.Ltmp3748 # Offset: 8037
    00001f67: 	movq	0x1d0(%rsp), %rax
    00001f6f: 	leaq	0x1(%rax), %rsi
    00001f73: 	callq	_ZdlPvm@PLT # Offset: 8051
.Ltmp3748:
    00001f78: 	movq	0x50(%rsp), %r13
    00001f7d: 	movq	0x48(%rsp), %rsi
    00001f82: 	leaq	DATAat0x34286(%rip), %rdx
    00001f89: 	movq	%r13, %rdi
    00001f8c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8076
    00001f91: 	movq	%r13, %rdi
    00001f94: 	callq	_Z9summarizeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 8084
    00001f99: 	movq	0x1c0(%rsp), %rdi
    00001fa1: 	cmpq	0x18(%rsp), %rdi
    00001fa6: 	je	.Ltmp3749 # Offset: 8102
    00001fa8: 	movq	0x1d0(%rsp), %rax
    00001fb0: 	leaq	0x1(%rax), %rsi
    00001fb4: 	callq	_ZdlPvm@PLT # Offset: 8116
.Ltmp3749:
    00001fb9: 	movq	0x1a0(%rsp), %rdi
    00001fc1: 	cmpq	0x20(%rsp), %rdi
    00001fc6: 	je	.Ltmp3750 # Offset: 8134
    00001fc8: 	movq	0x1b0(%rsp), %rax
    00001fd0: 	leaq	0x1(%rax), %rsi
    00001fd4: 	callq	_ZdlPvm@PLT # Offset: 8148
.Ltmp3750:
    00001fd9: 	movq	0x180(%rsp), %rdi
    00001fe1: 	cmpq	0x10(%rsp), %rdi
    00001fe6: 	je	.Ltmp3751 # Offset: 8166
    00001fe8: 	movq	0x190(%rsp), %rax
    00001ff0: 	leaq	0x1(%rax), %rsi
    00001ff4: 	callq	_ZdlPvm@PLT # Offset: 8180
.Ltmp3751:
    00001ff9: 	movq	0x140(%rsp), %rdi
    00002001: 	cmpq	0x28(%rsp), %rdi
    00002006: 	je	.Ltmp3752 # Offset: 8198
    00002008: 	movq	0x150(%rsp), %rax
    00002010: 	leaq	0x1(%rax), %rsi
    00002014: 	callq	_ZdlPvm@PLT # Offset: 8212
.Ltmp3752:
    00002019: 	movq	0x160(%rsp), %rdi
    00002021: 	cmpq	0x8(%rsp), %rdi
    00002026: 	je	.Ltmp3753 # Offset: 8230
    00002028: 	movq	0x170(%rsp), %rax
    00002030: 	leaq	0x1(%rax), %rsi
    00002034: 	callq	_ZdlPvm@PLT # Offset: 8244
.Ltmp3753:
    00002039: 	testq	%rbp, %rbp
    0000203c: 	je	.Ltmp3754 # Offset: 8252
.Ltmp3755:
    0000203e: 	movq	%rbp, %rdi
    00002041: 	movq	(%rbp), %rbp
    00002045: 	movl	$0x10, %esi
    0000204a: 	callq	_ZdlPvm@PLT # Offset: 8266
    0000204f: 	testq	%rbp, %rbp
    00002052: 	jne	.Ltmp3755 # Offset: 8274
.Ltmp3754:
    00002054: 	addq	$0x8, 0x80(%rsp)
    0000205d: 	movq	0x80(%rsp), %rax
    00002065: 	cmpq	0x58(%rsp), %rax
    0000206a: 	jne	.Ltmp3756 # Offset: 8298
    00002070: 	movq	0x120(%rsp), %rdi
    00002078: 	leaq	0x130(%rsp), %rax
    00002080: 	cmpq	%rax, %rdi
    00002083: 	je	.Ltmp3757 # Offset: 8323
    00002085: 	movq	0x130(%rsp), %rax
    0000208d: 	leaq	0x1(%rax), %rsi
    00002091: 	callq	_ZdlPvm@PLT # Offset: 8337
.Ltmp3757:
    00002096: 	movq	0x258(%rsp), %rax
    0000209e: 	subq	%fs:0x28, %rax
    000020a7: 	jne	.Ltmp3758 # Offset: 8359
    000020ad: 	addq	$0x268, %rsp
    000020b4: 	popq	%rbx
    000020b5: 	popq	%rbp
    000020b6: 	popq	%r12
    000020b8: 	popq	%r13
    000020ba: 	popq	%r14
    000020bc: 	popq	%r15
    000020be: 	retq # Offset: 8382
.Ltmp3727:
    000020bf: 	movq	0x60(%rsp), %rsi
    000020c4: 	leaq	0x140(%rsp), %rdi
    000020cc: 	xorl	%edx, %edx
    000020ce: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8398
    000020d3: 	movq	%rax, 0x140(%rsp)
    000020db: 	movq	%rax, %rdi
    000020de: 	movq	0xd0(%rsp), %rax
    000020e6: 	movq	%rax, 0x150(%rsp)
.Ltmp3764:
    000020ee: 	movq	0x30(%rsp), %rsi
    000020f3: 	movq	%r13, %rdx
    000020f6: 	callq	memcpy@PLT # Offset: 8438
    000020fb: 	movq	0xd0(%rsp), %r13
    00002103: 	movq	0x140(%rsp), %rax
    0000210b: 	jmp	.Ltmp3759 # Offset: 8459
.Ltmp3734:
    00002110: 	movdqu	0x10(%rax), %xmm6
    00002115: 	movaps	%xmm6, 0x1b0(%rsp)
    0000211d: 	jmp	.Ltmp3760 # Offset: 8477
.Ltmp3728:
    00002122: 	testq	%r13, %r13
    00002125: 	jne	.Ltmp3761 # Offset: 8485
    00002127: 	movq	0x28(%rsp), %rax
    0000212c: 	jmp	.Ltmp3759 # Offset: 8492
.Ltmp3731:
    00002131: 	xorl	%edx, %edx
    00002133: 	xorl	%esi, %esi
    00002135: 	movq	%r15, %rdi
    00002138: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@PLT # Offset: 8504
    0000213d: 	movq	0x10(%rsp), %rdi
    00002142: 	leaq	0x10(%rax), %rdx
    00002146: 	movq	%rdi, 0x180(%rsp)
    0000214e: 	movq	(%rax), %rcx
    00002151: 	cmpq	%rdx, %rcx
    00002154: 	jne	.Ltmp3762 # Offset: 8532
    0000215a: 	movdqu	0x10(%rax), %xmm5
    0000215f: 	movaps	%xmm5, 0x190(%rsp)
    00002167: 	jmp	.Ltmp3763 # Offset: 8551
.Ltmp3761:
    0000216c: 	movq	0x28(%rsp), %rdi
    00002171: 	jmp	.Ltmp3764 # Offset: 8561
.Ltmp3758:
    00002176: 	callq	__stack_chk_fail@PLT # Offset: 8566
    0000217b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3717:
    00002180: 	leal	0x7(%rdx), %esi
    00002183: 	jmp	.Ltmp3765 # Offset: 8579
.Ltmp3733:
    00002188: 	leaq	DATAat0x3414b(%rip), %rdi
    0000218f: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8591
    00002194: 	nopl	(%rax) # Size: 4
.Ltmp3732:
    00002198: 	movdqu	0x10(%rax), %xmm4
    0000219d: 	movaps	%xmm4, 0x190(%rsp)
    000021a5: 	jmp	.Ltmp3763 # Offset: 8613
.Ltmp3729:
    000021aa: 	leaq	DATAat0x3414b(%rip), %rdi
    000021b1: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8625
    000021b6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3716:
    000021c0: 	leal	0x6(%rdx), %esi
    000021c3: 	jmp	.Ltmp3765 # Offset: 8643
.Ltmp3715:
    000021c8: 	leal	0x5(%rdx), %esi
    000021cb: 	jmp	.Ltmp3765 # Offset: 8651
.Ltmp3713:
    000021d0: 	movl	$0x4, %esi
    000021d5: 	jmp	.Ltmp3765 # Offset: 8661
.Ltmp3712:
    000021da: 	movl	$0x3, %esi
    000021df: 	jmp	.Ltmp3765 # Offset: 8671
.Ltmp3711:
    000021e4: 	movl	$0x2, %esi
    000021e9: 	jmp	.Ltmp3765 # Offset: 8681
.Ltmp3710:
    000021ee: 	movl	$0x1, %esi
    000021f3: 	jmp	.Ltmp3765 # Offset: 8691
    000021f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3708:
    00002200: 	movl	$0x1, %esi
    00002205: 	xorl	%ebp, %ebp
    00002207: 	jmp	.Ltmp3765 # Offset: 8711
.Ltmp3699:
    0000220c: 	leaq	DATAat0x3414b(%rip), %rdi
    00002213: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8723
.Ltmp3695:
    00002218: 	leaq	DATAat0x3414b(%rip), %rdi
    0000221f: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8735
.Ltmp3694:
    00002224: 	movq	0x8(%rsp), %rdi
    00002229: 	jmp	.Ltmp3766 # Offset: 8745
    0000222e: 	nop # Size: 2
.Ltmp3659:
    00002230: 	leaq	DATAat0x3414b(%rip), %rdi
    00002237: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8759
.Ltmp3655:
    0000223c: 	leaq	DATAat0x3414b(%rip), %rdi
    00002243: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8771
.Ltmp3631:
    00002248: 	movq	0x8(%rsp), %rdi
    0000224d: 	jmp	.Ltmp3767 # Offset: 8781
    00002252: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3680:
    00002258: 	movl	$0x4, %esi
    0000225d: 	jmp	.Ltmp3726 # Offset: 8797
.Ltmp3679:
    00002262: 	movl	$0x3, %esi
    00002267: 	jmp	.Ltmp3726 # Offset: 8807
.Ltmp3621:
    0000226c: 	leaq	DATAat0x3414b(%rip), %rdi
    00002273: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8819
.Ltmp3593:
    00002278: 	movq	0x8(%rsp), %rdi
    0000227d: 	jmp	.Ltmp3768 # Offset: 8829
    00002282: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3617:
    00002288: 	leaq	DATAat0x3414b(%rip), %rdi
    0000228f: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8847
.Ltmp3614:
    00002294: 	leaq	DATAat0x34008(%rip), %rdi
    0000229b: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8859
.Ltmp3581:
    000022a0: 	leaq	DATAat0x3414b(%rip), %rdi
    000022a7: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8871
.Ltmp3578:
    000022ac: 	leaq	DATAat0x34008(%rip), %rdi
    000022b3: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8883
.Ltmp3585:
    000022b8: 	leaq	DATAat0x3414b(%rip), %rdi
    000022bf: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8895
.Ltmp3652:
    000022c4: 	leaq	DATAat0x34008(%rip), %rdi
    000022cb: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8907
.Ltmp3670:
    000022d0: 	movq	0x8(%rsp), %rdi
    000022d5: 	jmp	.Ltmp3769 # Offset: 8917
.Ltmp3690:
    000022da: 	leaq	DATAat0x34008(%rip), %rdi
    000022e1: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8929
    000022e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3678:
    000022f0: 	movl	$0x2, %esi
    000022f5: 	jmp	.Ltmp3726 # Offset: 8949
    000022fa: 	endbr64
    000022fe: 	movq	%rax, %rbx
    00002301: 	jmp	.Ltmp3770 # Offset: 8961
    00002306: 	endbr64
.Ltmp3783:
    0000230a: 	movq	%rax, %rbx
    0000230d: 	jmp	.Ltmp3771 # Offset: 8973
    00002312: 	endbr64
.Ltmp3784:
    00002316: 	movq	%rax, %r12
    00002319: 	jmp	.Ltmp3772 # Offset: 8985
    0000231e: 	endbr64
    00002322: 	movq	%rax, %rbx
    00002325: 	jmp	.Ltmp3773 # Offset: 8997
    00002327: 	endbr64
    0000232b: 	movq	%rax, %rbx
    0000232e: 	jmp	.Ltmp3774 # Offset: 9006
    00002333: 	endbr64
.Ltmp3792:
    00002337: 	movq	%rax, %rbx
    0000233a: 	jmp	.Ltmp3775 # Offset: 9018
    0000233c: 	endbr64
    00002340: 	movq	%rax, %rbx
    00002343: 	jmp	.Ltmp3776 # Offset: 9027
    00002345: 	endbr64
    00002349: 	movq	%rax, %rbx
    0000234c: 	jmp	.Ltmp3777 # Offset: 9036
    00002351: 	endbr64
    00002355: 	movq	%rax, %rbx
    00002358: 	jmp	.Ltmp3778 # Offset: 9048
.Ltmp3794:
    0000235d: 	movq	0x1c0(%rsp), %rdi
    00002365: 	cmpq	0x18(%rsp), %rdi
    0000236a: 	je	.Ltmp3773 # Offset: 9066
    0000236c: 	movq	0x1d0(%rsp), %rax
    00002374: 	leaq	0x1(%rax), %rsi
    00002378: 	callq	_ZdlPvm@PLT # Offset: 9080
.Ltmp3773:
    0000237d: 	movq	0x1a0(%rsp), %rdi
    00002385: 	cmpq	0x20(%rsp), %rdi
    0000238a: 	je	.Ltmp3775 # Offset: 9098
    0000238c: 	movq	0x1b0(%rsp), %rax
    00002394: 	leaq	0x1(%rax), %rsi
    00002398: 	callq	_ZdlPvm@PLT # Offset: 9112
.Ltmp3775:
    0000239d: 	movq	0x160(%rsp), %rdi
    000023a5: 	cmpq	0x8(%rsp), %rdi
    000023aa: 	je	.Ltmp3776 # Offset: 9130
    000023ac: 	movq	0x170(%rsp), %rax
    000023b4: 	leaq	0x1(%rax), %rsi
    000023b8: 	callq	_ZdlPvm@PLT # Offset: 9144
.Ltmp3776:
    000023bd: 	movq	0x180(%rsp), %rdi
    000023c5: 	cmpq	0x10(%rsp), %rdi
    000023ca: 	je	.Ltmp3777 # Offset: 9162
    000023cc: 	movq	0x190(%rsp), %rax
    000023d4: 	leaq	0x1(%rax), %rsi
    000023d8: 	callq	_ZdlPvm@PLT # Offset: 9176
.Ltmp3777:
    000023dd: 	movq	0x70(%rsp), %rsi
    000023e2: 	movq	0x28(%rsp), %rax
    000023e7: 	subq	%rax, %rsi
    000023ea: 	testq	%rax, %rax
    000023ed: 	je	.Ltmp3779 # Offset: 9197
    000023ef: 	movq	%rax, %rdi
    000023f2: 	callq	_ZdlPvm@PLT # Offset: 9202
.Ltmp3779:
    000023f7: 	movq	0x120(%rsp), %rdi
    000023ff: 	leaq	0x130(%rsp), %rax
    00002407: 	cmpq	%rax, %rdi
    0000240a: 	je	.Ltmp3780 # Offset: 9226
    0000240c: 	movq	0x130(%rsp), %rax
    00002414: 	leaq	0x1(%rax), %rsi
    00002418: 	callq	_ZdlPvm@PLT # Offset: 9240
.Ltmp3780:
    0000241d: 	movq	%rbx, %rdi
    00002420: 	callq	_Unwind_Resume@PLT # Offset: 9248
.Ltmp3812:
    00002425: 	movq	0x1c0(%rsp), %rdi
    0000242d: 	cmpq	0x18(%rsp), %rdi
    00002432: 	je	.Ltmp3770 # Offset: 9266
    00002434: 	movq	0x1d0(%rsp), %rax
    0000243c: 	leaq	0x1(%rax), %rsi
    00002440: 	callq	_ZdlPvm@PLT # Offset: 9280
.Ltmp3770:
    00002445: 	movq	0x1a0(%rsp), %rdi
    0000244d: 	cmpq	0x20(%rsp), %rdi
    00002452: 	je	.Ltmp3771 # Offset: 9298
    00002454: 	movq	0x1b0(%rsp), %rax
    0000245c: 	leaq	0x1(%rax), %rsi
    00002460: 	callq	_ZdlPvm@PLT # Offset: 9312
.Ltmp3771:
    00002465: 	movq	0x160(%rsp), %rdi
    0000246d: 	cmpq	0x8(%rsp), %rdi
    00002472: 	je	.Ltmp3781 # Offset: 9330
    00002474: 	movq	0x170(%rsp), %rax
    0000247c: 	leaq	0x1(%rax), %rsi
    00002480: 	callq	_ZdlPvm@PLT # Offset: 9344
.Ltmp3781:
    00002485: 	movq	0x180(%rsp), %rdi
    0000248d: 	cmpq	0x10(%rsp), %rdi
    00002492: 	je	.Ltmp3778 # Offset: 9362
    00002494: 	movq	0x190(%rsp), %rax
    0000249c: 	leaq	0x1(%rax), %rsi
    000024a0: 	callq	_ZdlPvm@PLT # Offset: 9376
.Ltmp3778:
    000024a5: 	movq	0xd0(%rsp), %rdi
.Ltmp3782:
    000024ad: 	cmpq	0x60(%rsp), %rdi
    000024b2: 	je	.Ltmp3779 # Offset: 9394
    000024b8: 	movq	(%rdi), %rbp
    000024bb: 	movl	$0x18, %esi
    000024c0: 	callq	_ZdlPvm@PLT # Offset: 9408
    000024c5: 	movq	%rbp, %rdi
    000024c8: 	jmp	.Ltmp3782 # Offset: 9416
    000024ca: 	endbr64
    000024ce: 	jmp	.Ltmp3783 # Offset: 9422
    000024d3: 	endbr64
    000024d7: 	jmp	.Ltmp3784 # Offset: 9431
    000024dc: 	endbr64
    000024e0: 	movq	%rax, %rbx
    000024e3: 	jmp	.Ltmp3785 # Offset: 9443
.Ltmp3793:
    000024e5: 	movq	0x1c0(%rsp), %rdi
    000024ed: 	cmpq	0x18(%rsp), %rdi
    000024f2: 	je	.Ltmp3774 # Offset: 9458
    000024f4: 	movq	0x1d0(%rsp), %rax
    000024fc: 	leaq	0x1(%rax), %rsi
    00002500: 	callq	_ZdlPvm@PLT # Offset: 9472
.Ltmp3774:
    00002505: 	movq	0x1a0(%rsp), %rdi
    0000250d: 	cmpq	0x20(%rsp), %rdi
    00002512: 	je	.Ltmp3786 # Offset: 9490
    00002514: 	movq	0x1b0(%rsp), %rax
    0000251c: 	leaq	0x1(%rax), %rsi
    00002520: 	callq	_ZdlPvm@PLT # Offset: 9504
.Ltmp3786:
    00002525: 	movq	0x160(%rsp), %rdi
    0000252d: 	cmpq	0x8(%rsp), %rdi
    00002532: 	je	.Ltmp3785 # Offset: 9522
    00002534: 	movq	0x170(%rsp), %rax
    0000253c: 	leaq	0x1(%rax), %rsi
    00002540: 	callq	_ZdlPvm@PLT # Offset: 9536
.Ltmp3785:
    00002545: 	movq	0x180(%rsp), %rdi
    0000254d: 	cmpq	0x10(%rsp), %rdi
    00002552: 	je	.Ltmp3787 # Offset: 9554
    00002554: 	movq	0x190(%rsp), %rax
    0000255c: 	leaq	0x1(%rax), %rsi
    00002560: 	callq	_ZdlPvm@PLT # Offset: 9568
.Ltmp3787:
    00002565: 	movq	0x30(%rsp), %rdi
    0000256a: 	movl	$0x2, %esi
    0000256f: 	callq	_ZdlPvm@PLT # Offset: 9583
    00002574: 	jmp	.Ltmp3779 # Offset: 9588
.Ltmp3807:
    00002579: 	movq	0x1c0(%rsp), %rdi
    00002581: 	cmpq	0x18(%rsp), %rdi
    00002586: 	je	.Ltmp3788 # Offset: 9606
    00002588: 	movq	0x1d0(%rsp), %rax
    00002590: 	leaq	0x1(%rax), %rsi
    00002594: 	callq	_ZdlPvm@PLT # Offset: 9620
.Ltmp3788:
    00002599: 	movq	0x1a0(%rsp), %rdi
    000025a1: 	cmpq	0x20(%rsp), %rdi
    000025a6: 	je	.Ltmp3772 # Offset: 9638
    000025a8: 	movq	0x1b0(%rsp), %rax
    000025b0: 	leaq	0x1(%rax), %rsi
    000025b4: 	callq	_ZdlPvm@PLT # Offset: 9652
.Ltmp3772:
    000025b9: 	movq	0x160(%rsp), %rdi
    000025c1: 	cmpq	0x8(%rsp), %rdi
    000025c6: 	je	.Ltmp3789 # Offset: 9670
    000025c8: 	movq	0x170(%rsp), %rax
    000025d0: 	leaq	0x1(%rax), %rsi
    000025d4: 	callq	_ZdlPvm@PLT # Offset: 9684
.Ltmp3789:
    000025d9: 	movq	0x180(%rsp), %rdi
    000025e1: 	cmpq	0x10(%rsp), %rdi
    000025e6: 	je	.Ltmp3790 # Offset: 9702
    000025e8: 	movq	0x190(%rsp), %rax
    000025f0: 	leaq	0x1(%rax), %rsi
    000025f4: 	callq	_ZdlPvm@PLT # Offset: 9716
.Ltmp3790:
    000025f9: 	movq	0xd0(%rsp), %r13
    00002601: 	addq	$0x8, %rbp
    00002605: 	testq	%r13, %r13
    00002608: 	jne	.Ltmp3791 # Offset: 9736
.Ltmp3796:
    0000260a: 	movq	%r12, %rbx
    0000260d: 	jmp	.Ltmp3779 # Offset: 9741
    00002612: 	endbr64
    00002616: 	movq	%rax, %r12
    00002619: 	jmp	.Ltmp3790 # Offset: 9753
    0000261b: 	endbr64
    0000261f: 	jmp	.Ltmp3792 # Offset: 9759
    00002624: 	endbr64
    00002628: 	movq	%rax, %rbx
    0000262b: 	jmp	.Ltmp3793 # Offset: 9771
    00002630: 	endbr64
    00002634: 	movq	%rax, %rbx
    00002637: 	jmp	.Ltmp3794 # Offset: 9783
.Ltmp3795:
    0000263c: 	movq	(%rbx), %rdi
    0000263f: 	movl	$0x200, %esi
    00002644: 	addq	$0x8, %rbx
    00002648: 	callq	_ZdlPvm@PLT # Offset: 9800
.Ltmp3791:
    0000264d: 	cmpq	%rbx, %rbp
    00002650: 	ja	.Ltmp3795 # Offset: 9808
    00002652: 	movq	0xd8(%rsp), %rax
    0000265a: 	movq	%r13, %rdi
    0000265d: 	leaq	(,%rax,8), %rsi
    00002665: 	callq	_ZdlPvm@PLT # Offset: 9829
    0000266a: 	jmp	.Ltmp3796 # Offset: 9834
    0000266c: 	endbr64
.Ltmp3804:
    00002670: 	movq	%rax, %rbx
    00002673: 	jmp	.Ltmp3797 # Offset: 9843
    00002675: 	endbr64
    00002679: 	movq	%rax, %rbx
    0000267c: 	jmp	.Ltmp3798 # Offset: 9852
.Ltmp3797:
    0000267e: 	movq	0x1c0(%rsp), %rdi
    00002686: 	cmpq	0x18(%rsp), %rdi
    0000268b: 	je	.Ltmp3798 # Offset: 9867
    0000268d: 	movq	0x1d0(%rsp), %rax
    00002695: 	leaq	0x1(%rax), %rsi
    00002699: 	callq	_ZdlPvm@PLT # Offset: 9881
.Ltmp3798:
    0000269e: 	movq	0x1a0(%rsp), %rdi
    000026a6: 	cmpq	0x20(%rsp), %rdi
    000026ab: 	je	.Ltmp3799 # Offset: 9899
    000026ad: 	movq	0x1b0(%rsp), %rax
    000026b5: 	leaq	0x1(%rax), %rsi
    000026b9: 	callq	_ZdlPvm@PLT # Offset: 9913
.Ltmp3799:
    000026be: 	movq	0x180(%rsp), %rdi
    000026c6: 	cmpq	0x10(%rsp), %rdi
    000026cb: 	je	.Ltmp3800 # Offset: 9931
    000026cd: 	movq	0x190(%rsp), %rax
    000026d5: 	leaq	0x1(%rax), %rsi
    000026d9: 	callq	_ZdlPvm@PLT # Offset: 9945
.Ltmp3800:
    000026de: 	movq	0x140(%rsp), %rdi
    000026e6: 	cmpq	0x28(%rsp), %rdi
    000026eb: 	je	.Ltmp3801 # Offset: 9963
    000026ed: 	movq	0x150(%rsp), %rax
    000026f5: 	leaq	0x1(%rax), %rsi
    000026f9: 	callq	_ZdlPvm@PLT # Offset: 9977
.Ltmp3801:
    000026fe: 	movq	0x160(%rsp), %rdi
    00002706: 	cmpq	0x8(%rsp), %rdi
    0000270b: 	je	.Ltmp3802 # Offset: 9995
    0000270d: 	movq	0x170(%rsp), %rax
    00002715: 	leaq	0x1(%rax), %rsi
    00002719: 	callq	_ZdlPvm@PLT # Offset: 10009
.Ltmp3802:
    0000271e: 	movq	%rbp, %rdi
.Ltmp3803:
    00002721: 	testq	%rdi, %rdi
    00002724: 	je	.Ltmp3779 # Offset: 10020
    0000272a: 	movq	(%rdi), %r12
    0000272d: 	movl	$0x10, %esi
    00002732: 	callq	_ZdlPvm@PLT # Offset: 10034
    00002737: 	movq	%r12, %rdi
    0000273a: 	jmp	.Ltmp3803 # Offset: 10042
    0000273c: 	endbr64
    00002740: 	jmp	.Ltmp3804 # Offset: 10048
    00002745: 	endbr64
    00002749: 	jmp	.Ltmp3804 # Offset: 10057
    0000274e: 	endbr64
    00002752: 	movq	%rax, %rbx
    00002755: 	jmp	.Ltmp3779 # Offset: 10069
    0000275a: 	endbr64
    0000275e: 	movq	%rax, %rbx
    00002761: 	jmp	.Ltmp3787 # Offset: 10081
    00002766: 	endbr64
.Ltmp3805:
    0000276a: 	movq	%rax, %rbx
    0000276d: 	jmp	.Ltmp3786 # Offset: 10093
    00002772: 	endbr64
    00002776: 	jmp	.Ltmp3805 # Offset: 10102
    00002778: 	endbr64
    0000277c: 	movq	%rax, %r12
    0000277f: 	jmp	.Ltmp3789 # Offset: 10111
    00002784: 	endbr64
    00002788: 	movq	%rax, %rbp
    0000278b: 	jmp	.Ltmp3806 # Offset: 10123
    0000278d: 	endbr64
    00002791: 	movq	%rax, %r12
    00002794: 	jmp	.Ltmp3807 # Offset: 10132
    00002799: 	endbr64
    0000279d: 	movq	%rax, %r12
    000027a0: 	jmp	.Ltmp3788 # Offset: 10144
.Ltmp3806:
    000027a5: 	movq	0xd0(%rsp), %rdi
.Ltmp3809:
    000027ad: 	cmpq	0x60(%rsp), %rdi
    000027b2: 	je	.Ltmp3808 # Offset: 10162
    000027b4: 	movq	(%rdi), %rbx
    000027b7: 	movl	$0x18, %esi
    000027bc: 	callq	_ZdlPvm@PLT # Offset: 10172
    000027c1: 	movq	%rbx, %rdi
    000027c4: 	jmp	.Ltmp3809 # Offset: 10180
.Ltmp3811:
    000027c6: 	movq	0xb0(%rsp), %rdi
.Ltmp3813:
    000027ce: 	testq	%rdi, %rdi
    000027d1: 	jne	.Ltmp3810 # Offset: 10193
.Ltmp3808:
    000027d3: 	movq	%rbp, %rbx
    000027d6: 	jmp	.Ltmp3779 # Offset: 10198
    000027db: 	endbr64
    000027df: 	movq	%rax, %rbx
    000027e2: 	jmp	.Ltmp3781 # Offset: 10210
    000027e7: 	endbr64
    000027eb: 	movq	%rax, %rbp
    000027ee: 	jmp	.Ltmp3811 # Offset: 10222
    000027f0: 	endbr64
.Ltmp3814:
    000027f4: 	movq	%rax, %rbx
    000027f7: 	jmp	.Ltmp3800 # Offset: 10231
    000027fc: 	endbr64
    00002800: 	movq	%rax, %rbx
    00002803: 	jmp	.Ltmp3812 # Offset: 10243
.Ltmp3810:
    00002808: 	movq	(%rdi), %rbx
    0000280b: 	movl	$0x10, %esi
    00002810: 	callq	_ZdlPvm@PLT # Offset: 10256
    00002815: 	movq	%rbx, %rdi
    00002818: 	jmp	.Ltmp3813 # Offset: 10264
    0000281a: 	endbr64
    0000281e: 	movq	%rax, %rbx
    00002821: 	jmp	.Ltmp3799 # Offset: 10273
    00002826: 	endbr64
    0000282a: 	jmp	.Ltmp3814 # Offset: 10282
    0000282c: 	endbr64
    00002830: 	jmp	.Ltmp3804 # Offset: 10288
    00002835: 	endbr64
    00002839: 	jmp	.Ltmp3804 # Offset: 10297
    0000283e: 	endbr64
    00002842: 	jmp	.Ltmp3804 # Offset: 10306
    00002847: 	endbr64
    0000284b: 	jmp	.Ltmp3804 # Offset: 10315
    00002850: 	endbr64
    00002854: 	jmp	.Ltmp3804 # Offset: 10324
    00002859: 	endbr64
    0000285d: 	jmp	.Ltmp3804 # Offset: 10333
    00002862: 	endbr64
    00002866: 	movq	%rax, %rbx
    00002869: 	jmp	.Ltmp3802 # Offset: 10345
    0000286e: 	endbr64
    00002872: 	movq	%rax, %rbx
    00002875: 	jmp	.Ltmp3801 # Offset: 10357
    0000287a: 	endbr64
    0000287e: 	jmp	.Ltmp3804 # Offset: 10366
    00002883: 	endbr64
    00002887: 	jmp	.Ltmp3804 # Offset: 10375
    0000288c: 	endbr64
    00002890: 	jmp	.Ltmp3804 # Offset: 10384
    00002895: 	endbr64
    00002899: 	jmp	.Ltmp3804 # Offset: 10393
    0000289e: 	endbr64
    000028a2: 	jmp	.Ltmp3804 # Offset: 10402
    000028a7: 	endbr64
    000028ab: 	jmp	.Ltmp3804 # Offset: 10411
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeItEvv"

Binary Function "_Z24binarysearch_recur_innerISt18_Fwd_list_iteratorItEtlEbT_T0_T1_" after disassembly {
  Number      : 398
  State       : disassembled
  Address     : 0x20420
  Size        : 0x6b
  MaxSize     : 0x70
  Offset      : 0x20420
  Section     : .text
  Orc Section : .local.text._Z24binarysearch_recur_innerISt18_Fwd_list_iteratorItEtlEbT_T0_T1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0397:
    00000000: 	endbr64
    00000004: 	testq	%rdx, %rdx
    00000007: 	je	.Ltmp3815 # Offset: 7
    00000009: 	movq	%rdx, %r8
    0000000c: 	movq	%rdi, %rcx
    0000000f: 	shrq	$0x3f, %r8
    00000013: 	addq	%rdx, %r8
    00000016: 	sarq	%r8
    00000019: 	leaq	-0x1(%r8), %rax
    0000001d: 	je	.Ltmp3816 # Offset: 29
    0000001f: 	nop # Size: 1
.Ltmp3817:
    00000020: 	movq	(%rcx), %rcx
    00000023: 	subq	$0x1, %rax
    00000027: 	jae	.Ltmp3817 # Offset: 39
.Ltmp3816:
    00000029: 	cmpw	%si, 0x8(%rcx)
    0000002d: 	jb	.Ltmp3818 # Offset: 45
    0000002f: 	movl	$0x1, %eax
    00000034: 	ja	.Ltmp3819 # Offset: 52
    00000036: 	retq # Offset: 54
    00000037: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3815:
    00000040: 	xorl	%eax, %eax
    00000042: 	retq # Offset: 66
    00000043: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3818:
    00000048: 	addq	$0x1, %r8
    0000004c: 	movq	(%rcx), %rdi
    0000004f: 	movzwl	%si, %esi
    00000052: 	subq	%r8, %rdx
    00000055: 	jmp	.LBB0397 # Offset: 85
    0000005a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3819:
    00000060: 	movzwl	%si, %esi
    00000063: 	movq	%r8, %rdx
    00000066: 	jmp	.LBB0397 # Offset: 102
DWARF CFI Instructions:
    <empty>
End of Function "_Z24binarysearch_recur_innerISt18_Fwd_list_iteratorItEtlEbT_T0_T1_"

Binary Function "_Z18binarysearch_recurISt18_Fwd_list_iteratorItEtEbT_S2_T0_" after disassembly {
  Number      : 399
  State       : disassembled
  Address     : 0x20490
  Size        : 0x161
  MaxSize     : 0x170
  Offset      : 0x20490
  Section     : .text
  Orc Section : .local.text._Z18binarysearch_recurISt18_Fwd_list_iteratorItEtEbT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0398:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	movl	%edx, %r9d
    0000000a: 	movq	%rdi, %r10
    0000000d: 	cmpq	%rsi, %rdi
    00000010: 	je	.Ltmp3820 # Offset: 16
    00000012: 	movq	%rdi, %rax
    00000015: 	xorl	%edx, %edx
    00000017: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3821:
    00000020: 	movq	(%rax), %rax
    00000023: 	movq	%rdx, %rdi
    00000026: 	addq	$0x1, %rdx
    0000002a: 	cmpq	%rsi, %rax
    0000002d: 	jne	.Ltmp3821 # Offset: 45
    0000002f: 	movq	%rdx, %rsi
    00000032: 	movq	%r8, %rcx
    00000035: 	sarq	%rsi
    00000038: 	leaq	-0x1(%rsi), %rax
    0000003c: 	je	.Ltmp3822 # Offset: 60
    0000003e: 	nop # Size: 2
.Ltmp3823:
    00000040: 	movq	(%rcx), %rcx
    00000043: 	subq	$0x1, %rax
    00000047: 	jae	.Ltmp3823 # Offset: 71
.Ltmp3822:
    00000049: 	movzwl	%r9w, %r11d
    0000004d: 	cmpw	0x8(%rcx), %r9w
    00000052: 	ja	.Ltmp3824 # Offset: 82
    00000054: 	movl	$0x1, %eax
    00000059: 	jb	.Ltmp3825 # Offset: 89
.Ltmp3829:
    0000005b: 	retq # Offset: 91
    0000005c: 	nopl	(%rax) # Size: 4
.Ltmp3820:
    00000060: 	xorl	%eax, %eax
    00000062: 	retq # Offset: 98
    00000063: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3824:
    00000068: 	subq	%rsi, %rdi
    0000006b: 	je	.Ltmp3820 # Offset: 107
    0000006d: 	movq	%rdi, %r8
    00000070: 	movq	(%rcx), %r10
    00000073: 	shrq	$0x3f, %r8
    00000077: 	addq	%rdi, %r8
    0000007a: 	movq	%r10, %rdx
    0000007d: 	sarq	%r8
    00000080: 	leaq	-0x1(%r8), %rax
    00000084: 	je	.Ltmp3826 # Offset: 132
    00000086: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3827:
    00000090: 	movq	(%rdx), %rdx
    00000093: 	subq	$0x1, %rax
    00000097: 	jae	.Ltmp3827 # Offset: 151
.Ltmp3826:
    00000099: 	cmpw	0x8(%rdx), %r9w
    0000009e: 	ja	.Ltmp3828 # Offset: 158
.Ltmp3835:
    000000a0: 	movl	$0x1, %eax
    000000a5: 	jae	.Ltmp3829 # Offset: 165
    000000a7: 	movq	%r8, %rdx
    000000aa: 	movl	%r11d, %esi
    000000ad: 	movq	%r10, %rdi
    000000b0: 	jmp	_Z24binarysearch_recur_innerISt18_Fwd_list_iteratorItEtlEbT_T0_T1_ # TAILCALL  # Offset: 176
    000000b5: 	nopl	(%rax) # Size: 3
.Ltmp3825:
    000000b8: 	testq	%rsi, %rsi
    000000bb: 	je	.Ltmp3820 # Offset: 187
    000000bd: 	sarq	$0x2, %rdx
    000000c1: 	leaq	-0x1(%rdx), %rax
    000000c5: 	je	.Ltmp3830 # Offset: 197
    000000c7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3831:
    000000d0: 	movq	(%r10), %r10
    000000d3: 	subq	$0x1, %rax
    000000d7: 	jae	.Ltmp3831 # Offset: 215
.Ltmp3830:
    000000d9: 	cmpw	0x8(%r10), %r9w
    000000de: 	ja	.Ltmp3832 # Offset: 222
    000000e0: 	movl	$0x1, %eax
    000000e5: 	jae	.Ltmp3829 # Offset: 229
    000000eb: 	movl	%r11d, %esi
    000000ee: 	movq	%r8, %rdi
    000000f1: 	jmp	_Z24binarysearch_recur_innerISt18_Fwd_list_iteratorItEtlEbT_T0_T1_ # TAILCALL  # Offset: 241
.Ltmp3828:
    000000f6: 	movq	(%rdx), %rdx
    000000f9: 	addq	$0x1, %r8
    000000fd: 	movq	%rdx, %r10
    00000100: 	subq	%r8, %rdi
    00000103: 	je	.Ltmp3820 # Offset: 259
    00000109: 	movq	%rdi, %r8
    0000010c: 	shrq	$0x3f, %r8
    00000110: 	addq	%rdi, %r8
    00000113: 	sarq	%r8
    00000116: 	leaq	-0x1(%r8), %rax
    0000011a: 	je	.Ltmp3833 # Offset: 282
    0000011c: 	nopl	(%rax) # Size: 4
.Ltmp3834:
    00000120: 	movq	(%rdx), %rdx
    00000123: 	subq	$0x1, %rax
    00000127: 	jae	.Ltmp3834 # Offset: 295
.Ltmp3833:
    00000129: 	cmpw	0x8(%rdx), %r9w
    0000012e: 	jbe	.Ltmp3835 # Offset: 302
    00000134: 	movq	(%rdx), %r10
    00000137: 	addq	$0x1, %r8
    0000013b: 	movl	%r11d, %esi
    0000013e: 	subq	%r8, %rdi
    00000141: 	movq	%rdi, %rdx
    00000144: 	movq	%r10, %rdi
    00000147: 	jmp	_Z24binarysearch_recur_innerISt18_Fwd_list_iteratorItEtlEbT_T0_T1_ # TAILCALL  # Offset: 327
.Ltmp3832:
    0000014c: 	addq	$0x1, %rdx
    00000150: 	movq	(%r10), %rdi
    00000153: 	subq	%rdx, %rsi
    00000156: 	movq	%rsi, %rdx
    00000159: 	movl	%r11d, %esi
    0000015c: 	jmp	_Z24binarysearch_recur_innerISt18_Fwd_list_iteratorItEtlEbT_T0_T1_ # TAILCALL  # Offset: 348
DWARF CFI Instructions:
    <empty>
End of Function "_Z18binarysearch_recurISt18_Fwd_list_iteratorItEtEbT_S2_T0_"

Binary Function "_Z15TestSearchArrayIPiPFS0_S0_S0_iEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 400
  State       : disassembled
  Address     : 0x20600
  Size        : 0x1e3
  MaxSize     : 0x1f0
  Offset      : 0x20600
  Section     : .text
  Orc Section : .local.text._Z15TestSearchArrayIPiPFS0_S0_S0_iEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0399:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rcx, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	movl	$0x1000, %edi
    00000015: 	pushq	%r12
    00000017: 	pushq	%rbp
    00000018: 	pushq	%rbx
    00000019: 	movq	%rsi, %rbx
    0000001c: 	subq	$0x28, %rsp
    00000020: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000027: 	movq	%rdx, 0x10(%rsp)
    0000002c: 	movq	%r8, 0x18(%rsp)
    00000031: 	movb	%r9b, (%rsp)
    00000035: 	callq	_Znwm@PLT # Offset: 53
    0000003a: 	movq	%rax, %r14
    0000003d: 	movl	$0x0, (%rax)
    00000043: 	addq	$0x4, %rax
    00000047: 	leaq	0x1000(%r14), %rsi
    0000004e: 	cmpq	%rsi, %rax
    00000051: 	je	.Ltmp3836 # Offset: 81
    00000053: 	leaq	0xc(%r14), %rdi
    00000057: 	movq	$0x0, 0x4(%r14)
    0000005f: 	movq	$0x0, 0xff8(%r14)
    0000006a: 	andq	$-0x8, %rdi
    0000006e: 	subq	%rdi, %rax
    00000071: 	movq	%rax, %rcx
    00000074: 	xorl	%eax, %eax
    00000076: 	addl	$0xffc, %ecx
    0000007c: 	shrl	$0x3, %ecx
    0000007f: 	rep		stosq	%rax, %es:(%rdi)
.Ltmp3836:
    00000082: 	movabsq	$0x5851f42d4c957f2d, %r8
    0000008c: 	movq	%r14, %rcx
    0000008f: 	movabsq	$0x14057b7ef767814f, %rdi
    00000099: 	nopl	(%rax) # Size: 7
.Ltmp3837:
    000000a0: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000000a7: 	addq	$0x4, %rcx
    000000ab: 	imulq	%r8, %rax
    000000af: 	addq	%rdi, %rax
    000000b2: 	movq	%rax, %rdx
    000000b5: 	movq	%rax, %r9
    000000b8: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000000bf: 	shrq	$0x14, %rdx
    000000c3: 	shlq	$0x17, %r9
    000000c7: 	xorq	%r9, %rdx
    000000ca: 	xorq	%rdx, %rax
    000000cd: 	xorl	%edx, %edx
    000000cf: 	divq	0x10(%rsp)
    000000d4: 	movl	(%r13,%rdx,4), %eax
    000000d9: 	movl	%eax, -0x4(%rcx)
    000000dc: 	cmpq	%rcx, %rsi
    000000df: 	jne	.Ltmp3837 # Offset: 223
    000000e1: 	callq	clock@PLT # Offset: 225
    000000e6: 	xorl	%r12d, %r12d
    000000e9: 	xorl	%ebp, %ebp
    000000eb: 	movq	%rax, start_time(%rip)
    000000f2: 	movzbl	(%rsp), %eax
    000000f6: 	xorl	$0x1, %eax
    000000f9: 	movb	%al, 0xf(%rsp)
.Ltmp3840:
    000000fd: 	leaq	0xc8(%rbp), %rax
    00000104: 	movq	%rax, (%rsp)
    00000108: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3838:
    00000110: 	movq	%rbp, %rax
    00000113: 	movq	%rbx, %rsi
    00000116: 	addq	$0x1, %rbp
    0000011a: 	movq	%r13, %rdi
    0000011d: 	andl	$0x3ff, %eax
    00000122: 	movl	(%r14,%rax,4), %edx
    00000126: 	callq	*%r15 # Offset: 294
    00000129: 	cmpq	%rax, %rbx
    0000012c: 	sete	%al
    0000012f: 	andb	0xf(%rsp), %al
    00000133: 	cmovnel	%eax, %r12d
    00000137: 	cmpq	(%rsp), %rbp
    0000013b: 	jne	.Ltmp3838 # Offset: 315
    0000013d: 	callq	clock@PLT # Offset: 317
    00000142: 	movsd	gMinimumTimeTarget(%rip), %xmm1
    0000014a: 	pxor	%xmm0, %xmm0
    0000014e: 	movq	%rax, end_time(%rip)
    00000155: 	subq	start_time(%rip), %rax
    0000015c: 	cvtsi2sd	%rax, %xmm0
    00000161: 	divsd	DATAat0x34410(%rip), %xmm0
    00000169: 	comisd	%xmm0, %xmm1
    0000016d: 	jbe	.Ltmp3839 # Offset: 365
    0000016f: 	cmpq	$0x5f5e0ff, %rbp
    00000176: 	jbe	.Ltmp3840 # Offset: 374
.Ltmp3839:
    00000178: 	movq	0x18(%rsp), %rdx
    0000017d: 	movq	0x10(%rsp), %rdi
    00000182: 	movq	%rbp, %rsi
    00000185: 	callq	_Z13record_resultdmmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 389
    0000018a: 	testb	%r12b, %r12b
    0000018d: 	jne	.Ltmp3841 # Offset: 397
.Ltmp3842:
    0000018f: 	addq	$0x28, %rsp
    00000193: 	movq	%r14, %rdi
    00000196: 	movl	$0x1000, %esi
    0000019b: 	popq	%rbx
    0000019c: 	popq	%rbp
    0000019d: 	popq	%r12
    0000019f: 	popq	%r13
    000001a1: 	popq	%r14
    000001a3: 	popq	%r15
    000001a5: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 421
.Ltmp3841:
    000001aa: 	movq	0x18(%rsp), %rax
    000001af: 	leaq	DATAat0x34137(%rip), %rsi
    000001b6: 	movl	$0x1, %edi
    000001bb: 	movq	(%rax), %rdx
    000001be: 	xorl	%eax, %eax
    000001c0: 	callq	__printf_chk@PLT # Offset: 448
    000001c5: 	jmp	.Ltmp3842 # Offset: 453
    000001c7: 	endbr64
    000001cb: 	movq	%rax, %rbp
    000001ce: 	movq	%r14, %rdi
    000001d1: 	movl	$0x1000, %esi
    000001d6: 	callq	_ZdlPvm@PLT # Offset: 470
    000001db: 	movq	%rbp, %rdi
    000001de: 	callq	_Unwind_Resume@PLT # Offset: 478
DWARF CFI Instructions:
    <empty>
End of Function "_Z15TestSearchArrayIPiPFS0_S0_S0_iEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z18quicksort2_forwardIPiEvT_S1_" after disassembly {
  Number      : 401
  State       : disassembled
  Address     : 0x207f0
  Size        : 0x13d
  MaxSize     : 0x140
  Offset      : 0x207f0
  Section     : .text
  Orc Section : .local.text._Z18quicksort2_forwardIPiEvT_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0400:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp3843 # Offset: 7
    0000000d: 	leaq	0x4(%rdi), %r8
    00000011: 	pushq	%r12
    00000013: 	movq	%rdi, %r12
    00000016: 	pushq	%rbp
    00000017: 	movq	%rsi, %rbp
    0000001a: 	pushq	%rbx
    0000001b: 	cmpq	%r8, %rsi
    0000001e: 	je	.Ltmp3844 # Offset: 30
.Ltmp3851:
    00000024: 	movq	(%r12), %xmm0
    0000002a: 	leaq	0x8(%r12), %rax
    0000002f: 	pshufd	$0xe1, %xmm0, %xmm1
    00000034: 	cmpq	%rax, %rbp
    00000037: 	je	.Ltmp3845 # Offset: 55
    0000003d: 	pshufd	$0xe5, %xmm0, %xmm2
    00000042: 	movd	%xmm0, %eax
    00000046: 	movd	%xmm2, %ecx
    0000004a: 	cmpl	%eax, %ecx
    0000004c: 	jge	.Ltmp3846 # Offset: 76
    0000004e: 	movq	%xmm1, (%r12)
    00000054: 	movd	%xmm0, %ecx
    00000058: 	movd	%xmm2, %eax
.Ltmp3846:
    0000005c: 	movl	0x8(%r12), %edx
    00000061: 	movd	%eax, %xmm3
    00000065: 	movd	%ecx, %xmm4
    00000069: 	movd	%edx, %xmm1
    0000006d: 	movd	%edx, %xmm0
    00000071: 	punpckldq	%xmm3, %xmm1
    00000075: 	punpckldq	%xmm4, %xmm0
    00000079: 	cmpl	%edx, %ecx
    0000007b: 	jle	.Ltmp3847 # Offset: 123
    0000007d: 	movq	%xmm0, 0x4(%r12)
    00000084: 	movl	%edx, %ecx
    00000086: 	cmpl	%eax, %edx
    00000088: 	jge	.Ltmp3847 # Offset: 136
    0000008a: 	movq	%xmm1, (%r12)
    00000090: 	movl	%eax, %ecx
.Ltmp3847:
    00000092: 	leaq	0xc(%r12), %rax
    00000097: 	cmpq	%rax, %rbp
    0000009a: 	je	.Ltmp3844 # Offset: 154
    0000009c: 	leaq	0x4(%r8), %rax
    000000a0: 	movq	%r8, %rbx
    000000a3: 	cmpq	%rax, %rbp
    000000a6: 	je	.Ltmp3848 # Offset: 166
    000000a8: 	movl	$0x1, %esi
    000000ad: 	nopl	(%rax) # Size: 3
.Ltmp3850:
    000000b0: 	movl	(%rax), %edx
    000000b2: 	cmpl	%ecx, %edx
    000000b4: 	jge	.Ltmp3849 # Offset: 180
    000000b6: 	movl	(%rbx), %edi
    000000b8: 	addq	$0x1, %rsi
    000000bc: 	addq	$0x4, %rbx
    000000c0: 	movl	%edi, (%rax)
    000000c2: 	movl	%edx, -0x4(%rbx)
.Ltmp3849:
    000000c5: 	addq	$0x4, %rax
    000000c9: 	cmpq	%rbp, %rax
    000000cc: 	jne	.Ltmp3850 # Offset: 204
    000000ce: 	leaq	-0x8(%rbp), %rax
    000000d2: 	subq	%r8, %rax
    000000d5: 	shrq	$0x2, %rax
    000000d9: 	addq	$0x3, %rax
    000000dd: 	subq	%rsi, %rax
    000000e0: 	cmpq	%rax, %rsi
    000000e3: 	jbe	.Ltmp3848 # Offset: 227
    000000e5: 	movq	%rbp, %rsi
    000000e8: 	movq	%rbx, %rdi
    000000eb: 	movq	%rbx, %rbp
    000000ee: 	callq	_Z18quicksort2_forwardIPiEvT_S1_ # Offset: 238
.Ltmp3852:
    000000f3: 	cmpq	%r12, %rbp
    000000f6: 	je	.Ltmp3844 # Offset: 246
    000000f8: 	leaq	0x4(%r12), %r8
    000000fd: 	cmpq	%rbp, %r8
    00000100: 	jne	.Ltmp3851 # Offset: 256
.Ltmp3844:
    00000106: 	popq	%rbx
    00000107: 	popq	%rbp
    00000108: 	popq	%r12
    0000010a: 	retq # Offset: 266
    0000010b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3848:
    00000110: 	movq	%r12, %rdi
    00000113: 	movq	%rbx, %rsi
    00000116: 	movq	%rbx, %r12
    00000119: 	callq	_Z18quicksort2_forwardIPiEvT_S1_ # Offset: 281
    0000011e: 	jmp	.Ltmp3852 # Offset: 286
.Ltmp3845:
    00000120: 	pshufd	$0xe5, %xmm0, %xmm5
    00000125: 	movd	%xmm0, %eax
    00000129: 	movd	%xmm5, %edx
    0000012d: 	cmpl	%eax, %edx
    0000012f: 	jge	.Ltmp3844 # Offset: 303
    00000131: 	movq	%xmm1, (%r12)
    00000137: 	popq	%rbx
    00000138: 	popq	%rbp
    00000139: 	popq	%r12
    0000013b: 	retq # Offset: 315
.Ltmp3843:
    0000013c: 	retq # Offset: 316
DWARF CFI Instructions:
    <empty>
End of Function "_Z18quicksort2_forwardIPiEvT_S1_"

Binary Function "_Z13TestOneSearchIPiPFS0_S0_S0_iEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 402
  State       : disassembled
  Address     : 0x20930
  Size        : 0x3fb
  MaxSize     : 0x400
  Offset      : 0x20930
  Section     : .text
  Orc Section : .local.text._Z13TestOneSearchIPiPFS0_S0_S0_iEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0401:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%r8, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rsi, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdx, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rdi, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	subq	$0x68, %rsp
    0000001e: 	movq	%rcx, 0x10(%rsp)
    00000023: 	movq	%fs:0x28, %rax
    0000002c: 	movq	%rax, 0x58(%rsp)
    00000031: 	xorl	%eax, %eax
    00000033: 	cmpq	%rsi, %rdi
    00000036: 	je	.Ltmp3853 # Offset: 54
    00000038: 	leaq	-0x4(%rsi), %rdx
    0000003c: 	movq	%rdi, %rax
    0000003f: 	subq	%rdi, %rdx
    00000042: 	movq	%rdx, %rcx
    00000045: 	shrq	$0x2, %rcx
    00000049: 	addq	$0x1, %rcx
    0000004d: 	cmpq	$0x8, %rdx
    00000051: 	jbe	.Ltmp3854 # Offset: 81
    00000053: 	movq	%rcx, %rdx
    00000056: 	movdqa	DATAat0x34550(%rip), %xmm0
    0000005e: 	shrq	$0x2, %rdx
    00000062: 	shlq	$0x4, %rdx
    00000066: 	addq	%rdi, %rdx
    00000069: 	nopl	(%rax) # Size: 7
.Ltmp3855:
    00000070: 	movups	%xmm0, (%rax)
    00000073: 	addq	$0x10, %rax
    00000077: 	cmpq	%rax, %rdx
    0000007a: 	jne	.Ltmp3855 # Offset: 122
    0000007c: 	movq	%rcx, %rdx
    0000007f: 	andq	$-0x4, %rdx
    00000083: 	leaq	(%rbp,%rdx,4), %rax
    00000088: 	cmpq	%rdx, %rcx
    0000008b: 	je	.Ltmp3853 # Offset: 139
.Ltmp3854:
    0000008d: 	leaq	0x4(%rax), %rdx
    00000091: 	movl	$0x5, (%rax)
    00000097: 	cmpq	%rdx, %r13
    0000009a: 	je	.Ltmp3853 # Offset: 154
    0000009c: 	leaq	0x8(%rax), %rdx
    000000a0: 	movl	$0x5, 0x4(%rax)
    000000a7: 	cmpq	%rdx, %r13
    000000aa: 	je	.Ltmp3853 # Offset: 170
    000000ac: 	movl	$0x5, 0x8(%rax)
.Ltmp3853:
    000000b3: 	movq	(%r14), %r8
    000000b6: 	leaq	0x40(%rsp), %rax
    000000bb: 	movq	0x8(%r14), %r15
    000000bf: 	movzbl	%r9b, %ebx
    000000c3: 	movq	%rax, 0x8(%rsp)
    000000c8: 	movq	%rax, 0x30(%rsp)
    000000cd: 	movq	%r8, %rax
    000000d0: 	addq	%r15, %rax
    000000d3: 	je	.Ltmp3856 # Offset: 211
    000000d5: 	testq	%r8, %r8
    000000d8: 	je	.Ltmp3857 # Offset: 216
.Ltmp3856:
    000000de: 	movq	%r15, 0x28(%rsp)
    000000e3: 	cmpq	$0xf, %r15
    000000e7: 	ja	.Ltmp3858 # Offset: 231
    000000ed: 	cmpq	$0x1, %r15
    000000f1: 	jne	.Ltmp3859 # Offset: 241
    000000f7: 	movzbl	(%r8), %eax
    000000fb: 	movb	%al, 0x40(%rsp)
    000000ff: 	movq	0x8(%rsp), %rax
.Ltmp3874:
    00000104: 	movq	%r15, 0x38(%rsp)
    00000109: 	movb	$0x0, (%rax,%r15)
    0000010e: 	movabsq	$0x3fffffffffffffff, %rax
    00000118: 	subq	0x38(%rsp), %rax
    0000011d: 	cmpq	$0xc, %rax
    00000121: 	jbe	.Ltmp3860 # Offset: 289
    00000127: 	leaq	0x30(%rsp), %r15
    0000012c: 	movl	$0xd, %edx
    00000131: 	leaq	DATAat0x34160(%rip), %rsi
    00000138: 	movq	%r15, %rdi
    0000013b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 315
    00000140: 	movq	0x10(%rsp), %rcx
    00000145: 	movl	%ebx, %r9d
    00000148: 	movq	%r15, %r8
    0000014b: 	movq	%r12, %rdx
    0000014e: 	movq	%r13, %rsi
    00000151: 	movq	%rbp, %rdi
    00000154: 	callq	_Z15TestSearchArrayIPiPFS0_S0_S0_iEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 340
    00000159: 	movq	0x30(%rsp), %rdi
    0000015e: 	cmpq	0x8(%rsp), %rdi
    00000163: 	je	.Ltmp3861 # Offset: 355
    00000165: 	movq	0x40(%rsp), %rax
    0000016a: 	leaq	0x1(%rax), %rsi
    0000016e: 	callq	_ZdlPvm@PLT # Offset: 366
.Ltmp3861:
    00000173: 	cmpq	$0x9, %r12
    00000177: 	jbe	.Ltmp3862 # Offset: 375
    0000017d: 	movabsq	$-0x3333333333333333, %rdx
    00000187: 	movq	%r12, %rax
    0000018a: 	mulq	%rdx
    0000018d: 	shrq	$0x3, %rdx
.Ltmp3875:
    00000191: 	movq	%rbp, %rsi
    00000194: 	xorl	%ecx, %ecx
    00000196: 	xorl	%edi, %edi
    00000198: 	cmpq	$0x0, %r12
    0000019c: 	jbe	.Ltmp3863 # Offset: 412
    0000019e: 	nop # Size: 2
.Ltmp3866:
    000001a0: 	xorl	%eax, %eax
    000001a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3865:
    000001a8: 	addq	$0x1, %rax
    000001ac: 	addq	$0x4, %rsi
    000001b0: 	addq	$0x1, %rcx
    000001b4: 	movl	%edi, -0x4(%rsi)
    000001b7: 	cmpq	%rdx, %rax
    000001ba: 	jae	.Ltmp3864 # Offset: 442
    000001bc: 	cmpq	%rcx, %r12
    000001bf: 	ja	.Ltmp3865 # Offset: 447
.Ltmp3864:
    000001c1: 	addl	$0x1, %edi
    000001c4: 	cmpq	%rcx, %r12
    000001c7: 	ja	.Ltmp3866 # Offset: 455
.Ltmp3863:
    000001c9: 	leaq	DATAat0x3416e(%rip), %rdx
    000001d0: 	movq	%r14, %rsi
    000001d3: 	movq	%r15, %rdi
    000001d6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 470
    000001db: 	movq	0x10(%rsp), %rcx
    000001e0: 	movl	%ebx, %r9d
    000001e3: 	movq	%r15, %r8
    000001e6: 	movq	%r12, %rdx
    000001e9: 	movq	%r13, %rsi
    000001ec: 	movq	%rbp, %rdi
    000001ef: 	callq	_Z15TestSearchArrayIPiPFS0_S0_S0_iEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 495
    000001f4: 	movq	0x30(%rsp), %rdi
    000001f9: 	cmpq	0x8(%rsp), %rdi
    000001fe: 	je	.Ltmp3867 # Offset: 510
    00000200: 	movq	0x40(%rsp), %rax
    00000205: 	leaq	0x1(%rax), %rsi
    00000209: 	callq	_ZdlPvm@PLT # Offset: 521
.Ltmp3867:
    0000020e: 	cmpq	%r13, %rbp
    00000211: 	je	.Ltmp3868 # Offset: 529
    00000217: 	leaq	-0x4(%r13), %rdx
    0000021b: 	movq	%rbp, %rax
    0000021e: 	subq	%rbp, %rdx
    00000221: 	movq	%rdx, %rcx
    00000224: 	shrq	$0x2, %rcx
    00000228: 	addq	$0x1, %rcx
    0000022c: 	cmpq	$0x8, %rdx
    00000230: 	jbe	.Ltmp3869 # Offset: 560
    00000236: 	movq	%rcx, %rdx
    00000239: 	movdqa	DATAat0x34430(%rip), %xmm1
    00000241: 	movdqa	DATAat0x34460(%rip), %xmm4
    00000249: 	shrq	$0x2, %rdx
    0000024d: 	movdqa	DATAat0x34450(%rip), %xmm3
    00000255: 	shlq	$0x4, %rdx
    00000259: 	addq	%rbp, %rdx
    0000025c: 	nopl	(%rax) # Size: 4
.Ltmp3870:
    00000260: 	movdqa	%xmm1, %xmm0
    00000264: 	addq	$0x10, %rax
    00000268: 	paddq	%xmm4, %xmm1
    0000026c: 	movdqa	%xmm0, %xmm2
    00000270: 	paddq	%xmm3, %xmm2
    00000274: 	shufps	$0x88, %xmm2, %xmm0
    00000278: 	movups	%xmm0, -0x10(%rax)
    0000027c: 	cmpq	%rax, %rdx
    0000027f: 	jne	.Ltmp3870 # Offset: 639
    00000281: 	movq	%rcx, %rax
    00000284: 	andq	$-0x4, %rax
    00000288: 	leaq	(%rbp,%rax,4), %rdx
    0000028d: 	cmpq	%rcx, %rax
    00000290: 	je	.Ltmp3868 # Offset: 656
.Ltmp3876:
    00000292: 	leaq	0x4(%rdx), %rcx
    00000296: 	movl	%eax, (%rdx)
    00000298: 	leaq	0x1(%rax), %rsi
    0000029c: 	cmpq	%rcx, %r13
    0000029f: 	je	.Ltmp3868 # Offset: 671
    000002a1: 	leaq	0x8(%rdx), %rcx
    000002a5: 	movl	%esi, 0x4(%rdx)
    000002a8: 	addq	$0x2, %rax
    000002ac: 	cmpq	%rcx, %r13
    000002af: 	je	.Ltmp3868 # Offset: 687
    000002b1: 	movl	%eax, 0x8(%rdx)
.Ltmp3868:
    000002b4: 	movq	%r13, %rsi
    000002b7: 	movq	%rbp, %rdi
    000002ba: 	callq	_Z18quicksort2_forwardIPiEvT_S1_ # Offset: 698
    000002bf: 	leaq	DATAat0x34184(%rip), %rdx
    000002c6: 	movq	%r14, %rsi
    000002c9: 	movq	%r15, %rdi
    000002cc: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 716
    000002d1: 	movq	0x10(%rsp), %rcx
    000002d6: 	movl	%ebx, %r9d
    000002d9: 	movq	%r15, %r8
    000002dc: 	movq	%r12, %rdx
    000002df: 	movq	%r13, %rsi
    000002e2: 	movq	%rbp, %rdi
    000002e5: 	callq	_Z15TestSearchArrayIPiPFS0_S0_S0_iEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 741
    000002ea: 	movq	0x30(%rsp), %rdi
    000002ef: 	cmpq	0x8(%rsp), %rdi
    000002f4: 	je	.Ltmp3871 # Offset: 756
    000002f6: 	movq	0x40(%rsp), %rax
    000002fb: 	leaq	0x1(%rax), %rsi
    000002ff: 	callq	_ZdlPvm@PLT # Offset: 767
.Ltmp3871:
    00000304: 	movq	0x58(%rsp), %rax
    00000309: 	subq	%fs:0x28, %rax
    00000312: 	jne	.Ltmp3872 # Offset: 786
    00000318: 	addq	$0x68, %rsp
    0000031c: 	popq	%rbx
    0000031d: 	popq	%rbp
    0000031e: 	popq	%r12
    00000320: 	popq	%r13
    00000322: 	popq	%r14
    00000324: 	popq	%r15
    00000326: 	retq # Offset: 806
.Ltmp3859:
    00000327: 	testq	%r15, %r15
    0000032a: 	jne	.Ltmp3873 # Offset: 810
    0000032c: 	movq	0x8(%rsp), %rax
    00000331: 	jmp	.Ltmp3874 # Offset: 817
.Ltmp3862:
    00000336: 	testq	%r12, %r12
    00000339: 	je	.Ltmp3863 # Offset: 825
    0000033f: 	movl	$0x1, %edx
    00000344: 	jmp	.Ltmp3875 # Offset: 836
.Ltmp3858:
    00000349: 	leaq	0x30(%rsp), %rdi
    0000034e: 	leaq	0x28(%rsp), %rsi
    00000353: 	xorl	%edx, %edx
    00000355: 	movq	%r8, 0x18(%rsp)
    0000035a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 858
    0000035f: 	movq	0x18(%rsp), %r8
    00000364: 	movq	%rax, 0x30(%rsp)
    00000369: 	movq	%rax, %rdi
    0000036c: 	movq	0x28(%rsp), %rax
    00000371: 	movq	%rax, 0x40(%rsp)
.Ltmp3877:
    00000376: 	movq	%r15, %rdx
    00000379: 	movq	%r8, %rsi
    0000037c: 	callq	memcpy@PLT # Offset: 892
    00000381: 	movq	0x28(%rsp), %r15
    00000386: 	movq	0x30(%rsp), %rax
    0000038b: 	jmp	.Ltmp3874 # Offset: 907
.Ltmp3869:
    00000390: 	movq	%rbp, %rdx
    00000393: 	xorl	%eax, %eax
    00000395: 	jmp	.Ltmp3876 # Offset: 917
.Ltmp3873:
    0000039a: 	movq	0x8(%rsp), %rdi
    0000039f: 	jmp	.Ltmp3877 # Offset: 927
.Ltmp3872:
    000003a1: 	callq	__stack_chk_fail@PLT # Offset: 929
.Ltmp3857:
    000003a6: 	leaq	DATAat0x34008(%rip), %rdi
    000003ad: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 941
.Ltmp3860:
    000003b2: 	leaq	DATAat0x3414b(%rip), %rdi
    000003b9: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 953
    000003be: 	endbr64
.Ltmp3879:
    000003c2: 	movq	%rax, %rbp
    000003c5: 	jmp	.Ltmp3878 # Offset: 965
    000003c7: 	endbr64
    000003cb: 	jmp	.Ltmp3879 # Offset: 971
    000003cd: 	endbr64
    000003d1: 	jmp	.Ltmp3879 # Offset: 977
    000003d3: 	endbr64
    000003d7: 	jmp	.Ltmp3879 # Offset: 983
.Ltmp3878:
    000003d9: 	movq	0x30(%rsp), %rdi
    000003de: 	cmpq	0x8(%rsp), %rdi
    000003e3: 	je	.Ltmp3880 # Offset: 995
    000003e5: 	movq	0x40(%rsp), %rax
    000003ea: 	leaq	0x1(%rax), %rsi
    000003ee: 	callq	_ZdlPvm@PLT # Offset: 1006
.Ltmp3880:
    000003f3: 	movq	%rbp, %rdi
    000003f6: 	callq	_Unwind_Resume@PLT # Offset: 1014
DWARF CFI Instructions:
    <empty>
End of Function "_Z13TestOneSearchIPiPFS0_S0_S0_iEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z15TestSearchArrayIPiPFbS0_S0_iEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 403
  State       : disassembled
  Address     : 0x20d30
  Size        : 0x1d6
  MaxSize     : 0x1e0
  Offset      : 0x20d30
  Section     : .text
  Orc Section : .local.text._Z15TestSearchArrayIPiPFbS0_S0_iEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0402:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rcx, %r15
    00000009: 	pushq	%r14
    0000000b: 	movq	%rsi, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %r12
    00000015: 	movl	$0x1000, %edi
    0000001a: 	pushq	%rbp
    0000001b: 	pushq	%rbx
    0000001c: 	subq	$0x28, %rsp
    00000020: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000027: 	movq	%rdx, 0x10(%rsp)
    0000002c: 	movq	%r8, 0x18(%rsp)
    00000031: 	movb	%r9b, 0xf(%rsp)
    00000036: 	callq	_Znwm@PLT # Offset: 54
    0000003b: 	movq	%rax, %r13
    0000003e: 	movl	$0x0, (%rax)
    00000044: 	addq	$0x4, %rax
    00000048: 	leaq	0x1000(%r13), %rsi
    0000004f: 	cmpq	%rsi, %rax
    00000052: 	je	.Ltmp3881 # Offset: 82
    00000054: 	leaq	0xc(%r13), %rdi
    00000058: 	movq	$0x0, 0x4(%r13)
    00000060: 	movq	$0x0, 0xff8(%r13)
    0000006b: 	andq	$-0x8, %rdi
    0000006f: 	subq	%rdi, %rax
    00000072: 	movq	%rax, %rcx
    00000075: 	xorl	%eax, %eax
    00000077: 	addl	$0xffc, %ecx
    0000007d: 	shrl	$0x3, %ecx
    00000080: 	rep		stosq	%rax, %es:(%rdi)
.Ltmp3881:
    00000083: 	movabsq	$0x5851f42d4c957f2d, %r8
    0000008d: 	movq	%r13, %rcx
    00000090: 	movabsq	$0x14057b7ef767814f, %rdi
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3882:
    000000a0: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000000a7: 	addq	$0x4, %rcx
    000000ab: 	imulq	%r8, %rax
    000000af: 	addq	%rdi, %rax
    000000b2: 	movq	%rax, %rdx
    000000b5: 	movq	%rax, %r9
    000000b8: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000000bf: 	shrq	$0x14, %rdx
    000000c3: 	shlq	$0x17, %r9
    000000c7: 	xorq	%r9, %rdx
    000000ca: 	xorq	%rdx, %rax
    000000cd: 	xorl	%edx, %edx
    000000cf: 	divq	0x10(%rsp)
    000000d4: 	movl	(%r12,%rdx,4), %eax
    000000d8: 	movl	%eax, -0x4(%rcx)
    000000db: 	cmpq	%rcx, %rsi
    000000de: 	jne	.Ltmp3882 # Offset: 222
    000000e0: 	callq	clock@PLT # Offset: 224
    000000e5: 	xorl	%ebx, %ebx
    000000e7: 	xorl	%ebp, %ebp
    000000e9: 	movq	%rax, start_time(%rip)
.Ltmp3886:
    000000f0: 	leaq	0xc8(%rbp), %rax
    000000f7: 	movq	%rax, (%rsp)
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3884:
    00000100: 	movq	%rbp, %rax
    00000103: 	movq	%r14, %rsi
    00000106: 	addq	$0x1, %rbp
    0000010a: 	movq	%r12, %rdi
    0000010d: 	andl	$0x3ff, %eax
    00000112: 	movl	(%r13,%rax,4), %edx
    00000117: 	callq	*%r15 # Offset: 279
    0000011a: 	testb	%al, %al
    0000011c: 	jne	.Ltmp3883 # Offset: 284
    0000011e: 	cmpb	$0x0, 0xf(%rsp)
    00000123: 	movl	$0x1, %eax
    00000128: 	cmovel	%eax, %ebx
.Ltmp3883:
    0000012b: 	cmpq	(%rsp), %rbp
    0000012f: 	jne	.Ltmp3884 # Offset: 303
    00000131: 	callq	clock@PLT # Offset: 305
    00000136: 	movsd	gMinimumTimeTarget(%rip), %xmm1
    0000013e: 	pxor	%xmm0, %xmm0
    00000142: 	movq	%rax, end_time(%rip)
    00000149: 	subq	start_time(%rip), %rax
    00000150: 	cvtsi2sd	%rax, %xmm0
    00000155: 	divsd	DATAat0x34410(%rip), %xmm0
    0000015d: 	comisd	%xmm0, %xmm1
    00000161: 	jbe	.Ltmp3885 # Offset: 353
    00000163: 	cmpq	$0x5f5e0ff, %rbp
    0000016a: 	jbe	.Ltmp3886 # Offset: 362
.Ltmp3885:
    0000016c: 	movq	0x18(%rsp), %rdx
    00000171: 	movq	0x10(%rsp), %rdi
    00000176: 	movq	%rbp, %rsi
    00000179: 	callq	_Z13record_resultdmmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 377
    0000017e: 	testb	%bl, %bl
    00000180: 	jne	.Ltmp3887 # Offset: 384
.Ltmp3888:
    00000182: 	addq	$0x28, %rsp
    00000186: 	movq	%r13, %rdi
    00000189: 	movl	$0x1000, %esi
    0000018e: 	popq	%rbx
    0000018f: 	popq	%rbp
    00000190: 	popq	%r12
    00000192: 	popq	%r13
    00000194: 	popq	%r14
    00000196: 	popq	%r15
    00000198: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 408
.Ltmp3887:
    0000019d: 	movq	0x18(%rsp), %rax
    000001a2: 	leaq	DATAat0x34137(%rip), %rsi
    000001a9: 	movl	$0x1, %edi
    000001ae: 	movq	(%rax), %rdx
    000001b1: 	xorl	%eax, %eax
    000001b3: 	callq	__printf_chk@PLT # Offset: 435
    000001b8: 	jmp	.Ltmp3888 # Offset: 440
    000001ba: 	endbr64
    000001be: 	movq	%rax, %rbp
    000001c1: 	movq	%r13, %rdi
    000001c4: 	movl	$0x1000, %esi
    000001c9: 	callq	_ZdlPvm@PLT # Offset: 457
    000001ce: 	movq	%rbp, %rdi
    000001d1: 	callq	_Unwind_Resume@PLT # Offset: 465
DWARF CFI Instructions:
    <empty>
End of Function "_Z15TestSearchArrayIPiPFbS0_S0_iEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z13TestOneSearchIPiPFbS0_S0_iEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 404
  State       : disassembled
  Address     : 0x20f10
  Size        : 0x412
  MaxSize     : 0x420
  Offset      : 0x20f10
  Section     : .text
  Orc Section : .local.text._Z13TestOneSearchIPiPFbS0_S0_iEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0403:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%r8, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rsi, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdx, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rdi, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	subq	$0x68, %rsp
    0000001e: 	movq	%rcx, 0x10(%rsp)
    00000023: 	movq	%fs:0x28, %rax
    0000002c: 	movq	%rax, 0x58(%rsp)
    00000031: 	xorl	%eax, %eax
    00000033: 	cmpq	%rsi, %rdi
    00000036: 	je	.Ltmp3889 # Offset: 54
    00000038: 	leaq	-0x4(%rsi), %rdx
    0000003c: 	movq	%rdi, %rax
    0000003f: 	subq	%rdi, %rdx
    00000042: 	movq	%rdx, %rcx
    00000045: 	shrq	$0x2, %rcx
    00000049: 	addq	$0x1, %rcx
    0000004d: 	cmpq	$0x8, %rdx
    00000051: 	jbe	.Ltmp3890 # Offset: 81
    00000053: 	movq	%rcx, %rdx
    00000056: 	movdqa	DATAat0x34550(%rip), %xmm0
    0000005e: 	shrq	$0x2, %rdx
    00000062: 	shlq	$0x4, %rdx
    00000066: 	addq	%rdi, %rdx
    00000069: 	nopl	(%rax) # Size: 7
.Ltmp3891:
    00000070: 	movups	%xmm0, (%rax)
    00000073: 	addq	$0x10, %rax
    00000077: 	cmpq	%rax, %rdx
    0000007a: 	jne	.Ltmp3891 # Offset: 122
    0000007c: 	movq	%rcx, %rdx
    0000007f: 	andq	$-0x4, %rdx
    00000083: 	leaq	(%rbp,%rdx,4), %rax
    00000088: 	cmpq	%rdx, %rcx
    0000008b: 	je	.Ltmp3889 # Offset: 139
.Ltmp3890:
    0000008d: 	leaq	0x4(%rax), %rdx
    00000091: 	movl	$0x5, (%rax)
    00000097: 	cmpq	%rdx, %r13
    0000009a: 	je	.Ltmp3889 # Offset: 154
    0000009c: 	leaq	0x8(%rax), %rdx
    000000a0: 	movl	$0x5, 0x4(%rax)
    000000a7: 	cmpq	%rdx, %r13
    000000aa: 	je	.Ltmp3889 # Offset: 170
    000000ac: 	movl	$0x5, 0x8(%rax)
.Ltmp3889:
    000000b3: 	leaq	0x30(%rsp), %r14
    000000b8: 	leaq	DATAat0x34160(%rip), %rdx
    000000bf: 	movq	%r15, %rsi
    000000c2: 	movzbl	%r9b, %ebx
    000000c6: 	movq	%r14, %rdi
    000000c9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 201
    000000ce: 	movq	0x10(%rsp), %rcx
    000000d3: 	movl	%ebx, %r9d
    000000d6: 	movq	%r14, %r8
    000000d9: 	movq	%r12, %rdx
    000000dc: 	movq	%r13, %rsi
    000000df: 	movq	%rbp, %rdi
    000000e2: 	callq	_Z15TestSearchArrayIPiPFbS0_S0_iEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 226
    000000e7: 	movq	0x30(%rsp), %rdi
    000000ec: 	leaq	0x40(%rsp), %rax
    000000f1: 	movq	%rax, 0x8(%rsp)
    000000f6: 	cmpq	%rax, %rdi
    000000f9: 	je	.Ltmp3892 # Offset: 249
    000000fb: 	movq	0x40(%rsp), %rax
    00000100: 	leaq	0x1(%rax), %rsi
    00000104: 	callq	_ZdlPvm@PLT # Offset: 260
.Ltmp3892:
    00000109: 	cmpq	$0x9, %r12
    0000010d: 	jbe	.Ltmp3893 # Offset: 269
    00000113: 	movabsq	$-0x3333333333333333, %rdx
    0000011d: 	movq	%r12, %rax
    00000120: 	mulq	%rdx
    00000123: 	shrq	$0x3, %rdx
.Ltmp3911:
    00000127: 	movq	%rbp, %rsi
    0000012a: 	xorl	%ecx, %ecx
    0000012c: 	xorl	%edi, %edi
    0000012e: 	cmpq	$0x0, %r12
    00000132: 	jbe	.Ltmp3894 # Offset: 306
    00000134: 	nopl	(%rax) # Size: 4
.Ltmp3897:
    00000138: 	xorl	%eax, %eax
    0000013a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3896:
    00000140: 	addq	$0x1, %rax
    00000144: 	addq	$0x4, %rsi
    00000148: 	addq	$0x1, %rcx
    0000014c: 	movl	%edi, -0x4(%rsi)
    0000014f: 	cmpq	%rdx, %rax
    00000152: 	jae	.Ltmp3895 # Offset: 338
    00000154: 	cmpq	%rcx, %r12
    00000157: 	ja	.Ltmp3896 # Offset: 343
.Ltmp3895:
    00000159: 	addl	$0x1, %edi
    0000015c: 	cmpq	%rcx, %r12
    0000015f: 	ja	.Ltmp3897 # Offset: 351
.Ltmp3894:
    00000161: 	leaq	DATAat0x3416e(%rip), %rdx
    00000168: 	movq	%r15, %rsi
    0000016b: 	movq	%r14, %rdi
    0000016e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 366
    00000173: 	movq	0x10(%rsp), %rcx
    00000178: 	movl	%ebx, %r9d
    0000017b: 	movq	%r14, %r8
    0000017e: 	movq	%r12, %rdx
    00000181: 	movq	%r13, %rsi
    00000184: 	movq	%rbp, %rdi
    00000187: 	callq	_Z15TestSearchArrayIPiPFbS0_S0_iEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 391
    0000018c: 	movq	0x30(%rsp), %rdi
    00000191: 	cmpq	0x8(%rsp), %rdi
    00000196: 	je	.Ltmp3898 # Offset: 406
    00000198: 	movq	0x40(%rsp), %rax
    0000019d: 	leaq	0x1(%rax), %rsi
    000001a1: 	callq	_ZdlPvm@PLT # Offset: 417
.Ltmp3898:
    000001a6: 	cmpq	%r13, %rbp
    000001a9: 	je	.Ltmp3899 # Offset: 425
    000001af: 	leaq	-0x4(%r13), %rdx
    000001b3: 	movq	%rbp, %rax
    000001b6: 	subq	%rbp, %rdx
    000001b9: 	movq	%rdx, %rcx
    000001bc: 	shrq	$0x2, %rcx
    000001c0: 	addq	$0x1, %rcx
    000001c4: 	cmpq	$0x8, %rdx
    000001c8: 	jbe	.Ltmp3900 # Offset: 456
    000001ce: 	movq	%rcx, %rdx
    000001d1: 	movdqa	DATAat0x34430(%rip), %xmm1
    000001d9: 	movdqa	DATAat0x34460(%rip), %xmm4
    000001e1: 	shrq	$0x2, %rdx
    000001e5: 	movdqa	DATAat0x34450(%rip), %xmm3
    000001ed: 	shlq	$0x4, %rdx
    000001f1: 	addq	%rbp, %rdx
    000001f4: 	nopl	(%rax) # Size: 4
.Ltmp3901:
    000001f8: 	movdqa	%xmm1, %xmm0
    000001fc: 	addq	$0x10, %rax
    00000200: 	paddq	%xmm4, %xmm1
    00000204: 	movdqa	%xmm0, %xmm2
    00000208: 	paddq	%xmm3, %xmm2
    0000020c: 	shufps	$0x88, %xmm2, %xmm0
    00000210: 	movups	%xmm0, -0x10(%rax)
    00000214: 	cmpq	%rax, %rdx
    00000217: 	jne	.Ltmp3901 # Offset: 535
    00000219: 	movq	%rcx, %rax
    0000021c: 	andq	$-0x4, %rax
    00000220: 	leaq	(%rbp,%rax,4), %rdx
    00000225: 	cmpq	%rcx, %rax
    00000228: 	je	.Ltmp3899 # Offset: 552
.Ltmp3912:
    0000022a: 	leaq	0x4(%rdx), %rcx
    0000022e: 	movl	%eax, (%rdx)
    00000230: 	leaq	0x1(%rax), %rsi
    00000234: 	cmpq	%rcx, %r13
    00000237: 	je	.Ltmp3899 # Offset: 567
    00000239: 	leaq	0x8(%rdx), %rcx
    0000023d: 	movl	%esi, 0x4(%rdx)
    00000240: 	addq	$0x2, %rax
    00000244: 	cmpq	%rcx, %r13
    00000247: 	je	.Ltmp3899 # Offset: 583
    00000249: 	movl	%eax, 0x8(%rdx)
.Ltmp3899:
    0000024c: 	movq	%r13, %rsi
    0000024f: 	movq	%rbp, %rdi
    00000252: 	callq	_Z18quicksort2_forwardIPiEvT_S1_ # Offset: 594
    00000257: 	movq	0x8(%rsp), %rax
    0000025c: 	movq	(%r15), %r8
    0000025f: 	movq	0x8(%r15), %r15
    00000263: 	movq	%rax, 0x30(%rsp)
    00000268: 	movq	%r8, %rax
    0000026b: 	addq	%r15, %rax
    0000026e: 	je	.Ltmp3902 # Offset: 622
    00000270: 	testq	%r8, %r8
    00000273: 	je	.Ltmp3903 # Offset: 627
.Ltmp3902:
    00000279: 	movq	%r15, 0x28(%rsp)
    0000027e: 	cmpq	$0xf, %r15
    00000282: 	ja	.Ltmp3904 # Offset: 642
    00000288: 	cmpq	$0x1, %r15
    0000028c: 	jne	.Ltmp3905 # Offset: 652
    00000292: 	movzbl	(%r8), %eax
    00000296: 	movb	%al, 0x40(%rsp)
    0000029a: 	movq	0x8(%rsp), %rax
.Ltmp3910:
    0000029f: 	movq	%r15, 0x38(%rsp)
    000002a4: 	movb	$0x0, (%rax,%r15)
    000002a9: 	movabsq	$0x3fffffffffffffff, %rax
    000002b3: 	subq	0x38(%rsp), %rax
    000002b8: 	cmpq	$0x9, %rax
    000002bc: 	jbe	.Ltmp3906 # Offset: 700
    000002c2: 	movl	$0xa, %edx
    000002c7: 	leaq	DATAat0x34184(%rip), %rsi
    000002ce: 	movq	%r14, %rdi
    000002d1: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 721
    000002d6: 	movq	0x10(%rsp), %rcx
    000002db: 	movl	%ebx, %r9d
    000002de: 	movq	%r14, %r8
    000002e1: 	movq	%r12, %rdx
    000002e4: 	movq	%r13, %rsi
    000002e7: 	movq	%rbp, %rdi
    000002ea: 	callq	_Z15TestSearchArrayIPiPFbS0_S0_iEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 746
    000002ef: 	movq	0x30(%rsp), %rdi
    000002f4: 	cmpq	0x8(%rsp), %rdi
    000002f9: 	je	.Ltmp3907 # Offset: 761
    000002fb: 	movq	0x40(%rsp), %rax
    00000300: 	leaq	0x1(%rax), %rsi
    00000304: 	callq	_ZdlPvm@PLT # Offset: 772
.Ltmp3907:
    00000309: 	movq	0x58(%rsp), %rax
    0000030e: 	subq	%fs:0x28, %rax
    00000317: 	jne	.Ltmp3908 # Offset: 791
    0000031d: 	addq	$0x68, %rsp
    00000321: 	popq	%rbx
    00000322: 	popq	%rbp
    00000323: 	popq	%r12
    00000325: 	popq	%r13
    00000327: 	popq	%r14
    00000329: 	popq	%r15
    0000032b: 	retq # Offset: 811
.Ltmp3905:
    0000032c: 	testq	%r15, %r15
    0000032f: 	jne	.Ltmp3909 # Offset: 815
    00000331: 	movq	0x8(%rsp), %rax
    00000336: 	jmp	.Ltmp3910 # Offset: 822
.Ltmp3893:
    0000033b: 	testq	%r12, %r12
    0000033e: 	je	.Ltmp3894 # Offset: 830
    00000344: 	movl	$0x1, %edx
    00000349: 	jmp	.Ltmp3911 # Offset: 841
.Ltmp3904:
    0000034e: 	movq	%r14, %rdi
    00000351: 	leaq	0x28(%rsp), %rsi
    00000356: 	xorl	%edx, %edx
    00000358: 	movq	%r8, 0x18(%rsp)
    0000035d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 861
    00000362: 	movq	0x18(%rsp), %r8
    00000367: 	movq	%rax, 0x30(%rsp)
    0000036c: 	movq	%rax, %rdi
    0000036f: 	movq	0x28(%rsp), %rax
    00000374: 	movq	%rax, 0x40(%rsp)
.Ltmp3913:
    00000379: 	movq	%r15, %rdx
    0000037c: 	movq	%r8, %rsi
    0000037f: 	callq	memcpy@PLT # Offset: 895
    00000384: 	movq	0x28(%rsp), %r15
    00000389: 	movq	0x30(%rsp), %rax
    0000038e: 	jmp	.Ltmp3910 # Offset: 910
.Ltmp3900:
    00000393: 	movq	%rbp, %rdx
    00000396: 	xorl	%eax, %eax
    00000398: 	jmp	.Ltmp3912 # Offset: 920
.Ltmp3909:
    0000039d: 	movq	0x8(%rsp), %rdi
    000003a2: 	jmp	.Ltmp3913 # Offset: 930
.Ltmp3903:
    000003a4: 	leaq	DATAat0x34008(%rip), %rdi
    000003ab: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 939
.Ltmp3906:
    000003b0: 	leaq	DATAat0x3414b(%rip), %rdi
    000003b7: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 951
.Ltmp3908:
    000003bc: 	callq	__stack_chk_fail@PLT # Offset: 956
    000003c1: 	endbr64
.Ltmp3915:
    000003c5: 	movq	%rax, %rbp
    000003c8: 	jmp	.Ltmp3914 # Offset: 968
    000003ca: 	endbr64
    000003ce: 	jmp	.Ltmp3915 # Offset: 974
    000003d0: 	endbr64
    000003d4: 	jmp	.Ltmp3915 # Offset: 980
    000003d6: 	endbr64
    000003da: 	movq	%rax, %rbp
    000003dd: 	jmp	.Ltmp3916 # Offset: 989
.Ltmp3914:
    000003df: 	movq	0x30(%rsp), %rdi
    000003e4: 	cmpq	0x8(%rsp), %rdi
    000003e9: 	je	.Ltmp3917 # Offset: 1001
.Ltmp3918:
    000003eb: 	movq	0x40(%rsp), %rax
    000003f0: 	leaq	0x1(%rax), %rsi
    000003f4: 	callq	_ZdlPvm@PLT # Offset: 1012
.Ltmp3917:
    000003f9: 	movq	%rbp, %rdi
    000003fc: 	callq	_Unwind_Resume@PLT # Offset: 1020
.Ltmp3916:
    00000401: 	movq	0x30(%rsp), %rdi
    00000406: 	leaq	0x40(%rsp), %rax
    0000040b: 	cmpq	%rax, %rdi
    0000040e: 	jne	.Ltmp3918 # Offset: 1038
    00000410: 	jmp	.Ltmp3917 # Offset: 1040
DWARF CFI Instructions:
    <empty>
End of Function "_Z13TestOneSearchIPiPFbS0_S0_iEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z16TestOneContainerIPiEvT_S1_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 405
  State       : disassembled
  Address     : 0x21330
  Size        : 0x4de
  MaxSize     : 0x4e0
  Offset      : 0x21330
  Section     : .text
  Orc Section : .local.text._Z16TestOneContainerIPiEvT_S1_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0404:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdx, %r15
    00000009: 	leaq	DATAat0x3418f(%rip), %rdx
    00000010: 	pushq	%r14
    00000012: 	movq	%rsi, %r14
    00000015: 	movq	%rcx, %rsi
    00000018: 	pushq	%r13
    0000001a: 	movq	%rdi, %r13
    0000001d: 	pushq	%r12
    0000001f: 	movq	%rcx, %r12
    00000022: 	pushq	%rbp
    00000023: 	pushq	%rbx
    00000024: 	subq	$0x38, %rsp
    00000028: 	movq	%fs:0x28, %rax
    00000031: 	movq	%rax, 0x28(%rsp)
    00000036: 	xorl	%eax, %eax
    00000038: 	movq	%rsp, %rbp
    0000003b: 	movq	%rbp, %rdi
    0000003e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 62
    00000043: 	xorl	%r9d, %r9d
    00000046: 	movq	%rbp, %r8
    00000049: 	movq	%r15, %rdx
    0000004c: 	leaq	_Z14std_lowerboundIPiiET_S1_S1_T0_(%rip), %rcx
    00000053: 	movq	%r14, %rsi
    00000056: 	movq	%r13, %rdi
    00000059: 	callq	_Z13TestOneSearchIPiPFS0_S0_S0_iEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 89
    0000005e: 	movq	(%rsp), %rdi
    00000062: 	leaq	0x10(%rsp), %rbx
    00000067: 	cmpq	%rbx, %rdi
    0000006a: 	je	.Ltmp3919 # Offset: 106
    0000006c: 	movq	0x10(%rsp), %rax
    00000071: 	leaq	0x1(%rax), %rsi
    00000075: 	callq	_ZdlPvm@PLT # Offset: 117
.Ltmp3919:
    0000007a: 	leaq	DATAat0x341a1(%rip), %rdx
    00000081: 	movq	%r12, %rsi
    00000084: 	movq	%rbp, %rdi
    00000087: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 135
    0000008c: 	xorl	%r9d, %r9d
    0000008f: 	movq	%rbp, %r8
    00000092: 	movq	%r15, %rdx
    00000095: 	leaq	_Z12lower_bound1IPiiET_S1_S1_T0_(%rip), %rcx
    0000009c: 	movq	%r14, %rsi
    0000009f: 	movq	%r13, %rdi
    000000a2: 	callq	_Z13TestOneSearchIPiPFS0_S0_S0_iEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 162
    000000a7: 	movq	(%rsp), %rdi
    000000ab: 	cmpq	%rbx, %rdi
    000000ae: 	je	.Ltmp3920 # Offset: 174
    000000b0: 	movq	0x10(%rsp), %rax
    000000b5: 	leaq	0x1(%rax), %rsi
    000000b9: 	callq	_ZdlPvm@PLT # Offset: 185
.Ltmp3920:
    000000be: 	leaq	DATAat0x341af(%rip), %rdx
    000000c5: 	movq	%r12, %rsi
    000000c8: 	movq	%rbp, %rdi
    000000cb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 203
    000000d0: 	xorl	%r9d, %r9d
    000000d3: 	movq	%rbp, %r8
    000000d6: 	movq	%r15, %rdx
    000000d9: 	leaq	_Z12lower_bound2IPiiET_S1_S1_T0_(%rip), %rcx
    000000e0: 	movq	%r14, %rsi
    000000e3: 	movq	%r13, %rdi
    000000e6: 	callq	_Z13TestOneSearchIPiPFS0_S0_S0_iEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 230
    000000eb: 	movq	(%rsp), %rdi
    000000ef: 	cmpq	%rbx, %rdi
    000000f2: 	je	.Ltmp3921 # Offset: 242
    000000f4: 	movq	0x10(%rsp), %rax
    000000f9: 	leaq	0x1(%rax), %rsi
    000000fd: 	callq	_ZdlPvm@PLT # Offset: 253
.Ltmp3921:
    00000102: 	leaq	DATAat0x341bd(%rip), %rdx
    00000109: 	movq	%r12, %rsi
    0000010c: 	movq	%rbp, %rdi
    0000010f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 271
    00000114: 	xorl	%r9d, %r9d
    00000117: 	movq	%rbp, %r8
    0000011a: 	movq	%r15, %rdx
    0000011d: 	leaq	_Z17lower_bound_recurIPiiET_S1_S1_T0_(%rip), %rcx
    00000124: 	movq	%r14, %rsi
    00000127: 	movq	%r13, %rdi
    0000012a: 	callq	_Z13TestOneSearchIPiPFS0_S0_S0_iEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 298
    0000012f: 	movq	(%rsp), %rdi
    00000133: 	cmpq	%rbx, %rdi
    00000136: 	je	.Ltmp3922 # Offset: 310
    00000138: 	movq	0x10(%rsp), %rax
    0000013d: 	leaq	0x1(%rax), %rsi
    00000141: 	callq	_ZdlPvm@PLT # Offset: 321
.Ltmp3922:
    00000146: 	leaq	DATAat0x341d4(%rip), %rdx
    0000014d: 	movq	%r12, %rsi
    00000150: 	movq	%rbp, %rdi
    00000153: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 339
    00000158: 	movq	%rbp, %r8
    0000015b: 	movq	%r15, %rdx
    0000015e: 	movq	%r14, %rsi
    00000161: 	movl	$0x1, %r9d
    00000167: 	leaq	_Z14std_upperboundIPiiET_S1_S1_T0_(%rip), %rcx
    0000016e: 	movq	%r13, %rdi
    00000171: 	callq	_Z13TestOneSearchIPiPFS0_S0_S0_iEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 369
    00000176: 	movq	(%rsp), %rdi
    0000017a: 	cmpq	%rbx, %rdi
    0000017d: 	je	.Ltmp3923 # Offset: 381
    0000017f: 	movq	0x10(%rsp), %rax
    00000184: 	leaq	0x1(%rax), %rsi
    00000188: 	callq	_ZdlPvm@PLT # Offset: 392
.Ltmp3923:
    0000018d: 	leaq	DATAat0x341e6(%rip), %rdx
    00000194: 	movq	%r12, %rsi
    00000197: 	movq	%rbp, %rdi
    0000019a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 410
    0000019f: 	movq	%rbp, %r8
    000001a2: 	movq	%r15, %rdx
    000001a5: 	movq	%r14, %rsi
    000001a8: 	movl	$0x1, %r9d
    000001ae: 	leaq	_Z12upper_bound1IPiiET_S1_S1_T0_(%rip), %rcx
    000001b5: 	movq	%r13, %rdi
    000001b8: 	callq	_Z13TestOneSearchIPiPFS0_S0_S0_iEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 440
    000001bd: 	movq	(%rsp), %rdi
    000001c1: 	cmpq	%rbx, %rdi
    000001c4: 	je	.Ltmp3924 # Offset: 452
    000001c6: 	movq	0x10(%rsp), %rax
    000001cb: 	leaq	0x1(%rax), %rsi
    000001cf: 	callq	_ZdlPvm@PLT # Offset: 463
.Ltmp3924:
    000001d4: 	leaq	DATAat0x341f4(%rip), %rdx
    000001db: 	movq	%r12, %rsi
    000001de: 	movq	%rbp, %rdi
    000001e1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 481
    000001e6: 	movq	%rbp, %r8
    000001e9: 	movq	%r15, %rdx
    000001ec: 	movq	%r14, %rsi
    000001ef: 	movl	$0x1, %r9d
    000001f5: 	leaq	_Z12upper_bound2IPiiET_S1_S1_T0_(%rip), %rcx
    000001fc: 	movq	%r13, %rdi
    000001ff: 	callq	_Z13TestOneSearchIPiPFS0_S0_S0_iEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 511
    00000204: 	movq	(%rsp), %rdi
    00000208: 	cmpq	%rbx, %rdi
    0000020b: 	je	.Ltmp3925 # Offset: 523
    0000020d: 	movq	0x10(%rsp), %rax
    00000212: 	leaq	0x1(%rax), %rsi
    00000216: 	callq	_ZdlPvm@PLT # Offset: 534
.Ltmp3925:
    0000021b: 	leaq	DATAat0x34202(%rip), %rdx
    00000222: 	movq	%r12, %rsi
    00000225: 	movq	%rbp, %rdi
    00000228: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 552
    0000022d: 	movq	%rbp, %r8
    00000230: 	movq	%r15, %rdx
    00000233: 	movq	%r14, %rsi
    00000236: 	movl	$0x1, %r9d
    0000023c: 	leaq	_Z17upper_bound_recurIPiiET_S1_S1_T0_(%rip), %rcx
    00000243: 	movq	%r13, %rdi
    00000246: 	callq	_Z13TestOneSearchIPiPFS0_S0_S0_iEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 582
    0000024b: 	movq	(%rsp), %rdi
    0000024f: 	cmpq	%rbx, %rdi
    00000252: 	je	.Ltmp3926 # Offset: 594
    00000254: 	movq	0x10(%rsp), %rax
    00000259: 	leaq	0x1(%rax), %rsi
    0000025d: 	callq	_ZdlPvm@PLT # Offset: 605
.Ltmp3926:
    00000262: 	leaq	DATAat0x34219(%rip), %rdx
    00000269: 	movq	%r12, %rsi
    0000026c: 	movq	%rbp, %rdi
    0000026f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 623
    00000274: 	xorl	%r9d, %r9d
    00000277: 	movq	%rbp, %r8
    0000027a: 	movq	%r15, %rdx
    0000027d: 	leaq	_Z16std_binarysearchIPiiEbT_S1_T0_(%rip), %rcx
    00000284: 	movq	%r14, %rsi
    00000287: 	movq	%r13, %rdi
    0000028a: 	callq	_Z13TestOneSearchIPiPFbS0_S0_iEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 650
    0000028f: 	movq	(%rsp), %rdi
    00000293: 	cmpq	%rbx, %rdi
    00000296: 	je	.Ltmp3927 # Offset: 662
    00000298: 	movq	0x10(%rsp), %rax
    0000029d: 	leaq	0x1(%rax), %rsi
    000002a1: 	callq	_ZdlPvm@PLT # Offset: 673
.Ltmp3927:
    000002a6: 	leaq	DATAat0x3422d(%rip), %rdx
    000002ad: 	movq	%r12, %rsi
    000002b0: 	movq	%rbp, %rdi
    000002b3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 691
    000002b8: 	xorl	%r9d, %r9d
    000002bb: 	movq	%rbp, %r8
    000002be: 	movq	%r15, %rdx
    000002c1: 	leaq	_Z13binarysearch1IPiiEbT_S1_T0_(%rip), %rcx
    000002c8: 	movq	%r14, %rsi
    000002cb: 	movq	%r13, %rdi
    000002ce: 	callq	_Z13TestOneSearchIPiPFbS0_S0_iEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 718
    000002d3: 	movq	(%rsp), %rdi
    000002d7: 	cmpq	%rbx, %rdi
    000002da: 	je	.Ltmp3928 # Offset: 730
    000002dc: 	movq	0x10(%rsp), %rax
    000002e1: 	leaq	0x1(%rax), %rsi
    000002e5: 	callq	_ZdlPvm@PLT # Offset: 741
.Ltmp3928:
    000002ea: 	leaq	DATAat0x3423d(%rip), %rdx
    000002f1: 	movq	%r12, %rsi
    000002f4: 	movq	%rbp, %rdi
    000002f7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 759
    000002fc: 	xorl	%r9d, %r9d
    000002ff: 	movq	%rbp, %r8
    00000302: 	movq	%r15, %rdx
    00000305: 	leaq	_Z13binarysearch2IPiiEbT_S1_T0_(%rip), %rcx
    0000030c: 	movq	%r14, %rsi
    0000030f: 	movq	%r13, %rdi
    00000312: 	callq	_Z13TestOneSearchIPiPFbS0_S0_iEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 786
    00000317: 	movq	(%rsp), %rdi
    0000031b: 	cmpq	%rbx, %rdi
    0000031e: 	je	.Ltmp3929 # Offset: 798
    00000320: 	movq	0x10(%rsp), %rax
    00000325: 	leaq	0x1(%rax), %rsi
    00000329: 	callq	_ZdlPvm@PLT # Offset: 809
.Ltmp3929:
    0000032e: 	leaq	DATAat0x3424d(%rip), %rdx
    00000335: 	movq	%r12, %rsi
    00000338: 	movq	%rbp, %rdi
    0000033b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 827
    00000340: 	xorl	%r9d, %r9d
    00000343: 	movq	%rbp, %r8
    00000346: 	movq	%r15, %rdx
    00000349: 	leaq	_Z13binarysearch3IPiiEbT_S1_T0_(%rip), %rcx
    00000350: 	movq	%r14, %rsi
    00000353: 	movq	%r13, %rdi
    00000356: 	callq	_Z13TestOneSearchIPiPFbS0_S0_iEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 854
    0000035b: 	movq	(%rsp), %rdi
    0000035f: 	cmpq	%rbx, %rdi
    00000362: 	je	.Ltmp3930 # Offset: 866
    00000364: 	movq	0x10(%rsp), %rax
    00000369: 	leaq	0x1(%rax), %rsi
    0000036d: 	callq	_ZdlPvm@PLT # Offset: 877
.Ltmp3930:
    00000372: 	leaq	DATAat0x3425d(%rip), %rdx
    00000379: 	movq	%r12, %rsi
    0000037c: 	movq	%rbp, %rdi
    0000037f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 895
    00000384: 	xorl	%r9d, %r9d
    00000387: 	movq	%rbp, %r8
    0000038a: 	movq	%r15, %rdx
    0000038d: 	leaq	_Z13binarysearch4IPiiEbT_S1_T0_(%rip), %rcx
    00000394: 	movq	%r14, %rsi
    00000397: 	movq	%r13, %rdi
    0000039a: 	callq	_Z13TestOneSearchIPiPFbS0_S0_iEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 922
    0000039f: 	movq	(%rsp), %rdi
    000003a3: 	cmpq	%rbx, %rdi
    000003a6: 	je	.Ltmp3931 # Offset: 934
    000003a8: 	movq	0x10(%rsp), %rax
    000003ad: 	leaq	0x1(%rax), %rsi
    000003b1: 	callq	_ZdlPvm@PLT # Offset: 945
.Ltmp3931:
    000003b6: 	leaq	DATAat0x3426d(%rip), %rdx
    000003bd: 	movq	%r12, %rsi
    000003c0: 	movq	%rbp, %rdi
    000003c3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 963
    000003c8: 	xorl	%r9d, %r9d
    000003cb: 	movq	%rbp, %r8
    000003ce: 	movq	%r15, %rdx
    000003d1: 	leaq	_Z18binarysearch_recurIPiiEbT_S1_T0_(%rip), %rcx
    000003d8: 	movq	%r14, %rsi
    000003db: 	movq	%r13, %rdi
    000003de: 	callq	_Z13TestOneSearchIPiPFbS0_S0_iEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 990
    000003e3: 	movq	(%rsp), %rdi
    000003e7: 	cmpq	%rbx, %rdi
    000003ea: 	je	.Ltmp3932 # Offset: 1002
    000003ec: 	movq	0x10(%rsp), %rax
    000003f1: 	leaq	0x1(%rax), %rsi
    000003f5: 	callq	_ZdlPvm@PLT # Offset: 1013
.Ltmp3932:
    000003fa: 	movq	%rbp, %rdi
    000003fd: 	leaq	DATAat0x34286(%rip), %rdx
    00000404: 	movq	%r12, %rsi
    00000407: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1031
    0000040c: 	movq	%rbp, %rdi
    0000040f: 	callq	_Z9summarizeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1039
    00000414: 	movq	(%rsp), %rdi
    00000418: 	cmpq	%rbx, %rdi
    0000041b: 	je	.Ltmp3933 # Offset: 1051
    0000041d: 	movq	0x10(%rsp), %rax
    00000422: 	leaq	0x1(%rax), %rsi
    00000426: 	callq	_ZdlPvm@PLT # Offset: 1062
.Ltmp3933:
    0000042b: 	movq	0x28(%rsp), %rax
    00000430: 	subq	%fs:0x28, %rax
    00000439: 	jne	.Ltmp3934 # Offset: 1081
    0000043b: 	addq	$0x38, %rsp
    0000043f: 	popq	%rbx
    00000440: 	popq	%rbp
    00000441: 	popq	%r12
    00000443: 	popq	%r13
    00000445: 	popq	%r14
    00000447: 	popq	%r15
    00000449: 	retq # Offset: 1097
.Ltmp3934:
    0000044a: 	callq	__stack_chk_fail@PLT # Offset: 1098
    0000044f: 	endbr64
.Ltmp3936:
    00000453: 	movq	%rax, %rbp
    00000456: 	jmp	.Ltmp3935 # Offset: 1110
    00000458: 	endbr64
    0000045c: 	jmp	.Ltmp3936 # Offset: 1116
    0000045e: 	endbr64
    00000462: 	jmp	.Ltmp3936 # Offset: 1122
    00000464: 	endbr64
    00000468: 	jmp	.Ltmp3936 # Offset: 1128
    0000046a: 	endbr64
    0000046e: 	jmp	.Ltmp3936 # Offset: 1134
    00000470: 	endbr64
    00000474: 	jmp	.Ltmp3936 # Offset: 1140
    00000476: 	endbr64
    0000047a: 	jmp	.Ltmp3936 # Offset: 1146
.Ltmp3935:
    0000047c: 	movq	(%rsp), %rdi
    00000480: 	cmpq	%rbx, %rdi
    00000483: 	je	.Ltmp3937 # Offset: 1155
.Ltmp3939:
    00000485: 	movq	0x10(%rsp), %rax
    0000048a: 	leaq	0x1(%rax), %rsi
    0000048e: 	callq	_ZdlPvm@PLT # Offset: 1166
.Ltmp3937:
    00000493: 	movq	%rbp, %rdi
    00000496: 	callq	_Unwind_Resume@PLT # Offset: 1174
    0000049b: 	endbr64
    0000049f: 	jmp	.Ltmp3936 # Offset: 1183
    000004a1: 	endbr64
    000004a5: 	jmp	.Ltmp3936 # Offset: 1189
    000004a7: 	endbr64
    000004ab: 	jmp	.Ltmp3936 # Offset: 1195
    000004ad: 	endbr64
    000004b1: 	jmp	.Ltmp3936 # Offset: 1201
    000004b3: 	endbr64
    000004b7: 	jmp	.Ltmp3936 # Offset: 1207
    000004b9: 	endbr64
    000004bd: 	movq	%rax, %rbp
    000004c0: 	jmp	.Ltmp3938 # Offset: 1216
    000004c2: 	endbr64
    000004c6: 	jmp	.Ltmp3936 # Offset: 1222
    000004c8: 	endbr64
    000004cc: 	jmp	.Ltmp3936 # Offset: 1228
.Ltmp3938:
    000004ce: 	movq	(%rsp), %rdi
    000004d2: 	leaq	0x10(%rsp), %rax
    000004d7: 	cmpq	%rax, %rdi
    000004da: 	jne	.Ltmp3939 # Offset: 1242
    000004dc: 	jmp	.Ltmp3937 # Offset: 1244
DWARF CFI Instructions:
    <empty>
End of Function "_Z16TestOneContainerIPiEvT_S1_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z15TestSearchArrayIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEPFS6_S6_S6_iEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 406
  State       : disassembled
  Address     : 0x21810
  Size        : 0x20e
  MaxSize     : 0x210
  Offset      : 0x21810
  Section     : .text
  Orc Section : .local.text._Z15TestSearchArrayIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEPFS6_S6_S6_iEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0405:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rcx, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	movl	$0x1000, %edi
    00000017: 	pushq	%rbp
    00000018: 	pushq	%rbx
    00000019: 	movq	%rsi, %rbx
    0000001c: 	subq	$0x28, %rsp
    00000020: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000027: 	movq	%rdx, 0x8(%rsp)
    0000002c: 	movq	%r8, 0x18(%rsp)
    00000031: 	movb	%r9b, 0x17(%rsp)
    00000036: 	callq	_Znwm@PLT # Offset: 54
    0000003b: 	movq	%rax, %r13
    0000003e: 	movl	$0x0, (%rax)
    00000044: 	addq	$0x4, %rax
    00000048: 	leaq	0x1000(%r13), %rsi
    0000004f: 	cmpq	%rsi, %rax
    00000052: 	je	.Ltmp3940 # Offset: 82
    00000054: 	leaq	0xc(%r13), %rdi
    00000058: 	movq	$0x0, 0x4(%r13)
    00000060: 	movq	$0x0, 0xff8(%r13)
    0000006b: 	andq	$-0x8, %rdi
    0000006f: 	subq	%rdi, %rax
    00000072: 	movq	%rax, %rcx
    00000075: 	xorl	%eax, %eax
    00000077: 	addl	$0xffc, %ecx
    0000007d: 	shrl	$0x3, %ecx
    00000080: 	rep		stosq	%rax, %es:(%rdi)
.Ltmp3940:
    00000083: 	movabsq	$0x5851f42d4c957f2d, %r8
    0000008d: 	movq	%r13, %rcx
    00000090: 	movabsq	$0x14057b7ef767814f, %rdi
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3941:
    000000a0: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000000a7: 	addq	$0x4, %rcx
    000000ab: 	imulq	%r8, %rax
    000000af: 	addq	%rdi, %rax
    000000b2: 	movq	%rax, %rdx
    000000b5: 	movq	%rax, %r9
    000000b8: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000000bf: 	shrq	$0x14, %rdx
    000000c3: 	shlq	$0x17, %r9
    000000c7: 	xorq	%r9, %rdx
    000000ca: 	xorq	%rdx, %rax
    000000cd: 	xorl	%edx, %edx
    000000cf: 	divq	0x8(%rsp)
    000000d4: 	movl	(%r12,%rdx,4), %eax
    000000d8: 	movl	%eax, -0x4(%rcx)
    000000db: 	cmpq	%rsi, %rcx
    000000de: 	jne	.Ltmp3941 # Offset: 222
    000000e0: 	callq	clock@PLT # Offset: 224
    000000e5: 	xorl	%r15d, %r15d
    000000e8: 	xorl	%ebp, %ebp
    000000ea: 	movq	%rax, start_time(%rip)
.Ltmp3945:
    000000f1: 	leaq	0xc8(%rbp), %rax
    000000f8: 	cmpb	$0x0, 0x17(%rsp)
    000000fd: 	movq	%rax, (%rsp)
    00000101: 	jne	.Ltmp3942 # Offset: 257
    00000107: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3943:
    00000110: 	movq	%rbp, %rax
    00000113: 	movq	%rbx, %rsi
    00000116: 	addq	$0x1, %rbp
    0000011a: 	movq	%r12, %rdi
    0000011d: 	andl	$0x3ff, %eax
    00000122: 	movl	(%r13,%rax,4), %edx
    00000127: 	callq	*%r14 # Offset: 295
    0000012a: 	cmpq	%rax, %rbx
    0000012d: 	movl	$0x1, %eax
    00000132: 	cmovel	%eax, %r15d
    00000136: 	cmpq	(%rsp), %rbp
    0000013a: 	jne	.Ltmp3943 # Offset: 314
.Ltmp3947:
    0000013c: 	callq	clock@PLT # Offset: 316
    00000141: 	movsd	gMinimumTimeTarget(%rip), %xmm1
    00000149: 	pxor	%xmm0, %xmm0
    0000014d: 	movq	%rax, end_time(%rip)
    00000154: 	subq	start_time(%rip), %rax
    0000015b: 	cvtsi2sd	%rax, %xmm0
    00000160: 	divsd	DATAat0x34410(%rip), %xmm0
    00000168: 	comisd	%xmm0, %xmm1
    0000016c: 	jbe	.Ltmp3944 # Offset: 364
    0000016e: 	cmpq	$0x5f5e0ff, %rbp
    00000175: 	jbe	.Ltmp3945 # Offset: 373
.Ltmp3944:
    0000017b: 	movq	0x18(%rsp), %rdx
    00000180: 	movq	0x8(%rsp), %rdi
    00000185: 	movq	%rbp, %rsi
    00000188: 	callq	_Z13record_resultdmmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 392
    0000018d: 	testb	%r15b, %r15b
    00000190: 	jne	.Ltmp3946 # Offset: 400
.Ltmp3948:
    00000192: 	addq	$0x28, %rsp
    00000196: 	movq	%r13, %rdi
    00000199: 	movl	$0x1000, %esi
    0000019e: 	popq	%rbx
    0000019f: 	popq	%rbp
    000001a0: 	popq	%r12
    000001a2: 	popq	%r13
    000001a4: 	popq	%r14
    000001a6: 	popq	%r15
    000001a8: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 424
    000001ad: 	nopl	(%rax) # Size: 3
.Ltmp3942:
    000001b0: 	movq	%rbp, %rax
    000001b3: 	movq	%rbx, %rsi
    000001b6: 	addq	$0x1, %rbp
    000001ba: 	movq	%r12, %rdi
    000001bd: 	andl	$0x3ff, %eax
    000001c2: 	movl	(%r13,%rax,4), %edx
    000001c7: 	callq	*%r14 # Offset: 455
    000001ca: 	cmpq	(%rsp), %rbp
    000001ce: 	jne	.Ltmp3942 # Offset: 462
    000001d0: 	jmp	.Ltmp3947 # Offset: 464
.Ltmp3946:
    000001d5: 	movq	0x18(%rsp), %rax
    000001da: 	leaq	DATAat0x34137(%rip), %rsi
    000001e1: 	movl	$0x1, %edi
    000001e6: 	movq	(%rax), %rdx
    000001e9: 	xorl	%eax, %eax
    000001eb: 	callq	__printf_chk@PLT # Offset: 491
    000001f0: 	jmp	.Ltmp3948 # Offset: 496
    000001f2: 	endbr64
    000001f6: 	movq	%rax, %rbp
    000001f9: 	movq	%r13, %rdi
    000001fc: 	movl	$0x1000, %esi
    00000201: 	callq	_ZdlPvm@PLT # Offset: 513
    00000206: 	movq	%rbp, %rdi
    00000209: 	callq	_Unwind_Resume@PLT # Offset: 521
DWARF CFI Instructions:
    <empty>
End of Function "_Z15TestSearchArrayIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEPFS6_S6_S6_iEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z18quicksort2_forwardIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEvT_S7_" after disassembly {
  Number      : 407
  State       : disassembled
  Address     : 0x21a20
  Size        : 0x13d
  MaxSize     : 0x140
  Offset      : 0x21a20
  Section     : .text
  Orc Section : .local.text._Z18quicksort2_forwardIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEvT_S7_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0406:
    00000000: 	endbr64
    00000004: 	cmpq	%rdi, %rsi
    00000007: 	je	.Ltmp3949 # Offset: 7
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rsi, %rbp
    00000016: 	pushq	%rbx
    00000017: 	leaq	0x4(%rdi), %rbx
    0000001b: 	cmpq	%rbx, %rsi
    0000001e: 	je	.Ltmp3950 # Offset: 30
.Ltmp3958:
    00000024: 	movq	(%r12), %xmm0
    0000002a: 	leaq	0x8(%r12), %rax
    0000002f: 	pshufd	$0xe1, %xmm0, %xmm1
    00000034: 	cmpq	%rax, %rbp
    00000037: 	je	.Ltmp3951 # Offset: 55
    0000003d: 	pshufd	$0xe5, %xmm0, %xmm2
    00000042: 	movd	%xmm0, %eax
    00000046: 	movd	%xmm2, %ecx
    0000004a: 	cmpl	%ecx, %eax
    0000004c: 	jle	.Ltmp3952 # Offset: 76
    0000004e: 	movq	%xmm1, (%r12)
    00000054: 	movd	%xmm0, %ecx
    00000058: 	movd	%xmm2, %eax
.Ltmp3952:
    0000005c: 	movl	0x8(%r12), %edx
    00000061: 	movd	%eax, %xmm3
    00000065: 	movd	%ecx, %xmm4
    00000069: 	movd	%edx, %xmm1
    0000006d: 	movd	%edx, %xmm0
    00000071: 	punpckldq	%xmm3, %xmm1
    00000075: 	punpckldq	%xmm4, %xmm0
    00000079: 	cmpl	%ecx, %edx
    0000007b: 	jge	.Ltmp3953 # Offset: 123
    0000007d: 	movq	%xmm0, 0x4(%r12)
    00000084: 	movl	%edx, %ecx
    00000086: 	cmpl	%eax, %edx
    00000088: 	jge	.Ltmp3953 # Offset: 136
    0000008a: 	movq	%xmm1, (%r12)
    00000090: 	movl	%eax, %ecx
.Ltmp3953:
    00000092: 	leaq	0xc(%r12), %rax
    00000097: 	cmpq	%rax, %rbp
    0000009a: 	je	.Ltmp3950 # Offset: 154
    0000009c: 	leaq	0x4(%rbx), %rax
    000000a0: 	cmpq	%rbp, %rax
    000000a3: 	je	.Ltmp3954 # Offset: 163
    000000a5: 	movq	%rbx, %r8
    000000a8: 	movl	$0x1, %esi
    000000ad: 	jmp	.Ltmp3955 # Offset: 173
    000000af: 	nop # Size: 1
.Ltmp3957:
    000000b0: 	movq	%rdx, %rax
.Ltmp3955:
    000000b3: 	movl	(%rax), %edx
    000000b5: 	cmpl	%ecx, %edx
    000000b7: 	jge	.Ltmp3956 # Offset: 183
    000000b9: 	movl	(%rbx), %edi
    000000bb: 	addq	$0x1, %rsi
    000000bf: 	addq	$0x4, %rbx
    000000c3: 	movl	%edi, (%rax)
    000000c5: 	movl	%edx, -0x4(%rbx)
.Ltmp3956:
    000000c8: 	leaq	0x4(%rax), %rdx
    000000cc: 	cmpq	%rdx, %rbp
    000000cf: 	jne	.Ltmp3957 # Offset: 207
    000000d1: 	subq	$0x4, %rax
    000000d5: 	subq	%r8, %rax
    000000d8: 	shrq	$0x2, %rax
    000000dc: 	addq	$0x3, %rax
    000000e0: 	subq	%rsi, %rax
    000000e3: 	cmpq	%rax, %rsi
    000000e6: 	jbe	.Ltmp3954 # Offset: 230
    000000e8: 	movq	%rbp, %rsi
    000000eb: 	movq	%rbx, %rdi
    000000ee: 	movq	%rbx, %rbp
    000000f1: 	callq	_Z18quicksort2_forwardIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEvT_S7_ # Offset: 241
.Ltmp3959:
    000000f6: 	cmpq	%r12, %rbp
    000000f9: 	je	.Ltmp3950 # Offset: 249
    000000fb: 	leaq	0x4(%r12), %rbx
    00000100: 	cmpq	%rbx, %rbp
    00000103: 	jne	.Ltmp3958 # Offset: 259
.Ltmp3950:
    00000109: 	popq	%rbx
    0000010a: 	popq	%rbp
    0000010b: 	popq	%r12
    0000010d: 	retq # Offset: 269
    0000010e: 	nop # Size: 2
.Ltmp3954:
    00000110: 	movq	%r12, %rdi
    00000113: 	movq	%rbx, %rsi
    00000116: 	movq	%rbx, %r12
    00000119: 	callq	_Z18quicksort2_forwardIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEvT_S7_ # Offset: 281
    0000011e: 	jmp	.Ltmp3959 # Offset: 286
.Ltmp3951:
    00000120: 	pshufd	$0xe5, %xmm0, %xmm5
    00000125: 	movd	%xmm0, %eax
    00000129: 	movd	%xmm5, %edx
    0000012d: 	cmpl	%eax, %edx
    0000012f: 	jge	.Ltmp3950 # Offset: 303
    00000131: 	movq	%xmm1, (%r12)
    00000137: 	popq	%rbx
    00000138: 	popq	%rbp
    00000139: 	popq	%r12
    0000013b: 	retq # Offset: 315
.Ltmp3949:
    0000013c: 	retq # Offset: 316
DWARF CFI Instructions:
    <empty>
End of Function "_Z18quicksort2_forwardIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEvT_S7_"

Binary Function "_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEPFS6_S6_S6_iEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 408
  State       : disassembled
  Address     : 0x21b60
  Size        : 0x337
  MaxSize     : 0x340
  Offset      : 0x21b60
  Section     : .text
  Orc Section : .local.text._Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEPFS6_S6_S6_iEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0407:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%r8, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rsi, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdx, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rdi, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	subq	$0x58, %rsp
    0000001e: 	movq	%rcx, 0x8(%rsp)
    00000023: 	movq	%fs:0x28, %rax
    0000002c: 	movq	%rax, 0x48(%rsp)
    00000031: 	xorl	%eax, %eax
    00000033: 	movq	%rdi, 0x18(%rsp)
    00000038: 	cmpq	%rsi, %rdi
    0000003b: 	je	.Ltmp3960 # Offset: 59
    0000003d: 	leaq	-0x4(%rsi), %rdx
    00000041: 	movq	%rdi, %rax
    00000044: 	subq	%rdi, %rdx
    00000047: 	movq	%rdx, %rcx
    0000004a: 	shrq	$0x2, %rcx
    0000004e: 	addq	$0x1, %rcx
    00000052: 	cmpq	$0x8, %rdx
    00000056: 	jbe	.Ltmp3961 # Offset: 86
    00000058: 	movq	%rcx, %rdx
    0000005b: 	movdqa	DATAat0x34550(%rip), %xmm0
    00000063: 	shrq	$0x2, %rdx
    00000067: 	shlq	$0x4, %rdx
    0000006b: 	addq	%rdi, %rdx
    0000006e: 	nop # Size: 2
.Ltmp3962:
    00000070: 	movups	%xmm0, (%rax)
    00000073: 	addq	$0x10, %rax
    00000077: 	cmpq	%rdx, %rax
    0000007a: 	jne	.Ltmp3962 # Offset: 122
    0000007c: 	movq	%rcx, %rdx
    0000007f: 	andq	$-0x4, %rdx
    00000083: 	leaq	(%rbp,%rdx,4), %rax
    00000088: 	cmpq	%rdx, %rcx
    0000008b: 	je	.Ltmp3960 # Offset: 139
.Ltmp3961:
    0000008d: 	leaq	0x4(%rax), %rdx
    00000091: 	movl	$0x5, (%rax)
    00000097: 	cmpq	%rdx, %r13
    0000009a: 	je	.Ltmp3960 # Offset: 154
    0000009c: 	leaq	0x8(%rax), %rdx
    000000a0: 	movl	$0x5, 0x4(%rax)
    000000a7: 	cmpq	%rdx, %r13
    000000aa: 	je	.Ltmp3960 # Offset: 170
    000000ac: 	movl	$0x5, 0x8(%rax)
.Ltmp3960:
    000000b3: 	leaq	0x20(%rsp), %r14
    000000b8: 	leaq	DATAat0x34160(%rip), %rdx
    000000bf: 	movq	%r15, %rsi
    000000c2: 	movzbl	%r9b, %ebx
    000000c6: 	movq	%r14, %rdi
    000000c9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 201
    000000ce: 	movq	0x8(%rsp), %rcx
    000000d3: 	movl	%ebx, %r9d
    000000d6: 	movq	%r14, %r8
    000000d9: 	movq	%r12, %rdx
    000000dc: 	movq	%r13, %rsi
    000000df: 	movq	%rbp, %rdi
    000000e2: 	callq	_Z15TestSearchArrayIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEPFS6_S6_S6_iEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 226
    000000e7: 	movq	0x20(%rsp), %rdi
    000000ec: 	leaq	0x30(%rsp), %rax
    000000f1: 	movq	%rax, 0x10(%rsp)
    000000f6: 	cmpq	%rax, %rdi
    000000f9: 	je	.Ltmp3963 # Offset: 249
    000000fb: 	movq	0x30(%rsp), %rax
    00000100: 	leaq	0x1(%rax), %rsi
    00000104: 	callq	_ZdlPvm@PLT # Offset: 260
.Ltmp3963:
    00000109: 	cmpq	$0x9, %r12
    0000010d: 	jbe	.Ltmp3964 # Offset: 269
    00000113: 	movabsq	$-0x3333333333333333, %rdx
    0000011d: 	movq	%r12, %rax
    00000120: 	mulq	%rdx
    00000123: 	shrq	$0x3, %rdx
.Ltmp3975:
    00000127: 	movq	%rbp, %r8
    0000012a: 	xorl	%esi, %esi
    0000012c: 	xorl	%edi, %edi
    0000012e: 	cmpq	$0x0, %r12
    00000132: 	jbe	.Ltmp3965 # Offset: 306
    00000134: 	nopl	(%rax) # Size: 4
.Ltmp3968:
    00000138: 	leaq	0x4(%r8), %rax
    0000013c: 	xorl	%ecx, %ecx
    0000013e: 	nop # Size: 2
.Ltmp3967:
    00000140: 	addq	$0x1, %rcx
    00000144: 	movl	%edi, -0x4(%rax)
    00000147: 	movq	%rax, %r8
    0000014a: 	addq	$0x1, %rsi
    0000014e: 	addq	$0x4, %rax
    00000152: 	cmpq	%rdx, %rcx
    00000155: 	jae	.Ltmp3966 # Offset: 341
    00000157: 	cmpq	%rsi, %r12
    0000015a: 	ja	.Ltmp3967 # Offset: 346
.Ltmp3966:
    0000015c: 	addl	$0x1, %edi
    0000015f: 	cmpq	%rsi, %r12
    00000162: 	ja	.Ltmp3968 # Offset: 354
.Ltmp3965:
    00000164: 	leaq	DATAat0x3416e(%rip), %rdx
    0000016b: 	movq	%r15, %rsi
    0000016e: 	movq	%r14, %rdi
    00000171: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 369
    00000176: 	movq	0x8(%rsp), %rcx
    0000017b: 	movl	%ebx, %r9d
    0000017e: 	movq	%r14, %r8
    00000181: 	movq	%r12, %rdx
    00000184: 	movq	%r13, %rsi
    00000187: 	movq	%rbp, %rdi
    0000018a: 	callq	_Z15TestSearchArrayIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEPFS6_S6_S6_iEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 394
    0000018f: 	movq	0x20(%rsp), %rdi
    00000194: 	cmpq	0x10(%rsp), %rdi
    00000199: 	je	.Ltmp3969 # Offset: 409
    0000019b: 	movq	0x30(%rsp), %rax
    000001a0: 	leaq	0x1(%rax), %rsi
    000001a4: 	callq	_ZdlPvm@PLT # Offset: 420
.Ltmp3969:
    000001a9: 	cmpq	%r13, %rbp
    000001ac: 	je	.Ltmp3970 # Offset: 428
    000001b2: 	leaq	-0x4(%r13), %rdx
    000001b6: 	movq	%rbp, %rax
    000001b9: 	subq	%rbp, %rdx
    000001bc: 	movq	%rdx, %rcx
    000001bf: 	shrq	$0x2, %rcx
    000001c3: 	addq	$0x1, %rcx
    000001c7: 	cmpq	$0x8, %rdx
    000001cb: 	jbe	.Ltmp3971 # Offset: 459
    000001d1: 	movq	%rcx, %rdx
    000001d4: 	movdqa	DATAat0x34430(%rip), %xmm1
    000001dc: 	movdqa	DATAat0x34460(%rip), %xmm4
    000001e4: 	shrq	$0x2, %rdx
    000001e8: 	movdqa	DATAat0x34450(%rip), %xmm3
    000001f0: 	shlq	$0x4, %rdx
    000001f4: 	addq	%rbp, %rdx
    000001f7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3972:
    00000200: 	movdqa	%xmm1, %xmm0
    00000204: 	addq	$0x10, %rax
    00000208: 	paddq	%xmm4, %xmm1
    0000020c: 	movdqa	%xmm0, %xmm2
    00000210: 	paddq	%xmm3, %xmm2
    00000214: 	shufps	$0x88, %xmm2, %xmm0
    00000218: 	movups	%xmm0, -0x10(%rax)
    0000021c: 	cmpq	%rax, %rdx
    0000021f: 	jne	.Ltmp3972 # Offset: 543
    00000221: 	movq	%rcx, %rax
    00000224: 	andq	$-0x4, %rax
    00000228: 	leaq	(%rbp,%rax,4), %rdi
    0000022d: 	movq	%rdi, 0x18(%rsp)
    00000232: 	cmpq	%rcx, %rax
    00000235: 	je	.Ltmp3970 # Offset: 565
.Ltmp3976:
    00000237: 	movq	0x18(%rsp), %rdi
    0000023c: 	leaq	0x1(%rax), %rcx
    00000240: 	leaq	0x4(%rdi), %rdx
    00000244: 	movl	%eax, (%rdi)
    00000246: 	cmpq	%rdx, %r13
    00000249: 	je	.Ltmp3970 # Offset: 585
    0000024b: 	leaq	0x8(%rdi), %rdx
    0000024f: 	movl	%ecx, 0x4(%rdi)
    00000252: 	addq	$0x2, %rax
    00000256: 	cmpq	%rdx, %r13
    00000259: 	je	.Ltmp3970 # Offset: 601
    0000025b: 	movl	%eax, 0x8(%rdi)
.Ltmp3970:
    0000025e: 	movq	%r13, %rsi
    00000261: 	movq	%rbp, %rdi
    00000264: 	callq	_Z18quicksort2_forwardIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEvT_S7_ # Offset: 612
    00000269: 	leaq	DATAat0x34184(%rip), %rdx
    00000270: 	movq	%r15, %rsi
    00000273: 	movq	%r14, %rdi
    00000276: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 630
    0000027b: 	movq	0x8(%rsp), %rcx
    00000280: 	movl	%ebx, %r9d
    00000283: 	movq	%r14, %r8
    00000286: 	movq	%r12, %rdx
    00000289: 	movq	%r13, %rsi
    0000028c: 	movq	%rbp, %rdi
    0000028f: 	callq	_Z15TestSearchArrayIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEPFS6_S6_S6_iEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 655
    00000294: 	movq	0x20(%rsp), %rdi
    00000299: 	cmpq	0x10(%rsp), %rdi
    0000029e: 	je	.Ltmp3973 # Offset: 670
    000002a0: 	movq	0x30(%rsp), %rax
    000002a5: 	leaq	0x1(%rax), %rsi
    000002a9: 	callq	_ZdlPvm@PLT # Offset: 681
.Ltmp3973:
    000002ae: 	movq	0x48(%rsp), %rax
    000002b3: 	subq	%fs:0x28, %rax
    000002bc: 	jne	.Ltmp3974 # Offset: 700
    000002be: 	addq	$0x58, %rsp
    000002c2: 	popq	%rbx
    000002c3: 	popq	%rbp
    000002c4: 	popq	%r12
    000002c6: 	popq	%r13
    000002c8: 	popq	%r14
    000002ca: 	popq	%r15
    000002cc: 	retq # Offset: 716
.Ltmp3964:
    000002cd: 	testq	%r12, %r12
    000002d0: 	je	.Ltmp3965 # Offset: 720
    000002d6: 	movl	$0x1, %edx
    000002db: 	jmp	.Ltmp3975 # Offset: 731
.Ltmp3971:
    000002e0: 	xorl	%eax, %eax
    000002e2: 	jmp	.Ltmp3976 # Offset: 738
.Ltmp3974:
    000002e7: 	callq	__stack_chk_fail@PLT # Offset: 743
    000002ec: 	endbr64
.Ltmp3979:
    000002f0: 	movq	%rax, %rbp
    000002f3: 	jmp	.Ltmp3977 # Offset: 755
    000002f5: 	endbr64
    000002f9: 	movq	%rax, %rbp
    000002fc: 	jmp	.Ltmp3978 # Offset: 764
    000002fe: 	endbr64
    00000302: 	jmp	.Ltmp3979 # Offset: 770
.Ltmp3978:
    00000304: 	movq	0x20(%rsp), %rdi
    00000309: 	leaq	0x30(%rsp), %rax
    0000030e: 	cmpq	%rax, %rdi
    00000311: 	je	.Ltmp3980 # Offset: 785
.Ltmp3981:
    00000313: 	movq	0x30(%rsp), %rax
    00000318: 	leaq	0x1(%rax), %rsi
    0000031c: 	callq	_ZdlPvm@PLT # Offset: 796
.Ltmp3980:
    00000321: 	movq	%rbp, %rdi
    00000324: 	callq	_Unwind_Resume@PLT # Offset: 804
.Ltmp3977:
    00000329: 	movq	0x20(%rsp), %rdi
    0000032e: 	cmpq	0x10(%rsp), %rdi
    00000333: 	jne	.Ltmp3981 # Offset: 819
    00000335: 	jmp	.Ltmp3980 # Offset: 821
DWARF CFI Instructions:
    <empty>
End of Function "_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEPFS6_S6_S6_iEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z23lower_bound_recur_innerIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEilET_S7_T0_T1_" after disassembly {
  Number      : 409
  State       : disassembled
  Address     : 0x21ea0
  Size        : 0x3d
  MaxSize     : 0x40
  Offset      : 0x21ea0
  Section     : .text
  Orc Section : .local.text._Z23lower_bound_recur_innerIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEilET_S7_T0_T1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0408:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
.Ltmp3985:
    00000007: 	testq	%rdx, %rdx
    0000000a: 	je	.Ltmp3982 # Offset: 10
.Ltmp3984:
    0000000c: 	movq	%rdx, %rcx
    0000000f: 	shrq	$0x3f, %rcx
    00000013: 	addq	%rdx, %rcx
    00000016: 	sarq	%rcx
    00000019: 	leaq	(%rax,%rcx,4), %rdi
    0000001d: 	cmpl	%esi, (%rdi)
    0000001f: 	jge	.Ltmp3983 # Offset: 31
    00000021: 	addq	$0x1, %rcx
    00000025: 	leaq	0x4(%rdi), %rax
    00000029: 	subq	%rcx, %rdx
    0000002c: 	testq	%rdx, %rdx
    0000002f: 	jne	.Ltmp3984 # Offset: 47
.Ltmp3982:
    00000031: 	retq # Offset: 49
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3983:
    00000038: 	movq	%rcx, %rdx
    0000003b: 	jmp	.Ltmp3985 # Offset: 59
DWARF CFI Instructions:
    <empty>
End of Function "_Z23lower_bound_recur_innerIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEilET_S7_T0_T1_"

Binary Function "_Z17lower_bound_recurIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiET_S7_S7_T0_" after disassembly {
  Number      : 410
  State       : disassembled
  Address     : 0x21ee0
  Size        : 0xf3
  MaxSize     : 0x100
  Offset      : 0x21ee0
  Section     : .text
  Orc Section : .local.text._Z17lower_bound_recurIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiET_S7_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0409:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	cmpq	%rdi, %rsi
    0000000a: 	je	.Ltmp3986 # Offset: 10
    0000000c: 	subq	%rdi, %rsi
    0000000f: 	movl	%edx, %r8d
    00000012: 	subq	$0x8, %rsp
    00000016: 	movq	%rsi, %rdx
    00000019: 	shrq	$0x3f, %rsi
    0000001d: 	sarq	$0x2, %rdx
    00000021: 	addq	%rdx, %rsi
    00000024: 	sarq	%rsi
    00000027: 	leaq	(%rdi,%rsi,4), %rcx
    0000002b: 	cmpl	(%rcx), %r8d
    0000002e: 	jle	.Ltmp3987 # Offset: 46
    00000030: 	addq	$0x1, %rsi
    00000034: 	leaq	0x4(%rcx), %rax
    00000038: 	subq	%rsi, %rdx
    0000003b: 	je	.Ltmp3988 # Offset: 59
    0000003d: 	movq	%rdx, %r9
    00000040: 	shrq	$0x3f, %r9
    00000044: 	addq	%rdx, %r9
    00000047: 	sarq	%r9
    0000004a: 	leaq	(%rax,%r9,4), %rdi
    0000004e: 	cmpl	(%rdi), %r8d
    00000051: 	jle	.Ltmp3989 # Offset: 81
    00000057: 	addq	$0x1, %r9
    0000005b: 	addq	$0x4, %rdi
    0000005f: 	movl	%r8d, %esi
    00000062: 	subq	%r9, %rdx
    00000065: 	callq	_Z23lower_bound_recur_innerIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEilET_S7_T0_T1_ # Offset: 101
.Ltmp3988:
    0000006a: 	addq	$0x8, %rsp
    0000006e: 	retq # Offset: 110
    0000006f: 	nop # Size: 1
.Ltmp3986:
    00000070: 	retq # Offset: 112
    00000071: 	nopl	(%rax) # Size: 7
.Ltmp3987:
    00000078: 	testq	%rsi, %rsi
    0000007b: 	je	.Ltmp3988 # Offset: 123
    0000007d: 	testq	%rdx, %rdx
    00000080: 	leaq	0x3(%rdx), %rcx
    00000084: 	cmovsq	%rcx, %rdx
    00000088: 	movq	%rdx, %r9
    0000008b: 	andq	$-0x4, %rdx
    0000008f: 	addq	%rdi, %rdx
    00000092: 	sarq	$0x2, %r9
    00000096: 	cmpl	(%rdx), %r8d
    00000099: 	jle	.Ltmp3989 # Offset: 153
    0000009b: 	addq	$0x1, %r9
    0000009f: 	leaq	0x4(%rdx), %rax
    000000a3: 	subq	%r9, %rsi
    000000a6: 	je	.Ltmp3988 # Offset: 166
    000000a8: 	movq	%rsi, %rdx
    000000ab: 	shrq	$0x3f, %rdx
    000000af: 	addq	%rsi, %rdx
    000000b2: 	sarq	%rdx
    000000b5: 	leaq	(%rax,%rdx,4), %rcx
    000000b9: 	cmpl	(%rcx), %r8d
    000000bc: 	jle	.Ltmp3990 # Offset: 188
    000000be: 	leaq	0x1(%rdx), %rax
    000000c2: 	movq	%rsi, %rdx
    000000c5: 	leaq	0x4(%rcx), %rdi
    000000c9: 	movl	%r8d, %esi
    000000cc: 	subq	%rax, %rdx
    000000cf: 	callq	_Z23lower_bound_recur_innerIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEilET_S7_T0_T1_ # Offset: 207
    000000d4: 	jmp	.Ltmp3988 # Offset: 212
    000000d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3989:
    000000e0: 	movq	%r9, %rdx
.Ltmp3990:
    000000e3: 	movl	%r8d, %esi
    000000e6: 	movq	%rax, %rdi
    000000e9: 	callq	_Z23lower_bound_recur_innerIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEilET_S7_T0_T1_ # Offset: 233
    000000ee: 	addq	$0x8, %rsp
    000000f2: 	retq # Offset: 242
DWARF CFI Instructions:
    <empty>
End of Function "_Z17lower_bound_recurIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiET_S7_S7_T0_"

Binary Function "_Z23upper_bound_recur_innerIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEilET_S7_T0_T1_" after disassembly {
  Number      : 411
  State       : disassembled
  Address     : 0x21fe0
  Size        : 0x3d
  MaxSize     : 0x40
  Offset      : 0x21fe0
  Section     : .text
  Orc Section : .local.text._Z23upper_bound_recur_innerIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEilET_S7_T0_T1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0410:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
.Ltmp3994:
    00000007: 	testq	%rdx, %rdx
    0000000a: 	je	.Ltmp3991 # Offset: 10
.Ltmp3993:
    0000000c: 	movq	%rdx, %rcx
    0000000f: 	shrq	$0x3f, %rcx
    00000013: 	addq	%rdx, %rcx
    00000016: 	sarq	%rcx
    00000019: 	leaq	(%rax,%rcx,4), %rdi
    0000001d: 	cmpl	%esi, (%rdi)
    0000001f: 	jg	.Ltmp3992 # Offset: 31
    00000021: 	addq	$0x1, %rcx
    00000025: 	leaq	0x4(%rdi), %rax
    00000029: 	subq	%rcx, %rdx
    0000002c: 	testq	%rdx, %rdx
    0000002f: 	jne	.Ltmp3993 # Offset: 47
.Ltmp3991:
    00000031: 	retq # Offset: 49
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3992:
    00000038: 	movq	%rcx, %rdx
    0000003b: 	jmp	.Ltmp3994 # Offset: 59
DWARF CFI Instructions:
    <empty>
End of Function "_Z23upper_bound_recur_innerIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEilET_S7_T0_T1_"

Binary Function "_Z17upper_bound_recurIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiET_S7_S7_T0_" after disassembly {
  Number      : 412
  State       : disassembled
  Address     : 0x22020
  Size        : 0x108
  MaxSize     : 0x110
  Offset      : 0x22020
  Section     : .text
  Orc Section : .local.text._Z17upper_bound_recurIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiET_S7_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0411:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	cmpq	%rdi, %rsi
    0000000a: 	je	.Ltmp3995 # Offset: 10
    0000000c: 	subq	%rdi, %rsi
    0000000f: 	movl	%edx, %r8d
    00000012: 	subq	$0x8, %rsp
    00000016: 	movq	%rsi, %rcx
    00000019: 	shrq	$0x3f, %rsi
    0000001d: 	sarq	$0x2, %rcx
    00000021: 	leaq	(%rsi,%rcx), %rdx
    00000025: 	sarq	%rdx
    00000028: 	leaq	(%rdi,%rdx,4), %rsi
    0000002c: 	cmpl	(%rsi), %r8d
    0000002f: 	jge	.Ltmp3996 # Offset: 47
    00000031: 	testq	%rdx, %rdx
    00000034: 	je	.Ltmp3997 # Offset: 52
    00000036: 	testq	%rcx, %rcx
    00000039: 	leaq	0x3(%rcx), %rdi
    0000003d: 	cmovnsq	%rcx, %rdi
    00000041: 	movq	%rdi, %r9
    00000044: 	andq	$-0x4, %rdi
    00000048: 	addq	%rax, %rdi
    0000004b: 	sarq	$0x2, %r9
    0000004f: 	cmpl	(%rdi), %r8d
    00000052: 	jge	.Ltmp3998 # Offset: 82
    00000058: 	movq	%r9, %rdx
    0000005b: 	movl	%r8d, %esi
    0000005e: 	movq	%rax, %rdi
    00000061: 	callq	_Z23upper_bound_recur_innerIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEilET_S7_T0_T1_ # Offset: 97
.Ltmp3997:
    00000066: 	addq	$0x8, %rsp
    0000006a: 	retq # Offset: 106
    0000006b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3995:
    00000070: 	retq # Offset: 112
    00000071: 	nopl	(%rax) # Size: 7
.Ltmp3996:
    00000078: 	addq	$0x1, %rdx
    0000007c: 	leaq	0x4(%rsi), %rax
    00000080: 	subq	%rdx, %rcx
    00000083: 	je	.Ltmp3997 # Offset: 131
    00000085: 	movq	%rcx, %rdx
    00000088: 	shrq	$0x3f, %rdx
    0000008c: 	addq	%rcx, %rdx
    0000008f: 	sarq	%rdx
    00000092: 	leaq	(%rax,%rdx,4), %rsi
    00000096: 	cmpl	(%rsi), %r8d
    00000099: 	jl	.Ltmp3999 # Offset: 153
    0000009b: 	addq	$0x1, %rdx
    0000009f: 	leaq	0x4(%rsi), %rax
    000000a3: 	subq	%rdx, %rcx
    000000a6: 	je	.Ltmp3997 # Offset: 166
    000000a8: 	movq	%rcx, %rdx
    000000ab: 	shrq	$0x3f, %rdx
    000000af: 	addq	%rcx, %rdx
    000000b2: 	sarq	%rdx
    000000b5: 	leaq	(%rax,%rdx,4), %rsi
    000000b9: 	cmpl	(%rsi), %r8d
    000000bc: 	jl	.Ltmp3999 # Offset: 188
    000000be: 	leaq	0x1(%rdx), %rax
    000000c2: 	leaq	0x4(%rsi), %rdi
    000000c6: 	movl	%r8d, %esi
    000000c9: 	subq	%rax, %rcx
    000000cc: 	movq	%rcx, %rdx
    000000cf: 	callq	_Z23upper_bound_recur_innerIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEilET_S7_T0_T1_ # Offset: 207
    000000d4: 	jmp	.Ltmp3997 # Offset: 212
    000000d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3999:
    000000e0: 	movl	%r8d, %esi
    000000e3: 	movq	%rax, %rdi
    000000e6: 	callq	_Z23upper_bound_recur_innerIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEilET_S7_T0_T1_ # Offset: 230
    000000eb: 	jmp	.Ltmp3997 # Offset: 235
.Ltmp3998:
    000000f0: 	addq	$0x1, %r9
    000000f4: 	addq	$0x4, %rdi
    000000f8: 	movl	%r8d, %esi
    000000fb: 	subq	%r9, %rdx
    000000fe: 	callq	_Z23upper_bound_recur_innerIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEilET_S7_T0_T1_ # Offset: 254
    00000103: 	jmp	.Ltmp3997 # Offset: 259
DWARF CFI Instructions:
    <empty>
End of Function "_Z17upper_bound_recurIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiET_S7_S7_T0_"

Binary Function "_Z15TestSearchArrayIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEPFbS6_S6_iEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 413
  State       : disassembled
  Address     : 0x22130
  Size        : 0x1d6
  MaxSize     : 0x1e0
  Offset      : 0x22130
  Section     : .text
  Orc Section : .local.text._Z15TestSearchArrayIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEPFbS6_S6_iEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0412:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rcx, %r15
    00000009: 	pushq	%r14
    0000000b: 	movq	%rsi, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %r12
    00000015: 	movl	$0x1000, %edi
    0000001a: 	pushq	%rbp
    0000001b: 	pushq	%rbx
    0000001c: 	subq	$0x28, %rsp
    00000020: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000027: 	movq	%rdx, 0x10(%rsp)
    0000002c: 	movq	%r8, 0x18(%rsp)
    00000031: 	movb	%r9b, 0xf(%rsp)
    00000036: 	callq	_Znwm@PLT # Offset: 54
    0000003b: 	movq	%rax, %r13
    0000003e: 	movl	$0x0, (%rax)
    00000044: 	addq	$0x4, %rax
    00000048: 	leaq	0x1000(%r13), %rsi
    0000004f: 	cmpq	%rsi, %rax
    00000052: 	je	.Ltmp4000 # Offset: 82
    00000054: 	leaq	0xc(%r13), %rdi
    00000058: 	movq	$0x0, 0x4(%r13)
    00000060: 	movq	$0x0, 0xff8(%r13)
    0000006b: 	andq	$-0x8, %rdi
    0000006f: 	subq	%rdi, %rax
    00000072: 	movq	%rax, %rcx
    00000075: 	xorl	%eax, %eax
    00000077: 	addl	$0xffc, %ecx
    0000007d: 	shrl	$0x3, %ecx
    00000080: 	rep		stosq	%rax, %es:(%rdi)
.Ltmp4000:
    00000083: 	movabsq	$0x5851f42d4c957f2d, %r8
    0000008d: 	movq	%r13, %rcx
    00000090: 	movabsq	$0x14057b7ef767814f, %rdi
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4001:
    000000a0: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000000a7: 	addq	$0x4, %rcx
    000000ab: 	imulq	%r8, %rax
    000000af: 	addq	%rdi, %rax
    000000b2: 	movq	%rax, %rdx
    000000b5: 	movq	%rax, %r9
    000000b8: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000000bf: 	shrq	$0x14, %rdx
    000000c3: 	shlq	$0x17, %r9
    000000c7: 	xorq	%r9, %rdx
    000000ca: 	xorq	%rdx, %rax
    000000cd: 	xorl	%edx, %edx
    000000cf: 	divq	0x10(%rsp)
    000000d4: 	movl	(%r12,%rdx,4), %eax
    000000d8: 	movl	%eax, -0x4(%rcx)
    000000db: 	cmpq	%rcx, %rsi
    000000de: 	jne	.Ltmp4001 # Offset: 222
    000000e0: 	callq	clock@PLT # Offset: 224
    000000e5: 	xorl	%ebx, %ebx
    000000e7: 	xorl	%ebp, %ebp
    000000e9: 	movq	%rax, start_time(%rip)
.Ltmp4005:
    000000f0: 	leaq	0xc8(%rbp), %rax
    000000f7: 	movq	%rax, (%rsp)
    000000fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4003:
    00000100: 	movq	%rbp, %rax
    00000103: 	movq	%r14, %rsi
    00000106: 	addq	$0x1, %rbp
    0000010a: 	movq	%r12, %rdi
    0000010d: 	andl	$0x3ff, %eax
    00000112: 	movl	(%r13,%rax,4), %edx
    00000117: 	callq	*%r15 # Offset: 279
    0000011a: 	testb	%al, %al
    0000011c: 	jne	.Ltmp4002 # Offset: 284
    0000011e: 	cmpb	$0x0, 0xf(%rsp)
    00000123: 	movl	$0x1, %eax
    00000128: 	cmovel	%eax, %ebx
.Ltmp4002:
    0000012b: 	cmpq	(%rsp), %rbp
    0000012f: 	jne	.Ltmp4003 # Offset: 303
    00000131: 	callq	clock@PLT # Offset: 305
    00000136: 	movsd	gMinimumTimeTarget(%rip), %xmm1
    0000013e: 	pxor	%xmm0, %xmm0
    00000142: 	movq	%rax, end_time(%rip)
    00000149: 	subq	start_time(%rip), %rax
    00000150: 	cvtsi2sd	%rax, %xmm0
    00000155: 	divsd	DATAat0x34410(%rip), %xmm0
    0000015d: 	comisd	%xmm0, %xmm1
    00000161: 	jbe	.Ltmp4004 # Offset: 353
    00000163: 	cmpq	$0x5f5e0ff, %rbp
    0000016a: 	jbe	.Ltmp4005 # Offset: 362
.Ltmp4004:
    0000016c: 	movq	0x18(%rsp), %rdx
    00000171: 	movq	0x10(%rsp), %rdi
    00000176: 	movq	%rbp, %rsi
    00000179: 	callq	_Z13record_resultdmmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 377
    0000017e: 	testb	%bl, %bl
    00000180: 	jne	.Ltmp4006 # Offset: 384
.Ltmp4007:
    00000182: 	addq	$0x28, %rsp
    00000186: 	movq	%r13, %rdi
    00000189: 	movl	$0x1000, %esi
    0000018e: 	popq	%rbx
    0000018f: 	popq	%rbp
    00000190: 	popq	%r12
    00000192: 	popq	%r13
    00000194: 	popq	%r14
    00000196: 	popq	%r15
    00000198: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 408
.Ltmp4006:
    0000019d: 	movq	0x18(%rsp), %rax
    000001a2: 	leaq	DATAat0x34137(%rip), %rsi
    000001a9: 	movl	$0x1, %edi
    000001ae: 	movq	(%rax), %rdx
    000001b1: 	xorl	%eax, %eax
    000001b3: 	callq	__printf_chk@PLT # Offset: 435
    000001b8: 	jmp	.Ltmp4007 # Offset: 440
    000001ba: 	endbr64
    000001be: 	movq	%rax, %rbp
    000001c1: 	movq	%r13, %rdi
    000001c4: 	movl	$0x1000, %esi
    000001c9: 	callq	_ZdlPvm@PLT # Offset: 457
    000001ce: 	movq	%rbp, %rdi
    000001d1: 	callq	_Unwind_Resume@PLT # Offset: 465
DWARF CFI Instructions:
    <empty>
End of Function "_Z15TestSearchArrayIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEPFbS6_S6_iEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEPFbS6_S6_iEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 414
  State       : disassembled
  Address     : 0x22310
  Size        : 0x337
  MaxSize     : 0x340
  Offset      : 0x22310
  Section     : .text
  Orc Section : .local.text._Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEPFbS6_S6_iEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0413:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%r8, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rsi, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdx, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rdi, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	subq	$0x58, %rsp
    0000001e: 	movq	%rcx, 0x8(%rsp)
    00000023: 	movq	%fs:0x28, %rax
    0000002c: 	movq	%rax, 0x48(%rsp)
    00000031: 	xorl	%eax, %eax
    00000033: 	movq	%rdi, 0x18(%rsp)
    00000038: 	cmpq	%rsi, %rdi
    0000003b: 	je	.Ltmp4008 # Offset: 59
    0000003d: 	leaq	-0x4(%rsi), %rdx
    00000041: 	movq	%rdi, %rax
    00000044: 	subq	%rdi, %rdx
    00000047: 	movq	%rdx, %rcx
    0000004a: 	shrq	$0x2, %rcx
    0000004e: 	addq	$0x1, %rcx
    00000052: 	cmpq	$0x8, %rdx
    00000056: 	jbe	.Ltmp4009 # Offset: 86
    00000058: 	movq	%rcx, %rdx
    0000005b: 	movdqa	DATAat0x34550(%rip), %xmm0
    00000063: 	shrq	$0x2, %rdx
    00000067: 	shlq	$0x4, %rdx
    0000006b: 	addq	%rdi, %rdx
    0000006e: 	nop # Size: 2
.Ltmp4010:
    00000070: 	movups	%xmm0, (%rax)
    00000073: 	addq	$0x10, %rax
    00000077: 	cmpq	%rdx, %rax
    0000007a: 	jne	.Ltmp4010 # Offset: 122
    0000007c: 	movq	%rcx, %rdx
    0000007f: 	andq	$-0x4, %rdx
    00000083: 	leaq	(%rbp,%rdx,4), %rax
    00000088: 	cmpq	%rdx, %rcx
    0000008b: 	je	.Ltmp4008 # Offset: 139
.Ltmp4009:
    0000008d: 	leaq	0x4(%rax), %rdx
    00000091: 	movl	$0x5, (%rax)
    00000097: 	cmpq	%rdx, %r13
    0000009a: 	je	.Ltmp4008 # Offset: 154
    0000009c: 	leaq	0x8(%rax), %rdx
    000000a0: 	movl	$0x5, 0x4(%rax)
    000000a7: 	cmpq	%rdx, %r13
    000000aa: 	je	.Ltmp4008 # Offset: 170
    000000ac: 	movl	$0x5, 0x8(%rax)
.Ltmp4008:
    000000b3: 	leaq	0x20(%rsp), %r14
    000000b8: 	leaq	DATAat0x34160(%rip), %rdx
    000000bf: 	movq	%r15, %rsi
    000000c2: 	movzbl	%r9b, %ebx
    000000c6: 	movq	%r14, %rdi
    000000c9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 201
    000000ce: 	movq	0x8(%rsp), %rcx
    000000d3: 	movl	%ebx, %r9d
    000000d6: 	movq	%r14, %r8
    000000d9: 	movq	%r12, %rdx
    000000dc: 	movq	%r13, %rsi
    000000df: 	movq	%rbp, %rdi
    000000e2: 	callq	_Z15TestSearchArrayIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEPFbS6_S6_iEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 226
    000000e7: 	movq	0x20(%rsp), %rdi
    000000ec: 	leaq	0x30(%rsp), %rax
    000000f1: 	movq	%rax, 0x10(%rsp)
    000000f6: 	cmpq	%rax, %rdi
    000000f9: 	je	.Ltmp4011 # Offset: 249
    000000fb: 	movq	0x30(%rsp), %rax
    00000100: 	leaq	0x1(%rax), %rsi
    00000104: 	callq	_ZdlPvm@PLT # Offset: 260
.Ltmp4011:
    00000109: 	cmpq	$0x9, %r12
    0000010d: 	jbe	.Ltmp4012 # Offset: 269
    00000113: 	movabsq	$-0x3333333333333333, %rdx
    0000011d: 	movq	%r12, %rax
    00000120: 	mulq	%rdx
    00000123: 	shrq	$0x3, %rdx
.Ltmp4023:
    00000127: 	movq	%rbp, %r8
    0000012a: 	xorl	%esi, %esi
    0000012c: 	xorl	%edi, %edi
    0000012e: 	cmpq	$0x0, %r12
    00000132: 	jbe	.Ltmp4013 # Offset: 306
    00000134: 	nopl	(%rax) # Size: 4
.Ltmp4016:
    00000138: 	leaq	0x4(%r8), %rax
    0000013c: 	xorl	%ecx, %ecx
    0000013e: 	nop # Size: 2
.Ltmp4015:
    00000140: 	addq	$0x1, %rcx
    00000144: 	movl	%edi, -0x4(%rax)
    00000147: 	movq	%rax, %r8
    0000014a: 	addq	$0x1, %rsi
    0000014e: 	addq	$0x4, %rax
    00000152: 	cmpq	%rdx, %rcx
    00000155: 	jae	.Ltmp4014 # Offset: 341
    00000157: 	cmpq	%rsi, %r12
    0000015a: 	ja	.Ltmp4015 # Offset: 346
.Ltmp4014:
    0000015c: 	addl	$0x1, %edi
    0000015f: 	cmpq	%rsi, %r12
    00000162: 	ja	.Ltmp4016 # Offset: 354
.Ltmp4013:
    00000164: 	leaq	DATAat0x3416e(%rip), %rdx
    0000016b: 	movq	%r15, %rsi
    0000016e: 	movq	%r14, %rdi
    00000171: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 369
    00000176: 	movq	0x8(%rsp), %rcx
    0000017b: 	movl	%ebx, %r9d
    0000017e: 	movq	%r14, %r8
    00000181: 	movq	%r12, %rdx
    00000184: 	movq	%r13, %rsi
    00000187: 	movq	%rbp, %rdi
    0000018a: 	callq	_Z15TestSearchArrayIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEPFbS6_S6_iEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 394
    0000018f: 	movq	0x20(%rsp), %rdi
    00000194: 	cmpq	0x10(%rsp), %rdi
    00000199: 	je	.Ltmp4017 # Offset: 409
    0000019b: 	movq	0x30(%rsp), %rax
    000001a0: 	leaq	0x1(%rax), %rsi
    000001a4: 	callq	_ZdlPvm@PLT # Offset: 420
.Ltmp4017:
    000001a9: 	cmpq	%r13, %rbp
    000001ac: 	je	.Ltmp4018 # Offset: 428
    000001b2: 	leaq	-0x4(%r13), %rdx
    000001b6: 	movq	%rbp, %rax
    000001b9: 	subq	%rbp, %rdx
    000001bc: 	movq	%rdx, %rcx
    000001bf: 	shrq	$0x2, %rcx
    000001c3: 	addq	$0x1, %rcx
    000001c7: 	cmpq	$0x8, %rdx
    000001cb: 	jbe	.Ltmp4019 # Offset: 459
    000001d1: 	movq	%rcx, %rdx
    000001d4: 	movdqa	DATAat0x34430(%rip), %xmm1
    000001dc: 	movdqa	DATAat0x34460(%rip), %xmm4
    000001e4: 	shrq	$0x2, %rdx
    000001e8: 	movdqa	DATAat0x34450(%rip), %xmm3
    000001f0: 	shlq	$0x4, %rdx
    000001f4: 	addq	%rbp, %rdx
    000001f7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4020:
    00000200: 	movdqa	%xmm1, %xmm0
    00000204: 	addq	$0x10, %rax
    00000208: 	paddq	%xmm4, %xmm1
    0000020c: 	movdqa	%xmm0, %xmm2
    00000210: 	paddq	%xmm3, %xmm2
    00000214: 	shufps	$0x88, %xmm2, %xmm0
    00000218: 	movups	%xmm0, -0x10(%rax)
    0000021c: 	cmpq	%rax, %rdx
    0000021f: 	jne	.Ltmp4020 # Offset: 543
    00000221: 	movq	%rcx, %rax
    00000224: 	andq	$-0x4, %rax
    00000228: 	leaq	(%rbp,%rax,4), %rdi
    0000022d: 	movq	%rdi, 0x18(%rsp)
    00000232: 	cmpq	%rcx, %rax
    00000235: 	je	.Ltmp4018 # Offset: 565
.Ltmp4024:
    00000237: 	movq	0x18(%rsp), %rdi
    0000023c: 	leaq	0x1(%rax), %rcx
    00000240: 	leaq	0x4(%rdi), %rdx
    00000244: 	movl	%eax, (%rdi)
    00000246: 	cmpq	%rdx, %r13
    00000249: 	je	.Ltmp4018 # Offset: 585
    0000024b: 	leaq	0x8(%rdi), %rdx
    0000024f: 	movl	%ecx, 0x4(%rdi)
    00000252: 	addq	$0x2, %rax
    00000256: 	cmpq	%rdx, %r13
    00000259: 	je	.Ltmp4018 # Offset: 601
    0000025b: 	movl	%eax, 0x8(%rdi)
.Ltmp4018:
    0000025e: 	movq	%r13, %rsi
    00000261: 	movq	%rbp, %rdi
    00000264: 	callq	_Z18quicksort2_forwardIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEvT_S7_ # Offset: 612
    00000269: 	leaq	DATAat0x34184(%rip), %rdx
    00000270: 	movq	%r15, %rsi
    00000273: 	movq	%r14, %rdi
    00000276: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 630
    0000027b: 	movq	0x8(%rsp), %rcx
    00000280: 	movl	%ebx, %r9d
    00000283: 	movq	%r14, %r8
    00000286: 	movq	%r12, %rdx
    00000289: 	movq	%r13, %rsi
    0000028c: 	movq	%rbp, %rdi
    0000028f: 	callq	_Z15TestSearchArrayIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEPFbS6_S6_iEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 655
    00000294: 	movq	0x20(%rsp), %rdi
    00000299: 	cmpq	0x10(%rsp), %rdi
    0000029e: 	je	.Ltmp4021 # Offset: 670
    000002a0: 	movq	0x30(%rsp), %rax
    000002a5: 	leaq	0x1(%rax), %rsi
    000002a9: 	callq	_ZdlPvm@PLT # Offset: 681
.Ltmp4021:
    000002ae: 	movq	0x48(%rsp), %rax
    000002b3: 	subq	%fs:0x28, %rax
    000002bc: 	jne	.Ltmp4022 # Offset: 700
    000002be: 	addq	$0x58, %rsp
    000002c2: 	popq	%rbx
    000002c3: 	popq	%rbp
    000002c4: 	popq	%r12
    000002c6: 	popq	%r13
    000002c8: 	popq	%r14
    000002ca: 	popq	%r15
    000002cc: 	retq # Offset: 716
.Ltmp4012:
    000002cd: 	testq	%r12, %r12
    000002d0: 	je	.Ltmp4013 # Offset: 720
    000002d6: 	movl	$0x1, %edx
    000002db: 	jmp	.Ltmp4023 # Offset: 731
.Ltmp4019:
    000002e0: 	xorl	%eax, %eax
    000002e2: 	jmp	.Ltmp4024 # Offset: 738
.Ltmp4022:
    000002e7: 	callq	__stack_chk_fail@PLT # Offset: 743
    000002ec: 	endbr64
.Ltmp4027:
    000002f0: 	movq	%rax, %rbp
    000002f3: 	jmp	.Ltmp4025 # Offset: 755
    000002f5: 	endbr64
    000002f9: 	movq	%rax, %rbp
    000002fc: 	jmp	.Ltmp4026 # Offset: 764
    000002fe: 	endbr64
    00000302: 	jmp	.Ltmp4027 # Offset: 770
.Ltmp4026:
    00000304: 	movq	0x20(%rsp), %rdi
    00000309: 	leaq	0x30(%rsp), %rax
    0000030e: 	cmpq	%rax, %rdi
    00000311: 	je	.Ltmp4028 # Offset: 785
.Ltmp4029:
    00000313: 	movq	0x30(%rsp), %rax
    00000318: 	leaq	0x1(%rax), %rsi
    0000031c: 	callq	_ZdlPvm@PLT # Offset: 796
.Ltmp4028:
    00000321: 	movq	%rbp, %rdi
    00000324: 	callq	_Unwind_Resume@PLT # Offset: 804
.Ltmp4025:
    00000329: 	movq	0x20(%rsp), %rdi
    0000032e: 	cmpq	0x10(%rsp), %rdi
    00000333: 	jne	.Ltmp4029 # Offset: 819
    00000335: 	jmp	.Ltmp4028 # Offset: 821
DWARF CFI Instructions:
    <empty>
End of Function "_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEPFbS6_S6_iEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z16TestOneContainerIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEvT_S7_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 415
  State       : disassembled
  Address     : 0x22650
  Size        : 0x4de
  MaxSize     : 0x4e0
  Offset      : 0x22650
  Section     : .text
  Orc Section : .local.text._Z16TestOneContainerIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEvT_S7_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0414:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdx, %r15
    00000009: 	leaq	DATAat0x3418f(%rip), %rdx
    00000010: 	pushq	%r14
    00000012: 	movq	%rsi, %r14
    00000015: 	movq	%rcx, %rsi
    00000018: 	pushq	%r13
    0000001a: 	movq	%rdi, %r13
    0000001d: 	pushq	%r12
    0000001f: 	movq	%rcx, %r12
    00000022: 	pushq	%rbp
    00000023: 	pushq	%rbx
    00000024: 	subq	$0x38, %rsp
    00000028: 	movq	%fs:0x28, %rax
    00000031: 	movq	%rax, 0x28(%rsp)
    00000036: 	xorl	%eax, %eax
    00000038: 	movq	%rsp, %rbp
    0000003b: 	movq	%rbp, %rdi
    0000003e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 62
    00000043: 	xorl	%r9d, %r9d
    00000046: 	movq	%rbp, %r8
    00000049: 	movq	%r15, %rdx
    0000004c: 	leaq	_Z14std_lowerboundIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiET_S7_S7_T0_(%rip), %rcx
    00000053: 	movq	%r14, %rsi
    00000056: 	movq	%r13, %rdi
    00000059: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEPFS6_S6_S6_iEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 89
    0000005e: 	movq	(%rsp), %rdi
    00000062: 	leaq	0x10(%rsp), %rbx
    00000067: 	cmpq	%rbx, %rdi
    0000006a: 	je	.Ltmp4030 # Offset: 106
    0000006c: 	movq	0x10(%rsp), %rax
    00000071: 	leaq	0x1(%rax), %rsi
    00000075: 	callq	_ZdlPvm@PLT # Offset: 117
.Ltmp4030:
    0000007a: 	leaq	DATAat0x341a1(%rip), %rdx
    00000081: 	movq	%r12, %rsi
    00000084: 	movq	%rbp, %rdi
    00000087: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 135
    0000008c: 	xorl	%r9d, %r9d
    0000008f: 	movq	%rbp, %r8
    00000092: 	movq	%r15, %rdx
    00000095: 	leaq	_Z12lower_bound1IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiET_S7_S7_T0_(%rip), %rcx
    0000009c: 	movq	%r14, %rsi
    0000009f: 	movq	%r13, %rdi
    000000a2: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEPFS6_S6_S6_iEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 162
    000000a7: 	movq	(%rsp), %rdi
    000000ab: 	cmpq	%rbx, %rdi
    000000ae: 	je	.Ltmp4031 # Offset: 174
    000000b0: 	movq	0x10(%rsp), %rax
    000000b5: 	leaq	0x1(%rax), %rsi
    000000b9: 	callq	_ZdlPvm@PLT # Offset: 185
.Ltmp4031:
    000000be: 	leaq	DATAat0x341af(%rip), %rdx
    000000c5: 	movq	%r12, %rsi
    000000c8: 	movq	%rbp, %rdi
    000000cb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 203
    000000d0: 	xorl	%r9d, %r9d
    000000d3: 	movq	%rbp, %r8
    000000d6: 	movq	%r15, %rdx
    000000d9: 	leaq	_Z12lower_bound2IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiET_S7_S7_T0_(%rip), %rcx
    000000e0: 	movq	%r14, %rsi
    000000e3: 	movq	%r13, %rdi
    000000e6: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEPFS6_S6_S6_iEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 230
    000000eb: 	movq	(%rsp), %rdi
    000000ef: 	cmpq	%rbx, %rdi
    000000f2: 	je	.Ltmp4032 # Offset: 242
    000000f4: 	movq	0x10(%rsp), %rax
    000000f9: 	leaq	0x1(%rax), %rsi
    000000fd: 	callq	_ZdlPvm@PLT # Offset: 253
.Ltmp4032:
    00000102: 	leaq	DATAat0x341bd(%rip), %rdx
    00000109: 	movq	%r12, %rsi
    0000010c: 	movq	%rbp, %rdi
    0000010f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 271
    00000114: 	xorl	%r9d, %r9d
    00000117: 	movq	%rbp, %r8
    0000011a: 	movq	%r15, %rdx
    0000011d: 	leaq	_Z17lower_bound_recurIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiET_S7_S7_T0_(%rip), %rcx
    00000124: 	movq	%r14, %rsi
    00000127: 	movq	%r13, %rdi
    0000012a: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEPFS6_S6_S6_iEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 298
    0000012f: 	movq	(%rsp), %rdi
    00000133: 	cmpq	%rbx, %rdi
    00000136: 	je	.Ltmp4033 # Offset: 310
    00000138: 	movq	0x10(%rsp), %rax
    0000013d: 	leaq	0x1(%rax), %rsi
    00000141: 	callq	_ZdlPvm@PLT # Offset: 321
.Ltmp4033:
    00000146: 	leaq	DATAat0x341d4(%rip), %rdx
    0000014d: 	movq	%r12, %rsi
    00000150: 	movq	%rbp, %rdi
    00000153: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 339
    00000158: 	movq	%rbp, %r8
    0000015b: 	movq	%r15, %rdx
    0000015e: 	movq	%r14, %rsi
    00000161: 	movl	$0x1, %r9d
    00000167: 	leaq	_Z14std_upperboundIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiET_S7_S7_T0_(%rip), %rcx
    0000016e: 	movq	%r13, %rdi
    00000171: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEPFS6_S6_S6_iEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 369
    00000176: 	movq	(%rsp), %rdi
    0000017a: 	cmpq	%rbx, %rdi
    0000017d: 	je	.Ltmp4034 # Offset: 381
    0000017f: 	movq	0x10(%rsp), %rax
    00000184: 	leaq	0x1(%rax), %rsi
    00000188: 	callq	_ZdlPvm@PLT # Offset: 392
.Ltmp4034:
    0000018d: 	leaq	DATAat0x341e6(%rip), %rdx
    00000194: 	movq	%r12, %rsi
    00000197: 	movq	%rbp, %rdi
    0000019a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 410
    0000019f: 	movq	%rbp, %r8
    000001a2: 	movq	%r15, %rdx
    000001a5: 	movq	%r14, %rsi
    000001a8: 	movl	$0x1, %r9d
    000001ae: 	leaq	_Z12upper_bound1IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiET_S7_S7_T0_(%rip), %rcx
    000001b5: 	movq	%r13, %rdi
    000001b8: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEPFS6_S6_S6_iEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 440
    000001bd: 	movq	(%rsp), %rdi
    000001c1: 	cmpq	%rbx, %rdi
    000001c4: 	je	.Ltmp4035 # Offset: 452
    000001c6: 	movq	0x10(%rsp), %rax
    000001cb: 	leaq	0x1(%rax), %rsi
    000001cf: 	callq	_ZdlPvm@PLT # Offset: 463
.Ltmp4035:
    000001d4: 	leaq	DATAat0x341f4(%rip), %rdx
    000001db: 	movq	%r12, %rsi
    000001de: 	movq	%rbp, %rdi
    000001e1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 481
    000001e6: 	movq	%rbp, %r8
    000001e9: 	movq	%r15, %rdx
    000001ec: 	movq	%r14, %rsi
    000001ef: 	movl	$0x1, %r9d
    000001f5: 	leaq	_Z12upper_bound2IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiET_S7_S7_T0_(%rip), %rcx
    000001fc: 	movq	%r13, %rdi
    000001ff: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEPFS6_S6_S6_iEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 511
    00000204: 	movq	(%rsp), %rdi
    00000208: 	cmpq	%rbx, %rdi
    0000020b: 	je	.Ltmp4036 # Offset: 523
    0000020d: 	movq	0x10(%rsp), %rax
    00000212: 	leaq	0x1(%rax), %rsi
    00000216: 	callq	_ZdlPvm@PLT # Offset: 534
.Ltmp4036:
    0000021b: 	leaq	DATAat0x34202(%rip), %rdx
    00000222: 	movq	%r12, %rsi
    00000225: 	movq	%rbp, %rdi
    00000228: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 552
    0000022d: 	movq	%rbp, %r8
    00000230: 	movq	%r15, %rdx
    00000233: 	movq	%r14, %rsi
    00000236: 	movl	$0x1, %r9d
    0000023c: 	leaq	_Z17upper_bound_recurIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiET_S7_S7_T0_(%rip), %rcx
    00000243: 	movq	%r13, %rdi
    00000246: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEPFS6_S6_S6_iEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 582
    0000024b: 	movq	(%rsp), %rdi
    0000024f: 	cmpq	%rbx, %rdi
    00000252: 	je	.Ltmp4037 # Offset: 594
    00000254: 	movq	0x10(%rsp), %rax
    00000259: 	leaq	0x1(%rax), %rsi
    0000025d: 	callq	_ZdlPvm@PLT # Offset: 605
.Ltmp4037:
    00000262: 	leaq	DATAat0x34219(%rip), %rdx
    00000269: 	movq	%r12, %rsi
    0000026c: 	movq	%rbp, %rdi
    0000026f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 623
    00000274: 	xorl	%r9d, %r9d
    00000277: 	movq	%rbp, %r8
    0000027a: 	movq	%r15, %rdx
    0000027d: 	leaq	_Z16std_binarysearchIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEbT_S7_T0_(%rip), %rcx
    00000284: 	movq	%r14, %rsi
    00000287: 	movq	%r13, %rdi
    0000028a: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEPFbS6_S6_iEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 650
    0000028f: 	movq	(%rsp), %rdi
    00000293: 	cmpq	%rbx, %rdi
    00000296: 	je	.Ltmp4038 # Offset: 662
    00000298: 	movq	0x10(%rsp), %rax
    0000029d: 	leaq	0x1(%rax), %rsi
    000002a1: 	callq	_ZdlPvm@PLT # Offset: 673
.Ltmp4038:
    000002a6: 	leaq	DATAat0x3422d(%rip), %rdx
    000002ad: 	movq	%r12, %rsi
    000002b0: 	movq	%rbp, %rdi
    000002b3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 691
    000002b8: 	xorl	%r9d, %r9d
    000002bb: 	movq	%rbp, %r8
    000002be: 	movq	%r15, %rdx
    000002c1: 	leaq	_Z13binarysearch1IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEbT_S7_T0_(%rip), %rcx
    000002c8: 	movq	%r14, %rsi
    000002cb: 	movq	%r13, %rdi
    000002ce: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEPFbS6_S6_iEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 718
    000002d3: 	movq	(%rsp), %rdi
    000002d7: 	cmpq	%rbx, %rdi
    000002da: 	je	.Ltmp4039 # Offset: 730
    000002dc: 	movq	0x10(%rsp), %rax
    000002e1: 	leaq	0x1(%rax), %rsi
    000002e5: 	callq	_ZdlPvm@PLT # Offset: 741
.Ltmp4039:
    000002ea: 	leaq	DATAat0x3423d(%rip), %rdx
    000002f1: 	movq	%r12, %rsi
    000002f4: 	movq	%rbp, %rdi
    000002f7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 759
    000002fc: 	xorl	%r9d, %r9d
    000002ff: 	movq	%rbp, %r8
    00000302: 	movq	%r15, %rdx
    00000305: 	leaq	_Z13binarysearch2IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEbT_S7_T0_(%rip), %rcx
    0000030c: 	movq	%r14, %rsi
    0000030f: 	movq	%r13, %rdi
    00000312: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEPFbS6_S6_iEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 786
    00000317: 	movq	(%rsp), %rdi
    0000031b: 	cmpq	%rbx, %rdi
    0000031e: 	je	.Ltmp4040 # Offset: 798
    00000320: 	movq	0x10(%rsp), %rax
    00000325: 	leaq	0x1(%rax), %rsi
    00000329: 	callq	_ZdlPvm@PLT # Offset: 809
.Ltmp4040:
    0000032e: 	leaq	DATAat0x3424d(%rip), %rdx
    00000335: 	movq	%r12, %rsi
    00000338: 	movq	%rbp, %rdi
    0000033b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 827
    00000340: 	xorl	%r9d, %r9d
    00000343: 	movq	%rbp, %r8
    00000346: 	movq	%r15, %rdx
    00000349: 	leaq	_Z13binarysearch3IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEbT_S7_T0_(%rip), %rcx
    00000350: 	movq	%r14, %rsi
    00000353: 	movq	%r13, %rdi
    00000356: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEPFbS6_S6_iEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 854
    0000035b: 	movq	(%rsp), %rdi
    0000035f: 	cmpq	%rbx, %rdi
    00000362: 	je	.Ltmp4041 # Offset: 866
    00000364: 	movq	0x10(%rsp), %rax
    00000369: 	leaq	0x1(%rax), %rsi
    0000036d: 	callq	_ZdlPvm@PLT # Offset: 877
.Ltmp4041:
    00000372: 	leaq	DATAat0x3425d(%rip), %rdx
    00000379: 	movq	%r12, %rsi
    0000037c: 	movq	%rbp, %rdi
    0000037f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 895
    00000384: 	xorl	%r9d, %r9d
    00000387: 	movq	%rbp, %r8
    0000038a: 	movq	%r15, %rdx
    0000038d: 	leaq	_Z13binarysearch4IN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEbT_S7_T0_(%rip), %rcx
    00000394: 	movq	%r14, %rsi
    00000397: 	movq	%r13, %rdi
    0000039a: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEPFbS6_S6_iEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 922
    0000039f: 	movq	(%rsp), %rdi
    000003a3: 	cmpq	%rbx, %rdi
    000003a6: 	je	.Ltmp4042 # Offset: 934
    000003a8: 	movq	0x10(%rsp), %rax
    000003ad: 	leaq	0x1(%rax), %rsi
    000003b1: 	callq	_ZdlPvm@PLT # Offset: 945
.Ltmp4042:
    000003b6: 	leaq	DATAat0x3426d(%rip), %rdx
    000003bd: 	movq	%r12, %rsi
    000003c0: 	movq	%rbp, %rdi
    000003c3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 963
    000003c8: 	xorl	%r9d, %r9d
    000003cb: 	movq	%rbp, %r8
    000003ce: 	movq	%r15, %rdx
    000003d1: 	leaq	_Z18binarysearch_recurIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEbT_S7_T0_(%rip), %rcx
    000003d8: 	movq	%r14, %rsi
    000003db: 	movq	%r13, %rdi
    000003de: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEPFbS6_S6_iEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 990
    000003e3: 	movq	(%rsp), %rdi
    000003e7: 	cmpq	%rbx, %rdi
    000003ea: 	je	.Ltmp4043 # Offset: 1002
    000003ec: 	movq	0x10(%rsp), %rax
    000003f1: 	leaq	0x1(%rax), %rsi
    000003f5: 	callq	_ZdlPvm@PLT # Offset: 1013
.Ltmp4043:
    000003fa: 	movq	%rbp, %rdi
    000003fd: 	leaq	DATAat0x34286(%rip), %rdx
    00000404: 	movq	%r12, %rsi
    00000407: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1031
    0000040c: 	movq	%rbp, %rdi
    0000040f: 	callq	_Z9summarizeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1039
    00000414: 	movq	(%rsp), %rdi
    00000418: 	cmpq	%rbx, %rdi
    0000041b: 	je	.Ltmp4044 # Offset: 1051
    0000041d: 	movq	0x10(%rsp), %rax
    00000422: 	leaq	0x1(%rax), %rsi
    00000426: 	callq	_ZdlPvm@PLT # Offset: 1062
.Ltmp4044:
    0000042b: 	movq	0x28(%rsp), %rax
    00000430: 	subq	%fs:0x28, %rax
    00000439: 	jne	.Ltmp4045 # Offset: 1081
    0000043b: 	addq	$0x38, %rsp
    0000043f: 	popq	%rbx
    00000440: 	popq	%rbp
    00000441: 	popq	%r12
    00000443: 	popq	%r13
    00000445: 	popq	%r14
    00000447: 	popq	%r15
    00000449: 	retq # Offset: 1097
.Ltmp4045:
    0000044a: 	callq	__stack_chk_fail@PLT # Offset: 1098
    0000044f: 	endbr64
.Ltmp4047:
    00000453: 	movq	%rax, %rbp
    00000456: 	jmp	.Ltmp4046 # Offset: 1110
    00000458: 	endbr64
    0000045c: 	jmp	.Ltmp4047 # Offset: 1116
    0000045e: 	endbr64
    00000462: 	jmp	.Ltmp4047 # Offset: 1122
    00000464: 	endbr64
    00000468: 	jmp	.Ltmp4047 # Offset: 1128
    0000046a: 	endbr64
    0000046e: 	jmp	.Ltmp4047 # Offset: 1134
    00000470: 	endbr64
    00000474: 	jmp	.Ltmp4047 # Offset: 1140
    00000476: 	endbr64
    0000047a: 	jmp	.Ltmp4047 # Offset: 1146
.Ltmp4046:
    0000047c: 	movq	(%rsp), %rdi
    00000480: 	cmpq	%rbx, %rdi
    00000483: 	je	.Ltmp4048 # Offset: 1155
.Ltmp4050:
    00000485: 	movq	0x10(%rsp), %rax
    0000048a: 	leaq	0x1(%rax), %rsi
    0000048e: 	callq	_ZdlPvm@PLT # Offset: 1166
.Ltmp4048:
    00000493: 	movq	%rbp, %rdi
    00000496: 	callq	_Unwind_Resume@PLT # Offset: 1174
    0000049b: 	endbr64
    0000049f: 	jmp	.Ltmp4047 # Offset: 1183
    000004a1: 	endbr64
    000004a5: 	jmp	.Ltmp4047 # Offset: 1189
    000004a7: 	endbr64
    000004ab: 	jmp	.Ltmp4047 # Offset: 1195
    000004ad: 	endbr64
    000004b1: 	jmp	.Ltmp4047 # Offset: 1201
    000004b3: 	endbr64
    000004b7: 	jmp	.Ltmp4047 # Offset: 1207
    000004b9: 	endbr64
    000004bd: 	movq	%rax, %rbp
    000004c0: 	jmp	.Ltmp4049 # Offset: 1216
    000004c2: 	endbr64
    000004c6: 	jmp	.Ltmp4047 # Offset: 1222
    000004c8: 	endbr64
    000004cc: 	jmp	.Ltmp4047 # Offset: 1228
.Ltmp4049:
    000004ce: 	movq	(%rsp), %rdi
    000004d2: 	leaq	0x10(%rsp), %rax
    000004d7: 	cmpq	%rax, %rdi
    000004da: 	jne	.Ltmp4050 # Offset: 1242
    000004dc: 	jmp	.Ltmp4048 # Offset: 1244
DWARF CFI Instructions:
    <empty>
End of Function "_Z16TestOneContainerIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEvT_S7_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z24binarysearch_recur_innerIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEilEbT_T0_T1_" after disassembly {
  Number      : 416
  State       : disassembled
  Address     : 0x22b30
  Size        : 0x4d
  MaxSize     : 0x50
  Offset      : 0x22b30
  Section     : .text
  Orc Section : .local.text._Z24binarysearch_recur_innerIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEilEbT_T0_T1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0415:
    00000000: 	endbr64
.Ltmp4054:
    00000004: 	testq	%rdx, %rdx
    00000007: 	je	.Ltmp4051 # Offset: 7
    00000009: 	movq	%rdx, %rax
    0000000c: 	shrq	$0x3f, %rax
    00000010: 	addq	%rdx, %rax
    00000013: 	sarq	%rax
    00000016: 	leaq	(%rdi,%rax,4), %rcx
    0000001a: 	cmpl	%esi, (%rcx)
    0000001c: 	jl	.Ltmp4052 # Offset: 28
    0000001e: 	jg	.Ltmp4053 # Offset: 30
    00000020: 	movl	$0x1, %eax
    00000025: 	retq # Offset: 37
    00000026: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp4051:
    00000030: 	xorl	%eax, %eax
    00000032: 	retq # Offset: 50
    00000033: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4052:
    00000038: 	addq	$0x1, %rax
    0000003c: 	leaq	0x4(%rcx), %rdi
    00000040: 	subq	%rax, %rdx
    00000043: 	jmp	.Ltmp4054 # Offset: 67
    00000045: 	nopl	(%rax) # Size: 3
.Ltmp4053:
    00000048: 	movq	%rax, %rdx
    0000004b: 	jmp	.Ltmp4054 # Offset: 75
DWARF CFI Instructions:
    <empty>
End of Function "_Z24binarysearch_recur_innerIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEilEbT_T0_T1_"

Binary Function "_Z18binarysearch_recurIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEbT_S7_T0_" after disassembly {
  Number      : 417
  State       : disassembled
  Address     : 0x22b80
  Size        : 0xce
  MaxSize     : 0xd0
  Offset      : 0x22b80
  Section     : .text
  Orc Section : .local.text._Z18binarysearch_recurIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEbT_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0416:
    00000000: 	endbr64
    00000004: 	movl	%edx, %r8d
    00000007: 	cmpq	%rdi, %rsi
    0000000a: 	je	.Ltmp4055 # Offset: 10
    0000000c: 	subq	%rdi, %rsi
    0000000f: 	movq	%rsi, %rdx
    00000012: 	shrq	$0x3f, %rsi
    00000016: 	sarq	$0x2, %rdx
    0000001a: 	addq	%rdx, %rsi
    0000001d: 	sarq	%rsi
    00000020: 	leaq	(%rdi,%rsi,4), %rax
    00000024: 	cmpl	(%rax), %r8d
    00000027: 	jg	.Ltmp4056 # Offset: 39
    00000029: 	movl	$0x1, %eax
    0000002e: 	jl	.Ltmp4057 # Offset: 46
.Ltmp4059:
    00000030: 	retq # Offset: 48
    00000031: 	nopl	(%rax) # Size: 7
.Ltmp4055:
    00000038: 	xorl	%eax, %eax
    0000003a: 	retq # Offset: 58
    0000003b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4056:
    00000040: 	addq	$0x1, %rsi
    00000044: 	leaq	0x4(%rax), %rdi
    00000048: 	subq	%rsi, %rdx
    0000004b: 	je	.Ltmp4055 # Offset: 75
    0000004d: 	movq	%rdx, %r9
    00000050: 	shrq	$0x3f, %r9
    00000054: 	addq	%rdx, %r9
    00000057: 	sarq	%r9
    0000005a: 	leaq	(%rdi,%r9,4), %rax
    0000005e: 	cmpl	(%rax), %r8d
    00000061: 	jg	.Ltmp4058 # Offset: 97
    00000063: 	movl	$0x1, %eax
    00000068: 	jge	.Ltmp4059 # Offset: 104
.Ltmp4061:
    0000006a: 	movq	%r9, %rdx
    0000006d: 	movl	%r8d, %esi
    00000070: 	jmp	_Z24binarysearch_recur_innerIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEilEbT_T0_T1_ # TAILCALL  # Offset: 112
    00000075: 	nopl	(%rax) # Size: 3
.Ltmp4057:
    00000078: 	testq	%rsi, %rsi
    0000007b: 	je	.Ltmp4055 # Offset: 123
    0000007d: 	testq	%rdx, %rdx
    00000080: 	leaq	0x3(%rdx), %rcx
    00000084: 	cmovsq	%rcx, %rdx
    00000088: 	movq	%rdx, %r9
    0000008b: 	andq	$-0x4, %rdx
    0000008f: 	addq	%rdi, %rdx
    00000092: 	sarq	$0x2, %r9
    00000096: 	cmpl	(%rdx), %r8d
    00000099: 	jg	.Ltmp4060 # Offset: 153
    0000009b: 	jl	.Ltmp4061 # Offset: 155
    0000009d: 	retq # Offset: 157
    0000009e: 	nop # Size: 2
.Ltmp4058:
    000000a0: 	addq	$0x1, %r9
    000000a4: 	leaq	0x4(%rax), %rdi
    000000a8: 	movl	%r8d, %esi
    000000ab: 	subq	%r9, %rdx
    000000ae: 	jmp	_Z24binarysearch_recur_innerIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEilEbT_T0_T1_ # TAILCALL  # Offset: 174
    000000b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4060:
    000000b8: 	leaq	0x4(%rdx), %rdi
    000000bc: 	addq	$0x1, %r9
    000000c0: 	movq	%rsi, %rdx
    000000c3: 	movl	%r8d, %esi
    000000c6: 	subq	%r9, %rdx
    000000c9: 	jmp	_Z24binarysearch_recur_innerIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEilEbT_T0_T1_ # TAILCALL  # Offset: 201
DWARF CFI Instructions:
    <empty>
End of Function "_Z18binarysearch_recurIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEbT_S7_T0_"

Binary Function "_ZNSt11_Deque_baseIiSaIiEE17_M_initialize_mapEm" after disassembly {
  Number      : 418
  State       : disassembled
  Address     : 0x22c50
  Size        : 0x17a
  MaxSize     : 0x180
  Offset      : 0x22c50
  Section     : .text
  Orc Section : .local.text._ZNSt11_Deque_baseIiSaIiEE17_M_initialize_mapEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0417:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	pushq	%r14
    00000009: 	shrq	$0x7, %rax
    0000000d: 	pushq	%r13
    0000000f: 	movq	%rsi, %r13
    00000012: 	pushq	%r12
    00000014: 	movq	%rdi, %r12
    00000017: 	pushq	%rbp
    00000018: 	pushq	%rbx
    00000019: 	leaq	0x1(%rax), %rbx
    0000001d: 	addq	$0x3, %rax
    00000021: 	cmpq	$0x8, %rax
    00000025: 	ja	.Ltmp4062 # Offset: 37
    0000002b: 	movl	$0x8, %eax
    00000030: 	movl	$0x40, %edi
.Ltmp4065:
    00000035: 	movq	%rax, 0x8(%r12)
    0000003a: 	callq	_Znwm@PLT # Offset: 58
    0000003f: 	movq	0x8(%r12), %rdx
    00000044: 	movq	%rax, (%r12)
    00000048: 	subq	%rbx, %rdx
    0000004b: 	shrq	%rdx
    0000004e: 	leaq	(%rax,%rdx,8), %r14
    00000052: 	leaq	(%r14,%rbx,8), %rbp
    00000056: 	cmpq	%rbp, %r14
    00000059: 	jae	.Ltmp4063 # Offset: 89
    0000005b: 	movq	%r14, %rbx
    0000005e: 	nop # Size: 2
.Ltmp4064:
    00000060: 	movl	$0x200, %edi
    00000065: 	callq	_Znwm@PLT # Offset: 101
    0000006a: 	movq	%rax, (%rbx)
    0000006d: 	addq	$0x8, %rbx
    00000071: 	cmpq	%rbx, %rbp
    00000074: 	ja	.Ltmp4064 # Offset: 116
.Ltmp4063:
    00000076: 	movq	(%r14), %xmm0
    0000007b: 	movq	(%r14), %rcx
    0000007e: 	andl	$0x7f, %r13d
    00000082: 	subq	$0x8, %rbp
    00000086: 	movq	(%rbp), %rax
    0000008a: 	movq	%r14, %xmm1
    0000008f: 	movq	%rbp, %xmm3
    00000094: 	popq	%rbx
    00000095: 	punpcklqdq	%xmm0, %xmm0
    00000099: 	addq	$0x200, %rcx
    000000a0: 	popq	%rbp
    000000a1: 	movups	%xmm0, 0x10(%r12)
    000000a7: 	movq	%rcx, %xmm0
    000000ac: 	leaq	(%rax,%r13,4), %rcx
    000000b0: 	movq	%rax, %xmm2
    000000b5: 	punpcklqdq	%xmm1, %xmm0
    000000b9: 	addq	$0x200, %rax
    000000bf: 	movups	%xmm0, 0x20(%r12)
    000000c5: 	movq	%rcx, %xmm0
    000000ca: 	punpcklqdq	%xmm2, %xmm0
    000000ce: 	movups	%xmm0, 0x30(%r12)
    000000d4: 	movq	%rax, %xmm0
    000000d9: 	punpcklqdq	%xmm3, %xmm0
    000000dd: 	movups	%xmm0, 0x40(%r12)
    000000e3: 	popq	%r12
    000000e5: 	popq	%r13
    000000e7: 	popq	%r14
    000000e9: 	retq # Offset: 233
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4062:
    000000f0: 	leaq	(,%rax,8), %rdi
    000000f8: 	jmp	.Ltmp4065 # Offset: 248
    000000fd: 	endbr64
    00000101: 	movq	%rax, %rdi
    00000104: 	callq	__cxa_begin_catch@PLT # Offset: 260
.Ltmp4067:
    00000109: 	cmpq	%r14, %rbx
    0000010c: 	jbe	.Ltmp4066 # Offset: 268
    0000010e: 	movq	(%r14), %rdi
    00000111: 	movl	$0x200, %esi
    00000116: 	addq	$0x8, %r14
    0000011a: 	callq	_ZdlPvm@PLT # Offset: 282
    0000011f: 	jmp	.Ltmp4067 # Offset: 287
.Ltmp4066:
    00000121: 	callq	__cxa_rethrow@PLT # Offset: 289
    00000126: 	endbr64
    0000012a: 	movq	%rax, %rbp
    0000012d: 	callq	__cxa_end_catch@PLT # Offset: 301
    00000132: 	movq	%rbp, %rdi
    00000135: 	callq	__cxa_begin_catch@PLT # Offset: 309
    0000013a: 	movq	0x8(%r12), %rax
    0000013f: 	movq	(%r12), %rdi
    00000143: 	leaq	(,%rax,8), %rsi
    0000014b: 	callq	_ZdlPvm@PLT # Offset: 331
    00000150: 	movq	$0x0, (%r12)
    00000158: 	movq	$0x0, 0x8(%r12)
    00000161: 	callq	__cxa_rethrow@PLT # Offset: 353
    00000166: 	endbr64
    0000016a: 	movq	%rax, %rbp
    0000016d: 	callq	__cxa_end_catch@PLT # Offset: 365
    00000172: 	movq	%rbp, %rdi
    00000175: 	callq	_Unwind_Resume@PLT # Offset: 373
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt11_Deque_baseIiSaIiEE17_M_initialize_mapEm"

Binary Function "_Z15TestSearchArrayISt15_Deque_iteratorIiRiPiEPFS3_S3_S3_iEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 419
  State       : disassembled
  Address     : 0x22dd0
  Size        : 0x356
  MaxSize     : 0x360
  Offset      : 0x22dd0
  Section     : .text
  Orc Section : .local.text._Z15TestSearchArrayISt15_Deque_iteratorIiRiPiEPFS3_S3_S3_iEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0418:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rdi, %r12
    0000000f: 	movl	$0x1000, %edi
    00000014: 	pushq	%rbp
    00000015: 	pushq	%rbx
    00000016: 	movq	%rsi, %rbx
    00000019: 	subq	$0xa8, %rsp
    00000020: 	movq	%r8, 0x28(%rsp)
    00000025: 	movq	%rdx, 0x20(%rsp)
    0000002a: 	movq	%rcx, 0x8(%rsp)
    0000002f: 	movb	%r9b, 0x1f(%rsp)
    00000034: 	movq	%fs:0x28, %rax
    0000003d: 	movq	%rax, 0x98(%rsp)
    00000045: 	xorl	%eax, %eax
    00000047: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    0000004e: 	callq	_Znwm@PLT # Offset: 78
    00000053: 	movq	%rax, %rsi
    00000056: 	movq	%rax, (%rsp)
    0000005a: 	addq	$0x4, %rax
    0000005e: 	leaq	0x1000(%rsi), %r8
    00000065: 	movl	$0x0, -0x4(%rax)
    0000006c: 	cmpq	%r8, %rax
    0000006f: 	je	.Ltmp4068 # Offset: 111
    00000071: 	movq	%rsi, %rdi
    00000074: 	movq	$0x0, 0x4(%rsi)
    0000007c: 	movq	$0x0, 0xff8(%rsi)
    00000087: 	addq	$0xc, %rdi
    0000008b: 	andq	$-0x8, %rdi
    0000008f: 	subq	%rdi, %rax
    00000092: 	movq	%rax, %rcx
    00000095: 	xorl	%eax, %eax
    00000097: 	addl	$0xffc, %ecx
    0000009d: 	shrl	$0x3, %ecx
    000000a0: 	rep		stosq	%rax, %es:(%rdi)
.Ltmp4068:
    000000a3: 	movq	(%r12), %r11
    000000a7: 	movq	0x18(%r12), %r10
    000000ac: 	movabsq	$0x5851f42d4c957f2d, %r9
    000000b6: 	movabsq	$0x14057b7ef767814f, %rdi
    000000c0: 	movq	(%rsp), %rcx
    000000c4: 	movq	0x20(%rsp), %rbp
    000000c9: 	movq	%r11, %rsi
    000000cc: 	subq	0x8(%r12), %rsi
    000000d1: 	sarq	$0x2, %rsi
    000000d5: 	jmp	.Ltmp4069 # Offset: 213
    000000d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4072:
    000000e0: 	cmpq	$0x7f, %rax
    000000e4: 	jg	.Ltmp4070 # Offset: 228
    000000ea: 	leaq	(%r11,%rdx,4), %rax
    000000ee: 	addq	$0x4, %rcx
    000000f2: 	movl	(%rax), %eax
    000000f4: 	movl	%eax, -0x4(%rcx)
    000000f7: 	cmpq	%rcx, %r8
    000000fa: 	je	.Ltmp4071 # Offset: 250
.Ltmp4069:
    000000fc: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    00000103: 	imulq	%r9, %rax
    00000107: 	addq	%rdi, %rax
    0000010a: 	movq	%rax, %rdx
    0000010d: 	movq	%rax, %r13
    00000110: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000117: 	shrq	$0x14, %rdx
    0000011b: 	shlq	$0x17, %r13
    0000011f: 	xorq	%r13, %rdx
    00000122: 	xorq	%rdx, %rax
    00000125: 	xorl	%edx, %edx
    00000127: 	divq	%rbp
    0000012a: 	movq	%rdx, %rax
    0000012d: 	addq	%rsi, %rax
    00000130: 	jns	.Ltmp4072 # Offset: 304
    00000132: 	movq	%rax, %rdx
    00000135: 	notq	%rdx
    00000138: 	shrq	$0x7, %rdx
    0000013c: 	notq	%rdx
.Ltmp4079:
    0000013f: 	movq	%rdx, %r13
    00000142: 	movq	(%r10,%rdx,8), %rdx
    00000146: 	addq	$0x4, %rcx
    0000014a: 	shlq	$0x7, %r13
    0000014e: 	subq	%r13, %rax
    00000151: 	leaq	(%rdx,%rax,4), %rax
    00000155: 	movl	(%rax), %eax
    00000157: 	movl	%eax, -0x4(%rcx)
    0000015a: 	cmpq	%rcx, %r8
    0000015d: 	jne	.Ltmp4069 # Offset: 349
.Ltmp4071:
    0000015f: 	callq	clock@PLT # Offset: 351
    00000164: 	movb	$0x0, 0x1e(%rsp)
    00000169: 	xorl	%ebp, %ebp
    0000016b: 	leaq	0x30(%rsp), %r15
    00000170: 	movq	%rax, start_time(%rip)
    00000177: 	leaq	0x70(%rsp), %r14
    0000017c: 	leaq	0x50(%rsp), %r13
.Ltmp4076:
    00000181: 	leaq	0xc8(%rbp), %rax
    00000188: 	cmpb	$0x0, 0x1f(%rsp)
    0000018d: 	movq	%rax, 0x10(%rsp)
    00000192: 	jne	.Ltmp4073 # Offset: 402
    00000198: 	nopl	(%rax,%rax) # Size: 8
.Ltmp4074:
    000001a0: 	movq	(%rsp), %rsi
    000001a4: 	movq	%rbp, %rax
    000001a7: 	movdqu	(%rbx), %xmm2
    000001ab: 	addq	$0x1, %rbp
    000001af: 	movdqu	0x10(%rbx), %xmm3
    000001b4: 	andl	$0x3ff, %eax
    000001b9: 	movq	%r14, %rdx
    000001bc: 	movq	%r15, %rdi
    000001bf: 	movdqu	(%r12), %xmm4
    000001c5: 	movl	(%rsi,%rax,4), %ecx
    000001c8: 	movaps	%xmm2, 0x70(%rsp)
    000001cd: 	movq	%r13, %rsi
    000001d0: 	movdqu	0x10(%r12), %xmm5
    000001d7: 	movq	0x8(%rsp), %rax
    000001dc: 	movaps	%xmm3, 0x80(%rsp)
    000001e4: 	movaps	%xmm4, 0x50(%rsp)
    000001e9: 	movaps	%xmm5, 0x60(%rsp)
    000001ee: 	callq	*%rax # Offset: 494
    000001f0: 	movq	0x30(%rsp), %rax
    000001f5: 	cmpq	%rax, (%rbx)
    000001f8: 	movl	$0x1, %edi
    000001fd: 	movzbl	0x1e(%rsp), %eax
    00000202: 	cmovel	%edi, %eax
    00000205: 	movb	%al, 0x1e(%rsp)
    00000209: 	cmpq	%rbp, 0x10(%rsp)
    0000020e: 	jne	.Ltmp4074 # Offset: 526
.Ltmp4080:
    00000210: 	callq	clock@PLT # Offset: 528
    00000215: 	movsd	gMinimumTimeTarget(%rip), %xmm1
    0000021d: 	pxor	%xmm0, %xmm0
    00000221: 	movq	%rax, end_time(%rip)
    00000228: 	subq	start_time(%rip), %rax
    0000022f: 	cvtsi2sd	%rax, %xmm0
    00000234: 	divsd	DATAat0x34410(%rip), %xmm0
    0000023c: 	comisd	%xmm0, %xmm1
    00000240: 	jbe	.Ltmp4075 # Offset: 576
    00000242: 	cmpq	$0x5f5e0ff, %rbp
    00000249: 	jbe	.Ltmp4076 # Offset: 585
.Ltmp4075:
    0000024f: 	movq	0x28(%rsp), %rdx
    00000254: 	movq	0x20(%rsp), %rdi
    00000259: 	movq	%rbp, %rsi
    0000025c: 	callq	_Z13record_resultdmmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 604
    00000261: 	cmpb	$0x0, 0x1e(%rsp)
    00000266: 	jne	.Ltmp4077 # Offset: 614
.Ltmp4081:
    0000026c: 	movq	0x98(%rsp), %rax
    00000274: 	subq	%fs:0x28, %rax
    0000027d: 	jne	.Ltmp4078 # Offset: 637
    00000283: 	movq	(%rsp), %rdi
    00000287: 	addq	$0xa8, %rsp
    0000028e: 	movl	$0x1000, %esi
    00000293: 	popq	%rbx
    00000294: 	popq	%rbp
    00000295: 	popq	%r12
    00000297: 	popq	%r13
    00000299: 	popq	%r14
    0000029b: 	popq	%r15
    0000029d: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 669
    000002a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4070:
    000002a8: 	movq	%rax, %rdx
    000002ab: 	sarq	$0x7, %rdx
    000002af: 	jmp	.Ltmp4079 # Offset: 687
    000002b4: 	nopl	(%rax) # Size: 4
.Ltmp4073:
    000002b8: 	movq	(%rsp), %rdx
    000002bc: 	movq	%rbp, %rax
    000002bf: 	movdqu	(%rbx), %xmm6
    000002c3: 	addq	$0x1, %rbp
    000002c7: 	movdqu	0x10(%rbx), %xmm7
    000002cc: 	andl	$0x3ff, %eax
    000002d1: 	movq	%r13, %rsi
    000002d4: 	movq	%r15, %rdi
    000002d7: 	movdqu	(%r12), %xmm1
    000002dd: 	movl	(%rdx,%rax,4), %ecx
    000002e0: 	movaps	%xmm6, 0x70(%rsp)
    000002e5: 	movq	%r14, %rdx
    000002e8: 	movdqu	0x10(%r12), %xmm0
    000002ef: 	movq	0x8(%rsp), %rax
    000002f4: 	movaps	%xmm7, 0x80(%rsp)
    000002fc: 	movaps	%xmm1, 0x50(%rsp)
    00000301: 	movaps	%xmm0, 0x60(%rsp)
    00000306: 	callq	*%rax # Offset: 774
    00000308: 	cmpq	0x10(%rsp), %rbp
    0000030d: 	jne	.Ltmp4073 # Offset: 781
    0000030f: 	jmp	.Ltmp4080 # Offset: 783
.Ltmp4077:
    00000314: 	movq	0x28(%rsp), %rax
    00000319: 	leaq	DATAat0x34137(%rip), %rsi
    00000320: 	movl	$0x1, %edi
    00000325: 	movq	(%rax), %rdx
    00000328: 	xorl	%eax, %eax
    0000032a: 	callq	__printf_chk@PLT # Offset: 810
    0000032f: 	jmp	.Ltmp4081 # Offset: 815
.Ltmp4078:
    00000334: 	callq	__stack_chk_fail@PLT # Offset: 820
    00000339: 	endbr64
    0000033d: 	movq	%rax, %rbp
    00000340: 	movq	(%rsp), %rdi
    00000344: 	movl	$0x1000, %esi
    00000349: 	callq	_ZdlPvm@PLT # Offset: 841
    0000034e: 	movq	%rbp, %rdi
    00000351: 	callq	_Unwind_Resume@PLT # Offset: 849
DWARF CFI Instructions:
    <empty>
End of Function "_Z15TestSearchArrayISt15_Deque_iteratorIiRiPiEPFS3_S3_S3_iEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z18quicksort2_forwardISt15_Deque_iteratorIiRiPiEEvT_S4_" after disassembly {
  Number      : 420
  State       : disassembled
  Address     : 0x23130
  Size        : 0x2be
  MaxSize     : 0x2c0
  Offset      : 0x23130
  Section     : .text
  Orc Section : .local.text._Z18quicksort2_forwardISt15_Deque_iteratorIiRiPiEEvT_S4_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0419:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdi, %r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rsi, %rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x68, %rsp
    00000018: 	movq	(%rsi), %rdi
    0000001b: 	movq	(%r13), %rbx
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x58(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	leaq	0x30(%rsp), %rax
    00000034: 	movq	%rax, 0x8(%rsp)
    00000039: 	cmpq	%rdi, %rbx
    0000003c: 	je	.Ltmp4082 # Offset: 60
.Ltmp4096:
    00000042: 	movq	0x8(%r13), %r15
    00000046: 	movq	0x10(%r13), %rsi
    0000004a: 	movq	%rbx, %xmm1
    0000004f: 	leaq	0x4(%rbx), %rax
    00000053: 	movq	0x18(%r13), %r9
    00000057: 	movq	%rax, %rdx
    0000005a: 	movq	%r15, %xmm2
    0000005f: 	movq	%rsi, %xmm0
    00000064: 	movq	%r9, %xmm3
    00000069: 	punpcklqdq	%xmm2, %xmm1
    0000006d: 	punpcklqdq	%xmm3, %xmm0
    00000071: 	cmpq	%rsi, %rax
    00000074: 	je	.Ltmp4083 # Offset: 116
.Ltmp4099:
    0000007a: 	movq	%rdx, %rax
    0000007d: 	cmpq	%rdi, %rdx
    00000080: 	je	.Ltmp4082 # Offset: 128
    00000086: 	addq	$0x4, %rax
    0000008a: 	movq	%r9, %r11
    0000008d: 	movq	%rsi, %r10
    00000090: 	movq	%rax, %rcx
    00000093: 	cmpq	%rsi, %rax
    00000096: 	je	.Ltmp4084 # Offset: 150
    0000009c: 	movl	(%rdx), %r8d
    0000009f: 	movl	(%rbx), %r14d
    000000a2: 	cmpq	%rcx, %rdi
    000000a5: 	je	.Ltmp4085 # Offset: 165
.Ltmp4100:
    000000ab: 	cmpl	%r14d, %r8d
    000000ae: 	jge	.Ltmp4086 # Offset: 174
    000000b0: 	movl	%r8d, (%rbx)
    000000b3: 	movl	%r14d, %r8d
    000000b6: 	movl	%r14d, (%rdx)
.Ltmp4086:
    000000b9: 	movl	(%rcx), %r12d
    000000bc: 	cmpl	%r12d, %r8d
    000000bf: 	jle	.Ltmp4087 # Offset: 191
    000000c1: 	movl	%r12d, (%rdx)
    000000c4: 	movl	%r8d, (%rcx)
    000000c7: 	movl	(%rdx), %r8d
    000000ca: 	movl	(%rbx), %r12d
    000000cd: 	cmpl	%r12d, %r8d
    000000d0: 	jge	.Ltmp4087 # Offset: 208
    000000d2: 	movl	%r12d, (%rdx)
    000000d5: 	movl	%r8d, (%rbx)
    000000d8: 	movl	(%rdx), %r8d
.Ltmp4087:
    000000db: 	addq	$0x4, %rcx
    000000df: 	cmpq	%r10, %rcx
    000000e2: 	je	.Ltmp4088 # Offset: 226
.Ltmp4101:
    000000e8: 	cmpq	%rcx, %rdi
    000000eb: 	je	.Ltmp4082 # Offset: 235
    000000f1: 	movq	%r9, %r14
    000000f4: 	movq	%rsi, %r12
    000000f7: 	movq	%rdx, %rbx
    000000fa: 	movl	$0x2, %ecx
    000000ff: 	movl	$0x1, %r10d
    00000105: 	jmp	.Ltmp4089 # Offset: 261
    00000107: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4093:
    00000110: 	cmpq	%rax, %rdi
    00000113: 	je	.Ltmp4090 # Offset: 275
.Ltmp4094:
    00000115: 	movl	(%rax), %edx
    00000117: 	cmpl	%r8d, %edx
    0000011a: 	jge	.Ltmp4091 # Offset: 282
    0000011c: 	movl	(%rbx), %r11d
    0000011f: 	addq	$0x4, %rbx
    00000123: 	movl	%r11d, (%rax)
    00000126: 	movl	%edx, -0x4(%rbx)
    00000129: 	cmpq	%r12, %rbx
    0000012c: 	je	.Ltmp4092 # Offset: 300
.Ltmp4097:
    00000132: 	addq	$0x1, %r10
.Ltmp4091:
    00000136: 	addq	$0x1, %rcx
    0000013a: 	addq	$0x4, %rax
.Ltmp4089:
    0000013e: 	cmpq	%rsi, %rax
    00000141: 	jne	.Ltmp4093 # Offset: 321
    00000143: 	movq	0x8(%r9), %rax
    00000147: 	addq	$0x8, %r9
    0000014b: 	leaq	0x200(%rax), %rsi
    00000152: 	cmpq	%rax, %rdi
    00000155: 	jne	.Ltmp4094 # Offset: 341
.Ltmp4090:
    00000157: 	subq	%r10, %rcx
    0000015a: 	cmpq	%rcx, %r10
    0000015d: 	jbe	.Ltmp4095 # Offset: 349
    00000163: 	movq	0x10(%rbp), %xmm0
    00000168: 	movq	%rdi, %xmm1
    0000016d: 	movq	0x8(%rsp), %rsi
    00000172: 	leaq	0x10(%rsp), %rdi
    00000177: 	movhps	0x8(%rbp), %xmm1
    0000017b: 	movq	%rbx, 0x10(%rsp)
    00000180: 	movhps	0x18(%rbp), %xmm0
    00000184: 	movq	%r15, 0x18(%rsp)
    00000189: 	movq	%r12, 0x20(%rsp)
    0000018e: 	movq	%r14, 0x28(%rsp)
    00000193: 	movaps	%xmm1, 0x30(%rsp)
    00000198: 	movaps	%xmm0, 0x40(%rsp)
    0000019d: 	callq	_Z18quicksort2_forwardISt15_Deque_iteratorIiRiPiEEvT_S4_ # Offset: 413
    000001a2: 	movq	%rbx, (%rbp)
    000001a6: 	movq	(%r13), %rax
    000001aa: 	movq	%r15, 0x8(%rbp)
    000001ae: 	movq	%r12, 0x10(%rbp)
    000001b2: 	movq	%r14, 0x18(%rbp)
    000001b6: 	cmpq	%rbx, %rax
    000001b9: 	je	.Ltmp4082 # Offset: 441
    000001bf: 	movq	%rbx, %rdi
    000001c2: 	movq	%rax, %rbx
    000001c5: 	jmp	.Ltmp4096 # Offset: 453
    000001ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4092:
    000001d0: 	movq	0x8(%r14), %rbx
    000001d4: 	addq	$0x8, %r14
    000001d8: 	leaq	0x200(%rbx), %r12
    000001df: 	movq	%rbx, %r15
    000001e2: 	jmp	.Ltmp4097 # Offset: 482
    000001e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4095:
    000001f0: 	movq	0x8(%rsp), %rsi
    000001f5: 	leaq	0x10(%rsp), %rdi
    000001fa: 	movq	%rbx, 0x30(%rsp)
    000001ff: 	movq	%r15, 0x38(%rsp)
    00000204: 	movq	%r12, 0x40(%rsp)
    00000209: 	movq	%r14, 0x48(%rsp)
    0000020e: 	movaps	%xmm1, 0x10(%rsp)
    00000213: 	movaps	%xmm0, 0x20(%rsp)
    00000218: 	callq	_Z18quicksort2_forwardISt15_Deque_iteratorIiRiPiEEvT_S4_ # Offset: 536
    0000021d: 	movq	%rbx, (%r13)
    00000221: 	movq	(%rbp), %rdi
    00000225: 	movq	%r15, 0x8(%r13)
    00000229: 	movq	%r12, 0x10(%r13)
    0000022d: 	movq	%r14, 0x18(%r13)
    00000231: 	cmpq	%rbx, %rdi
    00000234: 	jne	.Ltmp4096 # Offset: 564
    0000023a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4082:
    00000240: 	movq	0x58(%rsp), %rax
    00000245: 	subq	%fs:0x28, %rax
    0000024e: 	jne	.Ltmp4098 # Offset: 590
    00000250: 	addq	$0x68, %rsp
    00000254: 	popq	%rbx
    00000255: 	popq	%rbp
    00000256: 	popq	%r12
    00000258: 	popq	%r13
    0000025a: 	popq	%r14
    0000025c: 	popq	%r15
    0000025e: 	retq # Offset: 606
    0000025f: 	nop # Size: 1
.Ltmp4083:
    00000260: 	movq	0x8(%r9), %r15
    00000264: 	addq	$0x8, %r9
    00000268: 	movq	%r15, %rdx
    0000026b: 	leaq	0x200(%r15), %rsi
    00000272: 	jmp	.Ltmp4099 # Offset: 626
    00000277: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4084:
    00000280: 	movq	0x8(%r9), %rcx
    00000284: 	movl	(%rdx), %r8d
    00000287: 	leaq	0x8(%r9), %r11
    0000028b: 	movl	(%rbx), %r14d
    0000028e: 	leaq	0x200(%rcx), %r10
    00000295: 	cmpq	%rcx, %rdi
    00000298: 	jne	.Ltmp4100 # Offset: 664
.Ltmp4085:
    0000029e: 	cmpl	%r14d, %r8d
    000002a1: 	jge	.Ltmp4082 # Offset: 673
    000002a3: 	movl	%r14d, (%rdx)
    000002a6: 	movl	%r8d, (%rbx)
    000002a9: 	jmp	.Ltmp4082 # Offset: 681
    000002ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4088:
    000002b0: 	movq	0x8(%r11), %rcx
    000002b4: 	jmp	.Ltmp4101 # Offset: 692
.Ltmp4098:
    000002b9: 	callq	__stack_chk_fail@PLT # Offset: 697
DWARF CFI Instructions:
    <empty>
End of Function "_Z18quicksort2_forwardISt15_Deque_iteratorIiRiPiEEvT_S4_"

Binary Function "_Z13TestOneSearchISt15_Deque_iteratorIiRiPiEPFS3_S3_S3_iEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 421
  State       : disassembled
  Address     : 0x233f0
  Size        : 0x3ad
  MaxSize     : 0x3b0
  Offset      : 0x233f0
  Section     : .text
  Orc Section : .local.text._Z13TestOneSearchISt15_Deque_iteratorIiRiPiEPFS3_S3_S3_iEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0420:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rdx, %r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rsi, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x98, %rsp
    0000001e: 	movq	(%rdi), %rdx
    00000021: 	movq	(%rsi), %rsi
    00000024: 	movq	%rcx, 0x8(%rsp)
    00000029: 	movq	0x10(%rdi), %rcx
    0000002d: 	movq	%r8, 0x10(%rsp)
    00000032: 	movq	0x18(%rdi), %rdi
    00000036: 	movq	%fs:0x28, %rax
    0000003f: 	movq	%rax, 0x88(%rsp)
    00000047: 	xorl	%eax, %eax
    00000049: 	cmpq	%rsi, %rdx
    0000004c: 	jne	.Ltmp4102 # Offset: 76
    0000004e: 	jmp	.Ltmp4103 # Offset: 78
.Ltmp4104:
    00000050: 	movl	$0x5, (%rdx)
    00000056: 	cmpq	%rsi, %rax
    00000059: 	je	.Ltmp4103 # Offset: 89
.Ltmp4105:
    0000005b: 	movq	%rax, %rdx
.Ltmp4102:
    0000005e: 	leaq	0x4(%rdx), %rax
    00000062: 	cmpq	%rcx, %rax
    00000065: 	jne	.Ltmp4104 # Offset: 101
    00000067: 	movq	0x8(%rdi), %rax
    0000006b: 	leaq	0x8(%rdi), %r8
    0000006f: 	movl	$0x5, (%rdx)
    00000075: 	leaq	0x200(%rax), %rcx
    0000007c: 	cmpq	%rax, %rsi
    0000007f: 	je	.Ltmp4103 # Offset: 127
    00000081: 	movq	%r8, %rdi
    00000084: 	jmp	.Ltmp4105 # Offset: 132
    00000086: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp4103:
    00000090: 	movq	0x10(%rsp), %rsi
    00000095: 	leaq	0x60(%rsp), %r13
    0000009a: 	movzbl	%r9b, %eax
    0000009e: 	leaq	DATAat0x34160(%rip), %rdx
    000000a5: 	movq	%r13, %rdi
    000000a8: 	movl	%eax, 0x4(%rsp)
    000000ac: 	leaq	0x40(%rsp), %r15
    000000b1: 	leaq	0x20(%rsp), %r14
    000000b6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 182
    000000bb: 	movdqu	(%rbp), %xmm4
    000000c0: 	movdqu	0x10(%rbp), %xmm5
    000000c5: 	movq	%r13, %r8
    000000c8: 	movdqu	(%rbx), %xmm6
    000000cc: 	movdqu	0x10(%rbx), %xmm7
    000000d1: 	movq	%r12, %rdx
    000000d4: 	movq	%r15, %rsi
    000000d7: 	movl	0x4(%rsp), %r9d
    000000dc: 	movq	0x8(%rsp), %rcx
    000000e1: 	movq	%r14, %rdi
    000000e4: 	movaps	%xmm4, 0x40(%rsp)
    000000e9: 	movaps	%xmm5, 0x50(%rsp)
    000000ee: 	movaps	%xmm6, 0x20(%rsp)
    000000f3: 	movaps	%xmm7, 0x30(%rsp)
    000000f8: 	callq	_Z15TestSearchArrayISt15_Deque_iteratorIiRiPiEPFS3_S3_S3_iEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 248
    000000fd: 	movq	0x60(%rsp), %rdi
    00000102: 	leaq	0x70(%rsp), %rax
    00000107: 	movq	%rax, 0x18(%rsp)
    0000010c: 	cmpq	%rax, %rdi
    0000010f: 	je	.Ltmp4106 # Offset: 271
    00000111: 	movq	0x70(%rsp), %rax
    00000116: 	leaq	0x1(%rax), %rsi
    0000011a: 	callq	_ZdlPvm@PLT # Offset: 282
.Ltmp4106:
    0000011f: 	movq	(%rbx), %rdi
    00000122: 	movq	0x10(%rbx), %r8
    00000126: 	movq	0x18(%rbx), %r10
    0000012a: 	cmpq	$0x9, %r12
    0000012e: 	jbe	.Ltmp4107 # Offset: 302
    00000134: 	movabsq	$-0x3333333333333333, %rdx
    0000013e: 	movq	%r12, %rax
    00000141: 	mulq	%rdx
    00000144: 	shrq	$0x3, %rdx
.Ltmp4121:
    00000148: 	xorl	%esi, %esi
    0000014a: 	xorl	%r9d, %r9d
    0000014d: 	cmpq	$0x0, %r12
    00000151: 	jbe	.Ltmp4108 # Offset: 337
    00000153: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4113:
    00000158: 	xorl	%ecx, %ecx
    0000015a: 	jmp	.Ltmp4109 # Offset: 346
    0000015c: 	nopl	(%rax) # Size: 4
.Ltmp4111:
    00000160: 	addq	$0x1, %rcx
    00000164: 	movl	%r9d, (%rdi)
    00000167: 	addq	$0x1, %rsi
    0000016b: 	cmpq	%rdx, %rcx
    0000016e: 	jae	.Ltmp4110 # Offset: 366
    00000170: 	cmpq	%rsi, %r12
    00000173: 	jbe	.Ltmp4110 # Offset: 371
.Ltmp4112:
    00000175: 	movq	%rax, %rdi
.Ltmp4109:
    00000178: 	leaq	0x4(%rdi), %rax
    0000017c: 	cmpq	%r8, %rax
    0000017f: 	jne	.Ltmp4111 # Offset: 383
    00000181: 	movq	0x8(%r10), %rax
    00000185: 	leaq	0x8(%r10), %r11
    00000189: 	addq	$0x1, %rsi
    0000018d: 	movl	%r9d, (%rdi)
    00000190: 	addq	$0x1, %rcx
    00000194: 	movq	%r11, %r10
    00000197: 	leaq	0x200(%rax), %r8
    0000019e: 	cmpq	%rsi, %r12
    000001a1: 	jbe	.Ltmp4110 # Offset: 417
    000001a3: 	cmpq	%rdx, %rcx
    000001a6: 	jb	.Ltmp4112 # Offset: 422
    000001a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp4110:
    000001b0: 	movq	%rax, %rdi
    000001b3: 	addl	$0x1, %r9d
    000001b7: 	cmpq	%rsi, %r12
    000001ba: 	ja	.Ltmp4113 # Offset: 442
.Ltmp4108:
    000001bc: 	movq	0x10(%rsp), %rsi
    000001c1: 	leaq	DATAat0x3416e(%rip), %rdx
    000001c8: 	movq	%r13, %rdi
    000001cb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 459
    000001d0: 	movdqu	(%rbp), %xmm3
    000001d5: 	movdqu	0x10(%rbp), %xmm4
    000001da: 	movq	%r13, %r8
    000001dd: 	movdqu	(%rbx), %xmm5
    000001e1: 	movdqu	0x10(%rbx), %xmm6
    000001e6: 	movq	%r12, %rdx
    000001e9: 	movq	%r15, %rsi
    000001ec: 	movl	0x4(%rsp), %r9d
    000001f1: 	movq	0x8(%rsp), %rcx
    000001f6: 	movq	%r14, %rdi
    000001f9: 	movaps	%xmm3, 0x40(%rsp)
    000001fe: 	movaps	%xmm4, 0x50(%rsp)
    00000203: 	movaps	%xmm5, 0x20(%rsp)
    00000208: 	movaps	%xmm6, 0x30(%rsp)
    0000020d: 	callq	_Z15TestSearchArrayISt15_Deque_iteratorIiRiPiEPFS3_S3_S3_iEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 525
    00000212: 	movq	0x60(%rsp), %rdi
    00000217: 	cmpq	0x18(%rsp), %rdi
    0000021c: 	je	.Ltmp4114 # Offset: 540
    0000021e: 	movq	0x70(%rsp), %rax
    00000223: 	leaq	0x1(%rax), %rsi
    00000227: 	callq	_ZdlPvm@PLT # Offset: 551
.Ltmp4114:
    0000022c: 	movdqu	0x10(%rbx), %xmm0
    00000231: 	movdqu	(%rbp), %xmm2
    00000236: 	xorl	%ecx, %ecx
    00000238: 	movdqu	(%rbx), %xmm1
    0000023c: 	movdqu	0x10(%rbp), %xmm3
    00000241: 	movhlps	%xmm0, %xmm7
    00000244: 	movq	%xmm2, %rdi
    00000249: 	movq	%xmm0, %rsi
    0000024e: 	movq	%xmm1, %rdx
    00000253: 	movq	%xmm7, %r8
    00000258: 	cmpq	%rdi, %rdx
    0000025b: 	jne	.Ltmp4115 # Offset: 603
    0000025d: 	jmp	.Ltmp4116 # Offset: 605
    0000025f: 	nop # Size: 1
.Ltmp4117:
    00000260: 	movl	%ecx, (%rdx)
    00000262: 	addl	$0x1, %ecx
    00000265: 	cmpq	%rdi, %rax
    00000268: 	je	.Ltmp4116 # Offset: 616
.Ltmp4118:
    0000026a: 	movq	%rax, %rdx
.Ltmp4115:
    0000026d: 	leaq	0x4(%rdx), %rax
    00000271: 	cmpq	%rax, %rsi
    00000274: 	jne	.Ltmp4117 # Offset: 628
    00000276: 	movq	0x8(%r8), %rax
    0000027a: 	leaq	0x8(%r8), %r9
    0000027e: 	movl	%ecx, (%rdx)
    00000280: 	addl	$0x1, %ecx
    00000283: 	leaq	0x200(%rax), %rsi
    0000028a: 	cmpq	%rdi, %rax
    0000028d: 	je	.Ltmp4116 # Offset: 653
    0000028f: 	movq	%r9, %r8
    00000292: 	jmp	.Ltmp4118 # Offset: 658
    00000294: 	nopl	(%rax) # Size: 4
.Ltmp4116:
    00000298: 	movq	%r15, %rsi
    0000029b: 	movq	%r14, %rdi
    0000029e: 	movaps	%xmm2, 0x40(%rsp)
    000002a3: 	movaps	%xmm1, 0x20(%rsp)
    000002a8: 	movaps	%xmm0, 0x30(%rsp)
    000002ad: 	movaps	%xmm3, 0x50(%rsp)
    000002b2: 	callq	_Z18quicksort2_forwardISt15_Deque_iteratorIiRiPiEEvT_S4_ # Offset: 690
    000002b7: 	movq	0x10(%rsp), %rsi
    000002bc: 	leaq	DATAat0x34184(%rip), %rdx
    000002c3: 	movq	%r13, %rdi
    000002c6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 710
    000002cb: 	movdqu	0x10(%rbp), %xmm0
    000002d0: 	movdqu	(%rbp), %xmm1
    000002d5: 	movq	%r13, %r8
    000002d8: 	movdqu	(%rbx), %xmm2
    000002dc: 	movl	0x4(%rsp), %r9d
    000002e1: 	movq	%r12, %rdx
    000002e4: 	movq	%r15, %rsi
    000002e7: 	movaps	%xmm0, 0x50(%rsp)
    000002ec: 	movq	0x8(%rsp), %rcx
    000002f1: 	movdqu	0x10(%rbx), %xmm0
    000002f6: 	movq	%r14, %rdi
    000002f9: 	movaps	%xmm1, 0x40(%rsp)
    000002fe: 	movaps	%xmm2, 0x20(%rsp)
    00000303: 	movaps	%xmm0, 0x30(%rsp)
    00000308: 	callq	_Z15TestSearchArrayISt15_Deque_iteratorIiRiPiEPFS3_S3_S3_iEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 776
    0000030d: 	movq	0x60(%rsp), %rdi
    00000312: 	cmpq	0x18(%rsp), %rdi
    00000317: 	je	.Ltmp4119 # Offset: 791
    00000319: 	movq	0x70(%rsp), %rax
    0000031e: 	leaq	0x1(%rax), %rsi
    00000322: 	callq	_ZdlPvm@PLT # Offset: 802
.Ltmp4119:
    00000327: 	movq	0x88(%rsp), %rax
    0000032f: 	subq	%fs:0x28, %rax
    00000338: 	jne	.Ltmp4120 # Offset: 824
    0000033a: 	addq	$0x98, %rsp
    00000341: 	popq	%rbx
    00000342: 	popq	%rbp
    00000343: 	popq	%r12
    00000345: 	popq	%r13
    00000347: 	popq	%r14
    00000349: 	popq	%r15
    0000034b: 	retq # Offset: 843
.Ltmp4107:
    0000034c: 	testq	%r12, %r12
    0000034f: 	je	.Ltmp4108 # Offset: 847
    00000355: 	movl	$0x1, %edx
    0000035a: 	jmp	.Ltmp4121 # Offset: 858
.Ltmp4120:
    0000035f: 	callq	__stack_chk_fail@PLT # Offset: 863
    00000364: 	endbr64
.Ltmp4123:
    00000368: 	movq	%rax, %rbp
    0000036b: 	jmp	.Ltmp4122 # Offset: 875
    0000036d: 	endbr64
    00000371: 	jmp	.Ltmp4123 # Offset: 881
    00000373: 	endbr64
    00000377: 	movq	%rax, %rbp
    0000037a: 	movq	0x60(%rsp), %rdi
    0000037f: 	leaq	0x70(%rsp), %rax
    00000384: 	cmpq	%rax, %rdi
    00000387: 	je	.Ltmp4124 # Offset: 903
.Ltmp4125:
    00000389: 	movq	0x70(%rsp), %rax
    0000038e: 	leaq	0x1(%rax), %rsi
    00000392: 	callq	_ZdlPvm@PLT # Offset: 914
.Ltmp4124:
    00000397: 	movq	%rbp, %rdi
    0000039a: 	callq	_Unwind_Resume@PLT # Offset: 922
.Ltmp4122:
    0000039f: 	movq	0x60(%rsp), %rdi
    000003a4: 	cmpq	0x18(%rsp), %rdi
    000003a9: 	jne	.Ltmp4125 # Offset: 937
    000003ab: 	jmp	.Ltmp4124 # Offset: 939
DWARF CFI Instructions:
    <empty>
End of Function "_Z13TestOneSearchISt15_Deque_iteratorIiRiPiEPFS3_S3_S3_iEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z23lower_bound_recur_innerISt15_Deque_iteratorIiRiPiEilET_S4_T0_T1_" after disassembly {
  Number      : 422
  State       : disassembled
  Address     : 0x237a0
  Size        : 0x18c
  MaxSize     : 0x190
  Offset      : 0x237a0
  Section     : .text
  Orc Section : .local.text._Z23lower_bound_recur_innerISt15_Deque_iteratorIiRiPiEilET_S4_T0_T1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0421:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movl	%edx, %r9d
    00000009: 	movq	%rdi, %r12
    0000000c: 	subq	$0x30, %rsp
    00000010: 	movdqu	(%rsi), %xmm1
    00000014: 	movdqu	0x10(%rsi), %xmm0
    00000019: 	movq	%fs:0x28, %rdx
    00000022: 	movq	%rdx, 0x28(%rsp)
    00000027: 	xorl	%edx, %edx
    00000029: 	movhlps	%xmm1, %xmm2
    0000002c: 	movhlps	%xmm0, %xmm3
    0000002f: 	testq	%rcx, %rcx
    00000032: 	jne	.Ltmp4126 # Offset: 50
    00000034: 	movups	%xmm1, (%rdi)
    00000037: 	movups	%xmm0, 0x10(%rdi)
.Ltmp4132:
    0000003b: 	movq	0x28(%rsp), %rax
    00000040: 	subq	%fs:0x28, %rax
    00000049: 	jne	.Ltmp4127 # Offset: 73
    0000004f: 	addq	$0x30, %rsp
    00000053: 	movq	%r12, %rax
    00000056: 	popq	%r12
    00000058: 	retq # Offset: 88
    00000059: 	nopl	(%rax) # Size: 7
.Ltmp4126:
    00000060: 	movq	%rcx, %r8
    00000063: 	movq	%xmm2, %rdi
    00000068: 	movq	%xmm1, %rdx
    0000006d: 	movq	%rsi, %rax
    00000070: 	shrq	$0x3f, %r8
    00000074: 	subq	%rdi, %rdx
    00000077: 	movq	%xmm1, %r11
    0000007c: 	addq	%rcx, %r8
    0000007f: 	sarq	$0x2, %rdx
    00000083: 	movq	%xmm3, %r10
    00000088: 	sarq	%r8
    0000008b: 	addq	%r8, %rdx
    0000008e: 	js	.Ltmp4128 # Offset: 142
    00000094: 	cmpq	$0x7f, %rdx
    00000098: 	jg	.Ltmp4129 # Offset: 152
    0000009e: 	leaq	(%r11,%r8,4), %rdx
    000000a2: 	movq	%xmm0, %rsi
    000000a7: 	cmpl	%r9d, (%rdx)
    000000aa: 	jge	.Ltmp4130 # Offset: 170
.Ltmp4133:
    000000b0: 	addq	$0x4, %rdx
    000000b4: 	cmpq	%rsi, %rdx
    000000b7: 	je	.Ltmp4131 # Offset: 183
.Ltmp4135:
    000000bd: 	movq	%rdi, %xmm4
    000000c2: 	movq	%rdx, %xmm0
    000000c7: 	movq	%rdx, (%rax)
    000000ca: 	addq	$0x1, %r8
    000000ce: 	punpcklqdq	%xmm4, %xmm0
    000000d2: 	movq	%rdi, 0x8(%rax)
    000000d6: 	movq	%r10, %xmm5
    000000db: 	subq	%r8, %rcx
    000000de: 	movq	%rsi, 0x10(%rax)
    000000e2: 	movl	%r9d, %edx
    000000e5: 	movq	%r12, %rdi
    000000e8: 	movq	%r10, 0x18(%rax)
    000000ec: 	movaps	%xmm0, (%rsp)
    000000f0: 	movq	%rsi, %xmm0
    000000f5: 	movq	%rsp, %rsi
    000000f8: 	punpcklqdq	%xmm5, %xmm0
    000000fc: 	movaps	%xmm0, 0x10(%rsp)
    00000101: 	callq	_Z23lower_bound_recur_innerISt15_Deque_iteratorIiRiPiEilET_S4_T0_T1_ # Offset: 257
    00000106: 	jmp	.Ltmp4132 # Offset: 262
    0000010b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4128:
    00000110: 	movq	%rdx, %r11
    00000113: 	notq	%r11
    00000116: 	shrq	$0x7, %r11
    0000011a: 	notq	%r11
.Ltmp4134:
    0000011d: 	leaq	(%r10,%r11,8), %r10
    00000121: 	shlq	$0x7, %r11
    00000125: 	movq	(%r10), %rdi
    00000128: 	subq	%r11, %rdx
    0000012b: 	leaq	(%rdi,%rdx,4), %rdx
    0000012f: 	leaq	0x200(%rdi), %rsi
    00000136: 	cmpl	%r9d, (%rdx)
    00000139: 	jl	.Ltmp4133 # Offset: 313
.Ltmp4130:
    0000013f: 	movq	%rsp, %rsi
    00000142: 	movq	%r8, %rcx
    00000145: 	movl	%r9d, %edx
    00000148: 	movq	%r12, %rdi
    0000014b: 	movaps	%xmm1, (%rsp)
    0000014f: 	movaps	%xmm0, 0x10(%rsp)
    00000154: 	callq	_Z23lower_bound_recur_innerISt15_Deque_iteratorIiRiPiEilET_S4_T0_T1_ # Offset: 340
    00000159: 	jmp	.Ltmp4132 # Offset: 345
    0000015e: 	nop # Size: 2
.Ltmp4129:
    00000160: 	movq	%rdx, %r11
    00000163: 	sarq	$0x7, %r11
    00000167: 	jmp	.Ltmp4134 # Offset: 359
    00000169: 	nopl	(%rax) # Size: 7
.Ltmp4131:
    00000170: 	movq	0x8(%r10), %rdx
    00000174: 	addq	$0x8, %r10
    00000178: 	leaq	0x200(%rdx), %rsi
    0000017f: 	movq	%rdx, %rdi
    00000182: 	jmp	.Ltmp4135 # Offset: 386
.Ltmp4127:
    00000187: 	callq	__stack_chk_fail@PLT # Offset: 391
DWARF CFI Instructions:
    <empty>
End of Function "_Z23lower_bound_recur_innerISt15_Deque_iteratorIiRiPiEilET_S4_T0_T1_"

Binary Function "_Z17lower_bound_recurISt15_Deque_iteratorIiRiPiEiET_S4_S4_T0_" after disassembly {
  Number      : 423
  State       : disassembled
  Address     : 0x23930
  Size        : 0x1ac
  MaxSize     : 0x1b0
  Offset      : 0x23930
  Section     : .text
  Orc Section : .local.text._Z17lower_bound_recurISt15_Deque_iteratorIiRiPiEiET_S4_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0422:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movq	%rdx, %r10
    00000009: 	movq	%rdi, %r12
    0000000c: 	subq	$0x30, %rsp
    00000010: 	movdqu	0x10(%rsi), %xmm0
    00000015: 	movq	0x18(%rdx), %rdx
    00000019: 	movq	%fs:0x28, %rax
    00000022: 	movq	%rax, 0x28(%rsp)
    00000027: 	xorl	%eax, %eax
    00000029: 	movdqu	(%rsi), %xmm1
    0000002d: 	movhlps	%xmm0, %xmm3
    00000030: 	movq	%rdx, %rax
    00000033: 	movq	%xmm3, %rsi
    00000038: 	movq	%xmm1, %rdi
    0000003d: 	movhlps	%xmm1, %xmm2
    00000040: 	subq	%rsi, %rax
    00000043: 	sarq	$0x3, %rax
    00000047: 	cmpq	$0x1, %rdx
    0000004b: 	movq	(%r10), %rdx
    0000004e: 	adcq	$-0x1, %rax
    00000052: 	subq	0x8(%r10), %rdx
    00000056: 	sarq	$0x2, %rdx
    0000005a: 	shlq	$0x7, %rax
    0000005e: 	addq	%rdx, %rax
    00000061: 	movq	%xmm0, %rdx
    00000066: 	subq	%rdi, %rdx
    00000069: 	sarq	$0x2, %rdx
    0000006d: 	addq	%rdx, %rax
    00000070: 	jne	.Ltmp4136 # Offset: 112
    00000072: 	movups	%xmm1, (%r12)
    00000077: 	movups	%xmm0, 0x10(%r12)
.Ltmp4142:
    0000007d: 	movq	0x28(%rsp), %rax
    00000082: 	subq	%fs:0x28, %rax
    0000008b: 	jne	.Ltmp4137 # Offset: 139
    00000091: 	addq	$0x30, %rsp
    00000095: 	movq	%r12, %rax
    00000098: 	popq	%r12
    0000009a: 	retq # Offset: 154
    0000009b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4136:
    000000a0: 	movq	%rax, %r10
    000000a3: 	movq	%xmm2, %r9
    000000a8: 	movq	%xmm1, %rdx
    000000ad: 	movl	%ecx, %r8d
    000000b0: 	shrq	$0x3f, %r10
    000000b4: 	subq	%r9, %rdx
    000000b7: 	addq	%rax, %r10
    000000ba: 	sarq	$0x2, %rdx
    000000be: 	sarq	%r10
    000000c1: 	addq	%r10, %rdx
    000000c4: 	js	.Ltmp4138 # Offset: 196
    000000c6: 	cmpq	$0x7f, %rdx
    000000ca: 	jg	.Ltmp4139 # Offset: 202
    000000d0: 	leaq	(%rdi,%r10,4), %rdx
    000000d4: 	movq	%xmm0, %rcx
    000000d9: 	cmpl	(%rdx), %r8d
    000000dc: 	jle	.Ltmp4140 # Offset: 220
.Ltmp4143:
    000000de: 	addq	$0x4, %rdx
    000000e2: 	cmpq	%rcx, %rdx
    000000e5: 	je	.Ltmp4141 # Offset: 229
.Ltmp4145:
    000000eb: 	movq	%rdx, %xmm0
    000000f0: 	movq	%r9, %xmm4
    000000f5: 	movl	%r8d, %edx
    000000f8: 	movq	%r12, %rdi
    000000fb: 	punpcklqdq	%xmm4, %xmm0
    000000ff: 	addq	$0x1, %r10
    00000103: 	movq	%rsi, %xmm5
    00000108: 	movq	%rsp, %rsi
    0000010b: 	movaps	%xmm0, (%rsp)
    0000010f: 	subq	%r10, %rax
    00000112: 	movq	%rcx, %xmm0
    00000117: 	punpcklqdq	%xmm5, %xmm0
    0000011b: 	movq	%rax, %rcx
    0000011e: 	movaps	%xmm0, 0x10(%rsp)
    00000123: 	callq	_Z23lower_bound_recur_innerISt15_Deque_iteratorIiRiPiEilET_S4_T0_T1_ # Offset: 291
    00000128: 	jmp	.Ltmp4142 # Offset: 296
    0000012d: 	nopl	(%rax) # Size: 3
.Ltmp4138:
    00000130: 	movq	%rdx, %rdi
    00000133: 	notq	%rdi
    00000136: 	shrq	$0x7, %rdi
    0000013a: 	notq	%rdi
.Ltmp4144:
    0000013d: 	leaq	(%rsi,%rdi,8), %rsi
    00000141: 	shlq	$0x7, %rdi
    00000145: 	movq	(%rsi), %r9
    00000148: 	subq	%rdi, %rdx
    0000014b: 	leaq	(%r9,%rdx,4), %rdx
    0000014f: 	leaq	0x200(%r9), %rcx
    00000156: 	cmpl	(%rdx), %r8d
    00000159: 	jg	.Ltmp4143 # Offset: 345
.Ltmp4140:
    0000015b: 	movq	%rsp, %rsi
    0000015e: 	movq	%r10, %rcx
    00000161: 	movl	%r8d, %edx
    00000164: 	movq	%r12, %rdi
    00000167: 	movaps	%xmm1, (%rsp)
    0000016b: 	movaps	%xmm0, 0x10(%rsp)
    00000170: 	callq	_Z23lower_bound_recur_innerISt15_Deque_iteratorIiRiPiEilET_S4_T0_T1_ # Offset: 368
    00000175: 	jmp	.Ltmp4142 # Offset: 373
    0000017a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4139:
    00000180: 	movq	%rdx, %rdi
    00000183: 	sarq	$0x7, %rdi
    00000187: 	jmp	.Ltmp4144 # Offset: 391
    00000189: 	nopl	(%rax) # Size: 7
.Ltmp4141:
    00000190: 	movq	0x8(%rsi), %rdx
    00000194: 	addq	$0x8, %rsi
    00000198: 	leaq	0x200(%rdx), %rcx
    0000019f: 	movq	%rdx, %r9
    000001a2: 	jmp	.Ltmp4145 # Offset: 418
.Ltmp4137:
    000001a7: 	callq	__stack_chk_fail@PLT # Offset: 423
DWARF CFI Instructions:
    <empty>
End of Function "_Z17lower_bound_recurISt15_Deque_iteratorIiRiPiEiET_S4_S4_T0_"

Binary Function "_Z23upper_bound_recur_innerISt15_Deque_iteratorIiRiPiEilET_S4_T0_T1_" after disassembly {
  Number      : 424
  State       : disassembled
  Address     : 0x23ae0
  Size        : 0x18c
  MaxSize     : 0x190
  Offset      : 0x23ae0
  Section     : .text
  Orc Section : .local.text._Z23upper_bound_recur_innerISt15_Deque_iteratorIiRiPiEilET_S4_T0_T1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0423:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movl	%edx, %r9d
    00000009: 	movq	%rdi, %r12
    0000000c: 	subq	$0x30, %rsp
    00000010: 	movdqu	(%rsi), %xmm1
    00000014: 	movdqu	0x10(%rsi), %xmm0
    00000019: 	movq	%fs:0x28, %rdx
    00000022: 	movq	%rdx, 0x28(%rsp)
    00000027: 	xorl	%edx, %edx
    00000029: 	movhlps	%xmm1, %xmm2
    0000002c: 	movhlps	%xmm0, %xmm3
    0000002f: 	testq	%rcx, %rcx
    00000032: 	jne	.Ltmp4146 # Offset: 50
    00000034: 	movups	%xmm1, (%rdi)
    00000037: 	movups	%xmm0, 0x10(%rdi)
.Ltmp4152:
    0000003b: 	movq	0x28(%rsp), %rax
    00000040: 	subq	%fs:0x28, %rax
    00000049: 	jne	.Ltmp4147 # Offset: 73
    0000004f: 	addq	$0x30, %rsp
    00000053: 	movq	%r12, %rax
    00000056: 	popq	%r12
    00000058: 	retq # Offset: 88
    00000059: 	nopl	(%rax) # Size: 7
.Ltmp4146:
    00000060: 	movq	%rcx, %r8
    00000063: 	movq	%xmm2, %rdi
    00000068: 	movq	%xmm1, %rdx
    0000006d: 	movq	%rsi, %rax
    00000070: 	shrq	$0x3f, %r8
    00000074: 	subq	%rdi, %rdx
    00000077: 	movq	%xmm1, %r11
    0000007c: 	addq	%rcx, %r8
    0000007f: 	sarq	$0x2, %rdx
    00000083: 	movq	%xmm3, %r10
    00000088: 	sarq	%r8
    0000008b: 	addq	%r8, %rdx
    0000008e: 	js	.Ltmp4148 # Offset: 142
    00000094: 	cmpq	$0x7f, %rdx
    00000098: 	jg	.Ltmp4149 # Offset: 152
    0000009e: 	leaq	(%r11,%r8,4), %rdx
    000000a2: 	movq	%xmm0, %rsi
    000000a7: 	cmpl	%r9d, (%rdx)
    000000aa: 	jg	.Ltmp4150 # Offset: 170
.Ltmp4153:
    000000b0: 	addq	$0x4, %rdx
    000000b4: 	cmpq	%rsi, %rdx
    000000b7: 	je	.Ltmp4151 # Offset: 183
.Ltmp4155:
    000000bd: 	movq	%rdi, %xmm4
    000000c2: 	movq	%rdx, %xmm0
    000000c7: 	movq	%rdx, (%rax)
    000000ca: 	addq	$0x1, %r8
    000000ce: 	punpcklqdq	%xmm4, %xmm0
    000000d2: 	movq	%rdi, 0x8(%rax)
    000000d6: 	movq	%r10, %xmm5
    000000db: 	subq	%r8, %rcx
    000000de: 	movq	%rsi, 0x10(%rax)
    000000e2: 	movl	%r9d, %edx
    000000e5: 	movq	%r12, %rdi
    000000e8: 	movq	%r10, 0x18(%rax)
    000000ec: 	movaps	%xmm0, (%rsp)
    000000f0: 	movq	%rsi, %xmm0
    000000f5: 	movq	%rsp, %rsi
    000000f8: 	punpcklqdq	%xmm5, %xmm0
    000000fc: 	movaps	%xmm0, 0x10(%rsp)
    00000101: 	callq	_Z23upper_bound_recur_innerISt15_Deque_iteratorIiRiPiEilET_S4_T0_T1_ # Offset: 257
    00000106: 	jmp	.Ltmp4152 # Offset: 262
    0000010b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4148:
    00000110: 	movq	%rdx, %r11
    00000113: 	notq	%r11
    00000116: 	shrq	$0x7, %r11
    0000011a: 	notq	%r11
.Ltmp4154:
    0000011d: 	leaq	(%r10,%r11,8), %r10
    00000121: 	shlq	$0x7, %r11
    00000125: 	movq	(%r10), %rdi
    00000128: 	subq	%r11, %rdx
    0000012b: 	leaq	(%rdi,%rdx,4), %rdx
    0000012f: 	leaq	0x200(%rdi), %rsi
    00000136: 	cmpl	%r9d, (%rdx)
    00000139: 	jle	.Ltmp4153 # Offset: 313
.Ltmp4150:
    0000013f: 	movq	%rsp, %rsi
    00000142: 	movq	%r8, %rcx
    00000145: 	movl	%r9d, %edx
    00000148: 	movq	%r12, %rdi
    0000014b: 	movaps	%xmm1, (%rsp)
    0000014f: 	movaps	%xmm0, 0x10(%rsp)
    00000154: 	callq	_Z23upper_bound_recur_innerISt15_Deque_iteratorIiRiPiEilET_S4_T0_T1_ # Offset: 340
    00000159: 	jmp	.Ltmp4152 # Offset: 345
    0000015e: 	nop # Size: 2
.Ltmp4149:
    00000160: 	movq	%rdx, %r11
    00000163: 	sarq	$0x7, %r11
    00000167: 	jmp	.Ltmp4154 # Offset: 359
    00000169: 	nopl	(%rax) # Size: 7
.Ltmp4151:
    00000170: 	movq	0x8(%r10), %rdx
    00000174: 	addq	$0x8, %r10
    00000178: 	leaq	0x200(%rdx), %rsi
    0000017f: 	movq	%rdx, %rdi
    00000182: 	jmp	.Ltmp4155 # Offset: 386
.Ltmp4147:
    00000187: 	callq	__stack_chk_fail@PLT # Offset: 391
DWARF CFI Instructions:
    <empty>
End of Function "_Z23upper_bound_recur_innerISt15_Deque_iteratorIiRiPiEilET_S4_T0_T1_"

Binary Function "_Z17upper_bound_recurISt15_Deque_iteratorIiRiPiEiET_S4_S4_T0_" after disassembly {
  Number      : 425
  State       : disassembled
  Address     : 0x23c70
  Size        : 0x1ac
  MaxSize     : 0x1b0
  Offset      : 0x23c70
  Section     : .text
  Orc Section : .local.text._Z17upper_bound_recurISt15_Deque_iteratorIiRiPiEiET_S4_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0424:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movq	%rdx, %r10
    00000009: 	movq	%rdi, %r12
    0000000c: 	subq	$0x30, %rsp
    00000010: 	movdqu	0x10(%rsi), %xmm0
    00000015: 	movq	0x18(%rdx), %rdx
    00000019: 	movq	%fs:0x28, %rax
    00000022: 	movq	%rax, 0x28(%rsp)
    00000027: 	xorl	%eax, %eax
    00000029: 	movdqu	(%rsi), %xmm1
    0000002d: 	movhlps	%xmm0, %xmm3
    00000030: 	movq	%rdx, %rax
    00000033: 	movq	%xmm3, %rsi
    00000038: 	movq	%xmm1, %rdi
    0000003d: 	movhlps	%xmm1, %xmm2
    00000040: 	subq	%rsi, %rax
    00000043: 	sarq	$0x3, %rax
    00000047: 	cmpq	$0x1, %rdx
    0000004b: 	movq	(%r10), %rdx
    0000004e: 	adcq	$-0x1, %rax
    00000052: 	subq	0x8(%r10), %rdx
    00000056: 	sarq	$0x2, %rdx
    0000005a: 	shlq	$0x7, %rax
    0000005e: 	addq	%rdx, %rax
    00000061: 	movq	%xmm0, %rdx
    00000066: 	subq	%rdi, %rdx
    00000069: 	sarq	$0x2, %rdx
    0000006d: 	addq	%rdx, %rax
    00000070: 	jne	.Ltmp4156 # Offset: 112
    00000072: 	movups	%xmm1, (%r12)
    00000077: 	movups	%xmm0, 0x10(%r12)
.Ltmp4162:
    0000007d: 	movq	0x28(%rsp), %rax
    00000082: 	subq	%fs:0x28, %rax
    0000008b: 	jne	.Ltmp4157 # Offset: 139
    00000091: 	addq	$0x30, %rsp
    00000095: 	movq	%r12, %rax
    00000098: 	popq	%r12
    0000009a: 	retq # Offset: 154
    0000009b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4156:
    000000a0: 	movq	%rax, %r10
    000000a3: 	movq	%xmm2, %r9
    000000a8: 	movq	%xmm1, %rdx
    000000ad: 	movl	%ecx, %r8d
    000000b0: 	shrq	$0x3f, %r10
    000000b4: 	subq	%r9, %rdx
    000000b7: 	addq	%rax, %r10
    000000ba: 	sarq	$0x2, %rdx
    000000be: 	sarq	%r10
    000000c1: 	addq	%r10, %rdx
    000000c4: 	js	.Ltmp4158 # Offset: 196
    000000c6: 	cmpq	$0x7f, %rdx
    000000ca: 	jg	.Ltmp4159 # Offset: 202
    000000d0: 	leaq	(%rdi,%r10,4), %rdx
    000000d4: 	movq	%xmm0, %rcx
    000000d9: 	cmpl	(%rdx), %r8d
    000000dc: 	jl	.Ltmp4160 # Offset: 220
.Ltmp4163:
    000000de: 	addq	$0x4, %rdx
    000000e2: 	cmpq	%rcx, %rdx
    000000e5: 	je	.Ltmp4161 # Offset: 229
.Ltmp4165:
    000000eb: 	movq	%rdx, %xmm0
    000000f0: 	movq	%r9, %xmm4
    000000f5: 	movl	%r8d, %edx
    000000f8: 	movq	%r12, %rdi
    000000fb: 	punpcklqdq	%xmm4, %xmm0
    000000ff: 	addq	$0x1, %r10
    00000103: 	movq	%rsi, %xmm5
    00000108: 	movq	%rsp, %rsi
    0000010b: 	movaps	%xmm0, (%rsp)
    0000010f: 	subq	%r10, %rax
    00000112: 	movq	%rcx, %xmm0
    00000117: 	punpcklqdq	%xmm5, %xmm0
    0000011b: 	movq	%rax, %rcx
    0000011e: 	movaps	%xmm0, 0x10(%rsp)
    00000123: 	callq	_Z23upper_bound_recur_innerISt15_Deque_iteratorIiRiPiEilET_S4_T0_T1_ # Offset: 291
    00000128: 	jmp	.Ltmp4162 # Offset: 296
    0000012d: 	nopl	(%rax) # Size: 3
.Ltmp4158:
    00000130: 	movq	%rdx, %rdi
    00000133: 	notq	%rdi
    00000136: 	shrq	$0x7, %rdi
    0000013a: 	notq	%rdi
.Ltmp4164:
    0000013d: 	leaq	(%rsi,%rdi,8), %rsi
    00000141: 	shlq	$0x7, %rdi
    00000145: 	movq	(%rsi), %r9
    00000148: 	subq	%rdi, %rdx
    0000014b: 	leaq	(%r9,%rdx,4), %rdx
    0000014f: 	leaq	0x200(%r9), %rcx
    00000156: 	cmpl	(%rdx), %r8d
    00000159: 	jge	.Ltmp4163 # Offset: 345
.Ltmp4160:
    0000015b: 	movq	%rsp, %rsi
    0000015e: 	movq	%r10, %rcx
    00000161: 	movl	%r8d, %edx
    00000164: 	movq	%r12, %rdi
    00000167: 	movaps	%xmm1, (%rsp)
    0000016b: 	movaps	%xmm0, 0x10(%rsp)
    00000170: 	callq	_Z23upper_bound_recur_innerISt15_Deque_iteratorIiRiPiEilET_S4_T0_T1_ # Offset: 368
    00000175: 	jmp	.Ltmp4162 # Offset: 373
    0000017a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4159:
    00000180: 	movq	%rdx, %rdi
    00000183: 	sarq	$0x7, %rdi
    00000187: 	jmp	.Ltmp4164 # Offset: 391
    00000189: 	nopl	(%rax) # Size: 7
.Ltmp4161:
    00000190: 	movq	0x8(%rsi), %rdx
    00000194: 	addq	$0x8, %rsi
    00000198: 	leaq	0x200(%rdx), %rcx
    0000019f: 	movq	%rdx, %r9
    000001a2: 	jmp	.Ltmp4165 # Offset: 418
.Ltmp4157:
    000001a7: 	callq	__stack_chk_fail@PLT # Offset: 423
DWARF CFI Instructions:
    <empty>
End of Function "_Z17upper_bound_recurISt15_Deque_iteratorIiRiPiEiET_S4_S4_T0_"

Binary Function "_Z15TestSearchArrayISt15_Deque_iteratorIiRiPiEPFbS3_S3_iEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 426
  State       : disassembled
  Address     : 0x23e20
  Size        : 0x2b4
  MaxSize     : 0x2c0
  Offset      : 0x23e20
  Section     : .text
  Orc Section : .local.text._Z15TestSearchArrayISt15_Deque_iteratorIiRiPiEPFbS3_S3_iEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0425:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	movl	$0x1000, %edi
    0000000e: 	pushq	%r14
    00000010: 	pushq	%r13
    00000012: 	pushq	%r12
    00000014: 	movq	%rsi, %r12
    00000017: 	pushq	%rbp
    00000018: 	pushq	%rbx
    00000019: 	subq	$0x88, %rsp
    00000020: 	movq	%r8, 0x28(%rsp)
    00000025: 	movq	%rdx, 0x20(%rsp)
    0000002a: 	movq	%rcx, 0x10(%rsp)
    0000002f: 	movb	%r9b, 0x1f(%rsp)
    00000034: 	movq	%fs:0x28, %rax
    0000003d: 	movq	%rax, 0x78(%rsp)
    00000042: 	xorl	%eax, %eax
    00000044: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    0000004b: 	callq	_Znwm@PLT # Offset: 75
    00000050: 	movq	%rax, %rbx
    00000053: 	movq	%rax, 0x8(%rsp)
    00000058: 	addq	$0x4, %rax
    0000005c: 	leaq	0x1000(%rbx), %r8
    00000063: 	movl	$0x0, -0x4(%rax)
    0000006a: 	cmpq	%r8, %rax
    0000006d: 	je	.Ltmp4166 # Offset: 109
    0000006f: 	leaq	0xc(%rbx), %rdi
    00000073: 	movq	$0x0, 0x4(%rbx)
    0000007b: 	movq	$0x0, 0xff8(%rbx)
    00000086: 	andq	$-0x8, %rdi
    0000008a: 	subq	%rdi, %rax
    0000008d: 	movq	%rax, %rcx
    00000090: 	xorl	%eax, %eax
    00000092: 	addl	$0xffc, %ecx
    00000098: 	shrl	$0x3, %ecx
    0000009b: 	rep		stosq	%rax, %es:(%rdi)
.Ltmp4166:
    0000009e: 	movq	(%r15), %rbx
    000000a1: 	movq	0x18(%r15), %r10
    000000a5: 	movabsq	$0x5851f42d4c957f2d, %r9
    000000af: 	movabsq	$0x14057b7ef767814f, %rdi
    000000b9: 	movq	0x8(%rsp), %rcx
    000000be: 	movq	0x20(%rsp), %r11
    000000c3: 	movq	%rbx, %rsi
    000000c6: 	subq	0x8(%r15), %rsi
    000000ca: 	sarq	$0x2, %rsi
    000000ce: 	jmp	.Ltmp4167 # Offset: 206
.Ltmp4170:
    000000d0: 	cmpq	$0x7f, %rax
    000000d4: 	jg	.Ltmp4168 # Offset: 212
    000000da: 	leaq	(%rbx,%rdx,4), %rax
    000000de: 	addq	$0x4, %rcx
    000000e2: 	movl	(%rax), %eax
    000000e4: 	movl	%eax, -0x4(%rcx)
    000000e7: 	cmpq	%rcx, %r8
    000000ea: 	je	.Ltmp4169 # Offset: 234
.Ltmp4167:
    000000ec: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000000f3: 	imulq	%r9, %rax
    000000f7: 	addq	%rdi, %rax
    000000fa: 	movq	%rax, %rdx
    000000fd: 	movq	%rax, %rbp
    00000100: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000107: 	shrq	$0x14, %rdx
    0000010b: 	shlq	$0x17, %rbp
    0000010f: 	xorq	%rbp, %rdx
    00000112: 	xorq	%rdx, %rax
    00000115: 	xorl	%edx, %edx
    00000117: 	divq	%r11
    0000011a: 	movq	%rdx, %rax
    0000011d: 	addq	%rsi, %rax
    00000120: 	jns	.Ltmp4170 # Offset: 288
    00000122: 	movq	%rax, %rdx
    00000125: 	notq	%rdx
    00000128: 	shrq	$0x7, %rdx
    0000012c: 	notq	%rdx
.Ltmp4177:
    0000012f: 	movq	%rdx, %rbp
    00000132: 	movq	(%r10,%rdx,8), %rdx
    00000136: 	addq	$0x4, %rcx
    0000013a: 	shlq	$0x7, %rbp
    0000013e: 	subq	%rbp, %rax
    00000141: 	leaq	(%rdx,%rax,4), %rax
    00000145: 	movl	(%rax), %eax
    00000147: 	movl	%eax, -0x4(%rcx)
    0000014a: 	cmpq	%rcx, %r8
    0000014d: 	jne	.Ltmp4167 # Offset: 333
.Ltmp4169:
    0000014f: 	callq	clock@PLT # Offset: 335
    00000154: 	xorl	%ebx, %ebx
    00000156: 	xorl	%ebp, %ebp
    00000158: 	leaq	0x50(%rsp), %r13
    0000015d: 	movq	%rax, start_time(%rip)
    00000164: 	leaq	0x30(%rsp), %r14
.Ltmp4174:
    00000169: 	leaq	0xc8(%rbp), %rax
    00000170: 	movq	%rax, (%rsp)
    00000174: 	nopl	(%rax) # Size: 4
.Ltmp4172:
    00000178: 	movq	%rbp, %rax
    0000017b: 	movq	0x8(%rsp), %rcx
    00000180: 	movdqu	(%r15), %xmm4
    00000185: 	movq	%r13, %rsi
    00000188: 	movdqu	(%r12), %xmm2
    0000018e: 	movdqu	0x10(%r12), %xmm3
    00000195: 	addq	$0x1, %rbp
    00000199: 	movq	%r14, %rdi
    0000019c: 	movdqu	0x10(%r15), %xmm5
    000001a2: 	andl	$0x3ff, %eax
    000001a7: 	movaps	%xmm4, 0x30(%rsp)
    000001ac: 	movl	(%rcx,%rax,4), %edx
    000001af: 	movaps	%xmm2, 0x50(%rsp)
    000001b4: 	movq	0x10(%rsp), %rax
    000001b9: 	movaps	%xmm3, 0x60(%rsp)
    000001be: 	movaps	%xmm5, 0x40(%rsp)
    000001c3: 	callq	*%rax # Offset: 451
    000001c5: 	testb	%al, %al
    000001c7: 	jne	.Ltmp4171 # Offset: 455
    000001c9: 	cmpb	$0x0, 0x1f(%rsp)
    000001ce: 	movl	$0x1, %eax
    000001d3: 	cmovel	%eax, %ebx
.Ltmp4171:
    000001d6: 	cmpq	(%rsp), %rbp
    000001da: 	jne	.Ltmp4172 # Offset: 474
    000001dc: 	callq	clock@PLT # Offset: 476
    000001e1: 	movsd	gMinimumTimeTarget(%rip), %xmm1
    000001e9: 	pxor	%xmm0, %xmm0
    000001ed: 	movq	%rax, end_time(%rip)
    000001f4: 	subq	start_time(%rip), %rax
    000001fb: 	cvtsi2sd	%rax, %xmm0
    00000200: 	divsd	DATAat0x34410(%rip), %xmm0
    00000208: 	comisd	%xmm0, %xmm1
    0000020c: 	jbe	.Ltmp4173 # Offset: 524
    0000020e: 	cmpq	$0x5f5e0ff, %rbp
    00000215: 	jbe	.Ltmp4174 # Offset: 533
.Ltmp4173:
    0000021b: 	movq	0x28(%rsp), %rdx
    00000220: 	movq	0x20(%rsp), %rdi
    00000225: 	movq	%rbp, %rsi
    00000228: 	callq	_Z13record_resultdmmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 552
    0000022d: 	testb	%bl, %bl
    0000022f: 	jne	.Ltmp4175 # Offset: 559
.Ltmp4178:
    00000231: 	movq	0x78(%rsp), %rax
    00000236: 	subq	%fs:0x28, %rax
    0000023f: 	jne	.Ltmp4176 # Offset: 575
    00000241: 	movq	0x8(%rsp), %rdi
    00000246: 	addq	$0x88, %rsp
    0000024d: 	movl	$0x1000, %esi
    00000252: 	popq	%rbx
    00000253: 	popq	%rbp
    00000254: 	popq	%r12
    00000256: 	popq	%r13
    00000258: 	popq	%r14
    0000025a: 	popq	%r15
    0000025c: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 604
    00000261: 	nopl	(%rax) # Size: 7
.Ltmp4168:
    00000268: 	movq	%rax, %rdx
    0000026b: 	sarq	$0x7, %rdx
    0000026f: 	jmp	.Ltmp4177 # Offset: 623
.Ltmp4175:
    00000274: 	movq	0x28(%rsp), %rax
    00000279: 	leaq	DATAat0x34137(%rip), %rsi
    00000280: 	movl	$0x1, %edi
    00000285: 	movq	(%rax), %rdx
    00000288: 	xorl	%eax, %eax
    0000028a: 	callq	__printf_chk@PLT # Offset: 650
    0000028f: 	jmp	.Ltmp4178 # Offset: 655
.Ltmp4176:
    00000291: 	callq	__stack_chk_fail@PLT # Offset: 657
    00000296: 	endbr64
    0000029a: 	movq	%rax, %rbp
    0000029d: 	movq	0x8(%rsp), %rdi
    000002a2: 	movl	$0x1000, %esi
    000002a7: 	callq	_ZdlPvm@PLT # Offset: 679
    000002ac: 	movq	%rbp, %rdi
    000002af: 	callq	_Unwind_Resume@PLT # Offset: 687
DWARF CFI Instructions:
    <empty>
End of Function "_Z15TestSearchArrayISt15_Deque_iteratorIiRiPiEPFbS3_S3_iEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z13TestOneSearchISt15_Deque_iteratorIiRiPiEPFbS3_S3_iEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 427
  State       : disassembled
  Address     : 0x240e0
  Size        : 0x3ad
  MaxSize     : 0x3b0
  Offset      : 0x240e0
  Section     : .text
  Orc Section : .local.text._Z13TestOneSearchISt15_Deque_iteratorIiRiPiEPFbS3_S3_iEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0426:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rdx, %r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rsi, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x98, %rsp
    0000001e: 	movq	(%rdi), %rdx
    00000021: 	movq	(%rsi), %rsi
    00000024: 	movq	%rcx, 0x8(%rsp)
    00000029: 	movq	0x10(%rdi), %rcx
    0000002d: 	movq	%r8, 0x10(%rsp)
    00000032: 	movq	0x18(%rdi), %rdi
    00000036: 	movq	%fs:0x28, %rax
    0000003f: 	movq	%rax, 0x88(%rsp)
    00000047: 	xorl	%eax, %eax
    00000049: 	cmpq	%rsi, %rdx
    0000004c: 	jne	.Ltmp4179 # Offset: 76
    0000004e: 	jmp	.Ltmp4180 # Offset: 78
.Ltmp4181:
    00000050: 	movl	$0x5, (%rdx)
    00000056: 	cmpq	%rsi, %rax
    00000059: 	je	.Ltmp4180 # Offset: 89
.Ltmp4182:
    0000005b: 	movq	%rax, %rdx
.Ltmp4179:
    0000005e: 	leaq	0x4(%rdx), %rax
    00000062: 	cmpq	%rcx, %rax
    00000065: 	jne	.Ltmp4181 # Offset: 101
    00000067: 	movq	0x8(%rdi), %rax
    0000006b: 	leaq	0x8(%rdi), %r8
    0000006f: 	movl	$0x5, (%rdx)
    00000075: 	leaq	0x200(%rax), %rcx
    0000007c: 	cmpq	%rax, %rsi
    0000007f: 	je	.Ltmp4180 # Offset: 127
    00000081: 	movq	%r8, %rdi
    00000084: 	jmp	.Ltmp4182 # Offset: 132
    00000086: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp4180:
    00000090: 	movq	0x10(%rsp), %rsi
    00000095: 	leaq	0x60(%rsp), %r13
    0000009a: 	movzbl	%r9b, %eax
    0000009e: 	leaq	DATAat0x34160(%rip), %rdx
    000000a5: 	movq	%r13, %rdi
    000000a8: 	movl	%eax, 0x4(%rsp)
    000000ac: 	leaq	0x40(%rsp), %r15
    000000b1: 	leaq	0x20(%rsp), %r14
    000000b6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 182
    000000bb: 	movdqu	(%rbp), %xmm4
    000000c0: 	movdqu	0x10(%rbp), %xmm5
    000000c5: 	movq	%r13, %r8
    000000c8: 	movdqu	(%rbx), %xmm6
    000000cc: 	movdqu	0x10(%rbx), %xmm7
    000000d1: 	movq	%r12, %rdx
    000000d4: 	movq	%r15, %rsi
    000000d7: 	movl	0x4(%rsp), %r9d
    000000dc: 	movq	0x8(%rsp), %rcx
    000000e1: 	movq	%r14, %rdi
    000000e4: 	movaps	%xmm4, 0x40(%rsp)
    000000e9: 	movaps	%xmm5, 0x50(%rsp)
    000000ee: 	movaps	%xmm6, 0x20(%rsp)
    000000f3: 	movaps	%xmm7, 0x30(%rsp)
    000000f8: 	callq	_Z15TestSearchArrayISt15_Deque_iteratorIiRiPiEPFbS3_S3_iEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 248
    000000fd: 	movq	0x60(%rsp), %rdi
    00000102: 	leaq	0x70(%rsp), %rax
    00000107: 	movq	%rax, 0x18(%rsp)
    0000010c: 	cmpq	%rax, %rdi
    0000010f: 	je	.Ltmp4183 # Offset: 271
    00000111: 	movq	0x70(%rsp), %rax
    00000116: 	leaq	0x1(%rax), %rsi
    0000011a: 	callq	_ZdlPvm@PLT # Offset: 282
.Ltmp4183:
    0000011f: 	movq	(%rbx), %rdi
    00000122: 	movq	0x10(%rbx), %r8
    00000126: 	movq	0x18(%rbx), %r10
    0000012a: 	cmpq	$0x9, %r12
    0000012e: 	jbe	.Ltmp4184 # Offset: 302
    00000134: 	movabsq	$-0x3333333333333333, %rdx
    0000013e: 	movq	%r12, %rax
    00000141: 	mulq	%rdx
    00000144: 	shrq	$0x3, %rdx
.Ltmp4198:
    00000148: 	xorl	%esi, %esi
    0000014a: 	xorl	%r9d, %r9d
    0000014d: 	cmpq	$0x0, %r12
    00000151: 	jbe	.Ltmp4185 # Offset: 337
    00000153: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4190:
    00000158: 	xorl	%ecx, %ecx
    0000015a: 	jmp	.Ltmp4186 # Offset: 346
    0000015c: 	nopl	(%rax) # Size: 4
.Ltmp4188:
    00000160: 	addq	$0x1, %rcx
    00000164: 	movl	%r9d, (%rdi)
    00000167: 	addq	$0x1, %rsi
    0000016b: 	cmpq	%rdx, %rcx
    0000016e: 	jae	.Ltmp4187 # Offset: 366
    00000170: 	cmpq	%rsi, %r12
    00000173: 	jbe	.Ltmp4187 # Offset: 371
.Ltmp4189:
    00000175: 	movq	%rax, %rdi
.Ltmp4186:
    00000178: 	leaq	0x4(%rdi), %rax
    0000017c: 	cmpq	%r8, %rax
    0000017f: 	jne	.Ltmp4188 # Offset: 383
    00000181: 	movq	0x8(%r10), %rax
    00000185: 	leaq	0x8(%r10), %r11
    00000189: 	addq	$0x1, %rsi
    0000018d: 	movl	%r9d, (%rdi)
    00000190: 	addq	$0x1, %rcx
    00000194: 	movq	%r11, %r10
    00000197: 	leaq	0x200(%rax), %r8
    0000019e: 	cmpq	%rsi, %r12
    000001a1: 	jbe	.Ltmp4187 # Offset: 417
    000001a3: 	cmpq	%rdx, %rcx
    000001a6: 	jb	.Ltmp4189 # Offset: 422
    000001a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp4187:
    000001b0: 	movq	%rax, %rdi
    000001b3: 	addl	$0x1, %r9d
    000001b7: 	cmpq	%rsi, %r12
    000001ba: 	ja	.Ltmp4190 # Offset: 442
.Ltmp4185:
    000001bc: 	movq	0x10(%rsp), %rsi
    000001c1: 	leaq	DATAat0x3416e(%rip), %rdx
    000001c8: 	movq	%r13, %rdi
    000001cb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 459
    000001d0: 	movdqu	(%rbp), %xmm3
    000001d5: 	movdqu	0x10(%rbp), %xmm4
    000001da: 	movq	%r13, %r8
    000001dd: 	movdqu	(%rbx), %xmm5
    000001e1: 	movdqu	0x10(%rbx), %xmm6
    000001e6: 	movq	%r12, %rdx
    000001e9: 	movq	%r15, %rsi
    000001ec: 	movl	0x4(%rsp), %r9d
    000001f1: 	movq	0x8(%rsp), %rcx
    000001f6: 	movq	%r14, %rdi
    000001f9: 	movaps	%xmm3, 0x40(%rsp)
    000001fe: 	movaps	%xmm4, 0x50(%rsp)
    00000203: 	movaps	%xmm5, 0x20(%rsp)
    00000208: 	movaps	%xmm6, 0x30(%rsp)
    0000020d: 	callq	_Z15TestSearchArrayISt15_Deque_iteratorIiRiPiEPFbS3_S3_iEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 525
    00000212: 	movq	0x60(%rsp), %rdi
    00000217: 	cmpq	0x18(%rsp), %rdi
    0000021c: 	je	.Ltmp4191 # Offset: 540
    0000021e: 	movq	0x70(%rsp), %rax
    00000223: 	leaq	0x1(%rax), %rsi
    00000227: 	callq	_ZdlPvm@PLT # Offset: 551
.Ltmp4191:
    0000022c: 	movdqu	0x10(%rbx), %xmm0
    00000231: 	movdqu	(%rbp), %xmm2
    00000236: 	xorl	%ecx, %ecx
    00000238: 	movdqu	(%rbx), %xmm1
    0000023c: 	movdqu	0x10(%rbp), %xmm3
    00000241: 	movhlps	%xmm0, %xmm7
    00000244: 	movq	%xmm2, %rdi
    00000249: 	movq	%xmm0, %rsi
    0000024e: 	movq	%xmm1, %rdx
    00000253: 	movq	%xmm7, %r8
    00000258: 	cmpq	%rdi, %rdx
    0000025b: 	jne	.Ltmp4192 # Offset: 603
    0000025d: 	jmp	.Ltmp4193 # Offset: 605
    0000025f: 	nop # Size: 1
.Ltmp4194:
    00000260: 	movl	%ecx, (%rdx)
    00000262: 	addl	$0x1, %ecx
    00000265: 	cmpq	%rdi, %rax
    00000268: 	je	.Ltmp4193 # Offset: 616
.Ltmp4195:
    0000026a: 	movq	%rax, %rdx
.Ltmp4192:
    0000026d: 	leaq	0x4(%rdx), %rax
    00000271: 	cmpq	%rax, %rsi
    00000274: 	jne	.Ltmp4194 # Offset: 628
    00000276: 	movq	0x8(%r8), %rax
    0000027a: 	leaq	0x8(%r8), %r9
    0000027e: 	movl	%ecx, (%rdx)
    00000280: 	addl	$0x1, %ecx
    00000283: 	leaq	0x200(%rax), %rsi
    0000028a: 	cmpq	%rdi, %rax
    0000028d: 	je	.Ltmp4193 # Offset: 653
    0000028f: 	movq	%r9, %r8
    00000292: 	jmp	.Ltmp4195 # Offset: 658
    00000294: 	nopl	(%rax) # Size: 4
.Ltmp4193:
    00000298: 	movq	%r15, %rsi
    0000029b: 	movq	%r14, %rdi
    0000029e: 	movaps	%xmm2, 0x40(%rsp)
    000002a3: 	movaps	%xmm1, 0x20(%rsp)
    000002a8: 	movaps	%xmm0, 0x30(%rsp)
    000002ad: 	movaps	%xmm3, 0x50(%rsp)
    000002b2: 	callq	_Z18quicksort2_forwardISt15_Deque_iteratorIiRiPiEEvT_S4_ # Offset: 690
    000002b7: 	movq	0x10(%rsp), %rsi
    000002bc: 	leaq	DATAat0x34184(%rip), %rdx
    000002c3: 	movq	%r13, %rdi
    000002c6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 710
    000002cb: 	movdqu	0x10(%rbp), %xmm0
    000002d0: 	movdqu	(%rbp), %xmm1
    000002d5: 	movq	%r13, %r8
    000002d8: 	movdqu	(%rbx), %xmm2
    000002dc: 	movl	0x4(%rsp), %r9d
    000002e1: 	movq	%r12, %rdx
    000002e4: 	movq	%r15, %rsi
    000002e7: 	movaps	%xmm0, 0x50(%rsp)
    000002ec: 	movq	0x8(%rsp), %rcx
    000002f1: 	movdqu	0x10(%rbx), %xmm0
    000002f6: 	movq	%r14, %rdi
    000002f9: 	movaps	%xmm1, 0x40(%rsp)
    000002fe: 	movaps	%xmm2, 0x20(%rsp)
    00000303: 	movaps	%xmm0, 0x30(%rsp)
    00000308: 	callq	_Z15TestSearchArrayISt15_Deque_iteratorIiRiPiEPFbS3_S3_iEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 776
    0000030d: 	movq	0x60(%rsp), %rdi
    00000312: 	cmpq	0x18(%rsp), %rdi
    00000317: 	je	.Ltmp4196 # Offset: 791
    00000319: 	movq	0x70(%rsp), %rax
    0000031e: 	leaq	0x1(%rax), %rsi
    00000322: 	callq	_ZdlPvm@PLT # Offset: 802
.Ltmp4196:
    00000327: 	movq	0x88(%rsp), %rax
    0000032f: 	subq	%fs:0x28, %rax
    00000338: 	jne	.Ltmp4197 # Offset: 824
    0000033a: 	addq	$0x98, %rsp
    00000341: 	popq	%rbx
    00000342: 	popq	%rbp
    00000343: 	popq	%r12
    00000345: 	popq	%r13
    00000347: 	popq	%r14
    00000349: 	popq	%r15
    0000034b: 	retq # Offset: 843
.Ltmp4184:
    0000034c: 	testq	%r12, %r12
    0000034f: 	je	.Ltmp4185 # Offset: 847
    00000355: 	movl	$0x1, %edx
    0000035a: 	jmp	.Ltmp4198 # Offset: 858
.Ltmp4197:
    0000035f: 	callq	__stack_chk_fail@PLT # Offset: 863
    00000364: 	endbr64
.Ltmp4200:
    00000368: 	movq	%rax, %rbp
    0000036b: 	jmp	.Ltmp4199 # Offset: 875
    0000036d: 	endbr64
    00000371: 	jmp	.Ltmp4200 # Offset: 881
    00000373: 	endbr64
    00000377: 	movq	%rax, %rbp
    0000037a: 	movq	0x60(%rsp), %rdi
    0000037f: 	leaq	0x70(%rsp), %rax
    00000384: 	cmpq	%rax, %rdi
    00000387: 	je	.Ltmp4201 # Offset: 903
.Ltmp4202:
    00000389: 	movq	0x70(%rsp), %rax
    0000038e: 	leaq	0x1(%rax), %rsi
    00000392: 	callq	_ZdlPvm@PLT # Offset: 914
.Ltmp4201:
    00000397: 	movq	%rbp, %rdi
    0000039a: 	callq	_Unwind_Resume@PLT # Offset: 922
.Ltmp4199:
    0000039f: 	movq	0x60(%rsp), %rdi
    000003a4: 	cmpq	0x18(%rsp), %rdi
    000003a9: 	jne	.Ltmp4202 # Offset: 937
    000003ab: 	jmp	.Ltmp4201 # Offset: 939
DWARF CFI Instructions:
    <empty>
End of Function "_Z13TestOneSearchISt15_Deque_iteratorIiRiPiEPFbS3_S3_iEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z16TestOneContainerISt15_Deque_iteratorIiRiPiEEvT_S4_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 428
  State       : disassembled
  Address     : 0x24490
  Size        : 0x77c
  MaxSize     : 0x780
  Offset      : 0x24490
  Section     : .text
  Orc Section : .local.text._Z16TestOneContainerISt15_Deque_iteratorIiRiPiEEvT_S4_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0427:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdx, %r14
    0000000b: 	leaq	DATAat0x3418f(%rip), %rdx
    00000012: 	pushq	%r13
    00000014: 	movq	%rcx, %r13
    00000017: 	pushq	%r12
    00000019: 	movq	%rsi, %r12
    0000001c: 	movq	%rcx, %rsi
    0000001f: 	pushq	%rbp
    00000020: 	pushq	%rbx
    00000021: 	movq	%rdi, %rbx
    00000024: 	subq	$0x88, %rsp
    0000002b: 	movq	%fs:0x28, %rax
    00000034: 	movq	%rax, 0x78(%rsp)
    00000039: 	xorl	%eax, %eax
    0000003b: 	leaq	0x50(%rsp), %rbp
    00000040: 	leaq	0x30(%rsp), %r15
    00000045: 	movq	%rbp, %rdi
    00000048: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 72
    0000004d: 	movdqu	0x10(%rbx), %xmm4
    00000052: 	xorl	%r9d, %r9d
    00000055: 	movq	%rbp, %r8
    00000058: 	movdqu	(%r12), %xmm1
    0000005e: 	movdqu	(%rbx), %xmm3
    00000062: 	movq	%r14, %rdx
    00000065: 	movq	%r15, %rsi
    00000068: 	movdqu	0x10(%r12), %xmm2
    0000006f: 	leaq	0x10(%rsp), %rdi
    00000074: 	movaps	%xmm4, 0x20(%rsp)
    00000079: 	leaq	_Z14std_lowerboundISt15_Deque_iteratorIiRiPiEiET_S4_S4_T0_(%rip), %rcx
    00000080: 	movq	%rdi, 0x8(%rsp)
    00000085: 	movaps	%xmm1, 0x30(%rsp)
    0000008a: 	movaps	%xmm2, 0x40(%rsp)
    0000008f: 	movaps	%xmm3, 0x10(%rsp)
    00000094: 	callq	_Z13TestOneSearchISt15_Deque_iteratorIiRiPiEPFS3_S3_S3_iEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 148
    00000099: 	movq	0x50(%rsp), %rdi
    0000009e: 	leaq	0x60(%rsp), %rax
    000000a3: 	movq	%rax, (%rsp)
    000000a7: 	cmpq	%rax, %rdi
    000000aa: 	je	.Ltmp4203 # Offset: 170
    000000ac: 	movq	0x60(%rsp), %rax
    000000b1: 	leaq	0x1(%rax), %rsi
    000000b5: 	callq	_ZdlPvm@PLT # Offset: 181
.Ltmp4203:
    000000ba: 	leaq	DATAat0x341a1(%rip), %rdx
    000000c1: 	movq	%r13, %rsi
    000000c4: 	movq	%rbp, %rdi
    000000c7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 199
    000000cc: 	movdqu	0x10(%rbx), %xmm1
    000000d1: 	xorl	%r9d, %r9d
    000000d4: 	movq	%rbp, %r8
    000000d7: 	movdqu	(%r12), %xmm5
    000000dd: 	movdqu	(%rbx), %xmm7
    000000e1: 	movq	%r14, %rdx
    000000e4: 	movq	%r15, %rsi
    000000e7: 	movdqu	0x10(%r12), %xmm6
    000000ee: 	movq	0x8(%rsp), %rdi
    000000f3: 	movaps	%xmm1, 0x20(%rsp)
    000000f8: 	leaq	_Z12lower_bound1ISt15_Deque_iteratorIiRiPiEiET_S4_S4_T0_(%rip), %rcx
    000000ff: 	movaps	%xmm5, 0x30(%rsp)
    00000104: 	movaps	%xmm6, 0x40(%rsp)
    00000109: 	movaps	%xmm7, 0x10(%rsp)
    0000010e: 	callq	_Z13TestOneSearchISt15_Deque_iteratorIiRiPiEPFS3_S3_S3_iEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 270
    00000113: 	movq	0x50(%rsp), %rdi
    00000118: 	cmpq	(%rsp), %rdi
    0000011c: 	je	.Ltmp4204 # Offset: 284
    0000011e: 	movq	0x60(%rsp), %rax
    00000123: 	leaq	0x1(%rax), %rsi
    00000127: 	callq	_ZdlPvm@PLT # Offset: 295
.Ltmp4204:
    0000012c: 	leaq	DATAat0x341af(%rip), %rdx
    00000133: 	movq	%r13, %rsi
    00000136: 	movq	%rbp, %rdi
    00000139: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 313
    0000013e: 	movdqu	0x10(%rbx), %xmm5
    00000143: 	xorl	%r9d, %r9d
    00000146: 	movq	%rbp, %r8
    00000149: 	movdqu	(%r12), %xmm2
    0000014f: 	movdqu	(%rbx), %xmm4
    00000153: 	movq	%r14, %rdx
    00000156: 	movq	%r15, %rsi
    00000159: 	movdqu	0x10(%r12), %xmm3
    00000160: 	movq	0x8(%rsp), %rdi
    00000165: 	movaps	%xmm5, 0x20(%rsp)
    0000016a: 	leaq	_Z12lower_bound2ISt15_Deque_iteratorIiRiPiEiET_S4_S4_T0_(%rip), %rcx
    00000171: 	movaps	%xmm2, 0x30(%rsp)
    00000176: 	movaps	%xmm3, 0x40(%rsp)
    0000017b: 	movaps	%xmm4, 0x10(%rsp)
    00000180: 	callq	_Z13TestOneSearchISt15_Deque_iteratorIiRiPiEPFS3_S3_S3_iEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 384
    00000185: 	movq	0x50(%rsp), %rdi
    0000018a: 	cmpq	(%rsp), %rdi
    0000018e: 	je	.Ltmp4205 # Offset: 398
    00000190: 	movq	0x60(%rsp), %rax
    00000195: 	leaq	0x1(%rax), %rsi
    00000199: 	callq	_ZdlPvm@PLT # Offset: 409
.Ltmp4205:
    0000019e: 	leaq	DATAat0x341bd(%rip), %rdx
    000001a5: 	movq	%r13, %rsi
    000001a8: 	movq	%rbp, %rdi
    000001ab: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 427
    000001b0: 	movdqu	0x10(%rbx), %xmm1
    000001b5: 	xorl	%r9d, %r9d
    000001b8: 	movq	%rbp, %r8
    000001bb: 	movdqu	(%r12), %xmm6
    000001c1: 	movdqu	(%rbx), %xmm0
    000001c5: 	movq	%r14, %rdx
    000001c8: 	movq	%r15, %rsi
    000001cb: 	movdqu	0x10(%r12), %xmm7
    000001d2: 	movq	0x8(%rsp), %rdi
    000001d7: 	movaps	%xmm1, 0x20(%rsp)
    000001dc: 	leaq	_Z17lower_bound_recurISt15_Deque_iteratorIiRiPiEiET_S4_S4_T0_(%rip), %rcx
    000001e3: 	movaps	%xmm6, 0x30(%rsp)
    000001e8: 	movaps	%xmm7, 0x40(%rsp)
    000001ed: 	movaps	%xmm0, 0x10(%rsp)
    000001f2: 	callq	_Z13TestOneSearchISt15_Deque_iteratorIiRiPiEPFS3_S3_S3_iEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 498
    000001f7: 	movq	0x50(%rsp), %rdi
    000001fc: 	cmpq	(%rsp), %rdi
    00000200: 	je	.Ltmp4206 # Offset: 512
    00000202: 	movq	0x60(%rsp), %rax
    00000207: 	leaq	0x1(%rax), %rsi
    0000020b: 	callq	_ZdlPvm@PLT # Offset: 523
.Ltmp4206:
    00000210: 	leaq	DATAat0x341d4(%rip), %rdx
    00000217: 	movq	%r13, %rsi
    0000021a: 	movq	%rbp, %rdi
    0000021d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 541
    00000222: 	movdqu	(%r12), %xmm2
    00000228: 	movdqu	(%rbx), %xmm4
    0000022c: 	movl	$0x1, %r9d
    00000232: 	movdqu	0x10(%r12), %xmm3
    00000239: 	movq	%rbp, %r8
    0000023c: 	movq	%r14, %rdx
    0000023f: 	movq	%r15, %rsi
    00000242: 	movdqu	0x10(%rbx), %xmm5
    00000247: 	movq	0x8(%rsp), %rdi
    0000024c: 	movaps	%xmm2, 0x30(%rsp)
    00000251: 	leaq	_Z14std_upperboundISt15_Deque_iteratorIiRiPiEiET_S4_S4_T0_(%rip), %rcx
    00000258: 	movaps	%xmm3, 0x40(%rsp)
    0000025d: 	movaps	%xmm4, 0x10(%rsp)
    00000262: 	movaps	%xmm5, 0x20(%rsp)
    00000267: 	callq	_Z13TestOneSearchISt15_Deque_iteratorIiRiPiEPFS3_S3_S3_iEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 615
    0000026c: 	movq	0x50(%rsp), %rdi
    00000271: 	cmpq	(%rsp), %rdi
    00000275: 	je	.Ltmp4207 # Offset: 629
    00000277: 	movq	0x60(%rsp), %rax
    0000027c: 	leaq	0x1(%rax), %rsi
    00000280: 	callq	_ZdlPvm@PLT # Offset: 640
.Ltmp4207:
    00000285: 	leaq	DATAat0x341e6(%rip), %rdx
    0000028c: 	movq	%r13, %rsi
    0000028f: 	movq	%rbp, %rdi
    00000292: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 658
    00000297: 	movdqu	(%r12), %xmm6
    0000029d: 	movdqu	(%rbx), %xmm0
    000002a1: 	movl	$0x1, %r9d
    000002a7: 	movdqu	0x10(%r12), %xmm7
    000002ae: 	movq	%rbp, %r8
    000002b1: 	movq	%r14, %rdx
    000002b4: 	movq	%r15, %rsi
    000002b7: 	movdqu	0x10(%rbx), %xmm1
    000002bc: 	movq	0x8(%rsp), %rdi
    000002c1: 	movaps	%xmm6, 0x30(%rsp)
    000002c6: 	leaq	_Z12upper_bound1ISt15_Deque_iteratorIiRiPiEiET_S4_S4_T0_(%rip), %rcx
    000002cd: 	movaps	%xmm7, 0x40(%rsp)
    000002d2: 	movaps	%xmm0, 0x10(%rsp)
    000002d7: 	movaps	%xmm1, 0x20(%rsp)
    000002dc: 	callq	_Z13TestOneSearchISt15_Deque_iteratorIiRiPiEPFS3_S3_S3_iEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 732
    000002e1: 	movq	0x50(%rsp), %rdi
    000002e6: 	cmpq	(%rsp), %rdi
    000002ea: 	je	.Ltmp4208 # Offset: 746
    000002ec: 	movq	0x60(%rsp), %rax
    000002f1: 	leaq	0x1(%rax), %rsi
    000002f5: 	callq	_ZdlPvm@PLT # Offset: 757
.Ltmp4208:
    000002fa: 	leaq	DATAat0x341f4(%rip), %rdx
    00000301: 	movq	%r13, %rsi
    00000304: 	movq	%rbp, %rdi
    00000307: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 775
    0000030c: 	movdqu	(%r12), %xmm2
    00000312: 	movdqu	(%rbx), %xmm4
    00000316: 	movl	$0x1, %r9d
    0000031c: 	movdqu	0x10(%r12), %xmm3
    00000323: 	movq	%rbp, %r8
    00000326: 	movq	%r14, %rdx
    00000329: 	movq	%r15, %rsi
    0000032c: 	movdqu	0x10(%rbx), %xmm5
    00000331: 	movq	0x8(%rsp), %rdi
    00000336: 	movaps	%xmm2, 0x30(%rsp)
    0000033b: 	leaq	_Z12upper_bound2ISt15_Deque_iteratorIiRiPiEiET_S4_S4_T0_(%rip), %rcx
    00000342: 	movaps	%xmm3, 0x40(%rsp)
    00000347: 	movaps	%xmm4, 0x10(%rsp)
    0000034c: 	movaps	%xmm5, 0x20(%rsp)
    00000351: 	callq	_Z13TestOneSearchISt15_Deque_iteratorIiRiPiEPFS3_S3_S3_iEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 849
    00000356: 	movq	0x50(%rsp), %rdi
    0000035b: 	cmpq	(%rsp), %rdi
    0000035f: 	je	.Ltmp4209 # Offset: 863
    00000361: 	movq	0x60(%rsp), %rax
    00000366: 	leaq	0x1(%rax), %rsi
    0000036a: 	callq	_ZdlPvm@PLT # Offset: 874
.Ltmp4209:
    0000036f: 	leaq	DATAat0x34202(%rip), %rdx
    00000376: 	movq	%r13, %rsi
    00000379: 	movq	%rbp, %rdi
    0000037c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 892
    00000381: 	movdqu	(%r12), %xmm6
    00000387: 	movdqu	(%rbx), %xmm0
    0000038b: 	movl	$0x1, %r9d
    00000391: 	movdqu	0x10(%r12), %xmm7
    00000398: 	movq	%rbp, %r8
    0000039b: 	movq	%r14, %rdx
    0000039e: 	movq	%r15, %rsi
    000003a1: 	movdqu	0x10(%rbx), %xmm1
    000003a6: 	movq	0x8(%rsp), %rdi
    000003ab: 	movaps	%xmm6, 0x30(%rsp)
    000003b0: 	leaq	_Z17upper_bound_recurISt15_Deque_iteratorIiRiPiEiET_S4_S4_T0_(%rip), %rcx
    000003b7: 	movaps	%xmm7, 0x40(%rsp)
    000003bc: 	movaps	%xmm0, 0x10(%rsp)
    000003c1: 	movaps	%xmm1, 0x20(%rsp)
    000003c6: 	callq	_Z13TestOneSearchISt15_Deque_iteratorIiRiPiEPFS3_S3_S3_iEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 966
    000003cb: 	movq	0x50(%rsp), %rdi
    000003d0: 	cmpq	(%rsp), %rdi
    000003d4: 	je	.Ltmp4210 # Offset: 980
    000003d6: 	movq	0x60(%rsp), %rax
    000003db: 	leaq	0x1(%rax), %rsi
    000003df: 	callq	_ZdlPvm@PLT # Offset: 991
.Ltmp4210:
    000003e4: 	leaq	DATAat0x34219(%rip), %rdx
    000003eb: 	movq	%r13, %rsi
    000003ee: 	movq	%rbp, %rdi
    000003f1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1009
    000003f6: 	movdqu	0x10(%rbx), %xmm5
    000003fb: 	xorl	%r9d, %r9d
    000003fe: 	movq	%rbp, %r8
    00000401: 	movdqu	(%r12), %xmm2
    00000407: 	movdqu	(%rbx), %xmm4
    0000040b: 	movq	%r14, %rdx
    0000040e: 	movq	%r15, %rsi
    00000411: 	movdqu	0x10(%r12), %xmm3
    00000418: 	movq	0x8(%rsp), %rdi
    0000041d: 	movaps	%xmm5, 0x20(%rsp)
    00000422: 	leaq	_Z16std_binarysearchISt15_Deque_iteratorIiRiPiEiEbT_S4_T0_(%rip), %rcx
    00000429: 	movaps	%xmm2, 0x30(%rsp)
    0000042e: 	movaps	%xmm3, 0x40(%rsp)
    00000433: 	movaps	%xmm4, 0x10(%rsp)
    00000438: 	callq	_Z13TestOneSearchISt15_Deque_iteratorIiRiPiEPFbS3_S3_iEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 1080
    0000043d: 	movq	0x50(%rsp), %rdi
    00000442: 	cmpq	(%rsp), %rdi
    00000446: 	je	.Ltmp4211 # Offset: 1094
    00000448: 	movq	0x60(%rsp), %rax
    0000044d: 	leaq	0x1(%rax), %rsi
    00000451: 	callq	_ZdlPvm@PLT # Offset: 1105
.Ltmp4211:
    00000456: 	leaq	DATAat0x3422d(%rip), %rdx
    0000045d: 	movq	%r13, %rsi
    00000460: 	movq	%rbp, %rdi
    00000463: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1123
    00000468: 	movdqu	0x10(%rbx), %xmm1
    0000046d: 	xorl	%r9d, %r9d
    00000470: 	movq	%rbp, %r8
    00000473: 	movdqu	(%r12), %xmm6
    00000479: 	movdqu	(%rbx), %xmm0
    0000047d: 	movq	%r14, %rdx
    00000480: 	movq	%r15, %rsi
    00000483: 	movdqu	0x10(%r12), %xmm7
    0000048a: 	movq	0x8(%rsp), %rdi
    0000048f: 	movaps	%xmm1, 0x20(%rsp)
    00000494: 	leaq	_Z13binarysearch1ISt15_Deque_iteratorIiRiPiEiEbT_S4_T0_(%rip), %rcx
    0000049b: 	movaps	%xmm6, 0x30(%rsp)
    000004a0: 	movaps	%xmm7, 0x40(%rsp)
    000004a5: 	movaps	%xmm0, 0x10(%rsp)
    000004aa: 	callq	_Z13TestOneSearchISt15_Deque_iteratorIiRiPiEPFbS3_S3_iEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 1194
    000004af: 	movq	0x50(%rsp), %rdi
    000004b4: 	cmpq	(%rsp), %rdi
    000004b8: 	je	.Ltmp4212 # Offset: 1208
    000004ba: 	movq	0x60(%rsp), %rax
    000004bf: 	leaq	0x1(%rax), %rsi
    000004c3: 	callq	_ZdlPvm@PLT # Offset: 1219
.Ltmp4212:
    000004c8: 	leaq	DATAat0x3423d(%rip), %rdx
    000004cf: 	movq	%r13, %rsi
    000004d2: 	movq	%rbp, %rdi
    000004d5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1237
    000004da: 	movdqu	0x10(%rbx), %xmm5
    000004df: 	xorl	%r9d, %r9d
    000004e2: 	movq	%rbp, %r8
    000004e5: 	movdqu	(%r12), %xmm2
    000004eb: 	movdqu	(%rbx), %xmm4
    000004ef: 	movq	%r14, %rdx
    000004f2: 	movq	%r15, %rsi
    000004f5: 	movdqu	0x10(%r12), %xmm3
    000004fc: 	movq	0x8(%rsp), %rdi
    00000501: 	movaps	%xmm5, 0x20(%rsp)
    00000506: 	leaq	_Z13binarysearch2ISt15_Deque_iteratorIiRiPiEiEbT_S4_T0_(%rip), %rcx
    0000050d: 	movaps	%xmm2, 0x30(%rsp)
    00000512: 	movaps	%xmm3, 0x40(%rsp)
    00000517: 	movaps	%xmm4, 0x10(%rsp)
    0000051c: 	callq	_Z13TestOneSearchISt15_Deque_iteratorIiRiPiEPFbS3_S3_iEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 1308
    00000521: 	movq	0x50(%rsp), %rdi
    00000526: 	cmpq	(%rsp), %rdi
    0000052a: 	je	.Ltmp4213 # Offset: 1322
    0000052c: 	movq	0x60(%rsp), %rax
    00000531: 	leaq	0x1(%rax), %rsi
    00000535: 	callq	_ZdlPvm@PLT # Offset: 1333
.Ltmp4213:
    0000053a: 	leaq	DATAat0x3424d(%rip), %rdx
    00000541: 	movq	%r13, %rsi
    00000544: 	movq	%rbp, %rdi
    00000547: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1351
    0000054c: 	movdqu	0x10(%rbx), %xmm1
    00000551: 	xorl	%r9d, %r9d
    00000554: 	movq	%rbp, %r8
    00000557: 	movdqu	(%r12), %xmm6
    0000055d: 	movdqu	(%rbx), %xmm0
    00000561: 	movq	%r14, %rdx
    00000564: 	movq	%r15, %rsi
    00000567: 	movdqu	0x10(%r12), %xmm7
    0000056e: 	movq	0x8(%rsp), %rdi
    00000573: 	movaps	%xmm1, 0x20(%rsp)
    00000578: 	leaq	_Z13binarysearch3ISt15_Deque_iteratorIiRiPiEiEbT_S4_T0_(%rip), %rcx
    0000057f: 	movaps	%xmm6, 0x30(%rsp)
    00000584: 	movaps	%xmm7, 0x40(%rsp)
    00000589: 	movaps	%xmm0, 0x10(%rsp)
    0000058e: 	callq	_Z13TestOneSearchISt15_Deque_iteratorIiRiPiEPFbS3_S3_iEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 1422
    00000593: 	movq	0x50(%rsp), %rdi
    00000598: 	cmpq	(%rsp), %rdi
    0000059c: 	je	.Ltmp4214 # Offset: 1436
    0000059e: 	movq	0x60(%rsp), %rax
    000005a3: 	leaq	0x1(%rax), %rsi
    000005a7: 	callq	_ZdlPvm@PLT # Offset: 1447
.Ltmp4214:
    000005ac: 	leaq	DATAat0x3425d(%rip), %rdx
    000005b3: 	movq	%r13, %rsi
    000005b6: 	movq	%rbp, %rdi
    000005b9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1465
    000005be: 	movdqu	0x10(%rbx), %xmm5
    000005c3: 	xorl	%r9d, %r9d
    000005c6: 	movq	%rbp, %r8
    000005c9: 	movdqu	(%r12), %xmm2
    000005cf: 	movdqu	(%rbx), %xmm4
    000005d3: 	movq	%r14, %rdx
    000005d6: 	movq	%r15, %rsi
    000005d9: 	movdqu	0x10(%r12), %xmm3
    000005e0: 	movq	0x8(%rsp), %rdi
    000005e5: 	movaps	%xmm5, 0x20(%rsp)
    000005ea: 	leaq	_Z13binarysearch4ISt15_Deque_iteratorIiRiPiEiEbT_S4_T0_(%rip), %rcx
    000005f1: 	movaps	%xmm2, 0x30(%rsp)
    000005f6: 	movaps	%xmm3, 0x40(%rsp)
    000005fb: 	movaps	%xmm4, 0x10(%rsp)
    00000600: 	callq	_Z13TestOneSearchISt15_Deque_iteratorIiRiPiEPFbS3_S3_iEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 1536
    00000605: 	movq	0x50(%rsp), %rdi
    0000060a: 	cmpq	(%rsp), %rdi
    0000060e: 	je	.Ltmp4215 # Offset: 1550
    00000610: 	movq	0x60(%rsp), %rax
    00000615: 	leaq	0x1(%rax), %rsi
    00000619: 	callq	_ZdlPvm@PLT # Offset: 1561
.Ltmp4215:
    0000061e: 	leaq	DATAat0x3426d(%rip), %rdx
    00000625: 	movq	%r13, %rsi
    00000628: 	movq	%rbp, %rdi
    0000062b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1579
    00000630: 	movdqu	(%rbx), %xmm7
    00000634: 	xorl	%r9d, %r9d
    00000637: 	movq	%rbp, %r8
    0000063a: 	movdqu	0x10(%r12), %xmm0
    00000641: 	movdqu	(%r12), %xmm6
    00000647: 	movq	%r14, %rdx
    0000064a: 	movq	%r15, %rsi
    0000064d: 	movq	0x8(%rsp), %rdi
    00000652: 	leaq	_Z18binarysearch_recurISt15_Deque_iteratorIiRiPiEiEbT_S4_T0_(%rip), %rcx
    00000659: 	movaps	%xmm7, 0x10(%rsp)
    0000065e: 	movaps	%xmm0, 0x40(%rsp)
    00000663: 	movdqu	0x10(%rbx), %xmm0
    00000668: 	movaps	%xmm6, 0x30(%rsp)
    0000066d: 	movaps	%xmm0, 0x20(%rsp)
    00000672: 	callq	_Z13TestOneSearchISt15_Deque_iteratorIiRiPiEPFbS3_S3_iEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 1650
    00000677: 	movq	0x50(%rsp), %rdi
    0000067c: 	cmpq	(%rsp), %rdi
    00000680: 	je	.Ltmp4216 # Offset: 1664
    00000682: 	movq	0x60(%rsp), %rax
    00000687: 	leaq	0x1(%rax), %rsi
    0000068b: 	callq	_ZdlPvm@PLT # Offset: 1675
.Ltmp4216:
    00000690: 	movq	%rbp, %rdi
    00000693: 	leaq	DATAat0x34286(%rip), %rdx
    0000069a: 	movq	%r13, %rsi
    0000069d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1693
    000006a2: 	movq	%rbp, %rdi
    000006a5: 	callq	_Z9summarizeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1701
    000006aa: 	movq	0x50(%rsp), %rdi
    000006af: 	cmpq	(%rsp), %rdi
    000006b3: 	je	.Ltmp4217 # Offset: 1715
    000006b5: 	movq	0x60(%rsp), %rax
    000006ba: 	leaq	0x1(%rax), %rsi
    000006be: 	callq	_ZdlPvm@PLT # Offset: 1726
.Ltmp4217:
    000006c3: 	movq	0x78(%rsp), %rax
    000006c8: 	subq	%fs:0x28, %rax
    000006d1: 	jne	.Ltmp4218 # Offset: 1745
    000006d3: 	addq	$0x88, %rsp
    000006da: 	popq	%rbx
    000006db: 	popq	%rbp
    000006dc: 	popq	%r12
    000006de: 	popq	%r13
    000006e0: 	popq	%r14
    000006e2: 	popq	%r15
    000006e4: 	retq # Offset: 1764
.Ltmp4218:
    000006e5: 	callq	__stack_chk_fail@PLT # Offset: 1765
    000006ea: 	endbr64
.Ltmp4220:
    000006ee: 	movq	%rax, %rbp
    000006f1: 	jmp	.Ltmp4219 # Offset: 1777
    000006f3: 	endbr64
    000006f7: 	jmp	.Ltmp4220 # Offset: 1783
    000006f9: 	endbr64
    000006fd: 	jmp	.Ltmp4220 # Offset: 1789
    000006ff: 	endbr64
    00000703: 	jmp	.Ltmp4220 # Offset: 1795
    00000705: 	endbr64
    00000709: 	jmp	.Ltmp4220 # Offset: 1801
    0000070b: 	endbr64
    0000070f: 	jmp	.Ltmp4220 # Offset: 1807
    00000711: 	endbr64
    00000715: 	jmp	.Ltmp4220 # Offset: 1813
.Ltmp4219:
    00000717: 	movq	0x50(%rsp), %rdi
    0000071c: 	cmpq	(%rsp), %rdi
    00000720: 	je	.Ltmp4221 # Offset: 1824
.Ltmp4223:
    00000722: 	movq	0x60(%rsp), %rax
    00000727: 	leaq	0x1(%rax), %rsi
    0000072b: 	callq	_ZdlPvm@PLT # Offset: 1835
.Ltmp4221:
    00000730: 	movq	%rbp, %rdi
    00000733: 	callq	_Unwind_Resume@PLT # Offset: 1843
    00000738: 	endbr64
    0000073c: 	jmp	.Ltmp4220 # Offset: 1852
    0000073e: 	endbr64
    00000742: 	jmp	.Ltmp4220 # Offset: 1858
    00000744: 	endbr64
    00000748: 	jmp	.Ltmp4220 # Offset: 1864
    0000074a: 	endbr64
    0000074e: 	jmp	.Ltmp4220 # Offset: 1870
    00000750: 	endbr64
    00000754: 	jmp	.Ltmp4220 # Offset: 1876
    00000756: 	endbr64
    0000075a: 	movq	%rax, %rbp
    0000075d: 	jmp	.Ltmp4222 # Offset: 1885
    0000075f: 	endbr64
    00000763: 	jmp	.Ltmp4220 # Offset: 1891
    00000765: 	endbr64
    00000769: 	jmp	.Ltmp4220 # Offset: 1897
.Ltmp4222:
    0000076b: 	movq	0x50(%rsp), %rdi
    00000770: 	leaq	0x60(%rsp), %rax
    00000775: 	cmpq	%rax, %rdi
    00000778: 	jne	.Ltmp4223 # Offset: 1912
    0000077a: 	jmp	.Ltmp4221 # Offset: 1914
DWARF CFI Instructions:
    <empty>
End of Function "_Z16TestOneContainerISt15_Deque_iteratorIiRiPiEEvT_S4_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z24binarysearch_recur_innerISt15_Deque_iteratorIiRiPiEilEbT_T0_T1_" after disassembly {
  Number      : 429
  State       : disassembled
  Address     : 0x24c10
  Size        : 0x174
  MaxSize     : 0x180
  Offset      : 0x24c10
  Section     : .text
  Orc Section : .local.text._Z24binarysearch_recur_innerISt15_Deque_iteratorIiRiPiEilEbT_T0_T1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0428:
    00000000: 	endbr64
    00000004: 	subq	$0x38, %rsp
    00000008: 	movq	%fs:0x28, %rax
    00000011: 	movq	%rax, 0x28(%rsp)
    00000016: 	xorl	%eax, %eax
    00000018: 	testq	%rdx, %rdx
    0000001b: 	jne	.Ltmp4224 # Offset: 27
.Ltmp4230:
    0000001d: 	movq	0x28(%rsp), %rdx
    00000022: 	subq	%fs:0x28, %rdx
    0000002b: 	jne	.Ltmp4225 # Offset: 43
    00000031: 	addq	$0x38, %rsp
    00000035: 	retq # Offset: 53
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp4224:
    00000040: 	movdqu	(%rdi), %xmm1
    00000044: 	movq	%rdi, %rcx
    00000047: 	movq	%rdx, %r8
    0000004a: 	movdqu	0x10(%rcx), %xmm0
    0000004f: 	shrq	$0x3f, %r8
    00000053: 	movhlps	%xmm1, %xmm2
    00000056: 	movq	%xmm1, %rax
    0000005b: 	movq	%xmm1, %r11
    00000060: 	addq	%rdx, %r8
    00000063: 	movq	%xmm2, %rdi
    00000068: 	movhlps	%xmm0, %xmm3
    0000006b: 	sarq	%r8
    0000006e: 	movq	%xmm0, %r9
    00000073: 	subq	%rdi, %rax
    00000076: 	movq	%xmm3, %r10
    0000007b: 	sarq	$0x2, %rax
    0000007f: 	addq	%r8, %rax
    00000082: 	js	.Ltmp4226 # Offset: 130
    00000084: 	cmpq	$0x7f, %rax
    00000088: 	jg	.Ltmp4227 # Offset: 136
    0000008e: 	leaq	(%r11,%r8,4), %rax
    00000092: 	cmpl	%esi, (%rax)
    00000094: 	jge	.Ltmp4228 # Offset: 148
.Ltmp4231:
    0000009a: 	addq	$0x4, %rax
    0000009e: 	cmpq	%r9, %rax
    000000a1: 	je	.Ltmp4229 # Offset: 161
.Ltmp4233:
    000000a7: 	movq	%rdi, %xmm4
    000000ac: 	movq	%rax, %xmm0
    000000b1: 	movq	%rdi, 0x8(%rcx)
    000000b5: 	addq	$0x1, %r8
    000000b9: 	punpcklqdq	%xmm4, %xmm0
    000000bd: 	movq	%rax, (%rcx)
    000000c0: 	movq	%r10, %xmm5
    000000c5: 	subq	%r8, %rdx
    000000c8: 	movq	%r9, 0x10(%rcx)
    000000cc: 	movq	%rsp, %rdi
    000000cf: 	movq	%r10, 0x18(%rcx)
    000000d3: 	movaps	%xmm0, (%rsp)
    000000d7: 	movq	%r9, %xmm0
    000000dc: 	punpcklqdq	%xmm5, %xmm0
    000000e0: 	movaps	%xmm0, 0x10(%rsp)
    000000e5: 	callq	_Z24binarysearch_recur_innerISt15_Deque_iteratorIiRiPiEilEbT_T0_T1_ # Offset: 229
    000000ea: 	jmp	.Ltmp4230 # Offset: 234
    000000ef: 	nop # Size: 1
.Ltmp4226:
    000000f0: 	movq	%rax, %r11
    000000f3: 	notq	%r11
    000000f6: 	shrq	$0x7, %r11
    000000fa: 	notq	%r11
.Ltmp4232:
    000000fd: 	leaq	(%r10,%r11,8), %r10
    00000101: 	shlq	$0x7, %r11
    00000105: 	movq	(%r10), %rdi
    00000108: 	subq	%r11, %rax
    0000010b: 	leaq	(%rdi,%rax,4), %rax
    0000010f: 	leaq	0x200(%rdi), %r9
    00000116: 	cmpl	%esi, (%rax)
    00000118: 	jl	.Ltmp4231 # Offset: 280
.Ltmp4228:
    0000011e: 	movl	$0x1, %eax
    00000123: 	jle	.Ltmp4230 # Offset: 291
    00000129: 	movq	%rsp, %rdi
    0000012c: 	movq	%r8, %rdx
    0000012f: 	movaps	%xmm1, (%rsp)
    00000133: 	movaps	%xmm0, 0x10(%rsp)
    00000138: 	callq	_Z24binarysearch_recur_innerISt15_Deque_iteratorIiRiPiEilEbT_T0_T1_ # Offset: 312
    0000013d: 	jmp	.Ltmp4230 # Offset: 317
    00000142: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4227:
    00000148: 	movq	%rax, %r11
    0000014b: 	sarq	$0x7, %r11
    0000014f: 	jmp	.Ltmp4232 # Offset: 335
    00000151: 	nopl	(%rax) # Size: 7
.Ltmp4229:
    00000158: 	movq	0x8(%r10), %rax
    0000015c: 	addq	$0x8, %r10
    00000160: 	leaq	0x200(%rax), %r9
    00000167: 	movq	%rax, %rdi
    0000016a: 	jmp	.Ltmp4233 # Offset: 362
.Ltmp4225:
    0000016f: 	callq	__stack_chk_fail@PLT # Offset: 367
DWARF CFI Instructions:
    <empty>
End of Function "_Z24binarysearch_recur_innerISt15_Deque_iteratorIiRiPiEilEbT_T0_T1_"

Binary Function "_Z18binarysearch_recurISt15_Deque_iteratorIiRiPiEiEbT_S4_T0_" after disassembly {
  Number      : 430
  State       : disassembled
  Address     : 0x24d90
  Size        : 0x1a4
  MaxSize     : 0x1b0
  Offset      : 0x24d90
  Section     : .text
  Orc Section : .local.text._Z18binarysearch_recurISt15_Deque_iteratorIiRiPiEiEbT_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0429:
    00000000: 	endbr64
    00000004: 	subq	$0x38, %rsp
    00000008: 	movq	%rdi, %rcx
    0000000b: 	movl	%edx, %r9d
    0000000e: 	movq	(%rdi), %r10
    00000011: 	movq	%fs:0x28, %rax
    0000001a: 	movq	%rax, 0x28(%rsp)
    0000001f: 	movq	0x18(%rsi), %rax
    00000023: 	movq	0x18(%rcx), %r8
    00000027: 	movq	0x10(%rdi), %rdi
    0000002b: 	movq	%r8, %xmm2
    00000030: 	movq	%rdi, %xmm0
    00000035: 	punpcklqdq	%xmm2, %xmm0
    00000039: 	movq	%rax, %rdx
    0000003c: 	subq	%r8, %rdx
    0000003f: 	sarq	$0x3, %rdx
    00000043: 	cmpq	$0x1, %rax
    00000047: 	movq	(%rsi), %rax
    0000004a: 	adcq	$-0x1, %rdx
    0000004e: 	subq	0x8(%rsi), %rax
    00000052: 	movq	%rdi, %rsi
    00000055: 	sarq	$0x2, %rax
    00000059: 	shlq	$0x7, %rdx
    0000005d: 	subq	%r10, %rsi
    00000060: 	addq	%rax, %rdx
    00000063: 	sarq	$0x2, %rsi
    00000067: 	xorl	%eax, %eax
    00000069: 	addq	%rsi, %rdx
    0000006c: 	jne	.Ltmp4234 # Offset: 108
.Ltmp4240:
    0000006e: 	movq	0x28(%rsp), %rdx
    00000073: 	subq	%fs:0x28, %rdx
    0000007c: 	jne	.Ltmp4235 # Offset: 124
    00000082: 	addq	$0x38, %rsp
    00000086: 	retq # Offset: 134
    00000087: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4234:
    00000090: 	movq	0x8(%rcx), %rcx
    00000094: 	movq	%rdx, %r11
    00000097: 	movq	%r10, %rax
    0000009a: 	movq	%r10, %xmm1
    0000009f: 	shrq	$0x3f, %r11
    000000a3: 	addq	%rdx, %r11
    000000a6: 	subq	%rcx, %rax
    000000a9: 	movq	%rcx, %xmm3
    000000ae: 	sarq	%r11
    000000b1: 	sarq	$0x2, %rax
    000000b5: 	punpcklqdq	%xmm3, %xmm1
    000000b9: 	addq	%r11, %rax
    000000bc: 	js	.Ltmp4236 # Offset: 188
    000000be: 	cmpq	$0x7f, %rax
    000000c2: 	jg	.Ltmp4237 # Offset: 194
    000000c8: 	leaq	(%r10,%r11,4), %rax
    000000cc: 	cmpl	(%rax), %r9d
    000000cf: 	jle	.Ltmp4238 # Offset: 207
.Ltmp4241:
    000000d1: 	addq	$0x4, %rax
    000000d5: 	cmpq	%rdi, %rax
    000000d8: 	je	.Ltmp4239 # Offset: 216
.Ltmp4243:
    000000de: 	movq	%rcx, %xmm4
    000000e3: 	movq	%rax, %xmm0
    000000e8: 	addq	$0x1, %r11
    000000ec: 	movl	%r9d, %esi
    000000ef: 	punpcklqdq	%xmm4, %xmm0
    000000f3: 	movq	%r8, %xmm5
    000000f8: 	subq	%r11, %rdx
    000000fb: 	movaps	%xmm0, (%rsp)
    000000ff: 	movq	%rdi, %xmm0
    00000104: 	movq	%rsp, %rdi
    00000107: 	punpcklqdq	%xmm5, %xmm0
    0000010b: 	movaps	%xmm0, 0x10(%rsp)
    00000110: 	callq	_Z24binarysearch_recur_innerISt15_Deque_iteratorIiRiPiEilEbT_T0_T1_ # Offset: 272
    00000115: 	jmp	.Ltmp4240 # Offset: 277
    0000011a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4236:
    00000120: 	movq	%rax, %rsi
    00000123: 	notq	%rsi
    00000126: 	shrq	$0x7, %rsi
    0000012a: 	notq	%rsi
.Ltmp4242:
    0000012d: 	leaq	(%r8,%rsi,8), %r8
    00000131: 	shlq	$0x7, %rsi
    00000135: 	movq	(%r8), %rcx
    00000138: 	subq	%rsi, %rax
    0000013b: 	leaq	(%rcx,%rax,4), %rax
    0000013f: 	leaq	0x200(%rcx), %rdi
    00000146: 	cmpl	(%rax), %r9d
    00000149: 	jg	.Ltmp4241 # Offset: 329
.Ltmp4238:
    0000014b: 	movl	$0x1, %eax
    00000150: 	jge	.Ltmp4240 # Offset: 336
    00000156: 	movq	%rsp, %rdi
    00000159: 	movq	%r11, %rdx
    0000015c: 	movl	%r9d, %esi
    0000015f: 	movaps	%xmm1, (%rsp)
    00000163: 	movaps	%xmm0, 0x10(%rsp)
    00000168: 	callq	_Z24binarysearch_recur_innerISt15_Deque_iteratorIiRiPiEilEbT_T0_T1_ # Offset: 360
    0000016d: 	jmp	.Ltmp4240 # Offset: 365
    00000172: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4237:
    00000178: 	movq	%rax, %rsi
    0000017b: 	sarq	$0x7, %rsi
    0000017f: 	jmp	.Ltmp4242 # Offset: 383
    00000181: 	nopl	(%rax) # Size: 7
.Ltmp4239:
    00000188: 	movq	0x8(%r8), %rax
    0000018c: 	addq	$0x8, %r8
    00000190: 	leaq	0x200(%rax), %rdi
    00000197: 	movq	%rax, %rcx
    0000019a: 	jmp	.Ltmp4243 # Offset: 410
.Ltmp4235:
    0000019f: 	callq	__stack_chk_fail@PLT # Offset: 415
DWARF CFI Instructions:
    <empty>
End of Function "_Z18binarysearch_recurISt15_Deque_iteratorIiRiPiEiEbT_S4_T0_"

Binary Function "_Z15TestSearchArrayISt14_List_iteratorIiEPFS1_S1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 431
  State       : disassembled
  Address     : 0x24f40
  Size        : 0x25a
  MaxSize     : 0x260
  Offset      : 0x24f40
  Section     : .text
  Orc Section : .local.text._Z15TestSearchArrayISt14_List_iteratorIiEPFS1_S1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0430:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rcx, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	movl	$0x1000, %edi
    00000017: 	pushq	%rbp
    00000018: 	pushq	%rbx
    00000019: 	movq	%rsi, %rbx
    0000001c: 	subq	$0x28, %rsp
    00000020: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000027: 	movq	%r8, 0x18(%rsp)
    0000002c: 	movq	%rdx, 0x8(%rsp)
    00000031: 	movb	%r9b, 0x17(%rsp)
    00000036: 	callq	_Znwm@PLT # Offset: 54
    0000003b: 	movq	%rax, %r13
    0000003e: 	movl	$0x0, (%rax)
    00000044: 	addq	$0x4, %rax
    00000048: 	leaq	0x1000(%r13), %r8
    0000004f: 	cmpq	%r8, %rax
    00000052: 	je	.Ltmp4244 # Offset: 82
    00000054: 	leaq	0xc(%r13), %rdi
    00000058: 	movq	$0x0, 0x4(%r13)
    00000060: 	movq	$0x0, 0xff8(%r13)
    0000006b: 	andq	$-0x8, %rdi
    0000006f: 	subq	%rdi, %rax
    00000072: 	movq	%rax, %rcx
    00000075: 	xorl	%eax, %eax
    00000077: 	addl	$0xffc, %ecx
    0000007d: 	shrl	$0x3, %ecx
    00000080: 	rep		stosq	%rax, %es:(%rdi)
.Ltmp4244:
    00000083: 	movabsq	$0x5851f42d4c957f2d, %r9
    0000008d: 	movq	%r13, %rsi
    00000090: 	movabsq	$0x14057b7ef767814f, %rdi
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4247:
    000000a0: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000000a7: 	imulq	%r9, %rax
    000000ab: 	addq	%rdi, %rax
    000000ae: 	movq	%rax, %rdx
    000000b1: 	movq	%rax, %rcx
    000000b4: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000000bb: 	shlq	$0x17, %rcx
    000000bf: 	shrq	$0x14, %rdx
    000000c3: 	xorq	%rcx, %rdx
    000000c6: 	xorq	%rdx, %rax
    000000c9: 	xorl	%edx, %edx
    000000cb: 	divq	0x8(%rsp)
    000000d0: 	movq	%r12, %rax
    000000d3: 	leaq	-0x1(%rdx), %rcx
    000000d7: 	testq	%rdx, %rdx
    000000da: 	jle	.Ltmp4245 # Offset: 218
.Ltmp4246:
    000000e0: 	movq	(%rax), %rax
    000000e3: 	subq	$0x1, %rcx
    000000e7: 	jae	.Ltmp4246 # Offset: 231
.Ltmp4254:
    000000e9: 	movl	0x10(%rax), %eax
    000000ec: 	addq	$0x4, %rsi
    000000f0: 	movl	%eax, -0x4(%rsi)
    000000f3: 	cmpq	%r8, %rsi
    000000f6: 	jne	.Ltmp4247 # Offset: 246
.Ltmp4256:
    000000f8: 	callq	clock@PLT # Offset: 248
    000000fd: 	xorl	%r15d, %r15d
    00000100: 	xorl	%ebp, %ebp
    00000102: 	movq	%rax, start_time(%rip)
.Ltmp4251:
    00000109: 	leaq	0xc8(%rbp), %rax
    00000110: 	cmpb	$0x0, 0x17(%rsp)
    00000115: 	movq	%rax, (%rsp)
    00000119: 	jne	.Ltmp4248 # Offset: 281
    0000011f: 	nop # Size: 1
.Ltmp4249:
    00000120: 	movq	%rbp, %rax
    00000123: 	movq	%rbx, %rsi
    00000126: 	addq	$0x1, %rbp
    0000012a: 	movq	%r12, %rdi
    0000012d: 	andl	$0x3ff, %eax
    00000132: 	movl	(%r13,%rax,4), %edx
    00000137: 	callq	*%r14 # Offset: 311
    0000013a: 	cmpq	%rax, %rbx
    0000013d: 	movl	$0x1, %eax
    00000142: 	cmovel	%eax, %r15d
    00000146: 	cmpq	(%rsp), %rbp
    0000014a: 	jne	.Ltmp4249 # Offset: 330
.Ltmp4253:
    0000014c: 	callq	clock@PLT # Offset: 332
    00000151: 	movsd	gMinimumTimeTarget(%rip), %xmm1
    00000159: 	pxor	%xmm0, %xmm0
    0000015d: 	movq	%rax, end_time(%rip)
    00000164: 	subq	start_time(%rip), %rax
    0000016b: 	cvtsi2sd	%rax, %xmm0
    00000170: 	divsd	DATAat0x34410(%rip), %xmm0
    00000178: 	comisd	%xmm0, %xmm1
    0000017c: 	jbe	.Ltmp4250 # Offset: 380
    0000017e: 	cmpq	$0x5f5e0ff, %rbp
    00000185: 	jbe	.Ltmp4251 # Offset: 389
.Ltmp4250:
    00000187: 	movq	0x18(%rsp), %rdx
    0000018c: 	movq	0x8(%rsp), %rdi
    00000191: 	movq	%rbp, %rsi
    00000194: 	callq	_Z13record_resultdmmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 404
    00000199: 	testb	%r15b, %r15b
    0000019c: 	jne	.Ltmp4252 # Offset: 412
.Ltmp4257:
    000001a2: 	addq	$0x28, %rsp
    000001a6: 	movq	%r13, %rdi
    000001a9: 	movl	$0x1000, %esi
    000001ae: 	popq	%rbx
    000001af: 	popq	%rbp
    000001b0: 	popq	%r12
    000001b2: 	popq	%r13
    000001b4: 	popq	%r14
    000001b6: 	popq	%r15
    000001b8: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 440
    000001bd: 	nopl	(%rax) # Size: 3
.Ltmp4248:
    000001c0: 	movq	%rbp, %rax
    000001c3: 	movq	%rbx, %rsi
    000001c6: 	addq	$0x1, %rbp
    000001ca: 	movq	%r12, %rdi
    000001cd: 	andl	$0x3ff, %eax
    000001d2: 	movl	(%r13,%rax,4), %edx
    000001d7: 	callq	*%r14 # Offset: 471
    000001da: 	cmpq	(%rsp), %rbp
    000001de: 	jne	.Ltmp4248 # Offset: 478
    000001e0: 	jmp	.Ltmp4253 # Offset: 480
    000001e5: 	nopl	(%rax) # Size: 3
.Ltmp4245:
    000001e8: 	leaq	0x1(%rdx), %rcx
    000001ec: 	je	.Ltmp4254 # Offset: 492
    000001f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4255:
    000001f8: 	addq	$0x1, %rcx
    000001fc: 	movq	0x8(%rax), %rax
    00000200: 	cmpq	$0x1, %rcx
    00000204: 	jne	.Ltmp4255 # Offset: 516
    00000206: 	movl	0x10(%rax), %eax
    00000209: 	addq	$0x4, %rsi
    0000020d: 	movl	%eax, -0x4(%rsi)
    00000210: 	cmpq	%r8, %rsi
    00000213: 	jne	.Ltmp4247 # Offset: 531
    00000219: 	jmp	.Ltmp4256 # Offset: 537
.Ltmp4252:
    0000021e: 	movq	0x18(%rsp), %rax
    00000223: 	leaq	DATAat0x34137(%rip), %rsi
    0000022a: 	movl	$0x1, %edi
    0000022f: 	movq	(%rax), %rdx
    00000232: 	xorl	%eax, %eax
    00000234: 	callq	__printf_chk@PLT # Offset: 564
    00000239: 	jmp	.Ltmp4257 # Offset: 569
    0000023e: 	endbr64
    00000242: 	movq	%rax, %rbp
    00000245: 	movq	%r13, %rdi
    00000248: 	movl	$0x1000, %esi
    0000024d: 	callq	_ZdlPvm@PLT # Offset: 589
    00000252: 	movq	%rbp, %rdi
    00000255: 	callq	_Unwind_Resume@PLT # Offset: 597
DWARF CFI Instructions:
    <empty>
End of Function "_Z15TestSearchArrayISt14_List_iteratorIiEPFS1_S1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z18quicksort2_forwardISt14_List_iteratorIiEEvT_S2_" after disassembly {
  Number      : 432
  State       : disassembled
  Address     : 0x251a0
  Size        : 0x107
  MaxSize     : 0x110
  Offset      : 0x251a0
  Section     : .text
  Orc Section : .local.text._Z18quicksort2_forwardISt14_List_iteratorIiEEvT_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0431:
    00000000: 	endbr64
    00000004: 	cmpq	%rdi, %rsi
    00000007: 	je	.Ltmp4258 # Offset: 7
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rsi, %rbp
    00000016: 	pushq	%rbx
    00000017: 	movq	(%r12), %rbx
    0000001b: 	cmpq	%rbp, %rbx
    0000001e: 	je	.Ltmp4259 # Offset: 30
.Ltmp4267:
    00000024: 	movq	(%rbx), %rdx
    00000027: 	movl	0x10(%rbx), %edi
    0000002a: 	movl	0x10(%r12), %eax
    0000002f: 	cmpq	%rbp, %rdx
    00000032: 	je	.Ltmp4260 # Offset: 50
    00000038: 	cmpl	%edi, %eax
    0000003a: 	jle	.Ltmp4261 # Offset: 58
    0000003c: 	movl	%edi, 0x10(%r12)
    00000041: 	movl	%eax, %edi
    00000043: 	movl	%eax, 0x10(%rbx)
.Ltmp4261:
    00000046: 	movl	0x10(%rdx), %eax
    00000049: 	cmpl	%edi, %eax
    0000004b: 	jge	.Ltmp4262 # Offset: 75
    0000004d: 	movl	%eax, 0x10(%rbx)
    00000050: 	movl	%edi, 0x10(%rdx)
    00000053: 	movl	0x10(%rbx), %edi
    00000056: 	movl	0x10(%r12), %eax
    0000005b: 	cmpl	%eax, %edi
    0000005d: 	jge	.Ltmp4262 # Offset: 93
    0000005f: 	movl	%eax, 0x10(%rbx)
    00000062: 	movl	%edi, 0x10(%r12)
    00000067: 	movl	0x10(%rbx), %edi
.Ltmp4262:
    0000006a: 	movq	(%rdx), %rax
    0000006d: 	cmpq	%rbp, %rax
    00000070: 	je	.Ltmp4259 # Offset: 112
    00000072: 	movl	$0x2, %esi
    00000077: 	movl	$0x1, %r8d
    0000007d: 	jmp	.Ltmp4263 # Offset: 125
    0000007f: 	nop # Size: 1
.Ltmp4265:
    00000080: 	movq	%rax, %rdx
    00000083: 	movq	(%rax), %rax
.Ltmp4263:
    00000086: 	movl	0x10(%rdx), %ecx
    00000089: 	cmpl	%edi, %ecx
    0000008b: 	jge	.Ltmp4264 # Offset: 139
    0000008d: 	movl	0x10(%rbx), %r9d
    00000091: 	addq	$0x1, %r8
    00000095: 	movl	%r9d, 0x10(%rdx)
    00000099: 	movl	%ecx, 0x10(%rbx)
    0000009c: 	movq	(%rbx), %rbx
.Ltmp4264:
    0000009f: 	addq	$0x1, %rsi
    000000a3: 	cmpq	%rax, %rbp
    000000a6: 	jne	.Ltmp4265 # Offset: 166
    000000a8: 	subq	%r8, %rsi
    000000ab: 	cmpq	%rsi, %r8
    000000ae: 	jbe	.Ltmp4266 # Offset: 174
    000000b0: 	movq	%rbp, %rsi
    000000b3: 	movq	%rbx, %rdi
    000000b6: 	callq	_Z18quicksort2_forwardISt14_List_iteratorIiEEvT_S2_ # Offset: 182
    000000bb: 	cmpq	%r12, %rbx
    000000be: 	je	.Ltmp4259 # Offset: 190
    000000c0: 	movq	%rbx, %rbp
    000000c3: 	movq	%r12, %rbx
.Ltmp4268:
    000000c6: 	movq	%rbx, %r12
    000000c9: 	movq	(%r12), %rbx
    000000cd: 	cmpq	%rbp, %rbx
    000000d0: 	jne	.Ltmp4267 # Offset: 208
.Ltmp4259:
    000000d6: 	popq	%rbx
    000000d7: 	popq	%rbp
    000000d8: 	popq	%r12
    000000da: 	retq # Offset: 218
    000000db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4266:
    000000e0: 	movq	%rbx, %rsi
    000000e3: 	movq	%r12, %rdi
    000000e6: 	callq	_Z18quicksort2_forwardISt14_List_iteratorIiEEvT_S2_ # Offset: 230
    000000eb: 	cmpq	%rbp, %rbx
    000000ee: 	jne	.Ltmp4268 # Offset: 238
    000000f0: 	popq	%rbx
    000000f1: 	popq	%rbp
    000000f2: 	popq	%r12
    000000f4: 	retq # Offset: 244
.Ltmp4260:
    000000f5: 	cmpl	%edi, %eax
    000000f7: 	jle	.Ltmp4259 # Offset: 247
    000000f9: 	movl	%eax, 0x10(%rbx)
    000000fc: 	movl	%edi, 0x10(%r12)
    00000101: 	popq	%rbx
    00000102: 	popq	%rbp
    00000103: 	popq	%r12
    00000105: 	retq # Offset: 261
.Ltmp4258:
    00000106: 	retq # Offset: 262
DWARF CFI Instructions:
    <empty>
End of Function "_Z18quicksort2_forwardISt14_List_iteratorIiEEvT_S2_"

Binary Function "_Z13TestOneSearchISt14_List_iteratorIiEPFS1_S1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 433
  State       : disassembled
  Address     : 0x252b0
  Size        : 0x243
  MaxSize     : 0x250
  Offset      : 0x252b0
  Section     : .text
  Orc Section : .local.text._Z13TestOneSearchISt14_List_iteratorIiEPFS1_S1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0432:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdi, %r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdx, %r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rsi, %rbp
    00000016: 	pushq	%rbx
    00000017: 	movq	%rdi, %rbx
    0000001a: 	subq	$0x58, %rsp
    0000001e: 	movq	%rcx, 0x8(%rsp)
    00000023: 	movq	%r8, 0x10(%rsp)
    00000028: 	movq	%fs:0x28, %rax
    00000031: 	movq	%rax, 0x48(%rsp)
    00000036: 	xorl	%eax, %eax
    00000038: 	movq	%rdi, %rax
    0000003b: 	cmpq	%rsi, %rdi
    0000003e: 	je	.Ltmp4269 # Offset: 62
.Ltmp4270:
    00000040: 	movq	%rax, %rdx
    00000043: 	movq	(%rax), %rax
    00000046: 	movl	$0x5, 0x10(%rdx)
    0000004d: 	cmpq	%rbp, %rax
    00000050: 	jne	.Ltmp4270 # Offset: 80
.Ltmp4269:
    00000052: 	movq	0x10(%rsp), %rsi
    00000057: 	leaq	0x20(%rsp), %r15
    0000005c: 	leaq	DATAat0x34160(%rip), %rdx
    00000063: 	movzbl	%r9b, %r14d
    00000067: 	movq	%r15, %rdi
    0000006a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 106
    0000006f: 	movq	0x8(%rsp), %rcx
    00000074: 	movl	%r14d, %r9d
    00000077: 	movq	%r15, %r8
    0000007a: 	movq	%r12, %rdx
    0000007d: 	movq	%rbp, %rsi
    00000080: 	movq	%r13, %rdi
    00000083: 	callq	_Z15TestSearchArrayISt14_List_iteratorIiEPFS1_S1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 131
    00000088: 	movq	0x20(%rsp), %rdi
    0000008d: 	leaq	0x30(%rsp), %rax
    00000092: 	movq	%rax, 0x18(%rsp)
    00000097: 	cmpq	%rax, %rdi
    0000009a: 	je	.Ltmp4271 # Offset: 154
    0000009c: 	movq	0x30(%rsp), %rax
    000000a1: 	leaq	0x1(%rax), %rsi
    000000a5: 	callq	_ZdlPvm@PLT # Offset: 165
.Ltmp4271:
    000000aa: 	cmpq	$0x9, %r12
    000000ae: 	jbe	.Ltmp4272 # Offset: 174
    000000b4: 	movabsq	$-0x3333333333333333, %rdx
    000000be: 	movq	%r12, %rax
    000000c1: 	mulq	%rdx
    000000c4: 	shrq	$0x3, %rdx
.Ltmp4282:
    000000c8: 	movq	%r13, %rsi
    000000cb: 	xorl	%ecx, %ecx
    000000cd: 	xorl	%r8d, %r8d
    000000d0: 	cmpq	$0x0, %r12
    000000d4: 	jbe	.Ltmp4273 # Offset: 212
    000000d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp4276:
    000000e0: 	xorl	%eax, %eax
    000000e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4275:
    000000e8: 	movq	%rsi, %rdi
    000000eb: 	addq	$0x1, %rax
    000000ef: 	movq	(%rsi), %rsi
    000000f2: 	addq	$0x1, %rcx
    000000f6: 	movl	%r8d, 0x10(%rdi)
    000000fa: 	cmpq	%rdx, %rax
    000000fd: 	jae	.Ltmp4274 # Offset: 253
    000000ff: 	cmpq	%rcx, %r12
    00000102: 	ja	.Ltmp4275 # Offset: 258
.Ltmp4274:
    00000104: 	addl	$0x1, %r8d
    00000108: 	cmpq	%rcx, %r12
    0000010b: 	ja	.Ltmp4276 # Offset: 267
.Ltmp4273:
    0000010d: 	movq	0x10(%rsp), %rsi
    00000112: 	leaq	DATAat0x3416e(%rip), %rdx
    00000119: 	movq	%r15, %rdi
    0000011c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 284
    00000121: 	movq	0x8(%rsp), %rcx
    00000126: 	movl	%r14d, %r9d
    00000129: 	movq	%r15, %r8
    0000012c: 	movq	%r12, %rdx
    0000012f: 	movq	%rbp, %rsi
    00000132: 	movq	%r13, %rdi
    00000135: 	callq	_Z15TestSearchArrayISt14_List_iteratorIiEPFS1_S1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 309
    0000013a: 	movq	0x20(%rsp), %rdi
    0000013f: 	cmpq	0x18(%rsp), %rdi
    00000144: 	je	.Ltmp4277 # Offset: 324
    00000146: 	movq	0x30(%rsp), %rax
    0000014b: 	leaq	0x1(%rax), %rsi
    0000014f: 	callq	_ZdlPvm@PLT # Offset: 335
.Ltmp4277:
    00000154: 	xorl	%eax, %eax
    00000156: 	cmpq	%rbp, %r13
    00000159: 	je	.Ltmp4278 # Offset: 345
    0000015b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4279:
    00000160: 	movq	%rbx, %rdx
    00000163: 	movq	(%rbx), %rbx
    00000166: 	movl	%eax, 0x10(%rdx)
    00000169: 	addl	$0x1, %eax
    0000016c: 	cmpq	%rbx, %rbp
    0000016f: 	jne	.Ltmp4279 # Offset: 367
.Ltmp4278:
    00000171: 	movq	%rbp, %rsi
    00000174: 	movq	%r13, %rdi
    00000177: 	callq	_Z18quicksort2_forwardISt14_List_iteratorIiEEvT_S2_ # Offset: 375
    0000017c: 	movq	0x10(%rsp), %rsi
    00000181: 	leaq	DATAat0x34184(%rip), %rdx
    00000188: 	movq	%r15, %rdi
    0000018b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 395
    00000190: 	movq	0x8(%rsp), %rcx
    00000195: 	movl	%r14d, %r9d
    00000198: 	movq	%r15, %r8
    0000019b: 	movq	%r12, %rdx
    0000019e: 	movq	%rbp, %rsi
    000001a1: 	movq	%r13, %rdi
    000001a4: 	callq	_Z15TestSearchArrayISt14_List_iteratorIiEPFS1_S1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 420
    000001a9: 	movq	0x20(%rsp), %rdi
    000001ae: 	cmpq	0x18(%rsp), %rdi
    000001b3: 	je	.Ltmp4280 # Offset: 435
    000001b5: 	movq	0x30(%rsp), %rax
    000001ba: 	leaq	0x1(%rax), %rsi
    000001be: 	callq	_ZdlPvm@PLT # Offset: 446
.Ltmp4280:
    000001c3: 	movq	0x48(%rsp), %rax
    000001c8: 	subq	%fs:0x28, %rax
    000001d1: 	jne	.Ltmp4281 # Offset: 465
    000001d3: 	addq	$0x58, %rsp
    000001d7: 	popq	%rbx
    000001d8: 	popq	%rbp
    000001d9: 	popq	%r12
    000001db: 	popq	%r13
    000001dd: 	popq	%r14
    000001df: 	popq	%r15
    000001e1: 	retq # Offset: 481
.Ltmp4272:
    000001e2: 	testq	%r12, %r12
    000001e5: 	je	.Ltmp4273 # Offset: 485
    000001eb: 	movl	$0x1, %edx
    000001f0: 	jmp	.Ltmp4282 # Offset: 496
.Ltmp4281:
    000001f5: 	callq	__stack_chk_fail@PLT # Offset: 501
    000001fa: 	endbr64
.Ltmp4284:
    000001fe: 	movq	%rax, %rbp
    00000201: 	jmp	.Ltmp4283 # Offset: 513
    00000203: 	endbr64
    00000207: 	jmp	.Ltmp4284 # Offset: 519
    00000209: 	endbr64
    0000020d: 	movq	%rax, %rbp
    00000210: 	movq	0x20(%rsp), %rdi
    00000215: 	leaq	0x30(%rsp), %rax
    0000021a: 	cmpq	%rax, %rdi
    0000021d: 	je	.Ltmp4285 # Offset: 541
.Ltmp4286:
    0000021f: 	movq	0x30(%rsp), %rax
    00000224: 	leaq	0x1(%rax), %rsi
    00000228: 	callq	_ZdlPvm@PLT # Offset: 552
.Ltmp4285:
    0000022d: 	movq	%rbp, %rdi
    00000230: 	callq	_Unwind_Resume@PLT # Offset: 560
.Ltmp4283:
    00000235: 	movq	0x20(%rsp), %rdi
    0000023a: 	cmpq	0x18(%rsp), %rdi
    0000023f: 	jne	.Ltmp4286 # Offset: 575
    00000241: 	jmp	.Ltmp4285 # Offset: 577
DWARF CFI Instructions:
    <empty>
End of Function "_Z13TestOneSearchISt14_List_iteratorIiEPFS1_S1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z23lower_bound_recur_innerISt14_List_iteratorIiEilET_S2_T0_T1_" after disassembly {
  Number      : 434
  State       : disassembled
  Address     : 0x25500
  Size        : 0x78
  MaxSize     : 0x80
  Offset      : 0x25500
  Section     : .text
  Orc Section : .local.text._Z23lower_bound_recur_innerISt14_List_iteratorIiEilET_S2_T0_T1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0433:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
.Ltmp4293:
    00000007: 	testq	%rdx, %rdx
    0000000a: 	je	.Ltmp4287 # Offset: 10
.Ltmp4292:
    0000000c: 	movq	%rdx, %r9
    0000000f: 	shrq	$0x3f, %r9
    00000013: 	addq	%rdx, %r9
    00000016: 	sarq	%r9
    00000019: 	cmpq	$0x1, %rdx
    0000001d: 	jle	.Ltmp4288 # Offset: 29
    0000001f: 	leaq	-0x1(%r9), %r8
    00000023: 	movq	%rax, %rcx
    00000026: 	testq	%r9, %r9
    00000029: 	je	.Ltmp4289 # Offset: 41
    0000002b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4290:
    00000030: 	movq	(%rcx), %rcx
    00000033: 	subq	$0x1, %r8
    00000037: 	jae	.Ltmp4290 # Offset: 55
.Ltmp4289:
    00000039: 	cmpl	%esi, 0x10(%rcx)
    0000003c: 	jge	.Ltmp4291 # Offset: 60
    0000003e: 	addq	$0x1, %r9
    00000042: 	movq	(%rcx), %rax
    00000045: 	subq	%r9, %rdx
    00000048: 	testq	%rdx, %rdx
    0000004b: 	jne	.Ltmp4292 # Offset: 75
.Ltmp4287:
    0000004d: 	retq # Offset: 77
    0000004e: 	nop # Size: 2
.Ltmp4291:
    00000050: 	movq	%r9, %rdx
    00000053: 	jmp	.Ltmp4293 # Offset: 83
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp4288:
    00000058: 	leaq	0x1(%r9), %r8
    0000005c: 	movq	%rax, %rcx
    0000005f: 	testq	%r9, %r9
    00000062: 	je	.Ltmp4289 # Offset: 98
    00000064: 	nopl	(%rax) # Size: 4
.Ltmp4294:
    00000068: 	addq	$0x1, %r8
    0000006c: 	movq	0x8(%rcx), %rcx
    00000070: 	cmpq	$0x1, %r8
    00000074: 	jne	.Ltmp4294 # Offset: 116
    00000076: 	jmp	.Ltmp4289 # Offset: 118
DWARF CFI Instructions:
    <empty>
End of Function "_Z23lower_bound_recur_innerISt14_List_iteratorIiEilET_S2_T0_T1_"

Binary Function "_Z17lower_bound_recurISt14_List_iteratorIiEiET_S2_S2_T0_" after disassembly {
  Number      : 435
  State       : disassembled
  Address     : 0x25580
  Size        : 0x29b
  MaxSize     : 0x2a0
  Offset      : 0x25580
  Section     : .text
  Orc Section : .local.text._Z17lower_bound_recurISt14_List_iteratorIiEiET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0434:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	cmpq	%rdi, %rsi
    0000000a: 	je	.Ltmp4295 # Offset: 10
    00000010: 	movl	%edx, %r10d
    00000013: 	xorl	%eax, %eax
    00000015: 	movq	%rdi, %rdx
    00000018: 	nopl	(%rax,%rax) # Size: 8
.Ltmp4296:
    00000020: 	movq	(%rdx), %rdx
    00000023: 	movq	%rax, %rcx
    00000026: 	addq	$0x1, %rax
    0000002a: 	cmpq	%rdx, %rsi
    0000002d: 	jne	.Ltmp4296 # Offset: 45
    0000002f: 	movq	%rax, %r9
    00000032: 	sarq	%r9
    00000035: 	cmpq	$0x1, %rax
    00000039: 	je	.Ltmp4297 # Offset: 57
    0000003f: 	subq	$0x8, %rsp
    00000043: 	leaq	-0x1(%r9), %rdx
    00000047: 	testq	%r9, %r9
    0000004a: 	je	.Ltmp4298 # Offset: 74
    00000050: 	movq	%rdi, %rsi
    00000053: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4299:
    00000058: 	movq	(%rsi), %rsi
    0000005b: 	subq	$0x1, %rdx
    0000005f: 	jae	.Ltmp4299 # Offset: 95
    00000061: 	cmpl	0x10(%rsi), %r10d
    00000065: 	jle	.Ltmp4300 # Offset: 101
    0000006b: 	movq	(%rsi), %r8
    0000006e: 	subq	%r9, %rcx
    00000071: 	je	.Ltmp4301 # Offset: 113
.Ltmp4320:
    00000073: 	movq	%rcx, %rsi
    00000076: 	shrq	$0x3f, %rsi
    0000007a: 	addq	%rcx, %rsi
    0000007d: 	sarq	%rsi
    00000080: 	cmpq	$0x1, %rcx
    00000084: 	jle	.Ltmp4302 # Offset: 132
    0000008a: 	leaq	-0x1(%rsi), %rdx
    0000008e: 	testq	%rsi, %rsi
    00000091: 	je	.Ltmp4303 # Offset: 145
    00000097: 	movq	%r8, %rax
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4304:
    000000a0: 	movq	(%rax), %rax
    000000a3: 	subq	$0x1, %rdx
    000000a7: 	jae	.Ltmp4304 # Offset: 167
    000000a9: 	leaq	0x1(%rsi), %rdi
    000000ad: 	cmpl	0x10(%rax), %r10d
    000000b1: 	jle	.Ltmp4305 # Offset: 177
.Ltmp4317:
    000000b7: 	movq	(%rax), %r8
    000000ba: 	subq	%rdi, %rcx
    000000bd: 	movl	%r10d, %esi
    000000c0: 	movq	%rcx, %rdx
    000000c3: 	movq	%r8, %rdi
    000000c6: 	callq	_Z23lower_bound_recur_innerISt14_List_iteratorIiEilET_S2_T0_T1_ # Offset: 198
    000000cb: 	movq	%rax, %r8
.Ltmp4301:
    000000ce: 	movq	%r8, %rax
    000000d1: 	addq	$0x8, %rsp
    000000d5: 	retq # Offset: 213
    000000d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp4297:
    000000e0: 	cmpl	0x10(%rdi), %r10d
    000000e4: 	jg	.Ltmp4306 # Offset: 228
.Ltmp4295:
    000000ea: 	movq	%r8, %rax
    000000ed: 	retq # Offset: 237
    000000ee: 	nop # Size: 2
.Ltmp4300:
    000000f0: 	movq	%rax, %r11
    000000f3: 	sarq	$0x2, %r11
    000000f7: 	cmpq	$0x3, %rax
    000000fb: 	jle	.Ltmp4307 # Offset: 251
    00000101: 	leaq	-0x1(%r11), %rax
    00000105: 	movq	%rdi, %rdx
    00000108: 	testq	%r11, %r11
    0000010b: 	je	.Ltmp4308 # Offset: 267
    0000010d: 	nopl	(%rax) # Size: 3
.Ltmp4309:
    00000110: 	movq	(%rdx), %rdx
    00000113: 	subq	$0x1, %rax
    00000117: 	jae	.Ltmp4309 # Offset: 279
.Ltmp4308:
    00000119: 	cmpl	0x10(%rdx), %r10d
    0000011d: 	jle	.Ltmp4310 # Offset: 285
    0000011f: 	movq	(%rdx), %r8
    00000122: 	addq	$0x1, %r11
    00000126: 	movq	%r8, %rdi
    00000129: 	subq	%r11, %r9
    0000012c: 	je	.Ltmp4301 # Offset: 300
    0000012e: 	movq	%r9, %rdx
    00000131: 	shrq	$0x3f, %rdx
    00000135: 	addq	%r9, %rdx
    00000138: 	sarq	%rdx
    0000013b: 	cmpq	$0x1, %r9
    0000013f: 	jle	.Ltmp4311 # Offset: 319
    00000145: 	leaq	-0x1(%rdx), %rax
    00000149: 	testq	%rdx, %rdx
    0000014c: 	je	.Ltmp4312 # Offset: 332
    0000014e: 	nop # Size: 2
.Ltmp4313:
    00000150: 	movq	(%r8), %r8
    00000153: 	subq	$0x1, %rax
    00000157: 	jae	.Ltmp4313 # Offset: 343
.Ltmp4312:
    00000159: 	cmpl	0x10(%r8), %r10d
    0000015d: 	jle	.Ltmp4314 # Offset: 349
    0000015f: 	addq	$0x1, %rdx
    00000163: 	movq	(%r8), %rdi
    00000166: 	subq	%rdx, %r9
    00000169: 	movq	%r9, %rdx
    0000016c: 	jmp	.Ltmp4314 # Offset: 364
    0000016e: 	nop # Size: 2
.Ltmp4306:
    00000170: 	movq	(%rdi), %r8
    00000173: 	jmp	.Ltmp4295 # Offset: 371
.Ltmp4310:
    00000178: 	movq	%r11, %rdx
.Ltmp4314:
    0000017b: 	movl	%r10d, %esi
    0000017e: 	callq	_Z23lower_bound_recur_innerISt14_List_iteratorIiEilET_S2_T0_T1_ # Offset: 382
    00000183: 	addq	$0x8, %rsp
    00000187: 	movq	%rax, %r8
    0000018a: 	movq	%r8, %rax
    0000018d: 	retq # Offset: 397
.Ltmp4307:
    0000018e: 	movq	%rdi, %rdx
    00000191: 	testq	%r11, %r11
    00000194: 	je	.Ltmp4308 # Offset: 404
.Ltmp4315:
    00000196: 	jmp	.Ltmp4315 # Offset: 406
    00000198: 	nopl	(%rax,%rax) # Size: 8
.Ltmp4302:
    000001a0: 	leaq	0x1(%rsi), %rdi
    000001a4: 	movq	%r8, %rax
    000001a7: 	movq	%rdi, %rdx
    000001aa: 	testq	%rsi, %rsi
    000001ad: 	je	.Ltmp4303 # Offset: 429
    000001b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4316:
    000001b8: 	addq	$0x1, %rdx
    000001bc: 	movq	0x8(%rax), %rax
    000001c0: 	cmpq	$0x1, %rdx
    000001c4: 	jne	.Ltmp4316 # Offset: 452
    000001c6: 	cmpl	0x10(%rax), %r10d
    000001ca: 	jg	.Ltmp4317 # Offset: 458
    000001d0: 	testq	%rcx, %rcx
    000001d3: 	leaq	0x3(%rcx), %rdx
    000001d7: 	movq	%r8, %rdi
    000001da: 	cmovnsq	%rcx, %rdx
    000001de: 	sarq	$0x2, %rdx
.Ltmp4321:
    000001e2: 	leaq	0x1(%rdx), %rax
    000001e6: 	testq	%rdx, %rdx
    000001e9: 	je	.Ltmp4318 # Offset: 489
    000001eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4319:
    000001f0: 	addq	$0x1, %rax
    000001f4: 	movq	0x8(%r8), %r8
    000001f8: 	cmpq	$0x1, %rax
    000001fc: 	jne	.Ltmp4319 # Offset: 508
.Ltmp4318:
    000001fe: 	cmpl	0x10(%r8), %r10d
    00000202: 	jle	.Ltmp4314 # Offset: 514
    00000208: 	leaq	0x1(%rdx), %rax
    0000020c: 	movq	(%r8), %rdi
    0000020f: 	subq	%rax, %rsi
    00000212: 	movq	%rsi, %rdx
    00000215: 	movl	%r10d, %esi
    00000218: 	callq	_Z23lower_bound_recur_innerISt14_List_iteratorIiEilET_S2_T0_T1_ # Offset: 536
    0000021d: 	movq	%rax, %r8
    00000220: 	jmp	.Ltmp4301 # Offset: 544
.Ltmp4298:
    00000225: 	cmpl	0x10(%rdi), %r10d
    00000229: 	jle	.Ltmp4301 # Offset: 553
    0000022f: 	movq	(%rdi), %r8
    00000232: 	jmp	.Ltmp4320 # Offset: 562
.Ltmp4305:
    00000237: 	movq	%rcx, %rdx
    0000023a: 	movq	%r8, %rdi
    0000023d: 	sarq	$0x2, %rdx
    00000241: 	cmpq	$0x3, %rcx
    00000245: 	jle	.Ltmp4321 # Offset: 581
    00000247: 	leaq	-0x1(%rdx), %rax
    0000024b: 	testq	%rdx, %rdx
    0000024e: 	je	.Ltmp4318 # Offset: 590
.Ltmp4322:
    00000250: 	movq	(%r8), %r8
    00000253: 	subq	$0x1, %rax
    00000257: 	jae	.Ltmp4322 # Offset: 599
    00000259: 	jmp	.Ltmp4318 # Offset: 601
.Ltmp4303:
    0000025b: 	cmpl	0x10(%r8), %r10d
    0000025f: 	jle	.Ltmp4301 # Offset: 607
    00000265: 	movq	%r8, %rax
    00000268: 	movl	$0x1, %edi
    0000026d: 	jmp	.Ltmp4317 # Offset: 621
    00000272: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4311:
    00000278: 	leaq	0x1(%rdx), %rax
    0000027c: 	testq	%rdx, %rdx
    0000027f: 	je	.Ltmp4312 # Offset: 639
    00000285: 	nopl	(%rax) # Size: 3
.Ltmp4323:
    00000288: 	addq	$0x1, %rax
    0000028c: 	movq	0x8(%r8), %r8
    00000290: 	cmpq	$0x1, %rax
    00000294: 	jne	.Ltmp4323 # Offset: 660
    00000296: 	jmp	.Ltmp4312 # Offset: 662
DWARF CFI Instructions:
    <empty>
End of Function "_Z17lower_bound_recurISt14_List_iteratorIiEiET_S2_S2_T0_"

Binary Function "_Z23upper_bound_recur_innerISt14_List_iteratorIiEilET_S2_T0_T1_" after disassembly {
  Number      : 436
  State       : disassembled
  Address     : 0x25820
  Size        : 0x78
  MaxSize     : 0x80
  Offset      : 0x25820
  Section     : .text
  Orc Section : .local.text._Z23upper_bound_recur_innerISt14_List_iteratorIiEilET_S2_T0_T1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0435:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
.Ltmp4330:
    00000007: 	testq	%rdx, %rdx
    0000000a: 	je	.Ltmp4324 # Offset: 10
.Ltmp4329:
    0000000c: 	movq	%rdx, %r9
    0000000f: 	shrq	$0x3f, %r9
    00000013: 	addq	%rdx, %r9
    00000016: 	sarq	%r9
    00000019: 	cmpq	$0x1, %rdx
    0000001d: 	jle	.Ltmp4325 # Offset: 29
    0000001f: 	leaq	-0x1(%r9), %r8
    00000023: 	movq	%rax, %rcx
    00000026: 	testq	%r9, %r9
    00000029: 	je	.Ltmp4326 # Offset: 41
    0000002b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4327:
    00000030: 	movq	(%rcx), %rcx
    00000033: 	subq	$0x1, %r8
    00000037: 	jae	.Ltmp4327 # Offset: 55
.Ltmp4326:
    00000039: 	cmpl	%esi, 0x10(%rcx)
    0000003c: 	jg	.Ltmp4328 # Offset: 60
    0000003e: 	addq	$0x1, %r9
    00000042: 	movq	(%rcx), %rax
    00000045: 	subq	%r9, %rdx
    00000048: 	testq	%rdx, %rdx
    0000004b: 	jne	.Ltmp4329 # Offset: 75
.Ltmp4324:
    0000004d: 	retq # Offset: 77
    0000004e: 	nop # Size: 2
.Ltmp4328:
    00000050: 	movq	%r9, %rdx
    00000053: 	jmp	.Ltmp4330 # Offset: 83
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp4325:
    00000058: 	leaq	0x1(%r9), %r8
    0000005c: 	movq	%rax, %rcx
    0000005f: 	testq	%r9, %r9
    00000062: 	je	.Ltmp4326 # Offset: 98
    00000064: 	nopl	(%rax) # Size: 4
.Ltmp4331:
    00000068: 	addq	$0x1, %r8
    0000006c: 	movq	0x8(%rcx), %rcx
    00000070: 	cmpq	$0x1, %r8
    00000074: 	jne	.Ltmp4331 # Offset: 116
    00000076: 	jmp	.Ltmp4326 # Offset: 118
DWARF CFI Instructions:
    <empty>
End of Function "_Z23upper_bound_recur_innerISt14_List_iteratorIiEilET_S2_T0_T1_"

Binary Function "_Z17upper_bound_recurISt14_List_iteratorIiEiET_S2_S2_T0_" after disassembly {
  Number      : 437
  State       : disassembled
  Address     : 0x258a0
  Size        : 0x29b
  MaxSize     : 0x2a0
  Offset      : 0x258a0
  Section     : .text
  Orc Section : .local.text._Z17upper_bound_recurISt14_List_iteratorIiEiET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0436:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	cmpq	%rdi, %rsi
    0000000a: 	je	.Ltmp4332 # Offset: 10
    00000010: 	movl	%edx, %r10d
    00000013: 	xorl	%eax, %eax
    00000015: 	movq	%rdi, %rdx
    00000018: 	nopl	(%rax,%rax) # Size: 8
.Ltmp4333:
    00000020: 	movq	(%rdx), %rdx
    00000023: 	movq	%rax, %rcx
    00000026: 	addq	$0x1, %rax
    0000002a: 	cmpq	%rdx, %rsi
    0000002d: 	jne	.Ltmp4333 # Offset: 45
    0000002f: 	movq	%rax, %rdx
    00000032: 	sarq	%rdx
    00000035: 	cmpq	$0x1, %rax
    00000039: 	je	.Ltmp4334 # Offset: 57
    0000003f: 	subq	$0x8, %rsp
    00000043: 	leaq	-0x1(%rdx), %rsi
    00000047: 	testq	%rdx, %rdx
    0000004a: 	je	.Ltmp4335 # Offset: 74
    00000050: 	movq	%rdi, %r8
    00000053: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4336:
    00000058: 	movq	(%r8), %r8
    0000005b: 	subq	$0x1, %rsi
    0000005f: 	jae	.Ltmp4336 # Offset: 95
    00000061: 	cmpl	0x10(%r8), %r10d
    00000065: 	jl	.Ltmp4337 # Offset: 101
    0000006b: 	movq	(%r8), %r9
    0000006e: 	subq	%rdx, %rcx
    00000071: 	je	.Ltmp4338 # Offset: 113
.Ltmp4358:
    00000077: 	movq	%rcx, %rsi
    0000007a: 	shrq	$0x3f, %rsi
    0000007e: 	addq	%rcx, %rsi
    00000081: 	sarq	%rsi
    00000084: 	cmpq	$0x1, %rcx
    00000088: 	jle	.Ltmp4339 # Offset: 136
    0000008e: 	leaq	-0x1(%rsi), %rdx
    00000092: 	testq	%rsi, %rsi
    00000095: 	je	.Ltmp4340 # Offset: 149
    0000009b: 	movq	%r9, %rax
    0000009e: 	nop # Size: 2
.Ltmp4341:
    000000a0: 	movq	(%rax), %rax
    000000a3: 	subq	$0x1, %rdx
    000000a7: 	jae	.Ltmp4341 # Offset: 167
    000000a9: 	leaq	0x1(%rsi), %rdi
    000000ad: 	cmpl	0x10(%rax), %r10d
    000000b1: 	jl	.Ltmp4342 # Offset: 177
.Ltmp4354:
    000000b7: 	movq	(%rax), %r9
    000000ba: 	movq	%r9, %r8
    000000bd: 	subq	%rdi, %rcx
    000000c0: 	je	.Ltmp4338 # Offset: 192
    000000c6: 	movq	%rcx, %rdx
    000000c9: 	shrq	$0x3f, %rdx
    000000cd: 	addq	%rcx, %rdx
    000000d0: 	sarq	%rdx
    000000d3: 	cmpq	$0x1, %rcx
    000000d7: 	jle	.Ltmp4343 # Offset: 215
    000000dd: 	leaq	-0x1(%rdx), %rax
    000000e1: 	testq	%rdx, %rdx
    000000e4: 	je	.Ltmp4344 # Offset: 228
    000000e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp4345:
    000000f0: 	movq	(%r9), %r9
    000000f3: 	subq	$0x1, %rax
    000000f7: 	jae	.Ltmp4345 # Offset: 247
.Ltmp4344:
    000000f9: 	cmpl	0x10(%r9), %r10d
    000000fd: 	jl	.Ltmp4346 # Offset: 253
    000000ff: 	addq	$0x1, %rdx
    00000103: 	movq	(%r9), %r8
    00000106: 	subq	%rdx, %rcx
    00000109: 	movq	%rcx, %rdx
.Ltmp4346:
    0000010c: 	movl	%r10d, %esi
    0000010f: 	movq	%r8, %rdi
    00000112: 	callq	_Z23upper_bound_recur_innerISt14_List_iteratorIiEilET_S2_T0_T1_ # Offset: 274
    00000117: 	movq	%rax, %r9
    0000011a: 	jmp	.Ltmp4338 # Offset: 282
    0000011c: 	nopl	(%rax) # Size: 4
.Ltmp4334:
    00000120: 	cmpl	0x10(%rdi), %r10d
    00000124: 	jge	.Ltmp4347 # Offset: 292
.Ltmp4332:
    00000126: 	movq	%r9, %rax
    00000129: 	retq # Offset: 297
    0000012a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4337:
    00000130: 	movq	%rax, %r8
    00000133: 	sarq	$0x2, %r8
    00000137: 	cmpq	$0x3, %rax
    0000013b: 	jle	.Ltmp4348 # Offset: 315
    0000013d: 	leaq	-0x1(%r8), %rax
    00000141: 	testq	%r8, %r8
    00000144: 	je	.Ltmp4349 # Offset: 324
    00000146: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp4350:
    00000150: 	movq	(%r9), %r9
    00000153: 	subq	$0x1, %rax
    00000157: 	jae	.Ltmp4350 # Offset: 343
.Ltmp4349:
    00000159: 	cmpl	0x10(%r9), %r10d
    0000015d: 	jge	.Ltmp4351 # Offset: 349
    0000015f: 	movq	%r8, %rdx
    00000162: 	movl	%r10d, %esi
    00000165: 	callq	_Z23upper_bound_recur_innerISt14_List_iteratorIiEilET_S2_T0_T1_ # Offset: 357
    0000016a: 	movq	%rax, %r9
.Ltmp4338:
    0000016d: 	movq	%r9, %rax
    00000170: 	addq	$0x8, %rsp
    00000174: 	retq # Offset: 372
    00000175: 	nopl	(%rax) # Size: 3
.Ltmp4347:
    00000178: 	movq	(%rdi), %r9
    0000017b: 	jmp	.Ltmp4332 # Offset: 379
.Ltmp4351:
    0000017d: 	movq	(%r9), %rdi
    00000180: 	addq	$0x1, %r8
    00000184: 	movl	%r10d, %esi
    00000187: 	subq	%r8, %rdx
    0000018a: 	callq	_Z23upper_bound_recur_innerISt14_List_iteratorIiEilET_S2_T0_T1_ # Offset: 394
    0000018f: 	movq	%rax, %r9
    00000192: 	jmp	.Ltmp4338 # Offset: 402
.Ltmp4348:
    00000194: 	testq	%r8, %r8
    00000197: 	je	.Ltmp4349 # Offset: 407
.Ltmp4352:
    00000199: 	jmp	.Ltmp4352 # Offset: 409
    0000019b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4339:
    000001a0: 	leaq	0x1(%rsi), %rdi
    000001a4: 	movq	%r9, %rax
    000001a7: 	movq	%rdi, %rdx
    000001aa: 	testq	%rsi, %rsi
    000001ad: 	je	.Ltmp4340 # Offset: 429
    000001b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4353:
    000001b8: 	addq	$0x1, %rdx
    000001bc: 	movq	0x8(%rax), %rax
    000001c0: 	cmpq	$0x1, %rdx
    000001c4: 	jne	.Ltmp4353 # Offset: 452
    000001c6: 	cmpl	0x10(%rax), %r10d
    000001ca: 	jge	.Ltmp4354 # Offset: 458
    000001d0: 	testq	%rcx, %rcx
    000001d3: 	leaq	0x3(%rcx), %rdx
    000001d7: 	movq	%r9, %rdi
    000001da: 	cmovnsq	%rcx, %rdx
    000001de: 	sarq	$0x2, %rdx
.Ltmp4359:
    000001e2: 	leaq	0x1(%rdx), %rax
    000001e6: 	testq	%rdx, %rdx
    000001e9: 	je	.Ltmp4355 # Offset: 489
    000001eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4356:
    000001f0: 	addq	$0x1, %rax
    000001f4: 	movq	0x8(%r9), %r9
    000001f8: 	cmpq	$0x1, %rax
    000001fc: 	jne	.Ltmp4356 # Offset: 508
.Ltmp4355:
    000001fe: 	cmpl	0x10(%r9), %r10d
    00000202: 	jl	.Ltmp4357 # Offset: 514
    00000204: 	leaq	0x1(%rdx), %rax
    00000208: 	movq	(%r9), %rdi
    0000020b: 	subq	%rax, %rsi
    0000020e: 	movq	%rsi, %rdx
.Ltmp4357:
    00000211: 	movl	%r10d, %esi
    00000214: 	callq	_Z23upper_bound_recur_innerISt14_List_iteratorIiEilET_S2_T0_T1_ # Offset: 532
    00000219: 	movq	%rax, %r9
    0000021c: 	jmp	.Ltmp4338 # Offset: 540
.Ltmp4335:
    00000221: 	cmpl	0x10(%rdi), %r10d
    00000225: 	jl	.Ltmp4338 # Offset: 549
    0000022b: 	movq	(%rdi), %r9
    0000022e: 	jmp	.Ltmp4358 # Offset: 558
.Ltmp4342:
    00000233: 	movq	%rcx, %rdx
    00000236: 	movq	%r9, %rdi
    00000239: 	sarq	$0x2, %rdx
    0000023d: 	cmpq	$0x3, %rcx
    00000241: 	jle	.Ltmp4359 # Offset: 577
    00000243: 	leaq	-0x1(%rdx), %rax
    00000247: 	testq	%rdx, %rdx
    0000024a: 	je	.Ltmp4355 # Offset: 586
    0000024c: 	nopl	(%rax) # Size: 4
.Ltmp4360:
    00000250: 	movq	(%r9), %r9
    00000253: 	subq	$0x1, %rax
    00000257: 	jae	.Ltmp4360 # Offset: 599
    00000259: 	jmp	.Ltmp4355 # Offset: 601
.Ltmp4340:
    0000025b: 	cmpl	0x10(%r9), %r10d
    0000025f: 	jl	.Ltmp4338 # Offset: 607
    00000265: 	movq	%r9, %rax
    00000268: 	movl	$0x1, %edi
    0000026d: 	jmp	.Ltmp4354 # Offset: 621
    00000272: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4343:
    00000278: 	leaq	0x1(%rdx), %rax
    0000027c: 	testq	%rdx, %rdx
    0000027f: 	je	.Ltmp4344 # Offset: 639
    00000285: 	nopl	(%rax) # Size: 3
.Ltmp4361:
    00000288: 	addq	$0x1, %rax
    0000028c: 	movq	0x8(%r9), %r9
    00000290: 	cmpq	$0x1, %rax
    00000294: 	jne	.Ltmp4361 # Offset: 660
    00000296: 	jmp	.Ltmp4344 # Offset: 662
DWARF CFI Instructions:
    <empty>
End of Function "_Z17upper_bound_recurISt14_List_iteratorIiEiET_S2_S2_T0_"

Binary Function "_Z15TestSearchArrayISt14_List_iteratorIiEPFbS1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 438
  State       : disassembled
  Address     : 0x25b40
  Size        : 0x227
  MaxSize     : 0x230
  Offset      : 0x25b40
  Section     : .text
  Orc Section : .local.text._Z15TestSearchArrayISt14_List_iteratorIiEPFbS1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0437:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rcx, %r15
    00000009: 	pushq	%r14
    0000000b: 	movq	%rsi, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %r12
    00000015: 	movl	$0x1000, %edi
    0000001a: 	pushq	%rbp
    0000001b: 	pushq	%rbx
    0000001c: 	subq	$0x28, %rsp
    00000020: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000027: 	movq	%r8, 0x18(%rsp)
    0000002c: 	movq	%rdx, 0x10(%rsp)
    00000031: 	movb	%r9b, 0xf(%rsp)
    00000036: 	callq	_Znwm@PLT # Offset: 54
    0000003b: 	movq	%rax, %r13
    0000003e: 	movl	$0x0, (%rax)
    00000044: 	addq	$0x4, %rax
    00000048: 	leaq	0x1000(%r13), %r8
    0000004f: 	cmpq	%r8, %rax
    00000052: 	je	.Ltmp4362 # Offset: 82
    00000054: 	leaq	0xc(%r13), %rdi
    00000058: 	movq	$0x0, 0x4(%r13)
    00000060: 	movq	$0x0, 0xff8(%r13)
    0000006b: 	andq	$-0x8, %rdi
    0000006f: 	subq	%rdi, %rax
    00000072: 	movq	%rax, %rcx
    00000075: 	xorl	%eax, %eax
    00000077: 	addl	$0xffc, %ecx
    0000007d: 	shrl	$0x3, %ecx
    00000080: 	rep		stosq	%rax, %es:(%rdi)
.Ltmp4362:
    00000083: 	movabsq	$0x5851f42d4c957f2d, %r9
    0000008d: 	movq	%r13, %rsi
    00000090: 	movabsq	$0x14057b7ef767814f, %rdi
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4365:
    000000a0: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000000a7: 	imulq	%r9, %rax
    000000ab: 	addq	%rdi, %rax
    000000ae: 	movq	%rax, %rdx
    000000b1: 	movq	%rax, %rcx
    000000b4: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000000bb: 	shlq	$0x17, %rcx
    000000bf: 	shrq	$0x14, %rdx
    000000c3: 	xorq	%rcx, %rdx
    000000c6: 	xorq	%rdx, %rax
    000000c9: 	xorl	%edx, %edx
    000000cb: 	divq	0x10(%rsp)
    000000d0: 	movq	%r12, %rax
    000000d3: 	leaq	-0x1(%rdx), %rcx
    000000d7: 	testq	%rdx, %rdx
    000000da: 	jle	.Ltmp4363 # Offset: 218
.Ltmp4364:
    000000e0: 	movq	(%rax), %rax
    000000e3: 	subq	$0x1, %rcx
    000000e7: 	jae	.Ltmp4364 # Offset: 231
.Ltmp4371:
    000000e9: 	movl	0x10(%rax), %eax
    000000ec: 	addq	$0x4, %rsi
    000000f0: 	movl	%eax, -0x4(%rsi)
    000000f3: 	cmpq	%r8, %rsi
    000000f6: 	jne	.Ltmp4365 # Offset: 246
.Ltmp4373:
    000000f8: 	callq	clock@PLT # Offset: 248
    000000fd: 	xorl	%ebx, %ebx
    000000ff: 	xorl	%ebp, %ebp
    00000101: 	movq	%rax, start_time(%rip)
.Ltmp4369:
    00000108: 	leaq	0xc8(%rbp), %rax
    0000010f: 	movq	%rax, (%rsp)
    00000113: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4367:
    00000118: 	movq	%rbp, %rax
    0000011b: 	movq	%r14, %rsi
    0000011e: 	addq	$0x1, %rbp
    00000122: 	movq	%r12, %rdi
    00000125: 	andl	$0x3ff, %eax
    0000012a: 	movl	(%r13,%rax,4), %edx
    0000012f: 	callq	*%r15 # Offset: 303
    00000132: 	testb	%al, %al
    00000134: 	jne	.Ltmp4366 # Offset: 308
    00000136: 	cmpb	$0x0, 0xf(%rsp)
    0000013b: 	movl	$0x1, %eax
    00000140: 	cmovel	%eax, %ebx
.Ltmp4366:
    00000143: 	cmpq	(%rsp), %rbp
    00000147: 	jne	.Ltmp4367 # Offset: 327
    00000149: 	callq	clock@PLT # Offset: 329
    0000014e: 	movsd	gMinimumTimeTarget(%rip), %xmm1
    00000156: 	pxor	%xmm0, %xmm0
    0000015a: 	movq	%rax, end_time(%rip)
    00000161: 	subq	start_time(%rip), %rax
    00000168: 	cvtsi2sd	%rax, %xmm0
    0000016d: 	divsd	DATAat0x34410(%rip), %xmm0
    00000175: 	comisd	%xmm0, %xmm1
    00000179: 	jbe	.Ltmp4368 # Offset: 377
    0000017b: 	cmpq	$0x5f5e0ff, %rbp
    00000182: 	jbe	.Ltmp4369 # Offset: 386
.Ltmp4368:
    00000184: 	movq	0x18(%rsp), %rdx
    00000189: 	movq	0x10(%rsp), %rdi
    0000018e: 	movq	%rbp, %rsi
    00000191: 	callq	_Z13record_resultdmmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 401
    00000196: 	testb	%bl, %bl
    00000198: 	jne	.Ltmp4370 # Offset: 408
.Ltmp4374:
    0000019a: 	addq	$0x28, %rsp
    0000019e: 	movq	%r13, %rdi
    000001a1: 	movl	$0x1000, %esi
    000001a6: 	popq	%rbx
    000001a7: 	popq	%rbp
    000001a8: 	popq	%r12
    000001aa: 	popq	%r13
    000001ac: 	popq	%r14
    000001ae: 	popq	%r15
    000001b0: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 432
    000001b5: 	nopl	(%rax) # Size: 3
.Ltmp4363:
    000001b8: 	leaq	0x1(%rdx), %rcx
    000001bc: 	je	.Ltmp4371 # Offset: 444
    000001c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4372:
    000001c8: 	addq	$0x1, %rcx
    000001cc: 	movq	0x8(%rax), %rax
    000001d0: 	cmpq	$0x1, %rcx
    000001d4: 	jne	.Ltmp4372 # Offset: 468
    000001d6: 	movl	0x10(%rax), %eax
    000001d9: 	addq	$0x4, %rsi
    000001dd: 	movl	%eax, -0x4(%rsi)
    000001e0: 	cmpq	%r8, %rsi
    000001e3: 	jne	.Ltmp4365 # Offset: 483
    000001e9: 	jmp	.Ltmp4373 # Offset: 489
.Ltmp4370:
    000001ee: 	movq	0x18(%rsp), %rax
    000001f3: 	leaq	DATAat0x34137(%rip), %rsi
    000001fa: 	movl	$0x1, %edi
    000001ff: 	movq	(%rax), %rdx
    00000202: 	xorl	%eax, %eax
    00000204: 	callq	__printf_chk@PLT # Offset: 516
    00000209: 	jmp	.Ltmp4374 # Offset: 521
    0000020b: 	endbr64
    0000020f: 	movq	%rax, %rbp
    00000212: 	movq	%r13, %rdi
    00000215: 	movl	$0x1000, %esi
    0000021a: 	callq	_ZdlPvm@PLT # Offset: 538
    0000021f: 	movq	%rbp, %rdi
    00000222: 	callq	_Unwind_Resume@PLT # Offset: 546
DWARF CFI Instructions:
    <empty>
End of Function "_Z15TestSearchArrayISt14_List_iteratorIiEPFbS1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z13TestOneSearchISt14_List_iteratorIiEPFbS1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 439
  State       : disassembled
  Address     : 0x25d70
  Size        : 0x243
  MaxSize     : 0x250
  Offset      : 0x25d70
  Section     : .text
  Orc Section : .local.text._Z13TestOneSearchISt14_List_iteratorIiEPFbS1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0438:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdi, %r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdx, %r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rsi, %rbp
    00000016: 	pushq	%rbx
    00000017: 	movq	%rdi, %rbx
    0000001a: 	subq	$0x58, %rsp
    0000001e: 	movq	%rcx, 0x8(%rsp)
    00000023: 	movq	%r8, 0x10(%rsp)
    00000028: 	movq	%fs:0x28, %rax
    00000031: 	movq	%rax, 0x48(%rsp)
    00000036: 	xorl	%eax, %eax
    00000038: 	movq	%rdi, %rax
    0000003b: 	cmpq	%rsi, %rdi
    0000003e: 	je	.Ltmp4375 # Offset: 62
.Ltmp4376:
    00000040: 	movq	%rax, %rdx
    00000043: 	movq	(%rax), %rax
    00000046: 	movl	$0x5, 0x10(%rdx)
    0000004d: 	cmpq	%rbp, %rax
    00000050: 	jne	.Ltmp4376 # Offset: 80
.Ltmp4375:
    00000052: 	movq	0x10(%rsp), %rsi
    00000057: 	leaq	0x20(%rsp), %r15
    0000005c: 	leaq	DATAat0x34160(%rip), %rdx
    00000063: 	movzbl	%r9b, %r14d
    00000067: 	movq	%r15, %rdi
    0000006a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 106
    0000006f: 	movq	0x8(%rsp), %rcx
    00000074: 	movl	%r14d, %r9d
    00000077: 	movq	%r15, %r8
    0000007a: 	movq	%r12, %rdx
    0000007d: 	movq	%rbp, %rsi
    00000080: 	movq	%r13, %rdi
    00000083: 	callq	_Z15TestSearchArrayISt14_List_iteratorIiEPFbS1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 131
    00000088: 	movq	0x20(%rsp), %rdi
    0000008d: 	leaq	0x30(%rsp), %rax
    00000092: 	movq	%rax, 0x18(%rsp)
    00000097: 	cmpq	%rax, %rdi
    0000009a: 	je	.Ltmp4377 # Offset: 154
    0000009c: 	movq	0x30(%rsp), %rax
    000000a1: 	leaq	0x1(%rax), %rsi
    000000a5: 	callq	_ZdlPvm@PLT # Offset: 165
.Ltmp4377:
    000000aa: 	cmpq	$0x9, %r12
    000000ae: 	jbe	.Ltmp4378 # Offset: 174
    000000b4: 	movabsq	$-0x3333333333333333, %rdx
    000000be: 	movq	%r12, %rax
    000000c1: 	mulq	%rdx
    000000c4: 	shrq	$0x3, %rdx
.Ltmp4388:
    000000c8: 	movq	%r13, %rsi
    000000cb: 	xorl	%ecx, %ecx
    000000cd: 	xorl	%r8d, %r8d
    000000d0: 	cmpq	$0x0, %r12
    000000d4: 	jbe	.Ltmp4379 # Offset: 212
    000000d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp4382:
    000000e0: 	xorl	%eax, %eax
    000000e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4381:
    000000e8: 	movq	%rsi, %rdi
    000000eb: 	addq	$0x1, %rax
    000000ef: 	movq	(%rsi), %rsi
    000000f2: 	addq	$0x1, %rcx
    000000f6: 	movl	%r8d, 0x10(%rdi)
    000000fa: 	cmpq	%rdx, %rax
    000000fd: 	jae	.Ltmp4380 # Offset: 253
    000000ff: 	cmpq	%rcx, %r12
    00000102: 	ja	.Ltmp4381 # Offset: 258
.Ltmp4380:
    00000104: 	addl	$0x1, %r8d
    00000108: 	cmpq	%rcx, %r12
    0000010b: 	ja	.Ltmp4382 # Offset: 267
.Ltmp4379:
    0000010d: 	movq	0x10(%rsp), %rsi
    00000112: 	leaq	DATAat0x3416e(%rip), %rdx
    00000119: 	movq	%r15, %rdi
    0000011c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 284
    00000121: 	movq	0x8(%rsp), %rcx
    00000126: 	movl	%r14d, %r9d
    00000129: 	movq	%r15, %r8
    0000012c: 	movq	%r12, %rdx
    0000012f: 	movq	%rbp, %rsi
    00000132: 	movq	%r13, %rdi
    00000135: 	callq	_Z15TestSearchArrayISt14_List_iteratorIiEPFbS1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 309
    0000013a: 	movq	0x20(%rsp), %rdi
    0000013f: 	cmpq	0x18(%rsp), %rdi
    00000144: 	je	.Ltmp4383 # Offset: 324
    00000146: 	movq	0x30(%rsp), %rax
    0000014b: 	leaq	0x1(%rax), %rsi
    0000014f: 	callq	_ZdlPvm@PLT # Offset: 335
.Ltmp4383:
    00000154: 	xorl	%eax, %eax
    00000156: 	cmpq	%rbp, %r13
    00000159: 	je	.Ltmp4384 # Offset: 345
    0000015b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4385:
    00000160: 	movq	%rbx, %rdx
    00000163: 	movq	(%rbx), %rbx
    00000166: 	movl	%eax, 0x10(%rdx)
    00000169: 	addl	$0x1, %eax
    0000016c: 	cmpq	%rbx, %rbp
    0000016f: 	jne	.Ltmp4385 # Offset: 367
.Ltmp4384:
    00000171: 	movq	%rbp, %rsi
    00000174: 	movq	%r13, %rdi
    00000177: 	callq	_Z18quicksort2_forwardISt14_List_iteratorIiEEvT_S2_ # Offset: 375
    0000017c: 	movq	0x10(%rsp), %rsi
    00000181: 	leaq	DATAat0x34184(%rip), %rdx
    00000188: 	movq	%r15, %rdi
    0000018b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 395
    00000190: 	movq	0x8(%rsp), %rcx
    00000195: 	movl	%r14d, %r9d
    00000198: 	movq	%r15, %r8
    0000019b: 	movq	%r12, %rdx
    0000019e: 	movq	%rbp, %rsi
    000001a1: 	movq	%r13, %rdi
    000001a4: 	callq	_Z15TestSearchArrayISt14_List_iteratorIiEPFbS1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 420
    000001a9: 	movq	0x20(%rsp), %rdi
    000001ae: 	cmpq	0x18(%rsp), %rdi
    000001b3: 	je	.Ltmp4386 # Offset: 435
    000001b5: 	movq	0x30(%rsp), %rax
    000001ba: 	leaq	0x1(%rax), %rsi
    000001be: 	callq	_ZdlPvm@PLT # Offset: 446
.Ltmp4386:
    000001c3: 	movq	0x48(%rsp), %rax
    000001c8: 	subq	%fs:0x28, %rax
    000001d1: 	jne	.Ltmp4387 # Offset: 465
    000001d3: 	addq	$0x58, %rsp
    000001d7: 	popq	%rbx
    000001d8: 	popq	%rbp
    000001d9: 	popq	%r12
    000001db: 	popq	%r13
    000001dd: 	popq	%r14
    000001df: 	popq	%r15
    000001e1: 	retq # Offset: 481
.Ltmp4378:
    000001e2: 	testq	%r12, %r12
    000001e5: 	je	.Ltmp4379 # Offset: 485
    000001eb: 	movl	$0x1, %edx
    000001f0: 	jmp	.Ltmp4388 # Offset: 496
.Ltmp4387:
    000001f5: 	callq	__stack_chk_fail@PLT # Offset: 501
    000001fa: 	endbr64
.Ltmp4390:
    000001fe: 	movq	%rax, %rbp
    00000201: 	jmp	.Ltmp4389 # Offset: 513
    00000203: 	endbr64
    00000207: 	jmp	.Ltmp4390 # Offset: 519
    00000209: 	endbr64
    0000020d: 	movq	%rax, %rbp
    00000210: 	movq	0x20(%rsp), %rdi
    00000215: 	leaq	0x30(%rsp), %rax
    0000021a: 	cmpq	%rax, %rdi
    0000021d: 	je	.Ltmp4391 # Offset: 541
.Ltmp4392:
    0000021f: 	movq	0x30(%rsp), %rax
    00000224: 	leaq	0x1(%rax), %rsi
    00000228: 	callq	_ZdlPvm@PLT # Offset: 552
.Ltmp4391:
    0000022d: 	movq	%rbp, %rdi
    00000230: 	callq	_Unwind_Resume@PLT # Offset: 560
.Ltmp4389:
    00000235: 	movq	0x20(%rsp), %rdi
    0000023a: 	cmpq	0x18(%rsp), %rdi
    0000023f: 	jne	.Ltmp4392 # Offset: 575
    00000241: 	jmp	.Ltmp4391 # Offset: 577
DWARF CFI Instructions:
    <empty>
End of Function "_Z13TestOneSearchISt14_List_iteratorIiEPFbS1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z16TestOneContainerISt14_List_iteratorIiEEvT_S2_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 440
  State       : disassembled
  Address     : 0x25fc0
  Size        : 0x4de
  MaxSize     : 0x4e0
  Offset      : 0x25fc0
  Section     : .text
  Orc Section : .local.text._Z16TestOneContainerISt14_List_iteratorIiEEvT_S2_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0439:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdx, %r15
    00000009: 	leaq	DATAat0x3418f(%rip), %rdx
    00000010: 	pushq	%r14
    00000012: 	movq	%rsi, %r14
    00000015: 	movq	%rcx, %rsi
    00000018: 	pushq	%r13
    0000001a: 	movq	%rdi, %r13
    0000001d: 	pushq	%r12
    0000001f: 	movq	%rcx, %r12
    00000022: 	pushq	%rbp
    00000023: 	pushq	%rbx
    00000024: 	subq	$0x38, %rsp
    00000028: 	movq	%fs:0x28, %rax
    00000031: 	movq	%rax, 0x28(%rsp)
    00000036: 	xorl	%eax, %eax
    00000038: 	movq	%rsp, %rbp
    0000003b: 	movq	%rbp, %rdi
    0000003e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 62
    00000043: 	xorl	%r9d, %r9d
    00000046: 	movq	%rbp, %r8
    00000049: 	movq	%r15, %rdx
    0000004c: 	leaq	_Z14std_lowerboundISt14_List_iteratorIiEiET_S2_S2_T0_(%rip), %rcx
    00000053: 	movq	%r14, %rsi
    00000056: 	movq	%r13, %rdi
    00000059: 	callq	_Z13TestOneSearchISt14_List_iteratorIiEPFS1_S1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 89
    0000005e: 	movq	(%rsp), %rdi
    00000062: 	leaq	0x10(%rsp), %rbx
    00000067: 	cmpq	%rbx, %rdi
    0000006a: 	je	.Ltmp4393 # Offset: 106
    0000006c: 	movq	0x10(%rsp), %rax
    00000071: 	leaq	0x1(%rax), %rsi
    00000075: 	callq	_ZdlPvm@PLT # Offset: 117
.Ltmp4393:
    0000007a: 	leaq	DATAat0x341a1(%rip), %rdx
    00000081: 	movq	%r12, %rsi
    00000084: 	movq	%rbp, %rdi
    00000087: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 135
    0000008c: 	xorl	%r9d, %r9d
    0000008f: 	movq	%rbp, %r8
    00000092: 	movq	%r15, %rdx
    00000095: 	leaq	_Z12lower_bound1ISt14_List_iteratorIiEiET_S2_S2_T0_(%rip), %rcx
    0000009c: 	movq	%r14, %rsi
    0000009f: 	movq	%r13, %rdi
    000000a2: 	callq	_Z13TestOneSearchISt14_List_iteratorIiEPFS1_S1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 162
    000000a7: 	movq	(%rsp), %rdi
    000000ab: 	cmpq	%rbx, %rdi
    000000ae: 	je	.Ltmp4394 # Offset: 174
    000000b0: 	movq	0x10(%rsp), %rax
    000000b5: 	leaq	0x1(%rax), %rsi
    000000b9: 	callq	_ZdlPvm@PLT # Offset: 185
.Ltmp4394:
    000000be: 	leaq	DATAat0x341af(%rip), %rdx
    000000c5: 	movq	%r12, %rsi
    000000c8: 	movq	%rbp, %rdi
    000000cb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 203
    000000d0: 	xorl	%r9d, %r9d
    000000d3: 	movq	%rbp, %r8
    000000d6: 	movq	%r15, %rdx
    000000d9: 	leaq	_Z12lower_bound2ISt14_List_iteratorIiEiET_S2_S2_T0_(%rip), %rcx
    000000e0: 	movq	%r14, %rsi
    000000e3: 	movq	%r13, %rdi
    000000e6: 	callq	_Z13TestOneSearchISt14_List_iteratorIiEPFS1_S1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 230
    000000eb: 	movq	(%rsp), %rdi
    000000ef: 	cmpq	%rbx, %rdi
    000000f2: 	je	.Ltmp4395 # Offset: 242
    000000f4: 	movq	0x10(%rsp), %rax
    000000f9: 	leaq	0x1(%rax), %rsi
    000000fd: 	callq	_ZdlPvm@PLT # Offset: 253
.Ltmp4395:
    00000102: 	leaq	DATAat0x341bd(%rip), %rdx
    00000109: 	movq	%r12, %rsi
    0000010c: 	movq	%rbp, %rdi
    0000010f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 271
    00000114: 	xorl	%r9d, %r9d
    00000117: 	movq	%rbp, %r8
    0000011a: 	movq	%r15, %rdx
    0000011d: 	leaq	_Z17lower_bound_recurISt14_List_iteratorIiEiET_S2_S2_T0_(%rip), %rcx
    00000124: 	movq	%r14, %rsi
    00000127: 	movq	%r13, %rdi
    0000012a: 	callq	_Z13TestOneSearchISt14_List_iteratorIiEPFS1_S1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 298
    0000012f: 	movq	(%rsp), %rdi
    00000133: 	cmpq	%rbx, %rdi
    00000136: 	je	.Ltmp4396 # Offset: 310
    00000138: 	movq	0x10(%rsp), %rax
    0000013d: 	leaq	0x1(%rax), %rsi
    00000141: 	callq	_ZdlPvm@PLT # Offset: 321
.Ltmp4396:
    00000146: 	leaq	DATAat0x341d4(%rip), %rdx
    0000014d: 	movq	%r12, %rsi
    00000150: 	movq	%rbp, %rdi
    00000153: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 339
    00000158: 	movq	%rbp, %r8
    0000015b: 	movq	%r15, %rdx
    0000015e: 	movq	%r14, %rsi
    00000161: 	movl	$0x1, %r9d
    00000167: 	leaq	_Z14std_upperboundISt14_List_iteratorIiEiET_S2_S2_T0_(%rip), %rcx
    0000016e: 	movq	%r13, %rdi
    00000171: 	callq	_Z13TestOneSearchISt14_List_iteratorIiEPFS1_S1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 369
    00000176: 	movq	(%rsp), %rdi
    0000017a: 	cmpq	%rbx, %rdi
    0000017d: 	je	.Ltmp4397 # Offset: 381
    0000017f: 	movq	0x10(%rsp), %rax
    00000184: 	leaq	0x1(%rax), %rsi
    00000188: 	callq	_ZdlPvm@PLT # Offset: 392
.Ltmp4397:
    0000018d: 	leaq	DATAat0x341e6(%rip), %rdx
    00000194: 	movq	%r12, %rsi
    00000197: 	movq	%rbp, %rdi
    0000019a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 410
    0000019f: 	movq	%rbp, %r8
    000001a2: 	movq	%r15, %rdx
    000001a5: 	movq	%r14, %rsi
    000001a8: 	movl	$0x1, %r9d
    000001ae: 	leaq	_Z12upper_bound1ISt14_List_iteratorIiEiET_S2_S2_T0_(%rip), %rcx
    000001b5: 	movq	%r13, %rdi
    000001b8: 	callq	_Z13TestOneSearchISt14_List_iteratorIiEPFS1_S1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 440
    000001bd: 	movq	(%rsp), %rdi
    000001c1: 	cmpq	%rbx, %rdi
    000001c4: 	je	.Ltmp4398 # Offset: 452
    000001c6: 	movq	0x10(%rsp), %rax
    000001cb: 	leaq	0x1(%rax), %rsi
    000001cf: 	callq	_ZdlPvm@PLT # Offset: 463
.Ltmp4398:
    000001d4: 	leaq	DATAat0x341f4(%rip), %rdx
    000001db: 	movq	%r12, %rsi
    000001de: 	movq	%rbp, %rdi
    000001e1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 481
    000001e6: 	movq	%rbp, %r8
    000001e9: 	movq	%r15, %rdx
    000001ec: 	movq	%r14, %rsi
    000001ef: 	movl	$0x1, %r9d
    000001f5: 	leaq	_Z12upper_bound2ISt14_List_iteratorIiEiET_S2_S2_T0_(%rip), %rcx
    000001fc: 	movq	%r13, %rdi
    000001ff: 	callq	_Z13TestOneSearchISt14_List_iteratorIiEPFS1_S1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 511
    00000204: 	movq	(%rsp), %rdi
    00000208: 	cmpq	%rbx, %rdi
    0000020b: 	je	.Ltmp4399 # Offset: 523
    0000020d: 	movq	0x10(%rsp), %rax
    00000212: 	leaq	0x1(%rax), %rsi
    00000216: 	callq	_ZdlPvm@PLT # Offset: 534
.Ltmp4399:
    0000021b: 	leaq	DATAat0x34202(%rip), %rdx
    00000222: 	movq	%r12, %rsi
    00000225: 	movq	%rbp, %rdi
    00000228: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 552
    0000022d: 	movq	%rbp, %r8
    00000230: 	movq	%r15, %rdx
    00000233: 	movq	%r14, %rsi
    00000236: 	movl	$0x1, %r9d
    0000023c: 	leaq	_Z17upper_bound_recurISt14_List_iteratorIiEiET_S2_S2_T0_(%rip), %rcx
    00000243: 	movq	%r13, %rdi
    00000246: 	callq	_Z13TestOneSearchISt14_List_iteratorIiEPFS1_S1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 582
    0000024b: 	movq	(%rsp), %rdi
    0000024f: 	cmpq	%rbx, %rdi
    00000252: 	je	.Ltmp4400 # Offset: 594
    00000254: 	movq	0x10(%rsp), %rax
    00000259: 	leaq	0x1(%rax), %rsi
    0000025d: 	callq	_ZdlPvm@PLT # Offset: 605
.Ltmp4400:
    00000262: 	leaq	DATAat0x34219(%rip), %rdx
    00000269: 	movq	%r12, %rsi
    0000026c: 	movq	%rbp, %rdi
    0000026f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 623
    00000274: 	xorl	%r9d, %r9d
    00000277: 	movq	%rbp, %r8
    0000027a: 	movq	%r15, %rdx
    0000027d: 	leaq	_Z16std_binarysearchISt14_List_iteratorIiEiEbT_S2_T0_(%rip), %rcx
    00000284: 	movq	%r14, %rsi
    00000287: 	movq	%r13, %rdi
    0000028a: 	callq	_Z13TestOneSearchISt14_List_iteratorIiEPFbS1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 650
    0000028f: 	movq	(%rsp), %rdi
    00000293: 	cmpq	%rbx, %rdi
    00000296: 	je	.Ltmp4401 # Offset: 662
    00000298: 	movq	0x10(%rsp), %rax
    0000029d: 	leaq	0x1(%rax), %rsi
    000002a1: 	callq	_ZdlPvm@PLT # Offset: 673
.Ltmp4401:
    000002a6: 	leaq	DATAat0x3422d(%rip), %rdx
    000002ad: 	movq	%r12, %rsi
    000002b0: 	movq	%rbp, %rdi
    000002b3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 691
    000002b8: 	xorl	%r9d, %r9d
    000002bb: 	movq	%rbp, %r8
    000002be: 	movq	%r15, %rdx
    000002c1: 	leaq	_Z13binarysearch1ISt14_List_iteratorIiEiEbT_S2_T0_(%rip), %rcx
    000002c8: 	movq	%r14, %rsi
    000002cb: 	movq	%r13, %rdi
    000002ce: 	callq	_Z13TestOneSearchISt14_List_iteratorIiEPFbS1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 718
    000002d3: 	movq	(%rsp), %rdi
    000002d7: 	cmpq	%rbx, %rdi
    000002da: 	je	.Ltmp4402 # Offset: 730
    000002dc: 	movq	0x10(%rsp), %rax
    000002e1: 	leaq	0x1(%rax), %rsi
    000002e5: 	callq	_ZdlPvm@PLT # Offset: 741
.Ltmp4402:
    000002ea: 	leaq	DATAat0x3423d(%rip), %rdx
    000002f1: 	movq	%r12, %rsi
    000002f4: 	movq	%rbp, %rdi
    000002f7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 759
    000002fc: 	xorl	%r9d, %r9d
    000002ff: 	movq	%rbp, %r8
    00000302: 	movq	%r15, %rdx
    00000305: 	leaq	_Z13binarysearch2ISt14_List_iteratorIiEiEbT_S2_T0_(%rip), %rcx
    0000030c: 	movq	%r14, %rsi
    0000030f: 	movq	%r13, %rdi
    00000312: 	callq	_Z13TestOneSearchISt14_List_iteratorIiEPFbS1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 786
    00000317: 	movq	(%rsp), %rdi
    0000031b: 	cmpq	%rbx, %rdi
    0000031e: 	je	.Ltmp4403 # Offset: 798
    00000320: 	movq	0x10(%rsp), %rax
    00000325: 	leaq	0x1(%rax), %rsi
    00000329: 	callq	_ZdlPvm@PLT # Offset: 809
.Ltmp4403:
    0000032e: 	leaq	DATAat0x3424d(%rip), %rdx
    00000335: 	movq	%r12, %rsi
    00000338: 	movq	%rbp, %rdi
    0000033b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 827
    00000340: 	xorl	%r9d, %r9d
    00000343: 	movq	%rbp, %r8
    00000346: 	movq	%r15, %rdx
    00000349: 	leaq	_Z13binarysearch3ISt14_List_iteratorIiEiEbT_S2_T0_(%rip), %rcx
    00000350: 	movq	%r14, %rsi
    00000353: 	movq	%r13, %rdi
    00000356: 	callq	_Z13TestOneSearchISt14_List_iteratorIiEPFbS1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 854
    0000035b: 	movq	(%rsp), %rdi
    0000035f: 	cmpq	%rbx, %rdi
    00000362: 	je	.Ltmp4404 # Offset: 866
    00000364: 	movq	0x10(%rsp), %rax
    00000369: 	leaq	0x1(%rax), %rsi
    0000036d: 	callq	_ZdlPvm@PLT # Offset: 877
.Ltmp4404:
    00000372: 	leaq	DATAat0x3425d(%rip), %rdx
    00000379: 	movq	%r12, %rsi
    0000037c: 	movq	%rbp, %rdi
    0000037f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 895
    00000384: 	xorl	%r9d, %r9d
    00000387: 	movq	%rbp, %r8
    0000038a: 	movq	%r15, %rdx
    0000038d: 	leaq	_Z13binarysearch4ISt14_List_iteratorIiEiEbT_S2_T0_(%rip), %rcx
    00000394: 	movq	%r14, %rsi
    00000397: 	movq	%r13, %rdi
    0000039a: 	callq	_Z13TestOneSearchISt14_List_iteratorIiEPFbS1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 922
    0000039f: 	movq	(%rsp), %rdi
    000003a3: 	cmpq	%rbx, %rdi
    000003a6: 	je	.Ltmp4405 # Offset: 934
    000003a8: 	movq	0x10(%rsp), %rax
    000003ad: 	leaq	0x1(%rax), %rsi
    000003b1: 	callq	_ZdlPvm@PLT # Offset: 945
.Ltmp4405:
    000003b6: 	leaq	DATAat0x3426d(%rip), %rdx
    000003bd: 	movq	%r12, %rsi
    000003c0: 	movq	%rbp, %rdi
    000003c3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 963
    000003c8: 	xorl	%r9d, %r9d
    000003cb: 	movq	%rbp, %r8
    000003ce: 	movq	%r15, %rdx
    000003d1: 	leaq	_Z18binarysearch_recurISt14_List_iteratorIiEiEbT_S2_T0_(%rip), %rcx
    000003d8: 	movq	%r14, %rsi
    000003db: 	movq	%r13, %rdi
    000003de: 	callq	_Z13TestOneSearchISt14_List_iteratorIiEPFbS1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 990
    000003e3: 	movq	(%rsp), %rdi
    000003e7: 	cmpq	%rbx, %rdi
    000003ea: 	je	.Ltmp4406 # Offset: 1002
    000003ec: 	movq	0x10(%rsp), %rax
    000003f1: 	leaq	0x1(%rax), %rsi
    000003f5: 	callq	_ZdlPvm@PLT # Offset: 1013
.Ltmp4406:
    000003fa: 	movq	%rbp, %rdi
    000003fd: 	leaq	DATAat0x34286(%rip), %rdx
    00000404: 	movq	%r12, %rsi
    00000407: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1031
    0000040c: 	movq	%rbp, %rdi
    0000040f: 	callq	_Z9summarizeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1039
    00000414: 	movq	(%rsp), %rdi
    00000418: 	cmpq	%rbx, %rdi
    0000041b: 	je	.Ltmp4407 # Offset: 1051
    0000041d: 	movq	0x10(%rsp), %rax
    00000422: 	leaq	0x1(%rax), %rsi
    00000426: 	callq	_ZdlPvm@PLT # Offset: 1062
.Ltmp4407:
    0000042b: 	movq	0x28(%rsp), %rax
    00000430: 	subq	%fs:0x28, %rax
    00000439: 	jne	.Ltmp4408 # Offset: 1081
    0000043b: 	addq	$0x38, %rsp
    0000043f: 	popq	%rbx
    00000440: 	popq	%rbp
    00000441: 	popq	%r12
    00000443: 	popq	%r13
    00000445: 	popq	%r14
    00000447: 	popq	%r15
    00000449: 	retq # Offset: 1097
.Ltmp4408:
    0000044a: 	callq	__stack_chk_fail@PLT # Offset: 1098
    0000044f: 	endbr64
.Ltmp4410:
    00000453: 	movq	%rax, %rbp
    00000456: 	jmp	.Ltmp4409 # Offset: 1110
    00000458: 	endbr64
    0000045c: 	jmp	.Ltmp4410 # Offset: 1116
    0000045e: 	endbr64
    00000462: 	jmp	.Ltmp4410 # Offset: 1122
    00000464: 	endbr64
    00000468: 	jmp	.Ltmp4410 # Offset: 1128
    0000046a: 	endbr64
    0000046e: 	jmp	.Ltmp4410 # Offset: 1134
    00000470: 	endbr64
    00000474: 	jmp	.Ltmp4410 # Offset: 1140
    00000476: 	endbr64
    0000047a: 	jmp	.Ltmp4410 # Offset: 1146
.Ltmp4409:
    0000047c: 	movq	(%rsp), %rdi
    00000480: 	cmpq	%rbx, %rdi
    00000483: 	je	.Ltmp4411 # Offset: 1155
.Ltmp4413:
    00000485: 	movq	0x10(%rsp), %rax
    0000048a: 	leaq	0x1(%rax), %rsi
    0000048e: 	callq	_ZdlPvm@PLT # Offset: 1166
.Ltmp4411:
    00000493: 	movq	%rbp, %rdi
    00000496: 	callq	_Unwind_Resume@PLT # Offset: 1174
    0000049b: 	endbr64
    0000049f: 	jmp	.Ltmp4410 # Offset: 1183
    000004a1: 	endbr64
    000004a5: 	jmp	.Ltmp4410 # Offset: 1189
    000004a7: 	endbr64
    000004ab: 	jmp	.Ltmp4410 # Offset: 1195
    000004ad: 	endbr64
    000004b1: 	jmp	.Ltmp4410 # Offset: 1201
    000004b3: 	endbr64
    000004b7: 	jmp	.Ltmp4410 # Offset: 1207
    000004b9: 	endbr64
    000004bd: 	movq	%rax, %rbp
    000004c0: 	jmp	.Ltmp4412 # Offset: 1216
    000004c2: 	endbr64
    000004c6: 	jmp	.Ltmp4410 # Offset: 1222
    000004c8: 	endbr64
    000004cc: 	jmp	.Ltmp4410 # Offset: 1228
.Ltmp4412:
    000004ce: 	movq	(%rsp), %rdi
    000004d2: 	leaq	0x10(%rsp), %rax
    000004d7: 	cmpq	%rax, %rdi
    000004da: 	jne	.Ltmp4413 # Offset: 1242
    000004dc: 	jmp	.Ltmp4411 # Offset: 1244
DWARF CFI Instructions:
    <empty>
End of Function "_Z16TestOneContainerISt14_List_iteratorIiEEvT_S2_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z24binarysearch_recur_innerISt14_List_iteratorIiEilEbT_T0_T1_" after disassembly {
  Number      : 441
  State       : disassembled
  Address     : 0x264a0
  Size        : 0x98
  MaxSize     : 0xa0
  Offset      : 0x264a0
  Section     : .text
  Orc Section : .local.text._Z24binarysearch_recur_innerISt14_List_iteratorIiEilEbT_T0_T1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0440:
    00000000: 	endbr64
.Ltmp4422:
    00000004: 	testq	%rdx, %rdx
    00000007: 	je	.Ltmp4414 # Offset: 7
    00000009: 	movq	%rdx, %r8
    0000000c: 	shrq	$0x3f, %r8
    00000010: 	addq	%rdx, %r8
    00000013: 	sarq	%r8
    00000016: 	cmpq	$0x1, %rdx
    0000001a: 	jle	.Ltmp4415 # Offset: 26
    0000001c: 	leaq	-0x1(%r8), %rcx
    00000020: 	movq	%rdi, %rax
    00000023: 	testq	%r8, %r8
    00000026: 	je	.Ltmp4416 # Offset: 38
    00000028: 	nopl	(%rax,%rax) # Size: 8
.Ltmp4417:
    00000030: 	movq	(%rax), %rax
    00000033: 	subq	$0x1, %rcx
    00000037: 	jae	.Ltmp4417 # Offset: 55
.Ltmp4416:
    00000039: 	cmpl	%esi, 0x10(%rax)
    0000003c: 	jl	.Ltmp4418 # Offset: 60
.Ltmp4421:
    0000003e: 	jg	.Ltmp4419 # Offset: 62
    00000040: 	movl	$0x1, %eax
    00000045: 	retq # Offset: 69
    00000046: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp4414:
    00000050: 	xorl	%eax, %eax
    00000052: 	retq # Offset: 82
    00000053: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4415:
    00000058: 	leaq	0x1(%r8), %rcx
    0000005c: 	movq	%rdi, %rax
    0000005f: 	testq	%r8, %r8
    00000062: 	je	.Ltmp4416 # Offset: 98
    00000064: 	nopl	(%rax) # Size: 4
.Ltmp4420:
    00000068: 	addq	$0x1, %rcx
    0000006c: 	movq	0x8(%rax), %rax
    00000070: 	cmpq	$0x1, %rcx
    00000074: 	jne	.Ltmp4420 # Offset: 116
    00000076: 	cmpl	%esi, 0x10(%rax)
    00000079: 	jge	.Ltmp4421 # Offset: 121
.Ltmp4418:
    0000007b: 	addq	$0x1, %r8
    0000007f: 	movq	(%rax), %rdi
    00000082: 	subq	%r8, %rdx
    00000085: 	jmp	.Ltmp4422 # Offset: 133
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4419:
    00000090: 	movq	%r8, %rdx
    00000093: 	jmp	.Ltmp4422 # Offset: 147
DWARF CFI Instructions:
    <empty>
End of Function "_Z24binarysearch_recur_innerISt14_List_iteratorIiEilEbT_T0_T1_"

Binary Function "_Z18binarysearch_recurISt14_List_iteratorIiEiEbT_S2_T0_" after disassembly {
  Number      : 442
  State       : disassembled
  Address     : 0x26540
  Size        : 0x1b5
  MaxSize     : 0x1c0
  Offset      : 0x26540
  Section     : .text
  Orc Section : .local.text._Z18binarysearch_recurISt14_List_iteratorIiEiEbT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0441:
    00000000: 	endbr64
    00000004: 	movl	%edx, %r9d
    00000007: 	movq	%rdi, %r10
    0000000a: 	cmpq	%rdi, %rsi
    0000000d: 	je	.Ltmp4423 # Offset: 13
    00000013: 	movq	%rdi, %rdx
    00000016: 	xorl	%eax, %eax
    00000018: 	nopl	(%rax,%rax) # Size: 8
.Ltmp4424:
    00000020: 	movq	(%rdx), %rdx
    00000023: 	movq	%rax, %rcx
    00000026: 	addq	$0x1, %rax
    0000002a: 	cmpq	%rdx, %rsi
    0000002d: 	jne	.Ltmp4424 # Offset: 45
    0000002f: 	movq	%rax, %rdx
    00000032: 	sarq	%rdx
    00000035: 	cmpq	$0x1, %rax
    00000039: 	je	.Ltmp4425 # Offset: 57
    0000003f: 	leaq	-0x1(%rdx), %rsi
    00000043: 	testq	%rdx, %rdx
    00000046: 	je	.Ltmp4426 # Offset: 70
    0000004c: 	movq	%rdi, %r8
    0000004f: 	nop # Size: 1
.Ltmp4427:
    00000050: 	movq	(%r8), %r8
    00000053: 	subq	$0x1, %rsi
    00000057: 	jae	.Ltmp4427 # Offset: 87
    00000059: 	cmpl	0x10(%r8), %r9d
    0000005d: 	jle	.Ltmp4428 # Offset: 93
    00000063: 	movq	(%r8), %rax
    00000066: 	movq	%rax, %rdi
    00000069: 	subq	%rdx, %rcx
    0000006c: 	je	.Ltmp4423 # Offset: 108
.Ltmp4442:
    00000072: 	movq	%rcx, %r10
    00000075: 	shrq	$0x3f, %r10
    00000079: 	addq	%rcx, %r10
    0000007c: 	sarq	%r10
    0000007f: 	cmpq	$0x1, %rcx
    00000083: 	jle	.Ltmp4429 # Offset: 131
    00000089: 	leaq	-0x1(%r10), %rdx
    0000008d: 	testq	%r10, %r10
    00000090: 	je	.Ltmp4430 # Offset: 144
    00000092: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4431:
    00000098: 	movq	(%rax), %rax
    0000009b: 	subq	$0x1, %rdx
    0000009f: 	jae	.Ltmp4431 # Offset: 159
.Ltmp4430:
    000000a1: 	cmpl	0x10(%rax), %r9d
    000000a5: 	jg	.Ltmp4432 # Offset: 165
    000000ab: 	movl	$0x1, %r8d
    000000b1: 	jge	.Ltmp4433 # Offset: 177
    000000b3: 	movq	%r10, %rdx
    000000b6: 	movl	%r9d, %esi
    000000b9: 	jmp	_Z24binarysearch_recur_innerISt14_List_iteratorIiEilEbT_T0_T1_ # TAILCALL  # Offset: 185
    000000be: 	nop # Size: 2
.Ltmp4425:
    000000c0: 	cmpl	0x10(%rdi), %r9d
    000000c4: 	jg	.Ltmp4423 # Offset: 196
    000000c6: 	movl	$0x1, %r8d
    000000cc: 	jl	.Ltmp4434 # Offset: 204
.Ltmp4433:
    000000ce: 	movl	%r8d, %eax
    000000d1: 	retq # Offset: 209
    000000d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4434:
    000000d8: 	xorl	%r8d, %r8d
    000000db: 	testq	%rdx, %rdx
    000000de: 	je	.Ltmp4433 # Offset: 222
.Ltmp4443:
    000000e0: 	movq	%rax, %r11
    000000e3: 	sarq	$0x2, %r11
    000000e7: 	cmpq	$0x3, %rax
    000000eb: 	jle	.Ltmp4435 # Offset: 235
    000000ed: 	leaq	-0x1(%r11), %rax
    000000f1: 	testq	%r11, %r11
    000000f4: 	je	.Ltmp4436 # Offset: 244
    000000f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp4437:
    00000100: 	movq	(%r10), %r10
    00000103: 	subq	$0x1, %rax
    00000107: 	jae	.Ltmp4437 # Offset: 263
.Ltmp4436:
    00000109: 	cmpl	0x10(%r10), %r9d
    0000010d: 	jg	.Ltmp4438 # Offset: 269
    0000010f: 	movl	$0x1, %r8d
    00000115: 	jge	.Ltmp4433 # Offset: 277
    00000117: 	movq	%r11, %rdx
    0000011a: 	movl	%r9d, %esi
    0000011d: 	jmp	_Z24binarysearch_recur_innerISt14_List_iteratorIiEilEbT_T0_T1_ # TAILCALL  # Offset: 285
    00000122: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4423:
    00000128: 	xorl	%r8d, %r8d
    0000012b: 	movl	%r8d, %eax
    0000012e: 	retq # Offset: 302
.Ltmp4435:
    0000012f: 	testq	%r11, %r11
    00000132: 	je	.Ltmp4436 # Offset: 306
.Ltmp4439:
    00000134: 	jmp	.Ltmp4439 # Offset: 308
    00000136: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp4429:
    00000140: 	leaq	0x1(%r10), %rdx
    00000144: 	testq	%r10, %r10
    00000147: 	je	.Ltmp4430 # Offset: 327
    0000014d: 	nopl	(%rax) # Size: 3
.Ltmp4440:
    00000150: 	addq	$0x1, %rdx
    00000154: 	movq	0x8(%rax), %rax
    00000158: 	cmpq	$0x1, %rdx
    0000015c: 	jne	.Ltmp4440 # Offset: 348
    0000015e: 	jmp	.Ltmp4430 # Offset: 350
.Ltmp4426:
    00000163: 	cmpl	0x10(%rdi), %r9d
    00000167: 	jle	.Ltmp4441 # Offset: 359
    00000169: 	movq	(%rdi), %rax
    0000016c: 	movq	%rax, %rdi
    0000016f: 	jmp	.Ltmp4442 # Offset: 367
.Ltmp4428:
    00000174: 	movl	$0x1, %r8d
    0000017a: 	jge	.Ltmp4433 # Offset: 378
    00000180: 	jmp	.Ltmp4443 # Offset: 384
.Ltmp4438:
    00000185: 	addq	$0x1, %r11
    00000189: 	movq	(%r10), %rdi
    0000018c: 	movl	%r9d, %esi
    0000018f: 	subq	%r11, %rdx
    00000192: 	jmp	_Z24binarysearch_recur_innerISt14_List_iteratorIiEilEbT_T0_T1_ # TAILCALL  # Offset: 402
.Ltmp4432:
    00000197: 	addq	$0x1, %r10
    0000019b: 	movq	(%rax), %rdi
    0000019e: 	movl	%r9d, %esi
    000001a1: 	subq	%r10, %rcx
    000001a4: 	movq	%rcx, %rdx
    000001a7: 	jmp	_Z24binarysearch_recur_innerISt14_List_iteratorIiEilEbT_T0_T1_ # TAILCALL  # Offset: 423
.Ltmp4441:
    000001ac: 	setge	%r8b
    000001b0: 	jmp	.Ltmp4433 # Offset: 432
DWARF CFI Instructions:
    <empty>
End of Function "_Z18binarysearch_recurISt14_List_iteratorIiEiEbT_S2_T0_"

Binary Function "_Z18quicksort2_forwardISt18_Fwd_list_iteratorIiEEvT_S2_" after disassembly {
  Number      : 443
  State       : disassembled
  Address     : 0x26700
  Size        : 0x107
  MaxSize     : 0x110
  Offset      : 0x26700
  Section     : .text
  Orc Section : .local.text._Z18quicksort2_forwardISt18_Fwd_list_iteratorIiEEvT_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0442:
    00000000: 	endbr64
    00000004: 	cmpq	%rdi, %rsi
    00000007: 	je	.Ltmp4444 # Offset: 7
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rsi, %rbp
    00000016: 	pushq	%rbx
    00000017: 	movq	(%r12), %rbx
    0000001b: 	cmpq	%rbp, %rbx
    0000001e: 	je	.Ltmp4445 # Offset: 30
.Ltmp4453:
    00000024: 	movq	(%rbx), %rdx
    00000027: 	movl	0x8(%rbx), %edi
    0000002a: 	movl	0x8(%r12), %eax
    0000002f: 	cmpq	%rbp, %rdx
    00000032: 	je	.Ltmp4446 # Offset: 50
    00000038: 	cmpl	%edi, %eax
    0000003a: 	jle	.Ltmp4447 # Offset: 58
    0000003c: 	movl	%edi, 0x8(%r12)
    00000041: 	movl	%eax, %edi
    00000043: 	movl	%eax, 0x8(%rbx)
.Ltmp4447:
    00000046: 	movl	0x8(%rdx), %eax
    00000049: 	cmpl	%edi, %eax
    0000004b: 	jge	.Ltmp4448 # Offset: 75
    0000004d: 	movl	%eax, 0x8(%rbx)
    00000050: 	movl	%edi, 0x8(%rdx)
    00000053: 	movl	0x8(%rbx), %edi
    00000056: 	movl	0x8(%r12), %eax
    0000005b: 	cmpl	%eax, %edi
    0000005d: 	jge	.Ltmp4448 # Offset: 93
    0000005f: 	movl	%eax, 0x8(%rbx)
    00000062: 	movl	%edi, 0x8(%r12)
    00000067: 	movl	0x8(%rbx), %edi
.Ltmp4448:
    0000006a: 	movq	(%rdx), %rax
    0000006d: 	cmpq	%rbp, %rax
    00000070: 	je	.Ltmp4445 # Offset: 112
    00000072: 	movl	$0x2, %esi
    00000077: 	movl	$0x1, %r8d
    0000007d: 	jmp	.Ltmp4449 # Offset: 125
    0000007f: 	nop # Size: 1
.Ltmp4451:
    00000080: 	movq	%rax, %rdx
    00000083: 	movq	(%rax), %rax
.Ltmp4449:
    00000086: 	movl	0x8(%rdx), %ecx
    00000089: 	cmpl	%edi, %ecx
    0000008b: 	jge	.Ltmp4450 # Offset: 139
    0000008d: 	movl	0x8(%rbx), %r9d
    00000091: 	addq	$0x1, %r8
    00000095: 	movl	%r9d, 0x8(%rdx)
    00000099: 	movl	%ecx, 0x8(%rbx)
    0000009c: 	movq	(%rbx), %rbx
.Ltmp4450:
    0000009f: 	addq	$0x1, %rsi
    000000a3: 	cmpq	%rax, %rbp
    000000a6: 	jne	.Ltmp4451 # Offset: 166
    000000a8: 	subq	%r8, %rsi
    000000ab: 	cmpq	%rsi, %r8
    000000ae: 	jbe	.Ltmp4452 # Offset: 174
    000000b0: 	movq	%rbp, %rsi
    000000b3: 	movq	%rbx, %rdi
    000000b6: 	callq	_Z18quicksort2_forwardISt18_Fwd_list_iteratorIiEEvT_S2_ # Offset: 182
    000000bb: 	cmpq	%r12, %rbx
    000000be: 	je	.Ltmp4445 # Offset: 190
    000000c0: 	movq	%rbx, %rbp
    000000c3: 	movq	%r12, %rbx
.Ltmp4454:
    000000c6: 	movq	%rbx, %r12
    000000c9: 	movq	(%r12), %rbx
    000000cd: 	cmpq	%rbp, %rbx
    000000d0: 	jne	.Ltmp4453 # Offset: 208
.Ltmp4445:
    000000d6: 	popq	%rbx
    000000d7: 	popq	%rbp
    000000d8: 	popq	%r12
    000000da: 	retq # Offset: 218
    000000db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4452:
    000000e0: 	movq	%rbx, %rsi
    000000e3: 	movq	%r12, %rdi
    000000e6: 	callq	_Z18quicksort2_forwardISt18_Fwd_list_iteratorIiEEvT_S2_ # Offset: 230
    000000eb: 	cmpq	%rbp, %rbx
    000000ee: 	jne	.Ltmp4454 # Offset: 238
    000000f0: 	popq	%rbx
    000000f1: 	popq	%rbp
    000000f2: 	popq	%r12
    000000f4: 	retq # Offset: 244
.Ltmp4446:
    000000f5: 	cmpl	%edi, %eax
    000000f7: 	jle	.Ltmp4445 # Offset: 247
    000000f9: 	movl	%eax, 0x8(%rbx)
    000000fc: 	movl	%edi, 0x8(%r12)
    00000101: 	popq	%rbx
    00000102: 	popq	%rbp
    00000103: 	popq	%r12
    00000105: 	retq # Offset: 261
.Ltmp4444:
    00000106: 	retq # Offset: 262
DWARF CFI Instructions:
    <empty>
End of Function "_Z18quicksort2_forwardISt18_Fwd_list_iteratorIiEEvT_S2_"

Binary Function "_Z13TestOneSearchISt18_Fwd_list_iteratorIiEPFS1_S1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1(*2)" after disassembly {
  All names   : _Z13TestOneSearchISt18_Fwd_list_iteratorIiEPFS1_S1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1
                _Z13TestOneSearchISt18_Fwd_list_iteratorIiEPFS1_S1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/binary_search.cpp/1
  Number      : 444
  State       : disassembled
  Address     : 0x26810
  Size        : 0x243
  MaxSize     : 0x250
  Offset      : 0x26810
  Section     : .text
  Orc Section : .local.text._Z13TestOneSearchISt18_Fwd_list_iteratorIiEPFS1_S1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0443:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	movq	%rsi, %r14
    00000007: 	pushq	%r13
    00000009: 	pushq	%r12
    0000000b: 	movq	%rdx, %r12
    0000000e: 	pushq	%rbp
    0000000f: 	movq	%rdi, %rbp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdi, %rbx
    00000016: 	subq	$0x58, %rsp
    0000001a: 	movq	%rcx, 0x8(%rsp)
    0000001f: 	movq	%r8, 0x10(%rsp)
    00000024: 	movq	%fs:0x28, %rax
    0000002d: 	movq	%rax, 0x48(%rsp)
    00000032: 	xorl	%eax, %eax
    00000034: 	movq	%rdi, %rax
    00000037: 	testq	%rdi, %rdi
    0000003a: 	je	.Ltmp4455 # Offset: 58
    0000003c: 	nopl	(%rax) # Size: 4
.Ltmp4456:
    00000040: 	movq	%rax, %rdx
    00000043: 	movq	(%rax), %rax
    00000046: 	movl	$0x5, 0x8(%rdx)
    0000004d: 	testq	%rax, %rax
    00000050: 	jne	.Ltmp4456 # Offset: 80
.Ltmp4455:
    00000052: 	movq	0x10(%rsp), %rsi
    00000057: 	leaq	0x20(%rsp), %r15
    0000005c: 	leaq	DATAat0x34160(%rip), %rdx
    00000063: 	movzbl	%r9b, %r13d
    00000067: 	movq	%r15, %rdi
    0000006a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 106
    0000006f: 	movq	0x8(%rsp), %rcx
    00000074: 	movl	%r13d, %r9d
    00000077: 	movq	%r15, %r8
    0000007a: 	movq	%r12, %rdx
    0000007d: 	movq	%r14, %rsi
    00000080: 	movq	%rbp, %rdi
    00000083: 	callq	"_Z15TestSearchArrayISt18_Fwd_list_iteratorIiEPFS1_S1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1" # Offset: 131
    00000088: 	movq	0x20(%rsp), %rdi
    0000008d: 	leaq	0x30(%rsp), %rax
    00000092: 	movq	%rax, 0x18(%rsp)
    00000097: 	cmpq	%rax, %rdi
    0000009a: 	je	.Ltmp4457 # Offset: 154
    0000009c: 	movq	0x30(%rsp), %rax
    000000a1: 	leaq	0x1(%rax), %rsi
    000000a5: 	callq	_ZdlPvm@PLT # Offset: 165
.Ltmp4457:
    000000aa: 	cmpq	$0x9, %r12
    000000ae: 	jbe	.Ltmp4458 # Offset: 174
    000000b4: 	movabsq	$-0x3333333333333333, %rdx
    000000be: 	movq	%r12, %rax
    000000c1: 	mulq	%rdx
    000000c4: 	shrq	$0x3, %rdx
.Ltmp4468:
    000000c8: 	movq	%rbp, %rsi
    000000cb: 	xorl	%ecx, %ecx
    000000cd: 	xorl	%r8d, %r8d
    000000d0: 	cmpq	$0x0, %r12
    000000d4: 	jbe	.Ltmp4459 # Offset: 212
    000000d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp4462:
    000000e0: 	xorl	%eax, %eax
    000000e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4461:
    000000e8: 	movq	%rsi, %rdi
    000000eb: 	addq	$0x1, %rax
    000000ef: 	movq	(%rsi), %rsi
    000000f2: 	addq	$0x1, %rcx
    000000f6: 	movl	%r8d, 0x8(%rdi)
    000000fa: 	cmpq	%rdx, %rax
    000000fd: 	jae	.Ltmp4460 # Offset: 253
    000000ff: 	cmpq	%rcx, %r12
    00000102: 	ja	.Ltmp4461 # Offset: 258
.Ltmp4460:
    00000104: 	addl	$0x1, %r8d
    00000108: 	cmpq	%rcx, %r12
    0000010b: 	ja	.Ltmp4462 # Offset: 267
.Ltmp4459:
    0000010d: 	movq	0x10(%rsp), %rsi
    00000112: 	leaq	DATAat0x3416e(%rip), %rdx
    00000119: 	movq	%r15, %rdi
    0000011c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 284
    00000121: 	movq	0x8(%rsp), %rcx
    00000126: 	movl	%r13d, %r9d
    00000129: 	movq	%r15, %r8
    0000012c: 	movq	%r12, %rdx
    0000012f: 	movq	%r14, %rsi
    00000132: 	movq	%rbp, %rdi
    00000135: 	callq	"_Z15TestSearchArrayISt18_Fwd_list_iteratorIiEPFS1_S1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1" # Offset: 309
    0000013a: 	movq	0x20(%rsp), %rdi
    0000013f: 	cmpq	0x18(%rsp), %rdi
    00000144: 	je	.Ltmp4463 # Offset: 324
    00000146: 	movq	0x30(%rsp), %rax
    0000014b: 	leaq	0x1(%rax), %rsi
    0000014f: 	callq	_ZdlPvm@PLT # Offset: 335
.Ltmp4463:
    00000154: 	xorl	%eax, %eax
    00000156: 	testq	%rbp, %rbp
    00000159: 	je	.Ltmp4464 # Offset: 345
    0000015b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4465:
    00000160: 	movq	%rbx, %rdx
    00000163: 	movq	(%rbx), %rbx
    00000166: 	movl	%eax, 0x8(%rdx)
    00000169: 	addl	$0x1, %eax
    0000016c: 	testq	%rbx, %rbx
    0000016f: 	jne	.Ltmp4465 # Offset: 367
.Ltmp4464:
    00000171: 	movq	%r14, %rsi
    00000174: 	movq	%rbp, %rdi
    00000177: 	callq	_Z18quicksort2_forwardISt18_Fwd_list_iteratorIiEEvT_S2_ # Offset: 375
    0000017c: 	movq	0x10(%rsp), %rsi
    00000181: 	leaq	DATAat0x34184(%rip), %rdx
    00000188: 	movq	%r15, %rdi
    0000018b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 395
    00000190: 	movq	0x8(%rsp), %rcx
    00000195: 	movl	%r13d, %r9d
    00000198: 	movq	%r15, %r8
    0000019b: 	movq	%r12, %rdx
    0000019e: 	movq	%r14, %rsi
    000001a1: 	movq	%rbp, %rdi
    000001a4: 	callq	"_Z15TestSearchArrayISt18_Fwd_list_iteratorIiEPFS1_S1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1" # Offset: 420
    000001a9: 	movq	0x20(%rsp), %rdi
    000001ae: 	cmpq	0x18(%rsp), %rdi
    000001b3: 	je	.Ltmp4466 # Offset: 435
    000001b5: 	movq	0x30(%rsp), %rax
    000001ba: 	leaq	0x1(%rax), %rsi
    000001be: 	callq	_ZdlPvm@PLT # Offset: 446
.Ltmp4466:
    000001c3: 	movq	0x48(%rsp), %rax
    000001c8: 	subq	%fs:0x28, %rax
    000001d1: 	jne	.Ltmp4467 # Offset: 465
    000001d3: 	addq	$0x58, %rsp
    000001d7: 	popq	%rbx
    000001d8: 	popq	%rbp
    000001d9: 	popq	%r12
    000001db: 	popq	%r13
    000001dd: 	popq	%r14
    000001df: 	popq	%r15
    000001e1: 	retq # Offset: 481
.Ltmp4458:
    000001e2: 	testq	%r12, %r12
    000001e5: 	je	.Ltmp4459 # Offset: 485
    000001eb: 	movl	$0x1, %edx
    000001f0: 	jmp	.Ltmp4468 # Offset: 496
.Ltmp4467:
    000001f5: 	callq	__stack_chk_fail@PLT # Offset: 501
    000001fa: 	endbr64
.Ltmp4470:
    000001fe: 	movq	%rax, %rbp
    00000201: 	jmp	.Ltmp4469 # Offset: 513
    00000203: 	endbr64
    00000207: 	jmp	.Ltmp4470 # Offset: 519
    00000209: 	endbr64
    0000020d: 	movq	%rax, %rbp
    00000210: 	movq	0x20(%rsp), %rdi
    00000215: 	leaq	0x30(%rsp), %rax
    0000021a: 	cmpq	%rax, %rdi
    0000021d: 	je	.Ltmp4471 # Offset: 541
.Ltmp4472:
    0000021f: 	movq	0x30(%rsp), %rax
    00000224: 	leaq	0x1(%rax), %rsi
    00000228: 	callq	_ZdlPvm@PLT # Offset: 552
.Ltmp4471:
    0000022d: 	movq	%rbp, %rdi
    00000230: 	callq	_Unwind_Resume@PLT # Offset: 560
.Ltmp4469:
    00000235: 	movq	0x20(%rsp), %rdi
    0000023a: 	cmpq	0x18(%rsp), %rdi
    0000023f: 	jne	.Ltmp4472 # Offset: 575
    00000241: 	jmp	.Ltmp4471 # Offset: 577
DWARF CFI Instructions:
    <empty>
End of Function "_Z13TestOneSearchISt18_Fwd_list_iteratorIiEPFS1_S1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1(*2)"

Binary Function "_Z23lower_bound_recur_innerISt18_Fwd_list_iteratorIiEilET_S2_T0_T1_" after disassembly {
  Number      : 445
  State       : disassembled
  Address     : 0x26a60
  Size        : 0x115
  MaxSize     : 0x120
  Offset      : 0x26a60
  Section     : .text
  Orc Section : .local.text._Z23lower_bound_recur_innerISt18_Fwd_list_iteratorIiEilET_S2_T0_T1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0444:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	testq	%rdx, %rdx
    0000000a: 	je	.Ltmp4473 # Offset: 10
    00000010: 	movq	%rdx, %r8
    00000013: 	subq	$0x8, %rsp
    00000017: 	movl	%esi, %r9d
    0000001a: 	movq	%rdi, %r10
    0000001d: 	shrq	$0x3f, %r8
    00000021: 	addq	%rdx, %r8
    00000024: 	sarq	%r8
    00000027: 	leaq	-0x1(%r8), %rcx
    0000002b: 	je	.Ltmp4474 # Offset: 43
    0000002d: 	movq	%rdi, %rsi
.Ltmp4475:
    00000030: 	movq	(%rsi), %rsi
    00000033: 	subq	$0x1, %rcx
    00000037: 	jae	.Ltmp4475 # Offset: 55
    00000039: 	cmpl	%r9d, 0x8(%rsi)
    0000003d: 	jge	.Ltmp4476 # Offset: 61
.Ltmp4486:
    0000003f: 	movq	(%rsi), %rax
    00000042: 	addq	$0x1, %r8
    00000046: 	movq	%rax, %rdi
    00000049: 	subq	%r8, %rdx
    0000004c: 	je	.Ltmp4477 # Offset: 76
    0000004e: 	movq	%rdx, %r8
    00000051: 	shrq	$0x3f, %r8
    00000055: 	addq	%rdx, %r8
    00000058: 	sarq	%r8
    0000005b: 	leaq	-0x1(%r8), %rcx
    0000005f: 	je	.Ltmp4478 # Offset: 95
    00000061: 	nopl	(%rax) # Size: 7
.Ltmp4479:
    00000068: 	movq	(%rax), %rax
    0000006b: 	subq	$0x1, %rcx
    0000006f: 	jae	.Ltmp4479 # Offset: 111
.Ltmp4478:
    00000071: 	cmpl	0x8(%rax), %r9d
    00000075: 	jle	.Ltmp4480 # Offset: 117
    00000077: 	addq	$0x1, %r8
    0000007b: 	movq	(%rax), %rdi
    0000007e: 	movl	%r9d, %esi
    00000081: 	subq	%r8, %rdx
    00000084: 	callq	_Z23lower_bound_recur_innerISt18_Fwd_list_iteratorIiEilET_S2_T0_T1_ # Offset: 132
.Ltmp4477:
    00000089: 	addq	$0x8, %rsp
    0000008d: 	retq # Offset: 141
    0000008e: 	nop # Size: 2
.Ltmp4473:
    00000090: 	retq # Offset: 144
    00000091: 	nopl	(%rax) # Size: 7
.Ltmp4474:
    00000098: 	cmpl	0x8(%rdi), %esi
    0000009b: 	jg	.Ltmp4481 # Offset: 155
.Ltmp4485:
    0000009d: 	movq	%r10, %rax
    000000a0: 	addq	$0x8, %rsp
    000000a4: 	retq # Offset: 164
    000000a5: 	nopl	(%rax) # Size: 3
.Ltmp4476:
    000000a8: 	leaq	0x3(%rdx), %rax
    000000ac: 	testq	%rdx, %rdx
    000000af: 	cmovsq	%rax, %rdx
    000000b3: 	sarq	$0x2, %rdx
    000000b7: 	leaq	-0x1(%rdx), %rax
    000000bb: 	je	.Ltmp4482 # Offset: 187
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp4483:
    000000c0: 	movq	(%r10), %r10
    000000c3: 	subq	$0x1, %rax
    000000c7: 	jae	.Ltmp4483 # Offset: 199
.Ltmp4482:
    000000c9: 	cmpl	0x8(%r10), %r9d
    000000cd: 	jle	.Ltmp4484 # Offset: 205
    000000cf: 	leaq	0x1(%rdx), %rax
    000000d3: 	movq	(%r10), %rdi
    000000d6: 	movq	%r8, %rdx
    000000d9: 	movl	%r9d, %esi
    000000dc: 	subq	%rax, %rdx
    000000df: 	callq	_Z23lower_bound_recur_innerISt18_Fwd_list_iteratorIiEilET_S2_T0_T1_ # Offset: 223
    000000e4: 	movq	%rax, %r10
    000000e7: 	jmp	.Ltmp4485 # Offset: 231
    000000e9: 	nopl	(%rax) # Size: 7
.Ltmp4480:
    000000f0: 	movq	%r8, %rdx
    000000f3: 	movl	%r9d, %esi
    000000f6: 	callq	_Z23lower_bound_recur_innerISt18_Fwd_list_iteratorIiEilET_S2_T0_T1_ # Offset: 246
    000000fb: 	jmp	.Ltmp4477 # Offset: 251
    000000fd: 	nopl	(%rax) # Size: 3
.Ltmp4484:
    00000100: 	movl	%r9d, %esi
    00000103: 	callq	_Z23lower_bound_recur_innerISt18_Fwd_list_iteratorIiEilET_S2_T0_T1_ # Offset: 259
    00000108: 	movq	%rax, %r10
    0000010b: 	jmp	.Ltmp4485 # Offset: 267
.Ltmp4481:
    0000010d: 	movq	%rdi, %rsi
    00000110: 	jmp	.Ltmp4486 # Offset: 272
DWARF CFI Instructions:
    <empty>
End of Function "_Z23lower_bound_recur_innerISt18_Fwd_list_iteratorIiEilET_S2_T0_T1_"

Binary Function "_Z17lower_bound_recurISt18_Fwd_list_iteratorIiEiET_S2_S2_T0_" after disassembly {
  Number      : 446
  State       : disassembled
  Address     : 0x26b80
  Size        : 0x24a
  MaxSize     : 0x250
  Offset      : 0x26b80
  Section     : .text
  Orc Section : .local.text._Z17lower_bound_recurISt18_Fwd_list_iteratorIiEiET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0445:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp4487 # Offset: 10
    00000010: 	movl	%edx, %r9d
    00000013: 	subq	$0x8, %rsp
    00000017: 	movq	%rdi, %r8
    0000001a: 	movq	%rdi, %r10
    0000001d: 	movq	%rdi, %rax
    00000020: 	xorl	%edx, %edx
    00000022: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4488:
    00000028: 	movq	(%rax), %rax
    0000002b: 	movq	%rdx, %rdi
    0000002e: 	addq	$0x1, %rdx
    00000032: 	cmpq	%rsi, %rax
    00000035: 	jne	.Ltmp4488 # Offset: 53
    00000037: 	movq	%rdx, %rsi
    0000003a: 	sarq	%rsi
    0000003d: 	leaq	-0x1(%rsi), %rax
    00000041: 	je	.Ltmp4489 # Offset: 65
    00000047: 	movq	%r8, %rcx
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4490:
    00000050: 	movq	(%rcx), %rcx
    00000053: 	subq	$0x1, %rax
    00000057: 	jae	.Ltmp4490 # Offset: 87
    00000059: 	cmpl	0x8(%rcx), %r9d
    0000005d: 	jle	.Ltmp4491 # Offset: 93
.Ltmp4512:
    00000063: 	movq	(%rcx), %rax
    00000066: 	subq	%rsi, %rdi
    00000069: 	je	.Ltmp4492 # Offset: 105
    0000006f: 	movq	%rdi, %rsi
    00000072: 	shrq	$0x3f, %rsi
    00000076: 	addq	%rdi, %rsi
    00000079: 	sarq	%rsi
    0000007c: 	leaq	-0x1(%rsi), %rdx
    00000080: 	je	.Ltmp4493 # Offset: 128
    00000086: 	movq	%rax, %rcx
    00000089: 	nopl	(%rax) # Size: 7
.Ltmp4494:
    00000090: 	movq	(%rcx), %rcx
    00000093: 	subq	$0x1, %rdx
    00000097: 	jae	.Ltmp4494 # Offset: 151
    00000099: 	cmpl	0x8(%rcx), %r9d
    0000009d: 	jle	.Ltmp4495 # Offset: 157
.Ltmp4511:
    000000a3: 	movq	(%rcx), %rax
    000000a6: 	addq	$0x1, %rsi
    000000aa: 	movq	%rax, %r10
    000000ad: 	subq	%rsi, %rdi
    000000b0: 	je	.Ltmp4492 # Offset: 176
    000000b2: 	movq	%rdi, %r8
    000000b5: 	shrq	$0x3f, %r8
    000000b9: 	addq	%rdi, %r8
    000000bc: 	sarq	%r8
    000000bf: 	leaq	-0x1(%r8), %rdx
    000000c3: 	je	.Ltmp4496 # Offset: 195
    000000c5: 	nopl	(%rax) # Size: 3
.Ltmp4497:
    000000c8: 	movq	(%rax), %rax
    000000cb: 	subq	$0x1, %rdx
    000000cf: 	jae	.Ltmp4497 # Offset: 207
.Ltmp4496:
    000000d1: 	cmpl	0x8(%rax), %r9d
    000000d5: 	jle	.Ltmp4498 # Offset: 213
    000000db: 	movq	(%rax), %r10
    000000de: 	addq	$0x1, %r8
    000000e2: 	movl	%r9d, %esi
    000000e5: 	subq	%r8, %rdi
    000000e8: 	movq	%rdi, %rdx
    000000eb: 	movq	%r10, %rdi
    000000ee: 	callq	_Z23lower_bound_recur_innerISt18_Fwd_list_iteratorIiEilET_S2_T0_T1_ # Offset: 238
.Ltmp4492:
    000000f3: 	addq	$0x8, %rsp
    000000f7: 	retq # Offset: 247
    000000f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp4491:
    00000100: 	movq	%rdx, %rdi
    00000103: 	movq	%r8, %rcx
    00000106: 	sarq	$0x2, %rdi
    0000010a: 	leaq	-0x1(%rdi), %rax
    0000010e: 	je	.Ltmp4499 # Offset: 270
    00000114: 	nopl	(%rax) # Size: 4
.Ltmp4500:
    00000118: 	movq	(%rcx), %rcx
    0000011b: 	subq	$0x1, %rax
    0000011f: 	jae	.Ltmp4500 # Offset: 287
    00000121: 	cmpl	0x8(%rcx), %r9d
    00000125: 	jle	.Ltmp4501 # Offset: 293
.Ltmp4510:
    0000012b: 	movq	(%rcx), %rax
    0000012e: 	addq	$0x1, %rdi
    00000132: 	movq	%rax, %r10
    00000135: 	subq	%rdi, %rsi
    00000138: 	je	.Ltmp4492 # Offset: 312
    0000013a: 	movq	%rsi, %r8
    0000013d: 	shrq	$0x3f, %r8
    00000141: 	addq	%rsi, %r8
    00000144: 	sarq	%r8
    00000147: 	leaq	-0x1(%r8), %rdx
    0000014b: 	je	.Ltmp4502 # Offset: 331
    0000014d: 	nopl	(%rax) # Size: 3
.Ltmp4503:
    00000150: 	movq	(%rax), %rax
    00000153: 	subq	$0x1, %rdx
    00000157: 	jae	.Ltmp4503 # Offset: 343
.Ltmp4502:
    00000159: 	cmpl	0x8(%rax), %r9d
    0000015d: 	jle	.Ltmp4498 # Offset: 349
    0000015f: 	movq	(%rax), %r10
    00000162: 	addq	$0x1, %r8
    00000166: 	subq	%r8, %rsi
    00000169: 	movq	%rsi, %rdx
    0000016c: 	movq	%r10, %rdi
    0000016f: 	movl	%r9d, %esi
    00000172: 	callq	_Z23lower_bound_recur_innerISt18_Fwd_list_iteratorIiEilET_S2_T0_T1_ # Offset: 370
    00000177: 	jmp	.Ltmp4492 # Offset: 375
    0000017c: 	nopl	(%rax) # Size: 4
.Ltmp4487:
    00000180: 	retq # Offset: 384
    00000181: 	nopl	(%rax) # Size: 7
.Ltmp4489:
    00000188: 	cmpl	0x8(%r8), %r9d
    0000018c: 	jg	.Ltmp4504 # Offset: 396
.Ltmp4509:
    00000192: 	movq	%r8, %rax
    00000195: 	jmp	.Ltmp4492 # Offset: 405
.Ltmp4498:
    0000019a: 	movq	%r8, %rdx
    0000019d: 	movl	%r9d, %esi
    000001a0: 	movq	%r10, %rdi
    000001a3: 	callq	_Z23lower_bound_recur_innerISt18_Fwd_list_iteratorIiEilET_S2_T0_T1_ # Offset: 419
    000001a8: 	jmp	.Ltmp4492 # Offset: 424
.Ltmp4495:
    000001ad: 	testq	%rdi, %rdi
    000001b0: 	leaq	0x3(%rdi), %r8
    000001b4: 	movq	%rax, %r10
    000001b7: 	cmovnsq	%rdi, %r8
    000001bb: 	sarq	$0x2, %r8
    000001bf: 	leaq	-0x1(%r8), %rdx
    000001c3: 	je	.Ltmp4502 # Offset: 451
    000001c5: 	nopl	(%rax) # Size: 3
.Ltmp4505:
    000001c8: 	movq	(%rax), %rax
    000001cb: 	subq	$0x1, %rdx
    000001cf: 	jae	.Ltmp4505 # Offset: 463
    000001d1: 	jmp	.Ltmp4502 # Offset: 465
.Ltmp4501:
    000001d3: 	sarq	$0x3, %rdx
    000001d7: 	leaq	-0x1(%rdx), %rax
    000001db: 	je	.Ltmp4506 # Offset: 475
    000001dd: 	nopl	(%rax) # Size: 3
.Ltmp4507:
    000001e0: 	movq	(%r10), %r10
    000001e3: 	subq	$0x1, %rax
    000001e7: 	jae	.Ltmp4507 # Offset: 487
.Ltmp4506:
    000001e9: 	cmpl	0x8(%r10), %r9d
    000001ed: 	jle	.Ltmp4508 # Offset: 493
    000001ef: 	addq	$0x1, %rdx
    000001f3: 	movq	(%r10), %r8
    000001f6: 	movl	%r9d, %esi
    000001f9: 	subq	%rdx, %rdi
    000001fc: 	movq	%rdi, %rdx
    000001ff: 	movq	%r8, %rdi
    00000202: 	callq	_Z23lower_bound_recur_innerISt18_Fwd_list_iteratorIiEilET_S2_T0_T1_ # Offset: 514
    00000207: 	jmp	.Ltmp4492 # Offset: 519
.Ltmp4508:
    0000020c: 	movl	%r9d, %esi
    0000020f: 	movq	%r8, %rdi
    00000212: 	callq	_Z23lower_bound_recur_innerISt18_Fwd_list_iteratorIiEilET_S2_T0_T1_ # Offset: 530
    00000217: 	jmp	.Ltmp4492 # Offset: 535
.Ltmp4499:
    0000021c: 	cmpl	0x8(%r8), %r9d
    00000220: 	jle	.Ltmp4509 # Offset: 544
    00000226: 	jmp	.Ltmp4510 # Offset: 550
    0000022b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4493:
    00000230: 	cmpl	0x8(%rax), %r9d
    00000234: 	jle	.Ltmp4492 # Offset: 564
    0000023a: 	movq	%rax, %rcx
    0000023d: 	jmp	.Ltmp4511 # Offset: 573
.Ltmp4504:
    00000242: 	movq	%r8, %rcx
    00000245: 	jmp	.Ltmp4512 # Offset: 581
DWARF CFI Instructions:
    <empty>
End of Function "_Z17lower_bound_recurISt18_Fwd_list_iteratorIiEiET_S2_S2_T0_"

Binary Function "_Z23upper_bound_recur_innerISt18_Fwd_list_iteratorIiEilET_S2_T0_T1_" after disassembly {
  Number      : 447
  State       : disassembled
  Address     : 0x26dd0
  Size        : 0x10f
  MaxSize     : 0x110
  Offset      : 0x26dd0
  Section     : .text
  Orc Section : .local.text._Z23upper_bound_recur_innerISt18_Fwd_list_iteratorIiEilET_S2_T0_T1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0446:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	testq	%rdx, %rdx
    0000000a: 	je	.Ltmp4513 # Offset: 10
    00000010: 	movq	%rdx, %r8
    00000013: 	subq	$0x8, %rsp
    00000017: 	movl	%esi, %r9d
    0000001a: 	movq	%rdi, %r10
    0000001d: 	shrq	$0x3f, %r8
    00000021: 	addq	%rdx, %r8
    00000024: 	sarq	%r8
    00000027: 	leaq	-0x1(%r8), %rcx
    0000002b: 	je	.Ltmp4514 # Offset: 43
    0000002d: 	movq	%rdi, %rsi
.Ltmp4515:
    00000030: 	movq	(%rsi), %rsi
    00000033: 	subq	$0x1, %rcx
    00000037: 	jae	.Ltmp4515 # Offset: 55
    00000039: 	cmpl	0x8(%rsi), %r9d
    0000003d: 	jl	.Ltmp4516 # Offset: 61
.Ltmp4526:
    0000003f: 	movq	(%rsi), %rax
    00000042: 	addq	$0x1, %r8
    00000046: 	movq	%rax, %rdi
    00000049: 	subq	%r8, %rdx
    0000004c: 	je	.Ltmp4517 # Offset: 76
    0000004e: 	movq	%rdx, %r8
    00000051: 	shrq	$0x3f, %r8
    00000055: 	addq	%rdx, %r8
    00000058: 	sarq	%r8
    0000005b: 	leaq	-0x1(%r8), %rcx
    0000005f: 	je	.Ltmp4518 # Offset: 95
    00000061: 	nopl	(%rax) # Size: 7
.Ltmp4519:
    00000068: 	movq	(%rax), %rax
    0000006b: 	subq	$0x1, %rcx
    0000006f: 	jae	.Ltmp4519 # Offset: 111
.Ltmp4518:
    00000071: 	cmpl	0x8(%rax), %r9d
    00000075: 	jge	.Ltmp4520 # Offset: 117
    00000077: 	movq	%r8, %rdx
    0000007a: 	movl	%r9d, %esi
    0000007d: 	callq	_Z23upper_bound_recur_innerISt18_Fwd_list_iteratorIiEilET_S2_T0_T1_ # Offset: 125
.Ltmp4517:
    00000082: 	addq	$0x8, %rsp
    00000086: 	retq # Offset: 134
    00000087: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4513:
    00000090: 	retq # Offset: 144
    00000091: 	nopl	(%rax) # Size: 7
.Ltmp4514:
    00000098: 	cmpl	0x8(%rdi), %esi
    0000009b: 	jge	.Ltmp4521 # Offset: 155
.Ltmp4525:
    0000009d: 	movq	%r10, %rax
    000000a0: 	addq	$0x8, %rsp
    000000a4: 	retq # Offset: 164
    000000a5: 	nopl	(%rax) # Size: 3
.Ltmp4516:
    000000a8: 	leaq	0x3(%rdx), %rax
    000000ac: 	testq	%rdx, %rdx
    000000af: 	cmovsq	%rax, %rdx
    000000b3: 	sarq	$0x2, %rdx
    000000b7: 	leaq	-0x1(%rdx), %rax
    000000bb: 	je	.Ltmp4522 # Offset: 187
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp4523:
    000000c0: 	movq	(%r10), %r10
    000000c3: 	subq	$0x1, %rax
    000000c7: 	jae	.Ltmp4523 # Offset: 199
.Ltmp4522:
    000000c9: 	cmpl	0x8(%r10), %r9d
    000000cd: 	jl	.Ltmp4524 # Offset: 205
    000000cf: 	leaq	0x1(%rdx), %rax
    000000d3: 	movq	(%r10), %rdi
    000000d6: 	movq	%r8, %rdx
    000000d9: 	subq	%rax, %rdx
.Ltmp4524:
    000000dc: 	movl	%r9d, %esi
    000000df: 	callq	_Z23upper_bound_recur_innerISt18_Fwd_list_iteratorIiEilET_S2_T0_T1_ # Offset: 223
    000000e4: 	movq	%rax, %r10
    000000e7: 	jmp	.Ltmp4525 # Offset: 231
    000000e9: 	nopl	(%rax) # Size: 7
.Ltmp4520:
    000000f0: 	addq	$0x1, %r8
    000000f4: 	movq	(%rax), %rdi
    000000f7: 	movl	%r9d, %esi
    000000fa: 	subq	%r8, %rdx
    000000fd: 	callq	_Z23upper_bound_recur_innerISt18_Fwd_list_iteratorIiEilET_S2_T0_T1_ # Offset: 253
    00000102: 	jmp	.Ltmp4517 # Offset: 258
.Ltmp4521:
    00000107: 	movq	%rdi, %rsi
    0000010a: 	jmp	.Ltmp4526 # Offset: 266
DWARF CFI Instructions:
    <empty>
End of Function "_Z23upper_bound_recur_innerISt18_Fwd_list_iteratorIiEilET_S2_T0_T1_"

Binary Function "_Z17upper_bound_recurISt18_Fwd_list_iteratorIiEiET_S2_S2_T0_" after disassembly {
  Number      : 448
  State       : disassembled
  Address     : 0x26ee0
  Size        : 0x23a
  MaxSize     : 0x240
  Offset      : 0x26ee0
  Section     : .text
  Orc Section : .local.text._Z17upper_bound_recurISt18_Fwd_list_iteratorIiEiET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0447:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp4527 # Offset: 10
    00000010: 	movl	%edx, %r9d
    00000013: 	subq	$0x8, %rsp
    00000017: 	movq	%rdi, %r8
    0000001a: 	movq	%rdi, %r10
    0000001d: 	movq	%rdi, %rax
    00000020: 	xorl	%edx, %edx
    00000022: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4528:
    00000028: 	movq	(%rax), %rax
    0000002b: 	movq	%rdx, %rdi
    0000002e: 	addq	$0x1, %rdx
    00000032: 	cmpq	%rsi, %rax
    00000035: 	jne	.Ltmp4528 # Offset: 53
    00000037: 	movq	%rdx, %rsi
    0000003a: 	sarq	%rsi
    0000003d: 	leaq	-0x1(%rsi), %rax
    00000041: 	je	.Ltmp4529 # Offset: 65
    00000047: 	movq	%r8, %rcx
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4530:
    00000050: 	movq	(%rcx), %rcx
    00000053: 	subq	$0x1, %rax
    00000057: 	jae	.Ltmp4530 # Offset: 87
    00000059: 	cmpl	0x8(%rcx), %r9d
    0000005d: 	jl	.Ltmp4531 # Offset: 93
.Ltmp4552:
    00000063: 	movq	(%rcx), %rax
    00000066: 	subq	%rsi, %rdi
    00000069: 	je	.Ltmp4532 # Offset: 105
    0000006f: 	movq	%rdi, %rsi
    00000072: 	shrq	$0x3f, %rsi
    00000076: 	addq	%rdi, %rsi
    00000079: 	sarq	%rsi
    0000007c: 	leaq	-0x1(%rsi), %rdx
    00000080: 	je	.Ltmp4533 # Offset: 128
    00000086: 	movq	%rax, %rcx
    00000089: 	nopl	(%rax) # Size: 7
.Ltmp4534:
    00000090: 	movq	(%rcx), %rcx
    00000093: 	subq	$0x1, %rdx
    00000097: 	jae	.Ltmp4534 # Offset: 151
    00000099: 	cmpl	0x8(%rcx), %r9d
    0000009d: 	jl	.Ltmp4535 # Offset: 157
.Ltmp4551:
    000000a3: 	movq	(%rcx), %rax
    000000a6: 	addq	$0x1, %rsi
    000000aa: 	movq	%rax, %r10
    000000ad: 	subq	%rsi, %rdi
    000000b0: 	je	.Ltmp4532 # Offset: 176
    000000b2: 	movq	%rdi, %r8
    000000b5: 	shrq	$0x3f, %r8
    000000b9: 	addq	%rdi, %r8
    000000bc: 	sarq	%r8
    000000bf: 	leaq	-0x1(%r8), %rdx
    000000c3: 	je	.Ltmp4536 # Offset: 195
    000000c5: 	nopl	(%rax) # Size: 3
.Ltmp4537:
    000000c8: 	movq	(%rax), %rax
    000000cb: 	subq	$0x1, %rdx
    000000cf: 	jae	.Ltmp4537 # Offset: 207
.Ltmp4536:
    000000d1: 	cmpl	0x8(%rax), %r9d
    000000d5: 	jl	.Ltmp4538 # Offset: 213
    000000db: 	movq	(%rax), %r10
    000000de: 	addq	$0x1, %r8
    000000e2: 	movl	%r9d, %esi
    000000e5: 	subq	%r8, %rdi
    000000e8: 	movq	%rdi, %rdx
    000000eb: 	movq	%r10, %rdi
    000000ee: 	callq	_Z23upper_bound_recur_innerISt18_Fwd_list_iteratorIiEilET_S2_T0_T1_ # Offset: 238
.Ltmp4532:
    000000f3: 	addq	$0x8, %rsp
    000000f7: 	retq # Offset: 247
    000000f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp4531:
    00000100: 	movq	%rdx, %rdi
    00000103: 	movq	%r8, %rcx
    00000106: 	sarq	$0x2, %rdi
    0000010a: 	leaq	-0x1(%rdi), %rax
    0000010e: 	je	.Ltmp4539 # Offset: 270
    00000114: 	nopl	(%rax) # Size: 4
.Ltmp4540:
    00000118: 	movq	(%rcx), %rcx
    0000011b: 	subq	$0x1, %rax
    0000011f: 	jae	.Ltmp4540 # Offset: 287
    00000121: 	cmpl	0x8(%rcx), %r9d
    00000125: 	jl	.Ltmp4541 # Offset: 293
.Ltmp4550:
    0000012b: 	movq	(%rcx), %rax
    0000012e: 	addq	$0x1, %rdi
    00000132: 	movq	%rax, %r10
    00000135: 	subq	%rdi, %rsi
    00000138: 	je	.Ltmp4532 # Offset: 312
    0000013a: 	movq	%rsi, %r8
    0000013d: 	shrq	$0x3f, %r8
    00000141: 	addq	%rsi, %r8
    00000144: 	sarq	%r8
    00000147: 	leaq	-0x1(%r8), %rdx
    0000014b: 	je	.Ltmp4542 # Offset: 331
    0000014d: 	nopl	(%rax) # Size: 3
.Ltmp4543:
    00000150: 	movq	(%rax), %rax
    00000153: 	subq	$0x1, %rdx
    00000157: 	jae	.Ltmp4543 # Offset: 343
.Ltmp4542:
    00000159: 	cmpl	0x8(%rax), %r9d
    0000015d: 	jl	.Ltmp4538 # Offset: 349
    0000015f: 	movq	(%rax), %r10
    00000162: 	addq	$0x1, %r8
    00000166: 	subq	%r8, %rsi
    00000169: 	movq	%rsi, %rdx
    0000016c: 	movq	%r10, %rdi
    0000016f: 	movl	%r9d, %esi
    00000172: 	callq	_Z23upper_bound_recur_innerISt18_Fwd_list_iteratorIiEilET_S2_T0_T1_ # Offset: 370
    00000177: 	jmp	.Ltmp4532 # Offset: 375
    0000017c: 	nopl	(%rax) # Size: 4
.Ltmp4527:
    00000180: 	retq # Offset: 384
    00000181: 	nopl	(%rax) # Size: 7
.Ltmp4529:
    00000188: 	cmpl	0x8(%r8), %r9d
    0000018c: 	jge	.Ltmp4544 # Offset: 396
.Ltmp4549:
    00000192: 	movq	%r8, %rax
    00000195: 	jmp	.Ltmp4532 # Offset: 405
.Ltmp4538:
    0000019a: 	movq	%r8, %rdx
    0000019d: 	movl	%r9d, %esi
    000001a0: 	movq	%r10, %rdi
    000001a3: 	callq	_Z23upper_bound_recur_innerISt18_Fwd_list_iteratorIiEilET_S2_T0_T1_ # Offset: 419
    000001a8: 	jmp	.Ltmp4532 # Offset: 424
.Ltmp4535:
    000001ad: 	testq	%rdi, %rdi
    000001b0: 	leaq	0x3(%rdi), %r8
    000001b4: 	movq	%rax, %r10
    000001b7: 	cmovnsq	%rdi, %r8
    000001bb: 	sarq	$0x2, %r8
    000001bf: 	leaq	-0x1(%r8), %rdx
    000001c3: 	je	.Ltmp4542 # Offset: 451
    000001c5: 	nopl	(%rax) # Size: 3
.Ltmp4545:
    000001c8: 	movq	(%rax), %rax
    000001cb: 	subq	$0x1, %rdx
    000001cf: 	jae	.Ltmp4545 # Offset: 463
    000001d1: 	jmp	.Ltmp4542 # Offset: 465
.Ltmp4541:
    000001d3: 	sarq	$0x3, %rdx
    000001d7: 	leaq	-0x1(%rdx), %rax
    000001db: 	je	.Ltmp4546 # Offset: 475
    000001dd: 	nopl	(%rax) # Size: 3
.Ltmp4547:
    000001e0: 	movq	(%r10), %r10
    000001e3: 	subq	$0x1, %rax
    000001e7: 	jae	.Ltmp4547 # Offset: 487
.Ltmp4546:
    000001e9: 	cmpl	0x8(%r10), %r9d
    000001ed: 	jl	.Ltmp4548 # Offset: 493
    000001ef: 	addq	$0x1, %rdx
    000001f3: 	movq	(%r10), %r8
    000001f6: 	subq	%rdx, %rdi
    000001f9: 	movq	%rdi, %rdx
.Ltmp4548:
    000001fc: 	movl	%r9d, %esi
    000001ff: 	movq	%r8, %rdi
    00000202: 	callq	_Z23upper_bound_recur_innerISt18_Fwd_list_iteratorIiEilET_S2_T0_T1_ # Offset: 514
    00000207: 	jmp	.Ltmp4532 # Offset: 519
.Ltmp4539:
    0000020c: 	cmpl	0x8(%rcx), %r9d
    00000210: 	jl	.Ltmp4549 # Offset: 528
    00000216: 	jmp	.Ltmp4550 # Offset: 534
    0000021b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4533:
    00000220: 	cmpl	0x8(%rax), %r9d
    00000224: 	jl	.Ltmp4532 # Offset: 548
    0000022a: 	movq	%rax, %rcx
    0000022d: 	jmp	.Ltmp4551 # Offset: 557
.Ltmp4544:
    00000232: 	movq	%r8, %rcx
    00000235: 	jmp	.Ltmp4552 # Offset: 565
DWARF CFI Instructions:
    <empty>
End of Function "_Z17upper_bound_recurISt18_Fwd_list_iteratorIiEiET_S2_S2_T0_"

Binary Function "_Z15TestSearchArrayISt18_Fwd_list_iteratorIiEPFbS1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 449
  State       : disassembled
  Address     : 0x27120
  Size        : 0x1ee
  MaxSize     : 0x1f0
  Offset      : 0x27120
  Section     : .text
  Orc Section : .local.text._Z15TestSearchArrayISt18_Fwd_list_iteratorIiEPFbS1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0448:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rcx, %r15
    00000009: 	pushq	%r14
    0000000b: 	movq	%rsi, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %r12
    00000015: 	movl	$0x1000, %edi
    0000001a: 	pushq	%rbp
    0000001b: 	pushq	%rbx
    0000001c: 	subq	$0x28, %rsp
    00000020: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000027: 	movq	%rdx, 0x10(%rsp)
    0000002c: 	movq	%r8, 0x18(%rsp)
    00000031: 	movb	%r9b, 0xf(%rsp)
    00000036: 	callq	_Znwm@PLT # Offset: 54
    0000003b: 	movq	%rax, %r13
    0000003e: 	movl	$0x0, (%rax)
    00000044: 	addq	$0x4, %rax
    00000048: 	leaq	0x1000(%r13), %rsi
    0000004f: 	cmpq	%rsi, %rax
    00000052: 	je	.Ltmp4553 # Offset: 82
    00000054: 	leaq	0xc(%r13), %rdi
    00000058: 	movq	$0x0, 0x4(%r13)
    00000060: 	movq	$0x0, 0xff8(%r13)
    0000006b: 	andq	$-0x8, %rdi
    0000006f: 	subq	%rdi, %rax
    00000072: 	movq	%rax, %rcx
    00000075: 	xorl	%eax, %eax
    00000077: 	addl	$0xffc, %ecx
    0000007d: 	shrl	$0x3, %ecx
    00000080: 	rep		stosq	%rax, %es:(%rdi)
.Ltmp4553:
    00000083: 	movabsq	$0x5851f42d4c957f2d, %r8
    0000008d: 	movq	%r13, %rcx
    00000090: 	movabsq	$0x14057b7ef767814f, %rdi
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4556:
    000000a0: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000000a7: 	imulq	%r8, %rax
    000000ab: 	addq	%rdi, %rax
    000000ae: 	movq	%rax, %rdx
    000000b1: 	movq	%rax, %r9
    000000b4: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000000bb: 	shrq	$0x14, %rdx
    000000bf: 	shlq	$0x17, %r9
    000000c3: 	xorq	%r9, %rdx
    000000c6: 	xorq	%rdx, %rax
    000000c9: 	xorl	%edx, %edx
    000000cb: 	divq	0x10(%rsp)
    000000d0: 	testq	%rdx, %rdx
    000000d3: 	leaq	-0x1(%rdx), %rax
    000000d7: 	movq	%r12, %rdx
    000000da: 	je	.Ltmp4554 # Offset: 218
    000000dc: 	nopl	(%rax) # Size: 4
.Ltmp4555:
    000000e0: 	movq	(%rdx), %rdx
    000000e3: 	subq	$0x1, %rax
    000000e7: 	jae	.Ltmp4555 # Offset: 231
.Ltmp4554:
    000000e9: 	movl	0x8(%rdx), %eax
    000000ec: 	addq	$0x4, %rcx
    000000f0: 	movl	%eax, -0x4(%rcx)
    000000f3: 	cmpq	%rcx, %rsi
    000000f6: 	jne	.Ltmp4556 # Offset: 246
    000000f8: 	callq	clock@PLT # Offset: 248
    000000fd: 	xorl	%ebx, %ebx
    000000ff: 	xorl	%ebp, %ebp
    00000101: 	movq	%rax, start_time(%rip)
.Ltmp4560:
    00000108: 	leaq	0xc8(%rbp), %rax
    0000010f: 	movq	%rax, (%rsp)
    00000113: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4558:
    00000118: 	movq	%rbp, %rax
    0000011b: 	movq	%r14, %rsi
    0000011e: 	addq	$0x1, %rbp
    00000122: 	movq	%r12, %rdi
    00000125: 	andl	$0x3ff, %eax
    0000012a: 	movl	(%r13,%rax,4), %edx
    0000012f: 	callq	*%r15 # Offset: 303
    00000132: 	testb	%al, %al
    00000134: 	jne	.Ltmp4557 # Offset: 308
    00000136: 	cmpb	$0x0, 0xf(%rsp)
    0000013b: 	movl	$0x1, %eax
    00000140: 	cmovel	%eax, %ebx
.Ltmp4557:
    00000143: 	cmpq	(%rsp), %rbp
    00000147: 	jne	.Ltmp4558 # Offset: 327
    00000149: 	callq	clock@PLT # Offset: 329
    0000014e: 	movsd	gMinimumTimeTarget(%rip), %xmm1
    00000156: 	pxor	%xmm0, %xmm0
    0000015a: 	movq	%rax, end_time(%rip)
    00000161: 	subq	start_time(%rip), %rax
    00000168: 	cvtsi2sd	%rax, %xmm0
    0000016d: 	divsd	DATAat0x34410(%rip), %xmm0
    00000175: 	comisd	%xmm0, %xmm1
    00000179: 	jbe	.Ltmp4559 # Offset: 377
    0000017b: 	cmpq	$0x5f5e0ff, %rbp
    00000182: 	jbe	.Ltmp4560 # Offset: 386
.Ltmp4559:
    00000184: 	movq	0x18(%rsp), %rdx
    00000189: 	movq	0x10(%rsp), %rdi
    0000018e: 	movq	%rbp, %rsi
    00000191: 	callq	_Z13record_resultdmmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 401
    00000196: 	testb	%bl, %bl
    00000198: 	jne	.Ltmp4561 # Offset: 408
.Ltmp4562:
    0000019a: 	addq	$0x28, %rsp
    0000019e: 	movq	%r13, %rdi
    000001a1: 	movl	$0x1000, %esi
    000001a6: 	popq	%rbx
    000001a7: 	popq	%rbp
    000001a8: 	popq	%r12
    000001aa: 	popq	%r13
    000001ac: 	popq	%r14
    000001ae: 	popq	%r15
    000001b0: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 432
.Ltmp4561:
    000001b5: 	movq	0x18(%rsp), %rax
    000001ba: 	leaq	DATAat0x34137(%rip), %rsi
    000001c1: 	movl	$0x1, %edi
    000001c6: 	movq	(%rax), %rdx
    000001c9: 	xorl	%eax, %eax
    000001cb: 	callq	__printf_chk@PLT # Offset: 459
    000001d0: 	jmp	.Ltmp4562 # Offset: 464
    000001d2: 	endbr64
    000001d6: 	movq	%rax, %rbp
    000001d9: 	movq	%r13, %rdi
    000001dc: 	movl	$0x1000, %esi
    000001e1: 	callq	_ZdlPvm@PLT # Offset: 481
    000001e6: 	movq	%rbp, %rdi
    000001e9: 	callq	_Unwind_Resume@PLT # Offset: 489
DWARF CFI Instructions:
    <empty>
End of Function "_Z15TestSearchArrayISt18_Fwd_list_iteratorIiEPFbS1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z13TestOneSearchISt18_Fwd_list_iteratorIiEPFbS1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 450
  State       : disassembled
  Address     : 0x27310
  Size        : 0x314
  MaxSize     : 0x320
  Offset      : 0x27310
  Section     : .text
  Orc Section : .local.text._Z13TestOneSearchISt18_Fwd_list_iteratorIiEPFbS1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0449:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%r8, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdx, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rsi, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	movq	%rdi, %rbx
    0000001d: 	subq	$0x68, %rsp
    00000021: 	movq	%rcx, 0x10(%rsp)
    00000026: 	movq	%fs:0x28, %rax
    0000002f: 	movq	%rax, 0x58(%rsp)
    00000034: 	xorl	%eax, %eax
    00000036: 	movq	%rdi, %rax
    00000039: 	cmpq	%rsi, %rdi
    0000003c: 	je	.Ltmp4563 # Offset: 60
    0000003e: 	nop # Size: 2
.Ltmp4564:
    00000040: 	movq	%rax, %rdx
    00000043: 	movq	(%rax), %rax
    00000046: 	movl	$0x5, 0x8(%rdx)
    0000004d: 	cmpq	%rbp, %rax
    00000050: 	jne	.Ltmp4564 # Offset: 80
.Ltmp4563:
    00000052: 	movzbl	%r9b, %eax
    00000056: 	movq	(%r14), %r8
    00000059: 	movq	0x8(%r14), %r15
    0000005d: 	movl	%eax, 0xc(%rsp)
    00000061: 	leaq	0x40(%rsp), %rax
    00000066: 	movq	%rax, (%rsp)
    0000006a: 	movq	%rax, 0x30(%rsp)
    0000006f: 	movq	%r8, %rax
    00000072: 	addq	%r15, %rax
    00000075: 	je	.Ltmp4565 # Offset: 117
    00000077: 	testq	%r8, %r8
    0000007a: 	je	.Ltmp4566 # Offset: 122
.Ltmp4565:
    00000080: 	movq	%r15, 0x28(%rsp)
    00000085: 	cmpq	$0xf, %r15
    00000089: 	ja	.Ltmp4567 # Offset: 137
    0000008f: 	cmpq	$0x1, %r15
    00000093: 	jne	.Ltmp4568 # Offset: 147
    00000099: 	movzbl	(%r8), %eax
    0000009d: 	movb	%al, 0x40(%rsp)
    000000a1: 	movq	(%rsp), %rax
.Ltmp4582:
    000000a5: 	movq	%r15, 0x38(%rsp)
    000000aa: 	movb	$0x0, (%rax,%r15)
    000000af: 	movabsq	$0x3fffffffffffffff, %rax
    000000b9: 	subq	0x38(%rsp), %rax
    000000be: 	cmpq	$0xc, %rax
    000000c2: 	jbe	.Ltmp4569 # Offset: 194
    000000c8: 	leaq	0x30(%rsp), %r15
    000000cd: 	movl	$0xd, %edx
    000000d2: 	leaq	DATAat0x34160(%rip), %rsi
    000000d9: 	movq	%r15, %rdi
    000000dc: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 220
    000000e1: 	movl	0xc(%rsp), %r9d
    000000e6: 	movq	0x10(%rsp), %rcx
    000000eb: 	movq	%r15, %r8
    000000ee: 	movq	%r12, %rdx
    000000f1: 	movq	%rbp, %rsi
    000000f4: 	movq	%r13, %rdi
    000000f7: 	callq	_Z15TestSearchArrayISt18_Fwd_list_iteratorIiEPFbS1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 247
    000000fc: 	movq	0x30(%rsp), %rdi
    00000101: 	cmpq	(%rsp), %rdi
    00000105: 	je	.Ltmp4570 # Offset: 261
    00000107: 	movq	0x40(%rsp), %rax
    0000010c: 	leaq	0x1(%rax), %rsi
    00000110: 	callq	_ZdlPvm@PLT # Offset: 272
.Ltmp4570:
    00000115: 	cmpq	$0x9, %r12
    00000119: 	jbe	.Ltmp4571 # Offset: 281
    0000011f: 	movabsq	$-0x3333333333333333, %rdx
    00000129: 	movq	%r12, %rax
    0000012c: 	mulq	%rdx
    0000012f: 	shrq	$0x3, %rdx
.Ltmp4583:
    00000133: 	movq	%r13, %rsi
    00000136: 	xorl	%ecx, %ecx
    00000138: 	xorl	%r8d, %r8d
    0000013b: 	cmpq	$0x0, %r12
    0000013f: 	jbe	.Ltmp4572 # Offset: 319
    00000141: 	nopl	(%rax) # Size: 7
.Ltmp4575:
    00000148: 	xorl	%eax, %eax
    0000014a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4574:
    00000150: 	movq	%rsi, %rdi
    00000153: 	addq	$0x1, %rax
    00000157: 	movq	(%rsi), %rsi
    0000015a: 	addq	$0x1, %rcx
    0000015e: 	movl	%r8d, 0x8(%rdi)
    00000162: 	cmpq	%rdx, %rax
    00000165: 	jae	.Ltmp4573 # Offset: 357
    00000167: 	cmpq	%rcx, %r12
    0000016a: 	ja	.Ltmp4574 # Offset: 362
.Ltmp4573:
    0000016c: 	addl	$0x1, %r8d
    00000170: 	cmpq	%rcx, %r12
    00000173: 	ja	.Ltmp4575 # Offset: 371
.Ltmp4572:
    00000175: 	leaq	DATAat0x3416e(%rip), %rdx
    0000017c: 	movq	%r14, %rsi
    0000017f: 	movq	%r15, %rdi
    00000182: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 386
    00000187: 	movl	0xc(%rsp), %r9d
    0000018c: 	movq	%r15, %r8
    0000018f: 	movq	%r12, %rdx
    00000192: 	movq	0x10(%rsp), %rcx
    00000197: 	movq	%rbp, %rsi
    0000019a: 	movq	%r13, %rdi
    0000019d: 	callq	_Z15TestSearchArrayISt18_Fwd_list_iteratorIiEPFbS1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 413
    000001a2: 	movq	0x30(%rsp), %rdi
    000001a7: 	cmpq	(%rsp), %rdi
    000001ab: 	je	.Ltmp4576 # Offset: 427
    000001ad: 	movq	0x40(%rsp), %rax
    000001b2: 	leaq	0x1(%rax), %rsi
    000001b6: 	callq	_ZdlPvm@PLT # Offset: 438
.Ltmp4576:
    000001bb: 	xorl	%eax, %eax
    000001bd: 	cmpq	%rbp, %r13
    000001c0: 	je	.Ltmp4577 # Offset: 448
    000001c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4578:
    000001c8: 	movq	%rbx, %rdx
    000001cb: 	movq	(%rbx), %rbx
    000001ce: 	movl	%eax, 0x8(%rdx)
    000001d1: 	addl	$0x1, %eax
    000001d4: 	cmpq	%rbx, %rbp
    000001d7: 	jne	.Ltmp4578 # Offset: 471
.Ltmp4577:
    000001d9: 	movq	%rbp, %rsi
    000001dc: 	movq	%r13, %rdi
    000001df: 	callq	_Z18quicksort2_forwardISt18_Fwd_list_iteratorIiEEvT_S2_ # Offset: 479
    000001e4: 	leaq	DATAat0x34184(%rip), %rdx
    000001eb: 	movq	%r14, %rsi
    000001ee: 	movq	%r15, %rdi
    000001f1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 497
    000001f6: 	movl	0xc(%rsp), %r9d
    000001fb: 	movq	%r15, %r8
    000001fe: 	movq	%r12, %rdx
    00000201: 	movq	0x10(%rsp), %rcx
    00000206: 	movq	%rbp, %rsi
    00000209: 	movq	%r13, %rdi
    0000020c: 	callq	_Z15TestSearchArrayISt18_Fwd_list_iteratorIiEPFbS1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 524
    00000211: 	movq	0x30(%rsp), %rdi
    00000216: 	cmpq	(%rsp), %rdi
    0000021a: 	je	.Ltmp4579 # Offset: 538
    0000021c: 	movq	0x40(%rsp), %rax
    00000221: 	leaq	0x1(%rax), %rsi
    00000225: 	callq	_ZdlPvm@PLT # Offset: 549
.Ltmp4579:
    0000022a: 	movq	0x58(%rsp), %rax
    0000022f: 	subq	%fs:0x28, %rax
    00000238: 	jne	.Ltmp4580 # Offset: 568
    0000023e: 	addq	$0x68, %rsp
    00000242: 	popq	%rbx
    00000243: 	popq	%rbp
    00000244: 	popq	%r12
    00000246: 	popq	%r13
    00000248: 	popq	%r14
    0000024a: 	popq	%r15
    0000024c: 	retq # Offset: 588
.Ltmp4568:
    0000024d: 	testq	%r15, %r15
    00000250: 	jne	.Ltmp4581 # Offset: 592
    00000252: 	movq	(%rsp), %rax
    00000256: 	jmp	.Ltmp4582 # Offset: 598
.Ltmp4571:
    0000025b: 	testq	%r12, %r12
    0000025e: 	je	.Ltmp4572 # Offset: 606
    00000264: 	movl	$0x1, %edx
    00000269: 	jmp	.Ltmp4583 # Offset: 617
.Ltmp4567:
    0000026e: 	leaq	0x30(%rsp), %rdi
    00000273: 	leaq	0x28(%rsp), %rsi
    00000278: 	xorl	%edx, %edx
    0000027a: 	movq	%r8, 0x18(%rsp)
    0000027f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 639
    00000284: 	movq	0x18(%rsp), %r8
    00000289: 	movq	%rax, 0x30(%rsp)
    0000028e: 	movq	%rax, %rdi
    00000291: 	movq	0x28(%rsp), %rax
    00000296: 	movq	%rax, 0x40(%rsp)
.Ltmp4584:
    0000029b: 	movq	%r15, %rdx
    0000029e: 	movq	%r8, %rsi
    000002a1: 	callq	memcpy@PLT # Offset: 673
    000002a6: 	movq	0x28(%rsp), %r15
    000002ab: 	movq	0x30(%rsp), %rax
    000002b0: 	jmp	.Ltmp4582 # Offset: 688
.Ltmp4569:
    000002b5: 	leaq	DATAat0x3414b(%rip), %rdi
    000002bc: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 700
.Ltmp4581:
    000002c1: 	movq	(%rsp), %rdi
    000002c5: 	jmp	.Ltmp4584 # Offset: 709
.Ltmp4580:
    000002c7: 	callq	__stack_chk_fail@PLT # Offset: 711
.Ltmp4566:
    000002cc: 	leaq	DATAat0x34008(%rip), %rdi
    000002d3: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 723
    000002d8: 	endbr64
.Ltmp4586:
    000002dc: 	movq	%rax, %rbp
    000002df: 	jmp	.Ltmp4585 # Offset: 735
    000002e1: 	endbr64
    000002e5: 	jmp	.Ltmp4586 # Offset: 741
    000002e7: 	endbr64
    000002eb: 	jmp	.Ltmp4586 # Offset: 747
    000002ed: 	endbr64
    000002f1: 	jmp	.Ltmp4586 # Offset: 753
.Ltmp4585:
    000002f3: 	movq	0x30(%rsp), %rdi
    000002f8: 	cmpq	(%rsp), %rdi
    000002fc: 	je	.Ltmp4587 # Offset: 764
    000002fe: 	movq	0x40(%rsp), %rax
    00000303: 	leaq	0x1(%rax), %rsi
    00000307: 	callq	_ZdlPvm@PLT # Offset: 775
.Ltmp4587:
    0000030c: 	movq	%rbp, %rdi
    0000030f: 	callq	_Unwind_Resume@PLT # Offset: 783
DWARF CFI Instructions:
    <empty>
End of Function "_Z13TestOneSearchISt18_Fwd_list_iteratorIiEPFbS1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z11TestOneTypeIiEvv" after disassembly {
  Number      : 451
  State       : disassembled
  Address     : 0x27630
  Size        : 0x28b0
  MaxSize     : 0x28b0
  Offset      : 0x27630
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIiEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0450:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	leaq	DATAat0x3431a(%rip), %rsi
    0000000d: 	pushq	%r14
    0000000f: 	pushq	%r13
    00000011: 	movabsq	$0x28f5c28f5c28f5c3, %r13
    0000001b: 	pushq	%r12
    0000001d: 	movl	$0x5, %r12d
    00000023: 	pushq	%rbp
    00000024: 	movabsq	$0x346dc5d63886594b, %rbp
    0000002e: 	pushq	%rbx
    0000002f: 	subq	$0x268, %rsp
    00000036: 	movdqa	DATAat0x344d0(%rip), %xmm0
    0000003e: 	movq	%fs:0x28, %rax
    00000047: 	movq	%rax, 0x258(%rsp)
    0000004f: 	xorl	%eax, %eax
    00000051: 	leaq	0x120(%rsp), %rdi
    00000059: 	movq	$0x30d40, 0x250(%rsp)
    00000065: 	leaq	0x1e8(%rsp), %rbx
    0000006d: 	movaps	%xmm0, 0x1e0(%rsp)
    00000075: 	movdqa	DATAat0x344e0(%rip), %xmm0
    0000007d: 	movaps	%xmm0, 0x1f0(%rsp)
    00000085: 	movdqa	DATAat0x344f0(%rip), %xmm0
    0000008d: 	movaps	%xmm0, 0x200(%rsp)
    00000095: 	movdqa	DATAat0x34500(%rip), %xmm0
    0000009d: 	movaps	%xmm0, 0x210(%rsp)
    000000a5: 	movdqa	DATAat0x34510(%rip), %xmm0
    000000ad: 	movaps	%xmm0, 0x220(%rsp)
    000000b5: 	movdqa	DATAat0x34520(%rip), %xmm0
    000000bd: 	movaps	%xmm0, 0x230(%rsp)
    000000c5: 	movdqa	DATAat0x34530(%rip), %xmm0
    000000cd: 	movaps	%xmm0, 0x240(%rsp)
    000000d5: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1" # Offset: 213
    000000da: 	leaq	0x1e0(%rsp), %rax
    000000e2: 	movq	%rbx, 0x68(%rsp)
    000000e7: 	movq	%rax, 0x88(%rsp)
    000000ef: 	movq	%rax, 0x80(%rsp)
    000000f7: 	leaq	0x258(%rsp), %rax
    000000ff: 	movq	%rax, 0x58(%rsp)
    00000104: 	movq	%rbx, 0x28(%rsp)
    00000109: 	leaq	_ZZNSt8__detail18__to_chars_10_implImEEvPcjT_E8__digits(%rip), %rbx
.Ltmp4615:
    00000110: 	leaq	(,%r12,4), %rax
    00000118: 	movq	%rax, %rdi
    0000011b: 	movq	%rax, 0x60(%rsp)
    00000120: 	callq	_Znam@PLT # Offset: 288
    00000125: 	movq	%rax, 0x30(%rsp)
    0000012a: 	cmpq	$0x9, %r12
    0000012e: 	jbe	.Ltmp4588 # Offset: 302
    00000134: 	cmpq	$0x63, %r12
    00000138: 	jbe	.Ltmp4589 # Offset: 312
    0000013e: 	cmpq	$0x3e7, %r12
    00000145: 	jbe	.Ltmp4590 # Offset: 325
    0000014b: 	cmpq	$0x270f, %r12
    00000152: 	jbe	.Ltmp4591 # Offset: 338
    00000158: 	movq	%r12, %rdx
    0000015b: 	movl	$0x1, %esi
    00000160: 	jmp	.Ltmp4592 # Offset: 352
    00000162: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4596:
    00000168: 	cmpq	$0xf423f, %rcx
    0000016f: 	jbe	.Ltmp4593 # Offset: 367
    00000175: 	cmpq	$0x98967f, %rcx
    0000017c: 	jbe	.Ltmp4594 # Offset: 380
    00000182: 	cmpq	$0x5f5e0ff, %rcx
    00000189: 	jbe	.Ltmp4595 # Offset: 393
.Ltmp4592:
    0000018f: 	movq	%rdx, %rax
    00000192: 	movq	%rdx, %rcx
    00000195: 	mulq	%rbp
    00000198: 	movl	%esi, %eax
    0000019a: 	addl	$0x4, %esi
    0000019d: 	shrq	$0xb, %rdx
    000001a1: 	cmpq	$0x1869f, %rcx
    000001a8: 	ja	.Ltmp4596 # Offset: 424
.Ltmp4620:
    000001aa: 	leaq	0x190(%rsp), %rax
    000001b2: 	leaq	0x180(%rsp), %rdi
    000001ba: 	xorl	%edx, %edx
    000001bc: 	movq	%rdi, 0x40(%rsp)
    000001c1: 	movq	%rax, 0x10(%rsp)
    000001c6: 	movq	%rax, 0x180(%rsp)
    000001ce: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEmc@PLT # Offset: 462
    000001d3: 	movl	0x188(%rsp), %eax
    000001da: 	movq	0x180(%rsp), %rdi
    000001e2: 	movq	%r12, %rcx
    000001e5: 	leal	-0x1(%rax), %esi
    000001e8: 	cmpq	$0x63, %r12
    000001ec: 	jbe	.Ltmp4597 # Offset: 492
    000001ee: 	nop # Size: 2
.Ltmp4598:
    000001f0: 	movq	%rcx, %rdx
    000001f3: 	shrq	$0x2, %rdx
    000001f7: 	movq	%rdx, %rax
    000001fa: 	mulq	%r13
    000001fd: 	movq	%rdx, %r8
    00000200: 	andq	$-0x4, %rdx
    00000204: 	shrq	$0x2, %r8
    00000208: 	addq	%r8, %rdx
    0000020b: 	leaq	(%rdx,%rdx,4), %rax
    0000020f: 	movq	%rcx, %rdx
    00000212: 	shlq	$0x2, %rax
    00000216: 	subq	%rax, %rdx
    00000219: 	movq	%rcx, %rax
    0000021c: 	movq	%r8, %rcx
    0000021f: 	movl	%esi, %r8d
    00000222: 	movzbl	0x1(%rbx,%rdx,2), %r9d
    00000228: 	movzbl	(%rbx,%rdx,2), %edx
    0000022c: 	movb	%r9b, (%rdi,%r8)
    00000230: 	leal	-0x1(%rsi), %r8d
    00000234: 	subl	$0x2, %esi
    00000237: 	movb	%dl, (%rdi,%r8)
    0000023b: 	cmpq	$0x270f, %rax
    00000241: 	ja	.Ltmp4598 # Offset: 577
.Ltmp4597:
    00000243: 	leal	0x30(%rcx), %eax
    00000246: 	cmpq	$0x9, %rcx
    0000024a: 	jbe	.Ltmp4599 # Offset: 586
    0000024c: 	movzbl	0x1(%rbx,%rcx,2), %eax
    00000251: 	movb	%al, 0x1(%rdi)
    00000254: 	movzbl	(%rbx,%rcx,2), %eax
.Ltmp4599:
    00000258: 	movb	%al, (%rdi)
    0000025a: 	movq	0x120(%rsp), %r15
    00000262: 	leaq	0x170(%rsp), %rax
    0000026a: 	movq	0x128(%rsp), %r14
    00000272: 	movq	%rax, 0x8(%rsp)
    00000277: 	movq	%rax, 0x160(%rsp)
    0000027f: 	movq	%r15, %rax
    00000282: 	addq	%r14, %rax
    00000285: 	je	.Ltmp4600 # Offset: 645
    00000287: 	testq	%r15, %r15
    0000028a: 	je	.Ltmp4601 # Offset: 650
.Ltmp4600:
    00000290: 	movq	%r14, 0xd0(%rsp)
    00000298: 	cmpq	$0xf, %r14
    0000029c: 	ja	.Ltmp4602 # Offset: 668
    000002a2: 	cmpq	$0x1, %r14
    000002a6: 	jne	.Ltmp4603 # Offset: 678
    000002ac: 	movzbl	(%r15), %eax
    000002b0: 	movb	%al, 0x170(%rsp)
    000002b7: 	movq	0x8(%rsp), %rax
.Ltmp4617:
    000002bc: 	movq	%r14, 0x168(%rsp)
    000002c4: 	movb	$0x0, (%rax,%r14)
    000002c9: 	movabsq	$0x3fffffffffffffff, %rax
    000002d3: 	cmpq	%rax, 0x168(%rsp)
    000002db: 	je	.Ltmp4604 # Offset: 731
    000002e1: 	leaq	0x160(%rsp), %r15
    000002e9: 	movl	$0x1, %edx
    000002ee: 	leaq	DATAat0x34149(%rip), %rsi
    000002f5: 	movq	%r15, %rdi
    000002f8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 760
    000002fd: 	movq	0x168(%rsp), %r8
    00000305: 	movq	0x188(%rsp), %rdx
    0000030d: 	movl	$0xf, %eax
    00000312: 	movq	0x160(%rsp), %r9
    0000031a: 	movq	%rax, %rdi
    0000031d: 	cmpq	0x8(%rsp), %r9
    00000322: 	cmovneq	0x170(%rsp), %rdi
    0000032b: 	leaq	(%r8,%rdx), %rcx
    0000032f: 	movq	0x180(%rsp), %rsi
    00000337: 	cmpq	%rdi, %rcx
    0000033a: 	jbe	.Ltmp4605 # Offset: 826
    0000033c: 	cmpq	0x10(%rsp), %rsi
    00000341: 	cmovneq	0x190(%rsp), %rax
    0000034a: 	cmpq	%rax, %rcx
    0000034d: 	jbe	.Ltmp4606 # Offset: 845
.Ltmp4605:
    00000353: 	movq	%r15, %rdi
    00000356: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 854
    0000035b: 	leaq	0x1b0(%rsp), %rdi
    00000363: 	leaq	0x10(%rax), %rdx
    00000367: 	movq	%rdi, 0x1a0(%rsp)
    0000036f: 	movq	(%rax), %rcx
    00000372: 	movq	%rdi, 0x20(%rsp)
    00000377: 	cmpq	%rdx, %rcx
    0000037a: 	je	.Ltmp4607 # Offset: 890
.Ltmp4621:
    00000380: 	movq	%rcx, 0x1a0(%rsp)
    00000388: 	movq	0x10(%rax), %rcx
    0000038c: 	movq	%rcx, 0x1b0(%rsp)
.Ltmp4619:
    00000394: 	movq	0x8(%rax), %rcx
    00000398: 	movq	%rcx, 0x1a8(%rsp)
    000003a0: 	movq	$0x0, 0x8(%rax)
    000003a8: 	movb	$0x0, 0x10(%rax)
    000003ac: 	movq	%rdx, (%rax)
    000003af: 	movabsq	$0x3fffffffffffffff, %rax
    000003b9: 	subq	0x1a8(%rsp), %rax
    000003c1: 	cmpq	$0x7, %rax
    000003c5: 	jbe	.Ltmp4608 # Offset: 965
    000003cb: 	leaq	0x1a0(%rsp), %rax
    000003d3: 	movl	$0x8, %edx
    000003d8: 	leaq	DATAat0x3429c(%rip), %rsi
    000003df: 	movq	%rax, %rdi
    000003e2: 	movq	%rax, 0x48(%rsp)
    000003e7: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 999
    000003ec: 	leaq	0x1d0(%rsp), %rdi
    000003f4: 	leaq	0x10(%rax), %rdx
    000003f8: 	movq	%rdi, 0x1c0(%rsp)
    00000400: 	movq	(%rax), %rcx
    00000403: 	movq	%rdi, 0x18(%rsp)
    00000408: 	cmpq	%rdx, %rcx
    0000040b: 	je	.Ltmp4609 # Offset: 1035
    00000411: 	movq	%rcx, 0x1c0(%rsp)
    00000419: 	movq	0x10(%rax), %rcx
    0000041d: 	movq	%rcx, 0x1d0(%rsp)
.Ltmp4618:
    00000425: 	movq	0x8(%rax), %rcx
    00000429: 	movq	0x60(%rsp), %rsi
    0000042e: 	movq	0x30(%rsp), %rdi
    00000433: 	movq	%rcx, 0x1c8(%rsp)
    0000043b: 	leaq	0x1c0(%rsp), %rcx
    00000443: 	movq	%rdx, (%rax)
    00000446: 	addq	%rdi, %rsi
    00000449: 	movq	%r12, %rdx
    0000044c: 	movq	$0x0, 0x8(%rax)
    00000454: 	movb	$0x0, 0x10(%rax)
    00000458: 	movq	%rcx, 0x50(%rsp)
    0000045d: 	callq	_Z16TestOneContainerIPiEvT_S1_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1117
    00000462: 	movq	0x1c0(%rsp), %rdi
    0000046a: 	cmpq	0x18(%rsp), %rdi
    0000046f: 	je	.Ltmp4610 # Offset: 1135
    00000471: 	movq	0x1d0(%rsp), %rax
    00000479: 	leaq	0x1(%rax), %rsi
    0000047d: 	callq	_ZdlPvm@PLT # Offset: 1149
.Ltmp4610:
    00000482: 	movq	0x1a0(%rsp), %rdi
    0000048a: 	cmpq	0x20(%rsp), %rdi
    0000048f: 	je	.Ltmp4611 # Offset: 1167
    00000491: 	movq	0x1b0(%rsp), %rax
    00000499: 	leaq	0x1(%rax), %rsi
    0000049d: 	callq	_ZdlPvm@PLT # Offset: 1181
.Ltmp4611:
    000004a2: 	movq	0x160(%rsp), %rdi
    000004aa: 	cmpq	0x8(%rsp), %rdi
    000004af: 	je	.Ltmp4612 # Offset: 1199
    000004b1: 	movq	0x170(%rsp), %rax
    000004b9: 	leaq	0x1(%rax), %rsi
    000004bd: 	callq	_ZdlPvm@PLT # Offset: 1213
.Ltmp4612:
    000004c2: 	movq	0x180(%rsp), %rdi
    000004ca: 	cmpq	0x10(%rsp), %rdi
    000004cf: 	je	.Ltmp4613 # Offset: 1231
    000004d1: 	movq	0x190(%rsp), %rax
    000004d9: 	leaq	0x1(%rax), %rsi
    000004dd: 	callq	_ZdlPvm@PLT # Offset: 1245
.Ltmp4613:
    000004e2: 	movq	0x30(%rsp), %rdi
    000004e7: 	movl	$0x4, %esi
    000004ec: 	callq	_ZdlPvm@PLT # Offset: 1260
    000004f1: 	movq	0x58(%rsp), %rdi
    000004f6: 	cmpq	%rdi, 0x28(%rsp)
    000004fb: 	je	.Ltmp4614 # Offset: 1275
    00000501: 	addq	$0x8, 0x28(%rsp)
    00000507: 	movq	0x28(%rsp), %rax
    0000050c: 	movq	-0x8(%rax), %r12
    00000510: 	movabsq	$0x1ffffffffffffffe, %rax
    0000051a: 	cmpq	%rax, %r12
    0000051d: 	jbe	.Ltmp4615 # Offset: 1309
    00000523: 	callq	__cxa_throw_bad_array_new_length@PLT # Offset: 1315
    00000528: 	nopl	(%rax,%rax) # Size: 8
.Ltmp4603:
    00000530: 	testq	%r14, %r14
    00000533: 	jne	.Ltmp4616 # Offset: 1331
    00000539: 	movq	0x8(%rsp), %rax
    0000053e: 	jmp	.Ltmp4617 # Offset: 1342
    00000543: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4602:
    00000548: 	leaq	0xd0(%rsp), %rax
    00000550: 	leaq	0x160(%rsp), %rdi
    00000558: 	xorl	%edx, %edx
    0000055a: 	movq	%rax, %rsi
    0000055d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1373
    00000562: 	movq	%rax, 0x160(%rsp)
    0000056a: 	movq	%rax, %rdi
    0000056d: 	movq	0xd0(%rsp), %rax
    00000575: 	movq	%rax, 0x170(%rsp)
.Ltmp4791:
    0000057d: 	movq	%r14, %rdx
    00000580: 	movq	%r15, %rsi
    00000583: 	callq	memcpy@PLT # Offset: 1411
    00000588: 	movq	0xd0(%rsp), %r14
    00000590: 	movq	0x160(%rsp), %rax
    00000598: 	jmp	.Ltmp4617 # Offset: 1432
    0000059d: 	nopl	(%rax) # Size: 3
.Ltmp4609:
    000005a0: 	movdqu	0x10(%rax), %xmm4
    000005a5: 	movaps	%xmm4, 0x1d0(%rsp)
    000005ad: 	jmp	.Ltmp4618 # Offset: 1453
.Ltmp4607:
    000005b2: 	movdqu	0x10(%rax), %xmm5
    000005b7: 	movaps	%xmm5, 0x1b0(%rsp)
    000005bf: 	jmp	.Ltmp4619 # Offset: 1471
.Ltmp4593:
    000005c4: 	leal	0x5(%rax), %esi
    000005c7: 	jmp	.Ltmp4620 # Offset: 1479
.Ltmp4606:
    000005cc: 	movq	0x40(%rsp), %rdi
    000005d1: 	movq	%r9, %rcx
    000005d4: 	xorl	%edx, %edx
    000005d6: 	xorl	%esi, %esi
    000005d8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@PLT # Offset: 1496
    000005dd: 	leaq	0x1b0(%rsp), %rsi
    000005e5: 	leaq	0x10(%rax), %rdx
    000005e9: 	movq	%rsi, 0x1a0(%rsp)
    000005f1: 	movq	(%rax), %rcx
    000005f4: 	movq	%rsi, 0x20(%rsp)
    000005f9: 	cmpq	%rdx, %rcx
    000005fc: 	jne	.Ltmp4621 # Offset: 1532
    00000602: 	movdqu	0x10(%rax), %xmm6
    00000607: 	movaps	%xmm6, 0x1b0(%rsp)
    0000060f: 	jmp	.Ltmp4619 # Offset: 1551
.Ltmp4594:
    00000614: 	leal	0x6(%rax), %esi
    00000617: 	jmp	.Ltmp4620 # Offset: 1559
.Ltmp4595:
    0000061c: 	leal	0x7(%rax), %esi
    0000061f: 	jmp	.Ltmp4620 # Offset: 1567
.Ltmp4614:
    00000624: 	movq	0x68(%rsp), %rax
    00000629: 	movl	$0x5, %r12d
    0000062f: 	movabsq	$0x346dc5d63886594b, %rbp
    00000639: 	leaq	_ZZNSt8__detail18__to_chars_10_implImEEvPcjT_E8__digits(%rip), %rbx
    00000640: 	movabsq	$0x28f5c28f5c28f5c3, %r13
    0000064a: 	movq	%rax, 0x30(%rsp)
    0000064f: 	nop # Size: 1
.Ltmp4652:
    00000650: 	leaq	(,%r12,4), %r14
    00000658: 	testq	%r12, %r12
    0000065b: 	je	.Ltmp4622 # Offset: 1627
    00000661: 	movq	%r14, %rdi
    00000664: 	callq	_Znwm@PLT # Offset: 1636
    00000669: 	leaq	(%rax,%r14), %rsi
    0000066d: 	leaq	0x4(%rax), %rdi
    00000671: 	movq	%rax, 0x28(%rsp)
    00000676: 	movq	%rsi, 0x70(%rsp)
    0000067b: 	movl	$0x0, (%rax)
    00000681: 	movq	%rdi, 0x60(%rsp)
    00000686: 	cmpq	$0x1, %r12
    0000068a: 	je	.Ltmp4623 # Offset: 1674
    00000690: 	cmpq	%rdi, %rsi
    00000693: 	je	.Ltmp4624 # Offset: 1683
    00000695: 	xorl	%esi, %esi
    00000697: 	leaq	-0x4(%r14), %rdx
    0000069b: 	callq	memset@PLT # Offset: 1691
    000006a0: 	movq	0x70(%rsp), %rsi
    000006a5: 	movq	%rsi, 0x60(%rsp)
.Ltmp4624:
    000006aa: 	cmpq	$0x9, %r12
    000006ae: 	jbe	.Ltmp4623 # Offset: 1710
    000006b4: 	cmpq	$0x63, %r12
    000006b8: 	jbe	.Ltmp4625 # Offset: 1720
    000006be: 	cmpq	$0x3e7, %r12
    000006c5: 	jbe	.Ltmp4626 # Offset: 1733
    000006cb: 	cmpq	$0x270f, %r12
    000006d2: 	jbe	.Ltmp4627 # Offset: 1746
    000006d8: 	movq	%r12, %rdx
    000006db: 	movl	$0x1, %esi
    000006e0: 	jmp	.Ltmp4628 # Offset: 1760
    000006e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4632:
    000006e8: 	cmpq	$0xf423f, %rcx
    000006ef: 	jbe	.Ltmp4629 # Offset: 1775
    000006f5: 	cmpq	$0x98967f, %rcx
    000006fc: 	jbe	.Ltmp4630 # Offset: 1788
    00000702: 	cmpq	$0x5f5e0ff, %rcx
    00000709: 	jbe	.Ltmp4631 # Offset: 1801
.Ltmp4628:
    0000070f: 	movq	%rdx, %rax
    00000712: 	movq	%rdx, %rcx
    00000715: 	mulq	%rbp
    00000718: 	movl	%esi, %eax
    0000071a: 	addl	$0x4, %esi
    0000071d: 	shrq	$0xb, %rdx
    00000721: 	cmpq	$0x1869f, %rcx
    00000728: 	ja	.Ltmp4632 # Offset: 1832
.Ltmp4653:
    0000072a: 	movq	0x10(%rsp), %rax
    0000072f: 	movq	0x40(%rsp), %rdi
    00000734: 	xorl	%edx, %edx
    00000736: 	movq	%rax, 0x180(%rsp)
    0000073e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEmc@PLT # Offset: 1854
    00000743: 	movl	0x188(%rsp), %eax
    0000074a: 	movq	0x180(%rsp), %rdi
    00000752: 	movq	%r12, %rcx
    00000755: 	leal	-0x1(%rax), %esi
    00000758: 	cmpq	$0x63, %r12
    0000075c: 	jbe	.Ltmp4633 # Offset: 1884
    0000075e: 	nop # Size: 2
.Ltmp4634:
    00000760: 	movq	%rcx, %rdx
    00000763: 	shrq	$0x2, %rdx
    00000767: 	movq	%rdx, %rax
    0000076a: 	mulq	%r13
    0000076d: 	movq	%rdx, %r8
    00000770: 	andq	$-0x4, %rdx
    00000774: 	shrq	$0x2, %r8
    00000778: 	addq	%r8, %rdx
    0000077b: 	leaq	(%rdx,%rdx,4), %rax
    0000077f: 	movq	%rcx, %rdx
    00000782: 	shlq	$0x2, %rax
    00000786: 	subq	%rax, %rdx
    00000789: 	movq	%rcx, %rax
    0000078c: 	movq	%r8, %rcx
    0000078f: 	movl	%esi, %r8d
    00000792: 	movzbl	0x1(%rbx,%rdx,2), %r9d
    00000798: 	movzbl	(%rbx,%rdx,2), %edx
    0000079c: 	movb	%r9b, (%rdi,%r8)
    000007a0: 	leal	-0x1(%rsi), %r8d
    000007a4: 	subl	$0x2, %esi
    000007a7: 	movb	%dl, (%rdi,%r8)
    000007ab: 	cmpq	$0x270f, %rax
    000007b1: 	ja	.Ltmp4634 # Offset: 1969
.Ltmp4633:
    000007b3: 	leal	0x30(%rcx), %eax
    000007b6: 	cmpq	$0x9, %rcx
    000007ba: 	jbe	.Ltmp4635 # Offset: 1978
    000007bc: 	movzbl	0x1(%rbx,%rcx,2), %eax
    000007c1: 	movb	%al, 0x1(%rdi)
    000007c4: 	movzbl	(%rbx,%rcx,2), %eax
.Ltmp4635:
    000007c8: 	movb	%al, (%rdi)
    000007ca: 	movq	0x8(%rsp), %rax
    000007cf: 	movq	0x128(%rsp), %r14
    000007d7: 	movq	%rax, 0x160(%rsp)
    000007df: 	movq	0x120(%rsp), %rax
    000007e7: 	movq	%rax, %rdi
    000007ea: 	movq	%rax, 0x78(%rsp)
    000007ef: 	addq	%r14, %rdi
    000007f2: 	je	.Ltmp4636 # Offset: 2034
    000007f4: 	testq	%rax, %rax
    000007f7: 	je	.Ltmp4637 # Offset: 2039
.Ltmp4636:
    000007fd: 	movq	%r14, 0xd0(%rsp)
    00000805: 	cmpq	$0xf, %r14
    00000809: 	ja	.Ltmp4638 # Offset: 2057
    0000080f: 	cmpq	$0x1, %r14
    00000813: 	jne	.Ltmp4639 # Offset: 2067
    00000819: 	movq	0x78(%rsp), %rax
    0000081e: 	movzbl	(%rax), %eax
    00000821: 	movb	%al, 0x170(%rsp)
    00000828: 	movq	0x8(%rsp), %rax
.Ltmp4655:
    0000082d: 	movq	%r14, 0x168(%rsp)
    00000835: 	movb	$0x0, (%rax,%r14)
    0000083a: 	movabsq	$0x3fffffffffffffff, %rax
    00000844: 	cmpq	%rax, 0x168(%rsp)
    0000084c: 	je	.Ltmp4640 # Offset: 2124
    00000852: 	movl	$0x1, %edx
    00000857: 	leaq	DATAat0x34149(%rip), %rsi
    0000085e: 	movq	%r15, %rdi
    00000861: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2145
    00000866: 	movq	0x168(%rsp), %r8
    0000086e: 	movq	0x188(%rsp), %rdx
    00000876: 	movl	$0xf, %eax
    0000087b: 	movq	0x160(%rsp), %r9
    00000883: 	movq	%rax, %rdi
    00000886: 	cmpq	0x8(%rsp), %r9
    0000088b: 	cmovneq	0x170(%rsp), %rdi
    00000894: 	leaq	(%r8,%rdx), %rcx
    00000898: 	movq	0x180(%rsp), %rsi
    000008a0: 	cmpq	%rdi, %rcx
    000008a3: 	jbe	.Ltmp4641 # Offset: 2211
    000008a5: 	cmpq	0x10(%rsp), %rsi
    000008aa: 	cmovneq	0x190(%rsp), %rax
    000008b3: 	cmpq	%rax, %rcx
    000008b6: 	jbe	.Ltmp4642 # Offset: 2230
.Ltmp4641:
    000008bc: 	movq	%r15, %rdi
    000008bf: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2239
    000008c4: 	movq	0x20(%rsp), %rsi
    000008c9: 	leaq	0x10(%rax), %rdx
    000008cd: 	movq	%rsi, 0x1a0(%rsp)
    000008d5: 	movq	(%rax), %rcx
    000008d8: 	cmpq	%rdx, %rcx
    000008db: 	je	.Ltmp4643 # Offset: 2267
.Ltmp4658:
    000008e1: 	movq	%rcx, 0x1a0(%rsp)
    000008e9: 	movq	0x10(%rax), %rcx
    000008ed: 	movq	%rcx, 0x1b0(%rsp)
.Ltmp4657:
    000008f5: 	movq	0x8(%rax), %rcx
    000008f9: 	movq	%rcx, 0x1a8(%rsp)
    00000901: 	movq	$0x0, 0x8(%rax)
    00000909: 	movb	$0x0, 0x10(%rax)
    0000090d: 	movq	%rdx, (%rax)
    00000910: 	movabsq	$0x3fffffffffffffff, %rax
    0000091a: 	subq	0x1a8(%rsp), %rax
    00000922: 	cmpq	$0xb, %rax
    00000926: 	jbe	.Ltmp4644 # Offset: 2342
    0000092c: 	movq	0x48(%rsp), %rdi
    00000931: 	movl	$0xc, %edx
    00000936: 	leaq	DATAat0x342a5(%rip), %rsi
    0000093d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2365
    00000942: 	movq	0x18(%rsp), %rsi
    00000947: 	leaq	0x10(%rax), %rdx
    0000094b: 	movq	%rsi, 0x1c0(%rsp)
    00000953: 	movq	(%rax), %rcx
    00000956: 	cmpq	%rdx, %rcx
    00000959: 	je	.Ltmp4645 # Offset: 2393
    0000095f: 	movq	%rcx, 0x1c0(%rsp)
    00000967: 	movq	0x10(%rax), %rcx
    0000096b: 	movq	%rcx, 0x1d0(%rsp)
.Ltmp4656:
    00000973: 	movq	0x8(%rax), %rcx
    00000977: 	movq	0x60(%rsp), %rsi
    0000097c: 	movq	0x28(%rsp), %rdi
    00000981: 	movq	%rcx, 0x1c8(%rsp)
    00000989: 	movq	0x50(%rsp), %rcx
    0000098e: 	movq	%rdx, (%rax)
    00000991: 	movq	%r12, %rdx
    00000994: 	movq	$0x0, 0x8(%rax)
    0000099c: 	movb	$0x0, 0x10(%rax)
    000009a0: 	callq	_Z16TestOneContainerIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEvT_S7_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2464
    000009a5: 	movq	0x1c0(%rsp), %rdi
    000009ad: 	cmpq	0x18(%rsp), %rdi
    000009b2: 	je	.Ltmp4646 # Offset: 2482
    000009b4: 	movq	0x1d0(%rsp), %rax
    000009bc: 	leaq	0x1(%rax), %rsi
    000009c0: 	callq	_ZdlPvm@PLT # Offset: 2496
.Ltmp4646:
    000009c5: 	movq	0x1a0(%rsp), %rdi
    000009cd: 	cmpq	0x20(%rsp), %rdi
    000009d2: 	je	.Ltmp4647 # Offset: 2514
    000009d4: 	movq	0x1b0(%rsp), %rax
    000009dc: 	leaq	0x1(%rax), %rsi
    000009e0: 	callq	_ZdlPvm@PLT # Offset: 2528
.Ltmp4647:
    000009e5: 	movq	0x160(%rsp), %rdi
    000009ed: 	cmpq	0x8(%rsp), %rdi
    000009f2: 	je	.Ltmp4648 # Offset: 2546
    000009f4: 	movq	0x170(%rsp), %rax
    000009fc: 	leaq	0x1(%rax), %rsi
    00000a00: 	callq	_ZdlPvm@PLT # Offset: 2560
.Ltmp4648:
    00000a05: 	movq	0x180(%rsp), %rdi
    00000a0d: 	cmpq	0x10(%rsp), %rdi
    00000a12: 	je	.Ltmp4649 # Offset: 2578
    00000a14: 	movq	0x190(%rsp), %rax
    00000a1c: 	leaq	0x1(%rax), %rsi
    00000a20: 	callq	_ZdlPvm@PLT # Offset: 2592
.Ltmp4649:
    00000a25: 	movq	0x28(%rsp), %rdi
    00000a2a: 	testq	%rdi, %rdi
    00000a2d: 	je	.Ltmp4650 # Offset: 2605
    00000a2f: 	movq	0x70(%rsp), %rsi
    00000a34: 	subq	%rdi, %rsi
    00000a37: 	callq	_ZdlPvm@PLT # Offset: 2615
.Ltmp4650:
    00000a3c: 	movq	0x58(%rsp), %rdi
    00000a41: 	cmpq	%rdi, 0x30(%rsp)
    00000a46: 	je	.Ltmp4651 # Offset: 2630
    00000a4c: 	movq	0x30(%rsp), %rax
    00000a51: 	movq	(%rax), %r12
    00000a54: 	addq	$0x8, %rax
    00000a58: 	movq	%rax, 0x30(%rsp)
    00000a5d: 	movq	%r12, %rax
    00000a60: 	shrq	$0x3d, %rax
    00000a64: 	je	.Ltmp4652 # Offset: 2660
    00000a6a: 	leaq	DATAat0x342e0(%rip), %rdi
    00000a71: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 2673
    00000a76: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp4622:
    00000a80: 	movq	$0x0, 0x70(%rsp)
    00000a89: 	movq	$0x0, 0x28(%rsp)
    00000a92: 	movq	$0x0, 0x60(%rsp)
.Ltmp4623:
    00000a9b: 	movl	$0x1, %esi
    00000aa0: 	jmp	.Ltmp4653 # Offset: 2720
    00000aa5: 	nopl	(%rax) # Size: 3
.Ltmp4639:
    00000aa8: 	testq	%r14, %r14
    00000aab: 	jne	.Ltmp4654 # Offset: 2731
    00000ab1: 	movq	0x8(%rsp), %rax
    00000ab6: 	jmp	.Ltmp4655 # Offset: 2742
.Ltmp4638:
    00000abb: 	leaq	0xd0(%rsp), %rax
    00000ac3: 	xorl	%edx, %edx
    00000ac5: 	movq	%r15, %rdi
    00000ac8: 	movq	%rax, %rsi
    00000acb: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 2763
    00000ad0: 	movq	%rax, 0x160(%rsp)
    00000ad8: 	movq	%rax, %rdi
    00000adb: 	movq	0xd0(%rsp), %rax
    00000ae3: 	movq	%rax, 0x170(%rsp)
.Ltmp4790:
    00000aeb: 	movq	0x78(%rsp), %rsi
    00000af0: 	movq	%r14, %rdx
    00000af3: 	callq	memcpy@PLT # Offset: 2803
    00000af8: 	movq	0xd0(%rsp), %r14
    00000b00: 	movq	0x160(%rsp), %rax
    00000b08: 	jmp	.Ltmp4655 # Offset: 2824
.Ltmp4645:
    00000b0d: 	movdqu	0x10(%rax), %xmm6
    00000b12: 	movaps	%xmm6, 0x1d0(%rsp)
    00000b1a: 	jmp	.Ltmp4656 # Offset: 2842
.Ltmp4643:
    00000b1f: 	movdqu	0x10(%rax), %xmm6
    00000b24: 	movaps	%xmm6, 0x1b0(%rsp)
    00000b2c: 	jmp	.Ltmp4657 # Offset: 2860
.Ltmp4629:
    00000b31: 	leal	0x5(%rax), %esi
    00000b34: 	jmp	.Ltmp4653 # Offset: 2868
.Ltmp4642:
    00000b39: 	movq	0x40(%rsp), %rdi
    00000b3e: 	movq	%r9, %rcx
    00000b41: 	xorl	%edx, %edx
    00000b43: 	xorl	%esi, %esi
    00000b45: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@PLT # Offset: 2885
    00000b4a: 	movq	0x20(%rsp), %rdi
    00000b4f: 	leaq	0x10(%rax), %rdx
    00000b53: 	movq	%rdi, 0x1a0(%rsp)
    00000b5b: 	movq	(%rax), %rcx
    00000b5e: 	cmpq	%rdx, %rcx
    00000b61: 	jne	.Ltmp4658 # Offset: 2913
    00000b67: 	movdqu	0x10(%rax), %xmm4
    00000b6c: 	movaps	%xmm4, 0x1b0(%rsp)
    00000b74: 	jmp	.Ltmp4657 # Offset: 2932
.Ltmp4630:
    00000b79: 	leal	0x6(%rax), %esi
    00000b7c: 	jmp	.Ltmp4653 # Offset: 2940
.Ltmp4631:
    00000b81: 	leal	0x7(%rax), %esi
    00000b84: 	jmp	.Ltmp4653 # Offset: 2948
.Ltmp4651:
    00000b89: 	leaq	0xd0(%rsp), %rax
    00000b91: 	movl	$0x5, %r13d
    00000b97: 	leaq	_ZZNSt8__detail18__to_chars_10_implImEEvPcjT_E8__digits(%rip), %r12
    00000b9e: 	movq	%rax, 0x60(%rsp)
    00000ba3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4692:
    00000ba8: 	movq	0x60(%rsp), %rdi
    00000bad: 	pxor	%xmm0, %xmm0
    00000bb1: 	movq	%r13, %rsi
    00000bb4: 	movq	$0x0, 0xd0(%rsp)
    00000bc0: 	movq	$0x0, 0xd8(%rsp)
    00000bcc: 	movaps	%xmm0, 0xe0(%rsp)
    00000bd4: 	movaps	%xmm0, 0xf0(%rsp)
    00000bdc: 	movaps	%xmm0, 0x100(%rsp)
    00000be4: 	movaps	%xmm0, 0x110(%rsp)
    00000bec: 	callq	_ZNSt11_Deque_baseIiSaIiEE17_M_initialize_mapEm # Offset: 3052
    00000bf1: 	movq	0xf8(%rsp), %rbx
    00000bf9: 	movq	0x118(%rsp), %rbp
    00000c01: 	xorl	%eax, %eax
    00000c03: 	movq	%rbx, %rsi
    00000c06: 	cmpq	%rbp, %rbx
    00000c09: 	jae	.Ltmp4659 # Offset: 3081
    00000c0b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4660:
    00000c10: 	movq	(%rsi), %rdx
    00000c13: 	addq	$0x8, %rsi
    00000c17: 	leaq	0xc(%rdx), %rdi
    00000c1b: 	movl	$0x0, (%rdx)
    00000c21: 	andq	$-0x8, %rdi
    00000c25: 	movq	$0x0, 0x4(%rdx)
    00000c2d: 	movq	$0x0, 0x1f8(%rdx)
    00000c38: 	subl	%edi, %edx
    00000c3a: 	leal	0x200(%rdx), %ecx
    00000c40: 	shrl	$0x3, %ecx
    00000c43: 	rep		stosq	%rax, %es:(%rdi)
    00000c46: 	cmpq	%rbp, %rsi
    00000c49: 	jb	.Ltmp4660 # Offset: 3145
.Ltmp4659:
    00000c4b: 	movq	0x100(%rsp), %rax
    00000c53: 	movq	0x108(%rsp), %rdi
    00000c5b: 	movq	%rax, 0x28(%rsp)
    00000c60: 	movq	%rdi, 0x30(%rsp)
    00000c65: 	cmpq	%rdi, %rax
    00000c68: 	je	.Ltmp4661 # Offset: 3176
    00000c6a: 	movq	0x28(%rsp), %rsi
    00000c6f: 	movl	$0x0, (%rdi)
    00000c75: 	movq	%rdi, %rax
    00000c78: 	leaq	0x4(%rdi), %rdi
    00000c7c: 	cmpq	%rdi, %rsi
    00000c7f: 	je	.Ltmp4661 # Offset: 3199
    00000c81: 	leaq	-0x4(%rsi), %rdx
    00000c85: 	xorl	%esi, %esi
    00000c87: 	subq	%rax, %rdx
    00000c8a: 	callq	memset@PLT # Offset: 3210
.Ltmp4661:
    00000c8f: 	cmpq	$0x9, %r13
    00000c93: 	jbe	.Ltmp4662 # Offset: 3219
    00000c99: 	cmpq	$0x63, %r13
    00000c9d: 	jbe	.Ltmp4663 # Offset: 3229
    00000ca3: 	cmpq	$0x3e7, %r13
    00000caa: 	jbe	.Ltmp4664 # Offset: 3242
    00000cb0: 	cmpq	$0x270f, %r13
    00000cb7: 	jbe	.Ltmp4665 # Offset: 3255
    00000cbd: 	movq	%r13, %rdx
    00000cc0: 	movl	$0x1, %esi
    00000cc5: 	jmp	.Ltmp4666 # Offset: 3269
    00000cc7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4670:
    00000cd0: 	cmpq	$0xf423f, %rcx
    00000cd7: 	jbe	.Ltmp4667 # Offset: 3287
    00000cdd: 	cmpq	$0x98967f, %rcx
    00000ce4: 	jbe	.Ltmp4668 # Offset: 3300
    00000cea: 	cmpq	$0x5f5e0ff, %rcx
    00000cf1: 	jbe	.Ltmp4669 # Offset: 3313
.Ltmp4666:
    00000cf7: 	movabsq	$0x346dc5d63886594b, %rax
    00000d01: 	movq	%rdx, %rcx
    00000d04: 	mulq	%rdx
    00000d07: 	movl	%esi, %eax
    00000d09: 	addl	$0x4, %esi
    00000d0c: 	shrq	$0xb, %rdx
    00000d10: 	cmpq	$0x1869f, %rcx
    00000d17: 	ja	.Ltmp4670 # Offset: 3351
.Ltmp4697:
    00000d19: 	movq	0x10(%rsp), %rax
    00000d1e: 	movq	0x40(%rsp), %rdi
    00000d23: 	xorl	%edx, %edx
    00000d25: 	movq	%rax, 0x180(%rsp)
    00000d2d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEmc@PLT # Offset: 3373
    00000d32: 	movl	0x188(%rsp), %eax
    00000d39: 	movq	0x180(%rsp), %rdi
    00000d41: 	movq	%r13, %rcx
    00000d44: 	leal	-0x1(%rax), %esi
    00000d47: 	cmpq	$0x63, %r13
    00000d4b: 	jbe	.Ltmp4671 # Offset: 3403
    00000d4d: 	nopl	(%rax) # Size: 3
.Ltmp4672:
    00000d50: 	movabsq	$0x28f5c28f5c28f5c3, %rax
    00000d5a: 	movq	%rcx, %rdx
    00000d5d: 	shrq	$0x2, %rdx
    00000d61: 	mulq	%rdx
    00000d64: 	movq	%rdx, %r8
    00000d67: 	andq	$-0x4, %rdx
    00000d6b: 	shrq	$0x2, %r8
    00000d6f: 	addq	%r8, %rdx
    00000d72: 	leaq	(%rdx,%rdx,4), %rax
    00000d76: 	movq	%rcx, %rdx
    00000d79: 	shlq	$0x2, %rax
    00000d7d: 	subq	%rax, %rdx
    00000d80: 	movq	%rcx, %rax
    00000d83: 	movq	%r8, %rcx
    00000d86: 	movl	%esi, %r8d
    00000d89: 	movzbl	0x1(%r12,%rdx,2), %r9d
    00000d8f: 	movzbl	(%r12,%rdx,2), %edx
    00000d94: 	movb	%r9b, (%rdi,%r8)
    00000d98: 	leal	-0x1(%rsi), %r8d
    00000d9c: 	subl	$0x2, %esi
    00000d9f: 	movb	%dl, (%rdi,%r8)
    00000da3: 	cmpq	$0x270f, %rax
    00000da9: 	ja	.Ltmp4672 # Offset: 3497
.Ltmp4671:
    00000dab: 	leal	0x30(%rcx), %eax
    00000dae: 	cmpq	$0x9, %rcx
    00000db2: 	jbe	.Ltmp4673 # Offset: 3506
    00000db4: 	movzbl	0x1(%r12,%rcx,2), %eax
    00000dba: 	movb	%al, 0x1(%rdi)
    00000dbd: 	movzbl	(%r12,%rcx,2), %eax
.Ltmp4673:
    00000dc2: 	movb	%al, (%rdi)
    00000dc4: 	movq	0x8(%rsp), %rax
    00000dc9: 	movq	0x128(%rsp), %r14
    00000dd1: 	movq	%rax, 0x160(%rsp)
    00000dd9: 	movq	0x120(%rsp), %rax
    00000de1: 	movq	%rax, %rdi
    00000de4: 	movq	%rax, 0x70(%rsp)
    00000de9: 	addq	%r14, %rdi
    00000dec: 	je	.Ltmp4674 # Offset: 3564
    00000dee: 	testq	%rax, %rax
    00000df1: 	je	.Ltmp4675 # Offset: 3569
.Ltmp4674:
    00000df7: 	movq	%r14, 0xb0(%rsp)
    00000dff: 	cmpq	$0xf, %r14
    00000e03: 	ja	.Ltmp4676 # Offset: 3587
    00000e09: 	cmpq	$0x1, %r14
    00000e0d: 	jne	.Ltmp4677 # Offset: 3597
    00000e13: 	movq	0x70(%rsp), %rax
    00000e18: 	movzbl	(%rax), %eax
    00000e1b: 	movb	%al, 0x170(%rsp)
    00000e22: 	movq	0x8(%rsp), %rax
.Ltmp4694:
    00000e27: 	movq	%r14, 0x168(%rsp)
    00000e2f: 	movb	$0x0, (%rax,%r14)
    00000e34: 	movabsq	$0x3fffffffffffffff, %rax
    00000e3e: 	cmpq	%rax, 0x168(%rsp)
    00000e46: 	je	.Ltmp4678 # Offset: 3654
    00000e4c: 	movl	$0x1, %edx
    00000e51: 	leaq	DATAat0x34149(%rip), %rsi
    00000e58: 	movq	%r15, %rdi
    00000e5b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3675
    00000e60: 	movq	0x168(%rsp), %r8
    00000e68: 	movq	0x188(%rsp), %rdx
    00000e70: 	movl	$0xf, %eax
    00000e75: 	movq	0x160(%rsp), %r9
    00000e7d: 	movq	%rax, %rdi
    00000e80: 	cmpq	0x8(%rsp), %r9
    00000e85: 	cmovneq	0x170(%rsp), %rdi
    00000e8e: 	leaq	(%r8,%rdx), %rcx
    00000e92: 	movq	0x180(%rsp), %rsi
    00000e9a: 	cmpq	%rdi, %rcx
    00000e9d: 	jbe	.Ltmp4679 # Offset: 3741
    00000e9f: 	cmpq	0x10(%rsp), %rsi
    00000ea4: 	cmovneq	0x190(%rsp), %rax
    00000ead: 	cmpq	%rax, %rcx
    00000eb0: 	jbe	.Ltmp4680 # Offset: 3760
.Ltmp4679:
    00000eb6: 	movq	%r15, %rdi
    00000eb9: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3769
    00000ebe: 	movq	0x20(%rsp), %rdi
    00000ec3: 	leaq	0x10(%rax), %rdx
    00000ec7: 	movq	%rdi, 0x1a0(%rsp)
    00000ecf: 	movq	(%rax), %rcx
    00000ed2: 	cmpq	%rdx, %rcx
    00000ed5: 	je	.Ltmp4681 # Offset: 3797
.Ltmp4698:
    00000edb: 	movq	%rcx, 0x1a0(%rsp)
    00000ee3: 	movq	0x10(%rax), %rcx
    00000ee7: 	movq	%rcx, 0x1b0(%rsp)
.Ltmp4696:
    00000eef: 	movq	0x8(%rax), %rcx
    00000ef3: 	movq	%rcx, 0x1a8(%rsp)
    00000efb: 	movq	$0x0, 0x8(%rax)
    00000f03: 	movb	$0x0, 0x10(%rax)
    00000f07: 	movq	%rdx, (%rax)
    00000f0a: 	movabsq	$0x3fffffffffffffff, %rax
    00000f14: 	subq	0x1a8(%rsp), %rax
    00000f1c: 	cmpq	$0xa, %rax
    00000f20: 	jbe	.Ltmp4682 # Offset: 3872
    00000f26: 	movq	0x48(%rsp), %rdi
    00000f2b: 	movl	$0xb, %edx
    00000f30: 	leaq	DATAat0x342b2(%rip), %rsi
    00000f37: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3895
    00000f3c: 	movq	0x18(%rsp), %rdi
    00000f41: 	movq	0x28(%rsp), %xmm0
    00000f47: 	leaq	0x10(%rax), %rdx
    00000f4b: 	movq	%rdi, 0x1c0(%rsp)
    00000f53: 	movq	(%rax), %rcx
    00000f56: 	movhps	0x30(%rsp), %xmm0
    00000f5b: 	cmpq	%rdx, %rcx
    00000f5e: 	je	.Ltmp4683 # Offset: 3934
    00000f64: 	movq	%rcx, 0x1c0(%rsp)
    00000f6c: 	movq	0x10(%rax), %rcx
    00000f70: 	movq	%rcx, 0x1d0(%rsp)
.Ltmp4695:
    00000f78: 	movq	0x8(%rax), %rcx
    00000f7c: 	movq	%rbp, %xmm2
    00000f81: 	movq	%rbx, %xmm3
    00000f86: 	leaq	0xb0(%rsp), %r14
    00000f8e: 	leaq	0x90(%rsp), %rdi
    00000f96: 	movq	%r14, %rsi
    00000f99: 	movq	%rcx, 0x1c8(%rsp)
    00000fa1: 	movq	0x50(%rsp), %rcx
    00000fa6: 	movb	$0x0, 0x10(%rax)
    00000faa: 	movq	0x110(%rsp), %xmm1
    00000fb3: 	movq	%rdx, (%rax)
    00000fb6: 	movq	%r13, %rdx
    00000fb9: 	punpcklqdq	%xmm2, %xmm1
    00000fbd: 	movq	$0x0, 0x8(%rax)
    00000fc5: 	movaps	%xmm0, 0xb0(%rsp)
    00000fcd: 	movq	0xf0(%rsp), %xmm0
    00000fd6: 	movaps	%xmm1, 0xc0(%rsp)
    00000fde: 	movq	0xe0(%rsp), %xmm1
    00000fe7: 	punpcklqdq	%xmm3, %xmm0
    00000feb: 	movhps	0xe8(%rsp), %xmm1
    00000ff3: 	movaps	%xmm0, 0xa0(%rsp)
    00000ffb: 	movaps	%xmm1, 0x90(%rsp)
    00001003: 	callq	_Z16TestOneContainerISt15_Deque_iteratorIiRiPiEEvT_S4_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4099
    00001008: 	movq	0x1c0(%rsp), %rdi
    00001010: 	cmpq	0x18(%rsp), %rdi
    00001015: 	je	.Ltmp4684 # Offset: 4117
    00001017: 	movq	0x1d0(%rsp), %rax
    0000101f: 	leaq	0x1(%rax), %rsi
    00001023: 	callq	_ZdlPvm@PLT # Offset: 4131
.Ltmp4684:
    00001028: 	movq	0x1a0(%rsp), %rdi
    00001030: 	cmpq	0x20(%rsp), %rdi
    00001035: 	je	.Ltmp4685 # Offset: 4149
    00001037: 	movq	0x1b0(%rsp), %rax
    0000103f: 	leaq	0x1(%rax), %rsi
    00001043: 	callq	_ZdlPvm@PLT # Offset: 4163
.Ltmp4685:
    00001048: 	movq	0x160(%rsp), %rdi
    00001050: 	cmpq	0x8(%rsp), %rdi
    00001055: 	je	.Ltmp4686 # Offset: 4181
    00001057: 	movq	0x170(%rsp), %rax
    0000105f: 	leaq	0x1(%rax), %rsi
    00001063: 	callq	_ZdlPvm@PLT # Offset: 4195
.Ltmp4686:
    00001068: 	movq	0x180(%rsp), %rdi
    00001070: 	cmpq	0x10(%rsp), %rdi
    00001075: 	je	.Ltmp4687 # Offset: 4213
    00001077: 	movq	0x190(%rsp), %rax
    0000107f: 	leaq	0x1(%rax), %rsi
    00001083: 	callq	_ZdlPvm@PLT # Offset: 4227
.Ltmp4687:
    00001088: 	movq	0xd0(%rsp), %r13
    00001090: 	testq	%r13, %r13
    00001093: 	je	.Ltmp4688 # Offset: 4243
    00001095: 	addq	$0x8, %rbp
    00001099: 	cmpq	%rbp, %rbx
    0000109c: 	jae	.Ltmp4689 # Offset: 4252
    0000109e: 	nop # Size: 2
.Ltmp4690:
    000010a0: 	movq	(%rbx), %rdi
    000010a3: 	movl	$0x200, %esi
    000010a8: 	addq	$0x8, %rbx
    000010ac: 	callq	_ZdlPvm@PLT # Offset: 4268
    000010b1: 	cmpq	%rbx, %rbp
    000010b4: 	ja	.Ltmp4690 # Offset: 4276
.Ltmp4689:
    000010b6: 	movq	0xd8(%rsp), %rax
    000010be: 	movq	%r13, %rdi
    000010c1: 	leaq	(,%rax,8), %rsi
    000010c9: 	callq	_ZdlPvm@PLT # Offset: 4297
.Ltmp4688:
    000010ce: 	movq	0x58(%rsp), %rbx
    000010d3: 	cmpq	%rbx, 0x68(%rsp)
    000010d8: 	je	.Ltmp4691 # Offset: 4312
    000010de: 	movq	0x68(%rsp), %rax
    000010e3: 	movq	(%rax), %r13
    000010e6: 	addq	$0x8, %rax
    000010ea: 	movq	%rax, 0x68(%rsp)
    000010ef: 	movq	%r13, %rax
    000010f2: 	shrq	$0x3d, %rax
    000010f6: 	je	.Ltmp4692 # Offset: 4342
    000010fc: 	leaq	DATAat0x34038(%rip), %rdi
    00001103: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4355
    00001108: 	nopl	(%rax,%rax) # Size: 8
.Ltmp4677:
    00001110: 	testq	%r14, %r14
    00001113: 	jne	.Ltmp4693 # Offset: 4371
    00001119: 	movq	0x8(%rsp), %rax
    0000111e: 	jmp	.Ltmp4694 # Offset: 4382
.Ltmp4676:
    00001123: 	leaq	0xb0(%rsp), %rsi
    0000112b: 	xorl	%edx, %edx
    0000112d: 	movq	%r15, %rdi
    00001130: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4400
    00001135: 	movq	%rax, 0x160(%rsp)
    0000113d: 	movq	%rax, %rdi
    00001140: 	movq	0xb0(%rsp), %rax
    00001148: 	movq	%rax, 0x170(%rsp)
.Ltmp4792:
    00001150: 	movq	0x70(%rsp), %rsi
    00001155: 	movq	%r14, %rdx
    00001158: 	callq	memcpy@PLT # Offset: 4440
    0000115d: 	movq	0xb0(%rsp), %r14
    00001165: 	movq	0x160(%rsp), %rax
    0000116d: 	jmp	.Ltmp4694 # Offset: 4461
.Ltmp4683:
    00001172: 	movdqu	0x10(%rax), %xmm7
    00001177: 	movaps	%xmm7, 0x1d0(%rsp)
    0000117f: 	jmp	.Ltmp4695 # Offset: 4479
.Ltmp4681:
    00001184: 	movdqu	0x10(%rax), %xmm7
    00001189: 	movaps	%xmm7, 0x1b0(%rsp)
    00001191: 	jmp	.Ltmp4696 # Offset: 4497
.Ltmp4667:
    00001196: 	leal	0x5(%rax), %esi
    00001199: 	jmp	.Ltmp4697 # Offset: 4505
.Ltmp4668:
    0000119e: 	leal	0x6(%rax), %esi
    000011a1: 	jmp	.Ltmp4697 # Offset: 4513
.Ltmp4680:
    000011a6: 	movq	0x40(%rsp), %rdi
    000011ab: 	movq	%r9, %rcx
    000011ae: 	xorl	%edx, %edx
    000011b0: 	xorl	%esi, %esi
    000011b2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@PLT # Offset: 4530
    000011b7: 	movq	0x20(%rsp), %rdi
    000011bc: 	leaq	0x10(%rax), %rdx
    000011c0: 	movq	%rdi, 0x1a0(%rsp)
    000011c8: 	movq	(%rax), %rcx
    000011cb: 	cmpq	%rdx, %rcx
    000011ce: 	jne	.Ltmp4698 # Offset: 4558
    000011d4: 	movdqu	0x10(%rax), %xmm5
    000011d9: 	movaps	%xmm5, 0x1b0(%rsp)
    000011e1: 	jmp	.Ltmp4696 # Offset: 4577
.Ltmp4669:
    000011e6: 	leal	0x7(%rax), %esi
    000011e9: 	jmp	.Ltmp4697 # Offset: 4585
.Ltmp4691:
    000011ee: 	movq	0x88(%rsp), %rax
    000011f6: 	movq	0x60(%rsp), %xmm5
    000011fc: 	leaq	_ZZNSt8__detail18__to_chars_10_implImEEvPcjT_E8__digits(%rip), %rbp
    00001203: 	movq	%rax, 0x28(%rsp)
    00001208: 	punpcklqdq	%xmm5, %xmm5
    0000120c: 	movaps	%xmm5, 0x30(%rsp)
.Ltmp4730:
    00001211: 	movq	0x28(%rsp), %rax
    00001216: 	movdqa	0x30(%rsp), %xmm7
    0000121c: 	movq	$0x0, 0xe0(%rsp)
    00001228: 	movq	(%rax), %r12
    0000122b: 	movaps	%xmm7, 0xd0(%rsp)
    00001233: 	movq	%r12, %rbx
    00001236: 	testq	%r12, %r12
    00001239: 	je	.Ltmp4699 # Offset: 4665
    0000123f: 	nop # Size: 1
.Ltmp4700:
    00001240: 	movl	$0x18, %edi
    00001245: 	callq	_Znwm@PLT # Offset: 4677
    0000124a: 	movl	$0x0, 0x10(%rax)
    00001251: 	movq	0x60(%rsp), %rsi
    00001256: 	movq	%rax, %rdi
    00001259: 	callq	_ZNSt8__detail15_List_node_base7_M_hookEPS0_@PLT # Offset: 4697
    0000125e: 	addq	$0x1, 0xe0(%rsp)
    00001267: 	subq	$0x1, %rbx
    0000126b: 	jne	.Ltmp4700 # Offset: 4715
    0000126d: 	cmpq	$0x9, %r12
    00001271: 	jbe	.Ltmp4699 # Offset: 4721
    00001277: 	cmpq	$0x63, %r12
    0000127b: 	jbe	.Ltmp4701 # Offset: 4731
    00001281: 	cmpq	$0x3e7, %r12
    00001288: 	jbe	.Ltmp4702 # Offset: 4744
    0000128e: 	cmpq	$0x270f, %r12
    00001295: 	jbe	.Ltmp4703 # Offset: 4757
    0000129b: 	movq	%r12, %rdx
    0000129e: 	movl	$0x1, %esi
    000012a3: 	jmp	.Ltmp4704 # Offset: 4771
    000012a5: 	nopl	(%rax) # Size: 3
.Ltmp4708:
    000012a8: 	cmpq	$0xf423f, %rcx
    000012af: 	jbe	.Ltmp4705 # Offset: 4783
    000012b5: 	cmpq	$0x98967f, %rcx
    000012bc: 	jbe	.Ltmp4706 # Offset: 4796
    000012c2: 	cmpq	$0x5f5e0ff, %rcx
    000012c9: 	jbe	.Ltmp4707 # Offset: 4809
.Ltmp4704:
    000012cf: 	movabsq	$0x346dc5d63886594b, %rax
    000012d9: 	movq	%rdx, %rcx
    000012dc: 	mulq	%rdx
    000012df: 	movl	%esi, %eax
    000012e1: 	addl	$0x4, %esi
    000012e4: 	shrq	$0xb, %rdx
    000012e8: 	cmpq	$0x1869f, %rcx
    000012ef: 	ja	.Ltmp4708 # Offset: 4847
.Ltmp4749:
    000012f1: 	movq	0x10(%rsp), %rax
    000012f6: 	movq	0x40(%rsp), %rdi
    000012fb: 	xorl	%edx, %edx
    000012fd: 	movq	%rax, 0x180(%rsp)
    00001305: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEmc@PLT # Offset: 4869
    0000130a: 	movl	0x188(%rsp), %eax
    00001311: 	movq	0x180(%rsp), %rdi
    00001319: 	movq	%r12, %rcx
    0000131c: 	leal	-0x1(%rax), %esi
    0000131f: 	cmpq	$0x63, %r12
    00001323: 	jbe	.Ltmp4709 # Offset: 4899
    00001325: 	nopl	(%rax) # Size: 3
.Ltmp4710:
    00001328: 	movabsq	$0x28f5c28f5c28f5c3, %rax
    00001332: 	movq	%rcx, %rdx
    00001335: 	shrq	$0x2, %rdx
    00001339: 	mulq	%rdx
    0000133c: 	movq	%rdx, %r8
    0000133f: 	andq	$-0x4, %rdx
    00001343: 	shrq	$0x2, %r8
    00001347: 	leaq	(%rdx,%r8), %rax
    0000134b: 	movq	%rcx, %rdx
    0000134e: 	leaq	(%rax,%rax,4), %rax
    00001352: 	shlq	$0x2, %rax
    00001356: 	subq	%rax, %rdx
    00001359: 	movq	%rcx, %rax
    0000135c: 	movq	%r8, %rcx
    0000135f: 	movl	%esi, %r8d
    00001362: 	movzbl	0x1(%rbp,%rdx,2), %r9d
    00001368: 	movzbl	(%rbp,%rdx,2), %edx
    0000136d: 	movb	%r9b, (%rdi,%r8)
    00001371: 	leal	-0x1(%rsi), %r8d
    00001375: 	subl	$0x2, %esi
    00001378: 	movb	%dl, (%rdi,%r8)
    0000137c: 	cmpq	$0x270f, %rax
    00001382: 	ja	.Ltmp4710 # Offset: 4994
.Ltmp4709:
    00001384: 	leal	0x30(%rcx), %eax
    00001387: 	cmpq	$0x9, %rcx
    0000138b: 	jbe	.Ltmp4711 # Offset: 5003
    0000138d: 	movzbl	0x1(%rbp,%rcx,2), %eax
    00001392: 	movb	%al, 0x1(%rdi)
    00001395: 	movzbl	(%rbp,%rcx,2), %eax
.Ltmp4711:
    0000139a: 	movb	%al, (%rdi)
    0000139c: 	movq	0x8(%rsp), %rax
    000013a1: 	movq	0x120(%rsp), %rbx
    000013a9: 	movq	0x128(%rsp), %r13
    000013b1: 	movq	%rax, 0x160(%rsp)
    000013b9: 	movq	%rbx, %rax
    000013bc: 	addq	%r13, %rax
    000013bf: 	je	.Ltmp4712 # Offset: 5055
    000013c1: 	testq	%rbx, %rbx
    000013c4: 	je	.Ltmp4713 # Offset: 5060
.Ltmp4712:
    000013ca: 	movq	%r13, 0xb0(%rsp)
    000013d2: 	cmpq	$0xf, %r13
    000013d6: 	ja	.Ltmp4714 # Offset: 5078
    000013dc: 	cmpq	$0x1, %r13
    000013e0: 	jne	.Ltmp4715 # Offset: 5088
    000013e2: 	movzbl	(%rbx), %eax
    000013e5: 	movb	%al, 0x170(%rsp)
    000013ec: 	movq	0x8(%rsp), %rax
    000013f1: 	jmp	.Ltmp4716 # Offset: 5105
.Ltmp4589:
    000013f3: 	movl	$0x2, %esi
    000013f8: 	jmp	.Ltmp4620 # Offset: 5112
.Ltmp4588:
    000013fd: 	movl	$0x1, %esi
    00001402: 	jmp	.Ltmp4620 # Offset: 5122
.Ltmp4590:
    00001407: 	movl	$0x3, %esi
    0000140c: 	jmp	.Ltmp4620 # Offset: 5132
.Ltmp4591:
    00001411: 	movl	$0x4, %esi
    00001416: 	jmp	.Ltmp4620 # Offset: 5142
.Ltmp4664:
    0000141b: 	movl	$0x3, %esi
    00001420: 	jmp	.Ltmp4697 # Offset: 5152
.Ltmp4663:
    00001425: 	movl	$0x2, %esi
    0000142a: 	jmp	.Ltmp4697 # Offset: 5162
.Ltmp4662:
    0000142f: 	movl	$0x1, %esi
    00001434: 	jmp	.Ltmp4697 # Offset: 5172
.Ltmp4625:
    00001439: 	movl	$0x2, %esi
    0000143e: 	jmp	.Ltmp4653 # Offset: 5182
.Ltmp4715:
    00001443: 	testq	%r13, %r13
    00001446: 	jne	.Ltmp4717 # Offset: 5190
    0000144c: 	movq	0x8(%rsp), %rax
.Ltmp4716:
    00001451: 	movq	%r13, 0x168(%rsp)
    00001459: 	movb	$0x0, (%rax,%r13)
    0000145e: 	movabsq	$0x3fffffffffffffff, %rax
    00001468: 	cmpq	%rax, 0x168(%rsp)
    00001470: 	je	.Ltmp4718 # Offset: 5232
    00001476: 	movl	$0x1, %edx
    0000147b: 	leaq	DATAat0x34149(%rip), %rsi
    00001482: 	movq	%r15, %rdi
    00001485: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5253
    0000148a: 	movq	0x168(%rsp), %r8
    00001492: 	movq	0x188(%rsp), %rdx
    0000149a: 	movl	$0xf, %eax
    0000149f: 	movq	0x160(%rsp), %rcx
    000014a7: 	movq	%rax, %r9
    000014aa: 	cmpq	0x8(%rsp), %rcx
    000014af: 	cmovneq	0x170(%rsp), %r9
    000014b8: 	leaq	(%r8,%rdx), %rdi
    000014bc: 	movq	0x180(%rsp), %rsi
    000014c4: 	cmpq	%r9, %rdi
    000014c7: 	jbe	.Ltmp4719 # Offset: 5319
    000014c9: 	cmpq	0x10(%rsp), %rsi
    000014ce: 	cmovneq	0x190(%rsp), %rax
    000014d7: 	cmpq	%rax, %rdi
    000014da: 	jbe	.Ltmp4720 # Offset: 5338
.Ltmp4719:
    000014e0: 	movq	%r15, %rdi
    000014e3: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5347
    000014e8: 	movq	0x20(%rsp), %rbx
    000014ed: 	leaq	0x10(%rax), %rdx
    000014f1: 	movq	%rbx, 0x1a0(%rsp)
    000014f9: 	movq	(%rax), %rcx
    000014fc: 	cmpq	%rdx, %rcx
    000014ff: 	je	.Ltmp4721 # Offset: 5375
.Ltmp4748:
    00001505: 	movq	%rcx, 0x1a0(%rsp)
    0000150d: 	movq	0x10(%rax), %rcx
    00001511: 	movq	%rcx, 0x1b0(%rsp)
.Ltmp4747:
    00001519: 	movq	0x8(%rax), %rcx
    0000151d: 	movq	%rcx, 0x1a8(%rsp)
    00001525: 	movq	$0x0, 0x8(%rax)
    0000152d: 	movb	$0x0, 0x10(%rax)
    00001531: 	movq	%rdx, (%rax)
    00001534: 	movabsq	$0x3fffffffffffffff, %rax
    0000153e: 	subq	0x1a8(%rsp), %rax
    00001546: 	cmpq	$0x9, %rax
    0000154a: 	jbe	.Ltmp4722 # Offset: 5450
    00001550: 	movq	0x48(%rsp), %rdi
    00001555: 	movl	$0xa, %edx
    0000155a: 	leaq	DATAat0x342be(%rip), %rsi
    00001561: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5473
    00001566: 	movq	0x18(%rsp), %rbx
    0000156b: 	leaq	0x10(%rax), %rdx
    0000156f: 	movq	%rbx, 0x1c0(%rsp)
    00001577: 	movq	(%rax), %rcx
    0000157a: 	cmpq	%rdx, %rcx
    0000157d: 	je	.Ltmp4723 # Offset: 5501
    00001583: 	movq	%rcx, 0x1c0(%rsp)
    0000158b: 	movq	0x10(%rax), %rcx
    0000158f: 	movq	%rcx, 0x1d0(%rsp)
.Ltmp4746:
    00001597: 	movq	0x8(%rax), %rcx
    0000159b: 	movq	0x60(%rsp), %rsi
    000015a0: 	movq	%rcx, 0x1c8(%rsp)
    000015a8: 	movq	0x50(%rsp), %rcx
    000015ad: 	movq	%rdx, (%rax)
    000015b0: 	movq	%r12, %rdx
    000015b3: 	movb	$0x0, 0x10(%rax)
    000015b7: 	movq	0xd0(%rsp), %rdi
    000015bf: 	movq	$0x0, 0x8(%rax)
    000015c7: 	callq	_Z16TestOneContainerISt14_List_iteratorIiEEvT_S2_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5575
    000015cc: 	movq	0x1c0(%rsp), %rdi
    000015d4: 	cmpq	0x18(%rsp), %rdi
    000015d9: 	je	.Ltmp4724 # Offset: 5593
    000015db: 	movq	0x1d0(%rsp), %rax
    000015e3: 	leaq	0x1(%rax), %rsi
    000015e7: 	callq	_ZdlPvm@PLT # Offset: 5607
.Ltmp4724:
    000015ec: 	movq	0x1a0(%rsp), %rdi
    000015f4: 	cmpq	0x20(%rsp), %rdi
    000015f9: 	je	.Ltmp4725 # Offset: 5625
    000015fb: 	movq	0x1b0(%rsp), %rax
    00001603: 	leaq	0x1(%rax), %rsi
    00001607: 	callq	_ZdlPvm@PLT # Offset: 5639
.Ltmp4725:
    0000160c: 	movq	0x160(%rsp), %rdi
    00001614: 	cmpq	0x8(%rsp), %rdi
    00001619: 	je	.Ltmp4726 # Offset: 5657
    0000161b: 	movq	0x170(%rsp), %rax
    00001623: 	leaq	0x1(%rax), %rsi
    00001627: 	callq	_ZdlPvm@PLT # Offset: 5671
.Ltmp4726:
    0000162c: 	movq	0x180(%rsp), %rdi
    00001634: 	cmpq	0x10(%rsp), %rdi
    00001639: 	je	.Ltmp4727 # Offset: 5689
    0000163b: 	movq	0x190(%rsp), %rax
    00001643: 	leaq	0x1(%rax), %rsi
    00001647: 	callq	_ZdlPvm@PLT # Offset: 5703
.Ltmp4727:
    0000164c: 	movq	0xd0(%rsp), %rbx
    00001654: 	movq	0x60(%rsp), %r12
    00001659: 	cmpq	0x60(%rsp), %rbx
    0000165e: 	je	.Ltmp4728 # Offset: 5726
.Ltmp4729:
    00001660: 	movq	%rbx, %rdi
    00001663: 	movq	(%rbx), %rbx
    00001666: 	movl	$0x18, %esi
    0000166b: 	callq	_ZdlPvm@PLT # Offset: 5739
    00001670: 	cmpq	%r12, %rbx
    00001673: 	jne	.Ltmp4729 # Offset: 5747
.Ltmp4728:
    00001675: 	addq	$0x8, 0x28(%rsp)
    0000167b: 	movq	0x28(%rsp), %rax
    00001680: 	cmpq	0x58(%rsp), %rax
    00001685: 	jne	.Ltmp4730 # Offset: 5765
    0000168b: 	leaq	_ZZNSt8__detail18__to_chars_10_implImEEvPcjT_E8__digits(%rip), %rbx
.Ltmp4779:
    00001692: 	movq	0x80(%rsp), %rax
    0000169a: 	movq	$0x0, 0xb0(%rsp)
    000016a6: 	movq	(%rax), %r12
    000016a9: 	testq	%r12, %r12
    000016ac: 	je	.Ltmp4731 # Offset: 5804
    000016b2: 	movq	%r12, %rbp
    000016b5: 	movq	%r14, %rax
.Ltmp4732:
    000016b8: 	movl	$0x10, %edi
    000016bd: 	movq	%rax, %r13
    000016c0: 	callq	_Znwm@PLT # Offset: 5824
    000016c5: 	movq	$0x0, (%rax)
    000016cc: 	movl	$0x0, 0x8(%rax)
    000016d3: 	movq	%rax, (%r13)
    000016d7: 	subq	$0x1, %rbp
    000016db: 	jne	.Ltmp4732 # Offset: 5851
    000016dd: 	movq	0xb0(%rsp), %rbp
    000016e5: 	cmpq	$0x9, %r12
    000016e9: 	jbe	.Ltmp4733 # Offset: 5865
    000016ef: 	cmpq	$0x63, %r12
    000016f3: 	jbe	.Ltmp4734 # Offset: 5875
    000016f9: 	cmpq	$0x3e7, %r12
    00001700: 	jbe	.Ltmp4735 # Offset: 5888
    00001706: 	cmpq	$0x270f, %r12
    0000170d: 	jbe	.Ltmp4736 # Offset: 5901
    00001713: 	movq	%r12, %rax
    00001716: 	movl	$0x1, %esi
    0000171b: 	jmp	.Ltmp4737 # Offset: 5915
.Ltmp4741:
    0000171d: 	cmpq	$0xf423f, %rcx
    00001724: 	jbe	.Ltmp4738 # Offset: 5924
    0000172a: 	cmpq	$0x98967f, %rcx
    00001731: 	jbe	.Ltmp4739 # Offset: 5937
    00001737: 	cmpq	$0x5f5e0ff, %rcx
    0000173e: 	jbe	.Ltmp4740 # Offset: 5950
.Ltmp4737:
    00001744: 	movq	%rax, %rcx
    00001747: 	movabsq	$0x346dc5d63886594b, %rax
    00001751: 	mulq	%rcx
    00001754: 	movq	%rdx, %rax
    00001757: 	movl	%esi, %edx
    00001759: 	addl	$0x4, %esi
    0000175c: 	shrq	$0xb, %rax
    00001760: 	cmpq	$0x1869f, %rcx
    00001767: 	ja	.Ltmp4741 # Offset: 5991
.Ltmp4788:
    00001769: 	movq	0x8(%rsp), %rax
    0000176e: 	xorl	%edx, %edx
    00001770: 	movq	%r15, %rdi
    00001773: 	movq	%rax, 0x160(%rsp)
    0000177b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEmc@PLT # Offset: 6011
    00001780: 	movl	0x168(%rsp), %eax
    00001787: 	movq	0x160(%rsp), %rdi
    0000178f: 	movq	%r12, %rcx
    00001792: 	leal	-0x1(%rax), %esi
    00001795: 	cmpq	$0x63, %r12
    00001799: 	jbe	.Ltmp4742 # Offset: 6041
.Ltmp4743:
    0000179b: 	movabsq	$0x28f5c28f5c28f5c3, %rax
    000017a5: 	movq	%rcx, %rdx
    000017a8: 	shrq	$0x2, %rdx
    000017ac: 	mulq	%rdx
    000017af: 	movq	%rdx, %r8
    000017b2: 	movq	%rdx, %rax
    000017b5: 	movq	%rcx, %rdx
    000017b8: 	shrq	$0x2, %r8
    000017bc: 	andq	$-0x4, %rax
    000017c0: 	addq	%r8, %rax
    000017c3: 	leaq	(%rax,%rax,4), %rax
    000017c7: 	shlq	$0x2, %rax
    000017cb: 	subq	%rax, %rdx
    000017ce: 	movq	%rcx, %rax
    000017d1: 	movq	%r8, %rcx
    000017d4: 	movl	%esi, %r8d
    000017d7: 	movzbl	0x1(%rbx,%rdx,2), %r9d
    000017dd: 	movzbl	(%rbx,%rdx,2), %edx
    000017e1: 	movb	%r9b, (%rdi,%r8)
    000017e5: 	leal	-0x1(%rsi), %r8d
    000017e9: 	subl	$0x2, %esi
    000017ec: 	movb	%dl, (%rdi,%r8)
    000017f0: 	cmpq	$0x270f, %rax
    000017f6: 	ja	.Ltmp4743 # Offset: 6134
.Ltmp4742:
    000017f8: 	leal	0x30(%rcx), %eax
    000017fb: 	cmpq	$0x9, %rcx
    000017ff: 	jbe	.Ltmp4744 # Offset: 6143
    00001801: 	movzbl	0x1(%rbx,%rcx,2), %eax
    00001806: 	movb	%al, 0x1(%rdi)
    00001809: 	movzbl	(%rbx,%rcx,2), %eax
.Ltmp4744:
    0000180d: 	movb	%al, (%rdi)
    0000180f: 	leaq	0x150(%rsp), %rax
    00001817: 	movq	0x128(%rsp), %r13
    0000181f: 	movq	%rax, 0x28(%rsp)
    00001824: 	movq	%rax, 0x140(%rsp)
    0000182c: 	movq	0x120(%rsp), %rax
    00001834: 	movq	%rax, 0x30(%rsp)
    00001839: 	movq	%rax, %rdi
    0000183c: 	addq	%r13, %rax
    0000183f: 	je	.Ltmp4745 # Offset: 6207
    00001845: 	testq	%rdi, %rdi
    00001848: 	jne	.Ltmp4745 # Offset: 6216
    0000184e: 	leaq	DATAat0x34008(%rip), %rdi
    00001855: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6229
    0000185a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4714:
    00001860: 	xorl	%edx, %edx
    00001862: 	movq	%r14, %rsi
    00001865: 	movq	%r15, %rdi
    00001868: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6248
    0000186d: 	movq	%rax, 0x160(%rsp)
    00001875: 	movq	%rax, %rdi
    00001878: 	movq	0xb0(%rsp), %rax
    00001880: 	movq	%rax, 0x170(%rsp)
.Ltmp4789:
    00001888: 	movq	%r13, %rdx
    0000188b: 	movq	%rbx, %rsi
    0000188e: 	callq	memcpy@PLT # Offset: 6286
    00001893: 	movq	0xb0(%rsp), %r13
    0000189b: 	movq	0x160(%rsp), %rax
    000018a3: 	jmp	.Ltmp4716 # Offset: 6307
.Ltmp4627:
    000018a8: 	movl	$0x4, %esi
    000018ad: 	jmp	.Ltmp4653 # Offset: 6317
.Ltmp4665:
    000018b2: 	movl	$0x4, %esi
    000018b7: 	jmp	.Ltmp4697 # Offset: 6327
.Ltmp4626:
    000018bc: 	movl	$0x3, %esi
    000018c1: 	jmp	.Ltmp4653 # Offset: 6337
.Ltmp4723:
    000018c6: 	movdqu	0x10(%rax), %xmm7
    000018cb: 	movaps	%xmm7, 0x1d0(%rsp)
    000018d3: 	jmp	.Ltmp4746 # Offset: 6355
.Ltmp4721:
    000018d8: 	movdqu	0x10(%rax), %xmm6
    000018dd: 	movaps	%xmm6, 0x1b0(%rsp)
    000018e5: 	jmp	.Ltmp4747 # Offset: 6373
.Ltmp4720:
    000018ea: 	movq	0x40(%rsp), %rdi
    000018ef: 	xorl	%edx, %edx
    000018f1: 	xorl	%esi, %esi
    000018f3: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@PLT # Offset: 6387
    000018f8: 	movq	0x20(%rsp), %rbx
    000018fd: 	leaq	0x10(%rax), %rdx
    00001901: 	movq	%rbx, 0x1a0(%rsp)
    00001909: 	movq	(%rax), %rcx
    0000190c: 	cmpq	%rdx, %rcx
    0000190f: 	jne	.Ltmp4748 # Offset: 6415
    00001915: 	movdqu	0x10(%rax), %xmm4
    0000191a: 	movaps	%xmm4, 0x1b0(%rsp)
    00001922: 	jmp	.Ltmp4747 # Offset: 6434
.Ltmp4706:
    00001927: 	leal	0x6(%rax), %esi
    0000192a: 	jmp	.Ltmp4749 # Offset: 6442
.Ltmp4707:
    0000192f: 	leal	0x7(%rax), %esi
    00001932: 	jmp	.Ltmp4749 # Offset: 6450
.Ltmp4705:
    00001937: 	leal	0x5(%rax), %esi
    0000193a: 	jmp	.Ltmp4749 # Offset: 6458
.Ltmp4699:
    0000193f: 	movl	$0x1, %esi
    00001944: 	jmp	.Ltmp4749 # Offset: 6468
.Ltmp4745:
    00001949: 	movq	%r13, 0xd0(%rsp)
    00001951: 	cmpq	$0xf, %r13
    00001955: 	ja	.Ltmp4750 # Offset: 6485
    0000195b: 	cmpq	$0x1, %r13
    0000195f: 	jne	.Ltmp4751 # Offset: 6495
    00001965: 	movq	0x30(%rsp), %rax
    0000196a: 	movzbl	(%rax), %eax
    0000196d: 	movb	%al, 0x150(%rsp)
    00001974: 	movq	0x28(%rsp), %rax
.Ltmp4782:
    00001979: 	movq	%r13, 0x148(%rsp)
    00001981: 	movb	$0x0, (%rax,%r13)
    00001986: 	movabsq	$0x3fffffffffffffff, %rax
    00001990: 	cmpq	%rax, 0x148(%rsp)
    00001998: 	je	.Ltmp4752 # Offset: 6552
    0000199e: 	leaq	0x140(%rsp), %r13
    000019a6: 	movl	$0x1, %edx
    000019ab: 	leaq	DATAat0x34149(%rip), %rsi
    000019b2: 	movq	%r13, %rdi
    000019b5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 6581
    000019ba: 	movq	0x148(%rsp), %r8
    000019c2: 	movq	0x168(%rsp), %rdx
    000019ca: 	movl	$0xf, %eax
    000019cf: 	movq	0x140(%rsp), %rcx
    000019d7: 	movq	%rax, %r9
    000019da: 	cmpq	0x28(%rsp), %rcx
    000019df: 	cmovneq	0x150(%rsp), %r9
    000019e8: 	leaq	(%r8,%rdx), %rdi
    000019ec: 	movq	0x160(%rsp), %rsi
    000019f4: 	cmpq	%r9, %rdi
    000019f7: 	jbe	.Ltmp4753 # Offset: 6647
    000019f9: 	cmpq	0x8(%rsp), %rsi
    000019fe: 	cmovneq	0x170(%rsp), %rax
    00001a07: 	cmpq	%rax, %rdi
    00001a0a: 	jbe	.Ltmp4754 # Offset: 6666
.Ltmp4753:
    00001a10: 	movq	%r13, %rdi
    00001a13: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 6675
    00001a18: 	movq	0x10(%rsp), %rdi
    00001a1d: 	leaq	0x10(%rax), %rdx
    00001a21: 	movq	%rdi, 0x180(%rsp)
    00001a29: 	movq	(%rax), %rcx
    00001a2c: 	cmpq	%rdx, %rcx
    00001a2f: 	je	.Ltmp4755 # Offset: 6703
.Ltmp4785:
    00001a35: 	movq	%rcx, 0x180(%rsp)
    00001a3d: 	movq	0x10(%rax), %rcx
    00001a41: 	movq	%rcx, 0x190(%rsp)
.Ltmp4786:
    00001a49: 	movq	0x8(%rax), %rcx
    00001a4d: 	movq	%rcx, 0x188(%rsp)
    00001a55: 	movq	$0x0, 0x8(%rax)
    00001a5d: 	movb	$0x0, 0x10(%rax)
    00001a61: 	movq	%rdx, (%rax)
    00001a64: 	movabsq	$0x3fffffffffffffff, %rax
    00001a6e: 	subq	0x188(%rsp), %rax
    00001a76: 	cmpq	$0x11, %rax
    00001a7a: 	jbe	.Ltmp4756 # Offset: 6778
    00001a80: 	movq	0x40(%rsp), %rdi
    00001a85: 	movl	$0x12, %edx
    00001a8a: 	leaq	DATAat0x342c9(%rip), %rsi
    00001a91: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 6801
    00001a96: 	movq	0x20(%rsp), %rdi
    00001a9b: 	leaq	0x10(%rax), %rdx
    00001a9f: 	movq	%rdi, 0x1a0(%rsp)
    00001aa7: 	movq	(%rax), %rcx
    00001aaa: 	cmpq	%rdx, %rcx
    00001aad: 	je	.Ltmp4757 # Offset: 6829
    00001ab3: 	movq	%rcx, 0x1a0(%rsp)
    00001abb: 	movq	0x10(%rax), %rcx
    00001abf: 	movq	%rcx, 0x1b0(%rsp)
.Ltmp4783:
    00001ac7: 	movq	0x8(%rax), %rcx
    00001acb: 	movq	0x50(%rsp), %r13
    00001ad0: 	movq	0x48(%rsp), %rsi
    00001ad5: 	movq	%rcx, 0x1a8(%rsp)
    00001add: 	movq	%r13, %rdi
    00001ae0: 	movq	%rdx, (%rax)
    00001ae3: 	leaq	DATAat0x3418f(%rip), %rdx
    00001aea: 	movq	$0x0, 0x8(%rax)
    00001af2: 	movb	$0x0, 0x10(%rax)
    00001af6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6902
    00001afb: 	xorl	%r9d, %r9d
    00001afe: 	movq	%r13, %r8
    00001b01: 	leaq	_Z14std_lowerboundISt18_Fwd_list_iteratorIiEiET_S2_S2_T0_(%rip), %rcx
    00001b08: 	movq	%r12, %rdx
    00001b0b: 	xorl	%esi, %esi
    00001b0d: 	movq	%rbp, %rdi
    00001b10: 	callq	"_Z13TestOneSearchISt18_Fwd_list_iteratorIiEPFS1_S1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1" # Offset: 6928
    00001b15: 	movq	0x1c0(%rsp), %rdi
    00001b1d: 	cmpq	0x18(%rsp), %rdi
    00001b22: 	je	.Ltmp4758 # Offset: 6946
    00001b24: 	movq	0x1d0(%rsp), %rax
    00001b2c: 	leaq	0x1(%rax), %rsi
    00001b30: 	callq	_ZdlPvm@PLT # Offset: 6960
.Ltmp4758:
    00001b35: 	movq	0x50(%rsp), %r13
    00001b3a: 	movq	0x48(%rsp), %rsi
    00001b3f: 	leaq	DATAat0x341a1(%rip), %rdx
    00001b46: 	movq	%r13, %rdi
    00001b49: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6985
    00001b4e: 	xorl	%r9d, %r9d
    00001b51: 	movq	%r13, %r8
    00001b54: 	leaq	_Z12lower_bound1ISt18_Fwd_list_iteratorIiEiET_S2_S2_T0_(%rip), %rcx
    00001b5b: 	movq	%r12, %rdx
    00001b5e: 	xorl	%esi, %esi
    00001b60: 	movq	%rbp, %rdi
    00001b63: 	callq	"_Z13TestOneSearchISt18_Fwd_list_iteratorIiEPFS1_S1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1" # Offset: 7011
    00001b68: 	movq	0x1c0(%rsp), %rdi
    00001b70: 	cmpq	0x18(%rsp), %rdi
    00001b75: 	je	.Ltmp4759 # Offset: 7029
    00001b77: 	movq	0x1d0(%rsp), %rax
    00001b7f: 	leaq	0x1(%rax), %rsi
    00001b83: 	callq	_ZdlPvm@PLT # Offset: 7043
.Ltmp4759:
    00001b88: 	movq	0x50(%rsp), %r13
    00001b8d: 	movq	0x48(%rsp), %rsi
    00001b92: 	leaq	DATAat0x341af(%rip), %rdx
    00001b99: 	movq	%r13, %rdi
    00001b9c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7068
    00001ba1: 	xorl	%r9d, %r9d
    00001ba4: 	movq	%r13, %r8
    00001ba7: 	leaq	_Z12lower_bound2ISt18_Fwd_list_iteratorIiEiET_S2_S2_T0_(%rip), %rcx
    00001bae: 	movq	%r12, %rdx
    00001bb1: 	xorl	%esi, %esi
    00001bb3: 	movq	%rbp, %rdi
    00001bb6: 	callq	"_Z13TestOneSearchISt18_Fwd_list_iteratorIiEPFS1_S1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1" # Offset: 7094
    00001bbb: 	movq	0x1c0(%rsp), %rdi
    00001bc3: 	cmpq	0x18(%rsp), %rdi
    00001bc8: 	je	.Ltmp4760 # Offset: 7112
    00001bca: 	movq	0x1d0(%rsp), %rax
    00001bd2: 	leaq	0x1(%rax), %rsi
    00001bd6: 	callq	_ZdlPvm@PLT # Offset: 7126
.Ltmp4760:
    00001bdb: 	movq	0x50(%rsp), %r13
    00001be0: 	movq	0x48(%rsp), %rsi
    00001be5: 	leaq	DATAat0x341bd(%rip), %rdx
    00001bec: 	movq	%r13, %rdi
    00001bef: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7151
    00001bf4: 	xorl	%r9d, %r9d
    00001bf7: 	movq	%r13, %r8
    00001bfa: 	leaq	_Z17lower_bound_recurISt18_Fwd_list_iteratorIiEiET_S2_S2_T0_(%rip), %rcx
    00001c01: 	movq	%r12, %rdx
    00001c04: 	xorl	%esi, %esi
    00001c06: 	movq	%rbp, %rdi
    00001c09: 	callq	"_Z13TestOneSearchISt18_Fwd_list_iteratorIiEPFS1_S1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1" # Offset: 7177
    00001c0e: 	movq	0x1c0(%rsp), %rdi
    00001c16: 	cmpq	0x18(%rsp), %rdi
    00001c1b: 	je	.Ltmp4761 # Offset: 7195
    00001c1d: 	movq	0x1d0(%rsp), %rax
    00001c25: 	leaq	0x1(%rax), %rsi
    00001c29: 	callq	_ZdlPvm@PLT # Offset: 7209
.Ltmp4761:
    00001c2e: 	movq	0x50(%rsp), %r13
    00001c33: 	movq	0x48(%rsp), %rsi
    00001c38: 	leaq	DATAat0x341d4(%rip), %rdx
    00001c3f: 	movq	%r13, %rdi
    00001c42: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7234
    00001c47: 	movl	$0x1, %r9d
    00001c4d: 	movq	%r13, %r8
    00001c50: 	movq	%r12, %rdx
    00001c53: 	xorl	%esi, %esi
    00001c55: 	leaq	_Z14std_upperboundISt18_Fwd_list_iteratorIiEiET_S2_S2_T0_(%rip), %rcx
    00001c5c: 	movq	%rbp, %rdi
    00001c5f: 	callq	"_Z13TestOneSearchISt18_Fwd_list_iteratorIiEPFS1_S1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1" # Offset: 7263
    00001c64: 	movq	0x1c0(%rsp), %rdi
    00001c6c: 	cmpq	0x18(%rsp), %rdi
    00001c71: 	je	.Ltmp4762 # Offset: 7281
    00001c73: 	movq	0x1d0(%rsp), %rax
    00001c7b: 	leaq	0x1(%rax), %rsi
    00001c7f: 	callq	_ZdlPvm@PLT # Offset: 7295
.Ltmp4762:
    00001c84: 	movq	0x50(%rsp), %r13
    00001c89: 	movq	0x48(%rsp), %rsi
    00001c8e: 	leaq	DATAat0x341e6(%rip), %rdx
    00001c95: 	movq	%r13, %rdi
    00001c98: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7320
    00001c9d: 	movl	$0x1, %r9d
    00001ca3: 	movq	%r13, %r8
    00001ca6: 	movq	%r12, %rdx
    00001ca9: 	xorl	%esi, %esi
    00001cab: 	leaq	_Z12upper_bound1ISt18_Fwd_list_iteratorIiEiET_S2_S2_T0_(%rip), %rcx
    00001cb2: 	movq	%rbp, %rdi
    00001cb5: 	callq	"_Z13TestOneSearchISt18_Fwd_list_iteratorIiEPFS1_S1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1" # Offset: 7349
    00001cba: 	movq	0x1c0(%rsp), %rdi
    00001cc2: 	cmpq	0x18(%rsp), %rdi
    00001cc7: 	je	.Ltmp4763 # Offset: 7367
    00001cc9: 	movq	0x1d0(%rsp), %rax
    00001cd1: 	leaq	0x1(%rax), %rsi
    00001cd5: 	callq	_ZdlPvm@PLT # Offset: 7381
.Ltmp4763:
    00001cda: 	movq	0x50(%rsp), %r13
    00001cdf: 	movq	0x48(%rsp), %rsi
    00001ce4: 	leaq	DATAat0x341f4(%rip), %rdx
    00001ceb: 	movq	%r13, %rdi
    00001cee: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7406
    00001cf3: 	movl	$0x1, %r9d
    00001cf9: 	movq	%r13, %r8
    00001cfc: 	movq	%r12, %rdx
    00001cff: 	xorl	%esi, %esi
    00001d01: 	leaq	_Z12upper_bound2ISt18_Fwd_list_iteratorIiEiET_S2_S2_T0_(%rip), %rcx
    00001d08: 	movq	%rbp, %rdi
    00001d0b: 	callq	"_Z13TestOneSearchISt18_Fwd_list_iteratorIiEPFS1_S1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1" # Offset: 7435
    00001d10: 	movq	0x1c0(%rsp), %rdi
    00001d18: 	cmpq	0x18(%rsp), %rdi
    00001d1d: 	je	.Ltmp4764 # Offset: 7453
    00001d1f: 	movq	0x1d0(%rsp), %rax
    00001d27: 	leaq	0x1(%rax), %rsi
    00001d2b: 	callq	_ZdlPvm@PLT # Offset: 7467
.Ltmp4764:
    00001d30: 	movq	0x50(%rsp), %r13
    00001d35: 	movq	0x48(%rsp), %rsi
    00001d3a: 	leaq	DATAat0x34202(%rip), %rdx
    00001d41: 	movq	%r13, %rdi
    00001d44: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7492
    00001d49: 	movl	$0x1, %r9d
    00001d4f: 	movq	%r13, %r8
    00001d52: 	movq	%r12, %rdx
    00001d55: 	xorl	%esi, %esi
    00001d57: 	leaq	_Z17upper_bound_recurISt18_Fwd_list_iteratorIiEiET_S2_S2_T0_(%rip), %rcx
    00001d5e: 	movq	%rbp, %rdi
    00001d61: 	callq	"_Z13TestOneSearchISt18_Fwd_list_iteratorIiEPFS1_S1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1" # Offset: 7521
    00001d66: 	movq	0x1c0(%rsp), %rdi
    00001d6e: 	cmpq	0x18(%rsp), %rdi
    00001d73: 	je	.Ltmp4765 # Offset: 7539
    00001d75: 	movq	0x1d0(%rsp), %rax
    00001d7d: 	leaq	0x1(%rax), %rsi
    00001d81: 	callq	_ZdlPvm@PLT # Offset: 7553
.Ltmp4765:
    00001d86: 	movq	0x50(%rsp), %r13
    00001d8b: 	movq	0x48(%rsp), %rsi
    00001d90: 	leaq	DATAat0x34219(%rip), %rdx
    00001d97: 	movq	%r13, %rdi
    00001d9a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7578
    00001d9f: 	xorl	%r9d, %r9d
    00001da2: 	movq	%r13, %r8
    00001da5: 	leaq	_Z16std_binarysearchISt18_Fwd_list_iteratorIiEiEbT_S2_T0_(%rip), %rcx
    00001dac: 	movq	%r12, %rdx
    00001daf: 	xorl	%esi, %esi
    00001db1: 	movq	%rbp, %rdi
    00001db4: 	callq	_Z13TestOneSearchISt18_Fwd_list_iteratorIiEPFbS1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 7604
    00001db9: 	movq	0x1c0(%rsp), %rdi
    00001dc1: 	cmpq	0x18(%rsp), %rdi
    00001dc6: 	je	.Ltmp4766 # Offset: 7622
    00001dc8: 	movq	0x1d0(%rsp), %rax
    00001dd0: 	leaq	0x1(%rax), %rsi
    00001dd4: 	callq	_ZdlPvm@PLT # Offset: 7636
.Ltmp4766:
    00001dd9: 	movq	0x50(%rsp), %r13
    00001dde: 	movq	0x48(%rsp), %rsi
    00001de3: 	leaq	DATAat0x3422d(%rip), %rdx
    00001dea: 	movq	%r13, %rdi
    00001ded: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7661
    00001df2: 	xorl	%r9d, %r9d
    00001df5: 	movq	%r13, %r8
    00001df8: 	leaq	_Z13binarysearch1ISt18_Fwd_list_iteratorIiEiEbT_S2_T0_(%rip), %rcx
    00001dff: 	movq	%r12, %rdx
    00001e02: 	xorl	%esi, %esi
    00001e04: 	movq	%rbp, %rdi
    00001e07: 	callq	_Z13TestOneSearchISt18_Fwd_list_iteratorIiEPFbS1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 7687
    00001e0c: 	movq	0x1c0(%rsp), %rdi
    00001e14: 	cmpq	0x18(%rsp), %rdi
    00001e19: 	je	.Ltmp4767 # Offset: 7705
    00001e1b: 	movq	0x1d0(%rsp), %rax
    00001e23: 	leaq	0x1(%rax), %rsi
    00001e27: 	callq	_ZdlPvm@PLT # Offset: 7719
.Ltmp4767:
    00001e2c: 	movq	0x50(%rsp), %r13
    00001e31: 	movq	0x48(%rsp), %rsi
    00001e36: 	leaq	DATAat0x3423d(%rip), %rdx
    00001e3d: 	movq	%r13, %rdi
    00001e40: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7744
    00001e45: 	xorl	%r9d, %r9d
    00001e48: 	movq	%r13, %r8
    00001e4b: 	leaq	_Z13binarysearch2ISt18_Fwd_list_iteratorIiEiEbT_S2_T0_(%rip), %rcx
    00001e52: 	movq	%r12, %rdx
    00001e55: 	xorl	%esi, %esi
    00001e57: 	movq	%rbp, %rdi
    00001e5a: 	callq	_Z13TestOneSearchISt18_Fwd_list_iteratorIiEPFbS1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 7770
    00001e5f: 	movq	0x1c0(%rsp), %rdi
    00001e67: 	cmpq	0x18(%rsp), %rdi
    00001e6c: 	je	.Ltmp4768 # Offset: 7788
    00001e6e: 	movq	0x1d0(%rsp), %rax
    00001e76: 	leaq	0x1(%rax), %rsi
    00001e7a: 	callq	_ZdlPvm@PLT # Offset: 7802
.Ltmp4768:
    00001e7f: 	movq	0x50(%rsp), %r13
    00001e84: 	movq	0x48(%rsp), %rsi
    00001e89: 	leaq	DATAat0x3424d(%rip), %rdx
    00001e90: 	movq	%r13, %rdi
    00001e93: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7827
    00001e98: 	xorl	%r9d, %r9d
    00001e9b: 	movq	%r13, %r8
    00001e9e: 	leaq	_Z13binarysearch3ISt18_Fwd_list_iteratorIiEiEbT_S2_T0_(%rip), %rcx
    00001ea5: 	movq	%r12, %rdx
    00001ea8: 	xorl	%esi, %esi
    00001eaa: 	movq	%rbp, %rdi
    00001ead: 	callq	_Z13TestOneSearchISt18_Fwd_list_iteratorIiEPFbS1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 7853
    00001eb2: 	movq	0x1c0(%rsp), %rdi
    00001eba: 	cmpq	0x18(%rsp), %rdi
    00001ebf: 	je	.Ltmp4769 # Offset: 7871
    00001ec1: 	movq	0x1d0(%rsp), %rax
    00001ec9: 	leaq	0x1(%rax), %rsi
    00001ecd: 	callq	_ZdlPvm@PLT # Offset: 7885
.Ltmp4769:
    00001ed2: 	movq	0x50(%rsp), %r13
    00001ed7: 	movq	0x48(%rsp), %rsi
    00001edc: 	leaq	DATAat0x3425d(%rip), %rdx
    00001ee3: 	movq	%r13, %rdi
    00001ee6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7910
    00001eeb: 	xorl	%r9d, %r9d
    00001eee: 	movq	%r13, %r8
    00001ef1: 	leaq	_Z13binarysearch4ISt18_Fwd_list_iteratorIiEiEbT_S2_T0_(%rip), %rcx
    00001ef8: 	movq	%r12, %rdx
    00001efb: 	xorl	%esi, %esi
    00001efd: 	movq	%rbp, %rdi
    00001f00: 	callq	_Z13TestOneSearchISt18_Fwd_list_iteratorIiEPFbS1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 7936
    00001f05: 	movq	0x1c0(%rsp), %rdi
    00001f0d: 	cmpq	0x18(%rsp), %rdi
    00001f12: 	je	.Ltmp4770 # Offset: 7954
    00001f14: 	movq	0x1d0(%rsp), %rax
    00001f1c: 	leaq	0x1(%rax), %rsi
    00001f20: 	callq	_ZdlPvm@PLT # Offset: 7968
.Ltmp4770:
    00001f25: 	movq	0x50(%rsp), %r13
    00001f2a: 	movq	0x48(%rsp), %rsi
    00001f2f: 	leaq	DATAat0x3426d(%rip), %rdx
    00001f36: 	movq	%r13, %rdi
    00001f39: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7993
    00001f3e: 	xorl	%r9d, %r9d
    00001f41: 	movq	%r13, %r8
    00001f44: 	leaq	_Z18binarysearch_recurISt18_Fwd_list_iteratorIiEiEbT_S2_T0_(%rip), %rcx
    00001f4b: 	movq	%r12, %rdx
    00001f4e: 	xorl	%esi, %esi
    00001f50: 	movq	%rbp, %rdi
    00001f53: 	callq	_Z13TestOneSearchISt18_Fwd_list_iteratorIiEPFbS1_S1_iEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 8019
    00001f58: 	movq	0x1c0(%rsp), %rdi
    00001f60: 	cmpq	0x18(%rsp), %rdi
    00001f65: 	je	.Ltmp4771 # Offset: 8037
    00001f67: 	movq	0x1d0(%rsp), %rax
    00001f6f: 	leaq	0x1(%rax), %rsi
    00001f73: 	callq	_ZdlPvm@PLT # Offset: 8051
.Ltmp4771:
    00001f78: 	movq	0x50(%rsp), %r13
    00001f7d: 	movq	0x48(%rsp), %rsi
    00001f82: 	leaq	DATAat0x34286(%rip), %rdx
    00001f89: 	movq	%r13, %rdi
    00001f8c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8076
    00001f91: 	movq	%r13, %rdi
    00001f94: 	callq	_Z9summarizeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 8084
    00001f99: 	movq	0x1c0(%rsp), %rdi
    00001fa1: 	cmpq	0x18(%rsp), %rdi
    00001fa6: 	je	.Ltmp4772 # Offset: 8102
    00001fa8: 	movq	0x1d0(%rsp), %rax
    00001fb0: 	leaq	0x1(%rax), %rsi
    00001fb4: 	callq	_ZdlPvm@PLT # Offset: 8116
.Ltmp4772:
    00001fb9: 	movq	0x1a0(%rsp), %rdi
    00001fc1: 	cmpq	0x20(%rsp), %rdi
    00001fc6: 	je	.Ltmp4773 # Offset: 8134
    00001fc8: 	movq	0x1b0(%rsp), %rax
    00001fd0: 	leaq	0x1(%rax), %rsi
    00001fd4: 	callq	_ZdlPvm@PLT # Offset: 8148
.Ltmp4773:
    00001fd9: 	movq	0x180(%rsp), %rdi
    00001fe1: 	cmpq	0x10(%rsp), %rdi
    00001fe6: 	je	.Ltmp4774 # Offset: 8166
    00001fe8: 	movq	0x190(%rsp), %rax
    00001ff0: 	leaq	0x1(%rax), %rsi
    00001ff4: 	callq	_ZdlPvm@PLT # Offset: 8180
.Ltmp4774:
    00001ff9: 	movq	0x140(%rsp), %rdi
    00002001: 	cmpq	0x28(%rsp), %rdi
    00002006: 	je	.Ltmp4775 # Offset: 8198
    00002008: 	movq	0x150(%rsp), %rax
    00002010: 	leaq	0x1(%rax), %rsi
    00002014: 	callq	_ZdlPvm@PLT # Offset: 8212
.Ltmp4775:
    00002019: 	movq	0x160(%rsp), %rdi
    00002021: 	cmpq	0x8(%rsp), %rdi
    00002026: 	je	.Ltmp4776 # Offset: 8230
    00002028: 	movq	0x170(%rsp), %rax
    00002030: 	leaq	0x1(%rax), %rsi
    00002034: 	callq	_ZdlPvm@PLT # Offset: 8244
.Ltmp4776:
    00002039: 	testq	%rbp, %rbp
    0000203c: 	je	.Ltmp4777 # Offset: 8252
.Ltmp4778:
    0000203e: 	movq	%rbp, %rdi
    00002041: 	movq	(%rbp), %rbp
    00002045: 	movl	$0x10, %esi
    0000204a: 	callq	_ZdlPvm@PLT # Offset: 8266
    0000204f: 	testq	%rbp, %rbp
    00002052: 	jne	.Ltmp4778 # Offset: 8274
.Ltmp4777:
    00002054: 	addq	$0x8, 0x80(%rsp)
    0000205d: 	movq	0x80(%rsp), %rax
    00002065: 	cmpq	0x58(%rsp), %rax
    0000206a: 	jne	.Ltmp4779 # Offset: 8298
    00002070: 	movq	0x120(%rsp), %rdi
    00002078: 	leaq	0x130(%rsp), %rax
    00002080: 	cmpq	%rax, %rdi
    00002083: 	je	.Ltmp4780 # Offset: 8323
    00002085: 	movq	0x130(%rsp), %rax
    0000208d: 	leaq	0x1(%rax), %rsi
    00002091: 	callq	_ZdlPvm@PLT # Offset: 8337
.Ltmp4780:
    00002096: 	movq	0x258(%rsp), %rax
    0000209e: 	subq	%fs:0x28, %rax
    000020a7: 	jne	.Ltmp4781 # Offset: 8359
    000020ad: 	addq	$0x268, %rsp
    000020b4: 	popq	%rbx
    000020b5: 	popq	%rbp
    000020b6: 	popq	%r12
    000020b8: 	popq	%r13
    000020ba: 	popq	%r14
    000020bc: 	popq	%r15
    000020be: 	retq # Offset: 8382
.Ltmp4750:
    000020bf: 	movq	0x60(%rsp), %rsi
    000020c4: 	leaq	0x140(%rsp), %rdi
    000020cc: 	xorl	%edx, %edx
    000020ce: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8398
    000020d3: 	movq	%rax, 0x140(%rsp)
    000020db: 	movq	%rax, %rdi
    000020de: 	movq	0xd0(%rsp), %rax
    000020e6: 	movq	%rax, 0x150(%rsp)
.Ltmp4787:
    000020ee: 	movq	0x30(%rsp), %rsi
    000020f3: 	movq	%r13, %rdx
    000020f6: 	callq	memcpy@PLT # Offset: 8438
    000020fb: 	movq	0xd0(%rsp), %r13
    00002103: 	movq	0x140(%rsp), %rax
    0000210b: 	jmp	.Ltmp4782 # Offset: 8459
.Ltmp4757:
    00002110: 	movdqu	0x10(%rax), %xmm6
    00002115: 	movaps	%xmm6, 0x1b0(%rsp)
    0000211d: 	jmp	.Ltmp4783 # Offset: 8477
.Ltmp4751:
    00002122: 	testq	%r13, %r13
    00002125: 	jne	.Ltmp4784 # Offset: 8485
    00002127: 	movq	0x28(%rsp), %rax
    0000212c: 	jmp	.Ltmp4782 # Offset: 8492
.Ltmp4754:
    00002131: 	xorl	%edx, %edx
    00002133: 	xorl	%esi, %esi
    00002135: 	movq	%r15, %rdi
    00002138: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@PLT # Offset: 8504
    0000213d: 	movq	0x10(%rsp), %rdi
    00002142: 	leaq	0x10(%rax), %rdx
    00002146: 	movq	%rdi, 0x180(%rsp)
    0000214e: 	movq	(%rax), %rcx
    00002151: 	cmpq	%rdx, %rcx
    00002154: 	jne	.Ltmp4785 # Offset: 8532
    0000215a: 	movdqu	0x10(%rax), %xmm5
    0000215f: 	movaps	%xmm5, 0x190(%rsp)
    00002167: 	jmp	.Ltmp4786 # Offset: 8551
.Ltmp4784:
    0000216c: 	movq	0x28(%rsp), %rdi
    00002171: 	jmp	.Ltmp4787 # Offset: 8561
.Ltmp4781:
    00002176: 	callq	__stack_chk_fail@PLT # Offset: 8566
    0000217b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4740:
    00002180: 	leal	0x7(%rdx), %esi
    00002183: 	jmp	.Ltmp4788 # Offset: 8579
.Ltmp4756:
    00002188: 	leaq	DATAat0x3414b(%rip), %rdi
    0000218f: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8591
    00002194: 	nopl	(%rax) # Size: 4
.Ltmp4755:
    00002198: 	movdqu	0x10(%rax), %xmm4
    0000219d: 	movaps	%xmm4, 0x190(%rsp)
    000021a5: 	jmp	.Ltmp4786 # Offset: 8613
.Ltmp4752:
    000021aa: 	leaq	DATAat0x3414b(%rip), %rdi
    000021b1: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8625
    000021b6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp4739:
    000021c0: 	leal	0x6(%rdx), %esi
    000021c3: 	jmp	.Ltmp4788 # Offset: 8643
.Ltmp4738:
    000021c8: 	leal	0x5(%rdx), %esi
    000021cb: 	jmp	.Ltmp4788 # Offset: 8651
.Ltmp4736:
    000021d0: 	movl	$0x4, %esi
    000021d5: 	jmp	.Ltmp4788 # Offset: 8661
.Ltmp4735:
    000021da: 	movl	$0x3, %esi
    000021df: 	jmp	.Ltmp4788 # Offset: 8671
.Ltmp4734:
    000021e4: 	movl	$0x2, %esi
    000021e9: 	jmp	.Ltmp4788 # Offset: 8681
.Ltmp4733:
    000021ee: 	movl	$0x1, %esi
    000021f3: 	jmp	.Ltmp4788 # Offset: 8691
    000021f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp4731:
    00002200: 	movl	$0x1, %esi
    00002205: 	xorl	%ebp, %ebp
    00002207: 	jmp	.Ltmp4788 # Offset: 8711
.Ltmp4722:
    0000220c: 	leaq	DATAat0x3414b(%rip), %rdi
    00002213: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8723
.Ltmp4718:
    00002218: 	leaq	DATAat0x3414b(%rip), %rdi
    0000221f: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8735
.Ltmp4717:
    00002224: 	movq	0x8(%rsp), %rdi
    00002229: 	jmp	.Ltmp4789 # Offset: 8745
    0000222e: 	nop # Size: 2
.Ltmp4682:
    00002230: 	leaq	DATAat0x3414b(%rip), %rdi
    00002237: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8759
.Ltmp4678:
    0000223c: 	leaq	DATAat0x3414b(%rip), %rdi
    00002243: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8771
.Ltmp4654:
    00002248: 	movq	0x8(%rsp), %rdi
    0000224d: 	jmp	.Ltmp4790 # Offset: 8781
    00002252: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4703:
    00002258: 	movl	$0x4, %esi
    0000225d: 	jmp	.Ltmp4749 # Offset: 8797
.Ltmp4702:
    00002262: 	movl	$0x3, %esi
    00002267: 	jmp	.Ltmp4749 # Offset: 8807
.Ltmp4644:
    0000226c: 	leaq	DATAat0x3414b(%rip), %rdi
    00002273: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8819
.Ltmp4616:
    00002278: 	movq	0x8(%rsp), %rdi
    0000227d: 	jmp	.Ltmp4791 # Offset: 8829
    00002282: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4640:
    00002288: 	leaq	DATAat0x3414b(%rip), %rdi
    0000228f: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8847
.Ltmp4637:
    00002294: 	leaq	DATAat0x34008(%rip), %rdi
    0000229b: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8859
.Ltmp4604:
    000022a0: 	leaq	DATAat0x3414b(%rip), %rdi
    000022a7: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8871
.Ltmp4601:
    000022ac: 	leaq	DATAat0x34008(%rip), %rdi
    000022b3: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8883
.Ltmp4608:
    000022b8: 	leaq	DATAat0x3414b(%rip), %rdi
    000022bf: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8895
.Ltmp4675:
    000022c4: 	leaq	DATAat0x34008(%rip), %rdi
    000022cb: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8907
.Ltmp4693:
    000022d0: 	movq	0x8(%rsp), %rdi
    000022d5: 	jmp	.Ltmp4792 # Offset: 8917
.Ltmp4713:
    000022da: 	leaq	DATAat0x34008(%rip), %rdi
    000022e1: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8929
    000022e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp4701:
    000022f0: 	movl	$0x2, %esi
    000022f5: 	jmp	.Ltmp4749 # Offset: 8949
    000022fa: 	endbr64
    000022fe: 	movq	%rax, %rbx
    00002301: 	jmp	.Ltmp4793 # Offset: 8961
    00002306: 	endbr64
.Ltmp4806:
    0000230a: 	movq	%rax, %rbx
    0000230d: 	jmp	.Ltmp4794 # Offset: 8973
    00002312: 	endbr64
.Ltmp4807:
    00002316: 	movq	%rax, %r12
    00002319: 	jmp	.Ltmp4795 # Offset: 8985
    0000231e: 	endbr64
    00002322: 	movq	%rax, %rbx
    00002325: 	jmp	.Ltmp4796 # Offset: 8997
    00002327: 	endbr64
    0000232b: 	movq	%rax, %rbx
    0000232e: 	jmp	.Ltmp4797 # Offset: 9006
    00002333: 	endbr64
.Ltmp4815:
    00002337: 	movq	%rax, %rbx
    0000233a: 	jmp	.Ltmp4798 # Offset: 9018
    0000233c: 	endbr64
    00002340: 	movq	%rax, %rbx
    00002343: 	jmp	.Ltmp4799 # Offset: 9027
    00002345: 	endbr64
    00002349: 	movq	%rax, %rbx
    0000234c: 	jmp	.Ltmp4800 # Offset: 9036
    00002351: 	endbr64
    00002355: 	movq	%rax, %rbx
    00002358: 	jmp	.Ltmp4801 # Offset: 9048
.Ltmp4817:
    0000235d: 	movq	0x1c0(%rsp), %rdi
    00002365: 	cmpq	0x18(%rsp), %rdi
    0000236a: 	je	.Ltmp4796 # Offset: 9066
    0000236c: 	movq	0x1d0(%rsp), %rax
    00002374: 	leaq	0x1(%rax), %rsi
    00002378: 	callq	_ZdlPvm@PLT # Offset: 9080
.Ltmp4796:
    0000237d: 	movq	0x1a0(%rsp), %rdi
    00002385: 	cmpq	0x20(%rsp), %rdi
    0000238a: 	je	.Ltmp4798 # Offset: 9098
    0000238c: 	movq	0x1b0(%rsp), %rax
    00002394: 	leaq	0x1(%rax), %rsi
    00002398: 	callq	_ZdlPvm@PLT # Offset: 9112
.Ltmp4798:
    0000239d: 	movq	0x160(%rsp), %rdi
    000023a5: 	cmpq	0x8(%rsp), %rdi
    000023aa: 	je	.Ltmp4799 # Offset: 9130
    000023ac: 	movq	0x170(%rsp), %rax
    000023b4: 	leaq	0x1(%rax), %rsi
    000023b8: 	callq	_ZdlPvm@PLT # Offset: 9144
.Ltmp4799:
    000023bd: 	movq	0x180(%rsp), %rdi
    000023c5: 	cmpq	0x10(%rsp), %rdi
    000023ca: 	je	.Ltmp4800 # Offset: 9162
    000023cc: 	movq	0x190(%rsp), %rax
    000023d4: 	leaq	0x1(%rax), %rsi
    000023d8: 	callq	_ZdlPvm@PLT # Offset: 9176
.Ltmp4800:
    000023dd: 	movq	0x70(%rsp), %rsi
    000023e2: 	movq	0x28(%rsp), %rax
    000023e7: 	subq	%rax, %rsi
    000023ea: 	testq	%rax, %rax
    000023ed: 	je	.Ltmp4802 # Offset: 9197
    000023ef: 	movq	%rax, %rdi
    000023f2: 	callq	_ZdlPvm@PLT # Offset: 9202
.Ltmp4802:
    000023f7: 	movq	0x120(%rsp), %rdi
    000023ff: 	leaq	0x130(%rsp), %rax
    00002407: 	cmpq	%rax, %rdi
    0000240a: 	je	.Ltmp4803 # Offset: 9226
    0000240c: 	movq	0x130(%rsp), %rax
    00002414: 	leaq	0x1(%rax), %rsi
    00002418: 	callq	_ZdlPvm@PLT # Offset: 9240
.Ltmp4803:
    0000241d: 	movq	%rbx, %rdi
    00002420: 	callq	_Unwind_Resume@PLT # Offset: 9248
.Ltmp4835:
    00002425: 	movq	0x1c0(%rsp), %rdi
    0000242d: 	cmpq	0x18(%rsp), %rdi
    00002432: 	je	.Ltmp4793 # Offset: 9266
    00002434: 	movq	0x1d0(%rsp), %rax
    0000243c: 	leaq	0x1(%rax), %rsi
    00002440: 	callq	_ZdlPvm@PLT # Offset: 9280
.Ltmp4793:
    00002445: 	movq	0x1a0(%rsp), %rdi
    0000244d: 	cmpq	0x20(%rsp), %rdi
    00002452: 	je	.Ltmp4794 # Offset: 9298
    00002454: 	movq	0x1b0(%rsp), %rax
    0000245c: 	leaq	0x1(%rax), %rsi
    00002460: 	callq	_ZdlPvm@PLT # Offset: 9312
.Ltmp4794:
    00002465: 	movq	0x160(%rsp), %rdi
    0000246d: 	cmpq	0x8(%rsp), %rdi
    00002472: 	je	.Ltmp4804 # Offset: 9330
    00002474: 	movq	0x170(%rsp), %rax
    0000247c: 	leaq	0x1(%rax), %rsi
    00002480: 	callq	_ZdlPvm@PLT # Offset: 9344
.Ltmp4804:
    00002485: 	movq	0x180(%rsp), %rdi
    0000248d: 	cmpq	0x10(%rsp), %rdi
    00002492: 	je	.Ltmp4801 # Offset: 9362
    00002494: 	movq	0x190(%rsp), %rax
    0000249c: 	leaq	0x1(%rax), %rsi
    000024a0: 	callq	_ZdlPvm@PLT # Offset: 9376
.Ltmp4801:
    000024a5: 	movq	0xd0(%rsp), %rdi
.Ltmp4805:
    000024ad: 	cmpq	0x60(%rsp), %rdi
    000024b2: 	je	.Ltmp4802 # Offset: 9394
    000024b8: 	movq	(%rdi), %rbp
    000024bb: 	movl	$0x18, %esi
    000024c0: 	callq	_ZdlPvm@PLT # Offset: 9408
    000024c5: 	movq	%rbp, %rdi
    000024c8: 	jmp	.Ltmp4805 # Offset: 9416
    000024ca: 	endbr64
    000024ce: 	jmp	.Ltmp4806 # Offset: 9422
    000024d3: 	endbr64
    000024d7: 	jmp	.Ltmp4807 # Offset: 9431
    000024dc: 	endbr64
    000024e0: 	movq	%rax, %rbx
    000024e3: 	jmp	.Ltmp4808 # Offset: 9443
.Ltmp4816:
    000024e5: 	movq	0x1c0(%rsp), %rdi
    000024ed: 	cmpq	0x18(%rsp), %rdi
    000024f2: 	je	.Ltmp4797 # Offset: 9458
    000024f4: 	movq	0x1d0(%rsp), %rax
    000024fc: 	leaq	0x1(%rax), %rsi
    00002500: 	callq	_ZdlPvm@PLT # Offset: 9472
.Ltmp4797:
    00002505: 	movq	0x1a0(%rsp), %rdi
    0000250d: 	cmpq	0x20(%rsp), %rdi
    00002512: 	je	.Ltmp4809 # Offset: 9490
    00002514: 	movq	0x1b0(%rsp), %rax
    0000251c: 	leaq	0x1(%rax), %rsi
    00002520: 	callq	_ZdlPvm@PLT # Offset: 9504
.Ltmp4809:
    00002525: 	movq	0x160(%rsp), %rdi
    0000252d: 	cmpq	0x8(%rsp), %rdi
    00002532: 	je	.Ltmp4808 # Offset: 9522
    00002534: 	movq	0x170(%rsp), %rax
    0000253c: 	leaq	0x1(%rax), %rsi
    00002540: 	callq	_ZdlPvm@PLT # Offset: 9536
.Ltmp4808:
    00002545: 	movq	0x180(%rsp), %rdi
    0000254d: 	cmpq	0x10(%rsp), %rdi
    00002552: 	je	.Ltmp4810 # Offset: 9554
    00002554: 	movq	0x190(%rsp), %rax
    0000255c: 	leaq	0x1(%rax), %rsi
    00002560: 	callq	_ZdlPvm@PLT # Offset: 9568
.Ltmp4810:
    00002565: 	movq	0x30(%rsp), %rdi
    0000256a: 	movl	$0x4, %esi
    0000256f: 	callq	_ZdlPvm@PLT # Offset: 9583
    00002574: 	jmp	.Ltmp4802 # Offset: 9588
.Ltmp4830:
    00002579: 	movq	0x1c0(%rsp), %rdi
    00002581: 	cmpq	0x18(%rsp), %rdi
    00002586: 	je	.Ltmp4811 # Offset: 9606
    00002588: 	movq	0x1d0(%rsp), %rax
    00002590: 	leaq	0x1(%rax), %rsi
    00002594: 	callq	_ZdlPvm@PLT # Offset: 9620
.Ltmp4811:
    00002599: 	movq	0x1a0(%rsp), %rdi
    000025a1: 	cmpq	0x20(%rsp), %rdi
    000025a6: 	je	.Ltmp4795 # Offset: 9638
    000025a8: 	movq	0x1b0(%rsp), %rax
    000025b0: 	leaq	0x1(%rax), %rsi
    000025b4: 	callq	_ZdlPvm@PLT # Offset: 9652
.Ltmp4795:
    000025b9: 	movq	0x160(%rsp), %rdi
    000025c1: 	cmpq	0x8(%rsp), %rdi
    000025c6: 	je	.Ltmp4812 # Offset: 9670
    000025c8: 	movq	0x170(%rsp), %rax
    000025d0: 	leaq	0x1(%rax), %rsi
    000025d4: 	callq	_ZdlPvm@PLT # Offset: 9684
.Ltmp4812:
    000025d9: 	movq	0x180(%rsp), %rdi
    000025e1: 	cmpq	0x10(%rsp), %rdi
    000025e6: 	je	.Ltmp4813 # Offset: 9702
    000025e8: 	movq	0x190(%rsp), %rax
    000025f0: 	leaq	0x1(%rax), %rsi
    000025f4: 	callq	_ZdlPvm@PLT # Offset: 9716
.Ltmp4813:
    000025f9: 	movq	0xd0(%rsp), %r13
    00002601: 	addq	$0x8, %rbp
    00002605: 	testq	%r13, %r13
    00002608: 	jne	.Ltmp4814 # Offset: 9736
.Ltmp4819:
    0000260a: 	movq	%r12, %rbx
    0000260d: 	jmp	.Ltmp4802 # Offset: 9741
    00002612: 	endbr64
    00002616: 	movq	%rax, %r12
    00002619: 	jmp	.Ltmp4813 # Offset: 9753
    0000261b: 	endbr64
    0000261f: 	jmp	.Ltmp4815 # Offset: 9759
    00002624: 	endbr64
    00002628: 	movq	%rax, %rbx
    0000262b: 	jmp	.Ltmp4816 # Offset: 9771
    00002630: 	endbr64
    00002634: 	movq	%rax, %rbx
    00002637: 	jmp	.Ltmp4817 # Offset: 9783
.Ltmp4818:
    0000263c: 	movq	(%rbx), %rdi
    0000263f: 	movl	$0x200, %esi
    00002644: 	addq	$0x8, %rbx
    00002648: 	callq	_ZdlPvm@PLT # Offset: 9800
.Ltmp4814:
    0000264d: 	cmpq	%rbx, %rbp
    00002650: 	ja	.Ltmp4818 # Offset: 9808
    00002652: 	movq	0xd8(%rsp), %rax
    0000265a: 	movq	%r13, %rdi
    0000265d: 	leaq	(,%rax,8), %rsi
    00002665: 	callq	_ZdlPvm@PLT # Offset: 9829
    0000266a: 	jmp	.Ltmp4819 # Offset: 9834
    0000266c: 	endbr64
.Ltmp4827:
    00002670: 	movq	%rax, %rbx
    00002673: 	jmp	.Ltmp4820 # Offset: 9843
    00002675: 	endbr64
    00002679: 	movq	%rax, %rbx
    0000267c: 	jmp	.Ltmp4821 # Offset: 9852
.Ltmp4820:
    0000267e: 	movq	0x1c0(%rsp), %rdi
    00002686: 	cmpq	0x18(%rsp), %rdi
    0000268b: 	je	.Ltmp4821 # Offset: 9867
    0000268d: 	movq	0x1d0(%rsp), %rax
    00002695: 	leaq	0x1(%rax), %rsi
    00002699: 	callq	_ZdlPvm@PLT # Offset: 9881
.Ltmp4821:
    0000269e: 	movq	0x1a0(%rsp), %rdi
    000026a6: 	cmpq	0x20(%rsp), %rdi
    000026ab: 	je	.Ltmp4822 # Offset: 9899
    000026ad: 	movq	0x1b0(%rsp), %rax
    000026b5: 	leaq	0x1(%rax), %rsi
    000026b9: 	callq	_ZdlPvm@PLT # Offset: 9913
.Ltmp4822:
    000026be: 	movq	0x180(%rsp), %rdi
    000026c6: 	cmpq	0x10(%rsp), %rdi
    000026cb: 	je	.Ltmp4823 # Offset: 9931
    000026cd: 	movq	0x190(%rsp), %rax
    000026d5: 	leaq	0x1(%rax), %rsi
    000026d9: 	callq	_ZdlPvm@PLT # Offset: 9945
.Ltmp4823:
    000026de: 	movq	0x140(%rsp), %rdi
    000026e6: 	cmpq	0x28(%rsp), %rdi
    000026eb: 	je	.Ltmp4824 # Offset: 9963
    000026ed: 	movq	0x150(%rsp), %rax
    000026f5: 	leaq	0x1(%rax), %rsi
    000026f9: 	callq	_ZdlPvm@PLT # Offset: 9977
.Ltmp4824:
    000026fe: 	movq	0x160(%rsp), %rdi
    00002706: 	cmpq	0x8(%rsp), %rdi
    0000270b: 	je	.Ltmp4825 # Offset: 9995
    0000270d: 	movq	0x170(%rsp), %rax
    00002715: 	leaq	0x1(%rax), %rsi
    00002719: 	callq	_ZdlPvm@PLT # Offset: 10009
.Ltmp4825:
    0000271e: 	movq	%rbp, %rdi
.Ltmp4826:
    00002721: 	testq	%rdi, %rdi
    00002724: 	je	.Ltmp4802 # Offset: 10020
    0000272a: 	movq	(%rdi), %r12
    0000272d: 	movl	$0x10, %esi
    00002732: 	callq	_ZdlPvm@PLT # Offset: 10034
    00002737: 	movq	%r12, %rdi
    0000273a: 	jmp	.Ltmp4826 # Offset: 10042
    0000273c: 	endbr64
    00002740: 	jmp	.Ltmp4827 # Offset: 10048
    00002745: 	endbr64
    00002749: 	jmp	.Ltmp4827 # Offset: 10057
    0000274e: 	endbr64
    00002752: 	movq	%rax, %rbx
    00002755: 	jmp	.Ltmp4802 # Offset: 10069
    0000275a: 	endbr64
    0000275e: 	movq	%rax, %rbx
    00002761: 	jmp	.Ltmp4810 # Offset: 10081
    00002766: 	endbr64
.Ltmp4828:
    0000276a: 	movq	%rax, %rbx
    0000276d: 	jmp	.Ltmp4809 # Offset: 10093
    00002772: 	endbr64
    00002776: 	jmp	.Ltmp4828 # Offset: 10102
    00002778: 	endbr64
    0000277c: 	movq	%rax, %r12
    0000277f: 	jmp	.Ltmp4812 # Offset: 10111
    00002784: 	endbr64
    00002788: 	movq	%rax, %rbp
    0000278b: 	jmp	.Ltmp4829 # Offset: 10123
    0000278d: 	endbr64
    00002791: 	movq	%rax, %r12
    00002794: 	jmp	.Ltmp4830 # Offset: 10132
    00002799: 	endbr64
    0000279d: 	movq	%rax, %r12
    000027a0: 	jmp	.Ltmp4811 # Offset: 10144
.Ltmp4829:
    000027a5: 	movq	0xd0(%rsp), %rdi
.Ltmp4832:
    000027ad: 	cmpq	0x60(%rsp), %rdi
    000027b2: 	je	.Ltmp4831 # Offset: 10162
    000027b4: 	movq	(%rdi), %rbx
    000027b7: 	movl	$0x18, %esi
    000027bc: 	callq	_ZdlPvm@PLT # Offset: 10172
    000027c1: 	movq	%rbx, %rdi
    000027c4: 	jmp	.Ltmp4832 # Offset: 10180
.Ltmp4834:
    000027c6: 	movq	0xb0(%rsp), %rdi
.Ltmp4836:
    000027ce: 	testq	%rdi, %rdi
    000027d1: 	jne	.Ltmp4833 # Offset: 10193
.Ltmp4831:
    000027d3: 	movq	%rbp, %rbx
    000027d6: 	jmp	.Ltmp4802 # Offset: 10198
    000027db: 	endbr64
    000027df: 	movq	%rax, %rbx
    000027e2: 	jmp	.Ltmp4804 # Offset: 10210
    000027e7: 	endbr64
    000027eb: 	movq	%rax, %rbp
    000027ee: 	jmp	.Ltmp4834 # Offset: 10222
    000027f0: 	endbr64
.Ltmp4837:
    000027f4: 	movq	%rax, %rbx
    000027f7: 	jmp	.Ltmp4823 # Offset: 10231
    000027fc: 	endbr64
    00002800: 	movq	%rax, %rbx
    00002803: 	jmp	.Ltmp4835 # Offset: 10243
.Ltmp4833:
    00002808: 	movq	(%rdi), %rbx
    0000280b: 	movl	$0x10, %esi
    00002810: 	callq	_ZdlPvm@PLT # Offset: 10256
    00002815: 	movq	%rbx, %rdi
    00002818: 	jmp	.Ltmp4836 # Offset: 10264
    0000281a: 	endbr64
    0000281e: 	movq	%rax, %rbx
    00002821: 	jmp	.Ltmp4822 # Offset: 10273
    00002826: 	endbr64
    0000282a: 	jmp	.Ltmp4837 # Offset: 10282
    0000282c: 	endbr64
    00002830: 	jmp	.Ltmp4827 # Offset: 10288
    00002835: 	endbr64
    00002839: 	jmp	.Ltmp4827 # Offset: 10297
    0000283e: 	endbr64
    00002842: 	jmp	.Ltmp4827 # Offset: 10306
    00002847: 	endbr64
    0000284b: 	jmp	.Ltmp4827 # Offset: 10315
    00002850: 	endbr64
    00002854: 	jmp	.Ltmp4827 # Offset: 10324
    00002859: 	endbr64
    0000285d: 	jmp	.Ltmp4827 # Offset: 10333
    00002862: 	endbr64
    00002866: 	movq	%rax, %rbx
    00002869: 	jmp	.Ltmp4825 # Offset: 10345
    0000286e: 	endbr64
    00002872: 	movq	%rax, %rbx
    00002875: 	jmp	.Ltmp4824 # Offset: 10357
    0000287a: 	endbr64
    0000287e: 	jmp	.Ltmp4827 # Offset: 10366
    00002883: 	endbr64
    00002887: 	jmp	.Ltmp4827 # Offset: 10375
    0000288c: 	endbr64
    00002890: 	jmp	.Ltmp4827 # Offset: 10384
    00002895: 	endbr64
    00002899: 	jmp	.Ltmp4827 # Offset: 10393
    0000289e: 	endbr64
    000028a2: 	jmp	.Ltmp4827 # Offset: 10402
    000028a7: 	endbr64
    000028ab: 	jmp	.Ltmp4827 # Offset: 10411
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIiEvv"

Binary Function "_Z24binarysearch_recur_innerISt18_Fwd_list_iteratorIiEilEbT_T0_T1_" after disassembly {
  Number      : 452
  State       : disassembled
  Address     : 0x29ee0
  Size        : 0x5d
  MaxSize     : 0x60
  Offset      : 0x29ee0
  Section     : .text
  Orc Section : .local.text._Z24binarysearch_recur_innerISt18_Fwd_list_iteratorIiEilEbT_T0_T1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0451:
    00000000: 	endbr64
.Ltmp4843:
    00000004: 	testq	%rdx, %rdx
    00000007: 	je	.Ltmp4838 # Offset: 7
    00000009: 	movq	%rdx, %r8
    0000000c: 	movq	%rdi, %rcx
    0000000f: 	shrq	$0x3f, %r8
    00000013: 	addq	%rdx, %r8
    00000016: 	sarq	%r8
    00000019: 	leaq	-0x1(%r8), %rax
    0000001d: 	je	.Ltmp4839 # Offset: 29
    0000001f: 	nop # Size: 1
.Ltmp4840:
    00000020: 	movq	(%rcx), %rcx
    00000023: 	subq	$0x1, %rax
    00000027: 	jae	.Ltmp4840 # Offset: 39
.Ltmp4839:
    00000029: 	cmpl	%esi, 0x8(%rcx)
    0000002c: 	jl	.Ltmp4841 # Offset: 44
    0000002e: 	jg	.Ltmp4842 # Offset: 46
    00000030: 	movl	$0x1, %eax
    00000035: 	retq # Offset: 53
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp4838:
    00000040: 	xorl	%eax, %eax
    00000042: 	retq # Offset: 66
    00000043: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4841:
    00000048: 	addq	$0x1, %r8
    0000004c: 	movq	(%rcx), %rdi
    0000004f: 	subq	%r8, %rdx
    00000052: 	jmp	.Ltmp4843 # Offset: 82
    00000054: 	nopl	(%rax) # Size: 4
.Ltmp4842:
    00000058: 	movq	%r8, %rdx
    0000005b: 	jmp	.Ltmp4843 # Offset: 91
DWARF CFI Instructions:
    <empty>
End of Function "_Z24binarysearch_recur_innerISt18_Fwd_list_iteratorIiEilEbT_T0_T1_"

Binary Function "_Z18binarysearch_recurISt18_Fwd_list_iteratorIiEiEbT_S2_T0_" after disassembly {
  Number      : 453
  State       : disassembled
  Address     : 0x29f40
  Size        : 0x160
  MaxSize     : 0x160
  Offset      : 0x29f40
  Section     : .text
  Orc Section : .local.text._Z18binarysearch_recurISt18_Fwd_list_iteratorIiEiEbT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0452:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	movl	%edx, %r9d
    0000000a: 	movq	%rdi, %r10
    0000000d: 	cmpq	%rsi, %rdi
    00000010: 	je	.Ltmp4844 # Offset: 16
    00000012: 	movq	%rdi, %rax
    00000015: 	xorl	%edx, %edx
    00000017: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4845:
    00000020: 	movq	(%rax), %rax
    00000023: 	movq	%rdx, %rdi
    00000026: 	addq	$0x1, %rdx
    0000002a: 	cmpq	%rsi, %rax
    0000002d: 	jne	.Ltmp4845 # Offset: 45
    0000002f: 	movq	%rdx, %rsi
    00000032: 	movq	%r8, %rcx
    00000035: 	sarq	%rsi
    00000038: 	leaq	-0x1(%rsi), %rax
    0000003c: 	je	.Ltmp4846 # Offset: 60
    0000003e: 	nop # Size: 2
.Ltmp4847:
    00000040: 	movq	(%rcx), %rcx
    00000043: 	subq	$0x1, %rax
    00000047: 	jae	.Ltmp4847 # Offset: 71
.Ltmp4846:
    00000049: 	cmpl	0x8(%rcx), %r9d
    0000004d: 	jg	.Ltmp4848 # Offset: 77
    0000004f: 	movl	$0x1, %eax
    00000054: 	jl	.Ltmp4849 # Offset: 84
.Ltmp4853:
    00000056: 	retq # Offset: 86
    00000057: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4844:
    00000060: 	xorl	%eax, %eax
    00000062: 	retq # Offset: 98
    00000063: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4848:
    00000068: 	subq	%rsi, %rdi
    0000006b: 	je	.Ltmp4844 # Offset: 107
    0000006d: 	movq	%rdi, %r8
    00000070: 	movq	(%rcx), %r10
    00000073: 	shrq	$0x3f, %r8
    00000077: 	addq	%rdi, %r8
    0000007a: 	movq	%r10, %rdx
    0000007d: 	sarq	%r8
    00000080: 	leaq	-0x1(%r8), %rax
    00000084: 	je	.Ltmp4850 # Offset: 132
    00000086: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp4851:
    00000090: 	movq	(%rdx), %rdx
    00000093: 	subq	$0x1, %rax
    00000097: 	jae	.Ltmp4851 # Offset: 151
.Ltmp4850:
    00000099: 	cmpl	0x8(%rdx), %r9d
    0000009d: 	jg	.Ltmp4852 # Offset: 157
.Ltmp4859:
    0000009f: 	movl	$0x1, %eax
    000000a4: 	jge	.Ltmp4853 # Offset: 164
    000000a6: 	movq	%r8, %rdx
    000000a9: 	movl	%r9d, %esi
    000000ac: 	movq	%r10, %rdi
    000000af: 	jmp	_Z24binarysearch_recur_innerISt18_Fwd_list_iteratorIiEilEbT_T0_T1_ # TAILCALL  # Offset: 175
    000000b4: 	nopl	(%rax) # Size: 4
.Ltmp4849:
    000000b8: 	testq	%rsi, %rsi
    000000bb: 	je	.Ltmp4844 # Offset: 187
    000000bd: 	sarq	$0x2, %rdx
    000000c1: 	leaq	-0x1(%rdx), %rax
    000000c5: 	je	.Ltmp4854 # Offset: 197
    000000c7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4855:
    000000d0: 	movq	(%r10), %r10
    000000d3: 	subq	$0x1, %rax
    000000d7: 	jae	.Ltmp4855 # Offset: 215
.Ltmp4854:
    000000d9: 	cmpl	0x8(%r10), %r9d
    000000dd: 	jg	.Ltmp4856 # Offset: 221
    000000df: 	movl	$0x1, %eax
    000000e4: 	jge	.Ltmp4853 # Offset: 228
    000000ea: 	movl	%r9d, %esi
    000000ed: 	movq	%r8, %rdi
    000000f0: 	jmp	_Z24binarysearch_recur_innerISt18_Fwd_list_iteratorIiEilEbT_T0_T1_ # TAILCALL  # Offset: 240
.Ltmp4852:
    000000f5: 	movq	(%rdx), %rdx
    000000f8: 	addq	$0x1, %r8
    000000fc: 	movq	%rdx, %r10
    000000ff: 	subq	%r8, %rdi
    00000102: 	je	.Ltmp4844 # Offset: 258
    00000108: 	movq	%rdi, %r8
    0000010b: 	shrq	$0x3f, %r8
    0000010f: 	addq	%rdi, %r8
    00000112: 	sarq	%r8
    00000115: 	leaq	-0x1(%r8), %rax
    00000119: 	je	.Ltmp4857 # Offset: 281
    0000011b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4858:
    00000120: 	movq	(%rdx), %rdx
    00000123: 	subq	$0x1, %rax
    00000127: 	jae	.Ltmp4858 # Offset: 295
.Ltmp4857:
    00000129: 	cmpl	0x8(%rdx), %r9d
    0000012d: 	jle	.Ltmp4859 # Offset: 301
    00000133: 	movq	(%rdx), %r10
    00000136: 	addq	$0x1, %r8
    0000013a: 	movl	%r9d, %esi
    0000013d: 	subq	%r8, %rdi
    00000140: 	movq	%rdi, %rdx
    00000143: 	movq	%r10, %rdi
    00000146: 	jmp	_Z24binarysearch_recur_innerISt18_Fwd_list_iteratorIiEilEbT_T0_T1_ # TAILCALL  # Offset: 326
.Ltmp4856:
    0000014b: 	addq	$0x1, %rdx
    0000014f: 	movq	(%r10), %rdi
    00000152: 	subq	%rdx, %rsi
    00000155: 	movq	%rsi, %rdx
    00000158: 	movl	%r9d, %esi
    0000015b: 	jmp	_Z24binarysearch_recur_innerISt18_Fwd_list_iteratorIiEilEbT_T0_T1_ # TAILCALL  # Offset: 347
DWARF CFI Instructions:
    <empty>
End of Function "_Z18binarysearch_recurISt18_Fwd_list_iteratorIiEiEbT_S2_T0_"

Binary Function "_Z15TestSearchArrayIPfPFS0_S0_S0_fEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 454
  State       : disassembled
  Address     : 0x2a0a0
  Size        : 0x1e5
  MaxSize     : 0x1f0
  Offset      : 0x2a0a0
  Section     : .text
  Orc Section : .local.text._Z15TestSearchArrayIPfPFS0_S0_S0_fEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0453:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rcx, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	movl	$0x1000, %edi
    00000015: 	pushq	%r12
    00000017: 	pushq	%rbp
    00000018: 	pushq	%rbx
    00000019: 	movq	%rsi, %rbx
    0000001c: 	subq	$0x28, %rsp
    00000020: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000027: 	movq	%rdx, 0x10(%rsp)
    0000002c: 	movq	%r8, 0x18(%rsp)
    00000031: 	movb	%r9b, (%rsp)
    00000035: 	callq	_Znwm@PLT # Offset: 53
    0000003a: 	movq	%rax, %r14
    0000003d: 	movl	$0x0, (%rax)
    00000043: 	addq	$0x4, %rax
    00000047: 	leaq	0x1000(%r14), %rsi
    0000004e: 	cmpq	%rsi, %rax
    00000051: 	je	.Ltmp4860 # Offset: 81
    00000053: 	leaq	0xc(%r14), %rdi
    00000057: 	movq	$0x0, 0x4(%r14)
    0000005f: 	movq	$0x0, 0xff8(%r14)
    0000006a: 	andq	$-0x8, %rdi
    0000006e: 	subq	%rdi, %rax
    00000071: 	movq	%rax, %rcx
    00000074: 	xorl	%eax, %eax
    00000076: 	addl	$0xffc, %ecx
    0000007c: 	shrl	$0x3, %ecx
    0000007f: 	rep		stosq	%rax, %es:(%rdi)
.Ltmp4860:
    00000082: 	movabsq	$0x5851f42d4c957f2d, %r8
    0000008c: 	movq	%r14, %rcx
    0000008f: 	movabsq	$0x14057b7ef767814f, %rdi
    00000099: 	nopl	(%rax) # Size: 7
.Ltmp4861:
    000000a0: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000000a7: 	addq	$0x4, %rcx
    000000ab: 	imulq	%r8, %rax
    000000af: 	addq	%rdi, %rax
    000000b2: 	movq	%rax, %rdx
    000000b5: 	movq	%rax, %r9
    000000b8: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000000bf: 	shrq	$0x14, %rdx
    000000c3: 	shlq	$0x17, %r9
    000000c7: 	xorq	%r9, %rdx
    000000ca: 	xorq	%rdx, %rax
    000000cd: 	xorl	%edx, %edx
    000000cf: 	divq	0x10(%rsp)
    000000d4: 	movss	(%r13,%rdx,4), %xmm0
    000000db: 	movss	%xmm0, -0x4(%rcx)
    000000e0: 	cmpq	%rcx, %rsi
    000000e3: 	jne	.Ltmp4861 # Offset: 227
    000000e5: 	callq	clock@PLT # Offset: 229
    000000ea: 	xorl	%r12d, %r12d
    000000ed: 	xorl	%ebp, %ebp
    000000ef: 	movq	%rax, start_time(%rip)
    000000f6: 	movzbl	(%rsp), %eax
    000000fa: 	xorl	$0x1, %eax
    000000fd: 	movb	%al, 0xf(%rsp)
.Ltmp4864:
    00000101: 	leaq	0xc8(%rbp), %rax
    00000108: 	movq	%rax, (%rsp)
    0000010c: 	nopl	(%rax) # Size: 4
.Ltmp4862:
    00000110: 	movq	%rbp, %rax
    00000113: 	movq	%rbx, %rsi
    00000116: 	addq	$0x1, %rbp
    0000011a: 	movq	%r13, %rdi
    0000011d: 	andl	$0x3ff, %eax
    00000122: 	movss	(%r14,%rax,4), %xmm0
    00000128: 	callq	*%r15 # Offset: 296
    0000012b: 	cmpq	%rax, %rbx
    0000012e: 	sete	%al
    00000131: 	andb	0xf(%rsp), %al
    00000135: 	cmovnel	%eax, %r12d
    00000139: 	cmpq	(%rsp), %rbp
    0000013d: 	jne	.Ltmp4862 # Offset: 317
    0000013f: 	callq	clock@PLT # Offset: 319
    00000144: 	movsd	gMinimumTimeTarget(%rip), %xmm1
    0000014c: 	pxor	%xmm0, %xmm0
    00000150: 	movq	%rax, end_time(%rip)
    00000157: 	subq	start_time(%rip), %rax
    0000015e: 	cvtsi2sd	%rax, %xmm0
    00000163: 	divsd	DATAat0x34410(%rip), %xmm0
    0000016b: 	comisd	%xmm0, %xmm1
    0000016f: 	jbe	.Ltmp4863 # Offset: 367
    00000171: 	cmpq	$0x5f5e0ff, %rbp
    00000178: 	jbe	.Ltmp4864 # Offset: 376
.Ltmp4863:
    0000017a: 	movq	0x18(%rsp), %rdx
    0000017f: 	movq	0x10(%rsp), %rdi
    00000184: 	movq	%rbp, %rsi
    00000187: 	callq	_Z13record_resultdmmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 391
    0000018c: 	testb	%r12b, %r12b
    0000018f: 	jne	.Ltmp4865 # Offset: 399
.Ltmp4866:
    00000191: 	addq	$0x28, %rsp
    00000195: 	movq	%r14, %rdi
    00000198: 	movl	$0x1000, %esi
    0000019d: 	popq	%rbx
    0000019e: 	popq	%rbp
    0000019f: 	popq	%r12
    000001a1: 	popq	%r13
    000001a3: 	popq	%r14
    000001a5: 	popq	%r15
    000001a7: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 423
.Ltmp4865:
    000001ac: 	movq	0x18(%rsp), %rax
    000001b1: 	leaq	DATAat0x34137(%rip), %rsi
    000001b8: 	movl	$0x1, %edi
    000001bd: 	movq	(%rax), %rdx
    000001c0: 	xorl	%eax, %eax
    000001c2: 	callq	__printf_chk@PLT # Offset: 450
    000001c7: 	jmp	.Ltmp4866 # Offset: 455
    000001c9: 	endbr64
    000001cd: 	movq	%rax, %rbp
    000001d0: 	movq	%r14, %rdi
    000001d3: 	movl	$0x1000, %esi
    000001d8: 	callq	_ZdlPvm@PLT # Offset: 472
    000001dd: 	movq	%rbp, %rdi
    000001e0: 	callq	_Unwind_Resume@PLT # Offset: 480
DWARF CFI Instructions:
    <empty>
End of Function "_Z15TestSearchArrayIPfPFS0_S0_S0_fEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z18quicksort2_forwardIPfEvT_S1_" after disassembly {
  Number      : 455
  State       : disassembled
  Address     : 0x2a290
  Size        : 0x144
  MaxSize     : 0x150
  Offset      : 0x2a290
  Section     : .text
  Orc Section : .local.text._Z18quicksort2_forwardIPfEvT_S1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0454:
    00000000: 	endbr64
    00000004: 	cmpq	%rsi, %rdi
    00000007: 	je	.Ltmp4867 # Offset: 7
    0000000d: 	leaq	0x4(%rdi), %rcx
    00000011: 	pushq	%r12
    00000013: 	movq	%rdi, %r12
    00000016: 	pushq	%rbp
    00000017: 	movq	%rsi, %rbp
    0000001a: 	pushq	%rbx
    0000001b: 	cmpq	%rcx, %rsi
    0000001e: 	je	.Ltmp4868 # Offset: 30
.Ltmp4875:
    00000024: 	leaq	0x8(%r12), %rax
    00000029: 	cmpq	%rax, %rbp
    0000002c: 	je	.Ltmp4869 # Offset: 44
    00000032: 	movq	(%r12), %xmm1
    00000038: 	movaps	%xmm1, %xmm2
    0000003b: 	movaps	%xmm1, %xmm0
    0000003e: 	shufps	$0xe5, %xmm1, %xmm1
    00000042: 	comiss	%xmm1, %xmm2
    00000045: 	shufps	$0xe1, %xmm0, %xmm0
    00000049: 	jbe	.Ltmp4870 # Offset: 73
    0000004b: 	movlps	%xmm0, (%r12)
    00000050: 	movaps	%xmm1, %xmm0
    00000053: 	movaps	%xmm2, %xmm1
    00000056: 	movaps	%xmm0, %xmm2
.Ltmp4870:
    00000059: 	movss	0x8(%r12), %xmm0
    00000060: 	comiss	%xmm0, %xmm1
    00000063: 	movaps	%xmm0, %xmm4
    00000066: 	movaps	%xmm0, %xmm3
    00000069: 	unpcklps	%xmm2, %xmm4
    0000006c: 	unpcklps	%xmm1, %xmm3
    0000006f: 	jbe	.Ltmp4871 # Offset: 111
    00000071: 	comiss	%xmm0, %xmm2
    00000074: 	movlps	%xmm3, 0x4(%r12)
    0000007a: 	movaps	%xmm0, %xmm1
    0000007d: 	jbe	.Ltmp4871 # Offset: 125
    0000007f: 	movlps	%xmm4, (%r12)
    00000084: 	movaps	%xmm2, %xmm1
.Ltmp4871:
    00000087: 	leaq	0xc(%r12), %rax
    0000008c: 	cmpq	%rax, %rbp
    0000008f: 	je	.Ltmp4868 # Offset: 143
    00000091: 	leaq	0x4(%rcx), %rax
    00000095: 	movq	%rcx, %rbx
    00000098: 	cmpq	%rbp, %rax
    0000009b: 	je	.Ltmp4872 # Offset: 155
    0000009d: 	movl	$0x1, %edx
    000000a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4874:
    000000a8: 	movss	(%rax), %xmm0
    000000ac: 	comiss	%xmm0, %xmm1
    000000af: 	jbe	.Ltmp4873 # Offset: 175
    000000b1: 	movss	(%rbx), %xmm2
    000000b5: 	addq	$0x1, %rdx
    000000b9: 	addq	$0x4, %rbx
    000000bd: 	movss	%xmm2, (%rax)
    000000c1: 	movss	%xmm0, -0x4(%rbx)
.Ltmp4873:
    000000c6: 	addq	$0x4, %rax
    000000ca: 	cmpq	%rbp, %rax
    000000cd: 	jne	.Ltmp4874 # Offset: 205
    000000cf: 	leaq	-0x8(%rbp), %rax
    000000d3: 	subq	%rcx, %rax
    000000d6: 	shrq	$0x2, %rax
    000000da: 	addq	$0x3, %rax
    000000de: 	subq	%rdx, %rax
    000000e1: 	cmpq	%rax, %rdx
    000000e4: 	jbe	.Ltmp4872 # Offset: 228
    000000e6: 	movq	%rbp, %rsi
    000000e9: 	movq	%rbx, %rdi
    000000ec: 	movq	%rbx, %rbp
    000000ef: 	callq	_Z18quicksort2_forwardIPfEvT_S1_ # Offset: 239
.Ltmp4876:
    000000f4: 	cmpq	%r12, %rbp
    000000f7: 	je	.Ltmp4868 # Offset: 247
    000000f9: 	leaq	0x4(%r12), %rcx
    000000fe: 	cmpq	%rbp, %rcx
    00000101: 	jne	.Ltmp4875 # Offset: 257
.Ltmp4868:
    00000107: 	popq	%rbx
    00000108: 	popq	%rbp
    00000109: 	popq	%r12
    0000010b: 	retq # Offset: 267
    0000010c: 	nopl	(%rax) # Size: 4
.Ltmp4872:
    00000110: 	movq	%r12, %rdi
    00000113: 	movq	%rbx, %rsi
    00000116: 	movq	%rbx, %r12
    00000119: 	callq	_Z18quicksort2_forwardIPfEvT_S1_ # Offset: 281
    0000011e: 	jmp	.Ltmp4876 # Offset: 286
.Ltmp4869:
    00000120: 	movq	(%r12), %xmm0
    00000126: 	movaps	%xmm0, %xmm5
    00000129: 	movaps	%xmm0, %xmm2
    0000012c: 	shufps	$0xe5, %xmm5, %xmm5
    00000130: 	comiss	%xmm5, %xmm0
    00000133: 	shufps	$0xe1, %xmm2, %xmm2
    00000137: 	jbe	.Ltmp4868 # Offset: 311
    00000139: 	movlps	%xmm2, (%r12)
    0000013e: 	popq	%rbx
    0000013f: 	popq	%rbp
    00000140: 	popq	%r12
    00000142: 	retq # Offset: 322
.Ltmp4867:
    00000143: 	retq # Offset: 323
DWARF CFI Instructions:
    <empty>
End of Function "_Z18quicksort2_forwardIPfEvT_S1_"

Binary Function "_Z13TestOneSearchIPfPFS0_S0_S0_fEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 456
  State       : disassembled
  Address     : 0x2a3e0
  Size        : 0x3a0
  MaxSize     : 0x3a0
  Offset      : 0x2a3e0
  Section     : .text
  Orc Section : .local.text._Z13TestOneSearchIPfPFS0_S0_S0_fEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0455:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%r8, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rsi, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdx, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rdi, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	subq	$0x68, %rsp
    0000001e: 	movq	%rcx, 0x8(%rsp)
    00000023: 	movq	%fs:0x28, %rax
    0000002c: 	movq	%rax, 0x58(%rsp)
    00000031: 	xorl	%eax, %eax
    00000033: 	cmpq	%rsi, %rdi
    00000036: 	je	.Ltmp4877 # Offset: 54
    00000038: 	leaq	-0x4(%rsi), %rdx
    0000003c: 	movq	%rdi, %rax
    0000003f: 	subq	%rdi, %rdx
    00000042: 	movq	%rdx, %rcx
    00000045: 	shrq	$0x2, %rcx
    00000049: 	addq	$0x1, %rcx
    0000004d: 	cmpq	$0x8, %rdx
    00000051: 	jbe	.Ltmp4878 # Offset: 81
    00000053: 	movq	%rcx, %rdx
    00000056: 	movaps	DATAat0x34560(%rip), %xmm0
    0000005d: 	shrq	$0x2, %rdx
    00000061: 	shlq	$0x4, %rdx
    00000065: 	addq	%rdi, %rdx
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp4879:
    00000070: 	movups	%xmm0, (%rax)
    00000073: 	addq	$0x10, %rax
    00000077: 	cmpq	%rdx, %rax
    0000007a: 	jne	.Ltmp4879 # Offset: 122
    0000007c: 	movq	%rcx, %rdx
    0000007f: 	andq	$-0x4, %rdx
    00000083: 	leaq	(%rbp,%rdx,4), %rax
    00000088: 	cmpq	%rdx, %rcx
    0000008b: 	je	.Ltmp4877 # Offset: 139
.Ltmp4878:
    0000008d: 	movss	DATAat0x34560(%rip), %xmm0
    00000095: 	leaq	0x4(%rax), %rdx
    00000099: 	movss	%xmm0, (%rax)
    0000009d: 	cmpq	%rdx, %r13
    000000a0: 	je	.Ltmp4877 # Offset: 160
    000000a2: 	leaq	0x8(%rax), %rdx
    000000a6: 	movss	%xmm0, 0x4(%rax)
    000000ab: 	cmpq	%rdx, %r13
    000000ae: 	je	.Ltmp4877 # Offset: 174
    000000b0: 	movss	%xmm0, 0x8(%rax)
.Ltmp4877:
    000000b5: 	leaq	0x30(%rsp), %r14
    000000ba: 	leaq	DATAat0x34160(%rip), %rdx
    000000c1: 	movq	%r15, %rsi
    000000c4: 	movzbl	%r9b, %ebx
    000000c8: 	movq	%r14, %rdi
    000000cb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 203
    000000d0: 	movq	0x8(%rsp), %rcx
    000000d5: 	movl	%ebx, %r9d
    000000d8: 	movq	%r14, %r8
    000000db: 	movq	%r12, %rdx
    000000de: 	movq	%r13, %rsi
    000000e1: 	movq	%rbp, %rdi
    000000e4: 	callq	_Z15TestSearchArrayIPfPFS0_S0_S0_fEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 228
    000000e9: 	movq	0x30(%rsp), %rdi
    000000ee: 	leaq	0x40(%rsp), %rax
    000000f3: 	movq	%rax, (%rsp)
    000000f7: 	cmpq	%rax, %rdi
    000000fa: 	je	.Ltmp4880 # Offset: 250
    000000fc: 	movq	0x40(%rsp), %rax
    00000101: 	leaq	0x1(%rax), %rsi
    00000105: 	callq	_ZdlPvm@PLT # Offset: 261
.Ltmp4880:
    0000010a: 	cmpq	$0x9, %r12
    0000010e: 	jbe	.Ltmp4881 # Offset: 270
    00000114: 	movabsq	$-0x3333333333333333, %rdx
    0000011e: 	movq	%r12, %rax
    00000121: 	mulq	%rdx
    00000124: 	shrq	$0x3, %rdx
.Ltmp4898:
    00000128: 	movss	DATAat0x34570(%rip), %xmm1
    00000130: 	movq	%rbp, %rsi
    00000133: 	xorl	%ecx, %ecx
    00000135: 	pxor	%xmm0, %xmm0
    00000139: 	cmpq	$0x0, %r12
    0000013d: 	jbe	.Ltmp4882 # Offset: 317
    0000013f: 	nop # Size: 1
.Ltmp4885:
    00000140: 	xorl	%eax, %eax
    00000142: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4884:
    00000148: 	addq	$0x1, %rax
    0000014c: 	addq	$0x4, %rsi
    00000150: 	addq	$0x1, %rcx
    00000154: 	movss	%xmm0, -0x4(%rsi)
    00000159: 	cmpq	%rdx, %rax
    0000015c: 	jae	.Ltmp4883 # Offset: 348
    0000015e: 	cmpq	%rcx, %r12
    00000161: 	ja	.Ltmp4884 # Offset: 353
.Ltmp4883:
    00000163: 	addss	%xmm1, %xmm0
    00000167: 	cmpq	%rcx, %r12
    0000016a: 	ja	.Ltmp4885 # Offset: 362
.Ltmp4882:
    0000016c: 	movq	(%rsp), %rax
    00000170: 	movq	(%r15), %r9
    00000173: 	movq	0x8(%r15), %r8
    00000177: 	movq	%rax, 0x30(%rsp)
    0000017c: 	movq	%r9, %rax
    0000017f: 	addq	%r8, %rax
    00000182: 	je	.Ltmp4886 # Offset: 386
    00000184: 	testq	%r9, %r9
    00000187: 	je	.Ltmp4887 # Offset: 391
.Ltmp4886:
    0000018d: 	movq	%r8, 0x28(%rsp)
    00000192: 	cmpq	$0xf, %r8
    00000196: 	ja	.Ltmp4888 # Offset: 406
    0000019c: 	cmpq	$0x1, %r8
    000001a0: 	jne	.Ltmp4889 # Offset: 416
    000001a6: 	movzbl	(%r9), %eax
    000001aa: 	movb	%al, 0x40(%rsp)
    000001ae: 	movq	(%rsp), %rax
.Ltmp4897:
    000001b2: 	movq	%r8, 0x38(%rsp)
    000001b7: 	movb	$0x0, (%rax,%r8)
    000001bc: 	movabsq	$0x3fffffffffffffff, %rax
    000001c6: 	subq	0x38(%rsp), %rax
    000001cb: 	cmpq	$0x14, %rax
    000001cf: 	jbe	.Ltmp4890 # Offset: 463
    000001d5: 	movl	$0x15, %edx
    000001da: 	leaq	DATAat0x3416e(%rip), %rsi
    000001e1: 	movq	%r14, %rdi
    000001e4: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 484
    000001e9: 	movq	0x8(%rsp), %rcx
    000001ee: 	movl	%ebx, %r9d
    000001f1: 	movq	%r14, %r8
    000001f4: 	movq	%r12, %rdx
    000001f7: 	movq	%r13, %rsi
    000001fa: 	movq	%rbp, %rdi
    000001fd: 	callq	_Z15TestSearchArrayIPfPFS0_S0_S0_fEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 509
    00000202: 	movq	0x30(%rsp), %rdi
    00000207: 	cmpq	(%rsp), %rdi
    0000020b: 	je	.Ltmp4891 # Offset: 523
    0000020d: 	movq	0x40(%rsp), %rax
    00000212: 	leaq	0x1(%rax), %rsi
    00000216: 	callq	_ZdlPvm@PLT # Offset: 534
.Ltmp4891:
    0000021b: 	cmpq	%r13, %rbp
    0000021e: 	je	.Ltmp4892 # Offset: 542
    00000220: 	leaq	-0x4(%r13), %rcx
    00000224: 	xorl	%eax, %eax
    00000226: 	subq	%rbp, %rcx
    00000229: 	shrq	$0x2, %rcx
    0000022d: 	nopl	(%rax) # Size: 3
.Ltmp4893:
    00000230: 	pxor	%xmm0, %xmm0
    00000234: 	movq	%rax, %rdx
    00000237: 	cvtsi2ss	%rax, %xmm0
    0000023c: 	movss	%xmm0, (%rbp,%rax,4)
    00000242: 	addq	$0x1, %rax
    00000246: 	cmpq	%rcx, %rdx
    00000249: 	jne	.Ltmp4893 # Offset: 585
.Ltmp4892:
    0000024b: 	movq	%r13, %rsi
    0000024e: 	movq	%rbp, %rdi
    00000251: 	callq	_Z18quicksort2_forwardIPfEvT_S1_ # Offset: 593
    00000256: 	leaq	DATAat0x34184(%rip), %rdx
    0000025d: 	movq	%r15, %rsi
    00000260: 	movq	%r14, %rdi
    00000263: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 611
    00000268: 	movq	0x8(%rsp), %rcx
    0000026d: 	movl	%ebx, %r9d
    00000270: 	movq	%r14, %r8
    00000273: 	movq	%r12, %rdx
    00000276: 	movq	%r13, %rsi
    00000279: 	movq	%rbp, %rdi
    0000027c: 	callq	_Z15TestSearchArrayIPfPFS0_S0_S0_fEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 636
    00000281: 	movq	0x30(%rsp), %rdi
    00000286: 	cmpq	(%rsp), %rdi
    0000028a: 	je	.Ltmp4894 # Offset: 650
    0000028c: 	movq	0x40(%rsp), %rax
    00000291: 	leaq	0x1(%rax), %rsi
    00000295: 	callq	_ZdlPvm@PLT # Offset: 661
.Ltmp4894:
    0000029a: 	movq	0x58(%rsp), %rax
    0000029f: 	subq	%fs:0x28, %rax
    000002a8: 	jne	.Ltmp4895 # Offset: 680
    000002ae: 	addq	$0x68, %rsp
    000002b2: 	popq	%rbx
    000002b3: 	popq	%rbp
    000002b4: 	popq	%r12
    000002b6: 	popq	%r13
    000002b8: 	popq	%r14
    000002ba: 	popq	%r15
    000002bc: 	retq # Offset: 700
.Ltmp4889:
    000002bd: 	testq	%r8, %r8
    000002c0: 	jne	.Ltmp4896 # Offset: 704
    000002c2: 	movq	(%rsp), %rax
    000002c6: 	jmp	.Ltmp4897 # Offset: 710
.Ltmp4881:
    000002cb: 	testq	%r12, %r12
    000002ce: 	je	.Ltmp4882 # Offset: 718
    000002d4: 	movl	$0x1, %edx
    000002d9: 	jmp	.Ltmp4898 # Offset: 729
.Ltmp4888:
    000002de: 	movq	%r14, %rdi
    000002e1: 	leaq	0x28(%rsp), %rsi
    000002e6: 	xorl	%edx, %edx
    000002e8: 	movq	%r8, 0x18(%rsp)
    000002ed: 	movq	%r9, 0x10(%rsp)
    000002f2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 754
    000002f7: 	movq	0x10(%rsp), %r9
    000002fc: 	movq	0x18(%rsp), %r8
    00000301: 	movq	%rax, 0x30(%rsp)
    00000306: 	movq	%rax, %rdi
    00000309: 	movq	0x28(%rsp), %rax
    0000030e: 	movq	%rax, 0x40(%rsp)
.Ltmp4899:
    00000313: 	movq	%r8, %rdx
    00000316: 	movq	%r9, %rsi
    00000319: 	callq	memcpy@PLT # Offset: 793
    0000031e: 	movq	0x28(%rsp), %r8
    00000323: 	movq	0x30(%rsp), %rax
    00000328: 	jmp	.Ltmp4897 # Offset: 808
.Ltmp4890:
    0000032d: 	leaq	DATAat0x3414b(%rip), %rdi
    00000334: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 820
.Ltmp4895:
    00000339: 	callq	__stack_chk_fail@PLT # Offset: 825
.Ltmp4896:
    0000033e: 	movq	(%rsp), %rdi
    00000342: 	jmp	.Ltmp4899 # Offset: 834
.Ltmp4887:
    00000344: 	leaq	DATAat0x34008(%rip), %rdi
    0000034b: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 843
    00000350: 	endbr64
.Ltmp4901:
    00000354: 	movq	%rax, %rbp
    00000357: 	jmp	.Ltmp4900 # Offset: 855
    00000359: 	endbr64
    0000035d: 	jmp	.Ltmp4901 # Offset: 861
    0000035f: 	endbr64
    00000363: 	jmp	.Ltmp4901 # Offset: 867
    00000365: 	endbr64
    00000369: 	movq	%rax, %rbp
    0000036c: 	jmp	.Ltmp4902 # Offset: 876
.Ltmp4900:
    0000036e: 	movq	0x30(%rsp), %rdi
    00000373: 	cmpq	(%rsp), %rdi
    00000377: 	je	.Ltmp4903 # Offset: 887
.Ltmp4904:
    00000379: 	movq	0x40(%rsp), %rax
    0000037e: 	leaq	0x1(%rax), %rsi
    00000382: 	callq	_ZdlPvm@PLT # Offset: 898
.Ltmp4903:
    00000387: 	movq	%rbp, %rdi
    0000038a: 	callq	_Unwind_Resume@PLT # Offset: 906
.Ltmp4902:
    0000038f: 	movq	0x30(%rsp), %rdi
    00000394: 	leaq	0x40(%rsp), %rax
    00000399: 	cmpq	%rax, %rdi
    0000039c: 	jne	.Ltmp4904 # Offset: 924
    0000039e: 	jmp	.Ltmp4903 # Offset: 926
DWARF CFI Instructions:
    <empty>
End of Function "_Z13TestOneSearchIPfPFS0_S0_S0_fEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z15TestSearchArrayIPfPFbS0_S0_fEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 457
  State       : disassembled
  Address     : 0x2a780
  Size        : 0x1d8
  MaxSize     : 0x1e0
  Offset      : 0x2a780
  Section     : .text
  Orc Section : .local.text._Z15TestSearchArrayIPfPFbS0_S0_fEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0456:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rcx, %r15
    00000009: 	pushq	%r14
    0000000b: 	movq	%rsi, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %r12
    00000015: 	movl	$0x1000, %edi
    0000001a: 	pushq	%rbp
    0000001b: 	pushq	%rbx
    0000001c: 	subq	$0x28, %rsp
    00000020: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000027: 	movq	%rdx, 0x10(%rsp)
    0000002c: 	movq	%r8, 0x18(%rsp)
    00000031: 	movb	%r9b, 0xf(%rsp)
    00000036: 	callq	_Znwm@PLT # Offset: 54
    0000003b: 	movq	%rax, %r13
    0000003e: 	movl	$0x0, (%rax)
    00000044: 	addq	$0x4, %rax
    00000048: 	leaq	0x1000(%r13), %rsi
    0000004f: 	cmpq	%rsi, %rax
    00000052: 	je	.Ltmp4905 # Offset: 82
    00000054: 	leaq	0xc(%r13), %rdi
    00000058: 	movq	$0x0, 0x4(%r13)
    00000060: 	movq	$0x0, 0xff8(%r13)
    0000006b: 	andq	$-0x8, %rdi
    0000006f: 	subq	%rdi, %rax
    00000072: 	movq	%rax, %rcx
    00000075: 	xorl	%eax, %eax
    00000077: 	addl	$0xffc, %ecx
    0000007d: 	shrl	$0x3, %ecx
    00000080: 	rep		stosq	%rax, %es:(%rdi)
.Ltmp4905:
    00000083: 	movabsq	$0x5851f42d4c957f2d, %r8
    0000008d: 	movq	%r13, %rcx
    00000090: 	movabsq	$0x14057b7ef767814f, %rdi
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4906:
    000000a0: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000000a7: 	addq	$0x4, %rcx
    000000ab: 	imulq	%r8, %rax
    000000af: 	addq	%rdi, %rax
    000000b2: 	movq	%rax, %rdx
    000000b5: 	movq	%rax, %r9
    000000b8: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000000bf: 	shrq	$0x14, %rdx
    000000c3: 	shlq	$0x17, %r9
    000000c7: 	xorq	%r9, %rdx
    000000ca: 	xorq	%rdx, %rax
    000000cd: 	xorl	%edx, %edx
    000000cf: 	divq	0x10(%rsp)
    000000d4: 	movss	(%r12,%rdx,4), %xmm0
    000000da: 	movss	%xmm0, -0x4(%rcx)
    000000df: 	cmpq	%rcx, %rsi
    000000e2: 	jne	.Ltmp4906 # Offset: 226
    000000e4: 	callq	clock@PLT # Offset: 228
    000000e9: 	xorl	%ebx, %ebx
    000000eb: 	xorl	%ebp, %ebp
    000000ed: 	movq	%rax, start_time(%rip)
.Ltmp4910:
    000000f4: 	leaq	0xc8(%rbp), %rax
    000000fb: 	movq	%rax, (%rsp)
    000000ff: 	nop # Size: 1
.Ltmp4908:
    00000100: 	movq	%rbp, %rax
    00000103: 	movq	%r14, %rsi
    00000106: 	addq	$0x1, %rbp
    0000010a: 	movq	%r12, %rdi
    0000010d: 	andl	$0x3ff, %eax
    00000112: 	movss	(%r13,%rax,4), %xmm0
    00000119: 	callq	*%r15 # Offset: 281
    0000011c: 	testb	%al, %al
    0000011e: 	jne	.Ltmp4907 # Offset: 286
    00000120: 	cmpb	$0x0, 0xf(%rsp)
    00000125: 	movl	$0x1, %eax
    0000012a: 	cmovel	%eax, %ebx
.Ltmp4907:
    0000012d: 	cmpq	(%rsp), %rbp
    00000131: 	jne	.Ltmp4908 # Offset: 305
    00000133: 	callq	clock@PLT # Offset: 307
    00000138: 	movsd	gMinimumTimeTarget(%rip), %xmm1
    00000140: 	pxor	%xmm0, %xmm0
    00000144: 	movq	%rax, end_time(%rip)
    0000014b: 	subq	start_time(%rip), %rax
    00000152: 	cvtsi2sd	%rax, %xmm0
    00000157: 	divsd	DATAat0x34410(%rip), %xmm0
    0000015f: 	comisd	%xmm0, %xmm1
    00000163: 	jbe	.Ltmp4909 # Offset: 355
    00000165: 	cmpq	$0x5f5e0ff, %rbp
    0000016c: 	jbe	.Ltmp4910 # Offset: 364
.Ltmp4909:
    0000016e: 	movq	0x18(%rsp), %rdx
    00000173: 	movq	0x10(%rsp), %rdi
    00000178: 	movq	%rbp, %rsi
    0000017b: 	callq	_Z13record_resultdmmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 379
    00000180: 	testb	%bl, %bl
    00000182: 	jne	.Ltmp4911 # Offset: 386
.Ltmp4912:
    00000184: 	addq	$0x28, %rsp
    00000188: 	movq	%r13, %rdi
    0000018b: 	movl	$0x1000, %esi
    00000190: 	popq	%rbx
    00000191: 	popq	%rbp
    00000192: 	popq	%r12
    00000194: 	popq	%r13
    00000196: 	popq	%r14
    00000198: 	popq	%r15
    0000019a: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 410
.Ltmp4911:
    0000019f: 	movq	0x18(%rsp), %rax
    000001a4: 	leaq	DATAat0x34137(%rip), %rsi
    000001ab: 	movl	$0x1, %edi
    000001b0: 	movq	(%rax), %rdx
    000001b3: 	xorl	%eax, %eax
    000001b5: 	callq	__printf_chk@PLT # Offset: 437
    000001ba: 	jmp	.Ltmp4912 # Offset: 442
    000001bc: 	endbr64
    000001c0: 	movq	%rax, %rbp
    000001c3: 	movq	%r13, %rdi
    000001c6: 	movl	$0x1000, %esi
    000001cb: 	callq	_ZdlPvm@PLT # Offset: 459
    000001d0: 	movq	%rbp, %rdi
    000001d3: 	callq	_Unwind_Resume@PLT # Offset: 467
DWARF CFI Instructions:
    <empty>
End of Function "_Z15TestSearchArrayIPfPFbS0_S0_fEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z13TestOneSearchIPfPFbS0_S0_fEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 458
  State       : disassembled
  Address     : 0x2a960
  Size        : 0x39f
  MaxSize     : 0x3a0
  Offset      : 0x2a960
  Section     : .text
  Orc Section : .local.text._Z13TestOneSearchIPfPFbS0_S0_fEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0457:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%r8, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rsi, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdx, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rdi, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	subq	$0x68, %rsp
    0000001e: 	movq	%rcx, 0x10(%rsp)
    00000023: 	movq	%fs:0x28, %rax
    0000002c: 	movq	%rax, 0x58(%rsp)
    00000031: 	xorl	%eax, %eax
    00000033: 	cmpq	%rsi, %rdi
    00000036: 	je	.Ltmp4913 # Offset: 54
    00000038: 	leaq	-0x4(%rsi), %rdx
    0000003c: 	movq	%rdi, %rax
    0000003f: 	subq	%rdi, %rdx
    00000042: 	movq	%rdx, %rcx
    00000045: 	shrq	$0x2, %rcx
    00000049: 	addq	$0x1, %rcx
    0000004d: 	cmpq	$0x8, %rdx
    00000051: 	jbe	.Ltmp4914 # Offset: 81
    00000053: 	movq	%rcx, %rdx
    00000056: 	movaps	DATAat0x34560(%rip), %xmm0
    0000005d: 	shrq	$0x2, %rdx
    00000061: 	shlq	$0x4, %rdx
    00000065: 	addq	%rdi, %rdx
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp4915:
    00000070: 	movups	%xmm0, (%rax)
    00000073: 	addq	$0x10, %rax
    00000077: 	cmpq	%rdx, %rax
    0000007a: 	jne	.Ltmp4915 # Offset: 122
    0000007c: 	movq	%rcx, %rdx
    0000007f: 	andq	$-0x4, %rdx
    00000083: 	leaq	(%rbp,%rdx,4), %rax
    00000088: 	cmpq	%rcx, %rdx
    0000008b: 	je	.Ltmp4913 # Offset: 139
.Ltmp4914:
    0000008d: 	movss	DATAat0x34560(%rip), %xmm0
    00000095: 	leaq	0x4(%rax), %rdx
    00000099: 	movss	%xmm0, (%rax)
    0000009d: 	cmpq	%rdx, %r13
    000000a0: 	je	.Ltmp4913 # Offset: 160
    000000a2: 	leaq	0x8(%rax), %rdx
    000000a6: 	movss	%xmm0, 0x4(%rax)
    000000ab: 	cmpq	%rdx, %r13
    000000ae: 	je	.Ltmp4913 # Offset: 174
    000000b0: 	movss	%xmm0, 0x8(%rax)
.Ltmp4913:
    000000b5: 	leaq	0x30(%rsp), %r14
    000000ba: 	leaq	DATAat0x34160(%rip), %rdx
    000000c1: 	movq	%r15, %rsi
    000000c4: 	movzbl	%r9b, %ebx
    000000c8: 	movq	%r14, %rdi
    000000cb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 203
    000000d0: 	movq	0x10(%rsp), %rcx
    000000d5: 	movl	%ebx, %r9d
    000000d8: 	movq	%r14, %r8
    000000db: 	movq	%r12, %rdx
    000000de: 	movq	%r13, %rsi
    000000e1: 	movq	%rbp, %rdi
    000000e4: 	callq	_Z15TestSearchArrayIPfPFbS0_S0_fEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 228
    000000e9: 	movq	0x30(%rsp), %rdi
    000000ee: 	leaq	0x40(%rsp), %rax
    000000f3: 	movq	%rax, 0x8(%rsp)
    000000f8: 	cmpq	%rax, %rdi
    000000fb: 	je	.Ltmp4916 # Offset: 251
    000000fd: 	movq	0x40(%rsp), %rax
    00000102: 	leaq	0x1(%rax), %rsi
    00000106: 	callq	_ZdlPvm@PLT # Offset: 262
.Ltmp4916:
    0000010b: 	cmpq	$0x9, %r12
    0000010f: 	jbe	.Ltmp4917 # Offset: 271
    00000115: 	movabsq	$-0x3333333333333333, %rdx
    0000011f: 	movq	%r12, %rax
    00000122: 	mulq	%rdx
    00000125: 	shrq	$0x3, %rdx
.Ltmp4934:
    00000129: 	movss	DATAat0x34570(%rip), %xmm1
    00000131: 	movq	%rbp, %rsi
    00000134: 	xorl	%ecx, %ecx
    00000136: 	pxor	%xmm0, %xmm0
    0000013a: 	cmpq	$0x0, %r12
    0000013e: 	jbe	.Ltmp4918 # Offset: 318
.Ltmp4921:
    00000140: 	xorl	%eax, %eax
    00000142: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4920:
    00000148: 	addq	$0x1, %rax
    0000014c: 	addq	$0x4, %rsi
    00000150: 	addq	$0x1, %rcx
    00000154: 	movss	%xmm0, -0x4(%rsi)
    00000159: 	cmpq	%rdx, %rax
    0000015c: 	jae	.Ltmp4919 # Offset: 348
    0000015e: 	cmpq	%rcx, %r12
    00000161: 	ja	.Ltmp4920 # Offset: 353
.Ltmp4919:
    00000163: 	addss	%xmm1, %xmm0
    00000167: 	cmpq	%rcx, %r12
    0000016a: 	ja	.Ltmp4921 # Offset: 362
.Ltmp4918:
    0000016c: 	leaq	DATAat0x3416e(%rip), %rdx
    00000173: 	movq	%r15, %rsi
    00000176: 	movq	%r14, %rdi
    00000179: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 377
    0000017e: 	movq	0x10(%rsp), %rcx
    00000183: 	movl	%ebx, %r9d
    00000186: 	movq	%r14, %r8
    00000189: 	movq	%r12, %rdx
    0000018c: 	movq	%r13, %rsi
    0000018f: 	movq	%rbp, %rdi
    00000192: 	callq	_Z15TestSearchArrayIPfPFbS0_S0_fEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 402
    00000197: 	movq	0x30(%rsp), %rdi
    0000019c: 	cmpq	0x8(%rsp), %rdi
    000001a1: 	je	.Ltmp4922 # Offset: 417
    000001a3: 	movq	0x40(%rsp), %rax
    000001a8: 	leaq	0x1(%rax), %rsi
    000001ac: 	callq	_ZdlPvm@PLT # Offset: 428
.Ltmp4922:
    000001b1: 	cmpq	%r13, %rbp
    000001b4: 	je	.Ltmp4923 # Offset: 436
    000001b6: 	leaq	-0x4(%r13), %rcx
    000001ba: 	xorl	%eax, %eax
    000001bc: 	subq	%rbp, %rcx
    000001bf: 	shrq	$0x2, %rcx
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4924:
    000001c8: 	pxor	%xmm0, %xmm0
    000001cc: 	movq	%rax, %rdx
    000001cf: 	cvtsi2ss	%rax, %xmm0
    000001d4: 	movss	%xmm0, (%rbp,%rax,4)
    000001da: 	addq	$0x1, %rax
    000001de: 	cmpq	%rcx, %rdx
    000001e1: 	jne	.Ltmp4924 # Offset: 481
.Ltmp4923:
    000001e3: 	movq	%r13, %rsi
    000001e6: 	movq	%rbp, %rdi
    000001e9: 	callq	_Z18quicksort2_forwardIPfEvT_S1_ # Offset: 489
    000001ee: 	movq	0x8(%rsp), %rax
    000001f3: 	movq	(%r15), %r8
    000001f6: 	movq	0x8(%r15), %r15
    000001fa: 	movq	%rax, 0x30(%rsp)
    000001ff: 	movq	%r8, %rax
    00000202: 	addq	%r15, %rax
    00000205: 	je	.Ltmp4925 # Offset: 517
    00000207: 	testq	%r8, %r8
    0000020a: 	je	.Ltmp4926 # Offset: 522
.Ltmp4925:
    00000210: 	movq	%r15, 0x28(%rsp)
    00000215: 	cmpq	$0xf, %r15
    00000219: 	ja	.Ltmp4927 # Offset: 537
    0000021f: 	cmpq	$0x1, %r15
    00000223: 	jne	.Ltmp4928 # Offset: 547
    00000229: 	movzbl	(%r8), %eax
    0000022d: 	movb	%al, 0x40(%rsp)
    00000231: 	movq	0x8(%rsp), %rax
.Ltmp4933:
    00000236: 	movq	%r15, 0x38(%rsp)
    0000023b: 	movb	$0x0, (%rax,%r15)
    00000240: 	movabsq	$0x3fffffffffffffff, %rax
    0000024a: 	subq	0x38(%rsp), %rax
    0000024f: 	cmpq	$0x9, %rax
    00000253: 	jbe	.Ltmp4929 # Offset: 595
    00000259: 	movl	$0xa, %edx
    0000025e: 	leaq	DATAat0x34184(%rip), %rsi
    00000265: 	movq	%r14, %rdi
    00000268: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 616
    0000026d: 	movq	0x10(%rsp), %rcx
    00000272: 	movl	%ebx, %r9d
    00000275: 	movq	%r14, %r8
    00000278: 	movq	%r12, %rdx
    0000027b: 	movq	%r13, %rsi
    0000027e: 	movq	%rbp, %rdi
    00000281: 	callq	_Z15TestSearchArrayIPfPFbS0_S0_fEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 641
    00000286: 	movq	0x30(%rsp), %rdi
    0000028b: 	cmpq	0x8(%rsp), %rdi
    00000290: 	je	.Ltmp4930 # Offset: 656
    00000292: 	movq	0x40(%rsp), %rax
    00000297: 	leaq	0x1(%rax), %rsi
    0000029b: 	callq	_ZdlPvm@PLT # Offset: 667
.Ltmp4930:
    000002a0: 	movq	0x58(%rsp), %rax
    000002a5: 	subq	%fs:0x28, %rax
    000002ae: 	jne	.Ltmp4931 # Offset: 686
    000002b4: 	addq	$0x68, %rsp
    000002b8: 	popq	%rbx
    000002b9: 	popq	%rbp
    000002ba: 	popq	%r12
    000002bc: 	popq	%r13
    000002be: 	popq	%r14
    000002c0: 	popq	%r15
    000002c2: 	retq # Offset: 706
.Ltmp4928:
    000002c3: 	testq	%r15, %r15
    000002c6: 	jne	.Ltmp4932 # Offset: 710
    000002c8: 	movq	0x8(%rsp), %rax
    000002cd: 	jmp	.Ltmp4933 # Offset: 717
.Ltmp4917:
    000002d2: 	testq	%r12, %r12
    000002d5: 	je	.Ltmp4918 # Offset: 725
    000002db: 	movl	$0x1, %edx
    000002e0: 	jmp	.Ltmp4934 # Offset: 736
.Ltmp4927:
    000002e5: 	movq	%r14, %rdi
    000002e8: 	leaq	0x28(%rsp), %rsi
    000002ed: 	xorl	%edx, %edx
    000002ef: 	movq	%r8, 0x18(%rsp)
    000002f4: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 756
    000002f9: 	movq	0x18(%rsp), %r8
    000002fe: 	movq	%rax, 0x30(%rsp)
    00000303: 	movq	%rax, %rdi
    00000306: 	movq	0x28(%rsp), %rax
    0000030b: 	movq	%rax, 0x40(%rsp)
.Ltmp4935:
    00000310: 	movq	%r15, %rdx
    00000313: 	movq	%r8, %rsi
    00000316: 	callq	memcpy@PLT # Offset: 790
    0000031b: 	movq	0x28(%rsp), %r15
    00000320: 	movq	0x30(%rsp), %rax
    00000325: 	jmp	.Ltmp4933 # Offset: 805
.Ltmp4929:
    0000032a: 	leaq	DATAat0x3414b(%rip), %rdi
    00000331: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 817
.Ltmp4931:
    00000336: 	callq	__stack_chk_fail@PLT # Offset: 822
.Ltmp4932:
    0000033b: 	movq	0x8(%rsp), %rdi
    00000340: 	jmp	.Ltmp4935 # Offset: 832
.Ltmp4926:
    00000342: 	leaq	DATAat0x34008(%rip), %rdi
    00000349: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 841
    0000034e: 	endbr64
.Ltmp4937:
    00000352: 	movq	%rax, %rbp
    00000355: 	jmp	.Ltmp4936 # Offset: 853
    00000357: 	endbr64
    0000035b: 	jmp	.Ltmp4937 # Offset: 859
    0000035d: 	endbr64
    00000361: 	jmp	.Ltmp4937 # Offset: 865
    00000363: 	endbr64
    00000367: 	movq	%rax, %rbp
    0000036a: 	jmp	.Ltmp4938 # Offset: 874
.Ltmp4936:
    0000036c: 	movq	0x30(%rsp), %rdi
    00000371: 	cmpq	0x8(%rsp), %rdi
    00000376: 	je	.Ltmp4939 # Offset: 886
.Ltmp4940:
    00000378: 	movq	0x40(%rsp), %rax
    0000037d: 	leaq	0x1(%rax), %rsi
    00000381: 	callq	_ZdlPvm@PLT # Offset: 897
.Ltmp4939:
    00000386: 	movq	%rbp, %rdi
    00000389: 	callq	_Unwind_Resume@PLT # Offset: 905
.Ltmp4938:
    0000038e: 	movq	0x30(%rsp), %rdi
    00000393: 	leaq	0x40(%rsp), %rax
    00000398: 	cmpq	%rax, %rdi
    0000039b: 	jne	.Ltmp4940 # Offset: 923
    0000039d: 	jmp	.Ltmp4939 # Offset: 925
DWARF CFI Instructions:
    <empty>
End of Function "_Z13TestOneSearchIPfPFbS0_S0_fEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z16TestOneContainerIPfEvT_S1_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 459
  State       : disassembled
  Address     : 0x2ad00
  Size        : 0x4de
  MaxSize     : 0x4e0
  Offset      : 0x2ad00
  Section     : .text
  Orc Section : .local.text._Z16TestOneContainerIPfEvT_S1_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0458:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdx, %r15
    00000009: 	leaq	DATAat0x3418f(%rip), %rdx
    00000010: 	pushq	%r14
    00000012: 	movq	%rsi, %r14
    00000015: 	movq	%rcx, %rsi
    00000018: 	pushq	%r13
    0000001a: 	movq	%rdi, %r13
    0000001d: 	pushq	%r12
    0000001f: 	movq	%rcx, %r12
    00000022: 	pushq	%rbp
    00000023: 	pushq	%rbx
    00000024: 	subq	$0x38, %rsp
    00000028: 	movq	%fs:0x28, %rax
    00000031: 	movq	%rax, 0x28(%rsp)
    00000036: 	xorl	%eax, %eax
    00000038: 	movq	%rsp, %rbp
    0000003b: 	movq	%rbp, %rdi
    0000003e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 62
    00000043: 	xorl	%r9d, %r9d
    00000046: 	movq	%rbp, %r8
    00000049: 	movq	%r15, %rdx
    0000004c: 	leaq	_Z14std_lowerboundIPffET_S1_S1_T0_(%rip), %rcx
    00000053: 	movq	%r14, %rsi
    00000056: 	movq	%r13, %rdi
    00000059: 	callq	_Z13TestOneSearchIPfPFS0_S0_S0_fEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 89
    0000005e: 	movq	(%rsp), %rdi
    00000062: 	leaq	0x10(%rsp), %rbx
    00000067: 	cmpq	%rbx, %rdi
    0000006a: 	je	.Ltmp4941 # Offset: 106
    0000006c: 	movq	0x10(%rsp), %rax
    00000071: 	leaq	0x1(%rax), %rsi
    00000075: 	callq	_ZdlPvm@PLT # Offset: 117
.Ltmp4941:
    0000007a: 	leaq	DATAat0x341a1(%rip), %rdx
    00000081: 	movq	%r12, %rsi
    00000084: 	movq	%rbp, %rdi
    00000087: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 135
    0000008c: 	xorl	%r9d, %r9d
    0000008f: 	movq	%rbp, %r8
    00000092: 	movq	%r15, %rdx
    00000095: 	leaq	_Z12lower_bound1IPffET_S1_S1_T0_(%rip), %rcx
    0000009c: 	movq	%r14, %rsi
    0000009f: 	movq	%r13, %rdi
    000000a2: 	callq	_Z13TestOneSearchIPfPFS0_S0_S0_fEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 162
    000000a7: 	movq	(%rsp), %rdi
    000000ab: 	cmpq	%rbx, %rdi
    000000ae: 	je	.Ltmp4942 # Offset: 174
    000000b0: 	movq	0x10(%rsp), %rax
    000000b5: 	leaq	0x1(%rax), %rsi
    000000b9: 	callq	_ZdlPvm@PLT # Offset: 185
.Ltmp4942:
    000000be: 	leaq	DATAat0x341af(%rip), %rdx
    000000c5: 	movq	%r12, %rsi
    000000c8: 	movq	%rbp, %rdi
    000000cb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 203
    000000d0: 	xorl	%r9d, %r9d
    000000d3: 	movq	%rbp, %r8
    000000d6: 	movq	%r15, %rdx
    000000d9: 	leaq	_Z12lower_bound2IPffET_S1_S1_T0_(%rip), %rcx
    000000e0: 	movq	%r14, %rsi
    000000e3: 	movq	%r13, %rdi
    000000e6: 	callq	_Z13TestOneSearchIPfPFS0_S0_S0_fEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 230
    000000eb: 	movq	(%rsp), %rdi
    000000ef: 	cmpq	%rbx, %rdi
    000000f2: 	je	.Ltmp4943 # Offset: 242
    000000f4: 	movq	0x10(%rsp), %rax
    000000f9: 	leaq	0x1(%rax), %rsi
    000000fd: 	callq	_ZdlPvm@PLT # Offset: 253
.Ltmp4943:
    00000102: 	leaq	DATAat0x341bd(%rip), %rdx
    00000109: 	movq	%r12, %rsi
    0000010c: 	movq	%rbp, %rdi
    0000010f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 271
    00000114: 	xorl	%r9d, %r9d
    00000117: 	movq	%rbp, %r8
    0000011a: 	movq	%r15, %rdx
    0000011d: 	leaq	_Z17lower_bound_recurIPffET_S1_S1_T0_(%rip), %rcx
    00000124: 	movq	%r14, %rsi
    00000127: 	movq	%r13, %rdi
    0000012a: 	callq	_Z13TestOneSearchIPfPFS0_S0_S0_fEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 298
    0000012f: 	movq	(%rsp), %rdi
    00000133: 	cmpq	%rbx, %rdi
    00000136: 	je	.Ltmp4944 # Offset: 310
    00000138: 	movq	0x10(%rsp), %rax
    0000013d: 	leaq	0x1(%rax), %rsi
    00000141: 	callq	_ZdlPvm@PLT # Offset: 321
.Ltmp4944:
    00000146: 	leaq	DATAat0x341d4(%rip), %rdx
    0000014d: 	movq	%r12, %rsi
    00000150: 	movq	%rbp, %rdi
    00000153: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 339
    00000158: 	movq	%rbp, %r8
    0000015b: 	movq	%r15, %rdx
    0000015e: 	movq	%r14, %rsi
    00000161: 	movl	$0x1, %r9d
    00000167: 	leaq	_Z14std_upperboundIPffET_S1_S1_T0_(%rip), %rcx
    0000016e: 	movq	%r13, %rdi
    00000171: 	callq	_Z13TestOneSearchIPfPFS0_S0_S0_fEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 369
    00000176: 	movq	(%rsp), %rdi
    0000017a: 	cmpq	%rbx, %rdi
    0000017d: 	je	.Ltmp4945 # Offset: 381
    0000017f: 	movq	0x10(%rsp), %rax
    00000184: 	leaq	0x1(%rax), %rsi
    00000188: 	callq	_ZdlPvm@PLT # Offset: 392
.Ltmp4945:
    0000018d: 	leaq	DATAat0x341e6(%rip), %rdx
    00000194: 	movq	%r12, %rsi
    00000197: 	movq	%rbp, %rdi
    0000019a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 410
    0000019f: 	movq	%rbp, %r8
    000001a2: 	movq	%r15, %rdx
    000001a5: 	movq	%r14, %rsi
    000001a8: 	movl	$0x1, %r9d
    000001ae: 	leaq	_Z12upper_bound1IPffET_S1_S1_T0_(%rip), %rcx
    000001b5: 	movq	%r13, %rdi
    000001b8: 	callq	_Z13TestOneSearchIPfPFS0_S0_S0_fEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 440
    000001bd: 	movq	(%rsp), %rdi
    000001c1: 	cmpq	%rbx, %rdi
    000001c4: 	je	.Ltmp4946 # Offset: 452
    000001c6: 	movq	0x10(%rsp), %rax
    000001cb: 	leaq	0x1(%rax), %rsi
    000001cf: 	callq	_ZdlPvm@PLT # Offset: 463
.Ltmp4946:
    000001d4: 	leaq	DATAat0x341f4(%rip), %rdx
    000001db: 	movq	%r12, %rsi
    000001de: 	movq	%rbp, %rdi
    000001e1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 481
    000001e6: 	movq	%rbp, %r8
    000001e9: 	movq	%r15, %rdx
    000001ec: 	movq	%r14, %rsi
    000001ef: 	movl	$0x1, %r9d
    000001f5: 	leaq	_Z12upper_bound2IPffET_S1_S1_T0_(%rip), %rcx
    000001fc: 	movq	%r13, %rdi
    000001ff: 	callq	_Z13TestOneSearchIPfPFS0_S0_S0_fEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 511
    00000204: 	movq	(%rsp), %rdi
    00000208: 	cmpq	%rbx, %rdi
    0000020b: 	je	.Ltmp4947 # Offset: 523
    0000020d: 	movq	0x10(%rsp), %rax
    00000212: 	leaq	0x1(%rax), %rsi
    00000216: 	callq	_ZdlPvm@PLT # Offset: 534
.Ltmp4947:
    0000021b: 	leaq	DATAat0x34202(%rip), %rdx
    00000222: 	movq	%r12, %rsi
    00000225: 	movq	%rbp, %rdi
    00000228: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 552
    0000022d: 	movq	%rbp, %r8
    00000230: 	movq	%r15, %rdx
    00000233: 	movq	%r14, %rsi
    00000236: 	movl	$0x1, %r9d
    0000023c: 	leaq	_Z17upper_bound_recurIPffET_S1_S1_T0_(%rip), %rcx
    00000243: 	movq	%r13, %rdi
    00000246: 	callq	_Z13TestOneSearchIPfPFS0_S0_S0_fEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 582
    0000024b: 	movq	(%rsp), %rdi
    0000024f: 	cmpq	%rbx, %rdi
    00000252: 	je	.Ltmp4948 # Offset: 594
    00000254: 	movq	0x10(%rsp), %rax
    00000259: 	leaq	0x1(%rax), %rsi
    0000025d: 	callq	_ZdlPvm@PLT # Offset: 605
.Ltmp4948:
    00000262: 	leaq	DATAat0x34219(%rip), %rdx
    00000269: 	movq	%r12, %rsi
    0000026c: 	movq	%rbp, %rdi
    0000026f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 623
    00000274: 	xorl	%r9d, %r9d
    00000277: 	movq	%rbp, %r8
    0000027a: 	movq	%r15, %rdx
    0000027d: 	leaq	_Z16std_binarysearchIPffEbT_S1_T0_(%rip), %rcx
    00000284: 	movq	%r14, %rsi
    00000287: 	movq	%r13, %rdi
    0000028a: 	callq	_Z13TestOneSearchIPfPFbS0_S0_fEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 650
    0000028f: 	movq	(%rsp), %rdi
    00000293: 	cmpq	%rbx, %rdi
    00000296: 	je	.Ltmp4949 # Offset: 662
    00000298: 	movq	0x10(%rsp), %rax
    0000029d: 	leaq	0x1(%rax), %rsi
    000002a1: 	callq	_ZdlPvm@PLT # Offset: 673
.Ltmp4949:
    000002a6: 	leaq	DATAat0x3422d(%rip), %rdx
    000002ad: 	movq	%r12, %rsi
    000002b0: 	movq	%rbp, %rdi
    000002b3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 691
    000002b8: 	xorl	%r9d, %r9d
    000002bb: 	movq	%rbp, %r8
    000002be: 	movq	%r15, %rdx
    000002c1: 	leaq	_Z13binarysearch1IPffEbT_S1_T0_(%rip), %rcx
    000002c8: 	movq	%r14, %rsi
    000002cb: 	movq	%r13, %rdi
    000002ce: 	callq	_Z13TestOneSearchIPfPFbS0_S0_fEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 718
    000002d3: 	movq	(%rsp), %rdi
    000002d7: 	cmpq	%rbx, %rdi
    000002da: 	je	.Ltmp4950 # Offset: 730
    000002dc: 	movq	0x10(%rsp), %rax
    000002e1: 	leaq	0x1(%rax), %rsi
    000002e5: 	callq	_ZdlPvm@PLT # Offset: 741
.Ltmp4950:
    000002ea: 	leaq	DATAat0x3423d(%rip), %rdx
    000002f1: 	movq	%r12, %rsi
    000002f4: 	movq	%rbp, %rdi
    000002f7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 759
    000002fc: 	xorl	%r9d, %r9d
    000002ff: 	movq	%rbp, %r8
    00000302: 	movq	%r15, %rdx
    00000305: 	leaq	_Z13binarysearch2IPffEbT_S1_T0_(%rip), %rcx
    0000030c: 	movq	%r14, %rsi
    0000030f: 	movq	%r13, %rdi
    00000312: 	callq	_Z13TestOneSearchIPfPFbS0_S0_fEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 786
    00000317: 	movq	(%rsp), %rdi
    0000031b: 	cmpq	%rbx, %rdi
    0000031e: 	je	.Ltmp4951 # Offset: 798
    00000320: 	movq	0x10(%rsp), %rax
    00000325: 	leaq	0x1(%rax), %rsi
    00000329: 	callq	_ZdlPvm@PLT # Offset: 809
.Ltmp4951:
    0000032e: 	leaq	DATAat0x3424d(%rip), %rdx
    00000335: 	movq	%r12, %rsi
    00000338: 	movq	%rbp, %rdi
    0000033b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 827
    00000340: 	xorl	%r9d, %r9d
    00000343: 	movq	%rbp, %r8
    00000346: 	movq	%r15, %rdx
    00000349: 	leaq	_Z13binarysearch3IPffEbT_S1_T0_(%rip), %rcx
    00000350: 	movq	%r14, %rsi
    00000353: 	movq	%r13, %rdi
    00000356: 	callq	_Z13TestOneSearchIPfPFbS0_S0_fEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 854
    0000035b: 	movq	(%rsp), %rdi
    0000035f: 	cmpq	%rbx, %rdi
    00000362: 	je	.Ltmp4952 # Offset: 866
    00000364: 	movq	0x10(%rsp), %rax
    00000369: 	leaq	0x1(%rax), %rsi
    0000036d: 	callq	_ZdlPvm@PLT # Offset: 877
.Ltmp4952:
    00000372: 	leaq	DATAat0x3425d(%rip), %rdx
    00000379: 	movq	%r12, %rsi
    0000037c: 	movq	%rbp, %rdi
    0000037f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 895
    00000384: 	xorl	%r9d, %r9d
    00000387: 	movq	%rbp, %r8
    0000038a: 	movq	%r15, %rdx
    0000038d: 	leaq	_Z13binarysearch4IPffEbT_S1_T0_(%rip), %rcx
    00000394: 	movq	%r14, %rsi
    00000397: 	movq	%r13, %rdi
    0000039a: 	callq	_Z13TestOneSearchIPfPFbS0_S0_fEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 922
    0000039f: 	movq	(%rsp), %rdi
    000003a3: 	cmpq	%rbx, %rdi
    000003a6: 	je	.Ltmp4953 # Offset: 934
    000003a8: 	movq	0x10(%rsp), %rax
    000003ad: 	leaq	0x1(%rax), %rsi
    000003b1: 	callq	_ZdlPvm@PLT # Offset: 945
.Ltmp4953:
    000003b6: 	leaq	DATAat0x3426d(%rip), %rdx
    000003bd: 	movq	%r12, %rsi
    000003c0: 	movq	%rbp, %rdi
    000003c3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 963
    000003c8: 	xorl	%r9d, %r9d
    000003cb: 	movq	%rbp, %r8
    000003ce: 	movq	%r15, %rdx
    000003d1: 	leaq	_Z18binarysearch_recurIPffEbT_S1_T0_(%rip), %rcx
    000003d8: 	movq	%r14, %rsi
    000003db: 	movq	%r13, %rdi
    000003de: 	callq	_Z13TestOneSearchIPfPFbS0_S0_fEEvT_S3_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 990
    000003e3: 	movq	(%rsp), %rdi
    000003e7: 	cmpq	%rbx, %rdi
    000003ea: 	je	.Ltmp4954 # Offset: 1002
    000003ec: 	movq	0x10(%rsp), %rax
    000003f1: 	leaq	0x1(%rax), %rsi
    000003f5: 	callq	_ZdlPvm@PLT # Offset: 1013
.Ltmp4954:
    000003fa: 	movq	%rbp, %rdi
    000003fd: 	leaq	DATAat0x34286(%rip), %rdx
    00000404: 	movq	%r12, %rsi
    00000407: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1031
    0000040c: 	movq	%rbp, %rdi
    0000040f: 	callq	_Z9summarizeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1039
    00000414: 	movq	(%rsp), %rdi
    00000418: 	cmpq	%rbx, %rdi
    0000041b: 	je	.Ltmp4955 # Offset: 1051
    0000041d: 	movq	0x10(%rsp), %rax
    00000422: 	leaq	0x1(%rax), %rsi
    00000426: 	callq	_ZdlPvm@PLT # Offset: 1062
.Ltmp4955:
    0000042b: 	movq	0x28(%rsp), %rax
    00000430: 	subq	%fs:0x28, %rax
    00000439: 	jne	.Ltmp4956 # Offset: 1081
    0000043b: 	addq	$0x38, %rsp
    0000043f: 	popq	%rbx
    00000440: 	popq	%rbp
    00000441: 	popq	%r12
    00000443: 	popq	%r13
    00000445: 	popq	%r14
    00000447: 	popq	%r15
    00000449: 	retq # Offset: 1097
.Ltmp4956:
    0000044a: 	callq	__stack_chk_fail@PLT # Offset: 1098
    0000044f: 	endbr64
.Ltmp4958:
    00000453: 	movq	%rax, %rbp
    00000456: 	jmp	.Ltmp4957 # Offset: 1110
    00000458: 	endbr64
    0000045c: 	jmp	.Ltmp4958 # Offset: 1116
    0000045e: 	endbr64
    00000462: 	jmp	.Ltmp4958 # Offset: 1122
    00000464: 	endbr64
    00000468: 	jmp	.Ltmp4958 # Offset: 1128
    0000046a: 	endbr64
    0000046e: 	jmp	.Ltmp4958 # Offset: 1134
    00000470: 	endbr64
    00000474: 	jmp	.Ltmp4958 # Offset: 1140
    00000476: 	endbr64
    0000047a: 	jmp	.Ltmp4958 # Offset: 1146
.Ltmp4957:
    0000047c: 	movq	(%rsp), %rdi
    00000480: 	cmpq	%rbx, %rdi
    00000483: 	je	.Ltmp4959 # Offset: 1155
.Ltmp4961:
    00000485: 	movq	0x10(%rsp), %rax
    0000048a: 	leaq	0x1(%rax), %rsi
    0000048e: 	callq	_ZdlPvm@PLT # Offset: 1166
.Ltmp4959:
    00000493: 	movq	%rbp, %rdi
    00000496: 	callq	_Unwind_Resume@PLT # Offset: 1174
    0000049b: 	endbr64
    0000049f: 	jmp	.Ltmp4958 # Offset: 1183
    000004a1: 	endbr64
    000004a5: 	jmp	.Ltmp4958 # Offset: 1189
    000004a7: 	endbr64
    000004ab: 	jmp	.Ltmp4958 # Offset: 1195
    000004ad: 	endbr64
    000004b1: 	jmp	.Ltmp4958 # Offset: 1201
    000004b3: 	endbr64
    000004b7: 	jmp	.Ltmp4958 # Offset: 1207
    000004b9: 	endbr64
    000004bd: 	movq	%rax, %rbp
    000004c0: 	jmp	.Ltmp4960 # Offset: 1216
    000004c2: 	endbr64
    000004c6: 	jmp	.Ltmp4958 # Offset: 1222
    000004c8: 	endbr64
    000004cc: 	jmp	.Ltmp4958 # Offset: 1228
.Ltmp4960:
    000004ce: 	movq	(%rsp), %rdi
    000004d2: 	leaq	0x10(%rsp), %rax
    000004d7: 	cmpq	%rax, %rdi
    000004da: 	jne	.Ltmp4961 # Offset: 1242
    000004dc: 	jmp	.Ltmp4959 # Offset: 1244
DWARF CFI Instructions:
    <empty>
End of Function "_Z16TestOneContainerIPfEvT_S1_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z15TestSearchArrayIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEPFS6_S6_S6_fEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 460
  State       : disassembled
  Address     : 0x2b1e0
  Size        : 0x210
  MaxSize     : 0x210
  Offset      : 0x2b1e0
  Section     : .text
  Orc Section : .local.text._Z15TestSearchArrayIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEPFS6_S6_S6_fEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0459:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rcx, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	movl	$0x1000, %edi
    00000017: 	pushq	%rbp
    00000018: 	pushq	%rbx
    00000019: 	movq	%rsi, %rbx
    0000001c: 	subq	$0x28, %rsp
    00000020: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000027: 	movq	%rdx, 0x8(%rsp)
    0000002c: 	movq	%r8, 0x18(%rsp)
    00000031: 	movb	%r9b, 0x17(%rsp)
    00000036: 	callq	_Znwm@PLT # Offset: 54
    0000003b: 	movq	%rax, %r13
    0000003e: 	movl	$0x0, (%rax)
    00000044: 	addq	$0x4, %rax
    00000048: 	leaq	0x1000(%r13), %rsi
    0000004f: 	cmpq	%rsi, %rax
    00000052: 	je	.Ltmp4962 # Offset: 82
    00000054: 	leaq	0xc(%r13), %rdi
    00000058: 	movq	$0x0, 0x4(%r13)
    00000060: 	movq	$0x0, 0xff8(%r13)
    0000006b: 	andq	$-0x8, %rdi
    0000006f: 	subq	%rdi, %rax
    00000072: 	movq	%rax, %rcx
    00000075: 	xorl	%eax, %eax
    00000077: 	addl	$0xffc, %ecx
    0000007d: 	shrl	$0x3, %ecx
    00000080: 	rep		stosq	%rax, %es:(%rdi)
.Ltmp4962:
    00000083: 	movabsq	$0x5851f42d4c957f2d, %r8
    0000008d: 	movq	%r13, %rcx
    00000090: 	movabsq	$0x14057b7ef767814f, %rdi
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp4963:
    000000a0: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000000a7: 	addq	$0x4, %rcx
    000000ab: 	imulq	%r8, %rax
    000000af: 	addq	%rdi, %rax
    000000b2: 	movq	%rax, %rdx
    000000b5: 	movq	%rax, %r9
    000000b8: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000000bf: 	shrq	$0x14, %rdx
    000000c3: 	shlq	$0x17, %r9
    000000c7: 	xorq	%r9, %rdx
    000000ca: 	xorq	%rdx, %rax
    000000cd: 	xorl	%edx, %edx
    000000cf: 	divq	0x8(%rsp)
    000000d4: 	movss	(%r12,%rdx,4), %xmm0
    000000da: 	movss	%xmm0, -0x4(%rcx)
    000000df: 	cmpq	%rsi, %rcx
    000000e2: 	jne	.Ltmp4963 # Offset: 226
    000000e4: 	callq	clock@PLT # Offset: 228
    000000e9: 	xorl	%r15d, %r15d
    000000ec: 	xorl	%ebp, %ebp
    000000ee: 	movq	%rax, start_time(%rip)
.Ltmp4967:
    000000f5: 	leaq	0xc8(%rbp), %rax
    000000fc: 	cmpb	$0x0, 0x17(%rsp)
    00000101: 	movq	%rax, (%rsp)
    00000105: 	jne	.Ltmp4964 # Offset: 261
    0000010b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp4965:
    00000110: 	movq	%rbp, %rax
    00000113: 	movq	%rbx, %rsi
    00000116: 	addq	$0x1, %rbp
    0000011a: 	movq	%r12, %rdi
    0000011d: 	andl	$0x3ff, %eax
    00000122: 	movss	(%r13,%rax,4), %xmm0
    00000129: 	callq	*%r14 # Offset: 297
    0000012c: 	cmpq	%rax, %rbx
    0000012f: 	movl	$0x1, %eax
    00000134: 	cmovel	%eax, %r15d
    00000138: 	cmpq	(%rsp), %rbp
    0000013c: 	jne	.Ltmp4965 # Offset: 316
.Ltmp4969:
    0000013e: 	callq	clock@PLT # Offset: 318
    00000143: 	movsd	gMinimumTimeTarget(%rip), %xmm1
    0000014b: 	pxor	%xmm0, %xmm0
    0000014f: 	movq	%rax, end_time(%rip)
    00000156: 	subq	start_time(%rip), %rax
    0000015d: 	cvtsi2sd	%rax, %xmm0
    00000162: 	divsd	DATAat0x34410(%rip), %xmm0
    0000016a: 	comisd	%xmm0, %xmm1
    0000016e: 	jbe	.Ltmp4966 # Offset: 366
    00000170: 	cmpq	$0x5f5e0ff, %rbp
    00000177: 	jbe	.Ltmp4967 # Offset: 375
.Ltmp4966:
    0000017d: 	movq	0x18(%rsp), %rdx
    00000182: 	movq	0x8(%rsp), %rdi
    00000187: 	movq	%rbp, %rsi
    0000018a: 	callq	_Z13record_resultdmmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 394
    0000018f: 	testb	%r15b, %r15b
    00000192: 	jne	.Ltmp4968 # Offset: 402
.Ltmp4970:
    00000194: 	addq	$0x28, %rsp
    00000198: 	movq	%r13, %rdi
    0000019b: 	movl	$0x1000, %esi
    000001a0: 	popq	%rbx
    000001a1: 	popq	%rbp
    000001a2: 	popq	%r12
    000001a4: 	popq	%r13
    000001a6: 	popq	%r14
    000001a8: 	popq	%r15
    000001aa: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 426
    000001af: 	nop # Size: 1
.Ltmp4964:
    000001b0: 	movq	%rbp, %rax
    000001b3: 	movq	%rbx, %rsi
    000001b6: 	addq	$0x1, %rbp
    000001ba: 	movq	%r12, %rdi
    000001bd: 	andl	$0x3ff, %eax
    000001c2: 	movss	(%r13,%rax,4), %xmm0
    000001c9: 	callq	*%r14 # Offset: 457
    000001cc: 	cmpq	(%rsp), %rbp
    000001d0: 	jne	.Ltmp4964 # Offset: 464
    000001d2: 	jmp	.Ltmp4969 # Offset: 466
.Ltmp4968:
    000001d7: 	movq	0x18(%rsp), %rax
    000001dc: 	leaq	DATAat0x34137(%rip), %rsi
    000001e3: 	movl	$0x1, %edi
    000001e8: 	movq	(%rax), %rdx
    000001eb: 	xorl	%eax, %eax
    000001ed: 	callq	__printf_chk@PLT # Offset: 493
    000001f2: 	jmp	.Ltmp4970 # Offset: 498
    000001f4: 	endbr64
    000001f8: 	movq	%rax, %rbp
    000001fb: 	movq	%r13, %rdi
    000001fe: 	movl	$0x1000, %esi
    00000203: 	callq	_ZdlPvm@PLT # Offset: 515
    00000208: 	movq	%rbp, %rdi
    0000020b: 	callq	_Unwind_Resume@PLT # Offset: 523
DWARF CFI Instructions:
    <empty>
End of Function "_Z15TestSearchArrayIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEPFS6_S6_S6_fEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z18quicksort2_forwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_" after disassembly {
  Number      : 461
  State       : disassembled
  Address     : 0x2b3f0
  Size        : 0x144
  MaxSize     : 0x150
  Offset      : 0x2b3f0
  Section     : .text
  Orc Section : .local.text._Z18quicksort2_forwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0460:
    00000000: 	endbr64
    00000004: 	cmpq	%rdi, %rsi
    00000007: 	je	.Ltmp4971 # Offset: 7
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rsi, %rbp
    00000016: 	pushq	%rbx
    00000017: 	leaq	0x4(%rdi), %rbx
    0000001b: 	cmpq	%rbx, %rsi
    0000001e: 	je	.Ltmp4972 # Offset: 30
.Ltmp4980:
    00000024: 	leaq	0x8(%r12), %rax
    00000029: 	cmpq	%rax, %rbp
    0000002c: 	je	.Ltmp4973 # Offset: 44
    00000032: 	movq	(%r12), %xmm1
    00000038: 	movaps	%xmm1, %xmm2
    0000003b: 	movaps	%xmm1, %xmm0
    0000003e: 	shufps	$0xe5, %xmm1, %xmm1
    00000042: 	comiss	%xmm1, %xmm2
    00000045: 	shufps	$0xe1, %xmm0, %xmm0
    00000049: 	jbe	.Ltmp4974 # Offset: 73
    0000004b: 	movlps	%xmm0, (%r12)
    00000050: 	movaps	%xmm1, %xmm0
    00000053: 	movaps	%xmm2, %xmm1
    00000056: 	movaps	%xmm0, %xmm2
.Ltmp4974:
    00000059: 	movss	0x8(%r12), %xmm0
    00000060: 	comiss	%xmm0, %xmm1
    00000063: 	movaps	%xmm0, %xmm4
    00000066: 	movaps	%xmm0, %xmm3
    00000069: 	unpcklps	%xmm2, %xmm4
    0000006c: 	unpcklps	%xmm1, %xmm3
    0000006f: 	jbe	.Ltmp4975 # Offset: 111
    00000071: 	comiss	%xmm0, %xmm2
    00000074: 	movlps	%xmm3, 0x4(%r12)
    0000007a: 	movaps	%xmm0, %xmm1
    0000007d: 	jbe	.Ltmp4975 # Offset: 125
    0000007f: 	movlps	%xmm4, (%r12)
    00000084: 	movaps	%xmm2, %xmm1
.Ltmp4975:
    00000087: 	leaq	0xc(%r12), %rax
    0000008c: 	cmpq	%rax, %rbp
    0000008f: 	je	.Ltmp4972 # Offset: 143
    00000091: 	leaq	0x4(%rbx), %rax
    00000095: 	cmpq	%rbp, %rax
    00000098: 	je	.Ltmp4976 # Offset: 152
    0000009a: 	movq	%rbx, %rsi
    0000009d: 	movl	$0x1, %ecx
    000000a2: 	jmp	.Ltmp4977 # Offset: 162
    000000a4: 	nopl	(%rax) # Size: 4
.Ltmp4979:
    000000a8: 	movq	%rdx, %rax
.Ltmp4977:
    000000ab: 	movss	(%rax), %xmm0
    000000af: 	comiss	%xmm0, %xmm1
    000000b2: 	jbe	.Ltmp4978 # Offset: 178
    000000b4: 	movss	(%rbx), %xmm2
    000000b8: 	addq	$0x1, %rcx
    000000bc: 	addq	$0x4, %rbx
    000000c0: 	movss	%xmm2, (%rax)
    000000c4: 	movss	%xmm0, -0x4(%rbx)
.Ltmp4978:
    000000c9: 	leaq	0x4(%rax), %rdx
    000000cd: 	cmpq	%rdx, %rbp
    000000d0: 	jne	.Ltmp4979 # Offset: 208
    000000d2: 	subq	$0x4, %rax
    000000d6: 	subq	%rsi, %rax
    000000d9: 	shrq	$0x2, %rax
    000000dd: 	addq	$0x3, %rax
    000000e1: 	subq	%rcx, %rax
    000000e4: 	cmpq	%rax, %rcx
    000000e7: 	jbe	.Ltmp4976 # Offset: 231
    000000e9: 	movq	%rbp, %rsi
    000000ec: 	movq	%rbx, %rdi
    000000ef: 	movq	%rbx, %rbp
    000000f2: 	callq	_Z18quicksort2_forwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_ # Offset: 242
.Ltmp4981:
    000000f7: 	cmpq	%r12, %rbp
    000000fa: 	je	.Ltmp4972 # Offset: 250
    000000fc: 	leaq	0x4(%r12), %rbx
    00000101: 	cmpq	%rbx, %rbp
    00000104: 	jne	.Ltmp4980 # Offset: 260
.Ltmp4972:
    0000010a: 	popq	%rbx
    0000010b: 	popq	%rbp
    0000010c: 	popq	%r12
    0000010e: 	retq # Offset: 270
    0000010f: 	nop # Size: 1
.Ltmp4976:
    00000110: 	movq	%r12, %rdi
    00000113: 	movq	%rbx, %rsi
    00000116: 	movq	%rbx, %r12
    00000119: 	callq	_Z18quicksort2_forwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_ # Offset: 281
    0000011e: 	jmp	.Ltmp4981 # Offset: 286
.Ltmp4973:
    00000120: 	movq	(%r12), %xmm0
    00000126: 	movaps	%xmm0, %xmm5
    00000129: 	movaps	%xmm0, %xmm2
    0000012c: 	shufps	$0xe5, %xmm5, %xmm5
    00000130: 	comiss	%xmm5, %xmm0
    00000133: 	shufps	$0xe1, %xmm2, %xmm2
    00000137: 	jbe	.Ltmp4972 # Offset: 311
    00000139: 	movlps	%xmm2, (%r12)
    0000013e: 	popq	%rbx
    0000013f: 	popq	%rbp
    00000140: 	popq	%r12
    00000142: 	retq # Offset: 322
.Ltmp4971:
    00000143: 	retq # Offset: 323
DWARF CFI Instructions:
    <empty>
End of Function "_Z18quicksort2_forwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_"

Binary Function "_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEPFS6_S6_S6_fEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 462
  State       : disassembled
  Address     : 0x2b540
  Size        : 0x2ba
  MaxSize     : 0x2c0
  Offset      : 0x2b540
  Section     : .text
  Orc Section : .local.text._Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEPFS6_S6_S6_fEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0461:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%r8, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rsi, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdx, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rdi, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	subq	$0x48, %rsp
    0000001e: 	movq	%rcx, (%rsp)
    00000022: 	movq	%fs:0x28, %rax
    0000002b: 	movq	%rax, 0x38(%rsp)
    00000030: 	xorl	%eax, %eax
    00000032: 	cmpq	%rsi, %rdi
    00000035: 	je	.Ltmp4982 # Offset: 53
    00000037: 	leaq	-0x4(%rsi), %rdx
    0000003b: 	movq	%rdi, %rax
    0000003e: 	subq	%rdi, %rdx
    00000041: 	movq	%rdx, %rcx
    00000044: 	shrq	$0x2, %rcx
    00000048: 	addq	$0x1, %rcx
    0000004c: 	cmpq	$0x8, %rdx
    00000050: 	jbe	.Ltmp4983 # Offset: 80
    00000052: 	movq	%rcx, %rdx
    00000055: 	movaps	DATAat0x34560(%rip), %xmm0
    0000005c: 	shrq	$0x2, %rdx
    00000060: 	shlq	$0x4, %rdx
    00000064: 	addq	%rdi, %rdx
    00000067: 	nopw	(%rax,%rax) # Size: 9
.Ltmp4984:
    00000070: 	movups	%xmm0, (%rax)
    00000073: 	addq	$0x10, %rax
    00000077: 	cmpq	%rdx, %rax
    0000007a: 	jne	.Ltmp4984 # Offset: 122
    0000007c: 	movq	%rcx, %rdx
    0000007f: 	andq	$-0x4, %rdx
    00000083: 	leaq	(%rbp,%rdx,4), %rax
    00000088: 	cmpq	%rcx, %rdx
    0000008b: 	je	.Ltmp4982 # Offset: 139
.Ltmp4983:
    0000008d: 	movss	DATAat0x34560(%rip), %xmm0
    00000095: 	leaq	0x4(%rax), %rdx
    00000099: 	movss	%xmm0, (%rax)
    0000009d: 	cmpq	%rdx, %r13
    000000a0: 	je	.Ltmp4982 # Offset: 160
    000000a2: 	leaq	0x8(%rax), %rdx
    000000a6: 	movss	%xmm0, 0x4(%rax)
    000000ab: 	cmpq	%rdx, %r13
    000000ae: 	je	.Ltmp4982 # Offset: 174
    000000b0: 	movss	%xmm0, 0x8(%rax)
.Ltmp4982:
    000000b5: 	leaq	0x10(%rsp), %r14
    000000ba: 	leaq	DATAat0x34160(%rip), %rdx
    000000c1: 	movq	%r15, %rsi
    000000c4: 	movzbl	%r9b, %ebx
    000000c8: 	movq	%r14, %rdi
    000000cb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 203
    000000d0: 	movq	(%rsp), %rcx
    000000d4: 	movl	%ebx, %r9d
    000000d7: 	movq	%r14, %r8
    000000da: 	movq	%r12, %rdx
    000000dd: 	movq	%r13, %rsi
    000000e0: 	movq	%rbp, %rdi
    000000e3: 	callq	_Z15TestSearchArrayIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEPFS6_S6_S6_fEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 227
    000000e8: 	movq	0x10(%rsp), %rdi
    000000ed: 	leaq	0x20(%rsp), %rax
    000000f2: 	movq	%rax, 0x8(%rsp)
    000000f7: 	cmpq	%rax, %rdi
    000000fa: 	je	.Ltmp4985 # Offset: 250
    000000fc: 	movq	0x20(%rsp), %rax
    00000101: 	leaq	0x1(%rax), %rsi
    00000105: 	callq	_ZdlPvm@PLT # Offset: 261
.Ltmp4985:
    0000010a: 	cmpq	$0x9, %r12
    0000010e: 	jbe	.Ltmp4986 # Offset: 270
    00000114: 	movabsq	$-0x3333333333333333, %rdx
    0000011e: 	movq	%r12, %rax
    00000121: 	mulq	%rdx
    00000124: 	shrq	$0x3, %rdx
.Ltmp4996:
    00000128: 	movss	DATAat0x34570(%rip), %xmm1
    00000130: 	movq	%rbp, %rdi
    00000133: 	xorl	%esi, %esi
    00000135: 	pxor	%xmm0, %xmm0
    00000139: 	cmpq	$0x0, %r12
    0000013d: 	jbe	.Ltmp4987 # Offset: 317
    0000013f: 	nop # Size: 1
.Ltmp4990:
    00000140: 	leaq	0x4(%rdi), %rax
    00000144: 	xorl	%ecx, %ecx
    00000146: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp4989:
    00000150: 	addq	$0x1, %rcx
    00000154: 	movq	%rax, %rdi
    00000157: 	movss	%xmm0, -0x4(%rax)
    0000015c: 	addq	$0x1, %rsi
    00000160: 	addq	$0x4, %rax
    00000164: 	cmpq	%rdx, %rcx
    00000167: 	jae	.Ltmp4988 # Offset: 359
    00000169: 	cmpq	%rsi, %r12
    0000016c: 	ja	.Ltmp4989 # Offset: 364
.Ltmp4988:
    0000016e: 	addss	%xmm1, %xmm0
    00000172: 	cmpq	%rsi, %r12
    00000175: 	ja	.Ltmp4990 # Offset: 373
.Ltmp4987:
    00000177: 	leaq	DATAat0x3416e(%rip), %rdx
    0000017e: 	movq	%r15, %rsi
    00000181: 	movq	%r14, %rdi
    00000184: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 388
    00000189: 	movq	(%rsp), %rcx
    0000018d: 	movl	%ebx, %r9d
    00000190: 	movq	%r14, %r8
    00000193: 	movq	%r12, %rdx
    00000196: 	movq	%r13, %rsi
    00000199: 	movq	%rbp, %rdi
    0000019c: 	callq	_Z15TestSearchArrayIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEPFS6_S6_S6_fEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 412
    000001a1: 	movq	0x10(%rsp), %rdi
    000001a6: 	cmpq	0x8(%rsp), %rdi
    000001ab: 	je	.Ltmp4991 # Offset: 427
    000001ad: 	movq	0x20(%rsp), %rax
    000001b2: 	leaq	0x1(%rax), %rsi
    000001b6: 	callq	_ZdlPvm@PLT # Offset: 438
.Ltmp4991:
    000001bb: 	cmpq	%r13, %rbp
    000001be: 	je	.Ltmp4992 # Offset: 446
    000001c0: 	leaq	-0x4(%r13), %rcx
    000001c4: 	xorl	%eax, %eax
    000001c6: 	subq	%rbp, %rcx
    000001c9: 	shrq	$0x2, %rcx
    000001cd: 	nopl	(%rax) # Size: 3
.Ltmp4993:
    000001d0: 	pxor	%xmm0, %xmm0
    000001d4: 	movq	%rax, %rdx
    000001d7: 	cvtsi2ss	%rax, %xmm0
    000001dc: 	movss	%xmm0, (%rbp,%rax,4)
    000001e2: 	addq	$0x1, %rax
    000001e6: 	cmpq	%rcx, %rdx
    000001e9: 	jne	.Ltmp4993 # Offset: 489
.Ltmp4992:
    000001eb: 	movq	%r13, %rsi
    000001ee: 	movq	%rbp, %rdi
    000001f1: 	callq	_Z18quicksort2_forwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_ # Offset: 497
    000001f6: 	leaq	DATAat0x34184(%rip), %rdx
    000001fd: 	movq	%r15, %rsi
    00000200: 	movq	%r14, %rdi
    00000203: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 515
    00000208: 	movq	(%rsp), %rcx
    0000020c: 	movl	%ebx, %r9d
    0000020f: 	movq	%r14, %r8
    00000212: 	movq	%r12, %rdx
    00000215: 	movq	%r13, %rsi
    00000218: 	movq	%rbp, %rdi
    0000021b: 	callq	_Z15TestSearchArrayIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEPFS6_S6_S6_fEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 539
    00000220: 	movq	0x10(%rsp), %rdi
    00000225: 	cmpq	0x8(%rsp), %rdi
    0000022a: 	je	.Ltmp4994 # Offset: 554
    0000022c: 	movq	0x20(%rsp), %rax
    00000231: 	leaq	0x1(%rax), %rsi
    00000235: 	callq	_ZdlPvm@PLT # Offset: 565
.Ltmp4994:
    0000023a: 	movq	0x38(%rsp), %rax
    0000023f: 	subq	%fs:0x28, %rax
    00000248: 	jne	.Ltmp4995 # Offset: 584
    0000024a: 	addq	$0x48, %rsp
    0000024e: 	popq	%rbx
    0000024f: 	popq	%rbp
    00000250: 	popq	%r12
    00000252: 	popq	%r13
    00000254: 	popq	%r14
    00000256: 	popq	%r15
    00000258: 	retq # Offset: 600
.Ltmp4986:
    00000259: 	testq	%r12, %r12
    0000025c: 	je	.Ltmp4987 # Offset: 604
    00000262: 	movl	$0x1, %edx
    00000267: 	jmp	.Ltmp4996 # Offset: 615
.Ltmp4995:
    0000026c: 	callq	__stack_chk_fail@PLT # Offset: 620
    00000271: 	endbr64
.Ltmp4998:
    00000275: 	movq	%rax, %rbp
    00000278: 	jmp	.Ltmp4997 # Offset: 632
    0000027a: 	endbr64
    0000027e: 	jmp	.Ltmp4998 # Offset: 638
    00000280: 	endbr64
    00000284: 	movq	%rax, %rbp
    00000287: 	movq	0x10(%rsp), %rdi
    0000028c: 	leaq	0x20(%rsp), %rax
    00000291: 	cmpq	%rax, %rdi
    00000294: 	je	.Ltmp4999 # Offset: 660
.Ltmp5000:
    00000296: 	movq	0x20(%rsp), %rax
    0000029b: 	leaq	0x1(%rax), %rsi
    0000029f: 	callq	_ZdlPvm@PLT # Offset: 671
.Ltmp4999:
    000002a4: 	movq	%rbp, %rdi
    000002a7: 	callq	_Unwind_Resume@PLT # Offset: 679
.Ltmp4997:
    000002ac: 	movq	0x10(%rsp), %rdi
    000002b1: 	cmpq	0x8(%rsp), %rdi
    000002b6: 	jne	.Ltmp5000 # Offset: 694
    000002b8: 	jmp	.Ltmp4999 # Offset: 696
DWARF CFI Instructions:
    <empty>
End of Function "_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEPFS6_S6_S6_fEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z23lower_bound_recur_innerIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEflET_S7_T0_T1_" after disassembly {
  Number      : 463
  State       : disassembled
  Address     : 0x2b800
  Size        : 0x3d
  MaxSize     : 0x40
  Offset      : 0x2b800
  Section     : .text
  Orc Section : .local.text._Z23lower_bound_recur_innerIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEflET_S7_T0_T1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0462:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
.Ltmp5004:
    00000007: 	testq	%rsi, %rsi
    0000000a: 	je	.Ltmp5001 # Offset: 10
.Ltmp5003:
    0000000c: 	movq	%rsi, %rdx
    0000000f: 	shrq	$0x3f, %rdx
    00000013: 	addq	%rsi, %rdx
    00000016: 	sarq	%rdx
    00000019: 	leaq	(%rax,%rdx,4), %rcx
    0000001d: 	comiss	(%rcx), %xmm0
    00000020: 	jbe	.Ltmp5002 # Offset: 32
    00000022: 	addq	$0x1, %rdx
    00000026: 	leaq	0x4(%rcx), %rax
    0000002a: 	subq	%rdx, %rsi
    0000002d: 	testq	%rsi, %rsi
    00000030: 	jne	.Ltmp5003 # Offset: 48
.Ltmp5001:
    00000032: 	retq # Offset: 50
    00000033: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5002:
    00000038: 	movq	%rdx, %rsi
    0000003b: 	jmp	.Ltmp5004 # Offset: 59
DWARF CFI Instructions:
    <empty>
End of Function "_Z23lower_bound_recur_innerIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEflET_S7_T0_T1_"

Binary Function "_Z17lower_bound_recurIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfET_S7_S7_T0_" after disassembly {
  Number      : 464
  State       : disassembled
  Address     : 0x2b840
  Size        : 0xf5
  MaxSize     : 0x100
  Offset      : 0x2b840
  Section     : .text
  Orc Section : .local.text._Z17lower_bound_recurIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfET_S7_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0463:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	cmpq	%rdi, %rsi
    0000000a: 	je	.Ltmp5005 # Offset: 10
    0000000c: 	subq	%rdi, %rsi
    0000000f: 	subq	$0x8, %rsp
    00000013: 	movq	%rsi, %rdx
    00000016: 	shrq	$0x3f, %rsi
    0000001a: 	sarq	$0x2, %rdx
    0000001e: 	addq	%rdx, %rsi
    00000021: 	sarq	%rsi
    00000024: 	leaq	(%rdi,%rsi,4), %rcx
    00000028: 	comiss	(%rcx), %xmm0
    0000002b: 	jbe	.Ltmp5006 # Offset: 43
    0000002d: 	addq	$0x1, %rsi
    00000031: 	leaq	0x4(%rcx), %rax
    00000035: 	subq	%rsi, %rdx
    00000038: 	je	.Ltmp5007 # Offset: 56
    0000003a: 	movq	%rdx, %rsi
    0000003d: 	shrq	$0x3f, %rsi
    00000041: 	addq	%rdx, %rsi
    00000044: 	sarq	%rsi
    00000047: 	leaq	(%rax,%rsi,4), %rdi
    0000004b: 	comiss	(%rdi), %xmm0
    0000004e: 	jbe	.Ltmp5008 # Offset: 78
    00000050: 	leaq	0x1(%rsi), %rax
    00000054: 	addq	$0x4, %rdi
    00000058: 	subq	%rax, %rdx
    0000005b: 	movq	%rdx, %rsi
    0000005e: 	callq	_Z23lower_bound_recur_innerIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEflET_S7_T0_T1_ # Offset: 94
.Ltmp5007:
    00000063: 	addq	$0x8, %rsp
    00000067: 	retq # Offset: 103
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp5005:
    00000070: 	retq # Offset: 112
    00000071: 	nopl	(%rax) # Size: 7
.Ltmp5006:
    00000078: 	testq	%rsi, %rsi
    0000007b: 	je	.Ltmp5007 # Offset: 123
    0000007d: 	testq	%rdx, %rdx
    00000080: 	leaq	0x3(%rdx), %rdi
    00000084: 	cmovnsq	%rdx, %rdi
    00000088: 	movq	%rdi, %rcx
    0000008b: 	andq	$-0x4, %rdi
    0000008f: 	addq	%rax, %rdi
    00000092: 	sarq	$0x2, %rcx
    00000096: 	comiss	(%rdi), %xmm0
    00000099: 	jbe	.Ltmp5009 # Offset: 153
    0000009b: 	addq	$0x1, %rcx
    0000009f: 	addq	$0x4, %rdi
    000000a3: 	subq	%rcx, %rsi
    000000a6: 	callq	_Z23lower_bound_recur_innerIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEflET_S7_T0_T1_ # Offset: 166
    000000ab: 	jmp	.Ltmp5007 # Offset: 171
    000000ad: 	nopl	(%rax) # Size: 3
.Ltmp5008:
    000000b0: 	movq	%rax, %rdi
    000000b3: 	callq	_Z23lower_bound_recur_innerIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEflET_S7_T0_T1_ # Offset: 179
    000000b8: 	jmp	.Ltmp5007 # Offset: 184
    000000ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5009:
    000000c0: 	testq	%rcx, %rcx
    000000c3: 	je	.Ltmp5007 # Offset: 195
    000000c5: 	testq	%rdx, %rdx
    000000c8: 	leaq	0x7(%rdx), %rsi
    000000cc: 	cmovnsq	%rdx, %rsi
    000000d0: 	sarq	$0x3, %rsi
    000000d4: 	leaq	(%rax,%rsi,4), %rdx
    000000d8: 	comiss	(%rdx), %xmm0
    000000db: 	jbe	.Ltmp5008 # Offset: 219
    000000dd: 	leaq	0x1(%rsi), %rax
    000000e1: 	leaq	0x4(%rdx), %rdi
    000000e5: 	subq	%rax, %rcx
    000000e8: 	movq	%rcx, %rsi
    000000eb: 	callq	_Z23lower_bound_recur_innerIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEflET_S7_T0_T1_ # Offset: 235
    000000f0: 	jmp	.Ltmp5007 # Offset: 240
DWARF CFI Instructions:
    <empty>
End of Function "_Z17lower_bound_recurIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfET_S7_S7_T0_"

Binary Function "_Z23upper_bound_recur_innerIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEflET_S7_T0_T1_" after disassembly {
  Number      : 465
  State       : disassembled
  Address     : 0x2b940
  Size        : 0x45
  MaxSize     : 0x50
  Offset      : 0x2b940
  Section     : .text
  Orc Section : .local.text._Z23upper_bound_recur_innerIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEflET_S7_T0_T1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0464:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
.Ltmp5013:
    00000007: 	testq	%rsi, %rsi
    0000000a: 	je	.Ltmp5010 # Offset: 10
.Ltmp5012:
    0000000c: 	movq	%rsi, %rdx
    0000000f: 	shrq	$0x3f, %rdx
    00000013: 	addq	%rsi, %rdx
    00000016: 	sarq	%rdx
    00000019: 	leaq	(%rax,%rdx,4), %rcx
    0000001d: 	movss	(%rcx), %xmm1
    00000021: 	comiss	%xmm0, %xmm1
    00000024: 	ja	.Ltmp5011 # Offset: 36
    00000026: 	addq	$0x1, %rdx
    0000002a: 	leaq	0x4(%rcx), %rax
    0000002e: 	subq	%rdx, %rsi
    00000031: 	testq	%rsi, %rsi
    00000034: 	jne	.Ltmp5012 # Offset: 52
.Ltmp5010:
    00000036: 	retq # Offset: 54
    00000037: 	nopw	(%rax,%rax) # Size: 9
.Ltmp5011:
    00000040: 	movq	%rdx, %rsi
    00000043: 	jmp	.Ltmp5013 # Offset: 67
DWARF CFI Instructions:
    <empty>
End of Function "_Z23upper_bound_recur_innerIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEflET_S7_T0_T1_"

Binary Function "_Z17upper_bound_recurIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfET_S7_S7_T0_" after disassembly {
  Number      : 466
  State       : disassembled
  Address     : 0x2b990
  Size        : 0x105
  MaxSize     : 0x110
  Offset      : 0x2b990
  Section     : .text
  Orc Section : .local.text._Z17upper_bound_recurIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfET_S7_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0465:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	cmpq	%rdi, %rsi
    0000000a: 	je	.Ltmp5014 # Offset: 10
    0000000c: 	subq	%rdi, %rsi
    0000000f: 	subq	$0x8, %rsp
    00000013: 	movq	%rsi, %rdx
    00000016: 	shrq	$0x3f, %rsi
    0000001a: 	sarq	$0x2, %rdx
    0000001e: 	addq	%rdx, %rsi
    00000021: 	sarq	%rsi
    00000024: 	leaq	(%rdi,%rsi,4), %rcx
    00000028: 	movss	(%rcx), %xmm1
    0000002c: 	comiss	%xmm0, %xmm1
    0000002f: 	jbe	.Ltmp5015 # Offset: 47
    00000031: 	testq	%rsi, %rsi
    00000034: 	je	.Ltmp5016 # Offset: 52
    00000036: 	testq	%rdx, %rdx
    00000039: 	leaq	0x3(%rdx), %rdi
    0000003d: 	cmovnsq	%rdx, %rdi
    00000041: 	movq	%rdi, %r8
    00000044: 	andq	$-0x4, %rdi
    00000048: 	addq	%rax, %rdi
    0000004b: 	sarq	$0x2, %r8
    0000004f: 	movss	(%rdi), %xmm1
    00000053: 	comiss	%xmm0, %xmm1
    00000056: 	jbe	.Ltmp5017 # Offset: 86
    0000005c: 	movq	%r8, %rsi
    0000005f: 	movq	%rax, %rdi
    00000062: 	callq	_Z23upper_bound_recur_innerIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEflET_S7_T0_T1_ # Offset: 98
.Ltmp5016:
    00000067: 	addq	$0x8, %rsp
    0000006b: 	retq # Offset: 107
    0000006c: 	nopl	(%rax) # Size: 4
.Ltmp5014:
    00000070: 	retq # Offset: 112
    00000071: 	nopl	(%rax) # Size: 7
.Ltmp5015:
    00000078: 	addq	$0x1, %rsi
    0000007c: 	leaq	0x4(%rcx), %rax
    00000080: 	subq	%rsi, %rdx
    00000083: 	je	.Ltmp5016 # Offset: 131
    00000085: 	movq	%rdx, %rsi
    00000088: 	shrq	$0x3f, %rsi
    0000008c: 	addq	%rdx, %rsi
    0000008f: 	sarq	%rsi
    00000092: 	leaq	(%rax,%rsi,4), %rcx
    00000096: 	movss	(%rcx), %xmm1
    0000009a: 	comiss	%xmm0, %xmm1
    0000009d: 	ja	.Ltmp5018 # Offset: 157
    0000009f: 	addq	$0x1, %rsi
    000000a3: 	leaq	0x4(%rcx), %rax
    000000a7: 	subq	%rsi, %rdx
    000000aa: 	je	.Ltmp5016 # Offset: 170
    000000ac: 	movq	%rdx, %rsi
    000000af: 	shrq	$0x3f, %rsi
    000000b3: 	addq	%rdx, %rsi
    000000b6: 	sarq	%rsi
    000000b9: 	leaq	(%rax,%rsi,4), %rcx
    000000bd: 	movss	(%rcx), %xmm1
    000000c1: 	comiss	%xmm0, %xmm1
    000000c4: 	ja	.Ltmp5018 # Offset: 196
    000000c6: 	addq	$0x1, %rsi
    000000ca: 	leaq	0x4(%rcx), %rdi
    000000ce: 	subq	%rsi, %rdx
    000000d1: 	movq	%rdx, %rsi
    000000d4: 	callq	_Z23upper_bound_recur_innerIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEflET_S7_T0_T1_ # Offset: 212
    000000d9: 	jmp	.Ltmp5016 # Offset: 217
    000000db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5018:
    000000e0: 	movq	%rax, %rdi
    000000e3: 	callq	_Z23upper_bound_recur_innerIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEflET_S7_T0_T1_ # Offset: 227
    000000e8: 	jmp	.Ltmp5016 # Offset: 232
    000000ed: 	nopl	(%rax) # Size: 3
.Ltmp5017:
    000000f0: 	addq	$0x1, %r8
    000000f4: 	addq	$0x4, %rdi
    000000f8: 	subq	%r8, %rsi
    000000fb: 	callq	_Z23upper_bound_recur_innerIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEflET_S7_T0_T1_ # Offset: 251
    00000100: 	jmp	.Ltmp5016 # Offset: 256
DWARF CFI Instructions:
    <empty>
End of Function "_Z17upper_bound_recurIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfET_S7_S7_T0_"

Binary Function "_Z15TestSearchArrayIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEPFbS6_S6_fEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 467
  State       : disassembled
  Address     : 0x2baa0
  Size        : 0x1d8
  MaxSize     : 0x1e0
  Offset      : 0x2baa0
  Section     : .text
  Orc Section : .local.text._Z15TestSearchArrayIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEPFbS6_S6_fEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0466:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rcx, %r15
    00000009: 	pushq	%r14
    0000000b: 	movq	%rsi, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %r12
    00000015: 	movl	$0x1000, %edi
    0000001a: 	pushq	%rbp
    0000001b: 	pushq	%rbx
    0000001c: 	subq	$0x28, %rsp
    00000020: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000027: 	movq	%rdx, 0x10(%rsp)
    0000002c: 	movq	%r8, 0x18(%rsp)
    00000031: 	movb	%r9b, 0xf(%rsp)
    00000036: 	callq	_Znwm@PLT # Offset: 54
    0000003b: 	movq	%rax, %r13
    0000003e: 	movl	$0x0, (%rax)
    00000044: 	addq	$0x4, %rax
    00000048: 	leaq	0x1000(%r13), %rsi
    0000004f: 	cmpq	%rsi, %rax
    00000052: 	je	.Ltmp5019 # Offset: 82
    00000054: 	leaq	0xc(%r13), %rdi
    00000058: 	movq	$0x0, 0x4(%r13)
    00000060: 	movq	$0x0, 0xff8(%r13)
    0000006b: 	andq	$-0x8, %rdi
    0000006f: 	subq	%rdi, %rax
    00000072: 	movq	%rax, %rcx
    00000075: 	xorl	%eax, %eax
    00000077: 	addl	$0xffc, %ecx
    0000007d: 	shrl	$0x3, %ecx
    00000080: 	rep		stosq	%rax, %es:(%rdi)
.Ltmp5019:
    00000083: 	movabsq	$0x5851f42d4c957f2d, %r8
    0000008d: 	movq	%r13, %rcx
    00000090: 	movabsq	$0x14057b7ef767814f, %rdi
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5020:
    000000a0: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000000a7: 	addq	$0x4, %rcx
    000000ab: 	imulq	%r8, %rax
    000000af: 	addq	%rdi, %rax
    000000b2: 	movq	%rax, %rdx
    000000b5: 	movq	%rax, %r9
    000000b8: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000000bf: 	shrq	$0x14, %rdx
    000000c3: 	shlq	$0x17, %r9
    000000c7: 	xorq	%r9, %rdx
    000000ca: 	xorq	%rdx, %rax
    000000cd: 	xorl	%edx, %edx
    000000cf: 	divq	0x10(%rsp)
    000000d4: 	movss	(%r12,%rdx,4), %xmm0
    000000da: 	movss	%xmm0, -0x4(%rcx)
    000000df: 	cmpq	%rcx, %rsi
    000000e2: 	jne	.Ltmp5020 # Offset: 226
    000000e4: 	callq	clock@PLT # Offset: 228
    000000e9: 	xorl	%ebx, %ebx
    000000eb: 	xorl	%ebp, %ebp
    000000ed: 	movq	%rax, start_time(%rip)
.Ltmp5024:
    000000f4: 	leaq	0xc8(%rbp), %rax
    000000fb: 	movq	%rax, (%rsp)
    000000ff: 	nop # Size: 1
.Ltmp5022:
    00000100: 	movq	%rbp, %rax
    00000103: 	movq	%r14, %rsi
    00000106: 	addq	$0x1, %rbp
    0000010a: 	movq	%r12, %rdi
    0000010d: 	andl	$0x3ff, %eax
    00000112: 	movss	(%r13,%rax,4), %xmm0
    00000119: 	callq	*%r15 # Offset: 281
    0000011c: 	testb	%al, %al
    0000011e: 	jne	.Ltmp5021 # Offset: 286
    00000120: 	cmpb	$0x0, 0xf(%rsp)
    00000125: 	movl	$0x1, %eax
    0000012a: 	cmovel	%eax, %ebx
.Ltmp5021:
    0000012d: 	cmpq	(%rsp), %rbp
    00000131: 	jne	.Ltmp5022 # Offset: 305
    00000133: 	callq	clock@PLT # Offset: 307
    00000138: 	movsd	gMinimumTimeTarget(%rip), %xmm1
    00000140: 	pxor	%xmm0, %xmm0
    00000144: 	movq	%rax, end_time(%rip)
    0000014b: 	subq	start_time(%rip), %rax
    00000152: 	cvtsi2sd	%rax, %xmm0
    00000157: 	divsd	DATAat0x34410(%rip), %xmm0
    0000015f: 	comisd	%xmm0, %xmm1
    00000163: 	jbe	.Ltmp5023 # Offset: 355
    00000165: 	cmpq	$0x5f5e0ff, %rbp
    0000016c: 	jbe	.Ltmp5024 # Offset: 364
.Ltmp5023:
    0000016e: 	movq	0x18(%rsp), %rdx
    00000173: 	movq	0x10(%rsp), %rdi
    00000178: 	movq	%rbp, %rsi
    0000017b: 	callq	_Z13record_resultdmmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 379
    00000180: 	testb	%bl, %bl
    00000182: 	jne	.Ltmp5025 # Offset: 386
.Ltmp5026:
    00000184: 	addq	$0x28, %rsp
    00000188: 	movq	%r13, %rdi
    0000018b: 	movl	$0x1000, %esi
    00000190: 	popq	%rbx
    00000191: 	popq	%rbp
    00000192: 	popq	%r12
    00000194: 	popq	%r13
    00000196: 	popq	%r14
    00000198: 	popq	%r15
    0000019a: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 410
.Ltmp5025:
    0000019f: 	movq	0x18(%rsp), %rax
    000001a4: 	leaq	DATAat0x34137(%rip), %rsi
    000001ab: 	movl	$0x1, %edi
    000001b0: 	movq	(%rax), %rdx
    000001b3: 	xorl	%eax, %eax
    000001b5: 	callq	__printf_chk@PLT # Offset: 437
    000001ba: 	jmp	.Ltmp5026 # Offset: 442
    000001bc: 	endbr64
    000001c0: 	movq	%rax, %rbp
    000001c3: 	movq	%r13, %rdi
    000001c6: 	movl	$0x1000, %esi
    000001cb: 	callq	_ZdlPvm@PLT # Offset: 459
    000001d0: 	movq	%rbp, %rdi
    000001d3: 	callq	_Unwind_Resume@PLT # Offset: 467
DWARF CFI Instructions:
    <empty>
End of Function "_Z15TestSearchArrayIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEPFbS6_S6_fEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEPFbS6_S6_fEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 468
  State       : disassembled
  Address     : 0x2bc80
  Size        : 0x2ba
  MaxSize     : 0x2c0
  Offset      : 0x2bc80
  Section     : .text
  Orc Section : .local.text._Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEPFbS6_S6_fEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0467:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%r8, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rsi, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdx, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%rdi, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	subq	$0x48, %rsp
    0000001e: 	movq	%rcx, (%rsp)
    00000022: 	movq	%fs:0x28, %rax
    0000002b: 	movq	%rax, 0x38(%rsp)
    00000030: 	xorl	%eax, %eax
    00000032: 	cmpq	%rsi, %rdi
    00000035: 	je	.Ltmp5027 # Offset: 53
    00000037: 	leaq	-0x4(%rsi), %rdx
    0000003b: 	movq	%rdi, %rax
    0000003e: 	subq	%rdi, %rdx
    00000041: 	movq	%rdx, %rcx
    00000044: 	shrq	$0x2, %rcx
    00000048: 	addq	$0x1, %rcx
    0000004c: 	cmpq	$0x8, %rdx
    00000050: 	jbe	.Ltmp5028 # Offset: 80
    00000052: 	movq	%rcx, %rdx
    00000055: 	movaps	DATAat0x34560(%rip), %xmm0
    0000005c: 	shrq	$0x2, %rdx
    00000060: 	shlq	$0x4, %rdx
    00000064: 	addq	%rdi, %rdx
    00000067: 	nopw	(%rax,%rax) # Size: 9
.Ltmp5029:
    00000070: 	movups	%xmm0, (%rax)
    00000073: 	addq	$0x10, %rax
    00000077: 	cmpq	%rdx, %rax
    0000007a: 	jne	.Ltmp5029 # Offset: 122
    0000007c: 	movq	%rcx, %rdx
    0000007f: 	andq	$-0x4, %rdx
    00000083: 	leaq	(%rbp,%rdx,4), %rax
    00000088: 	cmpq	%rcx, %rdx
    0000008b: 	je	.Ltmp5027 # Offset: 139
.Ltmp5028:
    0000008d: 	movss	DATAat0x34560(%rip), %xmm0
    00000095: 	leaq	0x4(%rax), %rdx
    00000099: 	movss	%xmm0, (%rax)
    0000009d: 	cmpq	%rdx, %r13
    000000a0: 	je	.Ltmp5027 # Offset: 160
    000000a2: 	leaq	0x8(%rax), %rdx
    000000a6: 	movss	%xmm0, 0x4(%rax)
    000000ab: 	cmpq	%rdx, %r13
    000000ae: 	je	.Ltmp5027 # Offset: 174
    000000b0: 	movss	%xmm0, 0x8(%rax)
.Ltmp5027:
    000000b5: 	leaq	0x10(%rsp), %r14
    000000ba: 	leaq	DATAat0x34160(%rip), %rdx
    000000c1: 	movq	%r15, %rsi
    000000c4: 	movzbl	%r9b, %ebx
    000000c8: 	movq	%r14, %rdi
    000000cb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 203
    000000d0: 	movq	(%rsp), %rcx
    000000d4: 	movl	%ebx, %r9d
    000000d7: 	movq	%r14, %r8
    000000da: 	movq	%r12, %rdx
    000000dd: 	movq	%r13, %rsi
    000000e0: 	movq	%rbp, %rdi
    000000e3: 	callq	_Z15TestSearchArrayIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEPFbS6_S6_fEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 227
    000000e8: 	movq	0x10(%rsp), %rdi
    000000ed: 	leaq	0x20(%rsp), %rax
    000000f2: 	movq	%rax, 0x8(%rsp)
    000000f7: 	cmpq	%rax, %rdi
    000000fa: 	je	.Ltmp5030 # Offset: 250
    000000fc: 	movq	0x20(%rsp), %rax
    00000101: 	leaq	0x1(%rax), %rsi
    00000105: 	callq	_ZdlPvm@PLT # Offset: 261
.Ltmp5030:
    0000010a: 	cmpq	$0x9, %r12
    0000010e: 	jbe	.Ltmp5031 # Offset: 270
    00000114: 	movabsq	$-0x3333333333333333, %rdx
    0000011e: 	movq	%r12, %rax
    00000121: 	mulq	%rdx
    00000124: 	shrq	$0x3, %rdx
.Ltmp5041:
    00000128: 	movss	DATAat0x34570(%rip), %xmm1
    00000130: 	movq	%rbp, %rdi
    00000133: 	xorl	%esi, %esi
    00000135: 	pxor	%xmm0, %xmm0
    00000139: 	cmpq	$0x0, %r12
    0000013d: 	jbe	.Ltmp5032 # Offset: 317
    0000013f: 	nop # Size: 1
.Ltmp5035:
    00000140: 	leaq	0x4(%rdi), %rax
    00000144: 	xorl	%ecx, %ecx
    00000146: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp5034:
    00000150: 	addq	$0x1, %rcx
    00000154: 	movq	%rax, %rdi
    00000157: 	movss	%xmm0, -0x4(%rax)
    0000015c: 	addq	$0x1, %rsi
    00000160: 	addq	$0x4, %rax
    00000164: 	cmpq	%rdx, %rcx
    00000167: 	jae	.Ltmp5033 # Offset: 359
    00000169: 	cmpq	%rsi, %r12
    0000016c: 	ja	.Ltmp5034 # Offset: 364
.Ltmp5033:
    0000016e: 	addss	%xmm1, %xmm0
    00000172: 	cmpq	%rsi, %r12
    00000175: 	ja	.Ltmp5035 # Offset: 373
.Ltmp5032:
    00000177: 	leaq	DATAat0x3416e(%rip), %rdx
    0000017e: 	movq	%r15, %rsi
    00000181: 	movq	%r14, %rdi
    00000184: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 388
    00000189: 	movq	(%rsp), %rcx
    0000018d: 	movl	%ebx, %r9d
    00000190: 	movq	%r14, %r8
    00000193: 	movq	%r12, %rdx
    00000196: 	movq	%r13, %rsi
    00000199: 	movq	%rbp, %rdi
    0000019c: 	callq	_Z15TestSearchArrayIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEPFbS6_S6_fEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 412
    000001a1: 	movq	0x10(%rsp), %rdi
    000001a6: 	cmpq	0x8(%rsp), %rdi
    000001ab: 	je	.Ltmp5036 # Offset: 427
    000001ad: 	movq	0x20(%rsp), %rax
    000001b2: 	leaq	0x1(%rax), %rsi
    000001b6: 	callq	_ZdlPvm@PLT # Offset: 438
.Ltmp5036:
    000001bb: 	cmpq	%r13, %rbp
    000001be: 	je	.Ltmp5037 # Offset: 446
    000001c0: 	leaq	-0x4(%r13), %rcx
    000001c4: 	xorl	%eax, %eax
    000001c6: 	subq	%rbp, %rcx
    000001c9: 	shrq	$0x2, %rcx
    000001cd: 	nopl	(%rax) # Size: 3
.Ltmp5038:
    000001d0: 	pxor	%xmm0, %xmm0
    000001d4: 	movq	%rax, %rdx
    000001d7: 	cvtsi2ss	%rax, %xmm0
    000001dc: 	movss	%xmm0, (%rbp,%rax,4)
    000001e2: 	addq	$0x1, %rax
    000001e6: 	cmpq	%rcx, %rdx
    000001e9: 	jne	.Ltmp5038 # Offset: 489
.Ltmp5037:
    000001eb: 	movq	%r13, %rsi
    000001ee: 	movq	%rbp, %rdi
    000001f1: 	callq	_Z18quicksort2_forwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_ # Offset: 497
    000001f6: 	leaq	DATAat0x34184(%rip), %rdx
    000001fd: 	movq	%r15, %rsi
    00000200: 	movq	%r14, %rdi
    00000203: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 515
    00000208: 	movq	(%rsp), %rcx
    0000020c: 	movl	%ebx, %r9d
    0000020f: 	movq	%r14, %r8
    00000212: 	movq	%r12, %rdx
    00000215: 	movq	%r13, %rsi
    00000218: 	movq	%rbp, %rdi
    0000021b: 	callq	_Z15TestSearchArrayIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEPFbS6_S6_fEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 539
    00000220: 	movq	0x10(%rsp), %rdi
    00000225: 	cmpq	0x8(%rsp), %rdi
    0000022a: 	je	.Ltmp5039 # Offset: 554
    0000022c: 	movq	0x20(%rsp), %rax
    00000231: 	leaq	0x1(%rax), %rsi
    00000235: 	callq	_ZdlPvm@PLT # Offset: 565
.Ltmp5039:
    0000023a: 	movq	0x38(%rsp), %rax
    0000023f: 	subq	%fs:0x28, %rax
    00000248: 	jne	.Ltmp5040 # Offset: 584
    0000024a: 	addq	$0x48, %rsp
    0000024e: 	popq	%rbx
    0000024f: 	popq	%rbp
    00000250: 	popq	%r12
    00000252: 	popq	%r13
    00000254: 	popq	%r14
    00000256: 	popq	%r15
    00000258: 	retq # Offset: 600
.Ltmp5031:
    00000259: 	testq	%r12, %r12
    0000025c: 	je	.Ltmp5032 # Offset: 604
    00000262: 	movl	$0x1, %edx
    00000267: 	jmp	.Ltmp5041 # Offset: 615
.Ltmp5040:
    0000026c: 	callq	__stack_chk_fail@PLT # Offset: 620
    00000271: 	endbr64
.Ltmp5043:
    00000275: 	movq	%rax, %rbp
    00000278: 	jmp	.Ltmp5042 # Offset: 632
    0000027a: 	endbr64
    0000027e: 	jmp	.Ltmp5043 # Offset: 638
    00000280: 	endbr64
    00000284: 	movq	%rax, %rbp
    00000287: 	movq	0x10(%rsp), %rdi
    0000028c: 	leaq	0x20(%rsp), %rax
    00000291: 	cmpq	%rax, %rdi
    00000294: 	je	.Ltmp5044 # Offset: 660
.Ltmp5045:
    00000296: 	movq	0x20(%rsp), %rax
    0000029b: 	leaq	0x1(%rax), %rsi
    0000029f: 	callq	_ZdlPvm@PLT # Offset: 671
.Ltmp5044:
    000002a4: 	movq	%rbp, %rdi
    000002a7: 	callq	_Unwind_Resume@PLT # Offset: 679
.Ltmp5042:
    000002ac: 	movq	0x10(%rsp), %rdi
    000002b1: 	cmpq	0x8(%rsp), %rdi
    000002b6: 	jne	.Ltmp5045 # Offset: 694
    000002b8: 	jmp	.Ltmp5044 # Offset: 696
DWARF CFI Instructions:
    <empty>
End of Function "_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEPFbS6_S6_fEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z16TestOneContainerIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 469
  State       : disassembled
  Address     : 0x2bf40
  Size        : 0x4de
  MaxSize     : 0x4e0
  Offset      : 0x2bf40
  Section     : .text
  Orc Section : .local.text._Z16TestOneContainerIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0468:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdx, %r15
    00000009: 	leaq	DATAat0x3418f(%rip), %rdx
    00000010: 	pushq	%r14
    00000012: 	movq	%rsi, %r14
    00000015: 	movq	%rcx, %rsi
    00000018: 	pushq	%r13
    0000001a: 	movq	%rdi, %r13
    0000001d: 	pushq	%r12
    0000001f: 	movq	%rcx, %r12
    00000022: 	pushq	%rbp
    00000023: 	pushq	%rbx
    00000024: 	subq	$0x38, %rsp
    00000028: 	movq	%fs:0x28, %rax
    00000031: 	movq	%rax, 0x28(%rsp)
    00000036: 	xorl	%eax, %eax
    00000038: 	movq	%rsp, %rbp
    0000003b: 	movq	%rbp, %rdi
    0000003e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 62
    00000043: 	xorl	%r9d, %r9d
    00000046: 	movq	%rbp, %r8
    00000049: 	movq	%r15, %rdx
    0000004c: 	leaq	_Z14std_lowerboundIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfET_S7_S7_T0_(%rip), %rcx
    00000053: 	movq	%r14, %rsi
    00000056: 	movq	%r13, %rdi
    00000059: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEPFS6_S6_S6_fEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 89
    0000005e: 	movq	(%rsp), %rdi
    00000062: 	leaq	0x10(%rsp), %rbx
    00000067: 	cmpq	%rbx, %rdi
    0000006a: 	je	.Ltmp5046 # Offset: 106
    0000006c: 	movq	0x10(%rsp), %rax
    00000071: 	leaq	0x1(%rax), %rsi
    00000075: 	callq	_ZdlPvm@PLT # Offset: 117
.Ltmp5046:
    0000007a: 	leaq	DATAat0x341a1(%rip), %rdx
    00000081: 	movq	%r12, %rsi
    00000084: 	movq	%rbp, %rdi
    00000087: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 135
    0000008c: 	xorl	%r9d, %r9d
    0000008f: 	movq	%rbp, %r8
    00000092: 	movq	%r15, %rdx
    00000095: 	leaq	_Z12lower_bound1IN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfET_S7_S7_T0_(%rip), %rcx
    0000009c: 	movq	%r14, %rsi
    0000009f: 	movq	%r13, %rdi
    000000a2: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEPFS6_S6_S6_fEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 162
    000000a7: 	movq	(%rsp), %rdi
    000000ab: 	cmpq	%rbx, %rdi
    000000ae: 	je	.Ltmp5047 # Offset: 174
    000000b0: 	movq	0x10(%rsp), %rax
    000000b5: 	leaq	0x1(%rax), %rsi
    000000b9: 	callq	_ZdlPvm@PLT # Offset: 185
.Ltmp5047:
    000000be: 	leaq	DATAat0x341af(%rip), %rdx
    000000c5: 	movq	%r12, %rsi
    000000c8: 	movq	%rbp, %rdi
    000000cb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 203
    000000d0: 	xorl	%r9d, %r9d
    000000d3: 	movq	%rbp, %r8
    000000d6: 	movq	%r15, %rdx
    000000d9: 	leaq	_Z12lower_bound2IN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfET_S7_S7_T0_(%rip), %rcx
    000000e0: 	movq	%r14, %rsi
    000000e3: 	movq	%r13, %rdi
    000000e6: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEPFS6_S6_S6_fEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 230
    000000eb: 	movq	(%rsp), %rdi
    000000ef: 	cmpq	%rbx, %rdi
    000000f2: 	je	.Ltmp5048 # Offset: 242
    000000f4: 	movq	0x10(%rsp), %rax
    000000f9: 	leaq	0x1(%rax), %rsi
    000000fd: 	callq	_ZdlPvm@PLT # Offset: 253
.Ltmp5048:
    00000102: 	leaq	DATAat0x341bd(%rip), %rdx
    00000109: 	movq	%r12, %rsi
    0000010c: 	movq	%rbp, %rdi
    0000010f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 271
    00000114: 	xorl	%r9d, %r9d
    00000117: 	movq	%rbp, %r8
    0000011a: 	movq	%r15, %rdx
    0000011d: 	leaq	_Z17lower_bound_recurIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfET_S7_S7_T0_(%rip), %rcx
    00000124: 	movq	%r14, %rsi
    00000127: 	movq	%r13, %rdi
    0000012a: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEPFS6_S6_S6_fEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 298
    0000012f: 	movq	(%rsp), %rdi
    00000133: 	cmpq	%rbx, %rdi
    00000136: 	je	.Ltmp5049 # Offset: 310
    00000138: 	movq	0x10(%rsp), %rax
    0000013d: 	leaq	0x1(%rax), %rsi
    00000141: 	callq	_ZdlPvm@PLT # Offset: 321
.Ltmp5049:
    00000146: 	leaq	DATAat0x341d4(%rip), %rdx
    0000014d: 	movq	%r12, %rsi
    00000150: 	movq	%rbp, %rdi
    00000153: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 339
    00000158: 	movq	%rbp, %r8
    0000015b: 	movq	%r15, %rdx
    0000015e: 	movq	%r14, %rsi
    00000161: 	movl	$0x1, %r9d
    00000167: 	leaq	_Z14std_upperboundIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfET_S7_S7_T0_(%rip), %rcx
    0000016e: 	movq	%r13, %rdi
    00000171: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEPFS6_S6_S6_fEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 369
    00000176: 	movq	(%rsp), %rdi
    0000017a: 	cmpq	%rbx, %rdi
    0000017d: 	je	.Ltmp5050 # Offset: 381
    0000017f: 	movq	0x10(%rsp), %rax
    00000184: 	leaq	0x1(%rax), %rsi
    00000188: 	callq	_ZdlPvm@PLT # Offset: 392
.Ltmp5050:
    0000018d: 	leaq	DATAat0x341e6(%rip), %rdx
    00000194: 	movq	%r12, %rsi
    00000197: 	movq	%rbp, %rdi
    0000019a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 410
    0000019f: 	movq	%rbp, %r8
    000001a2: 	movq	%r15, %rdx
    000001a5: 	movq	%r14, %rsi
    000001a8: 	movl	$0x1, %r9d
    000001ae: 	leaq	_Z12upper_bound1IN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfET_S7_S7_T0_(%rip), %rcx
    000001b5: 	movq	%r13, %rdi
    000001b8: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEPFS6_S6_S6_fEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 440
    000001bd: 	movq	(%rsp), %rdi
    000001c1: 	cmpq	%rbx, %rdi
    000001c4: 	je	.Ltmp5051 # Offset: 452
    000001c6: 	movq	0x10(%rsp), %rax
    000001cb: 	leaq	0x1(%rax), %rsi
    000001cf: 	callq	_ZdlPvm@PLT # Offset: 463
.Ltmp5051:
    000001d4: 	leaq	DATAat0x341f4(%rip), %rdx
    000001db: 	movq	%r12, %rsi
    000001de: 	movq	%rbp, %rdi
    000001e1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 481
    000001e6: 	movq	%rbp, %r8
    000001e9: 	movq	%r15, %rdx
    000001ec: 	movq	%r14, %rsi
    000001ef: 	movl	$0x1, %r9d
    000001f5: 	leaq	_Z12upper_bound2IN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfET_S7_S7_T0_(%rip), %rcx
    000001fc: 	movq	%r13, %rdi
    000001ff: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEPFS6_S6_S6_fEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 511
    00000204: 	movq	(%rsp), %rdi
    00000208: 	cmpq	%rbx, %rdi
    0000020b: 	je	.Ltmp5052 # Offset: 523
    0000020d: 	movq	0x10(%rsp), %rax
    00000212: 	leaq	0x1(%rax), %rsi
    00000216: 	callq	_ZdlPvm@PLT # Offset: 534
.Ltmp5052:
    0000021b: 	leaq	DATAat0x34202(%rip), %rdx
    00000222: 	movq	%r12, %rsi
    00000225: 	movq	%rbp, %rdi
    00000228: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 552
    0000022d: 	movq	%rbp, %r8
    00000230: 	movq	%r15, %rdx
    00000233: 	movq	%r14, %rsi
    00000236: 	movl	$0x1, %r9d
    0000023c: 	leaq	_Z17upper_bound_recurIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfET_S7_S7_T0_(%rip), %rcx
    00000243: 	movq	%r13, %rdi
    00000246: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEPFS6_S6_S6_fEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 582
    0000024b: 	movq	(%rsp), %rdi
    0000024f: 	cmpq	%rbx, %rdi
    00000252: 	je	.Ltmp5053 # Offset: 594
    00000254: 	movq	0x10(%rsp), %rax
    00000259: 	leaq	0x1(%rax), %rsi
    0000025d: 	callq	_ZdlPvm@PLT # Offset: 605
.Ltmp5053:
    00000262: 	leaq	DATAat0x34219(%rip), %rdx
    00000269: 	movq	%r12, %rsi
    0000026c: 	movq	%rbp, %rdi
    0000026f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 623
    00000274: 	xorl	%r9d, %r9d
    00000277: 	movq	%rbp, %r8
    0000027a: 	movq	%r15, %rdx
    0000027d: 	leaq	_Z16std_binarysearchIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEbT_S7_T0_(%rip), %rcx
    00000284: 	movq	%r14, %rsi
    00000287: 	movq	%r13, %rdi
    0000028a: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEPFbS6_S6_fEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 650
    0000028f: 	movq	(%rsp), %rdi
    00000293: 	cmpq	%rbx, %rdi
    00000296: 	je	.Ltmp5054 # Offset: 662
    00000298: 	movq	0x10(%rsp), %rax
    0000029d: 	leaq	0x1(%rax), %rsi
    000002a1: 	callq	_ZdlPvm@PLT # Offset: 673
.Ltmp5054:
    000002a6: 	leaq	DATAat0x3422d(%rip), %rdx
    000002ad: 	movq	%r12, %rsi
    000002b0: 	movq	%rbp, %rdi
    000002b3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 691
    000002b8: 	xorl	%r9d, %r9d
    000002bb: 	movq	%rbp, %r8
    000002be: 	movq	%r15, %rdx
    000002c1: 	leaq	_Z13binarysearch1IN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEbT_S7_T0_(%rip), %rcx
    000002c8: 	movq	%r14, %rsi
    000002cb: 	movq	%r13, %rdi
    000002ce: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEPFbS6_S6_fEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 718
    000002d3: 	movq	(%rsp), %rdi
    000002d7: 	cmpq	%rbx, %rdi
    000002da: 	je	.Ltmp5055 # Offset: 730
    000002dc: 	movq	0x10(%rsp), %rax
    000002e1: 	leaq	0x1(%rax), %rsi
    000002e5: 	callq	_ZdlPvm@PLT # Offset: 741
.Ltmp5055:
    000002ea: 	leaq	DATAat0x3423d(%rip), %rdx
    000002f1: 	movq	%r12, %rsi
    000002f4: 	movq	%rbp, %rdi
    000002f7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 759
    000002fc: 	xorl	%r9d, %r9d
    000002ff: 	movq	%rbp, %r8
    00000302: 	movq	%r15, %rdx
    00000305: 	leaq	_Z13binarysearch2IN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEbT_S7_T0_(%rip), %rcx
    0000030c: 	movq	%r14, %rsi
    0000030f: 	movq	%r13, %rdi
    00000312: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEPFbS6_S6_fEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 786
    00000317: 	movq	(%rsp), %rdi
    0000031b: 	cmpq	%rbx, %rdi
    0000031e: 	je	.Ltmp5056 # Offset: 798
    00000320: 	movq	0x10(%rsp), %rax
    00000325: 	leaq	0x1(%rax), %rsi
    00000329: 	callq	_ZdlPvm@PLT # Offset: 809
.Ltmp5056:
    0000032e: 	leaq	DATAat0x3424d(%rip), %rdx
    00000335: 	movq	%r12, %rsi
    00000338: 	movq	%rbp, %rdi
    0000033b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 827
    00000340: 	xorl	%r9d, %r9d
    00000343: 	movq	%rbp, %r8
    00000346: 	movq	%r15, %rdx
    00000349: 	leaq	_Z13binarysearch3IN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEbT_S7_T0_(%rip), %rcx
    00000350: 	movq	%r14, %rsi
    00000353: 	movq	%r13, %rdi
    00000356: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEPFbS6_S6_fEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 854
    0000035b: 	movq	(%rsp), %rdi
    0000035f: 	cmpq	%rbx, %rdi
    00000362: 	je	.Ltmp5057 # Offset: 866
    00000364: 	movq	0x10(%rsp), %rax
    00000369: 	leaq	0x1(%rax), %rsi
    0000036d: 	callq	_ZdlPvm@PLT # Offset: 877
.Ltmp5057:
    00000372: 	leaq	DATAat0x3425d(%rip), %rdx
    00000379: 	movq	%r12, %rsi
    0000037c: 	movq	%rbp, %rdi
    0000037f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 895
    00000384: 	xorl	%r9d, %r9d
    00000387: 	movq	%rbp, %r8
    0000038a: 	movq	%r15, %rdx
    0000038d: 	leaq	_Z13binarysearch4IN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEbT_S7_T0_(%rip), %rcx
    00000394: 	movq	%r14, %rsi
    00000397: 	movq	%r13, %rdi
    0000039a: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEPFbS6_S6_fEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 922
    0000039f: 	movq	(%rsp), %rdi
    000003a3: 	cmpq	%rbx, %rdi
    000003a6: 	je	.Ltmp5058 # Offset: 934
    000003a8: 	movq	0x10(%rsp), %rax
    000003ad: 	leaq	0x1(%rax), %rsi
    000003b1: 	callq	_ZdlPvm@PLT # Offset: 945
.Ltmp5058:
    000003b6: 	leaq	DATAat0x3426d(%rip), %rdx
    000003bd: 	movq	%r12, %rsi
    000003c0: 	movq	%rbp, %rdi
    000003c3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 963
    000003c8: 	xorl	%r9d, %r9d
    000003cb: 	movq	%rbp, %r8
    000003ce: 	movq	%r15, %rdx
    000003d1: 	leaq	_Z18binarysearch_recurIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEbT_S7_T0_(%rip), %rcx
    000003d8: 	movq	%r14, %rsi
    000003db: 	movq	%r13, %rdi
    000003de: 	callq	_Z13TestOneSearchIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEPFbS6_S6_fEEvT_S9_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 990
    000003e3: 	movq	(%rsp), %rdi
    000003e7: 	cmpq	%rbx, %rdi
    000003ea: 	je	.Ltmp5059 # Offset: 1002
    000003ec: 	movq	0x10(%rsp), %rax
    000003f1: 	leaq	0x1(%rax), %rsi
    000003f5: 	callq	_ZdlPvm@PLT # Offset: 1013
.Ltmp5059:
    000003fa: 	movq	%rbp, %rdi
    000003fd: 	leaq	DATAat0x34286(%rip), %rdx
    00000404: 	movq	%r12, %rsi
    00000407: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1031
    0000040c: 	movq	%rbp, %rdi
    0000040f: 	callq	_Z9summarizeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1039
    00000414: 	movq	(%rsp), %rdi
    00000418: 	cmpq	%rbx, %rdi
    0000041b: 	je	.Ltmp5060 # Offset: 1051
    0000041d: 	movq	0x10(%rsp), %rax
    00000422: 	leaq	0x1(%rax), %rsi
    00000426: 	callq	_ZdlPvm@PLT # Offset: 1062
.Ltmp5060:
    0000042b: 	movq	0x28(%rsp), %rax
    00000430: 	subq	%fs:0x28, %rax
    00000439: 	jne	.Ltmp5061 # Offset: 1081
    0000043b: 	addq	$0x38, %rsp
    0000043f: 	popq	%rbx
    00000440: 	popq	%rbp
    00000441: 	popq	%r12
    00000443: 	popq	%r13
    00000445: 	popq	%r14
    00000447: 	popq	%r15
    00000449: 	retq # Offset: 1097
.Ltmp5061:
    0000044a: 	callq	__stack_chk_fail@PLT # Offset: 1098
    0000044f: 	endbr64
.Ltmp5063:
    00000453: 	movq	%rax, %rbp
    00000456: 	jmp	.Ltmp5062 # Offset: 1110
    00000458: 	endbr64
    0000045c: 	jmp	.Ltmp5063 # Offset: 1116
    0000045e: 	endbr64
    00000462: 	jmp	.Ltmp5063 # Offset: 1122
    00000464: 	endbr64
    00000468: 	jmp	.Ltmp5063 # Offset: 1128
    0000046a: 	endbr64
    0000046e: 	jmp	.Ltmp5063 # Offset: 1134
    00000470: 	endbr64
    00000474: 	jmp	.Ltmp5063 # Offset: 1140
    00000476: 	endbr64
    0000047a: 	jmp	.Ltmp5063 # Offset: 1146
.Ltmp5062:
    0000047c: 	movq	(%rsp), %rdi
    00000480: 	cmpq	%rbx, %rdi
    00000483: 	je	.Ltmp5064 # Offset: 1155
.Ltmp5066:
    00000485: 	movq	0x10(%rsp), %rax
    0000048a: 	leaq	0x1(%rax), %rsi
    0000048e: 	callq	_ZdlPvm@PLT # Offset: 1166
.Ltmp5064:
    00000493: 	movq	%rbp, %rdi
    00000496: 	callq	_Unwind_Resume@PLT # Offset: 1174
    0000049b: 	endbr64
    0000049f: 	jmp	.Ltmp5063 # Offset: 1183
    000004a1: 	endbr64
    000004a5: 	jmp	.Ltmp5063 # Offset: 1189
    000004a7: 	endbr64
    000004ab: 	jmp	.Ltmp5063 # Offset: 1195
    000004ad: 	endbr64
    000004b1: 	jmp	.Ltmp5063 # Offset: 1201
    000004b3: 	endbr64
    000004b7: 	jmp	.Ltmp5063 # Offset: 1207
    000004b9: 	endbr64
    000004bd: 	movq	%rax, %rbp
    000004c0: 	jmp	.Ltmp5065 # Offset: 1216
    000004c2: 	endbr64
    000004c6: 	jmp	.Ltmp5063 # Offset: 1222
    000004c8: 	endbr64
    000004cc: 	jmp	.Ltmp5063 # Offset: 1228
.Ltmp5065:
    000004ce: 	movq	(%rsp), %rdi
    000004d2: 	leaq	0x10(%rsp), %rax
    000004d7: 	cmpq	%rax, %rdi
    000004da: 	jne	.Ltmp5066 # Offset: 1242
    000004dc: 	jmp	.Ltmp5064 # Offset: 1244
DWARF CFI Instructions:
    <empty>
End of Function "_Z16TestOneContainerIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z24binarysearch_recur_innerIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEflEbT_T0_T1_" after disassembly {
  Number      : 470
  State       : disassembled
  Address     : 0x2c420
  Size        : 0x4d
  MaxSize     : 0x50
  Offset      : 0x2c420
  Section     : .text
  Orc Section : .local.text._Z24binarysearch_recur_innerIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEflEbT_T0_T1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0469:
    00000000: 	endbr64
.Ltmp5070:
    00000004: 	testq	%rsi, %rsi
    00000007: 	je	.Ltmp5067 # Offset: 7
    00000009: 	movq	%rsi, %rax
    0000000c: 	shrq	$0x3f, %rax
    00000010: 	addq	%rsi, %rax
    00000013: 	sarq	%rax
    00000016: 	leaq	(%rdi,%rax,4), %rdx
    0000001a: 	movss	(%rdx), %xmm1
    0000001e: 	comiss	%xmm1, %xmm0
    00000021: 	ja	.Ltmp5068 # Offset: 33
    00000023: 	comiss	%xmm0, %xmm1
    00000026: 	ja	.Ltmp5069 # Offset: 38
    00000028: 	movl	$0x1, %eax
    0000002d: 	retq # Offset: 45
    0000002e: 	nop # Size: 2
.Ltmp5067:
    00000030: 	xorl	%eax, %eax
    00000032: 	retq # Offset: 50
    00000033: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5068:
    00000038: 	addq	$0x1, %rax
    0000003c: 	leaq	0x4(%rdx), %rdi
    00000040: 	subq	%rax, %rsi
    00000043: 	jmp	.Ltmp5070 # Offset: 67
    00000045: 	nopl	(%rax) # Size: 3
.Ltmp5069:
    00000048: 	movq	%rax, %rsi
    0000004b: 	jmp	.Ltmp5070 # Offset: 75
DWARF CFI Instructions:
    <empty>
End of Function "_Z24binarysearch_recur_innerIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEflEbT_T0_T1_"

Binary Function "_Z18binarysearch_recurIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEbT_S7_T0_" after disassembly {
  Number      : 471
  State       : disassembled
  Address     : 0x2c470
  Size        : 0xd8
  MaxSize     : 0xe0
  Offset      : 0x2c470
  Section     : .text
  Orc Section : .local.text._Z18binarysearch_recurIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEbT_S7_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0470:
    00000000: 	endbr64
    00000004: 	cmpq	%rdi, %rsi
    00000007: 	je	.Ltmp5071 # Offset: 7
    00000009: 	subq	%rdi, %rsi
    0000000c: 	movq	%rsi, %rax
    0000000f: 	shrq	$0x3f, %rsi
    00000013: 	sarq	$0x2, %rax
    00000017: 	addq	%rax, %rsi
    0000001a: 	sarq	%rsi
    0000001d: 	leaq	(%rdi,%rsi,4), %rdx
    00000021: 	movss	(%rdx), %xmm1
    00000025: 	comiss	%xmm1, %xmm0
    00000028: 	ja	.Ltmp5072 # Offset: 40
    0000002a: 	comiss	%xmm0, %xmm1
    0000002d: 	ja	.Ltmp5073 # Offset: 45
.Ltmp5075:
    0000002f: 	movl	$0x1, %eax
    00000034: 	retq # Offset: 52
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp5071:
    00000038: 	xorl	%eax, %eax
    0000003a: 	retq # Offset: 58
    0000003b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5072:
    00000040: 	addq	$0x1, %rsi
    00000044: 	leaq	0x4(%rdx), %rdi
    00000048: 	subq	%rsi, %rax
    0000004b: 	je	.Ltmp5071 # Offset: 75
    0000004d: 	movq	%rax, %rsi
    00000050: 	shrq	$0x3f, %rsi
    00000054: 	addq	%rax, %rsi
    00000057: 	sarq	%rsi
    0000005a: 	leaq	(%rdi,%rsi,4), %rdx
    0000005e: 	movss	(%rdx), %xmm1
    00000062: 	comiss	%xmm1, %xmm0
    00000065: 	ja	.Ltmp5074 # Offset: 101
    00000067: 	comiss	%xmm0, %xmm1
    0000006a: 	jbe	.Ltmp5075 # Offset: 106
.Ltmp5077:
    0000006c: 	jmp	_Z24binarysearch_recur_innerIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEflEbT_T0_T1_ # TAILCALL  # Offset: 108
    00000071: 	nopl	(%rax) # Size: 7
.Ltmp5073:
    00000078: 	testq	%rsi, %rsi
    0000007b: 	je	.Ltmp5071 # Offset: 123
    0000007d: 	testq	%rax, %rax
    00000080: 	leaq	0x3(%rax), %rdx
    00000084: 	cmovsq	%rdx, %rax
    00000088: 	movq	%rax, %r8
    0000008b: 	andq	$-0x4, %rax
    0000008f: 	addq	%rdi, %rax
    00000092: 	sarq	$0x2, %r8
    00000096: 	movss	(%rax), %xmm1
    0000009a: 	comiss	%xmm1, %xmm0
    0000009d: 	ja	.Ltmp5076 # Offset: 157
    0000009f: 	comiss	%xmm0, %xmm1
    000000a2: 	jbe	.Ltmp5075 # Offset: 162
    000000a4: 	movq	%r8, %rsi
    000000a7: 	jmp	.Ltmp5077 # Offset: 167
    000000a9: 	nopl	(%rax) # Size: 7
.Ltmp5074:
    000000b0: 	leaq	0x4(%rdx), %rdi
    000000b4: 	leaq	0x1(%rsi), %rdx
    000000b8: 	subq	%rdx, %rax
    000000bb: 	movq	%rax, %rsi
    000000be: 	jmp	_Z24binarysearch_recur_innerIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEflEbT_T0_T1_ # TAILCALL  # Offset: 190
    000000c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5076:
    000000c8: 	addq	$0x1, %r8
    000000cc: 	leaq	0x4(%rax), %rdi
    000000d0: 	subq	%r8, %rsi
    000000d3: 	jmp	_Z24binarysearch_recur_innerIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEflEbT_T0_T1_ # TAILCALL  # Offset: 211
DWARF CFI Instructions:
    <empty>
End of Function "_Z18binarysearch_recurIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEbT_S7_T0_"

Binary Function "_ZNSt11_Deque_baseIfSaIfEE17_M_initialize_mapEm" after disassembly {
  Number      : 472
  State       : disassembled
  Address     : 0x2c550
  Size        : 0x17a
  MaxSize     : 0x180
  Offset      : 0x2c550
  Section     : .text
  Orc Section : .local.text._ZNSt11_Deque_baseIfSaIfEE17_M_initialize_mapEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0471:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	pushq	%r14
    00000009: 	shrq	$0x7, %rax
    0000000d: 	pushq	%r13
    0000000f: 	movq	%rsi, %r13
    00000012: 	pushq	%r12
    00000014: 	movq	%rdi, %r12
    00000017: 	pushq	%rbp
    00000018: 	pushq	%rbx
    00000019: 	leaq	0x1(%rax), %rbx
    0000001d: 	addq	$0x3, %rax
    00000021: 	cmpq	$0x8, %rax
    00000025: 	ja	.Ltmp5078 # Offset: 37
    0000002b: 	movl	$0x8, %eax
    00000030: 	movl	$0x40, %edi
.Ltmp5081:
    00000035: 	movq	%rax, 0x8(%r12)
    0000003a: 	callq	_Znwm@PLT # Offset: 58
    0000003f: 	movq	0x8(%r12), %rdx
    00000044: 	movq	%rax, (%r12)
    00000048: 	subq	%rbx, %rdx
    0000004b: 	shrq	%rdx
    0000004e: 	leaq	(%rax,%rdx,8), %r14
    00000052: 	leaq	(%r14,%rbx,8), %rbp
    00000056: 	cmpq	%rbp, %r14
    00000059: 	jae	.Ltmp5079 # Offset: 89
    0000005b: 	movq	%r14, %rbx
    0000005e: 	nop # Size: 2
.Ltmp5080:
    00000060: 	movl	$0x200, %edi
    00000065: 	callq	_Znwm@PLT # Offset: 101
    0000006a: 	movq	%rax, (%rbx)
    0000006d: 	addq	$0x8, %rbx
    00000071: 	cmpq	%rbx, %rbp
    00000074: 	ja	.Ltmp5080 # Offset: 116
.Ltmp5079:
    00000076: 	movq	(%r14), %xmm0
    0000007b: 	movq	(%r14), %rcx
    0000007e: 	andl	$0x7f, %r13d
    00000082: 	subq	$0x8, %rbp
    00000086: 	movq	(%rbp), %rax
    0000008a: 	movq	%r14, %xmm1
    0000008f: 	movq	%rbp, %xmm3
    00000094: 	popq	%rbx
    00000095: 	punpcklqdq	%xmm0, %xmm0
    00000099: 	addq	$0x200, %rcx
    000000a0: 	popq	%rbp
    000000a1: 	movups	%xmm0, 0x10(%r12)
    000000a7: 	movq	%rcx, %xmm0
    000000ac: 	leaq	(%rax,%r13,4), %rcx
    000000b0: 	movq	%rax, %xmm2
    000000b5: 	punpcklqdq	%xmm1, %xmm0
    000000b9: 	addq	$0x200, %rax
    000000bf: 	movups	%xmm0, 0x20(%r12)
    000000c5: 	movq	%rcx, %xmm0
    000000ca: 	punpcklqdq	%xmm2, %xmm0
    000000ce: 	movups	%xmm0, 0x30(%r12)
    000000d4: 	movq	%rax, %xmm0
    000000d9: 	punpcklqdq	%xmm3, %xmm0
    000000dd: 	movups	%xmm0, 0x40(%r12)
    000000e3: 	popq	%r12
    000000e5: 	popq	%r13
    000000e7: 	popq	%r14
    000000e9: 	retq # Offset: 233
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5078:
    000000f0: 	leaq	(,%rax,8), %rdi
    000000f8: 	jmp	.Ltmp5081 # Offset: 248
    000000fd: 	endbr64
    00000101: 	movq	%rax, %rdi
    00000104: 	callq	__cxa_begin_catch@PLT # Offset: 260
.Ltmp5083:
    00000109: 	cmpq	%r14, %rbx
    0000010c: 	jbe	.Ltmp5082 # Offset: 268
    0000010e: 	movq	(%r14), %rdi
    00000111: 	movl	$0x200, %esi
    00000116: 	addq	$0x8, %r14
    0000011a: 	callq	_ZdlPvm@PLT # Offset: 282
    0000011f: 	jmp	.Ltmp5083 # Offset: 287
.Ltmp5082:
    00000121: 	callq	__cxa_rethrow@PLT # Offset: 289
    00000126: 	endbr64
    0000012a: 	movq	%rax, %rbp
    0000012d: 	callq	__cxa_end_catch@PLT # Offset: 301
    00000132: 	movq	%rbp, %rdi
    00000135: 	callq	__cxa_begin_catch@PLT # Offset: 309
    0000013a: 	movq	0x8(%r12), %rax
    0000013f: 	movq	(%r12), %rdi
    00000143: 	leaq	(,%rax,8), %rsi
    0000014b: 	callq	_ZdlPvm@PLT # Offset: 331
    00000150: 	movq	$0x0, (%r12)
    00000158: 	movq	$0x0, 0x8(%r12)
    00000161: 	callq	__cxa_rethrow@PLT # Offset: 353
    00000166: 	endbr64
    0000016a: 	movq	%rax, %rbp
    0000016d: 	callq	__cxa_end_catch@PLT # Offset: 365
    00000172: 	movq	%rbp, %rdi
    00000175: 	callq	_Unwind_Resume@PLT # Offset: 373
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt11_Deque_baseIfSaIfEE17_M_initialize_mapEm"

Binary Function "_Z15TestSearchArrayISt15_Deque_iteratorIfRfPfEPFS3_S3_S3_fEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 473
  State       : disassembled
  Address     : 0x2c6d0
  Size        : 0x340
  MaxSize     : 0x340
  Offset      : 0x2c6d0
  Section     : .text
  Orc Section : .local.text._Z15TestSearchArrayISt15_Deque_iteratorIfRfPfEPFS3_S3_S3_fEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0472:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rdi, %r12
    0000000f: 	movl	$0x1000, %edi
    00000014: 	pushq	%rbp
    00000015: 	pushq	%rbx
    00000016: 	movq	%rsi, %rbx
    00000019: 	subq	$0xa8, %rsp
    00000020: 	movq	%rcx, 0x8(%rsp)
    00000025: 	movq	%r8, 0x28(%rsp)
    0000002a: 	movq	%rdx, 0x20(%rsp)
    0000002f: 	movb	%r9b, 0x1f(%rsp)
    00000034: 	movq	%fs:0x28, %rax
    0000003d: 	movq	%rax, 0x98(%rsp)
    00000045: 	xorl	%eax, %eax
    00000047: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    0000004e: 	callq	_Znwm@PLT # Offset: 78
    00000053: 	movq	%rax, %rcx
    00000056: 	movq	%rax, (%rsp)
    0000005a: 	addq	$0x4, %rax
    0000005e: 	leaq	0x1000(%rcx), %r8
    00000065: 	movl	$0x0, -0x4(%rax)
    0000006c: 	cmpq	%r8, %rax
    0000006f: 	je	.Ltmp5084 # Offset: 111
    00000071: 	leaq	0xc(%rcx), %rdi
    00000075: 	movq	$0x0, 0x4(%rcx)
    0000007d: 	movq	$0x0, 0xff8(%rcx)
    00000088: 	andq	$-0x8, %rdi
    0000008c: 	subq	%rdi, %rax
    0000008f: 	movq	%rax, %rcx
    00000092: 	xorl	%eax, %eax
    00000094: 	addl	$0xffc, %ecx
    0000009a: 	shrl	$0x3, %ecx
    0000009d: 	rep		stosq	%rax, %es:(%rdi)
.Ltmp5084:
    000000a0: 	movq	(%r12), %r11
    000000a4: 	movq	0x18(%r12), %r10
    000000a9: 	movabsq	$0x5851f42d4c957f2d, %r9
    000000b3: 	movabsq	$0x14057b7ef767814f, %rdi
    000000bd: 	movq	(%rsp), %rcx
    000000c1: 	movq	0x20(%rsp), %rbp
    000000c6: 	movq	%r11, %rsi
    000000c9: 	subq	0x8(%r12), %rsi
    000000ce: 	sarq	$0x2, %rsi
    000000d2: 	jmp	.Ltmp5085 # Offset: 210
    000000d4: 	nopl	(%rax) # Size: 4
.Ltmp5088:
    000000d8: 	cmpq	$0x7f, %rax
    000000dc: 	jg	.Ltmp5086 # Offset: 220
    000000de: 	leaq	(%r11,%rdx,4), %rax
.Ltmp5089:
    000000e2: 	movss	(%rax), %xmm0
    000000e6: 	addq	$0x4, %rcx
    000000ea: 	movss	%xmm0, -0x4(%rcx)
    000000ef: 	cmpq	%rcx, %r8
    000000f2: 	je	.Ltmp5087 # Offset: 242
.Ltmp5085:
    000000f4: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000000fb: 	imulq	%r9, %rax
    000000ff: 	addq	%rdi, %rax
    00000102: 	movq	%rax, %rdx
    00000105: 	movq	%rax, %r13
    00000108: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    0000010f: 	shrq	$0x14, %rdx
    00000113: 	shlq	$0x17, %r13
    00000117: 	xorq	%r13, %rdx
    0000011a: 	xorq	%rdx, %rax
    0000011d: 	xorl	%edx, %edx
    0000011f: 	divq	%rbp
    00000122: 	movq	%rdx, %rax
    00000125: 	addq	%rsi, %rax
    00000128: 	jns	.Ltmp5088 # Offset: 296
    0000012a: 	movq	%rax, %rdx
    0000012d: 	notq	%rdx
    00000130: 	shrq	$0x7, %rdx
    00000134: 	notq	%rdx
.Ltmp5090:
    00000137: 	movq	%rdx, %r13
    0000013a: 	movq	(%r10,%rdx,8), %rdx
    0000013e: 	shlq	$0x7, %r13
    00000142: 	subq	%r13, %rax
    00000145: 	leaq	(%rdx,%rax,4), %rax
    00000149: 	jmp	.Ltmp5089 # Offset: 329
    0000014b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5086:
    00000150: 	movq	%rax, %rdx
    00000153: 	sarq	$0x7, %rdx
    00000157: 	jmp	.Ltmp5090 # Offset: 343
.Ltmp5087:
    00000159: 	callq	clock@PLT # Offset: 345
    0000015e: 	movb	$0x0, 0x1e(%rsp)
    00000163: 	xorl	%ebp, %ebp
    00000165: 	leaq	0x30(%rsp), %r15
    0000016a: 	movq	%rax, start_time(%rip)
    00000171: 	leaq	0x70(%rsp), %r14
    00000176: 	leaq	0x50(%rsp), %r13
.Ltmp5094:
    0000017b: 	leaq	0xc8(%rbp), %rax
    00000182: 	cmpb	$0x0, 0x1f(%rsp)
    00000187: 	movq	%rax, 0x10(%rsp)
    0000018c: 	jne	.Ltmp5091 # Offset: 396
    00000192: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5092:
    00000198: 	movq	%rbp, %rax
    0000019b: 	movq	(%rsp), %rcx
    0000019f: 	movdqu	(%rbx), %xmm2
    000001a3: 	addq	$0x1, %rbp
    000001a7: 	movdqu	0x10(%rbx), %xmm3
    000001ac: 	andl	$0x3ff, %eax
    000001b1: 	movq	%r14, %rdx
    000001b4: 	movq	%r13, %rsi
    000001b7: 	movdqu	(%r12), %xmm4
    000001bd: 	movdqu	0x10(%r12), %xmm5
    000001c4: 	movaps	%xmm2, 0x70(%rsp)
    000001c9: 	movq	%r15, %rdi
    000001cc: 	movss	(%rcx,%rax,4), %xmm0
    000001d1: 	movaps	%xmm3, 0x80(%rsp)
    000001d9: 	movq	0x8(%rsp), %rax
    000001de: 	movaps	%xmm4, 0x50(%rsp)
    000001e3: 	movaps	%xmm5, 0x60(%rsp)
    000001e8: 	callq	*%rax # Offset: 488
    000001ea: 	movq	0x30(%rsp), %rax
    000001ef: 	cmpq	%rax, (%rbx)
    000001f2: 	movl	$0x1, %esi
    000001f7: 	movzbl	0x1e(%rsp), %eax
    000001fc: 	cmovel	%esi, %eax
    000001ff: 	movb	%al, 0x1e(%rsp)
    00000203: 	cmpq	%rbp, 0x10(%rsp)
    00000208: 	jne	.Ltmp5092 # Offset: 520
.Ltmp5097:
    0000020a: 	callq	clock@PLT # Offset: 522
    0000020f: 	movsd	gMinimumTimeTarget(%rip), %xmm1
    00000217: 	pxor	%xmm0, %xmm0
    0000021b: 	movq	%rax, end_time(%rip)
    00000222: 	subq	start_time(%rip), %rax
    00000229: 	cvtsi2sd	%rax, %xmm0
    0000022e: 	divsd	DATAat0x34410(%rip), %xmm0
    00000236: 	comisd	%xmm0, %xmm1
    0000023a: 	jbe	.Ltmp5093 # Offset: 570
    0000023c: 	cmpq	$0x5f5e0ff, %rbp
    00000243: 	jbe	.Ltmp5094 # Offset: 579
.Ltmp5093:
    00000249: 	movq	0x28(%rsp), %rdx
    0000024e: 	movq	0x20(%rsp), %rdi
    00000253: 	movq	%rbp, %rsi
    00000256: 	callq	_Z13record_resultdmmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 598
    0000025b: 	cmpb	$0x0, 0x1e(%rsp)
    00000260: 	jne	.Ltmp5095 # Offset: 608
.Ltmp5098:
    00000266: 	movq	0x98(%rsp), %rax
    0000026e: 	subq	%fs:0x28, %rax
    00000277: 	jne	.Ltmp5096 # Offset: 631
    0000027d: 	movq	(%rsp), %rdi
    00000281: 	addq	$0xa8, %rsp
    00000288: 	movl	$0x1000, %esi
    0000028d: 	popq	%rbx
    0000028e: 	popq	%rbp
    0000028f: 	popq	%r12
    00000291: 	popq	%r13
    00000293: 	popq	%r14
    00000295: 	popq	%r15
    00000297: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 663
    0000029c: 	nopl	(%rax) # Size: 4
.Ltmp5091:
    000002a0: 	movq	(%rsp), %rdi
    000002a4: 	movq	%rbp, %rax
    000002a7: 	movdqu	(%rbx), %xmm6
    000002ab: 	addq	$0x1, %rbp
    000002af: 	movdqu	0x10(%rbx), %xmm7
    000002b4: 	andl	$0x3ff, %eax
    000002b9: 	movq	%r14, %rdx
    000002bc: 	movq	%r13, %rsi
    000002bf: 	movdqu	(%r12), %xmm1
    000002c5: 	movss	(%rdi,%rax,4), %xmm0
    000002ca: 	movaps	%xmm6, 0x70(%rsp)
    000002cf: 	movq	%r15, %rdi
    000002d2: 	movdqu	0x10(%r12), %xmm2
    000002d9: 	movq	0x8(%rsp), %rax
    000002de: 	movaps	%xmm7, 0x80(%rsp)
    000002e6: 	movaps	%xmm1, 0x50(%rsp)
    000002eb: 	movaps	%xmm2, 0x60(%rsp)
    000002f0: 	callq	*%rax # Offset: 752
    000002f2: 	cmpq	0x10(%rsp), %rbp
    000002f7: 	jne	.Ltmp5091 # Offset: 759
    000002f9: 	jmp	.Ltmp5097 # Offset: 761
.Ltmp5095:
    000002fe: 	movq	0x28(%rsp), %rax
    00000303: 	leaq	DATAat0x34137(%rip), %rsi
    0000030a: 	movl	$0x1, %edi
    0000030f: 	movq	(%rax), %rdx
    00000312: 	xorl	%eax, %eax
    00000314: 	callq	__printf_chk@PLT # Offset: 788
    00000319: 	jmp	.Ltmp5098 # Offset: 793
.Ltmp5096:
    0000031e: 	callq	__stack_chk_fail@PLT # Offset: 798
    00000323: 	endbr64
    00000327: 	movq	%rax, %rbp
    0000032a: 	movq	(%rsp), %rdi
    0000032e: 	movl	$0x1000, %esi
    00000333: 	callq	_ZdlPvm@PLT # Offset: 819
    00000338: 	movq	%rbp, %rdi
    0000033b: 	callq	_Unwind_Resume@PLT # Offset: 827
DWARF CFI Instructions:
    <empty>
End of Function "_Z15TestSearchArrayISt15_Deque_iteratorIfRfPfEPFS3_S3_S3_fEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z18quicksort2_forwardISt15_Deque_iteratorIfRfPfEEvT_S4_" after disassembly {
  Number      : 474
  State       : disassembled
  Address     : 0x2ca10
  Size        : 0x2be
  MaxSize     : 0x2c0
  Offset      : 0x2ca10
  Section     : .text
  Orc Section : .local.text._Z18quicksort2_forwardISt15_Deque_iteratorIfRfPfEEvT_S4_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0473:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdi, %r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rsi, %rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x68, %rsp
    00000018: 	movq	(%rsi), %rdi
    0000001b: 	movq	(%r13), %rbx
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x58(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	leaq	0x30(%rsp), %rax
    00000034: 	movq	%rax, 0x8(%rsp)
    00000039: 	cmpq	%rdi, %rbx
    0000003c: 	je	.Ltmp5099 # Offset: 60
.Ltmp5113:
    00000042: 	movq	0x8(%r13), %r15
    00000046: 	movq	0x10(%r13), %rsi
    0000004a: 	movq	%rbx, %xmm4
    0000004f: 	leaq	0x4(%rbx), %rax
    00000053: 	movq	0x18(%r13), %r9
    00000057: 	movq	%r15, %xmm5
    0000005c: 	movq	%rsi, %xmm3
    00000061: 	movq	%r9, %xmm6
    00000066: 	punpcklqdq	%xmm5, %xmm4
    0000006a: 	punpcklqdq	%xmm6, %xmm3
    0000006e: 	cmpq	%rsi, %rax
    00000071: 	je	.Ltmp5100 # Offset: 113
.Ltmp5116:
    00000077: 	cmpq	%rdi, %rax
    0000007a: 	je	.Ltmp5099 # Offset: 122
    00000080: 	leaq	0x4(%rax), %rdx
    00000084: 	movq	%r9, %r11
    00000087: 	movq	%rsi, %r10
    0000008a: 	movq	%rdx, %rcx
    0000008d: 	cmpq	%rsi, %rdx
    00000090: 	je	.Ltmp5101 # Offset: 144
    00000096: 	movss	(%rax), %xmm1
    0000009a: 	movss	(%rbx), %xmm0
    0000009e: 	cmpq	%rcx, %rdi
    000000a1: 	je	.Ltmp5102 # Offset: 161
.Ltmp5117:
    000000a7: 	comiss	%xmm1, %xmm0
    000000aa: 	jbe	.Ltmp5103 # Offset: 170
    000000ac: 	movss	%xmm1, (%rbx)
    000000b0: 	movaps	%xmm0, %xmm1
    000000b3: 	movss	%xmm0, (%rax)
.Ltmp5103:
    000000b7: 	movss	(%rcx), %xmm0
    000000bb: 	comiss	%xmm0, %xmm1
    000000be: 	jbe	.Ltmp5104 # Offset: 190
    000000c0: 	movss	%xmm0, (%rax)
    000000c4: 	movss	%xmm1, (%rcx)
    000000c8: 	movss	(%rax), %xmm1
    000000cc: 	movss	(%rbx), %xmm0
    000000d0: 	comiss	%xmm1, %xmm0
    000000d3: 	jbe	.Ltmp5104 # Offset: 211
    000000d5: 	movss	%xmm0, (%rax)
    000000d9: 	movss	%xmm1, (%rbx)
    000000dd: 	movss	(%rax), %xmm1
.Ltmp5104:
    000000e1: 	addq	$0x4, %rcx
    000000e5: 	cmpq	%r10, %rcx
    000000e8: 	je	.Ltmp5105 # Offset: 232
.Ltmp5118:
    000000ee: 	cmpq	%rcx, %rdi
    000000f1: 	je	.Ltmp5099 # Offset: 241
    000000f7: 	movq	%r9, %r14
    000000fa: 	movq	%rsi, %r12
    000000fd: 	movq	%rax, %rbx
    00000100: 	movl	$0x2, %ecx
    00000105: 	movl	$0x1, %r10d
    0000010b: 	jmp	.Ltmp5106 # Offset: 267
    0000010d: 	nopl	(%rax) # Size: 3
.Ltmp5110:
    00000110: 	cmpq	%rax, %rdi
    00000113: 	je	.Ltmp5107 # Offset: 275
.Ltmp5111:
    00000115: 	movss	(%rax), %xmm0
    00000119: 	comiss	%xmm0, %xmm1
    0000011c: 	jbe	.Ltmp5108 # Offset: 284
    0000011e: 	movss	(%rbx), %xmm2
    00000122: 	addq	$0x4, %rbx
    00000126: 	movss	%xmm2, (%rax)
    0000012a: 	movss	%xmm0, -0x4(%rbx)
    0000012f: 	cmpq	%r12, %rbx
    00000132: 	je	.Ltmp5109 # Offset: 306
.Ltmp5114:
    00000138: 	addq	$0x1, %r10
.Ltmp5108:
    0000013c: 	addq	$0x1, %rcx
    00000140: 	leaq	0x4(%rax), %rdx
.Ltmp5106:
    00000144: 	movq	%rdx, %rax
    00000147: 	cmpq	%rsi, %rdx
    0000014a: 	jne	.Ltmp5110 # Offset: 330
    0000014c: 	movq	0x8(%r9), %rax
    00000150: 	addq	$0x8, %r9
    00000154: 	leaq	0x200(%rax), %rsi
    0000015b: 	cmpq	%rax, %rdi
    0000015e: 	jne	.Ltmp5111 # Offset: 350
.Ltmp5107:
    00000160: 	subq	%r10, %rcx
    00000163: 	cmpq	%rcx, %r10
    00000166: 	jbe	.Ltmp5112 # Offset: 358
    0000016c: 	movq	0x10(%rbp), %xmm0
    00000171: 	movq	%rdi, %xmm1
    00000176: 	movq	0x8(%rsp), %rsi
    0000017b: 	leaq	0x10(%rsp), %rdi
    00000180: 	movhps	0x8(%rbp), %xmm1
    00000184: 	movq	%rbx, 0x10(%rsp)
    00000189: 	movhps	0x18(%rbp), %xmm0
    0000018d: 	movq	%r15, 0x18(%rsp)
    00000192: 	movq	%r12, 0x20(%rsp)
    00000197: 	movq	%r14, 0x28(%rsp)
    0000019c: 	movaps	%xmm1, 0x30(%rsp)
    000001a1: 	movaps	%xmm0, 0x40(%rsp)
    000001a6: 	callq	_Z18quicksort2_forwardISt15_Deque_iteratorIfRfPfEEvT_S4_ # Offset: 422
    000001ab: 	movq	%rbx, (%rbp)
    000001af: 	movq	(%r13), %rax
    000001b3: 	movq	%r15, 0x8(%rbp)
    000001b7: 	movq	%r12, 0x10(%rbp)
    000001bb: 	movq	%r14, 0x18(%rbp)
    000001bf: 	cmpq	%rbx, %rax
    000001c2: 	je	.Ltmp5099 # Offset: 450
    000001c4: 	movq	%rbx, %rdi
    000001c7: 	movq	%rax, %rbx
    000001ca: 	jmp	.Ltmp5113 # Offset: 458
    000001cf: 	nop # Size: 1
.Ltmp5109:
    000001d0: 	movq	0x8(%r14), %rbx
    000001d4: 	addq	$0x8, %r14
    000001d8: 	leaq	0x200(%rbx), %r12
    000001df: 	movq	%rbx, %r15
    000001e2: 	jmp	.Ltmp5114 # Offset: 482
    000001e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp5112:
    000001f0: 	movq	0x8(%rsp), %rsi
    000001f5: 	leaq	0x10(%rsp), %rdi
    000001fa: 	movq	%rbx, 0x30(%rsp)
    000001ff: 	movq	%r15, 0x38(%rsp)
    00000204: 	movq	%r12, 0x40(%rsp)
    00000209: 	movq	%r14, 0x48(%rsp)
    0000020e: 	movaps	%xmm4, 0x10(%rsp)
    00000213: 	movaps	%xmm3, 0x20(%rsp)
    00000218: 	callq	_Z18quicksort2_forwardISt15_Deque_iteratorIfRfPfEEvT_S4_ # Offset: 536
    0000021d: 	movq	%rbx, (%r13)
    00000221: 	movq	(%rbp), %rdi
    00000225: 	movq	%r15, 0x8(%r13)
    00000229: 	movq	%r12, 0x10(%r13)
    0000022d: 	movq	%r14, 0x18(%r13)
    00000231: 	cmpq	%rbx, %rdi
    00000234: 	jne	.Ltmp5113 # Offset: 564
    0000023a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5099:
    00000240: 	movq	0x58(%rsp), %rax
    00000245: 	subq	%fs:0x28, %rax
    0000024e: 	jne	.Ltmp5115 # Offset: 590
    00000250: 	addq	$0x68, %rsp
    00000254: 	popq	%rbx
    00000255: 	popq	%rbp
    00000256: 	popq	%r12
    00000258: 	popq	%r13
    0000025a: 	popq	%r14
    0000025c: 	popq	%r15
    0000025e: 	retq # Offset: 606
    0000025f: 	nop # Size: 1
.Ltmp5100:
    00000260: 	movq	0x8(%r9), %rax
    00000264: 	addq	$0x8, %r9
    00000268: 	leaq	0x200(%rax), %rsi
    0000026f: 	movq	%rax, %r15
    00000272: 	jmp	.Ltmp5116 # Offset: 626
    00000277: 	nopw	(%rax,%rax) # Size: 9
.Ltmp5101:
    00000280: 	movq	0x8(%r9), %rcx
    00000284: 	movss	(%rax), %xmm1
    00000288: 	leaq	0x8(%r9), %r11
    0000028c: 	movss	(%rbx), %xmm0
    00000290: 	leaq	0x200(%rcx), %r10
    00000297: 	cmpq	%rcx, %rdi
    0000029a: 	jne	.Ltmp5117 # Offset: 666
.Ltmp5102:
    000002a0: 	comiss	%xmm1, %xmm0
    000002a3: 	jbe	.Ltmp5099 # Offset: 675
    000002a5: 	movss	%xmm0, (%rax)
    000002a9: 	movss	%xmm1, (%rbx)
    000002ad: 	jmp	.Ltmp5099 # Offset: 685
    000002af: 	nop # Size: 1
.Ltmp5105:
    000002b0: 	movq	0x8(%r11), %rcx
    000002b4: 	jmp	.Ltmp5118 # Offset: 692
.Ltmp5115:
    000002b9: 	callq	__stack_chk_fail@PLT # Offset: 697
DWARF CFI Instructions:
    <empty>
End of Function "_Z18quicksort2_forwardISt15_Deque_iteratorIfRfPfEEvT_S4_"

Binary Function "_Z13TestOneSearchISt15_Deque_iteratorIfRfPfEPFS3_S3_S3_fEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 475
  State       : disassembled
  Address     : 0x2ccd0
  Size        : 0x42f
  MaxSize     : 0x430
  Offset      : 0x2ccd0
  Section     : .text
  Orc Section : .local.text._Z13TestOneSearchISt15_Deque_iteratorIfRfPfEPFS3_S3_S3_fEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0474:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rdx, %r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rsi, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x98, %rsp
    0000001e: 	movq	(%rdi), %rdx
    00000021: 	movq	(%rsi), %rsi
    00000024: 	movq	%rcx, 0x8(%rsp)
    00000029: 	movss	DATAat0x34560(%rip), %xmm0
    00000031: 	movq	%r8, 0x10(%rsp)
    00000036: 	movq	0x10(%rdi), %rcx
    0000003a: 	movq	0x18(%rdi), %rdi
    0000003e: 	movq	%fs:0x28, %rax
    00000047: 	movq	%rax, 0x88(%rsp)
    0000004f: 	xorl	%eax, %eax
    00000051: 	cmpq	%rsi, %rdx
    00000054: 	jne	.Ltmp5119 # Offset: 84
    00000056: 	jmp	.Ltmp5120 # Offset: 86
    00000058: 	nopl	(%rax,%rax) # Size: 8
.Ltmp5121:
    00000060: 	movss	%xmm0, (%rdx)
    00000064: 	cmpq	%rsi, %rax
    00000067: 	je	.Ltmp5120 # Offset: 103
.Ltmp5122:
    00000069: 	movq	%rax, %rdx
.Ltmp5119:
    0000006c: 	leaq	0x4(%rdx), %rax
    00000070: 	cmpq	%rcx, %rax
    00000073: 	jne	.Ltmp5121 # Offset: 115
    00000075: 	movq	0x8(%rdi), %rax
    00000079: 	leaq	0x8(%rdi), %r8
    0000007d: 	movss	%xmm0, (%rdx)
    00000081: 	leaq	0x200(%rax), %rcx
    00000088: 	cmpq	%rax, %rsi
    0000008b: 	je	.Ltmp5120 # Offset: 139
    0000008d: 	movq	%r8, %rdi
    00000090: 	jmp	.Ltmp5122 # Offset: 144
    00000092: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5120:
    00000098: 	movq	0x10(%rsp), %rsi
    0000009d: 	leaq	0x60(%rsp), %r13
    000000a2: 	movzbl	%r9b, %eax
    000000a6: 	leaq	DATAat0x34160(%rip), %rdx
    000000ad: 	movq	%r13, %rdi
    000000b0: 	movl	%eax, 0x4(%rsp)
    000000b4: 	leaq	0x40(%rsp), %r15
    000000b9: 	leaq	0x20(%rsp), %r14
    000000be: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 190
    000000c3: 	movdqu	(%rbp), %xmm5
    000000c8: 	movdqu	0x10(%rbp), %xmm6
    000000cd: 	movq	%r13, %r8
    000000d0: 	movdqu	(%rbx), %xmm7
    000000d4: 	movdqu	0x10(%rbx), %xmm4
    000000d9: 	movq	%r12, %rdx
    000000dc: 	movq	%r15, %rsi
    000000df: 	movl	0x4(%rsp), %r9d
    000000e4: 	movq	0x8(%rsp), %rcx
    000000e9: 	movq	%r14, %rdi
    000000ec: 	movaps	%xmm5, 0x40(%rsp)
    000000f1: 	movaps	%xmm6, 0x50(%rsp)
    000000f6: 	movaps	%xmm7, 0x20(%rsp)
    000000fb: 	movaps	%xmm4, 0x30(%rsp)
    00000100: 	callq	_Z15TestSearchArrayISt15_Deque_iteratorIfRfPfEPFS3_S3_S3_fEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 256
    00000105: 	movq	0x60(%rsp), %rdi
    0000010a: 	leaq	0x70(%rsp), %rax
    0000010f: 	movq	%rax, 0x18(%rsp)
    00000114: 	cmpq	%rax, %rdi
    00000117: 	je	.Ltmp5123 # Offset: 279
    00000119: 	movq	0x70(%rsp), %rax
    0000011e: 	leaq	0x1(%rax), %rsi
    00000122: 	callq	_ZdlPvm@PLT # Offset: 290
.Ltmp5123:
    00000127: 	movq	(%rbx), %rdi
    0000012a: 	movq	0x10(%rbx), %r8
    0000012e: 	movq	0x18(%rbx), %r9
    00000132: 	cmpq	$0x9, %r12
    00000136: 	jbe	.Ltmp5124 # Offset: 310
    0000013c: 	movabsq	$-0x3333333333333333, %rdx
    00000146: 	movq	%r12, %rax
    00000149: 	mulq	%rdx
    0000014c: 	shrq	$0x3, %rdx
.Ltmp5141:
    00000150: 	movss	DATAat0x34570(%rip), %xmm1
    00000158: 	xorl	%esi, %esi
    0000015a: 	pxor	%xmm0, %xmm0
    0000015e: 	cmpq	$0x0, %r12
    00000162: 	jbe	.Ltmp5125 # Offset: 354
    00000164: 	nopl	(%rax) # Size: 4
.Ltmp5130:
    00000168: 	xorl	%ecx, %ecx
    0000016a: 	jmp	.Ltmp5126 # Offset: 362
    0000016c: 	nopl	(%rax) # Size: 4
.Ltmp5128:
    00000170: 	addq	$0x1, %rcx
    00000174: 	movss	%xmm0, (%rdi)
    00000178: 	addq	$0x1, %rsi
    0000017c: 	cmpq	%rdx, %rcx
    0000017f: 	jae	.Ltmp5127 # Offset: 383
    00000181: 	cmpq	%rsi, %r12
    00000184: 	jbe	.Ltmp5127 # Offset: 388
.Ltmp5129:
    00000186: 	movq	%rax, %rdi
.Ltmp5126:
    00000189: 	leaq	0x4(%rdi), %rax
    0000018d: 	cmpq	%r8, %rax
    00000190: 	jne	.Ltmp5128 # Offset: 400
    00000192: 	movq	0x8(%r9), %rax
    00000196: 	leaq	0x8(%r9), %r10
    0000019a: 	addq	$0x1, %rsi
    0000019e: 	movss	%xmm0, (%rdi)
    000001a2: 	addq	$0x1, %rcx
    000001a6: 	movq	%r10, %r9
    000001a9: 	leaq	0x200(%rax), %r8
    000001b0: 	cmpq	%rsi, %r12
    000001b3: 	jbe	.Ltmp5127 # Offset: 435
    000001b5: 	cmpq	%rdx, %rcx
    000001b8: 	jb	.Ltmp5129 # Offset: 440
    000001ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5127:
    000001c0: 	addss	%xmm1, %xmm0
    000001c4: 	movq	%rax, %rdi
    000001c7: 	cmpq	%rsi, %r12
    000001ca: 	ja	.Ltmp5130 # Offset: 458
.Ltmp5125:
    000001cc: 	movq	0x10(%rsp), %rsi
    000001d1: 	leaq	DATAat0x3416e(%rip), %rdx
    000001d8: 	movq	%r13, %rdi
    000001db: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 475
    000001e0: 	movdqu	(%rbp), %xmm5
    000001e5: 	movdqu	0x10(%rbp), %xmm6
    000001ea: 	movq	%r13, %r8
    000001ed: 	movdqu	(%rbx), %xmm7
    000001f1: 	movdqu	0x10(%rbx), %xmm2
    000001f6: 	movq	%r12, %rdx
    000001f9: 	movq	%r15, %rsi
    000001fc: 	movl	0x4(%rsp), %r9d
    00000201: 	movq	0x8(%rsp), %rcx
    00000206: 	movq	%r14, %rdi
    00000209: 	movaps	%xmm5, 0x40(%rsp)
    0000020e: 	movaps	%xmm6, 0x50(%rsp)
    00000213: 	movaps	%xmm7, 0x20(%rsp)
    00000218: 	movaps	%xmm2, 0x30(%rsp)
    0000021d: 	callq	_Z15TestSearchArrayISt15_Deque_iteratorIfRfPfEPFS3_S3_S3_fEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 541
    00000222: 	movq	0x60(%rsp), %rdi
    00000227: 	cmpq	0x18(%rsp), %rdi
    0000022c: 	je	.Ltmp5131 # Offset: 556
    0000022e: 	movq	0x70(%rsp), %rax
    00000233: 	leaq	0x1(%rax), %rsi
    00000237: 	callq	_ZdlPvm@PLT # Offset: 567
.Ltmp5131:
    0000023c: 	movdqu	0x10(%rbx), %xmm1
    00000241: 	movdqu	(%rbp), %xmm3
    00000246: 	xorl	%eax, %eax
    00000248: 	movdqu	(%rbx), %xmm2
    0000024c: 	movdqu	0x10(%rbp), %xmm4
    00000251: 	movhlps	%xmm1, %xmm5
    00000254: 	movq	%xmm3, %r8
    00000259: 	movq	%xmm1, %rdi
    0000025e: 	movq	%xmm2, %rcx
    00000263: 	movq	%xmm5, %r10
    00000268: 	cmpq	%r8, %rcx
    0000026b: 	jne	.Ltmp5132 # Offset: 619
    0000026d: 	jmp	.Ltmp5133 # Offset: 621
    00000272: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5135:
    00000278: 	testq	%rax, %rax
    0000027b: 	js	.Ltmp5134 # Offset: 635
    0000027d: 	pxor	%xmm0, %xmm0
    00000281: 	cvtsi2ss	%rax, %xmm0
    00000286: 	movss	%xmm0, (%rcx)
    0000028a: 	cmpq	%r8, %rdx
    0000028d: 	je	.Ltmp5133 # Offset: 653
.Ltmp5137:
    0000028f: 	movq	%rdx, %rcx
    00000292: 	movq	%rsi, %rax
.Ltmp5132:
    00000295: 	leaq	0x4(%rcx), %rdx
    00000299: 	leaq	0x1(%rax), %rsi
    0000029d: 	cmpq	%rdx, %rdi
    000002a0: 	jne	.Ltmp5135 # Offset: 672
    000002a2: 	movq	0x8(%r10), %rdx
    000002a6: 	leaq	0x8(%r10), %r9
    000002aa: 	leaq	0x200(%rdx), %rdi
    000002b1: 	testq	%rax, %rax
    000002b4: 	js	.Ltmp5136 # Offset: 692
    000002ba: 	pxor	%xmm0, %xmm0
    000002be: 	cvtsi2ss	%rax, %xmm0
.Ltmp5140:
    000002c3: 	movss	%xmm0, (%rcx)
    000002c7: 	cmpq	%r8, %rdx
    000002ca: 	je	.Ltmp5133 # Offset: 714
    000002cc: 	movq	%r9, %r10
    000002cf: 	jmp	.Ltmp5137 # Offset: 719
    000002d1: 	nopl	(%rax) # Size: 7
.Ltmp5134:
    000002d8: 	movq	%rax, %r9
    000002db: 	andl	$0x1, %eax
    000002de: 	pxor	%xmm0, %xmm0
    000002e2: 	shrq	%r9
    000002e5: 	orq	%rax, %r9
    000002e8: 	cvtsi2ss	%r9, %xmm0
    000002ed: 	addss	%xmm0, %xmm0
    000002f1: 	movss	%xmm0, (%rcx)
    000002f5: 	cmpq	%r8, %rdx
    000002f8: 	jne	.Ltmp5137 # Offset: 760
.Ltmp5133:
    000002fa: 	movq	%r15, %rsi
    000002fd: 	movq	%r14, %rdi
    00000300: 	movaps	%xmm3, 0x40(%rsp)
    00000305: 	movaps	%xmm4, 0x50(%rsp)
    0000030a: 	movaps	%xmm2, 0x20(%rsp)
    0000030f: 	movaps	%xmm1, 0x30(%rsp)
    00000314: 	callq	_Z18quicksort2_forwardISt15_Deque_iteratorIfRfPfEEvT_S4_ # Offset: 788
    00000319: 	movq	0x10(%rsp), %rsi
    0000031e: 	leaq	DATAat0x34184(%rip), %rdx
    00000325: 	movq	%r13, %rdi
    00000328: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 808
    0000032d: 	movdqu	0x10(%rbp), %xmm0
    00000332: 	movdqu	(%rbp), %xmm3
    00000337: 	movq	%r13, %r8
    0000033a: 	movdqu	(%rbx), %xmm4
    0000033e: 	movl	0x4(%rsp), %r9d
    00000343: 	movq	%r12, %rdx
    00000346: 	movq	%r15, %rsi
    00000349: 	movaps	%xmm0, 0x50(%rsp)
    0000034e: 	movq	0x8(%rsp), %rcx
    00000353: 	movdqu	0x10(%rbx), %xmm0
    00000358: 	movq	%r14, %rdi
    0000035b: 	movaps	%xmm3, 0x40(%rsp)
    00000360: 	movaps	%xmm4, 0x20(%rsp)
    00000365: 	movaps	%xmm0, 0x30(%rsp)
    0000036a: 	callq	_Z15TestSearchArrayISt15_Deque_iteratorIfRfPfEPFS3_S3_S3_fEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 874
    0000036f: 	movq	0x60(%rsp), %rdi
    00000374: 	cmpq	0x18(%rsp), %rdi
    00000379: 	je	.Ltmp5138 # Offset: 889
    0000037b: 	movq	0x70(%rsp), %rax
    00000380: 	leaq	0x1(%rax), %rsi
    00000384: 	callq	_ZdlPvm@PLT # Offset: 900
.Ltmp5138:
    00000389: 	movq	0x88(%rsp), %rax
    00000391: 	subq	%fs:0x28, %rax
    0000039a: 	jne	.Ltmp5139 # Offset: 922
    0000039c: 	addq	$0x98, %rsp
    000003a3: 	popq	%rbx
    000003a4: 	popq	%rbp
    000003a5: 	popq	%r12
    000003a7: 	popq	%r13
    000003a9: 	popq	%r14
    000003ab: 	popq	%r15
    000003ad: 	retq # Offset: 941
    000003ae: 	nop # Size: 2
.Ltmp5136:
    000003b0: 	movq	%rax, %r10
    000003b3: 	andl	$0x1, %eax
    000003b6: 	pxor	%xmm0, %xmm0
    000003ba: 	shrq	%r10
    000003bd: 	orq	%rax, %r10
    000003c0: 	cvtsi2ss	%r10, %xmm0
    000003c5: 	addss	%xmm0, %xmm0
    000003c9: 	jmp	.Ltmp5140 # Offset: 969
.Ltmp5124:
    000003ce: 	testq	%r12, %r12
    000003d1: 	je	.Ltmp5125 # Offset: 977
    000003d7: 	movl	$0x1, %edx
    000003dc: 	jmp	.Ltmp5141 # Offset: 988
.Ltmp5139:
    000003e1: 	callq	__stack_chk_fail@PLT # Offset: 993
    000003e6: 	endbr64
.Ltmp5143:
    000003ea: 	movq	%rax, %rbp
    000003ed: 	jmp	.Ltmp5142 # Offset: 1005
    000003ef: 	endbr64
    000003f3: 	jmp	.Ltmp5143 # Offset: 1011
    000003f5: 	endbr64
    000003f9: 	movq	%rax, %rbp
    000003fc: 	movq	0x60(%rsp), %rdi
    00000401: 	leaq	0x70(%rsp), %rax
    00000406: 	cmpq	%rax, %rdi
    00000409: 	je	.Ltmp5144 # Offset: 1033
.Ltmp5145:
    0000040b: 	movq	0x70(%rsp), %rax
    00000410: 	leaq	0x1(%rax), %rsi
    00000414: 	callq	_ZdlPvm@PLT # Offset: 1044
.Ltmp5144:
    00000419: 	movq	%rbp, %rdi
    0000041c: 	callq	_Unwind_Resume@PLT # Offset: 1052
.Ltmp5142:
    00000421: 	movq	0x60(%rsp), %rdi
    00000426: 	cmpq	0x18(%rsp), %rdi
    0000042b: 	jne	.Ltmp5145 # Offset: 1067
    0000042d: 	jmp	.Ltmp5144 # Offset: 1069
DWARF CFI Instructions:
    <empty>
End of Function "_Z13TestOneSearchISt15_Deque_iteratorIfRfPfEPFS3_S3_S3_fEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z23lower_bound_recur_innerISt15_Deque_iteratorIfRfPfEflET_S4_T0_T1_" after disassembly {
  Number      : 476
  State       : disassembled
  Address     : 0x2d100
  Size        : 0x184
  MaxSize     : 0x190
  Offset      : 0x2d100
  Section     : .text
  Orc Section : .local.text._Z23lower_bound_recur_innerISt15_Deque_iteratorIfRfPfEflET_S4_T0_T1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0475:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movq	%rdi, %r12
    00000009: 	subq	$0x30, %rsp
    0000000d: 	movdqu	(%rsi), %xmm2
    00000011: 	movdqu	0x10(%rsi), %xmm1
    00000016: 	movq	%fs:0x28, %rcx
    0000001f: 	movq	%rcx, 0x28(%rsp)
    00000024: 	xorl	%ecx, %ecx
    00000026: 	movhlps	%xmm2, %xmm3
    00000029: 	movhlps	%xmm1, %xmm4
    0000002c: 	testq	%rdx, %rdx
    0000002f: 	jne	.Ltmp5146 # Offset: 47
    00000031: 	movups	%xmm2, (%rdi)
    00000034: 	movups	%xmm1, 0x10(%rdi)
.Ltmp5152:
    00000038: 	movq	0x28(%rsp), %rax
    0000003d: 	subq	%fs:0x28, %rax
    00000046: 	jne	.Ltmp5147 # Offset: 70
    0000004c: 	addq	$0x30, %rsp
    00000050: 	movq	%r12, %rax
    00000053: 	popq	%r12
    00000055: 	retq # Offset: 85
    00000056: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp5146:
    00000060: 	movq	%rdx, %r8
    00000063: 	movq	%xmm3, %rdi
    00000068: 	movq	%xmm2, %rcx
    0000006d: 	movq	%rsi, %rax
    00000070: 	shrq	$0x3f, %r8
    00000074: 	subq	%rdi, %rcx
    00000077: 	movq	%xmm2, %r10
    0000007c: 	addq	%rdx, %r8
    0000007f: 	sarq	$0x2, %rcx
    00000083: 	movq	%xmm4, %r9
    00000088: 	sarq	%r8
    0000008b: 	addq	%r8, %rcx
    0000008e: 	js	.Ltmp5148 # Offset: 142
    00000090: 	cmpq	$0x7f, %rcx
    00000094: 	jg	.Ltmp5149 # Offset: 148
    0000009a: 	leaq	(%r10,%r8,4), %rcx
    0000009e: 	movq	%xmm1, %rsi
    000000a3: 	comiss	(%rcx), %xmm0
    000000a6: 	jbe	.Ltmp5150 # Offset: 166
.Ltmp5153:
    000000ac: 	addq	$0x4, %rcx
    000000b0: 	cmpq	%rsi, %rcx
    000000b3: 	je	.Ltmp5151 # Offset: 179
.Ltmp5155:
    000000b9: 	movq	%rdi, %xmm5
    000000be: 	movq	%rcx, %xmm1
    000000c3: 	movq	%rcx, (%rax)
    000000c6: 	addq	$0x1, %r8
    000000ca: 	punpcklqdq	%xmm5, %xmm1
    000000ce: 	movq	%rdi, 0x8(%rax)
    000000d2: 	movq	%r9, %xmm6
    000000d7: 	subq	%r8, %rdx
    000000da: 	movq	%rsi, 0x10(%rax)
    000000de: 	movq	%r12, %rdi
    000000e1: 	movq	%r9, 0x18(%rax)
    000000e5: 	movaps	%xmm1, (%rsp)
    000000e9: 	movq	%rsi, %xmm1
    000000ee: 	movq	%rsp, %rsi
    000000f1: 	punpcklqdq	%xmm6, %xmm1
    000000f5: 	movaps	%xmm1, 0x10(%rsp)
    000000fa: 	callq	_Z23lower_bound_recur_innerISt15_Deque_iteratorIfRfPfEflET_S4_T0_T1_ # Offset: 250
    000000ff: 	jmp	.Ltmp5152 # Offset: 255
    00000104: 	nopl	(%rax) # Size: 4
.Ltmp5148:
    00000108: 	movq	%rcx, %r10
    0000010b: 	notq	%r10
    0000010e: 	shrq	$0x7, %r10
    00000112: 	notq	%r10
.Ltmp5154:
    00000115: 	leaq	(%r9,%r10,8), %r9
    00000119: 	shlq	$0x7, %r10
    0000011d: 	movq	(%r9), %rdi
    00000120: 	subq	%r10, %rcx
    00000123: 	leaq	(%rdi,%rcx,4), %rcx
    00000127: 	leaq	0x200(%rdi), %rsi
    0000012e: 	comiss	(%rcx), %xmm0
    00000131: 	ja	.Ltmp5153 # Offset: 305
.Ltmp5150:
    00000137: 	movq	%rsp, %rsi
    0000013a: 	movq	%r8, %rdx
    0000013d: 	movq	%r12, %rdi
    00000140: 	movaps	%xmm2, (%rsp)
    00000144: 	movaps	%xmm1, 0x10(%rsp)
    00000149: 	callq	_Z23lower_bound_recur_innerISt15_Deque_iteratorIfRfPfEflET_S4_T0_T1_ # Offset: 329
    0000014e: 	jmp	.Ltmp5152 # Offset: 334
    00000153: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5149:
    00000158: 	movq	%rcx, %r10
    0000015b: 	sarq	$0x7, %r10
    0000015f: 	jmp	.Ltmp5154 # Offset: 351
    00000161: 	nopl	(%rax) # Size: 7
.Ltmp5151:
    00000168: 	movq	0x8(%r9), %rcx
    0000016c: 	addq	$0x8, %r9
    00000170: 	leaq	0x200(%rcx), %rsi
    00000177: 	movq	%rcx, %rdi
    0000017a: 	jmp	.Ltmp5155 # Offset: 378
.Ltmp5147:
    0000017f: 	callq	__stack_chk_fail@PLT # Offset: 383
DWARF CFI Instructions:
    <empty>
End of Function "_Z23lower_bound_recur_innerISt15_Deque_iteratorIfRfPfEflET_S4_T0_T1_"

Binary Function "_Z17lower_bound_recurISt15_Deque_iteratorIfRfPfEfET_S4_S4_T0_" after disassembly {
  Number      : 477
  State       : disassembled
  Address     : 0x2d290
  Size        : 0x1a4
  MaxSize     : 0x1b0
  Offset      : 0x2d290
  Section     : .text
  Orc Section : .local.text._Z17lower_bound_recurISt15_Deque_iteratorIfRfPfEfET_S4_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0476:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movq	%rdx, %rcx
    00000009: 	movq	%rdi, %r12
    0000000c: 	subq	$0x30, %rsp
    00000010: 	movdqu	0x10(%rsi), %xmm1
    00000015: 	movq	0x18(%rdx), %rdx
    00000019: 	movq	%fs:0x28, %rax
    00000022: 	movq	%rax, 0x28(%rsp)
    00000027: 	xorl	%eax, %eax
    00000029: 	movdqu	(%rsi), %xmm2
    0000002d: 	movhlps	%xmm1, %xmm4
    00000030: 	movq	%rdx, %rax
    00000033: 	movq	%xmm4, %rdi
    00000038: 	movq	%xmm2, %r8
    0000003d: 	movhlps	%xmm2, %xmm3
    00000040: 	subq	%rdi, %rax
    00000043: 	sarq	$0x3, %rax
    00000047: 	cmpq	$0x1, %rdx
    0000004b: 	movq	(%rcx), %rdx
    0000004e: 	adcq	$-0x1, %rax
    00000052: 	subq	0x8(%rcx), %rdx
    00000056: 	sarq	$0x2, %rdx
    0000005a: 	shlq	$0x7, %rax
    0000005e: 	addq	%rdx, %rax
    00000061: 	movq	%xmm1, %rdx
    00000066: 	subq	%r8, %rdx
    00000069: 	sarq	$0x2, %rdx
    0000006d: 	addq	%rdx, %rax
    00000070: 	jne	.Ltmp5156 # Offset: 112
    00000072: 	movups	%xmm2, (%r12)
    00000077: 	movups	%xmm1, 0x10(%r12)
.Ltmp5162:
    0000007d: 	movq	0x28(%rsp), %rax
    00000082: 	subq	%fs:0x28, %rax
    0000008b: 	jne	.Ltmp5157 # Offset: 139
    00000091: 	addq	$0x30, %rsp
    00000095: 	movq	%r12, %rax
    00000098: 	popq	%r12
    0000009a: 	retq # Offset: 154
    0000009b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5156:
    000000a0: 	movq	%rax, %rdx
    000000a3: 	movq	%xmm3, %r9
    000000a8: 	movq	%xmm2, %rcx
    000000ad: 	shrq	$0x3f, %rdx
    000000b1: 	subq	%r9, %rcx
    000000b4: 	addq	%rax, %rdx
    000000b7: 	sarq	$0x2, %rcx
    000000bb: 	sarq	%rdx
    000000be: 	addq	%rdx, %rcx
    000000c1: 	js	.Ltmp5158 # Offset: 193
    000000c3: 	cmpq	$0x7f, %rcx
    000000c7: 	jg	.Ltmp5159 # Offset: 199
    000000cd: 	leaq	(%r8,%rdx,4), %rcx
    000000d1: 	movq	%xmm1, %rsi
    000000d6: 	comiss	(%rcx), %xmm0
    000000d9: 	jbe	.Ltmp5160 # Offset: 217
.Ltmp5163:
    000000df: 	addq	$0x4, %rcx
    000000e3: 	cmpq	%rsi, %rcx
    000000e6: 	je	.Ltmp5161 # Offset: 230
.Ltmp5165:
    000000ec: 	movq	%rcx, %xmm1
    000000f1: 	movq	%r9, %xmm5
    000000f6: 	leaq	0x1(%rdx), %rcx
    000000fa: 	punpcklqdq	%xmm5, %xmm1
    000000fe: 	movq	%rdi, %xmm6
    00000103: 	subq	%rcx, %rax
    00000106: 	movq	%r12, %rdi
    00000109: 	movaps	%xmm1, (%rsp)
    0000010d: 	movq	%rsi, %xmm1
    00000112: 	movq	%rax, %rdx
    00000115: 	movq	%rsp, %rsi
    00000118: 	punpcklqdq	%xmm6, %xmm1
    0000011c: 	movaps	%xmm1, 0x10(%rsp)
    00000121: 	callq	_Z23lower_bound_recur_innerISt15_Deque_iteratorIfRfPfEflET_S4_T0_T1_ # Offset: 289
    00000126: 	jmp	.Ltmp5162 # Offset: 294
    0000012b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5158:
    00000130: 	movq	%rcx, %r8
    00000133: 	notq	%r8
    00000136: 	shrq	$0x7, %r8
    0000013a: 	notq	%r8
.Ltmp5164:
    0000013d: 	leaq	(%rdi,%r8,8), %rdi
    00000141: 	shlq	$0x7, %r8
    00000145: 	movq	(%rdi), %r9
    00000148: 	subq	%r8, %rcx
    0000014b: 	leaq	(%r9,%rcx,4), %rcx
    0000014f: 	leaq	0x200(%r9), %rsi
    00000156: 	comiss	(%rcx), %xmm0
    00000159: 	ja	.Ltmp5163 # Offset: 345
.Ltmp5160:
    0000015b: 	movq	%rsp, %rsi
    0000015e: 	movq	%r12, %rdi
    00000161: 	movaps	%xmm2, (%rsp)
    00000165: 	movaps	%xmm1, 0x10(%rsp)
    0000016a: 	callq	_Z23lower_bound_recur_innerISt15_Deque_iteratorIfRfPfEflET_S4_T0_T1_ # Offset: 362
    0000016f: 	jmp	.Ltmp5162 # Offset: 367
    00000174: 	nopl	(%rax) # Size: 4
.Ltmp5159:
    00000178: 	movq	%rcx, %r8
    0000017b: 	sarq	$0x7, %r8
    0000017f: 	jmp	.Ltmp5164 # Offset: 383
    00000181: 	nopl	(%rax) # Size: 7
.Ltmp5161:
    00000188: 	movq	0x8(%rdi), %rcx
    0000018c: 	addq	$0x8, %rdi
    00000190: 	leaq	0x200(%rcx), %rsi
    00000197: 	movq	%rcx, %r9
    0000019a: 	jmp	.Ltmp5165 # Offset: 410
.Ltmp5157:
    0000019f: 	callq	__stack_chk_fail@PLT # Offset: 415
DWARF CFI Instructions:
    <empty>
End of Function "_Z17lower_bound_recurISt15_Deque_iteratorIfRfPfEfET_S4_S4_T0_"

Binary Function "_Z23upper_bound_recur_innerISt15_Deque_iteratorIfRfPfEflET_S4_T0_T1_" after disassembly {
  Number      : 478
  State       : disassembled
  Address     : 0x2d440
  Size        : 0x18c
  MaxSize     : 0x190
  Offset      : 0x2d440
  Section     : .text
  Orc Section : .local.text._Z23upper_bound_recur_innerISt15_Deque_iteratorIfRfPfEflET_S4_T0_T1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0477:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movq	%rsi, %rax
    00000009: 	movq	%rdi, %r12
    0000000c: 	subq	$0x30, %rsp
    00000010: 	movdqu	(%rsi), %xmm2
    00000014: 	movdqu	0x10(%rsi), %xmm1
    00000019: 	movq	%fs:0x28, %rcx
    00000022: 	movq	%rcx, 0x28(%rsp)
    00000027: 	xorl	%ecx, %ecx
    00000029: 	movhlps	%xmm2, %xmm4
    0000002c: 	movhlps	%xmm1, %xmm5
    0000002f: 	testq	%rdx, %rdx
    00000032: 	jne	.Ltmp5166 # Offset: 50
    00000034: 	movups	%xmm2, (%rdi)
    00000037: 	movups	%xmm1, 0x10(%rdi)
.Ltmp5172:
    0000003b: 	movq	0x28(%rsp), %rax
    00000040: 	subq	%fs:0x28, %rax
    00000049: 	jne	.Ltmp5167 # Offset: 73
    0000004f: 	addq	$0x30, %rsp
    00000053: 	movq	%r12, %rax
    00000056: 	popq	%r12
    00000058: 	retq # Offset: 88
    00000059: 	nopl	(%rax) # Size: 7
.Ltmp5166:
    00000060: 	movq	%rdx, %r8
    00000063: 	movq	%xmm4, %r9
    00000068: 	movq	%xmm2, %rcx
    0000006d: 	shrq	$0x3f, %r8
    00000071: 	subq	%r9, %rcx
    00000074: 	movq	%xmm2, %rsi
    00000079: 	addq	%rdx, %r8
    0000007c: 	sarq	$0x2, %rcx
    00000080: 	movq	%xmm5, %r10
    00000085: 	sarq	%r8
    00000088: 	addq	%r8, %rcx
    0000008b: 	js	.Ltmp5168 # Offset: 139
    0000008d: 	cmpq	$0x7f, %rcx
    00000091: 	jg	.Ltmp5169 # Offset: 145
    00000097: 	leaq	(%rsi,%r8,4), %rcx
    0000009b: 	movq	%xmm1, %rdi
    000000a0: 	movss	(%rcx), %xmm3
    000000a4: 	comiss	%xmm0, %xmm3
    000000a7: 	ja	.Ltmp5170 # Offset: 167
.Ltmp5173:
    000000ad: 	addq	$0x4, %rcx
    000000b1: 	cmpq	%rdi, %rcx
    000000b4: 	je	.Ltmp5171 # Offset: 180
.Ltmp5175:
    000000ba: 	movq	%rcx, %xmm1
    000000bf: 	movq	%r9, %xmm6
    000000c4: 	movq	%rcx, (%rax)
    000000c7: 	movq	%rsp, %rsi
    000000ca: 	punpcklqdq	%xmm6, %xmm1
    000000ce: 	movq	%rdi, 0x10(%rax)
    000000d2: 	movq	%r10, %xmm7
    000000d7: 	addq	$0x1, %r8
    000000db: 	movq	%r9, 0x8(%rax)
    000000df: 	subq	%r8, %rdx
    000000e2: 	movq	%r10, 0x18(%rax)
    000000e6: 	movaps	%xmm1, (%rsp)
    000000ea: 	movq	%rdi, %xmm1
    000000ef: 	movq	%r12, %rdi
    000000f2: 	punpcklqdq	%xmm7, %xmm1
    000000f6: 	movaps	%xmm1, 0x10(%rsp)
    000000fb: 	callq	_Z23upper_bound_recur_innerISt15_Deque_iteratorIfRfPfEflET_S4_T0_T1_ # Offset: 251
    00000100: 	jmp	.Ltmp5172 # Offset: 256
    00000105: 	nopl	(%rax) # Size: 3
.Ltmp5168:
    00000108: 	movq	%rcx, %rsi
    0000010b: 	notq	%rsi
    0000010e: 	shrq	$0x7, %rsi
    00000112: 	notq	%rsi
.Ltmp5174:
    00000115: 	leaq	(%r10,%rsi,8), %r10
    00000119: 	shlq	$0x7, %rsi
    0000011d: 	movq	(%r10), %r9
    00000120: 	subq	%rsi, %rcx
    00000123: 	leaq	(%r9,%rcx,4), %rcx
    00000127: 	leaq	0x200(%r9), %rdi
    0000012e: 	movss	(%rcx), %xmm3
    00000132: 	comiss	%xmm0, %xmm3
    00000135: 	jbe	.Ltmp5173 # Offset: 309
.Ltmp5170:
    0000013b: 	movq	%rsp, %rsi
    0000013e: 	movq	%r8, %rdx
    00000141: 	movq	%r12, %rdi
    00000144: 	movaps	%xmm2, (%rsp)
    00000148: 	movaps	%xmm1, 0x10(%rsp)
    0000014d: 	callq	_Z23upper_bound_recur_innerISt15_Deque_iteratorIfRfPfEflET_S4_T0_T1_ # Offset: 333
    00000152: 	jmp	.Ltmp5172 # Offset: 338
    00000157: 	nopw	(%rax,%rax) # Size: 9
.Ltmp5169:
    00000160: 	movq	%rcx, %rsi
    00000163: 	sarq	$0x7, %rsi
    00000167: 	jmp	.Ltmp5174 # Offset: 359
    00000169: 	nopl	(%rax) # Size: 7
.Ltmp5171:
    00000170: 	movq	0x8(%r10), %rcx
    00000174: 	addq	$0x8, %r10
    00000178: 	leaq	0x200(%rcx), %rdi
    0000017f: 	movq	%rcx, %r9
    00000182: 	jmp	.Ltmp5175 # Offset: 386
.Ltmp5167:
    00000187: 	callq	__stack_chk_fail@PLT # Offset: 391
DWARF CFI Instructions:
    <empty>
End of Function "_Z23upper_bound_recur_innerISt15_Deque_iteratorIfRfPfEflET_S4_T0_T1_"

Binary Function "_Z17upper_bound_recurISt15_Deque_iteratorIfRfPfEfET_S4_S4_T0_" after disassembly {
  Number      : 479
  State       : disassembled
  Address     : 0x2d5d0
  Size        : 0x1ac
  MaxSize     : 0x1b0
  Offset      : 0x2d5d0
  Section     : .text
  Orc Section : .local.text._Z17upper_bound_recurISt15_Deque_iteratorIfRfPfEfET_S4_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0478:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movq	%rdx, %rcx
    00000009: 	movq	%rdi, %r12
    0000000c: 	subq	$0x30, %rsp
    00000010: 	movdqu	0x10(%rsi), %xmm1
    00000015: 	movq	0x18(%rdx), %rdx
    00000019: 	movq	%fs:0x28, %rax
    00000022: 	movq	%rax, 0x28(%rsp)
    00000027: 	xorl	%eax, %eax
    00000029: 	movdqu	(%rsi), %xmm2
    0000002d: 	movhlps	%xmm1, %xmm5
    00000030: 	movq	%rdx, %rax
    00000033: 	movq	%xmm5, %rdi
    00000038: 	movq	%xmm2, %r8
    0000003d: 	movhlps	%xmm2, %xmm4
    00000040: 	subq	%rdi, %rax
    00000043: 	sarq	$0x3, %rax
    00000047: 	cmpq	$0x1, %rdx
    0000004b: 	movq	(%rcx), %rdx
    0000004e: 	adcq	$-0x1, %rax
    00000052: 	subq	0x8(%rcx), %rdx
    00000056: 	sarq	$0x2, %rdx
    0000005a: 	shlq	$0x7, %rax
    0000005e: 	addq	%rdx, %rax
    00000061: 	movq	%xmm1, %rdx
    00000066: 	subq	%r8, %rdx
    00000069: 	sarq	$0x2, %rdx
    0000006d: 	addq	%rdx, %rax
    00000070: 	jne	.Ltmp5176 # Offset: 112
    00000072: 	movups	%xmm2, (%r12)
    00000077: 	movups	%xmm1, 0x10(%r12)
.Ltmp5182:
    0000007d: 	movq	0x28(%rsp), %rax
    00000082: 	subq	%fs:0x28, %rax
    0000008b: 	jne	.Ltmp5177 # Offset: 139
    00000091: 	addq	$0x30, %rsp
    00000095: 	movq	%r12, %rax
    00000098: 	popq	%r12
    0000009a: 	retq # Offset: 154
    0000009b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5176:
    000000a0: 	movq	%rax, %rdx
    000000a3: 	movq	%xmm4, %r9
    000000a8: 	movq	%xmm2, %rcx
    000000ad: 	shrq	$0x3f, %rdx
    000000b1: 	subq	%r9, %rcx
    000000b4: 	addq	%rax, %rdx
    000000b7: 	sarq	$0x2, %rcx
    000000bb: 	sarq	%rdx
    000000be: 	addq	%rdx, %rcx
    000000c1: 	js	.Ltmp5178 # Offset: 193
    000000c3: 	cmpq	$0x7f, %rcx
    000000c7: 	jg	.Ltmp5179 # Offset: 199
    000000cd: 	leaq	(%r8,%rdx,4), %rcx
    000000d1: 	movq	%xmm1, %rsi
    000000d6: 	movss	(%rcx), %xmm3
    000000da: 	comiss	%xmm0, %xmm3
    000000dd: 	ja	.Ltmp5180 # Offset: 221
.Ltmp5183:
    000000e3: 	addq	$0x4, %rcx
    000000e7: 	cmpq	%rsi, %rcx
    000000ea: 	je	.Ltmp5181 # Offset: 234
.Ltmp5185:
    000000f0: 	movq	%rcx, %xmm1
    000000f5: 	movq	%r9, %xmm6
    000000fa: 	leaq	0x1(%rdx), %rcx
    000000fe: 	punpcklqdq	%xmm6, %xmm1
    00000102: 	movq	%rdi, %xmm7
    00000107: 	subq	%rcx, %rax
    0000010a: 	movq	%r12, %rdi
    0000010d: 	movaps	%xmm1, (%rsp)
    00000111: 	movq	%rsi, %xmm1
    00000116: 	movq	%rax, %rdx
    00000119: 	movq	%rsp, %rsi
    0000011c: 	punpcklqdq	%xmm7, %xmm1
    00000120: 	movaps	%xmm1, 0x10(%rsp)
    00000125: 	callq	_Z23upper_bound_recur_innerISt15_Deque_iteratorIfRfPfEflET_S4_T0_T1_ # Offset: 293
    0000012a: 	jmp	.Ltmp5182 # Offset: 298
    0000012f: 	nop # Size: 1
.Ltmp5178:
    00000130: 	movq	%rcx, %r8
    00000133: 	notq	%r8
    00000136: 	shrq	$0x7, %r8
    0000013a: 	notq	%r8
.Ltmp5184:
    0000013d: 	leaq	(%rdi,%r8,8), %rdi
    00000141: 	shlq	$0x7, %r8
    00000145: 	movq	(%rdi), %r9
    00000148: 	subq	%r8, %rcx
    0000014b: 	leaq	(%r9,%rcx,4), %rcx
    0000014f: 	leaq	0x200(%r9), %rsi
    00000156: 	movss	(%rcx), %xmm3
    0000015a: 	comiss	%xmm0, %xmm3
    0000015d: 	jbe	.Ltmp5183 # Offset: 349
.Ltmp5180:
    0000015f: 	movq	%rsp, %rsi
    00000162: 	movq	%r12, %rdi
    00000165: 	movaps	%xmm2, (%rsp)
    00000169: 	movaps	%xmm1, 0x10(%rsp)
    0000016e: 	callq	_Z23upper_bound_recur_innerISt15_Deque_iteratorIfRfPfEflET_S4_T0_T1_ # Offset: 366
    00000173: 	jmp	.Ltmp5182 # Offset: 371
    00000178: 	nopl	(%rax,%rax) # Size: 8
.Ltmp5179:
    00000180: 	movq	%rcx, %r8
    00000183: 	sarq	$0x7, %r8
    00000187: 	jmp	.Ltmp5184 # Offset: 391
    00000189: 	nopl	(%rax) # Size: 7
.Ltmp5181:
    00000190: 	movq	0x8(%rdi), %rcx
    00000194: 	addq	$0x8, %rdi
    00000198: 	leaq	0x200(%rcx), %rsi
    0000019f: 	movq	%rcx, %r9
    000001a2: 	jmp	.Ltmp5185 # Offset: 418
.Ltmp5177:
    000001a7: 	callq	__stack_chk_fail@PLT # Offset: 423
DWARF CFI Instructions:
    <empty>
End of Function "_Z17upper_bound_recurISt15_Deque_iteratorIfRfPfEfET_S4_S4_T0_"

Binary Function "_Z15TestSearchArrayISt15_Deque_iteratorIfRfPfEPFbS3_S3_fEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 480
  State       : disassembled
  Address     : 0x2d780
  Size        : 0x2ab
  MaxSize     : 0x2b0
  Offset      : 0x2d780
  Section     : .text
  Orc Section : .local.text._Z15TestSearchArrayISt15_Deque_iteratorIfRfPfEPFbS3_S3_fEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0479:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	movl	$0x1000, %edi
    0000000e: 	pushq	%r14
    00000010: 	pushq	%r13
    00000012: 	pushq	%r12
    00000014: 	movq	%rsi, %r12
    00000017: 	pushq	%rbp
    00000018: 	pushq	%rbx
    00000019: 	subq	$0x88, %rsp
    00000020: 	movq	%r8, 0x28(%rsp)
    00000025: 	movq	%rdx, 0x20(%rsp)
    0000002a: 	movq	%rcx, 0x10(%rsp)
    0000002f: 	movb	%r9b, 0x1f(%rsp)
    00000034: 	movq	%fs:0x28, %rax
    0000003d: 	movq	%rax, 0x78(%rsp)
    00000042: 	xorl	%eax, %eax
    00000044: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    0000004b: 	callq	_Znwm@PLT # Offset: 75
    00000050: 	movq	%rax, %rbx
    00000053: 	movq	%rax, 0x8(%rsp)
    00000058: 	addq	$0x4, %rax
    0000005c: 	leaq	0x1000(%rbx), %r8
    00000063: 	movl	$0x0, -0x4(%rax)
    0000006a: 	cmpq	%r8, %rax
    0000006d: 	je	.Ltmp5186 # Offset: 109
    0000006f: 	leaq	0xc(%rbx), %rdi
    00000073: 	movq	$0x0, 0x4(%rbx)
    0000007b: 	movq	$0x0, 0xff8(%rbx)
    00000086: 	andq	$-0x8, %rdi
    0000008a: 	subq	%rdi, %rax
    0000008d: 	movq	%rax, %rcx
    00000090: 	xorl	%eax, %eax
    00000092: 	addl	$0xffc, %ecx
    00000098: 	shrl	$0x3, %ecx
    0000009b: 	rep		stosq	%rax, %es:(%rdi)
.Ltmp5186:
    0000009e: 	movq	(%r15), %rbx
    000000a1: 	movq	0x18(%r15), %r10
    000000a5: 	movabsq	$0x5851f42d4c957f2d, %r9
    000000af: 	movabsq	$0x14057b7ef767814f, %rdi
    000000b9: 	movq	0x8(%rsp), %rcx
    000000be: 	movq	0x20(%rsp), %r11
    000000c3: 	movq	%rbx, %rsi
    000000c6: 	subq	0x8(%r15), %rsi
    000000ca: 	sarq	$0x2, %rsi
    000000ce: 	jmp	.Ltmp5187 # Offset: 206
.Ltmp5190:
    000000d0: 	cmpq	$0x7f, %rax
    000000d4: 	jg	.Ltmp5188 # Offset: 212
    000000d6: 	leaq	(%rbx,%rdx,4), %rax
.Ltmp5191:
    000000da: 	movss	(%rax), %xmm0
    000000de: 	addq	$0x4, %rcx
    000000e2: 	movss	%xmm0, -0x4(%rcx)
    000000e7: 	cmpq	%rcx, %r8
    000000ea: 	je	.Ltmp5189 # Offset: 234
.Ltmp5187:
    000000ec: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000000f3: 	imulq	%r9, %rax
    000000f7: 	addq	%rdi, %rax
    000000fa: 	movq	%rax, %rdx
    000000fd: 	movq	%rax, %rbp
    00000100: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000107: 	shrq	$0x14, %rdx
    0000010b: 	shlq	$0x17, %rbp
    0000010f: 	xorq	%rbp, %rdx
    00000112: 	xorq	%rdx, %rax
    00000115: 	xorl	%edx, %edx
    00000117: 	divq	%r11
    0000011a: 	movq	%rdx, %rax
    0000011d: 	addq	%rsi, %rax
    00000120: 	jns	.Ltmp5190 # Offset: 288
    00000122: 	movq	%rax, %rdx
    00000125: 	notq	%rdx
    00000128: 	shrq	$0x7, %rdx
    0000012c: 	notq	%rdx
.Ltmp5192:
    0000012f: 	movq	%rdx, %rbp
    00000132: 	movq	(%r10,%rdx,8), %rdx
    00000136: 	shlq	$0x7, %rbp
    0000013a: 	subq	%rbp, %rax
    0000013d: 	leaq	(%rdx,%rax,4), %rax
    00000141: 	jmp	.Ltmp5191 # Offset: 321
    00000143: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5188:
    00000148: 	movq	%rax, %rdx
    0000014b: 	sarq	$0x7, %rdx
    0000014f: 	jmp	.Ltmp5192 # Offset: 335
.Ltmp5189:
    00000151: 	callq	clock@PLT # Offset: 337
    00000156: 	xorl	%ebx, %ebx
    00000158: 	xorl	%ebp, %ebp
    0000015a: 	leaq	0x50(%rsp), %r13
    0000015f: 	movq	%rax, start_time(%rip)
    00000166: 	leaq	0x30(%rsp), %r14
.Ltmp5196:
    0000016b: 	leaq	0xc8(%rbp), %rax
    00000172: 	movq	%rax, (%rsp)
    00000176: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp5194:
    00000180: 	movq	%rbp, %rax
    00000183: 	movq	0x8(%rsp), %rcx
    00000188: 	movdqu	(%r15), %xmm4
    0000018d: 	movq	%r13, %rsi
    00000190: 	movdqu	(%r12), %xmm2
    00000196: 	movdqu	0x10(%r12), %xmm3
    0000019d: 	addq	$0x1, %rbp
    000001a1: 	movq	%r14, %rdi
    000001a4: 	movdqu	0x10(%r15), %xmm5
    000001aa: 	andl	$0x3ff, %eax
    000001af: 	movaps	%xmm4, 0x30(%rsp)
    000001b4: 	movss	(%rcx,%rax,4), %xmm0
    000001b9: 	movaps	%xmm2, 0x50(%rsp)
    000001be: 	movq	0x10(%rsp), %rax
    000001c3: 	movaps	%xmm3, 0x60(%rsp)
    000001c8: 	movaps	%xmm5, 0x40(%rsp)
    000001cd: 	callq	*%rax # Offset: 461
    000001cf: 	testb	%al, %al
    000001d1: 	jne	.Ltmp5193 # Offset: 465
    000001d3: 	cmpb	$0x0, 0x1f(%rsp)
    000001d8: 	movl	$0x1, %eax
    000001dd: 	cmovel	%eax, %ebx
.Ltmp5193:
    000001e0: 	cmpq	(%rsp), %rbp
    000001e4: 	jne	.Ltmp5194 # Offset: 484
    000001e6: 	callq	clock@PLT # Offset: 486
    000001eb: 	movsd	gMinimumTimeTarget(%rip), %xmm1
    000001f3: 	pxor	%xmm0, %xmm0
    000001f7: 	movq	%rax, end_time(%rip)
    000001fe: 	subq	start_time(%rip), %rax
    00000205: 	cvtsi2sd	%rax, %xmm0
    0000020a: 	divsd	DATAat0x34410(%rip), %xmm0
    00000212: 	comisd	%xmm0, %xmm1
    00000216: 	jbe	.Ltmp5195 # Offset: 534
    00000218: 	cmpq	$0x5f5e0ff, %rbp
    0000021f: 	jbe	.Ltmp5196 # Offset: 543
.Ltmp5195:
    00000225: 	movq	0x28(%rsp), %rdx
    0000022a: 	movq	0x20(%rsp), %rdi
    0000022f: 	movq	%rbp, %rsi
    00000232: 	callq	_Z13record_resultdmmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 562
    00000237: 	testb	%bl, %bl
    00000239: 	jne	.Ltmp5197 # Offset: 569
.Ltmp5199:
    0000023b: 	movq	0x78(%rsp), %rax
    00000240: 	subq	%fs:0x28, %rax
    00000249: 	jne	.Ltmp5198 # Offset: 585
    0000024b: 	movq	0x8(%rsp), %rdi
    00000250: 	addq	$0x88, %rsp
    00000257: 	movl	$0x1000, %esi
    0000025c: 	popq	%rbx
    0000025d: 	popq	%rbp
    0000025e: 	popq	%r12
    00000260: 	popq	%r13
    00000262: 	popq	%r14
    00000264: 	popq	%r15
    00000266: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 614
.Ltmp5197:
    0000026b: 	movq	0x28(%rsp), %rax
    00000270: 	leaq	DATAat0x34137(%rip), %rsi
    00000277: 	movl	$0x1, %edi
    0000027c: 	movq	(%rax), %rdx
    0000027f: 	xorl	%eax, %eax
    00000281: 	callq	__printf_chk@PLT # Offset: 641
    00000286: 	jmp	.Ltmp5199 # Offset: 646
.Ltmp5198:
    00000288: 	callq	__stack_chk_fail@PLT # Offset: 648
    0000028d: 	endbr64
    00000291: 	movq	%rax, %rbp
    00000294: 	movq	0x8(%rsp), %rdi
    00000299: 	movl	$0x1000, %esi
    0000029e: 	callq	_ZdlPvm@PLT # Offset: 670
    000002a3: 	movq	%rbp, %rdi
    000002a6: 	callq	_Unwind_Resume@PLT # Offset: 678
DWARF CFI Instructions:
    <empty>
End of Function "_Z15TestSearchArrayISt15_Deque_iteratorIfRfPfEPFbS3_S3_fEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z13TestOneSearchISt15_Deque_iteratorIfRfPfEPFbS3_S3_fEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 481
  State       : disassembled
  Address     : 0x2da30
  Size        : 0x42f
  MaxSize     : 0x430
  Offset      : 0x2da30
  Section     : .text
  Orc Section : .local.text._Z13TestOneSearchISt15_Deque_iteratorIfRfPfEPFbS3_S3_fEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0480:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rdx, %r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rsi, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movq	%rdi, %rbx
    00000017: 	subq	$0x98, %rsp
    0000001e: 	movq	(%rdi), %rdx
    00000021: 	movq	(%rsi), %rsi
    00000024: 	movq	%rcx, 0x8(%rsp)
    00000029: 	movss	DATAat0x34560(%rip), %xmm0
    00000031: 	movq	%r8, 0x10(%rsp)
    00000036: 	movq	0x10(%rdi), %rcx
    0000003a: 	movq	0x18(%rdi), %rdi
    0000003e: 	movq	%fs:0x28, %rax
    00000047: 	movq	%rax, 0x88(%rsp)
    0000004f: 	xorl	%eax, %eax
    00000051: 	cmpq	%rsi, %rdx
    00000054: 	jne	.Ltmp5200 # Offset: 84
    00000056: 	jmp	.Ltmp5201 # Offset: 86
    00000058: 	nopl	(%rax,%rax) # Size: 8
.Ltmp5202:
    00000060: 	movss	%xmm0, (%rdx)
    00000064: 	cmpq	%rsi, %rax
    00000067: 	je	.Ltmp5201 # Offset: 103
.Ltmp5203:
    00000069: 	movq	%rax, %rdx
.Ltmp5200:
    0000006c: 	leaq	0x4(%rdx), %rax
    00000070: 	cmpq	%rcx, %rax
    00000073: 	jne	.Ltmp5202 # Offset: 115
    00000075: 	movq	0x8(%rdi), %rax
    00000079: 	leaq	0x8(%rdi), %r8
    0000007d: 	movss	%xmm0, (%rdx)
    00000081: 	leaq	0x200(%rax), %rcx
    00000088: 	cmpq	%rax, %rsi
    0000008b: 	je	.Ltmp5201 # Offset: 139
    0000008d: 	movq	%r8, %rdi
    00000090: 	jmp	.Ltmp5203 # Offset: 144
    00000092: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5201:
    00000098: 	movq	0x10(%rsp), %rsi
    0000009d: 	leaq	0x60(%rsp), %r13
    000000a2: 	movzbl	%r9b, %eax
    000000a6: 	leaq	DATAat0x34160(%rip), %rdx
    000000ad: 	movq	%r13, %rdi
    000000b0: 	movl	%eax, 0x4(%rsp)
    000000b4: 	leaq	0x40(%rsp), %r15
    000000b9: 	leaq	0x20(%rsp), %r14
    000000be: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 190
    000000c3: 	movdqu	(%rbp), %xmm5
    000000c8: 	movdqu	0x10(%rbp), %xmm6
    000000cd: 	movq	%r13, %r8
    000000d0: 	movdqu	(%rbx), %xmm7
    000000d4: 	movdqu	0x10(%rbx), %xmm4
    000000d9: 	movq	%r12, %rdx
    000000dc: 	movq	%r15, %rsi
    000000df: 	movl	0x4(%rsp), %r9d
    000000e4: 	movq	0x8(%rsp), %rcx
    000000e9: 	movq	%r14, %rdi
    000000ec: 	movaps	%xmm5, 0x40(%rsp)
    000000f1: 	movaps	%xmm6, 0x50(%rsp)
    000000f6: 	movaps	%xmm7, 0x20(%rsp)
    000000fb: 	movaps	%xmm4, 0x30(%rsp)
    00000100: 	callq	_Z15TestSearchArrayISt15_Deque_iteratorIfRfPfEPFbS3_S3_fEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 256
    00000105: 	movq	0x60(%rsp), %rdi
    0000010a: 	leaq	0x70(%rsp), %rax
    0000010f: 	movq	%rax, 0x18(%rsp)
    00000114: 	cmpq	%rax, %rdi
    00000117: 	je	.Ltmp5204 # Offset: 279
    00000119: 	movq	0x70(%rsp), %rax
    0000011e: 	leaq	0x1(%rax), %rsi
    00000122: 	callq	_ZdlPvm@PLT # Offset: 290
.Ltmp5204:
    00000127: 	movq	(%rbx), %rdi
    0000012a: 	movq	0x10(%rbx), %r8
    0000012e: 	movq	0x18(%rbx), %r9
    00000132: 	cmpq	$0x9, %r12
    00000136: 	jbe	.Ltmp5205 # Offset: 310
    0000013c: 	movabsq	$-0x3333333333333333, %rdx
    00000146: 	movq	%r12, %rax
    00000149: 	mulq	%rdx
    0000014c: 	shrq	$0x3, %rdx
.Ltmp5222:
    00000150: 	movss	DATAat0x34570(%rip), %xmm1
    00000158: 	xorl	%esi, %esi
    0000015a: 	pxor	%xmm0, %xmm0
    0000015e: 	cmpq	$0x0, %r12
    00000162: 	jbe	.Ltmp5206 # Offset: 354
    00000164: 	nopl	(%rax) # Size: 4
.Ltmp5211:
    00000168: 	xorl	%ecx, %ecx
    0000016a: 	jmp	.Ltmp5207 # Offset: 362
    0000016c: 	nopl	(%rax) # Size: 4
.Ltmp5209:
    00000170: 	addq	$0x1, %rcx
    00000174: 	movss	%xmm0, (%rdi)
    00000178: 	addq	$0x1, %rsi
    0000017c: 	cmpq	%rdx, %rcx
    0000017f: 	jae	.Ltmp5208 # Offset: 383
    00000181: 	cmpq	%rsi, %r12
    00000184: 	jbe	.Ltmp5208 # Offset: 388
.Ltmp5210:
    00000186: 	movq	%rax, %rdi
.Ltmp5207:
    00000189: 	leaq	0x4(%rdi), %rax
    0000018d: 	cmpq	%r8, %rax
    00000190: 	jne	.Ltmp5209 # Offset: 400
    00000192: 	movq	0x8(%r9), %rax
    00000196: 	leaq	0x8(%r9), %r10
    0000019a: 	addq	$0x1, %rsi
    0000019e: 	movss	%xmm0, (%rdi)
    000001a2: 	addq	$0x1, %rcx
    000001a6: 	movq	%r10, %r9
    000001a9: 	leaq	0x200(%rax), %r8
    000001b0: 	cmpq	%rsi, %r12
    000001b3: 	jbe	.Ltmp5208 # Offset: 435
    000001b5: 	cmpq	%rdx, %rcx
    000001b8: 	jb	.Ltmp5210 # Offset: 440
    000001ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5208:
    000001c0: 	addss	%xmm1, %xmm0
    000001c4: 	movq	%rax, %rdi
    000001c7: 	cmpq	%rsi, %r12
    000001ca: 	ja	.Ltmp5211 # Offset: 458
.Ltmp5206:
    000001cc: 	movq	0x10(%rsp), %rsi
    000001d1: 	leaq	DATAat0x3416e(%rip), %rdx
    000001d8: 	movq	%r13, %rdi
    000001db: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 475
    000001e0: 	movdqu	(%rbp), %xmm5
    000001e5: 	movdqu	0x10(%rbp), %xmm6
    000001ea: 	movq	%r13, %r8
    000001ed: 	movdqu	(%rbx), %xmm7
    000001f1: 	movdqu	0x10(%rbx), %xmm2
    000001f6: 	movq	%r12, %rdx
    000001f9: 	movq	%r15, %rsi
    000001fc: 	movl	0x4(%rsp), %r9d
    00000201: 	movq	0x8(%rsp), %rcx
    00000206: 	movq	%r14, %rdi
    00000209: 	movaps	%xmm5, 0x40(%rsp)
    0000020e: 	movaps	%xmm6, 0x50(%rsp)
    00000213: 	movaps	%xmm7, 0x20(%rsp)
    00000218: 	movaps	%xmm2, 0x30(%rsp)
    0000021d: 	callq	_Z15TestSearchArrayISt15_Deque_iteratorIfRfPfEPFbS3_S3_fEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 541
    00000222: 	movq	0x60(%rsp), %rdi
    00000227: 	cmpq	0x18(%rsp), %rdi
    0000022c: 	je	.Ltmp5212 # Offset: 556
    0000022e: 	movq	0x70(%rsp), %rax
    00000233: 	leaq	0x1(%rax), %rsi
    00000237: 	callq	_ZdlPvm@PLT # Offset: 567
.Ltmp5212:
    0000023c: 	movdqu	0x10(%rbx), %xmm1
    00000241: 	movdqu	(%rbp), %xmm3
    00000246: 	xorl	%eax, %eax
    00000248: 	movdqu	(%rbx), %xmm2
    0000024c: 	movdqu	0x10(%rbp), %xmm4
    00000251: 	movhlps	%xmm1, %xmm5
    00000254: 	movq	%xmm3, %r8
    00000259: 	movq	%xmm1, %rdi
    0000025e: 	movq	%xmm2, %rcx
    00000263: 	movq	%xmm5, %r10
    00000268: 	cmpq	%r8, %rcx
    0000026b: 	jne	.Ltmp5213 # Offset: 619
    0000026d: 	jmp	.Ltmp5214 # Offset: 621
    00000272: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5216:
    00000278: 	testq	%rax, %rax
    0000027b: 	js	.Ltmp5215 # Offset: 635
    0000027d: 	pxor	%xmm0, %xmm0
    00000281: 	cvtsi2ss	%rax, %xmm0
    00000286: 	movss	%xmm0, (%rcx)
    0000028a: 	cmpq	%r8, %rdx
    0000028d: 	je	.Ltmp5214 # Offset: 653
.Ltmp5218:
    0000028f: 	movq	%rdx, %rcx
    00000292: 	movq	%rsi, %rax
.Ltmp5213:
    00000295: 	leaq	0x4(%rcx), %rdx
    00000299: 	leaq	0x1(%rax), %rsi
    0000029d: 	cmpq	%rdx, %rdi
    000002a0: 	jne	.Ltmp5216 # Offset: 672
    000002a2: 	movq	0x8(%r10), %rdx
    000002a6: 	leaq	0x8(%r10), %r9
    000002aa: 	leaq	0x200(%rdx), %rdi
    000002b1: 	testq	%rax, %rax
    000002b4: 	js	.Ltmp5217 # Offset: 692
    000002ba: 	pxor	%xmm0, %xmm0
    000002be: 	cvtsi2ss	%rax, %xmm0
.Ltmp5221:
    000002c3: 	movss	%xmm0, (%rcx)
    000002c7: 	cmpq	%r8, %rdx
    000002ca: 	je	.Ltmp5214 # Offset: 714
    000002cc: 	movq	%r9, %r10
    000002cf: 	jmp	.Ltmp5218 # Offset: 719
    000002d1: 	nopl	(%rax) # Size: 7
.Ltmp5215:
    000002d8: 	movq	%rax, %r9
    000002db: 	andl	$0x1, %eax
    000002de: 	pxor	%xmm0, %xmm0
    000002e2: 	shrq	%r9
    000002e5: 	orq	%rax, %r9
    000002e8: 	cvtsi2ss	%r9, %xmm0
    000002ed: 	addss	%xmm0, %xmm0
    000002f1: 	movss	%xmm0, (%rcx)
    000002f5: 	cmpq	%r8, %rdx
    000002f8: 	jne	.Ltmp5218 # Offset: 760
.Ltmp5214:
    000002fa: 	movq	%r15, %rsi
    000002fd: 	movq	%r14, %rdi
    00000300: 	movaps	%xmm3, 0x40(%rsp)
    00000305: 	movaps	%xmm4, 0x50(%rsp)
    0000030a: 	movaps	%xmm2, 0x20(%rsp)
    0000030f: 	movaps	%xmm1, 0x30(%rsp)
    00000314: 	callq	_Z18quicksort2_forwardISt15_Deque_iteratorIfRfPfEEvT_S4_ # Offset: 788
    00000319: 	movq	0x10(%rsp), %rsi
    0000031e: 	leaq	DATAat0x34184(%rip), %rdx
    00000325: 	movq	%r13, %rdi
    00000328: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 808
    0000032d: 	movdqu	0x10(%rbp), %xmm0
    00000332: 	movdqu	(%rbp), %xmm3
    00000337: 	movq	%r13, %r8
    0000033a: 	movdqu	(%rbx), %xmm4
    0000033e: 	movl	0x4(%rsp), %r9d
    00000343: 	movq	%r12, %rdx
    00000346: 	movq	%r15, %rsi
    00000349: 	movaps	%xmm0, 0x50(%rsp)
    0000034e: 	movq	0x8(%rsp), %rcx
    00000353: 	movdqu	0x10(%rbx), %xmm0
    00000358: 	movq	%r14, %rdi
    0000035b: 	movaps	%xmm3, 0x40(%rsp)
    00000360: 	movaps	%xmm4, 0x20(%rsp)
    00000365: 	movaps	%xmm0, 0x30(%rsp)
    0000036a: 	callq	_Z15TestSearchArrayISt15_Deque_iteratorIfRfPfEPFbS3_S3_fEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 874
    0000036f: 	movq	0x60(%rsp), %rdi
    00000374: 	cmpq	0x18(%rsp), %rdi
    00000379: 	je	.Ltmp5219 # Offset: 889
    0000037b: 	movq	0x70(%rsp), %rax
    00000380: 	leaq	0x1(%rax), %rsi
    00000384: 	callq	_ZdlPvm@PLT # Offset: 900
.Ltmp5219:
    00000389: 	movq	0x88(%rsp), %rax
    00000391: 	subq	%fs:0x28, %rax
    0000039a: 	jne	.Ltmp5220 # Offset: 922
    0000039c: 	addq	$0x98, %rsp
    000003a3: 	popq	%rbx
    000003a4: 	popq	%rbp
    000003a5: 	popq	%r12
    000003a7: 	popq	%r13
    000003a9: 	popq	%r14
    000003ab: 	popq	%r15
    000003ad: 	retq # Offset: 941
    000003ae: 	nop # Size: 2
.Ltmp5217:
    000003b0: 	movq	%rax, %r10
    000003b3: 	andl	$0x1, %eax
    000003b6: 	pxor	%xmm0, %xmm0
    000003ba: 	shrq	%r10
    000003bd: 	orq	%rax, %r10
    000003c0: 	cvtsi2ss	%r10, %xmm0
    000003c5: 	addss	%xmm0, %xmm0
    000003c9: 	jmp	.Ltmp5221 # Offset: 969
.Ltmp5205:
    000003ce: 	testq	%r12, %r12
    000003d1: 	je	.Ltmp5206 # Offset: 977
    000003d7: 	movl	$0x1, %edx
    000003dc: 	jmp	.Ltmp5222 # Offset: 988
.Ltmp5220:
    000003e1: 	callq	__stack_chk_fail@PLT # Offset: 993
    000003e6: 	endbr64
.Ltmp5224:
    000003ea: 	movq	%rax, %rbp
    000003ed: 	jmp	.Ltmp5223 # Offset: 1005
    000003ef: 	endbr64
    000003f3: 	jmp	.Ltmp5224 # Offset: 1011
    000003f5: 	endbr64
    000003f9: 	movq	%rax, %rbp
    000003fc: 	movq	0x60(%rsp), %rdi
    00000401: 	leaq	0x70(%rsp), %rax
    00000406: 	cmpq	%rax, %rdi
    00000409: 	je	.Ltmp5225 # Offset: 1033
.Ltmp5226:
    0000040b: 	movq	0x70(%rsp), %rax
    00000410: 	leaq	0x1(%rax), %rsi
    00000414: 	callq	_ZdlPvm@PLT # Offset: 1044
.Ltmp5225:
    00000419: 	movq	%rbp, %rdi
    0000041c: 	callq	_Unwind_Resume@PLT # Offset: 1052
.Ltmp5223:
    00000421: 	movq	0x60(%rsp), %rdi
    00000426: 	cmpq	0x18(%rsp), %rdi
    0000042b: 	jne	.Ltmp5226 # Offset: 1067
    0000042d: 	jmp	.Ltmp5225 # Offset: 1069
DWARF CFI Instructions:
    <empty>
End of Function "_Z13TestOneSearchISt15_Deque_iteratorIfRfPfEPFbS3_S3_fEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z16TestOneContainerISt15_Deque_iteratorIfRfPfEEvT_S4_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 482
  State       : disassembled
  Address     : 0x2de60
  Size        : 0x77c
  MaxSize     : 0x780
  Offset      : 0x2de60
  Section     : .text
  Orc Section : .local.text._Z16TestOneContainerISt15_Deque_iteratorIfRfPfEEvT_S4_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0481:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdx, %r14
    0000000b: 	leaq	DATAat0x3418f(%rip), %rdx
    00000012: 	pushq	%r13
    00000014: 	movq	%rcx, %r13
    00000017: 	pushq	%r12
    00000019: 	movq	%rsi, %r12
    0000001c: 	movq	%rcx, %rsi
    0000001f: 	pushq	%rbp
    00000020: 	pushq	%rbx
    00000021: 	movq	%rdi, %rbx
    00000024: 	subq	$0x88, %rsp
    0000002b: 	movq	%fs:0x28, %rax
    00000034: 	movq	%rax, 0x78(%rsp)
    00000039: 	xorl	%eax, %eax
    0000003b: 	leaq	0x50(%rsp), %rbp
    00000040: 	leaq	0x30(%rsp), %r15
    00000045: 	movq	%rbp, %rdi
    00000048: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 72
    0000004d: 	movdqu	0x10(%rbx), %xmm4
    00000052: 	xorl	%r9d, %r9d
    00000055: 	movq	%rbp, %r8
    00000058: 	movdqu	(%r12), %xmm1
    0000005e: 	movdqu	(%rbx), %xmm3
    00000062: 	movq	%r14, %rdx
    00000065: 	movq	%r15, %rsi
    00000068: 	movdqu	0x10(%r12), %xmm2
    0000006f: 	leaq	0x10(%rsp), %rdi
    00000074: 	movaps	%xmm4, 0x20(%rsp)
    00000079: 	leaq	_Z14std_lowerboundISt15_Deque_iteratorIfRfPfEfET_S4_S4_T0_(%rip), %rcx
    00000080: 	movq	%rdi, 0x8(%rsp)
    00000085: 	movaps	%xmm1, 0x30(%rsp)
    0000008a: 	movaps	%xmm2, 0x40(%rsp)
    0000008f: 	movaps	%xmm3, 0x10(%rsp)
    00000094: 	callq	_Z13TestOneSearchISt15_Deque_iteratorIfRfPfEPFS3_S3_S3_fEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 148
    00000099: 	movq	0x50(%rsp), %rdi
    0000009e: 	leaq	0x60(%rsp), %rax
    000000a3: 	movq	%rax, (%rsp)
    000000a7: 	cmpq	%rax, %rdi
    000000aa: 	je	.Ltmp5227 # Offset: 170
    000000ac: 	movq	0x60(%rsp), %rax
    000000b1: 	leaq	0x1(%rax), %rsi
    000000b5: 	callq	_ZdlPvm@PLT # Offset: 181
.Ltmp5227:
    000000ba: 	leaq	DATAat0x341a1(%rip), %rdx
    000000c1: 	movq	%r13, %rsi
    000000c4: 	movq	%rbp, %rdi
    000000c7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 199
    000000cc: 	movdqu	0x10(%rbx), %xmm1
    000000d1: 	xorl	%r9d, %r9d
    000000d4: 	movq	%rbp, %r8
    000000d7: 	movdqu	(%r12), %xmm5
    000000dd: 	movdqu	(%rbx), %xmm7
    000000e1: 	movq	%r14, %rdx
    000000e4: 	movq	%r15, %rsi
    000000e7: 	movdqu	0x10(%r12), %xmm6
    000000ee: 	movq	0x8(%rsp), %rdi
    000000f3: 	movaps	%xmm1, 0x20(%rsp)
    000000f8: 	leaq	_Z12lower_bound1ISt15_Deque_iteratorIfRfPfEfET_S4_S4_T0_(%rip), %rcx
    000000ff: 	movaps	%xmm5, 0x30(%rsp)
    00000104: 	movaps	%xmm6, 0x40(%rsp)
    00000109: 	movaps	%xmm7, 0x10(%rsp)
    0000010e: 	callq	_Z13TestOneSearchISt15_Deque_iteratorIfRfPfEPFS3_S3_S3_fEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 270
    00000113: 	movq	0x50(%rsp), %rdi
    00000118: 	cmpq	(%rsp), %rdi
    0000011c: 	je	.Ltmp5228 # Offset: 284
    0000011e: 	movq	0x60(%rsp), %rax
    00000123: 	leaq	0x1(%rax), %rsi
    00000127: 	callq	_ZdlPvm@PLT # Offset: 295
.Ltmp5228:
    0000012c: 	leaq	DATAat0x341af(%rip), %rdx
    00000133: 	movq	%r13, %rsi
    00000136: 	movq	%rbp, %rdi
    00000139: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 313
    0000013e: 	movdqu	0x10(%rbx), %xmm5
    00000143: 	xorl	%r9d, %r9d
    00000146: 	movq	%rbp, %r8
    00000149: 	movdqu	(%r12), %xmm2
    0000014f: 	movdqu	(%rbx), %xmm4
    00000153: 	movq	%r14, %rdx
    00000156: 	movq	%r15, %rsi
    00000159: 	movdqu	0x10(%r12), %xmm3
    00000160: 	movq	0x8(%rsp), %rdi
    00000165: 	movaps	%xmm5, 0x20(%rsp)
    0000016a: 	leaq	_Z12lower_bound2ISt15_Deque_iteratorIfRfPfEfET_S4_S4_T0_(%rip), %rcx
    00000171: 	movaps	%xmm2, 0x30(%rsp)
    00000176: 	movaps	%xmm3, 0x40(%rsp)
    0000017b: 	movaps	%xmm4, 0x10(%rsp)
    00000180: 	callq	_Z13TestOneSearchISt15_Deque_iteratorIfRfPfEPFS3_S3_S3_fEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 384
    00000185: 	movq	0x50(%rsp), %rdi
    0000018a: 	cmpq	(%rsp), %rdi
    0000018e: 	je	.Ltmp5229 # Offset: 398
    00000190: 	movq	0x60(%rsp), %rax
    00000195: 	leaq	0x1(%rax), %rsi
    00000199: 	callq	_ZdlPvm@PLT # Offset: 409
.Ltmp5229:
    0000019e: 	leaq	DATAat0x341bd(%rip), %rdx
    000001a5: 	movq	%r13, %rsi
    000001a8: 	movq	%rbp, %rdi
    000001ab: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 427
    000001b0: 	movdqu	0x10(%rbx), %xmm1
    000001b5: 	xorl	%r9d, %r9d
    000001b8: 	movq	%rbp, %r8
    000001bb: 	movdqu	(%r12), %xmm6
    000001c1: 	movdqu	(%rbx), %xmm0
    000001c5: 	movq	%r14, %rdx
    000001c8: 	movq	%r15, %rsi
    000001cb: 	movdqu	0x10(%r12), %xmm7
    000001d2: 	movq	0x8(%rsp), %rdi
    000001d7: 	movaps	%xmm1, 0x20(%rsp)
    000001dc: 	leaq	_Z17lower_bound_recurISt15_Deque_iteratorIfRfPfEfET_S4_S4_T0_(%rip), %rcx
    000001e3: 	movaps	%xmm6, 0x30(%rsp)
    000001e8: 	movaps	%xmm7, 0x40(%rsp)
    000001ed: 	movaps	%xmm0, 0x10(%rsp)
    000001f2: 	callq	_Z13TestOneSearchISt15_Deque_iteratorIfRfPfEPFS3_S3_S3_fEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 498
    000001f7: 	movq	0x50(%rsp), %rdi
    000001fc: 	cmpq	(%rsp), %rdi
    00000200: 	je	.Ltmp5230 # Offset: 512
    00000202: 	movq	0x60(%rsp), %rax
    00000207: 	leaq	0x1(%rax), %rsi
    0000020b: 	callq	_ZdlPvm@PLT # Offset: 523
.Ltmp5230:
    00000210: 	leaq	DATAat0x341d4(%rip), %rdx
    00000217: 	movq	%r13, %rsi
    0000021a: 	movq	%rbp, %rdi
    0000021d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 541
    00000222: 	movdqu	(%r12), %xmm2
    00000228: 	movdqu	(%rbx), %xmm4
    0000022c: 	movl	$0x1, %r9d
    00000232: 	movdqu	0x10(%r12), %xmm3
    00000239: 	movq	%rbp, %r8
    0000023c: 	movq	%r14, %rdx
    0000023f: 	movq	%r15, %rsi
    00000242: 	movdqu	0x10(%rbx), %xmm5
    00000247: 	movq	0x8(%rsp), %rdi
    0000024c: 	movaps	%xmm2, 0x30(%rsp)
    00000251: 	leaq	_Z14std_upperboundISt15_Deque_iteratorIfRfPfEfET_S4_S4_T0_(%rip), %rcx
    00000258: 	movaps	%xmm3, 0x40(%rsp)
    0000025d: 	movaps	%xmm4, 0x10(%rsp)
    00000262: 	movaps	%xmm5, 0x20(%rsp)
    00000267: 	callq	_Z13TestOneSearchISt15_Deque_iteratorIfRfPfEPFS3_S3_S3_fEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 615
    0000026c: 	movq	0x50(%rsp), %rdi
    00000271: 	cmpq	(%rsp), %rdi
    00000275: 	je	.Ltmp5231 # Offset: 629
    00000277: 	movq	0x60(%rsp), %rax
    0000027c: 	leaq	0x1(%rax), %rsi
    00000280: 	callq	_ZdlPvm@PLT # Offset: 640
.Ltmp5231:
    00000285: 	leaq	DATAat0x341e6(%rip), %rdx
    0000028c: 	movq	%r13, %rsi
    0000028f: 	movq	%rbp, %rdi
    00000292: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 658
    00000297: 	movdqu	(%r12), %xmm6
    0000029d: 	movdqu	(%rbx), %xmm0
    000002a1: 	movl	$0x1, %r9d
    000002a7: 	movdqu	0x10(%r12), %xmm7
    000002ae: 	movq	%rbp, %r8
    000002b1: 	movq	%r14, %rdx
    000002b4: 	movq	%r15, %rsi
    000002b7: 	movdqu	0x10(%rbx), %xmm1
    000002bc: 	movq	0x8(%rsp), %rdi
    000002c1: 	movaps	%xmm6, 0x30(%rsp)
    000002c6: 	leaq	_Z12upper_bound1ISt15_Deque_iteratorIfRfPfEfET_S4_S4_T0_(%rip), %rcx
    000002cd: 	movaps	%xmm7, 0x40(%rsp)
    000002d2: 	movaps	%xmm0, 0x10(%rsp)
    000002d7: 	movaps	%xmm1, 0x20(%rsp)
    000002dc: 	callq	_Z13TestOneSearchISt15_Deque_iteratorIfRfPfEPFS3_S3_S3_fEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 732
    000002e1: 	movq	0x50(%rsp), %rdi
    000002e6: 	cmpq	(%rsp), %rdi
    000002ea: 	je	.Ltmp5232 # Offset: 746
    000002ec: 	movq	0x60(%rsp), %rax
    000002f1: 	leaq	0x1(%rax), %rsi
    000002f5: 	callq	_ZdlPvm@PLT # Offset: 757
.Ltmp5232:
    000002fa: 	leaq	DATAat0x341f4(%rip), %rdx
    00000301: 	movq	%r13, %rsi
    00000304: 	movq	%rbp, %rdi
    00000307: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 775
    0000030c: 	movdqu	(%r12), %xmm2
    00000312: 	movdqu	(%rbx), %xmm4
    00000316: 	movl	$0x1, %r9d
    0000031c: 	movdqu	0x10(%r12), %xmm3
    00000323: 	movq	%rbp, %r8
    00000326: 	movq	%r14, %rdx
    00000329: 	movq	%r15, %rsi
    0000032c: 	movdqu	0x10(%rbx), %xmm5
    00000331: 	movq	0x8(%rsp), %rdi
    00000336: 	movaps	%xmm2, 0x30(%rsp)
    0000033b: 	leaq	_Z12upper_bound2ISt15_Deque_iteratorIfRfPfEfET_S4_S4_T0_(%rip), %rcx
    00000342: 	movaps	%xmm3, 0x40(%rsp)
    00000347: 	movaps	%xmm4, 0x10(%rsp)
    0000034c: 	movaps	%xmm5, 0x20(%rsp)
    00000351: 	callq	_Z13TestOneSearchISt15_Deque_iteratorIfRfPfEPFS3_S3_S3_fEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 849
    00000356: 	movq	0x50(%rsp), %rdi
    0000035b: 	cmpq	(%rsp), %rdi
    0000035f: 	je	.Ltmp5233 # Offset: 863
    00000361: 	movq	0x60(%rsp), %rax
    00000366: 	leaq	0x1(%rax), %rsi
    0000036a: 	callq	_ZdlPvm@PLT # Offset: 874
.Ltmp5233:
    0000036f: 	leaq	DATAat0x34202(%rip), %rdx
    00000376: 	movq	%r13, %rsi
    00000379: 	movq	%rbp, %rdi
    0000037c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 892
    00000381: 	movdqu	(%r12), %xmm6
    00000387: 	movdqu	(%rbx), %xmm0
    0000038b: 	movl	$0x1, %r9d
    00000391: 	movdqu	0x10(%r12), %xmm7
    00000398: 	movq	%rbp, %r8
    0000039b: 	movq	%r14, %rdx
    0000039e: 	movq	%r15, %rsi
    000003a1: 	movdqu	0x10(%rbx), %xmm1
    000003a6: 	movq	0x8(%rsp), %rdi
    000003ab: 	movaps	%xmm6, 0x30(%rsp)
    000003b0: 	leaq	_Z17upper_bound_recurISt15_Deque_iteratorIfRfPfEfET_S4_S4_T0_(%rip), %rcx
    000003b7: 	movaps	%xmm7, 0x40(%rsp)
    000003bc: 	movaps	%xmm0, 0x10(%rsp)
    000003c1: 	movaps	%xmm1, 0x20(%rsp)
    000003c6: 	callq	_Z13TestOneSearchISt15_Deque_iteratorIfRfPfEPFS3_S3_S3_fEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 966
    000003cb: 	movq	0x50(%rsp), %rdi
    000003d0: 	cmpq	(%rsp), %rdi
    000003d4: 	je	.Ltmp5234 # Offset: 980
    000003d6: 	movq	0x60(%rsp), %rax
    000003db: 	leaq	0x1(%rax), %rsi
    000003df: 	callq	_ZdlPvm@PLT # Offset: 991
.Ltmp5234:
    000003e4: 	leaq	DATAat0x34219(%rip), %rdx
    000003eb: 	movq	%r13, %rsi
    000003ee: 	movq	%rbp, %rdi
    000003f1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1009
    000003f6: 	movdqu	0x10(%rbx), %xmm5
    000003fb: 	xorl	%r9d, %r9d
    000003fe: 	movq	%rbp, %r8
    00000401: 	movdqu	(%r12), %xmm2
    00000407: 	movdqu	(%rbx), %xmm4
    0000040b: 	movq	%r14, %rdx
    0000040e: 	movq	%r15, %rsi
    00000411: 	movdqu	0x10(%r12), %xmm3
    00000418: 	movq	0x8(%rsp), %rdi
    0000041d: 	movaps	%xmm5, 0x20(%rsp)
    00000422: 	leaq	_Z16std_binarysearchISt15_Deque_iteratorIfRfPfEfEbT_S4_T0_(%rip), %rcx
    00000429: 	movaps	%xmm2, 0x30(%rsp)
    0000042e: 	movaps	%xmm3, 0x40(%rsp)
    00000433: 	movaps	%xmm4, 0x10(%rsp)
    00000438: 	callq	_Z13TestOneSearchISt15_Deque_iteratorIfRfPfEPFbS3_S3_fEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 1080
    0000043d: 	movq	0x50(%rsp), %rdi
    00000442: 	cmpq	(%rsp), %rdi
    00000446: 	je	.Ltmp5235 # Offset: 1094
    00000448: 	movq	0x60(%rsp), %rax
    0000044d: 	leaq	0x1(%rax), %rsi
    00000451: 	callq	_ZdlPvm@PLT # Offset: 1105
.Ltmp5235:
    00000456: 	leaq	DATAat0x3422d(%rip), %rdx
    0000045d: 	movq	%r13, %rsi
    00000460: 	movq	%rbp, %rdi
    00000463: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1123
    00000468: 	movdqu	0x10(%rbx), %xmm1
    0000046d: 	xorl	%r9d, %r9d
    00000470: 	movq	%rbp, %r8
    00000473: 	movdqu	(%r12), %xmm6
    00000479: 	movdqu	(%rbx), %xmm0
    0000047d: 	movq	%r14, %rdx
    00000480: 	movq	%r15, %rsi
    00000483: 	movdqu	0x10(%r12), %xmm7
    0000048a: 	movq	0x8(%rsp), %rdi
    0000048f: 	movaps	%xmm1, 0x20(%rsp)
    00000494: 	leaq	_Z13binarysearch1ISt15_Deque_iteratorIfRfPfEfEbT_S4_T0_(%rip), %rcx
    0000049b: 	movaps	%xmm6, 0x30(%rsp)
    000004a0: 	movaps	%xmm7, 0x40(%rsp)
    000004a5: 	movaps	%xmm0, 0x10(%rsp)
    000004aa: 	callq	_Z13TestOneSearchISt15_Deque_iteratorIfRfPfEPFbS3_S3_fEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 1194
    000004af: 	movq	0x50(%rsp), %rdi
    000004b4: 	cmpq	(%rsp), %rdi
    000004b8: 	je	.Ltmp5236 # Offset: 1208
    000004ba: 	movq	0x60(%rsp), %rax
    000004bf: 	leaq	0x1(%rax), %rsi
    000004c3: 	callq	_ZdlPvm@PLT # Offset: 1219
.Ltmp5236:
    000004c8: 	leaq	DATAat0x3423d(%rip), %rdx
    000004cf: 	movq	%r13, %rsi
    000004d2: 	movq	%rbp, %rdi
    000004d5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1237
    000004da: 	movdqu	0x10(%rbx), %xmm5
    000004df: 	xorl	%r9d, %r9d
    000004e2: 	movq	%rbp, %r8
    000004e5: 	movdqu	(%r12), %xmm2
    000004eb: 	movdqu	(%rbx), %xmm4
    000004ef: 	movq	%r14, %rdx
    000004f2: 	movq	%r15, %rsi
    000004f5: 	movdqu	0x10(%r12), %xmm3
    000004fc: 	movq	0x8(%rsp), %rdi
    00000501: 	movaps	%xmm5, 0x20(%rsp)
    00000506: 	leaq	_Z13binarysearch2ISt15_Deque_iteratorIfRfPfEfEbT_S4_T0_(%rip), %rcx
    0000050d: 	movaps	%xmm2, 0x30(%rsp)
    00000512: 	movaps	%xmm3, 0x40(%rsp)
    00000517: 	movaps	%xmm4, 0x10(%rsp)
    0000051c: 	callq	_Z13TestOneSearchISt15_Deque_iteratorIfRfPfEPFbS3_S3_fEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 1308
    00000521: 	movq	0x50(%rsp), %rdi
    00000526: 	cmpq	(%rsp), %rdi
    0000052a: 	je	.Ltmp5237 # Offset: 1322
    0000052c: 	movq	0x60(%rsp), %rax
    00000531: 	leaq	0x1(%rax), %rsi
    00000535: 	callq	_ZdlPvm@PLT # Offset: 1333
.Ltmp5237:
    0000053a: 	leaq	DATAat0x3424d(%rip), %rdx
    00000541: 	movq	%r13, %rsi
    00000544: 	movq	%rbp, %rdi
    00000547: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1351
    0000054c: 	movdqu	0x10(%rbx), %xmm1
    00000551: 	xorl	%r9d, %r9d
    00000554: 	movq	%rbp, %r8
    00000557: 	movdqu	(%r12), %xmm6
    0000055d: 	movdqu	(%rbx), %xmm0
    00000561: 	movq	%r14, %rdx
    00000564: 	movq	%r15, %rsi
    00000567: 	movdqu	0x10(%r12), %xmm7
    0000056e: 	movq	0x8(%rsp), %rdi
    00000573: 	movaps	%xmm1, 0x20(%rsp)
    00000578: 	leaq	_Z13binarysearch3ISt15_Deque_iteratorIfRfPfEfEbT_S4_T0_(%rip), %rcx
    0000057f: 	movaps	%xmm6, 0x30(%rsp)
    00000584: 	movaps	%xmm7, 0x40(%rsp)
    00000589: 	movaps	%xmm0, 0x10(%rsp)
    0000058e: 	callq	_Z13TestOneSearchISt15_Deque_iteratorIfRfPfEPFbS3_S3_fEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 1422
    00000593: 	movq	0x50(%rsp), %rdi
    00000598: 	cmpq	(%rsp), %rdi
    0000059c: 	je	.Ltmp5238 # Offset: 1436
    0000059e: 	movq	0x60(%rsp), %rax
    000005a3: 	leaq	0x1(%rax), %rsi
    000005a7: 	callq	_ZdlPvm@PLT # Offset: 1447
.Ltmp5238:
    000005ac: 	leaq	DATAat0x3425d(%rip), %rdx
    000005b3: 	movq	%r13, %rsi
    000005b6: 	movq	%rbp, %rdi
    000005b9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1465
    000005be: 	movdqu	0x10(%rbx), %xmm5
    000005c3: 	xorl	%r9d, %r9d
    000005c6: 	movq	%rbp, %r8
    000005c9: 	movdqu	(%r12), %xmm2
    000005cf: 	movdqu	(%rbx), %xmm4
    000005d3: 	movq	%r14, %rdx
    000005d6: 	movq	%r15, %rsi
    000005d9: 	movdqu	0x10(%r12), %xmm3
    000005e0: 	movq	0x8(%rsp), %rdi
    000005e5: 	movaps	%xmm5, 0x20(%rsp)
    000005ea: 	leaq	_Z13binarysearch4ISt15_Deque_iteratorIfRfPfEfEbT_S4_T0_(%rip), %rcx
    000005f1: 	movaps	%xmm2, 0x30(%rsp)
    000005f6: 	movaps	%xmm3, 0x40(%rsp)
    000005fb: 	movaps	%xmm4, 0x10(%rsp)
    00000600: 	callq	_Z13TestOneSearchISt15_Deque_iteratorIfRfPfEPFbS3_S3_fEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 1536
    00000605: 	movq	0x50(%rsp), %rdi
    0000060a: 	cmpq	(%rsp), %rdi
    0000060e: 	je	.Ltmp5239 # Offset: 1550
    00000610: 	movq	0x60(%rsp), %rax
    00000615: 	leaq	0x1(%rax), %rsi
    00000619: 	callq	_ZdlPvm@PLT # Offset: 1561
.Ltmp5239:
    0000061e: 	leaq	DATAat0x3426d(%rip), %rdx
    00000625: 	movq	%r13, %rsi
    00000628: 	movq	%rbp, %rdi
    0000062b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1579
    00000630: 	movdqu	(%rbx), %xmm7
    00000634: 	xorl	%r9d, %r9d
    00000637: 	movq	%rbp, %r8
    0000063a: 	movdqu	0x10(%r12), %xmm0
    00000641: 	movdqu	(%r12), %xmm6
    00000647: 	movq	%r14, %rdx
    0000064a: 	movq	%r15, %rsi
    0000064d: 	movq	0x8(%rsp), %rdi
    00000652: 	leaq	_Z18binarysearch_recurISt15_Deque_iteratorIfRfPfEfEbT_S4_T0_(%rip), %rcx
    00000659: 	movaps	%xmm7, 0x10(%rsp)
    0000065e: 	movaps	%xmm0, 0x40(%rsp)
    00000663: 	movdqu	0x10(%rbx), %xmm0
    00000668: 	movaps	%xmm6, 0x30(%rsp)
    0000066d: 	movaps	%xmm0, 0x20(%rsp)
    00000672: 	callq	_Z13TestOneSearchISt15_Deque_iteratorIfRfPfEPFbS3_S3_fEEvT_S6_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 1650
    00000677: 	movq	0x50(%rsp), %rdi
    0000067c: 	cmpq	(%rsp), %rdi
    00000680: 	je	.Ltmp5240 # Offset: 1664
    00000682: 	movq	0x60(%rsp), %rax
    00000687: 	leaq	0x1(%rax), %rsi
    0000068b: 	callq	_ZdlPvm@PLT # Offset: 1675
.Ltmp5240:
    00000690: 	movq	%rbp, %rdi
    00000693: 	leaq	DATAat0x34286(%rip), %rdx
    0000069a: 	movq	%r13, %rsi
    0000069d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1693
    000006a2: 	movq	%rbp, %rdi
    000006a5: 	callq	_Z9summarizeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1701
    000006aa: 	movq	0x50(%rsp), %rdi
    000006af: 	cmpq	(%rsp), %rdi
    000006b3: 	je	.Ltmp5241 # Offset: 1715
    000006b5: 	movq	0x60(%rsp), %rax
    000006ba: 	leaq	0x1(%rax), %rsi
    000006be: 	callq	_ZdlPvm@PLT # Offset: 1726
.Ltmp5241:
    000006c3: 	movq	0x78(%rsp), %rax
    000006c8: 	subq	%fs:0x28, %rax
    000006d1: 	jne	.Ltmp5242 # Offset: 1745
    000006d3: 	addq	$0x88, %rsp
    000006da: 	popq	%rbx
    000006db: 	popq	%rbp
    000006dc: 	popq	%r12
    000006de: 	popq	%r13
    000006e0: 	popq	%r14
    000006e2: 	popq	%r15
    000006e4: 	retq # Offset: 1764
.Ltmp5242:
    000006e5: 	callq	__stack_chk_fail@PLT # Offset: 1765
    000006ea: 	endbr64
.Ltmp5244:
    000006ee: 	movq	%rax, %rbp
    000006f1: 	jmp	.Ltmp5243 # Offset: 1777
    000006f3: 	endbr64
    000006f7: 	jmp	.Ltmp5244 # Offset: 1783
    000006f9: 	endbr64
    000006fd: 	jmp	.Ltmp5244 # Offset: 1789
    000006ff: 	endbr64
    00000703: 	jmp	.Ltmp5244 # Offset: 1795
    00000705: 	endbr64
    00000709: 	jmp	.Ltmp5244 # Offset: 1801
    0000070b: 	endbr64
    0000070f: 	jmp	.Ltmp5244 # Offset: 1807
    00000711: 	endbr64
    00000715: 	jmp	.Ltmp5244 # Offset: 1813
.Ltmp5243:
    00000717: 	movq	0x50(%rsp), %rdi
    0000071c: 	cmpq	(%rsp), %rdi
    00000720: 	je	.Ltmp5245 # Offset: 1824
.Ltmp5247:
    00000722: 	movq	0x60(%rsp), %rax
    00000727: 	leaq	0x1(%rax), %rsi
    0000072b: 	callq	_ZdlPvm@PLT # Offset: 1835
.Ltmp5245:
    00000730: 	movq	%rbp, %rdi
    00000733: 	callq	_Unwind_Resume@PLT # Offset: 1843
    00000738: 	endbr64
    0000073c: 	jmp	.Ltmp5244 # Offset: 1852
    0000073e: 	endbr64
    00000742: 	jmp	.Ltmp5244 # Offset: 1858
    00000744: 	endbr64
    00000748: 	jmp	.Ltmp5244 # Offset: 1864
    0000074a: 	endbr64
    0000074e: 	jmp	.Ltmp5244 # Offset: 1870
    00000750: 	endbr64
    00000754: 	jmp	.Ltmp5244 # Offset: 1876
    00000756: 	endbr64
    0000075a: 	movq	%rax, %rbp
    0000075d: 	jmp	.Ltmp5246 # Offset: 1885
    0000075f: 	endbr64
    00000763: 	jmp	.Ltmp5244 # Offset: 1891
    00000765: 	endbr64
    00000769: 	jmp	.Ltmp5244 # Offset: 1897
.Ltmp5246:
    0000076b: 	movq	0x50(%rsp), %rdi
    00000770: 	leaq	0x60(%rsp), %rax
    00000775: 	cmpq	%rax, %rdi
    00000778: 	jne	.Ltmp5247 # Offset: 1912
    0000077a: 	jmp	.Ltmp5245 # Offset: 1914
DWARF CFI Instructions:
    <empty>
End of Function "_Z16TestOneContainerISt15_Deque_iteratorIfRfPfEEvT_S4_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z24binarysearch_recur_innerISt15_Deque_iteratorIfRfPfEflEbT_T0_T1_" after disassembly {
  Number      : 483
  State       : disassembled
  Address     : 0x2e5e0
  Size        : 0x184
  MaxSize     : 0x190
  Offset      : 0x2e5e0
  Section     : .text
  Orc Section : .local.text._Z24binarysearch_recur_innerISt15_Deque_iteratorIfRfPfEflEbT_T0_T1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0482:
    00000000: 	endbr64
    00000004: 	subq	$0x38, %rsp
    00000008: 	movq	%fs:0x28, %rax
    00000011: 	movq	%rax, 0x28(%rsp)
    00000016: 	xorl	%eax, %eax
    00000018: 	testq	%rsi, %rsi
    0000001b: 	jne	.Ltmp5248 # Offset: 27
.Ltmp5254:
    0000001d: 	movq	0x28(%rsp), %rdx
    00000022: 	subq	%fs:0x28, %rdx
    0000002b: 	jne	.Ltmp5249 # Offset: 43
    00000031: 	addq	$0x38, %rsp
    00000035: 	retq # Offset: 53
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp5248:
    00000040: 	movdqu	(%rdi), %xmm2
    00000044: 	movq	%rsi, %r8
    00000047: 	movdqu	0x10(%rdi), %xmm1
    0000004c: 	movq	%rdi, %rdx
    0000004f: 	shrq	$0x3f, %r8
    00000053: 	movhlps	%xmm2, %xmm4
    00000056: 	movq	%xmm2, %rax
    0000005b: 	movhlps	%xmm1, %xmm5
    0000005e: 	addq	%rsi, %r8
    00000061: 	movq	%xmm4, %rcx
    00000066: 	sarq	%r8
    00000069: 	movq	%xmm2, %r10
    0000006e: 	movq	%xmm5, %r9
    00000073: 	subq	%rcx, %rax
    00000076: 	movq	%xmm1, %rdi
    0000007b: 	sarq	$0x2, %rax
    0000007f: 	addq	%r8, %rax
    00000082: 	js	.Ltmp5250 # Offset: 130
    00000084: 	cmpq	$0x7f, %rax
    00000088: 	jg	.Ltmp5251 # Offset: 136
    0000008e: 	leaq	(%r10,%r8,4), %rax
    00000092: 	movss	(%rax), %xmm3
    00000096: 	comiss	%xmm3, %xmm0
    00000099: 	jbe	.Ltmp5252 # Offset: 153
.Ltmp5255:
    0000009f: 	addq	$0x4, %rax
    000000a3: 	cmpq	%rdi, %rax
    000000a6: 	je	.Ltmp5253 # Offset: 166
.Ltmp5257:
    000000ac: 	movq	%rcx, %xmm6
    000000b1: 	movq	%rax, %xmm1
    000000b6: 	movq	%rdi, 0x10(%rdx)
    000000ba: 	addq	$0x1, %r8
    000000be: 	punpcklqdq	%xmm6, %xmm1
    000000c2: 	movq	%rax, (%rdx)
    000000c5: 	movq	%r9, %xmm7
    000000ca: 	subq	%r8, %rsi
    000000cd: 	movq	%rcx, 0x8(%rdx)
    000000d1: 	movq	%r9, 0x18(%rdx)
    000000d5: 	movaps	%xmm1, (%rsp)
    000000d9: 	movq	%rdi, %xmm1
    000000de: 	movq	%rsp, %rdi
    000000e1: 	punpcklqdq	%xmm7, %xmm1
    000000e5: 	movaps	%xmm1, 0x10(%rsp)
    000000ea: 	callq	_Z24binarysearch_recur_innerISt15_Deque_iteratorIfRfPfEflEbT_T0_T1_ # Offset: 234
    000000ef: 	jmp	.Ltmp5254 # Offset: 239
    000000f4: 	nopl	(%rax) # Size: 4
.Ltmp5250:
    000000f8: 	movq	%rax, %r10
    000000fb: 	notq	%r10
    000000fe: 	shrq	$0x7, %r10
    00000102: 	notq	%r10
.Ltmp5256:
    00000105: 	leaq	(%r9,%r10,8), %r9
    00000109: 	shlq	$0x7, %r10
    0000010d: 	movq	(%r9), %rcx
    00000110: 	subq	%r10, %rax
    00000113: 	leaq	(%rcx,%rax,4), %rax
    00000117: 	leaq	0x200(%rcx), %rdi
    0000011e: 	movss	(%rax), %xmm3
    00000122: 	comiss	%xmm3, %xmm0
    00000125: 	ja	.Ltmp5255 # Offset: 293
.Ltmp5252:
    0000012b: 	comiss	%xmm0, %xmm3
    0000012e: 	movl	$0x1, %eax
    00000133: 	jbe	.Ltmp5254 # Offset: 307
    00000139: 	movq	%rsp, %rdi
    0000013c: 	movq	%r8, %rsi
    0000013f: 	movaps	%xmm2, (%rsp)
    00000143: 	movaps	%xmm1, 0x10(%rsp)
    00000148: 	callq	_Z24binarysearch_recur_innerISt15_Deque_iteratorIfRfPfEflEbT_T0_T1_ # Offset: 328
    0000014d: 	jmp	.Ltmp5254 # Offset: 333
    00000152: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5251:
    00000158: 	movq	%rax, %r10
    0000015b: 	sarq	$0x7, %r10
    0000015f: 	jmp	.Ltmp5256 # Offset: 351
    00000161: 	nopl	(%rax) # Size: 7
.Ltmp5253:
    00000168: 	movq	0x8(%r9), %rax
    0000016c: 	addq	$0x8, %r9
    00000170: 	leaq	0x200(%rax), %rdi
    00000177: 	movq	%rax, %rcx
    0000017a: 	jmp	.Ltmp5257 # Offset: 378
.Ltmp5249:
    0000017f: 	callq	__stack_chk_fail@PLT # Offset: 383
DWARF CFI Instructions:
    <empty>
End of Function "_Z24binarysearch_recur_innerISt15_Deque_iteratorIfRfPfEflEbT_T0_T1_"

Binary Function "_Z18binarysearch_recurISt15_Deque_iteratorIfRfPfEfEbT_S4_T0_" after disassembly {
  Number      : 484
  State       : disassembled
  Address     : 0x2e770
  Size        : 0x1ac
  MaxSize     : 0x1b0
  Offset      : 0x2e770
  Section     : .text
  Orc Section : .local.text._Z18binarysearch_recurISt15_Deque_iteratorIfRfPfEfEbT_S4_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0483:
    00000000: 	endbr64
    00000004: 	subq	$0x38, %rsp
    00000008: 	movq	%rdi, %rcx
    0000000b: 	movq	(%rdi), %r9
    0000000e: 	movq	0x10(%rdi), %rdi
    00000012: 	movq	%fs:0x28, %rax
    0000001b: 	movq	%rax, 0x28(%rsp)
    00000020: 	movq	0x18(%rsi), %rax
    00000024: 	movq	0x18(%rcx), %r8
    00000028: 	movq	%rdi, %xmm1
    0000002d: 	movq	%r8, %xmm4
    00000032: 	punpcklqdq	%xmm4, %xmm1
    00000036: 	movq	%rax, %rdx
    00000039: 	subq	%r8, %rdx
    0000003c: 	sarq	$0x3, %rdx
    00000040: 	cmpq	$0x1, %rax
    00000044: 	movq	(%rsi), %rax
    00000047: 	adcq	$-0x1, %rdx
    0000004b: 	subq	0x8(%rsi), %rax
    0000004f: 	movq	%rdi, %rsi
    00000052: 	sarq	$0x2, %rax
    00000056: 	shlq	$0x7, %rdx
    0000005a: 	subq	%r9, %rsi
    0000005d: 	addq	%rax, %rdx
    00000060: 	sarq	$0x2, %rsi
    00000064: 	xorl	%eax, %eax
    00000066: 	addq	%rsi, %rdx
    00000069: 	jne	.Ltmp5258 # Offset: 105
.Ltmp5264:
    0000006b: 	movq	0x28(%rsp), %rdx
    00000070: 	subq	%fs:0x28, %rdx
    00000079: 	jne	.Ltmp5259 # Offset: 121
    0000007f: 	addq	$0x38, %rsp
    00000083: 	retq # Offset: 131
    00000084: 	nopl	(%rax) # Size: 4
.Ltmp5258:
    00000088: 	movq	0x8(%rcx), %rcx
    0000008c: 	movq	%rdx, %rsi
    0000008f: 	movq	%r9, %rax
    00000092: 	movq	%r9, %xmm3
    00000097: 	shrq	$0x3f, %rsi
    0000009b: 	addq	%rdx, %rsi
    0000009e: 	subq	%rcx, %rax
    000000a1: 	movq	%rcx, %xmm5
    000000a6: 	sarq	%rsi
    000000a9: 	sarq	$0x2, %rax
    000000ad: 	punpcklqdq	%xmm5, %xmm3
    000000b1: 	addq	%rsi, %rax
    000000b4: 	js	.Ltmp5260 # Offset: 180
    000000b6: 	cmpq	$0x7f, %rax
    000000ba: 	jg	.Ltmp5261 # Offset: 186
    000000c0: 	leaq	(%r9,%rsi,4), %rax
    000000c4: 	movss	(%rax), %xmm2
    000000c8: 	comiss	%xmm2, %xmm0
    000000cb: 	jbe	.Ltmp5262 # Offset: 203
.Ltmp5265:
    000000d1: 	addq	$0x4, %rax
    000000d5: 	cmpq	%rdi, %rax
    000000d8: 	je	.Ltmp5263 # Offset: 216
.Ltmp5267:
    000000de: 	movq	%rax, %xmm1
    000000e3: 	movq	%rcx, %xmm6
    000000e8: 	leaq	0x1(%rsi), %rax
    000000ec: 	punpcklqdq	%xmm6, %xmm1
    000000f0: 	movq	%r8, %xmm7
    000000f5: 	subq	%rax, %rdx
    000000f8: 	movaps	%xmm1, (%rsp)
    000000fc: 	movq	%rdi, %xmm1
    00000101: 	movq	%rdx, %rsi
    00000104: 	movq	%rsp, %rdi
    00000107: 	punpcklqdq	%xmm7, %xmm1
    0000010b: 	movaps	%xmm1, 0x10(%rsp)
    00000110: 	callq	_Z24binarysearch_recur_innerISt15_Deque_iteratorIfRfPfEflEbT_T0_T1_ # Offset: 272
    00000115: 	jmp	.Ltmp5264 # Offset: 277
    0000011a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5260:
    00000120: 	movq	%rax, %r9
    00000123: 	notq	%r9
    00000126: 	shrq	$0x7, %r9
    0000012a: 	notq	%r9
.Ltmp5266:
    0000012d: 	leaq	(%r8,%r9,8), %r8
    00000131: 	shlq	$0x7, %r9
    00000135: 	movq	(%r8), %rcx
    00000138: 	subq	%r9, %rax
    0000013b: 	leaq	(%rcx,%rax,4), %rax
    0000013f: 	leaq	0x200(%rcx), %rdi
    00000146: 	movss	(%rax), %xmm2
    0000014a: 	comiss	%xmm2, %xmm0
    0000014d: 	ja	.Ltmp5265 # Offset: 333
.Ltmp5262:
    00000153: 	comiss	%xmm0, %xmm2
    00000156: 	movl	$0x1, %eax
    0000015b: 	jbe	.Ltmp5264 # Offset: 347
    00000161: 	movq	%rsp, %rdi
    00000164: 	movaps	%xmm3, (%rsp)
    00000168: 	movaps	%xmm1, 0x10(%rsp)
    0000016d: 	callq	_Z24binarysearch_recur_innerISt15_Deque_iteratorIfRfPfEflEbT_T0_T1_ # Offset: 365
    00000172: 	jmp	.Ltmp5264 # Offset: 370
    00000177: 	nopw	(%rax,%rax) # Size: 9
.Ltmp5261:
    00000180: 	movq	%rax, %r9
    00000183: 	sarq	$0x7, %r9
    00000187: 	jmp	.Ltmp5266 # Offset: 391
    00000189: 	nopl	(%rax) # Size: 7
.Ltmp5263:
    00000190: 	movq	0x8(%r8), %rax
    00000194: 	addq	$0x8, %r8
    00000198: 	leaq	0x200(%rax), %rdi
    0000019f: 	movq	%rax, %rcx
    000001a2: 	jmp	.Ltmp5267 # Offset: 418
.Ltmp5259:
    000001a7: 	callq	__stack_chk_fail@PLT # Offset: 423
DWARF CFI Instructions:
    <empty>
End of Function "_Z18binarysearch_recurISt15_Deque_iteratorIfRfPfEfEbT_S4_T0_"

Binary Function "_Z15TestSearchArrayISt14_List_iteratorIfEPFS1_S1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 485
  State       : disassembled
  Address     : 0x2e920
  Size        : 0x25f
  MaxSize     : 0x260
  Offset      : 0x2e920
  Section     : .text
  Orc Section : .local.text._Z15TestSearchArrayISt14_List_iteratorIfEPFS1_S1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0484:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rcx, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	movl	$0x1000, %edi
    00000017: 	pushq	%rbp
    00000018: 	pushq	%rbx
    00000019: 	movq	%rsi, %rbx
    0000001c: 	subq	$0x28, %rsp
    00000020: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000027: 	movq	%r8, 0x18(%rsp)
    0000002c: 	movq	%rdx, 0x8(%rsp)
    00000031: 	movb	%r9b, 0x17(%rsp)
    00000036: 	callq	_Znwm@PLT # Offset: 54
    0000003b: 	movq	%rax, %r13
    0000003e: 	movl	$0x0, (%rax)
    00000044: 	addq	$0x4, %rax
    00000048: 	leaq	0x1000(%r13), %r8
    0000004f: 	cmpq	%r8, %rax
    00000052: 	je	.Ltmp5268 # Offset: 82
    00000054: 	leaq	0xc(%r13), %rdi
    00000058: 	movq	$0x0, 0x4(%r13)
    00000060: 	movq	$0x0, 0xff8(%r13)
    0000006b: 	andq	$-0x8, %rdi
    0000006f: 	subq	%rdi, %rax
    00000072: 	movq	%rax, %rcx
    00000075: 	xorl	%eax, %eax
    00000077: 	addl	$0xffc, %ecx
    0000007d: 	shrl	$0x3, %ecx
    00000080: 	rep		stosq	%rax, %es:(%rdi)
.Ltmp5268:
    00000083: 	movabsq	$0x5851f42d4c957f2d, %r9
    0000008d: 	movq	%r13, %rsi
    00000090: 	movabsq	$0x14057b7ef767814f, %rdi
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5271:
    000000a0: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000000a7: 	imulq	%r9, %rax
    000000ab: 	addq	%rdi, %rax
    000000ae: 	movq	%rax, %rdx
    000000b1: 	movq	%rax, %rcx
    000000b4: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000000bb: 	shlq	$0x17, %rcx
    000000bf: 	shrq	$0x14, %rdx
    000000c3: 	xorq	%rcx, %rdx
    000000c6: 	xorq	%rdx, %rax
    000000c9: 	xorl	%edx, %edx
    000000cb: 	divq	0x8(%rsp)
    000000d0: 	movq	%r12, %rax
    000000d3: 	leaq	-0x1(%rdx), %rcx
    000000d7: 	testq	%rdx, %rdx
    000000da: 	jle	.Ltmp5269 # Offset: 218
.Ltmp5270:
    000000e0: 	movq	(%rax), %rax
    000000e3: 	subq	$0x1, %rcx
    000000e7: 	jae	.Ltmp5270 # Offset: 231
.Ltmp5278:
    000000e9: 	movss	0x10(%rax), %xmm0
    000000ee: 	addq	$0x4, %rsi
    000000f2: 	movss	%xmm0, -0x4(%rsi)
    000000f7: 	cmpq	%r8, %rsi
    000000fa: 	jne	.Ltmp5271 # Offset: 250
    000000fc: 	callq	clock@PLT # Offset: 252
    00000101: 	xorl	%r15d, %r15d
    00000104: 	xorl	%ebp, %ebp
    00000106: 	movq	%rax, start_time(%rip)
.Ltmp5275:
    0000010d: 	leaq	0xc8(%rbp), %rax
    00000114: 	cmpb	$0x0, 0x17(%rsp)
    00000119: 	movq	%rax, (%rsp)
    0000011d: 	jne	.Ltmp5272 # Offset: 285
    00000123: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5273:
    00000128: 	movq	%rbp, %rax
    0000012b: 	movq	%rbx, %rsi
    0000012e: 	addq	$0x1, %rbp
    00000132: 	movq	%r12, %rdi
    00000135: 	andl	$0x3ff, %eax
    0000013a: 	movss	(%r13,%rax,4), %xmm0
    00000141: 	callq	*%r14 # Offset: 321
    00000144: 	cmpq	%rax, %rbx
    00000147: 	movl	$0x1, %eax
    0000014c: 	cmovel	%eax, %r15d
    00000150: 	cmpq	(%rsp), %rbp
    00000154: 	jne	.Ltmp5273 # Offset: 340
.Ltmp5277:
    00000156: 	callq	clock@PLT # Offset: 342
    0000015b: 	movsd	gMinimumTimeTarget(%rip), %xmm1
    00000163: 	pxor	%xmm0, %xmm0
    00000167: 	movq	%rax, end_time(%rip)
    0000016e: 	subq	start_time(%rip), %rax
    00000175: 	cvtsi2sd	%rax, %xmm0
    0000017a: 	divsd	DATAat0x34410(%rip), %xmm0
    00000182: 	comisd	%xmm0, %xmm1
    00000186: 	jbe	.Ltmp5274 # Offset: 390
    00000188: 	cmpq	$0x5f5e0ff, %rbp
    0000018f: 	jbe	.Ltmp5275 # Offset: 399
.Ltmp5274:
    00000195: 	movq	0x18(%rsp), %rdx
    0000019a: 	movq	0x8(%rsp), %rdi
    0000019f: 	movq	%rbp, %rsi
    000001a2: 	callq	_Z13record_resultdmmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 418
    000001a7: 	testb	%r15b, %r15b
    000001aa: 	jne	.Ltmp5276 # Offset: 426
.Ltmp5280:
    000001ac: 	addq	$0x28, %rsp
    000001b0: 	movq	%r13, %rdi
    000001b3: 	movl	$0x1000, %esi
    000001b8: 	popq	%rbx
    000001b9: 	popq	%rbp
    000001ba: 	popq	%r12
    000001bc: 	popq	%r13
    000001be: 	popq	%r14
    000001c0: 	popq	%r15
    000001c2: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 450
    000001c7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp5272:
    000001d0: 	movq	%rbp, %rax
    000001d3: 	movq	%rbx, %rsi
    000001d6: 	addq	$0x1, %rbp
    000001da: 	movq	%r12, %rdi
    000001dd: 	andl	$0x3ff, %eax
    000001e2: 	movss	(%r13,%rax,4), %xmm0
    000001e9: 	callq	*%r14 # Offset: 489
    000001ec: 	cmpq	(%rsp), %rbp
    000001f0: 	jne	.Ltmp5272 # Offset: 496
    000001f2: 	jmp	.Ltmp5277 # Offset: 498
    000001f7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp5269:
    00000200: 	leaq	0x1(%rdx), %rcx
    00000204: 	je	.Ltmp5278 # Offset: 516
    0000020a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5279:
    00000210: 	addq	$0x1, %rcx
    00000214: 	movq	0x8(%rax), %rax
    00000218: 	cmpq	$0x1, %rcx
    0000021c: 	jne	.Ltmp5279 # Offset: 540
    0000021e: 	jmp	.Ltmp5278 # Offset: 542
.Ltmp5276:
    00000223: 	movq	0x18(%rsp), %rax
    00000228: 	leaq	DATAat0x34137(%rip), %rsi
    0000022f: 	movl	$0x1, %edi
    00000234: 	movq	(%rax), %rdx
    00000237: 	xorl	%eax, %eax
    00000239: 	callq	__printf_chk@PLT # Offset: 569
    0000023e: 	jmp	.Ltmp5280 # Offset: 574
    00000243: 	endbr64
    00000247: 	movq	%rax, %rbp
    0000024a: 	movq	%r13, %rdi
    0000024d: 	movl	$0x1000, %esi
    00000252: 	callq	_ZdlPvm@PLT # Offset: 594
    00000257: 	movq	%rbp, %rdi
    0000025a: 	callq	_Unwind_Resume@PLT # Offset: 602
DWARF CFI Instructions:
    <empty>
End of Function "_Z15TestSearchArrayISt14_List_iteratorIfEPFS1_S1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z18quicksort2_forwardISt14_List_iteratorIfEEvT_S2_" after disassembly {
  Number      : 486
  State       : disassembled
  Address     : 0x2eb80
  Size        : 0x134
  MaxSize     : 0x140
  Offset      : 0x2eb80
  Section     : .text
  Orc Section : .local.text._Z18quicksort2_forwardISt14_List_iteratorIfEEvT_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0485:
    00000000: 	endbr64
    00000004: 	cmpq	%rdi, %rsi
    00000007: 	je	.Ltmp5281 # Offset: 7
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rsi, %rbp
    00000016: 	pushq	%rbx
    00000017: 	movq	(%r12), %rbx
    0000001b: 	cmpq	%rbp, %rbx
    0000001e: 	je	.Ltmp5282 # Offset: 30
.Ltmp5290:
    00000024: 	movq	(%rbx), %rdx
    00000027: 	movss	0x10(%rbx), %xmm1
    0000002c: 	movss	0x10(%r12), %xmm0
    00000033: 	cmpq	%rbp, %rdx
    00000036: 	je	.Ltmp5283 # Offset: 54
    0000003c: 	comiss	%xmm1, %xmm0
    0000003f: 	jbe	.Ltmp5284 # Offset: 63
    00000041: 	movss	%xmm1, 0x10(%r12)
    00000048: 	movaps	%xmm0, %xmm1
    0000004b: 	movss	%xmm0, 0x10(%rbx)
.Ltmp5284:
    00000050: 	movss	0x10(%rdx), %xmm0
    00000055: 	comiss	%xmm0, %xmm1
    00000058: 	jbe	.Ltmp5285 # Offset: 88
    0000005a: 	movss	%xmm0, 0x10(%rbx)
    0000005f: 	movss	%xmm1, 0x10(%rdx)
    00000064: 	movss	0x10(%rbx), %xmm1
    00000069: 	movss	0x10(%r12), %xmm0
    00000070: 	comiss	%xmm1, %xmm0
    00000073: 	jbe	.Ltmp5285 # Offset: 115
    00000075: 	movss	%xmm0, 0x10(%rbx)
    0000007a: 	movss	%xmm1, 0x10(%r12)
    00000081: 	movss	0x10(%rbx), %xmm1
.Ltmp5285:
    00000086: 	movq	(%rdx), %rax
    00000089: 	cmpq	%rbp, %rax
    0000008c: 	je	.Ltmp5282 # Offset: 140
    0000008e: 	movl	$0x2, %ecx
    00000093: 	movl	$0x1, %esi
    00000098: 	jmp	.Ltmp5286 # Offset: 152
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5288:
    000000a0: 	movq	%rax, %rdx
    000000a3: 	movq	(%rax), %rax
.Ltmp5286:
    000000a6: 	movss	0x10(%rdx), %xmm0
    000000ab: 	comiss	%xmm0, %xmm1
    000000ae: 	jbe	.Ltmp5287 # Offset: 174
    000000b0: 	movss	0x10(%rbx), %xmm2
    000000b5: 	addq	$0x1, %rsi
    000000b9: 	movss	%xmm2, 0x10(%rdx)
    000000be: 	movss	%xmm0, 0x10(%rbx)
    000000c3: 	movq	(%rbx), %rbx
.Ltmp5287:
    000000c6: 	addq	$0x1, %rcx
    000000ca: 	cmpq	%rbp, %rax
    000000cd: 	jne	.Ltmp5288 # Offset: 205
    000000cf: 	subq	%rsi, %rcx
    000000d2: 	cmpq	%rcx, %rsi
    000000d5: 	jbe	.Ltmp5289 # Offset: 213
    000000d7: 	movq	%rbp, %rsi
    000000da: 	movq	%rbx, %rdi
    000000dd: 	callq	_Z18quicksort2_forwardISt14_List_iteratorIfEEvT_S2_ # Offset: 221
    000000e2: 	cmpq	%r12, %rbx
    000000e5: 	je	.Ltmp5282 # Offset: 229
    000000e7: 	movq	%rbx, %rbp
    000000ea: 	movq	%r12, %rbx
.Ltmp5291:
    000000ed: 	movq	%rbx, %r12
    000000f0: 	movq	(%r12), %rbx
    000000f4: 	cmpq	%rbp, %rbx
    000000f7: 	jne	.Ltmp5290 # Offset: 247
.Ltmp5282:
    000000fd: 	popq	%rbx
    000000fe: 	popq	%rbp
    000000ff: 	popq	%r12
    00000101: 	retq # Offset: 257
    00000102: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5289:
    00000108: 	movq	%rbx, %rsi
    0000010b: 	movq	%r12, %rdi
    0000010e: 	callq	_Z18quicksort2_forwardISt14_List_iteratorIfEEvT_S2_ # Offset: 270
    00000113: 	cmpq	%rbp, %rbx
    00000116: 	jne	.Ltmp5291 # Offset: 278
    00000118: 	popq	%rbx
    00000119: 	popq	%rbp
    0000011a: 	popq	%r12
    0000011c: 	retq # Offset: 284
.Ltmp5283:
    0000011d: 	comiss	%xmm1, %xmm0
    00000120: 	jbe	.Ltmp5282 # Offset: 288
    00000122: 	movss	%xmm0, 0x10(%rbx)
    00000127: 	movss	%xmm1, 0x10(%r12)
    0000012e: 	popq	%rbx
    0000012f: 	popq	%rbp
    00000130: 	popq	%r12
    00000132: 	retq # Offset: 306
.Ltmp5281:
    00000133: 	retq # Offset: 307
DWARF CFI Instructions:
    <empty>
End of Function "_Z18quicksort2_forwardISt14_List_iteratorIfEEvT_S2_"

Binary Function "_Z13TestOneSearchISt14_List_iteratorIfEPFS1_S1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 487
  State       : disassembled
  Address     : 0x2ecc0
  Size        : 0x28a
  MaxSize     : 0x290
  Offset      : 0x2ecc0
  Section     : .text
  Orc Section : .local.text._Z13TestOneSearchISt14_List_iteratorIfEPFS1_S1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0486:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdi, %r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdx, %r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rsi, %rbp
    00000016: 	pushq	%rbx
    00000017: 	movq	%rdi, %rbx
    0000001a: 	subq	$0x58, %rsp
    0000001e: 	movss	DATAat0x34560(%rip), %xmm0
    00000026: 	movq	%rcx, 0x8(%rsp)
    0000002b: 	movq	%r8, 0x10(%rsp)
    00000030: 	movq	%fs:0x28, %rax
    00000039: 	movq	%rax, 0x48(%rsp)
    0000003e: 	xorl	%eax, %eax
    00000040: 	movq	%rdi, %rax
    00000043: 	cmpq	%rsi, %rdi
    00000046: 	je	.Ltmp5292 # Offset: 70
    00000048: 	nopl	(%rax,%rax) # Size: 8
.Ltmp5293:
    00000050: 	movq	%rax, %rdx
    00000053: 	movq	(%rax), %rax
    00000056: 	movss	%xmm0, 0x10(%rdx)
    0000005b: 	cmpq	%rbp, %rax
    0000005e: 	jne	.Ltmp5293 # Offset: 94
.Ltmp5292:
    00000060: 	movq	0x10(%rsp), %rsi
    00000065: 	leaq	0x20(%rsp), %r15
    0000006a: 	leaq	DATAat0x34160(%rip), %rdx
    00000071: 	movzbl	%r9b, %r14d
    00000075: 	movq	%r15, %rdi
    00000078: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 120
    0000007d: 	movq	0x8(%rsp), %rcx
    00000082: 	movl	%r14d, %r9d
    00000085: 	movq	%r15, %r8
    00000088: 	movq	%r12, %rdx
    0000008b: 	movq	%rbp, %rsi
    0000008e: 	movq	%r13, %rdi
    00000091: 	callq	_Z15TestSearchArrayISt14_List_iteratorIfEPFS1_S1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 145
    00000096: 	movq	0x20(%rsp), %rdi
    0000009b: 	leaq	0x30(%rsp), %rax
    000000a0: 	movq	%rax, 0x18(%rsp)
    000000a5: 	cmpq	%rax, %rdi
    000000a8: 	je	.Ltmp5294 # Offset: 168
    000000aa: 	movq	0x30(%rsp), %rax
    000000af: 	leaq	0x1(%rax), %rsi
    000000b3: 	callq	_ZdlPvm@PLT # Offset: 179
.Ltmp5294:
    000000b8: 	cmpq	$0x9, %r12
    000000bc: 	jbe	.Ltmp5295 # Offset: 188
    000000c2: 	movabsq	$-0x3333333333333333, %rdx
    000000cc: 	movq	%r12, %rax
    000000cf: 	mulq	%rdx
    000000d2: 	shrq	$0x3, %rdx
.Ltmp5306:
    000000d6: 	movss	DATAat0x34570(%rip), %xmm1
    000000de: 	movq	%r13, %rsi
    000000e1: 	xorl	%ecx, %ecx
    000000e3: 	pxor	%xmm0, %xmm0
    000000e7: 	cmpq	$0x0, %r12
    000000eb: 	jbe	.Ltmp5296 # Offset: 235
    000000ed: 	nopl	(%rax) # Size: 3
.Ltmp5299:
    000000f0: 	xorl	%eax, %eax
    000000f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5298:
    000000f8: 	movq	%rsi, %rdi
    000000fb: 	addq	$0x1, %rax
    000000ff: 	movq	(%rsi), %rsi
    00000102: 	addq	$0x1, %rcx
    00000106: 	movss	%xmm0, 0x10(%rdi)
    0000010b: 	cmpq	%rdx, %rax
    0000010e: 	jae	.Ltmp5297 # Offset: 270
    00000110: 	cmpq	%rcx, %r12
    00000113: 	ja	.Ltmp5298 # Offset: 275
.Ltmp5297:
    00000115: 	addss	%xmm1, %xmm0
    00000119: 	cmpq	%rcx, %r12
    0000011c: 	ja	.Ltmp5299 # Offset: 284
.Ltmp5296:
    0000011e: 	movq	0x10(%rsp), %rsi
    00000123: 	leaq	DATAat0x3416e(%rip), %rdx
    0000012a: 	movq	%r15, %rdi
    0000012d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 301
    00000132: 	movq	0x8(%rsp), %rcx
    00000137: 	movl	%r14d, %r9d
    0000013a: 	movq	%r15, %r8
    0000013d: 	movq	%r12, %rdx
    00000140: 	movq	%rbp, %rsi
    00000143: 	movq	%r13, %rdi
    00000146: 	callq	_Z15TestSearchArrayISt14_List_iteratorIfEPFS1_S1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 326
    0000014b: 	movq	0x20(%rsp), %rdi
    00000150: 	cmpq	0x18(%rsp), %rdi
    00000155: 	je	.Ltmp5300 # Offset: 341
    00000157: 	movq	0x30(%rsp), %rax
    0000015c: 	leaq	0x1(%rax), %rsi
    00000160: 	callq	_ZdlPvm@PLT # Offset: 352
.Ltmp5300:
    00000165: 	xorl	%edx, %edx
    00000167: 	cmpq	%rbp, %r13
    0000016a: 	jne	.Ltmp5301 # Offset: 362
    0000016c: 	jmp	.Ltmp5302 # Offset: 364
    0000016e: 	nop # Size: 2
.Ltmp5303:
    00000170: 	pxor	%xmm0, %xmm0
    00000174: 	cvtsi2ss	%rax, %xmm0
    00000179: 	movss	%xmm0, 0x10(%rcx)
    0000017e: 	cmpq	%rbx, %rbp
    00000181: 	je	.Ltmp5302 # Offset: 385
.Ltmp5301:
    00000183: 	movq	%rdx, %rax
    00000186: 	movq	%rbx, %rcx
    00000189: 	addq	$0x1, %rdx
    0000018d: 	movq	(%rbx), %rbx
    00000190: 	testq	%rax, %rax
    00000193: 	jns	.Ltmp5303 # Offset: 403
    00000195: 	movq	%rax, %rsi
    00000198: 	andl	$0x1, %eax
    0000019b: 	pxor	%xmm0, %xmm0
    0000019f: 	shrq	%rsi
    000001a2: 	orq	%rax, %rsi
    000001a5: 	cvtsi2ss	%rsi, %xmm0
    000001aa: 	addss	%xmm0, %xmm0
    000001ae: 	movss	%xmm0, 0x10(%rcx)
    000001b3: 	cmpq	%rbx, %rbp
    000001b6: 	jne	.Ltmp5301 # Offset: 438
.Ltmp5302:
    000001b8: 	movq	%rbp, %rsi
    000001bb: 	movq	%r13, %rdi
    000001be: 	callq	_Z18quicksort2_forwardISt14_List_iteratorIfEEvT_S2_ # Offset: 446
    000001c3: 	movq	0x10(%rsp), %rsi
    000001c8: 	leaq	DATAat0x34184(%rip), %rdx
    000001cf: 	movq	%r15, %rdi
    000001d2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 466
    000001d7: 	movq	0x8(%rsp), %rcx
    000001dc: 	movl	%r14d, %r9d
    000001df: 	movq	%r15, %r8
    000001e2: 	movq	%r12, %rdx
    000001e5: 	movq	%rbp, %rsi
    000001e8: 	movq	%r13, %rdi
    000001eb: 	callq	_Z15TestSearchArrayISt14_List_iteratorIfEPFS1_S1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 491
    000001f0: 	movq	0x20(%rsp), %rdi
    000001f5: 	cmpq	0x18(%rsp), %rdi
    000001fa: 	je	.Ltmp5304 # Offset: 506
    000001fc: 	movq	0x30(%rsp), %rax
    00000201: 	leaq	0x1(%rax), %rsi
    00000205: 	callq	_ZdlPvm@PLT # Offset: 517
.Ltmp5304:
    0000020a: 	movq	0x48(%rsp), %rax
    0000020f: 	subq	%fs:0x28, %rax
    00000218: 	jne	.Ltmp5305 # Offset: 536
    0000021a: 	addq	$0x58, %rsp
    0000021e: 	popq	%rbx
    0000021f: 	popq	%rbp
    00000220: 	popq	%r12
    00000222: 	popq	%r13
    00000224: 	popq	%r14
    00000226: 	popq	%r15
    00000228: 	retq # Offset: 552
.Ltmp5295:
    00000229: 	testq	%r12, %r12
    0000022c: 	je	.Ltmp5296 # Offset: 556
    00000232: 	movl	$0x1, %edx
    00000237: 	jmp	.Ltmp5306 # Offset: 567
.Ltmp5305:
    0000023c: 	callq	__stack_chk_fail@PLT # Offset: 572
    00000241: 	endbr64
.Ltmp5308:
    00000245: 	movq	%rax, %rbp
    00000248: 	jmp	.Ltmp5307 # Offset: 584
    0000024a: 	endbr64
    0000024e: 	jmp	.Ltmp5308 # Offset: 590
    00000250: 	endbr64
    00000254: 	movq	%rax, %rbp
    00000257: 	movq	0x20(%rsp), %rdi
    0000025c: 	leaq	0x30(%rsp), %rax
    00000261: 	cmpq	%rax, %rdi
    00000264: 	je	.Ltmp5309 # Offset: 612
.Ltmp5310:
    00000266: 	movq	0x30(%rsp), %rax
    0000026b: 	leaq	0x1(%rax), %rsi
    0000026f: 	callq	_ZdlPvm@PLT # Offset: 623
.Ltmp5309:
    00000274: 	movq	%rbp, %rdi
    00000277: 	callq	_Unwind_Resume@PLT # Offset: 631
.Ltmp5307:
    0000027c: 	movq	0x20(%rsp), %rdi
    00000281: 	cmpq	0x18(%rsp), %rdi
    00000286: 	jne	.Ltmp5310 # Offset: 646
    00000288: 	jmp	.Ltmp5309 # Offset: 648
DWARF CFI Instructions:
    <empty>
End of Function "_Z13TestOneSearchISt14_List_iteratorIfEPFS1_S1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z23lower_bound_recur_innerISt14_List_iteratorIfEflET_S2_T0_T1_" after disassembly {
  Number      : 488
  State       : disassembled
  Address     : 0x2ef50
  Size        : 0x78
  MaxSize     : 0x80
  Offset      : 0x2ef50
  Section     : .text
  Orc Section : .local.text._Z23lower_bound_recur_innerISt14_List_iteratorIfEflET_S2_T0_T1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0487:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
.Ltmp5317:
    00000007: 	testq	%rsi, %rsi
    0000000a: 	je	.Ltmp5311 # Offset: 10
.Ltmp5316:
    0000000c: 	movq	%rsi, %r8
    0000000f: 	shrq	$0x3f, %r8
    00000013: 	addq	%rsi, %r8
    00000016: 	sarq	%r8
    00000019: 	cmpq	$0x1, %rsi
    0000001d: 	jle	.Ltmp5312 # Offset: 29
    0000001f: 	leaq	-0x1(%r8), %rcx
    00000023: 	movq	%rax, %rdx
    00000026: 	testq	%r8, %r8
    00000029: 	je	.Ltmp5313 # Offset: 41
    0000002b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5314:
    00000030: 	movq	(%rdx), %rdx
    00000033: 	subq	$0x1, %rcx
    00000037: 	jae	.Ltmp5314 # Offset: 55
.Ltmp5313:
    00000039: 	comiss	0x10(%rdx), %xmm0
    0000003d: 	jbe	.Ltmp5315 # Offset: 61
    0000003f: 	addq	$0x1, %r8
    00000043: 	movq	(%rdx), %rax
    00000046: 	subq	%r8, %rsi
    00000049: 	testq	%rsi, %rsi
    0000004c: 	jne	.Ltmp5316 # Offset: 76
.Ltmp5311:
    0000004e: 	retq # Offset: 78
    0000004f: 	nop # Size: 1
.Ltmp5315:
    00000050: 	movq	%r8, %rsi
    00000053: 	jmp	.Ltmp5317 # Offset: 83
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp5312:
    00000058: 	leaq	0x1(%r8), %rcx
    0000005c: 	movq	%rax, %rdx
    0000005f: 	testq	%r8, %r8
    00000062: 	je	.Ltmp5313 # Offset: 98
    00000064: 	nopl	(%rax) # Size: 4
.Ltmp5318:
    00000068: 	addq	$0x1, %rcx
    0000006c: 	movq	0x8(%rdx), %rdx
    00000070: 	cmpq	$0x1, %rcx
    00000074: 	jne	.Ltmp5318 # Offset: 116
    00000076: 	jmp	.Ltmp5313 # Offset: 118
DWARF CFI Instructions:
    <empty>
End of Function "_Z23lower_bound_recur_innerISt14_List_iteratorIfEflET_S2_T0_T1_"

Binary Function "_Z17lower_bound_recurISt14_List_iteratorIfEfET_S2_S2_T0_" after disassembly {
  Number      : 489
  State       : disassembled
  Address     : 0x2efd0
  Size        : 0x293
  MaxSize     : 0x2a0
  Offset      : 0x2efd0
  Section     : .text
  Orc Section : .local.text._Z17lower_bound_recurISt14_List_iteratorIfEfET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0488:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	cmpq	%rdi, %rsi
    0000000a: 	je	.Ltmp5319 # Offset: 10
    00000010: 	movq	%rdi, %rdx
    00000013: 	xorl	%eax, %eax
    00000015: 	nopl	(%rax) # Size: 3
.Ltmp5320:
    00000018: 	movq	(%rdx), %rdx
    0000001b: 	movq	%rax, %rcx
    0000001e: 	addq	$0x1, %rax
    00000022: 	cmpq	%rdx, %rsi
    00000025: 	jne	.Ltmp5320 # Offset: 37
    00000027: 	movq	%rax, %rsi
    0000002a: 	sarq	%rsi
    0000002d: 	cmpq	$0x1, %rax
    00000031: 	je	.Ltmp5321 # Offset: 49
    00000037: 	subq	$0x8, %rsp
    0000003b: 	leaq	-0x1(%rsi), %rdx
    0000003f: 	testq	%rsi, %rsi
    00000042: 	je	.Ltmp5322 # Offset: 66
    00000048: 	movq	%rdi, %r8
    0000004b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5323:
    00000050: 	movq	(%r8), %r8
    00000053: 	subq	$0x1, %rdx
    00000057: 	jae	.Ltmp5323 # Offset: 87
    00000059: 	comiss	0x10(%r8), %xmm0
    0000005e: 	jbe	.Ltmp5324 # Offset: 94
    00000064: 	movq	(%r8), %r9
    00000067: 	subq	%rsi, %rcx
    0000006a: 	je	.Ltmp5325 # Offset: 106
.Ltmp5343:
    00000070: 	movq	%rcx, %rsi
    00000073: 	shrq	$0x3f, %rsi
    00000077: 	addq	%rcx, %rsi
    0000007a: 	sarq	%rsi
    0000007d: 	cmpq	$0x1, %rcx
    00000081: 	jle	.Ltmp5326 # Offset: 129
    00000087: 	leaq	-0x1(%rsi), %rdx
    0000008b: 	testq	%rsi, %rsi
    0000008e: 	je	.Ltmp5327 # Offset: 142
    00000094: 	movq	%r9, %rax
    00000097: 	nopw	(%rax,%rax) # Size: 9
.Ltmp5328:
    000000a0: 	movq	(%rax), %rax
    000000a3: 	subq	$0x1, %rdx
    000000a7: 	jae	.Ltmp5328 # Offset: 167
    000000a9: 	comiss	0x10(%rax), %xmm0
    000000ad: 	leaq	0x1(%rsi), %rdi
    000000b1: 	jbe	.Ltmp5329 # Offset: 177
.Ltmp5341:
    000000b7: 	movq	(%rax), %r9
    000000ba: 	movq	%r9, %r8
    000000bd: 	subq	%rdi, %rcx
    000000c0: 	je	.Ltmp5325 # Offset: 192
    000000c6: 	movq	%rcx, %rsi
    000000c9: 	shrq	$0x3f, %rsi
    000000cd: 	addq	%rcx, %rsi
    000000d0: 	sarq	%rsi
    000000d3: 	cmpq	$0x1, %rcx
    000000d7: 	jle	.Ltmp5330 # Offset: 215
    000000dd: 	leaq	-0x1(%rsi), %rax
    000000e1: 	testq	%rsi, %rsi
    000000e4: 	je	.Ltmp5331 # Offset: 228
    000000e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp5332:
    000000f0: 	movq	(%r9), %r9
    000000f3: 	subq	$0x1, %rax
    000000f7: 	jae	.Ltmp5332 # Offset: 247
.Ltmp5331:
    000000f9: 	comiss	0x10(%r9), %xmm0
    000000fe: 	jbe	.Ltmp5333 # Offset: 254
    00000104: 	movq	(%r9), %r8
    00000107: 	addq	$0x1, %rsi
    0000010b: 	subq	%rsi, %rcx
    0000010e: 	movq	%rcx, %rsi
    00000111: 	movq	%r8, %rdi
    00000114: 	callq	_Z23lower_bound_recur_innerISt14_List_iteratorIfEflET_S2_T0_T1_ # Offset: 276
    00000119: 	movq	%rax, %r9
    0000011c: 	jmp	.Ltmp5325 # Offset: 284
    0000011e: 	nop # Size: 2
.Ltmp5321:
    00000120: 	comiss	0x10(%rdi), %xmm0
    00000124: 	ja	.Ltmp5334 # Offset: 292
.Ltmp5319:
    00000126: 	movq	%r9, %rax
    00000129: 	retq # Offset: 297
    0000012a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5324:
    00000130: 	movq	%rax, %r8
    00000133: 	sarq	$0x2, %r8
    00000137: 	cmpq	$0x3, %rax
    0000013b: 	jle	.Ltmp5335 # Offset: 315
    0000013d: 	leaq	-0x1(%r8), %rax
    00000141: 	testq	%r8, %r8
    00000144: 	je	.Ltmp5336 # Offset: 324
    00000146: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp5337:
    00000150: 	movq	(%r9), %r9
    00000153: 	subq	$0x1, %rax
    00000157: 	jae	.Ltmp5337 # Offset: 343
.Ltmp5336:
    00000159: 	comiss	0x10(%r9), %xmm0
    0000015e: 	jbe	.Ltmp5338 # Offset: 350
    00000160: 	movq	(%r9), %rdi
    00000163: 	addq	$0x1, %r8
    00000167: 	subq	%r8, %rsi
    0000016a: 	callq	_Z23lower_bound_recur_innerISt14_List_iteratorIfEflET_S2_T0_T1_ # Offset: 362
    0000016f: 	movq	%rax, %r9
.Ltmp5325:
    00000172: 	movq	%r9, %rax
    00000175: 	addq	$0x8, %rsp
    00000179: 	retq # Offset: 377
    0000017a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5334:
    00000180: 	movq	(%rdi), %r9
    00000183: 	jmp	.Ltmp5319 # Offset: 387
.Ltmp5338:
    00000185: 	movq	%r8, %rsi
    00000188: 	callq	_Z23lower_bound_recur_innerISt14_List_iteratorIfEflET_S2_T0_T1_ # Offset: 392
    0000018d: 	movq	%rax, %r9
    00000190: 	jmp	.Ltmp5325 # Offset: 400
.Ltmp5335:
    00000192: 	testq	%r8, %r8
    00000195: 	je	.Ltmp5336 # Offset: 405
.Ltmp5339:
    00000197: 	jmp	.Ltmp5339 # Offset: 407
    00000199: 	nopl	(%rax) # Size: 7
.Ltmp5326:
    000001a0: 	leaq	0x1(%rsi), %rdi
    000001a4: 	movq	%r9, %rax
    000001a7: 	movq	%rdi, %rdx
    000001aa: 	testq	%rsi, %rsi
    000001ad: 	je	.Ltmp5327 # Offset: 429
    000001b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5340:
    000001b8: 	addq	$0x1, %rdx
    000001bc: 	movq	0x8(%rax), %rax
    000001c0: 	cmpq	$0x1, %rdx
    000001c4: 	jne	.Ltmp5340 # Offset: 452
    000001c6: 	comiss	0x10(%rax), %xmm0
    000001ca: 	ja	.Ltmp5341 # Offset: 458
    000001d0: 	testq	%rcx, %rcx
    000001d3: 	leaq	0x3(%rcx), %r8
    000001d7: 	movq	%r9, %rdi
    000001da: 	cmovnsq	%rcx, %r8
    000001de: 	sarq	$0x2, %r8
.Ltmp5344:
    000001e2: 	leaq	0x1(%r8), %rax
    000001e6: 	testq	%r8, %r8
    000001e9: 	je	.Ltmp5336 # Offset: 489
    000001ef: 	nop # Size: 1
.Ltmp5342:
    000001f0: 	addq	$0x1, %rax
    000001f4: 	movq	0x8(%r9), %r9
    000001f8: 	cmpq	$0x1, %rax
    000001fc: 	jne	.Ltmp5342 # Offset: 508
    000001fe: 	jmp	.Ltmp5336 # Offset: 510
.Ltmp5322:
    00000203: 	comiss	0x10(%rdi), %xmm0
    00000207: 	jbe	.Ltmp5325 # Offset: 519
    0000020d: 	movq	(%rdi), %r9
    00000210: 	jmp	.Ltmp5343 # Offset: 528
.Ltmp5329:
    00000215: 	movq	%rcx, %r8
    00000218: 	movq	%r9, %rdi
    0000021b: 	sarq	$0x2, %r8
    0000021f: 	cmpq	$0x3, %rcx
    00000223: 	jle	.Ltmp5344 # Offset: 547
    00000225: 	leaq	-0x1(%r8), %rax
    00000229: 	testq	%r8, %r8
    0000022c: 	je	.Ltmp5336 # Offset: 556
    00000232: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5345:
    00000238: 	movq	(%r9), %r9
    0000023b: 	subq	$0x1, %rax
    0000023f: 	jae	.Ltmp5345 # Offset: 575
    00000241: 	jmp	.Ltmp5336 # Offset: 577
.Ltmp5327:
    00000246: 	comiss	0x10(%r9), %xmm0
    0000024b: 	jbe	.Ltmp5325 # Offset: 587
    00000251: 	movq	%r9, %rax
    00000254: 	movl	$0x1, %edi
    00000259: 	jmp	.Ltmp5341 # Offset: 601
    0000025e: 	nop # Size: 2
.Ltmp5333:
    00000260: 	movq	%r8, %rdi
    00000263: 	callq	_Z23lower_bound_recur_innerISt14_List_iteratorIfEflET_S2_T0_T1_ # Offset: 611
    00000268: 	movq	%rax, %r9
    0000026b: 	jmp	.Ltmp5325 # Offset: 619
.Ltmp5330:
    00000270: 	leaq	0x1(%rsi), %rax
    00000274: 	testq	%rsi, %rsi
    00000277: 	je	.Ltmp5331 # Offset: 631
    0000027d: 	nopl	(%rax) # Size: 3
.Ltmp5346:
    00000280: 	addq	$0x1, %rax
    00000284: 	movq	0x8(%r9), %r9
    00000288: 	cmpq	$0x1, %rax
    0000028c: 	jne	.Ltmp5346 # Offset: 652
    0000028e: 	jmp	.Ltmp5331 # Offset: 654
DWARF CFI Instructions:
    <empty>
End of Function "_Z17lower_bound_recurISt14_List_iteratorIfEfET_S2_S2_T0_"

Binary Function "_Z23upper_bound_recur_innerISt14_List_iteratorIfEflET_S2_T0_T1_" after disassembly {
  Number      : 490
  State       : disassembled
  Address     : 0x2f270
  Size        : 0x80
  MaxSize     : 0x80
  Offset      : 0x2f270
  Section     : .text
  Orc Section : .local.text._Z23upper_bound_recur_innerISt14_List_iteratorIfEflET_S2_T0_T1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0489:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
.Ltmp5353:
    00000007: 	testq	%rsi, %rsi
    0000000a: 	je	.Ltmp5347 # Offset: 10
.Ltmp5352:
    0000000c: 	movq	%rsi, %r8
    0000000f: 	shrq	$0x3f, %r8
    00000013: 	addq	%rsi, %r8
    00000016: 	sarq	%r8
    00000019: 	cmpq	$0x1, %rsi
    0000001d: 	jle	.Ltmp5348 # Offset: 29
    0000001f: 	leaq	-0x1(%r8), %rcx
    00000023: 	movq	%rax, %rdx
    00000026: 	testq	%r8, %r8
    00000029: 	je	.Ltmp5349 # Offset: 41
    0000002b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5350:
    00000030: 	movq	(%rdx), %rdx
    00000033: 	subq	$0x1, %rcx
    00000037: 	jae	.Ltmp5350 # Offset: 55
.Ltmp5349:
    00000039: 	movss	0x10(%rdx), %xmm1
    0000003e: 	comiss	%xmm0, %xmm1
    00000041: 	ja	.Ltmp5351 # Offset: 65
    00000043: 	addq	$0x1, %r8
    00000047: 	movq	(%rdx), %rax
    0000004a: 	subq	%r8, %rsi
    0000004d: 	testq	%rsi, %rsi
    00000050: 	jne	.Ltmp5352 # Offset: 80
.Ltmp5347:
    00000052: 	retq # Offset: 82
    00000053: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5351:
    00000058: 	movq	%r8, %rsi
    0000005b: 	jmp	.Ltmp5353 # Offset: 91
    0000005d: 	nopl	(%rax) # Size: 3
.Ltmp5348:
    00000060: 	leaq	0x1(%r8), %rcx
    00000064: 	movq	%rax, %rdx
    00000067: 	testq	%r8, %r8
    0000006a: 	je	.Ltmp5349 # Offset: 106
    0000006c: 	nopl	(%rax) # Size: 4
.Ltmp5354:
    00000070: 	addq	$0x1, %rcx
    00000074: 	movq	0x8(%rdx), %rdx
    00000078: 	cmpq	$0x1, %rcx
    0000007c: 	jne	.Ltmp5354 # Offset: 124
    0000007e: 	jmp	.Ltmp5349 # Offset: 126
DWARF CFI Instructions:
    <empty>
End of Function "_Z23upper_bound_recur_innerISt14_List_iteratorIfEflET_S2_T0_T1_"

Binary Function "_Z17upper_bound_recurISt14_List_iteratorIfEfET_S2_S2_T0_" after disassembly {
  Number      : 491
  State       : disassembled
  Address     : 0x2f2f0
  Size        : 0x272
  MaxSize     : 0x280
  Offset      : 0x2f2f0
  Section     : .text
  Orc Section : .local.text._Z17upper_bound_recurISt14_List_iteratorIfEfET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0490:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	cmpq	%rdi, %rsi
    0000000a: 	je	.Ltmp5355 # Offset: 10
    00000010: 	movq	%rdi, %rdx
    00000013: 	xorl	%eax, %eax
    00000015: 	nopl	(%rax) # Size: 3
.Ltmp5356:
    00000018: 	movq	(%rdx), %rdx
    0000001b: 	movq	%rax, %rcx
    0000001e: 	addq	$0x1, %rax
    00000022: 	cmpq	%rdx, %rsi
    00000025: 	jne	.Ltmp5356 # Offset: 37
    00000027: 	movq	%rax, %r8
    0000002a: 	sarq	%r8
    0000002d: 	cmpq	$0x1, %rax
    00000031: 	je	.Ltmp5357 # Offset: 49
    00000037: 	subq	$0x8, %rsp
    0000003b: 	leaq	-0x1(%r8), %rdx
    0000003f: 	testq	%r8, %r8
    00000042: 	je	.Ltmp5358 # Offset: 66
    00000048: 	movq	%rdi, %rsi
    0000004b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5359:
    00000050: 	movq	(%rsi), %rsi
    00000053: 	subq	$0x1, %rdx
    00000057: 	jae	.Ltmp5359 # Offset: 87
    00000059: 	movss	0x10(%rsi), %xmm1
    0000005e: 	comiss	%xmm0, %xmm1
    00000061: 	ja	.Ltmp5360 # Offset: 97
    00000063: 	movq	(%rsi), %r9
    00000066: 	movq	%r9, %rdi
    00000069: 	subq	%r8, %rcx
    0000006c: 	je	.Ltmp5361 # Offset: 108
.Ltmp5376:
    0000006e: 	movq	%rcx, %rsi
    00000071: 	shrq	$0x3f, %rsi
    00000075: 	addq	%rcx, %rsi
    00000078: 	sarq	%rsi
    0000007b: 	cmpq	$0x1, %rcx
    0000007f: 	jle	.Ltmp5362 # Offset: 127
    00000085: 	leaq	-0x1(%rsi), %rax
    00000089: 	testq	%rsi, %rsi
    0000008c: 	je	.Ltmp5363 # Offset: 140
    0000008e: 	nop # Size: 2
.Ltmp5364:
    00000090: 	movq	(%r9), %r9
    00000093: 	subq	$0x1, %rax
    00000097: 	jae	.Ltmp5364 # Offset: 151
.Ltmp5363:
    00000099: 	movss	0x10(%r9), %xmm1
    0000009f: 	comiss	%xmm0, %xmm1
    000000a2: 	ja	.Ltmp5365 # Offset: 162
    000000a4: 	addq	$0x1, %rsi
    000000a8: 	movq	(%r9), %rdi
    000000ab: 	subq	%rsi, %rcx
    000000ae: 	movq	%rcx, %rsi
.Ltmp5365:
    000000b1: 	callq	_Z23upper_bound_recur_innerISt14_List_iteratorIfEflET_S2_T0_T1_ # Offset: 177
    000000b6: 	movq	%rax, %r9
.Ltmp5361:
    000000b9: 	movq	%r9, %rax
    000000bc: 	addq	$0x8, %rsp
    000000c0: 	retq # Offset: 192
    000000c1: 	nopl	(%rax) # Size: 7
.Ltmp5357:
    000000c8: 	movss	0x10(%rdi), %xmm1
    000000cd: 	comiss	%xmm0, %xmm1
    000000d0: 	jbe	.Ltmp5366 # Offset: 208
.Ltmp5355:
    000000d6: 	movq	%r9, %rax
    000000d9: 	retq # Offset: 217
    000000da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5360:
    000000e0: 	movq	%rax, %rsi
    000000e3: 	sarq	$0x2, %rsi
    000000e7: 	cmpq	$0x3, %rax
    000000eb: 	jle	.Ltmp5367 # Offset: 235
    000000f1: 	leaq	-0x1(%rsi), %rdx
    000000f5: 	testq	%rsi, %rsi
    000000f8: 	je	.Ltmp5368 # Offset: 248
    000000fe: 	movq	%rdi, %rcx
    00000101: 	nopl	(%rax) # Size: 7
.Ltmp5369:
    00000108: 	movq	(%rcx), %rcx
    0000010b: 	subq	$0x1, %rdx
    0000010f: 	jae	.Ltmp5369 # Offset: 271
    00000111: 	movss	0x10(%rcx), %xmm1
    00000116: 	comiss	%xmm0, %xmm1
    00000119: 	ja	.Ltmp5370 # Offset: 281
.Ltmp5381:
    0000011f: 	movq	(%rcx), %r9
    00000122: 	addq	$0x1, %rsi
    00000126: 	movq	%r9, %rdi
    00000129: 	subq	%rsi, %r8
    0000012c: 	je	.Ltmp5361 # Offset: 300
    0000012e: 	movq	%r8, %rsi
    00000131: 	shrq	$0x3f, %rsi
    00000135: 	addq	%r8, %rsi
    00000138: 	sarq	%rsi
    0000013b: 	cmpq	$0x1, %r8
    0000013f: 	jle	.Ltmp5371 # Offset: 319
    00000145: 	leaq	-0x1(%rsi), %rax
    00000149: 	testq	%rsi, %rsi
    0000014c: 	je	.Ltmp5372 # Offset: 332
    0000014e: 	nop # Size: 2
.Ltmp5373:
    00000150: 	movq	(%r9), %r9
    00000153: 	subq	$0x1, %rax
    00000157: 	jae	.Ltmp5373 # Offset: 343
.Ltmp5372:
    00000159: 	movss	0x10(%r9), %xmm1
    0000015f: 	comiss	%xmm0, %xmm1
    00000162: 	ja	.Ltmp5365 # Offset: 354
    00000168: 	addq	$0x1, %rsi
    0000016c: 	movq	(%r9), %rdi
    0000016f: 	subq	%rsi, %r8
.Ltmp5380:
    00000172: 	movq	%r8, %rsi
    00000175: 	jmp	.Ltmp5365 # Offset: 373
    0000017a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5366:
    00000180: 	movq	(%rdi), %r9
    00000183: 	jmp	.Ltmp5355 # Offset: 387
.Ltmp5367:
    00000188: 	testq	%rsi, %rsi
    0000018b: 	je	.Ltmp5368 # Offset: 395
.Ltmp5374:
    00000191: 	jmp	.Ltmp5374 # Offset: 401
    00000193: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5362:
    00000198: 	leaq	0x1(%rsi), %rax
    0000019c: 	testq	%rsi, %rsi
    0000019f: 	je	.Ltmp5363 # Offset: 415
    000001a5: 	nopl	(%rax) # Size: 3
.Ltmp5375:
    000001a8: 	addq	$0x1, %rax
    000001ac: 	movq	0x8(%r9), %r9
    000001b0: 	cmpq	$0x1, %rax
    000001b4: 	je	.Ltmp5363 # Offset: 436
    000001ba: 	addq	$0x1, %rax
    000001be: 	movq	0x8(%r9), %r9
    000001c2: 	cmpq	$0x1, %rax
    000001c6: 	jne	.Ltmp5375 # Offset: 454
    000001c8: 	jmp	.Ltmp5363 # Offset: 456
.Ltmp5358:
    000001cd: 	movss	0x10(%rdi), %xmm1
    000001d2: 	comiss	%xmm0, %xmm1
    000001d5: 	ja	.Ltmp5361 # Offset: 469
    000001db: 	movq	(%rdi), %r9
    000001de: 	movq	%r9, %rdi
    000001e1: 	jmp	.Ltmp5376 # Offset: 481
.Ltmp5370:
    000001e6: 	movq	%rax, %r8
    000001e9: 	sarq	$0x3, %r8
    000001ed: 	cmpq	$0x7, %rax
    000001f1: 	jle	.Ltmp5377 # Offset: 497
    000001f3: 	leaq	-0x1(%r8), %rax
    000001f7: 	testq	%r8, %r8
    000001fa: 	je	.Ltmp5378 # Offset: 506
    000001fc: 	nopl	(%rax) # Size: 4
.Ltmp5379:
    00000200: 	movq	(%r9), %r9
    00000203: 	subq	$0x1, %rax
    00000207: 	jae	.Ltmp5379 # Offset: 519
.Ltmp5378:
    00000209: 	movss	0x10(%r9), %xmm1
    0000020f: 	comiss	%xmm0, %xmm1
    00000212: 	ja	.Ltmp5380 # Offset: 530
    00000218: 	movq	(%r9), %rdi
    0000021b: 	addq	$0x1, %r8
    0000021f: 	subq	%r8, %rsi
    00000222: 	callq	_Z23upper_bound_recur_innerISt14_List_iteratorIfEflET_S2_T0_T1_ # Offset: 546
    00000227: 	movq	%rax, %r9
    0000022a: 	jmp	.Ltmp5361 # Offset: 554
.Ltmp5368:
    0000022f: 	movss	0x10(%rdi), %xmm1
    00000234: 	movq	%rdi, %rcx
    00000237: 	comiss	%xmm0, %xmm1
    0000023a: 	ja	.Ltmp5361 # Offset: 570
    00000240: 	jmp	.Ltmp5381 # Offset: 576
.Ltmp5371:
    00000245: 	leaq	0x1(%rsi), %rax
    00000249: 	testq	%rsi, %rsi
    0000024c: 	je	.Ltmp5372 # Offset: 588
    00000252: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5382:
    00000258: 	addq	$0x1, %rax
    0000025c: 	movq	0x8(%r9), %r9
    00000260: 	cmpq	$0x1, %rax
    00000264: 	jne	.Ltmp5382 # Offset: 612
    00000266: 	jmp	.Ltmp5372 # Offset: 614
.Ltmp5377:
    0000026b: 	testq	%r8, %r8
    0000026e: 	je	.Ltmp5378 # Offset: 622
.Ltmp5383:
    00000270: 	jmp	.Ltmp5383 # Offset: 624
DWARF CFI Instructions:
    <empty>
End of Function "_Z17upper_bound_recurISt14_List_iteratorIfEfET_S2_S2_T0_"

Binary Function "_Z15TestSearchArrayISt14_List_iteratorIfEPFbS1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 492
  State       : disassembled
  Address     : 0x2f570
  Size        : 0x224
  MaxSize     : 0x230
  Offset      : 0x2f570
  Section     : .text
  Orc Section : .local.text._Z15TestSearchArrayISt14_List_iteratorIfEPFbS1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0491:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rcx, %r15
    00000009: 	pushq	%r14
    0000000b: 	movq	%rsi, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %r12
    00000015: 	movl	$0x1000, %edi
    0000001a: 	pushq	%rbp
    0000001b: 	pushq	%rbx
    0000001c: 	subq	$0x28, %rsp
    00000020: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000027: 	movq	%r8, 0x18(%rsp)
    0000002c: 	movq	%rdx, 0x10(%rsp)
    00000031: 	movb	%r9b, 0xf(%rsp)
    00000036: 	callq	_Znwm@PLT # Offset: 54
    0000003b: 	movq	%rax, %r13
    0000003e: 	movl	$0x0, (%rax)
    00000044: 	addq	$0x4, %rax
    00000048: 	leaq	0x1000(%r13), %r8
    0000004f: 	cmpq	%r8, %rax
    00000052: 	je	.Ltmp5384 # Offset: 82
    00000054: 	leaq	0xc(%r13), %rdi
    00000058: 	movq	$0x0, 0x4(%r13)
    00000060: 	movq	$0x0, 0xff8(%r13)
    0000006b: 	andq	$-0x8, %rdi
    0000006f: 	subq	%rdi, %rax
    00000072: 	movq	%rax, %rcx
    00000075: 	xorl	%eax, %eax
    00000077: 	addl	$0xffc, %ecx
    0000007d: 	shrl	$0x3, %ecx
    00000080: 	rep		stosq	%rax, %es:(%rdi)
.Ltmp5384:
    00000083: 	movabsq	$0x5851f42d4c957f2d, %r9
    0000008d: 	movq	%r13, %rsi
    00000090: 	movabsq	$0x14057b7ef767814f, %rdi
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5387:
    000000a0: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000000a7: 	imulq	%r9, %rax
    000000ab: 	addq	%rdi, %rax
    000000ae: 	movq	%rax, %rdx
    000000b1: 	movq	%rax, %rcx
    000000b4: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000000bb: 	shlq	$0x17, %rcx
    000000bf: 	shrq	$0x14, %rdx
    000000c3: 	xorq	%rcx, %rdx
    000000c6: 	xorq	%rdx, %rax
    000000c9: 	xorl	%edx, %edx
    000000cb: 	divq	0x10(%rsp)
    000000d0: 	movq	%r12, %rax
    000000d3: 	leaq	-0x1(%rdx), %rcx
    000000d7: 	testq	%rdx, %rdx
    000000da: 	jle	.Ltmp5385 # Offset: 218
.Ltmp5386:
    000000e0: 	movq	(%rax), %rax
    000000e3: 	subq	$0x1, %rcx
    000000e7: 	jae	.Ltmp5386 # Offset: 231
.Ltmp5393:
    000000e9: 	movss	0x10(%rax), %xmm0
    000000ee: 	addq	$0x4, %rsi
    000000f2: 	movss	%xmm0, -0x4(%rsi)
    000000f7: 	cmpq	%r8, %rsi
    000000fa: 	jne	.Ltmp5387 # Offset: 250
    000000fc: 	callq	clock@PLT # Offset: 252
    00000101: 	xorl	%ebx, %ebx
    00000103: 	xorl	%ebp, %ebp
    00000105: 	movq	%rax, start_time(%rip)
.Ltmp5391:
    0000010c: 	leaq	0xc8(%rbp), %rax
    00000113: 	movq	%rax, (%rsp)
    00000117: 	nopw	(%rax,%rax) # Size: 9
.Ltmp5389:
    00000120: 	movq	%rbp, %rax
    00000123: 	movq	%r14, %rsi
    00000126: 	addq	$0x1, %rbp
    0000012a: 	movq	%r12, %rdi
    0000012d: 	andl	$0x3ff, %eax
    00000132: 	movss	(%r13,%rax,4), %xmm0
    00000139: 	callq	*%r15 # Offset: 313
    0000013c: 	testb	%al, %al
    0000013e: 	jne	.Ltmp5388 # Offset: 318
    00000140: 	cmpb	$0x0, 0xf(%rsp)
    00000145: 	movl	$0x1, %eax
    0000014a: 	cmovel	%eax, %ebx
.Ltmp5388:
    0000014d: 	cmpq	(%rsp), %rbp
    00000151: 	jne	.Ltmp5389 # Offset: 337
    00000153: 	callq	clock@PLT # Offset: 339
    00000158: 	movsd	gMinimumTimeTarget(%rip), %xmm1
    00000160: 	pxor	%xmm0, %xmm0
    00000164: 	movq	%rax, end_time(%rip)
    0000016b: 	subq	start_time(%rip), %rax
    00000172: 	cvtsi2sd	%rax, %xmm0
    00000177: 	divsd	DATAat0x34410(%rip), %xmm0
    0000017f: 	comisd	%xmm0, %xmm1
    00000183: 	jbe	.Ltmp5390 # Offset: 387
    00000185: 	cmpq	$0x5f5e0ff, %rbp
    0000018c: 	jbe	.Ltmp5391 # Offset: 396
.Ltmp5390:
    00000192: 	movq	0x18(%rsp), %rdx
    00000197: 	movq	0x10(%rsp), %rdi
    0000019c: 	movq	%rbp, %rsi
    0000019f: 	callq	_Z13record_resultdmmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 415
    000001a4: 	testb	%bl, %bl
    000001a6: 	jne	.Ltmp5392 # Offset: 422
.Ltmp5395:
    000001a8: 	addq	$0x28, %rsp
    000001ac: 	movq	%r13, %rdi
    000001af: 	movl	$0x1000, %esi
    000001b4: 	popq	%rbx
    000001b5: 	popq	%rbp
    000001b6: 	popq	%r12
    000001b8: 	popq	%r13
    000001ba: 	popq	%r14
    000001bc: 	popq	%r15
    000001be: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 446
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5385:
    000001c8: 	leaq	0x1(%rdx), %rcx
    000001cc: 	je	.Ltmp5393 # Offset: 460
    000001d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5394:
    000001d8: 	addq	$0x1, %rcx
    000001dc: 	movq	0x8(%rax), %rax
    000001e0: 	cmpq	$0x1, %rcx
    000001e4: 	jne	.Ltmp5394 # Offset: 484
    000001e6: 	jmp	.Ltmp5393 # Offset: 486
.Ltmp5392:
    000001eb: 	movq	0x18(%rsp), %rax
    000001f0: 	leaq	DATAat0x34137(%rip), %rsi
    000001f7: 	movl	$0x1, %edi
    000001fc: 	movq	(%rax), %rdx
    000001ff: 	xorl	%eax, %eax
    00000201: 	callq	__printf_chk@PLT # Offset: 513
    00000206: 	jmp	.Ltmp5395 # Offset: 518
    00000208: 	endbr64
    0000020c: 	movq	%rax, %rbp
    0000020f: 	movq	%r13, %rdi
    00000212: 	movl	$0x1000, %esi
    00000217: 	callq	_ZdlPvm@PLT # Offset: 535
    0000021c: 	movq	%rbp, %rdi
    0000021f: 	callq	_Unwind_Resume@PLT # Offset: 543
DWARF CFI Instructions:
    <empty>
End of Function "_Z15TestSearchArrayISt14_List_iteratorIfEPFbS1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z13TestOneSearchISt14_List_iteratorIfEPFbS1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 493
  State       : disassembled
  Address     : 0x2f7a0
  Size        : 0x28a
  MaxSize     : 0x290
  Offset      : 0x2f7a0
  Section     : .text
  Orc Section : .local.text._Z13TestOneSearchISt14_List_iteratorIfEPFbS1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0492:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdi, %r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdx, %r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rsi, %rbp
    00000016: 	pushq	%rbx
    00000017: 	movq	%rdi, %rbx
    0000001a: 	subq	$0x58, %rsp
    0000001e: 	movss	DATAat0x34560(%rip), %xmm0
    00000026: 	movq	%rcx, 0x8(%rsp)
    0000002b: 	movq	%r8, 0x10(%rsp)
    00000030: 	movq	%fs:0x28, %rax
    00000039: 	movq	%rax, 0x48(%rsp)
    0000003e: 	xorl	%eax, %eax
    00000040: 	movq	%rdi, %rax
    00000043: 	cmpq	%rsi, %rdi
    00000046: 	je	.Ltmp5396 # Offset: 70
    00000048: 	nopl	(%rax,%rax) # Size: 8
.Ltmp5397:
    00000050: 	movq	%rax, %rdx
    00000053: 	movq	(%rax), %rax
    00000056: 	movss	%xmm0, 0x10(%rdx)
    0000005b: 	cmpq	%rbp, %rax
    0000005e: 	jne	.Ltmp5397 # Offset: 94
.Ltmp5396:
    00000060: 	movq	0x10(%rsp), %rsi
    00000065: 	leaq	0x20(%rsp), %r15
    0000006a: 	leaq	DATAat0x34160(%rip), %rdx
    00000071: 	movzbl	%r9b, %r14d
    00000075: 	movq	%r15, %rdi
    00000078: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 120
    0000007d: 	movq	0x8(%rsp), %rcx
    00000082: 	movl	%r14d, %r9d
    00000085: 	movq	%r15, %r8
    00000088: 	movq	%r12, %rdx
    0000008b: 	movq	%rbp, %rsi
    0000008e: 	movq	%r13, %rdi
    00000091: 	callq	_Z15TestSearchArrayISt14_List_iteratorIfEPFbS1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 145
    00000096: 	movq	0x20(%rsp), %rdi
    0000009b: 	leaq	0x30(%rsp), %rax
    000000a0: 	movq	%rax, 0x18(%rsp)
    000000a5: 	cmpq	%rax, %rdi
    000000a8: 	je	.Ltmp5398 # Offset: 168
    000000aa: 	movq	0x30(%rsp), %rax
    000000af: 	leaq	0x1(%rax), %rsi
    000000b3: 	callq	_ZdlPvm@PLT # Offset: 179
.Ltmp5398:
    000000b8: 	cmpq	$0x9, %r12
    000000bc: 	jbe	.Ltmp5399 # Offset: 188
    000000c2: 	movabsq	$-0x3333333333333333, %rdx
    000000cc: 	movq	%r12, %rax
    000000cf: 	mulq	%rdx
    000000d2: 	shrq	$0x3, %rdx
.Ltmp5410:
    000000d6: 	movss	DATAat0x34570(%rip), %xmm1
    000000de: 	movq	%r13, %rsi
    000000e1: 	xorl	%ecx, %ecx
    000000e3: 	pxor	%xmm0, %xmm0
    000000e7: 	cmpq	$0x0, %r12
    000000eb: 	jbe	.Ltmp5400 # Offset: 235
    000000ed: 	nopl	(%rax) # Size: 3
.Ltmp5403:
    000000f0: 	xorl	%eax, %eax
    000000f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5402:
    000000f8: 	movq	%rsi, %rdi
    000000fb: 	addq	$0x1, %rax
    000000ff: 	movq	(%rsi), %rsi
    00000102: 	addq	$0x1, %rcx
    00000106: 	movss	%xmm0, 0x10(%rdi)
    0000010b: 	cmpq	%rdx, %rax
    0000010e: 	jae	.Ltmp5401 # Offset: 270
    00000110: 	cmpq	%rcx, %r12
    00000113: 	ja	.Ltmp5402 # Offset: 275
.Ltmp5401:
    00000115: 	addss	%xmm1, %xmm0
    00000119: 	cmpq	%rcx, %r12
    0000011c: 	ja	.Ltmp5403 # Offset: 284
.Ltmp5400:
    0000011e: 	movq	0x10(%rsp), %rsi
    00000123: 	leaq	DATAat0x3416e(%rip), %rdx
    0000012a: 	movq	%r15, %rdi
    0000012d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 301
    00000132: 	movq	0x8(%rsp), %rcx
    00000137: 	movl	%r14d, %r9d
    0000013a: 	movq	%r15, %r8
    0000013d: 	movq	%r12, %rdx
    00000140: 	movq	%rbp, %rsi
    00000143: 	movq	%r13, %rdi
    00000146: 	callq	_Z15TestSearchArrayISt14_List_iteratorIfEPFbS1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 326
    0000014b: 	movq	0x20(%rsp), %rdi
    00000150: 	cmpq	0x18(%rsp), %rdi
    00000155: 	je	.Ltmp5404 # Offset: 341
    00000157: 	movq	0x30(%rsp), %rax
    0000015c: 	leaq	0x1(%rax), %rsi
    00000160: 	callq	_ZdlPvm@PLT # Offset: 352
.Ltmp5404:
    00000165: 	xorl	%edx, %edx
    00000167: 	cmpq	%rbp, %r13
    0000016a: 	jne	.Ltmp5405 # Offset: 362
    0000016c: 	jmp	.Ltmp5406 # Offset: 364
    0000016e: 	nop # Size: 2
.Ltmp5407:
    00000170: 	pxor	%xmm0, %xmm0
    00000174: 	cvtsi2ss	%rax, %xmm0
    00000179: 	movss	%xmm0, 0x10(%rcx)
    0000017e: 	cmpq	%rbx, %rbp
    00000181: 	je	.Ltmp5406 # Offset: 385
.Ltmp5405:
    00000183: 	movq	%rdx, %rax
    00000186: 	movq	%rbx, %rcx
    00000189: 	addq	$0x1, %rdx
    0000018d: 	movq	(%rbx), %rbx
    00000190: 	testq	%rax, %rax
    00000193: 	jns	.Ltmp5407 # Offset: 403
    00000195: 	movq	%rax, %rsi
    00000198: 	andl	$0x1, %eax
    0000019b: 	pxor	%xmm0, %xmm0
    0000019f: 	shrq	%rsi
    000001a2: 	orq	%rax, %rsi
    000001a5: 	cvtsi2ss	%rsi, %xmm0
    000001aa: 	addss	%xmm0, %xmm0
    000001ae: 	movss	%xmm0, 0x10(%rcx)
    000001b3: 	cmpq	%rbx, %rbp
    000001b6: 	jne	.Ltmp5405 # Offset: 438
.Ltmp5406:
    000001b8: 	movq	%rbp, %rsi
    000001bb: 	movq	%r13, %rdi
    000001be: 	callq	_Z18quicksort2_forwardISt14_List_iteratorIfEEvT_S2_ # Offset: 446
    000001c3: 	movq	0x10(%rsp), %rsi
    000001c8: 	leaq	DATAat0x34184(%rip), %rdx
    000001cf: 	movq	%r15, %rdi
    000001d2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 466
    000001d7: 	movq	0x8(%rsp), %rcx
    000001dc: 	movl	%r14d, %r9d
    000001df: 	movq	%r15, %r8
    000001e2: 	movq	%r12, %rdx
    000001e5: 	movq	%rbp, %rsi
    000001e8: 	movq	%r13, %rdi
    000001eb: 	callq	_Z15TestSearchArrayISt14_List_iteratorIfEPFbS1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 491
    000001f0: 	movq	0x20(%rsp), %rdi
    000001f5: 	cmpq	0x18(%rsp), %rdi
    000001fa: 	je	.Ltmp5408 # Offset: 506
    000001fc: 	movq	0x30(%rsp), %rax
    00000201: 	leaq	0x1(%rax), %rsi
    00000205: 	callq	_ZdlPvm@PLT # Offset: 517
.Ltmp5408:
    0000020a: 	movq	0x48(%rsp), %rax
    0000020f: 	subq	%fs:0x28, %rax
    00000218: 	jne	.Ltmp5409 # Offset: 536
    0000021a: 	addq	$0x58, %rsp
    0000021e: 	popq	%rbx
    0000021f: 	popq	%rbp
    00000220: 	popq	%r12
    00000222: 	popq	%r13
    00000224: 	popq	%r14
    00000226: 	popq	%r15
    00000228: 	retq # Offset: 552
.Ltmp5399:
    00000229: 	testq	%r12, %r12
    0000022c: 	je	.Ltmp5400 # Offset: 556
    00000232: 	movl	$0x1, %edx
    00000237: 	jmp	.Ltmp5410 # Offset: 567
.Ltmp5409:
    0000023c: 	callq	__stack_chk_fail@PLT # Offset: 572
    00000241: 	endbr64
.Ltmp5412:
    00000245: 	movq	%rax, %rbp
    00000248: 	jmp	.Ltmp5411 # Offset: 584
    0000024a: 	endbr64
    0000024e: 	jmp	.Ltmp5412 # Offset: 590
    00000250: 	endbr64
    00000254: 	movq	%rax, %rbp
    00000257: 	movq	0x20(%rsp), %rdi
    0000025c: 	leaq	0x30(%rsp), %rax
    00000261: 	cmpq	%rax, %rdi
    00000264: 	je	.Ltmp5413 # Offset: 612
.Ltmp5414:
    00000266: 	movq	0x30(%rsp), %rax
    0000026b: 	leaq	0x1(%rax), %rsi
    0000026f: 	callq	_ZdlPvm@PLT # Offset: 623
.Ltmp5413:
    00000274: 	movq	%rbp, %rdi
    00000277: 	callq	_Unwind_Resume@PLT # Offset: 631
.Ltmp5411:
    0000027c: 	movq	0x20(%rsp), %rdi
    00000281: 	cmpq	0x18(%rsp), %rdi
    00000286: 	jne	.Ltmp5414 # Offset: 646
    00000288: 	jmp	.Ltmp5413 # Offset: 648
DWARF CFI Instructions:
    <empty>
End of Function "_Z13TestOneSearchISt14_List_iteratorIfEPFbS1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z16TestOneContainerISt14_List_iteratorIfEEvT_S2_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 494
  State       : disassembled
  Address     : 0x2fa30
  Size        : 0x4de
  MaxSize     : 0x4e0
  Offset      : 0x2fa30
  Section     : .text
  Orc Section : .local.text._Z16TestOneContainerISt14_List_iteratorIfEEvT_S2_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0493:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdx, %r15
    00000009: 	leaq	DATAat0x3418f(%rip), %rdx
    00000010: 	pushq	%r14
    00000012: 	movq	%rsi, %r14
    00000015: 	movq	%rcx, %rsi
    00000018: 	pushq	%r13
    0000001a: 	movq	%rdi, %r13
    0000001d: 	pushq	%r12
    0000001f: 	movq	%rcx, %r12
    00000022: 	pushq	%rbp
    00000023: 	pushq	%rbx
    00000024: 	subq	$0x38, %rsp
    00000028: 	movq	%fs:0x28, %rax
    00000031: 	movq	%rax, 0x28(%rsp)
    00000036: 	xorl	%eax, %eax
    00000038: 	movq	%rsp, %rbp
    0000003b: 	movq	%rbp, %rdi
    0000003e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 62
    00000043: 	xorl	%r9d, %r9d
    00000046: 	movq	%rbp, %r8
    00000049: 	movq	%r15, %rdx
    0000004c: 	leaq	_Z14std_lowerboundISt14_List_iteratorIfEfET_S2_S2_T0_(%rip), %rcx
    00000053: 	movq	%r14, %rsi
    00000056: 	movq	%r13, %rdi
    00000059: 	callq	_Z13TestOneSearchISt14_List_iteratorIfEPFS1_S1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 89
    0000005e: 	movq	(%rsp), %rdi
    00000062: 	leaq	0x10(%rsp), %rbx
    00000067: 	cmpq	%rbx, %rdi
    0000006a: 	je	.Ltmp5415 # Offset: 106
    0000006c: 	movq	0x10(%rsp), %rax
    00000071: 	leaq	0x1(%rax), %rsi
    00000075: 	callq	_ZdlPvm@PLT # Offset: 117
.Ltmp5415:
    0000007a: 	leaq	DATAat0x341a1(%rip), %rdx
    00000081: 	movq	%r12, %rsi
    00000084: 	movq	%rbp, %rdi
    00000087: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 135
    0000008c: 	xorl	%r9d, %r9d
    0000008f: 	movq	%rbp, %r8
    00000092: 	movq	%r15, %rdx
    00000095: 	leaq	_Z12lower_bound1ISt14_List_iteratorIfEfET_S2_S2_T0_(%rip), %rcx
    0000009c: 	movq	%r14, %rsi
    0000009f: 	movq	%r13, %rdi
    000000a2: 	callq	_Z13TestOneSearchISt14_List_iteratorIfEPFS1_S1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 162
    000000a7: 	movq	(%rsp), %rdi
    000000ab: 	cmpq	%rbx, %rdi
    000000ae: 	je	.Ltmp5416 # Offset: 174
    000000b0: 	movq	0x10(%rsp), %rax
    000000b5: 	leaq	0x1(%rax), %rsi
    000000b9: 	callq	_ZdlPvm@PLT # Offset: 185
.Ltmp5416:
    000000be: 	leaq	DATAat0x341af(%rip), %rdx
    000000c5: 	movq	%r12, %rsi
    000000c8: 	movq	%rbp, %rdi
    000000cb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 203
    000000d0: 	xorl	%r9d, %r9d
    000000d3: 	movq	%rbp, %r8
    000000d6: 	movq	%r15, %rdx
    000000d9: 	leaq	_Z12lower_bound2ISt14_List_iteratorIfEfET_S2_S2_T0_(%rip), %rcx
    000000e0: 	movq	%r14, %rsi
    000000e3: 	movq	%r13, %rdi
    000000e6: 	callq	_Z13TestOneSearchISt14_List_iteratorIfEPFS1_S1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 230
    000000eb: 	movq	(%rsp), %rdi
    000000ef: 	cmpq	%rbx, %rdi
    000000f2: 	je	.Ltmp5417 # Offset: 242
    000000f4: 	movq	0x10(%rsp), %rax
    000000f9: 	leaq	0x1(%rax), %rsi
    000000fd: 	callq	_ZdlPvm@PLT # Offset: 253
.Ltmp5417:
    00000102: 	leaq	DATAat0x341bd(%rip), %rdx
    00000109: 	movq	%r12, %rsi
    0000010c: 	movq	%rbp, %rdi
    0000010f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 271
    00000114: 	xorl	%r9d, %r9d
    00000117: 	movq	%rbp, %r8
    0000011a: 	movq	%r15, %rdx
    0000011d: 	leaq	_Z17lower_bound_recurISt14_List_iteratorIfEfET_S2_S2_T0_(%rip), %rcx
    00000124: 	movq	%r14, %rsi
    00000127: 	movq	%r13, %rdi
    0000012a: 	callq	_Z13TestOneSearchISt14_List_iteratorIfEPFS1_S1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 298
    0000012f: 	movq	(%rsp), %rdi
    00000133: 	cmpq	%rbx, %rdi
    00000136: 	je	.Ltmp5418 # Offset: 310
    00000138: 	movq	0x10(%rsp), %rax
    0000013d: 	leaq	0x1(%rax), %rsi
    00000141: 	callq	_ZdlPvm@PLT # Offset: 321
.Ltmp5418:
    00000146: 	leaq	DATAat0x341d4(%rip), %rdx
    0000014d: 	movq	%r12, %rsi
    00000150: 	movq	%rbp, %rdi
    00000153: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 339
    00000158: 	movq	%rbp, %r8
    0000015b: 	movq	%r15, %rdx
    0000015e: 	movq	%r14, %rsi
    00000161: 	movl	$0x1, %r9d
    00000167: 	leaq	_Z14std_upperboundISt14_List_iteratorIfEfET_S2_S2_T0_(%rip), %rcx
    0000016e: 	movq	%r13, %rdi
    00000171: 	callq	_Z13TestOneSearchISt14_List_iteratorIfEPFS1_S1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 369
    00000176: 	movq	(%rsp), %rdi
    0000017a: 	cmpq	%rbx, %rdi
    0000017d: 	je	.Ltmp5419 # Offset: 381
    0000017f: 	movq	0x10(%rsp), %rax
    00000184: 	leaq	0x1(%rax), %rsi
    00000188: 	callq	_ZdlPvm@PLT # Offset: 392
.Ltmp5419:
    0000018d: 	leaq	DATAat0x341e6(%rip), %rdx
    00000194: 	movq	%r12, %rsi
    00000197: 	movq	%rbp, %rdi
    0000019a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 410
    0000019f: 	movq	%rbp, %r8
    000001a2: 	movq	%r15, %rdx
    000001a5: 	movq	%r14, %rsi
    000001a8: 	movl	$0x1, %r9d
    000001ae: 	leaq	_Z12upper_bound1ISt14_List_iteratorIfEfET_S2_S2_T0_(%rip), %rcx
    000001b5: 	movq	%r13, %rdi
    000001b8: 	callq	_Z13TestOneSearchISt14_List_iteratorIfEPFS1_S1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 440
    000001bd: 	movq	(%rsp), %rdi
    000001c1: 	cmpq	%rbx, %rdi
    000001c4: 	je	.Ltmp5420 # Offset: 452
    000001c6: 	movq	0x10(%rsp), %rax
    000001cb: 	leaq	0x1(%rax), %rsi
    000001cf: 	callq	_ZdlPvm@PLT # Offset: 463
.Ltmp5420:
    000001d4: 	leaq	DATAat0x341f4(%rip), %rdx
    000001db: 	movq	%r12, %rsi
    000001de: 	movq	%rbp, %rdi
    000001e1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 481
    000001e6: 	movq	%rbp, %r8
    000001e9: 	movq	%r15, %rdx
    000001ec: 	movq	%r14, %rsi
    000001ef: 	movl	$0x1, %r9d
    000001f5: 	leaq	_Z12upper_bound2ISt14_List_iteratorIfEfET_S2_S2_T0_(%rip), %rcx
    000001fc: 	movq	%r13, %rdi
    000001ff: 	callq	_Z13TestOneSearchISt14_List_iteratorIfEPFS1_S1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 511
    00000204: 	movq	(%rsp), %rdi
    00000208: 	cmpq	%rbx, %rdi
    0000020b: 	je	.Ltmp5421 # Offset: 523
    0000020d: 	movq	0x10(%rsp), %rax
    00000212: 	leaq	0x1(%rax), %rsi
    00000216: 	callq	_ZdlPvm@PLT # Offset: 534
.Ltmp5421:
    0000021b: 	leaq	DATAat0x34202(%rip), %rdx
    00000222: 	movq	%r12, %rsi
    00000225: 	movq	%rbp, %rdi
    00000228: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 552
    0000022d: 	movq	%rbp, %r8
    00000230: 	movq	%r15, %rdx
    00000233: 	movq	%r14, %rsi
    00000236: 	movl	$0x1, %r9d
    0000023c: 	leaq	_Z17upper_bound_recurISt14_List_iteratorIfEfET_S2_S2_T0_(%rip), %rcx
    00000243: 	movq	%r13, %rdi
    00000246: 	callq	_Z13TestOneSearchISt14_List_iteratorIfEPFS1_S1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 582
    0000024b: 	movq	(%rsp), %rdi
    0000024f: 	cmpq	%rbx, %rdi
    00000252: 	je	.Ltmp5422 # Offset: 594
    00000254: 	movq	0x10(%rsp), %rax
    00000259: 	leaq	0x1(%rax), %rsi
    0000025d: 	callq	_ZdlPvm@PLT # Offset: 605
.Ltmp5422:
    00000262: 	leaq	DATAat0x34219(%rip), %rdx
    00000269: 	movq	%r12, %rsi
    0000026c: 	movq	%rbp, %rdi
    0000026f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 623
    00000274: 	xorl	%r9d, %r9d
    00000277: 	movq	%rbp, %r8
    0000027a: 	movq	%r15, %rdx
    0000027d: 	leaq	_Z16std_binarysearchISt14_List_iteratorIfEfEbT_S2_T0_(%rip), %rcx
    00000284: 	movq	%r14, %rsi
    00000287: 	movq	%r13, %rdi
    0000028a: 	callq	_Z13TestOneSearchISt14_List_iteratorIfEPFbS1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 650
    0000028f: 	movq	(%rsp), %rdi
    00000293: 	cmpq	%rbx, %rdi
    00000296: 	je	.Ltmp5423 # Offset: 662
    00000298: 	movq	0x10(%rsp), %rax
    0000029d: 	leaq	0x1(%rax), %rsi
    000002a1: 	callq	_ZdlPvm@PLT # Offset: 673
.Ltmp5423:
    000002a6: 	leaq	DATAat0x3422d(%rip), %rdx
    000002ad: 	movq	%r12, %rsi
    000002b0: 	movq	%rbp, %rdi
    000002b3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 691
    000002b8: 	xorl	%r9d, %r9d
    000002bb: 	movq	%rbp, %r8
    000002be: 	movq	%r15, %rdx
    000002c1: 	leaq	_Z13binarysearch1ISt14_List_iteratorIfEfEbT_S2_T0_(%rip), %rcx
    000002c8: 	movq	%r14, %rsi
    000002cb: 	movq	%r13, %rdi
    000002ce: 	callq	_Z13TestOneSearchISt14_List_iteratorIfEPFbS1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 718
    000002d3: 	movq	(%rsp), %rdi
    000002d7: 	cmpq	%rbx, %rdi
    000002da: 	je	.Ltmp5424 # Offset: 730
    000002dc: 	movq	0x10(%rsp), %rax
    000002e1: 	leaq	0x1(%rax), %rsi
    000002e5: 	callq	_ZdlPvm@PLT # Offset: 741
.Ltmp5424:
    000002ea: 	leaq	DATAat0x3423d(%rip), %rdx
    000002f1: 	movq	%r12, %rsi
    000002f4: 	movq	%rbp, %rdi
    000002f7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 759
    000002fc: 	xorl	%r9d, %r9d
    000002ff: 	movq	%rbp, %r8
    00000302: 	movq	%r15, %rdx
    00000305: 	leaq	_Z13binarysearch2ISt14_List_iteratorIfEfEbT_S2_T0_(%rip), %rcx
    0000030c: 	movq	%r14, %rsi
    0000030f: 	movq	%r13, %rdi
    00000312: 	callq	_Z13TestOneSearchISt14_List_iteratorIfEPFbS1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 786
    00000317: 	movq	(%rsp), %rdi
    0000031b: 	cmpq	%rbx, %rdi
    0000031e: 	je	.Ltmp5425 # Offset: 798
    00000320: 	movq	0x10(%rsp), %rax
    00000325: 	leaq	0x1(%rax), %rsi
    00000329: 	callq	_ZdlPvm@PLT # Offset: 809
.Ltmp5425:
    0000032e: 	leaq	DATAat0x3424d(%rip), %rdx
    00000335: 	movq	%r12, %rsi
    00000338: 	movq	%rbp, %rdi
    0000033b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 827
    00000340: 	xorl	%r9d, %r9d
    00000343: 	movq	%rbp, %r8
    00000346: 	movq	%r15, %rdx
    00000349: 	leaq	_Z13binarysearch3ISt14_List_iteratorIfEfEbT_S2_T0_(%rip), %rcx
    00000350: 	movq	%r14, %rsi
    00000353: 	movq	%r13, %rdi
    00000356: 	callq	_Z13TestOneSearchISt14_List_iteratorIfEPFbS1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 854
    0000035b: 	movq	(%rsp), %rdi
    0000035f: 	cmpq	%rbx, %rdi
    00000362: 	je	.Ltmp5426 # Offset: 866
    00000364: 	movq	0x10(%rsp), %rax
    00000369: 	leaq	0x1(%rax), %rsi
    0000036d: 	callq	_ZdlPvm@PLT # Offset: 877
.Ltmp5426:
    00000372: 	leaq	DATAat0x3425d(%rip), %rdx
    00000379: 	movq	%r12, %rsi
    0000037c: 	movq	%rbp, %rdi
    0000037f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 895
    00000384: 	xorl	%r9d, %r9d
    00000387: 	movq	%rbp, %r8
    0000038a: 	movq	%r15, %rdx
    0000038d: 	leaq	_Z13binarysearch4ISt14_List_iteratorIfEfEbT_S2_T0_(%rip), %rcx
    00000394: 	movq	%r14, %rsi
    00000397: 	movq	%r13, %rdi
    0000039a: 	callq	_Z13TestOneSearchISt14_List_iteratorIfEPFbS1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 922
    0000039f: 	movq	(%rsp), %rdi
    000003a3: 	cmpq	%rbx, %rdi
    000003a6: 	je	.Ltmp5427 # Offset: 934
    000003a8: 	movq	0x10(%rsp), %rax
    000003ad: 	leaq	0x1(%rax), %rsi
    000003b1: 	callq	_ZdlPvm@PLT # Offset: 945
.Ltmp5427:
    000003b6: 	leaq	DATAat0x3426d(%rip), %rdx
    000003bd: 	movq	%r12, %rsi
    000003c0: 	movq	%rbp, %rdi
    000003c3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 963
    000003c8: 	xorl	%r9d, %r9d
    000003cb: 	movq	%rbp, %r8
    000003ce: 	movq	%r15, %rdx
    000003d1: 	leaq	_Z18binarysearch_recurISt14_List_iteratorIfEfEbT_S2_T0_(%rip), %rcx
    000003d8: 	movq	%r14, %rsi
    000003db: 	movq	%r13, %rdi
    000003de: 	callq	_Z13TestOneSearchISt14_List_iteratorIfEPFbS1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 990
    000003e3: 	movq	(%rsp), %rdi
    000003e7: 	cmpq	%rbx, %rdi
    000003ea: 	je	.Ltmp5428 # Offset: 1002
    000003ec: 	movq	0x10(%rsp), %rax
    000003f1: 	leaq	0x1(%rax), %rsi
    000003f5: 	callq	_ZdlPvm@PLT # Offset: 1013
.Ltmp5428:
    000003fa: 	movq	%rbp, %rdi
    000003fd: 	leaq	DATAat0x34286(%rip), %rdx
    00000404: 	movq	%r12, %rsi
    00000407: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1031
    0000040c: 	movq	%rbp, %rdi
    0000040f: 	callq	_Z9summarizeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1039
    00000414: 	movq	(%rsp), %rdi
    00000418: 	cmpq	%rbx, %rdi
    0000041b: 	je	.Ltmp5429 # Offset: 1051
    0000041d: 	movq	0x10(%rsp), %rax
    00000422: 	leaq	0x1(%rax), %rsi
    00000426: 	callq	_ZdlPvm@PLT # Offset: 1062
.Ltmp5429:
    0000042b: 	movq	0x28(%rsp), %rax
    00000430: 	subq	%fs:0x28, %rax
    00000439: 	jne	.Ltmp5430 # Offset: 1081
    0000043b: 	addq	$0x38, %rsp
    0000043f: 	popq	%rbx
    00000440: 	popq	%rbp
    00000441: 	popq	%r12
    00000443: 	popq	%r13
    00000445: 	popq	%r14
    00000447: 	popq	%r15
    00000449: 	retq # Offset: 1097
.Ltmp5430:
    0000044a: 	callq	__stack_chk_fail@PLT # Offset: 1098
    0000044f: 	endbr64
.Ltmp5432:
    00000453: 	movq	%rax, %rbp
    00000456: 	jmp	.Ltmp5431 # Offset: 1110
    00000458: 	endbr64
    0000045c: 	jmp	.Ltmp5432 # Offset: 1116
    0000045e: 	endbr64
    00000462: 	jmp	.Ltmp5432 # Offset: 1122
    00000464: 	endbr64
    00000468: 	jmp	.Ltmp5432 # Offset: 1128
    0000046a: 	endbr64
    0000046e: 	jmp	.Ltmp5432 # Offset: 1134
    00000470: 	endbr64
    00000474: 	jmp	.Ltmp5432 # Offset: 1140
    00000476: 	endbr64
    0000047a: 	jmp	.Ltmp5432 # Offset: 1146
.Ltmp5431:
    0000047c: 	movq	(%rsp), %rdi
    00000480: 	cmpq	%rbx, %rdi
    00000483: 	je	.Ltmp5433 # Offset: 1155
.Ltmp5435:
    00000485: 	movq	0x10(%rsp), %rax
    0000048a: 	leaq	0x1(%rax), %rsi
    0000048e: 	callq	_ZdlPvm@PLT # Offset: 1166
.Ltmp5433:
    00000493: 	movq	%rbp, %rdi
    00000496: 	callq	_Unwind_Resume@PLT # Offset: 1174
    0000049b: 	endbr64
    0000049f: 	jmp	.Ltmp5432 # Offset: 1183
    000004a1: 	endbr64
    000004a5: 	jmp	.Ltmp5432 # Offset: 1189
    000004a7: 	endbr64
    000004ab: 	jmp	.Ltmp5432 # Offset: 1195
    000004ad: 	endbr64
    000004b1: 	jmp	.Ltmp5432 # Offset: 1201
    000004b3: 	endbr64
    000004b7: 	jmp	.Ltmp5432 # Offset: 1207
    000004b9: 	endbr64
    000004bd: 	movq	%rax, %rbp
    000004c0: 	jmp	.Ltmp5434 # Offset: 1216
    000004c2: 	endbr64
    000004c6: 	jmp	.Ltmp5432 # Offset: 1222
    000004c8: 	endbr64
    000004cc: 	jmp	.Ltmp5432 # Offset: 1228
.Ltmp5434:
    000004ce: 	movq	(%rsp), %rdi
    000004d2: 	leaq	0x10(%rsp), %rax
    000004d7: 	cmpq	%rax, %rdi
    000004da: 	jne	.Ltmp5435 # Offset: 1242
    000004dc: 	jmp	.Ltmp5433 # Offset: 1244
DWARF CFI Instructions:
    <empty>
End of Function "_Z16TestOneContainerISt14_List_iteratorIfEEvT_S2_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z24binarysearch_recur_innerISt14_List_iteratorIfEflEbT_T0_T1_" after disassembly {
  Number      : 495
  State       : disassembled
  Address     : 0x2ff10
  Size        : 0x98
  MaxSize     : 0xa0
  Offset      : 0x2ff10
  Section     : .text
  Orc Section : .local.text._Z24binarysearch_recur_innerISt14_List_iteratorIfEflEbT_T0_T1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0494:
    00000000: 	endbr64
.Ltmp5444:
    00000004: 	testq	%rsi, %rsi
    00000007: 	je	.Ltmp5436 # Offset: 7
    00000009: 	movq	%rsi, %rcx
    0000000c: 	shrq	$0x3f, %rcx
    00000010: 	addq	%rsi, %rcx
    00000013: 	sarq	%rcx
    00000016: 	cmpq	$0x1, %rsi
    0000001a: 	jle	.Ltmp5437 # Offset: 26
    0000001c: 	leaq	-0x1(%rcx), %rdx
    00000020: 	movq	%rdi, %rax
    00000023: 	testq	%rcx, %rcx
    00000026: 	je	.Ltmp5438 # Offset: 38
    00000028: 	nopl	(%rax,%rax) # Size: 8
.Ltmp5439:
    00000030: 	movq	(%rax), %rax
    00000033: 	subq	$0x1, %rdx
    00000037: 	jae	.Ltmp5439 # Offset: 55
.Ltmp5438:
    00000039: 	movss	0x10(%rax), %xmm1
    0000003e: 	comiss	%xmm1, %xmm0
    00000041: 	ja	.Ltmp5440 # Offset: 65
.Ltmp5443:
    00000043: 	comiss	%xmm0, %xmm1
    00000046: 	ja	.Ltmp5441 # Offset: 70
    00000048: 	movl	$0x1, %eax
    0000004d: 	retq # Offset: 77
    0000004e: 	nop # Size: 2
.Ltmp5436:
    00000050: 	xorl	%eax, %eax
    00000052: 	retq # Offset: 82
    00000053: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5437:
    00000058: 	leaq	0x1(%rcx), %rdx
    0000005c: 	movq	%rdi, %rax
    0000005f: 	testq	%rcx, %rcx
    00000062: 	je	.Ltmp5438 # Offset: 98
    00000064: 	nopl	(%rax) # Size: 4
.Ltmp5442:
    00000068: 	addq	$0x1, %rdx
    0000006c: 	movq	0x8(%rax), %rax
    00000070: 	cmpq	$0x1, %rdx
    00000074: 	jne	.Ltmp5442 # Offset: 116
    00000076: 	movss	0x10(%rax), %xmm1
    0000007b: 	comiss	%xmm1, %xmm0
    0000007e: 	jbe	.Ltmp5443 # Offset: 126
.Ltmp5440:
    00000080: 	addq	$0x1, %rcx
    00000084: 	movq	(%rax), %rdi
    00000087: 	subq	%rcx, %rsi
    0000008a: 	jmp	.Ltmp5444 # Offset: 138
    0000008f: 	nop # Size: 1
.Ltmp5441:
    00000090: 	movq	%rcx, %rsi
    00000093: 	jmp	.Ltmp5444 # Offset: 147
DWARF CFI Instructions:
    <empty>
End of Function "_Z24binarysearch_recur_innerISt14_List_iteratorIfEflEbT_T0_T1_"

Binary Function "_Z18binarysearch_recurISt14_List_iteratorIfEfEbT_S2_T0_" after disassembly {
  Number      : 496
  State       : disassembled
  Address     : 0x2ffb0
  Size        : 0x1b3
  MaxSize     : 0x1c0
  Offset      : 0x2ffb0
  Section     : .text
  Orc Section : .local.text._Z18binarysearch_recurISt14_List_iteratorIfEfEbT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0495:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	cmpq	%rdi, %rsi
    0000000a: 	je	.Ltmp5445 # Offset: 10
    00000010: 	movq	%rdi, %rdx
    00000013: 	xorl	%eax, %eax
    00000015: 	nopl	(%rax) # Size: 3
.Ltmp5446:
    00000018: 	movq	(%rdx), %rdx
    0000001b: 	movq	%rax, %rcx
    0000001e: 	addq	$0x1, %rax
    00000022: 	cmpq	%rdx, %rsi
    00000025: 	jne	.Ltmp5446 # Offset: 37
    00000027: 	movq	%rax, %rsi
    0000002a: 	sarq	%rsi
    0000002d: 	cmpq	$0x1, %rax
    00000031: 	je	.Ltmp5447 # Offset: 49
    00000037: 	leaq	-0x1(%rsi), %rdx
    0000003b: 	testq	%rsi, %rsi
    0000003e: 	je	.Ltmp5448 # Offset: 62
    00000044: 	movq	%rdi, %r8
    00000047: 	nopw	(%rax,%rax) # Size: 9
.Ltmp5449:
    00000050: 	movq	(%r8), %r8
    00000053: 	subq	$0x1, %rdx
    00000057: 	jae	.Ltmp5449 # Offset: 87
    00000059: 	movss	0x10(%r8), %xmm1
    0000005f: 	comiss	%xmm1, %xmm0
    00000062: 	jbe	.Ltmp5450 # Offset: 98
    00000068: 	movq	(%r8), %rax
    0000006b: 	movq	%rax, %rdi
    0000006e: 	subq	%rsi, %rcx
    00000071: 	je	.Ltmp5445 # Offset: 113
.Ltmp5466:
    00000077: 	movq	%rcx, %rsi
    0000007a: 	shrq	$0x3f, %rsi
    0000007e: 	addq	%rcx, %rsi
    00000081: 	sarq	%rsi
    00000084: 	cmpq	$0x1, %rcx
    00000088: 	jle	.Ltmp5451 # Offset: 136
    0000008e: 	leaq	-0x1(%rsi), %rdx
    00000092: 	testq	%rsi, %rsi
    00000095: 	je	.Ltmp5452 # Offset: 149
    00000097: 	nopw	(%rax,%rax) # Size: 9
.Ltmp5453:
    000000a0: 	movq	(%rax), %rax
    000000a3: 	subq	$0x1, %rdx
    000000a7: 	jae	.Ltmp5453 # Offset: 167
.Ltmp5452:
    000000a9: 	movss	0x10(%rax), %xmm1
    000000ae: 	comiss	%xmm1, %xmm0
    000000b1: 	ja	.Ltmp5454 # Offset: 177
    000000b7: 	comiss	%xmm0, %xmm1
    000000ba: 	jbe	.Ltmp5455 # Offset: 186
.Ltmp5462:
    000000bc: 	jmp	_Z24binarysearch_recur_innerISt14_List_iteratorIfEflEbT_T0_T1_ # TAILCALL  # Offset: 188
    000000c1: 	nopl	(%rax) # Size: 7
.Ltmp5447:
    000000c8: 	movss	0x10(%rdi), %xmm1
    000000cd: 	comiss	%xmm1, %xmm0
    000000d0: 	ja	.Ltmp5445 # Offset: 208
    000000d2: 	comiss	%xmm0, %xmm1
    000000d5: 	ja	.Ltmp5456 # Offset: 213
.Ltmp5455:
    000000d7: 	movl	$0x1, %r8d
.Ltmp5457:
    000000dd: 	movl	%r8d, %eax
    000000e0: 	retq # Offset: 224
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp5456:
    000000e8: 	xorl	%r8d, %r8d
    000000eb: 	testq	%rsi, %rsi
    000000ee: 	je	.Ltmp5457 # Offset: 238
.Ltmp5467:
    000000f0: 	movq	%rax, %r8
    000000f3: 	sarq	$0x2, %r8
    000000f7: 	cmpq	$0x3, %rax
    000000fb: 	jle	.Ltmp5458 # Offset: 251
    000000fd: 	leaq	-0x1(%r8), %rax
    00000101: 	testq	%r8, %r8
    00000104: 	je	.Ltmp5459 # Offset: 260
    00000106: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp5460:
    00000110: 	movq	(%r9), %r9
    00000113: 	subq	$0x1, %rax
    00000117: 	jae	.Ltmp5460 # Offset: 279
.Ltmp5459:
    00000119: 	movss	0x10(%r9), %xmm1
    0000011f: 	comiss	%xmm1, %xmm0
    00000122: 	ja	.Ltmp5461 # Offset: 290
    00000124: 	comiss	%xmm0, %xmm1
    00000127: 	jbe	.Ltmp5455 # Offset: 295
    00000129: 	movq	%r8, %rsi
    0000012c: 	jmp	.Ltmp5462 # Offset: 300
    0000012e: 	nop # Size: 2
.Ltmp5445:
    00000130: 	xorl	%r8d, %r8d
    00000133: 	movl	%r8d, %eax
    00000136: 	retq # Offset: 310
.Ltmp5458:
    00000137: 	testq	%r8, %r8
    0000013a: 	je	.Ltmp5459 # Offset: 314
.Ltmp5463:
    0000013c: 	jmp	.Ltmp5463 # Offset: 316
    0000013e: 	nop # Size: 2
.Ltmp5451:
    00000140: 	leaq	0x1(%rsi), %rdx
    00000144: 	testq	%rsi, %rsi
    00000147: 	je	.Ltmp5452 # Offset: 327
    0000014d: 	nopl	(%rax) # Size: 3
.Ltmp5464:
    00000150: 	addq	$0x1, %rdx
    00000154: 	movq	0x8(%rax), %rax
    00000158: 	cmpq	$0x1, %rdx
    0000015c: 	jne	.Ltmp5464 # Offset: 348
    0000015e: 	jmp	.Ltmp5452 # Offset: 350
.Ltmp5448:
    00000163: 	movss	0x10(%rdi), %xmm1
    00000168: 	comiss	%xmm1, %xmm0
    0000016b: 	jbe	.Ltmp5465 # Offset: 363
    0000016d: 	movq	(%rdi), %rax
    00000170: 	movq	%rax, %rdi
    00000173: 	jmp	.Ltmp5466 # Offset: 371
.Ltmp5450:
    00000178: 	comiss	%xmm0, %xmm1
    0000017b: 	jbe	.Ltmp5455 # Offset: 379
    00000181: 	jmp	.Ltmp5467 # Offset: 385
.Ltmp5461:
    00000186: 	addq	$0x1, %r8
    0000018a: 	movq	(%r9), %rdi
    0000018d: 	subq	%r8, %rsi
    00000190: 	jmp	_Z24binarysearch_recur_innerISt14_List_iteratorIfEflEbT_T0_T1_ # TAILCALL  # Offset: 400
.Ltmp5454:
    00000195: 	addq	$0x1, %rsi
    00000199: 	movq	(%rax), %rdi
    0000019c: 	subq	%rsi, %rcx
    0000019f: 	movq	%rcx, %rsi
    000001a2: 	jmp	_Z24binarysearch_recur_innerISt14_List_iteratorIfEflEbT_T0_T1_ # TAILCALL  # Offset: 418
.Ltmp5465:
    000001a7: 	ucomiss	%xmm0, %xmm1
    000001aa: 	setbe	%r8b
    000001ae: 	jmp	.Ltmp5457 # Offset: 430
DWARF CFI Instructions:
    <empty>
End of Function "_Z18binarysearch_recurISt14_List_iteratorIfEfEbT_S2_T0_"

Binary Function "_Z18quicksort2_forwardISt18_Fwd_list_iteratorIfEEvT_S2_" after disassembly {
  Number      : 497
  State       : disassembled
  Address     : 0x30170
  Size        : 0x134
  MaxSize     : 0x140
  Offset      : 0x30170
  Section     : .text
  Orc Section : .local.text._Z18quicksort2_forwardISt18_Fwd_list_iteratorIfEEvT_S2_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0496:
    00000000: 	endbr64
    00000004: 	cmpq	%rdi, %rsi
    00000007: 	je	.Ltmp5468 # Offset: 7
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdi, %r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rsi, %rbp
    00000016: 	pushq	%rbx
    00000017: 	movq	(%r12), %rbx
    0000001b: 	cmpq	%rbp, %rbx
    0000001e: 	je	.Ltmp5469 # Offset: 30
.Ltmp5477:
    00000024: 	movq	(%rbx), %rdx
    00000027: 	movss	0x8(%rbx), %xmm1
    0000002c: 	movss	0x8(%r12), %xmm0
    00000033: 	cmpq	%rbp, %rdx
    00000036: 	je	.Ltmp5470 # Offset: 54
    0000003c: 	comiss	%xmm1, %xmm0
    0000003f: 	jbe	.Ltmp5471 # Offset: 63
    00000041: 	movss	%xmm1, 0x8(%r12)
    00000048: 	movaps	%xmm0, %xmm1
    0000004b: 	movss	%xmm0, 0x8(%rbx)
.Ltmp5471:
    00000050: 	movss	0x8(%rdx), %xmm0
    00000055: 	comiss	%xmm0, %xmm1
    00000058: 	jbe	.Ltmp5472 # Offset: 88
    0000005a: 	movss	%xmm0, 0x8(%rbx)
    0000005f: 	movss	%xmm1, 0x8(%rdx)
    00000064: 	movss	0x8(%rbx), %xmm1
    00000069: 	movss	0x8(%r12), %xmm0
    00000070: 	comiss	%xmm1, %xmm0
    00000073: 	jbe	.Ltmp5472 # Offset: 115
    00000075: 	movss	%xmm0, 0x8(%rbx)
    0000007a: 	movss	%xmm1, 0x8(%r12)
    00000081: 	movss	0x8(%rbx), %xmm1
.Ltmp5472:
    00000086: 	movq	(%rdx), %rax
    00000089: 	cmpq	%rbp, %rax
    0000008c: 	je	.Ltmp5469 # Offset: 140
    0000008e: 	movl	$0x2, %ecx
    00000093: 	movl	$0x1, %esi
    00000098: 	jmp	.Ltmp5473 # Offset: 152
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5475:
    000000a0: 	movq	%rax, %rdx
    000000a3: 	movq	(%rax), %rax
.Ltmp5473:
    000000a6: 	movss	0x8(%rdx), %xmm0
    000000ab: 	comiss	%xmm0, %xmm1
    000000ae: 	jbe	.Ltmp5474 # Offset: 174
    000000b0: 	movss	0x8(%rbx), %xmm2
    000000b5: 	addq	$0x1, %rsi
    000000b9: 	movss	%xmm2, 0x8(%rdx)
    000000be: 	movss	%xmm0, 0x8(%rbx)
    000000c3: 	movq	(%rbx), %rbx
.Ltmp5474:
    000000c6: 	addq	$0x1, %rcx
    000000ca: 	cmpq	%rbp, %rax
    000000cd: 	jne	.Ltmp5475 # Offset: 205
    000000cf: 	subq	%rsi, %rcx
    000000d2: 	cmpq	%rcx, %rsi
    000000d5: 	jbe	.Ltmp5476 # Offset: 213
    000000d7: 	movq	%rbp, %rsi
    000000da: 	movq	%rbx, %rdi
    000000dd: 	callq	_Z18quicksort2_forwardISt18_Fwd_list_iteratorIfEEvT_S2_ # Offset: 221
    000000e2: 	cmpq	%r12, %rbx
    000000e5: 	je	.Ltmp5469 # Offset: 229
    000000e7: 	movq	%rbx, %rbp
    000000ea: 	movq	%r12, %rbx
.Ltmp5478:
    000000ed: 	movq	%rbx, %r12
    000000f0: 	movq	(%r12), %rbx
    000000f4: 	cmpq	%rbp, %rbx
    000000f7: 	jne	.Ltmp5477 # Offset: 247
.Ltmp5469:
    000000fd: 	popq	%rbx
    000000fe: 	popq	%rbp
    000000ff: 	popq	%r12
    00000101: 	retq # Offset: 257
    00000102: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5476:
    00000108: 	movq	%rbx, %rsi
    0000010b: 	movq	%r12, %rdi
    0000010e: 	callq	_Z18quicksort2_forwardISt18_Fwd_list_iteratorIfEEvT_S2_ # Offset: 270
    00000113: 	cmpq	%rbp, %rbx
    00000116: 	jne	.Ltmp5478 # Offset: 278
    00000118: 	popq	%rbx
    00000119: 	popq	%rbp
    0000011a: 	popq	%r12
    0000011c: 	retq # Offset: 284
.Ltmp5470:
    0000011d: 	comiss	%xmm1, %xmm0
    00000120: 	jbe	.Ltmp5469 # Offset: 288
    00000122: 	movss	%xmm0, 0x8(%rbx)
    00000127: 	movss	%xmm1, 0x8(%r12)
    0000012e: 	popq	%rbx
    0000012f: 	popq	%rbp
    00000130: 	popq	%r12
    00000132: 	retq # Offset: 306
.Ltmp5468:
    00000133: 	retq # Offset: 307
DWARF CFI Instructions:
    <empty>
End of Function "_Z18quicksort2_forwardISt18_Fwd_list_iteratorIfEEvT_S2_"

Binary Function "_Z13TestOneSearchISt18_Fwd_list_iteratorIfEPFS1_S1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1(*2)" after disassembly {
  All names   : _Z13TestOneSearchISt18_Fwd_list_iteratorIfEPFS1_S1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1
                _Z13TestOneSearchISt18_Fwd_list_iteratorIfEPFS1_S1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/binary_search.cpp/1
  Number      : 498
  State       : disassembled
  Address     : 0x302b0
  Size        : 0x28a
  MaxSize     : 0x290
  Offset      : 0x302b0
  Section     : .text
  Orc Section : .local.text._Z13TestOneSearchISt18_Fwd_list_iteratorIfEPFS1_S1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0497:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	movq	%rsi, %r14
    00000007: 	pushq	%r13
    00000009: 	pushq	%r12
    0000000b: 	movq	%rdx, %r12
    0000000e: 	pushq	%rbp
    0000000f: 	movq	%rdi, %rbp
    00000012: 	pushq	%rbx
    00000013: 	movq	%rdi, %rbx
    00000016: 	subq	$0x58, %rsp
    0000001a: 	movss	DATAat0x34560(%rip), %xmm0
    00000022: 	movq	%rcx, 0x8(%rsp)
    00000027: 	movq	%r8, 0x10(%rsp)
    0000002c: 	movq	%fs:0x28, %rax
    00000035: 	movq	%rax, 0x48(%rsp)
    0000003a: 	xorl	%eax, %eax
    0000003c: 	movq	%rdi, %rax
    0000003f: 	testq	%rdi, %rdi
    00000042: 	je	.Ltmp5479 # Offset: 66
    00000044: 	nopl	(%rax) # Size: 4
.Ltmp5480:
    00000048: 	movq	%rax, %rdx
    0000004b: 	movq	(%rax), %rax
    0000004e: 	movss	%xmm0, 0x8(%rdx)
    00000053: 	testq	%rax, %rax
    00000056: 	jne	.Ltmp5480 # Offset: 86
.Ltmp5479:
    00000058: 	movq	0x10(%rsp), %rsi
    0000005d: 	leaq	0x20(%rsp), %r15
    00000062: 	leaq	DATAat0x34160(%rip), %rdx
    00000069: 	movzbl	%r9b, %r13d
    0000006d: 	movq	%r15, %rdi
    00000070: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 112
    00000075: 	movq	0x8(%rsp), %rcx
    0000007a: 	movl	%r13d, %r9d
    0000007d: 	movq	%r15, %r8
    00000080: 	movq	%r12, %rdx
    00000083: 	movq	%r14, %rsi
    00000086: 	movq	%rbp, %rdi
    00000089: 	callq	"_Z15TestSearchArrayISt18_Fwd_list_iteratorIfEPFS1_S1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1" # Offset: 137
    0000008e: 	movq	0x20(%rsp), %rdi
    00000093: 	leaq	0x30(%rsp), %rax
    00000098: 	movq	%rax, 0x18(%rsp)
    0000009d: 	cmpq	%rax, %rdi
    000000a0: 	je	.Ltmp5481 # Offset: 160
    000000a2: 	movq	0x30(%rsp), %rax
    000000a7: 	leaq	0x1(%rax), %rsi
    000000ab: 	callq	_ZdlPvm@PLT # Offset: 171
.Ltmp5481:
    000000b0: 	cmpq	$0x9, %r12
    000000b4: 	jbe	.Ltmp5482 # Offset: 180
    000000ba: 	movabsq	$-0x3333333333333333, %rdx
    000000c4: 	movq	%r12, %rax
    000000c7: 	mulq	%rdx
    000000ca: 	shrq	$0x3, %rdx
.Ltmp5493:
    000000ce: 	movss	DATAat0x34570(%rip), %xmm1
    000000d6: 	movq	%rbp, %rsi
    000000d9: 	xorl	%ecx, %ecx
    000000db: 	pxor	%xmm0, %xmm0
    000000df: 	cmpq	$0x0, %r12
    000000e3: 	jbe	.Ltmp5483 # Offset: 227
    000000e5: 	nopl	(%rax) # Size: 3
.Ltmp5486:
    000000e8: 	xorl	%eax, %eax
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5485:
    000000f0: 	movq	%rsi, %rdi
    000000f3: 	addq	$0x1, %rax
    000000f7: 	movq	(%rsi), %rsi
    000000fa: 	addq	$0x1, %rcx
    000000fe: 	movss	%xmm0, 0x8(%rdi)
    00000103: 	cmpq	%rdx, %rax
    00000106: 	jae	.Ltmp5484 # Offset: 262
    00000108: 	cmpq	%rcx, %r12
    0000010b: 	ja	.Ltmp5485 # Offset: 267
.Ltmp5484:
    0000010d: 	addss	%xmm1, %xmm0
    00000111: 	cmpq	%rcx, %r12
    00000114: 	ja	.Ltmp5486 # Offset: 276
.Ltmp5483:
    00000116: 	movq	0x10(%rsp), %rsi
    0000011b: 	leaq	DATAat0x3416e(%rip), %rdx
    00000122: 	movq	%r15, %rdi
    00000125: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 293
    0000012a: 	movq	0x8(%rsp), %rcx
    0000012f: 	movl	%r13d, %r9d
    00000132: 	movq	%r15, %r8
    00000135: 	movq	%r12, %rdx
    00000138: 	movq	%r14, %rsi
    0000013b: 	movq	%rbp, %rdi
    0000013e: 	callq	"_Z15TestSearchArrayISt18_Fwd_list_iteratorIfEPFS1_S1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1" # Offset: 318
    00000143: 	movq	0x20(%rsp), %rdi
    00000148: 	cmpq	0x18(%rsp), %rdi
    0000014d: 	je	.Ltmp5487 # Offset: 333
    0000014f: 	movq	0x30(%rsp), %rax
    00000154: 	leaq	0x1(%rax), %rsi
    00000158: 	callq	_ZdlPvm@PLT # Offset: 344
.Ltmp5487:
    0000015d: 	xorl	%edx, %edx
    0000015f: 	testq	%rbp, %rbp
    00000162: 	jne	.Ltmp5488 # Offset: 354
    00000164: 	jmp	.Ltmp5489 # Offset: 356
    00000166: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp5490:
    00000170: 	pxor	%xmm0, %xmm0
    00000174: 	cvtsi2ss	%rax, %xmm0
    00000179: 	movss	%xmm0, 0x8(%rcx)
    0000017e: 	testq	%rbx, %rbx
    00000181: 	je	.Ltmp5489 # Offset: 385
.Ltmp5488:
    00000183: 	movq	%rdx, %rax
    00000186: 	movq	%rbx, %rcx
    00000189: 	addq	$0x1, %rdx
    0000018d: 	movq	(%rbx), %rbx
    00000190: 	testq	%rax, %rax
    00000193: 	jns	.Ltmp5490 # Offset: 403
    00000195: 	movq	%rax, %rsi
    00000198: 	andl	$0x1, %eax
    0000019b: 	pxor	%xmm0, %xmm0
    0000019f: 	shrq	%rsi
    000001a2: 	orq	%rax, %rsi
    000001a5: 	cvtsi2ss	%rsi, %xmm0
    000001aa: 	addss	%xmm0, %xmm0
    000001ae: 	movss	%xmm0, 0x8(%rcx)
    000001b3: 	testq	%rbx, %rbx
    000001b6: 	jne	.Ltmp5488 # Offset: 438
.Ltmp5489:
    000001b8: 	movq	%r14, %rsi
    000001bb: 	movq	%rbp, %rdi
    000001be: 	callq	_Z18quicksort2_forwardISt18_Fwd_list_iteratorIfEEvT_S2_ # Offset: 446
    000001c3: 	movq	0x10(%rsp), %rsi
    000001c8: 	leaq	DATAat0x34184(%rip), %rdx
    000001cf: 	movq	%r15, %rdi
    000001d2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 466
    000001d7: 	movq	0x8(%rsp), %rcx
    000001dc: 	movl	%r13d, %r9d
    000001df: 	movq	%r15, %r8
    000001e2: 	movq	%r12, %rdx
    000001e5: 	movq	%r14, %rsi
    000001e8: 	movq	%rbp, %rdi
    000001eb: 	callq	"_Z15TestSearchArrayISt18_Fwd_list_iteratorIfEPFS1_S1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1" # Offset: 491
    000001f0: 	movq	0x20(%rsp), %rdi
    000001f5: 	cmpq	0x18(%rsp), %rdi
    000001fa: 	je	.Ltmp5491 # Offset: 506
    000001fc: 	movq	0x30(%rsp), %rax
    00000201: 	leaq	0x1(%rax), %rsi
    00000205: 	callq	_ZdlPvm@PLT # Offset: 517
.Ltmp5491:
    0000020a: 	movq	0x48(%rsp), %rax
    0000020f: 	subq	%fs:0x28, %rax
    00000218: 	jne	.Ltmp5492 # Offset: 536
    0000021a: 	addq	$0x58, %rsp
    0000021e: 	popq	%rbx
    0000021f: 	popq	%rbp
    00000220: 	popq	%r12
    00000222: 	popq	%r13
    00000224: 	popq	%r14
    00000226: 	popq	%r15
    00000228: 	retq # Offset: 552
.Ltmp5482:
    00000229: 	testq	%r12, %r12
    0000022c: 	je	.Ltmp5483 # Offset: 556
    00000232: 	movl	$0x1, %edx
    00000237: 	jmp	.Ltmp5493 # Offset: 567
.Ltmp5492:
    0000023c: 	callq	__stack_chk_fail@PLT # Offset: 572
    00000241: 	endbr64
.Ltmp5495:
    00000245: 	movq	%rax, %rbp
    00000248: 	jmp	.Ltmp5494 # Offset: 584
    0000024a: 	endbr64
    0000024e: 	jmp	.Ltmp5495 # Offset: 590
    00000250: 	endbr64
    00000254: 	movq	%rax, %rbp
    00000257: 	movq	0x20(%rsp), %rdi
    0000025c: 	leaq	0x30(%rsp), %rax
    00000261: 	cmpq	%rax, %rdi
    00000264: 	je	.Ltmp5496 # Offset: 612
.Ltmp5497:
    00000266: 	movq	0x30(%rsp), %rax
    0000026b: 	leaq	0x1(%rax), %rsi
    0000026f: 	callq	_ZdlPvm@PLT # Offset: 623
.Ltmp5496:
    00000274: 	movq	%rbp, %rdi
    00000277: 	callq	_Unwind_Resume@PLT # Offset: 631
.Ltmp5494:
    0000027c: 	movq	0x20(%rsp), %rdi
    00000281: 	cmpq	0x18(%rsp), %rdi
    00000286: 	jne	.Ltmp5497 # Offset: 646
    00000288: 	jmp	.Ltmp5496 # Offset: 648
DWARF CFI Instructions:
    <empty>
End of Function "_Z13TestOneSearchISt18_Fwd_list_iteratorIfEPFS1_S1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1(*2)"

Binary Function "_Z23lower_bound_recur_innerISt18_Fwd_list_iteratorIfEflET_S2_T0_T1_" after disassembly {
  Number      : 499
  State       : disassembled
  Address     : 0x30540
  Size        : 0x112
  MaxSize     : 0x120
  Offset      : 0x30540
  Section     : .text
  Orc Section : .local.text._Z23lower_bound_recur_innerISt18_Fwd_list_iteratorIfEflET_S2_T0_T1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0498:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	testq	%rsi, %rsi
    0000000a: 	je	.Ltmp5498 # Offset: 10
    00000010: 	movq	%rsi, %r8
    00000013: 	subq	$0x8, %rsp
    00000017: 	movq	%rdi, %r9
    0000001a: 	shrq	$0x3f, %r8
    0000001e: 	addq	%rsi, %r8
    00000021: 	sarq	%r8
    00000024: 	leaq	-0x1(%r8), %rdx
    00000028: 	je	.Ltmp5499 # Offset: 40
    0000002a: 	movq	%rdi, %rcx
    0000002d: 	nopl	(%rax) # Size: 3
.Ltmp5500:
    00000030: 	movq	(%rcx), %rcx
    00000033: 	subq	$0x1, %rdx
    00000037: 	jae	.Ltmp5500 # Offset: 55
    00000039: 	comiss	0x8(%rcx), %xmm0
    0000003d: 	jbe	.Ltmp5501 # Offset: 61
.Ltmp5511:
    0000003f: 	movq	(%rcx), %rax
    00000042: 	addq	$0x1, %r8
    00000046: 	movq	%rax, %rdi
    00000049: 	subq	%r8, %rsi
    0000004c: 	je	.Ltmp5502 # Offset: 76
    0000004e: 	movq	%rsi, %r8
    00000051: 	shrq	$0x3f, %r8
    00000055: 	addq	%rsi, %r8
    00000058: 	sarq	%r8
    0000005b: 	leaq	-0x1(%r8), %rdx
    0000005f: 	je	.Ltmp5503 # Offset: 95
    00000061: 	nopl	(%rax) # Size: 7
.Ltmp5504:
    00000068: 	movq	(%rax), %rax
    0000006b: 	subq	$0x1, %rdx
    0000006f: 	jae	.Ltmp5504 # Offset: 111
.Ltmp5503:
    00000071: 	comiss	0x8(%rax), %xmm0
    00000075: 	jbe	.Ltmp5505 # Offset: 117
    00000077: 	addq	$0x1, %r8
    0000007b: 	movq	(%rax), %rdi
    0000007e: 	subq	%r8, %rsi
    00000081: 	callq	_Z23lower_bound_recur_innerISt18_Fwd_list_iteratorIfEflET_S2_T0_T1_ # Offset: 129
.Ltmp5502:
    00000086: 	addq	$0x8, %rsp
    0000008a: 	retq # Offset: 138
    0000008b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5498:
    00000090: 	retq # Offset: 144
    00000091: 	nopl	(%rax) # Size: 7
.Ltmp5499:
    00000098: 	comiss	0x8(%rdi), %xmm0
    0000009c: 	ja	.Ltmp5506 # Offset: 156
.Ltmp5510:
    0000009e: 	movq	%r9, %rax
    000000a1: 	addq	$0x8, %rsp
    000000a5: 	retq # Offset: 165
    000000a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp5501:
    000000b0: 	leaq	0x3(%rsi), %rax
    000000b4: 	testq	%rsi, %rsi
    000000b7: 	cmovsq	%rax, %rsi
    000000bb: 	sarq	$0x2, %rsi
    000000bf: 	leaq	-0x1(%rsi), %rax
    000000c3: 	je	.Ltmp5507 # Offset: 195
    000000c5: 	nopl	(%rax) # Size: 3
.Ltmp5508:
    000000c8: 	movq	(%r9), %r9
    000000cb: 	subq	$0x1, %rax
    000000cf: 	jae	.Ltmp5508 # Offset: 207
.Ltmp5507:
    000000d1: 	comiss	0x8(%r9), %xmm0
    000000d6: 	jbe	.Ltmp5509 # Offset: 214
    000000d8: 	leaq	0x1(%rsi), %rax
    000000dc: 	movq	(%r9), %rdi
    000000df: 	movq	%r8, %rsi
    000000e2: 	subq	%rax, %rsi
    000000e5: 	callq	_Z23lower_bound_recur_innerISt18_Fwd_list_iteratorIfEflET_S2_T0_T1_ # Offset: 229
    000000ea: 	movq	%rax, %r9
    000000ed: 	jmp	.Ltmp5510 # Offset: 237
    000000ef: 	nop # Size: 1
.Ltmp5505:
    000000f0: 	movq	%r8, %rsi
    000000f3: 	callq	_Z23lower_bound_recur_innerISt18_Fwd_list_iteratorIfEflET_S2_T0_T1_ # Offset: 243
    000000f8: 	jmp	.Ltmp5502 # Offset: 248
    000000fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5509:
    00000100: 	callq	_Z23lower_bound_recur_innerISt18_Fwd_list_iteratorIfEflET_S2_T0_T1_ # Offset: 256
    00000105: 	movq	%rax, %r9
    00000108: 	jmp	.Ltmp5510 # Offset: 264
.Ltmp5506:
    0000010a: 	movq	%rdi, %rcx
    0000010d: 	jmp	.Ltmp5511 # Offset: 269
DWARF CFI Instructions:
    <empty>
End of Function "_Z23lower_bound_recur_innerISt18_Fwd_list_iteratorIfEflET_S2_T0_T1_"

Binary Function "_Z17lower_bound_recurISt18_Fwd_list_iteratorIfEfET_S2_S2_T0_" after disassembly {
  Number      : 500
  State       : disassembled
  Address     : 0x30660
  Size        : 0x24a
  MaxSize     : 0x250
  Offset      : 0x30660
  Section     : .text
  Orc Section : .local.text._Z17lower_bound_recurISt18_Fwd_list_iteratorIfEfET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0499:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp5512 # Offset: 10
    00000010: 	subq	$0x8, %rsp
    00000014: 	movq	%rdi, %r8
    00000017: 	movq	%rdi, %r9
    0000001a: 	movq	%rdi, %rdx
    0000001d: 	xorl	%eax, %eax
    0000001f: 	nop # Size: 1
.Ltmp5513:
    00000020: 	movq	(%rdx), %rdx
    00000023: 	movq	%rax, %rdi
    00000026: 	addq	$0x1, %rax
    0000002a: 	cmpq	%rsi, %rdx
    0000002d: 	jne	.Ltmp5513 # Offset: 45
    0000002f: 	movq	%rax, %rsi
    00000032: 	sarq	%rsi
    00000035: 	leaq	-0x1(%rsi), %rdx
    00000039: 	je	.Ltmp5514 # Offset: 57
    0000003f: 	movq	%r8, %rcx
    00000042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5515:
    00000048: 	movq	(%rcx), %rcx
    0000004b: 	subq	$0x1, %rdx
    0000004f: 	jae	.Ltmp5515 # Offset: 79
    00000051: 	comiss	0x8(%rcx), %xmm0
    00000055: 	jbe	.Ltmp5516 # Offset: 85
.Ltmp5539:
    0000005b: 	movq	(%rcx), %rax
    0000005e: 	subq	%rsi, %rdi
    00000061: 	je	.Ltmp5517 # Offset: 97
    00000063: 	movq	%rdi, %r8
    00000066: 	shrq	$0x3f, %r8
    0000006a: 	addq	%rdi, %r8
    0000006d: 	sarq	%r8
    00000070: 	leaq	-0x1(%r8), %rdx
    00000074: 	je	.Ltmp5518 # Offset: 116
    0000007a: 	movq	%rax, %rcx
    0000007d: 	nopl	(%rax) # Size: 3
.Ltmp5519:
    00000080: 	movq	(%rcx), %rcx
    00000083: 	subq	$0x1, %rdx
    00000087: 	jae	.Ltmp5519 # Offset: 135
    00000089: 	comiss	0x8(%rcx), %xmm0
    0000008d: 	jbe	.Ltmp5520 # Offset: 141
.Ltmp5538:
    00000093: 	movq	(%rcx), %rax
    00000096: 	addq	$0x1, %r8
    0000009a: 	movq	%rax, %r9
    0000009d: 	subq	%r8, %rdi
    000000a0: 	je	.Ltmp5517 # Offset: 160
    000000a2: 	movq	%rdi, %rsi
    000000a5: 	shrq	$0x3f, %rsi
    000000a9: 	addq	%rdi, %rsi
    000000ac: 	sarq	%rsi
    000000af: 	leaq	-0x1(%rsi), %rdx
    000000b3: 	je	.Ltmp5521 # Offset: 179
    000000b5: 	nopl	(%rax) # Size: 3
.Ltmp5522:
    000000b8: 	movq	(%rax), %rax
    000000bb: 	subq	$0x1, %rdx
    000000bf: 	jae	.Ltmp5522 # Offset: 191
.Ltmp5521:
    000000c1: 	comiss	0x8(%rax), %xmm0
    000000c5: 	jbe	.Ltmp5523 # Offset: 197
    000000cb: 	movq	(%rax), %r9
    000000ce: 	leaq	0x1(%rsi), %rax
    000000d2: 	subq	%rax, %rdi
    000000d5: 	movq	%rdi, %rsi
    000000d8: 	movq	%r9, %rdi
    000000db: 	callq	_Z23lower_bound_recur_innerISt18_Fwd_list_iteratorIfEflET_S2_T0_T1_ # Offset: 219
.Ltmp5517:
    000000e0: 	addq	$0x8, %rsp
    000000e4: 	retq # Offset: 228
    000000e5: 	nopl	(%rax) # Size: 3
.Ltmp5516:
    000000e8: 	movq	%rax, %rdi
    000000eb: 	movq	%r8, %rcx
    000000ee: 	sarq	$0x2, %rdi
    000000f2: 	leaq	-0x1(%rdi), %rdx
    000000f6: 	je	.Ltmp5524 # Offset: 246
    000000fc: 	nopl	(%rax) # Size: 4
.Ltmp5525:
    00000100: 	movq	(%rcx), %rcx
    00000103: 	subq	$0x1, %rdx
    00000107: 	jae	.Ltmp5525 # Offset: 263
    00000109: 	comiss	0x8(%rcx), %xmm0
    0000010d: 	jbe	.Ltmp5526 # Offset: 269
.Ltmp5537:
    00000113: 	movq	(%rcx), %rax
    00000116: 	addq	$0x1, %rdi
    0000011a: 	movq	%rax, %r9
    0000011d: 	subq	%rdi, %rsi
    00000120: 	je	.Ltmp5517 # Offset: 288
    00000122: 	movq	%rsi, %r8
    00000125: 	shrq	$0x3f, %r8
    00000129: 	addq	%rsi, %r8
    0000012c: 	sarq	%r8
    0000012f: 	leaq	-0x1(%r8), %rdx
    00000133: 	je	.Ltmp5527 # Offset: 307
    00000135: 	nopl	(%rax) # Size: 3
.Ltmp5528:
    00000138: 	movq	(%rax), %rax
    0000013b: 	subq	$0x1, %rdx
    0000013f: 	jae	.Ltmp5528 # Offset: 319
.Ltmp5527:
    00000141: 	comiss	0x8(%rax), %xmm0
    00000145: 	jbe	.Ltmp5529 # Offset: 325
    0000014b: 	movq	(%rax), %r9
    0000014e: 	addq	$0x1, %r8
    00000152: 	subq	%r8, %rsi
    00000155: 	movq	%r9, %rdi
    00000158: 	callq	_Z23lower_bound_recur_innerISt18_Fwd_list_iteratorIfEflET_S2_T0_T1_ # Offset: 344
    0000015d: 	jmp	.Ltmp5517 # Offset: 349
    0000015f: 	nop # Size: 1
.Ltmp5512:
    00000160: 	retq # Offset: 352
    00000161: 	nopl	(%rax) # Size: 7
.Ltmp5514:
    00000168: 	comiss	0x8(%r8), %xmm0
    0000016d: 	ja	.Ltmp5530 # Offset: 365
.Ltmp5536:
    00000173: 	movq	%r8, %rax
    00000176: 	jmp	.Ltmp5517 # Offset: 374
.Ltmp5520:
    0000017b: 	testq	%rdi, %rdi
    0000017e: 	leaq	0x3(%rdi), %rsi
    00000182: 	movq	%rax, %r9
    00000185: 	cmovnsq	%rdi, %rsi
    00000189: 	sarq	$0x2, %rsi
    0000018d: 	leaq	-0x1(%rsi), %rdx
    00000191: 	je	.Ltmp5531 # Offset: 401
    00000193: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5532:
    00000198: 	movq	(%rax), %rax
    0000019b: 	subq	$0x1, %rdx
    0000019f: 	jae	.Ltmp5532 # Offset: 415
.Ltmp5531:
    000001a1: 	comiss	0x8(%rax), %xmm0
    000001a5: 	jbe	.Ltmp5523 # Offset: 421
    000001a7: 	movq	(%rax), %r9
    000001aa: 	leaq	0x1(%rsi), %rax
    000001ae: 	movq	%r8, %rsi
    000001b1: 	subq	%rax, %rsi
.Ltmp5523:
    000001b4: 	movq	%r9, %rdi
    000001b7: 	callq	_Z23lower_bound_recur_innerISt18_Fwd_list_iteratorIfEflET_S2_T0_T1_ # Offset: 439
    000001bc: 	jmp	.Ltmp5517 # Offset: 444
.Ltmp5526:
    000001c1: 	sarq	$0x3, %rax
    000001c5: 	leaq	-0x1(%rax), %rdx
    000001c9: 	je	.Ltmp5533 # Offset: 457
    000001cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5534:
    000001d0: 	movq	(%r9), %r9
    000001d3: 	subq	$0x1, %rdx
    000001d7: 	jae	.Ltmp5534 # Offset: 471
.Ltmp5533:
    000001d9: 	comiss	0x8(%r9), %xmm0
    000001de: 	jbe	.Ltmp5535 # Offset: 478
    000001e0: 	movq	(%r9), %r8
    000001e3: 	addq	$0x1, %rax
    000001e7: 	subq	%rax, %rdi
    000001ea: 	movq	%rdi, %rsi
    000001ed: 	movq	%r8, %rdi
    000001f0: 	callq	_Z23lower_bound_recur_innerISt18_Fwd_list_iteratorIfEflET_S2_T0_T1_ # Offset: 496
    000001f5: 	jmp	.Ltmp5517 # Offset: 501
.Ltmp5529:
    000001fa: 	movq	%r8, %rsi
    000001fd: 	movq	%r9, %rdi
    00000200: 	callq	_Z23lower_bound_recur_innerISt18_Fwd_list_iteratorIfEflET_S2_T0_T1_ # Offset: 512
    00000205: 	jmp	.Ltmp5517 # Offset: 517
.Ltmp5535:
    0000020a: 	movq	%rax, %rsi
    0000020d: 	movq	%r8, %rdi
    00000210: 	callq	_Z23lower_bound_recur_innerISt18_Fwd_list_iteratorIfEflET_S2_T0_T1_ # Offset: 528
    00000215: 	jmp	.Ltmp5517 # Offset: 533
.Ltmp5524:
    0000021a: 	comiss	0x8(%r8), %xmm0
    0000021f: 	jbe	.Ltmp5536 # Offset: 543
    00000225: 	jmp	.Ltmp5537 # Offset: 549
    0000022a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5518:
    00000230: 	comiss	0x8(%rax), %xmm0
    00000234: 	jbe	.Ltmp5517 # Offset: 564
    0000023a: 	movq	%rax, %rcx
    0000023d: 	jmp	.Ltmp5538 # Offset: 573
.Ltmp5530:
    00000242: 	movq	%r8, %rcx
    00000245: 	jmp	.Ltmp5539 # Offset: 581
DWARF CFI Instructions:
    <empty>
End of Function "_Z17lower_bound_recurISt18_Fwd_list_iteratorIfEfET_S2_S2_T0_"

Binary Function "_Z23upper_bound_recur_innerISt18_Fwd_list_iteratorIfEflET_S2_T0_T1_" after disassembly {
  Number      : 501
  State       : disassembled
  Address     : 0x308b0
  Size        : 0x114
  MaxSize     : 0x120
  Offset      : 0x308b0
  Section     : .text
  Orc Section : .local.text._Z23upper_bound_recur_innerISt18_Fwd_list_iteratorIfEflET_S2_T0_T1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0500:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %rax
    00000007: 	testq	%rsi, %rsi
    0000000a: 	je	.Ltmp5540 # Offset: 10
    00000010: 	movq	%rsi, %r8
    00000013: 	subq	$0x8, %rsp
    00000017: 	movq	%rdi, %r9
    0000001a: 	shrq	$0x3f, %r8
    0000001e: 	addq	%rsi, %r8
    00000021: 	sarq	%r8
    00000024: 	leaq	-0x1(%r8), %rdx
    00000028: 	je	.Ltmp5541 # Offset: 40
    0000002a: 	movq	%rdi, %rcx
    0000002d: 	nopl	(%rax) # Size: 3
.Ltmp5542:
    00000030: 	movq	(%rcx), %rcx
    00000033: 	subq	$0x1, %rdx
    00000037: 	jae	.Ltmp5542 # Offset: 55
    00000039: 	movss	0x8(%rcx), %xmm1
    0000003e: 	comiss	%xmm0, %xmm1
    00000041: 	ja	.Ltmp5543 # Offset: 65
.Ltmp5553:
    00000043: 	movq	(%rcx), %rax
    00000046: 	addq	$0x1, %r8
    0000004a: 	movq	%rax, %rdi
    0000004d: 	subq	%r8, %rsi
    00000050: 	je	.Ltmp5544 # Offset: 80
    00000052: 	movq	%rsi, %r8
    00000055: 	shrq	$0x3f, %r8
    00000059: 	addq	%rsi, %r8
    0000005c: 	sarq	%r8
    0000005f: 	leaq	-0x1(%r8), %rdx
    00000063: 	je	.Ltmp5545 # Offset: 99
    00000065: 	nopl	(%rax) # Size: 3
.Ltmp5546:
    00000068: 	movq	(%rax), %rax
    0000006b: 	subq	$0x1, %rdx
    0000006f: 	jae	.Ltmp5546 # Offset: 111
.Ltmp5545:
    00000071: 	movss	0x8(%rax), %xmm1
    00000076: 	comiss	%xmm0, %xmm1
    00000079: 	jbe	.Ltmp5547 # Offset: 121
    0000007b: 	movq	%r8, %rsi
    0000007e: 	callq	_Z23upper_bound_recur_innerISt18_Fwd_list_iteratorIfEflET_S2_T0_T1_ # Offset: 126
.Ltmp5544:
    00000083: 	addq	$0x8, %rsp
    00000087: 	retq # Offset: 135
    00000088: 	nopl	(%rax,%rax) # Size: 8
.Ltmp5540:
    00000090: 	retq # Offset: 144
    00000091: 	nopl	(%rax) # Size: 7
.Ltmp5541:
    00000098: 	movss	0x8(%rdi), %xmm1
    0000009d: 	comiss	%xmm0, %xmm1
    000000a0: 	jbe	.Ltmp5548 # Offset: 160
.Ltmp5552:
    000000a2: 	movq	%r9, %rax
    000000a5: 	addq	$0x8, %rsp
    000000a9: 	retq # Offset: 169
    000000aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5543:
    000000b0: 	leaq	0x3(%rsi), %rax
    000000b4: 	testq	%rsi, %rsi
    000000b7: 	cmovsq	%rax, %rsi
    000000bb: 	sarq	$0x2, %rsi
    000000bf: 	leaq	-0x1(%rsi), %rax
    000000c3: 	je	.Ltmp5549 # Offset: 195
    000000c5: 	nopl	(%rax) # Size: 3
.Ltmp5550:
    000000c8: 	movq	(%r9), %r9
    000000cb: 	subq	$0x1, %rax
    000000cf: 	jae	.Ltmp5550 # Offset: 207
.Ltmp5549:
    000000d1: 	movss	0x8(%r9), %xmm1
    000000d7: 	comiss	%xmm0, %xmm1
    000000da: 	ja	.Ltmp5551 # Offset: 218
    000000dc: 	leaq	0x1(%rsi), %rax
    000000e0: 	movq	(%r9), %rdi
    000000e3: 	movq	%r8, %rsi
    000000e6: 	subq	%rax, %rsi
.Ltmp5551:
    000000e9: 	callq	_Z23upper_bound_recur_innerISt18_Fwd_list_iteratorIfEflET_S2_T0_T1_ # Offset: 233
    000000ee: 	movq	%rax, %r9
    000000f1: 	jmp	.Ltmp5552 # Offset: 241
    000000f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5547:
    000000f8: 	addq	$0x1, %r8
    000000fc: 	movq	(%rax), %rdi
    000000ff: 	subq	%r8, %rsi
    00000102: 	callq	_Z23upper_bound_recur_innerISt18_Fwd_list_iteratorIfEflET_S2_T0_T1_ # Offset: 258
    00000107: 	jmp	.Ltmp5544 # Offset: 263
.Ltmp5548:
    0000010c: 	movq	%rdi, %rcx
    0000010f: 	jmp	.Ltmp5553 # Offset: 271
DWARF CFI Instructions:
    <empty>
End of Function "_Z23upper_bound_recur_innerISt18_Fwd_list_iteratorIfEflET_S2_T0_T1_"

Binary Function "_Z17upper_bound_recurISt18_Fwd_list_iteratorIfEfET_S2_S2_T0_" after disassembly {
  Number      : 502
  State       : disassembled
  Address     : 0x309d0
  Size        : 0x28e
  MaxSize     : 0x290
  Offset      : 0x309d0
  Section     : .text
  Orc Section : .local.text._Z17upper_bound_recurISt18_Fwd_list_iteratorIfEfET_S2_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0501:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %rax
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp5554 # Offset: 10
    00000010: 	subq	$0x8, %rsp
    00000014: 	movq	%rdi, %r8
    00000017: 	movq	%rdi, %r9
    0000001a: 	movq	%rdi, %rdx
    0000001d: 	xorl	%eax, %eax
    0000001f: 	nop # Size: 1
.Ltmp5555:
    00000020: 	movq	(%rdx), %rdx
    00000023: 	movq	%rax, %rdi
    00000026: 	addq	$0x1, %rax
    0000002a: 	cmpq	%rsi, %rdx
    0000002d: 	jne	.Ltmp5555 # Offset: 45
    0000002f: 	movq	%rax, %rsi
    00000032: 	sarq	%rsi
    00000035: 	leaq	-0x1(%rsi), %rdx
    00000039: 	je	.Ltmp5556 # Offset: 57
    0000003f: 	movq	%r8, %rcx
    00000042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5557:
    00000048: 	movq	(%rcx), %rcx
    0000004b: 	subq	$0x1, %rdx
    0000004f: 	jae	.Ltmp5557 # Offset: 79
    00000051: 	movss	0x8(%rcx), %xmm1
    00000056: 	comiss	%xmm0, %xmm1
    00000059: 	ja	.Ltmp5558 # Offset: 89
.Ltmp5581:
    0000005f: 	movq	(%rcx), %rax
    00000062: 	subq	%rsi, %rdi
    00000065: 	je	.Ltmp5559 # Offset: 101
    0000006b: 	movq	%rdi, %r8
    0000006e: 	shrq	$0x3f, %r8
    00000072: 	addq	%rdi, %r8
    00000075: 	sarq	%r8
    00000078: 	leaq	-0x1(%r8), %rdx
    0000007c: 	je	.Ltmp5560 # Offset: 124
    00000082: 	movq	%rax, %rcx
    00000085: 	nopl	(%rax) # Size: 3
.Ltmp5561:
    00000088: 	movq	(%rcx), %rcx
    0000008b: 	subq	$0x1, %rdx
    0000008f: 	jae	.Ltmp5561 # Offset: 143
    00000091: 	movss	0x8(%rcx), %xmm1
    00000096: 	comiss	%xmm0, %xmm1
    00000099: 	ja	.Ltmp5562 # Offset: 153
.Ltmp5580:
    0000009f: 	movq	(%rcx), %rax
    000000a2: 	addq	$0x1, %r8
    000000a6: 	movq	%rax, %r9
    000000a9: 	subq	%r8, %rdi
    000000ac: 	je	.Ltmp5559 # Offset: 172
    000000ae: 	movq	%rdi, %rsi
    000000b1: 	shrq	$0x3f, %rsi
    000000b5: 	addq	%rdi, %rsi
    000000b8: 	sarq	%rsi
    000000bb: 	leaq	-0x1(%rsi), %rdx
    000000bf: 	je	.Ltmp5563 # Offset: 191
    000000c1: 	nopl	(%rax) # Size: 7
.Ltmp5564:
    000000c8: 	movq	(%rax), %rax
    000000cb: 	subq	$0x1, %rdx
    000000cf: 	jae	.Ltmp5564 # Offset: 207
.Ltmp5563:
    000000d1: 	movss	0x8(%rax), %xmm1
    000000d6: 	comiss	%xmm0, %xmm1
    000000d9: 	ja	.Ltmp5565 # Offset: 217
    000000db: 	movq	(%rax), %r9
    000000de: 	leaq	0x1(%rsi), %rax
    000000e2: 	subq	%rax, %rdi
    000000e5: 	movq	%rdi, %rsi
.Ltmp5565:
    000000e8: 	movq	%r9, %rdi
    000000eb: 	callq	_Z23upper_bound_recur_innerISt18_Fwd_list_iteratorIfEflET_S2_T0_T1_ # Offset: 235
.Ltmp5559:
    000000f0: 	addq	$0x8, %rsp
    000000f4: 	retq # Offset: 244
    000000f5: 	nopl	(%rax) # Size: 3
.Ltmp5558:
    000000f8: 	movq	%rax, %rdi
    000000fb: 	movq	%r8, %rcx
    000000fe: 	sarq	$0x2, %rdi
    00000102: 	leaq	-0x1(%rdi), %rdx
    00000106: 	je	.Ltmp5566 # Offset: 262
    0000010c: 	nopl	(%rax) # Size: 4
.Ltmp5567:
    00000110: 	movq	(%rcx), %rcx
    00000113: 	subq	$0x1, %rdx
    00000117: 	jae	.Ltmp5567 # Offset: 279
    00000119: 	movss	0x8(%rcx), %xmm1
    0000011e: 	comiss	%xmm0, %xmm1
    00000121: 	ja	.Ltmp5568 # Offset: 289
.Ltmp5579:
    00000127: 	movq	(%rcx), %rax
    0000012a: 	addq	$0x1, %rdi
    0000012e: 	movq	%rax, %r9
    00000131: 	subq	%rdi, %rsi
    00000134: 	je	.Ltmp5559 # Offset: 308
    00000136: 	movq	%rsi, %r8
    00000139: 	shrq	$0x3f, %r8
    0000013d: 	addq	%rsi, %r8
    00000140: 	sarq	%r8
    00000143: 	leaq	-0x1(%r8), %rdx
    00000147: 	je	.Ltmp5569 # Offset: 327
    00000149: 	nopl	(%rax) # Size: 7
.Ltmp5570:
    00000150: 	movq	(%rax), %rax
    00000153: 	subq	$0x1, %rdx
    00000157: 	jae	.Ltmp5570 # Offset: 343
.Ltmp5569:
    00000159: 	movss	0x8(%rax), %xmm1
    0000015e: 	comiss	%xmm0, %xmm1
    00000161: 	jbe	.Ltmp5571 # Offset: 353
    00000167: 	movq	%r8, %rsi
    0000016a: 	movq	%r9, %rdi
    0000016d: 	callq	_Z23upper_bound_recur_innerISt18_Fwd_list_iteratorIfEflET_S2_T0_T1_ # Offset: 365
    00000172: 	jmp	.Ltmp5559 # Offset: 370
    00000177: 	nopw	(%rax,%rax) # Size: 9
.Ltmp5554:
    00000180: 	retq # Offset: 384
    00000181: 	nopl	(%rax) # Size: 7
.Ltmp5556:
    00000188: 	movss	0x8(%r8), %xmm1
    0000018e: 	comiss	%xmm0, %xmm1
    00000191: 	jbe	.Ltmp5572 # Offset: 401
.Ltmp5578:
    00000197: 	movq	%r8, %rax
    0000019a: 	jmp	.Ltmp5559 # Offset: 410
.Ltmp5562:
    0000019f: 	testq	%rdi, %rdi
    000001a2: 	leaq	0x3(%rdi), %rsi
    000001a6: 	movq	%rax, %r9
    000001a9: 	cmovnsq	%rdi, %rsi
    000001ad: 	sarq	$0x2, %rsi
    000001b1: 	leaq	-0x1(%rsi), %rdx
    000001b5: 	je	.Ltmp5573 # Offset: 437
    000001b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp5574:
    000001c0: 	movq	(%rax), %rax
    000001c3: 	subq	$0x1, %rdx
    000001c7: 	jae	.Ltmp5574 # Offset: 455
.Ltmp5573:
    000001c9: 	movss	0x8(%rax), %xmm1
    000001ce: 	comiss	%xmm0, %xmm1
    000001d1: 	ja	.Ltmp5565 # Offset: 465
    000001d7: 	movq	(%rax), %r9
    000001da: 	leaq	0x1(%rsi), %rax
    000001de: 	movq	%r8, %rsi
    000001e1: 	subq	%rax, %rsi
    000001e4: 	movq	%r9, %rdi
    000001e7: 	callq	_Z23upper_bound_recur_innerISt18_Fwd_list_iteratorIfEflET_S2_T0_T1_ # Offset: 487
    000001ec: 	jmp	.Ltmp5559 # Offset: 492
.Ltmp5568:
    000001f1: 	sarq	$0x3, %rax
    000001f5: 	leaq	-0x1(%rax), %rdx
    000001f9: 	je	.Ltmp5575 # Offset: 505
    000001fb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5576:
    00000200: 	movq	(%r9), %r9
    00000203: 	subq	$0x1, %rdx
    00000207: 	jae	.Ltmp5576 # Offset: 519
.Ltmp5575:
    00000209: 	movss	0x8(%r9), %xmm1
    0000020f: 	comiss	%xmm0, %xmm1
    00000212: 	jbe	.Ltmp5577 # Offset: 530
    00000214: 	movq	%rax, %rsi
    00000217: 	movq	%r8, %rdi
    0000021a: 	callq	_Z23upper_bound_recur_innerISt18_Fwd_list_iteratorIfEflET_S2_T0_T1_ # Offset: 538
    0000021f: 	jmp	.Ltmp5559 # Offset: 543
.Ltmp5571:
    00000224: 	movq	(%rax), %r9
    00000227: 	addq	$0x1, %r8
    0000022b: 	subq	%r8, %rsi
    0000022e: 	movq	%r9, %rdi
    00000231: 	callq	_Z23upper_bound_recur_innerISt18_Fwd_list_iteratorIfEflET_S2_T0_T1_ # Offset: 561
    00000236: 	jmp	.Ltmp5559 # Offset: 566
.Ltmp5577:
    0000023b: 	movq	(%r9), %r8
    0000023e: 	addq	$0x1, %rax
    00000242: 	subq	%rax, %rdi
    00000245: 	movq	%rdi, %rsi
    00000248: 	movq	%r8, %rdi
    0000024b: 	callq	_Z23upper_bound_recur_innerISt18_Fwd_list_iteratorIfEflET_S2_T0_T1_ # Offset: 587
    00000250: 	jmp	.Ltmp5559 # Offset: 592
.Ltmp5566:
    00000255: 	movss	0x8(%rcx), %xmm1
    0000025a: 	comiss	%xmm0, %xmm1
    0000025d: 	ja	.Ltmp5578 # Offset: 605
    00000263: 	jmp	.Ltmp5579 # Offset: 611
    00000268: 	nopl	(%rax,%rax) # Size: 8
.Ltmp5560:
    00000270: 	movss	0x8(%rax), %xmm1
    00000275: 	comiss	%xmm0, %xmm1
    00000278: 	ja	.Ltmp5559 # Offset: 632
    0000027e: 	movq	%rax, %rcx
    00000281: 	jmp	.Ltmp5580 # Offset: 641
.Ltmp5572:
    00000286: 	movq	%r8, %rcx
    00000289: 	jmp	.Ltmp5581 # Offset: 649
DWARF CFI Instructions:
    <empty>
End of Function "_Z17upper_bound_recurISt18_Fwd_list_iteratorIfEfET_S2_S2_T0_"

Binary Function "_Z15TestSearchArrayISt18_Fwd_list_iteratorIfEPFbS1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 503
  State       : disassembled
  Address     : 0x30c60
  Size        : 0x1fc
  MaxSize     : 0x200
  Offset      : 0x30c60
  Section     : .text
  Orc Section : .local.text._Z15TestSearchArrayISt18_Fwd_list_iteratorIfEPFbS1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0502:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rcx, %r15
    00000009: 	pushq	%r14
    0000000b: 	movq	%rsi, %r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %r12
    00000015: 	movl	$0x1000, %edi
    0000001a: 	pushq	%rbp
    0000001b: 	pushq	%rbx
    0000001c: 	subq	$0x28, %rsp
    00000020: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000027: 	movq	%rdx, 0x10(%rsp)
    0000002c: 	movq	%r8, 0x18(%rsp)
    00000031: 	movb	%r9b, 0xf(%rsp)
    00000036: 	callq	_Znwm@PLT # Offset: 54
    0000003b: 	movq	%rax, %r13
    0000003e: 	movl	$0x0, (%rax)
    00000044: 	addq	$0x4, %rax
    00000048: 	leaq	0x1000(%r13), %rsi
    0000004f: 	cmpq	%rsi, %rax
    00000052: 	je	.Ltmp5582 # Offset: 82
    00000054: 	leaq	0xc(%r13), %rdi
    00000058: 	movq	$0x0, 0x4(%r13)
    00000060: 	movq	$0x0, 0xff8(%r13)
    0000006b: 	andq	$-0x8, %rdi
    0000006f: 	subq	%rdi, %rax
    00000072: 	movq	%rax, %rcx
    00000075: 	xorl	%eax, %eax
    00000077: 	addl	$0xffc, %ecx
    0000007d: 	shrl	$0x3, %ecx
    00000080: 	rep		stosq	%rax, %es:(%rdi)
.Ltmp5582:
    00000083: 	movabsq	$0x5851f42d4c957f2d, %r8
    0000008d: 	movq	%r13, %rcx
    00000090: 	movabsq	$0x14057b7ef767814f, %rdi
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5585:
    000000a0: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000000a7: 	imulq	%r8, %rax
    000000ab: 	addq	%rdi, %rax
    000000ae: 	movq	%rax, %rdx
    000000b1: 	movq	%rax, %r9
    000000b4: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000000bb: 	shrq	$0x14, %rdx
    000000bf: 	shlq	$0x17, %r9
    000000c3: 	xorq	%r9, %rdx
    000000c6: 	xorq	%rdx, %rax
    000000c9: 	xorl	%edx, %edx
    000000cb: 	divq	0x10(%rsp)
    000000d0: 	testq	%rdx, %rdx
    000000d3: 	leaq	-0x1(%rdx), %rax
    000000d7: 	movq	%r12, %rdx
    000000da: 	je	.Ltmp5583 # Offset: 218
    000000dc: 	nopl	(%rax) # Size: 4
.Ltmp5584:
    000000e0: 	movq	(%rdx), %rdx
    000000e3: 	subq	$0x1, %rax
    000000e7: 	jae	.Ltmp5584 # Offset: 231
.Ltmp5583:
    000000e9: 	movss	0x8(%rdx), %xmm0
    000000ee: 	addq	$0x4, %rcx
    000000f2: 	movss	%xmm0, -0x4(%rcx)
    000000f7: 	cmpq	%rcx, %rsi
    000000fa: 	jne	.Ltmp5585 # Offset: 250
    000000fc: 	callq	clock@PLT # Offset: 252
    00000101: 	xorl	%ebx, %ebx
    00000103: 	xorl	%ebp, %ebp
    00000105: 	movq	%rax, start_time(%rip)
.Ltmp5589:
    0000010c: 	leaq	0xc8(%rbp), %rax
    00000113: 	movq	%rax, (%rsp)
    00000117: 	nopw	(%rax,%rax) # Size: 9
.Ltmp5587:
    00000120: 	movq	%rbp, %rax
    00000123: 	movq	%r14, %rsi
    00000126: 	addq	$0x1, %rbp
    0000012a: 	movq	%r12, %rdi
    0000012d: 	andl	$0x3ff, %eax
    00000132: 	movss	(%r13,%rax,4), %xmm0
    00000139: 	callq	*%r15 # Offset: 313
    0000013c: 	testb	%al, %al
    0000013e: 	jne	.Ltmp5586 # Offset: 318
    00000140: 	cmpb	$0x0, 0xf(%rsp)
    00000145: 	movl	$0x1, %eax
    0000014a: 	cmovel	%eax, %ebx
.Ltmp5586:
    0000014d: 	cmpq	(%rsp), %rbp
    00000151: 	jne	.Ltmp5587 # Offset: 337
    00000153: 	callq	clock@PLT # Offset: 339
    00000158: 	movsd	gMinimumTimeTarget(%rip), %xmm1
    00000160: 	pxor	%xmm0, %xmm0
    00000164: 	movq	%rax, end_time(%rip)
    0000016b: 	subq	start_time(%rip), %rax
    00000172: 	cvtsi2sd	%rax, %xmm0
    00000177: 	divsd	DATAat0x34410(%rip), %xmm0
    0000017f: 	comisd	%xmm0, %xmm1
    00000183: 	jbe	.Ltmp5588 # Offset: 387
    00000185: 	cmpq	$0x5f5e0ff, %rbp
    0000018c: 	jbe	.Ltmp5589 # Offset: 396
.Ltmp5588:
    00000192: 	movq	0x18(%rsp), %rdx
    00000197: 	movq	0x10(%rsp), %rdi
    0000019c: 	movq	%rbp, %rsi
    0000019f: 	callq	_Z13record_resultdmmRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 415
    000001a4: 	testb	%bl, %bl
    000001a6: 	jne	.Ltmp5590 # Offset: 422
.Ltmp5591:
    000001a8: 	addq	$0x28, %rsp
    000001ac: 	movq	%r13, %rdi
    000001af: 	movl	$0x1000, %esi
    000001b4: 	popq	%rbx
    000001b5: 	popq	%rbp
    000001b6: 	popq	%r12
    000001b8: 	popq	%r13
    000001ba: 	popq	%r14
    000001bc: 	popq	%r15
    000001be: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 446
.Ltmp5590:
    000001c3: 	movq	0x18(%rsp), %rax
    000001c8: 	leaq	DATAat0x34137(%rip), %rsi
    000001cf: 	movl	$0x1, %edi
    000001d4: 	movq	(%rax), %rdx
    000001d7: 	xorl	%eax, %eax
    000001d9: 	callq	__printf_chk@PLT # Offset: 473
    000001de: 	jmp	.Ltmp5591 # Offset: 478
    000001e0: 	endbr64
    000001e4: 	movq	%rax, %rbp
    000001e7: 	movq	%r13, %rdi
    000001ea: 	movl	$0x1000, %esi
    000001ef: 	callq	_ZdlPvm@PLT # Offset: 495
    000001f4: 	movq	%rbp, %rdi
    000001f7: 	callq	_Unwind_Resume@PLT # Offset: 503
DWARF CFI Instructions:
    <empty>
End of Function "_Z15TestSearchArrayISt18_Fwd_list_iteratorIfEPFbS1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z13TestOneSearchISt18_Fwd_list_iteratorIfEPFbS1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb" after disassembly {
  Number      : 504
  State       : disassembled
  Address     : 0x30e60
  Size        : 0x28a
  MaxSize     : 0x290
  Offset      : 0x30e60
  Section     : .text
  Orc Section : .local.text._Z13TestOneSearchISt18_Fwd_list_iteratorIfEPFbS1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0503:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdi, %r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rdx, %r12
    00000012: 	pushq	%rbp
    00000013: 	movq	%rsi, %rbp
    00000016: 	pushq	%rbx
    00000017: 	movq	%rdi, %rbx
    0000001a: 	subq	$0x58, %rsp
    0000001e: 	movss	DATAat0x34560(%rip), %xmm0
    00000026: 	movq	%rcx, 0x8(%rsp)
    0000002b: 	movq	%r8, 0x10(%rsp)
    00000030: 	movq	%fs:0x28, %rax
    00000039: 	movq	%rax, 0x48(%rsp)
    0000003e: 	xorl	%eax, %eax
    00000040: 	movq	%rdi, %rax
    00000043: 	cmpq	%rsi, %rdi
    00000046: 	je	.Ltmp5592 # Offset: 70
    00000048: 	nopl	(%rax,%rax) # Size: 8
.Ltmp5593:
    00000050: 	movq	%rax, %rdx
    00000053: 	movq	(%rax), %rax
    00000056: 	movss	%xmm0, 0x8(%rdx)
    0000005b: 	cmpq	%rbp, %rax
    0000005e: 	jne	.Ltmp5593 # Offset: 94
.Ltmp5592:
    00000060: 	movq	0x10(%rsp), %rsi
    00000065: 	leaq	0x20(%rsp), %r15
    0000006a: 	leaq	DATAat0x34160(%rip), %rdx
    00000071: 	movzbl	%r9b, %r14d
    00000075: 	movq	%r15, %rdi
    00000078: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 120
    0000007d: 	movq	0x8(%rsp), %rcx
    00000082: 	movl	%r14d, %r9d
    00000085: 	movq	%r15, %r8
    00000088: 	movq	%r12, %rdx
    0000008b: 	movq	%rbp, %rsi
    0000008e: 	movq	%r13, %rdi
    00000091: 	callq	_Z15TestSearchArrayISt18_Fwd_list_iteratorIfEPFbS1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 145
    00000096: 	movq	0x20(%rsp), %rdi
    0000009b: 	leaq	0x30(%rsp), %rax
    000000a0: 	movq	%rax, 0x18(%rsp)
    000000a5: 	cmpq	%rax, %rdi
    000000a8: 	je	.Ltmp5594 # Offset: 168
    000000aa: 	movq	0x30(%rsp), %rax
    000000af: 	leaq	0x1(%rax), %rsi
    000000b3: 	callq	_ZdlPvm@PLT # Offset: 179
.Ltmp5594:
    000000b8: 	cmpq	$0x9, %r12
    000000bc: 	jbe	.Ltmp5595 # Offset: 188
    000000c2: 	movabsq	$-0x3333333333333333, %rdx
    000000cc: 	movq	%r12, %rax
    000000cf: 	mulq	%rdx
    000000d2: 	shrq	$0x3, %rdx
.Ltmp5606:
    000000d6: 	movss	DATAat0x34570(%rip), %xmm1
    000000de: 	movq	%r13, %rsi
    000000e1: 	xorl	%ecx, %ecx
    000000e3: 	pxor	%xmm0, %xmm0
    000000e7: 	cmpq	$0x0, %r12
    000000eb: 	jbe	.Ltmp5596 # Offset: 235
    000000ed: 	nopl	(%rax) # Size: 3
.Ltmp5599:
    000000f0: 	xorl	%eax, %eax
    000000f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5598:
    000000f8: 	movq	%rsi, %rdi
    000000fb: 	addq	$0x1, %rax
    000000ff: 	movq	(%rsi), %rsi
    00000102: 	addq	$0x1, %rcx
    00000106: 	movss	%xmm0, 0x8(%rdi)
    0000010b: 	cmpq	%rdx, %rax
    0000010e: 	jae	.Ltmp5597 # Offset: 270
    00000110: 	cmpq	%rcx, %r12
    00000113: 	ja	.Ltmp5598 # Offset: 275
.Ltmp5597:
    00000115: 	addss	%xmm1, %xmm0
    00000119: 	cmpq	%rcx, %r12
    0000011c: 	ja	.Ltmp5599 # Offset: 284
.Ltmp5596:
    0000011e: 	movq	0x10(%rsp), %rsi
    00000123: 	leaq	DATAat0x3416e(%rip), %rdx
    0000012a: 	movq	%r15, %rdi
    0000012d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 301
    00000132: 	movq	0x8(%rsp), %rcx
    00000137: 	movl	%r14d, %r9d
    0000013a: 	movq	%r15, %r8
    0000013d: 	movq	%r12, %rdx
    00000140: 	movq	%rbp, %rsi
    00000143: 	movq	%r13, %rdi
    00000146: 	callq	_Z15TestSearchArrayISt18_Fwd_list_iteratorIfEPFbS1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 326
    0000014b: 	movq	0x20(%rsp), %rdi
    00000150: 	cmpq	0x18(%rsp), %rdi
    00000155: 	je	.Ltmp5600 # Offset: 341
    00000157: 	movq	0x30(%rsp), %rax
    0000015c: 	leaq	0x1(%rax), %rsi
    00000160: 	callq	_ZdlPvm@PLT # Offset: 352
.Ltmp5600:
    00000165: 	xorl	%edx, %edx
    00000167: 	cmpq	%rbp, %r13
    0000016a: 	jne	.Ltmp5601 # Offset: 362
    0000016c: 	jmp	.Ltmp5602 # Offset: 364
    0000016e: 	nop # Size: 2
.Ltmp5603:
    00000170: 	pxor	%xmm0, %xmm0
    00000174: 	cvtsi2ss	%rax, %xmm0
    00000179: 	movss	%xmm0, 0x8(%rcx)
    0000017e: 	cmpq	%rbx, %rbp
    00000181: 	je	.Ltmp5602 # Offset: 385
.Ltmp5601:
    00000183: 	movq	%rdx, %rax
    00000186: 	movq	%rbx, %rcx
    00000189: 	addq	$0x1, %rdx
    0000018d: 	movq	(%rbx), %rbx
    00000190: 	testq	%rax, %rax
    00000193: 	jns	.Ltmp5603 # Offset: 403
    00000195: 	movq	%rax, %rsi
    00000198: 	andl	$0x1, %eax
    0000019b: 	pxor	%xmm0, %xmm0
    0000019f: 	shrq	%rsi
    000001a2: 	orq	%rax, %rsi
    000001a5: 	cvtsi2ss	%rsi, %xmm0
    000001aa: 	addss	%xmm0, %xmm0
    000001ae: 	movss	%xmm0, 0x8(%rcx)
    000001b3: 	cmpq	%rbx, %rbp
    000001b6: 	jne	.Ltmp5601 # Offset: 438
.Ltmp5602:
    000001b8: 	movq	%rbp, %rsi
    000001bb: 	movq	%r13, %rdi
    000001be: 	callq	_Z18quicksort2_forwardISt18_Fwd_list_iteratorIfEEvT_S2_ # Offset: 446
    000001c3: 	movq	0x10(%rsp), %rsi
    000001c8: 	leaq	DATAat0x34184(%rip), %rdx
    000001cf: 	movq	%r15, %rdi
    000001d2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 466
    000001d7: 	movq	0x8(%rsp), %rcx
    000001dc: 	movl	%r14d, %r9d
    000001df: 	movq	%r15, %r8
    000001e2: 	movq	%r12, %rdx
    000001e5: 	movq	%rbp, %rsi
    000001e8: 	movq	%r13, %rdi
    000001eb: 	callq	_Z15TestSearchArrayISt18_Fwd_list_iteratorIfEPFbS1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 491
    000001f0: 	movq	0x20(%rsp), %rdi
    000001f5: 	cmpq	0x18(%rsp), %rdi
    000001fa: 	je	.Ltmp5604 # Offset: 506
    000001fc: 	movq	0x30(%rsp), %rax
    00000201: 	leaq	0x1(%rax), %rsi
    00000205: 	callq	_ZdlPvm@PLT # Offset: 517
.Ltmp5604:
    0000020a: 	movq	0x48(%rsp), %rax
    0000020f: 	subq	%fs:0x28, %rax
    00000218: 	jne	.Ltmp5605 # Offset: 536
    0000021a: 	addq	$0x58, %rsp
    0000021e: 	popq	%rbx
    0000021f: 	popq	%rbp
    00000220: 	popq	%r12
    00000222: 	popq	%r13
    00000224: 	popq	%r14
    00000226: 	popq	%r15
    00000228: 	retq # Offset: 552
.Ltmp5595:
    00000229: 	testq	%r12, %r12
    0000022c: 	je	.Ltmp5596 # Offset: 556
    00000232: 	movl	$0x1, %edx
    00000237: 	jmp	.Ltmp5606 # Offset: 567
.Ltmp5605:
    0000023c: 	callq	__stack_chk_fail@PLT # Offset: 572
    00000241: 	endbr64
.Ltmp5608:
    00000245: 	movq	%rax, %rbp
    00000248: 	jmp	.Ltmp5607 # Offset: 584
    0000024a: 	endbr64
    0000024e: 	jmp	.Ltmp5608 # Offset: 590
    00000250: 	endbr64
    00000254: 	movq	%rax, %rbp
    00000257: 	movq	0x20(%rsp), %rdi
    0000025c: 	leaq	0x30(%rsp), %rax
    00000261: 	cmpq	%rax, %rdi
    00000264: 	je	.Ltmp5609 # Offset: 612
.Ltmp5610:
    00000266: 	movq	0x30(%rsp), %rax
    0000026b: 	leaq	0x1(%rax), %rsi
    0000026f: 	callq	_ZdlPvm@PLT # Offset: 623
.Ltmp5609:
    00000274: 	movq	%rbp, %rdi
    00000277: 	callq	_Unwind_Resume@PLT # Offset: 631
.Ltmp5607:
    0000027c: 	movq	0x20(%rsp), %rdi
    00000281: 	cmpq	0x18(%rsp), %rdi
    00000286: 	jne	.Ltmp5610 # Offset: 646
    00000288: 	jmp	.Ltmp5609 # Offset: 648
DWARF CFI Instructions:
    <empty>
End of Function "_Z13TestOneSearchISt18_Fwd_list_iteratorIfEPFbS1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb"

Binary Function "_Z11TestOneTypeIfEvv" after disassembly {
  Number      : 505
  State       : disassembled
  Address     : 0x310f0
  Size        : 0x28b0
  MaxSize     : 0x28b0
  Offset      : 0x310f0
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIfEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0504:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	leaq	DATAat0x34322(%rip), %rsi
    0000000d: 	pushq	%r14
    0000000f: 	pushq	%r13
    00000011: 	movabsq	$0x28f5c28f5c28f5c3, %r13
    0000001b: 	pushq	%r12
    0000001d: 	movl	$0x5, %r12d
    00000023: 	pushq	%rbp
    00000024: 	movabsq	$0x346dc5d63886594b, %rbp
    0000002e: 	pushq	%rbx
    0000002f: 	subq	$0x268, %rsp
    00000036: 	movdqa	DATAat0x344d0(%rip), %xmm0
    0000003e: 	movq	%fs:0x28, %rax
    00000047: 	movq	%rax, 0x258(%rsp)
    0000004f: 	xorl	%eax, %eax
    00000051: 	leaq	0x120(%rsp), %rdi
    00000059: 	movq	$0x30d40, 0x250(%rsp)
    00000065: 	leaq	0x1e8(%rsp), %rbx
    0000006d: 	movaps	%xmm0, 0x1e0(%rsp)
    00000075: 	movdqa	DATAat0x344e0(%rip), %xmm0
    0000007d: 	movaps	%xmm0, 0x1f0(%rsp)
    00000085: 	movdqa	DATAat0x344f0(%rip), %xmm0
    0000008d: 	movaps	%xmm0, 0x200(%rsp)
    00000095: 	movdqa	DATAat0x34500(%rip), %xmm0
    0000009d: 	movaps	%xmm0, 0x210(%rsp)
    000000a5: 	movdqa	DATAat0x34510(%rip), %xmm0
    000000ad: 	movaps	%xmm0, 0x220(%rsp)
    000000b5: 	movdqa	DATAat0x34520(%rip), %xmm0
    000000bd: 	movaps	%xmm0, 0x230(%rsp)
    000000c5: 	movdqa	DATAat0x34530(%rip), %xmm0
    000000cd: 	movaps	%xmm0, 0x240(%rsp)
    000000d5: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1" # Offset: 213
    000000da: 	leaq	0x1e0(%rsp), %rax
    000000e2: 	movq	%rbx, 0x68(%rsp)
    000000e7: 	movq	%rax, 0x88(%rsp)
    000000ef: 	movq	%rax, 0x80(%rsp)
    000000f7: 	leaq	0x258(%rsp), %rax
    000000ff: 	movq	%rax, 0x58(%rsp)
    00000104: 	movq	%rbx, 0x28(%rsp)
    00000109: 	leaq	_ZZNSt8__detail18__to_chars_10_implImEEvPcjT_E8__digits(%rip), %rbx
.Ltmp5638:
    00000110: 	leaq	(,%r12,4), %rax
    00000118: 	movq	%rax, %rdi
    0000011b: 	movq	%rax, 0x60(%rsp)
    00000120: 	callq	_Znam@PLT # Offset: 288
    00000125: 	movq	%rax, 0x30(%rsp)
    0000012a: 	cmpq	$0x9, %r12
    0000012e: 	jbe	.Ltmp5611 # Offset: 302
    00000134: 	cmpq	$0x63, %r12
    00000138: 	jbe	.Ltmp5612 # Offset: 312
    0000013e: 	cmpq	$0x3e7, %r12
    00000145: 	jbe	.Ltmp5613 # Offset: 325
    0000014b: 	cmpq	$0x270f, %r12
    00000152: 	jbe	.Ltmp5614 # Offset: 338
    00000158: 	movq	%r12, %rdx
    0000015b: 	movl	$0x1, %esi
    00000160: 	jmp	.Ltmp5615 # Offset: 352
    00000162: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5619:
    00000168: 	cmpq	$0xf423f, %rcx
    0000016f: 	jbe	.Ltmp5616 # Offset: 367
    00000175: 	cmpq	$0x98967f, %rcx
    0000017c: 	jbe	.Ltmp5617 # Offset: 380
    00000182: 	cmpq	$0x5f5e0ff, %rcx
    00000189: 	jbe	.Ltmp5618 # Offset: 393
.Ltmp5615:
    0000018f: 	movq	%rdx, %rax
    00000192: 	movq	%rdx, %rcx
    00000195: 	mulq	%rbp
    00000198: 	movl	%esi, %eax
    0000019a: 	addl	$0x4, %esi
    0000019d: 	shrq	$0xb, %rdx
    000001a1: 	cmpq	$0x1869f, %rcx
    000001a8: 	ja	.Ltmp5619 # Offset: 424
.Ltmp5643:
    000001aa: 	leaq	0x190(%rsp), %rax
    000001b2: 	leaq	0x180(%rsp), %rdi
    000001ba: 	xorl	%edx, %edx
    000001bc: 	movq	%rdi, 0x40(%rsp)
    000001c1: 	movq	%rax, 0x10(%rsp)
    000001c6: 	movq	%rax, 0x180(%rsp)
    000001ce: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEmc@PLT # Offset: 462
    000001d3: 	movl	0x188(%rsp), %eax
    000001da: 	movq	0x180(%rsp), %rdi
    000001e2: 	movq	%r12, %rcx
    000001e5: 	leal	-0x1(%rax), %esi
    000001e8: 	cmpq	$0x63, %r12
    000001ec: 	jbe	.Ltmp5620 # Offset: 492
    000001ee: 	nop # Size: 2
.Ltmp5621:
    000001f0: 	movq	%rcx, %rdx
    000001f3: 	shrq	$0x2, %rdx
    000001f7: 	movq	%rdx, %rax
    000001fa: 	mulq	%r13
    000001fd: 	movq	%rdx, %r8
    00000200: 	andq	$-0x4, %rdx
    00000204: 	shrq	$0x2, %r8
    00000208: 	addq	%r8, %rdx
    0000020b: 	leaq	(%rdx,%rdx,4), %rax
    0000020f: 	movq	%rcx, %rdx
    00000212: 	shlq	$0x2, %rax
    00000216: 	subq	%rax, %rdx
    00000219: 	movq	%rcx, %rax
    0000021c: 	movq	%r8, %rcx
    0000021f: 	movl	%esi, %r8d
    00000222: 	movzbl	0x1(%rbx,%rdx,2), %r9d
    00000228: 	movzbl	(%rbx,%rdx,2), %edx
    0000022c: 	movb	%r9b, (%rdi,%r8)
    00000230: 	leal	-0x1(%rsi), %r8d
    00000234: 	subl	$0x2, %esi
    00000237: 	movb	%dl, (%rdi,%r8)
    0000023b: 	cmpq	$0x270f, %rax
    00000241: 	ja	.Ltmp5621 # Offset: 577
.Ltmp5620:
    00000243: 	leal	0x30(%rcx), %eax
    00000246: 	cmpq	$0x9, %rcx
    0000024a: 	jbe	.Ltmp5622 # Offset: 586
    0000024c: 	movzbl	0x1(%rbx,%rcx,2), %eax
    00000251: 	movb	%al, 0x1(%rdi)
    00000254: 	movzbl	(%rbx,%rcx,2), %eax
.Ltmp5622:
    00000258: 	movb	%al, (%rdi)
    0000025a: 	movq	0x120(%rsp), %r15
    00000262: 	leaq	0x170(%rsp), %rax
    0000026a: 	movq	0x128(%rsp), %r14
    00000272: 	movq	%rax, 0x8(%rsp)
    00000277: 	movq	%rax, 0x160(%rsp)
    0000027f: 	movq	%r15, %rax
    00000282: 	addq	%r14, %rax
    00000285: 	je	.Ltmp5623 # Offset: 645
    00000287: 	testq	%r15, %r15
    0000028a: 	je	.Ltmp5624 # Offset: 650
.Ltmp5623:
    00000290: 	movq	%r14, 0xd0(%rsp)
    00000298: 	cmpq	$0xf, %r14
    0000029c: 	ja	.Ltmp5625 # Offset: 668
    000002a2: 	cmpq	$0x1, %r14
    000002a6: 	jne	.Ltmp5626 # Offset: 678
    000002ac: 	movzbl	(%r15), %eax
    000002b0: 	movb	%al, 0x170(%rsp)
    000002b7: 	movq	0x8(%rsp), %rax
.Ltmp5640:
    000002bc: 	movq	%r14, 0x168(%rsp)
    000002c4: 	movb	$0x0, (%rax,%r14)
    000002c9: 	movabsq	$0x3fffffffffffffff, %rax
    000002d3: 	cmpq	%rax, 0x168(%rsp)
    000002db: 	je	.Ltmp5627 # Offset: 731
    000002e1: 	leaq	0x160(%rsp), %r15
    000002e9: 	movl	$0x1, %edx
    000002ee: 	leaq	DATAat0x34149(%rip), %rsi
    000002f5: 	movq	%r15, %rdi
    000002f8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 760
    000002fd: 	movq	0x168(%rsp), %r8
    00000305: 	movq	0x188(%rsp), %rdx
    0000030d: 	movl	$0xf, %eax
    00000312: 	movq	0x160(%rsp), %r9
    0000031a: 	movq	%rax, %rdi
    0000031d: 	cmpq	0x8(%rsp), %r9
    00000322: 	cmovneq	0x170(%rsp), %rdi
    0000032b: 	leaq	(%r8,%rdx), %rcx
    0000032f: 	movq	0x180(%rsp), %rsi
    00000337: 	cmpq	%rdi, %rcx
    0000033a: 	jbe	.Ltmp5628 # Offset: 826
    0000033c: 	cmpq	0x10(%rsp), %rsi
    00000341: 	cmovneq	0x190(%rsp), %rax
    0000034a: 	cmpq	%rax, %rcx
    0000034d: 	jbe	.Ltmp5629 # Offset: 845
.Ltmp5628:
    00000353: 	movq	%r15, %rdi
    00000356: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 854
    0000035b: 	leaq	0x1b0(%rsp), %rdi
    00000363: 	leaq	0x10(%rax), %rdx
    00000367: 	movq	%rdi, 0x1a0(%rsp)
    0000036f: 	movq	(%rax), %rcx
    00000372: 	movq	%rdi, 0x20(%rsp)
    00000377: 	cmpq	%rdx, %rcx
    0000037a: 	je	.Ltmp5630 # Offset: 890
.Ltmp5644:
    00000380: 	movq	%rcx, 0x1a0(%rsp)
    00000388: 	movq	0x10(%rax), %rcx
    0000038c: 	movq	%rcx, 0x1b0(%rsp)
.Ltmp5642:
    00000394: 	movq	0x8(%rax), %rcx
    00000398: 	movq	%rcx, 0x1a8(%rsp)
    000003a0: 	movq	$0x0, 0x8(%rax)
    000003a8: 	movb	$0x0, 0x10(%rax)
    000003ac: 	movq	%rdx, (%rax)
    000003af: 	movabsq	$0x3fffffffffffffff, %rax
    000003b9: 	subq	0x1a8(%rsp), %rax
    000003c1: 	cmpq	$0x7, %rax
    000003c5: 	jbe	.Ltmp5631 # Offset: 965
    000003cb: 	leaq	0x1a0(%rsp), %rax
    000003d3: 	movl	$0x8, %edx
    000003d8: 	leaq	DATAat0x3429c(%rip), %rsi
    000003df: 	movq	%rax, %rdi
    000003e2: 	movq	%rax, 0x48(%rsp)
    000003e7: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 999
    000003ec: 	leaq	0x1d0(%rsp), %rdi
    000003f4: 	leaq	0x10(%rax), %rdx
    000003f8: 	movq	%rdi, 0x1c0(%rsp)
    00000400: 	movq	(%rax), %rcx
    00000403: 	movq	%rdi, 0x18(%rsp)
    00000408: 	cmpq	%rdx, %rcx
    0000040b: 	je	.Ltmp5632 # Offset: 1035
    00000411: 	movq	%rcx, 0x1c0(%rsp)
    00000419: 	movq	0x10(%rax), %rcx
    0000041d: 	movq	%rcx, 0x1d0(%rsp)
.Ltmp5641:
    00000425: 	movq	0x8(%rax), %rcx
    00000429: 	movq	0x60(%rsp), %rsi
    0000042e: 	movq	0x30(%rsp), %rdi
    00000433: 	movq	%rcx, 0x1c8(%rsp)
    0000043b: 	leaq	0x1c0(%rsp), %rcx
    00000443: 	movq	%rdx, (%rax)
    00000446: 	addq	%rdi, %rsi
    00000449: 	movq	%r12, %rdx
    0000044c: 	movq	$0x0, 0x8(%rax)
    00000454: 	movb	$0x0, 0x10(%rax)
    00000458: 	movq	%rcx, 0x50(%rsp)
    0000045d: 	callq	_Z16TestOneContainerIPfEvT_S1_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1117
    00000462: 	movq	0x1c0(%rsp), %rdi
    0000046a: 	cmpq	0x18(%rsp), %rdi
    0000046f: 	je	.Ltmp5633 # Offset: 1135
    00000471: 	movq	0x1d0(%rsp), %rax
    00000479: 	leaq	0x1(%rax), %rsi
    0000047d: 	callq	_ZdlPvm@PLT # Offset: 1149
.Ltmp5633:
    00000482: 	movq	0x1a0(%rsp), %rdi
    0000048a: 	cmpq	0x20(%rsp), %rdi
    0000048f: 	je	.Ltmp5634 # Offset: 1167
    00000491: 	movq	0x1b0(%rsp), %rax
    00000499: 	leaq	0x1(%rax), %rsi
    0000049d: 	callq	_ZdlPvm@PLT # Offset: 1181
.Ltmp5634:
    000004a2: 	movq	0x160(%rsp), %rdi
    000004aa: 	cmpq	0x8(%rsp), %rdi
    000004af: 	je	.Ltmp5635 # Offset: 1199
    000004b1: 	movq	0x170(%rsp), %rax
    000004b9: 	leaq	0x1(%rax), %rsi
    000004bd: 	callq	_ZdlPvm@PLT # Offset: 1213
.Ltmp5635:
    000004c2: 	movq	0x180(%rsp), %rdi
    000004ca: 	cmpq	0x10(%rsp), %rdi
    000004cf: 	je	.Ltmp5636 # Offset: 1231
    000004d1: 	movq	0x190(%rsp), %rax
    000004d9: 	leaq	0x1(%rax), %rsi
    000004dd: 	callq	_ZdlPvm@PLT # Offset: 1245
.Ltmp5636:
    000004e2: 	movq	0x30(%rsp), %rdi
    000004e7: 	movl	$0x4, %esi
    000004ec: 	callq	_ZdlPvm@PLT # Offset: 1260
    000004f1: 	movq	0x58(%rsp), %rdi
    000004f6: 	cmpq	%rdi, 0x28(%rsp)
    000004fb: 	je	.Ltmp5637 # Offset: 1275
    00000501: 	addq	$0x8, 0x28(%rsp)
    00000507: 	movq	0x28(%rsp), %rax
    0000050c: 	movq	-0x8(%rax), %r12
    00000510: 	movabsq	$0x1ffffffffffffffe, %rax
    0000051a: 	cmpq	%rax, %r12
    0000051d: 	jbe	.Ltmp5638 # Offset: 1309
    00000523: 	callq	__cxa_throw_bad_array_new_length@PLT # Offset: 1315
    00000528: 	nopl	(%rax,%rax) # Size: 8
.Ltmp5626:
    00000530: 	testq	%r14, %r14
    00000533: 	jne	.Ltmp5639 # Offset: 1331
    00000539: 	movq	0x8(%rsp), %rax
    0000053e: 	jmp	.Ltmp5640 # Offset: 1342
    00000543: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5625:
    00000548: 	leaq	0xd0(%rsp), %rax
    00000550: 	leaq	0x160(%rsp), %rdi
    00000558: 	xorl	%edx, %edx
    0000055a: 	movq	%rax, %rsi
    0000055d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1373
    00000562: 	movq	%rax, 0x160(%rsp)
    0000056a: 	movq	%rax, %rdi
    0000056d: 	movq	0xd0(%rsp), %rax
    00000575: 	movq	%rax, 0x170(%rsp)
.Ltmp5814:
    0000057d: 	movq	%r14, %rdx
    00000580: 	movq	%r15, %rsi
    00000583: 	callq	memcpy@PLT # Offset: 1411
    00000588: 	movq	0xd0(%rsp), %r14
    00000590: 	movq	0x160(%rsp), %rax
    00000598: 	jmp	.Ltmp5640 # Offset: 1432
    0000059d: 	nopl	(%rax) # Size: 3
.Ltmp5632:
    000005a0: 	movdqu	0x10(%rax), %xmm4
    000005a5: 	movaps	%xmm4, 0x1d0(%rsp)
    000005ad: 	jmp	.Ltmp5641 # Offset: 1453
.Ltmp5630:
    000005b2: 	movdqu	0x10(%rax), %xmm5
    000005b7: 	movaps	%xmm5, 0x1b0(%rsp)
    000005bf: 	jmp	.Ltmp5642 # Offset: 1471
.Ltmp5616:
    000005c4: 	leal	0x5(%rax), %esi
    000005c7: 	jmp	.Ltmp5643 # Offset: 1479
.Ltmp5629:
    000005cc: 	movq	0x40(%rsp), %rdi
    000005d1: 	movq	%r9, %rcx
    000005d4: 	xorl	%edx, %edx
    000005d6: 	xorl	%esi, %esi
    000005d8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@PLT # Offset: 1496
    000005dd: 	leaq	0x1b0(%rsp), %rsi
    000005e5: 	leaq	0x10(%rax), %rdx
    000005e9: 	movq	%rsi, 0x1a0(%rsp)
    000005f1: 	movq	(%rax), %rcx
    000005f4: 	movq	%rsi, 0x20(%rsp)
    000005f9: 	cmpq	%rdx, %rcx
    000005fc: 	jne	.Ltmp5644 # Offset: 1532
    00000602: 	movdqu	0x10(%rax), %xmm6
    00000607: 	movaps	%xmm6, 0x1b0(%rsp)
    0000060f: 	jmp	.Ltmp5642 # Offset: 1551
.Ltmp5617:
    00000614: 	leal	0x6(%rax), %esi
    00000617: 	jmp	.Ltmp5643 # Offset: 1559
.Ltmp5618:
    0000061c: 	leal	0x7(%rax), %esi
    0000061f: 	jmp	.Ltmp5643 # Offset: 1567
.Ltmp5637:
    00000624: 	movq	0x68(%rsp), %rax
    00000629: 	movl	$0x5, %r12d
    0000062f: 	movabsq	$0x346dc5d63886594b, %rbp
    00000639: 	leaq	_ZZNSt8__detail18__to_chars_10_implImEEvPcjT_E8__digits(%rip), %rbx
    00000640: 	movabsq	$0x28f5c28f5c28f5c3, %r13
    0000064a: 	movq	%rax, 0x30(%rsp)
    0000064f: 	nop # Size: 1
.Ltmp5675:
    00000650: 	leaq	(,%r12,4), %r14
    00000658: 	testq	%r12, %r12
    0000065b: 	je	.Ltmp5645 # Offset: 1627
    00000661: 	movq	%r14, %rdi
    00000664: 	callq	_Znwm@PLT # Offset: 1636
    00000669: 	leaq	(%rax,%r14), %rsi
    0000066d: 	leaq	0x4(%rax), %rdi
    00000671: 	movq	%rax, 0x28(%rsp)
    00000676: 	movq	%rsi, 0x70(%rsp)
    0000067b: 	movl	$0x0, (%rax)
    00000681: 	movq	%rdi, 0x60(%rsp)
    00000686: 	cmpq	$0x1, %r12
    0000068a: 	je	.Ltmp5646 # Offset: 1674
    00000690: 	cmpq	%rdi, %rsi
    00000693: 	je	.Ltmp5647 # Offset: 1683
    00000695: 	xorl	%esi, %esi
    00000697: 	leaq	-0x4(%r14), %rdx
    0000069b: 	callq	memset@PLT # Offset: 1691
    000006a0: 	movq	0x70(%rsp), %rsi
    000006a5: 	movq	%rsi, 0x60(%rsp)
.Ltmp5647:
    000006aa: 	cmpq	$0x9, %r12
    000006ae: 	jbe	.Ltmp5646 # Offset: 1710
    000006b4: 	cmpq	$0x63, %r12
    000006b8: 	jbe	.Ltmp5648 # Offset: 1720
    000006be: 	cmpq	$0x3e7, %r12
    000006c5: 	jbe	.Ltmp5649 # Offset: 1733
    000006cb: 	cmpq	$0x270f, %r12
    000006d2: 	jbe	.Ltmp5650 # Offset: 1746
    000006d8: 	movq	%r12, %rdx
    000006db: 	movl	$0x1, %esi
    000006e0: 	jmp	.Ltmp5651 # Offset: 1760
    000006e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5655:
    000006e8: 	cmpq	$0xf423f, %rcx
    000006ef: 	jbe	.Ltmp5652 # Offset: 1775
    000006f5: 	cmpq	$0x98967f, %rcx
    000006fc: 	jbe	.Ltmp5653 # Offset: 1788
    00000702: 	cmpq	$0x5f5e0ff, %rcx
    00000709: 	jbe	.Ltmp5654 # Offset: 1801
.Ltmp5651:
    0000070f: 	movq	%rdx, %rax
    00000712: 	movq	%rdx, %rcx
    00000715: 	mulq	%rbp
    00000718: 	movl	%esi, %eax
    0000071a: 	addl	$0x4, %esi
    0000071d: 	shrq	$0xb, %rdx
    00000721: 	cmpq	$0x1869f, %rcx
    00000728: 	ja	.Ltmp5655 # Offset: 1832
.Ltmp5676:
    0000072a: 	movq	0x10(%rsp), %rax
    0000072f: 	movq	0x40(%rsp), %rdi
    00000734: 	xorl	%edx, %edx
    00000736: 	movq	%rax, 0x180(%rsp)
    0000073e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEmc@PLT # Offset: 1854
    00000743: 	movl	0x188(%rsp), %eax
    0000074a: 	movq	0x180(%rsp), %rdi
    00000752: 	movq	%r12, %rcx
    00000755: 	leal	-0x1(%rax), %esi
    00000758: 	cmpq	$0x63, %r12
    0000075c: 	jbe	.Ltmp5656 # Offset: 1884
    0000075e: 	nop # Size: 2
.Ltmp5657:
    00000760: 	movq	%rcx, %rdx
    00000763: 	shrq	$0x2, %rdx
    00000767: 	movq	%rdx, %rax
    0000076a: 	mulq	%r13
    0000076d: 	movq	%rdx, %r8
    00000770: 	andq	$-0x4, %rdx
    00000774: 	shrq	$0x2, %r8
    00000778: 	addq	%r8, %rdx
    0000077b: 	leaq	(%rdx,%rdx,4), %rax
    0000077f: 	movq	%rcx, %rdx
    00000782: 	shlq	$0x2, %rax
    00000786: 	subq	%rax, %rdx
    00000789: 	movq	%rcx, %rax
    0000078c: 	movq	%r8, %rcx
    0000078f: 	movl	%esi, %r8d
    00000792: 	movzbl	0x1(%rbx,%rdx,2), %r9d
    00000798: 	movzbl	(%rbx,%rdx,2), %edx
    0000079c: 	movb	%r9b, (%rdi,%r8)
    000007a0: 	leal	-0x1(%rsi), %r8d
    000007a4: 	subl	$0x2, %esi
    000007a7: 	movb	%dl, (%rdi,%r8)
    000007ab: 	cmpq	$0x270f, %rax
    000007b1: 	ja	.Ltmp5657 # Offset: 1969
.Ltmp5656:
    000007b3: 	leal	0x30(%rcx), %eax
    000007b6: 	cmpq	$0x9, %rcx
    000007ba: 	jbe	.Ltmp5658 # Offset: 1978
    000007bc: 	movzbl	0x1(%rbx,%rcx,2), %eax
    000007c1: 	movb	%al, 0x1(%rdi)
    000007c4: 	movzbl	(%rbx,%rcx,2), %eax
.Ltmp5658:
    000007c8: 	movb	%al, (%rdi)
    000007ca: 	movq	0x8(%rsp), %rax
    000007cf: 	movq	0x128(%rsp), %r14
    000007d7: 	movq	%rax, 0x160(%rsp)
    000007df: 	movq	0x120(%rsp), %rax
    000007e7: 	movq	%rax, %rdi
    000007ea: 	movq	%rax, 0x78(%rsp)
    000007ef: 	addq	%r14, %rdi
    000007f2: 	je	.Ltmp5659 # Offset: 2034
    000007f4: 	testq	%rax, %rax
    000007f7: 	je	.Ltmp5660 # Offset: 2039
.Ltmp5659:
    000007fd: 	movq	%r14, 0xd0(%rsp)
    00000805: 	cmpq	$0xf, %r14
    00000809: 	ja	.Ltmp5661 # Offset: 2057
    0000080f: 	cmpq	$0x1, %r14
    00000813: 	jne	.Ltmp5662 # Offset: 2067
    00000819: 	movq	0x78(%rsp), %rax
    0000081e: 	movzbl	(%rax), %eax
    00000821: 	movb	%al, 0x170(%rsp)
    00000828: 	movq	0x8(%rsp), %rax
.Ltmp5678:
    0000082d: 	movq	%r14, 0x168(%rsp)
    00000835: 	movb	$0x0, (%rax,%r14)
    0000083a: 	movabsq	$0x3fffffffffffffff, %rax
    00000844: 	cmpq	%rax, 0x168(%rsp)
    0000084c: 	je	.Ltmp5663 # Offset: 2124
    00000852: 	movl	$0x1, %edx
    00000857: 	leaq	DATAat0x34149(%rip), %rsi
    0000085e: 	movq	%r15, %rdi
    00000861: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2145
    00000866: 	movq	0x168(%rsp), %r8
    0000086e: 	movq	0x188(%rsp), %rdx
    00000876: 	movl	$0xf, %eax
    0000087b: 	movq	0x160(%rsp), %r9
    00000883: 	movq	%rax, %rdi
    00000886: 	cmpq	0x8(%rsp), %r9
    0000088b: 	cmovneq	0x170(%rsp), %rdi
    00000894: 	leaq	(%r8,%rdx), %rcx
    00000898: 	movq	0x180(%rsp), %rsi
    000008a0: 	cmpq	%rdi, %rcx
    000008a3: 	jbe	.Ltmp5664 # Offset: 2211
    000008a5: 	cmpq	0x10(%rsp), %rsi
    000008aa: 	cmovneq	0x190(%rsp), %rax
    000008b3: 	cmpq	%rax, %rcx
    000008b6: 	jbe	.Ltmp5665 # Offset: 2230
.Ltmp5664:
    000008bc: 	movq	%r15, %rdi
    000008bf: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2239
    000008c4: 	movq	0x20(%rsp), %rsi
    000008c9: 	leaq	0x10(%rax), %rdx
    000008cd: 	movq	%rsi, 0x1a0(%rsp)
    000008d5: 	movq	(%rax), %rcx
    000008d8: 	cmpq	%rdx, %rcx
    000008db: 	je	.Ltmp5666 # Offset: 2267
.Ltmp5681:
    000008e1: 	movq	%rcx, 0x1a0(%rsp)
    000008e9: 	movq	0x10(%rax), %rcx
    000008ed: 	movq	%rcx, 0x1b0(%rsp)
.Ltmp5680:
    000008f5: 	movq	0x8(%rax), %rcx
    000008f9: 	movq	%rcx, 0x1a8(%rsp)
    00000901: 	movq	$0x0, 0x8(%rax)
    00000909: 	movb	$0x0, 0x10(%rax)
    0000090d: 	movq	%rdx, (%rax)
    00000910: 	movabsq	$0x3fffffffffffffff, %rax
    0000091a: 	subq	0x1a8(%rsp), %rax
    00000922: 	cmpq	$0xb, %rax
    00000926: 	jbe	.Ltmp5667 # Offset: 2342
    0000092c: 	movq	0x48(%rsp), %rdi
    00000931: 	movl	$0xc, %edx
    00000936: 	leaq	DATAat0x342a5(%rip), %rsi
    0000093d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2365
    00000942: 	movq	0x18(%rsp), %rsi
    00000947: 	leaq	0x10(%rax), %rdx
    0000094b: 	movq	%rsi, 0x1c0(%rsp)
    00000953: 	movq	(%rax), %rcx
    00000956: 	cmpq	%rdx, %rcx
    00000959: 	je	.Ltmp5668 # Offset: 2393
    0000095f: 	movq	%rcx, 0x1c0(%rsp)
    00000967: 	movq	0x10(%rax), %rcx
    0000096b: 	movq	%rcx, 0x1d0(%rsp)
.Ltmp5679:
    00000973: 	movq	0x8(%rax), %rcx
    00000977: 	movq	0x60(%rsp), %rsi
    0000097c: 	movq	0x28(%rsp), %rdi
    00000981: 	movq	%rcx, 0x1c8(%rsp)
    00000989: 	movq	0x50(%rsp), %rcx
    0000098e: 	movq	%rdx, (%rax)
    00000991: 	movq	%r12, %rdx
    00000994: 	movq	$0x0, 0x8(%rax)
    0000099c: 	movb	$0x0, 0x10(%rax)
    000009a0: 	callq	_Z16TestOneContainerIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2464
    000009a5: 	movq	0x1c0(%rsp), %rdi
    000009ad: 	cmpq	0x18(%rsp), %rdi
    000009b2: 	je	.Ltmp5669 # Offset: 2482
    000009b4: 	movq	0x1d0(%rsp), %rax
    000009bc: 	leaq	0x1(%rax), %rsi
    000009c0: 	callq	_ZdlPvm@PLT # Offset: 2496
.Ltmp5669:
    000009c5: 	movq	0x1a0(%rsp), %rdi
    000009cd: 	cmpq	0x20(%rsp), %rdi
    000009d2: 	je	.Ltmp5670 # Offset: 2514
    000009d4: 	movq	0x1b0(%rsp), %rax
    000009dc: 	leaq	0x1(%rax), %rsi
    000009e0: 	callq	_ZdlPvm@PLT # Offset: 2528
.Ltmp5670:
    000009e5: 	movq	0x160(%rsp), %rdi
    000009ed: 	cmpq	0x8(%rsp), %rdi
    000009f2: 	je	.Ltmp5671 # Offset: 2546
    000009f4: 	movq	0x170(%rsp), %rax
    000009fc: 	leaq	0x1(%rax), %rsi
    00000a00: 	callq	_ZdlPvm@PLT # Offset: 2560
.Ltmp5671:
    00000a05: 	movq	0x180(%rsp), %rdi
    00000a0d: 	cmpq	0x10(%rsp), %rdi
    00000a12: 	je	.Ltmp5672 # Offset: 2578
    00000a14: 	movq	0x190(%rsp), %rax
    00000a1c: 	leaq	0x1(%rax), %rsi
    00000a20: 	callq	_ZdlPvm@PLT # Offset: 2592
.Ltmp5672:
    00000a25: 	movq	0x28(%rsp), %rdi
    00000a2a: 	testq	%rdi, %rdi
    00000a2d: 	je	.Ltmp5673 # Offset: 2605
    00000a2f: 	movq	0x70(%rsp), %rsi
    00000a34: 	subq	%rdi, %rsi
    00000a37: 	callq	_ZdlPvm@PLT # Offset: 2615
.Ltmp5673:
    00000a3c: 	movq	0x58(%rsp), %rdi
    00000a41: 	cmpq	%rdi, 0x30(%rsp)
    00000a46: 	je	.Ltmp5674 # Offset: 2630
    00000a4c: 	movq	0x30(%rsp), %rax
    00000a51: 	movq	(%rax), %r12
    00000a54: 	addq	$0x8, %rax
    00000a58: 	movq	%rax, 0x30(%rsp)
    00000a5d: 	movq	%r12, %rax
    00000a60: 	shrq	$0x3d, %rax
    00000a64: 	je	.Ltmp5675 # Offset: 2660
    00000a6a: 	leaq	DATAat0x342e0(%rip), %rdi
    00000a71: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 2673
    00000a76: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp5645:
    00000a80: 	movq	$0x0, 0x70(%rsp)
    00000a89: 	movq	$0x0, 0x28(%rsp)
    00000a92: 	movq	$0x0, 0x60(%rsp)
.Ltmp5646:
    00000a9b: 	movl	$0x1, %esi
    00000aa0: 	jmp	.Ltmp5676 # Offset: 2720
    00000aa5: 	nopl	(%rax) # Size: 3
.Ltmp5662:
    00000aa8: 	testq	%r14, %r14
    00000aab: 	jne	.Ltmp5677 # Offset: 2731
    00000ab1: 	movq	0x8(%rsp), %rax
    00000ab6: 	jmp	.Ltmp5678 # Offset: 2742
.Ltmp5661:
    00000abb: 	leaq	0xd0(%rsp), %rax
    00000ac3: 	xorl	%edx, %edx
    00000ac5: 	movq	%r15, %rdi
    00000ac8: 	movq	%rax, %rsi
    00000acb: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 2763
    00000ad0: 	movq	%rax, 0x160(%rsp)
    00000ad8: 	movq	%rax, %rdi
    00000adb: 	movq	0xd0(%rsp), %rax
    00000ae3: 	movq	%rax, 0x170(%rsp)
.Ltmp5813:
    00000aeb: 	movq	0x78(%rsp), %rsi
    00000af0: 	movq	%r14, %rdx
    00000af3: 	callq	memcpy@PLT # Offset: 2803
    00000af8: 	movq	0xd0(%rsp), %r14
    00000b00: 	movq	0x160(%rsp), %rax
    00000b08: 	jmp	.Ltmp5678 # Offset: 2824
.Ltmp5668:
    00000b0d: 	movdqu	0x10(%rax), %xmm6
    00000b12: 	movaps	%xmm6, 0x1d0(%rsp)
    00000b1a: 	jmp	.Ltmp5679 # Offset: 2842
.Ltmp5666:
    00000b1f: 	movdqu	0x10(%rax), %xmm6
    00000b24: 	movaps	%xmm6, 0x1b0(%rsp)
    00000b2c: 	jmp	.Ltmp5680 # Offset: 2860
.Ltmp5652:
    00000b31: 	leal	0x5(%rax), %esi
    00000b34: 	jmp	.Ltmp5676 # Offset: 2868
.Ltmp5665:
    00000b39: 	movq	0x40(%rsp), %rdi
    00000b3e: 	movq	%r9, %rcx
    00000b41: 	xorl	%edx, %edx
    00000b43: 	xorl	%esi, %esi
    00000b45: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@PLT # Offset: 2885
    00000b4a: 	movq	0x20(%rsp), %rdi
    00000b4f: 	leaq	0x10(%rax), %rdx
    00000b53: 	movq	%rdi, 0x1a0(%rsp)
    00000b5b: 	movq	(%rax), %rcx
    00000b5e: 	cmpq	%rdx, %rcx
    00000b61: 	jne	.Ltmp5681 # Offset: 2913
    00000b67: 	movdqu	0x10(%rax), %xmm4
    00000b6c: 	movaps	%xmm4, 0x1b0(%rsp)
    00000b74: 	jmp	.Ltmp5680 # Offset: 2932
.Ltmp5653:
    00000b79: 	leal	0x6(%rax), %esi
    00000b7c: 	jmp	.Ltmp5676 # Offset: 2940
.Ltmp5654:
    00000b81: 	leal	0x7(%rax), %esi
    00000b84: 	jmp	.Ltmp5676 # Offset: 2948
.Ltmp5674:
    00000b89: 	leaq	0xd0(%rsp), %rax
    00000b91: 	movl	$0x5, %r13d
    00000b97: 	leaq	_ZZNSt8__detail18__to_chars_10_implImEEvPcjT_E8__digits(%rip), %r12
    00000b9e: 	movq	%rax, 0x60(%rsp)
    00000ba3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5715:
    00000ba8: 	movq	0x60(%rsp), %rdi
    00000bad: 	pxor	%xmm0, %xmm0
    00000bb1: 	movq	%r13, %rsi
    00000bb4: 	movq	$0x0, 0xd0(%rsp)
    00000bc0: 	movq	$0x0, 0xd8(%rsp)
    00000bcc: 	movaps	%xmm0, 0xe0(%rsp)
    00000bd4: 	movaps	%xmm0, 0xf0(%rsp)
    00000bdc: 	movaps	%xmm0, 0x100(%rsp)
    00000be4: 	movaps	%xmm0, 0x110(%rsp)
    00000bec: 	callq	_ZNSt11_Deque_baseIfSaIfEE17_M_initialize_mapEm # Offset: 3052
    00000bf1: 	movq	0xf8(%rsp), %rbx
    00000bf9: 	movq	0x118(%rsp), %rbp
    00000c01: 	xorl	%eax, %eax
    00000c03: 	movq	%rbx, %rsi
    00000c06: 	cmpq	%rbp, %rbx
    00000c09: 	jae	.Ltmp5682 # Offset: 3081
    00000c0b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5683:
    00000c10: 	movq	(%rsi), %rdx
    00000c13: 	addq	$0x8, %rsi
    00000c17: 	leaq	0xc(%rdx), %rdi
    00000c1b: 	movl	$0x0, (%rdx)
    00000c21: 	andq	$-0x8, %rdi
    00000c25: 	movq	$0x0, 0x4(%rdx)
    00000c2d: 	movq	$0x0, 0x1f8(%rdx)
    00000c38: 	subl	%edi, %edx
    00000c3a: 	leal	0x200(%rdx), %ecx
    00000c40: 	shrl	$0x3, %ecx
    00000c43: 	rep		stosq	%rax, %es:(%rdi)
    00000c46: 	cmpq	%rbp, %rsi
    00000c49: 	jb	.Ltmp5683 # Offset: 3145
.Ltmp5682:
    00000c4b: 	movq	0x100(%rsp), %rax
    00000c53: 	movq	0x108(%rsp), %rdi
    00000c5b: 	movq	%rax, 0x28(%rsp)
    00000c60: 	movq	%rdi, 0x30(%rsp)
    00000c65: 	cmpq	%rdi, %rax
    00000c68: 	je	.Ltmp5684 # Offset: 3176
    00000c6a: 	movq	0x28(%rsp), %rsi
    00000c6f: 	movl	$0x0, (%rdi)
    00000c75: 	movq	%rdi, %rax
    00000c78: 	leaq	0x4(%rdi), %rdi
    00000c7c: 	cmpq	%rdi, %rsi
    00000c7f: 	je	.Ltmp5684 # Offset: 3199
    00000c81: 	leaq	-0x4(%rsi), %rdx
    00000c85: 	xorl	%esi, %esi
    00000c87: 	subq	%rax, %rdx
    00000c8a: 	callq	memset@PLT # Offset: 3210
.Ltmp5684:
    00000c8f: 	cmpq	$0x9, %r13
    00000c93: 	jbe	.Ltmp5685 # Offset: 3219
    00000c99: 	cmpq	$0x63, %r13
    00000c9d: 	jbe	.Ltmp5686 # Offset: 3229
    00000ca3: 	cmpq	$0x3e7, %r13
    00000caa: 	jbe	.Ltmp5687 # Offset: 3242
    00000cb0: 	cmpq	$0x270f, %r13
    00000cb7: 	jbe	.Ltmp5688 # Offset: 3255
    00000cbd: 	movq	%r13, %rdx
    00000cc0: 	movl	$0x1, %esi
    00000cc5: 	jmp	.Ltmp5689 # Offset: 3269
    00000cc7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp5693:
    00000cd0: 	cmpq	$0xf423f, %rcx
    00000cd7: 	jbe	.Ltmp5690 # Offset: 3287
    00000cdd: 	cmpq	$0x98967f, %rcx
    00000ce4: 	jbe	.Ltmp5691 # Offset: 3300
    00000cea: 	cmpq	$0x5f5e0ff, %rcx
    00000cf1: 	jbe	.Ltmp5692 # Offset: 3313
.Ltmp5689:
    00000cf7: 	movabsq	$0x346dc5d63886594b, %rax
    00000d01: 	movq	%rdx, %rcx
    00000d04: 	mulq	%rdx
    00000d07: 	movl	%esi, %eax
    00000d09: 	addl	$0x4, %esi
    00000d0c: 	shrq	$0xb, %rdx
    00000d10: 	cmpq	$0x1869f, %rcx
    00000d17: 	ja	.Ltmp5693 # Offset: 3351
.Ltmp5720:
    00000d19: 	movq	0x10(%rsp), %rax
    00000d1e: 	movq	0x40(%rsp), %rdi
    00000d23: 	xorl	%edx, %edx
    00000d25: 	movq	%rax, 0x180(%rsp)
    00000d2d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEmc@PLT # Offset: 3373
    00000d32: 	movl	0x188(%rsp), %eax
    00000d39: 	movq	0x180(%rsp), %rdi
    00000d41: 	movq	%r13, %rcx
    00000d44: 	leal	-0x1(%rax), %esi
    00000d47: 	cmpq	$0x63, %r13
    00000d4b: 	jbe	.Ltmp5694 # Offset: 3403
    00000d4d: 	nopl	(%rax) # Size: 3
.Ltmp5695:
    00000d50: 	movabsq	$0x28f5c28f5c28f5c3, %rax
    00000d5a: 	movq	%rcx, %rdx
    00000d5d: 	shrq	$0x2, %rdx
    00000d61: 	mulq	%rdx
    00000d64: 	movq	%rdx, %r8
    00000d67: 	andq	$-0x4, %rdx
    00000d6b: 	shrq	$0x2, %r8
    00000d6f: 	addq	%r8, %rdx
    00000d72: 	leaq	(%rdx,%rdx,4), %rax
    00000d76: 	movq	%rcx, %rdx
    00000d79: 	shlq	$0x2, %rax
    00000d7d: 	subq	%rax, %rdx
    00000d80: 	movq	%rcx, %rax
    00000d83: 	movq	%r8, %rcx
    00000d86: 	movl	%esi, %r8d
    00000d89: 	movzbl	0x1(%r12,%rdx,2), %r9d
    00000d8f: 	movzbl	(%r12,%rdx,2), %edx
    00000d94: 	movb	%r9b, (%rdi,%r8)
    00000d98: 	leal	-0x1(%rsi), %r8d
    00000d9c: 	subl	$0x2, %esi
    00000d9f: 	movb	%dl, (%rdi,%r8)
    00000da3: 	cmpq	$0x270f, %rax
    00000da9: 	ja	.Ltmp5695 # Offset: 3497
.Ltmp5694:
    00000dab: 	leal	0x30(%rcx), %eax
    00000dae: 	cmpq	$0x9, %rcx
    00000db2: 	jbe	.Ltmp5696 # Offset: 3506
    00000db4: 	movzbl	0x1(%r12,%rcx,2), %eax
    00000dba: 	movb	%al, 0x1(%rdi)
    00000dbd: 	movzbl	(%r12,%rcx,2), %eax
.Ltmp5696:
    00000dc2: 	movb	%al, (%rdi)
    00000dc4: 	movq	0x8(%rsp), %rax
    00000dc9: 	movq	0x128(%rsp), %r14
    00000dd1: 	movq	%rax, 0x160(%rsp)
    00000dd9: 	movq	0x120(%rsp), %rax
    00000de1: 	movq	%rax, %rdi
    00000de4: 	movq	%rax, 0x70(%rsp)
    00000de9: 	addq	%r14, %rdi
    00000dec: 	je	.Ltmp5697 # Offset: 3564
    00000dee: 	testq	%rax, %rax
    00000df1: 	je	.Ltmp5698 # Offset: 3569
.Ltmp5697:
    00000df7: 	movq	%r14, 0xb0(%rsp)
    00000dff: 	cmpq	$0xf, %r14
    00000e03: 	ja	.Ltmp5699 # Offset: 3587
    00000e09: 	cmpq	$0x1, %r14
    00000e0d: 	jne	.Ltmp5700 # Offset: 3597
    00000e13: 	movq	0x70(%rsp), %rax
    00000e18: 	movzbl	(%rax), %eax
    00000e1b: 	movb	%al, 0x170(%rsp)
    00000e22: 	movq	0x8(%rsp), %rax
.Ltmp5717:
    00000e27: 	movq	%r14, 0x168(%rsp)
    00000e2f: 	movb	$0x0, (%rax,%r14)
    00000e34: 	movabsq	$0x3fffffffffffffff, %rax
    00000e3e: 	cmpq	%rax, 0x168(%rsp)
    00000e46: 	je	.Ltmp5701 # Offset: 3654
    00000e4c: 	movl	$0x1, %edx
    00000e51: 	leaq	DATAat0x34149(%rip), %rsi
    00000e58: 	movq	%r15, %rdi
    00000e5b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3675
    00000e60: 	movq	0x168(%rsp), %r8
    00000e68: 	movq	0x188(%rsp), %rdx
    00000e70: 	movl	$0xf, %eax
    00000e75: 	movq	0x160(%rsp), %r9
    00000e7d: 	movq	%rax, %rdi
    00000e80: 	cmpq	0x8(%rsp), %r9
    00000e85: 	cmovneq	0x170(%rsp), %rdi
    00000e8e: 	leaq	(%r8,%rdx), %rcx
    00000e92: 	movq	0x180(%rsp), %rsi
    00000e9a: 	cmpq	%rdi, %rcx
    00000e9d: 	jbe	.Ltmp5702 # Offset: 3741
    00000e9f: 	cmpq	0x10(%rsp), %rsi
    00000ea4: 	cmovneq	0x190(%rsp), %rax
    00000ead: 	cmpq	%rax, %rcx
    00000eb0: 	jbe	.Ltmp5703 # Offset: 3760
.Ltmp5702:
    00000eb6: 	movq	%r15, %rdi
    00000eb9: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3769
    00000ebe: 	movq	0x20(%rsp), %rdi
    00000ec3: 	leaq	0x10(%rax), %rdx
    00000ec7: 	movq	%rdi, 0x1a0(%rsp)
    00000ecf: 	movq	(%rax), %rcx
    00000ed2: 	cmpq	%rdx, %rcx
    00000ed5: 	je	.Ltmp5704 # Offset: 3797
.Ltmp5721:
    00000edb: 	movq	%rcx, 0x1a0(%rsp)
    00000ee3: 	movq	0x10(%rax), %rcx
    00000ee7: 	movq	%rcx, 0x1b0(%rsp)
.Ltmp5719:
    00000eef: 	movq	0x8(%rax), %rcx
    00000ef3: 	movq	%rcx, 0x1a8(%rsp)
    00000efb: 	movq	$0x0, 0x8(%rax)
    00000f03: 	movb	$0x0, 0x10(%rax)
    00000f07: 	movq	%rdx, (%rax)
    00000f0a: 	movabsq	$0x3fffffffffffffff, %rax
    00000f14: 	subq	0x1a8(%rsp), %rax
    00000f1c: 	cmpq	$0xa, %rax
    00000f20: 	jbe	.Ltmp5705 # Offset: 3872
    00000f26: 	movq	0x48(%rsp), %rdi
    00000f2b: 	movl	$0xb, %edx
    00000f30: 	leaq	DATAat0x342b2(%rip), %rsi
    00000f37: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3895
    00000f3c: 	movq	0x18(%rsp), %rdi
    00000f41: 	movq	0x28(%rsp), %xmm0
    00000f47: 	leaq	0x10(%rax), %rdx
    00000f4b: 	movq	%rdi, 0x1c0(%rsp)
    00000f53: 	movq	(%rax), %rcx
    00000f56: 	movhps	0x30(%rsp), %xmm0
    00000f5b: 	cmpq	%rdx, %rcx
    00000f5e: 	je	.Ltmp5706 # Offset: 3934
    00000f64: 	movq	%rcx, 0x1c0(%rsp)
    00000f6c: 	movq	0x10(%rax), %rcx
    00000f70: 	movq	%rcx, 0x1d0(%rsp)
.Ltmp5718:
    00000f78: 	movq	0x8(%rax), %rcx
    00000f7c: 	movq	%rbp, %xmm2
    00000f81: 	movq	%rbx, %xmm3
    00000f86: 	leaq	0xb0(%rsp), %r14
    00000f8e: 	leaq	0x90(%rsp), %rdi
    00000f96: 	movq	%r14, %rsi
    00000f99: 	movq	%rcx, 0x1c8(%rsp)
    00000fa1: 	movq	0x50(%rsp), %rcx
    00000fa6: 	movb	$0x0, 0x10(%rax)
    00000faa: 	movq	0x110(%rsp), %xmm1
    00000fb3: 	movq	%rdx, (%rax)
    00000fb6: 	movq	%r13, %rdx
    00000fb9: 	punpcklqdq	%xmm2, %xmm1
    00000fbd: 	movq	$0x0, 0x8(%rax)
    00000fc5: 	movaps	%xmm0, 0xb0(%rsp)
    00000fcd: 	movq	0xf0(%rsp), %xmm0
    00000fd6: 	movaps	%xmm1, 0xc0(%rsp)
    00000fde: 	movq	0xe0(%rsp), %xmm1
    00000fe7: 	punpcklqdq	%xmm3, %xmm0
    00000feb: 	movhps	0xe8(%rsp), %xmm1
    00000ff3: 	movaps	%xmm0, 0xa0(%rsp)
    00000ffb: 	movaps	%xmm1, 0x90(%rsp)
    00001003: 	callq	_Z16TestOneContainerISt15_Deque_iteratorIfRfPfEEvT_S4_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4099
    00001008: 	movq	0x1c0(%rsp), %rdi
    00001010: 	cmpq	0x18(%rsp), %rdi
    00001015: 	je	.Ltmp5707 # Offset: 4117
    00001017: 	movq	0x1d0(%rsp), %rax
    0000101f: 	leaq	0x1(%rax), %rsi
    00001023: 	callq	_ZdlPvm@PLT # Offset: 4131
.Ltmp5707:
    00001028: 	movq	0x1a0(%rsp), %rdi
    00001030: 	cmpq	0x20(%rsp), %rdi
    00001035: 	je	.Ltmp5708 # Offset: 4149
    00001037: 	movq	0x1b0(%rsp), %rax
    0000103f: 	leaq	0x1(%rax), %rsi
    00001043: 	callq	_ZdlPvm@PLT # Offset: 4163
.Ltmp5708:
    00001048: 	movq	0x160(%rsp), %rdi
    00001050: 	cmpq	0x8(%rsp), %rdi
    00001055: 	je	.Ltmp5709 # Offset: 4181
    00001057: 	movq	0x170(%rsp), %rax
    0000105f: 	leaq	0x1(%rax), %rsi
    00001063: 	callq	_ZdlPvm@PLT # Offset: 4195
.Ltmp5709:
    00001068: 	movq	0x180(%rsp), %rdi
    00001070: 	cmpq	0x10(%rsp), %rdi
    00001075: 	je	.Ltmp5710 # Offset: 4213
    00001077: 	movq	0x190(%rsp), %rax
    0000107f: 	leaq	0x1(%rax), %rsi
    00001083: 	callq	_ZdlPvm@PLT # Offset: 4227
.Ltmp5710:
    00001088: 	movq	0xd0(%rsp), %r13
    00001090: 	testq	%r13, %r13
    00001093: 	je	.Ltmp5711 # Offset: 4243
    00001095: 	addq	$0x8, %rbp
    00001099: 	cmpq	%rbp, %rbx
    0000109c: 	jae	.Ltmp5712 # Offset: 4252
    0000109e: 	nop # Size: 2
.Ltmp5713:
    000010a0: 	movq	(%rbx), %rdi
    000010a3: 	movl	$0x200, %esi
    000010a8: 	addq	$0x8, %rbx
    000010ac: 	callq	_ZdlPvm@PLT # Offset: 4268
    000010b1: 	cmpq	%rbx, %rbp
    000010b4: 	ja	.Ltmp5713 # Offset: 4276
.Ltmp5712:
    000010b6: 	movq	0xd8(%rsp), %rax
    000010be: 	movq	%r13, %rdi
    000010c1: 	leaq	(,%rax,8), %rsi
    000010c9: 	callq	_ZdlPvm@PLT # Offset: 4297
.Ltmp5711:
    000010ce: 	movq	0x58(%rsp), %rbx
    000010d3: 	cmpq	%rbx, 0x68(%rsp)
    000010d8: 	je	.Ltmp5714 # Offset: 4312
    000010de: 	movq	0x68(%rsp), %rax
    000010e3: 	movq	(%rax), %r13
    000010e6: 	addq	$0x8, %rax
    000010ea: 	movq	%rax, 0x68(%rsp)
    000010ef: 	movq	%r13, %rax
    000010f2: 	shrq	$0x3d, %rax
    000010f6: 	je	.Ltmp5715 # Offset: 4342
    000010fc: 	leaq	DATAat0x34038(%rip), %rdi
    00001103: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 4355
    00001108: 	nopl	(%rax,%rax) # Size: 8
.Ltmp5700:
    00001110: 	testq	%r14, %r14
    00001113: 	jne	.Ltmp5716 # Offset: 4371
    00001119: 	movq	0x8(%rsp), %rax
    0000111e: 	jmp	.Ltmp5717 # Offset: 4382
.Ltmp5699:
    00001123: 	leaq	0xb0(%rsp), %rsi
    0000112b: 	xorl	%edx, %edx
    0000112d: 	movq	%r15, %rdi
    00001130: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 4400
    00001135: 	movq	%rax, 0x160(%rsp)
    0000113d: 	movq	%rax, %rdi
    00001140: 	movq	0xb0(%rsp), %rax
    00001148: 	movq	%rax, 0x170(%rsp)
.Ltmp5815:
    00001150: 	movq	0x70(%rsp), %rsi
    00001155: 	movq	%r14, %rdx
    00001158: 	callq	memcpy@PLT # Offset: 4440
    0000115d: 	movq	0xb0(%rsp), %r14
    00001165: 	movq	0x160(%rsp), %rax
    0000116d: 	jmp	.Ltmp5717 # Offset: 4461
.Ltmp5706:
    00001172: 	movdqu	0x10(%rax), %xmm7
    00001177: 	movaps	%xmm7, 0x1d0(%rsp)
    0000117f: 	jmp	.Ltmp5718 # Offset: 4479
.Ltmp5704:
    00001184: 	movdqu	0x10(%rax), %xmm7
    00001189: 	movaps	%xmm7, 0x1b0(%rsp)
    00001191: 	jmp	.Ltmp5719 # Offset: 4497
.Ltmp5690:
    00001196: 	leal	0x5(%rax), %esi
    00001199: 	jmp	.Ltmp5720 # Offset: 4505
.Ltmp5691:
    0000119e: 	leal	0x6(%rax), %esi
    000011a1: 	jmp	.Ltmp5720 # Offset: 4513
.Ltmp5703:
    000011a6: 	movq	0x40(%rsp), %rdi
    000011ab: 	movq	%r9, %rcx
    000011ae: 	xorl	%edx, %edx
    000011b0: 	xorl	%esi, %esi
    000011b2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@PLT # Offset: 4530
    000011b7: 	movq	0x20(%rsp), %rdi
    000011bc: 	leaq	0x10(%rax), %rdx
    000011c0: 	movq	%rdi, 0x1a0(%rsp)
    000011c8: 	movq	(%rax), %rcx
    000011cb: 	cmpq	%rdx, %rcx
    000011ce: 	jne	.Ltmp5721 # Offset: 4558
    000011d4: 	movdqu	0x10(%rax), %xmm5
    000011d9: 	movaps	%xmm5, 0x1b0(%rsp)
    000011e1: 	jmp	.Ltmp5719 # Offset: 4577
.Ltmp5692:
    000011e6: 	leal	0x7(%rax), %esi
    000011e9: 	jmp	.Ltmp5720 # Offset: 4585
.Ltmp5714:
    000011ee: 	movq	0x88(%rsp), %rax
    000011f6: 	movq	0x60(%rsp), %xmm5
    000011fc: 	leaq	_ZZNSt8__detail18__to_chars_10_implImEEvPcjT_E8__digits(%rip), %rbp
    00001203: 	movq	%rax, 0x28(%rsp)
    00001208: 	punpcklqdq	%xmm5, %xmm5
    0000120c: 	movaps	%xmm5, 0x30(%rsp)
.Ltmp5753:
    00001211: 	movq	0x28(%rsp), %rax
    00001216: 	movdqa	0x30(%rsp), %xmm7
    0000121c: 	movq	$0x0, 0xe0(%rsp)
    00001228: 	movq	(%rax), %r12
    0000122b: 	movaps	%xmm7, 0xd0(%rsp)
    00001233: 	movq	%r12, %rbx
    00001236: 	testq	%r12, %r12
    00001239: 	je	.Ltmp5722 # Offset: 4665
    0000123f: 	nop # Size: 1
.Ltmp5723:
    00001240: 	movl	$0x18, %edi
    00001245: 	callq	_Znwm@PLT # Offset: 4677
    0000124a: 	movl	$0x0, 0x10(%rax)
    00001251: 	movq	0x60(%rsp), %rsi
    00001256: 	movq	%rax, %rdi
    00001259: 	callq	_ZNSt8__detail15_List_node_base7_M_hookEPS0_@PLT # Offset: 4697
    0000125e: 	addq	$0x1, 0xe0(%rsp)
    00001267: 	subq	$0x1, %rbx
    0000126b: 	jne	.Ltmp5723 # Offset: 4715
    0000126d: 	cmpq	$0x9, %r12
    00001271: 	jbe	.Ltmp5722 # Offset: 4721
    00001277: 	cmpq	$0x63, %r12
    0000127b: 	jbe	.Ltmp5724 # Offset: 4731
    00001281: 	cmpq	$0x3e7, %r12
    00001288: 	jbe	.Ltmp5725 # Offset: 4744
    0000128e: 	cmpq	$0x270f, %r12
    00001295: 	jbe	.Ltmp5726 # Offset: 4757
    0000129b: 	movq	%r12, %rdx
    0000129e: 	movl	$0x1, %esi
    000012a3: 	jmp	.Ltmp5727 # Offset: 4771
    000012a5: 	nopl	(%rax) # Size: 3
.Ltmp5731:
    000012a8: 	cmpq	$0xf423f, %rcx
    000012af: 	jbe	.Ltmp5728 # Offset: 4783
    000012b5: 	cmpq	$0x98967f, %rcx
    000012bc: 	jbe	.Ltmp5729 # Offset: 4796
    000012c2: 	cmpq	$0x5f5e0ff, %rcx
    000012c9: 	jbe	.Ltmp5730 # Offset: 4809
.Ltmp5727:
    000012cf: 	movabsq	$0x346dc5d63886594b, %rax
    000012d9: 	movq	%rdx, %rcx
    000012dc: 	mulq	%rdx
    000012df: 	movl	%esi, %eax
    000012e1: 	addl	$0x4, %esi
    000012e4: 	shrq	$0xb, %rdx
    000012e8: 	cmpq	$0x1869f, %rcx
    000012ef: 	ja	.Ltmp5731 # Offset: 4847
.Ltmp5772:
    000012f1: 	movq	0x10(%rsp), %rax
    000012f6: 	movq	0x40(%rsp), %rdi
    000012fb: 	xorl	%edx, %edx
    000012fd: 	movq	%rax, 0x180(%rsp)
    00001305: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEmc@PLT # Offset: 4869
    0000130a: 	movl	0x188(%rsp), %eax
    00001311: 	movq	0x180(%rsp), %rdi
    00001319: 	movq	%r12, %rcx
    0000131c: 	leal	-0x1(%rax), %esi
    0000131f: 	cmpq	$0x63, %r12
    00001323: 	jbe	.Ltmp5732 # Offset: 4899
    00001325: 	nopl	(%rax) # Size: 3
.Ltmp5733:
    00001328: 	movabsq	$0x28f5c28f5c28f5c3, %rax
    00001332: 	movq	%rcx, %rdx
    00001335: 	shrq	$0x2, %rdx
    00001339: 	mulq	%rdx
    0000133c: 	movq	%rdx, %r8
    0000133f: 	andq	$-0x4, %rdx
    00001343: 	shrq	$0x2, %r8
    00001347: 	leaq	(%rdx,%r8), %rax
    0000134b: 	movq	%rcx, %rdx
    0000134e: 	leaq	(%rax,%rax,4), %rax
    00001352: 	shlq	$0x2, %rax
    00001356: 	subq	%rax, %rdx
    00001359: 	movq	%rcx, %rax
    0000135c: 	movq	%r8, %rcx
    0000135f: 	movl	%esi, %r8d
    00001362: 	movzbl	0x1(%rbp,%rdx,2), %r9d
    00001368: 	movzbl	(%rbp,%rdx,2), %edx
    0000136d: 	movb	%r9b, (%rdi,%r8)
    00001371: 	leal	-0x1(%rsi), %r8d
    00001375: 	subl	$0x2, %esi
    00001378: 	movb	%dl, (%rdi,%r8)
    0000137c: 	cmpq	$0x270f, %rax
    00001382: 	ja	.Ltmp5733 # Offset: 4994
.Ltmp5732:
    00001384: 	leal	0x30(%rcx), %eax
    00001387: 	cmpq	$0x9, %rcx
    0000138b: 	jbe	.Ltmp5734 # Offset: 5003
    0000138d: 	movzbl	0x1(%rbp,%rcx,2), %eax
    00001392: 	movb	%al, 0x1(%rdi)
    00001395: 	movzbl	(%rbp,%rcx,2), %eax
.Ltmp5734:
    0000139a: 	movb	%al, (%rdi)
    0000139c: 	movq	0x8(%rsp), %rax
    000013a1: 	movq	0x120(%rsp), %rbx
    000013a9: 	movq	0x128(%rsp), %r13
    000013b1: 	movq	%rax, 0x160(%rsp)
    000013b9: 	movq	%rbx, %rax
    000013bc: 	addq	%r13, %rax
    000013bf: 	je	.Ltmp5735 # Offset: 5055
    000013c1: 	testq	%rbx, %rbx
    000013c4: 	je	.Ltmp5736 # Offset: 5060
.Ltmp5735:
    000013ca: 	movq	%r13, 0xb0(%rsp)
    000013d2: 	cmpq	$0xf, %r13
    000013d6: 	ja	.Ltmp5737 # Offset: 5078
    000013dc: 	cmpq	$0x1, %r13
    000013e0: 	jne	.Ltmp5738 # Offset: 5088
    000013e2: 	movzbl	(%rbx), %eax
    000013e5: 	movb	%al, 0x170(%rsp)
    000013ec: 	movq	0x8(%rsp), %rax
    000013f1: 	jmp	.Ltmp5739 # Offset: 5105
.Ltmp5612:
    000013f3: 	movl	$0x2, %esi
    000013f8: 	jmp	.Ltmp5643 # Offset: 5112
.Ltmp5611:
    000013fd: 	movl	$0x1, %esi
    00001402: 	jmp	.Ltmp5643 # Offset: 5122
.Ltmp5613:
    00001407: 	movl	$0x3, %esi
    0000140c: 	jmp	.Ltmp5643 # Offset: 5132
.Ltmp5614:
    00001411: 	movl	$0x4, %esi
    00001416: 	jmp	.Ltmp5643 # Offset: 5142
.Ltmp5687:
    0000141b: 	movl	$0x3, %esi
    00001420: 	jmp	.Ltmp5720 # Offset: 5152
.Ltmp5686:
    00001425: 	movl	$0x2, %esi
    0000142a: 	jmp	.Ltmp5720 # Offset: 5162
.Ltmp5685:
    0000142f: 	movl	$0x1, %esi
    00001434: 	jmp	.Ltmp5720 # Offset: 5172
.Ltmp5648:
    00001439: 	movl	$0x2, %esi
    0000143e: 	jmp	.Ltmp5676 # Offset: 5182
.Ltmp5738:
    00001443: 	testq	%r13, %r13
    00001446: 	jne	.Ltmp5740 # Offset: 5190
    0000144c: 	movq	0x8(%rsp), %rax
.Ltmp5739:
    00001451: 	movq	%r13, 0x168(%rsp)
    00001459: 	movb	$0x0, (%rax,%r13)
    0000145e: 	movabsq	$0x3fffffffffffffff, %rax
    00001468: 	cmpq	%rax, 0x168(%rsp)
    00001470: 	je	.Ltmp5741 # Offset: 5232
    00001476: 	movl	$0x1, %edx
    0000147b: 	leaq	DATAat0x34149(%rip), %rsi
    00001482: 	movq	%r15, %rdi
    00001485: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5253
    0000148a: 	movq	0x168(%rsp), %r8
    00001492: 	movq	0x188(%rsp), %rdx
    0000149a: 	movl	$0xf, %eax
    0000149f: 	movq	0x160(%rsp), %rcx
    000014a7: 	movq	%rax, %r9
    000014aa: 	cmpq	0x8(%rsp), %rcx
    000014af: 	cmovneq	0x170(%rsp), %r9
    000014b8: 	leaq	(%r8,%rdx), %rdi
    000014bc: 	movq	0x180(%rsp), %rsi
    000014c4: 	cmpq	%r9, %rdi
    000014c7: 	jbe	.Ltmp5742 # Offset: 5319
    000014c9: 	cmpq	0x10(%rsp), %rsi
    000014ce: 	cmovneq	0x190(%rsp), %rax
    000014d7: 	cmpq	%rax, %rdi
    000014da: 	jbe	.Ltmp5743 # Offset: 5338
.Ltmp5742:
    000014e0: 	movq	%r15, %rdi
    000014e3: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5347
    000014e8: 	movq	0x20(%rsp), %rbx
    000014ed: 	leaq	0x10(%rax), %rdx
    000014f1: 	movq	%rbx, 0x1a0(%rsp)
    000014f9: 	movq	(%rax), %rcx
    000014fc: 	cmpq	%rdx, %rcx
    000014ff: 	je	.Ltmp5744 # Offset: 5375
.Ltmp5771:
    00001505: 	movq	%rcx, 0x1a0(%rsp)
    0000150d: 	movq	0x10(%rax), %rcx
    00001511: 	movq	%rcx, 0x1b0(%rsp)
.Ltmp5770:
    00001519: 	movq	0x8(%rax), %rcx
    0000151d: 	movq	%rcx, 0x1a8(%rsp)
    00001525: 	movq	$0x0, 0x8(%rax)
    0000152d: 	movb	$0x0, 0x10(%rax)
    00001531: 	movq	%rdx, (%rax)
    00001534: 	movabsq	$0x3fffffffffffffff, %rax
    0000153e: 	subq	0x1a8(%rsp), %rax
    00001546: 	cmpq	$0x9, %rax
    0000154a: 	jbe	.Ltmp5745 # Offset: 5450
    00001550: 	movq	0x48(%rsp), %rdi
    00001555: 	movl	$0xa, %edx
    0000155a: 	leaq	DATAat0x342be(%rip), %rsi
    00001561: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5473
    00001566: 	movq	0x18(%rsp), %rbx
    0000156b: 	leaq	0x10(%rax), %rdx
    0000156f: 	movq	%rbx, 0x1c0(%rsp)
    00001577: 	movq	(%rax), %rcx
    0000157a: 	cmpq	%rdx, %rcx
    0000157d: 	je	.Ltmp5746 # Offset: 5501
    00001583: 	movq	%rcx, 0x1c0(%rsp)
    0000158b: 	movq	0x10(%rax), %rcx
    0000158f: 	movq	%rcx, 0x1d0(%rsp)
.Ltmp5769:
    00001597: 	movq	0x8(%rax), %rcx
    0000159b: 	movq	0x60(%rsp), %rsi
    000015a0: 	movq	%rcx, 0x1c8(%rsp)
    000015a8: 	movq	0x50(%rsp), %rcx
    000015ad: 	movq	%rdx, (%rax)
    000015b0: 	movq	%r12, %rdx
    000015b3: 	movb	$0x0, 0x10(%rax)
    000015b7: 	movq	0xd0(%rsp), %rdi
    000015bf: 	movq	$0x0, 0x8(%rax)
    000015c7: 	callq	_Z16TestOneContainerISt14_List_iteratorIfEEvT_S2_mNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 5575
    000015cc: 	movq	0x1c0(%rsp), %rdi
    000015d4: 	cmpq	0x18(%rsp), %rdi
    000015d9: 	je	.Ltmp5747 # Offset: 5593
    000015db: 	movq	0x1d0(%rsp), %rax
    000015e3: 	leaq	0x1(%rax), %rsi
    000015e7: 	callq	_ZdlPvm@PLT # Offset: 5607
.Ltmp5747:
    000015ec: 	movq	0x1a0(%rsp), %rdi
    000015f4: 	cmpq	0x20(%rsp), %rdi
    000015f9: 	je	.Ltmp5748 # Offset: 5625
    000015fb: 	movq	0x1b0(%rsp), %rax
    00001603: 	leaq	0x1(%rax), %rsi
    00001607: 	callq	_ZdlPvm@PLT # Offset: 5639
.Ltmp5748:
    0000160c: 	movq	0x160(%rsp), %rdi
    00001614: 	cmpq	0x8(%rsp), %rdi
    00001619: 	je	.Ltmp5749 # Offset: 5657
    0000161b: 	movq	0x170(%rsp), %rax
    00001623: 	leaq	0x1(%rax), %rsi
    00001627: 	callq	_ZdlPvm@PLT # Offset: 5671
.Ltmp5749:
    0000162c: 	movq	0x180(%rsp), %rdi
    00001634: 	cmpq	0x10(%rsp), %rdi
    00001639: 	je	.Ltmp5750 # Offset: 5689
    0000163b: 	movq	0x190(%rsp), %rax
    00001643: 	leaq	0x1(%rax), %rsi
    00001647: 	callq	_ZdlPvm@PLT # Offset: 5703
.Ltmp5750:
    0000164c: 	movq	0xd0(%rsp), %rbx
    00001654: 	movq	0x60(%rsp), %r12
    00001659: 	cmpq	0x60(%rsp), %rbx
    0000165e: 	je	.Ltmp5751 # Offset: 5726
.Ltmp5752:
    00001660: 	movq	%rbx, %rdi
    00001663: 	movq	(%rbx), %rbx
    00001666: 	movl	$0x18, %esi
    0000166b: 	callq	_ZdlPvm@PLT # Offset: 5739
    00001670: 	cmpq	%r12, %rbx
    00001673: 	jne	.Ltmp5752 # Offset: 5747
.Ltmp5751:
    00001675: 	addq	$0x8, 0x28(%rsp)
    0000167b: 	movq	0x28(%rsp), %rax
    00001680: 	cmpq	0x58(%rsp), %rax
    00001685: 	jne	.Ltmp5753 # Offset: 5765
    0000168b: 	leaq	_ZZNSt8__detail18__to_chars_10_implImEEvPcjT_E8__digits(%rip), %rbx
.Ltmp5802:
    00001692: 	movq	0x80(%rsp), %rax
    0000169a: 	movq	$0x0, 0xb0(%rsp)
    000016a6: 	movq	(%rax), %r12
    000016a9: 	testq	%r12, %r12
    000016ac: 	je	.Ltmp5754 # Offset: 5804
    000016b2: 	movq	%r12, %rbp
    000016b5: 	movq	%r14, %rax
.Ltmp5755:
    000016b8: 	movl	$0x10, %edi
    000016bd: 	movq	%rax, %r13
    000016c0: 	callq	_Znwm@PLT # Offset: 5824
    000016c5: 	movq	$0x0, (%rax)
    000016cc: 	movl	$0x0, 0x8(%rax)
    000016d3: 	movq	%rax, (%r13)
    000016d7: 	subq	$0x1, %rbp
    000016db: 	jne	.Ltmp5755 # Offset: 5851
    000016dd: 	movq	0xb0(%rsp), %rbp
    000016e5: 	cmpq	$0x9, %r12
    000016e9: 	jbe	.Ltmp5756 # Offset: 5865
    000016ef: 	cmpq	$0x63, %r12
    000016f3: 	jbe	.Ltmp5757 # Offset: 5875
    000016f9: 	cmpq	$0x3e7, %r12
    00001700: 	jbe	.Ltmp5758 # Offset: 5888
    00001706: 	cmpq	$0x270f, %r12
    0000170d: 	jbe	.Ltmp5759 # Offset: 5901
    00001713: 	movq	%r12, %rax
    00001716: 	movl	$0x1, %esi
    0000171b: 	jmp	.Ltmp5760 # Offset: 5915
.Ltmp5764:
    0000171d: 	cmpq	$0xf423f, %rcx
    00001724: 	jbe	.Ltmp5761 # Offset: 5924
    0000172a: 	cmpq	$0x98967f, %rcx
    00001731: 	jbe	.Ltmp5762 # Offset: 5937
    00001737: 	cmpq	$0x5f5e0ff, %rcx
    0000173e: 	jbe	.Ltmp5763 # Offset: 5950
.Ltmp5760:
    00001744: 	movq	%rax, %rcx
    00001747: 	movabsq	$0x346dc5d63886594b, %rax
    00001751: 	mulq	%rcx
    00001754: 	movq	%rdx, %rax
    00001757: 	movl	%esi, %edx
    00001759: 	addl	$0x4, %esi
    0000175c: 	shrq	$0xb, %rax
    00001760: 	cmpq	$0x1869f, %rcx
    00001767: 	ja	.Ltmp5764 # Offset: 5991
.Ltmp5811:
    00001769: 	movq	0x8(%rsp), %rax
    0000176e: 	xorl	%edx, %edx
    00001770: 	movq	%r15, %rdi
    00001773: 	movq	%rax, 0x160(%rsp)
    0000177b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEmc@PLT # Offset: 6011
    00001780: 	movl	0x168(%rsp), %eax
    00001787: 	movq	0x160(%rsp), %rdi
    0000178f: 	movq	%r12, %rcx
    00001792: 	leal	-0x1(%rax), %esi
    00001795: 	cmpq	$0x63, %r12
    00001799: 	jbe	.Ltmp5765 # Offset: 6041
.Ltmp5766:
    0000179b: 	movabsq	$0x28f5c28f5c28f5c3, %rax
    000017a5: 	movq	%rcx, %rdx
    000017a8: 	shrq	$0x2, %rdx
    000017ac: 	mulq	%rdx
    000017af: 	movq	%rdx, %r8
    000017b2: 	movq	%rdx, %rax
    000017b5: 	movq	%rcx, %rdx
    000017b8: 	shrq	$0x2, %r8
    000017bc: 	andq	$-0x4, %rax
    000017c0: 	addq	%r8, %rax
    000017c3: 	leaq	(%rax,%rax,4), %rax
    000017c7: 	shlq	$0x2, %rax
    000017cb: 	subq	%rax, %rdx
    000017ce: 	movq	%rcx, %rax
    000017d1: 	movq	%r8, %rcx
    000017d4: 	movl	%esi, %r8d
    000017d7: 	movzbl	0x1(%rbx,%rdx,2), %r9d
    000017dd: 	movzbl	(%rbx,%rdx,2), %edx
    000017e1: 	movb	%r9b, (%rdi,%r8)
    000017e5: 	leal	-0x1(%rsi), %r8d
    000017e9: 	subl	$0x2, %esi
    000017ec: 	movb	%dl, (%rdi,%r8)
    000017f0: 	cmpq	$0x270f, %rax
    000017f6: 	ja	.Ltmp5766 # Offset: 6134
.Ltmp5765:
    000017f8: 	leal	0x30(%rcx), %eax
    000017fb: 	cmpq	$0x9, %rcx
    000017ff: 	jbe	.Ltmp5767 # Offset: 6143
    00001801: 	movzbl	0x1(%rbx,%rcx,2), %eax
    00001806: 	movb	%al, 0x1(%rdi)
    00001809: 	movzbl	(%rbx,%rcx,2), %eax
.Ltmp5767:
    0000180d: 	movb	%al, (%rdi)
    0000180f: 	leaq	0x150(%rsp), %rax
    00001817: 	movq	0x128(%rsp), %r13
    0000181f: 	movq	%rax, 0x28(%rsp)
    00001824: 	movq	%rax, 0x140(%rsp)
    0000182c: 	movq	0x120(%rsp), %rax
    00001834: 	movq	%rax, 0x30(%rsp)
    00001839: 	movq	%rax, %rdi
    0000183c: 	addq	%r13, %rax
    0000183f: 	je	.Ltmp5768 # Offset: 6207
    00001845: 	testq	%rdi, %rdi
    00001848: 	jne	.Ltmp5768 # Offset: 6216
    0000184e: 	leaq	DATAat0x34008(%rip), %rdi
    00001855: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6229
    0000185a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5737:
    00001860: 	xorl	%edx, %edx
    00001862: 	movq	%r14, %rsi
    00001865: 	movq	%r15, %rdi
    00001868: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6248
    0000186d: 	movq	%rax, 0x160(%rsp)
    00001875: 	movq	%rax, %rdi
    00001878: 	movq	0xb0(%rsp), %rax
    00001880: 	movq	%rax, 0x170(%rsp)
.Ltmp5812:
    00001888: 	movq	%r13, %rdx
    0000188b: 	movq	%rbx, %rsi
    0000188e: 	callq	memcpy@PLT # Offset: 6286
    00001893: 	movq	0xb0(%rsp), %r13
    0000189b: 	movq	0x160(%rsp), %rax
    000018a3: 	jmp	.Ltmp5739 # Offset: 6307
.Ltmp5650:
    000018a8: 	movl	$0x4, %esi
    000018ad: 	jmp	.Ltmp5676 # Offset: 6317
.Ltmp5688:
    000018b2: 	movl	$0x4, %esi
    000018b7: 	jmp	.Ltmp5720 # Offset: 6327
.Ltmp5649:
    000018bc: 	movl	$0x3, %esi
    000018c1: 	jmp	.Ltmp5676 # Offset: 6337
.Ltmp5746:
    000018c6: 	movdqu	0x10(%rax), %xmm7
    000018cb: 	movaps	%xmm7, 0x1d0(%rsp)
    000018d3: 	jmp	.Ltmp5769 # Offset: 6355
.Ltmp5744:
    000018d8: 	movdqu	0x10(%rax), %xmm6
    000018dd: 	movaps	%xmm6, 0x1b0(%rsp)
    000018e5: 	jmp	.Ltmp5770 # Offset: 6373
.Ltmp5743:
    000018ea: 	movq	0x40(%rsp), %rdi
    000018ef: 	xorl	%edx, %edx
    000018f1: 	xorl	%esi, %esi
    000018f3: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@PLT # Offset: 6387
    000018f8: 	movq	0x20(%rsp), %rbx
    000018fd: 	leaq	0x10(%rax), %rdx
    00001901: 	movq	%rbx, 0x1a0(%rsp)
    00001909: 	movq	(%rax), %rcx
    0000190c: 	cmpq	%rdx, %rcx
    0000190f: 	jne	.Ltmp5771 # Offset: 6415
    00001915: 	movdqu	0x10(%rax), %xmm4
    0000191a: 	movaps	%xmm4, 0x1b0(%rsp)
    00001922: 	jmp	.Ltmp5770 # Offset: 6434
.Ltmp5729:
    00001927: 	leal	0x6(%rax), %esi
    0000192a: 	jmp	.Ltmp5772 # Offset: 6442
.Ltmp5730:
    0000192f: 	leal	0x7(%rax), %esi
    00001932: 	jmp	.Ltmp5772 # Offset: 6450
.Ltmp5728:
    00001937: 	leal	0x5(%rax), %esi
    0000193a: 	jmp	.Ltmp5772 # Offset: 6458
.Ltmp5722:
    0000193f: 	movl	$0x1, %esi
    00001944: 	jmp	.Ltmp5772 # Offset: 6468
.Ltmp5768:
    00001949: 	movq	%r13, 0xd0(%rsp)
    00001951: 	cmpq	$0xf, %r13
    00001955: 	ja	.Ltmp5773 # Offset: 6485
    0000195b: 	cmpq	$0x1, %r13
    0000195f: 	jne	.Ltmp5774 # Offset: 6495
    00001965: 	movq	0x30(%rsp), %rax
    0000196a: 	movzbl	(%rax), %eax
    0000196d: 	movb	%al, 0x150(%rsp)
    00001974: 	movq	0x28(%rsp), %rax
.Ltmp5805:
    00001979: 	movq	%r13, 0x148(%rsp)
    00001981: 	movb	$0x0, (%rax,%r13)
    00001986: 	movabsq	$0x3fffffffffffffff, %rax
    00001990: 	cmpq	%rax, 0x148(%rsp)
    00001998: 	je	.Ltmp5775 # Offset: 6552
    0000199e: 	leaq	0x140(%rsp), %r13
    000019a6: 	movl	$0x1, %edx
    000019ab: 	leaq	DATAat0x34149(%rip), %rsi
    000019b2: 	movq	%r13, %rdi
    000019b5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 6581
    000019ba: 	movq	0x148(%rsp), %r8
    000019c2: 	movq	0x168(%rsp), %rdx
    000019ca: 	movl	$0xf, %eax
    000019cf: 	movq	0x140(%rsp), %rcx
    000019d7: 	movq	%rax, %r9
    000019da: 	cmpq	0x28(%rsp), %rcx
    000019df: 	cmovneq	0x150(%rsp), %r9
    000019e8: 	leaq	(%r8,%rdx), %rdi
    000019ec: 	movq	0x160(%rsp), %rsi
    000019f4: 	cmpq	%r9, %rdi
    000019f7: 	jbe	.Ltmp5776 # Offset: 6647
    000019f9: 	cmpq	0x8(%rsp), %rsi
    000019fe: 	cmovneq	0x170(%rsp), %rax
    00001a07: 	cmpq	%rax, %rdi
    00001a0a: 	jbe	.Ltmp5777 # Offset: 6666
.Ltmp5776:
    00001a10: 	movq	%r13, %rdi
    00001a13: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 6675
    00001a18: 	movq	0x10(%rsp), %rdi
    00001a1d: 	leaq	0x10(%rax), %rdx
    00001a21: 	movq	%rdi, 0x180(%rsp)
    00001a29: 	movq	(%rax), %rcx
    00001a2c: 	cmpq	%rdx, %rcx
    00001a2f: 	je	.Ltmp5778 # Offset: 6703
.Ltmp5808:
    00001a35: 	movq	%rcx, 0x180(%rsp)
    00001a3d: 	movq	0x10(%rax), %rcx
    00001a41: 	movq	%rcx, 0x190(%rsp)
.Ltmp5809:
    00001a49: 	movq	0x8(%rax), %rcx
    00001a4d: 	movq	%rcx, 0x188(%rsp)
    00001a55: 	movq	$0x0, 0x8(%rax)
    00001a5d: 	movb	$0x0, 0x10(%rax)
    00001a61: 	movq	%rdx, (%rax)
    00001a64: 	movabsq	$0x3fffffffffffffff, %rax
    00001a6e: 	subq	0x188(%rsp), %rax
    00001a76: 	cmpq	$0x11, %rax
    00001a7a: 	jbe	.Ltmp5779 # Offset: 6778
    00001a80: 	movq	0x40(%rsp), %rdi
    00001a85: 	movl	$0x12, %edx
    00001a8a: 	leaq	DATAat0x342c9(%rip), %rsi
    00001a91: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 6801
    00001a96: 	movq	0x20(%rsp), %rdi
    00001a9b: 	leaq	0x10(%rax), %rdx
    00001a9f: 	movq	%rdi, 0x1a0(%rsp)
    00001aa7: 	movq	(%rax), %rcx
    00001aaa: 	cmpq	%rdx, %rcx
    00001aad: 	je	.Ltmp5780 # Offset: 6829
    00001ab3: 	movq	%rcx, 0x1a0(%rsp)
    00001abb: 	movq	0x10(%rax), %rcx
    00001abf: 	movq	%rcx, 0x1b0(%rsp)
.Ltmp5806:
    00001ac7: 	movq	0x8(%rax), %rcx
    00001acb: 	movq	0x50(%rsp), %r13
    00001ad0: 	movq	0x48(%rsp), %rsi
    00001ad5: 	movq	%rcx, 0x1a8(%rsp)
    00001add: 	movq	%r13, %rdi
    00001ae0: 	movq	%rdx, (%rax)
    00001ae3: 	leaq	DATAat0x3418f(%rip), %rdx
    00001aea: 	movq	$0x0, 0x8(%rax)
    00001af2: 	movb	$0x0, 0x10(%rax)
    00001af6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6902
    00001afb: 	xorl	%r9d, %r9d
    00001afe: 	movq	%r13, %r8
    00001b01: 	leaq	_Z14std_lowerboundISt18_Fwd_list_iteratorIfEfET_S2_S2_T0_(%rip), %rcx
    00001b08: 	movq	%r12, %rdx
    00001b0b: 	xorl	%esi, %esi
    00001b0d: 	movq	%rbp, %rdi
    00001b10: 	callq	"_Z13TestOneSearchISt18_Fwd_list_iteratorIfEPFS1_S1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1" # Offset: 6928
    00001b15: 	movq	0x1c0(%rsp), %rdi
    00001b1d: 	cmpq	0x18(%rsp), %rdi
    00001b22: 	je	.Ltmp5781 # Offset: 6946
    00001b24: 	movq	0x1d0(%rsp), %rax
    00001b2c: 	leaq	0x1(%rax), %rsi
    00001b30: 	callq	_ZdlPvm@PLT # Offset: 6960
.Ltmp5781:
    00001b35: 	movq	0x50(%rsp), %r13
    00001b3a: 	movq	0x48(%rsp), %rsi
    00001b3f: 	leaq	DATAat0x341a1(%rip), %rdx
    00001b46: 	movq	%r13, %rdi
    00001b49: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6985
    00001b4e: 	xorl	%r9d, %r9d
    00001b51: 	movq	%r13, %r8
    00001b54: 	leaq	_Z12lower_bound1ISt18_Fwd_list_iteratorIfEfET_S2_S2_T0_(%rip), %rcx
    00001b5b: 	movq	%r12, %rdx
    00001b5e: 	xorl	%esi, %esi
    00001b60: 	movq	%rbp, %rdi
    00001b63: 	callq	"_Z13TestOneSearchISt18_Fwd_list_iteratorIfEPFS1_S1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1" # Offset: 7011
    00001b68: 	movq	0x1c0(%rsp), %rdi
    00001b70: 	cmpq	0x18(%rsp), %rdi
    00001b75: 	je	.Ltmp5782 # Offset: 7029
    00001b77: 	movq	0x1d0(%rsp), %rax
    00001b7f: 	leaq	0x1(%rax), %rsi
    00001b83: 	callq	_ZdlPvm@PLT # Offset: 7043
.Ltmp5782:
    00001b88: 	movq	0x50(%rsp), %r13
    00001b8d: 	movq	0x48(%rsp), %rsi
    00001b92: 	leaq	DATAat0x341af(%rip), %rdx
    00001b99: 	movq	%r13, %rdi
    00001b9c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7068
    00001ba1: 	xorl	%r9d, %r9d
    00001ba4: 	movq	%r13, %r8
    00001ba7: 	leaq	_Z12lower_bound2ISt18_Fwd_list_iteratorIfEfET_S2_S2_T0_(%rip), %rcx
    00001bae: 	movq	%r12, %rdx
    00001bb1: 	xorl	%esi, %esi
    00001bb3: 	movq	%rbp, %rdi
    00001bb6: 	callq	"_Z13TestOneSearchISt18_Fwd_list_iteratorIfEPFS1_S1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1" # Offset: 7094
    00001bbb: 	movq	0x1c0(%rsp), %rdi
    00001bc3: 	cmpq	0x18(%rsp), %rdi
    00001bc8: 	je	.Ltmp5783 # Offset: 7112
    00001bca: 	movq	0x1d0(%rsp), %rax
    00001bd2: 	leaq	0x1(%rax), %rsi
    00001bd6: 	callq	_ZdlPvm@PLT # Offset: 7126
.Ltmp5783:
    00001bdb: 	movq	0x50(%rsp), %r13
    00001be0: 	movq	0x48(%rsp), %rsi
    00001be5: 	leaq	DATAat0x341bd(%rip), %rdx
    00001bec: 	movq	%r13, %rdi
    00001bef: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7151
    00001bf4: 	xorl	%r9d, %r9d
    00001bf7: 	movq	%r13, %r8
    00001bfa: 	leaq	_Z17lower_bound_recurISt18_Fwd_list_iteratorIfEfET_S2_S2_T0_(%rip), %rcx
    00001c01: 	movq	%r12, %rdx
    00001c04: 	xorl	%esi, %esi
    00001c06: 	movq	%rbp, %rdi
    00001c09: 	callq	"_Z13TestOneSearchISt18_Fwd_list_iteratorIfEPFS1_S1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1" # Offset: 7177
    00001c0e: 	movq	0x1c0(%rsp), %rdi
    00001c16: 	cmpq	0x18(%rsp), %rdi
    00001c1b: 	je	.Ltmp5784 # Offset: 7195
    00001c1d: 	movq	0x1d0(%rsp), %rax
    00001c25: 	leaq	0x1(%rax), %rsi
    00001c29: 	callq	_ZdlPvm@PLT # Offset: 7209
.Ltmp5784:
    00001c2e: 	movq	0x50(%rsp), %r13
    00001c33: 	movq	0x48(%rsp), %rsi
    00001c38: 	leaq	DATAat0x341d4(%rip), %rdx
    00001c3f: 	movq	%r13, %rdi
    00001c42: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7234
    00001c47: 	movl	$0x1, %r9d
    00001c4d: 	movq	%r13, %r8
    00001c50: 	movq	%r12, %rdx
    00001c53: 	xorl	%esi, %esi
    00001c55: 	leaq	_Z14std_upperboundISt18_Fwd_list_iteratorIfEfET_S2_S2_T0_(%rip), %rcx
    00001c5c: 	movq	%rbp, %rdi
    00001c5f: 	callq	"_Z13TestOneSearchISt18_Fwd_list_iteratorIfEPFS1_S1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1" # Offset: 7263
    00001c64: 	movq	0x1c0(%rsp), %rdi
    00001c6c: 	cmpq	0x18(%rsp), %rdi
    00001c71: 	je	.Ltmp5785 # Offset: 7281
    00001c73: 	movq	0x1d0(%rsp), %rax
    00001c7b: 	leaq	0x1(%rax), %rsi
    00001c7f: 	callq	_ZdlPvm@PLT # Offset: 7295
.Ltmp5785:
    00001c84: 	movq	0x50(%rsp), %r13
    00001c89: 	movq	0x48(%rsp), %rsi
    00001c8e: 	leaq	DATAat0x341e6(%rip), %rdx
    00001c95: 	movq	%r13, %rdi
    00001c98: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7320
    00001c9d: 	movl	$0x1, %r9d
    00001ca3: 	movq	%r13, %r8
    00001ca6: 	movq	%r12, %rdx
    00001ca9: 	xorl	%esi, %esi
    00001cab: 	leaq	_Z12upper_bound1ISt18_Fwd_list_iteratorIfEfET_S2_S2_T0_(%rip), %rcx
    00001cb2: 	movq	%rbp, %rdi
    00001cb5: 	callq	"_Z13TestOneSearchISt18_Fwd_list_iteratorIfEPFS1_S1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1" # Offset: 7349
    00001cba: 	movq	0x1c0(%rsp), %rdi
    00001cc2: 	cmpq	0x18(%rsp), %rdi
    00001cc7: 	je	.Ltmp5786 # Offset: 7367
    00001cc9: 	movq	0x1d0(%rsp), %rax
    00001cd1: 	leaq	0x1(%rax), %rsi
    00001cd5: 	callq	_ZdlPvm@PLT # Offset: 7381
.Ltmp5786:
    00001cda: 	movq	0x50(%rsp), %r13
    00001cdf: 	movq	0x48(%rsp), %rsi
    00001ce4: 	leaq	DATAat0x341f4(%rip), %rdx
    00001ceb: 	movq	%r13, %rdi
    00001cee: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7406
    00001cf3: 	movl	$0x1, %r9d
    00001cf9: 	movq	%r13, %r8
    00001cfc: 	movq	%r12, %rdx
    00001cff: 	xorl	%esi, %esi
    00001d01: 	leaq	_Z12upper_bound2ISt18_Fwd_list_iteratorIfEfET_S2_S2_T0_(%rip), %rcx
    00001d08: 	movq	%rbp, %rdi
    00001d0b: 	callq	"_Z13TestOneSearchISt18_Fwd_list_iteratorIfEPFS1_S1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1" # Offset: 7435
    00001d10: 	movq	0x1c0(%rsp), %rdi
    00001d18: 	cmpq	0x18(%rsp), %rdi
    00001d1d: 	je	.Ltmp5787 # Offset: 7453
    00001d1f: 	movq	0x1d0(%rsp), %rax
    00001d27: 	leaq	0x1(%rax), %rsi
    00001d2b: 	callq	_ZdlPvm@PLT # Offset: 7467
.Ltmp5787:
    00001d30: 	movq	0x50(%rsp), %r13
    00001d35: 	movq	0x48(%rsp), %rsi
    00001d3a: 	leaq	DATAat0x34202(%rip), %rdx
    00001d41: 	movq	%r13, %rdi
    00001d44: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7492
    00001d49: 	movl	$0x1, %r9d
    00001d4f: 	movq	%r13, %r8
    00001d52: 	movq	%r12, %rdx
    00001d55: 	xorl	%esi, %esi
    00001d57: 	leaq	_Z17upper_bound_recurISt18_Fwd_list_iteratorIfEfET_S2_S2_T0_(%rip), %rcx
    00001d5e: 	movq	%rbp, %rdi
    00001d61: 	callq	"_Z13TestOneSearchISt18_Fwd_list_iteratorIfEPFS1_S1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb.constprop.0/1" # Offset: 7521
    00001d66: 	movq	0x1c0(%rsp), %rdi
    00001d6e: 	cmpq	0x18(%rsp), %rdi
    00001d73: 	je	.Ltmp5788 # Offset: 7539
    00001d75: 	movq	0x1d0(%rsp), %rax
    00001d7d: 	leaq	0x1(%rax), %rsi
    00001d81: 	callq	_ZdlPvm@PLT # Offset: 7553
.Ltmp5788:
    00001d86: 	movq	0x50(%rsp), %r13
    00001d8b: 	movq	0x48(%rsp), %rsi
    00001d90: 	leaq	DATAat0x34219(%rip), %rdx
    00001d97: 	movq	%r13, %rdi
    00001d9a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7578
    00001d9f: 	xorl	%r9d, %r9d
    00001da2: 	movq	%r13, %r8
    00001da5: 	leaq	_Z16std_binarysearchISt18_Fwd_list_iteratorIfEfEbT_S2_T0_(%rip), %rcx
    00001dac: 	movq	%r12, %rdx
    00001daf: 	xorl	%esi, %esi
    00001db1: 	movq	%rbp, %rdi
    00001db4: 	callq	_Z13TestOneSearchISt18_Fwd_list_iteratorIfEPFbS1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 7604
    00001db9: 	movq	0x1c0(%rsp), %rdi
    00001dc1: 	cmpq	0x18(%rsp), %rdi
    00001dc6: 	je	.Ltmp5789 # Offset: 7622
    00001dc8: 	movq	0x1d0(%rsp), %rax
    00001dd0: 	leaq	0x1(%rax), %rsi
    00001dd4: 	callq	_ZdlPvm@PLT # Offset: 7636
.Ltmp5789:
    00001dd9: 	movq	0x50(%rsp), %r13
    00001dde: 	movq	0x48(%rsp), %rsi
    00001de3: 	leaq	DATAat0x3422d(%rip), %rdx
    00001dea: 	movq	%r13, %rdi
    00001ded: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7661
    00001df2: 	xorl	%r9d, %r9d
    00001df5: 	movq	%r13, %r8
    00001df8: 	leaq	_Z13binarysearch1ISt18_Fwd_list_iteratorIfEfEbT_S2_T0_(%rip), %rcx
    00001dff: 	movq	%r12, %rdx
    00001e02: 	xorl	%esi, %esi
    00001e04: 	movq	%rbp, %rdi
    00001e07: 	callq	_Z13TestOneSearchISt18_Fwd_list_iteratorIfEPFbS1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 7687
    00001e0c: 	movq	0x1c0(%rsp), %rdi
    00001e14: 	cmpq	0x18(%rsp), %rdi
    00001e19: 	je	.Ltmp5790 # Offset: 7705
    00001e1b: 	movq	0x1d0(%rsp), %rax
    00001e23: 	leaq	0x1(%rax), %rsi
    00001e27: 	callq	_ZdlPvm@PLT # Offset: 7719
.Ltmp5790:
    00001e2c: 	movq	0x50(%rsp), %r13
    00001e31: 	movq	0x48(%rsp), %rsi
    00001e36: 	leaq	DATAat0x3423d(%rip), %rdx
    00001e3d: 	movq	%r13, %rdi
    00001e40: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7744
    00001e45: 	xorl	%r9d, %r9d
    00001e48: 	movq	%r13, %r8
    00001e4b: 	leaq	_Z13binarysearch2ISt18_Fwd_list_iteratorIfEfEbT_S2_T0_(%rip), %rcx
    00001e52: 	movq	%r12, %rdx
    00001e55: 	xorl	%esi, %esi
    00001e57: 	movq	%rbp, %rdi
    00001e5a: 	callq	_Z13TestOneSearchISt18_Fwd_list_iteratorIfEPFbS1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 7770
    00001e5f: 	movq	0x1c0(%rsp), %rdi
    00001e67: 	cmpq	0x18(%rsp), %rdi
    00001e6c: 	je	.Ltmp5791 # Offset: 7788
    00001e6e: 	movq	0x1d0(%rsp), %rax
    00001e76: 	leaq	0x1(%rax), %rsi
    00001e7a: 	callq	_ZdlPvm@PLT # Offset: 7802
.Ltmp5791:
    00001e7f: 	movq	0x50(%rsp), %r13
    00001e84: 	movq	0x48(%rsp), %rsi
    00001e89: 	leaq	DATAat0x3424d(%rip), %rdx
    00001e90: 	movq	%r13, %rdi
    00001e93: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7827
    00001e98: 	xorl	%r9d, %r9d
    00001e9b: 	movq	%r13, %r8
    00001e9e: 	leaq	_Z13binarysearch3ISt18_Fwd_list_iteratorIfEfEbT_S2_T0_(%rip), %rcx
    00001ea5: 	movq	%r12, %rdx
    00001ea8: 	xorl	%esi, %esi
    00001eaa: 	movq	%rbp, %rdi
    00001ead: 	callq	_Z13TestOneSearchISt18_Fwd_list_iteratorIfEPFbS1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 7853
    00001eb2: 	movq	0x1c0(%rsp), %rdi
    00001eba: 	cmpq	0x18(%rsp), %rdi
    00001ebf: 	je	.Ltmp5792 # Offset: 7871
    00001ec1: 	movq	0x1d0(%rsp), %rax
    00001ec9: 	leaq	0x1(%rax), %rsi
    00001ecd: 	callq	_ZdlPvm@PLT # Offset: 7885
.Ltmp5792:
    00001ed2: 	movq	0x50(%rsp), %r13
    00001ed7: 	movq	0x48(%rsp), %rsi
    00001edc: 	leaq	DATAat0x3425d(%rip), %rdx
    00001ee3: 	movq	%r13, %rdi
    00001ee6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7910
    00001eeb: 	xorl	%r9d, %r9d
    00001eee: 	movq	%r13, %r8
    00001ef1: 	leaq	_Z13binarysearch4ISt18_Fwd_list_iteratorIfEfEbT_S2_T0_(%rip), %rcx
    00001ef8: 	movq	%r12, %rdx
    00001efb: 	xorl	%esi, %esi
    00001efd: 	movq	%rbp, %rdi
    00001f00: 	callq	_Z13TestOneSearchISt18_Fwd_list_iteratorIfEPFbS1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 7936
    00001f05: 	movq	0x1c0(%rsp), %rdi
    00001f0d: 	cmpq	0x18(%rsp), %rdi
    00001f12: 	je	.Ltmp5793 # Offset: 7954
    00001f14: 	movq	0x1d0(%rsp), %rax
    00001f1c: 	leaq	0x1(%rax), %rsi
    00001f20: 	callq	_ZdlPvm@PLT # Offset: 7968
.Ltmp5793:
    00001f25: 	movq	0x50(%rsp), %r13
    00001f2a: 	movq	0x48(%rsp), %rsi
    00001f2f: 	leaq	DATAat0x3426d(%rip), %rdx
    00001f36: 	movq	%r13, %rdi
    00001f39: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7993
    00001f3e: 	xorl	%r9d, %r9d
    00001f41: 	movq	%r13, %r8
    00001f44: 	leaq	_Z18binarysearch_recurISt18_Fwd_list_iteratorIfEfEbT_S2_T0_(%rip), %rcx
    00001f4b: 	movq	%r12, %rdx
    00001f4e: 	xorl	%esi, %esi
    00001f50: 	movq	%rbp, %rdi
    00001f53: 	callq	_Z13TestOneSearchISt18_Fwd_list_iteratorIfEPFbS1_S1_fEEvT_S4_mT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb # Offset: 8019
    00001f58: 	movq	0x1c0(%rsp), %rdi
    00001f60: 	cmpq	0x18(%rsp), %rdi
    00001f65: 	je	.Ltmp5794 # Offset: 8037
    00001f67: 	movq	0x1d0(%rsp), %rax
    00001f6f: 	leaq	0x1(%rax), %rsi
    00001f73: 	callq	_ZdlPvm@PLT # Offset: 8051
.Ltmp5794:
    00001f78: 	movq	0x50(%rsp), %r13
    00001f7d: 	movq	0x48(%rsp), %rsi
    00001f82: 	leaq	DATAat0x34286(%rip), %rdx
    00001f89: 	movq	%r13, %rdi
    00001f8c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 8076
    00001f91: 	movq	%r13, %rdi
    00001f94: 	callq	_Z9summarizeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 8084
    00001f99: 	movq	0x1c0(%rsp), %rdi
    00001fa1: 	cmpq	0x18(%rsp), %rdi
    00001fa6: 	je	.Ltmp5795 # Offset: 8102
    00001fa8: 	movq	0x1d0(%rsp), %rax
    00001fb0: 	leaq	0x1(%rax), %rsi
    00001fb4: 	callq	_ZdlPvm@PLT # Offset: 8116
.Ltmp5795:
    00001fb9: 	movq	0x1a0(%rsp), %rdi
    00001fc1: 	cmpq	0x20(%rsp), %rdi
    00001fc6: 	je	.Ltmp5796 # Offset: 8134
    00001fc8: 	movq	0x1b0(%rsp), %rax
    00001fd0: 	leaq	0x1(%rax), %rsi
    00001fd4: 	callq	_ZdlPvm@PLT # Offset: 8148
.Ltmp5796:
    00001fd9: 	movq	0x180(%rsp), %rdi
    00001fe1: 	cmpq	0x10(%rsp), %rdi
    00001fe6: 	je	.Ltmp5797 # Offset: 8166
    00001fe8: 	movq	0x190(%rsp), %rax
    00001ff0: 	leaq	0x1(%rax), %rsi
    00001ff4: 	callq	_ZdlPvm@PLT # Offset: 8180
.Ltmp5797:
    00001ff9: 	movq	0x140(%rsp), %rdi
    00002001: 	cmpq	0x28(%rsp), %rdi
    00002006: 	je	.Ltmp5798 # Offset: 8198
    00002008: 	movq	0x150(%rsp), %rax
    00002010: 	leaq	0x1(%rax), %rsi
    00002014: 	callq	_ZdlPvm@PLT # Offset: 8212
.Ltmp5798:
    00002019: 	movq	0x160(%rsp), %rdi
    00002021: 	cmpq	0x8(%rsp), %rdi
    00002026: 	je	.Ltmp5799 # Offset: 8230
    00002028: 	movq	0x170(%rsp), %rax
    00002030: 	leaq	0x1(%rax), %rsi
    00002034: 	callq	_ZdlPvm@PLT # Offset: 8244
.Ltmp5799:
    00002039: 	testq	%rbp, %rbp
    0000203c: 	je	.Ltmp5800 # Offset: 8252
.Ltmp5801:
    0000203e: 	movq	%rbp, %rdi
    00002041: 	movq	(%rbp), %rbp
    00002045: 	movl	$0x10, %esi
    0000204a: 	callq	_ZdlPvm@PLT # Offset: 8266
    0000204f: 	testq	%rbp, %rbp
    00002052: 	jne	.Ltmp5801 # Offset: 8274
.Ltmp5800:
    00002054: 	addq	$0x8, 0x80(%rsp)
    0000205d: 	movq	0x80(%rsp), %rax
    00002065: 	cmpq	0x58(%rsp), %rax
    0000206a: 	jne	.Ltmp5802 # Offset: 8298
    00002070: 	movq	0x120(%rsp), %rdi
    00002078: 	leaq	0x130(%rsp), %rax
    00002080: 	cmpq	%rax, %rdi
    00002083: 	je	.Ltmp5803 # Offset: 8323
    00002085: 	movq	0x130(%rsp), %rax
    0000208d: 	leaq	0x1(%rax), %rsi
    00002091: 	callq	_ZdlPvm@PLT # Offset: 8337
.Ltmp5803:
    00002096: 	movq	0x258(%rsp), %rax
    0000209e: 	subq	%fs:0x28, %rax
    000020a7: 	jne	.Ltmp5804 # Offset: 8359
    000020ad: 	addq	$0x268, %rsp
    000020b4: 	popq	%rbx
    000020b5: 	popq	%rbp
    000020b6: 	popq	%r12
    000020b8: 	popq	%r13
    000020ba: 	popq	%r14
    000020bc: 	popq	%r15
    000020be: 	retq # Offset: 8382
.Ltmp5773:
    000020bf: 	movq	0x60(%rsp), %rsi
    000020c4: 	leaq	0x140(%rsp), %rdi
    000020cc: 	xorl	%edx, %edx
    000020ce: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8398
    000020d3: 	movq	%rax, 0x140(%rsp)
    000020db: 	movq	%rax, %rdi
    000020de: 	movq	0xd0(%rsp), %rax
    000020e6: 	movq	%rax, 0x150(%rsp)
.Ltmp5810:
    000020ee: 	movq	0x30(%rsp), %rsi
    000020f3: 	movq	%r13, %rdx
    000020f6: 	callq	memcpy@PLT # Offset: 8438
    000020fb: 	movq	0xd0(%rsp), %r13
    00002103: 	movq	0x140(%rsp), %rax
    0000210b: 	jmp	.Ltmp5805 # Offset: 8459
.Ltmp5780:
    00002110: 	movdqu	0x10(%rax), %xmm6
    00002115: 	movaps	%xmm6, 0x1b0(%rsp)
    0000211d: 	jmp	.Ltmp5806 # Offset: 8477
.Ltmp5774:
    00002122: 	testq	%r13, %r13
    00002125: 	jne	.Ltmp5807 # Offset: 8485
    00002127: 	movq	0x28(%rsp), %rax
    0000212c: 	jmp	.Ltmp5805 # Offset: 8492
.Ltmp5777:
    00002131: 	xorl	%edx, %edx
    00002133: 	xorl	%esi, %esi
    00002135: 	movq	%r15, %rdi
    00002138: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@PLT # Offset: 8504
    0000213d: 	movq	0x10(%rsp), %rdi
    00002142: 	leaq	0x10(%rax), %rdx
    00002146: 	movq	%rdi, 0x180(%rsp)
    0000214e: 	movq	(%rax), %rcx
    00002151: 	cmpq	%rdx, %rcx
    00002154: 	jne	.Ltmp5808 # Offset: 8532
    0000215a: 	movdqu	0x10(%rax), %xmm5
    0000215f: 	movaps	%xmm5, 0x190(%rsp)
    00002167: 	jmp	.Ltmp5809 # Offset: 8551
.Ltmp5807:
    0000216c: 	movq	0x28(%rsp), %rdi
    00002171: 	jmp	.Ltmp5810 # Offset: 8561
.Ltmp5804:
    00002176: 	callq	__stack_chk_fail@PLT # Offset: 8566
    0000217b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5763:
    00002180: 	leal	0x7(%rdx), %esi
    00002183: 	jmp	.Ltmp5811 # Offset: 8579
.Ltmp5779:
    00002188: 	leaq	DATAat0x3414b(%rip), %rdi
    0000218f: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8591
    00002194: 	nopl	(%rax) # Size: 4
.Ltmp5778:
    00002198: 	movdqu	0x10(%rax), %xmm4
    0000219d: 	movaps	%xmm4, 0x190(%rsp)
    000021a5: 	jmp	.Ltmp5809 # Offset: 8613
.Ltmp5775:
    000021aa: 	leaq	DATAat0x3414b(%rip), %rdi
    000021b1: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8625
    000021b6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp5762:
    000021c0: 	leal	0x6(%rdx), %esi
    000021c3: 	jmp	.Ltmp5811 # Offset: 8643
.Ltmp5761:
    000021c8: 	leal	0x5(%rdx), %esi
    000021cb: 	jmp	.Ltmp5811 # Offset: 8651
.Ltmp5759:
    000021d0: 	movl	$0x4, %esi
    000021d5: 	jmp	.Ltmp5811 # Offset: 8661
.Ltmp5758:
    000021da: 	movl	$0x3, %esi
    000021df: 	jmp	.Ltmp5811 # Offset: 8671
.Ltmp5757:
    000021e4: 	movl	$0x2, %esi
    000021e9: 	jmp	.Ltmp5811 # Offset: 8681
.Ltmp5756:
    000021ee: 	movl	$0x1, %esi
    000021f3: 	jmp	.Ltmp5811 # Offset: 8691
    000021f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp5754:
    00002200: 	movl	$0x1, %esi
    00002205: 	xorl	%ebp, %ebp
    00002207: 	jmp	.Ltmp5811 # Offset: 8711
.Ltmp5745:
    0000220c: 	leaq	DATAat0x3414b(%rip), %rdi
    00002213: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8723
.Ltmp5741:
    00002218: 	leaq	DATAat0x3414b(%rip), %rdi
    0000221f: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8735
.Ltmp5740:
    00002224: 	movq	0x8(%rsp), %rdi
    00002229: 	jmp	.Ltmp5812 # Offset: 8745
    0000222e: 	nop # Size: 2
.Ltmp5705:
    00002230: 	leaq	DATAat0x3414b(%rip), %rdi
    00002237: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8759
.Ltmp5701:
    0000223c: 	leaq	DATAat0x3414b(%rip), %rdi
    00002243: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8771
.Ltmp5677:
    00002248: 	movq	0x8(%rsp), %rdi
    0000224d: 	jmp	.Ltmp5813 # Offset: 8781
    00002252: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5726:
    00002258: 	movl	$0x4, %esi
    0000225d: 	jmp	.Ltmp5772 # Offset: 8797
.Ltmp5725:
    00002262: 	movl	$0x3, %esi
    00002267: 	jmp	.Ltmp5772 # Offset: 8807
.Ltmp5667:
    0000226c: 	leaq	DATAat0x3414b(%rip), %rdi
    00002273: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8819
.Ltmp5639:
    00002278: 	movq	0x8(%rsp), %rdi
    0000227d: 	jmp	.Ltmp5814 # Offset: 8829
    00002282: 	nopw	(%rax,%rax) # Size: 6
.Ltmp5663:
    00002288: 	leaq	DATAat0x3414b(%rip), %rdi
    0000228f: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8847
.Ltmp5660:
    00002294: 	leaq	DATAat0x34008(%rip), %rdi
    0000229b: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8859
.Ltmp5627:
    000022a0: 	leaq	DATAat0x3414b(%rip), %rdi
    000022a7: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8871
.Ltmp5624:
    000022ac: 	leaq	DATAat0x34008(%rip), %rdi
    000022b3: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8883
.Ltmp5631:
    000022b8: 	leaq	DATAat0x3414b(%rip), %rdi
    000022bf: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8895
.Ltmp5698:
    000022c4: 	leaq	DATAat0x34008(%rip), %rdi
    000022cb: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8907
.Ltmp5716:
    000022d0: 	movq	0x8(%rsp), %rdi
    000022d5: 	jmp	.Ltmp5815 # Offset: 8917
.Ltmp5736:
    000022da: 	leaq	DATAat0x34008(%rip), %rdi
    000022e1: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8929
    000022e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp5724:
    000022f0: 	movl	$0x2, %esi
    000022f5: 	jmp	.Ltmp5772 # Offset: 8949
    000022fa: 	endbr64
    000022fe: 	movq	%rax, %rbx
    00002301: 	jmp	.Ltmp5816 # Offset: 8961
    00002306: 	endbr64
.Ltmp5829:
    0000230a: 	movq	%rax, %rbx
    0000230d: 	jmp	.Ltmp5817 # Offset: 8973
    00002312: 	endbr64
.Ltmp5830:
    00002316: 	movq	%rax, %r12
    00002319: 	jmp	.Ltmp5818 # Offset: 8985
    0000231e: 	endbr64
    00002322: 	movq	%rax, %rbx
    00002325: 	jmp	.Ltmp5819 # Offset: 8997
    00002327: 	endbr64
    0000232b: 	movq	%rax, %rbx
    0000232e: 	jmp	.Ltmp5820 # Offset: 9006
    00002333: 	endbr64
.Ltmp5838:
    00002337: 	movq	%rax, %rbx
    0000233a: 	jmp	.Ltmp5821 # Offset: 9018
    0000233c: 	endbr64
    00002340: 	movq	%rax, %rbx
    00002343: 	jmp	.Ltmp5822 # Offset: 9027
    00002345: 	endbr64
    00002349: 	movq	%rax, %rbx
    0000234c: 	jmp	.Ltmp5823 # Offset: 9036
    00002351: 	endbr64
    00002355: 	movq	%rax, %rbx
    00002358: 	jmp	.Ltmp5824 # Offset: 9048
.Ltmp5840:
    0000235d: 	movq	0x1c0(%rsp), %rdi
    00002365: 	cmpq	0x18(%rsp), %rdi
    0000236a: 	je	.Ltmp5819 # Offset: 9066
    0000236c: 	movq	0x1d0(%rsp), %rax
    00002374: 	leaq	0x1(%rax), %rsi
    00002378: 	callq	_ZdlPvm@PLT # Offset: 9080
.Ltmp5819:
    0000237d: 	movq	0x1a0(%rsp), %rdi
    00002385: 	cmpq	0x20(%rsp), %rdi
    0000238a: 	je	.Ltmp5821 # Offset: 9098
    0000238c: 	movq	0x1b0(%rsp), %rax
    00002394: 	leaq	0x1(%rax), %rsi
    00002398: 	callq	_ZdlPvm@PLT # Offset: 9112
.Ltmp5821:
    0000239d: 	movq	0x160(%rsp), %rdi
    000023a5: 	cmpq	0x8(%rsp), %rdi
    000023aa: 	je	.Ltmp5822 # Offset: 9130
    000023ac: 	movq	0x170(%rsp), %rax
    000023b4: 	leaq	0x1(%rax), %rsi
    000023b8: 	callq	_ZdlPvm@PLT # Offset: 9144
.Ltmp5822:
    000023bd: 	movq	0x180(%rsp), %rdi
    000023c5: 	cmpq	0x10(%rsp), %rdi
    000023ca: 	je	.Ltmp5823 # Offset: 9162
    000023cc: 	movq	0x190(%rsp), %rax
    000023d4: 	leaq	0x1(%rax), %rsi
    000023d8: 	callq	_ZdlPvm@PLT # Offset: 9176
.Ltmp5823:
    000023dd: 	movq	0x70(%rsp), %rsi
    000023e2: 	movq	0x28(%rsp), %rax
    000023e7: 	subq	%rax, %rsi
    000023ea: 	testq	%rax, %rax
    000023ed: 	je	.Ltmp5825 # Offset: 9197
    000023ef: 	movq	%rax, %rdi
    000023f2: 	callq	_ZdlPvm@PLT # Offset: 9202
.Ltmp5825:
    000023f7: 	movq	0x120(%rsp), %rdi
    000023ff: 	leaq	0x130(%rsp), %rax
    00002407: 	cmpq	%rax, %rdi
    0000240a: 	je	.Ltmp5826 # Offset: 9226
    0000240c: 	movq	0x130(%rsp), %rax
    00002414: 	leaq	0x1(%rax), %rsi
    00002418: 	callq	_ZdlPvm@PLT # Offset: 9240
.Ltmp5826:
    0000241d: 	movq	%rbx, %rdi
    00002420: 	callq	_Unwind_Resume@PLT # Offset: 9248
.Ltmp5858:
    00002425: 	movq	0x1c0(%rsp), %rdi
    0000242d: 	cmpq	0x18(%rsp), %rdi
    00002432: 	je	.Ltmp5816 # Offset: 9266
    00002434: 	movq	0x1d0(%rsp), %rax
    0000243c: 	leaq	0x1(%rax), %rsi
    00002440: 	callq	_ZdlPvm@PLT # Offset: 9280
.Ltmp5816:
    00002445: 	movq	0x1a0(%rsp), %rdi
    0000244d: 	cmpq	0x20(%rsp), %rdi
    00002452: 	je	.Ltmp5817 # Offset: 9298
    00002454: 	movq	0x1b0(%rsp), %rax
    0000245c: 	leaq	0x1(%rax), %rsi
    00002460: 	callq	_ZdlPvm@PLT # Offset: 9312
.Ltmp5817:
    00002465: 	movq	0x160(%rsp), %rdi
    0000246d: 	cmpq	0x8(%rsp), %rdi
    00002472: 	je	.Ltmp5827 # Offset: 9330
    00002474: 	movq	0x170(%rsp), %rax
    0000247c: 	leaq	0x1(%rax), %rsi
    00002480: 	callq	_ZdlPvm@PLT # Offset: 9344
.Ltmp5827:
    00002485: 	movq	0x180(%rsp), %rdi
    0000248d: 	cmpq	0x10(%rsp), %rdi
    00002492: 	je	.Ltmp5824 # Offset: 9362
    00002494: 	movq	0x190(%rsp), %rax
    0000249c: 	leaq	0x1(%rax), %rsi
    000024a0: 	callq	_ZdlPvm@PLT # Offset: 9376
.Ltmp5824:
    000024a5: 	movq	0xd0(%rsp), %rdi
.Ltmp5828:
    000024ad: 	cmpq	0x60(%rsp), %rdi
    000024b2: 	je	.Ltmp5825 # Offset: 9394
    000024b8: 	movq	(%rdi), %rbp
    000024bb: 	movl	$0x18, %esi
    000024c0: 	callq	_ZdlPvm@PLT # Offset: 9408
    000024c5: 	movq	%rbp, %rdi
    000024c8: 	jmp	.Ltmp5828 # Offset: 9416
    000024ca: 	endbr64
    000024ce: 	jmp	.Ltmp5829 # Offset: 9422
    000024d3: 	endbr64
    000024d7: 	jmp	.Ltmp5830 # Offset: 9431
    000024dc: 	endbr64
    000024e0: 	movq	%rax, %rbx
    000024e3: 	jmp	.Ltmp5831 # Offset: 9443
.Ltmp5839:
    000024e5: 	movq	0x1c0(%rsp), %rdi
    000024ed: 	cmpq	0x18(%rsp), %rdi
    000024f2: 	je	.Ltmp5820 # Offset: 9458
    000024f4: 	movq	0x1d0(%rsp), %rax
    000024fc: 	leaq	0x1(%rax), %rsi
    00002500: 	callq	_ZdlPvm@PLT # Offset: 9472
.Ltmp5820:
    00002505: 	movq	0x1a0(%rsp), %rdi
    0000250d: 	cmpq	0x20(%rsp), %rdi
    00002512: 	je	.Ltmp5832 # Offset: 9490
    00002514: 	movq	0x1b0(%rsp), %rax
    0000251c: 	leaq	0x1(%rax), %rsi
    00002520: 	callq	_ZdlPvm@PLT # Offset: 9504
.Ltmp5832:
    00002525: 	movq	0x160(%rsp), %rdi
    0000252d: 	cmpq	0x8(%rsp), %rdi
    00002532: 	je	.Ltmp5831 # Offset: 9522
    00002534: 	movq	0x170(%rsp), %rax
    0000253c: 	leaq	0x1(%rax), %rsi
    00002540: 	callq	_ZdlPvm@PLT # Offset: 9536
.Ltmp5831:
    00002545: 	movq	0x180(%rsp), %rdi
    0000254d: 	cmpq	0x10(%rsp), %rdi
    00002552: 	je	.Ltmp5833 # Offset: 9554
    00002554: 	movq	0x190(%rsp), %rax
    0000255c: 	leaq	0x1(%rax), %rsi
    00002560: 	callq	_ZdlPvm@PLT # Offset: 9568
.Ltmp5833:
    00002565: 	movq	0x30(%rsp), %rdi
    0000256a: 	movl	$0x4, %esi
    0000256f: 	callq	_ZdlPvm@PLT # Offset: 9583
    00002574: 	jmp	.Ltmp5825 # Offset: 9588
.Ltmp5853:
    00002579: 	movq	0x1c0(%rsp), %rdi
    00002581: 	cmpq	0x18(%rsp), %rdi
    00002586: 	je	.Ltmp5834 # Offset: 9606
    00002588: 	movq	0x1d0(%rsp), %rax
    00002590: 	leaq	0x1(%rax), %rsi
    00002594: 	callq	_ZdlPvm@PLT # Offset: 9620
.Ltmp5834:
    00002599: 	movq	0x1a0(%rsp), %rdi
    000025a1: 	cmpq	0x20(%rsp), %rdi
    000025a6: 	je	.Ltmp5818 # Offset: 9638
    000025a8: 	movq	0x1b0(%rsp), %rax
    000025b0: 	leaq	0x1(%rax), %rsi
    000025b4: 	callq	_ZdlPvm@PLT # Offset: 9652
.Ltmp5818:
    000025b9: 	movq	0x160(%rsp), %rdi
    000025c1: 	cmpq	0x8(%rsp), %rdi
    000025c6: 	je	.Ltmp5835 # Offset: 9670
    000025c8: 	movq	0x170(%rsp), %rax
    000025d0: 	leaq	0x1(%rax), %rsi
    000025d4: 	callq	_ZdlPvm@PLT # Offset: 9684
.Ltmp5835:
    000025d9: 	movq	0x180(%rsp), %rdi
    000025e1: 	cmpq	0x10(%rsp), %rdi
    000025e6: 	je	.Ltmp5836 # Offset: 9702
    000025e8: 	movq	0x190(%rsp), %rax
    000025f0: 	leaq	0x1(%rax), %rsi
    000025f4: 	callq	_ZdlPvm@PLT # Offset: 9716
.Ltmp5836:
    000025f9: 	movq	0xd0(%rsp), %r13
    00002601: 	addq	$0x8, %rbp
    00002605: 	testq	%r13, %r13
    00002608: 	jne	.Ltmp5837 # Offset: 9736
.Ltmp5842:
    0000260a: 	movq	%r12, %rbx
    0000260d: 	jmp	.Ltmp5825 # Offset: 9741
    00002612: 	endbr64
    00002616: 	movq	%rax, %r12
    00002619: 	jmp	.Ltmp5836 # Offset: 9753
    0000261b: 	endbr64
    0000261f: 	jmp	.Ltmp5838 # Offset: 9759
    00002624: 	endbr64
    00002628: 	movq	%rax, %rbx
    0000262b: 	jmp	.Ltmp5839 # Offset: 9771
    00002630: 	endbr64
    00002634: 	movq	%rax, %rbx
    00002637: 	jmp	.Ltmp5840 # Offset: 9783
.Ltmp5841:
    0000263c: 	movq	(%rbx), %rdi
    0000263f: 	movl	$0x200, %esi
    00002644: 	addq	$0x8, %rbx
    00002648: 	callq	_ZdlPvm@PLT # Offset: 9800
.Ltmp5837:
    0000264d: 	cmpq	%rbx, %rbp
    00002650: 	ja	.Ltmp5841 # Offset: 9808
    00002652: 	movq	0xd8(%rsp), %rax
    0000265a: 	movq	%r13, %rdi
    0000265d: 	leaq	(,%rax,8), %rsi
    00002665: 	callq	_ZdlPvm@PLT # Offset: 9829
    0000266a: 	jmp	.Ltmp5842 # Offset: 9834
    0000266c: 	endbr64
.Ltmp5850:
    00002670: 	movq	%rax, %rbx
    00002673: 	jmp	.Ltmp5843 # Offset: 9843
    00002675: 	endbr64
    00002679: 	movq	%rax, %rbx
    0000267c: 	jmp	.Ltmp5844 # Offset: 9852
.Ltmp5843:
    0000267e: 	movq	0x1c0(%rsp), %rdi
    00002686: 	cmpq	0x18(%rsp), %rdi
    0000268b: 	je	.Ltmp5844 # Offset: 9867
    0000268d: 	movq	0x1d0(%rsp), %rax
    00002695: 	leaq	0x1(%rax), %rsi
    00002699: 	callq	_ZdlPvm@PLT # Offset: 9881
.Ltmp5844:
    0000269e: 	movq	0x1a0(%rsp), %rdi
    000026a6: 	cmpq	0x20(%rsp), %rdi
    000026ab: 	je	.Ltmp5845 # Offset: 9899
    000026ad: 	movq	0x1b0(%rsp), %rax
    000026b5: 	leaq	0x1(%rax), %rsi
    000026b9: 	callq	_ZdlPvm@PLT # Offset: 9913
.Ltmp5845:
    000026be: 	movq	0x180(%rsp), %rdi
    000026c6: 	cmpq	0x10(%rsp), %rdi
    000026cb: 	je	.Ltmp5846 # Offset: 9931
    000026cd: 	movq	0x190(%rsp), %rax
    000026d5: 	leaq	0x1(%rax), %rsi
    000026d9: 	callq	_ZdlPvm@PLT # Offset: 9945
.Ltmp5846:
    000026de: 	movq	0x140(%rsp), %rdi
    000026e6: 	cmpq	0x28(%rsp), %rdi
    000026eb: 	je	.Ltmp5847 # Offset: 9963
    000026ed: 	movq	0x150(%rsp), %rax
    000026f5: 	leaq	0x1(%rax), %rsi
    000026f9: 	callq	_ZdlPvm@PLT # Offset: 9977
.Ltmp5847:
    000026fe: 	movq	0x160(%rsp), %rdi
    00002706: 	cmpq	0x8(%rsp), %rdi
    0000270b: 	je	.Ltmp5848 # Offset: 9995
    0000270d: 	movq	0x170(%rsp), %rax
    00002715: 	leaq	0x1(%rax), %rsi
    00002719: 	callq	_ZdlPvm@PLT # Offset: 10009
.Ltmp5848:
    0000271e: 	movq	%rbp, %rdi
.Ltmp5849:
    00002721: 	testq	%rdi, %rdi
    00002724: 	je	.Ltmp5825 # Offset: 10020
    0000272a: 	movq	(%rdi), %r12
    0000272d: 	movl	$0x10, %esi
    00002732: 	callq	_ZdlPvm@PLT # Offset: 10034
    00002737: 	movq	%r12, %rdi
    0000273a: 	jmp	.Ltmp5849 # Offset: 10042
    0000273c: 	endbr64
    00002740: 	jmp	.Ltmp5850 # Offset: 10048
    00002745: 	endbr64
    00002749: 	jmp	.Ltmp5850 # Offset: 10057
    0000274e: 	endbr64
    00002752: 	movq	%rax, %rbx
    00002755: 	jmp	.Ltmp5825 # Offset: 10069
    0000275a: 	endbr64
    0000275e: 	movq	%rax, %rbx
    00002761: 	jmp	.Ltmp5833 # Offset: 10081
    00002766: 	endbr64
.Ltmp5851:
    0000276a: 	movq	%rax, %rbx
    0000276d: 	jmp	.Ltmp5832 # Offset: 10093
    00002772: 	endbr64
    00002776: 	jmp	.Ltmp5851 # Offset: 10102
    00002778: 	endbr64
    0000277c: 	movq	%rax, %r12
    0000277f: 	jmp	.Ltmp5835 # Offset: 10111
    00002784: 	endbr64
    00002788: 	movq	%rax, %rbp
    0000278b: 	jmp	.Ltmp5852 # Offset: 10123
    0000278d: 	endbr64
    00002791: 	movq	%rax, %r12
    00002794: 	jmp	.Ltmp5853 # Offset: 10132
    00002799: 	endbr64
    0000279d: 	movq	%rax, %r12
    000027a0: 	jmp	.Ltmp5834 # Offset: 10144
.Ltmp5852:
    000027a5: 	movq	0xd0(%rsp), %rdi
.Ltmp5855:
    000027ad: 	cmpq	0x60(%rsp), %rdi
    000027b2: 	je	.Ltmp5854 # Offset: 10162
    000027b4: 	movq	(%rdi), %rbx
    000027b7: 	movl	$0x18, %esi
    000027bc: 	callq	_ZdlPvm@PLT # Offset: 10172
    000027c1: 	movq	%rbx, %rdi
    000027c4: 	jmp	.Ltmp5855 # Offset: 10180
.Ltmp5857:
    000027c6: 	movq	0xb0(%rsp), %rdi
.Ltmp5859:
    000027ce: 	testq	%rdi, %rdi
    000027d1: 	jne	.Ltmp5856 # Offset: 10193
.Ltmp5854:
    000027d3: 	movq	%rbp, %rbx
    000027d6: 	jmp	.Ltmp5825 # Offset: 10198
    000027db: 	endbr64
    000027df: 	movq	%rax, %rbx
    000027e2: 	jmp	.Ltmp5827 # Offset: 10210
    000027e7: 	endbr64
    000027eb: 	movq	%rax, %rbp
    000027ee: 	jmp	.Ltmp5857 # Offset: 10222
    000027f0: 	endbr64
.Ltmp5860:
    000027f4: 	movq	%rax, %rbx
    000027f7: 	jmp	.Ltmp5846 # Offset: 10231
    000027fc: 	endbr64
    00002800: 	movq	%rax, %rbx
    00002803: 	jmp	.Ltmp5858 # Offset: 10243
.Ltmp5856:
    00002808: 	movq	(%rdi), %rbx
    0000280b: 	movl	$0x10, %esi
    00002810: 	callq	_ZdlPvm@PLT # Offset: 10256
    00002815: 	movq	%rbx, %rdi
    00002818: 	jmp	.Ltmp5859 # Offset: 10264
    0000281a: 	endbr64
    0000281e: 	movq	%rax, %rbx
    00002821: 	jmp	.Ltmp5845 # Offset: 10273
    00002826: 	endbr64
    0000282a: 	jmp	.Ltmp5860 # Offset: 10282
    0000282c: 	endbr64
    00002830: 	jmp	.Ltmp5850 # Offset: 10288
    00002835: 	endbr64
    00002839: 	jmp	.Ltmp5850 # Offset: 10297
    0000283e: 	endbr64
    00002842: 	jmp	.Ltmp5850 # Offset: 10306
    00002847: 	endbr64
    0000284b: 	jmp	.Ltmp5850 # Offset: 10315
    00002850: 	endbr64
    00002854: 	jmp	.Ltmp5850 # Offset: 10324
    00002859: 	endbr64
    0000285d: 	jmp	.Ltmp5850 # Offset: 10333
    00002862: 	endbr64
    00002866: 	movq	%rax, %rbx
    00002869: 	jmp	.Ltmp5848 # Offset: 10345
    0000286e: 	endbr64
    00002872: 	movq	%rax, %rbx
    00002875: 	jmp	.Ltmp5847 # Offset: 10357
    0000287a: 	endbr64
    0000287e: 	jmp	.Ltmp5850 # Offset: 10366
    00002883: 	endbr64
    00002887: 	jmp	.Ltmp5850 # Offset: 10375
    0000288c: 	endbr64
    00002890: 	jmp	.Ltmp5850 # Offset: 10384
    00002895: 	endbr64
    00002899: 	jmp	.Ltmp5850 # Offset: 10393
    0000289e: 	endbr64
    000028a2: 	jmp	.Ltmp5850 # Offset: 10402
    000028a7: 	endbr64
    000028ab: 	jmp	.Ltmp5850 # Offset: 10411
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIfEvv"

Binary Function "_Z24binarysearch_recur_innerISt18_Fwd_list_iteratorIfEflEbT_T0_T1_" after disassembly {
  Number      : 506
  State       : disassembled
  Address     : 0x339a0
  Size        : 0x5d
  MaxSize     : 0x60
  Offset      : 0x339a0
  Section     : .text
  Orc Section : .local.text._Z24binarysearch_recur_innerISt18_Fwd_list_iteratorIfEflEbT_T0_T1_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0505:
    00000000: 	endbr64
.Ltmp5866:
    00000004: 	testq	%rsi, %rsi
    00000007: 	je	.Ltmp5861 # Offset: 7
    00000009: 	movq	%rsi, %rcx
    0000000c: 	movq	%rdi, %rdx
    0000000f: 	shrq	$0x3f, %rcx
    00000013: 	addq	%rsi, %rcx
    00000016: 	sarq	%rcx
    00000019: 	leaq	-0x1(%rcx), %rax
    0000001d: 	je	.Ltmp5862 # Offset: 29
    0000001f: 	nop # Size: 1
.Ltmp5863:
    00000020: 	movq	(%rdx), %rdx
    00000023: 	subq	$0x1, %rax
    00000027: 	jae	.Ltmp5863 # Offset: 39
.Ltmp5862:
    00000029: 	movss	0x8(%rdx), %xmm1
    0000002e: 	comiss	%xmm1, %xmm0
    00000031: 	ja	.Ltmp5864 # Offset: 49
    00000033: 	comiss	%xmm0, %xmm1
    00000036: 	ja	.Ltmp5865 # Offset: 54
    00000038: 	movl	$0x1, %eax
    0000003d: 	retq # Offset: 61
    0000003e: 	nop # Size: 2
.Ltmp5861:
    00000040: 	xorl	%eax, %eax
    00000042: 	retq # Offset: 66
    00000043: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5864:
    00000048: 	addq	$0x1, %rcx
    0000004c: 	movq	(%rdx), %rdi
    0000004f: 	subq	%rcx, %rsi
    00000052: 	jmp	.Ltmp5866 # Offset: 82
    00000054: 	nopl	(%rax) # Size: 4
.Ltmp5865:
    00000058: 	movq	%rcx, %rsi
    0000005b: 	jmp	.Ltmp5866 # Offset: 91
DWARF CFI Instructions:
    <empty>
End of Function "_Z24binarysearch_recur_innerISt18_Fwd_list_iteratorIfEflEbT_T0_T1_"

Binary Function "_Z18binarysearch_recurISt18_Fwd_list_iteratorIfEfEbT_S2_T0_" after disassembly {
  Number      : 507
  State       : disassembled
  Address     : 0x33a00
  Size        : 0x149
  MaxSize     : 0x149
  Offset      : 0x33a00
  Section     : .text
  Orc Section : .local.text._Z18binarysearch_recurISt18_Fwd_list_iteratorIfEfEbT_S2_T0_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0506:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r9
    00000007: 	cmpq	%rsi, %rdi
    0000000a: 	je	.Ltmp5867 # Offset: 10
    0000000c: 	movq	%rdi, %rdx
    0000000f: 	xorl	%eax, %eax
    00000011: 	nopl	(%rax) # Size: 7
.Ltmp5868:
    00000018: 	movq	(%rdx), %rdx
    0000001b: 	movq	%rax, %r8
    0000001e: 	addq	$0x1, %rax
    00000022: 	cmpq	%rsi, %rdx
    00000025: 	jne	.Ltmp5868 # Offset: 37
    00000027: 	movq	%rax, %rsi
    0000002a: 	movq	%rdi, %rcx
    0000002d: 	sarq	%rsi
    00000030: 	leaq	-0x1(%rsi), %rdx
    00000034: 	je	.Ltmp5869 # Offset: 52
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp5870:
    00000040: 	movq	(%rcx), %rcx
    00000043: 	subq	$0x1, %rdx
    00000047: 	jae	.Ltmp5870 # Offset: 71
.Ltmp5869:
    00000049: 	movss	0x8(%rcx), %xmm1
    0000004e: 	comiss	%xmm1, %xmm0
    00000051: 	ja	.Ltmp5871 # Offset: 81
    00000053: 	comiss	%xmm0, %xmm1
    00000056: 	ja	.Ltmp5872 # Offset: 86
.Ltmp5876:
    00000058: 	movl	$0x1, %eax
    0000005d: 	retq # Offset: 93
    0000005e: 	nop # Size: 2
.Ltmp5867:
    00000060: 	xorl	%eax, %eax
    00000062: 	retq # Offset: 98
    00000063: 	nopl	(%rax,%rax) # Size: 5
.Ltmp5871:
    00000068: 	subq	%rsi, %r8
    0000006b: 	je	.Ltmp5867 # Offset: 107
    0000006d: 	movq	%r8, %rsi
    00000070: 	movq	(%rcx), %rdi
    00000073: 	shrq	$0x3f, %rsi
    00000077: 	addq	%r8, %rsi
    0000007a: 	movq	%rdi, %rdx
    0000007d: 	sarq	%rsi
    00000080: 	leaq	-0x1(%rsi), %rax
    00000084: 	je	.Ltmp5873 # Offset: 132
    00000086: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp5874:
    00000090: 	movq	(%rdx), %rdx
    00000093: 	subq	$0x1, %rax
    00000097: 	jae	.Ltmp5874 # Offset: 151
.Ltmp5873:
    00000099: 	movss	0x8(%rdx), %xmm1
    0000009e: 	comiss	%xmm1, %xmm0
    000000a1: 	ja	.Ltmp5875 # Offset: 161
.Ltmp5883:
    000000a3: 	comiss	%xmm0, %xmm1
    000000a6: 	jbe	.Ltmp5876 # Offset: 166
.Ltmp5880:
    000000a8: 	jmp	_Z24binarysearch_recur_innerISt18_Fwd_list_iteratorIfEflEbT_T0_T1_ # TAILCALL  # Offset: 168
    000000ad: 	nopl	(%rax) # Size: 3
.Ltmp5872:
    000000b0: 	testq	%rsi, %rsi
    000000b3: 	je	.Ltmp5867 # Offset: 179
    000000b5: 	sarq	$0x2, %rax
    000000b9: 	leaq	-0x1(%rax), %rdx
    000000bd: 	je	.Ltmp5877 # Offset: 189
    000000bf: 	nop # Size: 1
.Ltmp5878:
    000000c0: 	movq	(%r9), %r9
    000000c3: 	subq	$0x1, %rdx
    000000c7: 	jae	.Ltmp5878 # Offset: 199
.Ltmp5877:
    000000c9: 	movss	0x8(%r9), %xmm1
    000000cf: 	comiss	%xmm1, %xmm0
    000000d2: 	ja	.Ltmp5879 # Offset: 210
    000000d4: 	comiss	%xmm0, %xmm1
    000000d7: 	jbe	.Ltmp5876 # Offset: 215
    000000dd: 	movq	%rax, %rsi
    000000e0: 	jmp	.Ltmp5880 # Offset: 224
.Ltmp5879:
    000000e2: 	addq	$0x1, %rax
    000000e6: 	movq	(%r9), %rdi
    000000e9: 	subq	%rax, %rsi
    000000ec: 	jmp	_Z24binarysearch_recur_innerISt18_Fwd_list_iteratorIfEflEbT_T0_T1_ # TAILCALL  # Offset: 236
.Ltmp5875:
    000000f1: 	movq	(%rdx), %rdx
    000000f4: 	addq	$0x1, %rsi
    000000f8: 	movq	%rdx, %rdi
    000000fb: 	subq	%rsi, %r8
    000000fe: 	je	.Ltmp5867 # Offset: 254
    00000104: 	movq	%r8, %rsi
    00000107: 	shrq	$0x3f, %rsi
    0000010b: 	addq	%r8, %rsi
    0000010e: 	sarq	%rsi
    00000111: 	leaq	-0x1(%rsi), %rax
    00000115: 	je	.Ltmp5881 # Offset: 277
    00000117: 	nopw	(%rax,%rax) # Size: 9
.Ltmp5882:
    00000120: 	movq	(%rdx), %rdx
    00000123: 	subq	$0x1, %rax
    00000127: 	jae	.Ltmp5882 # Offset: 295
.Ltmp5881:
    00000129: 	movss	0x8(%rdx), %xmm1
    0000012e: 	comiss	%xmm1, %xmm0
    00000131: 	jbe	.Ltmp5883 # Offset: 305
    00000137: 	addq	$0x1, %rsi
    0000013b: 	movq	(%rdx), %rdi
    0000013e: 	subq	%rsi, %r8
    00000141: 	movq	%r8, %rsi
    00000144: 	jmp	_Z24binarysearch_recur_innerISt18_Fwd_list_iteratorIfEflEbT_T0_T1_ # TAILCALL  # Offset: 324
DWARF CFI Instructions:
    <empty>
End of Function "_Z18binarysearch_recurISt18_Fwd_list_iteratorIfEfEbT_S2_T0_"

Binary Function "_fini" after disassembly {
  Number      : 508
  State       : disassembled
  Address     : 0x33b4c
  Size        : 0xd
  MaxSize     : 0xd
  Offset      : 0x33b4c
  Section     : .fini
  Orc Section : .local.text._fini
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0507:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	addq	$0x8, %rsp
    0000000c: 	retq # Offset: 12
DWARF CFI Instructions:
    <empty>
End of Function "_fini"

BOLT-INFO: 0 out of 509 functions in the binary (0.0%) have non-empty execution profile
BOLT-INFO: 2227 instructions were shortened
BOLT-INFO: removed 1428 empty blocks
BOLT-INFO: SCTC: patched 5 tail calls (5 forward) tail calls (0 backward) from a total of 5 while removing 3 double jumps and removing 5 basic blocks totalling 25 bytes of code. CTCs total execution count is 0 and the number of times CTCs are taken is 0
BOLT-INFO: patched build-id (flipped last bit)
BOLT: 502 out of 536 functions were overwritten.
BOLT-INFO: rewriting .eh_frame_hdr in-place
BOLT-INFO: setting _end to 0x20c128
